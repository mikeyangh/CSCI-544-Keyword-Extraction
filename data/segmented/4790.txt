Page1/ 虚拟化/ 软件/ 栈/ 安全/ 研究/ 朱民涂/ 碧波/ 孟丹/ (/ 中国科学院/ 信息工程/ 研究所/ 北京/ 100093/ )/ (/ 中国科学院/ 大学/ 北京/ 100049/ )/ 摘要/ 随着/ 云/ 计算/ 的/ 兴起/ ,/ 虚拟化/ 技术/ 在/ IT/ 产业/ 中/ 得到/ 了/ 广泛应用/ ./ 政府/ 、/ 企业/ 和/ 个人/ 已/ 将/ 自身/ 的/ 大量/ 业务/ 及其/ 敏感数据/ 转移/ 到/ 了/ 云端/ 的/ 虚拟机/ 中/ ./ 在/ 虚拟化/ 软件/ 栈中/ ,/ 虚拟机/ 监控器/ 具有/ 最高/ 权限/ 和/ 较/ 小/ 的/ 可信计算/ 基/ ,/ 故而/ 能为/ 虚拟化/ 系统/ 提供/ 安全监控/ 和/ 保护/ ./ 但/ 同时/ 也/ 引入/ 了/ 新/ 的/ 软件/ 层/ ,/ 增加/ 了/ 脆弱性/ ,/ 增大/ 了/ 攻击面/ ./ 另外/ ,/ 多/ 租户/ 模式/ 以及/ 软硬件/ 平台/ 资源共享/ ,/ 更/ 加剧/ 了/ 新/ 软件/ 栈/ 的/ 安全/ 威胁/ ./ 因此/ ,/ 虚拟机/ 和/ 虚拟机/ 监控器/ 的/ 安全/ 和/ 隐私/ 备受/ 学术界/ 和/ 工业界/ 关注/ ./ 该文/ 对/ 虚拟化/ 软件/ 栈/ 不同/ 软件/ 层/ 的/ 安全/ 威胁/ 、/ 攻击方式/ 和/ 威胁/ 机理/ 进行/ 了/ 分析/ ,/ 并/ 针对/ 这些/ 安全/ 威胁/ ,/ 以/ 可信/ 基为/ 视角/ ,/ 从/ 基于/ 虚拟机/ 监控器/ 、/ 基于/ 微/ 虚拟机/ 监控器/ 、/ 基于/ 嵌套/ 虚拟化/ 和/ 基于/ 安全/ 硬件/ 等/ 类别/ 分析/ 比较/ 了/ 国内外/ 相关/ 安全/ 方案/ 和/ 技术/ ,/ 并/ 指出/ 了/ 当前/ 仍然/ 存在/ 的/ 安全/ 问题/ ./ 最后/ 对/ 未来/ 的/ 研究/ 方向/ 进行/ 了/ 探讨/ 和/ 分析/ ,/ 并/ 从/ 软件/ 和/ 硬件/ 两个/ 层面/ 给出/ 了/ 虚拟化/ 软件/ 栈/ 的/ 安全/ 增强/ 方案/ ./ 关键词/ 虚拟化/ 软件/ 栈/ ;/ 虚拟机/ 安全/ ;/ 云/ 安全/ ;/ 内存/ 安全/ ;/ 计算机/ 安全/ 体系结构/ 1/ 引言/ 近年来/ ,/ 云/ 计算/ (/ cloudcomputing/ )/ 得到/ 了/ 迅速/ 发展/ ,/ 具有/ 广阔/ 的/ 应用/ 前景/ ./ 目前/ ,/ 谷歌/ 、/ IBM/ 、/ 微软/ 、/ 亚马逊/ 、/ 惠普/ 、/ 思杰/ 、/ 百度/ 、/ 腾讯/ 和/ 阿里巴巴/ 等/ 知名/ IT/ 企业/ 都/ 在/ 全力/ 推广/ 自身/ 的/ 云/ 服务/ ./ 云/ 计算/ 以/ 低成本/ 的/ 资源/ 租赁/ 方式/ 提供/ 高/ 可靠/ 、/ 高/ 可用/ 、/ 规模/ 可/ 伸缩/ 的/ 个性化/ 服务/ ,/ 得到/ 了/ 众多/ 公司/ 和/ 个人/ 的/ 青睐/ [/ 1/ -/ 2/ ]/ ./ 云/ 计算/ 与/ 传统/ IT/ 环境/ 的/ 最大/ 区别/ 在于/ 其/ 虚拟/ 的/ 计算环境/ ./ 虚拟化/ 是/ 支撑/ 云/ 计算/ 的/ 技术/ 基石/ ,/ 云/ 计算/ 中/ 所有/ 应用/ 的/ 部署/ 环境/ 和/ 资源/ 利用/ 都/ 依赖于/ 虚拟/ 平台/ 的/ 管理/ 、/ 扩展/ 和/ 迁移/ 等/ ,/ 各种/ 敏感/ 操作/ 都/ 经由/ 虚拟化/ 层/ 模拟/ 完成/ ./ 虚拟化/ 技术/ 通过/ 对/ 底层/ 硬件/ (/ 如/ CPU/ 、/ 内存/ 、/ 网络/ )/ 的/ 虚拟/ ,/ 支持/ 在/ 单一/ 服务器/ 上/ 并行/ 运行/ 多个/ 虚拟机/ VM/ (/ VirtualMachine/ )/ ,/ 这/ 提高/ 了/ 服务器/ 的/ 利用率/ ,/ 并/ 为/ 应用/ 提供/ 了/ 灵活/ 可变/ 、/ 动态/ 可/ 扩展/ 的/ 平台/ 服务/ ./ 然而/ ,/ 云/ 计算/ 促进/ 了/ 虚拟化/ 在/ IT/ 产业/ 中/ 的/ 应用/ ,/ 但/ 同时/ 也/ 使得/ 虚拟化/ 软件/ 栈/ 成为/ 重点/ 攻击/ 目标/ ./ 首先/ ,/ 虚拟化/ 扩增/ 了/ 传统/ 服务器/ 的/ 软件/ 栈/ ./ 众所周知/ ,/ 软件/ 栈越/ 大/ 、/ 越/ 复杂/ ,/ 攻击面/ 和/ 脆弱性/ 就/ 越/ 多/ ,/ 安全性/ 则/ 更/ 难以/ 保障/ ./ 根据/ NVD/ 统计/ ,/ 2015/ 年/ Xen/ 曝出/ 21/ 个/ 安全漏洞/ ,/ 而/ 近两年/ KVM/ 拥有/ 24/ 个/ 以上/ 的/ 安全漏洞/ ①/ ./ 如果/ 具有/ 最高/ 特权/ 的/ 虚拟机/ 监控器/ (/ hypervisor/ )/ 被/ 控制/ ,/ 其上/ 运行/ 的/ 所有/ 虚拟机/ 的/ 安全/ 将/ 难以/ 保证/ ./ 其次/ ,/ 在/ 云/ 计算/ 平台/ 中/ ,/ 物理/ 资源/ 通过/ 虚拟化/ 技术/ 供/ 多个/ 租户/ 共享/ ,/ 这/ 导致/ 攻击者/ 和/ 其他/ 用户/ 可能/ 共处/ 同一/ 台/ 物理/ 机/ ,/ 而/ 虚拟化/ 技术/ 提供/ 的/ 隔离/ 性/ 并/ 不强/ ,/ 这/ 降低/ 了/ 攻击/ 难度/ ②/ ./ 最后/ ,/ 排除/ 软件/ 漏洞/ ,/ 攻击者/ 利用/ 侧/ 信道/ 攻击/ (/ side/ -/ channelattack/ )/ 也/ 可/ 窃取/ 其它/ 虚拟机/ 的/ 敏感数据/ [/ 3/ ]/ ./ 不断/ 发生/ 的/ 攻击/ 事件/ 充分说明/ 了/ 虚拟化/ 软件/ 栈/ 安全/ 的/ 重要性/ ./ 例如/ ,/ 2007/ 年云/ 服务提供商/ Salesforce/ ./ com/ 遭受/ 攻击/ ,/ 导致/ 大量/ 用户/ 的/ 敏感数据/ 泄露/ 丢失/ ;/ 2009/ 年/ Google/ 发生/ 大批/ 用户/ 文件/ 泄漏/ 事件/ ;/ 2010/ 年/ 和/ 2011/ 年/ 微软/ 和/ Google/ 的/ 邮箱/ 服务/ 分别/ 出现/ 了/ 数据/ 丢失/ 事件/ ;/ 2014/ 年/ iCloud/ 遭受/ 攻击/ ,/ 导致/ 大量/ 好莱坞/ 明星/ 的/ 私照/ 被/ 泄露/ ③/ ./ 除了/ 黑客/ 的/ 主动攻击/ 之外/ ,/ 云/ 计算/ 还/ 存在/ 信任/ 缺失/ 问题/ [/ 4/ ]/ ./ 在/ 云/ 计算/ 中/ ,/ 用户/ 把/ 计算/ 等/ 资源/ 外包/ 给/ 云/ 提供商/ ,/ 失去/ 了/ 对/ 计算/ 和/ 数据/ 的/ 完全/ 控制/ ./ 用户/ 完全/ 不能/ 确定/ 自己/ 的/ 数据/ 是否/ 受到/ 保护/ 、/ 应用程序/ 是否/ 被/ 正确/ 执行/ ./ 为/ 保护/ 用户/ 隐私/ ,/ 云/ 提供商/ 的/ 内部人员/ 应/ 具有/ 最小/ 权限/ ,/ 但/ 事实/ 并非如此/ ./ 内部人员/ 的/ 失职/ 、/ 好奇/ 等/ 都/ 会/ 导致/ 数据/ 破坏/ 、/ 隐私/ 泄漏/ ./ 例如/ 2010/ 年/ Google/ 的/ 两名/ 员工/ 长期/ 窥探/ 用户/ 的/ GoogleVoice/ 和/ Gtalk/ 信息/ ④/ ./ 此外/ ,/ 内部人员/ 可以/ 绕过/ 部分/ 安全/ 机制/ ,/ 更/ 易/ 实施/ 攻击/ ./ 如今/ ,/ 在/ 用户/ 不能/ 对云/ 平台/ 执行/ 环境/ 进行/ 管控/ 和/ 安全/ 确认/ 的/ 情况/ 下/ ,/ 云/ 提供商/ 未能/ 提供/ 有效/ 的/ 证据/ 证明/ 用户/ 数据/ 的/ 安全/ ./ 以上/ 论述/ 很/ 好/ 地/ 解释/ 了/ 为何/ 很多/ 公司/ 的/ CIO/ (/ ChiefInformationOfficer/ )/ 迟迟/ 不/ 将/ 其/ 核心/ 业务/ 部署/ 到/ 云/ 平台/ ./ 为/ 消除/ 用户/ 的/ 顾虑/ ,/ 让/ 企业/ 和/ 个人/ 大规模/ 地/ 使用/ 云/ 平台/ 和/ 服务/ ,/ 数据安全/ 是/ 云/ 提供商/ 目前/ 亟待解决/ 的/ 问题/ ./ 为此/ ,/ 产业界/ 和/ 学术界/ 都/ 在/ 不断/ 地/ 提出/ 相应/ 的/ 安全/ 机制/ 和/ 解决方案/ ./ 当前/ 虚拟化/ 的/ 研究/ 主要/ 集中/ 在/ 对/ hypervisor/ 的/ 保护/ 、/ 对/ 虚拟机/ 的/ 隔离/ 以及/ 对/ VM/ 的/ 内部/ 系统/ 、/ 应用/ 的/ 保护/ ,/ 甚至/ 将/ 虚拟化/ 从/ 可信计算/ 基/ (/ TrustedComputingBase/ ,/ TCB/ )/ 中/ 剔除/ ,/ 以此/ 来/ 增强/ 虚拟化/ 软件/ 栈/ 的/ 安全/ ./ 本文/ 目的/ 在于/ 对/ 虚拟化/ 软件/ 栈/ 存在/ 的/ 安全/ 威胁/ 、/ 研究/ 现状及/ 解决方案/ 进行/ 一个/ 全面/ 的/ 论述/ ,/ 并/ 通过/ 分析/ 、/ 比较/ 找出/ 未来/ 虚拟化/ 软件/ 栈/ 安全/ 的/ 研究/ 方向/ ./ 本文/ 首先/ 在/ 第/ 2/ 节对云/ 计算/ 框架/ 和/ 虚拟化/ 技术/ 进行/ 简要/ 的/ 介绍/ ./ 然后/ ,/ 在/ 第/ 3/ 节对/ 虚拟化/ 软件/ 栈/ 的/ 安全/ 威胁/ 进行/ 分析/ 和/ 分类/ ./ 随之/ ,/ 第/ 4/ 节/ 结合/ 第/ 3/ 节中/ 的/ 安全/ 威胁/ ,/ 从/ 不同/ 层次/ 阐述/ 近年来/ 学术界/ 为/ 增强/ 虚拟化/ 软件/ 栈/ 的/ 安全/ 在/ 各/ 方面/ 所/ 做/ 的/ 尝试/ ./ 最后/ ,/ ①/ ②/ ③/ leak/ ,/ 2014/ ,/ 9/ ,/ 23/ ④/ Page3/ 在/ 第/ 5/ 节对/ 未来/ 虚拟化/ 软件/ 栈/ 的/ 安全/ 目标/ 和/ 发展/ 方向/ 进行/ 展望/ ,/ 并/ 在/ 第/ 6/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 云/ 计算/ 与/ 虚拟化/ 云/ 计算/ 是/ 继/ 分布式计算/ 、/ 网格/ 计算/ 和/ 对/ 等/ 计算/ 之后/ 的/ 一种/ 新型/ 计算/ 模式/ [/ 5/ ]/ ./ 狭义/ 的/ 云/ 计算/ 是/ 指/ 通过/ 虚拟化/ 技术/ 和/ 分布式计算/ 构建/ 的/ 数据中心/ ./ 广义/ 图/ 1/ 云/ 计算/ 概要/ 图/ 从/ 图/ 1/ 中/ 可知/ ,/ 典型/ 的/ 云/ 计算/ 主要/ 包括/ 三/ 部分/ :/ 云/ 提供商/ 、/ 云/ 客户/ 和/ 终端用户/ ./ 云/ 客户/ 从云/ 提供商/ 租用/ 资源/ ,/ 然后/ 部署/ 自己/ 的/ 服务/ ,/ 供/ 终端用户/ 使用/ ./ 终端用户/ 利用/ 终端/ 通过/ 网络/ 就/ 可/ 访问/ 相关/ 服务/ ./ 云/ 客户/ 不/ 需要/ 购买/ 软/ 、/ 硬件资源/ ,/ 只/ 需/ 根据/ 业务/ 需求/ 动态/ 地/ 从/ 云/ 提供商/ 租赁/ 即可/ ./ 云/ 提供商/ 以/ 虚拟机/ 的/ 方式/ 向/ 客户/ 提供/ 计算资源/ ./ IT/ 领域/ 按/ 需/ 服务/ 、/ 弹性/ 扩展/ 的/ 理念/ 在/ 云/ 计算/ 中/ 得到/ 了/ 真正/ 的/ 体现/ ./ 未来/ 云/ 计算/ 将/ 形成/ 一个/ 以云/ 基础设施/ 为/ 核心/ 、/ 涵盖/ 云/ 基础/ 软件/ 、/ 平台/ 服务/ 与/ 云/ 应用服务/ 等/ 多层次/ 的/ IT/ 模式/ ./ 从图/ 1/ 可知/ ,/ 云/ 基础设施/ 的/ 物理/ 实体/ 是/ 数据中心/ ./ 数据中心/ 内/ 的/ 物理/ 硬件/ 通过/ 虚拟化/ 的/ 抽象/ 、/ 简化/ ,/ 形成/ 了/ 弹性/ 虚拟/ 计算资源/ 池/ ./ 虚拟化/ 角度/ 下/ 的/ 云/ 计算/ 架构/ 如图/ 2/ 所示/ ./ 从/ 上层/ 看/ ,/ 云/ 计算/ 是/ 一种/ 资源整合/ 和/ 利用/ 的/ 模型/ ,/ 而/ 下层/ 的/ 技术/ 支撑/ 则/ 是/ 虚拟化/ 技术/ ./ 利用/ 虚拟化/ 技术/ ,/ 数据中心/ 形成/ 了/ 一个/ 服务/ 导向/ 的/ 、/ 可/ 伸缩/ 的/ IT/ 基础架构/ ./ 如图/ 2/ 所示/ ,/ 虚拟化/ 在/ 单一/ 物理/ 服务器/ 上/ 构建/ 了/ 一个/ 包含/ 虚拟机/ 监控器/ 、/ 客户/ 操作系统/ (/ GuestOperatingSystem/ ,/ GOS/ )/ 和/ 应用/ (/ Applications/ ,/ Apps/ )/ 的/ 虚拟化/ 软件/ 栈/ ,/ 而/ 这/ 可以/ 看作/ 是/ 云/ 计算/ 的/ 雏形/ 和/ 缩影/ ./ Hypervisor/ 作为/ 虚拟化/ 的/ 核心部件/ ,/ 是/ 一种/ 位于/ 虚拟机/ 和/ 底层/ 硬件/ 之间/ 的/ 特殊/ 操作系统/ ,/ 目的/ 是/ 提高/ 资源/ 利用率/ ,/ 降低/ 能耗/ ,/ 以及/ 提高/ 资源配置/ 的/ 灵活性/ 和/ 弹性/ 服务/ ./ Hypervisor/ 主要/ 负责/ 虚拟机/ 的/ 管理/ 和/ 通信/ 、/ 硬件资源/ 的/ 抽象/ 和/ 分配/ 以及/ I/ // O/ 设备/ 仿/ 的/ 云/ 计算/ 指/ 厂商/ 利用/ 虚拟化/ 技术/ 构建/ 虚拟/ 集群/ ,/ 动态/ 地/ 组织/ 异构计算/ 资源/ ,/ 隔离/ 具体/ 硬件/ 体系结构/ 和/ 多样化/ 软件平台/ 差异/ ,/ 灵活/ 构建/ 满足/ 不同/ 应用/ 需求/ 的/ 计算环境/ ,/ 提高/ 计算资源/ 的/ 使用/ 效率/ ,/ 实现/ 弹性/ 计算/ ./ 用户/ 只/ 需/ 利用/ 终端/ 通过/ 网络/ 即可/ 访问/ 云/ 计算/ 提供/ 的/ 在线/ 软件/ 服务/ 、/ 计算/ 分析/ 、/ 硬件/ 租用/ 等/ 不同/ 类型/ 的/ 服务/ ,/ 从而/ 实现/ 资源管理/ 、/ 维护/ 与/ 使用/ 的/ 解/ 耦/ ./ 从/ 横向/ 来看/ ,/ 云/ 计算/ 框架/ 如图/ 1/ 所示/ ./ 真/ ./ 目前/ ,/ Hypervisor90/ %/ 以上/ 的/ 市场份额/ 被/ 商业/ 的/ VMwareESXi/ ①/ 、/ MicrosoftHyper/ -/ V/ ②/ 和/ 开源/ 的/ ①/ ②/ Page4KVM/ ①/ (/ KernelVirtualMachine/ )/ ,/ Xen/ ②/ 占据/ ./ 根据/ 虚拟化/ 层/ 不同/ 的/ 实现/ 方式/ ,/ Hypervisor/ 可以/ 分为/ 独立/ 监控/ 模式/ (/ Type1/ )/ 、/ 宿主/ 模式/ (/ Type2/ )/ 和/ 混合/ 模式/ ,/ 见图/ 3/ ./ 云/ 计算/ 主要/ 使用/ 独立/ 模式/ 和/ 混合/ 模式/ ./ 在/ 独立/ 模式/ 中/ Hypervisor/ 直接/ 在/ 裸机/ 上/ 运行/ ,/ 例如/ VMwareESXi/ ./ 虚拟机/ 对/ 真实/ 硬件/ 的/ 访问/ 都/ 要/ 经由/ Hypervisor/ 提供/ 的/ 硬件/ 驱动程序/ ./ 而/ 宿主/ 模式/ 中/ ,/ Hypervisor/ 是/ 作为/ 一个/ 应用/ 程序运行/ 在/ 宿主/ OS/ (/ OperatingSystem/ )/ 中/ ,/ 例如/ VMwareWork/ -/ station/ ./ 这样/ Hypervisor/ 可以/ 充分利用/ 宿主/ OS/ 提供/ 的/ 设备/ 驱动/ 和/ 底层/ 服务/ 来/ 进行/ 资源管理/ ./ 但/ 虚拟机/ 对/ 硬件/ 的/ 访问/ 需要/ 经过/ Hypervisor/ 和/ 宿主/ OS/ 两层/ 软件/ ./ 混合/ 模式/ ,/ 例如/ Xen/ ,/ 兼具/ 了/ 独立/ 模式/ 和/ 宿主/ 模式/ 的/ 优点/ ./ 在结构上/ 与/ 独立/ 模式/ 类似/ ,/ 但/ I/ // O/ 设备/ 的/ 仿真/ 借用/ 了/ 宿主/ 模式/ ,/ 交由/ 特权/ 虚拟机/ 处理/ ./ 然而/ ,/ KVM/ 是/ 一种/ 区别/ 于/ 这/ 3/ 种/ 模式/ 的/ 特殊/ Hyper/ -/ visor/ ,/ 这/ 是因为/ KVM/ 与/ 宿主机/ 位于/ 同一/ 层次/ ./ 根据/ 是否/ 需要/ 修改/ GOS/ ,/ Hypervisor/ 又/ 可/ 分为/ 全/ 虚拟化/ 和/ 半/ 虚拟化/ ./ 全/ 虚拟化/ 下/ ,/ Hypervisor/ 模拟/ 与/ 真实/ 硬件/ 完全相同/ 的/ 环境/ ,/ 不/ 需要/ 修改/ GOS/ ,/ 具有/ 很/ 好/ 的/ 透明性/ ./ 半/ 虚拟化/ 需要/ GOS/ 调用/ Hypervisor/ 图/ 4/ 攻击面/ 和/ 攻击/ 源/ 提供/ 的/ 超级/ 调用/ (/ hypercalls/ )/ 完成/ 对/ 敏感/ 指令/ 和/ 特权/ 指令/ 的/ 模拟/ ./ 虽然/ 半/ 虚拟化/ 不/ 具有/ 透明性/ ,/ 但是/ 降低/ 了/ Hypervisor/ 的/ 复杂度/ ./ 而/ 硬件/ 辅助/ 虚拟化/ 是/ 全/ 虚拟化/ 的/ 硬件/ 实现/ ,/ 例如/ Intel/ 的/ VT/ [/ 6/ ]/ 、/ AMD/ -/ V/ [/ 7/ ]/ 和/ ARM/ 的/ VE/ (/ VirtualizationExtension/ )/ [/ 8/ ]/ ./ GOS/ 只能/ 在/ 受控/ 模式/ 下/ 运行/ ,/ 当/ GOS/ 需/ 执行/ 特权/ 操作/ 时/ ,/ CPU/ 自动/ 切换/ 模式/ ./ 在/ 完成/ 操作/ 后/ ,/ Hypervisor/ 通知/ CPU/ 切回/ GOS/ 继续执行/ ./ 硬件/ 虚拟化/ 已/ 广泛应用/ 于/ 服务器/ 平台/ ./ 3/ 虚拟化/ 软件/ 栈/ 安全/ 威胁/ 如图/ 2/ 所示/ ,/ 云/ 框架/ 包含/ 很多/ 层/ ,/ 每/ 一层/ 都/ 含有/ 不同/ 的/ 安全/ 问题/ [/ 9/ ]/ ,/ 但/ 主要/ 威胁/ 来自/ 基层/ 的/ 虚拟化/ [/ 10/ ]/ ./ 为了/ 解决/ 虚拟化/ 中/ 的/ 安全/ 问题/ ,/ 我们/ 首先/ 分析/ 虚拟化/ 软件/ 栈中/ 的/ 攻击/ 来源/ ./ 然后/ ,/ 确定/ 这些/ 攻击/ 来源/ 可能/ 导致/ 的/ 安全/ 问题/ ./ 在/ 这/ 一节/ 中/ ,/ 我们/ 将/ 对/ 攻击/ 来源/ 、/ 安全/ 威胁/ 和/ 攻击方式/ 进行/ 阐述/ ./ 3.1/ 攻击/ 来源/ 和/ 攻击/ 目标/ 图/ 4/ 描述/ 了/ 多/ 租户/ 模式/ 下/ 虚拟化/ 软件/ 栈/ 的/ 3/ 层/ 架构/ ./ 按/ 攻击/ 层次/ 可以/ 将/ 攻击/ 对象/ 分为/ Hypervisor/ 、/ GOS/ 和/ Apps/ ,/ 其中/ Hypervisor/ 和/ GOS/ 是/ 主要/ 的/ 攻击/ 目标/ ./ 在/ 虚拟化/ 平台/ 中/ ,/ 客户/ 虚拟机/ 由/ 平台/ 的/ 内部/ 管理人员/ 利用/ 管理工具/ 或/ 软件/ 通过/ Hypervisor/ 提供/ 的/ 接口/ 进行/ 管控/ ./ 这样/ 内部人员/ 可以/ 通过/ 管理工具/ 对/ 虚拟机/ 进行/ 恶意/ 操作/ ,/ 例如/ 虚拟机/ 转存/ (/ dump/ )/ 、/ 快照/ (/ snapshot/ )/ 和/ 迁移/ (/ livemigration/ )/ [/ 11/ ]/ ,/ 甚至/ 虚拟机/ ①/ ②/ Page5/ 镜像/ 备份/ ./ 而/ 来自/ 外部/ 的/ 网络/ 攻击者/ 则/ 可以/ 利用/ 虚拟化/ 软件/ 栈/ 的/ 软件/ 漏洞/ 、/ 脆弱性/ 进行/ 攻击/ ,/ 甚至/ 可以/ 租用/ 同一/ 台/ 物理/ 服务器/ 上/ 的/ 虚拟机/ 对/ 其它/ 虚拟机/ 进行/ 攻击/ ./ 基于/ 此/ ,/ 我们/ 可以/ 将/ 攻击/ 分为/ 内部/ 攻击/ 和/ 外部/ 攻击/ ./ 在/ 图/ 4/ 中/ 内部/ 攻击/ 路径/ 和/ 外部/ 攻击/ 路径/ 分别/ 用/ 虚线/ 箭头/ 和/ 实线/ 箭头/ 表示/ ,/ 而/ 双线/ 箭头/ 是/ 内部/ 和/ 外部/ 攻击/ 的/ 公共/ 路径/ ./ 两者/ 相比/ ,/ 内部/ 攻击/ 比/ 外部/ 攻击/ 更/ 易/ 实施/ 、/ 成功率/ 更大/ ,/ 而且/ 不易/ 被/ 发现/ ,/ 带来/ 的/ 威胁/ 和/ 灾难/ 危害/ 更难/ 控制/ ./ 虚拟化/ 中/ 存在/ 众多/ 安全/ 威胁/ ,/ 而/ 这些/ 安全/ 威胁/ 来源于/ 不同/ 方式/ 的/ 攻击/ ./ 图/ 4/ 对/ 这些/ 安全/ 威胁/ 和/ 攻击方式/ 进行/ 了/ 分析/ 和/ 展现/ ./ 以/ 数据/ 泄漏/ 为例/ ,/ 攻击者/ 可以/ 通过/ 侧/ 信道/ 和/ 虚拟机/ 逃逸/ 等/ 攻击方式/ 窃取/ 其它/ 虚拟机/ 的/ 数据/ ./ 在/ 此/ 需要/ 强调/ 的/ 是/ 这些/ 安全/ 威胁/ 不是/ 独立/ 存在/ 的/ ,/ 是/ 可以/ 相互/ 转化/ 相互/ 依托/ 的/ ./ 在/ 3.2/ 节/ 和/ 3.3/ 节/ 中将/ 会/ 对/ 这些/ 安全/ 威胁/ 和/ 虚拟化/ 中/ 主要/ 的/ 攻击方式/ 进行/ 详细分析/ 和/ 讨论/ ./ 3.2/ 安全/ 威胁/ 虚拟化/ 中/ 的/ 安全/ 威胁/ 主要/ 分为/ 数据/ 泄露/ 和/ 丢失/ 、/ 拒绝服务/ 、/ 权限/ 提升/ 、/ 运行/ 时/ (/ Hypervisor/ // GOS/ )/ 代码/ 和/ 数据/ 篡改/ 以及/ 控制流/ 截获/ 、/ rootkits/ 和/ 后门/ 遗留/ 等/ ./ 而/ 数据/ 泄露/ 和/ 丢失/ 、/ 运行/ 时/ 数据/ 篡改/ 以及/ 控制流/ 截获/ 和/ rootkits/ 是/ 虚拟化/ 威胁/ 的/ 主要/ 表现形式/ ./ 威胁/ 1/ ./ 数据/ 泄漏/ 和/ 丢失/ ./ 在/ 传统/ 系统/ 中/ 每个/ 用户/ 都/ 使用/ 自己/ 独立/ 的/ 计算机/ 处理/ 数据/ ./ 但是/ ,/ 在/ 多/ 租户/ 的/ 虚拟化/ 环境/ 下/ ,/ 计算资源/ 是/ 物理/ 共享/ 的/ ,/ 其/ 隔离/ 是/ 软件/ 层面/ 的/ :/ CPU/ 的/ 隔离/ 是/ 基于/ 时间/ 片/ 轮转/ 的/ ;/ 内存/ 的/ 隔离/ 是/ 基于/ Hypervisor/ 维护/ 的/ 逻辑/ 页表/ ./ 虚拟化/ 平台/ 的/ 多/ 租户/ 资源共享/ 和/ 动态/ 迁移/ 等/ 特性/ 使得/ 数据/ 泄露/ 和/ 丢失/ 威胁/ 在/ 该/ 框架/ 中/ 更为/ 突出/ [/ 12/ ]/ ./ 在/ 虚拟化/ 平台/ 中/ ,/ 数据/ 泄漏/ 表现/ 为/ 两种/ 形式/ :/ 外部/ 数据/ 泄露/ 给/ 虚拟机/ 内部/ [/ 13/ ]/ ;/ 虚拟机/ 自身/ 数据/ 泄漏/ 给/ 外部/ 软件/ (/ 其它/ 虚拟机/ 或/ 程序/ )/ ,/ 后者/ 是/ 主要/ 的/ 安全/ 威胁/ ./ DMA/ (/ DirectMemoryAccess/ )/ 攻击/ 、/ 侧/ 信道/ 攻击/ 、/ 虚拟机/ 跨域/ 访问/ 等/ 方式/ 都/ 可以/ 导致/ 严重/ 的/ 信息/ 泄露/ ,/ 给/ 个人/ 或/ 企业/ 带来/ 不可估量/ 的/ 灾难/ ./ 数据/ 丢失/ 与/ 数据/ 泄漏/ 不同/ ,/ 数据/ 丢失/ 是/ 指/ 数据/ 被/ 删除/ 、/ 销毁/ 或者/ 毁坏/ ./ 攻击者/ 的/ 目的/ 并/ 不仅仅/ 是/ 窃取/ 用户/ 的/ 数据/ ,/ 而是/ 对/ 用户/ 的/ 数据/ 进行/ 破坏/ ./ 近几年/ 数据/ 窃取/ 和/ 丢失/ 事件/ 在/ 云/ 提供商/ 中/ 不断/ 出现/ ,/ 具体/ 参考/ 第/ 1/ 节中/ 的/ 示例/ ./ 此类/ 攻击/ 的/ 主要/ 防护/ 方式/ 是/ 数据/ 加密/ 、/ 访问控制/ 和/ 隔离/ 机制/ ./ 威胁/ 2/ ./ 控制流/ 截获/ 以及/ 后门/ 、/ rootkits/ ./ 控制流/ 截获/ 是/ 攻击者/ 利用/ 系统漏洞/ 或/ 脆弱性/ 使得/ 指令/ 的/ 执行/ 流程/ 按/ 攻击者/ 的/ 意图/ 执行/ ./ 控制流/ 截获/ 主要/ 是/ 对系统/ 内部/ 的/ 控制结构/ (/ 中断/ 表/ 、/ 系统/ 调用/ 表/ )/ 、/ 跳转/ 结构/ (/ 控制/ 指针/ 、/ 空/ 指针/ )/ 进行/ 修改/ ,/ 或者/ 利用/ 系统/ 原有/ 指令/ 组合/ 执行/ (/ ret2lib/ 和/ return/ -/ orientedprogramming/ )/ ./ Rootkits/ 是/ 一类/ 特殊/ 的/ 恶意代码/ ,/ 攻击者/ 若想/ 实现/ rootkits/ 攻击/ ,/ 首先/ 要/ 将/ 其/ 代码/ 嵌入/ 到/ 系统/ 中/ ,/ 然后/ 通过/ 截获/ 控制流/ ,/ 使/ 其/ 代码执行/ ./ 从而/ 隐藏/ 攻击者/ 的/ 行为/ 或/ 遗留/ 后门/ ,/ 为/ 后续/ 攻击/ 提供/ 便利/ ./ 上述/ 攻击/ 的/ 主要/ 目的/ 是/ 控制/ Hypervisor/ 或/ GOS/ ,/ 然后/ 控制/ 数据中心/ 的/ 网络/ ,/ 或者/ 窃取/ 用户/ 数据/ ,/ 甚至/ 可以/ 通过/ 控制/ 众多/ 客户/ 虚拟机/ 实施/ DDoS/ (/ DistributedDenialofService/ )/ 攻击/ ./ 这些/ 攻击/ 可以/ 通过/ 代码/ 完整性/ 、/ 控制流/ 完整性/ 和/ 影子/ 备份/ 等/ 机制/ 进行/ 防护/ ./ 威胁/ 3/ ./ 拒绝服务/ (/ DenyofService/ ,/ DoS/ )/ ./ 虚拟化/ 层/ 的/ DoS/ 威胁/ 在/ 云/ 服务/ 中/ 出现/ 的/ 概率/ 很大/ ,/ 主要/ 表现/ 为/ 用户/ 不/ 能够/ 对/ 其/ 数据/ 和/ 服务程序/ 进行/ 访问/ 和/ 控制/ ./ 虚拟化/ 环境/ 下/ 的/ DoS/ 威胁/ 甚至/ 包括/ 对/ 硬件资源/ (/ 如/ 内存/ 、/ CPU/ 和/ 网卡/ 等/ )/ 、/ 以及/ 虚拟/ 网络/ 等/ 资源/ 的/ 访问/ 不/ 响应/ [/ 14/ ]/ ./ 有/ 很多/ 方式/ 可以/ 实现/ 这种/ 类型/ 的/ 攻击/ ,/ 通过/ 网络/ 风暴/ 、/ 中断/ 风暴/ 以及/ 挂/ 起/ 硬件/ 或/ 控制/ 服务/ ,/ 从而/ 导致/ 其它/ 虚拟机/ 产生/ 资源/ 饥饿/ 、/ 服务/ 不/ 响应/ ./ 但是/ ,/ 虚拟化/ 平台/ 也/ 为/ 攻击者/ 实施/ DDoS/ 攻击/ 提供/ 了/ 便利/ ,/ 在/ 该/ 环境/ 下/ 攻击者/ 可以/ 方便/ 地/ 批量/ 租用/ 虚拟机/ ,/ 或者/ 利用/ 虚拟/ 平台/ 的/ 漏洞/ 批量/ 控制/ 该/ 平台/ 上/ 的/ 虚拟机/ 实施/ DDoS/ 攻击/ ./ 对于/ DoS/ 威胁/ ,/ 主要/ 的/ 防护/ 方式/ 是/ 对/ 资源/ 进行/ 监控/ 或者/ 对/ 吞吐量/ 进行/ 限制/ ./ 威胁/ 4/ ./ 虚拟机/ 镜像/ 威胁/ ./ 在/ 虚拟/ 平台/ 中/ ,/ 虚拟机/ 的/ 启动/ 和/ 容灾/ 恢复/ 都/ 是/ 利用/ 虚拟机/ 镜像/ [/ 15/ -/ 16/ ]/ ./ 虽然/ 可以/ 直接/ 对/ 虚拟机/ 镜像/ 打补丁/ 防范/ 虚拟机/ 中/ 的/ 漏洞/ ,/ 但/ 这/ 也/ 为/ 内部/ 攻击者/ 提供/ 了/ 可乘之机/ ./ 如果/ 攻击者/ 事先/ 对/ 虚拟机/ 的/ 镜像文件/ 进行/ 了/ 修改/ 、/ 甚至/ 替换/ ,/ 则/ 启动/ 后/ 的/ 虚拟机/ 完全/ 受/ 攻击者/ 控制/ ./ 对于/ 虚拟机/ 镜像/ 的/ 防护/ 主要/ 是/ 利用/ 完整性/ 验证/ 方案/ ,/ 在/ 系统启动/ 之前/ 对/ 镜像文件/ 进行/ 完整性/ 检测/ ./ 威胁/ 5/ ./ 运行/ 时/ 代码/ 、/ 数据/ 篡改/ ./ 在/ 启动/ 过程/ 中/ 通过/ 可信/ 启动/ 等/ 技术/ 能够/ 保证系统/ 和/ 软件/ 启动/ 过程/ 中/ 的/ 完整性/ ,/ 但是/ 在/ 运行/ 时/ 该类/ 方案/ 并/ 不/ 可取/ ./ 代码/ 篡改/ 是/ 一个/ 非常/ 严重/ 的/ 安全/ 问题/ ,/ 攻击者/ 通过/ 缓冲区/ 溢出/ 、/ 库函数/ 映射/ 等/ 实现/ 对/ Hypervisor/ 、/ GOS/ 等/ 代码/ 的/ 注入/ 和/ 修改/ ./ 这/ 都/ 可/ 导致/ 控制流/ 截获/ 、/ 安全/ 机制/ 被/ 关闭/ 或/ 绕过/ 、/ 提权/ 、/ 隐藏/ Page6/ 攻击行为/ 、/ 遗留/ 后门/ 等/ ./ 威胁/ 6/ ./ 权限/ 提升/ ./ 权限/ 提升/ 在/ 虚拟化/ 系统/ 中/ 尤为重要/ ,/ 包括/ 两/ 部分/ 权限/ 提升/ ,/ 从/ 用户/ 层到/ 内核/ 层/ ,/ 从/ 内核/ 层到/ 虚拟化/ 层/ ./ 权限/ 提升/ 可以/ 使得/ 攻击者/ 获得/ 更/ 高/ 的/ 权限/ ,/ 运行/ 的/ 代码/ 级别/ 更高/ ,/ 危害/ 更大/ ./ 在/ 虚拟化/ 中/ 权限/ 提升/ 的/ 主要/ 表现形式/ 是/ 虚拟机/ 逃逸/ ,/ 该/ 威胁/ 表现/ 为/ 客户/ 虚拟机/ 利用/ Hypervisor/ 的/ 脆弱性/ 漏洞/ 使得/ Hypervi/ -/ sor/ 与/ 客户/ 虚拟机/ 之间/ 的/ 隔离/ 被/ 破坏/ ,/ 从而/ 导致/ 客户/ 虚拟机/ 的/ 代码运行/ 在/ Hypervisor/ 特权/ 级/ ,/ 因此/ 可以/ 直接/ 执行/ 特权/ 指令/ ./ 威胁/ 7/ ./ 不可/ 信/ 的/ 云/ 内部人员/ ./ 在/ 通常/ 情况/ 下/ ,/ 云/ 提供商/ 员工/ 被/ 认为/ 是/ 可信/ 的/ ./ 但是/ Google/ 员工/ 窃听/ 用户/ 数据/ 事件/ 和/ 棱镜/ 事件/ 足以/ 证明/ 云/ 内部人员/ 并非/ 完全/ 可信/ ./ 用户/ 将/ 数据/ 放在/ 遥远/ 的/ 云端/ ,/ 对/ 数据/ 失去/ 了/ 控制/ ,/ 并/ 不/ 知晓/ 云/ 内部人员/ 对/ 用户/ 自身/ 数据/ 所/ 做/ 的/ 操作/ ./ 此外/ ,/ 云/ 内部人员/ 可能/ 拥有/ 过高/ 的/ 访问/ 权限/ ,/ 而且/ 他们/ 的/ 行为/ 不/ 受/ 防火墙/ 和/ 入侵/ 检测/ 系统/ 限制/ ./ 基于/ 此种/ 状况/ ,/ 内部人员/ 在/ 利益驱动/ 下/ 很/ 容易/ 侵犯/ 用户/ 的/ 隐私/ ,/ 窃取/ 用户/ 的/ 数据/ ,/ 甚至/ 将/ 用户/ 的/ 个人/ 数据/ 提供/ 给/ 第三方/ ./ 以/ Xen/ 为例/ ,/ 管理员/ 可以/ 对/ 用户/ 的/ 虚拟机/ 做/ 快照/ 和/ dump/ 备份/ ,/ 甚至/ 可以/ 监听/ 用户/ 的/ 网络/ ./ 这类/ 威胁/ 的/ 防护/ 难度很大/ ,/ 需要/ 从/ 两/ 方面/ 入手/ :/ 让/ 虚拟机/ 的/ 管理/ 过程/ 对/ 用户/ 可见/ ;/ 提供/ 安全/ 有效/ 的/ 硬件/ 机制/ 保护/ 客户/ 的/ 数据安全/ ,/ 具体/ 的/ 机制/ 在/ 4.3/ 节会/ 进行/ 详细/ 论述/ ./ 3.3/ 攻击方式/ 上面/ 介绍/ 的/ 7/ 类/ 安全/ 威胁/ 需要/ 通过/ 一定/ 的/ 攻击方式/ 才能/ 得以/ 实施/ ./ 下面/ 我们/ 将/ 对/ 5/ 类/ 主要/ 的/ 攻击/ 进行/ 介绍/ ./ 攻击/ 1/ ./ DMA/ 攻击/ ./ DMA/ 的/ 初衷/ 是/ 允许/ 外围设备/ 绕过/ MMU/ ,/ 直接/ 对/ 物理/ 内存/ 进行/ 读写操作/ ,/ 从而/ 提高/ I/ // O/ 效率/ ./ 在/ IntelVT/ -/ d/ 提出/ 之前/ ,/ 具有/ DMA/ 功能/ 的/ 外设/ 可以/ 对/ 物理/ 内存/ 进行/ 任意/ 访问/ ,/ 但/ VT/ -/ d/ 的/ 提出/ 使得/ 这一/ 问题/ 得到/ 了/ 缓解/ ./ DMA/ 攻击/ [/ 17/ ]/ 主要/ 分为/ 3/ 步/ :/ 首先/ ,/ 对外/ 设/ 进行/ 改造/ ,/ 嵌入/ 恶意代码/ ;/ 然后/ ,/ 将/ 外设/ 部署/ 到/ 目标/ 主机/ 中/ ;/ 最后/ ,/ 利用/ 恶意代码/ 发送/ DMA/ 请求/ ,/ 实现/ 恶意/ 攻击/ ./ DMA/ 攻击/ 的/ 难点/ 是/ 定位/ 需要/ 访问/ 的/ 数据结构/ 或/ 代码/ 的/ 地址/ ,/ 如此/ 才能/ 精确/ 地/ 实现/ 有/ 目的/ 的/ 攻击/ ./ 不然/ ,/ 只能/ 利用/ DMA/ 进行/ 粗粒度/ 的/ 数据/ 窃取/ ./ 在/ 虚拟化/ 场景/ 下/ ,/ 内部/ 攻击者/ 则/ 可以/ 通过/ DMA/ 设备/ ,/ 对/ 物理/ 内存/ 中/ 的/ 代码/ 、/ 数据/ 进行/ 篡改/ 或/ 窃取/ ,/ 从而/ 实现/ 代码/ 注入/ 、/ 控制流/ 劫持/ 和/ 数据/ 泄漏/ 等/ ./ 当前/ 的/ 主要/ 解决方案/ 是/ 结合/ IOMMU/ 对/ DMA/ 的/ 读写操作/ 进行/ 限制/ ./ 攻击/ 2/ ./ 多重/ 映射/ 和/ 虚拟机/ 跨域/ 访问/ ./ 跨域/ 访问/ 是/ 指/ 客户/ 虚拟机/ 不仅/ 能够/ 访问/ 自身/ 的/ 地址/ 空间/ ,/ 同时/ 还/ 能够/ 访问/ 到/ 其它/ 虚拟机/ 或/ Hypervisor/ 地址/ 空间/ 中/ 的/ 数据/ ./ 在/ IaaS/ 模型/ 中/ ,/ 每个/ 虚拟机/ 都/ 有/ 独立/ 的/ EPT/ (/ ExtendPageTable/ )/ 或/ SPT/ (/ ShadowPageTable/ )/ ,/ 并且/ Hypervisor/ 拥有/ 单独/ 的/ 地址/ 空间/ ./ 然而/ ,/ 攻击者/ 利用/ 一些/ 软件/ 漏洞/ 、/ DMA/ 攻击/ 、/ VLAN/ 跳跃/ 攻击/ 和/ Cache/ 变更/ 等/ 实现/ 虚拟机/ 跨域/ 访问/ ./ 例如/ ,/ 攻击者/ 利用/ Hypervisor/ 漏洞/ 或者/ 已/ 控制/ 的/ Hypervisor/ 对/ 客户/ 虚拟机/ (/ VM1/ )/ 的/ 页表/ 进行/ 修改/ ,/ 使/ 其/ 映射/ 到/ 另/ 一/ 客户/ 虚拟机/ (/ VM2/ )/ 的/ 地址/ 空间/ 中/ ,/ 从而/ 实现/ 跨域/ 访问/ ./ 跨域/ 访问/ 能够/ 窃取/ 或/ 篡改/ 其他/ 用户/ 的/ 数据/ 或/ 建立/ 隐蔽/ 信道/ ./ 防止/ 这/ 类/ 攻击/ 的/ 主要/ 方式/ 是/ 对/ 不同/ 虚拟机/ 之间/ 进行/ 隔离/ ,/ 并且/ 剥夺/ Hypervisor/ 更新/ EPT/ 页表/ 的/ 能力/ ./ 攻击/ 3/ ./ 跨/ 虚拟机/ 的/ Cache/ 攻击/ ./ 随着/ 计算/ 模式/ 从/ 独占/ 计算/ 硬件/ 到/ 云/ 计算/ 模式/ 的/ 迁移/ ,/ 基于/ 共享/ Cache/ 的/ 侧/ 信道/ 攻击/ 变得/ 越发/ 严重/ ./ 基于/ Cache/ 的/ 侧/ 信道/ 攻击/ 和/ 隐蔽/ 信道/ 攻击/ [/ 18/ ]/ 使得/ 攻击者/ 能够/ 在/ 数秒/ 或/ 数分钟/ 内/ 从/ 当前/ 流行/ 的/ 加密/ 方法/ (/ RSA/ 、/ AES/ 和/ DES/ )/ 中/ 获取/ 到/ 受害者/ 的/ 密钥/ 信息/ ./ 基于/ Cache/ 的/ 侧/ 信道/ 攻击/ 不/ 需要/ 获取/ Hypervisor/ 等/ 特权/ 和/ 利用/ 其/ 漏洞/ ,/ 而/ 只/ 需/ 通过/ 对/ 时间/ 损耗/ 、/ 电源/ 损耗/ 以及/ 电磁辐射/ 等/ 特性/ 的/ 监测/ 、/ 统计/ 即可/ 获取/ 到/ 其它/ 客户/ 虚拟机/ 的/ 数据/ ./ 侧/ 信道/ 攻击/ 可以/ 分为/ 3/ 种/ 方式/ :/ 基于/ 时间/ 驱动/ (/ timedriven/ )/ [/ 19/ ]/ 、/ 基于/ 轨迹/ 驱动/ (/ tracedriven/ )/ [/ 20/ -/ 21/ ]/ 和/ 基于/ 访问/ 驱动/ (/ accessdriven/ )/ [/ 22/ -/ 23/ ]/ ./ 基于/ 时间/ 驱动/ 的/ 攻击/ 是/ 攻击者/ 重复/ 地/ 检测/ 被/ 攻击者/ 的/ 加密/ 操作/ 所/ 使用/ 的/ 时间/ ,/ 然后/ 通过/ 差分/ 分析/ 等/ 技术/ 推断出/ 密钥/ 等/ 信息/ ./ 基于/ 轨迹/ 驱动/ 的/ 攻击/ 通过/ 持续/ 地/ 对/ 设备/ 的/ 电能/ 损耗/ 、/ 电磁/ 发射/ 等/ 情况/ 进行/ 监控/ ,/ 获取/ 到/ 其/ 敏感/ 信息/ ,/ 但是/ 这类/ 侧/ 信道/ 攻击/ 需要/ 攻击者/ 能够/ 物理/ 接近/ 攻击/ 目标/ ./ 基于/ 访问/ 驱动/ 的/ 攻击/ 是/ 攻击者/ 在/ 执行/ 加密/ 操作/ 的/ 系统/ 中/ 运行/ 一个/ 应用/ ,/ 这个/ 应用/ 用于/ 监控/ 共享/ Cache/ 的/ 使用/ 情况/ 从而/ 获取/ 密钥/ 信息/ ./ 基于/ 访问/ 驱动/ 攻击/ 的/ 优势/ 是/ 不/ 需要/ 攻击者/ 得到/ 受害者/ 精确/ 的/ 时间/ 信息/ ./ 攻击/ 4/ ./ 快照/ 、/ 内存/ 转存/ 威胁/ ./ 虚拟机/ 快照/ (/ snapshot/ )/ 是/ Hypervisor/ 提供/ 给/ Page7/ 管理者/ 的/ API/ ,/ 用于/ 容错/ 和/ 虚拟机/ 维护/ ./ 云/ 提供商/ 的/ 内部/ 管理员/ 可以/ 利用/ 管理工具/ 对/ 运行/ 中/ 的/ 虚拟机/ 进行/ 快照/ ,/ 这为/ 内部/ 攻击者/ 提供/ 了/ 便利/ 之门/ ./ 这样/ 可以/ 在/ 用户/ 不知情/ 的/ 情况/ 下/ ,/ 就/ 可/ 将/ 虚拟机/ 回滚/ (/ rollback/ )/ [/ 24/ ]/ 到/ 特定/ 阶段/ ,/ 从而/ 绕过/ 一些/ 安全/ 机制/ 的/ 更新/ ./ 内部/ 攻击者/ 甚至/ 可以/ 利用/ 内存/ 转存/ (/ memorydumping/ )/ 工具/ 对/ 用户/ 的/ 内存/ 进行/ 转储/ ,/ 然后/ 进行/ 线下/ 分析/ 、/ 窃取/ 用户/ 数据/ ./ 通常/ 这/ 类/ 攻击/ 的/ 防护/ 是/ 利用/ 密码学/ 机制/ 防护/ ,/ 或者/ 禁用/ 管理员/ 的/ 快照/ 和/ 转存/ 操作/ ./ 攻击/ 5/ ./ 物理攻击/ 和/ 线路/ 窃听/ ./ 物理攻击/ 是/ 指/ 攻击者/ 能够/ 物理/ 接近/ 攻击/ 目标/ 所在/ 的/ 物理/ 服务器/ ./ 虽然/ 数据中心/ 有/ 专门/ 的/ 安全/ 防护/ 措施/ (/ 比如/ 录像/ 监控/ 和/ 审计/ 机制/ )/ ,/ 但是/ 数据中心/ 的/ 机房/ 每天/ 都/ 有/ 维修/ 人员/ 、/ 清洁/ 人员/ 和/ 管理人员/ 出入/ ,/ 这/ 就/ 给/ 安全/ 带来/ 了/ 潜在/ 的/ 隐患/ ./ 冷启动/ 攻击/ 就是/ 很/ 好/ 的/ 例子/ ./ 通道/ 或/ 线路/ 窃听/ 可/ 认为/ 是/ 另/ 一种/ 形式/ 的/ 物理攻击/ ,/ 攻击者/ 通过/ 一些/ 特殊/ 的/ 方式/ 监听/ 受害者/ 的/ 通道/ 和/ 线路/ ,/ 包括/ 外部/ 网络/ 、/ 虚拟机/ 之间/ 的/ 虚拟/ 网络/ 和/ 内部/ 总线/ 等/ ,/ 从中/ 窃取/ 来自/ 或/ 流向/ 虚拟机/ 和/ Hypervisor/ 的/ 数据/ ./ 3.4/ 虚拟化/ 软件/ 栈/ 威胁/ 机理/ 分析/ 以上/ 所述/ 攻击/ ,/ 主要/ 发生/ 在/ 内存/ 中/ ./ 这/ 是因为/ 系统启动/ 之后/ ,/ 所有/ 的/ 操作/ 和/ 数据/ 都/ 是/ 在/ 内存/ 中/ 完成/ ./ 在/ 现今/ 的/ 虚拟化/ 方案/ 中/ ,/ 内存/ 的/ 隔离/ 是/ 通过/ 虚实/ 地址映射/ 实现/ 的/ ./ 但/ 虚拟化/ 中/ 的/ 内存/ 管理/ 和/ 传统/ LinuxOS/ 不同/ ./ 这/ 是因为/ 给/ 虚拟机/ 展现/ 的/ 内存/ 并/ 不是/ 真实/ 的/ 物理/ 内存/ ,/ 而是/ 由/ Hypervisor/ 虚拟/ 出/ 的/ 连续/ 的/ 抽象/ 物理/ 内存/ ./ 正/ 因为/ 如此/ ,/ 虚拟机/ 内存/ 映射/ 分/ 两步/ 完成/ :/ 虚拟机/ 内部/ 的/ 内存/ 映射/ 以及/ 虚拟机/ 到/ 物理/ 机/ 的/ 内存/ 映射/ ./ 以/ Intel/ 为例/ ,/ 每个/ CPU/ 核心/ 有/ 两个/ 寄存器/ 分别/ 存储/ GPT/ (/ GuestPageTable/ )/ 和/ EPT/ (/ ExtendedPageTable/ )/ 的/ 基/ 地址/ ./ 如图/ 5/ 所示/ ,/ 首先/ GOS/ 将/ 进程/ 的/ GVA/ (/ GuestVirtualAddress/ )/ 通过/ GPT/ 转化/ 为/ Hypervisor/ 提供/ 给/ 它/ 的/ 抽象/ GPA/ (/ GuestPhysicalAddress/ )/ ,/ 然后/ Hypervisor/ 根据/ EPT/ (/ per/ -/ VM/ )/ 将/ GPA/ 转换成/ HPA/ (/ HardwarePhysicalAddress/ )/ ./ 整个/ 过程/ 由/ MMU/ 自动/ 完成/ ./ 在/ 硬件/ 不/ 支持/ EPT/ 的/ 情况/ 下/ ,/ MMU/ 完成/ 地址/ 转换/ 是/ 由/ Hypervisor/ 通过/ 影子/ 页表/ 直接/ 将/ GVA/ 转成/ HPA/ ./ 由此可见/ ,/ Hypervisor/ 可以/ 对/ 其/ 上/ 运行/ 的/ 虚拟机/ 进行/ 内存/ 隔离/ ,/ 但/ 隔离/ 的/ 前提/ 是/ Hypervisor/ 是/ 安全/ 的/ ./ 为了/ 防护/ 本节/ 中/ 列出/ 的/ 安全/ 威胁/ ,/ 学术界/ 提出/ 了/ 很多/ 针对/ 内存/ 安全/ 的/ 防护/ 方案/ ,/ 在/ 第/ 4/ 节中/ 我们/ 将会/ 对/ 这些/ 解决方案/ 进行/ 详细/ 的/ 阐述/ ./ 4/ 虚拟化/ 软件/ 栈/ 安全/ 防御/ 虚拟化/ 软件/ 栈/ 安全/ 可/ 分为/ 虚拟机/ 自身/ 的/ (/ GOS/ 、/ Apps/ )/ 的/ 安全/ 和/ Hypervisor/ (/ 虚拟化/ 层/ )/ 的/ 安全/ 两个/ 层次/ ./ 从/ 可信/ 基的/ 角度/ 分类/ ,/ 业界/ 的/ 安全/ 方案/ 可/ 分为/ 基于/ Hypervisor/ 的/ 保护/ (/ 4.1/ 节/ )/ 、/ Hypervisor/ 自身/ 安全/ 防护/ (/ 4.2/ 节/ )/ 以及/ 虚拟机/ 在/ 不可/ 信/ Hypervisor/ 环境/ 中/ 的/ 安全/ 防护/ (/ 4.3/ 节/ )/ ./ 而/ 4.3/ 节中/ 的/ 方案/ 主要/ 是/ 在/ Hypervisor/ 层/ 之下/ 引入/ 新/ 的/ 软硬件/ 安全/ 模块/ ,/ 从/ 隔离/ 机制/ (/ 4.3/ ./ 1/ 节/ )/ 、/ 加密/ 机制/ (/ 4.3/ ./ 2/ 节/ )/ 和/ 权限/ 访问控制/ (/ 4.3/ ./ 3/ 节/ )/ 这/ 3/ 个/ 不同/ 角度/ 对/ 虚拟机/ 及/ 内部/ 软件/ 进行/ 保护/ ./ 4.4/ 节/ 主要/ 对侧/ 信道/ 攻击/ 的/ 防护/ 进行/ 阐述/ ./ 需要/ 声明/ 的/ 是/ ,/ 在/ 此节/ 中/ 我们/ 不是/ 针对/ 所有/ 的/ 安全/ 方案/ ,/ 而/ 只/ 对/ 面向/ 第/ 3/ 节中/ 的/ 重要/ 安全/ 威胁/ 的/ 解决方案/ 进行/ 系统/ 的/ 归纳/ 、/ 分析/ 和/ 总结/ ./ 4.1/ 基于/ Hypervisor/ 的/ 虚拟机/ 安全/ 保护/ 如图/ 2/ 所示/ ,/ Hypervisor/ 位于/ 虚拟化/ 软件/ 栈/ 的/ 最底层/ ,/ 拥有/ 最高/ 特权/ ,/ 并且/ 拥有/ 比/ 传统/ kernel/ 低/ 两个/ 数量级/ 的/ 代码/ 量/ (/ 见表/ 1/ )/ ,/ 使得/ 系统/ 的/ 攻击面/ 更/ 少/ 、/ 可信/ 基更/ 小/ ./ 除此之外/ ,/ Hypervisor/ 对/ 物理/ 服务器/ 的/ 硬件资源/ 拥有/ 管理权/ 和/ 分配权/ ,/ 使得/ 它/ 能够/ 截获/ 到/ 客户/ 虚拟机/ 对/ 资源/ 的/ 请求/ 和/ 访问/ ./ 因此/ ,/ 从/ 虚拟化/ 软件/ 栈/ 的/ 层次/ 看/ ,/ Hypervisor/ 无疑/ 是/ 保护/ 虚拟机/ 的/ 最佳/ 选择/ ./ 当前/ 基于/ Hypervisor/ 的/ 安全/ 防护/ 研究/ 主要/ 围绕/ 保护/ GOS/ 安全/ 、/ 防护/ 恶意/ GOS/ 攻击/ 用户/ 进程/ 以及/ 利用/ 虚拟机/ 自省/ 技术/ 对/ 客户/ 虚拟机/ 内部/ 的/ 攻击/ 和/ 恶意/ 行为/ 进行/ 检测/ 、/ 分析/ ./ Linuxkernel10000KLOCKVMVMwareESXi200KLOCPage84/ ./ 1.1/ 客户/ 操作系统/ 完整性/ 防护/ 传统/ 操作系统/ 的/ 防护/ 有/ 两个/ 阶段/ :/ 可信/ 启动/ 和/ 运行/ 时/ 保护/ ./ 可信/ 启动/ 可以/ 利用/ 可信计算/ 等/ 方式/ 保证/ ,/ 但是/ 运行/ 时/ 的/ 威胁/ 主要/ 是/ 恶意代码/ 嵌入/ 和/ rootkits/ 攻击/ ./ 内核/ rootkits/ 是/ 一类/ 运行/ 在/ 内核/ 空间/ 的/ 恶意软件/ ,/ 拥有/ 与/ 内核/ 相同/ 的/ 特权/ 级别/ ./ 攻击者/ 利用/ rootkits/ 来/ 隐藏/ 恶意程序/ 和/ 文件/ ,/ 甚至/ 遗留/ 后门/ ./ 传统/ 的/ 防病毒/ 软件/ 都/ 是/ 基于/ 内核/ 提供/ 的/ 数据/ ,/ 并/ 不能/ 用于/ 防护/ rootkits/ 攻击/ ./ 因此/ 针对/ 破坏/ 代码/ 完整性/ 的/ rootkits/ 防护/ 需/ 提供/ 一个/ 与/ 内核/ 隔离/ 的/ 执行/ 环境/ ,/ 在/ 这个/ 隔离/ 的/ 环境/ 中/ 实施/ 安全策略/ ./ 虚拟化/ 层/ 恰好/ 提供/ 了/ 这样/ 一个/ 环境/ ,/ 并且/ 拥有/ 比/ 内核/ 更/ 高/ 的/ 特权/ ./ Rootkits/ 的/ 防护/ 方案/ 有/ 两种/ :/ (/ 1/ )/ 在/ 代码/ 修改/ 或/ rootkits/ 发生/ 后/ ,/ 检测/ 其/ 存在/ ;/ (/ 2/ )/ 通过/ 对/ 地址/ 空间/ 的/ 隔离/ ,/ 阻止/ 代码/ 修改/ 和/ rootkits/ 嵌入/ ./ 传统/ 的/ 方案/ 是/ 通过/ 分析/ 内核/ 静态/ 和/ 动态数据/ 的/ 完整性/ 或/ 控制流/ 图/ 的/ 完整性/ ,/ 以此/ 来/ 探测系统/ 中/ 是否/ 存在/ rootkits/ ./ 文献/ [/ 25/ ]/ 提出/ 了/ 基于/ 状态/ 的/ 控制流/ 完整性/ 保护/ 方案/ ,/ 该/ 方案/ 通过/ 定期/ 的/ 对/ 控制流/ 的/ 完整性/ 进行/ 动态/ 验证/ ,/ 从而/ 检测/ rootkits/ 的/ 存在/ ./ 该/ 方案/ 由于/ 定期/ 监控/ ,/ 使得/ 攻击者/ 可以/ 探测/ 到/ 监控/ 规律/ ,/ 从而/ 绕过/ 监控/ 功能/ ./ 这类/ 方案/ 的/ 最大/ 不足/ 是/ 不能/ 对/ rootkits/ 攻击/ 防范/ 于未然/ ./ 对此/ ,/ 文献/ [/ 26/ ]/ 提出/ 基于/ 轻量级/ Hypervisor/ (/ NICKLE/ )/ 的/ 方案/ ,/ 该/ 方案/ 能够/ 透明/ 地/ 阻止/ 非法/ 代码执行/ ./ NICKLE/ 利用/ 内存/ 影射/ (/ memoryshadowing/ )/ 机制/ ,/ 透明/ 地/ 将/ 已/ 验证/ 的/ 虚拟机/ 内核/ 和/ 可/ 加载/ 模块/ 的/ 代码/ 拷贝到/ 一个/ 隔离/ 的/ 物理/ 内存/ 中作/ 备份/ (/ shadow/ )/ ./ 这样/ 只有/ 认证/ 的/ 代码/ 才/ 会/ 在/ 安全/ 隔离/ 的/ 内存/ 中/ 存在/ 备份/ ,/ 在/ 指令/ 执行/ 时/ ,/ 通过/ 与/ shadow/ 中/ 的/ 指令/ 进行/ 对比/ 发现/ rootkits/ ./ 但/ 这/ 只能/ 保证/ 代码/ 的/ 完整性/ ,/ 并且/ 由于/ 每次/ 执行/ 代码/ 都/ 要/ 进行/ 比/ 对/ ,/ 性能/ 损耗/ 很大/ ./ 上述/ 两种/ 方案/ 是/ 对/ 静态/ 代码/ 进行/ 分析/ ,/ 保证/ 代码/ 的/ 执行/ 流程/ ,/ 但是/ 对于/ 更改/ 数据结构/ 而/ 截获/ 控制流/ 的/ rootkits/ ,/ 则/ 不能/ 防护/ ./ 为/ 解决/ 上述/ 问题/ ,/ 通过/ 对/ rootkits/ 攻击/ 原理/ 的/ 分析/ ,/ 研究者/ 发现/ rootkits/ 想要/ 隐藏/ 自身/ 的/ 行为/ ,/ 主要/ 通过/ 修改/ 内核/ 的/ 控制结构/ 和/ 钩子/ ./ 而/ 这些/ 敏感/ 控制结构/ 和/ 钩子/ 有/ 一个/ 显著/ 的/ 特点/ ,/ 即/ 它们/ 一旦/ 被/ 初始化/ 则/ 不会/ 或/ 极少/ 再/ 变更/ ./ 基于/ 此/ ,/ Wang/ 等/ 人/ [/ 27/ ]/ 提出/ 了/ 基于/ 轻量级/ Hypervisor/ 的/ 针对/ 钩子/ 等/ 数据结构/ 的/ 保护/ 方案/ ,/ 即/ HookSafe/ ./ 由于/ 在/ Linux/ 内核/ 中/ ,/ 钩子/ 和/ 控制结构/ 都/ 是/ 动态分配/ 的/ ,/ 并且/ 这些/ 结构/ 与/ 其它/ 数据/ 共存/ 在于/ 一个/ 页面/ 中/ ,/ 而/ 现有/ 的/ 软硬件/ 技术/ 都/ 是/ 基于/ 页/ 保护/ 的/ ./ 如果/ HookSafe/ 直接/ 利用/ 现有/ 的/ 页/ 保护/ 机制/ ,/ 则/ 会/ 引发/ 两个/ 问题/ :/ 不能/ 直接/ 对/ 数据/ 进行/ 保护/ ;/ 带来/ 极高/ 的/ 非必要/ 的/ 性能/ 损耗/ ./ Hook/ -/ Safe/ 为/ 解决/ 粒度/ 鸿沟/ (/ protectiongranularitygap/ )/ 问题/ 采取/ 了/ 数据/ 动态/ 迁移/ 、/ 集中/ 存储/ 的/ 策略/ ,/ 以此/ 来/ 提供/ 细粒度/ (/ byte/ -/ levelgranularity/ )/ 的/ 数据/ 防护/ ./ HookSafe/ 的/ 另/ 一个/ 贡献/ 是/ 提出/ 了/ 内核/ 钩子/ 重定向/ 机制/ ,/ 并/ 结合/ 硬件/ 的/ 页/ 保护/ 机制/ 对/ 钩子/ 的/ 访问/ 进行/ 限制/ ,/ 使/ 其/ 对/ 写/ 操作/ 进行/ 验证/ ./ 具体/ 而言/ ,/ HookSafe/ 首先/ 在线/ 下/ 进行/ 分析/ 得到/ 所/ 需/ 结构/ 体/ 的/ 地址/ ,/ 然后/ 利用/ 在线/ 打补丁/ 的/ 方式/ 对/ 钩子/ 函数/ 的/ 地址/ 进行/ 重定向/ ,/ 这/ 在/ 效率/ 上/ 仍/ 有/ 很大/ 的/ 提升/ 空间/ ./ 在/ 执行/ 时/ HookSafe/ 直接/ 重定向/ 对/ 这些/ 数据/ 的/ 读取/ ,/ 而/ 对于/ 写/ 操作/ 则/ 是/ 调用/ 超级/ 调用/ 陷入/ Hypervisor/ ,/ 由/ Hyper/ -/ visor/ 进行/ 安全/ 仲裁/ ./ 但是/ HookSafe/ 并/ 没有/ 给出/ 具体/ 的/ 仲裁/ 措施/ ,/ 只是/ 利用/ 线下/ 分析/ 得到/ 的/ 值/ 作为/ 参考/ ,/ 灵活性/ 欠佳/ ./ HookSafe/ 另/ 一个/ 不足/ 是/ 不能/ 对/ LKM/ (/ LoadableKernelModule/ )/ 进行/ 动态/ 保护/ ./ 为/ 解决/ LKM/ 等/ 内核模块/ 问题/ ,/ 文献/ [/ 28/ ]/ 提供/ 了/ 基于/ 模块/ 隔离/ 机制/ 的/ 内核/ 完整性/ 保护/ 方案/ ./ 该/ 方案/ 利用/ 轻量级/ Hypervisor/ (/ Barrier/ )/ 提供/ 的/ 内存/ 虚拟化/ 功能/ 对/ 内核/ 、/ 静态/ 模块/ 以及/ 动态/ 扩展/ 模块/ 进行/ 地址/ 空间隔离/ ,/ 使得/ 不同/ 的/ 模块/ 位于/ 不同/ 的/ 地址/ 空间/ ./ 在/ 运行/ 时/ 只有/ 当前/ 模块/ 所在/ 地址/ 空间/ 的/ 页表/ 有效/ ,/ 其它/ 模块/ 的/ 地址/ 空间/ 不可/ 被/ 访问/ ./ 在/ 该/ 方案/ 中/ ,/ 不同/ 地址/ 空间/ 互相/ 交互/ 信息/ 时/ 需要/ 经过/ 严格/ 的/ 仲裁/ 机制/ ,/ 即/ 基于/ 预先/ 定义/ 的/ 强制/ 访问控制/ 规则/ 进行/ 判断/ ./ 验证/ 通过/ 后/ 才能/ 变换/ 页表/ 空间/ ,/ 交互/ 数据/ ./ 相比/ 其它/ 方案/ ,/ 该/ 方案/ 有/ 3/ 个/ 优点/ :/ Barrier/ 只有/ 极小/ 的/ 代码/ 量/ ;/ Barrier/ 解决/ 了/ LKM/ 等/ 动态/ 内核/ 扩展/ 问题/ ;/ 并且/ 提供/ 了/ 仲裁/ 机制/ ,/ 能够/ 对/ 恶意/ 模块/ 进行/ 防护/ ./ 该/ 方案/ 在/ 很大/ 程度/ 上/ 提高/ 了/ 攻击/ 内核/ 的/ 难度/ ,/ 保证/ 了/ 内核/ 代码/ 的/ 完整性/ ,/ 但/ 遗憾/ 的/ 是/ 该/ 方案/ 只是/ 基于/ PC机/ ,/ 并且/ 仲裁/ 机制/ 比较/ 固定/ ,/ 不易/ 扩展/ ./ 上述/ 基于/ Hypervisor/ 的/ 内核/ 完整性/ 保护/ 方案/ 可/ 归结为/ 3/ 类/ ./ 第/ 1/ 类/ 是/ 利用/ Hypervisor/ 的/ 内存/ 虚拟化/ 机制/ 保护/ 内核/ 中/ 的/ 重要/ 数据/ ,/ 比如/ HookSafe/ ./ 该类/ 方案/ 利用/ EPT/ 或/ SPT/ 表/ 的/ 访问/ 权限/ 使得/ 含有/ 重要/ 数据/ 的/ 内存/ 页/ 为/ 只读/ ./ 这样/ 只有/ 遵从/ Hypervisor/ 仲裁/ 的/ 行为/ 才能/ 对/ 这些/ 数据/ 进行/ 修改/ ./ 但是/ 这/ 类/ 方案/ 对于/ 动态/ 可/ 加载/ 模块/ 不能/ 验证/ ./ 第/ 2/ 类/ 是/ 阻止/ 非法/ 代码/ 在/ 内核/ 级/ 运行/ ./ 该类/ 方案/ ,/ 比如/ NICKLE/ ,/ 对/ 内核/ 的/ 代码/ 进行/ 影子/ 备份/ 或者/ 在/ 加载/ 时/ 对/ 代码段/ 的/ 页表/ 设置/ 为/ 只读/ ,/ 其它/ 内核/ 态/ 空间/ 设置/ 为/ 不可/ 执行/ ./ 这样/ 在/ 内核/ 态/ 执行/ 其它/ 代码/ 时/ ,/ 则/ 会/ 陷入/ 到/ Page9Hypervisor/ 中/ ./ 但是/ 这/ 类/ 方案/ 最大/ 的/ 不足/ 是/ 不能/ 防御/ return/ -/ oriented/ 类型/ 的/ rootkits/ ,/ 并且/ 这/ 类/ 方法/ 也/ 不能/ 灵活/ 地/ 动态/ 加载/ 其它/ 模块/ ./ 第/ 3/ 类/ 是/ 通过/ 将/ 内核模块/ 与/ 内核/ 隔离/ ,/ 使/ 其/ 利用/ 不同/ 的/ 地址/ 空间/ ,/ 比如/ Barrier/ ./ 这/ 是因为/ 很多/ 恶意代码/ 嵌入/ 内核/ 主要/ 是/ 利用/ 内核/ 的/ 动态/ 可扩展性/ ,/ 比如/ 动态/ 可/ 加载/ 模块/ ./ 该类/ 方案/ 不仅/ 解决/ 了/ LKM/ 对/ Linux/ 内核/ 完整性/ 的/ 威胁/ ,/ 并且/ 将/ 危害/ 隔离/ 在/ 了/ 模块/ 内部/ ./ 4.1/ ./ 2/ 防护/ 恶意/ 客户/ 操作系统/ 对/ 进程/ 的/ 攻击/ 传统/ Apps/ 的/ 数据/ 资源/ 是/ 由/ 操作系统/ 内核/ 进行/ 管理/ 和/ 分配/ ,/ 但是/ 在/ 虚拟化/ 环境/ 中/ ,/ 客户/ 虚拟机/ 内部/ 的/ GOS/ 的/ 安全性/ 较差/ ./ 因此/ ,/ 为/ 保护/ 进程/ 的/ 数据/ 不/ 被/ 操作系统/ 随意/ 的/ 泄漏/ 和/ 篡改/ ,/ 可以/ 采用/ 3/ 种/ 方式/ :/ 影子/ 页表/ 、/ 隔离/ 的/ 执行/ 环境/ 以及/ 访问控制/ ./ 影子/ 页表/ 通过/ 对/ 同一/ 进程/ 建立/ 两个/ 不同/ 的/ 地址/ 空间/ ,/ 对应/ 于/ 系统/ 的/ 内核/ 态/ 和/ 用户/ 态/ ,/ 这/ 与/ 4.1/ ./ 1/ 节中/ 保护/ 内核/ 代码/ 完整性/ 的/ 影子/ 机制/ 有/ 异曲同工/ 之妙/ ./ 而/ 当/ 内核/ 态/ 访问/ 用户/ 态/ 的/ 数据/ 时/ ,/ 通过/ 截获/ 缺页/ 错误/ ,/ 可以/ 对/ 数据/ 的/ 机密性/ 进行/ 保护/ ./ 隔离/ 的/ 执行/ 环境/ 是/ 将/ 内核/ 和/ 进程/ 的/ 地址/ 空间/ 进行/ 隔离/ ,/ 保证/ 进程/ 运行/ 在/ 不受/ 内核/ 影响/ 的/ 环境/ 中/ ./ 访问控制/ 机制/ 则/ 首先/ 由/ 程序/ 自身/ 设置/ 进程/ 地址/ 空间/ 的/ 访问/ 权限/ ,/ 然后/ 在/ Hypervisor/ 的/ 监控/ 下/ 系统/ 内核/ 按照/ 既定/ 的/ 安全策略/ 进行/ 内存/ 访问/ ./ Overshadow/ [/ 29/ ]/ 利用/ 了/ 影子/ 页表/ 机制/ ,/ 该/ 方案/ 借鉴/ Hypervisor/ 的/ SPT/ 内存/ 页表/ (/ 见图/ 5/ )/ ,/ 对/ 每个/ 进程/ 维持/ 双/ 影子/ 页表/ ,/ 分别/ 为/ 系统/ 影子/ 表/ (/ systemshadow/ )/ 和/ 应用/ 影子/ 表/ (/ applicationshadow/ )/ ./ 通过/ 这/ 两个/ 页表/ 分别/ 向/ 内核/ 和/ 用户/ 进程/ 展现/ 密文/ 数据/ 和/ 明文/ 数据/ ./ 虽然/ 说/ Overshadow/ 提供/ 了/ 两套/ 影子/ 页表/ ,/ 但/ 用户/ 进程/ 的/ 数据/ 只/ 存在/ 一份/ ,/ 明文/ 和/ 密文/ 是/ 动态变化/ 的/ ./ 这样/ Overshadow/ 能够/ 有效/ 地/ 防止/ 运行/ 时/ GOS/ 对/ Apps/ 代码/ 、/ 数据/ 以及/ 寄存器/ 等/ 信息/ 的/ 泄漏/ ./ Overshadow/ 的/ 主要/ 优点/ 是/ 加解密/ 操作/ 对/ GOS/ 透明/ ,/ 不/ 需要/ 对/ GOS/ 的/ 内核/ 进行/ 修改/ ./ 为/ 保证/ 进程/ 启动/ 的/ 安全/ ,/ Overshadow/ 引入/ 了/ shim/ 机制/ ,/ 此/ 机制/ 还/ 能够/ 保证/ 进程/ 和/ GOS/ 之间/ 切换/ 的/ 安全/ ./ 但是/ ,/ Overshadow/ 并/ 不能/ 防止/ GOS/ 对/ 用户/ 进程/ 数据/ 进行/ 篡改/ 和/ 删除/ ./ 另外/ ,/ 令人/ 产生/ 疑问/ 的/ 是/ 由于/ GOS/ 只能/ 访问/ 密文/ ,/ 驱动程序/ 或者/ 文件系统/ 如何/ 正常/ 处理/ 这些/ 数据/ ./ 例如/ ,/ 用户/ 进程/ 需要/ 将/ 自身/ 的/ 数据/ 通过/ NIC/ (/ NetworkInterfaceCard/ )/ 传递/ 到/ 外部/ 网络/ 中/ ,/ Overshadow/ 首先/ 将/ 进程/ 自身/ 的/ 数据/ 加密/ 后/ 传递/ 给/ GOS/ 内核/ 的/ I/ // O/ 缓存/ ,/ 然后/ GOS/ 内核/ 将/ 缓存/ 中/ 的/ 密文/ 数据/ 封装/ 成/ 网络/ 报文/ 通过/ NIC/ 转发/ 到/ 外部/ ./ 这样/ 外部/ 得到/ 的/ 数据/ 将/ 是/ 密文/ ,/ 在/ 论文/ 中/ 并/ 没有/ 对/ 这部分/ 进行/ 介绍/ ./ 由于/ 操作系统/ 的/ 行为/ 过于/ 庞大/ ,/ 区分/ 其/ 是否/ 具有/ 恶意/ 性是/ 一个/ 非常/ 艰难/ 、/ 复杂/ 的/ 事情/ ./ 基于/ 此/ ,/ InkTag/ [/ 30/ ]/ 提出/ 了/ 一种/ 基于/ 虚拟化/ 的/ 安全/ 框架/ ,/ 通过/ 有效/ 且/ 安全/ 地/ 验证/ GOS/ 的/ 行为/ ,/ 保证/ 即使/ 在/ 恶意/ GOS/ 中/ 也/ 能够/ 安全/ 地/ 执行/ HAP/ (/ High/ -/ AssuranceProcess/ )/ ./ InkTag/ 首次/ 提出/ 了/ 基于/ 半/ 虚拟化/ 的/ 验证/ (/ para/ -/ verification/ )/ 机制/ ,/ 该/ 机制/ 强制/ GOS/ 为/ Hypervisor/ 和/ Apps/ 提供/ 验证/ 自身/ 行为/ 的/ 信息/ 和/ 资源/ ,/ 这/ 很大/ 程度/ 上/ 简化/ 了/ Hypervisor/ 验证/ GOS/ 行为/ 的/ 复杂性/ ./ InkTag/ 借鉴/ 了/ Overshadow/ 的/ shim/ 思想/ ,/ 利用/ 超级/ 调用/ 在/ 切换/ 的/ 过程/ 中/ 对/ HAP/ 的/ 上下文/ 进行/ 保护/ ,/ 并/ 对/ 内存/ 页/ 进行/ 完整性检查/ 和/ 机密性/ 保护/ ./ 除此之外/ ,/ 在/ 运行/ 的/ 过程/ 中/ InkTag/ 限制/ 了/ GOS/ 对/ HAP/ 寄存器/ 等值/ 的/ 修改/ ,/ 这样/ HAP/ 的/ 控制流/ 完整性/ 就/ 不会/ 被/ GOS/ 破坏/ ./ InkTag/ 并/ 没有/ 采取/ 将/ HAP/ 数据/ // 代码/ 与/ GOS/ 隔离/ 的/ 机制/ ,/ 而是/ 提出/ 了/ 一种/ 基于/ 属性/ 的/ 访问控制/ 机制/ (/ attributebasedaccesscontrol/ )/ ./ 基于/ 这种/ 机制/ ,/ 用户/ 则/ 可以/ 灵活/ 地/ 设置/ 针对/ HAP/ 的/ 访问/ 控制策略/ ,/ 为/ 其/ 文件/ 的/ 机密性/ 和/ 完整性/ 保护/ 提供/ 支撑/ ./ 但/ InkTag/ 需要/ 对/ GOS/ 进行/ 更改/ ,/ 同时/ 需要/ 对/ HAP/ 进行/ 重新/ 编写/ ,/ 使/ 其/ 支持/ 超级/ 系统/ 调用/ ./ 这种/ 不/ 透明/ 的/ 方案/ 导致/ 其/ 兼容性/ 不佳/ ./ 另外/ ,/ InkTag/ 拥有/ 与/ Overshadow/ 一样/ 的/ 不足/ ,/ 没有/ 说明/ 设备/ 驱动/ 和/ HAP/ 之间/ 如何/ 解决/ 明文/ 和/ 密文/ 问题/ ./ 最后/ 需要/ 指出/ 的/ 是/ InkTag/ 方案/ 需要/ GOS/ 内核/ 的/ 参与/ ,/ 这为/ DoS/ 攻击/ 提供/ 了/ 机会/ ,/ 比如/ GOS/ 内核/ 拒绝/ 将/ 信息/ 传递/ 给/ Hypervisor/ ,/ 同时/ 新/ 引入/ 了/ GOS/ 与/ Hypervisor/ 交互/ 的/ 接口/ ,/ 增大/ 了/ Hypervisor/ 被/ 攻击/ 的/ 可能性/ ./ TrustVisor/ [/ 31/ ]/ 是/ 一个/ 专用/ 的/ Hypervisor/ ,/ 它/ 利用/ 硬件/ 虚拟化/ 的/ 特性/ 和/ TPM/ (/ TrustedPlatformModule/ )/ 为/ 进程/ 和/ 内核/ 提供/ 一个/ 隔离/ 的/ 运行/ 环境/ ,/ 称之为/ PALs/ (/ PiecesofApplicationLogic/ )/ ./ 这个/ 隔离/ 的/ 执行/ 环境/ 能够/ 保证/ 其内/ 数据/ 的/ 完整性/ 和/ 机密性/ ./ TrustVisor/ 有/ 两个/ 突出点/ :/ 能够/ 对/ 应用/ 进程/ 的/ 敏感/ 代码/ 和/ 数据/ 进行/ 细粒度/ 的/ 保护/ ;/ Hypervisor/ 的/ 代码/ 量/ 很小/ ,/ 可以/ 方便/ 地/ 进行/ 形式化/ 验证/ ,/ 这/ 很大/ 程度/ 地/ 减小/ 了/ TCB/ ./ Iso/ -/ X/ [/ 32/ ]/ 和/ Intel/ 的/ SGX/ [/ 33/ -/ 35/ ]/ 都/ 借用/ 了/ 类似/ 的/ 思想/ ./ 但/ 隔离/ 执行/ 环境/ 的/ 缺点/ 是/ 需要/ 由/ 编程/ 者/ 指定/ 隔离/ 域/ ,/ 这/ 需要/ 程序员/ 有/ 良好/ 的/ 编程/ 习惯/ 和/ 编程/ 素养/ ./ Page10/ 文献/ [/ 36/ ]/ 为/ 安全/ 敏感/ 型/ 应用/ (/ securitysensitiveapplication/ )/ 提供/ 了/ 一个/ 安全/ 执行/ 环境/ (/ AppSec/ )/ ./ AppSec/ 能够/ 依据/ 应用程序/ 的/ 意图/ 保护/ 用户/ 的/ 私有/ 数据/ 和/ 人机交互/ 数据/ ,/ 这/ 与/ InkTag/ 利用/ 访问控制/ 保护/ 文件/ 的/ 思想/ 相似/ ./ AppSec/ 的/ 3/ 个/ 主要/ 特点/ 是/ :/ (/ 1/ )/ 利用/ 隔离/ 机制/ 防止/ 用户/ 与/ 系统/ 设备/ 交互/ 的/ 数据/ 被/ 恶意/ 内核/ 截获/ ;/ (/ 2/ )/ 提供/ 了/ 一个/ 基于/ 特权/ 的/ 窗口/ 系统/ ./ 该/ 系统/ 将/ 窗口/ 分成/ 两组/ (/ 高/ 特权/ 和/ 低/ 特权/ )/ ,/ 使得/ 只有/ 受/ 保护/ 的/ 进程/ (/ 高/ 特权/ )/ 能够/ 访问/ 到/ 自身/ 窗口/ 中/ 的/ 数据/ ;/ (/ 1/ )/ 和/ (/ 2/ )/ 的/ 前提/ 是/ I/ // O/ 设备/ 驱动/ 和/ Xwindow/ 服务/ 运行/ 在/ 一个/ 特定/ 、/ 隔离/ 的/ 专用/ 系统/ 中/ ;/ (/ 3/ )/ Overshadow/ 和/ AppSec/ 都/ 引入/ 了/ 安全/ 加载/ 程序/ ,/ 但是/ Overshadow/ 只/ 在/ 启动/ 时/ 对/ 用户程序/ 的/ 完整性/ 进行/ 了/ 验证/ ,/ 并/ 没有/ 在/ 运行/ 时/ 对/ 共享/ 动态链接库/ 进行/ 保护/ ./ AppSec/ 能够/ 在/ 运行/ 时/ 通过/ 存储/ 在/ Hypervisor/ 中/ 的/ 哈希/ 值/ 对/ 共享/ 动态/ 链接/ 程序/ 进行/ 验证/ ,/ 保证/ 共享/ 动态链接库/ 不/ 被/ 篡改/ ./ 要/ 完成/ 上述/ 工作/ ,/ AppSec/ 最大/ 的/ 挑战/ 是/ 如何/ 让/ Hypervisor/ 获取/ 受/ 保护/ 应用/ 进程/ 的/ 页面/ 信息/ (/ 因为/ 存在/ 语义/ 鸿沟/ )/ ./ 为/ 解决/ 该/ 问题/ ,/ 该/ 方案/ 在/ 运行/ 时/ 截获/ 应用程序/ 的/ 系统/ 调用/ ,/ 通过/ 分析/ 系统/ 调用/ 的/ 参数/ ,/ 追踪/ 受/ 保护/ 的/ 信息/ ./ 而/ 当/ GOS/ 内核/ 对受/ 保护/ 内存/ 页/ 进行/ 访存/ 时/ ,/ AppSec/ 查看/ GOS/ 访存/ 地址/ 是否/ 在/ 应用/ 进程/ 给予/ 的/ 访问/ 范围/ 之内/ ./ 这样/ 就/ 避免/ 了/ 利用/ 密码/ 机制/ 对/ 进程/ 的/ 数据/ 进行/ 加密/ ,/ 性能/ 上/ 优于/ Overshadow/ 和/ InkTag/ 方案/ ./ 但是/ ,/ 这/ 在/ 一定/ 程度/ 上/ 无法/ 保证数据/ 的/ 机密性/ ./ 最后/ 需要/ 指出/ 的/ 是/ AppSec/ 对/ 如何/ 区分/ 不同/ 系统/ 调用/ 以及/ 获取/ 系统/ 调用/ 参数/ 的/ 描述/ 较/ 模糊/ ,/ 也/ 没有/ 对/ 如何/ 得到/ 受/ 保护/ 进程/ 指定/ 的/ 访问/ 配置/ 策略/ 进行/ 阐述/ ./ 4.1/ ./ 3/ 虚拟机/ 自省/ (/ VMI/ )/ VMI/ 技术/ 已经/ 被/ 业界/ 广泛/ 使用/ ,/ 比如/ Amazon/ 和/ CitrixXenDesktop/ ./ Hypervisor/ 利用/ 虚拟机/ 自省/ 可以/ 方便/ 地/ 对/ GOS/ 内部/ 的/ 行为/ 进行/ 监控/ 和/ 分析/ ,/ 并/ 结合/ 蜜罐/ 和/ 入侵/ 检测/ 系统/ (/ IDS/ )/ 对/ 上层/ 系统/ 进行/ 防护/ ./ 学术界/ 对/ VMI/ 的/ 研究/ 主要/ 围绕/ 两个/ 方面/ :/ 建立/ 一个/ VMI/ 通用/ 框架/ ;/ 针对/ 具体/ 的/ 安全/ 威胁/ 利用/ VMI/ 技术/ 获取/ 相应/ 的/ 数据/ ,/ 以此/ 进行/ 系统/ 防护/ ./ VMI/ 技术/ 是从/ Hypervisor/ 层/ 获取/ 虚拟机/ 的/ 信息/ ,/ 需要/ 将/ 低级/ 别的/ 字节/ 码/ 转化/ 为/ 高级/ 别的/ 包含/ 虚拟机/ 系统/ 语义/ 的/ 信息/ (/ 语义/ 鸿沟/ )/ ./ 为了/ 克服/ 语义/ 鸿沟/ 这一/ 难题/ ,/ VMI/ 采取/ 3/ 种/ 语义/ 隔离/ 的/ 方法/ :/ 根据/ 预/ 提供/ 的/ 特定/ 操作系统/ 的/ 语义/ 信息/ ,/ 在/ GOS/ 外部/ 将/ 监控/ 数据/ 进行/ 语义/ 还原/ (/ out/ -/ of/ -/ band/ )/ ;/ 在/ GOS/ 内部/ 根据/ 自身/ 的/ 内部/ 信息/ 提供/ 结构/ 数据/ (/ in/ -/ band/ )/ ;/ 通过/ 硬件/ 结构/ 的/ 语义/ 信息/ 从/ 客户/ 虚拟机/ 中/ 获取/ 所/ 需/ 数据/ (/ derivation/ )/ ,/ 不/ 依赖/ 软件架构/ ./ 这/ 3/ 种/ 隔离/ 方法/ 中前/ 两种/ 方法/ 使用/ 比较/ 普遍/ ./ LibVMI/ [/ 37/ ]/ 通过/ 对/ XenAccess/ [/ 38/ ]/ 进行/ 扩展/ ,/ 提供/ 了/ 一套/ 桥接/ GOS/ 和/ Hypervisor/ 语义/ 鸿沟/ 的/ 通用/ 库/ ./ LibVMI/ 提供/ 了/ 对/ Hypervisor/ 的/ 广泛支持/ ,/ 包括/ Xen/ 、/ KVM/ 和/ Qemu/ 等/ ,/ 是/ 当前/ 应用/ 最/ 广泛/ 的/ VMI/ 框架/ 之一/ ./ LibVMI/ 的/ 设计/ 原则/ 是/ 尽可能/ 地/ 减少/ 对/ Hypervisor/ 的/ 修改/ ,/ 能够/ 透明/ 地/ 获取/ 客户/ 虚拟机/ 的/ 内部/ 信息/ (/ Linux/ 和/ Windows/ )/ ,/ 并且/ 为/ 上层/ 用户/ 提供/ 友好/ 的/ API/ 接口/ 和/ 便利/ 的/ 扩展性/ ./ 文献/ [/ 39/ ]/ 基于/ LibVMI/ 提供/ 了/ 虚拟化/ 环境/ 下/ 的/ 入侵/ 检测/ 系统/ ./ 该/ 系统/ 弥补/ 了/ 传统/ 病毒检测/ 和/ rootkits/ 探测系统/ 的/ 不足/ ,/ 并且/ 能够/ 深层次/ 地/ 对/ 虚拟机/ 内部/ 的/ 恶意/ 威胁/ (/ 比如/ rootkits/ )/ 进行/ 实时/ 检测/ ./ 文献/ [/ 40/ ]/ 借鉴/ 虚拟机/ 自省/ 技术/ ,/ 提供/ 了/ 一种/ 可以/ 对/ 虚拟机/ 内部/ 信息/ 进行/ 验证/ 的/ 语言/ ,/ 该/ 语言/ 被/ 称为/ VMI/ -/ PL/ ./ 用户/ 利用/ 该/ 语言/ 可以/ 方便/ 地/ 对/ 虚拟机/ 的/ 内存/ 数据/ 、/ 信息流/ 、/ 寄存器/ 以及/ 事件/ 进行/ 监控/ 和/ 拦截/ ./ 在/ VMI/ -/ PL/ 中/ ,/ 用户/ 以/ 系统/ 库/ 的/ 形式/ 为/ 应用/ 提供数据/ 、/ 事件/ 和/ 数据流/ 三类/ 探针/ ./ 基于/ 这三类/ 探针/ VMI/ -/ PL/ 不仅/ 可以/ 对/ 客户/ 虚拟机/ 的/ 内存/ 数据/ 进行/ 探测/ ,/ 还/ 可以/ 对/ 其/ 输入输出/ 以及/ 事件/ 进行/ 探测/ ./ 但是/ VMI/ -/ PL/ 的/ 性能/ 损耗/ 很大/ ,/ 性能/ 损耗/ 高达/ 18/ %/ ./ 虚拟机/ 自省/ 技术/ 与/ 电子/ 取证/ 技术/ 的/ 原理/ 类似/ ,/ RTKDSM/ [/ 41/ ]/ 利用/ 电子/ 取证/ 工具/ Volatility/ ①/ 解决/ 语义/ 鸿沟/ 问题/ ,/ 进而/ 提供/ 对/ 虚拟机/ 的/ 内部/ 数据/ 的/ 安全/ 验证/ 和/ 监控/ ./ 在/ RTKDSM/ 中/ 存在/ 两种/ 模式/ :/ 通用/ VMI/ 模式/ 和/ 监控/ 模式/ ./ 通用/ VMI/ 模式/ 由/ 一个/ 专用/ 虚拟机/ 利用/ VMI/ 原理/ 对/ 虚拟机/ 内部/ 的/ 数据/ 进行/ 提取/ ,/ 而/ 监控/ 模式/ 是/ 利用/ Hypervisor/ 和/ EPT/ 页表/ 项/ 的/ 权限/ 机制/ 保证数据/ 在/ 发生/ 更改/ 后/ 能够/ 及时/ 地被/ VMI/ 机制/ 得知/ ./ 但是/ 该/ 方案/ 是/ 基于/ 页/ 保护/ 机制/ ,/ 而/ 监控/ 的/ 对象/ 是/ 字节/ ,/ 因此/ 在/ 读写/ 受/ 监控/ 页/ 内/ 其它/ 非/ 监控/ 数据/ 时/ 也/ 会/ 发生/ 异常/ ,/ 产生/ 非必要/ 的/ 性能/ 损耗/ ./ 图/ 6/ 展现/ 的/ 是/ 基于/ Hypervisor/ 的/ 安全/ 防护/ 方案/ 的/ 框架图/ ./ Hypervisor/ 中/ 的/ 安全/ 模块/ (/ 影子/ 页表/ 、/ 完整性/ 验证/ 模块/ 、/ 访问控制/ 模块/ 以及/ 虚拟机/ 自省/ 等/ )/ 独立/ 于/ 上层/ 的/ 客户/ 虚拟机/ ,/ 用于/ 对/ 其/ 上/ 运行/ 的/ 虚拟机/ 进行/ 监控/ 、/ 授权/ 和/ 探测/ ,/ 并/ 可/ 结合/ IDS/ 、/ 蜜罐/ 和/ 恶意/ 行为/ 分析/ 等/ 系统/ 防护/ 技术/ 进行/ 全面/ 防护/ ./ 这些/ 方/ ①/ Anadvancedmemoryforensicsframework/ ./ https/ :/ // // github/ ./ Page11/ 案/ 能够/ 对/ GOS/ 的/ 安全/ 起到/ 加强/ 作用/ ,/ 但/ 性能/ 损耗/ 还/ 需/ 进一步/ 降低/ ./ 再者/ ,/ Hypervisor/ 自身/ 的/ 安全/ 问题/ 未/ 加以/ 考虑/ ./ 4.2/ Hypervisor/ 及/ 特权/ 域/ 的/ 安全/ 保护/ 4.1/ 节/ 的/ 方法/ 只/ 对/ 恶意/ 的/ GOS/ 和/ Apps/ 有效/ ,/ 并/ 没有/ 将/ 虚拟化/ 自身/ 的/ 威胁/ (/ Hypervisor/ 和/ 特权/ 域/ )/ 和/ 云/ 管理员/ 考虑/ 在内/ ①/ ./ 例如/ ,/ 上述/ 方案/ 中/ 假设/ 虚拟机/ 之间/ 是/ 安全/ 隔离/ 的/ ,/ 并且/ 虚拟机/ 不能/ 对/ 底层/ 的/ Hypervisor/ 进行/ 破坏/ ,/ VMI/ 技术/ 甚至/ 利用/ 特权/ 域/ (/ 包含/ 整个/ 系统/ 内核/ )/ 对/ GOS/ 进行/ 操作/ 截获/ 、/ 数据分析/ ./ 然而/ ,/ 现今/ Hypervisor/ 拥有/ 越来越/ 多/ 的/ 代码/ 量/ ,/ 攻击面/ 也/ 随之/ 剧增/ ,/ 安全/ 问题/ 日益突出/ ②/ ./ 针对/ 虚拟化/ 自身/ 的/ 安全/ 威胁/ ,/ 当前/ 的/ 云/ 服务提供商/ 通常/ 采用/ 被动/ 打补丁/ 的/ 方式/ 解决/ ./ 然而/ ,/ 这/ 不仅/ 给/ 用户/ 带来/ 了/ 不便/ ,/ 而且/ 这种/ 方式/ 也/ 只能/ 防范/ 已/ 公布/ 的/ 漏洞/ ,/ 对于/ 零日/ 攻击/ 或/ 潜在/ 的/ 漏洞/ 仍然/ 无能为力/ ./ 为/ 解决/ 虚拟化/ 自身/ 的/ 安全/ 问题/ ,/ 研究者/ 主要/ 关注/ 虚拟化/ TCB/ (/ 减少/ 攻击面/ 和/ 代码/ )/ 的/ 减小/ 和/ 虚拟化/ 自身/ 完整性/ 保护/ 两个/ 方面/ ./ 4.2/ ./ 1/ 减小/ 攻击面/ 攻击者/ 可以/ 通过/ 在/ 云/ 平台/ 租赁/ 虚拟机/ 直接/ 对/ Hypervisor/ 和/ 特权/ 域/ 进行/ 攻击/ ,/ 因此/ Hypervisor/ 是/ 攻击者/ 面临/ 的/ 第一道/ 防线/ ./ Hypervisor/ 和/ 特权/ 域/ 拥有/ 的/ 巨大/ 攻击面/ 是/ 虚拟化/ 层/ 的/ 最大/ 威胁/ 来源/ ./ Hypervisor/ 的/ 代码/ 量/ 随/ 功能/ 的/ 增强/ 越来越/ 多/ ./ 不仅如此/ ,/ 由于/ Hypervisor/ 对/ 硬件资源/ 进行/ 管理/ 和/ 分配/ ,/ 虚拟机/ 需要/ 和/ Hypervisor/ 进行/ 频繁/ 的/ 交互/ ,/ 然而/ 交互/ 越/ 多/ 受到/ 攻击/ 的/ 可能性/ 就/ 越/ 大/ ./ 根据/ 测试/ ,/ 从/ 虚拟机/ 陷入/ 到/ Hypervisor/ 的/ 主要/ 原因/ (/ 80/ %/ 以上/ )/ 是/ 页/ 错误/ 和/ I/ // O/ 请求/ [/ 1/ ]/ ./ 因此/ ,/ 研究者/ 们/ 开始/ 尝试/ 建立/ 一种/ 具有/ 较/ 小/ 代码/ 基和/ 攻击面/ 的/ 虚拟化/ 软件架构/ ,/ 其/ 主要/ 方式/ 是/ 减少/ Hypervisor/ 代码/ 量/ 和/ 改变/ 虚拟化/ 层/ 的/ 结构/ 以/ 减少/ 客户/ 虚拟机/ 与/ Hypervisor/ 的/ 交互/ ./ 在/ Xen/ 虚拟化/ 架构/ 中/ ,/ 特权/ 域/ (/ Dom0/ )/ 有/ 两个/ 功能/ :/ 设备/ 模拟/ 和/ 虚拟机/ 管理/ ./ 在/ 完成/ 虚拟机/ 管理/ 过程/ 中/ ,/ Dom0/ 通过/ 外/ 映射/ (/ foreignmapping/ )/ 将/ 其他/ 用户/ 的/ 虚拟机/ 的/ 内存/ 页/ 映射/ 到/ 自身/ 空间/ 中/ ,/ 这/ 使得/ 具有/ 庞大/ 脆弱性/ (/ 代码/ 量/ 大/ )/ 的/ Dom0/ 可/ 被/ 攻击者/ 用来/ 作为/ 攻击/ 其它/ 虚拟机/ 的/ 跳板/ ./ 因此/ 为了/ 防止/ 恶意/ Dom0/ 对/ 其它/ 虚拟机/ 进行/ 攻击/ 、/ 破坏/ ,/ 文献/ [/ 42/ ]/ 提出/ 将/ Dom0/ 从/ 虚拟化/ 层/ 的/ TCB/ 中/ 去除/ ./ 该/ 方案/ 主要/ 为/ 客户/ 虚拟机/ 提供/ 了/ 3/ 点/ 改进/ :/ 安全/ 的/ 运行/ 环境/ (/ 寄存器/ 和/ 内存/ )/ 、/ 安全/ 网络接口/ 和/ 后备/ 存储/ ./ 在/ 该/ 方案/ 中/ ,/ 为了/ 给/ 客户/ 虚拟机/ 提供/ 安全/ 的/ 执行/ 环境/ ,/ Dom0/ 只能/ 访问/ 到/ DomU/ 的/ 密文/ 信息/ (/ 除/ DomU/ 授权/ 给/ Dom0/ 的/ 内存/ 区域/ 之外/ )/ ./ 反之/ ,/ 当/ DomU/ 访问/ 自身/ 信息/ 时/ ,/ 则/ 首先/ 会/ 对/ 密文/ 进行/ 完整性/ 验证/ ,/ 然后/ 才/ 进行/ 数据/ 访问/ ,/ 防止/ 代码/ 篡改/ 和/ 嵌入/ ./ 对于/ 外/ 映射/ 内存/ ,/ 则/ 由/ Hypervisor/ 强制/ Dom0/ 释放/ 相应/ 的/ 页面/ ./ TrustOSV/ [/ 1/ ]/ 同样/ 针对/ Xen/ 框架/ ,/ 旨在/ 为/ 用户/ 提供/ 一个/ 可信/ 执行/ 环境/ ./ 该/ 方案/ 主要/ 解决/ 两个/ 问题/ :/ 减少/ 虚拟机/ 在/ 运行/ 时/ 对/ Hypervisor/ 的/ 频繁/ 交互/ ,/ 从而/ 减少/ Hypervisor/ 被/ 恶意/ 虚拟机/ 攻击/ 的/ 机会/ ;/ 阻止/ 内部人员/ 从/ 用户/ 虚拟机/ 的/ 内存/ 和/ 存储设备/ 中/ 窃取/ 数据/ ./ 为/ 实现/ 目的/ 一/ ,/ 在/ 启动/ 用户/ 虚拟机/ 之前/ ,/ TrustOSV/ 需要/ 对/ 虚拟机/ 的/ 初始状态/ 进行/ 远程/ 验证/ ,/ 确保/ 运行/ 的/ 是/ 用户/ 预期/ 的/ 虚拟机/ ./ 然后/ TrustOSV/ 采用/ 资源/ 预/ 分配/ 的/ 策略/ ,/ 即/ 根据/ 用户/ 租赁/ 的/ 资源/ ,/ TrustOSV/ 提前/ 将/ CPU/ 核心/ (/ cores/ )/ 和/ 内存/ 分配/ 给/ 客户/ 虚拟机/ ./ 资源/ 预/ 分配机制/ 减少/ 了/ 虚拟机/ 与/ Hypervisor/ 的/ 直接/ 交互/ ,/ 减少/ 了/ Hypervisor/ 被/ 攻击/ 的/ 机率/ ./ TrustOSV/ 的/ 资源/ 预/ 分配/ 策略/ 能够/ 防止/ 跨域/ 访问/ 和/ 跨/ 虚拟机/ 的/ Cache/ 攻击/ ./ TrustOSV/ 的/ 另/ 一个/ 特点/ 是/ 提供/ 了/ 丰富/ 的/ 远程/ 验证/ 服务/ ,/ 能/ 根据/ 用户/ 的/ 要求/ 返回/ 验证/ 结果/ ./ 为/ 达到/ 目的/ 二/ ,/ TrustOSV/ 没有/ 使用/ 网络/ 仿真/ 机制/ ,/ 而是/ 利用/ 了/ 一个/ 软/ NIC/ (/ 在/ 管理系统/ 中/ )/ 进行/ 统一/ 网络/ 数据/ 转发/ ./ TrustOSV/ 的/ 认证/ 依赖于/ Hypervisor/ 中/ 的/ 代理/ ./ 该/ 方案/ 利用/ 内存/ 锁定/ 机制/ (/ memorylockdown/ )/ 保证/ 代理/ 的/ 完整性/ ,/ 但是/ 如何/ 判断/ 恶意/ 和/ 良性/ 操作/ ,/ 文中/ 没有/ 给出/ 说明/ ./ 除此之外/ ,/ 恶意/ Hypervisor/ 提供/ 给/ 认证/ 模块/ 的/ 数据/ 可能/ 是/ 虚假/ 数据/ ,/ 认证/ 机制/ 的/ 不可/ 伪造/ 性/ 不能/ 被/ 保证/ ./ 最后/ 需要/ 说明/ 的/ 是/ ,/ TrustOSV/ 通过/ 修改/ GOS/ 的/ 文件系统/ 保证/ 磁盘/ I/ // O/ 数据安全/ ,/ 但/ 并/ 不/ 保证/ 网络/ I/ // O/ 数据/ 的/ 安全/ ./ TrustOSV/ 只是/ 减少/ 了/ 客户/ 虚拟机/ 与/ Hypervisor/ ①/ ②/ Page12/ 的/ 交互/ ,/ 而/ NoHype/ [/ 43/ -/ 44/ ]/ 认为/ Hypervisor/ 的/ 主要用途/ 是/ 便于/ 虚拟机/ 管理/ ,/ 并/ 不是/ 虚拟化/ 中/ 必不可少/ 的/ 部件/ ./ 因此/ ,/ NoHype/ 直接/ 将/ 整个/ Hypervisor/ 从云/ 虚拟化/ 平台/ 中/ 移除/ ./ NoHype/ 利用设备/ 的/ 虚拟化/ 特性/ [/ 45/ ]/ ,/ 将/ 设备/ 进行/ 物理/ 隔离/ 和/ 预/ 分配/ ./ 这样/ 在/ NoHype/ 框架/ 中/ 客户/ 虚拟机/ 可以/ 直接/ 访问/ 硬件/ ./ 但/ 在/ 虚拟机/ 创建/ 、/ 启动/ 阶段/ ,/ 需要/ 一个/ 临时/ 的/ Hypervisor/ 完成/ 硬件/ 检测/ 和/ 虚拟机/ 资源分配/ ./ NoHype/ 避免/ 了/ 虚拟机/ 之间/ 的/ 资源共享/ ,/ 每个/ 虚拟机/ 具有/ 独立/ 的/ CPU/ 核心/ 和/ 内存/ ./ 这样/ 跨域/ 访问/ 、/ 重/ 映射/ 和/ 数据/ 泄漏/ 攻击/ 得到/ 了/ 很/ 好/ 的/ 防御/ ,/ 比/ TrustOSV/ 实现/ 的/ 更为/ 彻底/ ./ NoHype/ 去掉/ 了/ 整个/ 虚拟化/ 层/ ,/ 大大减少/ 了/ Hypervisor/ 的/ 攻击面/ ,/ 并且/ 带来/ 了/ 性能/ 上/ 的/ 优化/ ./ 但是/ 最大/ 的/ 不足/ 是/ 需要/ 硬件/ 虚拟化/ 的/ 支持/ ,/ 而/ 对于/ 磁盘/ 存储/ 和/ GPU/ 硬件/ 虚拟化/ 还/ 在/ 尝试/ 阶段/ ,/ 对于/ 虚拟化/ 桌面/ 和/ 具有/ 图像/ (/ 3D/ )/ 、/ 视频/ 工作/ 负载/ 的/ 客户/ 虚拟机/ ,/ NoHype/ 显然/ 不是/ 最佳/ 选择/ ./ NOVA/ [/ 46/ ]/ 借用/ 了/ 微内核/ 的/ 思想/ ,/ 提供/ 了/ 一种/ 瘦小/ 的/ 虚拟化/ 架构/ ,/ 该/ 框架/ 主要/ 基于/ 一个/ 能/ 被/ 独立/ 设计/ 、/ 开发/ 和/ 验证/ 的/ 可信/ 模块/ ./ 在/ NOVA/ 中/ ,/ 传统/ 的/ Hypervisor/ 被/ 拆/ 分为/ 不同/ 的/ 模块/ ,/ 主要/ 有/ 四/ 部分/ :/ Micro/ -/ Hypervisor/ 、/ 根/ 分区/ 管理器/ (/ rootpartitionmanager/ )/ 以及/ 用户/ 层/ 的/ VMM/ (/ VirtualMachineMonitors/ )/ 和/ 设备/ 驱动/ ,/ 其中/ Micro/ -/ Hypervisor/ 运行/ 在/ CPUroot/ 模式/ 的/ 内核/ 层/ ,/ 其余/ 服务/ 都/ 以/ 进程/ 的/ 形式/ 运行/ 在/ CPUroot/ 模式/ 的/ 用户/ 层/ ./ 这/ 使得/ NOVA/ 在/ 提高/ 安全性/ 的/ 同时/ 降低/ 了/ 底层/ 接口/ 的/ 复杂度/ ./ NOVA/ 中/ 每个/ 虚拟机/ 都/ 有/ 一个/ 独立/ 的/ 用户/ VMM/ 进程/ 与/ 之/ 对应/ ,/ 这/ 与/ 错误/ 域/ 隔离/ 机制/ 相似/ ,/ 将/ 危害/ 限制/ 在/ 一个/ 独立/ 的/ 域/ 中/ ./ 由于/ 设备/ 驱动/ 以/ 进程/ 形式/ 运行/ 在/ 用户/ 空间/ ,/ 对于/ DMA/ 攻击/ ,/ 也/ 只能/ 影响/ 到/ 自身/ 的/ 虚拟机/ ./ 此外/ ,/ NOVA/ 基于/ 权能/ 的/ 访问控制/ ,/ 使得/ 不同/ 模块/ 拥有/ 不同/ 的/ 访问/ 权限/ ,/ 每个/ 模块/ 依据/ 权限/ 机制/ 拥有/ 最小/ 特权/ ,/ 防止/ 了/ 非法/ 访问/ ./ 但/ NOVA/ 减小/ Hypervisor/ 攻击面/ 的/ 同时/ 也/ 消减/ 了/ Hypervisor/ 的/ 功能/ ,/ 并且/ 在/ 客户/ 虚拟机/ 因/ 异常/ 退出/ 时/ (/ VM/ _/ EXIT/ )/ 不仅/ 要/ 切换/ CPU/ 模式/ ,/ 还/ 需要/ 切换/ CPU/ 的/ 运行/ 级别/ ./ 另外/ ,/ NOVA/ 将/ 部分/ 原来/ Hypervisor/ 的/ 功能/ 降级/ 到/ 用户/ 层/ ,/ 这/ 只是/ 减小/ 或/ 减弱/ 了/ 这些/ 代码/ 所/ 含/ 漏洞/ 的/ 影响/ ,/ 并未/ 根除/ ./ 同时/ 需要/ 对/ 现有/ 的/ 驱动/ 等/ 软件/ 进行/ 重写/ 编写/ ,/ 兼容性/ 差/ ./ 文献/ [/ 47/ -/ 48/ ]/ 是/ 针对/ KVM/ 的/ 专用/ 方案/ ,/ 该/ 方案/ 不同于/ 需要/ 对/ 虚拟化/ 进行/ 重新/ 设计/ 的/ NOVA/ ,/ 而是/ 从/ 逻辑/ 上/ 对/ KVM/ 的/ 代码/ 进行/ 分割/ ./ 文献/ [/ 47/ ]/ (/ HyperLock/ )/ 提供/ 了/ 一个/ 安全/ 、/ 隔离/ 的/ Hypervisor/ 运行/ 环境/ ./ HyperLock/ 通过/ 对/ Hypervisor/ 的/ 代码/ 数据/ 进行/ 备份/ ,/ 使得/ 每个/ 虚拟机/ 都/ 对应/ 一个/ 独立/ 运行/ 的/ KVM/ 副本/ (/ shadowedKVM/ )/ ,/ 而且/ 在/ 这个/ 独立/ 的/ 副本/ 地址/ 空间/ 中/ 只能/ 执行/ 有限/ 的/ 指令/ ./ 文献/ [/ 48/ ]/ 将/ HyperLock/ 中/ 的/ KVM/ 副本/ 进行/ 重新/ 改造/ ,/ 将/ KVM/ 分成/ 了/ 两/ 部分/ :/ 低/ 特权/ 级/ KVM/ (/ 运行/ 在/ 用户/ 层/ )/ 和/ 高/ 特权/ 级/ KVM/ (/ 运行/ 在/ 内核/ 层/ )/ ./ 该/ 方案/ 将/ 低/ 特权/ KVM/ 进行/ 实例/ 化/ ,/ 使得/ 每个/ 虚拟机/ 都/ 拥有/ 一个/ 独立/ 的/ 低/ 特权/ KVM/ 实例/ 完成/ 常用/ 的/ 虚拟化/ 功能/ ,/ 类似/ 于/ 错误/ 域/ 隔离/ 的/ 思想/ ,/ 这/ 与/ NOVA/ 的/ VMM/ 实例/ 化/ 一样/ ,/ 目的/ 是/ 通过/ 地址/ 空间隔离/ 将/ 攻击/ 限制/ 在/ 一个/ 可控/ 范围/ 内/ ./ 而/ 敏感/ 指令/ 、/ 中断/ 异常/ 和/ 硬件/ 虚拟化/ 等/ 高/ 特权/ 操作/ 交由/ 共享/ 且/ 微小/ 的/ 高/ 特权/ KVM/ 完成/ ./ 这/ 在/ 隔离/ 攻击/ 域/ 的/ 同时/ ,/ 降低/ 了/ Hyper/ -/ visor/ 的/ 可信/ 基/ ./ 但是/ 这些/ 方案/ 需要/ 对/ KVM/ 的/ 代码/ 进行/ 大幅度/ 的/ 改动/ ,/ 并且/ 将/ KVM/ 的/ 代码/ 移植/ 到/ 用户/ 空间/ 是/ 一个/ 难度/ 大/ ,/ 且/ 耗时/ 费力/ 的/ 工作/ ./ 文献/ [/ 42/ ]/ 通过/ 将/ 特权/ 域/ (/ 管理系统/ )/ 从/ 虚拟化/ 层/ 的/ TCB/ 中/ 剔除/ 从而/ 减小/ Hypervisor/ 被/ 攻击/ 的/ 可能性/ 和/ 防止/ 特权/ 域/ 对/ 客户/ 虚拟机/ 数据/ 的/ 窃取/ 和/ 篡改/ ./ TrustOSV/ 将/ 管理系统/ 运行/ 在/ 预/ 分配/ 的/ 硬件资源/ 中/ ,/ 并且/ 通过/ 减少/ 虚拟机/ 与/ Hypervisor/ 的/ 交互/ 防止/ 客户/ 虚拟机/ 对/ Hypervisor/ 的/ 攻击/ ./ 此外/ ,/ TrustOSV/ 为/ 用户/ 提供/ 了/ 平台/ 认证/ 和/ 软件/ 认证/ 的/ 服务/ ,/ 使得/ 用户/ 相信/ 虚拟化/ 平台/ 的/ 安全性/ ./ 与/ TrustOSV/ 思想/ 类似/ ,/ 但/ NoHype/ 是从/ 硬件/ 的/ 角度/ 出发/ ,/ 直接/ 去/ 除了/ 虚拟化/ 层/ ,/ 将/ 客户/ 虚拟机/ 直接/ 运行/ 在/ 预/ 分配/ 的/ 硬件资源/ 上/ ./ 但是/ 由于/ 现有/ 硬件/ 对/ 虚拟化/ 支持/ 的/ 不足/ ,/ 使得/ NoHype/ 的/ 思想/ 只能/ 维持/ 在/ 理论/ 层次/ ./ NOVA/ 与/ 前/ 3/ 种/ 方案/ 都/ 不同/ ,/ NOVA/ 是/ 对/ 虚拟化/ 框架/ 进行/ 了/ 重新/ 设计/ ,/ 采用/ 微内核/ 的/ 思想/ ,/ 将/ 虚拟化/ 层/ 分为/ 用户/ 态/ 软件/ 和/ 内核/ 态/ 核心/ ./ 而/ HyperLock/ 通过/ 对/ KVM/ 进行/ 隔离/ 达到/ 与/ NOVA/ 类似/ 的/ 目的/ ./ NOVA/ 和/ HyperLock/ 使得/ 虚拟机/ 不能/ 直接/ 对/ Hypervisor/ 进行/ 攻击/ ./ 并且/ ,/ 每个/ 虚拟机/ 对应/ 一个/ 用户/ 层/ 的/ 虚拟机/ 管理器/ 实例/ ,/ 隔离/ 了/ 错误/ 域/ ,/ 使得/ 攻击/ 的/ 危害/ 不易/ 扩展/ ./ 4.2/ ./ 2Hypervisor/ 完整性/ 由于/ Hypervisor/ 位于/ 虚拟化/ 的/ 最底层/ ,/ 负责/ 虚拟化/ 的/ 整个/ 软件/ 栈/ 安全/ ,/ 同时/ 也/ 是/ 攻击者/ 面临/ 的/ 最后/ 一道/ 软件/ 层/ 防线/ ./ 然而/ 减少/ 攻击面/ 并/ 不能/ 完全/ 保证/ 虚拟化/ 层/ 的/ 安全/ ./ 因此/ ,/ 需要/ 提供/ 安全/ 机制/ 来/ 保护/ Hypervisor/ 的/ 安全/ ./ Page13/ 可信/ 启动/ [/ 49/ ]/ 能够/ 保证/ Hypervisor/ 启动/ 的/ 安全性/ ,/ 但是/ Hypervisor/ 运行/ 时/ 的/ 威胁/ 却/ 如/ 梦魇/ 般/ 相随/ ./ 保证/ Hypervisor/ 运行/ 时/ 的/ 安全/ 最/ 有效/ 、/ 最/ 常用/ 的/ 方法/ 就是/ 保证/ Hypervisor/ 运行/ 时/ 的/ 完整性/ ,/ 其/ 框架图/ 见图/ 7/ ./ HyperCheck/ [/ 50/ ]/ 和/ HyperSentry/ [/ 51/ ]/ 采用/ 完整性/ 验证/ 的/ 方式/ ,/ 实时/ 地/ 保证/ Hypervisor/ 不/ 被/ 篡改/ ,/ 防范/ rootkits/ 攻击/ 等/ ./ HyperCheck/ 提供/ 了/ 一种/ 基于/ 硬件/ 辅助/ 的/ Hypervisor/ 完整性/ 探测/ 框架/ ,/ 利用/ SMM/ 对系统/ 内存/ 和/ 寄存器/ 制作/ 快照/ ,/ 然后/ 通过/ NIC/ 将/ 内存/ 数据/ 发送给/ 远程/ 的/ 分析/ 服务器进行/ 分析/ (/ 物理/ 内存/ 获取/ 模块/ )/ ./ 为了/ 便于/ 获取/ 物理/ 内存/ 的/ 数据/ ,/ HyperCheck/ 提出/ 借助/ 符号表/ 和/ 寄存器/ 值/ 的/ 方案/ ,/ 防止/ 因/ 拷贝/ -/ 变化/ 攻击/ (/ copyandchangeattack/ )/ 而/ 获取/ 错误/ 数据/ (/ 寄存器/ 验证/ 模块/ )/ ,/ 例如/ 攻击者/ 不/ 改变/ 原有/ Hypervisor/ 的/ 页表/ ,/ 而是/ 通过/ 修改/ CR3/ 等/ 寄存器/ 伪造/ 一个/ 新/ 的/ 页表/ ./ 远端/ 分析/ 服务器/ 通过/ 对/ 内存/ 快照/ 分析/ 而/ 验证/ Hypervisor/ 的/ 完整性/ ,/ 同时/ 利用/ 带外/ 机制/ (/ out/ -/ of/ -/ band/ )/ 监测/ 对/ NIC/ 设备/ 的/ DoS/ 攻击/ (/ 分析/ 模块/ )/ ./ 在/ 上述/ 方案/ 中/ ,/ 完整性/ 验证/ 操作/ 需要/ 由/ Hypervisor/ 自身/ 触发/ ,/ 这/ 期间/ 可能/ 存在/ 擦洗/ 攻击/ ,/ 即/ 在/ 完整性/ 验证/ 之前/ 攻击者/ 已/ 擦除/ 其/ 攻击/ 痕迹/ ./ 而/ HyperSentry/ [/ 51/ ]/ 提出/ 了/ 针对/ 运行/ 时/ Hypervisor/ 完整性/ 的/ 隐秘/ 度量/ 框架/ ./ 与/ HyperCheck/ 相比/ ,/ HyperSentry/ 没有/ 利用/ PCI/ 设备/ ,/ 而是/ 采用/ 了/ 软件/ 组件/ 的/ 方式/ ./ 这种/ 组件/ 隔离/ 于/ Hypervisor/ ,/ 能够/ 对/ Hypervisor/ 的/ 代码/ 和/ 重要/ 数据结构/ 进行/ 隐秘/ 的/ 、/ 实时/ 的/ 完整性/ 度量/ ./ HyperSentry/ 最大/ 的/ 创新/ 是/ 利用/ 智能/ 平台/ 管理/ 接口/ (/ IPMI/ )/ 隐秘/ 触发/ 度量/ 操作/ ,/ 防止/ Hypervisor/ 隐藏/ 其/ 攻击/ 痕迹/ ,/ 从而/ 避免/ 擦洗/ 攻击/ ./ HyperSentry/ 相比/ HyperCheck/ 另/ 一/ 创新/ 是/ 突破/ 了/ 系统/ 管理模式/ 的/ 限制/ ,/ 提供/ 了/ 完整性/ 度量/ 代理/ ./ 如此/ ,/ 使得/ 即使/ 触发/ SMM/ 操作/ 时/ 客户/ 虚拟机/ 在/ 运行/ ,/ 仍/ 可/ 完成/ 对/ Hypervisor/ 的/ 验证/ ./ HyperCheck/ 和/ HyperSentry/ 只是/ 对/ Hypervisor/ 的/ 静态数据/ 或/ 代码/ 进行/ 保护/ ,/ 并/ 不能/ 防护/ 动态数据/ 篡改/ 引起/ 的/ 攻击/ ./ 它们/ 应该/ 结合/ HookSafe/ 的/ 思想/ 对/ 动态数据/ 进行/ 动态/ 防护/ ./ 此外/ ,/ 他们/ 都/ 利用/ 了/ SMM/ 机制/ ,/ 然而/ SMM/ 有/ 自身/ 的/ 局限性/ :/ 性能/ 是/ 正常/ 模式/ 的/ 十分之一/ ;/ 在/ SMM/ 操作/ 时/ 需要/ 冻结/ 所有/ 的/ CPU/ 核心/ ;/ 只能/ 访问/ 4GB/ 之内/ 的/ 物理/ 内存/ ./ 这/ 给/ 虚拟化/ 框架/ 带来/ 了/ 巨大/ 的/ 性能/ 损耗/ ./ 在/ 4.1/ ./ 1/ 节中/ 我们/ 提到/ 完整性/ 保护/ 的/ 方法/ 有/ 两种/ ,/ 完整性/ 验证/ 只能/ 保证/ 攻击/ Hypervisor/ 后能/ 被/ 及时/ 地/ 觉察/ ,/ 但/ 并/ 不能/ 防范/ 于未然/ ./ 对此/ ,/ HyperSafe/ [/ 52/ ]/ 提出/ 了/ 在/ 整个/ 生命周期/ 内/ ,/ 针对/ Hypervisor/ (/ Type/ -/ 1/ )/ 控制流/ 完整性/ 的/ 自/ 保护/ 方案/ (/ 未/ 引入/ 新/ 的/ 软硬件/ )/ ./ HyperSafe/ 提出/ 了/ 两个/ 关键技术/ :/ 不可/ 被/ 绕过/ 的/ 内存/ 锁定/ 机制/ (/ nonbypassablememorylockdown/ )/ 和/ 受限/ 的/ 指针/ 索引/ (/ restrictedpointerindexing/ )/ ./ 首先/ 是/ 通过/ 不可/ 绕过/ 的/ 内存/ 锁定/ 机制/ 保护/ Hypervisor/ 的/ 代码/ 和/ 静态数据/ 不能/ 被/ 篡改/ ./ 一旦/ 页面/ 被/ 锁定/ ,/ 任何/ 对/ 这个/ 页/ 的/ 修改/ 都/ 需要/ 先/ 解锁/ ./ 而/ 解锁/ 操作/ 禁止/ 对/ Hypervisor/ 的/ 代码/ 进行/ 修改/ 或/ 引入/ 外部/ 代码/ ,/ 这/ 提供/ 了/ 和/ HyperSentry/ 等/ 类似/ 的/ 代码/ 完整性/ 保护/ 机制/ ./ 虽然/ 不可/ 绕过/ 的/ 内存/ 锁定/ 机制/ 保证/ 了/ hypervisor/ 代码/ 的/ 完整性/ ,/ 但是/ 控制结构/ 或/ 变量/ 仍/ 可/ 导致/ 控制流/ 劫持/ ./ 由于/ 内存/ 锁定/ 机制/ 并/ 不能/ 灵活/ 地/ 适用/ 于/ 动态数据/ 的/ 保护/ ,/ HyperSafe/ 提出/ 数据/ 重定向/ 机制/ ,/ 其/ 目的/ 是/ 将/ 动态数据/ 转换成/ 指针/ 索引/ (/ restrictedpointerindexing/ )/ ./ 而/ 这些/ 索引/ 值/ 是/ 通过/ 线下/ 执行/ Hypervisor/ 而/ 得到/ 的/ 执行/ 流图/ ./ 这样/ 就/ 把/ 执行/ 流/ 的/ 可能性/ 限制/ 在/ 了/ 可信/ 集/ 之内/ ./ 不可/ 绕过/ 的/ 内存/ 锁/ 和/ 受限/ 的/ 指针/ 索引/ 保证/ 了/ Hypervisor/ 控制流/ 的/ 完整性/ ./ 但/ 文章/ 中/ 只是/ 说明/ 了/ 在/ 对/ 页表/ 进行/ 更改/ 时/ 需要/ 验证/ 操作/ 行为/ 是否是/ 合法/ 的/ ,/ 并/ 没有/ 提出/ 判断/ 操作/ 合法性/ 的/ 依据/ 和/ 标准/ ./ 总的来说/ ,/ 这些/ 方案/ 主要/ 是/ 通过/ 完整性/ 检测/ 手段/ 来/ 发现/ 针对/ Hypervisor/ 的/ 攻击/ ,/ 例如/ rootkits/ 攻击/ 、/ 控制流/ 截获/ 和/ DMA/ 数据/ 篡改/ 等/ ./ HyperSentry/ 比/ HyperCheck/ 高明/ 之/ 处/ 在于/ 利用/ 了/ 硬件/ 的/ 特性/ ,/ 比如/ IPMI/ 、/ LAPIC/ 以及/ 性能/ 计数/ (/ performancecounters/ )/ ./ 但是/ 它们/ 两者/ 都/ 利用/ 了/ 硬件/ 的/ DMA/ 特性/ 对/ Hypervisor/ 的/ 内存/ 进行/ 扫描/ 、/ 拷贝/ ,/ 这/ 也/ 为/ 内部/ 攻击者/ 提供/ 了/ 契机/ ./ 同时/ 对于/ 具有/ IOMMU/ 功能/ 的/ 芯片/ ,/ 则/ 需要/ 对/ IOMMU/ 进行/ 配置/ 使/ 其/ 能够/ 对/ Hypervisor/ 的/ 地址/ 空间/ 进行/ 访问/ ./ HyperSafe/ 克服/ 了/ HyperSentry/ 和/ HyperCheck/ 的/ 不足/ ,/ 能够/ 防护/ return/ -/ oriented/ 类型/ 的/ 攻击/ ./ 但/ HyperSafe/ 的/ 自/ 保护/ Page14/ 机制/ 需要/ 进行/ 代码/ 剔除/ ,/ 其/ 灵活性/ 不高/ ./ 4.3/ 不/ 安全/ 虚拟化/ 环境/ 下/ 的/ 安全/ 防护/ 4.2/ 节/ 主要/ 集中/ 在/ 保护/ Hypervisor/ 完整性/ 和/ 减小/ Hypervisor/ 的/ 攻击面/ 这/ 两个/ 方面/ ./ 即使/ 这样/ ,/ 仍/ 不能/ 确保/ Hypervisor/ 的/ 安全/ ,/ Hypervisor/ 仍然/ 存在/ 安全漏洞/ 和/ 脆弱性/ ./ 因此/ ,/ 在/ Hypervisor/ 不可/ 信/ 的/ 情况/ 下/ 如何/ 保证/ 虚拟机/ 的/ 安全/ 则/ 显得/ 尤为重要/ ./ 4.3/ ./ 1/ 基于/ 隔离/ 机制/ 的/ 防护/ 多/ 租户/ 模式/ 和/ 资源共享/ 是/ 云/ 计算/ 的/ 主要/ 威胁/ [/ 53/ ]/ ,/ 而/ 内存/ 去/ 重/ (/ memorydeduplication/ )/ 机制/ 更/ 加剧/ 了/ 这/ 一/ 威胁/ [/ 54/ ]/ ./ 客户/ 虚拟机/ 之间/ 的/ 隔离/ 性是/ 由/ Hypervisor/ 维护/ 的/ ,/ 而/ 在/ 不可/ 信/ 的/ 虚拟化/ 环境/ 下/ 同一/ 物理/ 机/ 内/ 虚拟机/ 之间/ 的/ 隔离/ 性/ 难以/ 保证/ ,/ 这/ 可能/ 导致/ 客户/ 虚拟机/ 的/ 数据/ 泄漏/ 、/ 跨域/ 访问/ 、/ 控制流/ 截获/ 等/ 威胁/ ./ 为此/ ,/ 研究者/ 尝试/ 更改/ 软件/ 和/ 硬件/ 架构/ 对/ 虚拟机/ 进行/ 安全/ 隔离/ ,/ 其/ 抽象/ 架构/ 如图/ 8/ 所示/ ./ 在/ 图/ 8/ 中/ ,/ 通用/ 内存/ 是/ 虚拟机/ 共享/ 的/ 资源/ ,/ 而/ 安全/ 内存/ 是/ 安全/ 模块/ 专用/ 的/ 内存/ ./ 图/ 8Hypervisor/ 及/ 虚拟机/ 之间/ 内存/ 隔离/ 框架/ 既然/ Hypervisor/ 的/ 安全/ 威胁/ 很难/ 防护/ ,/ 且/ 云/ 提供商/ 内部/ 员工/ 的/ 最小/ 权限/ 很难/ 适当/ 划分/ ,/ 研究者/ 尝试/ 将/ Hypervisor/ 的/ 机制/ (/ 管理/ )/ 和/ 策略/ (/ 控制/ )/ 进行/ 分离/ 以此/ 来/ 保障/ 虚拟机/ 的/ 安全/ ./ 基于/ 此/ ,/ CloudVisor/ [/ 55/ ]/ 首次/ 提出/ 了/ 将/ 决策权/ 和/ 管理/ 能力/ 分离/ ,/ 透明/ 地/ 对/ 虚拟机/ 进行/ 保护/ ./ CloudVisor/ 方案/ 主要/ 有/ 两个/ 贡献/ :/ 利用/ 嵌套/ 虚拟化/ 技术/ 将/ 资源管理/ 和/ 权限/ 控制/ 隔离/ ;/ 提出/ 了/ 基于/ 页/ 属/ 主/ 的/ 虚拟机/ 隔离/ 机制/ ./ Cloudvisor/ 利用/ 嵌套/ Hypervisor/ [/ 56/ ]/ 机制/ 将/ 传统/ Hypervisor/ 的/ 决策权/ 下降/ 给/ 底层/ 微小/ 的/ 嵌套/ Hypervisor/ ,/ 这样/ 限制/ 了/ 传统/ Hypervisor/ 对/ 虚拟机/ 资源/ 的/ 直接/ 访问/ ./ CloudVisor/ 通过/ 将/ 传统/ 的/ 虚拟机/ 的/ VM/ _/ EXIT/ 入口/ 重定向/ 到/ 自身/ ,/ 这样/ CloudVisor/ 就/ 可以/ 截获/ 虚拟机/ 与/ 传统/ Hypervisor/ 的/ 交互/ ./ 在/ 此/ 过程/ 中/ ,/ CloudVisor/ 需对/ 相关/ 信息/ 进行/ 记录/ 、/ 存储/ 以备/ 后续/ 之用/ ,/ 而/ 虚拟机/ 异常/ 的/ 处理/ 则/ 交由/ 传统/ 的/ Hypervisor/ ./ CloudVisor/ 为了/ 将/ 不同/ 虚拟机/ 以及/ 虚拟机/ 与/ Hypervisor/ 之间/ 隔离/ ,/ 在/ 分配/ 页面/ 时/ 通过/ 查询/ 页面/ 属/ 主表/ 保证/ 一个/ 页面/ 只能/ 属于/ 一个/ 虚拟机/ ./ 除此之外/ ,/ CloudVisor/ 限制/ Hypervisor/ 对/ 虚拟机/ EPT/ 表/ 的/ 更新/ ,/ 防止/ 恶意/ Hypervisor/ 违反/ 页/ 属主/ 唯一/ 的/ 原则/ ./ CloudVisor/ 同时/ 借鉴/ 了/ Overshadow/ 加密/ 机制/ ,/ 在/ Hypervisor/ 申请/ 更新/ EPT/ 表时/ ,/ 如果/ 页面/ 属主/ 与/ EPT/ 不/ 匹配/ 则/ 需要/ 对页/ 内/ 数据/ 进行/ 加密/ ./ 而/ 对于/ DMA/ 攻击/ ,/ Cloud/ -/ Visor/ 则/ 在/ IOMMU/ 中/ 利用/ 了/ 与/ 内存/ 隔离/ 相似/ 的/ 机制/ ./ CloudVisor/ 将/ 虚拟机/ 的/ 内存/ 从/ IOMMU/ 页表/ 中/ 移除/ ./ 当对/ 这些/ 页/ 进行/ DMA/ 访问/ 时/ ,/ 则/ 会/ 产生/ IOMMU/ 页/ 错误/ ,/ 然后/ 交由/ CloudVisor/ 进行/ 处理/ ./ 通过/ 这些/ 机制/ ,/ CloudVisor/ 能够/ 保护/ 虚拟机/ 的/ 数据/ 不/ 被/ 其它/ 虚拟机/ 窃取/ ./ 然而/ 在/ 虚拟化/ 中/ ,/ 虚拟机/ 需要/ 频繁/ 地/ 与/ hypervisor/ 进行/ 交互/ ,/ 这/ 使得/ CloudVisor/ 在/ 切换/ 过程/ 中/ 性能/ 损耗/ 较大/ ./ 并且/ 由于/ CloudVisor/ 引入/ 了/ 新/ 的/ 软件/ 层/ ,/ 在/ 一定/ 程度/ 上/ 增加/ 了/ 虚拟化/ 软件/ 栈/ 的/ 复杂度/ 和/ 潜在/ 安全漏洞/ ./ 与/ CloudVisor/ 类似/ ,/ SMMU/ [/ 57/ ]/ 和/ H/ -/ SVM/ [/ 58/ -/ 59/ ]/ 通过/ 对/ CPU/ 进行/ 逻辑/ 扩展/ 实现/ 虚拟机/ 间/ 的/ 隔离/ ./ 该/ 方案/ 的/ 隔离/ 性/ 并/ 不/ 基于/ 软件/ 层/ ,/ 可信/ 基只/ 包含/ 内存/ 、/ CPU/ 和/ Cache/ 等/ 硬件资源/ ./ H/ -/ SVM/ 方案/ 借鉴/ 了/ CloudVisor/ 的/ 内存/ 属主/ 机制/ ,/ 并且/ 基于/ CPU/ 的/ SMM/ 运行/ 模式/ 利用/ 微码/ 实现/ 了/ 虚拟机/ 内存/ 页/ 的/ 隔离/ ./ H/ -/ SVM/ 首先/ 扩展/ 了/ 内存/ 分配/ (/ map/ )/ 和/ 释放/ (/ unmap/ )/ 指令/ ,/ 在/ Hypervisor/ 进行/ 内存/ 管理/ 时/ ,/ 需要/ 调用/ SMM/ 中/ 的/ 微码/ ,/ 只有/ 通过/ 对/ 物理/ 页/ 属/ 主/ 的/ 审查/ 后/ 才能/ 进行/ 相应/ 内存/ 分配/ ./ H/ -/ SVM/ 借鉴/ 了/ CloudVisor/ 对/ 内存/ 页/ 属/ 主/ 的/ 跟踪/ 机制/ ,/ 利用/ OPT/ 表/ (/ OwnershipPageTable/ )/ 记录/ 每个/ 物理/ 页/ 的/ 属主/ ./ 在/ Hypervisor/ 调用/ map/ 分配内存/ 时/ ,/ H/ -/ SVM/ 首先/ 根据/ 安全/ 内存/ 中/ 的/ OPT/ 表/ 判断/ Hypervisor/ 分配/ 的/ 物理/ 页/ 是否/ 已有/ 属主/ ./ 如果/ 这个/ 物理/ 页/ 是/ 空闲/ 的/ ,/ 则/ 分配/ 给/ 这个/ 虚拟机/ ,/ 并/ 标记/ 其属主/ 为此/ 虚拟机/ 的/ ID/ ./ 这样/ 保证/ 了/ 每个/ 物理/ 页/ 只能/ 分配/ 给/ 一个/ 虚拟机/ ./ 但是/ 对于/ 虚拟机/ 之间/ 和/ 虚拟机/ 与/ Hypervisor/ 之间/ 的/ 共享内存/ ,/ H/ -/ SVM/ 提供/ 了/ 一个/ 接口/ 可/ 供/ 客户/ 虚拟机/ 自己/ 设置/ 共享/ 页/ ./ 在/ H/ -/ SVM/ 的/ 后期/ 实现/ 中/ ,/ 作者/ 利用/ SMM/ 的/ 隔离/ 性/ 和/ 高/ 特权/ 级/ 进一步/ 对/ H/ -/ SVM/ 进行/ 了/ 扩展/ ,/ 将/ 安全/ 模块/ 与/ Hypervisor/ 进行/ 了/ 完全/ 隔离/ ./ 但/ SMM/ 的/ 缺点/ 也/ 是/ 显而易见/ 的/ ./ H/ -/ SVM/ 需要/ Hypervisor/ 配合/ 来/ 完成/ 其/ 操作/ ,/ 这/ 对/ Hypervisor/ 不/ 透明/ ,/ 并且/ 也/ 没有/ 像/ HyperSentry/ 提供/ 隐秘/ 触发/ 机/ Page15/ 制/ ./ 此外/ ,/ H/ -/ SVM/ 只能/ 防范/ 软件/ 层/ 攻击/ ,/ 对于/ 物理攻击/ 无能为力/ ./ NoHype/ [/ 43/ -/ 44/ ]/ 也/ 利用/ 了/ 隔离/ 的/ 思想/ ,/ 将/ 用户/ 的/ 操作/ 、/ 数据/ 等/ 限制/ 在/ 一个/ 独立/ 的/ 环境/ 中/ ./ 但/ 不同/ 的/ 是/ ,/ NoHype/ 是/ 对/ 物理/ 资源/ 进行/ 绝对/ 隔离/ ,/ 做到/ 了/ 资源/ 专用/ ./ NoHype/ 不仅/ 可以/ 防止/ 跨域/ 内存/ 访问/ 和/ Cache/ 共享/ ,/ 还/ 可以/ 避免/ 客户/ 虚拟机/ 间/ 的/ 相互影响/ ./ 上述/ 方案/ 的/ 内存/ 隔离/ 粒度/ 都/ 是/ 基于/ 页/ 级别/ 的/ ./ Iso/ -/ X/ [/ 32/ ]/ 和/ IntelSGX/ [/ 33/ -/ 35/ ]/ 通过/ 对/ CPU/ 进行/ 安全/ 扩展/ 将/ 内存/ 的/ 保护/ 粒度/ 缩小/ 到/ 了/ 隔间/ (/ segment/ )/ ,/ 其/ 保护/ 对象/ 不再/ 是/ 客户/ 虚拟机/ ,/ 而是/ 将/ 保护/ 对象/ 缩小/ 到/ 进程/ 内部/ 模块/ ./ 在/ Iso/ -/ X/ 和/ SGX/ 方案/ 中/ ,/ 每个/ 进程/ 的/ 地址/ 空间/ 被/ 分割/ 成/ 多个/ 安全/ 区域/ 和/ 不/ 安全/ 区域/ ,/ 这些/ 区域/ 是/ 由/ 程序员/ 编写程序/ 时/ 设定/ 的/ ./ 这样/ 只有/ 程序员/ 指定/ 的/ 安全/ 代码/ 域/ 能/ 访问/ 到/ 指定/ 的/ 敏感数据/ ,/ 非/ 安全区/ 的/ 代码/ 对/ 这些/ 敏感数据/ 的/ 访问/ 会/ 引发/ 异常/ ./ Iso/ -/ X/ 利用/ 位图/ 中/ 的/ 比特/ 位/ (/ bit/ )/ 来/ 对/ 每个/ 物理/ 页/ 进行/ 记录/ ,/ 用于/ 标记/ 这个/ 物理/ 页/ 是否/ 属于/ 一个/ 安全/ 区域/ ,/ 这样/ 在/ 每次/ 内存/ 访问/ 时/ ,/ 只/ 需要/ 对/ 这个/ 页/ 的/ 比特/ 位/ 进行/ 查询/ ,/ 就/ 可以/ 保证/ 不可/ 信/ 区域/ 访问/ 不到/ 敏感数据/ ./ Iso/ -/ X/ 相比/ IntelSGX/ ,/ 能够/ 对/ 安全/ 区域/ 中/ 的/ 页/ 进行/ 动态/ 增加/ ,/ 在/ SGX/ 中/ 一旦/ 隔间/ 被/ 创建/ 则/ 立刻/ 进行/ 封装/ ,/ 不可/ 再/ 被/ 扩展/ ./ 然而/ ,/ IntelSGX/ 利用/ 封装/ 机制/ 能够/ 对/ 数据/ 进行/ 认证/ 、/ 加密/ 等/ ,/ 防止/ 其内/ 数据/ 被/ 篡改/ 和/ 窃取/ ./ 这/ 两种/ 方案/ 都/ 是/ 在/ CPU/ 访存/ 时/ 对/ 操作/ 进行/ 判断/ ,/ 而/ 指令/ 级/ 的/ 访存/ 非常/ 频繁/ ,/ 带来/ 的/ 性能/ 损耗/ 较大/ ./ 再者/ ,/ 这/ 两种/ 方案/ 需要/ 从/ 编程语言/ 、/ 编译器/ 以及/ CPU/ 硬件/ 整个/ 架构/ 进行/ 全套/ 更新/ ,/ 适用性/ 比较/ 差/ ./ H/ -/ SVM/ 方案/ 与/ CloudVisor/ 最大/ 的/ 不同/ 是/ H/ -/ SVM/ 是/ 基于/ 硬件/ 实现/ 的/ ./ 除此之外/ ,/ H/ -/ SVM/ 为/ 客户/ 虚拟机/ 提供/ 了/ 灵活/ 的/ 共享/ 页/ 配置/ 接口/ ,/ 而/ Cloud/ -/ Visor/ 不能/ 提供/ 虚拟机/ 之间/ 的/ 共享/ ./ 但是/ H/ -/ SVM/ 需要/ Hypervisor/ 调用/ SMM/ 中/ 微指令/ 对/ 内存/ 分配/ 和/ 释放/ 进行/ 保护/ ,/ 需要/ 对/ Hypervisor/ 进行/ 一定/ 程度/ 的/ 修改/ ,/ 并且/ 由于/ SMM/ 的/ 天生/ 缺陷/ 使得/ H/ -/ SVM/ 的/ 性能/ 较差/ ./ CloudVisor/ 通过/ 截获/ VM/ _/ EXIT/ 不/ 需要/ Hypervisor/ 的/ 参与/ 即可/ 完成/ 虚拟机/ 之间/ 的/ 隔离/ ./ NoHype/ 提供/ 的/ 是/ 虚拟机/ 之间/ 的/ 物理/ 隔离/ ,/ 因此/ 其/ 安全性/ 是/ 最高/ 的/ ./ Iso/ -/ X/ 和/ SGX/ 不同于/ H/ -/ SVM/ 等/ 方案/ ,/ 这/ 两种/ 方案/ 的/ 保护/ 粒度/ 是/ 隔间/ ,/ 保护/ 对象/ 更/ 具体/ ,/ 同时/ 减少/ 了/ 非/ 敏感数据/ 保护/ 而/ 损耗/ 的/ 性能/ ./ 但/ 这/ 两种/ 方案/ 的/ 推广/ 和/ 实施/ 需要/ 一定/ 的/ 时间/ ./ 4.3/ ./ 2/ 基于/ 加密/ 机制/ 的/ 防护/ 虽然/ 隔离/ 机制/ 比/ 加密/ 机制/ 拥有/ 更/ 小/ 的/ 性能/ 损耗/ ,/ 但/ 不能/ 实时/ 地/ 防范/ 物理攻击/ ./ 在/ 传统/ 的/ CPU/ 架构/ 中/ ,/ 内存/ 数据/ 面临/ 这样/ 的/ 安全/ 悖论/ :/ 加密/ ,/ 数据/ 无法/ 被/ CPU/ 处理/ ;/ 不/ 加密/ ,/ 数据/ 的/ 安全性/ 和/ 隐私/ 性/ 得不到/ 保证/ ./ 因此/ ,/ 若想/ CPU/ 能够/ 处理/ 内存/ 中/ 的/ 加密/ 数据/ ,/ 则/ 需要/ 对/ CPU/ 进行/ 加/ // 解密/ 安全/ 扩展/ ,/ 使/ 其/ 拥有/ 处理/ 密文/ 的/ 能力/ ./ CPU/ 安全/ 扩展/ 可以/ 很/ 好/ 地/ 为/ 云/ 虚拟化/ 环境/ 提供/ 由/ 软件/ 到/ 硬件/ 的/ 可信/ 链路/ ,/ 框架图/ 见图/ 9/ 所示/ ./ 随着/ 云/ 计算/ 的/ 发展/ ,/ 研究者/ 开始/ 关注/ 利用/ CPU/ 的/ 安全/ 扩展/ 保护/ 虚拟机/ 的/ 安全/ ,/ 扩展/ 的/ 主要/ 模块/ 是/ Cache/ 、/ TLB/ 及其/ 处理/ 逻辑/ ./ Bastion/ [/ 60/ ]/ 利用/ 微处理器/ 来/ 加强/ Hypervisor/ 抵抗/ 物理攻击/ 和/ 软件/ 攻击/ ,/ 并/ 提供/ 基于/ 模块化/ 、/ 细粒度/ 的/ 策略/ 用于/ 保护/ 虚拟机/ 内部/ 进程/ 的/ 数据/ ./ 在/ Bastion/ 框架/ 中/ ,/ 应用程序/ 分为/ 多个/ 模块/ ,/ 每个/ 模块/ 有/ 独立/ 的/ 模块号/ ./ Bastion/ 在/ CPU/ 的/ Cache/ 和/ TLB/ 中/ 进行/ 了/ 模块/ 和/ 策略/ 扩展/ ,/ 保证/ 只有/ 进程/ 内部/ 的/ 模块/ 能够/ 访问/ 自己/ 的/ 数据/ ./ 但/ Bastion/ 只/ 支持/ 单/ 处理器/ ,/ 并且/ 不适/ 用于/ 保护/ 整个/ 用户/ 进程/ 和/ 用户/ 地址/ 空间/ 的/ 数据/ ./ SecureME/ [/ 61/ ]/ 弥补/ 了/ Bastion/ 的/ 不足/ ,/ 它/ 借鉴/ 了/ Overshadow/ 的/ 思想/ ,/ 针对/ Hyper/ -/ visor/ 和/ 客户/ 虚拟机/ 分别/ 表现/ 为/ 不同/ 的/ 数据/ 形式/ ,/ 是/ Overshadow/ 在/ 硬件/ 上/ 的/ 实现/ ./ 此外/ ,/ SecureM/ E通/ 过/ 对/ 页表/ 权限/ 进行/ 扩展/ ,/ 来/ 实现/ 不同/ 进程/ 之间/ 的/ 安全/ 通信/ 和/ 页/ 共享/ ./ SecureME/ 采用/ AISE/ (/ AddressIndependentSeedEncryption/ )/ 内存/ 加密算法/ 和/ BMT/ (/ BonsaiMerkleTree/ )/ 哈希/ 树/ [/ 62/ ]/ ,/ 保证数据/ 的/ 机密性/ 和/ 完整性/ ./ AISE/ 的/ 优势/ 是/ 不/ 直接/ 对/ 数据/ 进行/ 加密/ ,/ 只/ 加密/ 数据/ 对应/ 的/ seed/ ,/ 然后/ 利用/ 加密/ 后/ 的/ seed/ 与/ 数据/ 异或/ 产生/ 密文/ ./ Seed/ 是/ 地址/ 独立/ 的/ ,/ 并且/ 每/ 加密/ 一次/ 都/ 会/ 发生/ 改变/ ./ 而/ BMT/ 是/ 针对/ AISE/ 存在/ 的/ ,/ 在/ BMT/ 中/ 只/ 对/ seed/ 的/ 组成部分/ 进行/ 完整性/ 保护/ ,/ 而/ 不是/ 对/ 整个/ 数据/ 区域/ 进行/ 保护/ ./ Page16SecureME/ 利用/ AISE/ 和/ BMT/ 极大/ 地/ 减小/ 了/ 性能/ 损耗/ 和/ 空间/ 损耗/ ./ 但是/ SecureME/ 与/ Bastion/ 有/ 一个/ 共同/ 缺点/ ,/ 即/ 把/ Hypervisor/ 放在/ 了/ 一个/ 隔离/ 的/ 环境/ 中/ 作为/ TCB/ 的/ 一部分/ ./ HyperCoffer/ [/ 63/ ]/ 同样/ 利用/ AISE/ 和/ BMT/ 保证/ 虚拟机/ 内存/ 数据/ 机密性/ 和/ 完整性/ ./ 在/ 该/ 方案/ 中/ ,/ 将/ 内存/ 虚拟化/ 从不/ 可信/ 的/ Hypervisor/ 中解/ 耦/ 出来/ ,/ 使得/ 内存/ 管理/ 不/ 依赖于/ 虚拟机/ 对/ 内存/ 的/ 访问/ ./ 其次/ ,/ 对/ CPU/ 虚拟化/ 进行/ 更改/ ,/ 针对/ 不同/ 的/ 虚拟机/ 退出/ 给予/ 不同/ 的/ 处理/ ,/ 由/ 硬件/ 提供/ 必要/ 的/ 技术支持/ ./ 再次/ ,/ 对/ I/ // O/ 虚拟化/ 进行/ 控制/ ,/ 由/ 虚拟机/ 对/ I/ // O/ 控制/ 信息/ 和/ 数据/ 进行/ 保护/ ,/ 从而/ 在/ 不/ 修改/ 硬件/ 设备/ 的/ 前提/ 下/ ,/ 实现/ 与/ 硬件/ 的/ 交互/ ,/ 使得/ 尽可能/ 多/ 的/ 数据/ 处于/ 保护/ 状态/ ./ 就/ 内存/ 管理/ 而言/ ,/ 在/ HyperCoffer/ 中/ 每个/ 虚拟机/ 拥有/ 自己/ 的/ 密钥/ Kvm/ ./ HyperCoffer/ 利用/ Kvm/ 对/ 种子/ (/ seed/ )/ 进行/ 加密/ ,/ 产生/ 一次/ 一密/ 的/ pad/ ,/ 然后/ 利用/ pad/ 与/ 内存/ 页/ 中/ 的/ 数据/ 异或/ 产生/ 密文/ ./ 而/ 种子/ 的/ 保护/ 是/ 通过/ BMT/ 哈希/ 树/ 完成/ 的/ ,/ BMT/ 树/ 的/ 根/ (/ root/ )/ 存放/ 在/ 虚拟机/ 表中/ ,/ 由/ CPU/ 自身/ 提供/ 的/ Kmem/ 进行/ 加解密/ 和/ BMT/ 保护/ ./ 为了/ 避免/ CPU/ 和/ 虚拟机/ 之间/ 的/ 语义/ 鸿沟/ ,/ 在/ HyperCoffer/ 中/ 引入/ 了/ VM/ -/ shim/ 机制/ ./ 当/ 从/ 虚拟机/ 切换/ 到/ Hypervisor/ 时/ ,/ 首先/ 利用/ shim/ 在/ Hypervisor/ 和/ 虚拟机/ 之间/ 传递/ 必要/ 的/ 数据/ ,/ 从而/ 使得/ 虚拟机/ 不需/ 修改/ 即可/ 在/ HyperCoffer/ 上/ 运行/ ./ 对于/ 磁盘/ I/ // O/ ,/ 因为/ 在/ Cache/ 和/ 内存/ 之间/ 进行/ 了/ 加解密/ 操作/ ,/ 因此/ shim/ 不/ 需要/ 对/ 这些/ 数据/ 进行/ 解密/ 就/ 可以/ 直接/ 写入/ 到/ 磁盘/ 中/ ./ HyperCoffer/ 虽然/ 没有/ 将/ Hypervisor/ 作为/ 其/ 可信/ 基的/ 一部分/ ,/ 但是/ 引入/ 的/ VM/ -/ shim/ 机制/ 同样/ 增大/ 了/ 可信/ 基/ ,/ 并且/ VM/ -/ shim/ 和/ 客户/ 虚拟机/ 都/ 必须/ 可信/ ./ 另外/ ,/ HyperCoffer/ 的/ 加解密/ 能够/ 解决/ 磁盘/ 存储/ 的/ 安全/ ,/ 因为/ 内存/ 中/ 存储/ 的/ 数据/ 都/ 是/ 密文/ ./ 但/ 文章/ 中/ 没有/ 提供/ 针对/ 网络/ I/ // O/ 的/ 解决方案/ ./ Intel/ 的/ SGX/ 利用/ 了/ 粒度/ 更/ 小/ 的/ 内存保护/ 机制/ ./ 在/ 4.3/ ./ 1/ 节中/ 已经/ 提到/ SGX/ 不仅/ 提供/ 了/ 隔离/ 机制/ ,/ 还/ 利用/ 数据/ 封装/ 机制/ 抵御/ 物理攻击/ ./ IntelSGX/ 的/ 目的/ 是/ 将/ 敏感数据/ 存放/ 在/ 一个/ 隔离/ 的/ 执行/ 环境/ 中/ ,/ 而/ 这个/ 执行/ 环境/ 由/ CPU/ 进行/ 保证/ ,/ 而且/ 当/ 外部/ 代码/ 访问/ 敏感数据/ 时/ ,/ 不/ 允许/ 对/ 数据/ 进行/ 解密/ 操作/ ,/ 防止/ 了/ 数据/ 泄漏/ ./ 在/ 文献/ [/ 64/ ]/ 中/ ,/ 研究者/ 通过/ 在/ Windows/ 系统/ 中/ 添加/ 一个/ SGX/ 驱动程序/ 模拟/ 了/ SGX/ 技术/ ,/ 以此/ 保证/ 上层/ 进程/ 数据/ 的/ 安全/ ./ 这是/ 一次/ 对/ SGX/ 技术/ 方案/ 的/ 系统验证/ 和/ 实践/ ./ Bastion/ 和/ SecureM/ E通/ 过/ 修改/ Hypervisor/ ,/ 并/ 结合/ 硬件安全/ 扩展/ 实现/ 对/ 虚拟机/ 内部/ 模块/ 和/ 进程/ 的/ 保护/ ,/ 虽然/ Bastion/ 和/ SecureME/ 将/ Hypervisor/ 作为/ 自身/ TCB/ 的/ 一部分/ ,/ 但是/ 这/ 两种/ 方案/ 都/ 对/ Hypervisor/ 提供/ 了/ 保护/ 机制/ ./ HyperCoffer/ 虽然/ 将/ Hypervisor/ 排除/ 在/ 其/ TCB/ 之外/ ,/ 但是/ HyperCoffer/ 引入/ 了/ VM/ -/ shim/ 机制/ ,/ 并且/ 保护/ 的/ 对象/ 是/ 虚拟机/ ,/ 其/ 前提条件/ 是/ 虚拟机/ 内部/ 的/ 操作系统/ 和/ 应用程序/ 都/ 是/ 可信/ 的/ ./ 显然/ 这些/ 方案/ 各有千秋/ ,/ 最好/ 的/ 方案/ 是/ 将/ Hypervisor/ 和/ 虚拟机/ 的/ GOS/ 都/ 不/ 作为/ TCB/ 的/ 一部分/ ./ Intel/ 的/ SGX/ 正是/ 出于/ 此/ 目的/ ,/ 利用/ 硬件/ 机制/ 保证/ 虚拟机/ 内部/ 进程/ 的/ 安全/ ,/ 保护/ 粒度/ 比/ Bastion/ 和/ SecureME/ 更/ 小/ ./ SGX/ 不仅/ 使用/ 了/ 隔离/ 机制/ 对/ 安全/ 和/ 非/ 安全/ 的/ 代码/ 、/ 数据/ 进行/ 分离/ ,/ 并且/ 利用/ 加密/ 机制/ 对/ 数据/ 进行/ 封装/ ,/ 保证数据/ 的/ 机密性/ ,/ 防止/ 物理攻击/ ./ 但是/ SGX/ 利用/ 了/ 专用/ Cache/ 机制/ ,/ 将/ 安全/ 代码/ 放在/ 了/ EPC/ (/ EnclavePageCache/ )/ 中/ ,/ 然而/ Cache/ 毕竟/ 有限/ ,/ 需要/ 频繁/ 地/ 将/ 一些/ 代码/ 块/ 换/ 出到/ 常用/ 内存/ 中/ ,/ 这/ 导致/ 频繁/ 的/ 加解密/ 和/ 完整性/ 验证/ ,/ 性能/ 损耗/ 较大/ ./ 并且/ EPC/ 访问/ 时/ 还/ 需要/ 对/ 一些/ 结构/ 体/ 进行/ 查询/ ,/ 这/ 更/ 加剧/ 了/ 系统/ 的/ 性能/ 损耗/ ./ 4.3/ ./ 3/ 基于/ 访问控制/ 的/ 防护/ 访问控制/ 的/ 目的/ 是/ 通过/ 限制/ 主体/ 对/ 客体/ 的/ 访问/ 能力/ 及/ 范围/ ,/ 保证/ 客体/ 不/ 被/ 非法/ 访问/ ./ 当前/ 的/ 所有/ 的/ 硬件/ 框架/ (/ x86/ 、/ Arm/ 、/ Power/ 等/ )/ 和/ 虚拟化/ 软件/ 栈/ (/ hypervisor/ 、/ GOS/ 、/ Apps/ )/ 都/ 使用/ 包含/ 性/ 访问/ 内存/ 权限/ 集/ (/ inclusivememorypermissions/ )/ ./ 这/ 导致/ 高/ 优先级/ 的/ 软件/ 层/ 能够/ 无/ 限制/ 地/ 访问/ 低优先级/ 软件/ 层/ 的/ 代码/ 和/ 数据/ ./ 在/ 虚拟化/ 平台/ 中/ 这种/ 机制/ 威胁/ 着/ 整个/ 软件/ 栈/ 的/ 安全/ ./ 因此/ 我们/ 可以/ 利用/ 访问控制/ 机制/ 来/ 阻止/ 这一/ 威胁/ ,/ 使/ 其/ 满足/ 以下/ 两点/ :/ 防止/ 非法/ 用户/ 访问/ 受/ 保护/ 的/ 数据/ 资源/ ;/ 允许/ 合法/ 用户/ 访问/ 受/ 保护/ 的/ 数据/ 资源/ ./ HyperWall/ [/ 65/ ]/ 首次/ 利用/ 权限/ 预设/ 定/ 机制/ 来/ 保护/ 物理/ 页/ 不/ 被/ Hypervisor/ 和/ DMA/ 恶意/ 访问/ ./ 其/ 主要/ 思想/ 是/ 利用/ CIP/ (/ ConfidentialityandIntegrityProtection/ )/ 表对/ 每个/ 物理/ 页/ 标注/ Hypervisor/ 和/ DMA/ 的/ 访问/ 权限/ ./ 为/ 保证/ CIP/ 表/ 的/ 安全/ 、/ 权限/ 设置/ 与/ 检查/ 的/ 正确/ 执行/ ,/ HyperWall/ 为/ 其/ 提供/ 了/ 一个/ 安全/ 可信/ 的/ 执行/ 环境/ 和/ 存储/ 域/ ./ 但是/ ,/ HyperWall/ 的/ 权限/ 机制/ 需要/ 用户/ 自己/ 为/ 其/ 虚拟机/ 提供/ 一个/ pre/ -/ CIP/ 表/ ,/ 在/ 这个/ pre/ -/ CIP/ 表中/ 指定/ 了/ 允许/ 被/ Hypervisor/ 和/ DMA/ 访问/ 的/ 虚拟机/ 的/ 地址/ 区域/ ./ 在/ 虚拟机/ 创建/ 时/ ,/ 或者/ 有/ 映射/ 更新/ 时/ ,/ HyperWall/ 则/ 根据/ 用户/ 提供/ 的/ pre/ -/ CIPPage17/ 表/ (/ 用户/ 指定/ 的/ 是/ GOS/ 的/ 物理/ 内存/ 的/ 访问/ 权限/ )/ 来/ 设定/ 真实/ 物理/ 内存/ 的/ 访问/ 权限/ ./ 在/ 内存/ 被/ Hypervisor/ 或/ DMA/ 访问/ 时/ ,/ HyperWall/ 查阅/ CIP/ 表/ 查看/ 其/ 是否/ 有权/ 进行/ 访问/ ./ 不仅如此/ ,/ HyperWall/ 还/ 提供/ 了/ 认证/ 机制/ ,/ 在/ 虚拟机/ 启动/ 完成/ 之后/ ,/ Hyper/ -/ Wall/ 利用/ 在/ 启动/ 过程/ 中/ 得到/ 的/ Kenc/ 和/ Khash/ 对/ 虚拟机/ 的/ 初始状态/ 进行/ 哈希/ 计算/ ,/ 以此/ 来/ 保证/ 用户/ 提供/ 的/ pre/ -/ CIP/ 表没/ 被/ 篡改/ ./ 在/ 虚拟机/ 运行/ 过程/ 中/ ,/ 用户/ 也/ 可以/ 进行/ 虚拟机/ 安全/ 验证/ ,/ 查看/ 是否/ 存在/ 非法/ 访问/ 自己/ 虚拟机/ 的/ 内存/ ,/ 这/ 也/ 可为/ IDS/ 和/ 恶意/ 行为/ 检测/ 等/ 提供/ 依据/ ./ 但/ HyperWall/ 方案/ 也/ 存在/ 不足/ ,/ 它/ 对/ 虚拟机/ 用户/ 的/ 要求/ 较/ 高/ ,/ 需要/ 用户/ 对/ 虚拟机/ 系统/ 的/ 内存/ 部署/ 非常/ 熟悉/ ,/ 这样/ 才能/ 对/ 每个/ 页面/ 的/ 权限/ 进行/ 正确/ 设定/ ./ HyperWall/ 另/ 一个/ 不足之处/ 是/ 数据/ 遗留/ ,/ 对于/ 异常/ 终止/ 的/ 虚拟机/ ,/ 不能/ 对/ 其/ 内存/ 进行/ 安全/ 回收/ ./ 而/ NIMP/ [/ 66/ ]/ 提出/ 了/ 一种/ 非/ 包含/ 性/ 的/ 内存/ 权限/ 机制/ ,/ 该/ 机制/ 能够/ 抵御/ 跨层/ (/ cross/ -/ layer/ )/ 攻击/ ./ 在/ NIMP/ 中/ 每个/ 物理/ 页/ 拥有/ 一个/ 两/ 字节/ 的/ 权限/ 位/ 集合/ ,/ 其中/ 的/ 9/ 比特/ 位/ (/ bits/ )/ 用来/ 表明/ Hypervisor/ 、/ 内核/ 和/ 进程/ 对/ 这个/ 页/ 的/ 访问/ 权限/ ,/ 这些/ 访问/ 权限/ 是/ 在/ 分配/ 页面/ 的/ 时候/ 由/ 安全/ 硬件/ 模块/ 依据/ 权限/ 规则/ 进行/ 设定/ ./ 而/ 访存/ 指令/ 会/ 进行/ 相应/ 扩展/ ,/ 添加/ 该/ 访存/ 指令/ 应/ 具有/ 的/ 访存/ 权限/ ./ 这样/ 就/ 保证/ 了/ 低/ 特权/ 层/ (/ GOS/ )/ 的/ 内存/ 页/ 不能/ 被/ 高/ 特权/ 层/ 软件/ (/ Hypervisor/ )/ 访问/ ./ 而/ 在/ CPU/ 的/ 特殊/ Cache/ 中/ 存在/ 7/ 条/ 权限/ 转换规则/ ,/ 以此/ 保证/ 权限/ 不能/ 被/ 非法/ 转换/ ./ 例如/ ,/ NIMP/ 中/ 提供/ 的/ 规则/ 保证/ 了/ 攻击者/ 不能/ 将/ 可/ 写/ 的/ 页/ 直接/ 转换/ 为/ 可/ 执行/ ./ 但是/ 双/ 映射/ 和/ 跨域/ 访问/ 攻击/ 仍然/ 存在/ ./ 例如/ ,/ 同一/ 宿主机/ 中/ 运行/ 的/ 两个/ 虚拟机/ ,/ 其/ 系统/ 分别/ 为/ GOS1/ 和/ GOS2/ ./ GOS1/ 的/ 指令/ 具有/ RW/ 权限/ ,/ 而/ GOS2/ 的/ 内存/ 页/ 的/ 内核/ 权限/ 是/ RW/ ./ 利用/ 重/ 映射/ 使得/ GOS1/ 可以/ 访问/ GOS2/ 的/ 页/ ,/ 从而/ 实现/ 跨域/ 访问/ ./ 因此/ ,/ NIMP/ 只是/ 一个/ 雏形/ ,/ 尚需/ 进一步/ 研究/ ./ 上述/ 方案/ 都/ 是/ 利用/ 访问控制/ 来/ 对/ 内存/ 的/ 安全/ 进行/ 防护/ ./ HyperWall/ 利用/ CIP/ 表对/ 恶意/ Hypervisor/ 和/ DMA/ 进行/ 防范/ ,/ 但是/ 保护/ 对象/ 是/ 客户/ 虚拟机/ ,/ 对于/ 虚拟机/ 内部/ 的/ 安全/ 威胁/ 则/ 是/ 无能为力/ ./ NIMP/ 与/ HyperWall/ 的/ 思路/ 不同/ ,/ NIMP/ 的/ 保护/ 对象/ 可/ 细化/ 到/ 应用程序/ ,/ 主要/ 是/ 防止/ 跨层/ 攻击/ ,/ 使得/ 高/ 特权/ 层/ 的/ 软件/ 只能/ 按照/ 低/ 特权/ 层/ 软件/ (/ 用户/ 层/ )/ 预期/ 的/ 访问/ 规则/ 进行/ 访问/ ,/ 以此/ 满足用户/ 的/ 安全/ 需求/ ./ 这/ 两种/ 方案/ 都/ 需要/ 对/ 代码/ 进行/ 修改/ ,/ HyperWall/ 需要/ 修改/ Hypervisor/ ,/ 而/ NIMP/ 对/ 进程/ 、/ GOS/ 和/ Hypervisor/ 都/ 要/ 修改/ ./ NIMP/ 只是/ 一个/ 特殊/ 类型/ 的/ 方案/ ,/ 该/ 方案/ 针对/ 的/ 是/ 特定/ 攻击/ 类型/ ,/ 并/ 不能/ 作为/ 通用/ 方案/ 防护/ 大部分/ 攻击/ ./ 4.4/ 侧/ 信道/ 攻击/ 和/ 隐蔽/ 信道/ 攻击/ 的/ 防护/ 在/ 云/ 计算/ 虚拟化/ 环境/ 中/ ,/ 不同/ 客户/ 虚拟机/ 共享资源/ ,/ 对于/ 内存/ 资源/ 可以/ 通过/ 隔离/ 、/ 加密/ 和/ 安全/ CPU/ 等/ 方案/ 进行/ 防护/ ,/ 但是/ 对于/ 共享/ Cache/ 的/ 侧/ 信道/ 攻击/ ,/ 这些/ 方案/ 却/ 无能为力/ ./ 从/ 已有/ 的/ 研究/ 可知/ ,/ 侧/ 信道/ 攻击/ 已经/ 从/ L1Cache/ 渗入/ 到/ LLC/ (/ LastLevelCache/ )/ [/ 67/ ]/ ,/ 这/ 使得/ 攻击/ 强度/ 更大/ ,/ 获取/ 的/ 信息/ 更/ 多/ ./ 基于/ 时间/ 驱动/ 的/ 侧/ 信道/ 攻击/ 主要/ 根据/ 加密算法/ 所用/ 时间/ 来/ 推测/ 密钥/ 信息/ ./ 根据/ 攻击者/ 所处/ 的/ 位置/ ,/ 基于/ 时间/ 的/ 侧/ 信道/ 攻击/ 又/ 可/ 分为/ 两类/ :/ 被动/ 攻击/ 和/ 主动攻击/ ./ 被动式/ 攻击/ 有/ 一定/ 的/ 局限性/ ,/ 因为/ 攻击者/ 不/ 能够/ 直接/ 访问/ 和/ 操作/ 受害者/ 的/ Cache/ ,/ 攻击者/ 不能/ 获取/ 其所/ 监测/ 操作/ 的/ 精确/ 使用/ 时间/ (/ 如受/ 网络/ 延迟/ 影响/ )/ ./ 而/ 主动攻击/ 能够/ 和/ 受害者/ 同/ 处于/ 一台/ 物理/ 机/ ,/ 这样/ 攻击者/ 则/ 可以/ 在/ 其/ 上/ 运行/ 代码/ ,/ 如此/ 便/ 能够/ 直接/ 操作/ Cache/ 和/ 计时器/ ./ 基于/ 轨迹/ 驱动/ 的/ 侧/ 信道/ 攻击/ 是/ 危害/ 最大/ 且/ 最/ 有/ 潜力/ 的/ 侧/ 信道/ 攻击/ ,/ 但/ 该类/ 攻击/ 需要/ 攻击者/ 和/ 受害者/ 处于/ 同一/ 台/ 物理/ 机/ ./ 该类/ 攻击/ 最/ 具有/ 代表性/ 的/ 策略/ 是/ Prime/ +/ Probe/ ,/ 即/ 攻击者/ 首先/ 访问/ 特定/ 的/ 内存地址/ 用于/ 填充/ Cache/ 行/ ,/ 特定/ 时间/ 后/ 攻击者/ 再次/ 访问/ 这些/ 地址/ ,/ 测量/ 其/ 访问/ 所用/ 时间/ ./ 如此/ 循环/ 多次/ ,/ 利用/ 测量/ 到/ 的/ 时间/ 就/ 可以/ 推算出/ 受害者/ 的/ 密钥/ 信息/ ./ 基于/ 访问/ 驱动/ 的/ 侧/ 信道/ 攻击/ 不仅/ 需要/ 攻击者/ 与/ 受害者/ 处于/ 同一/ 物理/ 机/ ,/ 而且/ 攻击者/ 还/ 需要/ 频繁/ 地/ 查看/ 和/ 测量/ Cache/ 的/ 状态/ ,/ 从而/ 获得/ 数据/ ./ 攻击者/ 首先/ 通过/ 自身/ 程序/ 访问/ 一些/ 固定/ 的/ 地址/ 填充/ Cache/ ,/ 然后/ 转让/ 给/ 受害者/ 运行/ ,/ 攻击者/ 的/ 数据/ 将会/ 从/ Cache/ 中/ 踢/ 出/ ./ 然后/ 攻击者/ 抢占/ 继续执行/ ,/ 经过/ 特定/ 访问/ 和/ 检测/ Cache/ 的/ 命中/ 情况/ ,/ 攻击者/ 可以/ 得到/ 受害者/ 访存/ 的/ 信息/ ./ 这些/ 攻击/ 依赖/ 3/ 个/ 条件/ :/ 一是/ 共享/ Cache/ 的/ 状态/ 可/ 被/ 攻击者/ 访问/ ,/ 并且/ 根据/ 其/ 不同/ 做出/ 预测/ ;/ 二是/ 可/ 抢占/ 执行/ ,/ 并且/ 对/ Cache/ 状态/ 影响/ 极小/ ;/ 三是/ 能/ 访问/ 系统/ 时钟/ ,/ 以此/ 区分/ 事件/ 的/ 不同/ ./ 针对/ 时间/ 驱动/ 和/ 轨迹/ 驱动/ 的/ 攻击/ ,/ 文献/ [/ 68/ ]/ 提出/ 了/ 一种/ 系统/ 级/ 的/ 基于/ Cache/ 的/ 侧/ 信道/ 防护/ 方案/ (/ STEALTHMEM/ )/ ,/ 该/ 方案/ 在/ LLC/ 中为/ 每个/ CPU/ 核心/ 提供/ 一组/ 锁定/ 的/ Cache/ 行/ ,/ 这些/ Cache/ 行/ 不会/ 因/ 其它/ CPU/ 核心/ 的/ Cache/ 紧缺/ 而/ 被/ 换/ 出/ ./ 该/ 方案/ 从/ 上述/ 侧/ 信道/ 攻击/ 的/ 第一个/ 条件/ 出发/ ,/ 防止/ 攻击者/ 获取/ 硬件/ Cache/ 的/ 状态/ 信息/ ./ 但/ 由于/ Cache/ 没有/ 提供/ 硬件/ 机制/ 保证/ Cache/ 行/ 的/ 独立性/ ,/ 该/ 方案/ 由/ Hypervisor/ 提供/ 一些/ 隐形/ 内存/ (/ stealthmemory/ )/ 来/ 确保/ 每个/ Page18CPU/ 核心/ 都/ 有/ 一些/ 锁定/ 的/ 不/ 被/ 共享/ 的/ Cache/ 行/ ./ 这样/ 在/ 虚拟机/ 之间/ 切换/ 时/ ,/ 将/ 该/ CPU/ 核心/ 的/ 隐形/ 内存/ 放入/ 被/ 换/ 出/ 虚拟机/ 的/ 上下文/ 中/ ,/ 并/ 从/ 换进/ 虚拟机/ 上下文/ 中将/ 隐形/ 内存/ 读入/ Cache/ 中/ ./ 如此/ 这样/ 切换/ 之后/ 观测/ 不到/ 被/ 换/ 出/ 客户/ 虚拟机/ 对/ Cache/ 状态/ 的/ 影响/ ./ 这样/ 每个/ 虚拟机/ 将/ 自身/ 的/ 敏感数据/ 放在/ 各自/ 的/ 隐形/ 内存/ 页/ 中/ ,/ 而/ 这些/ 隐形/ 内存/ 页/ 在/ Cache/ 中/ 不/ 进行/ 共享/ ./ 这样/ 隐藏/ 了/ 敏感数据/ 的/ 访存/ 模式/ ,/ 从而/ 防止/ 了/ 跨/ 虚拟机/ 的/ 侧/ 信道/ 攻击/ ./ 侧/ 信道/ 攻击/ 除/ Cache/ 共享/ 之外/ 还/ 需要/ 抢占/ 执行/ 和/ 获得/ 精确/ 时钟/ ./ 基于/ 此/ ,/ 文献/ [/ 69/ ]/ 提供/ 了/ 基于/ 软件/ 的/ Cache/ 隔离/ 方案/ ,/ 该/ 方案/ 利用/ 虚拟机/ 的/ 调度/ 机制/ ,/ 保证/ 每个/ 虚拟机/ 的/ 虚拟/ CPU/ 的/ 最小/ 运行/ 时间/ ,/ 从而/ 限制/ 了/ 抢占/ 式调度/ 的/ 频率/ ,/ 使/ 攻击者/ 不/ 能够/ 及时/ 、/ 准确/ 地/ 得到/ Cache/ 的/ 状态/ 信息/ ./ 但是/ 这/ 也/ 为/ 高/ 优先级/ 或者/ 交互性/ 任务/ 带来/ 一定/ 的/ 延误/ ./ 该/ 方案/ 是/ 在/ 虚拟机/ 之间/ 调度/ 时/ ,/ 通过/ 加入/ 噪音/ 等/ 方式/ 防止/ 跨/ 虚拟机/ 的/ 侧/ 信道/ 攻击/ ./ 4.5/ 讨论/ 和/ 总结/ 上述/ 安全/ 机制/ 的/ 分类/ 是/ 根据/ 可信/ 基来/ 划分/ 的/ ,/ 表/ 2/ 代表性/ 方案/ 与/ 安全/ 威胁/ 防御/ 对应/ 表/ 类别/ 方案/ 基于/ 虚拟化/ 的/ 内核/ 完整性/ 防护/ 基于/ 虚拟化/ 的/ 敏感/ 进程/ 保护/ 虚拟机/ 自省/ 及其/ 应用/ 减少/ 虚拟化/ 软件/ 栈/ 的/ 可信/ 基/ (/ 特权/ 域/ 和/ VMM/ )/ Hypervisor/ 完整性/ 防护/ 非/ 可信/ 环境/ 下/ VM/ 隔离/ 非/ 可信/ 环境/ 下/ 的/ 内存/ 区域/ 隔离/ 非/ 可信/ 环境/ 下/ VM/ 安全/ Hypervisor/ 的/ 权限/ 限制/ 侧信路/ 防护/ 文献/ [/ 68/ -/ 69/ ]/ √/ √/ √/ √/ √/ 但/ 并/ 不是/ 绝对/ 的/ ,/ 可能/ 存在/ 重叠/ ./ 例如/ ,/ NoHype/ 既/ 可以/ 归类/ 到/ 减少/ 攻击面/ 和/ TCB/ ,/ 也/ 可以/ 归类/ 到/ 通过/ 隔离/ 机制/ 保护/ 虚拟机/ ./ 从/ 我们/ 的/ 文献/ 调研/ 中/ 得知/ ,/ 针对/ 虚拟化/ 层/ 的/ 安全/ 防护/ 方法/ 主要/ 有/ 3/ 大类/ :/ 第/ 1/ 类/ 是/ 基于/ Hypervisor/ 的/ 虚拟机/ 保护/ ,/ 这/ 类/ 方案/ 利用/ Hypervisor/ 的/ 高/ 特权/ 对/ 虚拟机/ 进行/ 监控/ 和/ 保护/ ;/ 第/ 2/ 类/ 是/ 基于/ 软件/ 重构/ 或/ 完整性/ 对/ 现有/ Hypervisor/ 的/ 保护/ ;/ 第/ 3/ 类/ 是/ 在/ 不可/ 信/ Hypervisor/ 环境/ 下/ 的/ 虚拟机/ 安全/ 防护/ ,/ 该类/ 方案/ 利用/ 隔离/ 机制/ 对/ 虚拟机/ 以及/ Hypervisor/ 进行/ 域/ 隔离/ ,/ 并且/ 从/ 加密/ 和/ 权限/ 划分/ 两个/ 方面/ 防范/ 高/ 特权/ 软件/ 层/ 对/ 低/ 特权/ 软件/ 层/ 的/ 内存/ 访问/ ./ 基于/ Cache/ 的/ 侧/ 信道/ 攻击/ 是/ 虚拟化/ 中/ 的/ 特殊/ 攻击/ 类型/ ,/ 其/ 防护/ 方案/ 也/ 是/ 软硬/ 兼有/ ./ 总的来说/ ,/ 这些/ 方法/ 涵盖/ 了/ 当前/ 虚拟化/ 安全/ 的/ 重要/ 方面/ ,/ 从/ 软件/ 到/ 硬件/ ,/ 从/ 应用程序/ 的/ 保护/ 到/ Hypervisor/ 的/ 保护/ ,/ 从/ 减少/ 攻击面/ 到/ 添加/ 附加/ 安全/ 模块/ ./ 通过/ 对/ 这些/ 方法/ 的/ 分析/ ,/ 在/ 表/ 2/ 中/ 我们/ 将/ 现有/ 的/ 解决方案/ 细分/ 为/ 10/ 类/ ,/ 并/ 分析/ 了/ 其/ 威胁/ 抵御/ 情况/ ./ 前/ 3/ 类/ 方案/ 是/ 基于/ Hypervisor/ 的/ 安全/ 保护/ :/ 其中/ 前/ 两类/ 是/ 对/ 虚拟机/ 的/ 内核/ 和/ 进程/ 的/ 保护/ 方案/ ;/ 第/ 3/ 类/ 数据/ 泄漏/ DMA/ 攻击/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ √/ Page19/ 通过/ VMI/ 技术/ 获取/ 到/ 虚拟机/ 内部/ 的/ 数据结构/ ,/ 基于/ 这些/ 数据结构/ 分析/ 虚拟机/ 的/ 安全/ 状况/ ./ 第/ 4/ 类/ 和/ 第/ 5/ 类/ 方案/ 是/ 对/ 虚拟化/ 层/ 的/ 防护/ ,/ 为/ 前/ 4/ 类/ 方案/ 提供/ 安全/ 基础/ :/ 其中/ 第/ 4/ 类/ 方案/ 是/ 减少/ 攻击面/ ,/ 这/ 类/ 方案/ 的/ 灵活性/ 较差/ ;/ 而/ 第/ 5/ 类/ 方案/ 是从/ 完整性/ 出发/ ,/ 保证/ Hypervisor/ 代码/ 和/ 执行/ 流/ 的/ 完整性/ ./ 虚拟化/ 层/ 的/ 保护/ 方案/ 具有/ 一定/ 的/ 局限性/ ./ 因此/ ,/ 后面/ 的/ 4/ 类/ 方案/ 是/ 在/ Hypervisor/ 不可/ 信/ 的/ 情况/ 下/ 提供/ 安全/ 保护/ ./ 最后/ 一类/ 方案/ 则/ 是/ 对侧/ 信道/ 攻击/ 的/ 安全/ 防护/ ./ 这些/ 方案/ 从/ 不同/ 的/ 层次/ 解决/ 了/ 当前/ 虚拟化/ 环境/ 中/ 的/ 部分/ 安全/ 威胁/ ./ 例如/ ,/ 对于/ Hypervisor/ 的/ 完整性/ 问题/ ,/ HyperSentry/ 、/ HyperCheck/ 以及/ HyperSafe/ 解决/ 了/ 静态/ 代码/ 和/ 数据/ 的/ 完整性/ ,/ 而/ HyperSafe/ 还/ 解决/ 了/ 控制流/ 截获/ 攻击/ ./ 而/ NOVA/ 和/ TrustVisor/ 等/ 方案/ 将/ Hypervisor/ 的/ 代码/ 降低/ 了/ 两个/ 数量级/ ,/ 减少/ 了/ 大量/ 攻击面/ ,/ 给/ rootkits/ 攻击/ 、/ 后门/ 遗留/ 提高/ 了/ 门槛/ ./ 而/ CPU/ 安全/ 扩展/ 的/ 研究/ 旨在/ 从根本上/ 解决/ 云/ 虚拟化/ 中/ 的/ 安全/ 问题/ ,/ 为/ 下一代/ CPU/ 的/ 设计/ 指明方向/ ./ 从表/ 2/ 中/ 我们/ 可以/ 看出/ ,/ 这些/ 方案/ 没有/ 对/ 现有/ 的/ 威胁/ 进行/ 全面/ 的/ 防护/ ,/ 仍然/ 存在/ 很多/ 未/ 解决/ 的/ 安全/ 问题/ 和/ 空白/ 区/ 需要/ 产业界/ 和/ 学术界/ 去/ 研究/ 和/ 填补/ ./ 例如/ ,/ 隔离/ 机制/ 能够/ 防止/ 不同/ 虚拟机/ 之间/ 以及/ 与/ Hypervisor/ 之间/ 的/ 跨域/ 访问/ ,/ 但是/ 隔离/ 机制/ 并/ 不适/ 用于/ 数据共享/ ./ 而/ 基于/ 权限/ 的/ 机制/ 通过/ 限制/ 恶意/ 访问/ 保护/ 数据安全/ ,/ 解决/ 了/ 共享/ 问题/ ./ 除此之外/ ,/ 这些/ 方案/ 还/ 存在/ 一些/ 共性/ 问题/ ./ 第一/ ,/ 目前/ 虚拟化/ 软件/ 栈中/ 的/ 安全/ 问题/ 备受/ 重视/ ,/ 虽然/ 产业界/ 和/ 学术界/ 提出/ 了/ 很多/ 研究/ 方案/ ,/ 但是/ 这些/ 方案/ 都/ 具有/ 很强/ 的/ 针对性/ ,/ 方案/ 之间/ 的/ 关联性/ 很差/ ,/ 没有/ 提出/ 一套/ 体系化/ 的/ 针对/ 虚拟化/ 软件/ 栈/ 的/ 保护/ 方案/ ./ 这/ 导致/ 虚拟化/ 软件/ 栈/ 的/ 保护/ 没有/ 一个/ 统一/ 的/ 框架/ ,/ 使得/ 云/ 计算/ 厂商/ 或/ 公司/ 不/ 能够/ 将/ 这些/ 不同/ 层次/ 的/ 方案/ 融合/ 到/ 自己/ 的/ 产品/ 中/ ./ 第二/ ,/ 虽然/ 现在/ 硬件/ 厂商/ 和/ 学者/ 提出/ 了/ 利用/ CPU/ 的/ 安全/ 机制/ 提供/ 数据保护/ 的/ 方案/ ,/ 但是/ 这些/ 方案/ 并/ 没有/ 紧密结合/ 云/ 计算/ 的/ 特点/ (/ 尤其/ 是/ 虚拟化/ 的/ 多层次/ 和/ 多/ 租户/ 特点/ )/ ./ 并且/ 现今/ CPU/ 架构/ 是/ 一种/ 通用型/ 的/ 架构/ ,/ 产业界/ 并/ 没有/ 提出/ 一种/ 针对/ 虚拟化/ 环境/ 的/ 专用/ CPU/ 架构/ ./ 5/ 未来/ 研究/ 方向/ 虽然/ 虚拟化/ 安全/ 不是/ 一个/ 新颖/ 的/ 话题/ ,/ 但是/ 近年来/ 云/ 计算/ 的/ 发展/ 给/ 虚拟化/ 带来/ 了/ 新/ 的/ 机遇/ 和/ 挑战/ ./ 虚拟化/ 的/ 安全/ 问题/ 再次/ 回归/ 为/ 研究/ 热点/ ./ 从表/ 2/ 可/ 看出/ ,/ 近年来/ 虚拟化/ 安全/ 虽/ 取得/ 众多/ 成果/ ,/ 但/ 针对/ 现存/ 的/ 安全/ 问题/ 仍/ 捉襟见肘/ ,/ 针对/ 众多/ 潜在/ 的/ 安全/ 威胁/ 和/ 漏洞/ 更是/ 力不从心/ ./ 由此可见/ ,/ 虚拟化/ 安全/ 还有/ 很大/ 的/ 研究/ 和/ 提升/ 空间/ ,/ 迫切需要/ 研究/ 出/ 一套/ 高效/ 、/ 可行/ 且易/ 实施/ 的/ 虚拟化/ 安全/ 防护/ 方案/ ./ 从/ 研究/ 的/ 发展趋势/ 看/ ,/ 我们/ 认为/ 未来/ 的/ 虚拟化/ 软件/ 栈/ 安全/ 防护/ 应该/ 着重/ 从/ 以下/ 几个/ 方向/ 进行/ 研究/ ./ 首先/ ,/ 结合/ 虚拟化/ 软件/ 栈/ 的/ 特点/ ,/ 建立/ 一个/ 一体化/ 的/ 虚拟化/ 纵深/ 防御/ 体系/ ./ 从图/ 4/ 中/ 可以/ 发现/ ,/ 虚拟化/ 软件/ 栈中/ 的/ 每层/ 并/ 不是/ 单独/ 存在/ 的/ ,/ 而是/ 相互/ 关联/ 、/ 融为一体/ 的/ ./ 然而/ ,/ 从/ 第/ 4/ 节中/ 可以/ 得知/ ,/ 现在/ 的/ 安全/ 方案/ 主要/ 针对/ 虚拟化/ 的/ 每/ 一层/ 进行/ 独立/ 防护/ ./ 这种/ 层层/ 独立/ 的/ 方案/ 不仅/ 增加/ 了/ 性能/ 开销/ ,/ 同时/ 还/ 存在/ 众多/ 重复/ 工作/ ,/ 使得/ 整个/ 系统/ 越来越/ 繁杂/ 、/ 冗余/ ,/ 并且/ 这些/ 方案/ 之间/ 的/ 兼容性/ 较差/ ./ 因此/ 在/ 未来/ 的/ 工作/ 中/ ,/ 我们/ 应/ 将/ 虚拟化/ 软件/ 栈/ 作为/ 一个/ 整体/ ,/ 结合/ 虚拟化/ 的/ 多层次性/ ,/ 着重/ 研究/ 基于/ 多层次/ 的/ 隔离/ 机制/ 、/ 密码/ 机制/ 和/ 访问控制/ 机制/ ,/ 提出/ 一个/ 精炼/ 、/ 高效/ 的/ 多层次/ 虚拟化/ 软件/ 栈/ 防护/ 方案/ ./ 如图/ 10/ 所示/ ,/ 通过/ 统一/ 的/ 框架/ 对/ Hypervisor/ 、/ 虚拟机/ 内部/ 的/ GOS/ 和/ 应用程序/ 进行/ 统一/ 的/ 行为/ 监控/ 、/ 资源/ 信息/ 控制/ 、/ 密钥/ 管理/ 、/ 虚拟机/ 间/ 的/ 隔离/ 以及/ 虚拟机/ 内部/ 的/ 模块/ 和/ 应用/ 之间/ 隔离/ ./ 通过/ 多层/ 隔离/ 机制/ 能够/ 对同/ 一层/ 的/ 不同/ 对象/ 进行/ 隔离/ ,/ 实现/ 资源/ 独立/ ./ 通过/ 多层/ 访问控制/ 使得/ 不同/ 层/ 对/ 共享/ 的/ 资源分配/ 不同/ 的/ 访问/ 权限/ ./ 多层/ 监控/ 结合/ 恶意/ 行为/ 分析/ 实现/ 整体/ 的/ 病毒/ 、/ 木马/ 防护/ ./ 多层/ 密钥/ 管理/ 对/ 每/ 一层/ 的/ 密钥/ 进行/ 抽象/ ,/ 提供/ 统一/ 的/ 密钥/ 管理/ 接口/ ,/ 即/ 安全/ 又/ 便捷/ ./ 统一/ 框架/ 能够/ 从/ 横向/ 和/ 纵向/ 两个/ 不同/ 维度/ 防护/ 软件/ 栈/ 的/ 威胁/ ,/ 还/ 可以/ 增加/ 信息/ 认证/ 功能/ 为云/ 用户/ 提供/ 确凿/ 的/ 运行/ 时/ 证据/ ,/ 证明/ 其/ 所属/ 数据/ 和/ 软件/ 的/ 安全/ ./ 在统/ Page20/ 一/ 框架/ 中/ 依据/ 软件/ 栈/ 的/ 需求/ 对/ 数据共享/ 以及/ 动态/ 迁移/ 进行/ 适应/ ,/ 在/ 满足/ 安全/ 的/ 同时/ 保证/ 云/ 计算/ 的/ 服务质量/ ./ 其次/ ,/ 我们/ 认为/ 计算机/ 安全/ 体系结构/ 是/ 云/ 计算/ 安全/ 的/ 基石/ 和/ 未来/ 重要/ 研究/ 方向/ ,/ 在/ 硬件/ 层为/ 多层次/ 的/ 虚拟化/ 软件/ 栈/ 防护/ 提供/ 技术/ 支撑/ ./ 现有/ CPU/ 提供/ 的/ 安全/ 机制/ ,/ 如/ 不可/ 执行/ (/ NX/ )/ 、/ SMEP/ 和/ SMAP/ 等/ 只能/ 防御/ 来自/ 用户/ 空间/ 的/ 攻击/ ./ 针对/ 虚拟化/ 系统/ 级/ 的/ 安全/ ,/ 研究者/ 尝试/ 提出/ 安全/ 增强/ 的/ CPU/ 框架/ 进行/ 防护/ ./ 受此/ 启发/ ,/ 我们/ 认为/ 未来/ CPU/ 及/ 相关/ 硬件/ 应该/ 从/ 以下/ 两点/ 出发/ ,/ 为/ 上层/ 软件/ 栈/ 的/ 多层/ 防御/ 提供/ 支持/ ./ 第一/ ,/ 我们/ 可以/ 借鉴/ “/ 软件/ 定义/ 网络/ ”/ 的/ 思想/ ,/ 将/ 单一/ 物理/ 服务器/ 的/ 内部/ 看作/ 一个/ “/ 网络/ ”/ ,/ 而/ I/ // O/ 设备/ (/ 如/ 网卡/ 、/ 磁盘/ )/ 和/ CPU/ (/ cache/ )/ 等/ 部件/ 看作/ “/ 网络/ 节点/ ”/ ,/ 每个/ “/ 网络/ 节点/ ”/ 都/ 有/ 其/ 自身/ 的/ 安全/ 机制/ (/ 如/ 加解密/ )/ 和/ 存储/ 部件/ (/ 存储/ 每个/ 虚拟机/ 的/ 密钥/ )/ ./ 而/ 内存/ 和/ 缓存/ 等/ 中转/ 设备/ 看作/ “/ 路由/ 节点/ ”/ ,/ 只/ 进行/ 数据/ 存储/ 和/ 传递/ ./ 根据/ 软件/ 层/ 的/ 需求/ ,/ 在/ 每次/ 创建/ 虚拟机/ 时/ 由/ 硬件/ 芯片/ (/ 如/ CPU/ )/ 为/ 每个/ 虚拟机/ 创建/ 随机/ 密钥/ ,/ 并/ 将/ 该/ 密钥/ 传递/ 给/ 各个/ “/ 网络/ 节点/ ”/ ./ 此/ 密钥/ 将/ 和/ 虚拟机/ 镜像/ 配对/ 存储/ (/ 虚拟机/ 迁移/ 时/ 使用/ )/ ./ 在/ 软件/ 执行/ 过程/ 中/ ,/ 利用/ 该/ 密钥/ 对/ 每层/ 的/ 敏感数据/ (/ 由/ 程序/ 、/ GOS/ 或/ Hypervisor/ 指定/ )/ 或/ 在/ 跨层/ 或/ 跨域/ 访存/ 的/ 数据/ 加密/ ./ 第二/ ,/ 对/ CPU/ 的/ 安全/ 特性/ 进行/ 扩展/ ,/ 并/ 结合/ 现有/ 的/ CPU/ 特性/ (/ 如/ VPID/ 和/ PCID/ 等/ )/ 对/ 多层/ 防御/ 方案/ 提供/ 支持/ ./ 比如/ ,/ 在/ TLB/ 进行/ 内存地址/ 转化/ 时/ ,/ 对/ 虚拟地址/ 进行/ 判别/ ,/ 若/ 是/ 代码/ 则/ 保证/ 其/ 完整性/ (/ 图/ 11/ 中/ 的/ BMT/ 树/ )/ ./ 否则/ ,/ 则/ 判断/ 当前/ CPU/ 的/ 运行/ 级别/ 是否/ 与/ 数据/ 地址/ 所在/ 的/ 级别/ 一致/ ,/ 一致/ 则/ 访问/ ./ 否则/ (/ 比如/ ring0/ 访问/ 用户/ 空间/ 的/ 内存地址/ )/ ,/ 对/ 数据/ 进行/ 加密/ ,/ 如/ 在/ I/ // O/ 缓存/ 和/ 系统/ 调用/ 访问/ 时/ ,/ 则/ 要/ 对/ 数据/ 进行/ 加密/ ,/ 然后/ 在/ 设备/ 驱动/ 或硬件/ 芯片/ 中/ 对/ 密文/ 进行/ 解密/ ,/ 从而/ 完成/ 相应/ 操作/ ./ 这种/ 软/ -/ 硬/ 结合/ 的/ 方案/ 可以/ 为/ 虚拟化/ 软件/ 栈/ 提供/ 一个/ 体系化/ 的/ 纵深/ 防御/ 体系/ ,/ 如图/ 11/ 所示/ ./ 从图/ 中/ 可以/ 看出/ ,/ 基于/ 硬件/ 的/ 方案/ 不仅/ 能够/ 防止/ 软件/ 层次/ 的/ 攻击/ ,/ 而且/ 能够/ 抵御/ 内部/ 管理人员/ 的/ 物理攻击/ ,/ 如/ 线路/ 窃听/ ./ 云/ 提供商/ 可以/ 利用/ 该/ 机制/ 向/ 用户/ 提供/ 充分/ 的/ 证据/ 表明/ 自身/ 的/ 可信度/ ,/ 消除/ 用户/ 对/ 数据安全/ 的/ 疑虑/ ./ 6/ 结束语/ 云/ 计算/ 中/ 虚拟化/ 软件/ 栈/ 的/ 安全/ 问题/ 是/ 当前/ 安全/ 领域/ 最/ 重要/ 的/ 问题/ ,/ 其/ 研究/ 受到/ 了/ 工业界/ 和/ 学术界/ 的/ 广泛/ 关注/ ,/ 近年来/ 也/ 取得/ 了/ 一定/ 的/ 进展/ ,/ 但/ 安全/ 问题/ 仍/ 未/ 攻克/ ./ 本文/ 旨在/ 对云/ 计算环境/ 下/ 的/ 虚拟化/ 软件/ 栈/ 进行/ 安全/ 分析/ ,/ 并/ 深入/ 剖析/ 虚拟化/ 软件/ 栈所/ 面临/ 的/ 安全/ 挑战/ ./ 本文/ 首先/ 介绍/ 了/ 云/ 计算/ 架构/ 的/ 基本/ 内容/ 和/ 虚拟化/ 技术/ ./ 其次/ ,/ 文中/ 针对/ 虚拟化/ 软件/ 栈/ 的/ 特性/ 深入/ 剖析/ 了/ 其/ 可能/ 存在/ 的/ 攻击面/ 和/ 安全/ 威胁/ ./ 随之/ ,/ 文中/ 对/ 虚拟化/ 软件/ 栈/ 安全/ 方面/ 的/ 现有/ 研究成果/ 进行/ 了/ 分类/ 和/ 总结/ ./ 这些/ 研究成果/ 主要/ 体现/ 在/ Hypervisor/ 安全/ 、/ 体系/ 架构/ 扩展/ 、/ 安全/ 隔离/ 和/ 权限/ 控制/ 等/ 方面/ ./ 最后/ 给出/ 了/ 现有/ 方案/ 的/ 使用/ 范围/ 和/ 存在/ 的/ 问题/ ,/ 并/ 对/ 虚拟化/ 安全/ 机制/ 的/ 未来/ 研究/ 方向/ 进行/ 了/ 分析/ 和/ 建议/ ./ 上述/ 工作/ 比较/ 全面/ 地/ 分析/ 了/ 虚拟化/ 软件/ 栈/ 在/ 云/ 计算/ 安全/ 中/ 的/ 重要/ 问题/ ,/ 为/ 进一步/ 的/ Page21/ 研究/ 工作/ 奠定/ 了/ 基础/ ./ 在/ 后续/ 研究/ 中/ ,/ 我们/ 将/ 在/ 此基础/ 上/ 研究/ 基于/ 多层/ 的/ 防御/ 系统/ 和/ 配套/ 的/ 硬件安全/ 机制/ 的/ 扩展/ ,/ 主要/ 针对/ 多/ 租户/ 环境/ Hypervisor/ 、/ 虚拟机/ 和/ 应用程序/ 间/ 的/ 资源/ 隔离/ 和/ 控制/ ,/ 通过/ 软/ -/ 硬件/ 相结合/ ,/ 提出/ 一种/ 基于/ 多层/ 的/ 资源/ 隔离/ 和/ 访问控制/ 的/ 数据保护/ 方案/ ,/ 营造/ 一个/ 安全/ 的/ 云/ 环境/ ./ 除此之外/ ,/ 我们/ 希望/ 研究者/ 应该/ 将/ 自身/ 的/ 研究/ 与/ 云/ 提供商/ 合作/ ,/ 产学/ 结合/ ,/ 将/ 方案/ 在/ 真实/ 的/ 环境/ 中/ 进行/ 测试/ 、/ 评估/ ,/ 赢得/ 云/ 服务提供商/ 的/ 信服/ 、/ 用户/ 的/ 信赖/ ./ 

