Page1/ 面向/ 移动/ 应用软件/ 信息/ 泄露/ 的/ 模型/ 检测/ 研究/ 1/ )/ (/ 南开大学/ 计算机/ 与/ 控制/ 工程学院/ 天津/ 300350/ )/ 2/ )/ (/ 山东/ 交通/ 学院/ 信息科学/ 与/ 电气/ 工程学院/ 济南/ 250357/ )/ 摘要/ 移动/ 平台/ 上/ 的/ 应用软件/ 私密/ 信息/ 泄露/ 漏洞/ 关注/ 违背/ 用户/ 意愿/ 的/ 接口/ 或/ 数据/ 暴露/ ,/ 而/ 泄露/ 形式/ 和/ 内容/ 的/ 复杂性/ 增添/ 了/ 该类/ 漏洞/ 的/ 检测/ 难度/ ./ 现有/ 方法/ 主要/ 利用/ 传统/ 的/ 静态数据/ 流/ 分析/ 及/ 动态/ 监控/ 等/ 技术/ ,/ 易/ 发生/ 漏报/ 和/ 误报/ ,/ 且/ 无法/ 处理/ 隐式/ 信息/ 泄露/ 问题/ ./ 该文/ 首次/ 将/ 基于/ 线性/ 时序/ 逻辑/ (/ LinearTemporalLogic/ ,/ LTL/ )/ 的/ 模型/ 检测/ 技术/ 应用/ 于/ 移动/ 软件/ 信息/ 泄露/ 检测/ 上/ ,/ 提出/ 了/ 一种/ 基于/ 安全/ 要素/ 语句/ 插装/ 的/ 泄露/ 检测/ 方法/ ./ 文章/ 首先/ 针对/ 代码/ 中/ 的/ 安全/ 要素/ 提出/ 一种/ 信息/ 泄露/ 抽象/ 关系/ 模型/ ;/ 其次/ 设计/ 驱动/ 生成/ 规则/ 和/ 插装/ 算法/ ,/ 在/ 目标/ 应用/ 上/ 生成/ 可/ 规约/ 系统/ ;/ 继而/ 设计/ 具有/ 通用/ 意义/ 的/ LTL/ 泄露/ 检测/ 属性/ 并/ 利用/ 符号执行/ 技术/ 优化/ 检测/ 算法/ ;/ 最后/ 构建/ 支持/ 移动/ 平台/ 的/ 模拟/ 方法/ 库/ ,/ 开发/ 了/ 原型/ 检测/ 系统/ (/ LeakageFinderofAndroid/ ,/ LFDroid/ )/ ./ 公开/ 数据/ 集/ 实验/ 及/ 对比/ 分析表明/ ,/ 该文/ 方法/ 可以/ 为/ 含有/ 隐式/ 信息/ 泄露/ 数据/ 集/ 提供/ 更为/ 精确/ 的/ 漏洞/ 检测/ ,/ 相较/ 于/ 传统/ 方法/ 准确率/ 和/ 召回/ 率均/ 具有/ 明显/ 优势/ ,/ 除此之外/ 亦/ 发现/ 了/ 3/ 个/ 真实/ 移动/ 应用/ 的/ 5/ 个/ 隐式/ 泄露/ 漏洞/ 威胁/ ./ 关键词/ 模型/ 检测/ ;/ 移动/ 应用软件/ ;/ 信息/ 泄露/ ;/ 线性/ 时序/ 逻辑/ ;/ 漏洞/ 检测/ 1/ 引言/ 当前/ ,/ 移动/ 终端设备/ 由/ 单一/ 的/ 通信/ 功能/ 向/ 智能化/ 、/ 便捷/ 化/ 、/ 复杂化/ 转变/ ,/ 相应/ 的/ 支撑/ 这一/ 转变/ 的/ 操作系统/ 平台/ 也/ 得到/ 飞速发展/ ./ 其中/ ,/ GoogleAndroid/ 系统/ 成为/ 普及率/ 最高/ 的/ 移动/ 系统/ 平台/ ,/ 根据/ IDC/ 分析/ 显示/ ,/ 在/ 2015/ 年/ 第一季度/ ,/ Android/ 系统/ 已/ 占据/ 了/ 智能手机/ 市场/ 78/ %/ 份额/ ①/ ./ 以/ GooglePlay/ 为例/ ,/ 作为/ 全球/ 最大/ 的/ 商业化/ Android/ 应用/ 市场/ ,/ 迄今为止/ 已经/ 包含/ 了/ 超/ 1000/ 万个/ Android/ 应用软件/ ,/ 平均/ 每月/ 新增/ 近/ 3/ 万/ 新型/ 应用/ ②/ ./ 除此之外/ ,/ 其他/ 众多/ 的/ Android/ 市场/ 同样/ 包含/ 数量/ 惊人/ 的/ 应用/ 产品/ ./ 这些/ 移动/ 应用/ 因/ 其/ 能够/ 提供/ 种类/ 繁多/ 的/ 特色/ 功能/ 而/ 被/ 用户/ 广泛/ 接受/ 和/ 使用/ ,/ 因而/ 不免/ 涉及/ 诸多/ 安全/ 敏感/ (/ security/ -/ critical/ )/ 的/ 应用/ 场景/ ./ 用户/ 逐渐/ 习惯于/ 利用/ 移动/ 设备/ 处理/ 日常生活/ 及/ 工作/ 所/ 产生/ 的/ 各类/ 数据/ ,/ 而/ 这些/ 数据/ 可能/ 包含/ 大量/ 的/ 私密/ 信息/ ,/ 例如/ ,/ 通讯录/ ,/ 短信/ ,/ 地址/ ,/ 电子邮件/ ,/ 好友/ 信息/ 以及/ 财产/ 安全/ 相关/ 的/ 网银/ 账户/ 、/ 密码/ 等/ ./ 这些/ 私密/ 信息/ 的/ 泄露/ 会/ 严重威胁/ 用户/ 安全/ 并/ 影响/ 系统/ 的/ 正常/ 运行/ ,/ 例如/ ,/ 一个/ 典型/ 的/ 扣费/ 软件/ 会/ 利用/ 获取/ 的/ 电话号码/ 、/ IMEI/ (/ InternationalMobileEquipmentIdentity/ )/ 、/ ICCID/ (/ IntegrateCircuitCardIdentity/ )/ 、/ 网银/ 用户名/ 、/ 密码/ 等/ 隐私/ 信息/ ,/ 执行/ 话费/ 、/ 流量/ 相关/ 的/ 恶意/ 扣费/ 以及/ 网银/ 的/ 额外/ 支付/ ,/ 因此/ 私密/ 信息/ 泄露/ 漏洞/ 都/ 应/ 被/ 尽早/ 地/ 检测/ 与/ 防范/ ./ 近年来/ ,/ 无论/ 应用/ 开发者/ 、/ 应用/ 分发/ 市场/ 还是/ 用户/ ,/ 对于/ 隐私/ 泄露/ 防范/ 意识/ 和/ 投入/ 均/ 有所提高/ ,/ 也/ 涌现/ 了/ 大量/ 的/ 泄露/ 检测工具/ ,/ 一些/ 针对/ 直接/ 的/ 、/ 显式/ 的/ 信息/ 泄露/ 检测/ 技术/ 相继/ 出现/ ./ 然而/ 这些/ 检测/ 技术/ 的/ 出现/ 也/ 客观/ 促使/ 了/ 攻击者/ 加速/ 改进/ 其/ 攻击/ 手段/ ,/ 使得/ 移动/ 平台/ 信息/ 泄露/ 呈现出/ 从/ 直接/ 化向/ 间接/ 化/ 、/ 从/ 简单化/ 向/ 复杂化/ 、/ 从/ 显式/ 的/ 信息/ 泄露/ 向/ 隐式/ 泄露/ 转变/ 的/ 趋势/ ./ 相对/ 于/ 显式/ 泄露/ 将/ 私密/ 信息/ 直接/ 暴露/ 出来/ ,/ 隐式/ 泄露/ 则/ 更为/ 隐秘/ ,/ 它/ 通过/ 函数/ 、/ 分支/ 结构/ 等/ 控制流/ 转换/ ,/ 将/ 原/ 私密/ 信息/ 包装/ 之后/ 再/ 输出/ ./ 隐式/ 泄露/ 的/ 结构/ 特性/ 增添/ 了/ 其/ 检测/ 的/ 难度/ ,/ 一方面/ 隐式/ 信息流/ 改变/ 了/ 原/ 私密/ 信息/ 的/ 格式/ 或/ 内容/ ,/ 往往/ 不易/ 引起/ 用户/ 注意/ ./ 另一方面/ 对/ 隐式/ 泄露/ 漏洞/ 的/ 利用/ 更为/ 复杂/ ,/ 这/ 也/ 使得/ 应用/ 开发者/ 和/ 运营商/ 对/ 其/ 放松/ 警惕/ 而/ 忽略/ 检测/ ./ 对此/ ,/ King/ 等/ 人/ [/ 1/ ]/ 利用/ 实验/ 充分说明/ 了/ 隐式/ 信息/ 泄露/ 检测/ 具有/ 重要/ 的/ 实用价值/ ,/ 但/ 需/ 开发/ 出/ 有效/ 的/ 检测工具/ 以/ 降低/ 检测/ 成本/ 及/ 出错率/ ./ 当前/ 对于/ Android/ 应用/ 信息/ 泄露/ 检测/ 的/ 研究/ 日渐/ 兴起/ [/ 2/ -/ 10/ ]/ ,/ 然而/ 仍/ 缺少/ 有效/ 手段/ 准确/ 检测/ 隐式/ 信息/ 泄露/ [/ 2/ ]/ ./ 现有/ 的/ 检测/ 方法/ 主要/ 基于/ 污点/ 跟踪/ 分析/ 技术/ ,/ 即/ 对/ 敏感/ 私密/ 信息/ 进行/ 静态/ 跟踪/ [/ 2/ -/ 5/ ]/ 或/ 动态/ 监控/ [/ 9/ -/ 10/ ]/ ./ 污点/ 分析/ 从/ 一个/ 预定/ 的/ 敏感/ 源/ source/ (/ 例如/ 设备/ ID/ ,/ 地理位置/ 信息/ 及/ 通讯录/ 等/ )/ 跟踪/ 敏感/ 污点/ 数据/ 的/ 流动/ ,/ 直到/ 数据/ 到达/ 一个/ 给定/ 接收点/ sink/ (/ 例如/ 短信/ 发送/ 或者/ 日志/ 输出/ )/ ./ 当前/ 污点/ 分析/ 可/ 较为/ 精确/ 地/ 定位/ 泄露/ 的/ 关键/ 对象/ ,/ 在/ 显式/ 泄露/ 检测/ 领域/ 被/ 证明/ 是/ 有效/ 的/ ,/ 然而/ 对于/ 隐式/ 信息/ 而言/ ,/ 由于/ 其/ 无规律/ 的/ 内容/ 转换/ 会/ 对/ 分支/ 结构/ 的/ 执行/ 造成/ 影响/ ,/ 进而/ 左右/ 程序控制/ 流/ 走向/ ,/ 因此/ 上述/ 方法/ 对/ 隐式/ 流/ 跟踪/ 是/ 无效/ 的/ ,/ 隐式/ 泄露/ 检测/ 对于/ 各种/ 基于/ 流/ 分析/ 的/ 方法/ [/ 2/ ,/ 4/ -/ 5/ ]/ 而言/ 被/ 证明/ 是/ 一个/ 棘手/ 的/ 挑战/ ./ Android/ 应用/ 泄露/ 检测/ 的/ 另/ 一/ 挑战/ 来自/ 于/ Android/ 平台/ 自身/ 特征/ ./ 不同于/ 传统/ 的/ JAVA/ 应用程序/ 需要/ 根据/ 主/ 函数/ 确定/ 单一/ 的/ 程序/ 入口/ ,/ Android/ 系统/ 应用/ 没有/ 主/ 调用函数/ ,/ 而是/ 以/ 事件/ 回调/ 作为/ 驱动/ ,/ 因此/ 对于/ Android/ 应用/ 的/ 测试/ 工作/ 较之/ 传统/ 的/ 应用软件/ 测试/ 更具/ 难度/ ,/ 因/ 其/ 需要/ 充分考虑/ 应用/ 组件/ 的/ 生命周期/ 以及/ 各/ 回调/ 事件/ 的/ 发生/ 序列/ ,/ 且/ 随着/ 事件/ 的/ 增加/ ,/ 该/ 序列/ 集合/ 的/ 规模/ 将/ 呈/ 爆炸性/ 增长/ ./ 针对/ 上述/ 挑战/ ,/ 本文/ 首次/ 将/ 基于/ 线性/ 时序/ 逻辑/ LTL/ (/ LinearTemporalLogic/ )/ [/ 11/ ]/ 的/ 模型/ 检测/ 技术/ ①/ ②/ Page3/ 应用/ 于/ Android/ 应用/ 信息/ 泄露/ 检测/ 上/ ,/ 提出/ 一种/ 基于/ 安全/ 要素/ 语句/ 插装/ 的/ 泄露/ 检测/ 方法/ ./ 该/ 方法/ 简化/ 了/ 信息流/ 细节/ ,/ 仅/ 关注/ 敏感/ 源/ 与/ 危险/ 接收点/ 之间/ 的/ 关系/ ,/ 提取/ 私密/ 信息/ 泄露/ 抽象/ 模型/ ,/ 并/ 利用/ 现有/ 的/ LTL/ 模型/ 检测/ 技术/ 进行/ 检测/ ./ 为了/ 提高/ 检测/ 算法/ 的/ 执行/ 效率/ ,/ 利用/ 符号执行/ 求解/ 优化/ 合适/ 的/ 输入/ 值域/ ./ 最后/ 开发/ 了/ 原型/ 检测/ 系统/ LFDroid/ (/ LeakageFinderofAndroid/ )/ ,/ 在/ 公开/ 数据/ 集上/ 的/ 对比/ 实验/ 表明/ 本文/ 方法/ 的/ 有效性/ ./ 本文/ 第/ 2/ 节/ 给出/ 研究/ 动机/ 及/ 示例/ ;/ 第/ 3/ 节/ 设计/ 并/ 提出/ 抽象/ 的/ 信息/ 泄露/ 模型/ ;/ 第/ 4/ 节/ 阐述/ 可/ 规约/ 代码生成/ 过程/ ;/ 第/ 5/ 节/ 抽象/ 基于/ 泄露/ 检测/ 场景/ 下/ 的/ 迁移/ 模型/ ,/ 设计/ LTL/ 模型/ 属性/ 及/ 检测/ 算法/ ;/ 第/ 6/ 节/ 实验/ 及/ 对比/ 分析/ ;/ 第/ 7/ 节/ 讨论/ 算法/ 的/ 适用性/ ;/ 第/ 8/ 节/ 总结/ 与/ 下/ 一步/ 工作/ ./ 2/ 研究/ 动机/ 及/ 示例/ 首先/ 利用/ 一个/ 典型/ 的/ 代码/ 示例/ 说明/ 隐式/ 信息/ 泄露/ 的/ 发生/ 原理/ 及/ 本文/ 的/ 研究/ 动机/ ./ 该/ 示例/ 代码/ 来自/ EC/ -/ SPRIDE/ 研究/ 机构/ 所/ 贡献/ 的/ DroidBench1/ ./ 2/ ./ 该/ 示例/ 代码/ 片段/ 实现/ 了/ 一个/ 简单/ 的/ 设备/ ID/ 输出/ 功能/ ./ 主/ 函数/ 如图/ 1/ (/ a/ )/ 所示/ ,/ 该主/ 函数/ 将/ 电话/ 管理器/ 的/ ID/ 经/ 多种/ 方式/ 转化/ 后/ 通过/ 日志/ 打印/ 出来/ ./ 而/ ID/ 的/ 转化/ 则/ 依据/ 图/ 1/ (/ b/ )/ 和/ 图/ 1/ (/ c/ )/ 所示/ 的/ 两类/ 混淆/ 函数/ ./ 其中/ ,/ 图/ 1/ (/ b/ )/ 所/ 指示/ 的/ 混淆/ 函数/ 1/ 通过/ 将/ 字符串/ 型/ 的/ ID/ 转化/ 为/ 整型/ ,/ 从而/ 达到/ 混淆/ 的/ 效果/ ;/ 而图/ 1/ (/ c/ )/ 所/ 指示/ 的/ 混淆/ 函数/ 2/ 则/ 利用/ 更为/ 复杂/ 的/ Character/ ./ forDigit/ 函数/ 进行/ 转化/ ./ 该/ 示例/ 代码/ 存在/ 隐式/ 的/ 信息/ 泄露/ 隐患/ ,/ 且/ 由于/ 打印信息/ 与/ ID/ 内容/ 1/ ./ publicclassImplicitFlow1extendsActivity/ {/ 2/ ./ @/ Override3/ ./ protectedvoidonCreate/ (/ BundlesavedInstanceState/ )/ {/ 4/ ./ super/ ./ onCreate/ (/ savedInstanceState/ )/ ;/ 5/ ./ setContentView/ (/ R/ ./ layout/ ./ activity/ _/ implicit/ _/ flow1/ )/ ;/ 6/ ./ TelephonyManagertelephonyManager/ =/ (/ TelephonyManager/ )/ getSystemService/ (/ Context/ ./ TELEPHONY/ _/ SERVICE/ )/ ;/ 7/ ./ // // source8/ ./ Stringimei/ =/ telephonyManager/ ./ getDeviceId/ (/ )/ ;/ 9/ ./ StringobfuscatedIMEI/ =/ obfuscateIMEI/ (/ imei/ )/ ;/ 10/ ./ writeToLog/ (/ obfuscatedIMEI/ )/ ;/ 11/ ./ // // hardtodetect12/ ./ obfuscatedIMEI/ =/ reallyHardObfuscatedIMEI/ (/ imei/ )/ ;/ 13/ ./ writeToLog/ (/ obfuscatedIMEI/ )/ ;/ 14/ ./ }/ 15/ ./ privatevoidwriteToLog/ (/ Stringmessage/ )/ {/ 16/ ./ Log/ ./ i/ (/ “/ INFO/ ”/ ,/ message/ )/ ;/ // // sink17/ ./ }/ 18/ ./ }/ 1/ ./ privateStringobfuscateIMEI/ (/ Stringimei/ )/ {/ inobfuscateIMEIforcharacter/ :/ ”/ +/ c/ )/ ;/ (/ b/ )/ IMEI/ 混淆/ 函数/ 1/ 图/ 1/ 示例/ 代码/ 完全/ 不符/ 而/ 不易/ 察觉/ ./ 私密/ 的/ 设备/ ID/ 信息/ 通过/ 函数调用/ 分别/ 流向/ switch/ 分支/ 语句/ 和/ forDigit/ 转换/ 函数/ ,/ 从而/ 构成/ 了/ 两条/ 隐式/ 信息流/ ,/ 攻击者/ 可以/ 通过/ 劫持/ 日志/ 信息/ 反向/ 判断/ 用户/ 的/ 设备/ ID/ ./ 首先/ 考虑/ 利用/ 经典/ 泄露/ 检测工具/ FlowDroid/ [/ 2/ ]/ 进行/ 检测/ ,/ FlowDroid/ 是/ 一款/ 由/ EC/ -/ SPRIDE/ 项目组/ 开发/ 的/ 开源/ 工具/ ,/ 它/ 主要/ 面向/ Android/ 应用/ 信息/ 泄露/ 进行/ 静态/ 流/ 污点/ 检测/ ,/ 已/ 成为/ 当前/ 众多/ 信息/ 泄露/ 检测/ 研究/ 的/ 参照/ 基础/ [/ 6/ -/ 8/ ]/ ,/ 影响/ 广泛/ ./ 该/ 方法/ 首先/ 会/ 定位/ 到/ 泄露/ 的/ 敏感/ 源/ 入口/ ,/ 即/ Stringimei/ =/ telephonyManager/ ./ getDeviceId/ (/ )/ ,/ 继而/ 通过/ 赋值/ 引用/ 对/ 污点/ 变量/ 的/ 值/ 进行/ 传播/ ,/ 然而/ 当/ 传播/ 进入/ 混淆/ 函数/ 1/ ,/ 由于/ 遇到/ 分支/ 结构/ (/ 语句/ 4/ ~/ 16/ )/ ,/ 传播/ 不会/ 以/ 直接/ 赋值/ 的/ 方式/ 继续/ ,/ 而/ 实际上/ 通过/ switch/ 语句/ 影响/ 控制流/ 走向/ ,/ 从而/ 发生/ 关于/ 敏感/ 信息/ 的/ 隐式/ 泄露/ ./ 对于/ 混淆/ 函数/ 2/ ,/ 污点/ 通过/ 语句/ 4/ 传播/ 至/ 变量/ imeiAsChar/ ,/ 而/ 另/ 一个/ 受/ 污染/ 的/ 变量/ newOldIMEI/ (/ 语句/ 5/ )/ ,/ 由于/ 没有/ 充分/ 的/ 传播/ 条件/ ,/ 从而/ 造成/ 漏报/ ./ FlowDroid/ 方法/ 的/ 优势/ 在于/ 可以/ 准确/ 跟踪/ 泄露/ 信息流/ 的/ 轨迹/ ,/ 以及/ 处理/ 对象/ 、/ 域/ 和/ 上下文/ 敏感/ 等/ 因素/ ,/ 然而/ 对于/ 代码/ 混淆/ 而/ 形成/ 的/ 隐式/ 信息流/ ,/ 由于/ 敏感/ 流/ 信息/ 转化/ 的/ 多样性/ 和/ 复杂性/ 使得/ 其/ 无法/ 从/ 代码/ 分析/ 层面/ 进行/ 准确/ 推断/ ./ 其次/ 考虑/ 选择/ 动态/ 污点/ 分析/ 技术/ [/ 9/ -/ 10/ ]/ 加以解决/ ,/ 由于/ 动态/ 技术/ 采用/ 字节/ 码/ 层面/ 的/ 污点/ 标记/ ,/ 并/ 实时/ 监控/ Android/ 应用/ 的/ 运行/ 状态/ 与/ 结果/ ,/ 不可避免/ 地/ 增加/ 了/ 系统/ 开销/ ./ 另外/ 在/ 隐式/ 泄露/ 转换/ 过程/ 中/ ,/ 标记/ 将/ 随着/ 转换/ 的/ 发生/ 而/ 停止/ 传播/ ,/ 因此/ 仅靠/ 标记/ 初始/ 污点/ 的/ 办法/ 无法/ 从/ 结果/ 标记/ 中/ 得出结论/ ,/ 从而/ 无法/ 适用/ 于/ 隐式/ 泄露/ 检测/ ./ Page4/ 一种/ 直接/ 的/ 处理/ 方法/ 是/ 忽略/ 分支/ 条件/ 或/ 函数/ 体/ 限制/ ,/ 直接/ 将/ 污染/ 传播/ 至/ 条件/ 语句/ 或/ 关键/ 函数/ 所/ 关联/ 的/ 所有/ 变量/ (/ 如图/ 1/ (/ b/ )/ 中/ result/ 以及/ 图/ 1/ (/ c/ )/ 中/ 的/ numbers/ ,/ imeiAsChar/ 以及/ newOldIMEI/ )/ ,/ 而/ 这种/ 对/ 路径/ 不/ 敏感/ 的/ 处理/ 方式/ 会/ 造成/ 过度/ 污染/ 问题/ ,/ 极易/ 造成/ 误报/ ./ 由此可见/ ,/ 隐式/ 的/ 信息/ 泄露/ 会/ 对/ 纯/ 静态/ 代码/ 分析/ 造成/ 困难/ ,/ 假使/ 忽略/ 混淆/ 转化/ 的/ 细节/ ,/ 通过/ 分析/ 建模/ 信息流/ 要素/ ,/ 如/ 危险源/ 点/ source/ 与/ 接收点/ sink/ ,/ 继而/ 挖掘/ 目标/ 源码/ 中/ 所/ 存在/ 的/ 要素/ 关系/ ,/ 将会/ 使得/ 隐式/ 泄露/ 检测/ 成为/ 可能/ ,/ 且/ 简化/ 了/ 实现/ 过程/ 和/ 开销/ ./ 下面/ 首先/ 定义/ 信息/ 泄露/ 的/ 安全/ 要素/ ,/ 提出/ 基于/ 安全/ 要素/ 的/ 信息/ 泄露/ 抽象/ 关系/ 模型/ ./ 3/ 抽象/ 的/ 信息/ 泄露/ 关系/ 模型/ 3.1/ 安全/ 要素/ 定义/ 定义/ 1/ ./ 安全/ 要素/ ./ 安全/ 要素/ 是/ 一个/ 五元/ 组/ K/ ,/ K/ =/ {/ type/ ,/ fun/ ,/ para/ ,/ pos/ ,/ var/ }/ ,/ 其中/ type/ 是/ 要素/ 类型/ 集合/ 且/ 包含/ 两种/ 类型/ :/ source/ 和/ sink/ ;/ fun/ 是/ 要素/ 所/ 包含/ 的/ 调用函数/ 集合/ ;/ para/ 是/ 敏感/ 参数/ 集合/ ;/ pos/ 是/ 要素/ 的/ 位置/ 信息/ ;/ var/ 是/ 关联/ 变量/ 集合/ ./ 表/ 1/ 典型/ 安全/ 要素/ 要素/ 类型/ SourceSink3/ ./ 2/ 抽象/ 的/ 信息/ 泄露/ 关系/ 模型/ 定义/ 2/ ./ 泄露/ 关系/ ./ 假设/ 对于/ source/ 型/ 安全/ 要素/ k1/ =/ {/ source/ ,/ f1/ ,/ p1/ ,/ pos1/ ,/ var1/ }/ 及/ sink/ 型/ 要素/ k2/ =/ {/ sink/ ,/ f2/ ,/ p2/ ,/ pos2/ ,/ var2/ }/ ,/ 存在/ ve/ 及/ ve/ 变量/ 上/ 的/ 两个/ 取值/ val/ (/ ve1/ 变量/ 上/ 的/ 两个/ 不同/ 取值/ val/ (/ ve/ (/ a/ )/ (/ val/ (/ ve/ (/ b/ )/ (/ (/ val/ (/ ve/ 安全/ 要素/ 是/ 泄露/ 的/ 关键/ 部分/ ,/ 一个/ 移动/ 应用/ 中/ 的/ 安全/ 要素/ 数量/ 不/ 固定/ ,/ 可能/ 为/ 多个/ ,/ 也/ 可能/ 没有/ ./ source/ 要素/ 指向/ 私密/ 信息/ 首次/ 出现/ 的/ 代码/ 片段/ ,/ sink/ 要素/ 指向/ 输出/ 型/ 代码/ 片段/ ,/ pos/ 用于/ 要素/ 定位/ ,/ 为/ 后续/ 插装及/ 结果/ 生成/ 提供/ 支持/ ,/ para/ 是/ 要素/ 的/ 私密/ 函数/ 、/ 变量/ 或/ 常量/ ,/ 而/ fun/ 是/ 调用/ para/ 的/ 相关/ 类/ 、/ 对象/ 或/ 函数/ ,/ var/ 是/ 与/ para/ 或/ fun/ 相关/ 的/ 变量/ 集合/ ,/ 如果/ para/ 以/ 函数/ 或/ 变量/ 形式/ 出现/ ,/ 则/ var/ 包含/ para/ ./ 通常/ ,/ source/ 要素/ 除了/ para/ 之外/ ,/ 会/ 赋值/ 给/ 一个/ 变量/ ,/ 因而/ 额外/ 关联/ 一个/ var/ ,/ 而/ sink/ 类型/ 要素/ 行使/ 输出/ 功能/ ,/ 其/ 参数/ 决定/ 了/ 信息/ 泄露/ 过程/ 中/ sink/ 要素/ 的/ 内容/ 含量/ ,/ 且/ 参数/ 可能/ 为/ 常量/ 而/ 不/ 一定/ 会/ 关联/ 变量/ ./ 例如/ ,/ 一段/ source/ 要素/ 代码/ 为/ imei/ =/ convertId2Format/ (/ mTelephonyMgr/ ./ getDeviceId/ (/ )/ )/ ;/ 其中/ :/ mTelephonyMgr/ ./ getDeviceId/ (/ )/ 为/ 关键/ 私密/ 参数/ 构成/ para/ ;/ convertId2Format/ 是/ 自定义/ 函数/ ,/ 其/ 功能/ 是/ 将/ 私密/ 信息/ 转换/ 为/ 固定/ 格式/ 从而/ 构成/ fun/ ;/ 而/ 变量/ imei/ 被/ fun/ 赋值/ ,/ 它/ 与/ mTelephonyMgr/ ./ getDeviceId/ (/ )/ 一同/ 构成/ var/ ./ 典型/ 的/ 安全/ 要素/ 功能/ 和/ 危害/ 如表/ 1/ 所示/ ./ 其中/ ,/ →/ 表示/ 当/ 左部/ 成立/ 则/ 右部/ 也/ 成立/ ./ 则/ 称/ k1/ 与/ k2/ 存在/ 泄露/ 关系/ ,/ 记为/ k1/ →/ / / val/ (/ )/ 与/ val/ (/ )/ 通过/ 固有/ 赋值/ 或/ 用户/ 输入/ 确定/ ./ 例如/ ,/ 在/ 图/ 1/ (/ a/ )/ 中/ ,/ imei/ 为/ source/ 要素/ 的/ var/ 元素/ 之一/ ,/ 它/ 的/ val/ (/ )/ 取值/ 原本/ 为/ 设备/ 的/ 唯一/ 识别码/ ,/ 然而/ 亦可/ 通过/ 插装/ 等/ 手段/ 为/ 其/ 重新/ 赋值/ ./ 值得/ 说明/ 的/ 是/ ,/ 如果/ sink/ 要素/ 的/ 参数/ 全为/ 常量/ ,/ 则/ 其/ var/ 集合/ 可能/ 取空/ ,/ 此时/ 需要/ 在/ 原始/ 要素/ 基础/ 上/ 增加/ 新/ 的/ 要素/ 变量/ ,/ 相关/ 内容/ 将/ 在/ 下节/ 介绍/ ./ Page5/ 泄露/ 关系/ 确立/ 了/ 两个/ 安全/ 要素/ 之间/ 是否/ 具有/ 存在/ 泄露/ 的/ 可能/ ./ 具体表现/ 在/ 参数/ 是否/ 具有/ 特定/ 的/ 关联/ ,/ 该/ 关联/ 分为/ 两个/ 步骤/ ,/ 其一/ 是/ source/ 要素/ 与/ sink/ 要素/ 关于/ 的/ 某/ 一/ 参数值/ 成/ 对/ 出现/ ;/ 其二/ 是/ 当/ source/ 要素/ 在/ 其/ 定义域/ 内/ 变换/ 成某/ 一个/ 特定/ 参数值/ 时/ ,/ 对应/ 的/ sink/ 参数值/ 亦/ 会/ 发生变化/ ./ 值得注意/ 的/ 是/ ,/ 定义/ 2/ 中/ 泄露/ 关系/ 仅/ 涵盖/ 目标/ 系统/ 中/ 包含/ 明显/ 的/ source/ ,/ sink/ 安全/ 要素/ 的/ 信息/ 泄露/ 场景/ ./ 而/ 其他/ 形式/ 的/ 泄露/ ,/ 如/ Android/ 平台/ 本身/ 的/ 泄露/ 漏洞/ 以及/ 移动/ 设备/ 远程/ 连接/ 过程/ 中/ 所/ 发生/ 的/ 信息/ 泄露/ 等/ 场景/ 不/ 在/ 本文/ 讨论/ 范围/ 内/ ./ 定义/ 3/ ./ 显式/ 泄露/ 关系/ ./ 假设/ 存在/ source/ 型/ 安全/ 要素/ k1/ =/ {/ source/ ,/ f1/ ,/ p1/ ,/ pos1/ ,/ var1/ }/ 及/ sink/ 型/ 要素/ k2/ =/ {/ sink/ ,/ f2/ ,/ p2/ ,/ pos2/ ,/ var2/ }/ ,/ 满足/ var1/ ∩/ var2/ ≠/ / ,/ 则/ 称/ k1/ 与/ k2/ 存在/ 显式/ 泄露/ 关系/ ,/ 记为/ k1/ 称/ 〈/ k1/ ,/ k2/ 〉/ 为/ 显式/ 泄露/ 关系/ 对/ ./ 由于/ var1/ 与/ var2/ 具有/ 相同/ 的/ 交集/ ,/ 预示/ 着/ 交集/ 元素/ 之间/ 没有/ 复杂/ 的/ 值/ 转化/ ,/ 可以/ 通过/ 静态/ 的/ 数据流/ 分析/ 确定/ 由/ source/ 变量/ 转变/ 为/ 泄露/ 函数参数/ 的/ 可行/ 路径/ ./ 当/ 目标/ 源码/ 中/ 存在/ 显式/ 泄露/ 关系/ ,/ 其/ 污染/ 信息流/ 也/ 是/ 显式/ 的/ ./ 值得一提的是/ ,/ 由于/ var1/ 与/ var2/ 的/ 交集/ 元素/ 相同/ ,/ 则/ 交集/ 元素/ 的/ 值/ 也/ 相同/ ,/ 该/ 特性/ 可/ 作为/ 后续/ 检测/ 显式/ 泄露/ 关系/ 的/ 重要依据/ ./ 定理/ 1/ ./ 已知/ 目标/ 源码/ 中/ 两个/ 安全/ 要素/ ./ 若/ k1/ 证明/ ./ 已知/ k1/ / ,/ 则/ 一定/ 存在/ vi/ 且/ 有/ (/ 1/ )/ 假设/ 取值/ val/ (/ vi/ (/ val/ (/ vi1/ )/ =/ a/ )/ →/ (/ val/ (/ vi/ (/ 2/ )/ 当/ 另/ 一/ 赋值/ (/ val/ (/ vi/ 由于/ val/ (/ vi/ 其中/ ,/ D1/ 为/ vi/ 由/ (/ 1/ )/ 和/ (/ 2/ )/ 的/ 结论/ 可得/ k1/ →/ / / 泄露/ 的/ 本质/ 是/ 敏感/ 信息/ 在/ 多个/ 可能/ 的/ 取值/ 中/ 确定/ 某个/ 值/ 或/ 范围/ ,/ 因此/ vi/ 值/ 范围/ 不会/ 是/ 一个/ 确定/ 的/ 值/ ,/ 所以/ 一定/ 能够/ 得到/ 其取/ 值域/ 中/ 的/ 某个/ (/ val/ (/ vi/ 说/ 明显/ 式/ 关系/ 是/ 一般/ 泄露/ 关系/ 的/ 特例/ ./ 定义/ 4/ ./ 隐式/ 泄露/ 关系/ ./ 假设/ 存在/ source/ 型/ 安全/ 要素/ k1/ =/ {/ source/ ,/ f1/ ,/ p1/ ,/ pos1/ ,/ var1/ }/ 及/ sink/ 型/ 要素/ k2/ =/ {/ sink/ ,/ f2/ ,/ p2/ ,/ pos2/ ,/ var2/ }/ ,/ 满足/ 定义/ 2/ 泄露/ 关系/ 且/ 有/ var1/ ∩/ var2/ =/ / ,/ 则/ 称/ k1/ 与/ k2/ 存在/ 隐式/ 泄露/ 关系/ ,/ 记为/ k1/ 隐式/ 泄露/ 和/ 显式/ 泄露/ 共同/ 构成/ 了/ 一般/ 泄露/ 关系/ ./ 在/ 信息/ 泄露/ 检测/ 过程/ 中/ ,/ 隐式/ 泄露/ 关系/ 常常/ 易/ 被忽视/ ,/ 这/ 是因为/ source/ 要素/ 与/ 相应/ 的/ sink/ 要素/ 之间/ 是/ 间接/ 关联/ 的/ ,/ 这种/ 间接/ 关联/ 需/ 通过/ 多次/ 值/ 变换/ 才/ 得以/ 显现/ ./ 从/ 代码/ 层面/ ,/ 已有/ 的/ 静态/ 流/ 分析/ 技术/ 无法/ 准确/ 跟踪/ 污点/ 流向/ ,/ 而/ 动态/ 泄露/ 检测/ 往往/ 着重/ 分析/ 单次/ 运行/ 结果/ ,/ 亦/ 无法/ 准确/ 检测/ 隐式/ 泄露/ ./ 由/ 定义/ 2/ ~/ 4/ ,/ 抽象/ 信息/ 泄露/ 关系/ 模型/ 得以/ 建立/ ./ 4/ 可/ 规约/ 代码生成/ 目标/ 源码/ 中/ 的/ 安全/ 要素/ 往往/ 复杂/ 难以/ 操作/ 且/ 缺少/ 初始化/ 赋值/ ,/ 导致/ 模型/ 检测/ 无法/ 直接/ 进行/ ,/ 因而/ 需要/ 首先/ 生成/ 可/ 用于/ 模型/ 规约/ 的/ 中间代码/ ,/ 生成/ 过程/ 利用/ 插装/ 实现/ ./ 4.1/ 生成/ 规则/ 及/ 算法/ 首先/ 根据/ 诸如/ 表/ 1/ 中/ 的/ 安全/ 要素/ 典型/ 特征/ ,/ 扫描/ 得到/ 各/ 安全/ 要素/ 的/ 内容/ 及/ 位置/ ,/ 继而/ 根据/ 生成/ 规则/ 将/ 源码/ 转化/ 为/ 可/ 规约/ 代码/ ./ 在/ 原/ 安全/ 要素/ 基础/ 上/ ,/ 构造/ 新/ 的/ 可供/ 模型/ 检测/ 的/ 要素/ 形式/ ,/ 所/ 定义/ 的/ 生成/ 规则/ 如下/ ./ 规则/ 1/ ./ 在/ source/ 类/ 要素/ 之后/ 生成/ 新/ 关联/ 变量/ ;/ 而/ 在/ sink/ 类/ 要素/ 之前/ 生成/ 新/ 关联/ 变量/ ./ 规则/ 2/ ./ 如果/ source/ 要素/ 除/ 参数/ 外/ 无/ 关联/ 变量/ ,/ 生成/ 一个/ 新/ 变量/ 替代/ 原/ 要素/ ./ 规则/ 3/ ./ 对于/ 每个/ sink/ 要素/ 的/ 参数/ ,/ 生成/ 一个/ 新/ 关联/ 变量/ ./ 规则/ 4/ ./ 对于/ source/ 要素/ 除/ 参数/ 外/ 的/ 关联/ 变量/ ,/ 利用/ 一个/ 随机/ 常量/ 对/ 其/ 初始化/ ./ 规则/ 5/ ./ 对于/ sink/ 要素/ 的/ 新/ 关联/ 变量/ ,/ 利用/ 参数/ 原型/ 对/ 其/ 赋值/ ./ 规则/ 6/ ./ 为/ 每段/ 待测/ 源码/ 生成/ 一个/ 驱动/ 主/ 函数/ ,/ 将/ source/ 与/ sink/ 要素/ 分别/ 按序/ 调用/ ./ 主/ 函数/ 的/ 生成/ 过程/ 在/ 后面/ 章节/ 详细描述/ ./ 定理/ 2/ ./ 对于/ 可/ 规约/ 代码/ 中/ 的/ 任意/ 安全/ 要素/ key/ ,/ 均/ 有/ 变量/ v/ 或/ 变量/ 集合/ V/ 与/ 之/ 对应/ ,/ 且/ 在/ 信息/ 泄露/ 过程/ 中/ ,/ 变量/ v/ 或/ 集合/ V/ 可/ 代替/ key/ 的/ 内容/ ./ 证明/ ./ 对/ source/ 和/ sink/ 要素/ 分别/ 讨论/ :/ (/ 1/ )/ 对于/ source/ 要素/ k/ (/ src/ )/ ,/ 假设/ k/ (/ src/ )/ 的/ 参/ Page6/ 数/ 变量/ 集合/ 为/ P/ _/ SRC/ ,/ k/ (/ src/ )/ 的/ 关联/ 变量/ 集合/ 为/ V/ _/ SRC/ ,/ 则/ 在/ 原始/ 代码/ 中/ :/ (/ a/ )/ 若/ V/ _/ SRC/ -/ P/ _/ SRC/ =/ / ,/ 由/ 规则/ 2/ 生成/ 的/ 新/ 变量/ nv/ 可/ 代替/ k/ (/ src/ )/ ./ (/ b/ )/ 若/ V/ _/ SRC/ -/ P/ _/ SRC/ ≠/ / ,/ 不妨/ 设/ 变量/ v/ ∈/ V/ _/ SRC/ -/ P/ _/ SRC/ ,/ 由/ 定义/ 1/ 及其/ 释义/ 可得/ v/ 属于/ k/ (/ src/ )/ 的/ 非/ 参数/ 关联/ 变量/ ,/ 在/ k/ (/ src/ )/ 之后/ 存在/ 赋值/ v/ / k/ (/ src/ )/ ,/ 从而/ v/ 可/ 代替/ k/ (/ src/ )/ ./ (/ 2/ )/ 对于/ sink/ 要素/ k/ (/ sin/ )/ ,/ 假设/ k/ (/ sin/ )/ 的/ 参数/ 变量/ 集合/ 为/ P/ _/ SIN/ ,/ 由/ 规则/ 3/ ,/ 对于/ 任意/ p/ ∈/ P/ _/ SIN/ 将/ 被/ 一个/ 新/ 变量/ nv/ ∈/ NV/ 取代/ ,/ NV/ 为/ 新/ 变量/ 集合/ ./ 根据/ 定义/ 1/ 及其/ 释义/ ,/ k/ (/ sin/ )/ 的/ 信息内容/ k/ (/ sin/ )/ P/ _/ SIN/ ,/ 因此/ k/ (/ sin/ )/ 程中/ NV/ 可/ 代替/ k/ (/ sin/ )/ 内容/ ./ 综上/ ,/ 定理/ 得证/ ./ 定理/ 3/ ./ 可/ 规约/ 代码/ 中若/ 存在/ source/ 安全/ 要素/ k/ (/ src/ )/ 和/ 它/ 的/ 一个/ 非/ 参数/ 关联/ 变量/ v/ ,/ 则/ v/ 的/ 取值/ 与/ k/ (/ src/ )/ 无关/ ./ 证明/ ./ 由/ 规则/ 1/ 和/ 规则/ 4/ ,/ 在/ 可/ 规约/ 代码/ 中/ ,/ 若/ 存在/ k/ (/ src/ )/ 及/ 赋值/ v/ / k/ (/ src/ )/ ,/ 则/ 在/ k/ (/ src/ )/ 之后/ 必/ 存在/ 赋值/ v/ / init/ (/ R/ )/ ,/ 其中/ init/ (/ R/ )/ 是/ 一个/ 初始化/ 随机/ 量/ ,/ 且/ 无/ 任何/ 其他/ 对/ v/ 的/ 操作/ ,/ 因此/ v/ 的/ 取值/ 仅/ 与/ init/ (/ R/ )/ 有关/ ,/ 而/ 与/ k/ (/ src/ )/ 无关/ ./ 定理/ 4/ ./ 可/ 规约/ 代码/ 中/ sink/ 要素/ 插装/ 内容/ 不/ 改变/ 原/ 目标/ 代码/ 的/ 执行/ 逻辑/ ./ 证明/ ./ 可/ 规约/ 代码/ sink/ 要素/ 的/ 插装/ 内容/ I/ (/ sin/ )/ =/ Gen/ (/ nv/ )/ +/ Asg/ (/ nv/ )/ ,/ 其中/ Gen/ (/ nv/ )/ ,/ Asg/ (/ nv/ )/ 分别/ 表示/ 对/ sink/ 要素/ 的/ 新/ 变量/ 生成/ 和/ 赋值/ ,/ 设/ nv/ 为/ 生成/ 的/ 任/ 一新/ 变量/ ,/ 则/ 分/ 情况/ 讨论/ :/ (/ 1/ )/ 对于/ Gen/ (/ nv/ )/ 而言/ ,/ 由/ 规则/ 1/ ,/ 3/ 可知/ ,/ 若/ 存在/ k/ (/ sin/ )/ ,/ 则/ Gen/ (/ nv/ )/ 存在/ 且/ nv/ 不/ 被/ 本/ 程序/ 的/ 任何/ 变量/ 或/ 函数/ 引用/ ,/ 因此/ 不/ 改变/ 原代码/ 执行/ (/ 2/ )/ 对于/ Asg/ (/ nv/ )/ 而言/ ,/ 不妨/ 设/ p/ 为/ 任一/ sink/ 要素/ k/ (/ sin/ )/ 的/ 参数/ ,/ 则/ 由/ 规则/ 5/ ,/ 存在/ 赋值/ nv/ / p/ ,/ 而/ 此时/ 处于/ 右部/ 的/ p/ 值/ 不变/ ,/ 则/ 其后/ 的/ k/ (/ sin/ )/ 亦/ 不变/ ,/ 因此/ 也/ 不/ 改变/ 原代码/ 执行/ ./ 综上/ ,/ 定理/ 得证/ ./ 定理/ 2/ ,/ 3/ 表明/ 可/ 规约/ 代码生成/ 规则/ 保证/ 了/ 对应/ 目标/ 代码/ 的/ 任一/ 安全/ 要素/ 均/ 被/ 相关/ 变量/ 所/ 替代/ ,/ 且/ 替代/ 后/ 的/ 要素/ 变更/ 将会/ 对/ 后续/ 程序/ 造成/ 影响/ ,/ 便于/ 进行/ 泄露/ 检测/ ./ 同时/ 定理/ 4/ 保证/ 了/ 可/ 规约/ 代码/ 除/ source/ 赋值/ 外/ ,/ 不会/ 脱离/ 原/ 目标/ 代码/ ,/ 其/ 检测/ 结果/ 将/ 反映/ 目标/ 代码/ 中/ 存在/ 的/ 漏洞/ 威胁/ ./ 根据/ 规则/ 1/ ~/ 6/ ,/ 得到/ 可/ 规约/ 代码/ 的/ 生成/ 算法/ 如/ 算法/ 1/ 所示/ ./ 算法/ 1/ ./ 可/ 规约/ 代码生成/ 算法/ ./ 输入/ :/ 待测/ 目标/ 安全/ 要素/ 输出/ :/ 可/ 规约/ 的/ 系统/ 代码/ 1/ ./ PROCEDURERulableSystem/ (/ A/ )/ // // A/ 为待测/ 目标/ 安全/ 要素/ 2/ ./ FOREACH/ (/ kinA/ )/ 3/ ./ IF/ (/ source/ =/ =/ k/ ./ type/ &&/ NULL/ =/ =/ (/ k/ ./ var/ &/ k/ ./ para/ )/ )/ THEN4/ ./ k/ ./ var/ ./ add/ (/ createNewVar/ (/ )/ )/ ;/ // // 为/ 每个/ 无/ 额外/ 变量/ 的/ source/ 生成/ 新/ 关联/ 变量/ 5/ ./ moveTo/ (/ k/ ./ pos/ +/ 1/ )/ ;/ 6/ ./ k/ ./ var/ _/ new/ =/ randomValue/ (/ )/ ;/ // // 利用/ 随机/ 常量/ 初始化/ source/ 变量/ 7/ ./ ELIFsink/ =/ =/ k/ ./ typeTHEN8/ ./ FOREACH/ (/ pink/ ./ para/ )/ 9/ ./ k/ ./ var/ ./ add/ (/ createNewVar/ (/ )/ )/ ;/ // // 为/ 每个/ sink/ 参数/ 生成/ 新/ 关联/ 变量/ 10/ ./ moveTo/ (/ k/ ./ pos/ -/ 1/ )/ ;/ 11/ ./ k/ ./ var/ _/ new/ =/ p/ ./ var/ ;/ // // 将/ 参数/ 赋值/ 给/ 新/ 关联/ 变量/ 12/ ./ ENDFOR13/ ./ ELSE14/ ./ output/ (/ “/ invalidk/ ”/ )/ ;/ // // 无效/ 的/ 要素/ 15/ ./ ENDIF16/ ./ ENDFOR17/ ./ IF/ (/ !/ createDrive/ (/ )/ )/ THEN18/ ./ output/ (/ “/ failedtogeneratedriven/ ”/ )/ ;/ // // 无效/ 的/ 驱动/ 19/ ./ ENDIF20/ ./ ENDPROCEDURE/ 对于/ 具备/ 安全/ 要素/ 的/ 目标/ 系统/ ,/ 通过/ 定义/ 2/ 利用/ 模型/ 检测/ 验证/ 该/ 系统/ 泄露/ 与否/ ,/ 在/ 形式/ 上应/ 符合/ 下列/ 条件/ :/ (/ 1/ )/ 具备/ 通用/ 的/ source/ 与/ sink/ 要素/ 变量/ ;/ (/ 2/ )/ 要素/ 变量/ 能够/ 方便/ 获取/ ;/ (/ 3/ )/ Source/ 要素/ 变量值/ 易于/ 变更/ ./ 算法/ 1/ 通过/ 语句/ 4/ 对于/ 每/ 一个/ 无/ 关联/ 变量/ 的/ source/ 要素/ 生成/ 一个/ 新/ 要素/ 变量/ ,/ 并且/ 利用/ 语句/ 6/ 赋给/ 一个/ 随机/ 初始值/ ,/ 该/ 初始值/ 通过/ 函数/ 随机/ 变更/ ,/ 从而/ 满足条件/ (/ 3/ )/ ;/ 而/ 语句/ 7/ ~/ 12/ ,/ 对于/ 每/ 一个/ sink/ 要素/ 根据/ 其/ 参数/ 生成/ 对应/ 的/ 关联/ 要素/ 变量/ ./ 由于/ 新/ 生成/ 的/ 要素/ 变量/ 形式/ 和/ 名称/ 被/ 设计/ 为/ 通用/ 已知/ 的/ ,/ 因此/ 在/ 检测/ 过程/ 中/ 易于/ 获取/ ,/ 从而/ 满足条件/ (/ 1/ )/ 和/ (/ 2/ )/ ./ 总体而言/ ,/ 算法/ 1/ 的/ 初始化/ 插装/ 使得/ 程序/ 中/ 的/ 安全/ 要素/ 变得/ 易于/ 修改/ 和/ 获取/ ,/ 为/ 后续/ 模型/ 检测/ 工作/ 提供/ 便利/ ./ Page7/ 为了/ 描述/ 清晰/ ,/ 使用/ 一个/ 典型/ 的/ 示例/ 代码/ (/ 如图/ 2/ 所示/ ,/ 更/ 多/ 示例/ 可见/ ①/ )/ 描述/ 生成/ 过程/ ,/ 该/ 示例/ 代码/ 描述/ 了/ 一个/ 简单/ 的/ 打印/ 经纬度/ 功能/ 的/ Activity/ ,/ 当/ 用户/ 的/ 位置/ 发生/ 改变/ 时/ ,/ 函数/ onLocationChanged/ (/ )/ 将会/ 被/ 回调/ ,/ 当/ 再次/ 回调/ onResume/ (/ )/ 时/ 发生/ 位置/ 信息/ 泄露/ ./ 1/ ./ publicclassLocationLeak1extendsActivity/ {/ 2/ ./ privateStringlatitude/ =/ “/ ”/ ;/ 3/ ./ privateStringlongitude/ =/ “/ ”/ ;/ 4/ ./ @/ Override5/ ./ protectedvoidonCreate/ (/ BundlesavedInstanceState/ )/ {/ 6/ ./ super/ ./ onCreate/ (/ savedInstanceState/ )/ ;/ 7/ ./ setContentView/ (/ R/ ./ layout/ ./ activity/ _/ location/ _/ leak1/ )/ ;/ 8/ ./ LocationManagerlocationManager/ =/ (/ LocationManager/ )/ getSystemService/ (/ Context/ ./ LOCATION/ _/ SERVICE/ )/ ;/ 9/ ./ LocationListenerlocationListener/ =/ newMyLocationListener/ (/ )/ ;/ 10/ ./ locationManager/ ./ requestLocationUpdates/ (/ LocationManager/ ./ GPS/ _/ PROVIDER/ ,/ 5000/ ,/ 10/ ,/ locationListener/ )/ ;/ 11/ ./ }/ 12/ ./ protectedvoidonResume/ (/ )/ {/ 13/ ./ super/ ./ onResume/ (/ )/ ;/ 14/ ./ if/ (/ longitude/ ./ compareTo/ (/ “/ 112.5/ ”/ )/ >/ 0/ &&/ longitude/ ./ compareTo/ (/ “/ 127.5/ ”/ )/ </ 0/ )/ {/ 15/ ./ Log/ ./ d/ (/ “/ Longitude/ ”/ ,/ “/ Longitudeisbetween112/ ./ 5and127/ ./ 5/ ”/ )/ ;/ // // sink16/ ./ }/ 17/ ./ Log/ ./ d/ (/ “/ Latitude/ ”/ ,/ “/ Latitude/ :/ ”/ +/ Double/ ./ toString/ (/ latitude/ )/ )/ ;/ // // sink18/ ./ }/ 19/ ./ privateclassMyLocationListenerimplementsLocationListener/ {/ 20/ ./ publicvoidonLocationChanged/ (/ Locationloc/ )/ {/ // // source21/ ./ longitude/ =/ Double/ ./ toString/ (/ loc/ ./ getLongitude/ (/ )/ )/ ;/ 22/ ./ latitude/ =/ Double/ ./ toString/ (/ loc/ ./ getLatitude/ (/ )/ )/ ;/ 23/ ./ }/ 24/ ./ }/ 25/ ./ }/ 经过/ 插装/ 转化/ ,/ 由/ 规则/ 所/ 生成/ 的/ 可/ 规约/ 函数/ 代码/ 如图/ 3/ 所示/ ./ 在/ 此仅/ 展示/ 关键/ 的/ source/ 和/ sink/ 要素/ 所在/ 函数/ (/ onResume/ (/ )/ 和/ onLocationChanged/ (/ )/ )/ 转化/ 结果/ ,/ 而主/ 调用函数/ 的/ 生成/ 过程/ 将/ 在/ 后面/ 章节/ 具体/ 阐述/ ./ 图/ 3/ 中/ 生成/ 模块/ 首先/ 匹配/ 到/ 程序/ 的/ 安全/ 要素/ ,/ 即图/ 2/ 中/ 的/ 语句/ 15/ ,/ 17/ ,/ 21/ ,/ 22/ ./ 对于/ 两个/ sink/ 要素/ ,/ 根据/ 规则/ 1/ 和/ 规则/ 3/ ,/ 分别/ 在/ 原/ 要素/ 之前/ 为/ 其/ 参数/ 生成/ 新/ 的/ 要素/ 变量/ sink1/ 和/ sink2/ ,/ 并/ 插/ 装于/ 原/ sink/ 要素/ 之前/ ./ 根据/ 规则/ 5/ ,/ 对于/ sink/ 要素/ 所/ 生成/ 的/ 要素/ 变量/ sink1/ ,/ sink2/ ,/ 分别/ 利用/ 参数/ 原型/ longi/ -/ tude/ 和/ latitude/ 对/ 其/ 赋值/ ./ 而/ 由于/ 两个/ source/ 要素/ 已有/ 对应/ 的/ 关联/ 变量/ longitude/ 和/ latitude/ ,/ 不/ 符合/ 规则/ 2/ ,/ 无需/ 生成/ 新/ 的/ 要素/ 变量/ ./ 继而/ 根据/ 规则/ 4/ ,/ 利用/ 初始化/ 函数/ 为/ source/ 要素/ 赋值/ ,/ 赋值/ 语句/ 安排/ 在/ source/ 要素/ 之后/ ,/ 并/ 利用/ 初始化/ 函数/ init/ (/ )/ 为/ 其/ 构造/ 初始值/ ./ 1/ ./ publicvoidonResume/ (/ )/ {/ 2/ ./ super/ ./ onResume/ (/ )/ ;/ 3/ ./ if/ (/ longitude/ ./ compareTo/ “/ 112.5/ ”/ )/ >/ 0/ &&/ longitude/ ./ compareTo/ (/ “/ 127.5/ ”/ )/ </ 0/ )/ {/ 4/ ./ sink1/ =/ “/ Longitudeisbetween112/ ./ 5and127/ ./ 5/ ”/ ;/ 5/ ./ Log/ ./ d/ (/ “/ Longitude/ ”/ ,/ “/ Longitudeisbetween112/ ./ 5and127/ ./ 5/ ”/ )/ ;/ // // sink/ ,/ leak/ }/ 6/ ./ sink2/ =/ latitude/ ;/ 7/ ./ Log/ ./ d/ (/ “/ Latitude/ ”/ ,/ “/ Latitude/ :/ ”/ +/ latitude/ )/ ;/ // // sink/ ,/ leak8/ ./ }/ 9/ ./ }/ 10/ ./ privateclassMyLocationListenerimplementsLocationListener/ {/ 11/ ./ publicvoidonLocationChanged/ (/ Locationloc/ )/ {/ // // source12/ ./ longitude/ =/ Double/ ./ toString/ (/ loc/ ./ getLongitude/ (/ )/ )/ ;/ 13/ ./ longitude/ =/ init/ (/ 3/ ,/ 2/ )/ ;/ 14/ ./ latitude/ =/ Double/ ./ toString/ (/ loc/ ./ getLatitude/ (/ )/ )/ ;/ 15/ ./ latitude/ =/ init/ (/ 3/ ,/ 2/ )/ ;/ 16/ ./ }/ 17/ ./ Randomrandom/ =/ newRandom/ (/ 42/ )/ ;/ 18/ ./ publicvoidinit/ (/ domain/ ,/ randN/ )/ {/ 19/ ./ Stringbase/ =/ “/ 0123456789/ ”/ ;/ 20/ ./ StringBufferran/ =/ newStringBuffer/ (/ )/ ;/ 21/ ./ for/ (/ inti/ =/ 0/ ;/ i/ </ domain/ ;/ i/ ++/ )/ {/ 22/ ./ intnumber/ =/ random/ ./ nextInt/ (/ randN/ )/ ;/ 23/ ./ ran/ ./ append/ (/ base/ ./ charAt/ (/ number/ )/ )/ ;/ 24/ ./ }/ 25/ ./ returnran/ ./ toString/ (/ )/ ;/ 26/ ./ }/ 4.2/ 驱动/ 主/ 函数/ 与/ 传统/ 应用软件/ 不同/ 的/ 是/ ,/ Android/ 应用/ 以/ 事件/ 来/ 驱动/ 运行/ ,/ 缺少/ 真正/ 意义/ 上/ 的/ 主/ 函数/ ,/ 这/ 意味着/ 其/ 执行/ 路径/ 将/ 随着/ 系统/ 与/ 用户/ 之间/ 的/ 上下文/ 需求/ 关系/ 不断/ 发生变化/ ,/ 函数调用/ 顺序/ 不/ 确定/ ,/ 增加/ 了/ 检测/ 的/ 难度/ ./ 因此/ 除了/ 处理过程/ 内/ 逻辑/ 之外/ ,/ 需要/ 一个/ 合适/ 的/ 驱动/ 函数/ 安排/ 可行/ 的/ 类/ 函数/ 执行/ 序列/ ,/ 从而/ 模拟/ 应用程序/ 可能/ 运行/ 的/ 不同/ 方式/ ./ 而/ Android/ 异步/ 事件/ 发生/ 是/ 随机/ 的/ ,/ 如果/ 考虑/ 所有/ 可能/ 的/ 事件/ 排序/ ,/ 将会/ 造成/ 序列/ 爆炸/ ./ 对此/ ,/ 文献/ [/ 2/ ]/ 提供/ 了/ 一种/ 路径/ 不/ 敏感/ 的/ 模拟/ 主/ 函数/ 构建/ 方法/ ./ 该/ 方法/ 首先/ 为/ 每个/ Android/ 组件/ 按照/ 生命周期/ 生成/ 一个/ 调用/ 图/ ,/ 继而/ 利用/ 回调/ 函数/ 扩展/ 该/ 调用/ 图/ ,/ 最终/ 得到/ 一个/ 完整/ 的/ 函数调用/ 序列/ ./ 本文/ 在/ 文献/ [/ 2/ ]/ 关于/ 生命周期/ 建模/ 的/ 基础/ 上/ ,/ 设计/ 了/ 适用/ 于/ 抽象/ 信息/ 泄露/ 模型/ 的/ 驱动/ 主/ 函数/ 生成/ 方法/ ./ 在/ 阐述/ 驱动/ 生成/ 规则/ 之前/ 为了/ 便于/ 描述/ ,/ 首先/ 定义/ 一些/ 概念/ ./ 定义/ 5/ ./ 要素/ 函数/ ./ 若/ 一个/ 回调/ 函数/ 中/ 包含/ source/ 要素/ 或/ sink/ 要素/ ,/ 则/ 称/ 该/ 函数/ 为/ 要素/ 函数/ ./ 若/ 其/ 包含/ source/ 要素/ ,/ 称为/ source/ 函数/ ;/ 包含/ sink/ 要素/ ,/ 则/ 称为/ sink/ 函数/ ./ 定义/ 6/ ./ 全/ 要素/ 函数/ ./ 若/ 一个/ 函数/ 中/ 既/ 包含/ source/ 要素/ 又/ 包含/ sink/ 要素/ ,/ 称为/ 全/ 要素/ 函数/ ./ ①/ Report2/ ./ https/ :/ // // github/ ./ com/ // guochenkai88/ // -/ // blob/ // mas/ -/ ter/ // technical/ _/ report2/ ./ pdfPage8/ 下面/ 定义/ 驱动/ 主/ 函数/ 序列/ 生成/ 过程/ 所/ 依据/ 规则/ ./ 规则/ 1/ ./ 若/ 目标/ 代码/ 不/ 具有/ source/ 函数/ 或/ sink/ 函数/ 中/ 的/ 任意/ 一种/ ,/ 则/ 不予/ 生成/ ./ 规则/ 2/ ./ 排序/ 须/ 先/ source/ 函数/ 后/ sink/ 函数/ ./ 规则/ 3/ ./ 目标程序/ 及/ xml/ 文件/ 中/ 所/ 注册/ 的/ 回调/ 函数/ 扩展/ 至/ onResume/ (/ )/ 与/ onPause/ (/ )/ 方法/ 之间/ ./ 规则/ 4/ ./ 对全/ 要素/ 函数/ 连续/ 回调/ 两次/ ,/ 且/ 位于/ onResume/ (/ )/ 方法/ 之后/ 与/ onPause/ (/ )/ 方法/ 之前/ ./ 规则/ 5/ ./ 除/ Android/ 生命周期/ 回调/ 需要/ ,/ 不/ 重复/ 调用/ 任意/ 非全/ 要素/ 回调/ 函数/ ./ 定义/ 7/ ./ 合法/ 序列/ ./ 符合/ 驱动/ 生成/ 规则/ 且/ 成员/ 数量/ 不少/ 于/ 2/ 的/ 函数/ 序列/ ,/ 称为/ 合法/ 序列/ ./ 定理/ 5/ ./ 对/ 任意/ 一条/ 合法/ 序列/ ,/ 具有/ 至少/ 一条/ 包含/ 由/ source/ 要素/ 到/ sink/ 要素/ 的/ 子/ 序列/ ./ 证明/ ./ 分/ 情况/ 讨论/ ./ (/ 1/ )/ 当/ 合法/ 序列/ 中无全/ 要素/ 函数/ 时/ ,/ 由/ 规则/ 1/ 和/ 规则/ 2/ 容易/ 得证/ ./ (/ 2/ )/ 当/ 合法/ 序列/ 中/ 包含/ 全/ 要素/ 函数/ F/ 时/ ,/ 假设/ 其中/ 的/ source/ 要素/ 和/ sink/ 要素/ 分别/ 记为/ k/ (/ src/ )/ 与/ k/ (/ sin/ )/ ,/ 则/ 有/ 以下/ 情形/ :/ (/ a/ )/ k/ (/ src/ )/ 在/ k/ (/ sin/ )/ 之前/ ,/ 此时/ 假设/ F/ 为/ 合法/ 序列/ 中除/ F/ 之外/ 的/ 任一/ 函数/ ,/ 则/ 序列/ [/ F/ ,/ F/ ]/ 即/ 是/ 符合条件/ 的/ 子/ 序列/ ./ (/ b/ )/ k/ (/ src/ )/ 在/ k/ (/ sin/ )/ 之后/ ,/ 此时/ 根据/ 规则/ 4/ ,/ F/ 被/ 调用/ 两次/ ,/ 要素/ 的/ 执行/ 顺序/ 为/ k/ (/ sin/ )/ →/ k/ (/ src/ )/ →/ k/ (/ sin/ )/ →/ k/ (/ src/ )/ ,/ 包含/ k/ (/ src/ )/ →/ k/ (/ sin/ )/ ./ 综上/ ,/ 定理/ 得证/ ./ 定理/ 6/ ./ 除/ Android/ 生命周期/ 执行/ 需要/ ,/ 任意/ 一条/ 合法/ 序列/ 不/ 包含/ 重复/ 的/ 子/ 序列/ ./ 证明/ ./ 利用/ 反证法/ ,/ 不妨/ 假设/ 除/ Android/ 生命周期/ 执行/ 需要/ ,/ 一条/ 合法/ 序列/ 包含/ 两个/ 重复/ 的/ 子/ 序列/ 均/ 为/ [/ F1/ ,/ F2/ ]/ (/ 更/ 多/ 成员/ 的/ 子/ 序列/ 可/ 类推/ )/ ,/ 则/ 由/ 规则/ 5/ ,/ F1/ ,/ F2/ 须/ 均/ 为/ 全/ 要素/ 函数/ ./ 此时/ ,/ 若/ F1/ =/ F2/ ,/ 则/ F1/ 被/ 调用/ 4/ 次/ ,/ 不/ 符合/ 规则/ 4/ ;/ 若/ F1/ ≠/ F2/ ,/ 则/ F1/ 与/ F2/ 均/ 不/ 被/ 连续/ 调用/ ,/ 不/ 符合/ 规则/ 4/ ./ 因此/ 该子/ 序列/ 不/ 存在/ ,/ 定理/ 得证/ ./ 定理/ 5/ 和/ 定理/ 6/ 表明/ 驱动/ 生成/ 规则/ 能够/ 生成/ 包含/ 检测/ 要素/ 的/ 合法/ 序列/ ,/ 且/ 能/ 有效/ 降低/ 重复/ 遍历/ 的/ 开销/ ./ 图/ 2/ 示例/ 代码/ 的/ 组件/ 对象/ 生命周期/ 控制流/ 图如图/ 4/ 所示/ ./ 其中/ ll/ / onLocationChanged/ (/ )/ 函数/ 作为/ 回调/ 函数/ ,/ 发生/ 的/ 时机/ 应该/ 在/ ll/ / onResume/ (/ )/ 函数/ 与/ ll/ / onPause/ (/ )/ 之间/ ,/ 从而/ 图中/ 的/ 所有/ 生命/ 周期函数/ 均/ 可/ 成为/ 该/ 回调/ 函数/ 的/ 后继/ 节点/ ,/ 然而/ 却/ 并非/ 所有/ 函数/ 均/ 可/ 成为/ 其/ 前驱/ 节点/ ,/ 因为/ 图中/ ll/ / onDestroy/ (/ )/ 函数/ 至该/ 回调/ 函数/ 是/ 不可/ 达/ 的/ ./ 函数/ 驱动/ 序列/ 生成/ 过程/ 如/ 算法/ 2/ 所示/ ./ 算法/ 2/ ./ 函数/ 驱动/ 序列/ 生成/ 算法/ ./ 输入/ :/ 待/ 驱动/ 函数/ 集合/ 输出/ :/ 函数/ 驱动/ 序列/ 1/ ./ PROCEDUREDrivenGen/ (/ F/ )/ // // F/ 表示/ 目标/ 应用/ 中/ 的/ 待/ 排/ 函数/ 集合/ 2/ ./ key/ _/ fun/ _/ couple/ =/ getKeyFunctionCouple/ (/ F/ )/ ;/ // // 提取/ F/ 中/ 的/ 要素/ 函数/ 对/ 3/ ./ key/ _/ source/ _/ fun/ =/ key/ _/ fun/ _/ couple/ / source/ ;/ 4/ ./ key/ _/ sink/ _/ fun/ =/ key/ _/ fun/ _/ couple/ / sink/ ;/ 5/ ./ keyPaths/ =/ Paths/ (/ key/ _/ source/ _/ fun/ ,/ key/ _/ sink/ _/ fun/ )/ ;/ // // 提取/ 经过/ source/ 和/ sink/ 的/ 路径/ 集合/ 6/ ./ FOREACH/ (/ pinkeyPaths/ )/ 7/ ./ IF/ (/ Rules/ (/ p/ )/ )/ THEN8/ ./ driven/ _/ list/ =/ p/ ;/ 9/ ./ break/ ;/ 10/ ./ ENDIF11/ ./ ENDFOR12/ ./ returndriven/ _/ list/ ;/ 13/ ./ ENDPROCEDURE/ 算法/ 2/ 用于/ 模拟/ 每/ 对/ 安全/ 要素/ 的/ 生命周期/ 回调/ 函数/ 执行/ 顺序/ ./ 首先/ 由/ 语句/ 2/ ~/ 4/ 通过/ 驱动/ 生成/ 模块/ 扫描/ 所有/ 的/ 安全/ 要素/ 关系/ 对/ ,/ 继而/ 语句/ 5/ 由图/ 4/ 中/ Page9/ 生命周期/ 可/ 达/ 序列/ ,/ 构造/ 可达/ 的/ 安全/ 要素/ 路径/ 序列/ 集合/ ./ 通过/ 语句/ 6/ ~/ 12/ 选择/ 一条/ 符合/ 规则/ 1/ ~/ 5/ 的/ 函数/ 流向/ ,/ 并/ 保存/ 路径/ 节点/ ./ 这样/ 保证/ 了/ 算法/ 2/ 的/ 生成/ 结果/ 中/ ,/ 任意/ source/ 和/ sink/ 要素/ 都/ 具有/ 不/ 多于/ 1/ 条/ 合法/ 序列/ ,/ 避免/ 了/ 重复/ 生成/ 影响/ 运行/ 效率/ ./ 据/ 算法/ 2/ 得出/ 图/ 2/ 示例/ 代码/ 中/ 所/ 生成/ 的/ 主/ 函数/ 驱动/ 序列/ 如图/ 5/ 所示/ ./ 由于/ 源码/ 中/ 没有/ 对/ onStart/ (/ )/ ,/ onPause/ (/ )/ 等/ 函数/ 进行/ 重载/ ,/ 因此/ 在/ 序列/ 生成/ 过程/ 中/ 对/ 上述/ 函数/ 不/ 做/ 考虑/ ./ 5/ 基于/ 泄露/ 场景/ 的/ LTL/ 模型/ 检测/ 模型/ 检测/ 已/ 被/ 证明/ 在/ 验证/ 计算机/ 软硬件/ 系统/ 特别/ 是/ 安全/ 攸关/ 系统/ 的/ 正确性/ 方面/ 具有/ 优势/ [/ 11/ ]/ ./ 它/ 能够/ 遍历/ 系统/ 路径/ 以/ 保证/ 检测/ 的/ 精度/ ,/ 并/ 关注/ 系统/ 的/ 时序/ 状态/ 性质/ 从而/ 对系统/ 做出/ 准确/ 的/ 性质/ 判断/ ./ 5.1/ 迁移/ 系统/ 定义/ 8/ ./ 迁移/ 系统/ [/ 11/ ]/ ./ 一个/ 迁移/ 系统/ 是/ 一个/ Kripke/ 结构/ 的/ 四元组/ K/ =/ (/ S/ ,/ s0/ ,/ T/ ,/ L/ )/ ,/ 其中/ S/ 是/ 有限/ 的/ 状态/ 集合/ ,/ s0/ ∈/ S/ 是/ 初始状态/ ,/ T/ / S/ ×/ S/ 是/ 迁移/ 关系/ 集合/ ,/ L/ :/ S/ →/ 2AP/ 是/ 标记/ 函数/ ,/ AP/ 是/ 原子/ 命题/ 集合/ ./ L/ (/ s/ )/ 表示/ 状态/ s/ 中/ 真值/ 为/ 真的/ 命题/ 集合/ ./ 定义/ 9/ ./ 泄露/ 检测/ 场景/ 系统/ 状态/ ./ 泄露/ 检测/ 场景/ 下/ 的/ 系统/ 状态/ s/ 是/ 一个二元/ 组/ s/ =/ (/ E/ ,/ V/ )/ ,/ 其中/ E/ 是/ 安全/ 要素/ 变量/ 执行/ 次数/ 集合/ ,/ V/ 是/ 变量/ 当前/ 取值/ 集合/ ./ 在/ 泄露/ 检测/ 场景/ 下/ ,/ 对于/ 一个/ 迁移/ 系统/ 而言/ ,/ 系统/ 的/ 状态/ s/ 由/ 安全/ 要素/ 变量/ 执行/ 情况/ 及/ 取值/ 决定/ ,/ 且/ 状态/ 本身/ 根据/ 程序控制/ 流/ 的/ 运行/ 实现/ 相互/ 迁移/ ./ 为了/ 验证/ 泄露/ 场景/ 下定义/ 3/ 中/ 的/ 显式/ 关系/ ,/ 需要/ 处理程序/ 运行/ 过程/ 中/ 的/ 系统/ 状态/ 细节/ ,/ 判断/ 各个/ 状态/ 所/ 存在/ 的/ 时序/ 性质/ ./ 而/ 对于/ 定义/ 4/ 中/ 的/ 隐式/ 关系/ ,/ 仅/ 根据/ 某次/ 执行/ 的/ 结果/ 难以/ 判断/ ,/ 需要/ 设置/ 对比/ 进程/ ./ 为了/ 描述/ 清晰/ ,/ 图/ 6/ 从/ 控制流/ 的/ 角度/ 将/ 图/ 2/ 示例/ 的/ 可/ 规约/ 代码/ 抽象/ 成/ 一个/ 泄露/ 场景/ 可/ 规约/ 迁移/ 系统/ 形式/ ./ 图中/ 显示/ 了/ 状态/ S1/ 至/ S10/ 的/ 状态/ 取值/ 情况/ ./ 可/ 规约/ 迁移/ 系统/ 自/ 起始/ 状态/ 开始/ ,/ 经/ 一般/ 控制流/ 运行/ 进入/ S1/ 状态/ ,/ 在/ S1/ 状态/ 下/ 根据/ longitude/ 状态/ 赋值/ 的/ 不同/ ,/ 选择/ 进入/ 不同/ 的/ 后继/ 状态/ (/ S2/ ,/ S7/ ,/ …/ )/ ,/ 如此/ 形成/ 多/ 对/ 对比/ 进程/ ,/ 这些/ 对比/ 进程/ 在/ 迁移/ 系统/ 中/ 根据/ 已有/ 的/ 状态/ 条件/ 发生/ 不同/ 的/ 流向/ ,/ 从而/ 产生/ 大量/ 的/ 系统/ 路径/ 和/ 状态/ ./ 当/ 进入/ S2/ 后/ ,/ 无论/ latitude/ 取何值/ ,/ 将/ 不会/ 对/ sink1/ 造成/ 影响/ ;/ 而/ 进入/ S7/ 后/ ,/ sink1/ 将会/ 被/ 赋值/ 为/ 指定/ 字符串/ 值/ ./ 对于/ 泄露/ 检测/ 场景/ 下/ 可/ 规约/ 迁移/ 系统/ 的/ 生成/ ,/ 以/ 第/ 4/ 节/ 生成/ 可/ 规约/ 源码/ 为/ 基础/ ,/ 通过/ 运行/ 所/ 生成/ 的/ 可/ 规约/ 代码/ ,/ 监测/ 进程/ 控制流/ 的/ 执行/ 轨迹/ ,/ 获取/ 安全/ 要素/ 执行/ 状态/ ,/ 从而/ 产生/ 系统/ 的/ 状态/ 集合/ ,/ 而/ 状态/ 之间/ 通过/ 控制流/ 变换/ 形成/ 迁移/ ./ 5.2/ LTL/ 时态/ 逻辑/ 属性/ 构造/ 模型/ 检测/ 是/ 基于/ 时态/ 逻辑/ (/ temporallogic/ )/ 进行/ 的/ ,/ 时态/ 逻辑/ 与/ 一般/ 系统/ 性质/ 的/ 区别/ 在于/ ,/ 它/ 所/ 针对/ 的/ 模型/ 是/ 一个/ 动态/ 的/ 迁移/ 系统/ ,/ 因此/ 它/ 可以/ 验证/ 系统/ 在/ 任意/ 运行/ 状态/ 所/ 符合/ 的/ 性质/ 以及/ 状态/ 与/ 状态/ 之间/ 的/ 时序/ 属性/ ./ Page105/ ./ 2.1/ LTL/ 语法结构/ 线性/ 时序/ 逻辑/ LTL/ 是/ 最为/ 流行/ 的/ 模型/ 检测/ 时态/ 逻辑/ 形态/ 之一/ [/ 12/ ]/ ,/ 它/ 允许/ 使用/ 指示/ 未来/ 的/ 连接词/ ,/ 其/ 语法结构/ 如/ 定义/ 10/ 所示/ ./ 定义/ 10/ ./ LTL/ 语法/ [/ 11/ ]/ ./ 线性/ 时态/ 逻辑/ (/ LTL/ )/ 有/ 如下/ BNF/ (/ Backus/ -/ NaurForm/ )/ 范式/ 给出/ 的/ 语法/ :/ / ∷/ =/ ⊥/ |/ (/ X/ / )/ |/ (/ F/ / )/ |/ (/ G/ / )/ |/ (/ / U/ / )/ |/ (/ / W/ / )/ |/ (/ / R/ / )/ ,/ 其中/ :/ p/ 是/ 命题/ 原子/ ,/ 连接词/ X/ ,/ F/ ,/ G/ ,/ U/ ,/ W/ 和/ R/ 称为/ 时态/ 连接词/ ,/ 分别/ 表示/ “/ 下/ 一个/ 状态/ ”/ ,/ “/ 某个/ 未来/ 状态/ ”/ ,/ “/ 所有/ 未来/ 状态/ ”/ ,/ “/ 直到/ ”/ ,/ “/ 释放/ ”/ 和/ “/ 弱/ -/ 直到/ ”/ ./ 5.2/ ./ 2/ 显式/ 泄露/ 属性/ 对于/ 显式/ 泄露/ LTL/ 属性/ 的/ 构造/ 需要/ 满足/ 定义/ 3/ 的/ 要求/ ,/ 无需/ 考虑/ 对比/ 进程/ ,/ 仅/ 需/ 单次/ 执行/ 即可/ 完成/ 检测/ ./ 本文/ 利用/ 值/ 的/ 等量/ 关系/ 来/ 验证/ 定义/ 3/ ,/ 即/ 是/ 通过/ 值/ 的/ 等量/ 关系/ 来/ 验证/ 变量/ 的/ 相等/ 关系/ ./ 显式/ 泄露/ 相应/ 的/ LTL/ 属性/ 设计/ 如下/ :/ LTLSpec/ ∷/ =/ / X/ (/ ∧/ p1/ ∷/ =/ F/ (/ source/ _/ var/ =/ =/ sink/ _/ var/ )/ ;/ p2/ ∷/ =/ F/ (/ source/ _/ fun/ ./ call/ =/ =/ true/ )/ ;/ p3/ ∷/ =/ F/ (/ sink/ _/ fun/ ./ call/ =/ =/ true/ )/ ;/ p4/ ∷/ =/ F/ (/ (/ source/ _/ var/ =/ =/ init/ )/ 其中/ ,/ LTLSpec/ 表示/ 程序/ 无显式/ 泄露/ 情形/ 下/ 的/ 属性/ ,/ 由于/ 描述/ 无/ 泄露/ 情况/ 较为/ 复杂/ ,/ 考虑/ 首先/ 描述/ 定义/ 2/ 中/ 的/ 泄露/ 关系/ 属性/ ,/ 然后/ 取反/ ./ X/ 表明/ 跳过/ 初始状态/ 的/ 不/ 确定/ 影响/ ,/ 实验/ 过程/ 中/ 发现/ 一些/ 程序/ 的/ 初始状态/ 是/ 不/ 确定/ 的/ 永真/ 或永假/ ,/ 即/ 在/ 不加/ X/ 的/ 情况/ 下/ ,/ 可能/ 会/ 出现/ 当/ 之后/ 的/ 条件/ 并未/ 被/ 满足/ 时/ ,/ 其/ 结果/ 也/ 显示/ 满足/ ,/ 因此/ 加上/ X/ 限制/ 从而/ 跳过/ 初始状态/ ,/ 避免/ 上述/ 误报/ 发生/ ./ source/ _/ var/ 与/ sink/ _/ var/ 分别/ 表示/ 某次/ 执行/ 的/ source/ 和/ sink/ 相关/ 变量值/ ,/ 而/ source/ _/ fun/ / call/ 与/ sink/ _/ fun/ / call/ 分别/ 表示/ 某次/ 执行/ 的/ source/ 函数/ 和/ sink/ 函数/ 是否/ 被/ 调用/ ./ p1/ 表明/ 泄露/ 需要/ 在/ 程序运行/ 中/ 的/ 一个/ 状态/ (/ F/ 指示/ )/ 下/ ,/ 出现/ source/ 变量/ 与/ sink/ 变量/ 等值/ ./ p2/ ,/ p3/ 察觉/ 函数/ 是否/ 被/ 调用/ ,/ p4/ 限定/ 了/ source/ 与/ sink/ 的/ 赋值/ 内容/ 和/ 时机/ ./ 显式/ 泄露/ 验证/ 过程/ 中/ 需要/ 考虑/ 以下/ 几种/ 特殊/ 情况/ 的/ 发生/ :/ (/ 1/ )/ source/ 与/ sink/ 变量/ 在/ 均/ 未/ 赋值/ 的/ 情况/ 下/ ,/ 二者/ 值/ 恰好/ 相等/ ./ (/ 2/ )/ source/ 与/ sink/ 要素/ 在/ 运行/ 异常/ 而/ 导致/ source/ 函数/ 或/ sink/ 函数/ 没有/ 被/ 调用/ 的/ 情况/ 下/ ,/ 二者/ 值/ 恰好/ 相等/ ./ (/ 3/ )/ source/ 变量值/ 在/ 不/ 经过/ 数据流/ 情况/ 下/ ,/ 与/ sink/ 变量值/ 恰好/ 相等/ ./ 定理/ 7/ ./ 若/ 一对/ source/ 和/ sink/ 变量/ 在/ 未/ 被/ 赋值/ 的/ 情况/ 下/ 恰好/ 相等/ ,/ 则/ 该/ 对/ 要素/ 变量/ 不/ 满足/ 显式/ 泄露/ 条件/ ./ 证明/ ./ 分/ 情况/ 讨论/ :/ (/ 1/ )/ 当/ source/ 变量/ 未/ 被/ 初始化/ 赋值/ 时/ ,/ 显式/ 泄露/ 属性/ p4/ 条件/ 中/ source/ _/ var/ =/ =/ init/ 将/ 不/ 被/ 满足/ ,/ p4/ 也/ 不/ 被/ 满足/ ./ (/ 2/ )/ 当/ sink/ 变量/ 未/ 被/ 赋值/ 时/ ,/ p4/ 条件/ 中/ sink/ _/ var/ =/ =/ init/ 将/ 不/ 被/ 满足/ ,/ p4/ 也/ 不/ 被/ 满足/ ./ 综上/ ,/ 当/ 一对/ source/ 和/ sink/ 变量/ 在/ 未/ 被/ 赋值/ 时/ 无法/ 满足/ 泄露/ 条件/ ,/ 定理/ 得证/ ./ 定理/ 8/ ./ 在/ 程序运行/ 异常/ 而/ 导致/ source/ 函数/ 或/ sink/ 函数/ 没有/ 被/ 调用/ 的/ 情形/ 下/ ,/ 若/ 一对/ source/ 和/ sink/ 变量/ 的/ 值/ 恰好/ 相等/ ,/ 则/ 该/ 对/ 要素/ 变量/ 不/ 满足/ 显式/ 泄露/ 条件/ ./ 证明/ ./ 分/ 情况/ 讨论/ :/ (/ 1/ )/ 当/ 程序运行/ 异常/ 而/ 导致/ source/ 函数/ 没有/ 被/ 调用/ 时/ ,/ 显式/ 泄露/ 属性/ p2/ 条件/ 中/ source/ _/ fun/ / call/ =/ =/ true/ 将/ 不/ 被/ 满足/ ,/ p2/ 也/ 不/ 被/ 满足/ ./ (/ 2/ )/ 同理/ ,/ 当/ sink/ 函数/ 没有/ 被/ 调用/ 时/ ,/ 显式/ 泄露/ 属性/ p3/ 条件/ 中/ sink/ _/ fun/ / call/ =/ =/ true/ 将/ 不/ 被/ 满足/ ,/ p3/ 也/ 不/ 被/ 满足/ ./ 综上/ ,/ 在/ source/ 函数/ 或/ sink/ 函数/ 没有/ 被/ 调用/ 情形/ 下/ 将/ 无法/ 满足/ 泄露/ 条件/ ,/ 定理/ 得证/ ./ 定理/ 7/ 和/ 定理/ 8/ 表/ 明显/ 式/ 泄露/ 属性/ 可以/ 修正/ (/ 1/ )/ 、/ (/ 2/ )/ ./ 对于/ 条件/ (/ 3/ )/ 而言/ ,/ 由于/ source/ 与/ sink/ 变量/ 的/ 值/ 相等/ ,/ 且/ sink/ 将/ 与/ source/ 相等/ 的/ 值/ 用以/ 传播/ ,/ 即使/ 二者/ 无/ 内在/ 的/ 数据流/ 关联/ ,/ 亦/ 说明/ source/ 实质/ 上/ 发生/ 了/ 泄露/ ./ 5.2/ ./ 3/ 隐式/ 泄露/ 属性/ 对于/ 隐式/ 泄露/ ,/ 仅/ 一次/ 进程/ 执行/ 无法/ 获取/ source/ 与/ sink/ 变量/ 的/ 变化/ 关系/ (/ 如/ 定义/ 4/ )/ ,/ 需要/ 在/ 驱动/ 函数/ 中/ 考虑/ 对比/ 进程/ ./ 隐式/ 泄露/ 相应/ 的/ LTL/ 属性/ 设计/ 如下/ :/ LTLSpec/ ∷/ =/ / X/ (/ ∧/ p1/ ∷/ =/ F/ (/ ∨/ p2/ ∷/ =/ F/ (/ source1/ _/ fun/ ./ call/ =/ =/ true/ )/ ;/ p3/ ∷/ =/ F/ (/ source2/ _/ fun/ ./ call/ =/ =/ true/ )/ ;/ p4/ ∷/ =/ F/ (/ sink1/ _/ fun/ ./ call/ =/ =/ true/ )/ ;/ p5/ ∷/ =/ F/ (/ sink2/ _/ fun/ ./ call/ =/ =/ true/ )/ ;/ Page11p6/ ∷/ =/ F/ (/ (/ source1/ _/ var/ =/ =/ init/ _/ src1/ )/ U/ (/ sink1/ _/ var/ !/ =/ Null/ )/ )/ ;/ p7/ ∷/ =/ F/ (/ (/ source2/ _/ var/ =/ =/ init/ _/ src2/ )/ U/ (/ sink2/ _/ var/ !/ =/ Null/ )/ )/ ./ 隐式/ 泄露/ 所/ 考虑/ 的/ 特殊/ 情况/ 与/ 显式/ 泄露/ 一致/ ,/ 但/ 需/ 不断/ 生成/ 对比/ 进程/ 进行/ 判断/ ,/ 由于/ 对比/ 进程/ 的/ 生成/ 依靠/ source/ 值/ 的/ 更换/ ,/ 由/ 定义/ 4/ 仅/ 需/ 判断/ sink/ 值/ 的/ 等量/ 关系/ 即可/ ,/ 即/ p1/ 所/ 表示/ 的/ 不同/ 的/ 执行/ 中/ sink/ 值/ 的/ 等量/ 关系/ ./ p2/ 至/ p7/ 分别/ 表示/ 与/ 显式/ 泄露/ 对/ 等/ 的/ 细节/ ,/ 上述/ 各/ 属性/ 符号/ 的/ 解释/ 同显式/ 泄露/ ,/ 属性/ 中/ source/ 与/ sink/ 后面/ 的/ 数字/ 表示/ 执行/ 序数/ ./ 定理/ 9/ ./ 若/ 一对/ source/ 和/ sink/ 变量/ 在/ 未/ 被/ 赋值/ 的/ 情况/ 下/ 满足/ 定义/ 4/ ,/ 则/ 该/ 对/ 要素/ 变量/ 不/ 满足/ 隐式/ 泄露/ 条件/ ./ 证明/ ./ 同/ 定理/ 7/ ,/ 一对/ source/ 和/ sink/ 变量/ 在/ 未/ 被/ 赋值/ 的/ 情况/ 下/ 无法/ 满足/ 隐式/ 泄露/ 属性/ 的/ p6/ 或/ p7/ ./ 定理/ 10/ ./ 在/ 程序运行/ 异常/ 而/ 导致/ source/ 函数/ 或/ sink/ 函数/ 没有/ 被/ 调用/ 的/ 情形/ 下/ ,/ 若/ 一对/ source/ 和/ sink/ 变量/ 满足/ 定义/ 4/ ,/ 则/ 该/ 对/ 要素/ 变量/ 不/ 满足/ 隐式/ 泄露/ 条件/ ./ 证明/ ./ 同/ 定理/ 8/ ,/ 一对/ source/ 和/ sink/ 变量/ 在/ 程序运行/ 异常/ 而/ 导致/ source/ 函数/ 或/ sink/ 函数/ 没有/ 被/ 调用/ 的/ 情形/ 下/ 无法/ 满足/ 隐式/ 泄露/ 属性/ p2/ 至/ p5/ 的/ 其中/ 之一/ ./ 定理/ 9/ 和/ 定理/ 10/ 表明/ 隐式/ 泄露/ 属性/ 可以/ 防止/ 赋值/ 和/ 程序/ 异常/ 方面/ 导致/ 的/ 误报/ ./ 5.3/ 安全/ 要素/ LTL/ 验证/ 算法/ 检测/ 工作/ 的/ 关键在于/ 对模型/ 进行/ 属性/ 验证/ ,/ 而/ 在/ 实际/ 中/ 一个/ 目标/ 系统/ 往往/ 存在/ 多个/ source/ 或/ sink/ 要素/ ,/ 如果/ 循环/ 对比/ 每/ 一个/ 安全/ 要素/ 对/ ,/ 则/ 会/ 对/ 同/ 一条/ 路径/ 生成/ 多次/ 驱动/ 函数/ ,/ 造成/ 额外/ 的/ 效率/ 开支/ ./ 算法/ 3/ 用于/ 处理/ 多重/ 要素/ 的/ LTL/ 属性/ 验证/ ,/ 使得/ 每个/ source/ 与其/ 所有/ 后继/ sink/ 要素/ 都/ 可以/ 得到/ 验证/ ,/ 且/ 无/ 重复/ 验证/ 并/ 减少/ 驱动/ 的/ 生成/ 次数/ ./ 算法/ 3/ ./ 多重/ 安全/ 要素/ LTL/ 验证/ 算法/ ./ 输入/ :/ 待测/ 的/ 可/ 规约/ 系统/ 源码/ 输出/ :/ 结果/ 列表/ ResultList1/ ./ PROCEDURELeakDetect/ (/ RA/ )/ 2/ ./ FOREACH/ (/ 〈/ source/ ,/ sink/ 〉/ !/ =/ =/ NULL/ )/ 3/ ./ IF/ (/ !/ 〈/ source/ ,/ sink/ 〉/ ./ visited/ )/ THEN4/ ./ drvn/ _/ list/ =/ geneDriven/ (/ 〈/ source/ ,/ sink/ 〉/ )/ // // 为/ 要素/ 对/ 生成/ 驱动/ 5/ ./ visitedEachSS/ (/ drvn/ _/ list/ )/ ;/ // // 将/ 驱动/ 要素/ 节点/ 设置/ 访问/ 并/ 将/ 要素/ 指向/ 该/ 驱动/ 6/ ./ ENDIF7/ ./ IF/ (/ 〈/ source/ ,/ sink/ 〉/ ./ drvn/ _/ list/ !/ =/ NULL/ )/ THEN8/ ./ source/ _/ base/ =/ init/ ;/ D/ =/ input/ _/ init/ ;/ 9/ ./ ltl/ _/ buchi/ =/ ltl/ ./ convert2Buchi/ (/ )/ ;/ // // 将/ LTL/ 属性/ 转变/ 为/ Buchi10/ ./ proc/ _/ base/ =/ genePro/ (/ source/ _/ base/ ,/ drvn/ _/ list/ )/ ;/ // // 生成/ 基准/ 进程/ 11/ ./ WHILE/ (/ !/ traversedIsEnd/ )/ DO12/ ./ source/ _/ peer/ =/ random/ (/ D/ )/ ;/ 13/ ./ proc/ _/ peer/ =/ genePro/ (/ source/ _/ peer/ ,/ drvn/ _/ list/ )/ ;/ // // 生成/ 并/ 初始化/ 对比/ 进程/ 14.15/ ./ new/ _/ state/ =/ catchCurrentState/ (/ )/ ;/ 16/ ./ curModel/ =/ createModel/ (/ new/ _/ state/ )/ ;/ // // 在/ 状态/ 集上/ 生成/ 模型/ 17/ ./ ltl/ ./ violated/ =/ curModel/ ./ inter/ (/ ltl/ _/ buchi/ )/ ;/ // // 模型/ 与/ 属性/ 做交/ 运算/ 18/ ./ IF/ (/ ltl/ ./ violated/ )/ THEN19/ ./ resultList/ ./ setLeakFlag/ (/ )/ ;/ 20/ ./ resultList/ ./ leakpos/ ./ add/ (/ violated/ ./ pos/ )/ ;/ // // 添加/ 属性/ 违反/ 的/ sink/ 位置/ 信息/ 21/ ./ break/ ;/ 22/ ./ ENDIF23/ ./ proc/ _/ peer/ ./ nextState/ (/ )/ ;/ 24/ ./ ENDWHILE25/ ./ D/ ./ delete/ (/ source/ _/ peer/ )/ ;/ 26.27/ ./ ENDWHILE28/ ./ ENDIF29/ ./ ENDFOR30/ ./ returnresultList/ ;/ 31/ ./ ENDPROCEDURE/ 以/ 验证/ 图/ 3/ 可/ 规约/ 代码/ 的/ 隐式/ 属性/ 为例/ ,/ 对于/ 目标/ 系统/ 中/ 可能/ 存在/ 多/ 对/ 安全/ 要素/ 问题/ ,/ 通过/ 分析/ source/ 要素/ 特点/ ,/ 其/ 两/ 两/ 之间/ 是/ 相互/ 独立/ 的/ ,/ 算法/ 首先/ 利用/ 语句/ 2/ 定位/ 到/ 每/ 一对/ 〈/ source/ ,/ sink/ 〉/ ,/ 即/ 〈/ longitude/ ,/ sink1/ 〉/ ,/ 〈/ longitude/ ,/ sink2/ 〉/ ,/ 〈/ altitude/ ,/ sink1/ 〉/ ,/ 〈/ altitude/ ,/ sink2/ 〉/ ,/ 再/ 通过/ 语句/ 3/ ~/ 5/ 为/ 每/ 一对/ 〈/ source/ ,/ sink/ 〉/ 生成/ 唯一/ 的/ 合法/ 驱动/ ,/ 为了/ 避免/ 重复/ 的/ 驱动/ 生成/ ,/ 为/ 驱动/ 的/ 每/ 一个/ 安全/ 要素/ 对/ 添加/ 一个/ 访问/ 标记/ ,/ 当/ 驱动/ 运行/ 后/ 设置/ 其所/ 包含/ 的/ 所有/ 〈/ source/ ,/ sink/ 〉/ 访问/ 标记/ ,/ 并/ 将/ 要素/ 对/ 指向/ 该/ 驱动/ ./ 这样/ 实际上/ 图/ 3/ 中/ 所有/ 的/ 要素/ 对/ 均/ 指向/ [/ onCreate/ (/ Bundle/ )/ →/ MyLocationListener/ / onLocationChanged/ (/ Location/ )/ →/ onResume/ (/ )/ ]/ 这/ 一条/ 驱动/ 序列/ ./ 继而/ 对于/ 每/ 一对/ 安全/ 要素/ 对/ ,/ 验证/ 其/ 可/ 规约/ 代码/ 的/ 显式/ 和/ 隐式/ 属性/ ,/ 在/ 此/ 主要/ 描述/ 隐式/ 属性/ 的/ 验证/ ,/ 显式/ 验证/ 无需/ 生成/ 对/ Page12/ 比/ 进程/ ,/ 其他/ 同理/ ./ 以/ 〈/ longitude/ ,/ sink1/ 〉/ 为例/ ,/ 当/ 基准/ 进程/ 的/ 初始化/ 取值/ 为/ 100/ ,/ 对比/ 进程/ 的/ 初始化/ 取值/ 为/ 120/ 时/ ,/ 由/ 5.2/ ./ 3/ 节其/ 隐式/ 属性/ 生成/ 如下/ :/ LTLSpec/ ∷/ =/ / X/ (/ ∧/ p1/ ∷/ =/ F/ (/ sink1/ !/ =/ sink1/ )/ ;/ p2/ ∷/ =/ F/ (/ MyLocationListener/ / onLocationChanged/ =/ =/ true/ )/ ;/ p3/ ∷/ =/ F/ (/ MyLocationListener/ / onLocationChanged/ =/ =/ true/ )/ ;/ p4/ ∷/ =/ F/ (/ onResume/ =/ =/ true/ )/ ;/ p5/ ∷/ =/ F/ (/ onResume/ =/ =/ true/ )/ ;/ p6/ ∷/ =/ F/ (/ (/ longitude/ =/ =/ 100/ )/ U/ (/ sink1/ !/ =/ Null/ )/ )/ ;/ p7/ ∷/ =/ F/ (/ (/ longitude/ =/ =/ 120/ )/ U/ (/ sink1/ !/ =/ Null/ )/ )/ ./ 由于/ 验证/ 隐式/ 属性/ 需要/ 通过/ 运行/ 不同/ 进程/ 比较/ sink/ 结果/ ,/ 因而/ 语句/ 8/ ,/ 10/ 和/ 语句/ 12/ ,/ 13/ 分别/ 通过/ 对/ longitude/ 进行/ 不同/ 的/ 初始化/ 取值/ 从而/ 生成/ 基准/ 和/ 对比/ 进程/ ./ 对于/ LTL/ 属性/ 的/ 处理/ ,/ 利用/ 传统/ 的/ buchi/ 自动机/ 转化/ 算法/ (/ 语句/ 9/ )/ ,/ 与/ 目标/ 状态/ 模型/ 做交/ 运算/ (/ 语句/ 15/ ~/ 17/ )/ ,/ 根据/ 交/ 运算/ 的/ 结果/ 判断/ 属性/ 是否/ 违反/ 从而/ 给出/ 结果/ (/ 语句/ 19/ ~/ 20/ )/ ,/ 对于/ 图/ 3/ 的/ 示例/ ,/ 当/ 基准/ 进程/ 的/ 初始化/ 取值/ 为/ 100/ ,/ 对比/ 进程/ 的/ 初始化/ 取值/ 为/ 120/ 时/ ,/ 符合/ 隐式/ 泄露/ 属性/ ,/ 继而/ 停止/ 循环/ ,/ 报告/ 隐式/ 泄露/ ./ 算法/ 中/ ,/ 由于/ 语句/ 8/ 中/ 的/ source/ 的/ 定义域/ D/ 可以/ 通过/ 人工/ 制定/ 阈值/ 限界/ 从而/ 得到/ 有效/ 控制/ ,/ 加之/ 模型/ 检测工具/ 中/ 利用/ 偏序/ 规约/ 、/ 抽象/ 等/ 方法/ 进行/ 路径/ 约/ 减/ ,/ 整体/ 的/ 遍历/ 过程/ 将/ 得到/ 有效/ 缩减/ ./ 5.4/ 基于/ 符号执行/ 的/ 算法/ 优化/ 算法/ 3/ 由/ 语句/ 8/ 用户/ 自定义/ 阈值/ 后/ 通过/ 语句/ 12/ 在/ 阈值/ 范围/ 内取/ 随机/ 量/ ,/ 以此/ 对/ 遍历/ 定义域/ 做/ 了/ 阈值/ 限制/ ./ 然而/ 在/ 实际/ 应用/ 中/ 可能/ 由于/ sink/ 要素/ 所在/ 路径/ 条件/ 超出/ 阈值/ 而/ 造成/ 漏报/ ,/ 同时/ 如果/ 定义域/ 阈值/ 设置/ 过大/ ,/ 则/ 时间/ 开销/ 将/ 随之/ 增加/ ,/ 本文/ 利用/ 符号执行/ 技术/ 作为/ 辅助/ 的/ 优化/ 方法/ 来/ 解决/ 上述/ 问题/ ./ 隐式/ 泄露/ 的/ 真正/ 信息/ 由/ source/ 数据/ 本身/ 转化/ 为/ sink/ 要素/ 的/ 参数/ ,/ 该/ 转化/ 过程/ 主要/ 基于/ 三种/ 途径/ :/ 类/ 函数/ 、/ 分支/ 语句/ 以及/ 二者/ 的/ 结合/ ./ 对于/ 不带/ 分支/ 语句/ 的/ 类/ 函数/ ,/ 其/ sink/ 变量/ 根据/ source/ 变量/ 的/ 值/ 而/ 变化/ ,/ 该/ 情况/ (/ 如图/ 1/ (/ c/ )/ )/ 利用/ 小/ 范围/ 的/ source/ 阈值/ 遍历/ 可/ 顺利/ 检测/ ;/ 相对/ 于类/ 函数/ ,/ 分支/ 语句/ 内部/ 的/ source/ 变换/ 往往/ 基于/ 分支/ 条件/ ,/ 需要/ 掌握/ 路径/ 中/ 的/ 条件/ 分界/ ,/ 否则/ 无法/ 高效/ 地/ 遍历/ 分支/ ./ 基于/ 此/ ,/ 利用/ 现有/ 的/ 符号执行/ [/ 13/ -/ 15/ ]/ 技术/ 首先/ 得到/ 关于/ source/ 到/ sink/ 的/ 路径/ 条件/ 集合/ ,/ 再/ 通过/ 约束/ 求解/ 得到/ 合适/ 的/ 测试/ 条件/ 域/ ,/ 从而/ 使得/ source/ 变量/ 可以/ 根据/ 条件/ 域/ 精准/ 赋值/ ,/ 提高/ 检测/ 效率/ ./ 6/ 实验/ 分析/ 6.1/ 实验/ 环境/ 及/ 工作/ 流程/ 本文/ 实验/ 环境/ 为/ Windows7/ 操作系统/ ,/ 内存/ 为/ 4GB/ ,/ CPU/ 为/ IntelCore/ (/ TM/ )/ i3/ -/ 2120/ @/ 3.30/ GHz/ ./ 为了/ 验证/ 文中/ 算法/ 在/ 检测/ Android/ 应用软件/ 信息/ 泄露/ 方面/ 的/ 有效性/ ,/ 本文/ 设计/ 并/ 实现/ 了/ 一个/ 基于/ LTL/ 模型/ 检测/ 的/ 移动/ 应用/ 信息/ 泄露/ 检测/ 原型/ 工具/ LFDroid/ ./ 开发工具/ 基于/ MyEclipse9/ ./ 0/ ,/ JDK1/ ./ 6/ ,/ apk/ 反编译/ 工具/ apktool/ ①/ 、/ dex2jar/ ②/ 以及/ 作为/ 支撑/ 环境/ 的/ JPF/ (/ JavaPathFinder/ )/ [/ 16/ ]/ 系列/ 工具/ ,/ 包括/ JPF/ -/ CORE/ ,/ JPF/ -/ SE/ ,/ JPF/ -/ LTL/ ./ JPF/ 是/ 一款/ 被/ 广泛/ 使用/ 的/ 针对/ JAVA/ 语言/ 的/ 模型/ 检测/ 平台/ ,/ 它/ 构建/ 了/ 独立/ 的/ JAVA/ 字节/ 码/ 虚拟机/ ,/ 并/ 使用/ 了/ 偏序/ 规约/ 来/ 抑制/ 状态/ 爆炸/ 问题/ ,/ 同时/ 具备/ 很强/ 的/ 扩展性/ ./ 其中/ ,/ JPF/ -/ CORE/ 是/ JPF/ 平台/ 的/ 核心/ 引擎/ ,/ JPF/ -/ SE/ [/ 17/ ]/ 是/ JPF/ 的/ 一种/ 关于/ 符号执行/ 的/ 扩展/ 工具/ ,/ 它/ 利用/ JPF/ 生成/ 符号/ 状态/ ,/ 并/ 使用/ 了/ 多种/ 约束/ 求解/ 技术/ (/ Omegalibrary/ ,/ CVC/ -/ Lite/ ,/ YICES/ 等/ )/ 来/ 求解/ 条件/ 数据/ ,/ 已/ 被/ 用于/ 多种/ 并行/ 的/ Java/ 程序/ 测试用例/ 生成/ ./ 同样/ 作为/ JPF/ 的/ 扩展/ ,/ JPF/ -/ LTL/ ③/ 用于/ 验证/ JAVA/ 程序/ 的/ 时序/ 属性/ ,/ 支持/ 方法/ 调用/ 和/ 变量/ 属性/ 的/ 验证/ ./ 选择/ JPF/ 系列/ 工具/ 作为/ 系统/ 支撑/ 工具/ 的/ 理由/ 在于/ 它们/ 能够/ 有效/ 处理/ JAVA/ 语言/ 的/ 模型/ 检测/ 任务/ ./ 由于/ Android/ 应用/ 的/ 开发/ 语言/ 是/ 基于/ JAVA/ 语言/ 的/ ,/ 因此/ JPF/ 相较/ 于/ 其他/ 模型/ 检测工具/ 在/ Android/ 程序/ 应用/ 上/ 更具/ 优势/ ./ LFDroid/ 的/ 工作/ 流程/ 大致/ 包括/ 以下/ 步骤/ :/ (/ 1/ )/ 调用/ 工具/ 反编译/ 待测/ 的/ Android/ 应用/ apk/ 文件/ ,/ 解析/ 其中/ 的/ manifest/ / xml/ 清单/ 文件/ (/ 用于/ 组件/ 注册/ 、/ 隐式/ Intents/ 分析/ )/ 、/ layout/ / xml/ 文件/ (/ 用于/ 事件/ 回调/ 分析/ )/ 以及/ src/ 源代码/ ;/ (/ 2/ )/ 通过/ 安全/ 要素/ 和/ 驱动/ 序列/ 生成/ 规则/ 及/ 算法/ ,/ 在/ 源码/ 的/ 基础/ 上/ 生成/ 可/ 规约/ 代码/ ;/ (/ 3/ )/ 根据/ 检测/ 需求/ 生成/ 对应/ 的/ 显式/ 泄露/ 和/ 隐式/ 泄露/ LTL/ 属性/ ;/ (/ 4/ )/ 调用/ JPF/ -/ LTL/ 实施/ 模型/ 检测/ ,/ 优先/ 实施/ 显式/ 泄露/ 检测/ ,/ 再/ 执行/ 隐式/ 检测/ ;/ (/ 5/ )/ 当/ 检测/ 失效/ 或/ 无/ 泄露/ 时/ ,/ 调用/ 符号执行/ 重新/ 规划/ 初始值/ ,/ 继而/ 执行/ 二次/ 隐式/ 检测/ (/ 若/ 符号执行/ 失败/ 则/ 作为/ 无/ 漏洞/ ①/ ②/ ③/ Page13/ 处理/ )/ ;/ (/ 6/ )/ 记录/ 运行/ 时间/ 及/ 检测/ 结果/ ,/ 生成/ 检测/ 报告/ ./ 图/ 7/ 展示/ 了/ LFDroid/ 的/ 工作/ 流程/ ./ 6.2/ 模拟/ 库/ 搭建/ 使用/ JPF/ 来/ 检测/ Android/ 应用程序/ 的/ 安全性/ 泄露/ 问题/ ,/ 面临/ 的/ 挑战/ 之一/ 是/ 如何/ 让/ 运行/ 于/ DVM/ (/ DalvikVirtualMachine/ )/ 的/ Android/ 程序/ 在/ JVM/ (/ JavaVirtualMachine/ )/ 上/ 运行/ ./ 为了/ 应对/ 这一/ 挑战/ ,/ 本文/ 首先/ 尝试/ 引入/ Robolectric/ ①/ 的/ 影子/ 库/ 实现/ Android/ 的/ 库类/ ,/ 从而/ 消除/ 异构/ 虚拟机/ 上/ 的/ 不/ 兼容性/ ,/ 然而/ ,/ 由于/ Robolectric/ 库/ 和/ 的/ android/ ./ jar/ 之间/ 诸多/ 复杂/ 的/ 不相容性/ 难以解决/ ,/ 上述/ 方法/ 被/ 证明/ 不/ 可行/ ./ 于是/ 本文/ 采取/ 利用/ 建立/ 局部/ 的/ 模拟/ 库/ 替代/ Android/ 库/ 的/ 方法/ ,/ 设计/ 了/ 相应/ 自定义/ 功能/ 模型/ 和/ 模拟/ 类/ ,/ 利用/ 这些/ 自定义/ 代码/ ,/ 可以/ 模拟/ 源码/ 函数/ 的/ 返回值/ ,/ 参数/ 类型/ ,/ 以及/ 对象/ 和/ 函数/ 的/ 调用/ 逻辑/ ./ 使用/ 这些/ 内置/ 方法/ 和/ 类/ ,/ Android/ 应用程序/ 可以/ 顺利/ 被/ 编译成/ JVM/ 字节/ 码/ ./ 由于/ Android/ 模拟/ 库/ 的/ 构建/ 不是/ 本文/ 方法/ 关键/ 部分/ ,/ 因此/ 现阶段/ 我们/ 只/ 针对/ 目标/ 源码/ 开发/ 了/ 功能/ 较为/ 基本/ 的/ 模拟/ 类库/ 以及/ 在/ 目标/ 应用/ 中/ 所/ 出现/ 的/ 特定/ 类/ 方法/ ./ 在/ 开发/ 过程/ 中/ ,/ 对于/ 简单/ 功能/ 的/ 方法/ 直接/ 返回/ 随机/ 值/ ,/ 而/ 不必/ 运行/ 其/ 内部/ 逻辑/ ,/ 当/ 涉及/ ICC/ 机制/ 等/ 复杂/ 数据类型/ 时/ ,/ 模拟/ 类/ 实现/ 了/ 将源/ 方法/ 给定/ 的/ 参数传递/ 给/ 目的/ 函数/ ,/ 而/ 对于/ GUI/ 功能/ ,/ 其/ 对应/ 方法/ 所/ 需/ 接收/ 的/ 值/ 被/ 指向/ 配置文件/ ./ 表/ 2/ 列举/ 了/ 部分/ 已/ 实现/ 的/ 模拟/ 库/ 方法/ ./ 事件/ LifecycleGUIICC6/ ./ 3/ 实验/ 评价/ 方法/ 本文/ 实验/ 采用/ 的/ 数据/ 集/ 为/ :/ (/ 1/ )/ DroidBench1/ ./ 2/ ./ 该/ 数据/ 集/ 包含/ 60/ 个/ 开源/ 的/ Android/ 应用/ ,/ 设计者/ 通过/ 人工/ 为/ 其/ 注入/ 了/ 52/ 个/ 信息/ 泄露/ 漏洞/ ,/ 这些/ 漏洞/ 所/ 分布/ 的/ 数量/ 和/ 位置/ 是/ 已知/ 的/ ,/ 且/ 还/ 包含/ 一些/ 误报/ 陷阱/ ,/ 它/ 为/ 泄露/ 检测/ 工作/ 制造/ 了/ 多种/ 挑战/ ,/ 包括/ 数组/ 与/ 列表/ 的/ 下标/ 混淆/ ,/ 进程/ 通信/ 组件/ ICC/ (/ Inter/ -/ ComponentCommunication/ )/ 、/ 代码/ 混淆/ 、/ 反射/ 以及/ 隐式/ 泄露/ 等/ ./ 当前/ ,/ 该/ 数据/ 集已/ 成为/ Android/ 信息/ 泄露/ 检测/ 公认/ 数据/ 集/ ,/ 且/ 围绕/ 该/ 数据/ 集已/ 进行/ 了/ 多项/ 高水平/ 研究/ [/ 2/ -/ 6/ ]/ ./ (/ 2/ )/ ICC/ -/ Bench/ ②/ ./ ICC/ -/ Bench/ 数据/ 集是/ 由/ Aman/ -/ droid/ [/ 18/ ]/ 工具/ 所/ 引入/ 的/ 另一类/ Android/ 信息/ 泄露/ 数据/ 集/ ,/ 现阶段/ 已有/ 多项/ 泄露/ 检测/ 研究/ 工作/ 基于/ 该/ 数据/ 集/ [/ 18/ -/ 20/ ]/ ./ 它/ 包含/ 16/ 个/ 开源/ 并/ 已知/ 漏洞/ 的/ 应用/ ,/ 其中/ 的/ 10/ 个/ 为/ 隐式/ Intents/ ,/ 5/ 个/ 为/ 显式/ Intents/ ,/ 1/ 个/ 为/ 动态/ 注册/ 组件/ ./ 由于/ 该/ 数据/ 集/ 主要/ 针对/ 组件/ 间通信/ 泄露/ 的/ 检测/ ,/ 为了/ 增加/ 隐式/ 泄露/ 的/ 成分/ ,/ 人工/ 植入/ 了/ 20/ 个/ 隐式/ 泄露/ 漏洞/ ./ 考虑/ 到/ 实验/ 公平性/ ,/ 该组/ 数据/ 集/ 的/ 植入/ 方式/ 按照/ DroidBench/ 中/ Implicit/ 的/ 漏洞/ 逻辑/ 而/ 并非/ 自身/ 设计/ ,/ 目的/ 是/ 为了/ 检验/ 本文/ 算法/ 在/ 检测/ 组件/ 间通信/ 方面/ 的/ 准确性/ ./ 实验/ 对比/ 工具/ 及/ 方法/ 如下/ :/ (/ 1/ )/ FlowDroid/ ./ FlowDroid/ 是/ 一款/ 针对/ Android/ 应用/ 的/ 静态/ 污点/ 分析/ 工具/ ,/ 为了/ 提高/ 检测/ 精度/ ,/ 它/ 保持/ 了/ 对/ 上下文/ 、/ 数据流/ 、/ 对象/ 等/ 敏感/ ,/ 并/ 对/ Android/ 生命周期/ 进行/ 了/ 完备/ 的/ 建模/ ;/ (/ 2/ )/ Amandroid/ [/ 18/ ]/ ./ Amandroid/ 是/ 一款/ 先进/ 的/ 致力于/ 组件/ 间通信/ 泄露/ 检测/ 的/ 静态/ 分析/ 工具/ ,/ ①/ ②/ Page14/ 它/ 依靠/ 复杂/ 的/ 数据流/ 分析/ 预测/ 泄露/ 的/ 发生/ ./ 6.4/ 实验/ 结果/ 与/ 分析/ 6.4/ ./ 1/ 检测/ 结果/ 说明/ 在/ DroidBench/ 与/ ICC/ -/ Bench/ 上/ 的/ 对比/ 实验/ 结果/ 分别/ 如表/ 3/ 和表/ 4/ 所示/ ,/ 其中/ “/ LOC/ ”/ 表示/ 程序/ 规表/ 3DroidBench/ 数据/ 集/ 对比/ 实验/ 结果/ Android/ 应用/ DirectLeakInactiveActivityLibrary1/ &/ 2LogNoLeakObfuscation1PrivateDataLeak1/ ~/ 3366/ &/ 261/ &/ 339ArrayAccess1/ &/ 2HashMapAccess1ListAccess1AnnonymousClass1Button1/ ~/ 3LocationLeak1/ ~/ 3MethodOverride1MultiHandlers1Ordering1Unregister10/ ./ 088/ &/ 0.224/ &/ 0.095/ ./ 52/ &/ 6.310/ ./ 112/ &/ 6.39/ &/ 0.15610/ ./ 19/ &/ 11.21/ &/ 0.22/ FieldSensitivity1/ ~/ 4288/ &/ 280/ &/ 279/ &/ 26754/ &/ 54/ &/ 4/ &/ 546.29/ &/ 4.4/ &/ 0.08/ &/ 5.86/ InheritedObjects1ObjectSensitivity1/ &/ 24.33/ &/ 9.82/ Exceptions1/ ~/ 4301/ &/ 303/ &/ 303/ &/ 3004/ &/ 4/ &/ 54/ &/ 40.087/ &/ 0.081/ &/ 4.88/ &/ 0.0810/ ./ 139/ &/ 0.125/ Loop1/ &/ 2SourceCodeSpecific1StaticInitialization1UnreachableCodeImplicitFlow1ImplicitFlow2ImplicitFlow3ImplicitFlow4CommunicationIntentSink1/ &/ 2ActivityLife1/ ~/ 4282/ &/ 271/ &/ 266/ &/ 2694/ &/ 4/ &/ 4/ &/ 40.094/ &/ 0.105/ &/ 0.099/ &/ 0.097/ 生命周期/ 事件/ 4/ // 404/ // 404/ // 400.084/ &/ 0.82/ ApplicationLife1/ ~/ 3303/ &/ 312/ &/ 3860.12/ &/ 0.103/ &/ 0.137/ BroadcastLifecycle1SeviceLifecycle1Reflection1/ ~/ 4339/ &/ 344/ &/ 360/ &/ 3504/ &/ 54/ &/ 54/ &/ 540.122/ &/ 5.23/ &/ 6.39/ &/ 5.85/ Total/ 从/ 结果/ 中/ 可以/ 看到/ ,/ LFDroid/ 可以/ 检测/ 出/ Droid/ -/ Bench/ 数据/ 集中/ 用例/ ImplicitFlow1/ ~/ 4/ 的/ 8/ 个/ 隐式/ 漏洞/ 以及/ ICC/ -/ Bench/ 数据/ 集中/ 所/ 植入/ 的/ 20/ 个/ 隐式/ 漏洞/ 中/ 的/ 16/ 个/ ,/ 总体/ 对/ 隐式/ 漏洞/ 的/ 检测/ 召回/ 率/ 达到/ 87.5/ %/ ,/ 而/ FlowDroid/ 和/ Amandroid/ 却/ 不/ 支持/ 隐式/ 漏洞/ 的/ 检测/ ./ 另外/ 在/ 误报/ 方面/ ,/ LFDroid/ 总共/ 发生/ 了/ 5/ 次/ 误报/ ,/ 明显/ 优于/ FlowDroid/ 的/ 21/ 次/ 和/ Amandroid/ 的/ 10/ 次/ ./ 然而/ 也/ 仍/ 需/ 看到/ LFDroid/ 仍然/ 存在/ 一些/ 漏报/ 和/ 误报/ ,/ 具体分析/ 这些/ 错误/ 的/ 原因/ 如下/ :/ 模/ 的/ 统计/ 包括/ 了/ 源码/ 中/ 的/ java/ ,/ xml/ ,/ txt/ 格式文件/ ,/ “/ #/ S/ ”/ 表示/ 模型/ 状态/ 数量/ ,/ “/ MT/ ”/ 表示/ 方法/ 在/ 模型/ 检测/ 阶段/ 的/ 用/ 时/ ,/ 而/ 对比/ 结果/ 中/ 的/ “/ TP/ ”/ 表示/ 正确/ 检出/ 的/ 漏洞/ 数/ ,/ “/ FP/ ”/ 表示/ 错误/ 检出/ 的/ 漏洞/ 数/ ,/ 表/ 4/ 中/ “/ #/ IN/ ”/ 为/ 植入/ 的/ 隐式/ 漏洞/ 数量/ ./ MT/ (/ sec/ )/ 0.0720/ ./ 0881.300/ ./ 0915.725/ ./ 5500.08700/ ./ 2550.090/ ./ 0820.11/ -/ -/ 5.550/ ./ 49210.2113/ ./ 3923.630/ ./ 1020.1150/ ./ 1161.05/ 对于/ DroidBench/ 而言/ :/ (/ 1/ )/ 在/ 对/ 用例/ IntentSink1/ 的/ 分析/ 过程/ 中/ ,/ 没有/ 将/ setResult/ 函数/ 当作/ sink/ 要素/ ,/ 从而/ 发生/ 漏报/ ;/ (/ 2/ )/ 由于/ JPF/ -/ LTL/ 暂/ 不/ 支持/ 静态/ 初始化/ ,/ 因此/ 检测/ StaticInitialization1/ 用例/ 时/ 发生/ 了/ 漏报/ ;/ (/ 3/ )/ 由于/ JPF/ 暂时/ 不/ 支持/ 反射/ 机制/ 的/ 原因/ ,/ 使得/ 用例/ Reflection2/ ~/ 4/ 发生/ 了/ 漏报/ ./ 而/ 对于/ 用例/ Reflection1/ ,/ LFDroid/ 直接/ 将/ 反射/ 对象/ 当作/ 一般/ 对象/ 处理/ ,/ 因而/ 能够/ 顺利/ 检测/ ;/ (/ 4/ )/ 用例/ Ordering1/ 因为/ 没有/ 准确/ 驱动/ 生命周期/ 顺序/ ,/ 而/ 造成/ 误报/ ;/ (/ 5/ )/ 用例/ Unregister1/ 因为/ 没有/ 准确/ 处理/ 未注册/ 的/ 回/ Page15/ 调/ 函数/ ,/ 而/ 造成/ 误报/ ;/ (/ 6/ )/ 用例/ AnnonymousClass1/ 与/ MultiHandlers1/ 在/ 建模/ 过程/ 中/ 没有/ 仔细/ 处理/ LocationListener/ 中/ 的/ 源/ 入口/ 函数/ ,/ 从而/ 发生/ 漏报/ ./ 对于/ ICC/ -/ Bench/ (/ modified/ )/ 而言/ :/ (/ 1/ )/ 对于/ 用例/ ICC/ _/ Implicit/ _/ Data2/ _/ Imp/ ,/ LFDroid/ 对/ Intent/ ./ setType/ 未/ 做/ 处理/ ,/ 因此/ 造成/ FooActivity/ 未/ 接收/ 到/ Intent/ ,/ 产生/ 漏报/ ,/ 相应/ 的/ 隐式/ 泄露/ 也/ 被/ 漏报/ ;/ (/ 2/ )/ 对于/ 用例/ ICC/ _/ Implicit/ _/ Mix1/ _/ Imp/ 和/ ICC/ _/ Implicit/ _/ Mix2/ _/ Imp/ ,/ LFDroid/ 系统/ 对于/ Intent/ ./ setDataAndType/ 未/ 做/ 处理/ ,/ 因此/ 导致/ FooActivity/ 与/ HookActivity/ 均/ 未/ 接收/ 到/ Intent/ ,/ 产生/ 3/ 个/ 漏报/ ,/ 相应/ 的/ 隐式/ 泄露/ 也/ 被/ 漏报/ ;/ (/ 3/ )/ 对于/ 用例/ ICC/ _/ Explicit/ _/ Src/ _/ NoSink/ _/ 表/ 4/ 植入/ 后/ ICC/ -/ Bench/ 数据/ 集/ 对比/ 实验/ 结果/ Android/ 应用/ ICC/ _/ Exp/ _/ IICC/ _/ Imp/ _/ Action/ _/ IICC/ _/ Imp/ _/ Category/ _/ IICC/ _/ Imp/ _/ Data1/ _/ IICC/ _/ Imp/ _/ Data2/ _/ IICC/ _/ Imp/ _/ Mix1/ _/ IICC/ _/ Imp/ _/ Mix2/ _/ IICC/ _/ DynRegRec1/ _/ IICC/ _/ Exp/ _/ NoSrc/ _/ NoSink217ICC/ _/ Exp/ _/ NoSrc/ _/ SinkICC/ _/ Exp/ _/ Src/ _/ NoSinkICC/ _/ Exp/ _/ Src/ _/ Sink/ _/ IICC/ _/ Imp/ _/ NoSrc/ _/ NoSink248ICC/ _/ Imp/ _/ NoSrc/ _/ SinkICC/ _/ Imp/ _/ Src/ _/ NoSink/ _/ I318ICC/ _/ Imp/ _/ Src/ _/ Sink/ _/ I6/ ./ 4.2/ 精度/ 分析/ 图/ 8/ 和/ 图/ 9/ 展示/ 了/ 在/ 仅/ 有/ 显式/ 泄露/ 漏洞/ 的/ 情形/ 下/ ,/ 各/ 工具/ 方法/ 的/ 准确率/ 和/ 召回/ 率/ 比较/ ./ 当仅/ 有/ 显式/ 泄露/ 漏洞/ 时/ ,/ LFDroid/ 的/ 总体/ 准确率/ 依然/ 比/ AmandroidImp/ ,/ 由于/ LFDroid/ 忽略/ 了/ 显式/ Intents/ 的/ 跳转/ 目的/ 限制/ ,/ 从而/ 造成/ 误报/ ,/ 相应/ 的/ 隐式/ 泄露/ 也/ 造成/ 误报/ ./ 表/ 3/ 中/ 一些/ 代码/ 规模/ 几百/ 行/ 左右/ 的/ 应用/ 实例/ ,/ 其/ 状态/ 数量/ 仅为/ 4/ 左右/ ,/ 通过/ 排查/ 发现/ 这些/ 实例/ 均/ 仅/ 包含/ 单一/ 、/ 直接/ 的/ 显式/ 泄露/ 漏洞/ ,/ 对于/ 这/ 类/ 漏洞/ ,/ 验证/ 程序/ 仅/ 需/ 抽象/ 2/ 对/ 安全/ 要素/ 对比/ 状态/ 即可/ 发掘/ 漏洞/ ,/ 因此/ 状态/ 数较/ 少/ ./ 本文/ 方法/ 所/ 抽象/ 的/ 状态/ 数/ 与/ 代码/ 中/ 安全/ 要素/ 数量/ 及/ 漏洞/ 性质/ 有关/ ,/ 在/ 安全/ 要素/ 数量/ 较少/ 的/ 情况/ 下/ ,/ 对于/ 显式/ 漏洞/ 而言/ ,/ 仅/ 需/ 抽象/ 较/ 少/ 状态/ 即可/ 检测/ 全部/ 漏洞/ ;/ 而/ 对于/ 隐式/ 泄露/ ,/ 由于/ 需要/ 生成/ 对比/ 进程/ ,/ 因此/ 状态/ 数会/ 急剧/ 增长/ ./ 检测/ 难点/ 高/ 7.5/ %/ ,/ 这/ 是因为/ LFDroid/ 的/ 模型/ 检测/ 过程/ 进行/ 了/ 代码执行/ ,/ 因此/ 对于/ 诸如/ 数组/ 、/ 列表/ 等/ 结构/ 的/ 混淆/ 误报/ 可以/ 很/ 好/ 地/ 避免/ ./ 然而/ 由于/ LFDroid/ 运行/ 环境/ 限制/ ,/ 需要/ 依赖/ 现有/ 的/ 模型/ 检测工具/ 以及/ 自身/ 构建/ 的/ 模拟/ 库/ ,/ 这些/ 环境/ 的/ 局限/ 造成/ 较/ 多/ 漏报/ ,/ 使得/ 图/ 9Page16/ 中/ LFDroid/ 的/ 召回/ 率要/ 低于/ Amandroid/ ./ 特别/ 是/ 在/ DroidBench/ 数据/ 集上/ ,/ 由于/ 用例/ 逻辑/ 较为/ 多样/ ,/ 使得/ LFDroid/ 的/ 召回/ 率/ 低于/ 其他/ 两种/ 工具/ ./ 图/ 10/ 和/ 图/ 11/ 展示/ 了/ 在/ 带有/ 隐式/ 泄露/ 漏洞/ 情形/ 下/ ,/ 相应/ 的/ 准确率/ 和/ 召回/ 率/ 比较/ ./ 图/ 10/ 与/ 图/ 8/ 中/ FlowDroid/ 与/ Amandroid/ 两种/ 工具/ 检测/ 准确率/ 没有/ 变化/ ,/ 隐式/ 泄露/ 检测/ 没有/ 增加/ 其/ TP/ 和/ FP/ ,/ 说明/ 它们/ 不/ 支持/ 隐式/ 泄露/ 检测/ ./ 而/ LFDroid/ 的/ 准确率/ 变化/ 主要/ 来自/ DroidBench/ 的/ 4/ 个/ Impilicit/ -/ Flow/ 用例/ ,/ 分别/ 增加/ 了/ 1.5/ %/ 的/ DroidBench/ 准确率/ 和/ 0.9/ %/ 的/ 总体/ 准确率/ ./ 对于/ ICC/ -/ Bench/ 而言/ ,/ 由于/ LFDroid/ 检测/ 隐式/ 与/ 显式/ 漏洞/ 的/ TP/ 和/ FP/ 均/ 相同/ ,/ 因此/ 准确率/ 没有/ 变化/ ./ 由于/ LFDroid/ 对/ 隐式/ 泄露/ 漏洞/ 检测/ 的/ 良好/ 支持/ ,/ 实验/ 中/ 的/ 检测/ 召回/ 率/ 达到/ 85.7/ %/ ,/ 使得/ 图/ 11/ 的/ 总体/ 召回/ 率要/ 明显/ 高于/ 其他/ 两种/ 工具/ ./ 6.4/ ./ 3/ 时间/ 效率/ 分析/ 表/ 3/ 和表/ 4/ 的/ 模型/ 检测时间/ 显示/ ,/ 时间/ 开销/ 与/ 状态/ 规模/ 相关/ ,/ 其/ 主要/ 表现/ 在/ 无/ 泄露/ 及/ 要素/ 数量/ 较多时/ 状态/ 规模/ 及/ 检测时间/ 均/ 发生/ 剧烈/ 增长/ ./ 一方面/ ,/ 当/ 程序/ 中/ 具有/ sink/ 要素/ 但/ 没有/ 泄露/ 时/ ,/ 检测/ 会/ 遍历/ 阈值/ ,/ 使得/ 消耗/ 较大/ ./ 另一方面/ ,/ 时间/ 效率/ 和/ 目标/ 系统/ 中/ source/ 与/ sink/ 要素/ 的/ 数量/ 具有/ 直接/ 关系/ ,/ 由于/ 模型/ 检测/ 需要/ 对/ 程序/ 中/ 的/ 每/ 一对/ 安全/ 要素/ 模拟/ 执行/ ,/ 状态/ 规模/ 和/ 检测时间/ 会/ 随着/ 安全/ 要素/ 对/ 的/ 数量/ 成倍增长/ ./ 表/ 5/ 列出/ 了/ 3/ 种/ 工具/ 的/ 检测时间/ 对比/ ,/ LFDroid/ 的/ 检测/ 平均/ 时间/ 略高于/ 其他/ 两种/ 工具/ ,/ 分别/ 是/ 它们/ 的/ 1.715/ 倍/ 和/ 2.029/ 倍/ ./ 为了/ 分析/ LFDroid/ 检测时间/ 的/ 构成/ ,/ 本文/ 统计/ 了/ 各/ 重要/ 模块/ 的/ 平均/ 时间/ 开销/ 如表/ 6/ 所示/ ,/ 发现/ 除去/ 必要/ 的/ 解析/ 时间/ ,/ 大部分/ 的/ 时间/ 用于/ 产生/ 可/ 规约/ 代码/ ,/ 而/ 模型/ 检测/ 部分/ 的/ 时间/ 开销/ 仅/ 占/ 总开销/ 的/ 12/ %/ ./ 6.4/ ./ 4/ 符号执行/ 优化/ 的/ 影响/ LFDroid/ 利用/ 符号执行/ 对/ 算法/ 进行/ 优化/ ,/ 目的/ 是/ 为了/ 解决/ 隐式/ 泄露/ 中/ 的/ 路径/ 遍历/ 所/ 带来/ 的/ 状态/ 爆炸/ 问题/ ./ 为了/ 说明/ 符号执行/ 优化/ 对/ 本文/ 方法/ 的/ 作用/ ,/ 本文/ 对比/ 了/ “/ 无/ 符号执行/ ”/ 和/ “/ 带有/ 符号执行/ ”/ 时/ DroidBench/ 中/ 的/ 4/ 个/ 隐式/ 泄露/ 用例/ 的/ 执行/ 情况/ ,/ 对比/ 结果/ 如表/ 7/ 所示/ ./ 表/ 7/ 符号执行/ 优化/ DroidBench/ 隐式/ 检测/ 效果/ 的/ 影响/ Android/ 应用/ ImplicitFlow1ImplicitFlow2ImplicitFlow3ImplicitFlow4Total/ 这里/ 由于/ FP/ 均/ 为/ 0/ ,/ 因此/ 仅/ 列出/ TP/ 的/ 结果/ ./ 从/ 对比/ 中/ 可以/ 看出/ ,/ 当/ 无/ 符号执行/ 优化/ 时/ ,/ 在/ 指定/ 阈值/ 下会/ 出现/ 对/ ImplicitFlow2/ ~/ 4/ 隐式/ 漏洞/ 的/ 漏报/ ,/ 这/ 是因为/ 这些/ 隐式/ 信息流/ 对/ 条件/ 变量/ 的/ 变化/ 不/ 敏感/ ./ 然而/ 通过/ 符号执行/ 选取/ 条件/ 初始值/ ,/ 可/ 顺利/ 检出/ 该/ 数据/ 集中/ 所有/ 的/ 隐式/ 泄露/ 漏洞/ ./ 时间/ 方面/ ,/ 对于/ ImplicitFlow1/ 而言/ ,/ 由于/ 阈值/ 内/ 检测/ 可以/ 直接/ 发现/ 漏洞/ ,/ 没有/ 经过/ 符号执行/ 阶段/ ,/ Page17/ 从而/ 检测时间/ 与/ 无/ 符号执行/ 相同/ ./ 然而/ 其后/ 的/ 用例/ 中/ 无/ 符号执行/ 时用/ 时/ 较/ 少/ ,/ 这/ 是因为/ 符号执行/ 及/ 之后/ 的/ 隐式/ 检测/ 过程/ 占用/ 了/ 一定/ 的/ 时间/ 消耗/ ./ 另外/ 在/ 以/ 准确率/ 为/ 目标/ 的/ 检测/ 过程/ 中/ ,/ 当/ 检测/ 失效/ 时/ ,/ 为了/ 更/ 精准/ 地/ 发掘/ 漏洞/ ,/ 实际/ 检测/ 中/ 会/ 增加/ 阈值/ 范围/ ,/ 用/ 时间/ 换取/ 精度/ ,/ 使得/ 检测/ 用时/ 也/ 会/ 相应/ 增加/ ,/ 因此/ 表中/ 给出/ 了/ “/ / ”/ ,/ 表示/ 多于/ 当前/ 值/ ./ 由于/ 对比/ 数据/ 集用例/ 规模/ 均/ 较/ 小/ (/ 小于/ 400/ 行/ )/ ,/ 且/ 分支/ 条件/ 简单/ ,/ 相应/ 符号执行/ 的/ 时间/ 开销/ 较/ 小/ ,/ 然而/ 随着/ 代码/ 规模/ 的/ 上升/ ,/ 其/ 扫描/ 和/ 约束/ 求解/ 的/ 代价/ 也/ 将/ 随之/ 增加/ ,/ 检测/ 的/ 代价/ 将会/ 明显/ 上升/ ,/ 这/ 也/ 将/ 成为/ 今后/ 算法/ 改进/ 的/ 重要/ 方向/ ./ 6.4/ ./ 5/ 市场/ 软件/ 分析/ 利用/ LFDroid/ 发现/ 了/ 3/ 款/ 实际/ Android/ 市场/ 应用软件/ 中/ 所/ 存在/ 的/ 隐式/ 漏洞/ 问题/ ,/ 该/ 3/ 款/ 市场/ 应用/ 在/ FlowDroid/ 和/ Amandroid/ 上均/ 检测/ 失败/ ./ 检测/ 结果/ 如表/ 8/ 所示/ ,/ 其中/ “/ LOC/ ”/ 为/ 程序/ 规模/ ,/ “/ Source/ // Sink/ ”/ 表示/ 程序/ 中/ 所/ 蕴含/ 的/ source/ 和/ sink/ 要素/ 数量/ ,/ #/ S/ 表示/ 状态/ 数/ ,/ MT/ 表示/ 模型/ 检测/ 用时/ ,/ #/ R/ 表示/ 检出/ 漏洞/ 数/ ,/ #/ TR/ 表示/ 经/ 排查/ 后/ 的/ 真实/ 漏洞/ 数/ ./ 其中/ ,/ GpsTracker/ 来自/ GooglePlay/ ,/ 其他/ 两款/ 来自/ 国内/ 安卓/ 应用/ 市场/ ./ LFDroid/ 在/ 检测/ 这些/ 市场/ 应用/ 时/ ,/ 在/ 原有/ 模拟/ 库/ 基础/ 上/ 补全/ 了/ 支持/ 目标/ 应用/ 的/ 库函数/ ,/ 如/ 增加/ 了/ Preference/ 及/ sqlite/ 等/ Android/ 类/ 的/ 支持/ ,/ 并/ 利用/ FlowDroid/ 所/ 使用/ 的/ 敏感/ 函数/ 集合/ 来/ 定位/ 各/ 安全/ 要素/ ./ 在/ 这些/ 目标程序/ 中/ ,/ GpsTracker/ 是/ 一款/ 简单/ 的/ 定位/ 跟踪/ 软件/ ,/ 用于/ 跟踪/ 手机/ 去向/ 、/ 紧急状态/ 下/ 的/ 位置/ 定位/ 以及/ 计算机/ 主/ 的/ 移动/ 距离/ ,/ LFDroid/ 发现/ 了/ 其/ 1/ 条隐式/ 流/ 存在/ 于/ 其/ Atracker/ -/ Activity/ 组件/ 中/ ,/ 通过/ 人工/ 排查/ ,/ 该/ 隐式/ 流/ 使得/ 当/ 敏感/ 信息/ myimg/ ./ length/ (/ )/ 大于/ 10/ 时/ ,/ sendMessage/ 的/ sink/ 会/ 被/ 触发/ ./ 而/ LoveSMS/ 是/ 一款/ 供/ 恋人/ 之间/ 发送/ 私密/ 短信/ 的/ 应用/ ,/ LFDroid/ 检测/ 出/ 18/ 处/ 漏洞/ ,/ 均/ 是/ 以/ Log/ 作为/ sink/ ,/ 其中/ 显式/ 漏洞/ 8/ 条/ ,/ 隐式/ 10/ 条/ ,/ 通过/ 进一步/ 分析/ ,/ 在/ 10/ 条隐式/ 漏洞/ 中/ ,/ 有/ 8/ 条是/ 通过/ Intent/ ./ getAction/ 来/ 作为/ 敏感/ 条件/ 变量/ ,/ 这里/ 我们/ 不/ 认为/ 它会/ 造成/ 实质性/ 的/ 危害/ ,/ 因此/ 予以/ 排除/ ./ DeerEword/ 是/ 一款/ 与/ 好友/ 共享/ 位置/ 信息/ 的/ 应用软件/ ,/ LFDroid/ 检测/ 出/ 了/ 其中/ 两个/ 很具/ 危险性/ 的/ 隐式/ 漏洞/ ,/ 在/ 其/ AlarmRecv/ 模块/ 中/ ,/ 敏感/ 信息/ SimSerial/ 通过/ 两个/ Post/ 函数/ 作为/ 条件/ 分支/ 而/ 传播/ 给/ 指定/ 站点/ ,/ 该/ 漏洞/ 可以/ 使/ 用户/ 在/ 不知情/ 的/ 状态/ 下/ 泄露/ 他们/ 的/ Sim/ 序列号/ ./ 从/ 结果/ 中/ 可以/ 看出/ ,/ 当/ 目标程序/ 中/ 安全/ 要素/ 数量/ 较大/ 时/ ,/ 检测时间/ 将/ 相应/ 增加/ ,/ 这/ 与/ 6.4/ ./ 3/ 节中/ 的/ 结论/ 一致/ ./ Android/ 应用/ LOC/ // KSource/ // Sink/ #/ SMT/ // s/ #/ R/ #/ TRGpsTracker2/ ./ 8LoveSMSDeerEwordTotal6/ ./ 5/ 适用性/ 讨论/ 本文/ 方法/ 可/ 用于/ 一般/ Android/ 应用程序/ 在/ 源码/ 开发阶段/ 的/ 信息/ 泄露/ 检测/ ,/ 也/ 可/ 用于/ 开发/ 完成/ 后/ 无/ 代码/ 混淆/ 的/ apk/ 格式/ Android/ 应用程序/ 信息/ 泄露/ 检测/ ./ 在/ 处理/ 较/ 大规模/ 的/ 目标程序/ 时/ ,/ 该/ 方法/ 的/ 处理/ 能力/ 依赖于/ 以下/ 因素/ ./ 首先/ ,/ 由于/ 方法/ 本身/ 属于/ 模型/ 检测/ 算法/ 在/ 程序/ 分析/ 方面/ 应用/ ,/ 因而/ 其/ 处理/ 能力/ 与/ 检测/ 算法/ 的/ 处理/ 能力/ 和/ 效率/ 直接/ 相关/ ,/ 由于/ 状态/ 爆炸/ 一直/ 是/ 限制/ 模型/ 检测/ 应用/ 的/ 难题/ ,/ 当/ 目标程序/ 中/ 分支/ 结构/ 、/ 安全/ 要素/ 变量/ 过多时/ ,/ 模型/ 的/ 状态/ 数量/ 会/ 剧烈/ 增长/ ,/ 导致/ 检测/ 效率/ 低下/ 甚至/ 无法/ 运行/ ;/ 同时/ ,/ 本文/ 方法/ 也/ 依赖于/ 支撑/ 工具/ 的/ 处理/ 能力/ ,/ 当前/ JPF/ 所/ 处理/ 的/ 目标/ 代码/ 行/ 数/ 一般/ 不/ 超过/ 10k/ 级别/ ,/ 并且/ 不/ 支持/ 一些/ 特殊/ 的/ 代码/ 形式/ 如/ 自定义/ 的/ classloader/ ,/ native/ 类/ 、/ 反射/ 等/ ./ 另外/ ,/ 由于/ 方法/ 的/ 优化/ 过程/ 中/ 利用/ 符号执行/ 限制/ 分支/ 范围/ ,/ 当/ 分支/ 条件/ 中/ 的/ 变量/ 类型/ 或/ 结构/ 过于/ 复杂/ 时/ ,/ 将/ 影响/ 约束/ 求解/ 的/ 处理/ 效力/ ./ 最后/ ,/ 由于/ 目前/ 对于/ Android/ 应用/ 在/ JAVA/ 虚拟机/ 上/ 的/ 运行/ ,/ 需要/ 依赖/ 人工/ 搭建/ 的/ 模拟/ 库函数/ ,/ 因此/ 当/ 程序/ 中/ 出现/ 模拟/ 库中/ 不/ 支持/ 的/ 函数/ 类型/ 时/ ,/ 将会/ 发生/ 运行/ 时/ 错误/ ./ 现阶段/ 本文/ 方法/ 适用/ 于/ 代码/ 行数/ 10k/ 级别/ 以下/ ,/ 不/ 具有/ JPF/ 、/ 符号执行/ 及/ 模拟/ 库/ 无法/ 处理/ 的/ 代码/ 形式/ ,/ 且/ 安全/ 要素/ 数量/ 较少/ 的/ 目标/ 代码/ ./ 然而/ 随着/ 模拟/ 库/ 构建/ 的/ 不断完善/ ,/ 模型/ 检测/ 算法/ 的/ 持续/ 优化/ 以及/ 符号执行/ 处理/ 能力/ 的/ 提高/ ,/ 本文/ 方法/ 在/ 检测/ Android/ 应用/ 信息/ 泄露/ 方面/ 的/ 前景/ 也/ 会/ 愈发/ 广阔/ ./ 7/ 相关/ 工作/ 由于/ Android/ 应用/ 以/ JAVA/ 语言/ 为/ 编码/ 基础/ ,/ 本文/ 利用/ 了/ 面向/ JAVA/ 的/ 模型/ 检测/ 程序/ 分析/ 工具/ JPF/ 来/ 执行/ 分析/ ./ 关于/ 模型/ 检测/ 在/ 代码/ 分析/ 方面/ 的/ 应用/ 工作/ ,/ 现有/ 较为/ 成熟/ 的/ 针对/ 程序/ 分析/ 的/ 模型/ 检测工具/ 如/ 面向/ C语言/ 或/ C++/ 的/ BLAST/ [/ 21/ ]/ ,/ CBMC/ [/ 22/ ]/ ,/ CPAchecker/ [/ 23/ ]/ ,/ SATABS/ [/ 24/ ]/ 等/ ./ 其中/ BLAST/ 是/ 一种/ 主流/ 的/ 针对/ 时序/ 安全/ 属性/ 的/ C语言/ 自动化/ 验证/ Page18/ 工具/ ./ CBMC/ 是/ 针对/ 限界/ 模型/ 检测/ 的/ C语言/ 模型/ 检测/ 分析器/ ./ CPAchecker/ 提供/ 了/ 一种/ 可/ 配置/ 的/ 程序/ 分析/ (/ ConfigurableProgramAnalysis/ )/ 方法/ ./ SATABS/ 利用/ SAT/ 求解/ 器/ 精确/ 地/ 处理/ ANSI/ -/ C/ 标准/ 语义/ ./ 在/ 泄露/ 分析/ 方面/ ,/ 除/ FlowDroid/ 和/ Amandroid/ 等/ 静态/ 分析/ 工具/ 之外/ ,/ 较为/ 流行/ 的/ 还有/ DTA/ ++/ [/ 25/ ]/ ,/ TaintDroid/ [/ 9/ ]/ ,/ SpanDex/ [/ 26/ ]/ 等/ 动态分析/ 工具/ ./ 其中/ ,/ DTA/ ++/ 利用/ 动态/ 污点/ 传播/ 技术/ 来/ 限制/ 程序/ 中/ 的/ 隐式/ 信息流/ ,/ 通过/ 监控/ 跟踪/ 输入/ 标记/ 的/ 传播/ 轨迹/ 判断/ 流/ 传播/ ,/ 当/ 遇到/ 控制流/ 结构/ 时/ ,/ DTA/ ++/ 会/ 分析/ 分支/ 内容/ 是否/ 揭露/ 了/ 全部/ 私密/ 信息/ ,/ 而后/ 再/ 决定/ 是否/ 传播/ 标记/ ./ TaintDroid/ 是/ 将/ 动态/ 污点/ 传播/ 应用/ 到/ Android/ 信息/ 泄露/ 保护/ 的/ 代表性/ 工具/ ,/ 它/ 扩展/ 了/ Android/ 的/ 运行/ 环境/ 用以/ 对/ 程序/ 进行/ 精准/ 跟踪/ ,/ 然而/ 它/ 不能/ 支持/ 隐式/ 泄露/ 检测/ ./ SpanDex/ 在/ Taint/ -/ Droid/ 基础/ 上/ ,/ 加入/ 了/ 符号执行/ 因素/ 用于/ 分析/ 计算/ 控制流/ 的/ 分支/ 范围/ ,/ 从而/ 达到/ 限制/ 私密/ 信息/ 传播/ 的/ 目的/ ./ 动态/ 污点/ 传播/ 技术/ 虽然/ 在/ 准确性/ 上/ 具有/ 优势/ ,/ 然而/ 由于/ 其/ 只能/ 覆盖/ 有限/ 的/ 执行/ 路径/ ,/ 因此/ 无法/ 全面/ 胜任/ 信息/ 泄露/ 漏洞/ 的/ 检测/ 工作/ ,/ 仅/ 可/ 用于/ 限制/ 泄露/ 的/ 实时/ 发生/ ./ 由于/ 模型/ 检测/ 具有/ 遍历/ 程序/ 分支/ 状态/ 的/ 先天/ 优势/ ,/ 因此/ 利用/ 模型/ 检测/ 技术/ 一方面/ 可以/ 规避/ 动态/ 污点/ 跟踪/ 的/ 覆盖/ 局限/ ,/ 另一方面/ 遍历/ 执行程序/ 逻辑/ 也/ 可/ 有效/ 提升/ 静态/ 分析/ 的/ 准确性/ ./ 当前/ ,/ 利用/ 模型/ 检测/ 技术/ 进行/ Android/ 信息/ 泄露/ 分析/ 工作/ 日渐/ 兴起/ ./ 其中/ ,/ DroidPF/ [/ 27/ ]/ 利用/ 模型/ 检测/ 生成/ 应用/ 的/ 调用/ 驱动/ ,/ 从而/ 解决/ Android/ 事件驱动/ 的/ 回调/ 问题/ ,/ 然而/ DroidPF/ 不/ 支持/ 隐式/ 信息流/ 的/ 检测/ ./ 文献/ [/ 28/ ]/ 将/ Android/ 应用/ 转化/ 为/ 一种/ PushDown/ 系统/ ,/ 并/ 运用/ 模型/ 检测/ 技术/ 执行/ 转化/ 后/ 的/ Android/ 恶意软件/ ,/ 以此/ 进行/ 有效/ 识别/ ,/ 该/ 工作/ 也/ 不/ 支持/ 隐式/ 信息流/ 的/ 检测/ ./ 本文/ 利用/ 模型/ 检测/ 的/ 优势/ ,/ 可以/ 有效/ 弥补/ 上述/ 工作/ 在/ 隐式/ 泄露/ 检测/ 方面/ 的/ 不足/ ./ 8/ 结束语/ 本文/ 利用/ 时序/ 属性/ 验证/ 的/ 模型/ 检测/ 技术/ 对/ Android/ 平台/ 应用/ 信息/ 泄露/ 漏洞/ 进行/ 检测/ ,/ 主要/ 工作/ 集中/ 在/ 两点/ :/ 第一/ ,/ 提出/ 了/ 抽象/ 信息/ 泄露/ 关系/ 模型/ ,/ 利用/ 程序/ 中/ 安全/ 要素/ 的/ 泄露/ 关系/ ,/ 可以/ 有效/ 检测/ 目标/ 应用/ 中/ 的/ 显式/ 和/ 隐式/ 信息/ 泄露/ 漏洞/ ,/ 特别/ 在/ 实验/ 中/ 对于/ 隐式/ 泄露/ 漏洞/ 检测/ 召回/ 率/ 达到/ 85.7/ %/ ,/ 优于/ 相关/ 的/ 流/ 分析/ 对比/ 工具/ ./ 第二/ ,/ 利用/ 模型/ 检测/ 技术/ 模拟/ 执行/ 可/ 规约/ 的/ 目标/ 源码/ ,/ 可以/ 有效/ 避免/ 流/ 分析/ 过程/ 中/ 的/ 代码/ 结构/ 混淆/ 问题/ ,/ 从而/ 降低/ 误报/ 的/ 发生/ ./ 对比/ 实验/ 表明/ ,/ 相较/ 于/ 现有/ 的/ 移动/ 平台/ 信息/ 泄露/ 检测工具/ ,/ 本文/ 方法/ 在/ 检测/ 含有/ 隐式/ 信息/ 泄露/ 漏洞/ 的/ 数据/ 集时/ ,/ 召回/ 率/ 和/ 准确率/ 均/ 有/ 明显/ 优势/ ,/ 并/ 由于/ 阈值/ 限制/ 和/ 符号执行/ 的/ 运用/ ,/ 在/ 时间/ 开销/ 上/ 与/ 对比/ 方法/ 无/ 显著/ 差异/ ./ 另外/ ,/ 在/ 对比/ 工具/ 检测/ 失败/ 的/ 状态/ 下/ ,/ 利用/ 本文/ 方法/ 发现/ 了/ 3/ 款/ 真实/ 移动/ 应用/ 的/ 相关/ 泄露/ 漏洞/ ./ 下/ 一步/ 的/ 研究/ 内容/ 主要/ 包括/ :/ (/ 1/ )/ 进一步/ 完善/ 和/ 扩展/ 模拟/ 运行库/ 的/ 构建/ ,/ 支持/ 更加/ 复杂/ 的/ 程序运行/ 逻辑/ ;/ (/ 2/ )/ 完善/ 对/ 组件/ 间通信/ 、/ handleMessage/ 等/ 回调/ 机制/ 的/ 支持/ ,/ 降低/ 由此/ 而/ 引发/ 的/ 误报/ 及/ 漏报/ ;/ (/ 3/ )/ 完善/ 模型/ 检测/ 优化/ 方案/ ,/ 进一步/ 降低/ 由/ 符号执行/ 引起/ 的/ 检测/ 开销/ ;/ (/ 4/ )/ 根据/ 显式/ 和/ 隐式/ 泄露/ 的/ 类型/ 和/ 易测/ 程度/ ,/ 建立/ 泄露/ 危险/ 等级/ 评估/ 机制/ ,/ 制定/ 危害/ 程度/ 标准/ 将/ 检测/ 结果/ 量化/ ./ 致谢/ 感谢/ 课题组/ 刘磊/ 、/ 李鹏/ 、/ 苑立英/ 等/ 同学/ 在/ 数据/ 收集/ 、/ 实验/ 系统/ 实现/ 等/ 方面/ 所/ 做/ 的/ 工作/ ./ 感谢/ 审稿/ 专家/ 所/ 提出/ 的/ 宝贵意见/ !/ 

