Page1OpenFlow/ 交换机/ 动态/ 共享/ 限速/ 机制/ 的/ 研究/ 杨骥/ 许琛/ 龚志敏/ 胡成臣/ 管晓宏/ (/ 西安交通大学/ 智能/ 网络/ 与/ 网络安全/ 教育部/ 重点/ 实验室/ 西安/ 710049/ )/ 摘要/ 每流/ 限速/ 一直/ 以来/ 都/ 是/ 互联网/ 服务质量/ 保障/ (/ QoS/ )/ 的/ 一大/ 挑战/ ,/ 由于/ 受到/ 硬件资源/ 的/ 限制/ ,/ 很难/ 找到/ 一种/ 快速/ 高效/ 的/ 算法/ 在/ 数据包/ 级/ 对/ 流量/ 进行/ 区分/ 限速/ ./ OpenFlow1/ ./ 3/ 协议/ 对/ 每流/ 限速/ (/ Meter/ )/ 部分/ ,/ 给出/ 了/ 具体/ 定义/ 和/ 描述/ ,/ 该文/ 参照/ 该/ 协议/ 标准/ ,/ 提出/ 了/ 具体/ 的/ Meter/ 实现/ 方案/ ,/ 并/ 在/ ONetSwitch/ 硬件平台/ 上/ ,/ 进行/ 了/ 实验/ 验证/ 和/ 性能/ 测试/ ./ 本文/ 通过/ 对/ 网络流量/ 的/ 统计分析/ ,/ 发现/ 网络/ 中/ 共存/ 的/ 流/ 数量/ 往往/ 只/ 占/ 总流量/ 的/ 万分之一/ ,/ 因此/ 使/ 多条/ 流分/ 时/ 共享/ 硬件资源/ ,/ 可以/ 有效/ 解决/ 每流/ 限速/ 的/ 难题/ ./ 参考/ 动态/ 队列/ 共享/ (/ DQS/ )/ 的/ 思想/ ,/ 该文/ 提出/ 动态/ 共享/ 限速/ (/ DMS/ )/ 算法/ ,/ 在/ 多条/ 流/ 之间/ 进行/ 调度/ ,/ 实现/ 多条/ 流分/ 时/ 共享/ 限速/ 通道/ ,/ 在/ 硬件资源/ 受限/ ,/ 限速/ 通道/ 数量/ 一定/ ,/ 同时/ 需要/ 限速/ 的/ 流/ 数量/ 大于/ 限速/ 通道/ 数量/ 时/ ,/ 能够/ 有效/ 地/ 实现/ 对/ 各条/ 流/ 进行/ 限速/ 的/ 功能/ ./ 实验/ 结果表明/ ,/ Meter/ 能够/ 为/ 每/ 条流/ 有效/ 分配/ 限速/ 通道/ ,/ 从而/ 在/ 网络/ 中/ 对/ 多条/ 流以/ 不同/ 的/ 速率/ 区分/ 限速/ ./ 关键词/ OpenFlow1/ ./ 3/ ;/ ONetSwitch/ ;/ QoS/ ;/ 每流/ 限速/ ;/ 动态/ 共享/ 限速/ ;/ 软件/ 定义/ 网络/ ;/ 下一代/ 互联网/ 1/ 引言/ 随着/ 网络/ 中/ 协议/ 的/ 多样性/ 趋势/ ,/ 交换机/ -/ 路由器/ 等/ 设备/ 的/ 复杂度/ 正在/ 逐渐/ 增加/ ,/ 而/ 传统/ 的/ 网络/ 架构/ 由于/ 诸多/ 问题/ ,/ 如/ 缺乏/ 灵活性/ 、/ 对/ 需求/ 变化/ 的/ 响应速度/ 缓慢/ 、/ 无法/ 实现/ 网络/ 虚拟化/ 以及/ 成本/ 高昂/ 等/ ,/ 已/ 不能/ 满足/ 当今/ 互联网/ 用户/ 的/ 需求/ ./ 因此/ ,/ 迫切需要/ 新型/ 网络/ 架构/ 的/ 提出/ ,/ 从而/ 为/ 互联网/ 带来/ 一场/ 革命性/ 的/ 变革/ ./ 软件/ 定义/ 网络/ (/ SoftwareDefinedNetworking/ ,/ SDN/ )/ 的/ 概念/ 应运而生/ ,/ 并且/ 经过/ 近些年/ 的/ 发展/ 与/ 成熟/ ,/ 它/ 正在/ 成为/ 下一代/ 互联网/ 的/ 主要/ 趋势/ 之一/ ./ 美国斯坦福大学/ CleanSlate/ 研究/ 计划/ 于/ 2006/ 年/ 提出/ 了/ SDN/ 的/ 概念/ ,/ 将/ 控制/ 功能/ 从/ 网络/ 交换/ 设备/ 中/ 分离出来/ ,/ 即用/ 软件/ 定义/ 网络/ ,/ 使得/ 网络/ 可编程/ 化/ ,/ 在/ 满足用户/ 的/ 需求/ 方面/ 具有/ 很大/ 的/ 灵活性/ ./ 同时/ ,/ SDN/ 还/ 简化/ 了/ 网络/ 基础/ 设备/ 的/ 工作/ ,/ 底层/ 无需/ 执行/ 冗杂/ 的/ 协议/ 标准/ ,/ 只/ 需要/ 从/ 上层/ 接收/ 指令/ 和/ 规则/ 完成/ 转发/ 即可/ [/ 1/ ]/ ./ SDN/ 实现/ 了/ 对/ 网络流量/ 的/ 灵活/ 控制/ ,/ 为/ 核心/ 网络/ 及/ 应用/ 的/ 创新/ 提供/ 了/ 良好/ 的/ 平台/ ,/ 可/ 满足/ 网络设备/ 上/ QoS/ 、/ 访问控制/ 和/ 路径/ 选择/ 等/ 需求/ [/ 2/ ]/ ./ SDN/ 的/ 3/ 层/ 架构/ 从上到下/ 依次/ 为/ 应用程序/ 、/ 控制/ 平面/ 和/ 数据/ 平面/ ,/ 其中/ 应用程序/ 与/ 控制/ 平面/ 之间/ 通过/ 北向/ 应用程序/ 编程/ 接口/ (/ API/ )/ 通信/ ,/ 控制/ 平面/ 和/ 数据/ 平面/ 之间/ 通过/ 南向/ 接口/ 安全/ 通道/ 通信/ ./ 网络/ 编程人员/ 只/ 需/ 在/ 逻辑/ 中心化/ 的/ 控制/ 平面/ 上/ 编写/ 应用程序/ ,/ 而/ 将/ 规则/ 下发/ 到/ 数据/ 平面/ 的/ 复杂/ 工作/ 则/ 由/ 控制/ 平面/ 来/ 完成/ ,/ 从而/ 在/ 很大/ 程度/ 上/ 减轻/ 了/ 网络管理/ 人员/ 的/ 工作/ 负担/ [/ 2/ -/ 3/ ]/ ./ 在/ SDN/ 架构/ 中/ ,/ OpenFlow/ 协议/ 最早/ 被/ 定义/ ,/ 也/ 是/ 当前/ SDN/ 设备/ 通信/ 的/ 事实标准/ ,/ 工作/ 在/ 网络设备/ 控制/ 层面/ 与/ 数据/ 层面/ 之间/ [/ 4/ ]/ ,/ 主要/ 负责/ 南向/ 接口/ ,/ 即/ SDN/ 的/ 控制器/ 与/ 交换机/ 之间/ 的/ 通信/ ,/ 交换机/ 中/ 的/ 流表/ 用于/ 匹配/ 进入/ 网络/ 中/ 的/ 流/ ,/ 控制器/ 可以/ 增加/ 、/ 修改/ 和/ 删除/ 流/ 表项/ 的/ 内容/ ,/ 实时/ 更新/ 并/ 下发/ 规则/ 到/ 流表/ ,/ 如图/ 1/ 所示/ ./ 在/ 流表中/ 找到/ 匹配/ 项/ 的/ 流/ 按照/ 流表中/ 安装/ 的/ 规则/ 执行/ 相应/ 的/ 丢弃/ 或/ 转发/ 动作/ ,/ 否则/ 产生/ 未/ 匹配/ 流表/ 的/ 消息/ ,/ 将/ 其/ 转发/ 到/ 控制器/ 处理/ ①/ ./ OpenFlow/ 支持/ 精确/ 的/ 流/ 分类/ ,/ 并/ 允许/ 网络/ 编程/ 对/ 每流/ 进行/ 操作/ ,/ 为/ 网络/ 提供/ 细粒度/ 的/ 控制/ ,/ 使/ 网络/ 实时/ 响应/ 应用/ 、/ 用户/ 及/ 会话层/ 的/ 请求/ ,/ 已经/ 被/ 大量/ 应用/ 到/ 各种/ 网络/ 交换/ 设备/ 和/ 应用软件/ 上/ [/ 5/ ]/ ./ 利用/ SDN/ 的/ OpenFlow/ 技术/ ,/ 可以/ 解决/ 很多/ 传统/ 网络/ 中/ 难以解决/ 的/ 问题/ ,/ 例如/ 配置/ 网络设备/ 路由/ 、/ 访问控制/ 和/ 防火墙/ 等/ 复杂/ 功能/ [/ 6/ -/ 7/ ]/ ,/ 实现/ 信息中心/ 网络/ (/ ICN/ )/ [/ 8/ ]/ ,/ 解决/ 互联网/ 中负载/ 均衡/ 的/ 问题/ [/ 9/ ]/ ./ 在/ 本文/ 中/ ,/ 将/ 详述/ 利用/ OpenFlow/ 对流/ 表中/ 的/ 每条/ 表项/ 按照/ 控制器/ 下发/ 的/ 规则/ 执行/ 不同/ 操作/ 的/ 优势/ ,/ 实现/ 对/ 网络/ 中/ 的/ 各条/ 突发/ 流以/ 不同/ 速率/ 区分/ 限速/ ./ 在/ 版本号/ 高于/ 1.3/ 的/ OpenFlow/ 协议/ 中/ ,/ 针对/ 网络/ 服务质量/ 保障/ (/ QoS/ )/ 支持/ ,/ 新增/ 了/ 每流/ 限速/ (/ Meter/ )/ 的/ 功能/ ,/ 即/ 实时/ 测量/ 网络/ 中/ 各流/ 的/ 速率/ ,/ 并/ 对/ 指定/ 流/ 进行/ 速率/ 控制/ ./ 任何/ 一个/ 流/ 表项/ 都/ 可以/ 在/ 其/ 指令/ 动作/ 中/ 声明/ 其/ 对应/ 的/ 限速/ 指令/ ,/ 当/ 到达/ 的/ 数据包/ 匹配/ 该流/ 表项/ 后/ ,/ 需要/ 继续/ 通过/ Meter/ 以/ 指定/ 速率/ 对/ 流量/ 进行/ 控制/ ,/ 满足要求/ 后/ ,/ 数据包/ 才/ 会/ 进行/ 转发/ ,/ 以/ 达到/ 限速/ 的/ 目的/ ②/ ./ 图/ 1/ 所示/ 为/ Meter/ 在/ SDN/ 网络/ 中/ 的/ 部署/ ,/ 控制器/ 具有/ 全局/ 视图/ ,/ 可/ 对/ 网络/ 中/ 的/ 交换机/ 进行/ 配置/ ./ 控制器/ 通过/ OpenFlow/ 协议/ 下发/ 流/ 表项/ 和/ 限速/ 参数/ 到/ 交换机/ ,/ 对/ 匹配/ 了/ 某/ 条流/ 表项/ 的/ 流/ 按照/ 相应/ 的/ 参数/ 限速/ 并/ 转发/ ,/ 否则/ 执行/ 指令/ 域/ 定义/ 的/ 其他/ 动作/ ./ 每流/ 限速/ 的/ 前景/ 毋庸置疑/ ,/ 相较/ 于/ 传统/ 的/ 限速/ 技术/ 有着/ 很大/ 的/ 优势/ ./ 由于/ 网络/ 中/ 一段时间/ 内/ 只有/ 部分/ 流/ 会/ 出现/ 突发/ 传输/ 的/ 现象/ ,/ 只有/ 在/ 这种/ 情况/ 下/ ,/ 才/ 需要/ 对/ 这些/ 流量/ 的/ 速率/ 进行/ 一定/ 限制/ ,/ 以/ 避免/ 湮没/ 下行/ 节点/ ./ 然而/ ,/ 突发/ 传输/ 的/ 流/ 往往/ 仅/ 占/ 网络/ 总流/ ①/ ②/ Page3/ 量/ 的/ 一部分/ ,/ 并/ 不/ 总是/ 需要/ 对/ 所有/ 的/ 流/ 进行/ 限速/ ./ 目前/ 网络/ 中/ 的/ 限速/ 技术/ 仍旧/ 是/ 对/ 所有/ 流量/ 不加区分/ 地以/ 统一/ 速率/ 限速/ ,/ 从而/ 导致/ 网络带宽/ 不/ 能够/ 得到/ 充分利用/ ,/ 造成/ 资源/ 的/ 浪费/ ;/ 同时/ ,/ 由于/ 当前/ 网络/ 中流/ 的/ 数目/ 非常/ 庞大/ ,/ 如果/ 对/ 每/ 条流/ 独立/ 地/ 进行/ 限速/ ,/ 则/ 需要/ 为/ 每/ 一条/ 进入/ 网络/ 的/ 流/ 分配/ 一个/ 限速/ 通道/ ,/ 这/ 将/ 会/ 耗费/ 大量/ 的/ 硬件资源/ 空间/ ,/ 且/ 随着/ 流数/ 的/ 增多/ ,/ 硬件/ 消耗/ 线性/ 增加/ ,/ 可扩展性/ 较差/ ./ 此外/ ,/ 多个/ 限速/ 通道/ 输出/ 队列/ 的/ 管理/ 与/ 调度/ ,/ 进一步/ 增加/ 了/ 硬件/ 设计/ 的/ 复杂度/ ,/ 这/ 就/ 导致/ 了/ 目前/ 网络/ 中/ 很/ 难/ 实现/ 每流/ 限速/ 的/ 功能/ ,/ 因此/ 迫切需要/ 一种/ 高效/ 的/ 限速/ 方案/ 来/ 有效/ 地/ 解决/ 这一/ 问题/ ./ 随着/ 网络/ 技术/ 的/ 发展/ 成熟/ ,/ 以及/ 复杂/ 网络应用/ 对/ QoS/ 的/ 需求/ ,/ OpenFlow/ 定义/ 的/ 每流/ 限速/ (/ Meter/ )/ 对/ 传统/ 的/ 实现/ 方法/ 提出/ 了/ 挑战/ ./ 本文/ 旨在/ 硬件资源/ 有限/ 的/ 情况/ 下/ ,/ 以/ 不/ 影响/ 其他/ 流为/ 前提/ ,/ 仅/ 对/ 突发/ 传输/ 的/ 流/ 进行/ 独立/ 的/ 速率/ 控制/ 以/ 实现/ 每流/ 限速/ ,/ 为/ 网络/ 提供/ 更好/ 的/ QoS/ 保证/ ./ 在/ DQS/ (/ DynamicQueueingSharing/ )/ 中/ [/ 10/ ]/ ,/ 作者/ 提到/ ,/ 网络/ 中/ 某个/ 时间段/ 内/ 并发/ 传输/ 的/ 流/ 数目/ 往往/ 只有/ 几百条/ ,/ 而且/ 更进一步/ ,/ 在/ 这/ 几百条/ 流中/ 大多数/ 的/ 流/ 是/ 无需/ 限速/ 操作/ 而/ 可以/ 直接/ 进行/ 转发/ 的/ ,/ 仅仅/ 在/ 网络/ 发生/ 拥塞/ 时/ ,/ 需要/ 控制/ 某些/ 突发/ 流/ 的/ 速率/ ,/ 而/ 保证/ 大多数/ 的/ 流/ 按照/ 正常/ 速率/ 转发/ ./ 所以/ ,/ 当/ 网络/ 中/ 的/ 一条/ 流由/ “/ 活动/ ”/ (/ Active/ )/ 状态/ 变为/ “/ 休眠/ ”/ (/ Silent/ )/ 状态/ 时/ ,/ 占用/ 的/ 限速/ 通道/ 中/ 也/ 将/ 暂停/ 数据包/ 的/ 传输/ ,/ 转为/ 空闲/ 状态/ ,/ 此时/ 则/ 可以/ 通过/ 释放/ 该/ 通道/ ,/ 供/ 其他/ 新/ 进入/ 网络/ 的/ 流/ 使用/ ,/ 而/ 不用/ 为流/ 重新/ 开辟/ 限速/ 通道/ ,/ 从而/ 使得/ 多条/ 流分/ 时/ 共享/ 有限/ 的/ 硬件/ 限速/ 通道/ 资源/ ./ 如图/ 2/ 所示/ ,/ 并存/ 的/ 突发/ 流/ ,/ 即/ 需要/ 同时/ 限速/ 的/ 流仅/ 占/ 网络/ 总流量/ 的/ 少部分/ ,/ 在/ 不同/ 的/ 时段/ t1/ 和/ t2/ 需要/ 对/ 不同/ 的/ 流/ 限速/ ,/ 通过/ 动态/ 调度/ 和/ 分时/ 共享/ ,/ 使得/ 有限/ 的/ 限速/ 通道/ 为/ 远超过/ 限速/ 通道/ 数目/ 的/ 流/ 进行/ 限速/ ./ 基于/ 以上/ 理论/ ,/ 结合/ OpenFlow/ 对/ 每流/ 区分/ 处理/ 的/ 特性/ ,/ 本文/ 提出/ 了/ 动态/ 共享/ 限速/ (/ DynamicMeterSharing/ ,/ DMS/ )/ 算法/ ,/ 实现/ 多流/ 分时/ 共享/ 限速/ 通道/ ,/ Meter/ 在/ 多条/ 流/ 之间/ 动态/ 调度/ ,/ 使得/ 每条流/ 在/ 独立/ 的/ 通道/ 中/ 限速/ 传输/ ,/ 等效于/ 为/ 该流/ 分配/ 了/ 专用/ 通道/ ./ 在/ 功能/ 上/ ,/ DMSMeter/ 可/ 解决/ 网络/ 中/ 的/ 每流/ 限速/ 需求/ 与/ 硬件资源/ 限制/ 的/ 矛盾/ ./ 考虑/ 到/ 在/ 某/ 段时间/ 内/ ,/ 网络/ 中/ 同时/ 需要/ 限速/ 的/ 流/ 的/ 数量/ 会/ 超过/ 限速/ 通道/ 的/ 数量/ ,/ 由于/ 硬件资源/ 的/ 限制/ ,/ 一段时间/ 内/ 只能/ 保证/ 有/ N/ 条流/ 独立/ 地/ 限速/ (/ 其中/ N/ 是/ 限速/ 通道/ 的/ 数量/ )/ ,/ 不能/ 确保/ 每条流/ 对应/ 一个/ 限速/ 通道/ ,/ 有些/ 流/ 被/ 分到/ 共享/ 限速/ 通道/ 是/ 不可避免/ 的/ ./ 对于/ 某条流/ f/ ,/ 在/ 一段时间/ 内/ ,/ 如果/ 限速/ 通道/ 数/ 不够/ ,/ 将会/ 被/ 分到/ 共享/ 通道/ 限速/ ,/ 当有/ 限速/ 通道/ 被/ 其他/ 流/ 释放/ 时/ ,/ Meter/ 又/ 可/ 为/ 其/ 分配/ 独立/ 的/ 限速/ 通道/ ,/ 相对/ 于/ 传统/ 的/ 限速/ 方式/ ,/ Meter/ 能够/ 处理/ 更/ 多/ 的/ 流/ ,/ 因此/ 对/ f/ 的/ 限速/ 效果/ 更优/ ./ 本文/ 在/ 课题组/ 已/ 实现/ 的/ OpenFlow1/ ./ 3/ 交换机/ 的/ 基础/ 上/ ,/ 提出/ 了/ 一种/ 高效/ 快速/ 地为/ 流/ 分配/ 限速/ 通道/ 的/ 算法/ DMS/ ,/ 基于/ ONetSwitch/ 硬件/ 开发/ 平台/ ,/ 设计/ 并/ 实现/ 了/ OpenFlow1/ ./ 3/ 标准/ 的/ 每流/ 限速/ 功能模块/ ,/ 并用/ 实际/ 流量/ 对/ 其/ 性能/ 进行/ 了/ 测试/ 评估/ ,/ 结果表明/ 本文/ 提出/ 的/ Meter/ 通过/ 动态/ 共享/ 的/ 方法/ 实现/ 了/ 对/ 每流/ 进行/ 限速/ 的/ 功能/ ,/ 对/ 网络/ 中/ 大量/ 数据流/ 以/ 不同/ 的/ 速率/ 限速/ ,/ 并且/ 在/ 多条/ 流/ 之间/ 共享/ 限速/ 通道/ ./ 本文/ 第/ 2/ 节/ 介绍/ 本文/ DMS/ 算法/ 设计/ 的/ 主要/ 思想/ ;/ 第/ 3/ 节/ 详细描述/ Meter/ 的/ 硬件/ 设计方案/ ;/ 第/ 4/ 节对/ Meter/ 的/ 算法/ 及/ 相关/ 参数/ 进行/ 理论/ 上/ 的/ 分析/ ;/ 第/ 5/ 节/ 介绍/ 硬件/ 实验/ 平台/ ONetSwitch/ 相关/ 内容/ ;/ 第/ 6/ 节/ 通过/ 实验/ 测试/ ,/ 评估/ Meter/ 的/ 每流/ 限速/ 性能/ ;/ 第/ 7/ 节/ 对比/ 每流/ 限速/ 的/ 相关/ 工作/ ;/ 第/ 8/ 节对/ 本文/ 的/ 工作/ 作出/ 总结/ ./ 2DMS/ 基本/ 思想/ 和/ 系统结构/ 2.1/ DMS/ 整体/ 设计/ 思想/ Meter/ 的/ 设计/ 采用/ 软硬件/ 相结合/ 的/ 思想/ ,/ 构建/ 出如图/ 3/ 所示/ 的/ 系统/ ,/ 在/ 软件/ 层/ 维护/ 一张/ 软件/ 限速/ 表/ 以及/ 一个/ 用来/ 实时/ 监测/ 网络/ 中流/ 的/ 速率/ 并/ 与/ 软件/ 限速/ 表中/ 预先/ 设置/ 的/ 限速/ 速率/ 进行/ 比较/ 的/ 速率/ 选择/ 模块/ ;/ 硬件/ 层/ 维护/ 一张/ 硬件/ 流表/ 和/ 每流/ 限速/ 表/ ,/ 若干/ 限速/ 通道/ 以及/ 从/ 限速/ 通道/ 中/ 轮询/ 读取数据/ 包/ 的/ 输出/ 仲裁/ 模块/ ./ 软件/ 层/ 通过/ 写/ 寄存器/ 信号/ 对/ 硬件/ 表/ 进行/ 配置/ ,/ 通过/ 读/ 寄存器/ 信号/ 读取/ 硬件/ 寄存器/ 的/ 信息/ ,/ 统计分析/ 限速/ 流/ 的/ 数量/ 、/ 时延/ 等/ ./ Page4/ 图/ 3Meter/ 软硬件/ 整体/ 架构/ 软件/ 层/ 实时/ 监测/ 网络流量/ ,/ 对/ 每/ 一条/ 进入/ 网络/ 的/ 流/ ,/ 在/ 软件/ 层面/ 计算/ 其/ 速率/ 并/ 查找/ 软件/ 流表/ ,/ 匹配/ 该流/ 对应/ 的/ 表项/ ,/ 该/ 表项/ 中/ 设置/ 若干/ 限速/ 参数/ ,/ 在/ 其中/ 通过/ 比较/ 得到/ 小于/ 流/ 当前/ 速率/ 的/ 最大/ 速率/ 值/ Ri/ ,/ 生成/ 一条/ 硬件/ 流/ 表项/ {/ flow/ _/ id/ ,/ Meter/ _/ id/ }/ 以及/ 一条/ 限速/ 表项/ {/ Meter/ _/ id/ ,/ Ri/ }/ ,/ 表示/ 匹配/ 了/ 流/ 标号/ flow/ _/ id/ 的/ 流以/ 限速/ 表中/ 第/ Meter/ _/ id/ 条/ 表项/ 配置/ 的/ 参数/ Ri/ 进行/ 限速/ ,/ 这/ 两条/ 表项/ 通过/ 写/ 寄存器/ 下发/ 到/ 硬件/ 表上/ ./ 在/ 硬件/ 中/ 匹配/ 了/ flow/ _/ id/ 中/ 的/ 流/ ,/ 根据/ 其/ 指令/ 域/ 中/ 的/ Meter/ _/ id/ 查找/ 硬件/ 每流/ 限速/ 表/ ,/ 得到/ 其/ 对应/ 的/ 限速/ 参数/ ,/ 接着/ 该流/ 被/ 分配/ 到/ 某个/ 限速/ 通道/ ,/ 以/ 查找/ 到/ 的/ 速率/ Ri/ 进行/ 传输/ ;/ 如果/ 软件/ 层/ 没有/ 为流/ 配置/ 限速/ 信息/ ,/ 则/ 该流/ 无需/ 限速/ ,/ 直接/ 转发/ ./ 本文/ 每流/ 限速/ 设计/ 的/ 核心思想/ 即/ 前言/ 所述/ 的/ 动态/ 限速/ 共享/ (/ DMS/ )/ 机制/ ,/ 主要/ 体现/ 在/ 硬件/ 层面/ 的/ 设计/ 上/ ,/ 在/ 一条/ 新流/ 进入/ 网络/ 时为/ 其/ 分配/ 空闲/ 的/ 限速/ 通道/ ,/ 而/ 当/ 一条/ 流在/ 网络/ 中/ 传输/ 结束/ 之后/ ,/ 释放/ 其/ 占用/ 的/ 限速/ 通道/ ,/ 实现/ 分/ 时/ 共享/ ./ 硬件/ Meter/ 通过/ 数据包/ 的/ 所属/ 的/ 流/ 标号/ flow/ _/ id/ 识别/ 出某/ 条流/ ,/ 在/ 其/ 第一个/ 包/ 进入/ 网络/ 时/ ,/ Meter/ 为/ 其/ 分配/ 一个/ 新/ 的/ 限速/ 通道/ ,/ 后继/ 到达/ 的/ 属于/ 该流/ 的/ 数据包/ 都/ 被/ 分配/ 到/ 同一/ 通道/ ;/ 当/ 一个/ 限速/ 通道/ 在/ 一段时间/ Δ/ t/ 之内/ 没有/ 数据传输/ ,/ 则/ 说明/ 占用/ 该/ 限速/ 通道/ 的/ 流/ 已经/ 不再/ 有效/ ,/ 即/ 变为/ “/ 休眠/ ”/ 状态/ ,/ 检测/ 到/ 该/ 通道/ 超时/ ,/ 将/ 其/ 解除/ 占用/ 并/ 加入/ 空闲/ 通道/ 队列/ ,/ 等待/ 分配/ 给/ 新/ 加入/ 的/ 流/ ;/ 而/ 如果/ 该流/ 在/ 一段时间/ 之后/ 重新/ 恢复/ Active/ 状态/ ,/ 则/ 为/ 其/ 重新分配/ 另外/ 一个/ 空闲/ 的/ 限速/ 通道/ ;/ 当/ 所有/ 竞争/ 通道/ 都/ 被/ 占用/ 时/ ,/ 后/ 进入/ 网络/ 的/ 流则/ 被/ 分配/ 到/ 竞争/ 通道/ 中以/ 统一/ 的/ 速率/ 限速/ ,/ 直到/ 有/ 限速/ 通道/ 被/ 释放/ ;/ 无需/ 限速/ 的/ 流/ 被/ 分到/ 非/ 限速/ 通道/ 执行/ 正常/ 转发/ 处理/ ./ Meter/ 使/ 多条/ 流分/ 时/ 共享/ 有限/ 的/ 限速/ 队列/ ,/ 同时/ 保证/ 每流/ 独立/ 限速/ ,/ 不/ 受/ 其余/ 共存/ 流/ 的/ 影响/ ./ 图/ 4/ 所示/ 为用/ Meter/ 实现/ 每流/ 限速/ 的/ 图形/ 化解/ Page5/ 释/ ,/ 举例说明/ Meter/ 如何/ 使/ 多条/ 流/ 动态/ 共享/ 限速/ 通道/ ./ 在/ 图/ 4/ (/ a/ )/ 中/ ,/ t1/ 时段/ ,/ 流/ {/ a/ ,/ b/ ,/ e/ ,/ j/ ,/ r/ ,/ s/ }/ 是/ 网络/ 中/ 处于/ “/ 活动/ ”/ 状态/ 的/ 流/ ,/ 双向/ 箭头/ 线/ 表示/ 该/ 时段/ 限速/ 通道/ 的/ 分配情况/ :/ a/ →/ 1/ ,/ b/ →/ 2/ ,/ e/ →/ 3/ ,/ j/ →/ 4/ ,/ r/ →/ k/ ,/ s/ →/ k/ +/ 1/ ;/ 在/ 图/ 2/ (/ b/ )/ 中/ ,/ t2/ 时段/ ,/ 流/ {/ b/ ,/ e/ ,/ j/ }/ 由/ “/ 活动/ ”/ 状态/ 变为/ “/ 休眠/ ”/ 状态/ ,/ 而/ 新/ 增加/ 了/ “/ 活动/ ”/ 状态/ 的/ 流/ {/ c/ ,/ d/ ,/ i/ ,/ k/ }/ ,/ 这时/ 网络/ 中/ {/ a/ ,/ c/ ,/ d/ ,/ i/ ,/ k/ ,/ r/ ,/ s/ }/ 是/ “/ 活动/ ”/ 状态/ 的/ 流/ ,/ 虚线/ 表示/ 该/ 时段/ 限速/ 通道/ 分配情况/ :/ a/ →/ 1/ ,/ r/ →/ k/ ,/ s/ →/ k/ +/ 1/ 保持/ 不变/ ,/ 将流/ {/ b/ ,/ e/ ,/ j/ }/ 占用/ 的/ 通道/ 释放/ ,/ 分配/ 给/ 流/ {/ c/ ,/ d/ ,/ j/ }/ ;/ 在/ 图/ 2/ (/ c/ )/ 中/ ,/ 当/ 所有/ 的/ 限速/ 通道/ 都/ 被/ 占用/ ,/ 此时/ 新/ 进入/ 网络/ 的/ 流/ {/ t/ ,/ u/ ,/ v/ ,/ w/ }/ 都/ 被/ 分到/ 竞争/ 通道/ 中/ 限速/ ./ 在/ 此例/ 中/ ,/ 通过/ 上述/ 动态/ 限速/ 共享/ 的/ 方法/ ,/ 10/ 条流/ 分时/ 共享/ 7/ 个/ 限速/ 通道/ ,/ 从/ “/ 外部/ ”/ 看/ 实现/ 了/ 对/ 每流/ 的/ 独立/ 限速/ ./ 2.2/ 硬件/ 设计/ 架构/ 如图/ 5/ 所示/ ,/ Meter/ 包含/ 3/ 级/ 功能模块/ :/ (/ 1/ )/ 查表/ 匹配/ 模块/ ./ 对/ 进入/ Meter/ 的/ 流/ ,/ 查找/ 限速/ 表/ 匹配/ 之后/ ,/ 为/ 其/ 配置/ 独立/ 的/ 限速/ 通道/ 并/ 转发/ ;/ (/ 2/ )/ 限速/ 通道/ ./ 对/ 进入/ 该/ 通道/ 的/ 流/ 进行/ 数据包/ 级/ 的/ 限速/ 处理/ ,/ 之后/ 将/ 数据包/ 存放/ 入/ 输出/ 缓存/ 队列/ 中/ ;/ (/ 3/ )/ 输出/ 仲裁/ ./ 从/ 限速/ 通道/ 的/ 输出/ 队列/ 仲裁/ 取出/ 数据/ ,/ 由/ 轮询/ 算法/ 选择/ 一路/ 到/ 输出/ 队列/ ,/ 从/ 相应/ 的/ 输出/ 端口/ 转发/ ./ 2.2/ ./ 1/ 查表/ 匹配/ 模块/ 查表/ 匹配/ 模块/ 提取/ 数据包/ 匹配/ 的/ 限速/ 表项/ 号/ 和/ 流/ 标号/ 信息/ ,/ 分别/ 查找/ 硬件/ 限速/ 表/ 和/ 活动/ 流/ 限速/ 记录表/ ,/ 判定/ 该/ 数据包/ 属于/ 哪一条/ 流/ ,/ 将/ 其/ 分发/ 到/ 该流/ 相应/ 的/ 限速/ 通道/ ,/ 之后/ 在/ 限速/ 表/ 和/ 活动/ 流/ 记录表/ 中/ 注册/ ;/ 而/ 当/ 某个/ 限速/ 通道/ 在/ 一段时间/ Δ/ t/ 之内/ 都/ 没有/ 数据/ 发送/ ,/ 那么/ 说明/ 其/ 对应/ 的/ 流/ 已经/ 传输/ 结束/ ,/ 则/ 该/ 模块/ 接收/ 流/ 的/ 注销/ 请求/ ,/ 释放/ 其/ 占用/ 的/ 限速/ 通道/ ,/ 同时/ 删除/ 其/ 注册/ 信息/ ./ 当/ 数据包/ 连续/ 到达/ 时/ ,/ 并行/ 完成/ 数据包/ 的/ 处理/ 和/ 传输/ ,/ 在/ 传输/ 一个/ 数据包/ 的/ 同时/ ,/ 进行/ 对下/ 一个包/ 的/ 查找/ 匹配/ 和/ 限速/ 通道/ 分配/ 工作/ ./ 2.2/ ./ 2/ 限速/ 通道/ 模块/ 限速/ 通道/ 的/ 主要/ 功能/ 是/ 使用/ 漏桶/ 算法/ 控制数据/ 注入/ 到/ 网络/ 的/ 速率/ ,/ 平滑/ 网络/ 上/ 的/ 突发/ 流量/ ,/ 把/ 输入/ 的/ 突发/ 数据流/ 以/ 一个/ 平缓/ 的/ 速率/ 输出/ ,/ 使得/ 包/ 与/ 包/ 之间/ 以/ 固定/ 的/ 间隔/ 传输/ ./ 该/ 流水/ 级/ 设置/ 3/ 种/ 限速/ 通道/ ,/ 当/ 共存/ 流/ 的/ 数目/ 不/ 超过/ 限速/ 通道/ 的/ 数目/ 时/ ,/ 每个/ 标准/ 的/ 限速/ 通道/ 对应/ 一条/ 独立/ 的/ 流/ ;/ 而/ 当/ 共存/ 流/ 的/ 数目/ 大于/ 限速/ 通道/ 数目/ 时/ ,/ 独立/ 的/ 限速/ 通道/ 已经/ 全部/ 被/ 占用/ 后/ ,/ 后续/ 的/ 流/ 都/ 被/ 分配/ 到/ 该/ 竞争/ 的/ 共享/ 限速/ 通道/ ;/ 对于/ 不/ 需要/ 限速/ 的/ 流/ ,/ 将/ 其/ 分配/ 到/ “/ 虚拟/ ”/ 的/ 限速/ 通道/ 中/ ,/ 保持/ 其/ 输入/ 速率/ ,/ 收到/ 则/ 立即/ 转发/ ./ 2.2/ ./ 3/ 输出/ 仲裁/ 查表/ 匹配/ 模块/ 将/ 输入/ 数据/ 分发/ 到/ n/ 个/ 通道/ 并行/ 限速/ ,/ 限速/ 完成/ 后/ 暂/ 存在/ 相应/ 的/ n/ 个/ 输出/ 队列/ 中/ ,/ 而/ 输出/ 只能/ 处理/ 一路/ 数据/ ,/ 因此/ 需要/ 在/ 这些/ 队列/ 中/ 执行/ 调度/ 仲裁/ ./ 由于/ 并非/ 所有/ 的/ 队列/ 都/ 同时/ 有/ 数据/ 要/ 输出/ ,/ 在/ 传统/ 的/ 轮询/ 调度/ 机制/ 中/ ,/ 大部分/ 的/ 时间/ 都/ 在/ 询问/ 输出/ 队列/ 是否/ 非空/ ,/ 当/ 一个/ 队列/ 传输/ 完成/ 之后/ ,/ 另/ 一个/ 队列/ 已经/ 有/ 了/ 数据/ ,/ 而/ 循环/ 队列/ 指针/ 还/ 未/ 询问/ 到/ 该/ 队列/ ,/ 从而/ 导致/ 该/ 队列/ 空等/ ,/ 增加/ 了/ 传输/ 时延/ ,/ 效率/ 低下/ ./ 本文/ 输出/ 仲裁/ 模块/ 的/ 设计/ 中/ ,/ 增加/ 非空/ 队列/ 链表/ 机制/ ,/ 同样/ 用/ 轮询/ 算法/ 询问/ 队列/ ,/ 当有/ 队列/ 非空时/ ,/ 立即/ 将/ 其/ 加入/ 到/ 输出/ 队列/ 链表/ 中/ ,/ 等待/ 排在/ 它/ 之前/ 的/ 队列/ 发送/ 完/ 数据/ 之后/ ,/ 就/ 可以/ 立即/ 从/ 该/ 队列/ 中/ 取出/ 数据/ ,/ 提高/ 了/ 输出/ 效率/ ./ 在/ 上述/ 每流/ 限速/ Meter/ 的/ 设计/ 的/ 3/ 级/ 模块/ 中/ ,/ 查表/ 匹配/ 为/ 每流/ 分配/ 限速/ 通道/ 是/ 其中/ 最/ 复杂/ 的/ 逻辑/ ,/ 主要/ 涉及/ 到/ 两个/ 重点/ 解决/ 的/ 难题/ :/ (/ 1/ )/ 如何/ 快速/ 判定/ 新/ 进入/ 网络/ 的/ 数据包/ 属于/ 哪一条/ 流/ ?/ (/ 2/ )/ 对/ 每个/ 进入/ 网络/ 的/ 数据包/ ,/ 在/ 转发/ 之前/ 都/ 需要/ 解析/ 包头/ 并/ 查表/ 为/ 其/ 分配/ 限速/ 通道/ ,/ 这/ 将/ 造成/ 很大/ 的/ 延迟/ ,/ 如何/ 最大/ 程度/ 上/ 降低/ 延迟/ ,/ 提高/ 处理/ 效率/ ?/ 针对/ 上述/ 两个/ 问题/ ,/ 本文/ 通过/ 两项/ 重要/ 技术/ 来/ 解决/ ,/ 即/ 硬件/ 限速/ 表/ 和/ 活动/ 流/ 记录表/ 的/ 二级/ 查找/ 技术/ 以及/ 流水/ 处理/ 数据包/ 技术/ ,/ 这/ 两/ 部分/ 内容/ 将/ 在/ 第/ 3/ 节中/ 分别/ 作/ 详细/ 说明/ ./ 3Meter/ 详细/ 设计方案/ 3.1/ 二级/ 查找/ 技术/ Meter/ 为/ 每流/ 配置/ 一个/ 限速/ 通道/ ,/ 维护/ 一张/ 由/ 限速/ 通道/ 号/ (/ 0/ ,/ 1/ ,/ …/ ,/ n/ -/ 1/ )/ 到流/ 标号/ 的/ 直接/ 映射/ 表/ ,/ 即/ 活动/ 流/ 记录表/ ,/ 对/ 每个/ 进入/ Meter/ 处理/ 的/ 数据包/ ,/ 根据/ 其/ 携带/ 的/ 所属/ 流/ 标号/ ,/ 判断/ 是否/ 已为/ 其/ 分配/ Page6/ 了/ 限速/ 通道/ ,/ 如果/ 是/ ,/ 则/ 直接/ 将/ 其/ 转发/ 到流/ 标号/ 对应/ 的/ 限速/ 通道/ 传输/ ,/ 否则/ 说明/ 其为/ 一条/ 新流/ 的/ 第/ 1/ 个/ 数据包/ ,/ 为/ 之/ 分配/ 空闲/ 的/ 限速/ 通道/ ,/ 将/ 新/ 的/ 映射/ 关系/ 加入/ 活动/ 流/ 记录表/ 中/ ,/ 后续/ 到达/ 的/ 属于/ 该流/ 的/ 数据包/ 则/ 能/ 匹配/ 该项/ ,/ 转发/ 到/ 相应/ 限速/ 通道/ ./ 由于/ 流/ 标号/ 是/ 不/ 连续/ 的/ ,/ 如果/ 顺序/ 查找/ 活动/ 流/ 记录表/ ,/ 则/ 平均/ 每包/ 需要/ 耗费/ n/ // 2/ 个/ 时钟/ 周期/ ,/ 最坏/ 情况/ 要/ 将/ 整张/ 表/ 搜索/ 一遍/ ,/ 这种/ 情况/ 下/ 网络/ 中/ 的/ 延时/ 将会/ 非常/ 大/ ./ Meter/ 采用/ 二级/ 查找/ 的/ 方式/ ,/ 如图/ 6/ 所示/ ,/ 左侧/ 限速/ 表中/ Meter/ 号/ 表示/ 限速/ 表/ 的/ 表项/ 编号/ ,/ 活动/ 流链/ 头列/ 表示/ 匹配/ 了/ 该/ 限速/ 表项/ 的/ 活动/ 流/ 链表/ 头/ 在/ 活动/ 流/ 记录表/ 中/ 的/ 编号/ ;/ 右侧/ 活动/ 流/ 记录表/ 中/ ,/ 限速/ 通道/ 号列/ 表示/ 限速/ 通道/ 的/ 编号/ ,/ 流/ 标号/ 列/ 表示/ 分配/ 到/ 该/ 通道/ 限速/ 的/ 活动/ 流/ 标号/ ,/ 后继/ 空闲/ 通道/ 列是/ 链表/ 指针/ ,/ 指向/ 匹配/ 同一/ 限速/ 表项/ 的/ 下/ 一条/ 活动/ 流/ ./ 因为/ Meter/ 可以/ 使/ 多条/ 流/ 共享/ 一条/ 限速/ 表项/ ,/ 限速/ 表为/ 每/ 一个/ 表项/ 维护/ 一个/ 链表/ ,/ 链式/ 存储/ 匹配/ 该/ 限速/ 表项/ 的/ 所有/ 活动/ 流/ 对应/ 的/ 限速/ 通道/ 号/ ,/ 在/ 限速/ 表项/ 记录/ 链头/ ;/ 在/ 活动/ 流/ 记录表/ 中将/ 对应/ 同一/ 限速/ 表项/ 的/ 所有/ 限速/ 通道/ 链接/ ,/ 那么/ 每包/ 进入/ Meter/ 之后/ ,/ 先/ 直接/ 映射/ 查找/ 限速/ 表/ ,/ 再/ 由/ 链头/ 开始/ 顺序/ 查找/ 对应/ 的/ 链表/ ,/ 直至/ 找到/ 匹配/ 的/ 流/ 标号/ 或/ 至/ 链尾/ ,/ 结束/ 返回/ 查找/ 结果/ ,/ 相比/ 于/ 顺序/ 查找/ 方式/ 大大降低/ 了/ 时间/ 复杂度/ ./ 3.2/ 流水/ 处理/ 在/ 硬件资源/ 足够/ 的/ 情况/ 下/ ,/ 流水/ 处理/ 技术/ 能够/ 显著/ 地/ 提高/ 系统/ 的/ 效率/ ./ 将/ 包/ 的/ 处理过程/ 分成/ 两段/ 流水线/ ,/ 在/ 传输/ 一个/ 数据包/ 的/ 同时/ ,/ 进行/ 下/ 一个包/ 的/ 限速/ 通道/ 号/ 的/ 分配/ 处理/ 工作/ ,/ 降低/ 数据包/ 在/ 该/ 模块/ 处理/ 时/ 的/ 总/ 时延/ 以/ 提高效率/ ./ 如图/ 7/ 所示/ ,/ 状态机/ 1/ 和/ 状态机/ 2/ 分别/ 为/ 流水/ 阶段/ 1/ 和/ 2/ ,/ 即/ 限速/ 通道/ 的/ 分配/ 与/ 数据包/ 的/ 传输/ ,/ 阴影/ 箭头/ 表示/ 一个包/ 的/ 处理/ 流程/ ./ 在/ 状态机/ 2/ 启动/ 之前/ ,/ 先/ 检测/ 当前/ 需要/ 输出/ 的/ 数据包/ 是否/ 已经/ 分配/ 好/ 了/ 正确/ 的/ 限速/ 通道/ ,/ 如果/ 是/ ,/ 则/ 直接/ 将/ 数据包/ 传输/ 给/ 下/ 一级/ 模块/ ,/ 否则/ 等待/ 上述/ 过程/ (/ 即/ 状态机/ 1/ )/ 完成/ 之后/ 才/ 可/ 启动/ 数据/ 的/ 传输/ ;/ 在/ 一个/ 数据包/ 开始/ 传输/ 时/ ,/ 如果/ 输入/ 队列/ 非空/ ,/ 则/ 说明/ 有/ 新/ 的/ 包要/ 处理/ ,/ 启动/ 状态机/ 1/ ,/ 为/ 下/ 一个包/ 的/ 按时/ 传输/ 做好/ 准备/ ;/ 每个/ 流水/ 段/ 完成/ 一次/ 数据包/ 的/ 处理/ 之后/ ,/ 都/ 需要/ 检测/ 启动/ 条件/ 是否/ 成立/ ,/ 如果/ 是/ ,/ 则/ 进行/ 下/ 一次/ 处理/ ,/ 否则/ 等待/ 触发/ 信号/ ./ 3.3/ 输出/ 队列/ 调度/ Meter/ 中/ 设置/ 多个/ 限速/ 通道/ ,/ 如/ 62/ 个/ 限速/ 通道/ ,/ 对应/ 64/ 个/ 输出/ 队列/ ,/ 包括/ 一个/ 共享/ 限速/ 队列/ 和/ 一个/ 非/ 限速/ 的/ 队列/ ,/ 输出/ 管理/ 模块/ 一次/ 只能/ 从/ 一个/ 队列/ 读取数据/ ,/ 继而/ 转发/ 到/ 相应/ 端口/ ./ 在/ 之前/ 的/ 工作/ 中/ ,/ 每个/ 输出/ 端口/ 对应/ 一个/ 输出/ 队列/ ,/ 由于/ 硬件平台/ 上仅/ 有/ 8/ 个/ 输出/ 端口/ ,/ 使用/ Round/ -/ Robin/ 算法/ 即/ 可以/ 有效/ 地/ 处理/ 各/ 队列/ 中/ 的/ 数据包/ ,/ 使/ 其/ 按序/ 从/ 对应/ 端口/ 转发/ 出去/ ./ 然而/ ,/ 在/ Meter/ 中有/ 64/ 个/ 输出/ 队列/ ,/ 而且/ 由于/ 进行/ 了/ 速率/ 控制/ 而/ 导致/ 多个/ 队列/ 驻留/ 数据包/ ./ 按照/ 轮询/ 各/ 队列/ 控制/ 数据包/ 输出/ 的/ 算法/ ,/ 造成/ 部分/ 输出/ 队列/ “/ 空等/ ”/ ,/ 从而/ 加大/ 了/ 数据包/ 的/ 时延/ ,/ 尤其/ 是/ 对/ 无需/ 限速/ 的/ 数据包/ ./ 在/ 本文/ 中/ ,/ 通过/ 设置/ “/ 非空/ 队列/ 链/ ”/ 有效/ 地/ 解决/ 这一/ 问题/ ./ 对于/ 有/ 数据包/ 的/ 队列/ ,/ 维护/ 一个/ 链表/ ,/ 当有/ 队列/ 非空时/ ,/ 将/ 其/ 加入/ 链尾/ ,/ 当/ 从/ 一个/ 队列/ 中/ 取出/ 数据包/ 后/ ,/ 将/ 其/ 从/ 链头/ 删除/ ,/ 继续/ 从/ 其/ 后续/ 非空/ 队列/ 中/ 读取数据/ 包/ ./ 对于/ 有/ 64/ 个/ 限速/ 通道/ 的/ Meter/ ,/ 输出/ 队列/ 的/ 有效/ 调度/ 可/ 提高/ Meter/ 的/ 效率/ ,/ 为流/ 提供/ 更/ 可靠/ 的/ 时延/ 保证/ ./ 4Meter/ 性能/ 分析/ 4.1/ 二级/ 查找/ 表/ 的/ 时间/ 复杂度/ 限速/ 表/ 的/ 查找/ 是/ 直接/ 映射/ 查找/ ,/ 时间/ 为/ 常量/ 1/ ,/ 而/ 线性/ 链表/ 的/ 查找/ 与其/ 长度/ L/ 有关/ ,/ 其中/ L/ 是/ 由/ 软件/ 配置/ 的/ “/ 最多/ 有/ L/ 条流/ 共享/ 一条/ 限速/ 表项/ ”/ 所决/ Page7/ 定/ 的/ ,/ 而/ 与/ 活动/ 流/ 记录表/ 的/ 长度/ 无关/ ./ 为/ 减少/ L/ 的/ 值/ ,/ 优化/ 查找时间/ ,/ 将/ 部分/ 限速/ 表项/ 冗余/ ,/ 即/ 多个/ 限速/ 表项/ 对应/ 同一/ 限速/ 速率/ ,/ 可/ 成倍/ 减小/ 链表/ 的/ 长度/ ./ 如有/ N/ 条流/ 需要/ 以/ 同一/ 速率/ R/ 限速/ ,/ 则/ 将/ 这/ N/ 条流/ 分为/ 两组/ ,/ 在/ 硬件/ 限速/ 表中/ 对应/ 两条/ 限速/ 速率/ 都/ 为/ R/ 的/ 表项/ ,/ 那么/ 活动/ 流链/ 的/ 长度/ 即可/ 由/ N/ 降低/ 至/ N/ // 2/ ,/ 缩短/ 了/ 一半/ 的/ 查找时间/ ./ 4.2/ 冲突/ 流/ 与/ 限速/ 通道/ 数量/ 之间/ 的/ 折衷/ 网络/ 中/ 共存/ 流/ 的/ 数目/ 时刻/ 在/ 变化/ ,/ 限速/ 通道/ 的/ 数量/ 并/ 不/ 总是/ 满足/ 需求/ ./ 当流/ 的/ 数目/ 大于/ 限速/ 通道/ 数时/ ,/ 如/ 有/ 一条/ 新流/ 进入/ 网络/ 中/ ,/ 则/ 所有/ 的/ 限速/ 通道/ 都/ 被/ 占用/ ,/ 在/ 这种/ 情况/ 下/ ,/ 放松/ “/ 每流/ 独立/ 限速/ ”/ 的/ 需求/ ,/ 单独/ 开辟/ 一条/ 共享/ 的/ 限速/ 通道/ ,/ 当/ 无/ 空闲/ 的/ 限速/ 通道/ 时/ ,/ 该/ 通道/ 处理/ 在/ 这/ 之后/ 所有/ 的/ 新流/ ,/ 称之为/ 冲突/ 流/ ,/ 直到/ 有/ 通道/ 被/ 释放/ ./ 冲突/ 流/ 的/ 数量/ C/ 与/ 限速/ 通道/ 的/ 数量/ R/ 存在/ 着/ 负/ 关系/ ,/ 当/ R/ 值/ 增加/ 时/ ,/ C/ 值/ 减少/ ;/ 而/ 当/ R/ 值/ 减少/ 时/ ,/ C/ 值/ 增加/ ./ 需要/ 根据/ 对/ 实际/ 流量/ 的/ 测试/ ,/ 找到/ 这/ 二者之间/ 的/ 平衡点/ ,/ 以/ 实现/ 最优/ 的/ 性能/ ,/ 既/ 能/ 充分保证/ 每流/ 限速/ ,/ 又/ 能/ 最大/ 程度/ 上/ 减少/ 硬件资源/ 的/ 消耗/ ./ 5/ 实验/ 环境/ 本文/ 的/ 实验/ 环境/ ,/ 是/ 基于/ 课题组/ 和/ 叠/ 锶/ MeshSr/ 联合开发/ 的/ ONetSwitch45/ 网络/ 创新/ 平台/ [/ 11/ ]/ ,/ 如图/ 8/ 所示/ ,/ ONetSwitch45/ 是/ 一个/ 基于/ FPGA/ 的/ 网络/ 创新/ 实验/ 平台/ ,/ 其/ 核心/ 器件/ 是/ Zynq7045SoC/ [/ 12/ ]/ ,/ 其/ 内部/ 包含/ 一个/ ARMCortex/ -/ A9/ 双核/ CPU/ 以及/ 一个/ KintexFPGA/ ,/ ARM/ 处理器/ 运行/ 在/ 667MHz/ ,/ 具有/ 较强/ 处理/ 能力/ ,/ 能够/ 运行/ 完整/ 的/ Linux/ 操作系统/ ;/ 同时/ FPGA/ 提供/ 约/ 355KLogicCell/ ,/ 是/ 传统/ 的/ NetFPGA/ 所/ 提供/ 逻辑/ 资源/ 的/ 6/ 倍/ 以上/ ,/ 能够/ 支撑/ 更加/ 复杂/ 的/ 硬件/ 逻辑/ ,/ 内部/ 能够/ 提供/ 超过/ 40GB/ 网络/ 数据/ 的/ 处理/ 能力/ ,/ 方便/ 研究者/ 在/ 其/ 内部/ 编写/ 逻辑/ 进行/ 硬件加速/ ,/ 两者之间/ 使用/ 高速/ 总线/ AMBA/ 互联/ ./ ONetSwitch45/ 板卡/ 资源/ 还/ 包括/ 72MBQDR2SRAM/ ,/ 提供/ 约/ 48Gbps/ 的/ 吞吐/ 率/ 用于/ 线速/ 网络/ 数据/ 缓存/ 或/ 其他/ 高速/ 应用/ ./ 与/ 传统/ 插卡式/ 的/ 网络/ 实验/ 平台/ 相比/ ,/ ONetSwitch/ 开发/ 平台/ 无需/ 额外/ 匹配/ 服务器/ ,/ 单板/ 可以/ 独立/ 工作/ ./ 同时/ ONetSwitch/ 采用/ 开放/ 的/ 体系结构/ 设计/ ,/ 允许/ 使用者/ 针对/ 需要/ 进行/ 硬件/ 或者/ 软件/ 编程/ ,/ 同时/ 尽可能/ 地/ 复用/ 已有/ 的/ 设计/ ./ 硬件/ 提供/ 丰富/ 的/ 扩展/ 接口/ ,/ FMC/ 高速/ 板间/ 互连/ 接口/ ,/ 可以/ 接驳/ 功能/ 扩展卡/ ,/ 或者/ 进行/ 板间/ 互连/ ;/ Mini/ -/ PCIe/ 扩展/ 接口/ 可以/ 支持/ 对应/ 标准/ 模块/ ,/ 以及/ 控制/ 通信接口/ 针对/ 多种/ 常见/ 开发板/ 进行/ 连接/ ./ 研究/ 人员/ 可/ 根据/ 需要/ 扩展/ 对应/ 模块/ ,/ 来/ 支持/ 数据中心/ 网络/ [/ 13/ ]/ 、/ 移动/ 互联网/ 、/ 命名/ 数据网络/ 等/ 研究/ 以及/ 软件/ 定义/ 网络/ 研究/ 与/ 创新/ 应用/ ,/ 基于/ ONetSwitch/ 搭建/ 理想/ 的/ 网络/ 创新/ 平台/ ,/ 进行/ 网络/ 创新/ 开发/ ./ 同时/ ,/ ONetSwitch/ 包含/ 4/ 个/ 最高/ 支持/ 10G/ -/ BaseR/ 等/ 万兆/ 以太网/ 协议/ 以及/ 多种/ 光/ 协议/ 的/ SFP/ +/ 接口/ 与/ 4/ 个/ 三速/ 自/ 适应/ 以太网/ 接口/ ,/ 用于/ 适应/ 不同/ 的/ 实验/ 环境/ ,/ 如图/ 9/ 所示/ ./ 在此之前/ ,/ 由/ 斯坦福大学/ 研发/ 的/ NetFPGA/ [/ 14/ ]/ 作为/ 一套/ 灵活/ 易用/ 的/ 网络/ 实验/ 平台/ 在/ 全球/ 有着/ 广泛/ 的/ 部署/ ,/ 但是/ 随着/ 网络带宽/ 提高/ 与/ 应用/ 复杂化/ ,/ 尤其/ 是/ SDN/ 成为/ 研究/ 的/ 主流/ ,/ NetFPGA/ 已经/ 无法/ 满足/ 对/ 新/ 协议/ 开发/ 的/ 资源/ 支持/ ./ ONetSwitch45/ 与/ NetFPGA/ 相比/ ,/ 提供/ 了/ 超过/ 5/ 倍/ 的/ 片/ 上/ 资源/ ,/ 以及/ 更/ 高容量/ 与/ 带宽/ 的/ 片外/ 存储/ ./ 在/ 提供/ 千兆/ 以太网/ 接口/ 的/ 同时/ ,/ 额外/ 增加/ 4/ 个/ 支持/ 万兆/ 以太网/ 协议/ 的/ SFP/ +/ 接口/ ,/ 支持/ 更/ 高速/ 的/ 网络/ 实验/ ./ 在/ 主机/ 接口/ 上/ ,/ ONetSwitch/ 所/ 提供/ 的/ 带宽/ 也/ 完全/ 满足/ 万兆/ 流量/ 实时处理/ 的/ 需求/ ,/ 支持/ 主机/ 应用/ 创新/ ,/ 而/ NetFPGA/ 受限于/ PCI/ 接口/ 的/ 物理性能/ 无法/ 提供/ 超过/ 千兆/ 的/ 主机/ 应用/ 支持/ ./ 与/ NetFPGA10G/ 版本/ 相比/ ,/ ONetSwitch/ 能够/ 友善/ 地/ 兼容/ 原有/ 社区/ 的/ 应用/ ,/ 无需/ 做过/ 多/ 修改/ ,/ 同时/ 片上/ 资源/ 更加/ 丰富/ ,/ 易于/ 对/ 新/ 应用/ 进行/ 支持/ ./ 在/ 功耗/ 估计/ 方面/ ,/ ONetSwitch/ 也/ 可以/ 提供/ 整体/ 和/ 局部/ 电源/ 功耗/ 测量/ 以及/ 绿色/ 网络/ 的/ 支持/ ,/ 这/ 也/ 是/ NetFPGA/ 系列/ 所/ 没有/ 涉及/ 到/ 的/ ./ Page8/ 图/ 9ONetSwitch45/ 开发/ 平台/ 结构/ 6/ 测试/ 评估/ 实验/ 测试/ 分为/ 3/ 个/ 部分/ ,/ 分别/ 是/ :/ (/ 1/ )/ 用/ Xcap/ 工具/ 构造/ 3/ 种/ 模拟/ 流量/ ,/ 分别/ 包含/ 64/ 、/ 128/ 和/ 256/ 条流/ ,/ 即/ 流量/ SF1/ ~/ SF3/ (/ SimulationFlow/ )/ ,/ 以/ 恒定/ 的/ 速率/ 发送/ ,/ 限速/ 分为/ 4/ 个/ 等级/ :/ 0.9/ Mbps/ 、/ 0.8/ Mbps/ 、/ 0.7/ Mbps/ 、/ 0.6/ Mbps/ ,/ 用/ Wireshark/ 抓包/ 工具/ 统计分析/ 各条/ 流/ 限速/ 后/ 的/ 速率/ 分布/ ;/ (/ 2/ )/ 将/ 网络/ 中/ 的/ 实际/ 流量/ ,/ 分别/ 以/ 不同/ 速率/ 发送/ ,/ 用/ Wireshark/ 统计分析/ 各流/ 的/ 速率/ ,/ 对/ 突发/ 流/ 计算/ 得到/ 其/ 限速/ 参数/ ,/ 配置/ 硬件/ 限速/ 表/ ,/ 对比/ 限速/ 前后/ 的/ 流量/ 速率/ ,/ 并且/ 比较/ Meter/ 对/ 不同/ 流/ 的/ 限速/ 效果/ ;/ (/ 3/ )/ 用/ Smartbits/ 以/ 不同/ 的/ 速率/ 发送/ 数据包/ ,/ 测试/ 在/ 高速/ 网络/ 环境/ 下/ Meter/ 的/ 限速/ 性能/ ./ 6.1/ 模拟/ 流量/ 测试/ 用/ tcpreplay/ 发包/ 工具/ 以/ 恒定/ 速率/ 1.87/ Mbps/ 分别/ 发送/ 构造/ 的/ 流量/ SF1/ ~/ SF3/ ,/ 硬件/ 限速/ 表中/ 配置/ 16/ 条/ 表项/ ,/ 则/ 这/ 3/ 种/ 流量/ 分别/ 有/ 4/ 、/ 8/ 和/ 16/ 条流/ 共享/ 同/ 一条/ 限速/ 表项/ ,/ 限速/ 参数/ 的/ 配置/ 与/ 流/ 标号/ flow/ _/ id/ 的/ 关系/ 分为/ 4/ 个/ 等级/ :/ flow/ _/ id/ %/ 4/ =/ =/ 0/ :/ 限速/ 到/ 0.6/ Mbps/ ;/ flow/ _/ id/ %/ 4/ =/ =/ 1/ :/ 限速/ 到/ 0.7/ Mbps/ ;/ flow/ _/ id/ %/ 4/ =/ =/ 2/ :/ 限速/ 到/ 0.8/ Mbps/ ;/ flow/ _/ id/ %/ 4/ =/ =/ 3/ :/ 限速/ 到/ 0.9/ Mbps/ ./ 6.1/ ./ 1/ 各流/ 限速/ 后/ 的/ 速率/ 分布/ 在/ 限速/ 通道/ 数目/ 为/ 62/ 的/ 情况/ 下/ ,/ 分别/ 发送/ 流量/ SF1/ ~/ SF3/ ,/ 得到/ 正确/ 的/ 限速/ 结果/ ,/ 如图/ 10/ 所示/ ,/ 横坐标/ 表示/ 模拟/ 流量/ 中/ 各流/ 的/ 标号/ ,/ 纵坐标/ 表示/ 经过/ Meter/ 处理/ 后/ 各流/ 的/ 速率/ ,/ 竞争/ 限速/ 通道/ 的/ 限速/ 速率/ 设置/ 较大/ ,/ 图中/ 速率/ 高/ 的/ 流即/ 表示/ 被/ 分配/ 到/ 竞争/ 限速/ 通道/ 的/ 流/ ,/ 即/ 冲突/ 流/ ./ 运行/ 结果显示/ ,/ 对于/ 有/ 62/ 个/ 限速/ 通道/ 的/ Meter/ ,/ 当/ 分别/ 发送/ 流量/ SF1/ ~/ SF3/ 时/ ,/ 分别/ 有/ 2/ 、/ 20/ 和/ 61/ 条流/ 被/ 分到/ 竞争/ 通道/ ./ 同时/ ,/ 对于/ 流量/ 2/ 和/ 流量/ 3/ ,/ 当/ 第/ 63/ 条流/ 进入/ Meter/ 时/ ,/ 所有/ 限速/ 通道/ 都/ 已/ 被/ 占用/ ,/ 此时/ 后续/ 到达/ 的/ 流/ 都/ 被/ 分配/ 到/ 竞争/ 通道/ ,/ 但是/ 经过/ 一段时间/ 后/ ,/ 最先/ 到达/ 的/ 流变/ 为/ “/ 休眠/ ”/ 状态/ ,/ 释放/ 其/ 占用/ 的/ 限速/ 通道/ ,/ 后续/ 的/ 流则/ 可/ 被/ 分到/ 空闲/ 的/ 通道/ 执行/ 限速/ ,/ 从而/ 实现/ 了/ 多流/ 动态/ 共享/ 限速/ 通道/ ./ 6.1/ ./ 2/ 限速/ 等级/ 与/ 冲突/ 流/ 数量/ 关系/ 在/ 限速/ 通道/ 数目/ 为/ 62/ 的/ 情况/ 下/ ,/ 分别/ 以/ 1.44/ Mbps/ ~/ 1.94/ Mbps/ 的/ 速率/ 发送/ 上述/ 3/ 种/ 流量/ ,/ 对/ 各流/ 的/ 限速/ 配置/ 保持/ 不变/ ,/ 统计分析/ 在/ 不同/ 限速/ Page9/ 等级/ 下/ 被/ 分配/ 到/ 竞争/ 通道/ 的/ 流/ 数量/ ,/ 得到/ 如图/ 11/ 所示/ 结果/ ,/ 横坐标/ 表示/ 模拟/ 流量/ 的/ 发送/ 速率/ ,/ 纵坐标/ 表示/ 冲突/ 流/ 数目/ ,/ 从上到下/ 3/ 条/ 折线/ 分别/ 对应/ 流量/ SF1/ ~/ SF3/ ./ 令/ r/ (/ ini/ )/ 为流/ 的/ 原始/ 速率/ ,/ r/ (/ lim/ )/ 为流/ 限速/ 后/ 的/ 速率/ ,/ 则/ 限速/ 等级/ L/ 定义/ 为/ r/ (/ ini/ )/ // r/ (/ lim/ )/ ,/ 例如/ ,/ 流/ 原始/ 速率/ 为/ 1.44/ Mbps/ ,/ 配置/ 限速/ 速率/ 为/ 0.9/ Mbps/ ,/ 则/ L/ =/ 1.6/ ,/ 对/ 一条/ 流/ 的/ 限速/ 等级/ 越大/ ,/ 则/ 该流/ 占用/ 限速/ 通道/ 的/ 时间/ 就/ 相对/ 较长/ ./ 如图/ 11/ 所示/ ,/ 随着/ 发送/ 速率/ 的/ 增加/ ,/ Meter/ 对流/ 的/ 限速/ 等级/ 由/ 平均/ 1.9/ 增至/ 2.6/ ,/ 被/ 分到/ 竞争/ 通道/ 的/ 流/ 数量/ 随着/ 限速/ 等级/ 的/ 加大/ 而/ 呈/ 线性/ 增加/ 趋势/ ./ 6.1/ ./ 3/ 限速/ 通道/ 数/ 与/ 冲突/ 流数/ 的/ 关系/ 分别/ 用/ 14/ 、/ 30/ 和/ 62/ 个/ 限速/ 通道/ 对/ 上述/ 构造/ 的/ 流量/ SF1/ ~/ SF3/ 进行/ 限速/ 测试/ ,/ 统计分析/ 在/ 不同/ 限速/ 通道/ 数下/ 被/ 分到/ 竞争/ 通道/ 的/ 流/ 数量/ ,/ 得到/ 如表/ 1/ 所示/ 共/ 9/ 组/ 实验/ 结果/ ,/ 如/ 对于/ 64/ 条流/ ,/ 14/ 个/ 限速/ 通道/ 的/ 一组/ 数据/ ,/ “/ 14/ // 50/ ”/ 中/ 14/ 表示/ 正确/ 限速/ 的/ 流/ (/ 即/ 限速/ 流/ )/ 的/ 数目/ ,/ 而/ 50/ 表示/ 被/ 分到/ 竞争/ 通道/ 的/ 流/ (/ 即/ 冲突/ 流/ )/ 数目/ ./ 表/ 1/ 模拟/ 流量/ 冲突/ 流数/ 与/ 限速/ 通道/ 数/ 的/ 关系/ 流类/ 64flow128flow256flow/ 由表/ 1/ 可见/ ,/ 随着/ 限速/ 通道/ 数量/ 的/ 增长/ ,/ 被/ 正确/ 限速/ 的/ 流/ 数目/ 呈/ 相同/ 的/ 增长/ 趋势/ ,/ 而/ 冲突/ 流/ 数量/ 呈/ 递减/ 趋势/ ;/ 并且/ 在/ 限速/ 通道/ 数/ 不变/ 的/ 情况/ 下/ ,/ 网络/ 中/ 需要/ 限速/ 的/ 流/ 数量/ 越/ 多/ ,/ 则/ 被/ 分到/ 竞争/ 通道/ 的/ 流/ 数量/ 也/ 就/ 越/ 多/ ./ 6.2/ 实际/ 流量/ 测试/ 用/ 网络/ 中/ 真实/ 的/ 流量/ 对/ Meter/ 进行/ 测试/ ,/ ONetCard/ 有/ 4/ 个/ 千兆/ 以太网/ 接口/ ,/ 分别/ 发送/ 同一/ 流量/ 到/ 1/ 、/ 2/ 、/ 3/ 、/ 4/ 个/ 网口/ ,/ 从而/ 可以/ 构造/ 出/ 4/ 种/ 流量/ RF1/ ~/ RF4/ (/ RealFlow/ )/ ,/ 分别/ 包含/ 32/ 、/ 64/ 、/ 96/ 和/ 128/ 条/ 需要/ 限速/ 的/ 流/ ./ 用/ Wireshark/ 工具/ 统计/ 在/ 限速/ 通道/ 数/ 变化/ 的/ 情况/ 下/ ,/ 多种/ 流量/ 在/ Meter/ 中/ 的/ 处理/ 情况/ ,/ 并/ 最终/ 分析/ 得到/ 影响/ Meter/ 对流/ 限速/ 性能/ 的/ 因素/ ./ 6.2/ ./ 1Meter/ 限速/ 性能/ 分析/ 首先/ ,/ 在/ 62/ 个/ 限速/ 通道/ 的/ 情况/ 下/ ,/ 发送/ 流量/ RF1/ ,/ 得到/ 限速/ 前后/ 的/ 速率/ 比较/ 结果/ ,/ 如图/ 12/ 所示/ ,/ 取/ 其中/ 3/ 条/ 进行/ 分析/ ,/ 横坐标/ 表示/ 实际/ 流/ 和/ 限速/ 流中/ 依次/ 到达/ 的/ 数据包/ ,/ 纵坐标/ 表示/ 用/ Wireshark/ 统计/ 的/ 每个/ 数据包/ 到达/ 时间/ ,/ 和/ 标记/ 分别/ 表示/ 限速/ 前后/ 的/ 流/ ./ 经过/ Meter/ 限速/ 处理/ 后/ 的/ 各流/ 相较/ 于/ 初始值/ ,/ 两个/ 数据包/ 之间/ 的/ 间隔/ 增大/ ,/ 表明/ 流速/ 得到/ 控制/ ,/ 即/ 抑制/ 了/ 突发/ 流/ 的/ 传输/ ,/ 且/ 限速/ 后/ 曲线/ 渐趋/ 平缓/ ,/ 数据流/ 的/ 速率/ 在/ 一段时间/ 内/ 基本/ 保持/ 不变/ ,/ 起到/ 了/ 平滑/ 网络流量/ 的/ 作用/ ./ 在/ 图/ 12/ 中/ ,/ 只/ 分析/ 了/ Meter/ 对/ 少量/ 数据/ 流量/ 的/ 限速/ 结果/ ,/ 对比/ 了/ 未/ 限速/ 和/ 限速/ 时/ 数据包/ 到达/ 的/ 时间/ ;/ 然而/ ,/ 在/ 高速/ 网络/ 环境/ 下/ ,/ 要/ 处理/ 大量/ 的/ 数据流/ ,/ 分别/ 发送/ 1s/ 和/ 45s/ 的/ 实际/ 流量/ ,/ 统计/ 一条/ 流中/ 最小/ 的/ 两个/ 包/ 之间/ 时间/ 间隔/ 是/ 0.00013/ s/ ,/ 然后/ 设置/ 限速/ 参数/ 使得/ 时间/ 间隔/ 为/ 0.001/ s/ ,/ 相当于/ 最高/ 以/ 1/ // 10/ 的/ 等级/ 限速/ ,/ 在/ 发送/ 1s/ 的/ 实际/ 流量/ 时/ ,/ 该流/ 包含/ 244/ 个/ 数据包/ ,/ 限速/ 后/ 收到/ 55/ 个/ ;/ 在/ 发送/ 45s/ 的/ 实际/ 流量/ 时/ ,/ 该流/ 包含/ 9456/ 个/ 数据包/ ,/ 收到/ 2470/ 个/ ,/ 限速/ 与/ 不/ 限速/ 的/ 时延/ 对比/ 与/ 图/ 13/ 类似/ ,/ 部分/ 数据包/ 被/ 丢弃/ ,/ 两/ 数据包/ 之间/ 的/ 最大/ 时间/ 间隔/ 不/ 超过/ 预先/ 设置/ 的/ 0.001/ s/ ./ Page10/ 接着/ ,/ 进行/ Meter/ 的/ 时延/ 分析/ ,/ 对/ 实际/ 流量/ 中/ 的/ 一条/ 包含/ 33/ 个/ 数据包/ 的/ 流/ f1/ ,/ 分别/ 为/ 其/ 配置/ Meter/ 限速/ 参数/ 和/ 不/ 配置/ Meter/ 参数/ 直接/ 转发/ ,/ 在/ 这/ 两种/ 情况/ 下/ ,/ 统计/ 每个/ 数据包/ 接收/ 时间/ 与/ 发送/ 时间/ 的/ 间隔/ ,/ 得到/ 如图/ 13/ 结果/ ./ 在/ 图/ 13/ 中/ ,/ 横坐标/ 表示/ 流/ f1/ 中包/ 的/ 序号/ ,/ 纵坐标/ 表示/ 每包/ 接收/ 时间/ 与/ 发送/ 时间/ 的/ 差值/ ,/ 单位/ 是/ ms/ ./ 图/ 13/ (/ a/ )/ 表示/ 不/ 经过/ Meter/ 限速/ 处理/ 而/ 直接/ 转发/ 的/ 包/ 时延/ ;/ (/ b/ )/ 图/ 表示/ 经过/ 限速/ 处理/ 后/ 的/ 包/ 时延/ ;/ (/ c/ )/ 图/ 表示/ 两者/ 的/ 对比/ ,/ 由此/ 图/ 可以/ 得到/ ,/ 在/ 流/ 突发/ 传输/ 的/ 一段时间/ 内/ ,/ Meter/ 对流/ 的/ 速率/ 起到/ 了/ 有效/ 的/ 控制/ 作用/ ./ 图/ 13/ 是/ Meter/ 对/ 限速/ 流/ 的/ 处理/ 时延/ ,/ 在/ 图/ 14/ 中/ ,/ 分析/ Meter/ 对于/ 无需/ 限速/ 的/ 流/ 处理/ 的/ 时延/ ,/ 在/ 没有/ Meter/ 时/ ,/ 数据包/ 在/ 网络/ 中/ 的/ 平均/ 处理/ 时延/ 约/ 为/ 0.106/ ms/ ,/ 而/ 引入/ Meter/ 后/ ,/ 对于/ 不/ 需要/ 限速/ 的/ 流/ 而言/ ,/ 其/ 平均/ 处理/ 时延/ 增加/ 至/ 0.173/ ms/ ,/ 仍/ 能够/ 保证/ 高速/ 网络/ 环境/ 下/ 的/ 对/ 数据包/ 的/ 快速/ 转发/ ./ 6.2/ ./ 2/ 限速/ 通道/ 数/ 与/ 冲突/ 流数/ 的/ 关系/ 对/ 特定/ 数目/ 的/ 流/ ,/ 改变/ 限速/ 通道/ 的/ 数量/ ,/ 当/ 限速/ 通道/ 数/ 分别/ 为/ 14/ 、/ 30/ 、/ 62/ 时/ ,/ 统计/ 被/ 分到/ 竞争/ 通道/ 的/ 流数/ ,/ 如/ 对于/ 32/ 条流/ ,/ 14/ 个/ 限速/ 通道/ 的/ 一组/ 数据/ ,/ “/ 17/ // 19/ ”/ 中/ 17/ 表示/ 正确/ 限速/ 的/ 流/ (/ 即/ 限速/ 流/ )/ 的/ 数目/ ,/ 而/ 19/ 表示/ 被/ 分到/ 竞争/ 通道/ 的/ 流/ (/ 即/ 冲突/ 流/ )/ 数目/ ./ 由表/ 2/ 可见/ ,/ 随着/ 限速/ 通道/ 数/ 的/ 增加/ ,/ 被/ 分到/ 竞争/ 通道/ 的/ 流/ (/ 即/ 冲突/ 流/ )/ 的/ 数目/ 递减/ ./ 表/ 2/ 中/ 限速/ 流/ 与/ 冲突/ 流/ 的/ 和/ 大于/ 总/ 的/ 流数/ ,/ 是因为/ 在/ 实际/ 流量/ 中/ ,/ 由于/ 流中/ 的/ 数据包/ 分布/ 不/ 均匀/ ,/ 在/ 有些/ 流中后/ 到达/ 的/ 数据包/ 进入/ Meter/ 后/ ,/ 该流/ 已经/ 注销/ ,/ 且/ 所有/ 的/ 限速/ 通道/ 已/ 被/ 其他/ 流/ 占用/ ,/ 则/ 该/ 数据包/ 被/ 分到/ 竞争/ 通道/ 中/ ./ 表/ 2/ 实际/ 流量/ 冲突/ 流数/ 与/ 限速/ 通道/ 数/ 的/ 关系/ 32flow64flow96flow128flow6/ ./ 2.3/ 超时/ 时间/ 与/ 冲突/ 流数/ 的/ 关系/ 对于/ 6.2/ ./ 2/ 节中/ 的/ 62/ 个/ 限速/ 通道/ ,/ 当/ 限速/ 通道/ 的/ 超时/ 时间/ 为/ 0.1/ s/ 时/ ,/ 所有/ 的/ 流/ 都/ 被/ 正确/ 限速/ ,/ 冲突/ 流/ 的/ 数目/ 为/ 0/ ./ 在/ 此基础/ 上/ ,/ 研究/ 超时/ 时间/ 与/ 冲突/ 流/ 的/ 数量/ 关系/ ,/ 以/ 相同/ 的/ 速率/ 发送/ 流量/ ,/ 将/ 超时/ 时间/ 分别/ 设置/ 为/ 0.4/ s/ 和/ 0.6/ s/ 时/ ,/ 得到/ 如表/ 3/ 所示/ 结果/ ./ 64flow96flow128flow/ 分析/ 表/ 3/ 中/ 数据/ 可以/ 得到/ 结论/ ,/ 随着/ 超时/ 时间/ 的/ 延长/ ,/ 被/ 分到/ 竞争/ 通道/ 的/ 流/ 数目/ 增加/ ./ 超时/ 时间/ 过/ 短/ ,/ 则/ 流/ 频繁/ 在/ 各/ 限速/ 通道/ 中/ 切换/ ,/ 而/ 超时/ 时间/ 过长/ ,/ 则/ 会/ 造成/ 限速/ 通道/ 资源/ 的/ 浪费/ ,/ 因此/ ,/ 在/ 实际/ 流/ 限速/ 中/ ,/ 需/ 根据/ 这/ 两者之间/ 的/ 平衡/ 关系/ 折衷/ ,/ 取/ 相对/ 最优/ 的/ 超时/ 时间/ ./ 如前所述/ ,/ 超时/ 时间/ 与/ 限速/ 通道/ 的/ 个数/ 是/ 影响/ Meter/ 限速/ 性能/ 的/ 两个/ 重要/ 参数/ ,/ 同时/ 决定/ 系统/ 限/ Page11/ 速/ 精度/ 以及/ 硬件/ 利用效率/ ./ 如何/ 设置/ 这/ 两个/ 参数/ ,/ 进而/ 需要/ 在/ 既/ 节省/ 硬件资源/ 同时/ 又/ 不/ 影响/ Meter/ 限速/ 性能/ 的/ 前提/ 下/ ,/ 得到/ 最优/ 的/ 结果/ ,/ 以/ 使得/ Meter/ 以较/ 少/ 的/ 限速/ 通道/ 数为/ 大量/ 的/ 流量/ 限速/ ,/ 需要/ 进一步/ 用/ 更/ 多/ 的/ 实际/ 流量/ 来/ 测试/ 分析/ ,/ 这/ 将/ 在/ 以后/ 的/ 工作/ 中/ 逐步/ 完成/ ./ 6.3/ Smartbits/ 流量/ 测试/ 用/ Smartbits/ 工具/ 分别/ 以/ 不同/ 的/ 速率/ 发送/ 数据包/ ,/ 受限于/ Smartbits/ 构造/ 数据/ 流量/ 的/ 简单/ 性/ ,/ 而本/ 实验/ 的/ 目的/ 是/ 为了/ 测试/ Meter/ 在/ 高速/ 网络/ 下/ 的/ 性能/ ,/ 故而/ 仅/ 构造/ 32/ 条流/ ,/ 对/ 其中/ 31/ 条/ 进行/ 限速/ ,/ 第/ 32/ 条/ 直接/ 转发/ 处理/ ,/ 得到/ 如图/ 15/ 所示/ 结果/ ./ 图/ 15/ (/ a/ )/ 为/ 以/ 91.43/ Mbps/ ~/ 251.96/ Mbps/ 的/ 8/ 组/ 速率/ 发送/ 数据包/ ,/ 纵轴/ 表示/ 8/ 组/ 限速/ 前/ 与/ 限速/ 后/ 的/ 速率/ 值/ ,/ 随着/ 发送/ 速率/ 的/ 增加/ ,/ 限速/ 后/ 速率/ 保持/ 在/ 92.4/ Mbps/ 附近/ ,/ 在/ 高速/ 网络/ 下/ ,/ Meter/ 能以/ 不同/ 等级/ 对/ 流量/ 进行/ 限速/ ,/ 控制/ 网络/ 中流/ 的/ 速率/ ;/ 图/ 15/ (/ b/ )/ 为/ 8/ 组/ 发送/ 速率/ 下/ 的/ 丢/ 包率/ ,/ 发送/ 相同/ 数量级/ 的/ 流量/ ,/ 丢/ 包率/ 随着/ 发送/ 速率/ 的/ 增加/ 而/ 增大/ ,/ 之后/ 趋于/ 平缓/ ./ 当/ 网络/ 中流/ 的/ 速率/ 很大/ ,/ 而/ 设置/ 的/ 限速/ 速率/ 与/ 原/ 速率/ 相差/ 较大/ 时/ ,/ 必然/ 会/ 引起/ 较大/ 程度/ 的/ 丢/ 包/ ./ 7/ 相关/ 工作/ 在/ Raghavan/ 等/ 人/ [/ 15/ ]/ 的/ 分布式/ 限速/ 工作/ 中/ ,/ 用/ 多个/ 分布式/ 的/ 限速/ 模块/ 协同工作/ ,/ 对/ 分散/ 到/ 各个/ 域/ 的/ 云/ 服务/ 流量/ 做/ 单一/ 聚合/ 的/ 全局/ 限制/ ./ 其/ 采用/ GRD/ 和/ FPS/ 算法/ 对/ 流量/ 的/ 速率/ 进行/ 控制/ ,/ 各个/ 分布/ 的/ 限速/ 模块/ 之间/ 通过/ 协议/ 通信/ 并/ 更新/ 自身/ 信息/ ,/ 最终/ 统一/ 集中地/ 限速/ ,/ 这是/ 传统/ 的/ 限速/ 方案/ ,/ 并/ 没有/ 对流/ 进行/ 精确/ 的/ 划分/ ./ Covington/ 等/ 人/ [/ 16/ ]/ 在/ 其/ 实现/ 的/ packetgenerator/ 中/ 实现/ 了/ 对流/ 的/ 区分/ 限速/ ./ 其/ 按照/ 数据包/ 在/ 硬件平台/ 上/ 的/ 输出/ 端口号/ 对流/ 进行/ 划分/ ,/ 硬件平台/ 上/ 有/ 4/ 个/ 以太网/ 接口/ ,/ 分别/ 对应/ 4/ 个/ 限速/ 通道/ ,/ 从/ 同一个/ 端口/ 输出/ 的/ 数据包/ 按照/ 同样/ 的/ 速率/ 限速/ ./ packetgenerator/ 没有/ 对流/ 进行/ 解析/ 和/ 分类/ ,/ 只是/ 按照/ 其/ 转发/ 端口/ 进行/ 区分/ 限速/ ./ Melman/ 等/ 人/ [/ 17/ ]/ 实现/ 了/ 网络/ 路由/ 交换/ 设备/ 到/ 主机/ CPU/ 的/ 流量/ 限速/ ./ 将/ 网络/ 中/ 流量/ 划分/ 为/ 数据/ 流量/ 和/ 控制/ 流量/ ,/ 捕获/ 控制/ 流量/ 到/ CPU/ ,/ 控制/ 数据包/ 分类/ 有/ BPDU/ ,/ LACP/ ,/ GVRP/ ,/ RIPvl/ ,/ RIPv2/ ,/ OSPFVZ/ ,/ PIM/ ,/ TELNET/ ,/ HTTP/ 等等/ ,/ 用/ 一个包/ 处理器/ 对/ 数据包/ 分类/ ,/ 每/ 一类/ 对应/ 一个/ CPU/ 通道/ ,/ 通过/ 阈值/ 控制/ 每个/ 通道/ 数据包/ 的/ 数量/ 以/ 达到/ 限速/ 的/ 目的/ ./ Cheriton/ [/ 18/ ]/ 的/ 近似/ 每流/ 限速/ 方案/ 中/ ,/ 对流/ 进行/ 了/ 分类/ ,/ 每条流/ 对应/ 一个/ 限速/ 的/ 队列/ ,/ 各个/ 限速/ 队列/ 相互/ 独立/ ,/ 系统/ 中/ 设置/ 一个/ 控制器/ ,/ 为/ 每个/ 队列/ 分配/ 限速/ 的/ 令牌/ ,/ 实时/ 地/ 控制/ 各流/ 的/ 限速/ 情况/ ./ Covington/ 等/ 人/ 的/ 工作/ 中/ ,/ 对/ 流量/ 进行/ 了/ 简单/ 的/ 划分/ ,/ 按照/ 输出/ 端口号/ 限速/ ,/ 但是/ 并/ 没有/ 对流/ 进行/ 更/ 细粒度/ 的/ 划分/ ;/ Melman/ 等/ 人/ 的/ 工作/ 和/ Cheriton/ 的/ 近似/ 每流/ 限速/ 对/ 流量/ 的/ 划分/ 更为/ 精确/ ,/ 但是/ 每条/ 划分/ 的/ 流/ 对应/ 一个/ 限速/ 队列/ ,/ 而/ DMS/ 算法/ 可以/ 使得/ 多条/ 流/ 共享/ 限速/ 通道/ ,/ 使用/ 较/ 少/ 数量/ 的/ 限速/ 通道/ 为/ 网络/ 中多/ 种类/ 流量/ 限速/ ;/ 在/ 限速/ 方案/ 上/ ,/ packetgenerator/ 与/ Meter/ 都/ 采取/ 漏桶/ 算法/ ,/ 相对/ 于/ 单一/ 的/ 数据包/ 计数/ 效果/ 更优/ ./ 除此之外/ ,/ 在/ Meter/ 每流/ 限速/ 中/ ,/ 可/ 根据/ 上层/ 软件/ 需求/ 定制/ 需要/ 限速/ 的/ 流/ ,/ 如/ 根据/ IP/ 协议/ 、/ IP地址/ 、/ 传输层/ 端口号/ 等/ ,/ 可/ 满足/ 不同/ 应用/ 的/ 需求/ ;/ 且/ 本文/ 提出/ 的/ DMS/ 算法/ 为/ 流量/ 动态分配/ 限速/ 通道/ ,/ 效率高/ ,/ 可/ 有效/ 解决/ 硬件资源/ 不足/ 的/ 问题/ ./ FlowQoS/ [/ 19/ ]/ 通过/ 使用/ 两个/ 交换机/ 分别/ 进行/ 分类/ 和/ 限速/ ,/ 来/ 达到/ 家庭网络/ 的/ 每流/ 限速/ ,/ 但是/ 这种/ 结构/ 无法/ 支持/ 高带宽/ 低/ 延迟/ 的/ 网络/ ./ 受限于/ 硬件资源/ 与/ 芯片/ 规模/ ,/ 现在/ 绝大多数/ 商用/ 的/ 硬件/ SDN/ 交换机/ 都/ 不/ 支持/ 每流/ 限速/ 的/ 功能/ ,/ 目前/ 应用/ 广泛/ 的/ OpenvSwitch/ [/ 20/ ]/ 是/ 一种/ 软件/ 的/ SDN/ 交换机/ 实现/ ,/ 其中/ 包含/ 一些/ QoS/ 能力/ ,/ 但是/ 实际/ 无法/ 支持/ 较大/ 的/ 流/ 数量/ 以及/ 高/ 的/ 网络/ 负载/ ./ 因此/ 绝大多数/ 基于/ OpenvSwitch/ 的/ 商用/ 交换机/ 也/ 无法/ 有效/ 完成/ 每流/ 限速/ ./ Page128/ 总结/ 及/ 未来/ 工作/ SDN/ 新型/ 网络/ 模型/ 的/ 提出/ 以及/ 新/ 业务/ 模式/ 的/ 应用/ 对/ 每流/ 限速/ 提出/ 了/ 强烈/ 的/ 需求/ ./ 在/ OpenFlow/ 协议/ 中/ ,/ 为/ 每/ 一条/ 需要/ 限速/ 的/ 流/ 配置/ 一条/ 流/ 表项/ ,/ 定义/ 该流/ 可以/ 转发/ 的/ 最高/ 速率/ ,/ 将/ 其/ 分配/ 到/ 指定/ 的/ 限速/ 通道/ 执行/ 限速/ ./ 本文/ 提出/ 了/ DMS/ 算法/ ,/ 在/ 硬件/ 限速/ 通道/ 一定/ 的/ 情况/ 下/ ,/ 通过/ 有效/ 分配/ 限速/ 通道/ ,/ 以及/ 调度/ 流/ 进入/ 共享/ 限速/ 通道/ ,/ 使得/ 硬件/ 能够/ 支持/ 服务/ 更/ 多/ 的/ 流/ ,/ 从而/ 实现/ 每流/ 限速/ 的/ 实际/ 功能/ ./ 相比/ 于/ 传统/ 的/ 限速/ 机制/ ,/ DMS/ 算法/ 可以/ 用/ 非常少/ 的/ 硬件资源/ 实现/ 同样/ 的/ 限速/ 效果/ ./ 本文/ 在/ ONetSwitch/ 平台/ 上/ 的/ OpenFlow1/ ./ 3/ 交换机/ 中/ ,/ 利用/ FPGA/ 资源/ 实现/ 了/ 基于/ DMS/ 算法/ 的/ Meter/ ,/ 并/ 进行/ 了/ 一系列/ 实验/ ./ 相较/ 于/ 传统/ 网络/ 中/ 的/ 限速/ 机制/ ,/ DMS/ 算法/ 实现/ 的/ Meter/ 可用/ 14/ 、/ 30/ 、/ 62/ 个/ 限速/ 通道/ 有效/ 地为/ 128/ 条流/ 限速/ ,/ 节约/ 了/ 硬件资源/ ,/ 同时/ 保证/ 高效/ 的/ 各流/ 区分/ 限速/ ./ 文中/ 使用/ 了/ 3/ 种/ 流量/ 进行/ 算法/ 的/ 验证/ ,/ 分别/ 是/ Xcap/ 工具/ 构造/ 的/ 模拟/ 流量/ 、/ Smartbits/ 测试仪/ 生成/ 的/ 流量/ 和/ 网络/ 中/ 的/ 真实/ 流量/ ./ 测试/ 结果表明/ ,/ Meter/ 能够/ 按照/ 预先/ 配置/ 好/ 的/ 限速/ 参数/ 对/ 需要/ 限速/ 的/ 流/ 进行/ 正确/ 的/ 速率/ 限制/ ./ 本文/ 进一步/ 分别/ 研究/ 了/ 硬件/ 限速/ 通道/ 数目/ 和/ 超时/ 时间/ 对/ 冲突/ 流/ 数目/ 的/ 关系/ 的/ 影响/ ,/ 随着/ 硬件/ 通道/ 数/ 的/ 增加/ ,/ 冲突/ 流/ 数目/ 减少/ ,/ 且/ 随着/ 超时/ 时间/ 的/ 延长/ ,/ 冲突/ 流/ 数目/ 增加/ ./ 硬件/ 限速/ 通道/ 的/ 数目/ 和/ 超时/ 时间/ 是/ 影响/ Meter/ 限速/ 性能/ 的/ 两项/ 重要/ 参数/ ./ 这/ 将/ 作为/ 下一阶段/ 的/ 工作/ 重点/ ./ 通过/ 进行/ 更/ 大量/ 的/ 流量/ 测试/ ,/ 进一步/ 调整/ Meter/ 以/ 优化/ 参数/ ,/ 使/ 之/ 实现/ 更好/ 的/ 性能/ ,/ 为/ 网络/ 提供/ 高效/ 的/ 限速/ ./ 致谢/ 西安交通大学/ 智能/ 网络/ 与/ 网络安全/ 教育部/ 重点/ 实验室/ SDN/ 小组/ 的/ 同学/ 之前/ 在/ OpenFlow/ 方面/ 做/ 了/ 很多/ 的/ 工作/ ,/ 为/ 本篇/ 论文/ 的/ 完成/ 奠定/ 了/ 良好/ 的/ 基础/ ,/ 给予/ 了/ 很大/ 的/ 帮助/ 和/ 指导/ ,/ 在/ 此/ 衷心/ 表示感谢/ ,/ 同时/ 感谢/ 在/ 百忙之中/ 评阅/ 论文/ 的/ 各位/ 专家/ !/ 

