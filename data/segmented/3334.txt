Page1/ 软件/ 服务/ 的/ 在线/ 演化/ 王怀民史/ 佩昌/ 丁博尹/ 刚史/ 殿习/ (/ 国防科学技术大学/ 计算机/ 学院/ 长沙/ 410073/ )/ 摘要/ 软件/ 服务/ 的/ 在线/ 演化/ 技术/ 是/ 当前/ 可信/ 软件/ 研究/ 的/ 一个/ 重要/ 方向/ ,/ 对于/ 实现/ 快速/ 、/ 低成本/ 的/ 成长/ 式/ 可信/ 演化/ 具有/ 重要/ 意义/ ./ 与/ 离线/ 的/ 演化/ 技术/ 相比/ ,/ 在线/ 演化/ 强调/ 软件系统/ 在/ 结构/ 修改/ 和/ 功能/ 调整/ 期间/ 仍/ 能够/ 持续/ 提供/ 服务/ ./ 文中/ 在/ 给出/ 软件/ 服务/ 在线/ 演化/ 基本/ 定义/ 、/ 归纳/ 其/ 结构/ 模型/ 和/ 一般性/ 过程/ 模型/ 基础/ 上/ ,/ 提出/ 涵盖/ 演化/ 范畴/ 、/ 演化/ 类型/ 和/ 演化/ 方式/ 等/ 方面/ 的/ 分类/ 模型/ ,/ 并/ 以此/ 分类/ 模型/ 为/ 比较/ 框架/ ,/ 对/ 目前/ 几种/ 具有/ 代表性/ 的/ 演化/ 使能/ 平台/ 和/ 可信/ 演化/ 系统/ 做/ 了/ 综述/ 和/ 比较/ ./ 最后/ 对/ 值得/ 进一步/ 研究/ 的/ 问题/ 进行/ 了/ 分析/ 和/ 展望/ ./ 关键词/ 软件/ 服务/ ;/ 在线/ 演化/ ;/ 软件/ 演化/ ;/ 可信/ 软件/ 1/ 引言/ 当今社会/ 越来越/ 依赖于/ 持续/ 提供/ 服务/ 的/ 大规模/ 分布式/ 软件系统/ [/ 1/ -/ 2/ ]/ ./ 这类/ 软件系统/ 部署/ 在/ 开放/ 网络/ 环境/ 中/ ,/ 各类/ 要素/ 交互/ 协同/ ,/ 呈现出/ 规模/ 可/ 持续/ 成/ Page2/ 这类/ 软件系统/ 实现/ 可信/ 演化/ [/ 1/ -/ 2/ ]/ 的/ 重要途径/ ,/ 甚至/ 是/ 必须/ 的/ 技术/ 途径/ 之一/ ./ 软件/ 服务/ 的/ 在线/ 演化/ 是/ 在/ 软件维护/ 、/ 演化/ 、/ 自/ 适应/ 等/ 相关/ 概念/ 基础/ 上/ 衍生/ 的/ 一种/ 粒度/ 更细/ 、/ 关注点/ 更/ 集中/ 的/ 概念/ ,/ 其/ 目的/ 是/ 在/ 不/ 中断/ 软件系统/ 所/ 提供/ 服务/ 的/ 前提/ 下/ ,/ 提升/ 软件系统/ 的/ 可信性/ 、/ 提高/ 软件系统/ 适应/ 需求/ 的/ 能力/ ./ 其/ 相关/ 技术/ 主要/ 解决/ 两类/ 核心/ 问题/ :/ (/ 1/ )/ 如何/ 使/ 提供/ 服务/ 的/ 软件系统/ 具有/ 运行/ 时/ 可/ 被/ 改变/ 的/ 能力/ ;/ (/ 2/ )/ 如何/ 利用/ 这种/ 能力/ 来/ 实现/ 软件/ 服务/ 的/ 在线/ 演化/ ,/ 从而/ 提升/ 其/ 可信性/ 和/ 适应/ 需求/ 的/ 能力/ ./ 纵观/ 软件/ 演化/ 技术/ 的/ 发展/ 过程/ ,/ 从/ 20/ 世纪/ 60/ 年代/ 提出/ 软件/ 演化/ 概念/ 至今/ ,/ 可以/ 认为/ 其/ 经历/ 了/ 3/ 个/ 阶段/ ./ 第/ 1/ 阶段/ 是/ 软件/ 演化/ 概念/ 形成/ 阶段/ (/ 60/ 年代/ ~/ 80/ 年代/ 中期/ )/ :/ 该/ 阶段/ Halpern/ [/ 15/ ]/ 和/ Couch/ [/ 16/ ]/ 首先/ 提出/ 了/ 演化/ 术语/ ;/ Lehman/ 和/ Belady/ 比较/ 了/ 演化/ 与/ 维护/ 在/ 系统/ 设计/ 、/ 修改/ 方案/ 、/ 层次/ 性质/ 和/ 操作/ 主体/ 等/ 方面/ 的/ 区别/ 与/ 联系/ [/ 17/ ]/ ,/ 初步/ 给出/ 了/ 软件/ 演化/ 的/ 若干/ 定律/ [/ 18/ ]/ ,/ 进一步/ 明确/ 了/ 软件/ 演化/ 的/ 必要性/ 和/ 内涵/ ./ 第/ 2/ 阶段/ 是/ 软件/ 演化/ 研究/ 的/ 发育阶段/ (/ 80/ 年代/ 中期/ ~/ 90/ 年代/ 后期/ )/ :/ 软件/ 演化/ 的/ 概念/ 开始/ 得到/ 较为/ 广泛/ 的/ 认可/ [/ 19/ -/ 20/ ]/ ./ 研究者/ 对/ 为什么/ 演化/ (/ Why/ )/ 及/ 如何/ 演化/ (/ How/ )/ 等/ 问题/ 展开/ 初步/ 探索/ ,/ 提出/ 了/ Bohem/ 螺旋/ 模型/ [/ 21/ ]/ 、/ Bennet/ 分段/ 模型/ [/ 22/ ]/ 等/ 演化过程/ 模型/ ,/ 并且/ 在/ 程序语言/ [/ 23/ -/ 25/ ]/ 、/ 体系结构/ [/ 26/ -/ 30/ ]/ 等/ 层面/ 开始/ 考虑/ 对/ 在线/ 演化/ 的/ 支持/ ./ 这一/ 阶段/ 工作/ 规模较/ 小/ ,/ 演化/ 动作/ 缺乏/ 组织性/ 、/ 目标/ 单一/ ./ 第/ 3/ 阶段/ 是/ 软件/ 演化/ 研究/ 的/ 跃升/ 阶段/ (/ 90/ 年代/ 后期/ 至今/ )/ :/ 主要/ 研究/ 探索/ 大规模/ 软件/ 的/ 演化/ ,/ 特别/ 是/ 部署/ 在/ 开放/ 网络/ 环境/ 中/ 、/ 提供/ 持续/ 服务/ 的/ 大规模/ 分布式/ 软件系统/ 的/ 演化/ ./ 其中/ 具有/ 明显/ 里程碑/ 意义/ 的/ 工作/ 是/ Oreizy/ 等/ 所/ 提出/ 的/ 基于/ 体系结构/ 的/ 在线/ 演化/ 方法/ [/ 31/ -/ 32/ ]/ ,/ 在/ 其/ 基础/ 上/ 衍生/ 出/ 了/ ArchStudio/ [/ 33/ -/ 34/ ]/ 、/ PKUAS/ [/ 35/ -/ 37/ ]/ 、/ Artemis/ -/ / [/ 38/ -/ 39/ ]/ 、/ OSGi/ [/ 40/ ]/ 、/ Fractal/ [/ 41/ ]/ 和/ Archware/ [/ 42/ ]/ 等/ 演化/ 使能/ 平台/ 以及/ CASA/ [/ 43/ ]/ 、/ MADAM/ [/ 44/ ]/ 、/ K/ -/ Component/ [/ 45/ -/ 48/ ]/ 、/ Rainbow/ [/ 3/ -/ 4/ ]/ 和/ MDB/ [/ 49/ ]/ 等/ 利用/ 软件系统/ 运行/ 时/ 可/ 改变/ 能力/ 来/ 实现/ 在线/ 演化/ 的/ 可信/ 演化/ 系统/ ./ 软件/ 演化/ 是/ 一个/ 年轻/ 的/ 领域/ ,/ 它/ 的/ 关注点/ 甚至/ 它/ 的/ 基础/ 概念/ 都/ 在/ 不断/ 变化/ [/ 6/ ]/ ,/ 其/ 实现/ 技术/ 、/ 尤其/ 是/ 软件/ 服务/ 在线/ 演化/ 的/ 实现/ 技术/ 远/ 未成熟/ ,/ 仍/ 需要/ 深入研究/ ./ 软件/ 服务/ 在线/ 演化/ 的/ 相关/ 研究/ 主要/ 围绕/ 软件维护/ [/ 50/ -/ 51/ ]/ 、/ 演化/ [/ 6/ ]/ 、/ 适应/ [/ 5/ ]/ 和/ 反射/ [/ 52/ ]/ 等/ 相关/ 问题/ 展开/ ,/ 这些/ 概念/ 自/ 提出/ 以来/ 就/ 一直/ 互/ 有/ 重叠/ ./ 本文/ 第/ 2/ 节/ 首先/ 给出/ 软件/ 服务/ 在线/ 演化/ 的/ 定义/ ,/ 提出/ 软件/ 服务/ 在线/ 演化/ 的/ 理想/ 结构/ 模型/ 和/ 一般性/ 过程/ 模型/ ;/ 第/ 3/ 节/ 给出/ 涵盖/ 了/ 演化/ 范畴/ 、/ 演化/ 类型/ 和/ 演化/ 方式/ 等/ 方面/ 的/ 软件/ 服务/ 在线/ 演化/ 分类/ 模型/ ;/ 第/ 4/ 节以/ 在线/ 演化/ 分类/ 模型/ 为/ 比较/ 框架/ ,/ 系统/ 梳理/ 和/ 比较/ 若干/ 具有/ 代表性/ 的/ 研究/ 项目/ ;/ 第/ 5/ 节对/ 该/ 领域/ 值得/ 进一步/ 研究/ 的/ 问题/ 进行/ 分析/ 和/ 展望/ ;/ 最后/ 一节/ 总结/ 全文/ ./ 2/ 基本概念/ 和/ 模型/ 2.1/ 基本概念/ 软件/ 的/ 变化/ 可能/ 发生/ 在/ 编译/ 时/ 、/ 装载/ 时/ 或/ 运行/ 时/ 等/ 软件/ 生命周期/ 各个/ 阶段/ [/ 53/ ]/ ./ 在线/ 演化/ 主要/ 关注/ 软件/ 运行/ 阶段/ 的/ 变化/ ,/ 目前/ 尚无/ 统一/ 定义/ ./ 近年来/ ,/ 软件/ 自/ 适应/ [/ 5/ ,/ 54/ ]/ 、/ 动态/ 适应/ [/ 12/ ]/ 和/ 自/ 组织/ [/ 55/ ]/ 等/ 方向/ 的/ 研究/ 为/ 在线/ 演化/ 赋予/ 了/ 更/ 深刻/ 的/ 内涵/ ./ 自/ 适应/ [/ 54/ ]/ 是/ 指/ 软件/ 自我/ 评价/ 自身/ 行为/ ,/ 当/ 评价/ 结果表明/ 软件/ 不能/ 达成/ 既定目标/ 或/ 需/ 增加/ 功能/ 、/ 优化/ 性能/ 时/ ,/ 改变/ 自身/ 行为/ ./ 动态/ 适应/ [/ 12/ ]/ 是/ 软件/ 在/ 运行/ 时/ 处理/ 如下/ 事件/ 的/ 一种/ 适应能力/ :/ 用户/ 需求/ 的/ 改变/ ,/ 系统/ 入侵/ 或/ 失效/ ,/ 运行/ 环境/ 和/ 资源/ 的/ 变化/ 等/ ./ 自/ 组织/ [/ 55/ ]/ 是/ 系统/ 的/ 一个/ 动态/ 适应/ 过程/ ,/ 该/ 过程/ 中/ 系统/ 在/ 不受/ 外界/ 控制/ 的/ 情况/ 下/ 通过/ 自身/ 内部/ 元素/ 的/ 交互/ 维持/ 其/ 结构/ ./ 上述/ 概念/ 从/ 演化/ 能力/ 、/ 演化/ 形态/ 等/ 方面/ 丰富/ 了/ 在线/ 演化/ 的/ 内涵/ ./ 文献/ [/ 56/ ]/ 指出/ 在线/ 演化/ 是/ 这样/ 一种/ 软件/ 演化/ :/ 在/ 不/ 中断/ 正在/ 运行/ 程序/ 前提/ 下/ 升级/ 该/ 程序/ ./ 程序/ 持续/ 运行/ 是/ 在线/ 演化/ 的/ 根本/ 标志/ ;/ 不/ 中断/ 则/ 强调/ 在/ 用户/ 请求/ 不/ 被/ 取消/ 或/ 拒绝/ 的/ 前提/ 下/ 修改/ 软件/ ./ 综合/ 已有/ 工作/ 和/ 实际/ 应用/ 需求/ ,/ 本节/ 以/ 部署/ 在/ 开放/ 网络/ 环境/ 中/ 、/ 提供/ 持续/ 服务/ 的/ 大规模/ 分布式/ 软件系统/ 为/ 背景/ ,/ 从/ 技术/ 机理/ 层面/ 给出/ 软件/ 服务/ 在线/ 演化/ 的/ 定义/ ./ 定义/ 1/ (/ 软件/ 服务/ 的/ 在线/ 演化/ )/ ./ 软件/ 服务/ 的/ 在线/ 演化/ 是/ 指/ 为了/ 提高/ 软件系统/ 适应/ 需求/ 的/ 能力/ ,/ 在/ 不/ 中断/ 其所/ 提供/ 服务/ 的/ 前提/ 下/ ,/ 自动/ 或/ 借助/ 外部/ 动态/ 指导/ 发生/ 的/ 软件/ 改变/ 活动/ ./ 这里/ ,/ 不/ 中断/ 是/ 指/ 对/ 使用者/ 而言/ ,/ 软件系统/ 所/ 提供/ 的/ 服务/ 持续/ 在线/ ;/ 借助/ 外部/ 动态/ 指导/ 则/ 强调/ 了/ 整个/ 在线/ 演化过程/ 中/ 人/ 作为/ 不可或缺/ 的/ 因素/ 参与/ 其中/ ;/ 改变/ 活动/ 主要/ 包括/ 软件/ 功能/ 和/ 结构/ 等/ 方面/ 的/ 改变/ ,/ 例如/ 对/ 软件体系结构/ 拓扑/ 及其/ 元素/ (/ 构件/ 、/ 连接子/ 等/ [/ 57/ -/ 58/ ]/ )/ 的/ 修改/ 活动/ ./ 定义/ 中/ 没有/ 显式/ 定义/ 非/ 功能属性/ [/ 59/ ]/ 演化/ ,/ 因为/ 其/ 一般/ 会/ 触发/ 功能/ 、/ 结构/ 等/ 的/ 演化/ ./ 上述/ 定义/ 所/ 给/ 的/ 在线/ 演化/ 概念/ 是/ 一种/ 运行/ 时演/ Page3/ 化/ ,/ 但/ 其/ 面向/ 的/ 是/ 网络/ 环境/ 中/ 的/ 大规模/ 分布式系统/ ,/ 更/ 强调/ 整个/ 系统/ 层面/ 上/ “/ 服务/ 持续/ 在线/ ”/ 这一/ 特征/ ,/ 而/ 不/ 强求/ 系统/ 所有/ 成分/ 都/ 必须/ 持续/ 运行/ ./ 此外/ ,/ 与/ 软件维护/ 通常/ 由/ 专门/ 维护/ 人员/ 来/ 实施/ 不同/ ,/ 在线/ 演化/ 动作/ 既/ 可以/ 由/ 第三方/ 驱动/ ,/ 也/ 可以/ 由/ 软件系统/ 主动/ 实施/ ,/ 如/ 依据/ 某些/ 预定/ 义/ 的/ 规则/ ./ 2.2/ 结构/ 模型/ 结构/ 模型/ 给出/ 了/ 参与/ 在线/ 演化/ 活动/ 的/ 实体/ 及其/ 交互/ 关系/ ,/ 所/ 要/ 回答/ 的/ 核心/ 问题/ 是/ :/ 如何/ 使/ 软件系统/ 具备/ 运行/ 时/ 可/ 改变/ 的/ 能力/ (/ 即/ 演化/ 使能/ )/ 以及/ 由/ 谁/ 、/ 以/ 何种/ 方式/ 来/ 驱动/ 演化过程/ (/ 即/ 演化/ 决策/ )/ ./ 本节/ 对/ 现有/ 研究/ 和/ 工程/ 实践/ 进行/ 总结/ 提炼/ ,/ 给出/ 特定/ 、/ 基于/ 平台/ 和/ 基于/ 引擎/ 三种/ 在线/ 演化/ 结构/ 模型/ ,/ 在/ 此基础/ 上/ 提出/ 软件/ 服务/ 在线/ 演化/ 的/ 理想/ 结构/ 模型/ ./ 这些/ 模型/ 均/ 可/ 被/ 分为/ 演化/ 使能/ 和/ 演化/ 决策/ 两/ 部分/ ,/ 在/ 图/ 1/ 中/ 使用/ 深灰/ 和/ 浅灰/ 区分/ ./ 此外/ ,/ 图/ 1/ 中/ 实线/ 交互/ 关系/ 是/ 不可/ 缺少/ 的/ ,/ 虚线/ 交互/ 关系/ 是/ 可选/ 的/ ./ (/ a/ )/ 特定/ 演化/ 模型/ ./ 早期/ 的/ 演化/ 技术/ 直接/ 将/ 与/ 演化/ 相关/ 的/ 监测/ 模块/ 和/ 执行/ 模块/ 硬/ 编码/ 到/ 应用/ 系统/ 中/ ,/ 监测/ 模块/ 可以/ 输出/ 应用/ 系统/ 的/ 内部/ 状态/ 信息/ ,/ 执行/ 模块/ 则/ 可以/ 通过/ 参数/ 重/ 配置/ 等/ 形式/ 对/ 应用/ 系统实施/ 在线/ 调整/ ./ 演化/ 决策/ 通常/ 由/ 管理/ 维护/ 人员/ 完成/ ./ 此类/ 模型/ 如图/ 1/ (/ a/ )/ 所示/ ,/ 其/ 代表性/ 工作/ 主要/ 集中/ 于/ 小规模/ 、/ 单/ 目标/ 和/ 无/ 系统/ 层/ 支持/ 的/ 软件/ 演化/ 研究/ [/ 23/ -/ 30/ ]/ ./ (/ b/ )/ 基于/ 平台/ 的/ 演化/ 模型/ ./ 随着/ 中间件/ 等/ 基础/ 软件/ 的/ 广泛应用/ ,/ 软件开发/ 与/ 运行/ 平台/ 对/ 软件/ 演化/ 的/ 支持/ 有/ 了/ 显著/ 提高/ ./ 这/ 使得/ 演化/ 使能/ 机制/ 从/ 应用程序/ 中/ 分离出来/ ,/ 成为/ 相对/ 独立/ 的/ 公共/ 支撑/ 设施/ ./ 这种/ 分离/ 提高/ 了/ 软件/ 复用/ 程度/ ,/ 增强/ 了/ 软件系统/ 的/ 在线/ 演化/ 能力/ ./ 此类/ 模型/ 如图/ 1/ (/ b/ )/ 所示/ ,/ 其/ 代表性/ 工作/ 主要/ 集中/ 于/ 在线/ 演化/ 研究/ 中/ 的/ 演化/ 使能/ 平台/ [/ 33/ -/ 42/ ]/ ./ (/ c/ )/ 基于/ 引擎/ 的/ 演化/ 模型/ ./ 相对/ 于/ 基于/ 平台/ 的/ 模型/ ,/ 这/ 类/ 模型/ 的/ 主要/ 特点/ 是/ 增加/ 了/ 演化/ 决策/ 模块/ ,/ 试图/ 实现/ 一种/ 通用/ 的/ 软件/ 演化/ 引擎/ ,/ 代替/ 人来/ 实时/ 、/ 自动化/ 地/ 做出/ 演化/ 决策/ ./ 这/ 将/ 大幅/ 提升/ 软件/ 演化/ 的/ 自主性/ 和/ 时效性/ ,/ 但/ 在/ 具体/ 实践/ 中/ ,/ 由于/ 对/ 演化/ 引擎/ 能力/ 的/ 期望/ 过于/ 理想化/ ,/ 反而/ 限制/ 了/ 其/ 应用/ 范畴/ ./ 此类/ 模型/ 如图/ 1/ (/ c/ )/ 所示/ ,/ 其/ 代表性/ 工作/ 主要/ 集中/ 于/ 在线/ 演化/ 研究/ 中/ 的/ 可信/ 演化/ 系统/ [/ 4/ ,/ 43/ -/ 49/ ]/ ./ (/ d/ )/ 理想/ 结构/ 模型/ ./ 软件/ 服务/ 在线/ 演化/ 的/ 理想/ 结构/ 模型/ 是/ (/ b/ )/ 类/ 模型/ 和/ (/ c/ )/ 类/ 模型/ 的/ 有机/ 组合/ ,/ 即/ 演化/ 决策/ 可以/ 由/ 软件系统/ 依据/ 事先/ 制定/ 的/ 规则/ 等/ 做出/ ,/ 也/ 可以/ 在/ 必要/ 时由人来/ 驱动/ 演化/ 决策/ ,/ 如图/ 1/ (/ d/ )/ 所示/ ./ 该/ 模型/ 综合/ 了/ (/ b/ )/ 类/ 和/ (/ c/ )/ 类/ 模型/ 的/ 优点/ ,/ 回答/ 了/ 软件系统/ 本身/ 应该/ 为/ 在线/ 演化/ 承担/ 何种/ 责任/ 和/ 提供/ 何种/ 程度/ 支持/ 的/ 问题/ ./ 鉴于/ 现实/ 中/ 大量/ 应用/ 系统/ 部署/ 在/ 不/ 支持软件/ 演化/ 的/ 平台/ 上/ ,/ 因此/ 如何/ 利用/ 这种/ 理想/ 模型/ 解决/ 遗留/ 系统/ 的/ 演化/ 也/ 是/ 目前/ 过渡时期/ 面临/ 的/ 一个/ 重大/ 挑战/ ./ 2.3/ 过程/ 模型/ 文献/ [/ 1/ ]/ 认为/ 形式化/ 方法/ 不能/ 在/ 软件系统/ 发布/ 前/ 完成/ 其/ 可信性/ 证明/ ,/ 测试方法/ 也/ 因/ 找/ 不到/ 完备/ 的/ 测试/ 集而/ 无法/ 全面/ 验证/ 软件/ 的/ 可信性/ ./ 历时/ 22/ 年/ 总结/ 出/ 的/ Lehman/ 定律/ [/ 18/ ,/ 60/ -/ 63/ ]/ 和/ 自/ 组织/ 临界/ 性/ 理论/ [/ 64/ ]/ 从/ 不同/ 角度/ 证明/ 了/ 软件系统/ 必定/ 是/ 不断/ 演化/ 的/ ./ “/ 演化论/ ”/ 比/ “/ 构造论/ ”/ 更能/ 表达/ 软件系统/ 该/ 方面/ 的/ 特性/ ./ Bennett/ [/ 22/ ]/ 将/ “/ 演化论/ ”/ 下/ 软件系统/ 的/ 生命周期/ 划分/ 为/ 初始/ 开发阶段/ 、/ 演化/ 阶段/ 、/ 维持/ 阶段/ 和/ 淡出/ 阶段/ ./ 梅宏/ 等/ [/ 65/ ]/ 在/ 传统/ 软件系统/ 生命周期/ 的/ 基础/ 上/ 引入/ 了/ “/ 后/ 开发阶段/ ”/ ,/ 主要/ 包含/ 维护/ 、/ 演化/ 、/ 复用/ 等/ 方面/ ./ 从/ “/ 演化论/ ”/ 下/ 软件系统/ 生命周期/ 的/ 相关/ 研究/ 可以/ 看出/ ,/ 演化/ 已经/ 成为/ 软件/ 生命周期/ 中/ 的/ 一个/ 重要/ 阶段/ ./ 如何/ 认识/ “/ 演化论/ ”/ 下/ 在线/ 演化/ 的/ 基本/ 过程/ 是/ 一个/ 很/ 重要/ 的/ 方面/ ./ 在/ Kephart/ 模型/ [/ 66/ ]/ 和/ Dobson/ 自/ 适应/ 六/ 过程/ 闭/ 循环/ [/ 67/ ]/ 、/ Oreizy/ 适应/ 管理/ 周期/ [/ 32/ ]/ 等/ 研究/ 工作/ 基础/ 上/ ,/ 本文/ 提出/ 了/ 处在/ 运行/ 阶段/ 的/ 在线/ 演化过程/ 模型/ ./ 图/ 2/ 结合/ 软件/ 服务/ 在线/ 演化/ 的/ 螺旋/ 上升/ 曲线/ ,/ 给出/ 的/ 这/ 一/ 模型/ ./ Page4/ 图/ 2/ (/ a/ )/ 为/ 软件/ 服务/ 在线/ 演化/ 的/ 螺旋/ 上升/ 曲线/ ,/ 运行/ 中/ 软件系统/ 可信性/ 的/ 提升/ 符合/ 文献/ [/ 68/ -/ 69/ ]/ 中/ 产品质量/ 螺旋/ 上升/ 的/ 客观规律/ ./ 图中/ 软件/ 发布/ 前/ 为/ 软件开发/ 阶段/ ,/ 包括/ 需求/ 分析/ 、/ 设计/ 和/ 实现/ 等/ ;/ 软件/ 发布/ 之后/ 的/ 在线/ 演化/ 阶段/ 主要/ 由/ 一系列/ 不断/ 提升/ 可信性/ 的/ 演化/ 活动/ 组成/ ./ 图/ 2/ (/ a/ )/ 中/ 每个/ 大小不等/ 的/ 圆/ 映射/ 到/ 图/ 2/ (/ b/ )/ 中均/ 为/ 一个/ 在线/ 演化/ 基本/ 过程/ ,/ 即/ 由/ 监控/ 、/ 分析/ 、/ 决策/ 和/ 实施/ 所/ 构成/ 的/ 循环/ ./ 演化/ 基本/ 过程/ 中/ 的/ 每/ 一/ 步骤/ 都/ 与/ 运行/ 时/ 软件体系结构/ 模型/ RSAM/ (/ RuntimeSoftwareArchitectureModel/ )/ 密切相关/ ,/ 体现/ 了/ 体系结构/ 模型/ [/ 51/ ,/ 70/ ]/ 对/ 在线/ 演化过程/ 的/ 重要/ 指导作用/ ./ 图/ 2/ (/ b/ )/ 中/ 在线/ 演化/ 基本/ 过程/ 每/ 循环/ 一次/ ,/ 软件/ 可信性/ 就/ 能/ 得到/ 维持/ 或/ 提升/ ,/ 能够/ 更加/ 适应/ 用户/ 需求/ ./ 文献/ [/ 71/ ]/ 指出/ ,/ 在/ 实施/ 演化/ 前/ ,/ 一般/ 需要/ 对/ 所/ 制定/ 演化/ 方案/ 的/ 可行性/ 进行/ 分析/ 和/ 评估/ ;/ 演化/ 实施/ 后/ 还/ 需要/ 对/ 演化/ 效果/ 及/ 开销/ 进行/ 评估/ ./ 加上/ 上述/ 两类/ 评估/ ,/ 在线/ 演化/ 基本/ 过程/ 模型/ 覆盖/ 了/ 软件/ 服务/ 在线/ 演化/ 所/ 要/ 解决/ 的/ 核心/ 问题/ ,/ 对/ 在线/ 演化/ 研究/ 工作/ 具有/ 一定/ 的/ 宏观指导/ 意义/ ./ 3/ 在线/ 演化/ 分类/ 模型/ 软件/ 演化/ 最初/ 的/ 分类/ 是从/ 软件维护/ 相关/ 分类/ 借鉴/ 而/ 来/ [/ 15/ ,/ 17/ -/ 18/ ]/ ,/ 典型/ 的/ 软件/ 演化/ 相关/ 分类/ 模型/ 有/ Swanson/ [/ 50/ ]/ 、/ IEEE/ [/ 72/ ]/ 、/ Chapin/ 等/ 人/ [/ 73/ ]/ 、/ Wang/ 等/ 人/ [/ 56/ ]/ 、/ Mens/ 等/ 人/ [/ 53/ ,/ 76/ ]/ 和/ Salehie/ 等/ 人/ [/ 5/ ]/ 的/ ./ 上述/ 分类/ 分别/ 从/ 主观/ 目的/ 、/ 客观/ 凭证/ 和/ 演化/ 原因/ 等/ 角度/ 对/ 软件/ 演化/ 、/ 改变/ 、/ 自/ 适应/ 和/ 维护/ 等/ 进行/ 了/ 分类/ ./ 虽然/ 分类/ 方法/ 是/ 软件/ 演化/ 领域/ 的/ 一个/ 研究/ 热点/ ,/ 但/ 鉴于/ 目前/ 软件/ 演化/ 尚无/ 统一/ 定义/ ,/ 演化/ 分类/ 方法/ 也/ 难/ 有/ 一致/ 标准/ ./ 综合/ 已有/ 研究/ 和/ 本文/ 所/ 给/ 软件/ 服务/ 在线/ 演化/ 的/ 定义/ ,/ 本/ 节/ 提出/ 一种/ 从/ 演化/ 范畴/ 、/ 演化/ 类型/ 和/ 演化/ 方式/ 等/ 3/ 个/ 方面/ 对/ 在线/ 演化/ 活动/ 进行/ 分类/ 的/ 分类/ 模型/ ./ 3.1/ 演化/ 范畴/ 演化/ 范畴/ 从/ 演化/ 粒度/ 、/ 功能/ 相关性/ 和/ 层次/ 3/ 个/ 维度/ 刻画/ 在线/ 演化/ 活动/ 的/ 目标/ 对象/ ./ 从/ 软件体系结构/ 的/ 角度/ ,/ 演化/ 粒度/ 可/ 分为/ 构件/ 、/ 连接子/ 和/ 配置/ 演化/ ./ 构件/ 演化/ 是/ 指/ 业务/ 模块/ 的/ 参数/ 重/ 配置/ 、/ 添加/ 、/ 删除/ 、/ 替换/ 等/ 操作/ ;/ 连接子/ 演化/ 是/ 指/ 对/ 业务/ 模块/ 间/ 交互/ 关系/ 的/ 调整/ ;/ 配置/ 演化/ 则/ 涉及/ 到/ 多个/ 构件/ 和/ 连接子/ 的/ 演化/ ,/ 可能/ 还/ 伴有/ 体系结构/ 约束/ [/ 70/ ]/ 等/ 其它/ 元素/ 的/ 演化/ ./ 分布式系统/ 中/ 具有/ 本地/ 内存/ 、/ 相互之间/ 通过/ 消息/ 进行/ 通信/ 的/ 实体/ 被/ 称为/ 结点/ ,/ 相应/ 地/ ,/ 其/ 演化/ 层次/ 可以/ 区分/ 为单/ 结点/ 和/ 跨/ 结点/ 演化/ :/ 单/ 结点/ 是/ 指/ 演化/ 活动/ 仅/ 在/ 单个/ 结点/ 内部/ 进行/ ;/ 跨/ 结点/ 演化/ 则/ 涉及/ 到/ 多个/ 结点/ ./ 例如/ OSGi/ 主要/ 关注/ 单个/ 结点/ 内部/ 的/ 演化/ 活动/ ,/ Rainbow/ 则/ 可以/ 通过/ 建立/ 严格/ 的/ 分层/ 控制/ 方式/ 来/ 实现/ 跨/ 结点/ 演化/ 活动/ ./ 功能/ 主要/ 用来/ 区分/ 演化/ 是否/ 会/ 改变/ 软件系统/ 对外/ 所/ 提供/ 的/ 服务/ :/ 如果/ 仅/ 对/ 代码/ 的/ 格式/ 、/ 文档/ 等/ 进行/ 修改/ ,/ 或者/ 代码/ 修改/ 仅仅/ 是/ 为了/ 重构/ 等/ 目的/ ,/ 则/ 称之为/ 功能/ 无关/ 的/ 演化/ ,/ 反之/ 则/ 称为/ 功能/ 相关/ 的/ 演化/ ./ 3.2/ 演化/ 类型/ 演化/ 类型/ 从/ 主动性/ 、/ 可/ 预期/ 性/ 和/ 自动化/ 程度/ 3/ 个/ 维度/ 刻画/ 在线/ 演化/ 活动/ 的/ 外部/ 特征/ ./ 演化/ 主动性/ 可以/ 分为/ 反应/ 型/ 和/ 前/ 摄型/ 两种/ ./ 反应/ 型/ 演化/ 是/ 指/ 在/ 外部/ 压力/ 刺激/ 下/ 做出/ 的/ 演化/ 活动/ ,/ 例如/ 用户/ 需求/ 变化/ 后/ 对/ 软件/ 实施/ 的/ 必要/ 修改/ ;/ 前/ 摄型/ 演化/ 则/ 是/ 指/ 在/ 对/ 软件系统/ 可能/ 面临/ 风险/ 进行/ 预测/ 的/ 基础/ 上/ ,/ 所/ 实施/ 的/ 有/ 前瞻性/ 的/ 演化/ 活动/ ./ 演化/ 预期/ 性/ 可以/ 分为/ 两种/ :/ 预期/ 型/ 是/ 指/ 在/ 软件开发/ 阶段/ 即可/ 预期/ 的/ 改变/ 活动/ ,/ 其/ 实现/ 相对/ 简单/ ,/ 例如/ 可以/ 通过/ 在/ 应用/ 系统/ 中/ 预留/ 扩展/ 点/ 等/ 形式/ 来/ 支持/ ;/ 非/ 预期/ 型/ 则/ 是/ 开发阶段/ 无法/ 预期/ 的/ 在线/ 改变/ 活动/ ,/ 一般而言/ 需要/ 在/ 开发工具/ 、/ 平台/ 、/ 语言/ 、/ 构件/ 模型/ 等/ 层面/ 上/ 给予/ 支持/ ./ 自动化/ 程度/ 方面/ ,/ 自动化/ 的/ 演化过程/ 是/ 一个/ 不/ 需人/ 参与/ 的/ 闭/ 循环/ ,/ 由/ 软件/ 依据/ 开发阶段/ 所/ 预设/ 的/ 策略/ 做出/ 演化/ 决策/ ;/ 人/ 参与/ 交互式/ 演化/ 则/ 是/ 一个/ 需要/ 人/ 参与/ 的/ 开/ 循环/ ,/ 由人来/ 全部/ 或者/ 部分/ 地/ 做出/ 决策/ ./ 3.3/ 演化/ 方式/ 演化/ 方式/ 从/ 一般性/ 、/ 体系结构/ 和/ 演化/ 策略/ 3/ 个/ 维度/ 刻画/ 在线/ 演化/ 活动/ 的/ 内部/ 实现/ 机制/ ./ 依据/ 是否/ 与/ 特定/ 体系结构/ 风格/ 紧密/ 耦合/ ,/ 演化/ 实现/ 机制/ 可以/ 分为/ 两类/ :/ 具有/ 通用性/ 的/ 一般/ (/ general/ )/ 方法/ ;/ 仅能/ 用于/ 特定/ 系统/ 、/ 解决/ 特定/ 问题/ 的/ 特定/ 方/ Page5/ 法/ ./ 例如/ Rainbow/ 中/ 的/ 演化/ 机制/ 可/ 适用/ 于/ 不同/ 的/ 体系结构/ 风格/ ,/ 具备/ 一般性/ ;/ ArchStudio/ 主要/ 针对/ C2/ 、/ REST/ 等/ 软件体系结构/ 风格/ ,/ 则/ 可以/ 划分/ 为/ 特定/ 方法/ ./ 在/ 体系结构/ 方面/ ,/ 基于/ 体系结构/ 的/ 方法/ 是/ 指/ 在/ 软件/ 运行/ 过程/ 中/ 维护/ 显式/ 的/ 体系结构/ 模型/ ,/ 在/ 该/ 模型/ 指导/ 下/ 实施/ 演化/ 活动/ ;/ 非/ 基于/ 体系结构/ 的/ 方法/ 则/ 不/ 强调/ 显式/ 的/ 体系结构/ 模型/ 维护/ ,/ 例如/ 没有/ 模型/ 指导/ 的/ 动态/ AOP/ (/ Aspect/ -/ OrientedProgramming/ )/ 、/ JavaHotswap/ 机制/ [/ 25/ ]/ 等/ ./ 演化/ 策略/ 主要/ 针对/ 自身/ 具有/ 决策/ 能力/ 的/ 可信/ 演化/ 系统/ ,/ 关注/ 自动化/ 演化过程/ 中/ 如何/ 做出/ 决策/ ,/ 可以/ 分为/ 基于/ 规则/ 和/ 基于/ 学习/ 两类/ ./ 前者/ 一般/ 在/ 开发阶段/ 预测/ 系统/ 可能/ 碰到/ 的/ 各种/ 问题/ ,/ 并/ 设置/ 规则/ (/ 动作/ 策略/ 、/ 效用函数/ 等/ )/ ;/ 后者/ 则/ 可以/ 通过/ 机器/ 学习/ 等/ 方法/ 在/ 运行/ 时/ 扩展/ 其/ 决策/ 能力/ ./ 4/ 典型/ 项目/ 概述/ 与/ 比较/ 本节/ 以/ 在线/ 演化/ 分类/ 模型/ 为/ 基本/ 框架/ ,/ 对/ 目前/ 有/ 代表性/ 的/ 典型/ 项目/ 进行/ 梳理/ 分析/ ,/ 重点/ 比较/ 它们/ 在/ 演化/ 范畴/ 、/ 演化/ 类型/ 和/ 演化/ 方式/ 等/ 方面/ 的/ 异同/ ./ 通过/ 对/ 这些/ 系统/ 的/ 分析/ 比较/ ,/ 总结/ 该/ 领域/ 的/ 研究/ 现状/ ./ 其中/ 演化/ 使能/ 平台/ 对应/ 于图/ 1/ (/ b/ )/ 基于/ 平台/ 的/ 演化/ 模型/ ,/ 可信/ 演化/ 系统/ 对应/ 于图/ 1/ (/ c/ )/ 基于/ 引擎/ 的/ 演化/ 模型/ ./ 4.1/ 演化/ 使能/ 平台/ 4.1/ ./ 1OSGi/ 框架/ [/ 40/ ]/ OSGi/ (/ OpenServicesGatewayInitiative/ )/ 是/ 由/ OSGi/ 联盟/ 制定/ 的/ 服务平台/ 规范/ ,/ 其/ 核心/ 组件/ 是/ OSGi/ 框架/ ./ OSGi/ 框架/ 实现/ 了/ 面向/ 服务/ 的/ 构件/ 模型/ —/ —/ —/ 应用/ 由/ 高度/ 模块化/ 、/ 可/ 动态/ 管理/ 的/ 服务/ 构件/ (/ 被/ 称为/ Bundle/ )/ 组织/ 而成/ ,/ 框架/ 则/ 为/ Bundle/ 运行/ 提供/ 一个/ 通用/ 基础设施/ ./ OSGi/ 框架/ 对/ 在线/ 演化/ 的/ 支持/ 突出表现/ 在/ Bundle/ 的/ 动态/ 管理机制/ 上/ :/ 在/ OSGi/ 框架/ 中/ ,/ Bundle/ 的/ 安装/ 、/ 加载/ 、/ 启动/ 、/ 停止/ 、/ 卸载/ 都/ 可以/ 在/ 运行/ 时/ 动态/ 实施/ ,/ 服务/ 由/ 哪个/ Bundle/ 提供/ 也/ 是/ 由/ 框架/ 中/ 的/ 动态/ 发现/ 机制/ 确定/ 的/ ,/ 因此/ 可以/ 在/ 运行/ 时/ 对/ 部分/ Bundle/ 进行/ 修改/ 更新/ ,/ 而/ 无需/ 重启/ 整个/ 系统/ ./ 4.1/ ./ 2Fractal/ 构件/ 模型/ 及其/ 平台/ [/ 41/ ]/ Fractal/ 是/ 一种/ 支持/ 反射/ 的/ 构件/ 模型/ ./ Fractal/ 构件/ 由/ 内容/ (/ Content/ )/ 和/ 表层/ (/ Membrane/ )/ 两/ 部分/ 组成/ :/ 前者/ 实现/ 业务/ 逻辑/ ,/ 对外/ 提供/ 功能/ 接口/ ;/ 后者/ 对/ 内容/ 进行/ 封装/ 和/ 管理/ ,/ 实现/ 构件/ 的/ 控制/ 接口/ ./ 控制/ 接口/ 的/ 存在/ 使得/ 构件/ 的/ 行为/ 和/ 结构/ 可以/ 在/ 运行/ 时/ 内省/ 或/ 调整/ ,/ 并且/ 这种/ 反射/ 能力/ 并未/ 固化/ 于/ 构件/ 模型/ 中/ ,/ 应用/ 开发者/ 可/ 根据/ 其/ 需求/ 来/ 进行/ 扩展/ ./ 通过/ 反射/ ,/ Fractal/ 可以/ 支持/ 软件系统/ 的/ 在线/ 演化/ ,/ 例如/ 当/ 用户/ 需求/ 变化/ 时/ 对/ 现有/ 系统/ 进行/ 调整/ ,/ 或者/ 将/ 现有/ 系统/ 动态/ 集成/ 到/ 不同/ 的/ 环境/ 中等/ ./ 文献/ [/ 41/ ]/ 同时/ 给出/ 了/ 一个/ 支持/ Fractal/ 构件/ 模型/ 、/ 基于/ Java/ 技术/ 的/ 运行/ 平台/ JULIA/ ./ 4.1/ ./ 3Artemis/ -/ / 平台/ Artemis/ -/ / 平台/ 包括/ Cogent/ [/ 39/ ]/ 、/ M3C/ // MAC/ [/ 74/ ]/ 和/ ARC/ [/ 59/ ]/ 等/ ./ Artemis/ -/ M3C/ 基于/ 截获/ 器/ (/ Intercep/ -/ tor/ )/ 机制/ ,/ 构建/ 了/ PCM/ (/ ProgrammableCoordina/ -/ Page6tionMedia/ )/ 元层/ 来/ 描述/ 基层/ 服务/ 软件/ 实体/ 的/ 协同/ 行为/ ,/ 并/ 通过/ PCM/ 的/ 编程/ 配置/ ,/ 提高/ 服务/ 软件/ 实体/ 对/ 开放/ 网络/ 环境/ 的/ 动态/ 适应能力/ ./ 自/ 演化/ 软件/ 使能/ 支撑/ 平台/ Artemis/ -/ MAC/ 采用/ 了/ RDF/ // OWL/ 技术/ 对/ 情境/ 进行/ 建模/ ,/ 为/ 感知/ 决策/ 提供/ 了/ 一个/ 统一/ 的/ 框架/ ,/ 并/ 将/ 体系结构/ 层面/ 推理/ 的/ 动作/ 序列/ 直接/ 作用/ 于/ 体系结构/ 对象/ ./ Artemis/ -/ ARC/ 是/ 面向/ 体系结构/ 的/ 软件/ 服务平台/ ,/ 由/ 体系结构/ 元/ 模型/ 提供/ 的/ 动态/ 体系结构/ 视图/ 指导/ 应用/ 的/ 运行/ 时/ 变化/ ,/ 能够/ 为/ 服务/ 的/ 集成/ 和/ 演化/ 提供/ 有效/ 支撑/ ./ 4.1/ ./ 4PKUAS/ 平台/ [/ 35/ -/ 37/ ]/ PKUAS/ 是/ 基于/ 体系结构/ 的/ 反射式/ 构件/ 中间件/ 平台/ ,/ 能够/ 支持/ 中间件/ 及其/ 上/ 应用/ 系统/ 状态/ 与/ 行为/ 的/ 在线/ 观测/ 调整/ ./ PKUAS/ 引入/ 软件体系结构/ 以/ 实现/ 反射/ 体系/ 对系统/ 整体/ 的/ 表示/ 和/ 控制/ ,/ 主要/ 解决/ 的/ 问题/ 有/ 两类/ :/ 现有/ 中间件/ 平台/ 过于/ 注重/ 系统/ 局部/ 或/ 单个/ 实体/ 的/ 反射/ 而/ 缺乏/ 全局/ 视图/ ;/ 过于/ 注重/ 中间件/ 平台/ 内部/ 功能/ 的/ 反射/ 而/ 对/ 上层/ 应用/ 反射/ 不够/ ./ PKUAS/ 系统/ 中/ 的/ 实体/ 可/ 分为/ 系统/ 构件/ (/ 如/ 容器/ 系统/ 、/ 公共服务/ 、/ 工具/ )/ 和/ 微内核/ 两类/ ,/ 其中/ 微内核/ 负责/ 对系统/ 构件/ 的/ 加载/ 、/ 配置/ 、/ 卸载/ 以及/ 启动/ 、/ 停止/ 、/ 挂/ 起/ 等/ 状态/ 管理/ ./ 4.1/ ./ 5ArchStudio/ 平台/ [/ 33/ -/ 34/ ]/ ArchStudio/ 平台/ 是/ 基于/ 软件体系结构/ 来/ 实现/ 软件系统/ 开发/ 和/ 演化/ 的/ 环境/ ,/ 整合/ 了/ 体系结构/ 描述/ 、/ 体系结构/ 变化/ 的/ 表示/ 、/ 演化/ 结果/ 呈现/ 、/ 演化/ 规划/ 执行/ 等/ 工具/ ./ 早期/ ArchStudio/ 的/ 工作/ 基于/ C2/ 体系结构/ 风格/ ,/ 在/ 其/ 后续/ 版本/ 中/ ,/ 陆续/ 增加/ 了/ 对/ xADL/ 等/ 体系结构/ 描述语言/ 的/ 支持/ 以及/ 基于/ 知识/ 的/ 自/ 适应/ 管理/ 等/ ./ 由于/ C2/ 本身/ 是/ 一种/ 较/ 灵活/ 的/ 动态/ 体系结构/ 风格/ ,/ 所以/ ArchStudio/ 可以/ 较/ 好/ 地/ 支持/ 体系结构/ 演化/ ./ ArchStudio/ 在/ 实施/ 演化/ 计划/ 之前/ ,/ 一般/ 会/ 评估/ 演化/ 方案/ ,/ 包括/ 演化/ 效果/ 的/ 预测/ 分析/ 和/ 演化/ 的/ 影响/ 评估/ 等/ ./ 4.2/ 可信/ 演化/ 系统/ 4.2/ ./ 1K/ -/ Component/ [/ 45/ -/ 48/ ]/ K/ -/ Component/ 的/ 目标/ 通过/ 自/ 底向上/ 方式/ 创建/ 具有/ 适应性/ 的/ 分布式系统/ ,/ 所谓/ “/ 自/ 底向上/ ”/ 是/ 指/ 各个/ 结点/ 具备/ 自/ 管理/ 和/ 自/ 演化/ 能力/ ,/ 结点/ 间/ 则/ 通过/ 协同/ 来/ 实现/ 系统/ 层面/ 上/ 的/ 自/ 管理/ ./ K/ -/ Component/ 的/ 工作/ 包括/ :/ (/ 1/ )/ 支持/ 反射/ 的/ 构件/ 模型/ ;/ (/ 2/ )/ 体系结构/ 反射/ 协议/ 及/ 具体化/ 该/ 协议/ 的/ 容器/ ,/ 容器/ 在/ 运行/ 时/ 维护/ 显式/ 的/ 体系结构/ 模型/ ,/ 依据/ 适应/ 契约/ (/ adaptationcontract/ )/ 驱动/ 演化/ 动作/ ;/ (/ 3/ )/ 协同/ 强化/ 学习/ (/ collabo/ -/ rativereinforcementlearning/ )/ 机制/ ,/ 实现/ 从/ 个体/ 自/ 演化/ 到/ 群体/ 自/ 演化/ 的/ 过渡/ ./ 在/ K/ -/ Component/ 中/ ,/ 由于/ 每个/ 构件/ 只/ 拥有/ 局部/ 视图/ ,/ 因此/ 单个/ 构件/ 演化/ 能力/ 是/ 受限/ 的/ [/ 74/ ]/ ,/ 而/ 系统/ 层面/ 上/ 的/ 协同/ 强化/ 学习/ 方法/ 也/ 只能/ 适用/ 于/ 某些/ 特定/ 场景/ [/ 47/ ]/ ./ 4.2/ ./ 2RainBow/ [/ 3/ -/ 4/ ]/ Rainbow/ 的/ 目标/ 是/ 构建/ 一个/ 以/ 体系结构/ 为/ 中心/ 、/ 可/ 重用/ 的/ 自/ 适应/ 软件/ 基础设施/ ,/ 使得/ 遗留/ 系统/ 或/ 新/ 开发/ 系统/ 可以/ 以较/ 低/ 的/ 代价/ 获得/ 可信/ 演化/ 能力/ ./ Rainbow/ 在/ 运行/ 时/ 维护/ 一个/ 显式/ 的/ 体系结构/ 模型/ ,/ 基于/ 该/ 模型/ 所/ 收集/ 的/ 信息/ 和/ 预定/ 义/ 的/ 策略/ 触发/ 自/ 适应/ 动作/ ./ Rainbow/ 的/ 总体/ 架构/ 由/ 系统/ 层/ 、/ 翻译/ 设施/ 和/ 体系结构/ 层/ 组成/ ,/ 每/ 一层/ 又/ 包括/ 若干/ 部件/ 及/ 对/ 这些/ 部件/ 进行/ 定制/ 的/ 实体/ (/ 如/ 策略/ 、/ 映射/ 规则/ 、/ 操作/ 子/ 等/ )/ ./ 这一/ 架构/ 对于/ 软件/ 重用/ 的/ 支持/ 主要/ 体现/ 在/ :/ (/ 1/ )/ 体系结构/ 层/ 设施/ 是/ 与/ 具体/ 体系结构/ 风格/ 无关/ 的/ ,/ 它/ 通过/ 翻译/ 设施/ 与/ 应用/ 系统/ 交互/ ;/ (/ 2/ )/ 可以/ 通过/ Acme/ 体系结构/ 描述语言/ 和/ Stitch/ 策略/ 语言/ 来/ 指定/ 策略/ 、/ 操作/ 子/ 等/ ,/ 从而/ 使/ 基础设施/ 为/ 不同/ 应用服务/ ;/ (/ 3/ )/ Rainbow/ 也/ 支持系统/ 层/ 设施/ 、/ 翻译/ 设施/ 及/ 系统/ 自/ 适应/ 知识/ 的/ 重用/ [/ 3/ ]/ ./ 4.2/ ./ 3MBD/ 系统/ [/ 49/ ]/ MBD/ 是/ 一种/ 基于/ 模型/ 诊断/ 实施/ 在线/ 演化/ 的/ 框架/ ,/ 利用/ 对/ 上下文/ 的/ 诊断/ 降低/ 演化/ 复杂性/ ,/ 提高/ 软件/ 鲁棒性/ ./ MBD/ 模型/ 诊断/ 的/ 主要/ 作用/ 包括/ :/ 诊断/ 异常/ 行为/ 的/ 源头/ 并/ 纠正/ 偏离/ 行为/ ;/ 诊断/ 程序/ 失效/ 和/ 性能/ 缺失/ ;/ 为/ 重新制定/ 目标/ 和/ 上下文/ 重/ 配置/ 提供/ 依据/ ;/ 为/ 新策略/ 的/ 选择/ 提供/ 依据/ ;/ 使/ 程序/ 具有/ 理解/ 、/ 监控/ 和/ 修改/ 自身/ 行为/ 的/ 能力/ 等/ ./ MBD/ 与/ 传统/ 的/ 离线/ 、/ 需要/ 人/ 参与/ 的/ 演化/ 不同/ ,/ 主要/ 表现/ 在/ :/ 在/ 运行/ 时/ 检测/ 演化/ 需求/ ,/ 并/ 实施/ 所/ 需/ 演化/ ;/ 采用/ 自/ 建模/ 方式/ ,/ 其自/ 建模/ 程序/ 包含/ 在/ 运行/ 程序/ 中/ ,/ 这/ 体现/ 了/ MBD/ 内在/ 驱动/ 演化/ 和/ 自动化/ 操作/ 等/ 特性/ ;/ 评估/ 、/ 修订/ 和/ 重/ 配置/ 等/ 都/ 由/ 软件/ 操作/ 模型/ 驱动/ ;/ 每个/ 构件/ 都/ 有/ 描述/ 信息/ ,/ 以便/ 系统/ 的/ 构件/ 可/ 在/ 运行/ 时/ 选择/ 和/ 调度/ ;/ 每种/ 描述/ 都/ 以/ 模型/ 形式/ 显现/ ,/ 即/ 描述/ 必须/ 包含/ 一个/ 重要/ 的/ 功能/ 抽象/ ,/ 以便/ 支持/ 描述/ 所/ 涉及/ 的/ 操作/ ./ 4.2/ ./ 4MADAM/ [/ 44/ ]/ MADAM/ (/ Mobility/ -/ andAdaptation/ -/ EnablingMiddleware/ )/ 是/ 面向/ 移动/ 环境/ 下/ 自/ 适应/ 软件/ 构造/ 和/ 运行/ 的/ 中间件/ ./ 在/ MADAM/ 的/ 设计/ 中/ ,/ 同一/ 构件/ 可以/ 有/ 适合/ 不同/ 场景/ 的/ 多个/ 实现/ 体/ ,/ 在线/ 演化/ 主要/ 体现/ 为/ 依据/ 上下文/ 和/ 预定/ 义/ 效用函数/ 切换/ 实现/ 体/ 的/ 过程/ ,/ 例如/ 当/ 应用/ 迁移/ 到/ 不同/ 设备/ 上时/ 加载/ 不同/ 人机/ Page7/ 交互/ 界面/ ./ MADAM/ 为此/ 维护/ 两类/ 运行/ 时/ 体系结构/ 模型/ :/ 框架/ 体系结构/ 模型/ 指明/ 了/ 需要/ 哪些/ 构件/ ,/ 实例/ 体系结构/ 模型/ 则/ 指明/ 了/ 对应/ 于/ 这些/ 构件/ ,/ 加载/ 了/ 哪些/ 具体/ 的/ 实现/ 体/ ./ 在/ 运行/ 时/ ,/ MADAM/ 依据/ 当前/ 环境/ 状态/ 和/ 效用函数/ 进行/ 规划/ ,/ 检查/ 理想/ 体系结构/ 配置/ 与/ 当前/ 实例/ 体系结构/ 模型/ 的/ 差异/ ,/ 据此/ 进行/ 实现/ 体/ 切换/ 等/ 演化/ 操作/ ./ 4.2/ ./ 5UbiStar/ [/ 75/ ]/ UbiStar/ 是/ 支持/ 自/ 适应/ 软件开发/ 、/ 运行/ 和/ 管理/ 的/ 平台/ ./ 在/ UbiStar/ 平台/ 上/ ,/ 应用/ 由/ 感知/ 构件/ 、/ 行为/ 构件/ 和/ 包括/ 策略/ 连接子/ 等/ 在内/ 的/ 各类/ 连接子/ 组装/ 而成/ ./ 其中/ ,/ 感知/ 构件/ 负责/ 感知/ 环境/ 变化/ ,/ 行为/ 构件/ 负表/ 1/ 在线/ 演化/ 相关/ 部分/ 典型/ 项目/ 的/ 比较/ 项目/ OSGI/ 构件/ 单/ 结点/ 相关/ 第三方/ 决定/ 非/ 预期/ Fractal/ 构件/ 单/ 结点/ 相关/ 第三方/ 决定/ 非/ 预期/ Artemis/ -/ ARC/ 配置/ 跨/ 结点/ 相关/ 第三方/ 决定/ 非/ 预期/ PKUAS/ 配置/ 跨/ 结点/ 相关/ 第三方/ 决定/ 非/ 预期/ ArchStudio/ 配置/ 单/ 结点/ 相关/ 第三方/ 决定/ 非/ 预期/ K/ -/ Component/ 配置/ 跨/ 结点/ 相关/ 反应/ 型/ 预期/ +/ 非/ 预期/ 自动化/ Rainbow/ 配置/ 跨/ 结点/ 相关/ 反应/ 型/ 预期/ MBD/ 配置/ 单/ 结点/ 相关/ 前/ 摄型/ 预期/ MADAM/ 构件/ 单/ 结点/ 相关/ 反应/ 型/ 预期/ UbiStar/ 配置/ 跨/ 结点/ 相关/ 反应/ 型/ 预期/ +/ 非/ 预期/ 自动化/ +/ 人/ 参与/ 交互/ 特定/ 有关/ 基于/ 规则/ 注/ :/ 以上/ 各栏/ 均/ 基于/ 各/ 项目/ 引用/ 率/ 较/ 高/ 的/ 经典/ 参考文献/ ,/ 某些/ 项目/ 后期/ 所/ 做/ 的/ 扩展/ 工作/ 未/ 计入/ ./ 在/ 演化/ 范畴/ 方面/ ,/ 现有/ 项目/ 可以/ 从/ 构件/ 、/ 配置/ 等/ 不同/ 粒度/ 上/ 为/ 在线/ 演化/ 活动/ 提供/ 支持/ ;/ 部分/ 项目/ 在/ 设计/ 时/ 考虑/ 了/ 对/ 跨/ 结点/ 演化/ 活动/ 的/ 支持/ ;/ 所有/ 项目/ 均/ 能够/ 支持/ 软件系统/ 功能/ 的/ 演化/ ,/ 而/ 大/ 多功能/ 相关/ 的/ 演化/ 都/ 会/ 涉及/ 功能/ 无关/ 的/ 演化/ ,/ 例如/ 对/ 源代码/ 的/ 可读性/ 做/ 不/ 改变/ 语义/ 的/ 调整/ 、/ 对/ 软件/ 文档/ 的/ 修改/ 补充/ 等/ ./ 在/ 演化/ 类型/ 方面/ ,/ 可以/ 从/ 演化/ 使能/ 平台/ 和/ 可信/ 演化/ 系统/ 两个/ 角度/ 进行/ 分析/ ./ 对于/ 演化/ 使能/ 平台/ ,/ 由于/ 实施/ 何种/ 演化/ 活动/ 是/ 由/ 作为/ 第三方/ 的/ 管理/ 维护/ 人员/ 决定/ 的/ (/ 参见/ 图/ 1/ (/ b/ )/ )/ ,/ 因此/ 演化/ 活动/ 的/ 性质/ 也/ 取决于/ 第三方/ ,/ 且/ 这些/ 演化/ 活动/ 往往/ 是/ 开发阶段/ 无法/ 完全/ 预期/ 的/ ./ 可信/ 演化/ 系统/ 可以/ 自动化/ 地/ 实施/ 某些/ 演化/ 活动/ ,/ 但/ 目前/ 的/ 工程/ 实现/ 仍/ 以/ 相对/ 较为简单/ 的/ 、/ 基于/ 规则/ 的/ 反应/ 型/ 为主/ ,/ 其/ 能力/ 受制于/ 开发阶段/ 所/ 给定/ 的/ 演化/ 规则/ ./ 这/ 导致/ 软件/ 服务/ 很难/ 应对/ 开放/ 环境/ 的/ 挑战/ ,/ 因为/ 开放/ 环境/ 意味着/ 很难/ 在/ 开发阶段/ 预期/ 到/ 所有/ 可能/ 的/ 环境/ 变化/ [/ 76/ ]/ ./ 结合/ 演化/ 方式/ 一栏/ 中/ 相关/ 赋值/ 可以/ 看出/ ,/ 解决/ 这一/ 问题/ 目前/ 有/ 两种/ 基本/ 途径/ :/ 采用/ 机器/ 学习/ 等/ 人工智能/ 方法/ (/ 如/ K/ -/ Compo/ -/ nent/ )/ ,/ 但/ 此类/ 方法/ 通常/ 只/ 适用/ 于/ 某些/ 特定/ 的/ 应用/ 场责/ 实现/ 业务/ 逻辑/ ,/ 策略/ 连接子/ 则/ 指定/ 了/ 在/ 环境/ 变化/ 时/ 执行/ 何种/ 适应/ 行为/ (/ 如/ 参数/ 调整/ 或/ 构件/ 增删/ 替换/ )/ ./ 在/ 运行/ 时刻/ ,/ 平台/ 中/ 的/ Auxo/ 软件/ 框架/ 维护/ 显式/ 的/ 环境/ 模型/ 和/ 体系结构/ 模型/ ,/ 并/ 基于/ 这些/ 模型/ 和/ 策略/ 连接子/ 的/ 内容/ 来/ 驱动/ 软件/ 的/ 在线/ 变化/ ./ 同时/ ,/ UbiStar/ 也/ 支持/ 第三方/ 在/ 必要/ 时/ 对/ 正在/ 运行/ 软件/ 的/ 体系结构/ 进行/ 在线/ 调整/ ,/ 部分/ 地/ 体现/ 了/ 本文/ 所/ 给/ 软件/ 演化/ 理想/ 结构/ 模型/ 的/ 思想/ ./ 4.3/ 比较/ 机制/ 如表/ 1/ 所示/ ./ 前述/ 典型/ 项目/ 所/ 支持/ 的/ 软件/ 演化/ 活动/ 及其/ 实现/ 演化/ 类型/ 景/ [/ 47/ ]/ ;/ 在/ 平台/ // 系统/ 层面/ 允许/ 第三方/ 对/ 演化/ 策略/ 等/ 进行/ 动态/ 部署/ 和/ 修改/ (/ 如/ UbiStar/ )/ ,/ 从而/ 在线/ 扩展/ 软件/ 的/ 可信/ 演化/ 能力/ ./ 在/ 演化/ 方式/ 方面/ ,/ 近期/ 在线/ 演化/ 研究/ 工作/ 大多/ 是/ 基于/ 体系结构/ 的/ ,/ 这/ 是因为/ 一方面/ 体系结构/ 信息/ 对/ 软件/ 演化/ 有/ 指导作用/ ,/ 另一方面/ 运行/ 时/ 体系结构/ 模型/ 与/ 实际/ 系统/ 因果/ 关联/ ,/ 可以/ 作为/ 体系结构/ 修改/ 的/ 入口/ ./ 此外/ ,/ 具有/ 通用性/ 的/ 一般性/ 演化/ 方法/ 在/ 理论/ 方面/ 研究/ 较/ 多/ ,/ 而/ 绑定/ 到/ 体系结构/ 风格/ 的/ 特定/ 方法/ 在/ 实现/ 层面/ 的/ 研究/ 较/ 多/ ./ 5/ 未来/ 研究/ 趋势/ 综合/ 目前/ 在线/ 演化/ 相关/ 工作/ 的/ 研究/ 现状/ 以及/ 大规模/ 分布式系统/ 本身/ 的/ 规模/ 持续/ 成长/ 、/ 多/ 目标/ 互相制约/ 、/ 动态/ 自/ 适应/ 等/ 特点/ ,/ 本文/ 认为/ 软件/ 服务/ 在线/ 演化/ 的/ 未来/ 研究/ 趋势/ 主要/ 包括/ :/ (/ 1/ )/ 大规模/ 系统/ 在线/ 演化/ 的/ 改变/ 管理/ 技术/ 改变/ 管理/ (/ changemanagement/ )/ 涉及/ 到/ 演化/ 改变/ 范畴/ 的/ 确定/ 、/ 改变/ 前后/ 的/ 一致性/ 保证/ 、/ 改变/ 动作/ 的/ 开销/ 等/ 一系列/ 问题/ [/ 31/ ,/ 77/ ]/ ./ 在/ 软件系统/ 持续/ 改变/ 和/ 复/ Page8/ 杂性/ 渐增/ [/ 6/ ,/ 18/ ]/ 等/ 特点/ 越来越/ 明显/ 的/ 情况/ 下/ ,/ 改变/ 管理/ 对于/ 大规模/ 分布式/ 软件系统/ 在线/ 演化/ 十分/ 重要/ ./ 一方面/ ,/ 在/ 演化/ 改变/ 边界/ 确定/ 的/ 情况/ 下/ ,/ 大型/ 复杂/ 演化/ 问题/ 可以/ 分解/ 为/ 局部/ 的/ 演化/ 问题/ ,/ 有助于/ 在线/ 演化/ 的/ 实现/ ./ 另一方面/ ,/ 部署/ 在/ 开放/ 网络/ 环境/ 中/ 的/ 大规模/ 分布式系统/ 具有/ 与/ 传统/ 软件系统/ 所/ 不同/ 的/ 特点/ ,/ 例如/ 失效/ 常态/ 性/ 、/ 潜在/ 的/ 目标/ 冲突/ 、/ 可/ 在线/ 成长/ 等/ [/ 78/ ]/ ,/ 这些/ 特点/ 使/ 传统/ 改变/ 管理/ 技术/ 中/ 可/ 建立/ 全局/ 视图/ 、/ 需/ 维护/ 严格/ 一致性/ 等/ 假设/ 有/ 可能/ 不再/ 成立/ ,/ 为/ 改变/ 管理/ 带来/ 挑战/ 的/ 同时/ 也/ 带来/ 了/ 新/ 的/ 机遇/ ./ (/ 2/ )/ 复杂/ 分布/ 环境/ 下/ 的/ 在线/ 演化/ 决策/ 技术/ 演化/ 决策/ 是/ 指/ 在/ 给定/ 演化/ 需求/ 、/ 约束/ 和/ 策略/ 等/ 之后/ ,/ 基于/ 当前/ 系统/ 所/ 处/ 状态/ ,/ 给出/ 一个/ 有关/ 如何/ 实施/ 演化/ 的/ 操作/ 序列/ 的/ 过程/ [/ 5/ ,/ 32/ ,/ 79/ ]/ ./ 演化/ 决策/ 技术/ 是/ 实现/ 软件/ 可信/ 演化/ 最有/ 挑战性/ 的/ 技术/ 之一/ ,/ 这/ 不仅仅/ 是因为/ 目前/ 还/ 不能/ 期望/ 软件/ 完全/ “/ 自主/ ”/ 地/ 做出/ 各种/ 决策/ ,/ 同时/ 也/ 是/ 由/ 复杂/ 分布式/ 环境/ 的/ 特点/ 所/ 决定/ 的/ ,/ 例如/ :/ 在/ 复杂/ 分布式/ 环境/ 下/ 可能/ 无法/ 获得/ 全局/ 视图/ ,/ 诸如/ 非线性/ 规划/ 等/ 定量/ 决策/ 技术/ 可能/ 无法/ 在/ 系统/ 层面/ 上/ 直接/ 应用/ ;/ 演化/ 决策/ 需要/ 聚合/ 来自/ 不同/ 结点/ 的/ 体系结构/ 和/ 状态/ 信息/ ,/ 而/ 在/ 结点/ 间/ 共享/ 这些/ 信息/ 可能/ 会/ 限制/ 系统/ 可伸缩性/ [/ 80/ ]/ ;/ 在/ 结点/ 属于/ 不同/ 管理/ 域/ 的/ 情况/ 下/ ,/ 各个/ 结点/ 的/ 决策/ 结果/ 需要/ 兼顾/ 全局/ 效果/ 和/ 个体/ 偏好/ ,/ 因而/ 可能/ 需要/ 引入/ 准则/ 制约/ 的/ 交互/ (/ law/ -/ governedinteraction/ )/ [/ 81/ ]/ 、/ 涌现/ 行为/ 控制/ [/ 82/ ]/ 等/ 机制/ ,/ 等等/ ./ (/ 3/ )/ 在线/ 演化/ 的/ 预/ 评估/ 和/ 效果/ 评估/ 技术/ 要求/ 软件系统/ 能够/ 持续/ 提供/ 符合/ 用户/ 预期/ 的/ 服务/ ,/ 对/ 演化/ 动作/ 的/ 效果/ 进行/ 评估/ 是/ 必须/ 的/ ./ 这种/ 评估/ 可以/ 发生/ 在/ 演化/ 动作/ 实施/ 之前/ ,/ 以/ 防患于未然/ ,/ 例如/ 为了/ 保证/ 演化过程/ 中/ 事务/ 一致性/ 而/ 预先/ 进行/ 的/ 必要/ 检查/ [/ 76/ ]/ ;/ 也/ 可以/ 发生/ 在/ 演化/ 动作/ 实施/ 之后/ ,/ 以/ 确定/ 演化/ 目标/ 是否/ 已/ 达到/ ,/ 并/ 为/ 后续/ 演化/ 动作/ 提供/ 依据/ ./ 文献/ [/ 83/ ]/ 已经/ 证明/ 完全/ 自动化/ 的/ 通用/ 演化/ 评估/ 方法/ 是/ 计算/ 不可判定/ 的/ ./ 如何/ 针对/ 具体/ 类型/ 的/ 软件/ 演化/ 动作/ ,/ 设计/ 合理/ 的/ 评估/ 机制/ 是/ 未来/ 研究/ 重点/ ./ (/ 4/ )/ 软件/ 服务/ 在线/ 演化/ 基础设施/ 部署/ 在/ 开放/ 网络/ 环境/ 中/ 的/ 大规模/ 软件系统/ 本身/ 极为/ 复杂/ ./ 要/ 将/ 在线/ 演化/ 理想/ 结构/ 模型/ 推向/ 工程/ 实践/ ,/ 合理/ 的/ 软件/ 基础设施/ 是/ 实现/ “/ 化繁为简/ ”/ 的/ 关键/ ./ 基础设施/ 能够/ 以/ 重用/ 部件/ 形式/ 沉淀/ 改变/ 管理/ 、/ 演化/ 决策/ 、/ 演化/ 评估/ 等/ 技术/ ,/ 有效/ 降低/ 软件/ 服务/ 在线/ 演化/ 的/ 开发/ 和/ 运行/ 成本/ ./ 尽管/ 本文/ 第/ 4/ 节/ 给出/ 了/ 若干/ 此类/ 基础设施/ ,/ 然而/ 它们/ 距离/ 实际/ 需求/ 尚有/ 差距/ ./ 例如/ ,/ 基于/ 体系结构/ 技术/ 的/ 基础设施/ 是/ 当前工作/ 主流/ ,/ 但/ 现有/ 项目/ 大多/ 需要/ 维护/ 全局/ 层面/ 上/ 的/ 体系结构/ 模型/ [/ 4/ ,/ 44/ ]/ ,/ 这/ 在/ 跨/ 多个/ 管理/ 域/ 的/ 分布式系统/ 中/ 并不一定/ 成立/ ;/ 基础设施/ 如何/ 应对/ 环境/ 开放性/ 带来/ 的/ 挑战/ 等/ 问题/ 也/ 需要/ 进一步/ 的/ 探索/ [/ 75/ -/ 76/ ]/ ,/ 等等/ ./ 6/ 结束语/ 本文/ 以/ 部署/ 在/ 开放/ 网络/ 环境/ 中/ 、/ 提供/ 持续/ 服务/ 的/ 大规模/ 分布式系统/ 为/ 背景/ ,/ 给出/ 了/ 软件/ 服务/ 在线/ 演化/ 的/ 定义/ ,/ 指出/ 了/ 其/ 与/ 一般/ 软件/ 运行/ 时/ 演化/ 概念/ 在/ 侧重点/ 上/ 的/ 不同之处/ ./ 在/ 此基础/ 上/ ,/ 对/ 在线/ 演化/ 的/ 现有/ 结构/ 模型/ 进行/ 了/ 抽象/ 提炼/ ,/ 提出/ 了/ 软件/ 服务/ 在线/ 演化/ 的/ 理想/ 结构/ 模型/ ;/ 对/ 在线/ 演化/ 的/ 螺旋/ 上升/ 规律/ 进行/ 了/ 分析/ ,/ 提出/ 了/ 软件/ 服务/ 在线/ 演化/ 的/ 一般性/ 过程/ 模型/ ./ 本文/ 进而/ 给出/ 了/ 涵盖/ 演化/ 范畴/ 、/ 演化/ 类型/ 和/ 演化/ 方式/ 等/ 方面/ 的/ 软件/ 服务/ 在线/ 演化/ 分类/ 模型/ ,/ 并/ 以/ 其/ 为/ 框架/ ,/ 系统/ 梳理/ 和/ 比较/ 了/ 目前/ 几种/ 具有/ 代表性/ 的/ 演化/ 使能/ 平台/ 和/ 可信/ 演化/ 系统/ ./ 最后/ 结合/ 目前/ 软件/ 服务/ 在线/ 演化/ 的/ 实际/ 应用/ 需求/ 和/ 研究/ 现状/ ,/ 从/ 改变/ 管理/ 、/ 演化/ 决策/ 、/ 演化/ 评估/ 、/ 基础设施/ 等/ 方面/ 分析/ 了/ 软件/ 服务/ 在线/ 演化/ 技术/ 的/ 未来/ 研究/ 趋势/ ./ 

