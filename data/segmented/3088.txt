Page1/ 一种/ 求解/ 输运/ 方程/ 的/ 并行/ 调度/ 算法/ 周涤宇/ 1/ )/ 刘杰/ 2/ )/ 1/ )/ (/ 西安卫星测控中心/ 西安/ 710043/ )/ 2/ )/ (/ 国防科学技术大学/ 计算机/ 学院/ 长沙/ 410073/ )/ 摘要/ 高效/ 并行/ 扫描/ 问题/ 是/ 调度/ 问题/ 的/ 子集/ ,/ 调度/ 问题/ 是/ NP/ 完全/ 问题/ ./ 针对/ 输运/ 问题/ 的/ 特点/ ,/ 如何/ 按/ 特定/ 的/ 计算/ 次序/ 调度/ 本地/ 网格/ 单元/ ,/ 以/ 保证/ 最佳/ 的/ 计算/ 与/ 通信/ 性能/ 是/ 一个/ 难度很大/ 的/ 问题/ ./ 文中/ 设计/ 了/ 一种/ 基于/ 局部/ 深度/ 优先/ 的/ 优先级/ (/ PDFDS/ )/ 算法/ ,/ 该/ 算法/ 具有/ 局部性/ 、/ 通信量/ 小/ 、/ 优先级/ 队列/ 好/ 等/ 特点/ ./ 将/ PDFDS/ 算法/ 应用/ 到/ 求解/ 二维/ 粒子/ 输运/ 方程/ 的/ 程序/ 中/ ,/ 与/ 现有/ 的/ 调度/ 算法/ 相比/ ,/ 新/ 算法/ 具有/ 更好/ 的/ 并行计算/ 效果/ ,/ 对于/ 大规模/ 计算/ 问题/ ,/ 可以/ 扩展/ 到/ 1024/ 个/ 处理器/ ,/ 相对/ 于/ 64/ 个/ 处理器/ 的/ 并行/ 效率/ 达到/ 了/ 96/ %/ ./ 关键词/ 输运/ 方程/ ;/ 并行/ 调度/ ;/ 优先级/ 算法/ ;/ 非/ 结构/ 网格/ ;/ 并行算法/ 1/ 引言/ 输运/ 方程/ [/ 1/ ]/ 是/ 核科学/ 与/ 工程/ 应用/ 中/ 的/ 一类/ 重要/ 的/ 偏/ 微分方程/ ,/ 通过/ 大量/ 微观粒子/ 的/ 输运/ ,/ 确定/ 粒子/ 在/ 几何/ 空间/ 、/ 能量/ 、/ 速度/ 相空间/ 和/ 时间/ 上/ 的/ 分布/ ./ 由/ Page2/ 目前/ 典型/ 的/ 求解/ 非/ 结构/ 网格/ 上/ 输运/ 方程/ 的/ 并行算法/ 有/ :/ Plimpton/ 、/ Hendrickson/ 、/ Burns/ 和/ Mclendon/ [/ 2/ ]/ 设计/ 的/ 三维/ Cartesian/ 坐标系/ 下/ 的/ 基于/ 网格/ 区域/ 分解/ 的/ 并行/ 流水线/ Sn/ 扫描/ 算法/ ;/ 莫则/ 尧/ [/ 3/ ]/ 通过/ 分析/ 二维/ 柱/ 几何/ Lagrange/ 坐标系/ 非/ 结构/ 网格/ 上/ 间断/ 有限元/ Sn/ 方法/ 的/ 内在/ 并行度/ ,/ 提出/ 的/ 相应/ 的/ 并行/ 流水线/ Sn/ 扫描/ 算法/ ./ 这/ 两种/ 算法/ 具有/ 一定/ 的/ 相似性/ ,/ 进行/ 结点/ 调度/ 时/ 没有/ 考虑/ 网格/ 点间/ 复杂/ 的/ 数据/ 依赖/ 关系/ ./ 然而/ 本地/ 网格/ 单元/ 的/ 执行/ 顺序/ 会/ 直接/ 影响/ 并行算法/ 的/ 性能/ ./ 所以/ 为了/ 获得/ 高/ 的/ 并行计算/ 性能/ ,/ 必须/ 有/ 好/ 的/ 调度/ 算法/ ./ 使用/ 对/ 每个/ 结点/ 赋/ 优先级/ 的/ 方式/ 来/ 确定/ 结点/ 的/ 调度/ 顺序/ 是/ 现在/ 比较/ 通用/ 的/ 一种/ 方法/ ./ 在/ 可/ 调度/ 结点/ 集合/ 当中/ ,/ 优先级/ 大/ 的/ 结点/ 先/ 调度/ ,/ 优先级/ 小/ 的/ 结点/ 后/ 调度/ ,/ 所以/ 调度/ 问题/ 转化成/ 了/ 优先级/ 算法/ 的/ 设计/ 问题/ ./ 当前/ ,/ 比较/ 典型/ 的/ 优先级/ 策略/ 有/ 最晚/ 完成/ 时间/ 策略/ [/ 4/ ]/ 、/ 最/ 晚/ 开始/ 时间/ 策略/ [/ 5/ ]/ 、/ b/ -/ level/ 策略/ [/ 6/ ]/ 、/ BFDS/ 策略/ [/ 6/ ]/ 、/ DFDS/ 策略/ [/ 6/ ]/ 、/ DFHDS/ 策略/ [/ 6/ ]/ 、/ For/ -/ ward/ -/ Backward/ 策略/ [/ 7/ ]/ 、/ 最短/ 内部/ 边界/ 路径/ 策略/ [/ 8/ ]/ 、/ 多/ 优先级/ 策略/ [/ 9/ -/ 10/ ]/ 、/ 顺逆/ 交替/ 迭代/ 调度/ 算法/ [/ 11/ ]/ 等/ ./ 但是/ ,/ 以上/ 的/ 策略/ 和/ 算法/ 都/ 需要/ 使用/ 到/ 全局/ 结点/ 的/ 信息/ ,/ 当/ 问题/ 规模/ 很大/ 、/ 使用/ 处理器/ 数量/ 很多/ 时/ ,/ 这些/ 策略/ 和/ 算法/ 的/ 成本/ 开销/ 将会/ 急剧/ 增加/ ,/ 严重/ 影响/ 并行算法/ 的/ 并行/ 性能/ ./ 本文/ 在/ DFDS/ 策略/ 的/ 启示/ 下/ 设计/ 了/ 一种/ 基于/ 局部/ 深度/ 优先/ 的/ 并行/ 优先级/ (/ PDFDS/ )/ 算法/ ,/ 与/ 现有/ 的/ 优先级/ 算法/ 进行/ 比较/ ,/ 并行计算/ 性能/ 有/ 较/ 大幅度提高/ ./ 本文/ 第/ 2/ 节/ 介绍/ 输运/ 调度/ 模型/ ;/ 第/ 3/ 节/ 分析/ 几种/ 基于/ 深度/ 优先/ 的/ 优先级/ 算法/ ;/ 第/ 4/ 节/ 给出/ 一种/ 局部/ 深度/ 优先/ 的/ 并行/ 优先级/ (/ PDFDS/ )/ 算法/ ;/ 第/ 5/ 节对/ 算法/ 进行/ 性能/ 分析/ 和/ 预测/ ;/ 第/ 6/ 节对/ 算法/ 进行/ 测试/ 对比/ ;/ 第/ 7/ 节/ 进行/ 总结/ ./ 2/ 输运/ 调度/ 模型/ 求解/ 离散/ 输运/ 方程/ 的/ 标准/ 迭代/ 方法/ 是/ 源/ 迭代法/ ,/ 交替/ 求解/ 局部/ 的/ 散射/ 源/ 和/ 全部/ 流/ 驱动/ 碰撞/ 的/ 变换/ 算子/ ./ 离散/ 纵标/ (/ Sn/ )/ 方程/ 由/ 输运/ 方程/ 导出/ ,/ 流/ 驱动/ 碰撞/ 算子/ 通常/ 由/ “/ 扫描/ ”/ 方法/ 变换/ 而来/ ./ 在/ 每次/ 扫描/ 中/ ,/ 对/ 离散/ 纵标/ 集中/ 的/ 每个/ 方向/ ,/ 流/ 驱动/ 碰撞/ 算子/ 通过/ 网格/ 上/ 的/ 每个/ 空间/ 局部/ 单元/ 以/ 特定/ 的/ 顺序/ 进行/ 求解/ ./ 而/ 顺序/ 依赖于/ 网格/ 点/ 的/ 相互作用/ ,/ 对于/ 某个/ 特定/ 的/ 角/ 方向/ ,/ 下游/ 的/ 网格/ 点/ 需要/ 等待/ 上游/ 网格/ 点/ 计算结果/ ./ 整个/ 的/ 计算/ 过程/ ,/ 就/ 像/ 一个/ 平面波/ 在/ 向前/ 传播/ ,/ “/ 下游/ ”/ 依赖/ “/ 上游/ ”/ 的/ 计算/ ./ 分配/ 到/ 不同/ 处理器/ 的/ 网格/ 点/ ,/ 如果/ 存在/ 上下游/ 的/ 依赖/ 关系/ ,/ 就/ 需要/ 通信/ ,/ 通信量/ 大/ ,/ 同时/ 下游/ 处理机/ 需要/ 等待/ ,/ 这种/ 特定/ 的/ 顺序/ 使得/ 数据/ 具有/ 强/ 依赖性/ ./ 如图/ 1/ 所示/ ,/ 网格/ D/ 的/ 求解/ 依赖于/ 它/ 的/ 上游/ 网格/ D1/ 和/ D2/ ,/ 保证/ 在/ 每个/ 网格/ 计算/ 时/ ,/ 其进/ 流边/ 是/ 计算/ 区域/ 的/ 外/ 边界/ 的/ 一部分/ ,/ 或者/ 是/ 已/ 计算/ 过/ 的/ 邻/ 网格/ 边界/ ./ 输运/ 问题/ 中/ 网格/ 计算/ 顺序/ 的/ 数据/ 依赖/ 关系/ 可以/ 抽象/ 成/ 一个/ 带权/ 有向图/ G/ =/ (/ V/ ,/ E/ ,/ 狆/ ,/ W/ )/ ./ 这个/ 有向图/ 一般/ 是/ 无/ 循环/ 图/ ,/ 即/ DAG/ 图/ ./ 图中/ 的/ 结点/ 集/ V/ =/ {/ 1/ ,/ 2/ ,/ …/ ,/ n/ }/ 代表/ 所有/ 网格/ 单元/ 的/ 计算/ 任务/ ,/ 图中/ 的/ 有/ 向/ 边/ 集合/ E/ =/ {/ (/ i1/ ,/ j1/ )/ ,/ …/ ,/ (/ im/ ,/ jm/ )/ }/ 代表/ 网格/ 间/ 所有/ 的/ 数据/ 依赖/ 关系/ ./ 非负/ 向量/ 狆/ 称为/ 结点/ 权重/ 向量/ ,/ 元素/ pi/ 代表/ 结点/ i/ 的/ 时间/ 开销/ ;/ 非负/ 矩阵/ W/ 称为/ 有/ 向/ 边/ 权重/ 矩阵/ ,/ 元素/ wk/ ,/ j/ 表示/ 有/ 向/ 边/ (/ k/ ,/ j/ )/ 的/ 时间/ 开销/ ./ 如果/ 有/ 向/ 边/ (/ k/ ,/ j/ )/ ∈/ E/ ,/ 则/ 称/ 该/ 有/ 向/ 边/ 与/ 结点/ k/ ,/ j/ 相关联/ ,/ 结点/ k/ 是/ 该/ 有/ 向/ 边/ 的/ 前端/ 点/ ,/ 结点/ j/ 是/ 该/ 有/ 向/ 边/ 的/ 后/ 端点/ ;/ 并称/ 结点/ k/ 是/ 结点/ j/ 的/ 直接/ 前驱/ ,/ 结点/ j/ 是/ 结点/ k/ 的/ 直接/ 后继/ ./ 没有/ 直接/ 前驱/ 的/ 结点/ 称为/ 源点/ ;/ 没有/ 直接/ 后继/ 的/ 结点/ 称为/ 汇点/ ./ 定义/ 有/ 向/ 路经/ 为/ 一组/ 结点/ 序列/ (/ u1/ ,/ u2/ ,/ …/ ,/ us/ )/ ,/ 满足/ (/ ui/ ,/ ui/ +/ 1/ )/ ∈/ E/ ,/ 任意/ 1/ / i/ </ s/ ./ 如果/ 图/ G/ 中/ 存在/ 从/ 结点/ k/ 到/ 结点/ j/ 的/ 有/ 向/ 路经/ ,/ 则/ 称/ 结点/ k/ 是/ 结点/ j/ 的/ 前驱/ ,/ 结点/ j/ 是/ 结点/ k/ 的/ 后继/ ./ 路径/ 长度/ 指/ 路径/ 上/ 包含/ 的/ 所有/ 结点/ 和/ 有/ 向/ 边/ 的/ 权重/ 总和/ ./ 在/ 并行/ 调度/ 模型/ 中/ ,/ 将/ 有向图/ G/ 划分/ 成/ P/ 个/ 互不/ 重叠/ 的/ 子/ 图/ ,/ 分别/ 分配/ 给/ P/ 个/ 处理器/ ./ 如果/ 结点/ i/ 属于/ 处理器/ p/ ,/ 则/ 称/ 处理器/ p/ 是/ 结点/ i/ 的/ 属主/ ,/ 结点/ i/ 是/ 处理器/ p/ 的/ 本地/ 结点/ ./ 如果/ 结点/ i/ 的/ 前驱/ (/ 后继/ )/ 结点/ j/ 和/ 结点/ i/ 同属/ 一个/ 处理器/ ,/ 则/ 称/ 结点/ j/ 是/ 结点/ i/ 的/ 本地/ 前驱/ (/ 后继/ )/ 结点/ ./ 如果/ 有/ 向/ 边/ (/ k/ ,/ j/ )/ 两端/ 结点/ k/ 和/ j/ 分属/ 不同/ 的/ 处理器/ ,/ 则/ (/ k/ ,/ j/ )/ 称为/ 截弧/ ;/ 如果/ 有/ 向/ 边/ (/ k/ ,/ j/ )/ 两端/ 结点/ k/ 和/ j/ 属于/ 同一个/ 处理器/ ,/ 则/ (/ k/ ,/ j/ )/ 称为/ 内部/ 弧/ ./ 一般来说/ ,/ 内部/ 弧/ 的/ 权重/ 总是/ 设为/ 0/ ,/ 而/ 截弧/ 的/ 权重/ 总是/ 大于/ 等于/ 0/ ./ Page3/ 在/ 使用/ 并行/ 流水线/ Sn/ 扫描/ 算法/ [/ 3/ ]/ 求解/ 输运/ 方程/ 的/ 过程/ 中/ ,/ 某一/ 时刻/ 任/ 一个/ 处理器/ 可能/ 没有/ 结点/ 可/ 供/ 调度/ (/ 空闲/ )/ ,/ 也/ 可能/ 有/ 一个/ 或/ 多个/ 结点/ 可/ 供/ 调度/ ./ 这些/ 可/ 供/ 调度/ 的/ 结点/ 是/ 指/ 那些/ 其/ 直接/ 前驱/ 结点/ 已经/ 全部/ 计算/ 完/ 的/ 结点/ ,/ 或者/ 是/ 进流/ 边界/ 上/ 的/ 结点/ ./ 调度/ 算法/ 的/ 作用/ 主要/ 是/ 在/ 处理器/ 有/ 多个/ 结点/ 可/ 供/ 调度/ 时/ 选择/ “/ 最/ ”/ 合适/ 的/ 结点/ 进行/ 调度/ ,/ 从而/ 最大/ 限度/ 地/ 减少/ 所有/ 处理器/ 总/ 的/ 空闲/ 时间/ ,/ 提高/ 扫描/ 算法/ 的/ 并行/ 效率/ ./ 3/ 优先级/ 调度/ 算法/ 分析/ 优先级/ 调度/ 算法/ 是/ 给/ 每个/ 结点/ 按/ 某种/ 规则/ 设置/ 一个/ 优先级/ ,/ 在/ 结点/ 调度/ 时/ 依照/ 优先级/ 的/ 大小/ 来/ 确定/ 调度/ 的/ 先后顺序/ ./ 现有/ 的/ 并行/ 流水线/ Sn/ 扫描/ 算法/ [/ 3/ ]/ 主要/ 使用/ 的/ 是/ 追尾/ 法/ (/ 补尾法/ )/ ,/ 即/ 给/ 每个/ 结点/ 设/ 相同/ 的/ 优先级/ ,/ 这样/ 结点/ 将/ 按照/ 满足/ 调度/ 要求/ 的/ 先后顺序/ 进行/ 调度/ ./ 追尾/ 法/ 的/ 算法/ 成本/ 开销/ 很小/ ,/ 但是/ 它/ 没有/ 考虑/ 网格/ 点间/ 的/ 数据/ 依赖/ 关系/ ,/ 所以/ 很难/ 得到/ 较/ 高/ 的/ 并行/ 效率/ ./ 下面/ 是/ 几种/ 基于/ 深度/ 优先/ 的/ 优先级/ 算法/ ./ b/ -/ level/ 优先级/ 算法/ ./ b/ -/ level/ 优先级/ 设/ 为/ 源点/ 最大/ (/ MAX/ )/ ,/ 源点/ 的/ 直接/ 后继/ 次之/ ,/ 依次/ 类推/ ,/ 将/ 整个/ DAG/ 图/ 划分/ 为/ n/ 个/ 等级/ ./ 图/ 2/ 为/ 一个/ 简单/ 的/ b/ -/ level/ 等级/ 示意图/ ,/ 取/ MAX/ 等于/ 10/ ,/ 结点/ 旁边/ 的/ 数字/ 代表/ 该/ 结点/ 的/ b/ -/ level/ 等级/ ./ BFDS/ 优先级/ 算法/ ./ 对/ 任意/ 一个/ 结点/ ,/ 如果/ 它/ 有/ 不/ 属于/ 自己/ 同一个/ 处理器/ 的/ 后继/ 结点/ ,/ 设/ 这些/ 结点/ 集为/ V/ ,/ 则/ 令/ 该/ 结点/ 的/ 优先级/ 等于/ V/ 中/ 结点/ 最大/ 的/ b/ -/ level/ 等级/ ;/ 如果/ V/ 为/ 空集/ 则/ 将/ 该/ 结点/ 的/ 优先级/ 设为/ 0/ ./ DFDS/ 优先级/ 算法/ ./ 对/ 任意/ 一个/ 结点/ ,/ 如果/ 它/ 有/ 不/ 属于/ 自己/ 同一个/ 处理器/ 的/ 直接/ 后继/ 结点/ ,/ 设/ 这些/ 结点/ 集为/ U/ ,/ 则/ 令/ 该/ 结点/ 的/ 优先级/ 等于/ U/ 中/ 具有/ 的/ 最大/ b/ -/ level/ 等级/ 加上/ 一个/ 较大/ 的/ 常数/ ,/ 这个/ 结点/ 的/ 前驱/ 结点/ 的/ 优先级/ 设为/ 比/ 它/ 小/ 一点/ 的/ 值/ ;/ 如果/ 结点/ 没有/ 不/ 属于/ 自己/ 同一个/ 处理器/ 的/ 后继/ 结点/ ,/ 则/ 将/ 该/ 结点/ 的/ 优先级/ 设为/ 0/ ./ DFHDS/ 优先级/ 算法/ ./ 对/ 任意/ 一个/ 结点/ ,/ 如果/ 它/ 有/ 不/ 属于/ 自己/ 同一个/ 处理器/ 的/ 直接/ 后继/ 结点/ ,/ 设/ 这些/ 结点/ 集为/ U/ ,/ 则/ 令/ 该/ 结点/ 的/ 优先级/ 等于/ U/ 中/ 具有/ 的/ 最大/ b/ -/ level/ 等级/ 乘以/ 一个/ 较大/ 的/ 常数/ ,/ 这个/ 结点/ 的/ 前驱/ 结点/ 的/ 优先级/ 设为/ 比/ 它/ 小/ 一点/ 的/ 值/ ;/ 如果/ 结点/ 没有/ 不/ 属于/ 自己/ 同一个/ 处理器/ 的/ 后继/ 结点/ ,/ 则/ 将/ 该/ 结点/ 的/ 优先级/ 设为/ 0/ ./ BFDS/ 、/ DFDS/ 、/ DFHDS/ 算法/ 都/ 是/ 在/ b/ -/ level/ 算法/ 的/ 基础/ 上/ 发展/ 的/ ,/ 所以/ 这/ 4/ 种/ 算法/ 都/ 必须/ 求得/ 每个/ 结点/ 的/ b/ -/ level/ 等级/ ./ 文献/ [/ 3/ ]/ 中/ 给出/ 的/ 追尾/ 法/ 、/ 弧度/ 法/ 和/ 坐标/ 法/ 并行/ 性能/ 相近/ ,/ 为/ 叙述/ 方便/ ,/ 我们/ 仅/ 对/ 追尾/ 法/ 展开/ 说明/ ./ 使用/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS4/ 种/ 算法/ 以及/ 追尾/ 法/ 分别/ 求解/ 二维/ 中子/ 输运/ 方程/ ,/ 使用/ 2/ ~/ 64/ 个/ 处理器/ 对/ 相同/ 规模/ 的/ 问题/ 进行/ 计算/ ,/ 图/ 3/ 给出/ 的/ 是/ 分别/ 使用/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 、/ DFHDS/ 算法/ 所用/ 的/ 并行计算/ 时间/ 除以/ 使用/ 追尾/ 法/ 所用/ 的/ 并行计算/ 时间/ ./ 在/ 图/ 3/ 中/ ,/ 实线/ 在/ 虚线/ 上方/ ,/ 说明/ 对应/ 算法/ 的/ 并行性/ 能比/ 追尾/ 法差/ ;/ 实线/ 在/ 虚线/ 下方/ ,/ 说明/ 对应/ 算法/ 的/ 并行性/ 能比/ 追尾/ 法好/ ./ 图/ 3/ 中/ 4/ 条/ 实线/ 相差/ 不是/ 很大/ ,/ 说明/ 它们/ 的/ 并行/ 性能/ 差不多/ ,/ 而且/ 每种/ 算法/ 与/ 追尾/ 法/ 计算/ 时间/ 的/ 比值/ 随着/ 处理器/ 数量/ 的/ 增加/ 呈/ 增大/ 趋势/ ./ 当/ 处理器/ 数量/ 少于/ 16/ 时/ ,/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS/ 算法/ 的/ 并行计算/ 时间/ 均/ 要/ 少于/ 追尾/ 法/ ,/ 但是/ 当/ 处理器/ 数量/ 大于/ 32/ 以后/ ,/ 4/ 种/ 算法/ 的/ 并行计算/ 时间/ 都/ 比/ 追尾/ 法/ 的/ 要/ 大/ ./ 分析/ 原因/ 是/ ,/ 4/ 种/ 算法/ 优先级/ 的/ 计算/ 都/ 要求/ 出/ 每个/ 结点/ 的/ b/ -/ level/ 等级/ ,/ 每个/ 结点/ b/ -/ level/ 等级/ 的/ 求解/ 都/ 要/ 遍历/ 每条/ 源点/ 到/ 该/ 结点/ 的/ 有/ 向/ 路径/ ,/ 而/ 有向图/ 的/ 各个/ 子图/ 被/ 分配/ Page4/ 到/ 不同/ 的/ 处理器/ ,/ 算法/ 的/ 通信/ 开销/ 将/ 随着/ 处理器/ 数量/ 的/ 增加/ 变得/ 十分/ 庞大/ ./ 所以/ 在/ 处理器/ 数量/ 较/ 多/ 的/ 情况/ 下/ ,/ 使用/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS/ 算法/ 的/ 并行/ 性能/ 要/ 低于/ 追尾/ 法/ ./ 根据/ 以上/ 的/ 测试/ 分析/ ,/ 我们/ 可以/ 得出/ 如下/ 结论/ :/ (/ 1/ )/ 在/ 较/ 少/ 处理器/ 上/ 运行/ 时/ ,/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS/ 算法/ 的/ 并行/ 性能/ 要/ 优于/ 追尾/ 法/ ;/ (/ 2/ )/ 在/ 较/ 多处理器/ 上/ 运行/ 时/ ,/ 追尾/ 法/ 的/ 并行/ 性能/ 要/ 优于/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS/ 算法/ ,/ 且/ 随着/ 处理器/ 数量/ 的/ 增多/ ,/ 后/ 4/ 种/ 算法/ 的/ 并行/ 性能/ 将/ 越来越低/ ./ 所以/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS/ 算法/ 不/ 适宜/ 用来/ 进行/ 可/ 扩展/ 并行计算/ ./ iii/ )/ 对于/ x/ (/ j/ )/ 的/ 本地/ 直接/ 前驱/ 结点/ x/ (/ j/ )/ ,/ 将/ 其/ 优先级/ priority/ (/ x/ (/ j/ )/ )/ 设为/ priority/ (/ x/ (/ j/ )/ )/ -/ 1/ ;/ 如果/ x/ (/ j/ )/ 图/ 4/ 局部/ 深度/ 优先/ 并行/ 优先级/ (/ PDFDS/ )/ 算法/ 算法/ 第/ 6/ 步/ 的/ nstep/ 是/ 一个/ 迭代/ 控制/ 因子/ ./ 比如/ 当/ nstep/ 取/ 0/ 时/ ,/ 图/ 4/ 中/ 的/ 第/ 4/ 、/ 5/ 步/ 将/ 不会/ 执行/ ,/ 各/ 处理机/ 间/ 没有/ 通信/ ;/ 当/ nstep/ 取/ 1/ 时/ ,/ 截弧/ 后/ 端点/ 的/ 优先级/ 可以/ 累加/ 到/ 截弧/ 前端/ 点/ 的/ 优先级/ 上/ ;/ 当/ nstep/ 取/ 2/ 时/ ,/ 在/ 第一次/ 迭代/ 的/ 基础/ 上/ ,/ 将/ 截弧/ 后/ 端点/ 的/ 优先级/ 累加/ 到/ 截弧/ 前端/ 点/ 的/ 优先级/ 上/ ;/ 当/ nstep/ 大于/ 2/ 时/ ,/ 以此类推/ ./ nstep/ 取得/ 越大/ ,/ 算法/ 的/ 成本/ 开销/ (/ 主要/ 是/ 通信/ 开销/ )/ 就/ 越/ 大/ ,/ 当/ nstep/ 取为/ P/ -/ 1/ 时/ (/ P/ 为/ 处理机/ 台数/ )/ ,/ 图/ 4/ 的/ 第/ 4/ 步/ 和/ 第/ 5/ 步/ 将/ 迭代/ P/ -/ 1/ 次/ ,/ 相当于/ 进行/ 了/ 一次/ 全局/ 优先级/ 的/ 串行/ 计算/ ./ 所以/ P/ -/ 1/ 为/ nstep/ 的/ 上限/ ,/ 0/ 为/ nstep/ 的/ 下限/ ./ 为了/ 减少/ 算法/ 的/ 成本/ 开销/ ,/ 一般/ 依据/ 并行机/ 的/ 性能/ 选择/ nstep/ 值/ ,/ 并行机/ 通信/ 延迟/ 相对/ 越大/ ,/ 则/ nstep/ 取值/ 4/ 基于/ 局部/ 深度/ 优先/ 的/ 优先级/ (/ PDFDS/ )/ 算法/ 我们/ 将/ 结点/ 到/ 汇点/ 的/ 有/ 向/ 路径/ 中/ 最长/ 的/ 一条/ 的/ 路径/ 长度/ 称为/ 该/ 结点/ 的/ 深度/ ./ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFDHS/ 都/ 是/ 优先/ 调度/ 深度/ 大/ 的/ 结点/ ,/ 由/ 上/ 一节/ 的/ 分析/ 我们/ 知道/ ,/ 这些/ 优先级/ 算法/ 在/ 处理器/ 数量/ 很多/ 的/ 情况/ 下/ 并行/ 性能/ 较/ 低/ ./ 结合/ 深度/ 优先/ 算法/ 和/ 追尾/ 法/ 的/ 优点/ ,/ 综合/ 考虑/ 算法/ 的/ 成本/ 开销/ 和/ 并行/ 方式/ ,/ 我们/ 设计/ 了/ 一种/ 局部/ 深度/ 优先/ 的/ 并行/ 优先级/ (/ PDFDS/ )/ 算法/ ./ 该/ 算法/ 的/ 具体/ 描述/ 如图/ 4/ 所示/ ./ 越小/ ,/ 在/ 通信/ 延迟/ 很大/ 的/ 机群/ 可/ 将/ nstep/ 取为/ 0/ ./ 图/ 5/ 为/ PDFDS/ 算法/ 求解/ 过程/ 的/ 一个/ 简单/ 实例/ ,/ 其中/ MAX/ 设为/ 10/ ,/ nstep/ 取/ 1/ ./ 对于/ 图/ 5/ (/ a/ )/ 的/ 初始/ 有向图/ ,/ 延/ 虚线/ 分成/ 两个/ 子图/ 分属/ 处理器/ P0/ 和/ P1/ ;/ 图/ 5/ (/ b/ )/ 为/ 有向图/ 各/ 结点/ 的/ 局部/ b/ -/ level/ 等级/ ,/ 需要/ 注意/ 的/ 是/ ,/ 结点/ 7/ 、/ 8/ 、/ 9/ 、/ 10/ 的/ 局部/ b/ -/ level/ 等级/ 分别/ 为/ 10/ 、/ 9/ 、/ 9/ 、/ 9/ ,/ 而/ 它们/ 在/ 全局/ 有向图/ 中/ 的/ b/ -/ level/ 等级/ 分别/ 为/ 9/ 、/ 7/ 、/ 8/ 、/ 8/ ,/ 其余/ 结点/ 的/ 局部/ b/ -/ level/ 等级/ 和/ 全局/ b/ -/ level/ 等级/ 相等/ ;/ 在/ 图/ 5/ (/ c/ )/ 中/ ,/ 汇点/ 5/ 、/ 8/ 、/ 9/ 、/ 10/ 的/ 优先级/ 被/ 置/ 为/ 零/ ,/ 结点/ 8/ 、/ 9/ 、/ 10/ 的/ 本地/ 直接/ 前驱/ 结点/ 6/ 和/ 7/ 的/ 优先级/ 被/ 置/ 为/ 1/ ,/ 结点/ 5/ 的/ 本地/ 直接/ 前驱/ 结点/ 3/ 由于/ 有/ 非/ 本地/ 后继/ 结点/ 没有/ 改变/ 优先级/ ;/ 在/ 图/ 5/ (/ d/ )/ 中/ ,/ 结点/ 7/ 、/ 8/ 、/ 9/ 将/ 各自/ Page5/ 图/ 5PDFDS/ 算法/ 求解/ 过程/ 示例/ 的/ 优先级/ 发送给/ 它们/ 的/ 非/ 本地/ 直接/ 前驱/ 结点/ ,/ 使/ 结点/ 3/ 、/ 4/ 、/ 2/ 的/ 优先级/ 分别/ 等于/ MAX/ 加上/ 结点/ 7/ 、/ 8/ 、/ 9/ 的/ 优先级/ ,/ 结点/ 1/ 为/ 结点/ 2/ 的/ 本地/ 直接/ 前驱/ 结点/ ,/ 所以/ 结点/ 1/ 的/ 优先级/ 等于/ 结点/ 2/ 的/ 优先级/ 减/ 1.5/ 算法/ 分析/ PDFDS/ 算法/ 不仅/ 考虑/ 了/ 结点/ 的/ 本地/ 深度/ (/ 图/ 4/ 的/ 第/ 1/ ~/ 3/ 步/ )/ ,/ 而且/ 考虑/ 了/ 结点/ 与/ 相邻/ 处理机/ 的/ 局图/ 6/ 追尾/ 法/ 与/ PDFDS/ 优先级/ 比较/ 设/ 所有/ 结点/ 的/ 权重/ 相等/ ,/ 所有/ 弧/ 的/ 权重/ 为/ 0/ ./ 图/ 7/ 为/ 使用/ 两种/ 优先级/ 进行/ 结点/ 调度/ 的/ 计算/ 序列/ ./ 可以/ 看到/ 图/ 7/ 的/ (/ a/ )/ 中/ 两个/ 处理器/ 各有/ 一个/ 时间/ 步/ 没有/ 计算/ 任务/ ,/ 造成/ 处理器/ 空闲/ ,/ 而/ 使用/ PDFDS/ 算法/ 可以/ 避免/ 这个/ 时间/ 步/ 的/ 空闲/ (/ 见图/ 7/ 的/ (/ b/ )/ )/ ./ 由图/ 7/ 看到/ ,/ PDFDS/ 算法/ 可以/ 产生/ 比/ 追尾/ 法/ 更好/ 的/ 并行计算/ 序列/ ,/ 但是/ PDFDS/ 算法/ 的/ 成本/ 开销/ (/ 包括/ 计算/ 开销/ 和/ 通信/ 开销/ )/ 比/ 追尾/ 法要/ 大/ ./ 怎样/ 权衡/ 算法/ 成本/ 和/ 算法/ 效果/ ,/ 下面/ 对/ 算法/ 的/ 成本/ 开销/ 进部/ 深度/ (/ 图/ 4/ 的/ 第/ 4/ 、/ 5/ 步/ )/ ,/ 将/ 截弧/ 前端/ 点/ 的/ 优先级/ 按截/ 弧后/ 端点/ 优先级/ 的/ 大小/ 增加/ ,/ 可以/ 使/ 扫描/ 计算/ 时/ 尽早/ 计算/ 需要/ 通信/ 且/ 在/ 相邻/ 处理机/ 其/ 直接/ 后继/ 深度/ 大/ 的/ 结点/ ,/ 将/ 截弧/ 前端/ 点/ 的/ 计算结果/ 尽早/ 传递/ 给/ 截弧/ 后/ 端点/ ,/ 减少/ 截弧/ 后/ 端点/ 属主/ 的/ 等待时间/ ,/ 从而/ 提高/ 并行/ 效率/ ./ 法/ 和/ 追尾/ 法/ 计算/ 之后/ 的/ 优先级/ 见图/ 6/ ./ 以图/ 5/ (/ a/ )/ 为例/ 与/ 追尾/ 法/ 进行/ 比较/ ,/ PDFDS/ 算行/ 分析/ ./ 假设/ 每台/ 处理机/ 上/ 平均分配/ 了/ M/ 个/ 结点/ ,/ 将/ 空间/ 方向/ 离散/ 为/ MS/ 个/ 方向/ ,/ 对/ 某/ 一个/ 方向/ i/ (/ i/ =/ 1/ ,/ 2/ ,/ …/ ,/ MS/ )/ ,/ 需要/ 与/ 相邻/ 处理机/ 平均/ 通信/ η/ i/ 次/ ,/ 平均/ 通信/ 长度/ 为/ τ/ ./ 设/ PDFDS/ 算法/ 第/ 1/ 步/ 求解/ 本地/ 所有/ 结点/ 局部/ b/ -/ level/ 值/ 的/ 开销/ 为/ γ/ i/ 个/ 计算/ 时间/ 步/ ;/ PDFDS/ 算法/ 第/ 2/ 步/ 开销/ 为/ M/ 个/ 计算/ 时间/ 步/ ;/ 设/ PDFDS/ 算法/ 第/ 3/ 步/ 开销/ 为/ κ/ i/ 个/ 计算/ 时间/ 步/ ;/ 第/ 4/ 步至/ 第/ 5/ 步/ 的/ 通信/ 开销/ 为/ (/ α/ +/ τ/ ×/ β/ )/ ×/ η/ i/ 个/ 时间/ 步/ ,/ 其/ Page6/ 中/ α/ 为/ 消息/ 启动/ 时间/ ,/ β/ 为/ 单位/ 消息/ 在/ 网络/ 上/ 的/ 传输/ 时间/ ,/ 设/ 第/ 5/ 步/ 的/ 计算/ 开销/ 为/ λ/ i/ 个/ 时间/ 步/ ./ 则/ PDFDS/ 算法/ 在/ 每台/ 处理机/ 上/ 的/ 平均/ 成本/ 开销/ 为/ ∑/ i/ 追尾/ 法/ 的/ 成本/ 开销/ 为/ {/ γ/ i/ +/ M/ +/ κ/ i/ +/ [/ (/ α/ +/ τ/ ×/ β/ )/ ×/ η/ i/ +/ λ/ i/ ]/ ×/ nstep/ }/ 其中/ MS/ 为/ 总/ 方向/ 数/ ./ 式/ (/ 1/ )/ 中/ γ/ i/ 、/ κ/ i/ 、/ λ/ i/ 的/ 大小/ 由/ 有向图/ 结构/ 、/ 区域/ 划分/ 以及/ 负载平衡/ 等/ 因素/ 决定/ ,/ 一般/ 情况/ 均/ 远大于/ M/ ./ 所以/ 由式/ (/ 1/ )/ 与/ (/ 2/ )/ 对比/ 可以/ 看出/ ,/ PDFDS/ 算法/ 的/ 成本/ 开销/ 要/ 大于/ 追尾/ 法/ 的/ 成本/ 开销/ ,/ 在/ 多处理器/ 上/ 运行/ 时/ ,/ 其/ 通信/ 开销/ 占据/ 了/ 一定/ 的/ 比重/ ./ 在/ 程序/ 的/ 实际/ 运行/ 过程/ 中/ ,/ 影响/ 并行计算/ 性能/ 的/ 因素/ 不光/ 只有/ 各/ 处理机/ 网格/ 单元/ 的/ 计算/ 顺序/ ,/ 如果/ 优先级/ 算法/ 的/ 成本/ 开销/ 过大/ 同样/ 会/ 造成/ 并行计算/ 性能/ 的/ 下降/ ./ 所以/ ,/ 使用/ PDFDS/ 算法/ 必须/ 在/ 并行/ 扫描/ 计算/ 时/ 产生/ 比/ 它/ 的/ 成本/ 开销/ 更大/ 的/ 收益/ 才/ 有/ 实际/ 价值/ ,/ 也就是说/ 使用/ PDFDS/ 算法/ 产生/ 的/ 计算/ 序列/ 要/ 节约/ 比/ 优先级/ 算法/ 成本/ 开销/ 更/ 多/ 的/ 扫描/ 计算/ 时间/ ./ 6/ 测试/ 结果/ 及/ 分析/ 基于/ MPI/ 设计/ 实现/ 了/ PDFDS/ 算法/ ,/ 用于/ 求解/ 基于/ 非/ 结构/ 网格/ 的/ 二维/ 柱/ 坐标/ 非定常/ 多/ 群/ 粒子/ (/ 中子/ 和/ 光子/ )/ 输运/ 方程/ ./ 测试/ 平台/ 为/ 一台/ MPI/ 点点/ 延迟时间/ 为/ 5/ μ/ s/ 的/ 集群/ 系统/ ./ 测试用例/ 采用/ 中子/ 输运/ 实际/ 应用/ 问题/ ,/ S4/ 角/ 方向/ ,/ 基于/ 二维/ 非/ 结构/ 网格/ 离散/ ,/ 根据/ 测试/ 目的/ 的/ 不同/ ,/ 取/ 不同/ 的/ 空间/ 网格/ 点/ 和/ 能/ 群/ ./ 为了/ 确定/ PDFDS/ 算法/ 中/ nstep/ 在/ 特定/ 实验/ 环境/ 的/ 较佳/ 取值/ ,/ 我们/ 在/ 3/ 个/ 不同/ 问题/ 规模/ N1/ 、/ N2/ 、/ N3/ 上/ ,/ 分别/ 取/ 不同/ 的/ nstep/ 值/ 进行/ 了/ 测试/ ./ 图/ 8/ 给出/ 了/ 归一化/ 后/ 的/ 测试/ 结果/ ,/ 即/ 在/ 同一/ 问题/ 规模/ 上/ ,/ 对/ 不同/ nstep/ 取值/ 的/ 计算/ 时间/ 除以/ nstep/ 取为/ 0/ 时/ 的/ 计算/ 时间/ 得到/ 的/ 值/ Ratio/ ./ 其中/ N1/ 为/ 1024/ 个/ 网格/ 单元/ ,/ N2/ 为/ 4096/ 个/ 网格/ 单元/ ,/ N3/ 为/ 65536/ 个/ 网格/ 单元/ ./ 从图/ 8/ 可以/ 看出/ ,/ 在/ 3/ 条/ 曲线/ 上/ ,/ nstep/ 取/ 1/ 或者/ 2/ 相比/ nstep/ 取/ 其它/ 值能/ 得到/ 更好/ 的/ 并行/ 性能/ ./ nstep/ 取得/ 越大/ ,/ PDFDS/ 算法/ 中/ 的/ 通信/ 开销/ 越/ 多/ ,/ nstep/ 达到/ 一定/ 值/ 以后/ ,/ PDFDS/ 成本/ 开销/ 过大/ 导致/ 并行/ 性能/ 下降/ ./ 图/ 8/ 使用/ 的/ 是/ 64/ 个/ CPU/ 进行/ 的/ 测试/ ,/ 若/ 将/ nstep/ 取/ 最大值/ (/ 63/ )/ ,/ PDFDS/ 算法/ 就/ 相当于/ DFDS/ 算法/ ,/ 但/ 很/ 明显/ DFDS/ 算法/ 在/ 这种/ 情况/ 成本/ 开销/ 太/ 大/ ,/ 严重/ 影响/ 了/ 并行算法/ 的/ 性能/ ./ 所以/ 在/ 本文/ 实验/ 条件/ 下/ ,/ 将/ PDFDS/ 算法/ 中/ nstep/ 取/ 1/ 或者/ 2/ ./ 为了/ 比较/ PDFDS/ 算法/ 与/ 深度/ 优先/ 算法/ 以及/ 追尾/ 法/ 的/ 并行/ 性能/ ,/ 我们/ 选取/ 了/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS4/ 种/ 优先级/ 算法/ 与/ PDFDS/ 算法/ 和/ 追尾/ 法/ 进行/ 了/ 对比/ 测试/ ,/ 使用/ 4/ ~/ 128/ 个/ 处理器/ 在/ 4096/ 个/ 非/ 结构/ 网格/ 单元/ 上/ 测试/ 了/ 150/ 个/ 时间/ 步长/ ,/ 测试/ 结果/ 见图/ 9/ ./ Page7/ 从图/ 9/ 可以/ 看出/ ,/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 、/ DFHDS/ 和/ PDFDS/ 算法/ 在/ 处理器/ 数量/ 少于/ 16/ 时/ 并行/ 性能/ 与/ PDFDS/ 算法/ 差不多/ ,/ 但/ 当/ 处理器/ 数量/ 大于/ 32/ 以后/ ,/ 4/ 种/ 算法/ 的/ 并行/ 性能/ 明显/ 下降/ ,/ 比/ PDFDS/ 算法/ 和/ 追尾/ 法/ 都/ 要/ 差/ ./ 这是/ 由于/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS/ 算法/ 在/ 较/ 多处理器/ 上/ 运行/ 时/ ,/ 算法/ 的/ 成本/ 开销/ 太/ 大/ 导致/ 了/ 并行/ 性能/ 的/ 下降/ ,/ 所以/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS/ 算法/ 不/ 适合/ 用来/ 进行/ 可/ 扩展/ 并行计算/ ./ 从图/ 9/ 中/ 还/ 可以/ 看出/ ,/ 虽然/ 使用/ PDFDS/ 算法/ 在/ 4/ ~/ 128/ 个/ 处理器/ 上/ 的/ 程序运行/ 时间/ 均/ 要/ 少于/ 追尾/ 法/ ,/ 但/ 随着/ 处理器/ 台数/ 的/ 增多/ ,/ 性能/ 提高/ 的/ 比率/ 逐步/ 减少/ ,/ 两条/ 曲线/ 有/ 相交/ 的/ 趋势/ ./ 这/ 是因为/ 随着/ 处理器/ 台数/ 的/ 增加/ ,/ 分配/ 到/ 每台/ 处理器/ 上/ 的/ 网格/ 点/ 逐步/ 减少/ ,/ 上下游/ 关系/ 较/ 简单/ ,/ 调度/ 算法/ 的/ 队列/ 组合/ 的/ 种类/ 减少/ ,/ 性能/ 趋于/ 一致/ ./ 为了/ 更/ 准确/ 说明/ PDFDS/ 算法/ 在/ 大规模/ 调度/ 问题/ 上/ 的/ 优势/ ,/ 突出/ 扫描/ 调度/ 算法/ 的/ 计算/ 效果/ ,/ 我们/ 将/ 群数/ 降为/ 1/ ,/ 处理器/ 台数/ 取为/ 256/ ,/ 对/ 追尾/ 法/ 、/ 弧度/ 法/ 、/ 坐标/ 法/ 和/ PDFDS/ 算法/ 进行/ 了/ 对比/ 测试/ ,/ 图/ 10/ 给出/ 了/ 测试/ 结果/ ./ 从图/ 10/ 可以/ 看出/ ,/ 当/ 单个/ 处理机/ 上/ 的/ 网格/ 点数/ 较/ 少时/ ,/ PDFDS/ 算法/ 的/ 并行计算/ 时间/ 略/ 长于/ 追尾/ 法/ 、/ 弧度/ 法/ 和/ 坐标/ 法/ ,/ 随着/ 网格/ 点数/ 的/ 增加/ ,/ PDFDS/ 算法/ 的/ 并行计算/ 时间/ 比/ 追尾/ 法/ 、/ 弧度/ 法/ 和/ 坐标/ 法/ 显著/ 减少/ ,/ 网格/ 点越/ 多/ ,/ 性能/ 提高/ 越/ 明显/ ,/ 说明/ PDFDS/ 算法/ 更/ 适合/ 求解/ 大规模/ 计算/ 问题/ ./ 为/ 进一步/ 测试/ PDFDS/ 算法/ 对/ 求解/ 实际/ 应用/ 问题/ 的/ 可扩展性/ ,/ 我们/ 把/ PDFDS/ 算法/ 移植/ 到/ 我们/ 提出/ 的/ 一种/ 改进/ 的/ 求解/ 输运/ 方程/ 的/ 并行/ Sn/ 扫描/ 算法/ [/ 12/ ]/ 程序/ 框架/ 中/ ,/ 将/ 计算/ 问题/ 的/ 群数/ 取为/ 24/ 群/ ,/ 网格/ 单元/ 取为/ 65536/ 个/ ,/ S4/ 角/ 方向/ ,/ 表/ 1/ 给出/ 测试/ 结果/ ./ 测试/ 结果显示/ ,/ 并行算法/ 具有/ 良好/ 的/ 并行/ 加速/ 效果/ ,/ 扩展/ 到/ 1024/ 个/ 处理器/ 时/ ,/ 相对/ 64/ 个/ 处理器/ 的/ 并行/ 效率/ 达到/ 96/ %/ ,/ 说明/ PDFDS/ 算法/ 具有/ 很/ 好/ 的/ 适应性/ ./ CPU/ 台数/ 运行/ 时间/ // s/ 相对/ 加速/ 比/ 相对/ 并行/ 效率/ 6415121.00128753/ ./ 12.01256342/ ./ 84.41512172/ ./ 58.76102498/ ./ 4715.357/ 结论/ 通过/ 前面/ 的/ 分析/ 和/ 测试/ 我们/ 知道/ ,/ 包括/ b/ -/ level/ 、/ BFDS/ 、/ DFDS/ 和/ DFHDS/ 算法/ 在内/ 的/ 深度/ 优先/ 策略/ 不/ 适合/ 进行/ 可/ 扩展/ 并行计算/ ./ 而/ 我们/ 设计/ 的/ 局部/ 深度/ 优先/ 的/ 优先级/ (/ PDFDS/ )/ 算法/ 具有/ 局部性/ 、/ 通信量/ 小/ 、/ 优先级/ 队列/ 好/ 等/ 特点/ ./ 通过/ 性能/ 分析/ 与/ 测试/ ,/ 可以/ 看出/ 基于/ 非/ 结构/ 网格/ 区域/ 分解/ ,/ PDFDS/ 算法/ 使用/ 结点/ 的/ 局部/ 深度/ 作为/ 结点/ 调度/ 的/ 优先级/ ,/ 与/ 现有/ 的/ 优先级/ 算法/ 比较/ ,/ 可以/ 获得/ 更加/ 合理/ 的/ 并行计算/ 序列/ ,/ 具有/ 更好/ 的/ 并行计算/ 效果/ ,/ 对于/ 大规模/ 计算/ 问题/ ,/ 可以/ 扩展/ 到/ 1024/ 个/ 处理器/ ,/ 相对/ 于/ 64/ 个/ 处理器/ 的/ 并行/ 效率/ 达到/ 了/ 96/ %/ ./ 此外/ ,/ 本文/ 给出/ 的/ PDFDS/ 算法/ 可以/ 用于/ 非/ 结构/ 网格/ 高维/ 输运/ 问题/ 的/ 并行计算/ ,/ 并且/ 需要/ 进一步/ 验证/ 对/ 不同/ 非/ 结构/ 网格/ 划分/ 问题/ 的/ 有效性/ ./ 致谢/ 本文/ 工作/ 得到/ 北京/ 应用/ 物理/ 与/ 计算/ 数学/ 研究所/ 莫则/ 尧/ 研究员/ 的/ 大力支持/ 和/ 帮助/ ,/ 在/ 此/ 表示感谢/ ;/ 感谢/ 阳述/ 林/ 研究员/ 、/ 魏军霞/ 等/ 同志/ 与/ 作者/ 的/ 有益/ 讨论/ 和/ 宝贵意见/ !/ 

