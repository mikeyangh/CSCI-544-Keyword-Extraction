Page1/ 跨/ 数据中心/ 的/ 动态/ 资源/ 联合/ 预留/ 研究/ 伍之昂/ 1/ )/ ,/ 2/ )/ 罗军舟/ 1/ )/ 宋爱波/ 1/ )/ 东方/ 1/ )/ 1/ )/ (/ 东南大学/ 计算机科学/ 与/ 工程学院/ 南京/ 210096/ )/ 2/ )/ (/ 南京/ 财经大学/ 江苏省/ 电子商务/ 重点/ 实验室/ 南京/ 210003/ )/ 摘要/ 如何/ 有效/ 保障/ 服务质量/ (/ QualityofService/ ,/ QoS/ )/ 是/ 网格/ 计算/ 和/ 云/ 计算/ 等/ 网络/ 计算/ 平台/ 面临/ 的/ 核心/ 问题/ 之一/ ,/ 资源/ 可/ 获得性/ 和/ 性能/ 的/ 动态变化/ 使得/ 将/ 多媒体/ 网络/ 的/ 资源/ 提前/ 预留/ 机制/ 直接/ 应用/ 到/ 网络/ 计算/ 平台/ 面临/ 巨大/ 挑战/ ./ 为此/ 提出/ 了/ 一种/ 跨/ 数据中心/ 的/ 资源/ 联合/ 预留/ 体系/ 架构/ ,/ 引入/ 虚拟/ 资源/ 容器/ 以/ 适应/ 资源/ 的/ 动态性/ ,/ 提出/ 了/ 资源/ 预留/ 协商/ 算法/ 以/ 增加/ 预留/ 请求/ 与/ 资源/ 的/ 匹配/ 率/ ./ 在/ 东南大学/ 校园/ 云/ 计算/ 平台/ 的/ 实验/ 结果表明/ ,/ 在/ 资源/ 动态变化/ 的/ 网络/ 计算环境/ 中/ ,/ 所/ 提出/ 的/ 体系/ 架构/ 能/ 显著/ 提高/ 预留/ 请求/ 的/ 成功率/ ,/ 且/ 具有/ 更强/ 的/ 稳定性/ ./ 关键词/ 网络/ 计算/ ;/ 数据中心/ ;/ 资源/ 提前/ 预留/ ;/ 虚拟/ 资源/ 容器/ 1/ 引言/ 从/ 较/ 早/ 的/ 对/ 等/ 计算/ 、/ 网格/ 计算/ [/ 1/ ]/ ,/ 到/ 近年来/ 炙手可热/ 的/ 云/ 计算/ [/ 2/ ]/ 无不/ 希望/ 通过/ Web/ 服务/ 的/ 方式/ 向/ 用户/ 提供/ 计算/ 和/ 存储资源/ ./ Web/ 服务/ 作为/ 目前/ 最/ 流行/ 的/ 分布式计算/ 方式/ 之一/ ,/ 提供/ 了/ 一种/ 与/ 操作系统/ 无关/ 、/ 与/ 程序设计/ 语言/ 无关/ 、/ 与/ 机器/ 类型/ 无关/ 、/ 与/ 运行/ 环境/ 无关/ 的/ 开放平台/ ,/ 实现/ 网络资源/ 的/ 协作/ 与/ 共享/ [/ 3/ ]/ ./ 网络/ 计算/ 平台/ 集成/ 的/ 资源/ 多以/ Web/ 服务/ 的/ 形式/ 向/ 用户/ 提供/ ,/ 许多/ 科学计算/ 任务/ 往往/ 需要/ 大量/ 的/ 计算资源/ 和/ 存储资源/ 协同工作/ 来/ 完成/ [/ 4/ ]/ ,/ 有效/ 地/ 控制/ 和/ 保障/ 这/ 类/ 科学计算/ 任务/ 的/ 服务质量/ (/ QualityofService/ ,/ QoS/ )/ 成为/ 网络/ 计算/ 中/ 面临/ 的/ 重要/ 议题/ 之一/ ./ 资源/ 提前/ 预留/ 基于/ 商定/ 的/ QoS/ 需求/ 为/ 用户/ 分配资源/ ,/ 它/ 源于/ 多媒体/ 网络/ 中/ 的/ Intserv/ 体系/ 架构/ 的/ 资源/ 预留/ 协议/ RSVP/ (/ ResourceReservationProtocol/ )/ ./ 由于/ 网络/ 计算环境/ 下/ 资源/ 的/ 可/ 获得性/ 和/ 性能/ 动态变化/ ,/ 未来/ 预留/ 时间段/ 内/ 资源/ 的/ 可/ 获得性/ 和/ 性能/ 难以/ 得到/ 保证/ ,/ 因此/ ,/ 将/ 资源/ 提前/ 预留/ 作为/ 一种/ QoS/ 的/ 保障机制/ 引入/ 到/ 网络/ 计算环境/ 下/ 面临/ 着/ 挑战/ ./ GGF/ (/ GlobalGridForum/ )/ 将/ 资源/ 提前/ 预留/ 定义/ 为/ :/ 用户/ 与/ 资源/ 所有者/ 经过/ 协商/ ,/ 在/ 指定/ 时间段/ 内/ 获得/ 的/ 对/ 资源/ 的/ 限制性/ 访问/ 权限/ ①/ ./ 实际上/ ,/ 提前/ 预留/ 可以/ 看作/ 是/ 网络/ 计算/ 平台/ 的/ 一种/ 承诺/ ,/ 在/ 指定/ 时间段/ 内/ 可以/ 获得/ 特定/ 水平/ 的/ 服务/ ./ Foster/ 等/ 人/ [/ 5/ ]/ 早期/ 设计/ 了/ 针对/ 资源/ 预留/ 和/ 分配/ 的/ 通用/ 体系/ 架构/ ,/ 它/ 通过/ 定义/ 各种/ QoS/ 控制/ 的/ API/ ,/ 简化/ 了/ 端/ 到/ 端/ QoS/ 管理策略/ 的/ 设计/ 和/ 开发/ ,/ 但是/ ,/ GARA/ 由以/ 计算/ 为/ 中心/ 的/ 计算/ 网格/ 提出/ ,/ 并/ 不能/ 完全/ 套/ 用于/ 服务/ 网格/ 环境/ 中/ ./ 文献/ [/ 6/ ]/ 提出/ 了/ 基于/ GlobusToolkit4/ 开发/ 的/ 服务/ 网格/ 下/ 的/ 提前/ 预留/ 和/ 资源/ 联合/ 分配/ 系统/ 架构/ ,/ 它/ 对/ 预留/ 实体/ 的/ 属性/ 做/ 了/ 详细/ 的/ 描述/ ,/ 将/ 预留/ 请求/ 分为/ 复合/ 预留/ 请求/ 和/ 简单/ 预留/ 请求/ ,/ 通过/ 联合/ 资源分配/ 管理器/ 将/ 复合/ 预留/ 请求/ 分解/ 为/ 多个/ 简单/ 预留/ 请求/ ,/ 并/ 将/ 其/ 分配/ 到/ 各个/ 本地/ 资源管理/ 器/ 进行/ 分别/ 处理/ ./ 但是/ ,/ 大型/ 网络/ 计算/ 平台/ 大多/ 由/ 多个/ 数据中心/ 协同工作/ ,/ 因此/ ,/ 资源/ 预留/ 体系/ 架构/ 需要/ 支持/ 跨/ 数据中心/ 资源/ 协作/ 和/ 共享/ ./ SNAP/ (/ ServiceNegotiationandAcquisitionProtocol/ )/ 协议/ SLAs/ (/ ServiceLevelAgreements/ )/ 的/ 生命周期/ 管理/ 、/ 资源/ 预留/ 协商/ 以及/ 资源/ 和/ 服务/ 发现/ 等/ 方面/ 的/ 实现/ 方案/ [/ 7/ ]/ ,/ SNAP/ 定义/ 了/ 3/ 类/ SLA/ :/ TSLA/ (/ TaskSLA/ )/ 、/ RSLA/ (/ ResourceSLA/ )/ 和/ BSLA/ (/ BindingSLA/ )/ ./ TSLA/ 将/ 任务/ 用/ 一组/ 子/ 服务/ 的/ 工作/ 流/ 来/ 描述/ ,/ 并/ 定义/ 了/ 任务/ 的/ QoS/ 需求/ 参数/ ;/ RSLA/ 用来/ 描述/ 资源/ 的/ 服务/ 能力/ ,/ 将/ 资源/ 抽象/ 为/ 一组/ QoS/ 参数/ 的/ 集合/ ;/ BSLA/ 将/ TSLA/ 和/ RSLA/ 相关联/ ,/ 描述/ 了/ 任务/ 与/ 特定/ 资源/ 的/ 绑定/ ./ 网络/ 计算环境/ 下/ 资源/ 的/ 动态性/ 表现/ 在/ 两个/ 方面/ :/ (/ 1/ )/ 资源/ 可能/ 在/ 未来/ 时间段/ 内/ 产生/ 不可/ 预测/ 的/ 失效/ ,/ 以致/ 资源/ 的/ 可/ 获得性/ 表现/ 出/ 动态性/ ;/ (/ 2/ )/ 由于/ 资源/ 的/ 本地/ 负载/ 动态/ 波动/ 、/ 网络/ 传输/ 存在/ 延迟/ ,/ 以致/ 资源/ 的/ 服务/ 性能/ 表现/ 出/ 动态性/ ./ SNAP/ 采用/ 的/ 直接/ 将/ TSLA/ 和/ RSLA/ 静态/ 的/ 绑定/ 方式/ 使/ 预留/ 请求/ 在/ 提交/ 时/ 就/ 与/ 具体/ 的/ 物理/ 资源/ 关联/ ,/ 资源/ 的/ 动态性/ 导致/ 与/ 预留/ 请求/ 相/ 绑定/ 的/ 资源/ 在/ 预留/ 请求/ 开始/ 执行/ 时/ 的/ 可/ 获得性/ 和/ 服务/ 性能/ 都/ 无法/ 得到/ 保障/ ,/ 系统/ 就/ 可能/ 拒绝/ 该/ 预留/ 请求/ ,/ 从而/ 极大/ 地/ 增大/ 了/ 拒绝/ 率/ ./ 作为/ 补救/ 方案/ 的/ 重/ 协商/ 机制/ 则/ 容易/ 产生/ 不必要/ 的/ 系统/ 开销/ ./ 以往/ 的/ 研究/ 提出/ 了/ 多种/ 资源/ 预留/ 的/ 协商/ 策略/ :/ 如/ 文献/ [/ 8/ ]/ 提出/ 的/ 资源/ 备份/ 选择/ 策略/ 解决/ 了/ 在/ 资源/ 可/ 获得性/ 无法/ 保障/ 的/ 情况/ 下/ ,/ 如何/ 通过/ 选用/ 备份/ 资源/ 来/ 保证/ QoS/ 的/ 问题/ ;/ 文献/ [/ 9/ ]/ 提出/ 的/ QoS/ 和/ 冲突/ 感知/ 的/ 多/ 资源/ 预留/ 策略/ 旨在/ 减轻/ 端到/ 端的/ 资源/ 冲突/ ,/ 提高/ 资源/ 预留/ 整体/ 的/ 成功率/ ./ 近年来/ ,/ 云/ 计算技术/ 受到/ 越来越/ 多/ 的/ 关注/ ,/ 基于/ 资源/ 预留/ 为/ 应用/ 动态/ 提供/ 资源/ 以/ 保证/ QoS/ 仍然/ 是/ 云/ 计算/ 研究/ 中/ 的/ 一个/ 热点问题/ ,/ 比如/ ,/ 文献/ [/ 10/ ]/ 提出/ 一种/ 云/ 计算环境/ 下/ 资源/ 动态/ 提供/ 策略/ ;/ 文献/ [/ 11/ ]/ 研究/ 了/ 云/ 工作/ 流型/ 应用/ 在/ 网络/ 环境/ 下/ 的/ 资源/ 预留/ 问题/ ./ 尽管如此/ ,/ 这些/ 策略/ 缺乏/ 对/ 预留/ 请求/ 的/ QoS/ 需求/ 参数/ 系统/ 的/ 表述/ 和/ 分类/ ,/ 并且/ 如果/ 整个/ 预留/ 请求/ 中/ 只要/ 有/ 一个/ QoS/ 需求/ 无法/ 得到/ 满足/ ,/ 整个/ 预留/ 请求/ 就/ 会/ 被/ 拒绝/ ,/ 于是/ 一些/ 非/ 功能性/ 的/ QoS/ 参数/ 也/ 会/ 决定/ 预留/ 请求/ 的/ 成功/ 与否/ ,/ 这/ 将/ 导致/ 误/ 拒率/ 的/ 上升/ ./ Al/ -/ Ali/ 等/ 学者/ 从/ 两个/ 角度/ 将/ 网络/ 计算/ 服务/ 的/ QoS/ 参数/ 分为/ 5/ 类/ [/ 12/ ]/ ,/ 从/ 服务/ 性能/ 来看/ ,/ QoS/ 参数/ 可/ 分为/ accountingQoS/ 、/ serviceQoS/ 和/ servicesecurity/ ;/ 从/ 保证/ 机制/ 来看/ ,/ QoS/ 参数/ 可/ 分为/ serviceQoS/ 和/ provisionalQoS/ ,/ 分别/ 对应/ 于/ 硬/ QoS/ 和/ 软/ QoS/ ./ 硬/ QoS/ 参数/ 是/ 服务/ 的/ 必备/ 属性/ ,/ 其/ 取值/ 不能/ 改变/ ;/ 软/ QoS/ 参数/ 是/ 服务/ 的/ 辅助/ 属性/ ,/ 其/ 取值/ 可以/ 在/ 一定/ 的/ 范围/ 内/ 变化/ ./ 针对/ 这些/ 问题/ ,/ 本文/ 提出/ 了/ 跨/ 数据中心/ 的/ 资源/ ①/ http/ :/ // // www/ ./ fz/ -/ juelich/ ./ de/ // zam/ // RD/ // coop/ // ggf/ // graap/ // graap/ -/ Page3/ 联合/ 预留/ 体系/ 架构/ ,/ 该/ 架构/ 利用/ 虚拟/ 资源/ 容器/ 将/ 同类/ 资源/ 虚拟化/ ,/ 适应/ 网络资源/ 的/ 动态变化/ ,/ 并/ 对/ QoS/ 偏差/ 距离/ 的/ 计算方法/ 做/ 了/ 改进/ ,/ 资源/ 预留/ 协商/ 采用/ 了/ 基于/ QoS/ 偏差/ 距离/ 的/ 算法/ 减少/ 预留/ 请求/ 的/ 误/ 拒率/ ./ 最后/ ,/ 我们/ 将/ 所/ 提出/ 的/ 联合/ 预留/ 体系/ 架构/ 部署/ 到/ 东南大学/ 校园/ 云/ 计算/ 平台/ 中/ ,/ 实验/ 结果表明/ ,/ 该/ 架构/ 在/ 资源/ 可/ 获得性/ 和/ 服务/ 性能/ 都/ 动态变化/ 的/ 情况/ 下/ ,/ 可/ 显著/ 地/ 提高/ 预留/ 请求/ 的/ 成功率/ ,/ 且/ 具有/ 更强/ 的/ 稳定性/ ./ 2/ 资源/ 提前/ 预留/ 的/ 生命周期/ 一次/ 成功/ 的/ 提前/ 预留/ 应该/ 包括/ 以下/ 属性/ :/ 时间/ 帧/ 、/ 预留/ 类型/ 、/ QoS/ 需求/ 参数/ 、/ 预留/ 标识/ 、/ 资源/ 标识/ ./ 时间/ 帧/ 定义/ 了/ 本次/ 预留/ 的/ 开始/ 时间/ 和/ 结束/ 时间/ ;/ 预留/ 类型/ 规定/ 了/ 预留/ 请求/ 是/ 简单/ 预留/ 请求/ 还是/ 联合/ 预留/ 请求/ ,/ 简单/ 预留/ 请求/ 只/ 需/ 一个/ 数据中心/ 的/ 资源/ 即可/ 完成/ ,/ 联合/ 预留/ 请求/ 则/ 需/ 多个/ 数据中心/ 的/ 资源/ 协同/ 完成/ ./ QoS/ 需求/ 参数/ 描述/ 了/ 用户/ 希望/ 达到/ 的/ 服务水平/ ./ 一旦/ 预留/ 请求/ 成功/ ,/ 系统/ 分配/ 给/ 本次/ 预留/ 以/ 全局/ 唯一/ 的/ 预留/ 标识/ ./ 资源/ 标识/ 描述/ 了/ 预留/ 执行/ 时所/ 绑定/ 的/ 资源/ ./ 在/ 提前/ 预留/ 的/ 整个/ 生命周期/ 内/ ,/ 一般/ 存在/ 如下/ 9/ 个/ 状态/ ①/ :/ 请求/ 预留/ 协商/ 、/ 拒绝/ 、/ 预定/ 、/ 预定/ 重/ 协商/ 、/ 撤消/ 、/ 活跃/ 、/ 终止/ 、/ 完成/ 、/ 活跃/ 重/ 协商/ ./ 图/ 1/ 描述/ 了/ 提前/ 预留/ 的/ 状态/ 转换/ 过程/ ./ 首先/ ,/ 用户/ 发出/ 资源/ 预留/ 请求/ ,/ 与/ 系统/ 进行/ 预留/ 协商/ ./ 如果/ 协商/ 成功/ ,/ 预留/ 请求/ 转为/ 预定/ 状态/ ,/ 否则/ 转为/ 拒绝/ 状态/ ./ 处于/ 预定/ 状态/ 的/ 预留/ 请求/ 一旦/ 等待/ 至/ 预留/ 开始/ 时间/ ,/ 则/ 系统/ 将/ 其/ 与/ 资源/ 进行/ 绑定/ ,/ 预留/ 转为/ 活跃/ 状态/ ./ 如果/ 在/ 预留/ 开始/ 之前/ ,/ 用户/ 需要/ 改变/ 预留/ 请求/ QoS/ 参数/ ,/ 则/ 预留/ 转入/ 预定/ 重/ 协商/ 状态/ ./ 如果/ 重/ 协商/ 成功/ ,/ 则/ 回到/ 预定/ 状态/ ./ 当然/ ,/ 在/ 预留/ 开始/ 时间/ 前/ ,/ 用户/ 或/ 系统/ 也/ 可以/ 取消/ 已经/ 预定/ 的/ 预留/ 请求/ ,/ 预留/ 转为/ 撤销/ 状态/ ./ 用户/ 或/ 系统/ 若/ 在/ 预留/ 结束/ 时间/ 前/ 终止/ 处于/ 活跃/ 状态/ 的/ 预留/ ,/ 则/ 进入/ 终止/ 状态/ 预留/ 如果/ 占用/ 资源/ 至/ 完成/ 时间/ 则/ 进入/ 完成/ 状态/ ./ 与/ 预定/ 重/ 协商/ 状态/ 类似/ ,/ 用户/ 或/ 系统/ 在/ 活跃/ 重/ 协商/ 状态/ 可以/ 动态/ 改变/ 处于/ 活跃/ 状态/ 预留/ 的/ QoS/ 参数/ ./ 3/ 跨/ 数据中心/ 的/ 资源/ 动态/ 联合/ 预留/ 体系/ 架构/ 大型/ 网络/ 计算/ 平台/ 通常/ 包含/ 多个/ 数据中心/ ,/ 每个/ 数据中心/ 有/ 其/ 特定/ 的/ 资源/ 及/ 资源共享/ 策略/ ./ 对于/ 复杂/ 的/ 资源/ 预留/ 请求/ ,/ 单个/ 数据中心/ 的/ 资源/ 往往/ 不能/ 满足/ 其/ 需求/ ,/ 这/ 就/ 需要/ 分布/ 在/ 多个/ 数据中心/ 内/ 的/ 资源/ 相互协作/ 完成/ ./ 本文/ 分别/ 提出/ 跨/ 数据中心/ 的/ 联合/ 资源/ 预留/ 的/ 整体/ 架构/ 和/ 单个/ 数据中心/ 的/ 提前/ 预留/ 架构/ ,/ 联合/ 资源/ 预留/ 整体/ 架构/ 为/ 数据中心/ 提前/ 预留/ 架构/ 的/ 接入/ 提供/ 了/ 接口/ ./ 图/ 2/ 描述/ 了/ 联合/ 资源/ 预留/ 的/ 总体/ 架构/ ,/ 用户/ 代理/ 提交/ 联合/ 预留/ 请求/ 到/ 联合/ 预留/ 接口/ ,/ 联合/ 预留/ 接口/ 与/ 全局/ 信息中心/ 进行/ 交互/ ,/ 确定/ 所/ 需/ 资源/ 的/ 种类/ 及其/ 所在/ 的/ 数据中心/ ,/ 将/ 联合/ 资源/ 预留/ 请求/ 分解/ 多个/ 为/ 简单/ 预留/ 请求/ ,/ 然后/ 分配/ 给/ 多个/ 数据中心/ ./ 分配/ 到/ 各个/ 数据中心/ 的/ 简单/ 预留/ 请求/ 由/ 如图/ 3/ 所示/ 的/ 单个/ 数据中心/ 内/ 提前/ 预留/ 系统/ 架构/ 进行/ 处理/ ,/ 各个/ 简单/ 预留/ 完成/ 后/ ,/ 联合/ 预留/ 接口/ 负责/ 组合/ 各个/ 数据中心/ 的/ 执行/ 结果/ ,/ 反馈/ 给/ 用户/ 代理/ ./ 根据/ 请求/ 资源/ 种类/ 、/ 信息中心/ 进行/ 资源/ 发现/ 和/ 复杂/ 预留/ 请求/ 分解/ 不/ 属于/ 本文/ 的/ 研究/ 焦点/ ,/ 本文/ 聚焦/ 在/ 单个/ 数据中心/ 内/ 提前/ 预留/ 系统/ 架构/ 如何/ 屏蔽/ 资源/ 的/ 动态性/ 及/ 如何/ 为/ 简单/ 预留/ 请求/ 选择/ 合适/ 的/ 逻辑/ 资源/ ./ 图/ 3/ 描述/ 了/ 单个/ 数据中心/ 内/ 提前/ 预留/ 系统/ 架构/ ,/ 该/ 系统/ 架构/ 引入/ 了/ 虚拟/ 资源/ 容器/ (/ VirtualResourceContainer/ ,/ VRC/ )/ ,/ 它/ 聚合/ 同一个/ 数据中心/ 中/ 相同/ 种类/ 的/ 逻辑/ 资源/ ,/ 形成/ 功能性/ 的/ 虚拟/ 资源/ ./ 当/ Page4/ 图/ 3/ 单个/ 数据中心/ 的/ 提前/ 预留/ 体系/ 架构/ 接收/ 到/ 联合/ 预留/ 架构/ 中/ 的/ 简单/ 资源/ 预留/ 请求/ 时/ ,/ 由/ 虚拟/ 资源/ 容器/ 的/ 提前/ 预留/ 协商/ 接口/ 根据/ 可用/ 虚拟/ 资源/ 列表/ 与/ 用户/ 代理/ 进行/ 提前/ 预留/ 协商/ ,/ 由图/ 1/ 状态图/ 可知/ ,/ 若/ 协商/ 成功/ ,/ 则/ 进入/ 预定/ 状态/ ,/ 完成/ 协定/ 设置/ 后/ ,/ 构建/ 提前/ 预留/ 队列/ ./ VRC/ 还/ 需/ 负责/ 维护/ 提前/ 预留/ 队列/ ,/ 调度/ 和/ 重/ 协商/ 预留/ 请求/ 等/ 功能/ ./ 请求/ 的/ 预留/ 开始/ 时间/ 到达/ 时/ ,/ 虚拟/ 资源/ 容器/ 通过/ 逻辑/ 资源/ 选择/ 管理器/ 选择/ 当前/ 最合适/ 的/ 逻辑/ 资源/ 与/ 预留/ 请求/ 进行/ 绑定/ ,/ 提前/ 预留/ 过程/ 进入/ 活跃/ 状态/ ./ 数据中心/ 中/ 也/ 存在/ 物理/ 资源/ 的/ 动态/ 加入/ 和/ 退出/ ,/ 比如/ 服务器/ 的/ 启动/ 与/ 关闭/ ./ 而且/ ,/ 资源/ 的/ 存储/ 和/ 计算/ 性能/ 亦/ 随/ 负载/ 变化/ 而/ 体现/ 出时/ 变性/ ./ 数据中心/ 内/ 的/ 物理/ 资源/ 通过/ 网络/ 计算/ 平台/ 资源/ 设备/ 层/ 的/ 封装/ ,/ 形成/ 对应/ 的/ 逻辑/ 资源/ ,/ 用于/ 描述/ 物理/ 资源/ 在/ 网络/ 计算环境/ 中/ 的/ 服务/ 功能/ 和/ 能力/ ./ 物理/ 资源/ 本地/ 负载/ 的/ 变化/ 和/ 允许/ 动态/ 加入/ 和/ 退出/ 的/ 策略/ 使得/ 相对/ 应/ 的/ 逻辑/ 资源/ 的/ 服务/ 能力/ 在/ 网络/ 环境/ 下/ 具有/ 动态/ 波动性/ ./ SNAP/ 中/ 的/ 提前/ 预留/ 策略/ 通过/ 协商/ 过程/ 直接/ 将/ 任务/ 与/ 逻辑/ 资源/ 在/ 未来/ 的/ 一段时间/ 内/ 绑定/ ,/ 当/ 发现/ 预留/ 资源/ 在/ 预定/ 时间段/ 内/ 不能/ 满足/ 任务/ 的/ 资源/ 需求/ 时/ ,/ 系统/ 需要/ 进行/ 重/ 协商/ 或/ 取消/ 该/ 预留/ 请求/ ./ 逻辑/ 的/ 动态/ 波动性/ 将/ 导致系统/ 重/ 协商/ 次数/ 的/ 增多/ ,/ 易/ 增大/ 系统/ 不必要/ 的/ 开销/ ,/ 并/ 大幅度降低/ 预留/ 的/ 成功率/ ./ 虚拟/ 资源/ 容器/ 聚合/ 不同/ 功能/ 的/ 底层/ 逻辑/ 资源/ ,/ 当/ 预留/ 请求/ 的/ 开始/ 时间/ 到达/ 时/ ,/ 虚拟/ 资源/ 容器/ 选择/ 合适/ 的/ 逻辑/ 资源/ 实现/ 动态/ 绑定/ ,/ 第/ 5/ 节/ 详细/ 讨论/ 了/ 逻辑/ 资源/ 选择/ 算法/ ./ 在/ 如图/ 3/ 所示/ 的/ 系统/ 架构/ 中/ ,/ 虚拟/ 资源/ 容器/ 起/ 着/ 最/ 关键/ 的/ 作用/ ,/ 虚拟/ 资源/ 容器/ 的/ 性能/ 直接/ 决定/ 着/ 数据中心/ 跨/ 虚拟/ 组织/ 联合/ 预留/ 体系/ 架构/ 的/ 总体/ 性能/ ./ 文献/ [/ 13/ ]/ 利用/ 排队/ 论/ 证明/ 了/ 包含/ 多台/ 独立/ 计算机/ 的/ 计算资源/ 池/ 能够/ 在/ 保持/ 相同/ 服务质量/ (/ 任务/ 的/ 平均/ 等待时间/ 不变/ )/ 的/ 前提/ 下/ 提高/ 服务/ 能力/ (/ 每台/ 计算机/ 接受任务/ 的/ 速率/ 增大/ )/ ./ 文献/ [/ 13/ ]/ 的/ 证明/ 方法/ 同样/ 可以/ 用于/ 论证/ 虚拟/ 资源/ 容器/ 能/ 在/ 保证/ 服务质量/ 的/ 同时/ 提高/ 服务/ 能力/ ,/ 其/ 证明/ 过程/ 如下/ ./ 对于/ 某/ 一类/ 资源/ 的/ 虚拟/ 资源/ 容器/ ,/ 假设/ 预留/ 请求/ 的/ 到达/ 过程/ 遵循/ 泊松/ 过程/ ,/ 不同/ 资源/ 的/ 服务/ 时间/ 假定/ 为/ 相互/ 独立/ 的/ 指数分布/ 随机变量/ ,/ 一个/ 资源/ 虚拟/ 容器/ 就/ 可以/ 看作/ 是/ 一个/ M/ // M/ // c/ 排队/ 系统/ ./ M/ // M/ // c/ 排队/ 系统/ 的/ 平均/ 等待时间/ Wqc/ 可以/ 通过/ 式/ (/ 1/ )/ 得出/ :/ 其中/ ,/ a/ 为/ 负载/ 比率/ ,/ C/ (/ c/ ,/ a/ )/ 为/ 虚拟/ 容器/ 中/ 所有/ 资源/ 都/ 不/ 空闲/ 的/ 概率/ ./ 如式/ (/ 2/ )/ 和/ (/ 3/ )/ 所示/ :/ Page5C/ (/ c/ ,/ a/ )/ =/ 由式/ (/ 3/ )/ 易知/ ,/ 给定/ c/ ,/ 排队/ 时间/ Wqc/ 随/ λ/ 1/ 的/ 增大/ 而/ 增大/ ./ 而/ 给定/ λ/ 1/ ,/ 排队/ 时间/ Wqc/ 会/ 随/ c/ 的/ 增大/ 而/ 减小/ ,/ 即/ 在/ 资源/ 服务/ 时间/ 指数分布/ 不变/ 的/ 情况/ 下/ (/ 即/ μ/ 1/ 保持/ 不变/ )/ ,/ 若要/ 不/ 增加/ 请求/ 的/ 排队/ 时间/ ,/ 资源/ 数量/ c/ 需随/ 请求/ 到达/ 速率/ λ/ 1/ 的/ 增加/ 而/ 增加/ ./ 文献/ [/ 14/ ]/ 利用/ 排队/ 论/ 进一步/ 解释/ 了/ Wqc/ 和/ c/ 之间/ 的/ 关系/ ,/ 说明/ 虚拟/ 资源/ 容器/ 只/ 需/ 聚合/ 适中/ 数量/ 的/ 资源/ 就/ 足以/ 使/ 平均/ 等待时间/ 维持/ 在/ 用户/ 可以/ 忍受/ 的/ 范围/ 之内/ ,/ 从而/ 不/ 造成/ 资源/ 的/ 浪费/ ./ 因此/ ,/ 虚拟/ 资源/ 容器/ 的/ 引入/ 可以/ 在/ 不/ 影响/ 整个/ 跨/ 数据中心/ 联合/ 预留/ 体系/ 架构/ 的/ 性能/ 的/ 前提/ 下/ ,/ 减少/ 资源/ 性能/ 动态/ 波动/ 所/ 导致/ 的/ 预留/ 失败率/ ,/ 虚拟/ 资源/ 容器/ 的/ 引入/ 不会/ 成为/ 整个/ 系统/ 的/ 性能/ 瓶颈/ ./ 4/ 支持/ 联合/ 预留/ 体系/ 架构/ 的/ SNAP/ 协议/ 扩展/ 跨/ 数据中心/ 联合/ 预留/ 体系/ 架构/ 依然/ 采用/ SNAP/ 进行/ 用户/ 和/ 资源/ 提供者/ 之间/ 的/ 预留/ 协商/ 和/ 对/ SLA/ 的/ 生命周期/ 管理/ ,/ 我们/ 对/ SNAP/ 做/ 了/ 两/ 方面/ 的/ 扩展/ 以/ 支持/ 本文/ 所/ 提出/ 的/ 联合/ 预留/ 体系/ 架构/ :/ 对/ SLA/ 状图/ 4/ 扩展/ 的/ SLA/ 状态/ 转换/ 图/ 4.2/ SLA/ 元语言/ 的/ 扩展/ SNAP/ 协议/ 定义/ 了/ SLA/ 的/ 元语言/ ,/ 包括/ 针对/ RSLA/ 的/ 资源/ 描述语言/ 、/ 针对/ TSLA/ 的/ 任务/ 描述语言/ 以及/ 针对/ BSLA/ 的/ 绑定/ 描述语言/ ,/ SNAP/ 将/ 这/ 3/ 类/ 元语言/ 统一/ 用/ 四元组/ 表示/ :/ 〈/ I/ ,/ c/ ,/ tdead/ ,/ a/ 〉/ ./ 其中/ I/ 是/ SLA/ 的/ 类型/ 标识符/ ,/ c/ 是/ 用户/ 代理/ 的/ 标识符/ ,/ tdead/ 是/ SLA/ 的/ 最终/ 期限/ ,/ a/ 统一/ 表示/ 了/ SLA/ 描述/ 元语言/ ./ 具体/ 地/ ,/ 〈/ I/ ,/ c/ ,/ tdead/ ,/ 〈/ r/ 〉/ R/ 〉/ ,/ 〈/ I/ ,/ c/ ,/ tdead/ ,/ 〈/ j/ 〉/ T/ 〉/ 和/ 〈/ I/ ,/ c/ ,/ tdead/ ,/ 〈/ j/ 〉/ B/ 〉/ 分别/ 表示/ 了/ 3/ 类/ 元语言/ ,/ 其中/ 资源/ 态/ 进行/ 扩展/ 以/ 支持/ 虚拟/ 资源/ 容器/ ,/ 对/ SLA/ 元语言/ 进行/ 扩展/ 以/ 支持/ 区分/ 硬/ 、/ 软/ 两类/ QoS/ 参数/ ./ 4.1/ SLA/ 状态/ 的/ 扩展/ SNAP/ 协议/ 通过/ 制定/ SLA/ 完成/ 资源/ 提供者/ 与/ 用户/ 之间/ 的/ QoS/ 协商/ ,/ SNAP/ 包括/ 3/ 种/ SLA/ :/ TSLA/ 、/ RSLA/ 和/ BSLA/ ./ TSLA/ 用来/ 协商/ 活动/ 或/ 任务/ 的/ 需求/ ,/ TSLA/ 通过/ 用户/ 的/ 资源/ 需求/ 来/ 表征/ 任务/ ;/ RSLA/ 用来/ 协商/ 资源/ 的/ 性能/ 和/ 消费/ 的/ 权限/ ,/ RSLA/ 通过/ 资源/ 的/ 抽象/ 服务/ 能力/ 来/ 表征/ 资源/ ;/ BSLA/ 将/ TSLA/ 与/ RSLA/ 相/ 绑定/ ,/ RSLA/ 所/ 规定/ 的/ 资源/ 属性/ 必须/ 满足/ TSLA/ 所/ 规定/ 的/ 任务/ 需求/ ./ 在/ 本文/ 所/ 提出/ 的/ 体系/ 架构/ 中/ ,/ 预留/ 请求/ 并非/ 直接/ 与/ 资源/ 相/ 绑定/ ,/ 而是/ 与/ 虚拟/ 资源/ 容器/ 相/ 绑定/ ,/ 因此/ SNAP/ 中所/ 定义/ 的/ 3/ 类/ SLA/ 不能/ 描述/ 任务/ 与/ 虚拟/ 资源/ 容器/ 之间/ 的/ 绑定/ ,/ 需要/ 扩展/ SNAP/ 定义/ 新型/ 的/ SLA/ 来/ 描述/ 这种/ 绑定/ ./ 我们/ 定义/ VBSLA/ 来/ 描述/ 任务/ 与/ 虚拟/ 资源/ 容器/ 之间/ 的/ 绑定/ ./ 图/ 4/ 描述/ 了/ 扩展/ 的/ SLA/ 状态/ 转换/ 图/ ,/ 其中/ ,/ S0/ ,/ S1/ ,/ S3/ ,/ S4/ 是/ SNAP/ 原有/ 的/ 状态/ ,/ S2/ 是/ 扩展/ 的/ 状态/ ./ 状态/ S0/ 表示/ SLA/ 未/ 被/ 创建/ 或/ 已经/ 执行/ 完毕/ 而/ 终止/ 或者/ 被/ 取消/ ;/ 状态/ S1/ 表示/ 一些/ TSLA/ 和/ RSLA/ 已经/ 被/ 创建/ ,/ 但/ 尚未/ 绑定/ ,/ 状态/ S2/ 表示/ TSLA/ 已经/ 与/ 虚拟/ 资源/ 容器/ 绑定/ 形成/ VBSLA/ ,/ 即/ 完成/ 了/ 提前/ 预留/ 的/ 协商/ ,/ 进入/ 预定/ 状态/ ;/ 状态/ S3/ 表示/ 提前/ 预留/ 执行/ 时间/ 到达/ ,/ TSLA/ 与/ RSLA/ 成功/ 绑定/ 形成/ BSLA/ ;/ 状态/ S4/ 表示/ 请求/ 任务调度/ 成功/ ,/ 开始/ 执行/ ,/ 进入/ 运行/ 状态/ ./ 描述/ 元语言/ 是/ 任务/ 描述/ 元语言/ 的/ 子集/ ,/ 于是/ ,/ 只要/ 扩展/ 资源/ 描述/ 元语言/ 就/ 可以/ 使/ SNAP/ 的/ SLA/ 描述/ 元语言/ 达到/ 区分/ 硬/ 、/ 软/ QoS/ 参数/ 的/ 目的/ ./ 资源/ 描述/ 元语言/ 定义/ 了/ 多种/ 描述/ 资源/ 的/ 方式/ ,/ 其中/ 的/ 类型/ 集合/ (/ TypedSet/ )/ 用来/ 描述/ 有/ 一组/ 属性/ 的/ 资源/ ,/ 能够/ 较/ 好/ 反映/ 出/ 资源/ 的/ QoS/ 属性/ ./ 例如/ ,/ [/ x1bytes/ ,/ x2byte/ // s/ ]/ disk/ 描述/ 了/ 容量/ 为/ x1bytes/ ,/ 转速/ 为/ x2byte/ // s/ 的/ 硬盘/ ;/ [/ xbyte/ // s/ ]/ bandwidth/ 描述/ 了/ 传输速度/ 为/ xbyte/ // s/ 的/ 带宽/ ./ 为了/ 支持/ 硬/ 、/ 软/ QoS/ 参数/ Page6/ 的/ 区分/ ,/ 可以/ 添加/ 属性/ H/ 或/ S/ 来/ 实现/ ,/ 如/ [/ x1bytes/ ,/ x2byte/ // s/ ,/ H/ ]/ disk/ 描述/ 了/ 硬盘/ 要求/ 是/ 硬/ QoS/ 参数/ [/ xbyte/ // s/ ,/ S/ ]/ bandwidth/ 描述/ 了/ 带宽/ 要求/ 是/ 软/ QoS/ 参数/ ./ 在/ 时间/ 帧/ [/ t0/ ,/ t1/ ]/ 的/ 预留/ 请求/ 的/ 资源/ 需求/ 可以/ 表示/ 为/ 一段时间/ 内/ 的/ 资源/ 需求/ 序列/ ,/ 该/ 资源/ 序列/ r/ [/ t0/ ,/ t1/ ]/ 可以/ 表示/ 为/ r/ [/ t0/ ,/ t1/ ]/ =/ [/ TS/ [/ t0/ ,/ t1/ ]/ 其中/ ,/ TSi/ 为/ 资源类型/ 集合/ ,/ 可以/ 表示/ 为/ 其他/ 有关/ SLA/ 描述/ 元语言/ ,/ 及/ 协定/ 建立/ 和/ 管理/ 操作/ 均/ 参考/ SNAP/ 所/ 定义/ 的/ 规范/ [/ 7/ ]/ ./ 5/ 单个/ 数据中心/ 内/ 的/ 逻辑/ 资源/ 选择/ 算法/ 由于/ 目前/ 的/ 大部分/ 资源/ 预留/ 协商/ 策略/ 都/ 严格/ 按照/ SLA/ 所/ 规定/ 的/ QoS/ 参数/ 来/ 选择/ 逻辑/ 资源/ ,/ 使得/ 很多/ 非/ 功能性/ 的/ QoS/ 参数/ 对/ 预留/ 请求/ 成功/ 与否/ 起/ 决定性/ 的/ 作用/ ,/ 以致/ 很多/ 预留/ 请求/ 因为/ 软/ QoS/ 参数/ 的/ 不/ 满足/ 被/ 拒绝/ 或/ 需要/ 进行/ 重/ 协商/ ,/ 这/ 导致/ 了/ 误/ 拒率/ 的/ 上升/ 和/ 资源管理/ 系统/ 性能/ 的/ 下降/ ./ 本文/ 提出/ 基于/ QoS/ 偏差/ 距离/ 的/ 逻辑/ 资源/ 选择/ 算法/ ,/ 该/ 算法/ 被/ 部署/ 到/ 逻辑/ 资源/ 选择/ 管理器/ 上/ ./ 在/ 算法/ 提出/ 之前/ ,/ 本文/ 针对/ 目前/ 在/ QoS/ 偏差/ 距离/ 方面/ 计算方法/ 的/ 不/ 完善/ 做/ 了/ 改进/ ,/ 使/ QoS/ 偏差/ 距离/ 更/ 确切/ 地/ 描述/ 出/ SLA/ 中所/ 规定/ 的/ QoS/ 需求/ 与/ 资源/ 提供/ 的/ QoS/ 参数/ 之间/ 的/ 偏差/ 程度/ ./ 5.1/ QoS/ 偏差/ 距离/ 的/ 定义/ 与/ 计算/ QoS/ 偏差/ 距离/ (/ QoSDeviationDistance/ ,/ QDD/ )/ 用于/ 衡量/ 用户/ QoS/ 的/ 要求/ 与/ 资源/ 提供/ 的/ QoS/ 参数/ 之间/ 的/ 偏差/ 程度/ ,/ 文献/ [/ 15/ ]/ 提出/ 了/ QoS/ 偏差/ 距离/ 的/ 计算公式/ :/ 其中/ ,/ 犙/ =/ {/ q1/ ,/ q2/ ,/ …/ ,/ qm/ }/ 为/ TSLA/ 中/ 描述/ 所/ 的/ 用户/ QoS/ 需求/ 向量/ ,/ 犚/ =/ {/ r1/ ,/ r2/ ,/ …/ ,/ rm/ }/ 为/ RSLA/ 中/ 描述/ 的/ 资源/ QoS/ 属性/ 向量/ ./ 式/ (/ 6/ )/ 说明/ QoS/ 偏差/ 距离/ 越小/ ,/ 资源/ 提供/ 的/ 服务/ 越/ 符合/ 用户/ 的/ 需求/ ./ 服务/ 网格/ 中/ 的/ QoS/ 参数/ 有/ 硬/ QoS/ 参数/ 和/ 软/ QoS/ 参数/ 之分/ ,/ 对于/ 软/ QoS/ 参数/ ,/ 偏差/ 距离/ 越小/ 说明/ 资源/ 服务/ 越/ 符合/ 用户/ 的/ 需求/ ./ 但是/ ,/ 对于/ 硬/ QoS/ 参数/ ,/ 只要/ 用户/ 的/ QoS/ 参数/ 得不到/ 满足/ ,/ 不管/ 资源/ 属性/ 与/ 用户/ 的/ QoS/ 参数/ 之间/ 的/ 偏差/ 程度/ ,/ 该/ 用户/ 请求/ 都/ 要/ 被/ 拒绝/ ./ 所以/ ,/ 文献/ [/ 15/ ]/ 中/ QoS/ 偏差/ 距离/ 的/ 计算方法/ 在/ 缺乏/ 对/ 不同/ 类/ QoS/ 参数/ 的/ 区分/ ,/ 存在/ 一定/ 的/ 不足/ ./ 为此/ ,/ 本文/ 对/ QoS/ 偏差/ 距离/ 的/ 计算/ 做/ 了/ 改进/ ./ 应用/ 集合/ 表示/ 为/ A/ =/ {/ S1/ ,/ S2/ ,/ …/ ,/ Sm/ }/ ./ SNAP/ 针对/ 每个/ 服务/ 制定/ 相应/ 的/ TSLA/ ,/ 每个/ 服务/ 看作/ 是/ 一组/ QoS/ 参数/ 的/ 集合/ ,/ 即/ Si/ =/ {/ q1/ ,/ q2/ ,/ …/ ,/ ql/ }/ ./ 网络/ 计算/ 平台/ 资源/ 层/ 被/ 抽象/ 为/ 一组/ 逻辑/ 资源/ 的/ 集合/ R/ =/ {/ R1/ ,/ R2/ ,/ …/ ,/ Rn/ }/ ,/ 针对/ 每个/ 逻辑/ 资源/ SNAP/ 制定/ RSLA/ ,/ 每个/ 逻辑/ 资源/ 也/ 被/ 看作/ 是/ 一组/ QoS/ 参数/ 的/ 集合/ ,/ 即/ Ri/ =/ {/ r1/ ,/ r2/ ,/ …/ ,/ rl/ }/ ./ 假设/ l/ 个/ QoS/ 参数/ 中有/ k/ 个/ 硬/ QoS/ 参数/ ,/ 即/ 有/ l/ -/ k/ 个/ 软/ QoS/ 参数/ ./ 于是/ ,/ TSLA/ 和/ RSLA/ 分别/ 可以/ 重新/ 表示/ 为/ Si/ =/ {/ q1/ ,/ q2/ ,/ …/ ,/ qk/ ,/ qk/ +/ 1/ ,/ …/ ,/ ql/ }/ ,/ Ri/ =/ {/ r1/ ,/ r2/ ,/ …/ ,/ rk/ ,/ rk/ +/ 1/ ,/ …/ ,/ rl/ }/ ./ QoS/ 参数/ 可以/ 分为/ 积极/ 度量/ 和/ 消极/ 度量/ 两类/ [/ 16/ ]/ ./ 消极/ 度量/ 指其值/ 越/ 高/ ,/ 质量/ 越低/ 的/ QoS/ 参数/ ,/ 如/ 响应/ 时间/ ./ 积极/ 度量/ 指指/ 其值/ 越/ 高/ ,/ 质量/ 越高/ 的/ QoS/ 参数/ ,/ 如/ CPU/ 份额/ 、/ 声誉/ 等/ ./ 我们/ 定义/ 特征值/ cj/ 表示/ 第/ j/ 个/ QoS/ 参数/ 是否/ 被/ 满足/ ./ cj/ =/ 1/ 表示/ 该/ QoS/ 参数/ 被/ 满足/ ,/ 否则/ cj/ =/ 0/ ./ ε/ =/ 其中/ ,/ hi/ 表示/ 服务/ Si/ 的/ 所有/ 硬/ QoS/ 参数/ 是否/ 被/ 满足/ ,/ hi/ =/ 1/ 表示/ ,/ cj/ =/ 1/ ,/ 1/ / j/ / k/ ,/ 即/ k/ 个/ 硬/ QoS/ 参数/ 都/ 能/ 被/ 满足/ ;/ 否则/ ,/ hi/ =/ 0/ ,/ 该/ 资源/ 将/ 无法/ 满足/ 这样/ 的/ 服务/ 请求/ ,/ 所以/ 资源/ 属性/ 与/ 用户/ 请求/ QoS/ 之间/ 的/ 偏差/ 距离/ 为/ 无穷大/ ./ 只有/ 在/ 服务/ 请求/ 所有/ 硬/ QoS/ 参数/ 都/ 被/ 满足/ 的/ 前提/ 下/ ,/ 利用/ 偏差/ 距离/ 表示/ 服务/ 被/ 满足/ 的/ 程度/ 才/ 有/ 意义/ ./ 5.2/ 基于/ QoS/ 偏差/ 距离/ 的/ 逻辑/ 资源/ 选择/ 算法/ 跨/ 数据中心/ 的/ 联合/ 预留/ 体系/ 架构/ 在/ 接收/ 到/ 用户/ 预留/ 请求/ 后/ ,/ 将/ 复杂/ 预留/ 请求/ 分解/ 为/ 简单/ 预留/ 请求/ ,/ 通过/ 与/ 信息中心/ 的/ 交互/ 发现/ 服务/ ,/ 并/ 定位/ 到/ 某个/ 数据中心/ ,/ 由/ 单个/ 数据中心/ 的/ 提前/ 预留/ 体系/ 架构/ 对/ 简单/ 资源/ 预留/ 请求/ 进行/ 处理/ ,/ 它/ 通过/ 逻辑/ 资源/ 选择/ 管理器/ 为/ 预留/ 队列/ 中/ 到达/ 预留/ 时间/ 的/ 简单/ 预留/ 请求/ 选择/ 当前/ 时间/ 最合适/ 的/ 逻辑/ 资源/ ,/ 实现/ 资源/ 预留/ 请求/ 与/ 逻辑/ 资源/ 的/ 最终/ 绑定/ ./ 本文/ 提出/ 了/ 基于/ QoS/ 偏差/ 距离/ 的/ 逻辑/ 资源/ 选择/ 算法/ ,/ 试图/ 选择/ 与/ 预留/ 实体/ 之间/ 偏差/ 距离/ 尽量/ 小/ 逻辑/ 资源/ 来/ 完成/ 该/ 预留/ 请求/ ,/ 算法/ 伪/ 代码/ 如下/ 所示/ ./ Page7/ 算法/ 1/ ./ 基于/ QoS/ 偏差/ 距离/ 的/ 逻辑/ 资源/ 选择/ 算法/ ./ 输入/ :/ AR/ _/ Queue/ =/ {/ S1/ ,/ S2/ ,/ …/ ,/ Sm/ }/ ,/ 输出/ :/ Createareservationmatrix/ 犚/ 犲/ mnforeachservice1/ ./ WHILE/ (/ AR/ _/ Queueisnotnull/ )/ DO2/ ./ Si/ ←/ AR/ _/ Queue/ ./ out/ (/ )/ ;/ 3/ ./ IF/ (/ tcur/ =/ tstart/ )/ THEN4/ ./ FORj/ ←/ 1TOn5/ ./ Computing/ ε/ ijbyEq/ ./ (/ 10/ )/ ;/ 6/ ./ 犙/ 犱/ mn/ [/ i/ ]/ [/ j/ ]/ =/ ε/ ij/ ;/ 7/ ./ ENDFOR8/ ./ Sortresourcesaccordingto/ ε/ ijinnon/ -/ decreasing9/ ./ FORj/ ←/ 1TOn10/ ./ IF/ (/ ∩/ k/ =/ 1/ ,/ 2/ ,/ …/ ,/ i/ -/ 1/ (/ tkj/ </ tstart11/ ./ 犚/ 犲/ mn/ [/ i/ ]/ [/ j/ ]/ =/ tstart12/ ./ break/ ;/ 13/ ./ ENDIF14/ ./ ENDFOR15/ ./ ENDIF/ 根据/ 资源/ 提前/ 预留/ 的/ 属性/ ,/ 预留/ 请求/ 可以/ 被/ 抽象/ 为/ 三元组/ 〈/ tstart/ 源/ 容器/ 的/ 预留/ 请求/ 队列/ ,/ 虚拟/ 资源/ 容器/ 为/ 每个/ 预留/ 请求/ 分配/ 一个/ ID/ ,/ tstart/ 预留/ 的/ 时间段/ ,/ 犙/ i/ 为/ 预留/ 请求/ 的/ QoS/ 需求/ 向量/ ,/ 犙/ i/ 包含/ 了/ 硬/ QoS/ 和/ 软/ QoS/ 参数/ ./ 一次/ 成功/ 的/ 预留/ 过程/ 也/ 可以/ 抽象/ 为/ 三元组/ 〈/ R/ _/ ID/ ,/ AR/ _/ ID/ ,/ LR/ _/ ID/ ,/ T/ 〉/ ,/ R/ _/ ID/ 为/ 预留/ 过程/ 的/ 标识/ ,/ AR/ _/ ID/ 为/ 预留/ 请求/ 的/ ID/ ,/ LR/ _/ ID/ 为/ 逻辑/ 资源/ 的/ ID/ ,/ T/ 为/ 预留/ 过程/ 的/ 时间/ 帧/ ,/ 它/ 包括/ 预留/ 的/ 开始/ 时间/ 、/ 结束/ 时间/ 及/ 占用/ 资源/ 时间段/ ./ 算法/ 的/ 输入/ 是/ 预留/ 请求/ 队列/ AR/ _/ Queue/ 和/ 逻辑/ 资源/ 集合/ LR/ _/ Set/ ,/ 输出/ 是/ 预留/ 矩阵/ 犚/ 犲/ mn/ ,/ 它/ 描述/ 了/ 预留/ 请求/ 与/ 逻辑/ 资源/ 之间/ 的/ 授权/ 关系/ ./ 预留/ 请求/ 队列/ 根据/ 请求/ 的/ 开始/ 时间/ 排序/ ,/ 当/ 预留/ 实体/ 到达/ 开始/ 时刻/ 时/ ,/ 算法/ 首先/ 计算/ 该/ 请求/ 与/ 所有/ 逻辑/ 资源/ 的/ QoS/ 偏差/ 距离/ ,/ 保存/ 在/ 矩阵/ 犙/ 犱/ mn/ 中/ ,/ 然后/ 算法/ 选择/ QoS/ 偏差/ 距离/ 尽量/ 小/ 、/ 并/ 处于/ 空闲/ 状态/ 的/ 逻辑/ 资源/ 来/ 完成/ 该/ 预留/ 请求/ ./ 预留/ 矩阵/ 犚/ 犲/ mn/ 记录/ 了/ 预留/ 过程/ 的/ 结束/ 时间/ ,/ 它/ 和/ 预留/ 请求/ 向量/ 一起/ 记录/ 了/ 预留/ 过程/ 的/ 时间/ 帧/ 向量/ ./ 值得注意/ 的/ 是/ ,/ 当有/ 一/ 预留/ 请求/ 到达/ 时/ ,/ 可能/ 存在/ 多个/ 资源/ 同时/ 满足/ 最小/ 偏差/ 距离/ ,/ 本文/ 提出/ 的/ 逻辑/ 资源/ 选择/ 算法/ 将/ 随机/ 选择/ 资源/ 匹配/ 预留/ 请求/ ,/ 这/ 可能/ 导致/ 后/ 到/ 的/ 预留/ 请求/ 无法/ 获得/ 最优/ 的/ 资源/ ,/ 从而/ 导致/ 全局/ 角度/ 的/ 非/ 最优/ ./ 为此/ ,/ 我们/ 设计/ 以下/ 两种/ 方案/ 作为/ 逻辑/ 资源/ 选择/ 算法/ 的/ 补充/ :/ (/ 1/ )/ 预留/ 请求/ 批处理/ 和/ 优化/ ,/ 对/ 给定/ 时间/ 点/ 以前/ 到达/ 的/ 预留/ 请求/ 批处理/ ,/ 根据/ 偏差/ 距离/ 给出/ 整体/ 最优/ 的/ 资源分配/ 方案/ ;/ (/ 2/ )/ 重/ 协商/ ,/ 设/ 当前/ 到达/ 的/ 预留/ 请求/ Q2/ 的/ QoS/ 需求/ 无法/ 得到/ 满足/ ,/ 而能/ 满足/ Q2/ 的/ 资源/ R1/ 已经/ 预留/ 给/ 先/ 到达/ 的/ 请求/ Q1/ ,/ 若/ 比/ 具有/ 较/ 低/ 的/ QoS/ 需求/ ,/ 且/ 能/ 找到/ 资源/ R2/ 满足/ Q1/ ,/ 则/ 采用/ 重/ 协商/ 方法/ 重新/ 为/ Q1/ 和/ Q2/ 分配/ 合适/ 资源/ ./ 6/ 实验/ 结果/ 本文/ 实验/ 在/ 东南大学/ 校园/ 云/ 计算/ 平台/ SEUCloud/ (/ SoutheastUniversityCloud/ )/ 环境/ 下/ 完成/ ./ SEUCloud/ 是/ 在/ 学校/ 多个/ 独立/ 的/ 数据中心/ 基础/ 上/ ,/ 基于/ 虚拟化/ 技术/ 以及/ 相应/ 开源/ 资源管理/ 平台/ OpenStack/ ,/ 为/ AMS/ -/ 02/ 实验/ 海量/ 数据/ 的/ 处理/ 而/ 搭建/ 的/ 一个/ 统一/ 云/ 计算环境/ ./ AMS/ 实验/ 是/ 国际/ 空间站/ 上/ 唯一/ 大型/ 物理/ 实验/ ,/ 是/ 人类/ 第一次/ 在/ 太空/ 中/ 精密/ 地/ 测量/ 高能量/ 带电/ 原子/ 和/ 粒子/ 的/ 实验/ ./ 其/ 目的/ 是/ 为/ 寻找/ 由/ 反物质/ 所/ 组成/ 的/ 宇宙/ 和/ 暗物质/ 的/ 来源/ 以及/ 测量/ 宇宙线/ 的/ 来源/ [/ 17/ ]/ ./ AMS/ -/ 02/ 将/ 在/ 国际/ 空间站/ 运行/ 10/ 年/ ~/ 15/ 年/ ,/ 大量/ 的/ 原始数据/ (/ 每年/ 约/ 50TB/ )/ 和/ 蒙特卡罗/ 仿真/ (/ MonteCarlo/ ,/ MC/ )/ 数据/ (/ 每年/ 约/ 200TB/ )/ 需要/ 在/ 地面/ 数据中心/ SOC/ (/ ScienceOperationsCenter/ )/ 进行/ 传输/ 、/ 存储/ 、/ 处理/ 、/ 计算/ 和/ 分析/ ,/ SEUGrid/ 是/ SOC/ 的/ 重要/ 组成部分/ ./ 由于/ MC/ 仿真/ 、/ 原始数据/ 重建/ 以及/ 物理/ 分析/ 等/ 同类/ 子/ 任务/ 之间/ 数据/ 依赖性/ 差/ ,/ 是/ 典型/ 的/ 参数/ 扫描/ 型/ 应用/ ,/ 适合/ 于/ 在/ 网络/ 计算/ 平台/ 上/ 进行/ 并行计算/ ./ 为了/ 很/ 好/ 的/ 保证/ 诸如/ MC/ 仿真/ 此类/ 大/ 计算/ 量/ 、/ 大/ 数据量/ 科学计算/ 任务/ 的/ 服务质量/ ,/ 往往/ 单一/ 的/ 云/ 计算/ 平台/ 无法/ 满足/ 如此/ 巨大/ 的/ 资源/ 需求/ ,/ 此时/ 就/ 需要/ 由/ 多个/ 云/ 计算/ 数据中心/ 共同/ 提供/ 资源/ 协作/ 完成/ ./ 目前/ 整个/ SEUCloud/ 环境/ 中/ CPU/ 总量/ 达/ 3640/ 个/ ,/ 峰值/ 速度/ 达/ 37.8/ 万亿次/ ,/ 存储/ 总量/ 近/ 540TB/ ./ 本文/ 提出/ 的/ 跨/ 数据中心/ 的/ 联合/ 预留/ 体系/ 架构/ 被/ 部署/ 到/ SEUCloud/ 环境/ 中以/ 保障/ 用户/ 的/ QoS/ 需求/ ,/ 我们/ 利用/ SEUCloud/ 的/ 部分/ 资源/ 进行/ 单个/ 数据中心/ 的/ 提前/ 预留/ 体系/ 架构/ 性能/ 分析/ 实验/ ./ 6.1/ 虚拟/ 资源/ 容器/ 的/ 性能/ 分析/ 我们/ 首先/ 测试/ 虚拟/ 资源/ 容器/ 的/ 性能/ ,/ 为了/ 模拟/ 资源/ 的/ 动态性/ ,/ 我们/ 通过/ 随机/ 产生/ 不同/ 规模/ 的/ HPLPage8/ (/ HighPerformanceLinpack/ )/ 测试/ 作业/ 来/ 产生/ 变化/ 的/ 本地/ 负载/ ,/ 本地/ 负载/ 越大该/ 资源/ 在/ SEUCloud/ 上/ 表现/ 出/ 的/ 服务/ 能力/ 就/ 越/ 差/ ,/ 当/ 本地/ 负载/ 达到/ 满负荷/ 时/ ,/ 就/ 视为/ 该/ 资源/ 不可/ 获得/ ,/ 相当于/ 退出/ SEUCloud/ ,/ 并/ 取消/ 该/ 时间段/ 内/ 已经/ 绑定/ 好/ 的/ 预留/ 请求/ ,/ 且/ 不再/ 绑定/ 任何/ 新/ 的/ 预留/ 请求/ ./ 因此/ ,/ 总/ 的/ 工作/ 负载/ 就/ 由/ 一段时间/ 内/ 的/ HPL/ 测试/ 作业/ 的/ 规模/ 和/ 数量/ 决定/ ,/ 工作/ 负载/ 通过/ 式/ (/ 8/ )/ 计算/ :/ 其中/ Ni/ 为/ 某/ HPL/ 作业/ 的/ 问题/ 规模/ ,/ Linpack/ 测试/ 中/ 规定/ 2/ // 3/ ×/ N3/ 作业/ 的/ 浮点运算/ 次数/ ,/ 分母/ 为/ CPU/ 总/ 的/ 理论/ 浮点运算/ 次数/ ./ 下面/ 通过/ 两个/ 实验/ 说明/ 引入/ 虚拟/ 资源/ 容器/ 所/ 带来/ 的/ 预留/ 机制/ 在/ 性能/ 上/ 的/ 改进/ ,/ 我们/ 选用/ 预留/ 请求/ 成功率/ 作为/ 比较/ 目标/ ./ (/ 1/ )/ 实验/ 1/ ./ 考察/ 了/ 使用/ 和/ 未/ 使用/ 虚拟/ 资源/ 容器/ 时/ 系统/ 工作/ 负载/ 的/ 变化/ 对/ 预留/ 成功率/ 的/ 影响/ ./ 我们/ 分别/ 在/ 使用/ 和/ 未/ 使用/ 虚拟/ 资源/ 容器/ 两种/ 情形/ 下为/ MC/ 仿真/ 作业/ 预留/ 资源/ ,/ 预留/ 请求/ 的/ 到达/ 过程/ 遵循/ Poisson/ 过程/ ,/ 两个/ 连续/ 预留/ 请求/ 到达/ 的/ 间隔时间/ 便/ 服从/ 指数分布/ ,/ 取/ 平均/ 到达/ 速率/ λ/ =/ 2.8/ ./ 结果/ 如图/ 5/ 所示/ :/ 资源/ 预留/ 请求/ 成功率/ 随着/ 工作/ 负载/ 的/ 增大/ 而/ 减小/ ,/ 但是/ 使用/ 虚拟/ 资源/ 容器/ 时/ 预留/ 请求/ 成功率/ 减小/ 幅度/ 较/ 小/ ,/ 并/ 始终/ 优于/ 未/ 使用/ 虚拟/ 资源/ 容器/ 时/ 的/ 情况/ ./ 当/ 负载/ 达到/ 0.8/ 以上/ ,/ 即/ 负载/ 偏重/ 时/ ,/ 两种/ 情形/ 的/ 预留/ 请求/ 成功率/ 下降/ 速度/ 明显/ 加快/ ,/ 但是/ 使用/ 虚拟/ 资源/ 容器/ 时/ 的/ 下降/ 速度/ 明显/ 小于/ 未/ 使用/ 时/ 的/ 情况/ ,/ 可见/ 虚拟/ 资源/ 容器/ 增强/ 了/ 系统/ 的/ 稳定性/ ./ 图/ 5/ 工作/ 负载/ 变化/ 时/ 的/ 资源/ 预留/ 请求/ 成功率/ 对比/ 图/ (/ 2/ )/ 实验/ 2/ ./ 比较/ 了/ 使用/ 和/ 未/ 使用/ 虚拟/ 资源/ 容器/ 两种/ 情形/ 在/ 同样/ 的/ 负载/ 变化/ 影响/ 下/ 的/ 预留/ 请求/ 成功率/ ,/ 我们/ 在/ 24h/ 内/ 提交/ 约/ 2400/ 个/ MC/ 仿真/ 作业/ 的/ 预留/ 请求/ ,/ 即/ 平均/ 每/ 30min/ 提交/ 50/ 个/ ,/ 并/ 对/ 每/ 30min/ 内/ 的/ 预留/ 请求/ 成功率/ 进行/ 采样/ ./ 结果/ 如图/ 6/ 所示/ :/ 使用/ 虚拟/ 资源/ 容器/ 时/ 一天/ 内/ 的/ 平均/ 预留/ 成功率/ 可/ 达到/ 92/ %/ ,/ 而/ 未/ 使用/ 虚拟/ 资源/ 容器/ 时/ 只有/ 66/ %/ ./ 由于/ 资源/ 的/ 动态/ 波动性/ ,/ 24h/ 内/ 的/ 预留/ 请求/ 成功率/ 也/ 在/ 一定/ 范围/ 内/ 动态/ 波动/ ,/ 使用/ 虚拟/ 资源/ 容器/ 的/ 曲线/ 仅/ 在/ 12.9/ %/ 的/ 范围/ 内/ 波动/ ,/ 未/ 使用/ 虚拟/ 资源/ 容器/ 的/ 曲线/ 波动/ 范围/ 达到/ 35.3/ %/ ./ 以上/ 两个/ 实验/ 结果表明/ ,/ 在/ 资源/ 可/ 获得性/ 和/ 服务/ 性能/ 都/ 动态变化/ 情况/ 下/ ,/ 虚拟/ 资源/ 容器/ 的/ 引入/ 可以/ 使/ 联合/ 资源/ 预留/ 体系/ 架构/ 显著/ 地/ 提高/ 预留/ 请求/ 的/ 成功率/ ,/ 并且/ 具有/ 更强/ 的/ 稳定性/ ./ 6.2/ 基于/ QoS/ 偏差/ 距离/ 的/ 逻辑/ 资源/ 选择/ 算法/ 性能/ 分析/ SNAP/ 协议/ 根据/ 3/ 类/ SLA/ 进行/ 资源/ 提前/ 预留/ ,/ 只有/ 当/ TSLA/ 中/ 所有/ 的/ QoS/ 参数/ 全部/ 被/ RSLA/ 满足/ 时/ ,/ 才/ 将/ TSLA/ 与/ RSLA/ 绑定/ ,/ 并/ 建立/ BSLA/ ./ 在/ 本文/ 的/ 跨/ 虚拟/ 组织/ 联合/ 预留/ 架构/ 中/ ,/ 虚拟/ 资源/ 容器/ 首先/ 建立/ VBSLA/ ,/ VBSLA/ 根据/ QoS/ 偏差/ 距离/ 选择/ 逻辑/ 资源/ 建立/ BSLA/ ,/ 算法/ 优先选择/ QoS/ 偏差/ 距离/ 尽量/ 小/ 的/ 逻辑/ 资源/ 完成/ 预留/ 请求/ ./ 我们/ 在/ 预留/ 体系/ 架构/ 的/ 逻辑/ 资源/ 选择/ 管理器/ 分别/ 部署/ 基于/ SLA/ 和/ QDD/ 的/ 两种/ 逻辑/ 资源/ 选择/ 算法/ ,/ 在/ 3/ 种/ 不同/ 预留/ 请求/ 到达/ 速率/ 的/ 场景/ 下/ 分别/ 比较/ 了/ 预留/ 请求/ 成功率/ 随着/ 负载/ 变化/ 的/ 性能/ ,/ 3/ 种/ 场景/ 的/ 平均/ 到达/ 速率/ 分别/ 为/ λ/ 1/ =/ 2.7/ ,/ λ/ 2/ =/ 3/ ,/ λ/ 3/ =/ 3.5/ ./ 结果/ 如图/ 7/ 所示/ :/ 在/ 预留/ 请求/ 到达/ 速率/ 最低/ 的/ 场景/ 1/ 中/ ,/ 两种/ 算法/ 的/ 预留/ 请求/ 成功率/ 差不多/ ;/ 随着/ 预留/ 请求/ 到达/ 速率/ 的/ 增大/ ,/ 两种/ 算法/ 的/ 预留/ 请求/ 成功率/ 的/ 差距/ 明显/ 增大/ ./ 接下来/ ,/ 我们/ 观察/ 预留/ 请求/ 成功率/ 和/ 资源/ 利用率/ 随着/ 请求/ 到达/ 间隔时间/ 变化/ 的/ 情况/ ,/ 设/ 工作/ 负载/ Page9/ 图/ 7/ 资源/ 预留/ 请求/ 成功率/ 随/ 系统/ 负载/ 变化/ 比较/ 图/ σ/ =/ 0.3/ ,/ 请求/ 到达/ 间隔时间/ 从/ 500s/ ~/ 20s/ 范围/ 内/ 逐步/ 减小/ ,/ 图/ 8/ 和/ 图/ 9/ 分别/ 比较/ 基于/ SLA/ 和/ QDD/ 的/ 两种/ 逻辑/ 资源/ 选择/ 算法/ 在/ 请求/ 成功率/ 和/ 资源/ 利用率/ 上/ 的/ 比较/ 结果/ ./ 可以/ 看出/ ,/ 当/ 请求/ 到达/ 间隔时间/ 较长/ 时/ ,/ 即/ 单位/ 时间/ 内/ 预留/ 请求/ 数量/ 较/ 少/ ,/ 两种/ 算法/ 性能/ 接近/ ;/ 随着/ 请求/ 到达/ 间隔时间/ 的/ 逐步/ 减小/ ,/ 基于/ QDD/ 的/ 算法/ 优势/ 愈发/ 明显/ ,/ 表现/ 在/ 具有/ 较/ 高/ 的/ 预留/ 请求/ 成功率/ 和/ 资源/ 利用率/ ./ 图/ 8/ 资源/ 预留/ 请求/ 成功率/ 随/ 请求/ 到达/ 时间/ 变化/ 比较/ 图图/ 9/ 资源/ 利用率/ 随/ 请求/ 到达/ 时间/ 变化/ 比较/ 图/ 本文/ 提出/ 的/ 基于/ QDD/ 的/ 算法/ 明显/ 高于/ SNAP/ 协议/ 中/ 基于/ SLA/ 的/ 算法/ ,/ 其/ 原因/ 在于/ 基于/ SLA/ 的/ 选择/ 算法/ 没有/ 考虑/ QoS/ 参数/ 之间/ 的/ 差别/ ,/ 描述/ 服务/ 辅助/ 属性/ 的/ 软/ QoS/ 也/ 可能/ 决定/ 预留/ 请求/ 的/ 成功/ 与否/ ,/ 导致/ 了/ 系统/ 的/ 误/ 拒率/ 偏高/ ./ 而/ 基于/ QDD/ 的/ 选择/ 算法/ 只/ 拒绝/ 硬/ QoS/ 参数/ 不能/ 被/ 满足/ 的/ 资源/ 预留/ 请求/ ./ 另外/ ,/ 在/ 资源/ 负载/ 变/ 重/ ,/ 预留/ 请求/ 数量/ 增多/ 时/ ,/ 比如/ 各个/ 场景/ 的/ 重/ 负载/ 状态/ 、/ 及/ 预留/ 请求/ 达到/ 率/ 较/ 高/ 的/ 场景/ 3/ ,/ 两种/ 算法/ 所/ 导致/ 的/ 预留/ 请求/ 成功率/ 的/ 差距/ 变/ 大/ ,/ 可见/ 基于/ QDD/ 的/ 逻辑/ 资源/ 选择/ 算法/ 在/ 负载/ 相对/ 过重/ ,/ 资源/ 相对/ 紧张/ 的/ 情况/ 下能/ 表现/ 出/ 更/ 强/ 的/ 优越性/ ./ 7/ 结束语/ 本文/ 提出/ 了/ 跨/ 数据中心/ 的/ 资源/ 联合/ 预留/ 体系/ 架构/ ,/ 引入/ 虚拟/ 资源/ 容器/ 以/ 适应/ 资源/ 的/ 动态变化/ ,/ 并/ 对/ QoS/ 偏差/ 距离/ 的/ 计算方法/ 做/ 了/ 改进/ ,/ 资源/ 预留/ 协商/ 采用/ 了/ 基于/ QoS/ 偏差/ 距离/ 的/ 策略/ 以/ 减少/ 预留/ 请求/ 的/ 误/ 拒率/ ./ 最后/ ,/ 在/ 东南大学/ 校园/ 云/ 计算/ 平台/ 上/ 对/ 单个/ 数据中心/ 的/ 提前/ 预留/ 体系/ 架构/ 进行/ 了/ 性能/ 分析/ ,/ 实验/ 结果表明/ ,/ 该/ 架构/ 在/ 可/ 获得性/ 和/ 服务/ 性能/ 都/ 动态变化/ 情况/ 下/ ,/ 可/ 显著/ 地/ 提高/ 预留/ 请求/ 的/ 成功率/ ,/ 且/ 具有/ 更强/ 的/ 稳定性/ ./ 

