Page1/ 云/ 数据/ 管理系统/ 中/ 查询/ 技术/ 研究/ 综述/ 史/ 英杰/ 孟小峰/ (/ 中国人民大学/ 信息/ 学院/ 北京/ 100872/ )/ 摘要/ 作为/ 一种/ 全新/ 的/ 互联网/ 应用/ 模式/ ,/ 云/ 计算/ 在/ 工业界/ 和/ 学术界/ 备受/ 关注/ ./ 人们/ 可以/ 通过/ 终端设备/ 便捷/ 地/ 获取/ 云端/ 服务/ ,/ 并/ 以/ 按/ 需/ 使用/ 的/ 方式/ 获得/ 存储资源/ 、/ 计算资源/ 以及/ 软硬件/ 资源/ ./ 云/ 计算/ 的/ 发展/ 带来/ 了/ 一系列/ 挑战性/ 问题/ ,/ 而云/ 数据/ 的/ 管理/ 问题/ 首当其冲/ ./ 文中/ 结合/ 云/ 数据/ 的/ 特点/ 提出/ 了/ 一个/ 云/ 数据/ 管理系统/ 的/ 框架/ ,/ 并/ 在/ 此基础/ 上/ 从/ 索引/ 管理/ 、/ 查询处理/ 、/ 查询/ 优化/ 以及/ 在线/ 聚集/ 等/ 几个/ 方面/ 对云/ 数据/ 管理系统/ 中/ 查询/ 技术/ 的/ 研究/ 工作/ 进行/ 了/ 总结/ 分析/ ,/ 指明/ 了/ 该/ 领域/ 面临/ 的/ 挑战/ 和/ 未来/ 的/ 研究/ 工作/ ./ 关键词/ 云/ 计算/ ;/ 云/ 数据管理/ ;/ 查询处理/ ;/ 查询/ 优化/ ;/ 索引/ 管理/ ;/ 在线/ 聚集/ 1/ 引言/ 云/ 计算/ 是/ 当今/ 信息产业/ 备受/ 关注/ 的/ 一种/ 全新/ 领先/ 的/ 计算/ 模式/ ./ 在/ 云/ 计算/ 模式/ 下/ ,/ 企业/ 和/ 个人/ 可以/ 根据/ 自己/ 的/ 需要/ 购买/ 存储设备/ 和/ 计算能力/ ,/ 而/ 不用/ 花费/ 大量/ 资金/ 购买/ 大规模/ 高性能/ 计算机/ ,/ 这/ 使得/ 用户/ Page2/ 数据量/ 快速增长/ ./ 据/ IDC/ (/ 互联网/ 数据中心/ )/ 统计/ ,/ 2011/ 年/ 全球/ 产生/ 的/ 数据量/ 达到/ 1.8/ ZB/ ,/ 比/ 2010/ 年/ 增长/ 了/ 1ZB/ ①/ ./ 如何/ 对/ 这些/ 海量/ 数据/ 进行/ 有效/ 管理/ 和/ 分析/ 以/ 获取数据/ 背后/ 潜在/ 的/ 巨大/ 价值/ ,/ 是/ 目前/ 互联网/ 、/ 通信/ 和/ 生物医学/ 等/ 诸多/ 领域/ 面临/ 的/ 问题/ ./ 传统/ 数据/ 管理系统/ 中/ 的/ 很多/ 技术/ 对于/ 如此/ 大规模/ 的/ 数据管理/ 往往/ 不再/ 有效/ ,/ 而且/ 相关/ 软硬件/ 以及/ 维护/ 的/ 昂贵/ 成本/ 也/ 是/ 让/ 大部分/ 企业/ 望洋兴叹/ ./ 云/ 环境/ 是/ 由/ 大量/ 性能/ 普通/ 、/ 价格便宜/ 的/ 计算/ 节点/ 组成/ 的/ 一种/ 无/ 共享/ 大规模/ 并行处理/ 环境/ [/ 1/ ]/ ,/ 所以/ 从/ 成本/ 和/ 性能/ 两/ 方面/ 考虑/ ,/ 越来越/ 多/ 的/ 组织/ 更/ 愿意/ 把/ 数据中心/ 从/ 昂贵/ 的/ 高性能/ 计算/ 集群/ 转移/ 到/ 公有/ 云/ 或/ 私有/ 云/ 环境/ 中/ ./ 另一方面/ ,/ 随着/ Web2/ ./ 0/ 和/ 普适/ 计算/ 应用/ 的/ 流行/ ,/ 其/ “/ 瘦/ 客户端/ +/ 服务/ ”/ 的/ 运行/ 模式/ 对/ 服务器端/ 的/ 计算能力/ 和/ 数据处理/ 能力/ 要求/ 越来越/ 高/ ./ 在/ 这种/ 模式/ 下/ ,/ 用户/ 通过/ 浏览器/ 就/ 可/ 获得/ 各种各样/ 的/ 服务/ ,/ 所有/ 的/ 计算/ 都/ 交由/ 服务器端/ 执行/ ./ 为/ 支持/ 这些/ 应用/ ,/ 服务/ 系统/ 需要/ 存储/ 、/ 索引/ 和/ 备份/ 海量/ 的/ 异构/ 万维网/ 页面/ 、/ 用户/ 访问/ 日志/ 以及/ 用户/ 信息/ ,/ 并且/ 还要/ 保证/ 对/ 这些/ 数据/ 进行/ 快速/ 准确/ 的/ 访问/ [/ 2/ ]/ ./ 同时/ ,/ 服务/ 系统/ 所/ 要/ 处理/ 的/ 数据/ 不仅/ 包括/ 产品/ 和/ 客户/ 信息/ 等/ 结构化/ 数据/ ,/ 还/ 包含/ 大量/ 半/ 结构/ 和/ 非/ 结构化/ 数据/ ./ 在/ 上述/ 应用/ 需求/ 的/ 推动/ 下/ ,/ 云/ 数据/ 管理系统/ 应运而生/ ./ 目前/ ,/ 随着/ Google/ 、/ Yahoo/ !/ 、/ Facebook/ 等/ 企业/ 的/ 推动/ ,/ 出现/ 了/ 不少/ 基于/ 云/ 计算/ 平台/ 的/ 数据/ 管理系统/ ,/ 而且/ 大部分/ 系统/ 已经/ 投入/ 生产/ 环境/ 使用/ [/ 3/ -/ 4/ ]/ ./ 与/ 传统/ 数据库系统/ 相比/ ,/ 目前/ 云/ 数据/ 管理系统/ 提供/ 的/ 接口/ 有/ 很多/ 限制/ ,/ 只/ 提供/ 简单/ 的/ 数据/ 存取/ 接口/ 或者/ 极小/ 化/ 的/ 查询语言/ ,/ 这/ 增加/ 了/ 用户/ 使用/ 的/ 难度/ ,/ 也/ 增加/ 了/ 开发人员/ 的/ 负担/ ./ 同时/ ,/ 相比/ 于/ 传统/ 的/ 分布式/ 关系数据库/ ,/ 云/ 数据/ 管理系统/ 的/ 查询/ 性能/ 也/ 有/ 很大/ 的/ 提升/ 空间/ [/ 5/ -/ 6/ ]/ ./ 如何/ 在/ 现有/ 云/ 计算/ 平台/ 的/ 基础/ 上/ ,/ 完善/ 云/ 数据/ 管理系统/ 的/ 查询/ 功能/ 并/ 提高/ 其/ 数据处理/ 的/ 性能/ ,/ 是/ 目前/ 备受/ 关注/ 的/ 挑战性/ 问题/ ./ 本文/ 第/ 2/ 节对云/ 数据/ 查询/ 技术/ 进行/ 概述/ ;/ 第/ 3/ 节/ 提出/ 云/ 数据/ 管理系统/ 的/ 基本/ 框架/ 并/ 依据/ 该/ 框架/ 对云/ 数据/ 查询/ 的/ 关键性/ 技术/ 进行/ 总结/ 分析/ ;/ 第/ 4/ 和/ 第/ 5/ 节对/ 未来/ 工作/ 进行/ 展望/ 并/ 对/ 全文/ 工作/ 进行/ 总结/ ./ 2/ 云/ 数据/ 查询处理/ 概述/ 与/ 传统/ 关系数据库/ 中/ 的/ 数据/ 查询/ 相比/ ,/ 云/ 数据/ 管理系统/ 中/ 的/ 查询处理/ 特点/ 鲜明/ ./ 本节/ 阐述/ 云/ 数据/ 管理系统/ 的/ 应用/ 场景/ ,/ 结合/ 已有/ 的/ 云/ 数据/ 管理系统/ 和/ 相关/ 研究/ 工作/ ,/ 对云/ 环境/ 中/ 数据/ 的/ 特性/ 进行/ 了/ 分析/ ,/ 指出/ 云/ 数据/ 查询处理/ 技术/ 的/ 目标/ ,/ 并/ 总结/ 云/ 数据/ 管理系统/ 中/ 查询/ 技术/ 的/ 特征/ 与/ 面临/ 的/ 挑战/ ./ 2.1/ 云/ 数据/ 管理系统/ 的/ 应用/ 场景/ 与/ 传统/ 的/ 关系数据库/ 相比/ ,/ 云/ 数据/ 管理系统/ 具有/ 良好/ 的/ 扩展性/ 和/ 容错性/ ,/ 利用/ 云/ 计算/ 平台/ 中/ 大规模/ 计算资源/ 和/ 存储/ 资源管理/ 海量/ 异构/ 数据/ ,/ 为/ 用户/ 提供/ 高性价比/ 的/ 数据管理/ 方式/ ./ 目前/ 云/ 数据/ 管理系统/ 在/ 实际/ 生产/ 环境/ 中/ 得到/ 了/ 广泛/ 的/ 应用/ ,/ 主要/ 集中/ 在/ 两个/ 方面/ :/ 海量/ 数据分析/ 和/ 大规模/ Web/ 数据管理/ ./ 数据分析/ 主要/ 用于/ 生成/ 报表/ 、/ 数据挖掘/ 和/ 决策/ 支持/ 等/ ./ 与/ 事务/ 型/ 数据处理/ 不同/ ,/ 在/ 分析/ 型/ 的/ 数据处理/ 中/ ,/ 数据/ 是/ 一次/ 写/ 多次/ 读/ 的/ ,/ 更新/ 操作/ 较少/ ./ 数据分析/ 可以/ 在/ 并行/ 数据库/ 上/ 完成/ ,/ 但是/ 随着/ 数据/ 规模/ 的/ 扩大/ 以及/ 对/ 性能/ 要求/ 的/ 提高/ ,/ 并行/ 数据库系统/ 的/ 维护/ 需/ 耗费/ 大量/ 的/ 资金/ 及/ 人力/ ./ 云/ 数据/ 管理系统/ 在/ 扩展性/ 和/ 性价比/ 上均/ 占有/ 天然/ 的/ 优势/ ,/ 其中/ 类/ BigTable/ 系统/ [/ 7/ ]/ (/ BigTable/ 、/ HBase/ ②/ 、/ Hypertable/ ③/ )/ 、/ HadoopDB/ [/ 8/ ]/ 和/ Hive/ [/ 9/ ]/ 等/ 支持/ MapReduce/ 框架/ 的/ 系统/ 是/ 面向/ 数据分析/ 型/ 应用/ 的/ ./ 随着/ Web2/ ./ 0/ 技术/ 的/ 发展/ ,/ 超大规模/ 和/ 高/ 并发/ 的/ 社交/ 网站/ 逐渐/ 兴起/ ,/ 参与/ 人数/ 迅速/ 攀升/ ./ 以微博/ 网站/ Twitter/ 为例/ ,/ 2010/ 年/ 2/ 月/ 用户/ 每日/ 发送/ 的/ 微博/ 数量/ 是/ 5/ 千万/ ,/ 而/ 到/ 了/ 2011/ 年/ 3/ 月/ 用户/ 每日/ 发送/ 的/ 微博/ 数量/ 达到/ 1/ 亿/ 4/ 千万/ ④/ ,/ 用户/ 和/ 网站/ 交互/ 产生/ 大量/ 动态/ 信息/ ./ 这种/ 海量/ Web/ 数据管理/ 应用/ 要求/ 数据库/ 能够/ 满足/ 高/ 并发/ 的/ 数据/ 读写/ 和/ 高效/ 实时/ 的/ 数据/ 访问/ ,/ 同时/ 要求/ 数据库/ 具备/ 可扩展性/ 以/ 应付/ 数据/ 的/ 不断/ 快速增长/ ./ 关系数据库/ 在/ 这些/ 需求/ 面前/ 显得/ 力不从心/ ,/ 云/ 数据/ 管理系统/ 则/ 以/ 灵活/ 的/ 扩展性/ 和/ 高性能/ 的/ 数据/ 读写/ 受到/ Web2/ ./ 0/ 网站/ 的/ 青睐/ ,/ 其中/ Cassandra/ ⑤/ 、/ CouchDB/ ⑥/ 和/ PNUTS/ [/ 4/ ]/ 等/ 系统/ 广泛应用/ 在/ Face/ -/ book/ 、/ Twitter/ 和/ Yahoo/ !/ 等/ 大型/ 网站/ 中/ ./ 2.2/ 云/ 数据/ 的/ 特点/ 云/ 计算/ 将/ 大量/ 用/ 网络连接/ 的/ 计算资源/ 进行/ 统一/ 管理/ 和/ 调度/ ,/ 以/ 服务/ 的/ 方式/ 为/ 用户/ 提供/ 计算资源/ 、/ 存储资源/ 和/ 软硬件/ 资源/ ,/ 其/ 最/ 鲜明/ 的/ 特点/ 是/ 可扩展性/ 、/ 高可用性/ 和/ 按/ 需/ 服务性/ ./ 云/ 计算环境/ 中/ 存储/ 和/ 管理/ 的/ 数据/ 具备/ 如下/ 特点/ [/ 1/ ,/ 8/ ,/ 10/ -/ 11/ ]/ :/ (/ 1/ )/ 海量/ 性/ ./ 随着/ 移动/ 设备/ 的/ 普及/ 、/ 传感器/ 技术/ 的/ 发展/ 以及/ 社交/ 网络/ 的/ 扩大/ ,/ 云/ 计算/ 平台/ 存储/ 和/ 管/ ①/ ②/ ③/ ④/ ⑤/ ⑥/ Page3/ 理/ 的/ 数据量/ 十分/ 庞大/ ,/ TB/ 级别/ 和/ PB/ 级别/ 的/ 数据/ 规模/ 十分/ 常见/ ./ (/ 2/ )/ 种类/ 多样性/ ./ 随着/ Web2/ ./ 0/ 的/ 兴起/ ,/ 互联网/ 应用/ 不断/ 推陈出新/ ./ 一些/ 新兴/ 应用领域/ (/ 微博/ 、/ 社交/ 网络/ 等/ )/ 所/ 处理/ 的/ 数据/ 除了/ 传统/ 数据库/ 里/ 的/ 结构化/ 数据/ ,/ 还/ 包括/ 半/ 结构化/ 数据/ 和/ 非/ 结构化/ 数据/ ,/ 使得/ 云/ 计算/ 平台/ 中/ 的/ 数据/ 种类/ 纷繁/ 多样/ ./ (/ 3/ )/ 异地/ 备份/ ./ 数据/ 的/ 高可用性/ 是/ 云/ 计算/ 的/ 重要/ 特征/ 之一/ ,/ 而/ 这种/ 面临/ 软硬件/ 错误/ 的/ 高水平/ 容错性/ 是/ 通过/ 对/ 用户/ 透明/ 的/ 数据/ 异地/ 备份/ 实现/ 的/ ./ 云/ 数据/ 的/ 特征/ 导致/ 了/ 传统/ 的/ 关系数据库/ 无法/ 满足/ 其/ 多样化/ 的/ 应用/ 需求/ ./ 云/ 数据/ 管理系统/ 必须/ 提供/ 灵活/ 的/ 数据模型/ 以/ 有效/ 管理/ 多样化/ 的/ 数据/ ,/ 并/ 针对/ 数据分布/ 和/ 冗余/ 的/ 特性/ 设计/ 相应/ 的/ 存储/ 方式/ 和/ 查询/ 优化/ 策略/ ,/ 从而/ 向/ 用户/ 提供/ “/ 按/ 需所取/ ”/ 、/ 可靠/ 的/ 、/ 高性能/ 的/ 数据/ 存取/ 与/ 查询/ 服务/ ./ 2.3/ 云/ 数据/ 查询处理/ 的/ 目标/ 的/ 查询处理/ 技术/ 需要/ 达到/ 以下/ 目标/ [/ 1/ ,/ 11/ -/ 14/ ]/ :/ 为了/ 提供/ 高效/ 可靠/ 的/ 云/ 数据管理/ 服务/ ,/ 云/ 数据/ (/ 1/ )/ 可扩展性/ ./ 云/ 平台/ 的/ 规模/ 大小不一/ ,/ 小/ 的/ 私有/ 云/ 平台/ 规模/ 为/ 十几个/ 节点/ ,/ 大/ 的/ 公有/ 云/ 平台/ 规模/ 可/ 达到/ 几千个/ 节点/ ①/ [/ 15/ ]/ ./ 此外/ ,/ 云/ 计算/ 提供/ 的/ 是/ 一种/ “/ 按/ 需/ 计费/ ”/ 的/ 服务/ 方式/ ,/ 随着/ 应用/ 需求/ 的/ 变化/ ,/ 云/ 平台/ 的/ 规模/ 也/ 会/ 发生变化/ ./ 这/ 就/ 要求/ 云/ 数据/ 管理系统/ 中/ 的/ 查询处理/ 及/ 优化/ 算法/ 具备/ 良好/ 的/ 扩展性/ ,/ 不仅/ 能够/ 扩展/ 到/ 庞大/ 规模/ 的/ 云/ 平台/ 上/ ,/ 而且/ 能够/ 实现/ 资源/ 的/ 可/ 动态/ 增长/ 及其/ 带来/ 的/ 性能/ 提升/ ./ (/ 2/ )/ 可用性/ ./ 云/ 平台/ 由/ 大量/ 廉价/ 计算机/ 构成/ ,/ 与/ 高性能/ 服务器/ 构成/ 的/ 分布式系统/ 相比/ ,/ 云/ 平台/ 的/ 硬件/ 出错率/ 较/ 高/ ./ 云/ 数据/ 管理系统/ 需要/ 将/ 软硬件/ 错误/ 看成/ 系统/ 运行/ 的/ 常态/ ,/ 错误/ 发生/ 时/ 既/ 要/ 保证数据/ 不/ 丢失/ ,/ 又/ 要/ 保证数据/ 的/ 读写操作/ 能够/ 正常/ 进行/ ./ (/ 3/ )/ 在/ 异构/ 环境/ 运行/ 的/ 能力/ ./ 随着/ 应用/ 的/ 发展/ 以及/ 数据量/ 的/ 不断/ 增长/ ,/ 云/ 平台/ 势必/ 要/ 通过/ 增加/ 新/ 的/ 节点/ 来/ 提高/ 计算/ 和/ 存储/ 能力/ ./ 因此/ ,/ 保证/ 一个/ 云/ 平台/ 中/ 所有/ 节点/ 的/ 硬件/ 配置/ 同构/ 是/ 非常/ 困难/ 的/ ./ 即使/ 表/ 1/ 云/ 数据/ 管理系统/ 与/ 关系数据库/ 的/ 查询/ 技术/ 比较/ 数据类型/ 数据模型/ 服务/ 方式/ 支持/ 接口/ 查询/ 优化/ 技术/ 基于/ 键值/ 和/ 基于/ 规则/ 的/ 优化/ 技术/ ,/ 亟待/ 相关/ 研究成果/ 基于/ 规则/ 和/ 基于/ 代价/ 的/ 优化/ 技术/ ,/ 技术/ 比较/ 成熟/ 在/ 一个/ 硬件/ 配置/ 相同/ 的/ 环境/ 中/ ,/ 不同/ 节点/ 的/ 软硬件/ 性能/ 也/ 会/ 出现/ 波动/ [/ 16/ ]/ ./ 云/ 数据/ 的/ 查询/ 技术/ 要/ 有/ 在/ 异构/ 环境/ 运行/ 的/ 能力/ ,/ 从而/ 避免/ 性能/ 较差/ 的/ 节点/ 影响/ 整个/ 系统/ 的/ 运行/ 效率/ 这种/ “/ 木桶/ 效应/ ”/ 的/ 出现/ ./ (/ 4/ )/ 丰富/ 灵活/ 的/ 用户/ 接口/ ./ 一方面/ ,/ 云/ 数据/ 管理系统/ 要/ 提供/ SQL/ 接口/ ,/ 这样/ 习惯于/ 关系数据库/ 查询语言/ 的/ 用户/ 不必/ 重新学习/ 新/ 的/ 接口/ 或者/ 编程/ 方法/ ,/ 而/ 原来/ 基于/ 关系数据库/ 的/ 各种/ 应用/ 也/ 可以/ 平滑/ 的/ 转移/ 到/ 云上/ ;/ 另一方面/ ,/ 云/ 数据/ 管理系统/ 还要/ 提供/ UDF/ (/ UserDefinedFunction/ )/ 接口/ ,/ 用户/ 可以/ 根据/ 业务/ 需求/ 自己/ 定义数据/ 查询/ 操作/ ./ (/ 5/ )/ 高效/ 的/ 数据/ 存取/ 性能/ ./ 云/ 数据/ 管理系统/ 的/ 软硬件/ 成本/ 远远/ 低于/ 高性能/ 分布式/ 数据库/ ,/ 其/ 处理/ 海量/ 数据/ 的/ 效率/ 也/ 是/ 云/ 计算/ 用户/ 关注/ 的/ 重要/ 问题/ ./ 云/ 数据/ 管理系统/ 应当/ 针对/ 云/ 数据/ 的/ 特点/ 设计/ 数据分布/ 策略/ 和/ 查询/ 优化/ 相关/ 算法/ ,/ 从而/ 提高/ 其/ 管理/ 海量/ 数据/ 的/ 能力/ ./ 云/ 数据/ 管理系统/ 可以/ 通过/ 云/ 计算/ 平台/ 的/ 资源/ 虚拟/ 以及/ MapReduce/ [/ 15/ ]/ 框架/ 的/ 使用/ 而/ 得到/ 良好/ 的/ 扩展性/ 和/ 可用性/ ,/ 也/ 可以/ 在/ 并行/ 任务调度/ 过程/ 中/ 采取/ 投机/ 任务/ (/ speculativetask/ )/ [/ 16/ ]/ 等/ 措施/ 保证/ 其/ 在/ 异构/ 环境中运行/ 的/ 能力/ ./ 从/ 支持/ 的/ 查询/ 接口/ 看/ ,/ 目前/ 大部分/ 云/ 数据/ 管理系统/ 只/ 提供/ 了/ 简单/ 的/ 数据/ 存取/ 接口/ 或者/ 极小/ 化/ 的/ 查询语言/ ,/ 这/ 限制/ 了/ 其/ 对/ 复杂/ 数据/ 查询/ 和/ 分析/ 的/ 支持/ ./ 从/ 查询/ 性能/ 来看/ ,/ 目前/ 云/ 数据/ 管理系统/ 的/ 查询/ 优化/ 主要/ 针对/ 键值/ 进行/ ,/ 而/ 对/ 非/ 键值/ 的/ 查询/ 主要/ 是/ 依靠/ 批量/ 的/ 全表/ 扫描/ ./ 因此/ ,/ 用户/ 接口/ 和/ 查询/ 性能/ 是/ 目前/ 云/ 数据/ 管理系统/ 亟待/ 提高/ 的/ 两个/ 方面/ ./ 2.4/ 云/ 数据/ 管理系统/ 中/ 查询处理/ 的/ 特征/ 传统/ 关系数据库/ 中/ 的/ 查询/ 技术/ 无法/ 同时/ 满足/ 上/ 节/ 提到/ 的/ 目标/ ,/ 特别/ 是/ 可扩展性/ 和/ 可用性/ ./ 现有/ 的/ 云/ 数据/ 管理系统/ 的/ 查询/ 技术/ 和/ 传统/ 关系/ 数据库系统/ 的/ 查询/ 技术/ 在/ 处理/ 的/ 数据类型/ 、/ 容错性/ 和/ 支持/ 接口/ 等/ 方面/ 表现/ 出/ 明显/ 差异/ ,/ 表/ 1/ 从/ 多个/ 方面/ 对/ 二者/ 进行/ 了/ 对比/ ./ ①/ http/ :/ // // hadoop/ ./ apache/ ./ org/ // Page4/ 传统/ 关系数据库/ 的/ 查询/ 主要/ 面向/ 结构化/ 数据/ ,/ 其/ 数据模型/ 基于/ 关系/ 模型/ ./ 云/ 数据/ 管理系统/ 处理/ 的/ 数据/ 对象/ 除了/ 结构化/ 数据/ ,/ 还/ 包括/ 半/ 结构化/ 和/ 非/ 结构化/ 数据/ ,/ 其/ 数据模型/ 包括/ key/ -/ value/ 模型/ 、/ 文档/ 模型/ 和/ 简化/ 的/ 关系/ 模型/ [/ 3/ -/ 4/ ,/ 9/ ]/ ./ 之所以/ 称其为/ 简化/ 的/ 数据模型/ 是因为/ 它/ 虽然/ 以表/ 的/ 形式/ 管理/ 数据/ ,/ 但/ 不/ 提供/ 实体/ 完整性/ 和/ 参照/ 完整性/ ./ 除此以外/ ,/ 关系数据库/ 的/ 数据模型/ 是/ 一种/ 模式/ 优先/ (/ schema/ -/ first/ )/ 的/ 逻辑/ 结构/ ,/ 即/ 在/ 数据/ 入库/ 之前/ 设计/ 好/ 数据/ 模式/ ./ 而云/ 数据/ 管理系统/ 中/ 的/ 数据模型/ 是从/ 数据/ 到/ 模式/ (/ from/ -/ data/ -/ to/ -/ schema/ )/ 数据/ 模式/ 可以/ 是/ 松散/ 的/ 、/ 滞后/ 的/ ,/ 可以/ 在/ 数据/ 入库/ 时/ 根据/ 数据/ 内容/ 定义数据/ 模式/ ./ 查询/ 容错/ 是/ 指/ 一个/ 查询/ 运行/ 过程/ 中/ 出现/ 了/ 硬件/ 错误/ ,/ 该/ 查询/ 不必/ 重新/ 开始/ ./ 传统/ 的/ 关系/ 数据库系统/ 一般/ 不/ 保证/ 查询/ 容错/ ./ 云/ 数据/ 管理系统/ 把/ 硬件/ 错误/ 看成/ 一种/ 常态/ ,/ 它/ 同时/ 保证数据/ 容错/ 和/ 查询/ 容错/ ./ 因为/ 云/ 平台/ 上/ 硬件/ 错误率/ 较/ 高/ ,/ 如果/ 每次/ 出现/ 错误/ 都/ 需要/ 重启/ 查询/ ,/ 那么/ 一个/ 耗时/ 较长/ 的/ 查询/ 很/ 可能/ 无法/ 完成/ ./ 从/ 服务/ 方式/ 来看/ ,/ 传统/ 关系数据库/ 是/ 一种/ pay/ -/ before/ -/ you/ -/ go/ 的/ 方式/ ,/ 即/ 通过/ 需求/ 分析/ 设计/ 数据库/ 模式/ 并/ 构建/ 数据库/ 软硬件/ ,/ 并/ 在/ 较长时间/ 内/ 保持/ 相对/ 稳定/ ,/ 因此/ 查询/ 优化/ 的/ 目标/ 是/ 在/ 已有/ 的/ 软硬件/ 环境/ 下/ 获得/ 最好/ 的/ 查询/ 性能/ ./ 而云/ 数据/ 管理系统/ 是/ 一种/ pay/ -/ as/ -/ you/ -/ go/ 的/ 方式/ ,/ 用户/ 根据/ 使用/ 的/ 计算资源/ 和/ 存储资源/ 向/ 服务提供商/ 付费/ ,/ 因而/ 查询/ 优化/ 的/ 目标/ 是/ 如何/ 利用/ 更少/ 的/ 计算资源/ 获得/ 用户/ 期望/ 的/ 查询/ 性能/ ./ 从/ 查询/ 接口/ 和/ 查询/ 优化/ 技术/ 来看/ ,/ 关系数据库/ 支持/ 复杂/ 的/ SQL/ 语言/ ,/ 而且/ 查询/ 优化/ 技术/ 也/ 非常/ 成熟/ ./ 相比之下/ ,/ 现有/ 的/ 云/ 数据/ 管理系统/ 支持/ 的/ 查询语言/ 比较/ 匮乏/ ,/ 而且/ 已有/ 的/ 查询/ 优化/ 技术/ 主要/ 集中/ 在/ 基于/ 规则/ 的/ 优化/ ,/ 因此/ 在/ 这/ 两个/ 方面/ 亟待/ 加强/ ./ 3/ 云/ 数据/ 管理系统/ 中/ 查询/ 技术/ 研究/ 作为/ 一种/ 新型/ 数据管理/ 技术/ ,/ 云/ 数据/ 管理系统/ 的/ 研究/ 仍/ 处于/ 起步/ 阶段/ ./ 这种/ 新兴/ 的/ 数据管理/ 技术/ 可以/ 扩展/ 到/ 大量/ 廉价/ 节点/ 上/ ,/ 为/ 用户/ 提供/ 按/ 需所取/ 、/ 高性价比/ 的/ 数据管理/ 服务/ ./ 本节/ 首先/ 提出/ 云/ 数据/ 管理系统/ 的/ 整体/ 框架/ ,/ 然后/ 从/ 数据/ 存储/ 与/ 索引/ 技术/ 、/ 查询处理/ 及/ 优化/ 、/ 在线/ 聚集/ 几个/ 方面/ 对云/ 数据/ 查询/ 相关/ 工作/ 和/ 研究成果/ 进行/ 分析/ 总结/ ./ 3.1/ 云/ 数据/ 管理系统/ 基本/ 框架/ 为了/ 有效/ 管理/ 海量/ 、/ 种类/ 多样/ 的/ 云/ 数据/ ,/ 并/ 提供/ “/ 按/ 需所取/ ”/ 的/ 云/ 服务/ ,/ 云/ 数据/ 管理系统/ 必须/ 具有/ 可扩展性/ 、/ 可/ 裁剪/ 性/ 、/ 可用性/ 以及/ 在/ 异构/ 环境中运行/ 的/ 能力/ ./ 这/ 使得/ 云/ 数据/ 管理系统/ 在/ 面临/ 查询处理/ 、/ 查询/ 优化/ 和/ 索引/ 管理/ 等/ 问题/ 时/ 采用/ 不同于/ 传统/ 数据库/ 的/ 全新/ 解决/ 方法/ ./ 同时/ ,/ 一些/ 在/ 传统/ 数据库/ 中/ 提出/ 但是/ 没有/ 得到/ 广泛应用/ 的/ 研究/ 问题/ 在/ 云/ 环境/ 下/ 显现出/ 重要/ 的/ 意义/ ,/ 例如/ 查询/ 进程/ 估计/ 和/ 在线/ 聚集/ 等/ ./ 目前/ 已有/ 的/ 数据/ 管理系统/ 大都/ 面向/ 某/ 一类/ 特定/ 应用/ ,/ 因此/ 系统/ 架构/ 和/ 实现/ 方式/ 各有不同/ ./ 我们/ 结合/ 云/ 计算/ 中/ 数据管理/ 应用/ 的/ 特点/ 以及/ 数据/ 查询处理/ 的/ 目标/ ,/ 提出/ 了/ 云/ 数据/ 管理系统/ 的/ 整体/ 架构/ ,/ 如图/ 1/ 所示/ ,/ 该/ 架构/ 被/ 划分/ 为/ 5/ 个/ 部分/ ./ (/ 1/ )/ 应用/ 接口/ 层/ ./ 负责/ 接收/ 用户/ 提交/ 的/ 请求/ 并/ 交给/ 查询处理/ 层/ 相应/ 的/ 模块/ 进行/ 处理/ ./ 提供/ 查询语言/ 接口/ 、/ 用户/ 自定义/ 接口/ UDF/ (/ key/ // value/ 操作/ )/ 、/ 数据分析/ 和/ 在线/ 聚集/ 等/ 应用/ ./ 用户/ 不仅/ 可以/ 通过/ 查询/ 接口/ 和/ UDF/ 接口/ 进行/ 数据/ 操作/ ,/ 还/ 可以/ 通过/ 可视化/ 工具/ 执行/ 数据分析/ 和/ 在线/ 聚集/ ./ (/ 2/ )/ 查询处理/ 层/ ./ 对/ 上层/ 提交/ 的/ 查询/ 语句/ 进行/ 解析/ 和/ 逻辑/ 优化/ 后/ 转化成/ 操作符/ 树/ ,/ 进而/ 生成/ MapReduce/ 执行/ 计划/ ;/ 如果/ 上层/ 提交/ 的/ 是/ 用户/ 自定义/ 操作/ ,/ 则/ 直接/ 生成/ MapReduce/ 执行/ 计划/ ./ 如何/ 根据/ 查询/ 类型/ 和/ 数据分布/ 等/ 信息/ 生成/ 合适/ 的/ 查询/ 计划/ ,/ 以及/ 如何/ 利用/ 云/ 数据/ 的/ 特点/ 对/ 查询/ 计划/ 进行/ 逻辑/ 优化/ 是/ 查询处理/ 层/ 的/ 主要/ 任务/ ,/ 也/ 是/ 云/ 数据管理/ 领域/ 备受/ 关注/ 的/ 研究/ 问题/ ./ (/ 3/ )/ 数据/ 控制/ 层/ ./ 该层/ 主要/ 负责/ 3/ 个/ 方面/ 的/ 工作/ :/ 利用/ 全局/ 索引/ 和/ 元/ 数据/ 信息/ 进行/ 数据/ 定位/ ;/ 备份/ 数据/ 的/ 一致性/ 处理/ 和/ 数据/ 迁移/ ;/ 在线/ 聚集/ 过程/ 中/ 进行/ 数据/ 采样/ 和/ 进程/ 估计/ ./ 数据/ 层/ 涉及/ 到/ 查询/ 执行/ 和/ 在线/ 聚集/ 的/ 核心/ 部分/ ,/ 目前/ 的/ 研究/ 工作/ 主要/ 围绕/ 查询处理/ 优化/ 、/ 索引/ 构建/ 、/ 数据/ 采样/ 和/ 查询/ 结果/ 估计/ ./ (/ 4/ )/ 数据/ 存储/ 层/ ./ 负责/ 数据/ 的/ 实际/ 存储/ 以及/ 在/ 各/ 节点/ 范围/ 内/ 数据/ 的/ 索引/ 设计/ 、/ 缓冲区/ 管理/ 和/ 日志/ 管理/ ./ 存储/ 层/ 的/ 节点/ 可/ 通过/ 多种/ 方式/ 组织/ ,/ 例如/ 主/ -/ 从/ 结构/ 或者/ 点对点/ 结构/ 等/ ,/ 主要/ 通过/ 不同/ 的/ 通信协议/ 体现/ ./ 无论/ 采用/ 哪/ 种/ 结构/ ,/ 数据/ 都/ 被/ 分区/ 到/ 多个/ 节点/ 存储/ ./ 如何/ 在/ 保证/ 数据分布/ 均衡/ 的/ 情况/ 下/ 提高/ 每个/ 节点/ 上/ 数据/ 存取/ 的/ 效率/ 是/ 存储/ 层/ 必须/ 解决/ 的/ 问题/ ./ (/ 5/ )/ 服务/ 管理/ 模块/ ./ 负责/ 元/ 数据/ 的/ 管理/ 、/ 操作/ 管理/ 和/ 系统监控/ ./ 元/ 数据管理/ 部分/ 为/ 查询处理/ 层/ 提供/ 访问/ 接口/ ,/ 同时/ 保证/ 元/ 数据/ 与/ 数据/ 模式/ 之间/ 的/ 一致性/ ./ 操作/ 管理/ 主要/ 面向/ 数据/ 控制/ 层/ ,/ 包括/ 数据/ 读写/ 锁/ 机制/ 、/ 容错/ 机制/ 以及/ 负载/ 均衡/ ./ 系统监控/ 模块/ 从/ 数据/ Page5/ 图/ 1/ 云/ 数据/ 管理系统/ 框架/ 存储/ 层/ 收集/ 监控/ 信息/ ,/ 并/ 通过/ 图形界面/ 将/ 其/ 展示/ 给/ 用户/ ./ 资源分配/ 模块/ 负责/ 管理系统/ 中/ 的/ 负载/ ,/ 节点/ 能够/ 被/ 动态/ 地/ 添加/ 或/ 删除/ 以/ 适应/ 工作/ 负载/ 的/ 变化/ ./ 3.2/ 云/ 数据/ 管理系统/ 关键技术/ 研究/ 依据/ 云/ 数据/ 管理系统/ 的/ 整体/ 框架/ ,/ 可以/ 看出/ 云/ 数据/ 的/ 查询/ 领域/ 存在/ 许多/ 研究/ 问题/ :/ 数据/ 存储/ 与/ 索引/ 设计/ 、/ 基于/ MapReduce/ 的/ 查询处理/ 、/ 查询/ 优化/ 、/ 在线/ 聚集/ 过程/ 中/ 的/ 数据/ 采样/ 与/ 置信区间/ 计算/ 等/ ./ 目前/ 索引/ 管理/ 、/ 查询处理/ 、/ 查询/ 优化/ 以及/ 在线/ 聚集/ 等/ 问题/ 已经/ 得到/ 了/ 初步/ 的/ 研究/ ,/ 本节/ 对/ 目前/ 已有/ 的/ 相关/ 工作/ 进行/ 分析/ 总结/ ./ 3.2/ ./ 1/ 索引/ 技术/ 现有/ 的/ 云/ 数据/ 管理系统/ 大都/ 以/ key/ -/ value/ 方式/ 存储/ 数据/ ,/ 能够/ 提供/ 基于/ 键值/ 的/ 快速/ 查询/ ,/ 但是/ 对于/ 非/ 键值/ 的/ 查询/ 只能/ 通过/ 全表/ 扫描/ 来/ 完成/ ./ 尽管/ 可以/ 通过/ MapReduce/ 实现/ 并发/ 扫描/ ,/ 但是/ 面对/ 海量/ 数据/ ,/ 对于/ 选择/ 度/ 比较/ 高/ 的/ 查询/ 来说/ ,/ 全表/ 扫描/ 的/ 效率/ 仍然/ 比较/ 低/ ./ 目前/ 很多/ 学者/ 对云/ 数据/ 管理系统/ 中/ 的/ 索引/ 技术/ 进行/ 了/ 研究/ ./ 根据/ 索引/ 的/ 实现/ 方式/ ,/ 本文/ 把/ 已有/ 的/ 索引/ 分成/ 3/ 类/ :/ 双层/ 索引/ [/ 17/ -/ 21/ ]/ 、/ 二级/ 索引/ ①/ ②/ [/ 22/ ]/ 和/ 基于/ 线性化/ 技术/ 的/ 全局/ 索引/ [/ 23/ ]/ ./ (/ 1/ )/ 双层/ 索引/ 云/ 数据/ 管理系统/ 中/ 的/ 双层/ 索引/ 框架/ 由/ Wu/ 等/ 人/ [/ 17/ ]/ 在/ 2009/ 年/ 提出/ ,/ 后续/ 双层/ 索引/ 方案/ 的/ 研究/ 工作/ 大都/ 基于/ 该/ 框架/ ,/ 其/ 结构/ 如图/ 2/ 所示/ ./ 索引/ 由/ 局部/ 索引/ 和/ 全局/ 索引/ 两/ 部分/ 构成/ ./ 为/ 每个/ 节点/ 的/ 数据/ 建立/ 局部/ 索引/ ,/ 该/ 索引/ 只/ 负责/ 本地/ 节点/ 上/ 的/ 数据/ ./ 除/ 局部/ 索引/ 外/ ,/ 每个/ 计算/ 节点/ 还要/ 共享/ 一部分/ 存储空间/ 来/ 存储/ 全局/ 索引/ ./ 全局/ 索引/ 依据/ 局部/ 索引/ 构建/ ,/ 由于/ ①/ ②/ Page6/ 存储空间/ 的/ 限制/ 和/ 查询/ 效率/ 的/ 要求/ ,/ 并/ 不是/ 所有/ 的/ 局部/ 索引/ 都/ 发布/ 到/ 全局/ 索引/ 中/ ,/ 而是/ 按照/ 一定/ 的/ 规则/ 对/ 索引/ 节点/ 进行/ 选择/ ./ 根据/ 全局/ 索引/ 的/ 组织/ 方式/ ,/ 双层/ 索引/ 可以/ 分成/ 两类/ :/ P2P/ 结构/ 的/ 双层/ 索引/ 和/ 集中式/ 结构/ 的/ 双层/ 索引/ ./ 如表/ 2/ 所示/ ,/ 前/ 3/ 种/ 方案/ 的/ 全局/ 索引/ 均/ 采用/ P2P/ 结构/ 的/ 覆盖/ 网络/ [/ 17/ -/ 19/ ]/ ,/ 这种/ 方式/ 易于/ 实现/ 可扩展性/ ,/ 使/ 系统/ 能够/ 同时/ 支持/ 大规模/ 的/ 查询/ ./ 但是/ 也/ 存在/ 一些/ 不足/ :/ 首先/ ,/ 维护/ P2P/ 网络/ 需要/ 一定/ 的/ 代价/ ,/ 查询/ 时/ 往往/ 需要/ 较/ 高/ 的/ 网络/ 传输/ 代价/ ;/ 其次/ ,/ 对于/ 主从/ 结构/ (/ master/ -/ slave/ )/ 的/ 云/ 数据/ 管理系统/ ,/ 实现/ 这种/ 索引/ 要/ 重新/ 构建/ 一个/ P2P/ 网络/ ,/ 会/ 增加/ 原有/ 系统/ 的/ 负担/ ./ 基于/ 上述/ 原因/ ,/ 文献/ [/ 20/ -/ 21/ ]/ 在/ 全局/ 索引/ 中/ 采用/ 表/ 2/ 云/ 数据管理/ 索引/ 技术/ 对比/ 索引/ 构成/ 索引/ 方案/ 双层/ 索引/ 二级/ 索引/ 基于/ 线性化/ 技术/ 的/ 全局/ 索引/ MD/ -/ HBase/ [/ 33/ ]/ 索引/ 项/ 内容/ :/ 最长/ 公共/ 前缀/ +/ Z/ -/ value/ 值/ (/ 2/ )/ 二级/ 索引/ 二级/ 索引/ (/ secondaryindex/ )/ 方案/ 主要/ 应用/ 于/ key/ -/ value/ 存储/ 的/ 云/ 数据库/ 管理系统/ 中/ ,/ 如/ Bigtbale/ 、/ HBase/ 等/ ./ 在/ 这类/ 系统/ 中/ ,/ 针对/ 非/ 键值/ 列/ 的/ 二级/ 索引/ 通过/ 为/ 索引/ 列/ 构建/ 索引/ 表/ 实现/ ./ 索引/ 表中/ 的/ 键值/ 由原/ 数据表/ 中/ 键值/ 和/ 索引/ 列/ 的/ 组合/ 构成/ ,/ 实现/ 索引/ 列/ 与/ 原有/ 键值/ 的/ 映射/ ./ 查询/ 过程/ 中/ ,/ 首先/ 根据/ 查询/ 条件/ 在/ 索引/ 表/ 找到/ 相应/ 键值/ 的/ 列表/ ,/ 然后/ 根据/ 这些/ 键值/ 到/ 原/ 数据表/ 中/ 定位/ 所/ 需/ 数据/ ./ 目前/ 基于/ 二级/ 索引/ 的/ 实现/ 方案/ 主要/ 有/ ITHBase/ ①/ 、/ IHBase/ ②/ 和/ CCIndex/ [/ 22/ ]/ ./ 其中/ ITHBase/ 和/ IHBase/ 均/ 是/ 开源/ 的/ 实现/ 方案/ ,/ 二者/ 实现/ 方式/ 相似/ ,/ 都/ 从/ HBase/ 源码/ 级别/ 进行/ 扩展/ ,/ 重新/ 定义/ 和/ 实现/ 了/ 客户端/ 和/ 服务端/ 的/ 处理/ 逻辑/ ,/ 具有/ 强/ 侵入/ 性/ ./ 与/ IHBase/ 相比/ ,/ ITHbase/ 更/ 关注/ 数据/ 一致性/ ,/ 其/ 重要/ 特性/ 之一/ 是/ 事务性/ ./ ITHBase/ 和/ IHBase/ 两种/ 方案/ 中/ 的/ 索引/ 表仅/ 存放/ 索引/ 列/ 与/ 原表/ 的/ 键值/ 信息/ ./ 在/ 查询/ 过程/ 中/ ,/ 先/ 通过/ 查询/ 索引/ 表/ 得到/ 键值/ ,/ 再/ 根据/ 键值/ 到/ 原表/ 查找/ 数据/ ./ 由于/ 得到/ 的/ 键值/ 大都/ 是/ 随机/ 的/ ,/ 所以/ 需要/ 进行/ 大量/ 的/ 随机/ 查找/ 才能/ 得到/ 最终/ 的/ 查询/ 结果/ ,/ 效率/ 较/ 低/ ./ 为了/ 减少/ 随机/ 查询/ 带来/ 的/ 开销/ ,/ Zou/ 等/ 人/ 提出/ 了/ 另外/ 了/ 集中式/ 的/ 索引/ 方式/ ./ EMINC/ [/ 20/ ]/ 在/ 每个/ 节点/ 建立/ KD/ 树/ 作为/ 局部/ 索引/ ,/ 其中/ 每个/ 索引/ 节点/ 被/ 看成/ 一个/ 多维度/ 的/ 立方体/ ,/ 全局/ 索引/ 利用/ R/ 树对/ 这些/ 立方体/ 进行/ 索引/ ./ 当/ 索引/ 维度/ 比较/ 高/ ,/ 或者/ 索引/ 数据量/ 比较/ 大时/ ,/ R/ 树/ 各个/ 节点/ 之间/ 的/ 重叠/ 部分/ 较/ 多/ ,/ 查询/ 时会/ 产生/ 大量/ 的/ 误判/ (/ falsepositive/ )/ 结果/ ./ 为/ 解决/ 这一/ 问题/ ,/ 文献/ [/ 21/ ]/ 的/ 全局/ 索引/ 采用/ 带/ bloomfilter/ 的/ R/ 树/ ./ 进行/ 查询/ 时/ ,/ 首先/ 通过/ bloomfilter/ 来/ 验证/ ,/ 如果/ 查询/ 点/ 不/ 在/ 其中/ ,/ 则/ 不再/ 进行/ R/ 树/ 查询/ ./ 这样/ 减少/ 了/ 误判/ 的/ 几率/ ,/ 从而/ 提高/ 查询/ 效率/ ./ 上述/ 各种/ 索引/ 技术/ 方案/ 具有/ 较/ 好/ 的/ 扩展性/ ,/ 但/ 总的来说/ 实现/ 过程/ 比较复杂/ ,/ 索引/ 更新/ 维护/ 的/ 代价/ 比较/ 高/ ./ 特别/ 是/ 对于/ 数据/ 更新/ 比较/ 频繁/ 的/ 应用/ ,/ 对系统/ 性能/ 的/ 影响/ 较大/ ./ 一种/ 二级/ 索引/ 方案/ :/ 互补/ 聚簇式/ 索引/ (/ ComplementalClusteringIndex/ )/ ,/ 简称/ CCIndex/ [/ 22/ ]/ ./ CCIndex/ 把/ 数据/ 的/ 详细信息/ 也/ 存放/ 在/ 索引/ 表中/ ,/ 查询/ 时/ 可以/ 直接/ 在/ 索引/ 表中/ 通过/ 顺序/ 扫描/ 找到/ 相应/ 的/ 数据/ ,/ 从而/ 大大减少/ 查询/ 时间/ ./ 然而/ 把/ 详细信息/ 存储/ 在/ 索引/ 表中会/ 造成/ 存储空间/ 的/ 增加/ ./ 为了/ 尽可能/ 地/ 减少/ 存储空间/ 的/ 开销/ ,/ 作者/ 把/ HDFS/ 文件/ 块/ 备份/ 数设/ 为/ 1/ 来/ 保证/ 存储空间/ 不会/ 增加/ 太/ 多/ ,/ 但/ 同时/ 数据/ 的/ 容错性/ 又/ 成/ 了/ 新/ 的/ 问题/ ./ 为了/ 解决/ 这一/ 问题/ ,/ 作者/ 创建/ 了/ 聚簇/ 检验/ 表/ (/ clusteringchecktable/ )/ ,/ 和/ 索引/ 表一/ 起来/ 实现/ 错误/ 发生/ 后/ 的/ 快速/ 恢复/ ./ 同时/ ,/ CCIndex/ 还/ 给出/ 了/ 一种/ 查询/ 优化/ 机制/ 以/ 支持/ 多维/ 查询/ ./ 该/ 优化/ 机制/ 主要/ 利用/ HBase/ 中/ 的/ 一些/ 元/ 数据/ 信息/ (/ region/ -/ to/ -/ serverinformation/ )/ 来/ 估算/ 子/ 查询/ 结果/ 的/ 大小/ ,/ 根据/ 估算/ 结果/ 生成/ 合适/ 的/ 查询/ 计划/ ,/ 从而/ 减少/ 查询/ 时间/ ./ 二级/ 索引/ 方案/ 易于/ 实现/ ,/ 维护/ 代价/ 较/ 低/ ,/ 但/ 也/ 存在/ 一些/ 不足/ :/ 当/ 索引/ 列较/ 多时/ ,/ 存储/ 开销/ 比较/ 大/ ;/ 索引/ 更新/ 代价/ 比较/ 高/ ,/ 会/ 影响/ 系统/ 的/ 吞吐量/ ;/ 索引/ 对/ 多/ ①/ ②/ Page7/ 维/ 查询/ 的/ 支持/ 效率/ 较/ 低/ ./ (/ 3/ )/ 基于/ 线性化/ 技术/ 的/ 全局/ 索引/ 上述/ 两类/ 索引/ 方案/ 均/ 需/ 维护/ 特定/ 的/ 索引/ 结构/ ,/ 当/ 数据/ 更新/ 十分/ 频繁/ 时/ ,/ 索引/ 更新/ 维护/ 的/ 代价/ 很/ 高/ ./ 在/ 保证系统/ 性能/ 的/ 前提/ 下/ ,/ 为/ 降低/ 索引/ 更新/ 维护/ 的/ 代价/ ,/ 文献/ [/ 23/ ]/ 提出/ 了/ 一种/ 基于/ 空间/ 目标/ 排序/ 的/ 索引/ 方案/ ./ 其/ 基本/ 思想/ 是/ :/ 按照/ 一定/ 的/ 规则/ 将/ 覆盖/ 整个/ 研究/ 区域/ 的/ 范围/ 划分/ 为/ 大小/ 相等/ 的/ 格子/ ,/ 并/ 给/ 每/ 一个/ 格子/ 分配/ 相应/ 的/ 编号/ ,/ 用/ 这些/ 编号/ 为/ 空间/ 目标/ 生成/ 一组/ 具有/ 代表/ 意义/ 的/ 数字/ ./ 其/ 思想/ 是/ 将/ k/ 维空间/ 的/ 实体/ 映射/ 到/ 一/ 维空间/ ,/ 从而/ 可以/ 利用/ 比较/ 成熟/ 的/ 一维/ 索引/ 技术/ ./ 常见/ 的/ 用/ 一维/ 数值/ 对/ 多维/ 空间/ 目标/ 进行/ 排序/ 的/ 方法/ 有/ Z/ 排序/ 、/ Hilber/ 曲线/ 、/ 位置/ 键/ 等/ ./ 这些/ 技术/ 的/ 思路/ 基本相同/ ,/ 利用/ 一个/ 线性/ 序列/ 来/ 填充/ 空间/ ,/ 构造/ 一种/ 空间/ 填充/ 曲线/ ./ 文献/ [/ 23/ ]/ 以/ HBase/ 作为/ 数据/ 存储/ 方案/ ,/ 用/ Z/ 排序/ 技术/ 对/ 数据/ 进行/ 排序/ ,/ 以/ Z/ -/ value/ 作为/ 每条/ 记录/ 的/ 键值/ ./ 单纯/ 的/ Z/ 排序/ 方法/ 在/ 搜索/ 过程/ 中/ 会/ 带来/ 一些/ 不必要/ 的/ 搜索/ 空间/ (/ falsepositivesearch/ )/ ,/ 作者/ 在/ 此基础/ 上/ 利用/ KD/ 树/ 或/ 四叉树/ 对/ 多维/ 数据/ 空间/ 进行/ 划分/ ,/ 根据/ 最长/ 公共/ 前缀/ 计算/ 每个/ 子/ 空间/ 的/ 名称/ ,/ 并/ 以此/ 作为/ 索引/ 项对/ 各个/ 子/ 空间/ 的/ 数据/ 进行/ 索引/ ,/ 从而/ 提高/ 搜索/ 效率/ ./ 但是/ ,/ 该/ 方法/ 在/ 进行/ 空间/ 划分/ 的/ 过程/ 中/ 会/ 产生/ 数据/ 一致性/ 的/ 问题/ ./ 虽然/ 目前/ 有/ 相应/ 的/ 解决方案/ [/ 24/ ]/ ,/ 但是/ 实现/ 起来/ 仍/ 比较复杂/ ,/ 并且/ 带来/ 额外/ 的/ 负担/ ./ 而且/ 当/ 数据分布/ 不/ 均匀/ 时/ ,/ KD/ 树/ 和/ 四叉树/ 的/ 深度/ 会/ 很大/ ,/ 影响/ 查询/ 效率/ ./ 表/ 3/ 基于/ 原始/ MapReduce/ 的/ 连接/ 算法/ 对比/ 算法/ 名称/ 支持/ 的/ 连接/ 类型/ 标准/ 重/ 分区/ 算法/ [/ 9/ ,/ 25/ ,/ 28/ -/ 29/ ]/ 两表/ 等值/ 连接/ 改进/ 的/ 标准/ 重/ 分区/ 算法/ [/ 29/ ]/ 两表/ 等值/ 连接/ 算法/ [/ 9/ ,/ 25/ ,/ 28/ -/ 29/ ]/ 两表/ 等值/ 连接/ s/ ×/ |/ R/ |/ (/ s/ 为/ S/ 表/ 数据/ 所在/ 节点/ 个数/ )/ 1/ 广播/ 半/ 连接/ 算法/ [/ 29/ ]/ 两表/ 等值/ 连接/ l/ ×/ |/ Rs/ |/ (/ Rs/ 为/ 利用/ S/ 表/ 过滤/ 后/ 的/ 数据/ )/ 3/ 分片/ 半/ 连接/ 算法/ [/ 29/ ]/ 两表/ 等值/ 连接/ 冗余/ 重/ 分区/ 算法/ [/ 30/ ]/ 两表/ θ/ 连接/ 最大值/ 为/ 4r/ |/ R/ |/ |/ S/ |/ // 槡/ r/ (/ r/ 为/ reducer/ 数据/ 冗余/ 传输/ 算法/ [/ 31/ ]/ 基于/ 二部/ 图/ 连接/ 算法/ [/ 32/ ]/ 基于/ 前缀/ 过滤/ 的/ 算法/ [/ 33/ ]/ 3.2/ ./ 2/ 查询处理/ 从/ 支持/ 的/ 查询/ 接口/ 和/ 查询语言/ 来看/ ,/ 早期/ 的/ 云/ 数据/ 管理系统/ ,/ 例如/ BigTable/ 、/ HBase/ 和/ Cassandra/ 仅/ 支持/ 一些/ 基本/ 的/ 数据/ 插入/ 和/ 获取/ 接口/ [/ 3/ ,/ 10/ ]/ ./ 随后/ 很多/ 公司/ 和/ 研究/ 机构/ 在/ 丰富/ 查询/ 语句/ 上/ 开展/ 了/ 工作/ 并/ 提出/ 一些/ “/ 类/ -/ SQL/ 语言/ ”/ ,/ 例如/ Yahoo/ !/ 的/ PigLatin/ [/ 25/ ]/ ,/ Facebook/ 的/ HQL/ [/ 9/ ]/ ,/ 微软/ 的/ SCOPE/ [/ 26/ ]/ 和/ Dryad/ -/ LINQ/ [/ 27/ ]/ 以及/ IBM/ 的/ JAQL/ [/ 28/ ]/ 等等/ ./ 从/ 查询处理/ 算法/ 来看/ ,/ 目前/ 针对/ 云/ 数据/ 的/ 查询处理/ 和/ 优化/ 主要/ 集中/ 在/ 基于/ MapReduce/ 框架/ 的/ 查询处理/ ./ MapReduce/ 天然/ 地/ 支持/ 分组/ 聚集/ 操作/ 和/ 选择/ 操作/ ,/ 而/ 连接/ 操作/ 的/ 实现/ 则/ 比较复杂/ ./ 在/ 分布式/ 环境/ 下/ 数据传输/ 和/ 数据/ 倾斜/ 等/ 问题/ 的/ 出现/ 使得/ 在/ MapReduce/ 上/ 实现/ 连接/ 成为/ 一个/ 非常/ 具有/ 挑战性/ 的/ 问题/ ,/ 下面/ 主要/ 对云/ 数据/ 的/ 连接/ 查询/ 工作/ 进行/ 深入/ 的/ 总结/ 分析/ ./ 已有/ 的/ 相关/ 工作/ 主要/ 分为/ 两类/ ,/ 一类/ 是/ 直接/ 在/ MapReduce/ 上/ 实现/ 连接/ [/ 9/ ,/ 25/ ,/ 28/ -/ 33/ ]/ ,/ 一类/ 是/ 修改/ MapReduce/ 框架/ 使/ 之/ 更/ 利于/ 连接/ 的/ 实现/ [/ 34/ -/ 35/ ]/ ./ 下面/ 我们/ 分别/ 介绍/ 这/ 两类/ 工作/ ./ (/ 1/ )/ 基于/ 原始/ MapReduce/ 的/ 连接/ 算法/ 这/ 类/ 算法/ 通过/ 设计/ Map/ 函数/ 、/ Reduce/ 函数/ 和/ 数据流/ 来/ 完成/ 连接/ ,/ 涉及/ 到/ 的/ 连接/ 方式/ 包括/ 两表/ 等值/ 连接/ [/ 9/ ,/ 25/ ,/ 28/ -/ 29/ ]/ 、/ 两表/ θ/ 连接/ [/ 30/ ]/ 、/ 多表/ 等值/ 连接/ [/ 31/ -/ 32/ ]/ 和/ 两表/ 集合/ 相似性/ 连接/ [/ 30/ ]/ 3/ 种/ 类型/ ./ 如表/ 3/ 所示/ ,/ 我们/ 首先/ 对/ 两表/ 等值/ 连接/ 的/ 算法/ 进行/ 分析/ 比较/ ./ 设/ 参加/ 连接/ 的/ 两个/ 表/ 分别/ 为/ R/ 和/ S/ ,/ 并且/ R/ 为/ 其中/ 数据量/ 较/ 小/ 的/ 表/ ./ 作业/ 个数/ 表/ 个数/ )/ Page8/ 标准/ 重/ 分区/ 算法/ [/ 9/ ,/ 25/ ,/ 28/ -/ 29/ ]/ ./ 该/ 算法/ 类似/ 于/ DBMS/ 中/ 的/ 排序/ -/ 合并/ 算法/ ,/ 由/ 一个/ MapReduce/ 作业/ 构成/ ./ Mapper/ 读入/ 两个/ 表/ 的/ 数据文件/ ,/ 并/ 根据/ 查询/ 条件/ 对/ 数据/ 进行/ 过滤/ ./ 输出/ 的/ 键值/ 对/ 中/ ,/ 键值/ 是/ 连接/ 的/ 列值/ ,/ 数值/ 部分/ 包括/ 记录/ 值/ 和/ 标签/ 两/ 部分/ ,/ 标签/ 用于/ 标识/ 该/ 记录/ 来自/ 哪个/ 表/ ./ 在/ reduce/ 的/ 混洗/ (/ shuffle/ )/ 过程/ 中/ ,/ 具有/ 相同/ 连接/ 值/ 的/ 记录/ 被/ 分区/ 到/ 同一个/ reducer/ 上/ ./ 针对/ 每/ 一个/ 连接/ 值/ ,/ reducer/ 根据/ 标签/ 把/ 记录/ 分成/ 两个/ 集合/ ,/ 然后/ 计算/ 两个/ 集合/ 元素/ 的/ 向量/ 积/ 从而/ 完成/ 连接/ ./ 标准/ 重/ 分区/ 算法/ 在/ 现有/ 云/ 数据/ 管理系统/ 比较/ 常见/ ,/ Pig/ 、/ Hive/ 和/ Jaql/ 均/ 实现/ 了/ 这种/ 算法/ [/ 8/ ,/ 25/ ,/ 28/ ]/ ./ 该/ 算法/ 的/ 一个/ 潜在/ 问题/ 是/ 针对/ 某个/ 连接/ 键值/ 计算/ 向量/ 积时/ ,/ 两个/ 表/ 的/ 相关/ 数据/ 都/ 要/ 放入/ 内存/ 进行/ 缓存/ ./ 当/ 连接/ 键值/ 基数/ 比较/ 少/ 或者/ 出现/ 数据/ 倾斜/ 时/ ,/ 会/ 导致/ 某个/ 连接/ 键值/ 对应/ 的/ 数据量/ 较大/ ,/ 一方面/ 可能/ 会/ 造成/ 内存/ 溢出/ ,/ 另一方面/ 造成/ 计算资源/ 分布/ 不/ 均匀/ ./ 改进/ 的/ 重/ 分区/ 算法/ [/ 29/ ]/ ./ 为了/ 解决/ 标准/ 重/ 分区/ 算法/ 的/ 内存/ 缓存/ 问题/ ,/ 该/ 算法/ 从/ 两个/ 方面/ 进行/ 了/ 改进/ :/ 首先/ ,/ map/ 阶段/ 输出/ 的/ 键值/ 由/ 连接/ 的/ 列值/ 和/ 表名/ 的/ 标签/ 值/ 混合/ 构成/ ,/ 标签/ 值/ 放到/ 键值/ 中/ 可以/ 保证/ 在/ reduce/ 阶段/ 进行/ 排序/ 时/ ,/ 来自/ 其中/ 一个/ 表/ 的/ 数据/ 总是/ 排在/ 另/ 一个/ 表/ 的/ 前面/ ./ 其次/ ,/ 在/ 计算/ 卡氏/ 积时/ ,/ 内存/ 中/ 只/ 缓存/ 较小表/ 的/ 数据/ ,/ 而/ 另/ 一个/ 大表/ 的/ 数据/ 以/ 数据流/ 的/ 方式/ 读入/ 内存/ ./ 这样/ ,/ 算法/ 对/ 内存大小/ 的/ 要求/ 大大降低/ ./ 广播/ 算法/ [/ 9/ ,/ 25/ ,/ 28/ -/ 29/ ]/ ./ 该/ 算法/ 将/ 两个/ 表中/ 较/ 小/ 的/ 一个/ 以/ 广播/ 的/ 形式/ 传输/ 到/ 另/ 一个/ 表/ 数据/ 所在/ 的/ 节点/ 上/ ,/ 然后/ 在/ 每个/ 节点/ 上/ 直接/ 进行/ 连接/ ./ 算法/ 由/ 一个/ 只有/ map/ 函数/ 而/ reduce/ 函数/ 为空/ 的/ MapReduce/ 作业/ 完成/ ./ 作业/ 初始化/ 阶段/ 对小表/ R/ 进行/ 数据/ 广播/ ,/ 然后/ 在/ Map/ 阶段/ 直接/ 对/ 数据/ 进行/ Hash/ 连接/ ./ 由于/ 广播/ 算法/ 没有/ reduce/ 操作/ ,/ 因此/ 避免/ 了/ 混洗/ 过程/ 中/ 的/ 数据传输/ 和/ 排序/ ./ 当/ 进行/ 连接/ 的/ 两个/ 表/ 数据量/ 相差/ 很大/ 时/ ,/ 广播/ 小表/ 的/ 数据传输/ 代价/ 将会/ 大大/ 小于/ 混洗/ 过程/ 中/ 的/ 数据传输/ 代价/ ,/ 从而/ 提高/ 连接/ 效率/ ./ 半/ 连接/ 算法/ [/ 29/ ]/ ./ 半/ 连接/ 算法/ 基于/ 广播/ 算法/ 进行/ 改进/ ,/ 旨在/ 减少/ 广播/ 过程/ 中/ 的/ 数据传输/ 量/ ./ 广播/ 的/ 表/ R/ 中/ 并/ 不是/ 所有/ 的/ 数据/ 都/ 会/ 参与/ 连接/ ,/ 因此/ 在/ 传输数据/ 之前/ 通过/ 半/ 连接/ 操作/ 去除/ 部分/ 数据/ ./ 该/ 算法/ 由/ 3/ 个/ MapReduce/ 作业/ 构成/ ./ 第/ 1/ 个/ 作业/ 主要/ 扫描/ S/ 表并/ 生成/ 其/ 连接/ 键值/ 文件/ S/ ./ uk/ ./ 第/ 2/ 个/ 作业/ 根据/ 文件/ S/ ./ uk/ 中/ 的/ 键值/ 过滤/ R/ 中/ 每个/ 子表/ 的/ 数据/ ,/ 生成/ 一系列/ 的/ 数据文件/ Ri/ ./ 第/ 3/ 个/ 作业/ 依据/ 过滤/ 后/ 的/ R/ 表/ 数据/ 执行/ 广播/ 算法/ ./ 尽管/ 半/ 连接/ 算法/ 减少/ 了/ 广播/ 过程/ 中/ 的/ 数据传输/ 量/ ,/ 但/ 增加/ 了/ 对表/ S/ 和/ R/ 的/ 扫描/ ./ 因此/ 具体/ 选择/ 哪/ 种/ 算法/ 要/ 根据/ 连接/ 表/ 的/ 大小/ 以及/ 连接/ 键值/ 的/ 分布/ 情况/ 决定/ ./ 分片/ 半/ 连接/ 算法/ [/ 29/ ]/ ./ 该/ 算法/ 将/ 半/ 连接/ 的/ 粒度/ 缩小/ 到/ S/ 的/ 每个/ 分/ 片子/ 表/ Si/ ,/ 它/ 同样/ 由/ 3/ 个/ MapReduce/ 作业/ 构成/ ./ 第/ 1/ 个/ 作业/ 生成/ S/ 的/ 链接/ 键值/ 文件/ ,/ 与/ 前/ 一个/ 算法/ 不同/ 的/ 是/ 这个/ 作业/ 只有/ map/ 操作/ ,/ 针对/ 每个/ 子表/ Si/ 生成/ 连接/ 键值/ 文件/ Si/ ./ uk/ ./ 第/ 2/ 个/ 作业/ 执行/ 半/ 连接/ ,/ 针对/ 每个/ Si/ ,/ 根据/ R/ 的/ 匹配/ 记录/ 文件/ 和/ 标记/ 生成/ 与/ 子表/ Si/ 相对/ 应/ 的/ 广播/ 数据文件/ RSi/ ./ 第/ 3/ 个/ 作业/ 只有/ map/ 操作/ ,/ 每个/ mapper/ 读入/ 对应/ 的/ 数据文件/ RSi/ 并/ 直接/ 进行/ 连接/ 操作/ ./ 与/ 普通/ 的/ 半/ 连接/ 算法/ 相比/ ,/ 分片/ 半/ 连接/ 算法/ 在/ 广播/ 过程/ 中/ 数据传输/ 量/ 较/ 少/ ,/ 但是/ 需要/ 为/ 每个/ 子表/ Si/ 过滤/ 一次/ R/ ./ 冗余/ 重/ 分区/ 算法/ [/ 30/ ]/ ./ 该/ 算法/ 使用/ 一个二维/ 矩阵/ 表示/ 两表/ 的/ 笛卡尔/ 积/ ,/ 通过/ 将/ 满足/ 连接/ 条件/ 的/ 元素/ 设定/ 为/ “/ 真/ ”/ 表示/ 各种/ 不同/ 连接/ 类型/ 的/ 结果/ ./ 所有/ 的/ 连接/ 均/ 由/ 一个/ MapReduce/ 作业/ 完成/ ,/ 通过/ 均衡/ 每个/ reducer/ 任务/ 输入/ 和/ 输出/ 的/ 数据量/ 来/ 达到/ 减少/ 查询/ 执行/ 时间/ 的/ 目的/ ./ 算法/ 根据/ reducer/ 任务/ 的/ 个数/ r/ 将/ 二维/ 矩阵/ 分成/ r/ 个/ 大小/ 均衡/ 的/ 区域/ ,/ 每个/ reducer/ 负责/ 产生/ 相应/ 区域/ 的/ 连接/ 结果/ ,/ 其/ 输入/ 的/ 数据量/ 则/ 等于/ 区域/ 矩形/ 的/ 周长/ 之半/ ./ 与/ 以往/ 的/ 连接/ 算法/ 不同/ ,/ 在/ 冗余/ 重/ 分区/ 算法/ 中/ ,/ 一个/ 记录/ 可能/ 被/ 重定向/ 到/ 多个/ reducer/ 任务/ 的/ 区域/ 中/ ./ 算法/ 正是/ 通过/ 这种/ 冗余/ 重定向/ 实现/ 了/ 非/ 等值/ 连接/ ,/ 并/ 减轻/ 了/ 数据/ 倾斜/ 的/ 影响/ ,/ 但/ 增加/ 了/ 混洗/ 过程/ 中/ 的/ 数据传输/ 量/ ./ 除了/ 两表/ 等值/ 连接/ ,/ 多表/ 等值/ 连接/ 在/ 数据分析/ 和/ 决策/ 支持/ 中/ 的/ 应用/ 也/ 非常/ 广泛/ ,/ 星形/ 连接/ 和/ 链式连接/ 是/ 主要/ 的/ 两种/ 连接/ 形式/ ./ 文献/ [/ 31/ ]/ 提出/ 了/ 一种/ 基于/ “/ 数据/ 冗余/ 传输/ ”/ 的/ 算法/ ./ 该/ 算法/ 只/ 包含/ 一个/ MapReduce/ 作业/ ,/ 数据/ 的/ 冗余/ 传输/ 在/ map/ 之后/ 的/ 混洗/ 过程/ 中/ 进行/ ,/ 冗余/ 传输/ 的/ 次数/ 和/ 方式/ 则/ 由/ “/ mapkey/ ”/ 决定/ ./ Map/ 键值/ 是/ 多个/ 连接/ 属性/ 的/ 集合/ ,/ 其中/ 每个/ 连接/ 属性/ 对应/ 着/ 一个/ 共享/ 值/ (/ share/ )/ ,/ 表示/ 该/ 属性/ Hash/ 后/ 的/ 桶/ 数/ ./ Mapper/ 输出/ 的/ 每个/ 键值/ 对/ 可能/ 传输/ 到/ 多个/ reducer/ ,/ 其/ 个数/ 由/ Map/ 键值/ 中/ 没有/ 被/ 该表/ 覆盖/ 的/ 连接/ 属性/ 共享/ 值/ 的/ 乘积/ 决定/ ./ 在/ reduce/ 阶段/ ,/ 直接/ 对/ 传输/ 到/ 本地/ 的/ 数据/ 进行/ 连接/ ./ 这种/ 算法/ 比较/ 适合/ 星形/ 连接/ 或者/ 表数/ 不/ 多/ 的/ 链式连接/ ,/ 随着/ 链式连接/ 的/ 表数/ 不断/ 增多/ ,/ 传输/ 代价/ 也/ 成倍增加/ ./ 文献/ [/ 32/ ]/ 提出/ 了/ 一种/ 利用/ 二部/ 图/ 进行/ 连接/ 的/ 算法/ ,/ 该/ 算法/ 主要/ 应用/ 在/ 链式连接/ 上/ ./ 设/ 参加/ 链式连接/ 表/ 的/ Page9/ 个数/ 为/ n/ ,/ 首先/ 使用/ n/ 个/ MapReduce/ 作业/ 为/ 每个/ 表/ 生成/ 一个/ 二部/ 图/ ,/ 然后/ 执行/ 2/ (/ n/ -/ 1/ )/ 个/ 作业/ 根据/ 二部/ 图/ 按照/ 和/ 链式连接/ 相反/ 的/ 顺序/ 减少/ 每个/ 表/ 参与/ 连接/ 的/ 记录/ 数/ ,/ 最后/ 利用/ 浓密/ 树/ 提高/ 连接/ 的/ 并行度/ ,/ 这样/ 最少/ 再/ 执行/ (/ n/ -/ 1/ )/ 个/ 作业/ 执行/ 连接/ ./ 该/ 算法/ 从/ 最大/ 程度/ 上/ 减少/ 了/ 连接/ 过程/ 中/ 的/ 数据传输/ 量/ ,/ 但是/ 需要/ 的/ MapReduce/ 作业/ 个数/ 较/ 多/ ./ 与/ 等值/ 连接/ 不同/ ,/ 集合/ 相似性/ 连接/ 要求/ 计算/ 两个/ 表/ (/ 或者/ 集合/ )/ 中/ 所有/ 元素/ 的/ 相似/ 度/ ,/ 因此/ 减少/ 数据传输/ 的/ 方法/ 比/ 等值/ 连接/ 复杂/ ./ 文献/ [/ 33/ ]/ 提出/ 了/ 一种/ 使用/ MapReduce/ 实现/ 集合/ 相似性/ 连接/ 的/ 算法/ ,/ 利用/ “/ 前缀/ 过滤/ ”/ [/ 36/ ]/ 原则/ 减少/ 参加/ 连接/ 的/ 候选/ 数据/ 对/ ./ 该/ 算法/ 包括/ 3/ 个/ 步骤/ :/ 第/ 1/ 步/ 计算/ 用于/ 前缀/ 过滤/ 的/ 全局/ 词项/ 排序/ ,/ 包括/ 两个/ MapReduce/ 作业/ ,/ 分别/ 用于/ 统计/ 和/ 排序/ ,/ 第/ 2/ 步/ 利用/ 词项/ 排序/ 执行/ 前缀/ 过滤/ 并/ 生成/ 连接/ 结果/ 的/ 行/ 键值/ 对/ (/ row/ -/ IDpair/ )/ ,/ 第/ 3/ 步/ 根据/ 行/ 键值/ 对/ 取得/ 实际/ 的/ 连接/ 结果/ ,/ 这/ 两步/ 各/ 使用/ 一个/ MapReduce/ 作业/ ./ 该/ 算法/ 通过/ 前缀/ 过滤/ 减少/ 了/ 连接/ 过程/ 中/ 的/ 数据传输/ 代价/ ,/ 但/ 其/ 应用/ 范围/ 比较/ 固定/ ,/ 适用/ 于/ 字符串/ 类型/ 的/ 相似/ 连接/ ./ (/ 2/ )/ 基于/ 调整/ 后/ MapReduce/ 的/ 连接/ 算法/ 原始/ 的/ MapReduce/ 框架/ 是/ 一个/ “/ 过滤/ -/ 聚集/ ”/ 的/ 过程/ ,/ 这/ 对/ 处理/ 同构/ 的/ 数据源/ 比较/ 有效/ [/ 37/ ]/ ,/ 然而/ 在/ 处理/ 多表/ 连接/ 时会/ 遇到/ 两/ 方面/ 的/ 问题/ ./ 一方面/ ,/ 参加/ 连接/ 的/ 数据源/ 往往/ 是/ 异构/ 的/ ,/ 因此/ 在/ 连接/ 处理过程/ 中/ 需要/ 对/ 不同/ 数据源/ 的/ 数据/ 进行/ 同构化/ 处理/ ,/ 例如/ 增加/ 数据源/ 标记/ 等/ ./ 同构化/ 处理过程/ 不但/ 需要/ 额外/ 的/ 存储/ 开销/ ,/ 而且/ 增加/ 了/ 数据传输/ 量/ ./ 另一方面/ ,/ 原始/ 的/ MapReduce/ 框架/ 在/ 处理/ 多表/ 连接/ 时会/ 产生/ 大量/ 中间/ 结果/ 和/ 检查点/ ,/ 这/ 也/ 增加/ 了/ 数据传输/ 量/ ./ 文献/ [/ 34/ ]/ 针对/ 异构/ 数据源/ 问题/ 对/ MapReduce/ 框架/ 进行/ 了/ 扩展/ ,/ 在/ reduce/ 步骤/ 结束/ 后/ 增加/ 了/ 一个/ merge/ 的/ 步骤/ ,/ 形成/ Map/ -/ Reduce/ -/ Merge/ 框架/ ./ Merge/ 的/ 输入/ 数据/ 可以/ 来自/ 不同/ reducer/ 的/ 输出/ ,/ 这样/ 在/ 一个/ MapReduce/ 作业/ 里/ 可以/ 处理/ 多个/ 数据源/ ./ 实现/ 连接/ 的/ 过程/ 类似/ 于/ 传统/ MapReduce/ 上/ 的/ 重/ 分区/ 连接/ ,/ 不过/ 在/ map/ 阶段/ 不/ 需要/ 为/ 不同/ 表/ 的/ 数据/ 登记/ 标签/ ,/ merge/ 阶段/ 可以/ 将/ 两个/ 表/ 对应/ reduer/ 输出/ 的/ 排序/ 数据/ 进行/ 合并/ 连接/ ./ 新加坡国立大学/ 的/ 研究/ 人员/ 提出/ 了/ Map/ -/ Join/ -/ Reduce/ 框架/ [/ 35/ ]/ ,/ 并/ 对/ 原始/ MapReduce/ 的/ 处理过程/ 进行/ 了/ 两/ 方面/ 的/ 扩展/ ./ 针对/ 第/ 1/ 个/ 问题/ ,/ 文献/ [/ 35/ ]/ 提出/ 了/ “/ 过滤/ -/ 连接/ -/ 聚集/ ”/ 的/ 编程/ 框架/ ,/ 连接/ 函数/ 可/ 从/ 多个/ 数据源/ 读入/ 数据/ 进行/ 处理/ ,/ 连接/ 函数/ 内容/ 和/ 连接/ 顺序/ 由/ 用户/ 定义/ ./ 针对/ 第/ 2/ 个/ 问题/ ,/ Map/ -/ Join/ -/ Reduce/ 对/ Map/ 完成/ 后/ 的/ 混洗/ 过程/ 进行/ 了/ 扩展/ ,/ 将/ 原来/ 的/ “/ 一对一/ ”/ 模式/ 扩展/ 成/ “/ 一对/ 多/ ”/ 模式/ ,/ Map/ 函数/ 输出/ 的/ 中间/ 结果/ 一次/ 可以/ 传给/ 多个/ 连接/ 函数/ ./ 这样/ 通过/ 相应/ 的/ 分区/ 策略/ 可以/ 用/ 一个/ MapReduce/ 作业/ 完成/ 多表/ 连接/ ,/ 从而/ 减少/ 多个/ 作业处理/ 过程/ 带来/ 的/ 大量/ 中间/ 结果/ 存储/ 和/ 传输/ 问题/ ./ 与/ 基于/ 原始/ MapReduce/ 的/ 连接/ 算法/ 相比/ ,/ 基于/ 调整/ MapReduc/ 的/ 连接/ 算法/ 可以/ 通过/ 较少/ 的/ 作业/ 完成/ 原始/ MapReduc/ 框架/ 需要/ 多个/ 作业/ 才能/ 完成/ 的/ 复杂/ 连接/ ,/ 因此/ 可以/ 减少/ 中间/ 结果/ 的/ 数据传输/ 和/ 检查点/ 数量/ ./ 对/ MapReduce/ 框架/ 的/ 调整/ 主要/ 通过/ 增加/ 处理函数/ 或者/ 扩展/ 部分/ 数据/ 流程/ 实现/ ,/ 这/ 使得/ 原来/ 简单/ 易用/ 的/ MapReduce/ 框架/ 变得复杂/ ,/ 也/ 增加/ 了/ 编程/ 接口/ 的/ 使用/ 难度/ ./ 3.2/ ./ 3/ 查询/ 优化/ 在/ 数据/ 管理系统/ 中/ ,/ 对于/ 一个/ 给定/ 的/ 查询/ ,/ 通常/ 有/ 多种/ 处理/ 策略/ ,/ 查询/ 优化/ 技术/ 负责/ 从/ 多种/ 策略/ 中/ 找出/ 最/ 有效/ 的/ 查询处理/ 计划/ ./ 云/ 数据/ 管理系统/ 中/ 的/ 查询/ 优化/ 可以/ 从/ 两个/ 方面/ 进行/ :/ 一方面/ 在/ 解析/ 查询/ 语句/ 并/ 生成/ MapReduce/ 计划/ 时/ 进行/ ,/ 根据/ 数据/ 的/ 元/ 信息/ 选择/ 执行/ 更为/ 高效/ 的/ MapReduce/ 计划/ ;/ 另一方面/ 在/ 执行/ MapReduce/ 任务/ 时/ 进行/ ,/ 根据/ 数据/ 的/ 统计/ 和/ 资源分配/ 等/ 信息/ 构造/ 详细/ 的/ 任务/ 执行/ 策略/ ./ 已有/ 的/ 查询/ 优化/ 工作/ 主要/ 集中/ 在/ 第/ 2/ 个/ 方面/ ,/ 下面/ 从/ 任务/ 的/ 调度/ 、/ 任务/ 的/ 处理/ 优化/ 两个/ 方面/ 对/ 已有/ 工作/ 进行/ 总结/ ./ (/ 1/ )/ 调度/ 优化/ 云/ 计算/ 是/ 一个/ 多用户/ 的/ 环境/ ,/ 服务提供商/ 依据/ 签订/ 的/ 相关/ 协议/ 向/ 用户/ 提供/ 不同/ 级别/ 的/ 服务/ ,/ 因此/ 对/ 不同/ 用户/ 提交/ 的/ 查询/ 进行/ 调度/ 以/ 保证/ 服务质量/ 是/ 非常/ 必要/ 的/ ./ 另一方面/ ,/ 云/ 计算环境/ 通常/ 是/ 分布式/ 异构/ 的/ ,/ 查询/ 往往/ 被/ 分解成/ 多个/ 任务/ 并行执行/ ,/ 根据/ 资源/ 的/ 占用/ 情况/ 和/ 节点/ 的/ 运行/ 情况/ 对/ 任务/ 进行/ 有效/ 的/ 调度/ 对/ 查询/ 优化/ 有着/ 至关重要/ 的/ 作用/ ./ 目前/ 针对/ 调度/ 的/ 优化/ 已经/ 有/ 不少/ 工作/ ,/ 根据/ 调度/ 对象/ 的/ 粒度/ ,/ 可以/ 把/ 已有/ 工作/ 分成/ 3/ 个/ 类型/ :/ 查询/ 调度/ [/ 38/ ]/ 、/ MapReduce/ 作业/ 调度/ [/ 39/ ]/ 和/ MapReduce/ 任务调度/ [/ 16/ ,/ 40/ ]/ ./ 文献/ [/ 38/ ]/ 提出/ 了/ 一种/ 在/ 云/ 环境/ 下/ 对/ 用户/ 提交/ 的/ 查询/ 进行/ 调度/ 的/ 算法/ iCBS/ ./ 服务提供商/ 和/ 用户/ 之间/ 通过/ 签订/ 服务/ 等级/ 协议/ SLA/ (/ ServiceLevelAgree/ -/ ment/ )/ 来/ 保障/ 云/ 服务/ 的/ 质量/ 和/ 可靠性/ ,/ SLA/ 定义/ 了/ 为/ 用户/ 提供/ 的/ 服务/ 标准/ 以及/ 服务商/ 不能/ 满足/ 服务/ 需求/ 的/ 惩罚/ 代价/ ./ SLA/ 涉及/ 云/ 服务/ 中/ 可用性/ 、/ 安全性/ Page10/ 等/ 多个/ 方面/ ,/ iCBS/ 主要/ 关注/ 查询/ 响应/ 时间/ ./ 该/ 算法/ 根据/ 查询/ 的/ 提交/ 时间/ 和/ 该/ 查询/ 的/ SLA/ 相关/ 定义/ 以/ 增量/ 的/ 方式/ 计算/ 其/ 优先/ 系数/ ,/ 依据/ 优先/ 系数/ 对/ 查询/ 进行/ 调度/ ,/ 以/ 尽量减少/ 查询/ 的/ 响应/ 时间/ ,/ 并/ 减少/ 服务提供商/ 因/ 不能/ 满足/ SLA/ 需求/ 而/ 产生/ 的/ 代价/ ,/ iCBS/ 的/ 时间/ 复杂度/ 为/ O/ (/ logN/ )/ ,/ 其中/ N/ 为/ 查询/ 的/ 数量/ ./ 算法/ 名称/ 调度/ 粒度/ 优化/ 目标/ 算法/ 复杂度/ iCBS/ [/ 38/ ]/ 查询/ 最小化/ SLA/ 代价/ O/ (/ logN/ )/ FAIR/ [/ 39/ ]/ MapReduce/ 作业/ 保证/ 资源/ 平均分配/ O/ (/ 1/ )/ CSP/ 模型/ 算法/ [/ 40/ ]/ MapReduce/ 任务/ 最小化/ 实时/ 作业/ 的/ LATE/ [/ 16/ ]/ MapReduce/ 任务/ 最小化/ 异构/ 环境/ 下/ 文献/ [/ 39/ ]/ 提出/ 了/ 一种/ 对/ MapReduce/ 作业/ 进行/ 调度/ 的/ 算法/ FAIR/ 来/ 优化/ 作业/ 的/ 执行/ 效率/ ./ 传统/ 的/ MapReduce/ 作业/ 调度/ 方法/ 是/ 先进先出/ (/ FIFO/ )/ 算法/ ,/ 这种/ 算法/ 实现/ 起来/ 比较简单/ ,/ 但是/ 在/ 多用户/ 的/ 环境/ 下会/ 影响/ 作业/ 的/ 执行/ 效率/ ./ FAIR/ 提供/ 了/ 一种/ 让/ 用户/ 公平/ 获取/ 计算资源/ 的/ 调度/ 算法/ ,/ 它/ 使用/ 资源/ 池/ 组织/ 作业/ ,/ 并/ 把/ 资源/ 公平/ 的/ 分到/ 资源/ 池中/ ./ 每个/ 用户/ 使用/ 一个/ 资源/ 池/ ,/ 这样/ 每个/ 用户/ 可以/ 获得/ 等同/ 的/ 资源分配/ ./ 除此之外/ ,/ FAIR/ 允许/ 赋给/ 资源/ 池/ 保证/ 最小/ 共享资源/ (/ guaranteedsharedresourece/ )/ ,/ 这样/ 可以/ 保证/ 特定/ 用户/ 、/ 群组/ 或/ 生产/ 应用程序/ 总能/ 获取/ 到/ 足够/ 的/ 资源/ ./ Phan/ 等/ 人/ [/ 40/ ]/ 关注/ 异构/ 环境/ 下/ MapReduce/ 作业/ 的/ 任务调度/ 优化/ ,/ 把/ 每个/ 任务/ 的/ 执行/ 时间/ 、/ 心跳/ 检测时间/ 间隔/ 、/ 数据/ 输入/ 时间/ 等/ 5/ 个/ 变量/ 组合成/ 约束/ 集合/ ,/ 以/ 最小化/ 作业/ 的/ 延迟/ 相应/ 时间/ 为/ 目标/ 函数/ ,/ 将/ MapReduce/ 作业/ 调度/ 问题/ 转化成/ 约束/ 满足/ 问题/ (/ ConstraintSatisfactionProblem/ ,/ CSP/ )/ 进行/ 解决/ ./ 文献/ [/ 16/ ]/ 的/ 调度/ 粒度/ 也/ 是/ MapReduce/ 任务/ ,/ 主要/ 关注/ 掉队/ 任务/ (/ stragglertask/ )/ 的/ 调度/ 优化/ ./ 在/ 传统/ 的/ MapReduce/ 调度/ 中/ ,/ 为了/ 防止/ 作业/ 执行/ 过程/ 中/ “/ 木桶/ 效应/ ”/ 的/ 出现/ ,/ 会/ 将/ 掉队/ 任务/ 进行/ 备份/ 执行/ ./ 然而/ 原有/ 的/ 掉队/ 任务调度/ 方法/ 假设/ 集群/ 环境/ 的/ 同构/ 性/ 和/ 任务/ 执行/ 的/ 等速/ 性/ ,/ 这/ 在/ 实际/ 的/ 云/ 计算环境/ 中/ 往往/ 是/ 无法/ 保证/ 的/ ./ 基于/ 上述/ 问题/ ,/ 文献/ [/ 16/ ]/ 提出/ 了/ LATE/ 算法/ ,/ 根据/ 所在/ 节点/ 的/ 性能/ 预测/ 每个/ 任务/ 的/ 剩余/ 完成/ 时间/ ,/ 并/ 选择/ 剩余时间/ 最长/ 的/ 任务/ 作为/ 掉队/ 任务/ 进行/ 调度/ ./ 在/ 调度/ 过程/ 中/ ,/ 如果/ 有/ 空闲/ 的/ 任务/ 槽/ 位/ (/ taskslot/ )/ 出现/ 并且/ 正在/ 运行/ 的/ 任务/ 总数/ 小于/ 特定/ 阈值/ ,/ 则/ 创建/ 该/ 任务/ 的/ 执行/ 副本/ ./ 该/ 算法/ 需要/ 对/ 所有/ 正在/ 运行/ 的/ 任务/ 进行/ 剩余时间/ 的/ 预测/ 和/ 排序/ ,/ 算法/ 复杂度/ 为/ O/ (/ M/ )/ ,/ M/ 为/ 正在/ 运行/ 的/ 任务/ 个数/ ./ (/ 2/ )/ 任务/ 处理/ 优化/ 基于/ MapReduce/ 实现/ 云/ 数据/ 的/ 查询/ 可以/ 获得/ 良好/ 的/ 扩展性/ 、/ 容错性/ 以及/ 较/ 高/ 的/ 性价比/ ,/ 然而/ 粗犷/ 的/ 批处理/ 模式/ 导致/ 基于/ 原始/ MapReduce/ 框架/ 的/ 查询/ 性能/ 有/ 很大/ 的/ 提升/ 空间/ ./ 查询/ 任务/ 处理/ 的/ 优化/ 问题/ 引起/ 了/ 学术界/ 的/ 广泛/ 关注/ ,/ 已有/ 的/ 优化/ 措施/ 包括/ 以下/ 几种/ :/ ①/ 任务/ 共享/ ./ 云/ 环境/ 中/ 的/ 数据/ 查询/ 通常/ 是/ 以/ 批处理/ 的/ 方式/ 处理/ 大规模/ 数据/ ,/ 在/ 该/ 模式/ 下/ 通过/ 查询/ 之间/ 的/ 任务/ 共享/ 来/ 减少/ 冗余/ 计算/ 将/ 有效/ 减少/ 查询/ 执行/ 时间/ 和/ 耗费/ 的/ 计算资源/ ./ Hive/ [/ 9/ ]/ 提供/ 了/ 一种/ 用户/ 自定义/ 模式/ 的/ 数据/ 扫描/ 共享/ (/ scanshare/ )/ ,/ 如果/ 两个/ 作业/ 的/ 输入/ 数据文件/ 相同/ ,/ 则/ 会/ 创建/ 一个/ 新/ 的/ MapReduce/ 作业/ 负责/ 数据/ 的/ 读入/ 和/ 解析/ ,/ 并/ 为/ 两个/ 作业/ 产生/ 相应/ 的/ 临时/ 输入/ 文件/ ./ 这种/ 任务/ 共享方法/ 增加/ 了/ 一个/ MapReduce/ 作业/ ,/ 而且/ 还/ 需要/ 用户/ 自已/ 定义/ 共享/ 函数/ ./ 另一类/ 任务/ 共享方法/ 是/ 把/ 满足/ 共享/ 任务/ 条件/ 的/ 作业/ 分/ 到/ 一个组/ 中/ ,/ 使用/ 一个/ MapReduce/ 作业/ 来/ 完成/ 原来/ 多个/ 作业/ 需要/ 完成/ 的/ 工作/ ,/ 不/ 需要/ 用户/ 自定义/ ,/ 也/ 不/ 需要/ 产生/ 临时文件/ [/ 41/ -/ 44/ ]/ ./ 文献/ [/ 42/ -/ 43/ ]/ 主要/ 支持/ 数据/ 扫描/ 共享/ ,/ 而/ 文献/ [/ 43/ -/ 44/ ]/ 则/ 支持/ 扫描/ 共享/ 、/ Map/ 输入/ Map/ 输出/ 以及/ Map/ 函数/ 的/ 共享/ ./ ②/ 增量/ 计算/ ./ 目前/ 在/ 大多数/ 云/ 数据管理/ 应用/ 中/ ,/ 查询/ 的/ 数据/ 规模/ 往往/ 随着/ 新/ 数据/ 的/ 产生/ 而/ 不断/ 增加/ ./ 如何/ 使/ 查询/ 流程/ 增量/ 化/ ,/ 并/ 利用/ 已有/ 的/ 查询/ 结果/ 处理/ 新/ 的/ 查询/ 也/ 是/ 目前/ 学术界/ 关注/ 的/ 一个/ 问题/ ./ 根据/ 增量/ 计算/ 的/ 触发/ 方法/ ,/ 已有/ 的/ 工作/ 可以/ 分为/ 两类/ :/ 对/ 用户/ 不/ 透明/ 的/ 方法/ [/ 45/ -/ 46/ ]/ 和/ 透明/ 的/ 方法/ [/ 42/ ,/ 47/ -/ 48/ ]/ ./ Google/ 的/ Percolator/ 建立/ 在/ GFS/ -/ BigTable/ 之上/ ,/ 它/ 通过/ 快照/ 隔离/ 实现/ 了/ 跨行/ 和/ 跨表/ 数据/ 的/ 一致性/ ,/ 使得/ 用户/ 可以/ 跟踪/ 计算/ 过程/ 中/ 的/ 状态/ ,/ 并/ 实现/ 增量/ 计算/ [/ 45/ ]/ ./ Yahoo/ !/ 的/ CBP/ 提出/ 了/ 一个/ 新/ 的/ 并行/ 编程/ 模型/ ,/ 用来/ 存储/ 和/ 使用/ 运行/ 状态/ ,/ 并/ 实现/ 查询/ 的/ 增量/ 处理/ [/ 46/ ]/ ./ 这/ 两种/ 方法/ 的/ 基本/ 缺陷/ 是/ 要求/ 用户/ 自己/ 编写/ 动态/ 程序/ 来/ 对/ 数据/ 进行/ 有效/ 的/ 增量/ 处理/ ./ Nova/ [/ 42/ ]/ 在/ Pig/ // Hadoop/ 基础/ 上/ 创建/ 了/ 一个/ 数据流/ 管理器/ ,/ 用来/ 管理/ 不同/ 查询/ 的/ 数据/ 集/ 和/ 查询/ 结果/ ,/ 并/ 支持/ 有/ 状态/ 的/ 数据/ 追加/ 操作/ ./ 当/ 查询/ 提交/ 后/ ,/ 管理器/ 判断/ 该/ 查询/ 任务/ 是否/ 可以/ 利用/ 已有/ 的/ 结果/ 进行/ 增量/ 计算/ ./ 与/ Nova/ 不同/ ,/ HaLoop/ [/ 47/ ]/ 和/ Incoop/ [/ 48/ ]/ 从/ MapReduce/ 任务/ 的/ 层次/ 进行/ 增量/ 计算/ 的/ 处理/ ./ Incoop/ 在/ 分布式/ 文件/ 层/ 使用/ 基于/ 内容/ 的/ 数据/ 块/ 划分/ 方法/ 来/ 增加/ map/ 任务/ 的/ 重用/ 度/ ,/ 并/ 通过/ 在/ combine/ 阶段/ 将/ 混洗/ 的/ 数据/ 粒度/ 减小/ 来/ 最大化/ reduce/ 任务/ 的/ 重用/ 度/ ./ Page11/ ③/ 数据组织/ 优化/ ./ 云/ 数据/ 管理系统/ 中/ 的/ 数据/ 被/ 分布/ 到/ 多个/ 节点/ 进行/ 管理/ ,/ 在/ 进行/ 查询/ 特别/ 是/ 多表/ 查询/ 时/ ,/ 需要/ 在/ 各个/ 节点/ 间/ 进行/ 数据传输/ ./ 如果/ 较/ 多/ 的/ 相关/ 数据/ 存储/ 在/ 一个/ 节点/ 上/ ,/ 那么/ 网络/ 传输/ 代价/ 就/ 会/ 减少/ ,/ 查询/ 时间/ 也/ 会/ 随之/ 减少/ ,/ 因此/ 数据/ 的/ 组织/ 方式/ 会/ 对/ 查询/ 性能/ 产生/ 很大/ 的/ 影响/ [/ 49/ ]/ ./ HadoopDB/ 将/ 数据/ 从/ 分布式文件系统/ 导入到/ 每个/ 节点/ 上/ 的/ 关系/ 数据库系统/ 中/ ,/ 这样/ 可以/ 在/ 本地/ 的/ 关系数据库/ 上/ 分别/ 执行/ 连接/ [/ 8/ ]/ ./ Hadoop/ ++/ [/ 50/ ]/ 将/ 数据组织/ 优化/ 模块/ 植入/ Hadoop/ 系统/ 之上/ ,/ 主要/ 关注/ 两表/ 连接/ 时/ 的/ 查询/ 优化/ ./ Hadoop/ ++/ 在/ 数据/ 导入/ 时/ 对/ 输入/ 数据/ 建立/ “/ 特洛伊/ ”/ 索引/ ,/ 并/ 将/ 具有/ 相同/ 连接/ 键值/ 的/ 数据/ 放入/ 同一个/ 数据/ 分片/ 中/ ,/ 这样/ 在/ 实现/ 连接/ 时/ 不/ 需要/ 进行/ 数据/ 的/ 网络/ 传输/ ./ 该/ 方法/ 没有/ 修改/ Hadoop/ ,/ 而是/ 在/ 导入/ 数据/ 时/ 进行/ 数据/ 的/ 重新/ 组织/ ./ CoHadoop/ [/ 51/ ]/ 则/ 是/ 修改/ 了/ Hadoop/ 的/ 数据组织/ 方法/ ,/ 为/ 每个/ 文件/ 增加/ 了/ “/ Locator/ ”/ 属性/ 来/ 标识/ 其/ 位置/ ,/ 而/ 所有/ 具有/ 相同/ “/ Locator/ ”/ 属性/ 的/ 文件/ 的/ 数据/ 块/ 将/ 被/ 组织/ 到/ 同一个/ 数据/ 节点/ 集合/ 中/ ./ 除了/ 上述/ 查询/ 优化/ 方法/ ,/ 目前/ 还有/ 部分/ 工作/ 对/ MapReduce/ 的/ 参数设置/ 进行/ 优化/ [/ 52/ -/ 53/ ]/ ,/ 其中/ 文献/ [/ 52/ ]/ 通过/ 分组/ 的/ 数目/ 对/ reducer/ 个数/ 进行/ 优化/ ,/ 而/ 文献/ [/ 53/ ]/ 则/ 是/ 通过/ 估计/ MapReduce/ 作业/ 的/ 执行/ 时间/ 提供/ 对/ 多个/ 参数/ 的/ 基于/ 代价/ 的/ 优化/ ./ 总的来说/ ,/ 目前/ 已有/ 的/ 优化/ 工作/ 主要/ 集中/ 在/ 数据/ 控制/ 层/ 和/ 数据/ 存储/ 层/ ,/ 而且/ 大部分/ 是/ 基于/ 规则/ 的/ 优化/ ,/ 基于/ 代价/ 的/ 优化/ 工作/ 还/ 比较/ 少/ ,/ 亟待/ 相关/ 研究成果/ ./ 3.2/ ./ 4/ 在线/ 聚集/ 在线/ 聚集/ (/ OnlineAggregation/ ,/ OLA/ )/ 在/ 查询处理/ 过程/ 中/ 根据/ 采样/ 数据/ 估计/ 查询/ 结果/ ,/ 并/ 返回/ 真实/ 结果/ 所在/ 的/ 置信区间/ [/ 54/ ]/ ./ 在线/ 聚集/ 的/ 最大/ 优势/ 是/ 可/ 在/ 较/ 短时间/ 内/ 计算/ 出/ 接近/ 实际/ 的/ 查询/ 结果/ ,/ 当/ 置信度/ 和/ 置信区间/ 达到/ 用户/ 要求/ 时/ ,/ 查询/ 即可/ 提前/ 停止/ ./ 对于/ 原本/ 执行/ 时间/ 特别/ 长/ 而且/ 对/ 结果/ 精确性/ 要求/ 不高/ 的/ 复杂/ 查询/ ,/ 在线/ 聚集/ 可以/ 大大缩短/ 查询/ 时间/ ./ 在线/ 聚集/ 最初/ 提出/ 是/ 在/ 单表上/ 进行/ 聚集/ 的/ 相关/ 操作/ [/ 55/ -/ 56/ ]/ ,/ 后来/ 该/ 工作/ 被/ 扩展/ 到/ 多表/ 连接/ 基础/ 上/ 的/ 聚集/ 操作/ [/ 57/ -/ 59/ ]/ 以及/ 并行/ 环境/ 中/ 的/ 连接/ 聚集/ [/ 60/ -/ 61/ ]/ ./ 在线/ 聚集/ 基于/ 关系数据库/ 提出/ ,/ 并/ 在/ 研究/ 领域/ 取得/ 了/ 丰富/ 的/ 成果/ ,/ 但是/ 相关/ 成果/ 在/ 关系数据库/ 领域/ 带来/ 的/ 市场/ 价值/ 却/ 很/ 有限/ ,/ 原因/ 有/ 两点/ :/ 首先/ ,/ OLA/ 要求/ 查询处理/ 的/ 数据/ 以/ 随机/ 顺序/ 出现/ ,/ 这/ 与/ 排序/ 、/ 索引/ 等/ 查询/ 优化/ 算法/ 的/ 原则/ 相/ 违背/ ,/ 因此/ 在/ 已有/ 的/ 关系/ 数据库系统/ 上/ 实现/ OLA/ 需要/ 对/ 其/ 内核/ 进行/ 大规模/ 改动/ ;/ 其次/ ,/ OLA/ 的/ 最/ 主要/ 目标/ 是/ 缩短/ 查询/ 运行/ 时间/ 和/ 节省/ 软硬件/ 资源/ ,/ 然而/ 在/ 一个/ 非/ 弹性/ 的/ 数据中心/ ,/ 这个/ 目标/ 的/ 吸引力/ 并不大/ ./ 在/ 云/ 计算环境/ 下/ ,/ OLA/ 技术/ 又/ 重新/ 引起/ 了/ 人们/ 的/ 关注/ ./ 一方面/ ,/ 云/ 计算/ 提供/ 了/ 一种/ pay/ -/ as/ -/ you/ -/ go/ 的/ 服务/ 模式/ ,/ 节省/ 计算资源/ 直接/ 意味着/ 节省/ 开销/ ;/ 另一方面/ ,/ 不同于/ 传统/ 的/ 关系数据库/ ,/ 云/ 数据/ 管理系统/ 内核/ 轻量/ 易于/ 修改/ ./ 目前/ 在/ 云/ 计算/ 上/ 的/ OLA/ 已经/ 有/ 一些/ 初步/ 的/ 工作/ ,/ 主要/ 是/ 在/ MapReduce/ 框架/ 上/ 实现/ 大规模/ 数据/ 的/ 查询/ 估计/ ./ 其/ 相关/ 技术/ 包括/ MapReduce/ 在线/ 化/ 、/ 数据/ 采样/ 、/ 查询/ 结果/ 估计/ 和/ 收敛/ 程度/ 计算/ ,/ 下面/ 我们/ 分别/ 分析/ 这些/ 技术/ 的/ 已有/ 工作/ ./ (/ 1/ )/ MapReduce/ 在线/ 化/ ./ 传统/ 的/ MapReduce/ 数据流/ 是/ 一个/ 批处理/ 的/ 过程/ ,/ 无论是/ map/ 任务/ 还是/ reduce/ 任务/ ,/ 必须/ 处理/ 完/ 所有/ 数据/ 后/ 才/ 产生/ 输出/ 结果/ ,/ 而且/ reduce/ 任务/ 也/ 必须/ 在/ 所有/ 的/ map/ 任务/ 完成/ 后/ 才/ 开始/ 执行/ ./ OLA/ 要求/ 数据流/ 是/ 一个/ 在线/ 处理/ 的/ 过程/ ,/ 处理/ 完/ 部分/ 样本/ 数据/ 后/ 就/ 输出/ 估计/ 的/ 查询/ 结果/ ,/ MapReduce/ 的/ 在线/ 化/ 处理/ [/ 62/ -/ 63/ ]/ 为云/ 环境/ 下/ 的/ OLA/ 提供/ 了/ 实现/ 平台/ ./ 文献/ [/ 62/ ]/ 的/ MapReduce/ 在线/ 化/ 主要/ 面向/ “/ 自增/ 迭代/ ”/ 的/ 算法/ ,/ 通过/ map/ 定期/ 传送数据/ 给/ reduce/ 实现/ 作业/ 内部/ 的/ 在线/ 化/ ,/ 并/ 通过/ 集群/ “/ 共享内存/ ”/ 实现/ 作业/ 之间/ 的/ 在线/ 化/ ./ 这种/ 在线/ 化/ 方法/ 结构/ 简单/ ,/ 易于/ 实现/ ,/ 但是/ 其/ 扩展性/ 及/ 容错性/ 不及/ 传统/ 的/ MapReduce/ ./ Condie/ 等/ 人/ [/ 63/ ]/ 基于/ 操作/ 器/ (/ operator/ )/ 之间/ 数据/ 流水线/ 实现/ 了/ 在线/ 化/ 的/ MapReduce/ 系统/ HOP/ ./ HOP/ 结合/ 网络/ 负载/ 状况/ 以及/ combine/ 操作/ 的/ 压缩比/ 等/ 因素/ 设计/ 数据流/ 控制/ 机制/ ,/ 从而/ 动态控制/ mapper/ 与/ reducer/ 之间/ 的/ 数据传输/ 粒度/ ./ 当/ 一个/ 查询/ 由/ 多个/ MapReduce/ 作业/ 构成/ 时/ ,/ 生产/ 作业/ 根据/ 任务/ 执行/ 进度/ 定期/ 调用/ reduce/ 并/ 生成/ 快照/ 文件/ (/ snapshot/ )/ ,/ 消费/ 作业/ 通过/ 读取/ 快照/ 文件/ 从而/ 实现/ 数据/ 在/ 作业/ 之间/ 的/ 流水/ 化/ ./ HOP/ 保留/ 了/ 传统/ MapReduce/ 的/ 扩展性/ 和/ 容错性/ ,/ 比较/ 适合/ 作为/ 在线/ 聚集/ 的/ 实现/ 平台/ ./ (/ 2/ )/ 数据/ 采样/ ./ 为了/ 保证/ 估计/ 结果/ 和/ 置信区间/ 的/ 准确性/ 和/ 收敛/ 速度/ ,/ 在线/ 聚集/ 要求/ 采样/ 数据/ 具有/ 随机性/ 和/ 无偏性/ [/ 55/ -/ 56/ ]/ ./ 从/ 关系/ 数据表/ 进行/ 采样/ 的/ 方法/ 主要/ 有/ 三类/ [/ 56/ ,/ 64/ ]/ :/ 顺序/ 扫描/ 、/ 索引/ 扫描/ 和/ 索引/ 采样/ ./ Wu/ 等/ 人/ [/ 61/ ]/ 提出/ 了/ 从/ 分布式/ 数据表/ 采样/ 的/ 方法/ ,/ 首先/ 根据/ 表在/ 各/ 节点/ 上/ 的/ 分布/ 情况/ 计算/ 每个/ 节点/ 应/ 采样/ 的/ 数据量/ 大小/ ,/ 然后/ 在/ 每个/ 节点/ 上/ 进行/ 索引/ 采样/ ./ 在/ 云/ 环境/ 下/ ,/ 很多/ 数据/ 以块/ (/ block/ )/ 为/ 单位/ 直接/ 存储/ 在/ 分布式文件系统/ 上/ ,/ MapReduce/ 处理/ 数据/ 也/ Page12/ 通常/ 以块/ 为/ 单位/ ,/ 因此/ 上述/ 基于/ 关系数据库/ 的/ 采样/ 方法/ 无法/ 直接/ 使用/ ./ 目前/ 很多/ MapReduce/ 的/ 在线/ 聚集/ 工作/ 假设/ 数据/ 以/ 随机/ 顺序存储/ 或者/ 假设/ 一个/ 随机/ 数据/ 输入/ 队列/ 的/ 存在/ [/ 54/ ,/ 63/ ]/ ,/ 通过/ 顺序/ 扫描/ 数据/ 队列/ 即可/ 获得/ 随机/ 无偏/ 的/ 数据/ ./ 然而/ 当/ 数据/ 以/ 聚集/ 相关/ 列/ 的/ 顺序存储/ 时/ ,/ 简单/ 的/ 顺序/ 扫描/ 便/ 无法/ 获取/ 随机/ 数据/ ,/ 因此/ 在/ 云/ 环境/ 下/ 如何/ 从/ 直接/ 存储/ 在/ 分布式/ 文件/ 中/ 的/ 数据/ 中/ 进行/ 随机/ 采样/ 仍然/ 是/ 亟待解决/ 的/ 问题/ ./ (/ 3/ )/ 查询/ 结果/ 估计/ ./ 查询/ 估计/ 方法/ 应当/ 具有/ 无偏性/ 和/ 持续性/ [/ 57/ ]/ ./ 无偏性/ 是/ 指/ 如果/ 不断/ 重复/ 采样/ 和/ 估计/ 的/ 过程/ ,/ 估计值/ 的/ 数学/ 期望/ 应该/ 等于/ 实际/ 查询/ 结果/ ./ 持续性/ 是/ 指/ 随着/ 采样/ 和/ 估计/ 步数/ 的/ 不断/ 增加/ ,/ 估计值/ 应该/ 逐渐/ 接近/ 实际/ 查询/ 结果/ ./ 目前/ 已有/ 的/ 查询/ 结果/ 估计/ 算法/ 可以/ 分为/ 两类/ ,/ 一类/ 是/ 通过/ 样本/ 和/ 总体/ 数据量/ 的/ 大小/ 对/ 样本/ 的/ 聚集/ 结果/ 进行/ 扩展/ [/ 61/ ,/ 64/ ]/ ./ 假设/ 查询/ 语句/ 为/ SELECTop/ (/ expression/ (/ t/ )/ )/ FROMT/ ./ 设/ 随机变量/ 为/ |/ T/ |/ ×/ expressionp/ (/ t/ )/ ,/ 当/ 元组/ t/ 满足/ 查询/ 选择/ 条件/ 时/ ,/ expressionp/ (/ t/ )/ 的/ 取值/ 为/ expression/ (/ t/ )/ ,/ 否则/ 取值/ 为/ 0/ ,/ 则/ 总体/ 均值/ μ/ 即/ 为/ 聚集/ 查询/ 结果/ ,/ 总体/ 方差/ 为/ σ/ 2/ ./ 根据/ 中心/ 极限/ 定理/ ,/ 当/ 采样/ 数据/ 随机/ 且/ 无偏/ 时/ ,/ 样本/ 数据/ 的/ 均值/ μ/ -/ 趋近/ 一个/ 均值/ 为/ μ/ ,/ 方差/ 为/ σ/ 2/ // n/ 的/ 正态分布/ ./ 设/ Tn/ 是/ 总体/ 表/ T/ 的/ 采样/ 数据/ 集合/ ,/ 那么/ 总体/ 查询/ 结果/ 可/ 通过/ 用/ T/ 和/ Tn/ 的/ 大小/ 比例/ 对/ 全表/ 数据/ 的/ expressionp/ (/ t/ )/ 之/ 和/ 进行/ 扩展/ 得到/ ./ 这种/ 方法/ 实现/ 简单/ ,/ 而且/ 支持/ 增量/ 计算/ ./ 但是/ 需要/ 预先/ 得到/ 总体/ 表/ 的/ 数据量/ ,/ 而且/ 查询/ 结果/ 的/ 估计/ 受/ 数据分布/ 和/ 采样/ 质量/ 的/ 影响/ 较大/ ./ 为了/ 解决/ 上述/ 问题/ ,/ Pansare/ 等/ 人/ [/ 54/ ]/ 提出/ 了/ 利用/ 未知/ 样本/ 概率分布/ 进行/ 估计/ 的/ 方法/ ,/ 假设/ 每个/ 数据/ 块/ 在/ MapReduce/ 中/ 的/ 调度/ 时间/ 和/ 处理/ 时间/ 均/ 与/ 聚集/ 结果/ 相关/ ,/ 并/ 针对/ 每个/ 数据/ 块/ blocki/ 构造/ 随机变量/ Zi/ =/ (/ xi/ ,/ tschi/ ,/ tproci/ )/ ./ 该/ 方法/ 利用/ 贝叶斯/ 公式/ ,/ 根据/ 已/ 处理/ 完/ 数据/ 块/ 的/ 聚集/ 值/ 计算/ 未/ 处理/ 样本/ 数据/ 聚集/ 值/ 的/ 概率分布/ :/ P/ (/ Θ/ |/ X/ )/ =/ P/ (/ X/ |/ Θ/ )/ P/ (/ Θ/ )/ 表示/ 未/ 处理/ 样本/ 的/ 聚集/ 值/ ;/ X/ 表示/ 已经/ 处理/ 完/ 样本/ 的/ 聚集/ 值/ ./ 总体/ 的/ 查询/ 结果/ 通过/ 对/ P/ (/ Θ/ |/ X/ )/ 积分/ 进行/ 估计/ ./ 这种/ 方法/ 通过/ 贝叶斯/ 理论/ 从/ 一定/ 程度/ 上/ 消除/ 了/ 采样/ 数据/ 不/ 均衡/ 所/ 带来/ 的/ 问题/ ,/ 但是/ 算法/ 的/ 假设/ 较强/ ,/ 而且/ 只能/ 支持/ 一个/ MapReduce/ 作业/ 的/ 查询处理/ ,/ 不/ 支持/ 由/ 多个/ MapReduce/ 作业/ 构成/ 的/ 多表/ 聚集/ 的/ 结果/ 估计/ ./ 估计/ 方法/ 理论依据/ 聚集/ 类型/ 利用/ 样本/ 和/ 总体/ 数据量/ [/ 61/ ,/ 64/ ]/ 利用/ 未知/ 样本/ 概率分布/ [/ 54/ ]/ (/ 4/ )/ 结果/ 收敛/ 程度/ 计算/ ./ 结果/ 收敛/ 程度/ 主要/ 用来/ 衡量/ 当前/ 估计值/ 和/ 实际/ 结果/ 的/ 差距/ ,/ 帮助/ 用户/ 判断/ 估计/ 结果/ 是否/ 达到/ 满意/ 的/ 程度/ ./ 目前/ 结果/ 收敛/ 程度/ 的/ 计算方法/ 有/ 两类/ ,/ 一类/ 采用/ 绘制/ “/ 收敛/ 曲线/ ”/ 的/ 方法/ 体现/ 随着/ 查询/ 不断/ 进行/ ,/ 估计/ 结果/ 的/ 变化/ 情况/ [/ 62/ ]/ ./ 变化/ 的/ 度量/ 标准/ 采用/ 以下/ 公式/ 计算/ :/ METRICf/ =/ diff/ (/ sig/ (/ Ri/ )/ ,/ sig/ (/ Rf/ )/ )/ ,/ 其中/ ,/ Rf/ 是/ 到/ 目前/ 查询/ 进程/ 为止/ 的/ 最新/ 结果/ ;/ Ri/ 是/ 与/ Rf/ 相邻/ 的/ 估计/ 结果/ ;/ sig/ (/ Ri/ )/ 代表/ 结果/ Ri/ 的/ 一个/ 标识/ ,/ 它/ 可以/ 是/ 完整/ 的/ 结果/ Ri/ ,/ 也/ 可以/ 是/ 能够/ 代表/ Ri/ 的/ 一个/ 压缩/ 表征/ ;/ diff/ (/ )/ 用于/ 计算/ 两个/ 结果/ 标识/ 的/ 欧氏/ 距离/ ./ 用户/ 可以/ 根据/ 收敛/ 曲线/ 的/ 斜率/ 来/ 推测/ 查询/ 结果/ 后续/ 的/ 变化/ 情况/ ./ 这种/ 方法/ 计算/ 量/ 不大/ ,/ 实现/ 起来/ 也/ 比较/ 容易/ ,/ 收敛/ 曲线/ 可以/ 让/ 用户/ 直观/ 地/ 观察/ 出/ 估计/ 结果/ 的/ 变化/ ./ 但/ 其/ 缺点/ 是/ 无法/ 给出/ 估计值/ 的/ 精确度/ ,/ 而且/ 仅仅/ 根据/ 相邻/ 结果/ 的/ 距离/ 来/ 体现/ 收敛/ 程度/ 还/ 不够/ 准确/ ./ 另一类/ 收敛/ 程度/ 衡量/ 方法/ 是/ 给定/ 置信度/ α/ ,/ 在/ 每次/ 采样/ 并/ 得到/ 查询/ 估计值/ 后/ 计算/ 实际/ 查询/ 结果/ vr/ 的/ 置信区间/ [/ v/ -/ ε/ ,/ v/ +/ ε/ ]/ [/ 54/ ,/ 56/ -/ 57/ ,/ 61/ ]/ ,/ 这/ 意味着/ vr/ 落入/ 置信区间/ 的/ 概率/ 为/ α/ ./ 随着/ 查询/ 的/ 不断/ 进行/ ,/ 置信区间/ 的/ 宽度/ 逐渐/ 变窄/ ,/ 用户/ 可/ 根据/ 区间/ 的/ 宽度/ 判断/ 查询/ 是否/ 提前/ 终止/ ./ 当/ 样本/ 数据/ 随机/ 且/ 无偏/ 时/ ,/ 根据/ 中心/ 极限/ 定理/ ,/ 置信区间/ 可/ 表示/ 为/ [/ μ/ -/ -/ ε/ ,/ μ/ -/ +/ ε/ ]/ ,/ ε/ =/ n/ // 槡/ n/ [/ 56/ -/ 57/ ,/ 61/ ]/ ,/ 其中/ ,/ Z/ α/ 是/ 和/ 置信度/ 相关/ 的/ 分/ 位点/ ;/ z/ α/ σ/ -/ n/ 是/ 样本/ 数据/ 的/ 方差/ ,/ n/ 是/ 样本/ 数据量/ ./ 文献/ [/ 54/ ]/ 通/ σ/ -/ 过/ 贝叶斯/ 公式/ 计算/ 未知/ 样本/ 的/ 分布/ 函数/ ,/ 并/ 在/ 此基础/ 上/ 使用/ Gibbs/ 采样/ 算法/ [/ 65/ ]/ 计算/ 置信区间/ ./ 通过/ 置信区间/ 可以/ 比较/ 精确/ 的/ 反应/ 估计值/ 的/ 收敛/ 程度/ ,/ 目前/ 在/ 云/ 环境/ 下/ 的/ 相关/ 工作/ 还/ 局限于/ 单个/ MapReduce/ 作业/ ,/ 如何/ 计算/ 多表/ 或者/ 多个/ MapReduce/ 作业/ 构成/ 的/ 聚集/ 查询/ 的/ 置信区间/ 仍/ 是/ 待/ 解决/ 的/ 问题/ ./ 4/ 未来/ 工作/ 展望/ 作为/ 一项/ 高性价比/ 管理/ 海量/ 数据/ 的/ 技术/ ,/ 云数/ Page13/ 据/ 管理系统/ 引起/ 了/ 工业界/ 和/ 学术界/ 的/ 广泛/ 关注/ ./ 本文/ 依据/ 云/ 数据/ 管理系统/ 框架/ 对云/ 数据/ 查询/ 技术/ 的/ 相关/ 工作/ 进行/ 了/ 总结/ 和/ 分析/ ./ 总体/ 来说/ ,/ 目前/ 该/ 领域/ 的/ 研究/ 工作/ 处于/ 起步/ 阶段/ ,/ 还/ 存在/ 着/ 大量/ 有/ 价值/ 的/ 研究/ 问题/ :/ (/ 1/ )/ 数据分布/ 策略/ ./ 数据/ 的/ 组织/ 情况/ 会/ 直接/ 影响/ 数据/ 插入/ 以及/ 查询/ 的/ 效率/ ,/ 均匀/ 的/ 数据分布/ 将/ 大大提高/ 数据/ 存取/ 的/ 性能/ ./ 在/ 云/ 数据/ 管理系统/ 中/ ,/ 数据/ 被/ 划分/ 到/ 多个/ 节点/ 进行/ 存储管理/ ,/ 其/ 存储/ 的/ 节点/ 位置/ 往往/ 由/ 每条/ 记录/ 的/ 主/ 键值/ 决定/ ./ 现有/ 的/ 工作/ 一般/ 选择/ 单个/ 字/ 段/ 或者/ 多个/ 字段/ 的/ 简单/ 组合/ 作为/ 主/ 键值/ ,/ 而/ 没有/ 考虑/ 到/ 对/ 数据分布/ 的/ 影响/ ①/ [/ 66/ ]/ ./ 对于/ 这个/ 问题/ ,/ 可以/ 从/ 以下/ 两个/ 方面/ 来/ 考虑/ :/ 首先/ 根据/ 查询/ 类型/ 和/ 数据分布/ 情况/ 选定/ 生成/ 主/ 键值/ 的/ 字/ 段/ ,/ 这些/ 字段/ 的/ 组合/ 应当/ 能够/ 唯一/ 地/ 确定/ 主/ 键值/ ,/ 并/ 有利于/ 数据/ 的/ 分散/ 和/ 查询/ 时/ 数据/ 记录/ 的/ 定位/ ;/ 其次/ ,/ 设计/ 从/ 多维/ 字段/ 的/ 定义域/ 到/ 线性/ 主/ 键值/ 的/ 映射函数/ ,/ 该/ 函数/ 要/ 保证/ 数据分布/ 的/ 负载/ 均衡/ ,/ 并/ 在/ 查询处理/ 过程/ 中/ 尽可能/ 地/ 缩小/ 目标/ 数据/ 集/ 大小/ ./ 此外/ ,/ 这种/ 数据分布/ 策略/ 应当/ 具有/ 自适应性/ ,/ 可以/ 根据/ 插入/ 数据/ 的/ 不断/ 变化/ 而/ 进行/ 相应/ 的/ 调整/ ./ (/ 2/ )/ 索引/ 管理/ 技术/ ./ 目前/ 在/ 云/ 数据/ 管理系统/ 中/ 针对/ 海量/ 数据/ 的/ 索引/ 已经/ 有/ 一些/ 研究/ 工作/ ,/ 并/ 取得/ 了/ 相应/ 的/ 成果/ ,/ 在/ 以下/ 两个/ 方面/ 还有/ 待/ 深入研究/ ./ 一方面/ ,/ 目前/ 云/ 数据/ 管理系统/ 中/ 的/ 索引/ 方案/ 大都/ 是/ 以/ 关系数据库/ 中/ 的/ 索引/ 为/ 基础/ ,/ 对/ 其/ 进行/ 适当/ 修改/ 而成/ ./ 这些/ 索引/ 都/ 是/ 基于/ 磁盘/ 的/ 索引/ ,/ 比较/ 适合/ 于/ 相对/ 稳定/ 的/ 数据/ ./ 但是/ 对于/ 数据/ 频繁/ 更新/ 的/ 情况/ ,/ 索引/ 更新/ 维护/ 的/ 代价/ 比较/ 高/ ./ 因此/ ,/ 如何/ 在/ 云/ 计算环境/ 下/ ,/ 设计/ 能/ 支持/ 频繁/ 更新/ 和/ 多维/ 查询/ 的/ 索引/ 方案/ 是/ 一个/ 富有/ 挑战性/ 的/ 工作/ ./ 另一方面/ ,/ 现有/ 的/ 索引/ 大都/ 能够/ 支持/ 点/ 查询/ 、/ 范围/ 查询/ 等/ 简单/ 查询/ ,/ 但/ 对于/ 一些/ 复杂/ 查询/ 无法/ 提供/ 很/ 好/ 的/ 支持/ ./ 特别/ 是/ 在/ 一些/ 特定/ 的/ 应用领域/ ,/ 如/ 海量/ 空间数据/ 管理/ 、/ 海量/ 时间/ 序列/ 数据管理/ 等/ 领域/ ,/ 往往/ 需要/ 支持/ 一些/ 相对/ 比较复杂/ 的/ 查询/ ./ 因此/ ,/ 针对/ 某些/ 特定/ 的/ 应用领域/ ,/ 设计/ 相应/ 的/ 索引/ 方案/ ,/ 能够/ 支持/ 一些/ 特定/ 的/ 复杂/ 查询/ ,/ 具有/ 重要/ 的/ 意义/ ./ (/ 3/ )/ 查询/ 优化/ 算法/ ./ 查询处理/ 方法/ 和/ 优化/ 策略/ 对云/ 数据/ 管理系统/ 来说/ 是/ 一个/ 关键性/ 的/ 问题/ ./ 目前/ 的/ 研究/ 工作/ 主要/ 侧重/ 在/ 利用/ MapReduce/ 处理/ 框架/ 实现/ 一些/ 关系数据库/ 中/ 传统/ 的/ 查询处理/ 算法/ ,/ 或者/ 改进/ MapReduce/ 调度/ 算法/ 和/ 处理/ 流程/ 以/ 适应/ 查询处理/ 算法/ ,/ 但是/ 对云/ 计算环境/ 下/ 数据/ 存储/ 和/ 查询处理/ 的/ 特点/ 考虑/ 得/ 较/ 少/ ./ 云/ 计算环境/ 和/ 传统/ 的/ 单机/ 数据库/ 环境/ 相比/ ,/ 数据量/ 大/ 而且/ 分布/ 存储/ ,/ 但是/ 数据/ 的/ 划分/ 技术/ 却/ 不如/ 分布式/ 数据库/ 中/ 的/ 划分/ 技术/ 成熟/ ,/ 因此/ 数据/ 的/ 分布/ 往往/ 比较/ 粗犷/ ,/ 很难/ 利用/ 数据/ 划分/ 带来/ 的/ 查询/ 优势/ ;/ 另外/ 为了/ 达到/ 较/ 高/ 的/ 可用性/ 和/ 容错性/ ,/ 数据/ 往往/ 存在/ 多个/ 冗余/ 备份/ ,/ 我们/ 认为/ 利用/ 备份/ 数据/ 进行/ 查询/ 并行度/ 和/ 数据传输/ 方面/ 的/ 优化/ 是/ 很/ 有/ 意义/ 的/ ./ 在/ 进行/ 查询/ 优化/ 的/ 过程/ 中/ ,/ 增加/ 并行度/ 可以/ 充分利用/ 系统/ 的/ 计算资源/ ,/ 提高/ 查询/ 性能/ ,/ 但是/ 单纯/ 的/ 增加/ 并行度/ 可能/ 导致/ 传输数据/ 代价/ 过大/ ,/ 从而/ 造成/ 网络/ 拥塞/ 和/ 计算/ 节点/ 的/ 空闲/ 等待/ ;/ 而/ 单纯/ 的/ 最小化/ 传输/ 代价/ 则/ 可能/ 导致/ 数据/ 倾斜/ 问题/ 加重/ ,/ 因此/ 如何/ 寻求/ 查询/ 并行度/ 和/ 数据传输/ 代价/ 的/ 平衡/ 也/ 是/ 一个/ 不容忽视/ 的/ 问题/ ./ 以上/ 讨论/ 的/ 是/ 根据/ 优化/ 规则/ 生成/ 查询/ 计划/ 和/ 执行/ 查询/ 计划/ 的/ 问题/ ,/ 然而/ 对/ 不同/ 的/ 数据量/ 和/ 数据分布/ 其/ 最优/ 的/ 查询/ 计划/ 也/ 不/ 相同/ ,/ 如何/ 为/ 不同/ 的/ 查询/ 选择/ 查询/ 计划/ 也/ 是/ 一个/ 亟待解决/ 的/ 问题/ ./ 查询/ 计划/ 的/ 选择/ 往往/ 通过/ 估算/ 其/ 查询/ 代价/ 进行/ ,/ 代价/ 可以/ 通过/ 查询/ 总开销/ 和/ 总/ 时间/ 表示/ ./ 结合/ 云/ 计算环境/ 下/ 数据/ 和/ 查询/ 的/ 特点/ 建立/ 不同/ 查询/ 算法/ 的/ 代价/ 计算/ 模型/ 也/ 是/ 颇具/ 挑战性/ 的/ 问题/ ./ (/ 4/ )/ 查询/ 进程/ 估计/ ./ 相比/ 于/ 传统/ 的/ 分布式/ 数据库/ ,/ 云/ 计算环境/ 中/ 查询/ 进程/ 和/ 剩余时间/ 的/ 估计/ 有着/ 更/ 重要/ 的/ 作用/ ./ 一方面/ ,/ 云/ 环境/ 下/ 往往/ 面临/ 生物/ 、/ 气象/ 等/ 领域/ 大规模/ 数据/ 的/ 查询/ 和/ 分析/ ,/ 运行/ 时间/ 较长/ ,/ 有/ 的/ 查询/ 甚至/ 需要/ 十几天/ [/ 67/ ]/ ,/ 提供/ 查询/ 剩余时间/ 的/ 反馈/ 对/ 用户/ 来说/ 有/ 很/ 强/ 的/ 实用价值/ ./ 另外/ ,/ 对于/ 云/ 环境/ 下/ 的/ 一些/ 查询/ 时间/ 较/ 短/ 但是/ 实时性/ 要求/ 比较/ 高/ 的/ 应用/ ,/ 进程/ 估计/ 会/ 给/ 查询/ 任务/ 的/ 调度/ 提供/ 重要/ 的/ 参考/ ./ 对/ 查询/ 代价/ 的/ 估算/ 、/ 在线/ 聚集/ 的/ 实现/ 、/ 云/ 环境/ 的/ 性能/ 调优/ 和/ 资源配置/ 等/ 问题/ 来说/ ,/ 进程/ 估计/ 也/ 是/ 一个/ 非常/ 关键/ 的/ 步骤/ ./ 在/ 云/ 环境/ 下/ 实现/ 查询/ 进程/ 估计/ 不仅/ 任务/ 并行/ 带来/ 的/ 挑战/ ,/ 云/ 环境/ 中/ 集群/ 规模/ 庞大/ 、/ 节点/ 异构/ 、/ 高/ 出错率/ 、/ 和/ 数据/ 倾斜/ 等/ 特点/ 使得/ 这个/ 问题/ 解决/ 起来/ 更加/ 困难/ ./ 目前/ 的/ 研究/ 工作/ 主要/ 考虑/ 了/ 并行/ 的/ 因素/ [/ 16/ ,/ 68/ ]/ ,/ 但是/ 对于/ 其他/ 云/ 环境/ 的/ 特点/ 没有/ 考虑/ ,/ 如何/ 在/ 一个/ 大规模/ 的/ 云/ 环境/ 下/ 提供/ 准确/ 的/ 查询/ 进程/ 估计/ 还有/ 很多/ 研究/ 工作/ 要/ 做/ ./ (/ 5/ )/ 基于/ 多表/ 的/ 在线/ 聚集/ 算法/ ./ 从/ 聚集/ 结果/ 估计/ 和/ 置信区间/ 的/ 计算/ 来看/ ,/ 已有/ 的/ 相关/ 工作/ 主要/ 侧重/ 在/ 包含/ 一个/ MapReduce/ 作业/ 聚集/ 查询/ 的/ OLA/ 算法/ 设计/ ./ 实际/ 应用/ 中/ 经常/ 涉及/ 到/ 基于/ 多表/ 的/ 复杂/ ①/ http/ :/ // // pkghosh/ ./ wordpress/ ./ com/ // 2010/ // 09/ // 19/ // Page14/ 查询/ ,/ 他们/ 往往/ 由/ 多个/ MapReduce/ 作业/ 构成/ ,/ 实现/ 这种/ 查询/ 的/ 在线/ 聚集/ 是/ 一个/ 亟待解决/ 的/ 问题/ ./ 在/ 传统/ 的/ MapReduce/ 作业处理/ 流程/ 中/ ,/ 每个/ 操作/ 任务/ 完成/ 后/ 将/ 输出/ 数据/ 写入/ 文件/ ,/ 后面/ 的/ 操作/ 任务/ 才能/ 开始/ ./ OLA/ 要求/ 数据/ 以/ 增量/ 的/ 方式/ 进行/ 处理/ ,/ 因此/ 多/ MapReduce/ 作业/ 的/ OLA/ 必须/ 在/ 处理过程/ 流水线/ 化/ 的/ MapReduce/ 上/ 实现/ ./ 在/ 设计/ 聚集/ 查询处理/ 和/ 置信区间/ 计算/ 算法/ 时/ 还/ 需要/ 结合/ MapReduce/ 以及/ 云/ 计算环境/ 的/ 特点/ 提高/ 在线/ 聚集/ 的/ 处理速度/ ,/ 比如/ 减少/ 混洗/ 过程/ 中/ 数据传输/ 量/ 和/ reduce/ 阶段/ 的/ 工作/ ,/ 尽量避免/ 增量/ 计算/ 过程/ 中/ 的/ 重复/ 工作/ 等/ ./ 从/ 数据/ 采样/ 的/ 实现/ 过程/ 来看/ ,/ 样本/ 的/ 随机性/ 和/ 无偏性/ 会/ 直接/ 影响/ 查询/ 结果/ 估计/ 的/ 准确性/ 以及/ 置信区间/ 的/ 收敛/ 速度/ ,/ 已有/ 的/ 研究/ 工作/ 往往/ 假设/ 数据/ 以/ 随机/ 顺序存储/ 或者/ 假设/ 一个/ 随机/ 数据/ 队列/ 的/ 存在/ ,/ 从队/ 头/ 读取数据/ 即可/ 达到/ 随机/ 的/ 效果/ ./ 然而/ 在/ 实际/ 应用/ 中/ ,/ 数据/ 的/ 存储/ 顺序/ 往往/ 与/ 某个/ 属性/ 相关/ ,/ 如何/ 从/ 这种/ 非/ 随机/ 分布/ 的/ 数据/ 上/ 进行/ 随机/ 采样/ 是/ 在线/ 聚集/ 过程/ 中/ 的/ 一个/ 关键问题/ ./ 数据/ 的/ 随机/ 采样/ 技术/ 在/ 单机/ 数据库/ 上/ 有/ 很多/ 研究/ 工作/ [/ 56/ ,/ 64/ ,/ 69/ -/ 70/ ]/ ,/ 提出/ 的/ 方法/ 包括/ 堆/ 文件/ 扫描/ [/ 56/ ]/ 、/ 索引/ 扫描/ [/ 64/ ]/ 、/ 伯努利/ 模型/ 采样/ [/ 69/ ]/ 等/ ./ 云/ 计算环境/ 下/ 数据分布/ 在/ 大量/ 节点/ 上/ ,/ 而且/ 数据/ 的/ 读写/ 以块/ 为/ 单位/ 进行/ ,/ 这些/ 特点/ 增加/ 了/ 随机/ 采样/ 的/ 难度/ ,/ 值得/ 深入研究/ ./ 文献/ [/ 70/ ]/ 针对/ 直方图/ 估计/ 提出/ 了/ 以/ 数据/ 块/ 为/ 单位/ 的/ 采样/ 方法/ ,/ 并/ 利用/ 交叉/ 验证/ 的/ 思想/ 推导/ 出/ 估计值/ 的/ 准确性/ 与/ 样本/ 大小/ 和/ 数据分布/ 的/ 关系/ 公式/ ,/ 其/ 思想/ 可以/ 借鉴/ 到/ 云/ 数据/ 在线/ 聚集/ 的/ 采样/ 算法/ 中/ ./ 不同之处/ 是/ 该/ 文献/ 提出/ 的/ 算法/ 是/ 一个/ 一次性/ 采样/ 的/ 过程/ ,/ 而/ 在线/ 聚集/ 要求/ 采样/ 算法/ 是/ 在线/ 并且/ 增量/ 的/ 过程/ ,/ 即/ 它/ 能够/ 保证/ 样本/ 大小/ 平缓/ 增长/ 而且/ 时刻/ 保持/ 随机/ 的/ 顺序/ ./ 在线/ 采样/ 过程/ 中/ 不仅/ 要/ 保证数据/ 随机性/ ,/ 还/ 必须/ 保证/ 每步/ 采样/ 的/ 数据/ 与/ 已/ 采样/ 本/ 数据/ 不/ 重复/ ,/ 这/ 也/ 是/ 算法/ 设计/ 中/ 必须/ 考虑/ 的/ 问题/ ./ 5/ 结论/ 随着/ 信息产业/ 的/ 不断/ 发展/ ,/ 计算机/ 要/ 处理/ 的/ 数据/ 规模/ 呈/ 指数/ 级/ 增长/ ,/ 各种/ 应用/ 对/ 数据管理/ 的/ 需求/ 也/ 变得/ 多样化/ ,/ 统一/ 而/ 复杂/ 的/ 关系数据库/ 已经/ 不能/ 满足/ 纷繁/ 多样/ 的/ 应用/ ./ 云/ 数据/ 管理系统/ 为/ 海量/ 数据管理/ 提供/ 了/ 一种/ 高性价比/ 的/ 解决方案/ ,/ 日益/ 成为/ 学术界/ 和/ 工业界/ 共同/ 关注/ 的/ 热门/ 问题/ ./ 本文/ 对/ 近几年/ 国内外/ 在/ 云/ 数据/ 查询/ 领域/ 的/ 主要/ 研究成果/ 进行/ 了/ 总结/ ,/ 综述/ 了/ 云/ 数据/ 管理系统/ 中/ 查询/ 技术/ 若干/ 主要/ 问题/ 的/ 研究/ 现状/ ,/ 包括/ 云/ 数据/ 的/ 索引/ 管理/ 、/ 查询处理/ 、/ 查询/ 优化/ 以及/ 在线/ 聚集/ 等/ ,/ 并/ 对/ 相关/ 技术/ 进行/ 了/ 深入/ 的/ 对比/ 分析/ ,/ 最后/ 指出/ 仍然/ 存在/ 的/ 问题/ 和/ 可能/ 的/ 解决办法/ ./ 总的来说/ ,/ 云/ 数据/ 管理系统/ 中/ 查询/ 技术/ 的/ 研究/ 仍然/ 处于/ 刚刚/ 起步/ 的/ 阶段/ ,/ 仍然/ 有/ 大量/ 具有/ 挑战性/ 的/ 关键问题/ 需要/ 深入研究/ ,/ 为/ 国内/ 的/ 数据库/ 研究者/ 提供/ 了/ 广阔/ 的/ 研究/ 空间/ ./ 

