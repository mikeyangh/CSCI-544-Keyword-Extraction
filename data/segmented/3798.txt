Page1/ 线性/ 加速/ 比/ 并行/ 实时/ 任务/ 的/ 节能/ 研究/ 林宇晗/ 孔/ 繁鑫/ 徐惠婷/ 金曦/ 邓庆绪/ (/ 东北大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110004/ )/ 摘要/ 节能/ 设计/ 是/ 嵌入式/ 实时/ 系统/ 中/ 一个/ 重要/ 的/ 研究/ 方向/ ./ 目前/ 的/ 研究/ 大多/ 采用/ 串行/ 任务模型/ ,/ 很少/ 关注/ 并行任务/ ./ 文中/ 研究/ 了/ 在/ 离散/ 工作/ 模式/ 与/ 实时/ 约束/ 下/ ,/ 多核/ 平台/ 下/ 的/ 线性/ 加速/ 比/ 并行/ 实时/ 任务/ 的/ 能耗/ 最小化/ 问题/ ./ 文中/ 假设/ 所有/ 处理器/ 核都/ 支持/ DVS/ 技术/ 且/ 加速/ 比是/ 线性/ 的/ ,/ 在/ 此/ 条件/ 下/ ,/ 文中/ 首先/ 给出/ 一个/ 定理/ 证明/ 了/ 当/ 各/ 任务/ 执行/ 在/ 系统/ 全部/ 核上/ 时/ 系统/ 能耗/ 最小/ ./ 然后/ ,/ 将/ 问题/ 建模/ 为/ 一个/ 0/ -/ 1/ 整数/ 线性规划/ ,/ 利用/ 最早/ 截止期/ 优先/ 算法/ 确定/ 任务调度/ ,/ 并/ 给出/ 了/ 两个/ 高效/ 的/ 节能/ 算法/ 确定/ 各/ 任务/ 的/ 工作频率/ ./ 文中/ 最后/ 通过/ 大量/ 的/ 模拟实验/ ,/ 证明/ 提出/ 的/ 算法/ 的/ 效果显著/ ,/ 可以/ 达到/ 几乎/ 与/ 最优/ 解/ 相同/ 的/ 节能/ 效果/ ./ 关键词/ 实时/ 系统/ ;/ 并行任务/ ;/ 能耗/ 最小化/ ;/ 动态/ 电压/ 缩放/ ;/ 多核/ 1/ 引言/ 随着/ 电子/ 信息产业/ 的/ 快速/ 发展/ ,/ 嵌入式/ 技术/ 的/ 应用/ 也/ 日趋/ 广泛/ ./ 嵌入式/ 设备/ 的/ 性能/ 大幅度提高/ ,/ 对/ 能源/ 的/ 需求/ 不断/ 上升/ ./ 能耗/ 的/ 增长/ 不仅/ 制约/ 了/ 嵌入式/ 系统/ 集成度/ 的/ 增加/ ,/ 并且/ 需要/ 复杂/ 的/ 散热/ 技术/ ,/ 这/ 更是/ 提高/ 了/ 产品成本/ [/ 1/ ]/ ./ 因此/ ,/ 怎样/ 更/ 有效/ 地/ 节能/ 已成/ 了/ 嵌入式/ 系统/ 研究/ 的/ 热点问题/ ./ 动态/ 电压/ 缩放/ 技术/ [/ 2/ ]/ (/ DynamicVoltage/ // Fre/ -/ quencyScaling/ ,/ DVFS/ )/ 作为/ 一种/ 有效/ 的/ 节能/ 技术/ ,/ 在/ 学术界/ 和/ 业界/ 被/ 广泛/ 研究/ 和/ 采用/ ./ DVFS/ 技术/ 可以/ 使/ 处理器/ 的/ 电压/ 和/ 频率/ 动态/ 地/ 改变/ ,/ 由于/ 处理器/ 的/ 能耗/ 与其/ 频率/ 呈/ 凸函数/ 关系/ ,/ 而/ 任务/ 的/ 执行/ 时间/ 与/ 处理器/ 的/ 频率/ 呈/ 线性关系/ ,/ 所以/ DVFS/ 技术/ 能够/ 有效/ 地/ 降低/ CPU/ 的/ 能耗/ ./ 另一方面/ ,/ 随着/ 多核/ 处理器/ 技术/ 在/ 服务器/ 和/ PC机/ 上/ 的/ 广泛/ 使用/ ,/ 多/ 核技术/ 表现/ 出/ 同一/ 频率/ 下/ ,/ 性能/ 提高/ 快/ 、/ 功耗/ 密度/ 低等/ 特点/ ,/ 使得/ 多核/ 成为/ 嵌入式/ 系统/ 未来/ 的/ 统治/ 平台/ ./ 现有/ 的/ 多/ 核/ 节能/ 调度/ 方面/ 的/ 研究/ 主要/ 是/ 针对/ 串行/ 任务/ (/ sequentialtasks/ )/ 模型/ [/ 2/ ]/ ,/ 该/ 模型/ 假设/ 一个/ 任务/ 在/ 同一/ 时刻/ 只能/ 运行/ 在/ 一个/ 核上/ ,/ 而/ 不能/ 同时/ 运行/ 在/ 多个/ 核上/ ,/ 这/ 无法/ 发挥/ 出多/ 核技术/ 在/ 性能/ 上/ 的/ 优势/ ./ 随着/ 对系统/ 性能需求/ 的/ 急速/ 增长/ ,/ 并行处理技术/ 已经/ 被/ 广泛应用/ 在/ 高性能/ 计算/ 系统/ 中/ ,/ 如/ 图像处理/ 及/ 处理/ 大量/ 数据/ 的/ 科学计算/ 等/ ./ 伙伴/ 调度/ (/ Gangscheduling/ )/ 方式/ 是/ 一种/ 效率/ 最高/ 的/ 并行处理/ 策略/ ,/ 该/ 策略/ 将/ 任务/ 同时/ 分配/ 到/ 一组/ 处理器/ 上/ 执行/ ,/ 任务/ 的/ 各个/ 线程/ 执行/ 时间/ 总量/ 相同/ ,/ 并且/ 同时/ 开始/ 同步/ 执行/ ./ 在/ 实时/ 嵌入式/ 系统/ 中/ ,/ 并行处理技术/ 也/ 开始/ 得到/ 应用/ ,/ 如/ 机器人/ 机器/ 臂/ [/ 3/ ]/ 、/ 视频/ 处理/ [/ 4/ ]/ 等/ ./ 因此/ ,/ 并行任务/ 的/ 节能/ 问题/ 已/ 成为/ 嵌入式/ 实时/ 系统/ 领域/ 正在/ 兴起/ 的/ 研究/ 热点/ ./ 一些/ 研究/ 工作/ 已经/ 将/ Gangscheduling/ 策略/ 应用/ 到/ 解决/ 并行任务/ 的/ 实时/ 调度/ 问题/ 的/ 方法/ 中/ [/ 5/ -/ 7/ ]/ ,/ 但是/ 没有/ 讨论/ 能耗/ 的/ 影响/ ./ 如果/ 实时/ 系统/ 中/ 使用/ 没有/ 优化/ 处理器/ 频率/ 的/ 并行/ 任务调度/ 算法/ ,/ 将会/ 造成/ 系统/ 能耗/ 的/ 极大/ 浪费/ ./ 实际/ 系统/ 中/ 处理器/ 功耗/ 是/ 一组/ 和/ 频率/ 一一对应/ 的/ 离散/ 值/ ./ 现有/ 的/ 实时/ 系统/ 能耗/ 的/ 讨论/ 为了/ 简化/ 模型/ ,/ 往往/ 将/ 处理器/ 频率/ 值/ 假设/ 为/ 连续/ 改变/ 的/ ,/ 然而/ 这/ 并/ 不适/ 用于/ 实际/ 系统/ ./ 因此/ ,/ 本文/ 研究/ 更/ 接近/ 真实/ 处理器/ 频率/ 改变/ 情况/ 的/ 离散/ 处理器/ 频率/ 模型/ 中/ ,/ 线性/ 加速/ 比/ 模型/ 下/ [/ 8/ ]/ 的/ 多/ 核/ 并行/ 实时/ 任务/ 的/ 节能/ 调度/ 问题/ ,/ 提出/ 了/ 两个/ 满足/ 时间/ 约束/ ,/ 采用/ Gangscheduling/ 策略/ 的/ 并行任务/ 能耗/ 优化/ 算法/ ./ 具体/ 贡献/ 如下/ :/ (/ 1/ )/ 首先/ 给出/ 一个/ 定理/ ,/ 证明/ 能耗/ 最小化/ 时/ 的/ 一个/ 充分条件/ :/ 将/ 各/ 任务/ 都/ 执行/ 在/ 系统/ 中/ 的/ 全部/ 核上/ ./ (/ 2/ )/ 其次/ ,/ 将/ 该/ 问题/ 建模/ 为/ 0/ -/ 1/ 整数/ 线性规划/ ,/ 得到/ 最优/ 解/ ;/ 然后/ ,/ 基于/ 层/ 装箱/ 算法/ ,/ 提出/ 了/ 两个/ 多项式/ 复杂度/ 的/ 节能/ 调度/ 算法/ ./ (/ 3/ )/ 最后/ ,/ 进行/ 大量/ 模拟实验/ ,/ 结果表明/ 提出/ 的/ 多项式/ 算法/ 与/ 最优/ 解/ 基本相同/ ,/ 达到/ 了/ 很/ 好/ 的/ 节能/ 效果/ ./ 本文/ 第/ 2/ 节/ 提出/ 系统/ 模型/ 及/ 问题/ 定义/ ;/ 第/ 3/ 节/ 证明/ 相关/ 定理/ 并/ 给出/ 数学/ 规划/ 模型/ ;/ 第/ 4/ 节/ 给出/ 并行/ 实时/ 任务/ 节能/ 调度/ 算法/ ;/ 第/ 5/ 节/ 进行/ 实验/ 对比/ 及/ 结果/ 分析/ ;/ 第/ 6/ 节/ 总结/ 本文/ 并/ 给出/ 未来/ 工作/ ./ 2/ 系统/ 模型/ 2.1/ 任务模型/ 本文/ 研究/ 一个/ 具有/ M/ 个/ 独立/ 处理器/ 核心/ (/ 以下/ 简称/ 为/ 核/ )/ 的/ 同构/ 多核/ 处理器/ 系统/ ./ 考虑/ 实时/ 并行任务/ 集合/ τ/ =/ {/ τ/ 1/ ,/ …/ ,/ τ/ N/ }/ ,/ 任务/ 之间/ 彼此/ 独立/ ./ 任务/ τ/ i/ 的/ 最差/ 执行/ 时间/ (/ WCET/ ,/ 以下/ 简称/ 为/ 执行/ 时间/ )/ 为/ wceti/ ,/ 周期/ 设为/ Ti/ ,/ 任务/ 必须/ 在/ 下/ 一次/ 释放/ 前/ 完成/ ,/ 即/ 任务/ 的/ 周期/ 与/ 截止期/ 相等/ ./ 系统/ 的/ 利用率/ 可以/ 表示/ 为/ U/ =/ ∑/ N/ 的/ [/ 8/ -/ 9/ ]/ ,/ 并且/ 任务/ 执行/ 时间/ 与/ 工作频率/ 呈/ 线性关系/ ,/ 即当/ 任务/ τ/ i/ 工作频率/ 为/ f/ ,/ 且/ 并行度/ 为/ mi/ 时/ ,/ 任务/ τ/ i/ 的/ 执行/ 时间/ 为/ 其中/ ,/ Ci/ 表示/ 当/ 处理器/ 频率/ 最大/ (/ f/ =/ fmax/ )/ 且/ 并行度/ 为/ 1/ 时/ ,/ 任务/ τ/ i/ 的/ 最坏/ 执行/ 时间/ ./ 任务/ 的/ 并行度/ 为/ 执行/ 该/ 任务/ 的/ 核/ 的/ 数量/ ./ 根据/ 并行任务/ 不同/ 的/ 执行/ 灵活/ 度/ ,/ 即/ 并行度/ 可/ 改变/ 程度/ ,/ 一个/ 任务/ 可以/ 分为/ 3/ 类/ :/ (/ 1/ )/ 刚性/ 任务/ (/ rigidtask/ )/ ,/ 该类/ 任务/ 的/ 并行度/ 在/ 运行/ 前/ 就/ 已/ 固定/ [/ 6/ ,/ 9/ ]/ ;/ (/ 2/ )/ 可塑/ 任务/ (/ moldabletask/ )/ ,/ 该类/ 任务/ 的/ 并行度/ 在/ 每次/ 启动/ 时/ 进行/ 确定/ ,/ 在/ 其/ 整个/ 执行/ 过程/ 中/ 保持/ 不变/ [/ 4/ ,/ 6/ ]/ ;/ (/ 3/ )/ 可变/ 任务/ (/ malleabletask/ )/ ,/ 该类/ 任务/ 的/ 并行度/ 在/ 其/ 执行/ 过程/ 中/ 可以/ 任意/ 改变/ [/ 8/ ,/ 10/ -/ 11/ ]/ ./ 本文/ 主要/ 研究/ 并行度/ 可变/ 的/ 任务/ ,/ 包括/ 可塑/ 任务/ 和/ 可变/ 任务/ ,/ 并且/ 采用/ Gangscheduling/ 的/ 并行/ 调度/ 策略/ ,/ 因此/ ,/ 任务/ 的/ 所有/ 线程/ 都/ 同时/ 开始/ ,/ 同步/ 执行/ ./ Page32/ ./ 2/ 能耗/ 模型/ 本文/ 假设/ 处理器/ 支持/ DVFS/ 技术/ ,/ 每个/ 核都/ 可以/ 根据/ 应用程序/ 的/ 要求/ 动态/ 地/ 调整/ 自己/ 的/ 频率/ f/ 和/ 电压/ v/ ,/ 并且/ 都/ 有/ Q/ 个/ 有效/ 的/ 工作/ 状态/ ,/ 记/ 为/ 离散/ 集合/ (/ F/ ,/ V/ )/ {/ (/ f1/ ,/ v1/ )/ …/ (/ fQ/ ,/ vQ/ )/ }/ ,/ f1/ </ …/ </ fQ/ ./ 对于/ 每/ 一个/ 工作/ 状态/ 都/ 有/ 唯一/ 的/ 功耗/ 与/ 之/ 对应/ ,/ 因此/ 我们/ 记/ 处理器/ 的/ 功耗/ 为/ P/ (/ f/ )/ ,/ 这里/ 采用/ 文献/ [/ 12/ ]/ 中/ 给出/ 频率/ 与/ 功耗/ 的/ 关系/ ,/ 即/ 呈/ 凸函数/ 关系/ :/ 其中/ α/ 是/ 一个/ 与/ 处理器/ 硬件/ 相关/ 的/ 常量/ [/ 13/ ]/ ./ 本文/ 只/ 考虑/ 处理器/ 能耗/ 的/ 优化/ ,/ 并/ 假设/ 外设/ 功耗/ 为/ 一/ 固定/ 常/ 数值/ ./ 结合/ 系统/ 外设/ 能耗/ 的/ 优化/ 将/ 作为/ 本文/ 的/ 未来/ 研究/ 工作/ ./ 因此/ ,/ 系统/ 能耗/ E/ 可/ 表示/ 为/ 本文/ 采用/ 任务/ 间/ 频率/ 调整/ 策略/ (/ inter/ -/ taskDVFS/ 策略/ )/ ,/ 即/ 每个/ 任务/ 在/ 其/ 执行/ 期间/ 只有/ 一个/ 工作/ 状态/ (/ 频率/ )/ ./ 故上/ 式/ 可/ 化简/ 为/ 定理/ 1/ ./ 对于/ 并行度/ 可变/ 的/ 任务/ ,/ 系统/ 中/ 各/ 任务/ 的/ 并行度/ 都/ 等于/ 核/ 的/ 个数/ M/ 是/ 系统/ 能耗/ 取得/ 最小值/ 的/ 一个/ 充分条件/ ,/ 即当/ 并行任务/ 分配/ 在/ 所有/ 核上/ 执行/ 时/ ,/ 必定/ 不会/ 丢失/ 最优/ 解/ ./ 证明/ ./ 为/ 不失/ 一般性/ ,/ 给定/ 一段时间/ T/ ,/ 使得/ 在/ 处理器/ 的/ 频率/ f/ 下/ 任务/ τ/ i/ 的/ 执行/ 时间/ 等于/ T/ ,/ 则/ T/ =/ Cif/ ·/ mi/ 任务/ τ/ i/ 在/ 时间/ T/ 内/ 的/ 处理器/ 能耗/ Ei/ 可/ 表示/ 为/ 又/ 因为/ P/ (/ f/ )/ ∝/ f/ α/ ,/ α/ >/ 1/ ,/ 代入/ 上/ 式/ ,/ 所以/ τ/ i/ 的/ 处理器/ 能耗/ 其中/ Ci/ 和/ T/ 是/ 常数/ ./ 显然/ ,/ 当/ mi/ 取/ 最大值/ 时/ ,/ Ei/ 得到/ 最小/ 解/ ./ 因此/ ,/ 当/ 任务/ 的/ 并行度/ 等于/ 核/ 个数/ 时/ ,/ 一定/ 会/ 得到/ 最优/ 解/ ,/ 定理/ 1/ 成立/ ./ 由/ 定理/ 1/ ,/ 对于/ 可塑/ 和/ 可变/ 任务/ ,/ 本文/ 在/ 运行/ 前/ 为/ 每个/ 任务/ 都/ 分配/ M/ 个/ 核/ ,/ 这/ 保证/ 了/ 每个/ 任务/ 的/ 并行度/ 始终/ 都/ 为/ M/ ./ 由于/ 采用/ Gangscheduling/ 策略/ ,/ 因此/ 系统/ 在/ 任意/ 时刻/ 只有/ 一个/ 任务/ 在/ 一个/ 频率/ 下/ 被/ 执行/ ./ 同时/ 系统/ 需要/ 满足/ 实时/ 约束/ ,/ 这里/ 采用/ 最早/ 截止期/ 优先/ (/ EDF/ )/ 的/ 调度/ 算法/ [/ 14/ ]/ ,/ 因此/ 系统/ 的/ 利用率/ 之/ 和/ 不/ 大于/ 核/ 个数/ M/ :/ 即可/ 满足/ 系统/ 中/ 所有/ 实时/ 任务/ 都/ 在/ 其/ 截止期/ 之前/ 完成/ ./ 2.3/ 问题/ 定义/ 本文/ 研究/ 具有/ 相同/ 处理器/ 核/ 的/ 多/ 核/ 系统/ 中/ ,/ N/ 个/ 独立/ 并行任务/ 的/ 实时/ 系统/ 的/ 能耗/ 最小化/ 问题/ ./ 在/ 外设/ 能耗/ 为/ 常数/ 情况/ 下/ ,/ 为/ 使/ 系统/ 能耗/ 最小/ ,/ 任务/ 并行度/ 始终/ 等于/ 处理器/ 个数/ ,/ 因此/ 解决问题/ 的/ 关键在于/ 为/ 各个/ 任务分配/ 最佳/ 的/ 运行/ 频率/ ./ 由于/ 并行/ 任务调度/ 和/ 频率/ 分配/ 问题/ 是/ NP/ 难/ 的/ ,/ 因此/ 本文/ 的/ 目标/ 是/ 将/ 该/ 问题/ 建模/ 为/ 0/ -/ 1/ 整数/ 规划/ ,/ 并/ 提出/ 多项式/ 复杂度/ 的/ 启发式/ 算法/ ./ 3/ 能耗/ 最小化/ 最优/ 算法/ 上/ 一节/ 讨论/ 了/ 本文/ 研究/ 问题/ 的/ 模型/ 与/ 定义/ ,/ 本节/ 将/ 在/ 这个/ 基础/ 上/ 给出/ 最优/ 算法/ ,/ 即将/ 离散/ 频率/ 下/ 采用/ EDF/ 调度/ 的/ 并行任务/ 在/ 同构/ 多核/ 处理器/ 上/ 的/ 能耗/ 最小化/ 问题/ 建模/ 为/ 一个/ 0/ -/ 1/ 整数/ 规划/ 问题/ ./ 定义/ 变量/ ./ 对于/ 任务/ 集/ τ/ 我们/ 定义/ 一组/ 布尔/ 型/ 变量/ 数组/ x/ [/ N/ ]/ [/ Q/ ]/ 来/ 表示/ 任务/ 的/ 工作/ 状态/ ,/ 其中/ ,/ x/ [/ i/ ]/ [/ j/ ]/ 的/ 值/ 为/ 1/ 时/ 表示/ 任务/ τ/ i/ 工作/ 在/ 频率/ fj/ 下/ ,/ 这里/ ,/ i/ ∈/ 1/ ,/ [/ ]/ N/ ,/ j/ ∈/ [/ 1/ ,/ Q/ ]/ ./ 约束/ 1/ ./ 在/ 任意/ 时刻/ 每个/ 任务/ 只能/ 运行/ 在/ 一个/ 工作频率/ 上/ :/ 约束/ 2/ ./ 为了/ 满足/ EDF/ 可/ 调度/ 条件/ ,/ 所有/ 任务/ 的/ 利用率/ 之/ 和/ 必须/ 小于/ 等于/ 处理器/ 的/ 个数/ M/ :/ 其中/ ,/ ci/ (/ fj/ )/ 表示/ 任务/ τ/ i/ 在/ 频率/ fj/ 下/ 的/ 执行/ 时间/ ;/ Ti/ 表示/ 任务/ τ/ i/ 的/ 周期/ ./ 最优化/ 目标/ ./ 最小化/ 所有/ 任务/ 的/ 能耗/ 之/ 和/ ,/ 因此/ 得到/ 目标/ 函数/ 表达式/ :/ 其中/ Ei/ (/ fj/ )/ 表示/ 在/ 任务/ τ/ i/ 在/ 频率/ fj/ 下时/ 所/ 耗费/ 的/ 能耗/ ./ 这里/ ,/ 式/ (/ 8/ )/ 、/ (/ 9/ )/ 为/ 约束/ ,/ 式/ (/ 10/ )/ 为/ 优化/ 目标/ ,/ 构成/ 一个/ 变量/ 数为/ N/ ×/ Q/ 个/ 的/ 0/ -/ 1/ 整数/ 线性规划/ 问题/ ./ 4/ 启发式/ 算法/ 上/ 一节/ 讨论/ 了/ 本文/ 研究/ 的/ 问题/ 的/ 最优/ 算法/ ./ 众/ Page4/ 所/ 周知/ ,/ 0/ -/ 1/ 整数/ 规划/ 的/ 求解/ 被/ 证明/ 是/ NP/ 难/ 问题/ ./ 因此/ ,/ 为了/ 高效/ 地/ 解决/ 这个/ 问题/ ,/ 基于/ EDF/ 调度/ 策略/ ,/ 下面/ 提出/ 两个/ 具有/ 多项式/ 复杂度/ 的/ 启发式/ 算法/ 来/ 调整/ 各个/ 任务/ 的/ 频率/ ,/ 使得/ 系统/ 在/ 满足/ 实时/ 约束条件/ 下/ 达到/ 能耗/ 最小/ ./ 4.1/ H/ -/ L/ 算法/ H/ -/ L/ 算法/ 的/ 思想/ 是/ 将/ 所有/ 任务/ 的/ 工作频率/ 初始/ 置/ 为/ 最小值/ f1/ 并/ 有/ 条件/ 地/ 逐步提高/ ,/ 即/ 逐步/ 压缩/ 执行/ 时间/ 使得/ 系统/ 满足/ 实时性/ ./ 由于/ 采用/ 最早/ 截止期/ 优先/ 的/ 调度/ 策略/ ,/ 因此/ 当/ 频率/ 提高/ 到/ 使得/ EDF/ 可/ 调度/ (/ 即/ 所有/ 任务/ 的/ 利用率/ 之/ 和/ 小于/ 处理器/ 核/ 个数/ 时/ )/ ,/ 各个/ 任务/ 都/ 能/ 满足/ Deadline/ ./ 对于/ 离散/ 的/ 模型/ ,/ 有/ 处理器/ 的/ 有效/ 工作频率/ 集合/ f/ {/ f1/ ,/ f2/ ,/ …/ ,/ fQ/ }/ ,/ f1/ </ f2/ </ …/ </ fQ/ ./ H/ -/ L/ 算法/ 具体/ 描述/ 如下/ ./ 算法/ 1/ ./ H/ -/ L/ 算法/ ./ 输入/ :/ T/ [/ N/ ]/ ,/ c/ [/ N/ ]/ ,/ M/ 输出/ :/ E/ ,/ F/ [/ N/ ]/ 1/ ./ F/ [/ N/ ]/ ·/ ·/ =/ {/ f1/ (/ Q/ )/ …/ fN/ (/ Q/ )/ }/ ;/ 2/ ./ IfConstraint/ (/ 2/ )/ isn/ ’/ tsatisfiedthen3/ ./ returnnofeasiblesolution/ ;/ 4/ ./ endif5/ ./ F/ [/ N/ ]/ ·/ ·/ =/ {/ f1/ (/ 1/ )/ …/ fN/ (/ 1/ )/ }/ ;/ 6/ ./ Flag/ [/ N/ ]/ ·/ ·/ =/ {/ false/ …/ false/ }/ ;/ 7/ ./ Δ/ min/ ·/ ·/ =/ ,/ imin/ ·/ ·/ =/ ;/ 8/ ./ whileFlagisn/ ’/ talltrue/ &/ Constraint/ (/ 2/ )/ isn/ ’/ tsatisfieddo9/ ./ fori/ ·/ ·/ =/ 1/ →/ Ndo10/ ./ if/ Δ/ min/ >/ P/ (/ fi/ (/ q/ +/ 1/ )/ )/ -/ P/ (/ fi/ (/ q/ )/ )/ 11/ ./ Δ/ min/ ·/ ·/ =/ P/ (/ fi/ (/ q/ )/ )/ -/ P/ (/ fi/ (/ q/ -/ 1/ )/ )/ 12/ ./ imin/ ·/ ·/ =/ i/ ;/ 13/ ./ endif14/ ./ endfor15/ ./ ifimin/ ≠/ then16/ ./ ifFlagi/ =/ falsethen17/ ./ fi/ (/ q/ )/ ·/ ·/ =/ fi/ (/ q/ +/ 1/ )/ ;/ 18/ ./ endif19/ ./ iffi/ (/ q/ )/ =/ fi/ (/ Q/ )/ then20/ ./ Flagi/ ·/ ·/ =/ false/ ;/ 21/ ./ endif22/ ./ endif23/ ./ endwhile24/ ./ E/ ·/ ·/ =/ ∑/ N25/ ./ returnE/ ,/ F/ [/ N/ ]/ ./ 算法/ 的/ 输入/ 是/ 处理器/ 的/ 个数/ M/ 和/ 任务/ 的/ 工作频率/ 集合/ F/ [/ N/ ]/ 对应/ 的/ 周期/ T/ [/ N/ ]/ 与/ 最坏/ 执行/ 时间/ c/ [/ N/ ]/ ./ 算法/ 的/ 1/ ~/ 4/ 行/ 首先/ 检查/ 任务/ 是否/ 满足/ 约束/ 2/ ,/ 如果/ 所有/ 任务/ 的/ 频率/ 最大/ 时/ 的/ 利用率/ 之/ 和/ 大于/ 处理器/ 个数/ M/ 时/ ,/ 那么/ 返回/ 没有/ 可行/ 解/ ./ 否则/ 转入/ 第/ 5/ ~/ 7/ 行将/ 所有/ 任务/ 的/ 工作频率/ 设/ 为/ 最小值/ ,/ 并/ 初始化/ 相关/ 变量/ ./ 第/ 8/ ~/ 23/ 行/ 的/ while/ 循环/ 是/ 算法/ 中/ 分配/ 最佳/ 频率/ 的/ 过程/ ./ 在/ 每次/ 循环/ 中/ ,/ 第/ 8/ 行/ 首先/ 检查/ 当前/ 的/ 频率/ 分配/ 是否/ 满足/ 实时/ 约束/ ,/ 第/ 9/ ~/ 14/ 行/ 的/ for/ 循环/ 将/ 找出/ 一个/ 提高/ 一级/ 频率/ 使得/ Δ/ min/ =/ P/ (/ fi/ (/ q/ +/ 1/ )/ )/ -/ P/ (/ fi/ (/ q/ )/ )/ c/ (/ fi/ (/ q/ )/ )/ -/ c/ (/ fi/ (/ q/ +/ 1/ )/ )/ 的/ 值/ 最小/ (/ 可以/ 最大/ 程度/ 地/ 减缓/ 处理器/ 功耗/ 上升/ ,/ 同时/ 又/ 能/ 最大/ 程度/ 地/ 降低/ 执行/ 时间/ )/ 的/ 任务/ ,/ 第/ 15/ ~/ 21/ 行在/ 保证/ 不/ 超过/ 最高/ 频率/ 的/ 前提/ 下/ 提高/ 该/ 任务/ 的/ 频率/ ,/ 如此/ 循环/ ,/ 直到/ 所有/ 任务/ 的/ 频率/ 最大/ 或者/ 满足/ EDF/ 可/ 调度/ 条件/ 为止/ ./ 第/ 24/ 行/ 计算/ 系统/ 的/ 总/ 频率/ ./ 算法/ 结束/ 时/ ,/ 即可/ 得到/ 最佳/ 的/ 频率/ 分配/ 和/ 最优/ 的/ 系统/ 能耗/ ./ 4.2/ L/ -/ H/ 算法/ 相对/ 于/ H/ -/ L/ 算法/ ,/ L/ -/ H/ 算法/ 的/ 思想/ 是/ 将/ 所有/ 任务/ 的/ 工作频率/ 置/ 为/ 最大值/ fq/ 并/ 有/ 条件/ 地/ 逐步/ 降低/ ,/ 即/ 逐步/ 拉伸/ 执行/ 时间/ 直到/ 任务/ 的/ 执行/ 时间/ 接近/ Deadline/ ./ L/ -/ H/ 算法/ 的/ 具体/ 描述/ 如下/ ./ 算法/ 2/ ./ L/ -/ H/ 算法/ ./ 输入/ :/ T/ [/ N/ ]/ ,/ c/ [/ N/ ]/ ,/ M/ 输出/ :/ E/ ,/ F/ [/ N/ ]/ 1/ ./ F/ [/ N/ ]/ ·/ ·/ =/ {/ f1/ (/ Q/ )/ …/ fN/ (/ Q/ )/ }/ ;/ 2/ ./ IfConstraint/ (/ 2/ )/ isn/ ’/ tsatisfiedthen3/ ./ returnnofeasiblesolution/ ;/ 4/ ./ endif5/ ./ Flag/ [/ N/ ]/ ·/ ·/ =/ {/ false/ …/ false/ }/ ;/ 6/ ./ Δ/ min/ ·/ ·/ =/ ,/ imin/ ·/ ·/ =/ ;/ 7/ ./ whileFlagisn/ ’/ talltrue/ &/ Constraint/ (/ 2/ )/ isn/ ’/ tsatisfieddo8/ ./ fori/ ·/ ·/ =/ 1/ →/ Ndo9/ ./ ifP/ (/ fi/ (/ q/ )/ )/ -/ P/ (/ fi/ (/ q/ -/ 1/ )/ )/ >/ 0then10/ ./ Flagi/ ·/ ·/ =/ false/ ;/ 11/ ./ Continue/ ;/ 12/ ./ endif13/ ./ if/ Δ/ max/ >/ P/ (/ fi/ (/ q/ )/ )/ -/ P/ (/ fi/ (/ q/ -/ 1/ )/ )/ 14/ ./ Δ/ max/ ·/ ·/ =/ P/ (/ fi/ (/ q/ )/ )/ -/ P/ (/ fi/ (/ q/ -/ 1/ )/ )/ 15/ ./ imax/ ·/ ·/ =/ i/ ;/ 16/ ./ endif17/ ./ endfor18/ ./ ifimin/ ≠/ thenPage519/ ./ ifFlagi/ =/ falsethen20/ ./ fi/ (/ q/ )/ ·/ ·/ =/ fi/ (/ q/ -/ 1/ )/ ;/ 21/ ./ endif22/ ./ iffi/ (/ q/ )/ =/ fi/ (/ Q/ )/ then23/ ./ Flagi/ ·/ ·/ =/ false/ ;/ 24/ ./ endif25/ ./ endif26/ ./ endwhile27/ ./ E/ ·/ ·/ =/ ∑/ N28/ ./ returnE/ ,/ F/ [/ N/ ]/ ./ 需要/ 注意/ 的/ 是/ ,/ 算法/ 在/ 迭代/ 过程/ 中/ 可能/ 会/ 发生/ 降低/ 频率/ 的/ 同时/ 能耗/ 反而/ 升高/ 的/ 情况/ ,/ 这/ 表明/ 该/ 任务/ 已/ 工作/ 在/ 最小/ 频率/ ,/ 需要/ 将/ 标志/ Flagi/ 置/ 为/ false/ 并/ 跳/ 过/ 该/ 任务/ ./ 由/ 以上/ 可知/ ,/ H/ -/ L/ 算法/ 和/ L/ -/ H/ 算法/ 在/ 循环/ 中/ 最/ 多/ 计算/ O/ (/ QN/ )/ 次/ ,/ 因此/ 时间/ 复杂度/ 为/ O/ (/ QN/ )/ ,/ 空间/ 复杂度/ 为/ O/ (/ N/ )/ ./ 下面/ 举/ 一个/ 例子/ 说明/ 上述/ 算法/ 的/ 流程/ ./ 算法/ 输入/ 为/ T/ [/ 2/ ]/ =/ {/ 2/ ,/ 3/ }/ ,/ c/ [/ 2/ ]/ =/ {/ 8/ ,/ 12/ }/ ,/ M/ =/ 4/ ,/ 由此/ 可/ 得/ 算法/ 示意/ 如图/ 1/ 、/ 图/ 2/ ,/ 其中/ Pi/ ,/ 0/ </ i/ </ M/ +/ 1/ 表示/ 处理器/ 核/ ./ 图/ 1/ (/ a/ )/ 为/ H/ -/ L/ 算法/ 的/ 初始状态/ ,/ 即/ 所有/ 任务/ 的/ 频率/ 最低/ 时/ 任务/ 在/ 各/ 处理器/ 核上/ 的/ 执行/ 情况/ ,/ 这时/ 处理器/ 能耗/ 最低/ 但/ 不/ 满足/ 实时/ 约束/ ./ 通过/ 计算/ Δ/ min/ 发现/ ,/ 在/ 减少/ 相同/ 的/ 执行/ 时间/ 的/ 情况/ 下/ ,/ 提升/ 任务/ τ/ 2/ 的/ 频率/ 所/ 增加/ 的/ 能耗/ 最少/ ,/ 因此/ 系统/ 提升/ τ/ 2/ 的/ 执行/ 频率/ ;/ 图/ 1/ (/ b/ )/ 为/ 提升/ τ/ 2/ 频率/ 之后/ 的/ 状态/ ,/ 此时/ 依然/ 不/ 满足/ Deadline/ ,/ 计算/ 后/ 提升/ τ/ 1/ 的/ 频率/ ;/ 图/ 1/ (/ c/ )/ 为/ H/ -/ L/ 算法/ 的/ 终止/ 状态/ ,/ 此时/ 能耗/ 最小/ 且/ 满足/ 时间/ 约束/ ./ 图/ 2/ (/ a/ )/ 为/ L/ -/ H/ 算法/ 的/ 初始状态/ ,/ 这时/ 所有/ 任务/ 的/ 执行/ 频率/ 最高/ 且/ 处理器/ 能耗/ 最/ 多/ ,/ 需要/ 降低/ 频率/ 以/ 减少/ 能耗/ ./ 计算/ 得出/ 降低/ 任务/ τ/ 2/ 的/ 频率/ 所/ 增加/ 的/ 时间/ 最少/ 且/ 减少/ 的/ 能耗/ 最/ 多/ ,/ 同时/ 还/ 满足/ 时间/ 约束/ ,/ 因此/ 系统/ 降低/ 任务/ τ/ 2/ 的/ 执行/ 频率/ ;/ 图/ 2/ (/ b/ )/ 为/ L/ -/ H/ 算法/ 的/ 终止/ 状态/ ,/ 此时/ 能耗/ 最小/ 并且/ 满足/ 时间/ 约束/ ./ 4.3/ 算法/ 扩展/ 4.3/ ./ 1/ 速率/ 单调/ 调度/ 前/ 文/ 讨论/ 了/ 在/ EDF/ 调度/ 下/ 的/ 节能/ 算法/ ,/ 虽然/ EDF/ 调度/ 利用率/ 高/ ,/ 然而/ 在线/ 调度/ 开销/ 大/ ,/ 不易/ 实现/ ,/ 因此/ 实际/ 系统/ 一般/ 采用/ 静态/ 的/ 速率/ 单调/ (/ Rate/ -/ Monotonic/ ,/ RM/ )/ 调度/ 算法/ ./ 因此/ 这里/ 讨论/ 将/ 节能/ 算法/ 扩展/ 到/ RM/ 调度/ 上/ ./ 速率/ 单调/ 调度/ 算法/ 的/ 任务/ 优先级/ 分配/ 采用/ 静态/ 固定/ 的/ 分配/ 方法/ ,/ 即/ 优先级/ 与/ 周期/ 成反比/ ,/ 周期/ 越短/ 优先级/ 越高/ ./ 在/ 多处理器/ 模型/ 中/ 已/ 被/ 证明/ [/ 11/ ]/ :/ N/ 个/ 独立/ 的/ 周期/ 任务/ 可/ 被/ 速率/ 单调/ 调度/ 的/ 充分条件/ 是/ 处理器/ 利用率/ 其中/ M/ 是/ 处理器/ 的/ 核/ 个数/ ./ 从/ 定理/ 1/ 可知/ ,/ 任何时刻/ 任务/ 的/ 并行度/ 为/ M/ ,/ 同时/ 上述/ 的/ 两种/ 节能/ 算法/ 的/ 目的/ 是/ 找到/ 各个/ 任务/ 合理/ 的/ 频率/ 分配/ ,/ 因此/ 对于/ 速率/ 单调/ 调度/ 算法/ ,/ 上述/ 算法/ 依然/ 适用/ ,/ 只/ 需要/ 将/ 算法/ 中/ 约束/ 2/ 改为/ ∑/ Ni/ =/ 1/ ∑/ Q/ 同理/ ,/ 节能/ 算法/ 还/ 可以/ 扩展/ 应用/ 到/ 最少/ 空闲/ 时间/ 优先/ (/ LeastLaxityFirst/ ,/ LLF/ )/ 等/ 其它/ 的/ 调度/ 算法/ 中/ ./ 4.3/ ./ 2/ 可变/ 任务/ 由于/ 可变/ 任务/ 的/ 并行度/ 在/ 执行/ 过程/ 中/ 可以/ 任意/ 改变/ ,/ 因此/ 可变/ 任务/ 的/ 能耗/ 最小化/ 被/ 认为/ 更为/ 复杂/ ,/ 这里/ 我们/ 讨论/ 上述/ 节能/ 算法/ 对/ 可变/ 任务/ 适用/ 情况/ ./ 根据/ 定理/ 1/ ,/ 无论/ 任务/ 的/ 并行度/ 可以/ 如何/ 改变/ ,/ 当/ 任务/ 的/ 并行度/ 等于/ 处理器/ 个数/ 时/ ,/ 一定/ 可以/ 得到/ 最优/ 解/ ./ 因此/ 可以/ 得到/ 推论/ ,/ 对于/ 可变/ 任务/ ,/ 当/ 任务/ 均匀/ 分割/ 并/ 分配/ 在/ 所有/ 核上/ 运行/ 时/ ,/ 必定/ 不会/ 丢失/ 最优/ 解/ ./ 化/ 依然/ 适用/ ./ 因此/ ,/ 对于/ 可变/ 任务/ ,/ 上述/ 两种/ 节能/ 算法/ 无需/ 变/ Page65/ 性能/ 评估/ 为/ 验证/ 本文/ 提出/ 算法/ 的/ 正确性/ 与/ 有效性/ ,/ 本文/ 使用/ 一系列/ 的/ 通用/ 参数/ 进行/ 了/ 大量/ 的/ 模拟实验/ 以/ 比较/ 以下/ 3/ 种/ 算法/ :/ H/ -/ L/ 算法/ 、/ L/ -/ H/ 算法/ 和/ 0/ -/ 1/ 整数/ 规划/ ./ H/ -/ L/ 算法/ 与/ L/ -/ H/ 算法/ 目的/ 是/ 在/ 并行/ 实时/ 系统/ 中/ 最大/ 限度/ 地/ 降低/ CPU/ 能耗/ ,/ 主要/ 任务/ 是/ 在/ 多项式/ 时间/ 内/ 确定/ 任务/ 运行/ 时/ 相对/ 最优/ 的/ 工作频率/ ./ 因为/ 0/ -/ 1/ 整形/ 规划/ (/ 0/ -/ 1ILPs/ )/ 算法/ 可以/ 计算/ 出/ 最优/ 解/ ,/ 所以/ 本章/ 主要/ 把/ 本文/ 提出/ 的/ 启发式/ 算法/ 与/ 0/ -/ 1ILPs/ 算法/ 进行/ 对比/ ,/ 证明/ 其/ 能够/ 求/ 出/ 合理/ 的/ 能耗/ 优化/ 调度/ 方式/ ./ 5.1/ 实验/ 配置/ 本文/ 采用/ IntelXScale/ 处理器/ ,/ 处理器/ 参数/ (/ 可调/ 的/ 离散/ 频率/ 和/ 对应/ 功耗/ )/ 使用/ 文献/ [/ 15/ ]/ 中/ 的/ 实际/ 值/ (/ 如表/ 1/ 中/ 所示/ )/ ./ jfj/ // MHzfj/ (/ 规约/ 后/ )/ Pj/ // mWidle355/ ./ 0012345/ 表/ 1/ 中/ ,/ j/ 表示/ 处理器/ 的/ 频率/ 等级/ ./ 实验/ 中/ ,/ 处理器/ 核数/ M/ 分别/ 定为/ 4/ ,/ 8/ ,/ 16/ 和/ 32/ 图/ 3/ 处理器/ 为/ 4/ ,/ 8/ ,/ 16/ 和/ 32/ 核时/ ,/ 0/ -/ 1ILPs/ 、/ H/ -/ L/ 、/ L/ -/ H/ 算法/ 在/ EDF/ 调度/ 下/ 能耗/ 的/ 实验/ 结果/ 对比/ 图个/ ./ 因为/ 过大/ 的/ 任务/ 数/ 可能/ 会/ 导致/ 不可/ 调度/ 的/ 情形/ ,/ 任务/ 数/ N/ 被/ 定为/ [/ M/ // 2/ ,/ 3M/ // 2/ ]/ ,/ 即/ 对应/ 可/ 调度/ 的/ 任务/ 个数/ N/ (/ 取整/ )/ 分别/ 为/ [/ 2/ ,/ 6/ ]/ ,/ [/ 4/ ,/ 12/ ]/ ,/ [/ 8/ ,/ 24/ ]/ ,/ [/ 16/ ,/ 48/ ]/ ./ 随机/ 生成/ 每个/ 任务/ 的/ 周期/ T/ 为/ random/ (/ 0/ ~/ 20/ )/ +/ 50/ ,/ 每个/ 任务/ 在/ 并行度/ 为/ 1/ 且/ 功率/ 最大/ 的/ 执行/ 时间/ C/ 为/ random/ (/ 0/ ~/ 50/ )/ +/ 1/ ./ 如上所述/ ,/ 系统/ 外设/ 所/ 消耗/ 的/ 能量/ 为/ 常量/ ,/ 可以/ 通过/ 如/ 文献/ [/ 15/ ]/ 中所测/ 得/ 的/ 功耗/ 值/ 计算/ 得到/ ,/ 所以/ 下面/ 实验/ 主要/ 进行/ 处理器/ 能耗/ 的/ 比较/ ./ H/ -/ L/ 算法/ 与/ L/ -/ H/ 算法/ 是/ 通过/ 适当/ 降低/ CPU/ 工作/ 时/ 的/ 频率/ ,/ 来/ 达到/ 降低/ 能耗/ 的/ 目的/ (/ DVS/ 技术/ )/ ,/ 因此/ ,/ 为了/ 满足/ 假设/ P/ (/ f/ )/ ∝/ f/ α/ ,/ α/ >/ 1/ ,/ 处理器/ 在/ 工作/ 时/ 可/ 调节/ 的/ 状态/ 应/ 满足/ f1/ // P1/ </ …/ </ fj/ // Pj/ </ …/ </ fmax/ // Pmax/ ,/ 表/ 1/ 中/ 状态/ idle/ 和/ 状态/ 1/ 不会/ 被/ 用到/ ,/ 即/ 实验所/ 采用/ 的/ 参数/ 为/ 后/ 4/ 组/ ./ 每个/ 配置/ 进行/ 50/ 组/ 对比/ 实验/ ,/ 实验/ 结果/ 取/ 平均值/ ./ 每组/ 实验/ 结果/ 都/ 以/ 启发式/ 算法/ 中/ 的/ 最大值/ 进行/ 规约/ 、/ 绘图/ ./ 实验/ 运行/ 在/ 采用/ Intelcore22/ ./ 83GHz32/ -/ bit/ 处理器/ ,/ 2GB/ 主存/ 的/ WindowsPC/ 上/ ./ 0/ -/ 1ILPs/ 使用/ IBMILOGCPLEX/ 工具/ 进行/ 求解/ ./ 5.2/ 实验/ 结果/ 图/ 3/ 是/ 处理器/ 为/ 4/ ,/ 8/ ,/ 16/ 和/ 32/ 核时/ 实时/ 任务/ 在/ EDF/ 调度/ 下/ 的/ 能耗/ 最优化/ 的/ 实验/ 结果/ ,/ 图/ 4/ 是/ 在/ RM/ 调度/ 下/ 的/ 结果/ ./ Page7/ 图/ 4/ 处理器/ 为/ 4/ ,/ 8/ ,/ 16/ 和/ 32/ 核时/ ,/ 0/ -/ 1ILPs/ 、/ H/ -/ L/ 、/ L/ -/ H/ 算法/ 在/ RM/ 调度/ 下/ 能耗/ 的/ 实验/ 结果/ 对比/ 图/ 从/ 图/ 中/ 可以/ 看到/ ,/ H/ -/ L/ 算法/ 和/ L/ -/ H/ 算法/ 与/ 0/ -/ 1ILPs/ 最优化/ 算法/ 结果/ 相近/ (/ 10/ %/ 以内/ )/ ./ 由/ 实验/ 结果/ 可知/ :/ (/ 1/ )/ 核数/ 一定/ 时/ ,/ 随/ 任务/ 数/ 的/ 增加/ 而/ 升高/ ,/ CPU/ 工作量/ 增加/ ,/ 平均/ 工作频率/ 提高/ ,/ 故/ 能耗/ 增加/ ./ (/ 2/ )/ 核数/ 一定/ 时/ ,/ 且/ 任务/ 数较/ 少时/ H/ -/ L/ 算法/ 和/ L/ -/ H/ 算法/ 与/ 0/ -/ 1ILPs/ 性能/ 、/ 结果/ 相同/ ;/ 任务/ 数/ 达到/ 一定/ 值时/ ,/ H/ -/ L/ 算法/ 和/ L/ -/ H/ 算法/ 所求/ 能耗/ 比/ 0/ -/ 1ILPs/ 略大/ ./ 这/ 是因为/ 启发式/ 算法/ 为/ 贪心/ 法求/ 局部/ 最优/ 解/ ,/ 而/ 0/ -/ 1ILPs/ 为求/ 全局/ 最优/ 解/ ,/ 当/ 任务/ 数较/ 少时/ ,/ 结果/ 相同/ ,/ 随着/ 任务/ 数/ 的/ 增大/ ,/ 误差/ 出现/ ,/ 但/ 因为/ 本文/ 算法/ 所/ 采用/ 的/ 评价/ 标准/ 、/ 逼近/ 方法/ 较为/ 合理/ ,/ 使得/ 误差/ 保证/ 在/ 10/ %/ 以内/ ./ (/ 3/ )/ H/ -/ L/ 算法/ 与/ L/ -/ H/ 算法/ 结果/ 基本相同/ ./ 6/ 总结/ 本文/ 将/ 多/ 核实/ 时/ 系统/ 中/ 的/ 能耗/ 模型/ 由/ 连续/ 模型/ 改进/ 为/ 离散/ 模型/ ,/ 分析/ 了/ 采用/ GangScheduling/ 策略/ 的/ 并行任务/ 的/ 能耗/ 特性/ ,/ 针对/ 此/ 特性/ ,/ 提出/ 了/ 两个/ 启发式/ 节能/ 调度/ 算法/ ./ 论文/ 进一步/ 将/ 该/ 问题/ 规划/ 为/ 一个/ 0/ -/ 1/ 整形/ 规划/ 问题/ ,/ 通过/ 工具/ 求得/ 最优/ 解与/ 本文/ 算法/ 对比/ ./ 实验/ 证明/ ,/ 本文/ 算法/ 是/ 正确/ 而/ 有效/ 的/ ,/ 可以/ 达到/ 几乎/ 与/ 最优/ 解/ 相同/ 的/ 节能/ 效果/ ./ 我们/ 将/ 在/ 此/ 工作/ 基础/ 上/ ,/ 进一步/ 展开/ 如下/ 研究/ :/ (/ 1/ )/ 考虑/ 更/ 复杂/ 的/ 外设/ 模型/ ,/ 即/ 任务/ 在/ 使用/ 不同/ 设备/ 集合/ 时/ 系统/ 有/ 选择性/ 的/ 关闭/ 外设/ 的/ 情况/ ./ (/ 2/ )/ 考虑/ 数据交换/ 、/ 同步/ 、/ 存储器/ 存取/ 等/ 更/ 多/ 因素/ ,/ 以/ 提出/ 更/ 全面/ 的/ 节能/ 调度/ 算法/ ./ 

