Page1MDx/ 差分/ 攻击/ 算法/ 改进/ 及/ GPGPU/ 上/ 的/ 有效/ 实现/ 周林/ 韩文/ 报祝卫华/ 王政/ (/ 解放军信息工程大学/ 信息/ 工程学院/ 郑州/ 450002/ )/ 摘要/ Hash/ 函数/ 广泛应用/ 于/ 商业/ 、/ 安全/ 等/ 领域/ ,/ 其中/ MDx/ 系列/ Hash/ 算法/ 应用/ 最为/ 广泛/ ./ 因此/ 对/ MDx/ 系列/ Hash/ 算法/ 的/ 攻击/ 在/ 理论/ 上/ 和/ 实际/ 应用/ 上/ 都/ 有/ 重要/ 的/ 意义/ ./ 自王/ 小云/ 教授/ 提出/ 差分/ 攻击/ 算法/ 并/ 攻破/ MD5/ 、/ MD4/ 等/ MDx/ 系列/ 算法/ 以来/ ,/ 对/ 该/ 算法/ 的/ 研究/ 日益/ 受到/ 关注/ ./ 文中/ 以/ 攻击/ MD5/ 的/ 差分/ 攻击/ 算法/ 为例/ ,/ 改进/ 了/ Klima/ 提出/ 的/ MD5/ 隧道/ 差分/ 攻击/ 算法/ ,/ 分析/ 其/ 在/ GPGPU/ 上/ 实现/ 的/ 可行性/ 和/ 技术/ 要求/ 并/ 在/ Visualstudio6/ ./ 0/ 的/ 环境/ 下/ 利用/ CUDA/ 语言/ 开发/ 完成/ ./ 算法/ 的/ CUDA/ 程序/ 在/ GeForce9800GX2/ 平台/ 下/ 运行/ ,/ 平均/ 每/ 1.35/ s/ 能/ 找到/ 一对/ MD5/ 碰撞/ ./ 通过/ 同/ 4/ 核/ Core2QuadQ9000/ (/ 2.0/ GHz/ )/ PC/ 上/ 的/ 实现/ 相/ 比较/ ,/ 在/ GeForce9800GX2/ 上/ 的/ 实现/ 能/ 达到/ 11.5/ 倍/ 的/ 性价比/ ./ 关键词/ MD5/ ;/ Hash/ 函数/ ;/ 差分/ 攻击/ ;/ 隧道/ 技术/ ;/ 多/ 消息/ 修正/ 方法/ ;/ CUDA/ ;/ GPGPU/ ;/ MersenneTwister1/ 引言/ Hash/ 函数/ 是/ 密码学/ 的/ 重要/ 分支/ ./ 以/ SHA/ -/ 1/ 、/ MD5/ 为/ 代表/ 的/ MDx/ 系列/ Hash/ 算法/ 是/ 最为/ 典型/ 的/ Hash/ 函数/ ,/ 应用/ 也/ 最为/ 广泛/ ,/ 例如/ Hash/ 算法/ 在/ 密码/ 协议/ 中/ 具有/ 重要/ 作用/ ./ 在/ 密码/ 协议/ 设计/ 中/ 一般/ 都/ 使用/ 随机/ 预言/ 模型/ ,/ 即/ 假设/ 所/ 使用/ 的/ Hash/ 算法/ 是/ 安全/ 的/ ./ Hash/ 算法/ 的/ 安全性/ 直接/ 关系/ 到/ 密码/ 协议/ 的/ 安全性/ ./ 因此/ 对/ Hash/ 函数/ 的/ 安全性/ 分析/ 一直/ 是/ 密码界/ 的/ 热点/ ./ 在/ CRYPTO98/ 上/ ,/ Chabaud/ 和/ Joux/ 提出/ 一种/ 对/ SHA/ -/ 0/ 的/ 攻击方式/ ./ 在/ 261/ 的/ 计算/ 复杂度/ 之内/ ,/ 就/ 可以/ 发现/ 一次/ 碰撞/ (/ 即/ 两个/ 不同/ 的/ 消息/ 对应/ 到/ 相同/ 的/ 消息/ 摘要/ )/ ;/ 这个/ 数字/ 小于/ 生日/ 攻击/ 复杂度/ 280/ ,/ 其/ 安全性/ 低于/ 一个/ 理想/ 的/ 杂凑/ 函数/ 抵抗/ 攻击/ 所/ 应/ 具备/ 的/ 计算/ 复杂度/ ./ 2004/ 年/ ,/ Biham/ 和/ Chen/ 发现/ 了/ SHA/ -/ 0/ 的/ 近似/ 碰撞/ ,/ 其中/ 160/ 位/ 消息/ 摘要/ 中有/ 142/ 位/ 相同/ ./ 同年/ Joux/ 、/ Carribault/ 、/ Lemuet/ 和/ Jalby/ 宣布/ 找到/ SHA/ -/ 0/ 算法/ 的/ 完整/ 碰撞/ ,/ 这是/ 归纳/ Chabaud/ 和/ Joux/ 的/ 攻击/ 所/ 完成/ 的/ 结果/ ,/ 发现/ 一个/ 完整/ 碰撞/ 只/ 需要/ 251/ 的/ 计算/ 复杂度/ ./ 直到/ 在/ CRYPTO2004/ 上/ ,/ 王小云/ 、/ 冯登国/ 、/ 来学嘉和于/ 红波/ 利用/ 差分/ 攻击/ 方法/ 成功/ 攻破/ MD5/ 、/ SHA/ -/ 0/ 和/ 其它/ 杂凑/ 函数/ ./ 他们/ 攻击/ SHA/ -/ 0/ 的/ 计算/ 复杂度/ 是/ 240/ ,/ 攻击/ MD5/ 的/ 计算/ 复杂度/ 是/ 242/ ./ 在/ 一台/ 普通/ 的/ PC/ 上/ ,/ 15min/ 之内/ 就/ 可以/ 找到/ MD5/ 碰撞/ 消息/ 对/ ./ 2005/ 年/ ,/ 王小云/ 和/ 殷益/ 群/ 、/ 于红波/ 将/ 差分/ 攻击/ 算法/ 公开/ ,/ 并/ 将/ 差分/ 攻击/ 算法/ 应用/ 于/ 对/ SHA/ -/ 1/ 的/ 攻击/ ,/ 只/ 需/ 少于/ 269/ 的/ 计算/ 复杂度/ ,/ 就/ 能/ 找到/ 一组/ 碰撞/ ./ 在/ CRYPTO2005/ 会议/ 尾声/ 中/ 王小云/ 、/ 姚期智/ 、/ 姚储枫/ 再度/ 发表/ 更/ 有效率/ 的/ SHA/ -/ 1/ 攻击/ 法/ ,/ 能/ 在/ 263/ 个/ 计算/ 复杂度/ 内/ 找到/ 碰撞/ ./ 从此/ 差分/ 攻击/ 算法/ 被/ 深入研究/ 并/ 得到/ 了/ 很大/ 改进/ [/ 1/ -/ 2/ ]/ ./ 在/ 密码学/ 的/ 学术/ 理论/ 中/ ,/ 任何/ 攻击方式/ ,/ 其/ 计算/ 复杂度/ 若/ 少于/ 暴力/ 搜寻/ 法所/ 需要/ 的/ 计算/ 复杂度/ ,/ 就/ 能/ 被/ 视为/ 针对/ 该/ 密码/ 系统/ 的/ 一种/ 破密/ 法/ ;/ 但/ 这/ 并/ 不/ 表示/ 该/ 破密/ 法/ 已经/ 可以/ 进入/ 实际/ 应用/ 的/ 阶段/ ./ 在/ 实际/ 攻击/ 中/ ,/ 理论/ 上/ 的/ 攻击/ 算法/ 都/ 要/ 映射/ 到/ 合适/ 硬件/ 计算/ 平台/ 上/ 的/ 可执行程序/ ./ 硬件/ 计算/ 平台/ 一般/ 可/ 分为/ 标准/ 计算/ 平台/ (/ 例如/ PC/ )/ 和/ 专用/ 计算/ 平台/ (/ 例如/ FPGA/ 、/ ASIC/ 、/ GPU/ )/ ./ 通常/ 在/ 专用/ 计算/ 平台/ 上/ 的/ 开发/ 难度/ 要/ 比/ 在/ PC/ 上难/ ./ 但/ 往往/ 可以/ 获得/ 更/ 高/ 的/ 性价比/ ,/ 特别/ 是/ 对/ 可以/ 并行/ 的/ 算法/ ./ 差分/ 攻击/ 算法/ 是/ 一种/ 有/ 策略/ 的/ 随机/ 搜索算法/ ,/ 每次/ 搜索/ 开始/ 前/ ,/ 先/ 产生/ 一个/ 随机数/ ,/ 所/ 需/ 的/ 消息/ 分组/ 通过/ 计算/ 得到/ ,/ 由/ 消息/ 分组/ 计算/ 链/ 变量/ 并/ 检查/ 链/ 变量/ 是否/ 符合条件/ ,/ 如果/ 不/ 符合/ 则/ 需要/ 重新/ 开始/ 并/ 产生/ 新/ 的/ 随机数/ ,/ 因此/ 每次/ 搜索/ 是/ 独立/ 的/ ,/ 可以/ 并行操作/ ,/ 算法/ 所/ 需/ 的/ 存储空间/ 仅仅/ 是/ 64/ 个/ 字/ 的/ 轮/ 常量/ ,/ 适合/ 在/ GPGPU/ 上/ 实现/ ./ 在/ 公开/ 文献/ 中/ ,/ 还/ 没有/ 一篇/ 是/ 分析/ 差分/ 碰撞/ 算法/ 在/ GPGPU/ 上/ 实现/ 的/ 文章/ ,/ 本文/ 希望/ 能为/ 同行/ 抛砖引玉/ ,/ 进一步/ 探索/ GPGPU/ 在/ 密码学/ 中/ 的/ 应用/ ./ 本文/ 第/ 2/ 节/ 介绍/ MDx/ 系列/ Hash/ 算法/ 的/ 构造/ ;/ 第/ 3/ 节/ 概括/ 目前/ 对/ MDx/ 系列/ Hash/ 算法/ 的/ 攻击/ 算法/ ;/ 第/ 4/ 节/ 改进/ 文献/ [/ 1/ ]/ 中/ 的/ 差分/ 算法/ ,/ 通过/ 分析/ 差分/ 攻击/ 算法/ ,/ 得出/ 在/ GPGPU/ 上/ 实现/ 时/ 所/ 需/ 的/ 技术/ 要求/ ,/ 介绍/ 实现/ 框架/ ,/ 给出/ 实验/ 结果/ 并/ 与/ 普通/ PC/ 上/ 的/ 实现/ 进行/ 比较/ ;/ 第/ 5/ 节/ 总结/ 全文/ ./ 2MDx/ 系列/ Hash/ 算法/ 将/ 任意/ 长度/ 的/ 数字串/ m/ 映射/ 成/ 一个/ 较/ 短/ 的/ 定长/ 的/ 数字串/ 的/ 函数/ 称为/ Hash/ 函数/ ,/ 以/ h/ 表示/ Hash/ 函数/ :/ 则/ h/ (/ m/ )/ 为/ m/ 的/ Hash/ 值/ ./ h/ (/ m/ )/ 应当/ 易于/ 计算/ 且/ t/ >/ n/ ./ Hash/ 函数/ 还/ 必须/ 是/ 单向/ 的/ 、/ 弱/ 无/ 碰撞/ 的/ 和/ 强/ 无/ 碰撞/ 的/ ./ 定义/ 1/ ./ 给定/ 一个/ Hash/ 函数/ h/ ,/ y/ 为/ 一个/ 消息/ 摘要/ ,/ 若/ 要/ 找出/ x/ 使得/ y/ =/ h/ (/ x/ )/ 在/ 计算/ 上/ 不/ 可行/ ,/ 则/ 称此/ Hash/ 函数/ 为/ 单向/ 的/ ./ 定义/ 2/ ./ 如果/ 有/ 两个/ 消息/ m1/ ,/ m2/ ;/ m1/ ≠/ m2/ 使得/ h/ (/ m1/ )/ =/ h/ (/ m2/ )/ ,/ 我们/ 就/ 说/ 这/ 两个/ 消息/ m1/ 和/ m2/ 是/ 碰撞/ (/ collision/ )/ 的/ 消息/ ./ 定义/ 3/ ./ 给定/ Hash/ 函数/ h/ 和/ 任意/ 给定/ 的/ 消息/ m/ ,/ 如果/ 要/ 找/ 一个/ m/ ,/ m/ ≠/ m/ ,/ 使得/ h/ (/ m/ )/ =/ h/ (/ m/ )/ 在/ 计算/ 上/ 不/ 可行/ ,/ 则/ 称/ h/ 是/ 弱/ 无/ 碰撞/ 的/ Hash/ 函数/ (/ weakcollision/ -/ freeHashfunction/ )/ ./ 定义/ 4/ ./ 给定/ 一个/ Hash/ 函数/ h/ ,/ 如果/ 要/ 找到/ 任意/ 一对/ 消息/ m1/ ,/ m2/ ;/ m1/ ≠/ m2/ 使得/ h/ (/ m1/ )/ =/ h/ (/ m2/ )/ 在/ 计算/ 上/ 不/ 可行/ ,/ 则/ 称/ h/ 是/ 强/ 无/ 碰撞/ 的/ Hash/ 函数/ (/ strongcollision/ -/ freeHashfunction/ )/ ./ 处理/ 可变/ 长/ 消息/ 是/ 很/ 困难/ 的/ ,/ 所以/ MDx/ 系列/ 算法/ 中先/ 将/ 消息/ m/ 填充/ 为/ 若干/ 固定/ 长度/ 的/ 分组/ :/ Page3/ 这里/ 每个/ Mi/ (/ 1/ / i/ / r/ )/ 是/ 长为/ kbit/ 的/ 串/ ./ 然后/ 利用/ 压缩/ 函数/ f/ 处理/ 每个/ Mi/ :/ 其中/ k/ >/ n/ ,/ f/ 的/ 输出/ 成为/ 链/ 变量/ fvi/ ./ 为了/ 关联/ 各个/ 分组/ ,/ 使得/ fvi/ 的/ 值/ 依赖于/ 已/ 处理/ 的/ 分组/ ./ 处理/ 每个/ 分组/ Mi/ 时/ ,/ 将/ fvi/ -/ 1/ 作为/ 初始值/ ,/ 再/ 使用/ f/ 将/ 其/ 更新/ 得到/ fvi/ ./ 第一个/ 分组/ 的/ 初始值/ fv0/ 是/ 一个/ 预先规定/ 的/ 常值/ IV/ ./ 最后/ 的/ 消息/ 摘要/ 值为/ fvr/ ./ MDx/ 系列/ 算法/ 主要/ 在/ IV/ 的/ 设置/ 和/ f/ 的/ 构造/ 上/ 有所不同/ ./ MDx/ 系列/ Hash/ 算法/ 以/ Merkle/ -/ Damgard/ 理论/ 为/ 基础/ ./ Merkle/ -/ Damgard/ 理论/ 表明/ :/ Hash/ 函数/ h/ 的/ 安全性/ 取决于/ 压缩/ 函数/ f/ 的/ 安全性/ ,/ 如果/ f/ 是/ 单向/ 的/ 、/ 弱/ 无/ 碰撞/ 的/ 和/ 强/ 无/ 碰撞/ 的/ ,/ 则/ h/ 也/ 是/ 单向/ 的/ 、/ 弱/ 无/ 碰撞/ 的/ 和/ 强/ 无/ 碰撞/ 的/ ./ 3MDx/ 系列/ Hash/ 函数/ 的/ 攻击/ 算法/ Hash/ 函数/ 攻击/ 算法/ 大体/ 可/ 分为/ 两类/ :/ 通用/ 算法/ (/ 例如/ 生日/ 攻击/ 、/ 中途/ 相遇/ 攻击/ 和/ 穷举/ 攻击/ )/ 和/ 特定/ 算法/ (/ 例如/ 王小云/ 的/ 差分/ 攻击/ 、/ Dobbertin/ 的/ 代数/ 攻击/ )/ ./ 通用/ 算法/ 一般/ 适用/ 于/ 对/ 所有/ Hash/ 算法/ 攻击/ ,/ 特定/ 算法/ 只能/ 针对/ 某/ 一个/ 或/ 某/ 一类/ Hash/ 算法/ 进行/ 攻击/ ./ 通用/ 算法/ 攻击/ 的/ 复杂度/ 一般/ 都/ 很大/ ,/ 例如/ 假设/ Hash/ 函数/ 的/ 输出/ 的/ 消息/ 摘要/ 长为/ n/ ,/ 则/ 利用/ 生日/ 攻击/ 所/ 需/ 的/ 运算量/ 是/ O/ (/ 2n/ 长是/ 128/ ,/ 所以/ 利用/ 生日/ 攻击/ 所/ 需/ 的/ 运算量/ 是/ O/ (/ 264/ )/ ,/ 而/ 使用/ 差分/ 攻击/ 算法/ ,/ 目前/ 最好/ 的/ 结果/ 是/ 只/ 需/ O/ (/ 210/ )/ ./ 特定/ 攻击/ 算法/ 是/ 利用/ Hash/ 函数/ 的/ 内在/ 结构/ 缺陷/ ,/ 找到/ Hash/ 函数/ 的/ 弱点/ 有/ 针对性/ 地/ 进行/ 攻击/ ./ 例如/ Dobbertin/ 利用/ MD5/ 中/ 活动状态/ 的/ 高位/ 不能/ 尽快/ 地/ 充分/ 混淆/ ,/ 通过/ 构造/ 两个/ 不同/ 的/ 512/ 消息/ 分组/ 和/ 选择/ 初始/ IV/ 值得/ 到/ 半/ 自由/ 初始/ 碰撞/ ./ 王小云/ 的/ 差分/ 攻击/ 算法/ 也/ 是/ 利用/ 了/ MSB/ (/ 最高/ 比特/ 位/ )/ 不能/ 尽快/ 充分/ 混淆/ ,/ 找到/ 有效/ 的/ 差分/ 和/ 差分/ 路径/ ,/ 成功/ 攻击/ 了/ MD5/ 、/ MD4/ 等/ 算法/ [/ 4/ ]/ ./ 差分/ 攻击/ 算法/ 一般/ 分为/ 3/ 个/ 步骤/ :/ 1/ ./ 构造/ 可以/ 产生/ 高/ 概率/ 碰撞/ 的/ 差分/ Δ/ M/ ./ 2/ ./ 推导/ 出/ Δ/ M/ 的/ 差分/ 路径/ DP/ 和/ 实现/ 差分/ 路径/ 需要/ 满/ 3/ ./ 利用/ 单/ 消息/ 修正/ 方法/ 、/ 多/ 消息/ 修正/ 方法/ 、/ 隧道/ 技术/ 、/ “/ 分而治之/ ”/ 技术/ 设计/ 和/ 优化/ 搜索/ 满足/ 充分条件/ 的/ 碰撞/ 消息/ 对/ ./ 步/ 1/ 中/ ,/ 将/ Δ/ M/ ≠/ 0/ 加上/ 一个/ 消息/ M/ 可/ 得到/ M/ ,/ 为了/ 使得/ h/ (/ M/ )/ =/ h/ (/ M/ )/ ,/ 差分/ Δ/ M/ 在/ 压缩/ 函数/ f/ 中/ 的/ 扩散/ 和/ 混淆/ 必须/ 按照/ 预先/ 设定/ 的/ 路径/ 进行/ 并/ 最后/ 消失/ ./ 步/ 2/ 就是/ 要/ 构造/ 这样/ 的/ 差分/ 路径/ DP/ ,/ 并/ 推出/ 在/ 什么/ 充分条件/ 下能/ 得到/ 这样/ 的/ DP/ ,/ 充分条件/ 数/ 决定/ 整个/ 攻击/ 算法/ 的/ 运算/ 复杂度/ ./ 步/ 3/ 利用/ 消息/ 中/ 的/ 自由/ 比特/ 位/ ,/ 使用/ 单/ 消息/ 修正/ 方法/ [/ 4/ ]/ 、/ 多/ 消息/ 修正/ 方法/ [/ 5/ ]/ 、/ 隧道/ 技术/ [/ 2/ ]/ 、/ “/ 分而治之/ ”/ [/ 6/ ]/ 技术/ 提高/ 所/ 构造/ 的/ 消息/ 满足/ 所有/ 充分条件/ 的/ 概率/ ./ 4/ 差分/ 攻击/ 算法/ 改进/ 及/ 在/ GPGPU/ 上/ 的/ 实现/ 差分/ 攻击/ 算法/ 首先/ 需要/ 产生/ 一个/ 随机数/ ,/ 因此/ 在/ 实现/ 中要/ 构造/ 一个/ 伪/ 随机数/ 发生器/ ./ 由于/ 寄存器/ 和/ 共享内存/ 大小/ 限制/ 和/ 内存/ 寻址/ 限制/ ,/ 迭代/ 模式/ 的/ 伪/ 随机数/ 发生器/ (/ 如/ 线性/ 同余法/ 、/ Fibonecci/ 方法/ )/ 在/ GPGPU/ 上/ 实现/ 的/ 效率/ 比较/ 低/ ./ 我们/ 采用/ MersenneTwister/ 算法/ ,/ MersenneTwister/ 算法/ 生成/ 的/ 随机数/ 周期长/ 、/ 概率分布/ 性好/ 、/ 所/ 需/ 内存/ 少/ 、/ 速度/ 快且/ 适合/ 在/ GPGPU/ 上/ 实现/ ./ 详细/ 细节/ 请/ 参见/ cudasdk/ ./ 在/ 计算/ 链/ 变量/ 和/ 消息/ 值时/ 还/ 需要/ 模加/ 运算/ 、/ 模减/ 运算/ 、/ 按位/ 与/ 、/ 或/ 、/ 非/ 运算/ 和/ 循环/ 左移/ 及/ 循环/ 右移/ 算子/ ./ cuda/ 开发/ 语言/ 中/ 含有/ 模加/ 运算/ 、/ 模减/ 运算/ 、/ 按位/ 与/ 、/ 或/ 、/ 非/ 运算/ ./ 循环/ 左移/ 和/ 循环/ 右移/ 算子/ 可以/ 通过/ 左移/ 和/ 右移/ 算子/ 转换/ 得到/ ./ 例如/ 对数/ x/ 循环/ 左移/ n/ 位/ ,/ 则/ 可/ 表示/ 为/ (/ x/ / n/ )/ |/ (/ x/ / (/ 32/ -/ n/ )/ )/ ,/ 对数/ x/ 循环/ 右移/ n/ 位/ ,/ 则/ 可/ 表示/ 为/ (/ x/ / n/ )/ |/ (/ x/ / (/ 32/ -/ n/ )/ )/ ./ 在/ 判断/ 消息/ 是否/ 满足/ 充分条件/ 时/ 还/ 需用/ 到/ 控制流/ 指令/ ./ 在/ 开发/ 语言/ CUDA/ 中有/ if/ ,/ switch/ ,/ do/ ,/ for/ ,/ while/ 控制流/ 指令/ ./ 但是/ 任何/ 流/ 控制指令/ (/ if/ ,/ switch/ ,/ do/ ,/ for/ ,/ while/ )/ 都/ 会/ 导致/ 同一/ warp/ 块/ 的/ 线程/ 分支/ ,/ 从而/ 显著/ 影响/ 有效/ 的/ 指令/ 吞吐量/ ,/ 也就是说/ ,/ 这些/ 指令/ 会/ 导致/ 线程/ 采用/ 不同/ 的/ 执行/ 路径/ ./ 如果/ 出现/ 这种/ 情况/ ,/ 就/ 必须/ 序列化/ 不同/ 的/ 执行/ 路径/ ,/ 因而/ 增加/ 了/ 该/ warp/ 块/ 执行/ 的/ 指令/ 总数/ ./ 完成/ 所有/ 不同/ 的/ 执行/ 路径/ 时/ ,/ 线程/ 将/ 重新/ 汇聚/ 到/ 同一/ 执行/ 路径/ ./ 因此/ 一方面/ 我们/ 尽量减少/ 控制流/ 指令/ ,/ 另一方面/ 优化/ 必要/ 的/ 减少/ 控制流/ 指令/ ./ 足/ 的/ 充分条件/ SC/ ./ 在/ 差分/ 攻击/ 算法/ 中/ ,/ 为了/ 实现/ 隧道/ 技术/ ,/ 使用/ 了/ Page4for/ 循环/ 语句/ ,/ 可以/ 通过/ 展开/ for/ 循环/ 语句/ ,/ 消除/ 控制流/ 指令/ ./ 图/ 1/ 表示/ 了/ 展开/ 和/ 未/ 展开/ for/ 循环/ 语句/ 的/ 效率/ 差别/ ./ 图/ 1/ 展开/ 和/ 未/ 展开/ for/ 循环/ 语句/ 的/ 效率/ 比较/ 从图/ 1/ 可以/ 看出/ 当/ 循环/ 的/ 次数/ 越大时/ ,/ 展开/ 和/ 未/ 展开/ for/ 循环/ 语句/ 的/ 效率/ 差别/ 越大/ ./ 在/ 实现/ 多/ 消息/ 修正/ 技术/ 和/ 判断/ 充分条件/ 是否/ 成立/ 时/ ,/ 需要/ 使用/ if/ 语句/ ,/ 但/ 这些/ if/ 语句/ 都/ 含空/ 分支/ ./ if/ 指向/ 空/ 分支/ 或者/ 按/ halfwarp/ 跳转/ 都/ 没有/ 性能/ 损失/ ,/ 所以/ 在/ 边界/ 控制/ 中/ 的/ if/ 不会/ 造成/ 性能/ 损失/ ,/ 只是/ 多/ 了/ 一次/ 判断/ ./ 另外/ 控制器/ 可能/ 用/ 分支/ 谓词/ 来/ 优化/ if/ 指令/ ./ 在/ 使用/ 分支/ 谓词/ 时/ ,/ 依靠/ 控制/ 条件/ 执行/ 的/ 任何/ 指令/ 都/ 不会/ 被/ 跳/ 过/ ./ 而是/ 分别/ 与/ 一个/ 每/ 线程/ 条件/ 代码/ 或/ 根据/ 控制/ 条件/ 设置/ 为/ true/ 或/ false/ 的/ 谓词/ 相关联/ ,/ 尽管/ 每/ 一条/ 指令/ 都/ 为/ 执行/ 而/ 进行/ 了/ 调度/ ,/ 但/ 只有/ 谓词/ 为/ true/ 的/ 指令/ 才/ 会/ 被/ 实际/ 执行/ ./ 带有/ false/ 谓词/ 的/ 指令/ 不会/ 写入/ 结果/ ,/ 也/ 不会/ 计算/ 地址/ 或/ 读取/ 操作数/ ./ 只有/ 在/ 分支/ 条件/ 控制/ 的/ 指令/ 数量/ 小于/ 或/ 等于/ 特定/ 阈值/ 时/ ,/ 编译器/ 才/ 会/ 使用/ 有/ 谓词/ 的/ 指令/ 替换/ 分支/ 指令/ :/ 如果/ 编译器/ 确定/ 出/ 有/ 可能/ 产生/ 大量/ 分支/ warp/ 块/ 的/ 条件/ ,/ 则/ 此/ 阈值/ 为/ 7/ ,/ 否则/ 为/ 4/ ./ 差分/ 攻击/ 算法/ 中/ 还/ 需/ continue/ 指令/ ,/ 但/ CUDA/ 中/ 并/ 没有/ continue/ 指令/ ,/ 我们/ 可以/ 去掉/ 不能/ 转换/ 的/ continue/ 指令/ ./ 例如/ 可以/ 去掉/ 攻击/ MD5/ 的/ 隧道/ 差分/ 算法/ [/ 1/ ]/ 中/ 第/ 25/ 步到/ 第/ 64/ 步中/ 的/ continue/ 指令/ ,/ 第/ 18/ 步/ ~/ 第/ 24/ 步中/ 的/ continue/ 指令/ 可以/ 利用/ 多/ 消息/ 修正/ 方法/ 转换/ 为/ if/ 指令/ ./ 因为/ 在/ 算法/ 结束/ 时/ ,/ 会/ 对/ 链/ 变量/ 进行/ 判断/ 是否/ 符合条件/ ,/ 且/ 给定/ 消息/ 输入/ ,/ 连续/ 4/ 个/ 链/ 变量/ 就/ 可以/ 决定/ 下/ 一步/ 的/ 链/ 变量/ 的/ 值/ ./ 因此/ 去掉/ continue/ ,/ 并/ 不会/ 产生/ 错误/ ./ 下面/ 将/ 分析/ 对/ 攻击/ MD5/ 的/ 隧道/ 差分/ 算法/ [/ 1/ ]/ 的/ 改进/ ,/ 定义/ Qi/ (/ 1/ / i/ / 64/ )/ 为/ MD5/ 第/ i/ 步/ 计算/ 出/ 的/ 链/ 变量/ ,/ {/ m0/ ,/ m1/ ,/ …/ ,/ m15/ }/ 为/ 消息/ 分组/ ,/ 其中/ mj/ {/ 0/ / j/ / 15/ }/ 为/ 32bits/ ,/ 详细/ 符号/ 定义/ 和/ 算法/ 流程/ 请/ 参见/ 文献/ [/ 1/ ]/ ./ 在/ 文献/ [/ 1/ ]/ 提出/ 的/ 差分/ 攻击/ 算法/ 中/ 计算/ 和/ 判断/ 链/ 变量/ Q18/ …/ Q24/ 时/ 都/ 用到/ 了/ continue/ 控制流/ 指令/ ./ 如果/ Q18/ …/ Q24/ 不/ 满足/ 充分条件/ ,/ 则/ 需要/ 重新/ 开始/ 计算/ 整个/ 算法/ 流程/ ./ 因此/ 算法/ 的/ 效率/ 不但/ 降低/ 了/ 而且/ 在/ GPGPU/ 上/ 不能/ 执行/ continue/ 指令/ ./ 因此/ 我们/ 利用/ 多/ 消息/ 修正/ 方法/ 对此/ 进行/ 了/ 改进/ ./ 本/ 算法/ 的/ 具体/ 改进/ 方案/ 为/ :/ 如果/ Q18/ …/ Q24/ 不/ 满足/ 充分条件/ ,/ 通过/ 多/ 消息/ 修正/ 方法/ 调整/ 消息/ 值/ ,/ 使得/ Q18/ …/ Q24/ 以/ 一定/ 概率/ 满足/ 充分条件/ ,/ 同时/ 不/ 影响/ 以前/ 充分条件/ 的/ 满足/ ./ 例如/ ,/ 在/ 文献/ [/ 4/ ]/ 中/ Q21/ 需要/ 满足/ 的/ 充分条件/ 是/ Q21/ [/ 31/ ]/ =/ 0/ ,/ 假设/ Q21/ [/ 31/ ]/ =/ 1/ ,/ 由于/ 所以/ 可以/ 通过/ 改变/ m5/ 的/ 第/ 26/ 比特/ ,/ 即令/ m5/ =/ m5/ -/ 226/ 使得/ Q21/ [/ 31/ ]/ =/ 0/ ./ m5/ 在/ 第/ 1/ 轮/ 的/ 第/ 6/ 步中/ 也/ 用到/ 了/ ,/ Q6/ =/ Q5/ +/ (/ f5/ (/ Q5/ ,/ Q4/ ,/ Q3/ )/ +/ Q2/ +/ 这/ 导致/ Q6/ 的/ 改变/ ,/ 为了/ 不/ 影响/ 第/ 21/ 步/ 之前/ 充分条件/ 的/ 满足/ ,/ 我们/ 还/ 需要/ 做/ 一些/ 相应/ 的/ 修改/ ,/ 详细/ 情节/ 请/ 参见/ 表/ 1/ ./ 表/ 1/ 利用/ 多/ 消息/ 修正/ 方法/ 调整/ 犙/ 21/ [/ 31/ ]/ 的/ 修改/ 方案/ 步数/ 4m3/ =/ m3/ +/ 245m4/ =/ (/ (/ Q5/ -/ Qnew4/ )/ >/ >/ >/ 7/ -/ Q1/ -/ f4/ (/ Q4/ ,/ Q3/ ,/ Q2/ )/ -/ K46m5/ =/ m5/ -/ 2267m6/ =/ m68m7/ =/ m7/ -/ 226/ 表/ 1/ 中/ 不但/ m5/ 改变/ 了/ ,/ m3/ ,/ m4/ ,/ m7/ 也/ 改变/ 了/ ./ 但是/ 在/ 前/ 21/ 步中/ ,/ m3/ ,/ m4/ ,/ m7/ 只/ 在/ 第/ 4/ ,/ 5/ ,/ 8/ 步中/ 被/ 用到/ ,/ 因此/ 不会/ 影响/ 第/ 21/ 步/ 之前/ 充分条件/ 的/ 满足/ !/ 攻击/ 算法/ 主体/ 实现/ 流程图/ 见图/ 2/ ./ 整个/ 构架/ 在/ Visualstudio6/ ./ 0/ 的/ 环境/ 下/ 利用/ CUDA/ 语言/ 开发/ 完成/ ./ 在/ NVIDIA/ 公司/ GeForce9800GX2/ 上/ 运行/ ./ 得到/ 的/ 结果/ 以及/ 在/ 目前/ 高端/ PCCore2QuadQ9000/ (/ 2.0/ GHz/ )/ 4/ 核/ 电脑/ 上/ 的/ 运行/ 结果/ 如表/ 2/ 所示/ ,/ 表中/ 所/ 给/ 的/ 市场价/ 参照/ 的/ 是/ 进行/ 实验/ 时/ 的/ 设备/ 价格/ ,/ 把/ 开发/ 完成/ 后/ 的/ 可执行文件/ 用于/ 实际/ 攻击/ 时/ ,/ 主要/ 的/ 问题/ 是/ 设备/ ,/ 因此/ 以/ 设备/ 当时/ 的/ 市场价/ 做/ 为/ 实现/ 代价/ 是/ 比较/ 合理/ 的/ ./ Page5/ 图/ 2/ 差分/ 攻击/ 算法/ 在/ GPGPU/ 上/ 的/ 实现/ 流程图/ 表/ 2/ 在/ GeForce9800GX2/ 和/ Core2QuadQ9000/ (/ 2.0/ GHz/ )/ 4/ 核/ PC/ 上/ 运行/ 差分/ 攻击/ 算法/ 的/ 实验/ 结果/ 对比/ 计算/ 平台/ GeForce9800GX21/ ./ 35138811.5/ Core2QuadQ90008/ ./ 027000.085/ 结束语/ MDx/ 系列/ Hash/ 算法/ 的/ 软硬件/ 实现/ 效率高/ ,/ 同时/ 安全性/ 也/ 比较/ 高/ ,/ 被/ 广泛应用/ 于/ 保密/ 通信/ 、/ 数字签名/ 、/ 协议/ 认证/ 等/ 安全/ 领域/ ./ MDx/ 系列/ Hash/ 算法/ 的/ 安全性/ 成为/ 了/ 这些/ 安全/ 领域/ 的/ 安全/ 基石/ ./ 然而/ 对/ MDx/ 系列/ Hash/ 算法/ 的/ 安全/ 分析/ 直到/ 王小云/ 提出/ 差分/ 攻击/ 算法/ 后/ 才/ 有/ 了/ 重大突破/ ./ 本文/ 认证/ 了/ 差分/ 攻击/ 算法/ 不但/ 可以/ 在/ GPGPU/ 上/ 实现/ 而且/ 还/ 能/ 达到/ 11.5/ 倍/ 的/ 性价比/ ./ GPGPU/ 的/ 功率/ 太/ 大/ ,/ GeForce9800GX2/ 的/ 功率/ 就/ 达到/ 210W/ ,/ 从而/ 限制/ 了/ 多/ GPGPU/ 使用/ ,/ 温度/ 太高/ 也/ 增加/ 了/ 系统/ 的/ 不稳定性/ ,/ 然而/ GPGPU/ 的/ 强大/ 计算能力/ ,/ 便宜/ 的/ 价格/ 使得/ 它/ 的/ 应用/ 越来越/ 广泛/ ./ 差分/ 攻击/ 思想/ 具体/ 应用/ 到/ 攻击/ 某个/ Hash/ 函数/ 时/ ,/ 所/ 得到/ 的/ 具体/ 算法/ 是/ 不同/ 的/ ./ Klima/ [/ 1/ ]/ 提出/ 的/ 隧道/ 差分/ 攻击/ 算法/ 被/ 公认/ 为/ 经典/ 差分/ 攻击/ 算法/ ,/ 虽然/ 还有/ 复杂度/ 更/ 低/ 的/ 差分/ 攻击/ 算法/ ,/ 但是/ 关键/ 的/ 技术细节/ 并/ 没有/ 透露/ ./ 因此/ 我们/ 采用/ 隧道/ 差分/ 攻击/ 算法/ 作为/ 改进/ 和/ 实现/ 的/ 对象/ ./ 另外/ SHA/ -/ 1/ 算法/ 在/ 理论/ 上/ 虽然/ 已/ 被/ 攻破/ [/ 4/ ]/ ,/ 但是/ 实际上/ 并/ 没有/ 攻破/ ,/ 目前/ 并/ 没有/ 找到/ SHA/ -/ 1/ 的/ 碰撞/ ./ 差分/ 攻击/ 算法/ 在/ GPGPU/ 上/ 实现/ 的/ 优势/ 将/ 对/ 寻找/ SHA/ -/ 1/ 的/ 碰撞/ 带来/ 帮助/ ./ 

