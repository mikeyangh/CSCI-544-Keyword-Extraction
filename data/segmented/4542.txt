Page1/ 开放/ 环境/ 下/ 自/ 适应/ 软件系统/ 的/ 运行机制/ 与/ 构造/ 技术/ 1/ )/ (/ 国防科学技术大学/ 计算机/ 学院/ 计算机科学/ 与/ 技术/ 系/ 长沙/ 410073/ )/ 2/ )/ (/ 国防科学技术大学/ 计算机/ 学院/ 并行/ 与/ 分布/ 处理/ 重点/ 实验室/ 长沙/ 410073/ )/ 3/ )/ (/ 国防科学技术大学/ 装备/ 综合/ 保障/ 技术/ 重点/ 实验室/ 长沙/ 410073/ )/ 摘要/ 由于/ 环境/ 变化/ 的/ 不确定性/ 和/ 不/ 可预见性/ ,/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 开发/ 面临/ 着/ 以下/ 两/ 方面/ 挑战/ :/ 首先/ 软件/ 开发人员/ 很难/ 在/ 设计阶段/ 清晰/ 地/ 预测/ 环境/ 中/ 各种/ 可能/ 的/ 变化/ 并/ 准确/ 地/ 定义/ 相应/ 的/ 自/ 适应/ 需求/ ,/ 其次/ 系统/ 大量/ 的/ 自/ 适应/ 决策/ 需要/ 由/ 系统/ 自身/ 在/ 运行/ 时来/ 完成/ ./ 针对/ 上述/ 挑战/ ,/ 文中/ 提出/ 了/ 一种/ 基于/ 软件/ Agent/ 和/ 组织/ 抽象/ 的/ 方法/ 来/ 支持/ 此类/ 系统/ 的/ 开发/ 和/ 运行/ ./ 该/ 方法/ 采用/ 社会/ 组织/ 的/ 思想/ 来/ 抽象/ 自/ 适应/ 系统/ ,/ 描述/ 和/ 分析/ 系统/ 的/ 自/ 适应/ 特征/ ;/ 设计/ 了/ 基于/ 角色/ 动态/ 绑定/ 的/ 自/ 适应/ 运行机制/ ,/ 并/ 借助于/ 增强/ 学习/ 的/ 手段/ 来/ 实现/ 系统/ 的/ 在线/ 自/ 适应/ 决策/ 以/ 应对/ 不可/ 预见/ 的/ 变化/ ./ 论文/ 介绍/ 了/ 基于/ 学习/ 和/ 动态/ 绑定/ 机制/ 的/ 在线/ 自/ 适应/ 决策/ 算法/ ,/ 提出/ 了/ 支持/ 开放/ 环境/ 下/ 自/ 适应/ 软件系统/ 的/ 工程化/ 开发/ 手段/ ,/ 包括/ 自/ 适应/ 软件/ 模型/ 和/ 构造/ 框架/ 、/ 结构化/ 的/ 过程/ ,/ 开发/ 了/ 相应/ 的/ 支撑/ 软件/ 环境/ SADE/ +/ ,/ 并/ 进行/ 了/ 案例/ 分析/ 以/ 展示/ 方法/ 的/ 有效性/ ./ 关键词/ 自/ 适应/ ;/ 组织/ ;/ 动态/ 绑定/ ;/ 学习/ 1/ 引言/ 当前/ ,/ 越来越/ 多/ 的/ 软件/ 密集型/ 系统/ 部署/ 在/ 动态/ 、/ 开放/ 和/ 难控/ 的/ 环境/ 中/ (/ 如/ Internet/ )/ [/ 1/ ]/ ,/ 并/ 朝着/ 规模/ 超大/ 的/ 方向/ 发展/ [/ 2/ ]/ ./ 为了/ 应对/ 环境/ 和/ 系统/ 自身/ 的/ 持续/ 、/ 动态变化/ ,/ 人们/ 对系统/ 的/ 适应性/ 提出/ 了/ 迫切/ 的/ 需求/ ,/ 以/ 使得/ 系统/ 具有/ 更好/ 的/ 灵活性/ 、/ 健壮性/ 、/ 可靠性/ 、/ 易变性/ 、/ 自/ 优化/ 性/ 、/ 可/ 重配/ 性/ 等/ 性能/ [/ 3/ ]/ ./ 自/ 适应/ 软件系统/ 在/ 互联网/ 应用/ 、/ 柔性/ 制造/ 、/ 国防/ 军事/ 、/ 航空航天/ 、/ 企业/ 计算/ 等/ 领域/ 具有/ 广泛/ 的/ 应用/ 潜力/ ./ 自/ 适应/ 软件/ 是/ 指/ 这样/ 一类/ 软件系统/ :/ 它们/ 可/ 对/ 自身/ 进行/ 调整/ 以/ 对/ 发生/ 在/ 环境/ 或者/ 自身/ 的/ 变化/ 做出/ 响应/ [/ 4/ ]/ ,/ 以/ 更好/ 地/ 满足/ 系统/ 的/ 设计/ 目标/ ./ 这种/ 调整/ 可/ 针对/ 软件系统/ 的/ 不同/ 方面/ (/ 如/ 属性/ 、/ 构件/ 等/ )/ ,/ 在/ 不同/ 的/ 层次/ (/ 如/ 数据/ 、/ 模块/ 、/ 体系结构/ 等/ )/ 上/ 进行/ ./ 借助于/ 控制/ 学/ 理论/ ,/ 自/ 适应/ 系统/ 的/ 调整/ 被/ 视为/ 是/ 一个/ 闭环/ 反馈/ (/ closed/ -/ loopwithfeedback/ )/ 过程/ ,/ 其中/ 包含/ 了/ 4/ 个/ 方面/ 的/ 基本/ 活动/ :/ 监控/ (/ Monitor/ )/ 以/ 获取/ 各种/ 原始/ 的/ 变化/ 数据/ 、/ 发现/ (/ Detect/ )/ 以/ 分析/ 数据/ 、/ 决策/ (/ Decide/ )/ 以/ 确定/ 如何/ 进行/ 调整/ 和/ 实施/ (/ Act/ )/ 以/ 执行/ 调整/ [/ 4/ ]/ ./ 在/ 软件工程/ 和/ 人工智能/ 等/ 领域/ ,/ 有关/ 自/ 适应/ 软件系统/ 的/ 研究/ 引起/ 了/ 人们/ 的/ 高度/ 关注/ 和/ 重视/ [/ 3/ -/ 4/ ]/ ,/ 研究/ 内容/ 涉及/ 到/ 自/ 适应/ 系统/ 软件工程/ 的/ 诸多方面/ ,/ 包括/ 需求/ 工程/ [/ 3/ ]/ 、/ 软件体系结构/ [/ 5/ ]/ 、/ 建模语言/ 和/ 方法学/ [/ 6/ ]/ 、/ 中间件/ [/ 7/ ]/ 、/ 构件技术/ [/ 9/ ]/ 、/ 语言/ 设施/ [/ 10/ -/ 11/ ]/ 等/ ./ 由于/ 软件系统/ 的/ 适应性/ 给/ 工程化/ 理论/ 和/ 技术/ 带来/ 的/ 挑战/ ,/ 近年来/ 该/ 领域/ 研究/ 的/ 一个/ 重要/ 趋势/ 是/ 与/ 其他/ 相关/ 领域/ 的/ 研究/ 相/ 融合/ ,/ 从而/ 为/ 自/ 适应/ 软件系统/ 的/ 开发/ 提供/ 基础理论/ 和/ 关键技术/ ,/ 如/ 控制论/ [/ 4/ ]/ 、/ 智能/ Agent/ 技术/ [/ 6/ ]/ 等/ ./ 目前/ 自/ 适应/ 软件系统/ 的/ 开发/ 大多/ 采用/ 自顶向下/ 、/ 设计/ 优先/ 的/ 方式/ ./ 该/ 方式/ 的/ 特点/ 是/ 在/ 设计阶段/ 由/ 软件/ 开发人员/ 显式/ 地/ 表示/ 系统/ 应该/ 监控/ 和/ 发现/ 哪些/ 变化/ 、/ 针对/ 这些/ 变化/ 系统/ 该/ 如何/ 对/ 自身/ 进行/ 什么样/ 的/ 调整/ ,/ 并/ 采用/ 策略/ (/ Strategy/ )/ [/ 11/ ]/ 和/ 规则/ (/ Rule/ )/ [/ 12/ ]/ 的/ 方式/ 、/ 借助于/ 各种/ 形式/ 的/ 语言/ 设施/ 来/ 描述/ 这些/ 自/ 适应/ 需求/ 及/ 设计/ 决策/ ,/ 如/ 软件体系结构/ 描述语言/ 、/ 自/ 适应/ 策略/ 描述语言/ 、/ 面向/ 方面/ 程序设计/ 语言/ 等/ ./ 上述/ 方法/ 对于/ 变化/ 在/ 开发阶段/ 可/ 确定/ 和/ 可/ 预期/ 的/ 、/ 调整/ 可/ 预先/ 定义/ 的/ 自/ 适应/ 软件系统/ 而言/ 是/ 有效/ 的/ ,/ 但是/ 如果/ 自/ 适应/ 软件系统/ 所/ 驻留/ 的/ 环境/ 是/ 开放/ 的/ ,/ 那么/ 现有/ 的/ 自/ 适应/ 系统/ 软件工程/ 技术/ 将/ 面临/ 一系列/ 的/ 挑战/ ./ 首先/ ,/ 设计阶段/ 开发人员/ 无法/ 事先/ 预知/ 所有/ 的/ 自/ 适应/ 需求/ [/ 3/ ]/ ./ 对/ 开放/ 环境/ 下/ 的/ 自/ 适应/ 系统/ 而言/ ,/ 由于/ 环境/ 变化/ 的/ 不确定性/ 和/ 不/ 可预见性/ ,/ 不可/ 预期/ 的/ 事件/ 随时/ 可能/ 发生/ ,/ 因而/ 事先/ 准确/ 和/ 完整/ 地/ 预期/ 各种/ 变化/ 以及/ 相应/ 的/ 自/ 适应/ 需求/ 几乎/ 是/ 不/ 可能/ 的/ ,/ 由/ 软件/ 开发人员/ 在/ 设计阶段/ 借助于/ 各种/ 自/ 适应/ 策略/ 描述语言/ 或者/ 程序设计/ 语言/ 来/ 定义/ 自/ 适应/ 逻辑/ 不/ 可行/ ./ 例如/ 欲/ 建设/ 一个/ 可信/ 的/ 自/ 适应/ 软件系统/ ,/ 它/ 可/ 针对/ 网络攻击/ 行为/ 进行/ 适应性/ 调整/ ,/ 使得/ 系统/ 具有/ 更好/ 的/ 健壮性/ 和/ 灵活性/ ./ 显然/ ,/ 开发人员/ 不/ 可能/ 预知/ 各种/ 可能/ 的/ 网络攻击/ 方式/ 和/ 情况/ ./ 其次/ ,/ 自/ 适应/ 系统/ 通常/ 需要/ 持续性/ 的/ 运行/ ./ 现有/ 的/ 自/ 适应/ 软件/ 通常/ 采用/ 离线/ (/ off/ -/ line/ )/ 决策/ 的/ 方法/ ,/ 即/ 根据/ 开发者/ 所/ 提供/ 的/ 预定/ 义/ 变化/ 描述/ 和良/ 定义/ 的/ 自/ 适应/ 逻辑/ 来/ 实施/ 调整/ ./ 一旦/ 自/ 适应/ 需求/ 发生/ 了/ 变化/ (/ 如/ 出现/ 了/ 非/ 预期/ 的/ 环境/ 变化/ 并/ 需要/ 对/ 该/ 变化/ 作出/ 自/ 适应/ 的/ 响应/ )/ ,/ 那么/ 系统/ 的/ 自/ 适应/ 逻辑/ 需要/ 重新/ 定义/ ,/ 系统/ 的/ 运行/ 需要/ 被/ 终止/ 并/ 重新/ 加载/ ./ 对于/ 开放/ 环境/ 下/ 的/ 自/ 适应/ 系统/ 而言/ ,/ 变化/ 的/ 不可/ 预知/ 性/ 将/ 可能/ 导致系统/ 运行/ 的/ 经常性/ 终止/ ./ 为了/ 解决/ 上述/ 问题/ 和/ 挑战/ ,/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 软件工程/ 技术/ 需要/ 实现/ 两/ 方面/ 的/ 转变/ ,/ 即将/ 原先/ 由/ 开发人员/ 在/ 设计阶段/ 给出/ 的/ 自/ 适应/ 逻辑/ 延迟/ 到/ 系统/ 自身/ 在/ 运行/ 阶段/ 来/ 完成/ ,/ 自/ 适应/ 决策/ 需要/ 由/ 离线/ 方式/ 转化/ 为/ 在线/ 方式/ ./ 为此/ ,/ 本文/ 提出/ 了/ 一种/ 基于/ 软件/ Agent/ 和/ 组织/ 抽象/ 的/ 方法/ 来/ 支持/ 此类/ 系统/ 的/ 开发/ 和/ 运行/ ./ 该/ 方法/ 采用/ 社会/ 组织/ 的/ 思想/ 来/ 抽象/ 和/ 描述/ 自/ 适应/ 系统/ ,/ 设计/ 自/ 适应/ 运行机制/ ,/ 借助/ 增强/ 学习/ 的/ 手段/ 来/ 应对/ 不可/ 预见/ 的/ 变化/ 、/ 实现/ 系统/ 运行/ 时/ 的/ 自/ 适应/ 决策/ ./ 本文/ 第/ 2/ 节/ 定义/ 基于/ 组织/ 抽象/ 的/ 自/ 适应/ 系统/ 模型/ ,/ 在/ 此基础/ 上/ 设计/ 角色/ 动态/ 绑定/ 的/ 自/ 适应/ 机制/ ;/ 第/ 3/ 节/ 提出/ 基于/ 学习/ 和/ 动态/ 绑定/ 的/ 在/ Page3/ 线自/ 适应/ 决策/ 方法/ ;/ 第/ 4/ 节/ 介绍/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 工程化/ 开发方法/ ,/ 并/ 开展/ 案例/ 分析/ ;/ 第/ 5/ 节/ 介绍/ 和/ 对比/ 分析/ 相关/ 研究/ 工作/ ;/ 最后/ 第/ 6/ 节/ 总结/ 全文/ 工作/ 并/ 展望/ 下/ 一步/ 的/ 研究/ ./ 2/ 自/ 适应/ 系统/ 的/ 抽象/ 模型/ 及/ 运行机制/ 当前/ 越来越/ 多/ 的/ 自/ 适应/ 软件系统/ 实际上/ 是/ 现实/ 社会/ 系统/ 在/ 计算机/ 世界/ 中/ 的/ 映射/ ,/ 许多/ 自/ 适应/ 软件系统/ 具有/ 显式/ 的/ 社会/ 组织/ 特征/ ./ 组织学/ 和/ 社会学/ 可为/ 自/ 适应/ 软件系统/ 的/ 研究/ 提供/ 高层/ 的/ 抽象/ 和/ 概念/ (/ 如/ 角色/ 、/ 组织/ 、/ 规则/ 等/ )/ ,/ 它们/ 直观/ 、/ 易于/ 理解/ 、/ 更加/ 贴近/ 现实/ 世界/ ,/ 有助于/ 理解/ 和/ 分析/ “/ 为什么/ (/ Why/ )/ ”/ 、/ “/ 谁/ (/ Who/ )/ ”/ 、/ “/ 如何/ (/ How/ )/ ”/ 以及/ 针对/ 什么样/ 的/ 对象/ (/ “/ What/ ”/ )/ 进行/ 自/ 适应/ ,/ 进而/ 简化/ 和/ 控制/ 自/ 适应/ 系统/ 的/ 开发/ ./ 图/ 1/ 描述/ 了/ 基于/ Agent/ 和/ 组织/ 抽象/ 的/ 自/ 适应/ 系统/ 元/ 模型/ ./ 一个/ 自/ 适应/ 系统/ 被/ 视为/ 一个/ 社会化/ 的/ 组织/ ,/ 组织/ 中/ 的/ 个体/ 被/ 抽象/ 为/ Agent/ ,/ 组织/ 及其/ Agent/ 均/ 驻留/ 在/ 特定/ 的/ 环境/ 中/ ,/ 因而/ 受/ 环境/ 变化/ 的/ 影响/ ./ 组织/ 拥有/ 一组/ 角色/ ,/ 它们/ 封装/ 了/ 组织/ 中/ 的/ 行为/ 和/ 资源/ ./ 组织/ 中/ 的/ 个体/ Agent/ 通过/ 扮演/ 不同/ 的/ 角色/ 来/ 展示/ 其/ 在/ 组织/ 中/ 不同/ 的/ 地位/ 和/ 行为/ ./ 图/ 1/ 基于/ Agent/ 和/ 组织/ 抽象/ 的/ 自/ 适应/ 系统/ 元/ 模型/ (/ 1/ )/ 组织/ (/ Organization/ )/ 是/ 指/ 在/ 特定/ 上下文/ 中/ 一组/ 具有/ 共同/ 目标/ 、/ 相互/ 交互/ 的/ Agent/ 集合/ ,/ 组织/ 的/ 上下文/ 定义/ 了/ 组织/ 所/ 驻留/ 的/ 环境/ ./ 对于/ 具有/ 自/ 适应能力/ 的/ 系统/ 而言/ ,/ 环境/ 变化/ 将/ 对/ 组织/ 的/ 要素/ 、/ 结构/ 、/ 行为/ 等/ 产生/ 影响/ ./ (/ 2/ )/ Agent/ 是/ 指/ 驻留/ 在/ 特定/ 环境/ 下/ 能够/ 自主/ 、/ 灵活/ 地/ 执行/ 动作/ 以/ 满足/ 设计/ 目标/ 的/ 行为/ 实体/ ./ Agent/ 通过/ 扮演/ 组织/ 中/ 的/ 角色/ 成为/ 组织/ 中/ 的/ 成员/ ,/ 获得/ 组织/ 中/ 的/ 地位/ ,/ 拥有/ 相应/ 的/ 资源/ 和/ 行为/ ./ 对于/ 某些/ Agent/ 而言/ ,/ 驻留/ 环境/ 以及/ 自身/ 内部/ 的/ 变化/ 将/ 促使/ Agent/ 对/ 其/ 自身/ 的/ 结构/ 和/ 行为/ 进行/ 调整/ ,/ 该类/ Agent/ 被/ 称为/ 自/ 适应/ Agent/ (/ Self/ -/ adaptiveAgent/ ,/ 简述/ 为/ SA/ )/ ./ (/ 3/ )/ 角色/ (/ Role/ )/ 是/ 对/ Agent/ 在/ 组织/ 上下文/ 中/ 所/ 展示/ 的/ 环境/ 、/ 行为/ 及/ 资源/ 的/ 抽象/ 表示/ ,/ 反映/ 了/ Agent/ 在/ 组织/ 中/ 的/ 地位/ ./ (/ 4/ )/ 环境/ (/ Environment/ )/ 是/ 那些/ 对/ 组织/ 或者/ Agent/ 的/ 行为/ 或者/ 调整/ 产生/ 影响/ 的/ 要素/ 的/ 抽象/ ./ 环境/ 的/ 变化/ 可/ 抽象/ 为/ 环境/ 中/ 相关/ 事件/ 的/ 发生/ ./ 对于/ 开放/ 环境/ 而言/ ,/ 环境/ 变化/ 往往/ 是/ 动态/ 、/ 不/ 确定/ 、/ 无法/ 事先/ 预知/ 的/ ./ MAS/ 组织/ 中/ 的/ Agent/ 能够/ 随着/ 驻留/ 环境/ 及其/ 自身/ 的/ 变化/ 动态/ 地/ 调整/ 它/ 在/ 组织/ 中/ 所/ 扮演/ 的/ 角色/ ,/ 进而/ “/ 进入/ ”/ 或者/ “/ 退出/ ”/ 某个/ 组织/ ,/ 或者/ 改变/ 它/ 在/ 组织/ 中/ 的/ “/ 地位/ ”/ (/ Position/ )/ ,/ 反映/ 了/ 它/ 对/ 环境/ 和/ 自身/ 变化/ 的/ 某种/ 适应性/ ./ Agent/ 对/ 角色/ 的/ 调整/ 可/ 通过/ 以下/ 4/ 个/ 基本/ 的/ 自/ 适应/ 原子/ 操作/ 来/ 完成/ :/ “/ Join/ ”/ (/ 加入/ )/ 、/ “/ Quit/ ”/ (/ 退出/ )/ 、/ “/ Suspend/ ”/ (/ 挂/ 起/ )/ 、/ “/ Resume/ ”/ (/ 恢复/ )/ ./ 一旦/ Agent/ 通过/ 执行/ 这些/ 原子/ 操作/ 来/ 改变/ 其/ 角色/ ,/ 那么/ Agent/ 的/ 内部/ 资源/ 、/ 属性/ 和/ 行为/ 等/ 也/ 随之/ 发生/ 调整/ ./ 本文/ 将/ 上述/ 自/ 适应/ 机制/ 称为/ 动态/ 绑定/ 机制/ (/ 见图/ 2/ )/ ./ (/ 1/ )/ “/ Join/ ”/ ./ Agent/ 可/ 执行/ 自/ 适应/ 动作/ “/ Join/ ”/ 以/ 加入/ 组织/ 中/ 的/ 角色/ ,/ 获得/ 该/ 角色/ 所/ 定义/ 的/ 结构/ 和/ 行为/ 特性/ ,/ 进而/ 改变/ Agent/ 在/ 组织/ 中/ 的/ 地位/ ,/ 如/ 成为/ 组织/ 中/ 的/ 一员/ 或者/ 改变/ 其/ 在/ 组织/ 中/ 所/ 扮演/ 的/ 角色/ ./ 一旦/ Agent/ 加入/ 某个/ 角色/ ,/ 我们/ 称/ Agent/ 绑定/ 了/ 该/ 角色/ ./ 随之/ 该/ 角色/ 所/ 定义/ 的/ 结构/ 和/ 行为/ 将/ 对/ Agent/ 实施/ 约束/ 并/ 产生/ 影响/ ./ (/ 2/ )/ “/ Quit/ ”/ ./ Agent/ 可/ 执行/ 自/ 适应/ 动作/ “/ Quit/ ”/ 以/ 退出/ 组织/ 中/ 的/ 角色/ ,/ 失去/ 该/ 角色/ 所/ 定义/ 的/ 结构/ 和/ 行为/ 特性/ ,/ 进而/ 改变/ Agent/ 在/ 组织/ 中/ 的/ 地位/ ,/ 如/ 不再/ 是/ 组织/ 中/ 的/ 一员/ 或者/ 改变/ 其/ 在/ 组织/ 中/ 所/ 扮演/ 的/ 角色/ ./ Agent/ 所/ 绑定/ 的/ 角色/ 具有/ 以下/ 两种/ 不同/ 的/ 状态/ :/ 活跃/ (/ Active/ )/ 状态/ 和/ 非/ 活跃/ (/ Inactive/ )/ 状态/ ,/ 并且/ 在/ 任何时刻/ 只能/ 处于/ 其中/ 的/ 一种/ 状态/ ./ (/ 3/ )/ “/ Suspend/ ”/ ./ Agent/ 可/ 执行/ 自/ 适应/ 动作/ “/ Suspend/ ”/ 以/ 将/ 所/ 绑定/ 角色/ 的/ 状态/ 从/ “/ 活跃/ ”/ 调整/ 为/ Page4/ “/ 非/ 活跃/ ”/ ./ 当/ Agent/ 所/ 绑定/ 的/ 角色/ 处于/ 非/ 活跃/ 状态/ 时/ ,/ 它/ 将/ 不再/ 约束/ 和/ 指导/ Agent/ 的/ 运行/ ,/ 但是/ Agent/ 仍/ 可/ 访问/ 角色/ 所/ 定义/ 的/ 结构/ 信息/ 并/ 访问/ 其/ 内部/ 属性/ ./ (/ 4/ )/ “/ Resume/ ”/ ./ Agent/ 可/ 执行/ 自/ 适应/ 动作/ “/ Resume/ ”/ 以/ 将/ 所/ 绑定/ 角色/ 的/ 状态/ 从/ “/ 非/ 活跃/ ”/ 调整/ 为/ “/ 活跃/ ”/ 状态/ ./ 当/ Agent/ 所/ 绑定/ 的/ 角色/ 处于/ 活跃/ 状态/ 时/ ,/ 它/ 将/ 约束/ Agent/ 的/ 运行/ ./ 例如/ Agent/ 将/ 根据/ 角色/ 所/ 定义/ 的/ 行为/ 来/ 选择/ 和/ 执行/ 动作/ ./ 3/ 基于/ 学习/ 和/ 动态/ 绑定/ 的/ 在线/ 自/ 适应/ 决策/ 3.1/ 在线/ 自/ 适应/ 决策/ 自/ 适应/ 决策/ 是/ 封闭/ 自/ 适应控制/ 循环/ 中/ 的/ 一个/ 重要环节/ ./ 在/ 自/ 适应/ 系统/ 开发/ 过程/ 中/ ,/ 通常/ 有/ 两种/ 不同/ 的/ 自/ 适应/ 决策/ 方式/ :/ 离线/ 决策/ 和/ 在线/ 决策/ ./ 离线/ 决策/ 也/ 称/ 静态/ 决策/ ,/ 它/ 是/ 由/ 开发人员/ 在/ 设计阶段/ 通过/ 显式/ 地/ 描述/ 自/ 适应/ 策略/ 或者/ 规则/ 来/ 定义/ 针对/ 何种/ 变化/ ,/ 对系统/ 进行/ 什么样/ 的/ 调整/ ./ 目前/ 该/ 方法/ 被/ 广泛/ 用于/ 自/ 适应/ 系统/ 的/ 开发/ [/ 5/ ,/ 11/ ]/ ./ 显然/ ,/ 这种/ 方法/ 对于/ 变化/ 可/ 预期/ 、/ 适应性/ 调整/ 可/ 事先/ 规约/ 的/ 自/ 适应/ 系统/ 而言/ 是/ 有效/ 的/ ./ 然而/ ,/ 对于/ 开放/ 环境/ 下/ 的/ 自/ 适应/ 系统/ 而言/ ,/ 其/ 开发/ 和/ 运行/ 将/ 面临/ 以下/ 两/ 方面/ 的/ 挑战/ :/ (/ 1/ )/ 系统/ 和/ 环境/ 的/ 变化/ 不可/ 预知/ 和/ 不/ 确定/ ,/ 因而/ 开发人员/ 无法/ 在/ 图/ 3/ 基于/ 强化/ 学习/ 和/ 动态/ 绑定/ 的/ 自/ 适应/ 设计阶段/ 给出/ 关于/ 适宜性/ 需求/ 和/ 逻辑/ 的/ 清晰/ 描述/ ./ 一旦/ 在/ 运行/ 时/ 出现/ 未/ 预期/ 的/ 变化/ ,/ 通常/ 做法/ 是/ 重新/ 定义/ 自/ 适应/ 策略/ 或/ 规则/ ,/ 随后/ 进行/ 重/ 编译/ 、/ 加载/ 和/ 执行/ ,/ 这/ 将/ 导致/ 自/ 适应/ 系统/ 难以/ 持续/ 运行/ 和/ 演化/ [/ 3/ ]/ ;/ (/ 2/ )/ 缺乏/ 对/ 策略/ 执行/ 效果/ 的/ 评判/ ,/ 预定/ 义/ 的/ 策略/ 一般/ 是/ 按照/ 开发人员/ 对系统/ 以及/ 环境/ 的/ 理解/ 对/ 在/ 不同/ 的/ 状态/ 下/ 系统/ 应/ 做/ 的/ 调整/ 给出/ 的/ 类似/ “/ 定性/ ”/ 的/ 判断/ ,/ 并/ 没有/ 针对/ 不同/ 环境/ 状态/ 下/ 执行/ 不同/ 的/ 自/ 适应/ 操作/ 会/ 给/ 系统/ 带来/ 的/ 好处/ 进行/ “/ 定量/ ”/ 的/ 判断/ ./ 针对/ 上述/ 问题/ ,/ 将/ 学习/ 引入/ 到/ 自/ 适应/ 决策/ 过程/ ,/ 采用/ 在线/ 的/ 方法/ 支持系统/ 的/ 动态/ 自/ 适应/ 决策/ ,/ 即使/ 得/ 系统/ 自身/ 能够/ 在/ 运行/ 时/ 通过/ 学习/ 的/ 手段/ 建立/ 起/ 所/ 观察/ 到/ 的/ 变化/ 与/ 适应性/ 调整/ 之间/ 的/ 关系/ ,/ 从而/ 对/ 自/ 适应/ 行为/ 进行/ 决策/ ./ 本文/ 的/ 研究/ 基于/ 以下/ 的/ 基本/ 假设/ :/ Agent/ 在/ 任何时刻/ 所/ 绑定/ 的/ 角色/ 只能/ 有/ 一个/ 处于/ 活跃/ 状态/ ,/ 即/ 不/ 考虑/ Agent/ 同时/ 受/ 多个/ 角色/ 约束/ 和/ 指导/ 的/ 情景/ ./ 图/ 3/ 描述/ 了/ 结合/ 强化/ 学习/ 和/ 动态/ 绑定/ 的/ 自/ 适应/ 运行机制/ ./ 它/ 由/ 3/ 个/ 部分/ 组成/ :/ SA/ 、/ 角色/ 和/ 环境/ ,/ 其中/ SA/ 是/ 行为主体/ ,/ 环境/ 是/ 影响/ SA/ 适应性/ 的/ 因素/ ,/ 角色/ 是/ SA/ 实施/ 自/ 适应/ 的/ 内容/ ./ SA/ 内部/ 具有/ 决策/ 部件/ 和/ 行为/ 池/ ,/ SA/ 所/ 绑定/ 角色/ 的/ 行为/ 将会/ 放入/ 行为/ 池中/ ,/ 行为/ 的/ 调度/ 执行/ 可能/ 会/ 对/ 环境/ 产生/ 影响/ ,/ 从而/ 导致/ 环境/ 状态/ 发生变化/ ./ SA/ 将/ 感知/ 到/ 的/ 状态/ 变化/ 交给/ 决策/ 部件/ ,/ 决策/ 部件/ 结合/ 已有/ 的/ 关于/ 环境/ 的/ 知识/ ,/ 制定/ 出/ 是否/ 执行/ 或/ 执行/ 哪个/ 自/ 适应/ 操作/ 的/ 决定/ ,/ Page5/ 若/ 选定/ 自/ 适应/ 操作/ 执行/ ,/ 则/ 导致/ 新一轮/ “/ 行为/ 执行/ -/ 状态/ 感知/ -/ 在线/ 决策/ ”/ 的/ 过程/ ./ 决策/ 单元/ 包含/ 学习/ 器/ 、/ 动作/ 选择/ 策略/ 和/ 学习/ 到/ 的/ 知识/ ./ 学习/ 器/ 根据/ 一定/ 的/ 学习/ 算法/ 完成/ 对/ SA/ 在/ 不同/ 状态/ 下/ 执行/ 的/ 自/ 适应/ 操作/ 的/ 适应/ 效果/ 的/ 学习/ ;/ 动作/ 选择/ 策略/ 按照/ ε/ -/ greedy/ 或/ Boltzmann/ 分布/ 机制/ 选择/ 不同/ 状态/ 下/ 执行/ 的/ 操作/ ,/ 从而/ 通过/ 为/ 各个/ 操作/ 赋予/ 一定/ 的/ 概率/ 实现/ 了/ “/ 探索/ ”/ 和/ “/ 利用/ ”/ 的/ 平衡/ ;/ 学习/ 到/ 的/ 知识/ 通过/ 一定/ 的/ 表格/ 形式/ 保存起来/ ,/ 这些/ 表格/ 被/ 称为/ 知识/ 表/ ./ 基于/ 强化/ 学习/ 的/ 自/ 适应/ 系统/ 运行/ 时/ 将/ 不断/ 与/ 环境/ 交互/ ,/ 并/ 在/ 此/ 过程/ 中/ ,/ 对/ 在/ 不同/ 状态/ 下/ 执行/ 的/ 自/ 适应/ 操作/ 的/ 好坏/ 进行/ 评判/ ,/ 形成/ 应对/ 不可/ 预知/ 、/ 动态变化/ 环境/ 的/ 知识/ ./ 3.1/ ./ 1/ 自/ 适应/ 操作/ 的/ 执行/ 根据/ 动态/ 绑定/ 机制/ ,/ SA/ 可/ 执行/ 一系列/ 的/ 自/ 适应/ 操作/ 以/ 对/ SA/ 所/ 绑定/ 的/ 角色/ 进行/ 调整/ ./ “/ join/ (/ r/ )/ ”/ 的/ 执行/ 将/ 使得/ 角色/ r/ 所/ 定义/ 的/ 一组/ 行为/ 将会/ 加载/ 到/ SA/ 的/ 行为/ 池中/ ,/ SA/ 通过/ 统一/ 的/ 行为/ 调度/ 器/ 对/ 行为/ 进行/ 调度/ 执行/ ,/ 行为/ 的/ 执行/ 作用/ 在/ 环境/ 上/ 可能/ 会/ 导致/ 环境/ 状态/ 的/ 变化/ ./ “/ quit/ (/ r/ )/ ”/ 的/ 执行/ 将/ 使得/ 行为/ 池中/ 对应/ 于/ 角色/ r/ 的/ 所有/ 行为/ 被/ 删除/ ./ “/ resume/ (/ r/ )/ ”/ 执行/ 后/ ,/ 对应/ 于/ 角色/ r/ 的/ 行为/ 将/ 被/ 激活/ ,/ 行为/ 将会/ 重新/ 被/ 调度/ 执行/ ./ “/ suspend/ (/ r/ )/ ”/ 执行/ 后/ ,/ 对应/ 于/ 角色/ r/ 的/ 行为/ 将/ 被/ 挂/ 起/ ./ 3.1/ ./ 2SA/ 与/ 环境/ 的/ 交互/ SA/ 感知/ 到/ 当前/ 环境/ 状态/ st/ 以及/ 环境/ 反馈/ 的/ 评/ 价值/ rt/ 后/ ,/ 选择/ 执行/ 一定/ 的/ 行为/ bt/ ,/ bt/ 的/ 执行/ 可能/ 会/ 对/ 环境/ 产生/ 影响/ ,/ 导致/ 环境/ 状态/ 从/ st/ 变成/ st/ +/ 1/ ,/ 环境/ 对/ bt/ 的/ 执行/ 效果/ 给出/ 评价/ ,/ 作为/ 行为/ 执行/ 的/ 回报/ 值/ 反馈/ 给/ SA/ ,/ SA/ 感知/ 到/ 新/ 的/ 环境/ 状态/ 以及/ 环境/ 对/ 其/ 行为/ 执行/ 的/ 反馈/ 后/ ,/ 依据/ 一定/ 的/ 策略/ 再/ 选择/ 一个/ 动作/ 执行/ ,/ 从而/ 触发/ 新一轮/ 的/ 交互/ 过程/ ./ SA/ 在/ 和/ 环境/ 的/ 交互/ 过程/ 中/ ,/ 会/ 将/ 环境/ 给出/ 的/ 关于/ 自身/ 在/ 不同/ 环境/ 状态/ 下/ 执行/ 的/ 动作/ 的/ 评价/ 保存起来/ ,/ 并/ 不断更新/ ,/ 在/ 进行/ 大量/ 的/ 交互/ 后/ ,/ 将/ 获得/ 关于/ 应对/ 环境/ 不同/ 状态/ 的/ 知识/ ./ 3.1/ ./ 3SA/ 的/ 自/ 适应/ 学习/ 过程/ SA/ 感知/ 到/ 环境/ 变化/ 后/ ,/ 将/ 环境/ 状态/ (/ 假设/ 状态/ 为/ s/ )/ 发送给/ 行为/ 选择/ 单元/ ;/ 行为/ 选择/ 单元/ 根据/ 一定/ 的/ 选择/ 策略/ ,/ 从/ 该/ 状态/ 下/ 可能/ 执行/ 的/ 多个/ 行为/ 中/ 选择/ 一个/ 最合适/ 的/ (/ 假设/ 动作/ 为/ b/ )/ 提交/ 到/ 执行/ 单元/ ;/ 执行/ 单元/ 或/ 直接/ 执行/ 行为/ ,/ 或/ 通过/ 调用/ 一些/ 外部/ 接口/ (/ 比如/ 通信接口/ 等/ )/ 来/ 执行/ ,/ 行为/ 的/ 执行/ 可能/ 会/ 影响/ 环境/ 的/ 状态/ ;/ 环境/ 对/ SA/ 执行/ 行为/ 好坏/ 的/ 评判/ 通过/ 回报/ 值来/ 给出/ ,/ 评价/ 单元/ 获得/ 环境/ 给出/ 的/ 回报/ 值后/ ,/ 将/ 对/ 在/ s/ 状态/ 下/ 执行/ 的/ 行为/ b/ 的/ Q/ 值/ 进行/ 更新/ ;/ 对/ Q/ 值/ 的/ 更新/ 通过/ 学习/ 单元/ 写/ 进/ 知识/ 表中/ ,/ 学习/ 单元/ 还会/ 根据/ 对/ 当前/ 系统/ “/ 探索/ -/ 利用/ ”/ 的/ 要求/ ,/ 调整/ 学习/ 的/ 相关/ 参数/ (/ 比如/ 学习/ 率/ α/ 、/ 折扣率/ γ/ )/ 和/ 动作/ 选择/ 策略/ (/ 比如/ ε/ -/ greedy/ 算法/ 中/ 的/ ε/ 值/ )/ ./ SA/ 不断/ 的/ 监测/ 环境/ ,/ 感知/ 环境/ 的/ 当前/ 状态/ ,/ 从而/ 不断/ 触发/ “/ 选择/ -/ 执行/ -/ 评价/ -/ 学习/ ”/ 过程/ ./ 与此同时/ ,/ 适应环境/ 的/ 知识/ 表/ 也/ 不断/ 得到/ 更新/ 和/ 维护/ ,/ 进而/ 使得/ SA/ 能够/ 根据/ 知识/ 表/ 选择/ 出/ 更加/ 适应环境/ 变化/ 的/ 动作/ ,/ 逐步/ 改善/ SA/ 的/ 适应/ 效果/ (/ 如图/ 4/ 所示/ )/ ./ 需要/ 强调/ 的/ 是/ ,/ 论文/ 所/ 提出/ 的/ 方法/ 允许/ SA/ 绑定/ 多个/ 角色/ 、/ 加载/ 多个/ 不同/ 的/ 学习/ 器/ (/ 见图/ 3/ )/ ./ SA/ 可能/ 根据/ 需要/ 会/ 绑定/ 不同/ 的/ 角色/ ,/ 每个/ 角色/ 对应/ 的/ 功能/ 和/ 环境/ 有所不同/ ,/ 针对/ 不同/ 的/ 角色/ ,/ SA/ 需要/ 加载/ 不同/ 的/ 学习/ 器来/ 学习/ 角色/ 中/ 动作/ 的/ 执行/ ,/ 制定/ 出/ 能够/ 适应环境/ 的/ 在线/ 策略/ ./ 3.2/ 角色/ 动态/ 绑定/ 的/ 自/ 适应/ 学习/ 算法/ 角色/ 动态/ 绑定/ 的/ 自适应性/ 学习/ 是/ 指/ SA/ 通过/ 学习/ 获得/ 适应环境/ 或/ 自身/ 变化/ 的/ 角色/ 调整/ 策略/ ,/ 即/ 获知/ 在/ 何种/ 情况/ 下/ ,/ 执行/ 何种/ 角色/ 调整/ 动作/ 会/ 带来/ 较/ 好/ 的/ 适应性/ 效果/ ./ 其/ 主要/ 任务/ 是/ 通过/ 与/ 环境/ 的/ 持续/ 交互/ ,/ 不断更新/ 对应/ 于/ 不同/ 状态/ 下/ 可/ 执行/ 的/ 角色/ 动态/ 绑定/ 动作/ 的/ Q/ 值/ ,/ 从而/ 获得/ 不同/ 状态/ 下/ 实施/ 适应性/ 动作/ 以/ 适应环境/ 变化/ 的/ 效果/ ./ 角色/ 调整/ 动作/ 适应性/ 学习/ 的/ 算法/ 与/ 经典/ 的/ 强化/ 学习/ 算法/ 有/ 很大/ 的/ 不同/ ,/ 尤其/ 在/ 回报/ 值/ 的/ 设置/ 和/ 行为/ 选择/ 方面/ ,/ 这种/ 不同/ 是/ 由/ 角色/ 动态/ 绑定/ 动作/ 的/ 特性/ 所/ 导致/ 的/ ./ (/ 1/ )/ 状态/ ./ 包括/ 环境/ 的/ 状态/ 和/ SA/ 的/ 状态/ ./ (/ 2/ )/ 操作/ ./ 学习/ 表中/ 可/ 设定/ 的/ 操作/ 包括/ 角色/ 中/ 的/ 基本/ 行为/ ,/ 形式/ 如/ “/ role/ ./ behaviour/ ”/ ,/ 其中/ role/ 是/ 指/ 角色/ 的/ 名字/ ,/ behaviour/ 是/ 指/ role/ 角色/ 中/ 包含/ 的/ 行为/ ;/ 以及/ 角色/ 动态/ 绑定/ 的/ 4/ 个/ 原子/ 动作/ ,/ 包括/ join/ (/ r/ )/ ,/ quit/ (/ r/ )/ ,/ suspend/ (/ r/ )/ ,/ resume/ (/ r/ )/ ,/ 其中/ r/ 是/ 指/ 角色/ ./ Page6/ (/ 3/ )/ 回报/ 函数/ ./ 在/ 角色/ 绑定/ 的/ 自/ 适应/ 学习/ 算法/ 中/ 会/ 涉及/ 到/ 两类/ 不同/ 的/ 适应性/ 操作/ ,/ 因此/ 回报/ 函数/ 也/ 要/ 针对/ 这/ 两类/ 操作/ 分别/ 进行/ 设置/ ./ 其中/ 基本/ 行为/ 的/ 回报/ 函数/ 设置/ 可/ 参考/ 强化/ 学习/ 中/ 一般/ 方式/ 设置/ ,/ 通常/ 的/ 做法/ 是/ 在/ 状态/ s/ 下/ ,/ 如果/ 行为/ b/ 的/ 执行/ 有利于/ 目标/ 的/ 实现/ ,/ 则/ r/ (/ s/ ,/ b/ )/ 赋/ 正值/ ,/ 否则/ r/ (/ s/ ,/ b/ )/ 赋/ 负值/ ./ 而/ 绑定/ 角色/ 动作/ 回报/ 函数/ 的/ 设置/ 与/ 基本/ 动作/ 的/ 设置/ 有所不同/ :/ ①/ join/ 操作/ 执行/ 并/ 不会/ 对/ 环境/ 产生/ 直接/ 影响/ ,/ 但是/ 该/ 动作/ 执行/ 完后/ SA/ 将/ 拥有/ 角色/ 所/ 定义/ 的/ 行为/ ,/ 而/ 这些/ 行为/ 的/ 执行/ 将会/ 对/ 环境/ 产生/ 影响/ ./ 因此/ join/ 动作/ 的/ 回报/ 是/ 一种/ 延时/ 回报/ ,/ 回报/ 值/ 的/ 获得/ 是/ 通过/ 对/ 加入/ 该/ 角色/ 后/ 执行/ 的/ 一系列/ 行为/ 所/ 带来/ 的/ 效果/ 的/ 综合/ 评判/ 后/ 得出/ 的/ ./ 因此/ ,/ 设置/ join/ 动作/ 执行/ 的/ 回报/ 值/ ,/ 可/ 采取/ 的/ 一种/ 方案/ 是/ 通过观察/ 和/ 统计/ 加入/ 角色/ 后/ SA/ 的/ 行为/ 执行/ 情况/ 来/ 决定/ 回报/ 值/ 的/ 大小/ ;/ ②/ quit/ 操作/ 的/ 执行/ 不会/ 对/ 环境/ 产生/ 影响/ ,/ 因此/ quit/ 操作/ 的/ 回报/ 值为/ 0/ ;/ ③/ 同/ join/ 操作/ 类似/ ,/ resume/ 操作/ 的/ 回报/ 也/ 是/ 延时/ 回报/ ,/ 其/ 回报/ 值/ 设置/ 同/ join/ 操作/ ;/ ④/ suspend/ 操作/ 的/ 执行/ 情况/ 类似/ 于/ quit/ 操作/ ,/ 其/ 回报/ 值为/ 0/ ./ 开放/ 环境/ 下/ SA/ 的/ 角色/ 动态/ 绑定/ 自适应性/ 学习/ 算法/ ,/ 如/ 算法/ 1/ 所示/ ,/ 其中/ rd/ 是/ 环境/ 返回/ 的/ 立即/ 回报/ 值/ ;/ α/ 是/ 学习/ 率/ (/ 0/ </ α/ </ 1/ )/ ,/ 它/ 控制/ 着/ 学习/ 的/ 速度/ ;/ γ/ 为/ 折扣/ 因子/ (/ 0/ / γ/ </ 1/ )/ ./ 该/ 算法/ 描述/ 了/ 假设/ SA/ 已/ 绑定/ 角色/ r1/ 的/ 情况/ 下/ ,/ 如何/ 通过/ 学习/ 绑定/ 角色/ r2/ ./ 该/ 算法/ 的/ 输入/ 是/ 环境/ 和/ SA/ 的/ 状态/ ,/ 输出/ 是/ 学习/ 到/ 的/ 、/ 对应/ 于/ r1/ 和/ r2/ 这/ 两个/ 角色/ 的/ 知识/ 表/ ./ 该/ 算法/ 的/ 核心/ 是/ (/ d/ )/ ~/ (/ k/ )/ 步/ ./ 角色/ 调整/ 动作/ 的/ 执行/ 会/ 导致/ SA/ 的/ 角色/ 发生/ 改变/ (/ 如/ 转换/ 为/ 角色/ r2/ )/ ,/ 随之/ 会/ 加载/ 不同/ 的/ 学习/ 器/ 和/ 知识/ 表/ ./ 之后/ 按照/ 基本/ 行为/ 的/ 学习/ 算法/ 对/ 角色/ r2/ 行为/ 的/ 执行/ 情况/ 进行/ 学习/ ./ 学习/ 结束/ 后/ ,/ 观察/ 或/ 计算/ 出/ 按照/ 最优/ 方式/ 完成/ 角色/ r2/ 的/ 任务/ 或/ 目标/ 所/ 需/ 的/ 总体/ 代价/ (/ 比如/ 能量/ 的/ 消耗/ ,/ 移动/ 的/ 步数/ 等/ )/ ,/ 并/ 结合/ 绑定/ 角色/ r2/ 的/ 回报/ 函数/ ,/ 给出/ 之前/ 在/ 角色/ r1/ 下/ 执行/ 绑定/ 角色/ r2/ 行为/ 的/ 回报/ 值/ ./ 之后/ SA/ 将/ 角色/ 转换/ 为/ r1/ ,/ 并/ 将/ 学习/ 器/ 调整/ 到/ r1/ 对应/ 的/ 学习/ 器/ ,/ 观察/ 新/ 的/ 状态/ 触发/ 新/ 的/ 一轮/ 学习/ 过程/ ./ 表/ 1/ 描述/ 了/ 角色/ r1/ 的/ 知识/ 表/ ,/ 它/ 既/ 刻画/ 了/ SA/ 执行/ 角色/ 的/ 基本/ 行为/ 的/ 情况/ ,/ 也/ 刻画/ 了/ 在/ 不同/ 状态/ 下/ 执行/ 角色/ 调整/ 动作/ 的/ 效果/ ./ 通过/ 该表/ ,/ SA/ 可以/ 制定/ 出/ 在/ 绑定/ 角色/ r1/ 的/ 情况/ 下/ ,/ 如何/ 选择/ 不同/ 状态/ 下/ 应该/ 执行/ 的/ 自/ 适应/ 操作/ 的/ 策略/ ./ 当然/ ,/ 如果/ 该/ 策略/ 的/ 基本准则/ 是/ 选取/ 每个/ 状态/ 下/ 能够/ 带来/ 最佳/ 执行/ 效果/ 的/ 自/ 适应/ 操作/ (/ 即/ Q/ 值/ 最大/ 的/ 操作/ )/ ,/ 那么/ 可/ 直接/ 将/ 学习/ 到/ 的/ 知识/ 表/ 映射/ 成自/ 适应/ 策略/ (/ π/ :/ S/ →/ A/ )/ ,/ 该/ 策略/ 可/ 表示/ 为/ π/ (/ si/ )/ =/ ak/ ,/ ak/ ∈/ {/ aQ/ (/ si/ ,/ a/ )/ =/ max/ 该/ 策略/ 选取/ 每/ 一个/ 状态/ si/ 下/ 的/ Q/ 值/ 最大/ 的/ 操作/ ./ 如果/ Q/ 值/ 最大/ 的/ 操作/ 有/ 多个/ ,/ 则/ 任选/ 一个/ ./ 算法/ 1/ ./ 角色/ 绑定/ 动作/ 的/ 学习/ 算法/ RoleBind/ -/ ingActionLearning/ ./ 假设/ :/ 自/ 适应/ Agent/ 已经/ 绑定/ 角色/ r1/ 输入/ :/ 自/ 适应/ Agent/ 及其/ 驻留/ 环境/ 的/ 状态/ s/ 输出/ :/ QValueTable/ (/ r1/ )/ ,/ QValueTable/ (/ r2/ )/ {/ 1/ ./ FOR/ 每/ 一个/ (/ s/ ,/ a/ )/ ,/ 初始化/ 表/ Q/ (/ s/ ,/ a/ )/ ,/ 其中/ Q/ (/ s/ ,/ a/ )/ ∈/ 2/ ./ 观察/ 当前/ 状态/ s/ ;/ 3/ ./ 一直/ 循环/ 直到/ s/ 是/ 终止/ 状态/ :/ (/ a/ )/ 选择/ 动作/ a/ ;/ (/ b/ )/ 根据/ 策略/ (/ 如/ ε/ -/ greedy/ )/ 执行/ 行为/ a/ ;/ (/ c/ )/ 获得/ 奖励/ 值/ rd/ ;/ (/ d/ )/ 执行/ a/ (/ 如/ join/ (/ r2/ )/ )/ ,/ 改变/ 自/ 适应/ Agent/ 所/ 绑定/ (/ e/ )/ 加载/ 和/ 初始化/ 针对/ 角色/ r2/ 的/ 学习/ 器/ ;/ (/ f/ )/ 根据/ 基本/ 行为/ 开始/ 学习/ ,/ 结果/ 保存/ 在/ 表/ QValue/ -/ (/ g/ )/ 观察/ 和/ 计算/ 实现/ 角色/ r2/ 的/ 任务/ 所/ 需/ 的/ 成本/ ,/ 根据/ 绑/ (/ h/ )/ 卸载/ 针对/ 角色/ r2/ 的/ 学习/ 器/ ,/ 重新/ 加载/ 针对/ r1/ 的/ 学/ (/ i/ )/ 观察/ 新/ 的/ 状态/ s/ ;/ (/ j/ )/ 采用/ 如下/ 公式/ 更新/ Q/ (/ s/ ,/ a/ )/ :/ Q/ (/ s/ ,/ a/ )/ ←/ (/ 1/ -/ α/ )/ Q/ (/ s/ ,/ a/ )/ +/ α/ [/ rd/ +/ γ/ max/ (/ k/ )/ 将/ 状态/ s/ 赋为/ s/ ./ 4/ ./ 返回/ QValueTable/ (/ r1/ )/ ,/ QValueTable/ (/ r2/ )/ }/ r1/ ./ b1r1/ ./ b2/ …/ r1/ ./ bmQ/ (/ s1/ ,/ r1/ ./ bm/ )/ Q/ (/ s2/ ,/ r1/ ./ bm/ )/ …/ Q/ (/ sn/ ,/ r1/ ./ bm/ )/ join/ (/ r2/ )/ Q/ (/ s1/ ,/ join/ (/ r2/ )/ )/ Q/ (/ s2/ ,/ join/ (/ r2/ )/ )/ …/ Q/ (/ sn/ ,/ join/ (/ r2/ )/ )/ 4/ 自/ 适应/ 软件/ 的/ 构造/ 和/ 运行/ 技术/ 本文/ 更加/ 关注/ 的/ 是/ 如何/ 借助于/ 动态/ 绑定/ 的/ 自/ 适应/ 机制/ 和/ 增强/ 学习/ 方法/ 来/ 支持/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 开发/ ./ 本节/ 将/ 从/ 软件/ 模型/ 、/ 开发/ 框架/ 和/ 方法/ 、/ 支/ Page7/ 撑/ 环境/ 3/ 个/ 方面/ 介绍/ 自/ 适应/ 软件/ 的/ 构造/ 和/ 运行/ 技术/ ./ 4.1/ 自/ 适应/ 软件/ 模型/ 通过/ 对/ 软件/ Agent/ 的/ 反应式/ 模型/ 进行/ 扩展/ ,/ 提出/ 了/ 如图/ 5/ 所示/ 的/ 基于/ 增强/ 学习/ 的/ SA/ 软件/ 模型/ ./ 它/ 包含/ 感知/ 、/ 决策/ 、/ 行为/ 池/ 以及/ 效应器/ 4/ 个/ 主要/ 部件/ ,/ 决策/ 部件/ 包括/ 学习/ 器/ 、/ 知识/ 表/ 和/ 动作/ 选择/ 策略/ ./ 感知/ 部件/ 负责/ 感知/ 环境/ 变化/ ,/ 感知/ 结果/ 以/ 环境/ 状态/ 的/ 形式/ 反馈/ 到/ 决策/ 单元/ ./ 感知/ 单元/ 也/ 可/ 作为/ 环境/ 对/ SA/ 行为/ 评价/ 的/ 转发器/ ,/ 将/ 环境/ 给予/ SA/ 的/ 回报/ 值/ 转发/ 到/ 学习/ 单元/ ./ 决策/ 单元/ 的/ 学习/ 器以/ 环境/ 的/ 状态/ 和/ 环境/ 给予/ 动作/ 的/ 回报/ 值/ 作为/ 输入/ ,/ 利用/ 学习/ 算法/ 学习/ 在/ 不同/ 的/ 环境/ 状态/ 下/ SA/ 执行/ 的/ 自/ 适应/ 操作/ 的/ 适应/ 效果/ ,/ 并/ 将/ 这种/ 学习/ 结果/ 以/ 知识/ 表/ 的/ 形式/ 保存/ ./ 在/ 选择/ 当前/ 状态/ 下/ 可/ 执行/ 的/ 自/ 适应/ 操作/ 时/ ,/ SA/ 可/ 根据/ 动作/ 选择/ 策略/ (/ 比如/ ε/ 贪婪/ 策略/ )/ 从/ 知识/ 表中/ 当前/ 状态/ 下/ 的/ 多个/ 行为/ 中/ 选择/ 出/ 合适/ 的/ 行为/ 或/ 行为/ 序列/ ,/ 并/ 将/ 选择/ 的/ 行为/ 放到/ SA/ 的/ 行为/ 池/ (/ BehaviourPool/ )/ 中/ ./ 行为/ 池中/ 的/ 行为/ 会/ 通过/ SA/ 的/ 行为/ 调度/ 器/ 统一/ 调度/ 执行/ ,/ 行为/ 的/ 执行/ 可能/ 会/ 影响/ 环境/ ./ 效应器/ 的/ 功能/ 是/ 将/ 行为/ 的/ 执行/ 效果/ 施加/ 到/ 环境/ 上/ ,/ 比如/ 通过/ 事件/ 发布/ 器向外/ 发布/ SA/ 状态/ 的/ 变化/ 或/ 动作/ 的/ 执行/ ,/ 从而/ 使得/ 关注/ 该/ SA/ 的/ 其他/ SA/ 可以/ 感知/ 到/ 这样/ 的/ 变化/ ./ 或者/ 通过/ 调用/ 外部/ 接口/ ,/ 对/ 物理/ 环境/ 施加影响/ ./ 通过/ 效应器/ ,/ SA/ 可以/ 将/ 自身/ 行为/ 的/ 执行/ 施加/ 到/ 对/ 环境/ 的/ 影响/ 上/ ,/ 环境/ 状态/ 变化/ 会/ 被/ 感知器/ 捕获/ ,/ 从而/ 又/ 会/ 触发/ 新一轮/ 的/ 学习/ 和/ 适应/ 过程/ ./ 4.2/ 自/ 适应/ 软件/ 构造/ 框架/ 基于/ 动态/ 绑定/ 自/ 适应/ 机制/ 和/ 强化/ 学习/ 方法/ 的/ 自/ 适应/ 系统/ 构造/ 框架/ 如图/ 6/ 所示/ ./ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 开发/ 涉及/ 以下/ 几个/ 关键部件/ 的/ 设计/ 和/ 实现/ :/ 自/ 适应/ Agent/ 、/ 角色/ 、/ 学习/ 器/ 和/ 环境/ ./ 为了/ 更好/ 地/ 支持/ 自/ 适应/ 系统/ 的/ 开发/ ,/ 我们/ 提供/ 了/ 一组/ 可/ 重用/ 构件/ 来/ 封装/ 上述/ 基本功能/ ,/ 包括/ SA/ 类/ 封装/ 自/ 适应/ Agent/ 的/ 动态/ 绑定/ 角色/ 的/ 基本操作/ (/ 如/ Join/ 、/ Quit/ 等/ )/ 、/ Role/ 基类/ 封装/ 角色/ 的/ 基本功能/ 、/ 环境/ 基类/ Environment/ 和/ 学习/ 器/ 基类/ Learner/ 等等/ ./ 基于/ 动态/ 绑定/ 自/ 适应/ 机制/ 和/ 强化/ 学习/ 方法/ 的/ 自/ 适应/ 系统/ 构造/ 框架/ 如图/ 6/ 所示/ ./ 开发人员/ 可以/ 通过/ 继承/ 和/ 重用/ Role/ 基类/ 来/ 定义/ 与/ 应用/ 相关/ 的/ 角色/ 类/ ./ 角色/ 类/ 实现/ 了/ 在/ 组织/ 上下文/ 中/ 一组/ Agent/ 的/ 共同/ 业务/ 逻辑/ ,/ 封装/ 了/ 与/ 业务/ 逻辑/ 相关/ 的/ 属性/ 、/ 行为/ 、/ 服务/ 和/ 环境/ 上下文/ ./ 其中/ ,/ 属性/ 定义/ 了/ 角色/ 的/ 性质/ 和/ 资源/ ,/ 服务/ 通过/ 行为/ 实现/ ,/ 环境/ 上下文/ 是/ 对/ 角色/ 所在/ 环境/ 的/ 描述/ ./ 角色/ 中/ 的/ 行为/ 是/ 一个/ 反应式/ 的/ 规则/ ,/ 它/ 定义/ 了/ 当/ 特定/ 事件/ 发生/ 、/ 某些/ 条件/ 得到/ 满足/ 时需/ 执行/ 的/ 一组/ 动作/ 序列/ ./ 学习/ 器是/ 系统/ 的/ 学习/ 单元/ ,/ 其/ 学习/ 功能/ 的/ 实现/ 依赖于/ 角色/ 中/ 定义/ 的/ 行为/ ./ 开发者/ 可以/ 继承/ 学习/ 器/ 抽象类/ 来/ 得到/ 不同/ 类型/ 的/ 学习/ 器类/ ./ 一个/ SA/ 根据/ 不同/ 的/ 学习/ 目标/ 可以/ 加载/ 不同/ 的/ 学习/ 器/ 实例/ ./ SA/ 和/ 环境/ 的/ 交互/ 过程/ 中/ ,/ 通过/ 试错/ 的/ 手段/ ,/ 执行/ 一定/ 的/ 行为/ 对/ 环境/ 施加影响/ ,/ 并/ 将/ 环境/ 的/ 状态/ 和/ 行为/ 执行/ 后/ 环境/ 的/ 反馈/ 输入/ 到/ 加载/ 的/ 学习/ 器中/ ,/ 学习/ 器/ 根据/ 一定/ 的/ 学习/ 算法/ ,/ 学习/ 适应环境/ 的/ 知识/ ,/ 并/ 将/ 这些/ 知识/ 存储/ 在/ 知识/ 表/ (/ 如/ QValueTable/ )/ 中/ ./ 学习/ 器中/ 的/ 知识/ 随着/ SA/ 和/ 环境/ 的/ 不断/ 交互/ 而/ 不断更新/ ./ SA/ 执行/ 角色/ 功能/ 时/ 可/ 参考/ 知识/ 表中/ 在/ 不同/ 状态/ 下/ 执行/ 不同/ 行为/ 的/ 效果/ 来/ 选择/ 最为/ 合适/ 的/ 行为/ 执行/ ,/ 角色/ 和/ 知识/ 表/ 之间/ 是/ 依赖/ 关系/ ./ 4.3/ 支撑/ 软件/ 环境/ SADE/ +/ 通过/ 对/ 多/ Agent/ 系统/ 开发/ 框架/ JADE/ [/ 10/ ]/ 进行/ 扩展/ ,/ 开发/ 了/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 开发/ 和/ 运行/ 支撑/ 平台/ SADE/ +/ ,/ 其/ 整体/ 框架/ 可/ 分为/ 3/ 个/ 层次/ :/ 基础/ 层/ 、/ 运行/ 层/ 和/ 开发/ 层/ (/ 见图/ 7/ )/ ./ (/ 1/ )/ 基础/ 层/ 借助/ JADE/ 的/ 基础设施/ 实现/ 了/ 不同/ 节点/ 、/ 不同/ 平台/ Agent/ 之间/ 的/ 通信/ ,/ 为/ 分布式/ 多/ Page8Agent/ 系统/ 的/ 交互/ 提供/ 了/ 支持/ ,/ 并/ 在/ JADE/ 提供/ 的/ 基于/ 消息/ 通信/ 的/ 基础/ 上/ ,/ 实现/ 了/ 事件/ 服务/ ,/ 从而/ 为/ 环境/ 感知/ 提供/ 了/ 基础/ ./ 扩充/ 了/ Agent/ 生命周期/ 管理/ 功能/ ,/ 实现/ 了/ 对/ SA/ 生命周期/ 的/ 管理/ ./ (/ 2/ )/ 开发/ 层为/ 自/ 适应/ 软件/ 的/ 开发/ 提供/ 支持/ ./ 自/ 适应/ 策略/ 描述语言/ 提供/ 了/ SADL/ 的/ 语言/ 规范/ [/ 11/ ]/ ;/ 自/ 适应/ 软件开发/ 包为/ SA/ 、/ Role/ 、/ 自/ 适应/ 策略/ 以及/ 学习/ 器/ 的/ 开发/ ,/ 提供/ 了/ 基本/ 的/ 编程/ 规范/ 和/ 基类/ 支持/ ;/ SADL/ 编辑器/ 和/ 编译器/ 为/ 开发人员/ 制定/ 自/ 适应/ 策略/ 提供/ 辅助/ 功能/ ;/ 学习/ 算法/ 库/ 提供/ 针对/ 不同/ 应用/ 的/ 学习/ 算法/ ./ (/ 3/ )/ 运行/ 层/ 提供/ 了/ 支持/ SA/ 运行/ 的/ 功能/ 部件/ ./ 其中/ 自/ 适应/ 操作/ 为/ SA/ 提供/ 了/ 基本/ 的/ 自/ 适应能力/ ;/ 通过/ 加载/ 和/ 使用/ 学习/ 器/ ,/ SA/ 具有/ 在线/ 学习/ 适应环境/ 的/ 知识/ 的/ 能力/ ;/ 软件/ 监控器/ 负责/ 对/ SA/ 的/ 自/ 适应/ 操作/ 的/ 执行/ 情况/ 进行/ 监控/ ;/ 自/ 适应/ 策略/ 的/ 加载/ 和/ 升级/ 实现/ 了/ 策略/ 的/ 静态/ 修改/ 、/ 动态/ 升级/ ;/ 冲突/ 检查/ 器为/ SA/ 的/ 正常/ 运行/ 提供/ 保障/ ./ 图/ 7/ 自/ 适应/ 系统/ 的/ 开发/ 和/ 运行/ 支撑/ 环境/ SADE/ +/ 4.4/ 开发方法/ 和/ 案例/ 分析/ 本/ 节/ 通过/ 具体/ 的/ 案例/ 分析/ 来/ 介绍/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 开发/ 过程/ ./ 该/ 案例/ 模拟/ 了/ 开放/ 环境/ 下/ 猎狗/ 追击/ 猎物/ 的/ 组织/ 场景/ ./ 组织/ 中有/ 两类/ Agent/ :/ 机器/ 狗/ 和/ 猎物/ ,/ 它们/ 运行/ 在/ N/ ×/ N/ 的/ 格子/ 环境/ 中/ ,/ 格子/ 环境/ 具有/ 多样化/ 的/ 地形/ ,/ 包括/ 沙地/ 、/ 泥泞/ 地/ 等/ ,/ 并且/ 是/ 开放/ 的/ ,/ 即/ 随着/ 时间/ 的/ 流逝/ ,/ 这些/ 地形/ 会/ 消逝/ 或/ 改变/ ,/ 比如/ 平地/ 可能/ 因为/ 雨水/ 的/ 冲刷/ 而/ 变成/ 泥泞/ 地/ ,/ 障碍物/ 也/ 会/ 随机/ 出现/ 或/ 消失/ ,/ 因而/ 无法/ 事先/ 完全/ 预知/ 其/ 变化/ ./ 运行/ 于/ 网格/ 中/ 的/ 猎物/ 会/ 按照/ 不同/ 的/ 方式/ 在/ 网格/ 中/ 移动/ ,/ 比如/ 随机/ 移动/ 、/ 围绕/ 网格/ 做/ 顺时针/ 移动/ ,/ 或/ 在/ 某条/ 路径/ 上/ 循环/ 移动/ ./ 开始/ 时/ 机器/ 狗会/ 被/ 随机/ 放置/ 在/ 格子/ 中/ 的/ 某个/ 位置/ ,/ 之后/ 不断/ 移动/ 来/ 寻找/ 猎物/ ,/ 机器/ 狗/ 每/ 移动/ 一次/ 会/ 消耗/ 一定/ 的/ 能量/ ,/ 且/ 在/ 不同/ 的/ 地形/ 上/ 移动/ 或/ 碰到/ 障碍物/ 消耗/ 的/ 能量/ 有所不同/ ./ 当/ 机器/ 狗/ 的/ 能量/ 不足/ 时/ ,/ 要/ 及时/ 前往/ 供给/ 站/ 补充/ 能量/ ,/ 而后/ 再次/ 追击/ 猎物/ ./ 为此/ ,/ 针对/ 机器/ 狗要/ 完成/ 的/ 两种/ 不同/ 的/ 功能/ ,/ 我们/ 设计/ 了/ 两类/ 角色/ :/ 追击/ 者/ 角色/ (/ Catcher/ )/ 和/ 补给/ 者/ 角色/ (/ Supplier/ )/ ./ 当/ 机器/ 狗/ 扮演/ 追击/ 者/ 角色/ 时/ ,/ 主要/ 任务/ 是/ 尽快/ 的/ 追到/ 移动/ 的/ 兔子/ ;/ 当/ 追击/ 过程/ 中/ 机器/ 狗/ 自身/ 所剩/ 能量/ 不足/ 时/ ,/ 机器/ 狗/ 将/ 扮演/ 补给/ 者/ 角色/ ,/ 寻找/ 能耗/ 最小/ 的/ 路径/ ,/ 以/ 最/ 节能/ 的/ 方式/ 移动/ 到/ 补给站/ 来/ 进行/ 能量/ 补充/ ./ 为/ 简化/ 案例/ 分析/ ,/ 我们/ 有/ 以下/ 假设/ :/ (/ 1/ )/ 机器/ 狗/ 和/ 猎物/ 运行/ 在/ 10/ ×/ 10/ 的/ 网格/ 中/ ;/ (/ 2/ )/ 环境/ 的/ 变化/ (/ 如/ 障碍物/ )/ 自动/ 产生/ 并且/ 不可/ 预测/ ;/ (/ 3/ )/ 在/ 任何时刻/ Agent/ 可/ 执行/ 以下/ 4/ 个/ 方面/ 的/ 基本/ 动作/ {/ movingup/ ,/ movingdown/ ,/ movingleft/ ,/ movingright/ }/ ;/ (/ 4/ )/ 机器/ 狗/ 可以/ 感知/ 环境/ 中/ 的/ 任何/ 变化/ 以及/ 猎物/ 实施/ 的/ 任何/ 动作/ ./ 在/ 案例/ 的/ 实际/ 运行/ 中/ ,/ 何时/ 由/ 追击/ 者/ 角色/ 转换成/ 补给/ 者/ 角色/ ,/ 是/ 机器/ 狗/ 能够/ 尽可能/ 多地/ 捕获/ 到/ 猎物/ 的/ 关键/ ./ 一方面/ ,/ 机器/ 狗/ 必须/ 保证/ 能够/ 实现/ 能量/ 补给/ ;/ 另一方面/ ,/ 还要/ 保证/ 转换/ 角色/ 前/ 能量/ 尽可能/ 多/ 的/ 用到/ 追击/ 猎物/ 上/ ./ 否则/ ,/ 要么/ 可能/ 造成/ 机器/ 狗/ 角色/ 转换/ 不/ 及时/ ,/ 导致/ 不能到达/ 供给/ 站/ ;/ 要么/ 在/ 剩余/ 大量/ 能量/ 时/ 转换/ 到/ 补给站/ ,/ 导致/ 了/ 不必要/ 的/ 角色/ 转换/ ,/ 既/ 影响/ 了/ 捕获/ 猎物/ ,/ 又/ 增加/ 了/ 不必要/ 的/ 角色/ 转换/ 开销/ ./ 下面/ 两个/ 场景/ 分别/ 展示/ 了/ 自/ 适应/ 系统/ 如何/ 通过/ 学习/ 在/ 动态/ 不/ 确定/ 环境/ 下/ 在/ 不同/ 层面/ 下/ 的/ 自/ 适应/ :/ (/ 1/ )/ 在/ 机器/ 狗/ 扮演/ 追击/ 者/ 角色/ 的/ 过程/ 中/ ,/ 机器/ 狗/ 所处/ 的/ 环境/ (/ 格子/ 世界/ 的/ 障碍物/ 和/ 地形/ 的/ 位置/ 等/ )/ 是/ 开放/ 的/ ,/ 会/ 动态/ 地/ 发生变化/ ,/ 并且/ 这种/ 变化/ 往往/ 具有/ 不可/ 预知/ 和/ 不/ 确定/ 等/ 特点/ ./ 例如/ ,/ 地面/ 会/ 由于/ 下雨/ 而/ 导致/ 泥泞/ 和/ 打滑/ ,/ 从而/ 导致/ 更/ 多/ 的/ 能量/ 损耗/ ;/ 雨水/ 的/ 冲刷/ 可能/ 会/ 产生/ 新/ 的/ 水道/ ,/ 导致/ 机器/ 狗/ 无法/ 通过/ ,/ 因而/ 需要/ 绕道/ 并/ 提前/ 去/ 补充/ 能量/ 等等/ ./ 追击/ 的/ 猎物/ 也/ 在/ 不断/ 的/ 改变/ 位置/ ,/ 机器/ 狗/ 此时/ 的/ 目的/ 就是/ 在/ 这种/ 动态/ 的/ 环境/ 下/ 通过/ 学习/ ,/ 得到/ 行为/ 的/ 最优/ 策略/ ,/ 移动/ 最少/ 的/ 格子/ 追击/ 到/ 猎物/ ./ (/ 2/ )/ 在/ 机器/ 狗/ 扮演/ 追击/ 者/ 角色/ 的/ 过程/ 中/ ,/ 机器/ 狗会/ 不断/ 监测/ 自身/ 的/ 能量/ 状态/ ,/ 当/ 能量/ 处于/ 某个/ 临界值/ 时/ ,/ 需要/ 到/ 补给站/ 进行/ 能量/ 补给/ ,/ 此时/ 机器/ 狗会/ 执行/ “/ suspend/ ”/ 适应性/ 元/ 操作/ ,/ 将/ “/ 追击/ 者/ ”/ 角色/ 置/ 为/ “/ 非/ 活跃/ ”/ 状态/ ,/ 并/ 通过/ 执行/ “/ join/ ”/ 适应性/ 元/ 操作/ ,/ 扮演/ 和/ 绑定/ “/ 补给/ 者/ ”/ 角色/ ,/ 从而/ 来/ 补充/ 能量/ ./ 一旦/ 机器/ 狗/ 补充/ 了/ 足够/ 的/ 能量/ ,/ 它/ 将/ 执行/ “/ quit/ ”/ 适应性/ 操作/ 以/ 退出/ “/ 补给/ 者/ ”/ 角色/ ,/ 并/ 通过/ 执行/ “/ resume/ ”/ 适应性/ 操作/ 将/ “/ 追击/ 者/ ”/ 角色/ 置/ 为/ “/ 活跃/ ”/ 状态/ ,/ 重新/ 追击/ 猎物/ ./ 由于/ 格子/ 世界/ 中/ 地形/ 和/ 障碍物/ 的/ 位置/ 不断/ 变/ Page9/ 化/ ,/ 因此/ 机器/ 狗/ 在/ 不同/ 时刻/ 处于/ 不同/ 位置/ 时/ ,/ 这个/ 临界值/ 也/ 是/ 不/ 一样/ 的/ ./ 这个/ 临界值/ 在/ 机器/ 狗/ 扮演/ 补给/ 者/ 角色/ 时/ 通过/ 学习/ 得到/ ,/ 其值/ 为/ 到/ 补给站/ 所/ 消耗/ 的/ 最小/ 能量/ ./ 针对/ 案例/ 特征/ ,/ 我们/ 按照/ 图/ 8/ 所示/ 的/ 自/ 适应/ 系统/ 的/ 开发/ 过程/ 进行/ 设计/ 和/ 实现/ ./ 首先/ ,/ 识别/ 和/ 设计/ 组织/ 中/ 的/ 角色/ ,/ 开发者/ 需要/ 根据/ 需求/ 识别/ 组织/ 中/ 的/ 角图/ 8/ 开放/ 环境/ 下/ 自/ 适应/ 多/ Agent/ 系统/ 的/ 软件开发/ 过程/ 其次/ ,/ 设计/ 和/ 实现/ 系统/ 中/ 的/ Agent/ ./ 开发者/ 需要/ 识别/ 、/ 构造/ 和/ 实例/ 化自/ 适应/ 系统/ 中/ 的/ 软件/ Agent/ ./ 如果/ 该/ Agent/ 具有/ 自/ 适应/ 行为/ ,/ 那么/ 它/ 需要/ 继承/ 基类/ SAgent/ ./ 该/ 案例/ 有/ 两类/ 不同/ 的/ Agent/ :/ HunterAgent/ 和/ PreyAgent/ ./ 其中/ ,/ HunterAgent/ 是/ 一个/ 自/ 适应/ Agent/ ,/ 它/ 能够/ 根据/ 环境/ 及其/ 自身/ 的/ 变化/ ,/ 不断/ 地/ 调整/ 它/ 所/ 扮演/ 的/ 角色/ ,/ 以/ 持续性/ 地/ 获得/ 能量/ 并/ 追逐/ 猎物/ ./ 因此/ ,/ HunterAgent/ 应/ 继承/ 基类/ SAgent/ ./ 最后/ ,/ 设计/ 和/ 实现/ 学习/ 器/ ./ 开发者/ 应为/ 自/ 适应/ Agent/ 设计/ 和/ 实现/ 学习/ 器以/ 支持/ 其/ 在线/ 的/ 自/ 适应/ 决策/ ./ 该/ 案例/ 可以/ 识别/ 出/ 两类/ 学习/ 器/ :/ “/ CatchLearner/ ”/ 和/ “/ SupplyLearner/ ”/ ./ “/ CatchLearner/ ”/ 负责/ 学习/ 有关/ 如何/ 扑/ 捉/ 猎物/ 的/ 知识/ ,/ “/ SupplyLearner/ ”/ 负责/ 学习/ 如何/ 消耗/ 最少/ 的/ 能源/ 到/ 供应站/ 获取/ 能源/ ./ 学习/ 器/ 的/ 设计/ 一般/ 涉及/ 以下/ 4/ 个子/ 步骤/ :/ (/ 1/ )/ 识别/ 和/ 分析/ SA/ 感兴趣/ 的/ 环境/ 和/ 自身/ 状态/ ./ 环境/ 的/ 信息/ 多种多样/ ,/ SA/ 内部/ 可能/ 也/ 有/ 很多/ 的/ 属性/ ./ 开发者/ 应从/ 中/ 选择/ 那些/ 与/ SA/ 自/ 适应/ 相关/ 的/ 环境/ 和/ 自身/ 状态/ 信息/ ,/ 以/ 支持/ SA/ 开展/ 学习/ ./ 案例/ 中/ “/ CatchLearner/ ”/ 学习/ 器/ 感兴趣/ 的/ 状态/ 包括/ :/ 追逐/ 者/ 和/ 猎物/ 的/ 位置/ 、/ 猎物/ 的/ 移动/ 方向/ 、/ 网格/ 环境/ 中/ 的/ 障碍物/ 等/ ./ (/ 2/ )/ 选择/ 操作/ 集/ ./ 学习/ 的/ 目的/ 是/ 通过/ 学习/ 建立/ 环境/ 状态/ 与/ 动作/ 的/ 映射/ (/ 即/ 策略/ )/ ,/ 从而/ 使/ Agent/ 的/ 动作/ 执行/ 能够/ 从/ 环境/ 中/ 获得/ 最大/ 的/ 回报/ ./ 该/ 学习/ 器/ 的/ 操作/ 有/ {/ Catcher/ ./ moveUp/ (/ )/ ,/ Catcher/ ./ 色/ ,/ 分析/ 和/ 定义/ 角色/ 的/ 属性/ 、/ 服务/ 和/ 行为/ ,/ 并/ 通过/ 继承/ 基类/ Role/ 对/ 角色/ 进行/ 设计/ 和/ 实现/ ./ 在/ 该/ 案例/ 中/ ,/ 可以/ 识别/ 出/ “/ Catcher/ ”/ 、/ “/ Preyer/ ”/ 、/ “/ Supplier/ ”/ 3/ 类/ 角色/ ./ 其中/ ,/ “/ Catcher/ ”/ 角色/ 封装/ 了/ 作为/ 追逐/ 者/ 的/ 一组/ 属性/ (/ 如/ 位置/ 、/ 能量/ 等/ )/ 、/ 环境/ (/ 即/ 开放/ 的/ 网格/ )/ 和/ 行为/ (/ 如/ “/ moving/ ”/ ,/ “/ sensingapreyagentintheenvironment/ ”/ 等/ )/ ./ moveDown/ (/ )/ ,/ Catcher/ ./ moveLeft/ (/ )/ ,/ Catcher/ ./ move/ -/ Right/ (/ )/ ,/ Catcher/ ./ catchRabbit/ (/ )/ ,/ join/ (/ Supplier/ )/ ,/ quit/ (/ Supplier/ )/ }/ ./ 该/ 操作/ 集中/ 既/ 包含/ 了/ 角色/ Catcher/ 的/ 内部/ 行为/ ,/ 比如/ 向上/ 、/ 向下/ 、/ 向/ 左/ 、/ 向/ 右/ 移动/ 等/ ,/ 也/ 包含/ 了/ SA/ 可/ 执行/ 的/ 角色/ 转换/ 操作/ ./ (/ 3/ )/ 定义/ 回报/ 函数/ ./ 开发者/ 需要/ 为/ 每/ 一个/ 学习/ 器/ 的/ 操作/ 定义/ 回报/ 函数/ ./ 在/ 本/ 案例/ 中/ ,/ 如果/ Hunter/ -/ Agent/ 碰到/ 障碍物/ ,/ 那么/ 其/ 回报/ 值为/ 负数/ ;/ 如果/ HunterAgent/ 的/ 剩余/ 能量/ 较/ 多/ (/ 如/ 大于/ 50/ )/ 或者/ 剩余/ 的/ 能量/ 无法/ 支持/ 其/ 移动/ 到/ 供应站/ ,/ 那么/ 其/ 回报/ 值为/ 负数/ ,/ 否则/ 为/ 正数/ ,/ 具体/ 设计/ 如下/ 公式/ ./ 需要/ 强调/ 的/ 是/ ,/ 本/ 案例/ 分析/ 中/ 的/ 一些/ 数字/ 是/ 经验值/ ,/ 可以/ 根据/ 软件/ 运行/ 的/ 情况/ 对/ 其/ 进行/ 调整/ ./ reward/ =/ 50/ 烄/ energyremain/ 烅/ -/ 100/ ,/ energyremain/ >/ 50or/ 烆/ (/ 4/ )/ 设计/ 学习/ 算法/ ./ 该/ 案例/ 的/ 学习/ 算法/ 见/ 3.2/ 节/ 所示/ ,/ SADE/ +/ 已经/ 将/ 该/ 学习/ 算法/ 封装/ 在/ Learner/ 基类/ 中/ ,/ 开发者/ 需在/ 定义/ 各个/ 学习/ 器时/ 继承/ Learner/ ./ 图/ 9/ 中表/ 2/ 的/ 角色/ 调整/ 动作/ 适应性/ 学习/ 过程/ 反映/ 了/ 知识/ 融合/ 的/ 情况/ ,/ 即/ 在/ SA/ 角色/ 转换/ 到/ r2/ ,/ 执行/ r2/ 的/ 行为/ 并/ 完成/ 其/ 功能/ 后/ ,/ 观察/ 并/ 计算/ 执行/ r2/ 中/ 行为/ 的/ 总体/ 情况/ ,/ 从而/ 结合/ 绑定/ 角色/ r2/ 的/ 回报/ 函数/ ,/ 给出/ 之前/ 执行/ 绑定/ 角色/ r2/ 操作/ 的/ 回报/ 值/ ,/ 进而/ 更新/ Page10/ 绑定/ 角色/ r2/ 对应/ 的/ 的/ Q/ 值/ ./ 图/ 9/ 以/ 知识/ 表/ 转换/ 和/ 更新/ 的/ 形式/ 对/ 上述/ 知识/ 融合/ 的/ 过程/ 进行/ 了/ 剖析/ ./ SA/ 的/ 学习/ 从/ 角色/ r1/ 对应/ 的/ 知识/ 表/ 开始/ ,/ 中间/ 转换/ 到/ 角图/ 9/ 知识/ 融合/ 示意图/ 我们/ 在/ SADE/ +/ 平台/ 上/ 成功/ 开发/ 了/ 上述/ 案例/ ,/ 图/ 10/ 是/ 该/ 案例/ 的/ 运行/ 示意图/ ,/ 图中/ 方格/ 为/ 平地/ ,/ 其他/ 不同/ 颜色/ 的/ 方格/ 表示/ 环境/ 中/ 多样化/ 的/ 障碍物/ ,/ 如/ 沙地/ 、/ 泥泞/ 地/ 等等/ ./ 下面/ 通过/ 两个/ 情景/ 对/ 机器/ 狗/ 的/ 执行/ 效果/ 进行/ 实验/ ,/ 通过/ 对/ 实验/ 结果/ 的/ 比较/ ,/ 可以/ 看出/ SA/ 在/ 具有/ 学习/ 功能/ 后/ ,/ 能够/ 适应/ 动态/ 、/ 不/ 确定/ 环境/ ,/ 并/ 更好/ 的/ 完成/ 任务/ ./ 情景/ 1/ ./ 在/ 机器/ 狗/ 能量/ 充足/ 情况/ 下/ ,/ 完成/ 单/ 角色/ 任务/ 情况/ ./ 为了/ 测试通过/ 学习/ 机器/ 狗/ 能够/ 更好/ 的/ 适应环境/ 变化/ ,/ 完成/ 追击/ 者/ 角色/ 捕获/ 猎物/ 的/ 任务/ ,/ 我们/ 让/ 机器/ 狗/ 在/ 能量/ 充足/ 的/ 情况/ 下/ 按照/ 两种/ 不同/ 的/ 方式/ 追击/ 猎色/ r2/ 对应/ 的/ 知识/ 表/ ,/ 之后/ 又/ 结合/ r2/ 知识/ 表来/ 更新/ r1/ 表中/ 的/ 相关/ 内容/ ./ 上述/ 过程/ 可/ 理解/ 为/ ,/ 角色行为/ 的/ 执行/ 效果/ 可/ 作为/ 角色/ 转换/ 条件/ 的/ 依据/ ./ 物/ :/ 一种/ 是/ 随机/ 移动/ 的/ 方式/ ,/ 另/ 一种/ 是/ 机器/ 狗/ 带有/ 学习/ 的/ 移动/ ./ 本/ 实验/ 是/ 在/ 机器/ 狗/ 拥有/ 5000/ 个/ 单元/ 能量/ 时/ ,/ 比较/ 通过/ 两种/ 不同/ 的/ 捕获/ 猎物/ 方式/ 完成/ 捕获/ 猎物/ 任务/ 的/ 效果/ ./ 其中/ ,/ 在/ 学习/ 的/ 方式/ 中/ ,/ 采用/ 3.2/ 节中/ 的/ 自/ 适应/ 学习/ 算法/ ,/ 取/ 参数/ γ/ =/ 0.9/ ,/ 学习/ 过程/ 按照/ ε/ =/ 0.8/ 的/ ε/ -/ greedy/ 策略/ 选择/ 动作/ ./ 图/ 11/ 中/ 上下/ 两条/ 曲线/ 分别/ 展示/ 的/ 是/ 按照/ 随机/ 移动/ 的/ 方式/ 和/ 带有/ 学习/ 的/ 方式/ 捕获/ 猎物/ 的/ 情形/ ./ 横坐标/ 表示/ 的/ 是/ 捕获/ 猎物/ 的/ 次数/ ,/ 纵坐标/ 表示/ 的/ 是/ 每/ 两次/ 捕获/ 猎物/ 需要/ 移动/ 的/ 步数/ 的/ 平均值/ ./ 该图/ 表明/ ,/ 尽管/ 存在/ 极个别/ 的/ 情况/ (/ 如/ 横坐标/ 为/ 16/ 时/ 基于/ 学习/ 捕获/ 猎物/ 所/ 花费/ 的/ 步数/ 大于/ 随机/ 移动/ 的/ 步数/ )/ ,/ 但是/ 从/ 整体/ 上/ 看/ ,/ 经过/ 一段时间/ 的/ 学习/ ,/ 机器/ 狗会用/ 小于/ 随机/ 移动/ 的/ 步数/ 捕获/ 到/ 猎物/ ,/ 所/ 花费/ 的/ 步数/ 浮动/ 也/ 远/ 小于/ 随机/ 移动/ 的/ 程度/ ,/ 这/ 说明/ 本文/ 提出/ 的/ 自/ 适应/ 学习/ 的/ 方法/ 整体/ 上/ 提高/ 了/ Agent/ 适应环境/ 的/ 能力/ 、/ 降低/ 了/ 损耗/ ./ 导致/ 极个别/ 异常情况/ 的/ 原因/ 是/ 多方面/ 的/ ,/ 由于/ 环境/ 的/ 开放性/ 、/ Agent/ 对/ 环境/ 感知/ 和/ 自身/ 信图/ 11/ 能量/ 充足/ 条件/ 下/ 机器/ 狗/ 捕获/ 猎物/ 情况/ Page11/ 息/ 的/ 有限性/ ,/ Agent/ 对/ 适应性/ 行为/ 的/ 学习效果/ 必然/ 存在/ 一个/ 修正/ 和/ 提高/ 的/ 过程/ ./ 情景/ 2/ ./ 在/ 机器/ 狗/ 能量/ 受限/ 情况/ 下/ ,/ 保证/ 尽可能/ 多/ 的/ 捕获/ 猎物/ ,/ 并/ 及时/ 补充/ 能量/ ./ 在/ 这种/ 情景/ 下/ ,/ 要求/ 机器/ 狗/ 能够/ 根据/ 自身/ 能量/ 的/ 情况/ 自动/ 转换/ 角色/ ,/ 从而/ 及时/ 补充/ 能量/ ,/ 进而/ 可以/ 继续/ 下/ 一次/ 的/ 猎物/ 捕获/ 过程/ ./ 针对/ 此/ 情景/ ,/ 机器/ 狗/ 将/ 按照/ 两种/ 不同/ 的/ 方式/ 捕获/ 猎物/ ./ 方式/ 1/ ./ 机器/ 狗/ 基于/ 学习/ 的/ 方式/ 移动/ 捕获/ 猎物/ ,/ 并且/ 在/ 能量/ 小于/ 某值/ (/ 设为/ 40/ 个/ 单元/ 的/ 能量/ )/ 时/ 转换/ 角色/ 为/ 补给/ 者/ 角色/ ,/ 并/ 基于/ 学习/ 的/ 方式/ 移动/ 至/ 补给站/ ,/ 开始/ 补给/ 能量/ ./ 方式/ 2/ ./ 机器/ 狗/ 基于/ 学习/ 的/ 方式/ 移动/ 捕获/ 猎物/ ,/ 并且/ 在/ 能量/ 小于/ 某值/ (/ 初始/ 设为/ 60/ 个/ 单元/ 的/ 能量/ 值/ ,/ 之后/ 通过/ 学习/ 不断/ 调整/ 该值/ )/ 时/ 转换/ 角色/ 为/ 补给/ 者/ 角色/ ,/ 并/ 基于/ 学习/ 的/ 方式/ 移动/ 至/ 补给站/ ,/ 开始/ 补给/ 能量/ ./ 在/ 本/ 实验/ 中/ ,/ 设定/ 机器/ 狗/ 初始/ 能量/ 为/ 200/ 个/ 单元/ ;/ 在/ 学习/ 的/ 方式/ 中/ ,/ 采用/ 3.2/ 节中/ 的/ 学习/ 算法/ ,/ 取/ 参数/ γ/ =/ 0.9/ ,/ 学习/ 过程/ 按照/ ε/ =/ 0.8/ 的/ ε/ -/ greedy/ 策略/ 选择/ 动作/ ./ 猎物/ 按照/ 顺时针/ 方向/ 移动/ ./ 对于/ 这/ 两种/ 方式/ ,/ 我们/ 称/ 这样/ 的/ 过程/ 为/ 一次/ 执行/ 结束/ ./ 即/ 在/ 机器/ 狗/ 捕获/ 猎物/ 的/ 过程/ 中/ ,/ 如果/ 能量/ 不足/ 则/ 进行/ 角色/ 转换/ ,/ 角色/ 转换/ 后/ 如果/ 不/ 能够/ 成功/ 补给/ 能量/ ,/ 说明/ 机器/ 狗/ 已/ 耗尽/ 能量/ 且/ 未/ 到达/ 补给站/ ,/ 一次/ 执行/ 结束/ ./ 或者/ 能够/ 成功/ 补给/ 能量/ ,/ 则/ 再/ 进行/ 一轮/ 猎物/ 捕获/ 活动/ ,/ 直到/ 能量/ 耗尽/ 为止/ ,/ 一次/ 执行/ 结束/ ./ 在/ 本/ 实验/ 中/ ,/ 我们/ 对/ 这/ 两种/ 方式/ 的/ 每/ 一次/ 执行/ 进行/ 一次/ 统计/ ,/ 统计/ 补给/ 能量/ 是否/ 成功/ 以及/ 在/ 这次/ 执行/ 中/ 捕获/ 的/ 猎物/ 数/ ./ 然后/ 对/ 每/ 100/ 次/ 执行/ 进行/ 一次/ 比较/ ,/ 并称/ 其为/ 一轮/ ./ 下面/ 我们/ 给出/ 第/ 5/ 、/ 10/ 、/ 15/ 轮/ 执行/ 的/ 效果/ 比较/ ./ 图/ 12/ 给出/ 机器/ 狗/ 按照/ 两种/ 方式/ 进行/ 角色/ 转换/ 后/ ,/ 成功/ 补给/ 能量/ 的/ 次数/ 比较/ ./ 可以/ 看出/ 随着/ 学习/ 的/ 进行/ ,/ 按照/ 学习/ 的/ 方式/ 不断更新/ 角色/ 转换/ 条件/ ,/ 成功/ 转换/ 角色/ 并/ 补给/ 能量/ 的/ 次数/ 越来越/ 多/ ,/ 且/ 要/ 好/ 于/ 在/ 固定/ 条件/ 下/ 转换/ 角色/ 的/ 情况/ ./ 图/ 12/ 按照/ 不同/ 的/ 方式/ 角色/ 转换/ 并/ 补给/ 能量/ 成功/ 次数/ 比较/ 图/ 13/ 给出/ 了/ 在/ 不同/ 的/ 角色/ 转换/ 方式/ 下/ ,/ 机器/ 狗/ 每/ 一轮/ 捕获/ 猎物/ 的/ 平均/ 个数/ 比较/ ./ 从/ 实验/ 的/ 结果/ 可以/ 看出/ ,/ 通过/ 学习/ 并/ 进行/ 自/ 适应/ 调整/ ,/ 处于/ 动态/ 环境/ 中/ 的/ 机器/ 狗/ 在/ 保证/ 了/ 最/ 多/ 捕获/ 猎物/ 的/ 同时/ ,/ 又/ 能/ 及时/ 完成/ 能量/ 补给/ ,/ 更好/ 的/ 完成/ 了/ 捕获/ 猎物/ 的/ 任务/ ./ 图/ 13/ 按照/ 不同/ 的/ 方式/ 捕获/ 猎物/ 平均/ 个数/ 比较/ 需要/ 说明/ 的/ 是/ ,/ 本/ 案例/ 中/ SA/ 感兴趣/ 的/ 环境/ 状态/ 在/ 系统/ 设计/ 时/ 已经/ 确定/ ./ 若要/ 适应/ 系统/ 运行/ 期间/ 环境/ 中/ 出现/ 的/ 新/ 的/ 环境/ 变化/ ,/ 如/ 产生/ 了/ 新/ 的/ 物质/ 或/ 障碍物/ ,/ 则/ 需要/ 一定/ 的/ 人为/ 干预/ (/ 如图/ 3/ 中/ 的/ Manager/ 与/ SA/ 的/ 交互/ )/ ,/ 比如/ 系统/ 开发人员/ 或/ 管理人员/ 要/ 识别/ 这种/ 新/ 物质/ ,/ 并/ 获取/ SA/ 与/ 该/ 物质/ 发生/ 碰撞/ 后/ 给/ 整个/ 系统/ 带来/ 的/ 影响/ (/ 即/ 环境/ 回报/ 值/ )/ ,/ 从而/ 设计/ 回报/ 函数/ ,/ 并/ 将/ 新/ 的/ 环境/ 状态/ 加入/ 到/ 知识/ 表中/ ,/ 而后/ SA/ 可/ 在/ 新/ 的/ 知识/ 表/ 和/ 回报/ 函数/ 基础/ 上/ ,/ 重新学习/ 适应环境/ 变化/ 的/ 策略/ ./ 5/ 相关/ 工作/ 分析/ 由于/ 系统/ 部署/ 环境/ (/ 如/ Internet/ )/ 的/ 变化/ 以及/ 对系统/ 灵活性/ 和/ 健壮性/ 等/ 方面/ 提出/ 了/ 更/ 高/ 的/ 要求/ ,/ 有关/ 适应性/ 系统/ 的/ 研究/ 近年来/ 引起/ 了/ 学术界/ 和/ 工业界/ 的/ 高度/ 关注/ 和/ 重视/ ,/ 如/ 开放/ 、/ 动态/ 、/ 难控/ 网络/ 环境/ 下/ 的/ 网构/ 软件/ [/ 1/ ]/ 、/ 软件/ 密集型/ 的/ 超大规模/ 系统/ [/ 2/ ]/ 等/ ./ 尽管/ 自/ 适应/ 系统/ 的/ 研究/ 已经/ 有/ 较/ 长/ 的/ 时间/ 并/ 在/ 许多/ 工程/ 领域/ 取得/ 了/ 诸多/ 成功/ ,/ 但是/ 如何/ 采用/ 系统/ 、/ 高效/ 的/ 方式/ 来/ 支持/ 自/ 适应/ 软件系统/ 的/ 工程化/ 开发/ 仍然/ 是/ 软件工程/ 面临/ 的/ 一项/ 重要/ 挑战/ ,/ 包括/ 需求/ 、/ 建模/ 、/ 实现/ 、/ 验证/ 等/ [/ 3/ ,/ 13/ ]/ ./ 尤其/ 是/ 自/ 适应/ 软件系统/ 的/ 研究/ 是/ 多/ 学科/ 交叉/ 的/ ,/ 包括/ 软件工程/ 、/ 控制论/ 、/ 决策/ 论/ 、/ 人工智能/ 、/ 网络/ 和/ 分布/ 计算/ 等/ [/ 4/ ]/ ./ 在/ 自/ 适应/ 系统/ 软件工程/ 领域/ ,/ 目前/ 人们/ 大多/ 借助于/ 软件体系结构/ 技术/ 、/ 基于/ 构件/ 软件工程/ 、/ 面向/ 方面/ 程序设计/ 、/ 中间件/ 、/ 计算/ 反射/ [/ 7/ ]/ 等/ 方法/ 来/ 支持/ 自/ 适应/ 软件系统/ 的/ 工程化/ 开发/ ./ 体系结构/ 模型/ 及其/ 语言/ (/ 如/ 体系结构/ 描述/ ADL/ )/ 可/ 用于/ 自/ 适应/ 系统/ 设计/ 态/ Page12/ 的/ 建模/ 以及/ 运行/ 态/ 的/ 管理/ ,/ 人们/ 已经/ 提出/ 了/ 许多/ 基于/ 图形/ (/ 如/ Bi/ -/ Graph/ )/ 、/ 代数/ 等/ 动态/ 体系结构/ 的/ 描述语言/ ,/ 该/ 方面/ 的/ 代表性/ 工作/ 是/ Garlan/ 等/ 人/ [/ 5/ ]/ 的/ Rainbow/ 以及/ 文献/ [/ 9/ ,/ 14/ ]/ ./ 基于/ 构件/ 的/ 技术/ 通过/ 构件/ 模型/ 来/ 设计/ 和/ 实现/ 自/ 适应/ 软件/ ,/ 并/ 通过/ 可/ 重用/ 的/ 自/ 适应/ 引擎/ 对/ 构件/ 的/ 自/ 适应/ 进行/ 管理/ [/ 4/ ]/ ./ 它/ 通常/ 借助于/ 构件/ 框架/ (/ 如/ COM/ // DCOM/ ,/ ./ NET/ ,/ EnterpriseJavaBeans/ ,/ COBRAComponentMode/ )/ ,/ 采用/ 接口协议/ 、/ 运行/ 时/ 绑定/ 等/ 技术手段/ ,/ 允许/ 开发者/ 在/ 运行/ 时/ 通过/ 增加/ 、/ 删除/ 、/ 重配/ 构件/ 以/ 实现/ 系统/ 的/ 适应性/ [/ 7/ ]/ ./ 面向/ 方面/ 的/ 编程/ (/ AOP/ )/ 支持/ 开发者/ 用/ 方面/ 来/ 封装/ 自/ 适应/ 逻辑/ 和/ 关注点/ ,/ 并/ 通过/ 动态/ 织入/ 等/ 机制/ 实现/ 软件系统/ 运行/ 时/ 的/ 自/ 适应/ ./ 上述/ 研究/ 工作/ 均/ 基于/ 自/ 适应/ 软件系统/ 的/ 以下/ 开发/ 和/ 运行/ 技术/ 框架/ ,/ 即/ 开发者/ 在/ 设计阶段/ 显式/ 地/ 给/ 出自/ 适应/ 逻辑/ 和/ 决策/ 的/ 描述/ ,/ 软件系统/ 在/ 运行/ 阶段/ 根据/ 所/ 观察/ 到/ 的/ 环境/ 或/ 自身/ 变化/ ,/ 通过/ 对/ 预定/ 义自/ 适应/ 逻辑/ 和/ 决策/ 的/ 解释/ 和/ 分析/ 来/ 实施/ 自/ 适应/ ./ 软件/ 密集型/ 系统/ 的/ 适应性/ 可以/ 在/ 不同/ 层次/ 上/ 进行/ ,/ 如/ 控制数据/ [/ 15/ ]/ 、/ 构件/ 和/ 体系结构/ [/ 5/ ]/ 等/ ./ 近年来/ ,/ 借助于/ 软件/ Agent/ 技术/ 来/ 开展/ 自/ 适应/ 系统/ 的/ 软件工程/ 研究/ 成为/ 这一/ 领域/ 的/ 重要/ 发展趋势/ ,/ 这/ 是因为/ 人们/ 认识/ 到/ 软件/ Agent/ 可以/ 为/ 自/ 适应/ 软件系统/ 的/ 开发/ 和/ 运行/ 提供/ 一系列/ 的/ 技术支持/ ,/ 如/ 自主/ 决策/ 、/ 环境/ 感知/ 、/ 自然/ 建模/ 等/ ./ 现有/ 的/ 该/ 方面/ 的/ 研究/ 大多/ 集中/ 于/ 借助/ Agent/ 抽象/ 来/ 支持/ 对/ 自/ 适应/ 软件系统/ 进行/ 建模/ 、/ 分析/ 和/ 设计/ ,/ 包括/ 元/ 模型/ [/ 6/ ]/ 、/ 建模语言/ 、/ 开发/ 方法学/ (/ 如/ Gaia/ [/ 6/ ,/ 16/ ]/ 、/ O/ -/ MaSE/ [/ 16/ -/ 17/ ]/ 、/ ADELFE/ [/ 7/ ]/ 、/ MetaSelf/ [/ 18/ ]/ )/ ./ 其中/ 许多/ 研究/ 借助于/ 社会/ 组织/ 的/ 思想/ 来/ 抽象/ 自/ 适应/ 系统/ 、/ 分析/ 自/ 适应/ 的/ 机制/ 和/ 方法/ ,/ 如/ 通过/ 角色/ 的/ 动态/ 重/ 分配/ (/ RoleDynamicReallocation/ )/ [/ 19/ ]/ 或者/ 动态/ 角色扮演/ (/ DynamicRolePlaying/ )/ [/ 20/ ]/ 来/ 对/ 组织/ 的/ 适应性/ 进行/ 分析/ 和/ 设计/ ./ 显然/ ,/ 如何/ 将/ 这些/ 高层/ 的/ 自/ 适应/ 机制/ 和/ 方法/ 应用/ 于/ 实现/ 阶段/ 以/ 支持/ 自/ 适应/ 系统/ 的/ 构造/ 和/ 运行/ 是/ 该/ 领域/ 研究/ 面临/ 的/ 挑战/ 之一/ ./ 在/ 自/ 适应/ 软件/ 的/ 构造/ 和/ 实现/ 方面/ ,/ 目前/ 有/ 以下/ 几种/ 不同/ 的/ 方法/ ./ (/ 1/ )/ 提供/ 程序设计/ 语言/ 来/ 支持/ 自/ 适应/ 系统/ 的/ 编程/ ,/ 如/ 面向/ Agent/ 的/ 程序设计/ 语言/ 3APL/ [/ 21/ ]/ 和/ SLABSp/ 操作/ 如/ enact/ 、/ deact/ 、/ activate/ 和/ deactivate/ ,/ 能够/ 支持/ 开发/ 具有/ 动态/ 调整/ 角色/ 能力/ 的/ Agent/ ./ 但是/ 它们/ 对/ Agent/ 扮演/ 角色/ 进行/ 了/ 一些/ 限制/ ,/ 如同/ 一/ 时刻/ Agent/ 扮演/ 的/ 角色/ 中/ 只能/ 有/ 一个/ 处于/ 活跃/ 状态/ ,/ 其他/ 的/ 角色/ 必须/ 处于/ 非/ 活跃/ 状态/ ./ SLABSp/ 基于/ Caste/ 概念/ ,/ 每个/ Caste/ 封装/ 了/ 环境/ 、/ 属性/ 和/ 行为/ ,/ 它/ 运行/ 程序员/ 在/ 行为/ 中显式/ 地/ 定义/ Agent/ 如何/ 根据/ 环境/ 的/ 变化/ 加入/ (/ Join/ )/ 一个/ Caste/ 或者/ 退出/ (/ Quit/ )/ 一个/ Caste/ ;/ (/ 2/ )/ 提供/ 独立/ 的/ 自/ 适应/ 策略/ 或者/ 规则/ 描述语言/ 来/ 对/ 自/ 适应/ 逻辑/ 进行/ 显式/ 描述/ ,/ 并/ 与/ 其他/ 语言所/ 定义/ 的/ 业务/ 逻辑/ 相互/ 融合/ ,/ 如自/ 适应/ 规则/ 描述语言/ [/ 12/ ]/ 用于/ 基于/ 构件/ 的/ 自/ 适应/ 系统/ 开发/ 、/ 自/ 适应/ 策略/ 描述语言/ SADL/ 用于/ 定义/ 自/ 适应/ 逻辑/ [/ 11/ ]/ ;/ (/ 3/ )/ 软件开发/ 框架/ ,/ 如/ ROAD/ (/ Role/ -/ OrientedAdaptiveDesign/ )/ [/ 23/ ]/ ./ 这些/ 方法/ 和/ 语言/ 均/ 要求/ 开发人员/ 在/ 开发阶段/ 显式/ 地/ 定义/ 和/ 描述/ 系统/ 的/ 自/ 适应/ 逻辑/ ./ 为了/ 应对/ 不可/ 预测/ 的/ 变化/ 和/ 自/ 适应/ 需求/ ,/ 文献/ [/ 4/ ]/ 强调/ 需要/ 将/ 学习/ 方法/ 引入/ 自/ 适应/ 系统/ 的/ 研究/ ,/ 然而/ 现有/ 的/ 许多/ 研究/ [/ 24/ -/ 25/ ]/ 往往/ 关注/ 于/ 基于/ 学习/ 的/ 自/ 适应/ 机制/ 和/ 算法/ ,/ 忽视/ 了/ 与/ 软件工程/ 的/ 思想/ 和/ 方法/ 相结合/ ,/ 从而/ 为/ 自/ 适应/ 系统/ 的/ 开发/ 提供/ 系统/ 的/ 工程化/ 的/ 方法/ 支持/ ./ 6/ 结论/ 和/ 进一步/ 工作/ 由于/ 环境/ 变化/ 的/ 不确定性/ 和/ 不/ 可预测性/ ,/ 软件/ 开发人员/ 难以/ 在/ 设计阶段/ 准确/ 地/ 预期/ 各种/ 变化/ 并/ 借助于/ 自/ 适应/ 策略/ 描述语言/ 或者/ 程序设计/ 语言/ 来/ 清晰/ 地/ 定义/ 自/ 适应/ 逻辑/ ,/ 因而/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 开发/ 是/ 当前/ 自/ 适应/ 系统/ 软件工程/ 面临/ 的/ 一项/ 重大/ 挑战/ ./ 为了/ 解决/ 这一/ 挑战/ ,/ 自/ 适应/ 系统/ 的/ 软件工程/ 技术/ 需要/ 实现/ 两/ 方面/ 转变/ ,/ 即将/ 原先/ 由/ 开发人员/ 在/ 设计阶段/ 给出/ 的/ 自/ 适应/ 逻辑/ 延迟/ 到/ 由/ 系统/ 自身/ 在/ 运行/ 阶段/ 来/ 完成/ ;/ 以及/ 自/ 适应/ 决策/ 需要/ 由/ 离线/ 方式/ 转化/ 为/ 在线/ 方式/ ./ 本文/ 提出/ 了/ 基于/ 角色/ 动态/ 绑定/ 和/ 增强/ 学习/ 的/ 自/ 适应/ 软件技术/ ./ 该/ 方法/ 基于/ Agent/ 和/ 组织/ 抽象/ 的/ 自/ 适应/ 系统/ 元/ 模型/ ,/ 提出/ 了/ 角色/ 动态/ 绑定/ 的/ 自/ 适应/ 机制/ ,/ 借助于/ 增强/ 学习/ 方法/ ,/ 使得/ 自/ 适应/ 软件/ Agent/ 能够/ 通过/ 对非/ 预期/ 变化/ 及其/ 适应性/ 行为/ 的/ 学习/ ,/ 实现/ 在线/ 的/ 自/ 适应/ 决策/ ./ 为了/ 支持/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 工程化/ 开发/ 和/ 运行/ ,/ 论文/ 设计/ 了/ 基于/ 角色/ 动态/ 绑定/ 的/ 自/ 适应/ 学习/ 算法/ 以及/ 封装/ 该/ 算法/ 的/ 自/ 适应/ 软件/ Agent/ 模型/ ,/ 建立/ 了/ 其/ 软件开发/ 框架/ ,/ 设计/ 并/ 实现/ 了/ 相应/ 的/ 支撑/ 环境/ SADE/ +./ 除了/ 本文/ 所/ 介绍/ 的/ 案例/ 之外/ ,/ 我们/ 还/ 针对/ 自/ 适应/ 网上交易/ 系统/ 、/ 自/ 适应/ 机器人/ 等/ 进行/ 了/ 应用/ 案例/ 的/ 开发/ 和/ 分析/ ,/ 以/ 分析/ 和/ 展示/ 论文/ 工作/ 和/ 支撑/ 平台/ 有效性/ 等/ ,/ 由于/ 篇幅/ 限制/ 在/ 此/ 不/ 一一/ 介绍/ ./ 本文/ 的/ 工作/ 建立/ 在/ 动态/ 绑定/ 机制/ 的/ 形式/ 语义/ 基础/ 之上/ [/ 10/ ]/ ,/ 不同于/ 先前/ 的/ 工作/ [/ 11/ ]/ ,/ Page13/ 本文/ 为/ 开放/ 环境/ 下/ 自/ 适应/ 系统/ 的/ 开发/ 和/ 运行/ 提供/ 了/ 系统/ 的/ 方法/ 和/ 环境/ 支持/ ./ 进一步/ 的/ 研究/ 包括/ :/ (/ 1/ )/ 本文/ 的/ 研究/ 主要/ 针对/ 构件/ 层面/ 上/ 的/ 自/ 适应/ ,/ 实际上/ MAS/ 组织/ 的/ 自/ 适应/ 可以/ 在/ 不同/ 的/ 层次/ 上/ 进行/ ,/ 包括/ :/ 属性/ 层/ 、/ 个体/ 层/ 、/ 组织/ 结构层/ 、/ 组织/ 间层/ ,/ 而且/ 不同/ 层次/ 上/ 的/ 自/ 适应/ 往往/ 具有/ 相关性/ ./ 因此/ 需要/ 研究/ 如何/ 基于/ 社会/ 组织/ 思想/ 并/ 提供/ 统一/ 的/ 框架/ 来/ 规约/ 和/ 设计/ 不同/ 层次/ 的/ 自/ 适应/ 机制/ ,/ 并/ 提供/ 工程化/ 的/ 技术支持/ ;/ (/ 2/ )/ 本文/ 的/ 研究/ 主要/ 针对/ 非/ 预期/ 变化/ 的/ 在线/ 自/ 适应/ ,/ 但是/ 对于/ 许多/ 自/ 适应/ 系统/ 而言/ ,/ 离线/ 和/ 在线/ 的/ 自/ 适应/ 可能/ 都/ 需要/ ,/ 因此/ 需要/ 研究/ 如何/ 实现/ 二者之间/ 的/ 融合/ 来/ 支持/ 多样化/ 自/ 适应/ 系统/ 的/ 工程化/ 开发/ ;/ (/ 3/ )/ 本文/ 的/ 研究/ 基于/ 以下/ 基本/ 假设/ :/ Agent/ 在/ 任何/ 时候/ 所/ 绑定/ 的/ 角色/ 至多/ 只有/ 一个/ 处于/ 活跃/ 状态/ ./ 后续/ 我们/ 将/ 研究/ 多/ 角色/ 绑定/ 情况/ 的/ 自适应性/ 学习/ 问题/ ;/ (/ 4/ )/ 本文/ 研究/ 的/ 重点/ 侧重于/ 自/ 适应/ 系统/ 的/ 适应性/ 机制/ 及其/ 实现/ 方法/ ,/ 对于/ 自/ 适应/ 系统/ 而言/ 环境/ 无疑/ 是/ 非常/ 重要/ 的/ ,/ 本文/ 对/ 开放/ 环境/ 的/ 研究/ 集中/ 于/ 环境/ 的/ 变化/ 模型/ 以及/ 如何/ 根据/ 对/ 环境/ 状态/ 的/ 学习/ 来/ 实现/ 系统/ 的/ 自/ 适应/ ,/ 至于/ 开放/ 环境/ 的/ 其他/ 特征/ (/ 如/ 边界/ 的/ 不/ 确定/ 和/ 要素/ 的/ 变化/ )/ 以及/ 相应/ 的/ 问题/ (/ 如对/ 多样化/ 环境/ 的/ 有效/ 感知/ 、/ 抽象/ 和/ 表示/ 等/ )/ 将/ 是/ 我们/ 下/ 一步/ 的/ 研究/ 重点/ ./ 

