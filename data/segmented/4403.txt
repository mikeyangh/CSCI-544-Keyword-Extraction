Page1/ 面向/ 大规模/ 机群/ 的/ 可/ 扩展/ OLAP/ 查询/ 技术/ 王会举/ 1/ )/ ,/ 2/ )/ 覃雄派/ 1/ )/ ,/ 2/ )/ 王珊/ 1/ )/ ,/ 2/ )/ 张延松/ 3/ )/ 李/ 芙蓉/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 数据/ 工程/ 与/ 知识/ 工程/ 教育部/ 重点/ 实验室/ (/ 中国人民大学/ )/ 北京/ 100872/ )/ 2/ )/ (/ 中国人民大学/ 信息/ 学院/ 北京/ 100872/ )/ 3/ )/ (/ 中国人民大学/ 中国/ 调查/ 与/ 数据中心/ 北京/ 100872/ )/ 摘要/ 大/ 数据/ 时代/ ,/ 由/ 中低端/ 硬件/ 组成/ 的/ 大规模/ 机群/ 逐渐/ 成为/ 海量/ 数据处理/ 的/ 主流/ 平台/ 之一/ ./ 然而/ 传统/ 基于/ 高端/ 硬件平台/ 设计/ 的/ 并行/ OLAP/ 查询/ 算法/ 并/ 不/ 适应/ 这种/ 由/ 不/ 可靠/ 计算/ 单元/ 组成/ 的/ 大规模/ 并行计算/ 的/ 环境/ ./ 为/ 改善/ 其/ 在/ 新/ 计算环境/ 下/ 的/ 的/ 扩展性/ 和/ 容错性/ ,/ 该文/ 对/ 传统/ 数据仓库/ 的/ 数据组织/ 模式/ 及/ 处理/ 模式/ 进行/ 改造/ ,/ 提出/ 了/ 全新/ 的/ 无/ 连接/ 雪花/ 模型/ 和/ TRM/ 执行/ 模型/ ./ 无/ 连接/ 雪花/ 模型/ 基于/ 层次/ 编码/ 技术/ ,/ 将维表/ 层次/ 等/ 关键/ 信息压缩/ 进/ 事实/ 表/ ,/ 使得/ 事实/ 表/ 可以/ 独立/ 处理/ 数据/ ,/ 从/ 数据模型/ 层/ 保证/ 了/ 数据/ 计算/ 的/ 独立性/ ;/ TRM/ 执行/ 模型/ 将/ OLAP/ 查询/ 的/ 处理/ 抽象/ 为/ Transform/ 、/ Reduce/ 、/ Merge3/ 个/ 操作/ ,/ 使得/ OLAP/ 查询/ 可/ 被/ 划分/ 为/ 众多/ 可/ 并行执行/ 的/ 独立/ 子/ 任务/ ,/ 从/ 执行层/ 保证/ 了/ 系统/ 的/ 高度/ 可/ 扩展/ 特性/ ./ 在/ 性能/ 优化/ 方面/ ,/ 该文/ 提出/ 了/ Scan/ -/ index/ 扫描/ 和/ 跳跃式/ 扫描/ 算法/ ,/ 以/ 尽可能/ 地/ 减少/ I/ // O/ 访问/ 操作/ ;/ 设计/ 了/ 并行/ 谓词/ 判断/ 、/ 批量/ 谓词/ 判断/ 等/ 优化/ 算法/ ,/ 以/ 加速/ 本地/ 计算速度/ ./ 实验/ 表明/ :/ LaScOLAP/ 原型/ 可以/ 获得/ 较/ 好/ 的/ 扩展性/ 和/ 容错性/ ,/ 其/ 性能比/ HadoopDB/ 高出/ 一个/ 数量级/ ./ 关键词/ 大规模/ 可/ 扩展/ ;/ OLAP/ 查询/ ;/ 无/ 连接/ 雪花/ 模型/ ;/ TRM/ 执行/ 模型/ ;/ 跳跃式/ 扫描/ ;/ Scan/ -/ index/ ;/ 大/ 数据/ 1/ 引言/ 数据仓库/ 规模/ 的/ 爆炸式/ 增长/ ①/ ,/ 迫使/ 越来越/ 多/ 的/ 企业/ 将/ 应用/ 从/ 高端/ 服务器/ 移植/ 到/ 了/ 由/ 中低端/ 硬件/ 构成/ 的/ 大规模/ 计算机/ 机群/ ./ 然而/ ,/ 传统/ 的/ 并行/ 数据库/ 难以/ 适应/ 此新/ 的/ 硬件/ 环境/ ./ 大多数/ 并行/ 数据库/ 是/ 为/ 有限/ 规模/ 高端/ 服务器/ 组成/ 的/ 机群/ 而/ 设计/ [/ 1/ ]/ ./ 在/ 此种/ 环境/ 下/ ,/ 节点/ 失效/ 属/ 稀有/ 事件/ ,/ 复杂/ 查询/ 大都/ 可以/ 在/ 数/ 小时/ 内/ 完成/ ,/ 其/ 处理/ 失败/ 查询/ 的/ 基本/ 措施/ 是/ 重/ 做/ 整个/ 查询/ ./ 然而/ ,/ 在/ 将/ 其/ 部署/ 于/ 由/ 中低端/ 硬件/ 构成/ 的/ 大规模/ 机群/ 计算环境/ 时/ ,/ 节点/ 失效/ 概率/ 将/ 迅速/ 增加/ ,/ 一个/ 节点/ 的/ 失效/ 可能/ 导致/ 整个/ 查询/ 的/ 重新/ 执行/ ./ 极端/ 情况/ 下/ ,/ 并行/ 数据库/ 将/ 可能/ 出现/ 不停/ 重做/ 查询/ 的/ 局面/ ./ 传统/ 数据仓库/ 往往/ 按照/ 星型/ 模型/ 或/ 雪花/ 模型/ 对/ 数据/ 进行/ 组织/ ,/ 并/ 依赖于/ 连接/ 操作/ 来/ 处理/ 查询/ ,/ 当/ 连接/ 的/ 数据/ 不能/ 保证/ 在/ 并行处理/ 节点/ 上/ 的/ 局部性/ 时/ ,/ OLAP/ 查询处理/ 算法/ 同样/ 难以/ 适应/ 大规模/ 机群/ 的/ 计算/ 模式/ :/ (/ 1/ )/ 如果/ 将/ 事实/ 表和维表/ 按照/ 传统/ 的/ 并行/ 数据库/ 方式/ 均匀分布/ 于/ 各个/ 数据/ 节点/ ,/ 连接/ 操作/ 将/ 引入/ 大量/ 数据/ 迁移/ ,/ 降低/ 了/ OLAP/ 的/ 整体/ 性能/ ;/ (/ 2/ )/ 如果/ 采用/ 将维表/ 在/ 各个/ 数据/ 节点/ 复制/ 、/ 事实/ 表/ 水平/ 均匀/ 分割/ 的/ 方式/ ,/ 又/ 会/ 引入/ 较/ 高/ 的/ 存储空间/ 和/ 维表/ 更新/ 维护/ 代价/ ./ 以/ 10GB/ 的/ 维表/ 和/ 1TB/ 的/ 事实/ 表为例/ ②/ ,/ 维表/ 虽然/ 只/ 占/ 事实/ 表/ 的/ 1/ %/ ,/ 但/ 若/ 在/ 100/ 个/ 节点/ 复制/ 维表/ ,/ 维表所/ 占/ 空间/ 将/ 变为/ 100/ ×/ 10GB/ ≈/ 1TB/ —/ —/ —/ 几乎/ 等同于/ 事实/ 表/ 的/ 容量/ ./ 节点/ 数越/ 多/ ,/ 维表/ 数据/ 所/ 占/ 空间/ 比例/ 将/ 越/ 大/ ./ 为了/ 获得/ 高度/ 可/ 扩展/ 的/ OLAP/ 查询处理/ 模式/ ,/ 本文/ 对/ 数据仓库/ 的/ 传统/ 数据组织/ 模式/ 进行/ 了/ 改造/ ,/ 提出/ 了/ 基于/ 扫描/ 的/ 无/ 连接/ 雪花/ 模型/ ./ 基于/ 新/ 的/ 数据模型/ ,/ 我们/ 设计/ 了/ 高度/ 可/ 扩展/ 的/ 、/ 完全/ 不同于/ 传统/ 查询处理/ 方式/ 的/ TRM/ 执行/ 模型/ ./ 无/ 连接/ 雪花/ 模型/ JFSS/ (/ Join/ -/ FreeSnowflakeSchema/ )/ 采用/ 局部/ 层次/ 编码/ 技术/ ,/ 将维表/ 层次/ 信息压缩/ 进/ 事实/ 表/ ,/ 使得/ 事实/ 表/ 可以/ 独立/ 执行/ 维表上/ 的/ 谓词/ 判断/ 、/ 聚集/ 等/ 操作/ ,/ 从而/ 使/ 连接/ 的/ 数据/ 在/ 大规模/ 机群/ 上/ 实现/ 局部性/ ,/ 消除/ 了/ 连接/ 操作/ ./ TRM/ (/ Transform/ -/ Reduce/ -/ Merge/ )/ 执行/ 模型/ ,/ 将/ 数据仓库/ 的/ 操作/ 抽象/ 为/ Transform/ 、/ Reduce/ 、/ Merge3/ 个/ 操作/ :/ (/ 1/ )/ Transform/ ./ 主/ 节点/ 对/ 查询/ 进行/ 预处理/ ,/ 将/ 查询/ 中/ 作用/ 于维表/ 的/ 操作/ (/ 如/ 谓词/ 判断/ ,/ group/ -/ by/ 聚集/ 操作/ 等/ )/ 转换/ 为/ 事实/ 表上/ 的/ 操作/ ;/ (/ 2/ )/ Reduce/ ./ 每个/ 数据/ 节点/ 并行/ 地/ 扫描/ 、/ 聚集/ 本地/ 数据/ ,/ 然后/ 将/ 处理结果/ 返回/ 给/ 主/ 节点/ ;/ (/ 3/ )/ Merge/ ./ 主/ 节点/ 对/ 各个/ 数据/ 节点/ 返回/ 的/ 结果/ 进行/ 合并/ ,/ 并/ 基于/ 合并/ 数据/ 执行/ 后续/ 的/ 过滤/ 、/ 排序/ 等/ 操作/ ./ TRM/ 执行/ 模型/ 可/ 将/ OLAP/ 查询/ 分解/ 为/ 众多/ 可/ 独立/ 执行/ 和/ 恢复/ 的/ 子/ 任务/ ,/ 并/ 将/ 网络/ 传输/ 量/ 限制/ 于/ 聚集/ 结果/ 的/ 合并/ 上/ ,/ 从而/ 实现/ 了/ 高效/ 可靠/ 的/ 执行/ 模式/ ./ 为了/ 加快/ 数据/ 节点/ 的/ 处理速度/ ,/ 我们/ 采取/ 了/ 如下/ 优化/ 算法/ 及/ 策略/ :/ (/ 1/ )/ Scan/ -/ index/ 算法/ 用/ 动态/ 索引/ 的/ 方式/ 有效/ 地/ 避免/ 了/ 多列/ 查询/ 时/ 的/ 列/ 间连接/ 操作/ ,/ 有效/ 减少/ 了/ 列/ 存储/ 模型/ 的/ 元组/ 重构/ 代价/ ;/ (/ 2/ )/ 基于/ 压缩/ 数据/ 设计/ 的/ 批量/ 谓词/ 判断/ 可以/ 使/ 多个/ 具有/ 相同/ 属性/ 值/ 的/ 元组/ 只/ 执行/ 一次/ 谓词/ 判断/ ,/ 从而/ 加快/ 谓词/ 判断/ 的/ 速度/ ;/ (/ 3/ )/ 跳跃式/ 扫描/ 算法/ 可以/ 尽可能/ 地/ 跳/ 过/ 与/ 查询/ 不/ 相关/ 的/ 数据/ 块/ ,/ 有效/ 减少/ I/ // O/ 访问/ 操作/ ./ 最后/ 要/ 强调/ 的/ 是/ ,/ 本/ 研究所/ 依赖/ 的/ 关键技术/ —/ —/ —/ 层次/ 编码/ 技术/ ,/ 在/ 某些/ 领域/ 已有/ 应用/ ,/ 如/ XML/ 数据管理/ 等/ ./ 我们/ 的/ 最大/ 贡献/ 是/ 结合/ OLAP/ 查询/ 的/ 特点/ ,/ 对/ 其/ 进行/ 优化/ 改造/ (/ 提出/ 局部/ 层次/ 编码方式/ )/ ,/ 将/ 其/ 用于/ 解决/ 当前/ OLAP/ 领域/ 面临/ 的/ 最具/ ①/ ②/ Page3/ 挑战性/ 的/ 问题/ 之一/ —/ —/ —/ 大/ 数据/ 的/ 处理/ 分析/ ,/ 从而/ 实现/ 了/ 高性能/ 的/ 、/ 可/ 扩展/ 的/ OLAP/ 查询处理/ 方式/ ./ 基于/ SSB/ 标准/ 基准/ 测试/ 的/ 实验/ 表明/ ,/ 原型/ 系统/ LaScOLAP/ (/ LargeScaleOLAP/ )/ 具备/ 高度/ 的/ 可扩展性/ 和/ 容错性/ ,/ 同时/ 其/ 性能/ 也/ 远超/ 面向/ 大规模/ 机群/ 的/ 混合式/ 数据库/ HadoopDB/ [/ 1/ ]/ ./ 本文/ 第/ 2/ 节/ 列出/ 相关/ 工作/ ;/ 第/ 3/ 节/ 论述/ 无/ 连接/ 雪花/ 模型/ ;/ 第/ 4/ 节/ 讨论/ 无/ 连接/ 雪花/ 模型/ 在/ 机群/ 环境/ 下/ 的/ 存储/ 策略/ ;/ 第/ 5/ 节/ 讨论/ TRM/ 执行/ 模型/ 及/ 各种/ 优化/ 算法/ 的/ 实现/ ;/ 第/ 6/ 节/ 进行/ 实验/ 分析/ ./ 2/ 相关/ 工作/ MapReduce/ [/ 2/ ]/ 将/ 数据/ 的/ 访问/ 操作/ 抽象/ 为/ 一系列/ Map/ 操作/ 和/ Reduce/ 操作/ ,/ 把/ 一个/ 任务/ 划分/ 为/ 多个/ 可以/ 独立/ 执行/ 扫描/ 操作/ 的/ 子/ 任务/ ,/ 子/ 任务/ 间/ 通过/ 物化/ 的/ 〈/ key/ ,/ value/ 〉/ 形式/ 连接起来/ ,/ 从而/ 获得/ 较/ 好/ 的/ 扩展性/ 和/ 容错性/ ./ 本文/ 的/ 一些/ 思想/ 受/ 启发/ 于/ MapReduce/ 技术/ ,/ 通过/ 查询/ 转换/ (/ Transform/ )/ ,/ 将/ 所有/ 查询/ 抽象/ 为/ Reduce/ 和/ Merge/ 操作/ ,/ 把/ 查询/ 任务/ 分为/ 众多/ 独立/ 扫描/ 的/ 子/ 任务/ ,/ 在/ 机群/ 上/ 并行执行/ ,/ 从而/ 获得/ 可/ 扩展/ 的/ OLAP/ 查询/ 执行/ 方式/ ./ 但/ LaScOLAP/ 是/ 对/ OLAP/ 查询/ 的/ 高度/ 抽象/ ,/ 而/ MapReduce/ 是/ 对/ 通用/ 数据处理/ 操作/ 的/ 抽象/ ./ 此外/ ,/ LaScOLAP/ 没有/ 采用/ MapReduce/ 步步/ 物化/ 的/ 方式/ ,/ 而是/ 把/ 扫描/ 和/ 聚集/ 操作/ 用/ 流水线/ 方式/ 执行/ ,/ 因此/ 对/ 数据仓库/ 查询/ 执行/ 效率/ 更高/ ./ 文献/ [/ 3/ -/ 4/ ]/ 提出/ 用/ 维度/ 的/ 层次/ 编码/ 代替/ 星型/ (/ 雪花/ )/ 模型/ 中/ 的/ 主外键/ ,/ 并/ 基于/ 层次/ 编码/ 对/ 事实/ 表/ 进行/ 聚簇/ 存储/ ,/ 从而/ 将/ 星型/ (/ 雪花/ )/ 连接/ 转换/ 为/ 基于/ UB/ -/ Tree/ [/ 5/ ]/ 的/ 空间/ 范围/ 查询/ ./ 本文/ 也/ 采用/ 了/ 层次/ 编码/ 技术/ ,/ 但/ 与/ 之前/ 研究/ 相比/ ,/ 本文/ 侧重于/ 研究/ 利用/ 层次/ 编码/ 对/ 星型/ (/ 雪花/ )/ 模型/ 进行/ 改造/ ,/ 以/ 设计/ 扩展性/ 更好/ 的/ 数据模型/ ./ 同时/ 查询/ 的/ 处理/ 也/ 与/ 之前/ 研究/ 有所不同/ ,/ 本文/ 提出/ 的/ 是/ 一种/ 通用/ 的/ 查询处理/ 框架/ ,/ 不仅仅/ 是/ 针对/ ad/ -/ hoc/ 查询/ ./ 此外/ ,/ 从/ 编码/ 规则/ 上/ 来看/ ,/ 文献/ [/ 4/ -/ 5/ ]/ 采用/ 的/ 是/ 基于/ 层次/ 全局/ 域/ 的/ 方式/ —/ —/ —/ 层次/ 中/ 所有/ 成员/ 被/ 统一/ 编码/ ,/ 本文/ 中/ 编码方式/ 是/ 基于/ 层次/ 局部域/ 的/ 方式/ —/ —/ —/ 对/ 属于/ 同一个/ 父类/ 的/ 成员/ 统一/ 编码/ ./ 从/ 空间/ 上/ 来看/ ,/ 本文/ 的/ 编码方式/ 更加/ 节省/ 空间/ ./ 文中/ 提出/ 的/ 无/ 连接/ 雪花/ 模型/ 借鉴/ 了/ 泛关系/ 模式/ (/ UniversalRelation/ )/ [/ 6/ ]/ 的/ 思想/ ,/ 但/ 与其/ 不同/ 的/ 是/ ,/ 我们/ 的/ 模型/ 并/ 没有/ 将维表/ 的/ 所有/ 属性/ 都/ 放入/ 事实/ 表/ ,/ 而/ 只是/ 将维表/ 的/ 层次/ 信息/ 通过/ 编码/ 的/ 方式/ 压缩/ 进/ 事实/ 表/ ,/ 从而/ 更加/ 节省/ 空间/ ./ 星型/ (/ 雪花/ )/ 模型/ :/ 传统/ 的/ 星型/ 模型/ 或者/ 雪花/ 模型/ 都/ 是/ 依赖于/ 连接/ 操作/ 来/ 处理/ 查询/ ,/ 本文/ 中/ 的/ 无/ 连接/ 雪花/ 模型/ 是/ 基于/ 扫描/ 操作/ 来/ 处理/ 查询/ ./ IBM/ 的/ Blink/ [/ 7/ ]/ 系统/ 将/ 整个/ 星型/ (/ 雪花/ )/ 模型/ 预/ 连接/ 为/ 一张/ 大表/ ,/ 然后/ 将/ 连接/ 后/ 的/ 大表/ 根据/ 属性/ 值/ 出现/ 频率/ 划分/ 为/ 多个/ 单元/ ,/ 再/ 将/ 每个/ 单元/ 压缩/ 编码/ 为/ 二进制/ 形式/ ./ 在/ 执行/ 查询/ 时/ 从/ 每个/ 单元/ 的/ 头部/ 开始/ 解压/ 并/ 处理/ 每个/ 元组/ ./ 不同于/ Blink/ 系统/ ,/ LaScOLAP/ 只是/ 将/ 关键/ 的/ 维度/ 层次/ 信息压缩/ 进/ 事实/ 表/ ,/ 而/ 非/ 全部/ ./ 两者/ 压缩/ 的/ 技术/ 也/ 不同/ ,/ Blink/ 采用/ 基于/ 字典/ 的/ 压缩/ 技术/ ,/ 而/ LaScOLAP/ 采用/ 基于/ 层次/ 编码/ 的/ 压缩/ 技术/ ./ 同时/ LaScOLAP/ 可以/ 实现/ 多种/ 表/ 扫描/ 的/ 方式/ ,/ 比如/ 跳跃式/ 表/ 扫描/ 等/ ,/ 而/ Blink/ 系统/ 只能/ 提供/ 一种/ 全表/ 扫描/ 的/ 访问/ 方法/ ./ 但/ LaScOLAP/ 借鉴/ 了/ Blink/ 系统/ 中/ 通过/ 物化/ 手段/ 来/ 简化/ 复杂/ 星型/ 连接/ 操作/ 的/ 思想/ 和/ 并行/ 谓词/ 判断/ 算法/ ./ 3JFSS/ 逻辑/ 模型/ 3.1/ 基本概念/ OLAP/ 数据/ 主要/ 分为/ 度量/ 和/ 维度/ 两类/ ./ 度量/ (/ 或/ 事实/ )/ ,/ 主要/ 是/ 数值/ 型/ ,/ 随/ 时间/ 变化/ ,/ 对应/ 某/ 特定/ 时间/ 点/ 跟/ 某/ 事物/ 相关/ 的/ 值/ (/ 比如/ 银行/ 某天/ 的/ 存款额/ ,/ 某/ 地区/ 的/ 特定/ 年份/ 的/ 人口数/ 等/ )/ ;/ 维度/ 被/ 用来/ 描述/ 度量/ ,/ 通常/ ,/ 维度/ 几乎/ 是/ 静态/ 的/ ,/ 较少/ 随/ 时间/ 变化/ 的/ (/ 如/ 时间/ 、/ 地区/ 、/ 产品/ 等/ )/ ./ 维度/ 数据/ 通常/ 较/ 小/ ,/ 事实/ 数据/ 占据/ 绝大部分/ 空间/ ./ 事实/ 表/ 数据/ 往往/ 是/ 以/ 批量/ 方式/ 追加/ 进/ 数据仓库/ 的/ ./ 在/ ROLAP/ 中/ ,/ 每个/ 维度/ 通常/ 被/ 存储/ 在/ 一张/ 关系/ 表中/ (/ 称为/ 维表/ )/ ,/ 表中/ 属性/ 往往/ 代表/ 不同/ 的/ 层次/ 或者/ 某些/ 描述/ 信息/ ,/ 比如/ 时间/ 维度/ ,/ 可以/ 包含/ 年/ 、/ 月/ 、/ 日/ 等/ 不同/ 层次/ ,/ 同时/ 也/ 包含/ 某些/ 描述/ 信息/ ,/ 比如/ 是否/ 节假日/ 等/ ./ 不同/ 层次/ 往往/ 存在/ 包含/ 和/ 被/ 包含/ 关系/ ,/ 如年/ 包含/ 月/ ,/ 月/ 包含/ 日/ ./ 某些/ 情况/ 下/ ,/ 一个/ 层次/ 也/ 可以/ 被/ 多个/ 层次/ 包含/ ,/ 比如/ 层次/ 日/ 可以/ 被/ 层次/ 月/ 包含/ ,/ 也/ 可以/ 被/ 层次/ 星期/ 包含/ ./ 度量/ 被/ 存储/ 在/ 事实/ 表中/ ,/ 事实/ 表/ 通过/ 描述/ 度量/ 的/ 维/ 属性/ 同维表/ 建立/ 参照/ 完整性/ 约束/ 关系/ ./ 3.2/ JFSS/ 无/ 连接/ 雪花/ 模型/ 正如/ 前言/ 部分/ 提到/ 的/ ,/ 星型/ (/ 雪花/ )/ 模型/ 因为/ 复杂/ 连接/ 操作/ 的/ 存在/ 而/ 不/ 适合/ 大规模/ 机群/ 操作/ ./ 泛关系/ 模型/ 将/ 模型/ 中/ 所有/ 属性/ 集中/ 于/ 单个/ 关系/ ,/ 虽可/ 避免/ 连接/ 操作/ 但/ 却/ 付出/ 了/ 昂贵/ 的/ 存储空间/ 代价/ ./ Page4/ 数据仓库/ 查询/ 涉及/ 的/ 列/ 一般/ 为/ 维表中/ 的/ 层次/ 属性/ 和/ 事实/ 表/ 度量/ 属性/ (/ 非/ 层次/ 属性/ 上/ 的/ 操作/ 可以/ 转换/ 为/ 层次/ 属性/ 上/ 的/ 操作/ ,/ 我们/ 将/ 在/ 5.1/ ./ 3/ 节/ 讨论/ )/ ,/ 基于/ 数据/ 立方体/ 上/ 的/ 查询/ 即/ 是/ 例证/ ./ 基于/ 此/ ,/ JFSS/ (/ Join/ -/ FreeSnowflakeSchema/ )/ 模型/ 采取/ 了/ 如下/ 策略/ :/ 借鉴/ 泛关系/ 模式/ (/ universalrelation/ )/ 的/ 思想/ ,/ 将维表/ 信息/ 物化/ 到/ 事实/ 表/ ./ 但/ 与/ 泛关系/ 模型/ 不同/ 的/ 是/ ,/ JFSS/ 模型/ 没有/ 将/ 所有/ 属性/ 都/ 存入/ 事实/ 表/ ,/ 而是/ 将维表/ 层次/ 信息/ 通过/ 层次/ 编码/ 压缩/ 进/ 事实/ 表/ ./ JFSS/ 模式/ 可/ 被/ 看作/ “/ 准/ 泛关系/ ”/ 模型/ ./ JFSS/ 模型/ 的/ 详细/ 定义/ 如下/ ./ 定义/ 1/ (/ 层次/ 局部域/ )/ ./ 设/ L/ 是/ 维度/ D/ 的/ 一个/ 层次/ ,/ 其/ 所有/ 成员/ 的/ 集合/ 为/ 层次/ L/ 的/ 全局/ 域/ ./ 设/ 层次/ L/ 的/ 父类/ 层次/ 为/ PL/ (/ 最高/ 层次/ 的/ 父类/ 记为/ ALL/ )/ ,/ L/ 的/ 一个/ 局部域/ 是/ 指/ 同属/ 一个/ 父类/ (/ 记为/ p/ )/ 的/ L/ 层/ 成员/ 集合/ ,/ 记为/ localDomainPL/ =/ p/ (/ L/ )/ ./ 如图/ 1/ 所示/ ,/ localDomainPL/ =/ ‘/ China/ ’/ (/ City/ )/ =/ {/ Beijing/ ,/ HongKong/ ,/ Shanghai/ }/ ./ 层次/ 全局/ 域/ 是/ 多个/ 层次/ 局部域/ 的/ 合集/ ./ 定义/ 2/ (/ 局部/ 层次/ 码/ )/ ./ 设某/ 一/ 层次/ 的/ 局部域/ 成员/ 基数/ 为/ m/ ./ 我们/ 为此/ 局部域/ 定义/ 一个/ 一对一/ 的/ 映射函数/ S/ :/ localDomainPL/ =/ p/ (/ L/ )/ →/ [/ 0/ ,/ m/ ]/ ,/ 以/ 使/ 对于/ 每/ 一个/ u/ ,/ u/ ∈/ localDomainPL/ =/ p/ (/ L/ )/ ,/ 且/ u/ </ u/ ,/ 都/ 有/ S/ (/ u/ )/ </ S/ (/ u/ )/ ,/ S/ (/ u/ )/ 称为/ u/ 的/ 局部/ 层次/ 码/ ,/ 简记/ 为/ h/ _/ skeyD/ ./ L/ (/ u/ )/ ./ 本/ 研究/ 中/ ,/ 用/ 二进制/ 串来/ 表示/ 一个/ 局部/ 层次/ 码/ ,/ 对/ 一个/ 成员/ 基数/ 为/ m/ 的/ 层次/ 局部域/ 来说/ ,/ 共/ 需要/ [/ log2m/ ]/ 个/ 二进制位/ ./ 如图/ 1/ 所示/ ,/ China/ 节点/ 有/ 3/ 个/ 孩子/ 节点/ Beijing/ ,/ HongKong/ 和/ Shanghai/ ,/ 我们/ 可以/ 对/ 其/ 依次/ 编码/ 为/ 01/ ,/ 10/ 和/ 11/ ./ 定义/ 3/ (/ 全局/ 层次/ 码/ )/ ./ 每/ 一个/ 维度/ 都/ 对应/ 一棵/ 层次/ 树/ ./ 该/ 层次/ 树上/ 每/ 一个/ 节点/ 都/ 存在/ 一个/ 按照/ 先序/ 遍历/ 从根/ (/ 最高层/ 节点/ )/ 到/ 其/ 自身/ 的/ 路径/ ./ 我们/ 把/ 路径/ 上/ 每个/ 节点/ 的/ 局部/ 层次/ 码/ 连接/ 后/ 形成/ 的/ 码/ 称为/ 该/ 节点/ 的/ 全局/ 层次/ 码/ ,/ 维度/ D/ 的/ L/ 层/ 成员/ M/ 的/ 全局/ 层次/ 码记/ 为/ d/ _/ skeyD/ ./ L/ (/ M/ )/ ./ 如图/ 1/ 所示/ ,/ Osaka/ 的/ 局部/ 层次/ 码/ 01/ ,/ 其/ 在/ City/ 维度/ 中/ 的/ 全局/ 层次/ 码为/ 01.10/ ./ 01/ ./ 若/ 某/ 层次/ 成员/ 对应/ 多个/ 父类/ 节点/ (/ 比如/ 中国/ 按/ 地域/ 讲/ 属于/ 亚洲/ ,/ 但/ 从/ 经济/ 发展/ 水平/ 讲/ 又/ 属于/ 发展中国家/ )/ ,/ 到达/ 该/ 节点/ 的/ 路径/ 就/ 对应/ 多条/ ./ 对/ 其/ 编码/ 时/ ,/ 我们/ 先/ 将/ 到达/ 该/ 节点/ 的/ 所有/ 路径/ 抽取/ 出来/ ,/ 形成/ 一棵/ 子树/ ,/ 然后/ 按照/ 广度/ 优先/ 顺序/ 将/ 路径/ 上/ 每个/ 节点/ 的/ 局部/ 层次/ 码/ 进行/ 连接/ ,/ 即/ 形成/ 该/ 节点/ 的/ 全局/ 层次/ 码/ ./ 广度/ 优先/ 遍历/ 可以/ 保证/ 较/ 高/ 的/ 层次/ 在/ 编码/ 串中/ 处于/ 较前/ 的/ 位置/ ,/ 从而/ 获得/ 较/ 好/ 的/ 聚簇/ 效果/ (/ 详见/ 4.2/ ./ 1/ 节/ )/ ./ 特别/ 需要/ 指出/ 的/ 是/ ,/ 本文/ 中/ 的/ 层次/ 含义/ 更为/ 广泛/ —/ —/ —/ 维表中/ 的/ 属性/ 都/ 可以/ 被/ 看做/ 层次/ ./ 比如/ 如果/ 将/ 日期/ 维度/ (/ Year/ ,/ month/ ,/ isHolidayFlag/ ,/ dateKey/ )/ 中/ 的/ isHolidayFlag/ 属性/ 看做/ 一个/ 层次/ ,/ 则/ 其/ 对应/ 层次/ 树/ 的/ 层次/ 为/ dateKey/ →/ isHolidayFlag/ ./ 定义/ 4/ (/ 复合/ 层次/ 码/ )/ ./ 以/ 层次/ 为/ 粒度/ 、/ 按照/ 层次/ 由高到/ 低/ 的/ 顺序/ 对/ 多个/ 维度/ 的/ 全局/ 层次/ 码/ 交错/ 组合/ 后/ 的/ 编码/ 称为/ 复合/ 层次/ 码/ (/ 记为/ md/ _/ skey/ ,/ 下文/ 中/ 简记/ 为/ 复合/ 码/ )/ ./ 本文/ 根据/ 经验/ 设定/ 的/ 默认/ 编码/ 规则/ 为/ :/ 时间/ 维度/ 为/ 第/ 1/ 优先/ 维度/ ,/ 其他/ 维度/ 的/ 优先级/ 根据/ 其/ 成员数/ 确定/ ,/ 成员数/ 越/ 少/ 优先级/ 越高/ ./ 对/ 如图/ 2/ 所示/ 维度/ Time/ 、/ City/ 、/ Product/ 的/ 成员数/ 分别/ 为/ 500/ 、/ 200/ 、/ 50/ ,/ 3/ 个/ 维度/ 的/ 优先级/ 由高到/ 低/ 为/ Time/ →/ Product/ →/ City/ ,/ 其/ 对应/ 的/ 编码/ 规则/ 为/ Year/ ./ Product/ _/ Type/ ./ Region/ ./ YearMonth/ ./ Product/ ./ Nation/ ./ Date/ ./ City/ ,/ 如图/ 2/ 中/ 虚线/ 箭头/ 走向/ 所示/ ./ 层次/ 对应/ 一维/ 表/ ,/ 由/ 如/ 下列/ 组成/ :/ 层次/ 码/ md/ _/ skey/ ;/ 点到/ 该/ 节点/ 的/ 路径/ 上/ 的/ 编码/ 组合/ ;/ JFSS/ 模型/ 同样/ 包括/ 维表/ 和/ 事实/ 表/ 两种/ 表/ ./ 每一/ (/ 1/ )/ 全局/ 层次/ 码/ (/ d/ _/ skey/ )/ ./ 维度/ 层次/ 树上/ 由/ 最高/ (/ 2/ )/ 原维表中/ 函数/ 依赖于/ 该/ 层次/ 的/ 其他/ 属性/ ./ 事实/ 表/ 包含/ 的/ 列/ 信息/ 如下/ :/ (/ 1/ )/ 该/ 事实/ 表/ 参照/ 的/ 各个/ 维度/ 组合而成/ 的/ 复合/ (/ 2/ )/ 原/ 事实/ 表中/ 其他/ 属性/ ,/ 主要/ 是/ 度量/ 信息/ ./ 事实/ 表中/ 采用/ 复合/ 层次/ 码/ 可以/ :/ (/ 1/ )/ 减少/ 表示/ Page5/ 二进制/ 字段/ 时/ 的/ 二进制位/ 数/ 的/ 浪费/ (/ 1/ 个/ 二进制位/ 也/ 需要/ 用/ 一个/ 字节/ 存储/ )/ ,/ 从而/ 更加/ 节省/ 空间/ ;/ (/ 2/ )/ 进行/ 更加/ 有效/ 的/ 谓词/ 判断/ 算法/ ,/ 如/ 批量/ 谓词/ 判断/ 、/ 并行/ 谓词/ 判断/ 等/ ;/ (/ 3/ )/ 提供/ 更加/ 有效/ 的/ I/ // O/ 访问/ (/ 排序/ 后/ ,/ 数据/ 自然/ 就/ 形成/ 聚簇/ ./ 详见/ 4.2/ ./ 1/ 节/ )/ ./ 出于/ 对/ 存图/ 3/ 无/ 连接/ 雪花/ 模型/ 同/ 经典/ 星型/ 模型/ 的/ 对比/ 此外/ ,/ 维表/ 虽然/ 较/ 少/ 变化/ ,/ 但/ 一旦/ 变化/ ,/ 即/ 可能/ 影响/ 到/ 事实/ 表/ 数据/ ./ 因此/ ,/ 维表/ 更新/ 后/ 的/ 高效/ 数据/ 同步/ 算法/ 是/ 我们/ 未来/ 的/ 重点/ 研究/ 内容/ 之一/ ./ 4/ 物理/ 存储/ 模型/ 通常/ 情况/ 下/ ,/ 维表所/ 占/ 存储空间/ 较/ 少/ (/ 以/ StarSchemaBenchmark/ (/ SSB/ )/ 标准/ 测试/ 集/ 30GB/ 数据/ 为例/ ,/ 维表/ 只/ 占/ 1.1/ %/ )/ ./ 在/ JFSS/ 模型/ 中/ ,/ 事实/ 表已/ 含储/ 空间/ 考虑/ ,/ 事实/ 表中/ 的/ 原外键/ 字/ 段/ 可以/ 删除/ ./ 图/ 3/ 举例/ 对比/ 了/ 星型/ 模型/ 和/ 无/ 连接/ 雪花/ 模型/ 之间/ 的/ 对应/ 关系/ ./ 从中/ 可以/ 看出/ ,/ 后者/ 事实/ 表/ 已经/ 包含/ 了/ 所有/ 维度/ 的/ 层次/ 信息/ ,/ 从而/ 使/ 基于/ 事实/ 表/ 扫描/ 的/ 处理/ 方式/ 成为/ 可能/ ./ 维表/ 主要/ 信息/ ,/ 可以/ 独立/ 处理/ 数据/ ./ 基于/ 此/ ,/ 我们/ 采用/ 了/ 主/ -/ 从/ 架构/ 来/ 存储/ 事实/ 表和维表/ ./ 维表/ 集中/ 存储/ 于主/ 节点/ ,/ 事实/ 表/ 均匀分布/ 于/ 各个/ 从/ 节点/ (/ 文中/ 也/ 称为/ 数据/ 节点/ )/ ./ 4.1/ 维表/ 存储/ 策略/ 在/ 设计/ 维表/ 的/ 存储/ 策略/ 时/ ,/ 我们/ 主要/ 考虑/ 了/ 如下/ 两点/ :/ (/ 1/ )/ 维表/ 数据量/ 通常/ 较/ 小/ (/ 一般/ 至多/ 属于/ GB/ 级/ )/ ,/ 且/ 访问/ 频度/ 高/ (/ 几乎/ 所有/ 查询/ 均会/ 涉及/ 维表/ 访问/ )/ ;/ (/ 2/ )/ 当前/ 服务器/ 内存/ 至少/ 都/ 是/ GB/ 级/ ,/ 某些/ Page6/ 已达/ TB/ 级/ ./ 因此/ ,/ 维表/ 基本/ 可以/ 全部/ 放入/ 主/ 节点/ 的/ 内存/ 中/ ,/ 从而/ 避免/ I/ // O/ 操作/ ./ 少数/ 内存/ 不足以/ 存放/ 所有/ 维表/ 的/ 情况/ 下/ ,/ 此时/ 可/ 借助于/ 外存/ ,/ 同时/ 可/ 利用/ 索引/ 来/ 提高/ 维表/ 访问速度/ ./ 4.2/ 事实/ 表/ 存储/ 策略/ 事实/ 表/ 的/ 访问/ 性能/ 决定/ 了/ 整个/ 查询/ 的/ 性能/ ,/ 因此/ 针对/ 事实/ 表/ 存储/ 我们/ 采取/ 了/ 如下/ 一系列/ 优化/ 措施/ ./ 4.2/ ./ 1/ 分布式/ 存储/ 策略/ 在/ 预处理/ 阶段/ 我们/ 根据/ 事实/ 表/ 的/ 复合/ 码对/ 事实/ 表/ 进行/ 排序/ ,/ 排序/ 后/ 记录/ 自然/ 形成/ 的/ 聚簇/ ,/ 而且/ 层次/ 越高聚/ 簇/ 效果/ 越/ 明显/ ./ 比如/ 复合/ 码/ 按照/ 年/ ./ 省份/ ./ 月/ ./ 地区/ ./ 日期/ 的/ 编码/ 规则/ 排序/ 后/ ,/ 同/ 年份/ 的/ 相关/ 查询/ 会/ 得到/ 最好/ 的/ 聚簇/ 效果/ ,/ 其后/ 层次/ 聚簇/ 效果/ 依次/ 减弱/ ,/ 最底层/ 的/ 日期/ 的/ 聚簇/ 效果/ 最差/ ./ 如/ 在/ 3.1/ 节/ 描述/ ,/ 事实/ 表/ 数据/ 往往/ 是/ 随/ 时间/ 变化/ 、/ 以/ 批量/ 方式/ 追加/ 进/ 系统/ 的/ ./ 因此/ ,/ 在/ LaScOLAP/ 的/ 实现/ 中/ ,/ 我们/ 将/ 时间/ 相关/ 维度/ 作为/ 第/ 1/ 优先/ 维度/ ,/ 以/ 实现/ 增量/ 式/ 的/ 排序/ 效果/ :/ 新/ 加入/ 的/ 数据/ 经/ 排序/ 后/ 自然/ 排/ 在/ 所有/ 数据/ 的/ 后面/ ./ 因此/ 我们/ 每次/ 只/ 需/ 对/ 新/ 加入/ 的/ 数据/ 单独/ 排序/ ,/ 然后/ 追加/ 进/ 系统/ 即可/ ,/ 从而/ 大大降低/ 排序/ 的/ 代价/ ./ 对于/ 极少数/ 情况/ 下/ ,/ 时间/ 顺序/ 和/ 数据/ 加载/ 顺序/ 不/ 完全一致/ 时/ ,/ 往往/ 需要/ 在/ 加载/ 后/ 执行/ 一次/ 全局/ 排序/ 操作/ ./ 基于/ 排序/ 聚簇/ 后/ 的/ 事实/ 表/ ,/ 我们/ 将/ 其/ 划分/ 为/ 多个/ chunk/ ,/ 每个/ chunk/ 包含/ 若干块/ ,/ 然后/ 以/ round/ -/ robin/ 方式/ ,/ 以/ chunk/ 为/ 单位/ 在/ 节点/ 间/ 循环/ 布局/ ,/ 如图/ 4/ 所示/ ./ 数据/ 的/ 备份/ 也/ 以/ chunk/ 为/ 单位/ 采用/ 类似/ MapReduce/ 的/ 备份/ 策略/ ./ 图/ 6TRM/ 执行/ 模型/ 4.2/ ./ 2/ 物理/ 块/ 存储/ 优化/ 〈/ key/ ,/ value/ 〉/ 存储/ ./ 绝大多数/ 星型/ (/ 雪花/ )/ 查询/ 中/ 出现/ 的/ 谓词/ 操作/ 都/ 是/ 基于/ 维度/ 层次/ 的/ ,/ 聚集/ 操作/ 也/ 大多/ 如此/ (/ 如/ MOLAP/ 中/ 的/ 多维/ 查询/ )/ ./ 在/ 分析/ 型/ 领域/ ,/ 列/ 存储/ 往往/ 优于/ 行/ 存储/ ./ 基于/ 以上/ 分析/ ,/ LaScOLAP/ 采用/ 了/ 类似/ 〈/ key/ ,/ value/ 〉/ 形式/ 的/ 列式/ 存储/ 模型/ :/ key/ 为/ 复合/ 码/ md/ _/ skey/ ,/ value/ 为/ 事实/ 表中/ 的/ 除/ 复合/ 码外/ 的/ 某/ 一/ 属性/ 值/ ./ 事实/ 表中/ value/ 大多/ 为定/ 长/ 类型/ (/ 数值/ 型/ )/ ,/ 出于/ 空间/ 考虑/ ,/ 我们/ 只/ 在/ 每/ 一个/ 块/ 的/ 头部/ 存储/ key/ 的/ 二进制位/ 数/ 、/ value/ 类型/ 及/ 长度/ 等/ ,/ 从而/ 省下/ 大量/ 的/ 记录/ 指针/ 等/ 信息/ 的/ 存储空间/ ./ 同时/ ,/ 数据类型/ 信息/ 等/ 存储/ 在/ 块/ 内/ ,/ 可以/ 为/ 数据/ 的/ 存储/ 分布/ 带来/ 极大/ 的/ 灵活性/ ./ 对于/ 占/ 少数/ 的/ 不定/ 长/ 数据类型/ ,/ 仍/ 采用/ 传统/ 的/ Page/ -/ slot/ 存储/ 方式/ ./ 前缀/ 压缩/ 存储/ ./ 压缩/ 可以/ 有效/ 改善/ I/ // O/ 性能/ ,/ 节省/ 磁盘空间/ ./ 事实/ 表/ 按照/ key/ 值/ 排序/ 后/ ,/ 相邻/ 元组/ 的/ key/ 值/ 往往/ 含有/ 较/ 多/ 的/ 相同/ 二进制位/ ,/ 意味着/ 我们/ 可/ 采用/ 基于/ 块/ 的/ 前缀/ 压缩算法/ :/ 将/ 每/ 一块/ 的/ 第/ 1/ 条/ 记录/ 存储/ 完整/ 的/ key/ 值/ ,/ 紧邻/ 的/ 后续/ 元组/ 只/ 存储/ 同/ 前/ 一条/ 元组/ 不同/ 的/ 位串/ (/ 示例/ 见图/ 5/ )/ ./ 图/ 5/ 相邻/ 元组/ 压缩/ 后/ 存储/ 示例/ (/ v1/ ,/ v2/ 为/ 度量/ 值/ )/ 5TRM/ 执行/ 模型/ LaScOLAP/ 按照/ 统一/ 的/ 执行/ 模型/ TRM/ (/ Trans/ -/ form/ -/ Reduce/ -/ Merge/ )/ 处理/ 所有/ 的/ 查询/ ./ 其/ 框架/ 如图/ 6/ 所示/ ./ 当/ 一个/ SQL/ 查询/ 到达/ 时/ ,/ 主/ 节点/ 上/ 的/ Transform/ 模块/ 将/ 所有/ 维度/ 上/ 的/ 操作/ 都/ 转换/ 为/ 事实/ 表/ 复合/ 码上/ 的/ 操作/ ./ 然后/ 将/ 转换/ 后/ 的/ 查询/ 下发/ 至/ 各个/ 数据/ 节点/ ,/ 各个/ 数据/ 节点/ 独立/ 并行/ 地/ 执行/ 本地/ 数据/ 的/ Reduce/ 操作/ —/ —/ —/ 扫描/ 、/ 聚集/ 、/ 排序/ ,/ 并/ 将/ 聚集/ 排序/ 后/ 的/ 数据/ 返回/ 到/ 主/ 节点/ ,/ 最后/ 由主/ 节点/ 进行/ 数/ Page7/ 据/ 的/ 合并/ 、/ 代码/ 翻译/ 及/ 排序/ 等/ 后续/ 操作/ ./ 数据仓库/ 的/ 聚集/ 查询/ 往往/ 具有/ 高/ 输入/ 低/ 输出/ 的/ 特点/ (/ 以/ SSB/ 基准/ 测试/ 中/ 查询/ 为例/ ,/ 在/ 30GB/ 的/ 数据量/ 下/ ,/ 所有/ 查询/ 的/ 输出/ 记录/ 都/ 在/ 1000/ 条/ 以下/ ,/ 所/ 占/ 空间/ 不/ 超过/ 100KB/ )/ ,/ 因此/ 网络/ 传输/ 量/ 也/ 被/ 降至/ 最低/ ./ 5.1/ Transform/ 下/ 我们/ 的/ 讨论/ 集中/ 于/ 合取范式/ ./ 5.1/ ./ 1/ 等值/ 谓词/ 判断/ 转换/ 所有/ 谓词/ 项/ 都/ 是/ 等式/ 判断/ 的/ 谓词/ 称为/ 等值/ 谓词/ ./ 我们/ 将/ 等值/ 谓词/ 判断/ 转换/ 为/ 如下/ 二进制/ 操作/ :/ 析取范式/ 可以/ 表示/ 为/ 多个/ 合取范式/ 的/ 并/ 集/ ,/ 如/ mask/ _/ et/ ./ md/ _/ skey/ =/ constant/ _/ e/ 掩码/ mask/ _/ e/ 用于/ 抽取/ 谓词/ 中/ 涉及/ 到/ 的/ 层次/ ./ constant/ _/ e/ 是/ 由/ 谓词/ 中/ 涉及/ 到/ 的/ 层次/ 的/ 期望值/ 组成/ 的/ 二进制/ 串/ ./ 以图/ 3/ 中/ JFSS/ 模型/ 为例/ ./ 等值/ 谓词/ 判断/ d/ ./ year/ =/ 1996andc/ ./ region/ =/ ‘/ Asia/ ’/ ,/ 其/ 对应/ 的/ mask/ _/ e/ =/ ‘/ 11.11/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ,/ constant/ _/ e/ =/ ‘/ 11.01/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ./ 其/ 转换/ 后/ 的/ 谓词/ 判断/ 为/ md/ _/ skey/ &/ ‘/ 11.11/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ =/ ‘/ 11.01/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ./ 5.1/ ./ 2/ 范围/ 谓词/ 判断/ 转换/ 含有/ 不等式/ 谓词/ 项/ 的/ 谓词/ 称为/ 范围/ 谓词/ ./ 值得/ 指出/ 的/ 是/ ,/ 范围/ 谓词/ 也/ 可能/ 含有/ 等式/ 谓词/ 项/ ./ 因此/ ,/ 范围/ 谓词/ 被/ 转换/ 为/ 一个/ 含有/ 两个/ 谓词/ 判断/ 的/ 新/ 合取范式/ :/ 一个/ 是/ 等值/ 谓词/ 项/ ,/ 用于/ 判断/ 该/ 合取范式/ 中/ 的/ 所有/ 等值/ 谓词/ ;/ 另/ 一个/ 是/ 范围/ 谓词/ 项/ ,/ 用于/ 判断/ 此/ 合取范式/ 中/ 的/ 所有/ 不等式/ 谓词/ 项/ ./ 在/ 此/ ,/ 我们/ 详细/ 讨论/ 后者/ ./ 一个/ 合取范式/ 中/ 的/ 所有/ 不等式/ 谓词/ 项/ 被/ 转换/ 为/ 两个/ 二进制/ 串/ ,/ constant/ _/ max/ 和/ constant/ _/ min/ ./ con/ -/ stant/ _/ max/ 由/ 谓词/ 中/ 涉及/ 到/ 的/ 层次/ 的/ 上/ 限值/ 按照/ 复合/ 编码/ 的/ 编码/ 规则/ 组合而成/ ,/ 代表/ 满足/ 谓词/ 判断/ 的/ 元组/ 的/ 最大值/ ;/ 对应/ 地/ ,/ constant/ _/ min/ 由/ 谓词/ 涉及/ 到/ 的/ 层次/ 的/ 下/ 限值/ 组合而成/ ,/ 代表/ 满足/ 谓词/ 判断/ 的/ 元组/ 的/ 最小值/ ./ 没有/ 出现/ 在/ 合取范式/ 中/ 的/ 层次/ 相应/ 位用/ 全/ 0/ 代替/ ./ 同样/ 也/ 产生/ 一个/ 掩码/ mask/ _/ r/ 来/ 抽取/ 该/ 谓词/ 判断/ 中/ 涉及/ 到/ 的/ 层次/ ./ 对于/ 每/ 一个/ 元组/ t/ 执行/ 如下/ 谓词/ 判断/ :/ (/ mask/ _/ et/ ./ md/ _/ skey/ =/ constant/ _/ e/ )/ and/ (/ (/ mask/ _/ rt/ ./ md/ _/ skey/ )/ betweenconstant/ _/ minandconstant/ _/ max/ )/ ./ 仍/ 以图/ 3/ 中/ JFSS/ 模型/ 为例/ ./ 范围/ 谓词/ 判断/ d/ ./ year/ / 1994andd/ ./ year/ / 1996andc/ ./ region/ =/ ‘/ Asia/ ’/ ,/ 其/ 对应/ 的/ mask/ _/ e/ 为/ ‘/ 00.11/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ,/ constant/ _/ e/ 为/ ‘/ 00.01/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ,/ mask/ _/ r/ 为/ ‘/ 11.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ,/ constant/ _/ min/ 为/ ‘/ 01.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ,/ constant/ _/ max/ 为/ ‘/ 11.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ./ 转换/ 后/ 的/ 谓词/ 判断/ 为/ md/ _/ skey/ &/ ‘/ 00.11/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ =/ ‘/ 00.01/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ andmd/ _/ skey/ &/ ‘/ 11.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ between/ ‘/ 01.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ and/ ‘/ 11.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ ./ 5.1/ ./ 3/ 列表/ 谓词/ 判断/ 转换/ 对于/ Like/ 、/ In/ 等/ 列表/ 谓词/ 判断/ ,/ 其/ 转换/ 只是/ 简单/ 的/ 代码/ 替换/ ,/ 然后/ 将/ 替换/ 后/ 的/ 代码/ 下发/ 至/ 各个/ 数据/ 节点/ ,/ 由/ 各个/ 数据/ 节点/ 在/ 扫描/ 时/ 进行/ 谓词/ 判断/ ./ 对于/ 基于/ 维表上/ 其他/ 描述/ 信息/ 的/ 谓词/ 判断/ 我们/ 也/ 采取/ 类似/ 于/ In/ 列表/ 的/ 转换/ 手段/ ,/ 将/ 符合条件/ 的/ 维度/ 成员/ 的/ 全局/ 层次/ 码/ 下发/ 到/ 各个/ 数据/ 节点/ ./ 5.1/ ./ 4Groupby/ 转换/ Groupby/ 语句/ 的/ 转换/ 比较简单/ ,/ 只/ 需要/ 产生/ 一个/ 用于/ 抽取/ groupby/ 语句/ 中/ 涉及/ 到/ 的/ 层次/ 的/ 掩码/ 即可/ (/ 记为/ mask/ _/ group/ )/ ,/ 对/ 每/ 一个/ 元组/ t/ 执行/ 5.1/ ./ 5/ 一个/ 完整/ 的/ 转换/ 例子/ groupbyt/ ./ md/ _/ skey/ &/ mask/ _/ group/ ./ 如下/ 基于/ 图/ 3/ 中/ JFSS/ 模型/ 的/ 星型/ 查询/ :/ selectd/ ./ year/ ,/ c/ ./ nation/ ,/ sum/ (/ revenue/ )/ fromfact/ ,/ d/ _/ date/ ,/ d/ _/ customerwhered/ ./ year/ / 1994andd/ ./ year/ / 1996andc/ ./ region/ =/ ‘/ Asia/ ’/ groupbyd/ ./ year/ ,/ c/ _/ nation/ 转换/ 后/ 的/ Reducer/ 可用/ SQL/ 伪/ 表达/ 为/ :/ selectmd/ _/ skey/ &/ ‘/ 11.11/ ./ 00.11/ ./ 00.00/ ./ 0/ ’/ ,/ sum/ (/ revenue/ )/ fromfactwhere/ (/ md/ _/ skey/ &/ ‘/ 00.11/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ =/ ‘/ 00.01/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ )/ and/ (/ md/ _/ skey/ &/ ‘/ 11.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ between/ ‘/ 01.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ and/ ‘/ 11.00/ ./ 00.00/ ./ 00.00/ ./ 0/ ’/ )/ groupbymd/ _/ skey/ &/ ‘/ 11.11/ ./ 00.11/ ./ 00.00/ ./ 0/ ’/ 5.2/ Reduce/ 转换/ 后/ 的/ 查询/ 被/ 下发/ 到/ 各个/ 数据/ 节点/ ./ 每个/ 数据/ 节点/ 按照/ 如下/ 流水线/ 方式/ 执行/ 本地/ 数据/ 的/ 处理/ :/ 扫描/ →/ 聚集/ →/ 排序/ ./ 谓词/ 的/ 判断/ 和/ 聚集/ 操作/ 都/ 是/ 基于/ 复合/ 码/ 进行/ 的/ ./ 其中/ 扫描/ 是/ 最/ 耗时间/ 的/ ,/ 我们/ 采用/ 了/ 多种/ 技术手段/ 及/ 算法/ 来/ 提高/ 扫描/ 性能/ ./ 5.2/ ./ 1/ 并行/ 谓词/ 判断/ 并行/ 谓词/ 判断/ 是/ 系统/ 默认/ 的/ 谓词/ 判断/ 方式/ ./ 同/ Page8/ 传统/ 的/ one/ -/ by/ -/ one/ 谓词/ 判断/ 方式/ 相比/ ,/ 并行/ 谓词/ 判断/ 能/ 同时/ 执行/ 多个/ 谓词/ 项/ 的/ 判断/ ./ 相比/ 于/ Blink/ 中/ 的/ 谓词/ 判断/ 算法/ [/ 7/ ]/ ,/ 我们/ 的/ 算法/ 不用/ 区分/ 偶数/ 列/ 和/ 奇数/ 列/ ./ 对于/ 等值/ 谓词/ 判断/ 只/ 需要/ 执行/ 5.1/ ./ 1/ 节中/ 转换/ 后/ 的/ 谓词/ 判断/ 即可/ ,/ 所有/ 的/ 等值/ 谓词/ 都/ 是/ 通过/ 一次/ 二进制位/ 操作/ 完成/ 的/ ;/ 对于/ 范围/ 谓词/ 判断/ ,/ 按照/ 5.1/ ./ 2/ 节/ 转换/ 后/ 的/ 谓词/ 执行/ ,/ 所有/ 的/ 谓词/ 判断/ 至多/ 需要/ 一次/ 等值/ 谓词/ 判断/ 和/ 一次/ 范围/ 谓词/ 判断/ ./ 5.2/ ./ 2/ 批量/ 谓词/ 判断/ 算法/ 批量/ 谓词/ 判断/ 用于/ 压缩/ 数据/ ./ 当/ 采用/ 压缩/ 格式/ 存储/ 数据/ 时/ ,/ 相邻/ 元组/ 的/ 高位/ 是/ 相同/ 的/ ,/ 作用/ 在/ 相邻/ 元组/ 的/ 共同/ 位上/ 的/ 谓词/ ,/ 其/ 执行/ 结果/ 也/ 是/ 相同/ 的/ ,/ 此时/ 只/ 需要/ 执行/ 一次/ 谓词/ 判断/ ,/ 后续/ 元组/ 上/ 的/ 谓词/ 判断/ 便/ 可以/ 跳过/ 不再/ 执行/ ,/ 也/ 不用/ 解压/ 操作/ ./ 以图/ 5/ 中/ 两个/ 元组/ 为例/ ,/ 第/ 2/ 个/ 元组/ 的/ 前/ 25/ 位/ 和/ 第一个/ 元组/ 前/ 25/ 位/ 相同/ ,/ 因此/ 当/ 谓词/ 判断/ 作用/ 于/ 前/ 25/ 位时/ ,/ 如果/ 第/ 1/ 个/ 元组/ 符合条件/ ,/ 第/ 2/ 个/ 元组/ 也/ 符合/ ,/ 可以/ 不再/ 执行/ 谓词/ 判断/ ./ 同理/ ,/ 如果/ 第/ 1/ 个/ 元组/ 不/ 符合条件/ ,/ 第/ 2/ 个/ 元组/ 也/ 不/ 符合/ ,/ 同样/ 也/ 可以/ 不再/ 执行/ 谓词/ 判断/ ./ 排序/ 后/ 的/ 事实/ 表/ ,/ 越/ 高层/ 编码/ 重复/ 片段/ 越长/ (/ 只有/ 最底层/ 的/ 没有/ 重复/ 片段/ )/ ,/ 因此/ ,/ 批量/ 谓词/ 判断/ 可以/ 显著/ 加速/ 复杂/ 谓词/ 判断/ 的/ 执行/ ./ 5.2/ ./ 3/ 跳跃式/ 扫描/ 数据仓库/ 中/ 的/ 查询/ 选择率/ 往往/ 较/ 低/ ,/ 在/ 用/ 基于/ 扫描/ 的/ 处理/ 方式/ 时/ ,/ 大部分/ I/ // O/ 都/ 可能/ 是/ 浪费/ 的/ ./ 为了/ 加速/ 数据/ 的/ 访问/ ,/ 可以/ 考虑/ 在/ 〈/ key/ ,/ value/ 〉/ 上/ 建立/ 索引/ ./ 度量/ 属性/ 上/ 的/ 索引/ 可/ 直接/ 利用/ 通常/ 的/ 索引/ 技术/ ,/ 本文/ 不再/ 深入/ 讨论/ ;/ 但/ 若/ 在/ 复合/ 码上/ 建立/ 通常/ 的/ 一维/ 索引/ (/ B/ +/ 树/ 等/ )/ 却是/ 不/ 可行/ 的/ :/ 复合/ 码/ 形式/ 上/ 是/ 一个/ 普通/ 字/ 段/ ,/ 但/ 本质/ 上/ 是/ 一个/ 多维/ 信息/ 的/ 组合/ ;/ 而且/ 数据仓库/ 中/ 的/ 查询/ 往往/ 只/ 涉及/ 部分/ 层次/ ,/ 从而/ 导致/ 索引/ 建立/ 顺序/ 和/ 查找/ 顺序/ 极有/ 可能/ 是/ 不/ 一致/ 的/ ./ 比如/ ,/ 我们/ 为/ 以图/ 2/ 的/ 编码/ 规则/ 形成/ 的/ 复合/ 码/ 建立/ 了/ B/ +/ 树/ 索引/ 后/ ,/ 当/ 我们/ 查找/ Region/ =/ ‘/ Asia/ ’/ 的/ 记录/ 时/ ,/ 由于/ 只/ 比较/ 该/ 复合/ 码中/ 的/ Region/ 层次/ 对应/ 的/ 子/ 编码/ ,/ 该/ B/ +/ 树/ 也/ 就/ 无法/ 处理/ ./ 为此/ ,/ 本文/ 提出/ 了/ 跳跃式/ 扫描/ 算法/ ./ 跳跃式/ 扫描/ 是/ 基于/ 有序/ 数据/ 、/ 相对/ 于/ 顺序/ 扫描/ 提出/ 的/ ,/ 其/ 核心思想/ 是/ 尽量/ 多地/ 跳/ 过/ 与/ 查询/ 无关/ 的/ 数据/ 块/ ./ 为/ 达到/ 此/ 目的/ ,/ 我们/ 将/ 每/ 一块/ 的/ 第/ 1/ 条/ 记录/ 抽取/ 出来/ 形成/ 一张/ 跳跃/ 表/ ,/ 查询/ 时/ 根据/ 跳跃/ 表项/ 和/ 谓词/ 来/ 判断/ 哪些/ 块/ 可能/ 存在/ 符合条件/ 的/ 记录/ ,/ 同时/ 排除/ 不/ 可能/ 存在/ 符合条件/ 记录/ 的/ 数据/ 块/ ,/ 从而/ 减少/ I/ // O/ 操作/ ./ 跳跃式/ 扫描/ 算法/ 主要/ 包括/ 两个/ 步骤/ :/ (/ 1/ )/ 产生/ 可能/ 包含/ 地址/ 块/ 的/ 地址/ 候选/ 集/ ;/ (/ 2/ )/ 基于/ 候选/ 集/ 进行/ 数据/ 的/ 访问/ ./ 定义/ 5/ (/ 最小/ 候选/ 码/ )/ ./ 大于/ 等于/ 当前/ 复合/ 码/ 并且/ 符合/ 谓词/ 条件/ 的/ 最小/ 复合/ 码/ ,/ 简记/ 为/ 最小/ 候选/ 码/ ,/ 简记/ 为/ MCCode/ ./ 最小/ 候选/ 码/ 举例/ ./ 假设/ 一个/ 复合/ 码含/ 四个/ 层次/ ,/ 每一/ 层次/ 的/ 局部/ 编码/ 的/ 值/ 范围/ 分别/ 为/ [/ 1/ ,/ 4/ ]/ ,/ [/ 1/ ,/ 7/ ]/ ,/ [/ 1/ ,/ 10/ ]/ ,/ [/ 1/ ,/ 15/ ]/ ./ 要/ 在/ 该/ 复合/ 码中/ 查找/ 等于/ / ./ 2/ / ./ 3/ 的/ 记录/ (/ / 代表/ 任意/ 值/ )/ ,/ 那么/ 复合/ 码/ 1.3/ ./ 2.3/ 的/ 最小/ 候选/ 码为/ 2.2/ ./ 1.3/ ,/ 表示/ 大于/ 等于/ 1.3/ ./ 2.3/ 并且/ 各层/ 等于/ / ./ 2/ ./ / ./ 3/ 谓词/ 的/ 最小/ 复合/ 码/ ./ 若/ 谓词/ 判断/ 为/ 范围/ 谓词/ 判断/ ,/ 为/ 查找/ 第/ 2/ 个/ 层次/ 介于/ 2/ 和/ 4/ 之间/ ,/ 第/ 4/ 个/ 层次/ 等于/ 2/ 的/ 记录/ ,/ 那么/ 复合/ 码/ 2.5/ ./ 3.2/ 的/ 最小/ 候选/ 码为/ 3.2/ ./ 1.2/ ./ 在/ 复合/ 码/ 2.5/ ./ 3.2/ 中/ ,/ 第/ 2/ 个/ 层次/ 5/ 已/ 不/ 在/ 要求/ 的/ 2/ 和/ 4/ 范围/ 之内/ ,/ 所以/ 求其/ MCCode/ 时/ ,/ 需向/ 高层次/ 进一/ ,/ 同时/ 置/ 其他/ 值为/ 最小值/ ./ 最小/ 候选/ 码/ 的/ 求解/ 算法/ 见/ 算法/ 1/ ./ 算法/ 1/ 首先/ 根据/ 谓词/ 判断/ ,/ 提取/ 出/ 每/ 一/ 层次/ 的/ 上/ 限值/ ,/ 按照/ 复合/ 码/ 编码/ 顺序/ 组合成/ uprKey/ ;/ 同理/ ,/ 提取/ 出/ 所有/ 下/ 限值/ 组成/ lowKey/ (/ 行/ 1/ ~/ 2/ )/ ,/ 然后/ 从/ 最高层/ 到/ 最低/ 层/ ①/ 依次/ 设置/ MCCode/ 每/ 一层/ 的/ h/ _/ skey/ :/ 如果/ 参数/ key/ 中/ 的/ 当前/ 层次/ 的/ h/ _/ skey/ 小于/ 对应/ 的/ lowKey/ 中/ 的/ h/ _/ skey/ 值/ ,/ 将/ 所有/ 低于/ 或/ 等于/ 当前/ 层次/ 的/ 层次/ 置/ 为/ lowKey/ 中/ 对应/ 的/ h/ _/ skey/ (/ 行/ 4/ ~/ 6/ )/ ;/ 如果/ 其/ h/ _/ skey/ 大于/ uprKey/ 中/ 对应/ 的/ h/ _/ skey/ ,/ 将/ 继续/ 往/ 高层/ 查找/ 直至/ 找到/ 某一/ 层次/ h/ _/ skey/ 增加/ 1/ 后/ 仍/ 在/ 其/ 对应/ 范围/ 内/ (/ 行/ 8/ ~/ 10/ )/ ,/ 然后/ 将/ 该/ 层/ 及/ 低于/ 该层/ 的/ 所有/ h/ _/ skey/ 置/ 为/ 最小值/ (/ 行/ 11/ ~/ 12/ )/ ./ 如果/ 到达/ 最高/ 层次/ 后/ ,/ 仍/ 无/ 层次/ 增/ 1/ 后/ 在/ 其/ 范围/ 内/ ,/ 说明/ 该/ key/ 值/ 大于/ 最大/ 的/ MCCode/ ,/ 也/ 即/ 该/ key/ 不/ 存在/ 对应/ 的/ MCCode/ ./ 算法/ 1/ ./ CalMCCode/ ./ 输入/ :/ key/ ,/ predicates/ 输出/ :/ MCCode1/ ./ HierarchylowKey/ [/ ]/ ·/ ·/ =/ genLowBnd/ (/ predicates/ )/ 2/ ./ HierarchyuprKey/ [/ ]/ ·/ ·/ =/ genUprBnd/ (/ predicates/ )/ 3/ ./ pos/ ·/ ·/ =/ getFirstHierarchyNotInRange/ (/ key/ ,/ predicates/ )/ 4/ ./ IFpos/ >/ 0/ // // h/ _/ skey/ </ itslowboundTHEN5/ ./ FOREACHlow/ _/ hINpos/ …/ lowest/ _/ hrchyDO6/ ./ key/ [/ low/ _/ h/ ]/ ·/ ·/ =/ lowKey/ [/ h/ ]/ 7/ ./ ELSEIFpos/ </ 0THEN/ // // h/ _/ skey/ / itsupperbound/ ①/ 维度/ 层次/ 中/ 的/ 高低/ 依据/ 层次/ 树中/ 的/ 层次/ 定/ ./ 比如/ 时间/ 维度/ Page98/ ./ FOREACHhIN/ [/ pos/ ]/ +/ 1/ …/ highest/ _/ hrchyDO9/ ./ IFlowKey/ [/ h/ ]/ / key/ [/ h/ ]/ +/ 1/ / uprKey/ [/ h/ ]/ THEN10/ ./ key/ [/ h/ ]/ =/ key/ [/ h/ ]/ +/ 111/ ./ FOREACHlow/ _/ hINh/ -/ 1/ …/ lowest/ _/ hrchyDO12/ ./ key/ [/ low/ _/ h/ ]/ =/ lowKey/ [/ h/ ]/ 13/ ./ ENDIF14/ ./ IFh/ >/ highest/ _/ hrchy15/ ./ RETURNNULL/ // // NoMCCode16/ ./ END/ // // FOREACH17/ ./ ENDIF18/ ./ RETURNkey/ 定理/ 1/ ./ 一/ 排序/ 数据/ ,/ 如果/ 某/ 数据/ 块/ 包含/ 符合条件/ 的/ 记录/ ,/ 该块/ 的/ 最大值/ 必/ 大于/ 等于/ 其前/ 一/ 数据/ 块/ 中/ 最大/ 复合/ 码/ 的/ 最小/ 候选/ 码/ ./ 对于/ 第/ 1/ 个/ 数据/ 块/ 取/ 其/ 最小/ 复合/ 码/ 作为/ 其前/ 一/ 数据/ 块/ 的/ 最大/ 复合/ 码值/ ./ 证明/ ./ 设/ P/ 为/ 一/ 谓词/ ,/ blocki/ 为/ 有序/ 数据/ 块/ 列中/ 的/ 某/ 一/ 数据/ 块/ ,/ minKeyi/ 为/ blocki/ 中/ 的/ 最小/ md/ _/ skey/ 值/ ,/ maxKeyi/ ./ 为/ 最大值/ ;/ c/ _/ key/ 是/ blocki/ 中/ 满足/ 谓词/ P/ 的/ 某/ 记录/ 的/ md/ _/ skey/ 值/ ,/ minMCCodei/ 为/ minKeyi/ 的/ MCCode/ ,/ maxMCCodei/ 为/ maxKeyi/ 的/ MCCode/ ./ 我们/ 可以/ 做/ 如下/ 推理/ :/ (/ 1/ )/ 由于/ 所有/ 的/ md/ _/ skey/ 值/ 是/ 有序/ 的/ ,/ 可/ 推出/ :/ maxKeyi/ -/ 1/ / minKeyi/ ;/ (/ 2/ )/ 由/ maxKeyi/ -/ 1/ / minKeyi/ 可/ 推出/ :/ maxMC/ -/ Codei/ -/ 1/ / minMCCodei/ ;/ (/ 3/ )/ 已知/ minMCCodei/ =/ min/ (/ {/ key/ |/ key/ / minKeyi/ 并且/ key/ 满足/ 谓词/ P/ }/ )/ ,/ c/ _/ key/ 是/ blocki/ 中/ 一个/ 通过/ 谓词/ 判断/ 的/ 记录/ 的/ md/ _/ skey/ 值/ ,/ 因此/ c/ _/ key/ / minMCCodei/ / maxMCCodei/ -/ 1/ ;/ (/ 4/ )/ 因为/ maxMCCodei/ -/ 1/ / c/ _/ key/ / maxKeyi/ ,/ 那么/ maxMCCodei/ -/ 1/ / maxKeyi/ ./ 为/ 便于/ 计算/ ,/ 我们/ 取下/ 一/ 数据/ 块/ 的/ 第/ 1/ 个/ 复合/ 码值/ (/ 该块/ 的/ 最小/ 复合/ 码/ )/ 作为/ 当前/ 块/ 的/ 最大/ 复合/ 码/ ./ 产生/ 待/ 扫描/ 数据/ 块/ 地址/ 列表/ 的/ 算法/ 如/ 算法/ 2/ 所示/ ./ 算法/ 2/ ./ GetCandidateBlockAddressList/ ./ 输入/ :/ JumpTable/ ,/ lowKey/ ,/ uprKey/ 输出/ :/ addressList1/ ./ minKey/ =/ lowKey2/ ./ MCCode/ =/ CalMCCode/ (/ minKey/ ,/ [/ lowKey/ ,/ uprKey/ ]/ )/ 3/ ./ FOREACHh/ _/ keyINJumpTableDO4/ ./ IFkey/ / MCCodeTHEN5/ ./ addcorrespondingaddresstoaddressList6/ ./ MCCode/ =/ CalMCCode/ (/ key/ ,/ [/ lowKey/ ,/ uprKey/ ]/ )/ 7/ ./ ENDIF8/ ./ ENDFOR9/ ./ RETURNaddressList/ 算法/ 2/ 首先/ 根据/ 谓词/ 判断/ predicates/ ,/ 设置/ 初始/ key/ 为/ 所有/ 层次/ 的/ 局部/ 层次/ 码/ h/ _/ skey/ 的/ 最小值/ (/ 行/ 1/ )/ 并/ 计算/ 其/ MCCode/ 作为/ 当前/ MCCode/ (/ 行/ 2/ )/ ,/ 接着/ 将/ 跳跃/ 表中/ 每一项/ 同/ 当前/ 的/ MCCode/ 作/ 对比/ (/ 行/ 3/ ~/ 4/ )/ ,/ 如果/ 当前/ 的/ key/ 满足/ 定理/ 1/ ,/ 我们/ 将/ 其/ 加入/ 结果/ 列表/ 中/ 并/ 计算/ 新/ 的/ MCCode/ (/ 行/ 5/ ~/ 6/ )/ ./ 重复/ 以上/ 步骤/ ,/ 直至/ 跳跃/ 表中/ 所有/ 项/ 都/ 得到/ 处理/ ./ 数据文件/ 中/ 的/ 一个/ 块/ 对应/ 跳跃/ 表中/ 一个/ 表项/ ,/ 其所/ 占/ 空间/ 是/ (/ 数据文件/ 大小/ // 块/ 大小/ )/ ×/ 复合/ 码/ 长度/ ./ 以/ SSB30GB/ 数据量/ 为例/ ,/ 按照/ 非/ 压缩/ 格式/ 存储/ 的/ 某/ 一/ 度量/ 对应/ 的/ 跳跃/ 表所/ 占/ 空间/ 为/ (/ 1.67/ GB/ // 8KB/ )/ ×/ 10Bytes/ ,/ 只/ 占/ 数据文件/ 的/ 1.2/ ./ 跳跃/ 表是/ 针对/ 特定/ 数据文件/ 建立/ 的/ ./ 在/ 大规模/ 机群/ 下/ ,/ 数据/ 已经/ 被/ 均分/ 于/ 每个/ 数据/ 节点/ ,/ 因此/ ,/ 每个/ 节点/ 上/ 的/ 数据文件/ 所/ 占/ 空间/ 一般/ 属于/ GB/ 级/ ,/ 因此/ 跳跃/ 表/ 的/ 空间/ 一般/ 属于/ MB/ 级/ ./ 为了/ 加速/ 跳跃/ 表/ 的/ 检索/ 速度/ ,/ 也/ 可以/ 在/ 跳跃/ 表/ 之上/ 再/ 建立/ 二级/ 甚至/ 更/ 多级/ 跳跃/ 表/ ./ 5.2/ ./ 4Scan/ -/ index/ 扫描/ Scan/ -/ index/ 扫描/ 算法/ 主要/ 是/ 针对/ 基于/ 列/ 存储/ 模型/ 的/ 多列/ 查询/ 提出/ 的/ 优化/ 算法/ ./ 事实/ 表/ 按列/ 存储/ ,/ 可以/ 有效/ 去除/ 不必要/ 字段/ 的/ I/ // O/ 代价/ ,/ 但/ 也/ 带来/ 另外/ 一个/ 问题/ :/ 当/ 查询/ 涉及/ 多个/ 度量/ 值时/ ,/ 往往/ 需要/ 将/ 这些/ 度量/ 值/ 连接起来/ 进行/ 某些/ 操作/ ./ 这/ 也/ 是/ 列存/ 数据库/ 涉及/ 多列/ 查询/ 时/ 性能/ 较/ 低/ 的/ 主要/ 原因/ 之一/ ./ Scan/ -/ index/ 是/ 在/ 程序运行/ 过程/ 中/ 创建/ 的/ 内存/ 索引/ ,/ 它/ 可以/ 在/ 每/ 一个/ 度量/ 的/ 访问/ 过程/ 中/ 动态/ 更新/ ,/ 每/ 一个/ 度量/ 的/ 访问/ 都/ 可以/ 基于/ 前/ 一个/ 度量/ 更新/ 的/ Scan/ -/ index/ 进行/ 数据/ 的/ 访问/ (/ 第/ 1/ 个/ 度量/ 的/ 访问/ 只能/ 基于/ 全列/ 扫描/ 或者/ 跳跃式/ 扫描/ 的/ 方式/ 实现/ )/ ./ 在/ 此/ ,/ 我们/ 仍/ 就/ 合取范式/ 谓词/ 判断/ 进行/ 讨论/ ./ 其/ 基本/ 思想/ 来源于/ 如下/ :/ 对于/ 同属/ 一个/ 元组/ 的/ 多个/ 列/ 来说/ ,/ 如果/ 在/ 某/ 一次/ 谓词/ 判断/ 时/ ,/ 某列/ 不/ 符合条件/ ,/ 该/ 元组/ 将/ 不/ 符合/ 整个/ 合取范式/ ,/ 也/ 就/ 没有/ 必要/ 再/ 访问/ 后续/ 列/ ./ 本文/ 用/ 一个/ 位图/ 来/ 实现/ Scan/ -/ index/ 索引/ ,/ 其中/ 每/ 一位/ 标识/ 其/ 对应/ 偏移量/ 的/ 元组/ 是否/ 符合条件/ ,/ true/ 表示/ 符合/ ,/ false/ 表示/ 不/ 符合/ ./ 由于/ 所有/ 数据/ 聚簇/ 存储/ ,/ 而且/ 数据仓库/ 查询/ 的/ 选择率/ 较/ 低/ ,/ 因此/ 该位/ 图中会/ 出现/ 大量/ 的/ 连续/ true/ 或者/ false/ ./ 为/ 节省/ 空间/ ,/ 对于/ 非/ 压缩/ 数据/ 我们/ 采用/ 如下/ 三元组/ [/ 二进制/ 标识/ ,/ 开始/ 位置/ ,/ 长度/ ]/ 来/ 压缩/ 存储/ 该位/ 图/ ./ 后续/ 度量/ 的/ 块/ 地址/ 可以/ 通过/ 元组/ 偏移量/ 除以/ 块/ 大小/ 计算/ 出/ ,/ 块/ 内/ 偏移量/ 可以/ 通过/ 元组/ 偏移量/ 对块/ 内/ 记录/ 数求/ 余/ 得出/ ./ 对于/ 压缩/ 数据/ ,/ 由于/ 不同/ 数据类型/ 的/ 度量/ 对应/ Page10/ 的/ 数据/ 块/ 内/ 存储/ 的/ 元组/ 数/ 往往/ 不同/ ,/ 因此/ 较难/ 根据/ 元组/ 偏移量/ 直接/ 计算/ 出/ 元组/ 所在/ 数据/ 块/ 及/ 元组/ 在/ 数据/ 块/ 内/ 偏移量/ ./ 此种/ 情况/ 下/ ,/ Scan/ -/ index/ 算法/ 只/ 适用/ 于/ 作用/ 在/ 相同/ 数据类型/ 的/ 度量/ 上/ 的/ 查询/ ./ 由于/ 度量/ 基本/ 为/ 数值/ 型且/ 数据类型/ 较/ 少/ ,/ 因此/ ,/ 此/ 限制/ 并/ 不会/ 对/ Scan/ -/ index/ 算法/ 在/ 压缩/ 数据/ 上/ 的/ 应用/ 产生/ 较大/ 影响/ ./ 我们/ 用/ 如下/ 结构/ 体/ 数组/ 以块/ 为/ 单位/ 存储/ 基于/ 压缩/ 数据/ 产生/ 的/ 位图/ :/ [/ 含/ 满足/ 谓词/ 条件/ 的/ 元组/ 的/ 块/ 在/ 数据文件/ 中/ 的/ 偏移量/ ,/ 该块/ 内/ 元组/ 对应/ 的/ 位图/ ]/ ./ 以/ SSB30GB/ 数据/ 集为例/ ,/ 选择率/ 最高/ 的/ Q4/ ./ 1/ 查询/ 中/ ,/ 该位/ 图/ 所/ 占/ 空间/ 仅为/ 93KB/ ./ Scan/ -/ index/ 扫描/ 以/ 两步/ 执行/ :/ (/ 1/ )/ 依据/ 全列/ 扫描/ 或者/ 跳跃式/ 扫描/ 产生/ 初始/ 的/ Scan/ -/ index/ 位图/ ;/ (/ 2/ )/ 循环/ 执行/ 剩余/ 谓词/ 直至/ 所有/ 谓词/ 都/ 被/ 执行/ 完/ ./ 基于/ 前/ 一列/ 产生/ 的/ Scan/ -/ index/ 位图/ 访问/ 当/ 前列/ ,/ 执行/ 同该/ 列/ 相关/ 的/ 谓词/ 并/ 更新/ Scan/ -/ index/ 索引/ 位图/ 中/ 的/ 相应/ 位/ ./ 其中/ ,/ (/ 2/ )/ 中/ 操作/ 主要/ 完成/ 事实/ 表中同/ 度量/ 相关/ 的/ 谓词/ 判断/ ./ OLAP/ 查询/ 访问/ 的/ 列/ 大多/ 为/ 维度/ 的/ 层次/ 和/ 事实/ 表/ 的/ 度量/ (/ MOLAP/ 中/ 基于/ 数据/ 立方体/ 上/ 的/ 查询/ 即/ 是/ 例证/ )/ ;/ 在/ JFSS/ 模型/ 中/ ,/ 事实/ 表/ 的/ 复合/ 码/ 已经/ 包含/ 所有/ 的/ 维度/ 层次/ 信息/ ./ 因此/ 对于/ 大多数/ 查询/ 来讲/ ,/ 第/ 1/ 次/ 扫描/ 后/ 即可/ 确定/ 哪些/ 元组/ 符合/ 查询/ ,/ 后续/ 列/ 的/ 访问/ 都/ 可以/ 基于/ 初始/ 的/ scan/ -/ index/ 位图/ 进行/ 数据/ 访问/ ./ 以/ 如下/ 投影/ 操作/ 为例/ :/ π/ m1/ ,/ m2/ (/ σ/ md/ _/ skey/ &/ “/ 11100000111/ ”/ =/ “/ 10001000101/ ”/ (/ factTable/ )/ )/ ./ 基于/ scan/ -/ index/ 的/ 执行/ 示意/ 如图/ 7/ 所示/ ./ 第/ 1/ 个/ 度量/ 的/ 访问/ 需要/ 执行/ 全表/ 扫描/ 操作/ ,/ 而/ 第/ 2/ 个/ 度量/ 的/ 访问/ 就/ 可以/ 基于/ 第/ 1/ 次/ 扫描/ 产生/ 的/ Scan/ -/ index/ 索引/ 直接/ 进行/ 访问/ ./ 一个/ 元组/ 对应/ Scan/ -/ index/ 中一/ 二进制位/ ,/ 因此/ ,/ Scan/ -/ Index/ 所/ 占/ 总/ 空间/ 可/ 元组/ 数/ 计算/ 得出/ ./ 以/ SSB30GB/ 数据/ 集为例/ ,/ 大多数/ 查询/ 产生/ 的/ Scan/ -/ index/ 索引/ 所/ 占/ 空间/ 都/ 在/ KB/ 级/ ./ 如果/ 采用/ 压缩/ 技术/ ,/ 该/ 空间/ 可以/ 进一步/ 缩小/ ./ 5.3/ Merge/ 每/ 一个/ 数据/ 节点/ 执行/ 完/ 自己/ 的/ Reduce/ 操作/ 后/ ,/ 将/ 本地/ 最终/ 的/ 聚集/ 数据/ 上传/ 至主/ 节点/ 进行/ 合并/ ,/ 并/ 将/ md/ _/ skey/ 复合/ 码中/ 的/ 代码/ 按照/ 用户/ 要求/ 完成/ 名称/ 替换/ 等/ 工作/ ./ 如果/ 查询/ 中/ 存在/ having/ 或者/ 排序/ 操作/ ,/ 也/ 在/ 此/ 阶段/ 执行/ ./ 各个/ 数据/ 节点/ 只是/ 将/ 聚集/ 后/ 的/ 数据/ 上传/ 至主/ 节点/ ,/ 因此/ 网络/ 传输/ 量/ 和/ 合并/ 操作/ 代价/ 也/ 是/ 较/ 低/ 的/ (/ 详细分析/ 见/ 6.1/ 节/ )/ ./ 6/ 实验/ 分析/ 基于/ 以上/ 论述/ ,/ 我们/ 基于/ C++/ 和/ MPI/ (/ 版本/ 为/ OpenMPI1/ ./ 4.3/ )/ 实现/ 了/ LaScOLAP/ 原型/ 系统/ ./ 实验/ 采用/ 的/ 测试/ 集为/ SSB/ ①/ 基准/ 测试/ ./ 实验/ 机群/ 包含/ 14/ 个/ 节点/ ,/ 每个/ 数据/ 节点/ 运行/ Ubuntu10/ ./ 10/ 操作系统/ ,/ 配备/ 一/ Intel/ 酷睿/ 2/ 双核/ 处理器/ 、/ 2GB/ 内存/ 和/ 140GB/ 磁盘/ 容量/ ./ 网络带宽/ 为/ 1Gbps/ ./ 我们/ 选择/ 大/ 数据分析/ 的/ 主流/ 平台/ —/ —/ —/ MapReduce/ 类似/ 系统/ 作为/ 对比/ 对象/ ,/ 重点/ 关注/ 于/ LaScOLAP/ 的/ 扩展性/ 、/ 容错性/ 及/ 性能/ 的/ 验证/ 分析/ ./ 鉴于/ 扩展性/ 难以/ 通过/ 实际/ 规模/ 验证/ ,/ 我们/ 采用/ 了/ 理论/ 分析/ 的/ 方式/ (/ 见/ 6.1/ 节/ )/ ./ 在/ 性能/ 的/ 对比/ 实验/ 中/ ,/ 基于/ 如下/ 考虑/ ,/ 我们/ 选择/ 了/ HadoopDB/ [/ 2/ ]/ 作为/ 对比/ 对象/ :/ (/ 1/ )/ HadoopDB/ 是/ 基于/ MapReduce/ 和/ 关系数据库/ 的/ 混合式/ 数据库/ ,/ 在/ 恰当/ 的/ 数据分布/ 策略/ 下/ ,/ 可/ 同时/ 具备/ MapReduce/ 的/ 扩展性/ 和/ 关系数据库/ 的/ 性能/ ;/ (/ 2/ )/ HadoopDB/ 代表/ MapReduce/ 类似/ 系统/ 的/ 最佳/ 性能/ ./ 大多数/ 情况/ 下/ ,/ HadoopDB/ 的/ 性能/ 优于/ Hadoop/ ②/ 及/ Hadoop/ ++/ [/ 8/ ]/ ./ 在/ 本/ 实验/ 中/ ,/ 我们/ 又/ 通过/ 优化/ 的/ 数据分布/ 策略/ ,/ 将/ 所有/ 查询/ 都/ 推入/ 数据库/ 层/ 执行/ ,/ 从而/ 使/ HadoopDB/ 的/ 性能/ 达到/ 最优/ ;/ (/ 3/ )/ 所有/ 查询/ 都/ 在/ 数据库/ 层/ 执行/ ,/ 也/ 侧面/ 对比/ 了/ LaScOLAP/ 同/ 关系数据库/ 的/ 性能/ ./ 6.1/ 扩展性/ 分析/ 根据/ TRM/ 执行/ 模型/ ,/ 可以/ 将/ LaScOLAP/ 的/ 总/ 处理/ 代价/ (/ TotalCost/ )/ 分为/ 3/ 部分/ :/ 查询/ 转换/ 代价/ (/ TC/ )/ 、/ 数据/ 节点/ Reduce/ 代价/ (/ RC/ )/ 、/ 聚集/ 结果/ 网络/ 传输/ 及/ 合并/ 代价/ (/ MC/ )/ ,/ 即/ TotalCost/ =/ TC/ +/ RC/ +/ MC/ ./ 查询/ 转换/ 代价/ 主要/ 用于/ 谓词/ 中/ 层次/ 代码/ 的/ 查找/ 操作/ :/ 从/ 编码/ 后/ 的/ 维表中/ 查找/ 出/ 查询/ 谓词/ 中/ 涉及/ 层次/ 的/ 局部/ 层次/ 码/ ;/ 各个/ 数据/ 节点/ 操作/ 代价/ 主要/ 是/ 对/ 本地/ 数据/ 的/ I/ // O/ 访问/ ;/ 聚集/ 结果/ 的/ 网络/ 传输/ 及合/ ①/ ②/ Page11/ 并/ 代价/ 取决于/ 结果/ 集/ 大小/ ./ 由于/ 按照/ JFSS/ 模型/ 组织/ 的/ 维表/ 占用/ 空间/ 一般/ 属于/ GB/ 级/ 或/ 以下/ ,/ 我们/ 可以/ 按照/ 4.1/ 节/ 的/ 论述/ ,/ 采用/ 全/ 内存/ 操作/ 或/ 基于/ 索引/ 的/ 外存/ 查找/ ,/ 以/ 快速/ 地/ 完成/ 查询/ 的/ 转换/ ./ 数据仓库/ 查询/ 具有/ 高/ 输入/ 低/ 输出/ 的/ 特点/ ./ 以/ SSB/ 为例/ ,/ 任何/ 一个/ 查询/ 的/ 输出/ 记录/ 数都/ 在/ 1000/ 条/ 以下/ ./ 因此/ ,/ 即便/ 每个/ 节点/ 按/ 输出/ 1000/ 条/ 〈/ key/ ,/ value/ 〉/ 对/ 计算/ ,/ 其/ 传输/ 的/ 数据量/ 仅为/ 1000/ ×/ 14Bytes/ =/ 13KB/ ./ 这/ 在/ 1Gbps/ 的/ 普通/ 带宽/ 上/ 也/ 只/ 需/ 0.1/ ms/ 即可/ 完成/ 传输/ ./ 同时/ ,/ 较/ 小/ 的/ 结果/ 集/ (/ KB/ 级/ )/ 使得/ 结果/ 集合/ 并/ 操作/ 可/ 迅速/ 完成/ ./ 因此/ ,/ 网络/ 传输/ 和/ 合并/ 操作/ 代价/ MC/ 只会/ 占/ 总/ 处理/ 时间/ 的/ 较/ 小/ 比例/ ./ 在/ 整个/ 星型/ 模型/ 中/ ,/ 事实/ 表/ 占据/ 绝大部分/ 空间/ ,/ 因此/ 各个/ 数据/ 节点/ 的/ 处理/ 时间/ 应该/ 占/ 整个/ 查询处理/ 时间/ 的/ 较大/ 比例/ ./ 每个/ 节点/ 的/ 处理/ 时间/ 主要/ 用于/ 本地/ 事实/ 表/ 扫描/ 操作/ ,/ 因此/ RC/ 应该/ 正比/ 于/ 事实/ 表/ 数据量/ (/ 如图/ 8/ 所示/ )/ ./ 假设/ 事实/ 表/ 的/ 大小/ 为/ F/ ,/ 节点/ 数为/ N/ ,/ 则/ RC/ =/ f/ (/ F/ // N/ )/ ./ 图/ 8/ 显示/ 了/ LaScOLAP/ 在/ 单/ 节点/ 上/ 执行/ Reduce/ 操作/ 时/ (/ 输出/ 聚集/ 结果/ 集为/ 800/ 条/ 记录/ 的/ 情况/ 下/ )/ ,/ 其/ 执行/ 时间/ 随/ 数据/ 规模/ 增长/ 的/ 变化/ 情况/ ./ 从图/ 中/ 我们/ 可以/ 看出/ ,/ RC/ 同/ 数据/ 规模/ 成/ 近似/ 正比/ ./ 因此/ 可/ 推出/ ,/ 节点/ 数/ 的/ 增加/ (/ 对应/ 数据/ 规模/ 的/ 下降/ )/ ,/ Reduce/ 操作/ 执行/ 时间/ 会/ 线性/ 减少/ ./ 基于/ 以上/ 分析/ ,/ 我们/ 对/ 查询/ 转换/ 时间/ (/ TC/ )/ 和/ 合并/ 时间/ (/ MC/ )/ 占/ 总/ 处理/ 时间/ (/ TotalCost/ )/ 的/ 比例/ 进行/ 了/ 测试/ 分析/ ./ 实验/ 采用/ 30GB/ 数据/ 集/ ,/ 基于/ 两个/ 节点/ 进行/ (/ 一个/ 为主/ 节点/ ,/ 一个/ 为/ 从/ 节点/ )/ ./ 我们/ 选择/ Q3/ ./ 2/ 作为/ 测试/ 查询/ ./ 该/ 查询/ 输出/ 结果/ 集/ 较大/ (/ 较大/ 的/ TC/ +/ MC/ )/ ,/ 同时/ 只/ 涉及/ 一个/ 度量/ 的/ 访问/ (/ 较/ 小/ 的/ TC/ )/ ,/ 因此/ 依据/ 该/ 查询/ 测出/ 的/ 比例/ 代表/ 较大/ 的/ (/ TC/ +/ MC/ )/ // TotalCost/ 值/ ./ 测试/ 结果表明/ (/ TC/ +/ MC/ )/ // TotalCost/ 值/ 都/ 在/ 0.12/ %/ 以下/ ./ 因此/ TotalCost/ ≈/ RC/ =/ f/ (/ F/ // N/ )/ ,/ 说明/ 系统/ 的/ 性能/ 同/ 每个/ 数据/ 节点/ 的/ 数据量/ 基本上/ 是/ 成正比/ 的/ ,/ 也/ 即/ 意味着/ ,/ LaScOLAP/ 的/ 扩展性/ 几乎/ 是/ 线性/ 的/ ./ 6.2/ 性能/ 分析/ 同/ HadoopDB/ 对比/ 时/ ,/ 我们/ 采取/ 如下/ 数据分布/ 策略/ 将/ 所有/ 查询/ 下推/ 至/ 数据/ 层/ 执行/ :/ (/ 1/ )/ 按照/ 最大/ 维表/ customer/ 表/ 的/ 主键/ c/ _/ custKey/ 进行/ 事实/ 表/ 和/ customer/ 表/ 的/ 划分/ ,/ 以/ 保证/ 相同/ c/ _/ custKey/ 的/ 事实/ 表/ 记录/ 和/ customer/ 表/ 的/ 记录/ 位于/ 同一/ 数据/ 节点/ 内/ ;/ (/ 2/ )/ 在/ 每个/ 数据库/ 节点/ 复制/ 其他/ 维表/ ;/ (/ 3/ )/ 采用/ 手工/ 编码方式/ 实现/ 查询/ ,/ 保证/ 所有/ 查询/ 都/ 在/ PostgreSQL/ 数据库/ 中/ 执行/ ./ 此种/ 方式/ 对于/ HadoopDB/ 的/ 商业化/ 版本/ Hadapt/ ①/ 也/ 是/ 最优/ 的/ ./ 同时/ ,/ 我们/ 将/ 每个/ PostgreSQL/ 的/ work/ _/ mem/ 参数/ 配置/ 为/ 200MB/ ,/ share/ _/ buffers/ 参数/ 为/ 100MB/ ,/ 以使/ 其/ 发挥/ 较/ 高性能/ ./ 本/ 实验/ 采用/ 500GBSSB/ 测试数据/ ,/ HadoopDB/ 的/ 数据库/ 采用/ PostgreSQL9/ ./ 0.2/ 版本/ ,/ Hadoop/ 为/ 0.20/ ./ 2/ 版本/ ./ 为/ 排除/ 负载/ 均衡/ 等/ 对/ 性能/ 的/ 影响/ ,/ 我们/ 将/ 数据/ 冗余/ 设为/ 1/ ./ 从图/ 9/ 可以/ 看出/ LaScOLAP/ 基于/ 非/ 压缩/ 数据/ 的/ 平均/ 执行/ 性能/ 是/ HadoopDB/ 的/ 13/ 倍/ ./ LaScOLAP/ 性能/ 优于/ HadoopDB/ ,/ 主要/ 得益于/ 〈/ key/ ,/ value/ 〉/ 存储/ 方式/ 和/ 基于/ 扫描/ 的/ 数据处理/ 方式/ ./ 前者/ 有效/ 地/ 减少/ 了/ 不必要/ 的/ I/ // O/ 操作/ ,/ 后者/ 降低/ 了/ 查询处理/ 的/ 代价/ ./ HadoopDB/ 在/ 执行/ Q3/ ./ 1/ 查询/ 时/ ,/ 耗费/ 较长时间/ ,/ 主要/ 原因/ 在于/ 该/ 查询/ 选择率/ 较/ 高/ ,/ 引入/ 较/ 高/ 的/ 物化/ 代价/ ./ 关于/ LaScOLAP/ 第/ 1/ 组/ 查询/ 执行/ 时间/ 较长/ 的/ 问题/ 我们/ 在/ 下/ 一节/ 讨论/ ./ 图/ 9LaScOLAP/ 和/ HadoopDB/ 性能/ 对比/ (/ 无/ 索引/ )/ 6.3/ LaScOLAP/ 各种/ 优化/ 算法/ 性能/ 分析/ 机群/ 规模/ 较大/ 时/ 执行/ 情况/ 较/ 复杂/ ,/ 不/ 便于/ 跟踪/ 分析/ ,/ 因此/ 在/ 分析/ 各种/ 优化/ 算法/ 时/ ,/ 我们/ 选择/ 了/ 两个/ 节/ ①/ HadaptInc/ ./ http/ :/ // // www/ ./ hadapt/ ./ comPage12/ 点/ 组成/ 的/ 机群/ 进行/ 分析/ :/ 一/ 节点/ 作为/ 主/ 节点/ ,/ 另/ 一/ 节点/ 作为/ 数据/ 节点/ ,/ 选用/ 的/ 数据/ 集为/ 30GBSSB/ 数据/ ./ 我们/ 对比/ 了/ LaScOLAP/ 基于/ 非/ 压缩/ 数据/ 及/ 压缩/ 数据/ 的/ 顺序/ 扫描/ 性能/ 和/ 跳跃式/ 扫描/ 性能/ (/ 如图/ 10/ 所示/ )/ ./ 从图/ 10/ 中/ 可以/ 看出/ ,/ LaScOLAP/ 执行/ 顺序/ 扫描/ 时/ ,/ 压缩/ 数据/ 平均/ 处理/ 性能/ 是非/ 压缩/ 格式/ 的/ 1.67/ 倍/ ./ 然而/ ,/ 基于/ 压缩/ 数据/ 上/ 跳跃式/ 扫描/ 性能/ 和/ 非/ 压缩/ 数据/ 上/ 的/ 跳跃式/ 扫描/ 性能/ 差别/ 不大/ ./ 主要/ 原因/ 在于/ 两者/ 的/ I/ // O/ 量/ 接近/ ./ 图/ 10LaScOLAP/ 跳跃式/ 扫描/ 与/ 顺序/ 扫描/ 性能/ 对比/ 跳跃式/ 扫描/ 可以/ 显著/ 提高/ 扫描/ 的/ 性能/ ./ 跳跃式/ 扫描/ 平均/ 性能/ 是/ 压缩/ 数据/ 的/ 顺序/ 扫描/ 性能/ 的/ 8/ 倍/ ,/ 是非/ 压缩/ 数据/ 性能/ 的/ 13/ 倍/ 多/ ./ 第/ 4/ 组/ 查询/ 涉及/ 两个/ 度量/ ,/ 但/ 其/ 总/ 的/ 执行/ 时间/ 同只/ 涉及/ 一个/ 度量/ 的/ 第/ 2/ 组和/ 第/ 3/ 组/ 查询/ 较为/ 接近/ ,/ 说明/ Scan/ -/ index/ 算法/ 可以/ 有效/ 减少/ 第/ 2/ 个/ 度量/ 扫描/ 的/ I/ // O/ 量/ ./ 我们/ 也/ 观察/ 到/ 第/ 1/ 组/ 查询/ 在/ 执行/ 各种/ 优化/ 算法/ 时/ ,/ 时间/ 都/ 是/ 最长/ 的/ ./ 原因/ 在于/ 第/ 1/ 组/ 查询/ 涉及/ 3/ 个/ 度量/ ,/ 而且/ 只有/ 一个/ 谓词/ 作用/ 于/ 维度/ 层次/ 上/ ,/ 其他/ 谓词/ 均/ 作用/ 于/ 度量/ 上/ ,/ 从而/ 导致/ 初始/ Scan/ -/ index/ 产生/ 了/ 较/ 多/ 符合/ 谓词/ 的/ 元组/ ,/ 引起/ 较/ 多/ I/ // O/ 操作/ ./ 查询/ Q2/ ./ 2/ 执行/ 跳跃式/ 扫描/ 的/ 时间/ 相对/ 较长/ ,/ 原因/ 在于/ 该/ 查询/ 中/ 谓词/ 判断/ 作用/ 于/ 较/ 低层次/ ,/ 排序/ 聚簇/ 后/ 同该/ 查询/ 相关/ 的/ 记录/ 分散/ 于/ 较/ 多/ 数据/ 块/ ,/ 导致/ I/ // O/ 量/ 相对/ 较大/ ./ 对此/ ,/ 我们/ 也/ 进行/ 了/ 进一步/ 的/ 验证/ ./ 基于/ 非/ 压缩/ 数据/ ,/ 我们/ 对/ 跳跃式/ 扫描/ 处理/ 的/ 数据/ 块/ 占/ 关系/ 总/ 空间/ 的/ 比例/ 及/ 各/ 查询/ 的/ 选择率/ 进行/ 了/ 统计/ 对比/ ,/ 如图/ 11/ 所示/ ./ 从图/ 中/ 可以/ 看出/ ,/ 跳跃式/ 扫描/ 需/ 扫描/ 的/ 数据/ 块数/ 比例/ 大体上/ 同/ 选择率/ 是/ 一致/ 的/ :/ 选择率/ 高/ ,/ 扫描/ 的/ 数据/ 块/ 就/ 多/ ;/ 选择率/ 低/ ,/ 扫描/ 的/ 数据/ 块/ 就/ 少/ ./ 平均/ 只/ 需要/ 扫描/ 5/ %/ (/ 最/ 多/ 需要/ 扫描/ 25/ %/ )/ 的/ 数据/ 块/ 即可/ 完成/ 查询/ ./ 这/ 也/ 侧面/ 说明/ 排序/ 后/ 的/ 数据/ 聚簇/ 有效/ 减少/ 了/ I/ // O/ 访问/ ./ 然而/ ,/ 从图/ 11/ 中/ 我们/ 也/ 可以/ 看到/ 两个/ 异常/ 点/ :/ Q2/ ./ 2/ 查询/ 跳跃式/ 扫描/ 的/ 数据/ 块/ 占/ 总/ 数据/ 块/ 的/ 比例/ 远高于/ 其/ 查询/ 选择率/ ,/ 而/ Q3/ ./ 1/ 远/ 低于/ 其/ 查询/ 选择率/ ./ 我们/ 分析/ 这/ 主要/ 在于/ 两个/ 查询/ 操作/ 的/ 维度/ 的/ 优先级/ 及/ 层次/ 不同/ :/ Q3/ ./ 1/ 查询/ 是/ 作用/ 于/ 最高/ 优先级/ 的/ 3/ 个/ 维度/ (/ date/ →/ supplier/ →/ customer/ )/ 的/ 最高/ 层次/ ,/ 因此/ 排序/ 后/ 的/ 数据/ 可以/ 获得/ 较/ 好/ 的/ 聚簇/ 效果/ ,/ 从而/ 减少/ I/ // O/ 较/ 多/ ;/ 而/ Q2/ ./ 2/ 作用/ 于/ 最/ 低优先级/ 的/ part/ 维度/ 的/ 较/ 低层次/ ,/ 因此/ 不能/ 获得/ 像/ Q3/ ./ 1/ 查询/ 一样/ 的/ 聚簇/ 效果/ ./ 这/ 说明/ 查询/ 的/ 层次/ 的/ 高低/ 会/ 较大/ 地/ 影响/ 跳跃式/ 扫描/ 的/ 性能/ ./ 图/ 11/ 压缩/ 数据/ 跳跃式/ 扫描/ 访问/ 的/ 数据/ 块/ 占/ 总/ 数据/ 块/ 6.4/ 容错性/ 分析/ LaScOLAP/ 的/ 容错/ 实现/ 目前/ 较为简单/ ,/ 只是/ 通过/ 重做/ 失败/ 节点/ 的/ 任务/ 来/ 获得/ 容错/ 能力/ ./ 如果/ 中心/ 节点/ 在/ 一/ 预设/ 的/ 时间/ 内/ 没有/ 收到/ 数据/ 节点/ 的/ 心跳/ 信息/ ,/ 它/ 就/ 会/ 在/ 其/ 备份/ 节点/ 上/ 重新/ 执行/ 其/ 任务/ ./ 为了/ 测试/ LaScOLAP/ 的/ 容错/ 能力/ ,/ 我们/ 选择/ Hadoop/ 为/ 对比/ 对象/ ,/ Q3/ ./ 2/ 作为/ 测试/ 查询/ ./ 对于/ Hadoop/ ,/ 将/ 每个/ 节点/ 的/ Map/ 任务/ 个数/ 和/ Reduce/ 任务/ 个数/ 设为/ 1/ ,/ 采用/ 最/ 高效/ 的/ 广播/ 方式/ 实现/ 连接/ ①/ ;/ 对于/ LaScOLAP/ ,/ 每个/ 节点/ 启动/ 一个/ Reduce/ 任务/ ./ 二者/ 均/ 在/ 查询/ 执行/ 到/ 一半/ 时/ 随机/ 断掉/ 一个/ 节点/ ./ 结果显示/ ,/ LaScOLAP/ 和/ Hadoop/ 的/ 执行/ 时间/ 分别/ 发生/ 了/ 16/ %/ 和/ 12/ %/ 的/ 增长/ (/ 绝对/ 时间/ 的/ 增长/ 分别/ 为/ 35s/ 和/ 142s/ )/ ./ 从/ 时间/ 增长/ 的/ 比例/ 上/ 看/ ,/ LaScOLAP/ 容错性/ 弱于/ Hadoop/ ,/ 其/ 主要/ 原因/ 在于/ Hadoop/ 实现/ 了/ 有效/ 的/ 预测/ 执行/ 、/ 分阶段/ (/ Map/ 阶段/ 和/ Reduce/ 阶段/ )/ 容错/ 等/ 优化/ 机制/ ,/ 而/ LaScOLAP/ 当前/ 采用/ 的/ 容错/ 机制/ 较为简单/ ./ 未来/ ,/ 我们/ 计划/ 借助/ 检查点/ 机制/ 来/ 改善/ LaSc/ -/ OLAP/ 的/ 容错/ 能力/ :/ 由于/ OLAP/ 查询/ 的/ 结果/ 集较/ 小/ ,/ 在/ LaScOLAP/ 执行/ 过程/ 中/ ,/ 可以/ 周期/ 地/ 将/ 每个/ 任务/ 的/ 执行/ 状态/ 信息/ (/ 如/ 已/ 扫描/ 记录/ 的/ 位置/ 信息/ )/ 、/ ①/ 每个/ Map/ 任务/ 从/ HDFS/ 上/ 直接/ 读取/ 维表/ 数据/ 并/ 在/ 内存/ 中/ Page13/ 中间/ 聚集/ 结果/ 等/ 增量/ 地上/ 传至/ 可靠/ 节点/ ;/ 一旦/ 某/ 结点/ 任务/ 执行/ 失败/ ,/ LaScOLAP/ 可以/ 基于/ 此/ 检查点/ 信息/ 从/ 失败/ 点/ 继续执行/ ,/ 从而/ 避免/ 整个/ 任务/ 的/ 重新/ 执行/ ./ 6.5/ 批量/ 谓词/ 判断/ 分析/ 我们/ 分别/ 选择/ 具备/ 简单/ 谓词/ 判断/ Q2/ ./ 1/ (/ 仅/ 含/ 一个/ 由/ 两个/ 等值/ 谓词/ 判断/ 组成/ 的/ 合取范式/ )/ 和/ 复杂/ 谓词/ 判断/ 的/ Q3/ ./ 3/ (/ 含/ 1/ 个/ 由/ 4/ 个/ 合取范式/ 组成/ 的/ 析取范式/ )/ 为/ 代表/ 批量/ 谓词/ 判断/ 进行/ 分析/ ./ 测试/ 结果/ 见图/ 12/ ./ 图/ 12Q2/ ./ 1/ 和/ Q3/ ./ 3/ 批量/ 谓词/ 判断/ 性能/ 分析/ 从图/ 中/ 可以/ 看出/ ,/ 在/ 执行/ 简单/ 谓词/ 判断/ 时/ ,/ 批量/ 谓词/ 判断/ 的/ 性能/ 略低于/ 通常/ 方式/ (/ 对应/ 图/ 中非/ 批量/ 谓词/ 判断/ 方式/ )/ ./ 但/ 面对/ 复杂/ 谓词/ 判断/ (/ Q3/ ./ 3/ )/ ,/ 具备/ 明显/ 优势/ ./ 7/ 结论/ 及/ 未来/ 工作/ 为/ 解决/ 大/ 数据/ 上/ 的/ 星型/ (/ 雪花/ )/ 查询/ 性能/ 问题/ ,/ 本文/ 从/ 如下/ 两个/ 方面/ 入手/ :/ (/ 1/ )/ 高度/ 可/ 扩展/ 的/ 架构/ ./ 利用/ 层次/ 编码/ 技术/ 对/ 传统/ 的/ 星型/ (/ 雪花/ )/ 模型/ 进行/ 改造/ ,/ 消除/ 了/ 事实/ 表与维表/ 之间/ 的/ 复杂/ 连接/ 操作/ ,/ 提出/ 了/ 基于/ 扫描/ 的/ 无/ 连接/ 雪花/ 模型/ ,/ 将/ 数据仓库/ 查询/ 的/ 处理/ 抽象/ 为/ Transform/ 、/ Reduce/ 、/ Merge3/ 个/ 操作/ (/ TRM/ 执行/ 模型/ )/ ./ 新/ 的/ 数据模型/ 和/ 新/ 的/ 执行/ 模型/ 使得/ OLAP/ 查询/ 经/ 转换/ 后/ 可/ 被/ 划分/ 为/ 众多/ 独立/ 子/ 任务/ ,/ 在/ 大规模/ 机群/ 上/ 并行执行/ ,/ 从而/ 保证/ 了/ 数据/ 计算/ 的/ 独立性/ 和/ 系统/ 的/ 高度/ 可/ 扩展/ 特性/ ;/ (/ 2/ )/ 快速/ 的/ 本地/ 计算/ 算法/ ./ 在/ I/ // O/ 仍/ 是/ 本地/ 计算/ 瓶颈/ 的/ 前提/ 下/ ,/ 提出/ 尽可能/ 跳过/ 不/ 相关/ I/ // O/ 的/ 新/ 优化/ 途径/ ./ 提出/ 了/ 跳跃式/ 扫描/ 、/ Scan/ -/ index/ 等/ 新型/ 扫描/ 算法/ ./ 为了/ 加速/ 本地/ 的/ 计算速度/ ,/ 本文/ 也/ 提出/ 了/ 针对/ 数据仓库/ 应用/ 的/ 〈/ key/ ,/ value/ 〉/ 数据/ 存储/ 格式/ 及/ 前缀/ 压缩算法/ 、/ 批量/ 谓词/ 判断/ 算法/ 等/ ./ 实验/ 分析表明/ ,/ 原型/ 系统/ LaScOLAP/ 可以/ 获得/ 近乎/ 线性/ 的/ 扩展/ 能力/ ,/ 在/ 执行/ OLAP/ 查询/ 时/ ,/ 其/ 性能/ 也/ 比/ HadoopDB/ 高出/ 一个/ 数量级/ ./ 未来/ 仍/ 有/ 许多/ 有/ 挑战性/ 的/ 工作/ ./ (/ 1/ )/ TRM/ 基于/ 扫描/ 的/ 执行/ 方式/ 同/ MapReduce/ 的/ 执行/ 方式/ 是/ 类似/ 的/ ,/ 使得/ LaScOLAP/ 有/ 可能/ 移植/ 到/ Hadoop/ 框架/ 上/ ,/ 从而/ 同时/ 实现/ 关系数据库/ 的/ 高性能/ 特性/ 和/ MapReduce/ 的/ 大规模/ 可/ 扩展/ 特性/ ;/ (/ 2/ )/ 维表/ 更新/ 的/ 处理/ ./ 维表/ 并非/ 一成不变/ ,/ 偶尔/ 也/ 会/ 发生/ 成员/ 的/ 增加/ 、/ 删除/ 、/ 更新/ ,/ 甚至/ 层次/ 的/ 变化/ 等/ ,/ 因此/ 如何/ 高效/ 地/ 实现/ 维表/ 和/ 事实/ 表中/ 层次/ 编码/ 的/ 同步/ 更新/ 是/ LaScOLAP/ 必须/ 解决/ 的/ 问题/ ;/ (/ 3/ )/ 查询/ 共享/ 技术/ ./ 在/ 多个/ 查询/ 间/ 共享/ 磁盘/ I/ // O/ 等/ 操作/ ,/ 分摊/ I/ // O/ 代价/ ;/ (/ 4/ )/ 优化/ 器/ 设计/ ./ LaScOLAP/ 依赖/ 扫描/ 操作/ 来/ 处理/ 查询/ ,/ 可以/ 设计/ 多种/ 独特/ 的/ 扫描/ 方式/ ,/ 如/ 本文/ 中/ 的/ 跳跃式/ 扫描/ 、/ 传统/ 的/ 基于/ 索引/ 的/ 扫描/ 等/ ,/ 如何/ 选择/ 一条/ 最优/ 的/ 访问/ 路径/ 是/ 系统/ 性能/ 优化/ 的/ 关键问题/ 之一/ ./ 

