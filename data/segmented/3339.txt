Page1/ 一种/ 软件/ 故障诊断/ 过程/ 框架/ 单锦辉/ 1/ )/ ,/ 2/ )/ 徐克俊/ 2/ )/ 王戟/ 3/ )/ 1/ )/ (/ 北京/ 特种/ 工程设计/ 研究院/ 北京/ 100028/ )/ 2/ )/ (/ 中国/ 酒泉卫星发射中心/ 甘肃/ 酒泉/ 732750/ )/ 3/ )/ (/ 国防科学技术大学/ 计算机/ 学院/ 长沙/ 410073/ )/ 摘要/ 软件/ 在/ 国民经济/ 和/ 社会/ 生活/ 中/ 发挥/ 着/ 重要/ 作用/ ./ 软件/ 出现/ 故障/ 给/ 人们/ 的/ 工作/ 、/ 生活/ 带来/ 不便/ ,/ 甚至/ 造成/ 严重危害/ ./ 但是/ 当前/ 所/ 进行/ 的/ 多/ 为/ 软件/ 故障诊断/ 中/ 单项/ 活动/ 的/ 研究/ ,/ 较/ 少有/ 对/ 各项/ 诊断/ 活动/ 及其/ 相应/ 方法/ 进行/ 有效/ 集成/ 的/ 研究/ ./ 文中/ 分析/ 软件/ 失效/ 机理/ 和/ 软件/ 故障/ 产生/ 原因/ ,/ 讨论/ 软件/ 故障/ 模型/ ,/ 提出/ 一种/ 由/ 故障/ 检测/ 、/ 故障/ 定位/ 、/ 故障/ 排除/ 、/ 交付/ 等/ 组成/ 的/ 集成化/ 的/ 软件/ 故障诊断/ 过程/ 框架/ ,/ 研究/ 软件/ 故障/ 检测/ 、/ 定位/ 和/ 排除/ 中/ 所/ 采用/ 的/ 方法/ 及/ 相应/ 的/ 过程/ ,/ 并且/ 将/ 该/ 框架/ 应用/ 于/ 实际/ 的/ 软件/ 故障诊断/ ./ 关键词/ 软件/ 故障/ ;/ 故障诊断/ ;/ 故障/ 检测/ ;/ 故障/ 定位/ ;/ 故障/ 排除/ 1/ 引言/ 随着/ 社会/ 的/ 不断进步/ 和/ 计算机/ 科学技术/ 的/ 飞速/ Page2/ 所/ 占/ 比重/ 越来越/ 大/ [/ 1/ ]/ ./ 人们/ 对/ 软件/ 质量/ 要求/ 越来越/ 高/ ./ 许多/ 计算机/ 科学家/ 在/ 讨论/ 21/ 世纪/ 计算机科学/ 发展/ 方向/ 和/ 策略/ 时/ ,/ 将/ 提高/ 软件/ 质量/ 放在/ 优先/ 于/ 提高/ 软件/ 功能/ 和/ 性能/ 的/ 地位/ [/ 2/ ]/ ./ 软件/ 一旦/ 出现/ 故障/ ,/ 轻则/ 给/ 人们/ 工作/ 、/ 生活/ 带来/ 不便/ ,/ 重/ 则/ 可能/ 造成/ 巨大/ 的/ 经济损失/ ,/ 甚至/ 危及/ 人/ 的/ 生命安全/ ./ 例如/ ,/ 1996/ 年/ Ariane5/ 运载火箭/ 的/ 发射/ 失败/ 是/ 由/ 软件/ 故障/ 引起/ 的/ ./ 因此/ ,/ 研究/ 软件/ 故障诊断/ 具有/ 重要/ 意义/ ./ 目前/ 国内外/ 开展/ 的/ 与/ 软件/ 故障诊断/ 有关/ 的/ 研究/ 工作/ ,/ 包括/ 针对/ 软件/ 故障/ 概念/ [/ 3/ -/ 7/ ]/ 、/ 软件/ 故障/ 模型/ [/ 8/ -/ 11/ ]/ 、/ 软件/ 故障/ 描述/ 方法/ [/ 12/ -/ 13/ ]/ 、/ 软件/ 故障/ 检测/ 方法/ [/ 14/ -/ 20/ ]/ 、/ 软件/ 故障/ 定位/ 方法/ [/ 21/ -/ 26/ ]/ 、/ 软件/ 故障/ 预防/ 方法/ [/ 5/ ,/ 27/ -/ 29/ ]/ 等/ 的/ 研究/ ./ 在/ 软件/ 故障/ 概念/ 方面/ ,/ 文献/ [/ 3/ ]/ 将/ 软件/ 故障/ 定义/ 为/ 计算机程序/ 中/ 不/ 正确/ 的/ 步骤/ 、/ 处理/ 或者/ 数据/ 定义/ ./ 文献/ [/ 5/ ]/ 将/ 软件/ 故障/ 定义/ 为/ 软件/ 运行/ 过程/ 中/ 出现/ 的/ 一种/ 不/ 希望/ 或/ 不可/ 接受/ 的/ 内部/ 状态/ ./ 文献/ [/ 6/ ]/ 则/ 将/ 软件/ 故障/ 区分/ 为/ 语法/ 大小/ 和/ 语义/ 大小/ ,/ 语法/ 大小/ 为/ 受/ 一个/ 故障/ 影响/ 的/ 代码/ 行/ 数/ ,/ 语义/ 大小/ 为/ 其/ 输出/ 结果/ 不/ 正确/ 的/ 输入/ 空间/ 的/ 大小/ ./ 文献/ [/ 7/ ]/ 将/ 软件/ 故障/ 定义/ 为/ 软件系统/ 中/ 的/ 结构/ 不/ 完善/ ,/ 它/ 可能/ 导致系统/ 的/ 最终/ 失效/ ./ 在/ 软件/ 故障/ 模型/ 方面/ ,/ 已有/ 研究/ 工作/ 根据/ 错误/ 发生/ 阶段/ 、/ 故障/ 引起/ 后果/ 、/ 错误/ 性质/ 、/ 错误/ 类型/ 等/ 建立/ 软件/ 故障/ 模型/ [/ 14/ ]/ ./ 文献/ [/ 8/ ]/ 针对/ 科学计算/ 程序/ 的/ 软件/ 建立/ 计算/ 型/ 、/ 分支/ 型/ 、/ 循环型/ 、/ 功能型/ 、/ 死锁/ 型/ 、/ 测试/ 型/ 等/ 几种/ 故障/ 模型/ ./ 文献/ [/ 9/ ]/ 针对/ C语言/ 程序/ 建立/ 内存/ 泄漏/ 等/ 几种/ 故障/ 模型/ ./ 文献/ [/ 10/ ]/ 提出/ 面向/ 侧面/ (/ AOP/ )/ 编程语言/ AspectJ/ 的/ Pointcut/ 的/ 故障/ 模型/ ./ 在/ 软件/ 故障/ 描述/ 方面/ ,/ 文献/ [/ 12/ ]/ 采用/ 调用/ 序列/ 描述/ 软件/ 故障/ ./ 文献/ [/ 13/ ]/ 对/ 已有/ 各种/ 描述/ 软件/ 运行/ 正确/ 结果/ 的/ 方法/ 进行/ 分类/ 和/ 总结/ ./ 软件测试/ 是/ 一种/ 重要/ 的/ 软件/ 故障/ 检测/ 手段/ ./ 文献/ [/ 20/ ]/ 介绍/ 软件测试/ 的/ 基本/ 思想/ ,/ 讨论/ 面向/ 路径/ 的/ 测试数据/ 自动/ 生成/ [/ 17/ ]/ 等/ 问题/ ,/ 探讨/ 软件测试/ 的/ 发展趋势/ ./ 代码/ 审查/ 是/ 一种/ 重要/ 的/ 软件测试/ 方法/ ./ 检查表/ 是/ 代码/ 审查/ 的/ 核心/ ./ 文献/ [/ 16/ ]/ 针对/ C/ 、/ PL/ // M/ 、/ 汇编语言/ 所/ 编写/ 的/ 程序/ 容易/ 出现/ 的/ 故障/ ,/ 指出/ 检查表/ 应该/ 包括/ 的/ 一些/ 内容/ ./ 文献/ [/ 19/ ]/ 研究/ 在/ 对/ 源代码/ 进行/ 编译/ 之前/ 自动检测/ 和/ 改正/ 静态/ 数组/ 下标/ 越界/ 、/ 函数调用/ 时/ 参数/ 类型/ 不/ 正确/ 、/ switch/ 语句/ 无/ default/ 处理/ 三类/ 故障/ ./ 模型/ 检验/ 也/ 是/ 一类/ 重要/ 的/ 软件/ 故障/ 检测/ 手段/ [/ 15/ ]/ ./ 在/ 软件/ 故障/ 定位/ 方面/ ,/ 文献/ [/ 21/ ]/ 提出/ 一种/ 组合/ 运行/ 产生/ 正确/ 结果/ 和/ 错误/ 结果/ 的/ 两组/ 测试用例/ 的/ 中间状态/ ,/ 采用/ Delta/ 调试/ 算法/ [/ 22/ ]/ 从/ 空间/ 上/ 定位/ 引起/ 故障/ 的/ 变量/ ,/ 从/ 时间/ 上/ 定位/ 引起/ 软件/ 故障/ 的/ 时刻/ ./ 文献/ [/ 23/ ]/ 提出/ 一种/ 方法/ 将/ Delta/ 调试/ 算法/ 与/ 前/ 向/ 、/ 后/ 向/ 动态/ 切片/ 方法/ 结合/ 起来/ ,/ 以/ 缩小/ 搜索/ 有/ 缺陷/ 代码/ 范围/ 的/ 方法/ ./ 文献/ [/ 24/ ]/ 对/ 软件/ 组合/ 测试/ 基本/ 模型/ 进行/ 研究/ ,/ 并/ 提出/ 一种/ 基于/ 组合/ 测试/ 的/ 软件/ 故障/ 定位/ 方法/ ./ 文献/ [/ 25/ ]/ 采用/ 谓词/ 切换/ 的/ 思想/ 定位/ 软件/ 故障/ ./ 文献/ [/ 26/ ]/ 提出/ 一种/ 优化/ 测试用例/ 集/ 的/ 方法/ ,/ 使得/ 它/ 具备/ 较强/ 的/ 软件/ 故障/ 定位/ 能力/ ./ 当前/ 硬件/ 系统/ 故障诊断/ 研究/ 和/ 实践/ 取得/ 较大/ 进展/ ,/ 形成/ 基于/ 解析/ 模型/ 、/ 信号处理/ 、/ 人工智能/ 等/ 的/ 故障诊断/ 方法/ [/ 30/ -/ 32/ ]/ ,/ 并/ 有/ 大量/ 成功/ 案例/ ./ 硬件/ 系统/ 故障诊断/ 过程/ 包括/ 故障/ 检测/ 、/ 故障/ 分离/ 、/ 故障/ 治理/ 与/ 预防/ 等/ 步骤/ ./ 故障/ 检测/ ,/ 包括/ 状态/ 监测/ ,/ 是/ 采集/ 系统/ 运行/ 参数/ 、/ 获取/ 系统/ 状态/ 信息/ 、/ 识别系统/ 是否/ 存在/ 故障/ 而/ 进行/ 的/ 检查和/ 测试/ 过程/ ./ 故障/ 分离/ ,/ 或称/ 分析/ 与/ 隔离/ ,/ 是/ 根据/ 故障/ 检测/ 所/ 获得/ 的/ 系统/ 状态/ 信息/ ,/ 进行/ 分析/ ,/ 包括/ 故障/ 分析/ ,/ 以/ 确定/ 系统/ 是否/ 存在/ 故障/ ,/ 识别/ 故障/ 特性/ ,/ 进行/ 故障/ 隔离/ ,/ 即/ 对/ 故障/ 定位/ ./ 治理/ 与/ 预防/ ,/ 是/ 指/ 根据/ 故障诊断/ 的/ 结果/ ,/ 按照/ 已/ 识别/ 的/ 系统/ 状态/ 的/ 不同/ 情况/ ,/ 或者/ 针对/ 故障/ 采取/ 纠正/ 措施/ ,/ 彻底消除/ 故障/ ;/ 或者/ 预测/ 未来/ 、/ 决定/ 防治/ 潜在/ 故障/ 发生/ 的/ 维修/ 对策/ ./ 软件/ 故障诊断/ 研究/ 较之/ 硬件/ 系统/ 故障诊断/ 起步/ 较晚/ ./ 软件/ 种类/ 繁多/ ,/ 其/ 功能/ 各式各样/ ,/ 内部/ 状态/ 、/ 路径/ 高度/ 复杂/ [/ 14/ ]/ ,/ 运行/ 时/ 内部/ 不/ 透明/ ,/ 出现/ 故障/ 时/ 外部/ 表现形式/ 复杂/ 多样/ ,/ 致使/ 软件/ 故障诊断/ 比较/ 困难/ ./ 并且/ 从/ 软件/ 故障诊断/ 研究进展/ 可知/ ,/ 目前/ 所/ 进行/ 的/ 多/ 为/ 软件/ 故障诊断/ 中/ 单项/ 活动/ 的/ 研究/ ,/ 较/ 少有/ 对/ 各项/ 诊断/ 活动/ 及其/ 相应/ 方法/ 进行/ 有效/ 集成/ 的/ 研究/ ,/ 使得/ 软件/ 故障诊断/ 过程/ 缺乏/ 系统/ 的/ 框架/ 指导/ ,/ 比较/ 盲目/ ./ 本文/ 借鉴/ 硬件/ 系统/ 故障诊断/ 的/ 思路/ ,/ 研究/ 将/ 软件/ 故障/ 检测/ 、/ 定位/ 、/ 排除/ 这些/ 活动/ 及其/ 相应/ 方法/ 集成/ 在/ 一起/ 的/ 软件/ 故障诊断/ 过程/ 框架/ ,/ 为/ 规范/ 地/ 运用/ 各种/ 方法/ 、/ 系统地/ 进行/ 软件/ 故障诊断/ 提供/ 指导/ ./ 2/ 软件/ 失效/ 机理/ 与/ 软件/ 故障/ 产生/ 原因/ 2.1/ 软件/ 失效/ 机理/ 研究/ 软件/ 失效/ 机理/ 是/ 软件/ 故障诊断/ 的/ 前提/ ./ 由于/ 软件/ 内部/ 逻辑/ 复杂/ ,/ 运行/ 环境/ 动态变化/ ,/ 且/ 不同/ 的/ 软/ Page3/ 产生/ 含有/ 缺陷/ 的/ 软件/ 的/ 人为/ 行动/ [/ 4/ ]/ ./ 件/ 差异/ 很大/ ,/ 因而/ 软件/ 失效/ 机理/ 常常/ 有/ 不同/ 的/ 表现形式/ ./ 但/ 总的来说/ ,/ 软件/ 失效/ 机理/ 可以/ 描述/ 为/ :/ 软件/ 错误/ →/ 软件缺陷/ →/ 软件/ 故障/ →/ 软件/ 失效/ 的/ 过程/ [/ 5/ ]/ ./ 让/ D/ ,/ R/ 分别/ 为/ 一个/ 可数/ 的/ 集合/ ,/ 代表/ 软件/ 的/ 输入/ 、/ 输出/ 数据/ 集合/ ;/ P/ 为/ 从/ D/ 到/ R/ 的/ 可/ 计算/ 函数/ 集合/ 的/ 子集/ ,/ 它/ 代表/ 以/ D/ 和/ R/ 中/ 的/ 数据/ 为/ 输入/ 和/ 输出/ 的/ 程序/ 集合/ ;/ S/ 为/ 从/ D/ 到/ R/ 的/ 二元关系/ 的/ 一个/ 子集/ ,/ 它/ 代表/ 软件/ 规约/ 的/ 集合/ [/ 2/ ]/ ./ 定义/ 1/ ./ 软件/ Sftw/ =/ 〈/ p/ ,/ D/ ,/ R/ ,/ Dcmt/ 〉/ 是/ 一个/ 四元组/ ,/ 其中/ p/ ∈/ P/ ,/ Dcmt/ 是/ 与/ 该/ 软件开发/ 、/ 运行/ 、/ 维护/ 、/ 使用/ 和/ 培训/ 有关/ 的/ 图文/ 材料/ ,/ 即/ 软件/ 文档/ [/ 33/ ]/ ./ 定义/ 2/ ./ 软件/ 错误/ (/ softwareerror/ )/ 是/ 指/ 导致/ 定义/ 3/ ./ 软件缺陷/ (/ softwaredefect/ )/ 是/ 存在/ 于/ 软件/ (/ 文档/ 、/ 数据/ 、/ 程序/ )/ 之中/ 的/ 那些/ 不/ 希望/ 或/ 不可/ 接受/ 的/ 偏差/ ,/ 其/ 结果/ 是/ 软件/ 运行/ 于/ 某/ 一/ 特定条件/ 时/ 出现/ 软件/ 故障/ ./ 软件缺陷/ 是/ 存在/ 于/ 软件/ 内部/ 的/ 、/ 静态/ 的/ 一种/ 形式/ [/ 5/ ]/ ./ 定义/ 4/ ./ 对于/ 软件/ Sftw/ =/ 〈/ p/ ,/ D/ ,/ R/ ,/ Dcmt/ 〉/ 和/ Sftw/ 的/ 规约/ s/ ∈/ S/ ,/ 若/ / D1/ / D/ ,/ 使得/ D1/ →/ / / pR/ ≠/ D1/ →/ / / sR/ ,/ 则/ 称/ Sftw/ 中/ 存在/ 软件/ 故障/ (/ softwarefault/ )/ [/ 6/ ]/ ./ 非/ 形式化/ 地说/ ,/ 软件/ 故障/ 是/ 指/ 软件/ 运行/ 过程/ 中/ 出现/ 的/ 一种/ 不/ 希望/ 或/ 不可/ 接受/ 的/ 内部/ 状态/ ,/ 即/ 无法/ 满足/ 人们/ 所/ 预期/ 的/ 正确/ 规约/ ./ 出现/ 软件/ 故障/ 时若/ 无/ 适当/ 措施/ (/ 如/ 容错/ )/ 加以/ 及时处理/ ,/ 便/ 产生/ 软件/ 失效/ ./ 软件/ 故障/ 是/ 一种/ 动态/ 行为/ ./ 定义/ 5/ ./ 软件/ 失效/ (/ softwarefailure/ )/ 是/ 指/ 软件/ 运行/ 时/ 产生/ 的/ 一种/ 不/ 希望/ 或/ 不可/ 接受/ 的/ 外部/ 行为/ 结果/ [/ 5/ ]/ ./ 需要/ 说明/ 的/ 是/ ,/ 故障/ 、/ 错误/ 、/ 缺陷/ 、/ 失效/ 等/ 概念/ 的/ 含义/ 非常/ 接近/ ,/ 当前/ 有关/ 这些/ 概念/ 的/ 定义/ 各/ 文献/ 不/ 统一/ ,/ 容易/ 混淆/ ./ 至今/ 很多/ 文献/ 都/ 没有/ 严格/ 区分/ 这些/ 概念/ ./ 例如/ ,/ 文献/ [/ 3/ ]/ 和/ 文献/ [/ 4/ ]/ 均/ 将/ 故障/ 、/ 缺陷/ 视为/ 同义词/ ./ 本文/ 通过/ 给出/ 以上/ 定义/ 区分/ 这些/ 概念/ ./ 2.2/ 软件/ 故障/ 产生/ 原因/ 我们/ 认为/ ,/ 软件/ 发生/ 故障/ 的/ 原因/ 主要/ 有/ 两个/ 方面/ :/ (/ 1/ )/ 内部/ 因素/ ./ 随着/ 计算机控制/ 对象/ 复杂程度/ 提高/ 和/ 软件/ 功能/ 增强/ ,/ 软件/ 规模/ 不断/ 增大/ ./ 例如/ ,/ WindowsNT/ 操作系统/ 的/ 代码/ 大约/ 有/ 3200/ 万行/ ./ 并且/ 软件/ 内部/ 状态/ 、/ 路径/ 高度/ 复杂/ ./ 参与/ 软件开发/ 各个/ 阶段/ 的/ 人/ 的/ 思维/ 和/ 交流/ 不/ 可能/ 完美无缺/ ,/ 在/ 设计/ 这样/ 复杂/ 的/ 系统/ 时/ 难免/ 犯错误/ ,/ 导致/ 软件/ 留下/ 缺陷/ ./ (/ 2/ )/ 外部/ 因素/ ./ 通常/ 软件/ 是/ 在/ 开发/ 环境/ 中/ 进行/ 测试/ ,/ 在/ 运行/ 环境/ 中/ 使用/ ./ 对/ 软件/ 进行/ 充分/ 测试/ 往往/ 很/ 困难/ ,/ 进行/ 穷举/ 测试/ ,/ 达到/ 完全/ 的/ 路径/ 覆盖/ 、/ 状态/ 覆盖/ 几乎/ 不/ 可能/ ./ 所以/ ,/ 即使/ 是/ 在/ 开发/ 软件产品/ 时/ 进行/ 过/ 大量/ 测试/ ,/ 也/ 不能/ 完全/ 发现/ 和/ 消除/ 可能/ 存在/ 的/ 缺陷/ ;/ 同时/ 软件产品/ 的/ 开发/ 环境/ 与/ 使用/ 环境/ 往往/ 存在/ 较大/ 的/ 差异/ ,/ 因此/ 软件产品/ 在/ 使用/ 时/ 仍然/ 可能/ 发生/ 故障/ ./ 3/ 软件/ 故障/ 模型/ 文献/ [/ 8/ ]/ 认为/ 软件/ 故障/ 模型/ 是/ 一些/ 基本/ 故障/ 的/ 组合/ ,/ 即/ 软件/ 故障/ 模型/ 应该/ 是/ 软件/ 物理/ 错误/ 的/ 抽象/ ,/ 并/ 能/ 反映/ 其本质/ 的/ 一定/ 程度/ 的/ 组合/ ./ 文献/ [/ 11/ ]/ 认为/ 故障/ 模型/ 是/ 一类/ 有/ 某种/ 相同/ 属性/ 的/ 故障/ 集合/ ./ 我们/ 认为/ ,/ 软件/ 故障/ 模型/ 是/ 软件/ 故障/ 的/ 外部/ 宏观/ 表现形式/ ./ 这里/ 的/ 外部/ 宏观/ 表现形式/ 不仅/ 包括/ 软件/ 运行/ 时/ 可/ 观察/ 到/ 的/ 状况/ 征兆/ 和/ 可/ 检测/ 到/ 的/ 内部/ 状态/ ,/ 还/ 包括/ 程序代码/ 的/ 结构/ 、/ 处理/ 逻辑/ 、/ 复杂性/ 以及/ 软件/ 文档/ 、/ 数据/ 的/ 有关/ 静态/ 信息/ 等/ ./ 软件/ 故障/ 模型/ 提供/ 了/ 软件/ 故障/ 的/ 一种/ 分类/ 方法/ ,/ 将/ 某些/ 具有/ 相同/ 属性/ 的/ 软件/ 故障/ 划分/ 在/ 一起/ ./ 根据/ 软件缺陷/ 的/ 产生/ 阶段/ ,/ 可以/ 将/ 软件/ 故障/ 模型/ 分成/ 需求/ 型/ 故障/ 、/ 设计/ 型/ 故障/ 、/ 实现/ 与/ 编码/ 型/ 故障/ 、/ 集成型/ 故障/ 、/ 测试/ 型/ 故障/ 和/ 配置管理/ 型/ 故障/ 等/ ./ (/ 1/ )/ 需求/ 型/ 故障/ 包括/ 功能/ 或者/ 性能/ 规定/ 错误/ 、/ 遗漏/ 某些/ 功能/ ,/ 多余/ 某些/ 功能/ ,/ 功能/ 不/ 完善/ ,/ 为/ 用户/ 提供/ 的/ 信息/ 有/ 错误/ 或/ 不/ 确切/ ,/ 对/ 意外/ 情况/ 的/ 处理错误/ ,/ 对/ 用户/ 的/ 设计/ 界面/ 要求/ 理解/ 错误/ ,/ 用户/ 接口/ 不/ 完善/ ,/ 需求/ 分析/ 文档/ 有误/ ,/ 叙述/ 不/ 清晰/ ,/ 设计/ 人员/ 、/ 测试人员/ 没有/ 在/ 需求/ 分析阶段/ 就/ 介入/ ,/ 需求/ 变更/ 后/ 软件设计/ 、/ 代码/ 未/ 及时/ 更改/ 等/ ./ (/ 2/ )/ 设计/ 型/ 故障/ 包括/ 软件结构/ 设计/ 缺陷/ 、/ 数据结构/ 或/ 数据处理/ 设计/ 缺陷/ 、/ 中断/ 和/ 现场/ 保护/ 缺陷/ 、/ 初始化/ 和/ 复位/ 缺陷/ 、/ 容错/ 和/ 防错/ 设计/ 缺陷/ 、/ 软件设计/ 文档/ 有误/ 等/ ./ 软件结构/ 设计/ 缺陷/ 包括/ 程序控制/ 流/ 或/ 控制/ 顺序/ 有误/ 、/ 处理过程/ 有误/ 等/ ./ 程序控制/ 流/ 方面/ 的/ 故障/ 又/ 包括/ 分支/ 型/ 故障/ 和/ 循环型/ 故障/ 等/ ./ 分支/ 型/ 故障/ 包括/ 谓词/ 的/ 错误/ 、/ 判定/ 变量/ 赋值/ 错误/ 、/ 谓词/ 操作符/ 不/ 正确/ 或少/ 操作符/ 、/ 谓词/ 的/ 结构/ 不/ 正确/ (/ if/ 与/ else/ 不/ 匹配/ ,/ 分/ 号/ 位置/ 不/ 对/ )/ 、/ switch/ 语句/ 缺少/ 默认/ 情况/ 的/ 处理/ 、/ switch/ 语句/ 中/ 的/ case/ 处理/ 后/ 没有/ 通过/ break/ 退出/ 等/ ./ 循环型/ 故障/ 主要/ 包括/ 永不/ 循环/ 故障/ 和/ 死循环/ 故障/ ./ 数据结构/ 或/ 数据处理/ 设计/ 缺陷/ 包括/ 数据/ 定义/ 或/ 数据结构/ 定义/ 有误/ 、/ 数据/ 存取/ 有误/ 、/ 数据/ 存在/ 冗/ Page4/ 余/ 、/ 算法/ 不/ 完善/ 或/ 不当/ 、/ 对/ 累积/ 误差/ 和/ 舍入/ 误差/ 考虑不周/ 、/ 边界值/ 处理不当/ 、/ 堆栈/ 处理不当/ 、/ 忽视/ 异常情况/ 的/ 处理/ 、/ 整数/ 或/ 浮点数/ 的/ 上溢/ // 下溢/ 时/ 缺乏/ 保护/ ,/ 数据/ 的/ 有效位数/ 不够/ 等/ ./ (/ 3/ )/ 实现/ 与/ 编码/ 型/ 故障/ 包括/ 编码/ 错/ 或/ 按键/ 错/ 、/ 编程/ 笔误/ 、/ 违背/ 编码标准/ 、/ 语句/ 使用不当/ ,/ 或者/ 存在/ 不可/ 达/ 代码/ 、/ 数据类型/ 使用不当/ 、/ 数据类型/ 不/ 匹配/ 、/ 非法/ 的/ 数据/ 类型转换/ 、/ 正负号/ 处理不当/ 、/ 用/ 拷贝/ 方式/ 复制/ 的/ 程序段/ 修改/ 不/ 到位/ 、/ 数组/ 下标/ 越界/ 、/ 数组/ 下标/ 从/ 0/ 开始/ 与/ 从/ 1/ 开始/ 相/ 混淆/ 、/ 全局变量/ 与/ 局部变量/ 相/ 混淆/ 、/ 静态/ 变量/ 与/ 动态/ 变量/ 相/ 混淆/ 、/ 指针/ 变量/ 使用不当/ 、/ 坏/ 的/ 存储/ 分配/ ,/ 或者/ 内存/ 泄漏/ 、/ 非法/ 的/ 算术/ 运算/ 、/ 两个/ 浮点数/ 进行/ 相等/ 比较/ ,/ 或者/ 在/ 一定/ 范围/ 内/ 的/ 整数/ 进行/ 相等/ 比较/ ,/ 函数调用/ 不当/ 等/ ./ (/ 4/ )/ 集成型/ 故障/ 包括/ 接口/ 型/ 故障/ 、/ 时序/ 和/ 时限/ 型/ 故障/ 、/ 死锁/ 型/ 故障/ 、/ 运行/ 环境/ 型/ 故障/ 等/ ./ 接口/ 型/ 故障/ 包括/ 接口协议/ 不合理/ 、/ 各分/ 系统软件/ 的/ 接口/ 设计/ 未/ 考虑/ 全/ 系统/ 的/ 接口协议/ 、/ 接口/ 设计/ 不/ 完善/ 、/ 状态/ 定义/ 不/ 一致/ 或/ 指令/ 格式/ 定义/ 不/ 一致/ 、/ 未/ 遵循/ 已有/ 接口协议/ 、/ 软件/ 的/ 内部/ 接口/ 、/ 外部/ 接口/ 有误/ 、/ 软件/ 各/ 相关/ 部分/ 在/ 时间/ 配合/ 、/ 数据/ 吞吐量/ 等/ 方面/ 不/ 协调/ ,/ 未/ 考虑/ 到/ 设备/ 或/ 组合/ 间/ 的/ 并发/ 性/ 等/ ./ 时序/ 和/ 时限/ 型/ 故障/ 包括/ 未/ 处理/ 好/ 特殊/ 、/ 例外/ 和/ 异常情况/ ,/ 未/ 处理/ 好/ 软件/ 与/ 硬件/ 或硬件/ 与/ 硬件/ 之间/ 的/ 协同/ ,/ 主机/ 、/ 从机/ 时间/ 关系/ 不/ 协调/ ,/ 实时/ 软件/ 的/ 任务/ 和/ 中断/ 的/ 优先级/ 定义/ 不当/ ,/ 未/ 考虑/ 硬件/ 性能/ 的/ 容差/ ,/ 存在/ 无限/ 循环/ 的/ 程序段/ ,/ 时间/ 开销/ 计算/ 不准/ 、/ 不全/ ,/ 未留/ 必要/ 的/ 余量/ 等/ ./ 运行/ 环境/ 型/ 故障/ 包括/ 对/ 所用/ 的/ 可编程/ 器件/ 了解/ 不够/ 、/ 对/ 操作系统/ 了解/ 不够/ 、/ 在/ 调用/ 操作系统/ 、/ 恢复/ 、/ 诊断/ 或者/ 引用/ 操作系统/ 环境/ 的/ 过程/ 中/ 出错/ 、/ 对/ 引进/ 的/ 操作系统/ 中/ 存在/ 的/ 问题/ 不/ 了解/ 、/ 对/ 开发/ 环境/ 与/ 运行/ 环境/ 的/ 差异/ 考虑/ 不够/ 、/ 对/ 运行/ 环境/ 中人/ 的/ 操作/ 时间/ 考虑/ 不够/ 等/ ./ (/ 5/ )/ 测试/ 型/ 故障/ 是/ 指/ 测试/ 目的/ 不/ 明确/ 、/ 测试计划/ 有误/ 、/ 测试/ 设计/ 有误/ 、/ 测试/ 实施/ 有误/ 、/ 测试/ 文档/ 有误/ 、/ 测试用例/ 不/ 充分/ 、/ 测试环境/ 有误/ 等/ 造成/ 的/ 故障/ ./ 由于/ 这些/ 故障/ 的/ 存在/ ,/ 导致/ 软件测试/ 时/ 不/ 符合/ 正确/ 的/ 软件/ 规约/ ,/ 将/ 本来/ 是/ 正确/ 的/ 运行/ 结果/ 判断/ 为/ 错误/ 的/ ,/ 或者/ 将/ 本来/ 是/ 错误/ 的/ 运行/ 结果/ 判断/ 为/ 正确/ 的/ ./ 前者/ 造成/ 对/ 软件/ 进行/ 不必要/ 的/ 修改/ 而/ 带来/ 缺陷/ [/ 5/ ]/ ,/ 后者/ 造成/ 遗漏/ 本应/ 能/ 发现/ 的/ 缺陷/ ./ (/ 6/ )/ 配置管理/ 型/ 故障/ 包括/ 配置管理/ 不/ 严格/ 导致/ 软件/ 版本/ 不/ 一致/ 、/ 软件/ 变更/ 控制/ 不严/ 、/ 变更/ 时未/ 考虑/ 到/ 对/ 软件/ 其余部分/ 的/ 影响/ 、/ 软件/ 变更/ 后/ 未/ 进行/ 严格/ 的/ 回归/ 测试/ 、/ 使用/ 含有/ “/ 多余/ 物/ ”/ 的/ “/ 实验/ 版/ ”/ 等/ ./ 4/ 一种/ 软件/ 故障诊断/ 过程/ 框架/ 定义/ 6/ ./ 软件/ 故障诊断/ 是/ 根据/ 软件/ Sftw/ =/ 〈/ p/ ,/ D/ ,/ R/ ,/ Dcmt/ 〉/ 的/ 静态/ 表现形式/ 和/ 动态/ 运行/ 状态/ 信息/ 查找/ 故障/ 源/ ,/ 并/ 确定/ 相应/ 纠错/ 决策/ 的/ 一门/ 技术/ ./ 4.1/ 软件/ 故障诊断/ 的/ 含义/ 人/ 在/ 参与/ 软件/ 生存/ 周期/ 各个/ 阶段/ 工作/ 时/ 难免/ 出现/ 错误/ ./ 因此/ ,/ 从/ 广义/ 上/ 说/ ,/ 软件/ 故障诊断/ 的/ 目标/ 包括/ 软件/ 需求/ 分析/ 、/ 设计/ 、/ 编码/ 、/ 测试/ 、/ 使用/ 、/ 维护/ 等/ 软件/ 生存/ 周期/ 各/ 阶段/ 所/ 造成/ 的/ 缺陷/ ./ 软件/ 故障诊断/ ,/ “/ 诊/ ”/ 在于/ 进行/ 客观/ 的/ 状态/ 检测/ ,/ 包括/ 采用/ 各种/ 测量/ 、/ 分析/ 和/ 诊别/ 方法/ ;/ “/ 断/ ”/ 则/ 需要/ 确定/ 软件/ 故障/ 特性/ 、/ 软件/ 故障/ 模型/ 、/ 软件/ 故障/ 部位/ 以及/ 说明/ 软件/ 故障/ 产生/ 的/ 原因/ ,/ 并且/ 提出/ 相应/ 的/ 纠正/ 措施/ 和/ 预防措施/ 等/ ./ 4.2/ 一种/ 软件/ 故障诊断/ 过程/ 框架/ 本文/ 提出/ 一种/ 软件/ 故障诊断/ 过程/ 框架/ ,/ 它/ 由/ 故障/ 检测/ 、/ 故障/ 定位/ 、/ 故障/ 排除/ 和/ 交付/ 等/ 组成/ ,/ 见图/ 1/ ./ (/ 1/ )/ 软件/ 故障/ 检测/ 是/ 根据/ 系统/ 提出/ 的/ 软件/ 故障诊断/ 请求/ ,/ 采取/ 一定/ 的/ 检测/ 方法/ ,/ 获取/ 软件/ 中/ 的/ 各种/ 信息/ ,/ 获得/ 可能/ 出现/ 软件/ 故障/ 的/ 征兆/ ,/ 识别/ 软件/ 是否/ 正常/ 运行/ 或/ 存在/ 故障/ ,/ 并/ 为/ 软件/ 故障/ 定位/ 提供/ 依据/ ./ 这些/ 检测/ 方法/ 包括/ 根据/ 检查表/ 和/ 规则/ 等/ 进行/ 静态/ 测试/ 、/ 设计/ 测试用例/ 进行/ 动态/ 测试/ 、/ 建立/ 软件/ 故障/ 树/ 进行/ 分析/ 、/ 采用/ 变异/ 测试方法/ 进行/ 软件/ 故障模拟/ 或者/ 建立/ 系统/ 模型/ 进行/ 形式化/ 验证/ 等/ ./ (/ 2/ )/ 软件/ 故障/ 定位/ 是/ 根据/ 软件/ 故障/ 检测/ 提供/ 的/ 能/ 反映/ 软件/ 状况/ 的/ 征兆/ ,/ 与/ 某/ 故障/ 模式/ 进行/ 比较/ ,/ 采/ Page5/ 用/ 内存/ 信息/ 转储/ 、/ 打印/ 中间/ 结果/ 的/ 方法/ ,/ 进行/ 跟踪/ 寻迹/ 、/ 归纳/ 分析/ 、/ 演绎/ 分析/ 、/ 控制流/ 分析/ 、/ 数据流/ 分析/ 和/ 程序/ 切片/ 等/ 技术/ 进一步/ 收集/ 软件/ 的/ 历史/ 和/ 使用/ 信息/ ,/ 固定/ 软件/ 故障/ ,/ 从而/ 诊断/ 软件/ 故障/ 的/ 性质/ 和/ 程度/ 、/ 确定/ 缺陷/ 产生/ 原因/ 或/ 发生/ 部位/ ,/ 为/ 纠正/ 缺陷/ 、/ 排除/ 软件/ 故障/ 做好/ 准备/ ./ (/ 3/ )/ 软件/ 故障/ 排除/ 是/ 当/ 诊断/ 出/ 软件/ 中/ 存在/ 缺陷/ ,/ 就/ 其/ 原因/ 、/ 部位/ 和/ 危险/ 程度/ 进行/ 分析/ ,/ 确定/ 纠正/ 缺陷/ 、/ 排除/ 软件/ 故障/ 的/ 措施/ ,/ 包括/ 针对/ 软件缺陷/ 产生/ 的/ 具体/ 原因/ 修改/ 程序代码/ 、/ 数据/ 或/ 文档/ 等/ ,/ 并/ 进行/ 软件/ 复查/ 和/ 回归/ 测试/ ,/ 确认/ 软件/ 故障/ 排除/ ,/ 软件/ 功能/ 正常/ ./ (/ 4/ )/ 交付/ 是/ 当/ 对/ 软件/ 故障/ 进行/ 检测/ 、/ 定位/ ,/ 采取措施/ 排除/ 软件/ 故障/ 后/ ,/ 即可/ 将/ 软件/ 交付使用/ ./ 从图/ 1/ 可以/ 看出/ ,/ 软件/ 故障诊断/ 是/ 一个/ 信息反馈/ 的/ 过程/ ,/ 可/ 根据/ 需要/ 进行/ 迭代/ ./ 该/ 框架/ 的/ 特点/ 是/ :/ 比较/ 系统/ 、/ 全面/ 地/ 规范/ 了/ 软件/ 故障诊断/ 过程/ 中/ 的/ 故障/ 检测/ 、/ 故障/ 定位/ 、/ 故障/ 排除/ 和/ 交付/ 活动/ ,/ 并/ 提供/ 了/ 一些/ 有效/ 的/ 检测/ 、/ 定位/ 、/ 排除/ 软件/ 故障/ 的/ 方法/ ,/ 对/ 软件/ 故障诊断/ 过程/ 进行/ 系统/ 的/ 指导/ ,/ 以/ 避免/ 盲目/ 地/ 进行/ 故障诊断/ ./ 一般来说/ ,/ 在/ 工程/ 应用/ 中/ 进行/ 软件/ 故障诊断/ 的/ 前提/ 是/ :/ 系统故障/ 经/ 分析/ 、/ 检测/ 确认/ 不是/ 由/ 硬件/ 故障/ 引起/ ,/ 或/ 重点/ 怀疑/ 是/ 由/ 软件/ 故障/ 引起/ ./ 盲目/ 地/ 进行/ 软件/ 故障诊断/ 将/ 影响/ 系统/ 故障诊断/ 效率/ ./ 系统/ 出现/ 复杂/ 故障/ 时/ ,/ 也/ 可/ 结合/ 硬件/ 检测/ ,/ 同时/ 进行/ 软件/ 静态/ 检测/ ,/ 这样/ 可以/ 提高/ 系统/ 故障诊断/ 速度/ ./ 4.3/ 软件/ 故障/ 检测/ 4.3/ ./ 1/ 软件/ 故障/ 检测/ 方法/ 树/ 分析/ 、/ 软件/ 故障模拟/ 和/ 形式化/ 检测/ 方法/ 等/ ./ 软件/ 故障/ 检测/ 是/ 软件/ 故障/ 定位/ 和/ 排除/ 的/ 前提/ ./ 软件/ 故障/ 检测/ 的/ 方法/ 包括/ 软件测试/ 、/ 软件/ 故障/ (/ 1/ )/ 软件测试/ [/ 2/ ,/ 14/ ,/ 18/ ,/ 20/ ]/ 现有/ 软件测试/ 技术/ 通常/ 分为/ 静态/ 测试/ 和/ 动态/ 测试/ ./ 静态/ 测试/ 是/ 不/ 执行/ 程序代码/ 而/ 寻找/ 程序代码/ 中/ 可能/ 存在/ 的/ 缺陷/ 或/ 评估/ 程序代码/ 的/ 过程/ ./ 静态/ 测试/ 主要/ 包括/ 由/ 人工/ 进行/ 的/ 桌面/ 检查/ 、/ 代码/ 审查/ 、/ 代码/ 走查/ 等/ ./ 动态/ 测试通过/ 在/ 抽样/ 测试数据/ 上/ 运行/ 程序/ 来/ 检验/ 程序/ 的/ 动态/ 行为/ 和/ 运行/ 结果/ 以/ 发现/ 缺陷/ ./ 动态/ 测试/ 分为/ 基于/ 规约/ 的/ 测试/ (/ 又称/ 黑盒/ 测试/ 或/ 功能测试/ )/ 、/ 基于/ 程序/ 的/ 测试/ (/ 又称/ 白盒/ 测试/ 或/ 结构/ 测试/ )/ 以及/ 程序/ 与/ 规约/ 相结合/ 的/ 测试/ ./ (/ 2/ )/ 软件/ 故障/ 树/ 分析/ [/ 27/ ]/ 软件/ 故障/ 树/ 分析/ 是/ 一种/ 用于/ 分析/ 软件/ 故障/ 产生/ 原因/ 的/ 技术/ ./ 软件/ 的/ 故障/ 树/ 分析法/ 在/ 原理/ 、/ 所用/ 的/ 标志符/ 、/ 建立/ 步骤/ 等/ 方面/ 与/ 硬件/ 故障/ 树/ 分析法/ 完全相同/ ./ 软件/ 故障/ 树/ 分析/ 的/ 这些/ 特点/ ,/ 使得/ 硬件/ 故障/ 树/ 与/ 软件/ 故障/ 树/ 可以/ 在/ 接口处/ 相互/ 联接/ ,/ 从而/ 使/ 整个/ 系统/ 都/ 可以/ 用/ 故障/ 树/ 进行/ 分析/ ./ (/ 3/ )/ 软件/ 故障模拟/ [/ 2/ ,/ 14/ ]/ 变异/ 测试/ 技术/ 能够/ 系统地/ 模拟/ 软件/ 故障/ ,/ 并/ 构造/ 有效/ 的/ 测试数据/ 将/ 这些/ 故障/ 检测/ 出来/ ./ 其/ 基本原理/ 是/ :/ 使用/ 变异/ 算子/ 每次/ 对/ 被/ 测/ 程序/ 作/ 一处/ 微小/ 的/ 合乎/ 语法/ 的/ 变动/ (/ 例如/ 将/ 关系/ 运算符/ “/ >/ ”/ 用/ “/ </ ”/ 替换/ )/ ,/ 产生/ 大量/ 的/ 新/ 程序/ ,/ 每个/ 新/ 程序/ 称为/ 一个/ 变异/ 体/ ;/ 然后/ 根据/ 已有/ 的/ 测试数据/ ,/ 运行/ 变异/ 体/ ,/ 比较/ 变异/ 体/ 和/ 原程序/ 的/ 运行/ 结果/ :/ 如果/ 两者/ 不同/ ,/ 就/ 称/ 该/ 测试数据/ 将/ 该/ 变异/ 体/ 杀死/ ./ 杀死/ 变异/ 体/ 的/ 过程/ 一直/ 执行/ 到/ 杀死/ 所有/ 变异/ 体/ 或/ 变异/ 充分/ 度/ 已经/ 达到/ 预期/ 的/ 要求/ ./ 变异/ 充分/ 度/ 是/ 已/ 杀死/ 的/ 变异/ 体/ 数目/ 与/ 所有/ 已/ 产生/ 的/ 非/ 等价/ 变异/ 体/ 数目/ 的/ 比值/ ./ 在/ 变异/ 测试/ 过程/ 中/ ,/ 变异/ 算子/ 模拟/ 软件/ 的/ 各种/ 缺陷/ ,/ 作用/ 到/ 源程序/ 上/ 得到/ 变异/ 体/ ./ 这种/ 有/ 缺陷/ 的/ 软件/ 运行/ 将/ 有/ 可能/ 导致/ 某些/ 软件/ 故障/ ./ 变异/ 测试工具/ 集/ Mothra/ 针对/ Fortran/ 语言/ 定义/ 关系/ 运算符/ 替换/ 等/ 22/ 种/ 变异/ 算子/ ./ 当前/ 人们/ 还/ 研究/ 对/ 模块接口/ 、/ 面向对象/ 软件/ 和/ 软件/ 合约/ [/ 34/ ]/ 进行/ 变异/ 测试/ ./ (/ 4/ )/ 形式化/ 检测/ 方法/ 形式化/ 方法/ 是/ 关于/ 在/ 计算/ 系统/ 的/ 开发/ 中/ 进行/ 严格/ 推理/ 的/ 理论/ 、/ 技术/ 和/ 工具/ ,/ 可/ 用于/ 检测/ 从/ 高层/ 规范/ 至/ 最终/ 实现/ 的/ 过程/ 中/ 的/ 软件缺陷/ ./ 形式化/ 方法/ 主要/ 包括/ 形式化/ 规约/ 技术/ 和/ 形式化/ 验证/ 技术/ [/ 35/ ]/ ./ 形式化/ 规约/ 技术/ 使用/ 具有/ 严格/ 数学/ 定义/ 语法/ 和/ 语义/ 的/ 语言/ 刻画/ 软件系统/ ,/ 以/ 尽早/ 发现/ 需求/ 和/ 设计/ 中/ 的/ 错误/ ./ 顺序/ 系统/ 的/ 形式化/ 规约/ 技术/ 侧重于/ 描述/ 状态/ 空间/ ,/ 其/ 主要/ 思想/ 是/ 利用/ 集合/ 、/ 关系/ 和/ 函数/ 等/ 离散/ 结构/ 表达/ 系统/ 的/ 状态/ ,/ 用/ 前置/ 断言/ 、/ 后置/ 断言/ 表达/ 状态/ 的/ 迁移/ ,/ 例如/ Z/ 、/ VDM/ ;/ 并发/ 系统/ 的/ 形式化/ 规约/ 技术/ 侧重于/ 描述/ 系统/ 并发/ 特性/ ,/ 其/ 主要/ 思想/ 是/ 用/ 序列/ 、/ 树/ 、/ 偏序/ 等/ 表达/ 系统/ 的/ 行为/ ,/ 例如/ CSP/ 、/ CCS/ 、/ Statecharts/ 、/ 时序/ 逻辑/ ;/ RAISE/ 语言/ 和/ 方法/ 综合/ 这/ 两种/ 思路/ ./ 形式化/ 验证/ 技术/ 是/ 在/ 形式化/ 规约/ 技术/ 的/ 基础/ 上/ 建立/ 软件系统/ 及其/ 性质/ 的/ 关系/ ,/ 即/ 分析/ 系统/ 是否/ 具有/ 所/ 期望/ 性质/ 的/ 过程/ ./ 模型/ 检验/ 是/ 一种/ 重要/ 的/ 形式化/ 验证/ 方法/ ,/ 通过/ 搜索/ 待/ 验证/ 软件系统/ 模型/ 的/ 有/ 穷/ 状态/ 空间/ 来/ 检验/ 系统/ 的/ 行为/ 是否/ 具备/ 预期/ 性质/ [/ 15/ ]/ ./ 在/ 模型/ 检验/ 中/ ,/ 系统/ 用/ 有/ 穷/ 状态/ 模型/ 建模/ ;/ 其要/ 验证/ Page6/ 的/ 系统/ 性质/ 通常/ 是/ 时序/ 逻辑/ 或/ 模态逻辑/ 公式/ ,/ 也/ 可以/ 用/ 自动机/ 语言/ 描述/ ;/ 通过/ 有效/ 的/ 自动/ 搜索/ 检验/ 有穷/ 状态/ 模型/ 是否/ 满足/ 性质/ ,/ 如果/ 不/ 满足/ ,/ 它/ 还/ 能/ 给出/ 使/ 性质/ 公式/ 为/ 假/ 的/ 系统/ 行为/ 轨迹/ ./ 为了/ 更/ 快/ (/ 有效率/ )/ 地/ 发现/ 软件缺陷/ ,/ 一方面/ 应/ 提高/ 软件测试/ 、/ 软件/ 故障/ 树/ 分析/ 、/ 软件/ 故障模拟/ 和/ 形式化/ 检测/ 方法/ 等/ 软件/ 故障/ 检测/ 方法/ 的/ 效率/ ,/ 另一方面/ 可以/ 进行/ 查错/ 设计/ ,/ 即/ 在/ 设计/ 中/ 赋予/ 程序/ 某些/ 特殊/ 的/ 功能/ ,/ 使/ 程序/ 在/ 运行/ 中/ 自动/ 查找/ 存在/ 的/ 缺陷/ [/ 27/ ]/ ./ 4.3/ ./ 2/ 软件/ 故障/ 检测/ 过程/ 根据/ 所/ 采用/ 的/ 软件/ 故障/ 检测/ 方法/ 的/ 不同/ ,/ 软件/ 故障/ 检测/ 的/ 过程/ 有所不同/ ./ 可以/ 建立/ 检查表/ 或者/ 制定/ 规则/ 进行/ 静态/ 测试/ ,/ 对照检查/ 表/ 或/ 所/ 制定/ 的/ 规则/ ,/ 获取/ 程序代码/ 的/ 结构/ 、/ 处理/ 逻辑/ 、/ 复杂性/ 以及/ 软件/ 文档/ 、/ 数据/ 的/ 有关/ 信息/ ,/ 确定/ 软件/ 是否/ 存在/ 缺陷/ ./ 也/ 可以/ 设计/ 测试用例/ 进行/ 动态/ 测试/ ,/ 在/ 软件/ 运行/ 的/ 过程/ 中/ ,/ 获取/ 其/ 动态/ 信息/ ,/ 包括/ 中间状态/ 、/ 所/ 经过/ 的/ 控制流/ 、/ 所/ 出现/ 的/ 数据流/ ,/ 将/ 实际/ 运行/ 结果/ 与/ 预期/ 结果/ 进行/ 比较/ ,/ 确定/ 软件/ 是否/ 存在/ 故障/ ,/ 并/ 获取/ 故障/ 征兆/ ,/ 为/ 软件/ 故障/ 定位/ 提供/ 依据/ ./ 当对/ 软件/ 异常现象/ 进行/ 分析/ ,/ 确认/ 是/ 故障/ ,/ 而且/ 故障/ 性质/ 复杂/ 、/ 有/ 很多/ 潜在/ 因素/ 影响/ ,/ 又/ 难以使用/ 一般/ 诊断/ 技术/ 解决问题/ 时/ ,/ 可/ 采用/ 软件/ 故障/ 树/ 分析方法/ ./ 先/ 确定/ 软件/ 故障/ 树顶/ 事件/ ,/ 从顶/ 事件/ 开始/ ,/ 按照/ 建树/ 步骤/ 和/ 方法/ ,/ 建立/ 完整/ 的/ 故障/ 树/ ./ 然后/ 进行/ 故障/ 树/ 分析/ ./ 定性分析/ 故障/ 树/ 最小/ 割集/ ,/ 找出/ 所有/ 故障/ 模式/ ,/ 在/ 数据/ 充分/ 、/ 真实/ 的/ 情况/ 下/ ,/ 定量分析/ 出/ 各/ 故障/ 模式/ 的/ 重要/ 度/ ,/ 为/ 针对/ 各种/ 故障/ 模式/ 逐一/ 进行/ 故障/ 定位/ 提供/ 依据/ ./ 或者/ 采用/ 变异/ 测试方法/ 进行/ 软件/ 故障模拟/ ./ 利用/ 变异/ 算子/ 产生/ 变异/ 体/ ,/ 生成/ 能够/ 杀死/ 变异/ 体/ 的/ 测试数据/ ,/ 从而/ 获得/ 软件缺陷/ 引入/ 的/ 位置/ 以及/ 能够/ 找出/ 该/ 缺陷/ 的/ 测试数据/ ./ 还/ 可以/ 采用/ 形式化/ 方法/ 建立/ 系统/ 模型/ 、/ 给出/ 性质/ 规范/ ,/ 在/ 工具软件/ 的/ 支持/ 下/ ,/ 采用/ 模型/ 检验/ 等/ 方法/ 进行/ 形式化/ 验证/ ,/ 判断/ 系统/ 是否/ 满足/ 性质/ 规范/ ./ 若/ 系统/ 满足/ 性质/ 规范/ ,/ 则/ 软件/ 不/ 存在/ 有关/ 该/ 性质/ 规范/ 的/ 故障/ ;/ 否则/ ,/ 软件/ 存在/ 故障/ ,/ 获取/ 系统/ 违反/ 性质/ 规范/ 的/ 反例/ 路径/ ./ 4.4/ 软件/ 故障/ 定位/ 排除/ 软件/ 故障/ 的/ 前提/ 是/ 准确/ 地/ 隔离/ 故障/ ,/ 即/ 对/ 软件/ 故障/ 定位/ ./ 应从/ 分析/ 故障/ 征兆/ 着手/ ,/ 查找/ 引起/ 软件/ 故障/ 的/ 缺陷/ 的/ 位置/ ./ 比如/ 在/ 测试/ 中/ 发现/ 文件/ 记录/ 中/ 丢失/ 最后/ 一个/ 字符/ ,/ 这是/ 一个/ 故障/ 征兆/ ./ 需要/ 利用/ 各种/ 信息/ 和/ 经验/ ,/ 判断/ 问题/ 发生/ 的/ 真正/ 原因/ ,/ 找到/ 有/ 缺陷/ 的/ 程序/ 单元/ 或/ 语句/ ./ 4.4/ ./ 1/ 软件/ 故障/ 定位/ 方法/ 在/ 软件/ 故障/ 定位/ 的/ 过程/ 中/ ,/ 经常/ 采用/ 以下/ 方法/ ./ (/ 1/ )/ 内存/ 信息/ 转储/ [/ 14/ ]/ 内存/ 信息/ 转储/ 是/ 在/ 执行/ 测试/ 中/ 发现/ 问题/ 以后/ ,/ 把/ 所有/ 寄存器/ 和/ 内存/ 有关/ 部分/ 的/ 内容/ 记录/ 、/ 打印/ 出来/ ,/ 设法/ 保留/ 有关/ 的/ 现场/ 信息/ ,/ 供/ 分析/ 研究/ 使用/ ./ 使用/ 这种/ 方法/ 可以/ 得到/ 出现/ 故障/ 的/ 关键/ 信息/ ./ 当/ 已经/ 对/ 程序/ 中/ 某个/ 故障/ 假设/ 有/ 了/ 进一步/ 认识/ ,/ 用/ 这种/ 方法/ 取得/ 相关/ 信息/ ,/ 做出/ 推断/ ,/ 常常/ 很/ 有效/ ./ 但是/ 进行/ 内存/ 信息/ 转储/ 需要/ 占用/ 一些/ 主机/ 时间/ 、/ 较/ 多/ 的/ I/ // O/ 时间/ 以及/ 分析/ 时间/ ,/ 辨认/ 这些/ 信息/ ,/ 找出/ 和/ 源程序/ 的/ 对应/ 地址/ 也/ 较/ 费事/ ./ 因此/ ,/ 必须/ 有/ 目标/ 、/ 有/ 限制/ 地/ 使用/ 这种/ 方法/ ./ (/ 2/ )/ 打印/ 中间/ 结果/ [/ 14/ ,/ 27/ ]/ 为/ 取得/ 关键/ 变量/ 的/ 动态/ 值/ ,/ 在/ 程序/ 中/ 设置/ 若干/ 打印/ 语句/ ,/ 打印/ 这些/ 变量/ 的/ 名称/ 及/ 当时/ 的/ 数值/ ,/ 进而/ 检查/ 这些/ 输出/ 的/ 中间/ 结果/ ,/ 判断/ 哪一点/ 开始/ 发生/ 故障/ ./ 这种/ 方法/ 可以/ 检验/ 在/ 某/ 事件/ 以后/ 某个/ 变量/ 是否/ 按/ 预计/ 的/ 要求/ 发生变化/ ./ 而且/ 多个/ 打印/ 语句/ 可以/ 给出/ 变量/ 的/ 动态/ 特性/ ./ (/ 3/ )/ 跟踪/ 寻迹/ [/ 14/ ,/ 27/ ]/ 在/ 软件/ 故障/ 定位/ 中/ ,/ 跟踪/ 是/ 指/ 跟踪/ 程序/ 的/ 运行/ ./ 可以/ 在/ 屏幕/ 上/ 显示/ 程序/ 的/ 执行/ 过程/ 及/ 状态/ ,/ 或/ 将/ 指定/ 的/ 程序段/ 在/ 运行/ 中/ 的/ 状态/ 变化/ 列表/ 打印输出/ ,/ 从而/ 寻找/ 程序执行/ 过程/ 中/ 的/ 故障/ 痕迹/ ,/ 进行/ 故障/ 定位/ ./ 最/ 简单/ 的/ 跟踪/ 打印/ 出/ 所有/ 变量/ 数值/ 的/ 变化/ 和/ 所有/ 控制流/ 的/ 变化/ ./ 选择/ 式/ 跟踪/ 在/ 源程序/ 的/ 指定/ 区段/ 跟踪/ 指定/ 的/ 变量/ 和/ 控制流/ ./ 跟踪/ 寻迹/ 方法/ 可以/ 分为/ 回溯/ 法/ 、/ 向前/ 追踪/ 法/ 和/ 二分/ 查找/ 逼近/ 法等/ 几种/ 方法/ ./ 回溯/ 法/ 也/ 称/ 向/ 后/ 追踪/ ./ 考察/ 错误/ 征兆/ ,/ 从/ 它/ 在/ 程序/ 显露/ 的/ 位置/ 起/ 沿着/ 程序/ 的/ 控制/ 流向/ 后/ (/ 反/ 方向/ )/ 追踪/ ,/ 直到/ 征兆/ 消失/ 处/ 为止/ ./ 再/ 仔细分析/ 邻接/ 的/ 程序段/ ,/ 进而/ 找出/ 错误/ 的/ 原因/ ./ 向前/ 追踪/ 法则/ 与/ 回溯/ 法/ 的/ 检查/ 方向/ 相反/ ./ 如果/ 已经/ 知道/ 程序/ 中/ 某些/ 关键点/ 上/ 变量/ 应取/ 的/ 正确/ 值/ ,/ 可以/ 采用/ 二分/ 查找/ 的/ 办法/ ./ 例如/ ,/ 在/ 程序/ 的/ 中间/ 部位/ 引入/ 一组/ 输入/ ,/ 并/ 检验/ 其/ 输出/ 结果/ ,/ 如果/ 输出/ 结果/ 是/ 正确/ 的/ ,/ 那么/ 故障/ 发生/ 在/ 程序/ 的/ 前半部/ 分/ ,/ 否则/ 在/ 程序/ 的/ 后/ 半/ 部分/ ./ 多次重复/ 这个/ 过程/ ,/ 直至/ 逼近/ 到/ 故障/ 的/ 准确/ 位置/ ./ 当/ 采用/ 模型/ 检验/ 方法/ 获得/ 系统/ 违反/ 性质/ 规范/ 的/ 反例/ 路径/ 后/ ,/ 可/ 根据/ 该/ 反例/ 路径/ 采用/ 跟踪/ 寻迹/ 法定/ Page7/ (/ 4/ )/ 归纳法/ [/ 14/ ,/ 18/ ]/ 归纳法/ 研究/ 与/ 出错/ 相关/ 的/ 信息/ ,/ 找出/ 特征/ ,/ 得到/ “/ 原因/ 假设/ ”/ ,/ 然后/ 确认/ 或/ 否认/ 这个/ 假设/ ./ 归纳法/ 定位/ 软件/ 故障/ 的/ 步骤/ 为/ :/ ①/ 收集/ 有用/ 信息/ ./ 列举/ 已知/ 失败/ 的/ 测试用例/ 情况/ 和/ 成功/ 的/ 测试用例/ 情况/ ./ 弄清/ 哪些/ 是/ 观察/ 到/ 的/ 故障/ 征兆/ ,/ 何时/ 出现/ 故障/ ,/ 什么/ 情况/ 下/ 出现/ 故障/ 等/ ./ ②/ 确定/ 故障/ 类型/ ./ 检查/ 收集/ 到/ 的/ 信息/ ,/ 注意/ 区别/ 失败/ 的/ 测试用例/ 和/ 成功/ 的/ 测试用例/ 间/ 的/ 差别/ ,/ 找到/ 软件/ 故障/ 特征/ ,/ 以/ 确定/ 软件/ 故障/ 类型/ ./ ③/ 构想/ 出/ 一个/ 或/ 若干/ 假设/ 原因/ ./ 根据/ 观察/ 到/ 的/ 关系/ 和/ 故障/ 类型/ ,/ 提出/ 一个/ 或/ 多个/ 假设/ ./ 如果/ 假设/ 的/ 原因/ 并/ 不是/ 显而易见/ 的/ ,/ 再/ 来/ 考察/ 已有/ 信息/ ,/ 收集/ 更/ 多/ 的/ 其它/ 信息/ ,/ 也许/ 还/ 需要/ 运行/ 更/ 多/ 的/ 测试用例/ ./ 如果/ 有/ 几个/ 假设/ ,/ 则/ 将/ 其/ 按/ 成立/ 的/ 可能性/ 排列/ ,/ 最大/ 可能/ 的/ 假设/ 列/ 在/ 前面/ ./ ④/ 审查/ 假设/ 原因/ ,/ 看其/ 能否/ 成立/ ./ 再次/ 检查/ 有关/ 信息/ ,/ 以便/ 确定/ 假设/ 能否/ 解释/ 观察/ 到/ 的/ 问题/ 的/ 各种/ 表现/ ./ (/ 5/ )/ 演绎法/ [/ 14/ ,/ 18/ ]/ 演绎法/ 正好/ 和/ 归纳法/ 的/ 过程/ 相反/ ,/ 首先/ 列举/ 一些/ 可能/ 的/ 原因/ 或/ 假设/ ,/ 然后/ 再/ 进行/ 逐个/ 分析/ ,/ 排除/ 那些/ 不能/ 确立/ 的/ 原因/ 和/ 假设/ ,/ 直到/ 仅/ 剩下/ 一个/ 被/ 证实/ ./ 演绎法/ 定位/ 软件/ 故障/ 的/ 步骤/ 为/ :/ ①/ 枚举/ 若干/ 可能/ 的/ 原因/ 和/ 假设/ ./ 首先/ 列出/ 所有/ 可能/ 的/ 故障/ 原因/ ,/ 这些/ 原因/ 并/ 不/ 要求/ 有/ 充分/ 的/ 理由/ ,/ 只是/ 提供/ 一些/ 分析/ 的/ 线索/ ./ ②/ 利用/ 掌握/ 的/ 资料/ 排除/ 一些/ 原因/ ./ 仔细/ 地/ 分析/ 已/ 掌握/ 的/ 资料/ ,/ 找出/ 一些/ 矛盾/ ,/ 力图/ 排除/ 那些/ 不能/ 成立/ 的/ 原因/ ./ 但/ 如果/ 所有/ 的/ 原因/ 都/ 被/ 排除/ ,/ 就/ 应/ 另作/ 推测/ ./ 如果/ 保留/ 下来/ 多个/ 原因/ ,/ 就/ 应/ 把/ 最大/ 可能/ 的/ 原因/ 列为/ 优先/ 考虑/ 的/ 对象/ ./ ③/ 精心/ 研究/ 保留/ 的/ 假设/ ./ 这时/ 保留/ 的/ 可能/ 原因/ 也许/ 是/ 对/ 的/ ,/ 但/ 对于/ 确认/ 故障/ 可能/ 还/ 不够/ 充分/ ./ 要/ 充分利用/ 已知/ 的/ 线索/ 作/ 精心/ 的/ 研究/ ,/ 估计/ 到/ 特殊/ 情况/ ./ 位/ 软件/ 故障/ ./ (/ 6/ )/ 控制流/ 分析/ [/ 14/ ]/ 对于/ 程序结构/ 一般/ 有/ 以下/ 4/ 点/ 基本/ 要求/ ,/ 即/ 写出/ 的/ 程序/ 不/ 应/ 包含/ :/ ①/ 转向/ 并/ 不/ 存在/ 的/ 标号/ ;/ ②/ 没有/ 用/ 的/ 语句/ 标号/ ;/ ③/ 从/ 程序/ 入口/ 进入/ 后/ 无法/ 达到/ 的/ 语句/ ;/ ④/ 不能/ 达到/ 停机/ 语句/ 的/ 语句/ ./ 前/ 两种/ 情况/ 容易/ 发现/ ./ 通过/ 构造/ 控制流/ 图/ ,/ 计算/ 从/ 入口/ 结点/ 可达/ 的/ 所有/ 结点/ ,/ 可以/ 发现/ 第/ 3/ 种/ 情况/ 的/ 软件/ 故障/ ./ 采用/ 类似/ 的/ 方法/ 可以/ 发现/ 第/ 4/ 种/ 情况/ 的/ 软件/ 故障/ ./ (/ 7/ )/ 数据流/ 分析/ 数据流/ 分析方法/ 可用/ 来/ 查找/ 引用/ 未定义/ 变量/ 等/ 软件/ 故障/ 以及/ 查找/ 对/ 以前/ 未曾/ 使用/ 的/ 变量/ 再次/ 赋值/ 等/ 数据流/ 异常/ 的/ 情况/ ./ 这些/ 故障/ 是/ 诸如/ 错/ 拼/ 名字/ 、/ 名字/ 混淆/ 或/ 丢失/ 语句/ 等/ 程序/ 缺陷/ 的/ 表现形式/ ./ 首先/ 构造/ 可/ 达/ 定义/ 表/ [/ 14/ ]/ ,/ 然后/ 按/ 下述/ 方法/ 找出/ 对/ 未定义/ 变量/ 的/ 引用/ :/ 对/ 每个/ 结点/ i/ ,/ 依次/ 考虑/ i/ 引用/ 的/ 每个/ 变量/ ,/ 如果/ 对/ 任何/ 这样/ 的/ 变量/ v/ ,/ 并/ 没有/ v/ 的/ 定义/ 达到/ i/ ,/ 那么/ 程序/ 中/ 含有/ 缺陷/ ./ 可以/ 用/ 下面/ 的/ 方法/ 找出/ 未曾/ 使用/ 的/ 定义/ :/ 对于/ 每个/ DEF/ (/ v/ ,/ i/ )/ (/ 表示/ 结点/ i/ 定义/ 变量/ v/ )/ ,/ 依次/ 考虑/ 由/ DEF/ (/ v/ ,/ i/ )/ 达到/ 的/ 每个/ 结点/ j/ ,/ 若/ 没有/ 引用/ 变量/ v/ 的/ 相应/ 语句/ ,/ 则/ 程序/ 中/ 含有/ 缺陷/ ./ (/ 8/ )/ 程序/ 切片/ [/ 36/ ]/ 对/ 程序/ 进行/ 切片/ ,/ 使/ 所/ 得到/ 的/ 程序代码/ 片断/ 仍能/ 反映/ 原程序/ 的/ 部分/ 特征/ ,/ 以/ 缩小/ 软件/ 故障/ 定位/ 时/ 的/ 检查/ 范围/ ./ 进行/ 程序/ 切片/ 时/ 依据/ 切片/ 准则/ 来/ 裁剪/ 程序/ ./ 切片/ 准则/ 是/ C/ =/ 〈/ q/ ,/ v/ 〉/ ,/ 其中/ q/ 是/ 程序/ 中/ 的/ 一条/ 语句/ ,/ v/ 是/ 一个/ 程序/ 变量/ ./ 当/ 程序/ 的/ 下/ 一/ 执行/ 语句/ 为/ q/ 时/ ,/ 删去/ 源程序/ 中/ 不会/ 影响/ 变量/ v/ 之值/ 的/ 语句/ ,/ 所/ 得到/ 的/ 即/ 是/ 关于/ 〈/ q/ ,/ v/ 〉/ 的/ 程序/ 切片/ ./ 程序/ 内部/ 主要/ 由/ 控制流/ 和/ 数据流/ 组成/ ,/ 并/ 构成/ 语句/ 之间/ 的/ 控制/ 依赖/ 关系/ 和/ 数据/ 依赖/ 关系/ ./ 程序/ 切片/ 主要/ 依据/ 语句/ 之间/ 的/ 控制/ 依赖/ 关系/ 和/ 数据/ 依赖/ 关系/ 计算/ 得到/ ./ 4.4/ ./ 2/ 软件/ 故障/ 定位/ 过程/ 软件/ 故障/ 定位/ 的/ 过程/ 一般/ 包括/ 以下/ 步骤/ :/ (/ 1/ )/ 透彻/ 地/ 理解/ 所/ 面临/ 的/ 问题/ ./ 为/ 实现/ 软件/ 故障/ 定位/ ,/ 必须/ 深入/ 地/ 研究/ 程序/ 及其/ 执行/ 结果/ ,/ 分析/ 它/ 在/ 什么/ 情况/ 下/ 得到/ 正确/ 结果/ ,/ 在/ 什么/ 情况/ 下/ 得到/ 错误/ 结果/ ./ 由此/ 提出/ 关于软件/ 故障/ 性质/ 及其/ 原因/ 的/ 若干/ 假设/ ./ 可以/ 采用/ 4W/ 表格/ 来/ 组织/ 和/ 分析/ 有关/ 的/ 故障/ 信息/ [/ 18/ ]/ ,/ 如表/ 1/ 所示/ ./ 表中/ 的/ What/ 栏/ 用于/ 记录/ 基本/ 征兆/ ,/ Where/ 栏/ 记录/ 故障/ 征兆/ 的/ 位置/ ,/ When/ 栏/ 记录/ 故障/ 征兆/ 发生/ 的/ 时间/ ,/ Towhatextent/ 栏/ 记录/ 征兆/ 波及/ 的/ 范围/ ,/ Is/ 和/ Isnot/ 栏是/ 4W/ 表格/ 中/ 的/ 关键/ 内容/ ,/ 通过/ 这/ 两栏/ 内容/ 的/ 对比/ ,/ 有助于/ 形成/ 关于/ 故障/ 原因/ 和/ 部位/ 的/ 假设/ ./ Towhatextent/ (/ 2/ )/ 固定/ 软件/ 故障/ ./ 若能/ 使/ 某/ 一/ 软件/ 故障/ 稳定/ 地/ 发生/ ,/ 则/ 能/ 方便/ 地/ 确诊/ 它/ ,/ 否则/ 对/ 其/ 进行/ 诊断/ 非常/ 困难/ ./ 软件/ 故障/ 不定期/ 发生/ 通常/ 是/ 由于/ 未/ 对/ 变量/ 进行/ 初始化/ 、/ 使用/ 悬挂/ 指针/ [/ 37/ ]/ 或者/ 与/ 软件/ 运行/ 的/ 时间/ Page8/ 长短/ 有关/ ./ 固定/ 一个/ 软件/ 故障/ 通常/ 需要/ 一个/ 以上/ 的/ 测试用例/ 来/ 产生/ 故障/ ./ 它/ 包括/ 将/ 测试用例/ 减至/ 最少/ 而/ 仍/ 能/ 产生/ 故障/ 的/ 情况/ ./ 为/ 简化/ 测试用例/ ,/ 可以/ 采用/ 以下/ 方法/ :/ ①/ 通过/ 重复/ 实验/ 收集/ 数据/ ;/ ②/ 建立/ 假设/ 以/ 解释/ 尽可能/ 多/ 的/ 相关/ 数据/ ;/ ③/ 设计/ 实验/ 以便/ 证实/ 或/ 否定/ 假设/ ;/ ④/ 证实/ 或/ 否定/ 假设/ ;/ ⑤/ 按/ 要求/ 重复/ 以上/ 步骤/ ./ (/ 3/ )/ 制定/ 查错/ 计划/ ./ 这/ 一步/ 要求/ 排错/ 人员/ 提出/ 错误/ 原因/ 、/ 性质/ 、/ 部分/ 的/ 假设/ ,/ 根据/ 这些/ 假设/ 制订/ 查找/ 错误/ 的/ 计划/ ./ (/ 4/ )/ 执行/ 查错/ 计划/ ./ 实施/ 计划/ 以/ 验证/ 各种/ 假设/ 的/ 正确性/ ,/ 对/ 计划/ 执行/ 过程/ 的/ 每/ 一步/ 都/ 要/ 进行/ 检查/ ./ (/ 5/ )/ 评估/ 查错/ 结果/ ./ 经过/ 执行/ 计划/ ,/ 如果/ 故障/ 的/ 位置/ 已经/ 查明/ ,/ 在/ 动手/ 改正/ 之前/ 还要/ 再作/ 认真/ 的/ 检查/ ,/ 分析/ 它们/ 是否/ 确系/ 测试/ 中/ 出现/ 的/ 故障/ 征兆/ 的/ 真正/ 原因/ ,/ 验证/ 故障/ 征兆/ 涉及/ 的/ 部分/ 有无/ 遗漏/ ./ 如果/ 故障/ 的/ 位置/ 尚未/ 查明/ ,/ 返回/ 第/ (/ 3/ )/ 步/ 修改/ 查错/ 计划/ ./ 4.5/ 软件/ 故障/ 排除/ 软件/ 故障/ 排除/ 属于/ 软件维护/ 的/ 范畴/ ./ 软件维护/ 是/ 在/ 软件产品/ 交付/ 之后/ 对/ 其/ 进行/ 修改/ ,/ 以/ 纠正/ 故障/ ,/ 改进/ 性能/ 和/ 其它/ 属性/ ,/ 或/ 使/ 产品/ 适应/ 改变/ 了/ 的/ 环境/ 活动/ ./ 4.5/ ./ 1/ 软件/ 故障/ 排除/ 方法/ 排除/ 软件/ 故障/ 的/ 方法/ 为/ :/ 根据/ 软件/ 故障/ 现象/ 和/ 引起/ 软件/ 故障/ 的/ 缺陷/ 位置/ ,/ 分析/ 软件/ 故障/ 模型/ ,/ 确定/ 是/ 由/ 需求/ 规格/ 说明/ 还是/ 软件设计/ 、/ 软件/ 编码/ 、/ 软件/ 集成/ 、/ 软件测试/ 或者/ 配置管理/ 中/ 的/ 缺陷/ 所/ 引起/ 的/ ,/ 对/ 相应/ 的/ 缺陷/ 进行/ 修改/ 、/ 纠正/ ;/ 分析/ 故障/ 影响/ 范围/ ,/ 对受/ 影响/ 的/ 部分/ 进行/ 相应/ 的/ 修改/ ./ (/ 1/ )/ 文档/ 齐全/ 情况/ 下/ 的/ 软件/ 故障/ 排除/ ./ 需求/ 型/ 故障/ 主要/ 是/ 由/ 需求/ 分析/ 过程/ 中/ 的/ 错误/ 所/ 造成/ 的/ ,/ 应/ 更改/ 需求/ 规格/ 说明/ ,/ 然后/ 继续执行/ 软件工程/ 后续/ 步骤/ 进行/ 所/ 需要/ 的/ 设计/ 、/ 编码/ 、/ 测试/ 等/ ./ 设计/ 型/ 故障/ 主要/ 是/ 由/ 软件设计/ 过程/ 中/ 的/ 错误/ 所/ 造成/ 的/ ,/ 应/ 更改/ 软件设计/ ,/ 然后/ 继续执行/ 后续/ 步骤/ ./ 实现/ 与/ 编码/ 型/ 故障/ 主要/ 由/ 编码/ 过程/ 中/ 的/ 错误/ 造成/ ,/ 应/ 更改/ 程序代码/ ,/ 并/ 继续/ 进行/ 所/ 需要/ 的/ 测试/ 等/ 工作/ ./ 集成型/ 故障/ 主要/ 由/ 软件设计/ 过程/ 中/ 的/ 错误/ 引起/ ,/ 应/ 更改/ 软件设计/ ,/ 然后/ 继续执行/ 后续/ 步骤/ ./ 为/ 排除/ 集成型/ 故障/ 中/ 的/ 接口/ 型/ 故障/ ,/ 主要/ 应/ 抓住/ 接口协议/ 的/ 拟订/ 与/ 签署/ 、/ 接口分析/ 、/ 接口/ 设计/ 和/ 接口/ 测试/ ./ 为/ 排除/ 集成型/ 故障/ 中/ 的/ 死锁/ 型/ 故障/ ,/ 应/ 更改/ 设计/ ,/ 建立/ 全局/ 资源分配/ 视图/ ,/ 对/ 资源/ 申请/ 、/ 分配/ 和/ 释放/ 进行/ 集中统一/ 管理/ ./ 测试/ 型/ 故障/ 主要/ 由/ 测试/ 过程/ 中/ 的/ 错误/ 引起/ ,/ 应/ 更改/ 测试计划/ ,/ 设计/ 相应/ 测试用例/ ,/ 进行/ 所/ 需要/ 的/ 测试/ ./ 配置管理/ 型/ 故障/ 主要/ 由/ 配置管理/ 过程/ 中/ 的/ 错误/ 引起/ ,/ 应/ 加强/ 配置管理/ ,/ 保持/ 软件/ 版本/ 的/ 一致性/ ;/ 严格/ 控制软件/ 变更/ ,/ 变更/ 时/ 充分考虑/ 对/ 软件/ 其余部分/ 的/ 影响/ ,/ 软件/ 变更/ 后/ 进行/ 严格/ 的/ 回归/ 测试/ ./ (/ 2/ )/ 缺少/ 文档/ 情况/ 下/ 的/ 软件/ 故障/ 排除/ ./ 当/ 缺少/ 软件/ 文档/ 时/ ,/ 可/ 采用/ 逆向/ 工程/ [/ 33/ ]/ 等/ 技术手段/ 从/ 程序/ 中/ 抽取/ 数据结构/ 、/ 体系结构/ 和/ 程序设计/ 信息/ ,/ 排除/ 软件/ 故障/ ./ (/ 3/ )/ 系统/ 重构/ ./ 在/ 实时/ 执行/ 任务/ 的/ 过程/ 中/ 如果/ 出现/ 严重/ 故障/ ,/ 没有/ 充足/ 的/ 时间/ 排除故障/ ,/ 此时/ 对于/ 有/ 软件/ 容错/ 设计/ 的/ 系统/ 常用/ 的/ 方法/ 是/ 进行/ 系统/ 重构/ ,/ 启动/ 软件/ 容错/ 措施/ ,/ 排除/ 软件/ 故障/ [/ 27/ ]/ ./ 4.5/ ./ 2/ 软件/ 故障/ 排除/ 过程/ 排除/ 软件/ 故障/ 的/ 过程/ 一般/ 包括/ 以下/ 步骤/ :/ (/ 1/ )/ 维护/ 的/ 申请/ 与/ 审批/ ./ (/ 2/ )/ 制定/ 维护/ 计划/ ./ (/ 3/ )/ 执行/ 维护/ 计划/ ,/ 改正错误/ ./ (/ 4/ )/ 软件/ 复查/ ./ 验证/ 所作/ 的/ 修改/ 是否/ 正确/ ,/ 重新/ 确认/ 整个/ 软件/ ./ 软件/ 复查/ 工作/ 包括/ 进行/ 影响/ 域/ 分析/ ,/ 即/ 分析/ 所/ 更动/ 部分/ 是否/ 会/ 对/ 其余部分/ 造成/ 不良影响/ ./ (/ 5/ )/ 回归/ 测试/ ./ 验证/ 软件/ 更动/ 的/ 正确性/ 和/ 对/ 原有/ 功能/ 、/ 质量/ 特性/ 的/ 不/ 损害/ 性/ ./ (/ 6/ )/ 评审/ 与/ 验收/ ./ 5/ 案例/ 研究/ 为/ 验证/ 以上/ 软件/ 故障诊断/ 过程/ 框架/ 的/ 有效性/ ,/ 将/ 其/ 应用/ 于/ 实际/ 的/ 软件/ 故障诊断/ 中/ ./ 5.1/ 案例/ 1/ ./ 某/ 控制台/ 工控机/ 显示/ 信号/ 异常/ 问题/ 在/ 某/ 控制台/ 与/ 装置/ 故检/ 系统/ 进行/ 联调/ 过程/ 中/ ,/ 当/ 控制台/ 操作手/ 按下/ “/ 逃逸/ ”/ 按键/ ,/ 向/ 故检/ 系统/ 发送/ “/ 逃逸/ ”/ 指令/ (/ 简称/ “/ 逃逸/ ”/ )/ ,/ 装置/ 逃逸/ 指令/ 控制器/ 收到/ 该/ 指令/ 后/ 给/ 控制台/ 回传/ “/ 有线/ 逃逸/ 指令/ 收到/ ”/ 信号/ (/ 简称/ “/ 有线/ 逃逸/ ”/ )/ 时/ ,/ 发现/ 控制台/ 工控机/ 甲机/ 和/ 乙机/ 显示/ 信号/ 异常/ ./ 在/ 多次/ 联调/ 中/ ,/ 两台/ 工控机/ 有时/ 均/ 显示/ “/ 有线/ 逃逸/ ”/ ,/ 有时/ 均/ 不/ 显示/ ,/ 有时/ 仅/ 某/ 一台/ 显示/ ,/ 正常/ 情况/ 是/ 均/ 应/ 显示/ ./ 通过/ 检测/ 排除/ 硬件/ 和/ 通信/ 链路/ 问题/ ./ 因此/ 怀疑/ 故障/ 由/ 工控机/ 软件/ 中/ 与/ 处理/ “/ 有线/ 逃逸/ ”/ 和/ “/ 逃逸/ ”/ 有关/ 的/ 控制/ 检测线/ 程/ 引起/ ./ 应用/ 以上/ 框架/ 进行/ 软件/ 故障诊断/ ./ (/ 1/ )/ 故障/ 检测/ ./ 分析/ 该/ 线程/ ,/ 它用/ 4/ 字节/ 保存/ 输入/ 端口/ 信息/ ,/ 其中/ 两位/ 分别/ 记录/ “/ 有线/ 逃逸/ ”/ 和/ “/ 逃/ Page9/ 逸/ ”/ ./ 采用/ 静态/ 测试/ 中/ 的/ 代码/ 审查/ 和/ 代码/ 走查/ 方法/ ,/ 结果/ 均/ 未/ 发现/ 软件缺陷/ ./ 进行/ 动态/ 测试/ ,/ 先/ 采用/ 白盒/ 测试方法/ ,/ 设计/ 测试用例/ ,/ 进行/ 语句/ 覆盖/ 、/ 分支/ 覆盖/ 、/ 路径/ 覆盖/ ,/ 结果/ 故障/ 不/ 复现/ ./ 然后/ 采用/ 黑盒/ 测试/ 中/ 的/ 等价/ 类/ 划分/ 方法/ ,/ 根据/ “/ 有线/ 逃逸/ ”/ 和/ “/ 逃逸/ ”/ 设计/ 等价/ 类/ ./ 当/ 设计/ 测试用例/ ,/ 将/ “/ 逃逸/ ”/ 信号/ 位置/ “/ 1/ ”/ ,/ 模拟/ 人工/ 操作/ 控制台/ 的/ “/ 逃逸/ ”/ 按键/ ,/ 并且/ 将/ “/ 有线/ 逃逸/ ”/ 信号/ 位置/ “/ 1/ ”/ ,/ 模拟/ 故检/ 系统/ 正确/ 返回/ “/ 有线/ 逃逸/ ”/ ,/ 驱动/ 该/ 线程/ 运行/ ,/ 结果/ 故障/ 能够/ 复现/ ,/ 表明/ 该/ 线程/ 处理/ “/ 有线/ 逃逸/ ”/ 和/ “/ 逃逸/ ”/ 的/ 流程/ 有误/ ./ (/ 2/ )/ 故障/ 定位/ ./ (/ a/ )/ 固定/ 故障/ ./ 采用/ 打印/ 中间/ 结果/ 的/ 方法/ ,/ 当向/ 故检/ 系统/ 发送/ “/ 逃逸/ ”/ 后/ ,/ 输出/ 该/ 线程/ 中/ 保存/ 输入/ 端口/ 信息/ 的/ 变量/ 的/ 值/ ,/ 发现/ “/ 有线/ 逃逸/ ”/ 信号/ 位/ 已/ 被/ 置/ “/ 1/ ”/ ,/ 说明/ 故检/ 系统/ 确已/ 正确/ 返回/ “/ 有线/ 逃逸/ ”/ ./ 用/ 人工/ 按下/ “/ 逃逸/ ”/ 按键/ 后/ 人工/ 操作/ 故检/ 等效/ 器上/ 的/ “/ 有线/ 逃逸/ ”/ 开关/ 按钮/ 故障/ 无法/ 复现/ ,/ 它/ 与/ 故检/ 系统/ 联调/ 时/ 人工/ 按下/ “/ 逃逸/ ”/ 按键/ 后/ 由/ 故检/ 系统/ 自动/ 返回/ “/ 有线/ 逃逸/ ”/ 故障/ 经常/ 能够/ 复现/ 的/ 区别/ ,/ 主要/ 是/ 两者/ 从/ 发出/ “/ 逃逸/ ”/ 到/ “/ 有线/ 逃逸/ ”/ 返回/ 的/ 时间/ 间隔/ 不同/ ,/ 前者/ 为/ 数百/ 毫秒/ 以上/ ,/ 后者/ 为/ 数十/ 毫秒/ ./ 因此/ ,/ 怀疑/ 故障/ 与/ 巡检/ 周期/ 的/ 时间/ 长短/ 有关/ ./ 该/ 线程/ 设计/ 的/ 巡检/ 周期/ 为/ 30ms/ ./ 对/ 该/ 线程/ 程序代码/ 中/ 的/ 休眠/ 语句/ 的/ 时间/ 值/ (/ 10ms/ )/ 进行/ 修改/ ,/ 当/ 将/ 休眠/ 值/ 改为/ 很小/ 的/ 值/ ,/ 例如/ 0ms/ 时/ ,/ 与/ 故检/ 系统/ 联调/ 故障/ 也/ 很/ 难/ 复现/ ;/ 而/ 当/ 将/ 休眠/ 值/ 改为/ 很大/ 的/ 值/ ,/ 例如/ 5000ms/ 时/ ,/ 与/ 故检/ 系统/ 联调/ 故障/ 能够/ 稳定/ 地/ 复现/ ,/ 甚至/ 人工/ 按下/ “/ 逃逸/ ”/ 按键/ 后/ 人工/ 操作/ 故检/ 等效/ 器上/ 的/ “/ 有线/ 逃逸/ ”/ 开关/ 按钮/ 故障/ 也/ 能够/ 稳定/ 地/ 复现/ ./ (/ b/ )/ 故障/ 定位/ ./ 该/ 线程/ 设计/ 时/ 没有/ 考虑/ 到/ 在/ 同一/ 巡检/ 周期/ 内/ 可能/ 同时/ 出现/ “/ 有线/ 逃逸/ ”/ 和/ “/ 逃逸/ ”/ ,/ 当/ 出现/ 这种/ 情况/ 时/ ,/ 只/ 处理/ 优先级/ 高/ 的/ “/ 逃逸/ ”/ ,/ 未/ 处理/ “/ 有线/ 逃逸/ ”/ ,/ 就/ 直接/ 转到/ 下/ 一/ 巡检/ 周期/ 开头/ ./ 而/ 在/ 下/ 一/ 巡检/ 周期/ 内/ ,/ 由于/ “/ 有线/ 逃逸/ ”/ 信号/ 位/ 已/ 被/ 置/ “/ 1/ ”/ ,/ 在/ 没有/ 其它/ 信号/ 到来/ 的/ 情况/ 下/ ,/ 保存/ 输入/ 端口/ 信息/ 的/ 变量/ 的/ 值/ 不/ 发生变化/ ,/ 程序/ 休眠/ 10ms/ 后/ ,/ 再次/ 回到/ 下/ 一/ 巡检/ 周期/ 开头/ ,/ 使/ 工控机/ 一直/ 未能/ 显示/ 该/ 信息/ ./ 因此/ ,/ 引起/ 该/ 故障/ 的/ 软件缺陷/ 定位/ 在/ :/ 处理/ “/ 逃逸/ ”/ 后/ ,/ 未/ 处理/ “/ 有线/ 逃逸/ ”/ ,/ 就/ 直接/ 转到/ 下/ 一/ 巡检/ 周期/ 开头/ ./ 这是/ 由于/ 软件设计/ 不当/ 所/ 引起/ 的/ ,/ 属于/ 设计/ 型/ 故障/ ./ (/ 3/ )/ 故障/ 排除/ ./ 为/ 排除/ 该/ 故障/ ,/ 修改/ 该/ 线程/ 的/ 设计/ ,/ 优先/ 处理/ “/ 逃逸/ ”/ ,/ 然后/ 由/ 原来/ 的/ 直接/ 转到/ 下/ 一/ 巡检/ 周期/ 开头/ ,/ 修改/ 为/ 转向/ 处理/ 输入/ 信息/ ,/ 在/ 此/ 过程/ 中/ 处理/ “/ 有线/ 逃逸/ ”/ ,/ 使/ 工控机/ 显示/ 该/ 信息/ ,/ 最后/ 转到/ 下/ 一/ 巡检/ 周期/ 开头/ ./ 根据/ 修改/ 后/ 的/ 设计/ 修改/ 程序代码/ ,/ 并/ 进行/ 回归/ 测试/ ./ 利用/ 修改/ 后/ 的/ 程序/ 进行/ 联调/ ,/ 结果表明/ 缺陷/ 已/ 被/ 排除/ ,/ 故障/ 不再/ 发生/ ./ 并且/ 通过/ 多次/ 联调/ 和/ 实际/ 应用/ 进行/ 验证/ 和/ 确认/ ./ 5.2/ 案例/ 2/ ./ 某/ 装置/ 误用/ 变量/ 名称/ 导致/ 装置/ 失控/ 某/ 系统/ 进行/ 试验/ 时/ 点火/ 正常/ ./ 在/ 制导/ 阶段/ 装置/ 失控/ ,/ 若干/ 秒/ 后/ 自毁/ ./ 通过/ 检测/ 排除/ 硬件/ 和/ 通信/ 链路/ 问题/ ./ 应用/ 以上/ 框架/ 进行/ 软件/ 故障诊断/ ./ (/ 1/ )/ 故障/ 检测/ ./ 分析/ 试验/ 所/ 采集/ 的/ 数据/ 结果/ ,/ 发现/ 测量/ 方位角/ 偏差/ 的/ 滤波/ 结果/ 在/ 个别/ 时间段/ 上/ 不/ 一致/ ,/ 在/ 某/ 时刻/ 滤波/ 结果/ 与/ 实测值/ 的/ 符号/ 相反/ ./ 为此/ ,/ 采用/ 动态/ 测试/ 的/ 方法/ ,/ 编写/ 专门/ 的/ 滤波/ 验证/ 程序/ ,/ 将/ 实测/ 的/ 方位角/ 偏差/ 数据/ 作为/ 输入量/ 进行/ 滤波/ ,/ 获得/ 滤波/ 处理/ 的/ 正确/ 结果/ ;/ 然后/ 将/ 主控/ 程序/ 滤波/ 实际/ 结果/ 与/ 正确/ 结果/ 进行/ 比较/ ,/ 结果/ 发现/ 两者/ 不/ 一致/ ,/ 表明/ 主控/ 程序/ 滤波/ 处理/ 有/ 问题/ ./ (/ 2/ )/ 故障/ 定位/ ./ (/ a/ )/ 固定/ 故障/ ./ 对/ 主控/ 程序/ 进行/ 修改/ ,/ 使/ 之/ 能够/ 将角/ 偏差/ 字/ 输入/ ,/ 改用/ 本次/ 试验/ 采集/ 到/ 的/ 相应/ 数据/ ,/ 模拟/ 监测/ 装置/ 的/ 数据/ 输入/ 过程/ ,/ 并/ 让/ 修改/ 后/ 的/ 主控/ 程序/ 在/ 实时/ 方式/ 下/ 运行/ ,/ 复现/ 了/ 故障/ 现象/ ./ (/ b/ )/ 故障/ 定位/ ./ 利用/ 上述/ 修改/ 后/ 的/ 主控/ 程序/ ,/ 采取/ 跟踪/ 寻迹/ 方法/ 向/ 后/ 追踪/ 与/ 方位角/ 偏差/ 有关/ 的/ 变量/ ,/ 找出/ 有/ 缺陷/ 的/ 语句/ ./ 引起/ 该/ 故障/ 的/ 软件缺陷/ 位于/ 以下/ 程序段/ 中/ :/ if/ (/ mazd/ _/ shi/ [/ 0/ ]/ </ -/ 0.020/ )/ mazd/ _/ shi/ [/ 0/ ]/ =/ -/ 0.020/ ;/ if/ (/ mazd/ _/ shi/ [/ 0/ ]/ >/ 0.020/ )/ mazd/ _/ shi/ [/ 0/ ]/ =/ 0.020/ ;/ if/ (/ meld/ _/ shi/ [/ 0/ ]/ </ -/ 0.020/ )/ mazd/ _/ shi/ [/ 0/ ]/ =/ -/ 0.020/ ;/ if/ (/ meld/ _/ shi/ [/ 0/ ]/ >/ 0.020/ )/ mazd/ _/ shi/ [/ 0/ ]/ =/ 0.020/ ./ 语句/ 中/ mazd/ _/ shi/ [/ 0/ ]/ 和/ meld/ _/ shi/ [/ 0/ ]/ 分别/ 为/ 输入/ 的/ 测量/ 的/ 方位角/ 偏差/ 和/ 高低/ 角/ 偏差/ ./ 后/ 两条/ 语句/ 中/ 变量名/ mazd/ _/ shi/ [/ 0/ ]/ 是/ 错误/ 的/ ,/ 应为/ meld/ _/ shi/ [/ 0/ ]/ ./ 本例/ 中/ 的/ 软件/ 故障/ 是/ 由于/ 用/ 拷贝/ 方式/ 复制/ 的/ 程序段/ 修改/ 不/ 到位/ 所/ 引起/ ,/ 属于/ 实现/ 与/ 编码/ 型/ 故障/ ./ (/ 3/ )/ 故障/ 排除/ ./ 排除/ 该/ 故障/ 的/ 措施/ 是/ :/ 将/ 有/ 缺陷/ 的/ 程序段/ 中后/ 两条/ 语句/ 中/ 变量名/ 由/ mazd/ _/ shi/ [/ 0/ ]/ 改为/ meld/ _/ shi/ [/ 0/ ]/ ./ 对/ 改正/ 后/ 的/ 程序/ 进行/ 测试/ ,/ 并且/ 再次/ 利用/ 这次/ 试验/ 的/ 采集/ 数据/ 和/ 故意/ 设置/ 的/ 一些/ 异常/ 数据/ 进行/ 验证/ ,/ 结果表明/ 缺陷/ 已/ 被/ 排除/ ,/ 故障/ 不再/ 发生/ ./ 并/ 进一步/ 通过/ 多次/ 的/ 模拟/ 试验/ 进行/ 验证/ 和/ 确认/ ./ 6/ 结束语/ 软件/ 在/ 国民经济/ 和/ 社会/ 生活/ 中/ 发挥/ 着/ 重要/ 作/ Page10/ 用/ ./ 软件/ 出现/ 故障/ 会/ 给/ 人们/ 造成/ 很大/ 的/ 危害/ ./ 研究/ 软件/ 故障诊断/ 意义/ 重大/ ./ 本文/ 分析/ 软件/ 失效/ 机理/ 和/ 软件/ 故障/ 产生/ 原因/ ,/ 讨论/ 软件/ 故障/ 模型/ ,/ 提出/ 一种/ 软件/ 故障诊断/ 过程/ 框架/ ,/ 将/ 软件/ 故障/ 检测/ 、/ 故障/ 定位/ 、/ 故障/ 排除/ 等/ 活动/ 集成/ 在/ 一起/ ,/ 为/ 系统地/ 进行/ 软件/ 故障诊断/ 提供/ 指导/ ./ 并且/ 将/ 该/ 框架/ 应用/ 于/ 实际/ 的/ 软件/ 故障诊断/ ,/ 验证/ 了/ 其/ 有效性/ ./ 软件/ 故障诊断/ 研究/ 领域/ 非常/ 广泛/ ,/ 包括/ 软件缺陷/ 和/ 软件/ 故障/ 预防/ 等/ ,/ 由于/ 不是/ 本文/ 的/ 研究/ 重点/ ,/ 故/ 没有/ 将/ 软件缺陷/ 和/ 软件/ 故障/ 预防/ 等/ 纳入/ 本文/ 所/ 提出/ 的/ 框架/ 中/ ./ 实际上/ ,/ 为了/ 更/ 有效/ 地/ 发现/ 问题/ ,/ 以/ 避免/ 严重后果/ 的/ 发生/ ,/ 一方面/ 应/ 预防/ 软件缺陷/ 的/ 引入/ ,/ 另一方面/ 应/ 预防/ 软件/ 故障/ 的/ 发生/ ./ 前者/ 的/ 主要/ 方法/ 包括/ 加强/ 软件开发/ 过程/ 管理/ (/ 如/ 实施/ CMM/ 五级/ 中/ 的/ 缺陷/ 预防/ 关键/ 过程/ 域/ 等/ )/ [/ 28/ -/ 29/ ]/ 和/ 进行/ 避错/ 设计/ [/ 27/ ]/ 等/ ./ 后者/ 的/ 主要/ 方法/ 包括/ 软件/ 容错/ 设计/ [/ 5/ ,/ 27/ ]/ 等/ ./ 我们/ 相信/ ,/ 随着/ 软件缺陷/ 和/ 软件/ 故障/ 预防/ 等/ 研究/ 的/ 不断深入/ ,/ 必将/ 推动/ 软件/ 故障诊断/ 研究/ 的/ 不断/ 向前/ 发展/ ./ 在/ 今后/ 的/ 工作/ 中/ ,/ 我们/ 将/ 分析/ 、/ 研究/ 已有/ 的/ 硬件/ 系统/ 故障诊断/ 案例/ ,/ 深入研究/ 软件/ 故障/ 的/ 特点/ 和/ 各种/ 硬件/ 系统/ 故障诊断/ 方法/ ,/ 进一步/ 完善/ 所/ 提出/ 的/ 软件/ 故障诊断/ 过程/ 框架/ ,/ 并且/ 继续/ 在/ 软件/ 故障诊断/ 实践/ 中/ 进行/ 检验/ ./ 致谢/ 审稿人/ 对/ 本文/ 提出/ 了/ 宝贵/ 的/ 修改意见/ ,/ 作者/ 在/ 此/ 表示/ 衷心感谢/ !/ 

