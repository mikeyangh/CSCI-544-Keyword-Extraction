Page1/ 一种/ 能效/ 优化/ 的/ MapReduce/ 资源/ 比/ 模型/ 宋杰/ 1/ )/ 刘雪冰/ 1/ )/ 朱志良/ 1/ )/ 李/ 甜甜/ 2/ )/ 赵大哲/ 2/ )/ 于戈/ 2/ )/ 1/ )/ (/ 东北大学/ 软件/ 学院/ 沈阳/ 110819/ )/ 2/ )/ (/ 东北大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110819/ )/ 摘要/ 随着/ 云/ 计算/ 的/ 快速/ 发展/ ,/ IT/ 资源/ 规模/ 的/ 不断扩大/ 导致/ 能耗/ 问题/ 日益/ 凸显/ ./ 为/ 降低/ MapReduce/ 编程/ 模型/ 带来/ 的/ 高能耗/ ,/ 文中/ 研究/ Map/ // Reduce/ 任务/ 的/ 资源/ 消费/ 特征/ 及/ 该/ 特征/ 与/ 能效/ 的/ 关系/ ,/ 旨在/ 寻找/ 一种/ 能够/ 指导/ 资源分配/ 和/ 任务调度/ 的/ 资源/ 模型/ ,/ 进而/ 实现/ 能效/ 优化/ ./ 文中/ 提出/ 任务/ 的/ 能效/ 与/ 任务/ 被/ 分配/ 的/ 资源量/ 无关/ ,/ 而/ 与其/ 被/ 分配/ 的/ 各种/ 资源/ 的/ 资源量/ 比例/ 相关/ ,/ 且/ 存在/ 一个/ “/ 最佳/ 资源/ 比/ ”/ 使得/ 能效/ 达到/ 最高/ ./ 基于/ 此/ ,/ 文中/ 首先/ 提出/ 了/ 普适/ 的/ 资源/ 和/ 能效/ 模型/ ,/ 从/ 模型/ 层面/ 证明/ 最佳/ 资源/ 比/ 和/ 能效/ 之间/ 的/ 关系/ ,/ 量化/ 空闲/ 资源量/ 和/ 空闲/ 能耗/ ;/ 随后/ 分析/ MapReduce/ 编程/ 模型/ ,/ 将/ 普适/ 资源/ 比/ 模型/ 变换/ 到/ MapReduce/ 下/ ./ 通过/ 抽象/ 的/ 数据/ 的/ “/ 生产者/ -/ 消费者/ ”/ 模式/ ,/ 求解/ Map/ // Reduce/ 任务/ 的/ 最佳/ 资源/ 比/ ;/ 最后/ ,/ 通过/ 实验/ 从/ 任务/ 能效/ 和/ 空闲/ 能耗/ 两个/ 角度/ 证明/ 了/ 最佳/ 资源/ 比/ 的/ 存在/ ,/ 并/ 根据/ 实验/ 结果/ ,/ 对/ MapReduce/ 执行/ 过程/ 进行/ 划分/ ,/ 给出/ 了/ 部分/ Map/ // Reduce/ 任务/ 的/ 最佳/ 资源/ 比/ ./ 最佳/ 资源/ 比/ 的/ 提出/ 和/ 求解/ 将/ 有利于/ 基于/ 该/ 最佳/ 资源/ 比/ 的/ 任务调度/ 和/ 资源分配/ 算法/ 的/ 研究/ ,/ 进而/ 实现/ Map/ // Reduce/ 任务/ 能效/ 的/ 提高/ ./ 关键词/ 云/ 计算/ ;/ 能效/ ;/ 资源/ 比/ ;/ MapReduce1/ 引言/ 云/ 计算/ 已/ 成为/ IT/ 服务/ 的/ 主流/ 技术/ [/ 1/ ]/ ,/ 具有/ 较/ 高/ 的/ 成熟度/ ,/ 如/ 亚马逊/ 、/ Google/ 、/ Salesforce/ 等/ 知名/ 公司/ 均/ 掌握/ 成熟/ 的/ 云/ 计算技术/ ①/ ②/ [/ 2/ ]/ ,/ 并/ 将/ 其/ 进行/ 推广/ ./ 在/ 众多/ 云/ 计算技术/ 中/ ,/ MapReduce/ [/ 3/ ]/ 编程/ 模型/ 最为/ 流行/ ./ MapReduce/ 是/ 分布式/ 地/ 并行/ 完成/ 大规模/ 运算/ 的/ 一种/ 有效/ 技术/ ,/ MapReduce/ 框架/ 完成/ 输入/ 数据/ 的/ 分割/ 、/ 任务调度/ 、/ 资源分配/ 、/ 节点/ 容错/ 、/ 节点/ 通信/ 和/ 结果/ 数据/ 保存/ 等/ 复杂/ 操作/ ,/ 使得/ 应用程序/ 能够/ 便捷/ 地/ 在/ 大量/ 普通/ 配置/ 的/ 计算机/ 上/ 并行执行/ ./ MapReduce/ 是/ 当前/ 研究/ 的/ 热点/ ,/ 现有/ 研究/ 或/ 对/ MapReduce/ 进行/ 性能/ 优化/ ,/ 或/ 修改/ 现有/ 数据分析/ 算法/ 以/ 适应/ MapReduce/ 模型/ ,/ 或/ 在/ MapReduce/ 的/ 基础/ 上/ 寻找/ 更为/ 高效/ 的/ 编程/ 模型/ ,/ 而/ 本文/ 将/ 主要/ 从/ MapReduce/ 作业/ 能效/ 优化/ 的/ 角度/ 展开/ 研究/ ./ 随着/ IT/ 设施/ 功率/ 的/ 逐渐/ 增加/ 和/ MapReduce/ 集群/ 规模/ 的/ 不断扩大/ ,/ 集群/ 能耗/ 过大/ 已经/ 成为/ 云/ 计算/ 面临/ 的/ 一个/ 难题/ ./ 《/ 纽约时报/ 》/ 估计/ 全球/ 互联网/ 数据中心/ 的/ 用/ 电功率/ 可能/ 达/ 300/ 亿/ 瓦特/ ,/ 相当于/ 30/ 个/ 核电站/ 的/ 供电/ 功率/ ./ 而/ 数据中心/ 的/ 耗电量/ 仅/ 有/ 6/ %/ ~/ 12/ %/ 是/ 被/ 用于/ 网站/ 计算/ 的/ ,/ 其余/ 均/ 在/ 维持/ 服务器/ 工作/ 状态/ 时/ 被/ 无谓/ 消耗/ ③/ ./ 此外/ ,/ 绿色/ 和平/ 组织/ 预测/ ,/ 到/ 2020/ 年/ ,/ 全球/ 主要/ IT/ 运营商/ 的/ 能耗/ 将/ 达到/ 2/ 万亿千瓦时/ ,/ 超过/ 德/ 、/ 法/ 、/ 加/ 和/ 巴西/ 等/ 4/ 国/ 的/ 能耗/ 总和/ ④/ ./ 从/ 环境/ 角度/ ,/ 数据中心/ 在/ 消耗/ 大量/ 电力/ 的/ 同时/ 会/ 产生/ 惊人/ 的/ 碳/ 排放/ ./ 在/ 美国/ ,/ 100MW/ 发电站/ 会/ 花费/ 6000/ 万到/ 1/ 亿美元/ 并/ 排放/ 5000/ 万吨/ CO2/ ,/ 目前/ 全球/ 数据中心/ 的/ CO2/ 排放量/ 相当于/ 阿根廷/ 整个/ 国家/ 的/ CO2/ 排放量/ ,/ 全球/ IT/ 产业/ 的/ 碳/ 排放/ 占/ 温室/ 气体/ 总/ 排放/ 的/ 2/ %/ [/ 4/ ]/ ./ 在/ 此/ 背景/ 下/ ,/ 如何/ 在/ 数据中心/ 里/ 采用/ 高/ 能效/ 的/ 方式/ 运行/ MapReduce/ 作业/ ,/ 进而/ 降低/ 能耗/ 实现/ 绿色/ 计算/ ,/ 成为/ 当今/ 研究/ 的/ 热点问题/ ./ 按照/ 物理学/ 观点/ ,/ 能效/ 是/ 指/ 在/ 能源/ 利用/ 中/ ,/ 发挥作用/ 的/ 与/ 实际/ 消耗/ 的/ 能源/ 量/ 之/ 比/ ./ 从/ 消费/ 角度看/ ,/ 能效/ 是/ 指为/ 终端用户/ 提供/ 的/ 服务/ 与/ 所/ 消耗/ 的/ 总/ 能源/ 量/ 之/ 比/ ./ 所谓/ 提高/ 能效/ ,/ 就是指/ 用/ 更/ 少/ 的/ 能源/ 投入/ 带来/ 同等/ 的/ 能源/ 服务/ ,/ 可以/ 认为/ 能效/ 是/ 性能/ 和/ 能耗/ 之比/ ./ 本/ 研究/ 着重于/ MapReduce/ 能效/ 优化/ ./ 之所以/ 选择/ MapReduce/ 是因为/ 它/ 是/ 云/ 计算环境/ 中/ 主流/ 的/ 编程/ 模型/ ,/ 大多/ Internet/ 服务商/ 的/ 核心/ 业务/ 均/ 采用/ MapReduce/ 实现/ ./ MapReduce/ 模型/ 有/ 多种/ 实现/ ,/ 如/ GoogleMapReduce/ 、/ ApacheHadoop/ 、/ Map/ -/ Reduce/ -/ Merge/ 、/ 多核/ 和/ 多处理器/ 系统/ 的/ MapReduce/ 等/ ./ 本文/ 选择/ 开源/ 且/ 被/ 开发者/ 和/ 研究/ 人员/ 广泛/ 接受/ 的/ ApacheHadoop/ 作为/ 云/ 计算环境/ ./ 当前/ 主流/ 的/ 能效/ 优化/ 思路/ 为/ 负载/ 集中/ 和/ 关闭/ 空闲/ 节点/ ,/ 然而/ MapReduce/ 集群/ 中/ 的/ 节点/ 不仅/ 完成/ 运算/ 任务/ ,/ 还/ 存储/ 海量/ 数据/ ./ 节点/ 需/ 提供/ “/ Always/ -/ On/ ”/ 的/ 数据服务/ ,/ 且/ 由于/ 集群/ 自身/ 特性/ 使开/ 关节点/ 的/ 代价/ 很/ 高/ ,/ 因此/ 无法/ 通过/ 临时/ 关闭/ 节点/ 的/ “/ ON/ -/ OFF/ ”/ 算法/ [/ 5/ -/ 6/ ]/ 实现/ 节能/ ./ 我们/ 前期/ 研究/ 证明/ [/ 7/ ]/ ,/ MapReduce/ 集群/ 节点/ 的/ 资源/ 使用率/ 不高/ ,/ 产生/ 这一/ 情况/ 的/ 原因/ 可以/ 归结为/ 节点/ 资源/ 等待/ ,/ 如/ CPU/ 会因/ 等待/ I/ // O/ 操作/ 而/ 阻塞/ ,/ 或/ 等待/ 网络/ 数据传输/ ./ 因/ 节点/ 资源/ 被动/ 空闲/ 而/ 产生/ 空闲/ 资源/ ,/ 空闲/ 资源/ 越/ 多/ ,/ 空闲/ 能耗/ 越大/ ,/ 能效/ 就/ 越/ 低/ ./ 我们/ 认为/ ,/ 一个/ 任务/ 所/ 分配/ 的/ 资源/ 越/ 多/ ,/ 执行/ 性能/ 越/ 好/ ,/ 但/ 能耗/ 越高/ ,/ 因此/ 能效/ 未必/ 有所提高/ ;/ 相反/ 的/ ,/ 若/ 资源分配/ 不合理/ ,/ 部分/ 资源/ 过量/ ,/ 则/ 空闲/ 资源/ 也/ 会/ 增加/ ,/ 空闲/ 能耗/ 增加/ ,/ 能效/ 反而/ 降低/ ./ 我们/ 提出/ 一个/ 假设/ ,/ 当/ 任务/ 的/ 资源分配/ 满足/ 一定/ 比例/ 时/ ,/ 无论/ 分配/ 的/ 资源量/ 多少/ ,/ 任务/ 的/ 能效/ 值/ 不变/ ,/ 且/ 存在/ 一个/ 最佳/ 的/ 比例/ ,/ 使/ 能效/ 最高/ ,/ 我们/ 称/ 这/ 一/ 最佳/ 的/ 资源分配/ 比例/ 为/ 最佳/ 资源/ 比/ ./ 本文/ 从/ 理论/ 推导/ 和/ 实验/ 验证/ 这/ 两个/ 角度/ 证明/ 了/ 最佳/ 资源/ 比/ 的/ 存在/ ,/ 并/ 给出/ 了/ ①/ ②/ ③/ ④/ Page3/ 求解/ MapReduce/ 任务/ 最佳/ 资源/ 比/ 的/ 过程/ ./ 最佳/ 资源/ 比/ 的/ 提出/ 和/ 求解/ 将/ 有利于/ 进一步/ 研究/ 基于/ 该/ 最佳/ 资源/ 比/ 的/ 任务调度/ 和/ 资源分配/ 算法/ ,/ 进而/ 有效/ 提高/ MapReduce/ 任务/ 的/ 能效/ ./ 综上所述/ ,/ 本文/ 研究/ MapReduce/ 任务/ 的/ 资源/ 消费/ 特征/ ,/ 提出/ 了/ 任务/ 的/ 最佳/ 资源/ 比/ 模型/ ,/ 定义/ 任务/ 达到/ 能效/ 最优/ 时/ 的/ 资源/ 占有/ 情况/ ./ 该/ 模型/ 是/ 普适/ 的/ ,/ 当/ 任务/ 为/ 单一/ 资源/ 密集型/ 任务/ 时/ ,/ 忽略不计/ 的/ 资源/ 的/ 比值/ 被/ 简化/ 为/ 无穷小/ 的/ 形式/ ,/ 以/ 保证/ 比值/ 的/ 有效性/ ./ 资源分配/ 问题/ 是/ 一个/ 经典/ 问题/ ,/ 在/ 不同/ 的/ 运算/ 环境/ 中有/ 不同/ 的/ 设计/ 目标/ ,/ 如/ 性能/ 、/ 公平性/ 和/ 适应性/ 等/ ;/ 本文/ 在/ 优化/ 能效/ 这一/ 目标/ 下/ ,/ 提出/ 了/ 采用/ 资源量/ 的/ 比值/ 而/ 非/ 资源量/ 作为/ 资源分配/ 标准/ ,/ 最佳/ 资源/ 比是/ 优化/ 能效/ 的/ 新/ 方法/ ,/ 尚未/ 见/ 类似/ 研究/ ./ 本文/ 首先/ 定义/ 一个/ 针对/ 任务/ 而言/ 的/ 普适/ 的/ 资源/ 模型/ ,/ 包括/ 资源/ 、/ 任务/ 、/ 任务/ 能效/ 和/ 任务/ 最佳/ 资源/ 比/ ;/ 随后/ 将/ 普适/ 模型/ 运用/ 到/ MapReduce/ 中/ ,/ 对/ MapReduce/ 任务/ 进行/ 进一步/ 划分/ ;/ 接着/ 利用/ 资源/ 的/ “/ 生产者/ -/ 消费者/ ”/ 模式/ 求解/ MapReduce/ 最佳/ 资源/ 比/ ./ 最后/ ,/ 我们/ 通过/ 能效/ 和/ 空闲/ 能耗/ 两个/ 角度/ 证明/ 最佳/ 资源/ 比/ 的/ 存在/ 性/ 和/ 合理性/ ,/ 并/ 在/ 实验/ 基础/ 上/ 给出/ 了/ 部分/ MapReduce/ 任务/ 的/ 划分/ 方法/ 和/ 最佳/ 资源/ 比/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 工作/ ;/ 第/ 3/ 节/ 和/ 第/ 4/ 节/ 分别/ 介绍/ 普适/ 资源/ 比/ 模型/ 以及/ 其/ 在/ MapReduce/ 中/ 的/ 应用/ ;/ 第/ 5/ 节/ 从/ 理论/ 上/ 求解/ MapReduce/ 的/ 最佳/ 资源/ 比/ ;/ 第/ 6/ 节/ 通过/ 实验/ 验证/ 了/ 最佳/ 资源/ 比/ 的/ 存在/ 性/ 、/ 合理性/ 以及/ 在/ 部分/ 用例/ 下/ 的/ 具体/ 值/ ;/ 第/ 7/ 节/ 总结/ 全文/ 并/ 提出/ 下/ 一步/ 工作/ ./ 2/ 相关/ 研究/ 提高/ 能效/ 就是指/ 用/ 更/ 少/ 的/ 能源消耗/ 来/ 获得/ 同等/ 的/ 服务/ ,/ 我们/ 进行/ 能效/ 优化/ 必须/ 考虑/ 性能/ 和/ 能耗/ 之间/ 的/ 权衡/ ./ 国内外/ 研究/ 在/ 这/ 一方面/ 持有/ 两种/ 不同/ 的/ 观点/ ,/ 文献/ [/ 8/ -/ 10/ ]/ 声称/ 能耗/ 和/ 性能/ 是/ 两种/ 不同/ 的/ 优化/ 目标/ ,/ 所以/ 他们/ 之间/ 存在/ 着/ 某种/ 折中/ 关系/ ,/ 提高/ 性能/ 必然/ 导致/ 高能耗/ ,/ 相反/ ,/ 降低/ 能耗/ 必然/ 损失/ 性能/ ./ 文献/ [/ 11/ -/ 12/ ]/ 进一步/ 权衡/ 了/ 了/ 电力/ 消耗/ 、/ SLA/ 需求/ 和/ 碳/ 排放/ 预算/ 这/ 三要素/ ,/ 通过/ Lyapunov/ 优化/ 技术/ 设计/ 了/ 能耗/ 感知/ 的/ 控制/ 模型/ ;/ 文献/ [/ 13/ ]/ 则/ 声称/ 能耗/ 和/ 性能/ 的/ 优化/ 是/ 一致/ 的/ ,/ 最/ 节能/ 的/ 系统/ 往往/ 也/ 是/ 性能/ 最好/ 的/ 系统/ ./ 概念/ 上/ ,/ 前者/ 符合/ 硬件/ 设计/ 思路/ ,/ 运算/ 越快/ 越/ 耗电/ ,/ 后者/ 符合/ 软件设计/ 思路/ ,/ 任务/ 完成/ 越/ 快/ ,/ 计算机/ 工作/ 时间/ 就/ 越少/ ,/ 自然/ 越省/ 电/ ./ 这/ 两种/ 截然/ 相反/ 的/ 观点/ 的/ 产生/ 是因为/ 采用/ 了/ 不同/ 的/ 假设/ 和/ 性能/ 评价/ 方法/ ./ 前者/ 并/ 没有/ 考虑/ 空闲/ 能耗/ ,/ 也/ 没有/ 考虑/ “/ 同一/ 任务/ 不同/ 实现/ 算法/ ”/ 的/ 复杂度/ 不同/ ,/ 性能/ 评价/ 粒度/ 过细/ ;/ 后者/ 则/ 没有/ 考虑/ 计算机/ 功率/ 的/ 动态性/ ./ 我们/ 实验/ 用/ 计算机/ 的/ 有功/ 功率/ 在/ 50/ ~/ 100/ 瓦特/ 之间/ 浮动/ ,/ 某/ 任务/ 在/ 50/ 瓦下/ 运行/ 2/ 秒/ 和/ 在/ 100/ 瓦下/ 运行/ 1/ 秒/ 消耗/ 的/ 能量/ 相等/ ,/ 而/ 性能/ 则/ 显然/ 不同/ ./ 然而/ ,/ 在/ 云/ 环境/ 下/ 空闲/ 能耗/ 对/ 任务/ 能效/ 的/ 影响/ 要/ 大于/ 节点/ 有功/ 功率/ 的/ 浮动/ ,/ 我们/ 旨在/ 通过/ “/ 减少/ 空闲/ 能耗/ ”/ 来/ 提高/ 能效/ ,/ 即/ 通过/ 能耗/ 优化/ 方法/ 来/ 实现/ 能效/ 优化/ ./ 目前/ ,/ 新能源/ (/ 如/ 风能/ 、/ 太阳能/ )/ 正/ 得到/ 广泛/ 使用/ ,/ 其/ 生成/ 和/ 预测/ 的/ 相关/ 研究/ 是/ 数据中心/ 能耗/ 优化/ 的/ 重要/ 手段/ ;/ 除此之外/ ,/ 跨/ 数据中心/ 的/ 负载/ 均衡/ 的/ 研究/ 也/ 使得/ 能源/ 得到/ 充分利用/ [/ 4/ ]/ ./ 本文/ 的/ 研究/ 旨在/ 指导/ 数据中心/ 内部/ ,/ 即/ 集群/ 的/ 能耗/ 优化/ 方法/ ./ 云/ 环境/ 下/ 的/ 能耗/ 优化/ 问题/ 可以/ 从/ 硬件/ 和/ 软件/ 两个/ 角度/ 考虑/ ,/ 硬件/ 层面/ 包括/ 组件/ 开关/ [/ 5/ -/ 6/ ]/ ,/ 即/ 观察/ 集群/ 中/ 各个/ 组件/ (/ 如/ 芯片/ )/ 的/ 工作/ 负载/ ,/ 将/ 处于/ 空闲/ 状态/ 的/ 组件/ 关闭/ ;/ 以及/ 如/ 被/ 广泛/ 使用/ 的/ DVFS/ [/ 14/ -/ 15/ ]/ 等/ 性能/ 调整/ 技术/ ,/ 根据/ 硬件/ 的/ 能耗/ 情况/ 动态/ 地/ 调节/ 硬件/ 性能/ ,/ 以/ 得到/ 低功耗/ 的/ 工作/ 状态/ ./ 软件/ 层面/ 的/ 能耗/ 优化/ 方法/ 按/ 其/ 作用/ 范围/ 可以/ 分为/ 单机/ 环境/ 和/ 集群/ 环境/ ,/ 其中/ 单机/ 环境/ 下/ 有/ 操作系统/ [/ 16/ ]/ 和/ 虚拟机/ 能耗/ 优化/ 方法/ [/ 17/ ]/ ./ 我们/ 主要/ 从/ 软件/ 层面/ 研究/ 集群/ 中/ 的/ 能耗/ 优化/ 技术/ ,/ 通过/ 分析/ 集群/ 中/ 任务/ 的/ 资源/ 使用/ 情况/ ,/ 寻找/ 一种/ 资源/ 模型/ 来/ 指导/ 资源分配/ 和/ 任务调度/ ,/ 降低/ 空闲/ 能耗/ ,/ 最终/ 实现/ 能效/ 优化/ ./ 一些/ 能耗/ 优化/ 方法/ 不/ 采用/ “/ 以/ 负载/ 集中/ 为/ 目的/ ”/ 的/ 任务调度/ ,/ 而是/ 根据/ 任务/ 或/ 任务/ 队列/ 特性/ ,/ 通过/ 提高/ 资源/ 利用率/ ,/ 减少/ 能源/ 损失/ ,/ 进而/ 优化/ 能耗/ ./ 针对/ MapReduce/ 框架/ :/ 文献/ [/ 18/ ]/ 设计/ 了/ MapReduce/ 调度/ 过程/ 的/ 数学模型/ ,/ 分析/ 影响/ 数据/ 本地化/ 的/ 系统配置/ 值/ ,/ 设计/ 了/ 旨在/ 减少/ 网络/ 传输/ 的/ 调度/ 算法/ ;/ 文献/ [/ 19/ ]/ 提出/ 了/ 一种/ 考虑/ 用户/ 能耗/ 需求/ 的/ 能耗/ 可/ 感知/ MapReduce/ 应用/ 模型/ ;/ 文献/ [/ 20/ ]/ 基于/ 遗传算法/ 提出/ 了/ 旨在/ 提高/ 资源/ 利用率/ 的/ 任务调度/ 算法/ ;/ 文献/ [/ 21/ ]/ 提出/ 了/ 一种/ 动态/ 槽/ 机制/ ,/ 通过/ 提高/ CPU/ 资源/ 的/ 使用率/ 来/ 节约/ 能耗/ 并/ 提高/ 性能/ ,/ 但是/ 并/ 没有/ 进行/ 实验/ 验证/ ./ 上述/ 方法/ 均/ 通过/ 提高/ 资源/ 利用率/ 进行/ 能效/ 优化/ ,/ 这些/ 方法/ 主要/ 考虑/ 的/ 是/ 节点/ 的/ 某/ 一种/ 或/ 几种/ 特定/ 资源/ 的/ 利用率/ ,/ 而本/ 研究/ 则/ 着重/ 考虑/ 任务/ 的/ 多种/ 资源/ 使用/ 的/ 比率/ ,/ 与/ 上述/ 方法/ 有/ 本质/ 不同/ ./ 对于/ 一个/ 任务/ ,/ 其/ 最佳/ 的/ 资源/ 占有率/ 并非/ 是/ 最大/ 资源/ 占有率/ ,/ 而是/ 一个/ 适当/ 的/ 比例/ [/ 22/ ]/ ,/ 多种/ 资源/ Page4/ 占有率/ 和/ 性能/ 之间/ 的/ 关系/ 会/ 是/ 一个/ 类似/ U/ 型/ 的/ 曲面/ ./ 本文/ 则/ 力求/ 寻找/ 这一/ 最佳/ 的/ 资源/ 占有率/ ,/ 并/ 作为/ 资源/ 调度/ 的/ 目标/ ./ 与/ 该/ 思路/ 相关/ 的/ 现有/ 研究/ 包括/ :/ 文献/ [/ 23/ ]/ 按照/ 任务/ 的/ 最佳/ 资源/ 请求/ 、/ 平均/ 收益/ 、/ 失败率/ 等/ 排序/ ,/ 然后/ 通过/ 启发/ 算法/ 解决/ 资源分配/ 问题/ ,/ 其中/ 最佳/ 资源/ 请求/ 是/ 预定/ 义/ 的/ ,/ 文中/ 没有/ 给出/ 其/ 定义/ 方式/ ;/ 文献/ [/ 24/ ]/ 将/ Map/ // Reduce/ 任务/ 继续/ 划分/ 为/ CPU/ 密集型/ 和/ I/ // O/ 密集型/ 阶段/ ,/ 采取/ 称为/ “/ 资源/ 使用/ 管道/ ”/ 的/ 技术/ 让/ 细分/ 后/ 的/ 不同/ 任务/ 阶段/ 同时/ 运行/ ,/ 从而/ 提高/ 了/ CPU/ 和/ I/ // O/ 的/ 使用率/ ,/ 其本质/ 上/ 考虑/ 了/ 任务/ 对/ 不同/ 资源/ 的/ 不同/ 要求/ ,/ 但/ 没有/ 抽象/ 出/ 资源/ 比/ 的/ 概念/ ,/ 而/ 仅仅/ 将/ 任务/ 划分/ 成/ 不同/ 的/ 资源/ 密集/ 类型/ ;/ 文献/ [/ 25/ ]/ 提出/ 了/ 一种/ 称为/ 绿色/ 调度/ 的/ 调度/ 策略/ ,/ 通过/ 适当/ 地/ 牺牲/ MapReduce/ 公平/ 调度/ 算法/ 的/ 公平性/ 来/ 让/ 资源/ 使用/ 情况/ 互补/ 的/ 任务/ 重叠/ 运行/ ,/ 如/ 增加/ CPU/ 密集型/ 任务/ 和/ IO/ 密集型/ 任务/ 同时/ 执行/ 的/ 概率/ ,/ 但/ 没有/ 进行/ 量化/ 分析/ ./ 本/ 研究/ 的/ 最佳/ 资源/ 比/ 模型/ 则/ 量化/ 的/ 定义/ 的/ 任务/ 对/ 资源/ 的/ 需求/ 特征/ ./ 云/ 环境/ 中/ 的/ 资源分配/ 是/ 一项/ 关键技术/ ,/ 大多数/ 云/ 平台/ (/ 如/ HadoopMapReduce/ )/ 任务调度/ 算法/ 的/ 重心/ 都/ 放在/ 调度/ 器上/ ①/ [/ 26/ ]/ ,/ 主要/ 考虑/ 的/ 是/ 公平性/ 和/ 负载/ 均衡/ ,/ 而/ 较/ 少/ 的/ 从/ 任务/ 资源/ 需求/ 的/ 角度/ 展开/ 研究/ ,/ 这/ 就/ 可能/ 导致/ 任务分配/ 后/ ,/ 某些/ 节点/ 出现/ 过载/ ,/ 而/ 其他/ 节点/ 却/ 出现/ 空闲/ 状态/ 的/ 情况/ ./ 因此/ ,/ 需要/ 一个/ 资源/ 模型/ 对/ 任务/ 所/ 需/ 的/ 资源/ 进行/ 定义/ ,/ 进而/ 提升/ 集群/ 的/ 资源/ 利用率/ ./ 本文/ 提出/ 的/ 最佳/ 资源/ 比/ 模型/ 则/ 是从/ 资源/ 使用率/ 的/ 比值/ 角度/ 来/ 表征/ 一个/ 任务/ 的/ 特点/ ,/ 并/ 作为/ 资源分配/ 和/ 任务调度/ 的/ 基础/ ./ 3/ 普适/ 的/ 资源/ 和/ 能效/ 模型/ 本/ 节/ 首先/ 定义/ 了/ 普适/ 的/ 资源/ 模型/ 和/ 能效/ 模型/ ,/ 然后/ 在/ 后续/ 章节/ 加以/ 细化/ ,/ 本节/ 中/ 提及/ 的/ 任务/ 是/ 一种/ 泛化/ 的/ 概念/ ,/ 但/ 同样/ 适用/ 于/ MapReduce/ 任务/ ./ 一方面/ ,/ 资源/ 和/ 能效/ 模型/ 是/ 针对/ 任务/ 的/ ,/ 而/ 非/ 针对/ 集群/ 或/ 节点/ 的/ ,/ 本/ 研究/ 着重/ 研究/ 任务/ 占有/ 的/ 资源/ 特征/ ,/ 而/ 按照/ 该/ 特征/ 的/ 资源分配/ 是/ 进一步/ 研究/ ,/ 因此/ 我们/ 研究/ 一个/ 任务/ 的/ n/ 种/ 资源/ ,/ 以及/ 该/ 任务/ 的/ 能效/ ./ 另一方面/ ,/ 任务/ 占有/ 的/ 资源/ 来源于/ 某/ 节点/ ,/ 等待/ 能耗/ 也/ 是/ 由/ 节点/ 产生/ 的/ ,/ 若/ 集群/ 是/ 由/ 虚拟化/ 技术/ 构建/ 的/ ,/ 每个/ 虚拟/ 节点/ 拥有/ 的/ 资源/ 为/ 分配/ 给/ 该/ 虚拟/ 节点/ 的/ 物理/ 资源/ 或/ 虚拟/ 资源/ ./ 由于/ 虚拟/ 节点/ 的/ 隔离/ 性/ ,/ 绝大部分/ 资源/ 都/ 互不/ 影响/ ,/ 因此/ 可以/ 将/ 虚拟/ 节点/ 当做/ 物理/ 节点/ 处理/ ./ 定义/ 1/ ./ 计算资源/ (/ ComputingResource/ )/ ./ 计算机系统/ 中/ 的/ 资源/ 主要/ 包括/ 硬件资源/ 、/ 软件资源/ 、/ 网络资源/ 和/ 数据/ (/ 内容/ )/ 资源/ ./ 其中/ ,/ 产生/ 能耗/ 的/ 主要/ 为/ 硬件资源/ 和/ 网络资源/ ,/ 如/ 中央处理器/ (/ CPU/ )/ 、/ 内存储器/ 、/ 外存储器/ 、/ 输入/ // 输出设备/ 、/ 网卡/ 等/ ./ 计算资源/ 为/ 与/ 这些/ 硬件资源/ 的/ 抽象/ ,/ 如/ CPU/ 资源/ 、/ 内存/ 资源/ 、/ 磁盘/ 资源/ 、/ 网络资源/ 等/ ./ 定义/ 2/ ./ 资源量/ (/ ResourceQuantity/ )/ ./ 资源量/ 是/ 对/ 某/ 任务分配/ 或/ 消费/ 的/ 节点/ 计算资源/ 大小/ 的/ 一种/ 度量/ ./ 设/ 任务/ 资源分配/ 和/ 消费/ 均/ 是/ 动态/ 的/ ,/ 随/ 时间/ 变化/ 而/ 变化/ ./ 给定/ 一个/ 任务/ ,/ n/ 为/ 资源/ 种类/ 数/ ,/ ri/ (/ t/ )/ 表示/ 任务/ 在/ t/ 时刻/ 消费/ 第/ i/ 个/ 资源/ 的/ 资源量/ ,/ ri/ (/ t/ )/ 表示/ 任务/ 在/ t/ 时刻/ 分配/ 的/ 第/ i/ 个/ 资源/ 的/ 资源量/ ,/ |/ ri/ |/ 表示/ 第/ i/ 个/ 资源/ 的/ 资源/ 总量/ ./ 在/ t/ 时刻/ ,/ 任务/ 消费/ 资源量/ R/ (/ t/ )/ 可用/ 一个/ n/ 维/ 向量/ 来/ 表示/ ,/ 其/ 每个/ 分量/ 是/ 一个/ 关于/ 时间/ 的/ 函数/ ./ 同理/ 分配/ 资源量/ R/ (/ t/ )/ 和/ 资源/ 总量/ |/ R/ |/ :/ 资源量/ 需可/ 度量/ 、/ 可/ 计算/ ,/ 并/ 统一/ 不同/ 种类/ 资源/ 的/ 量纲/ ./ 以/ 消费/ 资源量/ R/ (/ t/ )/ 为例/ ,/ 对于/ 任意/ 资源/ ,/ 需要/ 确定/ 其/ 资源量/ 的/ 表示/ 方法/ ,/ 如/ 可以/ 使用/ CPU/ 频率/ 、/ CPU/ 使用率/ 、/ 内存/ 使用率/ 、/ 内存/ 读写/ 速率/ 、/ 硬盘/ I/ // O/ 使用率/ 、/ 硬盘/ 读写/ 速度/ 、/ 网络/ 吞吐量/ 、/ 带宽/ 占用率/ 等/ 一项/ 或/ 多项/ 指标/ 分别/ 来/ 描述/ CPU/ 、/ 内存/ 、/ 磁盘/ 和/ 网络/ 的/ 使用/ 情况/ ./ 资源量/ 的/ 定义/ 要/ 考虑/ 节点/ 的/ 异构/ 性/ ,/ 采用/ 绝对值/ 而/ 非/ 相对值/ ,/ 资源量/ 的/ 量纲/ 需/ 一致/ 以/ 计算资源/ 比/ ./ 下文/ 求解/ 中/ 主要/ 讨论/ CPU/ 、/ 磁盘/ 和/ 网络/ 3/ 种/ 资源/ ./ 某一/ 时刻/ t/ 的/ 磁盘/ 资源量/ rd/ (/ t/ )/ ,/ 网络资源/ 量/ rn/ (/ t/ )/ 可以/ 分别/ 用该/ 时刻/ 的/ 磁盘/ 读写/ 速率/ vd/ (/ t/ )/ ,/ 网络/ 读写/ 速率/ vn/ (/ t/ )/ 来/ 表示/ ,/ 两种/ 资源量/ 的/ 量纲/ 一致/ ,/ 都/ 为/ MB/ // s/ ./ 若以/ CPU/ 的/ 使用率/ ω/ (/ t/ )/ 作为/ CPU/ 消费/ 资源量/ rc/ (/ t/ )/ ,/ 则/ 忽视/ 了/ 节点/ CPU/ 的/ 异构/ 性/ ,/ 如/ 2.0/ GHzCPU/ 的/ 50/ %/ 使用率/ 下/ 的/ 运算/ 能力/ 相当于/ 1.0/ GHzCPU/ 的/ 100/ %/ 使用率/ 下/ 的/ 运算/ 能力/ ./ 而且/ 该/ 方法/ 使/ CPU/ 资源量/ 的/ 量纲/ 与/ 其他/ 资源量/ 不/ 统一/ ./ 根据/ 我们/ 前期/ 的/ 研究/ [/ 27/ ]/ ,/ 本文/ 用/ 定义/ 3/ 中/ 的/ CPU/ 资源量/ rc/ (/ t/ )/ 来/ 描述/ CPU/ 资源分配/ 和/ 消费/ 情况/ ,/ 并/ 将/ CPU/ 资源量/ 的/ 量纲/ 统一/ 到/ 了/ MB/ // s/ ,/ 和/ 网络资源/ 量/ 、/ 磁盘/ 资源量/ 度量/ 一致/ ./ ①/ CapacityScheduler/ ./ http/ :/ // // hadoop/ ./ apache/ ./ org/ // docs/ // r1/ ./ 0.4/ // Page5/ 定义/ 3/ ./ CPU/ 资源量/ (/ CPUResourceQuantity/ )/ ./ 任务/ 在/ t/ 时刻/ CPU/ 消费/ 资源量/ rc/ (/ t/ )/ 可以/ 由该/ 时刻/ CPU/ 执行/ 浮点运算/ 的/ 速率/ 表示/ ,/ 同理/ 分配/ 资源量/ rc/ (/ t/ )/ 和/ 资源/ 总量/ |/ rc/ |/ ./ 若用/ MB/ 度量/ 浮点运算/ 数量/ (/ 大小/ )/ ,/ CPU/ 资源量/ 单位/ 为/ MB/ // s/ ./ 设/ :/ 其中/ ,/ f/ (/ t/ )/ 为/ t/ 时刻/ 的/ CPU/ 频率/ ,/ 可以/ 等价/ 为/ 1/ 秒/ 内/ 时钟/ 周期/ 数目/ ,/ 单位/ Hz/ ;/ ω/ (/ t/ )/ 为/ t/ 时刻/ 的/ CPU/ 使用率/ ;/ C/ 为/ 硬件/ 相关/ 的/ 常量/ ,/ 是/ 若干/ CPU/ 参数/ 的/ 运算/ 结果/ (/ 见式/ (/ 2/ )/ )/ ,/ 其中/ Pc/ 为/ 一个/ 机器/ 周期/ 包括/ 的/ 时钟/ 周期/ 数/ ;/ Cc/ 为/ CPU/ 核心/ 数/ ;/ Cfn/ 为/ 每/ 机器/ 周期/ 浮点运算/ 次数/ ,/ Cmw/ 为/ 机器/ 字长/ ,/ 单位/ 比特/ ;/ Cfz/ 为/ 浮点运算/ 对象/ 与/ 机器/ 字长/ 的/ 倍数/ 关系/ ,/ K/ 为/ 数量级/ 调节/ 系数/ ./ CPU/ 资源量/ 的/ 定义/ 仅/ 考虑/ 了/ CPU/ 主要参数/ ,/ 虽然/ 没有/ 反映/ CPU/ 所有/ 参数/ 特性/ ,/ 如/ 缓存/ 大小/ 、/ 总线/ 速度/ 、/ 总线/ 宽度/ 等/ ,/ 但/ 这些/ 参数/ 的/ 对/ 资源量/ 定义/ 的/ 影响/ 较/ 小/ ./ 后文/ 需要/ 推导/ 的/ 最佳/ 资源/ 比/ 并非/ 是/ 一个/ 精确/ 的/ 比值/ ,/ 目前/ 的/ CPU/ 资源量/ 定义/ 可以/ 满足/ 最佳/ 资源/ 比/ 的/ 定义/ 和/ 后续/ 的/ 按/ 资源/ 比/ 的/ 资源分配/ 研究/ ./ 定义/ 4/ ./ 吞吐量/ (/ Throughput/ )/ ./ 吞吐量/ 是/ 对/ 某/ 任务/ 在/ 某/ 时刻/ 在/ 给定/ 资源量/ 的/ 条件/ 下/ 处理/ 数据/ 速度/ 的/ 一种/ 度量/ ./ 任务/ 在/ t/ 时刻/ 的/ 吞吐量/ V/ (/ t/ )/ 是/ 一个/ 由/ 多个/ 分量/ 组成/ 的/ 向量/ ,/ 吞吐量/ V/ (/ t/ )/ 在/ 第/ i/ 个/ 资源/ 上/ 的/ 分量/ 记为/ vi/ (/ t/ )/ ,/ 是/ t/ 时刻/ 分配/ 资源量/ ri/ (/ t/ )/ 下/ 进行/ 数据处理/ 时/ 达到/ 数据处理/ 速度/ ,/ 单位/ MB/ // s/ ./ 根据/ 资源量/ 的/ 定义/ 可知/ :/ 由于/ 均/ 采用/ MB/ // s/ 作为/ 单位/ ,/ t/ 时刻/ ,/ 磁盘/ 吞吐量/ 等于/ 磁盘/ 消费/ 资源量/ vd/ (/ t/ )/ =/ rd/ (/ t/ )/ ,/ 网络/ 吞吐量/ 等于/ 网络/ 消费/ 资源量/ vn/ (/ t/ )/ =/ rn/ (/ t/ )/ ./ 唯独/ vc/ (/ t/ )/ 和/ rc/ (/ t/ )/ 无法/ 对应/ ,/ 因为/ CPU/ 处理/ 数据/ 的/ 速度/ 和/ 算法/ 处理/ 数据/ 的/ 速度/ 不同/ ,/ 还/ 与/ 算法/ 复杂度/ 有关/ ,/ 一条/ 数据/ 可能/ 会/ 在/ 多个/ CPU/ 周期/ 反复/ 处理/ ./ 定义/ 5/ ./ CPU/ 吞吐量/ (/ CPUThroughput/ )/ ./ 任务/ 在/ t/ 时刻/ 的/ CPU/ 吞吐量/ vc/ (/ t/ )/ 是/ 吞吐量/ V/ (/ t/ )/ 的/ CPU/ 资源/ 分量/ ./ CPU/ 资源/ 具有/ 特殊性/ ,/ 单位/ 数据/ 会/ 被/ 多个/ 时钟/ 周期/ 处理/ ,/ 因此/ ,/ vc/ (/ t/ )/ 需要/ 从/ 算法/ 角度/ 进行/ 定义/ ,/ 设/ t/ 为/ 一个/ 足够/ 小/ 的/ 时间段/ ,/ χ/ (/ t/ )/ 为/ 一个/ 比例/ ,/ 表示/ 在/ t/ 时间/ 内/ 从/ CPU/ 处理/ 的/ 指令/ 级/ 数据量/ 和/ CPU/ 处理/ 的/ 算法/ 级/ 数据/ 之间/ 的/ 比例/ ./ 则/ χ/ (/ t/ )/ 与/ 算法/ 时间/ 复杂度/ O/ (/ n/ )/ 相关/ ./ 本/ 研究/ 采用/ 数据量/ 单位/ MB/ 来/ 衡量/ CPU/ 的/ 运算/ 能力/ ,/ CPU/ 的/ 运算/ 能力/ 是/ 常量/ ,/ 即/ 单位/ 时间/ 处理/ 的/ 指令/ 级/ 数据量/ 大小/ 为/ 一定/ 的/ ,/ 而/ 单位/ 时间/ 处理/ 的/ 算法/ 级/ 数据量/ 则/ 与/ 算法/ 的/ 复杂程度/ 相关/ ./ 本/ 研究/ 采用/ 一种/ 一般化/ 的/ 单/ 处理器/ 、/ 随机存取/ 计算/ 模型/ (/ RAM/ )/ 来/ 作为/ 研究/ 基础/ ./ 在/ RAM/ 模型/ 中/ ,/ 指令/ 一条/ 接/ 一条/ 地/ 执行/ ,/ 没有/ 并发/ 操作/ ./ RAM/ 模型/ 包含/ 了/ 真实/ 计算机/ 中/ 常见/ 的/ 指令/ ./ 设/ D/ (/ t/ )/ 为/ 任务/ 在/ t/ 时间/ 内/ 处理/ 的/ 算法/ 级/ 数据量/ ,/ 该值/ 可以/ 通过/ 实验/ 获得/ ;/ F/ (/ t/ )/ 为/ 任务/ t/ 时间/ 内/ 的/ 算法/ 复杂度/ ,/ 定义/ 为/ 处理/ 一条/ 数据/ 所/ 需/ 的/ CPU/ 指令/ (/ 脉冲/ )/ 个数/ ,/ 该值/ 可/ 通过/ 对/ 算法/ 进行/ 白盒/ 分析/ 获得/ ,/ 最/ 简单/ 的/ 方式/ 是/ 通过/ 实验/ ,/ 即/ 在/ CPU/ 使用率/ ω/ (/ t/ )/ =/ 1/ 时/ 将/ 处理/ 一条/ 数据/ 的/ 执行/ 时间/ 与/ CPU/ 频率/ f/ (/ t/ )/ 相乘/ ;/ N/ (/ t/ )/ 为/ 任务/ 在/ t/ 时间/ 内/ 处理/ 的/ 数据/ 条数/ ,/ 可/ 通过/ 实验/ 获得/ ;/ C/ 为/ 常量/ (/ 见式/ (/ 2/ )/ )/ ./ 则/ 由式/ (/ 4/ )/ 和/ 式/ (/ 5/ )/ 可/ 得/ 能效/ 是/ 单位/ 时间/ 内/ 系统/ 的/ 运算量/ 和/ 耗电量/ 的/ 比值/ ,/ 节点/ 能耗/ 是/ 节点/ 资源/ 消耗/ 的/ 能量/ ,/ 任务/ 能效/ 是/ 任务/ 自身/ 的/ “/ 运算量/ ”/ 比上/ 任务/ “/ 分配资源/ ”/ 的/ 耗电量/ ,/ 采用/ 分配/ 资源量/ 而/ 非/ 与/ 消费/ 资源量/ 是因为/ 一旦/ 资源分配/ 给/ 某/ 任务/ ,/ 即使/ 没有/ 被/ 消费/ ,/ 也/ 无法/ 被/ 别的/ 任务/ 使用/ ./ 任务/ 能效/ 的/ 瞬时值/ 中/ ,/ 运算量/ 可以/ 看做/ 任务/ 的/ 吞吐量/ V/ (/ t/ )/ ,/ 即/ 处理/ 数据/ 的/ 速度/ ;/ 耗电量/ 则/ 可以/ 看/ 作为/ 节点/ 功率/ P/ (/ t/ )/ 与/ 资源/ 占有率/ (/ %/ )/ 之间/ 的/ 乘积/ ./ 定义/ 6/ ./ 任务/ 能效/ (/ EnergyEfficiencyofTask/ )/ ./ 任务/ 在/ t/ 时刻/ 的/ 能效/ η/ (/ t/ )/ 为/ 任务/ 吞吐量/ V/ (/ t/ )/ 与其/ 占有/ 资源/ R/ (/ t/ )/ 消耗/ 的/ 能量/ E/ (/ t/ )/ 的/ 比值/ :/ 假设/ 设备/ 的/ 功率/ 稳定/ 为/ P/ :/ η/ (/ t/ )/ =/ V/ (/ t/ )/ 能效/ η/ (/ t/ )/ 的/ 单位/ 为/ MB/ // Joule/ ./ 其中/ λ/ 为/ 常量/ ,/ 若/ 考虑/ 具体/ 资源/ / i/ ∈/ [/ 1/ ,/ n/ ]/ ,/ 结合/ 式/ (/ 6/ )/ ./ η/ i/ (/ t/ )/ =/ λ/ Vi/ (/ t/ )/ Page6ri/ (/ t/ )/ // ri/ (/ t/ )/ 的/ 最大值/ 为/ 1/ ,/ 当/ ri/ (/ t/ )/ // ri/ (/ t/ )/ =/ 1/ 时/ ,/ η/ i/ (/ t/ )/ 达到/ 最大值/ ./ 由此可见/ ,/ 若/ 考虑/ 计算机/ 组件/ 的/ 功率/ 为/ 常量/ ,/ 则/ 对于/ 特定/ 任务/ ,/ 能效/ 仅/ 与/ 资源/ 使用率/ (/ 消费/ 资源/ 和/ 分配资源/ 的/ 比值/ )/ 有关/ ./ 某/ 任务/ 在/ 时刻/ t/ ,/ 若/ ri/ (/ t/ )/ =/ ri/ (/ t/ )/ ,/ 则/ 该/ 资源/ 的/ 利用率/ 为/ 100/ %/ ,/ 没有/ 资源/ 空闲/ ./ 若/ ri/ (/ t/ )/ </ ri/ (/ t/ )/ ,/ 则/ 资源/ ri/ 没有/ 得到/ 充分利用/ ,/ 资源量/ ri/ (/ t/ )/ -/ ri/ (/ t/ )/ 处于/ 空闲/ 状态/ ./ 定义/ 7/ ./ 空闲/ 资源量/ (/ IdleResourceQuantity/ )/ ./ 给定/ 一个/ 任务/ ,/ 设/ n/ 为/ 资源/ 种类/ 数/ ,/ Δ/ ri/ (/ t/ )/ 表示/ 任务/ 在/ t/ 时刻/ 空闲/ 的/ 第/ i/ 个/ 资源/ 的/ 资源量/ ./ 在/ t/ 时刻/ ,/ 任务/ 第/ i/ 个/ 资源/ 的/ 空闲/ 资源量/ Δ/ ri/ (/ t/ )/ 和/ 任务/ 的/ 总/ 空闲/ 资源量/ Δ/ R/ (/ t/ )/ 为/ Δ/ ri/ (/ t/ )/ =/ ri/ (/ t/ )/ -/ ri/ (/ t/ )/ ,/ Δ/ R/ (/ t/ )/ =/ ∑/ n/ / i/ ∈/ [/ 1/ ,/ n/ ]/ ,/ 任务/ 在/ T/ 时间段/ 内/ 的/ 第/ i/ 个/ 资源/ 的/ 空闲/ 资源量/ Δ/ ri/ 以及/ 总/ 空闲/ 资源量/ Δ/ R/ 为/ Δ/ ri/ =/ ∫/ T/ 对于/ 多个/ 资源/ ,/ 当某/ 一/ 资源/ 等待/ 其他/ 资源/ 的/ 运算/ 结果/ 时/ ,/ 该/ 资源/ 空闲/ ,/ 这种/ 空闲/ 并非/ 真正/ 意义/ 上/ 的/ 空闲/ ,/ 而是/ 一种/ 被动/ 空闲/ ./ 若/ 任务分配/ 的/ 资源/ 不合理/ ,/ 各个/ 资源/ 之间/ 会/ 产生/ 等待/ ,/ 如/ CPU/ 会因/ 等待/ I/ // O/ 操作/ 而/ 阻塞/ ,/ 产生/ 空闲/ 资源/ ./ 本/ 研究/ 针对/ 因/ 资源/ 间/ 等待/ 产生/ 的/ 空闲/ 资源/ ,/ 由/ 定义/ 6/ 可知/ ,/ 空闲/ 资源/ 会/ 降低/ 任务/ 的/ 能效/ ./ 由于/ 资源/ 是/ 被动/ 空闲/ ,/ 因此/ 对于/ 任意/ 时刻/ t/ ,/ / i/ ∈/ [/ 1/ ,/ n/ ]/ ,/ ri/ (/ t/ )/ =/ ri/ (/ t/ )/ ,/ Δ/ ri/ (/ t/ )/ =/ 0/ ./ 我们/ 认为/ ,/ 对于/ 某/ 任务/ ,/ 当其/ 分配/ 资源量/ 中/ 的/ 各类/ 资源/ 分量/ 达到/ 某一/ 适当/ 比例/ 时/ ,/ 可以/ 使得/ 不同/ 资源/ 间/ 没有/ 因/ 吞吐量/ 不同/ 而/ 造成/ 等待/ ,/ 进而/ 没有/ 因/ 资源/ 等待/ 造成/ 空闲/ 资源/ ,/ 从而/ 实现/ 任务/ 的/ 能效/ 优化/ ./ 实验/ 一/ 证明/ 在/ MapReduce/ 环境/ 中/ ,/ 某/ 任务/ 运行/ 时/ 存在/ 一个/ 恰当/ 资源/ 比/ ,/ 使得/ 不同/ 资源/ 间/ 不/ 存在/ 因/ 吞吐量/ 或/ 处理速度/ 不同/ 而/ 造成/ 等待/ ,/ 这个/ 资源/ 比/ 定义/ 为/ 任务/ 的/ 最佳/ 资源/ 比/ ./ 例如/ ,/ 仅/ 考虑/ CPU/ 和/ 网络/ 这/ 两种/ 资源/ ,/ 若/ 执行/ 某/ 任务/ 时/ CPU/ 处理/ 数据/ 的/ 速度/ 是/ 网络/ 接收/ 该/ 数据/ 速度/ 的/ 两倍/ ,/ 该/ 任务/ 最佳/ 资源/ 比/ 应为/ “/ 12/ ”/ (/ CPU/ 和/ 网络资源/ 的/ 比值/ )/ ./ 在/ 多任务/ 环境/ 中/ ,/ 我们/ 可以/ 通过/ 任务调度/ 和/ 资源分配/ 来/ 调整/ 资源/ 比以/ 达到最佳/ ,/ 如该/ 任务/ 分发/ 到/ 某/ 节点/ 且/ 该/ 节点/ 分配/ 该/ 任务/ CPU/ 资源/ 时/ ,/ 应该/ 同时/ 分配/ 两倍/ 的/ 网络资源/ ./ 若/ 某/ 节点/ 仅/ 剩余/ 较/ 多/ CPU/ 资源/ 和/ 极少/ 网络资源/ ,/ 则/ 该/ 任务/ 不/ 适于/ 分/ 发给/ 该/ 节点/ ./ 可以/ 认为/ ,/ 当/ 节点/ 运行/ 一个/ I/ // O/ 密集型/ 任务/ 时/ ,/ CPU/ 会/ 较为/ 空闲/ ,/ 这时/ 可以/ 调度/ 一个/ CPU/ 密集型/ 任务/ 给/ 该/ 节点/ ./ 本/ 研究/ 认为/ 动态/ 的/ 资源分配/ 和/ 任务调度/ 使/ 任务/ 的/ 分配/ 资源量/ 满足/ 最佳/ 资源/ 比/ ,/ 是/ 一种/ 有效/ 的/ 能效/ 优化/ 方法/ ./ 本文/ 仅/ 定义/ 和/ 推导/ 最佳/ 资源/ 比/ ./ 定义/ 8/ ./ 最佳/ 资源/ 比/ (/ BestResourceRatio/ )/ ./ 给定/ 一个/ 任务/ ,/ 其/ t/ 时刻/ 的/ 资源/ 比是/ 各/ 分配/ 资源量/ 之间/ 的/ 比值/ ./ 当有/ n/ 种/ 资源/ 时/ ,/ 资源/ 比/ 表示/ 形式/ 如下/ :/ 理想/ 情况/ 下/ ,/ 任务/ t/ 时刻/ 的/ 最佳/ 资源/ 比/ Ω/ (/ t/ )/ 是/ 指/ 按照/ 该/ 比值/ 分配资源/ 后/ ,/ / i/ ∈/ [/ 1/ ,/ n/ ]/ ,/ ri/ (/ t/ )/ =/ ri/ (/ t/ )/ ,/ Δ/ R/ (/ t/ )/ =/ 0/ ,/ η/ (/ t/ )/ 达到/ 最大值/ ./ 因此/ ,/ Ω/ (/ t/ )/ =/ r1/ (/ t/ )/ r2/ (/ t/ )/ …/ rn/ (/ t/ )/ ./ 特殊/ 的/ ,/ 当/ 某种/ 资源/ 可以/ 忽略/ 或/ 不/ 参与/ 运算/ 时/ ,/ 我们/ 定义/ 该/ 资源/ 的/ 最佳/ 资源/ 比/ 分量/ 为/ -/ 1/ ,/ -/ 1/ 表示/ 无穷小/ ./ 例如/ ,/ 假设/ 某/ 任务/ 仅仅/ 需要/ CPU/ 和/ 本地/ 磁盘/ ,/ 而/ 不/ 需要/ 网络/ 读写/ ,/ 其/ 最佳/ 资源/ 比/ 类似/ 于/ mn/ -/ 1/ (/ CPUDiskNetwork/ )/ ./ 4MapReduce/ 资源/ 比/ 模型/ 前/ 一节/ 定义/ 了/ 普适/ 任务模型/ 下/ 的/ 资源/ 模型/ 、/ 能效/ 模型/ 和/ 最佳/ 资源/ 比/ 模型/ ,/ 本节/ 将/ 分析/ MapReduce/ 的/ 执行/ 流程/ 和/ 资源/ 消费/ 特征/ ,/ 以/ 将/ 上述/ 模型/ 应用/ 到/ MapReduce/ 中/ ./ MapReduce/ 作业/ (/ MapReduceJob/ )/ 是/ 客户/ 需要/ 执行/ 的/ 一个/ 工作/ 单元/ ./ Hadoop/ 将/ MapReduce/ 作业/ 分成/ 若干/ 任务/ (/ Task/ )/ 来/ 执行/ ,/ 其中/ 包括/ 两类/ 任务/ :/ Map/ 任务/ 和/ Reduce/ 任务/ ,/ 简称/ Map/ // Reduce/ 任务/ ./ Map/ // Reduce/ 任务/ 是/ 调度/ 的/ 最小/ 单元/ ,/ 但/ 其/ 执行/ 过程/ 复杂/ ,/ 因此/ 将/ Map/ // Reduce/ 任务/ 作为/ 研究/ 其/ 资源分配/ 和/ 消费/ 特征/ 的/ 最小/ 单位/ ,/ 粒度/ 过大/ ./ 我们/ 将/ Map/ // Reduce/ 任务/ 进行/ 分解/ ./ 首先/ ,/ 从/ 资源/ 消费/ 的/ 角度/ 定义/ 操作/ (/ Operation/ )/ 的/ 概念/ ,/ Map/ // Reduce/ 任务/ 可以/ 分解/ 为/ 若干/ 反复/ 执行/ 的/ 操作/ ,/ 操作/ 有/ 固定/ 的/ 算法/ 特征/ 和/ 资源/ 消费/ 特征/ ./ 其次/ ,/ 从/ 资源分配/ 的/ 角度/ ,/ 若/ 以/ 操作/ 作为/ 资源分配/ 的/ 最小/ 单元/ ,/ 则/ 粒度/ 过/ 小/ ,/ 因此/ 定义/ 阶段/ 的/ 概念/ ,/ 一组/ 连续/ 的/ 且/ 资源/ 消费/ 特征/ 相似/ 的/ 操作/ 可以/ 看作/ 一个/ 阶段/ ./ 综上所述/ ,/ Map/ // Reduce/ 任务/ 的/ 执行/ 过程/ 是/ 阶段/ 的/ 集合/ ,/ 阶段/ 由/ 重复/ 出现/ 的/ 操作/ 组成/ ./ 例如/ ,/ A/ ,/ B/ ,/ C/ ,/ D/ 和/ E/ 是/ 5/ 个/ 操作/ ,/ 若/ 将/ 任务/ 则/ 视为/ 一个/ 序列/ “/ AB/ -/ AB/ -/ CDE/ -/ CDE/ -/ AD/ ”/ ,/ 其中/ 子/ 序列/ “/ AB/ ”/ 反复/ 出现/ 了/ 2/ 次/ ,/ “/ CDE/ ”/ 反复/ 出现/ 了/ 2/ 次/ ,/ “/ AD/ ”/ 只/ 出现/ 了/ 1/ 次/ ,/ 阶段/ 是/ 该/ 序列/ 的/ 一种/ 划分/ ,/ 上述/ 子/ 序列/ 均/ 为/ 一个/ 阶段/ ./ 基于/ 此/ ,/ 本/ 节/ 给出/ 如下/ 定义/ ./ 定义/ 9/ ./ 操作/ (/ Operation/ )/ ./ 任务/ 中/ 包含/ 的/ 重复/ 出现/ 的/ 算法/ 单元/ 称为/ 操作/ ,/ 任务/ 是/ 连续/ 操作/ 组成/ Page7/ 的/ 序列/ ./ 操作/ 具有/ 特定/ 的/ 资源/ 消费/ 特征/ ,/ 从/ 资源/ 消费/ 角度/ ,/ 设某/ 操作/ 的/ 执行/ 时间/ 为/ [/ t1/ ,/ t2/ ]/ ,/ / tx/ ,/ ty/ ∈/ [/ t1/ ,/ t2/ ]/ ,/ i/ ∈/ [/ 1/ ,/ n/ ]/ ,/ tx/ ≠/ ty/ ,/ 则/ ri/ (/ tx/ )/ =/ ri/ (/ ty/ )/ ./ 操作/ 是/ 消费/ 资源/ 的/ 原子/ 单元/ ./ 定义/ 10/ ./ 阶段/ (/ Phrase/ )/ ./ 任务/ 中/ 一组/ 连续/ 的/ 且/ 资源/ 消费/ 特征/ 相似/ 的/ 操作/ 可以/ 看作/ 一个/ 阶段/ ,/ 阶段/ 中/ 任意/ 两个/ 时刻/ 分配/ 资源量/ 相同/ ,/ 消费/ 资源量/ 相似/ ./ 设某/ 阶段/ 的/ 执行/ 时间/ 为/ [/ t1/ ,/ t2/ ]/ ,/ / tx/ ,/ ty/ ∈/ [/ t1/ ,/ t2/ ]/ ,/ i/ ∈/ 表/ 1/ 普适/ 定义/ 与/ MapReduce/ 定义/ 的/ 映射/ 关系/ 普适/ 表达/ 定义/ 序号/ 模型/ 名称/ 普适/ 对象/ 定义/ 2/ 消费/ 资源量/ 任务/ t/ 时刻/ R/ (/ t/ )/ =/ 〈/ r1/ (/ t/ )/ ,/ r2/ (/ t/ )/ ,/ …/ ,/ rn/ (/ t/ )/ 〉/ 阶段/ 的/ 第/ k/ 个/ 操作/ Rk/ =/ 〈/ rk/ 定义/ 2/ 分配/ 资源量/ 任务/ t/ 时刻/ R/ (/ t/ )/ =/ 〈/ r1/ (/ t/ )/ ,/ r2/ (/ t/ )/ ,/ …/ ,/ rn/ (/ t/ )/ 〉/ 阶段/ 定义/ 3CPU/ 资源量/ 频率/ 和/ 使用率/ f/ (/ t/ )/ ,/ f/ (/ t/ )/ ,/ ω/ (/ t/ )/ ,/ ω/ (/ t/ )/ 定义/ 4/ 吞吐量/ 任务/ t/ 时刻/ V/ (/ t/ )/ =/ 〈/ v1/ (/ t/ )/ ,/ v2/ (/ t/ )/ ,/ …/ ,/ vn/ (/ t/ )/ 〉/ 阶段/ 的/ 第/ k/ 个/ 操作/ Vk/ =/ 〈/ vk/ 定义/ 5CPU/ 吞吐量/ 任务/ t/ 时刻/ vc/ (/ t/ )/ =/ χ/ (/ t/ )/ ·/ rc/ (/ t/ )/ 定义/ 6/ 任务/ 能效/ 任务/ t/ 时刻/ η/ i/ (/ t/ )/ =/ λ/ ×/ χ/ (/ t/ )/ γ/ ×/ ri/ (/ t/ )/ ri/ (/ t/ )/ 定义/ 7/ 空闲/ 资源量/ 任务/ t/ 时刻/ Δ/ ri/ (/ t/ )/ (/ ri/ (/ t/ )/ -/ ri/ (/ t/ )/ )/ dt/ 由表/ 1/ 可知/ ,/ 阶段/ 资源量/ 是/ 对/ 某/ 阶段/ 分配/ 或/ 消费/ 的/ 计算资源/ 大小/ 的/ 一种/ 度量/ ./ 给定/ 一个/ 阶段/ ,/ 设/ n/ 为/ 可/ 分配/ 的/ 资源/ 种类/ 数/ ,/ s/ 为/ 该/ 阶段/ 包含/ 的/ 操作/ 数量/ ./ ri/ 表示/ 第/ i/ 个/ 资源/ 的/ 分配/ 资源量/ ,/ rk/ 操作/ 消费/ 第/ i/ 个/ 资源/ 的/ 资源量/ ./ 阶段/ 资源/ 比则/ 表示/ 阶段/ 各/ 分配/ 资源量/ 之间/ 的/ 比值/ ./ 对于/ 某/ 阶段/ ,/ 包含/ s/ 个/ 操作/ ,/ / k/ ∈/ [/ 1/ ,/ s/ ]/ ,/ / i/ ∈/ [/ 1/ ,/ n/ ]/ ,/ 若/ rk/ 作/ 资源/ 的/ 利用率/ 为/ 100/ %/ ,/ 没有/ 资源/ 空闲/ ,/ 若/ rk/ 则/ 资源/ ri/ 没有/ 得到/ 充分利用/ ,/ 产生/ 空闲/ 资源/ ./ 由于/ 资源/ 是/ 被动/ 空闲/ ,/ 因此/ / k/ ∈/ [/ 1/ ,/ s/ ]/ ,/ / i/ ∈/ [/ 1/ ,/ n/ ]/ ,/ rk/ 因此/ ,/ 我们/ 重新/ 定义/ Map/ // Reduce/ 任务/ 的/ 最佳/ 资源/ 比/ ./ 定义/ 11/ ./ Map/ // Reduce/ 任务/ 最佳/ 资源/ 比/ (/ BestResourceRatioofMap/ // ReduceTask/ )/ ./ 设/ Map/ // Reduce/ 任务/ 由/ 多个/ 阶段/ 构成/ ,/ 每/ 阶段/ 包含/ 多个/ 操作/ ./ 任务/ 的/ 最佳/ 资源/ 比是/ 由/ 其/ 包含/ 的/ 阶段/ 的/ 最佳/ 资源/ 比/ 组成/ 的/ 向量/ ./ 阶段/ 的/ 最佳/ 资源/ 比/ 由/ 其/ 包含/ 的/ 操作/ 的/ 最佳/ 资源/ 比/ 聚合/ 而/ 得/ ./ 操作/ 的/ 最佳/ 资源/ 比为/ 该/ 操作/ 消费/ 资源量/ 的/ 比值/ ./ 若/ 每个/ 任务/ 的/ 每个/ 阶段/ 分配/ 的/ 资源/ 满足/ 最佳/ 资源/ 比/ ,/ 则/ 整个/ 任务/ 也/ 满足/ 最佳/ 资源/ 比/ ./ 阶段/ 是/ 资源分配/ 单元/ ,/ 尚/ 无法/ 根据/ 操作/ 或/ 任务分配/ 资源/ ,/ 因此/ ,/ 需要/ 将/ 操作/ 的/ 最佳/ 资源/ 比/ 合并/ ./ 设/ [/ 1/ ,/ n/ ]/ ,/ tx/ ≠/ ty/ ,/ 则/ ri/ (/ tx/ )/ =/ ri/ (/ ty/ )/ ,/ ri/ (/ tx/ )/ ≈/ ri/ (/ ty/ )/ ./ 阶段/ 是/ 资源分配/ 的/ 原子/ 单元/ ./ 由此/ 定义/ 10/ 可知/ ,/ 阶段/ 是/ 资源分配/ 的/ 最小/ 单元/ ,/ 且/ 包含/ 多个/ 操作/ ,/ 操作/ 是/ 资源/ 消费/ 的/ 最小/ 单元/ ./ 我们/ 将/ 重新/ 定义/ 第/ 2/ 节中/ 出现/ 的/ 分配/ 资源量/ 、/ 消费/ 资源量/ 、/ 空闲/ 资源量/ 以及/ 吞吐量/ ,/ 使/ 其/ 与/ 时间/ 无关/ ./ 我们/ 用/ 阶段/ 取代/ 普适/ 模型/ 中/ 的/ 任务/ 概念/ ,/ 用/ 操作/ 取代/ 任务/ 的/ t/ 时刻/ ./ 具体/ 定义/ 见表/ 1/ ./ Map/ // Reduce/ 任务/ 包含/ m/ 个/ 阶段/ ,/ 第/ j/ 个/ 阶段/ (/ j/ ∈/ [/ 1/ ,/ m/ ]/ )/ 有/ sj/ 个/ 操作/ 组成/ ./ 后文仅/ 研究/ 3/ 种/ 资源/ 的/ 最佳/ 资源/ 比/ ,/ 即/ CPU/ 、/ 磁盘/ 和/ 网络/ ,/ 且/ 因为/ 每个/ 操作/ 都/ 有/ CPU/ 资源/ 的/ 参与/ ,/ CPU/ 是/ 必须/ 被/ 分配/ 的/ 资源/ ,/ 因此/ ,/ 本/ 研究/ 简化/ 最佳/ 资源/ 比为/ 1yz/ 的/ 形式/ ,/ 其中/ y/ 表示/ 磁盘/ 资源/ ,/ z/ 表示/ 网络资源/ ./ 设/ Ω/ 为/ 任务/ 的/ 资源/ 比/ ,/ Ω/ j/ 为/ 任务/ 第/ j/ 个/ 阶段/ 的/ 最佳/ 资源/ 比/ ,/ Ω/ k/ 阶段/ 的/ 第/ k/ 个/ 操作/ 的/ 最佳/ 资源/ 比/ ./ Ω/ =/ 〈/ Ω/ 1/ ,/ Ω/ 2/ ,/ …/ ,/ Ω/ m/ 〉/ Ω/ j/ =/ rcrdrn/ =/ 1yz/ =/ agg/ (/ Ω/ 1j/ =/ rkcrkdrkn/ =/ 1ykzk/ Ω/ k/ 聚合/ 函数/ agg/ (/ )/ 将/ 在/ 第/ 5/ 节/ 定义/ ,/ 由式/ (/ 14/ )/ 可知/ ,/ 求解/ 一个/ Map/ // Reduce/ 任务/ 的/ 最佳/ 资源/ 比/ 只/ 需要/ 确定/ 其/ 包含/ 的/ 每个/ 操作/ 的/ 最佳/ 资源/ 比/ ,/ 本文/ 第/ 5/ 节将/ 给出/ 操作/ 最佳/ 资源/ 比/ 推导/ 过程/ ,/ 所用/ 符号/ 均/ 针对/ 第/ k/ 个/ 操作/ ,/ 因此/ 为/ 简化/ 表述/ ,/ 省略/ 上标/ k/ ./ 5/ 最佳/ 资源/ 比/ 推导/ 本/ 节/ 研究/ 操作/ 最佳/ 资源/ 比/ 的/ 确定/ 方法/ ,/ 以及/ 式/ (/ 14/ )/ 中/ 的/ agg/ (/ )/ 函数/ 的/ 数学/ 表达/ ./ 由于/ 操作/ 是/ 消费/ 资源/ 的/ 最小/ 单元/ ,/ 我们/ 认为/ 对于/ 一个/ 操作/ ,/ 在/ 其/ 执行/ 时间/ 内/ 资源/ 的/ 消费/ 特征/ 是/ 一致/ 的/ ./ 操作/ 中/ ,/ CPU/ 、/ Page8/ 硬盘/ 和/ 网络/ 均/ 通过/ 内存/ 交换/ 数据/ ,/ 当/ 3/ 种/ 资源/ 通过/ 内存/ 交换/ 数据/ 的/ 速度/ (/ 吞吐量/ )/ 一致/ 时/ ,/ 没有/ 空闲/ 资源/ ./ 则/ 操作/ k/ 的/ 使用/ 资源量/ ri/ 之间/ 的/ 比值/ 就是/ 该/ 操作/ 的/ 最佳/ 资源/ 比/ ./ 从/ 资源/ 访问/ 角度/ ,/ 操作/ 是/ 两种/ 资源/ 通过/ 内存/ 交换/ 数据/ 的/ 过程/ ;/ 从/ 吞吐量/ 角度/ ,/ 操作/ 是/ 具有/ 稳定/ 资源/ 吞吐量/ 的/ 执行/ 时间/ 片段/ ,/ 每个/ 操作/ 内/ 不同/ 时刻/ 的/ 资源/ 吞吐量/ 相等/ ./ 总而言之/ ,/ 操作/ 是/ 资源/ 消费/ 特征/ 的/ 归纳/ ./ 我们/ 考虑/ 操作/ 的/ CPU/ 资源/ rc/ 、/ 磁盘/ 资源/ rd/ 和/ 网络资源/ rn/ 这/ 3/ 种/ 资源/ 消费/ 特征/ ,/ 将/ 其/ 划分/ 为/ 4/ 种/ 类型/ ./ 定义/ 12/ ./ 操作/ 类型/ (/ OperationType/ )/ ./ 操作/ 由/ 一种/ 资源/ 生产/ 数据/ (/ 数据/ 生产者/ )/ ,/ 一种/ 资源/ 消费/ 数据/ (/ 数据/ 消费者/ )/ 构成/ ,/ 两者之间/ 通过/ 内存/ 进行/ 数据/ 的/ 交换/ 和/ 缓冲/ ,/ 我们/ 称该/ 数据处理/ 过程/ 为/ “/ 生产者/ -/ 消费者/ ”/ 模式/ ./ 由于/ 内存/ 的/ 存在/ ,/ 数据/ 缓冲/ 允许/ 数据/ 生产/ 速度/ (/ 吞吐量/ )/ 与/ 数据/ 消费/ 速度/ (/ 吞吐量/ )/ 不/ 一致/ ./ 我们/ 将/ 内存/ 的/ 使用/ 情况/ 作为/ 划分/ 操作/ 的/ 依据/ ,/ 在/ 一个/ 操作/ 中/ ,/ 数据/ 生产者/ 生产/ 的/ 数据/ 流入/ 内存/ ,/ 数据/ 消费者/ 消费/ 的/ 数据/ 从/ 内存/ 流出/ ,/ 两种/ 资源/ 吞吐量/ 是/ 稳定/ 的/ ,/ 有/ 特征/ 的/ ./ 对于/ 任意/ 操作/ ,/ 存在/ 四种/ 可能/ 的/ “/ 数据/ 生产/ 和/ 消费/ ”/ 方式/ ,/ 我们/ 将/ 其/ 定义/ 为/ 操作/ 类型/ ,/ 分别/ 为/ cd/ ,/ cn/ ,/ dc/ 和/ nc/ (/ 见图/ 1/ )/ ./ “/ 生产者/ -/ 消费者/ ”/ 模式/ 满足/ 通用/ 计算/ 系统/ 的/ IPO/ 模型/ (/ Input/ -/ Processing/ -/ OutputModel/ )/ ①/ ,/ 是/ 一种/ 抽象/ 的/ 数据处理/ 模式/ ,/ 基于/ 该/ 模式/ 的/ 最佳/ 资源/ 比/ 推导/ 过程/ 具有/ 通用性/ ,/ 理由/ 如下/ :/ 首先/ ,/ “/ 生产者/ -/ 消费者/ ”/ 模式/ 在/ 调用/ 方式/ 、/ 内存/ 缓冲区/ 类型/ 、/ 角色/ 数目/ 和/ 并行性/ 等/ 方面/ 存在/ 多种/ 特征/ ./ 例如/ ,/ 内存/ 缓冲区/ 可以/ 具有/ 多种/ 数据结构/ ,/ 如/ 队列/ 、/ 栈/ 等/ ;/ 可以/ 同时/ 存在/ 多个/ 消费者/ 和/ 生产者/ ;/ 并且/ 内存/ 缓冲区/ 的/ 读写/ 规则/ 可以/ 是/ 同步/ 或/ 异步/ 的/ ./ 对/ 这些/ 特征/ 进行/ 组合/ ,/ 可以/ 构建/ 更加/ 复杂/ 的/ 模式/ ./ 由此可见/ ,/ 复杂/ 模式/ 均/ 可以/ 简化/ 为/ “/ 生产者/ -/ 消费者/ ”/ 模式/ [/ 28/ ]/ ./ 一些/ 经典/ 的/ 问题/ ,/ 如/ “/ 哲学家/ 就餐/ ”/ 和/ “/ 读者/ -/ 写者/ ”/ 问题/ ,/ 也/ 都/ 可以/ 归纳/ 、/ 分解/ 、/ 转换/ 或/ 简化/ 为/ “/ 生产者/ -/ 消费者/ ”/ 模式/ ./ 其次/ ,/ 最佳/ 资源/ 比/ 并非/ 需要/ 一个/ 精确/ 的/ 比例/ ,/ 近似值/ 即可/ 表征/ 任务/ 的/ 资源/ 使用/ 特性/ ,/ 因此/ 将/ 复杂/ 运算/ 模式/ 简化/ 为/ “/ 生产者/ -/ 消费者/ ”/ 模式/ 是/ 可行/ 的/ ./ 操作/ 类型/ 和/ 操作/ 是/ “/ 模式/ ”/ 和/ “/ 实例/ ”/ 之间/ 的/ 关系/ ./ 定义/ 操作/ 类型/ 是/ 为了/ 更加/ 方便/ 的/ 求解/ 操作/ 的/ 最佳/ 资源/ 比/ ./ 由/ 定义/ 9/ 可知/ ,/ 操作/ p/ 是/ MapReduce/ 编程/ 模型/ 中/ 最/ 细粒度/ 的/ 资源/ 消费/ 单元/ ,/ 是/ 两种/ 资源/ 通过/ 内存/ 交换/ 数据/ 的/ 过程/ ./ 本节/ 所用/ 符号/ 均/ 针对/ 第/ k/ 个/ 操作/ ,/ 因此/ 为/ 简化/ 表述/ ,/ 省略/ 上标/ k/ ./ 某/ 操作/ p/ 可以/ 用序/ 偶来/ 表示/ :/ r/ →/ 为/ 消费/ 资源量/ ,/ 该/ 资源/ 是/ 数据/ 生产者/ ,/ 且/ 生产/ 的/ 数据/ 按/ v/ →/ 流入/ 内存/ ;/ r/ ←/ 为/ 消费/ 资源量/ ,/ 该/ 资源/ 是/ 数据/ 消费者/ ,/ 且/ 消费/ 的/ 数据/ 按/ v/ ←/ 从/ 内存/ 流出/ ,/ 两个/ 资源/ 以/ 内存/ 为/ 中介/ 以/ 各自/ 稳定/ 的/ 吞吐量/ 处理/ 数据/ ./ 操作/ 内/ 资源/ 的/ 吞吐量/ 是/ 稳定/ 的/ ./ 定义/ 13/ ./ τ/ 函数/ (/ τ/ function/ )/ ./ 给定/ 某/ 阶段/ 的/ 第/ k/ 个/ 操作/ p/ =/ 〈/ r/ →/ ,/ r/ ←/ 〉/ ,/ τ/ 函数/ 返回/ 该/ 操作/ 的/ 执行/ 时间/ ./ 定义/ 14/ ./ 操作/ 内存/ (/ MemoryofPhrase/ )/ ./ 假设/ 每个/ 操作/ 都/ 分配/ 已知/ 大小/ 的/ 内存/ ,/ 操作/ 对/ 该/ 内存/ 独占/ 操作/ ,/ 各个/ 操作/ 内存/ 读写/ 不/ 互相/ 影响/ ./ 设/ 第/ k/ 个/ 操作/ 内存容量/ 为/ ε/ ,/ 且/ 已经/ 保存/ 任务/ 相关/ 的/ 数据量/ 为/ ε/ 0/ ,/ 对于/ 任意/ 操作/ ε/ 0/ / ε/ ./ 从/ 操作/ 类型/ 可以/ 看出/ ,/ 每种/ 类型/ 的/ 操作/ 都/ 存在/ CPU/ 资源/ ,/ 且/ 存在/ 网络资源/ 或/ 磁盘/ 资源/ ,/ 内存/ 必然/ 为/ 吞吐量/ 大/ 的/ 资源/ 充当/ 数据/ 缓冲/ (/ 读/ 缓冲/ 或/ 写/ 缓冲/ )/ ,/ 假定/ 第/ k/ 个/ 操作/ 处理/ 的/ 数据量/ 为/ M/ ,/ 单位/ 为/ MB/ ,/ 操作/ 执行/ 时间/ 为/ 未/ 缓冲/ 的/ 资源/ 处理/ M/ 的/ 用/ 时/ :/ M/ 可以/ 测量/ 得到/ ,/ 结合/ 吞吐量/ 和/ 消费/ 资源量/ 之间/ 的/ 关系/ ,/ τ/ 函数/ 为/ τ/ (/ r/ →/ ,/ r/ ←/ )/ =/ M/ χ/ γ/ ×/ r/ →/ α/ ×/ r/ ←/ β/ 求解/ 操作/ 的/ 最佳/ 资源/ 比/ 的/ 基本/ 思想/ 是/ 通过/ 数据/ 生产者/ 和/ 消费者/ 的/ 吞吐量/ 之间/ 的/ 关系/ ,/ 若/ 不/ 存在/ 内存/ 缓冲/ ,/ 则/ 数据/ 生产者/ 和/ 消费者/ 吞吐量/ 应该/ 相等/ ;/ 若/ 考虑/ 内存/ ,/ 可以/ 将/ 内存/ 看/ 作为/ 一/ 大小/ 固定/ ,/ 容量/ 有限/ 的/ 存储/ 区/ ,/ 在/ 内存/ 缓冲区/ 被/ 放满/ 时/ ,/ 生产/ 数据/ 的/ 资源/ ①/ IPOModel/ ./ http/ :/ // // en/ ./ wikipedia/ ./ org/ // wiki/ // IPO/ _/ ModelPage9/ (/ 数据/ 流入/ 内存/ )/ 被/ 阻塞/ ;/ 在/ 内存/ 缓冲区/ 为/ 空时/ ,/ 消费/ 数据/ 的/ 资源/ (/ 数据/ 从/ 内存/ 流出/ )/ 被/ 阻塞/ ./ 设/ 操作/ p/ =/ 〈/ r/ →/ ,/ r/ ←/ 〉/ ./ 数据/ 生产/ (/ 流入/ 内存/ )/ 和/ 消费/ (/ 流出/ 内存/ )/ 速度/ (/ 吞吐量/ )/ 分别/ 为/ 〈/ v/ →/ ,/ v/ ←/ 〉/ ,/ 执行/ 时间/ 为/ t/ ,/ 则/ 满足/ 式/ (/ 19/ )/ 时/ ,/ 资源/ 不会/ 被/ 阻塞/ ,/ 空闲/ 资源/ 为/ 零/ :/ 数据/ 可能/ 会/ 被/ 多次/ 消费/ ,/ 如图/ 1/ 中/ 操作/ dc/ 和/ nc/ ./ 因此/ 式/ (/ 19/ )/ 中/ 设置/ Θ/ 为/ 操作/ p/ 的/ 读取/ 系数/ ./ 若/ t/ ×/ (/ v/ →/ -/ Θ/ ×/ v/ ←/ )/ >/ ε/ ,/ 生产/ 数据/ (/ 流入/ 内存/ )/ 的/ 资源/ 将/ 被/ 阻塞/ ,/ 产生/ 空闲/ 资源/ ./ 同理/ ,/ 若/ t/ ×/ (/ v/ →/ -/ Θ/ ×/ v/ ←/ )/ </ -/ ε/ 0/ ,/ 消费/ 数据/ (/ 流入/ 内存/ )/ 的/ 资源/ 将/ 被/ 阻塞/ ,/ 产生/ 空闲/ 资源/ ./ 按/ τ/ 函数/ 的/ 定义/ 和/ 资源/ 吞吐量/ 和/ 消费/ 资源量/ 之间/ 的/ 关系/ 把/ 式/ (/ 18/ )/ 中/ 的/ 吞吐量/ 转换成/ 资源量/ ,/ 得出/ M/ ×/ (/ χ/ γ/ ×/ r/ →/ k/ -/ χ/ γ/ -/ 1/ ×/ Θ/ ×/ r/ ←/ )/ 可以/ 看出/ 最佳/ 资源/ 比是/ 多个/ 可能/ 、/ 且/ 与/ 内存大小/ 相关/ 的/ 值/ ./ 为/ 使/ 最佳/ 资源/ 比/ 成为/ 一个/ 确定/ 值/ ,/ 本/ 研究/ 令式/ (/ 20/ )/ 的/ 左项/ 等于/ ε/ +/ ε/ 02/ ./ 为/ 简化/ 推导/ ,/ 考虑/ 临界/ 情况/ ,/ 即当/ 内存/ 作为/ 数据/ 输出/ 端/ 缓冲区/ 时/ ,/ 其中/ 充满/ 等待/ 处理/ 的/ 数据/ ,/ 当/ 内存/ 作为/ 数据/ 输入/ 端/ 缓冲区/ 时/ ,/ 内存/ 为空/ ./ 则/ ε/ 0/ =/ ε/ ./ 得出/ M/ ×/ (/ χ/ γ/ ×/ rk/ -/ χ/ γ/ -/ 1/ ×/ Θ/ ×/ r/ ←/ )/ 式/ (/ 21/ )/ 是/ 一个/ 形如/ a/ (/ bx/ -/ cy/ )/ =/ d/ )/ 的/ 方程/ ,/ 其中/ a/ ,/ b/ ,/ c/ ,/ d/ 均/ 为/ 常量/ ,/ x/ 和/ y/ 为/ 变量/ ,/ 因此/ 可以/ 求得/ x/ 当/ α/ =/ 1/ ,/ β/ =/ 0/ 时/ :/ M/ ×/ (/ χ/ γ/ ×/ rk/ -/ χ/ γ/ -/ 1/ ×/ Θ/ ×/ r/ ←/ )/ / r/ →/ 当/ α/ =/ 0/ ,/ β/ =/ 1/ 时/ :/ 比/ ,/ 其中/ 参数均/ 可以/ 通过/ 实验/ 确定/ ./ 由式/ (/ 22/ )/ 和/ (/ 23/ )/ 可以/ 求/ 出/ 任务/ 每个/ 操作/ 的/ 资源/ 最后/ ,/ 将/ 阶段/ 的/ 每个/ 操作/ 资源/ 比/ 聚合/ 为/ 阶段/ 资源/ 比/ ./ 设/ 阶段/ 的/ 资源/ 比为/ 1yz/ ./ 其中/ y/ 表示/ 磁盘/ 资源/ ,/ z/ 表示/ 网络资源/ ./ 阶段/ 的/ 各个/ 操作/ 资源/ 比为/ 1y1z1/ ,/ 1y2z2/ ,/ …/ ,/ 1yszs/ ./ 由/ 阶段/ 的/ 4/ 种/ 类型/ 可知/ ,/ 每个/ 操作/ 仅/ 包含/ 两种/ 资源/ ,/ 且/ 必然/ 包含/ CPU/ 资源/ ,/ 因此/ ,/ 对于/ 任意/ 操作/ ,/ yk/ 和/ zk/ 必有/ 一项/ 为/ 零/ ./ 我们/ 采用/ 四分/ 位数/ 聚合/ 每个/ 阶段/ 的/ 所有/ 操作/ 的/ 最佳/ 资源/ 比/ ./ 若/ y/ =/ 0/ ,/ 则/ y/ 为/ 最小/ 的/ 非/ 零/ yk/ 的/ 值/ ,/ 同理/ z/ ./ 采用/ 上/ 四分/ 位数/ 聚合/ 而/ 非/ 均值/ 是/ 考虑/ yk/ 或/ zk/ 会/ 有/ 较/ 多/ 的/ 零值/ ,/ 且式/ (/ 21/ )/ 是/ 式/ (/ 20/ )/ 的/ 临界/ 条件/ ,/ 应该/ 尽量/ 给/ 吞吐量/ 小/ 的/ 一方/ 多/ 分配资源/ ,/ 在/ 大部分/ 情况/ 下/ 基于/ MapReduce/ 的/ 运算/ 是/ 一种/ 数据/ 密集型/ 运算/ ,/ I/ // O/ 相对/ 于/ CPU/ 均/ 是/ 稀缺资源/ ./ 6/ 实验/ 验证/ 本/ 节/ 通过/ 实验/ 验证/ 最佳/ 资源/ 比/ 模型/ 的/ 存在/ 性/ 和/ 合理性/ ,/ 并/ 通过/ 实验/ 列出/ Map/ // Reduce/ 任务/ 的/ 操作/ 和/ 各个/ 阶段/ 以及/ 任务/ 的/ 最佳/ 资源/ 比/ ,/ 本/ 研究/ 在/ 真实/ 的/ MapReduce/ 环境/ 下/ 进行/ ,/ 实验/ 环境/ 如表/ 2/ ./ 节点/ 操作系统/ MapReduce/ 版本/ Hadoop1/ ./ 0.2/ 编程/ 环境/ 功率/ 测量方法/ 依据/ 文献/ [/ 29/ ]/ f/ (/ t/ )/ ,/ ω/ (/ t/ )/ 采集/ 频率/ 1/ 秒/ 采集/ 1/ 次/ 数据/ (/ Δ/ t/ =/ 1s/ )/ 测量/ 单位/ 资源/ 限制/ 工具/ cpulimit/ 限制/ CPU/ 资源量/ ,/ cgroup/ 限制/ 磁盘/ MapReduce/ 用例/ Page106/ ./ 1/ 最佳/ 资源/ 比/ 存在/ 验证/ 本/ 节/ 通过/ 实验/ 数据/ 证明/ “/ 最佳/ 资源/ 比/ ”/ 的/ 存在/ ./ 在/ Map/ // Reduce/ 任务/ 执行/ 时/ ,/ 某/ 时刻/ 任务/ 将/ 消费/ CPU/ 资源量/ rc/ (/ t/ )/ 、/ 磁盘/ 资源量/ rd/ (/ t/ )/ 和/ 网络资源/ 量/ rn/ (/ t/ )/ ,/ 此/ 时刻/ 对应/ 的/ 能效/ 为/ η/ (/ t/ )/ ./ 那么/ ,/ 在/ 对于/ 不同/ 的/ 任务/ ,/ T/ 时间/ 内会/ 对应/ 若干个/ 〈/ rc/ (/ t/ )/ ,/ rd/ (/ t/ )/ ,/ rn/ (/ t/ )/ ,/ η/ (/ t/ )/ 〉/ ./ 我们/ 将/ t/ 时刻/ rc/ (/ t/ )/ 、/ rd/ (/ t/ )/ 和/ rn/ (/ t/ )/ 用/ 三维空间/ 的/ 点/ 表示/ ,/ 并用/ 数据/ 点/ 的/ 大小/ 反映/ 能效/ 的/ 大小/ ,/ 假如/ 最佳/ 资源/ 比/ 存在/ ,/ 在/ 空间/ 中/ 就/ 会/ 存在/ 一条/ 直线/ ,/ 使得/ 这/ 条/ 直线/ 上/ 的/ 能效/ 比/ 其他/ 能效/ 高/ ./ 我们/ 不同/ 负载/ 对/ MRBench/ 、/ WordCount/ 和/ Sort/ 的/ 能效/ 均/ 做/ 了/ 上述/ 空间/ 散点图/ ,/ 发现/ 能效/ 极值/ 点/ 出现/ 的/ 位置/ 具有/ 一定/ 的/ 规律性/ ,/ 较/ 高/ 的/ 能效/ 点/ 都/ 在/ 一个/ 带状/ 区域/ 中/ ,/ 对于/ 图/ 2CPU/ 资源量/ 、/ 磁盘/ 资源量/ 、/ 网络资源/ 量/ 和/ 能效/ 的/ 关系/ 如图/ 2/ 所示/ ,/ 在/ rc/ (/ t/ )/ ,/ rd/ (/ t/ )/ ,/ rn/ (/ t/ )/ 构成/ 的/ 三维空间/ 中/ 可以/ 发现/ ,/ 同一个/ 能效/ 分类/ 中/ 的/ 点/ 都/ 处于/ 一个/ 带状/ 区域/ ,/ 说明/ 能效/ 相同/ 的/ 点/ 都/ 在/ 一条/ 空间/ 直线/ 附近/ ,/ 而/ 在/ 一条/ 空间/ 直线/ 上/ 的/ 所有/ 点/ (/ x/ ,/ y/ ,/ z/ )/ ,/ 都/ 符合/ x/ -/ x0a/ ≈/ y/ -/ y0b/ ≈/ z/ -/ z0c/ ,/ 即/ 符合/ (/ x/ -/ x0/ )/ (/ y/ -/ y0/ )/ (/ z/ -/ z0/ )/ ≈/ abc/ (/ x0/ ,/ y0/ ,/ z0/ ,/ a/ ,/ b/ ,/ c/ 均/ 为/ 常/ 不同/ 类型/ 的/ 计算/ ,/ 带状/ 区域/ 出现/ 的/ 位置/ 也/ 不同/ ,/ 初步/ 证明/ 能效/ 与/ 资源/ 比/ 相关/ ./ 为了/ 找到/ 最佳/ 资源/ 比/ ,/ 我们/ 以/ WordCount/ 为例/ 进行/ 了/ 如下/ 步骤/ 的/ 实验/ :/ 令/ 每个/ 节点/ 只/ 同时/ 执行/ 一个/ 任务/ ,/ 并/ 通过/ 工具/ 限制/ 任务/ 使用/ 的/ 资源/ ,/ 使/ 任务/ 在/ 各种/ 分配/ 资源量/ 下/ 执行/ ./ 我们/ 记录/ 各/ 节点/ 上/ 任务/ 的/ 实时/ 能效/ (/ 见/ 定义/ 6/ )/ ,/ 首先/ 将/ n/ 个/ 实验/ 数据/ 点/ 按照/ 能效/ 值/ 所在/ 区间/ 等/ 分成/ k/ 类/ ,/ 每/ 一类/ 中/ 所有/ 的/ 数据/ 点/ 的/ 能效/ 值/ 都/ 在/ 同一个/ 区间/ ,/ 且/ 各个/ 区间/ 不/ 相交/ ;/ 其次/ 以/ rc/ (/ t/ )/ ,/ rd/ (/ t/ )/ ,/ rn/ (/ t/ )/ 为/ 坐标轴/ 做出/ 三维/ 散点图/ (/ 见图/ 2/ )/ ,/ 用/ 灰度/ 和/ 点/ 的/ 大小/ 反映/ 点/ 所属/ 的/ 类别/ ,/ 点越/ 大/ ,/ 能效/ 越大/ ,/ 最后/ 分别/ 取/ 能效/ 值/ 最大/ 的/ 两个/ 分类/ 中/ 的/ 点/ ,/ 用/ 最小/ 二/ 乘法/ 拟合/ 出/ 空间/ 直线/ ./ 数/ )/ ./ 由此/ 可以/ 推断/ ,/ 能效/ 相同/ 的/ 点/ 对应/ 的/ 资源/ 比/ 相同/ ./ 以/ 直线/ 为/ 参照/ ,/ 并/ 从/ 不同/ 视角/ 观察/ 可知/ ,/ 能效/ 值/ 最大/ 的/ 点/ 都/ 在/ 参照/ 直线/ 附近/ ,/ 可以/ 认为/ 该/ 直线/ 上/ 的/ 点/ 具有/ 相同/ 的/ 能效/ 最大值/ ,/ 因此/ 可推断/ 最佳/ 资源/ 比/ 的/ 存在/ ./ 在/ 三维空间/ 中/ ,/ 或许/ 存在/ 能效/ 更/ 高/ 的/ 点/ ,/ 但/ 这样/ 的/ 点/ 没有/ 被/ 采集/ 到/ ,/ 可以/ 认为/ ,/ 该/ 能效/ 点/ 代表/ 当/ Page11/ 前/ 测试用例/ 在/ 当前/ 集群/ 环境/ 下/ 不能/ 达到/ 的/ 能效/ 极大值/ ./ 我们/ 可以/ 通过/ 调整/ CPU/ 的/ 频率/ 、/ 改变/ 磁盘/ 速度/ 或者/ 改变/ 网络带宽/ 来/ 达到/ 能效/ 更/ 高/ 的/ 点/ ,/ 但/ 这样/ 做/ 也/ 改变/ 了/ 集群/ 环境/ 的/ 特性/ ./ 综上所述/ ,/ 我们/ 认为/ ,/ 在/ 给定/ 的/ 集群/ 环境/ 下/ ,/ 每/ 一种/ 任务/ 都/ 存在/ 一个/ 特定/ 的/ 资源/ 比/ ,/ 使得/ 在/ 该/ 资源/ 比下/ 能效/ 值/ 最大/ ./ 6.2/ 空闲/ 资源/ 耗能/ 验证/ 本/ 实验/ 从/ 另/ 一个/ 角度/ 验证/ 资源/ 比/ 的/ 存在/ 和/ 其/ 对/ 能耗/ 的/ 影响/ ,/ 实验/ 不/ 采用/ 能效/ 而/ 从/ 能耗/ 角度/ 考虑/ 空闲/ 资源量/ ./ 我们/ 计算/ 空闲/ 资源/ 的/ 耗能/ 情况/ ,/ 称为/ 空闲/ 能耗/ ,/ 空闲/ 能耗/ 的/ 计算/ 如式/ (/ 25/ )/ ,/ 其中/ Δ/ ri/ ./ 式/ (/ 25/ )/ 中/ ,/ T/ 为/ 任务/ 的/ 执行/ 时间/ ,/ pc/ 、/ pd/ 、/ pn/ 分别/ 为/ CPU/ 、/ 硬盘/ 、/ 网卡/ 的/ 空载/ 功率/ ,/ 在/ 该/ 实验/ 中/ pc/ =/ 37W/ ,/ pd/ =/ 13W/ ,/ pn/ =/ 4W/ ./ rc/ (/ t/ )/ ,/ rd/ (/ t/ )/ ,/ rn/ (/ t/ )/ 分别/ 为/ 时刻/ t/ 分配/ 的/ CPU/ 、/ 磁盘/ 、/ 网络资源/ 量/ ,/ 我们/ 采用/ 固定值/ 代替/ 瞬时值/ ./ 实验/ 环境/ 中用/ 的/ 网络带宽/ 为/ 1000Mbps/ ,/ 理论/ 最大/ 峰值/ 传输速率/ 为/ 1000MB/ // 8s/ =/ 125MB/ // s/ ,/ 实验/ 中测/ 得/ 的/ 实际/ 最大值/ 为/ 95MB/ // s/ ,/ 该值/ 即/ 为/ |/ rn/ |/ ./ 节点/ 硬盘/ 接口类型/ 为/ SerialATA1/ ./ 0a/ ,/ 数据/ 传输率/ 理论/ 可达/ 150MB/ // s/ ,/ 实验/ 中用/ hdparm/ 测得/ 磁盘/ 的/ 实际/ 最大/ 读写/ 速度/ 为/ 128MB/ // s/ ,/ 该值/ 即/ 为/ |/ rd/ |/ ./ CPU/ 的/ 最大/ 使用率/ 为/ 100/ %/ ,/ 最大/ 支持/ 频率/ 2.8/ GHz/ ,/ 由式/ (/ 2/ )/ 计算/ 可以/ 得到/ ,/ K/ =/ 10/ -/ 3/ ,/ f/ =/ 2.8/ ×/ 109Hz/ ,/ ω/ =/ 1/ ,/ P/ =/ 12/ ,/ Cc/ =/ 4/ ,/ Cfn/ =/ 4/ ,/ Cmw/ =/ 64bit/ ,/ Cfz/ =/ 2/ ,/ |/ rc/ |/ 近似计算/ 为/ 64MB/ // s/ ./ 实验/ 中将/ CPU/ 频率/ 固定/ 为/ 2.8/ GHz/ ,/ 则/ 可用/ CPU/ 使用率/ 的/ 分配/ 代替/ CPU/ 资源量/ 的/ 分配/ ./ 通过/ 给/ 任务分配/ 不同/ 的/ CPU/ 、/ 磁盘/ 、/ 网络资源/ 量/ ,/ 观察/ 任务/ 的/ 运行/ 时间/ ./ 本文/ 选取/ 如表/ 3/ 所示/ 的/ 11/ 种/ 资源分配/ 策略/ 进行/ 研究/ ./ 编号/ CPU/ 资源量/ // (/ MB/ // s/ )/ 10.25/ ×/ |/ rc/ |/ 20.05/ ×/ |/ rc/ |/ 30.1/ ×/ |/ rc/ |/ 40.2/ ×/ |/ rc/ |/ 50.4/ ×/ |/ rc/ |/ 60.8/ ×/ |/ rc/ |/ 70.4/ ×/ |/ rc/ |/ 80.2/ ×/ |/ rc/ |/ 90.1/ ×/ |/ rc/ |/ 100.05/ ×/ |/ rc/ |/ 110.25/ ×/ |/ rc/ |/ 本/ 实验/ 中/ 用到/ 的/ 测试用例/ 为/ 修改/ 后/ 的/ Word/ -/ Count/ ./ 为了/ 增大/ 任务/ 的/ CPU/ 使用率/ ,/ 在/ Map/ 函数/ 中/ ,/ 每/ 读取/ 完/ 一条/ 数据/ ,/ 做/ 一次/ 复杂度/ 为/ O/ (/ n3/ )/ 的/ 运算/ (/ 两个/ n/ 阶/ 矩阵/ 的/ 乘法/ )/ ./ 按照/ 式/ (/ 25/ )/ 计算/ 得到/ 的/ 实验/ 结果/ 如图/ 3/ 所示/ ./ 如图/ 3/ 所示/ ,/ 横轴/ 为/ 实验/ 编号/ ,/ 纵轴/ 为/ 集群/ 等待/ 能耗/ ,/ 曲线/ 为/ 趋势/ 线/ ./ 从图/ 3/ (/ a/ )/ 中/ 可以/ 看出/ ,/ 在/ 资源/ 比/ 相同/ 的/ 情况/ 下/ ,/ 空闲/ 能耗/ 并/ 不/ 随/ 资源量/ 的/ 增大/ 而/ 变化/ ,/ 空闲/ 能耗/ 和/ 资源量/ 之间/ 没有/ 明显/ 关系/ ,/ 而且/ 在/ 误差/ 范围/ 内/ ,/ 各组/ 实验/ 的/ 空闲/ 能耗/ 相同/ ./ 从图/ 3/ (/ b/ )/ 中/ 可以/ 看出/ ,/ 当/ 资源/ 比/ 发生变化/ 时/ ,/ 空闲/ 能耗/ 也/ 随之/ 变化/ ,/ 而且/ 并/ 不是/ 资源量/ 越/ 少/ ,/ 空闲/ 能耗/ 就/ 越/ 小/ ./ 该/ 任务/ 平均/ 消费/ CPU/ 资源量/ 在/ 0.1/ ×/ |/ rc/ |/ 左右/ ./ 当/ CPU/ 资源量/ 多于/ 0.1/ ×/ |/ rc/ |/ ,/ CPU/ 因/ 分配/ 多过/ 资源/ 而/ 空闲/ ,/ 当/ CPU/ 资源量/ 少于/ 0.1/ ×/ |/ rc/ |/ ,/ 磁盘/ 和/ 网络资源/ 因/ 等待/ CPU/ 而/ 空闲/ ./ 6.3/ MapReduce/ 阶段/ 划分/ 本/ 实验/ 对/ MapReduce/ 编程/ 模型/ 进行/ 了/ 操作/ 和/ 阶段/ 的/ 划分/ ,/ Map/ // Reduce/ 任务/ 的/ 执行/ 过程/ 如图/ 4/ 所示/ ./ 其中/ ,/ 虚线/ 箭头/ 表示/ 节点/ 内部/ 的/ 数据传输/ ,/ 实线/ 箭头/ 则/ 表示/ 节点/ 之间/ 的/ 数据传输/ ./ 由/ 前文/ 可知/ ,/ 通过/ 推导/ 操作/ 的/ 最佳/ 资源/ 比即/ 可知/ 阶段/ 的/ 最佳/ 资源/ 比/ ./ 通过/ 对/ Map/ // Reduce/ 任务/ 的/ 执行/ 流程/ 进行/ 分析/ ,/ 可以/ 得到/ 一系列/ 不同/ 算法/ ,/ 不同/ 类型/ 的/ 操作/ ,/ 每个/ 操作/ 在/ Map/ // Reduce/ 任务/ 执行/ 流程/ 中/ 出现/ 至少/ 一次/ ./ Map/ 任务/ 和/ Reduce/ 任务/ 各个/ 操作/ 的/ 描述/ 和/ 所属/ 类型/ 见表/ 4/ ./ Page12/ 图/ 4MapReduce/ 的/ 执行/ 过程/ 操作/ 名称/ 类型/ p1MapRemoteInputncMap/ 任务/ 由/ 网络/ 获取/ Mapp2Key/ // ValueDivisioncc/ 将/ 远程/ 输入/ 数据/ 分解/ 成键/ // p3MapLocalInputdcMap/ 函数/ 读取/ 本地/ 输入/ 数/ p4MapSpillp5MapMerge/ -/ readdcp6MapMerge/ -/ writecd/ 合并/ 之后/ 将/ 数据压缩/ 后写/ p7MapShuffle/ -/ readdc/ 将/ 生成/ 数据/ 读入/ CPUp8MapShuffle/ -/ writecn/ 将/ 生成/ 数据/ 分别/ 发送给/ 对/ p9MapDeletecd/ 删除/ 中间/ 结果/ p10ReduceShuffle/ -/ readncReduce/ 端/ 复制/ ,/ 将/ Map/ 任/ p11ReduceShuffle/ -/ writecdReduce/ 端/ 复制/ ,/ 将/ Map/ 任/ p12Reduce/ -/ readdc/ 从/ 磁盘/ 或/ 内存/ 读入/ 数据/ 并/ p13Reduce/ -/ writecdReduce/ 函数/ 处理/ 后/ 将/ 数据/ p14Backup/ -/ readdc/ 备份/ 时/ 将/ 数据/ 读入/ CPUp15Backup/ -/ writecn/ 备份/ 时/ 将/ 数据/ 写入/ 到/ 网络/ 操作/ p2/ 的/ 类型/ 为/ cc/ ,/ 即/ CPU/ 先/ 从/ 内存/ 中/ 读取数据/ 处理/ 后/ 再/ 放回/ 内存/ 中/ ,/ 数据/ 生产者/ 和/ 数据/ 消费者/ 都/ 为/ CPU/ 资源/ ./ 该种/ 操作/ 类型/ 只/ 消费/ 了/ CPU/ 一种/ 资源/ ,/ 因此/ cc/ 类型/ 阶段/ 的/ 最佳/ 资源/ 比/ 定义/ 为/ 1/ -/ 1/ -/ 1/ ./ 其余/ 操作/ 类型/ 的/ 最佳/ 资源/ 比/ 皆/ 可/ 通过/ 第/ 5/ 节中/ 提及/ 的/ 方法/ 计算/ 得到/ ./ 通过/ 对表/ 4/ 中/ 的/ 操作/ 进行/ 聚合/ ,/ 可以/ 得到/ Map/ 任务/ 和/ Reduce/ 任务/ 的/ 阶段/ 划分/ ,/ 每个/ 阶段/ 包含/ 的/ 操作/ 和/ 分配资源/ 如表/ 5/ 所示/ ./ 每个/ 任务/ 的/ 各种/ 资源/ (/ 包括/ CPU/ 、/ 网络/ 、/ 磁盘/ )/ 的/ 使用/ 特征/ 是/ 相同/ 且/ 可/ 分析/ 的/ ./ 多个/ 阶段/ 之间/ 或会/ 存在/ 少量/ 的/ 并行执行/ ,/ 但是/ 这种/ 并行性/ 较/ 小/ ,/ 不/ 影响/ 每个/ 阶段/ 的/ 最佳/ 资源/ 比/ 计算/ ./ 每个/ 阶段/ 在/ 整个/ Map/ // Reduce/ 任务/ 执行/ 过程/ 中/ 至多/ 出现/ 一次/ ./ 除表/ 5/ 所列/ 的/ 阶段/ 类型/ ,/ 通过/ 实验/ 分析/ 发现/ ,/ 在/ Map/ // Reduce/ 任务/ 的/ 执行/ 过程/ 中/ 还有/ 一些/ 空闲/ 阶段/ ./ 在/ 此/ 阶段/ 内/ Map/ // Reduce/ 任务/ 处于/ 阻塞状态/ ,/ 对/ 资源/ 没有/ 需求/ ,/ 空闲/ 阶段/ 的/ 持续时间/ 不定/ ./ 阶段/ AMapRemoteInputp1/ ,/ p2CPU/ ,/ 网络/ BMapLocalInputp3CMapSpillDMapMergep5/ ,/ p6CPU/ ,/ 磁盘/ EMapShufflep7/ ,/ p8CPU/ ,/ 磁盘/ ,/ 网络/ FMapDeletep9GReduceShufflep10/ ,/ p11CPU/ ,/ 磁盘/ ,/ 网络/ HReduceIReduceSavep14/ ,/ p15CPU/ ,/ 磁盘/ ,/ 网络/ 本/ 研究/ 对/ MRBench/ ,/ WordCount/ 和/ Sort/ 的/ A/ ~/ I/ 阶段/ 的/ 最佳/ 资源/ 比/ 进行/ 了/ 分析/ ,/ 由于/ MRBench/ 的/ 执行/ 时间/ 很/ 短/ ,/ WordCount/ 的/ Reduce/ 任务/ 执行/ 时间/ 较/ 短/ ,/ Sort/ 的/ Map/ 任务/ 执行/ 时间/ 较/ 短/ ,/ 不利于/ 采集/ 数据/ 和/ 计算/ 最佳/ 资源/ 比/ ./ 最终/ 本/ 研究/ 成功/ 计算/ 了/ WordCount/ 的/ Map/ 任务/ 的/ 最佳/ 资源/ 比/ ,/ 以及/ Sort/ 的/ Reduce/ 任务/ 最佳/ 资源/ 比/ ./ 阶段/ 的/ 最佳/ 资源/ 比仅/ 保留/ 1/ 位/ 小数位/ ,/ 且/ 用/ -/ 1/ 表示/ 一个/ 非常/ 小/ 的/ 数/ ,/ 本/ 实验/ 列出/ Sort/ 的/ Reduce/ 任务/ 各/ 阶段/ 的/ 资源/ 消费/ 特征/ 和/ 最佳/ 资源/ 比/ ,/ 见表/ 6/ ./ Page13/ 表/ 6/ 犛/ 狅/ 狉/ 狋/ 的/ Reduce/ 任务/ 各/ 阶段/ 最佳/ 资源/ 比/ 阶段/ 等待/ GH/ 首先/ ,/ 从/ 本地/ 磁盘/ 读取数据/ ,/ 然后/ I/ 将/ 输出/ 结果/ 写入/ 到/ 本地/ 作为/ 第一/ 7/ 结论/ 和/ 进一步/ 工作/ 现有/ MapReduce/ 集群/ 环境/ 中/ ,/ 不合理/ 的/ 资源分配/ 会/ 导致/ 资源/ 利用率/ 降低/ ,/ 从而/ 产生/ 空闲/ 资源/ 和/ 空闲/ 能耗/ ,/ 最终/ 导致/ 能效/ 低下/ ./ 本文/ 从/ 资源分配/ 角度/ 提高/ MapReduce/ 能效/ ,/ 提出/ 了/ “/ 最佳/ 资源/ 比/ ”/ 模型/ ,/ 即/ 对于/ 一个/ 任务/ ,/ 其/ 各种/ 资源/ 的/ 最佳/ 分配比例/ 并非/ 是/ 最大/ 分配率/ ,/ 而是/ 一个/ 适当/ 的/ 比例/ ,/ 多种/ 资源分配/ 比例/ 和/ 能效/ 之间/ 的/ 关系/ 会/ 是/ 一个/ 类/ U/ 型/ 曲面/ ,/ 分配率/ 最大/ 和/ 最小/ 都/ 未必/ 能/ 实现/ 能效/ 最优/ ,/ 当/ 分配资源/ 满足/ 最佳/ 资源/ 比时/ ,/ 资源/ 均/ 得到/ 充分利用/ 且/ 不/ 存在/ 空闲/ ,/ 从而/ 实现/ 了/ 能效/ 优化/ ./ 基于/ 此/ ,/ 本文/ 进行/ 了/ 如下/ 几/ 方面/ 的/ 研究/ :/ (/ 1/ )/ 提出/ 普适/ 的/ 资源/ 和/ 能效/ 模型/ ,/ 该/ 模型/ 适用/ 于/ 任何/ 运算/ 任务/ ,/ 由于/ 最佳/ 资源/ 比是/ 一个/ 比值/ ,/ 因此/ 本/ 研究/ 将/ 各种/ 资源量/ 统一/ 量纲/ 为/ MB/ // s/ ,/ 并/ 结合/ 吞吐量/ 的/ 定义/ ,/ 从/ 模型/ 层面/ 证明/ 最佳/ 资源/ 比/ 和/ 能效/ 之间/ 的/ 关系/ ,/ 量化/ 空闲/ 资源量/ 和/ 空闲/ 能耗/ ;/ (/ 2/ )/ 分析/ MapReduce/ 编程/ 模型/ ,/ 提出/ 资源/ 消费/ 的/ 最小/ 单元/ “/ 操作/ ”/ 和/ 资源分配/ 的/ 最小/ 单元/ “/ 阶段/ ”/ 这/ 两个/ 概念/ ;/ 将/ 普适/ 的/ 资源/ 比/ 模型/ 变换/ 到/ MapReduce/ 下/ ./ 通过/ 数据/ 的/ “/ 生产者/ -/ 消费者/ ”/ 模式/ ,/ 求解/ Map/ // Reduce/ 任务/ 的/ 最佳/ 资源/ 比/ ;/ (/ 3/ )/ 实验/ 分析/ 典型/ Map/ // Reduce/ 任务/ ,/ 从/ 任务/ 能效/ 和/ 空闲/ 能耗/ 两个/ 角度/ 证明/ 了/ 最佳/ 资源/ 比/ 的/ 存在/ ,/ 以及/ 按/ 资源/ 比/ 的/ 资源分配/ 对/ 任务/ 能效/ 和/ 空闲/ 能耗/ 的/ 影响/ ;/ (/ 4/ )/ 根据/ 实验/ 结果/ ,/ 对/ MapReduce/ 执行/ 过程/ 进行/ 划分/ ,/ 定义/ 各个/ 操作/ 和/ 阶段/ ,/ 并/ 给出/ 了/ 部分/ Map/ // Reduce/ 任务/ 的/ 最佳/ 资源/ 比/ ,/ 验证/ “/ 任务/ -/ 阶段/ -/ 操作/ ”/ 模型/ 的/ 正确性/ ./ 同时/ ,/ 实验/ 还/ 发现/ 了/ Map/ // Reduce/ 任务/ 执行/ 过程/ 中/ 等待/ 阶段/ 的/ 存在/ ./ 本文/ 仅/ 提出/ 了/ 最佳/ 资源/ 比/ 模型/ ,/ 并/ 论证/ 了/ 最佳/ 资源/ 比/ 对/ 能效/ 的/ 影响/ ,/ 但/ 尚未/ 基于/ 最佳/ 资源/ 比为/ Map/ // Reduce/ 任务/ 进行/ 资源分配/ ,/ 也/ 未/ 对/ Map/ // Reduce/ 任务调度/ 机制/ 做出/ 改进/ ,/ 因此/ 下/ 一步/ 工作/ 将/ 提出/ 一种/ 基于/ 最佳/ 资源/ 比/ 的/ 资源分配/ 和/ 任务调度/ 算法/ 以/ 提高/ Map/ // Reduce/ 集群/ 能效/ ./ 此外/ ,/ 为了/ 使/ 本文/ 中/ 的/ 理论/ 能够/ 得到/ 实际/ 应用/ ,/ 我们/ 还/ 需要/ 简化/ 最佳/ 资源/ 比/ 的/ 计算/ 过程/ ,/ 如/ 采用/ 计算/ 复杂度/ 来/ 替换/ 公式/ 中/ 大量/ 参数/ ./ 

