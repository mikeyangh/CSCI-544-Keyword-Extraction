Page1/ 反编译/ 中/ 用户/ 函数/ 与/ 库函数/ 同名/ 的/ 区分/ 技术/ 研究/ 吴伟峰/ 赵荣彩/ (/ 信息工程/ 大学/ 信息/ 工程学院/ 郑州/ 450002/ )/ 摘要/ ITC/ 反编译/ 系统/ 应用/ 了/ 基于/ 动态/ 链接/ 信息/ 的/ 库函数/ 快速/ 识别/ 技术/ ,/ 对于/ 绝大部分/ 待/ 翻译/ IA/ -/ 64/ 二进制/ 可执行程序/ 中/ 的/ 库函数/ 它/ 都/ 能/ 正确/ 识别/ ,/ 但是/ 当/ 二进制/ 可执行程序/ 包含/ 有/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 时/ ,/ 就/ 可能/ 会/ 出现/ 问题/ ./ 作者/ 在/ 深入分析/ 基于/ 动态/ 链接/ 信息/ 的/ 库函数/ 快速/ 识别/ 技术/ 所/ 导致/ 的/ 问题/ 原因/ 的/ 基础/ 上/ ,/ 充分/ 研究/ 了/ ELF64/ 格式/ 二进制/ 文件/ 的/ 具体/ 组织/ 及/ 编译/ 链接/ 策略/ ,/ 针对/ 反编译/ 及/ 二进制/ 翻译/ 在/ 此/ 方面/ 的/ 问题/ ,/ 给出/ 了/ 准确/ 区分/ 用户/ 函数/ 和/ 库函数/ 的/ 区分/ 算法/ ./ 关键词/ 反编译/ ;/ IA/ -/ 64/ ;/ ELF64/ ;/ 动态/ 链接/ ;/ 用户/ 函数/ ,/ 库函数/ ,/ 同名/ 1/ 引言/ 库函数/ 恢复/ 在/ 逆向/ 工程/ 中/ 具有/ 极为重要/ 的/ 作用/ ,/ 因为/ 它/ 给/ 反编译/ 工作/ 带来/ 了/ 如下/ 好处/ :/ 屏蔽/ 了/ 依赖于/ 某一/ 体系结构/ 机器/ 低级/ 特性/ 的/ 影响/ 、/ 降低/ 了/ 后续/ 处理过程/ 的/ 复杂性/ 、/ 增强/ 了/ 中间/ 表示/ 及后/ 端/ 代码/ 的/ 可读性/ 和/ 正确性/ ,/ 同时/ 也/ 提高/ 了/ 反编译/ 生成/ 代码/ 移植/ 时/ 的/ 运行/ 效能/ ./ 库函数/ 的/ 识别/ 是/ 相关/ 研究/ 中/ 最/ 热门/ 的/ 问题/ 之一/ ,/ 也/ 是/ 极具/ 应用/ 价值/ 的/ 一项/ 研究/ 内容/ ./ 库函数/ 的/ 识别/ 与/ 编译器/ 及其/ 版本/ 都/ 有/ 关系/ ,/ 因此/ 研究/ 通用/ 的/ 识别器/ 极其/ 困难/ ./ 从/ 几篇/ 已/ 发表/ 且/ 具有/ 代表性/ 的/ 文章/ 看出/ ,/ 目前/ 进行/ 的/ 识别/ 和/ 恢复/ 研究/ 都/ 是/ 针对/ 特定/ 编译器/ 版本/ 的/ 系统/ 库函数/ 的/ ./ 早期/ ,/ 库/ Page2/ 函数/ 识别方法/ [/ 1/ -/ 2/ ]/ 多为/ 针对/ 某种/ 编译器/ 的/ 特定/ 版本/ 和/ 特定/ 模式/ 手工/ 构造/ 库函数/ 识别/ 模板/ 库/ ,/ 这种/ 方法/ 耗时/ 太长且/ 效率/ 低下/ ./ 后来/ ,/ 又/ 有/ 学者/ 提出/ 了/ 自动/ 生成/ 模板/ 库/ 的/ 方法/ 和/ 技术/ ,/ 但/ 构造/ 模板/ 库/ 的/ 工作量/ 仍然/ 很大/ [/ 3/ -/ 5/ ]/ ./ 鉴于/ 上述/ 库函数/ 识别/ 技术/ 存在/ 的/ 缺陷/ ,/ 参考文献/ [/ 6/ ]/ 立足于/ 链接/ 程序/ 链接/ 过程/ 的/ 逆/ 阐述/ 了/ 识别/ 库函数/ 的/ 恢复/ 思想/ ,/ 针对/ IA/ -/ 64/ 上/ 的/ ELF64/ 格式/ 二进制/ 文件/ 提出/ 了/ 基于/ 动态/ 链接/ 信息/ 的/ 库函数/ 快速/ 识别/ 技术/ ,/ 显著/ 降低/ 了/ 库函数/ 识别/ 所/ 需/ 的/ 工作量/ 和/ 时耗/ ./ 针对/ 绝大部分/ 待/ 翻译/ 的/ IA/ -/ 64/ 二进制/ 可执行程序/ 应用/ 上述/ 的/ 库函数/ 快速/ 识别/ 技术/ 都/ 能/ 得到/ 令人满意/ 的/ 正确/ 结果/ ,/ 但是/ 当/ 二进制/ 可执行程序/ 包含/ 有/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 时/ ,/ 就/ 可能/ 会/ 出现/ 问题/ ./ 如果/ 用户/ 编写/ 的/ 同名/ 函数/ 与/ 相应/ 的/ 库函数/ 等价/ ,/ 把/ 其/ 识别/ 成/ 库函数/ 没有/ 问题/ ;/ 但/ 如果/ 两者/ 实现/ 的/ 功能/ 不等价/ ,/ 如/ 仍/ 把/ 其/ 识别/ 成/ 库函数/ 就/ 会/ 导致/ 无法/ 预测/ 的/ 后果/ ,/ 因此/ ,/ 有些/ 软件/ 将/ 此/ 作为/ 一种/ 反/ 反编译/ 的/ 混淆/ 策略/ ./ 迄今为止/ 在/ 反编译/ 和/ 二进制/ 翻译/ 领域/ 都/ 没有/ 对/ 用户/ 函数/ 与/ 库函数/ 同名/ 的/ 区分/ 问题/ 进行/ 过/ 相关/ 的/ 研究/ ./ 针对/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 给/ 库函数/ 识别/ 带来/ 的/ 问题/ ,/ 本文/ 以/ 反编译/ 系统/ ITC/ 为/ 平台/ 基于/ ELF64/ 格式/ 二进制/ 文件/ 给出/ 了/ 准确/ 判定/ 库函数/ 和/ 用户/ 函数/ 的/ 区分/ 算法/ ./ 2/ 系统/ 平台/ ITCITC/ 的/ 设计/ 目标/ 是/ 实现/ 一个/ 静态/ 二进制/ 翻译/ 系统/ ITA/ ,/ 完成/ 从/ IntelIA/ -/ 64/ // Linux/ 平台/ 上/ 可/ 执行/ 的/ 二进制/ 代码/ 到/ Alpha/ // Linux/ 平台/ 上/ 可/ 执行/ 二进制/ 代码/ 的/ 自动/ 翻译/ 工作/ ./ ITA/ 是/ 静态/ 二进制/ 翻译器/ ,/ 主要/ 由/ 两/ 部分/ 组成/ :/ 反编译器/ 和/ 目标/ 机/ C/ 编译器/ ,/ 如图/ 1/ 所示/ ./ 其中/ ,/ 反编译器/ 由/ 四/ 部分/ 组成/ :/ 指令/ 解码器/ 、/ 语义/ 映射器/ 、/ 通用/ 分析器/ 、/ C/ 代码生成/ 器/ ./ 指令/ 解码器/ 的/ 功能/ 是/ 依据/ 用户/ 的/ 命令/ ,/ 装载/ 需要/ 翻译/ 的/ 可执行程序/ 的/ 二进制/ 映象/ ,/ 提取/ 程序/ 的/ 各段/ 信息/ ,/ 找到/ 程序/ 的/ 主/ 入口/ 点/ ,/ 完成/ 二进制/ 指令流/ 到/ IA/ -/ 64/ 汇编/ 表示/ 的/ 转换/ ;/ 语义/ 映射器/ 是/ 利用/ 语义/ 描述语言/ 对/ IA/ -/ 64/ 指令/ 语义/ 进行/ 描述/ ,/ 建立/ 指令/ 与其/ 对应/ 描述/ 之间/ 的/ 映射/ 关系/ ,/ 把/ 汇编/ 指令/ 转换成/ 与/ 机器/ 特性/ 相关/ 的/ 低级/ 中间/ 表示/ RTL/ (/ RegisterTransferList/ )/ ;/ 通用/ 分析器/ 的/ 核心技术/ 是/ 过程/ 恢复/ ,/ 主要/ 功能/ 是/ 通过/ 对/ 过程/ 的/ 抽象/ 以及/ 数据流/ 分析/ 和/ 控制流/ 分析/ ,/ 对/ 控制流/ 以及/ 与/ 过程/ 相关/ 的/ 内容/ 进行/ 恢复/ ,/ 生成/ 与/ 机器/ 无关/ 的/ 高级/ 中间/ 表示/ HRTL/ (/ Higher/ -/ levelRegisterTransferLan/ -/ guage/ )/ ;/ C/ 代码生成/ 器/ 完成/ 将/ HRTL/ 转换成/ 低级/ C/ 代码/ ,/ 同时/ 使用/ 数据/ 数组/ 向量/ 和/ 数据/ 段/ 链接/ 映射/ 相结合/ 的/ 方式/ 实现/ 数据/ 段/ 的/ 映射/ 寻址/ ./ 最后/ 应用/ 基于/ gcc2/ ./ 95.3/ 的/ 目标/ 机/ 交叉/ 编译器/ 将/ 生成/ 的/ C/ 代码/ 编译成/ 可/ 在/ Alpha/ 上/ 执行/ 的/ 二进制/ 代码/ ,/ 从而/ 达到/ 二进制/ 代码/ 翻译/ 的/ 目的/ ./ 反编译器/ 是/ ITA/ 系统/ 的/ 核心/ 组成部分/ ,/ 为了/ 方便/ 起/ 见/ ,/ 在/ 随后/ 的/ 阐述/ 中将/ 把/ ITA/ 系统/ 的/ 反编译器/ 称为/ ITC/ 反编译/ 系统/ ./ 参考文献/ [/ 6/ ]/ 介绍/ 的/ 库函数/ 快速/ 识别/ 技术/ 在/ ITC/ 反编译/ 系统/ 中/ 得到/ 了/ 应用/ ./ 3/ 函数/ 同名/ 问题/ 3.1/ 函数/ 同名/ 问题/ 描述/ 如果/ 用户/ 函数/ 与/ 系统/ 库函数/ 同名/ ,/ 则/ 会/ 出现/ 两种/ 情况/ :/ 两者/ 功能/ 等价/ 或者/ 两者/ 的/ 输出/ 结果/ 不同/ ./ 对于/ 反编译/ 而言/ ,/ 第/ 1/ 种/ 情况/ 因为/ 功能/ 等价/ ,/ 所以/ 把/ 同名/ 的/ 用户/ 函数/ 当成/ 相应/ 的/ 库函数/ 处理/ 完全/ 可以/ ;/ 但/ 对于/ 第/ 2/ 种/ 情况/ ,/ 如果/ 仍/ 把/ 其/ 当成/ 相应/ 的/ 库函数/ 进行/ 处理/ 就/ 改变/ 了/ 程序/ 的/ 原本/ 语义/ ,/ 这样/ 可能/ 导致/ 对/ 整个/ 程序/ 的/ 移植/ 失败/ ,/ 因/ 对此/ 函数调用/ 的/ 返回/ 结果/ 跟/ 预期/ 结果/ 不/ 一致/ ./ 下面/ 使用/ 两个/ 具体/ 的/ 例子/ 加以/ 说明/ ./ 例/ 1/ ./ 用户/ 函数/ floor/ 与/ 数学/ 库函数/ floor/ 功能/ 等价/ .#/ include/ "/ math/ ./ h/ "/ doublefloor/ (/ doublet/ )/ {/ Page3/ }/ intmain/ (/ )/ {/ }/ 此/ 程序/ 的/ 输入输出/ 结果/ 对/ 如下/ ,/ 格式/ 为/ 〈/ 输入/ 数据/ 、/ 输出/ 数据/ 〉/ :/ 对此/ 程序/ 的/ 可执行程序/ 进行/ 反编译/ 后仅/ 得到/ 一个/ main/ ./ c/ 源程序/ 文件/ ,/ 因/ 把/ 用户/ 函数/ floor/ 处理/ 成/ 了/ 数学/ 库函数/ floor/ ,/ 但/ 得到/ 的/ 结果/ 仍然/ 为例/ 2/ ./ 用户/ 函数/ floor/ 与/ 数学/ 库函数/ floor/ 的/ 功能/ 不等价/ .#/ include/ "/ math/ ./ h/ "/ doublefloor/ (/ doublet/ )/ {/ }/ intmain/ (/ )/ {/ }/ 此/ 程序/ 的/ 输入输出/ 结果/ 对/ 格式/ 为/ 〈/ 输入/ 数据/ 、/ 输出/ 数据/ 〉/ :/ 对此/ 程序/ 的/ 可执行程序/ 进行/ 反编译/ 后/ 也/ 仅/ 得到/ 一个/ main/ ./ c/ 源程序/ 文件/ ,/ 同样/ 把/ 用户/ 函数/ floor/ 处理/ 成/ 了/ 数学/ 库函数/ floor/ ,/ 但/ 得到/ 的/ 结果/ 却/ 和/ 源程序/ 的/ 输出/ 结果/ 大不一样/ :/ 3.2/ 函数/ 同名/ 问题/ 分析/ 按/ 上节/ 描述/ ,/ 参考文献/ [/ 6/ ]/ 介绍/ 的/ 库函数/ 快速/ 识别/ 技术/ 无法/ 把/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 同/ 相应/ 的/ 库函数/ 区分/ 开来/ ,/ 且/ 无法/ 保证/ 待/ 反编译/ 的/ 二进制/ 可执行程序/ 包含/ 的/ 同名/ 用户/ 函数/ 同/ 库函数/ 功能/ 等价/ ,/ 如例/ 2/ 所示/ ,/ 所以/ 才/ 会/ 导致/ 这样/ 的/ 问题/ ./ 表面/ 上/ 看来/ ,/ 原因/ 在于/ 反编译/ 系统/ ITC/ 无法/ 将/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 识别/ 出来/ ;/ 但/ 从/ 更深/ 的/ 层面/ 看/ ,/ 真正/ 的/ 原因/ 是/ 现用/ 的/ 库函数/ 识别/ 技术/ 存在/ 严重/ 的/ 缺陷/ ./ 所以/ ,/ 为了/ 解决/ 用户/ 函数/ 与/ 库函数/ 同名/ 的/ 问题/ ,/ 有/ 必要/ 更/ 深入/ 地/ 研究/ 参考文献/ [/ 6/ ]/ 所/ 描述/ 的/ 库函数/ 快速/ 识别/ 技术/ 及/ ELF64/ 格式/ 二进制/ 文件/ 的/ 具体/ 组织/ 策略/ ./ 4/ 库函数/ 识别/ 流程/ 解析/ 参考文献/ [/ 6/ ]/ 讨论/ 的/ 是/ IA/ -/ 64/ 体系结构/ 下/ ELF64/ 格式/ 二进制/ 可执行文件/ 通过/ 动态/ 链接/ 机制/ 进行/ 函数调用/ 的/ 库函数/ 识别方法/ ./ 由于/ IA/ -/ 64/ 二进制/ 代码/ 的/ 动态/ 链接/ 符号表/ (/ dynamicsymboltable/ )/ 中/ 与/ 库函数/ 名/ 对应/ 的/ 地址/ 项为/ 0/ ,/ 因此/ 无法/ 通过/ 二进制/ 代码/ 中/ 函数调用/ 处/ 的/ 调用/ 地址/ 来/ 判定/ 所/ 调用/ 的/ 库函数/ ./ 为了/ 解决/ 上述/ 问题/ ,/ 研究/ 了/ IA/ -/ 64/ 体系结构/ 关于/ 动态/ 链接/ 实现/ 的/ 约定/ ,/ 结合/ 实例/ 分析/ 了/ 惰性/ 绑定/ 机制/ 的/ 实现/ 过程/ ,/ 进而/ 研究/ 了/ ELF64/ 中/ ./ plt/ 段/ 的/ 布局/ 规律/ ,/ 同时/ 分析/ 了/ ./ plt/ 、/ ./ got/ 、/ ./ IA/ _/ 64/ ./ pltoff/ 、/ ./ rela/ ./ IA/ _/ 64/ ./ pltoff/ 和/ ./ dynstr/ 等/ 段/ 之间/ 的/ 相互/ 联系/ ,/ 提出/ 了/ 由/ ./ plt/ 段/ 中/ 的/ importstub/ 地址/ 反向/ 推出/ 对应/ 的/ 函数/ 名/ 的/ 步骤/ 和/ 方法/ ,/ 并/ 给出/ 了/ ITC/ 反编译/ 系统/ 中/ 所/ 使用/ 的/ 库函数/ 名/ 的/ 识别/ 算法/ ,/ 该/ 算法/ 可/ 在/ 二进制/ 文件/ 解码/ 阶段/ 建立/ 库函数/ 的/ importstub/ 地址/ 与/ 函数/ 名/ 之间/ 的/ 一一/ 映射/ 关系/ ,/ 构建/ 名字/ -/ 值/ 对/ 并/ 将/ 其/ 加入/ 到/ 反编译/ 系统/ 符号表/ 中/ ,/ 以/ 达到/ 通过/ 调用/ 指令/ 中/ 的/ importstub/ 地址/ 就/ 能够/ 找到/ 函数/ 名/ 的/ 目的/ ./ 下面/ 通过/ 一个/ 例子/ 加以/ 说明/ ./ 例/ 3/ ./ 包含/ 库函数/ sin/ 和/ 用户/ 函数/ cos/ 的/ 示例/ 程序/ cos/ _/ sin/ -/ e/ ./ c/ .#/ include/ 〈/ math/ ./ h/ 〉/ floatcos/ (/ floati/ )/ ;/ intmain/ (/ )/ Page4/ {/ floatb/ ;/ b/ =/ sin/ (/ 0.5/ )/ ;/ b/ =/ cos/ (/ 0.6/ )/ ;/ printf/ (/ "/ cos0/ ./ 6is/ %/ f/ \/ n/ "/ ,/ b/ )/ ;/ return0/ ;/ }/ floatcos/ (/ floati/ )/ {/ i/ =/ i/ / i/ ;/ returni/ ;/ }/ 本节/ 对/ 程序/ cos/ _/ sin/ -/ e/ ./ c/ 的/ 各种/ 操作/ ,/ 都/ 是/ 对/ 其/ 0000000000000000DF/ / UND/ / 0000000000000280GLIBC/ _/ 2.2/ __/ libc/ _/ start/ _/ main/ 另外/ ,/ 该/ 程序/ 对应/ 的/ ./ plt/ 段/ 内容/ 组织/ 如下/ :/ 基于/ 以上/ 3/ 组/ 数据/ 进行/ 分析/ 可/ 得/ ,/ 库函数/ sin/ 和/ printf/ 的/ 调用/ 地址/ 分别/ 为/ 0x4000000000000560/ 和/ 0x4000000000000540/ ,/ 两者/ 都/ 处于/ ./ plt/ 段/ 的/ 地址/ 范围/ 之内/ ,/ 在/ 动态/ 链接/ 符号表/ 中/ 两者/ 对应/ 的/ 地址/ 都/ 为/ 零/ ,/ 正好/ 符合/ 引入/ 的/ 库函数/ 识别/ 技术/ 的/ 识别/ 范围/ ,/ 于是/ 构建/ 名字/ -/ 值/ 对/ 〈/ sin/ ,/ 0x4000000000000560/ 〉/ 、/ 〈/ printf/ ,/ 0x4000000000000540/ 〉/ 并/ 把/ 其/ 加入/ 到/ 反编译/ 系统/ 符号表/ 中/ ;/ 但/ 对于/ 用户/ 函数/ cos/ ,/ 由于/ 其/ 在/ 动态/ 链接/ 符号表/ 中/ 对应/ 的/ 地址/ 是/ 0x40000000000008f0/ ,/ 此/ 地址/ 不为/ 零且/ 函数/ cos/ 的/ 调用/ 地址/ 同样/ 为/ 0x40000000000008f0/ ,/ 所以/ 反编译/ 系统/ 就/ 直接/ 将/ 构建/ 的/ 名字/ -/ 值/ 对/ 〈/ cos/ ,/ 0x40000000000008f0/ 〉/ 加入/ 到/ 系统/ 符号表/ 中/ ./ 在/ 随后/ 解码/ 过程/ 中/ ,/ 解码/ main/ 函数/ 时会/ 先后/ 遇到/ 和/ 函数/ sin/ 、/ cos/ 、/ printf/ 相应/ 的/ 函数调用/ ,/ 于是/ 先/ 把/ 这些/ 函数调用/ 地址/ 依次/ 存入/ 函数调用/ 链中/ ,/ 在/ main/ 函数/ 解码/ 完成/ 后/ 根据/ 函数调用/ 链/ 再/ 对/ 相应/ 的/ 被/ 调/ 函数/ 的/ 函数/ 体/ 进行/ 解码/ ./ 解码/ 之前/ 要/ 先/ 判断/ 该/ 函数/ 是否/ 已/ 被/ 解码/ 过/ ,/ 如果/ 已/ 解码/ 过/ 就/ 不再/ 对/ 其/ 进行/ 解码/ ;/ 在/ IA/ -/ 64/ 机上/ 使用/ gcc/ 编译器/ 生成/ 的/ 二进制/ 可/ 执行/ 码而/ 进行/ 的/ ./ 在/ 此/ 程序/ 的/ objdump/ 代码/ 中/ ,/ 函数/ sin/ 、/ cos/ 和/ printf/ 与/ 相应/ 的/ 函数调用/ 语句/ 对比/ 关系/ 如下/ :/ …/ br/ ./ call/ ./ sptk/ ./ manyb0/ =/ 4000000000000560/ 〈/ sin/ 〉/ ;/ ;/ …/ br/ ./ call/ ./ sptk/ ./ manyb0/ =/ 40000000000008f0/ 〈/ cos/ 〉/ ;/ ;/ …/ br/ ./ call/ ./ sptk/ ./ manyb0/ =/ 4000000000000540/ 〈/ printf/ 〉/ ;/ ;/ …/ 此/ 程序/ 对应/ 的/ 动态/ 链接/ 符号表/ 如下/ :/ 另外/ ,/ 还要/ 判断/ 该/ 函数/ 是不是/ 库函数/ ,/ 即/ 需不需要/ 对此/ 函数/ 的/ 函数/ 体/ 进行/ 解码/ ,/ 如果/ 是/ 库函数/ 就/ 不再/ 对/ 其/ 进行/ 解码/ ./ 此时/ 的/ 反编译/ 系统/ ITC/ 对/ 库函数/ 的/ 判定/ 依据/ 是/ :/ 根据/ 函数调用/ 地址/ 到/ 系统/ 符号表/ 中/ 查找/ 匹配/ 的/ 名字/ -/ 值/ 对/ ,/ 从而/ 得到/ 被/ 调用函数/ 的/ 函数/ 名/ ,/ 然后/ 再/ 根据/ 函数/ 名/ 判断/ 此/ 函数/ 是不是/ 库函数/ ./ 对于/ 例/ 3/ 而言/ ,/ 函数调用/ 地址/ 0x4000000000000560/ 、/ 0x40000000000008f0/ 和/ 0x4000000000000540/ 对应/ 的/ 函数/ 名字/ -/ 值/ 对/ 分别/ 为/ 〈/ sin/ ,/ 0x4000000000000560/ 〉/ 、/ 〈/ cos/ ,/ 0x40000000000008f0/ 〉/ 和/ 〈/ printf/ ,/ 0x4000000000000540/ 〉/ ,/ 因此/ 可知/ main/ 函数调用/ 的/ 3/ 个/ 函数/ 是/ sin/ 、/ cos/ 和/ printf/ ,/ 从而/ 根据/ 函数/ 名/ 判定/ 这/ 3/ 个/ 函数/ 都/ 是/ 库函数/ ,/ 进而/ 不再/ 对/ 其/ 函数/ 体/ 进行/ 解码/ ./ 这样/ 库函数/ sin/ 和/ printf/ 得到/ 了/ 正确/ 的/ 识别/ ,/ 而/ 用户/ 函数/ cos/ 却/ 被/ 错误/ 地/ 识别/ 成/ 了/ 系统/ 库函数/ ./ 把/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 识别/ 成/ 库函数/ 的/ 主要/ 原因/ 是/ :/ 对/ 库函数/ 的/ 判定/ 仅/ 是/ 依据/ 函数/ 名/ 进行/ 的/ ,/ 而/ 编译器/ 在/ 处理/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 时/ 又/ 把/ 其/ 放入/ 了/ 动态/ 链接/ 符号表/ 中/ ./ 5ELF64/ 格式/ 二进制/ 文件/ IA/ -/ 64/ 在/ Linux/ 操作系统/ 下/ 的/ 可执行文件/ 为/ ELF64/ 格式/ ,/ ELF/ 是/ UNIX/ 系统/ 实验室/ (/ USL/ )/ 作为/ 应用程序/ 二进制/ 接口/ (/ applicationbinaryinterface/ )/ 开/ Page5/ 发和/ 发布/ 的/ 可/ 执行/ 连接/ 格式/ [/ 7/ -/ 8/ ]/ ./ ELF/ 文件/ 可以/ 从/ 两个/ 视角/ 来/ 看待/ 文件/ 的/ 内容/ ,/ 一种/ 是从/ 文件/ 链接/ 的/ 角度/ ,/ 文件/ 由/ text/ 、/ data/ 、/ rodata/ 、/ bss/ 等/ 一个个/ 的/ section/ 组成/ ,/ 另/ 一种/ 是从/ 程序执行/ 的/ 角度/ ,/ 由/ segment/ 组成/ ,/ 如图/ 2/ 所示/ ./ ELFheader/ 在/ 文件/ 开始/ 处/ ,/ 描述/ 了/ 整个/ 文件/ 的/ 组织/ ./ 另外/ ,/ ELF/ 文件/ 还有/ 两个/ 可选/ 的/ 头表/ :/ 程序/ 头表/ (/ Programheadertable/ )/ 或段/ 头表/ (/ SectionheaderElf64/ _/ Offe/ _/ phoff/ ;/ // / Programheaderoffset/ / // Elf64/ _/ Worde/ _/ flags/ ;/ // / Processor/ -/ specificflags/ / // Elf64/ _/ Halfe/ _/ phentsize/ ;/ // / Sizeofprogramheaderentry/ / // Elf64/ _/ Halfe/ _/ phnum/ ;/ // / Numberofprogramheaderentries/ / // Elf64/ _/ Halfe/ _/ shentsize/ ;/ // / Sizeofsectionheaderentry/ / // Elf64/ _/ Halfe/ _/ shnum/ ;/ // / Numberofsectionheaderentries/ / // Elf64/ _/ Halfe/ _/ shstrndx/ ;/ // / Sectionnamestringtableindex/ / // 5.2/ ELF64/ 文件/ 中/ 的/ 表段/ 表是/ 反编译器/ 经常/ 使用/ 的/ 表/ 之一/ ./ 当段/ 被/ 装入/ 到/ 内存/ 执行/ 时/ ,/ 反编译器/ 由/ ELF/ 程序/ 头/ 找到/ 段头/ 图/ 3ELF64/ 程序/ 头/ Elf64/ _/ Addrsh/ _/ addr/ ;/ // / Virtualaddressinmemory/ / // Elf64/ _/ Wordsh/ _/ info/ ;/ // / Miscellaneousinformation/ / // Elf64/ _/ Xwordsh/ _/ addralign/ ;/ // / Addressalignmentboundary/ / // Elf64/ _/ Xwordsh/ _/ entsize/ ;/ // / Sizeofentries/ ,/ ifsectionhastable/ / // 图/ 4ELF64/ 段头表/ 结构/ table/ )/ ./ 通常/ ,/ 链接/ 文件/ 具有/ 段表/ ,/ 可执行文件/ 有/ 程序/ 头表/ ,/ 共享/ 目标/ 文件/ 两者/ 都/ 有/ ./ Section/ 提供/ 了/ 目标/ 文件/ 的/ 各项/ 信息/ (/ 如/ 指令/ 、/ 数据/ 、/ 符号表/ 、/ 重/ 定位/ 信息/ 等/ )/ ,/ Programheadertable/ 指出/ 怎样/ 创建/ 进程/ 映像/ ,/ Sectionheadertable/ 包含/ 每/ 一个/ section/ 的/ 入口/ ,/ 并/ 给出/ 对应/ 的/ 名字/ 、/ 大小/ 等/ 信息/ ./ 5.1/ ELF64/ 文件/ 的/ header/ 文件/ 头/ 在/ 文件/ 的/ 开始/ 部分/ ,/ 用于/ 定位/ 文件/ 的/ 其它/ 部分/ ./ 如图/ 3/ 所示/ ,/ 前/ 两个/ 字节/ 为/ ELF/ 文件/ 的/ 标识符/ ,/ 反编译器/ 应用/ 该/ 标识符/ 来/ 确定/ 该/ 文件/ 是否是/ ELF64/ 文件/ ,/ 获得/ 数据结构/ 大小/ 尾端/ 的/ 信息/ 以及/ 操作系统/ 的/ 相关/ 信息/ 等/ ./ 文件/ 头/ 还/ 含有/ 其它/ 表/ 的/ 偏移/ ,/ 例如/ 程序/ 头表/ 、/ 段头表/ 等/ ./ 文件/ 头/ 还/ 包含/ 这些/ 表中项/ 的/ 个数/ ./ 应用/ 这些/ 偏移/ ,/ 反编译器/ 可以/ 很/ 容易/ 获得/ 访问信息/ 所在/ 表/ 的/ 位置/ ./ 表项/ 的/ 个数/ 可以/ 帮助/ 反编译器/ 确定/ 访问/ 表内/ 信息/ 时/ 是否/ 越界/ ./ 文件/ 头/ 还/ 可以/ 得到/ 程序执行/ 的/ 第一条/ 指令/ 的/ 位置/ ,/ 即/ 入口/ 点/ 的/ 信息/ 可以/ 确定/ ./ 表/ ,/ 再/ 从/ 段/ 头表中/ 找出/ 只读/ 数据/ 段/ 、/ 初始化/ 数据/ 段/ 、/ 未/ 初始化/ 数据/ 段/ 的/ 起始/ 虚/ 地址/ 和/ 大小/ ./ 段头表/ 结构/ 如图/ 4/ 所示/ ./ Page6/ 字符串/ 表中/ 包含/ 有段/ 名/ 和/ 符号/ 名/ 字符串/ ,/ 它/ 是/ 一个/ 字节/ 数组/ ,/ 存储/ 包含/ 以/ null/ 为/ 终止/ 的/ 字符串/ ./ 段头/ 表项/ 和/ 符号表/ 项/ 通过/ 相对/ 于/ 串表/ 开始/ 的/ 索引/ 来/ 引用/ 字符串/ 表中/ 的/ 字符串/ ./ 字符串/ 表中/ 的/ 第一个/ 字节/ 定义/ 为/ null/ ,/ 所以/ 索引/ 0/ 总是/ 指向/ null/ 或/ 不/ 存在/ 的/ 名字/ ./ 符号表/ 存放/ 有/ 动态/ 链接/ 例程/ 的/ 名字/ 及其/ 它/ 一些/ 相关/ 的/ 信息/ ./ 它/ 通常/ 是/ 以/ 数组/ 的/ 形式/ 组织/ 和/ 存储/ 的/ ,/ 其中/ 第一项/ 即/ 下标/ 为/ 0/ 的/ 数组/ 项是/ 未定义/ 使用/ 的/ ,/ 存储/ 内容/ 如图/ 5/ 所示/ ./ 符号表/ 表项/ 的/ 存储/ 结构/ 如图/ 6/ 所示/ ,/ 结构/ 体/ Elf64/ _/ Sym/ 的/ 数据/ 成员/ 指代/ 的/ 具体/ 意义/ 如下/ 所示/ :/ st/ _/ name/ :/ 此/ 数据/ 成员/ 存储/ 的/ 是/ 字符串/ 表/ 数组/ 下标/ ,/ 通过/ 这一下/ 标/ 获得/ 相应/ 的/ 符号/ 名/ ./ 如果/ 它/ 的/ 值/ 不/ 为/ 零/ ,/ 可以/ 通过/ 这一下/ 标值/ 在/ 字符串/ 表中/ 获得/ 此/ 表项/ 对应/ 的/ 例程/ 名字/ ;/ 否则/ ,/ 此/ 例程/ 名字/ 为空/ ./ st/ _/ info/ :/ 此/ 数据/ 成员/ 描述/ 的/ 是/ 符号/ 类型/ 和/ 其/ 具有/ 的/ 绑定/ 属性/ ./ 它/ 占用/ 8bits/ 存储空间/ ,/ 低/ 4/ 位/ 用于/ 表示/ 相应/ 的/ 符号/ 类型/ ,/ 高/ 4/ 位/ 用于/ 表示/ 绑定/ 属性/ ,/ 具体/ 含义/ 见图/ 7/ ./ NameValueSTB/ _/ LOCAL0NotvisibleoutsidetheobjectfileSTB/ _/ GLOBAL1Globalsymbol/ ,/ visibletoallobjectfilesSTB/ _/ WEAK2Globalscope/ ,/ butwithlowerprecedenceSTB/ _/ LOOS10Environment/ -/ specificuseSTB/ _/ HIOS12STB/ _/ LOPROC13Processor/ -/ specificuseSTB/ _/ HIPROC15st/ _/ other/ :/ 保留/ 数据/ 成员/ ,/ 以备/ 将来/ 使用/ ./ 数值/ 必须/ 为/ 0/ ./ st/ _/ shndx/ :/ 此/ 数据/ 成员/ 存储/ 的/ 是/ 段/ (/ section/ )/ 索引/ ,/ 表明/ 符号/ 是/ 在/ 哪个/ 段/ 中/ 定义/ 的/ ./ 对于/ 那些/ 未定义/ 的/ 符号/ ,/ 此/ 数据/ 成员/ 的/ 值/ 为/ SHN/ _/ UNDEF/ ;/ 对于/ 绝对/ 符号/ 它/ 的/ 值/ 为/ SHN/ _/ ABS/ ;/ 而/ 对于/ 公共/ 符号/ 它/ 的/ 值/ 则/ 是/ SHN/ _/ COMMON/ ./ st/ _/ value/ :/ 此/ 数据/ 成员/ 存储/ 的/ 是/ 和/ 例程/ 相关/ 的/ 值/ ./ 数据/ 值/ 可能/ 是/ 一个/ 绝对/ 的/ 值/ ,/ 或者/ 是/ 一个/ 地址/ ,/ 这要/ 视/ 具体内容/ 而定/ ./ st/ _/ size/ :/ 许多/ 的/ 符号/ 都/ 有/ 与其/ 相关/ 的/ 存储空间/ 大小/ ./ 例如/ ,/ 一个/ 数据/ 目标/ 的/ 空间/ 大小/ 是/ 它/ 所/ 包含/ 的/ 字节数/ ./ 假如/ 符号/ 的/ 大小/ 为/ 0/ 或者/ 其/ 大小/ 未知/ 的/ 时候/ ,/ 此/ 数据/ 成员/ 的/ 值/ 为/ 0.5/ ./ 3ELF64/ 文件/ 中/ 的/ 代码/ 组织/ 本/ 小节/ 考虑/ 的/ 主要/ 是/ 与/ 源程序/ 运行/ 密切相关/ 的/ 如上所述/ ,/ 在/ 编译/ 生成/ ELF64/ 文件/ 的/ 过程/ 中/ 链接/ 器要/ 处理/ 两种/ 不同/ 类型/ 的/ 输入/ 文件/ :/ 用户/ 文件/ 和/ 库/ 文件/ ./ 对于/ 两种/ 文件/ 我们/ 在/ 此仅/ 考虑/ 对/ ./ text/ 段/ 中/ 可/ 执行/ 代码/ 的/ 处理/ ./ 谈及/ 对库/ 文件/ 的/ 处理/ ,/ 就/ 涉及/ 到/ 链接/ 时对库/ 函数调用/ 的/ 两种/ 处理/ 策略/ :/ 静态/ 链接/ 和/ 动态/ 链接/ ./ 静态/ 链接/ ,/ 是/ 把/ 涉及/ 到/ 的/ 库/ 中/ 的/ 程序/ 和/ 数据/ 在/ 链接/ 时/ 就/ 绑定/ 到/ 可执行程序/ 中/ ;/ 而/ 动态/ 链接/ 使得/ 大部分/ 的/ 链接/ 过程/ 延迟/ ,/ 直到/ 程序/ 开始运行/ 时/ 或/ 已经/ 开始运行/ 时才/ 进行/ 链接/ ./ 虽然/ 动态/ 链接/ 有/ 许多/ 静态/ 链接/ 不/ 具有/ 的/ 优势/ ,/ 但/ 它/ 比/ 静态/ 链接/ 要慢/ 很多/ ,/ 因为/ 大部分/ 的/ 链接/ 过程/ 在/ 每次/ 程序运行/ 时/ 都/ 必须/ 重做/ ,/ 程序/ 中/ 所有/ 的/ 动态/ 链接/ 符号/ 都/ 得/ 通过/ 5.2/ 节/ 给出/ 的/ 符号表/ (/ symboltalbles/ )/ 来/ 查找/ 和/ 解析/ ;/ 同时/ 动态/ 链接/ 的/ 程序/ 通常/ 使用/ 额外/ 的/ “/ 胶合/ (/ glue/ )/ ”/ 代码/ 来/ 调用/ 共享/ 库/ 代码/ 在/ ELF64/ 文件/ 中/ 的/ 组织/ 情况/ [/ 7/ -/ 9/ ]/ ./ ELF64/ 文件/ 通常/ 包含/ 有/ 文本/ 、/ 数据/ 和/ bss/ 段/ ,/ 即为/ ./ text/ 、/ ./ data/ 和/ ./ bss/ 段/ ./ 除此之外/ 还有/ ./ init/ 和/ ./ fini/ 段/ ./ 链接/ 器/ 接收/ 的/ 每个/ 输入/ 文件/ 都/ 拥有/ 一系列/ 不同/ 类型/ 的/ 段/ ,/ 它/ 从/ 输入/ 文件/ 中将/ 每种/ 段/ (/ 包括/ 库/ 目标/ 文件/ 中/ 的/ 各种/ 段/ )/ 都/ 收集/ 到/ 一起/ ,/ 如可/ 执行/ 代码/ 几乎/ 都/ 链接/ 到/ 输出/ 文件/ 的/ 同一个/ ./ text/ 段/ 中/ ;/ 同时/ 链接/ 器会/ 记下/ 哪些/ 符号/ 需要/ 在/ 运行/ 时/ 从库/ 文件/ 中/ 解析/ ,/ 并/ 生成/ ./ interp/ 、/ ./ got/ 、/ ./ plt/ 段/ 和/ 符号表/ 段/ 以/ 支持/ 动态/ 链接/ ./ 接下来/ 链接/ 器会/ 按照/ 约定/ 的/ 顺序/ 安排/ 存储空间/ ,/ 在/ Linux/ 系统/ 中是/ 先/ 文本/ 段/ ./ text/ ,/ 然后/ 是/ 数据/ 段/ ./ data/ ,/ 随后/ 是/ ./ bss/ 段/ ./ Page7/ 中/ 的/ 例程/ ,/ 因/ 胶合/ 代码/ 常/ 包含/ 若干个/ 跳转/ ,/ 这会/ 明显/ 地/ 减慢/ 调用/ 速度/ ./ 所以/ ,/ 现在/ 编译器/ 大都/ 同时/ 采用/ 两种/ 链接/ 策略/ ,/ 以/ 获得最佳/ 的/ 运行/ 效果/ ./ 对/ 用户/ 文件/ 的/ 处理/ ,/ 一般/ 情况/ 下/ 直接/ 将/ 用户/ 代码/ 放置/ 在/ ./ text/ 段/ 中/ 合适/ 的/ 位置/ 上/ ./ 但/ 有/ 一个/ 例外情况/ 是/ 用户/ 在/ 程序/ 内部/ 定义/ 了/ 与/ 库/ 文件/ 中/ 的/ 函数/ 同名/ 的/ 用户/ 函数/ ,/ 并且/ 用/ 它们/ 代替/ 系统/ 库/ 文件/ 中/ 的/ 函数/ ,/ 特别/ 是/ malloc/ 和/ free/ 等/ 关于/ 堆区/ 管理/ 的/ 函数/ ./ 在/ 这种/ 情况/ 下/ 将/ 设置/ 一个/ 链接/ 器/ 标识/ ,/ 表示/ “/ 不要/ 在/ 库/ 文件/ 中/ 查找/ 这些/ 符号/ ”/ ,/ 这样/ 虽然/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 被/ 作为/ 用户/ 函数/ 进行/ 了/ 链接/ 处理/ ,/ 但此/ 用户/ 函数/ 却/ 像/ 库函数/ 一样/ 在/ 动态/ 链接/ 符号表/ 中/ 留下/ 了/ 自身/ 的/ 链接/ 信息/ ,/ 如/ 第/ 4/ 节例/ 3/ 程序/ 中/ 的/ cos/ 函数/ ./ 6/ 函数/ 同名/ 问题/ 的/ 解决方案/ 根据/ 第/ 4/ 节对/ 库函数/ 识别/ 技术/ 和/ 第/ 5/ 节对/ ELF64/ 格式/ 二进制/ 文件组织/ 策略/ 的/ 具体分析/ ,/ 可知/ 要/ 解决/ 用户/ 函数/ 与/ 库函数/ 同名/ 的/ 区分/ 问题/ ,/ 应/ 把/ 突破点/ 放在/ 以下/ 两/ 方面/ :/ (/ 1/ )/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 和/ 库函数/ 在/ ./ text/ 段/ 中/ 所处/ 位置/ 的/ 差别/ ;/ (/ 2/ )/ 二进制/ 文件/ 中/ 的/ 动态/ 链接/ 符号表/ ./ 依据/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 和/ 库函数/ 在/ ./ text/ 段/ 中/ 所处/ 位置/ 的/ 差别/ ,/ 完全/ 可以/ 解决/ 同名/ 问题/ ./ 因为/ 编译器/ gcc/ 在/ 处理函数/ 时有/ 明确/ 的/ 标准/ :/ 库函数/ 都/ 使用/ 动态/ 链接/ 进行/ 链接/ 处理/ ,/ 对/ 库函数/ 的/ 调用/ 地址/ 都/ 处于/ ./ plt/ 段/ 的/ 地址/ 范围/ 之内/ ;/ 用户/ 函数/ 都/ 使用/ 静态/ 链接/ 进行/ 链接/ 处理/ ,/ 对/ 函数/ 的/ 调用/ 地址/ 都/ 大于/ ./ plt/ 段/ 的/ 段/ 尾/ 地址/ ./ 因此/ ,/ 对于/ 由/ gcc/ 编译/ 生成/ 的/ 二进制/ 可执行程序/ 可以/ 按照/ 调用/ 地址/ 与/ ./ plt/ 段/ 地址/ 之间/ 的/ 关系/ 进行/ 用户/ 函数/ 和/ 库函数/ 的/ 区分/ ./ 对/ 由/ icc/ 编译器/ [/ 10/ ]/ 编译/ 生成/ 的/ 二进制/ 可执行程序/ 处理/ 起来/ 就/ 很/ 麻烦/ ,/ 因为/ icc/ 是/ Intel/ 公司/ 针对/ Intel/ 系列/ 机器/ 发布/ 的/ 编译器/ ,/ 由于/ 商业/ 竞争/ 的/ 原因/ 它/ 不/ 像/ 编译器/ gcc/ 那样/ 标准/ ,/ 而是/ 采取/ 了/ 很多/ 深度/ 的/ 编译/ 优化/ 策略/ ./ 例如/ :/ icc/ 在/ 处理/ 库函数/ 时/ 对/ 小/ 部分/ 库函数/ 像/ gcc/ 那样/ 采用/ 动态/ 链接/ 的/ 处理/ 策略/ ,/ 而/ 对/ 大部分/ 的/ 库函数/ 则/ 采用/ 静态/ 链接/ 的/ 处理/ 策略/ ,/ 更/ 甚/ 对/ 一部分/ 的/ 库函数/ 则/ 直接/ 在/ 静态/ 链接/ 的/ 基础/ 上/ 又/ 采用/ 内嵌/ 优化/ 策略/ 来/ 提高/ 程序/ 的/ 运行/ 速度/ ./ 虽然/ 编译器/ icc/ 在/ 处理/ 库函数/ 时极/ 不/ 规范/ ,/ 但/ 并/ 不是/ 无章可循/ ,/ 由/ icc/ 编译/ 生成/ 的/ 二进制/ 可执行程序/ 中/ 用户/ 函数/ 代码/ 和/ 库函数/ 代码/ 都/ 是/ 集中/ 存储/ 的/ ,/ 且/ 在/ 两种/ 代码/ 交界处/ 有/ 一个/ 标志性/ 符号/ “/ DwArFiI/ _/ HiGh/ _/ Pc/ ”/ ,/ 据此/ ,/ 可/ 对/ 由/ icc/ 编译/ 生成/ 的/ 二进制/ 可执行程序/ 按照/ 函数调用/ 地址/ 、/ ./ plt/ 段/ 地址/ 以及/ 标志性/ 符号/ “/ DwArFiI/ _/ HiGh/ _/ Pc/ ”/ 对应/ 地址/ 之间/ 的/ 关系/ 进行/ 用户/ 函数/ 和/ 库函数/ 的/ 区分/ :/ 当/ 函数调用/ 地址/ 处于/ ./ plt/ 段尾/ 地址/ 和/ 标志性/ 符号/ “/ DwArFiI/ _/ HiGh/ _/ Pc/ ”/ 对应/ 地址/ 之间/ 时/ ,/ 此/ 函数/ 为/ 用户/ 函数/ ;/ 否则/ ,/ 为/ 库函数/ ./ 上述/ 方案/ 深度/ 依赖于/ ELF64/ 文件/ 中/ 的/ 符号表/ ,/ 特别/ 是/ 标志性/ 符号/ “/ DwArFiI/ _/ HiGh/ _/ Pc/ ”/ ./ 当/ ELF64/ 文件/ 经过/ strip/ 等/ 瘦身/ 工具/ 处理/ 后/ ,/ 其中/ 绝大多数/ 符号/ 信息/ 都/ 不复存在/ ,/ 包括/ 符号/ “/ DwArFiI/ _/ HiGh/ _/ Pc/ ”/ ,/ 仅/ 留下/ 了/ 动态/ 链接/ 符号表/ 中/ 的/ 少量/ 信息/ ,/ 因为/ 这些/ 符号/ 信息/ 在/ 动态/ 链接/ 的/ 时候/ 需要/ 使用/ ./ 庆幸/ 的/ 是/ 动态/ 链接/ 符号表/ 中/ 保存/ 有/ 库函数/ 及/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 的/ 一些/ 信息/ ,/ 下面/ 基于/ 二进制/ 文件/ 中/ 的/ 动态/ 链接/ 符号表/ 给出/ 一种/ 通用/ 的/ 用户/ 函数/ 与/ 库函数/ 同名/ 的/ 区分/ 算法/ ./ 6.1/ 基于/ 动态/ 链接/ 符号表/ 的/ 函数/ 同名/ 问题/ 分析/ 本节/ 对/ 用户/ 函数/ 与/ 库函数/ 同名/ 问题/ 的/ 分析/ 仍/ 是/ 基于/ 第/ 4/ 节例/ 3/ 给出/ 的/ 程序/ cos/ _/ sin/ -/ e/ ./ c/ 进行/ 的/ ./ 使用/ 反汇编/ 工具/ objdump/ 显示/ 的/ 动态/ 链接/ 符号表/ 信息/ 与/ 5.2/ 节/ 描述/ 的/ 符号表/ 存储/ 结构/ 是/ 一一对应/ 的/ ./ 例/ 3/ 示例/ 程序/ 经/ icc/ 编译器/ 编译/ 生成/ 的/ 二进制/ 可执行程序/ 对应/ 的/ 信息组/ 如图/ 8/ 所示/ ,/ 经/ gcc/ 编译器/ 编译/ 生成/ 的/ 二进制/ 可执行程序/ 对应/ 的/ 信息组/ 如图/ 9/ 所示/ ./ 结合/ 5.2/ 节/ 描述/ 的/ 符号表/ 存储/ 结构/ 及图/ 8/ 和/ 图/ 9/ 给出/ 的/ 动态/ 链接/ 符号表/ 信息/ ,/ 可以/ 很/ 显然/ 地/ 看出/ :/ st/ _/ name/ 列/ 对应/ 的/ 是/ 函数/ 及/ 例程/ 的/ 名字/ ;/ st/ _/ value/ 列/ 对应/ 的/ 是/ 与/ 函数/ 或/ 例程/ 相关/ 的/ 地址/ ;/ st/ _/ info/ 列/ 对应/ 的/ 是/ 与/ 函数/ 或/ 例程/ 相关/ 的/ 符号/ 类型信息/ 和/ 绑定/ 属性/ ;/ st/ _/ shndx/ 列/ 表明/ st/ _/ name/ 列/ 给出/ 的/ 符号/ 是/ 在/ 哪个/ 段/ 中/ 定义/ 的/ ,/ / ABS/ / 代表/ 此/ 符号/ 是/ 绝对/ 符号/ 且/ 它/ 的/ 值/ 为/ 0xFFF1/ ,/ / UND/ / 代表/ 此/ 符号/ 是/ 未定义/ 的/ 符号/ 且/ 它/ 的/ 值/ 为/ 0/ ,/ 对于/ 其它/ 项/ (/ 如/ :/ ./ text/ )/ 所/ 具有/ 的/ 值/ 要视/ 具体情况/ 而定/ ,/ 但/ 肯定/ 不为/ 0/ ;/ st/ _/ size/ 列/ 表明/ 与/ 函数/ 或/ 例程/ 符号/ 相关/ 的/ 空间/ 大小/ 值/ ;/ “/ 区分/ 标志/ ”/ 列/ 给出/ 的/ 信息/ 表明/ 相关/ 函数/ 或/ 例程/ 所处/ 的/ 位置/ 信息/ ,/ GLIBC/ _/ 2.2/ 表示/ 对应/ 的/ 函数/ 或/ 例程/ 来自/ 动态链接库/ 文件/ ,/ Base/ 表示/ 对应/ 的/ 函数/ 或/ 例程/ 来自/ 于本/ ELF64/ 文件/ 的/ ./ text/ 段/ ./ Page8st/ _/ valuest/ _/ infost/ _/ shndxst/ _/ size/ 区分/ 标志/ st/ _/ name6000000000002b10gDO/ / ABS/ / 0000000000000000Base/ _/ DYNAMIC0000000000000000DF/ / UND/ / 00000000000001e0GLIBC/ _/ 2.2/ __/ cxa/ _/ finalize0000000000000000DF/ / UND/ / 0000000000000280GLIBC/ _/ 2.2/ __/ libc/ _/ start/ _/ main/ 图/ 8/ 例/ 3/ 示例/ 程序/ 经/ icc/ 编译/ 对应/ 的/ 信息组/ st/ _/ valuest/ _/ infost/ _/ shndxst/ _/ size/ 区分/ 标志/ st/ _/ name0000000000000000DF/ / UND/ / 0000000000000280GLIBC/ _/ 2.2/ __/ libc/ _/ start/ _/ main/ 图/ 9/ 例/ 3/ 示例/ 程序/ 经/ gcc/ 编译/ 对应/ 的/ 信息组/ 遗憾/ 的/ 是/ 我们/ 从/ 动态/ 链接/ 符号表/ 中/ 得不到/ “/ 区分/ 标志/ ”/ 列/ 显示/ 的/ 信息/ ,/ 推测/ 此列/ 信息/ 可能/ 是/ 由/ 其它/ 列中/ 的/ 信息/ 综合/ 得到/ 的/ ./ 虽然/ 如此/ ,/ 仍/ 可以/ 根据/ st/ _/ name/ 、/ st/ _/ shndx/ 和/ st/ _/ size/ 三列/ 信息/ 最终/ 判定/ 出/ 哪些/ 函数/ 为/ 库函数/ ,/ 哪些/ 函数/ 是/ 用户/ 函数/ ./ 比如/ 对/ 用户/ 函数/ cos/ 接着/ 第/ 4/ 节/ 描述/ 的/ 识别/ 工作/ 继续/ 往下/ 做/ ,/ 当/ main/ 函数/ 解码/ 完成/ 并/ 依据/ 函数调用/ 链/ 对/ 被/ 调用/ 地址/ 0x40000000000008f0/ 或/ 0x4000000000001240/ 所/ 对应/ 的/ cos/ 函数/ 体/ 进行/ 是否/ 解码/ 判定/ 时/ ,/ 根据/ 系统/ 符号表/ 中/ 的/ 名字/ -/ 值/ 对/ Page9/ 得到/ 与其/ 相对/ 应/ 的/ st/ _/ shndx/ 和/ st/ _/ size/ 值/ ,/ 如果/ 函数调用/ 地址/ 不/ 在/ ./ plt/ 段/ 的/ 地址/ 范围/ 中且/ st/ _/ shndx/ 和/ st/ _/ size/ 的/ 值/ 都/ 大于/ 0/ ,/ 则/ 此/ 函数/ 为/ 用户/ 函数/ 同时/ 对/ 其/ 函数/ 体/ 进行/ 解码/ ,/ 否则/ 此/ 函数/ 为/ 库函数/ ./ 6.2/ 基于/ 动态/ 链接/ 符号表/ 的/ 同名/ 问题/ 区分/ 算法/ 基于/ 上节/ 的/ 分析/ ,/ 本节/ 将/ 给出/ 一种/ 基于/ 动态/ 链接/ 符号表/ 的/ 用户/ 函数/ 与/ 库函数/ 同名/ 的/ 区分/ 算法/ ./ 在/ 给出/ 区分/ 算法/ 之前/ 先/ 定义/ 并/ 建立/ 一个/ 与/ 动态/ 链接/ 符号表/ 相对/ 应/ 的/ 不/ 完全/ 符号表/ Table/ _/ Dynamic/ ,/ 该表/ 包含/ 的/ 数据/ 成员/ 有/ st/ _/ name/ 、/ st/ _/ shndx/ 和/ st/ _/ size/ ,/ 具体/ 组织/ 形式/ 如图/ 10/ 所示/ ./ st/ _/ namest/ _/ shndx/ 图/ 10/ 不/ 完全/ 符号表/ Table/ _/ Dynamic/ 的/ 组织/ 结构/ 用户/ 函数/ 与/ 库函数/ 同名/ 的/ 区分/ 算法/ 描述/ 如下/ :/ 功能/ :/ 判定/ 待/ 解码/ 的/ 函数/ 是否/ 为/ 库函数/ 输入/ :/ 函数调用/ 地址/ Addr/ 、/ 系统/ 符号表/ Table/ _/ Sys/ 和/ 符/ 输出/ :/ 与/ 地址/ Addr/ 相应/ 的/ 函数/ 是否/ 为/ 库函数/ ,/ 是/ 库函/ begin/ 根据/ 调用/ 地址/ Addr/ 在/ 系统/ 符号表/ Table/ _/ Sys/ 中查/ end/ 在/ ITC/ 系统/ 中/ 应用/ 上述/ 同名/ 区分/ 算法/ 后/ ,/ 系统对/ 库函数/ 的/ 识别/ 能力/ 得到/ 了/ 极大/ 的/ 提高/ ,/ 有效/ 消除/ 了/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 对/ 翻译/ 正确性/ 的/ 影响/ ./ 正确/ 识别/ 了/ 所有/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ ,/ 像/ sin/ 、/ cos/ 、/ sqrt/ 、/ log/ 、/ exp/ 、/ pow/ 及/ random/ 等/ ;/ 另外/ ,/ 对/ 测试/ 集/ IEEE754/ 浮点/ 测试软件/ 中/ 的/ 测试用例/ paranoia/ 包含/ 的/ 用户/ 函数/ random/ 进行/ 了/ 成功/ 的/ 识别/ ./ 7/ 结束语/ 本文/ 首先/ 指出/ 参考文献/ [/ 6/ ]/ 介绍/ 的/ 库函数/ 快速/ 识别/ 技术/ 在/ 区分/ 库函数/ 和/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 方面/ 存在/ 的/ 缺陷/ ,/ 并/ 在/ 深入分析/ 库函数/ 快速/ 识别/ 技术/ 、/ ELF64/ 格式/ 二进制/ 文件/ 的/ 具体/ 组织/ 策略/ 、/ gcc/ 和/ icc/ 编译器/ 在/ 处理/ 库函数/ 及/ 与/ 库函数/ 同名/ 的/ 用户/ 函数/ 时所/ 采用/ 的/ 编译/ 策略/ 的/ 基础/ 上/ ,/ 提出/ 了/ 判定/ 库函数/ 和/ 同名/ 用户/ 函数/ 的/ 区分/ 算法/ ./ 在/ 设计/ 此/ 算法/ 的/ 过程/ 中/ 考虑/ 到/ 各种/ 可能/ 出现/ 的/ 情况/ ,/ 另外/ 还/ 特别/ 考虑/ 了/ strip/ 等/ 瘦身/ 工具/ 的/ 使用/ 对/ 区分/ 算法/ 的/ 影响/ ./ 大量/ 测试用例/ 的/ 检验/ 表明/ ,/ 本文/ 给出/ 的/ 用户/ 函数/ 与/ 库函数/ 同名/ 的/ 区分/ 算法/ 是/ 有效/ 的/ ,/ 达到/ 了/ 正确区分/ 用户/ 函数/ 和/ 库函数/ 的/ 目的/ ./ 

