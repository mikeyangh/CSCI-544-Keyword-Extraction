Page1/ 一种/ 面向/ 同构/ 集群/ 系统/ 的/ 并行任务/ 节能/ 调度/ 优化/ 方法/ 李新/ 1/ )/ 贾智平/ 1/ )/ 鞠雷/ 1/ )/ 赵衍恒/ 1/ )/ 宗子/ 良/ 2/ )/ 1/ )/ (/ 山东大学/ 计算机科学/ 与/ 技术/ 学院/ 济南/ 250101/ )/ 2/ )/ (/ 德克萨斯州/ 立/ 大学/ 计算机科学/ 系/ 圣马科斯/ 78666/ 美国/ )/ 摘要/ 节能/ 调度/ 算法/ 设计/ 是/ 高性能/ 计算/ 领域/ 中/ 的/ 一个/ 研究/ 热点/ ./ 复制/ 调度/ 算法/ 能够/ 减少/ 后继/ 任务/ 等待/ 延时/ ,/ 缩短/ 任务/ 总体/ 调度/ 时间/ ,/ 但是/ 耗费/ 了/ 更/ 多/ 的/ 能量/ ./ 为此/ ,/ 作者/ 提出/ 一种/ 启发式/ 处理器/ 合并/ 优化/ 方法/ PRO/ ./ 该/ 方法/ 按照/ 任务/ 最早/ 开始/ 时间/ 和/ 最早/ 结束/ 时间/ 查找/ 处理器/ 时间/ 空隙/ ,/ 将/ 轻/ 负载/ 处理器/ 上/ 的/ 任务/ 重新分配/ 到/ 其它/ 处理器/ 上/ ,/ 从而/ 减少/ 使用/ 的/ 处理器/ 数目/ ,/ 降低/ 系统/ 总体/ 能耗/ ./ 实验/ 结果表明/ ,/ 和/ 已有/ 的/ 复制/ 任务调度/ 算法/ TDS/ 、/ EAD/ 和/ PEBD/ 相比/ ,/ 优化/ 后/ 的/ 调度/ 算法/ 在/ 不/ 增加/ 调度/ 时间/ 的/ 条件/ 下/ ,/ 能够/ 明显/ 减少/ 使用/ 的/ 处理器/ 数/ 和/ 系统/ 总体/ 能耗/ ,/ 从而/ 更好/ 地/ 实现/ 性能/ 和/ 能耗/ 之间/ 的/ 平衡/ ./ 关键词/ 绿色/ 网络/ ;/ 集群/ ;/ 并行/ ;/ 同构/ ;/ 前驱/ 约束/ ;/ 节能/ 调度/ ;/ 绿色/ 计算/ 1/ 引言/ 随着/ 高性能/ 计算/ 的/ 发展/ ,/ 大型/ 集群/ (/ 机群/ )/ 系统/ 的/ 能量消耗/ 越来越/ 多/ ,/ 绿色/ 节能/ 成为/ 高性能/ 计算/ 必须/ 考虑/ 的/ 重要/ 因素/ 之一/ [/ 1/ ]/ ./ 例如/ ,/ 2006/ 年/ 美国/ 境内/ 的/ 服务器/ 和/ 数据中心/ 的/ 总/ 能耗/ 为/ 614/ 亿千瓦时/ ,/ 几乎/ 等于/ 580/ 万/ 美国/ 家庭/ 用电/ 的/ 总和/ ①/ ./ 如何/ 降低/ 现有/ 计算机系统/ 的/ 能耗/ ,/ 设计/ 能量/ 有效/ 利用/ 的/ 高效能/ 集群/ 系统/ ,/ 已经/ 成为/ 高性能/ 计算/ 亟需/ 解决/ 的/ 问题/ 之一/ [/ 2/ ]/ ./ 集群/ 系统/ 中/ 节能/ 调度/ 问题/ 是/ 为/ 系统/ 中/ 每/ 一个/ 并行任务/ 分配/ 处理器/ 等/ 资源/ ,/ 并/ 指派/ 占用/ 这些/ 资源/ 的/ 起止/ 时间/ ,/ 在/ 满足/ 依赖/ 关系/ 的/ 条件/ 下/ ,/ 使得/ 所有/ 任务/ 较/ 早/ 完成/ ,/ 并且/ 能量消耗/ 尽量少/ ./ 节能/ 调度/ 与/ 传统/ 的/ 并行/ 任务调度/ 相比/ ,/ 主要/ 目标/ 不是/ 减少/ 任务/ 总体/ 完成/ 时间/ (/ 调度/ 长度/ )/ ,/ 而是/ 尽量减少/ 使用/ 资源/ 数目/ 和/ 占用/ 时间/ ,/ 提高/ 资源/ 利用率/ ,/ 达到/ 整个/ 集群/ 系统/ 性能/ 和/ 能耗/ 之间/ 的/ 平衡/ ./ 多处理器/ // 机上/ 并行任务/ 最优/ 调度/ 问题/ 已经/ 证明/ 是/ NP/ 难/ 的/ [/ 3/ ]/ ./ 国内外/ 学者/ 普遍/ 采用/ 启发式/ 算法/ 生成/ 调度/ 方案/ ,/ 减少/ 任务/ 总体/ 完成/ 时间/ ,/ 降低/ 系统/ 能耗/ ./ TDS/ (/ TaskDuplicationScheduling/ )/ 调度/ [/ 4/ ]/ 将/ 所有/ 任务/ 按照/ 依赖/ 关系/ 图/ 的/ 拓扑/ 结构/ 分成/ 多条/ 路径/ ,/ 每个/ 路径/ 上/ 的/ 任务/ 分为/ 一组/ ,/ 分配/ 到/ 一个/ 处理器/ 上/ 执行/ ./ 该/ 方法/ 通过/ 在/ 数据/ 相关/ 的/ 任务/ 分组/ 上/ 复制/ 执行/ 前驱/ 任务/ 减少/ 处理器/ 间/ 的/ 数据传输/ 延迟/ ,/ 缩短/ 所有/ 任务/ 的/ 总体/ 执行/ 时间/ ./ 然而/ ,/ 任务/ 复制/ 执行/ 在/ 提高/ 性能/ 的/ 同时/ ,/ 带来/ 了/ 能耗/ 增加/ 问题/ ./ 为此/ ,/ Zong/ 等/ 人/ [/ 5/ ]/ 在/ TDS/ 的/ 基础/ 上/ ,/ 提出/ 了/ 两种/ 非/ 抢占/ 式/ 离线/ 节能/ 调度/ 算法/ —/ —/ —/ EAD/ (/ Energy/ -/ AwareDuplication/ )/ 调度/ 和/ PEBD/ (/ Performance/ -/ EnergyBalancedDuplication/ )/ 调度/ ,/ 分别/ 通过/ 设置/ 任务/ 能量/ 阈值/ 和/ 能量/ // 时间/ 比/ 阈值/ ,/ 减少/ 低/ 能效/ 任务/ 复制/ 次数/ ,/ 从而/ 降低/ 系统/ 的/ 总体/ 能量/ 开销/ ./ 本文/ 在/ 以上/ 研究/ 的/ 基础/ 上/ ,/ 设计/ 了/ 一种/ 启发式/ 处理器/ 合并/ 优化/ 方法/ ,/ 简称/ PRO/ (/ ProcessorReduc/ -/ tionOptimizing/ )/ ./ 该/ 方法/ 通过/ 合并/ 任务/ 数较/ 少/ 的/ 任务/ 分组/ ,/ 减少/ 处理器/ 使用/ 数目/ ,/ 从而/ 降低/ 系统/ 总/ 能量/ 开销/ ./ PRO/ 方法/ 与/ TDS/ 、/ EAD/ 和/ PEBD/ 调度/ 结合/ 形成/ 了/ 3/ 种/ 优化/ 的/ 调度/ 算法/ TDS/ -/ PRO/ 、/ EAD/ -/ PRO/ 和/ PEBD/ -/ PRO/ ./ 实验/ 结果表明/ ,/ 优化/ 后/ 的/ 3/ 种/ 算法/ 与/ 优化/ 之前/ 的/ 相应/ 算法/ 相比/ ,/ 任务/ 总体/ 执行/ 时间/ 略微/ 减少/ 或/ 相等/ ,/ 而/ 总体/ 能量/ 开销/ 平均/ 减少/ 23.71/ %/ 、/ 21.28/ %/ 和/ 23.51/ %/ ./ 与/ 已有/ 的/ 研究/ 工作/ 相比/ ,/ 本文/ 的/ 创新/ 之/ 处/ 在于/ :/ (/ 1/ )/ 在/ 文献/ [/ 5/ ]/ 的/ 基础/ 上/ ,/ 提出/ 一种/ 改进/ 的/ 集群/ 系统/ 能耗/ 统计/ 模型/ ,/ 考虑/ 了/ 任务/ 复制/ 情况/ 下/ 能耗/ 统计/ ./ 该/ 模型/ 将/ 处理器/ 、/ 网卡/ 和/ 网络/ 交换机/ 作为/ 系统/ 能耗/ 的/ 主要/ 构成/ ,/ 给出/ 了/ 详细/ 的/ 统计/ 方法/ ./ (/ 2/ )/ 提出/ 了/ 一种/ 处理器/ 合并/ 优化/ 方法/ PRO/ ./ 该/ 方法/ 与/ 现有/ 的/ 任务/ 复制/ 执行/ 策略/ 相结合/ ,/ 能够/ 得到/ 优化/ 的/ 调度/ 方案/ ,/ 减少/ 使用/ 的/ 处理器/ 数目/ ,/ 降低/ 系统/ 总/ 能耗/ ./ (/ 3/ )/ 开发/ 了/ 一个/ 并行/ 任务调度/ 模拟程序/ ,/ 实现/ 了/ TDS/ 、/ EAD/ 、/ PEBD/ 和/ 本文/ 提出/ 的/ 3/ 个/ 改进/ 调度/ 算法/ ,/ 并/ 使用/ 来自/ 于/ 真实/ 应用/ 的/ 任务/ 集对/ 算法/ 进行/ 了/ 测试/ 和/ 评估/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 工作/ ;/ 第/ 3/ 节/ 给出/ 节能/ 调度/ 问题/ 的/ 形式化/ 描述/ ,/ 包括/ 任务模型/ 、/ 处理器/ 模型/ 和/ 能耗/ 统计/ 模型/ ;/ 第/ 4/ 节/ 详细描述/ 节能/ 调度/ 方法/ ;/ 第/ 5/ 节对/ 算法/ 的/ 性能/ 进行/ 测试/ 和/ 分析/ ;/ 最后/ 总结/ 全文/ ./ 2/ 相关/ 工作/ 在/ 集群/ 上/ 运行/ 的/ 并行程序/ 需要/ 大量/ 的/ 数据处理/ 和/ 数据交换/ ,/ 集群/ 管理系统/ 需要/ 对/ 这些/ 并行程序/ 分配资源/ 和/ 调度/ ./ 分配/ 和/ 调度/ 策略/ 对/ 整个/ 系统/ 性能/ 具有/ 重要/ 的/ 影响/ ./ 总体而言/ ,/ 并行/ 调度/ 策略/ 可以/ 分为/ 3/ 种/ :/ 基于/ 优先级/ 的/ 调度/ 、/ 基于/ 分组/ (/ 聚类/ [/ 6/ ]/ ,/ cluster/ )/ 的/ 调度/ 和/ 基于/ 复制/ 的/ 调度/ [/ 5/ ]/ ./ 首先/ ,/ 基于/ 优先级/ 的/ 调度/ [/ 7/ ]/ 为/ 每个/ 任务分配/ 一个/ 优先/ 等级/ ,/ 根据/ 等级/ 将/ 任务分配/ 到/ 处理器/ 上/ 执行/ ./ 基于/ 分组/ 的/ 调度/ 算法/ [/ 8/ ]/ 尽可能/ 将/ 有/ 数据通信/ 的/ 任务/ 划分/ 到/ 一个/ 分组/ ,/ 然后/ 按/ 分组/ 指派/ 处理器/ ,/ 从而/ 减小/ 处理器/ 间通信/ 消耗/ ./ 基于/ 复制/ 的/ 调度/ TDS/ [/ 4/ ]/ 利用/ 处理器/ 的/ 空闲/ 时间/ 复制/ 前驱/ 任务/ ,/ 避免/ 某些/ 前驱/ 任务/ 的/ 通信/ 数据传输/ ,/ 从而/ 减少/ 传输/ 延迟/ ./ 复制/ 策略/ 往往/ 和/ 分组/ 策略/ 共同/ 使用/ ,/ 在/ 不同/ 分组/ 中/ 复制/ 关键/ 路径/ 上/ 的/ 前驱/ 任务/ ,/ 减少/ 数据传输/ 延迟/ [/ 5/ ]/ ./ 在/ 大多数/ 情况/ 下/ ,/ 基于/ 复制/ 的/ 调度/ 在/ 性能/ (/ 调度/ 长度/ )/ 上/ 优于/ 非/ 复制/ 的/ 调度/ 方法/ ,/ 尤其/ 当/ 任务/ 之间/ 传输数据/ 量/ 较/ 多/ 时/ ./ 然而/ ,/ 由于/ 任务/ 被/ 复制/ 后/ 在/ 不同/ 处理器/ 上/ 重复/ 执行/ ,/ 这/ 增加/ 了/ 系统/ 的/ 总/ 能耗/ ./ 为了/ 解决/ 这个/ 问题/ ,/ Zong/ 等/ 人/ [/ 5/ ]/ 提出/ 了/ 两种/ 能量/ 敏感/ 的/ 复制/ 调度/ 算法/ (/ EAD/ 和/ PEBD/ )/ ,/ 减少/ 任务/ 复制/ 次/ ①/ http/ :/ // // www/ ./ energystar/ ./ gov/ // ia/ // partners/ // prod/ _/ develop/ -/ Page3/ 数/ ,/ 实现/ 性能/ 提升/ 和/ 能耗/ 节约/ 的/ 折中/ ./ 本文/ 提出/ 的/ 处理器/ 任务/ 合并/ 方法/ 是/ 对/ TDS/ 、/ EAD/ 和/ PEBD/ 算法/ 的/ 改进/ ,/ 通过/ 减少/ 处理器/ 使用/ 数目/ ,/ 进一步/ 降低/ 系统/ 总/ 能耗/ ./ 另外/ ,/ 动态/ 功率/ 管理机制/ [/ 9/ ]/ 也/ 是/ 一种/ 有效/ 的/ 节能/ 方法/ ./ 该/ 方法/ 通过/ 及时/ 关闭/ 或/ 休眠/ 某些/ 不/ 使用/ 的/ 部件/ ,/ 减少/ 系统资源/ 占用/ 和/ 能量消耗/ ./ 文献/ [/ 10/ ]/ 将/ 反馈/ 控制/ 理论/ 引入/ 到/ 异构/ 集群/ 系统/ 中/ ,/ 提出/ 一种/ 基于/ 处理器/ 使用率/ 的/ 反馈/ 控制算法/ ,/ 实现/ 动态/ 的/ 负载平衡/ ./ 动态/ 电压/ // 频率/ 调整/ (/ DynamicVoltageandFre/ -/ quencyScaling/ ,/ DVFS/ )/ 技术/ [/ 11/ -/ 16/ ]/ 通过/ 降低/ 芯片/ 内部/ 电压/ 或/ 频率/ ,/ 减小/ 处理器/ 芯片/ 的/ 功率/ ,/ 从而/ 减小/ 集群/ 系统/ 的/ 能量/ 开销/ ./ 在/ 通信/ 密集型/ 应用/ 中/ ,/ 网络通信/ 的/ 能耗/ 在/ 总/ 能耗/ 中/ 占/ 比重/ 较大/ ,/ 因此/ 动态/ 电压/ // 频率/ 调整/ 的/ 好处/ 可能/ 会/ 降低/ [/ 5/ ]/ ./ Soteriou/ 等/ 人/ [/ 9/ ]/ 研究/ 了/ 如何/ 根据/ 通信/ 情况/ 变化/ ,/ 动态/ 打开/ 或/ 关闭/ 网络连接/ ./ Gunaratne/ 等/ 人/ [/ 17/ ]/ 提出/ 了/ 一种/ 自/ 适应/ 连接/ 速率/ 方法/ ,/ 根据/ 网络/ 利用率/ 动态/ 调整/ 网络连接/ 状态/ ,/ 减少/ 以太网/ 能量/ 开销/ ./ 文献/ [/ 18/ ]/ 表明/ ,/ 采用/ DVFS/ 的/ 互连/ 技术/ 能够/ 明显/ 减少/ 能量/ 开销/ ./ 但是/ ,/ 他们/ 的/ 方法/ 要求/ 网络设备/ (/ 网卡/ 和/ 交换机/ 等/ )/ 具有/ 多个/ 通信/ 速率/ 和/ 功耗/ 等级/ ,/ 并且/ 能够/ 动态/ 切换/ ./ 然而/ ,/ 大多数/ 以太网/ 设备/ 在/ 完全/ 空闲/ 和/ 充分利用/ 两种/ 情况/ 下/ ,/ 几乎/ 消耗/ 同样/ 多/ 的/ 能量/ [/ 17/ ]/ ./ 3/ 节能/ 调度/ 问题/ 模型/ 节能/ 调度/ 问题/ 由/ 任务模型/ 、/ 服务器/ 模型/ 和/ 能耗/ 统计/ 模型/ 三/ 部分/ 构成/ ./ 表/ 1/ 中/ 给出/ 了/ 本文/ 使用/ 的/ 主要/ 变量/ 和/ 参数/ ./ 名称/ 含义/ n/ 任务/ 数量/ m/ 计算机/ 节点/ 数量/ ECT/ (/ vi/ )/ 最早/ 完成/ 时间/ Nswitch/ 交换机/ 数量/ LAST/ (/ vi/ )/ 最迟/ 开始/ 时间/ vi/ 第/ i/ 个/ 任务/ LACT/ (/ vi/ )/ 最迟/ 完成/ 时间/ ti/ 任务/ i/ 的/ 执行/ 时间/ FP/ (/ vi/ )/ 关键/ 前驱/ eij/ 任务/ j/ 依赖于/ 任务/ iwijcij3/ ./ 1/ 任务模型/ 本文/ 中/ 的/ 任务/ 集合/ 由/ n/ 个/ 具有/ 依赖/ 关系/ 的/ 并行任务/ 构成/ ./ 任务调度/ 不可/ 抢占/ (/ non/ -/ preemptive/ )/ ./ 任务/ 集合/ 和/ 依赖/ 关系/ 可以/ 使用/ 任务/ 图来/ 表示/ ./ 定义/ ./ 任务/ 图/ G/ 是/ 一个/ 有/ 向/ 无/ 环图/ DAG/ (/ DirectedAcyclicGraph/ )/ ,/ G/ =/ (/ V/ ,/ E/ )/ ,/ 其中/ 顶点/ 集合/ V/ 用于/ 表示/ 任务/ 集合/ ,/ V/ =/ {/ vi/ |/ 1/ / i/ / n/ }/ ;/ 有/ 向/ 边/ 集合/ E/ =/ {/ eij/ |/ 1/ / i/ / n/ ,/ 1/ / j/ / n/ }/ 表示/ 任务/ 之间/ 的/ 数据流/ 向/ 或/ 依赖/ 关系/ ./ 任务/ vi/ =/ (/ ti/ ,/ Ω/ i/ )/ ,/ 其中/ ,/ ti/ 表示/ 任务/ 执行/ 时间/ ,/ Ω/ i/ / V/ 表示/ 任务/ i/ 的/ 前驱/ 任务/ 集合/ ./ 任务/ 图中/ ,/ 顶点/ 内部/ 的/ 数字/ 表示/ 任务/ 编号/ ,/ 顶点/ 边上/ 的/ 数值/ 表示/ 任务/ 执行/ 时间/ ./ 有/ 向/ 边/ eij/ 上/ 数值/ cij/ 表示/ :/ 如果/ 任务/ i/ 和/ j/ 不/ 在/ 一台/ 计算机/ 上/ 执行/ 时/ ,/ 任务/ i/ 的/ 运算/ 结果/ 传输/ 给/ 任务/ j/ 需要/ 的/ 网络/ 耗时/ ./ 如果/ 两个/ 任务/ 在/ 一台/ 计算机/ 上/ 执行/ ,/ 网络/ 传输/ 耗时/ 为/ 0/ ./ 例如/ ,/ 图/ 1/ (/ a/ )/ 给出/ 了/ 一个/ 具有/ 5/ 个/ 任务/ 的/ 集合/ ./ 如果/ 任务/ 3/ 和/ 任务/ 1/ 不/ 在/ 一台/ 计算机/ 上/ 执行/ ,/ 那么/ 将/ 耗用/ 1/ 个/ 单位/ 的/ 时间/ 才能/ 将/ 相关/ 结果/ 发送到/ 任务/ 3/ 所在/ 的/ 处理器/ ./ 3.2/ 服务器/ 模型/ 假设/ 服务器/ Π/ 由/ m/ 个/ 同构/ 计算机/ 节点/ (/ 下文/ 简称/ 节点/ )/ 组成/ ,/ 每个/ 节点/ 具有/ 一个/ 单核/ 处理器/ ,/ Π/ =/ {/ P1/ ,/ P2/ ,/ …/ ,/ Pm/ }/ ./ m/ 的/ 个数/ 根据/ 应用/ 需要/ 动态/ 确定/ ./ 任务/ 可以/ 在/ 任意/ 节点/ 上/ 执行/ ,/ 而且/ 执行/ 时间/ 相等/ ./ 每个/ 处理器/ 都/ 具有/ 一个/ 固定/ 运行/ 频率/ ./ 假设/ PCbusy/ 和/ PCidle/ 分别/ 表示/ 处理器/ 执行/ 任务/ 时/ 和/ 空闲/ 时/ 的/ 功率/ ./ 分配/ 矩阵/ 犡/ 定义/ 为/ 犡/ =/ {/ xij/ |/ 1/ / i/ / n/ ,/ 1/ / j/ / m/ }/ ,/ 其中/ ,/ xij/ =/ 1/ 表示/ 任务/ i/ 分配/ 到/ 处理器/ j/ 上/ 执行/ ;/ xij/ =/ 0/ 表示/ 任务/ i/ 不/ 在/ 处理器/ j/ 上/ 执行/ ./ 任务/ vi/ 在/ 处理器/ j/ 上/ 的/ 一次/ 执行/ 称之为/ vi/ 的/ 一个/ 作业/ wij/ ,/ 任务/ vi/ 的/ 所有/ 作业/ 表示/ 为/ {/ wij/ |/ xij/ =/ 1/ }/ ./ 3.3/ 能耗/ 模型/ 处理器/ 是/ 服务器/ 机柜/ 中/ 最/ 耗能/ 的/ 部分/ [/ 5/ ]/ ./ 而/ 在/ 局域网/ 中/ ,/ switch/ 和/ hubs/ 大约/ 占/ 整个/ 网络设备/ 总/ 能耗/ 的/ 80/ %/ [/ 19/ ]/ ./ 因此/ ,/ 本文/ 仅/ 统计/ CPU/ 、/ 网卡/ 和/ 交换机/ 三/ 部分/ 耗费/ 的/ 能量/ ,/ 作为/ 系统/ 能量消耗/ ./ Page43/ ./ 3.1/ CPU/ 能耗/ 任务/ vi/ 在/ 节点/ 上/ 执行/ 一次/ 耗费/ 的/ 能量/ Evi/ 等于/ :/ 考虑/ 到/ 一个/ 任务/ 可能/ 在/ 不同/ 处理器/ 上/ 重复/ 执行/ ,/ 所有/ 处理器/ 处于/ 运行/ 状态/ 所/ 消耗/ 的/ 能量/ ECbusy/ 可以/ 用式/ (/ 2/ )/ 来/ 计算/ ./ 处理器/ 处于/ 空闲/ 状态/ 的/ 能耗/ 是/ 空闲/ 功率/ PCidle/ 和/ 空闲/ 时间/ 的/ 乘积/ ./ 式/ (/ 3/ )/ 表示/ 集群/ 中/ 第/ j/ 个/ 处理器/ 空闲/ 时/ 的/ 能耗/ ./ i/ =/ 1/ 其中/ ,/ ∑/ nLmax/ 表示/ 调度/ 长度/ (/ schedulelength/ )/ ,/ 即/ 最后/ 一个/ 任务/ 的/ 完成/ 时间/ ./ Lmax/ =/ maxni/ =/ 1maxm/ 为/ 任务/ 作业/ wij/ 的/ 结束/ 时间/ ./ 任务/ 执行/ 时间/ 之/ 和/ 最大/ 的/ 路径/ 构成/ 关键/ 路径/ ./ 关键/ 路径/ 决定/ 调度/ 长度/ ./ 例如/ ,/ 图/ 1/ (/ a/ )/ 中/ 路径/ 1/ →/ 4/ →/ 5/ 为/ 关键/ 路径/ ./ 所有/ 节点/ 空闲/ 时/ 的/ 总/ 能耗/ ECidle/ 为/ ECidle/ =/ PCidlem/ ·/ Lmax/ -/ ∑/ m/ 因此/ ,/ 处理器/ 总/ 能耗/ EC/ 可以/ 表示/ 为/ 需要/ 说明/ 的/ 是/ ,/ 这个/ 能耗/ 模型/ 与/ DVFS/ 技术/ 是/ 兼容/ 的/ ./ 支持/ DVFS/ 的/ 处理器/ 可能/ 有/ 多个/ 电压/ 频率/ 等级/ ,/ 调度/ 算法/ 可以/ 选择/ 合适/ 的/ 电压/ 或/ 频率/ 作为/ 处理器/ 功率/ PCbest/ -/ fit/ ./ 在/ 这种/ 情况/ 下/ ,/ 可以/ 使用/ PCbest/ -/ fit/ 代替/ 式/ (/ 2/ )/ 中/ 的/ PCbusy/ ,/ 分段/ 计算/ 处理器/ 运行/ 状态/ 的/ 总/ 能耗/ ./ 3.3/ ./ 2/ 网卡/ 能耗/ 假设/ 每个/ 节点/ 上/ 只有/ 一块/ 网卡/ ,/ PNbusy/ 表示/ 网卡/ 忙碌/ (/ 收发/ 数据/ )/ 时/ 的/ 功率/ ,/ PNidle/ 表示/ 网卡/ 空闲/ 时/ 的/ 功率/ ./ 第/ j/ 个/ 节点/ 中/ 网卡/ 接收数据/ 耗费/ 的/ 能量/ 可以/ 表示/ 为/ ENj/ 假设/ 发送/ 和/ 接收/ 同/ 一批/ 数据/ 耗时/ 相等/ ,/ 所有/ 网卡/ 忙碌/ (/ 发送/ 和/ 接收/ )/ 时间/ 总/ 能耗/ 为/ ENbusy/ =/ 2/ ·/ PNbusy/ ·/ ∑/ n/ 类似/ 式/ (/ 5/ )/ ,/ 网卡/ 总/ 能耗/ EN/ 等于/ EN/ =/ m/ ·/ PNidle/ ·/ Lmax/ +/ 2/ (/ PNbusy/ -/ PNidle/ )/ ·/ 3.3/ ./ 3/ 交换机/ 能耗/ 本文/ 中/ ,/ 集群/ 互联/ 是/ 同构/ 的/ ,/ 也就是说/ 所有/ 设备/ 以/ 相同/ 的/ 速率/ 传递数据/ ./ 文献/ [/ 11/ ,/ 14/ ]/ 表明/ 空闲/ 和/ 充分利用/ 两种/ 情况/ 下/ ,/ 网络设备/ 几乎/ 消耗/ 同样/ 多/ 的/ 能量/ ./ 例如/ ,/ 在/ Myrinet/ -/ 2000/ 网络/ 中/ ,/ 交换机/ 在/ 不同/ 的/ 通信/ 流量/ 状态/ 下/ 消耗/ 的/ 能量/ 几乎/ 是/ 相等/ 的/ [/ 20/ ]/ ./ 因此/ ,/ 可以/ 假设/ 交换机/ 忙碌/ 时/ 功率/ 与/ 空闲/ 时/ 功率/ 一致/ ,/ 统一/ 使用/ PS/ 表示/ ./ 所有/ 节点/ 连接/ 到/ 交换机/ 两层/ 级联/ 网络/ ./ 网络/ 中/ 交换机/ 的/ 台数/ Nswitch/ 与/ 每台/ 交换机/ 端口数/ Nport/ 和/ 处理器/ 数/ m/ 有关/ ./ 当/ m/ / (/ Nport/ )/ 2/ 时/ ,/ 交换机/ 总/ 能耗/ ES/ 等于/ ES/ =/ Nswitch/ ·/ Lmax/ ·/ PS/ =/ m/ 最后/ ,/ 可以/ 得到/ 服务器/ 的/ 总/ 能耗/ 开销/ E/ :/ 在/ 以上/ 定义/ 的/ 基础/ 上/ ,/ 调度/ 问题/ 可以/ 描述/ 为/ :/ 给定/ 一个/ 具有/ 前驱/ 约束/ 的/ 并行任务/ 集合/ 和/ 一个/ 处理器/ 节点/ 集合/ ,/ 寻找/ 一种/ 调度/ 方案/ 使得/ 在/ 满足/ 前驱/ 约束/ 的/ 前提/ 下/ ,/ 所有/ 任务/ 都/ 能/ 较/ 快/ 完成/ ,/ 并且/ 服务器/ 总/ 能量/ 开销/ 最小/ ./ 4/ 节能/ 调度/ 方法/ 本文/ 提出/ 的/ 节能/ 调度/ 方法/ 先/ 计算/ 各个/ 任务/ 的/ 调度/ 参数/ ,/ 再/ 执行/ TDS/ 、/ EAD/ 或/ PEBD/ 算法/ ,/ 对/ 任务/ 进行/ 初步/ 分配/ ,/ 然后/ 更新/ 作业/ 开始/ 执行/ 时间/ 和/ 结束/ 时间/ ,/ 最后/ 执行/ 处理器/ 合并/ 优化/ 算法/ ./ 4.1/ 计算/ 任务调度/ 参数/ 调度/ 算法/ 必须/ 保证/ 前驱/ 任务/ 先/ 执行/ ,/ 后继/ 任务/ 后/ 执行/ ./ 为了/ 满足/ 这个/ 条件/ ,/ 使用/ level/ 的/ 概念/ 产生/ 任务分配/ 次序/ ./ 一个/ 任务/ 的/ level/ 被/ 定义/ 为/ 从/ 该/ 任务/ 开始/ 执行/ 到/ 最后/ 一个/ 任务/ 完成/ 的/ 时间/ ./ 本文/ 使用/ 文献/ [/ 4/ ]/ 中/ 提出/ 方法/ ,/ 自下而上/ 计算/ 任务/ 的/ level/ ./ level/ (/ vi/ )/ =/ 按/ level/ 从小到大/ 顺序排列/ 任务/ ,/ 形成/ 任务/ 处理/ Page5/ 序列/ Q/ ./ 然后/ ,/ 计算/ 任务/ 的/ 最早/ 开始/ 时间/ EST/ (/ EarliestStartTime/ )/ 、/ 最早/ 完成/ 时间/ ECT/ (/ EarliestComple/ -/ tionTime/ )/ 、/ 最/ 晚/ 允许/ 开始/ 时间/ LAST/ (/ LatestAl/ -/ lowableStartTime/ )/ 和/ 最晚/ 允许/ 完成/ 时间/ LACT/ (/ LatestAllowableCompletionTime/ )/ ./ 没有/ 前驱/ 的/ 任务/ 的/ EST/ 等于/ 0/ ,/ 其它/ 任务/ 的/ EST/ 可以/ 根据/ 式/ (/ 13/ )/ 递归计算/ 出来/ ./ EST/ (/ vi/ )/ =/ {/ 0/ ,/ 如果/ vi/ 的/ 前驱/ 为空/ ,/ mineji/ ∈/ E/ (/ maxeki/ ∈/ E/ ,/ vk/ ≠/ vj/ 任务/ vi/ 的/ 最早/ 完成/ 时间/ ECT/ 等于/ :/ 每个/ 有/ 前驱/ 的/ 任务/ 都/ 至少/ 有/ 一个/ 关键/ 前驱/ 任务/ FP/ (/ FavoritePredecessor/ )/ ./ FP/ (/ vi/ )/ 定义/ 如下/ :/ 一个/ 任务/ 和/ 它/ 的/ 关键/ 前驱/ 任务/ 会/ 被/ 分配/ 到/ 同一个/ 节点/ 上/ 执行/ ,/ 从而/ 得到/ 较/ 短/ 的/ 调度/ 长度/ ./ 最后/ 一个/ 任务/ 的/ 最晚/ 允许/ 完成/ 时间/ LACT/ 等于/ 它/ 的/ 最早/ 完成/ 时间/ ./ 其它/ 任务/ 的/ LACT/ 用/ 自下而上/ 的/ 方法/ 按照/ 式/ (/ 16/ )/ 计算/ ./ LACT/ (/ vi/ )/ =/ {/ ECT/ (/ vi/ )/ ,/ 如果/ vi/ 的/ 后继/ 为空/ ,/ min/ (/ mineij/ ∈/ E/ ,/ vi/ ≠/ FP/ (/ vj/ )/ (/ LAST/ (/ vj/ )/ -/ cijmineij/ ∈/ E/ ,/ vi/ =/ FP/ (/ vj/ )/ (/ LAST/ (/ vj/ )/ )/ )/ ,/ 否则/ (/ 16/ )/ 任务/ 的/ 最晚/ 允许/ 开始/ 时间/ LAST/ 定义/ 为/ 调度/ 算法/ 根据/ 以上/ 参数/ 决定/ 任务/ 执行/ 位置/ 和/ 是否/ 复制/ ./ 4.2/ 任务调度/ 算法/ 任务/ 复制/ 执行/ 能够/ 减少/ 后继/ 任务/ 的/ 等待/ 延迟/ ,/ 减少/ 调度/ 长度/ ./ 有关/ 学者/ 先后/ 提出/ 了/ 任务/ 复制/ 分配/ 算法/ TDS/ 和/ 能量/ 可/ 感知/ 的/ 调度/ 算法/ EAD/ 、/ PEBD/ ./ 4.2/ ./ 1/ 任务/ 复制/ 调度/ 算法/ TDSTDS/ 调度/ [/ 4/ ]/ 通过/ 复制/ 关键/ 路径/ 上/ 的/ 前驱/ 任务/ ,/ 避免/ 前驱/ 任务/ 的/ 数据通信/ 延迟/ ,/ 从而/ 使得/ 关键/ 路径/ 上/ 的/ 任务/ 尽早/ 开始/ ./ 在/ TDS/ 算法/ 中/ ,/ 任务/ 分组/ 过程/ 从/ 后继/ 任务/ 为空/ 的/ 任务/ (/ 假设/ 为/ vi/ )/ 开始/ ,/ 通过/ 以/ 任务/ vi/ 为根/ 节点/ 的/ 逆向/ 深度/ 优先/ 搜索/ ,/ 在/ DAG/ 图中/ 从下向上/ 找到/ 多条/ 从/ 任务/ vi/ 到/ 前驱/ 为空/ 任务/ 的/ 路径/ ./ 一条/ 路径/ 上/ 的/ 任务/ 被/ 分到/ 一个/ 任务/ 分组/ ,/ 在/ 同一个/ 处理器/ 上/ 执行/ ./ 下/ 一个/ 任务/ 分组/ 从/ 任务/ 处理/ 序列/ Q/ 中/ 第一个/ 未/ 分配/ 的/ 任务/ 开始/ ./ 如果/ 前驱/ 任务/ 的/ 复制/ ,/ 不能/ 缩短/ 调度/ 长度/ ,/ 那么/ 不/ 复制/ 该/ 前驱/ 任务/ ./ 如果/ 所有/ 任务/ 都/ 被/ 分配/ 过/ 了/ ,/ 那么/ 算法/ 终止/ ./ 如图/ 1/ (/ c/ )/ 所示/ ,/ 通过/ 在/ 处理器/ P2/ 上/ 复制/ 执行/ 任务/ v1/ ,/ 后继/ 任务/ v3/ 和/ v5/ 的/ 开始/ 执行/ 时间/ 可以/ 提前/ ,/ 从而/ 缩短/ 调度/ 长度/ ./ 4.2/ ./ 2/ 能量/ 可/ 感知/ 的/ 调度/ 算法/ EADTDS/ 算法/ 只是/ 缩短/ 了/ 调度/ 长度/ ,/ 而/ 没有/ 考虑/ 能量消耗/ 问题/ ./ 任务/ 复制/ 执行/ 会/ 增加/ CPU/ 忙碌/ 时间/ ,/ 也/ 会/ 消耗/ 更/ 多/ 能量/ ./ 为此/ ,/ EAD/ 算法/ [/ 5/ ]/ 在/ TDS/ 算法/ 中/ 增加/ 了/ 对/ 任务/ 能耗/ 的/ 判断/ ./ EAD/ 算法/ 首先/ 检查/ 关键/ 前驱/ 任务/ 的/ 复制/ 是否/ 会/ 使/ 当前任务/ 的/ 开始/ 时间/ 提前/ ./ 如果/ 能/ 提前/ ,/ 再/ 将/ 执行/ 前驱/ 任务/ 的/ 能耗/ 与/ 节省/ 的/ 网络/ 传输/ 能耗/ 之差/ (/ Δ/ E/ )/ 作为/ 参数/ ,/ 如果/ 该/ 参数/ 小于/ 或/ 等于/ 所/ 设定/ 的/ EAD/ 阈值/ ,/ 则/ 复制/ 任务/ ;/ 否则/ ,/ 不/ 复制/ 该/ 任务/ ./ EAD/ 算法/ 仅/ 复制/ 增加/ 的/ 能耗/ 不/ 大于/ EAD/ 阈值/ 的/ 任务/ ,/ 所以/ 比/ TDS/ 节省/ 能耗/ ./ 4.2/ ./ 3/ 性能/ -/ 能耗/ 平衡/ 的/ 调度/ 算法/ PEBDPEBD/ 算法/ [/ 5/ ]/ 和/ EAD/ 算法/ 类似/ ,/ 将/ 任务/ 复制/ 策略/ 和/ 能量/ 优化/ 策略/ 结合/ 在/ 一起/ ./ 不同之处/ 在于/ ,/ PEBD/ 算法/ 对/ 性能/ 和/ 节能/ 做出/ 了/ 平衡/ ,/ 将/ 执行/ 前驱/ 任务/ 的/ 能耗/ 与/ 节省/ 的/ 网络/ 传输/ 能耗/ 之差/ // 缩短/ 等待时间/ 的/ 比值/ (/ Δ/ E/ // Δ/ t/ )/ 作为/ 参数/ ./ 只有/ 该/ 参数/ 小于/ 或/ 等于/ 所/ 设定/ 的/ PEBD/ 阈值/ 时/ ,/ 才/ 复制/ 前驱/ 任务/ ./ 与/ EAD/ 相比/ ,/ PEBD/ 算法/ 不仅/ 考虑/ 复制/ 执行/ 增加/ 的/ 能耗/ ,/ 而且/ 考虑/ 复制/ 执行/ 缩短/ 的/ 时间/ ./ 因此/ ,/ PEBD/ 算法/ 更/ 合理/ ./ EAD/ 、/ PEBD/ 阈值/ 成为/ 决定/ 任务/ 是否/ 被/ 复制/ 的/ 重要/ 因素/ ./ 第/ 5.1/ 小节/ 对/ 不同/ 阈值/ 的/ 影响/ 进行/ 了/ 测试/ 和/ 分析/ ./ 4.3/ 更新/ 作业/ 调度/ 时间/ 任务调度/ 算法/ 执行/ 后/ ,/ 需要/ 更新/ 每个/ 处理器/ 上/ 所有/ 作业/ 的/ 调度/ 时间/ ,/ 为/ 执行/ 处理器/ 合并/ 优化/ 算法/ 做/ 准备/ ./ 为此/ ,/ 调度/ 时间/ 更新/ 函数/ 从上向下/ 广度/ 优先/ 遍历/ DAG/ 图/ ,/ 依次/ 对/ 每/ 一个/ 任务/ 进行/ 处理/ ,/ 计算/ 任务/ 所有/ 作业/ 的/ 开始/ 时间/ 和/ 完成/ 时间/ ./ 如果/ 任务/ vi/ 是/ DAG/ 图中根/ 节点/ 任务/ ,/ 则/ 设定/ vi/ 所有/ 作业/ 的/ 开始/ 时间/ 为/ 0/ ./ 否则/ ,/ 一个/ 作业/ wij/ 的/ 最早/ 开始/ 时间/ 等于/ vi/ 所有/ 前驱/ 任务/ 的/ 到达/ 时间/ (/ 完成/ 时间/ +/ 传输/ 时间/ )/ 和/ 处理器/ j/ 中/ wij/ 前面/ 邻接/ 作业/ 的/ 完成/ 时间/ 的/ 最大值/ ./ 图/ 2/ 给出/ 了/ 调度/ 时间/ 更新/ 函数/ ,/ 其中/ vk/ 为/ 任务/ vi/ 的/ 一个/ 前驱/ 任务/ ,/ startTime/ 保存/ 作业/ 最早/ 开始/ 时间/ 的/ 中间/ 过程/ 值/ ./ Page6/ 算法/ 1/ ./ UpdateTaskScheduleTime/ (/ vi/ )/ ./ 输入/ :/ 任务/ vi/ 输出/ :/ vi/ 所有/ 作业/ 的/ EST/ 和/ ECT1/ ./ forwij/ ∈/ vi/ 的/ 作业/ 集合/ 2/ ./ ifvi/ 是/ DAG/ 图中/ 没有/ 前驱/ 的/ 任务/ then3/ ./ EST/ (/ wij/ )/ =/ 04/ ./ elsethen5/ ./ startTime/ =/ -/ 1/ // // 设置/ 开始/ 时间/ 的/ 下/ 边界值/ 6/ ./ forvk/ ∈/ vi/ 的/ 前驱/ 任务/ 集合/ Ω/ i7/ ./ ifvk/ 的/ 作业/ wkj/ 在/ 处理器/ j/ 上/ 执行/ then8/ ./ preECT/ =/ ECT/ (/ wkj/ )/ 9/ ./ elsethen/ // // 如果/ 不/ 在/ 一个/ 处理器/ 上/ 10/ ./ temp1/ =/ +/ // // 前驱/ 任务/ 完成/ 时间/ 的/ 上界/ 11/ ./ forPl/ ∈/ vk/ 的/ 作业/ 所在/ 处理器/ 集合/ 12/ ./ ifECT/ (/ wkl/ )/ 还/ 没有/ 获得/ then13/ ./ UpdateTaskScheduleTime/ (/ vk/ )/ // // 递归计算/ 14/ ./ temp2/ =/ ECT/ (/ wkl/ )/ +/ cki15/ ./ iftemp2/ </ =/ temp1then16/ ./ temp1/ =/ temp2/ // // vk/ 结果/ 的/ 最早/ 到达/ 时间/ 17/ ./ preECT/ =/ temp118/ ./ ifpreECT/ >/ startTimethen19/ ./ startTime/ =/ preECT/ // // 前驱/ 任务/ 最/ 晚/ 到达/ 时间/ 20/ ./ ifwij/ 不是/ 处理器/ Pj/ 上/ 第/ 1/ 个/ 作业/ then21/ ./ z/ =/ 处理器/ Pj/ 作业/ 队列/ 中排/ 在/ wij/ 前面/ 的/ 作业/ 22/ ./ ifECT/ (/ z/ )/ 还/ 没有/ 获得/ then23/ ./ UpdateTaskScheduleTime/ (/ z/ )/ 24/ ./ ifECT/ (/ z/ )/ >/ startTimethen25/ ./ startTime/ =/ ECT/ (/ z/ )/ 26/ ./ EST/ (/ wij/ )/ =/ startTime27/ ./ ECT/ (/ wij/ )/ =/ startTime/ +/ ti4/ ./ 4/ 处理器/ 合并/ 优化/ 方法/ 与/ TDS/ 算法/ 相比/ ,/ EAD/ 和/ PEBD/ 算法/ 避免/ 了/ 低/ 能效/ 的/ 任务/ 复制/ ,/ 减少/ 了/ 任务/ 复制/ 次数/ ,/ 节约/ 了/ 系统/ 总/ 能耗/ ./ 但是/ 这/ 3/ 种/ 算法/ 对于/ 分配任务/ 数较/ 少/ 的/ 处理器/ 都/ 没有/ 做/ 合并/ 处理/ ./ 如果/ 一个/ 任务/ 集/ DAG/ 图/ 的/ 并行/ 分支/ 比较/ 多/ ,/ 那么/ 许多/ 处理器/ 上/ 分配/ 的/ 任务/ 数会/ 很少/ ,/ 处理器/ 利用率/ 不高/ ,/ 造成/ 处理器/ 资源/ 的/ 浪费/ ./ 为此/ ,/ 在/ 上述/ 任务调度/ 算法/ 的/ 基础/ 上/ ,/ 笔者/ 提出/ 一种/ 处理器/ 合并/ 优化/ PRO/ 方法/ ,/ 在/ 维持/ 依赖/ 关系/ 和/ 作业/ 调度/ 时间/ 的/ 前提/ 下/ ,/ 对/ 作业/ 的/ 执行/ 位置/ 进行/ 调整/ ,/ 把/ 处理器/ 上/ 的/ 任务/ 作业/ 尽可能/ 集中/ 到/ 少量/ 处理器/ 上/ ,/ 提高/ CPU/ 利用率/ ,/ 减少/ 使用/ 的/ 处理器/ 数目/ ./ PRO/ 方法/ 的/ 主要/ 思路/ 是/ 使用/ 更新/ 后/ 的/ EST/ 和/ ECT/ 作为/ 参数/ ,/ 将/ 负载/ 轻/ 的/ 处理器/ 上/ 的/ 作业/ (/ 假设/ 为/ wij/ )/ 合并/ 到/ 在/ [/ EST/ (/ wij/ )/ ,/ ECT/ (/ wij/ )/ ]/ 时间/ 范围/ 内/ 空闲/ 的/ 其它/ 处理器/ 上/ ,/ 减少/ 使用/ 的/ 处理器/ 数目/ ,/ 从而/ 降低/ 系统/ 总/ 能耗/ ./ PRO/ 方法/ 与/ TDS/ 、/ EAD/ 、/ PEBD/ 调度/ 算法/ 相结合/ ,/ 可以/ 生成/ 3/ 种/ 优化/ 的/ 调度/ 算法/ TDS/ -/ PRO/ 、/ EAD/ -/ PRO/ 和/ PEBD/ -/ PRO/ ./ 如图/ 1/ (/ d/ )/ 所示/ ,/ TDS/ -/ PRO/ 算法/ 将/ 任务/ v2/ 合并/ 到/ 处理器/ P2/ 上/ ,/ 释放/ 了/ 处理器/ P3/ ,/ 减少/ 了/ 处理器/ 个数/ ./ PRO/ 方法/ 的/ 具体/ 过程/ 如下/ :/ 首先/ ,/ 将/ 处理器/ 按照/ 分配任务/ 数量/ 由/ 多/ 到/ 少/ 排序/ ./ 然后/ ,/ 尝试/ 将/ 任务/ 数/ 最少/ 的/ 处理器/ (/ 假设/ 为/ Pi/ )/ 上/ 的/ 任务/ 插入/ 到/ 任务/ 数较/ 多/ 的/ 处理器/ 上/ ./ 如果/ 这些/ 处理器/ 上/ 没有/ 一个/ 合适/ 的/ 时间/ 空隙/ 接纳/ 该/ 任务/ ,/ 那么/ 停止/ Pi/ 上/ 剩余/ 任务/ 的/ 合并/ ,/ 开始/ 尝试/ 合并/ 下/ 一个/ 处理器/ Pi/ -/ 1/ 上/ 的/ 任务/ ./ 如果/ 除了/ 接收/ 合并/ 任务/ 的/ 处理器/ 和/ 无法/ 被/ 合并/ 的/ 处理器/ 之外/ ,/ 没有/ 其它/ 处理器/ ,/ 那么/ 算法/ 结束/ ./ 如果/ 某个/ 处理器/ 上/ 的/ 任务/ 都/ 移动/ 到/ 其它/ 处理器/ 上/ ,/ 那么/ 该/ 处理器/ 节点/ 就/ 可以/ 被/ 释放/ ,/ 不再/ 使用/ ./ 图/ 3/ 给出/ 了/ 处理器/ 合并/ 算法/ 的/ 伪/ 代码/ ,/ 其中/ |/ Pi/ |/ 为/ 处理器/ Pi/ 上/ 的/ 作业/ 数/ ./ 算法/ 2/ ./ ProcessorReductionOptimizing/ ./ 输入/ :/ (/ 1/ )/ 初步/ 调度/ 分配/ 方案/ ;/ (/ 2/ )/ 更新/ 后/ 的/ 任务调度/ 时间/ 参数/ 输出/ :/ 优化/ 后/ 的/ 调度/ 方案/ 1/ ./ 按照/ 作业/ 数量/ 递减/ 顺序/ 生成/ 处理器/ 序列/ {/ P1/ ,/ P2/ ,/ …/ ,/ Pm/ }/ 2/ ./ fori/ ←/ mto2/ // // 先/ 优化/ 作业/ 少/ 的/ 处理器/ 3/ ./ ifPi/ 接收/ 过/ 插入/ 作业/ then4/ ./ continue/ // // 接收/ 过/ 插入/ 作业/ 的/ 处理器/ 无法/ 被/ 合并/ 5/ ./ fork/ ←/ |/ Pi/ |/ to1/ // // 先/ 处理/ 队列/ 尾部/ 的/ 作业/ 6/ ./ w/ =/ Pi/ 上/ 第/ k/ 个/ 作业/ 7/ ./ bTag/ =/ false8/ ./ forj/ ←/ 1toi/ -/ 1/ // // 先/ 从/ 作业/ 多/ 的/ 处理器/ 上/ 查找/ 空隙/ 9/ ./ ifTryMoveJob/ (/ w/ ,/ Pj/ ,/ Pi/ )/ then10/ ./ bTag/ =/ true11/ ./ break12/ ./ ifbTag/ =/ falsethen13/ ./ break/ // // 遇到/ 无法/ 插入/ 的/ 作业/ ,/ 停止/ 优化/ Pi/ 在/ 图/ 3/ 中/ ,/ 作业/ 优化/ 检查/ 函数/ (/ TryMoveJob/ )/ 是/ 一个/ 重要/ 的/ 函数/ ,/ 该/ 函数/ 检查/ 是否/ 能/ 将/ 处理器/ Pi/ 上/ 的/ 作业/ w/ 插入/ 到/ 处理器/ Pj/ 的/ 空隙/ 时间/ 中/ ./ 在/ 进行/ 尝试/ 插入/ 之前/ ,/ 首先/ 判断/ w/ 是否/ 在/ 其它/ 处理器/ 上/ 有/ 复制/ 执行/ ./ 如果/ 有/ 复制/ 执行/ ,/ 则/ w/ 已经/ 没有/ 执行/ 的/ 意义/ ,/ 将/ w/ 直接/ 从/ 处理器/ Pi/ 上/ 删除/ ,/ 并且/ 返回/ true/ ./ 如果/ w/ 没有/ 复制/ 执行/ ,/ 判断/ 如果/ 将/ w/ 插入/ 到/ 处理器/ Pj/ ,/ 作业/ w/ 的/ 前驱/ 是否/ 会/ 延迟/ w/ 的/ 开始/ 时间/ ./ 如果/ 存在/ 延迟/ ,/ 则/ 返回/ false/ ./ 因为/ 延迟/ w/ 的/ 开始/ 时间/ ,/ 可能/ 会/ 增加/ 调度/ 长度/ ./ 否则/ ,/ 查找/ 处理器/ Pj/ 上/ 是否/ 有/ 合适/ 空隙/ (/ slot/ )/ 容纳/ w/ ./ 作业/ 优化/ 检查/ 函数/ 的/ 伪/ 代码/ 如图/ 4/ 所示/ ,/ 其中/ STslot/ 为/ 待/ 检查/ 空隙/ 的/ 开始/ 时间/ ,/ ETslot/ 为/ 空隙/ 的/ 结束/ 时间/ ,/ 判断/ 作业/ w/ 是否/ 能够/ 插入/ 到/ [/ STslot/ ,/ ETslot/ ]/ 空隙/ 中/ ./ 4.5/ 时间/ 复杂度/ 分析/ 定理/ 1/ ./ 给定/ 一个/ 受/ 依赖/ 关系/ 约束/ 的/ 并行任务/ 集/ ,/ 优化/ 调度/ 算法/ 的/ 时间/ 复杂度/ 为/ O/ (/ h2n2/ )/ ,/ n/ 是/ 任务/ 数/ ,/ h/ 是/ DAG/ 图/ 的/ 高度/ ./ Page7/ 算法/ 3/ ./ TryMoveJob/ (/ w/ ,/ Pto/ ,/ Pfrom/ )/ ./ 输入/ :/ (/ 1/ )/ 待/ 插入/ 的/ 作业/ w/ ;/ (/ 2/ )/ 待/ 插入/ 处理器/ Pto/ 输出/ :/ 如果/ 能/ 插入/ 则/ 返回/ true/ ;/ 否则/ ,/ 返回/ false1/ ./ ifw/ 已经/ 被/ 其它/ 节点/ 执行/ then2/ ./ 从/ 处理器/ Pfrom/ 上/ 删除/ w3/ ./ returntrue4/ ./ forpreTask/ ∈/ w/ 的/ 前驱/ 任务/ 集合/ 5/ ./ ifPto/ 上/ 没有/ preTask/ 的/ 作业/ then6/ ./ ifPfrom/ 上/ 有/ preTask/ 的/ 作业/ then7/ ./ returnfalse/ // // 如果/ w/ 被/ 推迟/ 执行/ ,/ 则/ 不/ 移动/ 8/ ./ fori/ ←/ 0to/ |/ Pto/ |/ 9/ ./ ifi/ =/ 0then/ // // 待/ 检查/ slot/ 在/ 作业/ 队列/ 开头/ 10/ ./ STslot/ =/ 0/ // // slot/ 开始/ 时间/ 11/ ./ ETslot/ =/ EST/ (/ Pto/ 上/ 第/ 1/ 个/ 作业/ )/ 12/ ./ elseifi/ =/ |/ Pto/ |/ then/ // // slot/ 在/ 作业/ 队列/ 结尾/ 13/ ./ STslot/ =/ ECT/ (/ Pto/ 上/ 最后/ 一个/ 作业/ )/ 14/ ./ ETslot/ =/ Lmax/ // // 处理器/ 调度/ 长度/ 15/ ./ else16/ ./ STslot/ =/ ECT/ (/ Pto/ 上/ 第/ i/ 个/ 作业/ )/ 17/ ./ ETslot/ =/ EST/ (/ Pto/ 上/ 第/ i/ +/ 1/ 个/ 作业/ )/ 18/ ./ ifSTslot/ / EST/ (/ w/ )/ andECT/ (/ w/ )/ / ETslot/ )/ then19/ ./ 从/ 处理器/ Pfrom/ 上/ 删除/ w20/ ./ 移动/ 作业/ w/ 到/ 处理器/ Pto/ 上/ 21/ ./ returntrue22/ ./ elsereturnfalse/ 证明/ ./ 优化/ 的/ 节能/ 调度/ 算法/ 执行/ 了/ 4.1/ ~/ 4.4/ 节中/ 4/ 个/ 阶段/ 的/ 操作/ ./ (/ 1/ )/ 在/ 计算/ 任务调度/ 参数/ 过程/ 中/ ,/ 首先/ 遍历/ DAG/ 图中/ 所有/ 任务/ ,/ 计算/ 任务/ 的/ level/ ,/ 复杂度/ 为/ O/ (/ e/ +/ n/ )/ ,/ 其中/ e/ 是/ DAG/ 图中/ 有/ 向/ 边数/ ./ 将/ 任务/ 的/ level/ 按非/ 递增/ 的/ 顺序/ 进行/ 快速/ 排序/ 的/ 时间/ 复杂度/ 为/ O/ (/ nlgn/ )/ ./ 然后/ ,/ 遍历/ 任务/ 计算/ EST/ 、/ ECT/ 、/ FP/ 、/ LACT/ 和/ LAST/ 参数/ ,/ 复杂度/ 为/ O/ (/ e/ +/ n/ )/ ./ 因此/ ,/ 第一阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ e/ +/ nlgn/ )/ ./ (/ 2/ )/ 在/ 任务调度/ 算法/ 中/ ,/ 根据/ 复制/ 策略/ 将/ 任务分配/ 到/ 一个/ 或/ 多个/ 节点/ 上/ 执行/ ./ 最坏/ 的/ 情况/ 下/ ,/ 关键/ 路径/ 上/ 所有/ 任务/ 都/ 被/ 复制/ 执行/ ,/ 时间/ 复杂度/ 为/ O/ (/ hn/ )/ ./ (/ 3/ )/ 更新/ 作业/ 调度/ 时间/ 函数/ 采用/ 广度/ 优先/ 顺序/ 遍历/ 所有/ 任务/ ,/ 调用/ UpdateTaskScheduleTime/ 函数/ ./ 最坏/ 情况/ 下/ ,/ UpdateTaskScheduleTime/ 函数/ 内部/ 访问/ 所有/ 作业/ 一次/ ,/ 函数/ 时间/ 复杂度/ 为/ O/ (/ hn/ )/ ./ 因此/ ,/ 这一/ 阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ hn/ (/ e/ +/ n/ )/ )/ ./ (/ 4/ )/ 在/ 处理器/ 合并/ 优化/ 过程/ ,/ 先/ 将/ 处理器/ 按/ 作业/ 数/ 递减/ 进行/ 快速/ 排序/ ,/ 复杂度/ 为/ O/ (/ nlgn/ )/ ;/ 然后/ 将/ 任务/ 数少/ 的/ 处理器/ 上/ 的/ 作业/ 尝试/ 插入/ 到/ 任务/ 多/ 的/ 处理器/ 上/ ./ 最坏/ 的/ 情况/ 下/ ,/ TryMoveJob/ 函数/ 内部/ 需要/ 比较/ Pto/ 处理器/ 上/ 所有/ 空隙/ ,/ 其/ 时间/ 复杂度/ 为/ O/ (/ hn/ )/ ;/ TryMoveJob/ 函数/ 最多/ 被/ 调用/ hn/ 次/ ./ 因此/ ,/ 此/ 阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ h2n2/ )/ ./ 综合/ 考虑/ 以上/ 分析/ ,/ 由于/ e/ </ hn/ ,/ 节能/ 调度/ 算法/ 的/ 总/ 时间/ 复杂度/ 为/ O/ (/ h2n2/ )/ ./ 5/ 实验/ 评估/ 为了/ 比较/ 不同/ 算法/ 的/ 性能/ ,/ 笔者/ 开发/ 了/ 一个/ 模拟/ 调度/ 程序/ ./ 该/ 程序/ 可以/ 模拟/ 并行任务/ 的/ 分配/ 和/ 调度/ 过程/ ,/ 并/ 能/ 通过/ DAG/ 图/ 和/ Gantt/ 图/ 形象化/ 显示/ 任务/ 之间/ 的/ 依赖/ 关系/ 和/ 各/ 处理器/ 上/ 任务/ 执行/ 过程/ ./ 模拟程序/ 实现/ 了/ 本文/ 提到/ 的/ 6/ 个/ 算法/ TDS/ 、/ TDS/ -/ PRO/ 、/ EAD/ 、/ EAD/ -/ PRO/ 、/ PEBD/ 和/ PEBD/ -/ PRO/ ,/ 并/ 统计/ 调度/ 长度/ 、/ 处理器/ 使用/ 个数/ 和/ 系统/ 总/ 能耗/ 开销/ 3/ 个/ 评价/ 指标/ ./ 不同/ 算法/ 的/ 性能/ 会/ 受到/ 应用程序/ 规模/ 的/ 影响/ ./ 在/ 实验/ 中/ ,/ 测试/ 任务/ 集/ 选用/ 两个/ 真实/ 的/ 并行/ 应用/ —/ —/ —/ 机器人/ 控制/ (/ Robot/ )/ 和/ FPPPP/ 应用/ ①/ ./ Robot/ 和/ FPPPP/ 任务/ 数/ 分别/ 为/ 88/ 和/ 334/ ,/ 其它/ 参数/ 如表/ 2/ 所示/ ./ Robot/ 任务/ 集/ 平均/ 出度/ 小/ ,/ 属于/ 计算/ 密集型/ ;/ FPPPP/ 任务/ 集/ 平均/ 出度/ 大/ ,/ 属于/ 通信/ 密集型/ [/ 5/ ]/ ,/ 任务/ 集/ 任务/ 数目/ 平均/ 执行/ 时间/ // s/ 平均/ 出度/ Robot88FPPPP334/ 依赖/ 任务/ 之间/ 的/ 数据传输/ 时间/ 通过/ 通信/ -/ 计算/ 时间/ 比/ CCR/ (/ Communication/ -/ ComputationRatio/ )/ 和/ 网络/ 消息/ 延迟/ 系数/ K/ 计算出来/ ./ 数据传输/ 时间/ =/ K/ ×/ CCR/ ×/ 前驱/ 任务/ 执行/ 时间/ ./ 网络/ 消息/ 延迟/ 系数/ K/ 是/ 以/ Myrinet/ ②/ 网络/ 消息/ 延迟时间/ 为/ 基准/ 的/ 比例/ 系数/ ./ 实验/ 任务/ 集合/ 处理器/ 型号/ 网络/ EAD/ 编号/ 1Robot/ // FPPPPAMD85WEthernet0/ ~/ 20000/ ~/ 5000.12/ Robot4/ 种/ 处理器/ ③/ Ethernet200800/ ./ 13Robot/ // FPPPPAMD35WEthernet200/ // 150080/ // 1500.14/ RobotAMD35WEthernet200800/ ./ 1/ ~/ 25RobotAMD35W4/ 种/ 网络/ ④/ 200800.1/ 实验/ 分为/ 5/ 组/ ,/ 分别/ 对/ 不同/ 的/ 算法/ 阈值/ 、/ 处理器/ 类型/ 、/ 任务/ 集合/ 、/ CCR/ 参数/ 和/ 网络/ 类型/ 进行/ 测试/ ./ 表/ 3/ 列出/ 了/ 具体/ 的/ 实验/ 参数/ ./ ①/ ②/ ③/ ④/ Page85/ ./ 1/ 实验/ 1/ :/ 不同/ 算法/ 阈值/ 的/ 影响/ EAD/ 、/ PEBD/ 阈值/ 增大/ 意味着/ 任务/ 复制/ 执行/ 可能性/ 增加/ ./ 本/ 实验/ 通过/ 不同/ 阈值/ 对/ 算法/ 的/ 影响/ 进行/ 分析/ 比较/ ,/ 得到/ 后续/ 实验/ 中/ 使用/ 的/ 阈值/ ./ 首先/ ,/ 测试/ EAD/ 阈值/ (/ EAD/ -/ Th/ )/ 变化/ 对/ EAD/ 和/ EAD/ -/ PRO/ 算法/ 的/ 影响/ ./ 从图/ 5/ (/ a/ )/ 可以/ 看出/ ,/ 在/ Robot/ 任务/ 集上/ ,/ 当/ 阈值/ 增加/ 到/ 500/ 时/ ,/ 两个/ 算法/ 的/ 调度/ 长度/ 都/ 略微/ 减少/ ,/ 这/ 说明/ 此时/ ,/ 复制/ 关键/ 路径/ 上/ 前驱/ 任务/ 可以/ 在/ 一定/ 范围/ 内/ 缩短/ 调度/ 长度/ ./ 与/ EAD/ 相比/ ,/ EAD/ -/ PRO/ 的/ 调度/ 长度/ 较少/ ./ 这/ 说明/ 通过/ 路径/ 合并/ ,/ 关键/ 路径/ 上/ 有些/ 任务/ 等待时间/ 减少/ ,/ 从而/ 使得/ 整体/ 调度/ 长度/ 缩短/ ./ 图/ 5Robot/ 任务/ 集上/ EAD/ 阈值/ 对/ 算法/ 的/ 影响/ 从图/ 5/ (/ b/ )/ 、/ 图/ 6/ (/ b/ )/ 可以/ 看出/ ,/ 随着/ EAD/ 阈值/ 的/ 增大/ ,/ 系统/ 的/ 总/ 能耗/ 增加/ ./ 同时/ 可以/ 看到/ EAD/ -/ PRO/ 的/ 总/ 能耗/ 小于/ EAD/ 的/ 总/ 能耗/ ,/ 这/ 是因为/ EAD/ -/ PRO/ 算法/ 将/ 负载/ 轻/ 的/ 处理器/ 上/ 的/ 任务/ 合并/ 到/ 其它/ 处理器/ 上/ ,/ 减少/ 了/ 使用/ 的/ 处理器/ 数目/ ,/ 从而/ 减少/ 了/ 系统/ 总/ 能耗/ ./ 图/ 6/ (/ a/ )/ 表明/ ,/ FPPPP/ 任务/ 集/ 的/ 调度/ 长度/ 开始/ 不变/ ,/ 在/ EAD/ 阈值/ 等于/ 500/ 时/ 增加/ ./ 这/ 是因为/ 关键/ 任务/ 被/ 复制/ ,/ 复制/ 的/ 任务/ 虽然/ 缩短/ 了/ 其/ 后继/ 任务/ 的/ 开始/ 时间/ ,/ 然而/ 其/ 复制/ 之后/ 推迟/ 了/ 关键/ 路径/ 上/ 其它/ 任务/ 的/ 开始/ ,/ 从而/ 使/ 的/ 整个/ 任务/ 集/ 的/ 完成/ 时间/ 延长/ ./ 在/ EAD/ 阈值/ 增加/ 到/ 1400/ 时/ ,/ 更/ 多/ 的/ 复制/ 任务/ 使得/ 关键/ 路径/ 上/ 的/ 某些/ 任务/ 开始/ 时间/ 提前/ ,/ 从而/ 缩短/ 了/ 调度/ 长度/ ./ EAD/ 和/ EAD/ -/ PRO/ 的/ 调度/ 长度/ 相等/ ,/ 这/ 是因为/ EAD/ -/ PRO/ 算法/ 在/ 选择/ 任务/ 合并/ 到/ 别的/ 处理器/ 上时/ ,/ 如果/ 合并/ 会/ 延长/ 其/ 后继/ 任务/ 的/ 开始/ 时间/ ,/ 则/ 放弃/ 此/ 任务/ 的/ 复制/ ,/ 所以/ 合并/ 后/ 的/ 执行/ 时间/ 不会/ 晚于/ 原来/ 的/ 执行/ 时间/ ./ 后面/ 的/ 实验/ 也/ 能/ 明显/ 体现/ 出/ 改进/ 算法/ 的/ 这/ 一/ 优点/ ./ 图/ 6FPPPP/ 任务/ 集上/ EAD/ 阈值/ 对/ 算法/ 的/ 影响/ 综合/ 图/ 5/ 和/ 图/ 6/ 的/ 数据/ ,/ 可以/ 看出/ EAD/ 阈值/ 在/ 不同/ 任务/ 集上/ 影响/ 不/ 一样/ ./ 在/ 图/ 5/ (/ b/ )/ 中/ ,/ 当/ EAD/ 阈值/ 等于/ 200/ 时/ ,/ 总/ 的/ 能量/ 开销/ 处于/ 平均水平/ ,/ 因此/ 选择/ 200/ 作为/ Robot/ 任务/ 集上/ 后续/ 实验/ 的/ EAD/ 阈值/ ./ 在/ 图/ 6/ (/ b/ )/ 中/ ,/ EAD/ 阈值/ 在/ 1500/ 附近/ ,/ 能量消耗/ 处于/ 平均水平/ ,/ 所以/ 选择/ 1500/ 作为/ EAD/ 算法/ 在/ FPPPP/ 任务/ 集上/ 的/ 阈值/ ./ 由图/ 7/ (/ a/ )/ 可以/ 看出/ ,/ 当/ PEBD/ -/ Th/ 由/ 50/ 逐渐/ 增加/ 到/ 200/ 时/ ,/ Robot/ 任务/ 集/ 的/ 调度/ 长度/ 明显/ 减少/ ./ 这/ 说明/ 前驱/ 任务/ 复制/ 可以/ 使/ 关键/ 路径/ 上/ 任务/ 的/ 开始/ 时间/ 提前/ ,/ 从而/ 缩短/ 了/ 调度/ 长度/ ./ 然而/ 在/ 图/ 8/ (/ a/ )/ 中/ ,/ FPPPP/ 任务/ 集上/ 调度/ 长度/ 减少/ 不大/ ./ 在/ 图/ 7/ (/ b/ )/ 中/ ,/ 阈值/ 由/ 150/ ~/ 200/ 变化/ 时/ ,/ PEBD/ 算法/ 能耗/ 出现/ 了/ 略微/ 减少/ ,/ 这是/ 由于/ 某些/ 任务/ 复制/ 执行/ 减少/ 的/ 网络/ 传输/ 能耗/ 大于/ 复制/ 执行/ 增加/ 的/ 能耗/ ./ 图/ 7/ (/ b/ )/ 、/ 图/ 8/ (/ b/ )/ 整体/ 来看/ ,/ 随着/ 阈值/ 的/ 增大/ ,/ PEBD/ -/ PRO/ 算法/ 总体/ 能耗/ 逐渐/ 增加/ ./ 与/ PEBD/ 相比/ ,/ PEBD/ -/ PRO/ 算法/ 的/ 节能/ 效果显著/ ,/ 大约/ 减少/ 10/ %/ ~/ 40/ %/ ./ 在/ 后续/ 实验/ 中/ ,/ PEBD/ 阈值/ 在/ Robot/ 和/ FPPPP/ 任务/ 集上/ 分别/ 设为/ 80/ 和/ 150/ ,/ 使得/ 两个/ 算法/ 的/ 总/ 能量消耗/ 都/ 处于/ 各自/ 的/ 平均水平/ ./ Page9/ 图/ 7Robot/ 任务/ 集上/ PEBD/ 阈值/ 对/ 算法/ 的/ 影响/ 图/ 8FPPPP/ 任务/ 集上/ PEBD/ 阈值/ 对/ 算法/ 的/ 影响/ 5.2/ 实验/ 2/ :/ 不同/ 处理器/ 功率/ 的/ 影响/ 本/ 实验/ 采用/ 表/ 4/ 中/ 给出/ 的/ 4/ 种/ 不同/ 处理器/ ①/ 运行/ 功率/ 和/ 空闲/ 功率/ 对/ 算法/ 进行/ 测试/ ./ 实验/ 采用/ Robot/ 任务/ 集/ ./ AMDAthlon4600/ +/ 85W104AMDAthlon4600/ +/ 65W75AMDAthlon4600/ +/ 35W47IntelCore2DuoE6300/ 由图/ 9/ 看出/ ,/ TDS/ -/ PRO/ 、/ EAD/ -/ PRO/ 和/ PEBD/ -/ PRO/ 算法/ 的/ CPU/ 总/ 能耗/ 均/ 比/ 相应/ 的/ 基准/ 算法/ 少/ ./ 在/ 4/ 种/ 处理器/ 功率/ 情况/ 下/ ,/ TDS/ -/ PRO/ 相对/ 于/ TDS/ 算法/ 分别/ 节能/ 15/ %/ 、/ 16.5/ %/ 、/ 18/ %/ 和/ 24/ %/ ;/ EAD/ -/ PRO/ 相对/ 于/ EAD/ 算法/ 的/ 节能/ 为/ 12/ %/ 、/ 13/ %/ 、/ 6/ %/ 和/ 7/ %/ ;/ PEBD/ -/ PRO/ 相对/ 于/ PEBD/ 算法/ 节能/ 28/ %/ 、/ 20/ %/ 、/ 17/ %/ 和/ 22/ %/ ./ 5.3/ 实验/ 3/ :/ 不同/ 任务/ 类型/ 的/ 影响/ 实验/ 3/ 使用/ Robot/ 和/ FPPPP/ 两个/ 任务/ 集对/ 算法/ 进行/ 测试/ ,/ 实验/ 结果/ 如图/ 10/ 所示/ ./ 图/ 10/ (/ a/ )/ 显示/ 了/ 各/ 算法/ 的/ 调度/ 长度/ ./ PRO/ 方法/ 要求/ 任务/ 重新分配/ 时/ 不能/ 延长/ 后继/ 任务/ 的/ 开始/ 时间/ ,/ 所以/ 新/ 算法/ 的/ 调度/ 长度/ 等于/ 或略/ 小于/ 原/ 算法/ ./ 如图/ 10/ (/ b/ )/ 所示/ ,/ 改进/ 算法/ 在/ FPPPP/ 任务/ 集上/ 明显/ 减少/ 了/ 处理器/ 数目/ ./ TDS/ -/ PRO/ 、/ EAD/ -/ PRO/ 和/ PEBD/ -/ PRO/ 算法/ 在/ FPPPP/ 任务/ 集上/ 节约/ 处理器/ 数/ 分别/ 为/ 51/ %/ 、/ 52/ %/ 和/ 40/ %/ ,/ 而/ 在/ Robot/ 任务/ 集上/ 节约/ 处理器/ 数/ 分别/ 为/ 27/ %/ 、/ 5.4/ %/ 和/ 24/ %/ ./ 这/ 说明/ ,/ 路径/ 分支/ 较/ 多/ 的/ 任务/ 集/ (/ 如/ FPPPP/ )/ 占用/ 处理器/ 较/ 多/ ,/ 处理器/ 平均/ 利用率/ 较/ 低/ ,/ 任务/ 合并/ 的/ 机会/ 也/ 就/ 越/ 多/ ./ 由于/ 任务/ 数/ 和/ 平均/ 出/ 度/ 不同/ ,/ 在/ 不同/ 任务/ 规模/ 下/ ,/ 系统/ 的/ 总/ 能量/ 开销/ 存在/ 着/ 很大/ 的/ 差别/ ./ 从图/ 10/ (/ c/ )/ 可以/ 看出/ FPPPP/ 任务/ 集/ 的/ 能耗/ 开销/ 远大于/ Robot/ 的/ 开销/ ./ TDS/ -/ PRO/ 、/ EAD/ -/ PRO/ 、/ PEBD/ -/ PRO/ 在/ FPPPP/ 上/ 的/ 节能/ 效率/ 分别/ 为/ 33/ %/ 、/ 35/ %/ 、/ 27/ %/ ,/ 在/ Robot/ 上/ 的/ 节能/ 效率/ 分别/ 为/ 14/ %/ 、/ 5/ %/ 、/ 13/ %/ ./ 这/ 验证/ 了/ ,/ PRO/ 方法/ 在/ 分支/ 多/ 的/ 通信/ 密集型/ 任务/ 集上/ 不仅/ 能够/ 更/ 多/ 的/ 减少/ 处理器/ 数目/ ,/ 而且/ 具有/ 更好/ 的/ 节能/ 效果/ ./ 5.4/ 实验/ 4/ :/ 不同/ 通信/ -/ 计算/ 比/ (/ 犆/ 犆/ 犚/ )/ 的/ 影响/ 这组/ 实验/ 比较/ 了/ 不同/ CCR/ 取值/ 对/ 算法/ 的/ 影响/ ./ 实验/ 中/ ,/ CCR/ 从/ 0.1/ ~/ 2/ 变化/ ,/ 间隔/ 0.1/ ./ 从图/ 11/ (/ a/ )/ 可以/ 看出/ ,/ 当/ CCR/ 从/ 0.4/ 到/ 2/ 逐渐/ 变化/ 时/ ,/ 各/ 算法/ 的/ 调度/ 长度/ 不断/ 增加/ ,/ 这是/ 由于/ 在/ 任/ ①/ http/ :/ // // www/ ./ xbitlabs/ ./ com/ // articles/ // cpu/ // display/ // amd/ -/ energy/ -/ Page10/ 务/ 执行/ 时间/ 不变/ 的/ 情况/ 下/ ,/ CCR/ 增加/ 引起/ 网络/ 延迟/ 增大/ ,/ 调度/ 长度/ 也/ 会/ 增加/ ./ 与此同时/ ,/ 传输/ 能耗/ 增大/ ,/ 总/ 能耗/ 也/ 相应/ 增加/ ./ CCR/ 的/ 变化/ 影响/ 到/ 网络/ 传输/ 延迟/ ,/ CCR/ 在/ 0/ ~/ 0.3/ 范围/ 内/ 变化/ 时/ ,/ TDS/ 、/ EAD/ 、/ PEBD/ 算法/ 使用/ 的/ CPU/ 个数/ 略微/ 减少/ ,/ 而/ 3/ 个/ 改进/ 算法/ 使用/ 的/ CPU/ 个数/ 变化/ 比较/ 大/ ./ 这/ 说明/ CCR/ 参数/ 不仅/ 影响/ 处理器/ 间/ 的/ 网络通信/ 时间/ ,/ 而且/ 影响/ 改进/ 算法/ 的/ 合并/ 效果/ ./ 当/ CCR/ 在/ [/ 0/ ,/ 1/ ]/ 范围/ 内/ 变化/ 时/ ,/ 改进/ 算法/ 受/ CCR/ 参数/ 的/ 影响/ 比较/ 大/ ./ 由图/ 11/ (/ c/ )/ 可/ 得/ ,/ 随着/ CCR/ 的/ 增加/ ,/ 各个/ 算法/ 的/ 系统/ 总/ 能耗/ 不断/ 增加/ ./ 改进/ 算法/ 的/ 能耗/ 比/ 相应/ 的/ 基准/ 算法/ 的/ 能耗/ 略少/ ./ 5.5/ 实验/ 5/ :/ 不同/ 网络/ 的/ 影响/ 不同/ 类型/ 的/ 网络/ 具有/ 不同/ 的/ 设备/ 功率/ 和/ 网络/ 延迟/ ./ 与/ 文献/ [/ 5/ ]/ 类似/ ,/ 本/ 实验/ 中/ 采用/ 千兆/ 以太网/ 、/ Infiniband/ ①/ 、/ QsNet/ [/ 21/ ]/ 和/ Myrinet4/ 种/ 不同/ 类型/ 网络/ ,/ 测试/ 网络设备/ 参数/ 对/ 算法/ 性能/ 的/ 影响/ ./ 表/ 5/ 给出/ 了/ 这/ 4/ 种/ 类型/ 网络/ 的/ 主要参数/ ./ 网络/ 类型/ 交换机/ GBEthernet7552413Infiniband2510/ ./ 624Myrinet55/ ./ 29.332/ QsNet42128/ 图/ 12/ (/ a/ )/ 表明/ ,/ 算法/ 在/ Ethernet/ 上/ 执行/ 时间/ 最长/ ,/ QsNet/ 次之/ ,/ Infiniband/ 和/ QsNet/ 的/ 执行/ 时间/ 最小/ ./ 这/ 是/ 由/ 消息/ 延迟/ 系数/ 引起/ 的/ ./ 延迟/ 系数/ 越大/ ,/ 网络/ 延迟/ 越大/ ,/ 执行/ 时间/ 越长/ ./ 由图/ 12/ (/ b/ )/ 看出/ ,/ 3/ 种/ 改进/ 算法/ 在/ Infiniband/ 、/ Myrinet/ 和/ QsNet/ 网络/ 中/ 占用/ 处理器/ 数目/ 差不多/ ,/ 具有/ 类似/ 的/ 性能/ ./ 图/ 12/ (/ c/ )/ 表明/ 改进/ 算法/ 在/ 不同/ 网络/ 下/ ,/ 总/ 能耗/ 比/ 相应/ 基准/ 算法/ 要/ ①/ http/ :/ // // www/ ./ mellanox/ ./ com/ // pdf/ // products/ // silicon/ // InfiniS/ -/ Page11/ 小/ ,/ 节能/ 效果/ 明显/ ./ 总体/ 来看/ ,/ 改进/ 算法/ 在/ Ethernet/ 上/ 使用/ 的/ 处理器/ 数目/ 和/ 总/ 能耗/ 开销/ 相对/ 较大/ ./ 这是/ 由于/ Ethernet/ 的/ 网络/ 延迟/ 系数/ 较大/ 造成/ 的/ ./ 在/ 这/ 4/ 种/ 网络/ 上/ ,/ 改进/ 算法/ 都/ 具有/ 较/ 好/ 的/ 节省/ 资源/ 效果/ ./ 5.6/ 实验/ 小结/ 根据/ 以上/ 5/ 个/ 实验/ 结果/ 和/ 分析/ ,/ 我们/ 可以/ 看到/ PRO/ 类/ 优化/ 算法/ 与/ 相应/ 的/ 基准/ 算法/ 相比/ ,/ 调度/ 长度/ 略微/ 减少/ 或/ 相等/ ,/ 而/ 使用/ 处理器/ 个数/ 和/ 总体/ 能量/ 开销/ 明显/ 减少/ ./ 综合/ 统计/ 5/ 个/ 实验/ 中/ 所有/ 结果/ ,/ TDS/ -/ PRO/ 、/ EAD/ -/ PRO/ 和/ PEBD/ -/ PRO/ 算法/ 的/ 能耗/ 开销/ 比/ 优化/ 前/ 的/ 算法/ 平均/ 减少/ 23.71/ %/ 、/ 21.28/ %/ 和/ 23.51/ %/ ./ 6/ 结束语/ 本文/ 提出/ 了/ 一种/ 考虑/ 处理器/ 、/ 网卡/ 和/ 交换机/ 的/ 能耗/ 统计/ 模型/ ,/ 对/ 集群/ 服务器/ 系统/ 的/ 能耗/ 进行/ 建模/ ./ 在/ 此基础/ 上/ ,/ 对带/ 前驱/ 约束/ 的/ 并行/ 任务调度/ 问题/ 进行/ 了/ 讨论/ ,/ 提出/ 了/ 一种/ 减少/ 处理器/ 数目/ 的/ 调度/ 优化/ 方法/ ./ 该/ 方法/ 能够/ 找到/ 合适/ 的/ 处理器/ 空闲/ 时间/ ,/ 将/ 轻/ 负载/ 处理器/ 上/ 的/ 任务/ 合并/ 到/ 其它/ 处理器/ 上/ ,/ 减少/ 处理器/ 使用/ 数目/ ,/ 从而/ 降低/ 系统/ 总/ 能耗/ ./ 实验/ 结果表明/ ,/ 在/ 没有/ 增加/ 处理器/ 调度/ 长度/ 的/ 情况/ 下/ ,/ 优化/ 后/ 的/ 算法/ 能够/ 明显/ 减少/ 使用/ 处理器/ 数目/ 和/ 系统/ 总/ 能耗/ 开销/ ./ 

