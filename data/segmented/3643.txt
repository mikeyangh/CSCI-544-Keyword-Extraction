Page1/ 开销/ 敏感/ 的/ 多处理器/ 最优/ 节能/ 实时/ 调度/ 算法/ 张冬松/ 1/ )/ 吴飞/ 2/ )/ 陈芳园/ 1/ )/ 吴彤/ 3/ )/ 郭得科/ 4/ )/ 金士尧/ 1/ )/ 1/ )/ (/ 国防科学技术大学/ 计算机/ 学院/ 并行/ 与/ 分布/ 处理/ 国家/ 重点/ 实验室/ 长沙/ 410073/ )/ 2/ )/ (/ 上海/ 工程技术/ 大学/ 电子/ 电气/ 工程学院/ 上海/ 201620/ )/ 3/ )/ (/ 国防科学技术大学/ 国家/ 安全/ 与/ 军事战略/ 研究/ 中心/ 长沙/ 410073/ )/ 4/ )/ (/ 国防科学技术大学/ 信息/ 与/ 管理/ 学院/ 信息系统/ 工程/ 国家/ 重点/ 实验室/ 长沙/ 410073/ )/ 摘要/ 嵌入式/ 多处理器/ 系统/ 的/ 能耗/ 问题/ 变得/ 日益/ 重要/ ,/ 如何/ 减少/ 能耗/ 同时/ 满足/ 实时/ 约束/ 成为/ 多处理器/ 系统/ 节能/ 实时/ 调度/ 中/ 的/ 一个/ 重要/ 问题/ ./ 目前/ 绝大多数/ 研究/ 基于/ 关键/ 速度/ 降低/ 处理器/ 的/ 频率/ 以/ 减少/ 动态/ 能耗/ ,/ 采用/ 关闭/ 处理器/ 的/ 方法/ 减少/ 静态/ 能耗/ ./ 虽然/ 这种/ 方法/ 可以/ 实现/ 节能/ ,/ 但是/ 不能/ 保证/ 最小化/ 能耗/ ./ 而/ 现有/ 最优/ 的/ 节能/ 实时/ 调度/ 未/ 考虑/ 处理器/ 状态/ 切换/ 的/ 时间/ 和/ 能量/ 开销/ ,/ 因此/ 在/ 切换/ 开销/ 不可/ 忽视/ 的/ 实际/ 平台/ 中/ 不再/ 是/ 最优/ 的/ ./ 文中/ 针对/ 具有/ 独立/ 动态/ 电压/ 频率/ 调节/ 和/ 动态/ 功耗/ 管理/ 功能/ 的/ 多处理器/ 系统/ ,/ 考虑/ 处理器/ 切换/ 开销/ ,/ 提出/ 一种/ 基于/ 帧/ 任务模型/ 的/ 最优/ 节能/ 实时/ 调度/ 算法/ ./ 该/ 算法/ 根据/ 关键/ 速度/ 来/ 判断/ 系统/ 负载/ 情况/ ,/ 确定/ 具有/ 最低/ 能耗/ 值/ 的/ 活跃/ 处理器/ 个数/ ,/ 然后/ 根据/ 状态/ 切换/ 开销/ 来/ 确定/ 最优/ 调度/ 序列/ ./ 该/ 算法/ 允许/ 实时/ 任务/ 在/ 处理器/ 之间/ 任意/ 迁移/ ,/ 计算/ 复杂度/ 小/ ,/ 易于/ 实现/ ./ 数学分析/ 证明/ 了/ 该/ 算法/ 的/ 最优性/ ./ 关键词/ 实时/ 系统/ ;/ 多处理器/ ;/ 节能/ 调度/ ;/ 动态/ 电压/ 频率/ 调节/ ;/ 动态/ 功耗/ 管理/ ;/ 绿色/ 计算/ 1/ 引言/ 随着/ 芯片/ 制造商/ 正在/ 推出/ 多核/ 芯片/ 和/ 片/ 上/ 多处理器/ 系统/ ,/ 多处理器/ 平台/ 变得/ 更加/ 普遍/ ,/ 受到/ 了/ 智能/ 嵌入式/ 实时/ 系统/ 领域/ 越来越/ 多/ 的/ 关注/ ./ 处理器/ 的/ 高性能/ 会/ 带来/ 高能耗/ ./ 能耗/ 管理/ 已经/ 成为/ 嵌入式/ 实时/ 系统/ 中/ 一个/ 亟待解决/ 的/ 问题/ ,/ 尤其/ 对于/ 电池/ 供电/ 的/ 嵌入式/ 系统/ 非常/ 重要/ ./ 电容/ 切换/ 活动/ 产生/ 的/ 动态/ 功耗/ 和/ 泄露/ 电流/ 产生/ 的/ 静态/ 功耗/ 是/ CMOS/ 处理器/ 能耗/ 的/ 两个/ 主要/ 来源/ [/ 1/ ]/ ./ 动态/ 电压/ 频率/ 调节/ (/ DynamicVoltageFrequencyScaling/ ,/ DVFS/ )/ 技术/ 和/ 动态/ 功耗/ 管理/ (/ DynamicPowerManagement/ ,/ DPM/ )/ 技术/ 已经/ 被/ 应用/ 于/ 现代/ 处理器/ 系统/ 中/ ,/ DVFS/ 可以/ 在/ 运行/ 时/ 降低/ 供应/ 电压/ 和/ 执行/ 频率/ 以/ 减少/ 处理器/ 的/ 动态/ 功耗/ ,/ 而/ DPM/ 可以/ 在/ 运行/ 时/ 关闭/ 处理器/ 以/ 减少/ 处理器/ 的/ 静态/ 功耗/ ./ 由于/ 动态/ 功耗/ 通常/ 是/ 速度/ (/ 或称/ 频率/ )/ 的/ 凸函数/ 和/ 递增/ 函数/ ,/ 所以/ 一般来说/ 速度/ 越低/ ,/ 动态/ 能耗/ 越少/ ./ 但是/ ,/ 较/ 低/ 的/ 执行/ 速度/ 会/ 延长/ 实时/ 任务/ 的/ 执行/ 时间/ ,/ 又/ 因/ 泄露/ 电流/ 的/ 影响/ 而/ 导致/ 更/ 多/ 的/ 静态/ 能耗/ ./ 因此/ ,/ 节能/ 实时/ 调度/ 研究/ 需要/ 兼顾/ 动态/ 能耗/ 和/ 静态/ 能耗/ ,/ 在/ 满足/ 实时/ 约束/ 的/ 条件/ 下/ 最小化/ 能耗/ [/ 2/ ]/ ./ 早期/ 的/ 多处理器/ 节能/ 实时/ 调度/ 技术/ 研究/ 表明/ :/ 在/ 只/ 考虑/ 动态/ 功耗/ 的/ 条件/ 下/ ,/ 为了/ 最小化/ 能耗/ ,/ 最优/ 的/ 任务分配/ 必须/ 使得/ 任务/ 集/ 的/ 总/ 负载/ 在/ 多个/ 处理器/ 上/ 均匀/ 分配/ [/ 3/ ]/ ./ 典型/ 的/ 方法/ 是/ 基于/ 多种/ 装箱/ 问题/ 启发式/ 方法/ 如/ FFD/ (/ First/ -/ FitDecreasing/ )/ 、/ NFD/ (/ Next/ -/ FitDecreasing/ )/ 、/ BFD/ (/ Best/ -/ FitDecreasing/ )/ 和/ WFD/ (/ Worst/ -/ FitDecreasing/ )/ ,/ 先/ 将/ 任务分配/ 到/ 指定/ 的/ 处理器/ 上/ ,/ 然后/ 利用/ 单/ 处理器/ 平台/ 中/ 提出/ 的/ 各种/ 节能/ 实时/ 调度/ 算法/ 来/ 独立/ 调节/ 每个/ 处理器/ 的/ 电压/ 和/ 频率/ ./ 这样/ 便/ 可以/ 将/ 复杂/ 的/ 多处理器/ 节能/ 实时/ 调度/ 问题/ 转化/ 为/ 多个/ 简单/ 的/ 单/ 处理器/ 节能/ 实时/ 调度/ 问题/ ./ 但是/ ,/ Aydin/ 等/ 人/ [/ 3/ ]/ 已经/ 证明/ 若/ 将/ 任务分配/ 到/ 固定/ 数目/ 的/ 处理器/ 上/ 使/ 其/ 既/ 具有/ 最优/ 的/ 负载/ 均衡/ 又/ 保证/ 任务/ 集可/ 调度/ 性是/ 一个/ NP/ -/ hard/ 问题/ ./ 还有/ 一些/ 研究者/ 基于/ 全局/ 调度/ 法/ 提出/ 最优/ 的/ 节能/ 实时/ 调度/ 算法/ ./ Chen/ 等/ 人/ [/ 4/ -/ 5/ ]/ 针对/ 基于/ 帧/ 的/ 任务模型/ ,/ 提出/ 一种/ 最优/ 的/ 节能/ 实时/ 调度/ 算法/ LTF/ -/ M/ ./ Funaoka/ 等/ 人/ [/ 6/ ]/ 则/ 针对/ 周期/ 任务模型/ ,/ 提出/ 了/ 一种/ 最优/ 的/ 节能/ 实时/ 调度/ 算法/ ./ 但是/ ,/ 随着/ 纳米/ 制造/ 工艺/ 的/ 不断进步/ ,/ CMOS/ 电路/ 中/ 静态/ 功耗/ 相比/ 动态/ 功耗/ ,/ 在/ 总/ 功耗/ 中所/ 占/ 比重/ 越来越/ 大/ [/ 1/ ]/ ./ 为了/ 减少/ 因/ 泄露/ 电流/ 所/ 产生/ 的/ 静态/ 能耗/ ,/ 处理器/ 可以/ 利用/ DPM/ 技术/ 进入/ 睡眠/ 状态/ (/ 又称/ 关闭/ )/ 以及/ 从/ 睡眠/ 状态/ 返回/ 活跃/ 状态/ (/ 又称/ 唤醒/ )/ ./ 一些/ 研究者/ 针对/ 不可/ 忽视/ 的/ 静态/ 功耗/ 提出/ 了/ 多处理器/ 节能/ 实时/ 调度/ 算法/ ./ 这些/ 研究成果/ [/ 5/ ,/ 7/ -/ 9/ ]/ 通过/ 将/ 处理器/ 转入/ 睡眠/ 状态/ 来/ 减少/ 静态/ 功耗/ ./ Xu/ 等/ 人/ [/ 7/ ]/ 根据/ 工作/ 负载/ 确定/ 活跃/ 处理器/ 的/ 个数/ ,/ 提出/ 节能/ 实时/ 调度/ 算法/ ./ deLangen/ 等/ 人/ [/ 8/ ]/ 则/ 针对/ 具有/ 离散/ 速度/ 的/ 系统/ 提出/ 启发式/ 节能/ 实时/ 调度/ 算法/ ./ Chen/ 等/ [/ 5/ ]/ 针对/ 处理器/ 速度/ 独立/ 调节/ 和/ 统一/ 调节/ 的/ 两种/ 不同/ 处理器/ 模型/ ,/ 基于/ 帧/ 的/ 任务模型/ 提出/ 具有/ 不同/ 近似/ 比/ 的/ 静态/ 节能/ 调度/ 算法/ ,/ 同时/ 他们/ 的/ 成果/ 还/ 进一步/ 扩展/ 到/ 周期/ 任务模型/ [/ 9/ ]/ ./ 以上/ 所/ 提出/ 的/ 绝大多数/ 调度/ 算法/ 均/ 假设/ 处理器/ 具有/ 活跃/ 状态/ 和/ 睡眠/ 状态/ ,/ 基于/ 关键/ 速度/ 来/ 设定/ 活跃/ 状态/ 时/ 的/ 执行/ 速度/ ,/ 基于/ 状态/ 切换/ 开销/ 来/ 设定/ 何时/ 将/ 处理器/ 转入/ 睡眠/ 状态/ ./ 这里/ 关键/ 速度/ 是/ 指/ 具有/ 最小/ 能耗/ 的/ 可用/ 执行/ 速度/ ,/ 并且/ 乐观/ 地/ 假设/ 在/ 执行/ 任务/ 之后/ 将/ 处理器/ 转入/ 睡眠/ 状态/ ./ 但是/ ,/ 处理器/ 关闭/ 和/ 唤醒/ 需要/ 一定/ 的/ 时间/ 和/ 能耗/ 开销/ ./ 例如/ ,/ 在/ 70/ 纳米技术/ 中/ Transmeta/ 处理器/ 具有/ 483/ 微焦/ 的/ 能耗/ 开销/ 和/ 至少/ 2ms/ 的/ 时间/ 开销/ [/ 1/ ]/ ./ 如果/ 状态/ 转换/ 的/ 能耗/ Page3/ 开销/ 大于/ 能耗/ 节余/ ,/ 那么/ 显然/ 把/ 处理器/ 转入/ 睡眠/ 状态/ 可能/ 不会/ 节能/ [/ 10/ ]/ ./ 目前/ ,/ 多处理器/ 系统/ 中/ 节能/ 实时/ 调度/ 研究/ 已经/ 开始/ 关注/ 具有/ 切换/ 开销/ 的/ 实际/ 平台/ ./ 文献/ [/ 10/ ]/ 通过/ 说明/ 关键/ 速度/ 的/ 非/ 最优性/ 以及/ 负载/ 均衡/ 的/ 非/ 最优性/ ,/ 针对/ 基于/ 帧/ 的/ 任务模型/ 和/ 周期/ 任务模型/ ,/ 提出/ 了/ 一种/ 多项式/ 时间/ 的/ 近似/ 度为/ 1.21/ 的/ 节能/ 实时/ 调度/ 算法/ ./ 该/ 算法/ 显著/ 地/ 优于/ 原有/ 未/ 考虑/ 开销/ 情况/ 下/ 近似/ 度为/ 1.667/ 的/ 近似算法/ [/ 9/ ]/ ./ 但是/ ,/ 现有/ 的/ 研究成果/ [/ 4/ -/ 5/ ,/ 7/ -/ 10/ ]/ 主要/ 存在/ 三个/ 方面/ 的/ 问题/ :/ (/ 1/ )/ 大多数/ 节能/ 实时/ 调度/ 算法/ 基于/ 划分/ 调度/ 法/ 或非/ 最优/ 的/ 全局/ 调度/ 法/ ,/ 无法/ 保证/ 实时/ 任务/ 集/ 的/ 最优/ 可/ 调度/ 性/ ./ (/ 2/ )/ 现有/ 节能/ 算法/ 常/ 采取/ 降频/ 的/ 方法/ 来/ 减少/ 动态/ 功耗/ ,/ 采用/ 关闭/ 处理器/ 的/ 方法/ 来/ 进一步/ 减少/ 静态/ 功耗/ ,/ 虽然/ 这种/ 方法/ 可以/ 实现/ 节能/ ,/ 但是/ 不能/ 保证/ 最小化/ 能耗/ ./ (/ 3/ )/ 现有/ 最优/ 的/ 节能/ 实时/ 调度/ 算法/ 假设/ 没有/ 处理器/ 状态/ 切换/ 的/ 时间/ 和/ 能耗/ 开销/ ,/ 因此/ 在/ 切换/ 开销/ 不可/ 忽视/ 的/ 实际/ 平台/ 中/ 不/ 一定/ 最优/ ./ 本文/ 针对/ 具有/ 独立/ DVFS/ 的/ 多处理器/ 系统/ ,/ 在/ 考虑/ 处理器/ 状态/ 切换/ 开销/ 情况/ 下/ ,/ 提出/ 一种/ 基于/ 帧/ 任务模型/ 的/ 最优/ 节能/ 实时/ 调度/ 算法/ (/ LargestUtili/ -/ zationtaskFirstbasedonSwitchingOverhead/ ,/ LUF/ -/ SO/ )/ ./ 该/ 算法/ 在/ 调度/ 过程/ 中/ 允许/ 实时/ 任务/ 在/ 任意/ 处理器/ 之间/ 迁移/ ,/ 可以/ 在/ 离线/ 调度/ 中/ 确定/ 所有/ 任务/ 的/ 执行/ 过程/ 和/ 执行/ 速度/ ./ 同时/ ,/ LUF/ -/ SO/ 算法/ 与/ LTF/ -/ M/ 算法/ 的/ 主要/ 区别/ 在于/ :/ LUF/ -/ SO/ 算法/ 将/ 根据/ 关键/ 速度/ 来/ 判断/ 系统/ 的/ 低/ 负载/ 情况/ ,/ 一旦/ 确定/ 系统/ 处于/ 低/ 负载/ 情况/ ,/ 首先/ 确定/ 具有/ 最低/ 能耗/ 值/ 的/ 活跃/ 处理器/ 个数/ ,/ 然后/ 根据/ 状态/ 切换/ 时间/ 和/ 能量/ 开销/ 来/ 确定/ 最优/ 调度/ 序列/ ;/ 而/ LTF/ -/ M/ 算法/ 在/ 系统/ 处于/ 低/ 负载/ 情况/ 不再/ 保持/ 最优性/ ./ LUF/ -/ SO/ 算法/ 实现/ 简单/ 且/ 复杂度/ 小/ ./ 系统/ 的/ 理论/ 分析/ 证明/ 了/ 该/ 算法/ 的/ 最优性/ ./ 本文/ 第/ 2/ 节/ 介绍/ 系统/ 模型/ ,/ 并/ 给出/ 问题/ 定义/ ;/ 第/ 3/ 节/ 结合实际/ 切换/ 开销/ ,/ 对/ 现有/ 算法/ LTF/ -/ M/ 的/ 非/ 最优性/ 进行/ 分析/ ;/ LTF/ -/ SO/ 算法/ 的/ 详细描述/ 以及/ 最优性/ 分析/ 和/ 证明/ 在/ 第/ 4/ 节中/ 给出/ ;/ 第/ 5/ 节/ 示例/ 说明/ 算法/ 的/ 最优/ 节能/ 效果/ ,/ 并/ 与/ LTF/ -/ M/ 算法/ 进行/ 比较/ ;/ 第/ 6/ 节对/ 全文/ 作/ 简要/ 总结/ ./ 2/ 系统/ 模型/ 与/ 问题/ 定义/ 本/ 节/ 提出/ 本文/ 所用/ 的/ 处理器/ 模型/ 、/ 任务模型/ 以及/ 能耗/ 模型/ ,/ 并/ 基于/ 模型/ 给出/ 问题/ 定义/ ./ 2.1/ 处理器/ 模型/ 假设/ 多处理器/ 系统/ 由/ m/ 个/ 同构/ 处理器/ 构成/ ,/ m/ 为/ 常数/ ,/ 处理器/ 命名/ 为/ cpu1/ ,/ cpu2/ ,/ …/ ,/ cpum/ ./ 处理器/ cpuk/ 以/ 速度/ s/ 运行/ 时/ 的/ 功耗/ Pk/ (/ s/ )/ 为/ Pk/ (/ s/ )/ =/ Pdepk/ (/ s/ )/ +/ Pind/ 关/ 和/ 与/ 速度/ 无关/ 的/ 功耗/ [/ 11/ ]/ ./ Pdepk/ (/ s/ )/ 主要/ 由/ 门电路/ 电容/ 充放电/ 引起/ 的/ 动态/ 功耗/ 和/ 短路/ 瞬态/ 电流/ 产生/ 的/ 短路/ 功耗/ 构成/ ./ 根据/ 文献/ [/ 11/ -/ 13/ ]/ 可知/ ,/ 与/ 速度/ 相关/ 的/ 功耗/ Pdepk/ (/ s/ )/ 可/ 表示/ 为/ Pdepk/ (/ s/ )/ =/ α/ s3/ ./ 与/ 速度/ 无关/ 的/ 功耗/ Pindk/ =/ β/ [/ 20/ ]/ ,/ 其中/ β/ 是/ 一个/ 常量/ ./ 因此/ ,/ 功耗/ 函数/ 可为/ Pind/ 表示/ 为/ 这种/ 功耗/ 模型/ 适用/ 于/ 多种/ DVFS/ 处理器/ ,/ 例如/ IntelXscale/ 处理器/ [/ 11/ ]/ ./ 显然/ ,/ P/ (/ s/ )/ 是/ 严格/ 凸函数/ 和/ 递增/ 函数/ ./ 假设/ 同构/ 多处理器/ 可以/ 在/ 最低/ 处理器/ 速度/ smin/ 和/ 最高/ 处理器/ 速度/ smax/ 之间/ 连续/ 调节/ ./ 处理器/ 以/ 速度/ s/ 执行/ 一个/ 时钟/ 周期/ 的/ 能耗/ 为/ P/ (/ s/ )/ // s/ =/ α/ ·/ s2/ +/ β/ // s/ ./ P/ (/ s/ )/ // s/ 是/ 凸函数/ [/ 13/ ]/ ,/ 且/ 使得/ P/ (/ s/ )/ // s/ 具有/ 最小值/ 的/ 速度/ 即/ 是/ 关键/ 速度/ s/ / ./ 这里/ 关键/ 速度/ 定义/ 为/ 处理器/ 执行/ 一个/ 时钟/ 周期/ 所用/ 能耗/ 最/ 小时/ 的/ 速度/ [/ 1/ ,/ 9/ -/ 10/ ]/ ./ 例如/ ,/ 当/ Pdepk/ (/ s/ )/ =/ α/ s/ γ/ +/ λ/ s/ 时/ ,/ 关键/ 速度/ s/ / 等于/ maxmin/ γ/ Pind/ 显然/ ,/ s/ / 满足/ 如下/ 性质/ [/ 10/ -/ 11/ ]/ :/ 处理器/ 有/ 两种/ 状态/ :/ 睡眠/ 状态/ 和/ 活跃/ 状态/ ./ 当/ 处理器/ 处于/ 睡眠/ 状态/ 时/ ,/ DPM/ 技术/ 可以/ 关闭/ 处理器/ 时钟/ ,/ 将/ 处理器/ 电压/ 降低/ 到/ 非常低/ 的/ 水平/ ,/ 以至于/ 处理器/ 功耗/ 可以/ 忽略不计/ ,/ 近似/ 为/ 0/ [/ 10/ ,/ 13/ ]/ ./ 执行/ 任务/ 的/ 处理器/ 则/ 处于/ 活跃/ 状态/ ./ 由于/ 睡眠/ 状态/ 中/ 处理器/ 上下文/ 等/ 信息/ 不/ 被/ 保存/ ,/ 所以/ 返回/ 活跃/ 状态/ 需要/ 一定/ 的/ 时间/ 和/ 能量/ 开销/ ①/ ./ 本文/ 将/ Esw/ 和/ tsw/ 分别/ 定义/ 为/ 处理器/ 在/ 睡眠/ 状态/ 和/ 活跃/ 状态/ 之间/ 的/ 切换/ 能量/ 和/ 时间/ 开销/ ./ 当/ 处理器/ 在/ 活跃/ 状态/ 中/ 空闲/ 时/ ,/ 最小/ 能耗/ 处理器/ 将/ 以/ 极/ 低/ 速度/ 执行/ 空/ 操作/ 指令/ ./ 设/ 空闲/ 时/ 功耗/ 为/ Pidle/ ,/ 且/ 不/ 小于/ 处理器/ 在/ 最低/ 速度/ 时/ 的/ 功耗/ P/ (/ smin/ )/ ,/ 即/ Pidle/ / P/ (/ smin/ )/ ./ 而/ break/ -/ even/ 时间/ (/ 即/ t/ θ/ )/ 是/ 基于/ 空闲/ 时/ 功耗/ 所/ 计算/ 的/ 最小/ 空闲/ 周期/ ./ 当/ 处理器/ 的/ 空闲/ 时间/ 大于/ break/ -/ even/ 时间/ 时/ ,/ 将/ 处理器/ 转入/ 睡眠/ 状态/ ①/ AdvancedConfigurationandPowerInterface/ ,/ 2011/ ./ http/ :/ Page4/ 是/ 节能/ 的/ ./ break/ -/ even/ 时间/ 长度/ 依赖于/ 空闲/ 时/ 功耗/ 和/ 切换/ 开销/ ,/ 所以/ 不妨/ 设/ t/ θ/ =/ Esw/ // Pidle/ 时间/ 开销/ tsw/ 不/ 大于/ t/ θ/ 2.2/ 任务模型/ 本文/ 考虑/ 流媒体/ 应用/ 中/ 常见/ 的/ 基于/ 帧/ 任务/ 集/ T/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ n/ }/ ./ 所有/ 基于/ 帧/ 的/ 实时/ 任务/ 具有/ 相同/ 的/ 到达/ 时间/ (/ 又称/ 释放/ 时间/ )/ 和/ 周期/ ,/ 帧/ 大小/ 为/ 周期/ D/ ./ 每个/ 周期/ 任务/ 具有/ 无穷/ 序列/ 的/ 任务/ 实例/ ,/ 又/ 称为/ 作业/ ./ 任务/ τ/ j/ 的/ 每个/ 作业/ 都/ 按照/ 相同/ 周期/ 到达/ (/ 或称/ 释放/ 到/ )/ 就绪/ 队列/ ./ τ/ j/ 的/ 截止期/ 等于/ 周期/ ,/ 其/ 在/ 最高/ 处理器/ 速度/ smax/ 下/ 的/ 最坏/ 情况/ 执行/ 时钟/ 数/ 或/ 执行/ 时间/ Cj/ 是/ 预先/ 已知/ 的/ ./ τ/ j/ 的/ 利用率/ 为/ uj/ =/ Cj/ // D/ ,/ 任务/ 集/ 的/ 总/ 利用率/ 为/ U/ =/ ∑/ τ/ j/ ∈/ T/ 考虑/ Cj/ / D/ 这种/ 情况/ ,/ 在/ 该/ 情况/ 下/ 任务/ τ/ j/ 可以/ 以/ 速度/ smax/ 在/ 任务/ 截止期/ D/ 之前/ 完成/ ./ 假设/ 在/ 时间/ 间隔/ 中/ 执行/ 的/ CPU/ 时钟/ 数/ 与/ 处理器/ 速度/ 成/ 线性/ 正比/ 关系/ ./ 任务/ τ/ j/ 在/ t/ 时间/ 单元/ 内以/ 速度/ s/ 运行/ 所/ 需要/ 的/ CPU/ 时钟/ 数/ 可以/ 近似/ 表示/ 为/ s/ 和/ t/ 的/ 乘积/ ./ 2.3/ 能耗/ 模型/ 当/ 处理器/ 在/ 活跃/ 状态/ 与/ 睡眠/ 状态/ 之间/ 的/ 切换/ 能耗/ 开销/ Esw/ 不为/ 0/ 时/ ,/ 将/ 任务/ 集/ T/ 中/ 所有/ 任务分配/ 到/ m/ 个/ 处理器/ 上/ 的/ 最优/ 节能/ 实时/ 调度/ 一定/ 满足/ 下列/ 两个/ 性质/ ./ 引理/ 1/ ./ 第/ k/ 个/ 处理器/ 上/ 所/ 分配/ 的/ 任务/ 集/ Tk/ 中/ 每个/ 任务/ τ/ i/ 都/ 具有/ 相同/ 的/ 处理器/ 速度/ ./ 证明/ ./ 如果/ 定义/ 处理器/ 速度/ 分配/ 列表/ σ/ 为/ 处理器/ 速度/ sj/ 和/ 对应/ 的/ 执行/ 时间/ 长度/ tj/ 所/ 构成/ 数对/ (/ sj/ ,/ tj/ )/ 的/ 有序/ 集合/ ,/ 那么/ 根据/ 功耗/ 函数/ P/ (/ s/ )/ 是/ 凸函数/ 性质/ 可/ 得/ 如下/ 不等式/ [/ 4/ ]/ :/ ∑/ (/ sj/ ,/ tj/ )/ ∈/ σ/ 命题/ 得证/ ./ 引理/ 2/ ./ 第/ k/ 个/ 处理器/ 上/ 所/ 分配/ 的/ 任务/ 集/ Tk/ 具有/ 最低/ 能耗/ 的/ 节能/ 实时/ 调度/ 一定/ 满足/ :/ 当/ U/ =/ CiD/ 且/ U/ / s/ / 时/ ,/ 以/ U/ 为/ 速度/ 值来/ 执行/ Tk/ 中/ 所有/ ∑/ τ/ i/ ∈/ Tk/ 任务/ ;/ 当/ U/ </ s/ / 时/ ,/ 最优/ 执行/ 速度/ 值/ 只能/ 从/ 关键/ 速度/ s/ / 或/ U/ 中/ 选择/ ./ 证明/ ./ 当/ U/ =/ ∑/ τ/ i/ ∈/ Tk/ 数/ 的/ 凸函数/ 性质/ 直接/ 可知/ U/ 是/ 最优/ 执行/ 速度/ 值/ ./ 当/ U/ </ s/ / 时/ ,/ 不妨/ 假设/ 以/ U/ 为/ 速度/ 值来/ 执行/ 任务/ 集/ Tk/ 中/ 所有/ 任务/ 时/ 的/ 能耗/ 为/ E/ (/ U/ )/ =/ P/ (/ U/ )/ ·/ D/ ,/ 而/ 处理器/ 以/ s/ / 为/ 速度/ 值/ 执行/ 时/ 的/ 空闲/ 时间/ 为/ t/ / idle/ =/ D/ -/ UD/ // s/ / ./ 下面/ 采用/ 反证法/ ,/ 根据/ 引理/ 1/ 假设/ 此时/ 任务/ 集/ Tk/ 中/ 最优/ 节能/ 调度/ 的/ 执行/ 速度/ 值为/ s/ ,/ 且/ 满足/ s/ ≠/ s/ / ,/ s/ ≠/ U/ ./ (/ 1/ )/ 如果/ s/ </ U/ ,/ 则/ 所有/ 任务/ 的/ 执行/ 时间/ 为/ UD/ // s/ >/ D/ ,/ 显然/ 此时/ 不是/ 最优/ 节能/ 实时/ 调度/ ./ (/ 2/ )/ 如果/ s/ >/ s/ / ,/ 则/ 所有/ 任务/ 的/ 执行/ 时间/ 为/ UDUDs/ / </ D/ ,/ 存在/ 空闲/ 时间/ tidle/ =/ D/ -/ UDt/ θ/ 时/ ,/ 以/ s/ 为/ 速度/ 的/ 处理器/ 能耗/ 为/ E/ (/ s/ )/ =/ P/ (/ s/ )/ ·/ UDPidle/ ·/ tidle/ ,/ 而/ 以/ s/ / 为/ 速度/ 来/ 执行/ 时/ 的/ 能耗/ 为/ E/ (/ s/ / )/ =/ P/ (/ s/ / )/ ·/ UD/ 围中/ 属于/ 单调/ 递增/ 函数/ ,/ 所以/ P/ (/ s/ )/ ·/ UDUDs/ / ,/ 进而/ E/ (/ s/ )/ >/ E/ (/ s/ / )/ ./ 当/ tidle/ >/ t/ θ/ 时/ ,/ 以/ s/ 为/ 速度/ 的/ 处理器/ 能耗/ 为/ E/ (/ s/ )/ =/ P/ (/ s/ )/ ·/ UDt/ / idle/ / t/ θ/ ,/ 则/ 以/ s/ / 为/ 速度/ 来/ 执行/ 时/ 的/ 能耗/ 为/ E/ (/ s/ / )/ =/ P/ (/ s/ / )/ ·/ UDt/ / idle/ </ tidle/ ,/ 则/ 能耗/ E/ (/ s/ / )/ =/ P/ (/ s/ / )/ ·/ UD/ 根据/ P/ (/ s/ )/ // s/ 函数/ 在/ s/ >/ s/ / 范围/ 中/ 属于/ 单调/ 递增/ 函数/ ,/ 可得/ E/ (/ s/ )/ >/ E/ (/ s/ / )/ ./ (/ 3/ )/ 如果/ U/ </ s/ </ s/ / ,/ 则/ 所有/ 任务/ 的/ 执行/ 时间/ 为/ s/ </ (/ s/ / </ UDUDUDstidle/ </ t/ / idle/ ./ 当/ tidle/ >/ t/ θ/ 时/ ,/ t/ / idle/ >/ t/ θ/ ,/ 以/ s/ 为/ 速度/ 的/ 处理器/ 能耗/ 为/ E/ (/ s/ )/ =/ P/ (/ s/ )/ ·/ UD/ // s/ +/ Esw/ ,/ 而/ 以/ s/ / 为/ 速度/ 执行/ 时/ 的/ 能耗/ 为/ E/ (/ s/ / )/ =/ P/ (/ s/ / )/ ·/ UD/ // s/ / +/ Esw/ ./ 因为/ P/ (/ s/ )/ // s/ 函数/ 在/ s/ </ s/ / 范围/ 中/ 属于/ 单调/ 递减/ 函数/ ,/ 所以/ E/ (/ s/ )/ >/ E/ (/ s/ / )/ ./ 当/ tidle/ / t/ θ/ 时/ ,/ 以/ s/ 为/ 速度/ 的/ 处理器/ 能耗/ 为/ E/ (/ s/ )/ =/ P/ (/ s/ )/ ·/ UD/ // s/ +/ Pidle/ ·/ (/ D/ -/ UD/ // s/ )/ ./ 因为/ Pidle/ / P/ (/ smin/ )/ / P/ (/ 0/ )/ ,/ 且/ 功耗/ 函数/ P/ (/ s/ )/ 属于/ 凸函数/ 性质/ ,/ 所以/ E/ (/ s/ )/ / P/ (/ s/ )/ ·/ UD/ // s/ +/ P/ (/ 0/ )/ ·/ (/ D/ -/ UD/ // s/ )/ >/ P/ (/ s/ ·/ U/ // s/ +/ 0/ ·/ (/ 1/ -/ U/ // s/ )/ )/ ·/ D/ =/ E/ (/ U/ )/ ./ 综上/ 可知/ ,/ 与/ 假设/ 相/ 矛盾/ ./ 命题/ 得证/ ./ 证毕/ ./ 由/ 引理/ 2/ 易得/ 下面/ 推论/ ./ 推论/ 1/ ./ 当/ U/ =/ ∑/ τ/ i/ ∈/ TkPage5/ 理器/ 以/ 关键/ 速度/ 执行/ 完成/ 任务/ 集/ Tk/ 中/ 所有/ 任务/ ,/ 且/ 空闲/ 时/ 执行/ 空/ 操作/ ,/ 此时/ 能耗/ 值/ 一定/ 不/ 小于/ 以/ U/ 值为/ 执行/ 速度/ 且/ 没有/ 空闲/ 时间/ 时/ 的/ 能耗/ 值/ ./ 证明/ ./ 如果/ U/ =/ ∑/ τ/ i/ ∈/ Tk/ 以/ 关键/ 速度/ 执行/ ,/ 而/ 空闲/ 时/ 执行/ 空/ 操作/ ,/ 即/ 不会/ 将/ 处理器/ 转入/ 睡眠/ 状态/ ./ 此时/ 能耗/ 为/ P/ (/ s/ / )/ ·/ UD/ // s/ / +/ Pidle/ ·/ (/ D/ -/ UD/ // s/ / )/ ./ 而/ 处理器/ 以/ U/ 值为/ 执行/ 速度/ 且/ 没有/ 空闲/ 时间/ 时/ 的/ 能耗/ 值为/ P/ (/ U/ )/ D/ ./ 因为/ P/ (/ s/ )/ 是/ 凸函数/ ,/ 且/ Pidle/ / P/ (/ 0/ )/ ,/ 所以/ U/ // s/ / ·/ P/ (/ s/ / )/ +/ (/ 1/ -/ U/ // s/ / )/ ·/ Pidle/ / U/ // s/ / ·/ P/ (/ s/ / )/ +/ (/ 1/ -/ U/ // s/ / )/ ·/ P/ (/ 0/ )/ / P/ (/ U/ // s/ / ·/ s/ / +/ (/ 1/ -/ U/ // s/ / )/ ·/ 0/ )/ =/ P/ (/ U/ )/ ,/ 则/ (/ P/ (/ s/ / )/ -/ Pidle/ )/ ·/ UD/ // s/ / +/ Pidle/ ·/ D/ / P/ (/ U/ )/ ·/ D/ ./ 证毕/ ./ 不妨/ 令/ / (/ Tk/ )/ 为/ 第/ k/ 个/ 处理器/ 上/ 在/ 公共/ 截止期/ D/ 内/ 完成/ Tk/ 中/ 所有/ 任务/ 的/ 最小/ 能耗/ ./ 因为/ 切换/ 开销/ Esw/ 不为/ 0/ ,/ 所以/ 如果/ 某个/ 处理器/ 为/ 空闲/ 时/ ,/ 最优/ 调度/ 不/ 一定/ 会/ 将/ 处理器/ 转入/ 睡眠/ 状态/ ./ 根据/ 引理/ 2/ ,/ 如果/ ∑/ τ/ i/ ∈/ Tk/ 续分/ 情况/ 进行/ 判断/ ,/ 如果/ 处理器/ 在/ 截止期/ D/ 之前/ 完全/ 运行/ 时/ 的/ 能耗/ 小于/ 以/ 关键/ 速度/ 运行/ 时/ 的/ 能耗/ ,/ 那么/ / (/ Tk/ )/ =/ P/ ∑/ τ/ i/ ∈/ Tk/ 运行/ 时/ 的/ 能耗/ 小于/ 完全/ 运行/ 时/ 的/ 能耗/ ,/ 那么/ 根据/ 推论/ 1/ 可知/ ,/ 处理器/ 必然/ 会/ 转入/ 睡眠/ 状态/ ,/ / (/ Tk/ )/ =/ P/ (/ s/ / )/ ·/ ∑/ τ/ i/ ∈/ Tk/ 时/ ,/ 第/ k/ 个/ 处理器/ 在/ 公共/ 截止期/ D/ 内/ 完成/ Tk/ 中/ 所有/ 任务/ 的/ 能耗/ 为/ Ek/ (/ U/ )/ ,/ 即/ Ek/ (/ U/ )/ ←/ CiD/ / s/ / ,/ 那么/ / (/ Tk/ )/ =/ P/ ∑/ τ/ i/ ∈/ Tk/ 图/ 1/ 给出/ Ek/ (/ U/ )/ 函数/ 的/ 示例/ ./ 显然/ 该/ 函数/ 为/ 分段/ 函数/ ,/ 不/ 属于/ 凸函数/ ,/ 但是/ 其/ 仍/ 部分/ 满足/ 凸函数/ 性质/ ,/ 所以/ 针对/ 该/ 函数/ 的/ 分析/ 需要/ 分/ 情况/ 考虑/ ./ 2.4/ 问题/ 定义/ 任务/ 集/ 的/ 节能/ 实时/ 调度/ 是/ 指/ 集合/ 中/ 所有/ 任务/ 的/ 执行/ 映射/ 到/ 系统/ 中/ 的/ 处理器/ 上/ ,/ 并且/ 为/ 任务/ 的/ 对应/ 时间/ 间隔/ 分配/ 处理器/ 速度/ ./ 如果/ 在/ 时间/ 间隔/ 内/ 分配/ 的/ 所有/ 处理器/ 速度/ 都/ 是/ 有效/ 的/ ,/ 且/ 没有/ 任务/ 丢失/ 截止期/ D/ ,/ 那么/ 这样/ 一个/ 节能/ 实时/ 调度/ 是/ 可行/ 的/ ./ 一次/ 调度/ Sch/ 的/ 能耗/ 表示/ 为/ ∑/ m/ 中/ 能耗/ 的/ 定义/ )/ ./ 如果/ 一个/ 调度/ 是/ 可行/ 的/ ,/ 且/ 能耗/ 是/ 所有/ 可行/ 的/ 调度/ 中/ 最小/ 能耗/ ,/ 那么/ 它/ 就是/ 最优/ 节能/ 实时/ 调度/ ./ 本文/ 所/ 考虑/ 的/ 问题/ 定义/ 如下/ :/ 给定/ 基于/ 帧/ 的/ 实时/ 任务/ 集/ T/ ,/ 可以/ 在/ m/ 个/ 同构/ 多处理器/ 上/ 运行/ ./ 每个/ 处理器/ 具有/ 相同/ 的/ 功耗/ 函数/ P/ (/ s/ )/ =/ α/ ·/ s3/ +/ β/ ,/ α/ / 0/ ,/ β/ / 0/ ./ 假设/ 每个/ 处理器/ 的/ 执行/ 速度/ 可以/ 在/ smin/ =/ 0/ 和/ smax/ 之间/ 连续/ 调节/ ./ 所有/ 任务/ 具有/ 相同/ 的/ 释放/ 时间/ 和/ 截止期/ D/ ./ 假设/ 实时/ 任务/ 集/ T/ 是/ 可/ 调度/ 的/ ,/ 每个/ 任务/ τ/ j/ 的/ 最坏/ 情况/ 执行/ 时间/ Cj/ 都/ 不/ 超过/ 其/ 截止期/ D/ ,/ 任务/ τ/ j/ 的/ 实际/ 执行/ 按照/ 最坏/ 情况/ 执行/ ./ 处理器/ 在/ 睡眠/ 状态/ 和/ 活跃/ 状态/ 之间/ 的/ 切换/ 能量/ 开销/ 为/ Esw/ ,/ 时间/ 开销/ 为/ tsw/ / Esw/ // Pidle/ ./ 本文/ 的/ 目标/ 是/ 在/ 允许/ 任务/ 迁移/ 条件/ 下/ ,/ 将/ T/ 中/ 所有/ 任务分配/ 到/ m/ 个/ 处理器/ 上/ 执行/ ,/ 得到/ 最优/ 的/ 节能/ 实时/ 调度/ 序列/ ./ 由于/ 按照/ 最坏/ 情况/ 执行/ 的/ 每个/ 任务/ 在/ 运行/ 时/ 不会/ 改变/ 其/ 速度/ ,/ 所以/ 处理器/ 在/ 活跃/ 状态/ 时/ 没有/ 速度/ 切换/ 开销/ ./ 又/ 因为/ 任务/ 迁移/ 的/ 次数/ 不会/ 超过/ 处理器/ 个数/ ,/ 所以/ 开销/ 敏感/ 的/ 多处理器/ 最优/ 节能/ 实时/ 调度/ 问题/ 的/ 迁移/ 代价/ 可以/ 忽略不计/ ./ 3LTF/ -/ M/ 最优/ 算法/ 的/ 非/ 最优性/ 限制/ 本节/ 以/ IntelXscale/ 处理器/ 的/ 功耗/ 函数/ 为例/ ,/ 对/ 最优/ 节能/ 实时/ 调度/ 算法/ LTF/ -/ M/ 进行/ 实际/ 分析/ ./ 这里/ 功耗/ 函数/ 被/ 近似/ 建模/ 为/ P/ (/ s/ )/ =/ 1.52/ ·/ s3/ +/ 0.08/ W/ [/ 10/ -/ 12/ ]/ ./ 不妨/ 假设/ smin/ 为/ 0/ ,/ smax/ 为/ 1GHz/ ./ 根据/ 2.1/ 节/ 可知/ ,/ 以/ smax/ 为/ 标准/ 进行/ 归一化/ ,/ 关键/ 速度/ s/ / 约/ 为/ 0.297/ GHz/ ,/ 在/ 关键/ 速度/ s/ / 上/ 的/ 功耗/ P/ (/ s/ / )/ =/ 0.12/ W/ ./ 假设/ 切换/ 开销/ Esw/ 为/ 0.8/ mJ/ ,/ 处理器/ 的/ 空闲/ 功耗/ 为/ 0.08/ W/ ,/ 则/ break/ -/ even/ 时间/ t/ θ/ 为/ 10ms/ ./ 已知/ 基于/ 帧/ 的/ 实时/ 任务/ 集/ T/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ τ/ 3/ ,/ τ/ 4/ }/ 在/ 双处理器/ 系统/ 中/ 执行/ ,/ 所有/ 任务/ 具有/ 相同/ 周期/ D/ =/ 30ms/ ./ 每个/ 任务/ 在/ 最高/ 速度/ smax/ 下/ 的/ 最坏/ 情况/ 执行/ 时钟/ 数/ 分别/ 为/ C1/ =/ 0.012/ s/ / ,/ C2/ =/ 0.012/ s/ / ,/ C3/ =/ 0.006/ s/ / ,/ C4/ =/ Page60/ ./ 006s/ / ./ 如果/ 以/ 关键/ 速度/ s/ / 来/ 执行/ 这些/ 任务/ ,/ 每个/ 任务/ 的/ 执行/ 时间/ 分别/ 为/ 12ms/ ,/ 12ms/ ,/ 6ms/ ,/ 6ms/ ./ 当/ 不/ 考虑/ 泄漏/ 功耗/ 所/ 引起/ 的/ 静态/ 能耗/ 时/ ,/ Chen/ 等/ 人/ [/ 4/ -/ 5/ ]/ 已经/ 证明/ LTF/ -/ M/ 算法/ 针对/ 同构/ 多处理器/ 系统/ ,/ 在/ 保证/ 基于/ 帧/ 实时/ 任务/ 集可/ 调度/ 性/ 的/ 条件/ 下/ 产生/ 最低/ 的/ 能耗/ 值/ ./ 当/ 静态/ 能耗/ 不可/ 忽视/ 时/ ,/ 为了/ 平衡/ 动态/ 能耗/ 和/ 静态/ 能耗/ ,/ 如果/ 将/ 关键/ 速度/ 看作/ 任务/ 执行/ 的/ 最低/ 速度/ ,/ LTF/ -/ M/ 算法/ 可以/ 直接/ 扩展/ 为/ LTF/ -/ M/ -/ CRITICAL/ 算法/ ./ 但是/ ,/ 当/ 考虑/ 处理器/ 的/ 状态/ 切换/ 开销/ 时/ ,/ LTF/ -/ M/ 算法/ 及其/ LTF/ -/ M/ -/ CRITI/ -/ CAL/ 扩展/ 算法/ 不再/ 具有/ 最优性/ ./ 以/ 任务/ 集/ T/ 为例/ ,/ 图/ 2/ 给出/ 了/ 示例/ 说明/ ./ 这里/ ,/ x/ 轴/ 表示/ 时间/ ,/ y/ 轴/ 表示/ 处理器/ 执行/ 速度/ ,/ 每个/ 任务/ 框/ 的/ 面积/ 定义/ 为/ 执行/ 该/ 任务/ 所/ 占用/ 的/ CPU/ 时钟/ 数/ ./ 图/ 2/ (/ a/ )/ 表示/ 任务/ 集/ T/ 在/ LRE/ -/ TL/ 算法/ 下/ 的/ 调度/ 序列/ ,/ 可以/ 保证/ T/ 中/ 所有/ 任务/ 在/ 截止期/ D/ 之前/ 的/ 可/ 调度/ 性/ ./ 已知/ 每个/ 任务/ 在/ 周期/ D/ =/ 30ms/ 中/ 的/ 利用率/ 分别/ 为/ u1/ =/ 0.4/ s/ / ,/ u2/ =/ 0.4/ s/ / ,/ u3/ =/ 0.2/ s/ / ,/ u4/ =/ 0.2/ s/ / ,/ 平均/ 利用率/ 为/ u/ -/ =/ ∑/ / τ/ i/ ∈/ T/ 任务/ 的/ 利用率/ 均/ 小于/ 平均/ 利用率/ ,/ 所以/ LTF/ -/ M/ 算法/ 为/ 每个/ 任务分配/ 执行/ 速度/ u/ -/ GHz/ ./ 同时/ 为/ 保证/ 所有/ 任务/ 的/ 可/ 调度/ 性/ ,/ 指定/ 任务/ τ/ 2/ 从/ 20ms/ 到/ 30ms/ 时间段/ 内在/ 第/ 1/ 个/ 处理器/ 上/ 执行/ ,/ 从/ 0ms/ 到/ 10ms/ 时间段/ 内在/ 第/ 2/ 个/ 处理器/ 上/ 执行/ ./ LTF/ -/ M/ 算法/ 能够/ 使得/ 所有/ 处理器/ 以/ 完全/ 利用/ 整个/ 时间段/ (/ 0/ ,/ 30/ ]/ ms/ 的/ 速度/ u/ -/ GHz/ 执行/ 任务/ ,/ 没有/ 空闲/ 时间/ 存在/ ,/ 此时/ 处理器/ 总/ 能耗/ El2/ =/ (/ 0.04/ ·/ 0.63/ +/ 0.08/ )/ ·/ 60/ =/ 5.3184/ mJ/ ./ LTF/ -/ M/ 算法/ 为/ 每个/ 任务分配/ 的/ 执行/ 速度/ u/ -/ 均/ 小于/ 关键/ 速度/ ,/ 因此/ LTF/ -/ M/ -/ CRITICAL/ 算法/ 将/ 以/ 关键/ 速度/ s/ / 来/ 执行/ 所有/ 任务/ ,/ 总/ 的/ 执行/ 时间/ 为/ ∑/ / τ/ i/ ∈/ TCi/ // s/ / =/ 36ms/ ./ 图/ 2/ (/ b/ )/ 显示/ 了/ LTF/ -/ M/ -/ CRITI/ -/ CAL/ 算法/ 的/ 调度/ 序列/ ./ 从图/ 2/ (/ b/ )/ 中/ 可知/ ,/ 第/ 2/ 个/ 处理器/ 将/ 从/ 6ms/ 开始/ 进入/ 睡眠/ 状态/ ,/ 直到/ 30ms/ 时刻/ ./ 由于/ 睡眠/ 时间/ 超过/ break/ -/ even/ 时间/ ,/ 切换/ 能耗/ 开销/ 小于/ 空闲/ 能耗/ ,/ 所以/ 第/ 2/ 个/ 处理器/ 在/ 时间段/ (/ 6/ ,/ 30/ ]/ ms/ 内/ 的/ 能耗/ 为/ Esw/ ./ 此时/ 处理器/ 总/ 能耗/ E/ / 2/ =/ 0.12/ ·/ 36/ +/ 0.8/ =/ 5.12/ mJ/ ./ 由/ 以上/ 分析/ 可知/ ,/ 在/ 考虑/ 静态/ 能耗/ 条件/ 下/ ,/ LRE/ -/ TL/ 算法/ 不再/ 保证/ 其/ 最优性/ ,/ 而/ 其/ 扩展/ 算法/ LTF/ -/ M/ -/ CRITICAL/ 有/ 可能/ 进一步/ 降低/ 能耗/ ./ 在/ 关键/ 速度/ 上/ 执行/ 可能/ 会/ 比/ 在/ 更/ 低/ 的/ 速度/ 级别/ 上/ 执行/ 更/ 节能/ 的/ 主要/ 原因/ 在于/ ,/ 它/ 乐观/ 地/ 假设/ 在/ 任务/ 执行/ 之后/ 将/ 处理器/ 转入/ 睡眠/ 状态/ ./ 同时/ 这/ 两种/ 算法/ 均/ 假设/ 系统/ 负载/ 在/ 所有/ 处理器/ 上/ 均衡/ 分布/ 具有/ 最优性/ ./ 但是/ 如果/ 离线/ 关闭/ 某些/ 处理器/ 以/ 减少/ 活跃/ 处理器/ 的/ 个数/ ,/ 可能/ 会/ 极大/ 减少/ 能耗/ ./ 例如/ ,/ 假设/ 只有/ 一个/ 处理器/ 处于/ 活跃/ 状态/ ,/ 而/ 另/ 一个/ 处理器/ 处于/ 关闭/ 状态/ ,/ 则/ 可以/ 得到/ 一个/ 最优/ 节能/ 实时/ 调度/ 序列/ ,/ 即/ 所有/ 任务/ 以/ ∑/ / τ/ i/ ∈/ TCi/ // D/ =/ 1.2/ s/ / GHz/ 速度/ 在/ 一个/ 处理器/ 上/ 执行/ ,/ 没有/ 空闲/ 时间/ ,/ 如图/ 2/ (/ c/ )/ 所示/ ./ 此时/ 能耗/ E1/ =/ (/ 0.04/ ·/ 1.23/ +/ 0.08/ )/ ·/ 30/ =/ 4.4736/ mJ/ ./ 综上/ 可述/ ,/ LTF/ -/ M/ 算法/ 及其/ 扩展/ 算法/ 在/ 考虑/ 开销/ 的/ 实际/ 环境/ 中/ 不是/ 最优/ 的/ ,/ 主要/ 原因/ 是/ 在/ 开销/ 敏感/ 的/ 低/ 负载/ 情况/ 下/ ,/ 基于/ 关键/ 速度/ 以及/ 负载/ 均衡/ 的/ 节能/ 调度/ 不/ 具有/ 最优性/ [/ 10/ ]/ ./ Page74LUF/ -/ SO/ 算法/ 由于/ 开销/ 问题/ 越来越/ 不容忽视/ ,/ 基于/ 对/ LTF/ -/ M/ 最优/ 算法/ 的/ 非/ 最优性/ 分析/ ,/ 本文/ 得到/ 在/ 实际/ 环境/ 中/ 最优/ 算法/ 应该/ 具备/ 的/ 三个/ 条件/ :/ (/ 1/ )/ 系统/ 的/ 负载/ 情况/ 的/ 确定/ ;/ (/ 2/ )/ 具有/ 最低/ 能耗/ 值/ 的/ 活跃/ 处理器/ 个数/ ;/ (/ 3/ )/ 开销/ 敏感/ 的/ 处理器/ 状态/ 切换/ ./ 本文/ 将/ 基于/ 以上/ 分析/ ,/ 针对/ 基于/ 帧/ 的/ 实时/ 任务模型/ ,/ 提出/ 考虑/ 实际/ 切换/ 开销/ 情况/ 下/ 的/ 多处理器/ 最优/ 节能/ 实时/ 调度/ 算法/ LUF/ -/ SO/ ,/ 如/ 算法/ 1/ 所示/ ./ 算法/ 1/ ./ LUF/ -/ SO/ 算法/ ./ 输入/ :/ T/ ,/ D/ ,/ m/ ,/ s/ / 输出/ :/ 具有/ 最低/ 能耗/ 值/ 的/ 最优/ 调度/ 序列/ 1/ ./ 按照/ 任务/ 利用率/ ui/ 的/ 非/ 递增/ 顺序排列/ 所有/ 任务/ 2/ ./ U/ ←/ ∑/ τ/ i/ ∈/ T3/ ./ IFU/ >/ mor/ / τ/ i/ ∈/ Tsuchthatui/ >/ 1THEN4/ ./ return/ 不/ 存在/ 可行/ 的/ 调度/ ;/ 5/ ./ i/ ←/ 1andM/ ←/ m/ ;/ 6/ ./ WHILEi/ / |/ T/ |/ DO7/ ./ IFui/ </ s/ / andU/ // M/ </ s/ / THEN8/ ./ m/ / ←/ U/ // s/ / ;/ 9/ ./ BREAK/ ;/ 10/ ./ ELSEIFui/ >/ U/ // MTHEN11/ ./ τ/ i/ ./ speed/ ←/ ui/ ;/ 12/ ./ U/ ←/ U/ -/ ui/ ,/ i/ ←/ i/ +/ 1/ ,/ andM/ ←/ M/ -/ 1/ ;/ 13/ ./ ELSE14/ ./ τ/ i/ ./ speed/ ←/ U/ // Mandi/ ←/ i/ +/ 1/ ;/ 15/ ./ IFm/ / / 0THEN16/ ./ m/ / ←/ Check/ _/ Switching/ _/ Overhead/ (/ T/ ,/ U/ ,/ D/ ,/ i/ ,/ m/ / ,/ s/ / )/ ;/ 17/ ./ IFM/ >/ m/ / THEN18/ ./ M/ ←/ m/ -/ (/ M/ -/ m/ / )/ ;/ 19/ ./ ELSE20/ ./ M/ ←/ m/ ;/ 21/ ./ i/ ←/ 1andt/ ←/ 0/ ;/ 22/ ./ WHILEi/ / |/ T/ |/ DO23/ ./ IF/ τ/ i/ ./ speed/ =/ uiTHEN24/ ./ 调度/ 任务/ τ/ i/ 以/ ui/ ·/ smax/ 为/ 速度/ 值/ 在/ 0/ 到/ D/ 时间/ 间/ 25/ ./ M/ ←/ M/ -/ 1/ ;/ 26/ ./ ELSEift/ +/ ui/ ·/ D27/ ./ 调度/ 任务/ τ/ i/ 以/ τ/ i/ ./ speed/ ·/ smax/ 为/ 速度/ 值/ 在/ t/ 到/ D28/ ./ M/ ←/ M/ -/ 1/ ;/ 29/ ./ ELSE30/ ./ 调度/ 任务/ τ/ i/ 以/ τ/ i/ ./ speed/ ·/ smax/ 为/ 速度/ 值/ 在/ t/ 到/ 31/ ./ i/ ←/ i/ +/ 1andt/ ←/ t/ +/ ui/ ·/ D32/ ./ return/ 所有/ 任务/ 的/ 调度/ 序列/ ./ 4.1/ 基本/ 思想/ 本文/ 提出/ 的/ 算法/ LUF/ -/ SO/ 采用/ 最大/ 任务/ 利用率/ 优先/ 策略/ ,/ 离线/ 确定/ 任务/ 的/ 调度/ 过程/ 和/ 执行/ 速度/ ./ 最大/ 任务/ 利用率/ 优先/ 策略/ 是/ 指/ 所有/ 任务/ 按照/ 利用率/ 的/ 非/ 递增/ 顺序/ 来/ 排列/ ./ 以/ 任务/ 集/ T/ 为例/ ,/ 令/ U/ =/ ∑/ τ/ i/ ∈/ Tui/ ./ LUF/ -/ SO/ 算法/ 的/ 基本/ 思想/ 如下/ :/ (/ 1/ )/ 当/ ui/ / s/ / 时/ ,/ 如果/ ui/ / U/ // M/ ,/ 那么/ LUF/ -/ SO/ 算法/ 将/ 剩余/ 未/ 分配/ 的/ 任务/ / τ/ j/ ∈/ T/ \/ {/ τ/ 1/ ,/ …/ ,/ τ/ i/ }/ 统一分配/ 平均速度/ τ/ j/ ./ speed/ =/ U/ // M/ (/ 第/ 13/ 行到/ 第/ 14/ 行/ )/ ;/ 否则/ ,/ LUF/ -/ SO/ 算法/ 将/ 为/ 任务/ τ/ i/ 分配/ 速度/ τ/ i/ ./ speed/ =/ ui/ (/ 第/ 10/ 行到/ 第/ 12/ 行/ )/ ,/ 且/ 将/ 可用/ 处理器/ 的/ 个数/ 减/ 1/ ./ (/ 2/ )/ 当/ ui/ </ s/ / 时/ ,/ 如果/ U/ // M/ / s/ / ,/ 则/ 易知/ ui/ </ U/ // M/ ,/ 故/ LUF/ -/ SO/ 算法/ 将/ 为/ 剩余/ 未/ 分配/ 速度/ 的/ 任务/ 统一分配/ 平均速度/ U/ // M/ (/ 第/ 13/ 行到/ 第/ 14/ 行/ )/ ;/ 否则/ ,/ 这/ 反映/ 剩余/ 未/ 分配/ 速度/ 的/ 任务/ 的/ 执行/ 速度/ 可能/ 会/ 小于/ 关键/ 速度/ ,/ 需要/ 计算/ 最优/ 调度/ 可能/ 具有/ 的/ 处理器/ 数/ m/ / =/ U/ // s/ / (/ 第/ 7/ 行到/ 第/ 9/ 行/ )/ ./ 同时/ 调用/ Check/ _/ Switching/ _/ Overhead/ 算法/ (/ 第/ 15/ 行到/ 第/ 16/ 行/ )/ ,/ 不仅/ 可以/ 获得/ 在/ 考虑/ 切换/ 开销/ 情况/ 下/ 最优/ 的/ 处理器/ 数/ m/ / ,/ 而且/ 将/ 为/ 所有/ 剩余/ 未/ 分配/ 速度/ 的/ 任务/ 指定/ 了/ 对应/ 的/ 执行/ 速度/ ./ 如果/ 调用/ 之后/ 得到/ 的/ m/ / 小于/ 可用/ 的/ 处理器/ 个数/ M/ ,/ 则/ 说明/ 某些/ 处理器/ 可以/ 被/ 直接/ 关闭/ ,/ 从而/ 减少/ 可用/ 处理器/ 个数/ (/ 第/ 17/ 行到/ 第/ 18/ 行/ )/ ,/ 否则/ 所有/ 处理器/ 全部/ 打开/ ,/ 可用/ 处理器/ 个数/ M/ 等于/ 处理器/ 个数/ m/ (/ 第/ 19/ 行到/ 第/ 20/ 行/ )/ ./ (/ 3/ )/ 由于/ 任务/ 集/ T/ 中/ 所有/ 任务/ 都/ 已/ 分配/ 了/ 相关/ 的/ 执行/ 速度/ ,/ 所以/ 下面/ 可以/ 直接/ 按照/ 任务/ 利用率/ 非/ 递增/ 顺序/ 将/ 所有/ 任务/ 指派/ 到/ 对应/ 的/ 处理器/ 上/ 调度/ 执行/ :/ 如果/ 某个/ 任务/ τ/ i/ 的/ 速度/ τ/ i/ ./ speed/ 等于/ 其/ 利用率/ ui/ ,/ 那么/ 该/ 任务/ 将/ 单独/ 在/ 一个/ 处理器/ 上/ 从/ 0/ 到/ D/ 时间/ 间隔/ 内/ 调度/ 执行/ ,/ 同时/ 可用/ 处理器/ 个数/ 减/ 1/ (/ 第/ 23/ 行到/ 第/ 25/ 行/ )/ ;/ 否则/ ,/ 因为/ ui/ </ τ/ i/ ./ speed/ ,/ 所以/ t/ +/ ui/ ·/ D/ τ/ i/ ./ speed/ -/ D/ </ t/ ./ 如果/ 任务/ τ/ i/ 被/ 调度/ 执行/ 在/ 两个/ 处理器/ 上/ (/ 第/ 26/ 行到/ 第/ 28/ 行/ )/ ,/ τ/ i/ 将/ 以/ 速度/ τ/ i/ ./ speed/ ·/ smax/ 在/ t/ 到/ D/ 时间/ 间隔/ 内/ 执行/ 在/ 第/ M/ 个/ 处理器/ 上/ ,/ 在/ 0Page8/ 到/ t/ +/ ui/ ·/ D/ τ/ i/ ./ speed/ -/ D/ 时间/ 间隔/ 内/ 执行/ 在/ 第/ M/ -/ 1/ 个/ 处理器/ 上/ ;/ 此外/ ,/ 如果/ 任务/ τ/ i/ 被/ 调度/ 执行/ 在/ 一个/ 处理器/ 上/ (/ 第/ 29/ 行到/ 第/ 30/ 行/ )/ ,/ τ/ i/ 将/ 以/ 速度/ τ/ i/ ./ speed/ ·/ smax/ ,/ 从/ t/ 到/ t/ +/ ui/ ·/ D/ 器上/ ./ 为/ 得到/ 具有/ 最低/ 能耗/ 值/ 的/ 解/ ,/ Check/ _/ Switching/ _/ Overhead/ 算法/ 针对/ 所有/ 未/ 分配/ 速度/ 的/ 后续/ 任务/ 子集/ T/ =/ T/ \/ {/ τ/ 1/ ,/ …/ ,/ τ/ i/ }/ 只/ 分析/ 下列/ 3/ 种/ 情况/ ,/ 如/ 算法/ 2/ 所示/ ./ 算法/ 2/ ./ Check/ _/ Switching/ _/ Overhead/ ./ 输入/ :/ T/ ,/ U/ ,/ D/ ,/ i/ ,/ m/ / ,/ s/ / 输出/ :/ 能够/ 满足/ 所有/ 未/ 分配/ 速度/ 任务/ T/ =/ T/ \/ {/ τ/ 1/ ,/ …/ ,/ τ/ i/ }/ 1/ ./ M/ ←/ m/ / +/ 1/ ,/ U/ ←/ U/ ,/ j/ ←/ i/ ,/ El2/ ./ WHILEj/ / |/ T/ |/ DO3/ ./ IFuj/ >/ U/ // MTHEN4/ ./ τ/ j/ ./ speed/ ←/ ujandEl5/ ./ U/ ←/ U/ -/ uj/ ,/ j/ ←/ j/ +/ 1/ ,/ andM/ ←/ M/ -/ 1/ ;/ 6/ ./ ELSE7/ ./ τ/ j/ ./ speed/ ←/ U/ // Mandj/ ←/ j/ +/ 1/ ;/ 8/ ./ El9/ ./ tidle/ ←/ (/ m/ / +/ 1/ )/ ·/ D/ -/ U/ ·/ D/ // s/ / ;/ 10/ ./ IFtidle/ >/ t/ θ/ THEN11/ ./ E/ / 12/ ./ ELSE13/ ./ E/ / 14/ ./ IFm/ / ≠/ 0THEN15/ ./ El16/ ./ Emin/ ←/ min/ {/ El17/ ./ IFEmin/ =/ El18/ ./ / j/ ∈/ [/ i/ ,/ |/ T/ |/ ]/ ,/ τ/ j/ ./ speed/ ←/ U/ // m/ / ;/ 19/ ./ IFEmin/ =/ E/ / 20/ ./ / j/ ∈/ [/ i/ ,/ |/ T/ |/ ]/ ,/ τ/ j/ ./ speed/ ←/ s/ / ,/ andm/ / ←/ m/ / +/ 1/ ;/ 21/ ./ IFEmin/ =/ El22/ ./ m/ / ←/ m/ / +/ 1/ ;/ 23/ ./ return/ 处理器/ 个数/ m/ / ;/ 情况/ 1/ ./ T/ 中/ 所有/ 任务/ 在/ m/ / +/ 1/ 个/ 处理器/ 上以/ 完全/ 利用/ 整个/ 周期时间/ 的/ 速度/ 运行/ ,/ 没有/ 空闲/ 时间/ 存在/ ./ Check/ _/ Switching/ _/ Overhead/ 算法/ 采取/ 与/ LTF/ 算法/ 相同/ 的/ 方法/ 分配/ 所有/ 任务/ 的/ 执行/ 速度/ (/ 第/ 2/ 行到/ 第/ 7/ 行/ )/ ./ 此时/ 能耗/ 值为/ El/ 情况/ 2/ ./ T/ 中/ 所有/ 任务/ 在/ m/ / +/ 1/ 个/ 处理器/ 上以/ 关键/ 速度/ s/ / 运行/ ,/ 存在/ 空闲/ 时间/ t/ / idle/ =/ (/ m/ / +/ 1/ )/ ·/ D/ -/ U/ ·/ D/ // s/ / (/ 第/ 9/ 行/ )/ ./ Check/ _/ Switching/ _/ Overhead/ 算法/ 根据/ t/ / idle/ 与/ t/ θ/ 大小/ 关系/ 判断/ 是否/ 进入/ 睡眠/ 状态/ ,/ 从而/ 得到/ 对应/ 情况/ 下/ 不同/ 的/ 能耗/ 值/ E/ / 第/ 13/ 行/ )/ ./ 情况/ 3/ ./ T/ 中/ 所有/ 任务/ 在/ m/ / 个/ 处理器/ 上以/ 完全/ 利用/ 整个/ 周期时间/ 的/ 速度/ 运行/ ,/ 没有/ 空闲/ 时间/ 存在/ ./ 如果/ m/ / ≠/ 0/ ,/ 那么/ Check/ _/ Switching/ _/ Overhead/ 算法/ 可以/ 得到/ 在/ m/ / 个/ 处理器/ 上/ 最低/ 的/ 能耗/ 值/ El/ (/ 第/ 14/ 行到/ 第/ 15/ 行/ )/ ./ 基于/ 上述/ 3/ 种/ 情况/ 的/ 能耗/ 值/ ,/ Check/ _/ Switching/ _/ Overhead/ 算法/ 确定/ 最低/ 能耗/ 值/ min/ {/ Elm/ / +/ 1/ ,/ ElE/ / 度/ ,/ 得到/ 最优/ 处理器/ 数/ m/ / (/ 第/ 16/ 行到/ 23/ 行/ )/ ./ 4.2/ 复杂度/ 分析/ 设/ 任务/ 集/ T/ 中/ 任务/ 总数/ 为/ n/ ,/ 处理器/ 数为/ m/ ,/ 每个/ 任务/ 状态/ 数量/ 为/ w/ ,/ 每个/ 处理器/ 状态/ 数量/ 为/ v/ ./ 时间/ 复杂度/ :/ 在/ 算法/ 2/ 的/ 第/ 2/ 步/ 和/ 第/ 7/ 步/ 之间/ 的/ 循环/ 以及/ 算法/ 2/ 的/ 第/ 18/ 步/ 和/ 第/ 20/ 步中/ ,/ 为/ T/ / T/ 中/ 所有/ 未/ 分配/ 速度/ 的/ 任务/ 指定/ 执行/ 速度/ 的/ 时间/ 复杂度/ 均/ 为/ O/ (/ n/ )/ ./ 由于/ 算法/ 2/ 中/ 计算/ 各种/ 情况/ 下/ 能耗/ 值/ 和/ 最优/ 处理器/ 个数/ 的/ 时间/ 复杂度/ 均/ 为/ 常量/ ,/ 所以/ 算法/ 2/ 的/ 时间/ 复杂度/ 为/ O/ (/ n/ )/ ./ 算法/ 1/ 中/ 第/ 1/ 步/ 针对/ 任务/ 集/ T/ 的/ 排序/ 操作/ 需要/ 时间/ 复杂度/ 为/ O/ (/ n/ ·/ logn/ )/ ./ 从/ 算法/ 1/ 的/ 第/ 2/ 步到/ 第/ 5/ 步/ ,/ 每步/ 计算/ 的/ 时间/ 复杂度/ 为/ 常量/ ,/ 记作/ O/ (/ 1/ )/ ./ 而/ 在/ 算法/ 1/ 的/ 第/ 6/ 步/ 和/ 第/ 14/ 步/ 之间/ 的/ 循环/ 中/ ,/ 为/ 每个/ 任务分配/ 执行/ 速度/ 的/ 时间/ 复杂度/ 为/ O/ (/ n/ )/ ./ 算法/ 1/ 中/ 第/ 15/ 步到/ 18/ 步调/ 用/ 算法/ 2/ 的/ 计算/ 步骤/ 的/ 时间/ 复杂度/ 为/ O/ (/ n/ )/ ./ 此外/ ,/ 在/ 算法/ 1/ 的/ 第/ 20/ 步/ 和/ 第/ 29/ 步/ 之间/ 的/ 循环/ 中/ ,/ 将/ 所有/ 任务分配/ 到/ 指定/ 的/ 处理器/ 上/ 调度/ 执行/ 的/ 时间/ 复杂度/ 为/ O/ (/ n/ )/ ./ 综上/ ,/ 算法/ 1/ 的/ 时间/ 复杂度/ 为/ O/ (/ n/ ·/ logn/ )/ +/ O/ (/ n/ )/ =/ O/ (/ n/ ·/ logn/ )/ ./ 空间/ 复杂度/ :/ 如果/ 采用/ 顺序/ 表/ 存储/ ,/ 任务/ 集/ T/ 所/ 占用/ 的/ 空间/ 为/ O/ (/ n/ ·/ w/ )/ ,/ 处理器/ 状态/ 所/ 占用/ 的/ 空间/ 为/ O/ (/ m/ ·/ v/ )/ ./ 4.3/ 最优性/ 分析/ 当/ ui/ / s/ / 或者/ U/ // M/ / s/ / 时/ ,/ 根据/ 功耗/ 函数/ 的/ 凸函数/ 性质/ 以及/ LTF/ -/ M/ 算法/ 的/ 证明/ 过程/ ,/ 显然/ 可知/ LUF/ -/ SO/ 算法/ 得到/ 的/ 节能/ 调度/ 是/ 最优/ 的/ ./ 因此/ ,/ 为了/ 证明/ LUF/ -/ SO/ 算法/ 在/ ui/ </ s/ / 且/ U/ // M/ </ s/ / 的/ 情况/ 下/ 也/ 具有/ 最优性/ ,/ 下面/ 来/ 证明/ 算法/ 1/ 的/ Check/ _/ Switc/ -/ hing/ _/ Overhead/ 可/ 分析/ 得到/ 的/ 3/ 种/ 情况/ ,/ 其/ 能耗/ 值/ 也/ Page9/ 是/ 最低/ 的/ ./ 接下来/ ,/ 本文/ 将/ 根据/ 活跃/ 处理器/ 个数/ 的/ 不同/ ,/ 分/ 情况/ 说明/ 最优/ 节能/ 调度/ 只能/ 在/ m/ / 或/ m/ / +/ 1/ 个/ 处理器/ 上/ 产生/ ./ 4.3/ ./ 1m/ / 个/ 处理器/ (/ m/ / >/ 0/ )/ 对于/ T/ / T/ 中/ 所有/ 任务/ 在/ m/ / =/ ∑/ / τ/ i/ ∈/ T/ 理器/ 上/ 执行/ 时/ ,/ 因为/ T/ 中/ 所有/ 任务/ 的/ 利用率/ ui/ </ s/ / ,/ 又/ 因为/ U/ =/ ∑/ / τ/ i/ ∈/ TU/ // m/ / >/ ui/ ./ 为了/ 满足/ T/ 中/ 所有/ 任务/ 的/ 截止期/ ,/ 可以/ 选择/ 按照/ U/ // m/ / 为/ 速度/ 来/ 执行/ ,/ 此时/ 任务/ 在/ m/ / 个/ 处理器/ 上/ 运行/ 没有/ 产生/ 空闲/ 时间/ ,/ 能耗/ 为/ 引理/ 3/ ./ T/ / T/ 中/ 所有/ 任务/ 按照/ 任务/ 利用率/ 的/ 非/ 递增/ 顺序排列/ ,/ 所有/ 任务/ 具有/ 相同/ 的/ 截止期/ D/ ,/ 如果/ 令/ U/ =/ ∑/ / τ/ i/ ∈/ T/ ∑/ / τ/ i/ ∈/ Tuis/ / 到/ 的/ 能耗/ El/ 证明/ ./ 针对/ 多处理器/ ,/ 由于/ 具有/ 最低/ 能耗/ 的/ 速度/ 分配/ 方法/ 必然/ 保证/ 单个/ 处理器/ 在/ 运行/ 时/ 只有/ 唯一/ 的/ 执行/ 速度/ [/ 4/ ]/ ,/ 所以/ 不妨/ 假设/ m/ / 个/ 处理器/ {/ P1/ ,/ P2/ ,/ …/ ,/ Pm/ / }/ 具有/ 的/ 执行/ 速度/ 列表/ 为/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / }/ ,/ 而/ 每个/ 处理器/ 对应/ 的/ 运行/ 时间/ 列表/ 为/ {/ t1/ ,/ t2/ ,/ …/ ,/ tm/ / }/ ./ 其中/ / sj/ ∈/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / }/ ,/ 0/ / sj/ / smax/ ./ 因为/ ∑/ m/ / m/ / ·/ D/ ,/ 所以/ 空闲/ 时间/ tidle/ =/ m/ / ·/ D/ -/ ∑/ m/ / Pidle/ ·/ t/ θ/ ./ 如果/ tidle/ >/ t/ θ/ ,/ 那么/ 可以/ 将/ 处理器/ 从/ 活跃/ 状态/ 转入/ 睡眠/ 状态/ ;/ 否则/ ,/ 处理器/ 仍/ 处于/ 空闲/ 状态/ ./ 能耗/ Em/ / 表示/ 如下/ :/ Em/ / ←/ 因为/ ∑/ m/ / 凸函数/ 性质/ 以及/ 不等式/ (/ 1/ )/ 可知/ ,/ ∑/ m/ / (/ P/ (/ sj/ )/ ·/ tj/ )/ / P/ ∑/ m/ / j/ =/ 1j/ =/ 1t/ (/ PU/ ·/ D/ ∑/ m/ / 因为/ ∑/ m/ / m/ / / s/ / ,/ 所以/ UD/ ∑/ m/ / 为/ U/ 的/ 凸函数/ 性质/ 可知/ ,/ 当/ s/ / s/ / 时/ ,/ P/ (/ s/ )/ // s/ 是/ s/ 的/ 严格/ 单调/ 递增/ 函数/ ./ 当/ ∑/ m/ / tj/ 可以/ 取/ 最小值/ PU/ ∑/ m/ / ∑/ m/ / (/ sj/ ·/ tj/ )/ =/ U/ ·/ D/ ,/ ∑/ m/ / j/ =/ 1D/ ./ 显然/ ,/ 可得/ Em/ / >/ El/ 因为/ 以/ U/ // m/ / 为/ 速度/ 在/ m/ / 个/ 处理器/ 上/ 运行/ 没有/ 产生/ 空闲/ 时间/ ,/ 所以/ 如果/ 所有/ 处理器/ 以/ 低于/ U/ // m/ / 的/ 速度/ 执行/ 时/ ,/ 必然/ 会/ 导致/ 某个/ 任务/ 丢失/ 截止期/ ./ 因此/ U/ // m/ / 是/ 所有/ m/ / 个/ 处理器/ 完全/ 执行/ 时/ 唯一/ 速度/ ./ 定理/ 1/ ./ T/ / T/ 中/ 所有/ 任务/ 按照/ 任务/ 利用率/ 的/ 非/ 递增/ 顺序排列/ ,/ 所有/ 任务/ 具有/ 相同/ 的/ 截止期/ D/ ,/ 不妨/ 令/ m/ / =/ ∑/ / τ/ i/ ∈/ Tm/ / -/ 1/ ./ 如果/ T/ 中/ 所有/ 任务/ 在/ m/ / -/ λ/ 个/ 处理器/ 上/ 可/ 调度/ 执行/ ,/ 那么/ 在/ m/ / -/ λ/ 个/ 处理器/ 上/ 执行/ 所/ 得到/ 的/ 最低/ 能耗/ min/ {/ Em/ / -/ λ/ }/ 均/ 不/ 小于/ 在/ m/ / 个/ 处理器/ 均/ 以/ U/ // m/ / 为/ 速度/ 来/ 执行/ 所/ 得到/ 的/ 能耗/ El/ 证明/ ./ 由题/ 设/ 可知/ U/ // s/ / / m/ / ,/ 则/ U/ // m/ / / s/ / ./ 因为/ 1/ / λ/ / m/ / -/ 1/ ,/ 所以/ U/ // (/ m/ / -/ λ/ )/ >/ U/ // m/ / / s/ / ./ (/ 1/ )/ 如果/ m/ / -/ U/ </ λ/ / m/ / -/ 1/ ,/ 则/ 1/ / m/ / -/ λ/ </ U/ ,/ 进而/ U/ >/ m/ / -/ λ/ ,/ 此时/ 任务/ 负载/ 大于/ 处理器/ 处理/ 能力/ ,/ 不/ 存在/ 满足/ 可/ 调度/ 性/ 的/ 任务调度/ ./ (/ 2/ )/ 如果/ / λ/ ∈/ Z/ +/ ,/ 1/ / λ/ / m/ / -/ U/ ,/ 则/ 根据/ 引理/ 3/ 可知/ T/ 中/ 所有/ 任务/ 在/ m/ / -/ λ/ 个/ 处理器/ 均/ 以/ U/ // (/ m/ / -/ λ/ )/ 为/ 速度/ 在/ 截止期/ D/ 之前/ 执行/ ,/ 没有/ 空闲/ 时间/ ,/ 此时/ 所/ 得到/ 的/ 能耗/ 是/ 最低/ 的/ ,/ 即/ Em/ / -/ λ/ =/ m/ / -/ λ/ ←/ PUElP/ (/ U/ // (/ m/ / -/ λ/ )/ )/ ·/ U/ ·/ DU/ // (/ m/ / -/ λ/ )/ ./ 而/ El/ 又/ 根据/ P/ (/ s/ )/ // s/ 的/ 凸函数/ 性质/ 可知/ ,/ 当/ s/ / s/ / 时/ ,/ Page10P/ (/ s/ )/ // s/ 是/ 执行/ 速度/ s/ 的/ 严格/ 单调/ 递增/ 函数/ ./ 因此/ ,/ Elm/ / -/ λ/ / El4/ ./ 3.2/ m/ / +/ 1/ 个/ 处理器/ (/ m/ / / 0/ )/ 假设/ T/ / T/ 中/ 所有/ 任务/ 根据/ LTF/ -/ M/ 算法/ 为/ m/ / +/ 1/ 个/ 处理器/ 所/ 分配/ 的/ 执行/ 速度/ 为/ {/ sl1/ ,/ sl2/ ,/ …/ ,/ m/ / +/ 1/ }/ ,/ 由于/ 此时/ 所有/ m/ / +/ 1/ 个/ 处理器/ 以/ 完全/ 利用/ sl/ 整个/ 周期/ D/ 时间/ 的/ 速度/ 运行/ ,/ 不/ 存在/ 空闲/ 时间/ ,/ 所以/ 能耗/ 为/ 假设/ {/ s/ / ,/ s/ / ,/ …/ ,/ s/ / }/ 为/ T/ / T/ 中/ 所有/ 任务/ 按照/ 关键/ 速度/ s/ / 调度/ 执行/ 时/ m/ / +/ 1/ 个/ 处理器/ 的/ 执行/ 速度/ ,/ 存在/ 空闲/ 时间/ 为/ t/ / idle/ ←/ (/ m/ / +/ 1/ )/ ·/ D/ -/ U/ ·/ D/ // s/ / ,/ 且/ Esw/ =/ Pidle/ ·/ t/ θ/ ./ 如果/ t/ / idle/ >/ t/ θ/ ,/ 那么/ 可以/ 将/ 处理器/ 从/ 活跃/ 状态/ 转入/ 睡眠/ 状态/ ;/ 否则/ 处理器/ 仍/ 处于/ 空闲/ 状态/ ./ 因为/ T/ 中/ 所有/ 任务/ 的/ 利用率/ ui/ </ s/ / 且/ U/ // s/ / / m/ / ,/ 所以/ 可以/ 将/ m/ / +/ 1/ 个/ 处理器/ 上/ 可能/ 出现/ 的/ 空闲/ 时间/ 集中/ 到/ 一个/ 处理器/ 上/ ,/ 使得/ 状态/ 转换/ 次数/ 减少/ 到/ 最少/ ,/ 只有/ 一次/ ./ 因此/ 能耗/ 形式化/ 如下/ :/ m/ / +/ 1/ ←/ P/ (/ s/ / )/ ·/ U/ ·/ D/ // s/ / +/ Pidle/ ·/ t/ θ/ ,/ t/ / idle/ >/ t/ θ/ E/ / 考虑/ 一般/ 情况/ ,/ 针对/ m/ / +/ 1/ 个/ 处理器/ ,/ 由于/ 具有/ 最低/ 能耗/ 的/ 速度/ 分配/ 方法/ 必然/ 保证/ 单个/ 处理器/ 的/ 执行/ 速度/ 是/ 唯一/ 的/ ,/ 所以/ 不妨/ 假设/ m/ / +/ 1/ 个/ 处理器/ {/ P1/ ,/ P2/ ,/ …/ ,/ Pm/ / +/ 1/ }/ 具有/ 的/ 执行/ 速度/ 列表/ 为/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ,/ 而/ 每个/ 处理器/ 对应/ 的/ 运行/ 时间/ 列表/ 为/ {/ t1/ ,/ t2/ ,/ …/ ,/ tm/ / +/ 1/ }/ ./ 其中/ / sj/ ∈/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ,/ 0/ / sj/ / smax/ ,/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ≠/ {/ sl1/ ,/ sl2/ ,/ …/ ,/ sl/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ≠/ {/ s/ / ,/ s/ / ,/ …/ ,/ s/ / }/ ,/ 存在/ 空闲/ 时间/ 为/ tidle/ ←/ (/ m/ / +/ 1/ )/ ·/ D/ -/ ∑/ m/ / +/ 1tidle/ >/ t/ θ/ ,/ 那么/ 可以/ 将/ 处理器/ 从/ 活跃/ 状态/ 转入/ 睡眠/ 状态/ ;/ 否则/ 处理器/ 仍/ 处于/ 空闲/ 状态/ ./ 能耗/ 形式化/ 如下/ :/ Em/ / +/ 1/ ←/ 接下来/ ,/ 本/ 节/ 需要/ 证明/ 当/ T/ / T/ 中/ 所有/ 任务/ 在/ m/ / +/ 1/ 个/ 处理器/ 上/ 执行/ 时/ ,/ 在/ 满足/ 所有/ 任务/ 截止期/ 条件/ 下/ ,/ 最低/ 能耗/ 值为/ min/ {/ El/ 得到/ El/ 在/ ,/ 而/ 得到/ E/ / 时间/ ./ m/ / +/ 1/ 的/ 方法/ 会/ 使得/ 处理器/ 上/ 没有/ 空闲/ 时间/ 存/ 引理/ 4/ ./ T/ / T/ 中/ 所有/ 任务/ 按照/ 任务/ 利用率/ 的/ 非/ 递增/ 顺序排列/ ,/ 所有/ 任务/ 具有/ 相同/ 的/ 截止期/ D/ ,/ 假设/ 在/ m/ / +/ 1/ 个/ 处理器/ 上/ 执行/ 时/ 具有/ 的/ 执行/ 速度/ 列表/ 为/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ,/ 对应/ 的/ 运行/ 时间/ 列表/ 为/ {/ t1/ ,/ t2/ ,/ …/ ,/ tm/ / +/ 1/ }/ ./ 如果/ 任意/ 第/ j/ 个/ 处理器/ 的/ 速度/ s/ / </ sj/ / smax/ ,/ 或者/ 对于/ 任意/ 第/ j/ 个/ 处理器/ 的/ 速度/ 0/ </ sj/ </ sl/ 所有/ 任务/ 的/ 能耗/ 不/ 可能/ 是/ 在/ 保证/ 可/ 调度/ 性/ 条件/ 下/ 的/ 最低/ 能耗/ ./ 证明/ ./ (/ 1/ )/ 假设/ 任意/ 处理器/ 执行/ 速度/ 列表/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ 中/ 第/ j/ 个/ 处理器/ 的/ 速度/ s/ / </ sj/ / smax/ ./ 如果/ 在/ 不/ 改变/ 第/ j/ 个/ 处理器/ 上/ 任务/ 负载/ Cj/ (/ 即/ 任务/ 执行/ 时钟/ 数/ )/ 的/ 条件/ 下/ ,/ 将/ sj/ 的/ 速度/ 降低/ 为/ s/ / ,/ 而/ 保持/ 其它/ 剩余/ 处理器/ 的/ 执行/ 速度/ 不变/ ,/ 则/ 新/ 的/ 所有/ 执行/ 速度/ 列表/ 为/ {/ s1/ ,/ s2/ ,/ …/ ,/ sj/ -/ 1/ ,/ s/ / ,/ sj/ +/ 1/ ,/ …/ ,/ sm/ / +/ 1/ }/ ./ 显然/ ,/ 由于/ 改变/ 前后/ 能耗/ 的/ 唯一/ 不同/ 在于/ 第/ j/ 个/ 处理器/ 上/ 的/ 能耗/ ,/ 所以/ 下面/ 仅仅/ 比较/ 第/ j/ 个/ 处理器/ 执行/ 速度/ 改变/ 前后/ 的/ 能耗/ 值/ ./ Ej/ ←/ P/ (/ sj/ )/ ·/ tj/ +/ Pidle/ ·/ (/ D/ -/ tj/ )/ =/ P/ (/ sj/ )/ // sj/ ·/ Cj/ +/ Pidle/ ·/ (/ D/ -/ tj/ )/ ;/ 执行/ 速度/ 为/ s/ / 的/ 能耗/ 值为/ E/ / Pidle/ ·/ (/ D/ -/ t/ / sj/ >/ s/ / ,/ 所以/ tj/ </ t/ / D/ ,/ 所以/ D/ -/ tj/ >/ D/ -/ t/ / 变后/ 处理器/ 的/ 空闲/ 时间/ 大于/ break/ -/ even/ 时间/ ,/ 可以/ 由/ 活跃/ 状态/ 进入/ 睡眠/ 状态/ ,/ 那么/ 执行/ 速度/ 改变/ 前/ 也/ 一定/ 可以/ 由/ 活跃/ 状态/ 进入/ 睡眠/ 状态/ ./ 又/ 根据/ 功耗/ 函数/ P/ (/ s/ )/ 的/ 凸函数/ 性质/ 以及/ P/ (/ s/ )/ // s/ 在/ s/ / s/ / 时/ 属于/ 递增/ 函数/ 性质/ ,/ 可知/ P/ (/ sj/ )/ // sj/ >/ P/ (/ s/ / )/ // s/ / ,/ 进而/ 可得/ j/ ./ 因此/ 可知/ 对于/ 存在/ 处理器/ 执行/ 速度/ 大于/ s/ / Ej/ >/ E/ / 的/ 任意/ 处理器/ 执行/ 速度/ 列表/ ,/ 总/ 可以/ 将/ 其/ 转换/ 为/ 能耗/ 值/ 更/ 低且/ 处理器/ 执行/ 速度/ 不/ 超过/ s/ / 的/ 另/ 一个/ 处理器/ 执行/ 速度/ 列表/ ./ (/ 2/ )/ 假设/ 任意/ 处理器/ 执行/ 速度/ 列表/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ 中/ 任意/ 第/ j/ 个/ 处理器/ 的/ 速度/ 0/ </ sj/ </ sltj/ / D/ ./ 已知/ sj/ ·/ tj/ =/ Cj/ =/ s/ / ·/ t/ / 因为/ {/ sl1/ ,/ sl2/ ,/ …/ ,/ sl/ 器以/ 完全/ 利用/ 整个/ 周期时间/ 的/ 速度/ 运行/ ,/ 没有/ 空闲/ 时间/ 存在/ ,/ 所以/ ∑/ m/ / +/ 1U/ ,/ 所以/ ∑/ m/ / +/ 1/ 处理器/ 按照/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ 的/ 执行/ 速度/ 不能/ 完成/ Page11T/ 中/ 所有/ 任务/ 的/ 负载/ ,/ 必然/ 存在/ 某些/ 任务/ 丢失/ 截止期/ ./ 定理/ 2/ ./ T/ / T/ 中/ 所有/ 任务/ 按照/ 任务/ 利用率/ 的/ 非/ 递增/ 顺序排列/ ,/ 所有/ 任务/ 具有/ 相同/ 的/ 截止期/ D/ ,/ 假设/ 在/ m/ / +/ 1/ 个/ 处理器/ 上/ 执行/ 时/ 具有/ 的/ 执行/ 速度/ 列表/ 为/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ,/ 对应/ 的/ 运行/ 时间/ 列表/ 为/ {/ t1/ ,/ t2/ ,/ …/ ,/ tm/ / +/ 1/ }/ ./ 那么/ 在/ 满足/ T/ 中/ 所有/ 任务/ 截止期/ 的/ 条件/ 下/ ,/ 所有/ 任务/ 在/ m/ / +/ 1/ 个/ 处理器/ 上/ 执行/ 的/ 最小/ 能耗/ 值为/ min/ {/ El/ 证明/ ./ 由/ 引理/ 4/ 可知/ 在/ 分析/ 具有/ 最小/ 能耗/ 值/ 的/ 节能/ 调度/ 时/ ,/ 可以/ 排除/ 某个/ 处理器/ 执行/ 速度/ 大于/ s/ / 的/ 情况/ 以及/ 全部/ 处理器/ 执行/ 速度/ 均/ 小于/ sl/ 况/ ./ 因此/ ,/ 这里/ 仅仅/ 考虑/ / sj/ ∈/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ,/ sj/ / s/ / ,/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ≠/ {/ sl1/ ,/ sl2/ ,/ …/ ,/ sl/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ≠/ {/ s/ / ,/ s/ / ,/ …/ ,/ s/ / }/ ./ 下面/ 根据/ t/ / idle/ 与/ t/ θ/ 的/ 大小/ 关系/ 分/ 两种/ 情况/ 讨论/ :/ (/ 1/ )/ 如果/ 所有/ m/ / +/ 1/ 个/ 处理器/ 以/ 关键/ 速度/ s/ / 调度/ 执行/ 时/ 出现/ 的/ 空闲/ 时间/ t/ / idle/ / t/ θ/ ,/ 则/ 处理器/ 不会/ 由/ 活跃/ 状态/ 转入/ 睡眠/ 状态/ ./ (/ p/ (/ slm/ / +/ 1/ ←/ (/ P/ (/ s/ / )/ -/ Pidle/ )/ ·/ U/ ·/ D/ 当/ 处理器/ 执行/ 速度/ 列表/ 为/ {/ sl1/ ,/ sl2/ ,/ …/ ,/ sl/ 处理器/ 没有/ 空闲/ 时间/ 时/ ,/ 根据/ 式/ (/ 3/ )/ 可知/ El/ ∑/ m/ / +/ 1j/ =/ 1m/ / +/ 1/ 处理器/ 的/ 执行/ 速度/ 均/ 为/ s/ / 时/ ,/ 因为/ t/ / idle/ =/ (/ m/ / +/ 1/ )/ ·/ D/ -/ U/ ·/ D/ // s/ / / t/ θ/ ,/ 根据/ 式/ (/ 4/ )/ 可知/ E/ / P/ (/ s/ / )/ ·/ U/ ·/ D/ 于/ E/ / D/ ./ 当/ 处理器/ 执行/ 速度/ 列表/ 为/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ 时/ ,/ / sj/ ∈/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ,/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ≠/ {/ s/ / ,/ s/ / ,/ …/ ,/ s/ / }/ 且/ sj/ / s/ / ./ 因为/ ∑/ m/ / +/ 1/ ∑/ m/ / +/ 1/ (/ sj/ ·/ tj/ )/ =/ U/ ·/ D/ </ ∑/ m/ / +/ 1/ 知/ tidle/ =/ (/ m/ / +/ 1/ )/ ·/ D/ -/ ∑/ m/ / +/ 1s/ / =/ t/ / idle/ ./ 因此/ ,/ 由式/ (/ 5/ )/ 可得/ Em/ / +/ 1/ ←/ ∑/ m/ / +/ 1Pidle/ ·/ (/ m/ / +/ 1/ )/ ·/ D/ -/ ∑/ m/ / +/ 1/ ∑/ m/ / +/ 1/ (/ (/ P/ (/ sj/ )/ -/ Pidle/ )/ ·/ tj/ )/ +/ Pidle/ ·/ (/ m/ / +/ 1/ )/ ·/ D/ ./ 功耗/ 函数/ P/ (/ s/ )/ 是/ 凸函数/ 和/ 严格/ 单调/ 递增/ 函数/ ,/ j/ =/ 1j/ =/ 1/ 而/ Pidle/ 是/ 常量/ ,/ 因此/ P/ (/ s/ )/ -/ Pidle/ 仍然/ 属于/ 凸函数/ 和/ 严格/ 单调/ 递增/ 函数/ ./ 令/ G/ (/ s/ )/ =/ P/ (/ s/ )/ -/ Pidle/ ./ 根据/ 本文/ 的/ 处理器/ 模型/ 可知/ ,/ P/ (/ s/ )/ =/ Pdep/ (/ s/ )/ +/ Pind/ ,/ 而/ Pidle/ 为/ 处理器/ 中/ 没有/ 指令/ 执行/ 且/ 时钟/ 关闭/ 时/ 的/ 功耗/ ,/ 且/ Pidle/ / Pind/ ./ 此时/ G/ (/ s/ )/ =/ P/ (/ s/ )/ -/ Pidle/ =/ Pdep/ (/ s/ )/ +/ Pind/ -/ Pidle/ ./ 因为/ ∑/ m/ / +/ 1/ 数/ 性质/ 以及/ 式/ (/ 1/ )/ 可知/ ,/ j/ =/ 1/ 由于/ / tj/ ∈/ {/ t1/ ,/ t2/ ,/ …/ ,/ tm/ / +/ 1/ }/ ,/ 0/ / tj/ / D/ ,/ 则/ ∑/ m/ / +/ 1tj/ / ∑/ m/ / +/ 11/ )/ ./ 又/ 因为/ Us/ ]/ max/ ./ 不妨/ 假设/ f/ (/ s/ )/ =/ G/ (/ s/ )/ 则/ 一阶/ 导数/ f/ (/ s/ )/ =/ (/ Pdep/ (/ s/ )/ )/ ·/ s/ +/ (/ Pidle/ -/ Pind/ )/ 时/ ,/ 当/ Pidle/ =/ Pind/ 时/ ,/ f/ (/ 0/ )/ =/ 0/ ;/ 当/ Pidle/ >/ Pind/ 时/ ,/ f/ (/ s/ )/ >/ 0/ ./ 由此可知/ ,/ f/ (/ s/ )/ 是/ 速度/ s/ 的/ 严格/ 单调/ 递增/ 函数/ ./ 当/ UD/ ∑/ m/ / +/ 1/ 取/ 最小值/ ,/ 同时/ / tj/ ∈/ {/ t1/ ,/ t2/ ,/ …/ ,/ tm/ / +/ 1/ }/ ,/ tj/ =/ D/ ./ 再/ 由/ 引理/ 2/ 可知/ ,/ {/ sl1/ ,/ sl2/ ,/ …/ ,/ sl/ 处理器/ 以/ 完全/ 利用/ 整个/ 周期时间/ 的/ 速度/ 运行/ ,/ 没有/ 空闲/ 时间/ 存在/ 的/ 唯一/ 有效/ 执行/ 速度/ 列表/ ,/ 所以/ 式/ (/ 6/ )/ 左侧/ ∑/ m/ / +/ 1min/ {/ Elj/ =/ 1/ 显然/ ,/ 可得/ Em/ / +/ 1/ >/ El/ (/ 2/ )/ 如果/ 所有/ m/ / +/ 1/ 个/ 处理器/ 以/ 关键/ 速度/ s/ / 调度/ 执行/ 时/ 出现/ 的/ 空闲/ 时间/ t/ / idle/ >/ t/ θ/ ,/ 则/ 可能/ 存在/ 某些/ 处理器/ 由/ 活跃/ 状态/ 转入/ 睡眠/ 状态/ ./ 当/ 处理器/ 执行/ 速度/ 列表/ 为/ {/ sl1/ ,/ sl2/ ,/ …/ ,/ sl/ 处理器/ 没有/ 空闲/ 时间/ 时/ ,/ 根据/ 式/ (/ 3/ )/ 可知/ ElPage12j/ =/ 1j/ )/ ·/ D/ ./ 当/ 所有/ m/ / +/ 1/ 处理器/ 的/ 执行/ 速度/ 均/ 为/ ∑/ m/ / +/ 1p/ (/ sls/ / 时/ ,/ 因为/ t/ / idle/ =/ (/ m/ / +/ 1/ )/ ·/ D/ -/ U/ ·/ D/ 式/ (/ 4/ )/ 可知/ E/ / 器/ 执行/ 速度/ 列表/ 为/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ 时/ ,/ 因为/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ≠/ {/ s/ / ,/ s/ / ,/ …/ ,/ s/ / }/ 且/ ∑/ m/ / +/ 1D/ ,/ 所以/ ∑/ m/ / +/ 1/ ∑/ m/ / +/ 1tj/ ,/ 可知/ tidle/ =/ (/ m/ / +/ 1/ )/ ·/ D/ -/ ∑/ m/ / +/ 1D/ -/ U/ ·/ Ds/ / =/ t/ / idle/ ./ 因此/ ,/ 由式/ (/ 5/ )/ 可得/ j/ =/ 1Em/ / +/ 1/ ←/ 下面/ 根据/ tidle/ 与/ t/ θ/ 的/ 关系/ ,/ 分/ 两种/ 情况/ 来/ 讨论/ :/ (/ 2.1/ )/ tidle/ >/ t/ θ/ ./ 此时/ Em/ / +/ 1/ ←/ ∑/ m/ / +/ 1tidle/ </ t/ / idle/ ,/ 所以/ E/ / 又/ 因为/ ∑/ m/ / +/ 1/ ∑/ m/ / +/ 1j/ =/ 1/ 的/ 凸函数/ 性质/ 以及/ 式/ (/ 1/ )/ 可知/ ,/ j/ =/ 1/ 由于/ / tj/ ∈/ {/ t1/ ,/ t2/ ,/ …/ ,/ tm/ / +/ 1/ }/ ,/ 0/ / tj/ / D/ ,/ 则/ ∑/ m/ / +/ 1tj/ / ∑/ m/ / +/ 1/ 又/ 因为/ U/ 根据/ P/ (/ s/ )/ minP/ (/ s/ )/ {/ }/ s/ ./ 当/ ∑/ m/ / +/ 1m/ / +/ 1/ </ s/ / ,/ 所以/ UD/ ∑/ m/ / +/ 1s/ 的/ 凸函数/ 性质/ 可知/ ,/ 当/ s/ =/ s/ / 时/ ,/ P/ (/ s/ / )/ ∑/ m/ / +/ 1tj/ 可以/ 取/ 最小值/ UD/ ·/ P/ (/ s/ / )/ // s/ / ./ 因为/ / sj/ ∈/ {/ s1/ ,/ j/ =/ 1s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ,/ 0/ / sj/ / s/ / 以及/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ / +/ 1/ }/ ≠/ {/ s/ / ,/ s/ / ,/ …/ ,/ s/ / }/ ,/ 所以/ ∑/ m/ / +/ 1min/ {/ El/ 显然/ ,/ 可得/ Em/ / +/ 1/ >/ E/ / j/ =/ 1/ (/ 2.2/ )/ tidle/ / t/ θ/ ./ 此时/ tidle/ =/ (/ m/ / +/ 1/ )/ ·/ D/ -/ ∑/ m/ / +/ 1/ (/ P/ (/ sj/ )/ ·/ tj/ )/ +/ Pidle/ ·/ (/ m/ / +/ 1/ )/ ·/ D/ -/ ∑/ m/ / +/ 1/ ∑/ m/ / +/ 1Em/ / +/ 1/ ←/ ∑/ m/ / +/ 1tidle/ </ t/ / idle/ ,/ 所以/ E/ / (/ P/ (/ s/ / )/ -/ Pidle/ )/ ·/ UD/ // s/ / +/ Pidle/ (/ m/ / +/ 1/ )/ D/ ./ 而/ El/ ∑/ m/ / +/ 1p/ (/ slj/ =/ 1D/ +/ Pidle/ ·/ (/ m/ / +/ 1/ )/ ·/ D/ ./ 由于/ t/ / idle/ =/ (/ m/ / +/ 1/ )/ ·/ D/ -/ U/ ·/ D/ // s/ / ,/ t/ / idle/ >/ t/ θ/ ,/ 同理/ ,/ 采用/ 与/ (/ 1/ )/ 中/ 类似/ 的/ 证明/ 过程/ 可得/ Em/ / +/ 1/ >/ Elm/ / +/ 1/ }/ ./ E/ / 综上/ 命题/ 得证/ ./ 定理/ 3/ ./ T/ / T/ 中/ 所有/ 任务/ 按照/ 任务/ 利用率/ 的/ 非/ 递增/ 顺序排列/ ,/ 所有/ 任务/ 具有/ 相同/ 的/ 截止期/ D/ ./ 不妨/ 令/ m/ / =/ ∑/ / τ/ i/ ∈/ Tm/ >/ m/ / ,/ / λ/ ∈/ Z/ +/ ,/ 1/ </ λ/ / m/ -/ m/ / ./ 如果/ T/ 中/ 所有/ 任务/ 在/ m/ / +/ λ/ 个/ 处理器/ 上/ 可/ 调度/ 执行/ ,/ 那么/ 在/ m/ / +/ λ/ 个/ 处理器/ 上/ 执行/ 所/ 得到/ 的/ 最小/ 能耗/ 均/ 不/ 小于/ 在/ m/ / +/ 1/ 个/ 处理器/ 所/ 得到/ 的/ 最小/ 能耗/ min/ {/ El/ 证明/ ./ 由题/ 设/ 可知/ U/ // s/ / </ m/ / +/ 1/ ,/ 则/ Us/ / ./ 因为/ 1/ / λ/ / m/ -/ m/ / ,/ 所以/ U/ 对于/ / λ/ ∈/ Z/ +/ ,/ 1/ </ λ/ / m/ -/ m/ / ,/ 根据/ 定理/ 2/ 可知/ ,/ T/ 中/ 所有/ 任务/ 在/ m/ / +/ λ/ 个/ 处理器/ 上/ 可/ 调度/ 执行/ 所得/ 的/ 最小/ 能耗/ 为/ min/ {/ El/ (/ 1/ )/ 如果/ min/ {/ El/ λ/ 个/ 处理器/ 以/ 完全/ 利用/ 整个/ 周期时间/ 的/ 速度/ 执行/ ,/ 没有/ 空闲/ 时间/ 时/ 的/ 执行/ 速度/ 列表/ 为/ {/ sl1/ ,/ λ/ ,/ sl2/ ,/ λ/ ,/ …/ ,/ m/ / +/ 1/ ,/ λ/ }/ ./ 根据/ 式/ (/ 3/ )/ 可知/ ElslPage13j/ =/ 1sj/ ,/ λ/ =/ U/ ,/ 根据/ 功耗/ 函数/ P/ (/ s/ )/ 的/ 凸函数/ 性质/ 以为/ ∑/ m/ / +/ λ/ 及式/ (/ 1/ )/ 可知/ ,/ ∑/ m/ / +/ λ/ (/ m/ / +/ λ/ )/ =/ P/ (/ U/ // (/ m/ / +/ λ/ )/ )/ 函数/ 性质/ 可知/ ,/ 当/ s/ </ s/ / 时/ ,/ P/ (/ s/ )/ // s/ 是/ s/ 的/ 严格/ 单调/ 递减/ 函数/ ,/ 可得/ P/ (/ U/ // (/ m/ / +/ λ/ )/ )/ 因为/ El/ (/ m/ / +/ 1/ )/ D/ =/ Elm/ / +/ 1/ / min/ {/ ElEl/ (/ 2/ )/ 如果/ min/ {/ El/ 所有/ 任务/ 的/ 执行/ 速度/ 均/ 为/ s/ / ,/ m/ / +/ λ/ 个/ 处理器/ 上/ 存在/ 空闲/ 时间/ ./ 因为/ 1/ </ λ/ / m/ -/ m/ / ,/ 所以/ t/ / idle/ ,/ λ/ =/ (/ m/ / +/ λ/ )/ ·/ D/ -/ UD/ 可知/ ,/ 如果/ t/ / idle/ ,/ λ/ / t/ θ/ ,/ 则/ t/ / idle/ ,/ 1/ </ t/ θ/ ,/ E/ / Pidlet/ / idle/ ,/ λ/ ,/ E/ / m/ / +/ 1/ ./ 如果/ t/ / idle/ ,/ λ/ >/ t/ θ/ ,/ 则/ E/ / E/ / Pidle/ ·/ t/ θ/ ./ 因为/ t/ / idle/ ,/ 1/ </ t/ / idle/ ,/ λ/ ,/ 如果/ t/ / idle/ ,/ 1/ </ t/ θ/ ,/ 则/ E/ / m/ / +/ 1/ ;/ 如果/ t/ / idle/ ,/ 1/ / t/ θ/ ,/ 则/ E/ / E/ / E/ / m/ / +/ λ/ / E/ / min/ {/ Elm/ / +/ 1/ ,/ E/ / 综上/ 可得/ min/ {/ El/ 证明/ ./ 由/ 引理/ 3/ 可知/ ,/ Check/ _/ Switching/ _/ m/ / +/ 1/ }/ ./ E/ / 定理/ 4/ ./ Check/ _/ Switching/ _/ Overhead/ 算法/ 可以/ 得到/ 具有/ 最低/ 能耗/ 值/ 的/ 最优/ 处理器/ 数/ ,/ 同时/ LUF/ -/ SO/ 算法/ 可以/ 得到/ 最优/ 的/ 节能/ 调度/ ./ Overhead/ 算法/ 确定/ 的/ 能耗/ 值/ Em/ / 是/ m/ / =/ ∑/ / τ/ i/ ∈/ T/ 个/ 处理器/ 上/ 能耗/ 最低值/ ;/ 由/ 定理/ 2/ 可知/ ,/ Check/ _/ Switching/ _/ Overhead/ 算法/ 确定/ 的/ 能耗/ 值/ min/ {/ Elm/ / +/ 1/ }/ 是/ m/ / +/ 1/ 个/ 处理器/ 上/ 能耗/ 最低值/ ;/ 再/ 根据/ 定/ E/ / 理/ 1/ 和/ 定理/ 3/ 可知/ ,/ Check/ _/ Switching/ _/ Overhead/ 算法/ 确定/ 的/ 能耗/ 值/ Emin/ ←/ min/ {/ El/ 所有/ m/ >/ m/ / 个/ 处理器/ 上/ 的/ 最低/ 能耗/ 值/ ,/ 由此/ 得到/ 具有/ 最低/ 能耗/ 值/ Emin/ 的/ 处理器/ 数即/ 是/ 最优/ 的/ ./ 已知/ T/ 中/ 所有/ 任务/ 按照/ 任务/ 利用率/ 的/ 非/ 递增/ 顺序排列/ ,/ 当/ 单个/ 任务/ 的/ 利用率/ ui/ / s/ / 时/ ,/ 或者/ 当/ 剩余/ 未/ 分配/ 速度/ 的/ 任务/ 集/ T/ / T/ 中/ 在/ M/ 个/ 处理器/ 上/ 的/ 平均/ 利用率/ U/ 配/ 速度/ 的/ 任务/ 的/ 处理过程/ 与/ LTF/ -/ M/ 算法/ 相同/ ./ 因此/ ,/ 直接/ 根据/ 功耗/ 函数/ P/ (/ s/ )/ 的/ 凸函数/ 性质/ 以及/ LTF/ -/ M/ 算法/ 的/ 最优性/ 证明/ 过程/ ,/ 可知/ 此时/ LUF/ -/ SO/ 算法/ 在/ s/ / s/ / 得到/ 的/ 节能/ 实时/ 调度/ 是/ 最优/ 的/ ./ 当/ ui/ </ s/ / 且/ U/ // M/ </ s/ / 时/ ,/ LUF/ -/ SO/ 算法/ 调用/ Check/ _/ Switc/ -/ hing/ _/ Overhead/ 算法/ 可以/ 获得/ 最低/ 的/ 能耗/ 值/ ,/ 同时/ 保证/ T/ / T/ 中/ 所有/ 任务/ 的/ 可/ 调度/ 性/ ./ 综上/ ,/ LUF/ -/ SO/ 算法/ 可以/ 得到/ 最优/ 的/ 节能/ 调度/ ./ 5/ 示例/ 本/ 节/ 通过/ 举例说明/ LUF/ -/ SO/ 算法/ 的/ 最优性/ ./ 以/ IntelXscale/ 处理器/ 的/ 功耗/ 函数/ 为例/ ,/ 每个/ 处理器/ 的/ 功耗/ 函数/ 可以/ 被/ 近似/ 建模/ 为/ P/ (/ s/ )/ =/ 1.52/ ·/ s3/ +/ 0.08/ W/ [/ 10/ -/ 12/ ]/ ./ 假设/ 处理器/ 速度/ 以/ smax/ 为/ 标准/ 归一化/ 为/ [/ 0/ ,/ 1/ ]/ GHz/ (/ smin/ 为/ 0GHz/ ,/ smax/ 为/ 1GHz/ )/ 之间/ 任意/ 值/ ./ 根据/ 2.1/ 节/ 可知/ ,/ 关键/ 速度/ s/ / 约/ 为/ 0.297/ GHz/ ,/ 在/ 关键/ 速度/ s/ / 上/ 的/ 功耗/ P/ (/ s/ / )/ =/ 0.12/ W/ ./ 假设/ 切换/ 开销/ Esw/ 为/ 0.8/ mJ/ ,/ 处理器/ 的/ 空闲/ 功耗/ Pidle/ =/ 0.08/ W/ ,/ 则/ break/ -/ even/ 时间/ t/ θ/ 为/ 10ms/ ./ 给定/ 一个/ 基于/ 帧/ 的/ 实时/ 任务/ 集/ T/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ τ/ 3/ ,/ τ/ 4/ ,/ τ/ 5/ ,/ τ/ 6/ }/ 在/ 多处理器/ 系统/ 中/ 调度/ 执行/ ,/ 处理器/ 个数/ m/ =/ 4/ ,/ 所有/ 任务/ 具有/ 相同/ 周期/ D/ =/ 30ms/ ./ 不妨/ 假设/ 所有/ 任务/ 已经/ 按照/ 利用率/ 的/ 非/ 递增/ 顺序排列/ ,/ 每个/ 任务/ 的/ 最坏/ 情况/ 执行/ 时钟/ 数/ 和/ 利用率/ 如表/ 1/ 所示/ ./ 任务/ 集/ 根据/ LUF/ -/ SO/ 算法/ 可知/ ,/ 首先/ 需要/ 为/ 利用率/ 最大/ 的/ 任务/ τ/ 1/ 分配/ 执行/ 速度/ τ/ 1/ ./ speed/ ./ 此时/ 由于/ U/ =/ ∑/ / τ/ i/ ∈/ Tui/ =/ 3s/ / ,/ M/ =/ m/ ,/ 所以/ U/ // M/ =/ 0.75/ s/ / </ s/ / ./ 而/ u1/ =/ 1.2/ s/ / >/ s/ / ,/ 且/ u1/ >/ U/ // M/ ,/ 因此/ τ/ 1/ ./ speed/ =/ u1/ ,/ U/ =/ U/ -/ u1/ =/ 1.8/ s/ / ,/ M/ =/ m/ -/ 1/ =/ 3/ ./ 然后/ 为/ 后续/ 任务/ τ/ 2/ 分配/ 执行/ 速度/ ,/ 此时/ U/ // M/ =/ 0.6/ s/ / </ s/ / 且/ u2/ =/ 0.6/ s/ / </ s/ / ,/ 由/ LUF/ -/ SO/ 算法/ 可得/ m/ / =/ U/ // s/ / =/ 1/ ,/ 从而/ 调用/ Check/ _/ Switching/ _/ Overhead/ 算法/ ./ 针对/ 所/ Page14/ 有/ 未/ 分配/ 速度/ 的/ 后续/ 任务/ 子集/ T/ =/ {/ τ/ 2/ ,/ τ/ 3/ ,/ τ/ 4/ ,/ τ/ 5/ ,/ τ/ 6/ }/ ,/ Check/ _/ Switching/ _/ Overhead/ 算法/ 获得/ 具有/ 最低/ 能耗/ 值/ 的/ 最优/ 处理器/ 数/ m/ / 以及/ 后续/ 任务/ 子/ 集中/ 所有/ 任务/ 相应/ 的/ 执行/ 速度/ ./ 根据/ 定理/ 4/ 可知/ ,/ Check/ _/ Switching/ _/ Overhead/ 算法/ 中/ 具有/ 最低/ 能耗/ 值/ 的/ 解/ 只/ 需要/ 分析/ 下列/ 3/ 种/ 情况/ :/ 情况/ 1/ ./ T/ / T/ 中/ 所有/ 任务/ 在/ m/ / +/ 1/ 个/ 处理器/ 上以/ 完全/ 利用/ 整个/ 周期时间/ 的/ 速度/ 运行/ ,/ 没有/ 空闲/ 时间/ 存在/ ./ 由于/ u2/ </ U/ // (/ m/ / +/ 1/ )/ =/ 0.9/ s/ / ,/ 所以/ / τ/ j/ ∈/ T/ ,/ 任务/ τ/ j/ 的/ 执行/ 速度/ 为/ τ/ j/ ./ speed/ =/ 0.9/ s/ / GHz/ ./ 因为/ 此时/ Check/ _/ Switching/ _/ Overhead/ 算法/ 采取/ 与/ LTF/ 算法/ 的/ 相同/ 方法/ 分配/ 所有/ 任务/ 的/ 执行/ 速度/ ,/ 所以/ 对应/ 的/ 调度/ 序列/ 如图/ 3/ (/ a/ )/ 所示/ ./ 根据/ 式/ (/ 3/ )/ 可知/ 能耗/ 值/ El0/ ./ 08/ )/ ·/ 60/ =/ 6.5496/ mJ/ ./ 情况/ 2/ ./ T/ / T/ 中/ 所有/ 任务/ 在/ m/ / +/ 1/ 个/ 处理器/ 上以/ 关键/ 速度/ s/ / 运行/ ,/ 存在/ 空闲/ 时间/ t/ / idle/ =/ (/ m/ / +/ 1/ )/ ·/ D/ -/ U/ ·/ D/ // s/ / ./ 此时/ Check/ _/ Switching/ _/ Overhead/ 算法/ 分配/ T/ / T/ 中/ 所有/ 任务/ 的/ 执行/ 速度/ 为/ s/ / GHz/ ,/ 对应/ 的/ 调度/ 序列/ 如图/ 3/ (/ b/ )/ 所示/ ./ 由于/ t/ / idle/ =/ 2/ ×/ 30/ -/ 1.8/ ×/ 30/ =/ 6ms/ ,/ t/ θ/ =/ 10ms/ ,/ 所以/ tidle/ </ t/ θ/ ./ 根据/ 式/ (/ 4/ )/ 可知/ 能耗/ 值/ E/ / 2/ =/ P/ (/ s/ / )/ UD/ // s/ / +/ Pidletidle/ =/ 0.12/ ·/ 1.8/ ·/ 30/ +/ 0.08/ ·/ 6/ =/ 6.96/ mJ/ ./ 情况/ 3/ ./ T/ / T/ 中/ 所有/ 任务/ 在/ m/ / 个/ 处理器/ 上以/ 完全/ 利用/ 整个/ 周期时间/ 的/ 速度/ 运行/ ,/ 没有/ 空闲/ 时间/ 存在/ ./ 因为/ m/ / ≠/ 0/ ,/ 所以/ 根据/ 引理/ 3/ 可知/ 为/ 得到/ 在/ m/ / 个/ 处理器/ 上/ 最低/ 的/ 能耗/ 值/ ,/ Check/ _/ Switching/ _/ Overhead/ 算法/ 分配/ T/ / T/ 中/ 所有/ 任务/ 的/ 执行/ 速度/ 为/ U/ // m/ / =/ 1.8/ s/ / GHz/ ,/ 对应/ 的/ 调度/ 序列/ 如图/ 3/ (/ c/ )/ 所示/ ./ 根据/ 式/ (/ 2/ )/ 可知/ 能耗/ 值/ El1/ =/ P/ (/ 1.8/ s/ / )/ ·/ m/ / ·/ D/ =/ (/ 0.04/ ·/ 1.83/ +/ 0.08/ )/ ·/ 30/ =/ 9.3984/ mJ/ ./ 当/ 得到/ 以上/ 3/ 种/ 情况/ 的/ 能耗/ 值后/ ,/ Check/ _/ Switching/ _/ Overhead/ 算法/ 确定/ 的/ 最低/ 能耗/ 值/ min/ {/ El2/ ,/ E/ / 2/ ,/ El1/ }/ =/ El2/ ,/ 最后/ 返回/ 最优/ 处理器/ 数/ m/ / =/ 2/ ./ 当/ 分配/ 完/ T/ 中/ 所有/ 任务/ 的/ 执行/ 速度/ 之后/ ,/ LUF/ -/ SO/ 算法/ 将/ 所有/ 任务/ 指定/ 到/ 相应/ 的/ M/ =/ 3/ 个/ 处理器/ 上/ 调度/ 执行/ ,/ 如图/ 4/ (/ a/ )/ 所示/ ./ 而/ 如果/ 采用/ LTF/ -/ M/ 算法/ 调度/ 相同/ 任务/ 集/ T/ ,/ 则/ LTF/ -/ M/ 算法/ 会/ 将/ T/ 中/ 所有/ 任务/ 指定/ 到/ m/ =/ 4/ 个/ 处理器/ 上/ 执行/ ,/ 如图/ 4/ (/ b/ )/ 所示/ ./ 图/ 4/ 中/ 每个/ 方框/ 表示/ 一个/ 任务/ ,/ 方框/ 中/ 数值/ 表示/ 该/ 任务/ 的/ 利用率/ ./ 每个/ 圆/ 表示/ 一个/ 处理器/ ,/ 圆中/ 数值/ 表示/ 处理器/ 的/ 执行/ 速度/ ./ 如果/ 某个/ 处理器/ 没有/ 被/ 分配/ 执行/ 速度/ ,/ 则/ 标记/ 为/ “/ 关闭/ ”/ ./ 从图/ 4/ (/ a/ )/ 可知/ ,/ 任/ Page15/ 务/ τ/ 1/ 在/ 处理器/ cpu3/ 上以/ 1.2/ s/ / GHz/ 为/ 速度/ 从/ 时刻/ 0ms/ 到/ 时刻/ 30ms/ 执行/ ,/ T/ / T/ 中/ 所有/ 任务/ 分别/ 在/ 处理器/ cpu2/ 和/ cpu1/ 以/ 0.9/ s/ / GHz/ 为/ 速度/ 从/ 时刻/ 0ms/ 到/ 时刻/ 30ms/ 执行/ ,/ 因此/ LUF/ -/ SO/ 算法/ 得到/ 的/ 总/ 能耗/ 值为/ ELUF/ -/ SO/ =/ P/ (/ 1.2/ s/ / )/ D/ +/ El2/ =/ 11.0232/ mJ/ ./ 而/ 从/ 图/ 4/ (/ b/ )/ 可知/ ,/ 除了/ 任务/ τ/ 1/ 在/ 处理器/ cpu4/ 上以/ 1.2/ s/ / GHz/ 为/ 速度/ 从/ 时刻/ 0ms/ 到/ 时刻/ 30ms/ 执行/ 以外/ ,/ T/ / T/ 中/ 所有/ 任务/ 分别/ 在/ 其它/ 3/ 个/ 处理器/ 上以/ 0.6/ s/ / GHz/ 为/ 速度/ 从/ 时刻/ 0ms/ 到/ 时刻/ 30ms/ 执行/ ,/ 因此/ LTF/ -/ M/ 算法/ 得到/ 的/ 总/ 能耗/ 值为/ ELTF/ -/ M/ =/ P/ (/ 1.2/ s/ / )/ ·/ D/ +/ P/ (/ 0.6/ s/ / )/ ·/ 3/ ·/ D/ =/ 12.4512/ mJ/ ./ 相比/ LTF/ -/ M/ 算法/ ,/ LUF/ -/ SO/ 最优/ 算法/ 能够/ 节余/ 能耗/ 约/ 11/ %/ ./ 6/ 结束语/ 本文/ 针对/ 具有/ 独立/ DVFS/ 的/ 多处理器/ 系统/ ,/ 在/ 考虑/ 处理器/ 状态/ 切换/ 开销/ 情况/ 下/ ,/ 提出/ 一种/ 基于/ 帧/ 任务模型/ 的/ 最优/ 节能/ 实时/ 调度/ 算法/ LUF/ -/ SO/ ./ LUF/ -/ SO/ 算法/ 允许/ 实时/ 任务/ 在/ 处理器/ 之间/ 的/ 任意/ 迁移/ ,/ 可以/ 离线/ 确定/ 任务/ 集/ 的/ 执行/ 过程/ 和/ 执行/ 速度/ ./ 同时/ ,/ 该/ 算法/ 根据/ 关键/ 速度/ 来/ 判断/ 系统/ 的/ 低/ 负载/ 情况/ ,/ 一旦/ 确定/ 系统/ 处于/ 低/ 负载/ 情况/ ,/ 首先/ 确定/ 具有/ 最低/ 能耗/ 值/ 的/ 活跃/ 处理器/ 个数/ ,/ 然后/ 根据/ 状态/ 切换/ 时间/ 和/ 能量/ 开销/ 来/ 确定/ 最优/ 调度/ 序列/ ./ LUF/ -/ SO/ 算法/ 实现/ 简单/ 且/ 复杂度/ 小/ ./ 本文/ 经过/ 系统/ 的/ 理论/ 分析/ 证明/ 了/ 该/ 算法/ 的/ 最优性/ ./ 

