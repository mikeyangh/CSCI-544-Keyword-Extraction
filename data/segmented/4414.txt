Page1IVirt/ :/ 基于/ 虚拟机/ 自省/ 的/ 运行/ 环境/ 完整性/ 度量/ 机制/ 林杰/ 1/ )/ ,/ 3/ )/ 刘川意/ 2/ )/ ,/ 3/ )/ 方滨兴/ 1/ )/ ,/ 3/ )/ 1/ )/ (/ 北京邮电大学/ 计算机/ 学院/ 北京/ 100876/ )/ 2/ )/ (/ 北京邮电大学/ 软件/ 学院/ 北京/ 100876/ )/ 3/ )/ (/ 北京邮电大学/ 可信/ 分布式计算/ 与/ 服务/ 教育部/ 重点/ 实验室/ 北京/ 100876/ )/ 摘要/ 完整性/ 度量/ 是/ 检测/ 程序/ 篡改/ 的/ 重要/ 方法/ ,/ 但是/ 在/ 虚拟化/ 环境/ 下/ 传统/ 的/ 检测/ 方法/ 已/ 体现/ 出/ 不足/ ./ 例如/ ,/ 度量/ 软件/ 与/ 被/ 度量/ 对象/ 处于/ 相同/ 操作系统/ 中/ 易受攻击/ ./ 该文/ 从/ 安全性/ 和/ 性能/ 两/ 方面/ 出发/ ,/ 提出/ 了/ 一种/ 基于/ 虚拟机/ 自省/ 的/ 完整性/ 度量/ 机制/ IVirt/ (/ IntegrityforVirtualization/ )/ ./ 该/ 机制/ 从/ 虚拟机/ 外部/ 通过/ 地址/ 转换/ 和/ 内容/ 定位/ 得到/ 所/ 需/ 的/ 虚拟机/ 内存/ 数据/ ,/ 从而/ 对/ 虚拟机/ 内部/ 的/ 程序/ 进行/ 完整性/ 度量/ ,/ 以/ 检验/ 程序/ 是否/ 遭到/ 篡改/ ./ 该文/ 以/ 典型/ 的/ 虚拟机/ 监视器/ Xen/ 为例/ 实现/ 了/ IVirt/ 原型/ 系统/ ./ 相比/ 于/ 同类/ 工作/ ,/ IVirt/ 一方面/ 将/ 度量/ 软件/ 与/ 被/ 度量/ 对象/ 分离/ ,/ 防止/ 度量/ 软件/ 遭到/ 攻击/ ;/ 另一方面/ 采用/ 地址/ 转换/ 来/ 度量/ 运行/ 时/ 状态/ ,/ 这/ 区别/ 于/ 采用/ 事件/ 拦截/ 机制/ 的/ 度量/ 方法/ ,/ 以/ 降低/ 性能/ 开销/ ./ 实验/ 结果表明/ ,/ 该/ 方法/ 能够/ 检测/ 出/ 虚拟机/ 运行/ 时/ 的/ 软件/ 篡改/ ,/ 而且/ 在/ 性能/ 上/ 不会/ 引入/ 过高/ 的/ 代价/ ./ 关键词/ 虚拟机/ 自省/ ;/ 完整性/ 度量/ ;/ 虚拟化/ ;/ 虚拟机/ 监视器/ ;/ 运行/ 时间/ ;/ 安全/ 1/ 引言/ 云/ 计算/ 提供/ 的/ 基础设施/ 服务/ 是/ 以/ 虚拟机/ 为/ 核心/ 的/ ,/ 服务器/ 上/ 使用/ 的/ 虚拟机/ 比例/ 也/ 在/ 不断/ 增大/ ,/ 虚拟机/ 内/ 的/ 安全/ 问题/ 受到/ 越来越/ 多/ 的/ 关注/ ./ 为了/ 确定/ 虚拟机/ 内/ 的/ 软件/ 是否/ 遭到/ 篡改/ ,/ 需要/ 有效/ 监控/ 虚拟机/ 的/ 运行/ 时/ 状态/ ./ 虚拟机/ 使用者/ 不/ 希望/ 软件/ 在/ 未知/ 的/ 情况/ 下/ 发生变化/ ,/ 所以/ 及时/ 检测/ 出/ 软件/ 是否/ 被/ 篡改/ ,/ 可以/ 降低/ 虚拟机/ 遭到/ 破坏/ 的/ 可能性/ ./ 研究者/ 提出/ 了/ 许多/ 监控/ 方法/ ,/ 对/ 程序/ 的/ 行为/ 进行/ 监控/ ./ 通常/ 采用/ 的/ 监控/ 手段/ 是/ 基于/ 主机/ 的/ 完整性/ 度量/ ,/ 该/ 方法/ 直接/ 在/ 被/ 检测/ 系统/ 内部/ 安装/ 监控/ 软件/ ,/ 以/ 检验/ 程序/ 是否/ 被/ 篡改/ ./ 典型/ 的/ 技术/ 是/ 完整性/ 度量/ 架构/ (/ IntegrityMeasurementArchitecture/ ,/ IMA/ )/ [/ 1/ ]/ ,/ 操作系统/ 从/ 内核/ 初始化/ 开始/ ,/ 对/ 后续/ 启动/ 的/ 应用程序/ 、/ 内核模块/ 进行/ 度量/ ,/ 将/ 这些/ 程序/ 的/ hash/ 值/ 写入/ 度量/ 列表/ ./ 由于/ 完整性/ 度量/ 架构/ 不能/ 防止/ 度量/ 列表/ 被/ 篡改/ ,/ 所以/ 引入/ TPM/ (/ TrustedPlatformModule/ )/ ,/ 通过/ 远程/ 验证/ 来/ 检测/ 列表/ 是否/ 有/ 被/ 修改/ ./ 而/ 在/ 虚拟化/ 环境/ 下/ ,/ 采用/ vTPM/ [/ 2/ ]/ 可以/ 将/ 可信/ 链/ 扩展/ 到/ 虚拟机/ 内部/ ,/ 使/ 虚拟机/ 可以/ 检测/ 到/ 模拟/ 的/ TPM/ 设备/ ,/ 可以/ 像/ 使用/ 物理/ TPM/ 一样/ ./ 因此/ 基于/ TPM/ 的/ 完整性/ 度量/ 在/ 虚拟机/ 内部/ 同样/ 可用/ ./ 但是/ 这种/ 将/ 度量/ 软件/ 和/ 被/ 度量/ 系统/ 放在/ 同一个/ 运行/ 环境/ 的/ 方法/ 所/ 存在/ 的/ 问题/ 是/ ,/ 度量/ 软件/ 暴露/ 了/ 自身/ ,/ 攻击者/ 很/ 容易/ 检测/ 到/ 度量/ 软件/ 的/ 存在/ ./ 这种/ 度量/ 方法/ 遭到/ 的/ 攻击/ 可能/ 来自/ 两个/ 方面/ ,/ 一个/ 是/ 度量/ 软件/ 本身/ ,/ 另/ 一个/ 是/ 存有/ 度量/ 值/ 的/ 度量/ 列表/ ./ 所以/ 研究者/ 提出/ 了/ 一些/ 解决/ 的/ 思路/ ,/ 将/ 度量/ 软件/ 和/ 被/ 度量/ 系统/ 分离/ ,/ 如/ HIMA/ [/ 3/ ]/ (/ Hypervisor/ -/ basedIntegrityMeasurementAgent/ )/ ,/ 通过/ 在/ 虚拟机/ 监视器/ 中/ 添加/ 挂钩/ (/ hook/ )/ 来/ 拦截/ 系统/ 调用/ ,/ 从而/ 在/ 程序运行/ 之前/ 能够/ 进行/ 完整性/ 度量/ ,/ 但是/ 这种/ 方法/ 使得/ 虚拟机/ 的/ 性能/ 受到/ 了/ 较大/ 影响/ ./ 在/ 虚拟化/ 环境/ 下/ ,/ 对/ 虚拟机/ 内部/ 的/ 软件/ 进行/ 完整性/ 度量/ 主要/ 面临/ 以下/ 挑战/ :/ (/ 1/ )/ 隔离/ 性/ ./ 攻击者/ 进入/ 系统/ 后/ 可能/ 对/ 度量/ 软件/ 造成/ 威胁/ ,/ 所以/ 需要/ 将/ 度量/ 软件/ 置于/ 一个/ 与/ 被/ 度量/ 系统/ 隔离/ 的/ 环境/ 中/ ,/ 以/ 降低/ 被/ 威胁/ 的/ 可能性/ ./ (/ 2/ )/ 虚拟机/ 中/ 地址/ 的/ 转换/ ./ 完整性/ 度量/ 需要/ 计算/ 进程/ 的/ hash/ 值/ ,/ 在/ 虚拟化/ 环境/ 下/ ,/ 进程/ 的/ 虚拟地址/ 不能/ 从/ 主机/ 操作系统/ 中/ 直接/ 获得/ ,/ 而/ 需要/ 从/ 虚拟地址/ 转换/ 为/ 物理地址/ ,/ 然后/ 才能/ 定位/ 出/ 进程/ 的/ 地址/ 范围/ ./ 这个/ 地址/ 转换/ 要/ 利用/ 虚拟机/ 监视器/ 的/ 内存/ 管理机制/ ./ 另外/ ,/ 虚拟机/ 内/ 操作系统/ 的/ 内核/ 结构/ 将/ 被/ 用来/ 确定/ 某些/ 重要/ 变量/ 的/ 偏移量/ ./ (/ 3/ )/ 度量/ 内容/ 的/ 定位/ ./ 通常/ 完整性/ 度量/ 是/ 将/ 被/ 度量/ 对象/ 作为/ 文件/ 来/ 进行/ 度量/ ,/ 在/ 被/ 度量/ 对象/ 运行/ 之前/ ,/ 先/ 检查/ 整个/ 文件/ 的/ hash/ 值/ ./ 而/ 本文/ 的/ 方法/ 则/ 不同/ ,/ 由于/ 所/ 采用/ 的/ 方法/ 是/ 针对/ 虚拟机/ 内存/ ,/ 所以/ 程序/ 必须/ 载入/ 内存/ 后/ 才能/ 实施/ 度量/ ./ 度量/ 区域/ 要/ 根据/ 操作系统/ 将/ 文件/ 载入/ 内存/ 后/ 所/ 分配/ 的/ 空间/ 来/ 确定/ ,/ 即/ 被/ 度量/ 对象/ 的/ 起始/ 地址/ 和/ 终止/ 地址/ ./ (/ 4/ )/ 语义/ 鸿沟/ 问题/ ./ 语义/ 鸿沟/ 问题/ 自/ 利用/ 虚拟化/ 提供/ 服务/ 以来/ 就/ 一直/ 存在/ [/ 4/ ]/ ,/ 也/ 不可避免/ ./ 从/ 虚拟机/ 外部/ 获取/ 的/ 信息/ 是/ 底层/ 的/ 二进制/ 数据/ ,/ 如何/ 能够/ 准确/ 地/ 识别/ 出所/ 需/ 的/ 底层/ 数据/ 而/ 进行/ 完整性/ 计算/ 是/ 自省/ 机制/ 面临/ 的/ 一个/ 重要/ 挑战/ ./ 针对/ 以上/ 问题/ ,/ 本文/ 提出/ 一种/ 基于/ 虚拟机/ 自省/ 的/ 完整性/ 度量/ 方法/ IVirt/ (/ IntegrityforVirtualization/ )/ ,/ 并/ 实现/ 了/ 该/ 原型/ 系统/ ./ 该/ 方法/ 采用/ 内存/ 映射/ 的/ 方式/ ,/ 将/ 虚拟机/ 操作系统/ 的/ 内核/ 关键/ 部分/ 和/ 进程/ 关键/ 部分/ 映射/ 到/ 特权/ 用户/ 可/ 访问/ 的/ 存储空间/ ,/ 通过/ 复制出/ 相应/ 的/ 物理/ 页/ ,/ 利用/ 地址/ 转换/ 找到/ 所/ 需/ 的/ 内存/ 数据/ ,/ 计算/ 这部分/ 的/ hash/ 值/ 并/ 与/ 原始/ 的/ hash/ 值/ 进行/ 比/ 对/ ,/ 进而/ 得出/ 程序/ 是否/ 有/ 变化/ 的/ 结论/ ./ 本文/ 的/ 机制/ 不仅/ 将/ 监控/ 软件/ 置于/ 虚拟机/ 之外/ ,/ 也/ 避免/ 了/ 采用/ 系统/ 调用/ 所/ 带来/ 的/ 性能/ 代价/ ./ 本文/ 的/ 主要/ 贡献/ 有/ :/ (/ 1/ )/ 提出/ 一种/ 从/ 虚拟机/ 外部/ 进行/ 运行/ 时/ 完整性/ 度量/ 的/ 方法/ ./ 传统/ 的/ 完整性/ 度量/ 大多/ 是/ 针对/ 磁盘/ 上/ 的/ 文件/ ,/ 而/ 对/ 运行/ 时/ 的/ 程序/ 并/ 没有/ 考虑/ ./ 本文/ 提出/ 一种/ 运行/ 时/ 的/ 完整性/ 度量/ 方法/ ,/ 并/ 实现/ 了/ 原型/ 系统/ ./ 该/ 机制/ 通过/ 度量/ 程序运行/ 时/ 的/ 完整性/ 来/ 判断/ 程序/ 是否/ 遭到/ 篡改/ ,/ 度量/ 的/ 对象/ 包括/ 进程/ 、/ 内核模块/ 以及/ 动态链接库/ ./ 此外/ ,/ 本文/ 的/ 完整性/ 度量/ 机制/ 将/ 度量/ 软件/ 和/ Page3/ 被/ 度量/ 对象/ 分离/ ,/ 保证/ 度量/ 值/ 的/ 准确性/ ./ 度量/ 软件/ 与/ 被/ 度量/ 系统/ 处于/ 同一个/ 环境/ 中/ ,/ 容易/ 遭到/ 攻击/ ./ 而/ 从/ 虚拟机/ 外部/ 进行/ 度量/ ,/ 利用/ 虚拟化/ 技术/ 的/ 强/ 隔离/ 性/ 可以/ 降低/ 度量/ 软件/ 受/ 攻击/ 的/ 可能性/ ./ (/ 2/ )/ 采用/ 组件/ 独立/ 的/ 度量/ 方式/ ./ 通常/ 的/ 度量/ 是/ 以/ 一种/ 链式/ 的/ 度量/ 方式/ ,/ 所有/ 程序/ 事先/ 固定/ ,/ 即/ 由/ 先/ 启动/ 的/ 程序/ 来/ 度量/ 后/ 启动/ 的/ 程序/ ,/ 通过/ 这种/ 方式/ 形成/ 物理/ 机/ 启动/ 过程/ 的/ 可信/ 链/ ./ 而/ 在/ 虚拟化/ 环境/ 下/ ,/ 本文/ 所提/ 方法/ 则/ 相对/ 独立/ ,/ 度量/ 值/ 并非/ 由/ 可信/ 链上/ 的/ 程序/ 进行/ 度量/ 测/ 得/ ,/ 可以/ 随时/ 对/ 每个/ 组件/ 单独/ 进行/ 度量/ ./ 另外/ ,/ 在/ 操作系统/ 启动/ 完成/ 后/ ,/ 通常/ 的/ 度量/ 采用/ 事件/ 触发/ 来/ 度量/ 运行/ 的/ 程序/ ,/ 这/ 就/ 需要/ 在/ 系统/ 函数/ 被/ 调用/ 时/ 进行/ 度量/ ./ 而/ 本文/ 的/ 方法/ 则/ 避免/ 了/ 系统/ 调用/ 所/ 带来/ 的/ 性能/ 影响/ ./ (/ 3/ )/ 缩小/ 语义/ 鸿沟/ ./ 在/ 进行/ 完整性/ 度量/ 之前/ ,/ 本文/ 需要/ 确定/ 被/ 度量/ 对象/ 在/ 内存/ 中/ 的/ 位置/ ./ 本文/ 通过/ 研究/ x86/ 体系结构/ 和/ 虚拟机/ 的/ 内存/ 管理机制/ ,/ 实现/ 从/ 虚拟地址/ 到/ 机器/ 地址/ 的/ 转换/ ./ 由于/ 不同/ 操作系统/ 对应/ 的/ 内核/ 结构/ 不同/ ,/ 所以/ 本文/ 的/ 方法/ 可以/ 通过/ 适配/ ,/ 以/ 准确/ 获取/ 不同/ 内核/ 结构/ 的/ 数据/ ./ 根据/ 获取/ 的/ 内存/ 内容/ 来/ 计算/ hash/ 值/ ,/ 达到/ 度量/ 的/ 目的/ ,/ 从而/ 跨越/ 语义/ 鸿沟/ 障碍/ ./ 本文/ 第/ 2/ 节对/ 完整性/ 度量/ 的/ 研究/ 以及/ 在/ 虚拟化/ 环境/ 下/ 完整性/ 度量/ 的/ 相关/ 工作/ 进行/ 评述/ ;/ 第/ 3/ 节/ 通过/ 分析/ 运行/ 时/ 攻击/ 确定/ 可以/ 度量/ 的/ 完整性/ 内容/ ,/ 并/ 详细/ 说明/ 本文/ 所提/ 方法/ 的/ 设计/ 架构/ ;/ 第/ 4/ 节/ 说明/ IVirt/ 的/ 实现/ ;/ 第/ 5/ 节对/ 该/ 架构/ 进行/ 实验/ 评估/ ;/ 最后/ 一节/ 进行/ 总结/ ./ 2/ 相关/ 工作/ 完整性/ 是/ 表明/ 程序/ 是否/ 被/ 篡改/ 的/ 一个/ 重要/ 性质/ ,/ 研究者/ 对/ 完整性/ 的/ 度量/ 和/ 检测/ 方法/ 提出/ 了/ 一些/ 思路/ ./ Smith/ 等/ 人/ [/ 5/ ]/ 在/ 构建/ 安全/ 协处理器/ 时/ 考虑/ 了/ 代码/ 更新/ 需要/ 进行/ 完整性/ 检验/ 的/ 问题/ ,/ 采用/ 信任/ 棘齿/ 来/ 保证/ 代码/ 层/ 的/ 重写/ ./ 每个/ 代码/ 层/ 在/ 一个/ 保护/ 段/ 中/ ,/ 通过/ 硬件/ 锁来/ 允许/ 或/ 拒绝/ 对/ 这些/ 段/ 的/ 写访问/ ./ Sailer/ 等/ 人/ [/ 1/ ]/ 设计/ 了/ 基于/ TCG/ 的/ 完整性/ 度量/ 架构/ (/ IntegrityMeasurementArchitecture/ ,/ IMA/ )/ ,/ 它/ 是/ 目前/ Linux/ 内核/ 采用/ 的/ 完整性/ 度量/ 方法/ ,/ 包括/ 度量/ 机制/ 、/ 完整性/ 质疑/ 机制/ 和/ 完整性/ 验证/ 机制/ ,/ 其中/ 度量/ 机制/ 对/ 内核/ 所/ 加载/ 的/ 模块/ 和/ 用户/ 级/ 进程/ 进行/ 度量/ ,/ 在/ 他们/ 被/ 装入/ 内存/ 之前/ 采用/ SHA1/ 算法/ 计算/ 程序/ 的/ hash/ 值/ ./ 计算/ 得到/ 的/ 结果/ 保存/ 在/ 度量/ 列表/ 中/ ,/ 该/ 架构/ 并/ 不能/ 防止/ 度量/ 列表/ 被/ 篡改/ ,/ 而是/ 引入/ 可信/ 平台/ 模块/ (/ TrustedPlatformModule/ ,/ TPM/ )/ 使得/ 远程/ 端/ 能够/ 验证/ 度量/ 列表/ ,/ 以/ 防止/ 欺骗/ 攻击/ ./ 完整性/ 度量/ 架构/ 在/ 实际/ 部署/ 中/ 也/ 有/ 一些/ 应用/ 研究/ [/ 6/ -/ 7/ ]/ ./ Jaeger/ 等/ 人/ [/ 8/ ]/ 提出/ 了/ 基于/ 信息流/ 完整性/ 的/ 度量/ 方法/ PRIMA/ (/ Policy/ -/ ReducedIntegrityMeasurementArchitec/ -/ ture/ )/ ,/ 将/ 可信/ 来源/ 的/ 输入/ 信息/ 定义/ 为/ 高/ 完整性/ ,/ 将/ 可能/ 来自/ 不可/ 信/ 来源/ 的/ 输入/ 信息/ 定义/ 为/ 低/ 完整性/ ,/ 低/ 完整性/ 的/ 信息/ 只有/ 通过/ 了/ 过滤/ 接口/ 才能/ 被/ 接受/ ./ Baliga/ 等/ 人/ [/ 9/ ]/ 提出/ 自动/ 产生/ 内核/ 数据结构/ 完整性/ 规范/ 的/ 方法/ ,/ 采用/ 数据结构/ 不变性/ 的/ 形式/ ,/ 在/ 被/ 监控/ 主/ 机上安装/ 特定/ 的/ 网卡/ ,/ 通过/ 定期/ 抓取/ 内存/ 快照/ 来/ 推理/ 内核/ 数据结构/ 的/ 不变性/ ./ Szekeres/ 等/ 人/ [/ 10/ ]/ 建立/ 了/ 内存/ 腐化/ 攻击/ 的/ 一般/ 模型/ ,/ 将/ 当前/ 的/ 保护/ 技术/ 作为/ 策略/ 以/ 应对/ 各类/ 攻击/ ,/ 其中/ 涉及/ 到/ 完整性/ 的/ 策略/ 包括/ 代码/ 完整性/ 、/ 代码/ 指针/ 完整性/ 、/ 数据完整性/ 、/ 控制流/ 完整性/ 、/ 数据流/ 完整性/ ./ 针对/ 虚拟化/ 运行/ 环境/ 的/ 完整性/ 度量/ ,/ 根据/ 度量/ 软件/ 所处/ 的/ 位置/ 可以/ 将/ 相关/ 研究/ 分成/ 两类/ :/ 一类/ 是/ 将/ 度量/ 软件/ 直接/ 放在/ 虚拟机/ 中/ ,/ 这种/ 方法/ 可以/ 将/ 原有/ 的/ 非/ 虚拟化/ 条件/ 下/ 的/ 度量/ 方法/ 移植/ 到/ 虚拟机/ 中/ ./ Berger/ 等/ 人/ [/ 2/ ]/ 对/ TPM/ 设备/ 进行/ 虚拟化/ ,/ 实现/ 了/ 虚拟/ TPM/ (/ vTPM/ )/ ,/ 每个/ 虚拟机/ 与/ 唯一/ 的/ vTPM/ 实例/ 关联/ ,/ 所有/ 的/ vTPM/ 实例/ 由/ 虚拟机/ 外部/ 的/ vTPM/ 管理器/ 负责/ 创建/ ./ 虚拟机/ 内部/ 只要/ 安装/ 有/ 完整性/ 度量/ 软件/ 便/ 可/ 进行/ 度量/ 操作/ ,/ 利用/ vTPM/ 保证/ 度量/ 列表/ 的/ 完整性/ ./ Stelte/ 等/ 人/ [/ 11/ ]/ 在/ 每个/ 虚拟机/ 中以/ 内核模块/ 的/ 形式/ 安装/ 感知/ 代理/ ,/ 设计/ 了/ 感知/ 完整性/ 度量/ 架构/ (/ SensoryIntegrityMeasurementArchitecture/ ,/ SIMA/ )/ ,/ 由/ 感知/ 代理/ 监控/ 虚拟机/ 内/ 的/ 系统/ 事件/ ,/ 在/ 虚拟机/ 监视器/ 中/ 也/ 安装/ 感知/ 代理/ 负责/ 执行/ 特殊任务/ ,/ 进行/ 完整性/ 监控/ ,/ 虚拟/ 感知/ 代理/ 本身/ 的/ 完整性/ 由/ vTPM/ 来/ 保证/ ./ 所有/ 的/ 感知/ 代理/ 将/ 收集/ 的/ 信息/ 存储/ 在/ 一个/ 共享/ 的/ 内存/ 区域/ 中/ ,/ 由/ 中心/ 监控/ 软件/ 评估/ 这些/ 信息/ 并/ 控制/ 相应/ 的/ 感知/ 代理/ ./ Huh/ 等/ 人/ [/ 12/ ]/ 基于/ 软件/ 白名单/ 设计/ 了/ 一个/ 完整性/ 评估/ 框架/ ,/ 框架/ 的/ 核心/ 是/ 配置/ 解析器/ (/ ConfigurationResolver/ )/ ,/ 利用/ 虚拟/ 应用/ 出版商/ 和/ 软件/ 生产商/ 提供/ 的/ 信息/ ,/ 使用/ 虚拟机/ 配置/ 验证/ 工具/ (/ VMCVT/ )/ 生成/ 验证/ 报告/ ,/ 以/ 检验/ 虚拟机/ 系统/ 中/ 已/ 安装/ 软件/ 的/ 完整性/ ./ 但是/ 从/ 安全性/ 的/ 角度/ 来说/ ,/ 以上/ 研究/ 将/ 度量/ 软件/ 和/ 被/ 度量/ 程序/ 置于/ 同一/ 区域/ ,/ 直接/ 将/ 度量/ 软件/ 暴露/ 出来/ ,/ 易/ 受到/ 攻击/ ./ 第二类/ 是/ 将/ 度量/ 软件/ 放置/ 于/ 虚拟机/ 之外/ ,/ 不/ 需要/ 在/ 虚拟机/ 内部/ 安装/ 任何/ 软件/ ./ Terra/ [/ 13/ ]/ 提供/ “/ 开盒/ Page4/ (/ openbox/ )/ ”/ 虚拟机/ 和/ “/ 闭盒/ (/ closedbox/ )/ ”/ 虚拟机/ ,/ 开盒/ 虚拟机/ 运行/ 一般/ 目的/ 的/ 操作系统/ 和/ 应用程序/ ,/ 闭盒/ 虚拟机/ 运行/ 有/ 特殊要求/ 的/ 应用程序/ ,/ 让/ 程序运行/ 在/ 专有/ 的/ 封闭/ 平台/ 内/ ,/ 平台/ 拥有者/ 不能/ 修改/ 闭盒/ 虚拟机/ ,/ 利用/ 虚拟机/ 监视器/ 提供/ 的/ 隔离/ 性/ 保证/ 闭盒/ 虚拟机/ 的/ 完整性/ ,/ 但是/ 其/ 无法/ 对/ 虚拟机/ 内部/ 程序/ 的/ 运行/ 时/ 完整性/ 进行/ 验证/ ./ Garfinkel/ 等/ 人/ [/ 14/ ]/ 实现/ 了/ 一个/ 基于/ VMwareWorkstation/ 的/ 入侵/ 检测/ 原型/ 系统/ Livewire/ ,/ 该/ 系统/ 分为/ 操作系统/ 接口/ 库/ 和/ 策略/ 引擎/ 两/ 部分/ ,/ 策略/ 引擎/ 中/ 的/ 策略/ 模块/ 可以/ 对/ 虚拟机/ 内/ 的/ 用户/ 态/ 进程/ 进行/ 完整性/ 检验/ ,/ 但是/ 该/ 系统/ 没有/ 考虑/ 虚拟机/ 中/ 其他/ 部分/ 运行/ 时/ 的/ 代码/ 完整性/ ,/ 如/ 内核模块/ ./ Azab/ 等/ 人/ [/ 3/ ]/ 提出/ 基于/ 虚拟机/ 监视器/ 的/ 完整性/ 度量/ 架构/ HIMA/ ,/ 使用/ 主动/ 监控/ 对/ 虚拟机/ 内部/ 事件/ 进行/ 拦截/ ,/ 包括/ 系统/ 调用/ 、/ 中断/ 和/ 异常/ ,/ 在/ 虚拟机/ 监视器/ 内/ 放置/ 挂钩/ ,/ 捕获/ 所有/ 所/ 需/ 的/ 信息/ ./ 但是/ 这种/ 监控/ 方式/ 所/ 带来/ 的/ 代价/ 是/ 对/ 虚拟机/ 的/ 性能/ 影响/ 较大/ ,/ 只要/ 虚拟机/ 有/ 系统/ 调用/ ,/ 虚拟机/ 监视器/ 就要/ 进行/ 相应/ 的/ 处理/ ./ 本文/ 提出/ 了/ 一种/ 利用/ 虚拟机/ 自省/ 技术/ 对/ 虚拟机/ 内部/ 进行/ 完整性/ 度量/ 的/ 机制/ ,/ 虚拟机/ 自省/ 技术/ 为/ 访问/ 虚拟机/ 内存/ 提供/ 了/ 一种/ 研究/ 思路/ ./ Garfinkel/ 等/ 人/ [/ 14/ ]/ 提出/ 虚拟机/ 自省/ (/ VMI/ )/ 的/ 技术/ ,/ 能够/ 从/ 外部/ 检查/ 虚拟机/ ,/ 以/ 分析/ 运行/ 在/ 虚拟机/ 内部/ 的/ 软件/ ./ XenAccess/ [/ 15/ ]/ 不/ 需要/ 对/ 虚拟机/ 监视器/ 进行/ 修改/ ,/ 而是/ 直接/ 利用/ 虚拟机/ 监视器/ 提供/ 的/ 接口/ ,/ 这种/ 方式/ 需要/ 虚拟机/ 监视器/ 的/ 支持/ ,/ 其/ 利用/ 自省/ 技术/ 对/ 虚拟机/ 中/ 正在/ 运行/ 的/ 程序/ 和/ 所/ 加载/ 的/ 内核模块/ 进行/ 监控/ ,/ 仅仅/ 能够/ 列出/ 它们/ 的/ 名称/ ./ 而/ 攻击者/ 在/ 潜入/ 被/ 攻击/ 对象/ 的/ 操作系统/ 后/ ,/ 通常/ 会/ 替换/ 系统/ 中/ 的/ 某些/ 程序/ ,/ 这些/ 被/ 替换/ 程序/ 的/ 名称/ 和/ 原来/ 正常/ 程序/ 的/ 名称/ 是/ 一样/ 的/ ./ 所以/ 其/ 监控/ 的/ 功能/ 比较/ 单一/ ,/ 单纯/ 从/ 名称/ 来/ 监控/ 系统/ 并/ 不/ 容易/ 发现/ 系统/ 是否/ 遭/ 攻击/ ./ 本文/ 采用/ Xen/ [/ 16/ ]/ 作为/ 虚拟机/ 监视器/ ./ Xen/ 直接/ 运行/ 在/ 物理/ 硬件/ 层/ 之上/ ,/ 每个/ 虚拟机/ 称为/ 一个/ 域/ (/ domain/ )/ ./ 在/ 机器/ 启动/ 时/ 建立/ 的/ 初始/ 域/ 是/ Domain0/ ,/ 拥有/ 对/ 其它/ 虚拟机/ 的/ 创建/ 、/ 管理/ 和/ 销毁/ 的/ 权限/ ./ Xen/ 直接/ 负责/ 对/ 底层/ 物理/ 内存/ 的/ 管理/ ,/ 保证/ 虚拟机/ 之间/ 的/ 隔离/ 性/ ./ Xen/ 对外/ 提供/ 了/ 访问/ 虚拟机/ 的/ 相关/ 接口/ ./ Xencontrol/ 用来/ 对/ 虚拟机/ 的/ 底层/ 信息/ 进行/ 访问/ ./ Xenstore/ 类似/ 一个/ 文件系统/ ,/ 存有/ 所/ 创建/ 虚拟机/ 的/ 基本/ 信息/ ,/ 如/ 内存大小/ 、/ 地址/ 宽度/ ,/ 利用/ 这些/ 信息/ 能/ 有效/ 判断/ 虚拟机/ 的/ 体系结构/ ./ 3IVirt/ 设计/ 3.1/ 完整性/ 分析/ 运行/ 时/ 的/ 代码/ 完整性/ 攻击/ 威胁/ 主要/ 可以/ 分为/ 两类/ :/ 一类/ 是/ 将/ 系统/ 本身/ 含有/ 的/ 二进制/ 程序/ 替换/ ;/ 另一类/ 是/ 在/ 程序运行/ 时/ 对/ 其/ 进行/ 替换/ ./ 针对/ 现有/ 的/ 程序/ 完整性/ 攻击/ ,/ 本节/ 对/ 每类/ 攻击/ 进行/ 分析/ ,/ 并/ 说明/ 程序/ 在/ 运行/ 时/ 不变/ 的/ 特征/ ./ 由于/ 系统/ 中/ 存在/ 经常/ 要/ 运行/ 的/ 程序/ ,/ 如/ SSH/ ,/ 所以/ 攻击者/ 通过/ 在/ 这些/ 程序/ 中/ 增加/ 特殊/ 的/ 功能/ ,/ 如/ 开启/ 后门/ ,/ 将/ 原有/ 的/ 程序/ 替换/ 为/ 满足/ 攻击者/ 需要/ 的/ 程序/ ./ 现有/ 的/ 研究/ 大多/ 集中/ 于/ 对/ 磁盘/ 上/ 的/ 二进制/ 程序/ 进行/ 完整性/ 验证/ ,/ 即/ 在/ 程序/ 启动/ 之前/ 先/ 计算/ 其/ hash/ 值/ ,/ 符合/ 安全/ 规则/ 后/ 再/ 让/ 其/ 运行/ ./ 而/ 运行/ 时/ 的/ 完整性/ 也/ 需要/ 得到/ 保障/ ,/ 因为/ 有些/ 攻击/ ,/ 如/ 通过/ ptrace/ ,/ 是/ 针对/ 运行/ 时态/ 的/ 程序/ ,/ 那么/ 启动/ 前/ 验证/ 的/ 程序/ 在/ 运行/ 时/ 就/ 无法/ 保证/ 其/ 完整性/ ./ 程序执行/ 时/ 操作系统/ 将/ 可/ 执行/ 的/ 二进制/ 数据/ 加载/ 到/ 代码段/ 中/ ,/ 同时/ 分配/ 给/ 进程/ 相应/ 的/ 数据/ 段/ 、/ 堆/ 、/ 栈/ 等/ 空间/ ./ 正常/ 情况/ 下/ ,/ 由于/ 程序/ 的/ 运行/ ,/ 数据/ 段/ 、/ 堆/ 、/ 栈/ 等/ 空间/ 的/ 内容/ 会/ 发生/ 改变/ ,/ 但是/ 其/ 代码段/ 不会/ 被/ 篡改/ ./ 而/ 以上/ 两种/ 攻击/ 使/ 程序/ 原来/ 的/ 代码/ 发生/ 了/ 改变/ ,/ 因此/ 在/ 程序/ 加载/ 后/ ,/ 通过/ 检测/ 其/ 代码段/ 可以/ 发现/ 程序/ 是否/ 遭到/ 篡改/ ./ 3.2/ 威胁/ 模型/ 假设/ 攻击者/ 能够/ 进入/ 虚拟机/ ,/ 而且/ 进入/ 虚拟机/ 后/ 拥有/ root/ 权限/ ,/ 所以/ 攻击者/ 进入/ 虚拟机/ 后/ 能够/ 修改/ 、/ 安装/ 、/ 删除/ 任意/ 的/ 文件/ ,/ 包括/ 应用程序/ 、/ 内核模块/ 、/ 动态链接库/ 等/ ./ 修改/ 可以/ 是/ 针对/ 系统/ 中/ 的/ 配置文件/ ,/ 或者/ 针对/ 源代码/ ,/ 以/ 形成/ 满足/ 攻击者/ 特定/ 需要/ 的/ 程序/ ./ 而且/ 攻击者/ 会/ 安装/ 自己/ 的/ 应用程序/ 以及/ 内核模块/ ./ 删除/ 操作/ 可能/ 是/ 将/ 系统日志/ 文件/ 删除/ ,/ 以/ 掩盖/ 攻击者/ 的/ 行踪/ ./ 如果/ 度量/ 软件/ 和/ 被/ 度量/ 系统/ 在/ 同一个/ 环境/ 中/ ,/ 攻击者/ 为了/ 防止/ 攻击/ 被/ 检测/ 到/ ,/ 很/ 可能/ 会/ 对/ 度量/ 软件/ 进行/ 攻击/ ./ 本文/ 的/ 机制/ 不/ 在/ 虚拟机/ 中/ 安装/ 任何/ 软件/ ,/ 所以/ 能够/ 抵御/ 这/ 类/ 攻击/ ./ 假设/ 攻击/ 只/ 针对/ 虚拟机/ 进行/ ,/ 而/ 针对/ 主机/ 的/ 攻击/ 可以/ 采用/ 现有/ 的/ 检测/ 方式/ [/ 1/ ]/ ,/ 以/ 保证/ 主机/ 上/ 的/ 应用程序/ 没有/ 被/ 篡改/ ,/ 所以/ 本文/ 不/ 对/ 基于/ 主机/ 的/ 检测/ 进行/ 讨论/ ./ 虚拟机/ 监视器/ 本身/ 可能/ 存在/ 安全漏洞/ ,/ 攻击者/ Page5/ 可能/ 针对/ 该/ 漏洞/ 发起/ 攻击/ ,/ 因此/ 为了/ 防止/ 这/ 类/ 攻击/ ,/ 虚拟机/ 监视器/ 要/ 能够/ 及时/ 进行/ 安全更新/ ./ 本文/ 的/ 机制/ 由于/ 与/ 虚拟机/ 监视器/ 保持/ 松/ 耦合/ ,/ 所以/ 虚拟机/ 监视器/ 的/ 安全更新/ 可以/ 很/ 容易/ 地/ 安装/ 到/ 本文/ 所/ 提出/ 的/ 架构/ 中/ ./ 3.3/ 体系结构/ 了/ 以下/ 设计/ 原则/ :/ 根据/ 以上/ 威胁/ ,/ 本文/ 从/ 安全性/ 和/ 性能/ 方面/ 考虑/ (/ 1/ )/ 度量/ 软件/ 处于/ 虚拟机/ 外部/ ./ 度量/ 软件/ 置于/ 虚拟机/ 内部/ 可能/ 会/ 受到/ 恶意/ 用户/ 的/ 干扰/ ,/ 降低/ 度量/ 软件/ 的/ 安全性/ ./ 本文/ 的/ 方法/ 通过/ 从/ 虚拟机/ 外部/ 获取/ 虚拟机/ 的/ 内存/ 进行/ 度量/ ,/ 对于/ 虚拟机/ 内部/ 来说/ 是/ 透明/ 的/ ,/ 保证/ 了/ 度量/ 软件/ 的/ 安全性/ ./ (/ 2/ )/ 度量/ 软件/ 应该/ 对/ 虚拟机/ 造成/ 的/ 影响/ 尽可能/ 小/ ./ 不能/ 让/ 虚拟机/ 里/ 的/ 用户/ 感觉/ 到/ 性能/ 有/ 明显降低/ ,/ 采用/ 添加/ 挂钩/ 的/ 方法/ 来/ 拦截/ 系统/ 调用/ 会/ 影响/ 虚拟机/ 的/ 性能/ ,/ 所以/ 本文/ 的/ 方法/ 采用/ 间歇性/ 度量/ 机制/ 对/ 特定/ 的/ 内存/ 进行/ 访问/ ,/ 避免/ 频繁/ 内存/ 访问/ 引起/ 的/ 明显/ 性能/ 代价/ ./ 图/ 1IVirt/ 完整性/ 度量/ 架构/ 度量/ 软件/ IVirt/ 位于/ 虚拟化/ 层/ 的/ 主机/ 中/ ,/ 完成/ 度量/ 工作/ ,/ 包括/ 控制/ 端/ (/ Controller/ )/ 、/ 地址/ 转换/ 部分/ (/ Addresstranslator/ )/ 和/ 完整性/ 度量/ 部分/ (/ Integritymeasurement/ )/ ./ 控制/ 端/ 负责/ 控制/ 完整性/ 度量/ 的/ 整个/ 过程/ ,/ 接收/ 用户/ 输入/ 的/ 一些/ 参数/ ,/ 包括/ 指定/ 要/ 度量/ 的/ 虚拟机/ 名称/ 、/ 被/ 度量/ 对象/ 、/ 虚拟机/ 的/ 操作系统/ 类型/ 等/ ,/ 调用/ 地址/ 转换/ 部分/ 访问/ 特定/ 的/ 虚拟机/ 内存/ ,/ 将/ 内存/ 数据/ 传递/ 给/ 完整性/ 度量/ 部分/ ./ 地址/ 转换/ 部分/ 需要/ 得到/ 虚拟机/ 中/ CPU/ 的/ 状态值/ 、/ 虚拟机/ 地址/ 的/ 长度/ ,/ 同时/ 还要/ 能够/ 访问/ 虚拟机/ 的/ 地址映射/ 接口/ ,/ 所以/ 度量/ 软件/ 会/ 与/ Xencontrol/ 和/ Xenstore/ 进行/ 对接/ ./ 在/ 取得/ 信息/ 之后/ 根据/ 具体/ 的/ 虚拟机/ CPU/ 架构/ ,/ 进行/ 地址/ 转换/ 工作/ ,/ 由此/ 可以/ 获得/ 虚拟机/ 的/ 物理地址/ ./ 根据/ (/ 3/ )/ 度量/ 软件/ 应该/ 尽量/ 和/ 虚拟机/ 监视器/ 松/ 耦合/ ./ 保持/ 低/ 的/ 耦合/ 性/ ,/ 这样/ 才/ 不会/ 造成/ 对/ 虚拟机/ 监视器/ 的/ 依赖性/ 过高/ ,/ 以利于/ 虚拟机/ 监视器/ 和/ 度量/ 软件/ 各自/ 的/ 维护/ ./ 本文/ 的/ 方法/ 尽量避免/ 对/ 虚拟机/ 监视器/ 进行/ 修改/ ,/ 通过/ 接口/ 的/ 方式/ 获得/ 虚拟机/ 内部/ 的/ 信息/ ,/ 以/ 保持/ 好/ 的/ 程序/ 易维护性/ ,/ 防止/ 度量/ 软件/ 过度/ 依赖于/ 虚拟机/ 监视器/ ./ 本文/ 提出/ 的/ 完整性/ 度量/ 系统/ 由/ 硬件/ 层/ 、/ 虚拟机/ 监视器/ 层/ 、/ 虚拟化/ 层/ 3/ 大部分/ 组成/ ,/ 其/ 设计/ 架构/ 如图/ 1/ 所示/ ./ 硬件/ 层/ 包括/ CPU/ 、/ 内存/ 、/ 网络设备/ 、/ 块/ 设备/ 等/ ./ 现代/ 的/ CPU/ 大部分/ 支持/ 虚拟化/ ,/ 如/ IntelVT/ 和/ AMDSVM/ ,/ 以/ 满足/ 虚拟化/ 的/ 性能/ 和/ 安全/ 要求/ ./ 虚拟机/ 监视器/ (/ VirtualMachineMonitor/ ,/ VMM/ )/ 层/ 对/ CPU/ 、/ 内存/ 、/ 网络/ 、/ 块/ 设备/ 完成/ 虚拟化/ 操作/ ./ 在/ 虚拟化/ 层中/ ,/ 由/ 一个/ 负责管理/ 虚拟机/ 的/ 主机/ (/ Host/ )/ 和/ 多个/ 虚拟机/ (/ Guest/ )/ 组成/ ./ 由于/ 本文/ 在/ 具体/ 实现/ 中/ 虚拟机/ 监视器/ 采用/ Xen/ [/ 16/ ]/ ,/ 所以/ 主机/ 中有/ Xen/ 提供/ 的/ 用户/ 接口/ Xencontrol/ 和/ Xenstore/ ./ 拥有/ 特权/ 的/ 用户/ 通过/ Xencontrol/ 和/ Xenstore/ 可以/ 访问/ 得到/ 虚拟机/ 的/ 信息/ ./ 得到/ 的/ 虚拟机/ 内存/ 内容/ ,/ 由/ 完整性/ 度量/ 部分/ 来/ 计算/ 程序/ 、/ 模块/ 以及/ 动态/ 库/ 的/ hash/ 值/ ,/ 并/ 将/ 这些/ 值/ 保存/ 在/ 一个/ 度量/ 列表/ (/ MeasurementList/ )/ 中/ ./ 度量/ 软件/ 根据/ 需要/ 可以/ 定时/ 度量/ 也/ 可以/ 实时/ 度量/ ,/ 新/ 得到/ 的/ 度量/ 值/ 与/ 原来/ 保存/ 在/ 度量/ 列表/ 中/ 的/ 值/ 进行/ 比较/ ,/ 从而/ 可以/ 发现/ 进程/ 是否/ 发生/ 改变/ ./ 3.4/ 地址/ 转换/ 在/ 进行/ 地址/ 转换/ 之前/ ,/ 需要/ 对/ 虚拟机/ 监视器/ 的/ 内存/ 管理/ 进行/ 说明/ ./ 本文/ 采用/ Xen/ 作为/ 虚拟机/ 监视器/ ,/ 其/ 内存/ 管理/ 使用/ 3/ 种/ 地址/ 空间/ ,/ 分别/ 是/ 机器/ 地址/ 、/ 物理地址/ 和/ 虚拟地址/ ./ 机器/ 地址/ ,/ 或者/ 也/ 称为/ 硬件/ 地址/ ,/ 只有/ Xen/ 监视器/ 可以/ 访问/ ,/ 物理地址/ 由/ 虚拟机/ 操作系统/ 进行/ 管理/ ,/ 虚拟地址/ 是/ 应用程序/ 所能/ Page6/ 访问/ 的/ 地址/ ./ 采用/ 这种/ 地址/ 结构/ ,/ 不/ 连续/ 的/ 机器/ 地址/ 就/ 可以/ 转换/ 为/ 看起来/ 连续/ 的/ 物理地址/ ./ 虚拟机/ 所/ 能/ 看到/ 的/ 是/ 物理地址/ ,/ 并/ 不能/ 看到/ 底层/ 的/ 机器/ 地址/ ./ 虚拟机/ 监视器/ 负责/ 把/ 虚拟地址/ 转换/ 为/ 物理地址/ ,/ 同时/ 维护/ 由/ 物理地址/ 到/ 机器/ 地址/ 转换/ 的/ 表/ ./ 完整性/ 度量/ 需要/ 定位/ 出/ 程序/ 在/ 内存/ 中/ 的/ 位置/ ,/ 确切/ 地/ 说/ 是/ 程序/ 在/ 虚拟机/ 物理/ 内存/ 页/ 的/ 偏移/ 位置/ ,/ 所以/ 要/ 先/ 将/ 虚拟机/ 的/ 物理/ 页/ 复制到/ 特权/ 用户/ 可/ 访问/ 的/ 空间/ ,/ 再/ 进行/ 定位/ ,/ 而/ 这个/ 过程/ 需要/ 完成/ 从/ 虚拟地址/ 到/ 物理地址/ 的/ 转换/ ,/ IVirt/ 的/ 地址/ 转换/ 部分/ 实现/ 机制/ 如图/ 2/ 所示/ ./ IVirt/ 读取/ 内核/ 符号表/ ,/ 将/ 内核/ 符号/ 对应/ 的/ 虚拟地址/ 转换/ 为/ 物理地址/ ./ 具体来说/ ,/ 在/ 64/ 图/ 2/ 地址/ 转换机制/ 3.5/ 完整性/ 度量/ 度量/ 得到/ 的/ hash/ 值/ 被/ 保存/ 到/ 度量/ 列表/ 中/ ,/ 同一个/ 程序/ 在/ 不同/ 的/ 时刻/ 出现/ 不同/ 的/ 度量/ 值/ ,/ 那么/ 该/ 程序/ 就/ 被/ 检测/ 出/ 遭到/ 修改/ ./ 要/ 对/ 一个/ 系统/ 进行/ 完整性/ 度量/ ,/ 应该/ 尽可能/ 地/ 度量/ 多种/ 程序/ ./ 本文/ 所提/ 的/ 机制/ 具有/ 广泛/ 的/ 适用性/ ,/ 即/ 只要/ 程序/ 有/ 被/ 加载/ 到/ 内存/ 当中/ ,/ 即可/ 对/ 其/ 进行/ 完整性/ 度量/ ./ 本文/ 根据/ 运行/ 时/ 加载/ 到/ 内存/ 中/ 的/ 程序/ 类型/ ,/ 主要/ 考虑/ 了/ 能够/ 从/ 虚拟机/ 外部/ 检测/ 到/ 的/ 被/ 度量/ 对象/ ,/ 包括/ 进程/ 、/ 内核模块/ 、/ 动态/ 库/ ./ 其他/ 不/ 在/ 本文/ 中/ 列出/ 的/ 可/ 度量/ 对象/ 也/ 可以/ 采用/ 同样/ 的/ 方法/ 进行/ 度量/ ./ 操作系统/ 为/ 方便管理/ 进程/ 和/ 内核模块/ ,/ 会/ 采用/ 链式/ 结构/ 将/ 系统/ 中/ 正在/ 运行/ 的/ 进程/ 和/ 已/ 加载/ 的/ 模块/ 连接起来/ ./ 因此/ 通过/ 这种/ 结构/ 可以/ 获取/ 到/ 被/ 度量/ 对象/ 所在/ 的/ 物理/ 内存/ 区域/ ,/ 再/ 结合/ 前/ 一节/ 所述/ 的/ 地址/ 转换机制/ ,/ 便/ 可以/ 得到/ 被/ 度量/ 对象/ 的/ 硬件/ 内存/ 的/ 内容/ ./ 下面/ 分别/ 对/ 进程/ 、/ 模块/ 和/ 动态链接库/ 具体/ 说明/ 如何/ 根据/ 其/ 内存/ 的/ 存储/ 区域/ 进行/ 完整性/ 度量/ ,/ 本文/ 采用/ sha1/ 来/ 计算/ hash/ 值/ ./ 进程/ 结构/ 如图/ 3/ 所示/ ./ 每个/ 进程/ 由/ 进程/ 控制/ 块/ 管理/ 相关/ 信息/ ,/ 所有/ 进程/ 通过/ 双向/ 链表/ 连接起来/ ./ 通过/ 遍历/ 该/ 链表/ 即可/ 得到/ 系统/ 中/ 运行/ 的/ 进程/ ,/ 进程/ 控位/ x86/ 的/ 体系结构/ 中/ ,/ 如果/ CPU/ 的/ 页/ 式/ 存储/ 功能/ 是/ 打开/ 的/ ,/ 那么/ 虚拟地址/ 由/ 5/ 部分/ 组成/ :/ PML4/ 、/ 页/ 目录/ 指针/ 、/ 页/ 目录/ 、/ 页表/ 、/ 表内/ 偏移/ ./ IVirt/ 获取/ 虚拟机/ CR3/ 寄存器/ 的/ 内容/ ,/ 该/ 寄存器/ 存放/ 着/ 页/ 式/ 层次结构/ PML4/ 的/ 物理/ 基/ 地址/ ,/ 通过/ 逐级/ 转换/ 找到/ 物理地址/ ,/ 完成/ 虚拟地址/ 到/ 物理地址/ 的/ 转换/ ,/ 得到/ 物理/ 页/ 框号/ (/ MFN/ )/ ./ 在/ 主机/ 管理/ 域/ 中/ ,/ 由/ 虚拟机/ 监视器/ 的/ 底层/ 访问控制/ 接口/ libxc/ 负责/ 对/ 机器/ 地址/ 上/ 的/ 内容/ 进行/ 访问/ ./ 根据/ 物理/ 页/ 框号/ 将/ 机器/ 地址/ 上/ 的/ 内容/ 映射/ 到/ 主机/ 能够/ 访问/ 的/ 内存空间/ ,/ 从而/ 得到/ 虚拟机/ 内存/ 的/ 内容/ ./ 在/ 得到/ 所/ 需要/ 的/ 内容/ 后/ ,/ 由/ 度量/ 计算/ 部分/ 负责/ 对/ 相应/ 的/ 内容/ 进行/ 完整性/ 度量/ ./ 制块/ 含有/ 运行/ 进程/ 的/ 名字/ ,/ 根据/ 名字/ 字段/ 到/ 该/ 进程/ 控制/ 块/ 起始/ 地址/ 的/ 偏移/ ,/ 可/ 知道/ 进程/ 的/ 名称/ ./ 进程/ 控制/ 块/ 中/ 有/ 指向/ 内存/ 管理/ 结构/ 的/ 指针/ ,/ 内存/ 管理/ 结构/ 是/ 操作系统/ 管理/ 进程/ 虚拟地址/ 空间/ 分配/ 的/ 结构/ 体/ ./ 进程/ 的/ 虚拟地址/ 空间/ 包括/ 代码段/ 、/ 数据/ 段/ 、/ 堆/ 、/ 栈/ 、/ 参数/ 、/ 环境变量/ 等/ ./ 进程/ 在/ 运行/ 时/ 代码段/ 是/ 不会/ 发生变化/ 的/ ,/ 如果/ 本次/ 运行/ 时/ 进程/ 的/ 代码段/ 与/ 上次/ 运行/ 时/ 不同/ ,/ 说明/ 进程/ 对应/ 的/ 程序/ 发生/ 了/ 变化/ ./ 因此/ ,/ 进程/ 的/ 完/ Page7/ 整性/ 度量/ 通过/ 计算/ 进程/ 代码段/ 的/ hash/ 值来/ 检验/ ./ 模块/ 结构/ 如图/ 4/ 所示/ ./ 模块/ 在/ 系统启动/ 时/ 进行/ 加载/ ,/ 有些/ 模块/ 是/ 在/ 系统启动/ 之后/ 通过/ 用户/ 空间/ 程序/ 进行/ 加载/ 的/ ,/ 不管/ 是/ 哪种/ 方式/ ,/ 其/ 内存空间/ 的/ 分配/ 方式/ 是/ 相同/ 的/ ./ 模块/ 是/ 一种/ 对象/ 文件/ ,/ 不能/ 直接/ 运行/ ,/ 因为/ 它/ 要/ 使用/ 内核/ 导出/ 的/ 符号/ ,/ 是/ 一种/ 可/ 重定向/ 格式/ ./ 模块/ 被/ 读入/ 内存/ 后/ ,/ 由/ 内核/ 进行/ 模块/ 的/ 初始化/ 操作/ ./ 模块/ 在/ 内存/ 中有/ 代码/ 区域/ 和/ 数据/ 区域/ ,/ 而/ 数据/ 区域/ 有/ 只读/ 数据/ 和/ 可/ 读写/ 数据/ ./ 通过/ 计算/ 不可/ 变/ 的/ 区域/ ,/ 即/ 代码/ 区域/ 和/ 只读/ 数据/ 区域/ 得到/ hash/ 值/ ,/ 能够/ 较/ 好/ 地/ 表示/ 出/ 模块/ 的/ 唯一性/ ./ 每个/ 模块/ 都/ 有/ 一个/ 双向/ 链表/ ,/ 链接/ 到/ 前/ 一个/ 模块/ 和/ 后/ 一个/ 模块/ ,/ 还/ 包括/ 一个/ 名字/ 字/ 段/ ,/ 表示/ 模块/ 的/ 名字/ ./ 通过/ 遍历/ 双向/ 链表/ 可/ 得到/ 系统/ 所/ 加载/ 的/ 模块/ ,/ 再/ 根据/ 名字/ 字段/ 到/ 该/ 模块/ 起始/ 地址/ 的/ 偏移/ ,/ 便/ 访问/ 到/ 某个/ 特定/ 的/ 模块/ 内容/ ./ 动态/ 库是/ 程序运行/ 时才/ 被装/ 载入/ 内存/ 的/ ,/ 可以/ 通过/ 动态/ 链接/ 或/ 动态/ 加载/ 来/ 使用/ ,/ 它/ 的/ 存放/ 位置/ 位于/ 使用/ 它/ 的/ 进程/ 的/ 虚拟内存/ 区域/ ,/ 结构/ 如图/ 5/ 所示/ ,/ 图/ 5/ 显示/ 了/ 进程/ 虚拟内存/ 区域/ 的/ 布局/ ./ 程序运行/ 过程/ 中/ 需要/ 调用/ 动态/ 库/ 的/ 函数/ 时/ ,/ 操作系统/ 会/ 搜索/ 动态/ 库/ 在/ 磁盘/ 上/ 的/ 存放/ 位置/ ,/ 将/ 其/ 加载/ 到/ 虚拟内存/ 区域/ ./ 每个/ 虚拟内存/ 区域/ 可/ 分为/ 4/ 类/ :/ 可/ 读/ 、/ 可/ 写/ 、/ 可/ 执行/ 、/ 可/ 共享/ ./ 动态/ 库/ 代码段/ 的/ 存放/ 位置/ 会/ 被/ 标记/ 为/ 可/ 执行/ 区域/ ,/ 通过/ 计算/ 这部分/ 的/ hash/ 值来/ 度量/ 动态/ 库/ ./ 4/ 实现/ 本文/ 实现/ 的/ IVirt/ 采用/ x86/ 架构/ 的/ CPU/ ,/ 而且/ CPU/ 需要/ 有/ 虚拟化/ 支持/ ,/ 目前/ 大多数/ 处理器/ 都/ 能/ 满足/ 这种/ 要求/ ./ 主机/ 操作系统/ 采用/ Ubuntu12/ ./ 04.1/ ,/ 使用/ gcc/ 编译器/ 进行/ 开发/ ./ 虚拟机/ 监视器/ 使用/ Xen4/ ./ 1.4/ ./ Xen/ 提供/ 两种/ 虚拟化/ 模式/ :/ 半/ 虚拟化/ 和/ 硬件/ 辅助/ 虚拟化/ ./ 半/ 虚拟化/ 需要/ 虚拟机/ 内核/ 的/ 支持/ ,/ 硬件/ 辅助/ 虚拟化/ 则/ 不/ 需要/ 修改/ 虚拟机/ 的/ 内核/ ./ 为了/ 能够/ 运行/ 多种/ 虚拟机/ 操作系统/ ,/ 使/ 度量/ 更/ 具有/ 通用性/ ,/ IVirt/ 采用/ 硬件/ 辅助/ 虚拟化/ 模式/ ./ 实现/ IVirt/ 的/ 关键技术/ 难点/ 主要/ 有/ 两个/ :/ 一个/ 是/ 要/ 从/ 主机/ (/ Host/ )/ 中/ 得到/ 虚拟机/ (/ Guest/ )/ 所/ 需/ 内容/ 的/ 内存/ 页/ ./ 虚拟机/ 操作系统/ 的/ 内核/ 符号表/ 含有/ 内核/ 符号/ 变量/ 的/ 虚拟地址/ ,/ 但是/ 直接/ 利用/ 虚拟地址/ 无法访问/ 到/ 所/ 需/ 的/ 虚拟机/ 内存空间/ ./ IVirt/ 通过/ 将/ 虚拟地址/ 转换/ 为/ 物理/ 页/ 框号/ ,/ 如图/ 2/ 所示/ ,/ 再/ 利用/ Xencontrol/ 得到/ 虚拟机/ 内存/ 页/ ./ 第/ 2/ 个/ 是/ 准确/ 定位/ 到/ 被/ 度量/ 对象/ 的/ 位置/ ,/ 这里/ 存在/ 语义/ 鸿沟/ 问题/ ./ 得到/ 的/ 内存/ 页/ 数据/ 都/ 是/ 底层/ 的/ 二进制/ 形式/ ,/ 根据/ 虚拟机/ 操作系统/ 的/ 内核/ 数据结构/ ,/ 将/ 这些/ 底层/ 的/ 二进制/ 数据/ 对应/ 到/ 高层/ 的/ 语义/ 中/ ./ 数据结构/ 中/ 各/ 成员/ 变量/ 的/ 值/ 利用/ 该/ 成员/ 变量/ 的/ 偏移量/ 进行/ 查找/ ./ 由于/ 数据结构/ 中/ 存在/ 着/ 指针/ ,/ 指针/ 指向/ 的/ 位置/ 也/ 是/ 虚拟地址/ ,/ 如前所述/ ,/ 直接/ 利用/ 虚拟地址/ 无法/ 得到/ 所/ 需/ 的/ 内存/ ,/ 所以/ 虚拟地址/ 都/ 需要/ 转换/ 为/ 物理/ 页/ 框号/ ./ 因此/ 每/ 一次/ 通过/ 虚拟地址/ 对/ 虚拟机/ 内存/ 的/ 访问/ 都/ 要/ 进行/ 地址/ 转换/ ,/ 最终/ 找到/ 所/ 要/ 度量/ 的/ 代码段/ 位置/ ./ 得到/ 代码段/ 的/ 数据/ 后/ ,/ IVirt/ 采用/ sha1/ 算法/ 来/ 计算/ Hash/ 值/ ./ 5/ 实验/ 及/ 评价/ 本/ 实验/ 将/ 对/ 所/ 提出/ 的/ 完整性/ 度量/ 方法/ 进行/ 功能/ 评估/ 和/ 性能/ 评估/ ./ 功能/ 评估/ 是/ 为了/ 测试/ 所提/ 方法/ 是否/ 能够/ 从/ 虚拟机/ 外部/ 检测/ 出/ 虚拟机/ 内部/ 程序/ 遭到/ 篡改/ ,/ 性能/ 评估/ 是/ 为了/ 评价/ 所提/ 方法/ 对/ 磁盘/ I/ // O/ 、/ 操作系统/ 产生/ 的/ 性能/ 代价/ ,/ 包括/ 主机/ 的/ 性能/ 和/ 虚拟机/ 的/ 性能/ ./ 性能/ 评估/ 采用/ 对比/ 的/ 方式/ 进行/ ,/ 将/ 本文/ 所/ 提方/ Page8/ 法/ 与/ 无/ 完整性/ 度量/ 的/ 情况/ 进行/ 对比/ ,/ 以此/ 说明/ 本文/ 所提/ 方法/ 引入/ 的/ 性能/ 代价/ ./ 实验组/ 为/ 虚拟机/ 自省/ 方式/ 的/ 完整性/ 度量/ ,/ 对照组/ 为/ 无/ 度量/ 方式/ ./ 实验/ 在/ 服务器上进行/ ,/ 硬件/ 环境/ 配置/ 如表/ 1/ 所示/ ,/ 软件/ 环境/ 默认/ 配置/ 如表/ 2/ 所示/ ./ 配置/ 项/ CPUIntel/ ?/ XeonX565024/ 核/ 三级/ 缓存/ 12288KB/ 频率/ 2666.854/ MHz/ 内存/ 33545332KB/ 一级/ 缓存/ 二级缓存/ 操作系统/ Ubuntu12/ ./ 04.1/ 操作系统/ Ubuntu12/ ./ 04.1/ 虚拟机/ 监视器/ (/ VMM/ )/ Xen4/ ./ 1.45/ ./ 1/ 功能/ 检测/ 功能/ 检测/ 是/ 为了/ 评估/ 本文/ 所提/ 方法/ 是否/ 能够/ 发现/ 被/ 度量/ 对象/ 遭到/ 篡改/ ./ 这里/ 功能/ 检测/ 将/ 对/ 进程/ 的/ 度量/ 和/ 模块/ 的/ 度量/ 进行/ 说明/ ,/ 而/ 其他/ 被/ 度量/ 对象/ ,/ 如/ 动态/ 库/ ,/ 其/ 度量/ 的/ 实现/ 原理/ 是/ 类似/ 的/ ,/ 采用/ 同样/ 的/ 方法/ 也/ 能够/ 达到/ 一样/ 的/ 效果/ ./ 在/ 进程/ 度量/ 的/ 实验/ 中/ ,/ 通过/ 对系统/ 中/ 经常/ 存在/ 的/ SSH/ 程序/ 发起/ 攻击/ 来/ 说明/ 本文/ 方法/ 的/ 有效性/ ./ SSH/ 是/ 远程/ 连接/ 的/ 程序/ ,/ 攻击者/ 通过/ 攻击/ 该/ 程序/ 使/ 系统/ 留下/ 后门/ ,/ 方便/ 攻击者/ 再次/ 登录/ ./ 实验/ 结果/ 如图/ 6/ 所示/ ,/ 图/ 6/ (/ a/ )/ 显示/ 攻击/ 之前/ 采用/ 本文/ 的/ 机制/ 对系统/ 中/ 的/ 所有/ 程序/ 进行/ 度量/ ,/ 计算/ 出/ 所有/ 进程/ 的/ hash/ 值/ ./ 图/ 6/ (/ b/ )/ 显示/ 攻击/ 之后/ 的/ 情形/ ,/ 攻击者/ 对/ SSH/ 程序/ 攻击/ 成功/ 后/ ,/ 该/ 程序/ 已/ 被/ 替换成/ 攻击者/ 修改/ 过/ 的/ 程序/ ,/ 其/ hash/ 值/ 也/ 会/ 发生/ 改变/ ./ 在/ 模块/ 度量/ 的/ 实验/ 中/ ,/ 采用/ 对/ 测试/ 模块/ 篡改/ 的/ 方式/ 进行/ 测试/ ,/ 因为/ 任何/ 拥有/ 特权/ 的/ 用户/ 都/ 可以/ 插入/ 模块/ ./ 实验/ 采用/ 测试/ 模块/ 是因为/ 需要/ 模拟/ 对/ 模块/ 进行/ 篡改/ 攻击/ ,/ 而/ 不/ 影响/ 系统/ 中/ 其他/ 模块/ 的/ 运作/ ./ 先/ 插入/ 测试/ 模块/ ,/ 利用/ 本文/ 所提/ 方法/ 对系统/ 中/ 的/ 所有/ 模块/ 进行/ 度量/ ./ 在/ 对/ 测试/ 模块/ 进行/ 篡改/ 后/ ,/ 可以/ 检测/ 到/ 其/ hash/ 值/ 发生/ 了/ 变化/ ./ 实验/ 结果/ 如图/ 7/ 所示/ ./ 图/ 7/ (/ a/ )/ 是/ 篡改/ 之前/ 模块/ 的/ hash/ 值/ ,/ 图/ 7/ (/ b/ )/ 是/ 篡改/ 之后/ 的/ hash/ 值/ ./ 从图/ 7/ 中/ 可以/ 看出/ ,/ 模块/ 篡改/ 前/ 和/ 篡改/ 后/ 其/ 名称/ 语义/ 并/ 没有/ 发生变化/ ,/ 而/ 测试/ 模块/ 的/ hash/ 值/ 在/ 篡改/ 后/ 不同/ 了/ ./ 这/ 说明/ 本文/ 所提/ 方法/ 确实/ 能够/ 从/ 虚拟机/ 外部/ 检测/ 出/ 虚拟机/ 内部/ 模块/ 的/ 更改/ ./ 这种/ 篡改/ 攻击/ 的/ 方式/ 能够/ 通过/ 完整性/ 度量/ 检测/ 出来/ ./ 5.2/ 性能/ 检测/ 本/ 节/ 通过/ 性能/ 检测/ 实验/ ,/ 分别/ 对/ 虚拟机/ 的/ 性能/ 和/ 主机/ 的/ 性能/ 进行/ 测试/ ./ 在/ 虚拟机/ 的/ 性能/ 测试/ 中/ ,/ 对比/ 不/ 进行/ 完整性/ 度量/ 和/ 进行/ 完整性/ 度量/ 的/ 性能/ ,/ 来/ Page9/ 说明/ 本文/ 的/ 方法/ 并/ 不会/ 带来/ 很/ 高/ 的/ 代价/ ./ 实验/ 分为/ 底层/ 级/ 测试/ 、/ 操作系统/ 级/ 测试/ 和/ 应用程序/ 级/ 测试/ ,/ 分别/ 采用/ Nbench/ [/ 17/ ]/ 、/ Hbench/ [/ 18/ ]/ 和/ TPCC/ -/ UVa/ [/ 19/ ]/ 测试工具/ ./ 而/ 在/ 主机/ 的/ 性能/ 测试/ 中/ ,/ 测量/ 完成/ 完整性/ 度量/ 所/ 消耗/ 的/ 时间/ ./ 为/ 说明/ 本文/ 方法/ 引入/ 的/ 代价/ 较/ 小/ ,/ 性能/ 实验/ 还/ 对/ 采用/ 系统/ 调用/ 拦截/ 机制/ 的/ 完整性/ 度量/ 方法/ 进行/ 对比/ ./ Nbench/ 是/ 测试/ 系统/ 的/ CPU/ 、/ FPU/ 和/ 内存/ 管理/ 的/ 测试工具/ ,/ 基于/ BYTEmark/ [/ 17/ ]/ 测试程序/ 的/ 第/ 2/ 版/ ,/ 测试/ 算法/ 没有/ 改变/ ,/ 主要/ 是/ 能够/ 更好/ 地/ 适应/ 64/ 位/ 机器/ 的/ 测试/ ./ 实验/ 的/ 软件/ 配置/ 为表/ 2/ ,/ 实验/ 中/ 通过/ 设置/ 不同/ 的/ 扫描时间/ 间隔/ 来/ 测试/ 完整性/ 度量/ 对/ 虚拟机/ 内/ 底层/ 性能/ 的/ 影响/ ,/ 测试/ 中/ 选择/ 针对/ 进程/ 的/ 完整性/ 度量/ 进行/ ./ 结果/ 如表/ 3/ 所示/ ./ NUMERICSORT1230/ ./ 41261.81312/ ./ 6STRINGSORT713/ ./ 72741773.64/ BITFIELD5/ ./ 31E/ +/ 085.51/ E/ +/ 085.72/ E/ +/ 08FPEMULATION274284/ ./ 56296.76/ FOURIER337973494736287ASSIGNMENT40/ ./ 21541.65343/ ./ 325IDEAHUFFMAN2805/ ./ 32903.83011/ ./ 6NEURALNET73/ ./ 5276.3279/ ./ 288LUDECOMPOSITION1945/ ./ 62024.42098/ ./ 6/ 表/ 3/ 中/ 的/ 结果/ 共有/ 10/ 项/ 测试/ ,/ 每/ 项/ 测试/ 表示/ 每秒/ 能够/ 完成/ 的/ 测试/ 个数/ ,/ 进行/ 多次/ 测试/ 取/ 平均值/ ,/ 数值/ 越大/ 表明/ 处理速度/ 越快/ ./ 在/ 这/ 10/ 项/ 测试/ 当中/ ,/ 无/ 完整性/ 度量/ 的/ 性能/ 略高于/ 2s/ 时间/ 间隔/ 的/ 度量/ ,/ 而/ 2s/ 时间/ 间隔/ 度量/ 的/ 性能/ 略高于/ 1s/ 时间/ 间隔/ 度量/ 的/ 性能/ ./ 这是/ 由于/ 无/ 完整性/ 度量/ 时/ ,/ 物理/ CPU/ 资源/ 供/ 虚拟机/ 使用/ ,/ 并/ 没有/ 其他/ 程序/ 占用/ 该/ 资源/ ./ 当/ 特权/ 域/ 中/ 有/ 程序/ 要/ 占用/ CPU/ 资源/ 时/ ,/ 会/ 优先/ 将/ 资源分配/ 给/ 特权/ 域/ 中/ 的/ 程序/ 使用/ ,/ 虚拟机/ 中/ 的/ 程序/ 需要/ 暂时/ 的/ 等待/ ,/ 等/ 特权/ 域/ 中/ 程序运行/ 完后/ 虚拟机/ 中/ 的/ 程序/ 再/ 继续/ 运行/ ,/ 所以/ 在/ 虚拟机/ 外部/ 没有/ 程序运行/ 时/ 的/ 性能/ 会/ 稍/ 高/ 一些/ ./ 而且/ 度量/ 程序/ 的/ 间隔时间/ 越短/ ,/ 该/ 程序/ 的/ CPU/ 占用/ 时间/ 就会/ 越长/ ,/ 测试程序/ 的/ 性能/ 影响/ 就/ 会/ 相应/ 增高/ ./ 但是/ 这种/ 性能/ 开销/ 的/ 相差/ 并/ 不会/ 太/ 大/ ,/ 从总体上/ 可以/ 看出/ ,/ 进行/ 完整性/ 度量/ 与/ 不/ 进行/ 完整性/ 度量/ 每秒/ 完成/ 的/ 测试/ 个数/ 保持/ 在/ 同一/ 数量级/ 上/ ./ 在/ 1s/ 时间/ 间隔/ 的/ 度量/ 中/ ,/ STRINGSORT/ 测试/ 与/ 无/ 完整性/ 度量/ 相比/ 引入/ 的/ 性能/ 消耗/ 是/ 最高/ 的/ ,/ 处理速度/ 降低/ 了/ 约/ 7.75/ %/ ,/ 而/ 在/ 2s/ 时间/ 间隔/ 的/ 度量/ 中/ ,/ STRINGSORT/ 测试/ 的/ 处理速度/ 降低/ 了/ 约/ 4.22/ %/ ./ 所以/ 度量/ 间隔时间/ 越长/ ,/ 引入/ 的/ 代价/ 越小/ ./ Hbench/ [/ 18/ ]/ 是/ 一个/ 操作系统/ 级/ 的/ 测试工具/ ,/ 能够/ 测试/ 内存/ 的/ 延迟/ 和/ 带宽/ ./ 实验/ 通过/ 对/ 常用/ 的/ 文件/ 映射/ 系统/ 函数/ mmap/ 和/ 文件/ 读取/ 系统/ 函数/ read/ 进行/ 测试/ ,/ 来/ 评估/ 完整性/ 度量/ 给/ 虚拟机/ 内/ 系统/ 函数/ 带来/ 的/ 性能/ 影响/ ./ 为了/ 进行/ 对比/ ,/ 实验/ 由/ 每隔/ 两秒/ 进行/ 一次/ 完整性/ 度量/ 和/ 无/ 完整性/ 度量/ 组成/ ,/ 其/ 结果/ 如图/ 8/ 所示/ ./ 在/ 图/ 8/ (/ a/ )/ 中/ ,/ 横坐标/ 表示/ 映射/ 的/ 磁盘/ 文件大小/ ,/ 纵坐标/ 表示/ 从/ mmap/ 操作/ 开始/ 到/ mmap/ 操作/ 结束/ 所用/ 的/ 延迟时间/ ./ 函数/ mmap/ 将/ 磁盘/ 文件/ 数据/ 直接/ 映射/ 到/ 用户/ 进程/ 的/ 地址/ 空间/ ,/ 使/ 文件/ 的/ 读取/ 无需/ 在/ 内核/ 空间/ 和/ 用户/ 空间/ 切换/ ./ 总体/ 上/ 来说/ ,/ 映射/ 的/ 文件/ 越大/ ,/ mmap/ 操作/ 的/ 延迟时间/ 也/ 就/ 越/ 大/ ,/ 但是/ 并/ 不/ Page10/ 是/ 严格/ 单调/ ,/ 而是/ 会/ 有/ 局部/ 的/ 上下/ 波动/ ,/ 在/ 1MB/ 文件大小/ 之后/ 延迟时间/ 趋于平稳/ ./ 在/ 完整性/ 度量/ 下/ ,/ 1MB/ 文件大小/ 之后/ 的/ 延迟时间/ 都/ 在/ 0.9/ μ/ s/ 以上/ ,/ 无/ 完整性/ 度量/ 下/ 的/ 延迟时间/ 都/ 在/ 0.8/ μ/ s/ 以上/ ./ 由于/ 2s/ 间隔/ 的/ 完整性/ 度量/ 需要/ 暂停/ 虚拟机/ ,/ 计算/ 出/ 所有/ 进程/ 的/ hash/ 值/ ,/ 所以/ 其/ 延迟时间/ 比/ 无/ 完整性/ 度量/ 的/ 延迟时间/ 稍大/ ./ 从/ 4MB/ 到/ 8MB/ 文件/ 的/ 测试/ 中/ ,/ 以/ 完整性/ 度量/ 情况/ 下/ 的/ 最大/ 延迟时间/ 为例/ ,/ 是/ 在/ 2MB/ 文件大小/ 处/ ,/ 比/ 无/ 完整性/ 度量/ 的/ 情况/ 只/ 增加/ 了/ 0.128416/ μ/ s/ 的/ 延迟时间/ ,/ 所以/ 总体/ 来说/ 采用/ 完整性/ 度量/ 对/ mmap/ 的/ 性能/ 影响/ 是/ 较/ 小/ 的/ ./ 文件/ 重复/ 读/ 带宽/ 是/ 度量/ 具有/ 缓冲区/ 功能/ 的/ 文件/ 读取/ 操作/ 所/ 能/ 达到/ 的/ 带宽/ ./ 应用程序/ 读取/ 文件/ 时会/ 调用/ 文件/ 读/ 函数/ read/ (/ )/ ,/ 该/ 函数/ 会先/ 将/ 文件/ 数据/ 读入/ 内核/ 缓冲区/ ,/ 待/ 缓冲区/ 填满/ 后/ 再/ 将/ 文件/ 数据/ 读入/ 变量/ ./ 在/ 图/ 8/ (/ b/ )/ 的/ 实验/ 结果/ 中/ ,/ 横坐标/ 表示/ 设置/ 的/ 文件系统/ 缓冲区/ 大小/ ,/ 纵坐标/ 表示/ 带宽/ ./ 设置/ 文件大小/ 为/ 固定值/ 2MB/ ,/ 缓冲区/ 的/ 大小/ 从/ 4MB/ 递增/ 到/ 2MB/ ./ 从图/ 中/ 可以/ 看出/ ,/ 随着/ 缓冲区/ 大小/ 的/ 增加/ ,/ 带宽/ 先/ 逐渐/ 增大/ ,/ 之后/ 再/ 下降/ ,/ 最终/ 会/ 趋于稳定/ 值/ ./ 两种/ 方法/ 都/ 是/ 在/ 缓冲区/ 大小/ 设置/ 为/ 64MB/ 时/ 达到/ 最大值/ ,/ 说明/ 缓冲区/ 设置/ 为/ 64MB/ 能/ 发挥/ 文件/ 读取/ 的/ 最大/ 性能/ ,/ 采用/ 2s/ 间隔/ 的/ 完整性/ 度量/ 并/ 不会/ 影响/ 最大/ 文件/ 重复/ 读/ 带宽/ 的/ 特性/ ./ 在/ 64MB/ 的/ 缓冲区/ 条件/ 下/ ,/ 2s/ 间隔/ 的/ 完整性/ 度量/ 比/ 无/ 完整性/ 度量/ 下降/ 的/ 带宽/ 约/ 为/ 1.15/ %/ ,/ 下降/ 幅度/ 最大/ 的/ 情况/ 是/ 在/ 4MB/ 的/ 缓冲区/ ,/ 但是/ 幅度/ 也/ 仅/ 为/ 1.53/ %/ ,/ 可见/ ,/ 2s/ 间隔/ 的/ 完整性/ 度量/ 对/ 文件/ 重复/ 读/ 的/ 带宽/ 影响/ 是/ 较/ 小/ 的/ ./ 实验/ 还/ 测试/ 了/ 其它/ 一些/ 系统/ 调用函数/ 的/ 延迟时间/ ,/ 结果/ 如图/ 8/ (/ c/ )/ 所示/ ./ 函数/ getpid/ 获取/ 调用/ 进程/ 的/ id/ 号/ ,/ getrusage/ 获取/ 调用/ 进程/ 或/ 调用/ 线程/ 的/ 资源/ 使用/ 情况/ ,/ gettimeofday/ 获取/ 系统/ 时间/ ,/ sbrk/ 增加/ 程序/ 的/ 数据/ 空间/ ,/ sigaction/ 改变/ 进程/ 收到/ 某个/ 信号/ 后/ 所/ 执行/ 的/ 行为/ ,/ write/ 将/ 缓冲区/ 数据/ 写入/ 文件/ ./ 在/ 这/ 6/ 个/ 系统/ 调用/ 当中/ ,/ getrusage/ 测试/ 引入/ 的/ 时间/ 最高/ ,/ 2s/ 间隔/ 的/ 完整性/ 度量/ 比/ 无/ 完整性/ 度量/ 多/ 花费/ 了/ 0.0127/ μ/ s/ ./ 所以/ 可以/ 看出/ ,/ 完整性/ 度量/ 引入/ 的/ 时间延迟/ 代价/ 是/ 较/ 小/ 的/ ./ 如图/ 9/ 所示/ 的/ 是/ 采用/ TPCC/ -/ UVa/ [/ 19/ ]/ 对/ 本文/ 的/ 架构/ 中/ 虚拟机/ 内部/ 性能/ 进行/ 测试/ ,/ 该/ 基准/ 测试程序/ 模拟/ 一个/ 在线/ 交易/ 处理/ 环境/ ,/ 能够/ 较/ 好/ 地/ 反映/ 出/ 系统/ 在/ 应用程序/ 级别/ 上/ 的/ 负载/ 情况/ ./ 实验/ 中/ 设置/ 数据仓库/ 个数/ 为/ 3/ ,/ 每个/ 数据仓库/ 的/ 终端/ 数为/ 10/ ,/ 度量/ 时间/ 为/ 120min/ ./ 如图/ 9/ (/ a/ )/ 所示/ 是/ 虚拟机/ 对/ 性能/ 负载/ 新/ 订单/ 的/ 处理/ 能力/ ,/ 该/ 实验/ 对/ 虚拟机/ 中/ 进程/ 的/ 完整性/ 每隔/ 两秒/ 度量/ 一次/ ./ 图/ 9/ 中/ 曲线/ 表示/ 随着/ 虚拟机/ 的/ 运行/ ,/ 系统/ 每分钟/ 能/ 处理/ 的/ 订单/ 数量/ ./ 曲线/ 的/ 前面/ 部分/ 是/ 订单/ 处理/ 的/ 上升期/ ,/ 在/ 模拟/ 刚/ 开始/ 时/ ,/ 订单数/ 较/ 少/ ,/ 还/ 未/ 达到/ 系统/ 能够/ 处理/ 订单/ 的/ 稳定/ 值/ ,/ 所以/ 曲线/ 不断/ 上升/ ./ 随着/ 订单数/ 不断/ 增多/ ,/ 系统/ 每分钟/ 能够/ 处理/ 的/ 订单数/ 趋于稳定/ 状态/ ,/ 这/ 说明/ 订单/ 处理/ 达到/ 了/ 系统/ 所/ 能/ 承载/ 的/ 能力/ ./ 为了/ 与/ 无/ 完整性/ 度量/ 时/ 的/ 性能/ 负载/ 进行/ 对比/ ,/ 图/ 9/ (/ b/ )/ 显示/ 了/ 不/ 进行/ 完整性/ 度量/ 与/ 每隔/ 两秒/ 完整性/ 度量/ 的/ 吞吐/ 率/ 差值/ 图/ ./ 曲线/ 在/ 前面/ 部分/ 的/ 波动/ 较大/ 是因为/ 处于/ 订单/ 处理/ 的/ 上升期/ ,/ 不/ 进行/ 完整性/ 度量/ 和/ 进行/ 完整性/ 度量/ 的/ 系统/ 都/ 在/ 模拟/ 的/ 初始/ 阶段/ ./ 在/ 这个/ 阶段/ ,/ 模拟/ 的/ 远程/ 终端/ 进程/ 会/ 不断/ 启动/ ,/ 两种/ 情况/ 下/ 相同/ 的/ 时间/ 范围/ 内/ 系统启动/ 的/ 进程/ 数/ 不同/ ,/ 所/ 处理/ 的/ 订单数/ 是/ 不同/ 的/ ./ 在/ 无/ 完整性/ 度量/ 的/ 情况/ 下/ ,/ 不/ 需要/ 对/ 虚拟机/ 进行/ 暂停/ 操作/ 和/ 度量/ 这些/ 进程/ ,/ 而/ 在/ 有/ 完整性/ 度量/ 的/ 情况/ 下/ ,/ 虚拟/ 机会/ 被/ 暂停/ ,/ 度量/ 进程/ 也/ 会/ 有/ 相应/ 的/ 时间/ 消耗/ ,/ 导致/ 这/ 两种/ 情况/ 在/ 上升期/ 的/ 时间/ 范围/ 内/ 吞吐/ 率/ 出现/ 较大/ 的/ 波动/ ./ 而/ 当/ 两个/ 系统/ 都/ 处于/ 稳定期/ 后/ ,/ 完整性/ 度量/ 与/ 不/ 进行/ 完整性/ 度量/ 的/ 吞吐/ 率/ 差值/ 在/ ±/ 0.1/ 之间/ 波动/ ,/ 所以/ 这种/ 性能/ 代价/ 并/ 不/ 高/ ./ Page11/ 对/ 主机/ 性能/ 影响/ 的/ 测试/ 如图/ 10/ 所示/ ,/ 分别/ 是/ 对/ 进程/ 和/ 模块/ 进行/ 一次/ 度量/ 产生/ 的/ 时间/ 消耗/ ./ 实验/ 中/ 设置/ 虚拟机/ 的/ 内存/ 不断/ 增大/ ,/ 分别/ 对/ 不同/ 内存/ 的/ 虚拟机/ 测量/ 从/ 度量/ 开始/ 到/ 度量/ 完成/ 所/ 消耗/ 的/ 时间/ ./ 进程/ 度量/ 的/ 时间/ 消耗/ 在/ 0.08/ s/ ~/ 0.09/ s/ 之间/ 范围/ 内/ 波动/ ,/ 模块/ 度量/ 的/ 时间/ 消耗/ 在/ 0.05/ s/ ~/ 0.06/ s/ 之间/ 范围/ 内/ 波动/ ,/ 所以/ 度量/ 的/ 时间/ 消耗/ 较/ 小/ ./ 而/ 系统/ 中/ 的/ 进程/ 数量/ 一般/ 会/ 比/ 模块/ 的/ 数量/ 多/ ,/ 所以/ 进程/ 度量/ 的/ 时间/ 消耗/ 会/ 略高于/ 模块/ 度量/ 的/ 时间/ 消耗/ ./ 此外/ ,/ 这/ 两个/ 结果/ 还/ 表明/ 随着/ 虚拟机/ 内存/ 的/ 增大/ ,/ 度量/ 的/ 消耗/ 时间/ 并/ 没有/ 明显/ 的/ 呈/ 递增/ 或/ 递减/ 趋势/ ,/ 所以/ 内存大小/ 的/ 变化/ 对于/ 本文/ 的/ 度量/ 方法/ 影响/ 较/ 小/ ./ 除了/ 以上/ 对/ 引入/ 完整性/ 度量/ 和/ 无/ 完整性/ 度量/ 的/ 比较/ 外/ ,/ 本文/ 还/ 将/ IVirt/ 与/ 采用/ 系统/ 调用/ 拦截/ 方式/ 的/ 完整性/ 度量/ 进行/ 实验/ 对比/ 分析/ ,/ 来/ 说明/ 本文/ 的/ 方法/ 引入/ 的/ 性能/ 代价/ 较/ 小/ ./ HIMA/ [/ 3/ ]/ 通过/ 拦截/ 系统/ 调用/ ,/ 在/ 进程/ 启动/ 前/ 进行/ 完整性/ 度量/ ./ 为/ 方便/ 与其/ 对比/ ,/ 实验/ 采用/ HIMA/ 中/ 使用/ 的/ 性能/ 测试工具/ UnixBench/ ,/ 测试/ 虚拟机/ 的/ 性能/ ,/ 实验/ 结果/ 如图/ 11/ 所示/ ./ 图/ 11/ 中/ 横坐标/ 表示/ 测试/ 项/ ,/ 纵坐标/ 表示/ 采用/ IVirt/ 度量/ 测试/ 结果/ 与/ 无/ 完整性/ 度量/ 测试/ 结果/ 的/ 比值/ ./ 在/ HIMA/ 的/ 测试/ 结果/ [/ 3/ ]/ 中/ ,/ 引入/ 负载/ 较大/ 的/ 是/ ExeclThroughput/ 、/ ProcessCreation/ 、/ ShellScripts/ (/ 8concurrent/ )/ ./ 而/ 从/ 图/ 11/ 中/ 可以/ 看出/ ,/ IVirt/ 引入/ 的/ 负载/ 并/ 不/ 十分/ 明显/ ./ HIMA/ 通过/ 缓存/ 内存/ 页/ 的/ hash/ 值来/ 降低/ 计算/ 负载/ ./ 测试/ ExeclThroughput/ 的/ 有/ 缓存/ 和/ 无/ 缓存/ 分别/ 引入/ 的/ 负载/ 是/ 31/ %/ 和/ 75/ %/ ./ 测试/ ProcessCreation/ 的/ 有/ 缓存/ 引入/ 的/ 负载/ 是/ 21/ %/ ,/ 无/ 缓存/ 时/ 引入/ 的/ 负载/ 和/ 有/ 缓存/ 时/ 的/ 相差/ 不大/ ./ 测试/ ShellScripts/ (/ 8concurrent/ )/ 的/ 有/ 缓存/ 和/ 无/ 缓存/ 分别/ 引入/ 的/ 负载/ 是/ 43/ %/ 和/ 99/ %/ ./ 而/ Ivirt/ 在/ ExeclThroughput/ 测试/ 下/ 引入/ 负载/ 是/ 0.22/ %/ ,/ ProcessCreation/ 测试/ 引入/ 的/ 负载/ 是/ 3.62/ %/ ,/ ShellScripts/ (/ 8concurrent/ )/ 测试/ 引入/ 的/ 负载/ 是/ 1.30/ %/ ,/ 均/ 低于/ HIMA/ 引入/ 的/ 负载/ 值/ ./ 由于/ HIMA/ 在/ 发生/ 系统/ 调用/ 时/ 就/ 触发/ hash/ 值/ 的/ 计算/ ,/ 而/ IVirt/ 是/ 在/ 程序/ 加载/ 到/ 内存/ 中后/ 才/ 计算/ hash/ 值/ ,/ 避免/ 了/ 系统/ 调用/ 引入/ 的/ 代价/ ./ 因此/ ,/ IVirt/ 引入/ 的/ 性能/ 代价/ 比/ 系统/ 调用/ 拦截/ 引入/ 的/ 性能/ 代价/ 较/ 小/ ./ 6/ 结论/ 在/ 云/ 计算/ 中/ ,/ 虚拟机/ 内/ 的/ 程序/ 存在/ 被/ 篡改/ 的/ 可能/ ./ 本文/ 分析/ 了/ 虚拟机/ 运行/ 时/ 的/ 完整性/ 问题/ ,/ 提出/ 了/ 基于/ 虚拟机/ 自省/ 的/ 完整性/ 度量/ 方法/ IVirt/ ,/ 通过/ 将/ 虚拟机/ 内存/ 的/ 内容/ 映射/ 到/ 主机/ 上/ ,/ 实现/ 对/ 虚拟机/ 内部/ 的/ 完整性/ 度量/ ./ 该/ 方法/ 将/ 度量/ 软件/ 与/ 被/ 度量/ 系统/ 分开/ ,/ 实现/ 了/ 安全/ 隔离/ ,/ 避免/ 暴露/ 监控/ 软件/ ./ 通过/ 实验/ 表明/ ,/ 在/ 功能/ 上/ 本文/ 的/ 方法/ 能够/ 检测/ 出/ 被/ 度量/ 对象/ 是否/ 遭/ 篡改/ ,/ 实现/ 对/ 代码/ 完整性/ 检测/ ,/ 在/ 性能/ 上/ 本文/ 的/ 方法/ 在/ 虚拟机/ 中/ 的/ 底层/ 级/ 测试/ 、/ 系统/ 级/ 测试/ 和/ 应用程序/ 级/ 测试/ 以及/ 主机/ 测试/ 所/ 引入/ 的/ 代价/ 都/ 较/ 小/ ./ 与/ 采用/ 系统/ 调用/ 拦截/ 的/ 完整性/ 度量/ 方法/ 对比/ ,/ 本文/ 方法/ 的/ 性能/ 代价/ 也/ 较/ 小/ ./ 

