Page1/ 基于/ LSH/ 的/ 时间/ 子/ 序列/ 查询/ 算法/ 汤/ 春蕾/ 董家/ 麒/ (/ 复旦大学/ 计算机/ 科学技术/ 学院/ 上海/ 200433/ )/ 摘要/ 子/ 序列/ 的/ 相似性/ 查询/ 是/ 时间/ 序列/ 数据/ 集中/ 的/ 一种/ 重要/ 操作/ ,/ 包括/ 范围/ 查询/ 和/ k/ 近邻/ 查询/ ./ 现有/ 的/ 大多/ 算法/ 是/ 基于/ 欧几里德/ 距离/ 或者/ DTW/ 距离/ 的/ ,/ 缺点/ 在于/ 查询/ 效率/ 低下/ ./ 文中/ 提出/ 了/ 一种/ 新/ 的/ 基于/ LSH/ 的/ 距离/ 度量/ 方法/ ,/ 可以/ 在/ 保证/ 查询/ 结果/ 质量/ 的/ 前提/ 下/ ,/ 极大/ 提高/ 相似性/ 查询/ 的/ 效率/ ;/ 在/ 此基础/ 上/ ,/ 给出/ 一种/ DS/ -/ Index/ 索引/ 结构/ ,/ 利用/ 距离/ 下界/ 进行/ 剪枝/ ,/ 进而/ 还/ 提出/ 了/ 两种/ 优化/ 的/ OLSH/ -/ Range/ 和/ OLSH/ -/ kNN/ 算法/ ./ 实验/ 是/ 在/ 真实/ 的/ 股票/ 序列/ 集上/ 进行/ 的/ ,/ 数据/ 结果表明/ 算法/ 能/ 快速/ 精确/ 地/ 找出/ 相似性/ 查询/ 结果/ ./ 关键词/ 相似性/ 查询/ ;/ 时间/ 序列/ 数据库/ ;/ 子/ 序列/ ;/ LSH/ ;/ 索引/ 1/ 引言/ 时间/ 序列/ 数据/ 是/ 一种/ 重要/ 的/ 数据类型/ [/ 1/ -/ 2/ ]/ ,/ 在/ 计量经济学/ 的/ 研究/ 中/ 与/ 横截面/ 数据/ 和/ 纵面/ 数据/ 并/ 列为/ 3/ 大/ 数据/ 形态/ ./ 随着/ Web/ 技术/ 的/ 迅速/ 发展/ 和/ 金融/ 信息学/ 的/ 兴起/ ,/ 在/ 时间/ 序列/ 中/ 的/ 各种/ 挖掘/ 分析/ 是/ 当前/ 工商业界/ 和/ 学术界/ 共同/ 关注/ 的/ 热点问题/ ./ 时间/ 序列/ 相似性/ 查询/ 分为/ 全/ 序列/ 匹配/ 和子/ 序列/ 匹配/ 两种/ ./ 查找/ 与/ 查询/ 序列/ 长度/ 相同/ 且/ 相似/ 的/ 内容/ ,/ 称为/ 全/ 序列/ 匹配/ ;/ 而/ 查找/ 与/ 查询/ 序列/ 长度/ 不同/ 但/ 相似/ 的/ ,/ 称为/ 子/ 序列/ 匹配/ ./ 时间/ 序列/ 子/ 序列/ 匹配/ ,/ 根据/ 不同/ 查询/ 标准/ ,/ 可/ 分为/ 范围/ 查询/ 和/ k/ 近邻/ 查询/ 两类/ ./ k/ 近邻/ 查询/ 能/ 找出/ k/ 个/ 与/ 查询/ 序列/ 最/ 相似/ 的/ 子/ 序列/ ;/ 而/ 范围/ 查询/ 则/ 能/ 找出/ 与/ 查询/ 序列/ 的/ 距离/ 不/ 大于/ 允许/ 误差/ Δ/ 的/ 子/ 序列/ ./ 近年来/ 在/ 时间/ 序列/ 数据/ 集上/ 的/ 许多/ 子/ 序列/ 匹配/ 算法/ 被/ 提出/ 来/ ,/ 这些/ 算法/ 主要/ 是/ 采用/ 传统/ 欧几里德/ 距离/ 或者/ 动态/ 时间/ 规整/ (/ DTW/ )/ 作为/ 相似性/ 度量/ 的/ ./ 由于/ 时间/ 序列/ 存在/ 海量/ 性/ 和/ 超高/ 维/ 特性/ ,/ 这/ 两种/ 距/ Page2/ 离/ 函数/ 都/ 会/ 造成/ 系统/ 运行/ 效率/ 低下/ ,/ 即/ 若/ 时间/ 序列/ 时间/ 长度/ 为/ l/ ,/ 欧几里德/ 距离/ 的/ 时间/ 复杂度/ 是/ O/ (/ l/ )/ ,/ 而/ DTW/ 时间/ 复杂度/ 是/ O/ (/ l2/ )/ ./ 为/ 提高/ 查询/ 效率/ ,/ 目前/ 最/ 常用/ 的/ 技术/ 是/ “/ 降维/ -/ 剪枝/ -/ 验证/ ”/ 的/ 方法/ ./ 然而/ 这种/ 方法/ 在/ 验证/ 阶段/ ,/ 仍/ 需要/ 使用/ 现有/ 耗时/ 的/ 距离/ 度量/ ,/ 所以/ 算法/ 时间/ 的/ 减少/ 主要/ 取决于/ 剪枝/ 效果/ ,/ 一旦/ 剪枝/ 效果/ 不/ 理想/ 算法/ 开销/ 要/ 比/ 暴力/ 算法/ 更大/ ./ 因而/ 如何/ 设计/ 一种/ 有效/ 的/ 且/ 不/ 依赖于/ 时间/ 序列/ 长度/ 的/ 相似性/ 度量/ 成为/ 一个/ 迫切需要/ 解决/ 的/ 问题/ ./ 由此/ 还/ 需要/ 设计/ 符合/ 新/ 相似性/ 度量/ 的/ 基于/ 索引/ 的/ 剪枝/ 技术/ ./ 基于/ 上述/ 讨论/ ,/ 本文/ 主要/ 贡献/ 如下/ :/ (/ 1/ )/ 给出/ 了/ 一种/ 基于/ 位置/ 敏感/ Hash/ (/ LSH/ )/ 的/ 时间/ 序列/ 距离/ 度量/ 方法/ ,/ 并且/ 证明/ 了/ 该/ 距离/ 度量/ 的/ 正确性/ ./ (/ 2/ )/ 设计/ 了/ 基于/ LSH/ 距离/ 的/ DS/ -/ Index/ 索引/ 结构/ ,/ 并/ 给出/ 了/ DS/ -/ Index/ 的/ 建立/ 、/ 插入/ 、/ 删除/ 算法/ ./ (/ 3/ )/ 提出/ 了/ 两种/ 优化/ 的/ 基于/ DS/ -/ Index/ 索引/ 结构/ 的/ 时间/ 序列/ 子/ 序列/ 相似性/ 查询/ 算法/ OLSH/ -/ Range/ 和/ OLSH/ -/ kNN/ ./ (/ 4/ )/ 将/ 基于/ LSH/ 的/ 时间/ 序列/ 固定/ 长度/ 子/ 序列/ 查询/ 算法/ 扩展/ 成/ 任意/ 长度/ 子/ 序列/ 查询/ ./ 本文/ 第/ 2/ 节/ 介绍/ 时间/ 序列/ 子/ 序列/ 查询/ 的/ 相关/ 工作/ ;/ 第/ 3/ 节/ 描述/ 基于/ LSH/ 的/ 时间/ 序列/ 距离/ 度量/ 方法/ ;/ 第/ 4/ 节/ 给出/ 基于/ LSH/ 距离/ 的/ DS/ -/ Index/ 索引/ 及其/ 建立/ 、/ 插入/ 和/ 删除/ 算法/ ;/ 第/ 5/ 节/ 给出/ 基于/ 索引/ 的/ OLSH/ -/ Range/ 和/ OLSH/ -/ kNN/ 两种/ 优化/ 算法/ ;/ 第/ 6/ 节/ 给出/ 基于/ LSH/ 的/ 时间/ 序列/ 任意/ 长度/ 子/ 序列/ 查询/ 算法/ ;/ 第/ 7/ 节是/ 在/ 真实/ 股票/ 数据/ 集上/ 的/ 实验/ 结果/ 及其/ 分析/ ;/ 最后/ 一节/ 是/ 本文/ 总结/ ./ 2/ 相关/ 工作/ 本文/ 相关/ 的/ 工作/ 主要/ 涉及/ 到/ 以下/ 3/ 个/ 方面/ :/ (/ 1/ )/ 时间/ 序列/ 的/ 距离/ 度量/ 距离/ 度量/ 主要/ 有/ 3/ 种/ :/ 传统/ 的/ 欧几里得/ 距离/ 度量/ 、/ 基于/ 动态/ 时间/ 规整/ (/ DTW/ )/ [/ 3/ -/ 4/ ]/ 和/ 基于/ 编辑/ 距离/ 的/ 距离/ 度量/ ./ 欧几里德/ 距离/ 度量/ 把/ 时间/ 序列/ 的/ 第/ i/ 个点/ 和/ 另/ 一个/ 时间/ 序列/ 的/ 第/ i/ 个点/ 比较/ ,/ 相对/ 简单/ 和/ 直观/ ,/ 计算/ 距离/ 的/ 时间/ 复杂度/ 是/ 线性/ 的/ ;/ DTW/ 允许/ 时间/ 序列/ 的/ 延伸/ 和/ 压缩/ ,/ 查找/ 结果/ 优于/ 欧几里得/ 距离/ 度量/ ,/ 如果/ 两条/ 时间/ 序列/ 的/ 长度/ 分别/ 是/ m/ 和/ n/ ,/ 则/ 计算/ 距离/ 的/ 时间/ 复杂度/ 是/ O/ (/ mn/ )/ ,/ 时间/ 复杂度/ 较/ 高/ ,/ 但/ 可以/ 使用/ 下界/ 函数/ 加速/ 查询/ 速度/ ./ 而/ 基于/ 编辑/ 距离/ 的/ 距离/ 度量/ 需要/ 先/ 将/ 时间/ 序列/ 离散/ 化成/ 字符/ 序列/ ,/ 常用/ 的/ 有/ LCSS/ [/ 5/ ]/ ,/ 其/ 利用/ 最长/ 公共/ 子/ 序列/ 模型/ ,/ 优点/ 是/ 对/ 噪声/ 点/ 具有/ 鲁棒性/ ,/ 若/ 阈值/ 参数/ ε/ 已知/ 且/ 它们/ 的/ 距离/ 小于/ ε/ ,/ 则/ 两条/ 时间/ 序列/ 的/ 两个/ 点/ 是/ 匹配/ 的/ ;/ EDR/ [/ 6/ ]/ 是/ 基于/ 编辑/ 距离/ 的/ 另/ 一种/ 相似性/ 度量/ ,/ 其/ 利用/ 了/ 空白/ 长度/ 数据/ 率/ 计算/ 两条/ 时间/ 序列/ 间/ 的/ 差距/ ./ ERP/ [/ 7/ ]/ 结合/ 了/ DTW/ 和/ EDR/ 的/ 优点/ ,/ 通过/ 连续/ 变化/ 的/ 参考点/ 来/ 计算/ 两条/ 时间/ 序列/ 的/ 距离/ ./ 本文/ 所/ 设计/ 的/ 基于/ LSH/ 的/ 距离/ 度量/ 是/ 基于/ Lp/ -/ norm/ (/ p/ =/ 1/ ,/ 2/ ,/ …/ ,/ )/ 准则/ 的/ ,/ 和/ 欧几里德/ 距离/ 较为/ 相似/ ,/ 其/ 特点/ 是/ 计算速度/ 快/ 、/ 便于/ 索引/ ./ (/ 2/ )/ 时间/ 序列/ 相似性/ 查询/ 查询/ 主要/ 分/ 4/ 种/ :/ 全/ 序列/ 范围/ 查询/ 、/ 全/ 序列/ k/ 近邻/ 查询/ 、/ 子/ 序列/ 范围/ 查询/ 和子/ 序列/ k/ 近邻/ 查询/ ./ 时间/ 序列/ 相似性/ 查询/ 最早/ 是/ 由/ IBM/ 的/ Agrawal/ 等/ 人/ [/ 8/ ]/ 于/ 1993/ 年/ 提出/ 的/ ,/ 该/ 问题/ 被/ 描述/ 为/ “/ 给定/ 某个/ 时间/ 序列/ ,/ 要求/ 从/ 一个/ 大型/ 时间/ 序列/ 数据库/ 中/ 找出/ 与/ 之/ 最/ 相似/ 的/ 序列/ ”/ ./ 文献/ [/ 8/ ]/ 同时/ 解决/ 了/ 全/ 序列/ 范围/ 查询/ 问题/ ./ 算法/ 共有/ 两个/ 步骤/ :/ 第/ 1/ 步是/ 进行/ 降维/ ,/ 并/ 使用/ R/ / 树/ [/ 9/ ]/ 对/ 转换/ 后/ 的/ 点/ 进行/ 保存/ ;/ 第/ 2/ 步是/ 查询/ ,/ 首先/ 将/ 查询/ 点/ 也/ 进行/ 维度/ 归约/ ,/ 然后/ 使用/ 转换/ 的/ 点/ 进行/ 查询/ ,/ 由于/ 映射函数/ 保证/ 了/ 距离/ 下界/ ,/ 因此/ 可以/ 保证/ 召回/ 率/ ./ Keogh/ 等/ 人/ [/ 10/ ]/ 提出/ 了/ 全/ 序列/ 的/ k/ 近邻/ 查询/ 算法/ ,/ 并/ 提出/ 了/ 一种/ APCA/ 降维/ 算法/ ./ 该/ 算法/ 首先/ 找到/ k/ 近邻/ 上/ 界/ ,/ 然后/ 使用/ 范围/ 查询/ 找到/ 所有/ 的/ k/ 近邻/ ./ Faloutsos/ 等/ 人/ [/ 11/ ]/ 提出/ 了/ 一种/ FRM/ 算法/ ,/ 能/ 解决/ 子/ 序列/ 范围/ 查询/ 问题/ ./ 该/ 算法/ 首先/ 使用/ 滑动/ 窗口/ 对/ 序列/ 进行/ 切分/ ,/ 然后/ 使用/ 降维/ 技术/ 对/ 窗口/ 降维/ 并/ 保存/ 于/ R/ / 树/ ./ 查询/ 阶段/ 首先/ 将/ 查询/ 序列/ 切/ 分成/ 互不/ 相交/ 几段/ 窗口/ ,/ 将/ 窗口/ 进行/ 降维/ ,/ 并/ 使用/ 转换/ 后/ 的/ 点/ 查找/ 到/ 所有/ 候选/ 集/ ,/ 最后/ 对/ 候选/ 集/ 进行/ 验证/ 找到/ 所有/ 满足条件/ 的/ 子/ 序列/ ./ 窗口/ 切分/ 算法/ 还有/ DualMatch/ [/ 12/ ]/ 和/ GeneralMatch/ [/ 13/ ]/ ./ DualMatch/ 在/ 切分/ 窗口/ 时/ 引入/ 了/ 二元/ 性/ 概念/ ,/ GeneralMatch/ 则/ 引入/ 了/ J/ 滑动/ 窗口/ 和/ J/ 不/ 相交/ 窗口/ 的/ 概念/ ./ Han/ 等/ 人/ [/ 14/ ]/ 开发/ 了/ 排名/ 子/ 序列/ 匹配/ 算法/ ,/ 解决/ 时间/ 序列/ 子/ 序列/ 的/ k/ 近邻/ 问题/ ./ 该/ 算法/ 使用/ 了/ 最小/ 距离/ 匹配/ 窗口/ 对/ (/ MDMWP/ )/ ,/ 有效/ 地/ 减少/ 了/ 需要/ 匹配/ 的/ 子/ 序列/ 的/ 数量/ ,/ 极大/ 地/ 减少/ 了/ I/ // O/ 开销/ ./ 本文/ 和/ 现有/ 这些/ 算法/ 的/ 区别/ 是/ ,/ 本文/ 提出/ 了/ 一种/ 新/ 的/ 时间/ 序列/ 度量/ 方法/ ,/ 同时/ 分别/ 设计/ 了/ 范围/ 查询/ 和/ k/ 近邻/ 查询/ 算法/ ,/ Page3/ 并/ 设计/ 了/ 维度/ 划分/ 索引/ 用于/ 剪枝/ ./ (/ 3/ )/ 时间/ 序列/ 降维/ 算法/ 由于/ 时间/ 序列/ 的/ 超高/ 维/ 特性/ ,/ 目前/ 已经/ 有/ 很多/ 降维/ 的/ 方法/ ,/ 主要/ 包括/ 离散/ 傅里叶/ 变换/ (/ DFT/ )/ 、/ 离散/ 小/ 波/ 变化/ (/ DWT/ )/ 、/ 主/ 成分/ 分析/ (/ PCA/ )/ ,/ 或/ 奇异/ 值/ 分解/ (/ SVD/ )/ ./ 本文/ 使用/ 的/ 是/ 位置/ 敏感/ Hash/ (/ LSH/ )/ ,/ 主要/ 用于/ 设计/ 新/ 的/ 距离/ 度量/ ./ 3/ 基于/ LSH/ 的/ 时间/ 序列/ 距离/ 度量/ 我们/ 先/ 简单/ 介绍/ 位置/ 敏感/ Hash/ (/ LocalitySensitiveHash/ ,/ LSH/ )/ ./ LSH/ 是/ 一种/ 高维/ 的/ 空间/ 最近/ 邻/ 搜索算法/ ,/ 基本/ 思想/ 是/ 将/ 距离/ 上/ 较/ 近/ 的/ 点/ 大/ 概率/ 地/ 映射/ 到/ 同一个/ Hash/ 桶/ 内/ (/ Hash/ 桶/ 的/ 个数/ 远远地/ 小于/ 输入/ 点数/ 的/ 总和/ )/ ,/ 形式化/ 定义/ [/ 15/ ]/ 如下/ ./ 定义/ 1/ (/ 位置/ 敏感/ Hash/ 族/ )/ ./ 对于/ Hash/ 族/ H/ ,/ 如果/ 任意/ 两点/ 满足/ 以下/ 条件/ ,/ 则/ 认为/ H/ 是/ (/ R/ ,/ c/ ,/ P1/ ,/ P2/ )/ 敏感/ :/ (/ 1/ )/ 如果/ p/ -/ q/ / R/ ,/ 则/ PrH/ (/ h/ (/ p/ )/ =/ h/ (/ q/ )/ )/ / P1/ ./ (/ 2/ )/ 如果/ p/ -/ q/ / cR/ ,/ 则/ PrH/ (/ h/ (/ p/ )/ =/ h/ (/ q/ )/ )/ / P2/ ./ 条件/ (/ 1/ )/ 保证/ 了/ 两个/ 相近/ 的/ 点/ 以/ 高/ 概率/ 被/ 映射/ 到/ 同一个/ Hash/ 桶/ ,/ 条件/ (/ 2/ )/ 则/ 保证/ 了/ 两个/ 相异/ 的/ 点/ 以/ 低/ 概率/ 被/ 映射/ 到/ 同一个/ Hash/ 桶/ ./ 值得注意/ 的/ 是/ ,/ 只有/ 当/ P1/ >/ P2/ 时/ ,/ 此/ Hash/ 族/ 才/ 有/ 实际意义/ ./ 这里/ 我们/ 采用/ 文献/ [/ 16/ ]/ 中/ 的/ Hash/ 函数/ 定义/ hi/ (/ v/ )/ =/ 犪/ i/ ·/ v/ +/ bi/ 推荐/ 使用/ ω/ =/ 4/ )/ ,/ 犪/ i/ 是/ 一个/ d/ 维/ 向量/ ,/ 其中/ 每/ 一维/ 的/ 值/ 都/ 满足/ 标准/ 正态分布/ ./ bi/ 是/ 随机/ 偏离/ 参数/ ,/ 满足/ [/ 0/ ,/ ω/ ]/ 均匀分布/ ./ 定义/ 2/ (/ d/ -/ Hash/ 函数/ )/ ./ 将/ 长度/ 为/ l/ 的/ 序列/ v/ 进行/ d/ 次/ Hash/ 并/ 连接/ ,/ 构成/ d/ -/ Hash/ 签名/ :/ H/ (/ v/ )/ =/ 〈/ h1/ (/ v/ )/ ,/ h2/ (/ v/ )/ ,/ …/ ,/ hd/ (/ v/ )/ 〉/ ./ 定义/ 3/ (/ LSH/ 距离/ )/ ./ 对于/ 两个/ 长度/ 为/ l/ 的/ 序列/ x/ ,/ y/ ,/ 其/ LSH/ 距离/ 为/ DLSH/ (/ x/ ,/ y/ )/ =/ PrH/ (/ h/ (/ x/ )/ ≠/ h/ (/ y/ )/ )/ ./ 注意/ :/ 这里/ 的/ 距离/ 表示/ 为/ 概率/ 值/ ,/ 因此/ 距离/ 值域/ 是/ [/ 0/ ,/ 1/ ]/ ,/ 0/ 代表/ 距离/ 最近/ ,/ 1/ 代表/ 距离/ 最远/ ./ 定理/ 1/ ./ 距离/ 保序性/ ./ 令/ 查询/ 序列/ 为/ q/ ,/ 如果/ 时间/ 序列/ qA/ 和/ qB/ 满足/ :/ ‖/ qA/ -/ q/ ‖/ >/ ‖/ qB/ -/ q/ ‖/ / 0/ ,/ 则/ DLSH/ (/ qA/ -/ q/ )/ >/ 证明/ ./ 根据/ 定义/ 1/ ,/ 对于/ 时间/ 序列/ x/ ,/ y/ ,/ 若设/ DLSH/ (/ qB/ -/ q/ )/ / 0/ ./ σ/ =/ x/ -/ y/ ,/ 就/ 有/ pq/ (/ σ/ )/ =/ PrHh/ (/ x/ )/ =/ h/ (/ y/ (/ 其中/ fp/ (/ )/ t/ =/ ∫/ t/ 可见/ fp/ (/ t/ )/ 是/ 一个/ 严格/ 递增/ 函数/ ,/ 可知/ PrH/ (/ h/ (/ x/ )/ =/ h/ (/ y/ )/ )/ 是/ 一个/ 随着/ σ/ 递减/ 的/ 函数/ ,/ 又/ DLSH/ (/ x/ ,/ y/ )/ =/ PrHh/ (/ x/ )/ ≠/ h/ (/ y/ (/ 因此/ ,/ DLSH/ (/ x/ ,/ y/ )/ 随/ x/ -/ y/ 递增/ ./ 证毕/ ./ 在/ 此/ 体系结构/ 中/ ,/ 定义/ 3/ 的/ LSH/ 距离/ 等价/ 为/ Hash/ 签名/ 的/ 海明/ 距离/ (/ HammingDistance/ )/ [/ 18/ ]/ ,/ 即/ DHammingH/ (/ x/ )/ ,/ H/ (/ y/ (/ 其中/ ,/ fHhi/ (/ x/ )/ ,/ hi/ (/ y/ (/ Hash/ 签名/ 的/ 长度/ ./ 由于/ 海明/ 距离/ 无法/ 区分/ 微小/ 的/ 距离/ 差距/ ,/ 因此/ 在/ 这里/ 我们/ 使用/ 曼哈顿/ 距离/ (/ ManhattanDis/ -/ tance/ )/ [/ 19/ ]/ ,/ 即/ 其中/ fMhi/ (/ x/ )/ ,/ hi/ (/ y/ (/ hi/ (/ x/ )/ -/ hi/ (/ y/ )/ // φ/ ,/ hi/ (/ x/ )/ -/ hi/ (/ y/ )/ </ φ/ 烅/ 烄/ 1/ ,/ 烆/ 在/ 这里/ φ/ 是/ 一个/ 规约/ 参数/ ,/ 实验/ 中设/ 为/ φ/ =/ 10/ ./ 对于/ 两个/ 长度/ 为/ l/ 的/ 序列/ x/ ,/ y/ ,/ 其/ 计算/ LSH/ 距离/ 的/ 时间/ 分为/ 两个/ 步骤/ :/ 第/ 1/ 步/ ,/ 转换/ 为/ d/ -/ Hash/ 签名/ ;/ 第/ 2/ 步/ 计算/ DManhattanH/ (/ x/ )/ ,/ H/ (/ y/ (/ 为/ d/ -/ Hash/ 签名/ 可以/ 预处理/ ,/ 因而/ 计算/ LSH/ 距离/ 的/ 复杂度/ 是/ 仅仅/ 和/ d/ -/ Hash/ 签名/ 长度/ 有关/ ,/ 为/ O/ (/ d/ )/ ./ 距离/ 保序性/ 证明/ 了/ LSH/ 距离/ 的/ 正确性/ ,/ 即/ 两条/ 序列/ 的/ 欧几里德/ 距离/ 越小/ ,/ 其/ LSH/ 距离/ 也/ 越近/ ./ 序列/ 在/ HASH/ 签名/ 空间/ 下/ 和/ 原/ 空间/ 的/ 距离/ 是/ 等价/ 的/ ./ 所以/ 使用/ LSH/ 距离/ 进行/ 子/ 序列/ 的/ 相似性/ 度量/ 可以/ 得到/ 正确/ 的/ 相似/ 结果/ 集/ ./ 4DS/ -/ Index/ 索引/ 本/ 节/ 介绍/ 一种/ 全新/ 的/ 基于/ LSH/ 的/ 序列/ 索引/ 结构/ ,/ 称作/ DS/ -/ Index/ 索引/ (/ DimensionSplitIndex/ )/ ./ DS/ -/ Index/ 是/ 二叉树/ 结构/ ,/ 下文/ 中/ 我们/ 使用/ NL/ 代表/ DS/ -/ Index/ 非叶/ 结点/ ,/ 用/ L/ 代表/ DS/ -/ Index/ 叶/ 节点/ ./ 叶/ 节点/ L/ 的/ 结构/ 为/ 简单/ 的/ 数据/ 块/ ,/ 保存/ 不/ 超过/ θ/ 的/ d/ -/ Hash/ 签名/ 数据/ 点/ ./ 由此/ 下文/ 中/ 的/ L/ 除了/ 代表/ Page4/ 叶/ 节点/ ,/ 同时/ 也/ 代表/ 该叶/ 节点/ 的/ Hash/ 签名/ 点集/ ./ 4.1/ 相关/ 定义/ 与/ 定理/ 定义/ 4/ (/ 维度/ 边界/ )/ ./ 设有/ d/ -/ Hash/ 签名/ 集合/ A/ =/ x/ |/ x/ =/ 〈/ x1/ ,/ x2/ ,/ …/ ,/ xd/ {/ 界/ 被/ 定义/ 为/ bi/ (/ A/ )/ =/ 〈/ minx/ {/ }/ i/ ,/ maxx/ {/ }/ i/ 〉/ ,/ x/ ∈/ A/ ,/ 这里/ 上/ 下界/ 分别/ 是/ 该/ d/ -/ Hash/ 签名/ 集合/ 的/ 最小/ 和/ 最大值/ ./ 使用/ bilower/ (/ A/ )/ 代表/ 下界/ ,/ 使用/ biupper/ (/ A/ )/ 代表/ 上界/ ./ 定义/ 5/ (/ 索引/ 边界/ )/ ./ 设/ L/ 为/ 索引/ 叶/ 节点/ ,/ Hash/ 签名/ 维数/ 是/ d/ ,/ 叶/ 节点/ L/ 的/ 索引/ 边界/ 由/ d/ 个/ 维度/ 边界/ 组成/ ,/ 定义/ 为/ B/ (/ L/ )/ =/ 〈/ b1/ (/ L/ )/ ,/ b2/ (/ L/ )/ ,/ …/ ,/ bd/ (/ L/ )/ 〉/ ./ 定义/ 6/ (/ 索引/ 距离/ )/ ./ Hash/ 签名/ x/ 到/ 某/ 索引/ 叶/ 节点/ L/ 的/ 距离/ 定义/ 为/ D/ (/ x/ ,/ L/ )/ =/ ∑/ dbi/ (/ L/ )/ )/ ./ 其中/ DManhattanxi/ -/ bi/ (/ L/ (/ )/ )/ =/ fMxi/ ,/ bilower/ (/ L/ (/ 烄/ 0/ ,/ 烅/ fMxi/ ,/ biupper/ (/ L/ (/ 烆/ 定理/ 2/ ./ 索引/ 距离/ 下界/ 定理/ ./ Hash/ 签名/ x/ 到/ 叶/ 节点/ L/ 的/ 距离/ 满足/ D/ (/ x/ ,/ L/ )/ / minDManhattanx/ ,/ (/ )/ y/ |/ y/ ∈/ {/ 证明/ ./ 由于/ 曼哈顿/ 距离/ 是/ 所有/ 维度/ 距离/ 分量/ 的/ 累加/ ,/ 因此/ 我们/ 只/ 需要/ 证明/ 索引/ 距离/ 的/ 每个/ 维度/ 距离/ 分量/ 都/ 是/ 最小/ 的/ 即可/ ./ 共有/ 3/ 种/ 情况/ :/ (/ 1/ )/ 当/ xi/ </ bilower/ (/ L/ )/ 时/ ,/ 由于/ bilower/ (/ L/ )/ / yi/ |/ / y/ ∈/ {/ }/ L/ ,/ 所以/ fMxi/ ,/ bilower/ (/ i/ (/ )/ )/ / fMyi/ ,/ x/ (/ )/ i/ ,/ / y/ ∈/ L/ ./ (/ 2/ )/ 当/ bilower/ (/ L/ )/ / xi/ / biupper/ (/ L/ )/ 时/ ,/ 由于/ 索引/ 距离/ 该维/ 分量/ 为/ 0/ ,/ 必然/ 是/ 最小值/ ./ (/ 3/ )/ 当/ xi/ / biupper/ (/ L/ )/ 时/ ,/ 由于/ biupper/ (/ L/ )/ / yi/ |/ / y/ ∈/ {/ }/ L/ ,/ 所以/ fMxi/ ,/ biupper/ (/ i/ (/ )/ )/ / fMyi/ ,/ x/ (/ )/ i/ ,/ / y/ ∈/ L/ ./ 以上/ 3/ 种/ 情况/ 中/ ,/ 索引/ 距离/ 的/ 每/ 一维/ 距离/ 分量/ 都/ 最小/ ./ 索引/ 距离/ 下界/ 定理/ 保证/ 了/ 数据/ 点到/ 该/ 索引/ 叶子/ 节点/ 的/ 距离/ 是/ 距离/ 的/ 下界/ ./ 通过/ 这个/ 性质/ ,/ 我们/ 可以/ 在/ 保证/ 正确性/ 的/ 前提/ 下/ 进行/ 剪枝/ ./ 4.2/ 索引/ 的/ 建立/ 、/ 插入/ 和/ 删除/ 算法/ DS/ -/ Index/ 索引/ 结构/ 主要/ 利用/ 了/ 维度/ 划分/ 的/ 二分/ k/ -/ means/ 聚类/ 算法/ ./ L/ 代表/ 索引/ 叶/ 节点/ ,/ θ/ 代表/ 叶/ 节点/ 所/ 能/ 容纳/ 的/ 最大/ 数据/ 点数/ ;/ NL/ 代表/ 索引/ 非叶/ 节点/ ,/ 非叶/ 节点/ 有/ 两个/ 属性/ ,/ 第/ 1/ 个/ 属性/ 表示/ 其/ 子孙/ 在/ 哪个/ 维度/ 进行/ 分裂/ ,/ 用/ / 表示/ ;/ 另/ 一个/ 属性/ 表示/ 其/ 子孙/ 在/ / 维/ 的/ 哪个/ 值/ 进行/ 分裂/ ,/ 用/ / 表示/ ./ 算法/ 1/ ./ 索引/ 建立/ 算法/ (/ DS/ -/ IndexBuiling/ )/ ./ 输入/ :/ Hash/ 签名/ 点集/ D/ ,/ 叶/ 节点/ 所/ 能/ 包含/ 最大/ 数据/ 点数/ θ/ 输出/ :/ 非叶/ 结点/ NL1/ ./ ifD/ </ θ/ then/ 将/ D/ 作为/ 叶/ 节点/ L/ 返回/ ;/ 2/ ./ 选择/ 维度/ / ;/ 3/ ./ 在/ / 维上/ ,/ 执行/ 一次/ 二分/ k/ -/ means/ 聚类/ ,/ 得到/ D/ →/ 4/ ./ 计算/ / =/ maxx/ / |/ x/ ∈/ D/ {/ }/ 1/ +/ miny/ / |/ y/ ∈/ D/ {/ }/ 25/ ./ 生成/ 非叶/ 结点/ NL/ =/ 〈/ / ,/ / 〉/ ;/ 6/ ./ Node1/ =/ DS/ -/ IndexBuilding/ (/ D1/ ,/ θ/ )/ ;/ 7/ ./ Node2/ =/ DS/ -/ IndexBuilding/ (/ D2/ ,/ θ/ )/ ;/ 8/ ./ 设/ NL/ 左/ 子孙/ 为/ Node1/ 、/ 右/ 子孙/ 为/ Node2/ ;/ 9/ ./ 返回/ NL/ ./ 索引/ 建立/ 算法/ 是/ 一个/ 递归/ 调用/ 的/ 算法/ ,/ 每次/ 将/ 数据/ 点集/ D/ 一分为二/ ,/ 即/ D/ →/ D1/ ,/ D/ {/ }/ 2/ ,/ 其中/ D1/ ∩/ D2/ =/ / ,/ D1/ ∪/ D2/ =/ D/ 且/ / x/ ∈/ D1/ ,/ / y/ ∈/ D2/ ,/ x/ / / y/ / ./ 由于/ 使用/ 了/ 二分/ k/ -/ means/ ,/ 因此/ 该/ 分裂/ 算法/ 与/ 参数/ 无关/ ,/ 由/ 算法/ 自行/ 选择/ 分裂/ 点/ ./ 当有/ 新/ 数据/ 点/ x/ 来到/ 时/ ,/ 使用/ 索引/ 插入/ 算法/ 进行/ 更新/ ./ 索引/ 插入/ 算法/ 主要/ 使用/ 非叶/ 节点/ 的/ 两个/ 属性/ 〈/ / ,/ / 〉/ 来/ 定位/ 应该/ 插入/ 的/ 叶/ 节点/ ./ 首先/ 从根/ 节点/ 开始/ ,/ 新/ 数据/ 点/ 如果/ x/ / / / ,/ 选择/ 根/ 节点/ 的/ 左子/ 树/ ,/ 否则/ 选择/ 根/ 节点/ 右子/ 树/ ,/ 同样/ 的/ 过程/ 反复/ 调用/ 直到/ 找到/ 叶/ 节点/ ./ 当/ 插入/ 叶/ 节点/ 后/ ,/ 所在/ 叶/ 节点/ 中/ 数据/ 点/ 个数/ 超过/ 了/ θ/ ,/ 则/ 叶/ 节点/ 需要/ 进行/ 分裂/ ./ 分裂/ 过程/ 调用/ DS/ -/ IndexBuilding/ 算法/ ,/ 生成/ 两个/ 新/ 的/ 叶/ 节点/ 和/ 非叶/ 结点/ ,/ 然后/ 将/ 原叶/ 节点/ 删除/ 替换成/ 新/ 的/ 非叶/ 结点/ ./ 算法/ 2/ ./ 索引/ 插入/ 算法/ (/ DS/ -/ IndexInserting/ )/ ./ 输入/ :/ 索引/ index/ ,/ 新/ 数据/ 点/ x/ 输出/ :/ x/ 所属/ 叶/ 节点/ 1/ ./ node/ ←/ index/ ,/ root/ ;/ 2/ ./ while/ (/ node/ ∈/ NL/ )/ // // node/ 不是/ 叶/ 节点/ 3/ ./ ifxnode/ ./ / / node/ ./ / 4/ ./ thennode/ =/ node/ ./ left5/ ./ elsenode/ =/ node/ ./ right/ ;/ 6/ ./ 将/ 数据/ 点/ x/ 插入/ node/ ;/ 7/ ./ ifnode/ ./ size/ >/ θ/ 8/ ./ thennewnode/ =/ DS/ -/ IndexBuilding/ (/ L/ ,/ θ/ )/ ;/ 9/ ./ 替换/ node/ 为/ newnode/ ./ 当有/ 数据/ 点/ 需要/ 删除/ 时/ ,/ 使用/ 索引/ 删除/ 算法/ 来/ 实现/ ./ 首先/ 使用/ 和/ 插入/ 算法/ 同样/ 的/ 方法/ 找到/ 数据/ 点/ 所在/ 的/ 叶/ 节点/ ,/ 然后/ 将/ 该/ 数据/ 点/ 从/ 叶/ 节点/ 中/ 删除/ ,/ 若/ 发现/ 叶/ 节点/ 为/ 空时/ ,/ 删除/ 其父/ 节点/ ,/ 将/ 其父/ 节点/ 的/ 父/ 节点/ 的/ 子孙/ 指针/ 指向/ 其/ 兄弟/ 节点/ ,/ 并/ 删除/ 空叶/ 节点/ ./ Page5/ 算法/ 3/ ./ 索引/ 删除/ 算法/ (/ DS/ -/ IndexDeleting/ )/ ./ 输入/ :/ 索引/ index/ ,/ 需要/ 删除/ 的/ 数据/ 点/ x/ 输出/ :/ 根/ 节点/ root1/ ./ node/ ←/ index/ ,/ root/ ;/ 2/ ./ while/ (/ node/ ∈/ NL/ )/ // // node/ 不是/ 叶/ 节点/ 3/ ./ ifxnode/ ./ / / node/ ./ / 4/ ./ thennode/ =/ node/ ./ left5/ ./ elsenode/ =/ node/ ./ right/ ;/ 6/ ./ 将/ 数据/ 点/ x/ 从/ node/ 删除/ ;/ 7/ ./ ifnode/ ./ size/ =/ θ/ 8/ ./ thennode/ ./ father/ ./ father/ ./ child/ =/ node/ ./ brother/ ;/ 9/ ./ 删除/ node/ ,/ node/ ./ father/ ./ 该/ 索引/ 并非/ 一颗/ 平衡/ 树/ ,/ 理想/ 的/ 树/ 高/ 是/ logD/ ,/ 其中/ D/ 代表/ 数据/ 集/ D/ 的/ 大小/ ,/ 而/ DS/ -/ Index/ 最差/ 情况/ 是/ D/ // θ/ ./ 值得注意/ 的/ 是/ ,/ 我们/ 使用/ 索引/ 是/ 为了/ 快速/ 查询/ k/ 近邻/ 而/ 并非/ 搜索/ 某/ 一个/ 特定/ 的/ 点/ ,/ 因此/ 叶子/ 节点/ 内/ 数据/ 点/ 的/ 相似性/ 成为/ 索引/ 好否/ 的/ 标准/ ./ 由于/ 高维/ 数据/ 的/ “/ 维灾/ ”/ 问题/ ,/ 往往/ 使得/ 聚类/ 效果/ 不/ 尽如人意/ ,/ 而/ 基于/ LSH/ 距离/ 度量/ 能够/ 有效/ 规避/ “/ 维灾/ ”/ [/ 20/ ]/ ./ 5/ 基于/ DS/ -/ Index/ 索引/ 的/ 两种/ 优化/ 查询/ 算法/ 由于/ 时间/ 序列/ 的/ 超高/ 维/ 特性/ 使得/ 匹配/ 结果/ 候选/ 集/ 非常/ 大/ ,/ 即/ 序列/ 中/ 任何/ 一个/ 时间/ 点/ 开始/ 的/ 子/ 序列/ 都/ 可能/ 是/ 查询/ 结果/ ,/ 从而/ 使得/ 子/ 序列/ 匹配/ 中/ 消耗/ 过多/ 的/ 时间/ [/ 5/ ]/ ./ 所以/ ,/ 在/ 本节/ 中/ 我们/ 给出/ 基于/ 索引/ 的/ OLSH/ -/ Range/ 和/ OLSH/ -/ kNN/ 两种/ 优化/ 算法/ ./ 定理/ 3/ ./ k/ 近邻/ 搜索/ 原则/ ./ 令/ S/ 为/ 目前/ 访问/ 的/ 所有/ 数据/ 点/ 中距离/ 查询/ 点/ q/ 最近/ 的/ k/ 个/ 数据/ 点/ 集合/ ,/ Sfarthest/ 代表/ 这/ k/ 个/ 数据/ 点/ 中距离/ q/ 最远/ 的/ 数据/ 点/ ./ 对于/ 数据/ 点/ p/ ,/ 如果/ DManhattan/ (/ p/ ,/ q/ )/ >/ DManhattanSfarthest/ ,/ (/ )/ q/ ,/ 则/ 数据/ 点/ p/ 必定/ 不是/ q/ 的/ k/ 最近/ 邻/ ./ 需要/ 注意/ 的/ 是/ ,/ 这里/ 的/ p/ 和/ q/ 都/ 是/ 经过/ LSH/ 签名/ 转换/ 后/ 的/ 新/ 数据/ 点/ ,/ 而/ 非/ 原始/ 时间/ 序列/ ./ 定理/ 4/ ./ 近邻/ 分区/ 剪枝/ 原则/ ./ 令/ S/ 为/ 目前/ 访问/ 的/ 所有/ 数据/ 点/ 中距离/ 查询/ 点/ q/ 最近/ 的/ k/ 个/ 数据/ 点/ 集合/ ,/ Sfarthest/ 代表/ 这/ k/ 个/ 数据/ 点/ 中距离/ q/ 最远/ 的/ 数据/ 点/ ./ 对于/ 叶/ 节点/ L/ ,/ 如果/ D/ (/ q/ ,/ L/ )/ >/ DManhattanq/ ,/ S/ (/ )/ farthest/ ,/ 则/ / x/ ∈/ L/ ,/ x/ 必定/ 不是/ q/ 的/ k/ 最近/ 邻/ ./ 证明/ ./ 由于/ D/ (/ q/ ,/ L/ )/ 是/ q/ 到/ 数据/ 点/ 集合/ L/ 的/ 距离/ 下界/ ,/ 故必/ 有/ / x/ ∈/ L/ / D/ (/ q/ ,/ L/ )/ >/ DManhattan/ (/ Sfarthest/ ,/ q/ )/ ,/ 根据/ 定理/ 3/ 得证/ ./ 近邻/ 查询/ 优化/ 算法/ OLSH/ -/ kNN/ ./ 由此/ ,/ 我们/ 给出/ 基于/ 索引/ 的/ 固定/ 子/ 序列/ 长度/ k/ 算法/ 4/ ./ k/ 近邻/ 优化/ 查询/ 算法/ (/ OLSH/ -/ kNN/ )/ ./ 输入/ :/ 索引/ index/ ,/ 查询/ 序列/ q/ 的/ Hash/ 签名/ x/ ,/ k/ 输出/ :/ 查询/ 序列/ q/ 的/ k/ 近邻/ 结果/ 集/ S1/ ./ S/ ←/ / ;/ // // S/ 为/ 最大/ 堆/ ,/ 最大/ 容量/ 为/ k2/ ./ 遍历/ index/ 中/ 的/ 叶/ 节点/ L3/ ./ 计算/ D/ (/ x/ ,/ L/ )/ ;/ 4/ ./ 根据/ D/ (/ x/ ,/ L/ )/ 升序/ 排序/ 所有/ 叶/ 节点/ ;/ 5/ ./ foreachL6/ ./ ifD/ (/ x/ ,/ L/ )/ >/ DManhattanx/ ,/ S/ (/ )/ farthestthenbreak/ ;/ // // 剩余/ 的/ L/ 被/ 剪枝/ 7/ ./ 计算/ D/ (/ x/ ,/ y/ )/ ,/ / y/ ∈/ L/ ,/ 如果/ D/ (/ x/ ,/ y/ )/ / DManhattan/ (/ x/ ,/ 8/ ./ returnS/ ./ k/ 近邻/ 算法/ 采用/ 了/ 剪枝/ 的/ 思想体系/ ,/ 将/ 分区/ 从近/ 到/ 远/ 排序/ ,/ 依次/ 检查/ 叶子/ 节点/ 中/ 的/ 每/ 一个/ 数据/ 点/ 的/ 距离/ ,/ 然后/ 将/ 已经/ 计算/ 过/ 的/ 数据/ 点/ 插入/ 优先/ 队列/ 中/ ./ 当/ 分区/ 的/ 索引/ 距离/ 大于/ 优先/ 队列/ 中/ 数据/ 点/ 最/ 远距离/ ,/ 则/ 表示/ 剩下/ 的/ 点/ 已经/ 不/ 可能/ 成为/ 数据/ 点/ 的/ 实际/ k/ 近邻/ ,/ 算法/ 可以/ 终止/ ./ 优先/ 队列/ 中/ 的/ 数据/ 点/ 即/ 实际/ k/ 近邻/ ./ 我们/ 使用/ 最大/ 堆/ S/ 保存/ k/ 近邻/ 查询/ 结果/ ./ 该/ 最大/ 堆/ 的/ 容量/ 为/ k/ ,/ 当堆/ 中/ 已经/ 有/ k/ 个/ 签名/ 的/ 时候/ ,/ 如果/ 新/ 加进来/ 的/ 签名/ 比/ Sfarthest/ 小/ ,/ 则/ 从/ 最大/ 堆/ S/ 中/ 删除/ Sfarthest/ 并/ 将/ 新/ 的/ 签名/ 插入/ 最大/ 堆/ ./ 注意/ 到/ 要/ 遍历/ index/ 中/ 的/ 叶/ 节点/ L/ ,/ 叶/ 节点/ 的/ 个数/ n/ ≈/ D/ // θ/ ,/ 因此/ 这部分/ 的/ 时间/ 和/ 叶/ 节点/ 的/ 容量/ θ/ 成反比/ ./ 排序/ 使用/ 快排/ 或者/ 归并/ 排序/ ,/ 时间/ 为/ nlogn/ ./ 第/ 6/ 行/ 的/ 剪枝/ 和/ 叶/ 节点/ 内/ Hash/ 签名/ 的/ 紧凑/ 程度/ 有关/ ,/ 而/ θ/ 越大/ ,/ 叶/ 节点/ 数据/ 越/ 分散/ ,/ 剪枝/ 效果/ 越差/ ,/ 因此/ 这部分/ 时间/ 和/ θ/ 成正比/ ./ 基于/ 索引/ 的/ 固定/ 子/ 序列/ 长度/ 范围/ 查询/ 优化/ 算法/ OLSH/ -/ Range/ 和/ OLSH/ -/ kNN/ 算法/ 相同/ ,/ 但/ 不/ 需要/ 使用/ Sfarthest/ 来/ 动态/ 描述/ 更新/ 剪枝/ 的/ 阈值/ ,/ 因此/ 比/ OLSH/ -/ kNN/ 算法/ 简单/ ./ 由于/ 篇幅/ 关系/ 这里/ 不/ 给出/ 伪/ 代码/ ./ 6/ 基于/ LSH/ 的/ 时间/ 序列/ 任意/ 长度/ 子/ 序列/ 查询/ 算法/ 由于/ 位置/ 敏感/ Hash/ 族/ H/ 的/ 参数/ P1/ 和/ P2/ 都/ 是/ 固定/ 长度/ 的/ ,/ LSH/ 距离/ 理论/ 上/ 只能/ 对/ 这种/ 固定/ 长度/ 为/ d/ 的/ 时间/ 序列/ 进行/ 比较/ ./ 本节/ 我们/ 针对/ 长度/ 不/ 等/ 的/ 时间/ 序列/ ,/ 设计/ 了/ 一种/ Hash/ 函数/ 构造方法/ 并解/ Page6/ 决了/ 这个/ 问题/ ./ 定义/ 7/ (/ 同/ 位/ 连接/ 向量/ )/ ./ 设有/ 同一/ 起始/ 点/ 但/ 不同/ 维数/ i/ ≠/ (/ )/ j/ 的/ 两个/ 向量/ 分别/ 为/ 犃/ =/ [/ a1/ …/ i/ ]/ 和/ 犅/ =/ [/ b1/ …/ j/ ]/ ,/ 则/ 存在/ i/ +/ (/ )/ j/ 维/ 向量/ 犞/ 是/ 这/ 两个/ 向量/ 的/ 连接/ ,/ 则/ 记作/ 犞/ =/ [/ 犃/ ;/ 犅/ ]/ ./ 定义/ 8/ (/ 错位/ 连接/ 向量/ )/ ./ 设有/ 不同/ 起始/ 点且/ 不同/ 维数/ i/ ≠/ (/ )/ j/ 的/ 两个/ 向量/ 分别/ 为/ 犃/ =/ [/ a1/ …/ i/ ]/ 和/ 犅/ =/ [/ b1/ …/ j/ ]/ ,/ 若/ j/ >/ i/ 且/ 起始/ 点/ 差值/ 为/ t/ ,/ 则/ 存在/ j/ +/ (/ )/ t/ 维/ 向量/ 犞/ ′/ 是/ 这/ 两个/ 向量/ 的/ 连接/ ,/ 记作/ 犞/ ′/ =/ [/ 犃/ 1/ …/ t/ ;/ (/ 犃/ (/ t/ +/ 1/ )/ …/ i/ +/ 犅/ 1/ …/ [/ (/ j/ -/ i/ )/ +/ 2t/ ]/ )/ ;/ 犅/ [/ (/ j/ -/ i/ )/ +/ 2t/ +/ 1/ ]/ …/ j/ ]/ ,/ 简记/ 为/ 犞/ =/ [/ 犃/ ;/ (/ )/ 犅/ t/ ]/ ./ 根据/ 以上/ 定义/ ,/ 任意/ 长度/ 子/ 序列/ 查询/ 可/ 分成/ 以下/ 两种/ 情况/ :/ (/ 1/ )/ 对于/ 长度/ 为/ k/ ·/ d/ 长度/ 的/ 时间/ 子/ 序列/ ,/ 可以/ 直接/ 使用/ 同/ 位/ 连接/ 向量/ 进行/ 构造/ ./ 参数/ anew/ 构造/ 为/ k/ 个/ a/ 的/ 同位/ 连接/ anew/ =/ a/ ;/ a/ ;/ …/ ,/ 烉/ 烇/ 烋/ a/ [/ ]/ (/ 2/ )/ 对于/ 长度/ 为/ k/ ·/ d/ +/ t/ 长度/ 的/ 时间/ 序列/ ,/ 需要/ 先/ 使用/ 同/ 位/ 连接/ 向量/ ,/ 再/ 使用/ 错位/ 连接/ 向量/ 进行/ 构造/ ./ 参数/ anew/ 构造/ 为/ k/ 个/ a/ 的/ 同位/ 连接/ 加上/ 一个/ 错位/ 连接/ anew/ =/ a/ ;/ a/ ;/ …/ ,/ 烉/ 烇/ 烋/ a/ [/ ]/ 通过/ 这样/ 的/ 构造/ ,/ 我们/ 能够/ 实现/ 长度/ 大于/ d/ 的/ 任意/ 长度/ 的/ 时间/ 子/ 序列/ 相似性/ 查询/ ,/ 而/ 不/ 需要/ 重新/ 构造/ 不同/ 长度/ 的/ Hash/ 函数/ ./ 令/ 时间/ 序列/ 为/ T/ ,/ 记/ T/ 的/ 一段/ 从/ 第/ i/ 个/ 时间/ 点/ 开始/ 的/ 长度/ 为/ d/ 的/ 子/ 序列/ 为/ Ti/ ,/ d/ ./ 由于/ 任何/ 一段/ 长度/ 为/ d/ 的/ 子/ 序列/ 的/ Hash/ 值/ 都/ 计算/ 过/ ,/ 因此/ 对于/ 从/ 第/ i/ 时间/ 点/ 开始/ 长度/ 为/ k/ ·/ d/ 的/ 时间/ 子/ 序列/ HTi/ ,/ k/ ·/ (/ )/ d/ =/ anew/ ·/ Ti/ ,/ k/ ·/ d/ +/ bnew/ ∑/ kHTi/ +/ y/ ·/ d/ ,/ (/ )/ d/ ;/ 对于/ 从/ 第/ i/ 时间/ 点/ 开始/ 长度/ 为/ y/ =/ 0k/ ·/ d/ +/ t/ 的/ 时间/ 子/ 序列/ ,/ 同理/ 可/ 得/ ,/ HTi/ ,/ k/ ·/ d/ +/ (/ )/ t/ =/ anew/ ·/ Ti/ ,/ k/ ·/ d/ +/ t/ +/ bnew/ 即/ 任何/ 一段/ 长度/ 大于/ d/ 的/ 时间/ 子/ 序列/ Hash/ 值/ 都/ 可以/ 通过/ 已经/ 计算/ 得到/ 的/ 长度/ 为/ d/ 的/ 时间/ 子/ 序列/ Hash/ 值得/ 到/ ./ 7/ 实验/ 结果/ 及其/ 分析/ 在/ 这/ 一节/ ,/ 我们/ 实现/ 了/ 前文/ 表述/ 的/ 多个/ 算法/ ,/ 采用/ 上海/ 与/ 深圳/ 交易所/ 时间跨度/ 自/ 2007/ 年/ 1/ 月/ 1/ 日到/ 2012/ 年/ 4/ 月/ 1/ 日/ ,/ 共有/ 2347/ 只/ 股票/ 、/ 2110544/ 个/ 数据/ 点/ 、/ 1882791/ 条/ 长度/ 为/ 100/ 的/ 时间/ 子/ 序列/ ./ 所有/ 实验/ 在/ 配置/ 为/ 2.2/ GHz/ 的/ CPU/ 和/ 2GBRAM/ 的/ PC/ 上/ 实现/ ,/ 语言/ 为/ JAVA/ ./ 我们/ 选择/ 基于/ 索引/ 的/ OLSH/ -/ kNN/ 优化/ 算法/ 作为/ 主要/ 实验/ 对象/ ./ 相应/ 对比/ 算法/ 有/ 2/ 个/ ,/ 一个/ 是/ 使用/ 欧几里得/ 距离/ 的/ 原始/ 序列/ 暴力/ 查询/ 算法/ (/ BruteForceEuclidean/ -/ kNN/ )/ ;/ 另/ 一个/ 是/ d/ -/ Hash/ 签名/ 暴力/ 查询/ 算法/ (/ BruteForceLSH/ -/ kNN/ )/ ./ 7.1/ DS/ -/ Index/ 索引/ 开销/ 由于/ 基于/ 索引/ 的/ OLSH/ -/ kNN/ 优化/ 算法/ 使用/ 了/ DS/ -/ Index/ 索引/ ,/ 所以/ 需要/ 对/ 索引/ 的/ 额外/ 开销/ 进行/ 专门/ 实验/ ,/ 以/ 证明/ 索引/ 是否/ 在/ 时间/ 或/ 空间/ 的/ 开销/ 上/ 都/ 较/ 小/ ./ (/ 1/ )/ 时间/ 开销/ DS/ -/ Index/ 索引/ 的/ 时间/ 开销/ 主要/ 是/ 计算/ Hash/ 签名/ 和/ 建立/ 索引/ 两/ 部分/ :/ 计算/ Hash/ 签名/ ,/ 即/ 使用/ LSH/ 函数/ 将/ 1882791/ 条子/ 序列/ 映射/ 为/ d/ -/ Hash/ 签名/ ,/ 这里/ 取/ ω/ =/ 4/ ;/ 建立/ 索引/ ,/ 即/ 在/ d/ -/ Hash/ 签名/ 的/ 基础/ 上/ ,/ 构造/ 相应/ 的/ DS/ -/ Index/ ,/ 需要/ 说明/ 的/ 是/ LSH/ -/ k/ 近邻/ 查询/ 是/ 基于/ d/ -/ Hash/ 签名/ 而/ 非/ 原始/ 时间/ 子/ 序列/ ./ 图/ 1/ 是/ 不同/ Hash/ 签名/ 长度/ 的/ DS/ -/ Index/ 索引/ 开销/ 比较/ ./ 从图/ 1/ 可以/ 看到/ ,/ 计算/ Hash/ 签名/ 和/ 建立/ 索引/ 的/ 时间/ 都/ 与/ Hash/ 签名/ 长度/ 参数/ d/ 成正比/ ./ 其次/ ,/ 将/ 计算/ Hash/ 签名/ 和/ 建立/ 索引/ 两/ 部分/ 累加/ ,/ 不同/ Hash/ 签名/ 长度/ 预处理/ 开销/ 都/ 在/ 200s/ ~/ 300s/ 之间/ ;/ 而据/ 多次/ 实验/ 结果显示/ ,/ BruteForceEuclidean/ -/ kNN/ 算法/ 进行/ 1/ 次/ 传统/ 的/ 欧几里得/ 距离/ 的/ k/ 近邻/ 查询/ 时间/ 超过/ 13s/ ,/ 在/ 需要/ 执行/ 上万次/ OLSH/ -/ kNN/ 算法/ 的/ 情况/ 下/ ,/ 这部分/ 时间/ 开销/ 可/ 忽略/ ./ 图/ 1/ 不同/ Hash/ 签名/ 长度/ 的/ DS/ -/ Index/ 索引/ 时间/ 开销/ 比较/ 另外/ ,/ 由于/ DS/ -/ Index/ 索引/ 的/ 数据结构/ 是/ 二叉树/ ,/ DS/ -/ Index/ 索引/ 的/ 时间/ 开销/ 还/ 与/ 树/ 的/ 深度/ 有关/ ,/ 这/ 是因为/ 树/ 的/ 深度/ 决定/ 了/ DS/ -/ Index/ 索引/ 插入/ 或/ 删/ Page7/ 减/ 操作/ 的/ 时间/ 开销/ ./ 理想/ 的/ 树深/ 是/ log2/ 况是/ D/ 引/ 实际/ 与/ 理想/ 树深/ 比较/ ./ θ/ ./ 表/ 1/ 是/ 不同/ 叶/ 节点/ 容量/ θ/ 的/ DS/ -/ Index/ 索表/ 1/ 不同/ 叶/ 节点/ 容量/ θ/ 的/ DS/ -/ Index/ 索引/ 树深/ 比较/ 叶/ 节点/ 容量/ θ/ 实际/ 树深/ 从表/ 1/ 可以/ 看到/ ,/ 实际/ 树深/ 接近/ 于/ 理想/ 树深/ ,/ 虽然/ 并/ 没有/ 保证/ DS/ -/ Index/ 是/ 一颗/ 平衡/ 树/ ,/ 但是/ 维度/ 选择/ 机制/ 和/ 基于/ 聚类/ 的/ 分裂/ 点/ 选择/ 使得/ 实际/ 树深/ 接近/ 于/ 理想/ 树深/ ./ (/ 2/ )/ 空间/ 开销/ 由于/ 叶/ 节点/ 内/ 存储/ 的/ 是/ 所有/ 的/ 数据/ 点/ ,/ 叶/ 节点/ 的/ 存储/ 开销/ 等于/ 数据/ 集/ 的/ 大小/ ,/ 因而/ DS/ -/ Index/ 索引/ 的/ 额外/ 空间/ 开销/ 来自/ 于/ 索引/ 非叶/ 节点/ 个数/ ,/ 由于/ DS/ -/ Index/ 索引/ 是/ 二叉树/ ,/ 其非叶/ 结点/ 个数/ 是/ 也/ 节点/ 个数/ 减/ 1/ ./ 表/ 2/ 是/ 不同/ 叶/ 节点/ 容量/ θ/ 的/ 所/ 需/ 额外/ 存储/ 开销/ 比较/ ./ 可以/ 看出/ ,/ 除了/ 叶/ 节点/ 对/ 所有/ 序列/ 保存/ 所/ 必须/ 的/ 开销/ 以外/ ,/ 索引/ 所/ 需要/ 的/ 额外/ 开销/ 非常/ 的/ 小/ ./ 表/ 2/ 不同/ 叶/ 节点/ 容量/ θ/ 的/ 预处理/ 空间/ 开销/ 比较/ 叶/ 节点/ 容量/ θ/ 7.2/ 算法/ 时间/ 效能/ 比较/ 我们/ 知道/ ,/ Hash/ 签名/ 的/ 长度/ d/ 是/ 影响/ 时间/ 效能/ 的/ 一个/ 重要/ 因素/ ./ d/ 越长/ ,/ OLSH/ -/ kNN/ 优化/ 算法/ 的/ 查询/ 时间/ 也/ 越长/ ,/ 同时/ Hash/ 签名/ 的/ 曼哈顿/ 距离/ 就/ 越/ 接近/ 于/ 实际/ 概率/ 值/ PrHh/ (/ x/ )/ ≠/ h/ (/ y/ (/ 算/ 也/ 越/ 准确/ ./ OLSH/ -/ kNN/ 算法/ 的/ 时间/ 分布/ 如表/ 3/ 所示/ ,/ 其/ 运行/ 时间/ 大致/ 可/ 分为/ 两个/ 部分/ :/ 阶段/ 1/ 是/ 计算/ 查询/ 点到/ 所有/ 叶/ 节点/ 的/ 索引/ 距离/ ,/ 并/ 对/ 索引/ 距离/ 进行/ 排序/ ;/ 阶段/ 2/ 是/ 依次/ 搜索/ 索引/ 叶/ 节点/ ,/ 直到/ 剪枝/ 条件/ 达成/ ./ 阶段/ 2/ 中/ 被/ 搜索/ 的/ 点集/ 称为/ 候选/ 集/ ,/ 候选/ 集中/ 点/ 的/ 数量/ 除以/ 所有/ 点/ 的/ 总数/ 为/ 候选/ 集占/ 比/ (/ CandidateRate/ )/ ./ Hash/ 签名/ 长度/ d/ 阶段/ 1/ 时间/ // ms/ 阶段/ 2/ 时间/ // ms/ 候选/ 集占/ 比/ // %/ 57101215/ 从表/ 3/ 可以/ 看到/ ,/ 阶段/ 1/ 的/ 时间/ 随着/ Hash/ 签名/ 长度/ 参数/ d/ 增长/ 而/ 线性/ 增长/ ,/ 那/ 是因为/ 阶段/ 1/ 的/ 时间/ 主要/ 来自/ 于/ 索引/ 距离/ 的/ 计算/ ,/ 索引/ 叶/ 节点/ 个数/ 不变/ 的/ 情况/ 下/ ,/ 维度/ 的/ 增加/ 导致/ 了/ 计算/ 时间/ 的/ 增加/ ;/ 而/ 阶段/ 2/ 的/ 时间/ 变化/ 较大/ ,/ 这/ 是因为/ 随着/ 维度/ 的/ 增加/ ,/ “/ 维灾/ ”/ 效应/ 慢慢/ 体现/ ,/ 索引/ 的/ 剪枝/ 能力/ 渐渐/ 降低/ ,/ 因此/ 运行/ 时间/ 不仅/ 随/ 维度/ 增加/ 而/ 增加/ ,/ 更会/ 随着/ 剪枝/ 能力/ 的/ 降低/ 而/ 增加/ ./ 总的来说/ ,/ 表/ 3/ 显示/ OLSH/ -/ kNN/ 算法/ 的/ 剪枝/ 能力/ 较/ 好/ ./ 不同/ 算法/ 运行/ 时间/ 比较/ 如图/ 2/ 所示/ ./ 从图/ 2/ 中/ 可以/ 看到/ ,/ 随着/ Hash/ 签名/ 长度/ 参数/ d/ 的/ 增长/ ,/ BruteForceLSH/ -/ kNN/ 的/ 运算/ 时间/ 呈/ 线性/ 增长/ ,/ 这是/ 由于/ 计算/ Hash/ 签名/ 曼哈顿/ 距离/ 的/ 时间/ 是/ 呈/ 线性/ 增长/ 的/ ;/ 而/ OLSH/ -/ kNN/ 算法/ 虽然/ 也/ 是/ 增长/ 的/ ,/ 但/ 运行/ 时间/ 仍远/ 小于/ 相同/ 情况/ 下/ 的/ BruteForceLSH/ -/ kNN/ 算法/ ,/ 这是/ 由于/ OLSH/ -/ kNN/ 采用/ 候选/ 集/ 剪枝/ 策略/ ,/ 需要/ 查询/ 的/ 数据/ 点/ 总比/ BruteForceLSH/ -/ kNN/ 来得/ 少/ ./ OLSH/ -/ kNN/ 优化/ 算法/ 的/ 不同/ 叶/ 节点/ 容量/ θ/ 的/ 时间/ 效能/ 如图/ 3/ 所示/ ./ 可以/ 看到/ ,/ 图/ 3/ 说明/ 了/ 叶/ 节点/ 最大/ 容量/ θ/ 和/ 查询/ 时间/ 的/ 关系/ :/ 叶/ 节点/ 最大/ 容量/ 越小/ ,/ 叶/ 节点/ 的/ 签名/ 之间/ 距离/ 就/ 越/ 紧凑/ ,/ 所以/ 剪枝/ 效果/ 就/ 越/ 好/ ,/ 但是/ 由于/ 叶/ 节点/ 的/ 增多/ 使得/ 计算/ 索引/ 距离/ 的/ 时间/ 增加/ ,/ 因此/ 总/ 时间/ 反而/ 增加/ ./ 在/ 实验/ 中/ ,/ 我们/ 还/ 发现/ 使用/ θ/ =/ 100/ 能/ 达到/ 最优/ 查询/ 效果/ ./ Page8/ 图/ 3OLSH/ -/ kNN/ 算法/ 的/ 不同/ 叶/ 节点/ 容量/ θ/ 的/ 时间/ 效能/ 7.3/ 候选/ 集占/ 比/ 关系/ 比较/ 从/ 前面/ 实验/ 可以/ 知道/ ,/ 算法/ 时间/ 效能/ 与/ 候选/ 集/ 的/ 占/ 比/ (/ CandidateRate/ )/ 情况/ 密不可分/ ./ 如表/ 3/ 所示/ ,/ 随着/ 候选/ 集占/ 比/ 不断/ 增加/ ,/ 阶段/ 1/ 的/ 时间/ 变化/ 随/ Hash/ 签名/ 长度/ 参数/ d/ 的/ 变化/ 不/ 大/ ,/ 而/ 阶段/ 2/ 则/ 随之/ 快速/ 上升/ ./ 特别/ 地/ ,/ 当/ d/ 较大/ 时/ ,/ OLSH/ -/ kNN/ 优化/ 算法/ 时间/ 将/ 主要/ 由/ 阶段/ 2/ 决定/ ,/ 即候/ 选集/ 占/ 比/ 关系/ 决定/ ./ 图/ 4/ 说明/ 了/ 候选/ 集占/ 比/ 和/ Hash/ 签名/ 长度/ 参数/ d/ 的/ 关系/ ,/ 横坐标/ 是/ d/ 以/ 10/ 为底/ 的/ 对数/ ./ 虽然/ 从表/ 3/ 中/ 发现/ ,/ 随着/ d/ 的/ 增长/ ,/ 候选/ 集占/ 比/ 出现/ 快速增长/ ./ 然而/ 从图/ 4/ 的/ 实验/ 中/ ,/ 我们/ 使用/ 最小/ 二/ 乘法/ 线性/ 拟合/ ,/ 发现/ 候选/ 集占/ 比/ 和/ lg/ (/ d/ )/ 现/ 线性相关/ ,/ 其/ 相关系数/ 是/ 0.9168/ ./ 这/ 说明/ 了/ 算法/ 在/ d/ 较大/ 时有/ 良好/ 的/ 可扩展性/ ./ 图/ 4/ 候选/ 集占/ 比/ 和/ Hash/ 签名/ 长度/ 参数/ d/ 的/ 关系/ 图/ 5/ 说明/ 了/ 候选/ 集占/ 比/ 和/ 叶/ 节点/ 容量/ θ/ 的/ 关系/ ./ 从图/ 5/ 可以/ 看出/ ,/ 随着/ 叶/ 节点/ 最大/ 容量/ θ/ 的/ 线性/ 增长/ ,/ 候选/ 集占/ 比以/ 超过/ 线性/ 速度/ 增长/ ./ 这/ 是因为/ 叶/ 节点/ 容量/ 越小/ ,/ 每个/ 叶/ 节点/ 的/ 索引/ 距离/ 所/ 代表/ 的/ 距离/ 下界/ 越紧/ 、/ 剪枝/ 能力/ 更强/ ,/ 而叶/ 节点/ 容量/ 变大时/ ,/ 剪枝/ 能力/ 迅速/ 降低/ ./ 另外/ 从图/ 3/ 可以/ 发现/ ,/ OLSH/ -/ kNN/ 优化/ 算法/ 总/ 运行/ 时间/ 并非/ 是/ θ/ 越小越/ 好/ 的/ ,/ 因为/ θ/ 越小则/ 代表/ 叶/ 节点/ 越/ 多/ ,/ 导致/ 计算/ 索引/ 距离/ 次数/ 越/ 多/ ,/ 反而/ 增加/ 了/ 运行/ 时间/ ./ 图/ 6/ 说明/ 了/ 候选/ 集占/ 比/ 和/ 近邻/ 参数/ k/ 的/ 关系/ ,/ 横坐标/ 是/ k/ 以/ 10/ 为底/ 的/ 对数/ ./ 从图/ 6/ 可以/ 看出/ ,/ lg/ (/ k/ )/ 线性/ 增长/ 时/ ,/ 即/ k/ 线性/ 增长/ 时/ ,/ 而/ 候选/ 集占/ 比/ 却/ 没有/ 出现/ 快速增长/ ./ 这/ 是因为/ 候选/ 集占/ 比/ 在/ 一定/ 比例/ 下/ ,/ 对/ 近邻/ 参数/ k/ 是/ 有/ 范围/ 覆盖/ 作用/ 的/ ,/ 因为/ 候选/ 集/ 实际/ 个数/ 要/ 比/ k/ 大/ 许多/ ./ 图/ 6/ 使用/ 最小/ 二/ 乘法/ 进行/ 线性/ 拟合/ ,/ 发现/ 候选/ 集占/ 比/ 和/ lg/ (/ k/ )/ 呈现/ 线性相关/ ,/ 相关系数/ 0.898/ ./ OLSH/ -/ kNN/ 优化/ 算法/ 在/ 参数/ k/ 上/ 的/ 可扩展性/ 得到/ 了/ 证明/ ./ 8/ 结束语/ 在/ 本文/ 中/ ,/ 我们/ 较/ 好地解决/ 了/ 时间/ 子/ 序列/ 海量/ 匹配/ 的/ 查询/ 问题/ ./ 设计/ 了/ 一种/ 全新/ 快速/ 的/ 时间/ 序列/ 距离/ 度量/ ,/ 同时/ 设计/ 了/ 基于/ 该/ 距离/ 度量/ 上/ 的/ 索引/ 结构/ DS/ -/ Index/ ,/ 使用/ 剪枝/ 策略/ 进一步/ 加快/ 了/ 范围/ 查询/ 和/ k/ 近邻/ 查询/ 的/ 搜索/ 过程/ ./ 一系列/ 的/ 实验/ 表明/ 我们/ 的/ 算法/ 相比/ 传统/ 的/ 基于/ 欧几里德/ 距离/ 的/ 算法/ 快/ 了/ 数百倍/ ,/ 而/ 额外/ 内存/ 开销/ 却/ 很小/ ./ Page9/ 

