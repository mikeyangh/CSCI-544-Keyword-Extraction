Page1/ 构件/ 软件可靠性/ 过程/ 技术/ 张策/ 1/ )/ ,/ 2/ )/ 崔刚/ 1/ )/ 刘/ 宏伟/ 1/ )/ 孟凡超/ 2/ )/ 1/ )/ (/ 哈尔滨工业大学/ 计算机科学/ 与/ 技术/ 学院/ 哈尔滨/ 150001/ )/ 2/ )/ (/ 哈尔滨工业大学/ (/ 威海/ )/ 计算机科学/ 与/ 技术/ 学院/ 山东/ 威海/ 264209/ )/ 摘要/ 针对/ 构件/ 软件可靠性/ 研究/ 现状/ 以及/ 如何/ 提高/ 其/ 可靠性/ 过程/ ,/ 对/ 其/ 可靠性/ 过程/ 的/ 相关/ 研究/ 进行/ 综述/ ./ 构件/ 软件可靠性/ 过程/ 的/ 关键问题/ 是/ 在/ 整个/ 生命周期/ 内/ ,/ 以/ 可靠性/ 为/ 核心/ ,/ 不断/ 提高/ 可靠性/ 增长/ 过程/ ,/ 实现/ 可靠性/ 预期/ 要求/ ./ 文中/ 介绍/ 了/ 构件/ 软件可靠性/ 过程/ 的/ 主要/ 研究/ 问题/ ,/ 对以/ 可靠性/ 过程/ 为/ 核心/ 的/ 基本/ 内容/ 体系结构/ 与/ 技术/ 分类/ 框架/ 进行/ 了/ 描述/ ,/ 并/ 对/ 基本/ 研究/ 支撑/ 元素/ 进行/ 了/ 概括/ 与/ 分析/ ./ 重点/ 介绍/ 了/ 依据/ 可靠性/ 过程/ 研究/ 内容/ 与/ 技术/ 分类/ 下/ 从/ 可靠性/ 建模/ 、/ 可靠性/ 增长/ 模型/ 、/ 评估/ 、/ 测试/ 资源分配/ 与/ 最优/ 发布/ 、/ 可靠性/ 过程/ 仿真/ 、/ 基于/ PCM/ (/ PalladioComponentModel/ )/ 的/ 可靠性/ 技术/ 等/ 六个/ 方面/ 进行/ 了/ 技术/ 分类/ 评述/ ,/ 在/ 分类/ 评述/ 中/ ,/ 对/ 技术/ 成果/ 进行/ 了/ 深入/ 讨论/ 并/ 选取/ 典型/ 模型/ 进行/ 剖析/ 和/ 归一化/ 分类/ ./ 最后/ 还/ 指出/ ,/ 未来/ 还/ 需要/ 在/ 复杂/ 不/ 完美/ 环境/ 下/ 结合/ 非/ 参量/ 求解/ 方法/ 、/ 容错/ 体系结构/ 与/ 硬件/ 系统/ 构件/ 化/ 研究/ 、/ 集成化/ 的/ 可靠性/ 建模/ 表示/ 与/ 分析/ 等/ 方面/ ,/ 深入开展/ 一些/ 研究/ 工作/ ./ 关键词/ 构件/ 软件/ ;/ 可靠性/ ;/ 可靠性/ 过程/ ;/ 操作/ 剖面/ ;/ 测试/ 工作量/ ;/ 软件测试/ 1/ 引言/ 巨大/ 复杂度/ 高/ 的/ 软件系统/ LSCS/ (/ Large/ -/ ScaleComplexSystem/ )/ [/ 1/ ]/ 在/ 关键/ 系统/ (/ 例如/ ,/ 健康/ 监护/ 系统/ 、/ 航空/ 管制系统/ 、/ 轨道/ 运输/ 、/ 金融/ 电信/ 等/ )/ 中/ 的/ 应用/ 已/ 日益/ 显著/ ./ LSCS/ 通常/ 通过/ 继承/ 和/ 集成/ 许多/ 相对/ 小/ 的/ 和/ 独立/ 的/ 模块/ 来/ 开发/ [/ 2/ -/ 4/ ]/ ,/ 这些/ 模块/ 在/ 模块/ 测试阶段/ 被/ 独立/ 的/ 单独/ 测试/ [/ 5/ ]/ ./ 从/ 软件开发/ 技术/ 视角/ 来看/ ,/ 面向对象/ 技术/ 的/ 出现/ 与/ 快速/ 发展/ ,/ 以及/ 基于/ Web/ 开发/ 的/ 广泛应用/ 使得/ 模块化/ 、/ 组件/ 化/ 软件开发/ 模式/ 进展/ 加速/ ,/ 由此/ 衍生/ 出/ 基于/ 构件/ 的/ 软件/ CBS/ (/ Component/ -/ BasedSoftware/ )/ 及/ 开发方法/ [/ 4/ ]/ ./ 构件/ 软件/ 已/ 成为/ 一种/ 主流/ 软件/ 形态/ ,/ 广泛应用/ 在/ 各种/ 关图/ 1/ 由/ 软件/ 失效/ 评估/ 与/ 性能/ 预测/ 到/ CBSRP/ 研究/ 的/ 发展/ 与/ 变迁/ 通常/ 在/ 测试/ 与/ 操作/ 阶段/ ,/ 软件可靠性/ 增长/ 模型/ SRGM/ (/ SoftwareReliabilityGrowthModel/ )/ 被/ 用来/ 作为/ 估计/ 和/ 预测/ 软件可靠性/ 的/ 基本/ 工具/ ,/ 准确/ 地说/ ,/ 其是/ 表述/ 软件可靠性/ 持续/ 提高/ 过程/ 的/ 数学/ 工具/ [/ 2/ ]/ ./ 最早/ 的/ SRGM/ 一般/ 被/ 认为/ 是/ 由/ Goel/ -/ Okumoto/ 于/ 1978/ 年/ 提出/ 的/ 经典/ 的/ G/ -/ O/ 模型/ [/ 9/ ]/ ,/ 其后/ 各种/ SRGMs/ 被/ 广泛/ 提出/ ./ SRGM/ 即可/ 适用/ 于/ 软件测试/ 阶段/ 也/ 可以/ 用于/ 发布/ 运行/ 中/ ./ 软件可靠性/ 工程/ SRE/ (/ SoftwareReliabilityEngineering/ )/ 作为/ 一个/ 学科/ ,/ 于/ 1991/ 年/ 被/ AT&T/ Bell/ 实验室/ 的/ Musa/ 正式/ 提出/ ,/ 旨在/ 确保/ 用户/ 使用/ 高可靠性/ 的/ 软件/ [/ 2/ ]/ ,/ 在/ 软件测试/ 过程/ 中/ SRE/ 采用/ 科学/ 的/ 技术/ 和/ 工具/ 来/ 尽可能/ 多/ 的/ 移除/ 软件/ 中/ 潜在/ 的/ 故障/ ./ 至/ 20/ 世纪/ 90/ 年代/ 中期/ ,/ 构件/ 软件/ 及其/ 可靠性/ 受到/ 了/ 研究/ 人员/ 的/ 关注/ ,/ 并/ 逐渐/ 形成/ 了/ 一系列/ 的/ 研究/ 子/ 领域/ ./ 此时/ 可靠性/ 已/ 从/ 传统/ 单一/ 的/ 软件/ 衍生/ 到/ 考虑/ 内部结构/ 特征/ 以及/ 不同/ 测试阶段/ 差异性/ 的/ 研究/ 范畴/ ./ 这样/ ,/ 到/ 了/ 21/ 世纪/ 初/ 基于/ 构件/ 的/ 软件工程/ 这/ 一新/ 的/ 开发/ 范型/ 开始/ 流行/ ,/ 进入/ 21/ 世纪/ 第二个/ 十年/ ,/ 以/ 可靠性/ 为/ 核心/ 的/ 构件/ 软件可靠性/ 过程/ 开始/ 出现/ [/ 10/ -/ 13/ ]/ ./ 构件/ 软件可靠性/ 过程/ 是/ 指/ 在/ 软件/ 整个/ 生命周期/ 内以/ 可靠性/ 为/ 核心/ ,/ 不断/ 提高/ 可靠性/ 的/ 增长/ 和键/ 系统/ 中/ ,/ 其/ 可靠性/ 问题/ 受到/ 了/ 极大/ 关注/ ./ 构件/ 软件/ 的/ QoS/ (/ QualityofService/ )/ [/ 6/ ]/ 虽然/ 涵盖/ 较/ 多/ 的/ 软件/ 质量/ 属性/ ,/ 但/ 对于/ 大规模/ (/ 商业/ )/ 软件/ 而言/ ,/ 可靠性/ 仍/ 是/ 其/ 最/ 重要/ 的/ 质量/ 属性/ 之一/ [/ 2/ ,/ 7/ ]/ ./ 作为/ 一种/ 最为/ 重要/ 的/ 度量/ 手段/ ,/ 可靠性/ 分析/ 可以/ 定量/ 地/ 对/ 软件/ 失效/ 行为/ 进行/ 评估/ [/ 8/ ]/ ,/ 并/ 被/ 用作/ 安排/ 测试/ 活动/ 的/ 依据/ ./ 从/ 20/ 世纪/ 60/ 年代/ 开始/ ,/ 与/ 可靠性/ 相关/ 的/ 研究/ 活动/ ,/ 一直/ 持续/ 至今/ ,/ 大致/ 经历/ 了/ 图/ 1/ 所述/ 的/ 几个/ 重要/ 阶段/ ./ 起源于/ 对/ 软件/ 失效/ 的/ 评估/ 与/ 软件/ 性能/ 的/ 预测/ ,/ 到/ 20/ 世纪/ 60/ 年代/ 末/ 软件可靠性/ 已/ 被/ 明确/ 地/ 提出/ 和/ 研究/ ./ 软件可靠性/ 分析/ 可/ 从/ 形式/ 上/ 与/ 定量/ 上/ 清晰/ 地/ 描述/ 软件/ 失效/ 过程/ 以及/ 与其/ 存在/ 相关/ 影响/ 的/ 因素/ 之间/ 的/ 主要/ 依赖/ 关系/ ./ 发布/ 实现/ 预期/ 目标/ 的/ 可靠/ 软件/ 的/ 动态/ 过程/ ./ 目前/ 还/ 没有/ 对/ 可靠性/ 过程/ 内容/ 和/ 实现/ 技术/ 进行/ 统一/ 的/ 分析/ 和/ 分层/ 归纳/ ,/ 使得/ 在/ 科研/ 与/ 应用/ 中/ 难以/ 抉择/ ./ 例如/ 文献/ [/ 10/ ]/ 中/ 把/ 描述/ 集成/ 测试/ 中/ 故障/ 检测/ 与/ 改正/ 的/ 动态/ 过程/ 称为/ 可靠性/ 过程/ 分析/ ,/ Gokhale/ 等/ 人/ [/ 12/ -/ 13/ ]/ 则/ 侧重/ 以/ 仿真/ 的/ 方法/ 来/ 分析/ 排错/ 过程/ ,/ 或/ 基于/ 马尔可夫/ 模型/ 进行/ 可靠性/ 测评/ [/ 14/ -/ 15/ ]/ 等/ ./ 针对/ 基于/ 体系结构/ 的/ 软件可靠性/ 预测/ ,/ Gokhale/ 等/ 人/ [/ 15/ -/ 16/ ]/ 提出/ 了/ 统一/ 框架/ ,/ 运用/ 基于/ 状态/ 的/ 模型/ 采用/ 解析/ 的/ 方法/ 对/ 构件/ 软件/ 进行/ 了/ 可靠性/ 预测/ ./ 作者/ 仅/ 从/ 应用/ 的/ 体系结构/ 建模/ 、/ 构件/ 的/ 失效/ 行为/ 建模/ 以及/ 可靠性/ 预测/ 的/ 求解/ 方法/ 三个/ 方面/ 来/ 进行/ 分类/ 与/ 组合/ ,/ 介绍/ 了/ 基于/ 体系结构/ 的/ 可靠性/ 预测/ 方法/ ./ 文献/ [/ 17/ ]/ 对/ 基于/ NHPP/ (/ Non/ -/ HomogeneousPoissonProcess/ )/ 类型/ 的/ 构件/ 软件/ 的/ 可靠性/ 增长/ 模型/ 进行/ 了/ 研究/ ,/ 并/ 在/ 其/ (/ 博士论文/ )/ 绪论/ 中/ 对/ 构件/ 软件可靠性/ 的/ 基于/ 状态/ 、/ 路径/ 和/ 可加/ 模型/ [/ 18/ ]/ 进行/ 了/ 综合/ 分析/ ./ 这些/ 研究/ 工作/ 主要/ 是从/ 可靠性/ 的/ 建模/ 与/ 评测/ 角度/ 展开/ ,/ 尚未/ 从/ 构件/ 软件/ 在/ 提高/ 可靠性/ 整个/ 动态/ 进程/ 的/ 角度/ 研究/ 分析/ ,/ 没/ 能够/ 清晰/ 地/ 梳理/ 出/ 整体/ 的/ 技术/ 体系/ 与/ 关联/ ./ 为/ 深入/ 理解/ 构件/ 软件可靠性/ 过程/ 的/ 丰富/ 内容/ 和/ 技术/ 发展趋势/ ,/ 对/ 国内外/ 该/ 方面/ 的/ 研究/ 工作/ 有/ 一个/ 总体/ 上/ Page3/ 的/ 技术/ 把握/ ,/ 对/ 其/ 进行/ 全面/ 准确/ 地/ 述评/ 具有/ 重要/ 意义/ ./ 总体而言/ ,/ 可靠性/ 是/ 一个/ 从/ 设计/ 、/ 实现/ 、/ 测试/ 和/ 运行/ 软件/ 到/ 用户/ 使用/ 经验/ 可以/ 被/ 度量/ 的/ 属性/ ./ 以/ 体系结构/ 为/ 中心/ 的/ 构件/ 软件可靠性/ 过程/ ,/ 必须/ 能够/ 对/ 体系结构/ 和/ 实现/ 构件/ 进行/ 质量/ 评价/ [/ 19/ ]/ ,/ 必须/ 能够/ 确保/ 软件系统/ 可/ 满足/ 预期/ 的/ 可靠性/ 要求/ ./ 目前/ ,/ 构件/ 软件可靠性/ 过程/ 研究/ 已/ 在/ 多个/ 子/ 领域/ 上/ 展开/ ,/ 为了/ 勾勒/ 出其/ 研究/ 概貌/ ,/ 本文/ 介绍/ 了/ 其/ 发展/ 现状/ ,/ 并/ 从/ 问题/ 描述/ 、/ 确定/ 总体/ 内容/ 与/ 技术/ 框架/ 、/ 分类/ 归纳/ 、/ 总结/ 评述/ 等/ 方面/ 和/ 角度/ 对/ 其/ 研究/ 现状/ 进行/ 了/ 综述/ ,/ 希望/ 能为/ 科研人员/ 提供/ 一些/ 有益/ 的/ 参考/ ./ 本文/ 第/ 2/ 节对/ 当前/ 研究/ 现状/ 进行/ 概述/ 分析/ ,/ 给出/ 了/ 主要/ 研究/ 问题/ ,/ 并/ 建立/ 相应/ 的/ 技术/ 分类/ 框架/ ;/ 第/ 3/ 节/ 系统/ 介绍/ 了/ 基本/ 研究/ 支撑/ 元素/ ;/ 第/ 4/ 节到/ 第/ 9/ 节/ 重点/ 阐述/ 了/ 构件/ 软件可靠性/ 过程/ 技术/ 发展/ 过程/ 与/ 主要/ 研究/ 方向/ ,/ 对/ 主要/ 研究成果/ 进行/ 了/ 系统分类/ 比较/ 和/ 述评/ ;/ 最后/ 是/ 未来/ 的/ 研究/ 分析/ 和/ 总结/ ./ 表/ 1/ 构件/ 软件可靠性/ 过程/ 研究/ 分析/ 示例/ Hsu/ 等/ 人/ [/ 8/ ]/ √/ -/ √/ -/ -/ 采用/ 马尔可夫/ 链/ 建模/ 构件/ 软件体系结构/ ,/ 基于/ 测试用例/ 下/ 的/ 执行/ 路径/ 可靠/ 侯春燕/ 等/ 人/ [/ 10/ ]/ √/ √/ -/ -/ √/ 建立/ 基于/ 排队/ 论/ 的/ 构件/ 软件/ 集成/ 测试/ 模型/ ,/ 依据/ 操作/ 剖面/ 进行/ 基于/ 离散/ 事/ Jain/ 等/ 人/ [/ 20/ ]/ √/ -/ -/ √/ -/ 基于/ 可靠性/ 约束/ 下/ 的/ 最小/ 成本/ 限制/ ,/ 采用/ 解析/ 方法/ 确定/ 最优/ 发布/ 执行/ 策略/ Fiondella/ 等/ 人/ [/ 21/ ]/ √/ -/ -/ √/ -/ 研究/ 了/ 测试/ 资源分配/ :/ 明确/ 考虑/ 到/ 体系结构/ ,/ 采用/ 非线性/ 的/ 基因/ 或/ 动态/ 规划/ Pham/ 等/ 人/ [/ 22/ ]/ √/ -/ √/ -/ -/ 在/ 容错/ 配置/ 下/ ,/ 实施/ 操作/ 剖面/ 转换/ ,/ 对/ 顺序/ 、/ 分支/ 、/ 循环/ 和/ 并行/ 结构/ 构成/ 的/ 应/ Brosch/ 等/ 人/ [/ 23/ ]/ √/ -/ √/ -/ -/ 融入/ 角色/ 建模/ 的/ 思维/ 到/ 构件/ 软件可靠性/ 分析/ 中/ ,/ 正在/ 突破/ 传统/ 方法/ Fiondella/ 等/ 人/ [/ 24/ ]/ -/ -/ √/ -/ -/ 考虑/ 关联/ 构件/ 失效/ S/ 相关/ ,/ 基于/ 多元/ 贝/ 努力/ 分布/ 进行/ 可靠性/ 分析/ 算法/ 进行/ 最优化/ 求解/ 在/ 体系结构/ 的/ 建模/ 描述/ 上/ ,/ 基于/ 状态/ 、/ 基于/ 路径/ 和/ 可加/ 模型/ [/ 25/ ]/ 依然/ 被/ 广泛/ 沿用/ ,/ 但/ 更为/ 细腻/ 的/ 顺序/ 、/ 分支/ 和/ 循环/ 执行/ 结构/ 被/ 充分考虑/ 到/ 当前/ 研究/ 中/ [/ 22/ ,/ 26/ ]/ ./ Gokhale/ 等/ 人/ [/ 15/ ]/ 开创/ 的/ 构件/ 软件可靠性/ 过程/ 仿真/ 方法/ 降低/ 了/ 基于/ 各类/ 马尔可夫/ 链/ [/ 8/ ,/ 27/ ]/ 进行/ 可靠性/ 度量/ 与/ 预测/ 上/ 的/ 解析/ 求解/ 难度/ ./ 另一方面/ ,/ 非线性/ 的/ 求解/ 方法/ 开始/ 得到/ 关注/ ,/ Tyagi/ 等/ 人/ [/ 28/ ]/ 基于/ 优化/ 的/ 路径/ 可靠性/ ,/ 采用/ 蚁群/ 启发性/ 算法/ (/ heuristicalgorithm/ )/ 进行/ 可靠性/ 估计/ ,/ 类似/ 的/ 研究/ 还有/ 文献/ [/ 21/ ,/ 29/ ]/ 等/ ./ 新近/ 的/ 研究/ 中/ [/ 30/ ]/ ,/ 马尔可夫/ 转移/ 模型/ 并/ 没有/ 直接/ 用来/ 建模/ 构件/ 软件/ ,/ 例如/ ,/ 软件工程/ 思维/ 指引/ 下/ 基于/ PCM/ (/ PalladioComponentModel/ )/ [/ 23/ ]/ 的/ 可靠性/ 研究/ 开始/ 把/ 马尔可夫/ 模型/ 作为/ 转化/ 中/ 的/ 间接/ 求解/ 模型/ ./ 此外/ ,/ 考虑/ 到/ 构件/ 失效/ 相关/ [/ 24/ ]/ 以及/ 容错/ 2/ 研究/ 现状/ 概要/ 、/ 主要/ 问题/ 与/ 关键技术/ 分类/ 框架/ 2.1/ 概要/ 分析/ 从图/ 1/ 描述/ 的/ 与/ 软件可靠性/ 研究/ 相关/ 的/ 技术/ 演变/ 可以/ 看出/ ,/ 可靠性/ 作为/ 软件/ 可信/ 属性/ 的/ 重要/ 组成/ ,/ 关系/ 到/ 系统/ 的/ 安全/ 与/ 可信/ 问题/ ,/ 这/ 一直/ 是/ 计算机科学/ 研究/ 的/ 主要/ 方向/ ,/ 并/ 得到/ 了/ 广泛/ 的/ 关注/ ./ 构件/ 的/ 粒度/ 和/ 形式/ 一直/ 在/ 演化/ 与/ 发展/ ,/ 目前/ 业界/ 探讨/ 的/ 软件体系结构/ 、/ 构件/ 模型/ 等/ ,/ 均/ 是/ 为/ 解决/ 构件之间/ 的/ 接口/ 来/ 实现/ 互操作/ 功能/ ,/ 这样/ 从/ 可靠性/ 研究/ 的/ 角度/ 以及/ 从/ 更/ 高层次/ 的/ 抽象/ 来看/ ,/ 可靠性/ 过程/ 研究/ 人员/ 对/ 构件/ 软件/ 的/ 具体/ 形式/ 进行/ 了/ 透明化/ 处理/ ./ 实际/ 研究/ 中/ 对/ 可靠性/ 在/ 不同/ 层面/ 的/ 需求/ 决定/ 了/ 可靠性/ 过程/ 研究/ 的/ 基本/ 方向/ ,/ 包括/ 建模/ 、/ 增长/ 、/ 测评/ 、/ 分配/ 和/ 仿真/ 等/ ./ 表/ 1/ 中/ 的/ 相关/ 文献/ 从/ 不同/ 层面/ 对/ 构件/ 软件可靠性/ 过程/ 进行/ 简要/ 研究/ 分析/ ./ 配置/ [/ 22/ ]/ 等/ 更为/ 深入/ 的/ 研究/ 已/ 出现/ ./ 文献/ [/ 31/ ]/ 对/ 更为/ 广泛/ 意义/ 上/ 的/ 软件可靠性/ 模型/ 进行/ 了/ 概述/ ,/ 但/ 未/ 体现/ 出/ 构件/ 软件可靠性/ 分析/ 的/ 明显/ 特征/ ./ 随/ 时间/ 持续/ 动态/ 地/ 提高/ 可靠性/ 是/ 构件/ 软件可靠性/ 增长/ 模型/ 的/ 核心/ ,/ 除/ Wang/ 等/ 人/ [/ 32/ ]/ 提出/ 的/ 移动/ 平均值/ 法外/ ,/ 目前/ 主要/ 停留/ 在/ 对/ 可加/ 模型/ [/ 11/ ]/ 的/ 持续/ 改进/ 上/ ,/ 亟待/ 考虑/ 到/ 更/ 多/ 体系结构/ 特征/ 的/ 增长/ 模型/ 被/ 提出/ ./ 如何/ 提高/ 可靠性/ 并/ 降低/ 开发成本/ 至/ 可/ 接受/ 水平/ 是/ 软件/ 工业/ 的/ 主要/ 目标/ ,/ 文献/ [/ 21/ ,/ 25/ ]/ 考虑/ 到/ 体系结构/ 特征/ 进行/ 测试/ 工作量/ 分配/ 并/ 制定/ 最优/ 发布/ 策略/ ,/ 使得/ 研究/ 工作/ 更加/ 贴近/ 工程/ 实际/ ./ 在/ 国内/ ,/ 文献/ [/ 33/ -/ 34/ ]/ 评估/ 了/ 构件/ 的/ 可靠性/ 、/ 操作/ 剖面/ 等/ 对/ 系统可靠性/ 的/ 影响/ ./ 文献/ [/ 18/ ]/ 提出/ 了/ 一种/ 改进/ 的/ 可加/ 模型/ :/ 首先/ 获得/ 构件/ 的/ 实际/ 测试数据/ ,/ Page4/ 并/ 利用/ 仿真/ 将/ 测试/ 剖面/ 转换/ 为/ 运行剖面/ ,/ 进而/ 建立/ 实现/ 单一/ 构件/ 的/ G/ -/ O/ 模型/ ./ 文献/ [/ 35/ ]/ 提出/ 了/ 构件/ 软件/ 的/ 可靠性/ 通用/ 模型/ :/ 构件/ 概率/ 迁移/ 图/ ,/ 追踪/ 构件/ 软件开发/ 进程/ 中/ 的/ 可靠性/ ./ 在/ 可靠性/ 提高/ 方面/ ,/ 文献/ [/ 11/ ]/ 对/ 构件/ 软件/ 在/ 测试/ 过程/ 中/ 在/ 不/ 完全/ 排错/ 情况/ 下/ 进行/ 了/ 分析/ ,/ 其/ 不足/ 是/ 没有/ 考虑/ 到/ 不/ 完美/ 排错/ 这种/ 实际/ 情况/ ./ 综上/ ,/ 国内/ 研究/ 仅/ 有限/ 集中/ 在/ 基于/ 状态/ 模型/ 的/ 可靠性/ 评估/ 与/ 提高/ 上/ ,/ 广泛/ 深入/ 的/ 研究/ 尚未/ 展开/ ./ 经过/ 分析/ ,/ 我们/ 发现/ 这些/ 研究/ 内容/ 所/ 包含/ 的/ 技术/ 方向/ 存在/ 着/ 一定/ 的/ 技术/ 差别/ ,/ 但/ 从/ 可靠性/ 不断/ 提高/ 和/ 最优/ 发布/ 可靠/ 软件/ 的/ 角度/ 来看/ ,/ 都/ 可以/ 被/ 归类/ 到/ 可靠性/ 过程/ 技术/ 体系/ 中/ ./ 构件/ 软件可靠性/ 过程/ 对/ 生命周期/ 内/ 与/ 可靠性/ 紧密/ 相关/ 的/ 多/ 要素/ 进行/ 密切/ 关注/ ,/ 更加/ 注重/ 持续/ 不断/ 地/ 提高/ 可靠性/ 以及/ 实现/ 发布/ 预期/ 目标/ 的/ 可靠/ 软件/ 制品/ ,/ 系统化/ 地/ 基于/ 建模/ 、/ 评估/ 、/ 保证/ 与/ 优化/ 管控/ 等/ 技术/ 确保/ 可靠性/ 得到/ 持续/ 改善/ ./ 目前/ ,/ 其/ 研究/ 发展/ 现状/ 呈现出/ 下述/ 几个/ 特点/ :/ (/ 1/ )/ 基于/ 马尔可夫/ 转移/ 思想/ 的/ 研究/ 方法/ 还/ 发挥/ 着/ 主要/ 功能/ 作用/ ,/ 对/ 研究/ 人员/ 的/ 影响/ 是/ 非常/ 大/ 的/ ,/ 很多/ 文献/ 的/ 研究/ 根基/ 也/ 是/ 基于/ 此/ ./ 例如/ ,/ 在/ 可靠性/ 的/ 建模/ 表示/ 、/ 评估/ 、/ 可靠性/ 增长/ 模型/ 上/ 皆/ 如此/ ;/ (/ 2/ )/ 构件/ 软件可靠性/ 增长/ 模型/ 的/ 进展/ 还是/ 较为/ 缓慢/ ./ 把/ 软件/ 作为/ 一个/ 整体/ 来/ 考虑/ 时/ ,/ 软件可靠性/ 增长/ 模型/ 得到/ 了/ 十分/ 广泛/ 的/ 深入研究/ ,/ 有/ 代表性/ 的/ 模型/ 至少/ 有/ 几十种/ 之多/ ;/ 但/ 当/ 考虑/ 到/ 软件/ 的/ 内部结构/ ,/ 尤其/ 是/ 大型/ 的/ 构件/ 化/ 软件/ 时/ ,/ 其/ 可靠性/ 增长/ 模型/ 的/ 研究/ 仍/ 比较/ 匮乏/ ;/ (/ 3/ )/ 可靠性/ 评估/ 方法/ 正在/ 向/ 非/ 参量/ 非线性/ 的/ 度量/ 与/ 预测/ 方法/ 上/ 趋近/ ,/ 总体而言/ 开始/ 向/ 机器/ 学习/ 的/ 角度/ 靠拢/ ;/ (/ 4/ )/ 非/ 解析/ 方法/ 和/ 构件/ 软件可靠性/ 仿真/ 开始/ 活跃/ :/ 这是/ 由于/ 随着/ 构件/ 软件/ 复杂程度/ 的/ 不断/ 提高/ ,/ 以往/ 基于/ “/ 马尔可夫/ 模型/ +/ 转移/ 概率/ ”/ 解析/ 求解/ 方法/ 的/ 困难/ 度/ 不断/ 激增/ ,/ 必然/ 使得/ 研究/ 人员/ 在/ 寻找/ 新/ 的/ 分析/ 和/ 求解/ 问题/ 上/ 做出/ 大胆/ 的/ 探索/ ;/ (/ 5/ )/ 在/ 测试/ 资源分配/ 与/ 软件/ 最优/ 发布/ 的/ 问题/ 上/ ,/ 虽然/ 以/ 不断/ 提高/ 可靠性/ 作为/ 目标/ 得到/ 了/ 认可/ ,/ 但是/ 当前/ 领域/ 研究/ 现状/ 主要/ 还是/ 囿于/ 单/ 因素/ ,/ 多/ 因素/ 下/ 最优/ 测试/ 资源/ (/ 测试/ 工作量/ // 时间/ )/ 分配/ 与/ 发布/ 情况/ 的/ 考虑/ 稍显/ 不足/ ;/ (/ 6/ )/ 基于/ PCM/ 的/ 可靠性/ 分析/ 正/ 受到/ 关注/ ./ 因为/ 在/ PCM/ 出现/ 之前/ ,/ 构件/ 软件可靠性/ 建模/ 主要/ 还是/ 集中/ 在/ 马尔可夫/ 模型/ 上/ ,/ 而且/ 也/ 主要/ 由/ 可靠性/ 研究/ 人员/ 来/ 单独/ 解决/ ;/ PCM/ 的/ 出现/ 使得/ 构件/ 及/ 构件/ 软件/ 模型/ 建模/ 变得/ 更为/ 多样/ 与/ 细致/ ,/ 更/ 多/ 的/ 角色/ 被/ 引入/ 与/ 评估/ 技术/ ;/ 程/ 进行/ 动态/ 描述/ ,/ 实现/ 可靠性/ 的/ 动态/ 增长/ ;/ 本文/ 立足于/ 构件/ 软件/ 的/ 可靠性/ ,/ 对/ 其/ 可靠性/ 过/ 进来/ ,/ 更为重要/ 的/ 是/ 其/ 使得/ 研究/ 过程/ 体现/ 软件工程/ 的/ 色彩/ 更/ 浓厚/ ,/ 这是/ 近年来/ 一个/ 主要/ 趋势/ ./ 程/ 的/ 最新/ 发展/ 进程/ 和/ 研究/ 方向/ 进行/ 综述/ ./ 2.2/ 主要/ 问题/ 构件/ 软件可靠性/ 过程/ 主要/ 关注/ 的/ 核心/ 问题/ 是/ ,/ 在/ 构件/ 软件/ 的/ 整个/ 生命周期/ 内/ ,/ 主要/ 以/ 动态/ 提高/ 可靠性/ 这一/ 过程/ 为/ 核心/ ,/ 实现/ 预期/ 可靠性/ 相关/ 目标/ ./ 其/ 研究/ 的/ 要点/ 可以/ 概括/ 为/ :/ (/ 1/ )/ 可靠性/ 的/ 建模/ 表示/ 、/ 度量/ 计算/ 、/ 预测/ 、/ 保证/ (/ 2/ )/ 采用/ 适当/ 的/ 技术手段/ 实现/ 对/ 测试/ 与/ 运行/ 过/ (/ 3/ )/ 合理/ 分配/ 受限/ 的/ 测试/ 资源/ ,/ 实现/ 预期/ 目标/ 下/ 的/ 软件/ 最优/ 发布/ 等/ ./ 可以/ 看出/ ,/ 相比/ 于/ 软件可靠性/ 工程/ 中/ 对/ 可靠性/ 的/ 设计/ 与/ 管理/ 、/ 定量/ 测评/ 与/ 保证/ 技术/ [/ 36/ -/ 37/ ]/ ,/ 构件/ 软件可靠性/ 过程/ 在/ 其/ 基础/ 上/ 所/ 涵盖/ 的/ 技术/ 内涵/ 更为/ 丰富/ ,/ 突出/ 面向/ 可靠性/ 提高/ 的/ 全过程/ ,/ 是/ 可靠性/ 工程/ 在/ 考虑/ 构件/ 软件/ 基本特征/ 基础/ 上/ 面向/ 可靠性/ 动态/ 提高/ 研究/ 的/ 进一步/ 发展/ ./ 例如/ ,/ 以/ 测试/ 环节/ 为例/ ,/ 以往/ 可靠性/ 工程/ 中/ 测试/ 的/ 目的/ 是/ 发现/ Bug/ ,/ 以/ 检测/ 与/ 修复/ 为/ 导向/ ,/ 可靠性/ 过程/ 则/ 以/ 不断/ 提高/ 测试/ 过程/ 中/ 的/ 可靠性/ 为/ 目标/ [/ 2/ ,/ 11/ ]/ ./ 此外/ ,/ 可靠性/ 工程/ 显示/ 出/ 明显/ 的/ 软件工程/ 特征/ ,/ 目前/ 可靠性/ 过程/ 则/ 并/ 不/ 显著/ ./ 可靠性/ 过程/ 技术/ 均/ 是/ 紧密/ 围绕/ 着/ 构件/ 软件/ 的/ 可靠性/ 提高/ 方面/ 来/ 展开/ [/ 13/ ]/ ,/ 但/ 无论/ 从/ 应用/ 在/ 构件/ 软件/ 的/ 某个/ 生命周期/ 上/ ,/ 研究/ 内容/ 的/ 差异性/ 上/ ,/ 还是/ 具体/ 的/ 技术/ 形式/ 上/ ,/ 尚/ 需要/ 明确/ 如何/ 确定/ 每/ 类/ 技术/ 问题/ 的/ 核心/ ,/ 以及/ 如何/ 界定/ 每/ 类/ 技术/ 的/ 边界/ ./ 2.3/ 关键技术/ 分类/ 框架/ 构件/ 软件可靠性/ 过程/ 技术/ 作为/ 面向/ 涵盖/ 其/ 生命周期/ 中/ 可靠性/ 不断/ 提高/ 的/ 动态/ 保障/ 技术/ ,/ 在/ 理论/ 研究/ 与/ 工程/ 实践/ 方面/ 具有/ 非常/ 重要/ 的/ 价值/ ./ 为了/ 不断/ 提高/ 可靠性/ ,/ 达到/ 预期/ 要求/ ,/ 同时/ 由于/ 软件/ 实际/ 测试/ 与/ 运行/ 中/ 的/ 随机性/ 等/ 因素/ ,/ 使得/ 该/ 研究/ 活动/ 所/ 涵盖/ 的/ 内容/ 较/ 多/ ,/ 所/ 涉及/ 到/ 的/ 技术/ 分类/ 也/ 颇为/ 丰富/ ./ 通过/ 对/ 现有/ 研究/ 的/ 相关/ 工作/ 进行/ 归类/ 和/ 梳理/ ,/ 形成/ 如图/ 2/ 所示/ 的/ 研究/ 体系/ ./ 从图/ 2/ 所示/ 的/ 总体/ 技术/ 框架/ 可以/ 看出/ ,/ 该/ 技术/ 主要/ 是/ 由/ 构件/ 软件/ 的/ 生命周期/ 进程/ 划分/ 中/ 涉及/ 的/ 可靠性/ 研究/ 内容/ 和/ 技术/ 上/ 的/ 总体/ 范畴/ 来/ 决定/ 的/ ./ 其/ 研究/ 内容/ 和/ 方向/ 的/ 要点/ 主要/ 有/ :/ (/ 1/ )/ 可靠性/ 的/ 建模/ 技术/ ,/ 描述/ 如何/ 用/ 合适/ 的/ 模型/ 建立/ 构件/ 的/ 失效/ 以及/ 整个/ 软件/ 的/ 可靠性/ 求解/ 思路/ ;/ Page5/ 图/ 2/ 以/ 可靠性/ 过程/ 为/ 核心/ 的/ 基本/ 内容/ 体系结构/ 与/ 关键技术/ 分类/ 框架/ 可靠性/ 的/ 度量/ 、/ 预测/ ;/ (/ 2/ )/ 可靠性/ 的/ 测评/ 技术/ ,/ 实现/ 对/ 整个/ 构件/ 软件/ (/ 3/ )/ 可靠性/ 增长/ 模型/ 技术/ ,/ 基于/ 测试/ 或/ 运行/ 数据/ ,/ 采用/ 统计分析/ 的/ 方法/ ,/ 建立/ 可靠性/ 不断/ 提高/ 的/ 数学模型/ ;/ (/ 4/ )/ 可靠性/ 过程/ 仿真技术/ ,/ 采用/ 离散/ 事件/ 的/ 仿真/ 方法/ 对/ 构件/ 软件/ 的/ 测试/ 过程/ 进行/ 建模/ 描述/ ,/ 进而/ 建立/ 一段时间/ 内/ 检测/ 与/ 排除/ 的/ 故障/ 数量/ 与/ 可靠性/ 的/ 定量/ 关系/ ;/ (/ 5/ )/ 测试/ 资源分配/ 与/ 最优/ 发布/ 技术/ ,/ 建立/ 测试/ 过程/ 中/ 测试/ 资源/ 在/ 构件/ 间/ 分配/ 的/ 最优化/ 关系式/ ,/ 实现/ 在/ 预期/ 目标/ 下/ 的/ 最优/ 发布/ 软件/ ;/ (/ 6/ )/ 基于/ PCM/ 的/ 可靠性/ 相关/ 技术/ 则/ 是/ 将/ 模型/ 驱动/ 建模/ 方法/ 与/ 传统/ 可靠性/ 研究/ 相结合/ 而/ 产生/ 的/ 新/ 技术/ ,/ 是/ 可靠性/ 研究/ 与/ 软件工程/ 相互/ 融合/ 的/ 新/ 发展/ ./ 在/ 图/ 2/ 中/ ,/ 基于/ 体系结构/ 的/ 建模/ 表示/ 是/ 构件/ 软件可靠性/ 过程/ 研究/ 的/ 基础/ ,/ 其/ 对/ 构件/ 软件/ 的/ 内部结构/ 特征/ 、/ 构件/ 失效率/ 等/ 进行/ 了/ 必要/ 描述/ ;/ 可靠性/ 增长/ 模型/ 则/ 是/ 可靠性/ 过程/ 研究/ 的/ 核心/ ,/ 其他/ 研究/ 问题/ 的/ 描述/ 与/ 求解/ 过程/ 中/ 大都/ 需要/ 依托/ 可靠性/ 增长/ 模型/ 的/ 定量/ 评测/ 能力/ 来/ 实施/ ./ 3/ 构件/ 软件可靠性/ 过程/ 研究/ 支撑/ 要素/ 构件/ 软件/ 由/ 多个/ 构件/ 连接/ 而成/ ,/ 构件/ Ci/ 的/ 运行/ 类似/ 于/ 传统/ 的/ 过程/ 类/ 软件/ 执行/ ,/ 其/ 执行/ 后/ 可能/ 会/ 面临/ 着/ 不同/ 的/ 转移/ 去向/ ,/ 而/ 这些/ 转移/ 去向/ 通常/ 与/ 构件/ 的/ 重要性/ 、/ 操作/ 剖面/ 等/ 直接/ 相关/ ./ 此外/ ,/ 整个/ 构件/ 软件/ 的/ 可靠性/ R/ 由/ 单一/ 构件/ 的/ 可靠性/ Ri/ 、/ 转移/ 概率/ pij/ 、/ 操作/ 剖面/ 犘/ 、/ 构件/ 权重/ ω/ i/ 等/ 因素/ 决定/ ,/ 因此/ 构件/ 软件可靠性/ 过程/ 研究/ 相比/ 于/ 传统/ 单一/ 软件/ 涉及/ 到/ 更/ 多/ 的/ 技术细节/ ./ 3.1/ 构件/ 软件/ 实例/ 为/ 便于/ 理解/ 和/ 后续/ 讲解/ ,/ 设某/ 构件/ 软件/ 为/ S/ =/ {/ Ci/ |/ 1/ / i/ / N/ }/ ,/ Ci/ 为/ 第/ i/ 个/ 构件/ ./ 例如/ 图/ 3/ 给出/ 了/ 一个/ 典型/ 的/ 构件/ 软件/ ,/ 其/ 由/ 10/ 个/ 构件/ Ci/ (/ 1/ / i/ / 10/ )/ 构成/ ,/ 其中/ 的/ pij/ 表示/ 构件/ Ci/ 与/ Cj/ 间/ 的/ 转移/ 概率/ 值/ ,/ 满足/ ∑/ ipij/ =/ 1/ ,/ 0/ / pij/ / 1.3/ ./ 2/ 基本/ 研究/ 支撑/ 要素/ 3.2/ ./ 1/ 操作/ 剖面/ 操作/ 剖面/ OP/ (/ OperationalProfile/ )/ 是/ 对/ 用户/ 使/ Page6/ 用/ 软件/ 方式/ 的/ 一种/ 统计/ ,/ 通过/ 识别/ 不同/ 执行/ 操作/ 的/ 频率/ 可/ 被/ 用来/ 引导/ 开发/ 与/ 测试/ 的/ 进行/ 和/ 性能/ 分析/ [/ 41/ ,/ 51/ -/ 52/ ]/ ./ 是从/ 程序/ 输入/ 子域/ 集合/ {/ SDi/ ,/ 1/ / i/ / n/ }/ 到/ 其/ 运行/ 正确/ 概率/ 值/ pi/ 的/ 映射/ ,/ 且/ 满足/ ∑/ n/ 障对/ 可靠性/ 的/ 影响/ 也/ 取决于/ 操作/ 剖面/ ./ 操作/ 剖面/ 也/ 定义/ 了/ 在/ 软件系统/ 的/ 特定/ 使用/ 场景/ 下/ 使用/ 案例/ 出现/ 的/ 次数/ [/ 19/ ]/ ./ 操作/ 运行剖面/ 可以/ 通过/ 下面/ 方法/ 来/ 求得/ ./ (/ 1/ )/ 在/ 测试/ 与/ 运行/ 阶段/ ,/ 可/ 通过/ 剖面/ 工具/ 来/ 获得/ [/ 14/ ]/ ,/ 例如/ 运用/ 动态/ 剖面/ 工具/ gprof/ ①/ ;/ (/ 2/ )/ 通过/ 内部/ 的/ 转移/ 概率/ pij/ 来/ 求得/ [/ 10/ ,/ 53/ ]/ ;/ (/ 3/ )/ 在/ 早期/ 设计阶段/ ,/ 可/ 经过/ 仿真/ 的/ 方法/ 来/ 获得/ [/ 41/ ]/ ./ 3.2/ ./ 2/ 构件/ 间/ 转移/ 概率/ 转移/ 概率/ 表示/ 构件/ 间/ 执行/ 控制/ 的/ 转移/ (/ 交换/ )/ ,/ 其本质/ 是/ 一种/ 随机/ 过程/ ,/ 表示/ 如下/ :/ 犘/ =/ {/ pij/ }/ ,/ 其中/ pij/ ≡/ Pr/ {/ 程序/ 控制权/ 由/ Ci/ 转移/ 到/ Cj/ }/ ./ 转移/ 概率/ 矩阵/ 犘/ =/ [/ pij/ ]/ N/ ×/ N/ 可/ 通过/ 下面/ 的/ 方法/ 来/ 求得/ :/ (/ 1/ )/ pij/ 用以/ 表示/ 运行/ 中/ 构件/ 的/ 分支/ 特性/ ,/ 在/ 早期/ 设计阶段/ ,/ pij/ 可/ 经过/ 仿真/ 的/ 方法/ 来/ 获得/ [/ 41/ ,/ 54/ ]/ ;/ (/ 2/ )/ pij/ 可/ 通过/ 操作/ 剖面/ OP/ 或/ 运行/ 频率/ 分布/ [/ 53/ ]/ 来/ 求得/ ;/ (/ 3/ )/ 在/ 测试/ 与/ 运行/ 阶段/ ,/ pij/ 可/ 通过/ 剖面/ 工具/ [/ 8/ ,/ 14/ ,/ 21/ ]/ (/ 4/ )/ 通过/ 统计/ 构件/ 间/ 执行/ 控制/ 转移/ 的/ 次数/ 估计/ 出来/ [/ 8/ ]/ :/ 构件/ Ci/ 与/ Cj/ 之间/ 的/ 转移/ 概率/ 的/ 点估计/ 可以/ 通过/ 如下/ 公式/ 计算/ 得到/ 来/ 获得/ ;/ pij/ =/ NumberOfTransfersi/ ,/ j/ (/ 5/ )/ 基于/ 场景/ 的/ 构件/ 间/ 交互/ 也/ 常/ 被/ 用来/ 进行/ 计/ k/ =/ 1/ 算/ 转移/ 概率/ [/ 41/ ]/ ,/ 例如/ :/ pij/ =/ ∑/ S/ 其中/ ,/ PSk/ 是/ Sk/ 场景/ 执行/ 的/ 概率/ ,/ |/ Interact/ (/ Ci/ ,/ Cj/ )/ |/ 是/ Sk/ 场景/ 中/ 构件/ Ci/ 与/ Cj/ 交互/ 的/ 次数/ ./ 相比/ 式/ (/ 1/ )/ ,/ 式/ (/ 2/ )/ 考虑/ 到/ 执行/ 场景/ ,/ 对/ 转移/ 概率/ 的/ 计算/ 更为/ 细致/ ./ 一般/ 假定/ 构件/ 间/ 的/ 转移/ 满足/ 马尔可夫/ 过程/ ;/ 转移/ 概率/ 仅/ 由/ 操作/ 剖面/ 决定/ ,/ 即/ 犘/ =/ [/ pij/ ]/ =/ f/ (/ OP/ )/ ./ 例如/ ,/ 离散/ 时间/ 马尔可夫/ 链/ DTMC/ (/ DiscreteTimeMarkovChain/ )/ 可用/ 来/ 建模/ 构件/ 软件/ 的/ 体系结构/ ,/ 且/ 可/ 通过/ 构件/ 间/ 一步/ 转移/ 概率/ 犘/ =/ [/ pij/ ]/ N/ ×/ N/ 来/ 表示/ ,/ 其中/ 0/ / pij/ / 1/ ,/ 犘/ 中/ 每行/ 元素/ 的/ 和/ 为/ 1/ ,/ 即/ ∑/ jpij/ =/ 1/ ./ 也就是说/ 下/ 一步/ 控制/ 转移/ 只/ 由/ 当前/ 构件/ 决定/ ,/ 而/ 与/ 过去/ 的/ 行为/ 历史/ 无关/ [/ 42/ ]/ ./ 在/ 此/ ,/ 有/ 两点/ 需要/ 指出/ :/ (/ 1/ )/ 现有/ 研究/ ,/ 多/ 假定/ 构件/ 间/ 的/ 一步/ 转移/ 概率/ 是/ S/ -/ 不/ 相关/ 的/ ,/ 且/ 任何/ 构件/ 的/ 失效/ 均/ 导致/ 整个/ 应用/ 的/ 失效/ [/ 21/ ]/ ./ 显然/ ,/ 该/ 假定/ 过于/ 苛刻/ ;/ (/ 2/ )/ 转移/ 概率/ 是/ 对/ 软件/ 运行/ 过程/ 中/ 构件/ 间/ 转移/ 的/ 概率/ 统计/ ,/ 其/ 从/ 控制权/ 转移/ 的/ 角度/ 对/ 操作/ 剖面/ 进行/ 了/ 描述/ ,/ 但/ 并/ 不能/ 完全/ 等价/ 于/ 操作/ 剖面/ ./ 3.2/ ./ 3/ 构件/ 权重/ 分配/ 对/ 重要性/ ,/ 关于/ 权重/ 分配/ ω/ i/ 存在/ 下面/ 几种/ 情况/ :/ 2/ ,/ …/ ,/ N/ ;/ 故障/ 个数/ 的/ 比例/ 来/ 确定/ :/ ω/ i/ =/ ai/ ∑/ N2/ ,/ …/ ,/ N/ [/ 43/ ]/ ;/ (/ 3/ )/ 通过/ 专家/ 意见/ 集结/ 来/ 分配/ 权重/ ./ 构件/ Ci/ 的/ 权重/ ω/ i/ 反映/ 了/ 其/ 在/ 所有/ 构件/ 中/ 的/ 相/ (/ 1/ )/ 认为/ 各/ 构件/ 的/ 权重/ 均/ 相等/ ω/ i/ =/ 1/ ,/ i/ =/ 1/ ,/ (/ 2/ )/ 通过/ 构件/ Ci/ 的/ 故障/ 个数/ 与/ 构件/ 软件/ 的/ 总/ 3.2/ ./ 4/ 关键/ 构件/ 识别方法/ 关键/ 构件/ 在/ 系统可靠性/ 构成/ 中/ 往往/ 占有/ 关键/ 地位/ ,/ 例如/ ,/ 在/ 关键/ 路径/ 上/ 的/ 一个/ 不/ 可靠/ 的/ 构件/ 可能/ 导致/ 软件系统/ 的/ 毁灭/ ./ 因此/ ,/ 关键/ 构件/ 在/ 被/ 集成/ 到/ 系统/ 之前/ 必须/ 经过/ 全面/ 的/ 可靠性/ 评估/ ./ 关键/ 构件/ 集合/ CC/ =/ {/ Ci/ |/ Ci/ 是/ 关键/ 构件/ }/ 可/ 通过/ 如下/ 几种/ 方法/ 来/ 获取/ :/ (/ 1/ )/ 借助/ 敏感性/ 分析/ 结果/ 的/ 大小/ 来/ 获得/ [/ 53/ ]/ :/ si/ =/ ,/ R/ 是/ 系统可靠性/ ,/ Ri/ 是/ 构件/ Ci/ 的/ 可靠性/ ;/ (/ 2/ )/ 计算/ 出/ Ci/ 稳态/ 下/ 的/ 执行/ 概率/ ki/ ,/ 通过/ ki/ 数/ / R/ / Ri/ 值/ 的/ 大小/ 来/ 判断/ ,/ 例如/ :/ K/ =/ KP1/ )/ -/ R/ (/ Ri/ =/ 0/ )/ 进行/ 计算/ [/ 55/ ]/ ,/ 其/ 结果/ 同/ 上/ ;/ 构件/ [/ 56/ ]/ ;/ (/ 3/ )/ 另外/ ,/ 也/ 可/ 应用/ 公式/ IR/ ≡/ / R/ // Ri/ =/ R/ (/ Ri/ =/ (/ 4/ )/ 文献/ [/ 12/ ]/ 通过/ 仿真/ 的/ 方法/ 确定/ 出/ 关键/ (/ 5/ )/ 专家/ 意见/ 法/ :/ 在/ 关键/ 构件/ 的/ 识别/ 上/ ,/ 关键/ 构件/ 被/ 认为/ 与/ 其他/ 构件/ 涉及/ 到/ 更/ 多/ 的/ 复杂/ 交互/ 过程/ [/ 8/ ]/ ./ 通过/ 识别/ 关键/ 构件/ ,/ 可以/ 获得/ 相应/ 的/ 关键/ 路径/ ,/ 这样/ 测试/ 中/ 的/ 路径/ 选择/ 可/ 依据/ 关键/ 路径/ 作为/ 参考/ ;/ 另一方面/ ,/ 当/ 测试/ 资源/ 受限/ 时/ ,/ 可/ 依据/ 关键/ 构件/ (/ 节点/ )/ 与/ 路径/ 制定/ 测试/ 资源/ 成本/ 的/ 有效性/ 分配/ 策略/ ./ ①/ http/ :/ // // www/ ./ gnu/ ./ org/ // software/ // binutils/ // manual/ // gprof/ -/ 2.9/ ./ 1/ // Page73/ ./ 2.5/ 构件/ 级别/ 可靠性/ 计算/ 在/ 进行/ 构件/ 软件可靠性/ 的/ 度量/ 与/ 预测/ 时/ ,/ 通常/ 表/ 2/ 构件/ 犆/ 犻/ 的/ 可靠性/ 犚/ 犻/ 求解/ 方法/ 序号/ 求解/ 方法/ 1/ 失效率/ 方法/ [/ 25/ ]/ Ri/ =/ e/ -/ ∫/ ti2/ 软件可靠性/ 模型/ [/ 21/ ]/ si/ ,/ j/ 表示/ 从/ Ci/ 开始/ Cj/ 被/ 访问/ 次数/ 的/ 均值/ ;/ mi/ (/ t/ )/ 表示/ 到/ t/ 时/ 累积/ 从/ Ci/ 检测/ 到/ 的/ 故障/ 数量/ 34/ 输入/ 域/ 模型/ 进行/ 5/ 随机/ 统计法/ [/ 53/ ]/ 6/ 可靠性/ 的/ 定义/ [/ 19/ ,/ 36/ ]/ (/ 0/ ,/ t/ )/ 内/ 可靠性/ :/ Ri/ (/ t/ )/ =/ limn/ →/ 7/ 比率/ 法/ [/ 58/ -/ 59/ ]/ 累积/ 的/ 被/ 检测/ 的/ 故障/ 数量/ 与/ 软件/ 中/ 初始/ 故障/ 数量/ 的/ 比率/ :/ Ri/ (/ t/ )/ =/ m/ (/ t/ )/ 8/ 冒险/ 率法/ [/ 59/ ]/ 源/ 消耗/ 下/ 的/ 故障/ 检测/ 率/ ,/ 则/ 构件/ Ci/ 的/ 可靠性/ 为/ Ri/ (/ s/ )/ =/ e/ -/ γ/ z/ (/ t/ )/ s/ =/ e/ -/ γ/ ae/ -/ rW/ (/ t/ )/ s9/ 访问/ 次数法/ [/ 25/ ]/ E/ [/ R/ ]/ ≈/ ∏/ N/ -/ 110/ 基于/ 插桩/ 的/ 方法/ [/ 19/ ]/ 目标/ 构件/ 被/ 插/ 桩/ 用以/ 搜集/ 关于/ 它们/ 行为/ 的/ 信息/ ,/ 该/ 过程/ 由/ 3/ 个/ 步骤/ 来/ 实现/ :/ ①/ 测试/ 准备/ ;/ ②/ 插桩/ 用以/ 搜集/ 构件/ 11/ 风险/ 函数/ 法/ [/ 37/ ]/ Ri/ (/ t/ )/ =/ e/ -/ ∫/ t12/ 测试/ 案例/ 法/ [/ 19/ ]/ pij/ =/ 1/ -/ 13/ 故障注入/ 法/ [/ 15/ ]/ 采用/ 故障注入/ 方法/ 来/ 获得/ 每个/ 构件/ 的/ 可靠性/ 14/ 专家/ 意见/ 法/ [/ 25/ ]/ 行业/ 领域专家/ 依据/ 自身/ 经验/ 与/ 软件/ 运行/ 统计数据/ 进行/ 估测/ 4/ 基于/ 体系结构/ 的/ 可靠性/ 建模/ 以往/ ,/ 可靠性/ 分析/ 仅仅/ 用/ 在/ 黑盒/ 软件/ ./ 目前/ ,/ 基于/ 体系结构/ 的/ 可靠性/ 分析/ 正/ 成为/ 研究/ 热点/ [/ 8/ ,/ 21/ ,/ 25/ ]/ ,/ 其/ 适用/ 于/ 软件/ 生命周期/ 的/ 各个/ 阶段/ :/ 从/ 设计阶段/ 到/ 操作/ 运行/ 阶段/ ./ Goeva/ -/ Popstojanova/ 和/ Trivedi/ [/ 60/ ]/ 需要/ 首先/ 获得/ 单一/ 构件/ Ci/ 的/ 可靠性/ Ri/ ,/ 表/ 2/ 集中/ 的/ 给出/ 了/ 目前/ 研究/ 中/ Ri/ 的/ 获得/ 方法/ ./ 公式化/ 描述/ 与/ 解释/ β/ i/ ,/ 其中/ UCj/ 表示/ 使用/ 案例/ j/ ,/ UCjCountCi/ _/ Failure/ _/ in/ _/ UCj/ 表示/ 构件/ 最早/ 于/ 2001/ 年/ 对/ 构件/ 软件/ 的/ 可靠性/ 分析/ 研究/ 进行/ 了/ 分类/ [/ 39/ ,/ 61/ ]/ ,/ 随后/ Gokhale/ 等/ 人/ [/ 14/ -/ 16/ ,/ 38/ ]/ 又/ 对/ 其/ 进一步/ 展开/ 了/ 一系列/ 的/ 研究/ ,/ 其/ 基于/ 体系结构/ 的/ 建模/ 方法/ 给出/ 了/ 下面/ 3/ 个/ 类别/ ,/ 即/ 基于/ 状态/ 、/ 基于/ 路径/ 和/ 可加/ 模型/ ./ 目前/ ,/ 基于/ 状态/ 与/ 路径/ 的/ 模型/ 常/ 被/ 用来/ 分析/ 系统/ 的/ 可靠性/ ,/ 可/ 加/ 模型/ 主要/ 被/ 用来/ 解决/ 以/ 可靠性/ 为/ Page8/ 核心/ 的/ 测试/ 资源/ (/ 测试/ 时间/ 和/ 成本/ 预算/ )/ 分配/ 问题/ ./ 构件/ 的/ 失效/ 行为/ 也/ 存在/ 3/ 种/ 建模/ 形式/ [/ 12/ ,/ 16/ ,/ 25/ ]/ :/ (/ 1/ )/ 失效/ 概率/ 或/ 可靠性/ (/ 例如/ Ri/ )/ ./ 此时/ 时间/ 可以/ 被/ 理解/ 为/ 执行/ 次数/ ,/ 需要/ 记录/ 构件/ Ci/ 失效/ 的/ 个数/ 以及/ 被/ 执行/ 的/ 总/ 次数/ ./ (/ 2/ )/ 常量/ 失效率/ (/ 例如/ λ/ i/ )/ :/ 此时/ 构件/ 失效率/ 不/ 依赖于/ 构件/ 的/ 状态/ 和/ 时间/ ,/ 依据/ 对/ 其/ 失效/ 过程/ 的/ 理解/ ,/ 存在/ 纯生/ 与/ 纯死/ 两种/ 情况/ ,/ 在/ 8.1/ 节中/ 有/ 较为/ 详细/ 的/ 介绍/ ./ (/ 3/ )/ 时间/ 相关/ 的/ 失效/ 强度/ (/ 例如/ ,/ 经典/ 的/ G/ -/ O/ 模型/ 中/ λ/ i/ (/ t/ )/ =/ aibie/ -/ bit/ )/ :/ 此时/ 失效率/ 依赖于/ 构件/ 的/ 状图/ 4/ 基于/ 体系结构/ 的/ 构件/ 软件可靠性/ 分析方法/ 特别/ 需要/ 指出/ ,/ 软件系统/ 与/ 硬件/ 系统/ 不同/ ,/ 系统/ 中/ 每个/ 构件/ 并/ 不/ 处于/ 持续/ 激活状态/ ,/ 构件/ 在/ 调用/ 时/ 执行/ ,/ 因此/ 分析/ 构件/ 软件应用/ 可靠性/ 的/ 一个/ 关键问题/ 在于/ 得到/ 每个/ 构件/ 的/ 使用/ 模型/ ./ 因此/ ,/ 研究/ 集成/ 测试/ 中/ 构件/ 软件应用/ 中/ 每个/ 构件/ 的/ 使用/ 模型/ (/ 包含/ 其/ 失效/ 行为/ )/ 是/ 未来/ 的/ 研究/ 挑战/ ./ 此外/ ,/ 在/ 建模/ 中/ ,/ 基于/ 时间/ 序列/ 的/ 动态/ 建模/ 技术/ 值得/ 关注/ ./ 在/ 对/ 构件/ 软件应用/ 的/ 性能/ 进行/ 预测/ 和/ 可靠性/ 分析/ 时/ ,/ 需要/ 获得/ 如下/ 信息/ [/ 14/ ,/ 46/ ]/ :/ (/ 1/ )/ 应用/ S/ 的/ 体系结构/ ;/ (/ 2/ )/ 构件/ Ci/ 的/ 失效/ 行为/ ;/ (/ 3/ )/ 构件/ 间接口/ 交互/ Iij/ 的/ 失效/ 行为/ ./ 4.1/ 体系结构/ 建模/ 与/ 构件/ 失效/ 建模/ 和/ 求解/ 方法/ (/ 1/ )/ 基于/ 状态/ 的/ 模型/ ./ 此时/ 构件/ 软件/ 的/ 体系结构/ 可/ 采用/ 概率/ 控制流/ 图来/ 建模/ 表示/ [/ 16/ ]/ ;/ 体系结构/ 与/ 构件/ 失效/ 行为/ 被/ 建模/ 表示/ 为/ 马尔可夫/ 链/ 或/ 半/ 马尔可夫/ 链/ ;/ 并且/ 假定/ 构件/ 间/ 的/ 转移/ 具有/ Markov/ 属性/ ,/ 一般/ 可/ 被/ 建模/ 为/ DTMC/ [/ 14/ ]/ 、/ CTMC/ (/ ContinuousTimeMarkovChain/ )/ 或/ SMP/ (/ Semi/ -/ MarkovProcess/ )/ ./ 这些/ 模型/ 又/ 可/ 分为/ 吸收/ 和/ 不可/ 约/ 的/ [/ 27/ ]/ ,/ 前者/ 一般/ 表示/ 对应/ 终止/ 型/ 应用/ ,/ 此时/ 至少/ 存在/ 一个/ 没有/ 输出/ 转移/ 的/ 状态/ i/ ,/ 且/ 到达/ 某个/ 吸收/ 状态/ 后/ ,/ 系统/ 就/ 成功/ 结束/ 或/ 失效/ ;/ 后者/ 可/ 表示/ 连续/ 运行/ 的/ 应用/ ,/ 此时/ 从任/ 一个/ 状态/ 经过/ 一步/ 或/ 有限/ 多/ 步/ 转移/ 可以/ 到达/ 另/ 一个/ 状态/ 和/ 时间/ ./ 由于/ 时间/ 相关/ 的/ 失效/ 行为/ 具有/ 更强/ 的/ 描述/ 其/ 失效/ 行为/ ,/ 且/ 其/ 依赖于/ 构件/ 自身/ 特征/ 与/ 如何/ 被/ 使用/ 的/ 关系/ ,/ 因此/ 这种/ 失效/ 行为/ 从/ 理论/ 上/ 具有/ 最强/ 的/ 建模/ 描述/ 能力/ ,/ 但/ 在/ 实际/ 应用/ 中/ ,/ 很多/ 情况/ 下/ 求解/ 较为/ 困难/ ./ 有些/ 情况/ 下/ ,/ 软件/ 的/ 失效/ 行为/ 可/ 借助/ 计算机辅助/ 软件可靠性/ 估计/ 工具/ [/ 62/ ]/ 来/ 获得/ ./ 基于/ 上面/ 的/ 分析/ ,/ 图/ 4/ 给出/ 了/ 构件/ 软件可靠性/ 分析/ 的/ 整体/ 架构图/ ,/ 其中/ 第/ 2/ 个/ 虚/ 线框/ 中/ 基于/ 路径/ 模型/ 与/ 可加/ 模型/ 在/ 后续/ 第/ 6.2/ ./ 1/ 节/ 与/ 6.2/ ./ 2/ 节中/ 结合/ 有关/ 问题/ 进行/ 分析/ ,/ 第/ 3/ 个/ 虚/ 线框/ 中/ 给出/ 了/ 仿真/ 方法/ 的/ 技术/ 分类/ ,/ 在/ 后续/ 的/ 第/ 8/ 节中/ 有/ 详细/ 的/ 介绍/ ./ 态/ ,/ 且/ 此时/ 每个/ 状态/ 具有/ 稳定/ 的/ 状态/ 概率/ (/ 即/ 在/ 特定/ 的/ 时间/ 内/ 某/ 构件/ 被/ 执行/ 的/ 概率/ )/ ./ 基于/ 状态/ 的/ 模型/ 通过/ 联合/ 体系结构/ 与/ 失效/ 行为/ 采用/ 解析/ 的/ 方法/ 估计/ 软件可靠性/ ,/ 在/ 求解/ 阶段/ 又/ 可/ 被/ 分为/ 组合式/ 模型/ 与/ 层次/ 式/ 模型/ 两种/ 求解/ 分析方法/ ./ 前者/ 软件体系结构/ 和/ 失效/ 行为/ 以/ 相同/ 的/ 模型/ 被/ 结合/ 在/ 一起/ ;/ 后者/ 先对/ 体系结构/ 模型/ 进行/ 求解/ ,/ 再/ 将/ 构件/ 的/ 失效/ 行为/ 叠加/ 到/ 上面/ 进行/ 整体/ 的/ 求解/ [/ 63/ ]/ ./ 采用/ 层次化/ 方法/ ,/ 其算/ 得/ 的/ 可靠性/ 只是/ 近似值/ ,/ 但/ 相比/ 于/ 组合式/ 方法/ 求解/ 灵活/ ,/ 速度/ 更/ 快且/ 易于/ 求解/ ./ 在/ 组合/ 模型/ 中/ ,/ 评估/ 不同/ 的/ 体系结构/ 或者/ 构件/ 行为/ 变化/ 的/ 影响/ 的/ 计算/ 量/ 是/ 巨大/ 的/ ./ 这种/ 被/ 抽象/ 为/ 各类/ 马尔可夫/ 模型/ 与/ 转移/ 概率/ 相结合/ 的/ 总体/ 模式/ ,/ 目前/ 被/ 广泛/ 使用/ ,/ 但/ 其/ 存在/ 着/ 明显/ 的/ 不足/ :/ ①/ 首先/ 实际/ 应用/ 中/ 转移/ 概率/ pij/ 的/ 获取/ 是/ 比较/ 困难/ 的/ ,/ 现有/ 大多/ 是/ 采用/ 统计/ 方式/ 来/ 确定/ ,/ 此外/ 转移/ 概率/ 虽是/ 对/ 操作/ 剖面/ OP/ 的/ 近似/ ,/ 或者说/ 是/ 其/ 函数/ (/ 即/ 犘/ =/ [/ pij/ ]/ =/ f/ (/ OP/ )/ )/ ,/ 但/ 毕竟/ 二者/ 有/ 较大/ 的/ 差距/ ,/ 现有/ 研究/ 用/ 转移/ 概率/ 代替/ 操作/ 剖面/ 制约/ 着/ 研究/ 的/ 深入/ ;/ ②/ 现有/ 研究/ 中/ 构件/ 的/ 规模/ 一般/ 不/ 超过/ 十个/ 构件/ ,/ 随着/ 构件/ 个数/ 的/ 上升/ ,/ 无论/ 组合式/ 还是/ 层次/ 式/ 求解/ 都/ 会/ 变得/ 异常/ 复杂/ ./ 因此/ ,/ 如何/ 更加/ 靠近/ 真实/ 的/ 应用/ ,/ 降低/ 解析/ 难度/ 是/ 未来/ 研究/ 的/ 挑战/ ./ Page9/ (/ 2/ )/ 基于/ 路径/ 的/ 模型/ ./ 基于/ 路径/ 的/ 模型/ 通过/ 计算/ 系统/ 可能/ 的/ 执行/ 路径/ 方式/ 来/ 计算/ 系统可靠性/ [/ 8/ ,/ 64/ -/ 65/ ]/ ./ 显然/ ,/ 考虑/ 到/ 执行/ 路径/ 的/ 全面性/ 是/ 决定/ 系统可靠性/ 的/ 关键/ ,/ 但/ 这/ 也/ 大大增加/ 了/ 计算/ 和/ 求解/ 的/ 成本/ ./ (/ 3/ )/ 可/ 加/ 模型/ ./ 不/ 明确/ 考虑/ 应用/ 的/ 体系结构/ ,/ 其/ 基于/ 构件/ 失效/ 数据/ ,/ 侧重于/ 估计/ 系统/ 时间/ 可变/ 的/ 失效/ 密度/ (/ 即/ 整个/ 应用/ 的/ 失效/ 强度/ )/ 和/ 系统可靠性/ [/ 40/ ]/ ./ 可加/ 模型/ 中/ 构件/ 可靠性/ 被/ 建模/ 为/ NHPP/ ,/ 考虑/ 到/ 其/ 可靠性/ 的/ 增长/ ,/ 并且/ 系统/ 失效/ 强度/ 是/ 单一/ 构件/ 失效/ 强度/ 的/ 累加/ ./ 典型/ 地/ ,/ 很多/ 研究/ 都/ 可以/ 归结为/ 图/ 4/ 中/ 的/ 某个/ 组合/ ./ 例如/ ,/ 文献/ [/ 25/ ]/ 采用/ DTMC/ 来/ 表示/ 基于/ 体系结构/ 的/ 可靠性/ 模型/ ,/ 其中/ 基于/ 状态/ 的/ 模型/ 中/ “/ 二阶/ 体表/ 3/ 基于/ 体系结构/ 的/ 构件/ 软件/ 求解/ 模型/ 分类/ 比较/ 体系结构/ 类型/ ①/ 再/ 分类/ 失效/ 行为/ ②/ SBM/ 注/ :/ ①/ 类型/ 包括/ ,/ SBM/ :/ 基于/ 状态/ 的/ 模型/ ;/ PBM/ :/ 基于/ 路径/ 的/ 模型/ ;/ AM/ :/ 可/ 加/ 模型/ ;/ A/ (/ Absorbing/ )/ :/ 吸收/ 的/ ;/ I/ (/ Irreducible/ )/ :/ 不可/ 约/ 的/ ./ ②/ 失效/ 行为/ 建模/ 包括/ ,/ R/ :/ 可靠/ 度/ ;/ CFR/ :/ 常量/ 失效率/ ;/ VFR/ :/ 随/ 时间/ 变化/ 的/ 失效率/ ./ ③/ 转移/ 概率/ 包括/ ,/ Y/ :/ 需要/ ;/ N/ :/ 不/ 需要/ ./ ④/ 求解/ 方法/ 包括/ ,/ HM/ :/ 层次/ 式/ 求解/ 方法/ ;/ CM/ :/ 组合式/ 求解/ 方法/ ./ ⑤/ 应用/ 阶段/ 包括/ ,/ D/ :/ 设计阶段/ ;/ I/ :/ 实现/ 阶段/ ;/ T/ :/ 测试阶段/ ;/ R/ :/ 运行/ 阶段/ ./ 系/ 结构/ 效用/ 的/ 层次/ 建模/ 方法/ ”/ 被/ 深入研究/ ./ 这样/ 可/ 明确/ 考虑/ 循环/ 与/ 分支/ 等/ 结构特征/ 对/ 整体/ 可靠性/ 的/ 影响/ ./ Cheung/ [/ 53/ ]/ 提出/ 了/ 一个/ 面向用户/ 的/ 软件可靠性/ 模型/ ,/ 其中/ 体系结构/ 采用/ 吸收/ DTMC/ ,/ 构件/ 失效/ 模型/ 建模/ 为/ 可靠性/ ,/ 求解/ 方法/ 为/ 组合式/ ./ Huang/ [/ 34/ ]/ 在/ 其/ 研究/ 中/ ,/ 将/ 整个/ 构件/ 软件/ 的/ 体系结构/ ,/ 以及/ 每个/ 构件/ 的/ 失效/ 行为/ 均/ 建模/ 为/ 马尔可夫/ 过程/ ,/ 且/ 构件/ 间/ 执行/ 控制权/ 的/ 转移/ 满足/ 马尔可夫/ 过程/ ./ 4.2/ 基于/ 体系结构/ 的/ 构件/ 软件/ 求解/ 模型/ 分类/ 比较/ 容易/ 看出/ ,/ 当/ 将/ 体系结构/ 的/ 模型/ 与/ 构件/ 的/ 失效/ 模型/ (/ 也/ 可以/ 再/ 加上/ 接口/ 的/ 失效/ 行为/ 模型/ )/ 进行/ 组合/ 时/ ,/ 可以/ 得到/ 多种/ 具体/ 的/ 构件/ 软件可靠性/ 分析模型/ ,/ 表/ 3/ 对此/ 进行/ 了/ 分类/ 比较/ ./ 求解/ 方法/ ④/ CMHMHMCMHMCM/ 可/ 计算/ 应用/ 失效/ 时/ 经历/ 的/ 时间/ 步数/ DHMHMHMHMHM/ -/ 累加/ λ/ s/ (/ t/ )/ =/ ∑/ NPage104/ ./ 3/ 小结/ 总体/ 来看/ ,/ 现有/ 构件/ 软件可靠性/ 建模/ 与/ 求解/ 主要/ 还是/ 解析/ 方法/ ,/ 其/ 优点/ 是/ 能够/ 定量/ 地/ 对/ 可靠性/ 进行/ 分析/ ,/ 这/ 从表/ 3/ 也/ 可/ 看出/ ;/ 同时/ 其/ 明确/ 考虑/ 到/ 了/ 程序/ 的/ 吸收性/ 与/ 不可/ 约性/ ,/ 这/ 与/ 随机/ 过程/ 中/ 的/ 理论/ 相对/ 应/ ,/ 便于/ 理解/ ./ 其/ 最大/ 缺陷/ 是/ 不/ 具备/ 可伸缩性/ ,/ 构件/ 个数/ 的/ 增加/ 会/ 将/ 其/ 计算/ 量大且/ 复杂/ 的/ 缺点/ 明显/ 地/ 暴露/ 出来/ ./ 因此/ ,/ 降低/ 求解/ 复杂度/ 是/ 未来/ 的/ 主要/ 研究/ 方向/ ,/ 可以/ 预见/ 基于/ 非/ 参量/ 的/ 求解/ 方法/ 可/ 作为/ 替代/ 的/ 尝试/ ./ 此外/ ,/ 由于/ 构件/ 软件系统/ 中/ 的/ 构件/ 经常/ 是/ 异构/ 环境/ 下/ 开发/ 与/ 测试/ 的/ ,/ 不同/ 构件/ 的/ 失效/ 行为/ 很/ 可能/ 并不相同/ ,/ 这样/ 就/ 使得/ 整个/ 应用/ 的/ 所有/ 构件/ 失效/ 行为/ 建模/ 同时/ 存在/ 上面/ 三种/ 情况/ ,/ 这会/ 为/ 实际/ 应用/ 带来/ 很大/ 挑战/ ./ 5/ 构件/ 软件可靠性/ 增长/ 模型/ 5.1/ 构件/ 软件可靠性/ 增长/ 模型/ 面临/ 的/ 难题/ SRGM/ 是/ 在/ 软件开发/ 的/ 测试阶段/ 与/ 操作/ 运行/ 阶段/ ,/ 基于/ 失效/ 数据/ ,/ 描述/ 软件测试/ 过程/ 中/ 累积/ 检测/ 或/ 修复/ 的/ 故障/ 数量/ ,/ TE/ 与/ 测试/ 时间/ 等/ 的/ 数学/ 关系/ ,/ 是/ 实现/ 建模/ 软件可靠性/ 提高/ 过程/ 的/ 数学/ 工具/ ./ 显然/ ,/ 由于/ 故障/ 不断/ 地被/ 检测/ 出来/ 并/ 被/ 排除/ 掉/ ,/ 软件可靠性/ 就/ 会/ 得到/ 提高/ ./ SRGM/ 的/ 本质/ 是/ 基于/ 对/ 测试/ 过程/ 中/ 获得/ 的/ 相关/ 数据/ (/ 失效/ 时间/ 或/ 间隔/ 、/ 失效/ 个数/ 、/ TE/ 等/ )/ 通过/ 数学/ 建模/ 与/ 统计分析/ 等/ 手段/ ,/ 充分/ 挖掘出/ 测试/ 过程/ 中/ 各/ 因素/ 间/ 的/ 数学/ 定量/ 关系/ (/ 例如/ ,/ 累积/ 检测/ 的/ 失效/ 个数/ m/ (/ t/ )/ 与/ 测试/ 时间/ t/ 的/ 关系/ )/ ,/ 用以/ 度量/ 和/ 评测/ 历史/ 测试/ 情况/ 以及/ 预测/ 后续/ 测试/ 情况/ ./ 爱默生/ 网络/ 能源/ 公司/ [/ 66/ ]/ 是/ SRGM/ 的/ 积极/ 推动者/ ,/ 在/ 系统可靠性/ 需求/ 分配/ 上/ ,/ 侧重于/ 对/ 失效率/ 的/ 估计/ ./ 整体而言/ ,/ 由于/ 早期/ 对/ SRGM/ 认识/ 的/ 局限性/ ,/ 报告/ 中/ 介绍/ 的/ 模型/ 做/ 了/ 过/ 多/ 与/ 实际/ 偏差/ 较大/ 的/ 假设/ ./ 这/ 之后/ 的/ 研究/ 从/ 本质/ 上/ 来说/ ,/ 都/ 是/ 在/ 考虑/ 更/ 多/ 的/ 实际/ 测试/ 与/ 运行/ 因素/ 的/ 情况/ 下来/ 建立/ 更为/ 准确/ 的/ 模型/ ./ 构件/ 软件/ 的/ SRGM/ 试图/ 将/ 传统/ 针对/ 单一/ 软件/ 黑盒/ 形式/ 的/ 研究/ 引申/ 与/ 扩展/ 到/ 构件/ 软件/ 领域/ ,/ 解决/ 现有/ 研究/ 中/ 出现/ 的/ “/ 定常/ 现象/ ”/ 问题/ ,/ 对/ 构件/ 软件/ 的/ 测试/ 过程/ 进行/ 深入/ 挖掘/ ./ 类似/ 于/ 黑盒/ 形式/ 单一/ 软件/ SRGM/ 研究/ ,/ 一种/ 简单/ 的/ 做法/ 是/ 直接/ 将/ 各个/ 构件/ 的/ SRGM/ 进行/ 简单/ 累加/ [/ 20/ ,/ 43/ -/ 44/ ,/ 58/ ]/ ,/ 或者/ 考虑/ 到/ 各个/ 构件/ 的/ 权重/ ,/ 例如/ M/ (/ t/ )/ =/ ∑/ N/ 路/ 的/ 做法/ 过于/ 粗糙/ 和/ 简单/ ,/ 掩盖/ 了/ 构件/ 软件/ 的/ 体系结构/ 与/ 构件/ 间/ 的/ 交互/ 关系/ 的/ 本质/ ./ 5.2/ 基于/ 移动/ 平均值/ 法/ 的/ 可靠性/ 增长/ 模型/ 移动/ 平均值/ 法/ MA/ (/ MovingAverage/ )/ [/ 32/ ]/ 克服/ 了/ 可加/ 模型/ 的/ 固有/ 缺陷/ ,/ 将/ 黑盒/ 与/ 白盒/ 分析方法/ 进行/ 联合/ ,/ 不仅/ 充分考虑/ 到/ 了/ 体系结构/ ,/ 还/ 将/ 时间/ 域/ 的/ 概念/ 进行/ 建模/ 考虑/ ,/ 使得/ 所/ 建立/ 的/ 模型/ 能够/ 预测/ 可靠性/ 增长/ 的/ 趋势/ ./ 另外/ ,/ 故障/ 对/ 可靠性/ 的/ 影响/ 取决于/ 系统/ 是/ 如何/ 被/ 使用/ 的/ [/ 19/ ]/ ,/ 也就是说/ 应该/ 将/ 操作/ 剖面/ OP/ 结合/ 起来/ 进行/ 分析/ ,/ MA/ 法/ 的/ 求解/ 过程/ 中/ 已/ 涵盖/ 了/ 操作/ 剖面/ OP/ ./ MA/ 借助/ 连续/ 卷积/ 方法/ 和/ 基于/ 路径/ 的/ 分析方法/ 实现/ 了/ 动态/ 的/ 描述/ 构件/ 软件可靠性/ 增长/ 变化/ 过程/ ,/ 其/ 包括/ 5/ 个/ 步骤/ :/ (/ 1/ )/ 基于/ NHPP/ 来/ 建模/ 单个/ 构件/ 失效/ 过程/ ,/ 获得/ 其/ 非关键/ 可靠性/ 函数/ NCRF/ (/ Non/ -/ CriticalRelia/ -/ bilityFunction/ )/ ;/ (/ 2/ )/ 对/ 路径/ ε/ 上/ 的/ 构件/ 的/ NCRF/ 进行/ 卷积/ 运算/ ,/ 进而/ 得到/ 加权/ 后/ 的/ MA/ 可靠性/ 函数/ ;/ (/ 3/ )/ 对/ 第/ (/ 2/ )/ 步中/ 得到/ 的/ 加权/ MA/ 可靠性/ 函数/ 进行/ 标准化/ 处理/ 得到/ 非/ 加权/ MA/ 可靠性/ 函数/ ;/ (/ 4/ )/ 基于/ Markov/ 特性/ 并/ 考虑/ 最后/ 一次/ 失效/ 发生/ 时间/ 条件/ ,/ 对/ 第/ (/ 3/ )/ 步/ 得到/ 的/ 标准化/ 的/ MA/ 可靠性/ 函数/ 计算/ 路径/ ε/ 的/ 条件/ 可靠性/ ;/ (/ 5/ )/ 基于/ 白盒/ 方法/ ,/ 整个/ 构件/ 软件应用/ 的/ 可靠性/ 可/ 表示/ 为/ 所有/ 路径/ 的/ 条件/ 可靠性/ 值/ 与其/ 遍历/ 概率/ 乘积/ 的/ 和/ ./ 整个/ 过程/ 可/ 被/ 称之为/ MAPATHNHPP/ ,/ 所/ 获得/ 可靠性/ 表达式/ 是/ 时间/ 的/ 函数/ ,/ 显然/ 其/ 能够/ 描述/ 测试/ 过程/ 中/ 整个/ 构件/ 软件应用/ 可靠性/ 的/ 增长/ 趋势/ ,/ 当然/ 也/ 能够/ 预测/ 未来/ 的/ 变化趋势/ ./ 5.3/ 讨论/ 可/ 加/ 模型/ 仅仅/ 是/ 把/ 构件/ 软件/ 看作/ 传统/ 单一/ 黑盒/ 形式/ 软件/ 的/ 组合/ ,/ 忽略/ 了/ 构件/ 软件/ 自身/ 的/ 内部结构/ 特征/ ./ 虽然/ ,/ 可/ 加/ 模型/ 试图/ 基于/ 失效/ 强度/ 可变/ 的/ NHPP/ 模型/ 累加/ 出/ 系统/ 应用/ 的/ 失效/ 强度/ λ/ s/ (/ t/ )/ ,/ 但/ 这/ 能否/ 准确/ 地/ 建模/ 描述/ 系统/ 的/ 失效/ 特征/ 还/ 需要/ 更/ 多/ 的/ 实例/ 去/ 验证/ ./ MAPATHNHPP/ 的/ 主要/ 贡献/ 在于/ ,/ 其/ 解决/ 了/ 考虑/ 构件/ 软件/ 内部/ 的/ 系统结构/ 以及/ 不同/ 构件/ 间/ 的/ 特征/ (/ 允许/ 不同/ 构件/ 有/ 不同/ 的/ 单元测试/ 时间/ 和/ 失效率/ )/ 时/ 的/ 可靠性/ 增长/ 建模/ ,/ 当然/ 这/ 在/ 黑盒/ 分析方法/ 中/ 无法/ 做到/ ./ MAPATHNHPP/ 方法/ 的/ 不足/ 在于/ :/ (/ 1/ )/ SRGM/ 准确/ 建立/ 的/ 充分条件/ 是/ 需要/ 有/ 充足/ 的/ 测试/ 中/ 的/ 失效/ 数据/ 信息/ ,/ 而/ MAPATHNHPP/ 仅/ 基于/ Page11/ 构件/ 测试/ 中/ 的/ 失效/ 信息/ ,/ 这种/ 失效/ 信息/ 由于/ 构件/ 的/ 第三/ 提供/ 方/ 特性/ 很/ 可能/ 并/ 不/ 容易/ 获得/ ;/ 另外/ ,/ 也/ 忽略/ 了/ 集成/ 测试/ 这一/ 重要/ 测试/ 环节/ 的/ 失效/ 信息/ ./ 这/ 两/ 方面/ 的/ 不足/ 使得/ MAPATHNHPP/ 所/ 建立/ 的/ 可靠性/ 增长/ 模型/ 相对/ 比较/ 粗糙/ ;/ (/ 2/ )/ 其/ 必须/ 基于/ 执行/ 路径/ ,/ 实际/ 的/ 构件/ 软件/ 是/ 非常复杂/ 的/ ,/ 且/ 在/ 执行/ 中/ 具有/ 极强/ 的/ 动态性/ 与/ 随机性/ ,/ 为/ 其/ 求解/ 带来/ 了/ 很大/ 的/ 挑战/ ./ 综上/ ,/ 构件/ 软件可靠性/ 过程/ 研究/ 中/ ,/ 建立/ 描述/ 测试/ // 运行/ 过程/ 的/ NHPP/ 模型/ ,/ 准确/ 评估/ 系统/ 当前/ 的/ 可靠性/ R/ (/ t/ )/ 、/ 预测/ 系统可靠性/ 随/ 时间/ 的/ 演化/ 规律/ ,/ 是/ 构件/ 软件可靠性/ 过程/ 领域/ 亟需/ 解决/ 的/ 问题/ ./ 6/ 可靠性/ 评估/ 方法/ :/ 度量/ 与/ 预测/ 6.1/ 构件/ 软件可靠性/ 评估/ 方法/ 构件/ 软件可靠性/ 评估/ 是/ 一个/ 复杂/ 的/ 任务/ 过程/ ,/ 其/ 对/ 软件设计/ 提出/ 了/ 一整套/ 要求/ ./ 可靠性/ 评估/ 在/ 软件可靠性/ 过程/ 的/ 研究/ 体系/ 中/ 占有/ 重要/ 地位/ ./ 可靠性/ 建模/ 是/ 评估/ 的/ 重要/ 基础/ ;/ 可靠性/ 增长/ 模型/ 中/ 需要/ 借助/ 评估/ 来/ 求解/ 某/ 时间段/ 内/ 可靠性/ 值/ ,/ 基于/ 此/ ,/ 来外/ 推/ 预测/ 未来/ 可靠性/ 的/ 变动/ 情况/ ,/ 这样/ 也/ 为/ 测试/ 资源分配/ 与/ 最优/ 发布/ 提供/ 定量/ 调整/ 的/ 依据/ ;/ 在/ 可靠性/ 过程/ 仿真/ 中/ 所/ 出现/ 的/ 率/ 函数/ 也/ 与/ 评估/ 紧密联系/ ;/ 即便/ 在/ PCM/ 相关/ 的/ 可靠性/ 分析/ 中/ ,/ 也/ 需要/ 在/ 将/ 设计/ 模型/ 转变/ 为/ 解析/ 模型/ 后/ 借助/ 评估/ 来/ 分析/ 可靠性/ 变动/ 情况/ ./ 在/ 过去/ 二十几年/ 里/ ,/ 软件可靠性/ 分析方法/ 主要/ 被/ 分为/ 黑盒/ 与/ 白盒/ 方法/ [/ 60/ ]/ ./ 黑盒/ 方法/ 基于/ 所/ 收集/ 到/ 的/ 失效/ 数据/ 信息/ ,/ 在/ 有限/ 的/ 时间/ 间隔/ 内/ 或/ 相邻/ 失效/ 之间/ ,/ 构造/ 解析/ 与/ 参量/ 的/ 模型/ ,/ 求得/ 累积/ 的/ 失效/ 个数/ ./ 黑盒/ 方法/ 具有/ 较/ 好/ 的/ 拟合/ 失效/ 行为/ 性能/ ,/ 适用/ 于/ 调试/ 阶段/ ./ 鉴于/ 黑盒/ 方法/ 通常/ 将/ 软件/ 视为/ 一个/ 完全/ 统一/ 的/ 整体/ ,/ 缺少/ 对/ 构件/ 软件/ 内部结构/ 的/ 考虑/ ,/ 因而/ 其/ 并/ 不适/ 用于/ 由/ 多个/ 构件/ 组装/ 而成/ 的/ 构件/ 软件可靠性/ 评估/ 分析/ [/ 16/ ]/ ./ 这样/ ,/ 白盒/ 方法/ 被/ 寄希望于/ 进行/ 基于/ 软件结构/ 的/ 可靠性/ 分析/ ./ 白盒/ 方法/ 使用/ 的/ 前提/ 是/ ,/ 需要/ 事先/ 对/ 构件/ 间/ 的/ 转移/ 概率/ 和/ 构件/ 的/ 可靠性/ 进行/ 估计/ ./ 在/ 评估/ 方法/ 建模/ 研究/ 上/ ,/ 除了/ 前面/ 提到/ 的/ 基于/ 状态/ 的/ 模型/ 外/ ,/ 基于/ 路径/ 的/ 模型/ 与/ 可加/ 模型/ 也/ 经常/ 被/ 采用/ ./ 在/ 具体/ 的/ 求解/ 方法/ 上/ 可以/ 通过/ 解析/ 、/ 仿真/ 和/ 监控/ 等/ 方法/ 来/ 实现/ ,/ 仿真/ 方法/ 在/ 后面/ 的/ 第/ 8/ 节中/ 有/ 明确/ 的/ 介绍/ ./ 此外/ ,/ 在/ 工程/ 实践/ 方面/ ,/ 微软公司/ [/ 67/ ]/ 开发/ 了/ 两个/ 用于/ 度量/ 商业化/ 软件/ 制品/ 可靠性/ 的/ 系统/ ./ 一个/ 是/ Office/ 用户/ 体验/ 改善/ 计划/ CEIP/ ;/ 另/ 一个/ 是/ 对于/ 度量/ β/ 版/ 的/ WindowsServer2003/ 有着/ 重要/ 改进/ 作用/ 的/ 微软/ 可靠性/ 分析/ 服务/ MRAS/ ./ CEIP/ 基于/ 失效率/ 统计/ 和/ 计算/ 平均/ 失效/ 时间/ 的/ 方法/ 来/ 获得/ 可靠性/ ,/ MRAS/ 关注/ 多种类型/ 失效/ ,/ 尤其/ 是/ 计划/ 内/ // 外/ 事件/ 对/ 可靠性/ 和/ 可用性/ 的/ 影响/ ./ 爱默生/ 网络/ 能源/ 公司/ [/ 66/ ]/ 于/ 2006/ 年/ 在/ 其/ 发布/ 的/ 关于/ 软件可靠性/ 分析/ 的/ 白皮书/ 中/ 指出/ ,/ 可靠性/ 是/ 系统/ 与其/ 组成/ 构件/ 的/ 属性/ ,/ 设计者/ 应/ 通过/ 改善/ 体系结构/ 等/ 方法/ 来/ 管理/ 和/ 满足/ 可靠性/ 需求/ 分配/ ./ 为此/ ,/ 白皮书/ 给出/ 了/ 构件/ 软件/ 四种/ 运行/ 情况/ 下/ 的/ 失效率/ 计算/ 形式/ :/ 系列/ 构件/ 模型/ (/ 实际上/ 为/ 可加/ 模型/ )/ 、/ 先后/ 连续/ 运行/ 的/ 构件/ 模型/ 、/ “/ k/ -/ out/ -/ of/ -/ n/ ”/ 构件/ 模型/ (/ 即当/ 其中/ k/ 或/ k/ 个/ 以上/ 的/ 构件/ 失效/ 时/ 系统/ 就/ 失效/ )/ 、/ 马尔可夫/ 状态/ 模型/ ./ 白皮书/ 重在/ 对系统/ 失效率/ 的/ 确定/ 和/ 估计/ ,/ 这样/ 就/ 可/ 求得/ 表征/ 可靠性/ 的/ 重要/ 指标/ :/ 即/ 平均/ 无故障/ 时间/ MTBF/ (/ MeanTimeBetweenFailure/ )/ ./ (/ 美国/ )/ 布鲁克/ 海文/ 国家/ 实验室/ [/ 68/ ]/ 针对/ 建模/ 可靠/ 的/ 核电站/ 这一/ 特定/ 数字/ 系统/ ,/ 总结/ 了/ 现有/ 定量化/ 软件可靠性/ 方法/ ,/ 以/ 期望/ 使得/ 软件可靠性/ 模型/ 可以/ 被/ 集成/ 到/ 核电站/ 系统/ 的/ 概率/ 风险/ 判定/ 中/ ./ 在/ 定量化/ 软件可靠性/ 方法/ 的/ 预期/ 特征/ 中/ ,/ 依靠/ SRGM/ 确定/ 预期/ 测试/ 时间/ 和/ 失效率/ 得到/ 了/ 重视/ ./ 可以/ 看出/ ,/ 由于/ 实际/ 系统对/ 失效/ 风险/ 的/ 敏感/ ,/ 这些/ 实践/ 较为/ 侧重于/ 借助/ 满足/ 一定/ 要求/ 的/ 可靠性/ 模型/ 来/ 确定/ 失效率/ ,/ 并/ 借此/ 来/ 管理/ 失效/ 风险/ ./ 下面/ ,/ 我们/ 从/ 理论/ 上来/ 介绍/ 和/ 分析/ 现有/ 的/ 可靠性/ 评估/ 方法/ ./ (/ 1/ )/ 基于/ 状态/ 解析/ 的/ 评估/ 方法/ 该/ 方法/ 通常/ 借助/ (/ 半/ )/ 马尔可夫/ 过程/ 、/ 连续/ // 离散/ 时间/ 马尔可夫/ 链来/ 表述/ 软件结构/ 为/ 有限/ 个数/ 的/ 状态/ [/ 14/ ]/ ./ 构件/ 软件可靠性/ 可/ 通过/ 构件/ 间/ 的/ 状态/ 转移/ 矩阵/ 被/ 计算出来/ ./ 该/ 方法/ 在/ 第/ 4/ 节中/ 已/ 详细/ 介绍/ ,/ 在/ 此/ 从略/ ./ (/ 2/ )/ 基于/ 路径/ 监控/ 的/ 评估/ 方法/ 该/ 方法/ 认为/ 软件/ 的/ 失效率/ 与/ 路径/ 执行/ 频率/ 紧密/ 相关/ ,/ 因此/ 将/ 软件结构/ 与/ 构件/ 的/ 失效/ 行为/ 进行/ 联合/ ,/ 基于/ 执行/ 路径/ 的/ 可靠性/ ,/ 进而/ 最终/ 估计/ 出/ 整个/ 构件/ 软件系统/ 的/ 可靠性/ ./ 例如/ ,/ 可靠性/ 与/ 可用性/ 预测/ 方法/ 使用/ 基于/ 路径/ 的/ 模型/ 用于/ 系统/ 级别/ 的/ 可靠性/ 预测/ [/ 69/ -/ 70/ ]/ ./ (/ 3/ )/ 可/ 加/ 模型/ 评估/ 方法/ 不/ 明确/ 地/ 考虑/ 体系结构/ ,/ 而是/ 集中/ 于/ 通过/ 使用/ 构件/ 的/ 失效/ 数据/ 来/ 估计/ 时间/ 依赖/ 的/ 整个/ 应用/ 失效/ 强度/ ./ 例如/ ,/ Everett/ [/ 40/ ]/ 使用/ 可/ 加/ 模型/ 进行/ 可靠性/ 评估/ ./ 图/ 5/ 给出/ 了/ 包含/ 构件/ 软件/ 在内/ 的/ 软件可靠性/ 评估/ 方法/ ,/ 其中/ 的/ 第/ 1/ 个/ 虚/ 线框/ 部分/ 用以/ 实现/ 对/ 传统/ 非/ 构件/ 软件/ 进行/ 可靠性/ 分析/ ;/ 第/ 3/ 个/ 虚/ 线框/ 部分/ 中白盒/ 方法/ 是/ 常用/ 的/ 构件/ 软件可靠性/ 分析方法/ ;/ 特别/ Page12/ 指出/ ,/ 第/ 2/ 个/ 虚/ 线框/ 中/ 的/ 可加/ 模型/ 是/ 黑盒/ 与/ 白盒/ 方法/ 的/ 综合/ ,/ 我们/ 认为/ 其/ 只是/ 逻辑/ 上将/ 构件/ 软件/ 当作/ 一个/ 整体/ ,/ 且/ 解决/ 了/ 白盒/ 方法/ 研究/ 中/ 出现/ 的/ “/ 定常/ ”/ 图/ 5/ 软件可靠性/ 评估/ 与/ 分析方法/ 6.2/ 构件/ 软件可靠性/ 评估/ 方法/ 分析/ 随着/ 构件/ 软件/ 复杂度/ 的/ 剧烈/ 增长/ ,/ 在/ 给定/ 的/ 测试/ 资源/ 与/ 调度/ 的/ 限制/ 下/ ,/ 为了/ 有效/ 测试/ 所有/ 的/ 构件/ 以及/ 相互/ 交互/ ,/ 传统/ 可靠性/ 分析方法/ 表现/ 出/ 明显/ 的/ 不足/ :/ (/ 1/ )/ 需要/ 大量/ 的/ 测试/ 案例/ :/ 巨大/ 的/ 输入/ 空间/ 与/ 测试/ 案例/ 等/ 测试/ 开销/ 使得/ 其/ 与/ 实际/ 情况/ 差距/ 较为/ 显著/ ;/ (/ 2/ )/ 对/ 每个/ 构件/ 以及/ 对/ 构件/ 间/ 的/ 交互作用/ 测试/ 不/ 充分/ ./ 近年来/ ,/ 一个/ 成本/ 有效/ 的/ 方法/ 被/ 提出/ [/ 8/ ]/ ,/ 其/ 通过/ 执行/ 路径/ 测试/ 的/ 方法/ 取代/ 过去/ 测试/ 整个/ 软件/ 的/ 方式/ ,/ 克服/ 了/ 巨大/ 的/ 测试/ 开销/ ./ 图/ 6/ 集成式/ 可靠性/ 评估/ 方法/ 过程/ 模型/ 图/ 6/ 中/ 构件/ 的/ 可靠性/ 值有/ 3/ 种/ 生成/ 方法/ :/ ①/ 启发式/ 可靠性/ 估计/ 产生/ 一个/ 尚未/ 被/ 集成/ 到/ 系统/ 中/ 的/ 构件/ 的/ 被/ 估计/ 的/ 可靠性/ 值/ PoF/ _/ E/ (/ 一个/ pi/ 值/ )/ ./ 启发式/ 可靠性/ 估计/ 是/ 基于/ 软件/ 开发者/ // 架构/ 者/ 的/ 经验/ 或者/ 来自/ 构件/ 提供者/ 的/ 构件/ 可靠性/ 参考值/ ;/ ②/ 基于/ 模型/ 的/ 可靠性/ 预测/ 产生/ 一个/ 尚未/ 被/ 集成/ 到/ 系统/ 中/ 的/ 构件/ 的/ 独立/ 不/ 相关/ 的/ PoF/ _/ C/ 值/ (/ 一个/ pi/ 值/ )/ ./ ③/ 对于/ 被/ 使用/ 在/ 体系结构/ 模型/ 中/ 的/ 构件/ ,/ 基于/ 模型/ 的/ 可靠性/ 度量/ 使用/ 一个/ 监控/ 的/ 方法/ 度量/ 产生/ 在/ 某/ 指定/ 执行/ 路径/ 现象/ ,/ 因而/ 其/ 被/ 称之为/ 灰盒/ 方法/ ./ 体/ 的/ 求解/ 方法/ ./ 图/ 5/ 中/ 第/ 2/ 与/ 第/ 3/ 个/ 虚/ 线框/ 的/ 最/ 下面/ 一行/ 是/ 具/ 6.2/ ./ 1/ 基于/ 路径/ 监控/ 的/ 集成式/ 可靠性/ 评估/ 方法/ 显然/ ,/ 整个/ 系统/ 的/ 可靠性/ 与/ 单一/ 构件/ 的/ 可靠性/ ,/ 以及/ 执行/ 中/ 控制权/ 在/ 构件/ 间/ 的/ 转移/ 紧密/ 相关/ ./ Palviainen/ 认为/ ,/ 应用/ 的/ 可靠性/ 取决于/ 体系结构/ 与/ 构件/ ,/ 应/ 首先/ 对/ 每个/ 构件/ 进行/ 可靠性/ 评估/ ,/ 再/ 对系统/ 的/ 可靠性/ 进行/ 预测/ ./ 这样/ ,/ 其/ 提出/ 了/ 一个/ 集成式/ 的/ 可靠性/ 评估/ 方法/ ,/ 该/ 方法/ 集成/ 了/ 构件/ 级别/ 的/ 可靠性/ 评估/ 活动/ 与/ 系统/ 级别/ 的/ 可靠性/ 预测/ 活动/ 来/ 支持/ 增量/ 式/ 与/ 迭代/ 式/ 的/ 可靠/ 的/ 构件/ 软件系统/ 开发/ 过程/ ./ 图/ 6/ 给出/ 了/ 其/ 整体/ 评估/ 图示/ ,/ 其中/ PoF/ 表示/ 失效/ 概率/ ,/ 是/ 对/ 可靠性/ 的/ 一种/ 表示/ 方法/ ./ 中/ 构件/ 的/ 可靠性/ 值/ (/ 也/ 就是/ PoF/ _/ M/ 值/ )/ ./ 需要/ 指出/ ,/ 上面/ 的/ 过程/ 可以/ 同时/ 采用/ 仿真/ 与/ 敏感性/ 分析/ 的/ 方法/ 对/ 分析/ 过程/ 的/ 准确性/ 与/ 关联性/ 进行/ 验证/ ./ 敏感性/ 分析/ 可用/ 以/ 识别/ 关键/ 构件/ 与/ 路径/ ,/ 以便/ 进行/ 更好/ 的/ 资源/ 管控/ ./ 与/ 文献/ [/ 19/ ]/ 相似/ ,/ 文献/ [/ 42/ ]/ 也/ 是/ 基于/ 每个/ 构件/ 的/ 可靠性/ 与/ 系统结构/ ,/ 以/ 计算/ 路径/ 可靠性/ 方式/ 来/ 进行/ 整个/ 构件/ 软件可靠性/ 的/ 评估/ ,/ 在/ 此/ 从略/ ./ 在/ 故障/ 构成/ 上/ ,/ 文献/ [/ 2/ ]/ 中/ 认为/ 软件/ 中/ 存在/ 着/ 两类/ 故障/ :/ 相互/ Page13/ 独立/ 的/ 与/ 相互依赖/ 的/ 故障/ ./ 相互/ 独立/ 的/ 故障/ 存在/ 于/ 不同/ 的/ 执行/ 路径/ 上/ ,/ 并且/ 相互依赖/ 的/ 故障/ 存在/ 于同/ 一条/ 执行/ 路径/ 上/ ,/ 当且/ 仅/ 当/ 相互/ 独立/ 的/ 故障/ 被/ 检测/ 后/ ,/ 相互依赖/ 的/ 故障/ 才/ 能够/ 被/ 检测/ ./ 测试/ 路径/ 通常/ 由/ 程序设计/ 中/ 的/ 顺序/ 、/ 分支/ 和/ 循环/ 三种/ 结构/ 嵌套/ 组成/ ./ 由于/ 程序运行/ 中/ 的/ 不可/ 完全/ 掌控/ 性/ ,/ 这/ 三种/ 结构/ 可以/ 组合/ 出/ 多种/ 多条/ 执行/ 路径/ ,/ 如何/ 选择/ 满足要求/ 的/ 指定/ 路径/ 是/ Palviainen/ 等/ 人/ 所/ 提出/ 基于/ 路径/ 监控/ 方法/ 的/ 关键/ ,/ 因为/ 构件/ 与/ 系统可靠性/ 皆/ 取决于/ 执行/ 路径/ ./ 最后/ 需要/ 指出/ ,/ 动态/ 路径分析/ 方法/ 需要/ 依赖于/ 多种/ 输入/ 元素/ ,/ 尤其/ 是/ 构件/ 各种/ 形式/ 的/ 可靠性/ 值/ 可能/ 并/ 不/ 容易/ 获得/ ,/ 另外/ 该/ 方法/ 主要/ 适用/ 于/ 构件/ 软件/ 早期/ 开发阶段/ ./ 这样/ ,/ 如何/ 降低/ 依赖/ 的/ 变元/ 数目/ ,/ 以及/ 扩展/ 应用/ 的/ 生命周期/ 是/ 未来/ 的/ 重要/ 研究/ 方向/ ./ 6.2/ ./ 2/ 可加/ 模型/ 及其/ 改进/ 分析/ 可/ 加/ 模型/ 的/ 提出/ 旨在/ 调和/ 黑盒/ 与/ 白盒/ 分析/ 之间/ 的/ 差异/ 和/ 不足/ ,/ 用以/ 建立/ 既/ 兼顾/ 到/ 构件/ 软件/ 自身/ 的/ 结构特征/ 同时/ 又/ 确保/ 最终/ 的/ 求解/ 结果/ 包含/ 测试/ 时间/ t/ 这一/ 动态/ 属性/ ,/ 使得/ 所/ 建立/ 的/ 模型/ 具有/ 可/ 增长/ 特性/ ./ 其/ 认为/ 多个/ 被/ 建模/ 为/ NHPP/ 的/ 构件/ 的/ 累加/ 是/ 一个/ NHPP/ 类/ 的/ 构件/ 软件/ ,/ 这样/ ,/ 可以/ 得到/ 显然/ ,/ 该/ 可加/ 模型/ 只是/ 简单/ 地/ 叠加/ 各个/ 构件/ 的/ 失效率/ ,/ 不足以/ 真实/ 地/ 描述/ 构件/ 软件/ 在/ 测试/ 或/ 运行/ 阶段/ 的/ 实际/ 情况/ ./ 为此/ ,/ 文献/ [/ 40/ ]/ 提出/ 了/ 改进/ 的/ 可加/ 模型/ 如下/ 式/ 所示/ :/ 这里/ 将/ 每个/ 构件/ 执行/ 时间/ 由/ 统一/ 的/ t/ 换成/ 了/ ti/ ,/ 反应/ 出/ 构件/ 间/ 差异化/ 的/ 使用/ 情况/ 被/ 考虑/ 进来/ ,/ 但/ 遗憾/ 的/ 是/ ti/ 的/ 求解/ 单纯/ 依赖/ 解析/ 的/ 方法/ 较为/ 困难/ ,/ 我们/ 认为/ 此时/ 依赖/ 仿真技术/ 或许/ 可/ 有效/ 解决/ ./ 此外/ ,/ Yacoub/ 等/ 人/ [/ 41/ ]/ 通过/ 构件/ 间/ 依赖图/ 来/ 建模/ 构件/ 的/ 失效/ 行为/ ,/ 并/ 提出/ 了/ 基于/ 场景/ 的/ 构件/ 软件可靠性/ 模型/ 和/ 算法/ ,/ 能够/ 识别/ 出/ 关键/ 构件/ 并/ 分析/ 单个/ 构件/ 对系统/ 整体/ 可靠性/ 的/ 影响/ ./ 6.3/ 考虑/ 多/ 失效/ 模式/ 与/ 失效/ 传播/ 的/ 可靠性/ 分析/ 认为/ 故障/ 产生/ 错误/ ,/ 并/ 最终/ 导致/ 失效/ 发生/ ,/ 是/ 现有/ 基于/ 失效/ 的/ 可靠性/ 研究/ 中/ 的/ 一个/ 基本/ 共识/ ,/ 但/ 其/ 存在/ 着/ 明显/ 的/ 不足/ :/ 集中/ 于/ 输出/ 内容/ 失效/ 与/ 定时/ 失效/ ;/ (/ 1/ )/ 构件/ 存在/ 着/ 多种/ 失效/ 模式/ [/ 71/ ]/ ,/ 但/ 现在/ 主要/ (/ 2/ )/ 主要/ 考虑/ 到/ 构件/ 的/ 内部/ 失效/ 概率/ 、/ 构件/ 间/ 的/ 交互/ 概率/ ,/ 且/ 认为/ 构件/ 出错/ 可/ 立即/ 显现/ 并/ 传递/ 下去/ 导致/ 应用/ 失效/ ;/ (/ 3/ )/ 对/ 错误/ 传播/ 以及/ 转换/ 缺乏/ 研究/ ./ 文献/ [/ 72/ ]/ 考虑/ 到/ 构件/ 的/ 多种/ 失效/ ,/ 以及/ 失效/ 的/ 转播/ 与/ 转换/ ,/ 对/ 构件/ 软件/ 进行/ 了/ 可靠性/ 的/ 随机/ 分析/ 研究/ ./ 文中/ ,/ Filieri/ 首先/ 对/ 构件/ Ci/ 进行/ 建模/ ,/ 主要/ 借助/ 操作/ 模型/ 和/ 失效/ 模型/ 进行/ 表征/ ./ 例如/ ,/ Ci/ 具有/ N/ 个/ 不同/ 的/ 失效/ 模式/ ,/ 失效/ 模型/ 被/ 定义/ 为/ fi/ (/ r/ ,/ s/ )/ ,/ fi/ (/ r/ ,/ s/ )/ =/ Pr/ {/ Ci/ 产生/ 失效/ 模式/ 为/ s/ 的/ 输出/ |/ Ci/ 接收/ 到/ 失效/ 模式/ r/ 作为/ 输入/ }/ ./ 显然/ ,/ fi/ (/ r/ ,/ s/ )/ 具体/ 说明/ 了/ 构件/ Ci/ 接收/ 一种/ 失效/ 模式/ r/ ,/ 经过/ Ci/ 执行/ 后/ 可能/ 被/ 转换/ 为/ 另/ 一种/ 失效/ 模式/ s/ ,/ 这/ 就是/ 失效/ 的/ 传播/ 与/ 转换/ 过程/ ./ 与/ 之/ 相似/ ,/ 构件/ 软件体系结构/ 模型/ 相关/ 的/ 失效/ 模型/ 可/ 建模/ 为/ FA/ (/ r/ ,/ s/ )/ ,/ 基于/ FA/ (/ r/ ,/ s/ )/ ,/ 整个/ 应用/ 的/ 可靠性/ 相关/ 属/ 性能/ 被/ 定义/ ./ 在/ 对/ 构件/ 和/ 应用/ 的/ 可靠性/ 进行/ 建模/ 后/ ,/ 同样/ ,/ 系统/ 的/ 行为/ 通过/ DTMC/ 来/ 建模/ ,/ 但/ 不同/ 的/ 是/ ,/ DTMC/ 的/ 状态/ 空间/ 由/ 传统/ 的/ NGA/ (/ 构件/ Ci/ 的/ 单一/ 状态/ )/ 拓展/ 衍变/ 为/ NHA/ (/ 包括/ 构件/ Ci/ 的/ 多个/ 输入/ 与/ 输出/ 失效/ 模式/ )/ ./ 最后/ ,/ 利用/ DTMC/ 的/ 基本知识/ ,/ 整个/ 应用/ 的/ 可靠性/ 可/ 被/ 求解/ 出来/ ,/ 敏感性/ 分析/ 也/ 可/ 获得/ ./ 同样/ 考虑/ 到/ 不同/ 执行/ 模型/ 下/ 与/ 错误/ 传播/ 分析/ 的/ 构件/ 软件可靠性/ 预测/ 也/ 可/ 参见/ 文献/ [/ 73/ ]/ ./ 另一方面/ ,/ 针对/ 大型/ 市场化/ 软件/ ,/ 微软公司/ 认为/ [/ 67/ ]/ ,/ 由于/ 多种/ 用户/ 存在/ 多样/ 的/ 操作/ 剖面/ ,/ 在/ 可靠性/ 度量/ 中/ 应该/ 尽可能/ 考虑/ 到/ 多种/ 失效/ 类型/ ./ 这样/ ,/ 失效/ 被/ 分为/ 意外事件/ 引发/ 的/ 失效/ 、/ 计划/ 内/ 事件/ 引发/ 的/ 失效/ 以及/ 配置/ 失效/ 三大/ 类型/ ./ 对于/ 大型/ 商业软件/ 或/ 针对/ 多种/ 用户/ 类型/ 的/ 软件/ ,/ 我们/ 认为/ 应/ 更/ 多/ 的/ 搜集/ 多用户/ 的/ 多种/ 失效/ 数据/ ,/ 并/ 统计/ 使用/ 上/ 的/ 偏好/ ,/ 以此/ 来/ 作为/ 评估/ 和/ 改进/ 软件/ 制品/ 的/ 重要依据/ ./ 的/ 失效/ 模式/ ;/ 最后/ 需要/ 指出/ :/ (/ 1/ )/ 代码/ 插装/ 和/ 通信/ 通道/ 监控/ 技术/ 可/ 识别/ 不同/ (/ 2/ )/ 构件/ 错误/ 未必/ 导致/ 构件/ 失效/ :/ 仅当/ 错误/ 传播/ 至/ 构件/ 输出/ 接收/ 处时/ 构件/ 才/ 会/ 失效/ ;/ 构件/ 失效/ 未必/ 导致/ 应用/ 失效/ :/ 仅当/ 失效/ 传播/ 至/ 应用/ 的/ 输出/ 接口处/ 时/ 应用/ 才/ 会/ 失效/ ;/ (/ 3/ )/ 尽管/ 失效/ 可/ 被/ 传播/ 下去/ ,/ 但/ 通过/ 及时发现/ 错误/ 并/ 斩断/ 其/ 传播/ 的/ 路径/ (/ 采用/ 容错/ 、/ 屏蔽/ 或/ 转换/ 技术/ 等/ )/ ,/ 可/ 有效/ 预防/ 失效/ 的/ 发生/ ,/ 提高/ 可靠性/ ./ 6.4/ 典型/ 构件/ 软件可靠性/ 评估/ 方法/ 比较/ 目前/ ,/ 可靠性/ 评估/ 方法/ 中/ 基于/ 状态/ 的/ 模型/ 多/ 采用/ 解析/ 的/ 方法/ 进行/ 问题/ 求解/ ,/ 但/ 当/ 状态/ 空间/ 较大/ 时会/ 连带/ 产生/ “/ 爆炸/ ”/ 现象/ ,/ 这样/ 仿真/ 方法/ 可/ 成为/ 首选/ ;/ 基于/ 路径/ 的/ 方法/ 由于/ 需要/ 计算/ 由/ 多个/ 构件/ 执行/ 形成/ 的/ 多/ Page14/ 个/ 路径/ 的/ 可靠性/ ,/ 采用/ 运行/ 监控/ 的/ 方法/ 比较/ 常见/ ;/ 相比之下/ ,/ 可/ 加/ 模型/ 依赖于/ 每个/ 构件/ 的/ 历史/ 失效/ 数据/ 进行/ 建模/ 分析/ ,/ 因此/ 解析/ 求解/ 就/ 成为/ 了/ 必选/ 方法/ ./ 表/ 4/ 构件/ 软件可靠性/ 评估/ 方法/ 分类/ 比较/ 模型/ 基于/ 状态/ 的/ 模型/ 参见/ 表/ 3Everett/ 模型/ [/ 40/ ]/ λ/ CBS/ (/ t/ )/ =/ ∑/ NSherif/ 模型/ [/ 41/ ]/ Markov/ 模型/ [/ 19/ ]/ pCBS/ =/ ∑/ nHsu/ 模型/ [/ 8/ ]/ RPtk/ =/ ∏/ / i/ ∈/ PtkMAPATHNHPP/ [/ 32/ ]/ 6.5/ 讨论/ 综上/ ,/ 解析/ 、/ 监控/ 与/ 仿真/ 方法/ 在/ 可靠性/ 评估/ 方面/ 存在/ 各自/ 的/ 不足/ ,/ 但/ 为/ 定量化/ 的/ 可靠性/ 描述/ 提供/ 了/ 必要/ 的/ 基础/ ./ 当前/ 绝大多数/ 的/ 可靠性/ 评估/ 方法/ 集中/ 在/ 通过/ 计算/ 形式/ (/ 解析/ 以及/ 监控/ )/ 来/ 分析/ 系统/ ,/ 产生/ 固定值/ ,/ 并/ 不能/ 被/ 用来/ 验证/ 体系结构/ 是否/ 满足/ 所/ 定义/ 的/ 需求/ ./ 为此/ ,/ 如何/ 填补/ 可靠性/ 需求/ 与/ 体系结构/ 设计/ 及/ 评估/ 之间/ 的/ 差距/ 成为/ 新/ 评估/ 方法/ 的/ 重要/ 待/ 解决问题/ ./ 特别/ 指出/ ,/ 迄今为止/ ,/ 尚未/ 见到/ 能够/ 考虑/ 到/ 构件/ 软件/ 内部/ 更/ 多/ 细节/ 的/ 可加/ 模型/ 被/ 提出/ ,/ 这/ 也/ 在/ 很大/ 程度/ 上/ 制约/ 着/ 构件/ 软件可靠性/ 增长/ 模型/ 的/ 深入研究/ ./ 此外/ ,/ 从/ 前面/ 第/ 4/ 节/ 和/ 后续/ 第/ 8/ 节/ 可知/ ,/ 降低/ 求解/ 复杂度/ 的/ 非线性/ 方法/ ,/ 以及/ 放宽/ 假设/ 条件/ 的/ 仿真/ 方法/ 是/ 未来/ 研究/ 的/ 趋势/ ./ 因此/ ,/ 未来/ 研究/ 方向/ 和/ 挑战/ 主要/ 集中/ 在/ 如下/ 3/ 个/ 方面/ :/ (/ 1/ )/ 产生/ 时间/ 连续/ 值/ ,/ 或者说/ 是/ 时间/ 序列/ 相关/ 的/ 值/ ,/ 这/ 同时/ 又/ 与/ 可靠性/ 增长/ 模型/ 紧密/ 相关/ ;/ (/ 2/ )/ 提高/ 度量/ 与/ 预测/ 的/ 准确性/ ;/ (/ 3/ )/ 降低/ 计算/ 复杂度/ ./ 7/ 测试/ 资源/ 与/ 成本/ 管控/ 和/ 最优/ 发布/ 注/ :/ ①/ 可靠性/ 评估/ 方法/ 包括/ ,/ SBM/ :/ 基于/ 状态/ 解析/ 的/ 评估/ 方法/ ;/ PBM/ :/ 基于/ 路径/ 监控/ 的/ 可靠性/ 评估/ 方法/ ;/ AM/ :/ 可/ 加/ 模型/ 评估/ 方法/ ./ ②/ 可靠性/ 评估/ 求解/ 方法/ 包括/ ,/ AP/ :/ 解析/ 方法/ ;/ SM/ :/ 仿真/ 方法/ ;/ MM/ :/ 监控/ 方法/ ;/ ③/ 应用/ 阶段/ 包括/ ,/ D/ :/ 设计/ 开发阶段/ ;/ I/ :/ 实现/ 阶段/ ;/ T/ :/ 测试阶段/ ;/ R/ :/ 运行/ 阶段/ ./ 源/ 、/ CPU/ 小时/ 、/ 测试/ 案例/ 等/ ,/ 现在/ 主要/ 称之为/ TE/ ./ 测试/ 资源/ 的/ 分配/ 与/ 管理/ [/ 59/ ,/ 74/ -/ 75/ ]/ 以及/ 成本/ 管控/ 与/ 最优/ 发布/ 问题/ [/ 76/ ]/ 得到/ 了/ 广泛/ 的/ 研究/ ./ 所有/ 的/ 不同/ 模块/ 的/ 测试/ 活动/ 应该/ 在/ 受限/ 的/ 时间/ 内/ 完成/ ,/ 并且/ 这些/ 活动/ 正常/ 消耗/ 有限/ 的/ 软件开发/ 资源/ 总量/ 的/ 40/ %/ ~/ 50/ %/ [/ 2/ ]/ ./ 典型/ 地/ ,/ 模块/ 测试/ 是/ 需要/ 被/ 执行/ 的/ 测试/ 部分/ 中/ 最为/ 时间/ 关键/ 的/ ./ 因此/ ,/ 工程/ 管理者/ 应该/ 知晓/ 如何/ 在/ 这些/ 模块/ 间/ 分配/ 受限/ 的/ 测试/ 资源/ ./ 有些/ 工程师/ [/ 25/ ]/ 倾向/ 于/ 认为/ 最/ 关键/ 的/ 构件/ 在结构上/ 是/ 最/ 复杂/ 的/ 或/ 最/ 被/ 频繁/ 使用/ 的/ ,/ 并/ 因此/ 为/ 它们/ 分配/ 绝大部分/ 的/ TE/ ./ 显然/ ,/ 这种/ 非/ 定量/ 的/ 方法/ ,/ 过于/ 主观/ 粗糙/ ,/ 无法/ 有效/ 解决/ 构件/ 在/ 实现/ 系统/ 预期/ 可靠性/ 与/ 受限/ 的/ 资源配置/ 间/ 的/ 矛盾/ 关系/ ./ 同时/ ,/ 粗粒度/ 的/ 测试/ 资源分配/ 忽略/ 了/ 成本/ 因素/ ,/ 并/ 没有/ 为/ 软件/ 工程师/ 提供/ 定量/ 的/ 资源/ 优化/ 使用/ 配置/ ./ 最优/ 测试/ 资源分配/ 与/ 发布/ 技术/ OTRART/ (/ OptimalTestingResourcesAllocationandReleaseTechnology/ )/ 是/ 解决/ 此类/ 问题/ 的/ 主要/ 方法/ ./ OTRART/ 能够/ 定量/ 地/ 识别/ 关键/ 构件/ 集合/ ,/ 引导/ 测试/ 资源/ 在/ 实现/ 预期/ 可靠性/ 目标/ 下/ 实现/ 优化/ 配置/ ./ 目前/ ,/ 在/ 学术界/ ,/ 研究/ 人员/ 主要/ 是/ 基于/ 数学/ 上/ 的/ 优化/ 建模/ 方法/ 来/ 研究/ 如何/ 分配/ 测试/ 资源/ 和/ 最优/ 发布/ [/ 20/ -/ 21/ ,/ 25/ ,/ 44/ ,/ 58/ ]/ ./ 在/ 工程/ 实践/ 方面/ ,/ IBM/ 公司/ 借助/ 共享/ 构件/ 库来/ 进行/ 构件/ 的/ 重用/ [/ 77/ ]/ 以/ 提高/ 可靠性/ ,/ 建立/ 标准/ 开发/ 流程/ 与/ 体系/ 用以/ 节省/ 开发/ 时间/ 和/ 降低/ 预算/ ,/ 进而/ 加速/ 软件/ 和/ 技术/ 7.1/ 测试/ 资源/ 与/ 成本/ 管理/ 和/ 最优/ 发布/ 技术/ 测试/ 资源/ 指/ 用于/ 花费/ 在/ 软件测试/ 中/ 的/ 人力/ 资在/ 前面/ 分析/ 的/ 基础/ 上/ ,/ 表/ 4/ 从/ 5/ 个/ 方面/ 对/ 基于/ 体系结构/ 的/ 构件/ 软件可靠性/ 评估/ 方法/ 进行/ 分类/ 与/ 比较/ ./ 可靠性/ 评估/ 方法/ ①/ SBMAMPBMPBMMM/ +/ APDPBMPBMMM/ +/ APT/ 产生/ 系统/ 与/ 路径/ 级别/ Page15/ 有/ 许多/ 关于/ 成本/ 受限/ 下/ 可靠性/ 最优/ 分配/ 的/ 研究/ 工作/ [/ 78/ -/ 81/ ]/ ,/ 主要/ 集中/ 在/ 设计阶段/ ,/ 其/ 目标/ 是/ 选择/ 合适/ 的/ 具有/ 已知/ 的/ 可靠性/ 的/ 构件/ 集合/ ,/ 并/ 为/ 之/ 配置/ 容错/ 冗余/ ,/ 在/ 可靠性/ 限制/ 下/ 最小化/ 成本/ ,/ 或者/ 在/ 成本/ 限制/ 下/ 最大化/ 可靠性/ ./ 构件/ 间/ 的/ 最优/ 测试/ 资源分配/ 可/ 提高/ 软件/ 的/ 可靠性/ ./ 例如/ ,/ Lyu/ 等/ 人/ [/ 82/ ]/ 提出/ 了/ 两种/ 测试/ 资源/ 最优化/ 分配/ :/ 固定/ 失效率/ 限制/ 下/ 的/ 测试/ 时间/ 分配/ ,/ 以及/ 固定/ 测试/ 预算/ 下/ 的/ 失效率/ 最小化/ ./ 实际上/ ,/ 固定/ 测试/ 预算/ 问题/ 是/ 固定/ 失效率/ 问题/ 的/ 变种/ ./ 此类/ 问题/ 一般/ 可/ 归结为/ 非线性/ 规划/ 问题/ NLPP/ (/ Non/ -/ LinearProgrammingProblem/ )/ ,/ 其/ 求解/ 方法/ 主要/ 采用/ 下面/ 两种/ :/ (/ 1/ )/ 采用/ 拉格朗/ 日/ 乘子法/ (/ 包括/ 库恩/ -/ 塔克/ KTC/ (/ Kuhn/ -/ TuckerConditions/ )/ 条件/ )/ 等/ 非线性/ 规划/ 解析/ 求解/ 方法/ ;/ (/ 2/ )/ 采用/ 自动化/ 工具软件/ ,/ 例如/ 当/ 问题/ 求解/ 较为/ 复杂/ 时/ 可/ 采用/ 非线性/ 规划/ 软件/ AMPL/ 、/ Mathematica/ 、/ Matlab/ 等/ 进行/ 数值/ 求解/ ./ 7.2/ 考虑/ 体系结构/ 的/ 研究/ —/ —/ —/ OTRART/ 现有/ 研究/ 中/ 的/ 一个/ 主要/ 问题/ 是/ ,/ 忽略/ 了/ 构件/ 软件/ 内部/ 的/ 体系结构/ 和/ 构件/ 间/ 的/ 特征/ 差异/ [/ 3/ ,/ 20/ ,/ 45/ ]/ ./ 基于/ 体系结构/ 的/ 分析方法/ 可/ 被/ 应用/ 在/ 测试阶段/ ,/ 进行/ 确定/ 每个/ 构件/ 的/ 资源分配/ 情况/ ,/ 用以/ 实现/ 预期/ 目标/ ./ 此时/ ,/ 基于/ 体系结构/ 的/ 优化/ 框架/ 可用/ 以/ 实现/ 最小/ TE/ 花销/ 下/ 的/ 预期/ 可靠性/ 目标/ ./ 为此/ ,/ 新近/ 的/ 研究/ 开始/ 考虑/ 体系结构/ 对/ 资源分配/ 与/ 可靠性/ 的/ 影响/ ./ 系统/ 交付/ ./ Pietrantuono/ 等/ 人/ [/ 25/ ]/ 提出/ 涵盖/ 影响/ 可靠性/ 众多/ 因素/ 的/ 测试/ 资源/ 优化/ 模型/ ,/ 其/ 采用/ 吸收/ 的/ DTMC/ 来/ 表示/ 终止/ 性/ 的/ 应用软件/ 系统/ ./ DTMC/ 可/ 表示/ 为/ 状态/ S/ 和/ 状态/ 间/ 的/ 转移/ 概率/ 犘/ ./ 首先/ 定量化/ 识别/ 关键/ 构件/ 集合/ ,/ 以便/ 为/ 之/ 最优/ 分配/ 测试/ 资源/ ./ 对于/ 每个/ 构件/ ,/ 所/ 提出/ 的/ 模型/ 使用/ SRGM/ 来/ 表示/ 构件/ 可靠性/ 与/ TE/ 的/ 关系/ ./ 该/ 关系/ 可/ 表示/ 为/ TE/ =/ f/ (/ λ/ )/ 或/ T/ =/ f/ (/ λ/ )/ ,/ 其中/ λ/ 是/ 构件/ 失效率/ ./ 所/ 提出/ 的/ 优化/ 模型/ 旨在/ 寻找/ 每个/ 构件/ 所/ 应/ 消耗/ 的/ TE/ ,/ 以便/ 实现/ 预期/ 的/ 可靠性/ 目标/ :/ E/ [/ R/ ]/ / RMIN/ ./ 典型/ 地/ ,/ Fiondella/ 等/ 人/ [/ 21/ ]/ 提出/ 了/ 优化/ 框架/ :/ 在/ 花费/ 最小/ TE/ 时/ 实现/ 给定/ 的/ 系统/ 级别/ 可靠性/ 前提/ 下/ ,/ 确定/ 分配/ 给/ 每个/ 构件/ 的/ TE/ ./ 该/ 优化/ 程序/ 需要/ 系统/ 级别/ 的/ 可靠性/ 表达式/ 和/ TE/ 与/ 每个/ 构件/ 可靠性/ 间/ 的/ 关系式/ ./ 分配/ 全部/ TE/ 给/ 所有/ 的/ 构件/ 采用/ 如下/ 的/ 方式/ :/ 需要/ 考虑/ 不同/ 构件/ 在/ 整个/ 应用/ 中/ 的/ 重要性/ 以及/ 实现/ 提高/ 构件/ 可靠性/ 的/ 困难/ 程度/ ./ 给定/ N/ 个/ 构件/ 的/ 构件/ 软件/ ,/ 构件/ 消耗/ 的/ TE/ 向量/ 犈/ 1/ ×/ N/ 和/ 构件/ 的/ 可靠性/ 向量/ 犚/ 1/ ×/ N/ ,/ 该/ 优化/ 问题/ 可/ 被/ 描述/ 如下/ :/ 烄/ 烅/ S/ ./ t/ ./ R/ / R/ / 烆/ 该/ 优化/ 方法/ 通过/ 融入/ 系统可靠性/ 的/ 方式/ 考虑/ 到/ 构件/ 软件系统/ 结构/ 和/ TE/ 与/ 构件/ 可靠性/ 关系/ ./ 系统可靠性/ 是/ 构件/ 间/ 转移/ 概率/ pij/ 和/ 构件/ 可靠性/ ri/ 的/ 函数/ ,/ 即/ R/ =/ f/ (/ 犘/ ,/ R/ )/ ,/ 当然/ 转移/ 概率/ 是/ 操作/ 剖面/ 的/ 函数/ ./ 另外/ ,/ 构件/ 可靠性/ ri/ 可/ 表示/ 为/ TE/ 的/ 函数/ ,/ 即/ ri/ =/ g/ (/ ei/ )/ ./ 因此/ ,/ 系统可靠性/ 可以/ 表示/ 为/ 转移/ 概率/ 和/ TE/ 的/ 函数/ ,/ 即/ R/ =/ f/ (/ 犘/ ,/ g/ (/ E/ )/ )/ ./ 显然/ ,/ 式/ (/ 5/ )/ 不/ 存在/ 线性/ 解/ ,/ 通常/ 需要/ 非线性/ 求解/ 方法/ 在/ 满足/ 系统可靠性/ 的/ 前提/ 下/ 求得/ 满足要求/ 的/ 最小/ 的/ 测试/ 工作量/ E/ / ./ 软件测试/ 活动/ 过程/ 有/ 测试/ 时间/ ,/ 预算/ 成本/ (/ 对应/ TE/ )/ 和/ 最低/ 可靠性/ R0/ 的/ 限制/ ,/ 当/ 考虑/ 三者/ 最优化/ 时/ 实现/ 软件/ 的/ 资源/ 有效/ 管理/ 和/ 最优/ 发布/ 已经/ 变得/ 尤为重要/ ./ Wang/ 等/ 人/ [/ 83/ ]/ 提出/ 了/ 一个多/ 目标/ 最优/ 分配/ 框架/ 如下/ 所示/ :/ 进行/ 比较/ ,/ 见表/ 5/ ./ Min/ 狔/ =/ f/ (/ x/ )/ =/ (/ f1/ (/ x/ )/ ,/ f2/ (/ x/ )/ ,/ …/ ,/ fm/ (/ x/ )/ )/ 烄/ S/ ./ t/ ./ 狓/ =/ (/ x1/ ,/ x2/ ,/ …/ ,/ xn/ )/ ∈/ 犡/ 烅/ 烆/ 其中/ 狓/ ,/ 犡/ ,/ 狔/ 和/ 犢/ 分别/ 是/ 决策/ 向量/ 、/ 决策空间/ 、/ 目标/ 向量/ 和/ 目标/ 空间/ ;/ fi/ (/ x/ )/ 是/ 第/ i/ 个/ 目标/ 函数/ ./ 由于/ 式/ (/ 6/ )/ 的/ 复杂性/ ,/ 采用/ 非线性/ 优化/ 算法/ 是/ 多/ 目标/ 优化/ 问题/ 行之有效/ 的/ 求解/ 方法/ ,/ 这样/ 相应/ 的/ 非/ 支配/ 排序/ 基因/ 算法/ 被/ 开发/ 出来/ 用于/ 求解/ ./ 7.3/ 模型/ 关系/ 与/ 统一化/ 构件/ 软件测试/ 过程/ 中/ ,/ 包括/ 测试/ 时间/ 在内/ 的/ 测试/ 资源/ 以及/ 成本/ 都/ 是/ 受制于/ 软件工程/ 项目/ 实际/ 所/ 面临/ 的/ 内外/ 因素/ ,/ 需要/ 对/ 资源/ 与/ 成本/ 进行/ 合适/ 的/ 分配/ 与/ 管理/ ,/ 确定/ 最优/ 的/ 发布/ 时间/ ./ 评估/ 系统/ 级别/ 的/ 可靠性/ ,/ 其/ 目标/ 是/ 在/ 相当/ 大/ 的/ TE/ (/ 一种/ 测试/ 资源/ )/ 被/ 分配/ 给/ 目标/ 软件系统/ 之前/ ,/ 评估/ 软件体系结构/ 设计/ 质量/ 和/ 识别/ 其/ 可能/ 的/ 弱点/ ./ 目前/ OTRART/ 问题/ 研究/ 中/ ,/ 已由单/ 因素/ 考虑/ 向/ 多/ 因素/ 考虑/ 演变/ ,/ 现有/ 所/ 提出/ 的/ 问题/ 模型/ 均/ 可/ 被/ 描述/ 为/ 一个/ 最优化/ 的/ 计算/ 框架/ ./ 因而/ ,/ 提出/ 考虑/ 实际/ 情况/ 更为/ 细致/ 的/ 优化/ 框架/ 成为/ 当前/ 研究/ 的/ 焦点/ ,/ 也/ 是/ 未来/ 研究/ 的/ 重点/ ./ 在/ 此/ ,/ 选取/ 11/ 个/ 典型/ 的/ 模型/ 从/ 5/ 个/ 方面/ 统一/ 地/ Page16/ 模型/ 研究/ 表/ 5/ 构件/ 软件测试/ 资源/ 与/ 成本/ 管理/ 及/ 最优/ 发布/ 比较/ Huang/ 模型/ [/ 58/ ]/ A/ +/ ECBS/ +/ UTEX/ +/ PD/ +/ TEF/ 烄/ Min/ ∑/ N/ 烅/ S/ ./ t/ ./ ∑/ NPietrantuonoRoberto/ 模型/ [/ 25/ ]/ Huang/ -/ I/ 模型/ [/ 44/ ]/ A/ +/ ECBS/ +/ UTEX/ +/ PD/ +/ TEFKapur/ -/ I/ 模型/ [/ 45/ ]/ ACBS/ +/ UTEX/ +/ PD/ +/ TEFKapur/ 模型/ [/ 84/ ]/ A/ +/ CCBS/ +/ UTEX/ +/ PD/ +/ TEFi/ =/ 1Ri/ (/ t/ )/ / R/ 烄/ MinC/ (/ E/ )/ =/ ∑/ N/ 烅/ S/ ./ t/ ./ ∑/ Ni/ =/ 1Ri/ (/ t/ )/ / R/ 烄/ MinT/ =/ ∑/ N/ 烅/ S/ ./ t/ ./ E/ [/ R/ ]/ =/ ∏/ N/ -/ 1/ 烆/ 烄/ Max/ ∑/ Nmi/ =/ ∑/ N/ 烅/ S/ ./ t/ ./ ∑/ Nei/ =/ E/ ,/ ei/ / 烆/ MinC/ (/ T/ ,/ E/ )/ 烄/ S/ ./ t/ ./ ∑/ NTi/ / T/ 烅/ ∑/ Nei/ / Ti/ =/ 1/ 烆/ mi/ (/ Ti/ ,/ ei/ )/ / pia/ 烄/ Min/ ∑/ N/ (/ a/ -/ m/ (/ T/ )/ )/ 烅/ S/ ./ t/ ./ ∑/ Nei/ =/ E/ ,/ ei/ / 烆/ 烄/ MaxR/ (/ x/ )/ 烅/ S/ ./ t/ ./ ∑/ N/ 烆/ 烄/ Min/ ∑/ N/ 烅/ S/ ./ t/ ./ R/ / R/ / 烆/ 烄/ MinC/ (/ E/ )/ =/ ∑/ NS/ ./ t/ ./ ∑/ N/ 烅/ Ri/ (/ t/ )/ =/ 1/ -/ e/ -/ biei/ 烆/ S/ ./ t/ ./ R/ (/ x/ |/ T/ )/ / R/ {/ Madhu/ 模型/ [/ 20/ ]/ C/ +/ D/ +/ ECBS/ +/ UTEX/ +/ PD/ +/ TEFMinEC/ (/ T/ )/ MaxR/ (/ t/ )/ 烄/ S/ ./ t/ ./ ∑/ N/ 烅/ 烆/ Jha/ 模型/ [/ 2/ ]/ A/ +/ CCBS/ +/ UT/ (/ EX/ +/ SS/ )/ +/ Leung/ 模型/ [/ 85/ ]/ ACBS/ +/ UTEX/ +/ PD/ +/ TEFXie/ 模型/ [/ 3/ ]/ Fiondella/ 模型/ [/ 21/ ]/ ACBS/ +/ UTEX/ +/ PDBerman/ 模型/ [/ 86/ ]/ ACBS/ +/ UT/ +/ IT/ -/ 注/ :/ ①/ 研究/ 类型/ 包括/ ,/ A/ :/ 资源分配/ ;/ B/ :/ 资源/ 控制/ ;/ C/ :/ 成本/ 模型/ ;/ D/ :/ 最优/ 发布/ ;/ E/ :/ 敏感性/ 分析/ ./ ②/ 阶段/ 包括/ ,/ UT/ :/ 单元/ // 模块/ 测试/ ;/ IT/ :/ 集成/ 测试/ ./ ③/ SRGM/ 类型/ 包括/ ,/ EX/ :/ 指数/ 型/ ;/ SS/ :/ S/ 型/ ;/ PD/ :/ 完美/ 排错/ ;/ ID/ :/ 不/ 完美/ 排错/ ;/ TEF/ :/ 测试/ 工作量/ 函数/ ./ ④/ 方法/ 包括/ ,/ AM/ :/ 解析/ 方法/ ;/ NM/ :/ 非线性/ 方法/ ;/ DP/ :/ 动态/ 规划/ ;/ GA/ :/ 基因/ 算法/ ;/ LMM/ :/ 拉格朗/ 日/ 乘子法/ ;/ KTC/ :/ 库恩/ -/ 塔卡/ 条件/ ;/ SVP/ :/ 鞍值/ 问题/ ;/ DES/ :/ 离散/ 事件/ 仿真/ (/ 基于/ 率/ 的/ 仿真/ )/ ./ i/ =/ 1/ (/ ai/ -/ mi/ (/ t/ )/ )/ ei/ / E/ ,/ ei/ / 0ei/ / E/ ,/ ei/ / 0i/ =/ 1i/ =/ 1i/ =/ 1i/ =/ 1i/ =/ 1i/ =/ 1Ti/ / Ti/ =/ 1ei/ =/ ei/ =/ 1/ / i/ (/ ei/ / 0/ )/ ∧/ {/ ei/ / inf/ {/ ei/ ∈/ / :/ ri/ / 1ei/ / E/ ,/ ei/ / 0/ ,/ i/ =/ 1/ ,/ …/ ,/ Ni/ =/ 1bi/ / Bi/ =/ 1ri/ / r0/ ,/ 1/ / i/ / Page177/ ./ 4/ 小结/ 综上/ ,/ 我们/ 通过/ 分析/ 表/ 5/ 可以/ 看出/ ,/ 一个/ 一般化/ 的/ 优化/ 问题/ 可/ 被/ 描述/ 为/ ,/ 在/ 组成/ 构件/ 软件/ 的/ 不同/ 构件/ 间/ 分配/ 有限/ 的/ 测试/ 资源/ (/ 表现/ 为/ TE/ )/ ,/ 以便/ 在/ 一个/ 给定/ 的/ 以/ 可靠性/ 为/ 核心/ 的/ 目标/ 能/ 被/ 实现/ ,/ 且/ 实现/ 该/ 目标/ 时/ 的/ 全部/ 软件/ (/ 测试/ )/ 成本/ 应/ 最小化/ ./ OTRART/ 问题/ 与/ 构件/ 软件/ 的/ 体系结构/ 、/ 构件/ 模型/ 或者说/ 构件/ 可靠性/ 增长/ 模型/ 紧密/ 相关/ ,/ 因而/ 也/ 受制于/ 二者/ 的/ 研究进展/ :/ (/ 1/ )/ 体系结构/ 代表/ 了/ 构件/ 软件/ 的/ 内部结构/ 信息/ ,/ 其中/ 必然/ 涉及/ 到/ 转移/ 概率/ pij/ ./ 我们/ 认为/ ,/ 当/ 设计/ 文档/ 可得/ 时/ (/ 例如/ UML/ 图/ )/ ,/ 采用/ 静态/ 剖面/ 工具/ 或/ 仿真/ 方法/ 可/ 获取/ 体系结构/ 的/ 相对/ 准确/ 信息/ ;/ 若/ 设计/ 文档/ 不可/ 得/ ,/ 基于/ 源码/ 和/ 目标/ 代码/ 的/ 抽取/ 工具/ ,/ 甚至/ 动态/ 剖面/ 追踪/ 工具/ (/ 例如/ gprof/ )/ 也/ 可/ 获得/ 体系结构/ 信息/ ,/ 但/ 此时/ 并/ 不够/ 准确/ ;/ (/ 2/ )/ 构件/ 模型/ 利用/ SRGM/ 来/ 描述/ 是/ 最为/ 准确/ 的/ ,/ 因为/ SRGM/ 是/ 基于/ 实际/ 失效/ 强度/ 可变/ 函数/ 来/ 建模/ 的/ ./ 构造/ SRGM/ 需要/ 收集/ 每个/ 构件/ 的/ 失效/ 相关/ 信息/ ,/ 所/ 建立/ 的/ 模型/ 只有/ 接近/ 实际/ 测试环境/ 才/ 具有/ 较强/ 的/ 描述/ 能力/ ./ 我们/ 通过/ 表/ 5/ 还/ 可以/ 发现/ ,/ 对于/ OTRART/ 问题/ ,/ 现有/ 采用/ 的/ 模型/ 多为/ 指数/ 型/ 的/ 完美/ 模型/ (/ 即/ EX/ +/ PD/ )/ ,/ 未来/ 还/ 需要/ 考虑/ 到/ 更加/ 靠近/ 实际/ 的/ 不/ 完美/ 排错/ 相关/ 的/ 软件可靠性/ 增长/ 模型/ ./ 由于/ 测试/ 成本/ 的/ 有限性/ ,/ 在/ 预定/ 时间/ 内/ 实现/ 可靠性/ 目标/ 是/ 软件开发/ 中/ 需要/ 不断/ 权衡/ 与/ 优化/ 的/ 动/ 过程/ ./ OTRART/ 问题/ 中/ 一个/ 潜在/ 的/ 研究/ 方向/ 是/ 既/ 提高/ 或/ 达到/ 预期/ 可靠性/ 等/ 目标/ 时/ ,/ 又/ 不/ 引起/ 超过/ 预定/ 的/ 成本/ 限制/ ./ 由此可见/ ,/ OTRART/ 问题/ 正在/ 向/ 多/ 目标/ 优化/ 问题/ 方向/ 发展/ ,/ 这/ 势必/ 增加/ 了/ 问题/ 求解/ 的/ 难度/ ,/ 因此/ 非线性/ 优化/ 算法/ (/ 例如/ ,/ 单纯/ 型/ 算法/ 、/ 遗传算法/ 、/ 模拟退火/ 算法/ 等/ )/ 会/ 成为/ 重要/ 的/ 求解/ 选择/ ./ 8/ 基于/ 率/ (/ 函数/ )/ 的/ 可靠性/ 过程/ 仿真/ 现有/ 绝大多数/ 的/ 进行/ 构件/ 软件可靠性/ 度量/ 的/ 解析/ 方法/ 基于/ 马尔可夫/ 模型/ ,/ 并且/ 均/ 假设/ 失效/ 服从/ 指数/ 时间/ 服务/ [/ 87/ ]/ ./ 随着/ 模块/ 集成度/ 和/ 复杂度/ 的/ 不断/ 上升/ ,/ 传统/ 的/ (/ 半/ )/ 马尔可夫/ 方法/ 在/ 进行/ 可靠性/ 预测/ 与/ 性能/ 分析/ 时会/ 遭遇/ 下列/ 问题/ :/ 处理/ ;/ (/ 1/ )/ “/ 状态/ 空间/ 爆炸/ ”/ 问题/ 使得/ 数学/ 解析/ 上/ 难以/ (/ 2/ )/ 为了/ 数学/ 求解/ 的/ 简单/ ,/ 解析/ 方法/ 往往/ 做/ 了/ 较为/ 严格/ 的/ 假设/ ,/ 使/ 之/ 偏离/ 实际/ 测试/ 过程/ 程度/ 较大/ ;/ (/ 3/ )/ 对/ 单一/ 构件/ 的/ 可靠性/ 增长/ ,/ 构件/ 间/ 的/ 依赖/ ,/ 以及/ 修复/ 策略/ 等/ 影响/ 因素/ 难以/ 充分考虑/ ;/ (/ 4/ )/ 已经/ 有/ 公开/ 发表/ 的/ 关于/ 单一/ 软件/ (/ 黑盒/ 形式/ )/ 失效/ 数据/ 集/ ,/ 但是/ 构件/ 软件测试/ 过程/ 数据/ 集/ 至今/ 也/ 仅/ 有/ 一份/ 公开/ [/ 88/ ]/ ,/ 且/ 其/ 可信性/ 也/ 难以确定/ ./ 在/ 此/ 情况/ 下/ 离散/ 事件/ 仿真/ DES/ (/ Discrete/ -/ EventSimulation/ )/ [/ 47/ ,/ 89/ ]/ 方法/ 被/ 作为/ 解析/ 方法/ 的/ 替代/ 被/ 引入/ 到/ 构件/ 软件/ 的/ 可靠性/ 分析/ 中/ ,/ 可用/ 以/ 研究/ 多种/ 因素/ 对/ 应用/ 失效/ 行为/ 的/ 影响/ ,/ 现在/ 已经/ 有/ 了/ 广泛/ 的/ 研究/ [/ 6/ ,/ 11/ ,/ 81/ ,/ 84/ ]/ ./ 软件可靠性/ 仿真/ 基础/ 最早/ 可以/ 追溯到/ 文献/ [/ 62/ ]/ ,/ 在/ 此基础/ 上/ GSS/ [/ 46/ ]/ 第一个/ 提出/ 了/ 关于/ 构件/ 软件可靠性/ 的/ 仿真/ 研究/ ,/ 并/ 将/ 其/ 应用/ 到/ 一个/ 终止/ 型/ 应用/ 系统/ 和/ 一个/ 实时/ 的/ 带有/ 反馈/ 控制/ 的/ 系统/ 上/ ,/ 对/ 其/ 失效/ 剖面/ 进行/ 仿真/ ,/ 获得/ 了/ 良好/ 的/ 结果/ ./ 8.1/ 单一/ 构件/ 随机失效/ 过程/ 建模/ 分析/ 通常/ 假定/ 构件/ 的/ 失效/ 形式/ 为/ NHPP/ ,/ 进一步/ 被/ 建模/ 描述/ 为/ 一类/ 非/ 齐次/ 连续/ 时间/ 马尔可夫/ 过程/ NHCTMC/ (/ Non/ -/ HomogeneousContinuousTimeMarkovChain/ )/ ,/ 即令/ 计数/ 过程/ {/ X/ (/ t/ )/ }/ 表示/ [/ 0/ ,/ t/ ]/ 内/ 构件/ Ci/ 的/ 累积/ 的/ 失效/ 个数/ ./ 这/ 是因为/ 泊松/ 失效/ 过程/ (/ 包括/ NHPP/ )/ 具有/ 独立/ 增量/ 特性/ ,/ 即/ 每个/ 故障/ 的/ 冒险/ 率均/ 是/ 一个/ 常量/ ,/ 这/ 符合/ Markov/ 属性/ ,/ 即下/ 一/ 状态/ 仅/ 与/ 当前/ 状态/ 有关/ 而/ 与/ 历史/ 状态/ 无关/ ./ 当/ Ci/ 的/ 失效/ 行为/ 被/ 建模/ 为/ 失效率/ 时/ ,/ {/ X/ (/ t/ )/ }/ 仅/ 依赖于/ 构件/ 的/ 失效率/ :/ λ/ (/ n/ ,/ t/ )/ ,/ n/ 是/ 构件/ 的/ 状态/ ,/ 取决于/ 构件/ 失效/ 的/ 个数/ ./ {/ X/ (/ t/ )/ }/ 可/ 被/ 视为/ 纯死/ 的/ 过程/ :/ 如果/ 构件/ 的/ 最大/ 失效/ 个数/ 是/ 定值/ N/ ,/ 到/ t/ 为止/ 已有/ i/ 个/ 失效/ 发生/ ,/ 构件/ 的/ 状态/ 被/ 标记/ 为/ N/ -/ i/ ;/ 如果/ Ci/ 的/ 最大/ 失效/ 个数/ 是/ 一个/ 随机变量/ i/ ,/ 到/ t/ 为止/ 累积/ 观察/ 到/ 的/ 失效/ 个数/ 被/ 定义/ 为/ 构件/ 的/ 状态/ ,/ 则/ {/ X/ (/ t/ )/ }/ 可/ 被/ 视为/ 一个/ 纯生/ 的/ 随机/ 过程/ [/ 12/ -/ 13/ ,/ 16/ ,/ 46/ ]/ ./ 通常/ 纯生/ 模型/ (/ 例如/ ,/ G/ -/ O/ ,/ YamadaS/ ,/ Duane/ ,/ Musa/ -/ Okumoto/ ,/ Littlewood/ -/ Verrall/ )/ 较纯/ 死/ 模型/ (/ Jelinski/ -/ Moranda/ )/ 更为/ 普遍/ 采用/ ./ 图/ 7/ 给出/ 两种/ 失效/ 类型/ 建模/ ./ Page18/ 整个/ 构件/ 软件/ 级别/ 的/ 随机失效/ 过程/ 依赖于/ :/ (/ 1/ )/ 每个/ 构件/ 的/ 随机失效/ 过程/ ;/ (/ 2/ )/ 整个/ 应用/ 的/ 动态/ 体系结构/ ./ 实际上/ ,/ 纯生/ // 纯死/ 过程/ 是/ 一种/ 特殊/ 的/ 马尔可夫/ 过程/ ,/ 这种/ 情况/ 下/ ,/ 当/ 采用/ 传统/ 解析/ 方法/ ,/ 建模/ Ci/ 为/ 纯生/ // 纯死/ NHCTMC/ 时/ ,/ 由于/ Ci/ 状态/ 与/ 执行/ 之间/ 的/ 交错/ ,/ 应用/ 级别/ S/ 的/ 随机失效/ 过程/ 不能/ 被/ 建模/ 描述/ 为/ NHCTMC/ 模型/ ,/ 而且/ 也/ 难以/ 解析/ 处理/ ./ 8.2/ 剖析/ :/ 基于/ 率/ (/ 函数/ )/ 的/ 仿真/ 理论/ 基础/ DES/ 中/ 基于/ 率/ 的/ 仿真/ RBS/ (/ Rate/ -/ BasedSimu/ -/ lation/ )/ 是/ 最为/ 重要/ 的/ 一种/ ,/ 可以/ 对/ NHCTMC/ 的/ 实现/ 过程/ 进行/ 仿真/ ,/ 包括/ 纯生/ 或/ 纯死/ 类型/ ,/ 且/ 可/ 将/ 故障/ 检测/ 与/ 修复过程/ 以/ 统一/ 方式/ 处理/ ./ RBS/ 认为/ [/ 13/ ,/ 16/ ,/ 46/ ,/ 87/ ]/ ,/ 在/ 一个/ 无穷小/ 的/ 时间/ 间隔/ (/ t/ ,/ t/ +/ Δ/ t/ )/ 内/ ,/ 一个/ 事件/ 发生/ 的/ 条件/ 概率/ (/ t/ 之前/ 没有/ 发生/ )/ 为/ λ/ (/ 0/ ,/ t/ )/ Δ/ t/ ,/ 其中/ λ/ (/ 0/ ,/ t/ )/ 被/ 称为/ 事件/ 发生率/ 或/ 冒险/ 率/ ,/ 里面/ 的/ 0/ 表示/ 起始/ 时间/ ./ 进一步/ ,/ 在/ (/ t/ ,/ t/ +/ Δ/ t/ )/ 内/ 失效/ 发生/ 的/ 个数/ 的/ 概率/ 满足/ pr/ {/ N/ (/ t/ +/ Δ/ t/ )/ -/ N/ (/ t/ )/ =/ 0/ }/ =/ 1/ -/ λ/ (/ 0/ ,/ t/ )/ Δ/ t/ +/ o/ (/ Δ/ t/ )/ 烄/ pr/ {/ N/ (/ t/ +/ Δ/ t/ )/ -/ N/ (/ t/ )/ =/ 1/ }/ =/ λ/ (/ 0/ ,/ t/ )/ Δ/ t/ +/ o/ (/ Δ/ t/ )/ 烅/ pr/ {/ N/ (/ t/ +/ Δ/ t/ )/ -/ N/ (/ t/ )/ =/ 2/ }/ =/ o/ (/ Δ/ t/ 烆/ 其中/ o/ (/ Δ/ t/ )/ 是/ 无穷小/ 量/ ,/ 满足/ lim/ Δ/ t/ →/ 0/ 明/ (/ t/ ,/ t/ +/ Δ/ t/ )/ 内/ 失效/ 出现/ 两次/ 的/ 概率/ 为/ o/ (/ Δ/ t/ )/ ;/ 不/ 发生/ 的/ 概率/ 近似/ 为/ 1/ -/ λ/ (/ t/ )/ Δ/ t/ ./ 这样/ 在/ (/ 0/ ,/ t/ ]/ 内该/ 事件/ 不/ 发生/ 的/ 概率/ 为/ P0/ (/ t/ )/ 由于/ m0/ (/ t/ )/ 是/ λ/ (/ 0/ ,/ τ/ )/ 的/ 积分/ 形式/ ,/ 故/ 被/ 称为/ 累积/ 冒险/ 率/ (/ 对应/ 失效/ 发生/ )/ ./ m0/ (/ t/ )/ 满足/ m0/ (/ 0/ )/ =/ 0/ 和/ m0/ (/ t/ →/ )/ →/ ./ 记/ 随机变量/ T/ 为/ 第一个/ 失效/ 事件/ 发生/ 的/ 时间/ ,/ 则/ 其/ 累积/ 概率分布/ 函数/ F/ (/ t/ )/ 和/ 概率密度函数/ f/ (/ t/ )/ 如式/ (/ 10/ )/ 、/ (/ 11/ )/ 所示/ :/ F/ (/ t/ )/ =/ Pr/ {/ T/ / t/ }/ =/ 1/ -/ P0/ (/ t/ )/ =/ 1/ -/ e/ -/ m0/ (/ 0/ ,/ t/ )/ (/ 10/ )/ 实际上/ ,/ 对于/ 给出/ 下/ 一个/ 事件/ 发生/ 的/ 概率分布/ 函数/ 与/ 密度/ 函数/ 的/ 表达式/ 是/ 非常/ 困难/ 的/ ,/ 基于/ 率/ (/ 函数/ )/ 的/ 仿真/ 方法/ 可以/ 对此/ 进行/ 有效/ 处理/ ./ 8.3/ 基于/ 率/ (/ 函数/ )/ 的/ 构件/ 级别/ 仿真/ 程序/ 基于/ 率控制/ 的/ 事件/ 仿真/ 主要/ 借助于/ 一个/ 率/ 函数/ ,/ 例如/ 第/ 8.2/ 节中/ 的/ λ/ (/ 0/ ,/ t/ )/ ,/ 通常/ 也/ 标记/ 为/ λ/ (/ t/ )/ ,/ 其/ 设定/ (/ t/ ,/ t/ +/ dt/ )/ 内/ 事件/ 发生/ 的/ 条件/ 概率/ 为/ λ/ (/ t/ )/ dt/ ./ 下面/ 图/ 8/ 中/ 的/ 仿真/ 程序/ A/ [/ 12/ ,/ 46/ ]/ 可以/ 对/ 纯生/ 类型/ 的/ double/ (/ / lamda/ )/ (/ int/ ,/ double/ )/ )/ NHCTMC/ 进行/ 仿真/ ./ 1/ ./ intcomponent/ _/ level/ _/ single/ _/ event/ (/ doublet/ ,/ doubledt/ ,/ 2/ ./ {/ inttotal/ _/ faults/ _/ detect/ =/ 0/ ;/ 3/ ./ doublecurrent/ _/ time/ =/ 0.0/ ;/ 4/ ./ While/ (/ current/ _/ time/ / t/ )/ {/ 5/ ./ if/ (/ occurs/ (/ lamda/ (/ total/ _/ faults/ _/ detect/ ,/ current/ _/ time/ )/ )/ )/ 6/ ./ total/ _/ faults/ _/ detect/ ++/ ;/ 7/ ./ current/ _/ time/ +/ =/ dt/ ;/ }/ 8/ ./ returntotal/ _/ faults/ _/ detect/ ;/ }/ 图/ 8/ 的/ 仿真/ 程序/ 可/ 实现/ (/ 0/ ,/ t/ ]/ 内/ 返回/ Ci/ 被/ 检测/ 到/ 的/ 故障/ 数量/ ./ 判断/ 故障/ 检测/ 由/ occurs/ (/ )/ 函数/ 完成/ ,/ 其/ 通过/ 判断/ 与/ 一个/ [/ 0/ ,/ 1/ ]/ 内/ 的/ 随机数/ x/ 的/ 关系/ ,/ 若/ x/ </ λ/ (/ n/ ,/ t/ )/ ×/ dt/ ,/ 则/ 失效/ 发生/ 且/ 被/ 成功/ 检测/ 到/ ./ 实际/ 仿真/ 中/ λ/ (/ n/ ,/ t/ )/ 可/ 设定/ 为/ 某/ SRGM/ 的/ 故障/ 检测/ 率/ 函数/ ./ 显然/ ,/ 仿真/ 程序/ A/ 能够/ 较为/ 容易/ 地被/ 修改/ 为/ 多/ 构件/ 系统/ 执行/ 的/ 仿真/ ,/ 可以/ 获取/ (/ 0/ ,/ t/ ]/ 内/ 每个/ 构件/ 累积/ 检测/ 到/ 的/ 故障/ 个数/ mi/ (/ t/ )/ 和/ 执行/ 时间/ ti/ ./ 8.4/ 构件/ 软件可靠性/ 过程/ 仿真/ 分析/ 可靠性/ 过程/ 仿真/ 主要/ 对/ 软件/ 在/ 测试/ 过程/ 中/ 的/ 主要/ 特征/ 进行/ 模拟/ ,/ 如果/ 把/ 软件/ 当做/ 一个/ 整体/ ,/ 来/ 仿真/ 其/ 可靠性/ 度量/ ,/ 这/ 被/ 称为/ 黑盒/ 仿真/ [/ 62/ ,/ 87/ ]/ ,/ 此时/ 对/ 软件/ 的/ 内部结构/ 不/ 做/ 考虑/ ,/ 仅/ 涉及/ 其/ 与/ 外界/ 的/ 交互/ ./ 相比之下/ ,/ 白盒/ 仿真/ 将/ 软件/ 内部/ 构件/ 间/ 的/ 依赖/ 也/ 作为/ 仿真/ 要素/ 进行/ 考虑/ ,/ 能够/ 获得/ 软件/ 运行/ 内部/ 更/ 多/ 的/ 细节/ ./ 白盒/ 仿真/ 主要/ 是/ 考虑/ 到/ 了/ 构件之间/ 的/ 关联性/ ./ Huang/ 等/ 人/ [/ 87/ ]/ 给出/ 了/ 两种/ 白盒/ 仿真/ 方法/ :/ 方法/ 1/ :/ 相关系数/ 法/ ./ 使用/ 一个/ 变量/ μ/ ij/ 做/ 为/ 构件/ 间/ 关联/ 的/ 相关系数/ ,/ μ/ ij/ 可/ 通过/ 每个/ 构件/ 的/ 单元测试/ 数据/ 计算/ 得到/ ;/ 方法/ 2/ :/ 转移/ 概率法/ ./ 考虑/ 构件/ 间/ 的/ 转移/ 概率/ pij/ ./ 由于/ 方法/ 1/ 主要/ 是/ 在/ 黑盒/ 仿真/ 的/ 基础/ 上/ 引入/ 相关系数/ ,/ 这里/ 不/ 做/ 讨论/ ,/ 下面/ 给出/ 方法/ 2/ 的/ 基本/ 仿真/ 思路/ ./ 转移/ 概率法/ 中/ ,/ 构件/ 间/ 的/ 转移/ 概率/ pij/ 可/ 事先/ 获得/ (/ 例如/ ,/ 借助/ 剖面/ 工具/ )/ ,/ 若/ Ci/ 执行/ 完/ ,/ 依据/ 相关/ 的/ 转移/ 概率/ 来/ 获得/ 将要/ 执行/ 的/ 构件/ ./ 在/ 此/ ,/ 仿真/ 执行/ 的/ 输入/ 是/ 构件/ 的/ 失效/ 行为/ (/ 一般/ 被/ 建模/ 为/ SRGM/ )/ 和/ 构件/ 间/ 转移/ 概率/ ./ Gokhale/ 等/ 人/ [/ 12/ ]/ 基于/ 概率/ 转移/ 法对/ 构件/ 软件/ 的/ 可靠性/ 相关/ 分析/ 进行/ 了/ 仿真/ ,/ 涵盖/ 支持/ 多种/ 修复/ 策略/ 、/ 关键/ 构件/ 的/ 容错/ 配置/ 以及/ 考虑/ 构件/ 覆盖/ 参数/ ;/ 此外/ ,/ 基于/ 修复/ 率/ μ/ (/ j/ ,/ t/ )/ 为/ 可能/ 的/ 5/ 种/ 函数/ 形式/ (/ 即/ μ/ ,/ j/ ×/ k/ ,/ α/ (/ 1/ -/ e/ -/ β/ t/ )/ ,/ α/ e/ -/ β/ t/ 等/ )/ ,/ Gokhale/ 等/ 人/ [/ 13/ ]/ 又/ 提出/ 了/ 可以/ 容纳/ 各种/ 情况/ 的/ 统一/ 的/ 仿真/ 程序/ 框架/ ./ 在/ 构件/ 软件可靠性/ 分析/ 或/ 仿真/ 中/ ,/ 由于/ 不同/ 构件/ 的/ 差异/ ,/ 不同/ 故障/ 可能/ 被/ 分配/ 到/ 不同/ 的/ 修复/ Page19/ 队列/ 中/ 进行/ 修复/ ,/ 因此/ 基于/ 排队/ 论/ (/ 队列/ 思想/ )/ 进行/ 可靠性/ 分析/ 或/ 仿真/ 成为/ 近年来/ 的/ 研究/ 热点/ [/ 10/ ,/ 47/ ,/ 89/ ]/ ./ 文献/ [/ 10/ ]/ 提出/ 了/ 基于/ 有限/ 服务/ 队列/ 的/ 构件/ 软件/ 故障/ 排错/ 模型/ ,/ 如图/ 9/ 所示/ ./ HMSQM/ 由/ 三/ 部分/ 组成/ ,/ 故障/ 检测/ 过程/ 实现/ 对/ 构件/ 软件/ 故障/ 的/ 检测/ ,/ 考虑/ 到/ 不同/ 构件/ 与/ 故障/ 的/ 差异/ ,/ 经/ 故障/ 修复/ 策略/ 分配/ 后/ 进入/ 到/ k/ 个/ 不同/ 的/ 修复/ 队列/ 中/ ,/ 由/ 故障/ 修复/ 人员/ 进行/ 排除/ ./ 从/ 修复/ 人员/ 的/ 角度/ 来看/ ,/ 不同/ 类型/ 的/ 故障/ 以/ 各自/ 不同/ 的/ 速率/ 到达/ 和/ 离开/ ,/ 使得/ 整个/ 排队/ 系统/ 的/ 状态/ 处于/ 复杂/ 的/ 动态变化/ 中/ ,/ 其/ 随机性/ 较大/ ,/ 应用/ 马尔可夫/ 等/ 解析/ 求解/ 方法/ 显然/ 不/ 适合/ ./ 为此/ ,/ 所/ 开发/ 出/ 的/ 仿真/ 程序实现/ 了/ HMSQM/ 的/ 工作/ 过程/ ,/ 由/ ALLOCATING/ ,/ DETECTING/ 和/ CORRECTING/ 三/ 部分/ 组成/ ./ ALLOCATING/ 完成/ 为/ 故障/ 分配/ 测试/ 资源/ 的/ 任务/ ,/ 这里/ 的/ 测试/ 资源/ 主要/ 是/ 指/ 排错/ 人员/ ;/ 仿真/ 的/ 关键/ 是/ DETECTING/ 和/ CORRECTING/ ,/ 二者/ 分别/ 实现/ 故障/ 的/ 检测/ 和/ 修复/ ,/ 其中/ 检测/ 与/ 修复/ 成功/ 的/ 判断/ 由/ 前面/ 所述/ 白盒/ 仿真/ 中/ 的/ 转移/ 概率法/ 来/ 实现/ ./ 即用/ rate/ (/ t/ )/ 表示/ 率/ 函数/ ,/ 对应/ 前面/ 介绍/ 的/ λ/ (/ n/ ,/ t/ )/ ,/ 通过/ 判断/ 其/ 与/ (/ 0/ ,/ 1/ )/ 之间/ 动态/ 产生/ 的/ 随机数/ x/ 的/ 大小/ 关系/ 来/ 完成/ :/ 在/ 微小/ 的/ 时间/ 间隔/ dt/ 内/ ,/ 若/ x/ </ rate/ (/ t/ )/ dt/ ,/ 则/ 可以/ 认为/ 所/ 关注/ 的/ 事件/ (/ 故障/ 被/ 检测/ 到/ 或/ 被/ 修复/ )/ 发生/ ./ 显然/ ,/ 需要/ 根据/ 实际/ 的/ 仿真/ 对象/ 设定/ 合适/ 的/ 故障/ 检测/ 率/ 函数/ 和/ 修复/ 率/ 函数/ ./ HMSQM/ 及其/ 仿真/ 程序/ 的/ 不足/ 是/ 假设/ 过于/ 苛刻/ ,/ 与/ 实际/ 差距/ 较大/ :/ 例如/ ,/ (/ 1/ )/ 认为/ 集成/ 测试/ 过程/ 仅/ 有/ 故障/ 检测/ 与/ 修复/ 环节/ ;/ (/ 2/ )/ 故障/ 严重/ 程度/ 均/ 一致/ ;/ (/ 3/ )/ 缺乏/ 对/ 不/ 完美/ 排错/ [/ 47/ ]/ 的/ 考虑/ ./ 集成/ 测试/ 中/ 的/ 随机因素/ 较/ 多/ ,/ 因此/ 测试/ 过程/ 中/ 存在/ 多个/ 随机/ 子/ 过程/ ,/ 如何/ 类似/ 于/ 仿真/ 故障/ 检测/ 与/ 修复过程/ 来/ 仿真/ 测试/ 中/ 的/ 随机/ 现象/ ,/ 使得/ 仿真/ 更加/ 靠近/ 实际/ ,/ 是/ 可靠性/ 过程/ 仿真/ 未来/ 研究/ 的/ 一个/ 重要/ 方向/ ./ 另外/ ,/ 现有/ 研究/ 均/ 是/ 假定/ 构件/ 间/ 的/ 失效率/ 独立/ 不/ 相关/ ,/ 或者/ 所有/ 构件/ 采用/ 同一/ 常量/ 失效率/ ,/ 这些/ 都/ 为/ 可靠性/ 过程/ 仿真/ 带来/ 了/ 不确定性/ ./ 8.5/ 仿真/ 方法/ 的/ 优势/ 与/ 不足/ 综上/ ,/ 在/ 研究/ 方法/ 上/ ,/ 除/ 解析/ 方法/ 外/ ,/ 非/ 参量/ 方法/ 中/ 的/ 仿真/ 方法/ 正在/ 受到/ 越来越/ 多/ 的/ 重视/ [/ 29/ ]/ ,/ 由/ 各类/ 解析/ 方法/ 过渡/ 到/ 仿真/ 方法/ 是/ 可靠性/ 分析/ 发展/ 进程/ 中/ 的/ 重要/ 转变/ ./ 仿真技术/ 的/ 优点/ 在于/ ,/ 其/ 能够/ 放宽/ 传统/ 解析/ 模型/ 与/ 方法/ 中/ 很多/ 假设/ ,/ 不/ 受/ 时间/ 的/ 限制/ ,/ 可/ 对/ 构件/ 软件/ 内部结构/ 的/ 交互/ 运行/ 等/ 进行/ 定性/ 的/ 仿真/ ,/ 不仅/ 可以/ 应用/ 在/ 测试阶段/ 也/ 可/ 适用/ 于/ 操作/ 运行/ 阶段/ 的/ 可靠性/ 分析/ ./ 但/ 同时/ 也/ 必须/ 看到/ ,/ 仿真/ 的/ 不足/ 是/ 由于/ 软件/ 失效/ 的/ 随机性/ ,/ 仿真/ 方法/ 只能/ 给出/ 一种/ 整体/ 上/ 测试/ 过程/ 的/ 趋势/ 预测/ ,/ 无法/ 对/ 真实/ 失效/ 的/ 发生/ 时间/ 给出/ 精准度/ 量/ ,/ 因此/ 在/ 研究/ 中要/ 对此/ 有/ 明确/ 的/ 认识/ ,/ 并/ 使/ 仿真/ 研究/ 尽量/ 靠近/ 实际/ ./ 9/ 基于/ PCM/ 的/ 可靠性/ 过程/ 在/ 目前/ 研究/ 中/ ,/ 构件/ 软件可靠性/ 度量/ 的/ 解析/ 方法/ 主要/ 基于/ 马尔可夫/ 模型/ ,/ 且/ 传统/ 研究/ 包括/ 仿真/ 中/ 的/ 一个/ 基本/ 假设/ 是/ ,/ 测试/ 过程/ 中/ 软件/ 保持/ 不变/ [/ 87/ ]/ ./ 整个/ 应用/ 的/ 动态/ 结构/ 取决于/ 系统/ 被/ 如何/ 使用/ ,/ 即/ 操作/ 剖面/ ,/ 其/ 可以/ 通过/ 执行程序/ 或/ 在/ 开发/ 的/ 早期/ 阶段/ 通过/ 仿真/ 其/ 执行/ 来/ 获得/ ./ 因此/ ,/ 基于/ 动态/ 结构/ 的/ 可靠性/ 分析/ 需要/ 考虑/ 应用/ 的/ 使用/ 特征/ ./ 近年来/ ,/ 采用/ PCM/ [/ 23/ ,/ 48/ ]/ 进行/ 构件/ 软件/ 的/ 建模/ 与/ 描述/ ,/ 并/ 把/ 可靠性/ 作为/ 软件应用/ 的/ 一个/ 重要/ 服务质量/ QoS/ 进行/ 分析/ 与/ 预测/ 成为/ 热点/ ./ 9.1/ PCM/ 基本/ 介绍/ PCM/ 是/ 专门/ 针对/ 基于/ 体系结构/ 的/ 构件/ 软件/ 这一/ 特定/ 领域/ 的/ 性能/ 预测/ 的/ 一种/ 建模语言/ ,/ 可/ 提供/ 模型/ 驱动/ 的/ 工具/ 链/ 用以/ 分析/ 处于/ 设计阶段/ 的/ 构件/ 软件/ 质量/ 属性/ ./ 目前/ PCM/ 已/ 发展/ 成为/ 成熟/ 的/ 不仅/ 适用/ 于/ 构件/ 软件/ 也/ 涵盖/ 面向/ 服务/ 的/ 软件系统/ ,/ 并/ 用以/ 预测/ 其非/ 功能属性/ 的/ 建模语言/ 和/ 开发/ 环境/ ./ 相比/ 于/ 其他/ 建模语言/ (/ 例如/ UML/ )/ ,/ PCM/ 将/ 与/ 构件/ 软件/ 相关/ 的/ 人员/ 以/ 角色/ 的/ 身份/ 融入/ 系统/ 的/ 体系结构/ 建模/ 中/ ,/ 从/ 这些/ 角色/ 的/ 视角/ 给出/ 了/ 其/ 对系统/ 的/ 参与/ 贡献/ 与/ 相互间/ 的/ 配合/ ./ 其/ 快速/ 发展/ 不仅/ 得益于/ 其/ 出色/ 的/ 建模/ 能力/ ,/ 同时/ 基于/ 其/ 成熟/ 的/ 工具集/ 支持/ 使得/ 相关/ 人员/ 可以/ 方便/ 地/ 创建/ 、/ 分析/ PCM/ 案例/ [/ 49/ ]/ ,/ 例如/ :/ (/ 1/ )/ 基于/ EclipseRichClientPlatform/ (/ RCP/ )/ 平台/ ①/ 和/ EclipseModelingFramework/ (/ EMF/ )/ ②/ ,/ ①/ ②/ Page20PCM/ 工具集/ 提供/ 了/ 图形化/ 的/ 编辑/ 环境/ 用以/ 创建/ 模型/ 实例/ 、/ 集成/ 的/ 性能/ 预测/ 和/ 自动/ 模型/ 转换/ 等/ ;/ (/ 2/ )/ 性能/ 预测/ 的/ 结果/ 被/ 可视化/ 为/ 直方图/ 或/ 使用/ 图表/ 库/ JFreeChart/ ①/ 的/ 累积/ 分布/ 函数/ 来/ 进行/ 表示/ ;/ (/ 3/ )/ 默认/ 的/ PCM/ 仿真器/ SimuCom/ ;/ (/ 4/ )/ 此外/ ,/ 统计/ 检验/ 中/ 为了/ 验证/ 性能/ 预测/ 结果/ 可以/ 调用/ 统计/ 工具集/ R/ ②/ 中/ 的/ 接口/ ./ 9.2/ 基于/ PCM/ 的/ 构件/ 软件可靠性/ 预测/ 在/ 系统/ 开发阶段/ ,/ 应用/ 基于/ 体系结构/ 的/ 可靠性/ 预测/ (/ 例如/ 第/ 4/ 与/ 6/ 节/ 所述/ )/ 在/ 适用性/ 与/ 准确性/ 上/ 会/ 遭受/ 到/ 如下/ 问题/ :/ (/ 1/ )/ 由于/ 准确/ 的/ 使用/ 剖面/ OP/ (/ 包括/ 转移/ 概率/ pij/ )/ 很难/ 获得/ ,/ 现有/ 很多/ 方法/ 没有/ 明确/ 的/ 建模/ 系统/ 使用/ 剖面/ OP/ 对/ 可靠性/ 的/ 影响/ ;/ (/ 2/ )/ 很多/ 方法/ 缺少/ 对系统/ 执行/ 环境/ 和/ 所/ 需/ 资源/ 对/ 执行/ 中/ 可靠性/ 的/ 影响/ 分析/ ;/ (/ 3/ )/ 大部分/ 方法/ 使用/ 某种/ 马尔可夫/ 模型/ (/ DTMC/ // CTMC/ )/ 来/ 建模/ 体系结构/ 和/ 执行/ 可靠性/ 预测/ ,/ 事实上/ ,/ 马尔可夫/ 中/ 的/ 标记/ 与/ 标准/ 软件工程/ 中/ (/ UML/ ,/ SysML/ )/ 的/ 概念/ 与/ 标记/ 并/ 不/ 一致/ ./ 针对/ 这些/ 问题/ 和/ 不足/ ,/ Brosch/ 等/ 人/ [/ 23/ ]/ 基于/ PCM/ 提出/ 基于/ 体系结构/ 的/ 可靠性/ 预测/ 方法/ ,/ 其/ 提供/ 了/ 类似/ 于/ UML/ 的/ 建模/ 标记/ ,/ 并/ 开发/ 了/ 自动/ 转换/ 工具/ 实现/ 将/ PCM/ 转换/ 为/ 马尔可夫/ 链/ ,/ 进而/ 进行/ 可靠性/ 评价/ ./ 9.2/ ./ 1/ 基于/ PCM/ 进行/ 可靠性/ 建模/ PCM/ 可/ 被/ 划分/ 为/ 4/ 个/ 独立/ 的/ 部分/ ,/ 且/ 用/ 开发者/ 角色/ 来/ 描述/ 系统/ 的/ 所有/ 参与者/ ,/ 每个/ 角色/ 对应/ 一个/ 模型/ ,/ 4/ 个/ 互补/ 的/ 模型/ 提供/ 了/ 整个/ 构件/ 软件应用/ 的/ 架构/ 视角/ 和/ 性能/ 相关/ 的/ 行为/ 描述/ [/ 50/ ]/ ,/ 如表/ 6/ 所示/ ./ 在/ 表/ 6/ 的/ 基础/ 上/ ,/ 为/ 进行/ 可靠性/ 建模/ ,/ 应/ 在/ 基图/ 10/ 基于/ PCM/ 的/ 构件/ 软件可靠性/ 过程/ 角色/ 角色/ 对应/ 的/ 模型/ 构件/ 开发者/ 服务/ 行为/ 模型/ 软件架构/ 师/ 架构/ 模型/ 系统/ 部署/ 者/ 部署/ 模型/ 领域专家/ 使用/ 模型/ 于/ PCM/ 的/ 构件/ 软件结构/ 模型/ 的/ 基础/ 上/ 进行/ 如下/ 的/ 扩展/ 添加/ :/ (/ 1/ )/ 构件/ 间/ 的/ 交互/ 被/ 抽象/ 为/ 内部/ 动作/ ,/ 这样/ 在/ 基于/ PCM/ 的/ 构件/ 软件体系结构/ 中为/ 每个/ 内部/ 动作/ 分配/ 一个/ 失效/ 概率/ fp/ ,/ 用以/ 表示/ 某/ 服务/ 执行/ 中/ 失效/ 的/ 可能/ 情况/ ;/ (/ 2/ )/ 通信/ 连接/ 失效/ clf/ 用以/ 表示/ 构件/ 软件应用/ 中/ 消息/ 传输/ 过程/ 中/ 的/ 失效/ 概率/ ;/ (/ 3/ )/ 硬件资源/ 的/ 不可/ 用/ 也/ 会/ 引起/ 一个/ 服务/ 执行/ 的/ 失效/ ,/ 该/ 失效/ 常用/ MTTF/ 和/ MTTR/ 来/ 表示/ ./ 这样/ 将/ fp/ ,/ clf/ 和/ MTTF/ // MTTR/ 扩展/ 进/ 基于/ PCM/ 的/ 构件/ 软件/ 中/ ,/ 就/ 实现/ 了/ 用/ PCM/ 进行/ 构件/ 软件/ 的/ 可靠性/ 建模/ 表示/ ./ 显然/ ,/ 这种/ 表示/ 相对/ 于/ 传统/ 的/ DTMC/ 表示/ 更能/ 从/ 包括/ 系统/ 角色/ 、/ 角色/ 对应/ 的/ 模型/ 、/ 构件/ 部署/ 、/ 系统/ 架构/ 、/ 资源分配/ 以及/ 失效/ 概率/ 等/ 在内/ ,/ 来/ 系统化/ 完整/ 地/ 描述/ 一个/ 构件/ 软件应用/ ./ 考虑/ 系统/ 的/ 一个/ 使用/ 场景/ 执行/ 的/ 情况/ ,/ 则/ 在/ 给定/ PCM/ 实例/ 下/ ,/ 其/ 成功/ 执行/ 的/ 概率/ PSE/ 可/ 表示/ 为/ PSE/ =/ 1/ -/ POFOD/ ,/ 其中/ POFOD/ 表示/ 按/ 需/ 失效/ 概率/ ./ 9.2/ ./ 2/ 基于/ PCM/ 进行/ 可靠性/ 预测/ 图/ 10/ 给出/ 了/ 基于/ PCM/ 的/ 构件/ 软件可靠性/ 过/ ①/ ②/ Page21/ 程/ ,/ 可以/ 看出/ 系统/ 的/ 4/ 个/ 角色/ 都/ 参与/ 到/ 其中/ ,/ 与/ 以往/ 单纯/ 的/ 可靠性/ 分析模型/ 有/ 很大/ 不同/ ./ 图中/ 虚/ 线框/ 部分/ ①/ 给出/ 了/ PCM/ 建模/ 过程/ ,/ 由/ PCM/ 建模/ 工具/ 在/ 集成化/ 环境/ 下/ 完成/ ;/ ②/ 描述/ 了/ 可靠性/ 的/ 预测/ 过程/ ,/ 即当/ PCM/ 实例/ 在/ 设定/ 某/ 使用/ 场景/ 后/ ,/ 从/ 第/ 5/ 步/ 开始/ 到/ 第/ 9/ 步/ 结束/ ,/ 可靠性/ 预测/ 过程/ 被/ 逐步/ 实施/ ./ (/ 1/ )/ 求解/ 参数/ 依赖/ 关系/ 参数/ 依赖/ 用以/ 表示/ 输入/ 参数值/ 对/ 系统控制/ 和/ 数据流/ 的/ 影响/ ./ 具体来讲/ ,/ 需要/ 确定/ 程序/ 变量/ 在/ 分支/ 等/ 处/ 的/ 转移/ 概率/ ./ (/ 2/ )/ 确定/ 物理/ 系统/ 状态/ 概率/ 设/ 资源/ 集合/ 为/ R/ =/ {/ r1/ ,/ r2/ ,/ …/ ,/ rn/ }/ ,/ 每个/ 资源/ ri/ 有/ 两种/ 可能/ 的/ 状态/ ,/ 即/ OK/ 和/ NA/ ,/ 则/ ri/ 的/ 稳态/ 可用性/ 值/ Av/ 可/ 表示/ 为/ Av/ (/ ri/ )/ =/ MTTFi/ // (/ MTTFi/ +/ MTTRi/ )/ ./ 令/ s/ (/ ri/ ,/ t/ )/ 表示/ t/ 时刻/ ri/ 的/ 状态/ ,/ 则/ 可得/ P/ (/ s/ (/ ri/ ,/ t/ )/ =/ OK/ )/ =/ Av/ (/ ri/ )/ ;/ P/ (/ s/ (/ ri/ ,/ t/ )/ =/ NA/ )/ =/ 1/ -/ Av/ (/ ri/ )/ ./ 设/ S/ 为/ 系统/ 状态/ 的/ 集合/ ,/ 即/ S/ =/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ }/ ,/ 则/ 对于/ 某/ 状态/ sj/ ∈/ S/ 可/ 表示/ 为/ t/ 时刻/ 所有/ 资源/ 的/ 状态/ 的/ 联合/ ,/ 即/ sj/ =/ (/ sj/ (/ r1/ ,/ t/ )/ ,/ sj/ (/ r2/ ,/ t/ )/ ,/ …/ ,/ sj/ (/ rn/ ,/ t/ )/ )/ ∈/ {/ OK/ ,/ NA/ }/ n/ ./ 最终/ ,/ 可得/ t/ 时刻/ 系统/ 处于/ sj/ 状态/ 的/ 概率/ P/ (/ sj/ ,/ t/ )/ 可/ 表示/ 为/ / j/ ∈/ {/ 1/ ,/ …/ ,/ m/ }/ :/ P/ (/ sj/ ,/ t/ )/ =/ ∏/ n/ (/ 3/ )/ 生成/ 与/ 评估/ 马尔可夫/ 模型/ PCM/ 高度/ 依赖于/ 模型/ 驱动/ 的/ 软件开发/ 技术/ ,/ 现有/ 研究/ 中/ 为了/ 进行/ QoS/ 预测/ 均/ 是/ 将/ PCM/ 的/ 设计/ 模型/ 转换/ 为/ 某种/ 解析/ 模型/ (/ 例如/ ,/ 随机/ 规则/ 表达式/ 、/ 队列/ 网络/ 模型/ 、/ 马尔可夫/ 模型/ 等/ )/ [/ 49/ ]/ 或/ 仿真/ 系统/ [/ 50/ ]/ ./ ①/ 每个/ 状态/ 下/ DTMC/ 生成/ 与/ 评估/ ./ 对于/ 使用/ 场景/ 中/ 的/ 每个/ 行为/ B/ 可/ 被/ 分解/ 为/ 一系列/ 的/ 动作/ 集合/ ,/ 即/ B/ =/ {/ A1/ ,/ A2/ ,/ …/ ,/ An/ }/ ./ 采用/ PCM/ 工具/ 集中/ 的/ 工具/ 或/ 手工/ 可/ 将/ B/ 转换/ 为/ DTMC/ ,/ 所/ 得到/ 的/ DTMC/ 是/ 吸收/ 的/ 和/ 非/ 循环/ 的/ ./ 则/ B/ 的/ 失效/ 概率/ fp/ (/ B/ )/ 可/ 表示/ 为/ fp/ (/ B/ )/ =/ ∏/ n/ 能/ 的/ 动作/ 的/ 失效/ 概率/ ./ 则/ 物理/ 系统/ 状态/ sj/ 时/ ,/ 某/ 使用/ 场景/ 的/ 成功/ 运行/ 概率/ PSE/ 可/ 表示/ 为/ PSE/ (/ sj/ )/ =/ 1/ -/ fp/ (/ B/ )/ ./ 显然/ 对于/ 整个/ 系统/ 状态/ S/ =/ {/ s1/ ,/ s2/ ,/ …/ ,/ sm/ }/ ,/ 都/ 可以/ 计算/ 出/ 每个/ 状态/ 的/ PSE/ (/ sj/ )/ ./ ②/ 结果/ 聚集/ ./ 最终/ ,/ 可以/ 得到/ 整个/ 系统/ ,/ 即/ 构件/ 软件应用/ 成功/ 执行/ 的/ 概率/ PSE/ 如式/ (/ 13/ )/ 所示/ :/ 其中/ P/ (/ sj/ ,/ t/ )/ 表示/ 系统/ 处于/ 状态/ sj/ 时/ 的/ 概率/ ,/ 如式/ (/ 12/ )/ 所示/ ./ 可以/ 看出/ ,/ 整个/ 可靠性/ 预测/ 过程/ 与/ 前面/ 的/ 基于/ 马尔可夫/ 类/ 的/ 解析/ 方法/ 或/ 仿真/ 有/ 很大/ 的/ 不同/ ,/ 最/ 明显/ 的/ 是/ 其/ 在/ PCM/ 实现/ 基于/ 体系结构/ 的/ 可靠性/ 性能/ 建模/ 基础/ 上来/ 实施/ 可靠性/ 预测/ ,/ 整个/ 过程/ 显示/ 出/ 标准/ 软件工程/ 的/ 显著/ 特征/ ./ 9.3/ 讨论/ 综上/ ,/ PCM/ 的/ 出现/ 丰富/ 了/ 可靠性/ 过程/ 研究/ 方法/ ,/ 是/ 对/ 传统/ 方法/ 的/ 极大/ 突破/ ./ 这/ 可/ 被/ 解释/ 为/ :/ 基于/ PCM/ 的/ 构件/ 软件可靠性/ 预测/ 不仅/ 能够/ 兼顾/ 到/ 运行/ 时/ 可变/ 的/ 特性/ ,/ 而且/ 将/ 更/ 多/ 的/ 用户/ 及其/ 视角/ 特征/ 融入/ 到/ 可靠性/ 预测/ 中/ ,/ 是/ 对/ 传统/ 基于/ 马尔可夫/ 模型/ 与/ 转移/ 概率/ 相结合/ 方法/ 的/ 提升/ ,/ 是/ 对/ 包括/ 可靠性/ 在内/ 的/ QoS/ 建模/ 与/ 预测/ 的/ 新/ 发展/ ./ 我们/ 认为/ 随着/ 各种/ 新/ 开发/ 范型/ 的/ 不断/ 发展/ ,/ 可靠性/ 分析/ 结合/ 这种/ 多/ 角色/ 参与/ 的/ 设计/ 模型/ 是/ 一个/ 重要/ 方向/ ,/ 因为/ 作为/ 一种/ 重要/ 的/ 质量/ 属性/ ,/ 可靠性/ 研究/ 需要/ 适应/ 软件开发/ 和/ 设计/ 的/ 循序/ 变迁/ ./ 目前/ ,/ 基于/ PCM/ 的/ 可靠性/ 分析/ 是/ 一个/ 新/ 尝试/ ,/ 有效/ 的/ 研究/ 还/ 未/ 深入/ 展开/ ,/ 还/ 需要/ 进一步/ 深入研究/ 和/ 更/ 多/ 的/ 运行/ 实例/ 去/ 验证/ ./ 10/ 研究/ 趋势/ 分析/ 与/ 未来/ 工作/ 综合/ 上述/ 讨论/ ,/ 结合/ 现有/ 的/ 研究成果/ ,/ 我们/ 认为/ ,/ 构件/ 软件可靠性/ 过程/ 研究/ 已/ 在/ 可靠性/ 研究/ (/ 偏向/ 容错/ 领域/ )/ 与/ 软件工程/ 研究/ (/ 软件工程/ 领域/ )/ 中/ 有效/ 展开/ ;/ 除/ 前文/ 每节/ 中/ 已/ 明确指出/ 研究/ 中/ 存在/ 的/ 问题/ 外/ ,/ 另一方面/ ,/ 下述/ 有关/ 构件/ 软件可靠性/ 过程/ 研究/ 趋势/ 值得/ 研究/ 人员/ 去/ 关注/ 和/ 探索/ ./ 这些/ 研究/ 问题/ 趋势/ 与/ 研究/ 环境/ 、/ 研究/ 对象/ 和/ 研究/ 方法/ 紧密/ 相关/ ,/ 而且/ 更多地/ 正在/ 突破/ 现有/ 的/ 技术/ 思路/ ./ 10.1/ 复杂/ 不/ 完美/ 环境/ 下/ 结合/ 非/ 参量/ 求解/ 方法/ (/ 1/ )/ 复杂/ 的/ 测试/ 与/ 运行/ 环境/ 下/ 可靠性/ 过程/ 研究/ 实际/ 的/ 软件/ 运行/ 环境/ 是/ 较为/ 复杂/ 的/ ,/ 以/ 测试/ 环节/ 为例/ ,/ 在/ 单一/ 软件/ 的/ 研究/ 中/ ,/ 这/ 被/ 称之为/ 不/ 完美/ 排错/ 环境/ [/ 11/ ,/ 47/ ,/ 90/ ]/ ,/ 相比之下/ ,/ 构件/ 软件/ 的/ 测试/ 包括/ 单元测试/ 、/ 集成/ 测试/ 和/ 系统/ 测试/ ,/ 测试/ 的/ 环境/ 更为/ 复杂/ ,/ 所/ 面临/ 的/ 随机性/ 的/ 不/ 完美/ 因素/ 更/ 多/ ,/ 因此/ 研究/ 中/ 考虑/ 更/ 多/ 的/ 构件/ 软件/ 实际/ 的/ 运行/ 特征/ 到/ 研究/ 中/ ,/ 是/ 不断/ 扩展/ 构件/ 软件可靠性/ 研究/ 准确性/ 的/ 累积/ 趋势/ ./ 例如/ ,/ ①/ 增量/ 式/ 集成/ 测试/ 过程/ 中/ 每个/ 构件/ 参与/ 集成/ 测试/ 的/ 起始/ 时间/ 点/ ti/ 不尽相同/ ,/ 在/ 这种/ 情况/ 下/ ,/ 除了/ 对/ 构件/ 软件应用/ 的/ 体系结构/ 模型/ 进行/ 分析/ 求解/ 外/ ,/ 还/ 需要/ 加入/ 起始/ 时间/ 点来/ 对/ 构件/ 使用/ 情况/ 进行/ 建模/ ;/ Page22/ ②/ 现有/ 研究/ 中/ [/ 8/ ,/ 14/ -/ 16/ ,/ 41/ ,/ 38/ -/ 39/ ]/ ,/ 无论/ 测试阶段/ 还是/ (/ 操作/ )/ 运行/ 阶段/ ,/ 均/ 认为/ 转移/ 概率/ pij/ 表示/ 构件/ 间/ 执行/ 控制/ 的/ 转移/ (/ 交换/ )/ ,/ 可以/ 表示/ 为/ 操作/ 剖面/ OP/ 的/ 函数/ :/ pi/ ,/ j/ =/ f/ (/ OP/ )/ ./ 实际上/ ,/ 转移/ 概率/ 并/ 不能/ 完全/ 等价/ 于/ 操作/ 剖面/ ,/ 还/ 与/ 执行/ 时间/ 等/ 因素/ 有关/ ./ 通常/ 控制流/ 图/ 被/ 作为/ 描述/ 软件/ 内部结构/ 的/ 有效/ 方法/ ,/ 在/ 测试/ 过程/ 中其/ 可/ 遍历/ 构件/ 间/ 的/ 执行/ 路径/ ,/ 但/ 当/ 构件/ 规模/ 增大/ 时/ ,/ 问题/ 过于/ 复杂/ ./ 近来/ ,/ 基于/ 简化/ 的/ 控制流/ 图/ ,/ Mohamed/ 等/ 人/ [/ 91/ ]/ 提出/ 了/ 连接/ 依赖图/ 作为/ 构件/ 间/ 和/ 构件/ 内/ 的/ 控制流/ 转移/ 的/ 依据/ ,/ 但/ 还/ 需要/ 更/ 多/ 的/ 实例/ 验证/ ;/ ③/ 实际上/ 对于/ 整个/ 应用/ 的/ 失效/ 往往/ 由/ 系统/ 中/ 的/ 关键/ 错误/ 引起/ ,/ 对/ 其/ 产生/ 、/ 传播/ 与/ 演变/ 的/ 动态/ 机理/ 在/ 当前/ 研究/ 中/ 还/ 较为/ 薄弱/ ,/ 文献/ [/ 49/ ]/ 中/ 的/ 方法/ 尚需/ 全面/ 而且/ 真实/ 的/ 实验/ 来/ 验证/ ./ (/ 2/ )/ 可靠性/ 求解/ 需向/ 非/ 参量/ 求解/ 方法/ 过渡/ 从/ 第/ 4/ 与/ 第/ 6/ 大节/ 所述/ 中/ 采取/ 的/ 可靠性/ 求解/ 方法/ 可以/ 看出/ ,/ 基于/ 转移/ 概率/ 与/ 各种/ 马尔可夫/ 模型/ 的/ 求解/ 方法/ ,/ 当/ 构件/ 个数/ 与/ 系统/ 状态/ 急速/ 上升/ 以及/ 研究/ 环境/ 考虑/ 随机因素/ 增多/ 时/ ,/ 其/ 数学/ 研究/ 变得/ 异常/ 复杂/ [/ 92/ ]/ ./ 因此/ 寻找/ 非/ 参量/ 求解/ 方法/ 已/ 成为/ 一个/ 重要/ 的/ 替代/ ,/ 例如/ 人工神经网络/ 、/ 随机/ Petri/ // Reward/ 网/ [/ 93/ ]/ 、/ 数据挖掘/ 和/ 支持/ 向量/ 机/ [/ 94/ ]/ 、/ 贝叶斯/ 方法/ [/ 95/ ]/ 、/ 启发式/ 算法/ (/ 例如/ 遗传算法/ )/ 等/ 非线性/ 方法/ ./ 这些/ 非线性/ 方法/ 本质/ 上/ 可/ 被/ 归属/ 到/ 机器/ 学习/ 范畴/ ,/ 其/ 在/ 针对/ 单一/ 软件/ 的/ SRGM/ 的/ 分析/ 中/ 已/ 得到/ 应用/ ,/ 但/ 在/ 构件/ 软件可靠性/ 研究/ 中/ 还/ 较为/ 少见/ ,/ 我们/ 认为/ 随着/ 解析/ 方法/ (/ 参量/ 方法/ )/ 的/ 局限性/ 进一步/ 暴露/ ,/ 这些/ 方法/ 可以/ 成为/ 较/ 好/ 的/ 替代/ 尝试/ ./ (/ 3/ )/ 缺少/ 描述/ 构件/ 软件可靠性/ 增长/ 的/ 有效/ 模型/ 整个/ 构件/ 软件/ 的/ 可靠性/ 依赖于/ 每个/ 构件/ 的/ 可靠性/ 和/ 该/ 应用/ 的/ 体系结构/ [/ 33/ ,/ 35/ ]/ ./ 不同/ 构件/ 由于/ 其/ 复杂性/ 以及/ 在/ 整个/ 构件/ 软件/ 中/ 重要性/ 的/ 不同/ ,/ 其/ 可靠性/ 增长/ 并不相同/ ./ 差别/ 建模/ 这些/ 不同/ 类型/ 构件/ 的/ 可靠性/ 应该/ 被/ 充分考虑/ 进来/ ./ 除了/ MAPATHNHPP/ 方法/ ,/ 至今/ 尚未/ 有/ 进一步/ 的/ 明确/ 的/ 解决/ 方法/ 被/ 提出/ ./ 虽然/ SRGM/ 在/ 黑盒/ 可靠性/ 分析/ 中/ 应用/ 在/ 单一/ 的/ 软件/ 上/ 研究成果/ 丰硕/ ,/ 但/ 在/ 构件/ 软件/ 领域/ 还/ 未/ 有效/ 展开/ ./ (/ 4/ )/ 扩展/ 构件/ 软件体系结构/ 使/ 其/ 适用/ 于/ 多种/ 仿真/ 从/ 体系结构/ 角度/ 来看/ ,/ 构件/ 软件/ 可以/ 被/ 看做/ 树形/ 网络结构/ ,/ 甚至/ 是/ 一种/ 分布式/ 结构/ ./ 这样/ ,/ 除了/ 现有/ 的/ DES/ 、/ PCM/ 仿真/ 环境/ // 工具/ 外/ ,/ 用/ 蒙特卡洛/ 仿真/ 对/ 其/ 不/ 确定/ 进行/ 模拟/ ,/ 基于/ 网络/ 的/ 仿真/ ,/ 复杂/ 系统/ 建模/ 与/ 仿真/ ,/ 以及/ 分布式/ 仿真/ 优化/ 技术/ 就/ 可以/ 被/ 拓展/ 进/ 构件/ 软件可靠性/ 过程/ 研究/ 中/ ,/ 这为/ 各类/ 仿真技术/ 与/ 可靠性/ 研究/ 的/ 结合/ 带来/ 新/ 的/ 机遇/ 和/ 挑战/ ./ 10.2/ 容错/ 体系结构/ 与/ 硬件/ 系统/ 构件/ 化/ (/ 1/ )/ 容错/ 配置/ 下/ 可靠性/ 过程/ 程序/ 测试/ 过程/ 中/ ,/ 80/ %/ 的/ 故障/ ,/ 很/ 可能/ 来自/ 20/ %/ 的/ 构件/ [/ 96/ ]/ ,/ 为/ 关键/ 构件/ 进行/ 容错/ 配置/ 成为/ 一种/ 可靠性/ 增强/ 选择/ ./ 关键/ 构件/ 及其/ 容错/ 构件/ 可以/ 看成/ 整个/ 构件/ 软件应用/ 中/ 的/ 一个/ 复合/ 构件/ ,/ 与/ 系统/ 中/ 其他/ 构件之间/ 进行/ 交互/ 可/ 提高/ 可靠性/ ./ 因此/ ,/ 考虑/ 容错/ 构件/ 以及/ 容错/ 配置/ 下/ 构件/ 软件应用/ 的/ 体系结构/ 模型/ 并/ 进行/ 可靠性/ 研究/ 应/ 被/ 有效/ 展开/ ./ 目前/ 仅/ 有/ Pham/ 等/ 人/ [/ 97/ ]/ 基于/ 容错/ 的/ 思想/ 进行/ 构件/ 软件/ 的/ 可靠性/ 预测/ 见诸/ 报道/ ./ (/ 2/ )/ 基于/ 硬件/ (/ 设施/ )/ 物理/ 系统/ 抽象/ 的/ 可靠性/ 由于/ 构件/ 定义/ 的/ 外延/ 较/ 宽/ ,/ 容易/ 得知/ ,/ 若/ 将/ 实际/ 运行/ 中/ 的/ 物理/ 硬件/ 系统/ 的/ 组成部分/ 从/ 体系结构/ 的/ 视角/ 进行/ 抽象/ ,/ 可以/ 得到/ 构件/ 化/ 的/ 组成/ ,/ 进一步/ 地/ 可用/ 构件/ 软件可靠性/ 过程/ 思维/ 进行/ 可靠性/ 研究/ ./ 例如/ ,/ 文献/ [/ 98/ ]/ 对/ 一个/ 微/ 引擎/ 系统/ 各/ 部分/ 摩擦/ 面/ 的/ 磨损/ 过程/ 进行/ 建模/ 抽象/ 为/ 构件/ 软件/ ,/ 把/ 构件/ 的/ 降级/ 失效/ 过程/ 描述/ 为/ 线性/ (/ Xi/ =/ φ/ i/ +/ θ/ it/ )/ 、/ 凹形/ 或/ 凸形/ 函数/ 来/ 表示/ ./ 就/ 目前/ ,/ 可/ 搜集/ 到/ 的/ 文献/ 来看/ ,/ 该/ 方面/ 研究/ 尚未/ 有效/ 展开/ ./ 10.3/ 集成化/ 的/ 可靠性/ 建模/ 表示/ 与/ 分析/ (/ 1/ )/ 可靠性/ 建模/ 表示/ 从/ 第/ 4/ 节对/ 目前/ 已经/ 提出/ 的/ 关于/ 建模/ 的/ 介绍/ 可以/ 看出/ 在/ 下述/ 3/ 个/ 方面/ 存在/ 的/ 问题/ 需要/ 解决/ :/ ①/ 基于/ 体系结构/ 的/ 建模/ 技术/ ,/ 尚/ 不能/ 系统化/ 和/ 集成化/ 地/ 对/ 构件/ Ci/ 、/ 构件/ 间接口/ Iij/ 和/ 体系结构/ 进行/ 准确/ 建模/ ;/ ②/ 各种类型/ 的/ 马尔可夫/ 模型/ 是/ 目前/ 描述/ 体系结构/ 的/ 主要/ 手段/ ,/ 存在/ 着/ “/ 状态/ 空间/ 爆炸/ ”/ 的/ 问题/ 倾向/ ,/ 我们/ 认为/ 基于/ 图/ 理论/ [/ 99/ ]/ 的/ 描述/ 可以/ 作为/ 尝试/ 选择/ ;/ ③/ 另外/ ,/ 建模/ 应/ 把/ 构件/ 执行/ 时间/ 、/ 接口/ 失效/ 等/ 因素/ 考虑/ 进去/ ./ (/ 2/ )/ 模型/ 驱动/ 与/ 面向/ 服务/ 的/ 集成化/ 可靠性/ 分析/ 从/ 第/ 9/ 节/ 关于/ PCM/ 支持/ 下/ 可靠性/ 分析/ 中/ 可以/ 看到/ ,/ 应用/ 标准/ 软件工程/ 中/ 的/ 模型/ 驱动/ 与/ 面向/ 服务/ 的/ 可靠性/ 分析/ 可以/ 使得/ 研究/ 变得/ 系统化/ 与/ 高效/ ,/ 且/ 容易/ 扩展/ ,/ 例如/ 文献/ [/ 48/ ,/ 100/ ]/ 所/ 开发/ 的/ KlaperSuite/ 集成/ 平台/ ./ 但/ 这/ 其中/ 有/ 两点/ 是/ 现有/ 可靠性/ 研究/ 人员/ 面临/ 的/ 挑战/ :/ ①/ 基于/ PCM/ 的/ 构件/ 软件可靠性/ 分析/ 给/ 传统/ 仅/ 针对/ 可靠性/ 分析/ 的/ 研究/ 人员/ 带来/ 了/ 一定/ 的/ 困难/ ./ 这是/ 由于/ 以往/ 研究/ 中/ 与/ 软件工程/ 相结合/ 得/ 并/ 不/ 紧密/ ,/ 尤其/ 是/ 模型/ 驱动/ 的/ 和/ 面向/ 服务/ 的/ 开发技术/ ,/ Page23/ 研究/ 人员/ 只/ 需/ 采用/ 某种/ 解析/ 或/ 仿真/ 的/ 方法/ 就/ 可以/ 展开/ 工作/ ,/ PCM/ 的/ 出现/ 为/ 研究/ 可靠性/ 的/ 研究者/ 提出/ 了/ 一个/ 新/ 尝试/ 和/ 新/ 挑战/ ;/ ②/ 现有/ PCM/ 主要/ 用于/ 设计阶段/ ,/ 能否/ 像/ 很多/ 构件/ 软件可靠性/ 度量/ 与/ 评估/ 方法/ 适用/ 于/ 运行/ 阶段/ 是/ 对/ PCM/ 提出/ 的/ 一个/ 挑战/ ./ 10.4/ 开源/ 软件/ 与/ 新/ 计算环境/ 下/ 可靠性/ 过程/ (/ 1/ )/ 开源/ 构件/ 软件可靠性/ 过程/ 开源/ 构件/ 软件可靠性/ 研究/ 已/ 得到/ 关注/ [/ 101/ -/ 102/ ]/ ,/ 基于/ 公开/ 的/ 源码/ 属性/ 度量/ 工具/ ①/ ②/ ③/ 可/ 对/ 开源/ 软件/ 的/ 静态/ 可靠性/ 进行/ 度量/ ./ 此外/ ,/ 结合/ 其/ 开源/ 特点/ 在/ 运行/ 时/ 的/ 可靠性/ 分析/ 中/ 进行/ 有效/ 动态/ 度量/ 是/ 评价/ 开源/ 软件/ QoS/ 的/ 一个/ 重要/ 方面/ ./ 例如/ ,/ 文献/ [/ 103/ ]/ 对/ 开源/ 构件/ 进行/ 了/ 可信/ 评估/ ,/ 使得/ 软件系统/ 集成/ 者/ 能够/ 快速/ 对/ 构件/ 可信性/ 进行/ 度量/ ./ (/ 2/ )/ 新/ 计算环境/ 下/ 可靠性/ 过程/ 新/ 计算环境/ 下/ 的/ 研究/ 包括/ 云/ 计算环境/ 下/ 以及/ 移动/ 互联网络/ 环境/ 下/ 可靠性/ 过程/ 研究/ ./ 同时/ 网构/ 软件系统/ [/ 104/ ]/ 中/ 软件应用/ 和/ 硬件资源/ 进行/ 类似/ 构件/ // 模块化/ 的/ 部署/ ,/ 进而/ 从/ 更为/ 抽象/ 的/ 观点/ 进行/ 构件/ 化/ 的/ 建模/ 与/ 可靠性/ 分析/ 等/ 研究/ 也/ 值得/ 关注/ ./ 尤其/ 是/ 大规模/ (/ 分布式/ )/ 网络/ 环境/ 下/ ,/ 网构/ 软件/ 可以/ 动态/ 部署/ ,/ 具有/ 可变/ 结构/ ,/ 其/ 动态/ 可靠性/ 应/ 得到/ 关注/ ./ 此外/ ,/ 还/ 包括/ 嵌入式/ 系统/ 下/ 构件/ 软件可靠性/ 研究/ 等/ ./ 11/ 结束语/ 通过/ 本文/ 的/ 系统/ 述评/ ,/ 可以/ 看出/ ,/ 从/ 研究/ 对象/ 的/ 不断/ 靠近/ 实际/ 构件/ 软件/ 内部结构/ 特征/ ,/ 从/ 采用/ 的/ 技术/ 方法/ 不断/ 缩小/ 假设/ 范围/ ,/ 从/ 偏向/ 容错/ 领域/ 的/ 可靠性/ 到/ 软件工程/ 中/ 的/ QoS/ ,/ 对/ 构件/ 软件/ 的/ 可靠性/ 内容/ 与/ 方法/ 上/ 的/ 研究/ 正/ 变得/ 日益/ 丰富/ ./ 另一方面/ ,/ 由于/ 实际/ 开发/ 、/ 测试/ 与/ 运行/ 环境/ 的/ 随机性/ 与/ 多样性/ ,/ 可靠性/ 研究/ 也/ 正在/ 由/ 以往/ 偏向/ “/ 完美/ ”/ 向/ “/ 不/ 完美/ ”/ 过渡/ ,/ 因为/ 真实/ 的/ 环境/ 即/ 是/ “/ 不/ 完美/ 的/ ”/ ./ 本文/ 对/ 构件/ 软件可靠性/ 过程/ 领域/ 的/ 研究/ 问题/ 、/ 技术/ 思路/ 和/ 成果/ 进展/ ,/ 以及/ 未来/ 趋势/ 进行/ 了/ 系统化/ 的/ 归纳/ 总结/ ,/ 希望/ 帮助/ 研究/ 人员/ 促进/ 该/ 领域/ 的/ 研究/ 工作/ 进一步/ 向前/ 发展/ 提供/ 支持/ 参考/ ./ 致谢/ 这里/ ,/ 我们/ 向/ 在/ 本文/ 写作/ 与/ 修改/ 过程/ 中/ 给予/ 无私/ 支持/ 和/ 提供/ 宝贵/ 建议/ 的/ 同行/ 表示/ 真诚/ 感谢/ ./ 特别感谢/ 审稿人/ 和/ 李刚/ 老师/ ,/ 他们/ 提出/ 的/ 宝贵意见/ 和/ 建议/ 对/ 提高/ 本文/ 的/ 整体/ 水平/ 有/ 很大/ 帮助/ !/ 

