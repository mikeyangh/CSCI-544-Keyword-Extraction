Page1/ 基于/ 变更/ 传播/ 仿真/ 的/ 软件/ 稳定性/ 分析/ 张莉/ 钱/ 冠群/ 李琳/ (/ 北京航空航天大学/ 软件工程/ 研究所/ 北京/ 100191/ )/ 摘要/ 软件/ 自身/ 的/ 复杂性/ 和/ 未来/ 变更/ 需求/ 的/ 不确定性/ 使得/ 软件/ 的/ 稳定性/ 评估/ 十分困难/ ./ 文中/ 将/ 软件/ 的/ 变更/ 需求/ 看成/ 一系列/ “/ 原子/ 变更/ 需求/ ”/ 的/ 叠加/ ,/ 把/ “/ 原子/ 变更/ 需求/ ”/ 的/ 响应/ 过程/ 抽象/ 成/ 初始/ 变更/ 节点/ 的/ 随机/ 选择/ 过程/ 以及/ 由此/ 引起/ 的/ 涟漪/ 效应/ ,/ 提出/ 了/ 基于/ 变更/ 传播/ 仿真/ 的/ 稳定性/ 评估/ 方法/ SEMCIS/ ,/ 定义/ 了/ 变更/ 的/ 传播/ 模型/ 和/ 评价/ 指标/ ,/ 并且/ 给出/ 了/ 一种/ 基于/ 变更/ 传播/ 仿真/ 的/ 指标/ 计算方法/ ./ 实验/ 结果表明/ ,/ 降低/ 传播/ 概率/ 、/ 改善/ 软件/ 的/ 体系结构/ 设计/ 可以/ 有效/ 地/ 抵御/ “/ 涟漪/ 效应/ ”/ 的/ 发生/ ,/ 提高/ 软件/ 的/ 稳定性/ ./ 入度/ Hub/ 的/ 相互连接/ 是/ 造成/ 大/ 范围/ 变更/ 的/ 主要/ 原因/ ,/ 而/ 入度/ Hub/ 中/ 存在/ 的/ 大量/ 后继/ 节点/ ,/ 则/ 是/ 造成/ 大/ 范围/ 变更/ 频繁/ 发生/ 的/ 主要/ 原因/ ./ 关键词/ 软件/ 稳定性/ ;/ 变更/ 分析/ ;/ 涟漪/ 效应/ ;/ 软件维护/ ;/ 复杂/ 网络/ 1/ 引言/ 随着/ 用户/ 需求/ 和/ 系统/ 运行/ 环境/ 的/ 不断/ 变化/ ,/ 软/ Page2/ 接/ 相关/ 的/ 其它/ 实体/ ,/ 从而/ 引发/ 一系列/ 修改/ ./ 这种/ 现象/ 被/ 称为/ “/ 涟漪/ 效应/ ”/ (/ rippleeffect/ )/ [/ 1/ ]/ ./ 为了/ 确定/ 软件/ 的/ 局部/ 变更/ 对系统/ 其它/ 部分/ 的/ 潜在/ 影响/ ,/ 研究/ 人员/ 提出/ 了/ 一系列/ 变更/ 影响/ 分析/ (/ changeimpactanalysis/ )/ 方法/ ,/ 也/ 称为/ 影响/ 分析方法/ [/ 2/ ]/ ./ 希望/ 借此/ 为/ 软件/ 的/ 变更/ 规划/ 、/ 变更/ 决策/ 以及/ 变更/ 预测/ 提供/ 支持/ ./ 随着/ 软件体系结构/ 研究/ 的/ 深入/ ,/ 人们/ 逐渐/ 意识/ 到/ :/ 软件结构/ 是/ 决定/ 软件/ 质量/ 的/ 重要/ 因素/ ./ 提出/ 用/ 稳定性/ (/ stability/ )/ 来/ 描述/ 软件/ 对/ 变更/ 过程/ 中/ 潜在/ “/ 涟漪/ 效应/ ”/ 的/ 抵抗能力/ [/ 3/ ]/ ./ 通过/ 总结/ 以往/ 的/ 软件工程/ 实践经验/ ,/ 研究/ 人员/ 还/ 提出/ 了/ 一系列/ 设计/ 原则/ 和/ 设计/ 方法/ ,/ 例如/ 高/ 内聚/ 低/ 耦合/ 原则/ 、/ 开放/ 封闭/ 原则/ 、/ 软件体系结构/ 模式/ 、/ 设计模式/ 等等/ ./ 目的/ 就是/ 希望/ 通过/ 复用/ 专家/ 的/ 设计/ 经验/ ,/ 提高/ 软件/ 对/ 变更/ 的/ 适应能力/ ./ 合理/ 运用/ 这些/ 原则/ 和/ 方法/ 设计/ 并/ 开发/ 的/ 软件系统/ ,/ 往往/ 具有/ 良好/ 的/ 可维护性/ ./ 但是/ 这些/ 方法/ 主要/ 侧重/ 定性分析/ ,/ 没有/ 给出/ 定量/ 的/ 度量/ 指标/ 和/ 评价/ 方法/ ./ 本文/ 基于/ 软件/ 的/ 静态/ 结构/ ,/ 提出/ 了/ 一种/ 基于/ 变更/ 传播/ 仿真/ 的/ 稳定性/ 评价/ 方法/ SEMCIS/ (/ StabilityEvaluationMethodBasedonChangeImpactSimula/ -/ tion/ )/ ./ 针对/ 变更/ 需求/ 的/ 多样性/ 和/ 粒度/ 差异/ ,/ SEMCIS/ 方法/ 定义/ 了/ “/ 原子/ 变更/ 需求/ ”/ ,/ 将/ 软件/ 的/ 变更/ 需求/ 看作/ 是/ 一系列/ “/ 原子/ 变更/ 需求/ ”/ 的/ 叠加/ ,/ 提出/ 用/ 软件/ 在/ 响应/ “/ 原子/ 变更/ 需求/ ”/ 时/ 修改/ 的/ 实体/ 数量/ 的/ 期望值/ 来/ 评价/ 软件/ 的/ 稳定性/ ./ 并且/ 将/ 仿真/ 方法/ 引入/ 到/ 度量/ 指标/ 的/ 计算/ 中/ ,/ 克服/ 了/ 使用/ 概率论/ 方法/ 计算/ 度量/ 指标/ 时/ ,/ 处理/ 循环/ 依赖/ 比较/ 繁琐/ 的/ 缺陷/ ./ 在/ 此基础/ 上/ ,/ 本文/ 以/ 开源/ 软件/ JEdit/ ①/ 为例/ ,/ 分析/ 了/ 影响/ 软件/ 稳定性/ 的/ 关键因素/ ./ 在/ 验证/ SEMCIS/ 方法/ 有效性/ 的/ 同时/ ,/ 总结/ 出/ “/ 传播/ 概率/ ”/ 和/ 软件结构/ 对/ 软件/ 稳定性/ 的/ 影响/ 以及/ 造成/ 大规模/ 变更/ 的/ 结构/ 因素/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 研究/ ;/ 第/ 3/ 节/ 介绍/ 基于/ 变更/ 传播/ 仿真/ 的/ 稳定性/ 评价/ 方法/ ,/ 包括/ 变更/ 传播/ 模型/ 、/ 度量/ 指标/ 和/ 基于/ 仿真/ 的/ 度量/ 方法/ ;/ 第/ 4/ 节/ 介绍/ 后续/ 实证/ 分析/ 的/ 数据/ 来源/ 和/ 参数设置/ ;/ 第/ 5/ 节/ 结合/ 开源/ 软件/ 实例/ ,/ 分析/ 评价/ 指标/ 在/ 仿真/ 计算/ 过程/ 中/ 的/ 收敛性/ ;/ 第/ 6/ 、/ 7/ 节/ 分别/ 讨论/ 传播/ 概率/ 、/ 软件结构/ 对/ 软件/ 稳定性/ 度量/ 指标/ 的/ 影响/ ;/ 最后/ 在/ 第/ 8/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 相关/ 研究/ Tsantalis/ 等/ 人/ 使用/ 概率论/ 方法/ 评估/ 面向对象/ 系统/ 的/ 适应性/ [/ 4/ -/ 5/ ]/ ./ 将/ 软件/ 变更/ 细/ 分成/ 内部/ 变化/ 和/ 外部/ 变化/ ./ 内部/ 变化/ 只/ 修改/ 类/ 本身/ ,/ 但/ 不/ 影响/ 其它/ 类/ ;/ 而/ 外部/ 变化/ 表示/ 在/ 修改/ 类/ 的/ 同时/ ,/ 要/ 影响/ 其它/ 类/ ./ 在/ 给定/ 内部/ 变化/ 概率/ 和/ 外部/ 变化/ 概率/ 的/ 前提/ 下/ ,/ Tsantalis/ 等/ 人/ 提出/ 用/ 联合/ 概率/ 来/ 计算/ 每个/ 类/ 发生变化/ 的/ 概率/ ./ 在/ 此基础/ 上/ ,/ Sharafat/ 等/ 人/ [/ 6/ ]/ 根据/ 软件结构/ 和/ 演化/ 历史/ ,/ 进一步/ 提出/ 了/ 内部/ 变化/ 概率/ 和/ 外部/ 变化/ 概率/ 的/ 计算方法/ ,/ 并/ 对/ 预测/ 结果/ 进行/ 了/ 分析/ ./ Mirarab/ 等/ 人/ [/ 7/ ]/ 则/ 提出/ ,/ 根据/ 软件/ 的/ 静态/ 依赖/ 关系/ 和/ 历史/ 维护/ 信息/ ,/ 用/ 贝叶斯/ 网来/ 构造/ 软件/ 的/ 变化/ 传播/ 模型/ ./ 但是/ ,/ 软件/ 的/ 静态/ 结构/ 中/ 普遍存在/ 着/ 双向/ 依赖/ 和/ 循环/ 依赖/ [/ 8/ -/ 9/ ]/ ,/ 基于/ 贝叶斯/ 网/ 的/ 变更/ 传播/ 模型/ 无法/ 表达/ 软件/ 实体/ 间/ 的/ 循环/ 依赖/ 关系/ ./ 同时/ ,/ 循环/ 依赖/ 也/ 给/ 上述/ 方法/ 的/ 度量/ 指标/ 计算/ 带来/ 了/ 困难/ ./ 假设/ 我们/ 要/ 度量/ 软件/ 中/ 每个/ 类/ 发生/ 变更/ 的/ 概率/ ,/ 而类/ A/ 和/ 类/ B/ 之间/ 存在/ 循环/ 依赖/ ,/ 想要/ 知道/ 类/ A/ 的/ 变更/ 概率/ ,/ 必须/ 首先/ 计算/ 类/ B/ 的/ 变更/ 概率/ ,/ 反之亦然/ ./ 为了/ 解决/ 这个/ 问题/ ,/ 人们/ 或者/ 采用/ 破环/ 操作/ ,/ 通过/ 删除/ 若干条/ 边来/ 消除/ 模型/ 中/ 的/ 循环/ 依赖/ ;/ 或者/ 采用/ 近似/ 的/ 方法/ ,/ 计算/ 度量/ 指标/ [/ 5/ -/ 6/ ]/ ./ 这些/ 方法/ 在/ 一定/ 程度/ 上/ 破坏/ 了/ 原有/ 的/ 传播/ 模型/ ,/ 影响/ 了/ 稳定性/ 指标/ 的/ 计算结果/ ./ 在/ 本文/ 提出/ 的/ SEMCIS/ 方法/ 中/ ,/ 我们/ 忽略/ 实体/ 内部/ 的/ 实现/ 细节/ ,/ 只/ 考虑/ 实体/ 之间/ 外部/ 变化/ 的/ 传播/ 关系/ ,/ 并且/ 将/ 仿真技术/ 引入/ 到/ 度量/ 指标/ 的/ 计算/ 中/ ,/ 在/ 模拟/ 变更/ 传播/ 过程/ 的/ 基础/ 上/ ,/ 通过/ 统计/ 得到/ 软件/ 的/ 稳定性/ 度量/ 值/ ./ Hassan/ 等/ 人/ [/ 10/ ]/ 则/ 提出/ 用/ 启发式/ 算法/ 来/ 预测/ 变更/ 的/ 传播/ ,/ 借此/ 指导/ 开发人员/ 进行/ 软件/ 的/ 变更/ 维护/ ./ Zimmermann/ 等/ 人/ [/ 11/ ]/ 运用/ 数据挖掘/ 方法/ 研究/ 了/ 演化过程/ 中/ 软件/ 实体/ 之间/ 的/ 协同/ 变更/ 关系/ ./ 利用/ 该/ 方法/ 可以/ 给出/ 某个/ 实体/ 发生/ 变更/ 时/ ,/ 需要/ 协同/ 变更/ 的/ 候选/ 实体/ ./ 这些/ 研究/ 关注/ 的/ 是/ 软件/ 中/ 实体/ 之间/ 的/ 协同/ 变更/ 关系/ ,/ 本文/ 主要/ 讨论/ 软件/ 整体/ 的/ 稳定性/ 度量/ 问题/ ./ Liu/ [/ 12/ ]/ 等/ 人/ 则/ 提出/ 用/ 传播/ 代价/ 来/ 衡量/ 软件结构/ 的/ 传播/ 特性/ ./ 所谓/ 传播/ 代价/ ,/ 就/ 是从/ 软件/ 的/ 任意/ 实体/ 出发/ ,/ 所有/ 可/ 达/ 实体/ 占/ 软件/ 总体/ 比例/ 的/ 期望值/ ./ 这/ 和/ 本文/ 的/ 工作/ 非常/ 相似/ ./ 所/ 不同/ 的/ 是/ ,/ 在/ Liu/ 等/ 提出/ 的/ 传播/ 模型/ 中/ ,/ 变更/ 的/ 传播/ 方向/ 与/ 依赖/ 关系/ 的/ 方向/ 一致/ ,/ 并且/ 只/ 考虑/ 传播/ 的/ 步长/ ,/ 没有/ 涉及/ 到/ 传播/ 的/ 不确定性/ 问题/ ./ 本文/ 在/ 传播/ 模型/ 、/ 稳定性/ 度量/ 方法/ 上/ 与/ Liu/ 等/ 人/ 的/ 工作/ 存在/ 较大/ 的/ 差异/ ./ ①/ JEdit/ ./ http/ :/ // // www/ ./ jedit/ ./ org/ // Page33SEMCIS/ 方法/ 在/ 软件/ 的/ 整个/ 生命周期/ 中/ ,/ 可能/ 遇到/ 各种各样/ 的/ 变更/ 需求/ ,/ 例如/ 追加/ 功能/ 、/ 修改/ Bug/ 、/ 迁移/ 平台/ 、/ 升级/ 第三方/ 运行库/ 等等/ ./ 变更/ 需求/ 的/ 不确定性/ 以及/ 类型/ 、/ 粒度/ 和/ 内容/ 的/ 差异/ ,/ 给/ 软件/ 的/ 稳定性/ 度量/ 带来/ 了/ 极大/ 的/ 困难/ ./ 对于/ 小/ 粒度/ 的/ “/ 原子/ 变更/ 需求/ ”/ ,/ 需要/ 修改/ 的/ 软件/ 实体/ 一般/ 彼此/ 关联/ ,/ 而且/ 局限/ 在/ 一个/ 有限/ 的/ 范围/ 之内/ ./ 而/ 不同/ 粒度/ 、/ 不同/ 类型/ 、/ 不同/ 内容/ 的/ “/ 变更/ 需求/ ”/ 可以/ 看作/ 是/ 一系列/ “/ 原子/ 变更/ 需求/ ”/ 的/ 叠加/ ./ 如果/ 我们/ 把/ 软件/ 中/ 的/ 实体/ 作为/ 节点/ ,/ 它们/ 之间/ 的/ 依赖/ 关系/ 看成/ 边/ ,/ 软件/ 就/ 被/ 抽象/ 成/ 一个/ 网络/ ./ 软件/ 变更/ 中/ 的/ “/ 涟漪/ 效应/ ”/ 就/ 可以/ 看成/ 是/ 变更/ 在/ 网络/ 节点/ 间/ 的/ 传播/ 过程/ ./ 而/ “/ 原子/ 变更/ 需求/ ”/ 对应/ 的/ 响应/ 过程/ 可以/ 看作/ 是/ :/ “/ 初始/ 变更/ 节点/ ”/ vinit/ 发生/ 改动/ 以及/ 由于/ 修改/ vinit/ 而/ 引发/ 的/ 涟漪/ 效应/ ./ 这种/ 节点/ 间/ 的/ 涟漪/ 效应/ 存在/ 不确定性/ ,/ 也就是说/ ,/ 节点/ vi/ 发生/ 变更/ 时/ ,/ 和/ 它/ 相邻/ 的/ 节点/ vj/ 是否/ 需要/ 修改/ 是/ 不/ 确定/ 的/ ,/ 本文/ 用/ “/ 传播/ 概率/ ”/ 进行/ 刻画/ ./ 这种/ 给定/ 节点/ 间/ “/ 传播/ 概率/ ”/ 的/ 软件/ 网络/ 模型/ ,/ 我们/ 把/ 它/ 叫做/ 软件/ 的/ “/ 变更/ 传播/ 模型/ ”/ ./ 对于/ 一个/ 具体/ 的/ 软件/ 来说/ ,/ 未来/ 可能/ 发生/ 的/ “/ 原子/ 变更/ 需求/ ”/ 也/ 是/ 不/ 确定/ 的/ ./ 对应/ 到/ 软件/ 网络/ 中/ ,/ 就是/ “/ 初始/ 变更/ 节点/ ”/ vinit/ 的/ 随机/ 选择/ 过程/ ./ 通过/ 度量/ 软件/ 网络/ 在/ 响应/ 不同/ “/ 原子/ 变更/ 需求/ ”/ 时/ ,/ 需要/ 修改/ 的/ 节点/ 数/ 的/ 期望值/ ,/ 就/ 可以/ 在/ 一定/ 程度/ 上/ 刻画/ 软件/ 网络/ 的/ 变更/ 传播/ 特性/ ,/ 即/ 稳定性/ ./ 这里/ ,/ 我们/ 首先/ 给出/ “/ 原子/ 变更/ ”/ 、/ “/ 原子/ 变更/ 需求/ ”/ 、/ “/ 初始/ 变更/ 节点/ ”/ 、/ “/ 传播/ 概率/ ”/ 的/ 形式化/ 定义/ ./ 定义/ 1/ ./ 在/ 软件/ 的/ 一次/ 变更/ 中/ ,/ 所有/ 被/ 修改/ 的/ 软件/ 实体/ 以及/ 它们/ 之间/ 的/ 依赖/ 关系/ 构成/ 一个/ 有/ 向/ 简单/ 图/ G/ =/ (/ V/ ,/ E/ )/ ,/ 其中/ ,/ V/ 称为/ “/ 变更/ 节点/ 集/ ”/ ,/ V/ 中/ 的/ 每个/ 节点/ vi/ 表示/ 一个/ 变更/ 的/ 软件/ 实体/ ,/ E/ 是/ 边/ 的/ 图/ 1/ 评估/ 流程/ 示意图/ 以下/ 分/ 小节/ 详细/ 阐述/ SEMCIS/ 方法/ 中/ 的/ 变更/ 传播/ 模型/ 、/ 评价/ 指标/ 和/ 变更/ 传播/ 的/ 仿真/ 算法/ ./ 3.1/ 变更/ 传播/ 模型/ 定义/ 3/ ./ 软件/ 的/ 变更/ 传播/ 模型表示/ 为/ 一个/ 带/ 集合/ ,/ E/ 中/ 的/ 每个/ 元素/ 〈/ vi/ ,/ vj/ 〉/ 是/ 一个/ 有序/ 对/ ,/ 当且/ 仅/ 当/ vi/ 使用/ 了/ vj/ 提供/ 的/ 服务/ 时/ ,/ 〈/ vi/ ,/ vj/ 〉/ ∈/ E/ ./ 如果/ 存在/ 一个/ 节点/ vinit/ ,/ G/ 中/ 的/ 其它/ 节点/ 到/ vinit/ 可达/ ,/ 我们/ 把/ 这样/ 的/ 变更/ 称为/ “/ 原子/ 变更/ ”/ ,/ 它/ 所/ 对应/ 的/ 需求/ 叫做/ “/ 原子/ 变更/ 需求/ ”/ ,/ 节点/ vinit/ 叫做/ “/ 初始/ 变更/ 节点/ ”/ ./ 定义/ 2/ ./ 在/ 软件/ 的/ 一次/ 变更/ 中/ ,/ 由于/ 节点/ vj/ 发生/ 变更/ ,/ 使得/ 直接/ 依赖/ vj/ 的/ 相邻/ 节点/ vi/ 发生/ 变更/ 的/ 条件/ 概率/ ,/ 称为/ 节点/ vj/ 相对/ vi/ 的/ “/ 传播/ 概率/ ”/ ,/ 记作/ pji/ ./ 从/ 定义/ 2/ 中/ 可以/ 看出/ ,/ 传播/ 概率/ 的/ 取值/ 满足/ 0/ / pji/ / 1/ ./ 在/ 真实/ 的/ 软件/ 中/ ,/ 实体/ 之间/ 的/ 传播/ 概率/ 需要/ 分析/ 大量/ 的/ 维护/ 历史数据/ 之后/ 才能/ 给出/ ./ 在/ 缺少/ 历史数据/ 的/ 情况/ 下/ ,/ 例如/ 在/ 软件设计/ 的/ 评估/ 阶段/ ,/ 传播/ 概率/ 的/ 取值/ 可以/ 通过/ 专家/ 的/ 经验/ 进行/ 设置/ ./ 根据/ 软件/ 的/ 变更/ 传播/ 模型/ 计算/ 稳定性/ 度量/ 指标/ 的/ 另/ 一个/ 问题/ 是/ ,/ 由于/ 软件/ 网络/ 中/ 存在/ 大量/ 的/ 有/ 向/ 环/ [/ 8/ -/ 9/ ]/ ,/ 经典/ 的/ 概率论/ 方法/ 无法/ 直接/ 计算/ 出/ 变更/ 节点/ 数/ 的/ 期望值/ ./ 为此/ ,/ 以往/ 的/ 研究/ 都/ 是/ 先/ 设法/ 消除/ 网络/ 中/ 的/ 环型/ 结构/ [/ 5/ -/ 6/ ]/ ./ 但是/ ,/ 这种/ 破环/ 操作/ 在/ 一定/ 程度/ 上/ 破坏/ 了/ 原有/ 的/ 传播/ 模型/ ,/ 影响/ 了/ 稳定性/ 指标/ 的/ 计算结果/ ./ 为了/ 解决/ 度量/ 指标/ 的/ 计算/ 问题/ ,/ 本文/ 采用/ 仿真技术/ 来/ 模拟/ “/ 原子/ 变更/ ”/ 过程/ ./ 在/ 此基础/ 上/ ,/ 通过/ 统计/ 多次/ 仿真/ 中/ 变更/ 节点/ 数/ 的/ 平均值/ 给出/ 软件/ 的/ 稳定性/ 度量/ 值/ ./ 本文/ 提出/ 的/ 基于/ 变更/ 传播/ 仿真/ 的/ 稳定性/ 评价/ 方法/ SEMCIS/ 如图/ 1/ 所示/ ,/ SEMCIS/ 的/ 评估/ 流程/ 分为/ 3/ 步/ :/ (/ 1/ )/ 根据/ 软件/ 的/ 体系结构/ 设计/ 、/ 详细/ 设计/ 或者/ 源代码/ 等/ ,/ 生成/ 软件/ 的/ 变更/ 传播/ 模型/ ;/ (/ 2/ )/ 仿真/ 软件/ 的/ 变更/ 传播/ 过程/ ,/ 并/ 记录/ 仿真/ 过/ (/ 3/ )/ 统计/ 仿真/ 数据/ ,/ 给出/ 软件/ 稳定性/ 评价/ 指标/ 程中/ 的/ 变更/ 节点/ 数/ ;/ 的/ 度量/ 值/ ./ 权有/ 向/ 简单/ 图/ Gw/ =/ (/ V/ ,/ E/ )/ ./ 其中/ ,/ V/ 表示/ 节点/ 的/ 集合/ ,/ V/ 中/ 的/ 每个/ 节点/ vi/ 表示/ 软件/ 中/ 的/ 一个/ 实体/ ;/ E/ 是/ 边/ 的/ 集合/ ,/ E/ 中/ 的/ 每个/ 元素/ 〈/ vi/ ,/ vj/ 〉/ 是/ 一个/ 有序/ 对/ ,/ 当且/ 仅/ 当/ vi/ 使用/ 了/ vj/ 提供/ 的/ 服务/ 时/ ,/ 〈/ vi/ ,/ vj/ 〉/ ∈/ E/ ./ 有/ Page4/ 向边/ 〈/ vi/ ,/ vj/ 〉/ 上/ 的/ 权重/ 表示/ 为/ 节点/ vj/ 相对/ vi/ 的/ 传播/ 概率/ pji/ ./ 图/ 2/ 给出/ 了/ 一段/ Java/ 源代码/ 和/ 它/ 的/ 变更/ 传播/ 模型/ ./ 其中/ ,/ v1/ ~/ v4/ 表示/ Java/ 代码/ 中/ 的/ 4/ 个类/ ,/ 有/ 向/ 边上/ 的/ 权重/ 表示/ 变更/ 传播/ 概率/ ./ 例如/ ,/ 有/ 向/ 边/ 〈/ v4/ ,/ v2/ 〉/ 上/ 的/ p24/ 就/ 表示/ v2/ 发生/ 变更/ 时/ ,/ v4/ 发生/ 变更/ 的/ 概率/ ./ 3.2/ 评价/ 指标/ 定义/ 4/ ./ 变更/ 节点/ 数/ 表示/ 为/ NOCN/ 表示/ 为了/ 响应/ 某次/ 变更/ 需求/ ,/ 最终/ 修改/ 的/ 节点/ 总数/ ,/ ψ/ 表示/ 在/ 响应/ 变更/ 时/ 实际/ 修改/ 的/ 节点/ 集合/ ./ |/ Ω/ |/ 表示/ 集合/ Ω/ 包含/ 的/ 元素/ 个数/ ,/ 下同/ ./ 定义/ 5/ ./ 平均/ 变更/ 节点/ 数/ 表示/ 为/ 其中/ ,/ n/ 表示/ 变更/ 次数/ ./ AvgNOCN/ 刻画/ 的/ 是/ 在/ n/ 次/ 变更/ 中/ ,/ 需要/ 修改/ 的/ 平均/ 节点/ 数/ ./ 定义/ 6/ ./ 变更/ 节点/ 数/ 的/ 标准差/ 表示/ 为/ StdNOCN/ =/ ∑/ nStdNOCN/ 反映/ 的/ 是/ ,/ 多次/ 变更/ 中/ 修改/ 的/ 节点/ 数/ 之间/ 的/ 差异/ 程度/ ./ 定义/ 7/ ./ 最小/ 变更/ 节点/ 数/ 表示/ 为/ MinNOCN/ 表示/ 的/ 是/ ,/ 多次/ 变更/ 中/ 最少/ 需要/ 修/ 定义/ 8/ ./ 最大/ 变更/ 节点/ 数/ 表示/ 为/ MaxNOCN/ 表示/ 的/ 是/ ,/ 多次/ 变更/ 中/ 最/ 多/ 需要/ 修/ 定义/ 9/ ./ 变更/ 节点/ 比率/ 表示/ 为/ 改/ 的/ 节点/ 数/ ./ 它/ 反映/ 了/ 最差/ 的/ 变更/ 状况/ ./ 改/ 的/ 节点/ 数/ ./ 其中/ ,/ |/ V/ |/ 表示/ 节点/ 总数/ ,/ 下同/ ./ NOCN/ 反映/ 的/ 是/ 变更/ 节点/ 数/ 的/ 绝对值/ ,/ 它/ 与/ 软件/ 的/ 规模/ 相关/ ./ POCN/ 反映/ 的/ 则/ 是/ 变更/ 节点/ 数/ 相对/ 整体/ 的/ 比例/ ./ 在/ 对比/ 不同/ 规模/ 软件/ 的/ 稳定性/ 时/ ,/ 基于/ POCN/ 的/ 比例/ 度量/ 更能/ 反映/ 软件/ 的/ 稳定性/ 质量/ ./ 定义/ 10/ ./ 平均/ 变更/ 节点/ 比率/ 表示/ 为/ 定义/ 11/ ./ 平均/ 变更/ 节点/ 比率/ 的/ 标准差/ 为/ StdPOCN/ =/ ∑/ n/ 定义/ 12/ ./ 最小/ 变更/ 节点/ 比率/ 表示/ 为/ 定义/ 13/ ./ 最大/ 变更/ 节点/ 比率/ 表示/ 为/ 3.3/ 基于/ 仿真/ 的/ 评价/ 指标/ 计算方法/ 软件/ 网络/ 的/ 结构/ 研究/ 表明/ ,/ 软件/ 中/ 存在/ 双向/ 边/ 和/ 大量/ 的/ 有/ 向/ 环/ 结构/ [/ 8/ -/ 9/ ]/ ,/ 这/ 使得/ 传统/ 的/ 概率论/ 方法/ 无法/ 根据/ 软件/ 的/ 变更/ 传播/ 模型/ 直接/ 进行/ 评价/ 指标/ 的/ 计算/ ./ 在/ 以往/ 的/ 研究/ 中/ ,/ 人们/ 一般/ 采用/ 破环性/ 操作/ 删除/ 部分/ 有/ 向/ 边/ ,/ 消除/ 模型/ 中/ 的/ 有/ 向/ 回路/ ,/ 再/ 计算/ 度量/ 指标/ ;/ 或者/ 直接/ 采用/ 近似/ 方法/ 来/ 计算/ 评价/ 指标/ [/ 5/ -/ 6/ ]/ ./ 这些/ 方法/ 都/ 在/ 一定/ 程度/ 上/ 破坏/ 了/ 原始/ 的/ 变更/ 传播/ 模型/ ,/ 进而/ 影响/ 了/ 评估/ 和/ 预测/ 的/ 精度/ ./ 为了/ 避免/ 上述/ 缺陷/ ,/ 简化/ 评价/ 指标/ 的/ 计算/ 过程/ ,/ 本文/ 提出/ 一种/ 基于/ 仿真/ 的/ 变更/ 传播/ 算法/ ./ 该/ 算法/ 的/ 核心思想/ 是/ :/ 首先/ ,/ 随机/ 选择/ 一个/ 初始/ 变更/ 节点/ vinit/ ;/ 然后/ ,/ 顺着/ 输入/ 边/ 方向/ ,/ 以/ 边上/ 的/ 传播/ 概率/ 逐个/ 影响/ 相邻/ 的/ 未/ 变更/ 的/ 节点/ ;/ 接着/ ,/ 按照/ 广度/ 优先/ 、/ 逐个/ 波及/ 的/ 原则/ ,/ 从/ 新/ 变更/ 的/ 节点/ 出发/ ,/ 依次/ 迭代/ ,/ 向外/ 传播/ ,/ 以此/ 来/ 模拟/ “/ 原子/ 变更/ ”/ 的/ 执行/ 过程/ ,/ 即/ 对/ “/ 原子/ 变更/ 需求/ ”/ 的/ 响应/ 过程/ ,/ 直到/ 没有/ 新/ 的/ 节点/ 发生/ 变更/ ./ 这时/ ,/ 一次/ 仿真/ 结束/ ./ “/ 原子/ 变更/ ”/ 中/ “/ 变更/ 节点/ 集/ ”/ 到/ 初始/ 变更/ 节点/ 可达/ 的/ 特性/ ,/ 保证/ 了/ 变更/ 传播/ 仿真/ 的/ 可行性/ ./ 此外/ ,/ 需要/ 特别/ 指出/ 的/ 是/ :/ 在/ “/ 原子/ 变更/ ”/ 中/ ,/ 我们/ 假设/ 每个/ 节点/ 最/ 多只/ 需要/ 修改/ 一次/ 就/ 能/ 满足/ “/ 原子/ 变更/ 需求/ ”/ ,/ 也就是说/ ,/ 每个/ 节点/ 最/ 多/ 只能/ 变更/ 一次/ ;/ 而/ 每个/ 未/ 变更/ 节点/ 却/ 可以/ 受到/ 相邻/ 多个/ 新/ 变更/ 节点/ 的/ 影响/ ./ 每次/ 仿真/ 的/ 结果/ 对应/ 一次/ “/ 原子/ 变更/ ”/ ,/ “/ 原子/ 变更/ ”/ 中/ 修改/ 的/ 节点/ 总数/ 记做/ NOCN/ ./ 经过/ 多次/ 仿真/ 后/ ,/ 统计/ 变更/ 节点/ 数/ 的/ 均值/ 、/ 方差/ 、/ 最大值/ 和/ 最小值/ ,/ 就/ 得到/ 该软件/ 的/ 稳定性/ 度量/ 指标/ ./ 当/ 变更/ 传播/ 模型/ 中/ 存在/ 循环/ 依赖/ 时/ ,/ 不妨/ 假设/ 类/ A/ 、/ 类/ B/ 双向/ 依赖/ ,/ 由于/ 引入/ 了/ 广度/ 优先/ 、/ 逐个/ 波/ Page5/ 及/ 的/ 传播/ 准则/ ,/ 在/ 一次/ 仿真/ 中/ ,/ 类/ A/ 和/ 类/ B/ 只能/ 有/ 一个/ 因/ 、/ 一个/ 果/ ,/ 假设/ 类/ A/ 的/ 变更/ 引发/ 类/ B/ 的/ 修改/ ;/ 但/ 在/ 下/ 一次/ 仿真/ 中/ ,/ 由于/ 选择/ 的/ 初始/ 变更/ 节点/ 不同/ 以及/ 变更/ 传播/ 的/ 不确定性/ ,/ 类/ B/ 的/ 变更/ 也/ 可能/ 引发/ 类/ A/ 的/ 修改/ ./ 特别/ 的/ ,/ 当/ 我们/ 选择/ 类/ A/ 为/ 初始/ 变更/ 节点/ 时/ ,/ 类/ B/ 的/ 变更/ 必定/ 是/ 由类/ A/ 引起/ 的/ ;/ 同理/ ,/ 当/ 我们/ 选择/ 类/ B/ 为/ 初始/ 变更/ 节点/ 时/ ,/ 类/ A/ 的/ 变更/ 也/ 必然/ 是/ 类/ B/ 引起/ ./ 由此可见/ ,/ 一方面/ ,/ 软件结构/ 中/ 存在/ 的/ 循环/ 依赖/ 不会/ 影响/ 变更/ 传播/ 的/ 仿真/ ;/ 另一方面/ ,/ 通过/ 多次/ 仿真/ ,/ 我们/ 可以/ 模拟出/ 循环/ 依赖/ 的/ 两个/ 节点/ 在/ 变更/ 时/ 互为因果/ 的/ 现象/ ./ 因此/ ,/ 本文/ 提出/ 的/ 基于/ 仿真/ 的/ 评价/ 指标/ 计算方法/ ,/ 不但/ 保持/ 了/ 传播/ 模型/ 与/ 软件/ 静态/ 结构/ 的/ 一致性/ ,/ 而且/ 简化/ 了/ 度量/ 指标/ 的/ 计算/ 过程/ ./ 以下/ 详细/ 介绍/ 基于/ 仿真/ 的/ 评价/ 指标/ 计算方法/ ./ 设/ 某个/ 软件/ 的/ 变更/ 传播/ 模型/ 为/ Gw/ =/ (/ V/ ,/ E/ )/ ,/ 节点/ vi/ 被选为/ 变更/ 初始/ 节点/ vinit/ 的/ 概率/ 为/ q/ (/ vi/ )/ ./ 那么/ ,/ 模型/ 中/ 所有/ 节点/ 被选为/ vinit/ 的/ 概率/ 必然/ 满足/ 下面/ 的/ 约束条件/ :/ 仿真/ 算法/ 分为/ 以下/ 几个/ 步骤/ :/ 1/ ./ 输入/ 软件/ 的/ 变更/ 传播/ 模型/ Gw/ =/ (/ V/ ,/ E/ )/ 和/ 仿真/ 次数/ N/ ,/ 当前/ 仿真/ 次数/ n/ 设为/ 0/ ;/ 2/ ./ 设置/ 模型/ 中/ 所有/ 节点/ 的/ 变更/ 状态/ 为/ “/ 未/ 变更/ ”/ ;/ 3/ ./ 以/ 概率/ q/ (/ vi/ )/ 随机/ 选择/ 一个/ 节点/ 作为/ 初始/ 变更/ 节点/ vinit/ ,/ 设置/ 节点/ vinit/ 的/ 变更/ 状态/ 为/ “/ 已/ 变更/ ”/ ,/ 并/ 将/ 节点/ vinit/ 加入/ 到/ 变更/ 队列/ ChangedNodeQueue/ 中/ ;/ 4/ ./ 选择/ ChangedNodeQueue/ 中/ 的/ 首/ 节点/ vs/ ,/ 获取/ vs/ 的/ 所有/ 前驱/ 节点/ (/ 即/ 存在/ 指向/ 节点/ vs/ 的/ 边/ 的/ 节点/ )/ 中/ 变更/ 状态/ 为/ “/ 未/ 变更/ ”/ 的/ 节点/ 集合/ ,/ 设为/ R/ ;/ 5/ ./ 对/ 集合/ R/ 中/ 的/ 每个/ 节点/ vt/ ,/ 以/ 传播/ 概率/ pst/ 将/ 其/ 变更/ 状态/ 设置/ 为/ “/ 已/ 变更/ ”/ ;/ 如果/ vt/ 的/ 变更/ 状态/ 从/ “/ 未/ 变更/ ”/ 变成/ 了/ 图/ 3/ 仿真/ 算法/ 示意图/ “/ 已/ 变更/ ”/ ,/ 就/ 将/ vt/ 添加/ 到/ 变更/ 队列/ ChangedNodeQueue/ 尾部/ ;/ 6/ ./ 从/ ChangedNodeQueue/ 中/ 删除/ 首/ 节点/ vs/ ,/ 并且/ 清/ 空集合/ R/ ;/ 7/ ./ 反复/ 执行/ 步/ 4/ ~/ 6/ ,/ 直到/ ChangedNodeQueue/ 为空/ ,/ 记录/ 变更/ 的/ 节点/ 总数/ 为/ NOCNn/ ;/ 8/ ./ 设置/ 当前/ 仿真/ 次数/ n/ =/ n/ +/ 1/ ;/ 若/ n/ </ N/ ,/ 反复/ 执行/ 步/ 2/ ~/ 7/ ,/ 否则/ 仿真/ 停止/ ./ 图/ 3/ 是/ 变更/ 传播/ 仿真/ 算法/ 的/ 一个/ 流程/ 示意/ ,/ 图中/ ○/ 表示/ 节点/ 状态/ 为/ “/ 未/ 变更/ ”/ ,/ ●/ 表示/ “/ 已/ 变更/ ”/ ./ 假设/ 在/ 某次/ 仿真/ 中/ ,/ v1/ 被选为/ 初始/ 变更/ 节点/ vinit/ ,/ (/ a/ )/ v1/ 首先/ 被/ 标记/ 为/ “/ 已/ 变更/ ”/ ,/ 并/ 添加/ 到/ 队列/ ChangedNodeQueue/ 中/ ;/ ChangedNodeQueue/ 首/ 节点/ vs/ =/ v1/ ,/ v1/ 有/ 两条/ 输入/ 边/ ,/ 分别/ 连接/ v2/ 和/ v3/ ,/ 并且/ 这/ 两个/ 节点/ 都/ 是/ 未/ 变更/ ,/ 因此/ R/ =/ {/ v2/ ,/ v3/ }/ ;/ (/ b/ )/ 分别/ 以/ 概率/ p12/ 和/ p13/ 波及/ 节点/ v2/ 和/ v3/ ,/ 假设/ v2/ 被/ 波及/ 、/ v3/ 不受/ 影响/ ,/ 于是/ v2/ 被/ 添加/ 到/ ChangedNodeQueue/ 队列/ 中/ ,/ 并/ 删除/ 队列/ 的/ 首/ 节点/ v1/ ./ 这时/ ,/ ChangedNodeQueue/ 队列/ 中/ 只/ 包含/ 新/ 被/ 修改/ 的/ 节点/ v2/ ;/ (/ c/ )/ ChangedNodeQueue/ 队列/ 首/ 节点/ vs/ =/ v2/ ,/ v2/ 同样/ 有/ 两条/ 输入/ 边/ ,/ 分别/ 连接/ 未/ 变更/ 节点/ v3/ 和/ v4/ ,/ 因此/ R/ =/ {/ v3/ ,/ v4/ }/ ;/ (/ d/ )/ 分别/ 以/ 概率/ p23/ 和/ p24/ 波及/ 节点/ v3/ 和/ v4/ ,/ 假设/ v3/ 被/ 波及/ 、/ v4/ 不受/ 影响/ ,/ 于是/ v3/ 被/ 添加/ 到/ ChangedNodeQueue/ 队列/ 中/ ,/ 并/ 删除/ 队列/ 的/ 首/ 节点/ v2/ ./ 这时/ ,/ ChangedNodeQueue/ 队列/ 中/ 只/ 包含/ 新/ 被/ 修改/ 的/ 节点/ v3/ ;/ (/ e/ )/ ChangedNodeQueue/ 队列/ 首/ 节点/ vs/ =/ v3/ ,/ v3/ 没有/ 输入/ 边/ ,/ 因此/ R/ 为空/ ;/ (/ f/ )/ 由于/ R/ 为空/ ,/ 因此/ 没有/ 波及/ 操作/ ,/ 直接/ 从/ ChangedNodeQueue/ 中/ 删除/ 首/ 节点/ v3/ ,/ 这时/ Page6ChangedNodeQueue/ 也/ 为/ 空/ ,/ 本次/ 仿真/ 结束/ ,/ 变更/ 节点/ 数/ NOCN/ =/ 3/ ,/ POCN/ =/ 0.75/ ./ 在/ 我们/ 的/ 传播/ 算法/ 中/ ,/ 不/ 限制/ 网络/ 中/ 节点/ 进入/ 集合/ R/ 的/ 次数/ ./ 在/ 图/ 3/ 的/ 实例/ 中/ ,/ v3/ 两次/ 进入/ 集合/ R/ ,/ 这/ 与/ 软件维护/ 中/ 的/ 实际/ 情况/ 一致/ ./ 因为/ v3/ 是否/ 变更/ ,/ 取决于/ 所有/ 后继/ 节点/ (/ v1/ 和/ v2/ )/ 对/ 它/ 的/ 影响/ ./ 从/ 前面/ 的/ 仿真/ 实例/ 中/ 可以/ 看出/ ,/ 由于/ 初始/ 变更/ 节点/ 的/ 选择/ 以及/ 变更/ 节点/ 对/ 相邻/ 节点/ 的/ 影响/ 都/ 存在/ 不确定性/ ,/ 因此/ ,/ 多次/ 仿真/ 中/ AvgNOCN/ 、/ StdNOCN/ 等/ 评价/ 指标/ 的/ 度量/ 值/ 也/ 会/ 有所不同/ ./ 但是/ 随着/ 仿真/ 次数/ 的/ 增加/ ,/ 上述/ 评价/ 指标/ 都/ 会/ 逐步/ 收敛/ ,/ 最终/ 保持稳定/ ./ 在/ 本文/ 的/ 第/ 5/ 节/ ,/ 我们/ 将/ 结合/ 软件/ 实例/ ,/ 对/ 仿真/ 过程/ 中/ 度量/ 指标/ 的/ 收敛性/ 进行/ 分析/ ./ 4/ 实验设计/ 为了/ 验证/ SEMCIS/ 方法/ 的/ 有效性/ ,/ 分析/ 传播/ 概率/ 、/ 软件结构/ 对/ 软件/ 稳定性/ 的/ 影响/ ,/ 本文/ 将/ 结合/ 开源/ 软件/ JEdit/ ,/ 进行/ 实证/ 分析/ ./ 在/ 第/ 5/ 节/ ,/ 我们/ 首先/ 考察/ SEMCIS/ 方法/ 中/ ,/ 评价/ 指标/ 的/ 收敛性/ 问题/ ;/ 在/ 第/ 6/ 节/ 、/ 第/ 7/ 节/ ,/ 我们/ 分别/ 考察/ 传播/ 概率/ 以及/ 软件结构/ 对/ 稳定性/ 的/ 影响/ ./ 通过/ 实验/ 结果/ 分析/ ,/ 在/ 验证/ SEMCIS/ 方法/ 的/ 同时/ ,/ 分析/ 和/ 总结/ 影响/ 软件/ 稳定性/ 的/ 因素/ ,/ 特别/ 是/ 造成/ 大规模/ 变更/ 的/ 原因/ ,/ 为/ 软件设计/ 、/ 维护/ 的/ 决策/ 提供/ 支持/ ./ 4.1/ 数据/ 来源/ 本文/ 的/ 实验/ 数据/ 来自/ 开源/ Java/ 软件/ JEdit4/ ./ 2/ 的/ 核心/ 包/ jedit/ ./ jar/ ./ 软件/ 中/ 的/ 每个/ 类/ 对应/ 变更/ 传播/ 模型/ 中/ 的/ 一个/ 节点/ ,/ 类和类/ 之间/ 的/ 继承/ 、/ 组成/ 、/ 关联/ 和/ 依赖/ 关系/ 对应/ 模型/ 中/ 的/ 一条/ 边/ ./ 如果/ 两个/ 类/ 之间/ 存在/ 多种/ 关系/ ,/ 也/ 被/ 看成/ 是/ 一条/ 边/ ./ 本文/ 选取/ 其中/ 的/ 最大/ 弱/ 连通/ 子图/ 进行/ 分析/ ./ 该子/ 图共/ 包括/ 796/ 个/ 节点/ ,/ 3883/ 条边/ ,/ 节点/ 的/ 最大/ 入度/ 是/ 223.4/ ./ 2/ 实验/ 设置/ 在/ 本文/ 提出/ 的/ 软件/ 变更/ 传播/ 模型/ 中/ ,/ 传播/ 概率/ 反映/ 的/ 是/ 软件/ 中/ 相连/ 两个/ 实体/ 之间/ 耦合/ 关系/ 的/ 强图/ 4/ 仿真/ 过程/ 中/ JEdit/ 软件/ 网络/ 的/ 评价/ 指标/ 变化趋势/ 弱/ ,/ 而/ 初始/ 变更/ 节点/ 的/ 选择/ 概率/ 反映/ 的/ 是/ “/ 原子/ 变更/ 需求/ ”/ 的/ 不确定性/ ./ 这些/ 概率/ 可以/ 通过/ 对/ 以往/ 的/ 维护/ 历史/ 进行/ 分析/ 或者/ 专家/ 经验/ 得到/ ./ 在/ JEdit/ 的/ 实证/ 分析/ 中/ ,/ 本文/ 假设/ 相邻/ 两个/ 类/ 之间/ 的/ 传播/ 概率/ 都/ 等于/ 定值/ α/ ,/ 即/ 每个/ 节点/ 被选为/ 变更/ 初始/ 节点/ 的/ 概率/ 服从/ 均匀分布/ ,/ 即/ 5/ 评价/ 指标/ 的/ 收敛性/ 分析/ 在/ 变更/ 传播/ 的/ 仿真/ 算法/ 中/ ,/ 初始/ 变更/ 节点/ 是/ 随机/ 选择/ 的/ ,/ 并且/ 使用/ 传播/ 概率/ 来/ 控制/ 相邻/ 节点/ 间/ 变更/ 传播/ 的/ 可能性/ ./ 因此/ ,/ 在/ 两次/ 仿真/ 中/ ,/ 即使/ α/ 相同/ ,/ AvgNOCN/ 、/ StdNOCN/ 等/ 指标/ 的/ 仿真/ 结果/ 也/ 会/ 有所不同/ ./ 要/ 想/ 运用/ 仿真/ 算法/ 评价/ 软件/ 的/ 变更/ 传播/ 特性/ ,/ 首先/ 需要/ 考察/ 不同/ 传播/ 概率/ α/ 下/ 评价/ 指标/ 的/ 收敛性/ ./ 在/ 本文/ 提出/ 的/ 评价/ 指标/ 中/ ,/ AvgNOCN/ 、/ Std/ -/ NOCN/ 、/ MinNOCN/ 和/ MaxNOCN/ 分别/ 与/ Avg/ -/ POCN/ 、/ StdPOCN/ 、/ MinPOCN/ 和/ MaxPOCN/ 成正比/ ,/ 而/ MinNOCN/ 一般/ 为/ 1/ ./ 所以/ ,/ 在/ 这里/ ,/ 我们/ 只/ 考察/ AvgNOCN/ 、/ StdNOCN/ 和/ MaxNOCN3/ 个/ 评价/ 指标/ 的/ 收敛性/ ./ 实验/ 中/ ,/ 传播/ 概率/ α/ 分别/ 取/ 0.1/ ~/ 1/ (/ 间隔/ 0.1/ )/ ,/ 仿真/ 总/ 次数/ N/ 设为/ 10000/ ./ 图/ 4/ 给出/ 了/ 不同/ 传播/ 概率/ α/ 下/ ,/ 平均/ 变更/ 节点/ 数/ AvgNOCN/ 、/ 变更/ 节点/ 数/ 的/ 标准差/ StdNOCN/ 和/ 最大/ 变更/ 节点/ 数/ MaxNOCN/ 在/ 仿真/ 中/ 的/ 变化趋势/ ./ 其中/ ,/ X/ 轴/ 表示/ 仿真/ 次数/ n/ ,/ Y/ 轴/ 分别/ 表示/ n/ 次/ 仿真/ 后/ 的/ 平均/ 变更/ 节点/ 数/ AvgNOCN/ 、/ 变更/ 节点/ 数/ 的/ 标准差/ StdNOCN/ 和/ 最大/ 变更/ 节点/ 数/ MaxNOCN/ ./ 图中/ 的/ 每条/ 曲线/ 分别/ 表示/ 不同/ α/ 下/ 的/ 仿真/ 结果/ ./ Page7/ 从/ 变化趋势/ 图上/ 可以/ 看出/ :/ 当/ 仿真/ 次数/ n/ </ 1000/ 时/ ,/ AvgNOCN/ 、/ StdNOCN/ 和/ MaxNOCN/ 曲线/ 波动/ 明显/ ,/ 这/ 表明/ 仿真/ 中/ 由于/ 选择/ 了/ 不同/ 的/ 初始/ 变更/ 节点/ ,/ 需要/ 更改/ 的/ 节点/ 数/ NOCN/ 之间/ 存在/ 巨大/ 的/ 差异/ ;/ 当/ 仿真/ 次数/ n/ / 3000/ 时/ ,/ AvgNOCN/ 、/ StdNOCN/ 和/ MaxNOCN/ 基本/ 保持稳定/ ./ 由此可见/ ,/ 在/ 仿真/ 次数/ N/ 远大于/ 节点/ 数/ 的/ 前提/ 下/ ,/ 本文/ 提出/ 的/ 评价/ 指标/ 在/ 仿真/ 中/ 具有/ 良好/ 的/ 收敛性/ ./ 对/ JEdit/ 进行/ 多次/ 实验/ 后/ 我们/ 发现/ ,/ 评价/ 指标/ 在/ 多次/ 实验/ 中/ 的/ 度量/ 值/ 基本/ 稳定/ ,/ 偏差/ 不/ 超过/ 度量/ 值/ 的/ 1/ %/ ,/ 说明/ 本文/ 提出/ 的/ 变更/ 仿真/ 算法/ 是/ 有效/ 的/ ,/ 可以/ 用于/ 软件/ 稳定性/ 的/ 分析/ 和/ 度量/ ./ 6/ 传播/ 概率/ 对/ 软件/ 稳定性/ 的/ 影响/ 分析/ 6.1/ 对/ 评价/ 指标/ 的/ 影响/ 以往/ 的/ 研究/ 表明/ ,/ 模块/ 间/ 的/ 耦合/ 程度/ 很大/ 程度/ 上/ 影响/ 到/ 系统/ 的/ 可维护性/ ./ 因此/ ,/ 在/ 软件设计/ 时/ ,/ 人表/ 1/ 不同/ 传播/ 概率/ 下/ JEdit/ 软件/ 网络/ 的/ 变更/ 传播/ 指标/ α/ AvgNOCNStdNOCNMaxNOCNAvgPOCNStdPOCNMaxPOCN0/ ./ 10.20/ ./ 30.4120/ ./ 130.5177/ ./ 050.6228/ ./ 620.7285/ ./ 510.8330/ ./ 000.9377/ ./ 911/ 由于/ 传播/ 概率/ 在/ 一定/ 程度/ 上/ 反映/ 了/ 软件/ 元素/ 之间/ 的/ 耦合/ 程度/ ,/ 上述/ 实验/ 结果表明/ :/ 降低/ 耦合度/ 对/ 软件维护/ 具有/ 重要/ 意义/ ./ 过高/ 的/ 耦合/ 性/ 必将/ 导致/ 软件/ 变更/ 时/ 的/ 连锁/ 效应/ ,/ 增加/ 软件/ 的/ 维护/ 成本/ ./ 这/ 和/ 软件设计/ 的/ 基本/ 原则/ 是/ 一致/ 的/ ./ 也/ 从/ 另/ 一个/ 侧面/ 验证/ 了/ 本文/ 提出/ 的/ SEMCIS/ 方法/ ,/ 可以/ 有效/ 地/ 度量/ 不同/ 耦合/ 强度/ 对/ 软件/ 稳定性/ 的/ 影响/ ./ 6.2/ 对/ 变更/ 节点/ 数/ 分布/ 的/ 影响/ 平均/ 变更/ 节点/ 数/ AvgNOCN/ 和/ 标准差/ StdNOCN/ 反映/ 了/ 软件/ 在/ 响应/ “/ 原子/ 变更/ 需求/ ”/ 时/ 的/ 整体/ 统计/ 特性/ ./ 那么/ ,/ 多次/ 仿真/ 中/ 变更/ 节点/ 数/ NOCN/ 是否/ 存在/ 某种/ 规律/ 呢/ ?/ 图/ 5/ 给出/ 了/ 不同/ 传播/ 概率/ 下/ ,/ 变更/ 节点/ 数/ 的/ 分布/ 情况/ ./ 其中/ ,/ X/ 轴/ 表示/ 变更/ 的/ 节点/ 数/ ,/ Y/ 轴/ 表示/ 在/ N/ 次/ 仿真/ 中/ 出现/ x/ 个/ 节点/ 发生/ 变更/ 的/ 次数/ ./ X/ 轴和们/ 提倡/ 模块化/ 的/ 设计/ 思想/ ,/ 目的/ 是/ 希望/ 软件系统/ 各/ 模块/ 之间/ 的/ 耦合/ 尽可能/ 松散/ ,/ 联系/ 尽可能/ 简单/ ./ 这样/ ,/ 在/ 进行/ 软件维护/ 时/ ,/ 不但/ 可以/ 减少/ 变更/ 的/ 扩散/ 范围/ ,/ 而且/ 可以/ 降低/ 理解/ 系统/ 的/ 难度/ ./ 在/ 本文/ 提出/ 的/ SEMCIS/ 方法/ 中/ ,/ 变更/ 传播/ 概率/ 在/ 一定/ 程度/ 上/ 反映/ 了/ 模块/ 间/ 的/ 耦合/ 强度/ ./ 原则上/ ,/ 传播/ 概率/ 越高/ ,/ 变更/ 的/ 平均/ 影响/ 范围/ 就/ 越/ 大/ ,/ 软件/ 的/ 稳定性/ 越差/ ./ 表/ 1/ 给出/ 了/ 不同/ 传播/ 概率/ 下/ 的/ 评价/ 指标/ ./ 可以/ 看到/ :/ 随着/ 传播/ 概率/ 的/ 不断/ 增加/ ,/ 最大/ 变更/ 节点/ 数/ MaxNOCN/ 和/ 平均/ 变更/ 节点/ 数/ AvgNOCN/ 不断/ 增加/ ,/ 平均/ 变更/ 节点/ 数/ 的/ 标准差/ StdNOCN/ 也/ 基本/ 呈上升/ 趋势/ (/ α/ 介于/ 0.8/ ~/ 1.0/ 时/ 略有不同/ )/ ./ 另外/ ,/ 当/ α/ </ 0.8/ 时/ ,/ 平均/ 变更/ 节点/ 数/ 的/ 标准差/ StdNOCN/ 都/ 要/ 大于/ 平均/ 变更/ 节点/ 数/ ./ 这/ 说明/ ,/ 尽管/ 变更/ 模型/ 中/ 的/ 传播/ 概率/ 较/ 小/ ,/ 但是/ 在/ 响应/ 不同/ 的/ “/ 原子/ 变更/ 需求/ ”/ 时/ ,/ 由于/ 选择/ 的/ 初始/ 变更/ 节点/ 不同/ ,/ 需要/ 更改/ 的/ 节点/ 数/ NOCN/ 之间/ 存在/ 巨大/ 的/ 差异/ ./ Y/ 轴/ 都/ 以/ 10/ 为/ 底取/ 对数/ ./ 从中/ 我们/ 发现/ 一些/ 有趣/ 的/ 现象/ :/ (/ 1/ )/ 当/ α/ =/ 0.1/ 时/ ,/ 变更/ 节点/ 数/ 呈现出/ 明显/ 的/ 幂率/ 分布/ ./ 在/ 尾部/ ,/ 发生/ 大/ 范围/ 变更/ 的/ 次数/ 呈上升/ 趋势/ ;/ (/ 2/ )/ 当/ α/ =/ 0.2/ ~/ 0.9/ 时/ ,/ 变更/ 节点/ 数/ 的/ 分布/ 明显/ 分裂/ 成/ 两个/ 区域/ ,/ 左侧/ 基本/ 服从/ 幂率/ 或者/ 带/ 指数/ 截断/ 的/ 幂率/ 分布/ ,/ 右侧/ 是/ 一个/ 或/ 两个/ 山峰/ ,/ 两者之间/ 存在/ 明显/ 的/ 断裂带/ ./ 随着/ α/ 的/ 增加/ ,/ 右侧/ 的/ 山峰/ 逐步/ 上升/ 并/ 右移/ ,/ 说明/ 软件/ 在/ 响应/ 未知/ 的/ 变更/ 需求/ 时/ ,/ 可能/ 变更/ 的/ 节点/ 数/ 越来越/ 多/ 、/ 发生/ 的/ 几率/ 也/ 越来越/ 高/ ./ 从/ α/ =/ 0.4/ 开始/ ,/ 山峰/ 由/ 一个/ 分裂/ 成/ 两个/ ./ (/ 3/ )/ 当/ α/ =/ 1.0/ 时/ ,/ 变更/ 节点/ 数/ 的/ 分布/ 分裂/ 为/ 两个/ 区域/ ,/ 但是/ 每个/ 区域/ 的/ 概率分布/ 情况/ 不是/ 很/ 明显/ ./ Page8/ 图/ 5/ 不同/ 传播/ 概率/ 下/ JEdit/ 软件/ 的/ 变更/ 节点/ 数/ 分布/ (/ ○/ 表示/ 峰值/ 所在位置/ )/ 从/ 这些/ 现象/ 中/ 我们/ 可以/ 看出/ ,/ 每次/ 仿真/ 中/ 对应/ 的/ 变更/ 节点/ 数是/ 极/ 不/ 均匀/ 的/ ,/ 变更/ 节点/ 数/ 的/ 分布图/ 从/ 一定/ 程度/ 上/ 反映/ 了/ 软件/ 响应/ 未知/ 变更/ 的/ 能力/ ./ 随着/ 传播/ 概率/ 的/ 增加/ ,/ 发生/ 大规模/ 变更/ 的/ 可能性/ 不断/ 上升/ ./ 因此/ ,/ 改善/ 类/ 与/ 类/ 之间/ 的/ 耦合/ 强度/ ,/ 降低/ 传播/ 概率/ ,/ 可以/ 有效/ 地/ 减少/ 原子/ 变更/ 的/ 波及/ 范围/ ,/ 提高/ 软件/ 稳定性/ ./ 7/ 软件结构/ 对/ 软件/ 稳定性/ 的/ 影响/ 分析/ 以往/ 的/ 研究/ 表明/ ,/ 软件/ 的/ 体系结构/ 在/ 很大/ 程度/ 上/ 决定/ 了/ 软件/ 的/ 全局/ 质量/ ./ 其中/ ,/ 软件/ 可维护性/ 与/ 软件/ 的/ 结构/ 有着/ 直接/ 的/ 关系/ [/ 13/ ]/ ./ 由此可见/ ,/ 在/ 传播/ 概率/ 不变/ 的/ 前提/ 下/ ,/ 改善/ 软件/ 的/ 体系结构/ 设计/ ,/ 也/ 就是/ 软件/ 实体/ 之间/ 的/ 连接/ 关系/ ,/ 有/ 可能/ 提高/ 软件/ 的/ 稳定性/ ./ 那么/ ,/ 什么样/ 的/ 软件结构/ ,/ 它/ 的/ 稳定性/ 比较/ 好/ ?/ 影响/ 稳定性/ 的/ 结构/ 因素/ 又/ 有/ 哪些/ 呢/ ?/ 为了/ 研究/ 软件结构/ 对/ 稳定性/ 的/ 影响/ ,/ 我们/ 首先/ 将/ JEdit/ 的/ 变更/ 传播/ 模型/ (/ 简称/ 真实/ 模型/ )/ 与/ 相同/ 规模/ 、/ 随机化/ 之后/ 的/ 拓扑/ 结构/ (/ 简称/ 随机/ 模型/ )/ 进行/ 对比/ ,/ 分析/ 它们/ 在/ 稳定性/ 上/ 的/ 差异/ ./ 在/ 此基础/ 上/ ,/ 对/ 大规模/ 变更/ 产生/ 的/ 原因/ 进行/ 分析/ ./ 7.1/ 软件/ 真实/ 模型/ 与/ 随机/ 模型/ 的/ 稳定性/ 对比/ 实验/ 分为/ 以下/ 几个/ 步骤/ :/ 1/ ./ 输入/ 软件/ 的/ 变更/ 传播/ 模型/ Gw/ =/ (/ V/ ,/ E/ )/ ,/ 获取/ 每个/ 节点/ 的/ 出度/ 和/ 入度/ ,/ 组成/ 度/ 序列/ ;/ 2/ ./ 根据/ 步/ 1/ 中/ 得到/ 的/ 度/ 序列/ ,/ 运用/ 交换/ 法则/ 生成/ 一系列/ 随机/ 模型/ [/ 14/ -/ 15/ ]/ ./ 针对/ 真实/ 软件/ 中/ 的/ 有/ 向/ 边/ vi/ →/ vj/ 和/ vs/ →/ vt/ ,/ 如果/ vi/ →/ vt/ 和/ vs/ →/ vj/ 都/ 不/ 存在/ ,/ 那么/ 删除/ 这/ 两条/ 边/ ,/ 然后/ Page9/ 添加/ vi/ →/ vt/ 和/ vs/ →/ vj/ 到/ 网络/ 中/ ./ 同时/ 要求/ ,/ 双向/ 边/ 只能/ 和/ 双向/ 边/ 进行/ 交换/ ,/ 随机化/ 后/ 的/ 网络/ 必须/ 保证/ 连通性/ ./ 这样/ ,/ 通过/ 多次/ 交换/ 后/ 生成/ 的/ 随机/ 模型/ ,/ 每个/ 节点/ 的/ 度/ 和/ 原始/ 软件/ 保持一致/ ,/ 但是/ ,/ 节点/ 与/ 节点/ 间/ 的/ 度/ 相关性/ 发生/ 了/ 变化/ ./ 模型/ 和/ 随机/ 模型/ 进行/ 仿真/ ,/ 并/ 统计/ 度量/ 指标/ ./ 3/ ./ 设置/ 相同/ 的/ 仿真/ 次数/ N/ 和/ 变更/ 传播/ 概率/ α/ ,/ 对/ 真实/ 本/ 实验/ 中/ ,/ 传播/ 概率/ α/ 设为/ 0.5/ ,/ 仿真/ 次数/ N/ 设为/ 10000/ ./ 图/ 6/ 给出/ JEdit/ 真实/ 模型/ 和/ 随机/ 模型/ 的/ 变更/ 节点/ 数/ 分布图/ ./ 其中/ X/ 轴/ 表示/ 变更/ 的/ 节点/ 数/ ,/ Y/ 轴/ 表示/ 在/ N/ 次/ 仿真/ 中/ ,/ 出现/ x/ 个/ 变更/ 节点/ 的/ 次数/ ./ X/ 轴/ 和/ Y/ 轴/ 都/ 以/ 10/ 为/ 底取/ 对数/ ./ 具体/ 的/ 统计/ 指标/ 参见/ 表/ 2/ ./ 结合/ 图/ 6/ 和表/ 2/ 的/ 信息/ ,/ 可以/ 发现/ :/ (/ 1/ )/ JEdit/ 真实/ 模型/ 的/ 评价/ 指标/ ,/ 包括/ AvgNOCN/ 、/ StdNOCN/ 、/ MaxNOCN/ 在内/ ,/ 都/ 要/ 明显/ 优于/ 随机/ 模型/ ./ (/ 2/ )/ 与/ JEdit/ 真实/ 模型/ 类似/ ,/ 随机/ 模型/ 的/ 变更/ 节图/ 6/ α/ =/ 0.5/ 时/ JEdit/ 真实/ 模型/ 和/ 随机/ 模型/ 的/ 变更/ 节点/ 数/ 分布/ 表/ 2/ α/ =/ 0.5/ 时/ ,/ JEdit/ 软件/ 真实/ 模型/ 和/ 随机/ 模型/ 的/ 变更/ 传播/ 指标/ 对比/ JEdit174/ ./ 14209.3721/ ./ 8826.30/ 随机/ 模型/ 278.17271/ ./ 5134.9534/ ./ 11/ 实验/ 结果表明/ ,/ 本文/ 提出/ 的/ SEMCIS/ 方法/ 和/ 评价/ 指标/ 可以/ 反映/ 出/ 结构/ 对/ 稳定性/ 的/ 影响/ ./ 经过/ 人工/ 设计/ 的/ 软件/ ,/ 它/ 的/ 稳定性/ 确实/ 要/ 好/ 于/ 随机/ 模型/ ,/ 可以/ 有效/ 地/ 降低/ 变更/ 的/ 传播/ 范围/ ./ 在/ 变更/ 传播/ 概率/ 不变/ 的/ 前提/ 下/ ,/ 改善/ 软件/ 的/ 体系结构/ 设计/ 同样/ 可以/ 提高/ 软件/ 的/ 稳定性/ ./ 7.2/ 造成/ 大规模/ 变更/ 的/ 结构/ 因素/ 从/ 软件/ 真实/ 的/ 变更/ 传播/ 模型/ 与/ 随机/ 模型/ 的/ 稳定性/ 对比/ 实验/ 中/ ,/ 我们/ 发现/ :/ 无论是/ JEdit/ 的/ 真实/ 模型/ ,/ 还是/ 随机/ 模型/ ,/ 仿真/ 过程/ 中/ 大规模/ 变更/ 频频/ 发生/ ./ 这/ 说明/ ,/ JEdit/ 真实/ 模型/ 和/ 随机/ 模型/ 在/ 存在/ 差异/ 的/ 同时/ ,/ 也/ 存在/ 一些/ 共性/ ,/ 而/ 这些/ 共性/ 就是/ 造成/ 大规模/ 变更/ 的/ 主要/ 原因/ ./ 要/ 想/ 抑制/ 变更/ 的/ 传播/ 范围/ ,/ 有必/ 点数/ 分布/ 同样/ 分裂/ 成/ 两个/ 区域/ ,/ 左侧/ 基本/ 服从/ 幂率/ 或者/ 带/ 指数/ 截断/ 的/ 幂率/ 分布/ ,/ 右侧/ 同样/ 出现/ 山峰/ ,/ 两个/ 区域/ 之间/ 也/ 存在/ 明显/ 的/ 断裂带/ ./ (/ 3/ )/ JEdit/ 网络/ 的/ 左半/ 部分/ 比/ 随机/ 模型/ 的/ 下降/ 趋势/ 要慢/ 一些/ ,/ 这/ 使得/ 左侧/ 部分/ 的/ 最大值/ 要/ 远远/ 高于/ 随机/ 模型/ ./ JEdit/ 网络/ 左侧/ 部分/ 的/ 最大值/ 是/ 61/ ,/ 而/ 随机/ 模型/ 左侧/ 部分/ 的/ 最大值/ 只有/ 20/ 左右/ ./ 但是/ ,/ JEdit/ 左半/ 部分/ 在/ 总体/ 中所/ 占/ 的/ 比例/ 要/ 明显/ 高于/ 随机/ 模型/ ./ 在/ 随机/ 模型/ 中/ ,/ 左侧/ 部分/ 的/ 频数/ 总和/ 为/ 4904/ 次/ ,/ 而/ 在/ JEdit/ 软件/ 的/ 变更/ 节点/ 数/ 分布图/ 中/ ,/ 左侧/ 部分/ 的/ 频数/ 总和/ 达到/ 了/ 5977/ 次/ ./ (/ 4/ )/ JEdit/ 真实/ 模型/ 的/ 右半/ 部分/ 在/ X/ 轴上/ 的/ 跨度/ 较大/ ,/ 最小值/ 和/ 最大值/ 都/ 要/ 明显/ 小于/ 随机/ 模型/ ./ 随机/ 模型/ 右半/ 部分/ 的/ 变更/ 节点/ 数/ 分布/ 在/ (/ 484/ ,/ 586/ )/ 之间/ ,/ 而/ JEdit/ 真实/ 模型/ 则/ 在/ (/ 373/ ,/ 518/ )/ 之间/ 变化/ ./ 11/ 要/ 研究/ 造成/ 大规模/ 变更/ 的/ 结构/ 特点/ ,/ 从而/ 为/ 软件/ 的/ 体系结构/ 设计/ 提供/ 指导/ ./ 直观/ 上/ 看/ ,/ 修改/ 初始/ 变更/ 节点/ vinit/ 导致/ 的/ 变更/ 节点/ 数/ NOCN/ (/ Vinit/ )/ ≈/ ∑/ 表示/ 到/ vinit/ 的/ 最/ 短距离/ 为/ i/ 的/ 前驱/ 节点/ 个数/ ./ 在/ α/ 较/ 小/ 的/ 前提/ 下/ ,/ 随着/ 距离/ i/ 的/ 增加/ ,/ α/ i/ / α/ ,/ 因此/ NOCN/ (/ vinit/ )/ ≈/ 1/ +/ α/ ×/ n1/ (/ vinit/ )/ =/ 1/ +/ α/ ×/ kin/ (/ vinit/ )/ ,/ 其中/ kin/ (/ vinit/ )/ 表示/ vinit/ 的/ 入度/ ./ 当/ 传播/ 概率/ α/ 较/ 小时/ ,/ 节点/ vinit/ 的/ 修改/ 一般/ 只能/ 影响/ 到/ 与/ vinit/ 直接/ 相连/ 的/ 节点/ ./ 也就是说/ ,/ 初始/ 变更/ 节点/ 的/ 入度/ 很大/ 程度/ 上/ 决定/ 了/ 最终/ 变更/ 的/ 节点/ 数/ ./ 而/ 软件/ 网络/ 的/ 入度/ 基本/ 服从/ 幂率/ 分布/ [/ 16/ ]/ ,/ 所以/ 变更/ 的/ 波及/ 范围/ 基本上/ 和/ 初始/ Page10/ 变更/ 节点/ 的/ 入度/ 成正比/ ,/ 也/ 呈现出/ 类似/ 幂率/ 的/ 分布/ ./ 但是/ ,/ 从表/ 1/ 的/ JEdit/ 仿真/ 结果/ 来看/ ,/ 不同/ α/ 下/ 最大/ 的/ 变更/ 节点/ 数/ MaxNOCN/ 远远/ 大于/ 1/ +/ α/ ×/ max/ (/ kin/ )/ ./ 而且/ ,/ 随着/ α/ 值/ 的/ 增加/ ,/ 最大/ 变更/ 节点/ 数/ MaxNOCN/ 也/ 随之/ 增加/ ./ 以/ α/ =/ 0.1/ 为例/ ,/ 最大/ 变更/ 节点/ 数/ MaxNOCN/ 达到/ 了/ 124/ ,/ 远远/ 大于/ 1/ +/ α/ ×/ max/ (/ kin/ )/ =/ 1/ +/ 0.1/ ×/ 223/ =/ 23.3/ (/ JEdit/ 网络/ 中/ 节点/ 的/ 最大/ 入度/ 是/ 223/ )/ ./ 要/ 想/ 造成/ 这么/ 大/ 范围/ 的/ 变更/ ,/ 仅靠/ 1/ 个/ 入度/ 较大/ 的/ 集散/ 节点/ (/ 简称/ 为/ 入度/ Hub/ )/ 是/ 远远不够/ 的/ ,/ 必须/ 有/ 多个/ 入度/ Hub/ 相互协作/ ./ 首先/ ,/ 多个/ 入度/ Hub/ 节点/ 受到/ vinit/ 的/ 影响/ 发生/ 变更/ ,/ 再/ 通过/ 入度/ Hub/ 引起/ 大规模/ 的/ 涟漪/ 效应/ ./ 因此/ ,/ 入度/ Hub/ 之间/ 的/ 彼此/ 相连/ 是/ 造成/ 大规模/ 变更/ ,/ 特别/ 是/ 最图/ 7/ 入度/ Hub/ 节点/ 的/ 影响/ 示意图/ 通过/ 上面/ 的/ 分析/ ,/ 我们/ 可以/ 得出/ 这样/ 的/ 结论/ :/ 入度/ Hub/ 的/ 相互连接/ 是/ 造成/ 大/ 范围/ 变更/ 的/ 主要/ 原因/ ;/ 而/ 入度/ Hub/ 中/ 存在/ 的/ 大量/ 后继/ 节点/ (/ v/ ←/ vHub/ )/ ,/ 则/ 是/ 造成/ 大/ 范围/ 变更/ 频繁/ 发生/ 的/ 主要/ 原因/ ./ 为了/ 验证/ 前面/ 的/ 分析/ ,/ 本文/ 以/ JEdit/ 网络/ 为例/ ,/ 分析/ 入度/ Hub/ 节点/ 的/ 连接/ 方式/ 以及/ 它们/ 的/ 前驱/ 和/ 后继/ 节点/ 对/ 网络/ 传播/ 特性/ 的/ 影响/ ./ 首先/ 我们/ 给/ 出入/ 度/ Hub/ 的/ 定义/ ./ 定义/ 14/ ./ 入度/ Hub/ 的/ 阈值/ 为/ 图/ 8JEdit/ 真实/ 模型/ 和/ 随机/ 模型/ 的/ 入度/ Hub/ 的/ 连接/ 方式/ 对比/ 大/ 变更/ 节点/ 数/ MaxNOCN/ 偏大/ 的/ 主要/ 原因/ ./ 随着/ 传播/ 概率/ 的/ 增加/ ,/ 初始/ 变更/ 节点/ 可以/ 波及/ 的/ 距离/ 逐渐/ 增加/ ./ 与此同时/ ,/ 能够/ 影响/ 入度/ Hub/ 的/ 节点/ 个数/ 也/ 不断/ 增加/ ./ 如图/ 7/ 所示/ ,/ 当/ α/ 值/ 很/ 小时/ ,/ 入度/ Hub/ 节点/ vHub/ 一般/ 只能/ 受到/ 距离/ 为/ 1/ 的/ v1/ 、/ v2/ 等/ 节点/ 的/ 影响/ ,/ 同时/ 只能/ 影响/ v5/ 、/ v6/ 等/ 节点/ ./ 随着/ α/ 值/ 的/ 增加/ ,/ vHub/ 一旦/ 发生/ 变更/ ,/ 可能/ 波及/ 的/ 节点/ 越来越/ 多/ ./ 于此/ 同时/ ,/ vHub/ 被/ 距离/ 大于/ 1/ 的/ 节点/ (/ 例如/ ,/ v3/ 、/ v4/ )/ 影响/ 的/ 几率/ 也/ 不断/ 上升/ ./ 这/ 就/ 使得/ :/ 在/ 变更/ 波及/ 范围/ 不断/ 增加/ 的/ 同时/ ,/ 剧烈/ 变更/ 的/ 发生/ 频率/ 也/ 不断/ 上升/ ./ 表现/ 在/ 变更/ 分布图/ 上/ ,/ 就是/ 右侧/ 的/ 山峰/ 不断/ 右移/ 、/ 上升/ ,/ 山峰/ 在/ 总体/ 中所/ 占/ 的/ 比重/ 逐渐/ 增加/ ./ 其中/ ,/ 〈/ kin/ 〉/ 和/ std/ (/ kin/ )/ 分别/ 表示/ 网络/ 中/ 节点/ 入度/ 的/ 平均值/ 和/ 标准差/ ./ 入度/ 大于/ λ/ 的/ 节点/ 都/ 被/ 看作/ 是/ 入度/ Hub/ 节点/ ./ 对于/ JEdit/ 网络/ ,/ 节点/ 入度/ 的/ 平均值/ 为/ 4.9/ ,/ 方差/ 为/ 13.7/ ,/ 因此/ 入度/ 大于/ 32.3/ 的/ 节点/ 都/ 被/ 看作/ 入度/ Hub/ 节点/ ,/ 共计/ 19/ 个/ ./ 图/ 8/ 给出/ 了/ JEdit/ 网络/ 和/ 随机/ 模型/ 中入度/ Hub/ 节点/ 的/ 连接/ 关系/ 图/ ./ 从中/ 可以/ 看到/ ,/ 在/ JEdit/ 软件/ 中/ ,/ 入度/ Hub/ 节点/ 形成/ 一个/ 弱/ 连通/ 网络/ ,/ 并且/ 被划/ Page11/ 分成/ 两个/ 明显/ 的/ 社区/ ./ 每个/ 社区/ 中/ 的/ Hub/ 节点/ 连接/ 异常/ 紧密/ ./ 任何/ 一个/ 节点/ 发生/ 变更/ ,/ 都/ 可能/ 波及/ 到/ 社区/ 内/ 的/ 所有/ 节点/ ,/ 造成/ 大规模/ 的/ 涟漪/ 效应/ ./ 特别/ 是/ 当/ 右侧/ 社区/ 的/ 节点/ 发生/ 变更/ 时/ ,/ 可能/ 通过/ 有/ 向/ 边/ 影响/ 到/ 左侧/ 社区/ 中/ 的/ 节点/ ,/ 使/ 变更/ 的/ 范围/ 进一步/ 扩大/ ./ JEdit/ 的/ Hub/ 网络/ 中/ 存在/ 的/ 社区/ 结构/ 以及/ 两个/ 社区/ 之间/ 存在/ 的/ 单向/ 连通性/ ,/ 可能/ 是/ 造成/ 变更/ 节点/ 分布/ 中/ 出现/ 两个/ 波峰/ 的/ 原因/ ./ 相比之下/ ,/ 随机/ 模型/ 中/ 的/ 入度/ Hub/ 节点/ 被/ 紧密连接/ 成/ 一个/ 整体/ ,/ 没有/ 明显/ 的/ 社区/ 结构/ ./ 一旦/ 某个/ 入度/ Hub/ 节点/ 发生/ 变更/ ,/ 其它/ 节点/ 更/ 容易/ 受到牵连/ ,/ 从而/ 造成/ 更大/ 范围/ 的/ 变更/ ./ 表/ 3/ 给出/ 了/ JEdit/ 网络/ 和/ 随机/ 模型/ 中/ 前驱/ 和/ 后继/ 节点/ 的/ 个数/ ./ 从中/ 可以/ 看出/ ,/ 与/ JEdit/ 入度/ Hub/ 直接/ 连接/ 的/ 前驱/ 节点/ 个数/ 达到/ 了/ 501/ 个/ ./ 而/ JEdit/ 入度/ Hub/ 的/ 直接/ 后继/ 节点/ 数/ 达到/ 了/ 230/ 个/ ,/ 这/ 意味着/ 网络/ 中/ 28.9/ %/ 的/ 节点/ 发生/ 变更/ 时/ ,/ 有/ 可能/ 以/ 概率/ α/ 波及/ 到/ 入度/ Hub/ 节点/ ./ 而/ 多个/ 入度/ Hub/ 之间/ 的/ 紧密连接/ ,/ 就/ 可能/ 将/ 这个/ 影响/ 扩散/ 开来/ ,/ 造成/ 大/ 范围/ 变更/ ./ 相比之下/ ,/ 随机/ 模型/ 中/ 的/ 直接/ 前驱/ 和/ 后继/ 节点/ 个数/ 要/ 高出/ 真实/ 模型/ 10/ %/ 以上/ ./ 此外/ ,/ 从/ 7.1/ 节/ 随机/ 模型/ 的/ 构造/ 算法/ 中/ 可以/ 看出/ ,/ 真实/ 模型/ 和/ 随机/ 模型/ 具有/ 相同/ 的/ 度/ 序列/ ./ 但是/ ,/ 真实/ 软件/ 中/ 相邻/ 节点/ 的/ 入度/ 之间/ 呈/ 负/ 相关性/ ,/ 而/ 随机/ 模型/ 中/ 相邻/ 节点/ 的/ 入度/ 之间/ 不/ 存在/ 明显/ 的/ 相关性/ ,/ 所以/ 在/ 初始/ 变更/ 节点/ 和/ 传播/ 概率/ 相同/ 的/ 情况/ 下/ ,/ 随机/ 模型/ 波及/ 到/ 入度/ Hub/ 节点/ 的/ 几率/ 更大/ ./ 这/ 和/ 仿真/ 中/ 观测/ 到/ 的/ 某些/ 现象/ 是/ 一致/ 的/ (/ JEdit/ 真实/ 模型/ 的/ 右侧/ 波峰/ 相对/ 靠左/ ,/ 而且/ 高度/ 相对/ 较/ 低/ )/ ./ 表/ 3JEdit/ 软件/ 网络/ 和/ 随机/ 模型/ 中入度/ Hub/ 的/ JEdit/ 随机/ 模型/ 另一方面/ ,/ 由于/ 软件/ 在/ 设计/ 过程/ 中/ ,/ 往往/ 采用/ 逐层/ 分解/ 、/ 高/ 内聚/ 低/ 耦合/ 的/ 模块化/ 设计/ 思想/ ,/ 这/ 使得/ 软件/ 中/ 存在/ 明显/ 的/ 模块/ 结构/ ./ 模块/ 内/ 实体/ 的/ 联系/ 比较/ 紧密/ ,/ 模块/ 间/ 实体/ 的/ 联系/ 相对/ 稀疏/ ./ 当/ 模块/ 和/ 模块/ 之间/ 进行/ 交互/ 时/ ,/ 一般/ 要求/ 通过/ 特定/ 的/ 模块接口/ 才能/ 进行/ ./ 当/ 出现/ 变更/ 需求/ 时/ ,/ 软件/ 的/ 这种/ 模块/ 结构/ 可以/ 有效/ 地/ 防止/ 变更/ 的/ 扩散/ ,/ 使得/ 变更/ 被/ 尽可能/ 地/ 限制/ 在/ 初始/ 变更/ 节点/ 所在/ 的/ 模块/ 内部/ ./ 只有/ 当/ 公共/ 元素/ (/ 例如/ 入度/ Hub/ 或/ 模块/ 间接口/ )/ 发生/ 修改/ 时/ ,/ 变更/ 范围/ 才/ 会/ 进一步/ 扩散/ ./ 所以/ ,/ 在/ 改进/ 软件/ 的/ 变更/ 传播/ 特性/ 时/ ,/ 不仅/ 要/ 从/ 微观/ 上/ 控制软件/ 实体/ 和/ 实体/ 之间/ 的/ 耦合/ 程度/ ,/ 提高/ 软件/ 实体/ 特别/ 是/ 公共/ 实体/ 自身/ 的/ 封装/ 性/ ,/ 更/ 重要/ 的/ 是/ ,/ 要/ 从/ 宏观/ 上/ 调整/ 软件/ 的/ 整体/ 结构/ ,/ 特别/ 是/ 控制/ 入度/ Hub/ 之间/ 的/ 连接/ 关系/ ,/ 尽可能/ 避免/ 它们/ 紧密/ 相连/ ,/ 使/ 软件/ 能/ 更好/ 地/ 适应/ 需求/ 的/ 变化/ ,/ 最终/ 降低/ 软件/ 的/ 维护/ 成本/ ./ 8/ 结语/ 软件/ 的/ 稳定性/ ,/ 或者说/ 变更/ 传播/ 特性/ 的/ 研究/ ,/ 对/ 软件/ 的/ 可维护性/ 度量/ 和/ 评估/ 具有/ 很强/ 的/ 实用价值/ ./ 但是/ ,/ 在/ 软件/ 的/ 整个/ 生命周期/ 中/ ,/ 可能/ 遇到/ 的/ 变更/ 需求/ 千变万化/ ,/ 变更/ 需求/ 的/ 类型/ 、/ 粒度/ 和/ 具体内容/ 也/ 各不相同/ ,/ 这/ 给/ 软件/ 的/ 稳定性/ 研究/ 带来/ 了/ 极大/ 的/ 困难/ ./ 本文/ 将/ 软件/ 的/ 变更/ 需求/ 看作/ 是/ 一系列/ “/ 原子/ 变更/ 需求/ ”/ 的/ 叠加/ ,/ 将/ “/ 原子/ 变更/ 需求/ ”/ 的/ 响应/ 抽象/ 成/ :/ 初始/ 变更/ 节点/ 的/ 随机/ 选择/ 过程/ 以及/ 由此/ 引起/ 的/ 涟漪/ 效应/ ./ 提出/ 通过/ 软件/ 在/ 响应/ “/ 原子/ 变更/ 需求/ ”/ 时/ 平均/ 需要/ 变更/ 的/ 实体/ 个数/ 来/ 度量/ 软件/ 的/ 稳定性/ ./ 根据/ 这个/ 思想/ ,/ 本文/ 提出/ 了/ 一种/ 新/ 的/ 稳定性/ 评价/ 方法/ SEMCIS/ ,/ 定义/ 了/ 软件/ 的/ 变更/ 传播/ 模型/ 和/ 稳定性/ 度量/ 指标/ ./ 同时/ ,/ 为了/ 克服/ 概率论/ 方法/ 在/ 处理/ 循环/ 依赖/ 上/ 的/ 缺陷/ ,/ 提出/ 用/ 仿真/ 方法/ 计算/ 稳定性/ 指标/ ,/ 并且/ 给出/ 了/ 相应/ 的/ 仿真/ 算法/ ./ 通过/ 对/ 开源/ 软件/ 的/ 实例/ 分析/ ,/ 我们/ 验证/ 了/ 评价/ 指标/ 在/ 多次/ 仿真/ 中/ 的/ 收敛性/ ,/ 并/ 就/ 变更/ 传播/ 概率/ 、/ 软件结构/ 对/ 稳定性/ 的/ 影响/ 进行/ 了/ 分析/ ./ 实验/ 结果表明/ :/ 降低/ 软件/ 实体/ 之间/ 的/ 变更/ 传播/ 概率/ ,/ 可以/ 有效/ 地/ 改善/ 软件/ 稳定性/ ;/ 与此同时/ ,/ 在/ 变更/ 传播/ 概率/ 不变/ 的/ 前提/ 下/ ,/ 改善/ 软件/ 的/ 体系结构/ 设计/ 也/ 可以/ 有效/ 地/ 抵抗/ “/ 涟漪/ 效应/ ”/ 的/ 发生/ ,/ 从而/ 具有/ 较/ 好/ 的/ 稳定性/ ./ 进一步/ 的/ 分析表明/ ,/ 入度/ Hub/ 的/ 相互连接/ 是/ 造成/ 大/ 范围/ 变更/ 的/ 主要/ 原因/ ,/ 而/ 入度/ Hub/ 中/ 存在/ 的/ 大量/ 后继/ 节点/ (/ v/ ←/ vHub/ )/ ,/ 则/ 是/ 造成/ 大/ 范围/ 变更/ 频繁/ 发生/ 的/ 主要/ 原因/ ./ 减少/ 公共/ 实体/ 之间/ 的/ 依赖/ 关系/ ,/ 降低/ 它们/ 之间/ 的/ 耦合/ 强度/ ,/ 有助于/ 改善/ 软件/ 的/ 稳定性/ ,/ 降低/ 维护/ 成本/ ./ 

