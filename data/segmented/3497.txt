Page1PartitionSim/ :/ 一个/ 面向/ 众核/ 结构/ 的/ 并行/ 模拟器/ 焦帅/ 1/ )/ ,/ 2/ )/ 徐/ 卫志/ 1/ )/ ,/ 2/ )/ 唐士斌/ 1/ )/ ,/ 2/ )/ 范东/ 睿/ 1/ )/ 孙凝晖/ 1/ )/ 1/ )/ (/ 中国科学院计算技术研究所/ 系统结构/ 重点/ 实验室/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 研究生院/ 北京/ 100049/ )/ 摘要/ 该文/ 提出/ 了/ 一个/ 面向/ 众核/ 处理器/ 的/ 并行/ 模拟器/ :/ PartitionSim/ ./ PartitionSim/ 采用/ 了/ 一种/ 新颖/ 的/ 方法/ —/ —/ —/ 时序/ 分割/ 来/ 加速/ 众核/ 结构/ 模拟/ ./ 时序/ 分割/ 的/ 提出/ 基于/ 这样/ 的/ 观察/ :/ 在/ 众核/ 结构/ 中/ ,/ 有些/ 模块/ 之间/ 频繁/ 交互/ 而/ 有/ 的/ 模块/ 之间/ 没有/ 交互/ ./ 有鉴于此/ ,/ 该/ 方法/ 将/ 目标/ 结构/ 分割/ 成/ 两/ 部分/ :/ 交互/ 部分/ 和/ 非/ 交互/ 部分/ ./ 当/ 模拟/ 交互/ 部分/ 时/ ,/ 主机/ 线程/ 严格/ 同步/ ,/ 维持/ 时序/ 精确/ ./ 当/ 模拟/ 非/ 交互/ 部分/ 时/ ,/ 主机/ 线程/ 通过/ 异步/ 运行/ ,/ 提高/ 模拟/ 速度/ ,/ 并且/ 产生/ 较/ 小/ 的/ 时序/ 损失/ ./ 文中/ 所述/ 工作/ 在/ 一个/ 16/ 核/ 的/ SMP/ 机器/ 上用/ PartitionSim/ 模拟/ 了/ 千核/ 规模/ 的/ Godson/ -/ T/ 众核/ 结构/ ./ 实验/ 结果显示/ ,/ PartitionSim/ 展示/ 出/ 良好/ 的/ 加速/ 比/ ,/ 达到/ 最高/ 25MIPS/ 的/ 模拟/ 速度/ ,/ 时序/ 损失/ 平均值/ 为/ 0.92/ %/ ./ 关键词/ 并行/ 模拟/ ;/ 众核/ ;/ Godson/ -/ T/ ;/ 时序/ 分割/ 1/ 引言/ 随着/ “/ 众核/ 时代/ ”/ 的/ 到来/ ,/ 一些/ 众核/ 处理器/ [/ 1/ -/ 2/ ]/ 已经/ 出现/ ./ 在/ 单芯片/ 上/ 集成/ 上千/ 核/ 已经/ 可以/ 实现/ [/ 3/ ]/ ,/ 并/ 将/ 在/ 不远/ 的/ 未来/ 商用化/ ./ 模拟/ 这样/ 的/ 并行/ 结构/ 是/ 个/ 巨大/ 的/ 挑战/ ./ 目前/ ,/ 大多数/ 模拟器/ 都/ 是/ 串行/ 的/ ./ 串行/ 模拟器/ 用/ 一个/ 主机/ 线程/ 来/ 模拟/ 整个/ 目标/ 系统/ ./ 当/ 目标/ 系统/ 的/ 核数/ 增加/ 时/ ,/ 分配/ 给/ 单个/ 核/ 的/ 模拟/ 性能/ 就/ 会/ 下降/ ./ 目前/ 已经/ 有/ 许多/ 方法/ 被/ 用来/ 加速/ 模拟/ ./ 这些/ 方法/ 包括/ 并行/ 模拟/ [/ 4/ -/ 6/ ]/ 、/ 直接/ 执行/ [/ 6/ ]/ 、/ FPGA/ 加速/ [/ 7/ ]/ 等等/ ./ 在/ 这些/ 加速/ 技术/ 中/ ,/ 并行/ 模拟/ 因为/ 能够/ 利用/ 目标/ 结构/ 天然/ 的/ 并行/ 特征/ ,/ 能/ 在/ 低成本/ SMP/ 计算机/ 上/ 实现/ ,/ 成为/ 了/ 最/ 有/ 吸引力/ 的/ 加速/ 技术/ ./ 且/ 有/ 代表性/ 的/ 并行/ 模拟/ 工作/ 是/ 基于/ 离散/ 事件驱动/ 的/ 模拟器/ PDES/ [/ 8/ ]/ ./ PDES/ 模拟器/ 分为/ 传统/ PDES/ 和/ 现代/ PDES/ ./ 传统/ 的/ PDES/ 模拟器/ 注重/ 精确性/ ./ 它们/ 或者/ 保守/ 地/ 提供/ 有限/ 的/ 同步/ 放松/ (/ quanta/ [/ 9/ ]/ 与/ lookahead/ [/ 10/ ]/ )/ ,/ 或者/ 激进/ 地/ 放松/ 同步/ 但/ 又/ 引入/ 额外/ 的/ 开销/ 来/ 应对/ 时序/ 错误/ ./ 现代/ PDES/ 模拟器/ (/ 例如/ SlackSim/ [/ 5/ ]/ 和/ Graphite/ [/ 6/ ]/ )/ 倾向/ 于/ 提高/ 模拟/ 速度/ ,/ 为此/ 不得不/ 激进/ 地/ 放松/ 同步/ 并/ 牺牲/ 精确性/ ./ 注意/ 到/ 传统/ PDES/ 和/ 现代/ PDES/ 都/ 展现出/ 相同/ 的/ 同步/ 行为/ :/ 模拟/ 目标/ 结构/ 所有/ 模块/ 时/ ,/ 要么/ 都/ 放松/ 同步/ 模拟/ ,/ 要么/ 都/ 严格/ 同步/ 模拟/ ./ 然而/ 通过/ 仔细观察/ 众核/ 结构/ 的/ 通信/ 特征/ ,/ 我们/ 发现/ :/ 有些/ 模块/ 间通信/ 频繁/ ,/ 而/ 有/ 的/ 模块/ 则/ 很少/ 通信/ ./ 这个/ 观察/ 在/ 基于/ 软件/ 管理/ Cache/ 一致性/ 的/ 众核/ 结构/ (/ IntelSCC/ [/ 2/ ]/ 、/ Rigel/ [/ 3/ ]/ 和/ Godson/ -/ T/ [/ 11/ -/ 12/ ]/ )/ 中/ 尤为/ 明显/ ./ 在/ 传统/ 的/ 带有/ 硬件/ Cache/ 一致性/ 的/ 众核/ 结构/ 中/ ,/ 一致性/ 协议/ 要求/ 频繁/ 的/ Cache/ 间通信/ ./ 准确/ 地/ 模拟/ 这些/ 通信/ 需要/ 在/ 每个/ Cache/ 访问/ 事件/ 上/ 做/ 同步/ ./ 在/ 软件/ 管理/ Cache/ 一致性/ 的/ 情况/ 下/ ,/ Cache/ 只/ 被/ 本地/ 的/ 小核/ 访问/ ./ Cache/ 间/ 没有/ 通信/ ./ 模拟/ 这样/ 的/ Cache/ 不/ 需要/ 同步/ ./ 一旦/ Cache/ 可以/ 被/ 异步/ 模拟/ ,/ 那么/ 整个/ 小核/ (/ 流水线/ +/ Cache/ )/ 就/ 可以/ 被/ 异步/ 模拟/ ./ 有鉴于此/ ,/ 本文/ 的/ 基本/ 思想/ 如下/ :/ 当/ 模拟/ 一个/ 软件/ Cache/ 一致/ 的/ 众核/ 结构/ 时/ ,/ 放松/ 对小核/ 的/ 同步/ 模拟/ 可以/ 提高/ 模拟/ 速度/ 并且/ 损失/ 很小/ 的/ 准确度/ ./ 基于/ 这个/ 想法/ ,/ 本文/ 提出/ 了/ 新/ 的/ 模拟/ 方法/ :/ 时序/ 分割/ ./ 时序/ 分割/ 是/ 把/ 目标/ 时序/ 模块/ 分为/ 两/ 部分/ :/ 非/ 交互/ 部分/ 和/ 交互/ 部分/ ./ 非/ 交互/ 部分/ 被/ 异步/ 模拟/ ,/ 交互/ 部分/ 被/ 严格/ 地/ 同步/ 模拟/ ./ 在/ 本文/ 中/ ,/ 我们/ 把/ 所/ 提出/ 的/ 众核/ 结构/ 分为/ Core/ (/ 非/ 交互/ )/ 部分/ 和/ NOC/ (/ 交互/ )/ 部分/ ./ 要/ 保证/ 时序/ 分割/ 方法/ 能够/ 工作/ ,/ 有/ 两个/ 问题/ 需要/ 解决/ :/ (/ 1/ )/ 虽然/ Core/ 与/ Core/ 之间/ 没有/ 时序/ 通信/ ,/ 但是/ Core/ 与/ NOC/ 之间/ 还有/ 通信/ ,/ 必须/ 去掉/ 这些/ 通信/ ,/ 才能/ 让/ Core/ 完全/ 、/ 自由/ 地被/ 异步/ 模拟/ ./ (/ 2/ )/ 异步/ 模拟/ Core/ 仍然/ 会/ 导致/ 时序/ 损失/ ,/ 如何/ 减少/ 这些/ 时序/ 损失/ ./ 为了/ 解决/ 上述/ 问题/ ,/ 我们/ 提出/ 了/ 两个/ 方法/ :/ 时序/ 假设/ 和/ 时序/ 重建/ ./ 时序/ 假设/ 使用/ 建模/ 估计/ 的/ 方法/ 来/ 假设/ NOC/ 到/ Core/ 之间/ 的/ 时序/ 通信/ ./ 基于/ 这些/ 假设/ 的/ 时序/ ,/ Core/ 就/ 可以/ 脱离/ NOC/ 异步/ 模拟/ ./ 然而/ ,/ 由于/ Core/ 基于/ 假设/ 的/ NOC/ -/ to/ -/ Core/ 时序/ 运行/ ,/ 那么/ 产生/ 的/ Core/ -/ to/ -/ NOC/ 时序/ 通信/ 便/ 不是/ 准确/ 的/ ./ 时序/ 重建/ 用来/ 尽量/ 准确/ 地/ 恢复/ Core/ -/ to/ -/ NOC/ 的/ 时序/ 通信/ ./ 图/ 1/ 展示/ 了/ 本文/ 的/ 基本/ 思想/ ./ 图/ 1/ 时序/ 分割/ 示意图/ (/ 目标/ 时序/ 模块/ 被/ 分为/ Core/ 和/ NOC/ ;/ 时序/ 假设/ (/ timingassuming/ )/ 去除/ Core/ 对/ NOC/ 的/ 时序/ 依赖/ ;/ 时序/ 重建/ (/ timingrebuilding/ )/ 恢复/ Core/ -/ to/ -/ NOC/ 的/ 时序/ 通信/ )/ 采用/ 时序/ 分割/ 技术/ ,/ 我们/ 构建/ 了/ 一个/ 并行/ 模拟器/ PartitionSim/ ,/ 来/ 模拟/ Godson/ -/ T/ 众核/ 架构/ ./ PartitionSim/ 使用/ POSIXthread/ (/ Pthread/ )/ 实现/ ,/ 运行/ 在/ SMPlinux/ 上/ ./ 通过/ 运行/ 移植/ 的/ SPLASH/ -/ 2/ 应用程序/ ,/ 我们/ 评估/ 了/ PartitionSim/ 在/ 模拟/ 千核/ Godson/ -/ T/ 架构/ 时/ 的/ 性能/ ./ 结果显示/ ,/ PartitionSim/ 具有/ 良好/ 的/ 加速/ 比/ ,/ 速度/ 可达/ 25MIPS/ ,/ 平均/ 时序/ 损失/ 为/ 0.92/ %/ ./ 本文/ 第/ 2/ 节/ 描述/ PartitionSim/ 的/ 系统结构/ ;/ 第/ 3/ 节/ 讨论/ 时序/ 分割/ 的/ 核心思想/ ;/ 第/ 4/ 节/ 讨论/ 实验/ 结果/ ;/ 第/ 5/ 节/ 描述/ 相关/ 工作/ ;/ 然后/ 第/ 6/ 节/ 给出/ 结论/ 和/ 未来/ 工作/ ./ Page32PartitionSim/ 体系结构/ PartitionSim/ 是/ 一个/ 面向/ 众核/ 结构/ 的/ 应用程序/ 级/ 并行/ 模拟器/ ./ 图/ 2/ 展示/ 了/ 一个/ 多线程/ 应用程序/ 如何/ 被/ 映射/ 到/ 一个/ 众核/ 处理器/ 中/ ,/ 并/ 由/ 一个/ 四核/ 的/ SMP/ 宿主机/ 模拟/ ./ 如图/ 2/ 所示/ ,/ 目标/ 众核/ 处理器/ 是/ 典型/ 的/ tile/ 设计/ ,/ 包括/ 两种/ tile/ :/ Coretile/ 和/ MC/ (/ MemoryController/ 内存/ 控制器/ )/ tile/ ./ 这些/ tile/ 被/ 一个/ 片上/ mesh/ 网络连接/ 起来/ ./ 每个/ Coretile/ 包含/ 一个/ 小核/ ,/ 一个/ 共享/ L2/ $/ 和/ 一个/ router/ ./ 每个/ MCtile/ 包含/ 一个/ router/ 和/ 一个/ 内存/ 控制器/ ./ MCtile/ 放置/ 在/ mesh/ 网络/ 两侧/ ./ 内存/ 控制器/ 的/ 带宽/ 可以/ 配置/ 以便/ 模拟/ 不同/ 的/ 片外/ 带宽/ ./ PartitionSim/ 采用/ 模块化/ 设计/ ,/ 它/ 包含/ 一个/ 功能模块/ 和/ 多个/ 时序/ 模块/ ./ 功能模块/ 和/ 小核/ 的/ 时序/ 模块/ 合/ 起来/ 称为/ Coremodel/ ,/ 其它/ 的/ 时序/ 模块/ :/ router/ 、/ L2/ $/ 和/ MC/ 合/ 起来/ 称为/ NOCmodel/ ./ 这些/ 模块/ 均/ 来自/ Godson/ -/ T/ 众核/ 模拟器/ GAS/ [/ 13/ ]/ ,/ 其/ 正确性/ 和/ 准确性/ 都/ 是/ 被/ Godson/ -/ T/ 原型/ 芯片/ [/ 12/ ]/ 验证/ 过/ 的/ ./ 如图/ 2/ 所示/ ,/ 在/ PartitionSim/ 里/ 一共/ 有/ 两种/ 线程/ :/ AP/ (/ Async/ -/ Parallel/ )/ 线程/ 和/ SP/ (/ Sync/ -/ Parallel/ )/ 线程/ ./ AP/ 线程/ 模拟/ Coremodel/ ,/ SP/ 线程/ 模拟/ NOCmodel/ ./ 图/ 3/ 展示/ 了/ PartitionSim/ 的/ 详细/ 实现/ ./ AP/ 线程/ 之间/ 异步/ 运行/ ,/ SP/ 线程/ 之间/ 每个/ 时钟/ 周期/ 都/ 需要/ 同步/ ./ 注意/ ,/ 当/ 目标程序/ 中有/ 同步/ 时/ ,/ AP/ 线程/ 也/ 要/ 同步/ 以/ 保证/ 正确性/ ./ AP/ 线程/ 输出/ trace/ 给/ SP/ 线程/ ./ SP/ 线程/ 借助/ 这些/ trace/ 来/ 完成/ NOC/ 部分/ 的/ 时序模拟/ ./ 每个/ trace/ 单元/ 包含/ 一个/ 时间/ 戳/ 、/ 事件/ 类型/ 和/ 相关/ 的/ 地址/ 或者/ 数据/ ./ 在/ 目前/ 的/ 设计/ 中/ ,/ AP/ 线程/ 把/ trace/ 写入/ 文件/ ,/ 然后/ 由/ SP/ 线程/ 读出来/ ./ 这样/ 的/ 内存/ —/ 磁盘/ —/ 内存/ 的/ 方式/ 简化/ 了/ 模拟器/ 的/ 设计/ ,/ 同时/ 又/ 能/ 方便/ 评估/ AP/ 线程/ 和/ SP/ 线程/ 的/ 时间/ 开销/ ./ 另外/ ,/ 以/ 文件/ 形式/ 存在/ 的/ trace/ 可以/ 节省/ 后续/ 重复/ 模拟/ 的/ 时间/ ,/ 这/ 在/ 模拟/ 不同/ 参数/ 的/ 片/ 上/ 网络/ 时/ 尤其/ 有效/ ,/ 因为/ Core/ 部分/ 不/ 需要/ 重复/ 模拟/ ,/ 只/ 需要/ 直接/ 读入/ trace/ 文件/ ./ 相应/ 地/ ,/ 整个/ 模拟/ 时间/ 也/ 被/ 分为/ AP/ 时间/ 和/ SP/ 时间/ ./ AP/ 时间/ 又/ 被/ 分为/ APS/ (/ APSequential/ )/ 时间/ 和/ APP/ (/ APParallel/ )/ 时间/ ./ APS/ 时间/ 指/ 模拟器/ 模拟/ 目标程序/ 串行/ 阶段/ 的/ 时间/ ./ 目标程序/ 串行/ 阶段/ 是/ 目标程序/ 只有/ 一个/ 活动/ 线程/ 的/ 阶段/ ./ APP/ 时间/ 是/ 指/ 模拟器/ 模拟/ 目标程序/ 并行/ 阶段/ 的/ 时间/ ./ SP/ 时间/ 被/ 划分/ 成/ SPW/ (/ SPWorkload/ )/ 和/ SPB/ (/ SPBarrier/ )/ 时间/ ./ SPW/ 是/ 指/ SP/ 线程/ 的/ 负载/ 开销/ (/ Workload/ )/ 时间/ ,/ SPB/ 是/ 指/ SP/ 线程/ 的/ 同步/ (/ Barrier/ )/ 开销/ 时间/ ./ APS/ 部分/ 被/ 单个/ 线程/ 模拟/ ,/ 模拟/ 时间/ 不会/ 因为/ 宿主机/ 的/ 核数/ 变化/ 而/ 变化/ ./ APP/ 部分/ 由/ 多/ AP/ 线程/ 异步/ 并行/ 模拟/ ,/ 是/ 并行/ 加速/ 比/ 的/ 主要/ 贡献者/ ./ 对于/ SPW/ 和/ SPB/ ,/ 当/ 主机/ 核数/ 增大/ 时/ ,/ SPW/ 时间/ 因为/ 并行/ 模拟/ 而/ 减少/ ,/ SPB/ 时间/ 因为/ 同步/ 开销/ 增大/ 而/ 增加/ ./ Page43/ 时序/ 分割/ 这/ 一节/ 讨论/ 时序/ 分割/ 的/ 关键/ :/ 时序/ 假设/ 和/ 时序/ 重建/ ./ 下面/ ,/ 我们/ 将/ 以/ Cache/ -/ Miss/ -/ Refill/ 事件/ 为/ 例来/ 解释/ 时序/ 假设/ 和/ 时序/ 重建/ 的/ 工作/ 原理/ ./ 一个/ Cache/ -/ Miss/ -/ Refill/ 事件/ 包含/ 一个/ Cache/ -/ Miss/ (/ Cache/ 失/ 命中/ )/ 事件/ 和/ 对应/ 的/ Cache/ -/ Refill/ (/ Cache/ 回填/ )/ 事件/ ./ 当/ 一个/ Core/ 时序/ 模块/ 发出/ 一个/ Cache/ -/ Miss/ 事件/ 时/ ,/ 它会/ 粗略/ 计算/ 相应/ 的/ Cache/ -/ Miss/ -/ Refill/ 延迟/ ,/ 包括/ 片上/ 网络/ 延迟/ 、/ L2/ $/ 处理/ 时间/ 和/ 可能/ 的/ 片外/ 延迟/ ./ 在/ PartitionSim/ 中/ ,/ 我们/ 采用/ 简单/ 的/ 算法/ 来/ 估计/ 这些/ 延迟/ :/ 片上/ 网络/ 的/ 延迟/ 通过/ 一个/ 片上/ 网络/ 拥塞/ 模型/ 来/ 计算/ ;/ L2/ $/ 的/ miss/ // hit/ 信息/ 和/ 可能/ 的/ 片外/ 延迟/ 由/ 简单/ 的/ 估计/ 模型/ 来/ 预测/ ./ 在下文/ 中/ ,/ 我们/ 用/ AL/ (/ AssumedLatency/ )/ 和/ RL/ (/ RealLatency/ )/ 指代/ 假设/ 和/ 真实/ 的/ Cache/ -/ Miss/ -/ Refill/ 延迟/ ./ Core/ 计算/ 出/ AL/ 后/ ,/ 会/ 根据/ AL/ 来/ 继续/ 模拟/ Coremodel/ ,/ 直到/ Core/ 完全/ 被/ 阻塞/ 或者/ Cache/ -/ Refill/ 事件/ 发生/ ./ 在/ 这个/ 过程/ 中/ 所/ 模拟/ 的/ 目标/ 时序/ 被/ 称为/ 重叠/ 时序/ (/ Overlappingcycles/ )/ ./ 重叠/ 时序/ 可以/ 很/ 容易/ 地/ 从/ 现代/ 流水线/ 处理器/ 架构/ 中/ 观察/ 到/ ./ 例如/ ,/ 当/ 一个/ 访存/ 请求/ 在/ Cache/ 中/ 发生/ miss/ 并/ 等待/ 回填/ 时/ ,/ 流水线/ 可以/ 继续执行/ 流水线/ 上/ 的/ 指令/ ./ 此时/ ,/ 核外/ 时序/ 和/ 核内/ 时序/ 就/ 会/ 有/ 重叠/ ./ 图/ 4/ (/ a/ )/ 描述/ 了/ 重叠/ 时序/ 的/ 一个/ 简单/ 示意/ ./ 接下来/ ,/ 为了/ 方便/ 讨论/ ,/ 我们/ 会用/ MO/ (/ MaximumOverlappingcycles/ )/ 来/ 表示/ 一个/ 小核/ 在/ 无限大/ 回填/ 时间/ 情况/ 下/ 发生/ 的/ 重叠/ 时序/ ./ NOC/ 模块/ 接收/ Core/ 模块/ 发来/ 的/ Cache/ -/ Miss/ 事件/ ,/ 重建/ 它/ 的/ 时间/ 戳/ ,/ 然后/ 模拟/ 它/ 的/ NOC/ 时序/ ./ 重建/ 时序/ 需要/ Core/ 时序/ 模块/ 和/ NOC/ 时序/ 模块/ 的/ 协作/ ./ Core/ 维持/ 一个/ 本地/ 时钟/ ,/ 本地/ 时钟/ 不/ 包含/ 重叠/ 时序/ ./ NOC/ 记录/ 所有/ NOC/ 延迟/ 的/ 总和/ ,/ 把/ 它/ 加到/ 事件/ 的/ 时间/ 戳/ 上来/ 重建/ 其/ 事件/ 戳/ ./ 图/ 4/ (/ b/ )/ 描述/ 了/ 一个/ 时序/ 重建/ 的/ 例子/ :/ Core/ 在/ 本地/ 时钟/ 的/ 第/ 3/ 拍/ 发出/ 了/ 一个/ Cache/ -/ Miss/ 事件/ ;/ NOC/ 模拟/ 这个/ 事件/ 的/ Cache/ -/ Miss/ -/ Refill/ 延迟/ (/ 时间/ 戳/ 为/ 10/ )/ 并且/ 记录下来/ 为/ 下次/ 时序/ 重建/ 准备/ ;/ 于/ 此/ 同时/ Core/ 继续/ 模拟/ 重叠/ 时序/ ,/ 注意/ 此时/ Core/ 的/ 本地/ 时钟/ 被/ 关闭/ 并且/ 不/ 记录/ 重叠/ 时序/ ./ 当/ 重叠/ 时序/ 耗尽/ 时/ ,/ Core/ 重新/ 打开/ 本地/ 时钟/ 继续/ 模拟/ ./ 在/ 本地/ 时钟/ 第/ 8/ 拍/ ,/ Core/ 发出/ 第/ 2/ 个/ Cache/ -/ Miss/ 事件/ (/ 时间/ 戳/ 为/ 8/ )/ ./ NOC/ 模块/ 重建/ 其/ 时间/ 戳/ 为/ 18/ (/ 18/ =/ 8/ +/ 10/ )/ ,/ 然后/ 再用/ 它/ 去/ 模拟/ NOC/ 延迟/ ./ 当/ MO/ </ AL/ 并且/ MO/ </ RL/ 时/ ,/ 也就是说/ ,/ 不管/ 是/ 在/ 假设/ 的/ 时序/ 下/ ,/ 还是/ 在/ 真实/ 时序/ 下/ ,/ 一个/ Core/ 都/ 会/ 在/ Cache/ -/ Miss/ 后/ ,/ Cache/ -/ Refill/ 前/ 阻塞/ ./ 此时/ ,/ AL/ 和/ RL/ 的/ 差别/ 并/ 不/ 影响/ 时序/ 重建/ 的/ 结果/ ,/ 因为/ 两种/ 情况/ 下/ 的/ 重叠/ 时序/ 是/ 相同/ 的/ ./ 实时/ 上/ ,/ 现代/ 众核/ 结构/ 多/ 采用/ 简单/ 的/ 顺序/ 小核/ 和/ 通用/ 的/ 互联网络/ ./ 在/ 这种/ 情况/ 下/ ,/ 核/ 外访/ 存/ 的/ 延迟/ (/ NOC/ 延迟/ )/ 往往/ 要/ 大于/ 小核/ 可以/ 运行/ 的/ 重叠/ 时序/ ./ 在/ 这种/ 情况/ 下/ ,/ 本文/ 提出/ 的/ 时序/ 重建/ 工作/ 就/ 能/ 准确/ 地/ 恢复/ Core/ -/ to/ -/ NOC/ 的/ 通信/ 时序/ ./ 在/ 某些/ 情况/ 下/ ,/ Core/ 在/ 阻塞/ 前/ 连发/ 两个/ Cache/ -/ Miss/ (/ 例如/ ,/ 指令/ Cache/ -/ Miss/ 和/ 数据/ Cache/ -/ Miss/ )/ ./ 在/ 这些/ 情况/ 下/ ,/ Core/ 会/ 假设/ 相应/ 的/ Cache/ -/ Refill/ 事件/ 是/ 串行/ 发生/ ,/ 并且/ 间隔/ 足够/ 的/ 时间/ ./ 虽然/ 这个/ 假设/ 是/ 不/ 准确/ 的/ ,/ 但/ 这种/ 时序/ 损失/ 是/ 有限/ 的/ ,/ 因为/ 这种/ 情况/ 是/ 小/ 概率/ 事件/ ./ 在/ 现代/ 处理器/ 中/ ,/ L1/ $/ 的/ 命中率/ 经常/ 超过/ 95/ %/ ,/ 指令和数据/ Cache/ -/ Miss/ 的/ 概率/ 更/ 小/ ./ 4/ 实验/ 这节/ 介绍/ 相关/ 实验/ 和/ 结果/ ./ 4.1/ 节/ 描述/ 了/ 主机/ 和/ 目标/ 结构/ 配置/ ./ 4.2/ 和/ 4.3/ 节/ 讨论/ PartitionSim/ 的/ 模拟/ 速度/ 和/ 精确度/ ./ 4.4/ 节对/ PartitionSim/ 和/ 传统/ PDES/ 、/ Graphite/ 进行/ 比较/ ./ 4.1/ 实验/ 环境/ 本/ 实验/ 的/ 宿主机/ 是/ 一个/ 16/ 核/ 的/ Intel/ (/ R/ )/ Xeon/ (/ R/ )/ E7420CPUs/ ,/ 主频/ 2.13/ GHz/ ,/ 内存大小/ 128GBDRAM/ ./ 操作系统/ 是/ RedHatSMPLinux/ ,/ kernel/ 版本/ 是/ 2.6/ ./ 18/ ./ 模拟/ 目标/ 结构/ 是/ 4/ 种千核/ Godson/ -/ T/ 架构/ ,/ 分别/ 命名/ 为/ T1024/ ,/ T2048/ ,/ T4096/ 和/ T8192/ ./ 4/ 种/ 结构/ 的/ 配置/ 都/ 列/ 在/ 表/ 1/ 中/ ./ 以/ T1024/ 为例/ ,/ 1024/ 个/ Page5Coretile/ 和/ 64/ 个/ MCtile/ 连接/ 在/ 一个/ 34/ ×/ 32/ 的/ 片/ 上/ 网络/ 上/ ./ 关于/ Godson/ -/ T/ 和/ 它/ 的/ 软件/ 管理/ Cache/ 一致性/ 的/ 实现/ 可以/ 参照/ 文献/ [/ 10/ ,/ 14/ ]/ ./ 对于/ 目标程序/ ,/ 我们/ 模拟/ 了/ SPLASH/ -/ 2/ 里/ 3/ 个/ 具有/ 代表性/ 的/ 程序/ (/ lu/ ,/ radix/ 和/ fft/ )/ 和/ 一个/ 矩阵/ 乘/ 算法/ matrix/ ./ 表/ 2/ 列举/ 了/ 这些/ 测试程序/ 的/ 负载/ 参数/ ./ 目标程序/ T1024T2048T4096T8192/ 注/ :/ 时钟/ 频率/ :/ 1GHz/ ;/ L1/ (/ D/ // I/ )/ Cache/ :/ Private/ ,/ 32KB/ (/ percoretile/ )/ ,/ 32Bytelinesize/ ,/ 4/ -/ wayassociative/ ,/ LRUreplacement/ ;/ L2Cache/ :/ shared/ ,/ 128KB/ (/ perL2/ $/ tile/ )/ ,/ 64Bytelinesize/ ,/ 8/ -/ wayassociative/ ,/ LRUreplacement/ ;/ OFF/ 芯片/ 延迟/ :/ 150cycles/ ./ 目标/ 应用/ 指令/ 数/ // 109/ 并行/ 时钟/ 周期/ // 109/ 表/ 3/ 实验/ 结果/ radix/ _/ 1024radix/ _/ 2048radix/ _/ 4096radix/ _/ 8192fft/ _/ 1024fft/ _/ 2048fft/ _/ 4096lu/ _/ 1024lu/ _/ 2048lu/ _/ 4096lu/ _/ 8192matrix/ _/ 1024matrix/ _/ 2048matrix/ _/ 4096matrix/ _/ 8192/ 从图/ 5/ 可以/ 看出/ :/ 一个/ 程序/ APP/ 比例/ 越大/ ,/ 获得/ 的/ 加速/ 比越/ 大/ ./ 如图/ 6/ 显示/ ,/ 目标程序/ 的/ APP/ 比例/ 大小/ 排序/ 是/ :/ lu/ / p01/ >/ matrix/ _/ / p01/ >/ radix/ _/ / p01/ >/ fft/ _/ / p01/ ./ 图/ 5/ 中/ 显示/ 的/ 加速/ 比/ 也/ 正好/ 符合/ 这个/ 顺/ 目标/ 函数/ matrix1024/ ×/ 1024fftradixlu1024/ ×/ 1024/ (/ 8/ ×/ 8block/ )/ 1K/ ,/ 2K/ ,/ 4K/ ,/ 8K4/ ./ 2/ 模拟/ 速度表/ 3/ 列举/ 了/ 实验/ 结果/ ,/ 包括/ 指令/ 数目/ 、/ 并行/ 时钟/ 周期/ 和/ 不同/ 数目/ 主机/ 线程/ 加速/ 下/ 的/ 运行/ 时间/ ./ 每个/ 程序/ 都/ 在/ 不同/ 的/ 架构/ 上/ 运行/ ./ 例如/ ,/ fft/ _/ 1024/ 即/ 指/ fft/ 创建/ 了/ 1024/ 个/ 线程/ ,/ 运行/ 在/ T1024/ 上/ ./ 运行/ 结果/ 对应/ 的/ MIPS/ (/ MillionInstructionsPerSecond/ )/ 值/ (/ 指令/ 数目/ // 运行/ 时间/ )/ 显示/ 在/ 图/ 5/ 上/ ./ 模拟/ 时间/ 比例/ 分布/ 显示/ 在/ 图/ 6/ 上/ ./ 11880695254770287318212482911939613032191708359481846689974459208472947361921634977194347325162319418300141091257144952298532140016401146496476644020285432043415634275961478076504778275754764265451395074214205114893534412617513742709027682013323655111264441362610173494124571310766128425940282413768281497178093408146867916751992547681915898/ 序/ ./ 这/ 是因为/ APP/ 部分/ 是/ 完全/ 异步/ 模拟/ 的/ ,/ 是/ 并行/ 模拟/ 最/ 受益/ 的/ 部分/ ./ 注意/ ,/ fft/ _/ / 展示/ 出/ 最坏/ 的/ 加速/ 比/ ,/ 这/ 是因为/ 它/ 的/ APP/ 比例/ 最小/ ,/ 并且/ APS/ 比例/ 最大/ ,/ 因为/ APS/ 部分/ 是/ 串行/ 模拟/ 的/ ,/ 并/ 不能/ 从/ 并行/ 模拟/ 中/ 获益/ ./ 尽管/ 同步/ 代价/ (/ SPB/ 的/ 时间/ 比例/ )/ 随着/ 主机/ 核数/ 增加/ 而/ 增加/ ,/ 但是/ 加速/ 比/ 却/ 没有/ 显著/ 降低/ ./ 这/ 是因为/ SPB/ 的/ 比例/ 相比/ 其它/ 部分/ 小/ (/ 图/ 6/ )/ ./ 出现/ 这个/ 现象/ 是因为/ :/ 在/ 千核/ 情况/ 下/ ,/ 每个/ 主机/ 线程/ 要/ 模拟/ 上/ 百个/ 目标/ 小核/ ,/ 庞大/ 的/ 工作量/ 完全/ 淹没/ 了/ 同步/ 开销/ 的/ 效果/ ./ 4.3/ 模拟/ 精度/ 图/ 7/ 展示/ 了/ 4/ 个/ 目标/ 应用/ 的/ 模拟/ 精确度/ ./ 精确度/ 是/ 通过/ 与/ 串行/ 模拟/ 的/ 时序/ 结果/ 比较/ 得来/ 的/ (/ 串行/ Page6/ 图/ 6radix/ _/ / (/ a/ )/ ,/ fft/ _/ / (/ b/ )/ ,/ lu/ _/ / (/ c/ )/ ,/ andmatrix/ _/ / (/ d/ )/ 的/ 模拟/ 时间/ 分布/ 模拟/ 的/ 时序/ 结果/ 作为/ 我们/ 的/ “/ 黄金/ ”/ 标准/ )/ ./ 如图/ 6/ 所示/ ,/ 时序/ 错误/ (/ Error/ )/ 都/ 小于/ 1.4/ %/ ./ 因为/ 大多数/ Cache/ -/ Miss/ -/ Refill/ 事件/ 都/ 符合/ MO/ </ AL/ 并且/ MO/ </ RL/ ./ 为了/ 证明/ 这样/ 的/ 解释/ ,/ 我们/ 从/ fft/ _/ 1024/ ,/ lu/ _/ 1024/ ,/ radix/ _/ 1024/ ,/ andmatrix/ _/ 1024/ 中/ 分别/ 采样/ 了/ 1M/ 时钟/ 周期/ ./ 在/ 这些/ 时间/ 里/ ,/ 对/ 每个/ 事件/ 记录/ 3/ 个/ 参数/ :/ AL/ 、/ RL/ 和/ MO/ ./ 把/ 所有/ 目标/ 小核/ 的/ 所有/ 事件/ 的/ 这/ 3/ 个/ 参数/ 加/ 起来/ 形成/ 了/ 图/ 8/ 的/ 结果/ ./ 从图/ 中/ 可以/ 看出/ ,/ MO/ </ AL/ </ RL/ ./ 这/ 符合/ MO/ </ AL/ 并且/ MO/ </ RL/ ./ 一个/ 有趣/ 的/ 现象/ 是/ ,/ fft/ _/ / 虽然/ 有/ 最大/ 的/ 串行/ 部分/ (/ APS/ )/ ,/ 但/ 却/ 表现/ 出/ 最大/ 的/ 时序/ 错误/ ./ 仔细分析/ 这个/ 程序/ ,/ 我们/ 发现/ ,/ fft/ _/ / 相比/ 于/ 其它/ 程序/ ,/ 有/ 更/ 多/ 时序/ 违例/ 的/ 可能/ ./ 这/ 是因为/ fft/ 的/ 程序/ 特征/ :/ 数据/ 局部性/ 差/ ,/ 片上/ 通信/ 频繁/ ,/ 长/ 延迟/ 指令/ 最多/ ./ fft/ _/ 1024/ 的/ 第一级/ Cache/ 的/ 命中率/ 为/ 94.3/ %/ ,/ 这要/ 低于/ radix/ _/ 1024/ (/ 98.9/ %/ )/ ,/ lu/ _/ 1024/ (/ 99.9/ %/ )/ 和/ matrix/ (/ 99.9/ %/ )/ ./ 频繁/ 的/ Cache/ -/ Miss/ 事件/ 会/ 增大/ 并发/ Cache/ -/ Miss/ 的/ 可能/ ./ 另外/ ,/ 在/ fft/ 里/ ,/ 除法/ 指令/ 的/ 比例/ 约/ 为/ 3/ %/ ,/ 在/ Godson/ -/ T/ 小核/ 中/ ,/ 一个/ 单精度/ 除法/ 指令/ 最/ 多/ 耗费/ 11/ 个/ 时钟/ 周期/ ,/ 一个双/ 精度/ 除法/ 指令/ 最/ 多/ 耗费/ 17/ 个/ 时钟/ 周期/ ./ 这些/ 长/ 延迟/ 指令/ 容易/ 导致/ 超过/ AL/ 和/ RL/ 的/ 重叠/ 时序/ ./ 这/ 两种/ 情况/ 导致/ fft/ / 的/ 时序/ 重建/ 效果/ 相对/ 较差/ ,/ 从而/ 产生/ 相对/ 大/ 的/ 时序/ 错误/ ./ 4.4/ 模拟/ 比较/ 这/ 一节/ 列出/ 了/ 相关/ 的/ 比较/ 实验/ ./ 第/ 1/ 个/ 实验/ 是/ 比较/ PartitionSim/ 和/ 传统/ PDES/ 方法/ ,/ 其中/ 传统/ PDES/ 方法/ 以/ 按/ 拍/ 同步/ 的/ 方式/ 并行/ 模拟/ ./ 如图/ 9/ 所示/ ,/ PartitionSim/ 无论是/ 在/ 绝对速度/ (/ MIPS/ )/ 还是/ 在/ 加速/ 比上/ 都/ 比/ 传统/ PDES/ 方案/ 要/ 好/ ./ 这/ 是因为/ 传统/ PDES/ 方法/ 需要/ 每个/ 主机/ 线程/ 在/ 每/ 拍/ 都/ 要/ 遍历/ 所有/ 相关/ 目标/ 模块/ (/ Core/ 、/ Router/ 和/ L2/ $/ )/ ,/ 导致/ 很差/ 的/ Cache/ 利用率/ ./ 这/ 一点/ 可以/ 从/ 比较/ 两种/ 方法/ 的/ 串行/ 模拟/ 看/ 出来/ ./ 如图/ 9/ 所示/ ,/ 串行/ 模拟/ 时/ ,/ PartitionSim/ 要/ 明显/ 快于/ PDES/ :/ radix/ _/ 1024/ 快/ 76/ %/ ,/ lu/ _/ 1024/ 快/ 60/ %/ ,/ matrix/ _/ 1024/ 快/ 80/ %/ ,/ lu/ _/ 1024/ 快/ 200/ %/ ./ 第/ 2/ 个/ 实验/ 是/ 比较/ PartitionSim/ 与/ Graphite/ ./ Page7/ 图/ 84/ 个/ 程序/ 中/ 采样/ 的/ 1M/ 时钟/ 周期/ 中/ 的/ AL/ (/ 上面/ )/ ,/ RL/ (/ 中间/ )/ 和/ MO/ (/ 下面/ )/ 图/ 9PartitionSim/ (/ ./ par/ )/ 和/ 传统/ PDES/ (/ ./ PDES/ )/ 模拟/ 速度/ 比较/ 图/ 10/ 显示/ 了/ 两个/ 模拟器/ 在/ fft/ ,/ radix/ ,/ 和/ lu/ 上/ 的/ 加速/ 比/ ./ PartitionSim/ 的/ 加速/ 比是/ 通过/ 计算/ / _/ 1024/ ,/ / _/ 2048/ ,/ / _/ 4096/ 和/ / _/ 8192/ 的/ 平均值/ 得来/ 的/ ./ Graphite/ 的/ 加速/ 比/ 来自/ 于/ 文献/ [/ 9/ ]/ ./ 注意/ Graphite/ 的/ 16/ 核/ 模拟/ 是/ 在/ 两个/ 机器/ 上/ 实现/ 的/ ./ 比较/ 结果显示/ ,/ Parti/ -/ tionSim/ 在/ 单机/ 情况/ 下/ (/ 1/ 到/ 8/ 核/ )/ 比/ Graphite/ 的/ 加速/ 比/ 稍/ 好/ ./ 对于/ 精确度/ ,/ 虽然/ PartitionSim/ 的/ 精确度/ 依赖于/ 目标程序/ 的/ 特征/ ,/ 但/ 其/ 展现/ 的/ 平均/ 时序/ 错误/ 仅为/ 0.93/ %/ ,/ 这要/ 比/ Graphite/ 低/ ,/ Graphite/ 的/ 时序/ 错误/ 在/ Lax/ 情况/ 下/ 是/ 7.5/ %/ ,/ 在/ laxP2P/ 情况/ 下/ 是/ 1.28/ %/ ,/ 在/ lax/ -/ barrier/ 情况/ 下/ 是/ 1.31/ %/ ./ PartitionSim/ 的/ 高/ 精确度/ 来自/ 它/ 的/ 时序/ 重建/ 算法/ 和/ 对/ 交互/ 部分/ (/ NOC/ )/ 的/ 按/ 拍/ 同步/ 模拟/ ./ 这种/ 同步/ 方式/ 比/ Graphite/ 的/ lax/ ,/ laxP2P/ ,/ lax/ -/ Barrier/ 的/ 都/ 要/ 严格/ ./ 图/ 10PartitionSim/ (/ ./ par/ )/ 和/ Graphite/ (/ ./ gra/ )/ 的/ 加速/ 比/ 比较/ 5/ 相关/ 工作/ 模拟/ 是/ 开发/ 新型/ 计算/ 结构/ 的/ 关键技术/ ./ 目前/ 有/ 很多/ 模拟器/ ,/ 但/ 大多数/ 是/ 串行/ 的/ ./ 串行/ 模拟器/ 运行/ 在/ Page8/ 单个/ 主机/ 线程/ 上/ ,/ 当/ 目标/ 结构/ 上/ 的/ 核数/ 越来越/ 多时/ ,/ 分配/ 给/ 单个/ 核/ 的/ 模拟能力/ 就/ 会/ 下降/ ./ 目前/ 的/ 加速/ 模拟/ 技术/ 包括/ :/ 并行/ 模拟/ [/ 4/ -/ 6/ ]/ 、/ 直接/ 执行/ [/ 6/ ]/ 、/ FPGA/ 加速/ [/ 7/ ]/ 等等/ ./ 在/ 这/ 一节/ ,/ 我们/ 对/ 与/ 本文/ 密切相关/ 的/ 工作/ 进行/ 讨论/ ,/ 包括/ :/ 传统/ PDES/ (/ 并行/ 离散/ 事件驱动/ 的/ 模拟器/ )/ 模拟器/ 、/ SlackSim/ 、/ Graphite/ 和/ COTSon/ ./ 在/ 传统/ 的/ PDES/ 模拟器/ 里/ ,/ 主线/ 程要/ 经常/ 同步/ 以/ 维持/ 系统/ 的/ 正确性/ 和/ 准确性/ ./ 放松/ 同步/ 是/ 加速/ PDES/ 的/ 主要/ 方式/ ./ 基本上/ 有/ 两种/ 放松/ 方式/ :/ 保守/ 的/ 和/ 激进/ 的/ ./ 保守/ 方法/ 非常/ 小心/ 地/ 避免/ 时序/ 违例/ ,/ 并/ 保证/ 事件/ 被/ 完全/ 顺序/ 模拟/ ./ 这方面/ 的/ 放松/ 方法/ 包括/ 文献/ [/ 14/ ]/ 的/ 时间/ 桶/ 同步/ 方式/ 、/ WWTII/ [/ 9/ ]/ 的/ 基于/ quantum/ 的/ 同步/ 方式/ 和/ 文献/ [/ 10/ ]/ 的/ 提前量/ (/ lookahead/ )/ 方式/ ./ 时间/ 桶/ (/ timebucket/ )/ 同步/ 方式/ 把/ 模拟/ 过程/ 分成/ T/ 周期/ 的/ 间隔/ ,/ 并行/ 的/ 线程/ 每隔/ T/ 个/ 时钟/ 周期/ 同步/ 一次/ ./ T/ 被/ 定义/ 为/ 目标/ 模块/ 的/ 最小/ 交互/ 延迟/ ./ 基于/ quantum/ 的/ 同步/ 方式/ 与/ 时间/ 桶/ 的/ 方式/ 很/ 相似/ ./ “/ quantum/ ”/ 也/ 就是/ 时间/ 桶/ 里/ 的/ 时钟/ 周期/ 间隔/ T/ ./ 唯一/ 的/ 不同/ 是/ quantum/ 是/ 动态/ 计算/ 而来/ 的/ ./ 在/ 提前量/ 方法/ 中/ ,/ 接收/ 事件/ 的/ Core/ 会/ 得到/ 一个/ 提前量/ L/ ,/ 然后/ 对/ 这个/ 小核/ 就/ 可以/ 安全/ 地/ 模拟/ L/ 个/ 时钟/ 周期/ 而/ 不/ 需要/ 同步/ ./ 激进/ 的/ 放松/ 方法/ 允许/ 时序/ 违例/ 发生/ ,/ 但是/ 一旦/ 它/ 检测/ 到/ 时序/ 违例/ ,/ 就/ 会/ 发生/ 回滚/ ./ 代表性/ 模拟器/ 包括/ GTW/ [/ 4/ ]/ ./ 最/ 著名/ 的/ 激进/ 方法/ 是/ TimeWarp/ [/ 14/ ]/ 操作系统/ 中/ 采用/ 的/ 技术/ ./ 这种/ 技术/ 周期性地/ 设置/ 检查点/ ,/ 一旦/ 发现/ 时序/ 违例/ 就/ 回滚/ 到/ 最近/ 的/ 检查点/ ,/ 然后/ 以此/ 为/ 起点/ 重起/ 安全/ 模拟/ ./ 虽然/ 激进/ 的/ PDES/ 方案/ 提供/ 更/ 多/ 的/ 放松/ ,/ 但是/ 代价/ 昂贵/ ./ 首先/ ,/ 必须/ 有/ 额外/ 的/ 时间/ 和/ 空间/ 开销/ 来/ 保存/ 检查点/ ./ 第二/ ,/ 额外/ 的/ 时间/ 和/ 空间/ 来/ 传递/ 和/ 保存/ 额外/ 的/ 消息/ 和/ 事件/ (/ 如/ GTW/ 中/ 的/ anti/ -/ messages/ )/ ./ 第三/ ,/ 回滚/ 和/ 重新/ 执行/ 都/ 会/ 耗费/ 存储/ 和/ 计算资源/ ./ 另外/ ,/ 如果/ 放松/ 的/ 尺度/ 过大/ ,/ 时序/ 违例/ 和/ 回滚/ 就/ 更/ 容易/ 发生/ ,/ 会/ 降低/ 模拟/ 效率/ ./ 与/ 传统/ PDES/ 模拟器/ 不同/ 的/ 是/ ,/ 现代/ PDES/ 模拟器/ 更加/ 侧重/ 速度/ ./ 典型/ 的/ 模拟器/ 有/ SlackSim/ 和/ Graphite/ ./ 在/ SlackSim/ 里/ 有/ 两种/ 主机/ 线程/ :/ Core/ 线程/ 和/ Manager/ 线程/ ./ Core/ 线程/ 和/ Manager/ 线程/ 互相/ 通信/ ,/ 构建/ 一个/ 时钟/ 窗口/ ./ 当/ 所有/ thread/ 的/ 本地/ 时钟/ 落/ 在/ 这个/ 窗口/ 里/ 时/ ,/ 就/ 可以/ 自由/ 运行/ ./ 当时/ 钟/ 差距/ 超过/ 这个/ 窗口/ 时/ ,/ 同步/ 就/ 会/ 发生/ ./ 这种/ 方法/ 相比/ 于/ 传统/ PDES/ 能/ 产生/ 更大/ 的/ 放松/ 量/ ./ 但是/ ,/ 一个/ 大/ 的/ 时钟/ 窗口/ 又/ 会/ 产生/ 更/ 多/ 的/ 时钟/ 错误/ 和/ 违例/ ./ Graphite/ 采用/ 了/ 多级/ 分布式/ 模拟/ ,/ 从而/ 提供/ 更好/ 的/ 扩展性/ ./ 然而/ ,/ 跨机/ 通信/ 的/ 高/ 延迟/ 不/ 适合/ 严格/ 的/ 同步/ 方案/ ./ 所以/ Graphite/ 不得不/ 采用/ 近似/ 估计/ 和/ 建模/ 的/ 方法/ 来/ 构建/ “/ 全局/ 时钟/ ”/ 来/ 提高/ 精确度/ ./ 时序/ 重建/ 的/ 概念/ 首先/ 由/ COTSon/ [/ 15/ ]/ 提出/ ,/ COTSon/ 是/ 一个/ 支持/ 功能/ -/ 时序/ 分割/ 的/ 模拟器/ ./ 在/ COTSon/ 里/ ,/ 时序/ 重建/ 被/ 用来/ 重建/ 自旋/ 锁/ (/ spin/ -/ lock/ )/ 的/ 时序/ ./ PartitionSim/ 是/ 一个/ 支持/ 时序/ -/ 时序/ 分割/ 的/ 模拟器/ ./ 在/ PartitionSim/ 里/ ,/ 时序/ 重建/ 主要/ 用来/ 恢复/ 被/ 假设/ 的/ 时序/ 通信/ ./ 另外/ ,/ COTSon/ 的/ 功能/ 部分/ 采用/ AMD/ 的/ SimNow/ !/ ./ SimNow/ !/ 是/ 个/ 串行/ 模拟器/ ,/ 它/ 限制/ 了/ COTSon/ 的/ 扩展性/ ./ 6/ 结论/ 和/ 下/ 一步/ 工作/ 这/ 篇文章/ 介绍/ 了/ PartitionSim/ ,/ 一个/ 面向未来/ 众核/ 结构/ 的/ 模拟器/ ,/ 并/ 提出/ 了/ 一个/ 新颖/ 的/ 并行/ 模拟/ 方法/ 来/ 提高/ 模拟/ 速度/ 并/ 产生/ 较/ 小/ 的/ 时序/ 损失/ ./ 实验/ 显示/ ,/ PartitionSim/ 在/ 模拟/ 上千/ 核/ 的/ Godson/ -/ T/ 众核/ 结构/ 时有/ 良好/ 的/ 加速/ 比/ 、/ 可观/ 的/ 速度/ 和/ 较/ 小/ 的/ 时序/ 损失/ ./ 与/ 传统/ PDES/ 和/ 现代/ PDES/ (/ Graphite/ )/ 的/ 比较/ 显示/ ,/ PartitionSim/ 具有/ 明显/ 的/ 速度/ 和/ 精度/ 优势/ ./ 本文/ 的/ 工作/ 集中/ 在/ 对/ Godson/ -/ T/ 这样/ 的/ 软件/ 管理/ 的/ Cache/ 一致性/ 众核/ 结构/ 上/ ,/ 下/ 一步/ 我们/ 将/ 研究/ 用/ 时序/ 分割/ 的/ 方法/ 去/ 模拟/ 更/ 通用/ 的/ 众核/ 结构/ ,/ 如/ 采用/ 硬件/ Cache/ 一致性/ 的/ 众核/ 结构/ ./ 

