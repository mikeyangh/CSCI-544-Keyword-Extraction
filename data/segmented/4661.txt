Page1PiBuffer/ :/ 面向/ 数据中心/ 的/ OpenFlow/ 流/ 缓存/ 管理/ 模型/ 毛健彪/ 卞/ 洪飞/ 韩彪/ 李韬/ 孙志刚/ (/ 国防科学技术大学/ 计算机/ 学院/ 长沙/ 410073/ )/ 摘要/ 基于/ OpenFlow/ 的/ SDN/ (/ SoftwareDefinedNetworking/ )/ 技术/ 在/ 数据中心/ 中/ 得到/ 广泛/ 研究/ 和/ 应用/ ,/ 如何/ 缓解/ 集中/ 的/ 控制/ 平面/ 成为/ 网络/ 性能/ 的/ 瓶颈/ 是/ 其中/ 的/ 研究/ 热点/ ./ OpenFlow/ 规范/ 提出/ ,/ 当/ 数据/ 平面/ 有/ 缓存/ 能力/ 时/ ,/ 未/ 命中/ 的/ 报文/ 仅/ 需/ 发送/ 少量/ 摘要/ 信息/ 至/ 控制器/ 触发/ 规则/ 下发/ ,/ 从而/ 减少/ 控制/ 平面/ 与/ 数据/ 平面/ 的/ 通信/ 负载/ ./ 然而/ ,/ 现有/ 的/ 缓存/ 模型/ 采用/ 报文/ 粒度/ 的/ 缓存/ 方式/ ,/ 使得/ 同/ 一条/ 流/ 的/ 多个/ 未/ 命中/ 报文/ 会/ 被/ 送/ 至/ 控制器/ 造成/ 额外/ 的/ 通信/ 负载/ ,/ 而且/ 交换机/ 处理/ 报文/ 的/ 顺序/ 会/ 导致/ 流内/ 报文/ 乱序/ ,/ 从而/ 降低/ 通信/ 的/ 性能/ ./ 针对/ 上述/ 问题/ ,/ 该文/ 提出/ 了/ 一种/ 支持/ 流内报/ 文保/ 序/ 的/ OpenFlow/ 交换机/ 流/ 缓存/ 管理/ 模型/ ./ 通过/ 基于/ 流/ 粒度/ 的/ 未/ 命中/ 报文/ 缓存/ 方式/ ,/ 进一步/ 减少/ 控制/ 平面/ 与/ 数据/ 平面/ 的/ 通信/ 开销/ ./ 通过/ 设计/ 流动/ 作/ 预处理/ 机制/ ,/ 实现/ 同/ 一条/ 流内/ 报文/ 传输/ 保序/ ./ 该文/ 分别/ 基于/ 软件/ 交换机/ OFSoftSwitch/ 与/ 硬件/ 网络/ 实验/ 平台/ NetMagic/ 对/ 该流/ 缓存/ 管理/ 模型/ 进行/ 了/ 原型/ 系统验证/ ./ 关键词/ 数据中心/ 网络/ ;/ 软件/ 定义/ 网络/ ;/ OpenFlow/ 交换机/ ;/ 流/ 缓存/ ;/ 下一代/ 互联网/ 1/ 引言/ 作为/ 云/ 计算/ 业务/ 基础设施/ 的/ 重要/ 组成部分/ ,/ 数据中心/ 网络/ 承载/ 着/ 云/ 业务/ 内部/ 以及/ 业务/ 之间/ 的/ 通信/ ./ 随着/ 不同/ 业务/ 对/ 网络资源/ 和/ 灵活性/ 的/ 需求/ 的/ 不断/ 增加/ ,/ 数据中心/ 网络/ 资源管理/ 和/ 配置/ 变得/ 越来越/ 复杂/ [/ 1/ ]/ ./ 软件/ 定义/ 网络/ (/ SoftwareDefinedNetworking/ ,/ SDN/ )/ 思想/ 通过/ 控制/ 与/ 转发/ 分离/ ,/ 将/ 网络/ 中/ 交换/ 设备/ 的/ 控制/ 逻辑/ 集中/ 到/ 一个/ 计算/ 设备/ 上/ ,/ 为/ 提升/ 网络管理/ 配置/ 能力/ 带来/ 新/ 的/ 思路/ ./ SDN/ 很/ 好/ 地/ 契合/ 了/ 数据中心/ 网络/ 的/ 集中/ 网络管理/ 、/ 灵活/ 组网/ 、/ 网络/ 性能/ 优化/ 等/ 方面/ 的/ 需求/ ./ 为此/ ,/ SDN/ 思想/ 在/ 数据中心/ 中/ 得到/ 广泛/ 研究/ [/ 2/ -/ 4/ ]/ 和/ 应用/ [/ 5/ -/ 6/ ]/ ./ OpenFlow/ 是/ SDN/ 体系/ 架构/ 中/ 一个/ 主流/ 的/ 南向/ 接口/ ,/ 实现/ 了/ 基于/ 流/ 的/ 转发/ ./ OpenFlow/ 交换机/ 作为/ “/ dumb/ ”/ 的/ 弱智/ 能/ 网络/ 转发/ 设备/ ,/ 所有/ 流/ 规则/ 由/ 远程/ 智能/ 的/ 控制/ 平面/ 下发/ ,/ 这/ 使得/ 集中/ 的/ 控制/ 平面/ 成为/ 网络/ 传输/ 性能/ 的/ 瓶颈/ ./ 由于/ 受/ 交换机/ CPU/ 性能/ 不足/ 的/ 限制/ ,/ Devoflow/ [/ 3/ ]/ 测得/ 某/ 商用/ OpenFlow/ 交换机/ 和/ 控制器/ 之间/ 的/ 流/ 建立/ 负载/ 的/ 可用/ 带宽/ 上限/ 仅为/ 17Mbit/ // s/ ./ 如何/ 提高/ 控制/ 平面/ 的/ 可扩展性/ 成为/ 当前/ 研究/ 热点/ [/ 3/ ,/ 7/ -/ 11/ ]/ ./ 在/ 不/ 影响/ 报文/ 转发/ 的/ 前提/ 下/ ,/ 尽量减少/ 控制/ 平面/ 与/ 数据/ 平面/ 的/ 通信/ 负载/ 是/ 提高/ 控制/ 平面/ 可扩展性/ 的/ 一种/ 解决/ 思路/ ./ OpenFlow/ 规范/ 1.4/ ①/ 指出/ ,/ 当/ OpenFlow/ 交换机/ 有/ 缓存/ 能力/ 时/ ,/ 可/ 支持/ 不/ 命中/ 流/ 规则/ 的/ 报文/ 缓存/ ,/ 无需/ 将/ 完整/ 报文/ 封装/ 到/ Packet/ _/ in/ 消息/ 中/ ,/ 仅/ 需要/ 封装/ 完整/ 报文/ 的/ 摘要/ 信息/ 即可/ ./ 这种/ 方式/ 减少/ 了/ 送/ 至/ 控制/ 平面/ 的/ Packet/ _/ in/ 消息/ 的/ 报文/ 大小/ ,/ 从而/ 降低/ 了/ 控制/ 平面/ 与/ 数据/ 平面/ 的/ 通信/ 开销/ ./ 据/ 我们/ 分析/ 所知/ ,/ 为/ 实现/ 简化/ 交换机/ ,/ 当前/ OpenFlow/ 交换机/ 的/ 缓存/ 管理/ 设计/ [/ 12/ -/ 13/ ]/ 采用/ 报文/ 粒度/ 的/ 通用/ 缓存/ 模式/ ,/ 即/ 交换机/ 对/ 连续/ 的/ 未/ 命中/ 报文/ 的/ 处理/ 是/ 独立/ 的/ ./ 这种/ 方式/ 存在/ 一些/ 不足/ ./ 由于/ 受/ 控制器/ 处理/ 报文/ 时间/ 以及/ 流/ 规则/ 传输/ 时间/ 和/ 装载/ 时间/ 的/ 影响/ ,/ 同/ 一条/ 流/ 的/ 前面/ 多个/ 报文/ 均会/ 因为/ 未/ 命中/ 流/ 规则/ 而/ 产生/ 大量/ 的/ 突发/ Packet/ _/ in/ 消息/ 至/ 控制器/ ./ 在/ 数据中心/ 流量/ 快速/ 动态变化/ 的/ 特性/ 下/ [/ 14/ ]/ ,/ 面向/ 连接/ 的/ TCP/ 流/ 也/ 会/ 出现/ 前面/ 多个/ 数据/ 报文/ 未/ 命中/ 流/ 规则/ 而/ 被/ 送/ 至/ 控制器/ 的/ 情况/ ,/ 具体分析/ 见/ 2.1/ 节/ ./ 但/ 对于/ 控制器/ 下发/ 流/ 规则/ 来说/ ,/ 为/ 保证/ 一致性/ 和/ 减少/ 控制器/ 的/ 处理/ 负载/ ,/ 一条/ 流只/ 需/ 获取/ 一个/ 报文/ ,/ 而/ 无需/ 了解/ 该流/ 的/ 后续/ 报文/ ./ 此外/ ,/ 交换机/ 为了/ 防止/ 产生/ 更/ 多/ 的/ 未/ 命中/ 报文/ Packet/ _/ in/ 消息/ ,/ 流/ 规则/ 将/ 先/ 被/ 迅速/ 装载/ 至/ 流表中/ ,/ 然后/ 用于/ 释放/ 交换机/ 中/ 的/ 缓存/ 报文/ ./ 但/ 这样/ 会/ 导致/ 同/ 一条/ 流/ 的/ 后续/ 报文/ 先于/ 缓存/ 的/ 报文/ 发送/ ,/ 造成/ 流内/ 报文/ 乱序/ ./ 乱序/ 报文/ 到达/ 接收/ 方后/ ,/ 需要/ 重新/ 排序/ 后/ 才能/ 交给/ 上层/ 应用/ ,/ 该/ 重组/ 过程/ 会/ 给/ 端系统/ 带来/ 额外/ 开销/ ./ 而且/ 对于/ TCP/ 流/ ,/ 报文/ 乱序/ 会/ 导致/ 通信/ 传输/ 带宽/ 显著/ 下降/ [/ 15/ ]/ ./ 为/ 进一步/ 减少/ 控制/ 平面/ 与/ 数据/ 平面/ 的/ 通信/ 开销/ 以及/ 解决/ 流内/ 报文/ 乱序/ 问题/ ,/ 本文/ 提出/ 了/ 一种/ 支持/ 流内报/ 文保/ 序/ 的/ OpenFlow/ 交换机/ 流/ 缓存/ 管理/ 模型/ Pi/ (/ Packet/ _/ in/ )/ Buffer/ ./ 该/ 模型/ 是/ 对/ 原有/ OpenFlow/ 报文/ 处理/ 方式/ 的/ 增强/ 和/ 补充/ ./ PiBuffer/ 通过/ PiBT/ (/ Packet/ _/ inBufferTable/ )/ 表/ ,/ 记录/ 同/ 一条/ 流/ 的/ 不/ 命中/ 报文/ 是否/ 已/ 向/ 控制器发送/ 过/ Packet/ _/ in/ 消息/ ,/ 控制/ 该流/ 只有/ 一个/ Packet/ _/ in/ 消息/ 被/ 送往/ 控制器/ ,/ 并/ 将/ 未/ 命中/ 的/ 报文/ 以流/ 粒度/ 的/ 形式/ 缓存/ ./ 此外/ ,/ 通过/ 设计/ 流动/ 作/ 预处理/ 机制/ ,/ 按/ 报文/ 先后顺序/ 调度/ 已/ 缓存/ 报文/ 和/ 新/ 命中/ 规则/ 报文/ ,/ 实现/ 流内报/ 文保/ 序/ 转发/ ./ 本文/ 的/ 主要/ 贡献/ 如下/ :/ (/ 1/ )/ 分析/ 现有/ 通用/ 缓存/ 模型/ 存在/ 的/ 不足/ ,/ 指出/ 报文/ 粒度/ 的/ 缓存/ 会/ 产生/ 多余/ 的/ Packet/ _/ in/ 请求/ ,/ 增加/ 交换机/ 与/ 控制器/ 的/ 负担/ ,/ 同时/ 会/ 引起/ 报文/ 乱序/ ./ (/ 2/ )/ 提出/ 流/ 粒度/ 的/ 缓存/ 模型/ PiBuffer/ ,/ 以流/ 的/ 粒度/ 存储/ 未/ 命中/ 流/ 的/ 报文/ ,/ 减少/ SDN/ 控制/ 平面/ 与/ 数据/ 平面/ 的/ 通信/ 开销/ ,/ 实现/ 流内/ 保序/ 转发/ ./ (/ 3/ )/ 分别/ 基于/ 软件/ OpenFlow/ 交换机/ OFSoft/ -/ Switch/ ②/ 和/ NetMagic/ 网络/ 硬件/ 实验/ 平台/ ③/ 对/ PiBuffer/ 进行/ 了/ 原型/ 系统/ 实现/ 与/ 验证/ ,/ 为/ OpenFlow/ 交换机/ 流/ 缓存/ 实现/ 提供/ 参考/ 设计/ ./ 2/ 问题/ 描述/ 2.1/ 数据中心/ One/ -/ wayFlow/ -/ setup/ 方式/ 与/ 流量/ 特性/ 基于/ OpenFlow/ 的/ 数据中心/ [/ 2/ -/ 4/ ]/ 在/ 以/ 被动/ 触发式/ 建立/ 转发/ 路径/ 时/ 通常/ 采用/ “/ One/ -/ wayFlow/ -/ setup/ ”/ 的/ 方式/ ,/ 以/ 减少/ 流/ 建立/ 的/ 开销/ ./ 如图/ 1/ 所示/ ,/ 假设/ 源/ 主机/ A/ 向/ 目的/ 主机/ B/ 发送/ 一条/ 报文/ 流/ ,/ 经过/ n/ 跳/ OpenFlow/ 交换机/ S1/ ,/ S2/ ,/ …/ ,/ Sn/ ./ 当/ 报文/ 流首/ 报文/ P1/ 到达/ 第/ 1/ 跳/ OpenFlow/ 交换机/ S1/ 时/ ,/ 若/ 未/ 命中/ 转发/ ①/ ②/ ③/ Page3/ 规则/ ,/ 则/ S1/ 产生/ 一个/ Packet/ _/ in/ 消息/ Pkt/ -/ in/ 并/ 通过/ 已/ 建立/ 好/ 的/ OpenFlow/ 通道/ 发送至/ 集中/ 控制器/ C/ (/ 涉及/ 到/ 消息/ 的/ 表示/ ,/ 本文/ 用/ 斜体字/ 母/ 表示/ 特定/ 的/ 某个/ 消息/ ,/ 用/ 正常/ 字母/ 表示/ 某/ 一类/ 消息/ )/ ./ C/ 处理/ 后为/ 该流/ 建立/ 从/ A/ 到/ B/ 的/ 双向/ 转发/ 路径/ ,/ 即/ 对/ 路径/ 上/ 所有/ 相关/ 的/ 交换机/ S1/ ,/ S2/ ,/ …/ ,/ Sn/ 分别/ 下发/ 包含/ 流/ 规则/ 的/ Flow/ _/ mod/ 消息/ Flow/ -/ mod1/ ,/ Flow/ -/ mod2/ ,/ …/ ,/ Flow/ -/ modn/ ./ 为/ 防止/ 丢包/ ,/ C/ 还/ 需/ 下发/ 一个/ 包含/ P1/ 相关/ 信息/ 的/ Packet/ _/ out/ 消息/ Pkt/ -/ out/ 至/ 交换机/ S1/ ,/ 使/ P1/ 转发/ 至/ 对应/ 的/ 端口/ ./ 而后/ ,/ P1/ 将/ 沿着/ 已/ 建立/ 好/ 的/ 转发/ 路径/ 被/ 发送至/ B/ ./ 但是/ ,/ 在/ 装载/ 转发/ 规则/ 的/ 过程/ 中/ ,/ 由于/ 交换机/ S1/ ,/ S2/ ,/ …/ ,/ Sn/ 与/ 控制器/ 的/ 距离/ 不同/ 以及/ 不同/ 交换机/ 当前/ 负载/ 不/ 一致/ ,/ 可能/ 出现/ 规则/ 装载/ 慢于/ 报文/ 到达/ 的/ 情况/ ./ 例如/ 当/ P1/ 到达/ S2/ ,/ 而/ Flow/ -/ mod2/ 中/ 包含/ 的/ 规则/ 还/ 未/ 装载/ 至/ S2/ ./ 这/ 就/ 会/ 导致/ 文献/ [/ 16/ ]/ 中/ 所/ 指出/ 的/ 由于/ 装载/ 规则/ 时延/ 引发/ 了/ 控制/ 逻辑/ 不/ 一致/ 的/ 问题/ ./ 为/ 分析/ “/ One/ -/ wayFlow/ -/ setup/ ”/ 需/ 满足/ 的/ 条件/ ,/ 本文/ 定义/ 符号/ 如表/ 1/ 所示/ ./ 为/ 保证/ P1/ 到达/ 转发/ 路径/ 上时/ ,/ 后续/ 交换机/ Si/ (/ i/ =/ 2/ ,/ 3/ ,/ …/ ,/ n/ )/ 均/ 不会/ 因未/ 命中/ 转发/ 规则/ 而/ 产生/ Packet/ _/ in/ 消息/ 至/ 控制器/ ,/ 则/ 传输/ 时间/ 需/ 满足/ 如下/ 关系/ :/ 符号/ n/ 流从源/ 主机/ 到/ 目的/ 主机/ 经过/ OpenFlow/ 交换机/ 的/ 数量/ B/ 某条流/ 的/ 带宽/ tdtA/ →/ S1/ 报文/ 从源/ 主机/ A/ 至/ 第/ 1/ 跳/ 交换机/ S1/ 的/ 传输/ 时间/ tS1/ →/ C/ 未/ 命中/ 流表/ 的/ 报文/ 从/ 交换机/ S1/ 至/ 控制器/ C/ 的/ 传输/ 时间/ tCtC/ →/ SitS1/ →/ Si/ 在/ 该/ 情况/ 下/ ,/ 一条/ 报文/ 流只/ 在/ OpenFlow/ 数据中心/ 网络/ 边缘/ (/ 即/ 第/ 1/ 跳/ 交换机/ )/ 未/ 命中/ 转发/ 规则/ ./ 因此/ 这种/ “/ One/ -/ wayFlow/ -/ setup/ ”/ 方式/ 的/ 好处/ 是/ 在/ 以/ 被动/ 触发式/ 建立/ 转发/ 路径/ 时/ ,/ 最小化/ 一条/ 流对/ 控制器/ 产生/ 的/ 开销/ ./ 所以/ 目前/ 基于/ SDN/ 的/ 网络操作系统/ (/ 如/ Floodlight/ ①/ 、/ POX/ ②/ 等/ )/ 均/ 默认/ 采用/ 这种/ 方式/ 为/ 未/ 命中/ 报文/ 建立/ 转发/ 路径/ ./ 特别/ 地/ ,/ 为了/ 尽可能/ 地/ 满足/ 式/ (/ 1/ )/ 的/ 延迟/ 条件/ ,/ 这些/ 控制器/ 在/ 建立/ 转发/ 路径/ 时均/ 采用/ 逆序/ 下发/ 规则/ 的/ 方式/ [/ 16/ ]/ ./ 即先/ 从/ 最后/ 一跳/ 交换机/ (/ 即/ Sn/ )/ 开始/ 依次/ 下发/ 流/ 规则/ ,/ 最后/ 才/ 将/ 规则/ 装载/ 至/ 第/ 1/ 跳/ 交换机/ (/ 即/ S1/ )/ ./ 现有/ 的/ 研究/ [/ 2/ -/ 4/ ]/ 也/ 假设/ 在/ OpenFlow/ 数据中心/ 中/ 满足/ 式/ (/ 1/ )/ ./ 本文/ 将/ 基于/ 式/ (/ 1/ )/ 分析/ 面向/ 数据中心/ 的/ OpenFlow/ 流/ 缓存/ 管理/ 模型/ ./ 即/ 未/ 命中/ 报文/ 缓存/ 只/ 可能/ 发生/ 在/ 第/ 1/ 跳/ OpenFlow/ 交换机/ 上/ ./ 需要/ 指出/ 的/ 是/ ,/ 对于/ TCP/ 流/ ,/ 触发/ 流/ 规则/ 下发/ 的/ 首/ 报文/ P1/ 并非/ 一定/ 是/ TCP/ 建立/ 连接/ 的/ SYN/ 分组/ 或者/ 应用/ 产生/ 的/ Keep/ -/ alive/ 分组/ ./ 文献/ [/ 14/ ]/ 指出/ ,/ 在/ 数据中心/ 网络/ 中/ ,/ 一个/ 交换机/ 的/ 新流/ 到达/ 时间/ 间隔/ 为/ 10/ μ/ s/ ,/ 意味着/ 每秒钟/ 有/ 100000/ 条新流/ 到达/ 一个/ 交换机/ ./ 由于/ 瞬时/ 存在/ 的/ 活跃/ 流/ 的/ 数量/ 大于/ 交换机/ 硬件/ 表项/ 数量/ ,/ 使得/ 交换机/ 中/ 已有/ 的/ TCP/ 连接/ 对应/ 的/ 流/ 规则/ 很/ 容易/ 在/ 该流/ 空闲/ 时/ 被/ 替换/ ./ 例如/ 假设/ A/ 到/ B/ 之间/ 已/ 建立/ 转发/ 路径/ ,/ 即/ 在/ S1/ ,/ S2/ ,/ …/ ,/ Sn/ 均/ 已/ 装载/ 流/ 规则/ RA/ -/ B/ ./ 当/ 数据/ 报文/ P1/ 到达/ S1/ 时/ ,/ RA/ -/ B/ 可能/ 已/ 被/ 替换/ ,/ 需要/ 重新/ 触发/ 控制器/ 下发/ 流/ 规则/ ./ 因此/ 与/ UDP/ 流/ 一样/ ,/ 已/ 建立/ 连接/ 的/ TCP/ 流/ 的/ 数据/ 报文/ 也/ 可能/ 未/ 命中/ 流/ 规则/ ,/ 被/ 送/ 至/ 控制器/ 做/ 进一步/ 处理/ ./ 此外/ ,/ 在/ 数据中心/ 环境/ 中/ ,/ 报文/ 的/ 环回/ 时间/ RTT/ (/ 即/ 2tA/ →/ B/ )/ 通常/ 为/ 10/ μ/ s/ 到/ 100/ μ/ s/ ./ 而/ 文献/ [/ 17/ ]/ 测得/ OpenFlow/ 流/ 规则/ 的/ 装载/ 时间/ 约/ 为/ 4ms/ (/ 即/ tS1/ →/ C/ +/ tC/ +/ tC/ →/ S1Linux/ 操作系统/ 的/ 超时/ 重传/ 时间/ (/ RTO/ )/ 默认/ 为/ 200ms/ ,/ 所以/ 增加/ 的/ 报文/ 传送/ 延迟/ 对/ 报文/ 重传/ 影响/ 较/ 小/ ./ 2.2/ 交换机/ 缓存/ 问题/ 分析/ 与/ 可行性/ 论证/ 当/ 交换机/ 与/ 控制器/ 建立/ 连接/ 时/ ,/ 控制器/ 通过/ OFPT/ _/ FEATURES/ _/ REQUEST/ 消息/ 获取/ 交换机/ 本地/ 是否/ 有/ 缓存/ 和/ 缓存/ 的/ 大小/ ./ 若/ 交换机/ 无/ 缓存/ ,/ 其/ 报文/ 处理/ 流程/ 如图/ 2/ (/ a/ )/ 所示/ ./ P1/ ,/ P2/ ,/ P3/ 和/ P4/ 是/ A/ 发送至/ B/ 同/ 一条/ 流上/ 的/ 报文/ ./ 交换机/ 产生/ 的/ Pkt/ -/ in/ 消息/ 中将/ 携带/ 未/ 命中/ 流表/ 的/ 完整/ 报文/ 至/ 控制器/ C/ ./ C/ 解析/ P1/ 后/ 下发/ 包含/ 相应/ ①/ ②/ Page4/ 流/ 规则/ 的/ Flow/ -/ mod/ 消息/ ,/ 消息/ 内/ 包含/ A/ ,/ B/ 之间/ 的/ 转发/ 规则/ RA/ -/ B/ (/ 主要/ 由/ 匹配/ 域/ MatchA/ -/ B/ 和/ 动作/ 域/ ActionA/ -/ B/ 组成/ )/ ./ 该/ 规则/ 装载/ 至/ 流表后/ ,/ 流/ 后续/ 的/ 报文/ P4/ 将/ 命中/ 流/ 规则/ ,/ 执行/ 相应/ 的/ 动作/ ./ 为了/ 不/ 丢/ 包/ ,/ 每/ 对应/ 一个/ Pkt/ -/ in/ 消息/ ,/ C/ 都/ 需/ 将/ 完整/ 的/ 报文/ 以/ Pkt/ -/ out/ 消息/ 的/ 形式/ 发送至/ 交换机/ ,/ 消息/ 中/ 携带/ 报文/ 的/ 转发/ 动作/ ActionA/ -/ B/ ./ 优化/ 后/ 的/ C/ 会/ 识别/ 出/ P2/ ,/ P3/ 与/ 已/ 收到/ 的/ P1/ 属于/ 同/ 一条/ 流/ ,/ 所以/ 不再/ 下发/ Flow/ -/ mod/ 消息/ ./ 由于/ 流/ 的/ 首/ 报文/ 到达/ 交换机/ 至流/ 规则/ 下发/ 存在/ 延迟/ ,/ 这个/ 过程/ 对/ OpenFlow/ 通路/ 产生/ 的/ 负载/ L/ 无/ 缓存/ 大约/ 为/ 此外/ ,/ 对于/ 大/ 报文/ ,/ 交换机/ 对/ 其/ 进行/ OpenFlow/ 消息/ 的/ 封装/ 容易/ 超过/ 最大/ 传输/ 单元/ (/ MTU/ )/ ./ 所以/ 交换机/ 还/ 需/ 对/ 超过/ MTU/ 的/ 报文/ 进行/ 分片/ ./ 这/ 也/ 增加/ 了/ 交换机/ CPU/ 的/ 负载/ ./ 当/ 交换机/ 支持/ 缓存/ 未/ 命中/ 报文/ 时/ ,/ 交换机/ 在/ 与/ 控制器/ 建立/ 连接/ 时会/ 通告/ 控制器/ 交换机/ 所/ 能/ 缓存/ 报文/ 的/ 最大/ 数量/ ./ 而后/ ,/ 控制器/ 下发/ OFPT/ _/ SET/ _/ CONFIG/ 消息/ ,/ 设置/ 交换机/ 产生/ 未/ 命中/ Pkt/ -/ in/ 消息/ 的/ 最大/ 字节数/ ,/ 默认/ 为/ 128Bytes/ ./ 经过/ 对/ 目前/ 已有/ OpenFlow/ 软件/ 交换机/ 的/ OFSoftSwitch/ 源码/ 进行/ 分析/ 可知/ ,/ 通用/ 的/ 报文/ 缓存/ 处理/ 流程/ 如图/ 2/ (/ b/ )/ 所示/ ./ 未/ 命中/ 流表/ 的/ 报文/ P1/ ,/ P2/ 和/ P3/ 被/ 临时/ 放在/ 缓存/ 中/ ,/ 对应/ 的/ 缓存/ id/ 分别/ 为/ Buf/ -/ id1/ ,/ Buf/ -/ id2/ 和/ Buf/ -/ id3/ ./ 交换机/ 产生/ 的/ Pkt/ -/ in/ 消息/ 中将/ 携带/ 未/ 命中/ 报文/ 的/ 摘要/ 信息/ (/ 如图/ 2/ (/ b/ )/ 中/ 所示/ 的/ {/ P1/ }/ ,/ 默认/ 为/ 128Bytes/ )/ 和/ 缓存/ id/ ./ 控制器/ C/ 响应/ 首个/ Pkt/ -/ in/ 消息/ ,/ 下发/ 一条/ Flow/ -/ mod/ 消息/ ./ Flow/ -/ mod/ 消息/ 中/ 携带/ Buf/ -/ id1/ 和/ A/ ,/ B/ 之间/ 的/ 转发/ 规则/ RA/ -/ B/ ./ 对于/ 该条/ 流/ 后续/ 的/ Pkt/ -/ in/ 消息/ ,/ C/ 产生/ Pkt/ -/ out/ 消息/ ,/ 其/ 包含/ 未/ 命中/ 报文/ 的/ 缓存/ id/ 和/ 转发/ 动作/ ActionA/ -/ B/ ./ 在/ 流表中/ 插入/ 规则/ 后/ ,/ Flow/ -/ mod/ 消息/ 将/ 释放/ 缓存/ id/ 为/ Buf/ -/ id1/ 所/ 对应/ 的/ 报文/ P1/ ,/ 使/ 该报/ 文/ 通过/ 整条/ OpenFlow/ 的/ 报文/ 处理/ 流水线/ ./ 由于/ 产生/ Packet/ _/ in/ 消息/ 携带/ 的/ 字节数/ 与/ 报文/ 默认/ MTU/ 的/ 比值/ 约/ 为/ 1/ // 5/ (/ 300Bytes/ // 1500Bytes/ )/ ,/ 所以/ 整个/ 过程/ 对/ OpenFlow/ 通路/ 产生/ 的/ 负载/ L/ 通用/ 缓存/ 大约/ 为/ 因此/ ,/ 相比/ 于图/ 2/ (/ a/ )/ 中/ 无/ 缓存/ 的/ OpenFlow/ 交换机/ ,/ 两者/ 的/ 控制器/ -/ 交换机/ 通信/ 负载/ 比值/ 为/ 图/ 2/ 无/ 缓存/ 与/ 通用/ 缓存/ 的/ OpenFlow/ 交换机/ 工作/ 模式/ 对比/ 从/ 以上/ 分析/ 可知/ ,/ OpenFlow/ 交换机/ 是否/ 缓存/ 未/ 命中/ 流表/ 的/ 报文/ 决定/ 了/ 控制器/ CPU/ 与/ 交换机/ CPU/ 的/ 负载/ 情况/ ./ 若/ 无/ 缓存/ ,/ 交换机/ 处理/ 简单/ ,/ 但/ 增加/ 了/ 通信/ 负载/ 与/ 控制器/ 的/ 处理/ 开销/ ;/ 若有/ 缓存/ ,/ 使/ 交换机/ 具备/ 了/ 一些/ 智能/ ,/ 分担/ 了/ 报文/ 缓存/ 的/ 工作/ ,/ 减少/ 了/ 控制/ 平面/ 与/ 数据/ 平面/ 通信/ 的/ 开销/ ,/ 但/ 也/ 增加/ 了/ 缓存/ 设计/ 与/ 管理/ 的/ 难度/ ./ 目前/ 商用/ 硬件/ OpenFlow/ 交换机/ ①/ 为/ 降低成本/ 、/ 简化/ 报文/ 处理/ ,/ 通常/ 采用/ 无/ 缓存/ 的/ 设计/ ./ 尽管/ 在/ 硬件/ 交换机/ 中/ 增加/ 大量/ 缓存/ 会/ 提升/ 成本/ 和/ 设计/ 的/ 复杂性/ ,/ 但/ Lu/ 等/ 人/ [/ 18/ ]/ 提出/ 采用/ CPU/ +/ DRAM/ 的/ 方式/ 增加/ 交换机/ 的/ 缓存/ ,/ 提升/ 数据中心/ 网络/ 数据/ 平面/ 的/ 功能/ ./ 此外/ ,/ 目前/ 数据中心/ 中/ SDN/ 的/ 实现/ 通常/ 基于/ 服务器/ 内部/ 的/ 软件/ 虚拟/ 交换机/ (/ 例如/ OpenvSwitch/ [/ 13/ ]/ )/ ,/ 缓存/ 对于/ 软件/ 交换机/ 来说/ 实现/ 问题/ 不大/ ./ 因此/ ,/ 总的说来/ ,/ 在/ 交换机/ 中为/ 未/ 命中/ 流表/ 的/ 报文/ 增加/ 缓存/ 是/ 可行/ 的/ ./ 2.3/ 现有/ 缓存/ 模型/ 存在/ 的/ 不足/ 如图/ 2/ (/ b/ )/ 所示/ ,/ 同/ 一条/ 流/ 的/ 报文/ 以/ P1/ -/ P2/ -/ P3/ -/ P4/ ①/ CentecV330Specification/ ./ http/ :/ // // www/ ./ centecnetworks/ ./ Page5/ 的/ 顺序/ 到达/ 交换机/ ./ 假设/ P1/ ,/ P2/ 和/ P3/ 未/ 命中/ 流表/ 触发/ 控制器/ 下发/ 规则/ ,/ 且/ 在/ P4/ 到达/ 时/ ,/ 该流/ 的/ 规则/ 已/ 装载/ 至/ 流表中/ ,/ 所以/ P4/ 查表/ 命中/ 流/ 规则/ ./ 交换机/ 内/ 一种/ 可能/ 的/ 处理/ 顺序/ 如图/ 3/ 所示/ ./ OpenFlow/ 规范/ 中/ 指出/ ,/ 为/ 尽量减少/ 同/ 一条/ 流/ 产生/ Packet/ _/ in/ 报文/ 的/ 数量/ ,/ Flow/ _/ mod/ 消息/ 先/ 装载/ 流/ 规则/ ,/ 然后/ 释放/ 对应/ Buffer/ _/ id/ 的/ 报文/ 使/ 其/ 通过/ OpenFlow/ 报文/ 处理/ 流水线/ ./ P4/ 查表/ 命中/ 流/ 规则/ 转发/ 这一/ 事件/ 先于/ 缓存/ 的/ P1/ 被/ 释放/ 发生/ ./ 而后/ ,/ Pkt/ -/ out2/ ,/ Pkt/ -/ out3/ 消息/ 分别/ 释放/ 报文/ P2/ 和/ P3/ ,/ 则/ 该流/ 经过/ OpenFlow/ 交换机/ 后/ 可能/ 的/ 一种/ 报文/ 输出/ 序列/ 为/ P4/ -/ P1/ -/ P2/ -/ P3/ ./ 文献/ [/ 15/ ]/ 分析/ 了/ TCP/ 端系统/ 为/ 重组/ 乱序/ 报文/ 所/ 需要/ 的/ 缓存/ 容量/ 以及/ 由此/ 产生/ 的/ 报文/ 延时/ ./ 分析/ 结果表明/ ./ 报文/ 重/ 排序/ 要求/ 很大/ 的/ 缓存/ 容量/ ,/ 对/ 端系统/ 提出/ 较/ 高/ 要求/ ;/ 其次/ ,/ 重/ 排序/ 引起/ 的/ 报文/ 延时/ 显著/ ,/ 而且/ 报文/ 延时/ 与/ TCP/ 连接/ 吞吐/ 率/ 和/ 分组/ 大小/ 紧密/ 相关/ ,/ 在/ 较/ 高/ 的/ 连接/ 吞吐/ 率/ 和/ 小/ 尺度/ 分组/ 条件/ 下/ ,/ 重/ 排序/ 操作/ 将/ 对/ 上层/ 网络应用/ 性能/ 产生/ 严重/ 的/ 影响/ ./ 尽管/ 乱序/ 报文/ 对/ UDP/ 流/ 的/ 影响/ 不如/ 对/ TCP/ 流/ 的/ 影响/ 大/ ,/ 但是/ 保序/ 后/ 的/ 报文/ 减少/ 了/ 应用层/ 重组/ 报文/ 的/ 开销/ ,/ 因而/ 提高/ 应用/ 通信/ 的/ 性能/ ./ 图/ 3OpenFlow/ 交换机/ 内/ 报文/ 的/ 处理/ 先后顺序/ OpenFlow/ 交换机/ 的/ 缓存/ 可/ 有效/ 减少/ 交换机/ 与/ 控制器/ 之间/ 的/ 信息/ 交互/ 负载/ ./ 但/ 我们/ 发现/ ,/ 若/ 对/ 交换机/ 的/ 缓存/ 实施/ 有效/ 的/ 管理/ ,/ 则/ 可/ 进一步/ 减少/ 交换机/ 与/ 控制器/ 之间/ 的/ 通信/ 开销/ ./ 例如/ 对于/ 同/ 一条/ 流/ 的/ 未/ 命中/ 报文/ 只/ 需要/ 产生/ 一个/ Packet/ _/ in/ 消息/ 至/ 控制器/ ./ 而且/ ,/ 原有/ 的/ 缓存/ 模型/ 易/ 导致/ 上/ 文中/ 分析/ 出现/ 的/ 报文/ 乱序/ 问题/ ,/ 降低/ 应用/ 通信/ 的/ 性能/ ./ 为此/ ,/ 本文/ 针对/ OpenFlow/ 交换机/ 流/ 缓存/ 的/ 管理/ 展开/ 研究/ ,/ 以/ 降低/ OpenFlow/ 数据/ 和/ 控制/ 平面/ 的/ 通信/ 开销/ ,/ 实现/ 报文/ 流内/ 保序/ 转发/ ./ 3PiBuffer/ 流/ 缓存/ 管理/ 模型/ 由于/ 现有/ 的/ OpenFlow/ 交换机/ 缓存/ 管理/ 存在/ 不足/ ,/ 本文/ 基于/ 原有/ 的/ OpenFlow/ 规范/ 提出/ 了/ 面向/ 数据中心/ 的/ 流/ 缓存/ 管理/ 模型/ PiBuffer/ ./ 该/ 模型/ 对/ 未/ 命中/ 流表/ 的/ 数据/ 报文/ ,/ 按照/ 流/ 粒度/ 进行/ 缓存/ 与/ 管理/ ,/ 使得/ 每条/ 无/ 转发/ 规则/ 的/ 流/ 只/ 产生/ 一个/ 携带/ 该流/ 标识/ 信息/ 的/ Packet/ _/ in/ 消息/ ,/ 将/ 其/ 发送至/ 控制器/ ,/ 以/ 进一步/ 减少/ 交换机/ 与/ 控制器/ 之间/ 的/ 信息/ 交互/ ,/ 提高/ 控制/ 平面/ 的/ 可/ 扩展/ 能力/ ./ 同时/ 该/ 模型/ 通过/ 流动/ 作/ 预处理/ 机制/ ,/ 解决/ 现有/ 缓存/ 方式/ 下流/ 表/ 下发/ 导致/ 的/ 流内/ 报文/ 乱序/ 问题/ ./ 基于/ 第/ 2/ 节/ 不等式/ (/ 1/ )/ 的/ 假设/ ,/ 本文/ 仅/ 考虑/ 在/ 第/ 1/ 跳/ 交换机/ 未/ 命中/ 报文/ 的/ 缓存/ 情况/ ./ 如图/ 4/ 所示/ ,/ 在/ PiBuffer/ 模型/ 中/ ,/ OpenFlow/ 流水线/ 的/ 基本/ 过程/ 保持/ 不变/ ,/ 即/ 按照/ OpenFlow/ 规范/ 实现/ 报文/ 头/ 的/ 解析/ 、/ 查找/ 流表/ 、/ 根据/ 查表/ 结果/ 执行/ 相应/ 动作/ ./ 引入/ PiBuffer/ 主要/ 对/ 未/ 命中/ 流表/ 报文/ 的/ 处理过程/ 和/ 流/ 规则/ 的/ 装载/ 过程/ 进行/ 了/ 修改/ ./ PiBuffer/ 重新/ 定义/ 了/ 3/ 类/ 消息/ (/ Packet/ _/ in/ 消息/ 、/ 携带/ Buffer/ _/ id/ 的/ Flow/ _/ mod/ 和/ Packet/ _/ out/ 消息/ )/ 的/ 处理过程/ ,/ 但/ 不/ 改变/ 其他/ Open/ -/ Flow/ 消息/ 的/ 处理过程/ ./ PiBuffer/ 流/ 缓存/ 管理/ 模型/ 主要/ 包含/ 两个/ 功能/ 部件/ :/ 流动/ 作/ 预处理/ 部件/ 和/ Pi/ 缓存/ 管理/ 部件/ ./ 流动/ 作/ 预处理/ 部件/ 主要/ 功能/ 是/ 识别/ 携带/ Buffer/ _/ id/ 的/ Flow/ _/ mod/ // Packet/ _/ out/ 消息/ ,/ 先/ 释放/ 缓存/ 中/ 与/ 该/ Buffer/ _/ id/ 相关/ 的/ 报文/ ,/ 然后/ 按照/ Flow/ _/ mod/ // Packet/ _/ out/ 消息/ 中/ 的/ 流动/ 作/ 进行/ 转发/ ./ OpenFlow/ 规范/ 中/ ,/ 流/ 规则/ 包含/ 了/ 流/ 匹配/ 域/ 和/ 流动/ 作/ ,/ Packet/ _/ out/ 消息/ 中/ 携带/ 流动/ 作/ ,/ Flow/ _/ mod/ 消息/ 中/ 携带/ 流/ 规则/ ./ 所以/ 若为/ Flow/ _/ mod/ 消息/ ,/ 流动/ 作/ 预处理/ 部件/ 在/ 等待/ 缓存/ 的/ 流/ 报文/ 全都/ 释放/ 完后/ ,/ 才/ 将/ 该/ 消息/ 内/ 携带/ 的/ 规则/ 装载/ 至/ 流表中/ ,/ 从而/ 实现/ 流内/ 的/ 报/ 文保/ 序/ ./ Pi/ 缓存/ 管理/ 部件/ 主要/ 功能/ 是/ 实现/ 未/ 命中/ 报文/ 的/ 缓存/ ,/ 流/ 缓存/ 区/ 的/ 管理/ ,/ 以及/ 产生/ 流/ 粒度/ 的/ Packet/ _/ in/ 报文/ ,/ 减少/ 交换机/ 发/ 往/ 控制器/ 的/ Packet/ _/ in/ 请求/ 数目/ ./ Page6/ 当/ 报文/ 未/ 命中/ 流表时/ ,/ OpenFlow/ 流水线/ 将/ 未/ 命中/ 的/ 报文/ 输出/ 至/ Pi/ 缓存/ 管理/ 部件/ ./ Pi/ 缓存/ 管理/ 部件/ 根据/ 一定/ 的/ 缓存/ 策略/ 决定/ 是否/ 缓存/ 该报/ 文/ ./ 根据/ 文献/ [/ 14/ ]/ 的/ 测量/ 结果/ 可知/ ,/ 在/ 数据中心/ 网络/ 中/ ,/ 报文/ 大小/ 表现/ 为/ 双峰分布/ ,/ 主要/ 集中/ 在/ 200Bytes/ 左右/ 和/ 1400Bytes/ 左右/ ./ 200Bytes/ 大小/ 的/ 报文/ 通常/ 为/ 应用/ 的/ keep/ -/ alive/ 报文/ 和/ TCPAck/ 报文/ ./ 1400Bytes/ 大小/ 的/ 报文/ 为/ 有效/ 数据/ 报文/ ./ 这些/ 特性/ 将会/ 影响/ 未/ 命中/ 报文/ 的/ 缓存/ 策略/ ./ 若/ 不/ 缓存/ ,/ 则/ 将/ 完整/ 报文/ 封装/ 为/ OpenFlow/ 的/ Packet/ _/ in/ 消息/ ,/ 发送至/ 控制器/ 做/ 进一步/ 处理/ ./ 若/ 缓存/ ,/ 报文/ 以流/ 为/ 粒度/ 组织/ 存放/ ./ 若/ 是/ 流/ 的/ 首/ 报文/ ,/ 则/ 需/ 提取/ 该报/ 文/ 的/ 前/ 128Bytes/ ,/ 封装/ 成/ Packet/ _/ in/ 消息/ ,/ 发送至/ 控制器/ ./ 若/ 报文/ 为流/ 的/ 后续/ 报文/ ,/ 则/ 不/ 产生/ Packet/ _/ in/ 消息/ ./ 所以/ ,/ 在/ PiBuffer/ 模型/ 下/ ,/ 一条/ 未/ 命中/ 的/ 报文/ 流对/ OpenFlow/ 通路/ 产生/ 的/ 负载/ 为/ 一个/ Pkt/ -/ in/ 消息/ 和/ 一个/ Flow/ -/ mod/ 消息/ (/ 或者/ Pkt/ -/ out/ 消息/ )/ ./ 因此/ PiBuffer/ 对/ OpenFlow/ 通路/ 产生/ 的/ 负载/ LPiBuffer/ 大约/ 为/ 所以/ ,/ 无/ 缓存/ 、/ 通用/ 缓存/ 、/ 基于/ PiBuffer/ 的/ 缓存/ ,/ 这/ 3/ 种/ 模式/ 在/ 一条/ 带宽/ 为/ B/ 的/ 流/ 不/ 命中/ 规则/ 的/ 情况/ 下/ ,/ 占用/ 控制器/ -/ 交换机/ OpenFlow/ 通路/ 负载/ 比值/ 为/ L/ 无/ 缓存/ L/ 通用/ 缓存/ LPiBuffer/ =/ 2BT/ 图/ 5PiBuffer/ 流/ 缓存/ 管理/ 模型/ Pi/ 缓存/ 管理/ 部件/ 主要/ 包括/ 缓存/ 创建/ // 更新/ 模块/ 、/ 缓存/ 释放/ 模块/ 、/ PiBT/ (/ Packet/ _/ inBufferTable/ )/ 和/ 缓存/ ./ PiBT/ 是/ 其中/ 的/ 核心/ ,/ 用于/ 记录/ 未/ 命中/ 报文/ 缓存/ 的/ 相关/ 信息/ ./ 创建/ // 更新/ 模块/ 负责/ 将/ 未/ 命中/ 流表式/ 中/ 单位/ 为/ 字节/ ./ PiBuffer/ 通过/ 流动/ 作/ 预处理/ ,/ 实现/ 了/ 先/ 释放/ 未/ 命中/ 报文/ 的/ 缓存/ 后/ 装载/ 规则/ 的/ 方式/ ,/ 达到/ 了/ 报/ 文保/ 序/ 的/ 目的/ ./ 但/ 这/ 也/ 对/ 交换机/ 的/ 处理/ 能力/ 提出/ 要求/ ./ 假设/ 交换机/ 释放/ 报文/ 缓存/ 的/ 速率/ 为/ R/ ,/ 释放/ 所/ 需/ 的/ 时间/ 为/ ts/ ,/ 其余/ 标记/ 如表/ 1/ 所示/ ./ 当流/ 持续时间/ td/ >/ tS1/ →/ C/ +/ tC/ +/ tC/ →/ S1/ 则/ 交换机/ 处理/ 缓存/ 的/ 能力/ 需/ 满足/ 即/ 若/ 交换机/ 缓存/ 处理/ 能力/ 不/ 满足/ 该/ 条件/ ,/ 会/ 产生/ PiBuffer/ 缓冲区/ 溢出/ 的/ 情况/ ./ 4PiBuffer/ 方案设计/ PiBuffer/ 流/ 缓存/ 管理/ 模型/ 系统/ 方案设计/ 结构/ 如图/ 5/ 所示/ ./ 该/ 设计/ 基于/ 原有/ 的/ OpenFlow/ 处理/ 流水线/ ,/ 重/ 定义/ 了/ 对/ 未/ 命中/ 报文/ 的/ 缓存/ 操作过程/ ,/ 以及/ 对/ 包含/ Buffer/ _/ id/ 的/ OpenFlow/ 消息/ 预处理/ 过程/ ./ 4.2/ 节/ 和/ 4.3/ 节/ 将/ 对/ 修改/ 后/ 的/ 这/ 两个/ 过程/ 进行/ 详细描述/ ./ 的/ 报文/ 根据/ 缓存/ 策略/ 决定/ 是否/ 缓存/ ,/ 产生/ 相应/ 的/ Packet/ _/ in/ 消息/ ./ 缓存/ 释放/ 模块/ 将/ 流动/ 作/ 预处理/ 部件/ 产生/ 的/ Buffer/ _/ id/ 和/ 流动/ 作等/ 信息/ 作为/ 输入/ ,/ 根据/ PiBT/ 表中/ 的/ 标识/ 释放/ 报文/ 流/ 的/ 缓存/ 信息/ 和/ 位置/ ,/ 取/ Page7/ 出/ 缓存/ 区/ 报文/ ,/ 与/ 流动/ 作/ 一起/ 输出/ 至/ OpenFlow/ 流水线/ 中/ 的/ 动作/ 执行/ 模块/ ./ 释放/ 完该/ 流/ 对应/ 的/ 所有/ 缓存/ 后/ ,/ 缓存/ 释放/ 模块/ 向/ 流动/ 作/ 预处理/ 部件/ 发送/ 一个/ 缓存/ 报文/ 处理/ 完成/ 的/ 状态/ 消息/ ./ 流动/ 作/ 预处理/ 部件/ 包括/ 动作/ 解析/ 模块/ 和/ 规则/ 装载/ 模块/ ./ 其中/ 动作/ 解析/ 模块/ 负责/ 解析/ 控制器/ 下发/ 的/ 包含/ Buffer/ _/ id/ 的/ Flow/ _/ mod/ // Packet/ _/ out/ 消息/ ,/ 并/ 将/ 解析/ 得到/ 的/ 流动/ 作/ 和/ Buffer/ _/ id/ 发送至/ Pi/ 缓存/ 管理/ 部件/ ./ 在/ 接收/ 到/ 缓存/ 报文/ 处理/ 完成/ 的/ 状态/ 消息/ 后/ ,/ 规则/ 装载/ 模块/ 才/ 将/ 流表/ 规则/ 写入/ 至/ OpenFlow/ 流水线/ 的/ 流表中/ ./ 4.1/ PiBT/ 组织/ 结构/ PiBT/ 负责/ 记录/ 报文/ 缓存/ 相关/ 的/ 信息/ ,/ 其/ 表项/ 内图/ 6Pi/ 缓存/ 表/ 的/ 组织/ 结构/ Pi/ 缓存/ 区以/ 单向/ 链表/ 的/ 结构/ 组织/ 缓存/ 的/ 报文/ ./ 当/ 缓存/ 一个/ 新/ 报文/ 时/ ,/ 将/ 该/ 新/ 报文/ 缓存/ 单元/ 的/ 地址/ 添加/ 到/ 同/ 一条/ 流/ 缓存/ 区内/ 上/ 一个/ 报文/ 缓存/ 单元/ 的/ 下/ 一个/ 报文/ 指针/ ,/ 同时/ 更新/ 当前/ 缓存/ 区/ 地址/ ,/ 指向/ 该/ 新/ 报文/ 的/ 地址/ ./ 若为/ 软件/ 实现/ 该/ 缓存/ 管理/ 模型/ ,/ 则/ 无需/ 关心/ 每个/ 报文/ 的/ 大小/ ./ 而/ 基于/ 硬件/ 实现/ 时/ ,/ 为/ 适应/ 不同/ 大小/ 的/ 报文/ ,/ 每个/ 报文/ 缓存/ 区/ 可/ 按照/ MTU/ 的/ 大小/ 分配/ ./ 由于/ 之前/ 提到/ ,/ 数据中心/ 中/ 的/ 报文/ 大小/ 分布/ 具有/ 双峰/ 特性/ ./ 若/ 按照/ 报文/ 大小/ 指定/ 缓存/ 策略/ ,/ 即/ 小/ 报文/ 不/ 缓存/ (/ 小于/ 300Bytes/ )/ ,/ 仅/ 缓存/ 大/ 报文/ (/ 大于/ 1400Bytes/ )/ ,/ 那么/ 硬件/ 实现/ 中/ 按照/ MTU/ 分配/ 每个/ 报文/ 的/ 存储空间/ 是/ 合理/ 的/ ./ PiBT/ 的/ 表项/ 数量/ 为/ 交换机/ 可/ 同时/ 支持/ 未/ 命中/ 流/ 缓存/ 的/ 数量/ ./ 数量/ 越/ 多/ ,/ 表明/ 该/ 交换机/ 越能/ 适应/ 高速/ 动态变化/ 的/ 数据中心/ 流量/ ./ 该/ 数量/ 的/ 大小/ 受到/ 交换机/ 存储资源/ 的/ 限制/ ./ 容/ 包括/ 匹配/ 字/ 段/ 、/ 缓冲区/ 首/ 地址/ 、/ 当前/ 缓冲区/ 地址/ 、/ 缓存/ 报文/ 计数/ 和/ 超时/ 时间/ 字/ 段/ ,/ 格式/ 如图/ 6/ 所示/ ./ 其中/ ,/ 匹配/ 字段/ 为/ 未/ 命中/ 报文/ 流/ 的/ 流/ 标识/ ,/ 用于/ 识别/ 不同/ 流/ 的/ 未/ 命中/ 报文/ 以及/ 区分/ 同/ 一条/ 流/ 的/ 首/ 报文/ 和/ 后续/ 报文/ ./ 缓冲区/ 首/ 地址/ 为/ 一条/ 未/ 命中/ 流/ 的/ 第/ 1/ 个/ 报文/ 的/ 缓存/ 单元/ 地址/ ,/ 也/ 是/ 该/ 流/ 在/ 缓存/ 区/ 的/ 首/ 地址/ ./ 当前/ 缓冲区/ 地址/ 表示/ 一条/ 未/ 命中/ 流/ 的/ 最近/ 一次/ 缓存/ 的/ 报文/ 的/ 缓存/ 区/ 地址/ ./ 缓存/ 报文/ 计数/ 表示/ 当前/ 流中/ 缓存/ 的/ 未/ 命中/ 报文/ 个数/ ./ 流/ 超时/ 字/ 段/ 用于/ 表项/ 的/ 生存/ 时间/ ./ 若/ 长时间/ 未/ 收到/ 控制器/ 对/ 未/ 命中/ 报文/ 的/ 响应/ 消息/ ,/ 即/ 超时/ 时间/ 超过/ 一定/ 的/ 阈值/ ,/ 就/ 删除/ 该/ 表项/ 并/ 释放/ 对应/ 的/ 缓存/ 空间/ ./ 4.2/ 未/ 命中/ 报文/ 缓存/ 过程/ Pi/ 缓存/ 管理/ 部件/ 的/ 工作/ 流程/ 可/ 分为/ 未/ 命中/ 报文/ 的/ 缓存/ 及/ 释放/ 两个/ 流程/ ./ 报文/ 缓存/ 流程/ 如下/ :/ (/ 1/ )/ 当/ 缓存/ 创建/ 模块/ 接收/ 到/ OpenFlow/ 流线/ 部件/ 中/ 的/ 流表/ 查找/ 模块/ 产生/ 的/ 未/ 命中/ 流/ 表项/ 的/ 报文/ 时/ ,/ 缓存/ 创建/ 模块/ 首先/ 根据/ 未/ 命中/ 报文/ 的/ 头/ 字/ 段/ 查询/ PiBT/ 表/ ./ (/ 2/ )/ 当/ 报文/ 命中/ PiBT/ 表时/ ,/ 说明/ 该/ 未/ 命中/ 报文/ 为/ 一条/ 未/ 命中/ 后续/ 报文/ ,/ 缓存/ 创建/ 模块/ 将/ 该报/ 文/ 的/ 缓存/ 区/ 地址/ 链接/ 到/ 上/ 一个/ 报文/ 缓存/ 区/ 的/ 指针/ ,/ 并/ 将/ 报文/ 缓存/ 信息/ 更新/ 到/ 命中/ 的/ PiBT/ 表中/ ./ (/ 3/ )/ 当/ 报文/ 未/ 命中/ PiBT/ 表时/ ,/ 说明/ 该/ 未/ 命中/ 报文/ 为/ 一条/ 未/ 命中/ 流/ 的/ 首/ 报文/ ,/ 缓存/ 创建/ 模块/ 将/ 为/ 该报/ 文/ 创建/ 一个/ PiBT/ 表项/ ,/ 并/ 将/ 创建/ 的/ PiBT/ 表项/ 的/ 地址/ 输出/ 到/ OpenFlow/ 流水线/ 中/ 的/ 转发/ 模块/ ,/ 并/ 由/ 其/ 将/ 该/ PiBT/ 地址/ 作为/ Buffer/ _/ id/ 封装/ 到/ Packet/ -/ in/ 消息/ 到/ 控制器/ ./ 该/ 流程/ 的/ 形式化/ 描述/ 如/ 过程/ 1/ ./ Page8/ 过程/ 1/ ./ 未/ 命中/ 报文/ 缓存/ 处理过程/ ./ 输入/ :/ 未/ 命中/ 的/ 报文/ P/ 输出/ :/ Packet/ _/ in/ 消息/ 1/ ./ IF/ (/ !/ Policy/ (/ P/ )/ )/ 2/ ./ Buffer/ _/ id/ (/ P/ )/ =/ NONE/ ;/ 3/ ./ Packet/ _/ In/ =/ Generate/ _/ PI/ (/ P/ ,/ Buffer/ _/ id/ (/ P/ )/ )/ ;/ 4/ ./ ELSEIF/ (/ !/ Storage/ (/ P/ )/ )/ 5/ ./ Buffer/ _/ id/ (/ P/ )/ =/ NONE/ ;/ 6/ ./ Packet/ _/ In/ =/ Generate/ _/ PI/ (/ P/ ,/ Buffer/ _/ id/ (/ P/ )/ )/ ;/ 7/ ./ ELSEIF/ (/ Lookup/ (/ PiBT/ ,/ P/ )/ )/ 8/ ./ Buffer/ _/ address/ =/ Find/ (/ PiBT/ )/ ;/ 9/ ./ Update/ (/ PiBT/ ,/ P/ )/ ;/ 10/ ./ ELSE11/ ./ New/ (/ PiBT/ ,/ P/ )/ ;/ 12/ ./ {/ P/ }/ =/ abstract/ (/ P/ )/ ;/ 13/ ./ Packet/ _/ In/ =/ Generate/ _/ PI/ (/ {/ P/ }/ ,/ Buffer/ _/ id/ (/ P/ )/ )/ ;/ 14/ ./ ENDIF4/ ./ 3/ 流动/ 作/ 预处理/ 过程/ 流动/ 作/ 预处理/ 工作/ 流程/ 如下/ :/ (/ 1/ )/ 当/ 控制器/ 下发/ 包含/ Buffer/ _/ id/ 的/ Flow/ _/ mod/ // Packet/ _/ out/ 消息/ 时/ ,/ 流动/ 作/ 预处理/ 部件/ 中/ 的/ 动作/ 解析/ 模块/ 捕获/ 该/ 消息/ ,/ 提取/ 其中/ 的/ 流表/ 规则/ 和/ Buffer/ _/ id/ ,/ 并/ 输出/ 给/ Pi/ 缓存/ 管理/ 部件/ ./ (/ 2/ )/ Pi/ 缓存/ 管理/ 部件/ 根据/ Buffer/ _/ id/ 查找/ PiBT/ 表/ ,/ 将表中/ 对应/ 的/ Pi/ 缓存/ 中/ 的/ 报文/ 依次/ 释放/ 至/ OpenFlow/ 流水线/ 中/ ,/ 并/ 执行/ 相应/ 的/ 报文/ 动作/ ./ (/ 3/ )/ 当/ 缓存/ 释放/ 模块/ 释放/ 完/ 该条/ 流/ 的/ 所有/ 缓存/ 报文/ 后/ ,/ 若为/ Flow/ _/ mod/ 消息/ ,/ 规则/ 装载/ 模块/ 才/ 将/ 流表/ 规则/ 插入/ 到/ OpenFlow/ 流水线/ 部件/ 中/ 的/ 流表/ 查找/ 模块/ 中/ 的/ 流表中/ ,/ 并/ 更新/ 相应/ 的/ 计数器/ ./ 该/ 流程/ 的/ 形式化/ 描述/ 如/ 过程/ 2/ ./ 过程/ 2/ ./ 流动/ 作/ 预处理/ 过程/ ./ 输入/ :/ 包含/ Buffer/ _/ id/ 的/ Flow/ _/ mod/ // Packet/ _/ out/ 消息/ 输出/ :/ 流动/ 作/ 和/ 缓存/ 报文/ 1/ ./ IF/ (/ Lookup/ (/ PiBT/ ,/ Buffer/ _/ id/ )/ )/ THEN2/ ./ While/ (/ Retrieve/ (/ PiBuffer/ ,/ Buffer/ _/ id/ )/ )/ DO3/ ./ Release/ (/ Pkt/ )/ ;/ 4/ ./ Pipeline/ (/ Pkt/ ,/ Actions/ )/ 5/ ./ ENDWHILE6/ ./ ENDIF7/ ./ IF/ (/ Flow/ _/ mod/ )/ THEN8/ ./ Rules/ =/ Exact/ (/ Flow/ _/ mod/ )/ ;/ 9/ ./ Insert/ (/ Flow/ _/ table/ ,/ Rules/ )/ ;/ 10/ ./ ENDIF5/ 实验/ 结果/ 与/ 分析/ 在/ 基于/ OpenFlow/ 的/ 数据中心/ 应用/ 场景/ 中/ ,/ Open/ -/ Flow/ 交换机/ 既有/ 物理/ 硬件/ 交换机/ 的/ 实现/ 形态/ ,/ 也/ 有/ 软件/ 交换机/ 的/ 实现/ 形态/ ./ 为此/ ,/ 本文/ 分别/ 从/ 软件/ 和/ 硬件/ 两个/ 实现/ 角度/ 对/ 该/ 缓存/ 管理/ 模型/ 进行/ 验证/ ./ 5.1/ 基于/ OFSoftSwitch/ 软件/ 交换机/ 的/ 软件/ 实现/ OFSoftSwitch/ ①/ 软件/ 交换机/ 是/ 由/ 斯坦福大学/ 、/ 爱立信/ 研究/ 中心/ 和/ CPqD/ 公司/ 共同/ 维护/ 的/ 开源/ 项目/ ,/ 支持/ OpenFlowv1/ ./ 3/ ./ 由于/ 该软件/ 交换机/ 在/ 用户/ 态/ 实现/ ,/ 因此/ 相对/ OpenvSwitch/ 较/ 易于/ 修改/ ,/ 方便/ 对/ 新/ 功能/ 进行/ 验证/ ./ 本文/ 基于/ 第/ 4/ 节/ 提出/ 的/ PiBuffer/ 设计方案/ ,/ 在/ OFSoftSwitch/ 软件/ 交换机/ 上/ 实现/ 了/ 所/ 提出/ 的/ 流/ 缓存/ 管理/ 模型/ ,/ 替换/ 原有/ 的/ 通用/ 缓存/ 方式/ ./ 实验/ 所用/ 的/ 机器/ 是/ 一台/ CPU/ 主频/ 为/ 3.2/ GHz/ 的/ IntelCorei5/ 、/ 内存/ 为/ 8GB/ 的/ 台式机/ ./ 在/ 该/ 机器/ 上/ 构建/ 如图/ 7/ 所示/ 拓扑/ ./ 控制器/ 采用/ 模块化/ 的/ Flood/ -/ light/ ,/ 其上/ 运行/ 三层/ 转发/ 的/ 应用/ ./ 在/ VMware/ 虚拟机/ 软件/ 中/ 运行/ 3/ 台/ 虚拟机/ ,/ 分别/ 命名/ 为/ VM1/ 、/ VM2/ 、/ VM3/ ./ 其中/ VM1/ 内/ 运行/ OFSoftSwitch/ 软件/ 交换机/ ,/ 通过/ OpenFlow/ 通道/ 与/ 主机/ 内/ 的/ Floodlight/ 控制器/ 连接/ ./ VM2/ 和/ VM3/ 分别/ 作为/ 源/ 主机/ 和/ 目的/ 主机/ ,/ 并/ 处于/ 不同/ 的/ 子网/ ,/ 只有/ 通过/ 控制器/ 配置/ 流/ 规则/ ,/ 两者/ 才/ 可/ 进行/ 通信/ ./ 由于/ 本文/ 假设/ 满足/ 不等式/ (/ 1/ )/ ,/ 仅/ 需/ 考虑/ 第/ 1/ 跳/ 交换机/ 的/ 缓存/ 情况/ 即可/ ,/ 所以/ 该/ 实验/ 场景/ 简化/ 是/ 合理/ 的/ ./ 图/ 7/ 基于/ OFSoftSwitch/ 的/ PiBuffer/ 原型/ 验证/ 环境/ 首先/ 本文/ 对/ PiBuffer/ 减少/ 了/ 交换机/ 与/ 控制器/ 之间/ 的/ 通信/ 开销/ 进行/ 验证/ ./ 使用/ Iperf/ 工具/ 进行/ 测试/ ,/ 将/ VM2/ 作为/ 源/ 主机/ ,/ VM3/ 作为/ 目的/ 主机/ ,/ 测量/ 在/ 不同/ 缓存/ 模式/ 下/ (/ 无/ 缓存/ 、/ 通用/ 缓存/ 、/ 基于/ PiBuffer/ 的/ 缓存/ )/ Floodlight/ 控制器/ 与/ OFSoftSwitch/ 软件/ 的/ 负载/ 情况/ ./ Iperf/ 的/ 流量/ 大小/ 为/ 5Mbps/ ,/ 持续时间/ 为/ 60s/ ,/ 测试/ 结果/ 如图/ 8/ 所示/ ./ 由于/ 实验/ 中/ Floodlight/ 控制器/ 并未/ 及时/ 发出/ Flow/ _/ mod/ 消息/ 下载/ 规则/ ,/ 因此/ 在/ 60s/ 内/ ,/ 所有/ 发送至/ 软件/ 交换机/ 的/ 报文/ 都/ 未/ 命中/ 规则/ ./ 接收/ 带宽/ 与/ 发送/ 带宽/ 均/ 是从/ 交换机/ 的/ 角度/ 而言/ ,/ 分别/ 对应/ Packet/ _/ out/ 消息/ 和/ Packet/ _/ in/ 消息/ ./ 从/ 结果/ 中/ 可/ 明显/ 看到/ ,/ 基/ ①/ http/ :/ // // cpqd/ ./ github/ ./ com/ // ofsoftswitch13Page9/ 图/ 83/ 种/ 缓存/ 模式/ 占用/ OpenFlow/ 通道/ 带宽/ 的/ 对比/ 于/ PiBuffer/ 缓存/ 模式/ 对/ OpenFlow/ 通道/ 带宽/ 占用/ 的/ 最少/ ,/ 平均值/ 分别/ 约/ 为/ 23KB/ // s/ (/ 接收/ )/ 和/ 74KB/ // s/ (/ 发送/ )/ ./ 基于/ 通用/ 缓存/ 的/ 次之/ ,/ 平均值/ 分别/ 约/ 为/ 43KB/ // s/ (/ 接收/ )/ 和/ 139KB/ // s/ (/ 发送/ )/ ./ 无/ 缓存/ 的/ 情况/ 下/ ,/ 所有/ 的/ 报文/ 都/ 被/ 封装/ 成/ Packet/ _/ in/ 消息/ 送/ 至/ 控制器/ ,/ 并且/ 也/ 会/ 被/ Packet/ _/ out/ 至/ 交换机/ ,/ 平均值/ 分别/ 约/ 为/ 719KB/ // s/ (/ 接收/ )/ 和/ 761KB/ // s/ (/ 发送/ )/ ./ 其/ 接收/ 与/ 发送/ 的/ 占用/ 带宽/ 基本/ 与/ Iperf/ 所/ 发出/ 的/ 流量/ 的/ 带宽/ (/ 5Mbps/ )/ 处于/ 一个/ 量级/ ./ 无/ 缓存/ 情况/ 下/ 总共/ 占用/ 带宽/ 与/ 通用/ 缓存/ 情况/ 下/ 总共/ 占用/ 带宽/ 比值/ 约/ 为/ 15/ ,/ 与/ 第/ 3/ 节中/ 理论/ 分析/ 一致/ ./ 在/ 有/ 缓存/ 的/ 情况/ 下/ ,/ Packet/ _/ out/ 消息/ 只/ 需/ 携带/ 32/ 位/ 的/ Buffer/ _/ id/ ,/ 不/ 需要/ 携带/ 报文/ 相关/ 信息/ ,/ 经过/ 计算/ 可知/ ,/ 仅为/ Packet/ _/ in/ 消息/ 的/ 1/ // 3/ ,/ 这/ 也/ 符合/ 实验/ 中/ 所/ 观测/ 到/ 接受/ 速率/ 与/ 发送/ 速率/ 的/ 比值/ ./ 大量/ 的/ OpenFlow/ 控制/ 消息/ 还/ 可/ 造成/ 控制器/ 与/ 交换机/ 的/ 过载/ ./ 对/ 控制/ 通路/ 的/ 带宽/ 占用/ 减少/ 可/ 降低/ 交换机/ 与/ 控制器/ 的/ CPU/ 利用率/ ./ 图/ 9/ 反应/ 了/ 引入/ PiBuffer/ 后/ 对/ 软件/ 交换机/ 占用/ CPU/ 利用率/ 的/ 影响/ ./ 通过/ 数据/ 可知/ ,/ 采用/ PiBuffer/ 模式/ 的/ 软件/ 交换机/ 要/ 比/ 原先/ 更少/ 地/ 占用/ CPU/ 资源/ ./ 这是/ 由于/ PiBuffer/ 缓存/ 管理/ 模型/ 使得/ 更少/ 的/ 报文/ 被/ 发送至/ 控制器/ ,/ 同/ 一条/ 流/ 的/ 非首/ 报文/ 会/ 被/ 缓存/ 在/ 交换机/ 中/ ./ 而/ 封装/ 产生/ Packet/ _/ in/ 消息/ 相比/ 于/ 缓存/ 报文/ 更/ 消耗/ CPU/ 资源/ ./ PiBuffer/ 更/ 多/ 地/ 将/ 未/ 命中/ 的/ 报文/ 缓存/ 在/ 交换机/ 内部/ ,/ 减少/ 了/ 发往/ 控制器/ 的/ Packet/ _/ in/ 消息/ ,/ 因此/ 相比/ 于/ 通用/ 缓存/ 模式/ ,/ PiBuffer/ 模式/ 下/ 交换机/ 的/ CPU/ 资源/ 使用率/ 减少/ 约/ 20/ %/ ./ 可以/ 预见/ ,/ 交换机/ 引入/ PiBuffer/ 会/ 使/ 控制器/ CPU/ 资源/ 占用/ 较少/ ./ 所以/ ,/ 从/ 以上/ 实验/ 结果/ 可知/ ,/ 在/ 交换机/ 缓存/ 资源/ 足够/ 的/ 前提/ 下/ ,/ 缓存/ 报文/ 不仅/ 可以/ 减少/ 交换机/ 与/ 控制器/ 之间/ 的/ 通信/ 负载/ ,/ 同时/ 可/ 减少/ 交换机/ 与/ 控制器/ 图/ 93/ 种/ 缓存/ 模式/ 占用/ 软件/ 交换机/ CPU/ 资源/ 的/ 对比/ 本身/ 的/ CPU/ 处理/ 负载/ ./ 其次/ ,/ 本文/ 对/ PiBuffer/ 解决/ 通用/ 缓存/ 导致/ 的/ 流/ 内乱/ 序/ 问题/ 进行/ 说明/ 和/ 验证/ ./ 源/ 主机/ 向/ 目的/ 主机/ 连续/ 发送/ 携带/ 顺序/ 序号/ (/ 1/ ~/ 100/ )/ 的/ 报文/ ./ 分析/ 目的/ 主机/ 端/ 接收/ 到/ 的/ 报文/ 序号/ ,/ 结果/ 如图/ 10/ 所示/ ./ 图/ 10/ 目的/ 主机/ 收到/ 报文/ 序号/ 随/ 时间/ 的/ 关系/ 从/ 2.1/ 节中/ 论述/ 可知/ ,/ 面向/ 连接/ 的/ TCP/ 报文/ 流在/ 数据中心/ 网络/ 流/ 特性/ 的/ 条件/ 下/ ,/ 在/ 到达/ Open/ -/ Flow/ 交换机/ 时/ ,/ 也/ 可能/ 存在/ 无法/ 命中/ 流/ 规则/ 的/ 情况/ ./ 从/ 上/ 图/ 实验/ 结果/ 可知/ ,/ 通用/ 缓存/ 会/ 带来/ 较大/ 的/ 流内/ 报文/ 乱序/ 问题/ ./ 接收/ 到/ 的/ 首/ 报文/ 序号/ 为/ 1/ ,/ 第/ 2/ 个/ 报文/ 为/ 64/ ,/ 依次/ 至/ 97/ ,/ 而后/ 又/ 收到/ 序号/ 为/ 2/ 的/ 报文/ ,/ 这会/ 严重/ 降低/ TCP/ 流/ 的/ 传输/ 带宽/ ./ 而/ 对于/ 应用/ 了/ PiBuffer/ 的/ 交换机/ ,/ 则/ 报文/ 流/ 不会/ 产生/ 报文/ 乱序/ 的/ 情况/ ./ 5.2/ 基于/ NetMagic/ 平台/ 的/ 硬件/ 实现/ 本文/ 基于/ NetMagic/ 可编程/ 硬件/ 网络/ 实验/ 平台/ 实现/ 该/ 缓存/ 管理/ 模型/ ./ NetMagic/ 平台/ 的/ FPGA/ 硬件/ 逻辑/ 可/ 分为/ 报文/ 接收/ 、/ 发送/ 、/ 复制/ 等/ 基本/ 通用/ 逻辑/ 和/ 自定义/ 开发/ 逻辑/ ,/ 其中/ 基本/ 通用/ 处理/ 逻辑/ 为/ 自定义/ 逻辑/ 提供/ 清晰/ 的/ 易用/ 接口/ [/ 19/ ]/ ./ 缓存/ 模型/ 的/ 逻辑/ 实现/ 如图/ 11/ 所示/ ./ Page10/ 图/ 11/ 基于/ NetMagic/ 的/ PiBuffer/ 硬件/ 实现/ 逻辑/ 本/ 实验/ 目的/ 是/ 为了/ 测量/ 不同/ 规则/ 装载/ 延迟/ 下/ (/ 即/ 上文/ tS1/ →/ C/ +/ tC/ +/ tC/ →/ S1/ 中/ 报文/ 的/ 缓存/ 使用/ 情况/ ./ 搭建/ 了/ 如图/ 12/ 所示/ 的/ 1/ 个/ 原型/ 系统/ ./ 图中/ 3/ 台/ PC/ ,/ 1/ 台为/ 控制器/ ,/ 其余/ 两台/ 为/ 报文/ 的/ 发送/ 方/ A/ 和/ 接收/ 方/ B/ ;/ 1/ 台基/ 于/ NetMagic/ 平台/ 实现/ PiBuffer/ 的/ OpenFlow/ 交换机/ ./ 为/ 简化/ 实现/ 但/ 不/ 影响/ 实验/ 结果/ ,/ 该/ 交换机/ 的/ 查表/ 过程/ 为/ 简化/ 后/ 的/ OpenFlow1/ ./ 0/ 标准/ ./ 表/ 2/ 给出/ 了/ 实现/ 该/ 缓存/ 模型/ 所/ 需/ 的/ FPGA/ 资源/ 使用/ 情况/ ./ 从/ 资源/ 的/ 占用/ 比例/ 可知/ ,/ 实现/ 流/ 缓存/ 管理/ 功能/ 所/ 需要/ 的/ FPGA/ 资源/ 并不多/ ,/ 硬件/ 实现/ 可行/ ./ 在/ 缓存/ 报文/ 时/ 按照/ 2KB/ 大小/ 为/ 每个/ 报文/ 分配/ 缓存/ 空间/ ./ 资源/ 名称/ 查找/ 表/ LUT36100/ 寄存器/ 存储器/ 位/ 29399041728640/ (/ 58.8/ %/ )/ 74496/ (/ 2.5/ %/ )/ 实验/ 过程/ 如下/ :/ 首先/ 由/ 发送/ 端/ A/ 主机/ 使用/ VLC/ 软件/ 流化/ 一个/ 视频/ 流向/ 接收端/ B/ 主机/ 发送/ ,/ 当/ 视频流/ 的/ 首/ 报文/ 流/ 经过/ NetMagic/ 时/ ,/ NetMagic/ 将/ 为/ 该流/ 创建/ 一个/ 流/ 缓存/ 表项/ ,/ 并/ 将/ 该/ 流/ 的/ 缓存/ 信息/ 封装/ 成/ Packet/ -/ in/ 发往/ 控制器/ ./ 然后/ ,/ 当/ Packet/ -/ in/ 到达/ 控制器/ ,/ 通过/ 设定/ 控制器/ 下发/ 流/ 表项/ 的/ 延时/ ,/ 来/ 模拟/ 远端/ 控制器/ 响应/ 延时/ ./ 延时/ 以/ 50ms/ 为/ 单位/ ,/ 设定/ 9/ 个/ 延时/ 间隔/ ,/ 最大/ 延时/ 设定/ 为/ 500ms/ ./ 在/ 这个/ 延时/ 期间/ 内/ ,/ NetMagic/ 将/ 缓存/ 报文/ 信息/ 更新/ 到流/ 缓存/ 表中/ ./ 另外/ ,/ 由于/ 不同/ 大小/ 的/ 报文/ 的/ 缓冲区/ 大小/ 相同/ ,/ 因此/ ,/ 测试/ 会/ 关心/ 控制器/ 延时/ 期间/ 的/ 缓存/ 报文/ 个数/ ,/ 而/ 缓存/ 报文/ 个数/ 记录/ 在/ 该/ 流/ 的/ 缓存/ 表项/ 中/ ./ 最后/ ,/ 当/ 控制器/ 下发/ 的/ Flow/ -/ mod/ 到达/ NetMagic/ 时/ ,/ 由/ NetMagic/ 读取/ 在/ 流/ 缓存/ 表项/ 中/ 记录/ 的/ 该/ 流/ 的/ 流/ 缓存/ 报文/ 个/ 数字/ 段/ ,/ 并/ 将/ 其/ 封装/ 成/ 特殊/ 报文/ 发/ 往/ 主机/ B/ ,/ 这样/ 缓存/ 报文/ 的/ 个数/ 就/ 可以/ 通过/ 主机/ B/ 捕获/ 的/ 特殊/ 报文/ 获得/ ./ 图/ 13/ 测试/ 结果显示/ ,/ 缓存/ 报文/ 大小/ 随/ 控制器/ 延时/ 的/ 增加/ 成/ 线性/ 增长/ ,/ 其中/ 测试/ 曲线/ 的/ 抖动/ 是/ 由于/ 发送/ 端/ 软件/ 流化/ 视频流/ 产生/ 的/ 速率/ 抖动/ 造成/ 的/ ./ Page116/ 相关/ 研究/ 避免/ 集中/ 的/ 控制/ 平面/ 成为/ 网络/ 性能/ 的/ 瓶颈/ 是/ SDN/ 在/ 数据中心/ 中/ 落地/ 部署/ 所/ 要/ 解决/ 的/ 重要/ 问题/ 之一/ ./ 目前/ 研究/ 人员/ 主要/ 从/ 两个/ 方面/ 解决/ 该/ 问题/ :/ 一类/ 是/ 提升/ 控制/ 平面/ 的/ 处理/ 能力/ ;/ 另一类/ 是/ 增加/ 数据/ 平面/ 的/ 功能/ ,/ 尽可能减少/ 控制/ 平面/ 与/ 数据/ 平面/ 的/ 非/ 重要/ 信息/ 的/ 交互/ ./ 在/ 提升/ 控制/ 平面/ 的/ 处理/ 能力/ 方面/ ,/ SDN/ 控制器/ 的/ 研发/ 人员/ 运用/ 多线程/ 并行/ 技术/ 、/ 共享/ 队列/ 、/ 批处理/ 等/ 提升/ 单点/ 控制器/ 的/ 报文/ 处理/ 能力/ [/ 20/ ]/ ./ 但/ 由于/ 单点/ 控制器/ 处理/ 性能/ 有/ 上限/ ,/ 为此/ 研究/ 人员/ 提出/ 利用/ 分布式/ 技术/ 提高/ 控制/ 平面/ 处理/ 能力/ ./ HyperFlow/ [/ 7/ ]/ 通过/ 部署/ 多台/ 分布式/ 控制器/ 来/ 分摊/ 与/ 数据/ 平面/ 的/ 交互/ 开销/ ,/ 各/ 控制器/ 间/ 通过/ 消息/ 订阅/ // 发布/ 方式/ 获取/ 全网/ 的/ 统一/ 视图/ ,/ 从而/ 实现/ 逻辑/ 一致性/ 和/ 集中控制/ ./ Onix/ [/ 8/ ]/ 面向/ 商业化/ 应用/ ,/ 在/ 更/ 高层次/ 上/ 提出/ 了/ 控制/ 平面/ 扩展/ 的/ 分层/ 架构/ ,/ 全局/ 网络/ 状态/ 一致性/ 通过/ 每个/ 控制器/ 上/ 的/ 网络/ 信息库/ 来/ 维护/ ./ ONOS/ [/ 9/ ]/ 是/ 近年来/ 发展/ 较为/ 成熟/ 的/ 开源/ 分布式/ SDN/ 控制/ 平台/ ./ 以上/ 研究/ 均/ 可/ 与/ 本文/ 工作/ 互补/ ,/ 提高/ 控制/ 平面/ 的/ 可/ 扩展/ 能力/ ./ 在/ OpenFlow/ 数据/ 平面/ 功能/ 增强/ 方面/ ,/ 与/ 本文/ 工作/ 最/ 接近/ 的/ 是/ Kotani/ 等/ 人/ [/ 10/ ]/ 提出/ 的/ Packet/ _/ in/ 消息/ 过滤/ 机制/ ./ 同/ PiBuffer/ 类似/ ,/ 该/ 机制/ 在/ 发送/ Packet/ _/ in/ 消息/ 之前/ 会/ 记录/ 报文/ 头域/ 的/ 值/ ./ 但/ 不同/ 的/ 是/ ,/ 过滤/ 机制/ 记录/ 的/ 值/ 用于/ 过滤/ 后续/ 相同/ 值/ 的/ 报文/ ,/ 降低/ 高速/ 报文/ 对/ 控制/ 平面/ 的/ 影响/ ./ 而/ PiBuffer/ 并/ 不/ 丢弃/ 这些/ 报文/ ,/ 而是/ 进行/ 缓存/ ,/ 减少/ 丢包/ 带来/ 的/ 影响/ ./ 此外/ ,/ DIFANE/ [/ 11/ ]/ 提出/ 区分/ 权威/ OpenFlow/ 交换机/ 和/ 普通/ OpenFlow/ 交换机/ ,/ 将/ OpenFlow/ 控制/ 平面/ 工作/ 部分/ 卸载/ 到/ 权威/ OpenFlow/ 交换机/ 上/ ,/ 各/ 普通/ OpenFlow/ 交换机/ 根据/ 控制/ 平面/ 下发/ 的/ 分区/ 规则/ 与/ 对应/ 的/ 权威/ OpenFlow/ 交换机/ 通信/ ,/ 再/ 由/ 权威/ OpenFlow/ 交换机/ 根据/ 控制/ 平面/ 下发/ 的/ 权威/ 规则/ 与/ 控制/ 平面/ 交互/ ,/ 从而/ 减少/ 控制/ 平面/ 与/ 数据/ 平面/ 间/ 的/ 交互/ 开销/ ./ 另外/ ,/ 分区/ 规则/ 与/ 权威/ 规则/ 只有/ 在/ 网络拓扑/ 结构/ 发生变化/ 时/ ,/ 才/ 被动/ 地/ 更新/ ,/ 可/ 进一步/ 减轻/ 控制/ 平面/ 负载/ ./ DevoFlow/ [/ 3/ ]/ 则/ 在/ 数据/ 平面/ 采用/ 规则/ 复制/ 和/ 局部/ 操作/ 的/ 方式/ 来/ 减小/ 与/ 控制/ 平面/ 的/ 交互/ ,/ 并/ 使用/ 触发/ 、/ 报告/ 、/ 采样/ 等/ 手段/ 进一步/ 减小/ 数据/ 平面/ 的/ 统计/ 信息/ 到/ 控制/ 平面/ 的/ 开销/ ,/ 从而/ 提高/ SDN/ 控制/ 平面/ 的/ 可扩展性/ ./ 综上/ 分析/ ,/ 增强/ 控制/ 平面/ 的/ 处理/ 能力/ 方案/ 的/ 优点/ 是/ 通用性/ 强/ ,/ 对/ SDN/ 网络体系结构/ 影响/ 较/ 小/ ,/ 缺点/ 是/ SDN/ 网络/ 内部/ 仍/ 充斥/ 大量/ 控制器/ 与/ 交换机/ 间/ 的/ 消息/ ,/ 难以/ 降低/ OpenFlow/ 消息/ 对/ 网络资源/ 占用/ 的/ 开销/ ./ 而/ 扩展/ 数据/ 平面/ 功能/ 的/ 方案/ ,/ 则/ 可以/ 从/ 根源/ 上/ 减少/ 控制器/ 和/ SDN/ 网络/ 的/ 流量/ 负载/ ./ 本文/ 所/ 研究/ 的/ OpenFlow/ 交换机/ 流/ 缓存/ 管理/ 技术/ ,/ 属于/ 数据/ 平面/ 增强/ 的/ 方案/ ,/ 实现/ 了/ OpenFlow/ 规范/ 中/ 指定/ 的/ 优化/ 方法/ ,/ 可以/ 在/ 提高/ 控制/ 平面/ 可扩展性/ 的/ 同时/ ,/ 实现/ 与/ 现有/ SDN/ 网络/ 兼容/ 互通/ ./ 7/ 结论/ 与/ 下/ 一步/ 工作/ 为/ 减少/ 基于/ OpenFlow/ 的/ 数据中心/ 中/ 控制/ 平面/ 与/ 数据/ 平面/ 的/ 交互/ ,/ 提高/ 控制/ 平面/ 的/ 可扩展性/ ,/ 本文/ 利用/ 交换机/ 中/ 的/ 存储资源/ ,/ 提出/ 了/ 一种/ 流/ 粒度/ 的/ 未/ 命中/ 报文/ 缓存/ 管理/ 模型/ PiBuffer/ ./ 原有/ 的/ 缓存/ 模式/ 缺乏/ 对/ 未/ 命中/ 报文/ 的/ 有效/ 组织/ 和/ 管理/ ,/ 并/ 没有/ 充分利用/ 缓存/ 对/ 减少/ 流/ 建立/ 开销/ 带来/ 的/ 好处/ ./ 该/ 模型/ 通过/ PiBT/ 表/ 记录/ 未/ 命中/ 报文/ 的/ 标识/ 信息/ ,/ 区分/ 同/ 一条/ 流/ 的/ 首/ 报文/ 和/ 后续/ 报文/ ,/ 使得/ 同/ 一条/ 未/ 命中/ 报文/ 流只/ 产生/ 一个/ Packet/ -/ in/ 消息/ 发送到/ 控制器/ ./ 而且/ 使得/ 流表/ 下发/ 时/ ,/ 先/ 发送/ 缓存/ 的/ 报文/ ,/ 从而/ 实现/ 流内报/ 文保/ 序/ ./ 实验/ 结果表明/ ,/ PiBuffer/ 与/ 现有/ 的/ 缓存/ 方式/ 相比/ ,/ 降低/ 了/ 对/ OpenFlow/ 通道/ 的/ 占用/ 带宽/ 和/ 交换机/ 的/ CPU/ 开销/ ,/ 实现/ 报文/ 按序/ 转发/ ./ 实验/ 中/ 发现/ PiBuffer/ 占用/ 较/ 多/ 的/ 交换机/ 缓存/ 资源/ 且/ 影响/ 了/ 转发/ 效率/ ,/ 下/ 一步/ 工作/ 将/ 对/ 报文/ 缓存/ 大小/ 进行/ 评估/ 并/ 对/ 缓存/ 时/ 的/ 转发/ 性能/ 进行/ 优化/ ./ 致谢/ 网络/ 与/ 信息安全/ 研究所/ 662/ 教研室/ 的/ 徐/ 东来/ 老师/ 、/ 熊兆中/ 同学/ 在/ 代码/ 调试/ 过程/ 中/ 提供/ 了/ 指导/ 和/ 帮助/ ,/ 在/ 此/ 表示感谢/ !/ Page12/ 

