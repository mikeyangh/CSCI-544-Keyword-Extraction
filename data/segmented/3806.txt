Page1/ 基于/ 分簇/ 机制/ 的/ ZigBee/ 混合/ 路由/ 能量/ 优化/ 算法/ 钱志鸿/ 朱爽/ 王雪/ (/ 吉林大学/ 通信/ 工程学院/ 长春/ 130012/ )/ 摘要/ 针对/ ZigBee/ 路由/ 协议/ 没有/ 很/ 好/ 结合/ AODVjr/ (/ AdhocOn/ -/ DemandDistanceVectorRoutingJunior/ )/ 和/ Cluster/ -/ Tree/ 算法/ 的/ 问题/ ,/ 从/ 网络/ 能量/ 优化/ 的/ 角度/ 出发/ ,/ 文中/ 设计/ 了/ 一种/ 基于/ 分簇/ 机制/ 的/ ZigBee/ 混合/ 路由/ 算法/ —/ —/ —/ CLZBR/ 算法/ ,/ 簇间/ 采用/ AODVjr/ 算法/ ,/ 簇内/ 采用/ Cluster/ -/ Tree/ 算法/ ,/ 并/ 通过/ 计算/ 目的/ 节点/ 的/ 父/ 节点/ 地址/ 等/ 方法/ ,/ 减少/ 网络/ 中/ 冗余/ 的/ RREQ/ (/ RouteRequest/ )/ 分组/ ,/ 降低/ 能量消耗/ ;/ 同时/ 为了/ 避免/ 簇首/ 由于/ 能量/ 过度/ 消耗/ 而/ 成为/ 失效节点/ ,/ 该/ 算法/ 提出/ 备用/ 节点/ 的/ 概念/ ,/ 当/ 簇首/ 能量/ 过/ 低时/ 代替/ 簇首/ 以/ 保证/ 网络/ 的/ 稳定性/ ./ 仿真/ 结果表明/ ,/ CLZBR/ 算法/ 相对/ ZigBee/ 混合/ 路由/ 算法/ 在/ 包/ 投递/ 率/ 、/ 路由/ 开销/ 百分比/ 和/ 网络/ 剩余/ 能量/ 百分比/ 方面/ 都/ 有/ 明显改善/ ./ 关键词/ ZigBee/ ;/ 分簇/ ;/ AODVjr/ ;/ Cluster/ -/ Tree/ ;/ 物/ 联网/ 1/ 引言/ 随着/ 物/ 联网/ 概念/ 的/ 提出/ ,/ 一直/ 倍受/ 瞩目/ 的/ Page2/ 高可靠性/ 等/ 特点/ ,/ 在/ 智能家居/ 、/ 智能/ 交通/ 、/ 医疗/ 以及/ 工业/ 自动化/ 等/ 方面/ 都/ 有/ 广泛应用/ [/ 1/ ]/ ./ 如何/ 优化/ ZigBee/ 路由/ 、/ 降低/ 能量消耗/ 一直/ 是/ 学者/ 关注/ 的/ 热点/ ,/ 虽然/ ZigBee/ 技术/ 优势/ 很多/ ,/ 但/ 网络层/ 却/ 长期/ 处于/ 修改/ 和/ 完善/ 中/ ,/ 因此/ 有/ 大量/ 学者/ 对/ ZigBee/ 路由/ 算法/ 的/ 完善/ 和/ 能量/ 优化/ 展开/ 研究/ ,/ 为物/ 联网/ 的/ 应用/ 与/ 发展/ 奠定/ 了/ 很/ 好/ 的/ 理论/ 基础/ ./ Ha/ 和/ Park/ 等/ 人/ [/ 2/ ]/ 提出/ 一种/ ZigBeemesh/ 网络/ 分层/ 路由/ 协议/ (/ EHRP/ )/ ,/ 该/ 协议/ 利用/ 了/ ZigBee/ 地址/ 分层/ 策略/ ,/ 能/ 找到/ 最短/ 的/ 分层/ 路径/ ,/ 从而/ 减少/ 路由/ 的/ 开销/ ./ Zhang/ 和/ Zhou/ 等/ 人/ [/ 3/ ]/ 提出/ 一种/ 针对/ 路径/ 选择/ 的/ 路由/ 算法/ ,/ 将/ 节点/ 的/ 剩余/ 能量/ 和/ AODVjr/ (/ AdhocOn/ -/ DemandDistanceVectorRoutingJunior/ )/ 路由/ 算法/ 相结合/ ,/ 以便/ 找到/ 能量/ 感知/ 路由/ 和/ 最/ 短/ 路径/ 路由/ 之间/ 的/ 平衡点/ ./ 刘丹/ 等/ 人/ [/ 4/ ]/ 提出/ 基于/ 路由/ 节点/ 特性/ 的/ ZigBee/ 路由/ 算法/ ./ Lin/ 和/ Meng/ 等/ 人/ [/ 5/ ]/ 提出/ 对/ 路由/ 请求/ 分组/ 的/ 泛洪/ 进行/ 控制/ ,/ 从而/ 减少/ 了/ RREQ/ (/ RouteRequest/ )/ 分组/ 的/ 泛洪/ ,/ 降低/ 了/ 能量消耗/ ./ Lee/ 和/ Kim/ 等/ 人/ [/ 6/ ]/ 是/ 将/ ZigBee/ 网络/ 分成/ 若干个/ 逻辑/ 簇/ ,/ 并/ 使用/ 簇/ 标签/ 来/ 对/ 簇/ 进行/ 标识/ ./ Bhatia/ 和/ Kaushik/ [/ 7/ ]/ 也/ 将/ 分簇/ 引入/ ZigBee/ 路由/ 中/ ,/ 但/ 这/ 两种/ 方法/ 每个/ 簇内/ 节点/ 数过/ 少/ ,/ 网络/ 中/ 大多数/ 是/ RN/ +/ 节点/ ,/ 没有/ 从根本上/ 解决/ RREQ/ 分组/ 的/ 泛洪/ ,/ 从而/ 造成/ 了/ 能量/ 的/ 多余/ 消耗/ ./ 李成/ 法等/ 人/ [/ 8/ ]/ 认为/ 均匀/ 区/ 划分/ 簇会/ 导致/ 汇聚/ 点/ 附近/ 的/ 节点/ 能量/ 过度/ 消耗/ 而/ 失效/ ,/ 故/ 提出/ 一种/ 非/ 均匀/ 分簇/ 的/ 无线/ 传感器/ 网络/ 路由/ 协议/ ./ Shang/ 等/ 人/ [/ 9/ ]/ 利用/ 实际/ 平台/ 对/ AODVjr/ 进行/ 了/ 改进/ ,/ 提出/ 将/ AODV/ 的/ 路由/ 修复/ RERR/ 加入/ AODVjr/ 中/ ,/ 通过/ 多路/ 反馈/ 的/ 方式/ 来/ 更好/ 地/ 平衡/ 负载/ ,/ 但/ 同时/ 也/ 增加/ 了/ 控制/ 开销/ ./ Ran/ 等/ 人/ [/ 10/ ]/ 考虑/ 到/ ZigBee/ 规范/ 中/ 虽然/ 采用/ AODVjr/ +/ Cluster/ -/ Tree/ 的/ 混合/ 路由/ 算法/ ,/ 但/ 几乎/ 没有/ 通过/ 平衡/ 二者/ 来/ 提高/ 网络/ 性能/ 的/ 设计/ 方法/ ,/ 并/ 据此/ 提出/ 一种/ 基于/ 数据服务/ 和/ 邻居/ 节点/ 能量/ 平衡/ 的/ ZigBee/ 网络层/ 路由/ 选择/ 策略/ ./ 但/ 该/ 方法/ 仅/ 根据/ 数据流/ 的/ 不同/ ,/ 来/ 设置/ ZigBee/ 协议/ 中路/ 由/ 发现/ 域/ 相关/ 的/ 参数/ ,/ 并/ 没有/ 从/ 路由/ 本身/ 出发/ 来/ 减少/ 能量/ 的/ 损耗/ ./ 本文/ 在/ 对/ ZigBee/ 协议/ 规范/ 深入研究/ 后/ ,/ 发现/ 虽然/ ZigBee/ 网络层/ 采用/ AODVjr/ [/ 11/ ]/ +/ Cluster/ -/ Tree/ ①/ 的/ 混合/ 路由/ 算法/ ,/ 但/ 现阶段/ 几乎/ 都/ 是/ 将/ AODVjr/ 和/ Cluster/ -/ Tree/ 路由/ 算法/ 分开/ 来/ 进行/ 研究/ ,/ 而且/ 现有/ 的/ 研究/ 及/ 规范/ 中/ 并/ 没有/ 提及/ 如何/ 设置/ 相应/ 参数/ 来/ 进行/ 路由/ 策略/ 的/ 选择/ ,/ 缺少/ 能/ 结合/ 二者/ 优点/ 、/ 使/ 二者/ 平衡/ 的/ 设计/ 方法/ [/ 10/ ]/ ;/ 同时/ 现有/ 论文/ 中/ 大多数/ 都/ 提及/ 到/ 查找/ 公共/ 父/ 节点/ 的/ 概念/ ,/ 但/ 几乎/ 没有/ 人/ 给出/ 如何/ 根据/ 节点/ 地址/ 计算/ 出/ 其父/ 节点/ 地址/ 的/ 具体方法/ ./ 2ZigBee/ 路由/ 机制/ ZigBee/ 有/ 3/ 种/ 网络拓扑/ 形式/ ,/ 分别/ 为/ 星状/ 网/ 、/ 树状/ 网/ 和/ 网状/ 网/ ./ ZigBee/ 网络/ 中/ 节点/ 可以/ 分为/ 3/ 种/ 类型/ :/ ZigBee/ 协调/ 器/ (/ ZigBeeCoordinator/ ,/ ZC/ )/ 、/ ZigBee/ 路由/ 节点/ (/ ZigBeeRouter/ ,/ ZR/ )/ 和/ ZigBee/ 终端/ 节点/ (/ ZigBeeEndDevice/ ,/ ZED/ )/ ,/ 其中/ ,/ ZC/ 和/ ZR/ 属于/ 全功能/ 设备/ (/ FullFunctionDevice/ ,/ FFD/ )/ ,/ 可以/ 与/ FFD/ 和/ RFD/ (/ ReducedFunctionDevice/ )/ 进行/ 通信/ ,/ ZED/ 属于/ 简化/ 功能/ 设备/ (/ RFD/ )/ ,/ 只能/ 和/ FFD/ 进行/ 通信/ ,/ 每个/ 网络/ 中/ 只能/ 有/ 一个/ ZC/ ,/ 是/ 一个/ 网络/ 的/ 发起者/ 并/ 成为/ 该/ 网络/ 的/ 控制中心/ ,/ 其它/ 节点/ 相应/ 加入/ 该/ 网络/ ./ 2.1/ ZigBee/ 地址/ 分配/ ZigBee/ 网络/ 中/ 的/ 每个/ 节点/ 都/ 有/ 一个/ 64/ 位/ 扩展/ 地址/ 和/ 一个/ 16/ 位短/ 地址/ ,/ 64/ 位/ 扩展/ 地址/ 类似/ 于/ Internet/ 中/ 的/ MAC/ 地址/ ,/ 是/ 节点/ 的/ 唯一/ 标识/ ;/ 16/ 位短/ 地址/ 由/ 加入/ 网络/ 的/ 节点/ 的/ 父/ 节点/ 进行/ 动态分配/ ,/ 类似/ 于/ IP地址/ ,/ 仅/ 用于/ 路由/ 机制/ 和/ 网络/ 中/ 的/ 数据传输/ ./ 协调/ 器/ 首先/ 规定/ 3/ 个/ 参数/ :/ Cm/ (/ 父/ 节点/ 最/ 多/ 可以/ 连接/ 的/ 子/ 节点/ 数/ )/ 、/ Lm/ (/ 网络/ 的/ 最大/ 深度/ )/ 、/ Rm/ (/ 子/ 节点/ 中/ 最/ 多/ 可以/ 连接/ 的/ 路由/ 节点/ 数/ )/ ,/ 计算/ 网络/ 深度/ 为/ d/ 的/ 父/ 节点/ 为/ 其子/ 节点/ 分配/ 地址/ 时/ 的/ 偏移量/ Cskip/ (/ d/ )/ ,/ 具体/ 如式/ (/ 1/ )/ 所示/ ./ Cskip/ (/ d/ )/ =/ 只有/ 当/ 偏移量/ 大于/ 0/ 时/ ,/ 该/ 节点/ 才/ 具有/ 为/ 其子/ 节点/ 分配/ 网络地址/ 的/ 能力/ ,/ 即/ 允许/ 子/ 节点/ 的/ 加入/ ./ 具体/ 分配机制/ 如下/ :/ (/ 1/ )/ 协调/ 器/ 将/ 自身/ 地址/ 设置/ 为/ 0/ ,/ 网络/ 深度/ 设置/ 为/ 0/ ./ (/ 2/ )/ 假设/ 父/ 节点/ 的/ 地址/ 为/ Ap/ ,/ 当其/ 第/ i/ 个/ 路由/ 节点/ 加入/ 时/ ,/ 分配/ 的/ 地址/ 如式/ (/ 2/ )/ 所示/ ,/ 其中/ 1/ / i/ / Rm/ ./ ①/ IEEEP802/ ./ 15WorkingGroup/ ./ ClusterTreeProtocolPage3/ (/ 3/ )/ 当其/ 第/ k/ 个/ 终端/ 节点/ 加入/ 时/ ,/ 分配/ 的/ 地址/ 如式/ (/ 3/ )/ 所示/ ,/ 其中/ 1/ / k/ / (/ Cm/ -/ Rm/ )/ ./ (/ 4/ )/ 通过/ 此种/ 地址/ 分配/ ,/ 节点/ 根据/ 式/ (/ 4/ )/ ,/ 判断/ 目的/ 节点/ 是否/ 为/ 自己/ 后代/ 节点/ ./ (/ 5/ )/ 假如/ 节点/ 的/ 地址/ 为/ A/ 、/ 深度/ 为/ d/ ,/ 地址/ 为/ D/ 的/ 节点/ 满足/ 式/ (/ 4/ )/ ,/ 则/ 地址/ 为/ D/ 的/ 节点/ 是/ 地址/ 为/ A/ 的/ 节点/ 的/ 后代/ 节点/ ,/ 地址/ 为/ A/ 的/ 节点/ 根据/ 式/ (/ 5/ )/ 确定/ 下/ 一/ 跳/ 节点/ 的/ 地址/ ./ D/ ,/ 烄/ N/ =/ A/ +/ 1/ +/ D/ -/ (/ A/ +/ 1/ )/ 烅/ 烆/ (/ 6/ )/ 如果/ 地址/ 为/ D/ 的/ 节点/ 不是/ 地址/ 为/ A/ 的/ 节点/ 的/ 后代/ 节点/ ,/ 则/ 将/ 数据/ 传给/ 地址/ 为/ A/ 的/ 节点/ 的/ 父/ 节点/ ./ 虽然/ 这种/ 地址/ 分配/ 方案/ 主要/ 针对/ 树状/ 网络/ ,/ 但/ 更/ 适合/ 中/ 大型/ 网络/ 的/ 簇状/ 结构/ ,/ 也/ 可以/ 利用/ 该种/ 地址/ 分配/ 方案/ 进行/ 地址/ 分配/ ./ 本文/ 对/ 该种/ 分配/ 方案/ 进行/ 了/ 深度/ 研究/ ,/ 发现/ 可以/ 将/ 地址/ 分为/ 若干/ 地址/ 块/ ,/ 当/ 知道/ 目的/ 节点/ 地址/ 时/ ,/ 能/ 通过/ 轮询/ 的/ 方式/ 计算/ 出/ 目的/ 地址/ 的/ 父/ 节点/ 地址/ ,/ 当源/ 节点/ 路由表/ 中/ 没有/ 目的/ 节点/ 但/ 却/ 有/ 其父/ 节点/ 时/ ,/ 便/ 可/ 直接/ 传递/ ,/ 省去/ 了/ 路由/ 查找/ 过程/ ,/ 节省/ 很多/ 开销/ ,/ 从而/ 节约/ 了/ 能量/ ./ 2.2/ ZigBee/ 路由/ 算法/ ZigBee/ 采用/ AODVjr/ +/ Cluster/ -/ Tree/ 的/ 路由/ 算法/ [/ 12/ ]/ ,/ 将/ 路由/ 节点/ 分成/ 两类/ :/ RN/ +/ 节点/ 和/ RN/ -/ 节点/ ,/ 其中/ ,/ RN/ +/ 节点/ 可以/ 采用/ AODVjr/ 路由/ 算法/ ,/ 能/ 发起/ 路由/ 发现/ 过程/ 来/ 寻找/ 最佳/ 路由/ 路径/ ,/ RN/ -/ 节点/ 则/ 只能/ 采用/ Cluster/ -/ Tree/ 算法/ ./ AODVjr/ 算法/ 可以/ 通过/ 路由/ 发现/ 过程/ 找到/ 到达/ 目的/ 节点/ 的/ 最佳/ 路径/ ,/ 但/ 在/ 发起/ 路由/ 发现/ 过程/ 时/ ,/ 需/ 广播/ RREQ/ 分组/ ,/ 且/ 大多数/ 的/ RREQ/ 分组/ 是/ 无用/ 的/ ,/ 这样/ 就/ 造成/ 了/ 冗余/ ,/ 同时/ ,/ 转发/ 分组会/ 造成/ 能量消耗/ ,/ 导致/ 节点/ 过早/ 死亡/ ./ Cluster/ -/ Tree/ 算法/ 简单/ ,/ 且/ 不用/ 存储/ 路由表/ ,/ 降低/ 了/ 路由/ 协议/ 的/ 控制/ 开销/ 和/ 节点/ 能量消耗/ ,/ 但/ 在/ 网络/ 规模/ 过大时/ ,/ 会/ 因为/ 寻找/ 的/ 非/ 最佳/ 路由/ 路径/ ,/ 造成/ 跳数/ 过/ 多/ ,/ 导致/ 路由/ 费用/ 过高/ ,/ 延时/ 过大/ ./ AODVjr/ 和/ Cluster/ -/ Tree/ 路由/ 算法/ 都/ 存在/ 着/ 各自/ 的/ 优缺点/ ,/ 虽然/ ZigBee/ 将/ 二者/ 结合/ 起来/ ,/ 但/ 并/ 没有/ 相应/ 规范/ 中/ 提及/ 如何/ 设置/ 相应/ 参数/ 来/ 进行/ 路由/ 策略/ 的/ 选择/ ,/ 缺少/ 能/ 结合/ 二者/ 优点/ 、/ 使/ 二者/ 平衡/ 的/ 设计/ 方法/ [/ 10/ ]/ ./ 3CLZBR/ 算法/ 本文/ 为了/ 便于/ 中/ 大型/ 网络/ 的/ 管理/ ,/ 提出/ 一种/ 能/ 很/ 好/ 综合/ AODVjr/ 和/ Cluster/ -/ Tree/ 算法/ 优点/ 的/ ZigBee/ 路由/ 算法/ —/ —/ —/ CLZBR/ 算法/ ,/ 该/ 算法/ 将/ 分簇/ 技术/ 引入/ ZigBee/ 网络/ 中/ ,/ 簇/ 与/ 簇/ 之间/ 采用/ AODVjr/ 算法/ 进行/ 数据/ 的/ 传输/ ,/ 而/ 在/ 簇内/ 采用/ 简单/ 的/ Cluster/ -/ Tree/ 算法/ ./ 不仅/ 使用/ 最佳/ 路由/ 路径/ ,/ 且/ 减少/ 了/ 冗余/ 的/ RREQ/ 分组/ ,/ 网/ 内/ 很多/ 节点/ 采用/ 简单/ 的/ Cluster/ -/ Tree/ 算法/ ,/ 从而/ 降低/ 了/ 能量/ 的/ 消耗/ ;/ 为了/ 避免/ 簇首/ 能量消耗/ 过度/ 而/ 造成/ 网路/ 的/ 中断/ ,/ 该/ 算法/ 引入/ 备用/ 节点/ 的/ 概念/ ;/ 本文/ 还/ 针对/ ZigBee/ 的/ 地址/ 分配/ 方案/ 进行/ 了/ 研究/ ,/ 提出/ 一种/ 根据/ 目的/ 节点/ 计算/ 其父/ 节点/ 地址/ 的/ 方法/ ,/ 减少/ 了/ 网内/ 路径/ 建立/ 的/ 过程/ ,/ 降低/ 了/ 网络/ 的/ 开销/ ,/ 从而/ 节约/ 了/ 能量/ ./ 3.1/ CLZBR/ 簇/ 结构/ 的/ 建立/ CLZBR/ 算法/ 将/ ZigBee/ 网络/ 分为/ 很多/ 个/ 逻辑/ 簇/ ,/ 节点/ 分为/ 4/ 种/ 类型/ :/ 簇首/ 、/ 网/ 关节点/ 、/ 簇/ 成员/ 及/ 备用/ 节点/ ./ 该/ 算法/ 用/ 节点/ 标志/ 位/ r/ 来/ 判断/ 不同/ 的/ 节点/ 类型/ ,/ r/ 为/ 0/ 代表/ 簇首/ (/ CH/ )/ ;/ r/ 为/ 1/ 代表/ 网/ 关节点/ (/ GW/ )/ ;/ r/ 为/ 2/ 代表/ 备用/ 节点/ (/ AH/ )/ ;/ r/ 为/ 3/ 代表/ 簇/ 成员/ ./ 每个/ 簇/ 包含/ 一个/ 簇首/ ,/ 簇首起/ 簇内/ 控制/ 及/ 管理/ 作用/ ,/ 包括/ 簇内/ 节点/ 地址/ 及/ 路由/ 等/ 信息/ ./ 同时/ ,/ 为了/ 避免/ 簇首/ 由于/ 能量消耗/ 过多/ 而/ 失效/ ,/ 造成/ 网络/ 断开/ ,/ 使/ 每个/ 簇内/ 包含/ 一个/ 备用/ 节点/ ,/ 当/ 簇首/ 能量/ 过/ 低时/ ,/ 代替/ 簇首/ 充当/ 本/ 簇簇/ 首/ ,/ 即当/ 簇首/ 剩余/ 能量/ 低于/ 额定/ 阈值/ 时/ ,/ 退化/ 成簇/ 成员/ 节点/ ,/ 将/ 自身/ 节点/ 标志/ 位/ r/ 设置/ 为/ 3/ ;/ 备用/ 节点/ 充当/ 本/ 簇簇/ 首/ ,/ 并/ 将/ 自身/ 节点/ 标志/ 位/ r/ 设置/ 为/ 0/ ./ 本文/ 对/ 簇/ 的/ 形成/ 做/ 了/ 如下/ 规定/ :/ (/ 1/ )/ 只有/ 协调/ 器/ 和/ 路由/ 节点/ 有/ 权利/ 形成/ 簇/ ,/ 并/ 成为/ 簇首/ ./ 终端/ 节点/ 不能/ 形成/ 簇/ ,/ 只能/ 加入/ 其父/ 节点/ 所在/ 簇/ ./ (/ 2/ )/ 只有/ 距离/ 簇首/ 为/ 偶数/ 的/ 路由/ 节点/ 能/ 形成/ 新/ 的/ 簇/ ,/ 并/ 成为/ 簇首/ ./ 这种/ 方式/ 将/ 简化/ 簇/ 形成/ 的/ 同时/ 保持/ 簇/ 的/ 逻辑关系/ ./ (/ 3/ )/ 每个/ 簇内/ 最多/ 只能/ 有/ 两个/ 网/ 关节点/ ./ (/ 4/ )/ 每个/ 簇/ 的/ 网络/ 深度/ 为/ 3/ (/ 可以/ 自行/ 设置/ )/ ./ CLZBR/ 算法/ 将/ 簇/ 的/ 形成/ 过程/ 大致/ 分为/ 7/ 步/ ,/ 图/ 1/ 为/ CLZBR/ 的/ 一个/ 简单/ 簇/ 结构/ ,/ 接下来/ 将/ 结合/ 图/ 1/ 进行/ 分簇/ 过程/ 的/ 说明/ ./ (/ 1/ )/ 协调/ 器/ a/ 首先/ 建立/ 网络/ ,/ 形成/ 第一个/ 逻辑/ 簇/ 并/ 成为/ 簇首/ ,/ 簇/ 深度/ (/ CLm/ )/ 限制/ 为/ 3/ (/ 可/ 自行/ 设置/ )/ ./ Page4/ (/ 2/ )/ a/ 将/ 自身/ 的/ 节点/ 标记/ 位/ r/ 设置/ 为/ 0/ ,/ 其它/ 节点/ 加入/ 该/ 簇/ ,/ a/ 通过/ 式/ (/ 2/ )/ 和/ (/ 3/ )/ 为/ 加入/ 的/ 子/ 节点/ 分配/ 16/ 位短/ 地址/ ./ (/ 3/ )/ a/ 从/ 加入/ 的/ 子/ 路由/ 节点/ 中/ 选择/ 一个/ 剩余/ 能量/ 最大/ 的/ 路由/ 节点/ b/ 作为/ 本簇/ 的/ 备用/ 节点/ ,/ 选择/ 两个/ 后代/ 节点/ 最多/ 的/ 路由/ 节点/ c/ 和/ d/ 作为/ 本簇/ 的/ 网/ 关节点/ ./ (/ 4/ )/ a/ 在/ 本/ 簇内/ 进行/ 广播/ ,/ c/ 和/ d/ 节点/ 收到/ 广播/ 后/ 将/ 自身/ 的/ 节点/ 标记/ 位/ r/ 设置/ 为/ 1/ ,/ b/ 节点/ 将/ 自身/ 的/ 节点/ 标志/ 位/ r/ 设置/ 为/ 2/ ,/ 其它/ 簇内/ 节点/ 将/ 自身/ 的/ 节点/ 标志/ 位/ r/ 设置/ 为/ 3/ ./ (/ 5/ )/ a/ 记录/ 簇内/ 所有/ 节点/ 的/ 地址/ 信息/ ./ (/ 6/ )/ c/ 和/ d/ 分别/ 在/ 链接/ 的/ 子/ 路由/ 节点/ 中/ 选择/ 两个/ 后代/ 节点/ 最多/ 的/ 节点/ e/ 和/ f/ 做/ 为/ 新/ 簇/ 的/ 簇首/ ,/ 并/ 通过/ 上述/ 方法/ 建立/ 新/ 的/ 簇/ ,/ 并/ 不断/ 传递/ 下去/ ,/ 从而/ 形成/ 各个/ 逻辑/ 簇/ ./ 3.2/ CLZBR/ 父/ 节点/ 地址/ 的/ 计算/ 本文/ 通过/ 对/ ZigBee/ 的/ 地址/ 分配/ 方案/ 进行/ 研究/ ,/ 设计/ 出/ 一种/ 根据/ 目的/ 节点/ 地址/ 计算/ 其父/ 节点/ 地址/ 的/ 方法/ ,/ 主要/ 是/ 通过/ 轮询/ 的/ 手段/ ,/ 根据/ 式/ (/ 4/ )/ 判断/ 目的/ 节点/ 所在/ 地址/ 块/ ,/ 并/ 最终/ 找到/ 目的/ 地址/ ,/ 当/ 找到/ 相应/ 的/ 地址/ 时/ ,/ 便/ 也/ 计算/ 出/ 其父/ 节点/ 的/ 地址/ ./ 图/ 2/ 详细/ 地/ 介绍/ 了/ 父/ 节点/ 地址/ 的/ 计算方法/ ,/ 其中/ 字母/ A/ 为/ 直接/ 父/ 节点/ 的/ 地址/ ,/ d/ 为/ 当前/ 深度/ ,/ AL/ 为父/ 节点/ 的/ 后代/ 节点/ 地址/ 下界/ ,/ AU/ 为父/ 节点/ 的/ 后代/ 节点/ 地址/ 上/ 界/ ,/ FD/ 为/ 真/ 表示/ 已经/ 找到/ 相应/ 的/ 目的/ 地址/ ,/ R/ 为/ 路由/ 参数/ ./ Ap/ 代表/ 最终/ 计算/ 出/ 的/ 父/ 节点/ 地址/ ,/ Deep/ 代表/ 目的/ 节点/ 的/ 深度/ ./ 并/ 使用/ 字母/ B/ 代表/ Cskip/ (/ d/ -/ 1/ )/ ×/ Rm/ ,/ C/ 代表/ Cskip/ (/ d/ )/ ×/ Rm/ ./ 图/ 1/ 中/ 标识/ 节点/ 后/ 的/ 数字/ 为/ 根据/ ZigBee/ 的/ 地址/ 分配/ 方式/ 计算出来/ 的/ 节点/ 地址/ ,/ 接下来/ 将/ 结合/ 图/ 1/ 中/ 对/ 该/ 计算/ 过程/ 进行/ 详细/ 叙述/ ./ (/ 1/ )/ 设/ 未知/ 节点/ q/ 的/ 地址/ 为/ D/ ,/ 查看/ q/ 是否/ 为/ 协调/ 器/ a/ 的/ 终端/ 节点/ ,/ 如果/ 是/ ,/ 例如/ 节点/ j/ ,/ 则/ 其父/ 节点/ 地址/ 为/ a/ 的/ 地址/ 0/ ,/ 自身/ 深度/ 为/ 1/ ./ 如果/ 不是/ ,/ 进入/ 步/ (/ 2/ )/ ./ (/ 2/ )/ 从/ 协调/ 器/ 的/ 第一个/ 路由/ 地址/ 块/ 开始查找/ ,/ 如果/ 属于/ 该/ 路由/ 地址/ 块/ ,/ 即/ 1/ ~/ 426/ ,/ 则/ 进入/ 步/ (/ 3/ )/ ,/ 否则/ 进入/ 步/ (/ 4/ )/ ./ (/ 3/ )/ 将/ 所在/ 地址/ 块/ 按/ 深度/ 一级/ 一级/ 进行/ 查找/ ,/ 每/ 一级/ 均/ 先/ 查找/ 当前/ 父/ 节点/ 的/ 路由/ 地址/ 块/ ,/ 如/ 属于/ 某/ 地址/ 块/ 则/ 增加/ 一级/ 继续/ 查找/ ,/ 直至/ 找到/ d/ ,/ 即/ FD/ 为/ 1/ ,/ 例如/ 节点/ k/ 需/ 经过/ 4/ 级/ 查找/ ,/ 之后/ 进入/ 步/ (/ 5/ )/ ;/ 如/ 不/ 属于/ 任何/ 路由/ 地址/ 块/ 则/ 为/ 当前/ 父/ 节点/ 的/ 终端/ 节点/ ,/ 例如/ 节点/ l/ 经过/ 5/ 级/ 查找/ 后/ 为/ 节点/ k/ 的/ 终端/ 节点/ ,/ l/ 的/ 父/ 节点/ 即为/ k/ 节点/ ,/ 之后/ 进入/ 步/ (/ 5/ )/ ./ Page5/ (/ 4/ )/ 对/ 协调/ 器/ 其它/ 地址/ 块/ 进行/ 查找/ ,/ 直至/ 找到/ 所在/ 地址/ 块/ ,/ 例如/ 节点/ i/ 属于/ 第四/ 地址/ 块/ ,/ 即/ 1279/ ~/ 1704/ ;/ 节点/ k/ 和/ l/ 属于/ 第二/ 地址/ 块/ ,/ 即/ 427/ ~/ 852/ ,/ 之后/ 进入/ 步/ (/ 3/ )/ ./ (/ 5/ )/ 得出/ 计算结果/ ,/ q/ 的/ 父/ 节点/ 地址/ 为/ 当前/ 父/ 节点/ 的/ 地址/ ,/ 即/ 最终/ 字母/ A/ 的/ 值/ ,/ 深度/ 为/ 字母/ D/ 的/ 值/ ,/ 例如/ 节点/ i/ 只/ 经过/ 1/ 级/ 查找/ ,/ 其父/ 节点/ 地址/ 为/ 0/ ,/ 自身/ 深度/ 为/ 1/ ;/ 节点/ k/ 经过/ 4/ 级/ 查找/ ,/ 其父/ 节点/ 地址/ 为/ 429/ ,/ 自身/ 深度/ 为/ 4/ ;/ 节点/ l/ 需/ 经过/ 5/ 级/ 查找/ ,/ 其父/ 节点/ 地址/ 为/ 430/ ,/ 自身/ 深度/ 为/ 5/ ./ 这种/ 方法/ 主要/ 是/ 针对/ 当源/ 节点/ 有/ 数据/ 发送给/ 目的/ 节点/ 时/ ,/ 发现/ 路由表/ 项中/ 并/ 没有/ 包含/ 目的/ 节点/ 但/ 却/ 有/ 其父/ 节点/ 地址/ 的/ 现象/ ,/ 源/ 节点/ 就/ 可以/ 直接/ 将/ 数据/ 发/ 往/ 目的/ 节点/ 的/ 父/ 节点/ ,/ 这样/ 当父/ 节点/ 收到/ 数据/ 之后/ ,/ 便/ 可以/ 采用/ Cluster/ -/ Tree/ 的/ 方式/ 将/ 数据/ 传至/ 目的/ 节点/ ./ 该/ 方法/ 省去/ 了/ 路由/ 发现/ 过程/ ,/ 不仅/ 减少/ 了/ 冗余/ 分组/ 、/ 节省/ 了/ 网络/ 的/ 开销/ ,/ 从而/ 也/ 降低/ 了/ 延时/ 和/ 能耗/ ./ 3.3/ CLZBR/ 数据/ 帧/ 的/ 传输/ 簇/ 如果/ 选择/ 过/ 大便/ 会/ 失去/ 分簇/ 的/ 意义/ ,/ 一般来说/ ,/ 一个/ 簇/ 都/ 不会/ 特别/ 的/ 大/ ./ 在/ 簇内/ 使用/ AODVjr/ 算法/ 相对/ 耗能/ 多/ ,/ 同时/ 网络/ 中/ 如果/ 过多/ 的/ 使用/ RN/ +/ 节点/ ,/ 将会/ 产生/ 大量/ 的/ RREQ/ 分组/ 冗余/ ,/ 从而/ 造成/ 能量/ 的/ 严重/ 损耗/ ,/ 所以/ CLZBR/ 算法/ 将/ 簇/ 的/ 自身/ 深度/ 限制/ 为/ 3/ (/ 可以/ 根据/ 实际/ 需要/ 进行/ 设置/ )/ ,/ 并/ 选择/ 在/ 簇/ 与/ 簇/ 之间/ 使用/ AODVjr/ 算法/ 进行/ 传输/ ,/ 而/ 簇内/ 使用/ Cluster/ -/ Tree/ 算法/ 进行/ 传输/ ,/ 即/ 簇首/ 、/ 网/ 关节点/ 和/ 备用/ 节点/ 采用/ RN/ +/ 节点/ ,/ 但/ 需/ 对/ 备用/ 节点/ 进行/ 限制/ ,/ 平时/ 只能/ 采用/ Cluster/ -/ Tree/ 算法/ ,/ 只有/ 当其/ 充当/ 本/ 簇簇/ 首时/ ,/ 才/ 可以/ 采用/ AODVjr/ 算法/ ,/ 其它/ 路由/ 节点/ 采用/ RN/ -/ 节点/ ./ (/ 1/ )/ 源/ 节点/ 所在/ 簇源/ 节点/ 所在/ 簇/ 的/ 节点/ 在/ 接收/ 到/ 数据/ 帧/ 之后/ 的/ 处理/ 流程/ 具体/ 如图/ 3/ 所示/ ./ 当源/ 节点/ 有/ 信息/ 要/ 进行/ 传输/ 时/ ,/ 源/ 节点/ 首先/ 通过/ 式/ (/ 4/ )/ 判断/ 目的/ 节点/ 是否是/ 自己/ 的/ 后代/ 节点/ ,/ 若/ 是/ ,/ 传向/ 该/ 分支/ 的/ 下/ 一/ 跳/ 节点/ ,/ 若/ 不是/ ,/ 则/ 判断/ 自身/ 节点/ 类型/ ,/ 并/ 根据/ 节点/ 类型/ 的/ 不同/ 采取/ 不同/ 的/ 处理/ 方式/ ./ 源/ 节点/ 所在/ 簇/ 成员/ 在/ 收到/ 数据/ 帧/ 或者/ 发送数据/ 帧/ 时/ ,/ 只能/ 采用/ Cluster/ -/ Tree/ 算法/ ,/ 不能/ 存储/ 路由表/ ,/ 需/ 首先/ 判断/ 自己/ 是不是/ 目的/ 节点/ ./ 若/ 是/ ,/ 接收数据/ ;/ 若/ 不是/ ,/ 判断/ 目的/ 节点/ 是否是/ 自己/ 的/ 后代/ 节点/ ,/ 假如/ 是/ ,/ 传向/ 该/ 分支/ 的/ 下/ 一/ 跳/ 节点/ ,/ 否则/ 节点/ 根据/ 图/ 3/ 源/ 节点/ 所在/ 簇/ 节点/ 对/ 数据/ 帧/ 的/ 处理/ 流程/ Cluster/ -/ Tree/ 算法/ 进行/ 数据/ 的/ 转发/ ,/ 将/ 数据/ 帧/ 发往/ 其父/ 节点/ ,/ 最终/ 传至本/ 簇簇/ 首/ ./ 源/ 节点/ 所在/ 簇网/ 关节点/ 在/ 收到/ 数据/ 帧/ 或者/ 发送数据/ 帧/ 时/ ,/ 首先/ 判断/ 自己/ 是不是/ 目的/ 节点/ ./ 若/ 是/ ,/ 接收数据/ ;/ 若/ 不是/ ,/ 判断/ 目的/ 节点/ 是否是/ 自己/ 的/ 后代/ 节点/ ,/ 假如/ 是/ ,/ 传向/ 该/ 分支/ 的/ 下/ 一/ 跳/ 节点/ ,/ 否则/ 直接/ 将/ 数据/ 帧/ 传给/ 本/ 簇簇/ 首/ (/ 深度/ 较/ 低/ 的/ 簇首/ )/ ./ 源/ 节点/ 所在/ 簇簇/ 首在/ 收到/ 数据/ 帧/ 或者/ 发送数据/ 帧/ 时/ ,/ 首先/ 判断/ 自己/ 是不是/ 目的/ 节点/ ./ 若/ 是/ ,/ 接收数据/ ;/ 若/ 不是/ ,/ 判断/ 目的/ 节点/ 是否是/ 自己/ 的/ 后代/ 节点/ ,/ 若/ 是/ ,/ 传向/ 该/ 分支/ 的/ 下/ 一/ 跳/ 节点/ ,/ 若/ 不是/ ,/ 簇首/ 暂存/ 该/ 数据/ 信息/ ,/ 查看/ 路由表/ 是否/ 包含/ 目的/ 节点/ 地址/ 条目/ ,/ 如果/ 有/ ,/ 直接/ 将/ 数据/ 按照/ 指定/ 路径/ 传送/ 给/ 目的/ 节点/ ,/ 如果/ 没有/ ,/ 根据/ 目的/ 节点/ 地址/ 计算/ 其父/ 节点/ 的/ 地址/ ,/ 查看/ 路由表/ 是否/ 包含/ 其父/ 节点/ 地址/ 条目/ ,/ 包含/ 则/ 直接/ 将/ 数据/ 传给/ 目的/ 节点/ 的/ 父/ 节点/ ,/ 不/ 包含/ 则/ 发起/ 路由/ 发现/ 过程/ 来/ 寻找/ 到达/ 目的/ 节点/ 的/ 最佳/ 路径/ ./ (/ 2/ )/ 目的/ 节点/ 所在/ 簇/ 目的/ 节点/ 所在/ 簇/ 的/ 节点/ 在/ 接收/ 到/ 数据/ 帧/ 之后/ 的/ 处理/ 流程/ 具体/ 如图/ 4/ 所示/ ./ Page6/ 图/ 4/ 目的/ 节点/ 所在/ 簇/ 节点/ 对/ 数据/ 帧/ 的/ 处理/ 流程/ 当/ 信息/ 传至/ 目的/ 节点/ 所在/ 簇簇/ 首时/ ,/ 簇首/ 对比/ 自己/ 已存/ 的/ 簇内/ 节点/ 地址/ 信息/ ,/ 发现/ 有/ 目的/ 节点/ 地址/ 信息/ ,/ 该/ 簇首/ 暂存/ 数据/ 信息/ ,/ 并/ 将/ 数据/ 传至/ 目的/ 节点/ 所在/ 分支/ ,/ 最终/ 传至/ 目的/ 节点/ ./ 假如/ 是/ 源/ 节点/ 通过/ 计算/ 含有/ 目的/ 节点/ 的/ 父/ 节点/ 地址/ 信息/ ,/ 将/ 数据/ 发给/ 目的/ 节点/ 的/ 父/ 节点/ ,/ 父/ 节点/ 直接/ 将/ 数据/ 信息/ 交付给/ 目的/ 节点/ ;/ 否则/ 目的/ 节点/ 所在/ 簇/ 的/ 簇/ 分支/ 在/ 收到/ 数据/ 帧/ 之后/ ,/ 节点/ 首先/ 判断/ 自己/ 是否是/ 目的/ 节点/ ./ 若/ 是/ ,/ 接收数据/ ;/ 若/ 不是/ ,/ 利用/ 式/ (/ 5/ )/ 将/ 数据/ 传至/ 目的/ 节点/ 所在/ 分支/ 的/ 下/ 一/ 跳/ 节点/ ,/ 直至/ 发送到/ 目的/ 节点/ ./ (/ 3/ )/ 路由/ 发现/ 过程/ 由于/ 簇内/ 使用/ Cluster/ -/ Tree/ 算法/ 进行/ 传输/ ,/ 所以/ 不能/ 发起/ 路由/ 发现/ 过程/ 及/ 转发/ RREQ/ 分组/ ,/ 本/ 算法/ 让/ 簇/ 与/ 簇/ 之间/ 使用/ AODVjr/ 算法/ ,/ 即/ 簇首/ 及/ 网/ 关节点/ 采用/ RN/ +/ 节点/ ,/ 普通/ 簇/ 成员/ 只能/ 采用/ 简单/ 的/ Cluster/ -/ Tree/ 算法/ ,/ 因此/ 可以/ 减少/ RREQ/ 分组/ 的/ 泛洪/ ,/ 从而/ 降低/ 能量/ 的/ 消耗/ ./ 当/ 目的/ 节点/ 与源/ 节点/ 不/ 属于/ 同一个/ 簇时/ ,/ 源/ 节点/ 将/ 信息/ 传至本/ 簇簇/ 首/ ,/ 该/ 簇/ 首发/ 起/ 路由/ 发现/ 过程/ ,/ 以/ 寻找/ 到达/ 目的/ 节点/ 的/ 最佳/ 路径/ ./ 当/ 节点/ 接收/ 到/ RREQ/ 分组/ 时/ ,/ 具体/ 的/ 处理/ 流程/ 如图/ 5/ 所示/ ./ RREQ/ 分组/ 只能/ 在/ 节点/ 标志/ 位为/ 0/ 或者/ 1/ 的/ 节点/ ,/ 即/ 簇首/ 和/ 网/ 关节点/ 之间/ 进行/ 转发/ ./ 节点/ 在/ 收到/ RREQ/ 分组/ 之后/ ,/ 首先/ 判断/ 自身/ 节点/ 类型/ ,/ 当/ 簇首/ 收到/ RREQ/ 分组/ 之后/ ,/ 轮询/ 已/ 存储/ 的/ 簇内/ 节点/ 地址/ 信息/ ,/ 判断/ 目的/ 节点/ 是否是/ 本簇/ 节点/ ./ 若/ 是/ ,/ 则/ 向源/ 节点/ 所在/ 簇簇/ 首/ 发送/ RREP/ (/ RouteReply/ )/ 分组/ ;/ 若/ 不是/ ,/ 则/ 进行/ RREQ/ 分组/ 的/ 转发/ ./ (/ 4/ )/ 路由/ 回复/ 过程/ 节点/ 接收/ 到/ RREP/ 分组/ 后处理/ 流程/ 如图/ 6/ 所示/ ./ 当/ 节点/ 发起/ 路由/ 发现/ 过程/ 时/ ,/ 广播/ RREQ/ 分组/ ,/ 收到/ RREQ/ 分组/ 的/ 节点/ 在/ 转发/ RREQ/ 分组/ 的/ 同时/ 会/ 保存/ 到达/ 上/ 一/ 跳/ 的/ 反向/ 路由/ ,/ 最终/ 当/ 目的/ 节点/ 所在/ 簇簇/ 首/ 接收/ 到/ RREQ/ 分组/ 时/ ,/ 反向/ 路径/ 已经/ 建立/ ,/ 该/ 簇首/ 只/ 需/ 按照/ 其/ 路径/ 向源/ 节点/ 所在/ 簇簇/ 首/ 发送/ RREP/ 分组/ 即可/ ./ 当源/ 节点/ 所在/ 簇簇/ 首/ 接收/ 到/ 来自/ 于/ 多条/ 路径/ 的/ RREP/ 分组/ 时/ ,/ 簇首/ 选择/ 路径/ 成本/ 最小/ 的/ 路径/ 作为/ 到达/ 目的/ 节点/ 的/ 路由/ ./ 当/ 路径/ 成本/ 有/ 多个/ 最小/ 的/ 路径/ 时/ ,/ 簇首/ 选择/ 最早/ 接收/ 到/ 的/ RREP/ 分组/ 所/ 对应/ 的/ 路径/ ./ 源/ 节点/ 所在/ 簇簇/ 首在/ 收到/ RREP/ 分组/ 之后/ ,/ 将/ 暂存/ 的/ 数据/ 信息/ 按照/ 找到/ 的/ 最佳/ 路径/ 发/ 往/ 目的/ 节点/ 所在/ 簇簇/ 首/ ,/ 目的/ 节点/ 所在/ 簇簇/ 首/ 暂存/ 该/ 数据/ 信息/ ./ 同时/ ,/ 为了/ 节省/ 能量/ ,/ 避免/ 重复/ 的/ 工作/ ,/ 源/ 节点/ Page7/ 所在/ 簇簇/ 首会/ 在/ 收到/ RREP/ 分组/ 之后/ 将/ 目的/ 节点/ 和/ 目的/ 节点/ 所在/ 簇簇/ 首/ 的/ 地址/ 信息/ 均/ 保存/ 至/ 路由表/ ,/ 当本/ 簇内/ 的/ 成员/ 想往/ 目的/ 节点/ 发送信息/ 时/ ,/ 可以/ 直接/ 将/ 数据/ 发给/ 簇首/ ,/ 簇首/ 按照/ 之前/ 的/ 路径/ 进行/ 传输/ ,/ 不用/ 再/ 触发/ 路由/ 发起/ 过程/ ,/ 以/ 达到/ 簇内/ 路由/ 信息/ 共享/ ./ 4/ 仿真/ 分析/ 为了/ 有效/ 地/ 评价/ CLZBR/ 算法/ 的/ 性能/ ,/ 本文/ 采用/ NS2/ ,/ 利用/ IEEE802/ ./ 15.4/ 的/ PHY/ 层/ 和/ MAC/ 层来/ 实现/ 网络层/ 的/ 仿真/ ,/ 本文/ 将/ CLZBR/ 算法/ 与/ ZigBee/ 经典/ 路由/ 算法/ ZBR/ 分别/ 在/ 节点/ 数为/ 10/ ~/ 100/ 个/ 的/ 不同/ 场景/ 下/ 进行/ 了/ 仿真/ 比较/ :/ 包括/ 分组/ 投递/ 率/ 、/ 路由/ 开销/ 百分比/ 及/ 网络/ 剩余/ 能量/ 等/ 指标/ ./ 所有/ 仿真/ 数据/ 都/ 是/ 对/ 网络/ 独立/ 运行/ 50/ 次/ 之后/ 取/ 的/ 平均/ 数值/ ,/ 仿真/ 时/ 随机/ 分布/ 节点/ ,/ 随机/ 并发/ 8/ 个/ 数据流/ ,/ 平均/ 速率/ 为/ 0.5/ packets/ // sec/ ,/ 其它/ 仿真/ 参数设置/ 如表/ 1/ 所示/ ./ 网络/ 范围/ // m/ ×/ m/ 通信/ 半径/ // m/ 节点/ 初始/ 能量/ // J/ 仿真/ 时间/ // s/ 数据流/ 类型/ 大小/ // 字节/ 4.1/ 分组/ 投递/ 率/ 分组/ 投递/ 率/ 是/ 衡量/ 网络拓扑/ 成功/ 接收数据/ 分组/ 的/ 性能指标/ ,/ 可以/ 反应/ 网络/ 传输/ 的/ 可靠性/ ,/ 即/ 分组/ 投递/ 率越/ 大/ ,/ 网络/ 的/ 可靠性/ 越高/ ./ 分组/ 投递/ 率/ 是/ 目的/ 节点/ 接收/ 到/ 的/ 数据/ 分组/ 个数/ 与源/ 节点/ 发送/ 的/ 数据/ 分组/ 个数/ 的/ 比值/ ./ 具体/ 计算公式/ 如式/ (/ 6/ )/ 所示/ :/ 图/ 7/ 为/ CLZBR/ 与/ ZBR/ 算法/ 分组/ 投递/ 率/ 的/ 比较/ ,/ 可见/ 随着/ 节点/ 数目/ 的/ 增多/ ,/ 导致/ 网络/ 中/ 数据/ 分组/ 和/ 控制/ 分组/ 增加/ ,/ 分组/ 投递/ 率/ 都/ 有所/ 降低/ ,/ 但是/ 由于/ CLZBR/ 算法/ 减少/ 了/ 网内/ 的/ RREQ/ 分组/ ,/ 降低/ 了/ 数据传输/ 的/ 碰撞/ ,/ 所以/ 性能/ 相对/ 好于/ ZBR/ 算法/ ./ 4.2/ 路由/ 开销/ 百分比/ 路由/ 开销/ 指/ 的/ 是/ 网络/ 中路/ 由/ 控制/ 分组/ 的/ 数目/ ,/ 而/ 路由/ 开销/ 百分比/ 更能/ 反应/ 网络/ 中/ 的/ 开销/ 情况/ ,/ 百分比/ 高/ 的/ 网络/ 能量消耗/ 也/ 大/ ./ 主要/ 计算方法/ 是/ 路由/ 发现/ 及/ 路由/ 回复/ 等/ 控制/ 分组/ 的/ 数目/ 除上/ 成功/ 接收/ 的/ 数据/ 分组/ 个数/ ./ 具体/ 计算公式/ 如式/ (/ 7/ )/ 所示/ :/ 图/ 8/ 为/ CLZBR/ 与/ ZBR/ 算法/ 在/ 不同/ 节点/ 数目/ 下/ 路由/ 开销/ 百分比/ 的/ 比较/ 情况/ ,/ 从图/ 中/ 可以/ 看出/ ,/ 随着/ 节点/ 数目/ 的/ 增多/ ,/ 导致/ 路由/ 控制/ 分组/ 增加/ ,/ 路由/ 开销/ 百分比/ 呈上升/ 趋势/ ,/ 由于/ CLZBR/ 算法/ 限制/ 了/ 发送/ RREQ/ 分组/ 的/ 节点/ 种类/ ,/ 同时/ 采用/ 父/ 节点/ 地址/ 计算/ 法/ 减少/ 了/ 不必要/ 的/ 路由/ 发现/ 过程/ ,/ 从而/ 大大减少/ 了/ 网络/ 中/ RREQ/ 分组/ ,/ 因此/ 路由/ 开销/ 百分比/ 明显/ 小于/ ZBR/ 算法/ ./ 4.3/ 剩余/ 能量/ 百分比/ 剩余/ 能量/ 百分比/ 可以/ 有效/ 地/ 衡量/ 算法/ 的/ 能量/ 使用/ 情况/ ,/ 剩余/ 能量/ 百分比/ 越高/ ,/ 节能/ 效果/ 越好/ ./ 剩余/ 能量/ 百分比/ 指/ 的/ 是/ 网络/ 中/ 剩余/ 的/ 能量/ 与/ 网络/ 初始/ 能量/ 的/ 比值/ ,/ 具体/ 计算公式/ 如式/ (/ 8/ )/ 所示/ :/ 当/ 仿真/ 结束/ 时/ ,/ 图/ 9/ 为/ CLZBR/ 与/ ZBR/ 算法/ 剩余/ 能量/ 百分比/ 的/ 比较/ ,/ 可以/ 看出/ ,/ 随着/ 节点/ 数目/ 增多/ ,/ 参与/ 转发/ 的/ 节点/ 随之/ 增加/ ,/ 路由/ 控制/ 和/ 数据/ 转发/ 分组/ 大量/ 增多/ ,/ 节点/ 消耗/ 的/ 能量/ 相对/ 增加/ ,/ 剩余/ 能量/ 百分比/ 有所/ 降低/ ,/ 且/ 随着/ 节点/ 数/ 增多/ 趋势/ 趋于/ 平/ Page8/ 缓/ ./ 由于/ CLZBR/ 算法/ 减少/ 了/ 网络/ 中/ 的/ RREQ/ 分组/ ,/ 同时/ 采用/ 父/ 节点/ 地址/ 计算/ 法/ 从而/ 节省/ 了/ 很多/ 能量/ 的/ 开销/ ,/ 降低/ 了/ 整体/ 能量消耗/ ,/ 所以/ 网络/ 剩余/ 能量/ 始终/ 高于/ ZBR/ 算法/ ./ 5/ 结束语/ 目前/ ,/ ZigBee/ 被/ 认为/ 是/ 最/ 适合/ 传感器/ 网络/ 接入/ 端的/ 短距离/ 无线通信/ 技术/ ,/ 对/ ZigBee/ 的/ 研究/ 将/ 为物/ 联网/ 的/ 应用/ 与/ 发展/ 奠定/ 一定/ 基础/ ,/ 而/ 网络层/ 的/ 能量/ 优化/ 一直/ 是/ ZigBee/ 技术/ 研究/ 的/ 重点/ ./ 本文/ 在/ 对/ ZigBee/ 路由/ 能量/ 优化/ 进行/ 深入研究/ 的/ 基础/ 上/ ,/ 提出/ 了/ CLZBR/ 路由/ 算法/ ,/ 它/ 可以/ 很/ 好/ 地/ 结合/ AODVjr/ 和/ Cluster/ -/ Tree/ 算法/ 的/ 优点/ ./ 该/ 算法/ 基于/ 分簇/ 机制/ ,/ 规定/ 簇/ 与/ 簇/ 之间/ 采用/ AODVjr/ 进行/ 通信/ 、/ 簇内/ 采用/ Cluster/ -/ Tree/ 算法/ ,/ 限制/ 了/ RN/ +/ 节点/ 的/ 数量/ ;/ 并/ 通过/ 计算/ 父/ 节点/ 地址/ 的/ 方式/ ,/ 减少/ 了/ 路由/ 发现/ 过程/ ./ 这些/ 措施/ 大大减少/ 了/ 网内/ 冗余/ 的/ RREQ/ 分组/ ,/ 降低/ 了/ 能量/ 的/ 消耗/ ;/ 同时/ CLZBR/ 算法/ 提出/ 的/ 用/ 备用/ 节点/ 来/ 代替/ 能量/ 过低/ 的/ 簇首/ 的/ 方法/ ,/ 虽然/ 增加/ 了/ 一些/ 存储空间/ 和/ 控制/ 开销/ ,/ 但/ 平衡/ 了/ 节点/ 之间/ 的/ 能量/ 分配/ ,/ 从而/ 保证/ 了/ 网络/ 的/ 稳定性/ ./ CLZBR/ 算法/ 可以/ 有效/ 地/ 平衡/ AODVjr/ 和/ Cluster/ -/ Tree/ 算法/ ,/ 分簇/ 的/ 结构/ 更/ 适合/ 于/ 中/ 大型/ 网络/ ,/ 其/ 提高/ 了/ ZigBee/ 网络/ 的/ 整体/ 性能/ ./ 

