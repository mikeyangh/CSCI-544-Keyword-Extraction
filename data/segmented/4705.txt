Page1/ 通用/ 图形/ 处理器/ 线程/ 调度/ 优化/ 方法/ 研究/ 综述/ 1/ )/ (/ 武汉大学/ 计算机/ 学院/ 武汉/ 430072/ )/ 2/ )/ (/ 武汉大学/ 软件工程/ 国家/ 重点/ 实验室/ 武汉/ 430072/ )/ 3/ )/ (/ 东华/ 理工大学/ 软件/ 学院/ 南昌/ 330013/ )/ 4/ )/ (/ 湖北/ 工业/ 大学/ 计算机/ 学院/ 武汉/ 430068/ )/ 摘要/ 随着/ 通用/ 图形/ 处理器/ (/ GPGPU/ )/ 并行计算/ 能力/ 的/ 日益/ 增强/ ,/ 其/ 应用/ 范围/ 越来越/ 广/ ./ 然而/ 由于/ 不规则/ 计算/ 任务/ 使得/ 通用/ 图形/ 处理器/ 资源/ 难以/ 得到/ 充分利用/ ,/ 其/ 性能/ 并未/ 达到/ 最大化/ ./ 在/ 论述/ GPGPU/ 微/ 体系结构/ 的/ 基础/ 上/ ,/ 该文/ 重点/ 讨论/ 了/ 多种/ 针对/ GPGPU/ 性能/ 提升/ 的/ 线程/ 调度/ 优化/ 方法/ ,/ 主要/ 从/ 针对/ 优化/ 分支/ 转移/ 提升/ 线程/ 级/ 并行度/ 、/ 针对/ 访存/ 效率/ 的/ 提升/ 和/ 针对/ 标量/ 指令/ 执行/ 以/ 提升/ 资源/ 利用率/ 三/ 方面/ 的/ 线程/ 调度/ 优化/ 方法/ 进行/ 了/ 分析/ 和/ 比较/ ./ 另外/ ,/ 由于/ 功耗/ 问题/ 已/ 成为/ 制约/ GPGPU/ 发展/ 的/ 主要/ 因素/ 之一/ ,/ 该文/ 还/ 分析/ 了/ 影响/ GPGPU/ 功耗/ 效率/ 的/ 主要/ 原因/ 及/ 目前/ 提高/ GPGPU/ 功耗/ 效率/ 的/ 主要/ 低功耗/ 技术/ ,/ 并/ 对/ 目前/ 针对/ GPGPU/ 功耗/ 优化/ 的/ 典型/ 线程/ 调度/ 优化/ 方法/ 进行/ 了/ 分析/ 比较/ ./ 最后/ ,/ 该文/ 指出/ 了/ 未来/ 线程/ 调度/ 优化/ 方法/ 需要/ 进一步/ 探讨/ 的/ 一些/ 问题/ ./ 关键词/ 通用/ 图形/ 处理器/ ;/ 线程/ 调度/ 优化/ ;/ 性能/ ;/ 功耗/ 1/ 引言/ 图形/ 处理器/ (/ GraphicsProcessingUnit/ ,/ GPU/ )/ 拥有/ 强大/ 的/ 并行计算/ 能力/ ,/ 因此/ ,/ 它/ 已经/ 成为/ 目前/ 面向/ 高/ 吞吐量/ 、/ 满足/ 高性能/ 计算/ 需求/ 的/ 主流/ 计算/ 加速/ 部件/ ./ GPU/ 最初/ 用于/ 3D/ 图形/ 加速/ 处理/ 和/ 计算/ ,/ 随着/ 处理/ 图形/ 分辨率/ 和/ 图形处理/ 速度/ 要求/ 的/ 日益/ 提高/ ,/ 它/ 的/ 并行计算/ 能力/ 得到/ 了/ 快速/ 发展/ ./ 2006/ 年/ ,/ NVIDIA/ 公司/ 推出/ 了/ GeForce8800/ ,/ 它/ 首次/ 使用/ 统一/ 的/ 渲染/ 部件/ 代替/ 了/ 各种/ 可编程/ 部件/ ,/ 解决/ 了/ 可编程/ GPU/ 片上/ 负载/ 均衡/ 的/ 问题/ ,/ 成为/ 当今/ 通用/ 图形/ 处理器/ (/ GeneralPurposeGraphicsProcessingUnit/ ,/ GPGPU/ )/ 的/ 雏形/ [/ 1/ ]/ ./ 而后/ ,/ 流式/ 图形/ 处理器/ 的/ 出现/ 为/ 图形/ 处理器/ 在/ 通用/ 计算/ 领域/ 的/ 应用/ 奠定/ 了/ 基础/ ./ 随着/ GPGPU/ 并行计算/ 体系结构/ 的/ 快速/ 发展/ ,/ 它/ 在/ 面向/ 高/ 吞吐量/ 、/ 高性能/ 计算/ 通用/ 计算/ 领域/ 的/ 应用/ 越来越/ 广泛/ ./ GPGPU/ 展现出/ 强大/ 的/ 并行计算/ 能力/ 、/ 高/ 吞吐量/ 和/ 优秀/ 的/ 能效/ 比/ ,/ 使/ 它/ 成为/ 了/ 目前/ 构建/ 高性能/ 平台/ 的/ 首选/ 计算/ 加速/ 部件/ ./ 在/ 2010/ 和/ 2013/ 年/ 的/ 全球/ 超级计算机/ TOP500/ 排行榜/ 中/ ,/ 由/ 国防科/ 大/ 主导/ 研制/ 的/ 天河/ 一号/ 和/ 天河/ 二号/ 均/ 排/ 在/ 榜首/ [/ 2/ -/ 3/ ]/ ./ 它们/ 强大/ 的/ 浮点运算/ 能力/ 来自/ 于/ 其/ 内部/ 采用/ 了/ 大量/ 的/ 图形/ 加速/ 处理部件/ ./ 另外/ ,/ 根据/ 2014/ 年/ 上半年/ 全球/ 超级计算机/ TOP500/ 排行榜/ ,/ 前/ 500/ 的/ 超级计算机/ 中有/ 62/ 台/ 超级计算机/ 采用/ 了/ 图形/ 加速/ 处理部件/ ,/ 比/ 2013/ 年/ 增长/ 了/ 9/ 台/ ①/ ./ 近年来/ ,/ VLSI/ 技术/ 及/ 制造/ 工艺/ 的/ 快速/ 发展/ 使得/ GPGPU/ 的/ 并行计算/ 能力/ 有/ 了/ 很大/ 提升/ ./ 然而/ 在/ 体系结构/ 和/ 编程/ 模型/ 相同/ 的/ 情况/ 下/ ,/ GPGPU/ 性能/ 的/ 高低/ 主要/ 受访/ 存/ 效率/ 和/ 计算/ 任务/ 并行度/ 的/ 影响/ ./ 对于/ 访存/ 和/ 计算/ 模式/ 不规则/ 的/ 应用程序/ ,/ 它/ 的/ 性能/ 往往/ 无法/ 达到/ 最大化/ ./ 这种/ 不规则/ 性/ 体现/ 在/ :/ (/ 1/ )/ 应用程序/ 中/ 存在/ 分支/ 转移/ ,/ 使得/ GPGPU/ 在/ 同一/ 时刻/ 的/ 处理/ 任务/ 分散/ ,/ 降低/ 了/ 任务/ 处理/ 的/ 并行度/ ;/ (/ 2/ )/ 访存/ 的/ 数据分布/ 离散/ ,/ 使得/ 并行处理/ 任务/ 的/ 数据/ 访问/ 延时/ 增加/ ./ GPGPU/ 采用/ SIMD/ (/ SingleInstructionMultipleData/ )/ 执行/ 模式/ ,/ 即/ 一条/ 指令/ 同时/ 处理/ 多个/ 不同/ 的/ 数据/ [/ 4/ -/ 6/ ]/ ./ 为了/ 获得/ 计算/ 的/ 高度/ 并行/ ,/ 主流/ 的/ 图形/ 处理器/ 均/ 派/ 生出/ 多个/ 不同/ 的/ 线程/ 对/ 同一/ 指令/ 的/ 不同/ 数据/ 进行/ 并行处理/ ,/ 这种/ 模式/ 又/ 称为/ SIMT/ (/ SingleInstruc/ -/ tionMultipleThread/ )/ 执行/ 模式/ [/ 7/ -/ 8/ ]/ ./ SIMT/ 执行/ 模式/ 获得/ 的/ 并行处理/ 属于/ 线程/ 级/ 并行/ (/ ThreadLevelParallelism/ ,/ TLP/ )/ ,/ 它/ 与/ 指令/ 级/ 并行/ (/ InstructionLevelParallelism/ ,/ ILP/ )/ 和/ 数据/ 级/ 并行/ (/ DataLevelParallelism/ ,/ DLP/ )/ 并/ 为/ 影响/ 处理器/ 并行计算/ 能力/ 的/ 3/ 个/ 不同/ 的/ 并行/ 级别/ [/ 9/ -/ 10/ ]/ ./ GPGPU/ 通过/ 支持/ 大量/ 线程/ 的/ 同时/ 执行/ 获得/ 很/ 高/ 的/ TLP/ ,/ 并/ 通过/ 一定/ 的/ 线程/ 调度/ 策略/ 保证/ 执行/ 任务/ 的/ 高效/ 并行处理/ ./ 然而/ 由于/ 不规则/ 计算/ 和/ 不规则/ 访存/ 模式/ 的/ 存在/ ,/ GPGPU/ 中/ 不同/ 的/ 线程/ 调度/ 策略/ 对/ 各种/ 并行计算/ 任务/ 的/ 执行/ 效率/ 会/ 产生/ 不同/ 的/ 影响/ ./ 早/ 在/ 2007/ 年/ ,/ 国外/ 就/ 有/ 学者/ 展开/ 了/ 针对/ GPGPU/ 性能/ 提升/ 的/ 线程/ 调度/ 优化/ 研究/ [/ 11/ ]/ ./ 另外/ ,/ 随着/ 功耗/ 问题/ 日渐/ 成为/ 制约/ GPGPU/ 发展/ 的/ 重要/ 瓶颈/ ,/ 也/ 有/ 部分/ 线程/ 调度/ 策略/ 对/ GPGPU/ 的/ 功耗/ 优化/ 进行/ 了/ 考虑/ ./ 本文/ 重点/ 关注/ 了/ 近几年来/ 国内外/ 关于/ 提升/ GPGPU/ 性能/ 和/ 功耗/ 效率/ 的/ 线程/ 调度/ 优化/ 方法/ 的/ 关键技术/ 和/ 相关/ 问题/ ./ 本文/ 第/ 2/ 节/ 阐述/ 主流/ GPGPU/ 的/ 体系结构/ 和/ 相关/ 概念/ ,/ 并/ 阐述/ GPGPU/ 中线/ 程/ 层次结构/ 和/ 线程/ 调度/ 层次结构/ ;/ 第/ 3/ 节/ 重点/ 分析/ 比较/ 多种/ 针对/ GPGPU/ 性能/ 提升/ 和/ 功耗/ 优化/ 的/ 线程/ 调度/ 优化/ 方法/ ;/ 最后/ 提出/ GPGPU/ 线程/ 调度/ 优化/ 面临/ 的/ 挑战/ 和/ 进一步/ 研究/ 的/ 方向/ ./ 2GPGPU/ 体系结构/ 及/ 相关/ 概念/ NVIDIA/ 、/ AMD/ 和/ Intel/ 是/ 目前/ 主流/ 通用/ 图形/ 处理器/ 的/ 三大/ 生产/ 厂商/ ,/ 它们/ 生产/ 的/ GPGPU/ 在/ 宏观/ 结构/ 上/ 相似/ ,/ 但/ 在/ 微观/ 结构/ 上/ 存在/ 较大/ 差异/ ./ 为了/ 论述/ 的/ 统一/ ,/ 本文/ 以/ NVIDIA/ 公司/ 生产/ 的/ 通用/ 图形/ ①/ 世界/ 超级/ 电脑/ 2014/ 年/ 上半年/ 排名/ :/ 中国/ 天河/ 二号/ 三度/ 夺/ Page3/ 处理器/ 体系结构/ 为/ 基准/ 进行/ 分析/ 论述/ ,/ 后续/ 的/ 相关/ 概念/ 均/ 以/ NVIDIA/ 公司/ 提出/ 的/ GPGPU/ 相关/ 术语/ 为/ 参考/ ./ 2.1/ GPGPU/ 线程/ 层次结构/ 及/ 线程/ 调度/ 层次结构/ 为了/ 便于/ 线程/ 管理/ ,/ GPGPU/ 对/ 线程/ 的/ 组织/ 通常/ 分为/ 三级/ :/ 即/ 线程/ 组级/ (/ ThreadGroup/ ,/ TG/ )/ 、/ 线程/ 块级/ (/ ThreadBlock/ ,/ TB/ )/ 、/ 线程/ 网格/ 级/ (/ Grid/ )/ [/ 12/ ]/ ./ 线程/ 组/ (/ 被/ 称为/ warp/ )/ 是/ 线程/ 并发/ 执行/ 的/ 基本/ 单位/ ,/ 通常/ 由/ 32/ 个/ 线程/ 构成/ ./ 它/ 一般/ 按锁步/ 的/ 方式/ 执行/ 指令/ [/ 6/ ,/ 13/ -/ 14/ ]/ ,/ 即/ 线程/ 组中/ 所有/ 线程/ 执行/ 完/ 当前/ 指令/ 后方/ 可/ 执行/ 下/ 一条/ 指令/ ./ 线程/ 块/ 由/ 多个/ 线程/ 组/ 构成/ ,/ 是/ 发射/ 到/ GPGPU/ 核上/ 执行/ 的/ 基本/ 单位/ ./ 多个/ 线程/ 块/ 又/ 构成/ 了/ 线程/ 网格/ ./ GPGPU/ 采用/ 三级/ 线程/ 层次结构/ ,/ 主要/ 是/ 为了/ 方便/ 在线/ 程和/ 线程/ 处理/ 的/ 数据/ 元素/ 之间/ 建立/ 映射/ 关系/ ./ 图/ 1/ 展示/ 了/ GPGPU/ 的/ 线程/ 层次结构/ [/ 12/ ]/ ./ 线程/ 调度/ 是/ 将/ 计算/ 任务分配/ 到/ 不同/ 的/ 处理单元/ 并/ 按照/ 一定/ 顺序/ 执行/ 的/ 过程/ ./ GPGPU/ 中/ 的/ 线程/ 调度/ 可以/ 分为/ 3/ 个/ 层次/ :/ kernel/ 级/ 、/ 线程/ 块级/ 和/ 线程/ 组级/ ./ 本文/ 对/ GPGPU/ 线程/ 调度/ 层次结构/ 的/ 描述/ 主要/ 基于/ 文献/ [/ 12/ ,/ 15/ -/ 16/ ]/ ./ kernel/ 是/ 在/ GPGPU/ 核上/ 能/ 被/ 多个/ 线程/ 并发/ 执行/ 的/ 函数/ ,/ 它/ 需要/ 在/ CPU/ 端/ 启动/ 并/ 发射/ 到/ GPGPU/ 的/ 流式/ 多处理器/ (/ StreamMulti/ -/ processor/ ,/ SM/ )/ 上/ 执行/ ./ NVIDIA/ 从/ Fermi/ 架构/ 的/ GPGPU/ 开始/ 支持/ 同时/ 发射/ 多个/ kernel/ ,/ 之前/ 的/ GPGPU/ 只/ 允许/ kernel/ 的/ 顺序/ 发射/ ./ 当/ kernel/ 被/ 发射/ 之后/ ,/ 线程/ 调度/ 器/ 将/ 派生/ 出来/ 的/ 线程/ 块/ 按/ 一定/ 的/ 顺序/ 发送到/ 可用/ 的/ SM/ 上/ 执行/ ,/ 通常/ 情况/ 下/ 按/ 轮转/ 的/ 方式/ 发送/ ./ 可以/ 被/ 发送到/ 每个/ SM/ 的/ 线程/ 块数/ 依赖于/ 每个/ SM/ 上/ 的/ 资源/ 使用/ 情况/ ,/ 且/ 不能/ 超过/ 物理/ 规定/ 的/ 上限/ ./ 被/ 发送到/ 某个/ SM/ 上/ 的/ 线程/ 组将/ 按照/ 一定/ 的/ 调度/ 顺序/ 在/ 执行/ 通道/ 上/ 执行/ ./ 当/ 线程/ 组图/ 2GPGPU/ 宏观/ 体系结构/ 在/ 执行/ 过程/ 中因/ 访存/ 失效/ 等/ 原因/ 被/ 阻塞/ 时/ ,/ 该/ 线程/ 组将/ 被/ 插入/ 到/ 线程/ 组/ 阻塞/ 队列/ ,/ 然后/ 调度/ 其他/ 准备就绪/ 的/ 线程/ 组/ 继续执行/ ./ 目前/ 对/ 线程/ 调度/ 优化/ 的/ 研究/ 主要/ 集中/ 在线/ 程块级/ 和/ 线程/ 组级/ ,/ 对/ kernel/ 级/ 的/ 调度/ 优化/ 研究/ 相对/ 较少/ ./ 2.2/ GPGPU/ 宏观/ 体系结构/ GPGPU/ 的/ 宏观/ 体系结构/ 如图/ 2/ 所示/ ①/ ,/ 它/ 由/ 多个/ SM/ 组成/ ,/ 每个/ SM/ 又/ 被/ 称为/ 核/ ./ 为了/ 有效/ 地/ 控制/ 逻辑/ 控制/ 单元/ 的/ 数量/ 和/ 芯片/ 面积/ ,/ 通常/ 将/ 多个/ SM/ 组织/ 为/ 一个/ 图形处理/ 核组/ (/ GraphicsProcessingCluster/ ,/ GPC/ )/ ./ 每个/ SM/ 包含/ 了/ 众多/ 的/ 处理单元/ (/ Processing/ -/ Unit/ ,/ PU/ )/ ,/ 每个/ 处理单元/ 负责/ 最终/ 的/ 指令/ 执行/ ./ ①/ GPGPU/ -/ Sim3/ ./ xManual/ ./ http/ :/ // // gpgpu/ -/ sim/ ./ org/ // manual/ // index/ ./ php5/ // GPGPU/ -/ Sim/ _/ 3/ ./ x/ _/ ManualPage4/ 为了/ 提高/ 数据/ 访问/ 效率/ ,/ GPGPU/ 采用/ 多级/ 存储/ 层次结构/ ./ 常见/ 的/ GPGPU/ 存储/ 层次结构/ 分为/ 寄存器/ 级/ 、/ 高速缓存/ (/ cache/ )/ 级/ 和/ 片/ 外存储器/ 级/ 三级/ ./ 其中/ 高速缓存/ 级/ 又/ 可以/ 分为/ 多级/ ,/ 目前/ 常见/ 的/ GPGPU/ 采用/ 两级/ 高速缓存/ 结构/ ./ 每个/ SM/ 中/ 包含/ 数量/ 众多/ 的/ 寄存器/ ,/ 称之为/ 寄存器/ 文件/ ,/ 负责/ 直接/ 提供/ PU/ 处理/ 任务/ 所/ 需/ 的/ 数据/ ./ 通常/ 情况/ 下/ ,/ 寄存器/ 和/ 一级/ cache/ 放置/ 在/ SM/ 内部/ ,/ 二级/ cache/ 和/ 片外/ 主存储器/ 则/ 通过/ 片上/ 互联网络/ 和/ 所有/ 的/ SM/ 相连/ ./ 为了/ 提高/ 二级/ cache/ 的/ 访问/ 效率/ ,/ 二级/ cache/ 通常/ 被/ 划分/ 为/ 多个/ 分区/ ,/ 每个/ 分区/ 通过/ 片外/ 存储/ 通道/ 与/ 片外/ 主存储器/ 相连/ ./ 另外/ ,/ GPGPU/ 通过/ 片上/ 互联网络/ 将/ 多个/ GPC/ 和/ 片外/ 存储/ 控制器/ 连接起来/ ,/ 主要/ 负责/ GPC/ 与/ 片外/ 存储/ 之间/ 的/ 数据通信/ ./ 2.3/ SM/ 微/ 体系结构/ 由于/ 本文/ 重点/ 讨论/ GPGPU/ 线程/ 调度/ 方法/ ,/ 在/ 此图/ 3SM/ 微/ 体系结构/ 由/ 指令/ 发射器/ 发射/ 的/ 指令/ 到达/ SIMD/ 流水线/ 后/ 端/ 执行/ 通道/ 后/ 需要/ 通过/ 寄存器/ 访存/ 部件/ 获取/ 执行/ 所/ 需要/ 的/ 操作数/ ./ 为了/ 满足/ 大量/ 并发/ 线程/ 的/ 同时/ 执行/ ,/ GPGPU/ 设置/ 了/ 数量/ 众多/ 的/ 寄存器/ ,/ 并/ 将/ 这些/ 寄存器/ 组织/ 为/ 多个/ 单/ 端口/ 的/ 寄存器/ 块/ (/ Bank/ )/ ,/ 以便/ 于/ 多个/ 并发/ 线程/ 同时/ 访问/ ./ 分支/ 处理单元/ 用于/ 正确/ 处理程序/ 中/ 的/ 分支/ 转移/ 指令/ ,/ 并/ 为/ 每个/ 线程/ 组/ 分配/ 一个/ 栈/ 结构/ ,/ 称之为/ 重/ 汇聚/ 栈/ ./ 该栈/ 结构/ 由/ 执行/ 指令/ PC/ 、/ 分支/ 重/ 汇聚/ PC/ (/ RPC/ )/ 和/ 执行/ 指令/ 对应/ 的/ 活跃/ 线程/ 掩码/ 位/ 向量/ 三/ 部分/ 组成/ ./ 访存/ 部件/ 主要/ 实现/ 数据/ 存仅/ 重点/ 介绍/ 了/ SM/ 的/ 微/ 体系结构/ ./ 本文/ 对/ SM/ 微/ 体系结构/ 的/ 描述/ 基于/ 文献/ [/ 1/ ,/ 17/ -/ 18/ ]/ ./ SM/ 微/ 体系结构/ 如图/ 3/ 所示/ ./ 整个/ SIMD/ 流水线/ [/ 19/ ]/ 可以/ 分为/ 前端/ 和/ 后/ 端/ ,/ 前端/ 主要/ 包括/ 取指/ 部件/ 、/ 译码/ 部件/ 、/ 记分板/ 及/ 指令/ 发射器/ 等/ 部件/ ,/ 其余/ 部件/ 均/ 属于/ 后/ 端/ [/ 20/ ]/ ./ 取指/ 部件/ 根据/ 每个/ 线程/ 组/ 对应/ 的/ PC/ 值/ 负责/ 从片/ 外/ 存储/ 将/ 指令/ 取/ 到/ 指令/ cache/ 中/ ./ 指令/ cache/ 中/ 的/ 指令/ 则/ 依次/ 送到/ 指令/ 译码/ 部件/ ,/ 经过/ 译码/ 后/ 的/ 指令/ 被/ 送到/ 指令/ buffer/ 中/ ./ 指令/ buffer/ 为/ 每个/ 线程/ 组/ 缓冲/ 译码/ 后/ 的/ 指令/ ,/ 便于/ 指令/ 的/ 快速/ 执行/ ,/ 并/ 为/ 每个/ 线程/ 组/ 分配/ 一定/ 数量/ 的/ 专用/ 指令/ 槽/ ./ 图/ 3/ 中/ 的/ 记分板/ 部件/ 用来/ 记录/ 每个/ 线程/ 组/ 当前/ 执行/ 指令/ 的/ 目的/ 寄存器/ 的/ 使用/ 情况/ ,/ 主要/ 用来/ 判断/ 执行/ 指令/ 之间/ 的/ 数据/ 依赖/ 关系/ ./ 指令/ 发射器/ 按/ 一定/ 的/ 策略/ 选取/ 准备就绪/ 的/ 指令/ 发射/ ./ 取/ ,/ 其中/ 冲突检测/ 部件/ 确保/ 对/ 同一/ 共享/ cache/ 块/ 的/ 多个/ 访问/ 能/ 正确/ 执行/ ;/ 访存/ 合并/ 部件/ 实现/ 对/ 访问/ 同一/ 数据/ cache/ 行/ 的/ 多个/ 访存/ 请求/ 进行/ 合并/ ,/ 以/ 减少/ 访存/ 次数/ ;/ MSHR/ (/ MissingStatusHoldRegister/ ,/ 失效/ 状态/ 保留/ 寄存器/ )/ 用于/ 记录/ 访问/ cache/ 失效/ 的/ 请求/ ,/ 并/ 对/ 同一/ cache/ 行/ 的/ 多个/ 访问/ 失效/ 请求/ 进行/ 合并/ ./ 3/ 线程/ 调度/ 优化/ 方法/ GPGPU/ 在/ 越来越/ 多/ 的/ 通用/ 计算/ 领域/ 得到/ 了/ 广泛/ Page5/ 应用/ ,/ 然而/ 对于/ 访存/ 和/ 计算/ 模式/ 不规则/ 的/ 应用程序/ ,/ GPGPU/ 的/ 性能/ 往往/ 未能/ 达到/ 最大化/ ./ 影响/ GPGPU/ 性能/ 达到/ 最大化/ 的/ 原因/ 是/ 多方面/ 的/ ,/ 程序执行/ 过程/ 中/ 出现/ 的/ 线程/ 级/ 并行度/ 降低/ 和/ 访存/ 效率/ 下降/ 是/ 其中/ 的/ 两个/ 主要/ 原因/ ./ 其中/ 线程/ 级/ 并行度/ 的/ 降低/ 会/ 使/ GPGPU/ 计算资源/ 不能/ 得到/ 充分利用/ ,/ 它/ 主要/ 由/ 程序/ 中/ 存在/ 的/ 分支/ 转移/ 指令/ 导致/ ./ 访存/ 效率/ 下降/ 则/ 会/ 使/ 计算/ 过程/ 延时/ 增加/ ,/ 访存/ 离散/ 和/ 资源/ 竞争/ 导致/ 的/ 数据/ 局部性/ 破坏/ 是/ 其/ 产生/ 的/ 主要/ 原因/ ./ 另外/ ,/ 致使/ GPGPU/ 性能/ 不能/ 达到/ 最大化/ 的/ 原因/ 还/ 包括/ 由于/ 线程/ 执行/ 速度/ 不/ 一致/ 等/ 因素/ 导致/ 核上/ 资源/ 利用率/ 下降/ 、/ 标量/ 指令/ 冗余/ 执行/ 而/ 导致/ 的/ 资源/ 利用/ 浪费/ 等/ ./ 目前/ 的/ 线程/ 调度/ 优化/ 方法/ 通常/ 都/ 以/ 提高/ 程序执行/ 过程/ 中/ 的/ 线程/ 级/ 并行度/ 、/ 访存/ 效率/ 和/ 资源/ 利用率/ 等/ 为/ 主要/ 目标/ ./ 另外/ ,/ 由于/ 功耗/ 问题/ 的/ 日渐/ 突出/ ,/ 越来越/ 多/ 的/ 线程/ 调度/ 方法/ 在/ 提升/ GPGPU/ 性能/ 的/ 同时/ ,/ 也/ 考虑/ 了/ 对/ GPGPU/ 产生/ 的/ 功耗/ 进行/ 优化/ ./ 3.1/ 针对/ 分支/ 转移/ 的/ 线程/ 调度/ 优化/ 分支/ 转移/ 指令/ 在/ 通用/ 应用程序/ 中/ 非常/ 普遍/ ,/ 它/ 主要/ 分为/ 结构化/ 分支/ 转移/ 指令/ 和/ 非/ 结构化/ 分支/ 转移/ 指令/ 两类/ ./ 其中/ 结构化/ 分支/ 转移/ 指令/ 一般/ 包括/ if/ 语句/ 和/ 循环/ 语句/ 中/ 的/ 分支/ 转移/ 指令/ 等/ ,/ 而/ 非/ 结构化/ 分支/ 转移/ 指令/ 一般/ 包括/ break/ 指令/ 、/ continue/ 指令/ 、/ goto/ 指令/ 以及/ 异常/ 跳转/ 指令/ 等/ [/ 21/ ]/ ./ 如果/ 线程/ 组在/ 执行/ 过程/ 中/ 遇到/ 分支/ 转移/ 指令/ ,/ 那么/ 该/ 线程/ 组中/ 的/ 每个/ 线程/ 将/ 根据/ 分支/ 指令/ 的/ 计算结果/ 而/ 选择/ 后续/ 执行/ 的/ 分支/ 路径/ ,/ 这/ 容易/ 出现/ 部分/ 线程/ 执行/ 不同/ 分支/ 路径/ 的/ 情形/ ./ 而且/ 由于/ SIMT/ 执行/ 模式/ 只/ 允许/ 某/ 线程/ 组在/ 某/ 一/ 时刻/ 执行/ 一条/ 指令/ ,/ 这会/ 致使/ 不同/ 的/ 分支/ 路径/ 只能/ 串行/ 执行/ ,/ 从而/ 必然/ 降低/ 任务/ 执行/ 的/ TLP/ ./ 另外/ ,/ 如果/ 同一/ 线程/ 组中/ 执行/ 不同/ 分支/ 路径/ 的/ 线程/ 在/ 执行/ 完/ 相应/ 的/ 分支/ 路径/ 后/ 没有/ 进行/ 重/ 汇聚/ 处理/ ,/ 那么/ 这/ 也/ 会/ 影响/ 到/ 后续/ 规则/ 指令/ 执行/ 的/ TLP/ ./ 基于/ 栈/ 的/ 重/ 汇聚/ 机制/ (/ PostDominator/ ,/ PDOM/ )/ 可以/ 有效/ 地/ 解决/ 由于/ 分支/ 转移/ 带来/ 的/ 性能/ 降低/ [/ 22/ -/ 24/ ]/ ,/ 它/ 在/ 分支/ 重/ 汇聚/ 处/ 将/ 属于/ 同一/ 线程/ 组/ 的/ 线程/ 重组/ 为/ 分支/ 前/ 的/ 线程/ 组/ ,/ 以/ 提高/ 后续/ 指令/ 执行/ 的/ TLP/ ./ 图/ 4/ 展示/ 了/ 一个/ 传统/ 的/ 、/ 基于/ 栈/ 的/ 重/ 汇聚/ 机制/ 的/ 分支/ 转移/ 控制流/ 的/ 处理/ 流程/ 示例/ ./ 图中/ 左边/ 部分/ 是/ 一个/ 基本/ 的/ 分支/ 转移/ 控制流/ 结构/ ,/ 其中/ 每个/ 字母/ 代表/ 一个/ 基本/ 语句/ 块/ ;/ 每位/ 数字/ 表示/ 一位/ 掩码/ 位/ ,/ 代表/ 对应/ SIMD/ 通道/ 的/ 状态/ ,/ “/ 1/ ”/ 表示/ 该/ 通道/ 上/ 有/ 活跃/ 线程/ 执行/ ,/ “/ 0/ ”/ 表示/ 该/ 通道/ 空闲/ ./ 图中/ 右边/ 部分/ 表示/ 左边/ 控制流/ 图中/ 的/ 线程/ 在/ 通道/ 中/ 的/ 执行/ 情况/ ,/ 其中/ 黑色/ 箭头/ 表示/ 通道/ 上/ 有/ 活跃/ 线程/ 执行/ ,/ 灰色/ 箭头/ 表示/ 该/ 通道/ 空闲/ ./ 该图/ 表明/ 出现/ 分支/ 转移/ 时/ ,/ SIMD/ 通道/ 未能/ 满/ 负载/ 运行/ ./ 由图/ 4/ 分析/ 可以/ 看出/ 分支/ 转移/ 引起/ 性能/ 下降/ 的/ 根本原因/ 在于/ 分支/ 转移/ 降低/ 了/ TLP/ ,/ 因此/ 在/ 出现/ 分支/ 转移/ 时/ ,/ 应/ 尽量/ 提高/ 并发/ 执行/ 的/ 线程/ 数/ ./ 目前/ 针对/ 分支/ 转移/ 的/ 线程/ 调度/ 优化/ 方法/ 主要/ 有/ 两类/ :/ (/ 1/ )/ 线程/ 重组/ 机制/ ;/ (/ 2/ )/ 多路/ 并行执行/ 机制/ ./ 3.1/ ./ 1/ 线程/ 重组/ 调度/ 优化/ 线程/ 重组/ 机制/ 的/ 基本/ 思想/ 是/ 当/ 遇到/ 分支/ 转移/ 时/ ,/ 将/ 执行/ 相同/ 指令/ 、/ 相同/ 分支/ 路径/ 上/ 的/ 、/ 对应/ 不同/ SIMD/ 执行/ 通道/ 的/ 多个/ 线程/ 重新组合/ 在/ 一起/ ,/ 动态/ 地/ 形成/ 并行执行/ 宽度/ 更大/ 的/ 线程/ 组/ ./ 当该/ 分支/ 路径/ 执行/ 结束/ 后/ ,/ 该/ 分支/ 路径/ 上/ 的/ 线程/ 将/ 在/ 重/ 汇聚/ 点/ 等待/ 其他/ 分支/ 路径/ 的/ 线程/ 执行/ 结束/ ,/ 并/ 与/ 之/ 重新组合/ 成/ 原先/ 的/ 线程/ 组/ 继续/ 向前/ 执行/ ./ 该/ 机制/ 以/ 提高/ 某一/ 分支/ 路径/ 上/ 并行执行/ 的/ 线程/ 数为/ 目标/ ,/ 进而/ 提高/ SIMD/ 执行/ 通道/ 的/ 利用率/ ./ 线程/ 重组/ 又/ 可以/ 分为/ 线程/ 组间/ 的/ 线程/ 重组/ 、/ 线程/ 组内/ 的/ 线程/ 重组/ 及/ 二者/ 结合/ 的/ 线程/ 重组/ 这三类/ 策略/ ./ Cervini/ [/ 25/ ]/ 提出/ 了/ 针对/ 包含/ SIMD/ 功能/ 单元/ 的/ 通用/ 微处理器/ 的/ 动态/ 线程/ 重组/ 机制/ ./ Fung/ 等/ 人/ [/ 11/ ]/ 则/ 提出/ 了/ 针对/ GPGPU/ 的/ 线程/ 重组/ 策略/ DWF/ (/ DynamicWarpFormation/ )/ ./ 在/ 2011/ 年/ ,/ Fung/ 等/ 人/ [/ 17/ ]/ 又/ 提出/ 了/ 另/ 一种/ 线程/ 重组/ 调度/ 策略/ TBC/ (/ ThreadBlockCompaction/ )/ ./ 相对/ 于/ DWF/ ,/ TBC/ 将/ 线程/ 重组/ 的/ 范围/ 限制/ 在/ 一个/ 线程/ 块/ 中/ ,/ 而且/ 不/ 需要/ 在/ 每个/ 时钟/ 周期/ 进行/ 线程/ 重组/ 检查/ ,/ 仅/ 在/ 出现/ 分支/ 转移/ 指令/ 时/ 进行/ 线程/ 重组/ ,/ 大大/ 地/ 减少/ 了/ 线程/ 重组/ 的/ 次数/ 以及/ 由此/ 产生/ 的/ 开销/ ./ 另外/ ,/ TBC/ 对/ 基于/ 栈/ 的/ 重/ 汇聚/ 机制/ 进行/ 了/ 扩展/ ,/ 这/ 在/ 一定/ 程度/ 上/ 减少/ 了/ SIMD/ 资源/ 利用率/ 的/ 下降/ ./ 实验/ 表明/ ,/ 相对/ 于/ DWF/ ,/ TBC/ 的/ 平均/ 性能/ 提升/ 了/ 17/ %/ ./ Narasiman/ 等/ 人/ [/ 26/ ]/ 针对/ 分支/ 路径/ 活跃/ 线程/ 数量/ 不够/ 的/ 问题/ 提出/ 了/ LWM/ (/ LargeWarpMicroarchitecture/ )/ 策略/ ./ 该/ 策略/ 中/ 定义/ 的/ largewarp/ 实质/ 上/ 是/ 由/ 多个/ 线程/ 组/ 构成/ 的/ 线程/ Page6/ 块/ ,/ 因此/ 与/ DWF/ 和/ TBC/ 一样/ ,/ LWM/ 也/ 属于/ 线程/ 组间/ 的/ 线程/ 重组/ ./ 但是/ 由于/ LWF/ 是/ 以/ largewarp/ 为/ 调度/ 单位/ ,/ 因此/ 相对/ 于/ TBC/ ,/ 它/ 能/ 在/ 一定/ 程度/ 上/ 减少/ 因为/ 对/ 不同/ 线程/ 组/ 进行/ 同步/ 而/ 产生/ 的/ 开销/ ./ Malits/ 等/ 人/ [/ 27/ ]/ 则/ 提出/ 了/ 全局/ 范围/ 内/ 的/ 线程/ 重组/ 策略/ ODGS/ (/ OracleDynamicGlobalScheduling/ )/ ,/ 将/ 线程/ 组间/ 的/ 线程/ 重组/ 从/ SM/ 内/ 扩展/ 至/ SM/ 之间/ ./ 虽然/ 线程/ 组间/ 的/ 线程/ 重组/ 可以/ 提高/ SIMD/ 通道/ 的/ 利用率/ ,/ 但是/ 此类/ 方法/ 需要/ 将/ 属于/ 不同/ 线程/ 组/ 的/ 线程/ 重组/ 在/ 一起/ ,/ 这会/ 在/ 一定/ 程度/ 上/ 破坏/ 了/ 线程/ 组内/ 的/ 数据/ 局部性/ ./ 另外/ TBC/ 等/ 策略/ 还/ 需要/ 对/ 多个/ 线程/ 组/ 同步/ ,/ 因此/ 会/ 产生/ 一定/ 的/ 开销/ ./ 在/ 此基础/ 上/ ,/ Vaidya/ 等/ 人/ [/ 28/ ]/ 提出/ 了/ 线程/ 组内/ 的/ 线程/ 重组/ 机制/ BCC/ (/ BasicCycleCompaction/ )/ 和/ SCC/ (/ SwizzledCycleCompaction/ )/ ,/ 其/ 利用/ 实际/ SIMD/ 物理/ 通道/ 数比/ 标准/ 线程/ 组/ 宽度/ 小/ 的/ 特点/ ,/ 仅/ 将/ 线程/ 组内/ 的/ 线程/ 重组/ 为/ 与/ 实际/ SIMD/ 物理/ 通道/ 宽度/ 相等/ 的/ 线程/ 组/ ./ Jin/ 等/ 人/ [/ 29/ ]/ 提出/ 的/ 线程/ 重组/ 机制/ HWS/ (/ HybridWarpSize/ )/ 也/ 是/ 基于/ 这样/ 的/ 思想/ ./ 线程/ 组内/ 的/ 线程/ 重组/ 避免/ 了/ 对/ 线程/ 组内/ 的/ 数据/ 局部性/ 产生/ 破坏/ ,/ 也/ 无需/ 对/ 多个/ 线程/ 组/ 进行/ 同步/ ./ 然而/ 此类/ 方法/ 也/ 存在/ 着/ 重组/ 率不高/ 、/ 受到/ 实际/ SIMD/ 物理/ 通道/ 宽度/ 的/ 影响/ 等/ 不足/ ,/ 尤其/ 是/ 当/ SIMD/ 硬件/ 宽度/ 与/ 线程/ 组/ 大小/ 相等/ 时/ ,/ 该类/ 策略/ 对系统/ 性能/ 提升/ 的/ 意义/ 不大/ ./ 部分/ 研究者/ 将/ 上述/ 两类/ 线程/ 重组/ 调度/ 机制/ 进行/ 了/ 有效/ 地/ 结合/ ./ Brunie/ 等/ 人/ [/ 30/ ]/ 同时/ 提出/ 了/ 线程/ 组内/ 的/ 线程/ 重组/ 策略/ SBI/ (/ SimultaneousBranchInterweaving/ )/ 和/ 线程/ 组间/ 的/ 线程/ 重组/ 策略/ SWI/ (/ SimultaneousWarpInterweaving/ )/ ,/ 并/ 将/ 二者/ 进行/ 了/ 有效/ 地/ 结合/ ./ 但是/ 与/ 前面/ 所/ 提到/ 的/ 线程/ 组间/ 表/ 1/ 主要/ 的/ 线程/ 重组/ 调度/ 优化/ 策略/ 特点/ 线程/ 重组/ 策略/ DWF/ [/ 11/ ]/ TBC/ [/ 17/ ]/ LWM/ [/ 26/ ]/ SCC/ +/ BCC/ [/ 28/ ]/ HWS/ [/ 29/ ]/ SBI/ +/ SWI/ [/ 30/ ]/ CAPRI/ [/ 31/ ]/ 3.1/ ./ 2/ 多路/ 并行执行/ 的/ 线程/ 调度/ 优化/ 在/ 提高/ SIMD/ 资源/ 利用率/ 的/ 同时/ ,/ 线程/ 重组/ 调度/ 在/ 一定/ 程度/ 上/ 会/ 破坏/ 线程/ 组内/ 的/ 数据/ 局部性/ ,/ 而/ 多路/ 并行执行/ 线程/ 调度/ 则/ 是/ 在/ 不/ 破坏/ 数据/ 局部性/ 的/ 情况/ 下/ 尽量/ 提升/ SIMD/ 资源/ 的/ 利用率/ ,/ 并/ 通过/ 提供/ 更/ 多/ 的/ 线程/ 调度/ 实体/ 来/ 提升/ 隐藏/ 长/ 延时/ 访存/ 的/ 能/ 和/ 线程/ 组内/ 的/ 线程/ 重组/ 不同/ 的/ 是/ ,/ SBI/ 和/ SWI/ 可以/ 将/ 执行/ 不同/ 指令/ 的/ 线程/ 重组/ 在/ 一起/ ./ Jin/ 等/ 人/ 在/ 文献/ [/ 29/ ]/ 中/ 对/ DWF/ 算法/ 进行/ 了/ 改进/ ,/ 允许/ 线程/ 改变/ 执行/ 通道/ ,/ 提升/ 了/ 线程/ 重组/ 率/ ,/ 并/ 将/ HWS/ 和/ 改进/ 的/ DWF/ 进行/ 了/ 有效/ 结合/ ,/ 平均/ 性能比/ DWF/ 提升/ 了/ 27/ %/ ./ 在/ 进行/ 线程/ 重组/ 时/ ,/ 对应/ 相同/ SIMD/ 通道/ 的/ 线程/ 组合/ 在/ 一起/ 可能/ 会/ 产生/ 冲突/ ,/ 这种/ 情况/ 下/ 进行/ 线程/ 重组/ 并/ 不会/ 提升/ 性能/ ,/ 相反/ 会/ 产生/ 额外/ 开销/ ./ 对此/ ,/ Rhu/ 等/ 人/ [/ 31/ ]/ 提出/ 了/ CAPRI/ (/ Compaction/ -/ AdequacyPridictor/ )/ 策略/ ,/ 在/ 不同/ 的/ 线程/ 组间/ 进行/ 选择性/ 的/ 重组/ 压缩/ 调度/ ,/ 使得/ 线程/ 重组/ 调度/ 时机/ 的/ 选取/ 更加/ 合理/ 有效/ ,/ 减少/ 了/ 无效/ 的/ 线程/ 重组/ 调度/ ./ CAPRI/ 策略/ 在/ 较大/ 程度/ 上/ 解决/ 了/ 线程/ 重组/ 的/ 冲突/ 问题/ ,/ 但是/ 该/ 问题/ 并/ 没有/ 完全/ 得到/ 避免/ ./ 之后/ Rhu/ 等/ 人/ [/ 32/ ]/ 又/ 提出/ 了/ SLP/ (/ SIMDLanePermutation/ )/ 策略/ ,/ 通过/ 置换/ 线程/ 对应/ 的/ SIMD/ 通道/ 进一步/ 解决/ 了/ 线程/ 重组/ 出现/ 的/ 冲突/ 问题/ ,/ 提高/ 了/ 线程/ 重组/ 策略/ 的/ 有效性/ ./ 然而/ 该/ 策略/ 进行/ 的/ SIMD/ 通道/ 置换/ 操作/ 会/ 产生/ 较大/ 开销/ ,/ 而且/ 频繁/ 置换/ 通道/ 产生/ 的/ 开销/ 对系统/ 性能/ 提升/ 的/ 影响/ 是/ 不可/ 忽略/ 的/ ./ 线程/ 重组/ 调度/ 优化/ 策略/ 能/ 在/ 出现/ 分支/ 转移/ 的/ 情况/ 下/ 提高/ 不同/ 分支/ 路径/ 上/ 的/ SIMD/ 资源/ 利用率/ ,/ 减少/ 闲置/ 的/ SIMD/ 通道/ 数/ ,/ 它/ 在/ 一定/ 程度/ 上/ 提高/ 了/ 系统/ 性能/ ,/ 但是/ 在/ 提高/ 线程/ 重组/ 的/ 有效性/ 、/ 平衡/ 线程/ 重组/ 的/ 收益/ 和/ 减少/ 开销/ 等/ 方面/ 依然/ 没有/ 得到/ 很/ 好/ 的/ 解决/ ./ 表/ 1/ 归纳/ 了/ 几种/ 主要/ 的/ 线程/ 重组/ 调度/ 优化/ 策略/ 的/ 特点/ ./ 从表中/ 可以/ 看出/ 组间/ 的/ 线程/ 重组/ 能/ 获得/ 较/ 高/ 的/ SIMD/ 资源/ 利用率/ ,/ 而/ 组内/ 的/ 线程/ 重组/ 保持/ 了/ 线程/ 组/ 的/ 数据/ 局部性/ ,/ 其访存/ 失效率/ 更/ 低/ ./ 受限/ SIMD/ 硬件/ 宽度/ 不/ 受限/ 不/ 受限/ 不/ 受限/ 不/ 受限/ 不/ 受限/ 力/ ./ 它/ 是/ 另一类/ 常见/ 的/ 、/ 提升/ 分支/ 转移/ 处理/ 效率/ 的/ 线程/ 调度/ 优化/ 机制/ ,/ 主要/ 通过/ 改变传统/ 分支/ 路径/ 顺序/ 执行/ 的/ 方式/ ,/ 尽量/ 让/ 多个/ 分支/ 路径/ 上/ 的/ 线程/ 交替/ 调度/ 执行/ 或/ 同时/ 调度/ 执行/ ./ 当某/ 一个/ 分支/ 路径/ 上/ 的/ 线程/ 组/ 由于/ 长/ 延时/ 访存/ 等待/ 而/ 造成/ 流水线/ 空闲/ 时/ ,/ 交替/ 调度/ 执行/ 其他/ 分支/ Page7/ 路径/ 的/ 线程/ 组/ 能够/ 填补/ 该/ 空闲/ ,/ 这样/ 既/ 能/ 提高/ 并发/ 执行/ 的/ 线程/ 数量/ ,/ 也/ 能/ 在/ 一定/ 程度/ 上/ 提升/ 访存级/ 并行度/ (/ MemoryLevelParallelism/ ,/ MLP/ )/ ./ Meng/ 等/ 人/ [/ 33/ ]/ 、/ Yu/ 等/ 人/ [/ 34/ ]/ 和/ ElTantawy/ 等/ 人/ [/ 35/ ]/ 分别/ 提出/ 了/ 多路/ 交替/ 执行/ 的/ 线程/ 调度/ 优化/ 策略/ DWS/ (/ DynamicWarpSubdivision/ )/ 、/ PDOM/ -/ ASI/ (/ PDOMwithAllSub/ -/ warpsIssuable/ )/ 、/ MPIPDOM/ (/ Multi/ -/ PathIPDOM/ )/ ./ 其中/ DWS/ 和/ MPIPDOM/ 采用/ warp/ 分片/ 表/ 实现/ 了/ 多个/ 子/ warp/ (/ warp/ 中/ 执行/ 相同/ 分支/ 路径/ 的/ 部分/ 线程/ 集合/ )/ 的/ 交替/ 执行/ ,/ PDOM/ -/ ASI/ 则/ 通过/ 对/ 分支/ 控制结构/ 进行/ 二叉树/ 分析/ 实现/ 了/ 多个/ 子/ warp/ 的/ 交替/ 执行/ ./ 而/ Rhu/ 等/ 人/ [/ 36/ ]/ 提出/ 的/ 双/ 路径/ 交替/ 执行/ 策略/ DPE/ (/ Dual/ -/ pathExecution/ )/ 通过/ 对重/ 汇聚/ 栈/ 结构/ 的/ 修改/ ,/ 仅/ 实现/ 了/ 双/ 分支/ 路径/ 上/ 的/ 线程/ 交替/ 执行/ ./ 另外/ ,/ 多/ 路线/ 程/ 交替/ 执行/ 需要/ 考虑/ 当子/ warp/ 执行/ 结束/ 后/ ,/ 及时/ 对/ 它们/ 进行/ 重/ 汇聚/ ,/ 以/ 保证/ 后续/ 指令/ 保持/ 高/ 的/ SIMD/ 通道/ 利用率/ ./ PDOM/ -/ ASI/ 、/ DPE/ 实现/ 了/ 及时/ 重/ 汇聚/ 策略/ ,/ MPIPDOM/ 实现/ 了/ 尽早/ 重/ 汇聚/ 策略/ ,/ DWS/ 策略/ 则/ 采用/ 延迟/ 重/ 汇聚/ 机制/ ,/ 但/ 一定/ 程度/ 上/ 降低/ 了/ 后续/ 规则/ 指令/ 执行/ 时/ 的/ SIMD/ 通道/ 利用率/ ./ 另外/ ,/ 这/ 4/ 种多/ 路线/ 程/ 交替/ 调度/ 策略/ 在/ 一定/ 程度/ 上/ 均/ 能/ 有效/ 地/ 解决/ SIMD/ 执行/ 深度/ 不够/ (/ 可/ 供/ 调度/ 的/ 线程/ 实体/ 不足/ )/ 的/ 问题/ ./ Lashgar/ 等/ 人/ [/ 37/ ]/ 提出/ 的/ HARP/ (/ HarnessinginActivethReadsinmany/ -/ coreProcessors/ )/ 策略/ 则/ 有效/ 地/ 结合/ 了/ 线程/ 重组/ 机制/ 和/ 多路/ 交替/ 调度/ 机制/ ,/ 它/ 能/ 同时/ 解决/ 分支/ 转移/ 引起/ 的/ SIMD/ 执行/ 宽度/ 和/ 执行/ 深度/ 下降/ 的/ 问题/ ./ 交替/ 执行/ 的/ 线程/ 调度/ 方式/ 在/ 宏观/ 上/ 实现/ 了/ 多路/ 分支/ 路径/ 的/ 并行执行/ ,/ 增加/ 了/ 可供/ 调度/ 的/ 线程/ 实体/ ,/ 相对/ 于/ 传统/ 的/ 顺序/ 执行/ ,/ 它/ 能/ 进一步/ 提升/ TLP/ ./ 但/ 在/ 一般/ 情况/ 下/ ,/ 这种/ 优势/ 只有/ 在/ 活跃/ 线程/ 组/ 不够/ 的/ 情况/ 下方/ 能/ 体现/ 出来/ ,/ 因为/ 当/ 存在/ 其他/ 活跃/ 线程/ 分组/ 时/ ,/ 快速/ 切换/ 到/ 其他/ 活跃/ 线程/ 组/ 可以/ 隐藏/ 线程/ 调度/ 实体/ 的/ 长/ 延时/ 访存/ 操作/ ./ 另外/ ,/ 交替/ 执行/ 的/ 线程/ 调度/ 也/ 可以/ 看做/ 是/ 将/ 后面/ 调度/ 线程/ 组/ 的/ 调度/ 次序/ 提前/ ,/ 提前/ 执行/ 的/ 线程/ 组/ 产生/ 的/ 访存/ 结果/ 可以/ 被/ 先前/ 调度/ 的/ 线程/ 组/ 使用/ ,/ 从而/ 提高/ 并发/ 线程/ 的/ 访存/ 并行度/ ,/ 有利于/ 提升/ 系统/ 的/ 访存/ 效率/ ./ 表/ 2/ 主要/ 的/ 多路/ 并发/ 执行/ 线程/ 调度/ 策略/ 特点/ 多路/ 并发/ 执行/ 策略/ SBI/ +/ SWI/ [/ 30/ ]/ DWS/ [/ 33/ ]/ MPIPDOM/ [/ 35/ ]/ HARP/ [/ 37/ ]/ MSMD/ [/ 39/ ]/ 多路/ 交替/ 调度/ 执行/ 能/ 使/ 不同/ 分支/ 路径/ 上/ 的/ 线程/ 组/ 相互/ 隐藏/ 各自/ 的/ 长/ 延时/ 访存/ 操作/ ,/ 然而/ 微观/ 上/ 某/ 一/ 时刻/ 仍然/ 只有/ 一条/ 分支/ 路径/ 上/ 的/ 线程/ 执行/ ,/ SIMD/ 资源/ 的/ 利用率/ 仍然/ 没有/ 达到/ 最大化/ ./ 多/ 路线/ 程/ 同时/ 调度/ 执行/ 是/ 另一类/ 提高/ SIMD/ 通道/ 利用率/ 的/ 方法/ ,/ 它/ 可以/ 使/ 不同/ 分支/ 路径/ 上/ 的/ 线程/ 同时/ 执行/ 各自/ 的/ 指令/ ./ 相对/ 于/ 多路/ 交替/ 执行/ 的/ 线程/ 调度/ 方法/ ,/ 多/ 路线/ 程/ 同时/ 调度/ 执行/ 能/ 进一步提高/ SIMD/ 通道/ 的/ 利用率/ ./ 文献/ [/ 38/ ]/ 提出/ 了/ 双/ 指令/ 多线程/ (/ DualInstructionsMultipleThreads/ ,/ DIMT/ )/ 的/ 思想/ ,/ 通过/ 对/ 指令/ 发射/ 等/ 部件/ 的/ 改动/ 来/ 实现/ 双/ 分支/ 路径/ 的/ 同时/ 执行/ ./ 3.1/ ./ 1/ 小节/ 提到/ 的/ SBI/ 和/ SWI/ 策略/ 通过/ 对/ 指令/ 发射/ 部件/ 的/ 修改/ 也/ 实现/ 了/ 双/ 分支/ 路径/ 上/ 同时/ 发射/ 指令/ ./ Wang/ 等/ 人/ [/ 39/ ]/ 提出/ 并/ 实现/ 了/ MSMD/ (/ MultipleSIMD/ ,/ MultipleData/ )/ 执行/ 模型/ ,/ 设置/ 了/ 多个/ 可/ 灵活/ 划分/ 的/ 、/ 独立/ 的/ SIMD/ 数据通道/ ,/ 使得/ 不同/ 分支/ 路径/ 上/ 的/ 线程/ 组/ 可以/ 同时/ 执行/ ,/ 大大/ 地/ 提高/ 了/ 程序执行/ 的/ TLP/ ./ MSMD/ 模型/ 实质/ 上/ 是/ 对/ MIMD/ 执行/ 模型/ 的/ 发展/ ,/ 它/ 包含/ 了/ SIMD/ 模型/ 的/ 思想/ ,/ 但/ 在/ 硬件/ 实现/ 上/ 更加/ 复杂/ ./ Dasika/ 等/ 人/ [/ 40/ ]/ 针对/ 科学计算/ 提出/ 的/ PEPSC/ (/ Power/ -/ EfficientProcessorforScientificComputing/ )/ 体系结构/ 和/ 文献/ [/ 41/ -/ 43/ ]/ 提出/ 的/ TSIMT/ (/ TemporalSIMT/ )/ 执行/ 模式/ 均/ 支持/ 多个/ 分支/ 同时/ 执行/ ,/ 与/ MSMD/ 模型/ 的/ 思想/ 相似/ ./ 但是/ ,/ 相对/ 于/ SIMD/ 模型/ ,/ 它们/ 和/ MSMD/ 模型/ 一样/ ,/ 在/ 物理/ 实现/ 上要/ 复杂/ 得/ 多/ ,/ 需从/ 面积/ 和/ 功耗/ 等/ 方面/ 进行/ 更/ 多/ 的/ 考虑/ ./ 多路/ 并行执行/ 的/ 线程/ 调度/ 优化/ 能/ 在/ 出现/ 分支/ 转移/ 时/ 进一步/ 提升/ 程序执行/ 的/ TLP/ ,/ 还/ 能/ 在/ 一定/ 程度/ 上/ 提升/ 系统/ 的/ MLP/ ./ 但是/ 多路/ 并行执行/ 的/ 线程/ 调度/ 优化/ 策略/ 仍然/ 存在/ 着/ 提升/ TLP/ 有限/ 、/ 硬件/ 物理/ 开销/ 较大/ 、/ 重/ 汇聚/ 时机/ 选取/ 欠/ 合理/ 等/ 不足/ ,/ 可以/ 在/ 这些/ 方面/ 做/ 进一步/ 的/ 研究/ ./ 另外/ ,/ 可以/ 综合/ 考虑/ 线程/ 重组/ 和/ 多路/ 交替/ 执行/ 的/ 两类/ 线程/ 调度/ 机制/ 的/ 优势/ ,/ 对/ 它们/ 进行/ 有效/ 地/ 结合/ ,/ 使得/ 各/ 分支/ 路径/ 的/ SIMD/ 执行/ 宽度/ 和/ 执行/ 深度/ 得到/ 更/ 有效/ 的/ 提升/ ./ 表/ 2/ 归纳/ 了/ 几种/ 常见/ 的/ 多路/ 并行执行/ 线程/ 调度/ 策略/ 的/ 特点/ ./ 从表/ 2/ 中/ 可以/ 看出/ ,/ 由于/ DWS/ 采用/ 了/ 延迟/ 重/ 汇聚/ 策略/ ,/ 它/ 对/ TLP/ 提升/ 的/ 幅度/ 最小/ ./ 重/ 汇聚/ 时机/ 选择性/ 重/ 汇聚/ 延迟/ 重/ 汇聚/ 尽早/ 重/ 汇聚/ 及时/ 重/ 汇聚/ 及时/ 重/ 汇聚/ 及时/ 重/ 汇聚/ Page83/ ./ 1.3/ 分支/ 转移/ 中/ 的/ 重/ 汇聚/ 机制/ 将/ 执行/ 不同/ 分支/ 路径/ 的/ 线程/ 在/ 重/ 汇聚/ 点上/ 进行/ 重/ 汇聚/ 同步/ ,/ 将/ 它们/ 重新组合/ 成/ 分支/ 转移/ 前/ 的/ 线程/ 组/ ,/ 以/ 保证/ 后续/ 规则/ 指令/ 执行/ 过程/ 能/ 保持/ 较/ 高/ 的/ TLP/ ./ 传统/ 的/ PDOM/ 重/ 汇聚/ 机制/ 选择/ 立即/ 后/ 支配/ 块/ 作为/ 重/ 汇聚/ 点/ [/ 11/ ,/ 44/ ]/ ./ 然而/ 重/ 汇聚/ 点/ 的/ 选取/ 对/ 存在/ 分支/ 转移/ 程序/ 的/ 执行/ 效率/ 有/ 较大/ 的/ 影响/ ./ 如果/ 重/ 汇聚/ 点/ 选择/ 较晚/ ,/ 会/ 在/ 一定/ 程度/ 上/ 降低/ 后续/ 规则/ 指令/ 执行/ 的/ TLP/ ,/ 但是/ 对于/ 某些/ 应用程序/ 尤其/ 是/ 访存/ 密集型/ 程序/ ,/ 选择/ 较晚/ 的/ 重/ 汇聚/ 点/ 对/ 提升/ 整个/ 程序执行/ 的/ MLP/ 是/ 有益/ 的/ ./ 这/ 主要/ 得益于/ 此类/ 程序/ 的/ 线程/ 组/ 内部/ 存在/ 数据/ 局部性/ 的/ 可能性/ 较大/ ,/ 提前/ 执行/ 的/ 部分/ 线程/ 获取/ 的/ 数据/ 则/ 可能/ 被/ 落后/ 的/ 线程/ 所/ 使用/ ,/ 从而/ 提高/ 落后/ 线程/ 后续/ 的/ cache/ 访问/ 命中率/ ./ 因此/ ,/ 针对/ 不同/ 的/ 计算/ 任务/ ,/ 应/ 选择/ 不同/ 的/ 重/ 汇聚/ 策略/ ./ 但是/ ,/ 采用/ 何种/ 重/ 汇聚/ 策略/ 需要/ 综合/ 考虑/ 重/ 汇聚/ 策略/ 带来/ 的/ 性能/ 收益/ 和/ 由此/ 产生/ 的/ 开销/ 等/ 因素/ ,/ 只有/ 当/ 收益/ 大于/ 开销/ ,/ 重/ 汇聚/ 策略/ 才/ 是/ 有益/ 的/ ./ Meng/ 等/ 人/ [/ 33/ ]/ 提出/ 的/ DWS/ 策略/ 对/ 所有/ 的/ 情形/ 均/ 采用/ 延迟/ 重/ 汇聚/ 策略/ ./ 文献/ [/ 17/ ,/ 30/ ,/ 35/ ]/ 则/ 认为/ 尽早/ 重/ 汇聚/ 以/ 同步/ 不同/ 执行/ 分支/ 路径/ 的/ 线程/ 对/ 提升/ TLP/ 有利/ ,/ 并/ 对/ 尽早/ 重/ 汇聚/ 机制/ 及/ 实现/ 进行/ 了/ 分析/ 讨论/ ./ Diamos/ 等/ 人/ [/ 45/ ]/ 专门/ 针对/ 非/ 结构化/ 的/ 分支/ 转移/ ,/ 提出/ 了/ TF/ (/ ThreadFrontier/ )/ 重/ 汇聚/ 机制/ ,/ 结合/ 编译/ 技术/ 实现/ 了/ 尽早/ 重/ 汇聚/ 机制/ ,/ 减少/ 了/ 某些/ 基本/ 指令/ 块/ 的/ 重复/ 执行/ ./ 上述/ 重/ 汇聚/ 策略/ 的/ 最大/ 不同/ 在于/ 重/ 汇聚/ 时机/ 的/ 选择/ ,/ 但是/ 它们/ 各自/ 对/ 所有/ 的/ 应用程序/ 均/ 采用/ 统一/ 的/ 重/ 汇聚/ 机制/ ,/ 并未/ 综合/ 考虑/ 性能/ 收益/ 和/ 开销/ 等/ 多种/ 因素/ ./ 适宜/ 的/ 方法/ 是/ 根据/ 不同/ 应用程序/ 的/ 特点/ 选择/ 合适/ 的/ 重/ 汇聚/ 时机/ 和/ 相应/ 的/ 重/ 汇聚/ 机制/ ./ 3.2/ 针对/ 访存/ 效率/ 提升/ 的/ 线程/ 调度/ 优化/ 访存/ 效率/ 是/ 影响/ GPGPU/ 整体/ 性能/ 高低/ 的/ 主要/ 因素/ 之一/ ./ 除了/ 本身/ 物理/ 条件/ 的/ 限制/ ,/ 访存/ 离散/ 和/ 片/ 上/ 存储资源/ 访问/ 竞争/ 引起/ 的/ 数据/ 局部性/ 破坏/ 等/ 因素/ 也/ 会/ 影响/ GPGPU/ 的/ 访存/ 效率/ ./ 针对/ 访存/ 效率/ 提升/ 的/ 线程/ 调度/ 优化/ 方法/ 通常/ 以/ 减少/ 片上/ 存储资源/ 访问/ 竞争/ 和/ 减少/ 访存/ 离散/ 为/ 主要/ 目的/ ,/ 并/ 通过/ 数据/ 预取/ 等/ 手段/ 来/ 提升/ 数据/ 访问/ 的/ 命中率/ ./ 3.2/ ./ 1/ 针对/ 片上/ 存储资源/ 访问/ 竞争/ 的/ 线程/ 调度/ 优化/ 存储系统/ 的/ 带宽/ 是/ 影响/ GPGPU/ 性能/ 的/ 重要/ 瓶颈/ ,/ 在/ 片/ 上/ 集成/ 层次化/ 的/ 存储资源/ 有利于/ 提升/ GPGPU/ 的/ 访存/ 吞吐量/ ./ GPGPU/ 片上/ 存储资源/ 通常/ 包括/ 寄存器/ 文件/ 、/ 一级/ 数据/ cache/ 、/ 一级/ 指令/ cache/ 和/ 纹理/ cache/ 等/ ./ 由于/ 芯片/ 面积/ 的/ 限制/ ,/ 相对/ 于片/ 上/ 同时/ 执行/ 的/ 成千上万/ 个/ 线程/ ,/ 这些/ 资源/ 显得/ 非常/ 有限/ ./ 当/ 调度/ 到/ 核上/ 的/ 线程/ 数/ 超过/ 一定/ 限度/ ,/ 存储资源/ 将会/ 出现/ 不足/ ./ 如果/ 继续/ 调度/ 线程/ 到/ 这些/ 核上/ 执行/ ,/ 则/ 会/ 产生/ 对/ 核上/ 存储资源/ 的/ 访问/ 竞争/ ,/ 此时/ 会/ 置换/ 部分/ 已/ 分配/ 的/ 资源/ ,/ 必然/ 会/ 降低/ 被/ 置换/ 资源/ 对应/ 线程/ 的/ 访存/ 效率/ ./ 因此/ 当/ 出现/ 资源/ 访问/ 竞争/ 时/ ,/ 系统/ 的/ 性能/ 会/ 出现/ 一定/ 程度/ 的/ 下降/ ,/ 严重/ 时会/ 出现/ 访存/ “/ 抖动/ ”/ 现象/ [/ 46/ -/ 48/ ]/ ./ 因此/ ,/ 尽量减少/ 线程/ 对/ 存储资源/ 的/ 占用/ ,/ 或/ 尽快/ 释放/ 对/ 存储资源/ 的/ 占用/ ,/ 是/ 减少/ 片上/ 存储资源/ 访问/ 竞争/ 的/ 两种/ 直观/ 思路/ ./ Bakhoda/ 等/ 人/ [/ 49/ ]/ 研究/ 发现/ ,/ 有/ 相当/ 部分/ 的/ 应用程序/ 在/ 并发/ 执行/ 的/ 线程/ 块/ 数量/ 受限/ 的/ 情况/ 下能/ 获得/ 更/ 高/ 的/ 性能/ ./ 线程/ 调度/ 优化/ 成为/ 了/ 目前/ 解决/ 片上/ 存储资源/ 尤其/ 是/ cache/ 资源/ 访问/ 竞争/ 问题/ 的/ 重要/ 方法/ ,/ 它/ 可以/ 从/ 3/ 个/ 方面/ 进行/ 考虑/ :/ (/ 1/ )/ 通过/ 优化/ 调度/ 到/ GPGPU/ 核上/ 的/ 并发/ 线程/ 数量/ 减少/ 对片/ 上/ 存储资源/ 访问/ 竞争/ ;/ (/ 2/ )/ 通过/ 混合/ 执行/ 不同/ 类型/ 的/ 计算/ 任务/ 减少/ 对片/ 上/ 存储资源/ 访问/ 竞争/ ,/ 并/ 尽可能/ 地/ 提升/ 片上/ 资源/ 的/ 利用率/ ;/ (/ 3/ )/ 通过/ 优化/ 线程/ 的/ 调度/ 顺序/ 减少/ 片上/ 存储资源/ 的/ 访问/ 竞争/ ./ 改变/ 线程/ 调度/ 的/ 顺序/ 和/ 时机/ 、/ 有效/ 控制/ 和/ 优化/ 调度/ 到/ 核上/ 的/ 线程/ 数量/ ,/ 是/ 目前/ 线程/ 调度/ 优化/ 解决/ 片上/ 存储资源/ 访问/ 竞争/ 的/ 主要/ 思想/ ./ Rogers/ 等/ 人/ [/ 50/ ]/ 提出/ 的/ CCWS/ (/ Cache/ -/ ConsciousWavefrontScheduling/ )/ 策略/ 通过/ 对/ 线程/ 组/ cache/ 访问/ 失效/ 情况/ 的/ 分析/ ,/ 动态/ 调整/ 调度/ 到/ GPGPU/ 核上/ 的/ 线程/ 组/ 数量/ ,/ 但是/ 它/ 需要/ 等到/ 数据/ 局部性/ 破坏/ 之后/ 才/ 进行/ 相应/ 的/ 调整/ ./ 随后/ Rogers/ 等/ 人/ [/ 48/ ]/ 又/ 提出/ 了/ 另/ 一种/ 降低/ cache/ 资源/ 访问/ 竞争/ 的/ 线程/ 调度/ 策略/ DAWS/ (/ Divergence/ -/ AwareWarpScheduling/ )/ ./ 与/ CCWS/ 策略/ 不同/ 的/ 是/ ,/ 该/ 策略/ 通过/ 分析/ cache/ 的/ 使用/ 情况/ 主动/ 地/ 动态/ 调整/ 调度/ 到/ 核上/ 的/ 线程/ 组/ 数量/ ,/ 破坏/ 数据/ 局部性/ 的/ 情况/ 大幅度/ 地/ 减少/ ./ Kayiran/ 等/ 人/ [/ 16/ ]/ 则/ 结合/ 不同/ 计算/ 任务/ 的/ 特点/ 动态/ 调整/ 调度/ 到/ 核上/ 的/ 线程/ 块/ 数量/ ./ 他们/ 通过/ 分析/ 发现/ ,/ 不同/ 类型/ 的/ 计算/ 任务/ 运行/ 不同/ 数量/ 的/ 线程/ 块/ 时会/ 表现/ 出/ 不同/ 的/ 性能/ 效果/ ,/ 并/ 提出/ 了/ DYNCTA/ (/ DynamicCTAscheduling/ )/ 线程/ 调度/ 策略/ ./ 与/ CCWS/ 和/ DAWS/ 策略/ 不同/ ,/ 该/ 策略/ 定期/ 对/ GPGPU/ 核/ 的/ 状态/ 进行/ 定量分析/ ,/ 然后/ 动态/ 调整/ 调度/ 到/ GPGPU/ 核上/ 的/ 线程/ 数量/ ./ Cheng/ 等/ 人/ [/ 51/ ]/ 针对/ 多核/ 处理器/ 的/ 访存/ 竞争/ 问题/ 也/ 提出/ 过/ 类似/ 的/ 模型/ ./ 不同/ 的/ 是/ ,/ 他们/ 通过/ 对多核/ 处理器/ 性能/ 的/ 定量分析/ 来/ 动态/ 地/ 确定/ 最优/ 并发/ 访存/ 任务/ 数/ ./ 与/ 前面/ 几种/ 动态/ 调整/ 调度/ 到/ 核上/ 的/ 线程/ 块/ 数量/ 的/ 方法/ 不同/ ,/ Lee/ 等/ 人/ [/ 52/ ]/ 提出/ 的/ LCS/ (/ LazyCTAScheduling/ )/ +/ BCSPage9/ (/ BlockCTAScheduling/ )/ 的/ 线程/ 调度/ 策略/ 对/ 调度/ 到/ 核上/ 的/ 最优/ 线程/ 组/ 数量/ 进行/ 静态/ 量化/ ./ 限制/ 调度/ 到/ 核上/ 的/ 线程/ 组/ 数量/ 是/ 前面/ 几种/ 算法/ 的/ 主要/ 特点/ ,/ 可以/ 有效/ 地/ 减少/ cache/ 的/ 访问/ 竞争/ 和/ 对/ 数据/ 局部性/ 的/ 破坏/ ,/ 但/ 在/ 一定/ 程度/ 上/ 限制/ 了/ 片/ 上/ 资源/ 的/ 利用率/ ./ Xiang/ 等/ 人/ [/ 53/ ]/ 提出/ 了/ WarpMan/ (/ Warp/ -/ levelresourceManagement/ )/ 线程/ 调度/ 策略/ ,/ 充分考虑/ 了/ 片/ 上/ 存储资源/ 竞争/ 的/ 问题/ ,/ 在/ 保证/ 不/ 破坏/ 数据/ 局部性/ 的/ 基础/ 上/ ,/ 尽量/ 调度/ 更/ 多/ 的/ 线程/ 组到/ 核上/ 运行/ ./ 文献/ [/ 54/ -/ 55/ ]/ 通过/ 实验/ 分析/ 发现/ ,/ 一次/ 运行/ 一个/ 计算/ 任务/ 会/ 造成/ GPGPU/ 资源/ 利用率/ 较/ 低/ ,/ 通过/ 对/ GPGPU/ 资源/ 空间/ 划分/ 或/ 细粒度/ 控制/ ,/ 让/ 多个/ kernel/ 并发/ 执行/ ,/ 可以/ 有效/ 地/ 提高/ 片上/ 资源/ 的/ 利用率/ ./ 但是/ 在/ 组合/ 计算/ 任务/ 时/ ,/ 应/ 尽可能/ 选择/ 不同/ 特点/ 的/ kernel/ ,/ 以/ 尽可能减少/ kernel/ 之间/ 产生/ 的/ 存储资源/ 竞争/ ./ Zheng/ 等/ 人/ [/ 47/ ]/ 提出/ 的/ CCA/ (/ adaptiveCacheandConcurrencyAllocation/ )/ 线程/ 调度/ 策略/ 充分利用/ 了/ 这/ 一/ 性质/ ,/ 对于/ 表现/ 出/ 数据/ 局部性/ 的/ 线程/ 组/ 采用/ 动态/ 数量/ 调节/ 调度/ 策略/ ,/ 而/ 对于/ 不/ 具有/ 数据/ 局部性/ 的/ 线程/ 组则/ 采用/ cache/ 绕行/ 策略/ 调度/ 执行/ ,/ 这/ 既/ 限制/ 了/ 访问/ cache/ 的/ 线程/ 数量/ ,/ 又/ 提高/ 了/ 并发/ 执行/ 的/ 线程/ 数量/ ./ 相对/ 于/ WarpMan/ ,/ 由于/ 有/ 更/ 多/ 的/ 执行/ 任务/ ,/ CCA/ 策略/ 具有/ 更大/ 的/ SIMD/ 执行/ 深度/ ,/ 对长/ 延时/ 访存/ 操作/ 的/ 隐藏/ 能力/ 更强/ ./ Awatramani/ 等/ 人/ [/ 56/ ]/ 也/ 提出/ 了/ 同时/ 调度/ 不同/ 类型/ kernel/ 的/ 线程/ 调度/ 策略/ KITBS/ (/ KernelInterleavedThreadBlockScheduling/ )/ ,/ 并/ 明确指出/ 将/ 访存/ 密集型/ kernel/ 和/ 计算/ 密集型/ kernel/ 进行/ 组合/ 调度/ ./ Lee/ 等/ 人/ [/ 52/ ]/ 在/ 文献/ 中/ 提出/ 的/ mCKE/ (/ mixedConcurrentKernelExecution/ )/ 线程/ 调度/ 策略/ 也/ 支持/ 发射/ 多个/ kernel/ 到/ 同一个/ 核/ 执行/ ,/ 但是/ 文中/ 对于/ 如何/ 组合/ kernel/ 没有/ 进行/ 深入/ 的/ 讨论/ ./ 调度/ 多个/ kernel/ 到/ 同一个/ 核上/ 执行/ 确实/ 能/ 提/ 线程/ 调度/ 策略/ 解决/ 资源/ 竞争/ 的/ 方式/ 线程/ 调度/ 粒度/ 是否/ 提升/ 资源/ 利用率/ 是否/ 提升/ TLP/ 保持数据/ 局部性/ 表/ 3/ 常见/ 的/ 针对/ 片上/ 资源/ 竞争/ 的/ 线程/ 调度/ 优化/ 策略/ 特点/ DYNCTA/ [/ 16/ ]/ 动态/ 限制/ 调度/ 数量/ TL/ [/ 26/ ]/ CCA/ [/ 47/ ]/ DAWS/ [/ 48/ ]/ CCWS/ [/ 50/ ]/ mCKE/ [/ 52/ ]/ 混合/ 调度/ 不同/ 计算/ 任务/ WarpMan/ [/ 53/ ]/ 动态/ 限制/ 调度/ 数量/ OWL/ [/ 57/ ]/ 3.2/ ./ 2/ 针对/ 访存/ 离散/ 的/ 线程/ 调度/ 优化/ GPGPU/ 通过/ 支持/ 大量/ 并发/ 线程/ 的/ 同时/ 执行/ 来/ 高片/ 上/ 资源/ 的/ 利用率/ ,/ 但是/ 需要/ 同时/ 调度/ 不同/ 类型/ 的/ kernel/ ,/ 否则/ 会/ 加剧/ 对片/ 上/ 资源/ 的/ 访问/ 竞争/ ./ 如何/ 合理/ 组合/ kernel/ 成为/ 了/ 该类/ 线程/ 调度/ 方法/ 的/ 关键/ ,/ 对于/ 包含/ kernel/ 类型/ 相同/ 的/ 应用程序/ 并/ 不/ 适用/ ,/ 因此/ 它/ 的/ 应用/ 具有/ 一定/ 的/ 局限性/ ./ 和/ 上述/ 两类/ 方法/ 一样/ ,/ 改变/ 线程/ 的/ 调度/ 顺序/ 也/ 能/ 有效/ 地/ 减少/ 片上/ 存储资源/ 访问/ 竞争/ ./ Narasiman/ 等/ 人/ [/ 26/ ]/ 为了/ 提升/ 长/ 延时/ 访存/ 操作/ 的/ 隐藏/ 能力/ ,/ 提出/ 了/ 两级/ 调度/ 策略/ TL/ (/ Two/ -/ Levelscheduling/ )/ ,/ 将/ 连续/ 的/ 线程/ 块/ 进行/ 分组/ ,/ 限制/ 某一时间/ 段/ 内/ 同时/ 执行/ 的/ 线程/ 数量/ ,/ 从而/ 有效/ 地/ 避免/ 了/ 片/ 上/ 资源/ 访问/ 竞争/ ,/ 但/ 这会/ 在/ 一定/ 程度/ 上/ 降低/ 程序执行/ 过程/ 的/ TLP/ ,/ 也/ 会/ 降低/ 片上/ 资源/ 的/ 利用率/ ./ Jog/ 等/ 人/ [/ 57/ ]/ 在/ TL/ 的/ 基础/ 上/ 提出/ 了/ OWL/ (/ CooperativeThreadArrayAwareWarpScheduling/ )/ 线程/ 调度/ 策略/ ,/ 它/ 也/ 是/ 按/ 线程/ 块/ 组/ 进行/ 两级/ 调度/ ./ 另外/ OWL/ 策略/ 还/ 通过/ 调度/ 不/ 连续/ 的/ 线程/ 块/ 组来/ 提高/ 访存/ 的/ 并行度/ ,/ 有利于/ 系统/ 整体/ 访存/ 性能/ 的/ 提升/ ./ 优化/ 线程/ 的/ 调度/ 顺序/ 可以/ 在/ 一定/ 程度/ 上/ 减少/ 片上/ 资源/ 的/ 访问/ 竞争/ ,/ 但是/ 如果/ 调度/ 顺序/ 不当/ ,/ 有/ 可能/ 破坏/ 线程/ 组/ 之间/ 的/ 数据/ 局部性/ ,/ 甚至/ 会/ 降低/ 程序执行/ 过程/ 中/ 的/ TLP/ 和/ 片/ 上/ 资源/ 的/ 利用率/ ./ 上述/ 三类/ 线程/ 调度/ 优化/ 方法/ 在/ 一定/ 程度/ 解决/ 了/ 片/ 上/ 资源/ 访问/ 竞争/ 问题/ ,/ 有/ 的/ 方法/ 甚至/ 进一步/ 提升/ 了/ 片/ 上/ 资源/ 的/ 利用率/ ./ 然而/ 这些/ 线程/ 调度/ 优化/ 方法/ 仍然/ 存在/ 以下/ 不足/ :/ 限制/ 核上/ 并行执行/ 的/ 线程/ 数量/ 与/ 提高/ 片上/ 资源/ 利用率/ 存在/ 冲突/ ;/ 同时/ 调度/ 多个/ kernel/ 的/ 适用性/ 较差/ ,/ 对/ kernel/ 进行/ 定性分析/ 机制/ 有待/ 完善/ ;/ 改变/ 线程/ 的/ 调度/ 顺序/ 与/ 保持数据/ 局部性/ 存在/ 冲突/ ./ 因此/ ,/ 在/ 解决/ 片上/ 存储资源/ 访问/ 竞争/ 的/ 问题/ 上/ 可以/ 在/ 这些/ 方面/ 继续/ 展开/ 研究/ ./ 表/ 3/ 对/ 几种/ 常见/ 的/ 针对/ 片上/ 存储资源/ 竞争/ 的/ 线程/ 调度/ 优化/ 方法/ 进行/ 了/ 归纳/ 和/ 比较/ ./ 隐藏/ 长/ 延时/ 访存/ 操作/ ,/ 当/ 某个/ 线程/ 组/ 处于/ 长/ 延时/ 访存/ 等待/ 状态/ ,/ GPGPU/ 会/ 立即/ 切换/ 到/ 其他/ 准备就绪/ Page10/ 的/ 线程/ 组/ 继续执行/ ,/ 因此/ 只要/ 有/ 足够/ 活跃/ 的/ 线程/ 组/ ,/ SIMD/ 流水/ 部件/ 就/ 会/ 一直/ 处于/ 工作/ 状态/ ./ 然而/ ,/ 同一个/ 线程/ 组中/ 不同/ 线程/ 访问/ 的/ 地址/ 可能/ 不/ 在/ 同一个/ cache/ 行/ ,/ 且/ 它们/ 的/ 访存/ 情况/ 也/ 可能/ 存在/ 差异/ ,/ 部分/ 线程/ 由于/ L1cache/ 访问/ 失效/ 而/ 处于/ 等待/ 状态/ ,/ 另/ 一部分/ 线程/ 的/ L1cache/ 访问/ 命中/ ./ 另外/ ,/ 由于/ SIMD/ 执行/ 模式/ 采用/ 锁步/ 执行/ 方式/ ,/ 线程/ 组中/ L1cache/ 访问/ 命中/ 的/ 线程/ 只能/ 等待/ L1cache/ 访问/ 失效/ 的/ 线程/ ,/ 导致/ 整个/ 线程/ 组/ 的/ 执行/ 被/ 延时/ ,/ 我们/ 称/ 这种/ 情况/ 为/ 访存/ 离散/ (/ MemoryDivergence/ )/ [/ 33/ ]/ ./ 通常/ 情况/ 下/ ,/ 访存/ 离散/ 比/ 分支/ 转移/ 发生/ 的/ 概率/ 大/ 很多/ [/ 58/ ]/ ./ 如果/ 在/ 发生/ 访存/ 离散/ 时/ 没有/ 足够/ 活跃/ 的/ 线程/ 组/ 进行/ 切换/ ,/ SIMD/ 流水线/ 将/ 处于/ 空闲/ 状态/ ,/ 从而/ 对系统/ 性能/ 造成/ 影响/ ./ 另外/ ,/ 访存/ 离散/ 还会/ 导致/ 相应/ 线程/ 组/ 的/ 执行/ 被/ 挂/ 起/ ,/ 延缓/ 了/ 其/ 执行/ 进度/ ,/ 其/ 持续/ 占有/ 的/ 资源/ 对/ 其他/ 线程/ 的/ 执行/ 也/ 会/ 产生/ 影响/ ./ 文献/ [/ 59/ -/ 61/ ]/ 针对/ CPU/ 的/ cache/ 访问/ 失效/ 提出/ 了/ 向前/ 执行/ (/ RunaheadExecution/ )/ 的/ 策略/ ,/ 他们/ 将/ 这种/ 向前/ 执行/ 看作/ 是/ 无效/ 的/ “/ 预/ 执行/ ”/ ,/ 但是/ 可以/ 将/ 后续/ 指令/ 及其/ 数据/ 提前/ 预取/ 到/ cache/ 中/ ,/ 减少/ 后续/ 指令/ 的/ cache/ 访问/ 失效率/ ./ 借助于/ 该/ 思想/ ,/ 在/ GPGPU/ 中/ ,/ 当/ 某个/ 线程/ 组/ 出现/ 访存/ 离散/ 时/ ,/ 也/ 可以/ 允许/ 部分/ L1cache/ 命中/ 的/ 线程/ 继续/ 向前/ 执行/ ,/ 从而/ 加速/ 整个/ 线程/ 组/ 的/ 执行/ 进程/ ./ Tarjan/ 等/ 人/ [/ 58/ ]/ 针对/ 访存/ 离散/ 提出/ 了/ AdaptiveSlip/ 线程/ 调度/ 策略/ ,/ 重点/ 讨论/ 了/ 针对/ 循表/ 4/ 常见/ 的/ 针对/ 访存/ 离散/ 的/ 线程/ 调度/ 优化/ 策略/ 特点/ 线程/ 调度/ 策略/ AdaptiveSlip/ [/ 58/ ]/ RobustSIMD/ [/ 62/ ]/ DWR/ [/ 63/ ]/ 3.2/ ./ 3/ 针对/ 数据/ 预取/ 的/ 线程/ 调度/ 优化/ 数据/ 预取/ 是/ 提前/ 将/ 数据/ 从片/ 外/ 存储/ 取/ 到/ 缓存/ 中以/ 提升/ 后续/ 数据/ 访问/ 命中率/ 的/ 技术/ ,/ 它/ 是/ 提高/ 处理器/ 执行/ 效率/ 的/ 重要/ 手段/ 之一/ ./ 然而/ GPGPU/ 采用/ 的/ SIMT/ 执行/ 模式/ 可以/ 通过/ 众多/ 并行执行/ 的/ 线程/ 来/ 隐藏/ 长/ 延时/ 访存/ 操作/ ,/ 并/ 出于/ 考虑/ 能效/ 优化/ 的/ 目的/ ,/ 在/ GPGPU/ 中/ 去掉/ 了/ 硬件/ 预取/ 部件/ [/ 64/ -/ 65/ ]/ ./ 通过/ 线程/ 调度/ 优化/ 提高/ 数据/ 预取/ 能力/ ,/ 有利于/ 进一步/ 地/ 开发/ 线程/ 之间/ 的/ 数据/ 局部性/ 、/ 提高/ cache/ 访问/ 命中率/ 、/ 提升/ 隐藏/ 长/ 延时/ 访存/ 操作能力/ ./ GPGPU/ 中/ 的/ 数据/ 预取/ 可以/ 通过/ 线程/ 调度/ 优化/ 来/ 实现/ ,/ 其/ 主要/ 思想/ 是/ 在线/ 程/ 执行/ 过程/ 中/ 根据/ 一定/ 的/ 预取/ 距离/ 和/ 预取度/ ,/ 在/ 为/ 自己/ 获取数据/ 的/ 同时/ ,/ 将/ 环中/ 出现/ 访存/ 离散/ 时/ 的/ 线程/ 调度/ 优化/ 机制/ ./ 但是/ 由于/ 该/ 策略/ 总是/ 在/ 下/ 一次/ 循环/ 迭代/ 中才/ 对/ 线程/ 组/ 进行/ 重/ 汇聚/ ,/ 容易/ 造成/ 较大/ 的/ 等待/ 延时/ ./ 在/ 此基础/ 上/ ,/ Meng/ 等/ 人/ [/ 33/ ]/ 提出/ 了/ DWS/ 策略/ ,/ 能/ 对/ 任意/ 发生/ 的/ 访存/ 离散/ 进行/ 处理/ ,/ 并/ 提出/ 了/ 相对/ 更加/ 有效/ 地重/ 汇聚/ 机制/ ./ 随后/ Meng/ 等/ 人/ [/ 62/ ]/ 分析/ 认为/ 宽度/ 越大/ 的/ SIMD/ 越/ 容易/ 出现/ 访存/ 离散/ ,/ 他们/ 提出/ 了/ Robust/ -/ SIMD/ 自/ 适应/ 调度/ 策略/ ,/ 对/ 不同/ 应用程序/ 的/ 执行/ 性能/ 进行/ 抽样/ 测试/ 分析/ ,/ 以此/ 来/ 调节/ SIMD/ 的/ 执行/ 宽度/ 和/ 执行/ 深度/ ,/ 减少/ 了/ 访存/ 离散/ 的/ 发生/ ./ Lashgar/ 等/ 人/ [/ 63/ ]/ 同样/ 认为/ 宽度/ 大/ 的/ 线程/ 组/ 容易/ 发生/ 访存/ 离散/ ,/ 他们/ 提出/ 了/ DWR/ (/ DynamicWarpResizing/ )/ 策略/ ,/ 通过/ 动态/ 调节/ 线程/ 组/ 大小/ 来/ 减少/ 访存/ 离散/ 的/ 发生/ ./ 访存/ 离散/ 发生/ 时/ 允许/ 部分/ 访存/ 命中/ 的/ 线程/ 继续/ 向前/ 执行/ ,/ 实质/ 上/ 是/ 以/ 减小/ warp/ 宽度/ 而/ 降低/ TLP/ 为/ 代价/ 的/ ,/ 因此/ 需要/ 考虑/ 尽早/ 重/ 汇聚/ 线程/ 组中/ 的/ 所有/ 线程/ ./ 而且/ ,/ 当/ 存在/ 足够/ 多/ 活跃/ 的/ 线程/ 组时/ ,/ 切换/ 到/ 其他/ 活跃/ 线程/ 组/ 可以/ 隐藏/ 由于/ 访存/ 离散/ 带来/ 的/ 长/ 延时/ 等待/ ,/ 这种/ 情况/ 下/ 此类/ 方法/ 对系统/ 性能/ 提升/ 的/ 意义/ 不/ 大/ ,/ 因此/ 还/ 需要/ 考虑/ 策略/ 选择/ 的/ 时机/ ./ 另外/ ,/ 如果/ 能/ 尽量/ 保持数据/ 局部性/ 不/ 被/ 破坏/ ,/ 且/ 尽可能/ 开发/ 线程/ 之间/ 的/ 数据/ 局部性/ ,/ 则/ 能/ 更/ 有效/ 的/ 解决/ 访存/ 离散/ 问题/ ./ 表/ 4/ 归纳/ 了/ 几种/ 常见/ 的/ 针对/ 访存/ 离散/ 的/ 线程/ 调度/ 优化/ 方法/ 的/ 特点/ ./ 是否/ 提升/ TLP/ 同一个/ 线程/ 组/ 或/ 其他/ 线程/ 组中/ 其他/ 线程/ 的/ 所/ 需/ 数据/ 提前/ 预取/ 到/ 缓存/ 中/ ./ 其中/ 预取/ 距离/ 是/ 指/ 相对/ 于/ 特定/ 数据/ 请求/ 而/ 进行/ 预取/ 的/ 提前量/ ,/ 它/ 制约/ 着/ 数据/ 预取/ 的/ 准度/ ;/ 预取度/ 是/ 指/ 一次/ 预取/ 数据/ 的/ 大小/ ,/ 它/ 的/ 大小/ 的/ 选取/ 对片/ 上/ 资源/ 的/ 竞争/ 会/ 产生/ 一定/ 的/ 影响/ ,/ 因为/ 预取/ 过/ 多/ 的/ 数据/ 会/ 挤占/ 其他/ 线程/ 所/ 需/ 的/ 资源/ ./ 3.2/ ./ 2/ 小节/ 中/ 针对/ 访存/ 离散/ 的/ 线程/ 调度/ 优化/ 策略/ 允许/ cache/ 访问/ 命中/ 的/ 线程/ 继续执行/ ,/ 实质/ 上/ 也/ 可以/ 看作/ 是/ 一种/ 数据/ 预取/ 机制/ ,/ 因为/ 继续/ 向前/ 执行/ 的/ 线程/ 后续/ 访存/ 获得/ 的/ 数据/ 有/ 可能/ 成为/ 落后/ 线程/ 后续/ 访问/ 的/ 数据/ ,/ 可以/ 提高/ 落后/ 线程/ 的/ cache/ 访问/ 命中率/ ./ 这类/ 数据/ 预取/ 机制/ 主要/ 利用/ 了/ 连续/ 线程/ 之间/ 具有/ 数据/ 局部性/ 的/ 特点/ ,/ 然而/ 却/ 以/ 牺牲/ 一定/ 的/ TLP/ 为/ 代价/ ./ NVIDIA/ 公/ Page11/ 司/ Fermi/ 系列/ 的/ GPGPU/ 采用/ 的/ 轮转/ 线程/ 调度/ 策略/ RR/ (/ Round/ -/ robinScheduling/ )/ 和/ Narasiman/ 等/ 人/ [/ 26/ ]/ 提出/ 的/ TL/ 线程/ 调度/ 策略/ 同样/ 利用/ 了/ 数据/ 局部性/ 原理/ 来/ 实现/ 数据/ 预取/ 机制/ ./ 但是/ 由于/ 连续/ 的/ 线程/ 组/ 之间/ 距离/ 太近/ ,/ 可能/ 会/ 使/ 数据/ 预取/ “/ 太迟/ ”/ ./ Jog/ 等/ 人/ [/ 66/ ]/ 提出/ 了/ 预取/ 感知/ 的/ 线程/ 调度/ 策略/ PAS/ (/ Prefetch/ -/ awareScheduling/ )/ ,/ 通过/ 改变/ 连续/ 线程/ 组/ 的/ 调度/ 顺序/ 使得/ 原本/ 连续/ 的/ 线程/ 组/ 之间/ 保持/ 一定/ 的/ 预取/ 距离/ ./ 该/ 策略/ 在/ 调整/ 预取/ 距离/ 的/ 同时/ ,/ 还/ 考虑/ 了/ 对/ 预取度/ 的/ 控制/ ,/ 仅/ 对/ 访问/ 频度/ 较/ 高/ 的/ 内存/ 块/ 实行/ 数据/ 预取/ ./ 他们/ 提出/ 的/ 另/ 一种/ 线程/ 调度/ 策略/ OWL/ 与/ PAS/ 相似/ ,/ 也/ 是/ 通过/ 调整/ 连续/ 线程/ 块/ 的/ 发射/ 距离/ 来/ 进行/ 数据/ 预取/ ./ 但是/ 与/ PAS/ 不同/ 的/ 是/ ,/ OWL/ 在/ 数据/ 预取/ 时/ 还/ 考虑/ 了/ 如何/ 提升/ 访存/ 并行度/ ./ 通常/ 情况/ 下/ 对于/ 规则/ 的/ 访存/ 模型/ 容易/ 确定/ 数据/ 预取/ 的/ 距离/ ,/ 但是/ 对于/ 不规则/ 的/ 访存/ 模型/ 来说/ ,/ 则/ 容易/ 出现/ 数据/ 预取/ “/ 过早/ ”/ 或/ “/ 过/ 晚/ ”/ ,/ 导致/ 预取/ 的/ 数据/ 未/ 及时/ 到来/ 或/ 被/ 覆盖/ ./ 这种/ 无效/ 的/ 数据/ 预取/ 会/ 造成/ 有限/ 存储/ 带宽/ 的/ 浪费/ ,/ 甚至/ 有/ 可能/ 造成/ 整体/ 访存/ 性能/ 的/ 下降/ ,/ 因此/ 应/ 根据/ 程序执行/ 过程/ 中/ 系统/ 的/ 状态/ 变化/ 动态/ 调整/ 数据/ 预取/ 的/ 距离/ 和/ 预取度/ ,/ 从而/ 进一步提高/ 数据/ 预取/ 的/ 准度/ 和/ 有效性/ ./ 前面/ 提到/ 的/ PAS/ 和/ OWL/ 策略/ 均/ 未/ 考虑/ 后/ 一种/ 情况/ ,/ 它们/ 采用/ 静态方法/ 确定/ 数据/ 预取/ 的/ 距离/ ,/ 对于/ 访存/ 不规则/ 的/ 应用程序/ 来说/ ,/ 其/ 预取/ 的/ 准确度/ 势必会/ 下降/ ./ Lee/ 等/ 人/ [/ 67/ ]/ 则/ 提出/ 了/ 自/ 适应/ 预取/ 机制/ MT/ -/ prefetching/ (/ Many/ -/ Threadawareprefetching/ )/ ,/ 在线/ 程/ 执行/ 过程/ 中/ 对/ 预取/ 数据/ 替换/ 率/ 和/ 预取/ 访存/ 合并/ 率/ 两个/ 度量/ 进行/ 周期性/ 采样/ 分析/ ,/ 并/ 以此/ 自动/ 调节/ 数据/ 预取/ 行为/ ./ Dahlgren/ 等/ 人/ [/ 68/ ]/ 通过/ 对/ 预取/ 准确度/ 的/ 度量/ 来自/ 适应/ 地/ 调整/ 预取/ 距离/ ./ Srinath/ 等/ 人/ [/ 69/ ]/ 提出/ 了/ 更/ 复杂/ 的/ 、/ 基于/ 反馈/ 的/ 预取/ 机制/ ,/ 综合/ 考虑/ 了/ 预取/ 的/ 准确度/ 、/ 预取/ 的/ 及时性/ 以及/ cache/ 污染/ 等/ 多个/ 因素/ ./ 无论是/ 规则/ 的/ 数据/ 预取/ ,/ 还是/ 基于/ 反馈/ 的/ 动态/ 预取/ 机制/ ,/ 一般/ 只有/ 在/ 活跃/ 线程/ 数较/ 少/ 的/ 情况/ 下/ 才能/ 充分发挥/ 其/ 优势/ ,/ 因为/ 在/ 活跃/ 线程/ 数/ 足够/ 的/ 情况/ 下长/ 延时/ 访存/ 可以/ 被/ 隐藏/ ./ Sethia/ 等/ 人/ [/ 70/ ]/ 提出/ 的/ APOGEE/ (/ AdaptivePrefetchingOnGPUsforEnergyEfficiency/ )/ 预取/ 策略/ 着重/ 研究/ 了/ 活跃/ 线程/ 组少/ 的/ 情况/ 下/ 的/ 数据/ 预取/ ,/ 取得/ 了/ 较/ 好/ 的/ 能效/ 比/ ./ 另外/ ,/ Yang/ 等/ 人/ [/ 71/ ]/ 通过/ 编译/ 的/ 方式/ 提前/ 将/ 数据/ 预取/ 到/ 寄存器/ 中/ ./ 但是/ 在/ 一定/ 程度/ 上/ 增加/ 了/ 对/ 寄存器/ 资源/ 的/ 使用/ ,/ 对系统/ 功耗/ 产生/ 影响/ ./ 有效/ 地/ 结合/ 线程/ 调度/ 优化/ 方法/ ,/ 根据/ 系统/ 状态/ 变化/ 进行/ 动态/ 的/ 数据/ 预取/ 能/ 进一步/ 地/ 提升/ 数据/ 预取/ 的/ 有效性/ ./ 但是/ 对于/ 不同/ 类型/ 的/ 计算/ 任务/ ,/ 数据/ 预取/ 表现/ 出来/ 的/ 重要性/ 不同/ ./ 例如/ ,/ 对于/ 计算/ 密集型/ 的/ 计算/ 任务/ ,/ 数据/ 预取/ 的/ 优势/ 并/ 不能/ 得到/ 很/ 好/ 的/ 体现/ ./ 因此/ ,/ 针对/ 不同/ 的/ 计算/ 任务/ 应/ 采取/ 不同/ 的/ 预取/ 策略/ ./ 表/ 5/ 归纳/ 了/ 几种/ 常见/ 的/ 针对/ 数据/ 预取/ 的/ 线程/ 调度/ 优化/ 方法/ 的/ 特点/ ./ 表/ 5/ 常见/ 的/ 针对/ 数据/ 预取/ 的/ 线程/ 调度/ 优化/ 策略/ 特点/ 线程/ 调度/ 策略/ DWS/ [/ 33/ ]/ 静态/ 的/ 数据/ 预取/ OWL/ [/ 57/ ]/ 静态/ 的/ 数据/ 预取/ 预期/ 距离/ PAS/ [/ 66/ ]/ 静态/ 的/ 数据/ 预取/ MT/ -/ prefetching/ [/ 67/ ]/ 3.3/ 针对/ 标量/ 指令/ 执行/ 的/ 线程/ 调度/ 优化/ SIMT/ 执行/ 模式/ 让/ 同/ 一条/ 指令/ 在/ 不同/ 的/ 数据/ 上/ 执行/ 相同/ 的/ 操作/ ,/ 以此/ 获得/ 高/ 的/ 计算/ 吞吐量/ 和/ 高性能/ ./ 然而/ 在/ 应用程序/ 执行/ 过程/ 中/ 存在/ 相当/ 数量/ 的/ SIMD/ 指令/ ,/ 它们/ 对应/ 的/ 线程/ 不仅/ 处理/ 的/ 操作数/ 完全相同/ ,/ 而且/ 其/ 输出/ 结果/ 也/ 完全相同/ ,/ 这些/ 指令/ 被/ 称为/ 标量/ 指令/ [/ 20/ ,/ 72/ -/ 73/ ]/ ./ 标量/ 指令/ 的/ 执行/ 会/ 产生/ 大量/ 重复/ 冗余/ 操作/ ./ 在/ 同一个/ 线程/ 组/ 或/ 线程/ 块/ 中/ ,/ 如果/ 一条/ 标量/ 指令/ 只/ 需要/ 一个/ 线程/ 执行/ ,/ 则/ 可以/ 节省/ 大量/ 的/ 计算资源/ 和/ 存储资源/ ./ 对此/ 首先/ 需要/ 识别/ 应用程序/ 中/ 存在/ 的/ 标量/ 指令/ ,/ 其次/ 是/ 对/ 标量/ 指令/ 的/ 执行/ 进行/ 优化/ ./ 目前/ 常见/ 的/ 识别/ 标量/ 指令/ 的/ 方法/ 有/ 两类/ ./ 一类/ 是/ 通过/ 编译/ 的/ 方式/ 对/ 代码/ 进行/ 静态/ 分析/ 识别/ [/ 72/ ,/ 74/ -/ 75/ ]/ ,/ 另一类/ 则/ 是/ 通过/ 硬件/ 机制/ 进行/ 动态/ 识别/ [/ 76/ ]/ ./ 识别/ 后/ 的/ 标量/ 指令/ 一般/ 只/ 需/ 执行/ 一次/ ,/ 如果/ 利用/ 传统/ 的/ SIMD/ 通道/ 执行/ ,/ 则/ 会/ 造成/ 很大/ 的/ 片/ 上/ 资源/ 浪费/ ./ 为此/ 有/ 不少/ 做法/ 是/ 对/ 硬件/ 进行/ 修改/ ,/ 增加/ 特定/ 的/ 标量/ 指令/ 执行/ 部件/ 和/ 标量/ 数据/ 存储/ 部件/ ./ AMD/ 发布/ 的/ GNU/ 体系结构/ 中/ 引入/ 了/ 专门/ 的/ 标量/ 处理单元/ [/ 77/ ]/ ./ Xiang/ 等/ 人/ [/ 73/ ]/ 则/ 通过/ 增加/ 单独/ 的/ 标量/ 寄存器/ 文件/ 解决/ 了/ 标量/ 指令/ 操作数/ 的/ 存储/ 问题/ ./ 然而/ 这些/ 方法/ 都/ 需要/ 对/ 传统/ 的/ SIMT/ 系统结构/ 进行/ 较大/ 的/ 改动/ ,/ 线程/ 调度/ 优化/ 则/ 可/ 在/ 不用/ 对/ SIMT/ 系统结构/ 进行/ 较大/ 改动/ 的/ 情况/ 下/ 实现/ 标量/ 指令/ 的/ 高效/ 执行/ ./ Yilmazer/ 等/ 人/ [/ 20/ ]/ 提出/ 了/ SW/ (/ ScalarWaving/ )/ +/ SSSW/ (/ SimultaneousScalarandSIMDgroupWaving/ )/ 线/ Page12/ 程/ 调度/ 策略/ ./ 一方面/ 将/ 执行/ 相同/ PC/ 的/ 标量/ 指令/ 组织/ 为/ 标量/ 波/ 执行/ ,/ 另一方面/ 将/ 标量/ 波/ 和/ 线程/ 组组/ 合在一起/ 执行/ ,/ 实质/ 上/ 也/ 是/ 一种/ 线程/ 压缩/ 重组/ 调度/ 策略/ ./ 由于/ 进行/ 了/ 标量/ 识别/ ,/ SW/ +/ SSSW/ 策略/ 比/ 普通/ 线程/ 重组/ 调度/ 策略/ 具有/ 更好/ 的/ “/ 压缩/ ”/ 性能/ ./ 但是/ SW/ 策略/ 只/ 对/ 线程/ 组内/ 的/ 指令/ 进行/ 标量/ 化/ 执行/ ,/ 对/ 线程/ 组间/ 指令/ 的/ 标量/ 化/ 执行/ 未/ 进行/ 分析/ 讨论/ ./ 对/ 标量/ 指令/ 的/ 识别/ 和/ 执行/ 能够/ 大大减少/ 某些/ 指令/ 的/ 执行/ 次数/ ,/ 不仅/ 可以/ 节省/ 大量/ 的/ 计算资源/ ,/ 还/ 为/ 降低/ 系统/ 功耗/ 提供/ 了/ 很大/ 空间/ ./ 若能/ 从/ 线程/ 调度/ 优化/ 的/ 角度/ 充分利用/ 这/ 两/ 方面/ 的/ 优势/ ,/ 则/ 能/ 更好/ 地/ 提升/ 系统/ 的/ 性能/ 和/ 功效/ ,/ 目前/ 这方面/ 开展/ 的/ 研究/ 工作/ 相对/ 较少/ ./ 3.4/ 针对/ 功耗/ 优化/ 的/ 线程/ 调度/ 优化/ 相对/ 于/ CPU/ ,/ GPGPU/ 能/ 获得/ 更/ 高/ 的/ 能效/ [/ 78/ -/ 80/ ]/ ./ 目前/ 应用/ 广泛/ 的/ 动态/ 电压/ 频率/ 调节/ 技术/ (/ DVFS/ )/ 能/ 有效/ 地/ 降低/ GPGPU/ 的/ 动态/ 功耗/ [/ 81/ -/ 83/ ]/ ,/ 但是/ 随着/ 片上/ 集成/ 的/ 晶体管/ 数量/ 越来越/ 多及/ 制作/ 工艺/ 的/ 提升/ ,/ 静态/ 漏/ 电流/ 功耗/ 在/ 整个/ GPGPU/ 功耗/ 中所/ 占/ 的/ 比重/ 越来越/ 大/ [/ 81/ -/ 82/ ,/ 84/ -/ 85/ ]/ ./ 动态/ 功耗/ 和/ 静态/ 漏/ 电流/ 功耗/ 已经/ 成为/ GPGPU/ 功耗/ 的/ 两个/ 主要/ 来源/ ./ 过高/ 的/ 功耗/ 会/ 产生/ 大量/ 的/ 热量/ ,/ 直接/ 影响/ 电子/ 元器件/ 的/ 稳定性/ 、/ 可靠性/ 和/ 使用寿命/ ,/ 功耗/ 问题/ 成为/ 制约/ GPGPU/ 发展/ 的/ 重要/ 瓶颈/ 之一/ ./ 动态/ 功耗/ 通常/ 是/ 由/ 晶体管/ 的/ 充放电/ 产生/ 的/ 功耗/ ,/ 其/ 大小/ 通常/ 与/ 电子/ 元器件/ 的/ 工作电压/ 和/ 频率/ 相关/ ./ 动态/ 降低/ 不同/ 部件/ 的/ 工作电压/ 和/ 频率/ 是/ 目前/ 有效/ 降低/ GPGPU/ 动态/ 功耗/ 的/ 主要/ 手段/ 之一/ ./ Gu/ 等/ 人/ [/ 86/ ]/ 针对/ 交互式/ 游戏软件/ ,/ 利用/ DVFS/ 技术/ 对/ 图形/ 处理器/ 的/ 动态/ 功耗/ 进行/ 优化/ ./ Mochocki/ 等/ 人/ [/ 87/ ]/ 在/ 分析/ 了/ 手机/ 3D/ 图形/ 处理器/ 不同/ 流水/ 阶段/ 负载/ 不/ 均衡/ 特性/ 的/ 基础/ 上/ ,/ 结合/ DVFS/ 技术/ 有效/ 地/ 降低/ 了/ 手机/ 3D/ 图形/ 处理器/ 的/ 动态/ 功耗/ ./ 静态/ 功耗/ 通常/ 是/ 由/ 漏/ 电流/ 产生/ 的/ 功耗/ ./ 漏/ 电流/ 的/ 产生/ 是/ 由于/ CMOS/ 工艺/ 的/ 提升/ 使得/ 晶体管/ 绝缘层/ 变薄/ ,/ 导致/ 电流/ 容易/ 透过/ 绝缘层/ ./ 通过/ 门控/ 技术/ 适时/ 关闭/ 或/ 休眠/ 空闲/ 部件/ 是/ 目前/ 降低/ 静态/ 功耗/ 的/ 常用/ 技术/ ./ Wang/ 等/ 人/ [/ 81/ ]/ 针对/ 着色器/ 部件/ 、/ 固定/ 功能/ 几何/ 单元/ 和/ 非/ 着色/ 执行/ 单元/ 分别/ 提出/ 了/ PSS/ (/ PredictiveShaderShutdown/ )/ 、/ DGP/ (/ DeferredGeometryPipe/ -/ line/ )/ 和/ 超时/ 门控/ 的/ 3/ 种/ 体系结构/ 级/ 门控/ 策略/ ./ Wang/ 等/ 人/ [/ 88/ ]/ 着重/ 针对/ L1cache/ 和/ L2cache/ 的/ 访问/ 进行/ 能耗/ 门控/ ,/ 将/ 它们/ 的/ 工作/ 状态/ 在/ 激活/ 、/ 休眠/ 和/ 关闭/ 3/ 种/ 状态/ 间/ 动态/ 切换/ ./ Abdel/ -/ Majeed/ 等/ 人/ [/ 89/ ]/ 则/ 专门/ 提出/ 了/ 针对/ GPGPU/ 中/ 寄存器/ 文件/ 功耗/ 优化/ 的/ 门控/ 方法/ ,/ 通过/ 设置/ 三/ 模态/ 寄存器/ 访问控制/ 单元/ 和/ 对/ 活跃/ 掩码/ 行为/ 感知/ 的/ 门控/ 单元/ ,/ 降低/ 了/ 静态/ 漏/ 电流/ 功耗/ 和/ 动态/ 功耗/ ./ DVFS/ 和/ 功耗/ 门控/ 技术/ 能/ 有效/ 地/ 降低/ GPGPU/ 的/ 动态/ 功耗/ 和/ 静态/ 漏/ 电流/ 功耗/ ,/ 然而/ 单一/ 的/ 根据/ 各个/ 部件/ 的/ 运行/ 状态/ 进行/ 功耗/ 控制/ 优化/ 的/ 空间/ 有限/ ./ 目前/ 有/ 部分/ 对/ GPGPU/ 功耗/ 进行/ 优化/ 的/ 研究/ 工作/ 结合/ 了/ 线程/ 调度/ 优化/ 方法/ ,/ 通过/ 对/ 线程/ 调度/ 的/ 优化/ 使得/ 各/ 部件/ 的/ 运行/ 状态/ 呈现/ 更佳/ 的/ 规律性/ ,/ 从而/ 使之能/ 更好/ 的/ 匹配/ DVFS/ 和/ 功耗/ 门控/ 技术/ 的/ 应用/ ./ Abdel/ -/ Majeed/ 等/ 人/ [/ 82/ ]/ 提出/ 了/ 门控/ 感知/ 的/ 二级/ warp/ 调度/ 策略/ GATES/ (/ Gating/ -/ awareTwo/ -/ levelWarpScheduler/ )/ ,/ 优先/ 调度/ 发射/ 执行/ 同/ 类型/ 指令/ 的/ 线程/ 组/ ,/ 以/ 使/ 其他/ 执行/ 单元/ 获得/ 较长/ 的/ 空闲/ 时间/ ,/ 从而/ 有利于/ 通过/ 功耗/ 门控/ 技术/ 降低功耗/ ./ Xu/ 等/ 人/ [/ 85/ ]/ 提出/ 了/ 模式/ 感知/ 的/ 二级/ warp/ 调度/ 策略/ PATS/ (/ PatternAwareTwo/ -/ levelScheduler/ )/ ,/ 优先/ 执行/ 具有/ 相同/ 分支/ 模型/ 的/ 线程/ 组/ ./ 林一松/ 等/ 人/ [/ 90/ ]/ 提出/ 的/ 功耗/ 优化/ 模型/ 结合/ 了/ 计算/ 并行度/ 和/ 访存/ 并行度/ ,/ 根据/ 并发/ 执行/ 的/ 线程/ 数/ 确定/ 调频/ 因子/ 的/ 大小/ ,/ 并/ 结合/ DVFS/ 技术/ 对/ GPGPU/ 的/ 动态/ 功耗/ 进行/ 了/ 有效/ 地/ 优化/ ./ 上述/ 几种/ 线程/ 调度/ 优化/ 方法/ 均/ 以/ 功耗/ 优化/ 为/ 主要/ 目的/ ,/ 而/ 前面/ 章节/ 分析/ 的/ 线程/ 调度/ 优化/ 方法/ 则/ 以/ 性能/ 优化/ 为主/ ,/ 其中/ 也/ 有/ 部分/ 研究/ 工作/ 分析/ 了/ 这些/ 线程/ 调度/ 方法/ 对/ 功耗/ 产生/ 的/ 影响/ ./ Gebhart/ 等/ 人/ [/ 91/ ]/ 提出/ 的/ 二级/ warp/ 调度/ 策略/ TL/ 通过/ 设置/ 专门/ 的/ 寄存器/ 缓冲/ 来/ 保留/ 活跃/ 线程/ 组/ 的/ 上下文/ ,/ 减少/ 了/ 对/ 寄存器/ 文件/ 的/ 访问/ ,/ 从而/ 大大降低/ 了/ 访问/ 寄存器/ 产生/ 的/ 功耗/ ./ Xiang/ 等/ 人/ [/ 73/ ]/ 提出/ 了/ 对/ 标量/ 指令/ 执行/ 标量/ 化/ ,/ 大大减少/ 了/ 某条/ 标量/ 指令/ 执行/ 所/ 需要/ 的/ 各种/ 资源/ ,/ 结合/ 功耗/ 门控/ 技术/ 能/ 有效/ 地/ 降低/ 静态/ 功耗/ ./ 随后/ 他们/ 提出/ 的/ WarpMan/ 线程/ 调度/ 策略/ 及时/ 回收/ 执行/ 完成/ 的/ 线程/ 组/ 占用/ 的/ 资源/ ,/ 也/ 为/ 功耗/ 门控/ 优化/ 提供/ 了/ 机会/ ./ Rogers/ 等/ 人/ [/ 48/ ]/ 对/ 其/ 提出/ 的/ DAWS/ 线程/ 调度/ 分析/ 指出/ ,/ 由于/ 提高/ 了/ Cache/ 访问/ 命中率/ ,/ 减少/ 了/ 片/ 外访/ 存/ 次数/ ,/ 能/ 有效/ 地/ 降低/ 由于/ 访存/ 产生/ 的/ 动态/ 功耗/ ./ 尽管/ 目前/ 有/ 部分/ 线程/ 调度/ 优化/ 算法/ 考虑/ 了/ 功耗/ 优化/ ,/ 但是/ 以/ 功耗/ 优化/ 为/ 主要/ 目标/ 的/ 线程/ 调度/ 优化/ 研究/ 工作/ 仍然/ 不/ 多/ ,/ 尤其/ 是/ 结合/ 低功耗/ 优化/ 技术/ 的/ 线程/ 调度/ 优化/ 方法/ 的/ 研究/ 还/ 相对/ 较少/ ./ 表/ 6/ 归纳/ 了/ 几种/ 常见/ 的/ 针对/ 功耗/ 优化/ 的/ 线程/ 调度/ 优化/ 方法/ 的/ 特点/ ./ Page13/ 表/ 6/ 常见/ 的/ 针对/ 功耗/ 优化/ 的/ 线程/ 调度/ 优化/ 策略/ 特点/ 线程/ 调度/ 策略/ 主要/ 目标/ DAWS/ [/ 48/ ]/ WarpMan/ [/ 53/ ]/ 提高/ 性能/ GATES/ [/ 82/ ]/ PATS/ [/ 85/ ]/ 基于/ 并行度/ 分析模型/ [/ 90/ ]/ TL/ [/ 91/ ]/ 4/ 结束语/ 目前/ 研究者/ 提出/ 的/ 线程/ 调度/ 优化/ 方法/ 均/ 在/ 一定/ 程度/ 上/ 解决/ 了/ 影响/ GPGPU/ 性能/ 和/ 功效/ 提升/ 的/ 相关/ 问题/ ,/ 但是/ 这些/ 线程/ 调度/ 优化/ 方法/ 都/ 只/ 侧重/ 考虑/ 解决/ 其中/ 某/ 一个/ 或/ 几个/ 方面/ 的/ 问题/ ,/ 导致/ GPGPU/ 的/ 性能/ 和/ 功效/ 仍然/ 未能/ 达到/ 最大化/ ./ GPGPU/ 的/ 不断/ 发展/ 使得/ 线程/ 调度/ 优化/ 在/ 以下/ 方面/ 还/ 存在/ 挑战/ :/ (/ 1/ )/ 随着/ GPGPU/ 微/ 体系结构/ 的/ 发展/ ,/ 尤其/ 是/ 片/ 上/ 融合/ CPU/ -/ GPU/ 微/ 体系结构/ 的/ 发展/ ,/ 可以/ 大大减少/ CPU/ 和/ GPU/ 之间/ 数据传输/ 产生/ 的/ 开销/ ,/ 然而/ 还/ 需要/ 针对/ 新/ 的/ 微/ 体系结构/ 的/ 特点/ 对/ 线程/ 调度/ 进行/ 分析/ 并/ 优化/ ,/ 解决/ 在/ CPU/ 和/ GPU/ 间/ 合理/ 分配/ 计算/ 任务/ 、/ 利用/ CPU/ 数据/ 预取/ 优势/ 以/ 减少/ GPU/ 的/ 访存/ 开销/ 及片/ 上/ 资源/ 的/ 访问/ 竞争/ 等/ 方面/ 的/ 问题/ ;/ (/ 2/ )/ 当前/ 新型/ 存储技术/ 在/ 存储密度/ 、/ 访问速度/ 和/ 功耗/ 方面/ 都/ 有/ 一定/ 的/ 优势/ ,/ 为/ GPGPU/ 的/ 性能/ 提升/ 和/ 功耗/ 优化/ 提供/ 了/ 新/ 的/ 空间/ ,/ 需要/ 将/ 线程/ 调度/ 优化/ 方法/ 和/ 新/ 的/ 存储技术/ 进行/ 有效/ 地/ 结合/ ;/ (/ 3/ )/ 在/ 不少/ 线程/ 调度/ 优化/ 方法/ 中/ ,/ 某些/ 参数/ 的/ 选取/ 及/ 某些/ 自/ 适应/ 线程/ 调度/ 机制/ 还有/ 待/ 完善/ ,/ 结合/ 编译/ 技术/ 对/ 代码/ 进行/ 静态/ 或/ 动态/ 的/ 分析/ ,/ 为/ 线程/ 调度/ 优化/ 提供/ 更加/ 有效/ 合理/ 的/ 决策/ 支持/ ,/ 例如/ 通过/ 编译/ 技术/ 实现/ 对/ 标量/ 指令/ 的/ 识别/ 、/ 线程/ 重/ 汇聚/ 点/ 的/ 合理/ 判断/ 等/ ;/ (/ 4/ )/ 随着/ 新/ 的/ GPGPU/ 微/ 体系结构/ 对/ 多/ kernel/ 并行执行/ 的/ 支持/ ,/ 通过/ 线程/ 调度/ 优化/ 更好/ 的/ 解决/ 多个/ kernel/ 混合/ 执行/ 产生/ 的/ 资源/ 竞争/ 等/ 问题/ ;/ (/ 5/ )/ 功耗/ 问题/ 仍然/ 是/ 影响/ GPGPU/ 发展/ 的/ 主要/ 瓶颈/ 之一/ ,/ 需/ 进一步/ 结合/ 线程/ 调度/ 技术/ 更好/ 的/ 为/ 功耗/ 优化/ 服务/ ;/ (/ 6/ )/ 结合/ 多种/ 线程/ 调度/ 优化/ 方法/ 的/ 优点/ 综合/ 考虑/ 影响/ GPGPU/ 性能/ 的/ 多种/ 因素/ ,/ 使/ 线程/ 调度/ 优化/ 方法/ 更加/ 合理/ 有效/ ./ 未来/ 以/ 进一步/ 提升/ GPGPU/ 的/ 性能/ 和/ 能效/ 为/ 主要/ 目标/ 的/ 线程/ 调度/ 优化/ 可以/ 在/ 以上/ 方面/ 做/ 进一步/ 的/ 研究/ ./ 致谢/ 感谢/ 何炎祥/ 教授/ 主持/ 的/ 博士/ 讨论/ 班上/ 各位/ 师生/ 所/ 发表/ 的/ 意见/ 和/ 建议/ ./ 

