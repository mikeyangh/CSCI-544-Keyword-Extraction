Page1BLAKE/ 算法/ 的/ 硬件/ 实现/ 研究/ 刘宗斌/ 荆/ 继武/ 夏鲁宁/ (/ 中国科学院/ 研究生院/ 信息安全/ 国家/ 重点/ 实验室/ 北京/ 100049/ )/ 摘要/ 随着/ 对/ MD5/ 和/ SHA1/ 攻击/ 方法/ 的/ 提出/ ,/ 美国/ 国家标准/ 技术/ 研究所/ (/ NIST/ )/ 组织/ 启动/ 了/ SHA/ -/ 3/ 的/ 征集/ 计划/ ,/ 目前/ 已/ 进入/ 第/ 3/ 轮/ ./ BLAKE/ 算法/ 进入/ 了/ 最后/ 一轮/ 竞赛/ ,/ 文中/ 首先/ 综述/ 了/ BLAKE/ 算法/ 从/ 提交/ 到/ 目前为止/ 在/ 硬件/ 评估/ 方面/ 的/ 状况/ ./ 在/ 此基础/ 上/ 优化/ 了/ BLAKE/ 压缩/ 函数/ 在/ FPGA/ 上/ 实现/ 的/ 关键/ 路径/ ,/ 并/ 在/ FPGA/ 平台/ 上/ 实现/ 了/ BLAKE/ 算法/ ./ 和/ 现有/ 的/ BLAKE/ 算法/ 在/ FPGA/ 上/ 实现/ 的/ 吞吐/ 率/ 相比/ ,/ 文中/ 实现/ 结构/ 的/ 吞吐/ 率/ 又/ 有/ 提升/ ./ 关键词/ SHA/ -/ 3/ ;/ BLAKE/ ;/ FPGA/ ;/ 散列/ 函数/ 1/ 引言/ Hash/ 函数/ (/ 也/ 叫/ 散列/ 函数/ )/ 可以/ 将/ 任意/ 长度/ 的/ 输入/ 经过/ 变化/ 以后/ 得到/ 固定/ 长度/ 的/ 输出/ ./ Hash/ 函数/ 的/ 这种/ 单向/ 特征/ 和/ 输出/ 数据/ 长度/ 固定/ 的/ 特征/ 使得/ 它/ 可以/ 生成/ 消息/ 或者/ 数据/ 块/ 的/ “/ 指纹/ ”/ ,/ 因此/ 在/ 密码/ 协议/ 、/ 数字签名/ 、/ 完整性/ 认证/ 、/ 数字签名/ 等/ 领域/ 有着/ 广泛/ 的/ 应用/ ./ 因为/ 这样/ 广泛/ 的/ 应用/ 需求/ ,/ Hash/ 算法/ 的/ 研究/ 和/ 标准/ 的/ 制定/ 一直/ 是/ 学术界/ 和/ 各个/ 国际标准化组织/ 研究/ 的/ 热点/ ./ 标准/ SHA/ -/ 0/ ,/ 在/ 不久/ 后/ 的/ 两年/ ,/ 新/ 的/ 标准/ SHA/ -/ 1/ 被/ 提出/ 来/ ,/ SHA/ -/ 1/ 改进/ 了/ 第/ 1/ 版/ 算法/ 中/ 的/ 一些/ 设计/ 问题/ ./ 直到/ 20/ 世纪末/ ,/ SHA/ -/ 1/ 还/ 没有/ 遇到/ 实质性/ 的/ 攻击/ ./ SHA/ -/ 1/ 被/ 广泛/ 地/ 应用/ 到/ 了/ TLS/ 、/ SSL/ 、/ IPSec/ 、/ SSH/ 、/ PGP/ 等/ 安全/ 应用/ 中/ ./ 跨入/ 21/ 世纪/ ,/ 随着/ 对/ MD5/ 和/ SHA/ -/ 1/ 碰撞/ 攻击/ 研究/ 的/ 深入/ [/ 1/ ]/ ,/ 美国/ 国家标准/ 技术/ 研究所/ (/ NIST/ )/ 于/ 2002/ 年/ 推出/ 了/ SHA/ -/ 2/ 的/ 标准/ ,/ 到/ 目前为止/ 还/ 没有/ 行之有效/ 的/ 攻击/ 方案/ ./ 在/ SHA/ -/ 2/ 应用/ 几年/ 之后/ ,/ NIST/ 又/ 推出/ 了/ SHA/ -/ 3/ [/ 2/ ]/ 的/ 征集/ 计划/ ,/ 用来/ 扩展/ SHA/ -/ 2/ 的/ 标准/ ./ 截至/ 2008/ 年/ 8/ 月/ 31/ 号/ ,/ NIST/ 收到/ 64/ 份/ 算法/ ,/ 其中/ 51/ 个/ 算法/ 进入/ 了/ 第/ 1/ 轮/ 的/ 评测/ ./ 经过/ 第/ 1/ 轮/ 的/ 评测/ ,/ 2009/ 年/ 6/ 月/ 在/ 1993/ 年/ ,/ NIST/ 公布/ 了/ 第/ 1/ 版/ 的/ Hash/ 算法/ Page2/ 只有/ 14/ 个/ 算法/ 进入/ 了/ 第/ 2/ 轮/ 的/ 评测/ ./ 目前/ 正在/ 进行/ 第/ 3/ 轮/ 的/ 算法/ 评测/ ,/ 有/ 5/ 个/ 算法/ 进入/ 了/ 第/ 3/ 轮/ 的/ 评测/ ,/ 第/ 3/ 轮/ 也/ 是/ 最后/ 一轮/ 的/ 评测/ ,/ 最终/ 的/ SHA/ -/ 3/ 算法/ 将/ 从/ 其中/ 产生/ ,/ 这/ 5/ 个/ 算法/ 分别/ 为/ BLAKE/ 、/ Grstl/ 、/ Keccak/ 、/ JH/ 和/ Skein/ ./ 对于/ SHA/ -/ 3/ 算法/ ,/ 除了/ 安全性/ 上要/ 保证/ 高于/ SHA/ -/ 2/ 外/ ,/ 还/ 很/ 关注/ 算法/ 的/ 效率/ ,/ 算法/ 一方面/ 要/ 能够/ 应用/ 在/ 海量/ 数据/ 的/ 高速/ 处理/ 环境/ 当中/ ,/ 也/ 要/ 能够/ 应用/ 到/ 资源/ 运行/ 环境/ 受限/ 的/ 嵌入式/ 系统/ 当中/ ,/ 要求/ 算法/ 具备/ 较/ 高/ 的/ 灵活性/ ,/ 能够/ 满足/ 更加/ 广泛/ 的/ 应用/ 需求/ ./ 本文/ 研究/ 的/ BLAKE/ 算法/ 是/ SHA/ -/ 3/ 评测/ 的/ 最后/ 一轮/ 5/ 个/ 候选/ 算法/ 之一/ ,/ 具有/ 比较/ 强/ 的/ 代表性/ ./ 在/ SHA/ -/ 3/ 评测/ 标准/ 中/ ,/ 硬件/ 实现/ 是/ 评价/ 算法/ 有效性/ 和/ 实用性/ 的/ 关键/ 指标/ 之一/ ./ 针对/ ASIC/ 平台/ ,/ 学者/ 们/ 已经/ 提出/ 若干/ 实现/ 方案/ [/ 2/ -/ 5/ ]/ ./ 针对/ 目前/ 应用/ 比较/ 广/ 的/ 可编程/ 硬件平台/ FPGA/ ,/ 学者/ 们/ 也/ 从/ 不同/ 的/ 角度/ 对/ 算法/ 的/ 性能/ 和/ 资源/ 消耗/ 等/ 方面/ 给出/ 了/ 评估/ [/ 6/ -/ 13/ ]/ ,/ 本文/ 将/ 在/ 后续/ 章节/ 深入分析/ 目前/ 的/ FPGA/ 实现/ 方案/ ,/ 并/ 在/ 此基础/ 上/ ,/ 优化/ BLAKE/ 算法/ 中/ 压缩/ 函数/ 的/ 关键/ 路径/ ,/ 基于/ 改进/ 的/ 压缩/ 函数/ 结构/ 在/ FPGA/ 平台/ 上/ 实现/ 了/ BLAKE/ 算法/ ,/ 达到/ 更/ 高/ 的/ 吞吐/ 率/ ./ 本文/ 第/ 2/ 节/ 主要/ 对/ BLAKE/ 算法/ 结构/ 进行/ 简单/ 的/ 介绍/ ;/ 第/ 3/ 节/ 主要/ 对/ 目前/ 针对/ BLAKE/ 算法/ 的/ 硬件/ 实现/ 做/ 简要/ 的/ 综述/ ;/ 第/ 4/ 节/ 描述/ 本文/ 给出/ 的/ FPGA/ 的/ 实现/ 方法/ 和/ 实现/ 架构/ ;/ 第/ 5/ 节对/ 分析/ 结果/ 进行/ 比较/ 和/ 讨论/ ;/ 最后/ 一节/ 总结/ 全文/ ./ 2BLAKE/ 简介/ 2.1/ BLAKE/ 简介/ BLAKE/ [/ 3/ ]/ 是/ AumassonJean/ -/ Philippe/ 等/ 学者/ 设计/ 的/ SHA/ -/ 3/ 的/ 候选/ 算法/ ,/ 该/ 算法/ 已经/ 顺利/ 进入/ 了/ 第/ 3/ 轮/ 的/ 评测/ ,/ 成为/ SHA/ -/ 3/ 最后/ 5/ 个/ 候选/ 算法/ 之一/ ./ 这/ 几位/ 学者/ 2008/ 年/ 首次/ 提交/ 该/ 算法/ ,/ 经过/ 评估/ 后/ ,/ 于/ 2011/ 年/ 1/ 月/ 提交/ 修正版/ ./ BLAKE/ 的/ 设计者/ 没有/ 从/ 基础/ 的/ 架构/ 开始/ 设计/ 算法/ ,/ 而是/ 采用/ 并/ 改进/ 了/ 目前/ 研究/ 比较/ 成熟/ 的/ 结构/ HAIFA/ 和/ ChaCha/ ,/ 综合/ 其/ 优点/ 而/ 设计/ 了/ 新一代/ 的/ Hash/ 算法/ ./ 这样/ 的/ 设计/ 结构/ ,/ 一方面/ 使得/ 算法/ 的/ 基本/ 结构/ 是/ 经过/ 大量/ 论证/ 的/ 安全/ 的/ 结构/ ;/ 另一方面/ ,/ 对/ 密码/ 分析/ 者/ 而言/ ,/ 可以/ 在/ 原有/ 的/ 工作/ 基础/ 上/ 进一步/ 对/ 采用/ 的/ 结构/ 的/ 安全性/ 进行/ 分析/ ./ 因此/ ,/ 有/ 众多/ 理论/ 攻击/ 的/ 方案/ 提出/ 来/ 讨论/ BLAKE/ 的/ 安全性/ [/ 15/ ]/ ./ BLAKE/ 设计者/ 除了/ 考虑/ NIST/ 征集/ 算法/ 时/ 提出/ 的/ 具体/ 要求/ 外/ ,/ 还/ 考虑/ 了/ 算法/ 的/ 其它/ 方面/ ,/ 例如/ :/ 算法/ 是/ 可/ 并行/ 的/ ,/ 算法/ 能够/ 很/ 好/ 地/ 在/ 资源/ 和/ 速度/ 上/ 取得/ 平衡/ ,/ 在/ 不同/ 的/ 应用环境/ 中/ ,/ 算法/ 能够/ 以/ 不同/ 的/ 体积/ 和/ 速度/ 呈现/ ,/ 这样/ 的/ 特点/ 很/ 好/ 地/ 扩展/ 了/ 算法/ 的/ 应用领域/ ./ 尤其/ 是/ ,/ 该/ 特点/ 使得/ 算法/ 更/ 容易/ 部署/ 到/ 轻量级/ 的/ 嵌入式/ 环境/ 当中/ ./ BLAKE/ 算法/ ①/ 是/ 一个/ Hash/ 函数/ 系/ ,/ 包括/ 了/ BLAKE/ -/ 28/ 、/ BLAKE/ -/ 32/ 、/ BLAKE/ -/ 48/ 和/ BLAKE/ -/ 64/ ,/ 如表/ 1/ 所示/ ./ 算法/ 字/ 宽/ 消息/ 分块/ 摘要/ 参数/ BLAKE/ -/ 2832/ </ 264512224128BLAKE/ -/ 3232/ </ 264512256128BLAKE/ -/ 4864/ </ 21281024384256BLAKE/ -/ 6464/ </ 212810245122562.2/ BLAKE/ -/ 32/ 算法/ 描述/ 本节/ 以/ BLAKE/ -/ 32/ 为例/ 对/ BLAKE/ 算法/ 进行/ 简单/ 的/ 介绍/ ,/ 其它/ BLAKE/ 函数/ 和/ 算法/ 的/ 具体/ 信息/ 可以/ 参见/ 算法/ 说明/ 文档/ ①/ ./ BLAKE/ -/ 32/ 算法/ 操作/ 字/ 是/ 32/ -/ bit/ ,/ 返回/ 32/ 字节/ 的/ 散列/ 结果/ ./ BLAKE/ 算法/ 只用/ 到/ 了/ 模/ 232/ 的/ 加法/ 、/ 异或/ 运算/ 和/ 循环/ 移位/ 操作/ ,/ 而/ 这些/ 运算/ 无论/ 在/ 硬件/ 和/ 软件/ 上/ 都/ 比较/ 容易/ 实现/ ./ 和/ 其它/ 的/ Hash/ 函数/ 类似/ ,/ BLAKE/ 算法/ 的/ 第/ 1/ 步/ 也/ 是/ 对/ 散列/ 的/ 数据/ 进行/ 分块/ 与/ 填充/ ./ 完成/ 分块/ 步骤/ 后/ ,/ 就是/ 具体/ 的/ 操作/ ,/ 下面/ 将/ 具体/ 描述/ BLAKE/ 算法/ 的/ 执行/ 过程/ ./ 由八组/ 向量/ 构成/ :/ 常量/ (/ Constant/ )/ ./ BLAKE/ -/ 256/ 的/ 初始化/ 向量/ 和/ SHA/ -/ 256/ 一致/ ,/ 犐/ 犞/ 0/ =/ 6A09E667/ ,/ 犐/ 犞/ 1/ =/ BB67AE85/ ,/ 犐/ 犞/ 2/ =/ 3C6EF372/ ,/ 犐/ 犞/ 3/ =/ A54FF53A/ ,/ 犐/ 犞/ 4/ =/ 510E527F/ ,/ 犐/ 犞/ 5/ =/ 9B05688C/ ,/ 犐/ 犞/ 6/ =/ 1F83D9AB/ ,/ 犐/ 犞/ 7/ =/ 5BE0CD19/ ./ 除此之外/ ,/ BLAK/ -/ 256/ 还/ 使用/ 了/ 16/ 个/ 常量/ :/ c0/ =/ 243F6A88/ ,/ c1/ =/ 85A308D3/ ,/ c2/ =/ 13198A2E/ ,/ c3/ =/ 03707344/ ,/ c4/ =/ A4093822/ ,/ c5/ =/ 299F31D0/ ,/ c6/ =/ 082EFA98/ ,/ c7/ =/ EC4E6C89/ ,/ c8/ =/ 452821E6/ ,/ c9/ =/ 38D01377/ ,/ c10/ =/ BE5466CF/ ,/ c11/ =/ 34E90C6C/ ,/ c12/ =/ C0AC29B7/ ,/ c13/ =/ C97C50DD/ ,/ c14/ =/ 3F84D5B5/ ,/ c15/ =/ B5470917/ ./ ①/ BLAKE/ 算法/ 的/ 描述/ 文档/ SHA/ -/ 3proposalBLAKE/ ./ http/ :/ Page3/ 成/ ,/ 分别/ 是/ 压缩/ 函数/ (/ CompressionFunction/ )/ ./ BLAKE/ -/ 32/ 的/ 压缩/ 函数/ 的/ 输入/ 由/ 4/ 组/ 变量/ 构/ 序列/ 输入/ :/ h/ =/ h0/ ,/ …/ ,/ h7/ ;/ 消息/ 块/ :/ m/ =/ m0/ ,/ …/ ,/ m15/ ;/ 参数/ :/ s/ =/ s0/ ,/ …/ ,/ s7/ ;/ 计数器/ :/ t/ =/ t0/ ,/ t1/ ./ 压缩/ 函数/ 的/ 输出/ 是/ 新/ 1/ 轮/ 的/ h/ :/ 初始化/ (/ Initialization/ )/ ./ 16/ 个/ 初始化/ 变量/ v0/ ,/ …/ ,/ v15/ ,/ 采用/ 如下/ 的/ 算法/ 初始化/ :/ v0v1v2v3/ 烄/ v4v5v6v7v8v9v10v11v12v13v14v/ 烆/ 其中/ 初始化/ 变量/ 构成/ 了/ 一个/ 4/ ×/ 4/ 的/ 矩阵/ ./ 随后/ 的/ 算法/ 的/ 数据/ 变换/ 就是/ 针对/ 这个/ 数据/ 矩阵/ 的/ 变换/ ./ 轮/ 函数/ (/ RoundFunction/ )/ ./ 在/ v/ 初始化/ 以后/ ,/ 压缩/ 函数/ 需要/ 循环/ 迭代/ 14/ 轮/ ../ 图/ 1G/ 函数/ 结构/ 示意图/ 整个/ 轮/ 函数/ 的/ 过程/ 可以/ 描述/ 为/ [/ 4/ ]/ 每轮/ 需要/ 计算/ :/ G0/ (/ v0/ ,/ v4/ ,/ v8/ ,/ v12/ )/ ,/ G1/ (/ v1/ ,/ v5/ ,/ v9/ ,/ v13/ )/ ,/ G2/ (/ v2/ ,/ v6/ ,/ v10/ ,/ v14/ )/ ,/ G3/ (/ v3/ ,/ v7/ ,/ v11/ ,/ v15/ )/ ,/ G4/ (/ v0/ ,/ v5/ ,/ v10/ ,/ v15/ )/ ,/ G5/ (/ v1/ ,/ v6/ ,/ v11/ ,/ v12/ )/ ,/ G6/ (/ v2/ ,/ v7/ ,/ v8/ ,/ v13/ )/ ,/ G7/ (/ v3/ ,/ v4/ ,/ v9/ ,/ v14/ )/ ./ 每轮/ Gi/ (/ a/ ,/ b/ ,/ c/ ,/ d/ )/ 是/ 如下/ 所示/ 的/ 变换/ :/ 其中/ G0/ ,/ G1/ ,/ G2/ ,/ G3/ 可以/ 并行计算/ ,/ 因为/ 每个/ G/ 函数/ 分别/ 计算/ V/ 矩阵/ 的/ 一列/ ,/ 称/ 这步/ 计算/ 为列/ 变换/ 步骤/ (/ columnstep/ )/ ./ 同理/ ,/ 剩下/ 的/ G/ 函数/ 分别/ 计算/ 不同/ 斜线/ 上/ 的/ 值/ ,/ 这步/ 也/ 叫做/ 对角线/ 变换/ (/ diagonalstep/ )/ ./ 因此/ ,/ 这些/ G/ 函数/ 也/ 可以/ 并行/ 的/ 计算/ ./ G/ 函数/ 的/ 示意图/ 以及/ 列/ 变换/ 和/ 对角线/ 变换/ 步骤/ 如图/ 1/ 和/ 图/ 2/ 所示/ ./ H0/ ·/ ·/ =/ IVFor/ (/ i/ =/ 0/ ;/ i/ </ N/ ;/ i/ ++/ )/ BEGINhi/ +/ 1/ =/ compress/ (/ hi/ ,/ mi/ ,/ s/ ,/ ti/ )/ END/ 终止/ 步骤/ ./ 当轮/ 迭代/ 计算/ 结束/ 后/ ,/ 最终/ 的/ h/ 可/ 从/ 下面/ 的/ 式子/ 获得/ Page4/ 前面/ 简要地/ 描述/ 了/ BLAKE/ 算法/ ./ BLAKE/ 算法/ 结构/ 简单/ ,/ 易于/ 实现/ ,/ 算法/ 在/ 设计/ 压缩/ 函数/ 的/ 时候/ 也/ 特别/ 考虑/ 了/ 硬件/ 实现/ 的/ 特点/ 和/ 需求/ ,/ 设计/ 了/ 可以/ 灵活/ 扩展/ 实现/ 的/ 轮/ 函数/ ,/ 很/ 好/ 地/ 为/ 硬件/ 灵活/ 实现/ 提供/ 了/ 可能性/ ./ 3BLAKE/ 算法/ 硬件/ 实现/ 现状/ 目前/ ,/ 对于/ 密码/ 算法/ 的/ 硬件/ 评估/ 有/ 两种/ 评估/ 平台/ ,/ 一是/ ASIC/ 的/ 评估/ 平台/ ,/ 二是/ 低成本/ 的/ FPGA/ 评估/ 平台/ ./ FPGA/ 相比/ ASIC/ 而言/ ,/ 可编程/ ,/ 能够/ 反复/ 擦写/ ,/ 这样/ 的/ 平台/ 更加/ 适合/ 于/ 算法/ 的/ 前期/ 验证/ 测试/ 和/ 评估/ ./ 所谓/ FPGA/ (/ FieldProgrammableGateArray/ )/ ,/ 即/ 现场/ 可编程/ 门阵列/ ,/ 它/ 是/ 在/ PAL/ 、/ GAL/ 、/ CPLD/ 等/ 可编程/ 器件/ 的/ 基础/ 上/ 进一步/ 发展/ 的/ 新一代/ 可编程/ 逻辑/ 器件/ ./ 它/ 是/ 作为/ 专用/ 集成电路/ (/ ASIC/ )/ 领域/ 中/ 的/ 一种/ 半/ 定制/ 电路/ 而/ 出现/ 的/ ,/ 既/ 解决/ 了/ 定制/ 电路/ 高/ 成本/ 的/ 不足/ ,/ 又/ 克服/ 了/ 原有/ 可编程/ 器件/ 门电路/ 数/ 有限/ 的/ 缺点/ ./ 目前/ 最大/ 的/ FPGA/ 器件/ 已经/ 有/ 上/ 千万/ 门/ 的/ 容量/ ./ 而且/ FPGA/ 在/ 内部/ 集成/ 了/ 嵌入式/ 处理器/ 、/ DSP/ 、/ 乘法器/ 、/ RAM/ 等/ 常用/ 单元/ 的/ 固件/ 结构/ ./ 这样/ 一方面/ 可以/ 通过/ 这些/ 固有/ 的/ 硬件/ 单元/ 简化/ 系统/ 的/ 设计/ 并/ 节省/ 可编程/ 的/ 逻辑/ 资源/ ;/ 另一方面/ 在/ 系统/ 的/ 关键/ 路径/ 中/ 使用/ 这些/ 固有/ 的/ 资源/ 后/ ,/ 可以/ 提高/ 处理/ 的/ 速度/ ./ 这些/ 特性/ 决定/ 了/ FPGA/ 非常适合/ 于/ 算法/ ASIC/ 设计/ 的/ 前期/ 开发/ 验证/ ,/ 或者/ 以后/ 直接/ 作为/ FPGA/ 的/ IP/ 核来/ 使用/ ./ 基于/ 这样/ 的/ 考虑/ ,/ 本文/ 选用/ 了/ FPGA/ 作为/ 算法/ 测试/ 验证/ 的/ 硬件/ 评估/ 平台/ ./ 一般/ 以/ FPGA/ 作为/ 算法/ 的/ 评估/ 平台/ ,/ 主要/ 使用/ 3/ 个/ 参数/ 对比/ 算法/ 的/ 性能/ ./ 一是/ 吞吐/ 率/ ,/ 二是/ 资源/ 消耗/ ,/ 三是/ 吞吐/ 率/ 和/ 资源/ 消耗/ 的/ 比值/ ./ 下面/ 对/ 前面/ 两个/ 参数/ 做/ 简单/ 的/ 解释/ ./ 在/ 硬件/ 实现/ 中/ ,/ 吞吐/ 率/ (/ Throughput/ )/ 按照/ 下面/ 的/ 公式/ 计算/ [/ 11/ ]/ :/ T/ =/ Bitsinamessageblock/ ×/ FmaxBitsinamessageblock/ 指/ 每次/ 处理/ 数据/ 块/ 的/ 比特/ 数/ ,/ 也/ 就是/ 系统/ 每次/ 能够/ 处理/ 的/ 数据/ 块/ 的/ 大小/ ./ Fmax/ 指/ 系统/ 能够/ 工作/ 的/ 最大/ 频率/ ./ 毕/ 每/ 一个/ 数据/ 分块/ 需要/ 消耗/ 的/ 系统/ 周期/ 数/ ./ Clockcyclespermessageblock/ 指/ 系统/ 处理/ 完/ 由于/ 算法/ 固定/ 后/ ,/ 处理/ 的/ 数据/ 单元/ 大小/ 固定/ ,/ 所以/ 优化/ 主要/ 集中/ 在/ 系统/ 工作频率/ 和/ 处理/ 数据/ 块/ 所/ 需要/ 的/ 周期/ 数/ 两个/ 方向/ ./ 对于/ 资源/ 消耗/ ,/ 在/ FPGA/ 平台/ ,/ 主要/ 指标/ 是/ 算法/ 结构/ 占用/ 的/ FPGA/ 的/ 基本/ 单元/ 的/ 个数/ ./ 例如/ 在/ XilinxFPGA/ 中/ ,/ 最/ 基本/ 的/ 单元/ Slice/ ,/ 而/ 目前/ 最新/ 的/ FPGA/ 中/ 也/ 引入/ 了/ 新/ 的/ 固有/ 硬件资源/ ,/ 如/ 专用/ 乘法器/ 、/ BlockRAM/ 、/ FIFO/ 等/ ,/ 在/ 算法/ 结构/ 中/ 使用/ 这些/ 固有/ 的/ 资源/ 会/ 大量/ 节省/ Slice/ 的/ 数量/ ,/ 也/ 会/ 提升/ 系统/ 的/ 最大/ 工作频率/ ./ 所以/ 目前/ 部分/ 文章/ 也/ 使用/ FPGA/ 固有/ 的/ 计算资源/ 来/ 提升/ 系统/ 的/ 性能/ ./ 另外/ 一个/ 针对/ 面积/ 优化/ 的/ 思路/ 是/ 充分发挥/ FPGA/ 里面/ 固有/ 资源/ 的/ 特点/ ./ 例如/ ,/ XilinxFPGA/ 的/ LUT/ 早期/ 是/ 四/ 输入/ 的/ ,/ Virtex5/ 之后/ LUT/ 使用/ 了/ 六/ 输入/ ./ 四/ 输入/ 的/ LUT/ 可以/ 实现/ 4/ 个/ 变量/ 的/ 全/ 函数/ ,/ 六/ 输入/ 的/ LUT/ 可以/ 实现/ 六/ 输入/ 的/ 全/ 函数/ ./ 以四/ 输入/ 的/ LUT/ 为例/ ,/ 如果/ 能/ 将/ 算法/ 中/ 大于/ 四/ 输入/ 的/ 函数/ 经过/ 逻辑/ 变换/ 减少/ 变量/ 的/ 个数/ 或者/ 拆/ 分成/ 四/ 输入/ 的/ 形式/ ,/ 这样/ 就/ 会/ 充分/ 地/ 发挥/ LUT/ 的/ 作用/ ,/ 一方面/ 节省/ LUT/ 资源/ 的/ 消耗/ ,/ 另外/ 一方面/ 由于/ 减少/ 了/ 级联/ 的/ LUT/ 的/ 数量/ ,/ 可以/ 提高/ 系统/ 的/ 运行/ 速度/ ./ 总之/ ,/ 在/ 深入/ 理解/ FPGA/ 底层/ 资源/ 的/ 基础/ 上/ ,/ 调整/ 算法/ 的/ 实现/ 结构/ 形式/ ,/ 提高/ 对/ 资源/ 的/ 利用率/ ,/ 从而/ 降低/ 资源/ 消耗/ 和/ 提高/ 系统/ 的/ 工作频率/ ./ 目前/ 针对/ BLKAE/ 算法/ 的/ 硬件/ 实现/ 有/ 两个/ 方向/ ,/ 一个/ 是/ 通过/ 并行计算/ 最大/ 限度/ 地/ 提高/ 算法/ 的/ 吞吐/ 率/ ,/ 发挥/ 算法/ 的/ 最大/ 的/ 计算/ 效能/ ./ 另外/ 一个/ 方向/ 是/ 用/ 尽量少/ 的/ 硬件资源/ 来/ 取得/ 最优/ 的/ 面积/ 利用率/ ,/ 让/ 算法/ 能够/ 消耗/ 最少/ 的/ 硬件资源/ ,/ 并且/ 取得/ 合适/ 的/ 吞吐/ 率/ ./ 这里/ 首先/ 分析/ BLAKE/ 算法/ 在/ 硬件/ 实现/ 中/ 的/ 关键/ 路径/ ,/ 即/ 最为/ 耗时/ 的/ 步骤/ ,/ 然后/ 综述/ 目前/ 各/ 方案/ 针对/ 关键/ 路径/ 提出/ 的/ 优化/ 方案/ 和/ 各自/ 的/ 优缺点/ ./ 对于/ 初始化/ 步骤/ ,/ BLAKE/ 使用/ 了/ 异或/ 运算/ 和/ 赋值/ 操作/ ,/ 这些/ 运算/ 在/ 整个/ BLAKE/ 算法/ 实现/ 过程/ 中是/ 耗时/ 最少/ 的/ 运算/ ,/ 资源/ 消耗/ 相对/ 于/ 其它/ 的/ 运算/ 模块/ 也/ 比较/ 少/ ./ BLAKE/ 算法/ 的/ 终止/ 步骤/ 和/ 初始化/ 步骤/ 类似/ ,/ 只用/ 到/ 了/ 异或/ 运算/ ,/ 所以/ 优化/ 的/ 方法/ 和/ 初始/ 过程/ 类似/ ./ 就/ 整个/ 算法/ 来看/ ,/ 最为/ 复杂/ 和/ 耗时/ 的/ 操作/ 就是/ 中间/ 的/ 轮/ 函数/ ,/ 首先/ 轮/ 函数/ 需要/ 十几/ 轮/ 的/ 迭代/ 计算/ ,/ 再次/ ,/ 每轮/ 运算/ 使用/ 的/ 压缩/ 函数/ 也/ 是/ 耗时/ 、/ 耗/ 资源/ 的/ Page5/ 关键步骤/ ./ 所以/ ,/ 目前/ 大多数/ 的/ 文章/ 的/ 实现/ 和/ 优化/ 方案/ 都/ 集中/ 在/ 轮/ 函数/ 的/ 处理过程/ 中/ ./ 到/ 目前为止/ 关于/ BLAKE/ 算法/ 的/ 硬件/ 评估/ 最为/ 全面/ 的/ 是/ 由/ 算法/ 设计者/ 在/ 提交/ 的/ 算法/ 设计/ 报告/ ①/ 中/ 给出/ 的/ 算法/ 的/ 硬件/ 评估/ 部分/ ./ 设计者/ 对/ BLAKE/ 算法/ 的/ 硬件/ 效能/ 分别/ 从/ ASIC/ 和/ FGPA/ 两个/ 平台/ 给出/ 了/ 设计方案/ 并/ 提出/ 了/ 优化/ 的/ 思路/ ./ 这里/ 首先/ 详细/ 地/ 阐述/ 算法/ 设计者/ 提出/ 的/ 实现/ 和/ 优化/ 思路/ ./ 根据/ BLAKE/ 算法/ 本身/ 的/ 结构/ ,/ 设计者/ 给出/ 了/ 通用/ 的/ 硬件/ 设计/ 架构/ ./ 架构/ 主要/ 由/ 两大/ 模块/ 构成/ ./ 第/ 1/ 个/ 主体/ 模块/ 是/ 初始化/ 和/ 终止/ 模块/ ,/ 从/ 算法/ 的/ 描述/ 可以/ 看出/ ,/ 这/ 两个/ 模块/ 的/ 实现/ 可由纯/ 组合/ 逻辑/ 实现/ ./ 算法/ 在/ 这里/ 的/ 优化/ 空间/ 很小/ ,/ 所以/ 算法/ 设计者/ 没有/ 给出/ 这部分/ 的/ 优化/ 方案/ ./ 第/ 2/ 个/ 主要/ 模块/ 是/ 轮/ 函数/ ,/ 轮/ 函数/ 主要/ 是/ 由/ 压缩/ 函数/ 构成/ ./ 算法/ 作者/ 从/ 算法/ 设计/ 的/ 角度/ 出发/ ,/ 给出/ 了/ 4/ 种/ 架构/ 来/ 实现/ 轮/ 函数/ ,/ 主要/ 的/ 区别/ 是/ 在/ 一轮/ 运算/ 中/ 并行/ 实现/ 的/ 压缩/ 函数/ G/ 的/ 数目/ ./ 报告/ 中/ 给出/ 了/ 同时/ 实现/ 8G/ 、/ 4G/ 、/ 1G/ 和/ 1/ // 2G/ 压缩/ 函数/ 的/ 评估/ 结果/ ,/ 也/ 就是/ 在/ 一次/ 轮/ 函数/ 的/ 迭代/ 过程/ 中/ 计算/ 几次/ 压缩/ 函数/ ./ 从/ 第/ 2/ 节对/ 算法/ 的/ 描述/ 可以/ 看出/ ,/ 所有/ 的/ 列/ 变换/ 可以/ 并行执行/ ,/ 所有/ 的/ 对角线/ 变换/ 也/ 可以/ 同时/ 执行/ ./ 如果/ 采用/ 8G/ 的/ 模式/ ,/ 轮/ 函数/ 的/ 一轮/ 的/ 路径/ 就会/ 变长/ ,/ 因为/ 对角线/ 变换/ 必须/ 等到/ 列/ 变换/ 结束/ 后/ 才能/ 执行/ ,/ 所以/ 采用/ 8G/ 结构/ 后/ ,/ 系统/ 的/ 工作频率/ 会/ 降低/ ,/ 而且/ 消耗/ 的/ 硬件资源/ 随之/ 变大/ ./ 4G/ 结构/ 使用/ 了/ 4/ 个/ 压缩/ 函数/ 分/ 两次/ 完成/ 列/ 变换/ 和/ 对角线/ 变换/ ./ 1G/ 结构/ 需要/ 循环/ 调用/ 8/ 次/ 一个/ 压缩/ 函数/ G/ 完成/ 列/ 变换/ 和/ 对角线/ 变换/ ./ 为了/ 进一步/ 地/ 节省/ 资源/ ,/ 作者/ 还/ 给出/ 了/ 1/ // 2G/ 的/ 结构/ ./ 通过/ 压缩/ 函数/ 的/ 计算公式/ 可以/ 看出/ ,/ 一次/ 压缩/ 函数/ 的/ 计算/ 可以/ 通过/ 同样/ 的/ 电路/ 复用/ 两次/ 完成/ ./ 通过/ 复用/ 压缩/ 函数/ ,/ 可以/ 节省/ 压缩/ 函数/ 消耗/ 的/ 硬件资源/ ./ 并行/ 实现/ 的/ 压缩/ 函数/ 越/ 多/ ,/ 算法/ 处理/ 数据/ 的/ 吞吐/ 率越/ 大/ ,/ 但/ 由于/ 需要/ 多个/ 压缩/ 函数/ 同时/ 工作/ ,/ 系统/ 消耗/ 的/ 硬件资源/ 也/ 随之/ 上升/ ;/ 反之/ ,/ 若/ 算法/ 减少/ 并行/ 实现/ 的/ 压缩/ 函数/ 的/ 数量/ ,/ 虽然/ 减少/ 了/ 系统对/ 硬件资源/ 的/ 消耗/ ,/ 但/ 算法/ 的/ 效能/ 也/ 随之/ 降低/ ./ 相比/ 高度/ 的/ 并行/ 结构/ ,/ 使用/ 压缩/ 函数/ 越/ 少/ ,/ 系统/ 的/ 调度/ 和/ 控制/ 会越/ 复杂/ ,/ 这/ 意味着/ 系统/ 需要/ 更/ 多/ 的/ 逻辑/ 资源/ 完成/ 调度/ 工作/ ./ 从/ 算法/ 作者/ 给出/ 的/ 评估/ 结果/ 看/ ,/ 如果/ 用/ 系统/ 的/ 吞吐/ 率/ 和/ 消耗/ 的/ 硬件资源/ 的/ 比值/ 来/ 描述/ 系统/ 的/ 效能/ ,/ 4G/ 结构/ 表现/ 出/ 了/ 最好/ 的/ 系统/ 效能/ ,/ 而/ 8G/ 结构/ 达到/ 了/ 最高/ 的/ 吞吐/ 率/ ./ CHES2010/ 国际/ 会议/ 的/ 文章/ [/ 3/ ]/ 在/ ASIC/ 平台/ 上/ 评估/ 了/ 通过/ SHA/ -/ 3/ 第/ 1/ 轮/ 筛选/ 的/ 14/ 个/ Hash/ 算法/ 中/ 的/ 12/ 个/ ./ 该/ 文章/ 设计/ 了/ 统一/ 评估/ 标准/ ,/ 并/ 在/ 这个/ 标准/ 下/ 对/ 所选/ 的/ 12/ 个/ 算法/ 给出/ 了/ 评估/ 报告/ ./ 针对/ BLAKE/ 算法/ ,/ 文章/ 使用/ 的/ 架构/ 是/ 8G/ 结构/ 和/ 1G/ 结构/ ,/ 文章/ 给出/ 了/ ASIC/ 工艺/ 下/ ,/ 各个/ 算法/ 在/ 高/ 、/ 低/ 吞吐/ 率/ 结构/ 下/ 的/ 性能/ 比较/ ./ 而/ 文献/ [/ 4/ ]/ 专门/ 针对/ BALKE/ 算法/ 在/ ASIC/ 平台/ 上/ 做/ 了/ 详细/ 的/ 评估/ 与/ 实现/ ,/ 文章/ 扩展/ 了/ 算法/ 作者/ 提出/ 的/ 方案/ ,/ 提出/ 了/ 两种/ 高速/ 实现/ 的/ 方案/ ,/ 但是/ 基本/ 的/ 架构/ 依然/ 是/ 8G/ 和/ 4G/ 结构/ ./ 文章/ 在/ 设计/ 压缩/ 函数/ 的/ 结构/ 的/ 时候/ 考虑/ 了/ 消息/ 和/ 常数/ 的/ 异或/ 值/ 可以/ 预计/ 算/ 的/ 特点/ ,/ 对/ 关键/ 路径/ 做/ 了/ 优化/ ,/ 比/ 算法/ 设计者/ 给出/ 的/ 实现/ 方案/ 少/ 了/ 一个/ 32/ 位/ 加法/ 的/ 延时/ ./ 文章/ 分别/ 在/ 0.18/ μ/ m/ 、/ 0.13/ μ/ m/ 和/ 90nm/ 的/ ASIC/ 工艺/ 下/ 评估/ 了/ 优化/ 后/ 两种/ 架构/ 的/ 吞吐/ 率/ 和/ 资源/ 消耗/ ./ 文献/ [/ 14/ ]/ 给出/ 了/ 目前/ 在/ FPGA/ 平台/ 上/ 最为/ 小巧/ 的/ BLAKE/ 的/ 设计方案/ ,/ 相比/ 于/ 目前/ 其它/ 的/ 实现/ 方案/ ,/ 作者/ 在/ 深入分析/ FPGA/ 底层/ 结构/ 的/ 基础/ 上/ ,/ 调整/ 了/ 压缩/ 函数/ 的/ 实现/ 结构/ ,/ 使得/ FPGA/ 资源/ 的/ 利用率/ 最大/ ./ 对于/ 控制电路/ ,/ 文章/ 的/ 思想/ 是/ 通过/ FPGA/ 的/ 固有/ 资源/ 双口/ ROM/ 来/ 存储/ 控制指令/ ,/ 代替/ 了/ 传统/ 设计/ 中/ 使用/ 逻辑/ 资源/ 搭建/ 状态机/ 控制/ 计算/ 的/ 方案/ ,/ 从而/ 大幅/ 降低/ 了/ 系统控制/ 单元/ 对/ FPGA/ 可/ 配置/ 逻辑/ 资源/ 的/ 消耗/ ./ 主要/ 通过/ 这/ 两种/ 方法/ ,/ 使得/ 文章/ 设计/ 的/ 架构/ 比/ 其他/ 的/ 一些/ 实现/ 节省/ 了/ 大约/ 90/ %/ 的/ 可/ 配置/ 逻辑/ 资源/ ./ 由于/ 复用/ 压缩/ 函数/ ,/ 提高/ 了/ 轮/ 函数/ 计算/ 需要/ 的/ 迭代/ 次数/ ,/ 降低/ 了/ 系统/ 的/ 吞吐/ 率/ ,/ 但/ 在/ 轮/ 函数/ 的/ 设计/ 上/ 作者/ 利用/ 了/ 流水线/ 的/ 结构/ ,/ 从而/ 提高/ 了/ 系统/ 的/ 工作频率/ ,/ 使得/ 系统/ 的/ 吞吐/ 率/ 并/ 没有/ 降低/ ,/ 仍/ 有/ 225Mbps/ ./ 这/ 篇文章/ 是/ 目前/ 吞吐/ 率/ 和/ 消耗/ 资源/ 的/ 比值/ 最高/ 的/ 设计/ 结构/ ./ 文献/ [/ 7/ ]/ 对/ BLAKE/ 算法/ 以/ FPGA/ 为/ 硬件平台/ ,/ 分别/ 实现/ 了/ BLAKE/ -/ 28/ 、/ BLAKE/ -/ 32/ 、/ BLAKE/ -/ 48/ 和/ BLAKE/ -/ 64/ 并/ 对/ 其/ 实现/ 的/ 算法/ 在/ 吞吐/ 率/ 、/ 资源/ 消耗/ 和/ 最大/ 工作频率/ 方面/ 做/ 了/ 横向/ 比较/ ./ 文章/ 实现/ 的/ 算法/ 结构/ 依然/ 采用/ 4G/ 结构/ ,/ 而/ 文章/ 实现/ 的/ 吞吐/ 率/ 相比/ 其他/ 文章/ 的/ 结果/ 比较/ 低/ ,/ 只有/ 158Mbps/ ./ CHES2010/ 上/ 的/ 另/ 一篇/ 文章/ [/ 8/ ]/ 搭建/ 了/ 统一/ 的/ FPGA/ 平台/ ,/ 评估/ 了/ 包括/ BLAKE/ 在内/ 的/ 14/ 个/ 在/ SHA/ -/ 3/ 第/ 1/ 轮/ 筛选/ 中/ 胜出/ 的/ 算法/ ./ 文章/ 没有/ 给出/ BLAE/ 具体/ 的/ 实现/ 方案/ ,/ 吞吐/ 率/ 达到/ 了/ 2.6/ Gbps/ ./ 文献/ [/ 11/ ]/ 也/ 评估/ 了/ 这/ 14/ 个/ 算法/ 在/ 不同/ FPGA/ 平台/ 上/ 的/ 效能/ ,/ 文章/ 给出/ 的/ BLAKE/ 的/ 吞吐/ 率/ 只有/ 1.6/ Gbps/ ./ Page6/ 从/ 目前/ 对/ BLAKE/ 算法/ 的/ 硬件/ 评估/ 的/ 文章/ 可以/ 看出/ :/ 评估/ 的/ 重点/ 集中/ 在/ 两/ 方面/ ,/ 一方面/ 是/ 评估/ 算法/ 在/ 硬件平台/ 上能/ 达到/ 的/ 最高/ 的/ 吞吐/ 率/ ,/ 这/ 是因为/ 硬件/ 实现/ 算法/ 的/ 一个/ 主要/ 目的/ 是/ 在/ 某些/ 苛求/ 的/ 应用/ 中/ ,/ 硬件/ 模块/ 可以/ 达到/ 软件/ 所/ 不能/ 达到/ 的/ 处理速度/ ;/ 另一方面/ 是/ 算法/ 在/ 实现/ 的/ 时候/ 可以/ 灵活/ 地/ 控制/ 吞吐/ 率/ 和/ 消耗/ 资源/ 的/ 比/ ,/ 主要/ 原因/ 是/ 扩大/ 算法/ 的/ 应用领域/ ,/ 例如/ ,/ 随着/ 片上/ 系统/ (/ SOC/ )/ 的/ 发展/ ,/ 可以/ 通过/ 协处理器/ 的/ 方式/ 提高/ SOC/ 系统/ 的/ 整体/ 处理/ 效能/ 而/ 不/ 需要/ 使用/ 高端/ 的/ CPU/ ,/ 从而/ 节省/ 硬件/ 开发成本/ ./ 4BLAKE/ 算法/ 的/ FPGA/ 实现/ 4.1/ BLAKE/ 实现/ BLAKE/ 的/ 实现/ 主要/ 有/ 3/ 个/ 模块/ ,/ 首先/ 是/ 初始/ 图/ 3BLAK/ 算法/ 的/ 实现/ 结构图/ 4.3/ 系统/ 说明/ 控制/ 单元/ (/ ControlUnit/ )/ 的/ 设计/ ,/ 采用/ 最为/ 简单/ 的/ 状态机/ 结构/ 来/ 实现/ ,/ 控制/ 整个/ 算法/ 的/ 工作/ 流程/ ./ 初始化/ 模块/ 和/ 最后/ 的/ 输出模块/ ,/ 负责/ 算法/ 数据/ 的/ 初始化/ 和/ 最后/ 结果/ 的/ 输出/ ,/ 由于/ 逻辑/ 功能/ 简单/ ,/ 主要/ 是/ 异或/ 操作/ ,/ 在/ 方案设计/ 的/ 时候/ ,/ 不/ 需要/ 额外/ 的/ 考虑/ ./ 压缩/ 函数/ 的/ 实现/ 是/ 设计/ 的/ 核心/ ./ 根据/ 对/ 算法/ 的/ 分析/ ,/ 设计者/ 在/ 设计/ 算法/ 的/ 时候/ ,/ 已经/ 很/ 好/ 地/ 考虑/ 了/ 硬件/ 实现/ 时/ ,/ 资源/ 和/ 速度/ 平衡/ 的/ 问题/ ./ 所以/ 在/ 实现/ 的/ 时候/ ,/ 只要/ 根据/ 实际/ 应用/ 的/ 需求/ ,/ 调整/ 系统/ 的/ 结构/ 就/ 可以/ 动态/ 灵活/ 地/ 调整/ 算法/ 的/ 速度/ 和/ 资源/ 的/ 消耗/ 情况/ ./ 化步骤/ ,/ 然后/ 是/ 轮/ 函数/ ,/ 最后/ 是/ 终止/ 步骤/ ./ 按照/ 上述/ 文章/ 给出/ 的/ 评估/ 结果/ ,/ BLAKE/ 算法/ 实现/ 中/ ,/ 吞吐/ 率/ 最高/ 的/ 是/ 8G/ 结构/ ./ 由于/ 硬件/ 实现/ 密码/ 算法/ 的/ 一个/ 最/ 主要/ 的/ 目的/ 是/ 为了/ 突破/ 软件/ 计算能力/ 的/ 瓶颈/ ,/ 所以/ 算法/ 在/ 尽量/ 节省/ 资源/ 的/ 情况/ 下所能/ 达到/ 的/ 最大/ 吞吐/ 率/ 是/ 评估/ 硬件/ 实现/ 的/ 一个/ 重要/ 指标/ ./ 为了/ 进一步提高/ 系统/ 的/ 吞吐/ 率/ ,/ 本文/ 在/ 文献/ [/ 4/ ]/ 的/ 基础/ 上/ ,/ 对/ 压缩/ 函数/ 的/ 关键/ 路径/ 继续/ 优化/ ,/ 并/ 基于/ 优化/ 后/ 的/ 压缩/ 函数/ ,/ 采用/ 8G/ 结构/ 实现/ 了/ BLAKE/ 算法/ ./ 4.2/ 系统/ 框图/ 图/ 3/ 所示/ 为/ BLAKE/ 算法/ 的/ 整体/ 结构/ 框图/ ./ 目前/ 实现/ 的/ 主要/ 区别/ 就/ 在于/ 控制/ 逻辑/ 和/ 轮/ 函数/ ./ 在/ 算法/ 设计/ 之初/ ,/ 压缩/ 函数/ 的/ 结构/ 就/ 可以/ 满足/ 各种/ 处理速度/ 和/ 资源/ 消耗/ 的/ 需求/ ./ 所以/ 在/ 实现/ 的/ 时候/ ,/ 关键/ 之/ 处/ 在于/ 压缩/ 函数/ 的/ 优化/ ./ 首先/ ,/ 如果/ 不/ 考虑/ 资源/ 消耗/ ,/ 为了/ 最大/ 限度/ 地/ 提高/ 系统/ 的/ 吞吐/ 率/ ,/ 可以/ 同时/ 实现/ 8/ 个/ 压缩/ 函数/ ,/ 其中/ 前/ 4/ 个/ 压缩/ 函数/ 用来/ 实现/ 列/ 变换/ ,/ 剩余/ 的/ 4/ 个/ 压缩/ 函数/ 实现/ 对角线/ 变换/ ./ 在/ 这种/ 工作/ 模式/ 下/ ,/ 系统/ 可以/ 在/ 一个/ 时钟/ 周期/ 内/ 完成/ 整个/ 压缩/ 函数/ 的/ 变换/ 过程/ ,/ 系统/ 达到/ 了/ 运算/ 速度/ 的/ 最大值/ ,/ 但/ 同时/ 也/ 需要/ 消耗/ 更/ 多/ 的/ 硬件资源/ ./ 其中/ 每个/ 压缩/ 函数/ 的/ 逻辑/ 结构/ 和/ 资源/ 消耗/ 是/ 一样/ 的/ ./ 若/ 选定/ 了/ 压缩/ 函数/ 的/ 数量/ ,/ 则/ 提高/ 系统/ 的/ 吞吐/ 率/ ,/ 依赖于/ 对/ 压缩/ 函数/ 的/ 优化/ ./ 首先/ 分析/ BLAKE/ 算法/ 中/ 的/ 关键/ 路径/ ./ 在/ 图/ 4/ 中用/ 虚/ 线圈/ 出/ 了/ 压缩/ 函数/ 的/ 关键/ 路径/ ./ Page7/ 图/ 4G/ 函数/ 关键/ 路径/ 示意图/ 虽然/ 压缩/ 函数/ 计算/ 的/ 轮数/ 相比/ 于/ SHA/ -/ 2/ 有/ 很大/ 的/ 减少/ ,/ 但/ 从/ 图/ 4/ 可以/ 看出/ BLAKE/ 算法/ 的/ 关键/ 路径/ 很长/ ,/ 有/ 6/ 个/ 32/ -/ bit/ 的/ 加法/ ,/ 4/ 次/ 异或/ 操作/ ,/ 4/ 次/ 循环/ 移位/ 操作/ ./ 这里/ 需要/ 解释/ 为什么/ 是/ 4/ 个/ 异或/ 操作/ ./ 因为/ (/ m/ σ/ γ/ (/ 2i/ )/ / c/ σ/ γ/ (/ 2i/ +/ 1/ )/ )/ 操作/ 相比/ 32/ -/ bit/ 的/ 加法/ ,/ 计算/ 延时/ 要/ 小/ 很多/ ./ 同理/ (/ m/ σ/ γ/ +/ 1/ (/ 2i/ )/ / c/ σ/ γ/ +/ 1/ (/ 2i/ +/ 1/ )/ )/ 里/ 的/ 异或/ 操作/ 也/ 不/ 计算/ 到/ 关键/ 路径/ 中/ ./ 文献/ [/ 4/ ]/ 对/ 压缩/ 函数/ 的/ 关键/ 路径/ 第/ 1/ 次/ 做/ 了/ 优图/ 5G/ 函数/ 关键/ 路径/ 优化/ 方案/ 1/ 从图/ 5/ 可以/ 看出/ ,/ 在/ (/ m/ σ/ γ/ (/ 2i/ )/ / c/ σ/ γ/ (/ 2i/ +/ 1/ )/ )/ 之后/ ,/ 关键/ 路径/ 上/ 会/ 产生/ 3/ 个数/ ,/ 这样/ 我们/ 可以/ 考虑/ 用/ CarrySaveAdder/ (/ CSA/ )/ 将/ 3/ 个/ 加法/ 优化/ 成为/ 2/ 个数/ 的/ 加法/ 和/ 一个/ 逻辑/ 门/ 的/ 路径/ 长度/ ./ 经过/ 这样/ 的/ 变换/ 之后/ ,/ 压缩/ 函数/ 的/ 路径/ 可以/ 进一步/ 变短/ ./ 这里/ 需要/ 强图/ 6G/ 函数/ 关键/ 路径/ 优化/ 方案/ 2/ 化/ ./ 这里/ 首先/ 具体/ 描述/ 文献/ [/ 4/ ]/ 的/ 优化/ 思路/ ./ 作者/ 发现/ 每次/ 轮/ 函数/ 计算/ 需要/ 的/ 常数/ 和/ 消息/ 块/ 的/ 异或/ 值/ 可以/ 预计/ 算/ ,/ 不/ 依赖于/ 轮/ 与/ 轮/ 之间/ 的/ 关系/ ./ 而/ a/ ,/ b/ ,/ c/ ,/ d4/ 个/ 变量/ 在/ 轮/ 与/ 轮/ 之间/ 是/ 互相/ 依赖/ 的/ ./ 基于/ 此/ 作者/ 将/ (/ m/ σ/ γ/ (/ 2i/ )/ / c/ σ/ γ/ (/ 2i/ +/ 1/ )/ )/ 做/ 了/ 预计/ 算/ ,/ 这样/ 每/ 一轮/ 中/ 的/ 关键/ 路径/ 就/ 少/ 了/ 一个/ 加法/ ./ 图/ 5/ 给出/ 了/ 文献/ [/ 4/ ]/ 的/ 优化/ 后/ 的/ G/ 函数/ 的/ 框图/ ./ 调/ 的/ 是/ 在/ FPGA/ 中/ LUT/ 一般/ 是/ 4/ 输入/ 或者/ 6/ 输入/ ,/ 我们/ 使用/ 的/ Virtex5/ 的/ LUT/ 是/ 6/ 输入/ 的/ ,/ a/ +/ b/ +/ (/ m/ σ/ γ/ (/ 2i/ +/ 1/ )/ / c/ σ/ γ/ (/ 2i/ )/ )/ 这样/ 的/ 表达式/ 用/ CSA/ 来/ 搭建/ 时/ ,/ 只/ 需要/ 一层/ LUT/ 以及/ 一个/ 32/ 位/ 加法/ 的/ 延时/ ./ 经过/ 修改/ 后/ 的/ 压缩/ 函数/ 的/ 结构/ 如图/ 6/ 所示/ ./ Page8/ 继续/ 分析/ 使用/ 8G/ 结构/ 的/ 关键/ 路径/ ,/ 因为/ 在/ 8G/ 结构/ 中/ ,/ 需要/ 两个/ G/ 函数/ 串联/ ,/ 可以/ 从/ 上面/ 的/ G/ 函数/ 的/ 关键/ 路径/ 中/ 发现/ ,/ 一个/ G/ 函数/ 的/ 关键/ 路径/ 从/ a/ 开始/ 到/ b/ 结束/ ,/ 那么/ 意味着/ 只有/ 在/ 第/ 1/ 个/ G/ 函数/ 的/ b/ 得到/ 之后/ ,/ 才能/ 开始/ 下/ 一轮/ 的/ 计算/ ./ 所以/ 8G/ 结构/ 中/ ,/ 两个/ G/ 函数/ 级联/ 就/ 没有/ 了/ 继续/ 优化/ 的/ 空间/ ./ 其次/ ,/ 使用/ 8G/ 结构/ 与/ 4G/ 结构/ 相比/ ,/ 8G/ 接口/ 的/ 控制/ 逻辑/ 比/ 4G/ 结构/ 的/ 控制/ 逻辑/ 简单/ ,/ 但/ 由于/ 两个/ 压缩/ 函数/ 级联/ ,/ 使得/ 系统/ 的/ 最大/ 工作频率/ 比/ 4G/ 结构/ 低/ ./ 5/ 实现/ 结果/ 和/ 分析/ 我们/ 使用/ Xilinx/ 公司/ 的/ Virtex/ -/ 5/ 作为/ 评估/ 平台/ ,/ 使用/ Xilinx/ 的/ ISE11/ ./ 5/ 对/ 设计方案/ 进行/ 综合/ 仿真/ ./ 在/ 比较/ 消耗/ 资源/ 的/ 时候/ ,/ 本文/ 也/ 采用/ 了/ FPGA/ 的/ 逻辑/ 资源/ Slice/ 作为/ 衡量/ 单位/ ./ 本文/ 8G/ 结构/ Virtex51711773581BLAKE/ -/ 32/ -/ 8G/ ①/ Virtex51610673103SHA/ -/ 2/ [/ 7/ ]/ BLAKE/ [/ 8/ ]/ 从表/ 2/ 可以/ 看出/ ,/ 作为/ SHA/ -/ 3/ 的/ 候选/ 算法/ 之一/ ,/ BLAKE/ 在/ 性能/ 上/ 和/ SHA/ -/ 2/ 相比/ ,/ 有/ 了/ 很大/ 的/ 提高/ ./ 本文/ 主要/ 从/ 吞吐/ 率/ 的/ 角度/ 对/ BLAKE/ 做/ 了/ 评估/ ./ 综合/ 目前/ BLAKE/ 算法/ 的/ 实现/ 方案/ 可以/ 发现/ ,/ BLAKE/ 算法/ 具有/ 很/ 高/ 的/ 灵活性/ ,/ 在/ 各种/ 不同/ 需求/ 的/ 应用/ 中/ ,/ 可以/ 达到/ 硬件资源/ 消耗/ 和/ 吞吐/ 率/ 的/ 平衡/ ./ 6/ 结束语/ 随着/ 嵌入式/ 系统/ 的/ 发展/ ,/ 对于/ 密码/ 算法/ 的/ 实现/ 有/ 了/ 更/ 高/ 的/ 要求/ ,/ 一方面/ 要求/ 算法/ 能够/ 在/ 高速/ 的/ 环境/ 中/ 提供/ 高/ 的/ 吞吐/ 率/ ;/ 另一方面/ ,/ 在/ 嵌入式/ 系统/ 中/ ,/ 由于/ 资源/ 和/ 能量/ 的/ 受限/ ,/ 需要/ 算法/ 可以/ 灵活/ 的/ 调整/ ,/ 满足/ 受限/ 资源/ 环境/ 的/ 需求/ ./ BLAKE/ 算法/ 作为/ SHA/ -/ 3/ 第/ 3/ 轮/ 评估/ 的/ 候选/ 算法/ 之一/ ,/ 本文/ 首先/ 综述/ 了/ 其/ 硬件/ 评估/ 的/ 现状/ ,/ 大多数/ 是/ 通过/ 统一/ 的/ 标准/ 实现/ 了/ 5/ 个/ 候选/ 算法/ ,/ 通过/ 比较/ 在/ 这个/ 标准/ 下/ 各个/ 算法/ 的/ 性能/ 表现/ ./ 本文/ 针对/ 硬件/ 实现/ 具有/ 高/ 吞吐/ 率/ 的/ 特点/ ,/ 通过/ 对/ BLAKE/ 算法/ 的/ 压缩/ 函数/ 的/ 关键/ 路径/ 的/ 改进/ ,/ 在/ FPGA/ 硬件平台/ 上/ 对/ BLAE/ 算法/ 的/ 高效性/ 做/ 了/ 评估/ ./ 

