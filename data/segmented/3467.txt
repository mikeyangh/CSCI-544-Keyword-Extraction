Page1/ 架构/ 大/ 数据/ :/ 挑战/ 、/ 现状/ 与/ 展望/ 王珊/ 1/ )/ ,/ 2/ )/ 王会举/ 1/ )/ ,/ 2/ )/ 覃雄派/ 1/ )/ ,/ 2/ )/ 周/ ?/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 数据/ 工程/ 与/ 知识/ 工程/ 教育部/ 重点/ 实验室/ (/ 中国人民大学/ )/ 北京/ 100872/ )/ 2/ )/ (/ 中国人民大学/ 信息/ 学院/ 北京/ 100872/ )/ 摘要/ 大/ 数据分析/ 相比/ 于/ 传统/ 的/ 数据仓库/ 应用/ ,/ 具有/ 数据量/ 大/ 、/ 查询/ 分析/ 复杂/ 等/ 特点/ ./ 为了/ 设计/ 适合/ 大/ 数据分析/ 的/ 数据仓库/ 架构/ ,/ 文中/ 列举/ 了/ 大/ 数据分析/ 平台/ 需要/ 具备/ 的/ 几个/ 重要/ 特性/ ,/ 对/ 当前/ 的/ 主流/ 实现/ 平台/ —/ —/ —/ 并行/ 数据库/ 、/ MapReduce/ 及/ 基于/ 两者/ 的/ 混合/ 架构/ 进行/ 了/ 分析/ 归纳/ ,/ 指出/ 了/ 各自/ 的/ 优势/ 及/ 不足/ ,/ 同时/ 也/ 对/ 各个/ 方向/ 的/ 研究/ 现状及/ 作者/ 在/ 大/ 数据分析/ 方面/ 的/ 努力/ 进行/ 了/ 介绍/ ,/ 对/ 未来/ 研究/ 做/ 了/ 展望/ ./ 关键词/ 大/ 数据/ ;/ 大规模/ 可/ 扩展/ ;/ MapReduce/ ;/ 并行/ 数据库/ ;/ 深度/ 分析/ 1/ 引言/ 最近/ 几年/ ,/ 数据仓库/ 又/ 成为/ 数据管理/ 研究/ 的/ 热点/ 领域/ ,/ 主要/ 原因/ 是/ 当前/ 数据仓库/ 系统/ 面临/ 的/ 需求/ 在/ 数据源/ 、/ 需/ 提供/ 的/ 数据服务/ 和/ 所处/ 的/ 硬件/ 环境/ 等/ 方面/ 发生/ 了/ 根本性/ 的/ 变化/ (/ 详见/ 1.1/ 节/ )/ ,/ 这些/ 变化/ 是/ 我们/ 必须/ 面对/ 的/ ./ 本文/ 在/ 大/ 数据/ 的/ 时代背景/ 下/ ,/ 对/ 现有/ 数据仓库/ 系统/ 实现/ 方案/ (/ 主要/ 是/ 并行/ 数据库/ 和/ MapReduce/ )/ 进行/ 重新/ 审视/ ,/ 期望/ 能为/ 设计/ 满足/ 时代/ 需求/ 的/ 数据仓库/ 系统/ 提供/ 理论/ 参考/ ./ 限于/ 篇幅/ ,/ 本文/ 主要/ 关注/ 不同/ 数据仓库/ 实现/ 方案/ 的/ 主体/ 架构/ 及其/ 缺陷/ 在/ 最近/ 几年/ 的/ 改进/ 情况/ ./ 依据/ 研究/ 立足点/ 的/ 不同/ ,/ 本文/ 将/ 该/ 领域/ 的/ 研究/ 归为/ 三大类/ :/ 并行/ 数据库/ 、/ MapReduce/ 、/ 并行/ 数据库/ 和/ MapReduce/ 技术/ 的/ 混合/ 架构/ ./ 其中/ 第三类/ 研究/ 又/ 细分/ 为/ :/ 并行/ 数据库/ 主导型/ 、/ MapReduce/ 主导型/ 、/ 并行/ 数据库/ 和/ MapReduce/ 集成型/ 三种/ ./ 本/ Page2/ 文第/ 1/ 节/ 分析/ 大/ 数据/ 时代/ ,/ 数据仓库/ 所/ 面临/ 的/ 问题/ 及/ 挑战/ ;/ 第/ 2/ 节/ 列出/ 大/ 数据/ 时代/ 的/ 数据仓库/ 平台/ 需/ 具备/ 的/ 几个/ 重要/ 特性/ ;/ 第/ 3/ 节到/ 第/ 5/ 节/ 就/ 这/ 几个/ 特性/ 对/ 各类/ 平台/ 进行/ 归纳/ 分析/ ;/ 第/ 6/ 节对/ 最新/ 研究/ 做/ 一/ 跟踪/ 归纳/ ;/ 第/ 7/ 节/ 介绍/ 中国人民大学/ 在/ 大/ 数据分析/ 方面/ 的/ 研究/ 工作/ ;/ 第/ 8/ 节对/ 未来/ 研究/ 做出/ 展望/ ;/ 第/ 9/ 节/ 总结/ 全文/ ./ 1.1/ 三个/ 变化/ (/ 1/ )/ 数据量/ ./ 由/ TB/ 级/ 升至/ PB/ 级/ ,/ 并/ 仍/ 在/ 持续/ 爆炸式/ 增长/ ./ 根据/ WinterCorp/ 的/ 调查/ 显示/ ,/ 最大/ 的/ 数据仓库/ 中/ 的/ 数据量/ ,/ 每/ 两年/ 增加/ 3/ 倍/ [/ 1/ ]/ (/ 年均/ 增长率/ 为/ 173/ %/ )/ ,/ 其/ 增长速度/ 远超/ 摩尔定律/ 增长速度/ ./ 照此/ 增长速度/ 计算/ ,/ 2015/ 年/ 最大/ 数据仓库/ 中/ 的/ 数据量/ 将/ 逼近/ 100PB/ ./ (/ 2/ )/ 分析/ 需求/ ./ 由/ 常规/ 分析/ 转向/ 深度/ 分析/ (/ DeepAnalytics/ )/ ./ 数据分析/ 日益/ 成为/ 企业/ 利润/ 必不可少/ 的/ 支撑点/ ./ 根据/ TDWI/ 对大/ 数据分析/ 的/ 报告/ [/ 2/ ]/ (/ 如图/ 1/ )/ ,/ 企业/ 已经/ 不/ 满足/ 于/ 对/ 现有/ 数据/ 的/ 分析/ 和/ 监测/ ,/ 而是/ 更/ 期望/ 能/ 对/ 未来/ 趋势/ 有/ 更/ 多/ 的/ 分析/ 和/ 预测/ ,/ 以/ 增强/ 企业/ 竞争力/ ./ 这些/ 分析/ 操作/ 包括/ 诸如/ 移动/ 平均线/ 分析/ 、/ 数据/ 关联/ 关系/ 分析/ 、/ 回归/ 分析/ 、/ 市场/ 篮/ 分析/ 等/ 复杂/ 统计分析/ ,/ 我们/ 称之为/ 深度/ 分析/ ./ 值得/ 补充/ 的/ 是/ ,/ 本文/ 中/ 的/ 大/ 数据分析/ 不仅仅/ 指/ 基于/ 大/ 数据/ 上/ 的/ 深度/ 分析/ ,/ 也/ 包括/ 常规/ 分析/ ./ (/ 3/ )/ 硬件平台/ ./ 由/ 高端/ 服务器/ 转向/ 由/ 中低端/ 硬件/ 构成/ 的/ 大规模/ 机群/ 平台/ ./ 由于/ 数据量/ 的/ 迅速/ 增加/ ,/ 并行/ 数据库/ 的/ 规模/ 不得不/ 随之/ 增大/ ,/ 从而/ 导致/ 其/ 成本/ 的/ 急剧/ 上升/ ./ 出于/ 成本/ 的/ 考虑/ ,/ 越来越/ 多/ 的/ 企业/ 将/ 应用/ 由/ 高端/ 服务器/ 转向/ 了/ 由/ 中低端/ 硬件/ 构成/ 的/ 大规模/ 机群/ 平台/ ./ 1.2/ 两个/ 问题/ 图/ 2/ 是/ 一个/ 典型/ 的/ 数据仓库/ 架构/ [/ 3/ ]/ ./ 从图/ 中/ 我们/ 可以/ 看出/ ,/ 传统/ 的/ 数据仓库/ 将/ 整个/ 实现/ 划分/ 为/ 4/ 个/ 层次/ ,/ 数据源/ 中/ 的/ 数据/ 首先/ 通过/ ETL/ 工具/ 被/ 抽取/ 到/ 数据仓库/ 中/ 进行/ 集中/ 存储/ 和/ 管理/ ,/ 再/ 按照/ 星型/ 模型/ 或/ 雪花/ 模型/ 组织/ 数据/ ,/ 然后/ OLAP/ 工具/ 从/ 数据仓库/ 中/ 读取数据/ ,/ 生成/ 数据/ 立方体/ (/ MOLAP/ )/ 或者/ 直接/ 访问/ 数据仓库/ 进行/ 数据分析/ (/ ROLAP/ )/ ./ 在/ 大/ 数据/ 时代/ ,/ 此种/ 计算/ 模式/ 存在/ 两个/ 问题/ :/ 问题/ 1/ ./ 数据/ 移动/ 代价/ 过高/ ./ 在/ 数据源/ 层/ 和/ 分析/ 层/ 之间/ 引入/ 一个/ 存储/ 管理层/ ,/ 可以/ 提升/ 数据/ 质量/ 并/ 针对/ 查询/ 进行/ 优化/ ,/ 但/ 也/ 付出/ 了/ 较大/ 的/ 数据/ 迁移/ 代价/ 和/ 执行/ 时/ 的/ 连接/ 代价/ :/ 数据/ 首先/ 通过/ 复杂/ 且/ 耗时/ 的/ ETL/ 过程/ 存储/ 到/ 数据仓库/ 中/ ,/ 在/ OLAP/ 服务器/ 中/ 转化/ 为/ 星型/ 模型/ 或者/ 雪花/ 模型/ ;/ 执行/ 分析/ 时/ ,/ 又/ 通过/ 连接/ 方式/ 将/ 数据/ 从/ 数据库/ 中/ 取出/ ./ 这些/ 代价/ 在/ TB/ 级/ 时/ 也许/ 可以/ 接受/ ,/ 但/ 面对/ 大/ 数据/ ,/ 其/ 执行/ 时间/ 至少/ 会/ 增长/ 几个/ 数量级/ ./ 更为重要/ 的/ 是/ ,/ 对于/ 大量/ 的/ 即席/ 分析/ ,/ 这种/ 数据/ 移动/ 的/ 计算/ 模式/ 是/ 不/ 可取/ 的/ ./ 问题/ 2/ ./ 不能/ 快速/ 适应/ 变化/ ./ 传统/ 的/ 数据仓库/ 假设/ 主题/ 是/ 较/ 少/ 变化/ 的/ ,/ 其/ 应对/ 变化/ 的/ 方式/ 是/ 对/ 数据源/ 到/ 前端/ 展现/ 的/ 整个/ 流程/ 中/ 的/ 每个/ 部分/ 进行/ 修改/ ,/ 然后/ 再/ 重新/ 加载/ 数据/ ,/ 甚至/ 重新/ 计算/ 数据/ ,/ 导致/ 其/ 适应/ 变化/ 的/ 周期/ 较长/ ./ 这种/ 模式/ 比较/ 适合/ 对/ 数据/ 质量/ 和/ 查询/ 性能/ 要求/ 较/ 高/ 、/ 而/ 不/ 太/ 计较/ 预处理/ 代价/ 的/ 场合/ ./ 但/ 在/ 大/ 数据/ 时代/ ,/ 分析/ 处在/ 变化/ 的/ 业务/ 环境/ 中/ ,/ 这种/ 模式/ 将/ 难以/ 适应/ 新/ 的/ 需求/ ./ 1.3/ 一个/ 鸿沟/ 在/ 大/ 数据/ 时代/ ,/ 巨量/ 数据/ 与/ 系统/ 的/ 数据处理/ 能力/ 之间/ 将会/ 产生/ 一个/ 鸿沟/ :/ 一边/ 是/ 至少/ PB/ 级/ 的/ 数据量/ ,/ 另一边/ 是/ 面向/ 传统/ 数据分析/ 能力/ 设计/ 的/ 数据仓库/ 和/ 各种/ BI/ 工具/ ./ 如果/ 这些/ 系统/ 或/ 工具/ 发展缓慢/ ,/ 该/ 鸿沟/ 将会/ 随着/ 数据量/ 的/ 持续/ 爆炸式/ 增长/ 而/ 逐步/ 拉大/ ./ 虽然/ ,/ 传统/ 数据仓库/ 可以/ 采用/ 舍弃/ 不/ 重要/ 数据/ 或者/ 建立/ 数据/ 集市/ 的/ 方式/ 来/ 缓解/ 此/ 问题/ ,/ 但/ 毕竟/ 只/ Page3/ 是/ 权益/ 之策/ ,/ 并非/ 系统/ 级/ 解决方案/ ./ 而且/ ,/ 舍弃/ 的/ 数据/ 在/ 未来/ 可能/ 会/ 重新/ 使用/ ,/ 以/ 发掘/ 更大/ 的/ 价值/ ./ 2/ 期望/ 特性/ 本/ 节/ 我们/ 列出/ 对大/ 数据/ 进行/ 分析/ 时/ ,/ 数据仓库/ 系统/ 需/ 具备/ 的/ 几个/ 重要/ 特性/ (/ 表/ 1/ 所示/ )/ ./ 特性/ 高度/ 可扩展性/ 横向/ 大规模/ 可/ 扩展/ ,/ 大规模/ 并行处理/ 高性能/ 高度/ 容错性/ 查询/ 失败/ 时/ ,/ 只/ 需重/ 做/ 部分/ 工作/ 支持/ 异构/ 环境/ 对/ 硬件平台/ 一致性/ 要求/ 不高/ ,/ 适应能力/ 强较/ 低/ 的/ 分析/ 延迟/ 业务/ 需求/ 变化/ 时/ ,/ 能/ 快速反应/ 易用/ 且/ 开放/ 接口/ 既/ 能/ 方便/ 查询/ ,/ 又/ 能/ 处理/ 复杂/ 分析/ 较/ 低成本/ 向下/ 兼容性/ 支持/ 传统/ 的/ 商务/ 智能工具/ 高度/ 可扩展性/ ./ 一个/ 明显/ 的/ 事实/ 是/ ,/ 数据库/ 不能/ 依靠/ 一台/ 或/ 少数/ 几台/ 机器/ 的/ 升级/ (/ scale/ -/ up/ 纵向/ 扩展/ )/ 满足/ 数据量/ 的/ 爆炸式/ 增长/ ,/ 而是/ 希望/ 能/ 方便/ 地/ 做到/ 横向/ 可/ 扩展/ (/ scale/ -/ out/ )/ 来/ 实现/ 此/ 目标/ ./ 普遍认为/ shared/ -/ nothing/ 无/ 共享/ 结构/ (/ 每个/ 节点/ 拥有/ 私有/ 内存/ 和/ 磁盘/ ,/ 并且/ 通过/ 高速/ 网络/ 同/ 其它/ 节点/ 互连/ )/ 具备/ 较/ 好/ 的/ 扩展性/ [/ 4/ ]/ ./ 分析/ 型/ 操作/ 往往/ 涉及/ 大规模/ 的/ 并行/ 扫描/ 、/ 多维/ 聚集/ 及/ 星型/ 连接/ 操作/ ,/ 这些/ 操作/ 也/ 比较/ 适合/ 在/ 无/ 共享/ 结构/ 的/ 网络/ 环境/ 运行/ ./ Teradata/ 即/ 采用/ 此/ 结构/ ,/ Oracle/ 在/ 其/ 新/ 产品/ Exadata/ 中/ 也/ 采用/ 了/ 此/ 结构/ ./ 高性能/ ./ 数据量/ 的/ 增长/ 并/ 没有/ 降低/ 对/ 数据库/ 性能/ 的/ 要求/ ,/ 反而/ 有所提高/ ./ 软件系统/ 性能/ 的/ 提升/ 可以/ 降低/ 企业/ 对/ 硬件/ 的/ 投入/ 成本/ 、/ 节省/ 计算资源/ ,/ 提高/ 系统/ 吞吐量/ ./ 巨量/ 数据/ 的/ 效率/ 优化/ ,/ 并行/ 是/ 必由之路/ ./ 1PB/ 数据/ 在/ 50MB/ // s/ 速度/ 下/ 串行/ 扫描/ 一次/ ,/ 需要/ 230/ 天/ ;/ 而/ 在/ 6000/ 块/ 磁盘/ 上/ ,/ 并行/ 扫描/ 1PB/ 数据/ 只/ 需要/ 1/ 个/ 小时/ ./ 高度/ 容错/ ./ 大/ 数据/ 的/ 容错性/ 要求/ 在/ 查询/ 执行/ 过程/ 中/ ,/ 一个/ 参与/ 节点/ 失效/ 时/ ,/ 不/ 需要/ 重做/ 整个/ 查询/ ./ 而/ 机群/ 节点/ 数/ 的/ 增加/ 会/ 带来/ 节点/ 失效/ 概率/ 的/ 增加/ ./ 在/ 大规模/ 机群/ 环境/ 下/ ,/ 节点/ 的/ 失效/ 将/ 不再/ 是/ 稀有/ 事件/ (/ Google/ 报告/ ,/ 平均/ 每个/ MapReduce/ 数据处理/ 任务/ 就/ 有/ 1.2/ 个/ 工作/ 节点/ 失效/ [/ 5/ ]/ )/ ./ 因此/ 在/ 大规模/ 机群/ 环境/ 下/ ,/ 系统/ 不能/ 依赖于/ 硬件/ 来/ 保证/ 容错性/ ,/ 要/ 更/ 多/ 地/ 考虑/ 软件/ 级/ 容错/ ./ 支持/ 异构/ 环境/ ./ 建设/ 同构/ 系统/ 的/ 大规模/ 机群/ 难度/ 较大/ ,/ 原因/ 在于/ 计算机硬件/ 更新/ 较/ 快/ ,/ 一次性/ 购置/ 大量/ 同构/ 的/ 计算机/ 是/ 不/ 可取/ 的/ ,/ 而且/ 也/ 会/ 在/ 未来/ 添置/ 异构计算/ 资源/ ./ 此外/ ,/ 不少/ 企业/ 已经/ 积累/ 了/ 一些/ 闲置/ 的/ 计算机/ 资源/ ,/ 此种/ 情况/ 下/ ,/ 对/ 异构/ 环境/ 的/ 支持/ 可以/ 有效/ 地/ 利用/ 这些/ 闲置/ 计算资源/ ,/ 降低/ 硬件/ 成本/ 的/ 投入/ ./ 还/ 需/ 特别/ 关注/ 的/ 是/ ,/ 在/ 异构/ 环境/ 下/ ,/ 不同/ 节点/ 的/ 性能/ 是/ 不/ 一样/ 的/ ,/ 可能/ 出现/ “/ 木桶/ 效应/ ”/ ,/ 即/ 最慢/ 节点/ 的/ 性能/ 决定/ 整体/ 处理/ 性能/ ./ 因此/ ,/ 异构/ 的/ 机群/ 需要/ 特别/ 关注/ 负载/ 均衡/ 、/ 任务调度/ 等/ 方面/ 的/ 设计/ ./ 较/ 低/ 的/ 分析/ 延迟/ ./ 分析/ 延迟/ 指/ 的/ 是/ 分析/ 前/ 的/ 数据/ 准备/ 时间/ ./ 在/ 大/ 数据/ 时代/ ,/ 分析/ 所处/ 的/ 业务/ 环境/ 是/ 变化/ 的/ ,/ 因此/ 也/ 要求/ 系统/ 能/ 动态/ 地/ 适应/ 业务/ 分析/ 需求/ ./ 在/ 分析/ 需求/ 发生变化/ 时/ ,/ 减少/ 数据/ 准备/ 时间/ ,/ 系统/ 能/ 尽可能/ 快地/ 做出/ 反应/ ,/ 快速/ 地/ 进行/ 数据分析/ ./ 易用/ 且/ 开放/ 的/ 接口/ ./ SQL/ 的/ 优点/ 是/ 简单/ 易用/ ,/ 但/ 其/ 主要/ 用于/ 数据/ 的/ 检索/ 查询/ ,/ 对于/ 大/ 数据/ 上/ 的/ 深度/ 分析/ 来讲/ ,/ 是/ 不够/ 的/ ./ 原因/ 在于/ :/ (/ 1/ )/ 其/ 提供/ 的/ 服务/ 方式/ 依赖于/ 数据/ 移动/ 来/ 实现/ :/ 将/ 数据/ 从/ 数据库/ 中/ 取出/ ,/ 然后/ 传递/ 给/ 应用程序/ ,/ 该/ 实现/ 方式/ 在/ 大/ 数据/ 时代/ 代价/ 过高/ ;/ (/ 2/ )/ 复杂/ 的/ 分析/ 功能/ ,/ 如/ R/ 或/ Matlab/ 中/ 的/ 分析/ 功能/ ,/ SQL/ 是/ 难以/ 胜任/ 的/ ./ 因此/ ,/ 除/ 对/ SQL/ 的/ 支持/ 外/ ,/ 系统/ 还/ 应能/ 提供/ 开放/ 的/ 接口/ ,/ 让/ 用户/ 自己/ 开发/ 需要/ 的/ 功能/ ./ 设计/ 该/ 接口/ 时/ ,/ 除了/ 关注/ 其/ 易用性/ 和/ 开放性/ ,/ 还/ 需要/ 特别/ 注意/ 两点/ 隐藏/ 的/ 要求/ :/ (/ 1/ )/ 基于/ 接口/ 开发/ 的/ 用户/ 自定义/ 函数/ ,/ 能/ 自动/ 在/ 机群/ 上/ 并行执行/ ;/ (/ 2/ )/ 分析/ 在/ 数据库/ 内/ 进行/ ,/ 即/ 分析/ 尽可能/ 靠近/ 数据/ ./ 较/ 低/ 的/ 成本/ ./ 在/ 满足/ 需求/ 的/ 前提/ 下/ ,/ 某/ 技术/ 成本/ 越低/ ,/ 其/ 生命力/ 就/ 越强/ ./ 需要/ 指出/ 的/ 是/ 成本/ 是/ 一个/ 综合/ 指标/ ,/ 不仅仅/ 是/ 硬件/ 或/ 软件/ 的/ 代价/ ,/ 还应/ 包括/ 日常/ 运维/ 成本/ (/ 网络/ 费用/ 、/ 电费/ 、/ 建筑/ 等/ )/ 和/ 管理人员/ 成本/ 等/ ./ 据/ 报告/ ,/ 数据中心/ 的/ 主要/ 成本/ 不是/ 硬件/ 的/ 购置/ 成本/ ,/ 而是/ 日常/ 运维/ 成本/ ./ 因此/ ,/ 在/ 设计/ 系统/ 时/ 需要/ 更多地/ 关注/ 此项/ 内容/ ./ 向下/ 兼容性/ ./ 数据仓库/ 发展/ 的/ 30/ 年/ ,/ 产生/ 了/ 大量/ 面向/ 客户/ 业务/ 的/ 数据处理/ 工具/ (/ 如/ Informactica/ 、/ DataStage/ 等/ )/ 、/ 分析/ 软件/ (/ 如/ SPSS/ 、/ R/ 、/ Matlab/ 等/ )/ 和/ 前端/ 展现/ 工具/ (/ 如/ 水晶/ 报表/ )/ 等/ ./ 这些/ 软件/ 是/ 一笔/ 宝贵/ 的/ 财富/ ,/ 已/ 被/ 分析/ 人员/ 所/ 熟悉/ ,/ 是/ 大/ 数据/ 时代/ 中/ 小规模/ 数据分析/ 的/ 必要/ 补充/ ./ 因此/ ,/ 新/ 的/ 数据仓库/ 需/ 考虑/ 同/ 传统/ 商务/ 智能工具/ 的/ 兼容性/ ./ 由于/ 这些/ 系统/ 往往/ 提供/ 标准/ 驱动程序/ ,/ 如/ ODBC/ 、/ JDBC/ 等/ ,/ 这项/ 需求/ 的/ 实际/ 要求/ 是/ 对/ SQL/ 的/ 支持/ ./ 总之/ ,/ 以较/ 低/ 的/ 成本/ 投入/ 、/ 高效/ 地/ 进行/ 数据分析/ ,/ 是/ 大/ 数据分析/ 的/ 基本/ 目标/ ./ Page43/ 并行/ 数据库/ 并行/ 数据库/ 起源于/ 20/ 世纪/ 80/ 年代/ ,/ 当前/ 主流/ 的/ 并行/ 数据库/ 都/ 同/ 早期/ 的/ Gamma/ [/ 6/ ]/ 和/ Grace/ [/ 7/ ]/ 等/ 并行/ 数据库/ 类似/ ./ 这些/ 数据库/ 都/ 支持/ 标准/ SQL/ ,/ 并且/ 实现/ 了/ 数据库/ 界/ 过去/ 30/ 年/ 提出/ 的/ 许多/ 先进/ 技术/ ./ 其/ 主要/ 采用/ shared/ -/ nothing/ 结构/ ,/ 将/ 关系/ 表在/ 节点/ 间/ 横向/ 划分/ ,/ 并且/ 利用/ 优化/ 器来/ 对/ 执行/ 过程/ 进行/ 调度/ 和/ 管理/ ./ 其/ 目标/ 是/ 高性能/ 和/ 高可用性/ ./ 并行/ 数据库/ 的/ 最大/ 优势/ 在于/ 性能/ ./ 这/ 主要/ 得益于/ 数据库/ 界近/ 几十年/ 的/ 研究成果/ —/ —/ —/ 许多/ 先进/ 的/ 技术手段/ 及/ 算法/ ,/ 如/ 索引/ 、/ 数据压缩/ 、/ 物化/ 视图/ 、/ 结果/ 缓冲/ 、/ I/ // O/ 共享/ 、/ 优化/ 的/ 数据/ 连接/ 等/ ./ 但是/ 在/ 大/ 数据/ 时代/ ,/ 如/ 前言/ 所述/ ,/ 数据/ 移动/ 的/ 实现/ 方式/ 将/ 影响/ 其/ 性能/ ./ 并行/ 数据库/ 通过/ SQL/ 向外/ 提供数据/ 访问/ 服务/ ,/ SQL/ 因其/ 简单/ 易用/ 的/ 特点/ 而/ 被/ 广泛/ 使用/ ./ 因此/ ,/ 大多/ BI/ 工具/ 都/ 支持/ 基于/ 标准/ SQL/ 的/ 数据/ 交互方式/ ,/ 使得/ 关系数据库/ 能/ 较/ 好/ 地/ 兼容/ 当前/ 多数/ BI/ 工具/ ./ 某些/ 数据库/ ,/ 如/ IBMDB2/ 还/ 针对/ 一些/ BI/ 工具/ 进行/ 了/ 优化/ ./ 但/ 在/ 大/ 数据分析/ 面前/ ,/ SQL/ 接口/ 面临/ 巨大/ 挑战/ ./ SQL/ 的/ 优势/ 源于/ 其/ 对/ 底层/ 数据/ 访问/ 的/ 封装/ ,/ 但/ 封装/ 在/ 一定/ 程度/ 上/ 影响/ 了/ 其/ 开放性/ ./ 而且/ 并行/ 数据库/ 提供/ 的/ 用户/ 自定义/ 函数/ 大都/ 是/ 基于/ 单/ 数据库/ 实例/ 设计/ 的/ ,/ 从而/ 不能/ 在/ 机群/ 上/ 并行执行/ ,/ 也/ 即/ 意味着/ 传统/ 的/ 实现/ 方式/ 不/ 适合/ 大/ 数据/ 的/ 处理/ 及/ 分析/ ./ 而且/ ,/ 在/ 并行/ 数据库/ 中/ 实现/ 用户/ 自定义/ 函数/ 往往/ 需要/ 经过/ 复杂/ 的/ 系统/ 交互/ ,/ 甚至/ 要/ 熟悉/ 数据库/ 的/ 内部结构/ 及/ 系统/ 调用/ 等/ ,/ 从而/ 难以使用/ ./ 并行/ 数据库/ 在/ 扩展性/ 、/ 容错性/ 、/ 成本/ 、/ 对/ 异构/ 环境/ 的/ 支持/ 等/ 几项/ 上/ 有所/ 欠缺/ ./ 这/ 几项/ 实际/ 是/ 相互影响/ 的/ ,/ 我们/ 以/ 其/ 最大/ 问题/ —/ —/ —/ 扩展性/ 为主/ 线/ 展开讨论/ ./ 并行/ 数据库/ 大多/ 支持/ 有限/ 扩展/ ,/ 一般/ 可/ 扩至/ 数百/ 节点/ 的/ 规模/ ,/ 尚未/ 有/ 数千/ 节点/ 规模/ 的/ 应用/ 案例/ ./ 并行/ 数据库/ 扩展性/ 有限/ 主要/ 因为/ 如下/ 几点/ :/ (/ 1/ )/ 并行/ 数据库/ 软件/ 级/ 容错/ 能力/ 较差/ ./ 并行/ 数据库/ 基于/ 高端/ 硬件/ 设计/ ,/ 并且/ 假设/ 查询/ 失败/ 属于/ 稀有/ 事件/ ./ 因此/ 当/ 查询/ 失败/ 时/ ,/ 一般/ 采取/ 重做/ 查询/ 的/ 方式/ ./ 而/ 在/ 大规模/ 机群/ 环境/ 下/ ,/ 查询/ 失败/ 将会/ 变为/ 一个/ 普通/ 事件/ ./ 极端/ 情况/ 下/ ,/ 并行/ 数据/ 有/ 可能/ 出现/ 不停/ 重做/ 查询/ 的/ 局面/ ;/ (/ 2/ )/ 并行/ 数据库/ 对/ 异构/ 硬件/ 的/ 支持/ 非常/ 有限/ ,/ 且/ 对于/ 处理/ 较慢/ 的/ 节点/ 反应/ 敏感/ ,/ 容易/ 出现/ “/ 木桶/ 效应/ ”/ ./ 如/ 第/ 2/ 节中/ 所/ 论述/ 的/ ,/ 完全/ 基于/ 同构/ 硬件/ 搭建/ 大规模/ 机群/ 在/ 现实/ 中是/ 较/ 难/ 实现/ 的/ ./ 因而/ ,/ 对/ 异构/ 硬件/ 的/ 支持/ 能力/ 影响/ 了/ 其/ 扩展性/ ;/ (/ 3/ )/ 并行/ 数据库/ 若/ 做到/ 大规模/ 可/ 扩展/ ,/ 其/ 代价/ 将会/ 较/ 高/ (/ 需/ 基于/ 高端/ 硬件/ 来/ 保证/ 可靠性/ ,/ 需/ 购买/ 昂贵/ 的/ 软件系统/ )/ ,/ 从而/ 限制/ 了/ 其/ 扩展性/ ;/ (/ 4/ )/ 根据/ CAP/ 理论/ ①/ [/ 8/ ]/ ,/ 在/ 分布式系统/ 中/ ,/ 数据/ 一致性/ (/ Consistency/ )/ 、/ 可用性/ (/ Availability/ )/ 、/ 子网/ 可分解/ 性/ (/ NetworkPartitioning/ )/ 不可/ 同时/ 兼得/ ,/ 选择/ 其中/ 任/ 两项/ ,/ 便会/ 损害/ 另/ 一项/ ./ 并行/ 数据库/ 追求/ 的/ 是/ 数据/ 一致性/ 和/ 系统/ 的/ 可用性/ ,/ 从而/ 影响/ 了/ 它/ 的/ 扩展/ 能力/ ./ 此外/ ,/ 如/ 1.2/ 节所/ 讨论/ 的/ ,/ 基于/ 并行/ 数据库/ 实现/ 的/ 传统/ 数据仓库/ 借助于/ 外围/ 工具/ (/ ETL/ 工具/ 、/ OLAP/ 产品/ 、/ BI/ 报表/ 工具/ 、/ 统计分析/ 软件/ 等/ )/ 来/ 完成/ 数据/ 的/ 预处理/ 和/ 分析/ 展现/ 任务/ ,/ 导致/ 其/ 数据处理/ 及/ 分析/ 过程/ 涉及/ 大量/ 的/ 数据/ 迁移/ 和/ 计算/ ,/ 分析/ 延迟/ 往往/ 较/ 高/ ./ 4MapReduceMapReduce/ [/ 5/ ]/ 是/ 2004/ 年/ 由/ Google/ 提出/ 的/ 面向/ 大/ 数据/ 集/ 处理/ 的/ 编程/ 模型/ ,/ 起初/ 主要/ 用作/ 互联网/ 数据/ 的/ 处理/ ,/ 例如/ 文档/ 抓取/ 、/ 倒排/ 索引/ 的/ 建立/ 等/ ./ 但/ 由于/ 其/ 简单/ 而/ 强大/ 的/ 数据处理/ 接口/ 和/ 对/ 大规模/ 并行执行/ 、/ 容错/ 及/ 负载/ 均衡/ 等/ 实现/ 细节/ 的/ 隐藏/ ,/ 该/ 技术/ 一经/ 推出/ 便/ 迅速/ 在/ 机器/ 学习/ 、/ 数据挖掘/ 、/ 数据分析/ 等/ 领域/ 得到/ 广泛应用/ [/ 9/ ]/ ./ MapReduce/ 将/ 数据处理/ 任务/ 抽象/ 为/ 一系列/ 的/ Map/ (/ 映射/ )/ -/ Reduce/ (/ 化简/ )/ 操作/ 对/ ./ Map/ 主要/ 完成/ 数据/ 的/ 过滤/ 操作/ ,/ Reduce/ 主要/ 完成/ 数据/ 的/ 聚集/ 操作/ ./ 输入输出/ 数据/ 均/ 以/ 〈/ key/ ,/ value/ 〉/ 格式/ 存储/ ./ 用户/ 在/ 使用/ 该/ 编程/ 模型/ 时/ ,/ 只/ 需/ 按照/ 自己/ 熟悉/ 的/ 语言/ 实现/ Map/ 函数/ 和/ Reduce/ 函/ 即可/ ,/ MapReduce/ 框架/ 会/ 自动/ 对/ 任务/ 进行/ 划分/ 以/ 做到/ 并行执行/ ./ 下面/ 本文/ 将/ 以/ 基于/ MapReduce/ 的/ 开源/ 实现/ Hadoop/ [/ 10/ ]/ 为主/ ,/ 对/ 其/ 主要/ 特性/ 进行/ 介绍/ ./ MapReduce/ 是/ 面向/ 由/ 数千台/ 中低端/ 计算机/ 组成/ 的/ 大规模/ 机群/ 而/ 设计/ 的/ ,/ 其/ 扩展/ 能力/ 得益于/ 其/ shared/ -/ nothing/ 结构/ 、/ 各个/ 节点/ 间/ 的/ 松/ 耦合/ 性/ 和/ 较/ 强/ 的/ 软件/ 级/ 容错/ 能力/ :/ 节点/ 可以/ 被/ 任意/ 地/ 从/ 机群/ 中/ 移除/ ,/ 而/ 几乎/ 不/ 影响/ 现有/ 任务/ 的/ 执行/ ./ 该/ 技术/ 被/ 称为/ RAIN/ (/ Redundant/ // ReliableArrayofIndependent/ (/ andInexpensive/ )/ Nodes/ )/ ./ MapReduce/ 卓越/ 的/ 扩展/ 能力/ 已/ 在/ 工业界/ (/ Google/ 、/ Facebook/ 、/ Baidu/ 、/ Taobao/ ①/ 该/ 理论/ 目前/ 尚存/ 争议/ ./ Page5/ 等/ )/ 得到/ 了/ 充分/ 验证/ ./ MapReduce/ 对/ 硬件/ 的/ 要求/ 较/ 低/ ,/ 可以/ 基于/ 异构/ 的/ 廉价/ 硬件/ 来/ 搭建/ 机群/ ,/ 且/ 免费/ 开源/ ,/ 因此/ 其/ 构建/ 成本/ 低于/ 并行/ 数据库/ ./ 但/ 基于/ MapReduce/ 的/ 应用软件/ 相对/ 较/ 少/ ,/ 许多/ 数据分析/ 功能/ 需要/ 用户/ 自行/ 开发/ ,/ 从而/ 会/ 导致/ 使用/ 成本/ 的/ 增加/ ./ 作为/ 开源/ 系统/ ,/ MapReduce/ 具有/ 完全/ 的/ 开放性/ :/ 其/ 〈/ key/ ,/ value/ 〉/ 存储/ 模型/ 具有/ 较强/ 的/ 表现力/ ,/ 可以/ 存储/ 任意/ 格式/ 的/ 数据/ ;/ Map/ 和/ Reduce/ 两个/ 基本/ 的/ 函数/ 接口/ 也/ 给/ 用户/ 提供/ 了/ 足够/ 的/ 发挥/ 空间/ ,/ 可以/ 实现/ 各种/ 复杂/ 的/ 数据处理/ 功能/ ./ 但/ 这种/ 开放性/ 也/ 带来/ 一个/ 问题/ ,/ 就是/ 将/ 本来/ 应由/ 数据库/ 管理系统/ 完成/ 的/ 工作/ ,/ 诸如/ 文件/ 存储/ 格式/ 的/ 设计/ 、/ 模式/ 信息/ 的/ 记录/ 、/ 数据处理/ 算法/ 的/ 实现/ 等/ ,/ 转移/ 给/ 了/ 程序员/ ,/ 从而/ 导致/ 程序员/ 负担过重/ ./ 程序员/ 水平/ 对系统/ 处理/ 性能/ 起/ 决定性/ 作用/ ./ 在/ 某些/ 情况/ 下/ ,/ 写/ MapReduce/ 程序/ 的/ 时间/ 远大于/ 写/ SQL/ 语句/ 的/ 时间/ ,/ 部分/ 复杂/ 的/ BI/ 报表/ 分析/ ,/ 可能/ 仅/ 程序/ 的/ 编写/ 和/ 调试/ 就要/ 耗费/ 几天/ 的/ 时间/ ./ 基于/ MapReduce/ 平台/ 的/ 分析/ ,/ 无需/ 复杂/ 的/ 数据/ 预处理/ 和/ 写入/ 数据库/ 的/ 过程/ ,/ 而是/ 可以/ 直接/ 基于/ 平面/ 文件/ 进行/ 分析/ ,/ 并且/ 其/ 采用/ 的/ 计算/ 模式/ 是/ 移动/ 计算/ 而/ 非/ 移动/ 数据/ ,/ 因此/ 可以/ 将/ 分析/ 延迟/ 最小化/ ./ 在/ 同等/ 硬件/ 条件/ 下/ ,/ MapReduce/ 性能/ 远/ 低于/ 并行/ 数据库/ [/ 11/ ]/ ,/ 这/ 是/ 由/ 其/ 最初/ 的/ 设计/ 定位/ 决定/ 的/ ./ MapReduce/ 的/ 设计/ 初衷/ 是/ 面向/ 非/ 结构化/ 数据/ 的/ 处理/ ./ 这些/ 数据/ 具有/ 数据量/ 大/ ,/ 处理/ 复杂/ 等/ 特点/ ,/ 而且/ 往往/ 是/ 一次性/ 处理/ ./ 为了/ 获得/ 较/ 好/ 的/ 扩展/ 能力/ 和/ 容错/ 能力/ ,/ MapReduce/ 采取/ 了/ 基于/ 扫描/ 的/ 处理/ 模式/ 和/ 对/ 中间/ 结果/ 步步/ 物化/ 的/ 执行/ 策略/ ,/ 从而/ 导致/ 较/ 高/ 的/ I/ // O/ 代价/ ./ 为了/ 减少/ 数据/ 预处理/ 时间/ ,/ MapReduce/ 没有/ 使用/ 模式/ 、/ 索引/ 、/ 物化/ 视图/ 等/ 技术手段/ ./ 其/ 数据/ 预处理/ 仅/ 是/ 一次/ 数据/ 加载/ 操作/ ,/ 但/ 由此/ 导致/ 了/ 一个/ 问题/ —/ —/ —/ 较/ 高/ 的/ 元组/ 解析/ 代价/ [/ 12/ ]/ ./ 在/ MapReduce/ 表/ 2/ 混合/ 架构/ 型/ 解决方案/ 对比/ 分析/ 并行/ 数据库/ 主导型/ MapReduce/ 主导型/ 并行/ 数据库/ 和/ MapReduce/ 集成型/ 集成/ 两者/ ,/ 使/ 两者/ 各自/ 做/ 各自/ 擅长/ 的/ 工作/ 5.1/ 并行/ 数据库/ 主导型/ 该种/ 方式/ 关注/ 于/ 如何/ 利用/ MapReduce/ 来/ 增强/ 并行/ 数据库/ 的/ 数据处理/ 能力/ ./ 代表性/ 系统/ 是/ Greenplum/ 环境/ 下/ ,/ 每个/ 查询/ 都/ 是/ 直接/ 从/ 文件系统/ 中/ 读入/ 原始数据/ 文件/ ,/ 而/ 非传统/ 的/ 从/ 数据库/ 中/ 读入/ 经/ 处理/ 过/ 的/ 文件/ ,/ 因此/ 其/ 元组/ 解析/ 代价/ 远高于/ 关系数据库/ ./ 对/ 数据分析/ 领域/ 来说/ ,/ 连接/ 是/ 关键/ 操作/ (/ 如/ 传统/ 的/ 星型/ 查询/ 和/ 雪花/ 查询/ 均/ 是/ 依赖于/ 连接/ 来/ 处理/ 查询/ )/ ,/ 但/ MapReduce/ 处理/ 连接/ 的/ 性能/ 尤其/ 不/ 尽如人意/ ./ 原因/ 在于/ MapReduce/ 最初/ 是/ 针对/ 单/ 数据/ 集/ 设计/ 的/ 处理/ 模型/ ,/ 而/ 连接/ 操作/ 往往/ 涉及/ 多个/ 数据/ 集/ ./ 在/ 利用/ MapReduce/ 实现/ 连接/ 时/ ,/ 最/ 直接/ 的/ 方式/ 是/ 每个/ 任务/ 执行/ 一个/ 属性/ 上/ 的/ 连接/ 操作/ ,/ 然后/ 将/ 多个/ MapReduce/ 任务/ 通过/ 物化/ 的/ 中间/ 结果/ 串接/ 起来/ ./ 这种/ 实现/ 方式/ 往往/ 涉及/ 中间/ 结果/ 的/ 读写/ ,/ 从而/ 导致/ 大量/ 的/ I/ // O/ 操作/ 和/ 网络/ 传输/ ./ MapReduce/ 目前/ 基本/ 不/ 兼容/ 现有/ 的/ BI/ 工具/ ./ 原因/ 在于/ 其/ 初衷/ 并/ 不是/ 要/ 成为/ 数据库系统/ ,/ 因此/ 它/ 并未/ 提供/ SQL/ 接口/ ./ 但/ 已有/ 研究/ 致力于/ SQL/ 语句/ 与/ MapReduce/ 任务/ 的/ 转换/ 工作/ (/ 例如/ Hive/ )/ ,/ 进而/ 有/ 可能/ 实现/ MapReduce/ 与/ 现存/ BI/ 工具/ 的/ 兼容/ ./ 5/ 并行/ 数据库/ 和/ MapReduce/ 的/ 混合/ 架构/ 基于/ 以上/ 分析/ ,/ 我们/ 可以/ 清楚/ 地/ 看出/ ,/ 基于/ 并行/ 数据库/ 和/ MapReduce/ 实现/ 的/ 数据仓库/ 系统/ 都/ 不是/ 大/ 数据分析/ 的/ 理想/ 方案/ ./ 针对/ 两者/ 哪个/ 更/ 适合/ 时代/ 需求/ 的/ 问题/ ,/ 业界/ 近年/ 展开/ 了/ 激烈/ 争论/ ./ 当前/ 基本/ 达成/ 如下/ 共识/ :/ 并行/ 数据库/ 和/ MapReduce/ 是/ 互补/ 关系/ ,/ 应该/ 相互/ 学习/ [/ 13/ -/ 14/ ]/ ./ 基于/ 该/ 观点/ ,/ 大量/ 研究/ 着手/ 将/ 两者/ 结合/ 起来/ ,/ 期望/ 设计/ 出/ 兼具/ 两者/ 优点/ 的/ 数据分析/ 平台/ ./ 这种/ 架构/ 又/ 可以/ 分为/ 三类/ :/ 并行/ 数据库/ 主导型/ 、/ MapReduce/ 主导型/ 、/ MapReduce/ 和/ 并行/ 数据库/ 集成型/ (/ 表/ 2/ 对/ 3/ 种/ 架构/ 进行/ 了/ 对比/ 分析/ )/ ./ (/ 已/ 被/ EMC/ 收购/ )/ 和/ AsterData/ (/ 已/ 被/ Teradata/ 收购/ )/ ./ AsterData/ 将/ SQL/ 和/ MapReduce/ 进行/ 结合/ ,/ 针对/ 大/ 数据分析/ 提出/ 了/ SQL/ // MapReduce/ 框架/ [/ 15/ ]/ ./ Page6/ 该/ 框架/ 允许/ 用户/ 使用/ C++/ 、/ java/ 、/ Python/ 等/ 语言/ 编写/ MapReduce/ 函数/ ,/ 编写/ 的/ 函数/ 可以/ 作为/ 一个/ 子/ 查询/ 在/ SQL/ 中/ 使用/ ,/ 从而/ 同时/ 获得/ SQL/ 的/ 易用性/ 和/ MapReduce/ 的/ 开放性/ ./ 不仅如此/ ,/ AsterData/ 基于/ MapReduce/ 实现/ 了/ 30/ 多个/ 统计/ 软件包/ ,/ 从而/ 将/ 数据分析/ 推向/ 数据库/ 内/ 进行/ (/ 数据库/ 内/ 分析/ )/ ,/ 大大/ 提升/ 了/ 数据分析/ 的/ 性能/ ./ Greenplum/ 也/ 在/ 其/ 数据库/ 中/ 引入/ 了/ MapReduce/ 处理/ 功能/ [/ 16/ ]/ ./ 其/ 执行/ 引擎/ 可以/ 同时/ 处理/ SQL/ 查询/ 和/ MapReduce/ 任务/ ./ 这种/ 方式/ 在/ 代码/ 级/ 整合/ 了/ SQL/ 和/ MapReduce/ :/ SQL/ 可以/ 直接/ 使用/ MapReduce/ 任务/ 的/ 输出/ ,/ 同时/ MapReduce/ 任务/ 也/ 可以/ 使用/ SQL/ 的/ 查询/ 结果/ 作为/ 输入/ ./ 总的来说/ ,/ 这些/ 系统/ 都/ 集中/ 于/ 利用/ MapReduce/ 来/ 改进/ 并行/ 数据库/ 的/ 数据处理/ 功能/ ,/ 其/ 根本性/ 问题/ —/ —/ —/ 可/ 扩展/ 能力/ 和/ 容错/ 能力/ 并未/ 改变/ ./ 5.2/ MapReduce/ 主导型/ 该/ 方向/ 的/ 研究/ 主要/ 集中/ 于/ 利用/ 关系数据库/ 的/ SQL/ 接口/ 和/ 对/ 模式/ 的/ 支持/ 等/ 技术/ 来/ 改善/ MapReduce/ 的/ 易用性/ ,/ 代表/ 系统/ 是/ Hive/ [/ 17/ ]/ 、/ PigLatin/ [/ 18/ ]/ 等/ ./ Hive/ 是/ Facebook/ 提出/ 的/ 基于/ Hadoop/ 的/ 大型/ 数据仓库/ ,/ 其/ 目标/ 是/ 简化/ Hadoop/ 上/ 的/ 数据/ 聚集/ 、/ ad/ -/ hoc/ 查询/ 及大/ 数据/ 集/ 的/ 分析/ 等/ 操作/ ,/ 以/ 减轻/ 程序员/ 的/ 负担/ ./ 它/ 借鉴/ 关系数据库/ 的/ 模式/ 管理/ 、/ SQL/ 接口/ 等/ 技术/ ,/ 把/ 结构化/ 的/ 数据文件/ 映射/ 为/ 数据库/ 表/ ,/ 提供/ 类似/ 于/ SQL/ 的/ 描述性/ 语言/ HiveQL/ 供/ 程序员/ 使用/ ,/ 可/ 自动/ 将/ HiveQL/ 语句/ 解析/ 成一/ 优化/ 的/ Ma/ -/ pReduce/ 任务/ 执行/ 序列/ ./ 此外/ ,/ 它/ 也/ 支持/ 用户/ 自定义/ 的/ MapReduce/ 函数/ ./ PigLatin/ 是/ Yahoo/ !/ 提出/ 的/ 类似/ 于/ Hive/ 的/ 大/ 数据/ 集/ 分析/ 平台/ ./ 两者/ 的/ 区别/ 主要/ 在于/ 语言/ 接口/ ./ Hive/ 提供/ 了/ 类似/ SQL/ 的/ 接口/ ,/ PigLatin/ 提供/ 的/ 是/ 一种/ 基于/ 操作符/ 的/ 数据流/ 式/ 的/ 接口/ ./ 图/ 3/ 是/ PigLatin/ 在/ 处理/ 查询/ 时/ 的/ 一个/ 操作/ 实例/ ./ 该/ 查询/ 的/ 目的/ 是/ 找出/ “/ 年龄/ 在/ 18/ ~/ 25/ 周岁/ 之间/ 的/ 用户/ (/ Users/ )/ 最/ 频繁/ 访问/ 的/ 5/ 个/ 页面/ (/ Pages/ )/ ”/ ./ 从图/ 3/ 可以/ 看出/ ,/ Pig/ 提供/ 的/ 操作/ 接口/ 类似/ 于/ 关系数据库/ 的/ 操作符/ (/ 对应/ 图中/ 右侧/ 部分/ 中/ 的/ 每/ 一行/ 命令/ )/ ,/ 用户/ 查询/ 的/ 脚本/ 类似/ 于/ 逻辑/ 查询/ 计划/ (/ 对应/ 图中/ 左侧/ 部分/ )/ ./ 因此/ ,/ 也/ 可以/ 说/ Pig/ 利用/ 操作符/ 来/ 对/ Hadoop/ 进行/ 封装/ ,/ Hive/ 利用/ SQL/ 进行/ 封装/ ./ 5.3/ MapReduce/ 和/ 并行/ 数据库/ 集成型/ 该/ 方向/ 的/ 代表性/ 研究/ 是/ 耶鲁大学/ 提出/ 的/ HadoopDB/ [/ 19/ ]/ (/ 已于/ 2011/ 年/ 商业化/ 为/ Hadapt/ [/ 20/ ]/ )/ 、/ 图/ 3PigLatin/ 的/ 一个/ 查询/ 示例/ (/ 右边/ 为/ 实际/ 脚本/ )/ Stonebraker/ 等/ 人/ 设计/ 的/ Vertica/ [/ 21/ ]/ 数据库/ 和/ NCR/ 公司/ 的/ Teradata/ [/ 22/ ]/ 数据库/ ./ HadoopDB/ 的/ 核心思想/ 是/ 利用/ Hadoop/ 作为/ 调度/ 层/ 和/ 网络/ 沟通/ 层/ ,/ 关系数据库/ 作为/ 执行/ 引擎/ ,/ 尽可能/ 地/ 将/ 查询/ 压入/ 数据库/ 层/ 处理/ ./ 目标/ 是/ 想/ 借助/ Hadoop/ 框架/ 来/ 获得/ 较/ 好/ 的/ 容错性/ 和/ 对/ 异构/ 环境/ 的/ 支持/ ;/ 通过/ 将/ 查询/ 尽可能/ 推入/ 数据库/ 中/ 执行/ 来/ 获得/ 关系数据库/ 的/ 性能/ 优势/ ./ HadoopDB/ 的/ 思想/ 是/ 深远/ 的/ ,/ 但/ 目前/ 尚无/ 应用/ 案例/ ,/ 原因/ 在于/ :/ (/ 1/ )/ 其/ 数据/ 预处理/ 代价/ 过高/ :/ 数据/ 需要/ 进行/ 两次/ 分解/ 和/ 一次/ 数据库/ 加载/ 操作/ 后/ 才能/ 使用/ ;/ (/ 2/ )/ 将/ 查询/ 推向/ 数据库/ 层/ 只是/ 少数/ 情况/ ,/ 大多数/ 情况/ 下/ ,/ 查询/ 仍/ 由/ Hive/ 完成/ ./ 因为/ 数据仓库/ 查询/ 往往/ 涉及/ 多表/ 连接/ ,/ 由于/ 连接/ 的/ 复杂性/ ,/ 难以/ 做到/ 在/ 保持/ 连接/ 数据/ 局部性/ 的/ 前提/ 下/ 将/ 参与/ 连接/ 的/ 多/ 张表/ 按照/ 某种/ 模式/ 划分/ ;/ (/ 3/ )/ 维护/ 代价/ 过高/ ./ 不仅/ 要/ 维护/ Hadoop/ 系统/ ,/ 还要/ 维护/ 每个/ 数据库/ 节点/ ;/ (/ 4/ )/ 目前/ 尚/ 不/ 支持/ 数据/ 的/ 动态/ 划分/ ,/ 需要/ 手工/ 方式/ 将/ 数据/ 一次性/ 划分/ 好/ ./ 总的来说/ ,/ Ha/ -/ doopDB/ 在/ 某些/ 情况/ 下/ ,/ 可以/ 同时/ 实现/ 关系数据库/ 的/ 高性能/ 特性/ 和/ MapReduce/ 的/ 扩展性/ 、/ 容错性/ ,/ 但/ 同时/ 也/ 丧失/ 了/ 关系数据库/ 和/ MapReduce/ 的/ 某些/ 优点/ ,/ 比如/ MapReduce/ 较/ 低/ 的/ 预处理/ 代价/ 和/ 维护/ 代价/ 、/ 关系数据库/ 的/ 动态数据/ 重/ 分布/ 等/ ./ Vertica/ 采用/ 的/ 是/ 共存/ 策略/ :/ 根据/ Hadoop/ 和/ Vertica/ 各自/ 的/ 处理/ 优势/ ,/ 对/ 数据处理/ 任务/ 进行/ 划分/ ./ 比如/ Hadoop/ 负责/ 非/ 结构化/ 数据/ 的/ 处理/ ,/ Vertica/ 负责/ 结构化/ 数据/ 的/ 处理/ ;/ Hadoop/ 负责/ 耗时/ 的/ 批量/ 复杂/ 处理/ ,/ Vertica/ 负责/ 高性能/ 的/ 交互式/ 查询/ 等/ ,/ 从而/ 将/ 两者/ 结合/ 起来/ ./ Vertica/ 实际/ 采用/ 的/ 是/ 两套/ 系统/ ,/ 同时/ 支持/ 在/ MapReduce/ 任务/ 中/ 直接/ 访问/ Vertica/ 数据库/ 中/ 的/ 数据/ ./ 由于/ 结构化/ 数据/ 仍/ 在/ Vertica/ 中/ 处理/ ,/ 在/ 处理/ 结构化/ 大/ 数据/ 上/ 的/ 查询/ 分析/ 时/ ,/ 仍/ 面临/ 扩展性/ 问题/ ;/ 如果/ 将/ 查询/ 推向/ Hadoop/ 进行/ ,/ 又/ 将/ 面临/ 性能/ 问题/ ./ 因此/ ,/ Vertica/ 的/ 扩展性/ 问题/ 和/ Hadoop/ 的/ 性能/ 问题/ 在/ 该/ 系统/ 中/ 共存/ ./ Page7/ 与/ 前/ 两者/ 相比/ ,/ Teradata/ 的/ 集成/ 相对/ 简单/ ./ Teradata/ 采用/ 了/ 存储/ 层/ 的/ 整合/ :/ MapReduce/ 任务/ 可以/ 从/ Teradata/ 数据库/ 中/ 读取数据/ ,/ Teradata/ 数据库/ 也/ 可以/ 从/ Hadoop/ 分布式文件系统/ 上/ 读取数据/ ./ 同样/ ,/ Teradata/ 和/ Hadoop/ 各自/ 的/ 根本性/ 问题/ 都/ 未/ 解决/ ./ 6/ 研究/ 现状/ 对/ 并行/ 数据库/ 来讲/ ,/ 其/ 最大/ 问题/ 在于/ 有限/ 的/ 扩展/ 能力/ 和/ 待/ 改进/ 的/ 软件/ 级/ 容错/ 能力/ ;/ MapReduce/ 的/ 最大/ 问题/ 在于/ 性能/ ,/ 尤其/ 是/ 连接/ 操作/ 的/ 性能/ ;/ 混合式/ 架构/ 的/ 关键/ 是/ ①/ ,/ 如何/ 能/ 尽可能/ 多地/ 把/ 工作/ 推向/ 合适/ 的/ 执行/ 引擎/ (/ 并行/ 数据库/ 或/ MapReduce/ )/ ./ 本节/ 对/ 近年来/ 在/ 这些/ 问题/ 上/ 的/ 研究/ 做/ 一/ 分析/ 和/ 归纳/ ./ 6.1/ 并行/ 数据库/ 扩展性/ 和/ 容错性/ 研究/ 华盛顿大学/ 在/ 文献/ [/ 23/ ]/ 中/ 提出/ 了/ 可以/ 生成/ 具备/ 容错/ 能力/ 的/ 并行执行/ 计划/ 优化/ 器/ ./ 该/ 优化/ 器/ 可以/ 依靠/ 输入/ 的/ 并行执行/ 计划/ 、/ 各个/ 操作符/ 的/ 容错/ 策略/ 及/ 查询/ 失败/ 的/ 期望值/ 等/ ,/ 输出/ 一个/ 具备/ 容错/ 能力/ 的/ 并行执行/ 计划/ ./ 在/ 该/ 计划/ 中/ ,/ 每个/ 操作符/ 都/ 可以/ 采取/ 不同/ 的/ 容错/ 策略/ ,/ 在/ 失败/ 时仅/ 重新/ 执行/ 其子/ 操作符/ (/ 在/ 某/ 节点/ 上/ 运行/ 的/ 操作符/ )/ 的/ 任务/ 来/ 避免/ 整个/ 查询/ 的/ 重新/ 执行/ ./ MIT/ 于/ 2010/ 年/ 设计/ 的/ Osprey/ 系统/ [/ 24/ ]/ 基于/ 维表/ 在/ 各个/ 节点/ 全/ 复制/ 、/ 事实/ 表/ 横向/ 切分/ 并/ 冗余/ 备份/ 的/ 数据分布/ 策略/ ,/ 将/ 一/ 星型/ 查询/ 划分/ 为/ 众多/ 独立/ 子/ 查询/ ./ 每个/ 子/ 查询/ 在/ 执行/ 失败/ 时/ 都/ 可以/ 在/ 其/ 备份/ 节点/ 上/ 重新/ 执行/ ,/ 而/ 不用/ 重做/ 整个/ 查询/ ,/ 使得/ 数据仓库/ 查询/ 获得/ 类似/ MapReduce/ 的/ 容错/ 能力/ ./ 数据仓库/ 扩展性/ 方面/ 的/ 研究/ 较/ 少/ ,/ 中国人民大学/ 的/ LinearDB/ 原型/ 属于/ 这方面/ 的/ 研究/ ,/ 详细/ 参见/ 7.1/ 节/ ./ 6.2/ MapReduce/ 性能/ 优化/ 研究/ MapReduce/ 的/ 性能/ 优化/ 研究/ 集中/ 于/ 对/ 关系数据库/ 的/ 先进/ 技术/ 和/ 特性/ 的/ 移植/ 上/ ./ Facebook/ 和/ 俄亥俄/ 州立大学/ 合作/ ,/ 将/ 关系数据库/ 的/ 混合式/ 存储/ 模型/ 应用/ 于/ Hadoop/ 平台/ ,/ 提出/ 了/ RCFile/ 存储/ 格式/ [/ 25/ ]/ ./ 与/ 之/ 不同/ ,/ 文献/ [/ 26/ ]/ 将列/ 存储技术/ 引入/ Hadoop/ 平台/ ./ Hadoop/ ++/ [/ 27/ ]/ 系统/ 运用/ 了/ 传统/ 数据库/ 的/ 索引/ 技术/ ,/ 并/ 通过/ 分区/ 数据/ 并/ 置/ (/ Co/ -/ Partition/ )/ 的/ 方式/ 来/ 提升/ 性能/ ./ 文献/ [/ 28/ -/ 29/ ]/ 基于/ MapReduce/ 实现/ 了/ 以/ 流水线/ 方式/ 在/ 各个/ 操作符/ 间/ 传递数据/ ,/ 从而/ 缩短/ 了/ 任务/ 执行/ 时间/ ;/ 在线/ 聚集/ (/ onlineaggregation/ )/ 的/ 操作/ 模式/ 使得/ 用户/ 可以/ 在/ 查询/ 执行/ 过程/ 中/ 看到/ 部分/ 较/ 早/ 返回/ 的/ 结果/ ./ 两者/ 的/ 不同之处/ 在于/ 前者/ 仍/ 基于/ sort/ -/ merge/ 方式/ 来/ 实现/ 流水线/ ,/ 只是/ 将/ 排序/ 等/ 操作/ 推向/ 了/ reducer/ ,/ 部分/ 情况/ 下/ 仍会/ 出现/ 流水线/ 停顿/ 的/ 情况/ ;/ 而/ 后者/ 利用/ hash/ 方式/ 来/ 分布/ 数据/ ,/ 能/ 实现/ 更好/ 的/ 并行/ 流水线/ 操作/ ./ 文献/ [/ 30/ ]/ 提出/ 了/ MRShare/ 架构/ ,/ 对/ 批量/ 查询/ 进行/ 转换/ ,/ 将/ 可/ 共享/ 扫描/ 、/ 共享/ Map/ 输出/ 结果/ 等/ 的/ 一组/ 任务/ 合并/ 为/ 一个/ ,/ 以/ 提升/ 性能/ ./ 新加坡国立大学/ 对/ 影响/ Hadoop/ 性能/ 的/ 因素/ 做/ 了/ 深入分析/ [/ 12/ ]/ ,/ 并/ 提出/ 了/ 5/ 项/ 有效/ 的/ 优化/ 技术/ ,/ 使得/ Hadoop/ 的/ 性能/ 提升/ 了/ 近/ 3/ 倍/ ,/ 逼近/ 关系数据库/ 的/ 性能/ ./ 近年/ 的/ 研究/ 热点/ 是/ 基于/ MapReduce/ 的/ 连接/ 操作/ 的/ 性能/ 优化/ ./ 文献/ [/ 31/ ]/ 对/ MapReduce/ 平台/ 的/ 两表/ 连接/ 算法/ 做/ 了/ 总结/ ,/ 提出/ 了/ Map/ 端/ 连接/ 、/ Reduce/ 端/ 连接/ 及/ 广播式/ 连接/ 等/ 算法/ ./ 文献/ [/ 32/ ]/ 对/ MapReduce/ 框架/ 进行/ 了/ 扩展/ ,/ 在/ Reduce/ 步骤/ 后/ 添加/ 了/ 一/ Merge/ 步骤/ 来/ 完成/ 连接/ 操作/ ,/ 提出/ 的/ Map/ -/ Reduce/ -/ Merge/ 框架/ 可以/ 同时/ 处理/ 两个/ 异构/ 数据源/ 的/ 数据/ ./ 对于/ 多表/ 连接/ ,/ 当前/ 主流/ 的/ 研究/ 集中/ 于/ 仅/ 通过/ 一个/ 任务/ 来/ 完成/ 连接/ 操作/ ./ 文献/ [/ 33/ -/ 34/ ]/ 提出/ 了/ 一对/ 多/ 复制/ 的/ 方法/ ,/ 在/ Map/ 阶段/ 结束/ 后/ ,/ 为/ 保证/ 连接/ 操作/ 的/ 局部性/ ,/ 元组/ 会/ 被/ 复制到/ 多个/ 节点/ ./ 但/ 在/ 节点/ 数/ 和/ 数据量/ 增大/ 的/ 情况/ 下/ ,/ 会/ 带来/ I/ // O/ 量/ 及/ 网络/ 传输/ 量/ 的/ 巨大/ 增长/ ./ Llama/ [/ 35/ ]/ 通过/ 预/ 排序/ 和/ 按/ 连接/ 属性/ 划分/ 数据/ 的/ 方式/ 来/ 降低/ 星型/ 连接/ 的/ 代价/ ,/ 但/ 要/ 付出/ 可观/ 的/ 预处理/ 代价/ 和/ 空间/ 代价/ ./ 不同于/ 以上/ 等值/ 连接/ 优化/ ,/ 文献/ [/ 36/ ]/ 提出/ 了/ 针对/ 任意/ 连接/ 条件/ 的/ 优化/ 模型/ ./ 以上/ 连接/ 方式/ 都/ 是/ 先/ 执行/ 连接/ ,/ 然后/ 在/ 连接/ 后/ 的/ 数据/ 上/ 执行/ 聚集/ 操作/ ./ 而/ 中国人民大学/ 的/ Dumbo/ [/ 37/ ]/ 系统/ 却/ 采用/ 了/ 另/ 一种/ 更/ 适应/ 于/ MapReduce/ 平台/ 的/ 思路/ :/ 先/ 执行/ 过滤/ 聚集/ 操作/ ,/ 再/ 基于/ 聚集/ 的/ 数据/ 执行/ 连接/ ./ 详细/ 参考/ 7.2/ 节/ ./ 6.3/ HadoopDB/ 的/ 改进/ 连接/ 优化/ 技术/ 和/ 两种/ 聚集/ 优化/ 技术/ [/ 38/ ]/ ./ HadoopDB/ 于/ 2011/ 年/ 针对/ 其/ 架构/ 提出/ 了/ 两种/ 两种/ 连接/ 优化/ 的/ 核心思想/ 都/ 是/ 尽可能/ 地/ 将/ 数据/ 的/ 处理/ 推入/ 数据库/ 层/ 执行/ ./ 第/ 1/ 种/ 优化/ 方式/ 是/ 根据/ 表与表/ 之间/ 的/ 连接/ 关系/ ,/ 通过/ 数据/ 预/ 分解/ ,/ 使/ 参与/ 连接/ 的/ 数据/ 尽可能/ 分布/ 在/ 同一/ 数据库/ 内/ (/ 参照/ 分解/ 法/ )/ ,/ 从而/ 实现/ 将/ 连接/ 操作/ 下压/ 进/ 数据库/ 内/ 执行/ ./ 该/ 算法/ 的/ 缺点/ 是/ 应用/ 场景/ 有限/ ,/ 只/ 适用/ 于/ 链式连接/ ./ 第/ ①/ 其/ 最大/ 问题/ 既/ 包括/ 扩展性/ 也/ 包括/ 性能/ ,/ 这两项/ 分别/ 取决于/ Page82/ 种/ 连接/ 方式/ 是/ 针对/ 广播式/ 连接/ 而/ 设计/ 的/ ./ 在/ 执行/ 连接/ 前/ ,/ 先/ 在/ 数据库/ 内为/ 每张/ 参与/ 连接/ 的/ 维表/ 建立/ 一张/ 临时/ 表/ ,/ 使得/ 连接/ 操作/ 尽可能/ 在/ 数据库/ 内/ 执行/ ./ 该/ 算法/ 的/ 缺点/ 是/ 较/ 多/ 的/ 网络/ 传输/ 和/ 磁盘/ I/ // O/ 操作/ ./ 两种/ 聚集/ 优化/ 技术/ 分别/ 是/ 连接/ 后/ 聚集/ 和/ 连接/ 前/ 聚集/ ./ 前者/ 是/ 执行/ 完/ Reduce/ 端/ 连接/ 后/ ,/ 直接/ 对/ 符合条件/ 的/ 记录/ 执行/ 聚集/ 操作/ ;/ 后者/ 是/ 将/ 所有/ 数据/ 先/ 在/ 数据库/ 层/ 执行/ 聚集/ 操作/ ,/ 然后/ 基于/ 聚集/ 数据/ 执行/ 连接/ 操作/ ,/ 并/ 将/ 不/ 符合条件/ 的/ 聚集/ 数据/ 做/ 减法/ 操作/ ./ 该/ 方式/ 适用/ 的/ 条件/ 有限/ ,/ 主要/ 用于/ 参与/ 连接/ 和/ 聚集/ 的/ 列/ 的/ 基数/ 相乘/ 后/ 小于/ 表/ 记录/ 数/ 的/ 情况/ ./ 总的来看/ ,/ HadoopDB/ 的/ 优化/ 技术/ 大都/ 局限性/ 较强/ ,/ 对于/ 复杂/ 的/ 连接/ 操作/ (/ 如/ 环形/ 连接/ 等/ )/ 仍/ 不能/ 下推/ 至/ 数据库/ 层/ 执行/ ,/ 并未/ 从根本上/ 解决/ 其/ 性能/ 问题/ ./ 7MapReduce/ 和/ 关系数据库/ 技术/ 的/ 融合/ 综上所述/ ,/ 当前/ 研究/ 大都/ 集中/ 于/ 功能/ 或/ 特性/ 的/ 移植/ ,/ 即/ 从/ 一个/ 平台/ 学习/ 新/ 的/ 技术/ ,/ 到/ 另/ 一/ 平台/ 重新/ 实现/ 和/ 集成/ ,/ 未/ 涉及/ 执行/ 核心/ ,/ 因此/ 也/ 没有/ 从根本上/ 解决/ 大/ 数据分析/ 问题/ ./ 鉴于/ 此/ ,/ 中国人民大学/ 高性能/ 数据库/ 实验室/ 的/ 研究/ 小组/ 采取/ 了/ 另/ 一种/ 思路/ :/ 从/ 数据/ 的/ 组织/ 和/ 查询/ 的/ 执行/ 两个/ 核心/ 层次/ 入手/ ,/ 融合/ 关系数据库/ 和/ MapReduce/ 两种/ 技术/ ,/ 设计/ 高性能/ 的/ 可/ 扩展/ 的/ 抽象/ 数据仓库/ 查询处理/ 框架/ ./ 该/ 框架/ 在/ 支持/ 高度/ 可/ 扩展/ 的/ 同时/ ,/ 又/ 具有/ 关系数据库/ 的/ 性能/ ./ 我们/ 团队/ 尝试/ 过/ 两个/ 研究/ 方向/ :/ (/ 1/ )/ 借鉴/ MapReduce/ 的/ 思想/ ,/ 使/ OLAP/ 查询/ 的/ 处理/ 能/ 像/ MapReduce/ 一样/ 高度/ 可/ 扩展/ (/ LinearDB/ 原型/ )/ ;/ (/ 2/ )/ 利用/ 关系数据库/ 的/ 技术/ ,/ 使/ MapReduce/ 在/ 处理/ OLAP/ 查询/ 时/ ,/ 逼近/ 关系数据库/ 的/ 性能/ (/ Dumbo/ 原型/ )/ ./ 7.1/ LinearDBLinearDB/ ①/ [/ 39/ ]/ 原型/ 系统/ 没有/ 直接/ 采用/ 基于/ 连接/ 的/ 星型/ 模型/ (/ 雪花/ 模型/ )/ ,/ 而是/ 对/ 其/ 进行/ 了/ 改造/ ,/ 设计/ 了/ 扩展性/ 更好/ 的/ 、/ 基于/ 扫描/ 的/ 无/ 连接/ 雪花/ 模型/ JFSS/ (/ Join/ -/ FreeSnowflakeSchema/ )/ ./ 该/ 模型/ 的/ 设计/ 借鉴/ 了/ 泛关系/ 模型/ 的/ 思想/ ,/ 采用/ 层次/ 编码/ 技术/ [/ 40/ ]/ 将维表/ 层次/ 信息压缩/ 进/ 事实/ 表/ ,/ 使得/ 事实/ 表/ 可以/ 独立/ 执行/ 维表上/ 的/ 谓词/ 判断/ 、/ 聚集/ 等/ 操作/ ,/ 从而/ 使/ 连接/ 的/ 数据/ 在/ 大规模/ 机群/ 上/ 实现/ 局部性/ ,/ 消除/ 了/ 连接/ 操作/ ./ 图/ 4/ 是/ 一个/ 星型/ 模型/ 和/ 无/ 连接/ 雪花/ 模型/ 的/ 对应/ 示意图/ ./ 在/ 执行/ 层次/ 上/ ,/ LinearDB/ 吸取/ 了/ MapReduce/ 处理/ 模式/ 的/ 设计/ 思想/ ,/ 将/ 数据仓库/ 查询/ 的/ 处理/ 抽象/ 为/ Transform/ 、/ Reduce/ 、/ Merge3/ 个/ 操作/ (/ TRM/ 执行/ 模型/ )/ :/ (/ 1/ )/ Transform/ ./ 主/ 节点/ 对/ 查询/ 进行/ 预处理/ ,/ 将/ 查询/ 中/ 作用/ 于维表/ 的/ 操作/ (/ 主要/ 是/ 谓词/ 判断/ ,/ group/ -/ by/ 聚集/ 操作/ 等/ )/ 转换/ 为/ 事实/ 表上/ 的/ 操作/ ;/ (/ 2/ )/ Reduce/ ./ 每个/ 数据/ 节点/ 并行/ 地/ 扫描/ 、/ 聚集/ 本地/ 数据/ ,/ 然后/ 将/ 处理结果/ 返回/ 给/ 主/ 节点/ ;/ (/ 3/ )/ Merge/ ./ 主/ 节点/ 对/ 各个/ 数据/ 节点/ 返回/ 的/ 结果/ 进行/ 合并/ ,/ 并/ 执行/ 后续/ 的/ 过滤/ 、/ 排序/ 等/ 操作/ ./ 基于/ TRM/ 执行/ 模型/ ,/ 查询/ 可以/ 划分/ 为/ 众多/ 独立/ 的/ 子/ 任务/ 在/ 大规模/ 机群/ 上/ 并行执行/ ./ 执行/ 过程/ 中/ ,/ 任何/ 失败/ 子/ 任务/ 都/ 可以/ 在/ 其/ 备份/ 节点/ 重新/ 执行/ ,/ 从而/ 获得/ 较/ 好/ 的/ 容错/ 能力/ ./ LinearDB/ 的/ 执行/ 代价/ 主要/ 取决于/ 对/ 事实/ 表/ 的/ Reduce/ (/ 主要/ 是/ 扫描/ )/ 操作/ ,/ 因此/ ,/ LinearDB/ 可以/ 获得/ 近乎/ 线性/ 的/ 大规模/ 可/ 扩展/ 能力/ ./ 实验/ 表明/ ,/ 其/ 性能比/ HadoopDB/ 至少/ 高出/ 一个/ 数量级/ ②/ ./ LinearDB/ 的/ 扩展/ 能力/ 、/ 容错/ 能力/ 和/ 高性能/ 在于/ 其/ 巧妙/ 地/ 结合/ 了/ 关系数据库/ 技术/ (/ 层次/ 编码/ 技术/ 、/ 泛关系/ 模式/ )/ 和/ MapReduce/ 处理/ 模式/ 的/ 设计/ 思想/ ,/ 由此/ ,/ 可以/ 看出/ ,/ 结合/ 方式/ 的/ 不同/ 可以/ 导致系统/ 能力/ 的/ 巨大/ 差异/ ./ 7.2/ DumboDumbo/ [/ 37/ ]/ 的/ 核心思想/ 是/ 根据/ MapReduce/ 的/ “/ 过滤/ -/ >/ 聚集/ ”/ 的/ 处理/ 模式/ ,/ 对/ OLAP/ 查询/ 的/ 处理/ 进行/ 改造/ ,/ 使/ 其/ 适应/ 于/ MapReduce/ 框架/ ./ Dumbo/ 采用/ 了/ 类似/ 于/ LinearDB/ 的/ 数据组织/ 模式/ —/ —/ —/ 利用/ 层次/ 编码/ 技术/ 将维表/ 信息压缩/ 进/ 事实/ 表/ ,/ 区别/ 在于/ Dumbo/ 采用/ 了/ 更加/ 有效/ 的/ 编码方式/ ,/ 并/ 针对/ Hadoop/ 分布式文件系统/ 的/ 特点/ 对/ 数据/ 的/ 存储/ 进行/ 了/ 优化/ ./ 在/ 执行/ 层次/ 上/ ,/ Dumbo/ 对/ MapReduce/ 框架/ 进行/ 了/ 扩展/ ,/ 设计/ 了/ 新/ 的/ OLAP/ 查询处理/ 框架/ —/ —/ —/ TMRP/ (/ Transform/ -/ >/ Map/ -/ >/ Reduce/ -/ >/ Postpro/ -/ cess/ )/ 处理/ 框架/ (/ 如图/ 5/ 所示/ )/ ./ 在/ 该/ 框架/ 中/ ,/ 主/ 节点/ 首先/ 对/ 查询/ 进行/ 转换/ ,/ 生成/ 一个/ MapReduce/ 任务/ 来/ 执行/ 查询/ ./ 该/ 任务/ 在/ Map/ 阶段/ 以/ 流水线/ 方式/ 扫描/ 、/ 聚集/ 本地/ 数据/ ,/ 并/ 只/ 将/ 本地/ 的/ 聚集/ 数据/ 传至/ Re/ -/ duce/ 阶段/ ,/ 来/ 进行/ 数据/ 的/ 合并/ 及/ 聚集/ 、/ 排序/ 等/ 操作/ ./ 在/ Postprocess/ 阶段/ ,/ 主/ 节点/ 在/ 数据/ 节点/ 上传/ 的/ 聚集/ 数据/ 之上/ 执行/ 连接/ 操作/ ./ 实验/ 表明/ ,/ Dumbo/ 性能/ 远超/ Hadoop/ 和/ HadoopDB/ ./ 由此/ 我们/ 可以/ 看出/ ,/ 复杂/ 的/ OLAP/ 查询/ 在/ ①/ ②/ Page9/ 图/ 4/ 对比/ :/ 一个/ 典型/ 星型/ 模型/ 与其/ 对应/ 的/ 无/ 连接/ 雪花/ 模型/ MapReduce/ 框架/ 下/ 也/ 可以/ 获得/ 接近/ 甚至/ 超越/ 关系数据库/ 的/ 性能/ ,/ 其/ 关键在于/ 如何/ 有效/ 地/ 结合/ 关系数据库/ 和/ MapReduce/ 两种/ 技术/ ./ 仅仅/ 停留/ 于/ 表层/ 的/ 移植/ 和/ 集成/ 是/ 难以/ 从根本上/ 解决/ 大/ 数据分析/ 问题/ 的/ ./ 我们/ 在/ 文献/ [/ 41/ ]/ 的/ 研究/ 中/ 也/ 展示/ 了/ 如何/ 基于/ 这种/ 新/ 的/ 数据组织/ 方式/ 来/ 实现/ 复杂/ 分析/ 操作/ —/ —/ —/ 百分位/ 数/ 的/ 高效/ 计算/ 问题/ ./ LinearDB/ 和/ Dumbo/ 虽然/ 基本/ 可以/ 达到/ 预期/ 的/ 设计/ 目标/ ,/ 但/ 两者/ 都/ 需要/ 对/ 数据/ 进行/ 预处理/ ,/ 其/ 预处理/ 代价/ 是/ 普通/ 加载/ 时间/ 的/ 7/ 倍/ 左右/ ./ 因此/ 其/ 应对/ 变化/ 的/ 能力/ 还/ 较弱/ ,/ 这是/ 我们/ 未来/ 的/ 工作/ 内容/ 之一/ ./ 8/ 研究/ 展望/ 当前/ 3/ 个/ 方向/ 的/ 研究/ 都/ 不能/ 完美/ 地/ 解决/ 大/ 数据分析/ 问题/ ,/ 也/ 就/ 意味着/ 每个/ 方向/ 都/ 有/ 极具/ 挑战性/ 的/ 工作/ 等待/ 着/ 我们/ ./ 对/ 并行/ 数据库/ 来说/ ,/ 其/ 扩展性/ 近年/ 虽/ 有/ 较大/ 改善/ (/ 如/ Greenplum/ 和/ AsterData/ 都/ 是/ 面向/ PB/ 级/ 数据/ 规模/ 设计/ 开发/ 的/ )/ ,/ 但/ 距离/ 大/ 数据/ 的/ 分析/ 需求/ 仍/ 有/ 较大/ 差距/ ./ 因此/ ,/ 如何/ 改善/ 并行/ 数据库/ 的/ 扩展/ 能力/ 是/ 一项/ 非常/ 有/ 挑战/ 的/ 工作/ ,/ 该项/ 研究/ 将/ 同时/ 涉及/ 数据/ 一致性/ 协议/ 、/ 容错性/ 、/ 性能/ 等/ 数据库/ 领域/ 的/ Page10/ 图/ 5Dumbo/ 架构/ (/ 深灰色/ 部分/ 是/ 新增/ 模块/ ,/ 诸多方面/ ./ 混合式/ 架构/ 方案/ 可以/ 复用/ 已有/ 成果/ ,/ 开发量/ 较/ 小/ ./ 但/ 只是/ 简单/ 的/ 功能/ 集成/ 似乎/ 并/ 不能/ 有效/ 解决/ 大/ 数据/ 的/ 分析/ 问题/ ,/ 因此/ 该/ 方向/ 还/ 需要/ 更加/ 深入/ 的/ 研究/ 工作/ ,/ 比如/ 从/ 数据模型/ 及/ 查询处理/ 模式/ 上/ 进行/ 研究/ ,/ 使/ 两者/ 能/ 较/ 自然/ 地/ 结合/ 起来/ ,/ 这/ 将/ 是/ 一项/ 非常/ 有/ 意义/ 的/ 工作/ ./ 中国人民大学/ 的/ Dumbo/ [/ 37/ ]/ 系统/ 即/ 是/ 在/ 深层/ 结合/ 方向/ 上/ 努力/ 的/ 一个/ 例子/ ./ 相比/ 于/ 前/ 两者/ ,/ MapReduce/ 的/ 性能/ 优化/ 进展/ 迅速/ ,/ 其/ 性能/ 正/ 逐步/ 逼近/ 关系数据库/ ./ 该/ 方向/ 的/ 研究/ 又/ 分为/ 两个/ 方向/ :/ 理论界/ 侧重于/ 利用/ 关系数据库/ 技术/ 及/ 理论/ 改善/ MapReduce/ 的/ 性能/ ;/ 工业界/ 侧重于/ 基于/ MapReduce/ 平台/ 开发/ 高效/ 的/ 应用软件/ ./ 针对/ 数据仓库/ 领域/ ,/ 我们/ 认为/ 如下/ 几个/ 研究/ 方向/ 比较/ 重要/ ,/ 且/ 目前/ 研究/ 还/ 较/ 少/ 涉及/ :/ (/ 1/ )/ 多维/ 数据/ 的/ 预计/ 算/ ./ MapReduce/ 更/ 多/ 针对/ 的/ 是/ 一次性/ 分析/ 操作/ ./ 大/ 数据/ 上/ 的/ 分析/ 操作/ 虽然/ 难以预测/ ,/ 但/ 传统/ 的/ 分析/ ,/ 如/ 基于/ 报表/ 和/ 多维/ 数据/ 的/ 分析/ 仍/ 占多数/ ./ 因此/ ,/ MapReduce/ 平台/ 也/ 可以/ 利用/ 预计/ 算/ 等/ 手段/ 加快/ 数据分析/ 的/ 速度/ ./ 基于/ 存储空间/ 的/ 考虑/ (/ 可以/ 想象/ ,/ 在/ 爆炸/ 数据/ 之上/ 计算/ 数据/ 立方体/ 需要/ 付出/ 昂贵/ 的/ 存储空间/ 代价/ )/ ,/ MOLAP/ 是/ 不/ 可取/ 的/ ,/ 混合式/ OLAP/ (/ HOLAP/ )/ 应该/ 是/ MapReduce/ 平台/ 的/ 优选/ OLAP/ 实现/ 方案/ ./ 具体/ 研究/ 如/ :/ ①/ 基于/ MapReduce/ 框架/ 的/ 高效/ Cube/ 计算/ 算法/ ;/ ②/ 物化/ 视图/ 的/ 选择/ 问题/ ,/ 即/ 物化/ 哪些/ 数据/ ;/ ③/ 不同/ 分析/ 操作/ 的/ 物化/ 手段/ (/ 比如/ 预测/ 分析/ 操作/ 的/ 物化/ )/ 及/ 如何/ 基于/ 物化/ 的/ 数据/ 进行/ 复杂/ 分析/ 操作/ (/ 如/ 数据/ 访问/ 路径/ 的/ 选择/ 问题/ )/ ./ (/ 2/ )/ 各种/ 分析/ 操作/ 的/ 并行/ 化/ 实现/ ./ 大/ 数据分析/ 需要/ 高效/ 的/ 复杂/ 统计分析/ 功能/ 的/ 支持/ ./ IBM/ 将/ 开源/ 统计分析/ 软件/ R/ 集成/ 进/ Hadoop/ 平台/ [/ 42/ ]/ ,/ 增强/ 了/ Hadoop/ 的/ 统计分析/ 功能/ ./ 但/ 更具/ 挑战性/ 的/ 问题/ 是/ ,/ 如何/ 基于/ MapReduce/ 框架/ 设计/ 可/ 并行/ 化/ 的/ 、/ 高效/ 的/ 分析/ 算法/ ./ 尤其/ 需要/ 强调/ 的/ 是/ ,/ 鉴于/ 移动/ 数据/ 的/ 巨大/ 代价/ ,/ 这些/ 算法/ 应/ 基于/ 移动/ 计算/ 的/ 方式/ 来/ 实现/ ./ (/ 3/ )/ 查询/ 共享/ ./ MapReduce/ 采用/ 步步/ 物化/ 的/ 处理/ 方式/ ,/ 导致/ 其/ I/ // O/ 代价/ 及/ 网络/ 传输/ 代价/ 较/ 高/ ./ 一种/ 有效/ 的/ 降低/ 该/ 代价/ 的/ 方式/ 是/ 在/ 多个/ 查询/ 间/ 共享/ 物化/ 的/ 中间/ 结果/ ,/ 甚至/ 原始数据/ ,/ 以/ 分摊/ 代价/ 并/ 避免/ 重复/ 计算/ ./ 因此/ 如何/ 在/ 多/ 查询/ 间/ 共享/ 中间/ 结果/ 将/ 是/ 一项/ 非常/ 有/ 实际/ 应用/ 价值/ 的/ 研究/ ./ (/ 4/ )/ 用户/ 接口/ ./ 如何/ 较/ 好/ 地/ 实现/ 数据分析/ 的/ 展示/ 和/ 操作/ ,/ 尤其/ 是/ 复杂/ 分析/ 操作/ 的/ 直观/ 展示/ ./ (/ 5/ )/ Hadoop/ 可靠性/ 研究/ ./ 当前/ Hadoop/ 采用/ 主从/ 结构/ ,/ 由此/ 决定/ 了/ 主/ 节点/ 一旦/ 失效/ ,/ 将会/ 出现/ 整个/ 系统/ 失效/ 的/ 局面/ ./ 因此/ ,/ 如何/ 在/ 不/ 影响/ Hadoop/ 现有/ 实现/ 的/ 前提/ 下/ ,/ 提高/ 主/ 节点/ 的/ 可靠性/ ,/ 将/ 是/ 一项/ 切实/ 的/ 研究/ ./ (/ 6/ )/ 数据压缩/ ./ MapReduce/ 的/ 执行/ 模型/ 决定/ 了/ 其/ 性能/ 取决于/ I/ // O/ 和/ 网络/ 传输/ 代价/ ./ 文献/ [/ 11/ ]/ 在/ 比较/ 并行/ 数据库/ 和/ MapReduce/ 基于/ 压缩/ 数据/ 的/ 性能/ 时/ ,/ 发现/ 压缩/ 技术/ 并/ 没有/ 改善/ Hadoop/ 的/ 性能/ ①/ ./ 但/ 实际/ 情况/ 是/ ,/ 压缩/ 不仅/ 可以/ 节省/ 空间/ ,/ 节省/ I/ // O/ 及/ 网络带宽/ ,/ 还/ 可以/ 利用/ 当前/ CPU/ 的/ 多/ 核/ 并行计算/ 能力/ ,/ 平衡/ I/ // O/ 和/ CPU/ 的/ 处理/ 能力/ ,/ 从而/ 提高/ 性能/ ./ 比如/ 并行/ 数据库/ 利用/ 数据压缩/ 后/ ,/ 性能/ 往往/ 可以/ 大幅/ 提升/ ./ 此后/ ,/ 文献/ [/ 25/ -/ 26/ ]/ 的/ 研究/ 成功/ 地/ 利用/ 压缩/ 技术/ 提升/ 了/ Hadoop/ 的/ 性能/ ./ 但/ 这些/ 研究/ 都/ 基于/ 各自/ 的/ 存储/ 模型/ ,/ 而/ 非/ Hadoop/ 的/ 默认/ 存储/ 模式/ (/ 行存/ 模型/ )/ ./ 因此/ ,/ MapReduce/ 上/ 的/ 压缩/ 是/ 一个/ 尚待/ 研究/ 的/ 重要/ 问题/ ./ (/ 7/ )/ 多维/ 索引/ 研究/ ./ 如何/ 基于/ MapReduce/ 框架/ 实现/ 多维/ 索引/ ,/ 加快/ 多维/ 数据/ 的/ 检索/ 速度/ ./ ①/ 原因/ 未知/ ./ Page11/ 当然/ ,/ 仍/ 有/ 许多/ 其它/ 研究/ 工作/ ,/ 比如/ 基于/ Hadoop/ 的/ 实时/ 数据分析/ 、/ 弹性/ 研究/ 、/ 数据/ 一致性/ 研究/ 等/ ,/ 都/ 是/ 非常/ 有/ 挑战/ 和/ 意义/ 的/ 研究/ ,/ 限于/ 篇幅/ 我们/ 不再/ 赘述/ ./ 9/ 总结/ 本文/ 对大/ 数据分析/ 的/ 主流/ 实现/ 平台/ (/ 并行/ 数据库/ 、/ MapReduce/ 及/ 两者/ 的/ 混合/ 架构/ )/ 进行/ 了/ 评价/ 、/ 归纳/ 与/ 对比/ 分析/ ,/ 介绍/ 了/ 中国人民大学/ 在/ 大/ 数据分析/ 方面/ 的/ 研究/ ,/ 并/ 对/ 当前/ 的/ 研究/ 进行/ 了/ 归纳/ ./ 从文中/ 可以/ 看出/ ,/ 每种/ 分析/ 平台/ 都/ 不是/ 完美/ 的/ ,/ 在/ 大/ 数据/ 面前/ ,/ 都/ 有/ 很长/ 的/ 路/ 要/ 走/ ./ 大/ 数据分析/ 迫使/ 我们/ 反思/ 传统/ 的/ 数据仓库/ 架构/ ,/ 虚心/ 地/ 研究/ MapReduce/ 等/ 新生/ 平台/ ,/ 以站/ 在/ 更/ 高/ 的/ 层次/ 来/ 思考问题/ ,/ 从而/ 找到/ 适应/ 时代/ 需求/ 的/ 数据仓库/ 架构/ ./ 

