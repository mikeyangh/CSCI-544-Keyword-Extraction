Page1/ 云/ 计算环境/ 下/ 基于/ 社区/ 聚集/ 的/ 绿色/ 消息/ 系统/ 李伟/ 1/ )/ ,/ 2/ )/ 虎嵩林/ 1/ )/ 刘冬梅/ 2/ )/ ,/ 3/ )/ 李/ 锦涛/ 1/ )/ 1/ )/ (/ 中国科学院计算技术研究所/ 前瞻/ 研究/ 实验室/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 研究生院/ 北京/ 100049/ )/ 3/ )/ (/ 国网/ 信息/ 通信/ 有限公司/ 北京/ 100761/ )/ 摘要/ 云/ 计算环境/ 下/ ,/ 消息/ 系统/ 的/ 客户端/ 点/ 部署/ 方式/ 对系统/ 的/ 性能/ 和/ 能耗/ 有着/ 重大/ 的/ 影响/ ./ 不合理/ 的/ 部署/ 会/ 使/ 消息/ 系统/ 内/ 的/ 路由/ 节点/ 承受/ 较大/ 的/ 负载/ ,/ 增加/ 系统/ 的/ 能耗/ ./ 现有/ 的/ 部署/ 方法/ 往往/ 只/ 考虑/ 负载/ 均衡/ 或者/ 基于/ 兴趣/ 的/ 部署/ ,/ 忽略/ 了/ 客户端/ 点/ 之间/ 存在/ 的/ 复杂/ 通信/ 关联/ 对系统/ 造成/ 的/ 影响/ ./ 文中/ 提出/ 一种/ 基于/ 社区/ 聚集/ 的/ 部署/ 方法/ ,/ 能/ 根据/ 客户端/ 点/ 之间/ 的/ 消息/ 通信/ 强度/ 划分/ 社区/ ,/ 并/ 通过/ 社区/ 聚集/ 的/ 方法/ ,/ 提高/ 系统/ 性能/ ,/ 同时/ 有效/ 地/ 降低/ 路由/ 节点/ CPU/ 以及/ 通信/ 链路/ 的/ 能耗/ ./ 实验/ 证明/ 该/ 方法/ 能/ 有效/ 提高/ 消息/ 系统/ 的/ 消息/ 转发/ 效率/ ,/ 并/ 能/ 降低/ 路由/ 节点/ 的/ 消息/ 处理/ 负载/ 和/ 通信/ 链路/ 中/ 的/ 消息/ 量/ ,/ 减小/ 系统/ 能耗/ ./ 这为/ 绿色/ 消息/ 系统/ 的/ 研究/ 提供/ 了/ 一个/ 新思路/ ./ 关键词/ 云/ 计算/ ;/ 消息/ 系统/ ;/ 社区/ 划分/ ;/ 社区/ 聚集/ ;/ 能耗/ ;/ 绿色/ 计算/ 1/ 引言/ 作为/ 一种/ 全新/ 的/ 网络应用/ 模式/ ,/ 云/ 计算/ 的/ 兴起/ 正在/ 逐渐/ 改变/ 着/ 整个/ 计算机/ 产业/ 的/ 发展/ [/ 1/ ]/ ./ 当前/ ,/ Google/ 、/ Yahoo/ 等/ 知名企业/ 都/ 推出/ 了/ 自己/ 的/ 云/ 计算/ 解决方案/ ./ 消息/ 系统/ [/ 2/ ]/ 作为/ 其中/ 的/ 关键/ 组成/ ,/ 在/ 云/ 计算/ 系统/ 中/ 也/ 发挥/ 着/ 越来越/ 重要/ 的/ 作用/ ./ 例如/ ,/ Google/ 的/ 消息/ 系统/ GooPS/ [/ 3/ ]/ 整合/ 了/ Google/ 提供/ 给/ 用户/ 的/ 网络服务/ ,/ Yahoo/ 则/ 用/ 其/ 消息/ 系统/ PNuts/ [/ 4/ ]/ 作为/ 其云/ 计算/ 架构/ 的/ 消息/ 总线/ ./ 消息/ 系统/ 由/ 客户端/ 点/ 和/ 中间/ 路由/ 组织/ 两/ 部分/ 组成/ ,/ 其中/ 客户端/ 点/ 作为/ 云/ 计算/ 系统/ 中上层/ 应用/ 或/ 服务/ 的/ 代理/ ,/ 接入/ 到/ 中间/ 路由/ 组织/ 的/ 节点/ 中/ ,/ 向/ 中间/ 路由/ 组织/ 发送/ 消息/ 并/ 从/ 中间/ 路由/ 组织/ 接收/ 消息/ ./ 中间/ 路由/ 组织/ 则/ 负责/ 将/ 客户端/ 点/ 发送/ 的/ 消息/ 路由/ 到/ 接收端/ 点处/ ./ 云/ 计算/ 系统/ 通常/ 都/ 规模/ 巨大/ ,/ 因而/ 其/ 消息/ 系统/ 有/ 很大/ 的/ 能耗/ ,/ 在/ 能源/ 问题/ 逐渐/ 突出/ 的/ 今天/ ,/ 如何/ 优化/ 降低/ 系统/ 的/ 能耗/ 具有/ 重要/ 的/ 意义/ ./ 消息/ 系统/ 的/ 能耗/ 主要/ 由/ 中间/ 路由/ 组织/ ,/ 也/ 就是/ 路由/ 节点/ 和/ 通信/ 链路/ 的/ 能耗/ 组成/ ./ 当前/ ,/ 节点/ 级/ 节能/ 策略/ 包括/ 根据/ 作业/ 负载/ 动态/ 调节/ CPU/ 的/ 电压/ 和/ 时钟/ 频率/ [/ 5/ ]/ ,/ 在/ 网络设备/ 上/ 设置/ 设备/ 的/ 唤醒/ -/ 睡眠/ 条件/ [/ 6/ ]/ 、/ 动态/ 调节/ 网络/ 链路/ 速率/ [/ 7/ ]/ 等/ 方式/ ./ 由于/ 部署/ 在/ 中间/ 路由/ 组织/ 上/ 的/ 客户端/ 点/ 之间/ 不可避免/ 地/ 存在/ 着/ 消息/ 通信/ ,/ 这些/ 消息/ 在/ 中间/ 路由/ 组织/ 上/ 传送/ 时/ ,/ 会/ 给/ 路由/ 传递/ 过程/ 中/ 经过/ 的/ 节点/ 带来/ 路由/ 负载/ ,/ 影响/ 系统/ 的/ 能耗/ ./ 一个/ 优化/ 的/ 客户端/ 点/ 部署/ 方式/ ,/ 能/ 减少/ 中间/ 路由/ 组织/ 中/ 传递/ 的/ 消息/ 量/ ,/ 进而/ 减小/ 路由/ 节点/ 的/ CPU/ 的/ 消息/ 负载/ ,/ 在/ 提高/ 系统/ 性能/ 的/ 同时/ ,/ 有效/ 降低/ 系统/ 能耗/ ./ 然而/ ,/ 当前/ 的/ 部署/ 策略/ 往往/ 简单/ 地/ 从/ 负载/ 均衡/ 方面/ ,/ 或者/ 从/ 客户端/ 点/ 接收/ 消息/ 的/ 相似性/ [/ 8/ ]/ 考虑/ ,/ 忽视/ 了/ 客户端/ 点/ 之间/ 的/ 复杂/ 通信/ 关系/ 对系统/ 的/ 能耗/ 的/ 影响/ ./ 本文/ 通过/ 分析/ 客户端/ 点/ 之间/ 的/ 通信/ 关系/ ,/ 在/ 考虑/ 客户端/ 点/ 部署/ 代价/ 和/ 负载/ 均衡/ 的/ 基础/ 上/ ,/ 提出/ 了/ 基于/ 社区/ 的/ 客户端/ 点/ 部署/ 算法/ ./ 该/ 算法/ 通过/ 构建/ 客户端/ 点/ 的/ 通信/ 关系/ 网络/ ,/ 并/ 对/ 其/ 进行/ 社区/ 划分/ 和/ 物理/ 上/ 的/ 聚集/ ,/ 使/ 消息/ 关联/ 紧密/ 的/ 客户端/ 点/ (/ 社区/ )/ 之间/ 的/ 消息/ 能/ 通过/ 较少/ 的/ 中间/ 路由/ 节点/ 完成/ 路由/ ./ 社区/ 聚集/ 在/ 提高/ 消息/ 转发/ 的/ 效率/ 和/ 系统/ 性能/ 的/ 同时/ ,/ 也/ 能/ 有效/ 减小/ 中间/ 的/ 路由/ 节点/ 的/ 消息/ 负载/ 和/ 通信/ 链路/ 中/ 的/ 消息/ 量/ ./ 这/ 从/ 两个/ 方面/ 降低/ 了/ 系统/ 能耗/ :/ (/ 1/ )/ 消息/ 负载/ 的/ 减少/ 有利于/ 路由/ 节点/ 根据/ 负载/ 动态/ 调节/ CPU/ 的/ 时钟/ 频率/ 和/ 电压/ ,/ 来/ 降低/ 路由/ 节点/ 的/ 能耗/ ;/ (/ 2/ )/ 通信/ 链路/ 中/ 消息/ 量/ 的/ 减少/ 有利于/ 链路/ 采用/ 自/ 适应/ 链路/ 速率/ 机制/ [/ 9/ ]/ 来/ 动态/ 调节/ 链路/ 速率/ ,/ 在/ 基本/ 不/ 影响/ 消息传递/ 效率/ 的/ 情况/ 下/ ,/ 降低/ 通信/ 链路/ 的/ 能耗/ ./ 在/ 进行/ 物理/ 上/ 的/ 聚集/ 时/ ,/ 结合/ 考虑/ 聚集/ 过程/ 中/ 客户端/ 点/ 部署/ 的/ 代价/ ,/ 我们/ 提出/ 一种/ 启发式/ 的/ 聚集/ 策略/ ,/ 在/ 系统/ 性能/ 和/ 聚集/ 代价/ 之间/ 求得/ 平衡/ ,/ 使得/ 算法/ 能/ 在/ 较/ 小/ 的/ 聚集/ 代价/ 下/ 尽可能/ 地/ 提升/ 系统/ 性能/ ./ 本文/ 的/ 主要/ 贡献/ 是/ :/ (/ 1/ )/ 分析/ 了/ 云/ 计算环境/ 下/ ,/ 消息/ 系统/ 客户端/ 点/ 部署/ 方式/ 对系统/ 性能/ 的/ 影响/ ,/ 提出/ 了/ 基于/ 社区/ 的/ 客户端/ 点/ 聚集/ 部署/ 算法/ ,/ 从/ 两个/ 方面/ 降低/ 了/ 系统/ 能耗/ ./ (/ 2/ )/ 在/ 模型/ 中/ 结合/ 考虑/ 聚集/ 代价/ ,/ 提出/ 一种/ 启发式/ 的/ 聚集/ 策略/ ,/ 在/ 系统/ 性能/ 和/ 聚集/ 代价/ 间/ 求得/ 平衡/ ./ (/ 3/ )/ 在/ 实验/ 中/ ,/ 我们/ 模拟/ 了/ 不同/ 的/ 参数设置/ ,/ 验证/ 算法/ 在/ 不同/ 实验/ 设定/ 下/ 的/ 效果/ ,/ 实验/ 显示/ 我们/ 的/ 算法/ 是/ 通用/ 和/ 有效/ 的/ ./ 本文/ 第/ 2/ 节/ 简要/ 介绍/ 与/ 本文/ 有关/ 的/ 相关/ 工作/ ;/ 第/ 3/ 节分/ 3/ 个/ 步骤/ ,/ 详细/ 介绍/ 基于/ 社区/ 的/ 客户端/ 点/ 部署/ 算法/ ,/ 包括/ 客户端/ 点/ 的/ 关系/ 网络/ 构建/ 、/ 社区/ 划分/ 和/ 客户端/ 点/ 的/ 社区/ 物理/ 聚集/ ;/ 第/ 4/ 节/ 验证/ 算法/ 在/ 各种/ 不同/ 设置/ 下/ 的/ 实验/ 性能/ ,/ 包括/ 不同/ 通信/ 关联/ 模式/ 和/ 不同/ 集群/ 组成/ ;/ 最后/ 对/ 全文/ 进行/ 总结/ ./ 2/ 相关/ 工作/ 2.1/ 绿色/ 消息/ 系统/ 的/ 节能/ 方法/ 消息/ 系统/ (/ MessagingSystem/ )/ 由/ 客户端/ 点/ 和/ 中间/ 路由/ 节点/ 组织/ 组成/ [/ 2/ ]/ ./ 客户端/ 点/ 之间/ 通过/ 发送/ 消息/ 和/ 接收/ 消息/ 进行/ 通信/ ./ 客户端/ 点先/ 向/ 其/ 连接/ 的/ 路由/ 节点/ 注册/ 感兴趣/ 的/ 事件/ 类型/ ,/ 当/ 中间/ 路由/ 组织/ 中有/ 这类/ 事件/ 的/ 消息/ 时/ ,/ 这个/ 消息/ 会/ 被/ 路由/ 节点/ 路由/ 到/ 对/ 这类/ 事件/ 感兴趣/ 的/ 客户端/ 处/ ./ 路由/ 节点/ 则/ 负责/ 消息/ 的/ 路由/ ./ 消息/ 系统/ 的/ 主要/ 优势/ 是/ 它/ 实现/ 了/ 客户端/ 点/ 之间/ 的/ 松/ 耦合/ ./ 客户端/ 之间/ 不用/ 知道/ 对方/ 是/ 谁/ 以及/ 对方/ 在/ 哪/ ,/ 只/ 依赖/ 消息/ 进行/ 交互/ ./ 消息/ 系统/ 可以/ 是/ 集中式/ 的/ ,/ 也/ 可以/ 是/ 分布式/ 的/ ./ 集中式/ 的/ 系统/ 只有/ 一个/ 中间/ 路由/ 节点/ ,/ 分布式/ 的/ 事件/ 系统/ 则/ 有/ 多个/ 中间/ 路由/ 节点/ ,/ 并/ 通过/ 通信/ 链路/ 连接/ ./ 消息/ 系统/ 已经/ 被/ 广泛应用/ 在/ 各类/ 应用/ 和/ 系统/ 中/ ,/ 例如/ 业务流程/ 管理/ (/ BPM/ )/ [/ 10/ -/ 11/ ]/ 、/ 流/ 处理/ [/ 12/ ]/ 、/ 自动/ 服务/ 组合/ [/ 13/ ]/ 、/ Google/ 和/ Yahoo/ 的/ 云/ 计算/ 平台/ 等/ ./ 当前/ ,/ 降低/ 计算机系统/ 能耗/ 已经/ 成为/ 计算机领域/ 备受/ 关注/ 的/ 研究课题/ 之一/ [/ 14/ ]/ ./ 现在/ 主流/ 的/ 能耗/ 管/ Page3/ 理/ 机制/ 可以/ 分为/ 两种/ :/ 睡眠/ -/ 唤醒/ 机制/ 和/ 动态/ 速率/ 调节/ 机制/ ./ 睡眠/ -/ 唤醒/ 机制/ [/ 15/ -/ 16/ ]/ 是/ 指/ 在/ 系统/ 运行/ 中/ ,/ 将/ 部分/ 耗能/ 资源/ 置于/ 睡眠/ 或/ 关闭/ 状态/ ,/ 以/ 减少/ 系统/ 空闲/ 时/ 的/ 能量消耗/ ;/ 动态/ 速率/ 调节/ 机制/ 则/ 是/ 指/ 系统/ 根据/ 负载/ 情况/ ,/ 动态/ 的/ 调节/ 系统/ 处理/ 速率/ ,/ 使/ 系统/ 能够/ 在/ 低/ 速率/ 下/ 运行/ ,/ 以/ 节省/ 能耗/ ./ 绿色/ 消息/ 系统/ 可以/ 从/ 两个/ 方面/ 进行/ 节能/ :/ 一是/ 引入/ 计算机网络/ 系统/ 的/ 节能/ 方法/ ,/ 这/ 包括/ 两个/ 层面/ 的/ 策略/ :/ 节点/ 级/ 的/ 节能/ 策略/ 和/ 网络/ 级/ 的/ 节能/ 策略/ ./ 节点/ 级/ 的/ 节能/ 策略/ 又/ 包括/ 两个/ 方面/ :/ 路由/ 节点/ 的/ 节能/ 和/ 通信/ 链路/ 的/ 节能/ ./ 节点/ 级/ 的/ 节能/ 策略/ 可以/ 通过/ 能耗/ 优化/ 模块/ 来/ 部署/ 其/ 节能/ 策略/ :/ 通过/ 观测/ 子/ 模块/ 的/ 系统/ 信息/ ,/ 结合/ 系统/ 部署/ 的/ 节能/ 策略/ ,/ 来/ 调节/ 系统/ 的/ 参数/ ,/ 从而/ 实现/ 能耗/ 的/ 控制/ ./ 当前/ ,/ 处理器/ 的/ 节能/ 技术/ 目前/ 已经/ 比较/ 成熟/ ./ 其/ 节能/ 策略/ ,/ 一般/ 是/ 根据/ 负载/ 来/ 调节/ CPU/ 的/ 电压/ 和/ 时钟/ 频率/ ./ 具体做法/ 可以/ 是/ 静态/ 地/ 设置/ 阈值/ ,/ 或是/ 动态/ 地/ 根据/ 负载/ 来/ 预测/ 调节/ 电压/ 和/ 时钟/ 频率/ ./ Yao/ 等/ 人/ [/ 17/ ]/ 把/ 能耗/ 优化/ 问题/ 归结/ 成/ 最优/ 任务调度/ 问题/ ,/ 对/ 处理器/ 能耗/ 优化/ 研究/ 产生/ 了/ 重大/ 影响/ ./ Linux/ 平台/ 下/ 内核/ 级/ 的/ 实时/ 能耗/ 管理器/ OndemandGovernor/ [/ 18/ ]/ 能/ 连续/ 监控/ CPU/ 的/ 利用率/ ,/ 来/ 决策/ 时钟/ 频率/ 和/ 电压/ 的/ 变化/ ,/ 这个/ 管理器/ 已经/ 加入/ 到/ Linux/ 内核/ 版本/ 2.6/ ./ 10/ 中/ ./ 对/ 通信/ 链路/ 而言/ ,/ 常用/ 的/ 节能/ 机制/ 有/ 速率/ 缩放/ 机制/ [/ 19/ -/ 20/ ]/ 和/ 自/ 适应/ 链路/ 机制/ [/ 9/ ]/ ./ 以太网/ 的/ 链路/ 在/ 速率/ 增加/ 时/ 能耗/ 会/ 增加/ ,/ 而/ 在/ 处于/ 空闲/ 或者/ 链路/ 利用率/ 为/ 100/ %/ 时/ 功耗/ 几乎/ 相同/ [/ 9/ ]/ ./ 因而/ 当/ 链路/ 的/ 利用率/ 较/ 低时/ ,/ 降低/ 链路/ 速率/ 能/ 在/ 基本/ 不/ 影响/ 性能/ 的/ 情况/ 下降/ 低能耗/ ./ 网络/ 级/ 的/ 节能/ 策略/ 主要/ 从/ 引入/ 新/ 的/ 网络协议/ 、/ 路由/ 调度/ 或/ 网络/ 架构/ 等/ 方面/ 来/ 降低/ 能耗/ [/ 21/ -/ 23/ ]/ ./ 本文/ 提出/ 的/ 基于/ 社区/ 的/ 客户端/ 点/ 聚集/ 策略/ 主要/ 是从/ 节点/ 级/ 来/ 降低/ 节点/ CPU/ 和/ 通信/ 链路/ 的/ 能耗/ ,/ 因而/ 在/ 此/ 不/ 详述/ 网络/ 级/ 的/ 节能/ 策略/ ./ 二是/ 改变/ 消息/ 系统/ 的/ 资源分配/ 方式/ ,/ 通过/ 资源/ 优化/ 部署/ 降低/ 能耗/ ./ 消息/ 系统/ 的/ 能耗/ 与/ 消息/ 系统/ 的/ 客户端/ 点/ 的/ 部署/ 方式/ 有着/ 重大/ 关联/ ./ 客户端/ 点/ 的/ 部署/ 影响/ 着/ 中间/ 路由/ 组织/ 中路/ 由/ 节点/ 的/ CPU/ 的/ 负载/ 和/ 通信/ 链路/ 的/ 链路/ 利用率/ ,/ 进而/ 影响/ 着/ 系统/ 的/ 能耗/ ./ 可以/ 认为/ ,/ 合理/ 的/ 客户端/ 点/ 部署/ 策略/ 是从/ 应用层/ 来/ 降低/ 消息/ 系统/ 的/ 能耗/ ./ 当前/ 消息/ 系统/ 的/ 客户端/ 点/ 优化/ 部署/ 方法/ 只是/ 从/ 客户端/ 点/ 接收/ 的/ 消息/ 的/ 相似性/ 出发/ [/ 8/ ,/ 24/ ]/ ,/ 通过/ 对/ 接收/ 相同/ 或/ 相似/ 消息/ 的/ 客户端/ 点/ 进行/ 聚集/ ,/ 使得/ 发/ 往/ 这些/ 客户端/ 点/ 的/ 消息/ 能/ 共享/ 路由/ 路径/ ,/ 减少/ 系统/ 负载/ ./ 这种/ 基于/ 兴趣/ 的/ 部署/ 没有/ 考虑/ 到/ 客户端/ 点/ 在/ 同时/ 发送/ 和/ 接收/ 消息/ ,/ 忽略/ 了/ 客户端/ 点/ 在/ 消息/ 发送/ 方面/ 对系统/ 造成/ 的/ 影响/ ,/ 因而/ 有/ 可能/ 会/ 增加/ 一部分/ 消息/ 在/ 路由/ 过程/ 中/ 经过/ 的/ 路由/ 节点/ 数量/ ,/ 对系统/ 的/ 节能/ 产生/ 不利/ 影响/ ./ 基于/ 社区/ 的/ 任务/ 部署/ 将/ 客户端/ 点/ 之间/ 的/ 关系/ 用/ 一个/ 有向图/ 表示/ ,/ 同时/ 考虑/ 了/ 客户端/ 点/ 在/ 发送/ 和/ 接收/ 两/ 方面/ 对系统/ 的/ 影响/ ,/ 因而/ 更加/ 具有/ 通用性/ 和/ 可行性/ ./ 2.2/ 社区/ 划分/ 社区/ 划分/ 是/ 指/ 将/ 一个/ 网络图/ 中/ 的/ 节点/ 划分/ 成/ 几块/ ,/ 块/ 内/ 节点/ 间/ 的/ 连接/ 程度/ 相对/ 密切/ ,/ 而块间/ 节点/ 的/ 连接/ 程度/ 相对/ 稀疏/ ./ 网络/ 的/ 社区/ 划分算法/ 有/ 三类/ :/ Kerlinghan/ -/ Lin/ 算法/ [/ 25/ ]/ 、/ 谱分析/ 法/ [/ 26/ ]/ 和/ 层次/ 算法/ ./ Kerlinghan/ -/ Lin/ 算法/ 是/ 一种/ 基于/ 贪婪/ 思想/ 的/ 算法/ ,/ 它/ 首先/ 定义/ 一个/ 数值/ q/ ./ q/ 为/ 社区/ 内/ 的/ 边/ 的/ 和/ 减去/ 社区/ 之间/ 的/ 边/ 的/ 和/ ./ 然后/ 将/ 一个/ 网络图/ 随机/ 分成/ 两个/ 社区/ ,/ 计算/ q/ 值/ ,/ 并/ 进行/ 迭代/ ./ 每次/ 都/ 从/ 这/ 两个/ 社区/ 中/ 各选/ 一个/ 节点/ ,/ 进行/ 社区/ 交换/ ,/ 计算/ q/ 值/ 变化/ ,/ 直到/ q/ 值/ 达到/ 最大/ ./ Kerlinghan/ -/ Lin/ 算法/ 的/ 缺点/ 是/ 只能/ 将/ 网络/ 划分/ 成/ 2/ 个/ 大小/ 已知/ 的/ 社区/ ./ 谱分析/ 法则/ 是/ 对/ 图/ 的/ 邻接矩阵/ 的/ 某个/ 变换/ 矩阵/ 做/ 谱分析/ ,/ 分析/ 后/ 在/ 矩阵/ 中/ 数值/ 不为/ 0/ 的/ 各个/ 子/ 矩阵/ 对应/ 的/ 节点/ 即/ 为/ 各个/ 社区/ ./ 层次/ 算法/ 又/ 分为/ 分裂/ 式/ [/ 27/ -/ 28/ ]/ 和/ 聚集/ 式/ [/ 29/ ]/ 两类/ ./ 分裂/ 式/ 算法/ 先/ 将/ 整个/ 图/ 视为/ 一个/ 社区/ 并/ 定义/ 一个/ 节点/ 间/ 关联/ 强度/ 的/ 计算/ 指标/ ,/ 每次/ 移除/ 关联度/ 最小/ 的/ 一对/ 节点/ 之间/ 的/ 边/ ,/ 直到/ 所有/ 边/ 都/ 被/ 移/ 除掉/ 或者/ 停止/ ./ 聚集/ 式/ 算法/ 则/ 是/ 先/ 将/ 每个/ 节点/ 都/ 视为/ 一个/ 社区/ ,/ 每次/ 将/ 节点/ 关联度/ 最高/ 的/ 两个/ 社区/ 合并/ 成/ 一个/ 新/ 的/ 社区/ ,/ 直到/ 所有/ 的/ 社区/ 都/ 合并/ 或者/ 停止/ ./ 层次/ 算法/ 的/ 缺点/ 是/ 如果/ 不/ 知道/ 社区/ 个数/ ,/ 就/ 无法/ 确定/ 算法/ 的/ 终止/ 条件/ ./ 为/ 解决/ 这点/ ,/ Newman/ 等/ 人/ [/ 28/ ]/ 提出/ 了/ 用/ “/ 模度化/ ”/ (/ Modularity/ )/ 来/ 确定/ 分裂/ 或者/ 聚集/ 步骤/ 的/ 结束/ 点/ ./ 他们/ 的/ 算法/ 的/ 社区/ 划分/ 效果/ 较/ 好/ ,/ 因而/ 被/ 很多/ 人/ 研究/ ./ 本文/ 用该/ 算法/ 来/ 对/ 客户端/ 点/ 的/ 通信/ 关系/ 网络/ 进行/ 社区/ 划分/ ./ 3/ 算法/ 3.1/ 消息/ 系统/ 的/ 能耗/ 模型/ 如/ 前/ 所示/ ,/ 消息/ 系统/ 的/ 能耗/ 主要/ 由/ 中间/ 路由/ 组织/ 的/ 路由/ 节点/ 能耗/ 和/ 通信/ 链路/ 能耗/ 组成/ ,/ 功耗/ 模型表示/ 如下/ :/ Page4/ 其中/ ,/ 路由/ 节点/ 的/ 能耗/ Prouter/ 主要/ 来自/ 节点/ 的/ 处理器/ 、/ 内存/ 、/ 磁盘/ I/ // O/ 和/ 风扇/ 等/ ,/ 其中/ 处理器/ 和/ 内存/ 的/ 功耗/ 占/ 大部分/ [/ 17/ ]/ ;/ 通信/ 链路/ 的/ 能耗/ Plink/ 主要/ 和/ 通信/ 链路/ 的/ 速率/ 有关/ ./ 基于/ 社区/ 的/ 客户端/ 点/ 部署/ 策略/ 主要/ 是从/ 减少/ 路由/ 节点/ 的/ 消息/ 负载/ 和/ 降低/ 通信/ 链路/ 中/ 的/ 消息/ 量/ 两/ 方面/ ,/ 来/ 调节/ 路由/ 节点/ 的/ 处理器/ 能耗/ 和/ 通信/ 链路/ 能耗/ ,/ 降低/ 系统/ 能耗/ ./ 图/ 1/ 算法/ 的/ 步骤/ 3.2/ 客户端/ 点/ 的/ 通信/ 关系/ 网络/ 构建/ 客户端/ 点/ 的/ 关系/ 网络/ 可以/ 用/ 一个/ 有向图/ G/ =/ {/ V/ ,/ E/ ,/ W/ }/ 来/ 表示/ ,/ 其中/ V/ 是/ 顶点/ 集/ ,/ 表示/ 所有/ 的/ 客户端/ 点/ ;/ E/ 是/ 有/ 向/ 边集/ ,/ 表明/ 客户端/ 点/ 之间/ 的/ 消息/ 关联/ ./ 两个/ 顶点/ 之间/ 存在/ 一条/ 边/ 表示/ 这/ 两个/ 客户端/ 点间/ 存在/ 着/ 消息/ 通信/ ./ 边/ 的/ 方向/ 是从/ 消息/ 发送者/ 到/ 接收者/ ./ W/ 表示/ 边集/ 的/ 权重/ ,/ 表明/ 两个/ 客户端/ 点/ 之间/ 的/ 消息/ 通信/ 的/ 强度/ ./ 在/ 这里/ ,/ 我们/ 定义/ 权重/ w/ 为/ 单位/ 时间/ 内/ 两个/ 客户端/ 点/ 之间/ 的/ 通信量/ ./ 云/ 计算/ 系统/ 的/ 客户端/ 点/ 数量/ 庞大/ ,/ 并且/ 分布/ 在/ 不同/ 节点/ 上/ ./ 我们/ 用/ 一个/ 监控/ 端来/ 从/ 所有/ 路由/ 节点/ 收集/ 通信/ 日志/ ,/ 并/ 通过/ 通信/ 日志/ 构建/ 客户端/ 点/ 的/ 通/ 我们/ 的/ 算法/ 分为/ 3/ 个/ 步骤/ :/ (/ 1/ )/ 分析/ 客户端/ 点/ 之间/ 的/ 消息/ 关系/ ,/ 构建/ 通信/ 关系/ 网络/ ;/ (/ 2/ )/ 用/ 社区/ 划分算法/ 对/ 客户端/ 通信/ 网络/ 进行/ 划分/ ;/ (/ 3/ )/ 将/ 属于/ 同一/ 社区/ 的/ 客户端/ 点/ 部署/ 在/ 中间/ 路由/ 组织/ 的/ 邻近/ 路由/ 节点/ 上/ ,/ 进行/ 物理/ 聚集/ ,/ 提升/ 系统/ 性能/ ,/ 降低/ 能耗/ ./ 算法/ 的/ 步骤/ 如图/ 1/ 所示/ ./ 信/ 关系/ 网络/ ./ 在/ 实际/ 运行/ 中/ ,/ 客户端/ 点/ 之间/ 的/ 通信/ 关联/ 强度/ 往往/ 是/ 未知/ 的/ ,/ 并且/ 在/ 长期/ 运行/ 过程/ 中/ ,/ 这个/ 关联/ 情况/ 也/ 会/ 随着/ 时间推移/ 而/ 发生/ 改变/ ./ 但是/ ,/ 在/ 相对/ 较/ 短/ 的/ 一段时间/ 内/ ,/ 可以/ 认为/ 客户端/ 点/ 之间/ 的/ 通信/ 关系/ 是/ 稳定/ 的/ ./ 我们/ 统计/ 在/ 这/ 段时间/ 内/ 客户端/ 点/ 之间/ 的/ 消息/ 通信/ 情况/ ,/ 构建/ 客户端/ 点/ 之间/ 的/ 关系/ 网络/ ./ 当/ 通信/ 关系/ 网络/ 发生/ 较大/ 变化/ 时/ ,/ 我们/ 会/ 对/ 客户端/ 点/ 进行/ 重新部署/ ./ 在/ 3.4/ 节中/ ,/ 我们/ 介绍/ 对系统/ 性能/ 和/ 重新部署/ 代价/ 两/ 方面/ 进行/ 了/ 权衡/ 折中/ 的/ 重/ 部署/ 算法/ ,/ 以/ 在/ 较/ 小/ 的/ 部署/ 代价/ 下/ 尽可能/ 提高/ 系统/ 的/ 性能/ ./ Page53/ ./ 3/ 社区/ 划分/ 客户端/ 的/ 通信/ 关系/ 网络/ 中/ 存在/ 社区/ 结构/ (/ Com/ -/ munityStructure/ )/ ./ 社区/ 结构/ 的/ 特点/ ,/ 从/ 局部/ 看/ ,/ 是/ 节点/ 和/ 社区/ 内/ 的/ 其他/ 节点/ 关联/ 密切/ ,/ 而/ 和/ 社区/ 外/ 的/ 节点/ 的/ 关联/ 程度/ 则/ 相对/ 稀疏/ ;/ 从/ 整体/ 看/ ,/ 是/ 社区/ 内部/ 关联/ 强度/ 大于/ 社区/ 之间/ 的/ 关联/ 强度/ ./ Newman/ 等/ 在/ 2004/ 年/ 提出/ 来/ 的/ 基于/ “/ 模度化/ ”/ 的/ 社区/ 划分/ 方法/ ,/ 其/ 主要/ 思想/ 是/ :/ 在/ 某/ 一/ 划分/ 下/ ,/ 社区/ 内/ 的/ 边/ 的/ 比例/ ,/ 与/ 同/ 划分/ 下且/ 连接/ 概率/ 相同/ 的/ 随机/ 网络/ 中/ ,/ 划分/ 结构/ 内部/ 的/ 边/ 的/ 比例/ ,/ 这/ 两个/ 的/ 差值/ 越大/ ,/ 表明/ 社区/ 划分/ 的/ 结果/ 越好/ ./ 这个/ 差值/ 被/ 定义/ 为/ 模度化/ ./ 算法/ 通过/ 节点/ 的/ 层次/ 合并/ 或者/ 拆分/ 来/ 计算/ 使/ 模度化/ 最大/ 时/ 的/ 社区/ 划分/ 结果/ ./ 我们/ 在/ 构建/ 客户端/ 点/ 的/ 关系/ 网络/ 后/ ,/ 用/ Newman/ 的/ 算法/ 做/ 社区/ 划分/ ,/ 在/ 社区/ 内部/ ,/ 客户端/ 点/ 之间/ 消息/ 关系密切/ ,/ 社区/ 之间/ 消息/ 关系/ 相对/ 较弱/ ./ 3.4/ 客户端/ 点/ 部署/ 这/ 一步/ 我们/ 也/ 称为/ 客户端/ 点/ 的/ 社区/ 物理/ 聚集/ :/ 将/ 一个/ 社区/ 内/ 的/ 客户端/ 点/ 部署/ 到/ 中间/ 路由/ 组织/ 中/ 的/ 物理/ 连接/ 速度/ 较/ 快/ ,/ 或者/ 地理/ 上/ 较/ 接近/ 的/ 集群/ 节点/ 上/ ./ 这能/ 带来/ 两个/ 好处/ :/ (/ 1/ )/ 能/ 有效/ 提高/ 大部分/ 消息/ 的/ 传递/ 效率/ ./ 社区/ 划分/ 将/ 相互/ 关联/ 密切/ 的/ 客户端/ 点/ 划分/ 在/ 一个/ 社区/ 内/ ,/ 因此/ 大部分/ 的/ 消息/ 关联/ 都/ 在/ 社区/ 内/ 的/ 客户端/ 点/ 之间/ ,/ 将/ 一个/ 社区/ 内/ 的/ 客户端/ 点/ 做/ 物理/ 聚集/ ,/ 有利于/ 缩短/ 大部分/ 消息/ 的/ 传递/ 步长/ ,/ 提高/ 消息/ 的/ 传递/ 效率/ ./ (/ 2/ )/ 能/ 有效/ 降低/ 中间/ 路由/ 组织/ 中/ 的/ 路由/ 节点/ 处理/ 的/ 消息/ 量/ ./ 社区/ 内/ 的/ 客户端/ 点/ 的/ 物理/ 聚集/ ,/ 使得/ 大部分/ 消息/ 能/ 在/ 集群/ 内/ 完成/ 传递/ ,/ 降低/ 了/ 系统/ 中路/ 由/ 节点/ 处理/ 的/ 消息/ 量/ ./ 这/ 两个/ 好处/ 都/ 有利于/ 降低/ 系统/ 的/ 能耗/ ./ 提高/ 消息传递/ 速度/ 能/ 减少/ 客户端/ 点/ 等待时间/ ,/ 进而/ 减少/ CPU/ 的/ 运算/ 时间/ ;/ 降低/ 路由/ 节点/ 处理/ 的/ 消息/ 量/ 则/ 能/ 减小/ CPU/ 负载/ ,/ 并/ 有利于/ 使/ 通信/ 链路/ 处于/ 低/ 速率/ 状态/ ./ 在/ 将/ 社区/ 内/ 的/ 客户端/ 点/ 部署/ 到/ 中间/ 路由/ 组织/ 时/ ,/ 有/ 如下/ 的/ 问题/ 需要/ 考虑/ :/ (/ 1/ )/ 客户端/ 点/ 从/ 一个/ 连接点/ 部署/ 到/ 另外/ 一个/ 连接点/ ,/ 这种/ 迁移/ 会/ 给/ 系统/ 带来/ 开销/ ,/ 迁移/ 的/ 客户端/ 点越/ 多/ ,/ 带来/ 的/ 开销/ 越大/ ./ 因而/ 一个/ 合理/ 的/ 策略/ 是/ 在/ 系统/ 性能/ 提升/ 与/ 迁移/ 带来/ 的/ 代价/ 中/ 取得/ 平衡/ ./ (/ 2/ )/ 划分/ 的/ 社区/ 以及/ 中间/ 路由/ 组织/ 中/ 的/ 各个/ 集群/ 都/ 有/ 特定/ 的/ 规模/ ,/ 在/ 部署/ 的/ 时候/ 要/ 尽量/ 在/ 集群/ 间/ 达到/ 负载/ 均衡/ ,/ 避免/ 某些/ 集群/ 过载/ 而/ 某些/ 集群/ 空载/ ./ 基于/ 此/ ,/ 我们/ 提出/ 一个/ 基于/ 社区/ 重心/ 的/ 启发式/ 算法/ ,/ 对/ 客户端/ 点/ 进行/ 部署/ 时/ ,/ 在/ 尽量/ 提升/ 性能/ 的/ 同时/ ,/ 减小/ 客户端/ 迁移/ 带来/ 的/ 开销/ ,/ 同时/ 达到/ 负载/ 均衡/ ./ 下面/ ,/ 我们/ 先对/ 一些/ 参数/ 进行/ 定义/ ,/ 以便/ 于/ 介绍/ 算法/ ./ 3.4/ ./ 1/ 定义/ 算法/ 的/ 目标/ 是/ 以/ 较/ 小/ 的/ 迁移/ 代价/ ,/ 尽可能/ 地/ 提高/ 系统/ 性能/ ./ 消息/ 是/ 通过/ 中间/ 路由/ 组织/ 中/ 的/ 路由/ 节点/ 转发/ 的/ ,/ 消息/ 经过/ 的/ 路由/ 的/ 跳数/ 越少/ ,/ 从/ 发送到/ 接收/ 的/ 转发/ 时延/ 也/ 越/ 小/ ./ 因此/ ,/ 我们/ 用/ 消息传递/ 中/ 经过/ 的/ 路由/ 跳数/ 的/ 平均值/ 来/ 定义/ 系统/ 的/ 性能/ :/ 其中/ m/ 为/ 消息/ 的/ 编号/ ,/ m/ ∈/ [/ 1/ ,/ M/ ]/ ,/ M/ 为/ 消息/ 总量/ ./ 如果/ 迁移/ 的/ 客户端/ 点/ 数量/ 越/ 多/ ,/ 部署/ 给/ 系统/ 带来/ 的/ 迁移/ 代价/ 也/ 就/ 越/ 大/ ,/ 因此/ 我们/ 定义/ 部署/ 代价/ 为/ 迁移/ 的/ 客户端/ 点/ 的/ 数量/ Nmovedclient/ ./ 因而/ ,/ 算法/ 的/ 目标/ 函数/ 为/ 3.4/ ./ 2/ 部署/ 算法/ 我们/ 用/ 一个/ 迭代/ 过程/ 来/ 达到/ 系统/ 性能/ 和/ 迁移/ 带来/ 的/ 代价/ 折中/ 平衡/ :/ (/ 1/ )/ 先对/ 客户端/ 点/ 通信/ 关系/ 网络/ 做/ 社区/ 划分/ ;/ (/ 2/ )/ 在/ 当前/ 社区/ 划分/ 下/ ,/ 以/ 最小/ 的/ 迁移/ 代价/ ,/ 做/ 客户端/ 的/ 社区/ 物理/ 聚集/ ;/ (/ 3/ )/ 依据/ 式/ (/ 2/ )/ 计算/ 系统/ 性能/ 的/ 改变/ 和/ 迁移/ 的/ 代价/ ;/ (/ 4/ )/ 对/ 已/ 划分/ 的/ 社区/ 做/ 迭代/ 的/ 划分/ ;/ (/ 5/ )/ 重复/ 步/ 2/ 和步/ 3/ ;/ (/ 6/ )/ 如果/ 步/ 4/ 的/ 社区/ 划分/ 带来/ 的/ 系统/ 性能/ 的/ 变化/ 比例/ 大于/ 迁移/ 的/ 代价/ 的/ 变化/ 比例/ ,/ 则/ 迭代/ 停止/ ;/ 否则/ 重复/ 步/ 4/ ~/ 6/ ./ 步/ 6/ 的/ 意思/ 是/ :/ 随着/ 对/ 社区/ 继续/ 进行/ 社区/ 划分/ 和/ 物理/ 聚集/ ,/ 系统/ 性能/ 与/ 前/ 一次/ 的/ 部署/ 结果/ 相比/ 会/ 下降/ ,/ 而/ 迁移/ 的/ 代价/ 也/ 会/ 变小/ ./ 在/ 迭代/ 中/ ,/ 如果/ 划分/ 导致/ 的/ 系统/ 性能/ 下降/ 比例/ 大于/ 迁移/ 代价/ 减小/ 的/ 比例/ ,/ 说明/ 这/ 一步/ 迭代/ 带来/ 的/ 性能/ 损失/ 更大/ ,/ 因此/ 迭代/ 终止/ ./ 算法/ 中/ 的/ 关键/ ,/ 是步/ 2/ 中/ ,/ 在/ 某/ 一个/ 社区/ 划分/ 结果/ 下/ ,/ 以/ 最小/ 的/ 迁移/ 代价/ 对/ 社区/ 进行/ 物理/ 聚集/ ./ 下面/ 我们/ 介绍/ 以/ 社区/ 地理/ 重心/ 为/ 启发式/ 的/ 聚集/ 算法/ ./ 对于/ 一个/ 社区/ 内/ 的/ 客户端/ 点/ ,/ 在/ 聚集/ 前/ 往往/ 是/ 分散/ 在/ 中间/ 路由/ 组织/ 的/ 不同/ 集群/ 上/ ./ 我们/ 定义/ 对于/ 某个/ 社区/ ,/ 在/ 其/ 客户端/ 点/ 分布/ 的/ 集群/ 中/ ,/ 拥有/ 这个/ 社区/ 的/ 客户端/ 点/ 数量/ 最多/ 的/ 集群/ 为/ 这个/ 社区/ 的/ 地理/ 重心/ ./ 在/ 对/ 某个/ 社区/ 的/ 客户端/ 点/ 进行/ 物理/ 聚集/ 时/ ,/ 如果/ 将/ 这个/ 社区/ 聚集/ 到/ 它/ 的/ 地理/ 重心/ ,/ 迁移/ 代价/ 是/ 最小/ 的/ ./ 但是/ 要/ 注意/ 的/ 是/ ,/ 一个/ 社区/ 在/ 做/ 社区/ 聚集/ 的/ 时候/ ,/ 不能/ 忽视/ 其它/ 社区/ 的/ 地理/ 重心/ ./ 因为/ 每个/ 集群/ 的/ Page6/ 规模/ 有限/ ,/ 某个/ 集群/ 有/ 可能/ 是/ 多个/ 社区/ 的/ 地理/ 重心/ ,/ 如果/ 将/ 这些/ 社区/ 都/ 聚集/ 到/ 其/ 地理/ 重心/ ,/ 会/ 造成/ 这个/ 集群/ 被/ 部署/ 了/ 多个/ 社区/ 的/ 客户端/ 点/ ,/ 导致/ 负载/ 过大/ ./ 为了/ 解决/ 这个/ 问题/ ,/ 我们/ 计算/ 当前/ 集群/ 中/ 的/ 某个/ 社区/ 的/ 客户端/ 点/ 占/ 这个/ 社区/ 总/ 端点/ 数/ 的/ 比例/ ,/ 并/ 对/ 这个/ 比例/ 排序/ ./ 每个/ 社区/ 优先/ 聚集/ 到/ 比例/ 值/ 最大/ 的/ 集群/ 上/ ,/ 即/ 其/ 地理/ 重心/ 上/ ./ 如果/ 地理/ 重心/ 已/ 被/ 部署/ 其他/ 社区/ ,/ 负载/ 已满/ ,/ 则/ 聚集/ 到/ 比例/ 值/ 第二/ 大/ 的/ 集群/ 上/ ,/ 以此类推/ ,/ 直致/ 这个/ 社区/ 被/ 部署/ ./ 算法/ 的/ 具体/ 过程/ 见/ 算法/ 1/ :/ 我们/ 先/ 建立/ 一个/ 包含/ 所有/ 集群/ 的/ 队列/ Q/ ,/ 然后/ 依次/ 处理/ 每个/ 集群/ ./ 对/ 在/ 这个/ 集群/ 内有/ 客户端/ 点/ 分布/ 的/ 所有/ 社区/ ,/ 根据/ 其/ 客户端/ 点/ 的/ 比例/ 排序/ (/ 第/ 6/ 行/ )/ ,/ 优先/ 将/ 客户端/ 点/ 比例/ 较大/ 的/ 社区/ 部署/ 到/ 当前/ 的/ 集群/ 上/ ./ 如果/ 某个/ 社区/ 之前/ 被/ 部署/ 了/ ,/ 则/ 比较/ 其/ 在/ 当前/ 集群/ 和/ 之前/ 被/ 部署/ 的/ 集群/ 上/ 的/ 客户端/ 点/ 的/ 比例/ 值/ 的/ 大小/ ./ 如果/ 当前/ 集群/ 上/ 的/ 客户端/ 点/ 比例/ 更大/ ,/ 则/ 这个/ 社区/ 被/ 重/ 部署/ 到/ 当前/ 集群/ (/ 第/ 10/ ~/ 11/ 行/ )/ ./ 这/ 保证/ 了/ 每个/ 社区/ 会/ 优先/ 部署/ 到/ 社区/ 的/ 地理/ 重心/ ,/ 而/ 如果/ 地理/ 重心/ 已经/ 过载/ ,/ 则/ 会/ 部署/ 到/ 比例/ 第二/ 大/ 的/ 集群/ ,/ 以此类推/ ./ 算法/ 1/ ./ 社区/ 迭代/ 聚集/ 算法/ ./ 输入/ :/ 集群/ 集合/ S/ 输出/ :/ 无/ 1/ ./ 初始化/ 队列/ Q/ ;/ 2/ ./ 将/ 所有/ 的/ 集群/ S/ 放入/ 队列/ Q/ ;/ 3/ ./ WHILE/ (/ !/ Q/ ./ empty/ (/ )/ )/ {/ 4/ ./ s/ =/ Q/ ./ removeHead/ (/ )/ ;/ 5/ ./ IF/ (/ s/ 没有/ 过载/ )/ 6/ ./ 计算/ s/ 内/ 各/ 社区/ 的/ 客户端/ 点/ 数量/ 占/ 其/ 社区/ 总数/ 7/ ./ FOR/ (/ 位于/ s/ 内/ 的/ 某个/ 社区/ i/ )/ 8/ ./ IF/ (/ i/ 已经/ 被/ 部署/ )/ 9/ ./ s/ =/ getCluster/ (/ i/ )/ ;/ // // 获得/ i/ 之前/ 被/ 部署/ 的/ 集群/ 10/ ./ IF/ (/ i/ 在/ s/ 内/ 的/ 客户端/ 点/ 数量/ >/ i/ 在/ s/ 内/ 的/ 客/ 11/ ./ i/ 被/ 部署/ 到/ s/ ;/ 12/ ./ IF/ (/ s/ 没有/ 过载/ )/ 13/ ./ 将/ s/ 放入/ Q/ ;/ 14/ ./ ENDIF15/ ./ ENDIF16/ ./ ELSE17/ ./ 将/ i/ 部署/ 到/ s/ ;/ 18/ ./ ENDIF19/ ./ ENDFOR20/ ./ ENDIF21/ ./ ENDWHILE3/ ./ 4.3/ 运行/ 代价/ 社区/ 迭代/ 聚集/ 的/ 算法/ 包括/ 两步/ :/ 客户端/ 点/ 社区/ 划分/ 和/ 社区/ 的/ 物理/ 聚集/ ./ 客户端/ 点/ 社区/ 划分/ 的/ Newman/ 算法/ 的/ 时间/ 复杂度/ [/ 30/ ]/ 是/ n/ ×/ lg2n/ ,/ 其中/ n/ 是/ 客户端/ 点/ 的/ 数量/ ./ 在/ 社区/ 划分/ 后/ ,/ 假设/ 客户端/ 点/ 的/ 社区/ 个数/ 是/ K/ ,/ 底层/ 集群/ 的/ 个数/ 是/ L/ ,/ 则/ 算法/ 1/ 的/ 时间/ 复杂度/ 是/ K/ ×/ L/ ./ 云/ 计算环境/ 下/ 客户端/ 点/ 的/ 数量/ 庞大/ ,/ 因而/ n/ 值/ 很大/ ./ 划分/ 后/ 的/ 社区/ 数量/ K/ 和/ 底层/ 集群/ 的/ 个数/ L/ 则/ 通常/ 比/ n/ 小/ 的/ 多/ ,/ 所以/ 重/ 部署/ 的/ 算法/ 代价/ 主要/ 由/ n/ ×/ lg2n/ 构成/ ,/ 接近/ 线性/ 复杂度/ ./ 4/ 实验/ 4.1/ 实验/ 设置/ 我们/ 验证/ 算法/ 对系统/ 的/ 影响/ ,/ 具体表现/ 在/ 消息传递/ 的/ 路由/ 路径/ 长度/ 和/ 路由/ 时延/ 在/ 算法/ 运行/ 前后/ 的/ 变化/ ./ 另外/ ,/ 我们/ 还/ 关注/ 路由/ 节点/ ,/ 尤其/ 是/ 主干/ 上/ 的/ 路由/ 节点/ 处理/ 的/ 消息/ 负载/ 的/ 变化/ ,/ 这/ 将/ 影响/ 到/ 系统/ 能耗/ ./ 我们/ 生成/ 一定/ 数量/ 的/ 客户端/ 点/ ,/ 并/ 部署/ 到/ 中间/ 路由/ 组织/ 的/ 节点/ 中/ ./ 客户端/ 之间/ 的/ 消息/ 都/ 包含/ 了/ 一定/ 的/ 参数/ ,/ 每个/ 客户端/ 点/ 接收/ 包含/ 输入/ 参数/ 的/ 消息/ 后/ ,/ 会/ 生成/ 其/ 输出/ 参数/ 并/ 放入/ 消息/ 中/ ,/ 发送到/ 中间/ 路由/ 组织/ 中/ ./ 在/ 定义/ 了/ 客户端/ 之间/ 的/ 通信/ 关联/ 模式/ 后/ ,/ 我们/ 会/ 随机/ 生成/ 一些/ 包含/ 输入/ 参数/ 和/ 输出/ 参数/ 的/ 请求/ ,/ 以/ 让/ 其中/ 的/ 一些/ 客户端/ 点/ 协作/ ,/ 协作/ 中/ 产生/ 的/ 消息/ 量/ 就是/ 实验/ 的/ 负载/ ./ 我们/ 将/ 我们/ 的/ 算法/ 和/ 基于/ 兴趣/ 的/ 部署/ 算法/ 进行/ 了/ 比较/ ./ 一个/ 客户端/ 点/ 感兴趣/ 的/ 消息/ 集合/ ,/ 即/ 是/ 这个/ 客户端/ 点/ 在/ 运行/ 过程/ 中/ 接收/ 到/ 的/ 消息/ 集合/ ./ 确定/ 了/ 客户端/ 点/ 的/ 通信/ 关系/ 网络/ ,/ 就/ 可以/ 得到/ 每个/ 客户/ 节点/ 的/ 兴趣/ 消息/ 集合/ ,/ 在/ 定义/ 了/ 两个/ 客户端/ 点/ 的/ 兴趣/ 消息/ 集合/ 的/ 相似性/ 计算公式/ 后/ ,/ 就/ 可以/ 用/ 聚类/ 算法/ ,/ 如/ K/ -/ Means/ [/ 31/ ]/ 等/ ,/ 来/ 对/ 客户端/ 点/ 进行/ 兴趣/ 聚类/ ,/ 并/ 部署/ 到/ 中间/ 路由/ 组织/ 的/ 节点/ 上/ ,/ 这个/ 过程/ 就是/ 基于/ 兴趣/ 的/ 部署/ ./ 假设/ 客户端/ 点/ i/ 接收/ 的/ 消息/ 集合/ 为/ Ri/ ,/ 我们/ 用杰/ 卡德/ 系数/ (/ JaccardCoefficient/ )/ 来/ 定义/ 两个/ 客户端/ 点/ i/ 和/ j/ 的/ 兴趣/ 集合/ 的/ 相似性/ Sij/ :/ 我们/ 验证/ 算法/ 在/ 各种/ 不同/ 参数/ 设定/ 下/ 的/ 实验/ 效果/ ,/ 包括/ 在/ 不同/ 的/ 通信/ 关系/ 网络/ 模式/ 下/ 和/ 在/ 不同/ 的/ Page7/ 通信/ 关系/ 网络/ 模式/ 指/ 的/ 是/ 客户端/ 点/ 之间/ 可能/ 会/ 呈现/ 不同/ 的/ 消息/ 依赖/ 关系/ ./ 通信/ 关系/ 网络/ 的/ 不同/ 影响/ 着/ 社区/ 分割/ 的/ 结果/ ,/ 也/ 影响/ 着/ 客户端/ 点/ 的/ 兴趣/ 相似/ 度/ 的/ 分布/ ./ 客户端/ 点/ 构成/ 的/ 通信/ 网络/ 为/ 复杂/ 网络/ (/ ComplexNetworks/ )/ ,/ 复杂/ 网络/ 包括/ 无/ 标度/ 网络/ [/ 32/ ]/ 和/ 小/ 世界/ 网络/ [/ 33/ ]/ ./ 为了/ 全面/ 衡量/ ,/ 我们/ 还/ 生成/ 了/ 随机/ 网络/ ,/ 进行/ 实验/ 验证/ :/ (/ 1/ )/ 无/ 标度/ 网络/ ./ 无/ 标度/ 网络/ 的/ 节点/ 的/ 度/ 满足/ Zipf/ 分布/ ,/ 即/ 少数/ 节点/ 具有/ 很大/ 的/ 连接/ 度/ ,/ 而/ 大量/ 的/ 节点/ 只有/ 很小/ 的/ 连接/ 度/ ./ 我们/ 依照/ 这个/ 规律/ 来/ 构建/ 无/ 标度/ 网络/ ./ (/ 2/ )/ 小/ 世界/ 网络/ ./ 构建/ 方式/ 如下/ ,/ 首先/ 对/ 客户端/ 点/ 编号/ ;/ 依据/ 编号/ ,/ 每个/ 客户端/ 点/ 接收/ 它/ 的/ k/ 个/ 邻居/ 发送/ 的/ 消息/ ;/ 再/ 随机/ 地/ 选择/ 两个/ 客户端/ 点/ 并/ 以/ 一定/ 的/ 概率/ p/ 在/ 这/ 两个/ 客户端/ 点间/ 加入/ 消息/ 关联/ ,/ 直到/ 整个/ 网络/ 的/ 边/ 的/ 数量/ 达到/ 设定值/ m/ ./ 这里/ k/ ,/ p/ ,/ m/ 都/ 是/ 设定/ 的/ 常数/ ./ (/ 3/ )/ 随机/ 网络/ ./ 客户端/ 点/ 随机/ 选择/ 某些/ 客户端/ 集群/ 组成/ 下/ ./ 点/ ,/ 并/ 接收/ 其/ 发送/ 的/ 消息/ ./ 集群/ 组成/ 指/ 的/ 是/ 消息/ 系统/ 的/ 中间/ 路由/ 组织/ 的/ 组成/ 方式/ ./ 中间/ 路由/ 组织/ 可以/ 由/ 一些/ 规模/ 大小/ 不同/ 的/ 集群/ 组成/ ,/ 也/ 可以/ 由/ 一些/ 规模/ 大小/ 相同/ 的/ 集群/ 组成/ ./ 在/ 实验/ 中/ 我们/ 构建/ 两个/ 不同/ 的/ 集群/ 拓扑/ ,/ 验证/ 算法/ 在/ 不同/ 的/ 集群/ 组成/ 下/ 的/ 性能/ ./ 4.2/ 实验/ 结果/ 4.2/ ./ 1/ 不同/ 通信/ 关系/ 网络/ 模式/ 我们/ 先/ 随机/ 生成/ 一个/ 中间/ 路由/ 组织/ 的/ 拓扑/ 结构/ ,/ 如图/ 2/ 所示/ ./ 这个/ 中间/ 路由/ 组织/ 包括/ 8/ 个/ 集群/ 和/ 53/ 个/ 节点/ ,/ 其中/ 有/ 8/ 个/ 节点/ 在/ 集群/ 的/ 主干/ 上/ ./ 然后/ 我们/ 生成/ 客户端/ 点/ ,/ 并/ 部署/ 到/ 集群/ 上/ ./ 我们/ 验证/ 客户端/ 通信/ 网络/ 分别/ 为/ 无/ 标度/ 网络/ 、/ 随机/ 网络/ 和/ 小/ 世界/ 网络/ 时/ 算法/ 对系统/ 性能/ 的/ 影响/ ./ 图/ 3/ ~/ 图/ 5/ 显示/ 了/ 3/ 种/ 模式/ 下/ ,/ 消息/ 数量/ 在/ 路由/ 路径/ 长度/ 上/ 的/ 分布/ ./ 从图/ 中/ ,/ 第一/ ,/ 我们/ 发现/ 在/ 初始/ 分布/ 下/ ,/ 大部分/ 消息/ 都/ 需要/ 5/ 到/ 9/ 跳/ 的/ 转发/ (/ 无/ 标度/ 网络/ 56/ %/ ,/ 随机/ 网络/ 61/ %/ ,/ 小/ 世界/ 网络/ 54/ %/ )/ ,/ 并且/ 消息/ 数量/ 最大/ 在/ 跳/ 数为/ 7/ 或/ 8/ 处/ ./ 在/ 基于/ 社区/ 的/ 聚集/ 部署/ 后/ ,/ 大部分/ 消息/ 能/ 在/ 4/ 跳内/ 完成/ 转发/ (/ 无/ 标度/ 网络/ 59/ %/ ,/ 随机/ 网络/ 49/ %/ ,/ 小/ 世界/ 网络/ 61/ %/ )/ ,/ 且/ 消息/ 数量/ 的/ 峰值/ 在/ 路由/ 路径/ 长度/ 为/ 2/ 或/ 4/ 处/ ;/ 第二/ ,/ 我们/ 可以/ 看到/ 基于/ 兴趣/ 的/ 部署/ 算法/ 不能/ 有效/ 减少/ 消息传递/ 的/ 平均/ 路径/ 长度/ ;/ 第三/ ,/ 我们/ 发现/ 在/ 小/ 世界/ 网络/ 中/ ,/ 在/ 4/ 跳内/ 完成/ 转发/ 的/ 消息/ 比例/ 相比/ 在/ 随机/ 网络/ 下/ 的/ 比例/ 更大/ ,/ 这/ 是因为/ 在/ 小/ 世界/ 网络/ 中/ 社区/ 结构/ 更/ 明显/ ,/ 这点/ 通过/ 网络/ 的/ 模度/ 化值/ 可以/ 发现/ ./ 初始/ 分布/ 15/ %/ 56/ %/ 29/ %/ 基于/ 兴趣/ 44/ %/ 28/ %/ 28/ %/ 基于/ 社区/ 59/ %/ 29/ %/ 12/ %/ 初始/ 分布/ 13/ %/ 61/ %/ 26/ %/ 基于/ 兴趣/ 14/ %/ 52/ %/ 34/ %/ 基于/ 社区/ 49/ %/ 35/ %/ 16/ %/ Page8/ 初始/ 分布/ 16/ %/ 54/ %/ 30/ %/ 基于/ 兴趣/ 17/ %/ 52/ %/ 31/ %/ 基于/ 社区/ 61/ %/ 27/ %/ 12/ %/ 表/ 1/ 显示/ 了/ 消息传递/ 时延/ 在/ 3/ 种/ 通信/ 模式/ 下/ 的/ 分布/ ./ 我们/ 发现/ 在/ 0.5/ s/ 内/ 完成/ 转发/ 的/ 消息/ 比例/ ,/ 在/ 表/ 13/ 种/ 通信/ 模式/ 下/ 消息/ 时延/ 的/ 分布/ 初始/ 分布/ 2/ %/ 5/ %/ 0.4/ %/ 92.6/ %/ 7/ %/ 4/ %/ 0.4/ %/ 88.6/ %/ 7/ %/ 21/ %/ 44/ %/ 28/ %/ 基于/ 兴趣/ 0.1/ %/ 3/ %/ 5/ %/ 91.9/ %/ 8/ %/ 12/ %/ 3/ %/ 77/ %/ 10/ %/ 25/ %/ 35/ %/ 30/ %/ 基于/ 社区/ 2/ %/ 31/ %/ 16/ %/ 51/ %/ 29/ %/ 55/ %/ 11/ %/ 5/ %/ 31/ %/ 56/ %/ 10/ %/ 3/ %/ 表/ 23/ 种/ 通信/ 模式/ 下/ 主干/ 上/ 的/ 节点/ 负载/ 变化/ 初始/ 分布/ 基于/ 兴趣/ 基于/ 社区/ 1449814253108194.2/ ./ 2/ 不同/ 集群/ 组成/ 我们/ 验证/ 本文/ 的/ 算法/ 在/ 不同/ 的/ 集群/ 组成/ 下/ 对系统/ 的/ 影响/ ./ 除了/ 在/ 上/ 一节/ 的/ 实验/ 中/ 所/ 使用/ 的/ 由/ 不同/ 规模/ 的/ 集群/ 组成/ 的/ 中间/ 路由/ 组织/ ,/ 另/ 生成/ 一个/ 由/ 相同/ 规模/ 的/ 集群/ 组成/ 的/ 中间/ 路由/ 组织/ ,/ 称之为/ 平衡/ 拓扑/ (/ 如图/ 6/ 所示/ )/ ./ 图/ 7/ 显示/ 了/ 在/ 平衡/ 拓扑/ 下/ ,/ 消息/ 数量/ 在/ 传递/ 路径/ 长度/ 上/ 的/ 分布/ ./ 可以/ 看到/ ,/ 初始/ 的/ 时候/ 消息/ 数量/ 最大/ 在/ 路由/ 路径/ 长度/ 为/ 7/ 和/ 8/ 处/ ;/ 在/ 社区/ 聚集/ 后/ 消息/ 数量/ 的/ 峰值/ 分布/ 在/ 2/ 和/ 3/ 处/ ,/ 在/ 5/ 跳/ 内能/ 完成/ 转发/ 的/ 消息/ 的/ 比例/ 从/ 12/ %/ 增加/ 到/ 61/ %/ ,/ 而且/ 能/ 在/ 0.1/ s/ 内/ 完成/ 转发/ 的/ 消息/ 比例/ 从/ 8.6/ %/ 增加/ 到/ 39/ %/ (/ 表/ 3/ )/ ./ 这/ 都/ 显示/ 基于/ 社区/ 的/ 部署/ 能/ 显著/ 地/ 缩短/ 消息/ 路由/ 的/ 路径/ 长度/ 和/ 消息传递/ 的/ 时延/ ./ 而/ 基于/ 兴趣/ 的/ 部署/ 没有/ 明显/ 的/ 效果/ ./ 表/ 4/ 显示/ 了/ 集群/ 主干/ 上/ 的/ 消息/ 负载/ 的/ 变化/ ,/ 基于/ 社区/ 的/ 部署/ 将/ 负载/ 较/ 小/ 了/ 44/ %/ ,/ 而基/ 基于/ 社区/ 的/ 聚集/ 部署/ 后/ 变大/ 了/ 很多/ (/ 无/ 标度/ 网络/ 从/ 7/ %/ ~/ 33/ %/ ,/ 随机/ 网络/ 从/ 11/ %/ ~/ 84/ %/ ,/ 小/ 世界/ 网络/ 从/ 28/ %/ ~/ 87/ %/ )/ ,/ 而/ 基于/ 兴趣/ 的/ 部署/ 对/ 消息/ 时延/ 的/ 影响/ 并/ 不/ 明显/ ./ 由于/ 随机/ 网络/ 和/ 小/ 世界/ 网络/ 的/ 模度/ 化值/ 相比/ 无/ 标度/ 网络/ 更大/ ,/ 因而/ 性能/ 提升/ 的/ 更/ 明显/ ./ 表/ 2/ 显示/ 了/ 在/ 中间/ 路由/ 组织/ 的/ 主干/ 节点/ 上/ 的/ 消息/ 负载/ 的/ 变化/ ,/ 可以/ 看到/ 基于/ 社区/ 的/ 部署/ 能/ 显著/ 减小/ 主干/ 节点/ 上/ 的/ 负载/ ,/ 处理/ 的/ 消息/ 量/ 在/ 3/ 种/ 模式/ 下能/ 平均/ 减小/ 50/ %/ ./ 这/ 表明/ ,/ 算法/ 在/ 3/ 种/ 通信/ 模式/ 下/ 都/ 能/ 有效/ 降低/ 主干/ 节点/ 上/ 的/ 消息/ 负载/ 和/ 通信/ 链路/ 中/ 的/ 消息/ 量/ ./ 负载/ 的/ 减小/ 有利于/ 路由/ 节点/ 降低/ CPU/ 的/ 时钟/ 频率/ 和/ 电压/ ,/ 通信量/ 的/ 降低/ 则/ 有利于/ 让/ 链路/ 在/ 保证/ 消息传递/ 效率/ 的/ 情况/ 下以/ 低/ 速率/ 运行/ ./ 对于/ 动态/ 调节/ 的/ CPU/ 和/ 采用/ 自/ 适应/ 链路/ 速率/ 机制/ 的/ 链路/ 而言/ ,/ 这/ 都/ 有利于/ 降低/ 系统/ 的/ 能耗/ ./ 随机/ 网络/ 随机/ 网络/ 于/ 兴趣/ 的/ 部署/ 则/ 只/ 减小/ 了/ 28/ %/ ./ 这/ 表明/ 算法/ 在/ 不同/ 的/ 集群/ 组成/ 上/ 都/ 能/ 有效/ 降低/ 系统/ 的/ 消息/ 负载/ ,/ 进而/ 降低/ 系统/ 的/ 能耗/ ./ Page9/ 初始/ 分布/ 12/ %/ 65/ %/ 23/ %/ 基于/ 兴趣/ 31/ %/ 50/ %/ 19/ %/ 基于/ 社区/ 61/ %/ 29/ %/ 10/ %/ 初始/ 分布/ 8.6/ %/ 75/ %/ 11/ %/ 5.4/ %/ 基于/ 兴趣/ 14/ %/ 73/ %/ 8/ %/ 5/ %/ 基于/ 社区/ 39/ %/ 52/ %/ 6/ %/ 3/ %/ 初始/ 分布/ 基于/ 兴趣/ 基于/ 社区/ 这/ 两组/ 实验/ 表明/ ,/ 我们/ 的/ 算法/ 能/ 适用/ 于/ 不同/ 的/ 参数/ 设定/ ,/ 在/ 不同/ 的/ 通信/ 模式/ 和/ 不同/ 的/ 集群/ 组成/ 下/ ,/ 算法/ 都/ 能/ 有效/ 提高/ 系统/ 性能/ ,/ 减小/ 系统/ 负载/ ,/ 提高/ 消息/ 转发/ 的/ 效率/ ./ 这/ 表明/ 我们/ 的/ 算法/ 是/ 通用/ 和/ 有效/ 的/ ./ 5/ 结论/ 消息/ 系统/ 在/ 云/ 计算/ 系统/ 中/ 扮演着/ 越来越/ 重要/ 的/ 角色/ ,/ 消息/ 系统/ 的/ 能耗/ 优化/ 对于/ 降低/ 云/ 计算/ 系统/ 的/ 能耗/ 也/ 有着/ 重要/ 的/ 意义/ ./ 对于/ 消息/ 系统/ 而言/ ,/ 除了/ 节点/ 级/ 的/ 节能/ 策略/ ,/ 如/ 处理器/ 的/ 节能/ 策略/ 和/ 通信/ 链路/ 的/ 节能/ 策略/ 外/ ,/ 客户端/ 点/ 的/ 部署/ 也/ 影响/ 着/ 消息/ 系统/ 的/ 能耗/ ./ 本文/ 提出/ 的/ 消息/ 系统/ 中/ 基于/ 社区/ 的/ 客户端/ 点/ 部署/ 算法/ ,/ 利用/ 社区/ 划分/ 技术/ 和/ 客户端/ 点/ 的/ 物理/ 聚集/ ,/ 对/ 客户端/ 点/ 进行/ 优化/ 部署/ ,/ 能/ 有效/ 降低/ 消息/ 系统/ 中/ 的/ 消息/ 量/ ,/ 减少/ 路由/ 节点/ 的/ 消息/ 处理/ 负载/ ,/ 这/ 都/ 有利于/ 降低/ 系统/ 的/ 能耗/ ./ 实验/ 证明/ 本文/ 算法/ 是/ 通用/ 且/ 有效/ 的/ ./ 

