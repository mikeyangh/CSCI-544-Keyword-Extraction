Page1/ 面向/ 维护/ 的/ 实时/ 软件/ 时间/ 变化/ 敏感点/ 检测/ 汤/ 恩义/ 1/ )/ ,/ 3/ )/ 李宣东/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 南京大学/ 软件/ 新/ 技术/ 国家/ 重点/ 实验室/ 南京/ 210093/ )/ 2/ )/ (/ 南京大学/ 计算机科学/ 与/ 技术/ 系/ 南京/ 210093/ )/ 3/ )/ (/ 南京大学/ 软件/ 学院/ 南京/ 210093/ )/ 摘要/ 正确/ 的/ 时间/ 属性/ 和/ 行为/ 对于/ 实时/ 软件/ 来说/ 非常/ 关键/ ,/ 然而/ 这/ 却/ 很/ 难/ 得到/ 完全/ 的/ 保障/ ./ 在/ 实际/ 工业/ 中/ ,/ 实时性/ 错误/ 不仅/ 会/ 在/ 软件/ 的/ 设计/ 开发阶段/ 被/ 引入/ ,/ 在/ 软件/ 的/ 维护阶段/ ,/ 随着/ 软件/ 的/ 演化/ 也/ 同样/ 会/ 引入/ 这种/ 错误/ ./ 当/ 软件维护/ 人员/ 对系统/ 不够/ 熟悉/ 时/ ,/ 维护阶段/ 引入/ 这些/ 错误/ 的/ 可能性/ 会/ 更/ 大/ ./ 目前/ ,/ 还/ 没有/ 研究/ 结果/ 可以/ 在/ 软件/ 修改/ 发生/ 之前/ ,/ 通过/ 分析/ 系统/ 的/ 时间/ 关系/ 信息/ 来/ 帮助/ 指导/ 软件维护/ 人员/ 减少/ 或者/ 避免/ 引入/ 时间/ 相关/ 的/ 错误/ ./ 在/ 这样/ 的/ 背景/ 下/ ,/ 文中/ 提出/ 了/ 一种/ 实际/ 可用/ 的/ 分析/ 途径/ 来/ 解决/ 这一/ 问题/ ,/ 称之为/ 时间/ 变化/ 影响/ 分析/ ./ 这一/ 解决/ 途径/ 在/ 软件维护/ 人员/ 做出/ 修改/ 之前/ 就/ 可以/ 分析/ 软件/ 内在/ 的/ 时间/ 关系/ 信息/ ,/ 从而/ 帮助/ 维护/ 人员/ 在/ 软件/ 的/ 实际/ 演化/ 前/ 预测/ 可能/ 带来/ 的/ 时间/ 影响/ ./ 在/ 具体/ 的/ 操作/ 上/ ,/ 可以/ 通过/ 告知/ 软件维护/ 人员/ 程序代码/ 中/ 的/ 某些/ 位置/ 点/ 可能/ 会/ 对/ 整个/ 程序/ 任务/ 的/ 执行/ 时间/ 产生/ 很大/ 的/ 影响/ ,/ 来/ 提醒/ 他们/ 修改/ 这些/ 位置/ 点/ 的/ 代码/ 时/ 应当/ 特别/ 小心/ ./ 由于/ 这些/ 点/ 对/ 程序/ 任务/ 的/ 执行/ 时间/ 敏感/ ,/ 我们/ 称之为/ 时间/ 变化/ 敏感点/ ./ 文中/ 通过/ 一种/ 基于/ 扰动/ 的/ 测试/ 实现/ 来/ 检测/ 程序/ 中/ 的/ 时间/ 变化/ 敏感点/ ,/ 通过/ 在/ 程序/ 中/ 插/ 桩/ 不同/ 的/ 代码/ 时延/ ,/ 达到/ 对/ 执行/ 时间/ 的/ 扰动/ 作用/ ./ 对/ 这些/ 扰动/ 作用/ 下/ 的/ 程序执行/ 时间/ 数据/ 进行/ 统计/ ,/ 得到/ 程序/ 中/ 各个/ 位置/ 点/ 对/ 时间/ 影响/ 的/ 定量/ 度量/ ./ 对于/ 实际/ 使用/ 的/ 大规模/ 程序/ ,/ 该/ 方法/ 通过/ 集成/ 静态/ 程序/ 分析/ 技术/ 提高/ 吞吐量/ 和/ 减小/ 漏报/ 率/ ./ 文中/ 对/ 分析/ 途径/ 做/ 了/ 原型/ 实现/ ,/ 并/ 在/ MlardalenWCET/ 基准/ 用/ 例集/ 和/ 开源/ 项目/ FreeLosslessAudioCodec/ (/ FLAC/ )/ 上/ 做/ 了/ 实例/ 评估/ ./ 评估/ 结果/ 展示/ 了/ 该/ 方法/ 的/ 可行性/ 和/ 有效性/ ./ 关键词/ 软件维护/ ;/ 实时/ 软件/ ;/ 时间/ 变化/ 影响/ 分析/ ;/ 基于/ 扰动/ 的/ 测试/ ;/ 时间/ 变化/ 敏感点/ 1/ 引言/ 随着/ 实时/ 系统/ 的/ 广泛应用/ ,/ 时间/ 属性/ 的/ 正确性/ 在/ 软件/ 中/ 的/ 重要/ 地位/ 日益/ 凸显/ ./ 特别/ 是/ 对于/ 使用/ 在/ 诸如/ 交通工具/ 、/ 医疗/ 设备/ 等/ 关键/ 领域/ 的/ 系统软件/ ,/ 时间/ 属性/ 的/ 错误/ 将会/ 导致/ 严重/ 的/ 后果/ ./ 然而/ ,/ 软件/ 功能/ 的/ 复杂性/ 导致/ 了/ 其/ 时间/ 属性/ 的/ 正确性/ 很难/ 得到/ 完全/ 的/ 保障/ ./ 不仅如此/ ,/ 我们/ 发现/ 与/ 时间/ 相关/ 的/ 软件/ 错误/ 除了/ 软件/ 的/ 设计/ 和/ 开发阶段/ 以外/ ,/ 在/ 软件/ 的/ 维护阶段/ 也/ 同样/ 会/ 引入/ ./ 对于/ 如何/ 在/ 软件/ 的/ 开发阶段/ 避免/ 时间/ 相关/ 的/ 错误/ ,/ 现有/ 的/ 研究/ 已经/ 有所/ 积累/ ,/ 但/ 对于/ 如何/ 帮助/ 软件维护/ 者/ 在/ 软件维护/ 阶段/ 避免/ 时间/ 相关/ 错误/ 的/ 引入/ ,/ 目前/ 还/ 未/ 见/ 相关/ 文献/ ./ 本文/ 的/ 研究/ 就是/ 针对/ 这一/ 问题/ 而来/ 的/ ./ 软件/ 修改/ 影响/ 分析/ (/ SoftwareChangeImpactAnalysis/ )/ 是/ 一种/ 帮助/ 软件维护/ 人员/ 预测/ 软件/ 演化过程/ 中/ 可能/ 带来/ 潜在/ 后果/ 的/ 重要/ 方法/ [/ 1/ -/ 4/ ]/ ./ 已有/ 的/ 软件/ 修改/ 影响/ 分析/ 技术/ 关注/ 于/ 分析/ 程序代码/ 在/ 功能/ 修改/ 上/ 的/ 依赖/ 关系/ 而/ 忽视/ 了/ 其/ 时间/ 变化/ 属性/ ./ 在/ 本文/ 中/ ,/ 我们/ 提出/ 一种/ 新/ 的/ 软件/ 修改/ 影响/ 分析/ —/ —/ —/ 时间/ 变化/ 影响/ 分析/ ./ 这一/ 分析/ 在/ 软件/ 修改/ 发生/ 前/ ,/ 就/ 可/ 用于/ 预测/ 软件/ 演化/ 带来/ 的/ 时间/ 变化/ 影响/ ,/ 从而/ 帮助/ 软件维护/ 人员/ 避免/ 在/ 实际/ 软件/ 的/ 修改/ 过程/ 中/ 引入/ 错误/ 的/ 时间/ 变化/ 行为/ ./ 我们/ 所/ 提出/ 的/ 时间/ 变化/ 影响/ 分析/ 基于/ 如下/ 的/ 观察/ 事实/ :/ 在/ 程序/ 中/ 的/ 各个/ 不同/ 位置/ 点/ 的/ 修改/ 会/ 对/ 程序/ 任务/ 执行/ 时间/ 的/ 变化/ 产生/ 不同/ 的/ 影响/ ,/ 其中/ 有/ 一部分/ 位置/ 点/ 即使/ 因/ 修改/ 发生/ 微小/ 的/ 局部/ 时延/ ,/ 也/ 会/ 造成/ 整体/ 程序/ 任务/ 的/ 执行/ 时间/ 发生/ 很大/ 的/ 改变/ ./ 由于/ 这样/ 的/ 位置/ 点/ 对/ 程序修改/ 后/ 的/ 执行/ 时间/ 很/ 敏感/ ,/ 我们/ 称/ 这样/ 的/ 点/ 为/ 时间/ 变化/ 敏感点/ ./ 举例来说/ ,/ 如图/ 1/ 所示/ ,/ 任务/ A/ 、/ B/ 为/ 一个/ 中断/ 驱动/ 的/ 工业/ 控制系统/ 中/ 两个/ 不同/ 的/ 中断/ 处理/ ,/ 用来/ 管理/ 不同/ 的/ 设备/ ,/ 由于/ 任务/ B/ 管理/ 着/ 更加/ 重要/ 的/ 设备/ ,/ 其/ 优先级/ 高于/ A/ ./ 由于/ 在/ 任务/ A/ 的/ 末尾/ 会/ 处理/ 一段/ 比较/ 关键/ 的/ 设备/ 通信/ ,/ 该/ 系统/ 的/ 开发者/ 为了/ 保证/ 其/ 不/ 被/ 打断/ 而/ 预留/ 了/ 较大/ 的/ 时间/ 冗余/ ,/ 其/ 效果/ 如图/ 1/ (/ a/ )/ 所示/ ./ 可是/ 在/ 软件/ 的/ 维护/ 过程/ 中/ ,/ 由于/ 要/ 加入/ 新/ 的/ 功能/ ,/ 任务/ A/ 发生/ 了/ 修改/ 而/ 加入/ 了/ 一小/ 段/ 代码/ 片段/ ./ 虽然/ 这段/ 被/ 加入/ 的/ 代码/ 片段/ 的/ 执行/ 时间/ 很/ 短/ ,/ 但/ 由于/ 涉及/ 到/ 任务/ A/ 中/ 的/ 一个/ 特殊/ 的/ 位置/ 点/ (/ 即/ 我们/ 所称/ 的/ 时间/ 变化/ 敏感点/ )/ ,/ 任务/ A/ 的/ 执行/ 时间/ 被/ 显著/ 地/ 增长/ ./ 从而/ 如图/ 1/ (/ b/ )/ 所示/ 造成/ A/ 末尾/ 的/ 设备/ 通信/ 会/ 被/ 打断/ 而/ 使/ 整个/ 系统/ 出现/ 问题/ ./ 本文/ 希望/ 给出/ 一种/ 时间/ 变化/ 敏感点/ 的/ 检测/ 方法/ ,/ 能够/ 在/ 软件/ 修改/ 发生/ 之前/ 就/ 帮助/ 指导/ 软件维护/ 者/ 在/ 维护/ 过程/ 中/ 避免/ 引入/ 这样/ 的/ 实时性/ 错误/ ./ 软件维护/ 人员/ 需要/ 非常/ 谨慎/ 地/ 在/ 时间/ 变化/ 敏感点/ 附近/ 做/ 修改/ 操作/ 来/ 减少/ 时间/ 错误/ 的/ 引入/ ,/ 当/ 确有/ 必要/ 修改/ 这些/ 时间/ 变化/ 敏感点/ 时/ ,/ 本文/ 方法/ Page3/ 也/ 可以/ 提供/ 造成/ 这些/ 时间/ 变化/ 敏感/ 现象/ 发生/ 的/ 测试用例/ ./ 维护/ 人员/ 可以/ 利用/ 我们/ 分析/ 所/ 筛选/ 的/ 测试用例/ 做/ 进一步/ 的/ 回归/ 测试/ ,/ 或者/ 将/ 我们/ 所/ 分析/ 到/ 的/ 这些/ 点/ 的/ 详细/ 性质/ 信息/ 输入/ 设计/ 模型/ 做/ 进一步/ 的/ 验证/ ,/ 从而/ 使/ 软件/ 的/ 时间/ 正确性/ 在/ 软件/ 演化过程/ 中/ 仍然/ 得到/ 保持/ ./ 从/ 具体/ 的/ 实现/ 途径/ 来看/ ,/ 我们/ 采用/ 一种/ 基于/ 扰动/ 的/ 测试方法/ 来/ 检测/ 程序/ 中/ 的/ 时间/ 变化/ 敏感点/ ./ 通过/ 在/ 程序/ 中/ 插/ 桩/ 不同/ 量级/ 的/ 增量/ 时延/ 代码/ ,/ 可以/ 对/ 程序/ 任务/ 执行/ 时间/ 的/ 变化/ 起到/ 一个/ 扰动/ 的/ 效果/ ./ 而/ 对于/ 某/ 一个/ 程序/ 点/ 的/ 执行/ 时间/ 扰动/ 做/ 统计/ 综合/ ,/ 就/ 可以/ 定量/ 地/ 度量/ 出/ 这个/ 点/ 在/ 程序/ 任务/ 发生变化/ 时/ 对/ 执行/ 时间/ 的/ 影响/ ./ 依据/ 这一/ 度量/ 是否/ 发生/ 统计/ 异常/ ,/ 或者/ 是否/ 超出/ 用户/ 指定/ 的/ 阈值/ ,/ 可以/ 判定/ 这/ 一点/ 是否/ 为/ 时间/ 变化/ 敏感点/ ./ 我们/ 的/ 时间/ 变化/ 敏感点/ 检测/ 方法/ 假设/ 软件维护/ 前后/ 的/ 运行/ 环境/ 不变/ ,/ 这一/ 假设/ 在/ 多数/ 情况/ 下/ 是/ 合理/ 的/ ./ 该/ 方法/ 也/ 可以/ 利用软件/ 进入/ 维护阶段/ 之前/ 已经/ 积累/ 的/ 测试用例/ ,/ 因此/ ,/ 从/ 整体/ 上/ 说/ ,/ 该/ 方法/ 并不需要/ 很大/ 的/ 开销/ ./ 另外/ ,/ 这一/ 分析/ 还/ 可以/ 得到/ 产生/ 异常/ 时间/ 变化/ 敏感点/ 的/ 测试用例/ 作为/ 副产品/ ,/ 从而/ 供/ 软件维护/ 人员/ 在/ 修改/ 程序/ 之后/ 进行/ 回归/ 测试/ ./ 由于/ 这一/ 方法/ 是/ 测试方法/ ,/ 从/ 理论/ 上/ 说/ 不/ 存在/ 误报/ ./ 在/ 实际/ 应用/ 中/ ,/ 当所/ 分析/ 的/ 软件/ 规模/ 较大/ 时/ ,/ 我们/ 集成/ 了/ 多项/ 静态/ 程序/ 分析/ 技术/ 来/ 提高/ 检测/ 方法/ 的/ 运行/ 效率/ ./ 这些/ 技术/ 通过/ 静态/ 扫描/ 的/ 方法/ ,/ 快速/ 地/ 发现/ 程序/ 中/ 相对/ 于/ 路径/ 的/ 高频/ 热点/ ,/ 并/ 以此/ 来/ 作为/ 时间/ 敏感/ 疑似/ 点/ ./ 而后/ ,/ 基于/ 扰动/ 的/ 测试方法/ 仅/ 需要/ 对/ 这些/ 疑似/ 点/ 进行/ 处理/ ,/ 而/ 不/ 需要/ 针对/ 程序/ 里/ 的/ 所有/ 位置/ 点/ 进行/ 测试/ ,/ 从而/ 提高/ 了/ 本文/ 方法/ 的/ 应用/ 范围/ ./ 另一方面/ ,/ 由于/ 这些/ 静态/ 程序/ 分析/ 技术/ 不/ 依赖于/ 具体/ 的/ 软件/ 测试用例/ ,/ 对/ 减小/ 本文/ 方法/ 的/ 整体/ 漏报/ 率/ 也/ 能/ 起到/ 一定/ 的/ 作用/ ./ 本文/ 第/ 2/ 节/ 详细/ 的/ 描述/ 本文/ 的/ 分析/ 途径/ 及其/ 具体方法/ 和/ 技术/ ;/ 在/ 第/ 3/ 节里/ ,/ 给出/ 一个/ 本文/ 方法/ 的/ 原型/ 工具/ 实现/ ,/ 并/ 在/ 多个/ 实例/ 上/ 进行/ 实验/ 评估/ ;/ 第/ 4/ 节对/ 已有/ 的/ 相关/ 工作/ 进行/ 比较/ ,/ 最后/ 在/ 第/ 5/ 节/ ,/ 对/ 本文/ 的/ 工作/ 做出/ 总结/ ,/ 并/ 给出/ 一些/ 将来/ 研究会/ 涉及/ 到/ 的/ 主题/ ./ 2/ 时间/ 变化/ 敏感点/ 检测/ 途径/ 本/ 节/ 提出/ 时间/ 变化/ 影响/ 分析/ 途径/ 的/ 目标/ 在于/ 寻找/ 程序/ 中/ 对/ 时间/ 变化/ 敏感/ 的/ 位置/ ,/ 这些/ 位置/ 局部/ 微小/ 的/ 时间/ 变化/ 会/ 导致/ 程序/ 中/ 整个/ 任务/ 时间/ 发生/ 很大/ 变化/ ./ 首先/ 引入/ 相关/ 定义/ ./ 2.1/ 时间/ 变化/ 敏感点/ 与/ 相关/ 度量/ 从/ 软件维护/ 的/ 角度/ ,/ 我们/ 的/ 工作/ 基于/ 如下/ 假设/ :/ 程序/ 中/ 的/ 修改/ 可以/ 被/ 分解成/ 多个/ 的/ 单点/ 修改/ ./ 这样/ 的/ 单点/ 修改/ 仅/ 在/ 软件/ 的/ 某/ 一/ 位置/ 做/ 独立/ 的/ 插入/ 操作/ ,/ 我们/ 的/ 度量/ 和/ 评估/ 都/ 是/ 基于/ 单点/ 修改/ 而/ 活动/ 的/ ./ 在/ 这里/ ,/ 首先/ 定义/ 程序/ 位置/ 点/ ,/ 描述/ 程序修改/ 的/ 具体位置/ ./ 定义/ 1/ (/ 程序/ 位置/ 点/ )/ ./ 给定/ 程序/ / ,/ 其任/ 一条/ 可/ 执行/ 语句/ 的/ 结束/ 位置/ 是/ / 的/ 一个/ 程序/ 位置/ 点/ ./ 从/ 实时/ 系统/ 的/ 角度/ ,/ 我们/ 仅/ 关注/ 在/ 程序/ 位置/ 点/ 插入/ 语句/ 段/ 所/ 导致/ 程序/ 任务/ 完成/ 时间/ 的/ 变化/ ,/ 并且/ 假设/ 所/ 插入/ 的/ 语句/ 段/ 对/ 程序/ 的/ 控制流/ 没有/ 任何/ 影响/ ./ 定义/ 2/ (/ 增量/ 时延/ 修改/ )/ ./ 给定/ 程序/ / ,/ 给定/ / 的/ 程序/ 位置/ 点/ p1/ ,/ 若/ 在/ p1/ 处/ 插入/ 一段/ 语句/ 且/ 该段/ 语句/ 对/ / 控制流/ 不/ 产生/ 任何/ 影响/ ,/ 则/ 称/ 程序/ / 在/ p1/ 处/ 发生/ 了/ 增量/ 时延/ 修改/ ,/ 被/ 插入/ 语句/ 段/ 的/ 执行/ 时间/ 称为/ 增量/ 时延/ ./ 更进一步/ 地/ ,/ 当/ 修改/ c/ 既/ 不/ 直接/ 涉及/ 到/ 软件/ 的/ 控制/ 流程/ 跳转/ 条件/ (/ 包括/ 分支/ 条件/ 、/ 循环/ 条件/ 以及/ 其它/ 类型/ 的/ 跳转/ 条件/ 等/ )/ ,/ 并且/ 程序/ 中/ 的/ 控制/ 流程/ 跳转/ 条件/ 也/ 不/ 依赖于/ 修改/ c/ 所/ 改变/ 的/ 数据流/ 时/ ,/ 我们/ 称/ 修改/ c/ 为/ 独立/ 于/ 软件/ 控制/ 流程/ 条件/ 的/ 时延/ 修改/ ,/ 或/ 简称/ 时延/ 修改/ ./ 本文/ 主要/ 关注/ 软件维护/ 时/ 增量/ 时延/ 修改/ 所/ 产生/ 的/ 增量/ 时延/ 对/ 程序/ 中/ 给定/ 任务/ 的/ 完成/ 时间/ 所/ 造成/ 的/ 影响/ ,/ 为了/ 度量/ 和/ 评估/ 这些/ 影响/ 需要/ 引入/ 以下/ 定义/ ./ 定义/ 3/ (/ 扰动/ 点/ 和/ 观察点/ )/ ./ 给定/ 程序/ / ,/ 且/ 在/ 程序/ 位置/ 点/ p1/ 发生/ 了/ 增量/ 时延/ 修改/ ;/ 给定/ / 中/ 的/ 一个/ 程序/ 任务/ R/ ,/ 且/ 其/ 在/ 程序/ 位置/ 点/ p2/ 结束/ ./ 若/ 我们/ 关注/ 该/ 增量/ 时延/ 修改/ 对/ 程序/ 任务/ R/ 的/ 完成/ 时间/ 所/ 产生/ 的/ 影响/ ,/ 则/ 称/ p1/ 为/ 扰动/ 点/ ,/ p2/ 为/ 观察点/ ./ 定义/ 4/ (/ 时间/ 杠杆/ 率/ )/ ./ 给定/ 程序/ / 和/ 其中/ 发生/ 的/ 一个/ 增量/ 时延/ 修改/ ,/ 设/ p1/ 和/ p2/ 分别/ 为/ 相应/ 的/ 扰动/ 点/ 和/ 观察点/ ,/ 增量/ 时延/ 为/ t/ ./ 设对/ 给定/ 的/ 一次/ 程序执行/ ,/ 发生/ 该/ 增量/ 时延/ 修改/ 前/ ,/ 程序/ 到达/ p2/ 的/ 执行/ 时间/ 为/ T/ ;/ 发生/ 该/ 增量/ 时延/ 修改/ 后/ ,/ 程序/ 到达/ p2/ 的/ 执行/ 时间/ 为/ T/ ./ 则/ 相对/ 于/ 该/ 程序执行/ 和/ 该/ 增量/ 时延/ 修改/ ,/ p1/ 的/ 时间/ 杠杆/ 率/ r/ (/ p1/ ,/ p2/ ,/ t/ )/ 定义/ 为/ 对/ 给定/ 程序/ 中/ 的/ 某个/ 增量/ 时延/ 修改/ 和/ 某次/ 程序执行/ ,/ 时间/ 杠杆/ 率/ 是/ 该/ 增量/ 时延/ 修改/ 对/ 给定/ 程序/ 任务/ 完成/ 时间/ 产生/ 影响/ 的/ 一种/ 度量/ ./ 若该/ 度量/ 值/ 超过/ Page4/ 了/ 某个/ 阈值/ (/ 从而/ 破坏/ 了/ 给定/ 程序/ 应该/ 满足/ 的/ 时间/ 约束条件/ )/ ,/ 我们/ 就/ 可以/ 断定/ 时间/ 变化/ 敏感点/ 的/ 存在/ ./ 定义/ 5/ (/ 时间/ 变化/ 敏感点/ )/ ./ 给定/ 程序/ / 和/ 其中/ 发生/ 的/ 一个/ 增量/ 时延/ 修改/ (/ 令/ 增量/ 时延/ 为/ t/ )/ ,/ 设/ p1/ 和/ p2/ 分别/ 为/ 相应/ 的/ 扰动/ 点/ 和/ 观察点/ ./ 若/ 存在/ / 的/ 一次/ 执行/ ,/ 使得/ p1/ 的/ 时间/ 杠杆/ 率/ r/ (/ p1/ ,/ p2/ ,/ t/ )/ 大于/ 给定/ 的/ 阈值/ ,/ 则/ 称/ p1/ 为/ 相对/ 于/ p2/ 的/ 时间/ 变化/ 敏感点/ ./ 在/ 实际/ 应用/ 中/ ,/ 用于/ 判断/ 时间/ 变化/ 敏感点/ 存在/ 的/ 阈值/ 是/ 根据/ 给定/ 程序/ 应该/ 满足/ 的/ 时间/ 约束条件/ 设定/ 的/ ./ 时间/ 变化/ 敏感点/ 的/ 定义/ 基于/ 具体/ 的/ 程序执行/ ,/ 因此/ 直觉/ 上/ 测试/ 是/ 检测时间/ 变化/ 敏感点/ 最/ 直接/ 的/ 途径/ ./ 2.2/ 时间/ 变化/ 敏感点/ 检测/ 过程/ 基于/ 上述/ 定义/ ,/ 我们/ 提出/ 一种/ 基于/ 扰动/ 测试方法/ 的/ 时间/ 变化/ 敏感点/ 检测/ 途径/ ,/ 它/ 通过/ 在/ 程序/ 中/ 的/ 各个/ 位置/ 点/ 插入/ 时延/ 进行/ 时间/ 变化/ 扰动/ ,/ 并/ 进一步/ 在/ 程序/ 中/ 各个/ 任务/ 结束/ 的/ 位置/ 点/ 或者/ 整个/ 程序/ 结束/ 的/ 位置/ 点/ 获取/ 程序执行/ 时间/ 的/ 变化/ 信息/ ,/ 以/ 判断/ 时图/ 2/ 时间/ 变化/ 敏感点/ 检测/ 流程/ 算法/ 1/ 描述/ 了/ 位置/ 点/ 的/ 标定/ 方法/ ,/ 它/ 扫描/ 待测/ 程序/ / 来/ 生成/ 扰动/ 点/ 集合/ Pd/ 和/ 观察点/ 集合/ Po/ ./ 我们/ 给/ 待测/ 程序/ 中/ 每/ 一个/ 位置/ 点/ 都/ 规定/ 了/ 一个/ 唯一/ 的/ 编号/ id/ ,/ 该/ 编号/ 标注/ 当前/ 位置/ 点/ 所在/ 源文件/ 及/ 行列/ 号/ 等/ 信息/ ,/ 整个/ 检测/ 过程/ 都/ 通过/ 这个/ 编号/ 来/ 识别/ 位置/ 点/ ./ 扰动/ 点/ 的/ 生成/ 集成/ 了/ 一个/ 的/ 静态/ 分析/ 预处理/ 函数/ static/ (/ )/ ,/ 该/ 函数/ 通过/ 静态方法/ 预测/ 程序/ 中/ 各个/ 位置/ 点/ 被/ 执行/ 到/ 的/ 频繁/ 程度/ ,/ 并/ 将/ 较为/ 频繁/ 的/ 执行/ 点/ 输出/ ./ 在/ 2.3/ 节里/ ,/ 我们/ 将/ 详细描述/ 该/ 静态/ 分析/ 预处理/ 函数/ 的/ 实现/ 细节/ ./ 另外/ ,/ 当/ static/ (/ )/ 函数/ 输出/ 的/ 扰动/ 点/ 数目/ 未能/ 达到/ 我们/ 根据/ 运行/ 平台/ 的/ 承受能力/ 而/ 估计/ 的/ 最大/ 扰动/ 数目/ Nd/ 时/ ,/ 我们/ 还/ 使用/ 随机/ 方法/ 来/ 补充/ 一批/ 扰动/ 点/ ,/ 当/ 不/ 与/ static/ (/ )/ 函数/ 的/ 输出/ 间/ 变化/ 敏感点/ 的/ 存在/ ./ 图/ 2/ 给出/ 了/ 该/ 途径/ 的/ 整体/ 流程/ ,/ 它/ 共/ 分为/ 5/ 步/ ./ 第/ 1/ 步是/ 位置/ 点/ 标定/ 预处理/ ,/ 在/ 这/ 一步/ 中/ ,/ 我们/ 针对/ 系统/ 的/ 原始/ 程序/ 标定/ 其/ 扰动/ 点/ 和/ 观察点/ ./ 并/ 将/ 这些/ 标定/ 的/ 位置/ 点/ 作为/ 时间/ 敏感/ 疑似/ 点/ 提供/ 给/ 后续/ 步骤/ 做/ 进一步/ 测试/ ;/ 第/ 2/ 步/ 确定/ 检测/ 过程/ 的/ 测试用例/ ,/ 当待/ 检测/ 程序/ 经过/ 功能测试/ 而/ 保留/ 了/ 测试用例/ 时/ ,/ 我们/ 直接/ 使用/ 这些/ 保留/ 的/ 测试用例/ ;/ 另外/ ,/ 我们/ 会/ 生成/ 一些/ 补充/ 的/ 测试用例/ ;/ 在/ 以上/ 两步/ 准备/ 工作/ 的/ 基础/ 上/ ,/ 第/ 3/ 步到/ 第/ 5/ 步/ 完成/ 时间/ 变化/ 敏感点/ 的/ 检测/ ./ 第/ 3/ 步对/ 程序/ 的/ 扰动/ 点/ 插/ 桩/ 具体/ 的/ 时延/ 代码/ ,/ 同时/ 对/ 相应/ 的/ 观察点/ 插桩/ 时间/ 行为/ 数据/ 收集/ 代码/ ,/ 原始/ 程序/ 被/ 转换成/ 经过/ 插桩/ 的/ 程序/ ;/ 第/ 4/ 步/ 使用/ 第/ 2/ 步/ 产生/ 的/ 测试用例/ 来/ 驱动/ 执行/ 经过/ 插桩/ 的/ 程序/ ,/ 记录/ 程序执行/ 的/ 时间/ 行为/ 数据/ ;/ 第/ 5/ 步/ 分析/ 上/ 一步/ 输出/ 的/ 时间/ 行为/ 数据/ ,/ 并/ 依据/ 它/ 判断/ 并/ 输出/ 时间/ 变化/ 敏感点/ ./ 下文/ 的/ 算法/ 1/ ~/ 5/ 列举/ 了/ 每/ 一个/ 检测/ 步骤/ 的/ 过程/ 细节/ ,/ 而/ 检测/ 方法/ 中/ 更进一步/ 的/ 理论/ 探讨/ 与/ 结论/ 参见/ 文后/ 附录/ ./ 重复/ 时/ ,/ 随机/ 函数/ random/ (/ )/ 按/ 定义/ 1/ 的/ 要求/ 随机/ 地/ 输出/ 程序/ / 中/ 执行/ 语句/ 的/ 结束/ 点来/ 作为/ 扰动/ 点/ ./ 最终/ 我们/ 将/ 静态/ 分析/ 预处理/ 函数/ 与/ 随机/ 函数/ 产生/ 的/ 这/ 两/ 部分/ 位置/ 点均/ 作为/ 扰动/ 点/ 提供/ 给/ 后续/ 步骤/ 做/ 进一步/ 测试/ ./ 算法/ 1/ 直接/ 以/ 程序/ 任务/ 的/ 结束/ 位置/ 点/ 作为/ 观察点/ ,/ 它/ 包括/ 线程/ 结束/ 点/ 和/ 消息/ 处理函数/ 的/ 结束/ 点/ ,/ 以便/ 在/ 后续/ 步骤/ 中/ 观察/ 程序/ 任务/ 执行/ 结束/ 时间/ 的/ 变化/ ./ 这些/ 生成/ 的/ 扰动/ 点/ 和/ 观察点/ 将/ 用于/ 在/ 第/ 3/ 步/ 程序/ 插桩/ 中/ 标识/ 插桩/ 位置/ ./ 算法/ 1/ ./ 位置/ 点/ 的/ 标定/ ./ 输入/ :/ 原始/ 程序/ / 输出/ :/ 扰动/ 点/ 集合/ Pd/ ,/ 观察点/ 集合/ PoPd/ ←/ static/ (/ / )/ ,/ Po/ ←/ / Page5FOR/ / p/ ∈/ / DOIFp/ 为/ 任务/ 结束/ 点/ THENPo/ ←/ Po/ ∪/ {/ p/ }/ ENDFORWHILEnumber/ (/ Pd/ )/ </ NdDOPd/ ←/ Pd/ ∪/ random/ (/ p/ ∈/ / )/ ENDWHILE/ 算法/ 2/ 用于/ 选择/ 测试用例/ ,/ 从而/ 生成/ 测试用例/ 集合/ C/ ./ 如果/ 待测/ 程序/ 已经/ 经过/ 了/ 功能测试/ ,/ 算法/ 2/ 直接/ 使用/ 功能测试/ 遗留/ 的/ 测试用例/ fun/ _/ case/ (/ )/ ./ 当/ 测试用例/ 数量/ 未/ 达到目标/ 数量/ Nc/ 时/ ,/ 随机/ 用例/ 生成/ 方法/ random/ _/ case/ (/ )/ 帮助/ 生成/ 测试用例/ ,/ 该/ 方法/ 首先/ 生成/ 随机数/ ,/ 然后/ 依据/ 程序/ 的/ 输入/ 类型/ 来/ 约/ 减/ 它们/ ,/ 以/ 满足/ 程序/ 的/ 输入/ 要求/ (/ 例如/ ,/ 当/ 程序/ 需要/ 输入/ 0/ 到/ 99/ 之间/ 的/ 整数/ 类型/ 时/ ,/ 它/ 将/ 生成/ 的/ 随机数/ 取整/ 并/ mod100/ )/ ./ 处理/ 后/ 的/ 数值/ 将/ 被/ 用作/ 程序/ 的/ 输入/ ./ 在/ 程序/ 的/ 输入/ 类型/ 要求/ 过于/ 复杂/ 时/ ,/ 检测/ 过程/ 会/ 要求/ 用户/ 手工/ 提供/ 测试用例/ manual/ _/ case/ (/ )/ ./ 测试用例/ 选择/ 程序/ 会/ 帮助/ 我们/ 过滤/ 掉/ 不能/ 满足/ 测试/ 要求/ 的/ 用例/ ,/ 即/ 执行/ 路径/ 不/ 经过/ 扰动/ 点/ 或/ 对应/ 观察点/ 的/ 测试用例/ ./ 算法/ 2/ 的/ 第/ 5/ 行/ 开始/ 描述/ 测试用例/ 的/ 选择/ 过程/ ./ 首先/ 我们/ 在/ 所有/ 的/ 扰动/ 点/ 和/ 观察点/ 上/ 插/ 桩/ 记录/ 语句/ w/ (/ )/ 以/ 标记/ 程序/ 的/ 执行/ 轨迹/ ,/ 得到/ / ;/ w/ (/ )/ 的/ 实现/ 向/ 文件/ 输出/ 当前/ 的/ 位置/ 点/ 编号/ id/ 以及/ 该/ 位置/ 点/ 被/ 标定/ 的/ 类型/ —/ —/ —/ 是/ 扰动/ 点/ 还是/ 观察点/ ./ 当/ 程序执行/ 路径/ 经过/ 当前/ 位置/ 点时/ ,/ 相应/ 的/ 程序执行/ 会/ 调用/ 该/ 位置/ 点/ 的/ 记录/ 语句/ w/ (/ )/ 而/ 输出/ 该处/ 的/ 位置/ 点/ id/ ./ 由于/ 编号/ id/ 标注/ 了/ 当前/ 位置/ 点/ 的/ 各种/ 信息/ ,/ 我们/ 能够/ 很/ 容易/ 地/ 定位/ 出是/ 哪/ 一个/ 位置/ ./ eval/ _/ / (/ )/ 会/ 驱动/ 测试用例/ 逐一/ 执行程序/ / 以/ 记录/ 各用例/ 的/ 执行/ 路径/ 所/ 经过/ 的/ 位置/ 点/ ,/ 最后/ 分析/ 这些/ 执行/ 路径/ 的/ 输出/ 以/ 选择/ 出/ 同时/ 覆盖/ 扰动/ 点/ 和/ 其/ 观察点/ 的/ 测试用例/ ,/ 未能/ 覆盖/ 任何/ 扰动/ 点/ 或者/ 未能/ 覆盖/ 任何/ 观察点/ 的/ 用例/ 将/ 会/ 被/ 直接/ 过滤/ ./ 这些/ 经过/ 选择/ 的/ 测试用例/ 将/ 在/ 第/ 4/ 步中/ 作为/ 程序/ 输入/ 来/ 驱动/ 检测/ 过程/ 的/ 执行/ ./ 算法/ 2/ ./ 测试用例/ 选择/ ./ 输入/ :/ 原始/ 程序/ / ,/ 扰动/ 点/ 集合/ Pd/ ,/ 观察点/ 集合/ Po/ 输出/ :/ 测试用例/ 集/ CC/ ←/ fun/ _/ case/ (/ )/ ,/ / ←/ / p/ ∈/ Pd/ ∪/ Po/ ,/ / [/ p/ ←/ |/ w/ (/ )/ ]/ WHILEnumber/ (/ C/ )/ </ NcDOC/ ←/ random/ _/ case/ (/ )/ ∨/ manual/ _/ case/ (/ )/ ENDWHILEFOR/ / case/ ∈/ CDOIF/ / p/ ∈/ eval/ _/ / (/ case/ )/ ,/ p/ / Pd/ ∨/ p/ / PoTHENC/ ←/ C/ -/ {/ case/ }/ ENDIFENDFOR/ 算法/ 3/ 将/ 时延/ 代码/ d/ 插桩/ 到/ 程序/ 的/ 扰动/ 点/ ,/ 并/ 将/ 时间/ 记录/ 函数/ o/ 插桩/ 到/ 程序/ 的/ 观察点/ ,/ 以/ 形成/ 一组/ 插桩/ 后/ 的/ 程序/ / t/ ;/ 作为/ 对比/ ,/ 算法/ 3/ 还/ 生成/ 了/ 仅/ 在/ 观察点/ 插桩/ 时间/ 记录/ 函数/ o/ 的/ 程序/ 版本/ / o/ ./ 本文/ 在/ Linux/ 平台/ 上/ 针对/ C/ // C++/ 程序实现/ 了/ 检测/ 算法/ ,/ 其中/ 时延/ 代码/ d/ 是/ 按照/ 定义/ 2/ 的/ 要求/ 所/ 预定/ 义/ 的/ 一组/ 与/ 待测/ 程序控制/ 流/ 无关/ 的/ 代码/ 块/ delay/ _/ fun/ (/ )/ ./ 它/ 包括/ 不同/ 量级/ 的/ Linux/ 系统/ 时延/ 调用/ sleep/ (/ )/ 和/ mdelay/ (/ )/ ,/ 普通/ 的/ 循环/ 代码/ 块/ 以及/ 普通/ 的/ 执行/ 代码/ 块/ ./ 本文/ 的/ 实现/ 通过/ 调用/ Linux/ 系统/ 时间/ 记录/ 接口/ gettimeofday/ (/ )/ 来/ 编写/ 时间/ 记录/ 函数/ o/ ,/ 它/ 的/ 精度/ 可以/ 达到/ 微秒/ 量级/ ./ 另外/ ,/ 我们/ 把/ 时延/ 代码/ d/ 与/ 时间/ 记录/ 函数/ o/ 的/ 自定义/ 接口/ 都/ 开放/ 给/ 了/ 用户/ ,/ 以/ 方便/ 用户/ 在/ 使用/ 中/ 扩展/ 这些/ 插桩/ 代码/ ./ 这样/ ,/ 经过/ 插桩/ 的/ 程序/ 经过/ 第/ 4/ 步/ 的/ 执行/ ,/ 就/ 可以/ 记录/ 到/ 当前/ 插桩/ 的/ 时延/ 代码/ 对/ 观察点/ 所/ 记录/ 的/ 执行/ 时间/ 的/ 影响/ ./ 对比/ 程序/ / o/ 在/ 第/ 4/ 步/ 的/ 程序执行/ 过程/ 中/ 记录/ 原始/ 程序/ 在/ 未经/ 扰动/ 下/ 程序/ 任务/ 的/ 执行/ 时间/ ,/ 时延/ 代码/ d/ 本身/ 的/ 时延/ 值/ t/ 将/ 用于/ 后续/ 步骤/ 时间/ 敏感/ 率/ 的/ 计算/ ./ 在/ 算法/ 3/ 的/ 输出/ 元素/ / t/ (/ p1/ ,/ p2/ )/ 和/ / o/ (/ p2/ )/ 中/ ,/ 括号/ 中/ 的/ (/ p1/ ,/ p2/ )/ 与/ (/ p2/ )/ 是/ 标签/ ,/ 用来/ 标定/ 当前/ 经过/ 插桩/ 程序/ 的/ 插/ 桩/ 点/ ./ 算法/ 3/ ./ 程序/ 插桩/ ./ 输入/ :/ 原始/ 程序/ / ,/ 扰动/ 点/ 集合/ Pd/ ,/ 观察点/ 集合/ Po/ 输出/ :/ 经过/ 插桩/ 的/ 程序/ 集/ / / ←/ / FOR/ / p1/ ∈/ Pd/ ,/ / p2/ ∈/ Po/ ,/ / d/ ∈/ 2delay/ _/ fun/ (/ )/ DOt/ ←/ eval/ (/ d/ )/ ENDFOR/ 算法/ 4/ 使用/ 第/ 2/ 步/ 生成/ 的/ 测试用例/ 来/ 驱动/ 执行/ 第/ 3/ 步/ 插/ 桩/ 后/ 的/ 程序/ / t/ 和/ / o/ ./ 在/ 执行/ 过程/ 中/ ,/ / t/ 调用/ 了/ 在/ 观察点/ 插桩/ 的/ 时间/ 记录/ 函数/ 来/ 记录/ 程序/ 经过/ 时延/ 后/ 到达/ 观察点/ 的/ 执行/ 时间/ T/ ;/ 与此同时/ ,/ 对比/ 版本/ 程序/ / o/ 的/ 执行/ ,/ 输出/ 原始/ 程序/ 直接/ 到达/ 观察点/ 的/ 执行/ 时间/ T/ ./ 有/ 了/ 这些/ 数据/ ,/ 算法/ 4/ 依照/ 定义/ 4/ 中/ 的/ 式/ (/ 1/ )/ 来/ 计算/ 时间/ 杠杆/ 率/ r/ ./ 这些/ 对于/ 每/ 一次/ 执行/ 而/ 产生/ 的/ 时间/ 杠杆/ 率/ 细致/ 地/ 描述/ 了/ 在/ 这次/ 执行/ 中/ 当前/ 扰动/ 点/ 对/ 所/ 观察/ 的/ 程序/ 任务/ 执行/ 时间/ 的/ 大小/ ,/ 算法/ 4/ 将/ 它们/ 放入/ 集合/ R/ 中/ 输出/ ./ 算法/ 4/ ./ 程序执行/ ./ 输入/ :/ 经过/ 插桩/ 的/ 程序/ 集/ / ,/ 测试用例/ 集/ C/ 输出/ :/ 时间/ 杠杆/ 率/ 的/ 集合/ RPage6R/ ←/ / FOR/ / (/ / t/ (/ p1/ ,/ p2/ )/ ,/ / o/ (/ p2/ )/ ,/ t/ )/ ∈/ / DOFOR/ / case/ ∈/ CDOT/ (/ p1/ ,/ p2/ ,/ t/ ,/ case/ )/ ←/ eval/ _/ / t/ (/ p1/ ,/ p2/ )/ (/ case/ )/ T/ (/ p2/ ,/ case/ )/ ←/ eval/ _/ / o/ (/ p2/ )/ (/ case/ )/ r/ (/ p1/ ,/ p2/ ,/ t/ ,/ case/ )/ ←/ T/ (/ p1/ ,/ p2/ ,/ t/ ,/ case/ )/ -/ T/ (/ p2/ ,/ case/ )/ // tR/ ←/ {/ r/ (/ p1/ ,/ p2/ ,/ t/ ,/ case/ )/ }/ ∪/ RENDFORENDFOR/ 算法/ 5/ 分析/ 第/ 4/ 步/ 输出/ 的/ 时间/ 杠杆/ 率/ 数据/ ,/ 将/ 其/ 抽象/ 成/ 针对/ 位置/ 点/ 的/ 高层/ 信息/ ,/ 并/ 以此/ 为/ 根据/ 输出/ 时间/ 变化/ 敏感点/ ./ 这/ 一步/ 的/ 主要/ 目标/ 在于/ 将/ 每/ 一次/ 执行/ 所/ 得到/ 的/ 时间/ 杠杆/ 率/ 数据/ 总结/ 成/ 各个/ 扰动/ 点/ 的/ 属性/ 信息/ ,/ 然后/ 依据/ 这些/ 属性/ 信息/ 比较/ 各个/ 扰动/ 点/ 对/ 程序/ 任务/ 执行/ 时间/ 的/ 影响/ ./ 由于/ 我们/ 的/ 分析/ 关注/ 于/ 当前/ 扰动/ 点/ 在/ 各次/ 执行/ 中/ 对/ 程序/ 任务/ 的/ 执行/ 时间/ 可能/ 造成/ 的/ 最坏/ 影响/ ,/ 故而/ 最终/ 针对/ 扰动/ 的/ 时间/ 杠杆/ 率取/ 的/ 是/ 不同/ 测试用例/ 下/ 时间/ 杠杆/ 率/ 的/ 最大值/ max/ ./ 而/ 最终/ 判定/ 时间/ 变化/ 敏感点/ 的/ 依据/ 是/ 不同/ 时延/ 下/ 的/ 平均/ 时间/ 杠杆/ 率/ ./ 当/ 这/ 一时间/ 杠杆/ 率/ 的/ 计算/ 值/ 大于/ 用户/ 根据/ 原始/ 程序/ 的/ 实时/ 冗余/ 而/ 给定/ 的/ 阈值/ Rl/ 时/ ,/ 当前/ 扰动/ 点/ 被/ 判定/ 为/ 时间/ 变化/ 敏感点/ ,/ 并/ 最终/ 将/ 该/ 点/ 和/ 该/ 点/ 的/ 平均/ 时间/ 杠杆/ 率/ 输出/ 给/ 用户/ ./ 算法/ 5/ ./ 敏感点/ 分析/ ./ 输入/ :/ 各/ 次/ 执行/ 的/ 时间/ 杠杆/ 率/ 的/ 集合/ R/ ,/ 扰动/ 点/ 集合/ 输出/ :/ 时间/ 变化/ 敏感点/ 集/ PsPs/ ←/ / ,/ r/ (/ p1/ ,/ p2/ ,/ t/ )/ ←/ max/ (/ {/ / case/ ,/ r/ (/ p1/ ,/ p2/ ,/ t/ ,/ case/ )/ ∈/ R/ }/ )/ FOR/ / p1/ ∈/ Pd/ ,/ / p2/ ∈/ PoDOr/ (/ p1/ ,/ p2/ )/ ←/ average/ (/ {/ / t/ ,/ r/ (/ p1/ ,/ p2/ ,/ t/ )/ }/ )/ IFr/ (/ p1/ ,/ p2/ )/ >/ RlTHENPs/ ←/ Ps/ ∪/ {/ (/ p1/ ,/ r/ (/ p1/ ,/ p2/ )/ )/ }/ ENDIFENDFOR2/ ./ 3/ 静态/ 分析/ 预处理/ 过程/ 在/ 检测/ 流程/ 的/ 第/ 1/ 步/ ,/ 标定/ 程序/ 位置/ 点时/ ,/ 扰动/ 点/ 的/ 标定/ 依赖于/ 一个/ 静态/ 分析/ 预处理/ 过程/ static/ ,/ 它/ 通过/ 静态/ 扫描/ 程序/ 中/ 会/ 频繁/ 执行/ 到/ 的/ 位置/ 来/ 标定/ 扰动/ 点/ ./ 我们/ 称/ 这些/ 可能/ 会/ 被/ 频繁/ 执行/ 到/ 的/ 位置/ 为/ 时间/ 敏感/ 疑似/ 点/ ./ 它们/ 是/ 程序/ 轨迹/ 可能/ 会/ 停留/ 较长时间/ 的/ 程序/ 位置/ ,/ 或者/ 是/ 程序/ 路径/ 会/ 反复/ 经过/ 的/ 位置/ ./ 静态/ 分析/ 预处理/ 过程/ 集成/ 了/ 如图/ 3/ 所示/ 的/ 程序/ 分析/ 技术/ ./ 首先/ 我们/ 使用/ 可达性/ 分析/ 滤除/ 与/ 当前/ 的/ 程序/ 任务/ 无关/ 的/ 代码/ 模块/ ;/ 而后/ 的/ 递归/ 检测/ 和/ 循环/ 检测/ 可以/ 得到/ 被/ 这些/ 结构/ 包含/ 的/ 所有/ 代码/ 块/ ,/ 这些/ 代码/ 块/ 是/ 相对/ 于/ 路径/ 的/ 高频/ 热点/ 常常/ 聚集/ 的/ 地方/ ;/ 最后/ ,/ 上限/ 估计/ 会/ 粗略地/ 去除/ 明显/ 还/ 在/ 实时/ 软件/ 容忍/ 能力/ 范围/ 内/ 的/ 位置/ 点/ ./ 经过/ 这些/ 步骤/ ,/ 我们/ 可以/ 静态/ 地/ 提取/ 时间/ 敏感/ 疑似/ 点/ ,/ 以供/ 后续/ 的/ 测试步骤/ 进一步/ 确认/ ./ 虽然/ 在/ 编译/ 优化/ 、/ 软件/ 错误/ 检测/ 以及/ 最坏/ 状况/ 执行/ 时间/ 分析/ 等/ 应用/ 中/ 也/ 使用/ 了/ 类似/ 的/ 静态/ 分析/ 技术/ ,/ 但/ 在/ 处理/ 时间/ 敏感/ 疑似/ 点/ 检测/ 时/ 这些/ 技术/ 需要/ 作/ 一些/ 改动/ ./ 另外/ ,/ 我们/ 对/ 算法/ 的/ 精度/ 和/ 效率/ 做/ 了/ 必要/ 的/ 折衷/ 和/ 选择/ ./ 可达性/ 分析/ 是/ 一项/ 用于/ 死/ 代码/ 消减/ 的/ 软件/ 错误/ 检测/ 技术/ [/ 5/ ]/ ./ 由于/ 相对/ 于/ 给定/ 的/ 程序/ 任务/ 来说/ ,/ 不可/ 达/ 的/ 源代码/ 模块/ 中/ 一定/ 不/ 存在/ 时间/ 变化/ 敏感点/ ,/ 故/ 我们/ 的/ 静态/ 预处理/ 分析/ 通过/ 可达性/ 分析/ 来/ 提取/ 程序/ 任务/ 和/ 其/ 源代码/ 模块/ 的/ 可达性/ 信息/ ,/ 从而/ 达到/ 为/ 进一步/ 地/ 分析/ 过滤/ 掉/ 不可/ 达/ 模块/ 的/ 目的/ ./ 值得注意/ 的/ 是/ ,/ 和/ 传统/ 的/ 可达性/ 分析/ 不同/ ,/ 用于/ 时间/ 变化/ 影响/ 分析/ 的/ 算法/ 并/ 不会/ 消减/ 掉/ 软件/ 中/ 的/ 无用/ 功能/ 代码/ ,/ 因为/ 这样/ 的/ 代码/ 仍然/ 会/ 占用/ 时间/ ,/ 甚至/ 成为/ 时间/ 变化/ 敏感点/ ./ 在/ 我们/ 分析/ 中所要/ 消减/ 的/ 不可/ 达/ 代码/ 主要/ 是/ 指/ 相对/ 于/ 给定/ 的/ 程序/ 任务/ ,/ 没有/ 控制/ 路径/ 经过/ 的/ 代码/ ./ 算法/ 6/ 描述/ 了/ 本文/ 检测/ 方法/ 所/ 采用/ 的/ 可达性/ 分析方法/ ,/ 它/ 采用/ 一种/ 基于/ 控制流/ 图/ gf/ (/ ControlFlowGraph/ ,/ CFG/ )/ 的/ 标记/ -/ 清除/ 算法/ (/ 类似/ 于/ 程序设计/ 语言/ 的/ 垃圾/ 收集器/ )/ 来/ 完成/ 这一/ 分析/ ./ 该/ 控制流/ 图/ 的/ 节点/ 集合/ 为/ Nf/ 、/ 有/ 向/ 边/ 集合/ 为/ Ef/ 以及/ 入口/ 节点/ 为/ ns/ ./ 分析器/ 初始/ 将/ 所有/ 代码/ 块/ 标为/ “/ 不可/ 达/ ”/ ,/ 而后/ 从/ 当前任务/ 控制流/ 图/ 的/ 初始/ 节点/ 开始/ ,/ 依次/ 将/ 可达/ 节点/ 标为/ “/ 可/ 达/ ”/ ,/ 并/ 加入/ 我们/ 所/ 设定/ 的/ 可达/ 语句/ 集/ Sa/ ./ 在/ 理想/ 状况/ 下/ ,/ 所有/ 剩下/ 的/ 节点/ 都/ 可以/ 作为/ 不可/ 达/ 节点/ 而/ 被/ 过滤/ 掉/ ./ 在/ 实际/ 情况/ 下/ ,/ 当/ 存在/ 难以确定/ 的/ 代码/ 块/ 时/ ,/ 算法/ 将/ 保守/ 地/ 保留/ 这些/ 代码/ 块/ 而/ 由/ 进一步/ 的/ 分析/ 来/ 确认/ ./ 算法/ 6/ ./ 可达性/ 分析/ ./ 输入/ :/ 控制流/ 图/ gf/ (/ Nf/ ,/ Ef/ ,/ ns/ ∈/ Nf/ )/ ∈/ Gf/ 输出/ :/ 可/ 达/ 语句/ 集/ SaSa/ ←/ {/ ns/ }/ Page7FOR/ / i/ ,/ j/ ∈/ NfDOIFi/ ∈/ Sa/ ∧/ (/ i/ ,/ j/ )/ ∈/ EfTHENSa/ ←/ Sa/ ∪/ {/ j/ }/ ENDIFENDFOR/ 程序/ 中/ 的/ 递归/ 和/ 循环/ 结构/ 块/ 由于/ 占用/ 的/ 程序执行/ 时间/ 较长/ ,/ 是/ 相对/ 于/ 路径/ 的/ 高频/ 热点/ 常常/ 出现/ 之处/ ./ 在/ 图/ 3/ 中/ ,/ 这/ 两种/ 代码/ 块/ 的/ 检测/ 是/ 我们/ 静态/ 预处理/ 分析/ 的/ 核心/ ./ 这里/ 我们/ 采用/ 一种/ 基于/ 函数调用/ 图/ 的/ 贪心/ 算法/ 来/ 检测/ 程序/ 中/ 的/ 递归/ 块/ ,/ 算法/ 7/ 描述/ 了/ 递归/ 检测/ 的/ 执行/ 过程/ ./ 在/ 一个/ 调用/ 图/ gc/ 中/ ,/ 每/ 一个/ 节点/ 代表/ 一个/ 函数/ 或/ 过程/ ,/ 而/ 每/ 一条/ 从/ 节点/ i/ 到/ 节点/ j/ 的/ 有/ 向/ 边/ (/ 记/ 为/ (/ i/ ,/ j/ )/ )/ 表示/ 一个/ 从/ 过程/ i/ 到/ 过程/ j/ 的/ 调用/ ./ 算法/ 7/ 描述/ 了/ 递归/ 检测/ 过程/ ,/ 其中/ Gc/ 是/ 所有/ 调用/ 图/ 的/ 集合/ ,/ 而/ Nc/ 和/ Ec/ 则/ 分别/ 表示/ 算法/ 所/ 接受/ 的/ 调用/ 图/ gc/ 的/ 节点/ 集和有/ 向/ 边集/ ./ 当/ 我们/ 把/ 当前/ 程序/ 的/ 调用/ 关系/ 图/ 输入/ 给/ 算法/ 7/ 所/ 描述/ 的/ 递归/ 检测/ 算法/ 后/ ,/ 算法/ 经过/ 迭代/ 标记/ ,/ 快速/ 地/ 输出/ 处于/ 递归/ 块/ 中/ 的/ 函数/ 过程/ ./ 算法/ 7/ ./ 递归/ 检测/ ./ 输入/ :/ 调用/ 图/ gc/ (/ Nc/ ,/ Ec/ )/ ∈/ Gc/ …/ 输出/ :/ 递归函数/ 集/ FrEc/ ←/ EcFOR/ / i/ ,/ j/ ,/ k/ ∈/ NcDOIF/ (/ i/ ,/ k/ )/ ∈/ Ec/ ∧/ (/ k/ ,/ j/ )/ ∈/ EcTHENEc/ ←/ Ec/ ∪/ {/ (/ i/ ,/ j/ )/ }/ ENDIFENDFORFr/ ←/ {/ i/ |/ i/ ∈/ Nc/ ∧/ (/ i/ ,/ i/ )/ ∈/ Ec/ }/ 在/ 本文/ 的/ 静态/ 预处理/ 分析/ 中/ ,/ 我们/ 采用/ 了/ Sreedhar/ -/ Gao/ -/ Lee/ [/ 6/ ]/ 所/ 提出/ 的/ 基于/ 支配/ 节点/ 的/ 循环/ 检测/ 算法/ ./ 它/ 相对/ 于/ 间隔/ 分析/ 与/ 结构/ 分析/ 等/ 其它/ 循环/ 检测/ 技术/ [/ 7/ -/ 8/ ]/ 的/ 优势/ 在于/ 该/ 算法/ 可以/ 高效/ 地/ 迭代/ 处理/ 不可/ 规约/ 循环/ ./ 算法/ 8/ 描述/ 了/ 循环/ 检测/ 算法/ 的/ 过程/ ,/ 它/ 使用/ 了/ 基于/ 支配/ 节点/ 的/ 循环/ 检测/ 技术/ ./ 当/ 从/ 控制流/ 图/ 的/ 入口/ 节点/ 到达/ 节点/ n/ 的/ 每/ 一条/ 路径/ 都/ 必/ 经过/ 节点/ d/ 时/ ,/ 我们/ 称/ 节点/ d/ 支配/ 节点/ n/ ,/ 记为/ ddomn/ ./ 假如/ 控制流/ 图/ 的/ 某/ 一个/ 深度/ 优先/ 生成/ 树/ 的/ 某/ 一条/ 回边/ 的/ 目标/ 节点/ 支配/ 其源/ 节点/ ,/ 则/ 此边/ 在/ 当前/ 控制流/ 图/ 的/ 任意/ 深度/ 优先/ 生成/ 树中/ 都/ 为/ 回边/ ./ 并且/ 由/ 这条/ 回边/ 可以/ 确定/ 一个/ 自然/ 循环/ 块/ ,/ 这一/ 循环/ 块/ 包括/ 节点/ d/ 以及/ 所有/ 存在/ 不/ 通过/ 节点/ d/ 到达/ 节点/ n/ 的/ 路径/ 的/ 节点/ ./ 这样/ ,/ 循环/ 检测/ 问题/ 就/ 等价/ 于/ 支配/ 节点/ 的/ 检测/ ./ 在/ 算法/ 8/ 中/ ,/ 我们/ 首先/ 生成/ 支配/ 关系/ dom/ ,/ 它/ 将/ 控制流/ 图/ gf/ 中/ 的/ 每/ 一个/ 节点/ 映射/ 到/ 所有/ 支配/ 它/ 的/ 节点/ 集合/ ./ 而后/ 依据/ 生成/ 的/ dom/ 关系/ 构建/ 循环/ 块/ ./ 算法/ 8/ ./ 循环/ 检测/ ./ 输入/ :/ 控制流/ 图/ gf/ (/ Nf/ ,/ Ef/ ,/ ns/ ∈/ Nf/ )/ ∈/ Gf/ 输出/ :/ 循环/ 块/ 集合/ Lsdom/ ←/ {/ ns/ →/ {/ ns/ }/ }/ ,/ Ls/ ←/ / FOR/ / n/ ∈/ Nf/ -/ {/ ns/ }/ DOdom/ ←/ {/ n/ →/ Nf/ }/ ∪/ domENDFORREPEATC/ ←/ / FOR/ / n/ ∈/ Nf/ -/ {/ ns/ }/ DOdom/ (/ n/ )/ ←/ {/ n/ }/ ∪/ ∩/ (/ n/ ,/ n/ )/ ∈/ EfC/ ←/ C/ ∪/ {/ n/ }/ ENDFORUNTILC/ ←/ / FOR/ / n1/ ∈/ Nf/ -/ {/ ns/ }/ DOIF/ / n1/ ,/ n2/ ,/ …/ ,/ nk/ ∈/ Nf/ ,/ (/ ni/ ,/ ni/ +/ 1/ )/ ∈/ Ef/ ∧/ nk/ ∈/ dom/ (/ n1/ )/ THENENDIFLs/ ←/ Ls/ ∪/ {/ S/ }/ ENDFOR/ 算法/ 9/ 描述/ 了/ 本文/ 使用/ 的/ 基于/ 模板/ 的/ 边界/ 估计/ 方法/ ,/ 它/ 是/ 一项/ 在/ 最坏/ 状况/ 执行/ 时间/ 分析/ 中/ 提出/ 的/ 技术/ [/ 9/ -/ 10/ ]/ ,/ 用于/ 检测/ 程序/ 中/ 循环/ 块/ 的/ 迭代/ 次数/ 上限/ ./ 在/ 算法/ 9/ 中/ ,/ 当/ 循环/ 块/ 匹配/ for/ (/ i/ =/ i1/ ;/ i/ </ in/ ;/ i/ +/ =/ k/ )/ 或/ i/ =/ i1/ ;/ while/ (/ i/ </ in/ )/ {/ …/ i/ +/ =/ k/ ;/ }/ 或/ i/ =/ i1/ -/ k/ ;/ do/ {/ …/ i/ +/ =/ k/ ;/ }/ while/ (/ i/ </ in/ )/ 等/ 模板/ 时/ ,/ 求解/ 函数/ solve/ 会解/ 得/ 循环/ 块/ 边界/ (/ in/ -/ i1/ )/ // k/ ,/ 在/ 其它/ 情况/ 下/ ,/ 算法/ 9/ 将/ 其/ 边界值/ 标为/ ⊥/ ./ 这些/ 边界值/ 被/ 标为/ ⊥/ 的/ 部分/ 和/ 边界值/ 较/ 高/ 的/ 循环/ 块/ 将/ 被/ 直接/ 输出/ 给/ 2.2/ 节所/ 描述/ 的/ 测试/ 算法/ 测试/ ,/ 以/ 判定/ 其中/ 是否/ 存在/ 时间/ 变化/ 敏感点/ ./ 算法/ 9/ ./ 边界/ 估计/ ./ 输入/ :/ 循环/ 块/ 集合/ Ls/ 输出/ :/ 边界/ 信息/ boundPage8bound/ ←/ / FOR/ / b/ ∈/ LsDOIFpattern/ (/ b/ )/ ≠/ unknownTHENELSEENDIFENDFOR3/ 实例/ 研究/ 与/ 评估/ 这/ 一节/ 给出/ 时间/ 变化/ 影响/ 分析/ 在/ MlardalenWCET/ 学术/ 基准/ 用/ 例集/ 和/ 工业界/ 的/ 实际/ 开源/ 项目/ FreeLosslessAudioCodec/ (/ FLAC/ )/ 上/ 的/ 实例/ 研究/ ./ 首先/ 介绍/ 实验设计/ 与/ 支撑/ 环境/ ;/ 然后/ 分别/ 给出/ 两个/ 案例/ 上/ 的/ 实验/ 结果/ 与/ 分析/ 评估/ ./ 3.1/ 实验设计/ 与/ 支撑/ 环境/ 由于/ 静态/ 分析/ 库/ ROSE/ [/ 11/ ]/ 拥有/ 较/ 丰富/ 的/ 程序转换/ 的/ 机制/ ,/ 且/ 可/ 用于/ Fortran/ 、/ C/ 和/ C++/ 等/ 多种语言/ 的/ 静态/ 分析/ ,/ 因此/ 我们/ 时间/ 变化/ 影响/ 分析/ 的/ 原型/ 内核/ 基于/ ROSE/ 实现/ ./ 此/ 内核/ 负责/ 预处理/ 和/ 动态/ 测试/ 插桩/ ,/ 它/ 是/ 以/ 对/ 程序/ 的/ 抽象/ 语法/ 树/ (/ AbstractSyntaxTree/ ,/ AST/ )/ 使用/ visitor/ 设计模式/ 来/ 遍历/ 实现/ 的/ ./ 而/ 外围/ 的/ 测试/ 驱动/ 、/ 动态/ 调度/ 、/ 结果/ 分析/ 等/ 则/ 是/ 使用/ Ruby/ 脚本/ 来/ 实现/ ./ 整个/ 实验/ 评估/ 过程/ 运行/ 在/ 一台/ DellOptiplex755/ 工作站/ 上/ ,/ 其/ CPU/ 型号/ 为/ IntelCore2DuoE45002/ ./ 2GHz/ ,/ 拥有/ 2GB/ 内存容量/ ,/ 操作系统/ 为/ 带/ 2.6/ ./ 24/ -/ 29/ -/ generic/ 版本/ Linux/ 内核/ 的/ Ubuntu8/ ./ 04/ ,/ 编译器/ 为/ gcc4/ ./ 2.4/ ,/ Ruby/ 解释器/ 版本/ 为/ Ruby1/ ./ 8.6/ patchlevel111/ ./ 本节/ 以/ 2.1/ 节所/ 定义/ 的/ 时间/ 杠杆/ 率/ r/ (/ p1/ ,/ p2/ ,/ t/ )/ 作为/ 评估/ 依据/ ,/ 并/ 使用/ 统计/ 中/ 的/ 频数/ 分布/ 对/ 位置/ 点/ 进行/ 成组/ ./ 以/ 对数/ 分布/ 的/ 形式/ ,/ 我们/ 构建/ 了/ [/ 0/ ,/ 1.5/ ]/ 、/ (/ 1.5/ ,/ 5/ ]/ 、/ (/ 15/ ,/ 50/ ]/ 、/ (/ 15/ ,/ 50/ ]/ 、/ (/ 50/ ,/ 150/ ]/ 、/ (/ 150/ ,/ 500/ ]/ 、/ (/ 500/ ,/ 1500/ ]/ 和/ (/ 1500/ ,/ +/ )/ 这/ 8/ 个/ 数值/ 段/ 集合/ R/ ,/ 每个/ 集合/ 代表/ 一个组/ ./ 当/ 程序/ 中/ 某个/ 位置/ 点/ 的/ 时间/ 杠杆/ 率/ r/ ∈/ R/ 时/ ,/ 我们/ 将/ 这个/ 位置/ 点/ 的/ 计数/ 统计/ 在/ 对应/ 的/ 分组/ 上/ ./ 作为/ 示例/ ,/ 在/ 我们/ 的/ 评估/ 中以/ 5/ 和/ 50/ 作为/ 阈值/ ,/ 在/ 实际/ 时间/ 杠杆/ 点/ 检测/ 中/ ,/ 阈值/ 取决于/ 待/ 分析/ 项目/ 的/ 需求/ 以及/ 所/ 分析/ 任务/ 的/ 时间/ 冗余/ 情况/ ./ 当待/ 分析/ 任务/ 在/ 原始/ 系统/ 中有/ 较大/ 的/ 实时性/ 冗余/ 时/ ,/ 我们/ 可以/ 将/ 阈值/ 取高/ ,/ 以/ 过滤/ 出/ 更/ 少/ 的/ 时间/ 变化/ 敏感点/ ,/ 反之/ 我们/ 应当/ 将/ 阈值/ 取低/ ,/ 从而/ 将/ 更/ 多/ 的/ 时间/ 变化/ 敏感点/ 汇报/ 给/ 用户/ ,/ 以/ 提醒/ 软件维护/ 人员/ 注意/ ./ 在/ 我们/ 的/ 实验/ 中/ ,/ 当/ 时间/ 杠杆/ 率/ 到达/ 50/ 以上/ 时/ ,/ 依据/ 经验/ 我们/ 就/ 将/ 这样/ 的/ 点判/ 为/ 时间/ 变化/ 敏感点/ ./ 而/ 当/ 时间/ 杠杆/ 率/ 小于/ 或/ 等于/ 5/ 时/ ,/ 由于/ 时间/ 影响/ 确实/ 很小/ ,/ 我们/ 相信/ 这样/ 的/ 点/ 是/ 安全/ 点/ ./ 而/ 当/ 时间/ 杠杆/ 率/ 在/ 5/ 和/ 50/ 之间/ 时/ ,/ 我们/ 的/ 方法/ 不能/ 确定/ 这些/ 点/ 是否/ 安全/ ,/ 对/ 这样/ 的/ 位置/ 点/ 的/ 分析/ 需要/ 一步/ 的/ 判断/ 或者/ 手工/ 确认/ ./ 3.2/ WCET/ 基准/ 用/ 例集/ 的/ 评估/ 首先/ 我们/ 使用/ 了/ MlardalenWCET/ 基准/ 作为/ 评估/ 用/ 例集/ ./ 这一用/ 例集/ 本身/ 是/ 设计/ 用于/ 评估/ 最坏/ 状况/ 执行/ 时间/ 分析/ 的/ ,/ 故而/ 在/ 我们/ 看来/ ,/ 时间/ 变化/ 影响/ 分析/ 在/ 这些/ 用例/ 上/ 也/ 具有/ 实际意义/ ./ 在/ 本组/ 实验/ 中/ ,/ 评估/ 用/ 例集/ 自身/ 解决/ 了/ 实验所/ 需/ 的/ 测试用例/ ,/ 因而/ 不/ 需要/ 考虑/ 测试用例/ 的/ 覆盖/ 问题/ ./ 为了/ 提高/ 所/ 求解/ 度量/ 的/ 辨识/ 度/ ,/ 我们/ 将/ 5/ 组/ 不同/ 量级/ 的/ 时延/ 代码/ 作为/ 插桩/ 代码/ 来/ 对待/ 测/ 任务/ 做/ 实时性/ 扰动/ ,/ 经过/ 测算/ 这/ 5/ 组/ 代码/ 的/ 时延/ 值/ 分别/ 为/ 6.74/ E/ -/ 6s/ 、/ 2.69/ E/ -/ 5s/ 、/ 4.15/ E/ -/ 4s/ 、/ 8.11/ E/ -/ 3s/ 以及/ 1.31/ E/ -/ 1s/ ,/ 这样/ 就/ 基本上/ 涵盖/ 了/ 从/ 微秒/ 到/ 秒/ 级/ 的/ 时延/ 状况/ ./ 这些/ 代码/ 时延/ 方式/ 包括/ 了/ 普通/ 语句/ 时延/ 、/ 循环/ 时延/ 、/ API/ 等待/ 时延/ 等等/ ,/ 以/ 保证/ 结果/ 在/ 统计/ 上/ 更为/ 客观/ ./ 在/ 这里/ 各组/ WCET/ 用例/ 的/ 代码/ 规模/ 都/ 不大/ ,/ 我们/ 对/ 程序/ 中/ 所有/ 位置/ 点/ 直接/ 做/ 扰动/ 而/ 得到/ 较为/ 全面/ 的/ 结果/ ./ 表/ 1/ 给出/ 了/ 这些/ 基准/ 用/ 例集/ 的/ 评估/ 结果/ ./ 我们/ 首先/ 按/ 对数/ 分布/ 进行/ 分组/ ,/ 而后/ 再/ 将/ 各个/ 位置/ 点/ 按/ 平均/ 时间/ 杠杆/ 率/ r/ ∈/ R/ 统计/ 得到/ 表/ 1/ 对应/ 的/ 频数/ 分布/ ,/ 对应/ 位置/ 点/ 的/ 计数/ 被/ 统计/ 到/ 各个/ 分组/ 内/ ./ 从表/ 1/ 结果/ 来看/ ,/ MlardalenWCET/ 基准/ 用例/ 集中/ 的/ 用例/ 一共/ 可以/ 分为/ 3/ 类/ :/ 不/ 具有/ 时间/ 变化/ 敏感点/ 的/ 用例/ ,/ 例如/ nsichneu/ 和/ bs/ ,/ 对于/ 这/ 一类/ 用例/ 软件维护/ 人员/ 不/ 需要/ 太/ 多/ 担心/ 因为/ 软件/ 演化/ 上/ 的/ 因/ 位置/ 的/ 不/ 小心/ 而/ 引入/ 时间/ 错误/ 隐患/ ;/ 具有/ 明显/ 时间/ 变化/ 敏感点/ 的/ 用例/ ,/ 例如/ adpcm/ 和/ edn/ ,/ 软件维护/ 人员/ 在/ 对/ 这些/ 用例/ 的/ 时间/ 变化/ 敏感点/ 发生/ 修改/ 时/ 需要/ 特别/ 注意/ ;/ 难以/ 明确/ 判断/ 的/ 用例/ ,/ 例如/ inssort/ 和/ select/ ,/ 这类/ 用例/ 由于/ 存在/ 中等/ 敏感/ 的/ 位置/ 点/ ,/ 因而/ 需要/ 对/ 相关/ 的/ 疑似/ 点/ 做/ 手工/ 校对/ ./ 由于/ 篇幅/ 的/ 限制/ ,/ 在/ 这里/ 我们/ 仅仅/ 举例/ 对/ 各/ 不同/ 类型/ 用例/ 的/ 位置/ 点/ 分析/ 进行/ 说明/ ,/ 更/ 详细/ 的/ 追踪/ 数据/ 可/ 从/ 地址/ :/ http/ :/ // // seg/ ./ nju/ ./ edu/ ./ cn/ // ~/ eytang/ // timeleverage/ // trackingdata/ ./ tar/ ./ gz/ 下载/ ./ Page9/ 表/ 1WCET/ 基准/ 用/ 例集/ 各/ 位置/ 点/ 时间/ 杠杆/ 率/ 的/ 频数/ 分布/ 基准/ 用/ 例集/ adpcm42/ // 14.38/ %/ 164/ // 56.16/ %/ 61/ // 20.89/ %/ 16/ // 5.48/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 9/ // 3.08/ %/ bs16/ // 76.19/ %/ 5/ // 23.81/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ bsort17/ // 58.62/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 6/ // 20.69/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 6/ // 20.69/ %/ cnt33/ // 80.49/ %/ 0/ // 0/ %/ 2/ // 4.88/ %/ 0/ // 0/ %/ 6/ // 14.63/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ compress122/ // 76.25/ %/ 0/ // 0/ %/ 1/ // 0.62/ %/ 30/ // 18.75/ %/ 7/ // 4.38/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ cover595/ // 99.50/ %/ 0/ // 0/ %/ 1/ // 0.17/ %/ 1/ // 0.17/ %/ 1/ // 0.17/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ crc0/ // 0/ %/ 1/ // 12.50/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 4/ // 50.00/ %/ 2/ // 25.00/ %/ 1/ // 12.50/ %/ duff11/ // 40.74/ %/ 1/ // 3.70/ %/ 14/ // 51.85/ %/ 0/ // 0/ %/ 1/ // 3.70/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ edn61/ // 53.51/ %/ 1/ // 0.88/ %/ 0/ // 0/ %/ 23/ // 20.18/ %/ 17/ // 14.91/ %/ 3/ // 2.63/ %/ 8/ // 7.02/ %/ 1/ // 0.88/ %/ expint40/ // 88.89/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 1/ // 2.22/ %/ 4/ // 8.89/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ fac6/ // 60.00/ %/ 0/ // 0/ %/ 2/ // 20.00/ %/ 2/ // 20.00/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ fdct28/ // 22.22/ %/ 0/ // 0/ %/ 98/ // 77.78/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ fft12/ // 8.70/ %/ 1/ // 4.35/ %/ 12/ // 52.17/ %/ 8/ // 34.78/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ fibcall16/ // 84.21/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 3/ // 15.79/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ fir23/ // 69.70/ %/ 0/ // 0/ %/ 9/ // 27.27/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 1/ // 3.03/ %/ 0/ // 0/ %/ 0/ // 0/ %/ inssort19/ // 73.08/ %/ 0/ // 0/ %/ 3/ // 11.54/ %/ 4/ // 15.38/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ jcomplex10/ // 55.56/ %/ 1/ // 5.56/ %/ 7/ // 38.89/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ jfdctint31/ // 28.97/ %/ 0/ // 0/ %/ 74/ // 69.16/ %/ 0/ // 0/ %/ 2/ // 1.87/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ lcdnum38/ // 86.36/ %/ 1/ // 2.27/ %/ 5/ // 11.36/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ lms4/ // 5.48/ %/ 1/ // 1.37/ %/ 0/ // 0/ %/ 6/ // 8.22/ %/ 23/ // 31.51/ %/ 25/ // 34.25/ %/ 5/ // 6.85/ %/ 9/ // 12.33/ %/ loop3168/ // 60.87/ %/ 62/ // 22.46/ %/ 42/ // 15.22/ %/ 4/ // 1.45/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ ludcmp27/ // 46.55/ %/ 0/ // 0/ %/ 18/ // 31.03/ %/ 13/ // 22.41/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ matmult13/ // 54.17/ %/ 3/ // 12.50/ %/ 0/ // 0/ %/ 2/ // 8.33/ %/ 0/ // 0/ %/ 2/ // 8.33/ %/ 3/ // 12.50/ %/ 1/ // 4.17/ %/ minmax23/ // 88.46/ %/ 3/ // 11.54/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ minver48/ // 42.11/ %/ 33/ // 28.95/ %/ 31/ // 27.19/ %/ 2/ // 1.75/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ ns11/ // 73.33/ %/ 1/ // 6.67/ %/ 0/ // 0/ %/ 1/ // 6.67/ %/ 1/ // 6.67/ %/ 0/ // 0/ %/ 1/ // 6.67/ %/ 0/ // 0/ %/ nsichneu835/ // 48.60/ %/ 883/ // 51.40/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ qsort/ -/ exam23/ // 32.39/ %/ 31/ // 43.66/ %/ 16/ // 22.54/ %/ 1/ // 1.41/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ qurt36/ // 53.73/ %/ 21/ // 31.34/ %/ 5/ // 7.46/ %/ 5/ // 7.46/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ select35/ // 54.69/ %/ 3/ // 4.69/ %/ 11/ // 17.19/ %/ 15/ // 23.44/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ sqrt17/ // 68.00/ %/ 2/ // 8.00/ %/ 5/ // 20.00/ %/ 1/ // 4.00/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ statemate597/ // 80.24/ %/ 147/ // 19.76/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ 0/ // 0/ %/ nsichneu/ 是/ 一段/ 由/ Petri/ 模型/ 生成/ 的/ 代码/ ,/ 它/ 模拟/ 了/ 一个/ 具有/ 大量/ 分支/ 语句/ 以及/ 少量/ 简单/ 循环/ 的/ 模型/ 行为/ ./ 经/ 分析/ ,/ 此/ 程序/ 中/ 所有/ 位置/ 点/ 的/ 时间/ 杠杆/ 率均/ 小于/ 或/ 等于/ 5/ ,/ 这/ 意味着/ 此/ 程序/ 中/ 各个/ 位置/ 都/ 相对/ 安全/ ,/ 用户/ 不/ 需要/ 担心/ 因为/ 修改/ 位置/ 的/ 不同/ 而/ 在/ 软件/ 演化过程/ 中/ 引入/ 时间/ 错误/ ./ adpcm/ 是/ 自/ 适应/ 差值/ 脉冲/ 编码/ 调制/ [/ 12/ ]/ 的/ 一个/ 结构化/ 实现/ ./ 在/ 这个/ 程序/ 中/ ,/ 我们/ 的/ 原型/ 共/ 发现/ 了/ 9/ 处/ 时间/ 杠杆/ 率/ 在/ 1500/ 倍/ 以上/ 的/ 位置/ 点/ ,/ 其中/ 5/ 处在/ 函数/ my/ _/ fabs/ 里/ ,/ 另外/ 4/ 处在/ 函数/ my/ _/ sin/ 的/ 第/ 2/ 和/ 第/ 3/ 个/ 循环/ 里/ ./ 软件维护/ 者/ 在/ 涉及/ 到/ 这些/ 位置/ 的/ 修改/ 时/ 需要/ 特别/ 注意/ ./ inssort/ 是/ 数组/ 插入排序/ 的/ 一个/ 具体/ 实现/ ,/ 其中/ 有/ 一个/ 两层/ 的/ 嵌套循环/ ./ 就/ 我们/ 工具/ 分析/ ,/ 这一/ 程序/ 没有/ 明显/ 的/ 时间/ 变化/ 敏感点/ ,/ 但/ 有/ 7/ 个/ 疑似/ 点/ 需要/ 稍加/ 注意/ ./ 当/ 我们/ 追踪/ 这个/ 程序/ 的/ 结果/ 时/ ,/ 发现/ 其中/ 4/ 个/ 位于/ 内层/ 循环/ 的/ 位置/ 点/ 的/ 时间/ 杠杆/ 率/ 在/ 15/ 到/ 50/ 之间/ ,/ 而/ 3/ 个/ 位于/ 外层/ 循环/ 的/ 位置/ 点/ 的/ 时间/ 杠杆/ 率/ 在/ 5/ 到/ 15/ 之间/ ,/ 维护/ 人员/ 需要/ 对/ 这些/ 位置/ 点/ 稍加/ 注意/ ./ 3.3/ FLAC/ 开源/ 项目/ 上/ 的/ 评估/ 自由/ 音频/ 无损/ 编码/ (/ FreeLosslessAudioCodec/ ,/ FLAC/ )/ 项目/ 是/ 一个/ 多媒体/ 编解码/ 的/ 开源/ 软件/ 项目/ ./ 当多/ 媒体播放器/ 调用/ 这一/ 模块/ 进行/ 解码/ 时/ ,/ 时间/ 属性/ 的/ 破坏/ 会/ 引起/ 声音/ 的/ 延迟/ 和/ 畸变/ ./ 我们/ 的/ 评估/ 基于/ flac1/ ./ 2.1/ 版/ ,/ 这是/ 我们/ 在/ 进行/ 评估/ 实验/ 时所能/ 得到/ 的/ 最新/ 版本/ ./ 我们/ 没有/ 得到/ 该/ 项目/ 发布/ 前/ 的/ 测试用例/ 集/ ,/ 故而/ 手动/ 收集/ 了/ 一个/ 测试用例/ 集来/ 作为/ 输入/ ./ 该用/ 例集/ 分别/ 有/ 通俗歌曲/ 、/ 古典音乐/ 、/ 中国/ 民乐/ 、/ 白/ 噪声/ 、/ 电影/ 配声/ (/ 撞击声/ 、/ 汽车/ 马达声/ )/ 、/ 自录/ 人声/ 、/ 自然/ 音效/ 以及/ 低/ 采样/ 音效/ 一共/ 有/ 9/ 组/ 测试用例/ ,/ 基本/ 可以/ 涵盖/ 主要/ 的/ 音频/ 类型/ ./ 我们/ 评估/ 了/ 项目/ 中/ 最/ 主要/ 的/ 两个/ 组件/ ,/ 分别/ 是/ 用于/ 提供/ 编码/ 和/ 解码/ 所/ 需/ 的/ 核心/ API/ 的/ libFLAC/ 库/ (/ 在/ 表/ 2/ 中以/ lib/ 标识/ )/ 以及/ 调用/ libFLAC/ 库/ 进行/ 实际/ 编码/ 解码/ 的/ 控制台/ 驱动程序/ (/ 在/ 表/ 2/ 中以/ bin/ 标识/ )/ ./ 由于/ 这/ 两个/ 组件/ 都/ 具有/ 一定/ 的/ 规模/ ,/ 在/ 分析/ Page10/ 中/ 我们/ 采用/ 静态/ 预处理/ 分析/ 预先/ 得到/ 了/ 疑似/ 点/ ,/ 并且/ ,/ 为了/ 减少/ 系统/ 的/ 误报/ ,/ 我们/ 根据/ 评估/ 环境/ 的/ 承受/ 表/ 2FLAC/ 开源/ 项目/ 各/ 位置/ 点/ 时间/ 杠杆/ 率/ 的/ 频数/ 分布/ 任务/ 组件/ 编码/ bin21906912/ 解码/ bin23066313/ 我们/ 分别/ 对/ FLAC/ 项目/ 中/ 这/ 两个/ 组件/ 的/ 编码/ 和/ 解码/ 任务/ 做/ 了/ 评估/ ,/ 结果/ 如表/ 2/ 所示/ ./ 对于/ 扰动/ 测试/ 输入/ 的/ 每/ 一个/ 位置/ 点/ ,/ 我们/ 仍然/ 使用/ 了/ 同/ 前面/ WCET/ 实验/ 相同/ 的/ 5/ 组/ 不同/ 量级/ 的/ 时延/ 代码/ 来/ 做/ 插/ 桩/ 扰动/ ./ 由于/ 结果/ 并/ 不是/ 对/ 所有/ 位置/ 点/ 而/ 得/ ,/ 相应/ 的/ 百分比/ 信息/ 就/ 变得/ 没有/ 意义/ ,/ 故在表/ 2/ 中/ 去除/ ./ 同上/ 一个/ 实验/ 一样/ ,/ 我们/ 仍然/ 以/ 分组/ 后/ 的/ 频数/ 分布/ 来/ 查找/ 程序/ 中/ 的/ 时间/ 变化/ 敏感点/ ./ 从表/ 2/ 的/ 数据/ 来看/ ,/ 较/ 明显/ 的/ 时间/ 变化/ 敏感点/ 都/ 落/ 在/ 了/ 控制台/ 驱动程序/ 里/ ,/ 这/ 说明/ 相应/ libFLAC/ 库/ 的/ 设计/ 在/ 时间/ 属性/ 方面/ 做/ 了/ 比较/ 充分/ 的/ 考虑/ ,/ 其中/ 每/ 一个/ 我们/ 所/ 测试/ 到/ 的/ 位置/ 点/ ,/ 都/ 满足/ 时间/ 杠杆/ 率/ r/ / 50/ ./ 而/ 坐落/ 在/ 控制台/ 驱动程序/ 里/ 的/ 3/ 个/ 时间/ 杠杆/ 率/ 大于/ 1500/ 倍/ 的/ 位置/ 点/ 经过/ 追踪/ ,/ 分别/ 在/ encode/ ./ c/ 的/ 2147/ 行/ 和/ 2148/ 行/ 以及/ decode/ ./ c/ 的/ 1067/ 行/ ./ 这/ 3/ 个点/ 都/ 落/ 在/ 上限/ 很/ 高/ 的/ 循环/ 体内/ ,/ 因而/ 也/ 被/ 我们/ 的/ 静态/ 预处理/ 分析/ 直接/ 捕获/ 到/ ./ 3.4/ 时间/ 变化/ 敏感点/ 检测/ 的/ 度量/ 误差/ 评估/ 以上/ 两个/ 实验/ 都/ 在/ 测试用例/ 中/ 只/ 考虑/ 了/ 输入/ 数据/ ,/ 对于/ 时间/ 变化/ 敏感点/ 检测/ 的/ 度量/ 存在/ 的/ 误差/ ,/ 我们/ 通过/ 计算/ 程序/ 各/ 次/ 执行/ 的/ 平均/ 变异系数/ 来/ 进行/ 评估/ ./ 经过/ 计算/ ,/ MlardalenWCET/ 基准/ 用/ 例集/ 的/ 平均/ 变异系数/ 为/ 0.281/ ,/ 而/ FLAC/ 项目/ 的/ 平均/ 变异系数/ 为/ 1.284/ ,/ 作为/ 变异系数/ 的/ 这/ 两个/ 数值/ 是/ 和/ 时间/ 杠杆/ 率/ 处于/ 同一/ 数量级/ ,/ 而/ 我们/ 在/ 评估/ 中/ 判断/ 时间/ 杠杆/ 点/ 的/ 依据/ 数值/ 在/ 50/ 以上/ ,/ 远远/ 高于/ 变异系数/ 的/ 数量级/ ./ 这/ 表明/ 评估/ 中/ 相应/ 的/ 误差/ 没有/ 对/ 检测/ 结果/ 产生/ 影响/ ./ 4/ 相关/ 工作/ 经过/ 查找/ 相关/ 文献/ 调研/ ,/ 我们/ 之前/ 并未/ 发现/ 与/ 围绕/ 软件系统/ 演化/ 所/ 带来/ 的/ 时间/ 影响/ 方面/ 有/ 直接/ 相关/ 工作/ ,/ 但是/ 与/ 本文/ 间接/ 相关/ 的/ 研究/ 工作/ 是/ 大量/ 存在/ 的/ ./ 在/ 这里/ 我们/ 分析/ 和/ 讨论/ 其中/ 的/ 主要/ 方面/ ,/ 主/ 能力/ ,/ 仍然/ 给/ 扰动/ 测试/ 模块/ 随机/ 添加/ 了/ 一定/ 数量/ 的/ 原始/ 位置/ 点以/ 进行/ 分析/ ./ 犚/ 的/ 频数/ 要/ 包括/ :/ (/ 1/ )/ 软件/ 修改/ 影响/ 分析/ (/ ImpactAnalysis/ )/ ;/ (/ 2/ )/ 最坏/ 状况/ 执行/ 时间/ (/ WCET/ )/ 分析/ ;/ (/ 3/ )/ 调度/ 相关/ 的/ 敏感度/ 分析/ (/ SensitiveAnalysis/ )/ 以及/ (/ 4/ )/ 频繁/ 执行/ 点/ (/ HotSpots/ )/ 的/ 定位/ 研究/ ./ 软件/ 修改/ 影响/ 分析/ ./ 为了/ 预测/ 软件/ 修改/ 可能/ 带来/ 的/ 后果/ ,/ 大量/ 软件/ 修改/ 影响/ 分析/ 相关/ 的/ 研究/ 工作/ 已经/ 开展/ [/ 1/ ,/ 13/ ]/ ./ 其中/ 既有/ 通过/ 基于/ 软件/ 的/ 生命周期/ 或者/ 软件/ 源代码/ 的/ 语义/ 而/ 采用/ 的/ 静态/ 分析/ 技术/ 来/ 获得/ 影响/ 数据/ 的/ 方法/ [/ 3/ -/ 4/ ,/ 14/ ]/ ,/ 又/ 有/ 通过/ 动态/ 执行/ 软件/ 来/ 收集/ 相关/ 的/ 影响/ 信息/ 的/ 途径/ [/ 2/ ,/ 15/ -/ 16/ ]/ ./ 尽管/ 这/ 中间/ 有/ 很多/ 研究/ 都/ 使用/ 了/ 基于/ 插桩/ 的/ 技术/ ,/ 但/ 这些/ 研究/ 都/ 没有/ 涉及/ 到/ 实时/ 软件/ 在/ 执行/ 时间/ 上/ 的/ 需求/ ,/ 而是/ 集中/ 在/ 软件/ 的/ 功能/ 需求/ 上/ ./ 本文/ 运用/ 了/ 基于/ 扰动/ 的/ 方法/ 为/ 这个/ 方面/ 工作/ 增添/ 一个/ 新/ 的/ 子类/ —/ —/ —/ 时间/ 变化/ 影响/ 分析/ ./ 最坏/ 状况/ 执行/ 时间/ 分析/ ./ 实时/ 软件开发/ 和/ 验证/ 过程/ 中/ 的/ 一个/ 必要/ 步骤/ ,/ 是/ 通过/ 对/ 最坏/ 状况/ 执行/ 时间/ 的/ 判定/ 来/ 保障/ 其/ 实时性/ ./ 对于/ 最坏/ 状况/ 执行/ 时间/ 分析/ 的/ 研究/ ,/ 已经/ 有/ 十多年/ 的/ 历史/ 了/ [/ 17/ -/ 19/ ]/ ./ 根据/ Bate/ [/ 20/ ]/ 和/ Seshia/ [/ 21/ ]/ 的/ 分类/ ,/ 最坏/ 状况/ 执行/ 时间/ 分析/ 的/ 研究/ 主要/ 有/ 两个/ 独立/ 的/ 方向/ :/ 基于/ 度量/ 的/ 最坏/ 状况/ 执行/ 时间/ 分析/ 技术/ 和/ 基于/ 静态/ 分析/ 的/ 最坏/ 状况/ 执行/ 时间/ 分析/ 技术/ ./ 近年来/ 的/ 一些/ 静态/ 最坏/ 状况/ 执行/ 时间/ 上/ 的/ 研究/ 已经/ 开始/ 考虑/ 实时/ 系统/ 硬件/ 微结构/ 的/ 影响/ ,/ 从而/ 提高/ 分析/ 精度/ [/ 22/ -/ 23/ ]/ ./ 不同于/ 我们/ 工作/ 的/ 是/ ,/ 这些/ 分析/ 工作/ 所/ 注重/ 的/ 是/ 系统/ 本身/ 最坏/ 状况/ 的/ 执行/ 时间/ ,/ 本文/ 的/ 研究所/ 关注/ 的/ 是/ 程序修改/ 和/ 软件/ 演化/ 对/ 时间/ 产生/ 的/ 影响/ ,/ 能/ 在/ 软件/ 演化/ 发生/ 前/ 就/ 开始/ 分析/ ,/ 从而/ 得到/ 可以/ 指导/ 软件维护/ 人员/ 减少/ 或/ 避免/ 时间/ 错误/ 的/ 相关/ 信息/ ./ 敏感度/ 分析/ ./ 敏感度/ 分析/ 是/ 统计/ 领域/ 里/ 的/ 常用/ 方法/ ,/ 它/ 主要/ 用于/ 分析/ 统计/ 结果/ 变化/ 的/ 原因/ 是/ 由/ 统计/ 模型/ 怎样/ 的/ 输入/ 变化/ 所/ 引起/ 的/ [/ 24/ ]/ ./ 这样/ 的/ 技术/ 同样/ 被/ 用于/ 分析/ 实时/ 系统/ [/ 25/ -/ 26/ ]/ 甚至/ 是/ 分布式/ 实时/ 系统/ [/ 27/ ]/ 的/ 系统/ 参数/ 将/ 怎样/ 影响/ 其/ 时间/ 约束/ ./ 和/ 我们/ 的/ Page11/ 工作/ 不同/ ,/ 实时/ 系统/ 的/ 敏感度/ 分析/ 主要/ 聚焦/ 于/ 系统/ 模型/ ,/ 并/ 以/ 系统/ 的/ 可/ 调度/ 性/ 问题/ 为/ 其/ 目标/ ./ 这些/ 技术/ 关注/ 于/ 怎样/ 获得/ 引起/ 实时/ 系统/ 不可/ 调度/ 的/ 最/ 有/ 可能/ 的/ 参数/ [/ 28/ ]/ ./ 而/ 我们/ 的/ 工作/ 主要/ 聚焦/ 于/ 代码/ 层面/ ,/ 而/ 不是/ 设计/ 模型/ 层面/ ,/ 主要/ 目的/ 是/ 在/ 软件/ 演化/ 中/ 帮助/ 维护/ 人员/ 避免/ 问题/ 的/ 发生/ ./ 频繁/ 执行/ 点/ 的/ 定位/ ./ 程序/ 频繁/ 执行/ 点/ 的/ 概念/ 是/ 随着/ 软件/ 优化/ 技术/ 的/ 发展/ 所/ 提出/ 来/ 的/ ,/ 通过/ 程序/ 剖析/ 技术/ (/ ProgramProfiling/ )/ 和/ 程序/ 分析/ 技术/ 所/ 检测/ 出/ 的/ 频繁/ 执行/ 点/ ,/ 可以/ 帮助/ 软件/ 优化/ 工具/ 调动/ 更/ 多/ 的/ 资源/ 在/ 频繁/ 执行/ 点/ 做/ 局部优化/ 以/ 提高/ 整体/ 软件/ 的/ 优化/ 效果/ ,/ 即/ 减少/ 程序/ 的/ 平均/ 执行/ 时间/ [/ 29/ -/ 33/ ]/ ./ 与/ 我们/ 在/ 时间/ 变化/ 敏感点/ 检测/ 中/ 关注/ 的/ 程序/ 任务/ 执行/ 路径/ 上/ 多次/ 经过/ 的/ 位置/ 点/ 不同/ ,/ 程序/ 频繁/ 执行/ 点/ 是/ 程序/ 大量/ 执行/ 后/ 统计/ 出/ 的/ 高频/ 热点/ ./ 程序/ 频繁/ 执行/ 点/ 不/ 一定/ 是/ 时间/ 变化/ 敏感点/ ,/ 同样/ 时间/ 变化/ 敏感点/ 也/ 不/ 一定/ 是/ 程序/ 频繁/ 执行/ 点/ ./ 5/ 结束语/ 时间/ 属性/ 的/ 正确性/ 在/ 实时/ 软件/ 中/ 非常/ 重要/ ,/ 而/ 时间/ 相关/ 的/ 软件/ 错误/ 不仅/ 在/ 软件/ 的/ 设计/ 开发阶段/ 会/ 被/ 引入/ ,/ 软件维护/ 和/ 演化/ 阶段/ 也/ 会/ 产生/ 时间/ 约束/ 破坏/ 等/ 问题/ ./ 本文/ 的/ 主要/ 贡献/ 可以/ 归纳/ 为/ 如下/ 几个/ 方面/ :/ (/ 1/ )/ 针对/ 软件维护/ 阶段/ 引入/ 的/ 实时性/ 错误/ 问题/ ,/ 本文/ 提出/ 了/ 时间/ 变化/ 影响/ 分析/ 的/ 概念/ ./ 它/ 可以/ 在/ 维护/ 工程师/ 修改/ 软件/ 之前/ 做出/ 分析/ ,/ 从而/ 帮助/ 维护/ 人员/ 减少/ 或者/ 避免/ 时间/ 变化/ 错误/ 的/ 发生/ ;/ (/ 2/ )/ 本文/ 开发/ 了/ 一种/ 基于/ 扰动/ 的/ 测试/ 技术/ ,/ 来/ 实现/ 相关/ 的/ 时间/ 变化/ 影响/ 分析/ ,/ 即/ 实现/ 了/ 时间/ 变化/ 敏感点/ 的/ 检测/ ./ 并/ 在/ 此基础/ 上/ ,/ 采用/ 了/ 多种/ 静态/ 程序/ 分析/ 技术/ 来/ 优化/ 相关/ 的/ 待/ 检测点/ 的/ 发现/ 过程/ ,/ 以/ 提高/ 分析/ 整体/ 的/ 运行/ 效率/ ;/ (/ 3/ )/ 本文/ 对/ 所/ 提出/ 的/ 分析方法/ 给出/ 了/ 原型/ 软件工具/ 的/ 实现/ ,/ 并/ 在/ MlardalenWCET/ 基准/ 用/ 例集/ 和/ 开源/ 项目/ FreeLosslessAudioCodec/ (/ FLAC/ )/ 上/ 做/ 了/ 实例/ 评估/ ./ 评估/ 结果显示/ 了/ 我们/ 分析方法/ 及/ 优化/ 的/ 有效性/ ./ 在/ 本文/ 工作/ 的/ 基础/ 上/ ,/ 未来/ 我们/ 将/ 尝试/ 把/ 测试用例/ 扩展/ 成/ 包括/ 处理器/ 调度/ 、/ 中断/ 序列/ 、/ 多级/ 缓存/ 等/ 因素/ 影响/ 的/ 形式/ ,/ 以/ 得到/ 更为/ 精确/ 的/ 处理/ ./ 另外/ ,/ 我们/ 也/ 会/ 考虑/ 进一步提高/ 静态/ 分析/ 预处理/ 效率/ 的/ 检测/ 方法/ ./ 

