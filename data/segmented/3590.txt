Page1/ 基于/ 环境/ 敏感/ 分析/ 的/ 恶意代码/ 脱壳/ 方法/ 王志/ 贾春福鲁凯/ (/ 南开大学/ 信息技术/ 科学/ 学院/ 天津/ 300071/ )/ 摘要/ 加壳/ 技术/ 是/ 软件/ 的/ 常用/ 保护/ 手段/ ,/ 但/ 也/ 常/ 被/ 恶意代码/ 用于/ 躲避/ 杀毒软件/ 的/ 检测/ ./ 通用/ 脱壳/ 工具/ 根据/ 加壳/ 恶意代码/ 运行/ 时/ 的/ 行为/ 特征/ 或/ 统计/ 特征/ 进行/ 脱壳/ ,/ 需要/ 建立/ 监控/ 环境/ ,/ 因此/ 易受/ 环境/ 敏感/ 技术/ 的/ 干扰/ ./ 文中/ 提出/ 了/ 一种/ 基于/ 环境/ 敏感/ 分析/ 的/ 恶意代码/ 脱壳/ 方法/ ,/ 利用/ 动静/ 结合/ 的/ 分析/ 技术/ 检测/ 并/ 清除/ 恶意代码/ 的/ 环境/ 敏感性/ ./ 首先/ ,/ 利用/ 中间/ 语言/ 对/ 恶意代码/ 的/ 执行/ 轨迹/ 进行/ 形式化/ 表示/ ;/ 然后/ ,/ 分析/ 执行/ 轨迹/ 中/ 环境/ 敏感数据/ 的/ 来源/ 和/ 传播/ 过程/ ,/ 提取/ 脱壳/ 行为/ 的/ 环境/ 约束/ ;/ 最后/ ,/ 求解/ 环境/ 约束条件/ ,/ 根据/ 求解/ 结果/ 对/ 恶意代码/ 进行/ 二进制/ 代码/ 插装/ ,/ 清除/ 其/ 环境/ 敏感性/ ./ 基于/ 此/ 方法/ ,/ 作者/ 实现/ 了/ 一个/ 通用/ 的/ 恶意代码/ 脱壳/ 工具/ :/ MalUnpack/ ,/ 并/ 对/ 321/ 个/ 最新/ 的/ 恶意代码/ 样本/ 进行/ 了/ 对比/ 实验/ ./ 实验/ 结果表明/ MalUnpack/ 能/ 有效/ 对抗/ 恶意代码/ 的/ 环境/ 敏感/ 技术/ ,/ 其/ 脱壳/ 率/ 达到/ 了/ 89.1/ %/ ,/ 显著/ 高于/ 现有/ 基于/ 动态/ 监控/ 的/ 通用/ 脱壳/ 工具/ 的/ 35.5/ %/ 和/ 基于/ 特征/ 的/ 定向/ 脱壳/ 工具/ 的/ 28.0/ %/ ./ 关键词/ 恶意代码/ 分析/ ;/ 脱壳/ 技术/ ;/ 环境/ 敏感/ 分析/ ;/ 污点/ 分析/ ;/ 符号执行/ 1/ 引言/ 加壳/ 是/ 一种/ 重要/ 的/ 软件保护/ 技术/ ,/ 它/ 可以/ 对/ 软件/ 的/ 二进制/ 代码/ 进行/ 加密/ 或/ 压缩/ ,/ 并/ 在/ 执行/ 过程/ 中/ 动态/ 解密/ 或/ 解压缩/ 这些/ 代码/ ,/ 增加/ 软件/ 逆向/ 分析/ 的/ 难度/ ./ 脱壳/ 技术/ 则/ 是/ 恢复/ 被/ 隐藏/ 的/ 代码/ ,/ 降低/ 软件/ 的/ 分析/ 难度/ ./ 近年来/ ,/ 越来越/ 多/ 的/ 恶意代码/ 为了/ 躲避/ 杀毒软件/ 的/ 检测/ 使用/ 了/ 加壳/ 技术/ ./ 据统计/ ,/ 2008/ 年/ 超过/ 80/ %/ 的/ 恶意代码/ 使用/ 了/ 加壳/ 技术/ [/ 1/ ]/ ,/ 而且/ ,/ 加壳/ 方法/ 的/ 数量/ 也/ 以/ 每个/ 月/ 10/ ~/ 15/ 种/ 的/ 速度/ 递增/ [/ 2/ ]/ ./ 针对/ 上述情况/ ,/ 为了/ 检测/ 加壳/ 的/ 恶意代码/ ,/ 出现/ 了/ 许多/ 脱壳/ 工具/ ,/ 其中/ 主要/ 包括/ 基于/ 特征/ 匹配/ 的/ 定向/ 脱壳/ 工具/ 和/ 基于/ 动态/ 监控/ 的/ 通用/ 脱壳/ 工具/ 两类/ ./ 定向/ 脱壳/ 工具/ 的/ 工作/ 方式/ 是/ ,/ 先/ 提取/ 各种/ 壳/ 的/ 特征/ ,/ 然后/ 为/ 每种/ 加壳/ 方法/ 设计/ 解壳/ 算法/ ./ 定向/ 脱壳/ 工具/ 脱壳/ 速度/ 快/ 而且/ 准确/ ,/ 杀毒软件/ 通常/ 使用/ 定向/ 脱壳/ 方法/ ,/ 例如/ ClamAV/ ①/ ./ 但是/ ,/ 定向/ 脱壳/ 工具/ 需要/ 维护/ 大量/ 用于/ 模式匹配/ 的/ 特征/ ,/ 例如/ ,/ 查壳/ 工具/ PEiD/ ②/ 包含/ 有/ 600/ 多种/ 特征/ ./ 定向/ 脱壳/ 工具/ 不能/ 处理/ 未知/ 的/ 加壳/ 方法/ ,/ 缺乏/ 通用性/ ./ 通用/ 脱壳/ 工具/ 利用/ 加壳/ 技术/ 所/ 固有/ 的/ 动态/ 特征/ 进行/ 脱壳/ ./ 被/ 加壳/ 程序/ 的/ 执行/ 过程/ 先是/ 在/ 内存/ 中/ 恢复/ 被/ 加密/ 或/ 压缩/ 的/ 代码/ ,/ 然后/ 将/ CPU/ 控制权/ 转/ 交给/ 这些/ 新/ 生成/ 的/ 代码/ 使/ 其/ 执行/ ./ 因此/ ,/ “/ 先写/ 后/ 执行/ (/ written/ -/ then/ -/ executed/ )/ ”/ 是/ 所有/ 加壳/ 程序/ 在/ 执行/ 过程/ 中/ 的/ 基本/ 行为/ 特征/ ./ 此外/ ,/ 程序/ 在/ 解密/ 或/ 解压缩/ 前后/ 的/ 信息熵/ 、/ 常用/ 指令/ 对/ (/ bigram/ )/ 等/ 统计/ 属性/ 的/ 变化/ 也/ 可以/ 用于/ 启发式/ 的/ 脱壳/ 策略/ ./ 该/ 技术/ 不/ 依赖于/ 各种/ 加壳/ 方法/ 的/ 静态/ 特征/ ,/ 也/ 不/ 需要/ 单独/ 编写/ 解壳/ 算法/ ,/ 具有/ 很/ 好/ 的/ 通用性/ ,/ 例如/ ,/ PolyUnpack/ [/ 3/ ]/ 、/ Renovo/ [/ 4/ ]/ 、/ OmniUnpack/ [/ 5/ ]/ 、/ OllyBonE/ ③/ 、/ Eureka/ [/ 6/ ]/ 、/ Justin/ [/ 1/ ]/ 等/ ./ 通用/ 脱壳/ 工具/ 需要/ 一个/ 可控/ 的/ 执行/ 环境/ 去/ 主动/ 地/ 或/ 被动/ 地/ 监控/ 加壳/ 程序/ 的/ 执行/ 过程/ ,/ 以/ 实现/ 对/ 被/ 加壳/ 程序/ 动态/ 行为/ 特征/ 的/ 识别/ ./ 然而/ ,/ 可控/ 环境/ 和/ 监控/ 策略/ 会/ 增加/ 程序/ 的/ 运行/ 开销/ ,/ 易于/ 被/ 环境/ 敏感/ 技术/ 识别/ 和/ 干扰/ ./ 2008/ 年/ ,/ 微软公司/ 的/ Ferrie/ [/ 7/ ]/ 指出/ ,/ 反/ 调试/ 和/ 反/ 虚拟机/ 等/ 技术/ 可以/ 用于/ 识别/ 通用/ 脱壳/ 工具/ 的/ 监控/ 环境/ ./ 这些/ 检测/ 方法/ 可以/ 使/ 恶意代码/ 变得/ 对/ 环境/ 敏感/ ,/ 也/ 就是/ 能/ 在/ 脱壳/ 之前/ 判断/ 当前/ 的/ 执行/ 环境/ 是否/ “/ 危险/ ”/ ,/ 如果/ 发现自己/ 运行/ 在/ 被/ 调试/ 或者/ 被/ 虚拟/ 执行/ 等/ 危险/ 环境/ 中/ ,/ 就/ 立即/ 停止/ 执行/ 或者/ 延迟/ 执行/ ./ 2009/ 年/ ,/ Liu/ 等/ 人/ [/ 8/ ]/ 提出/ 了/ 利用/ 执行/ 某段/ 代码/ 的/ CPU/ 时钟/ 周期/ 异常/ 来/ 间接/ 检测/ 监控/ 环境/ 的/ 存在/ ,/ 并/ 构造/ 出/ 能够/ 对/ 通用/ 脱壳/ 工具/ 产生/ DoS/ 攻击/ 的/ 代码/ ./ 通用/ 脱壳/ 工具/ 的/ 监控/ 环境/ 是/ 固定/ 不变/ 的/ ,/ 不能/ 根据/ 恶意代码/ 的/ 环境/ 敏感性/ 进行/ 动态/ 调整/ ,/ 导致/ 其/ 分析/ 的/ 准确性/ 易受/ 环境/ 敏感/ 技术/ 的/ 干扰/ ./ 构造/ 同/ 真实/ 环境/ 一致/ 且/ 不/ 增加/ 额外/ 运行/ 开销/ 的/ 监控/ 环境/ 很难/ ./ 本文/ 在/ 不/ 修改/ 监控/ 环境/ 的/ 基础/ 上/ ,/ 提出/ 了/ 一种/ 基于/ 环境/ 敏感/ 分析/ 的/ 恶意代码/ 脱壳/ 方法/ ,/ 利用/ 恶意代码/ 的/ 行为/ 与/ 执行/ 环境/ 间/ 的/ 依赖/ 关系/ ,/ 识别/ 并/ 去除/ 恶意代码/ 的/ 环境/ 敏感性/ ,/ 使/ 通用/ 脱壳/ 工具/ 能够/ 更/ 有效/ 地/ 提取/ 被/ 加壳/ 技术/ 保护/ 的/ 恶意代码/ ./ 该/ 方法/ 的/ 工作/ 步骤/ 如下/ :/ 首先/ ,/ 在/ 可控/ 环境/ 中/ 动态/ 记录/ 恶意代码/ 的/ 执行/ 轨迹/ (/ executiontrace/ )/ ,/ 并用/ 中间/ 语言/ [/ 9/ ]/ (/ intermedi/ -/ atelanguage/ )/ 对/ 执行/ 轨迹/ 进行/ 形式化/ 描述/ ./ 然后/ ,/ 在/ 中间/ 表示/ 基础/ 上/ ,/ 引入/ 高级/ 语言/ 分析/ 中/ 用到/ 的/ 污点/ 分析/ 和/ 符号执行/ [/ 10/ ]/ 技术/ ,/ 提取/ 恶意代码/ 的/ 环境/ 敏感/ 变量/ 和/ 基于/ 敏感/ 变量/ 的/ 路径/ 约束/ ,/ 并/ 利用/ 约束/ 求解/ 工具/ [/ 11/ ]/ 推理/ 恶意代码/ 的/ 路径/ 空间/ 与/ 执行/ 环境/ 间/ 的/ 依赖/ 关系/ ./ 最后/ ,/ 利用/ 二进制/ 代码/ 插装/ 技术/ 动态/ 修改/ 恶意代码/ 内部/ 的/ 环境/ 敏感数据/ ,/ 去除/ 恶意代码/ 对/ 可控/ 环境/ 的/ 敏感性/ ,/ 实现/ 通用/ 脱壳/ 工具/ 对/ 其/ 动态/ 脱壳/ ./ 本文/ 提出/ 的/ 基于/ 环境/ 敏感/ 分析/ 的/ 恶意代码/ 脱壳/ 方法/ ,/ 已经/ 在/ 自主/ 研制/ 的/ MalUnpack/ 系统/ 中/ 实现/ ./ 在/ 本文/ 的/ 实验/ 部分/ ,/ 用/ MalUnpack/ 对/ 321/ 个/ 最新/ 加壳/ 恶意软件/ 进行/ 了/ 分析/ ,/ 并/ 与/ 定向/ 脱壳/ 工具/ 和/ 通用/ 脱壳/ 工具/ 的/ 分析/ 结果/ 进行/ 了/ 对比/ ./ 实验/ 结果表明/ ,/ 本文/ 的/ 方法/ 能够/ 识别/ 并/ 去除/ 大部分/ 恶意代码/ 的/ 环境/ 敏感性/ ,/ 脱壳/ 率/ 显著/ 高于/ 无/ 环境/ 敏感/ 分析/ 的/ 通用/ 脱壳/ 工具/ 和/ 定向/ 脱壳/ 工具/ ./ 本文/ 第/ 2/ 节/ 介绍/ 恶意代码/ 执行/ 轨迹/ 的/ 中间/ 表示/ ;/ 第/ 3/ 节/ 全面/ 阐述/ 基于/ 环境/ 敏感/ 分析/ 的/ 恶意代码/ 脱壳/ 方法/ ;/ 第/ 4/ 节/ 给出/ 系统/ 实现/ 和/ 实验/ 结果/ ,/ 并/ 对/ 实验/ 结果/ 进行/ 分析/ 和/ 对比/ ;/ 第/ 5/ 节/ 介绍/ 相关/ 的/ 研究/ 工作/ ;/ 最后/ ,/ 在/ 第/ 6/ 节/ 给出/ 本文/ 的/ 结论/ ./ 2/ 执行/ 轨迹/ 中间/ 表示/ 执行/ 轨迹/ 包括/ 恶意代码/ 执行/ 过程/ 的/ 详尽/ 信息/ ,/ ①/ ②/ ③/ Page3/ 例如/ ,/ 指令/ 序列/ 、/ CPU/ 状态/ 、/ 寄存器/ 与/ 内存/ 值/ 等/ ./ 从/ 执行/ 轨迹/ 中/ 提取/ 恶意代码/ 与/ 执行/ 环境/ 的/ 依赖/ 关系/ 要/ 用到/ 流/ 敏感/ 的/ 污点/ 分析/ 技术/ 和/ 路径/ 敏感/ 的/ 符号执行/ 技术/ ./ 但是/ 这些/ 分析/ 技术/ 是/ 面向/ 高级/ 语言/ 的/ ./ 通常/ 恶意软件/ 是/ 不/ 开源/ 的/ ,/ 只有/ 二进制/ 代码/ 样本/ ./ 二进制/ 代码/ 缺少/ 高级/ 语言/ 的/ 类型/ 和/ 结构/ 信息/ ,/ 指令/ 种类/ 繁多/ ,/ 而且/ 大部分/ 指令/ 会/ 隐式/ 地/ 影响/ CPU/ 状态/ 寄存器/ ./ 因此/ ,/ 需要/ 一种/ 简化/ 的/ 没有/ 副作用/ 的/ 语言/ 对/ 二进制/ 代码执行/ 轨迹/ 进行/ 重新/ 描述/ ./ 本文/ 引入/ 了/ 一种/ 简单/ 的/ 静态/ 单/ 赋值/ (/ StaticSin/ -/ gleAssignment/ ,/ SSA/ )/ 中间/ 语言/ UnpackIL/ ,/ 如图/ 1/ 所示/ ./ 本节/ 对/ UnpackIL/ 中间/ 语言/ 的/ 语法结构/ 、/ 上下文/ 环境/ 和/ 操作/ 语义/ 进行/ 了/ 详细/ 阐述/ ,/ 并/ 以/ 木马/ Wowsteal/ ./ AX/ 执行/ 轨迹/ 的/ 中间/ 表示/ 为例/ 进行/ 说明/ ./ program/ ·/ ·/ ·/ ·/ =/ stmt/ / stmts/ ·/ ·/ ·/ ·/ =/ var/ ·/ ·/ =/ exp/ |/ mem/ _/ write/ (/ exp/ ,/ exp/ )/ expe/ ·/ ·/ ·/ ·/ =/ mem/ _/ read/ (/ exp/ )/ |/ exp/ / bexp/ / b/ ·/ ·/ ·/ ·/ =/ typicalbinaryoperators/ / u/ ·/ ·/ ·/ ·/ =/ typicalunaryoperatorsvaluev/ ·/ ·/ ·/ ·/ =/ signed/ |/ unsigned/ _/ 1bit/ |/ 8bit/ |/ 16bit/ |/ 32bit2/ ./ 1/ 语法结构/ 在/ UnpackIL/ 中/ ,/ 程序/ 由/ 一系列/ 语句/ (/ state/ -/ ment/ )/ 组成/ ,/ 其中/ 包括/ 4/ 类/ 基本/ 语句/ :/ 赋值/ 语句/ (/ assignments/ )/ 、/ 断言/ 语句/ (/ assertions/ )/ 、/ 跳转/ 语句/ (/ jumps/ )/ 和/ 条件/ 跳转/ 语句/ (/ conditionaljumps/ )/ ./ / b/ 用于/ 表示/ 二元/ 操作/ ,/ 例如/ 加/ 、/ 减/ 、/ 与/ 、/ 或/ 等/ ./ / u/ 用于/ 表示/ 一元/ 操作/ ,/ 例如/ 逻辑/ 非/ 等/ ./ getinput/ (/ src/ )/ 表示/ 从源/ src/ 中/ 获得/ 的/ 输入/ ./ 源/ src/ 的/ 定义/ 将/ 在/ 下/ 一节/ 的/ 污点/ 传播/ 分析/ 部分/ 进行/ 详细/ 说明/ ./ 在/ UnpackIL/ 中/ 内存/ 值/ 或/ 寄存器/ 值/ 分为/ 有/ 符号/ 和/ 无/ 符号/ 整/ 数量/ 两种/ ,/ 所/ 占用/ 的/ 存储空间/ 有/ 1bit/ 、/ 8bit/ 、/ 16bit/ 和/ 32bit4/ 种/ ./ UnpackIL/ 目前/ 不/ 支持/ 浮点数/ 的/ 表示/ ./ UnpackIL/ 与/ 二进制/ 代码/ 相比/ 有/ 如下/ 3/ 个/ 优点/ :/ (/ 1/ )/ 指令/ 的/ 操作/ 语义/ 明确/ ,/ 没有/ 隐式/ 副作用/ ,/ 对/ CPU/ 状态字/ 的/ 影响/ 被/ 显示/ 地/ 表现/ 出来/ ;/ (/ 2/ )/ 指令/ 的/ 种类/ 少/ ,/ 比/ x86/ 指令集/ 精简/ ,/ 操作/ 语义/ 简单/ ;/ (/ 3/ )/ 采用/ 静态/ 单/ 赋值/ 形式/ (/ staticsingleassignmentsform/ )/ ,/ 变量/ 的/ 定义/ 和/ 引用/ 关系/ 明确/ ./ 2.2/ 执行/ 中/ 的/ 上下文/ 环境/ 指令/ 的/ 上下文/ 环境/ 用/ 一个/ 4/ 元组/ 表示/ ,/ EC/ =/ (/ Σ/ ,/ Δ/ ,/ pc/ ,/ s/ )/ ,/ 如表/ 1/ 所示/ ./ 其中/ ,/ Σ/ 是/ 程序/ 的/ 语句/ 集合/ ,/ 通过/ 索引/ 值/ 可以/ 定位/ 每/ 一条/ 语句/ ;/ Δ/ 是/ 程序/ 的/ 变量/ 集合/ (/ 包括/ 变量/ 、/ 寄存器/ 和/ 内存/ )/ ,/ 可以/ 通过/ 变量名/ 读写/ 对应/ 的/ 值/ (/ 例如/ ,/ Δ/ [/ x/ ]/ 表示/ 读取/ 变量/ x/ 在/ 当前/ 上下文/ 环境/ Δ/ 中/ 的/ 值/ ,/ Δ/ [/ x/ ←/ 10/ ]/ 表示/ 将/ 当前/ 上下文/ 环境/ 中/ 变量/ x/ 的/ 值/ 设为/ 10/ )/ ;/ pc/ 是/ 程序/ 指针/ ,/ 它/ 指向/ 当前/ 正在/ 执行/ 的/ 语句/ ;/ s/ 是/ 下/ 一条/ 将要/ 执行/ 的/ 语句/ ./ 2.3/ 操作/ 语义/ (/ operationalsemantics/ )/ 下面/ 是/ UnpackIL/ 操作/ 语义/ 的/ 描述/ 格式/ :/ 操作/ 语义/ 是/ 说明/ 语句/ 和/ 表达式/ 是/ 如何/ 执行/ 的/ ,/ 其中/ :/ stmt/ 是/ 当前/ 要/ 执行/ 的/ 语句/ ;/ EC/ 是/ 当前/ 的/ 上下文/ 环境/ ;/ EC/ 是/ 语句/ stmt/ 执行/ 后/ 的/ 上下文/ 环境/ ;/ stmt/ 是/ 下/ 一条/ 待/ 执行/ 语句/ ,/ computation/ 是/ 语句/ stmt/ 在/ EC/ 上下文/ 环境/ 中/ 的/ 计算/ 过程/ ./ 表/ 2/ 列出/ 了/ UnpackIL/ 表达式/ 和/ 语句/ 的/ 操作/ 语义/ ./ 其中/ ,/ Δ/ |/ e/ →/ v/ 表示/ 在/ 上下文/ 环境/ Δ/ 中/ 计算/ 表达式/ e/ 的/ 值/ 并/ 将/ 结果/ 赋值/ 给/ 变量/ v/ ;/ Δ/ =/ Δ/ [/ x/ ←/ v/ ]/ 表示/ 将/ 变量/ v/ 的/ 值/ 赋/ 给/ 变量/ x/ 并/ 更新/ 上下文/ 环境/ Δ/ 成为/ Δ/ ./ 操作符/ InputMem/ _/ ReadUnary/ _/ OpBinary/ _/ Op/ Δ/ |/ e1/ →/ v1/ ,/ Δ/ |/ e2/ →/ v2/ ,/ v/ =/ v1/ / bv2Assign/ Δ/ |/ e/ →/ v1/ ,/ Δ/ =/ Δ/ [/ var/ ←/ v1/ ]/ ,/ s/ =/ Σ/ [/ pc/ +/ 1/ ]/ GotoTrue/ _/ Branch/ Δ/ |/ e/ =/ =/ 1/ ,/ Δ/ |/ e1/ →/ v1/ ,/ s/ =/ Σ/ [/ v1/ ]/ False/ _/ Branch/ Δ/ |/ e/ =/ =/ 0/ ,/ Δ/ |/ e2/ →/ v2/ ,/ s/ =/ Σ/ [/ v2/ ]/ Mem/ _/ Write/ Δ/ |/ e1/ →/ v1/ ,/ Δ/ |/ e2/ →/ v2/ ,/ Δ/ =/ Δ/ [/ v2/ ←/ v1/ ]/ ,/ s/ =/ Σ/ [/ pc/ +/ 1/ ]/ AssertPage4/ 图/ 2/ 是/ 木马/ Wowsteal/ ./ AX/ 执行/ 轨迹/ 中/ 环境/ 敏感/ 部分/ 的/ 中间/ 表示/ ./ 其中/ Wowsteal/ ./ AX/ 首先/ 使用/ rdtsc/ 指令/ 获取/ CPU/ 当前/ 的/ 时钟/ 周期/ ./ rdtsc/ 指令/ 有/ 隐式/ 地/ 修改/ CPU/ 寄存器/ edx/ 和/ eax/ 的/ 副作用/ ,/ 在/ 中间/ 表示/ 中该/ 隐式/ 副作用/ 被/ 显示/ 地/ 表示/ 成/ 两段/ 赋值/ 语句/ ./ 然后/ Wowsteal/ ./ AX/ 利用/ 条件/ 跳转/ 指令/ jbe/ 判断/ 运行/ 环境/ 是否/ 可疑/ ./ 在/ 该段/ 执行/ 轨迹/ 中/ jbe/ 发现/ CPU/ 时钟/ 周期/ 大于/ 阈值/ ,/ 在/ 中间/ 表示/ 中用/ True/ _/ Branch/ 的/ 语义/ 进行/ 描述/ ./ 1/ :/ rdtscAssign/ (/ EAX/ _/ 0/ :/ unsigned/ _/ 32bit/ ,/ Input/ (/ rdtsc/ ,/ (/ 0xbcf0aac0/ ,/ T/ )/ )/ )/ Assign/ (/ EDX/ _/ 0/ :/ unsigned/ _/ 32bit/ ,/ Input/ (/ rdtsc/ ,/ (/ 0x00000076/ ,/ T/ )/ )/ )/ 2/ :/ movesi/ ,/ eax/ (/ t/ )/ Assign/ (/ ESI/ _/ 0/ :/ unsigned/ _/ 32bit/ ,/ EAX/ _/ 0/ :/ unsigned/ _/ 32bit/ )/ 3/ :/ movedi/ ,/ esi/ (/ t/ )/ Assign/ (/ EDI/ _/ 0/ :/ unsigned/ _/ 32bit/ ,/ ESI/ _/ 0/ :/ unsigned/ _/ 32bit/ )/ 4/ :/ addesi/ ,/ 64hAssign/ (/ ESI/ _/ 1/ :/ unsigned/ _/ 32bit/ ,/ Binary/ _/ Op/ (/ +/ ,/ ESI/ _/ 0/ :/ 5/ :/ subedi/ ,/ 5hAssign/ (/ EDI/ _/ 1/ :/ unsigned/ _/ 32bit/ ,/ Binary/ _/ Op/ (/ -/ ,/ EDI/ _/ 0/ :/ 6/ :/ rdtscAssign/ (/ EAX/ _/ 1/ :/ unsigned/ _/ 32bit/ ,/ Input/ (/ rdtsc/ ,/ (/ 0xbd20dbc8/ ,/ T/ )/ )/ )/ ;/ Assign/ (/ EDX/ _/ 1/ :/ unsigned/ _/ 32bit/ ,/ Input/ (/ rdtsc/ ,/ (/ 0x00000076/ ,/ T/ )/ )/ )/ ;/ 7/ :/ cmpesi/ ,/ eaxAssign/ (/ VAR/ _/ 0/ :/ signed/ _/ 32bit/ ,/ Binary/ _/ Op/ (/ -/ ,/ ESI/ _/ 1/ :/ unsigned/ _/ 8/ :/ jbe0x00401007True/ _/ Branch/ (/ Binary/ _/ Op/ (/ / ,/ Path/ _/ Constraints/ ,/ Binary/ _/ Op/ (/ </ =/ ,/ 32bit/ ,/ ESI/ _/ 1/ :/ unsigned/ _/ 32bit/ )/ )/ VAR/ _/ 0/ :/ signed/ _/ 32bit/ ,/ (/ 0/ ,/ T/ )/ )/ =/ =/ TRUE/ )/ )/ ,/ Goto/ (/ 1/ )/ )/ ;/ 图/ 2/ 木马/ Wowsteal/ ./ AX/ 执行/ 轨迹/ 的/ 中间/ 表示/ unsigned/ _/ 32bit/ ,/ (/ 0x64/ ,/ F/ )/ )/ )/ unsigned/ _/ 32bit/ ,/ (/ 0x5/ ,/ F/ )/ )/ )/ 3/ 基于/ 环境/ 敏感/ 分析/ 恶意代码/ 脱壳/ 方法/ 图/ 3/ 给出/ 了/ 基于/ 环境/ 敏感/ 分析/ 的/ 脱壳/ 模型/ ./ 该/ 模型/ 包括/ 三个/ 部分/ :/ 首先/ ,/ 定位/ 执行/ 轨迹/ 中/ 环境/ 敏感数据/ 的/ 来源/ ,/ 并/ 利用/ 污点/ 传播/ 分析/ 提取/ 环境/ 敏感数据/ 的/ 扩散/ 过程/ ;/ 然后/ ,/ 通过/ 符号执行/ 提取/ 基于/ 环境/ 敏感数据/ 的/ 路径/ 约束/ ,/ 并/ 判断/ 未/ 覆盖/ 分支/ 的/ 可行性/ 和/ 计算/ 该/ 分支/ 的/ 触发/ 环境/ ;/ 最后/ ,/ 使用/ 二进制/ 代码/ 插装/ 修改/ 恶意代码/ 中/ 的/ 环境/ 敏感数据/ ,/ 去除/ 恶意代码/ 的/ 环境/ 敏感性/ ./ 3.1/ 环境/ 敏感数据/ 的/ 污点/ 传播/ 分析/ 环境/ 敏感数据/ 的/ 污点/ 传播/ 分析/ (/ taintpropaga/ -/ tionanalysis/ )/ 包括/ 两个/ 部分/ :/ (/ 1/ )/ 定位/ 环境/ 敏感数据/ 的/ 来源/ ;/ (/ 2/ )/ 对/ 存储/ 环境/ 敏感数据/ 的/ 变量/ 打/ 污点/ 标签/ ,/ 并/ 分析/ 其/ 传播/ 过程/ ./ 恶意代码/ 动态/ 获取/ 执行/ 环境/ 信息/ 的/ 途径/ 有/ 两种/ :/ 一种/ 是/ 直接/ 获取/ ,/ 例如/ ,/ 调用/ 系统/ API/ 函数/ 或者/ 检测/ 特定/ 系统/ 内存/ 等/ ,/ 如表/ 3/ 所示/ ;/ 另/ 一种/ 是/ 间接/ 获取/ ,/ 例如/ ,/ 利用/ 特殊/ 的/ CPU/ 指令/ (/ rdtsc/ 、/ sidt/ 等/ )/ ,/ 或/ 调用/ 系统/ API/ 函数/ ,/ 如表/ 4/ 所示/ ./ 我们/ 把/ 这些/ 检测/ 当前/ 执行/ 环境/ 的/ 方法/ 称作/ 环境/ 敏感数据/ 的/ 来源/ ;/ 存储/ 这些/ 环境/ 敏感数据/ 的/ 变量/ 称作/ 环境/ 敏感/ 变量/ ./ KiUserExceptionDispatcher/ (/ )/ PEB/ -/ >/ NtGlobalFlagNtQueryInformationProcess/ (/ )/ Eprocess/ -/ >/ NoDebugInherit/ 为了/ 记录/ 环境/ 敏感数据/ 的/ 传播/ 过程/ ,/ 我们/ 对/ UnpackIL/ 进行/ 了/ 扩展/ :/ 用/ 二元/ 组/ 表示/ 一个/ 变量/ 〈/ v/ ,/ t/ 〉/ ,/ 其中/ v/ 是/ 变量/ 的/ 值/ ,/ t/ 是/ 一个/ 布尔值/ ,/ 有/ T/ 和/ F/ 两种/ 状态/ ,/ T/ 状态/ 表示/ 该/ 数据/ 为/ 污点/ 数据/ ,/ F/ 状态/ 表示/ 数据/ 不是/ 污点/ 数据/ ;/ 在/ 上下文/ 环境/ 中/ 增加/ 了/ 一个/ 变量/ Δ/ t/ ,/ 用以/ 表示/ 打/ 污点/ 标签/ 的/ 变量/ 集合/ ,/ 如图/ 4/ 所示/ ./ 表/ 5/ 是/ 中间/ 语言/ 的/ 污点/ 传播/ 规则/ ./ 规则/ Rinput/ (/ )/ 表示/ 如果/ 数据/ 来自/ 于/ 环境/ 敏感/ 源则/ 打/ 污点/ 标签/ ./ 规则/ Runary/ _/ op/ (/ v/ )/ 表示/ 一元/ 运算/ 不/ 改变/ 数据/ 的/ 污点/ 状/ Page5/ 态/ ./ 规则/ Rbinary/ _/ op/ (/ v1/ ,/ v2/ )/ 表示/ 二元/ 运算/ 的/ 污点/ 状态/ 同/ 两个/ 操作数/ 的/ 污点/ 状态/ 或/ 的/ 结果/ 一致/ ./ 我们/ 这里/ 仅/ 考虑/ 了/ 数据流/ 中/ 的/ 污点/ 传播/ ,/ 控制流/ 中/ 的/ 污点/ 传播/ 没有/ 涉及/ ,/ 因为/ 环境/ 敏感数据/ 在/ 程序/ 中/ 不/ 用于/ 控制流/ 的/ 间接/ 寻址/ ./ 表/ 5/ 污点/ 传播/ 分析/ 的/ 中间/ 语言/ 操作/ 语义/ 扩展/ 图/ 5/ 是/ 木马/ Wowsteal/ ./ AX/ 中/ 环境/ 敏感数据/ 的/ 污点/ 传播/ 过程/ ,/ 污点/ 数据/ 被/ t/ 标记/ ./ rdtsc/ 指令/ 是/ 其/ 环境/ 敏感数据/ 的/ 来源/ ,/ MalUnpack/ 根据/ Rinput/ (/ taint/ _/ src/ )/ 规则/ 将/ rdtsc/ 的/ 返回值/ edx/ 和/ eax/ 打/ 污点/ 标签/ ./ movesi/ ,/ eax/ (/ t/ )/ 指令/ 将/ 寄存器/ eax/ 的/ 值/ 赋/ 给/ 寄存器/ esi/ ,/ 根据/ 污点/ 传播/ 规则/ Rbinary/ _/ op/ (/ v1/ ,/ v2/ )/ ,/ 寄存器/ esi/ 也/ 被/ 标记/ 为/ 污点/ ./ 图/ 5/ 木马/ Wowsteal/ ./ AX/ 中/ 环境/ 敏感数据/ 的/ 污点/ 传播/ 3.2/ 环境/ 敏感/ 变量/ 对/ 路径/ 选择/ 的/ 影响/ 分析/ 污点/ 传播/ 分析/ 可以/ 记录/ 环境/ 敏感数据/ 的/ 传播/ 过程/ ,/ 但/ 无法/ 表示/ 环境/ 敏感数据/ 对/ 路径/ 选择/ 的/ 影响/ ,/ 为此/ ,/ 本文/ 引入/ 路径/ 敏感/ 的/ 符号执行/ 技术/ ./ 符号执行/ 是/ 正常/ 执行/ 的/ 扩展/ ,/ 它用/ 符号/ 表示/ 任意/ 的/ 输入/ 值/ ,/ 基于/ 输入/ 值/ 的/ 路径/ 分支/ 条件/ 用/ 布尔/ 表达式/ 表示/ ./ 从/ 一条/ 路径/ 中/ 收集/ 到/ 的/ 所有/ 布尔/ 表达式/ 的/ 合取范式/ 称作/ 该/ 路径/ 的/ 约束条件/ (/ pathconstraints/ )/ ./ 不同/ 路径/ 的/ 约束条件/ 是/ 不同/ 的/ ,/ 对/ 约束条件/ 的/ 求解/ 可/ 判断/ 路径/ 的/ 可行性/ 并/ 推理/ 该/ 路径/ 的/ 输入/ 集合/ ./ 本文/ 采用/ 混合/ 执行/ (/ concolicexecution/ )/ 方式/ ,/ 只/ 对/ 污点/ 源/ 的/ 输入/ 用/ 符号/ 表示/ ,/ 其它/ 不/ 相关/ 的/ 变量/ 直接/ 使用/ 执行/ 轨迹/ 中/ 的/ 具体/ 数值/ ,/ 降低/ 约束/ 求解/ 的/ 复杂度/ ./ 本节/ 对/ UnpackIL/ 进行/ 了/ 扩展/ ,/ 如表/ 6/ 所示/ ./ 在/ 执行/ 环境/ 中/ 加入/ 了/ 路径/ 约束/ 变量/ Π/ ,/ 它/ 是/ 一个/ 布尔/ 表达式/ 的/ 合取范式/ ./ 环境/ 敏感/ 变量/ 使用/ 符号/ 表示/ ,/ 扩展/ 了/ 与/ 环境/ 敏感/ 变量/ 相关/ 的/ 断言/ 和/ 分支/ 语句/ 的/ 操作/ 语义/ ,/ 使/ 其/ 支持/ 对/ 路径/ 约束/ 的/ 收集/ ./ 操作符/ InputAssert/ Δ/ |/ e/ =/ =/ 1/ ,/ Π/ =/ Π/ ∧/ e/ ,/ s/ =/ Σ/ [/ pc/ +/ 1/ ]/ True/ _/ Branch/ Δ/ |/ e/ =/ =/ 1/ ,/ Π/ =/ Π/ ∧/ (/ e/ =/ =/ 1/ )/ ,/ Δ/ |/ e1/ →/ v1/ ,/ s/ =/ Σ/ [/ v1/ ]/ False/ _/ Branch/ Δ/ |/ e/ =/ =/ 0/ ,/ Π/ =/ Π/ ∧/ (/ e/ =/ =/ 0/ )/ ,/ Δ/ |/ e2/ →/ v2/ ,/ s/ =/ Σ/ [/ v2/ ]/ 图/ 6/ 是/ 符号执行/ 收集/ 的/ 木马/ Wowsteal/ ./ AX/ 环境/ 敏感/ 部分/ 的/ 路径/ 约束/ ,/ 采用/ 了/ 约束/ 求解/ 工具/ STP/ 的/ 语法/ 格式/ ./ ASSERT/ (/ 0bin1/ =/ (/ LETConstraint/ _/ 0/ =/ 0bin1IN/ (/ LETR/ _/ EAX/ _/ 0/ =/ INPUT/ _/ 0IN/ (/ LETR/ _/ ESI/ _/ 0/ =/ R/ _/ EAX/ _/ 0IN/ (/ LETR/ _/ EDI/ _/ 0/ =/ R/ _/ ESI/ _/ 0IN/ (/ LETR/ _/ ESI/ _/ 1/ =/ BVPLUS/ (/ 32/ ,/ R/ _/ ESI/ _/ 0/ ,/ 0hex00000064/ )/ IN/ (/ LETR/ _/ EDI/ _/ 1/ =/ BVSUB/ (/ 32/ ,/ R/ _/ EDI/ _/ 0/ ,/ 0hex00000005/ )/ IN/ (/ LETR/ _/ EAX/ _/ 1/ =/ INPUT/ _/ 1IN/ (/ LETTEMP/ _/ 0/ =/ IF/ (/ BVLE/ (/ R/ _/ ESI/ _/ 1/ ,/ R/ _/ EAX/ _/ 1/ )/ )/ THEN0bin1ELSE0bin0ENDIFIN/ (/ LETConstarint/ _/ 1/ =/ (/ Constraint/ _/ 0TEMP/ _/ 0/ )/ IN/ (/ LETConstraint/ _/ 1/ )/ )/ )/ )/ )/ )/ )/ )/ )/ )/ )/ ;/ 3.3/ 启发式/ 路径/ 选择/ 策略/ 如果/ 当前/ 环境/ 没有/ 检测/ 到/ 恶意代码/ 的/ 脱壳/ 行为/ ,/ 则/ 需要/ 分析/ 该/ 执行/ 轨迹/ 上/ 的/ 环境/ 约束/ ,/ 确定/ 并/ 清除/ 恶意代码/ 的/ 环境/ 敏感性/ ./ 执行/ 轨迹/ 中/ 跟/ 环境/ 有关/ 的/ 路径/ 分支/ 很多/ ,/ 我们/ 根据/ 环境/ 敏感/ 恶意代码/ 的/ 行为/ 特征/ ,/ 提出/ 了/ 一种/ 启发式/ 路径/ 选择/ 算法/ ,/ 用于/ 在/ 路径/ 空间/ 中/ 尽快/ 找到/ 脱壳/ 路径/ ./ 算法/ 1/ 描述/ 了/ 如何/ 从/ 执行/ 轨迹/ 中/ 定位/ 脱壳/ 路径/ ,/ 其中/ 使用/ 了/ 两个/ 启发式/ 策略/ :/ 基于/ 环境/ 相关/ 死循环/ 的/ 启发式/ 路径/ 选择/ 策略/ ;/ 基于/ 代码/ 覆盖/ 和/ 路径/ 前缀/ 的/ 启发式/ 路径/ 选择/ 策略/ ./ 环境/ 相关/ 的/ 死循环/ 是/ 指/ 在/ 规定/ 的/ 监控/ 时间/ 内/ 没有/ 正常/ 退出/ 的/ 循环/ ,/ 且/ 其/ 循环/ 退出/ 条件/ 与/ 环境/ 敏感/ Page6/ 变量/ 相关/ ./ 基于/ 环境/ 相关/ 死循环/ 的/ 启发式/ 路径/ 选择/ 策略/ 针对/ 的/ 是/ 在/ 发现/ 可疑/ 执行/ 环境/ 后/ 延迟/ 执行/ 脱壳/ 过程/ 甚至/ DoS/ 攻击/ 当前/ 环境/ 的/ 恶意代码/ ./ 还有/ 一些/ 恶意代码/ 发现/ 可疑/ 执行/ 环境/ 后/ 会/ 立即/ 停止/ 执行/ ./ 为此/ ,/ 我们/ 提出/ 基于/ 代码/ 覆盖/ 和/ 路径/ 前缀/ 的/ 启发式/ 路径/ 选择/ 策略/ ./ 在/ 监控/ 环境/ 中/ 被/ 执行/ 过/ 的/ 代码/ 称为/ 已/ 覆盖/ 代码/ ,/ 未/ 被/ 执行/ 过/ 的/ 代码/ 称为/ 未/ 覆盖/ 代码/ ,/ 选择/ 含有/ 未/ 覆盖/ 代码/ 的/ 路径/ 有利于/ 提高/ 通用/ 脱壳/ 工具/ 的/ 代码/ 覆盖率/ ./ 离/ 路径/ 结束/ 点越/ 近/ 的/ 分支/ 路径/ 与/ 已/ 分析/ 路径/ 的/ 相同/ 路径/ 前缀/ 越长/ ./ 由于/ 环境/ 敏感/ 代码/ 可能/ 通过/ 立即/ 终止/ 执行/ 来/ 躲避/ 监控/ ,/ 因此/ ,/ 相同/ 路径/ 前缀/ 越长/ 的/ 环境/ 相关/ 分支/ 含有/ 脱壳/ 过程/ 的/ 可能性/ 越大/ ./ 算法/ 1/ ./ MalUnpack/ 路径/ 分支/ 选择/ 算法/ ./ 输入/ :/ Set/ :/ set/ _/ b/ // // 基于/ 环境变量/ 的/ 路径/ 分支/ 集合/ 输出/ :/ (/ variable/ ,/ value/ )/ // // 需要/ 修改/ 的/ 变量/ 和/ 变量/ 取值/ // // 1/ ./ 基于/ 环境/ 相关/ 死循环/ 的/ 启发式/ 路径/ 选择/ 策略/ 1/ ./ if/ (/ executiontimesout/ )/ {/ 2/ ./ Branch/ / loop/ _/ b/ =/ find/ _/ endless/ _/ loop/ (/ set/ _/ b/ )/ ;/ 3/ ./ for/ (/ eachbranchbinset/ _/ b/ )/ {/ 4/ ./ if/ (/ b/ !/ =/ / loop/ _/ b/ )/ {/ 5/ ./ loop/ _/ c/ =/ loop/ _/ candmap/ _/ c/ {/ b/ }/ ;/ 6/ ./ }/ 7/ ./ else/ {/ 8/ ./ loop/ _/ c/ =/ loop/ _/ cand/ (/ !/ map/ _/ c/ {/ b/ }/ )/ ;/ // // 条件/ 取反/ 9/ ./ break/ ;/ 10/ ./ }/ 11/ ./ }/ 12/ ./ (/ variable/ ,/ value/ )/ =/ solving/ (/ loop/ _/ c/ )/ ;/ 13/ ./ loop/ _/ b/ -/ >/ analyzed/ =/ 1/ ;/ // // 标记/ 分支/ 已经/ 分析/ 过/ 14/ ./ return/ (/ variable/ ,/ value/ )/ ;/ 15/ ./ }/ // // 2/ ./ 基于/ 代码/ 覆盖/ 和/ 路径/ 前缀/ 的/ 启发式/ 路径/ 选择/ 策略/ 16/ ./ else/ {/ 17/ ./ do/ {/ // // 定位/ 路径/ 前缀/ 最长/ 且/ 入口/ 点/ 代码/ 未/ 被/ 分析/ 的/ 路径/ 分支/ 18/ ./ Branch/ / last/ _/ b/ =/ find/ _/ last/ _/ branch/ (/ set/ _/ b/ )/ ;/ 19/ ./ remove/ (/ set/ _/ b/ ,/ / last/ _/ b/ )/ ;/ 20/ ./ }/ while/ (/ !/ is/ _/ uncovered/ _/ block/ (/ last/ _/ b/ -/ >/ 21/ ./ for/ (/ eachbranchbinset/ _/ b/ )/ {/ // // 计算/ 分支/ 条件/ 22/ ./ if/ (/ b/ !/ =/ / last/ _/ b/ )/ {/ 23/ ./ last/ _/ c/ =/ last/ _/ candmap/ _/ c/ {/ b/ }/ ;/ 24/ ./ }/ 25/ ./ else/ {/ 26/ ./ last/ _/ c/ =/ last/ _/ cand/ (/ !/ map/ _/ c/ {/ b/ }/ )/ ;/ // // 条件/ 取反/ 27/ ./ break/ ;/ 28/ ./ }/ 29/ ./ }/ 30/ ./ (/ variable/ ,/ value/ )/ =/ solving/ (/ last/ _/ c/ )/ ;/ 31/ ./ last/ _/ b/ -/ >/ analyzed/ =/ 1/ ;/ // // 标记/ 分支/ 已/ 分析/ 32/ ./ return/ (/ variable/ ,/ value/ )/ ;/ 33/ ./ }/ 启发式/ 的/ 路径/ 选择/ 策略/ 可以/ 帮助/ 我们/ 尽快/ 定位/ 脱壳/ 路径/ ,/ 但是/ 不能/ 保证/ 找到/ 的/ 路径/ 一定/ 是/ 脱壳/ 路径/ ./ 因此/ ,/ 我们/ 还/ 需要/ 多路径/ 的/ 探索/ ,/ 最坏/ 情况/ 是/ 遍历/ 与/ 环境/ 相关/ 的/ 路径/ 空间/ ./ 3.4/ 清除/ 恶意代码/ 环境/ 敏感性/ 根据/ 路径/ 选择/ 算法/ 提供/ 的/ 数据/ ,/ 环境/ 敏感性/ 清除/ 模块/ 利用/ 直接/ 修改/ 二进制/ 恶意代码/ 中/ 环境/ 敏感/ 变量/ 的/ 值/ ,/ 实现/ 阻止/ 其/ 与/ 环境/ 的/ 交互/ ./ 算法/ 2/ 描述/ 了/ 清除/ 恶意代码/ 环境/ 敏感性/ 的/ 算法/ ./ 该/ 算法/ 的/ 输入/ 为/ 启发式/ 路径/ 选择/ 算法/ 得到/ 的/ 环境/ 敏感/ 变量名/ 和/ 变量值/ ,/ 恶意代码/ 二进制/ 可执行文件/ 和/ 恶意代码/ 执行/ 轨迹/ 的/ 中间/ 表示/ ,/ 输出/ 为/ 修改/ 后/ 的/ 恶意代码/ 二进制/ 可执行文件/ ./ 第/ 1/ 、/ 2/ 行/ 逐行/ 遍历/ 执行/ 轨迹/ 中间/ 表示/ 中/ 的/ 指令/ ,/ 寻找/ 使用/ 了/ var/ 的/ 指令/ ./ UnpackIL/ 是/ 静态/ 单/ 赋值/ 语言/ ,/ 易于/ 变量/ 的/ 搜索/ ./ 然后/ 根据/ 执行/ 轨迹/ 与/ 恶意代码/ 二进制/ 文件/ 的/ 对应/ 关系/ ,/ 定位/ 指令/ inst/ 在/ 文件/ 中/ 的/ 存储/ 位置/ ,/ 利用/ 反汇编/ 工具/ 计算/ 变量/ var/ 在/ 指令/ inst/ 中/ 的/ 偏移/ ,/ 进而/ 得到/ 变量/ var/ 在/ 文件/ 中/ 的/ 具体位置/ (/ 第/ 3/ ~/ 5/ 行/ )/ ./ 第/ 7/ 行用/ 具体/ 值/ val/ 直接/ 替换/ inst/ 中/ 的/ 环境/ 敏感/ 变量/ var/ ,/ 清除/ 恶意代码/ 的/ 环境/ 敏感性/ ./ 算法/ 2/ ./ 恶意代码/ 环境/ 敏感性/ 清除/ 算法/ ./ 输入/ :/ (/ Variable/ ,/ Value/ )/ :/ (/ var/ ,/ val/ )/ 输出/ :/ File/ :/ mal/ // // 清除/ 环境/ 敏感性/ 的/ 恶意代码/ 1/ ./ for/ (/ eachInstructioninstintrace/ )/ {/ // // 遍历/ 指令/ 2/ ./ if/ (/ search/ (/ inst/ ,/ var/ )/ )/ {/ 3/ ./ Addressaddr/ _/ inst/ =/ locate/ _/ inst/ (/ mal/ ,/ inst/ )/ ;/ 4/ ./ intoffset/ =/ disasm/ (/ addr/ _/ inst/ ,/ var/ )/ ;/ 5/ ./ Addressaddr/ _/ var/ =/ addr/ _/ inst/ +/ offset/ ;/ 6/ ./ replace/ (/ mal/ ,/ addr/ _/ var/ ,/ val/ )/ ;/ 7/ ./ }/ 8/ ./ }/ 4/ 系统/ 实现/ 与/ 实验/ 分析/ 4.1/ 系统/ 实现/ 基于/ 上述/ 系统/ 模型/ 和/ 分析方法/ ,/ 我们/ 实现/ 了/ 一/ Page7/ 套/ 基于/ 环境/ 敏感/ 分析/ 的/ 脱壳/ 工具/ MalUnpack/ ,/ 其中/ 包括/ 3/ 个/ 部分/ :/ 可控/ 执行/ 环境/ 、/ 通用/ 脱壳/ 模块/ 和/ 环境/ 敏感/ 分析/ 模块/ ./ 可控/ 执行/ 环境/ 采用/ 的/ 是/ 全/ 系统模拟/ 的/ 方式/ ,/ 利用/ 开源/ 的/ QEMU/ ①/ 虚拟机/ 实现/ ./ QEMU/ 逐条/ 解释/ CPU/ 指令/ ,/ 通过/ 回调/ 函数/ ,/ 我们/ 可以/ 记录/ 系统/ 中/ 的/ 每/ 一条/ 指令/ 和/ 其/ 上下文/ 环境/ ./ 通用/ 脱壳/ 模块/ 的/ 实现/ 采用/ 类似/ 于/ OmniUnpack/ 和/ PaXPAGEEXEC/ ②/ 的/ 内存/ 访问/ 异常/ 截获/ 技术/ ,/ 通过/ 设置/ 内存/ 页面/ 的/ 属性/ ,/ 使/ “/ 先写/ 后/ 执行/ ”/ 操作/ 产生/ 内存/ 访问/ 异常/ ./ 然后/ ,/ 利用/ 系统/ 驱动/ 截获/ 该/ 异常/ ,/ 并/ 从/ 产生/ 异常/ 的/ 软件/ 页/ 中/ 提取/ 脱壳/ 后/ 的/ 代码/ ./ 环境/ 敏感/ 分析/ 模块/ 是/ MalUnpack/ 系统/ 的/ 重点/ ./ 该/ 模块/ 的/ 实现/ 分为/ 3/ 步/ :/ 首先/ ,/ 定位/ 环境/ 敏感数据/ 和/ 打/ 污点/ 标签/ ,/ 通过/ QEMU/ 回调/ 函数/ 实现/ ./ 然后/ ,/ 用/ UnpackIL/ 中/ 语言/ 表示/ 恶意代码/ 执行/ 轨迹/ ,/ 利用/ 污点/ 分析/ 和/ 符号执行/ 得到/ 执行/ 轨迹/ 的/ 路径/ 约束/ ,/ 该/ 分析/ 过程/ 使用/ Perl/ 脚本/ 实现/ ./ 最后/ ,/ 根据/ 启发式/ 路径/ 选择/ 算法/ 和/ 环境/ 敏感性/ 清除/ 算法/ ,/ 实现/ 恶意代码/ 环境/ 敏感性/ 的/ 清除/ ,/ 该/ 部分/ 我们/ 使用/ Perl/ 脚本/ 实现/ ,/ 其中/ 约束/ 求解/ 部分/ 使用/ STP/ 工具/ ./ 4.2/ 实验/ 分析/ 文/ 设计/ 了/ 两组/ 实验/ :/ 为了/ 分析/ MalUnpack/ 系统/ 的/ 有效性/ 和/ 效率/ ,/ 本/ (/ 1/ )/ 对/ 最新/ 的/ 加壳/ 恶意代码/ 样本/ 分别/ 使用/ 基于/ 特征/ 的/ 定向/ 脱壳/ 技术/ 、/ 基于/ 动态/ 监控/ 的/ 通用/ 动态/ 脱壳/ 技术/ 和/ 本文/ 的/ 基于/ 环境/ 敏感/ 分析/ 的/ 脱壳/ 技术/ 进行/ 对比/ 实验/ ,/ 并/ 对/ 样本/ 的/ 环境/ 敏感性/ 进行/ 统计分析/ ./ (/ 2/ )/ 对/ 样本/ 分析/ 过程/ 中/ 的/ 环境/ 敏感/ 变量/ 传播/ 、/ 环境/ 敏感/ 路径/ 约束/ 的/ 收集/ 和/ 推理/ 等/ 过程/ 进行/ 测试/ ./ 实验/ 的/ 测试环境/ 为/ IntelQ94002/ ./ 66GHz/ ×/ 4CPU/ ,/ 4GBRAM/ ,/ Linux2/ ./ 6.28/ ,/ Ubuntu9/ ./ 04/ 操作系统/ ,/ QEMU/ 虚拟机/ 运行/ 的/ 是/ WindowsXPSP3/ 操作系统/ ./ 本文/ 共/ 对/ 321/ 个/ 最新/ 流行/ 的/ 加壳/ 恶意代码/ 样本/ 进行/ 了/ 脱壳/ 实验/ ,/ Fortinet/ 公司/ 反病毒/ 实验室/ (/ 天津/ )/ 为/ 本次/ 实验/ 提供/ 了/ 211/ 个/ 样本/ ,/ 另外/ 110/ 个/ 样本/ 是/ 自主/ 研发/ 的/ MalSAS/ 互联网/ 恶意代码/ 搜索/ 系统/ 在/ 2011/ 年/ 1/ 月/ 1/ 日到/ 2/ 月/ 31/ 日/ 发现/ 的/ 恶意代码/ 样本/ ,/ 样本/ 的/ 分布/ 见表/ 11/ ./ 实验/ 1/ ./ 恶意代码/ 脱壳/ 实验/ 和/ 环境/ 敏感性/ 检测/ ./ 本次/ 实验/ 中/ ,/ 我们/ 使用/ 的/ 静态/ 分析/ 工具/ 为/ PEiD/ ,/ 它/ 是/ 一款/ 著名/ 的/ 静态/ 查壳/ 工具/ ,/ 含有/ 600/ 多种/ 特征/ ,/ 并/ 有/ 大量/ 的/ 脱壳/ 插件/ ./ 基于/ 脱壳/ 行为/ 特征/ 的/ 动态/ 脱壳/ 工具/ 我们/ 选择/ 的/ 是/ 基于/ Ollydbg/ 的/ OllyBonE/ 工具/ ./ OllyBonE/ 使用/ 的/ 脱壳/ 机制/ 与/ PaXPAGEEXEC/ 和/ OmniUnpack/ 相同/ ,/ 都/ 是/ 基于/ 内存/ 页面/ 访问/ 异常/ 截获/ 的/ 方法/ ,/ 但/ PaXPAGEEXEC/ 只/ 适用/ 于/ Linux/ 系统/ ,/ 而/ Omni/ -/ Unpack/ 由于/ 不/ 公开/ 而/ 无法/ 使用/ ./ MalUnpack/ 与/ PEiD/ 、/ OllyBonE/ 对/ 样本/ 的/ 脱壳/ 结果/ 如表/ 7/ 所示/ ./ PEiD/ 识别/ 出/ 90/ 个/ 样本/ 的/ 加壳/ 信息/ ,/ 占/ 总数/ 的/ 28.0/ %/ ;/ OllyBonE/ 监控/ 到/ 114/ 个/ 样本/ 具有/ 脱壳/ 行为/ ,/ 占/ 总数/ 的/ 35.5/ %/ ;/ MalUnpack/ 检测/ 到/ 286/ 个/ 样本/ 的/ 脱壳/ 行为/ ,/ 占/ 总数/ 的/ 89.1/ %/ ./ 其中/ 有些/ 样本/ 是/ 含有/ 恶意代码/ 的/ 动态链接库/ 或/ 驱动程序/ ,/ 无法/ 在/ QEMU/ 虚拟机/ 中/ 独立/ 执行/ ,/ 导致/ 基于/ 动态分析/ 的/ OllyBonE/ 和/ MalUnpack/ 产生/ 漏报/ ./ 样本/ 数量/ 查壳/ 和/ 脱壳/ 工具/ 的/ 检测/ 结果/ Trojan1124839Backdoor1671259Worm633Clicker971Dropper532Downloader221710/ 总数/ 32190114MalUnpack/ 共/ 检测/ 到/ 270/ 个/ 样本/ 使用/ 了/ 环境/ 敏感/ 技术/ ,/ 其中/ 很多/ 样本/ 使用/ 了/ 多种/ 环境/ 敏感/ 技术/ ,/ 如图/ 7/ 所示/ ,/ 检测/ 到/ 115/ 个/ 样本/ 使用/ 了/ 两种/ 环境/ 敏感/ 技术/ ,/ 8/ 个/ 样本/ 使用/ 了/ 3/ 种/ 环境/ 敏感/ 技术/ ,/ 有/ 两个/ 样本/ 使用/ 了/ 4/ 种/ 环境/ 敏感/ 技术/ ./ 图/ 8/ 给出/ 了/ 各种/ 环/ ①/ ②/ Page8/ 境/ 敏感/ 技术/ 的/ 使用/ 频率/ ,/ 其中/ GetTickCount/ (/ )/ 函数/ 使用/ 得/ 最/ 多/ ,/ 共有/ 217/ 个/ 样本/ 使用/ ,/ 另外/ 有/ 121/ 个/ 样本/ 使用/ 了/ IsDebuggerPresent/ (/ )/ 函数/ 检测/ 执行/ 环境/ ,/ 其它/ 环境/ 敏感/ 技术/ 使用/ 得/ 比较/ 少/ ./ 实验/ 2/ ./ 环境/ 敏感/ 分析/ 的/ 效率/ 和/ 开销/ ./ 实验/ 中/ ,/ 利用/ QEMU/ 虚拟机/ 共/ 得到/ 了/ 286/ 个/ 样本/ 的/ 详细/ 执行/ 轨迹/ ,/ 每条/ 执行/ 轨迹/ 中/ 都/ 记录/ 了/ 几百万/ 到/ 几千万/ 条/ 指令/ ,/ 包含/ 了/ 该/ 样本/ 所属/ 进程/ 被/ 虚拟/ 执行/ 的/ 所有/ 指令/ ./ 记录/ 这些/ 执行/ 轨迹/ 的/ 文本文件/ 的/ 体积/ 超过/ 了/ 330GB/ ,/ 占用/ 了/ 大量/ 的/ 硬盘空间/ ./ 虽然/ 执行/ 轨迹/ 中/ 记录/ 了/ 大量/ 的/ 指令/ 信息/ ,/ 但是/ ,/ 其中/ 与/ 环境/ 相关/ 的/ 指令/ 数量/ 很少/ ,/ 我们/ 称/ 这些/ 指令/ 为/ 污点/ 指令/ ,/ 其/ 数量/ 分布/ 情况/ 如图/ 9/ 所示/ ./ 污点/ 指令/ 数量/ 少于/ 10/ 条/ 的/ 有/ 一个/ 样本/ ,/ 大部分/ 样本/ 的/ 污点/ 指令/ 数在/ 10/ ~/ 1000/ 之间/ ./ 污点/ 指令/ 数量/ 超过/ 1000/ 条/ 的/ 样本/ 只有/ 26/ 个/ ,/ 这些/ 样本/ 在/ 执行/ 过程/ 中/ 都/ 陷入/ 了/ 与/ 环境/ 相关/ 的/ 死循环/ ./ 环境/ 敏感/ 的/ 路径/ 分支/ 信息/ 来源于/ 污点/ 指令/ 中/ 的/ 条件/ 跳转/ 指令/ ./ 在/ 本/ 实验/ 中/ ,/ 与/ 环境/ 相关/ 的/ 条件/ 跳转/ 指令/ 的/ 数量/ 分布/ 很/ 有/ 特点/ ,/ 如图/ 10/ 所示/ ./ 大部分/ 样本/ 中/ 环境/ 相关/ 的/ 条件/ 跳转/ 指令/ 的/ 数量/ 小于/ 50/ ./ 含有/ 50/ ~/ 200/ 个/ 环境/ 相关/ 条件/ 跳转/ 指令/ 的/ 样本/ 很少/ ,/ 只有/ 3/ 个/ ./ 另外/ ,/ 还有/ 一些/ 样本/ 的/ 环境/ 相关/ 的/ 条件/ 跳转/ 指令/ 数量/ 超过/ 了/ 200/ 条/ ./ QEMU/ 虚拟机/ 中/ 动态分析/ 的/ 时间/ 上限/ 设置/ 为/ 5min/ ,/ 样本/ 的/ 执行/ 时间/ 超过/ 5min/ 后会/ 被/ 强行/ 终止/ ./ 这些/ 含有/ 大量/ 环境/ 相关/ 条件/ 跳转/ 指令/ 的/ 样本/ 在/ 动态分析/ 过程/ 中/ 都/ 超过/ 了/ 时间/ 上限/ ,/ 陷入/ 了/ 环境/ 相关/ 的/ 死循环/ ./ 基于/ 环境/ 相关/ 死循环/ 的/ 启发式/ 路径/ 选择/ 策略/ 根据/ 污点/ 指令/ 的/ 循环/ 结构/ 定位/ 该死/ 循环/ 的/ 退出/ 分支/ 点/ ,/ 并用/ 约束/ 求解/ 工具/ 计算/ 满足/ 该/ 退出/ 条件/ 的/ 环境/ 敏感/ 变量/ 的/ 值/ ,/ 然后/ 根据/ 恶意代码/ 环境/ 敏感性/ 清除/ 算法/ 对/ 恶意代码/ 进行/ 修改/ ./ 在/ 重新/ 运行/ 修改/ 后/ 的/ 恶意代码/ 时/ ,/ 通用/ 脱壳/ 模块/ 监控/ 到/ 了/ 样本/ 的/ 脱壳/ 行为/ ./ 大部分/ 样本/ 的/ 环境/ 相关/ 条件/ 跳转/ 指令/ 不/ 多/ ,/ 利用/ 基于/ 代码/ 覆盖/ 和/ 路径/ 前缀/ 的/ 启发式/ 路径/ 选择/ 策略/ 在/ 有限/ 次/ 的/ 多路径/ 尝试/ 下/ ,/ 通用/ 脱壳/ 模块/ 都/ 监控/ 到/ 了/ 样本/ 的/ 脱壳/ 行为/ ./ 4.3/ 讨论/ 由/ 上面/ 的/ 实验/ 结果/ 可知/ ,/ MalUnpack/ 能够/ 有效/ 地/ 识别/ 并/ 去除/ 加壳/ 恶意代码/ 的/ 环境/ 敏感性/ ,/ 脱壳/ 效果/ 优于/ 使用/ 模式匹配/ 的/ 定向/ 脱壳/ 方法/ 和/ 执行/ 环境/ 固定/ 的/ 通用/ 脱壳/ 方法/ ./ 但/ 需要/ 指出/ 的/ 是/ ,/ MalUnpack/ 还/ 存在/ 一些/ 影响/ 分析/ 结果/ 的/ 因素/ ./ 一方面/ ,/ 准确/ 定位/ 环境/ 敏感数据/ 的/ 来源/ 需要/ 先验/ 知识/ ,/ 即/ 需要/ 先/ 确定/ 环境/ 敏感/ 技术/ 可能/ 使用/ 到/ 的/ 系统/ 函数/ 、/ 系统/ 内存/ 或者/ CPU/ 指令/ 等/ ./ 如果/ 加壳/ 技术/ 使用/ 了/ 新/ 的/ 环境/ 敏感/ 方法/ ,/ 则/ 本文/ 的/ 方法/ 可能/ 引起/ 漏报/ ./ 解决/ 这个/ 问题/ 需要/ 扩大/ 环境/ 敏感/ 源/ 的/ 范围/ ,/ 例如/ ,/ 将/ 环境/ 敏感/ 源/ 扩大/ 到/ 对系统/ 内存/ 区域/ 的/ 所有/ 读/ 操作/ ./ 另一方面/ ,/ 环境/ 敏感/ 分析/ 利用/ 的/ 是/ 执行/ 轨迹/ 中/ 发现/ 的/ 路径/ 选择/ 与/ 执行/ 环境/ 的/ 依赖/ 关系/ ./ 当前/ 恶意代码/ 样本/ 中/ 的/ 环境/ 依赖/ 关系/ 比较简单/ ,/ 全部/ 可以/ 用/ 布尔/ 逻辑运算/ 和/ 线性/ 数值/ 运算/ 表示/ ,/ 而且/ 用于/ 检测/ 执行/ 环境/ 的/ 指令/ 数量/ Page9/ 相对/ 于/ 整个/ 程序/ 来说/ 很少/ ./ 如果/ 恶意代码/ 加强/ 了/ 对/ 路径/ 信息/ 的/ 保护/ ,/ 增加/ 了/ 环境/ 检测/ 代码/ 的/ 复杂度/ ,/ 则/ 可能/ 引起/ 分析/ 准确性/ 的/ 下降/ ./ 解决/ 该/ 问题/ 可以/ 采用/ 路径/ 切割/ 等/ 分析方法/ 加强/ 对/ 恶意代码/ 路径/ 信息/ 的/ 分析/ 和/ 推理/ 能力/ ./ 5/ 相关/ 研究/ 工作/ 当前/ 基于/ 特征/ 匹配/ 的/ 定向/ 脱壳/ 工具/ 由于/ 通用性/ 差/ ,/ 逐渐/ 被/ 更加/ 通用/ 的/ 基于/ 动态/ 监控/ 的/ 脱壳/ 工具/ 所/ 取代/ ./ 动态/ 脱壳/ 工具/ 需要/ 一个/ 可控/ 的/ 执行/ 环境/ ,/ 在/ 该/ 环境/ 中/ 执行/ 加壳/ 的/ 恶意代码/ ,/ 实时/ 地/ 根据/ 恶意代码/ 的/ 行为/ 特征/ 或/ 统计/ 特征/ 定位/ 并/ 提取/ 被/ 加壳/ 代码/ ./ PolyUnpack/ [/ 3/ ]/ 通过/ 对比/ 恶意软件/ 静态/ 反汇编/ 代码/ 和/ 实际/ 执行/ 代码/ 的/ 差异/ 来/ 识别/ 和/ 提取/ 动态/ 生成/ 的/ 解壳/ 后/ 代码/ ./ Renovo/ [/ 4/ ]/ 、/ OllyBonE/ ①/ 、/ OmniUnpack/ [/ 5/ ]/ 、/ Pandora/ [/ 12/ ]/ 、/ Paradyn/ ②/ 、/ Saffron/ [/ 13/ ]/ 和/ Azure/ [/ 14/ ]/ 等/ 脱壳/ 方法/ 利用/ 脱壳/ 过程/ “/ 先写/ 后/ 执行/ (/ written/ -/ then/ -/ executed/ )/ ”/ 的/ 固有特征/ 来/ 识别/ 解壳/ 后/ 的/ 代码/ ./ Eureka/ [/ 6/ ]/ 通过/ 监控/ 系统/ 调用/ NtTerminateProcess/ (/ )/ 、/ NtCre/ -/ ateProcess/ (/ )/ 和/ 常用/ 指令/ 对/ 的/ 出现/ 频率/ 来/ 识别/ 恶意代码/ 的/ 脱壳/ 行为/ ./ 监控/ 环境/ 暴露/ 了/ 脱壳/ 工具/ 的/ 存在/ ,/ 环境/ 敏感/ 技术/ [/ 7/ -/ 8/ ,/ 15/ -/ 16/ ]/ 可以/ 检测/ 到/ 构建/ 监控/ 环境/ 所用/ 到/ 的/ 虚拟机/ 、/ 调试器/ 和/ 模拟器/ 等/ 工具/ ./ 恶意代码/ 已经/ 逐渐/ 使用/ 环境/ 敏感/ 技术/ 来/ 躲避/ 基于/ 动态/ 监控/ 的/ 脱壳/ 工具/ 的/ 分析/ ./ Brumley/ 等/ 人/ [/ 17/ ]/ 提出/ 了/ 针对/ 恶意软件/ 中/ 条件/ 触发/ 行为/ (/ trigger/ -/ basedmaliciousbehavier/ )/ 的/ 分析方法/ ,/ 通过/ 监控/ 恶意代码/ 所/ 调用/ 的/ 系统/ 函数/ ,/ 利用/ 污点/ 分析/ 和/ 混合/ 执行/ 推理/ 恶意/ 行为/ 的/ 触发/ 条件/ ./ Cho/ 等/ 人/ [/ 18/ ]/ 利用/ 有穷/ 状态机/ 模型/ 分析/ 僵尸/ 代码/ 与/ 网络/ 输入/ 间/ 的/ 依赖/ 关系/ ,/ 推理/ 出/ 僵尸/ 网络/ 的/ 命令/ 和/ 控制协议/ ./ 现有/ 恶意代码/ 条件/ 触发/ 行为/ 的/ 分析方法/ 针对/ 的/ 是/ 系统/ 调用/ 的/ 返回值/ ,/ 但是/ 环境/ 敏感/ 加壳/ 技术/ 的/ 环境/ 敏感/ 源/ 不仅/ 包括/ 系统/ 调用/ ,/ 还/ 包括/ 系统/ 内存/ 、/ CPU/ 指令/ 等/ ./ 此外/ ,/ 实现/ 恶意代码/ 脱壳/ ,/ 除了/ 推理/ 恶意代码/ 与/ 执行/ 环境/ 的/ 依赖/ 关系/ ,/ 还/ 需要/ 清除/ 其/ 环境/ 敏感性/ ,/ 诱导/ 其/ 在/ 动态/ 执行/ 过程/ 中暴漏/ 脱壳/ 行为/ ./ 6/ 结论/ 本文/ 提出/ 了/ 一种/ 基于/ 环境/ 敏感/ 分析/ 的/ 恶意代码/ 脱壳/ 方法/ ,/ 利用/ 恶意代码/ 执行/ 轨迹/ 中/ 泄露/ 的/ 与/ 环境/ 相关/ 的/ 路径/ 信息/ ,/ 有效/ 地/ 推理/ 并/ 清除/ 恶意代码/ 的/ 环境/ 敏感性/ ,/ 引导/ 恶意代码/ 执行/ 其/ 脱壳/ 过程/ ./ 本文/ 提出/ 的/ 脱壳/ 方法/ 已经/ 在/ MalUnpack/ 原型/ 系统/ 中/ 实现/ ,/ 并/ 与/ 定向/ 脱壳/ 工具/ 和/ 监控/ 环境/ 固定/ 的/ 通用/ 脱壳/ 工具/ 对/ 最新/ 的/ 加壳/ 恶意代码/ 进行/ 了/ 对比/ 实验/ ,/ 实验/ 结果表明/ 该/ 方法/ 能/ 有效/ 地/ 抵抗/ 环境/ 敏感/ 技术/ 的/ 干扰/ ,/ 脱壳/ 效果/ 明显/ 优于/ 传统/ 脱壳/ 工具/ ./ 本文/ 提出/ 的/ 恶意代码/ 环境/ 敏感性/ 检测/ 和/ 清除/ 方法/ 为/ 受/ 环境/ 敏感/ 技术/ 困扰/ 的/ 动态分析/ 方法/ 提供/ 了/ 新/ 的/ 思路/ ./ 下/ 一步/ 的/ 工作/ 中将/ 进一步/ 研究/ 恶意代码/ 的/ 行为/ 同/ 执行/ 环境/ 间/ 的/ 依赖/ 关系/ ,/ 增强/ 动态分析/ 恶意代码/ 的/ 准确性/ 和/ 全面性/ ./ 致谢/ 感谢/ Fortinet/ 反病毒/ 实验室/ 主任/ 张杰/ 在/ 本文/ 实验/ 过程/ 中/ 所/ 给予/ 的/ 帮助/ !/ 

