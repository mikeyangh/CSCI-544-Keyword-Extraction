Page1/ 闪存/ 数据库/ :/ 现状/ 、/ 技术/ 与/ 展望/ 王江涛/ 1/ )/ ,/ 2/ )/ 赖文豫/ 1/ )/ 孟小峰/ 1/ )/ 1/ )/ (/ 中国人民大学/ 信息/ 学院/ 北京/ 100872/ )/ 2/ )/ (/ 淮阴/ 师范学院/ 计算机科学/ 与/ 技术/ 学院/ 江苏/ 淮安/ 223300/ )/ 摘要/ 随着/ 闪存/ 存储技术/ 的/ 发展/ ,/ 闪存/ 已经/ 广泛应用/ 于/ 各种/ 移动/ 设备/ 、/ PC机/ 和/ 服务器/ 中/ ./ 作为/ 一种/ 完全/ 不同于/ 磁盘/ 的/ 新型/ 存储介质/ ,/ 闪存/ 具有/ 非易失/ 、/ 高速/ 读写/ 、/ 抗震/ 、/ 低功耗/ 、/ 高/ 存储密度/ 等/ 物理/ 特性/ ,/ 这/ 使得/ 基于/ 闪存/ 的/ 数据管理/ 问题/ 成为/ 新/ 的/ 挑战/ ./ 数据库系统/ 是/ 数据管理/ 的/ 重要/ 技术/ ,/ 将/ 现有/ 的/ 数据库系统/ 直接/ 移植/ 到/ 闪存/ 上/ 并/ 不能/ 充分发挥/ 其/ 硬件/ 特性/ ,/ 设计/ 实现/ 基于/ 闪存/ 的/ 数据库系统/ 是/ 当前/ 的/ 一个/ 研究/ 热点/ ./ 文中/ 介绍/ 了/ 闪存/ 的/ 特性/ 和/ 闪存/ 转换/ 层/ ;/ 总结/ 了/ 缓冲区/ 、/ 索引/ 、/ 查询/ 和/ 事务/ 等/ 数据库/ 关键技术/ ;/ 讨论/ 了/ 基于/ 闪存/ 的/ 混合/ 存储/ 数据管理/ ./ 最后/ ,/ 基于/ 该/ 领域/ 亟待解决/ 的/ 诸多/ 问题/ ,/ 指出/ 了/ 未来/ 的/ 研究/ 方向/ ./ 关键词/ 闪存/ ;/ 缓冲区/ ;/ 索引/ ;/ 查询/ ;/ 混合/ 存储/ 1/ 引言/ 发展/ ,/ 数据/ 产生/ 的/ 规模/ 和/ 速度/ 呈现/ 爆炸式/ 增长/ ,/ 海量/ 数据处理/ 给/ 计算机系统/ 性能/ 带来/ 巨大/ 挑战/ ./ 作为/ 数据/ 主要/ 存储介质/ 的/ 磁盘/ 已经/ 越来越/ 不能/ 满足/ 实际/ 应/ 随着/ 社交/ 网络/ 、/ 物/ 联网/ 等/ 新/ 技术/ 和/ 应用/ 的/ 快速/ 用/ 对/ 存储/ 带宽/ 的/ 需求/ ./ 在/ 过去/ 的/ 几十年/ ,/ CPU/ 的/ 处/ Page2/ 理/ 速度/ 提高/ 近/ 600/ 倍/ ,/ 而/ 磁盘/ 的/ 读写/ 速度/ 只/ 提升/ 了/ 不足/ 10/ 倍/ ,/ 低速/ 的/ 磁盘/ 已经/ 成为/ 制约/ 系统/ 性能/ 提升/ 的/ 瓶颈/ ./ 随着/ 多核/ 、/ GPU/ 等/ 高性能/ 处理器/ 的/ 出现/ ,/ 这一/ 现象/ 必然/ 会/ 更加/ 突出/ ./ 磁盘/ 自身/ 机械/ 寻/ 道/ 特性/ 使/ 其/ 性能/ 难有/ 大幅/ 提升/ ,/ 数据处理/ 急切需要/ 新型/ 高效/ 的/ 存储设备/ 来/ 提高/ 存储系统/ 的/ 性能/ ./ 诞生/ 于/ 20/ 世纪/ 80/ 年代/ 末/ 的/ 闪存/ 存储器/ (/ FlashMemory/ )/ 为/ 解决/ 这一/ 问题/ 提供/ 了/ 有效途径/ ./ 闪存/ 是/ 一种/ 全/ 电设备/ ,/ 通过/ 电子电路/ 来/ 读取数据/ ,/ 具有/ 非易失/ 、/ 极高/ 的/ 读写/ 速度/ 、/ 抗震/ 、/ 低功耗/ 、/ 体积小/ 等/ 特性/ ,/ 目前/ 已经/ 广泛应用/ 于/ 嵌入式/ 系统/ 、/ 航空航天/ 、/ 消费/ 电子/ 等/ 领域/ [/ 1/ -/ 2/ ]/ ./ 闪存/ 的/ 读写/ 速度/ 超过/ 磁盘/ 百倍/ 以上/ ,/ 随着/ 制作/ 工艺/ 的/ 发展/ ,/ 闪存/ 的/ 容量/ 不断/ 增大/ ,/ 应用领域/ 开始/ 逐步/ 扩展/ 到/ 高/ 吞吐/ 、/ 数据/ 访问/ 密集/ 的/ 企业级/ 应用环境/ ./ 图灵奖/ 获得者/ Gray/ 先生/ 就/ 曾/ 预测/ :/ “/ 就/ 像/ 磁盘/ 取代/ 磁带/ 一样/ ,/ 闪存/ 将会/ 取代/ 磁盘/ ”/ [/ 3/ ]/ ./ 数据库系统/ 是/ 数据管理/ 的/ 重要/ 技术/ ,/ 现有/ 数据库系统/ 大都/ 基于/ 磁盘/ 存储/ 进行/ 设计/ 和/ 优化/ ,/ 闪存/ 有/ 与/ 磁盘/ 不同/ 的/ 物理/ 特性/ ,/ 将/ 数据库系统/ 直接/ 运行/ 在/ 闪存/ 上/ 不能/ 充分发挥/ 其/ 优良/ 性能/ ./ 探讨/ 适合/ 闪存/ 特性/ 的/ 数据库/ 技术/ 是/ 当前/ 数据管理/ 领域/ 的/ 研究/ 热点/ ./ 本文/ 第/ 2/ 节/ 介绍/ 闪存/ 存储/ 特性/ 、/ 固态/ 硬盘/ 和/ 闪存/ 转换/ 层/ ;/ 第/ 3/ 节对/ 闪存/ 数据库/ 关键技术/ 进行/ 分析/ 归类/ ;/ 第/ 4/ 节/ 介绍/ 基于/ 闪存/ 的/ 混合系统/ 数据管理/ 相关/ 研究/ ;/ 第/ 5/ 节/ 展望未来/ 研究/ 工作/ ;/ 第/ 6/ 节对/ 全文/ 做出/ 总结/ ./ 2/ 闪存/ 存储/ 2.1/ 闪存/ 类型/ 根据/ 制作/ 工艺/ ,/ 闪存/ 存储器/ 可以/ 分为/ NOR/ 型/ 和/ NAND/ 型/ 两种/ ./ NOR/ 型/ 闪存/ 可以/ 按位/ 进行/ 访问/ ,/ 具有/ 可靠性/ 高/ 、/ 随机/ 读取/ 速度/ 快/ 的/ 优势/ ,/ 但/ 擦除/ 和/ 写/ 操作速度/ 较慢/ 、/ 容量/ 小/ ,/ 主要/ 用于/ 存储/ 可/ 执行/ 的/ 程序代码/ ./ NAND/ 闪存/ 的/ 容量/ 大/ ,/ 适合/ 进行/ 数据/ 存储/ ./ 根据/ 芯片/ 晶胞/ 所/ 能/ 存储/ 的/ 比特/ 位数/ ,/ NAND/ 闪存/ 又/ 可/ 分为/ 单级/ 晶胞/ (/ SLC/ )/ 和/ 多级/ 晶胞/ (/ MLC/ )/ 两类/ ,/ SLC/ 每/ 单元/ 存储/ 1/ 个/ 比特/ 位/ ,/ MLC/ 每/ 单元/ 存储/ 多个/ 比特/ 位/ ./ 文中/ 提及/ 的/ 闪存/ 设备/ 若/ 不是/ 特别/ 注明/ 都/ 是/ 指/ NAND/ 型/ 闪存/ ./ 2.2/ 闪存/ 特性/ 一个/ NAND/ 型/ 闪存/ 芯片/ 通常/ 由/ 若干个/ 块/ 组成/ ,/ 每个/ 块/ 又/ 由/ 若干/ 页/ 组成/ ./ 例如/ ,/ 容量/ 为/ 1GB/ 的/ 三星/ K9WAG08U1A/ ①/ 闪存/ 芯片/ 包含/ 8192/ 个块/ ,/ 每个/ 块/ 由/ 64/ 个页/ 组成/ ,/ 每/ 一个/ 页/ 由/ 数据/ 区/ 和/ 备用/ 区/ 组成/ ,/ 2KB/ 的/ 数据/ 区/ 用于/ 存储用户/ 数据/ ,/ 64B/ 的/ 备用/ 区/ 用来/ 存储/ 校验/ 、/ 逻辑/ 页/ 地址/ 等/ 信息/ ./ 闪存/ 具备/ 读/ 、/ 写/ 和/ 擦除/ 3/ 种/ 操作/ ,/ 页/ 是/ 闪存/ 的/ 基本/ 读写/ 单位/ ,/ 重写/ 数据/ 前/ 必须/ 进行/ 擦除/ ,/ 擦除/ 操作/ 以块/ 为/ 单位/ ,/ 执行/ 时间/ 和/ 能耗/ 远高于/ 读写操作/ ./ 在/ 页/ 被/ 擦除/ 前/ ,/ SLC/ 型/ 闪存/ 可以/ 对/ 同一个/ 数据/ 页/ 进行/ 多次/ 写/ 操作/ ,/ 最小/ 写/ 单元/ 为/ 512/ 个/ 字节/ ./ 闪存/ 芯片/ 的/ 读写/ 方式/ 与/ 磁盘/ 截然不同/ ,/ 二者/ 的/ I/ // O/ 操作/ 性能/ 对比/ 见表/ 1/ ./ 类型/ 磁盘/ 12.7/ ms13/ ./ 7msN/ // ANAND/ 型/ 闪存/ 80/ μ/ s200/ μ/ s1/ ./ 5ms/ 总的来说/ ,/ 闪存/ 不同于/ 磁盘/ 的/ 特性/ 包括/ 以下几点/ :/ (/ 1/ )/ 无/ 机械/ 延迟/ ./ 作为/ 一种/ 纯/ 电子设备/ ,/ 闪存/ 没有/ 机器/ 延迟/ ,/ 随机/ 访问/ 和/ 顺序/ 访问/ 的/ 开销/ 相当/ ,/ 具有/ 很/ 高/ 的/ 随机/ 读/ 性能/ ;/ (/ 2/ )/ 读写/ 不/ 对称/ ./ 闪存/ 对/ 不同/ 类型/ 访问/ 操作/ 表现/ 的/ 性能/ 差别/ 很大/ ./ 一般来说/ ,/ 读/ 速度/ 很快/ ,/ 写入/ 数据/ 时/ ,/ 因为/ 需要/ 通过/ 加压/ 的/ 方式/ 对/ 存储单元/ 进行/ 电子/ 填充/ ,/ 所以/ 速度/ 较慢/ ;/ (/ 3/ )/ 异位/ 更新/ ./ 与/ 磁盘/ 的/ 原位/ 更新/ 不同/ ,/ 对/ 闪存/ 数据/ 进行/ 重写/ 需要/ 先/ 执行/ 擦除/ 操作/ ,/ 即便/ 是/ 只/ 更新/ 数据/ 块/ 中/ 的/ 一条/ 数据/ 也/ 需要/ 将/ 整个/ 块/ 擦除/ ./ 频繁/ 的/ 擦除/ 操作/ 会/ 使/ 系统/ 性能/ 显著/ 降低/ ./ 因此/ ,/ 闪存/ 设备/ 在/ 更新/ 数据/ 时/ 并/ 不会/ 直接/ 在/ 原位/ 进行/ 更新/ ,/ 而是/ 先/ 将/ 原/ 数据/ 置/ 为/ 无效/ ,/ 然后/ 把/ 修改/ 后/ 的/ 数据/ 写/ 到/ 一个/ 新/ 的/ 空闲/ 页/ ;/ (/ 4/ )/ 擦除/ 次数/ 有限/ ./ 闪存/ 芯片/ 的/ 块/ 擦除/ 次数/ 是/ 有/ 限制/ 的/ ./ 通常/ SLC/ 闪存/ 支持/ 10/ 万次/ 擦除/ 操作/ ,/ MLC/ 闪存/ 数据/ 存储密度/ 高/ ,/ 可/ 擦除/ 次数/ 在/ 1/ 万次/ 左右/ ./ 超过/ 一定/ 擦除/ 次数/ 的/ 闪存/ 单元/ 将/ 不再/ 可用/ ;/ (/ 5/ )/ 低能耗/ ./ 与/ 磁盘/ 相比/ ,/ 闪存/ 的/ 能耗/ 更/ 低/ ,/ 每/ GB/ 读数据/ 能耗/ 只有/ 磁盘/ 的/ 2/ %/ ,/ 写/ 操作/ 能耗/ 不足/ 磁盘/ 的/ 30/ %/ ./ 闪存/ 的/ 出现/ 为/ 建设/ 绿色/ 数据中心/ 以及/ 低能耗/ 数据/ 管理系统/ 提供/ 了/ 有力/ 支持/ ./ 闪存/ 有/ 比/ 磁盘/ 更加/ 复杂/ 的/ 硬件/ 特性/ ,/ 传统/ 的/ 磁盘/ 数据库/ 技术/ 在/ 闪存/ 上/ 并/ 不/ 适用/ ,/ 设计/ 适用/ 于/ 闪存/ 的/ 结构/ 、/ 算法/ 和/ 应用/ 是/ 闪存/ 数据管理/ 必须/ 要/ 解决/ 的/ ①/ http/ :/ // // www/ ./ alldatasheet/ ./ com/ // pdf/ // 177488/ // SAMSUNGPage3/ 一个/ 重要/ 问题/ ./ 2.3/ 固态/ 硬盘/ 及/ 闪存/ 转换/ 层/ 基于/ 闪存/ 的/ 固态/ 硬盘/ (/ SolidStateDrive/ ,/ SSD/ )/ 由/ 闪存/ 芯片/ 、/ 控制器/ 和/ 闪存/ 转换/ 层/ (/ FlashTransla/ -/ tionLayer/ ,/ FTL/ )/ 组成/ ./ 它/ 对外/ 提供/ 和/ 磁盘/ 相同/ 的/ I/ // O/ 接口/ ,/ 存储/ 性能/ 远超过/ 磁盘/ ./ 近十年/ 来/ 随着/ 闪存/ 芯片/ 容量/ 的/ 增加/ 和/ 价格/ 的/ 下降/ ,/ 集成/ 了/ 多块/ 闪存/ 芯片/ 的/ 固态/ 硬盘/ 已经/ 被/ 认为/ 是/ 最/ 有/ 可能/ 替代/ 磁盘/ 的/ 新一代/ 数据/ 存储/ 载体/ ./ 个人/ 计算机/ 、/ 服务器/ 和/ 企业级/ 数据管理/ 中心/ 大量/ 使用/ 固态/ 硬盘/ 来/ 提高/ 数据/ 存储/ 性能/ [/ 5/ ]/ ①/ ②/ ./ 为了/ 屏蔽/ 闪存/ 与/ 磁盘/ 不同/ 的/ 操作/ 特性/ ,/ 固态/ 硬盘/ 通过/ 闪存/ 转换/ 层为/ 上层/ 文件系统/ 提供/ 通用/ 的/ 读写/ 接口/ ,/ 系统/ 应用/ 不/ 需要/ 任何/ 修改/ 便/ 可/ 直接/ 在/ 固态/ 硬盘/ 上/ 运行/ ./ 闪存/ 转换/ 层/ 是/ 封装/ 在/ 闪存/ 芯片/ 和/ 文件系统/ 之间/ 的/ 一个/ 软件/ 层/ ,/ 其/ 结构/ 如图/ 1/ 所示/ ./ 闪存/ 转换/ 层/ 包括/ 3/ 个/ 基本功能/ :/ (/ 1/ )/ 地址映射/ ./ 闪存/ 转换/ 层/ 的/ Allocator/ 模块/ 负责/ 为/ I/ // O/ 请求/ 分配/ 可用/ 的/ 空闲/ 空间/ ,/ 解决/ 闪存/ 异位/ 更新/ 造成/ 的/ 地址变换/ 问题/ ;/ (/ 2/ )/ 磨损/ 平衡/ ./ 闪存/ 单元/ 的/ 擦除/ 次数/ 是/ 有/ 限制/ 的/ ,/ 超过/ 限定/ 擦除/ 次数/ 的/ 单元/ 将/ 成为/ 磨损/ 块/ 而/ 无法/ 使用/ ./ 数据/ 访问/ 的/ 不/ 均衡性/ 可能/ 导致/ 闪存/ 局部/ 存储/ 区因/ 更新/ 频繁/ 而/ 变成/ 磨损/ 块/ ./ 闪存/ 转换/ 层中/ 的/ WearLeveler/ 模块/ 采用/ 数据/ 迁移/ 等/ 方法/ 平衡/ 存储单元/ 的/ 擦除/ 次数/ 实现/ 闪存/ 整体/ 的/ 损耗/ 均衡/ ;/ (/ 3/ )/ 垃圾/ 回收/ ./ 闪存/ 转换/ 层/ 的/ Cleaner/ 模块/ 用于/ 回收/ 无效/ 的/ 旧/ 数据/ 页/ ./ 垃圾/ 回收/ 首先/ 选择/ 待/ 回收/ 的/ 块/ ,/ 把/ 块/ 中/ 有效/ 的/ 数据/ 写入/ 新/ 的/ 块/ ,/ 然后/ 擦除/ 无效/ 块/ 实现/ 空间/ 的/ 循环/ 再/ 利用/ ./ 3/ 闪存/ 数据库系统/ 关键技术/ 闪存/ 有/ 与/ 磁盘/ 完全/ 不同/ 的/ 物理/ 特性/ ,/ 用/ 闪存/ 直接/ 替换/ 磁盘/ 进行/ 数据管理/ 不能/ 最大化/ 发挥/ 闪存/ 的/ 优良/ 性能/ ,/ 因此/ 有/ 必要/ 设计/ 基于/ 闪存/ 的/ 数据库系统/ ./ 本节/ 首先/ 阐述/ 研究/ 闪存/ 数据库系统/ 的/ 必要性/ ,/ 然后/ 分别/ 讨论/ 闪存/ 数据库系统/ 研究/ 的/ 几个/ 关键技术/ ./ 3.1/ 闪存/ 数据库系统/ 研究/ 的/ 必要性/ 为了/ 对比/ 闪存/ 设备/ 对/ 数据库系统/ 的/ 影响/ ,/ 我们/ 将/ PostgreSQL8/ ./ 4.9/ 数据库系统/ 迁移/ 至/ 固态/ 硬盘/ 并/ 进行/ TPC/ -/ C/ 测试/ ./ 测试环境/ :/ CPU/ 为/ 2DuoCPUE83002/ ./ 8GHz/ ,/ 内存/ 2GB/ ,/ 缓冲区/ 为/ 400MB/ ,/ 操作系统/ 为/ Ubuntu/ ,/ 操作系统/ 和/ 数据/ 集/ 分别/ 安装/ 在/ 两块/ 80GBIntelSSD/ 上/ ,/ 测试/ 结果/ 见表/ 2/ ./ 表/ 2/ 磁盘/ 和/ 固态/ 硬盘/ 事务处理/ 吞吐/ 性能/ 对比/ 并发/ 用户/ 磁盘/ 481632/ 实验/ 表明/ PostgreSQL/ 在/ 固态/ 硬盘/ 上/ 的/ 事务处理/ 性能/ 提高/ 10/ 倍/ 左右/ ,/ 相比/ 固态/ 硬盘/ 对/ 磁盘/ 百倍/ 以上/ 的/ 读写/ 速度/ ,/ 数据库系统/ 显然/ 没/ 能/ 充分发挥/ 闪存/ 优良/ 的/ 存储/ 性能/ ./ 文献/ [/ 4/ ,/ 6/ ]/ 基于/ 闪存/ 对/ 数据库/ 查询处理/ 性能/ 进行/ 了/ 测试/ ,/ 结果/ 只/ 提高/ 了/ 几倍/ ./ 造成/ 这一/ 现象/ 的/ 根本原因/ 在于/ 现有/ 的/ 数据库系统/ 都/ 是/ 基于/ 磁盘/ 设计/ ,/ 直接/ 运行/ 在/ 闪存/ 上/ 不能/ 充分发挥/ 闪存/ 的/ 物理/ 特性/ ./ 以/ 查询/ 优化/ 为例/ ,/ 磁盘/ 随机/ 读/ 操作/ 代价/ 是/ 顺序/ 读/ 的/ 130/ 倍/ ,/ 查询/ 优化/ 算法/ 优先选择/ 顺序/ 读写/ 来/ 代替/ 随机/ 读/ 操作/ ,/ 闪存/ 写/ 操作/ 比读/ 操作/ 的/ 代价/ 高/ ,/ 而/ 其/ 随机/ 读/ 代价/ 只是/ 顺序/ 读/ 的/ 2.5/ 倍/ ,/ 现有/ 查询/ 优化/ 算法/ 无法/ 发挥/ 其/ 极佳/ 的/ 随机/ 读/ 性能/ ./ 设计/ 并/ 实现/ 适合/ 闪存/ 读写/ 特性/ 的/ 数据库系统/ 十分必要/ ./ 目前/ IBM/ 、/ Oracle/ 和/ 微软/ 等/ 许多/ 知名/ 数据库/ 厂商/ 都/ 在/ 它们/ 的/ 数据库/ 产品/ 中/ 添加/ 了/ 针对/ 闪存/ 的/ 应用/ ③/ ④/ ./ 闪存/ 数据库系统/ 研究/ 必须/ 分析/ 现有/ 技术/ 在/ 闪存/ 数据管理/ 上/ 的/ 缺陷/ ,/ 从/ 系统性/ 和/ 通用性/ 等/ 角度/ 设计/ 适合/ 闪存/ 特性/ 的/ 算法/ 、/ 结构/ 和/ 应用/ ,/ 以/ 充分发挥/ 闪存/ 的/ 性能/ 优势/ ./ 基于/ 此/ ,/ 我们/ 提出/ 闪存/ 数据库系统/ 框架/ ,/ 如图/ 2/ 所示/ ./ 查询处理/ 应该/ 设计/ 基于/ 闪存/ 的/ 代价/ 模型/ 并/ 对/ 查询/ 编译/ 、/ 查询/ 计划/ 生成/ 、/ 路径/ 选择/ 等/ 环节/ 进行/ 优化/ ;/ 存储/ 和/ 索引/ 管理/ 应/ 针对/ 写前/ 擦除/ 特性/ 对/ 数据/ 进行/ 有/ ①/ ②/ ③/ ④/ index/ ./ htmlPage4/ 效/ 组织/ ,/ 提高/ 数据检索/ 的/ 效率/ ;/ 缓冲区/ 管理/ 需要/ 考虑/ 闪存/ 读写/ 不/ 对称/ 等/ 特性/ ,/ 在/ 保证/ 较/ 高/ 访问/ 命中率/ 的/ 同时/ 尽量减少/ 对/ 闪存/ 的/ 写/ 操作/ ;/ 事务处理/ 应该/ 发挥/ 闪存/ 高速/ 随机/ 读/ 性能/ ,/ 在/ 日志/ 、/ 恢复/ 和/ 并发/ 控制/ 处理过程/ 中/ 既/ 能/ 保证/ 事务/ 的/ ACID/ 特性/ ,/ 又/ 能/ 细化/ 并发/ 粒度/ 提高/ 事务处理/ 的/ 吞吐量/ ./ 缓冲区/ 管理/ 、/ 索引/ 技术/ 、/ 查询处理/ 、/ 事务处理/ 等/ 是/ 构建/ 闪存/ 数据库系统/ 的/ 关键技术/ ./ 3.2/ 缓冲区/ 管理/ 缓冲区/ 是/ 数据库系统/ 的/ 核心/ 组件/ ,/ 利用/ 数据/ 访问/ 存在/ 局部性/ 特征/ 将/ 最近/ 和/ 经常/ 访问/ 的/ 数据/ 存储/ 在/ 内存/ 上/ ,/ 以/ 快速/ 响应/ CPU/ 的/ 读写/ 请求/ ./ CPU/ 发出/ 对/ 数据/ 页/ p/ 的/ 访问/ 请求/ ,/ 缓冲区/ 管理/ 做/ 如下/ 处理/ :/ (/ 1/ )/ 查阅/ 页表/ 判断/ p/ 是否/ 在/ 缓冲区/ ,/ 若/ 存在/ 则/ 访问/ 命中/ ,/ 读取/ p/ 并/ 执行/ 对/ 该页/ 的/ 操作/ ;/ 否则/ 访问/ 脱靶/ (/ 缺页/ )/ 执行/ (/ 2/ )/ ;/ (/ 2/ )/ 系统/ 检查/ 缓冲区/ 当前/ 可用/ 空间/ ,/ 若有/ 空间/ 则/ 为/ 请求/ 页/ 分配/ 一个/ 空闲/ 页/ ,/ 然后/ 从/ 磁盘/ 读入/ 页/ p/ ,/ 执行/ 对/ p/ 的/ 操作/ ,/ 否则/ 执行/ (/ 3/ )/ ;/ (/ 3/ )/ 由/ 替换算法/ 选择/ 一/ 牺牲/ 页/ q/ 置换/ 出/ 内存/ ,/ 若/ q/ 是/ 修改/ 页/ (/ 脏页/ )/ ,/ 则/ 需写/ 回/ 外存/ ,/ 读/ p/ 进/ 内存/ ./ 在/ 可用/ 缓冲区/ 大小/ 确定/ 的/ 情况/ 下/ ,/ 置换/ 代价/ 是/ 衡量/ 缓冲区/ 算法/ 性能/ 的/ 首要/ 因素/ ./ 页/ p/ 的/ 置换/ 代价/ 可由式/ (/ 1/ )/ 来/ 表示/ :/ Cost/ (/ p/ )/ =/ Pmiss/ ×/ Cread/ +/ Pmiss/ ×/ Pdirty/ ×/ Cwrite/ (/ 1/ )/ 其中/ ,/ Pmiss/ 代表/ p/ 脱靶/ 的/ 概率/ ;/ Cread/ 和/ Cwrite/ 分别/ 表示/ 在/ 外存/ 上/ 读取/ 和/ 写入/ p/ 的/ 时间/ ;/ Pdirty/ 表示/ p/ 为脏页/ 的/ 概率/ ./ 式/ (/ 1/ )/ 可/ 转换/ 为式/ (/ 2/ )/ 其中/ ω/ 表示/ 对外/ 存/ 执行/ 写/ 和/ 读/ 操作/ 的/ 代价/ 比/ ./ Pmiss/ 、/ Pdirty/ 和/ ω/ 是/ 影响/ 置换/ 代价/ 的/ 要素/ ,/ 对/ 磁盘/ 而言/ ,/ ω/ 取值/ 近似/ 等于/ 1/ ,/ 因此/ 基于/ 磁盘/ 的/ 缓冲区/ 管理/ 算法/ 主要/ 关注/ Pmiss/ 对/ 置换/ 代价/ 的/ 影响/ ,/ 保持/ 高/ 访问/ 命中率/ 是/ 缓冲区/ 管理策略/ 的/ 主要/ 目标/ ./ 经典/ 缓冲区/ 管理/ 算法/ [/ 7/ -/ 8/ ]/ 根据/ 数据/ 访问/ 频度/ 和/ 最近/ 性/ 设计/ 页面/ 替换/ 策略/ ./ 闪存/ 的/ 读写/ 代价/ 是/ 不/ 对称/ 的/ ,/ 其/ ω/ 的/ 取值/ 受/ 产品/ 类型/ 和/ 访问/ 形式/ 的/ 影响/ 比较/ 大/ ,/ 大小/ 通常/ 超过/ 5/ ./ 闪存/ 数据库/ 缓冲区/ 管理/ 必须/ 同时/ 考虑/ Pmiss/ 和/ Pdirty/ 对/ 置换/ 代价/ 的/ 影响/ ,/ 单纯/ 追求/ 高/ 命中率/ 的/ 设计/ 原则/ 对/ 闪存/ 未必/ 有效/ ,/ 高/ 命中率/ 不/ 一定/ 带来/ 高/ I/ // O/ 性能/ ./ 设计/ 高效/ 的/ 闪存/ 缓冲区/ 管理/ 算法/ 应该/ 满足/ 以下/ 3/ 个/ 原则/ :/ (/ 1/ )/ 适当/ 减少/ 对脏页/ 的/ 置换/ ,/ 降低/ I/ // O/ 代价/ ;/ (/ 2/ )/ 保持/ 相对/ 较/ 高/ 的/ 命中率/ ,/ 减少/ 缺页/ ;/ (/ 3/ )/ 优化/ 写/ 操作/ ,/ 避免/ 大/ 范围/ 的/ 随机/ 写/ 操作/ ,/ 提高/ 闪存/ 的/ 使用寿命/ ./ 根据/ 置换/ 代价/ 的/ 粒度/ ,/ 现有/ 闪存/ 数据库/ 缓冲区/ 替换/ 策略/ 可/ 分为/ 基于/ 页级/ 和/ 基于/ 块级/ 两类/ ./ 3.2/ ./ 1/ 页级/ 代价/ 置换/ 一页/ 的/ 开销/ ,/ 代价/ 低/ 的/ 数据/ 页/ 优先/ 被/ 置换/ ./ 基于/ 页级/ 代价/ 的/ 替换/ 策略/ 在/ 选择/ 牺牲/ 页/ 时/ 考虑/ (/ 1/ )/ CFLRUCFLRU/ [/ 9/ ]/ 是/ 最早/ 提出/ 的/ 闪存/ 数据库/ 缓冲区/ 管理/ 算法/ ./ CFLRU/ 在/ 缓冲区/ 发生/ 缺页/ 中断/ 时/ 优先选择/ 干净/ 页/ (/ CleanPage/ )/ 进行/ 替换/ ,/ 脏页/ (/ DirtyPage/ )/ 被/ 留在/ 缓冲区/ 以/ 减少/ 置换/ 代价/ ./ 算法/ 思想/ 见图/ 3/ ./ CFLRU/ 将/ 缓冲区/ 中/ 的/ 数据/ 页/ 以/ LRU/ 方式/ 组织/ 成/ 队列/ ,/ 在/ 队列/ 的/ LRU/ 端/ 选择/ 部分/ 数据/ 页/ 作为/ 优先/ 置换/ 区/ ,/ 替换算法/ 从/ 优先/ 置换/ 区/ 按/ LRU/ 顺序/ 选择/ 一/ 干净/ 页/ 作/ 牺牲/ 页/ ,/ 如果/ 没有/ 干净/ 页/ 则/ 选择/ 位于/ LRU/ 端的/ 脏页/ ,/ 优先/ 置换/ 区/ 的/ 大小/ 由/ 参数/ ω/ 来/ 控制/ ./ CFLRU/ 方法/ 可以/ 有效/ 减少/ 脏页/ 写/ 回/ 闪存/ 的/ 次数/ ,/ 但/ 缓冲区/ 中冷/ 的/ 脏/ 数据/ 页/ 可能/ 会/ 因为/ 长时间/ 占据/ 缓存/ 而/ 造成/ 内存/ 污染/ ./ 这里/ 的/ 冷热/ 指/ 的/ 是/ 数据/ 在/ 最近/ 时间/ 内/ 被/ 访问/ 的/ 情况/ ./ 针对/ CFLRU/ 的/ 问题/ ,/ 文献/ [/ 10/ -/ 13/ ]/ 通过/ 设置/ 冷热/ 标识/ 位/ 等/ 方法/ 优化/ 了/ 替换/ 策略/ 对脏页/ 的/ 选择/ ,/ 命中率/ 有所提高/ ./ Page5/ (/ 2/ )/ FOR/ 仅/ 从/ 访问/ 的/ 最近/ 性/ 或/ 访问/ 频度/ 来/ 区分/ 数据/ 页/ 的/ 冷热/ 程度/ 不能/ 很/ 好/ 地/ 反映/ 实际/ 应用/ 中/ 数据/ 访问/ 模式/ 的/ 变化/ ./ FOR/ [/ 14/ ]/ 基于/ 最近/ 性/ 和/ 访问/ 频度/ 提出/ 了/ 一个/ 数据/ 冷热/ 模型/ :/ Hotness/ (/ p/ )/ =/ α/ ×/ IODp/ +/ (/ 1/ -/ α/ )/ ×/ ORp/ (/ 3/ )/ 其中/ ,/ IODp/ 和/ ORp/ 分别/ 表示/ 数据/ 页/ p/ 的/ 访问/ 频度/ 和/ 最近/ 性/ ;/ α/ 是/ 一个/ 可控/ 参数/ ,/ 用于/ 动态/ 调节/ 频度/ 和/ 最近/ 性/ 在/ 热度/ 模型/ 中所/ 占/ 的/ 比重/ ;/ IODp/ 是/ 指/ 对/ p/ 最近/ 的/ 两次/ 访问/ 之间/ 不同/ 数据/ 页/ 操作/ 的/ 次数/ ;/ ORp/ 是/ 指/ 对/ p/ 的/ 最近/ 一次/ 访问/ 距离/ 当前/ 访问/ 之间/ 不同/ 数据/ 页/ 的/ 操作/ 次数/ ./ 数据/ 访问/ 列表/ 记录/ 数据/ 访问/ 和/ 替换/ 的/ 历史/ 信息/ ,/ 由/ 列表/ 可以/ 计算/ 出/ IODp/ 和/ ORp/ ./ FOR/ 根据/ Hotness/ (/ p/ )/ 将/ 缓冲区/ 分为/ 冷热/ 两个/ 区/ ,/ 二者/ 长度/ 比/ 满足/ Cread/ // Cwrite/ ./ 置换/ 算法/ 先/ 从/ 冷/ 数据/ 区/ 选择/ 牺牲/ 页/ ,/ 为了/ 避免/ 数据/ 在/ 变热/ 前/ 频繁/ 被/ 换/ 出/ 内存/ ,/ FOR/ 通过/ 冷/ 数据/ 阈值/ Rcold/ 来/ 保证/ 最少/ 冷/ 数据/ 页/ 的/ 数量/ ,/ 当冷/ 数据/ 页/ 的/ 数量/ 低于/ Rcold/ ,/ 热区/ 中较/ 冷/ 的/ 数据/ 页/ 将/ 补充/ 到/ 冷/ 数据/ 区/ ./ 3.2/ ./ 2/ 块级/ 代价/ 闪存/ 对/ 读写操作/ 是/ 非常/ 敏感/ 的/ ,/ 对于/ 不同/ 负载/ 访问/ 模式/ 表现/ 出/ 极大/ 的/ 性能/ 差异/ ./ 为此/ ,/ 我们/ 分别/ 测试/ 了/ 5/ 款/ 不同/ 品牌/ 或/ 型号/ 固态/ 硬盘/ 的/ 读写/ 性能/ ./ 图/ 4/ 给出/ 了/ 其中/ 一款/ 产品/ 的/ 性能/ 对比/ ./ 从/ 实验/ 结果/ 可以/ 看出/ ,/ 闪存/ 随机/ 写/ 操作/ 的/ 性能/ 远/ 不及/ 顺序/ 写/ ./ 造成/ 这一/ 问题/ 的/ 主要/ 原因/ 包括/ :/ (/ 1/ )/ 随机/ 写/ 操作/ 会/ 触发/ 更/ 多/ 的/ 块/ 擦除/ 操作/ ,/ 擦除/ 操作/ 的/ 代价/ 昂贵/ ;/ (/ 2/ )/ 闪存/ 是/ 通过/ 内部/ FTL/ 软件/ 层/ 对/ 块/ 内原/ 数据/ 进行/ 异位/ 更新/ ,/ 无效/ 旧/ 数据/ 导致/ 块/ 内/ 产生/ 大量/ 存储/ 碎片/ ,/ 垃圾/ 回收/ 的/ 代价/ 比较/ 大/ ,/ 而/ 存储/ 碎片/ 也/ 会/ 使/ 逻辑/ 地址/ 与/ 物理地址/ 不再/ 连续/ 进而/ 影响/ 数据/ 预读/ 性能/ ./ 文献/ [/ 15/ ]/ 曾/ 指出/ 存有/ 大量/ 存储/ 碎片/ 的/ 闪存/ 其/ 读写/ 性能/ 只有/ 原来/ 的/ 30/ %/ ./ 页级/ 替换/ 策略/ 可能/ 导致/ 闪存/ 产生/ 较/ 多/ 存储/ 碎片/ 而/ 引发/ 频繁/ 的/ 随机/ 写/ 操作/ ./ 块级/ 替换/ 策略/ 考虑/ 到/ 闪存/ 良好/ 的/ 顺序/ 写/ 性能/ ,/ 以聚/ 簇/ 的/ 方式/ 将/ 缓冲区/ 中/ 地址/ 相近/ 的/ 数据/ 页/ 分组/ ,/ 然后/ 以/ 组为/ 单位/ 批量/ 将/ 数据/ 换/ 出/ 内存/ ./ (/ 1/ )/ FABFAB/ [/ 16/ ]/ 基于/ LRU/ 算法/ 以/ 数据/ 块/ 的/ 形式/ 组织/ 缓冲区/ 数据/ ,/ 每/ 一个/ 块/ 聚集/ 属于/ 同一/ 闪存/ 块/ 的/ 数据/ 页/ ,/ 当/ 缓冲区/ 可用/ 空间/ 低于/ 设定/ 的/ 阈值/ ,/ 聚集/ 最/ 多/ 数据/ 页/ 的/ 块/ 将/ 被/ 换/ 出/ 内存/ ./ FAB/ 适用/ 于/ 装有/ 闪存/ 芯片/ 的/ PDA/ 、/ 媒体播放器/ 、/ 移动电话/ 和/ 数码相机/ 等/ 设备/ ,/ 这/ 类/ 设备/ 的/ 数据管理/ 具有/ 典型/ 的/ 顺序/ 访问/ 比较/ 密集/ 特性/ ,/ FAB/ 难以/ 适用/ 随机/ 访问/ 频繁/ 的/ 负载/ ./ 针对/ FAB/ 存在/ 的/ 问题/ ,/ BPLRU/ [/ 17/ ]/ 和/ REF/ [/ 18/ ]/ 在/ 选择/ 牺牲/ 块/ 时/ 通过/ 数据/ 页/ 填充/ 和/ 标记/ 脏页/ 置换/ 历史/ 等/ 方法/ 减少/ 随机/ 写/ 操作/ 的/ 代价/ ./ (/ 2/ )/ CFDCCFDC/ [/ 19/ ]/ 将/ 数据/ 页/ 以/ 簇/ 的/ 形式/ 组织/ 到/ 一起/ ,/ 每/ 一个/ 簇由/ 逻辑/ 地址/ 相近/ 的/ n/ 个/ 数据/ 页/ 构成/ 并/ 赋予/ 置换/ 权值/ ,/ 权值/ 低/ 的/ 簇/ 放置/ 在/ 优先/ 置换/ 区/ ./ 替换算法/ 选择/ 优先/ 置换/ 区中/ 权值/ 最小/ 的/ 簇/ 替换/ 出/ 内存/ ./ 置换/ 权值/ 公式/ 为/ 其中/ ,/ n/ 表示/ 一个/ 簇所/ 包含/ 的/ 数据/ 页/ 的/ 数量/ ;/ pi/ -/ pi/ -/ 1/ 的/ 绝对值/ 表示/ 簇内/ 相邻/ 两个/ 页/ 的/ 逻辑/ 页/ 号/ 差/ ,/ 通常/ 逻辑/ 上越/ 接近/ 的/ 数据/ 页/ 物理/ 上/ 也/ 相近/ ,/ Age/ (/ c/ )/ 反映/ 簇/ 的/ 新旧/ 程度/ ./ CFDC/ 充分考虑/ 簇/ 的/ 访问/ 最近/ 性/ 和/ 访问/ 频度/ ,/ 聚集/ 数据/ 页/ 时/ 表现/ 出/ 更/ 强/ 的/ 灵活性/ ,/ 避免/ 了/ 对/ 闪存/ 进行/ 大/ 范围/ 的/ 随机/ 写/ 操作/ ./ 表/ 3/ 列出/ 了/ 目前/ 闪存/ 数据库/ 主要/ 的/ 缓冲区/ 管理/ 算法/ ./ Page6/ 算法/ 粒度/ 表/ 3/ 闪存/ 数据库/ 缓冲区/ 算法/ 性能/ 对比/ CF/ -/ LRU/ [/ 9/ ]/ 页级/ 基于/ LRU/ 算法/ ,/ 管理/ 简单/ FOR/ [/ 14/ ]/ 页级/ 动态/ 调节/ 冷热/ 数据/ 的/ 长度/ 比例/ ,/ FAB/ [/ 16/ ]/ 块级/ 以块/ 为/ 单位/ 组织/ 脏/ 数据/ ,/ 管理/ 相/ CFDC/ [/ 19/ ]/ 块级/ 选择/ 逻辑/ 地址/ 相邻/ 的/ 脏页/ 聚簇/ ,/ AD/ -/ LRU/ [/ 13/ ]/ 页级/ 分为/ 冷热/ 两个/ 队列/ ,/ 管理/ 相对/ 复杂/ 优点/ :/ 根据/ 访问/ 负载/ 动态/ 调整/ 冷热/ 数据/ 队列/ ,/ 访问/ 命中率/ 高/ 3.2/ ./ 3/ 实验/ 对比/ 为了/ 对比/ 已有/ 闪存/ 缓冲区/ 管理策略/ 的/ 性能/ ,/ 本文/ 基于/ Flash/ -/ DBsim/ [/ 20/ ]/ 模拟器/ 实现/ 了/ LRU/ 、/ CF/ -/ LRU/ [/ 9/ ]/ 、/ FAB/ [/ 16/ ]/ 、/ CFDC/ [/ 19/ ]/ 等/ 替换算法/ ./ 实验/ 环境/ 配置/ :/ 数据/ 页/ 大小/ 为/ 2KB/ ,/ 每个/ 闪存/ 块/ 包含/ 64/ 个页/ ./ 闪存/ 芯片/ 的/ 读/ 、/ 写/ 和/ 擦除/ 延迟/ 分别/ 为/ 20/ μ/ s/ ,/ 200/ μ/ s/ 和/ 1.5/ ms/ ./ 实验/ 所用/ 数据/ 集/ 基于/ TPC/ -/ C/ 标准/ ,/ 采用/ BenchmarkSQL/ 运行/ PostgreSQL/ 数据库/ 获得/ ./ 数据/ 请求/ 次数/ 为/ 2087142/ ,/ 读/ 和/ 写/ 操作/ 所/ 占/ 比例/ 分别/ 为/ 71.3/ %/ 和/ 28.7/ %/ ./ CF/ -/ LRU/ 算法/ 的/ 优先/ 置换/ 窗口/ 大小/ 设置/ 为/ 可用/ 缓冲区/ 的/ 60/ %/ ,/ CFDC/ 算法/ 优先/ 置换/ 区/ 的/ 大小/ 设为/ 40/ %/ ,/ 每/ 一个/ 簇/ 的/ 大小/ 与/ 闪存/ 物理/ 块/ 大小/ 相同/ ./ 实验/ 主要/ 分析/ 数据/ 集/ 的/ 运行/ 时间/ 和/ 闪存/ 物理/ 写/ 次数/ ,/ 结果/ 如图/ 5/ 所示/ ./ 在/ 运行/ 时间/ 方面/ ,/ 从图/ 5/ (/ a/ )/ 可以/ 看出/ 基于/ 闪存/ 的/ 缓冲区/ 替换/ 策略/ 的/ 优点/ :/ 有效/ 减少/ 对/ 闪存/ 的/ 写/ 操作/ 缺点/ :/ 存在/ 脏页/ 污染/ 问题/ 、/ 命中率/ 有时/ 较/ 低/ 优点/ :/ 有效/ 区分/ 冷热/ 数据/ 页/ 、/ 命中率/ 高/ 、/ 写/ 代价/ 低/ 缺点/ :/ 通过/ 保存/ 置换/ 历史/ 来/ 区分/ 冷热/ 数据/ ,/ 结构复杂/ ,/ 维护/ 代价/ 高/ 优点/ :/ 以聚/ 簇/ 的/ 形式/ 将脏页/ 写/ 回/ 闪存/ ,/ 闪存/ 写/ 代价/ 低/ 缺点/ :/ 对/ 随机/ 访问/ 较/ 频繁/ 的/ 负载/ 性能/ 差/ ,/ 存在/ 脏页/ 污染/ 优点/ :/ 根据/ 权值/ 设定/ 优先/ 置换/ 区/ ,/ 减少/ 脏页/ 污染/ 缺点/ :/ 对/ 随机/ 访问/ 较/ 频繁/ 的/ 负载/ ,/ 聚簇/ 的/ 有效性/ 降低/ 缺点/ :/ 算法/ 设计/ 复杂/ ,/ 冷热/ 数据/ 之间/ 迁移/ 代价/ 高/ 总体/ 性能/ 胜过/ LRU/ 算法/ ,/ 其中/ FAB/ 算法/ 采用/ 聚簇/ 的/ 方式/ 替换/ 数据/ 页/ ,/ 对于/ 顺序/ 访问/ 特征/ 不/ 明显/ 的/ 负载/ ,/ FAB/ 可能/ 会/ 导致/ 一些/ 频繁/ 访问/ 的/ 数据/ 过早/ 地被/ 替换/ 出/ 内存/ ,/ 在/ 小/ 容量/ 内存/ 环境/ 下/ 其/ 性能/ 不如/ LRU/ 算法/ ./ 在/ 闪存/ 物理/ 写/ 操作/ 方面/ ,/ 从图/ 5/ (/ b/ )/ 可以/ 看出/ ,/ 基于/ 闪存/ 的/ 缓冲区/ 替换/ 策略/ 因为/ 考虑/ 了/ 读写/ 不/ 对称/ 特性/ ,/ 替换/ 策略/ 为脏页/ 赋予/ 更/ 高/ 的/ 置换/ 权限/ ,/ 数据/ 集/ 运行/ 过程/ 中/ 产生/ 的/ 闪存/ 物理/ 写/ 次数/ 明显降低/ ,/ CFDC/ 算法/ 采用/ 聚簇/ 的/ 方式/ 将脏页/ 批量/ 写回/ 闪存/ ,/ 置换/ 过程/ 避免/ 了/ 大/ 范围/ 的/ 随机/ 写/ 操作/ ,/ 在/ 所有/ 对比/ 算法/ 中/ 引发/ 的/ 物理/ 写/ 次数/ 最少/ ./ 3.3/ 索引/ 管理/ 索引/ 记录/ 了/ 数据/ 和/ 其/ 存储/ 地址/ 的/ 映射/ 关系/ ,/ 利用/ 索引/ 可以/ 快速/ 定位/ 相关/ 数据/ ,/ 降低/ I/ // O/ 操作/ 代价/ 、/ 提高/ 查询/ 效率/ ./ 索引/ 必须/ 能够/ 反映/ 数据/ 存储/ 位置/ 发生/ 的/ 变化/ ,/ 当/ 数据/ 发生/ 更新/ 时/ 索引/ 需要/ 做/ 及时/ 更新/ ./ 对于/ 由/ n/ 条/ 记录/ 组成/ 的/ 数据/ 集/ T/ ,/ 为/ T/ 创建/ 的/ 索引/ 为/ Tindex/ ,/ 通过/ 索引/ 对/ T/ 进行/ 查询/ 节省/ 的/ I/ // O/ 代价/ gain/ (/ T/ )/ 可/ 简单/ 的/ 表示/ 为/ gain/ (/ T/ )/ =/ scan/ (/ T/ )/ -/ scan/ (/ Tindex/ )/ -/ update/ (/ Tindex/ )/ 式/ 中/ ,/ α/ ×/ Cread/ 表示/ 扫描/ T/ 和/ Tindex/ 的/ 代价/ ,/ α/ 是/ 查询/ T/ 所/ 需/ 总/ I/ // O/ 数/ ,/ Cread/ 是/ 一次/ 读/ I/ // O/ 代价/ ;/ 索引/ 维护/ 代价/ update/ (/ Tindex/ )/ 大小/ 为/ β/ ×/ Cwrite/ ,/ 其中/ β/ 表示/ 更新/ 索引/ 产生/ 的/ I/ // O/ 总数/ ,/ Cwrite/ 是/ 一次/ 写/ I/ // O/ 代价/ ./ 与/ 磁盘/ 相比/ ,/ 闪存/ 的/ Cwrite/ 远高于/ Cread/ ,/ 因此/ 闪存/ 索引/ 更新/ 需要/ 付出/ 相对/ 更大/ 的/ 代价/ ./ 以/ B/ +/ -/ Tree/ 索引/ 为例/ ,/ B/ +/ -/ Tree/ 结点/ 更新/ 通常/ 只/ 需/ 修改/ 小/ 部分/ 数据/ ,/ 由于/ 闪存/ 最小/ 以页/ 为/ 单位/ 进行/ 读写/ ,/ 少量/ 数据/ 更新/ 也/ 需要/ 重写/ 整个/ 页面/ ,/ 索引/ 更新/ 引发/ 的/ 大量/ 擦除/ 操作/ 将/ 极大/ 降低/ 索引/ 性能/ 和/ 闪存/ 寿命/ ,/ 减少/ 索引/ 更新/ 代价/ 是/ 闪存/ 数据库/ 索引/ 管理/ 需要/ 解决/ 的/ 主要/ 问题/ ./ 批量/ 延时/ 更新/ 和/ 索引/ 结构/ 优化/ 是/ 目前/ 解决/ 这一/ 问题/ 使用/ 较为/ 广泛/ 的/ 技术/ ./ Page73/ ./ 3.1/ 延时/ 更新/ 对于/ 数据/ 更新/ 引发/ 的/ 索引/ 变化/ ,/ 延时/ 更新/ 不是/ 将/ 更新/ 传播/ 至/ 已有/ 索引/ ,/ 而是/ 把/ 更新/ 操作/ 缓存/ 在/ 内存/ ,/ 当/ 缓存/ 的/ 数据/ 满足/ 设定/ 条件/ 再/ 执行/ 批量/ 更新/ 操作/ ./ 延迟/ 更新/ 通过/ 消除/ 冗余/ 操作/ 和/ 批量/ 提交/ 的/ 方法/ 减少/ 了/ 写/ 传播/ 的/ 代价/ ./ (/ 1/ )/ LA/ -/ TreeAgrawal/ 等/ 人/ [/ 21/ ]/ 提出/ 了/ 一种/ 基于/ 树/ 的/ 索引/ 结构/ —/ —/ —/ LA/ -/ Tree/ ./ LA/ -/ Tree/ 以/ 树根/ 为/ 起点/ ,/ 逻辑/ 上将/ 树/ 划分/ 为/ 一系列/ 高度/ 相同/ 的/ 子树/ ,/ 每/ 一棵/ 子树/ 在/ 内存/ 都/ 有/ 专用/ 的/ 缓冲区/ 用于/ 记录/ 对/ 该子/ 树/ 所有/ 结点/ 的/ 更新/ ./ 执行/ 查询/ 操作/ 时/ ,/ LA/ -/ Tree/ 检查/ 结点/ 所在/ 子树/ 的/ 专用/ 缓冲区/ 是否/ 满足/ 设定/ 的/ 更新/ 条件/ ,/ 若/ 满足/ 则/ 清空/ 缓冲区/ 并/ 对/ 该子/ 树/ 以及/ 与/ 它/ 关联/ 的/ 后代/ 子树/ 进行/ 批量/ 更新/ ./ LA/ -/ Tree/ 优化/ 了/ 对/ 闪存/ 的/ 写/ 操作/ ,/ 缺点/ 是/ 对/ 每/ 一子/ 树/ 都/ 需要/ 维护/ 特定/ 的/ 内存空间/ ,/ 这/ 增加/ 了/ 缓冲区/ 管理/ 的/ 复杂性/ ./ (/ 2/ )/ Lazy/ -/ UpdateB/ +/ -/ Tree/ 文献/ [/ 22/ ]/ 提出/ 的/ Lazy/ -/ UpdateB/ +/ -/ Tree/ 将/ 缓冲区/ 划分/ 为/ 两/ 部分/ ,/ 一部分/ 用于/ 缓存/ B/ +/ -/ Tree/ 结点/ ,/ 另/ 一部分/ 缓存/ 对/ B/ +/ -/ Tree/ 相应/ 结点/ 的/ 更新/ 请求/ (/ 更新/ 缓冲/ 池/ )/ ./ 更新/ 缓冲/ 池用/ 十字/ 链表/ 结构/ 组织/ 数据/ ,/ 结点/ 结构/ 为/ {/ key/ ,/ recptr/ ,/ type/ }/ ,/ 其中/ key/ 存储/ 元组/ 的/ 主键/ ,/ recptr/ 指针/ 指向/ 被/ 更新/ 的/ 元组/ 的/ 地址/ ,/ recptr/ 为/ null/ 代表/ 该/ 元组/ 被/ 删除/ ,/ type/ 表示/ 更新/ 操作/ 的/ 类型/ (/ 删除/ 、/ 插入/ 和/ 修改/ )/ ./ Lazy/ -/ UpdateB/ +/ -/ Tree/ 把/ 对/ 同一/ 结点/ 的/ 更新/ 请求/ 聚集/ 成/ 一个/ 序列/ ,/ 聚集/ 可以/ 消除/ 对/ B/ +/ -/ Tree/ 结点/ 冗余/ 的/ 更新/ 操作/ ,/ 进而/ 减少/ 索引/ 更新/ 的/ 写/ 代价/ ./ 更新/ 缓冲/ 池/ 被/ 填满/ 后/ ,/ 代价/ 最小/ 的/ 序列/ 被/ 更新/ ,/ 更新/ 代价/ 由/ gain/ (/ g/ )/ =/ cost/ (/ R/ )/ +/ cost/ (/ R/ )/ -/ cost/ (/ R/ ∪/ R/ )/ 来/ 衡量/ ,/ R/ 表示/ 序列/ g/ 当前/ 更新/ 请求/ ,/ R/ 表示/ 延时/ g/ 到/ t/ 时刻/ 时/ 的/ 更新/ 请求/ ,/ cost/ (/ R/ )/ 和/ cost/ (/ R/ )/ 代表/ 在/ 当前/ 时刻/ 和/ t/ 时刻/ 两次/ 单独/ 提交/ g/ 的/ 写/ 代价/ ./ cost/ (/ R/ ∪/ R/ )/ 则/ 是/ 聚集/ 到/ t/ 时刻/ 批量/ 提交/ 的/ 代价/ ./ 简单/ 地说/ ,/ 代价/ 最小/ 指/ 的/ 就是/ 某一/ 索引/ 结点/ 更新/ 引发/ B/ +/ -/ Tree/ 结点/ 分裂/ 或/ 合并/ 的/ 数量/ 最少/ ./ (/ 3/ )/ UM/ -/ B/ +/ -/ tree/ 文献/ [/ 23/ ]/ 提出/ 了/ 一种/ 基于/ B/ +/ -/ tree/ 的/ 索引/ 结构/ —/ —/ —/ UM/ -/ B/ +/ -/ tree/ ./ UM/ -/ B/ +/ -/ tree/ 把/ 索引/ 结点/ 分成/ 数据/ 区/ 和/ 更新/ 区/ ,/ 数据/ 区/ 存储/ 记录/ 的/ 键值/ 和/ 地址/ ,/ 更新/ 区/ 存储/ 对/ 该/ 结点/ 的/ 更新/ 记录/ ./ 如果/ 索引/ 结点/ 需要/ 被/ 换/ 出/ 内存/ ,/ 对/ 该/ 结点/ 的/ 全部/ 更新/ 记录/ 都/ 将/ 迁移/ 到父/ 结点/ 暂存/ ,/ 当/ 结点/ 再次/ 读入/ 内存/ ,/ 暂/ 存在/ 父/ 结点/ 的/ 更新/ 记录/ 将/ 与/ 原/ 数据/ 合并/ 产生/ 版本/ 数据/ ./ 当/ 更新/ 记录/ 达到/ 设定/ 的/ 阈值/ ,/ 新/ 数据/ 将/ 被/ 写入/ 闪存/ ./ UM/ -/ B/ +/ -/ tree/ 结点/ 更新过程/ 见图/ 6/ ./ 举例说明/ ,/ 图/ 6/ 中/ 结点/ A/ 和/ B/ 读入/ 内存/ 并/ 分别/ 执行/ 一次/ 插入/ 和/ 删除/ 操作/ ,/ 更新/ 记录/ 保存/ 在/ 各自/ 的/ 更新/ 区/ ,/ 换/ 出/ 内存/ 时/ A/ 和/ B/ 将/ 更新/ 记录/ 上移/ 至/ 各自/ 的/ 父/ 结点/ ./ UM/ -/ B/ +/ -/ tree/ 通过/ 暂存/ 更新/ 记录/ 的/ 方式/ 延迟/ 对/ 闪存/ 的/ 更新/ ,/ 一定/ 程度/ 上/ 减少/ 了/ 对/ 闪存/ 的/ 写/ 次数/ ,/ 但/ 每个/ 结点/ 都/ 需要/ 预留/ 保存/ 更新/ 记录/ 的/ 区域/ ,/ 空间/ 利用率/ 相对/ 较/ 低/ ./ 延迟/ 更新/ 是/ 牺牲/ 读/ 代价/ 来/ 换取/ 写/ 代价/ 的/ ,/ 这/ 对/ 数据/ 查询/ 、/ 事务/ 恢复/ 及/ 并发/ 控制/ 等/ 会/ 有/ 一定/ 程度/ 的/ 影响/ ./ 3.3/ ./ 2/ 索引/ 结构/ 优化/ 优化/ 索引/ 结构/ 是/ 提高/ 索引/ 性能/ 的/ 另/ 一种/ 有效途径/ ./ 结构/ 优化/ 不仅/ 可以/ 降低/ 索引/ 更新/ 代价/ ,/ 还/ 可以/ 提高/ 数据/ 查询/ 效率/ ./ (/ 1/ )/ μ/ -/ Tree/ 闪存/ 异位/ 更新/ 会/ 引发/ B/ +/ -/ Tree/ 索引/ 在/ 闪存/ 上/ 代价/ 昂贵/ 的/ 级联/ 更新/ ./ 所谓/ 级联/ 更新/ 指/ 的/ 是/ 任何/ 一/ 索引/ 结点/ 的/ 更新/ 可能/ 都/ 会/ 导致/ 根/ 结点/ 到/ 该/ 结点/ 路径/ 上/ 所有/ 结点/ 的/ 更新/ ./ 级联/ 更新/ 会/ 产生/ 大量/ 的/ 随机/ 写/ 操作/ ,/ 严重/ 影响/ 索引/ 性能/ ./ μ/ -/ Tree/ 索引/ [/ 24/ ]/ 将/ 根到/ 目标/ 结点/ 路径/ 上/ 的/ 所有/ 结点/ 存储/ 在/ 同一/ 闪存/ 块/ ,/ 数据/ 更新/ 产生/ 的/ 新/ 路径/ 将/ 被/ 存储/ 在/ 新/ 的/ 闪存/ 块/ ,/ 旧块/ 中/ Page8/ 原/ 路径/ 结点/ 无效/ ./ μ/ -/ Tree/ 结点/ 大小/ 由/ 闪存/ 页面/ 大小/ 和/ 结点/ 所在/ 层次/ 决定/ ./ μ/ -/ Tree/ 结点/ 更新过程/ 见图/ 7/ ./ 举例说明/ ,/ 结点/ F/ 发生/ 更新/ 操作/ ,/ 新/ 路径/ A/ 到/ F/ 的/ 所有/ 结点/ 存储/ 在/ 新/ 数据/ 块/ ,/ 原来/ 的/ 路径/ 结点/ (/ A/ ,/ C/ ,/ F/ )/ 无效/ ./ μ/ -/ Tree/ 每次/ 数据/ 更新/ 都/ 发生/ 在/ 同一/ 闪存/ 块/ ,/ 这/ 有利于/ 降低/ 随机/ 写/ 操作/ 代价/ ,/ 但/ 这种/ 方式/ 也/ 会/ 导致/ 闪存/ 内/ 出现/ 许多/ 无效/ 结点/ ,/ 空间/ 利用率/ 低/ ,/ 需要/ 不断/ 地/ 进行/ 垃圾/ 回收/ ,/ μ/ -/ Tree/ 结构/ 无法/ 支持/ 范围/ 查询/ ./ (/ 2/ )/ MicroHashMicroHash/ [/ 25/ ]/ 是/ 一种/ 基于/ Hash/ 的/ 闪存/ 索引/ 结构/ ./ MicroHash/ 在/ 内存/ 维护/ 一个/ 能/ 有效/ 存取/ 闪存/ 数据/ 的/ 数据结构/ ,/ 闪存/ 中/ 的/ 记录/ 以/ 循环/ 数组/ 方式/ 被/ 组织/ 成堆/ 结构/ ,/ 内容/ 包括/ 目录/ 和/ 索引/ 页/ ./ 每个/ 目录/ 包含/ 一表/ 4/ 闪存/ 数据库/ 索引/ 性能/ 对比/ 分析/ Lazy/ -/ UpdateB/ +/ -/ Tree/ [/ 22/ ]/ B/ +/ -/ Tree/ 通用/ 数据库系统/ 优点/ :/ 冗余/ 更新/ 少/ ,/ 优化/ 闪存/ 的/ 写/ 操作/ B/ +/ -/ Tree/ 通用/ 数据库系统/ 优点/ :/ 级联/ 更新/ 代价/ 低/ MicroHash/ [/ 25/ ]/ Hash/ +/ Queue/ 传感器/ 数据处理/ 优点/ :/ 结构/ 相对/ 简单/ 、/ 维护/ 代价/ 少/ 3.4/ 查询处理/ 查询处理/ 是/ 数据库系统/ 最/ 重要/ 的/ 任务/ 之一/ ./ 为了/ 提高/ 系统/ 性能/ ,/ 对/ 查询处理/ 进行/ 优化/ 非常/ 必要/ ./ 在/ 基于/ 磁盘/ 的/ 数据库系统/ 中/ ,/ 已有/ 的/ 查询/ 优化/ 技术/ 主要/ 考虑/ 磁盘/ I/ // O/ 代价/ 对/ 查询处理/ 的/ 影响/ ./ 比如/ 在/ 处理/ 多表/ 连接/ 时/ ,/ 许多/ 连接/ 算法/ 采用/ 块级/ I/ // O/ 访问/ 来/ 减少/ 磁盘/ 寻/ 道/ 时间/ ,/ 降低/ 磁盘/ I/ // O/ 数量/ ./ 避免/ 或/ 降低/ 对/ 磁盘/ 的/ 随机/ 访问/ 是/ 众多/ 经典/ 查询/ 优化/ 算法/ 考虑/ 的/ 一个/ 通用/ 原则/ ./ 闪存/ 与/ 磁盘/ 的/ I/ // O/ 特性/ 不同/ ,/ 传统/ 的/ 查询/ 优化/ 技术/ 是否/ 能够/ 发挥/ 闪存/ 的/ 存储/ 特性/ 便/ 系列/ 的/ 桶/ ,/ 每个/ 桶/ 存放/ 映射/ 到/ 该/ 桶/ 的/ 最新/ 索引/ 页/ 地址/ ,/ 每个/ 索引/ 页/ 存放数据/ 记录/ 的/ 地址/ ,/ 这些/ 页/ 存放/ 在/ 闪存/ 上/ ,/ 仅/ 当/ 被/ 请求/ 时才/ 调入/ 内存/ ./ MicroHash/ 适合/ 小/ 容量/ 的/ 闪存/ 设备/ ,/ 在/ 较/ 小/ 内存/ 开销/ 的/ 情况/ 下/ 实现/ 了/ 对/ 闪存/ 友好/ 的/ 写/ 操作/ ./ 文献/ [/ 26/ ]/ 也/ 提出/ 了/ 一种/ 基于/ 闪存/ 的/ 新/ 索引/ 结构/ —/ —/ —/ HashTree/ ./ HashTree/ 混合/ 了/ 散列/ 和/ 树/ 两种/ 索引/ 结构/ ./ 它/ 选择/ 合适/ 的/ Hash/ 函数/ 将/ 数据/ 均匀/ 的/ 散列/ 到/ 不同/ 的/ 桶/ 中/ ,/ 其中/ Hash/ 表/ 驻留/ 内存/ ,/ 每/ 一个/ Hash/ 桶/ 存储/ 在/ 闪存/ ,/ 每个/ 桶/ 中/ 的/ 数据/ 采用/ 类似/ 于/ FD/ -/ Tree/ [/ 27/ ]/ 树形/ 结构/ 进行/ 组织/ ./ HashTree/ 将/ 树以/ Hash/ 桶/ 为/ 单位/ 划分/ 成/ 有序/ 的/ 子树/ ,/ 有效/ 减少/ 了/ 树/ 结点/ 级联/ 更新/ 的/ 代价/ ./ (/ 3/ )/ PBFilterPBFilter/ [/ 28/ ]/ 是/ 基于/ 医疗/ 领域/ 数据/ 特点/ 设计/ 的/ 一种/ 高效/ 索引/ 结构/ ./ 医疗/ USB/ 卡/ 记录/ 一般/ 都/ 是/ 插入/ 和/ 查询/ 操作/ ,/ 很少/ 存在/ 删除/ 和/ 更新/ ./ PBFilter/ 按照/ 时间/ 顺序/ 将/ 记录/ 写入/ 闪存/ ,/ 并/ 为/ 这些/ 记录/ 建立/ (/ Key/ ,/ Value/ )/ 索引/ 项/ ./ 因为/ 索引/ 项是/ 无序/ 存放/ 的/ ,/ 为了/ 提高/ 查询/ 效率/ ,/ PBFilter/ 对/ key/ 值/ 建立/ BloomFilter/ 索引/ ./ 查找/ 记录/ 时/ ,/ 通过/ 查找/ BloomFilter/ 获取/ 所/ 需/ 记录/ ./ BloomFilter/ 所需/ 空间/ 比/ 索引/ 项要/ 小得多/ ,/ 相比/ 于/ 其它/ 索引/ 结构/ ,/ PBFilter/ 具有/ 更加/ 优秀/ 的/ 随机/ 查询/ 能力/ ./ 表/ 4/ 列出/ 了/ 几种/ 典型/ 的/ 闪存/ 数据库/ 索引/ ./ 缺点/ :/ 查询/ 性能/ 低/ 、/ 传播/ 代价/ 高/ 缺点/ :/ 结构复杂/ ,/ 维护/ 代价/ 高/ ,/ 不利于/ 数据恢复/ 缺点/ :/ 存储/ 太/ 多/ 冗余/ 数据/ ,/ 空间/ 利用率/ 低/ ,/ 无法/ 进行/ 范围/ 查询/ 缺点/ :/ 只能/ 适用/ 于/ 小/ 容量/ 闪存/ (/ 传感器/ )/ 缺点/ :/ 不/ 支持/ 范围/ 查询/ 、/ 只能/ 应用/ 于/ 特定/ 领域/ 成为/ 闪存/ 数据库系统/ 需要/ 考虑/ 的/ 一个/ 重要/ 问题/ ./ 文献/ [/ 29/ ]/ 用/ 固态/ 硬盘/ 替换/ 磁盘/ 对/ 循环/ 嵌套/ 、/ 排序/ -/ 合并/ 、/ GraceHash/ 和/ 混合/ Hash/ 等/ 连接/ 算法/ 进行/ 了/ 性能/ 测试/ ./ 实验/ 结果表明/ 这/ 4/ 种/ 连接/ 操作/ 的/ 执行/ 时间/ 均/ 低于/ 在/ 磁盘/ 上/ 执行/ 的/ 时间/ ,/ 但/ 性能/ 提升/ 的/ 幅度/ 却/ 不足/ 2/ 倍/ ./ 分析/ 算法/ 特征/ 和/ 实验/ 结果/ ,/ 我们/ 认为/ 现有/ 连接/ 算法/ 在/ 查询处理/ 过程/ 中/ 引发/ 的/ I/ // O/ 操作/ 不/ 适合/ 闪存/ 的/ 存储/ 特性/ ,/ 闪存/ 优良/ 的/ 随机/ 读/ 性能/ 没有/ 得到/ 充分/ 的/ 发挥/ ./ 具体表现/ 在/ 两/ 方面/ :/ (/ 1/ )/ 传统/ 连接/ 算法/ 需要/ 保存/ 大量/ 中间/ 结果/ 而/ 产生/ 较/ 多/ 的/ 写/ 操作/ ,/ 频/ Page9/ 繁/ 的/ 写/ 操作/ 会/ 使/ 查询/ 性能/ 急剧/ 恶化/ ;/ (/ 2/ )/ 传统/ 算法/ 着重/ 考虑/ 磁盘/ I/ // O/ 代价/ 对/ 查询/ 性能/ 的/ 影响/ ,/ 很少/ 考虑/ CPU/ 代价/ 因素/ ,/ 对于/ 固态/ 硬盘/ 来说/ ,/ 读写/ 数据/ 需要/ 通过/ 闪存/ 转换/ 层/ 完成/ 地址/ 转换/ ,/ 所以/ 耗费/ CPU/ 资源/ 比/ 磁盘/ 相对/ 要/ 高/ ,/ CPU/ 代价/ 在/ 某种程度/ 上/ 制约/ 了/ 连接/ 性能/ 的/ 进一步/ 提升/ ./ 文献/ [/ 29/ ]/ 还/ 测试/ 了/ 闪存/ I/ // O/ 大小/ 对/ 连接/ 性能/ 的/ 影响/ ,/ 实验/ 表明/ 块级/ I/ // O/ 访问/ 有利于/ 提高/ 查询/ 性能/ ,/ 大块/ 的/ 数据/ 请求/ 可以/ 充分利用/ 固态/ 硬盘/ 实时/ 的/ 空闲/ 通道/ ,/ 通过/ 发挥/ 固态/ 硬盘/ 内部/ 并行/ 读写/ 机制/ 来/ 提高/ 性能/ ./ 文献/ [/ 30/ ]/ 基于/ PostgreSQL/ 数据库系统/ 对/ 查询/ 性能/ 进行/ 了/ 对比/ 评测/ ./ 与/ 磁盘/ 相比/ ,/ 固态/ 硬盘/ 存储/ 环境/ 下/ 单点/ 查询/ 性能/ 最高/ 有近/ 50/ 倍/ 的/ 提升/ ,/ 但/ 不同/ 扫描/ 操作符/ 性能/ 提升/ 的/ 幅度/ 差距/ 比较/ 大/ ./ 在/ 查询/ 选择率/ 较/ 低/ 的/ 情况/ 下/ ,/ 索引/ 扫描/ 因为/ 充分发挥/ 了/ 固态/ 硬盘/ 良好/ 的/ 随机/ 读/ 性能/ ,/ 性能/ 表现/ 最为/ 突出/ ./ 多表/ 连接/ 操作/ 在/ 固态/ 硬盘/ 上/ 的/ 性能/ 差异/ 也/ 比较/ 大/ ,/ 以/ 循环/ 嵌套/ 连接/ 为例/ ,/ 如果/ 对大表/ 进行/ 索引/ 扫描/ ,/ 查询/ 性能/ 提升/ 的/ 幅度/ 较/ 明显/ ,/ 这/ 是因为/ 大表/ 元组/ 多/ ,/ 内存/ 命中率/ 低/ ,/ 需要/ 更多地/ 随机/ 读/ 操作/ ./ Hash/ 连接/ 算法/ 因为/ 需要/ 更/ 多/ 的/ 随机/ 访问/ ,/ 所以/ 在/ 固态/ 硬盘/ 上/ 性能/ 提升/ 较大/ ,/ 但/ 与/ 其它/ 连接/ 算法/ 相比/ ,/ 需要/ 的/ 查询/ 执行/ 时间/ 最/ 多/ ,/ 这/ 主要/ 是因为/ 对/ 元组/ 进行/ Hash/ 分桶/ 会/ 触发/ 许多/ 随机/ 写/ 操作/ ,/ 而/ 随机/ 写/ 操作/ 是/ 闪存/ 最/ 不/ 擅长/ 的/ 一种/ 访问/ 模式/ ./ 从/ 已有/ 的/ 测试/ 结果/ 不难看出/ ,/ 适用/ 于/ 磁盘/ 的/ 经典/ 连接/ 算法/ 在/ 固态/ 硬盘/ 上/ 的/ 性能/ 表现/ 并/ 不/ 突出/ ./ 因此/ ,/ 现有/ 查询/ 优化/ 算法/ 必须/ 针对/ 闪存/ 独有/ 的/ I/ // O/ 特性/ 重新/ 设计/ ./ 目前/ 研究者/ 主要/ 从/ 代价/ 模型/ 修改/ 和/ 优化/ 查询/ 连接/ 算法/ 两个/ 角度/ 展开/ 研究/ ./ 3.4/ ./ 1/ 查询/ 代价/ 模型/ 数据库系统/ 结构设计/ 和/ 算法/ 优化/ 与/ 存储介质/ 的/ I/ // O/ 特性/ 紧密/ 相关/ ,/ 在/ 查询/ 规划/ 过程/ 中/ ,/ 不同/ 的/ 查询/ 生成/ 树/ 通过/ 代价/ 模型/ 对/ 相应/ 的/ 查询/ 路径/ 进行/ 估算/ ,/ 代价/ 最小/ 的/ 执行/ 方案/ 将/ 被/ 转换成/ 最终/ 查询/ 计划/ 并/ 由/ 执行器/ 执行/ ./ 查询/ 路径/ 的/ 代价/ 估计/ 主要/ 考虑/ CPU/ 代价/ 和/ 磁盘/ I/ // O/ 代价/ ./ 比如/ ,/ PostgreSQL/ 数据库系统/ 的/ 代价/ 模型/ 将/ 顺序/ 存取/ 一个/ 磁盘/ 页/ 的/ 代价/ 作为/ 基本/ 单位/ (/ 取值/ 为/ 1/ )/ ,/ 随机存取/ 操作/ 的/ 代价/ 取值/ 为/ 4/ ./ 查询/ 优化/ 算法/ 在/ 代价/ 评估/ 和/ 生成/ 查询/ 计划/ 树/ 等/ 环节/ 只/ 区分/ 磁盘/ 顺序/ 和/ 随机/ 操作/ 代价/ ,/ 多/ 采用/ 排序/ 、/ 延迟/ 物化/ 等/ 手段/ 减少/ 对/ 磁盘/ 的/ 随机/ I/ // O/ 访问/ ./ 闪存/ 的/ 随机/ 读/ 操作/ 与/ 顺序/ 读/ 操作/ 性能/ 相差/ 不/ 大/ ,/ 将/ 现有/ 的/ 代价/ 估计/ 模型/ 运用/ 于/ 闪存/ 数据库系统/ 可能/ 会/ 影响/ 最优/ 查询/ 计划/ 的/ 生成/ ./ 因此/ ,/ 针对/ 闪存/ 特有/ 的/ I/ // O/ 特性/ 对/ 现有/ 代价/ 模型/ 进行/ 优化/ 可以/ 提高/ 查询/ 代价/ 估计/ 的/ 准确性/ ,/ 进而/ 提升/ 数据库/ 的/ 查询/ 性能/ ./ 文献/ [/ 31/ ]/ 基于/ PostgreSQL/ 提出/ 了/ 一个/ 适用/ 于/ 闪存/ 的/ 代价/ 评估/ 模型/ ./ 新/ 的/ 代价/ 模型/ 区分/ 读写操作/ ,/ I/ // O/ 代价/ 参数设置/ 为/ 顺序/ 读/ 操作/ 、/ 顺序/ 写/ 操作/ 、/ 随机/ 读/ 操作/ 和/ 随机/ 写/ 操作/ 等/ 4/ 种/ ./ 扫描/ 操作/ 代价/ 估计/ 只/ 区分/ 顺序/ 读/ 和/ 随机/ 读/ ,/ 物化/ 操作/ 则/ 只/ 对/ 顺序/ 写/ 和/ 随机/ 写/ 进行/ 分别/ 处理/ ./ 通过/ 分析/ 排序/ 连接/ 和/ Hash/ 连接/ 等/ 操作/ 产生/ 的/ I/ // O/ 访问/ 序列/ ,/ 新/ 模型/ 将/ 原有/ 模型/ 的/ 读写/ 代价/ 比/ 进行/ 了/ 调整/ ./ 针对/ 连接/ 过程/ 中/ 读写操作/ 混合/ 的/ 情况/ ,/ 新/ 模型/ 通过/ 一个/ 启发式/ 迭代/ 校正/ 算法/ 适时地/ 对/ 代价/ 参数/ 进行/ 调整/ ./ 该/ 文献/ 将/ 新/ 的/ 代价/ 模型/ 应用/ 于/ PostgreSQL/ 并/ 进行/ 了/ TPC/ -/ H/ 测试/ ,/ TPC/ -/ H22/ 个/ 查询/ 的/ 执行/ 时间/ 大部分/ 都/ 有所/ 减少/ ,/ 平均/ 性能/ 提高/ 48/ %/ ,/ 部分/ 查询/ 性能/ 有/ 5/ 倍/ 的/ 提高/ ,/ 个别/ 查询/ 的/ 执行/ 时间/ 有/ 略微/ 增加/ ./ 结合/ 闪存/ 的/ 读写/ 特性/ ,/ 设计/ 适合/ 闪存/ 的/ 代价/ 评估/ 模型/ 是/ 提高/ 查询/ 性能/ 的/ 一个/ 有效途径/ ./ 3.4/ ./ 2/ 优化/ 查询/ 连接/ 算法/ (/ 1/ )/ RARE/ -/ join/ 连接/ 查询/ 通常/ 只/ 需要/ 输出/ 连接/ 表/ 的/ 部分/ 属性/ 列/ ,/ Ailamaki/ 等/ 人/ [/ 32/ ]/ 为了/ 避免/ 读取/ 与/ 查询/ 不/ 相关/ 的/ 属性/ 列/ ,/ 提出/ 了/ 一种/ 新/ 的/ 存储/ 模型/ PAX/ ./ 每/ 一个/ PAX/ 数据/ 页/ 存储/ 一定/ 数量/ 的/ 元组/ ,/ 数据/ 页/ 按/ 元组/ 属性/ 列/ 紧凑/ 堆放/ ,/ 这种/ 存储/ 模型/ 兼有/ 按行/ 存储/ 和/ 按列/ 存储/ 的/ 优点/ ./ 文献/ [/ 33/ -/ 34/ ]/ 基于/ PAX/ 提出/ RARE/ -/ join/ 连接/ 算法/ ,/ RARE/ -/ join/ 首先/ 根据/ 连接/ 条件/ 创建/ 一个/ 连接/ 结果/ 表/ ,/ 元组/ 结构/ 为/ {/ id1/ ,/ id2/ ,/ …/ ,/ idi/ ,/ …/ }/ ,/ 其中/ idi/ 表示/ 第/ i/ 张表/ 某/ 一元/ 组/ 的/ 存储/ 地址/ ;/ 然后/ 为/ 存储/ 在/ 结果/ 表中/ 的/ 元组/ 地址/ 构建/ 索引/ ,/ 根据/ 索引/ 从/ 原表中/ 读取数据/ 并/ 生成/ 查询/ 结果/ ./ RARE/ -/ join/ 只/ 选择/ 与/ 查询/ 结果/ 相关/ 的/ 属性/ 列/ ,/ 这/ 减少/ 了/ 数据/ 的/ 读取/ 量/ ,/ 避免/ 了/ 大量/ 中间/ 结果/ 的/ 生成/ ,/ 物化/ 过程/ 放在/ 查询/ 的/ 最后/ 阶段/ ,/ 闪存/ 的/ 写/ 操作/ 比较/ 少/ ./ RARE/ -/ join/ 存在/ 的/ 主要/ 问题/ 是/ 维护/ 底层/ PAX/ 存储/ 和/ 索引/ 的/ 代价/ 较大/ ./ (/ 2/ )/ DigestJoin/ 为了/ 减少/ 排序/ -/ 合并/ 等/ 连接/ 算法/ 产生/ 的/ 中间/ 结果/ ,/ Li/ 等/ 人/ [/ 35/ ]/ 提出/ 针对/ 闪存/ 特性/ 的/ DigestJoin/ 查询/ 优化/ 算法/ ./ DigestJoin/ 算法/ 将/ 查询/ 过程/ 分为/ 两个/ 阶段/ :/ 第/ 1/ 阶段/ 抽取/ 待/ 连接/ 表/ 元组/ 的/ 键值/ 和/ 连接/ 属性/ 构建/ Digest/ 表/ ,/ 由/ Digest/ 表/ 根据/ 连接/ 属性/ 通过/ 排序/ 或者/ Hash/ 的/ 方式/ 连接/ 产生/ 结果/ 表/ ,/ 结果/ 表/ 存储/ 与/ 查询/ 结果/ 相关联/ 的/ 元组/ 在/ 原始/ 表中/ 的/ 地址/ ;/ 第/ 2/ 阶段/ 是/ 实体化/ 查询/ 结果/ ,/ 根据/ 结果/ 表/ 记录/ 的/ 元组/ 地址/ 从/ 闪存/ 读取/ 原始/ 表/ 的/ 相关/ 属性/ 列/ 生成/ 最终/ 的/ 查询/ 结果/ ./ 实体化/ 过程/ 需要/ 大量/ 的/ 随机/ 读/ 操作/ ,/ 这是/ 影响/ 查/ Page10/ 询/ 性能/ 的/ 关键因素/ ./ 为了/ 尽量避免/ 反复/ 读取/ 某一/ 数据/ 页/ ,/ DigestJoin/ 通过/ 构建/ 数据/ 页/ 之间/ 的/ 连接/ 关系/ 图对/ 实体化/ 的/ 过程/ 进行/ 了/ 优化/ ,/ 有效/ 解决/ 了/ 反复/ 读取/ 同一/ 数据/ 页/ 产生/ 的/ 内存/ 抖动/ 问题/ ./ (/ 3/ )/ Sub/ -/ Join/ 文献/ [/ 36/ ]/ 提出/ 的/ Sub/ -/ Join/ 算法/ 首先/ 将/ 执行/ 连接/ 操作/ 的/ 相关/ 数据表/ 在/ 主键/ 和/ 连接/ 列/ 上/ 进行/ 投影/ ,/ 根据/ 连接/ 列/ 进行/ 排序/ 形成/ 连接子/ 表/ ;/ 然后/ 在/ 子表/ 上/ 进行/ 连接/ 操作/ ,/ 连接/ 过程/ 需要/ 的/ 其它/ 结果/ 数据/ 由/ 原始/ 表回取/ 获得/ ./ Sub/ -/ Join/ 对子/ 表/ 采用/ 基于/ 列/ 的/ 存储/ 形式/ ,/ 闪存/ 随机/ 读/ 操作/ 相对/ 较少/ ./ Myers/ [/ 37/ ]/ 提出/ 基于/ 闪存/ 的/ 排序/ -/ 合并/ 连接/ 算法/ ./ 表/ 5/ 闪存/ 数据库/ 连接/ 算法/ 性能/ 对比/ 分析/ 连接/ 算法/ 连接/ 类型/ RARE/ -/ Join/ [/ 33/ ]/ 索引/ 连接/ 对/ 连接/ 列/ 构建/ 索引/ ,/ 充分发挥/ PAX/ 列/ 存储/ 和/ 闪存/ DigestJoin/ [/ 35/ ]/ 排序/ -/ 合并/ 避免/ 生成/ 大量/ 的/ 中间/ 结果/ ,/ 连接/ 过程/ 中/ 闪存/ 写操/ Sub/ -/ Join/ [/ 36/ ]/ 循环/ 嵌套/ 按列/ 存储/ 连接子/ 表/ ,/ 数据/ 的/ 读取/ 快/ Subset/ [/ 37/ ]/ 排序/ -/ 合并/ 大幅/ 降低/ 了/ 对/ 闪存/ 的/ 写/ 操作/ ,/ 充分利用/ 闪存/ 的/ 高/ 3.4/ ./ 3/ 实验/ 对比/ 为了/ 对比/ 固态/ 硬盘/ 环境/ 下/ 查询处理/ 的/ 性能/ ,/ 我们/ 分别/ 对/ 传统/ Hash/ 连接/ 、/ DigestJoin/ [/ 35/ ]/ 和/ Sub/ -/ Join/ [/ 36/ ]/ 3/ 种/ 连接/ 算法/ 进行/ 了/ 实验/ 比较/ ./ 实验/ 平台/ 配置/ :/ IntelCorei5/ -/ 2400/ @/ 3.10/ GHz/ 处理器/ ,/ 内存/ 8GB/ ,/ 操作系统/ 是/ Ubuntu12/ ./ 10/ ,/ 数据/ 集/ 采用/ TPC/ -/ H/ 的/ CUS/ -/ TOMER/ 表/ 和/ ORDERS/ 表并/ 做/ 等值/ 连接/ ,/ 其中/ CUSTOMER/ 由/ 150/ 万条/ 记录/ 组成/ ,/ 大小/ 为/ 256MB/ ,/ ORDERS/ 表由/ 1.5/ 亿条/ 记录/ 组成/ ,/ 大小/ 为/ 2GB/ ./ 实验/ 测试/ 了/ 选择率/ 和/ 缓冲区/ 大小/ 对/ 连接/ 算法/ 的/ 影响/ ./ (/ 1/ )/ 选择率/ ./ 选择率/ 反映/ 了/ 结果/ 数据/ 的/ 规模/ ,/ 选择率/ 越大/ 生成/ 的/ 结果/ 数据/ 越/ 多/ ,/ 许多/ 查询/ 连接/ 算法/ 都/ 通过/ 变化/ 选择率/ 来/ 评估/ 查询/ 性能/ ./ 对比/ 实验/ 中/ 选择率/ 的/ 取值/ 为/ 0.01/ %/ ~/ 10/ %/ ./ 可用内存/ 是/ 8MB/ ,/ 图/ 8/ (/ a/ )/ 描述/ 了/ 不同/ 选择率/ 下/ 的/ 查询/ 执行/ 时间/ ./ 从/ 实验/ 结果/ 可以/ 看出/ ,/ 当/ 选择率/ 低于/ 0.1/ %/ 时/ ,/ Digest/ -/ Join/ 和/ Sub/ -/ Join/ 的/ 性能/ 优于/ HashJoin/ ./ 随着/ 选择率/ 的/ 增大/ ,/ DigestJoin/ 和/ Sub/ -/ Join/ 因为/ 需要/ 保存/ 更/ 多/ 的/ 中间/ 结果/ ,/ 查询/ 执行/ 时间/ 增长幅度/ 比较/ 大/ ./ Sub/ -/ Join/ 因为/ 对子/ 表/ 采用/ 基于/ 列/ 的/ 存储/ ,/ 在/ 一定/ 程度/ 上/ 减少/ 了/ 对/ SSD/ 的/ 写/ 操作/ ,/ 其/ 查询/ 性能/ 略/ 优于/ DigestJoin/ ;/ (/ 2/ )/ 缓冲区/ ./ 缓冲区/ 大小/ 是/ 影响/ 查询/ 连接/ 性能/ 的/ 重要/ 因素/ ,/ 图/ 8/ (/ b/ )/ 描述/ 了/ 不同/ 缓冲区/ 大小/ 下/ 3/ 种/ 排序/ -/ 合并/ 算法/ 通常/ 先/ 将/ 连接/ 表/ 读入/ 内存/ 并/ 分段/ 排序/ ,/ 然后/ 将/ 排序/ 后/ 的/ 元组/ 写回/ 磁盘/ 形成/ 有序/ 片段/ ./ Myers/ 针对/ 闪存/ 写/ 性能/ 相对/ 较差/ 和/ 寿命/ 有限/ 的/ 特点/ 对/ 中间/ 结果/ 的/ 存取/ 过程/ 进行/ 了/ 优化/ ,/ 只/ 将/ 连接/ 列/ 写入/ 闪存/ ,/ 在/ 排序/ 结束/ 后/ ,/ 再/ 从/ 原始/ 表/ 获取/ 其它/ 数据/ ,/ 完成/ 最初/ 的/ 排序/ 过程/ ./ 闪存/ 不/ 对称/ 的/ 读写/ 代价/ 是/ 影响/ 闪存/ 数据库/ 查询/ 性能/ 的/ 关键因素/ ./ 设计/ 基于/ 闪存/ 的/ 查询/ 优化/ 策略/ 时/ 必须/ 尽量减少/ 写/ 操作/ 尤其/ 是/ 随机/ 写/ 操作/ ,/ 同时/ 应/ 充分利用/ 闪存/ 很/ 好/ 的/ 随机/ 读/ 性能/ ,/ 牺牲/ 读/ 代价/ 以/ 降低/ 写/ 代价/ 是/ 提高/ 查询/ 性能/ 的/ 有效/ 手段/ ./ 表/ 5/ 列出/ 了/ 几种/ 典型/ 的/ 闪存/ 数据库/ 连接/ 算法/ ./ 连接/ 算法/ 的/ 性能/ ./ DigestJoin/ 受/ 缓冲区/ 大小/ 的/ 影响/ 比较/ 明显/ ,/ 在/ 缓冲区/ 大小/ 超过/ 16MB/ 后/ ,/ 查询/ 连接/ 性能/ 提升/ 幅度/ 较大/ ./ Sub/ -/ Join/ 基于/ 循环/ 嵌套/ 连接/ 算法/ ,/ 在/ 生成/ 连接子/ 表时/ 对/ 内存大小/ 要求/ 较/ 低/ ,/ 在/ 缓存/ Page11/ 区较/ 小/ 的/ 情况/ 下/ ,/ 查询/ 性能/ 胜过/ DigestJoin/ ./ 3.5/ 事务/ 恢复/ 事务/ 恢复/ 机制/ 用于/ 保障系统/ 发生/ 异常/ 时/ 将/ 数据库系统/ 恢复/ 到/ 之前/ 的/ 稳定/ 状态/ ./ 现有/ 的/ 恢复/ 方法/ 主要/ 包括/ 预写/ 日志/ 和/ 影子/ 页/ 两类/ ./ 日志/ 记录/ 了/ 事务/ 对/ 数据/ 的/ 更新/ 并/ 被/ 顺序/ 追加/ 到/ 日志/ 文件/ 尾部/ ,/ 恢复/ 操作/ 根据/ 日志/ 完成/ 对/ 某/ 一/ 事务/ 的/ 撤销/ 或重/ 做/ ./ 恢复/ 过程/ 通常/ 会/ 产生/ 大量/ 小/ 的/ 随机/ 写/ 操作/ ,/ 闪存/ 处理/ 小/ 范围/ 随机/ 写/ 的/ 代价/ 比较/ 高/ ,/ 然而/ 现有/ 的/ 日志/ 处理/ 技术/ 难以/ 充分利用/ 闪存/ 的/ 存储/ 特性/ ,/ 优化/ 日志/ 结构/ 和/ 恢复/ 策略/ 是/ 提高/ 闪存/ 数据库/ 事务处理/ 性能/ 的/ 关键/ ./ 基于/ 影子/ 页/ 的/ 事务/ 恢复/ 机制/ 采用/ 异位/ 更新/ 方式/ ,/ 更新/ 操作/ 会/ 将/ 数据/ 存储/ 在/ 新/ 的/ 物理/ 页/ ,/ 系统维护/ 两张/ 页/ 地址映射/ 表来/ 保存/ 逻辑/ 页/ 号/ 和/ 物理/ 页/ 号/ 的/ 对应/ 关系/ ./ 影子/ 页/ 技术/ 不会/ 产生/ 日志/ 来/ 记录/ 对/ 数据库/ 的/ 操作/ ,/ 没有/ 显式/ 的/ 回滚/ 机制/ 对/ 数据库/ 的/ 操作/ 进行/ 撤销/ ./ 如果/ 当前/ 事务/ 正确/ 提交/ ,/ 则/ 可以/ 将/ 当前/ 页表/ 写入/ 外存/ ./ 如果/ 事务/ 未能/ 提交/ ,/ 则/ 丢弃/ 当前/ 页表/ 并/ 恢复/ 到/ 该/ 事务/ 执行/ 前/ 的/ 状态/ ./ 影子/ 页/ 在/ 事务/ 提交/ 或/ 撤销/ 时要/ 执行/ 修改/ 映射/ 信息/ 、/ 回收/ 无效/ 数据/ 等/ 操作/ ,/ 频繁/ 的/ 随机/ 读/ 操作/ 使得/ 影子/ 页/ 技术/ 并/ 不/ 适合/ 磁盘/ 数据库系统/ ./ 闪存/ 的/ 物理/ 特性/ 与/ 影子/ 页/ 数据管理/ 十分/ 吻合/ ,/ 在/ 闪存/ 数据库系统/ 中/ 使用/ 影子/ 页/ 有助于/ 提升/ 事务处理/ 能力/ ./ 3.5/ ./ 1/ 基于/ 日志/ 的/ 方法/ HV/ -/ recovery/ [/ 38/ ]/ 基于/ 闪存/ 异位/ 更新/ 和/ 高速/ 的/ 随机/ 读/ 特性/ 设计/ 实现/ 了/ 适用/ 于/ 闪存/ 的/ 数据库/ 恢复/ 方法/ ./ 闪存/ 在/ 执行/ 更新/ 时会/ 自动/ 保存/ 同一/ 数据/ 页/ 的/ 多个/ 不同/ 版本/ ,/ HV/ -/ recovery/ 根据/ 这一/ 特性/ 提出/ 了/ 一种/ 新型/ 的/ 基于/ 地址/ 的/ 日志/ 处理/ 策略/ —/ —/ —/ HV/ -/ Logging/ ./ HV/ -/ Logging/ 机制/ 的/ 日志/ 结构/ 为/ {/ Tid/ ,/ element/ ,/ PreAddress/ ,/ PreValue/ }/ ,/ 其中/ Tid/ 唯一/ 标识/ 某一/ 事务/ ,/ element/ 是/ 事务/ 操作/ 的/ 对象/ 元素/ ,/ PreAddress/ 指向/ 旧版本/ 历史数据/ ,/ PreValue/ 记录/ 被/ 更改/ 元素/ 的/ 旧值/ ./ 事务/ 回滚/ 管理/ 模块/ 通过/ 读取/ 日志/ 获得/ 各/ 元素/ 旧版本/ 地址/ ,/ 根据/ 地址/ 取出/ 数据/ 并/ 判断/ 是否/ 与/ 日志/ 保存/ 的/ 旧值/ 相同/ ,/ 若/ 相同/ ,/ 将/ 新/ 的/ 数据/ 页/ 置/ 为/ 无效/ ,/ 恢表/ 6/ 闪存/ 数据库/ 恢复/ 算法/ 性能/ 对比/ 分析/ HV/ -/ recovery/ [/ 38/ ]/ 日志/ 数据恢复/ 时/ 避免/ 了/ 大量/ 数据/ 重写/ 操作/ ;/ 有利/ FlagCommit/ [/ 41/ ]/ 影子/ 页/ 避免/ 写入/ 大量/ 日志/ ;/ 有利于/ 实现/ 更/ 细粒度/ 的/ LB/ -/ Logging/ [/ 39/ ]/ 日志/ 优化/ 了/ 事务/ 恢复/ 的/ 日志/ 读取/ 过程/ ;/ 充分发挥/ 闪/ FlashLogging/ [/ 40/ ]/ 日志/ USB/ 接口/ 闪存/ 设备/ 单独/ 存储/ 日志/ ,/ 价格低/ 复原/ 数据/ 页/ 为/ 有效/ 状态/ ;/ 若/ 不同/ ,/ 则/ 重新/ 写入/ 新/ 数据/ ./ HV/ -/ Logging/ 优化/ 了/ 日志/ 结构/ ,/ 减少/ 了/ 冗余/ 日志/ 和/ 垃圾/ 数据/ 的/ 存在/ ,/ 提高/ 了/ 空间/ 利用率/ ,/ 利用/ 闪存/ 快速/ 随机/ 读/ 的/ 特性/ 大幅/ 减少/ 恢复/ 时间/ ./ LB/ -/ Logging/ [/ 39/ ]/ 采用/ 链表/ 结构/ 来/ 记录/ 日志/ ./ 同一/ 事务/ 更新/ 的/ 各个/ 元素/ 和/ 每个/ 元素/ 的/ 不同/ 版本/ 都/ 分别/ 建立/ 指针/ 链/ ,/ 这/ 保证/ 了/ 事务/ 和/ 被/ 修改/ 元素/ 之间/ 的/ 关联性/ ,/ 恢复/ 操作/ 根据/ 指针/ 链/ 可以/ 准确/ 、/ 快速/ 地/ 找出/ 该/ 事务所/ 有/ 操作/ 日志/ ./ FlashLogging/ [/ 40/ ]/ 从/ 系统/ 代价/ 的/ 角度/ 提出/ 了/ 一种/ 性价比/ 较/ 高/ 的/ 日志/ 处理/ 方案/ ./ FlashLogging/ 用/ 价格低廉/ 的/ USB/ 闪存/ 存储器/ 专门/ 存储/ 记录/ 日志/ ./ 日志/ 通常/ 以/ 顺序/ 追加/ 的/ 方式/ 写入/ 外存/ ,/ 这/ 符合/ 闪存/ 顺序/ 写/ 带宽/ 高/ 的/ 存储/ 特性/ ./ FlashLogging/ 将/ 许多/ USB/ 闪存/ 设备/ 以/ 阵列/ 的/ 形式/ 来/ 组织/ ,/ 解决/ 了/ 单块/ 设备/ 容量/ 有限/ 的/ 问题/ ./ 3.5/ ./ 2/ 基于/ 影子/ 页/ 的/ 方法/ SLC/ 型/ 闪存/ 允许/ 对同/ 一页/ 在/ 擦除/ 之前/ 多次/ 写入/ 数据/ ./ FlagCommit/ [/ 41/ ]/ 针对/ SLC/ 闪存/ 这一/ 特性/ 提出/ 一种/ 基于/ 影子/ 页/ 的/ 事务处理/ 机制/ ./ FlagCommit/ 在/ 闪存/ 页/ 的/ 备用/ 区/ 存储/ 和/ 事务/ 相关/ 的/ 元/ 数据/ ,/ 这些/ 元/ 数据/ 包括/ 事务/ ID/ 、/ 事务/ 状态/ 、/ 事务/ 更新/ 的/ 前/ 一个/ 数据/ 页/ 地址/ 、/ 提交/ 标记/ 等/ ./ 链表/ 指针/ 把/ 同一/ 事务/ 关联/ 的/ 数据/ 页/ 逻辑/ 上/ 连在一起/ ,/ 事务/ 提交/ 或/ 回滚时/ 通过/ 这些/ 元/ 数据/ 进行/ 数据/ 更新/ 或/ 恢复/ ./ FlagCommit/ 中/ 被/ 更新/ 的/ 数据/ 页/ 可/ 被/ 看作/ 影子/ 页/ ,/ 备用/ 区中/ 的/ 元/ 数据/ 构成/ 了/ 众多/ 分散/ 的/ 地址映射/ 表/ ./ 事务/ 提交/ 协议/ 根据/ 存储/ 在/ 备用/ 区/ 的/ 提交/ 标记/ 执行/ 提交/ 或/ 回滚/ 操作/ ./ 当/ 数据/ 更新/ 或/ 垃圾/ 回收/ 导致/ 链表/ 断裂/ 时/ ,/ 修改/ 提交/ 标记/ 可以/ 保证/ 事务/ 和/ 该/ 事务/ 相关/ 的/ 多个/ 分裂/ 链表/ 逻辑/ 上/ 关联/ 在/ 一起/ ./ 影子/ 页/ 在/ 1977/ 年/ 被/ 提出/ ./ 事务处理/ 因为/ 不/ 需要/ 预写/ 日志/ 而/ 变得/ 更加/ 有效/ ,/ 但/ 影子/ 页/ 在/ 处理过程/ 中/ 会/ 产生/ 很多/ 随机/ 读/ 操作/ ,/ 因此/ 在/ 磁盘/ 存储/ 时代/ 影子/ 页/ 技术/ 未能/ 得到/ 广泛应用/ ./ 闪存/ 异位/ 更新/ 的/ 特性/ 天然/ 地/ 保存/ 了/ 事务/ 更新/ 的/ 历史/ 版本/ 数据/ ,/ 这为/ 影子/ 页/ 恢复/ 机制/ 提供/ 了/ 很/ 好/ 的/ 支持/ ./ 表/ 6/ 列出/ 了/ 几种/ 主要/ 的/ 闪存/ 数据库/ 恢复/ 方法/ ./ Page124/ 基于/ 闪存/ 的/ 混合/ 存储/ 数据管理/ 尽管/ 基于/ 闪存/ 的/ 固态/ 硬盘/ (/ SSD/ )/ 比/ 磁盘/ 具有/ 更大/ 的/ 性能/ 优势/ ,/ 但是/ 短期内/ SSD/ 不会/ 完全/ 取代/ 磁盘/ 成为/ 主流/ 存储介质/ ./ 将/ SSD/ 和/ 磁盘/ 共存/ 形成/ 混合/ 存储系统/ 是/ 未来/ 一段/ 时期/ 数据管理/ 的/ 研究/ 热点/ ./ 混合/ 存储/ 主要/ 考虑/ 到/ 以下/ 几个/ 因素/ :/ (/ 1/ )/ SSD/ 使用寿命/ ./ 闪存/ 容量/ 的/ 不断/ 增大/ 是/ 通过/ 牺牲/ 可用/ 寿命/ 的/ 代价/ 来/ 获得/ 的/ ,/ 频繁/ 的/ 数据/ 访问/ 会/ 极大/ 缩短/ SSD/ 的/ 寿命/ ,/ SSD/ 完全/ 取代/ 磁盘/ 对系统/ 运行/ 的/ 可靠性/ 和/ 稳定性/ 是/ 一大/ 考验/ ;/ (/ 2/ )/ 价格/ 成本/ ./ 尽管/ SSD/ 的/ 价格/ 在/ 不断/ 走低/ ,/ 但/ 即便/ 是/ 低端/ 产品/ 其/ 单位/ 容量/ 的/ 价格/ 仍然/ 是/ 磁盘/ 的/ 十倍/ ,/ 基于/ 闪存/ 的/ 混合/ 存储系统/ 性价比/ 高/ ;/ (/ 3/ )/ 数据/ 访问/ 的/ 局部性/ ./ 数据/ 访问/ 通常/ 呈现/ 不/ 均衡/ 特性/ ,/ 一段时间/ 内/ 只有/ 部分/ 数据/ 是/ 频繁/ 被/ 访问/ 的/ ,/ 约/ 有/ 40/ %/ 的/ 数据/ 访问/ 频度/ 较/ 低/ ./ 根据/ SSD/ 和/ 磁盘/ 的/ 物理/ 特性/ 将/ 二者/ 组合/ ,/ 有/ 选择地/ 把/ 数据/ 分配/ 到/ 不同/ 存储介质/ (/ 比如/ 将/ 最/ 热/ 数据/ 或读/ 操作/ 密集/ 的/ 数据/ 交由/ SSD/ 来/ 处理/ )/ ,/ 不仅/ 能/ 满足/ 大/ 数据/ 、/ 高/ 吞吐/ 等/ 应用/ 需求/ ,/ 也/ 可以/ 有效/ 降低/ 企业/ 成本/ ./ 考虑/ SSD/ 和/ 磁盘/ 混合/ 存储/ 的/ 结构/ 特性/ ,/ 混合/ 存储/ 数据管理/ 目前/ 研究/ 点/ 包括/ :/ (/ 1/ )/ SSD/ 和/ 磁盘/ 同作/ 二级/ 存储/ ;/ (/ 2/ )/ SSD/ 作为/ 内存/ 的/ 扩展/ 缓存/ ./ 4.1/ SSD/ 和/ 磁盘/ 同作/ 二级/ 存储/ 结合/ 硬件/ 特性/ 和/ 数据/ 访问/ 特征/ ,/ SSD/ 和/ 磁盘/ 在/ 混合/ 存储/ 数据管理/ 中/ 分别/ 承担/ 不同/ 的/ 存储/ 任务/ :/ (/ 1/ )/ 磁盘/ 缓存/ 上层/ 应用/ 对/ SSD/ 的/ 写/ 操作/ ;/ (/ 2/ )/ SSD/ 存储/ 特定/ 类型/ 数据/ ./ 4.1/ ./ 1/ 磁盘/ 用作/ SSD/ 的/ 写/ 缓存/ 为了/ 降低/ 随机/ 写/ 操作/ 对/ SSD/ 寿命/ 和/ 系统/ 性能/ 的/ 影响/ ,/ Griffin/ [/ 42/ ]/ 选择/ 用/ 磁盘/ 缓存/ 上层/ 应用/ 对/ SSD/ 的/ 写/ 操作/ ,/ Griffin/ 以/ 日志/ 的/ 方式/ 将/ 内存/ 换出/ 的/ 脏页/ 顺序/ 写入/ 磁盘/ ,/ 后台/ 进程/ 有/ 条件/ 地/ 将/ 存储/ 在/ SSD/ 上/ 的/ 原始数据/ 和/ 磁盘/ 上/ 的/ 日志/ 数据/ 进行/ 合并/ 生成/ 新/ 数据/ ./ 文献/ [/ 43/ ]/ 基于/ 页面/ 分类/ 思想/ 将/ 系统对/ SSD/ 的/ 随机/ 写/ 操作/ 暂存/ 于/ 磁盘/ ,/ 通过/ 磁盘/ 将/ 这些/ 随机/ 写/ 序列/ 转换/ 为/ 顺序/ 操作/ 序列/ 并/ 最终/ 写回/ SSD/ ./ 将/ 磁盘/ 用作/ SSD/ 写/ 缓存/ 的/ 存储/ 策略/ 发挥/ 了/ 磁盘/ 或/ 磁盘阵列/ 顺序/ 访问/ 性能/ 较/ 好/ 的/ 特点/ ,/ 利用/ SSD/ 高速/ 随机/ 读/ 性能/ 对/ 数据/ 进行/ 合并/ 后/ 顺序/ 写入/ SSD/ ./ 需要/ 注意/ 的/ 是/ ,/ 磁盘/ I/ // O/ 瓶颈/ 和/ 频繁/ 的/ 数据/ 合并/ 使得/ 这种/ 混合系统/ 难以/ 应对/ 更新/ 操作/ 密集/ 和/ 访问/ 模式/ 多变/ 的/ 负载/ ./ 4.1/ ./ 2SSD/ 存储/ 特定/ 类型/ 数据/ 基于/ SSD/ 优良/ 的/ 随机/ 读/ 性能/ ,/ 通过/ 分析/ 负载/ 访问/ 特征/ 和/ 数据类型/ ,/ 将/ 读/ 操作/ 密集/ 的/ 数据/ 、/ 索引/ 文件/ 、/ 临时/ 表等/ 存储/ 在/ SSD/ 有利于/ 提高/ 系统/ 的/ 数据处理/ 能力/ ./ (/ 1/ )/ 特定/ 访问/ 模式/ 的/ 负载/ ./ 文献/ [/ 44/ ]/ 提出/ 了/ 基于/ 页面/ I/ // O/ 统计/ 信息/ 的/ 页面/ 迁移/ 模型/ ./ 该/ 模型/ 根据/ I/ // O/ 统计/ 信息/ 计算/ 数据/ 存放/ 在/ SSD/ 和/ 磁盘/ 的/ 代价/ ,/ 根据/ 代价/ 对/ 页面/ 进行/ 分类/ 并/ 动态/ 地/ 对/ SSD/ 和/ 磁盘/ 数据/ 进行/ 迁移/ ./ 迁移/ 的/ 目的/ 是/ 将/ 读/ 操作/ 密集/ 的/ 负载/ 放在/ SSD/ 上/ 存储/ ,/ 而/ 写/ 操作/ 密集/ 的/ 数据/ 则/ 保留/ 在/ 磁盘/ 上/ ./ I/ -/ CASH/ [/ 45/ ]/ 提出/ 将/ SSD/ 和/ 磁盘/ 进行/ 成/ 对/ 组合/ ,/ 采用/ 智能算法/ 将/ 较长时间/ 不/ 被/ 修改/ 的/ 数据/ 和/ 读/ 操作/ 密集/ 的/ 数据/ 存放/ 在/ SSD/ ,/ 以/ 日志/ 的/ 方式/ 记录/ 对/ SSD/ 数据/ 的/ 修改/ 并/ 增量/ 存储/ 于/ 磁盘/ ,/ I/ -/ CASH/ 尽量避免/ 对/ SSD/ 产生/ 随机/ 写/ 操作/ ,/ 读数据/ 时/ 通过/ 相似/ 度/ 探测/ 获得/ 数据/ 的/ 最新/ 版本/ ;/ (/ 2/ )/ 特定/ 数据/ ./ 数据库系统/ 中/ 通常/ 包含/ 许多/ 访问/ 特征/ 明显/ 的/ 特定/ 类型/ 数据/ ./ 比如/ ,/ 为了/ 保证/ 数据库/ 的/ 一致性/ ,/ 日志/ 需要/ 在/ 事务/ 提交/ 之前/ 先行/ 写入/ 外存/ ,/ 预写/ 日志/ 引发/ 频繁/ 的/ 磁盘/ 访问/ ,/ 将/ 严重/ 影响/ 数据库系统/ 整体/ 性能/ 的/ 提升/ ./ 用/ SSD/ 存储/ 这些/ 特定/ 类型/ 数据/ 可以/ 减轻/ 磁盘/ 的/ I/ // O/ 压力/ ./ Hystor/ 系统/ [/ 46/ ]/ 通过/ 识别/ 算法/ 发现/ 影响/ 系统/ 性能/ 的/ 关键/ 数据/ 块/ 并/ 将/ 它们/ 备份/ 到/ SSD/ ,/ 待/ SSD/ 完成/ 对/ 这些/ 数据/ 块/ 的/ 修改/ 再/ 将/ 新/ 数据/ 重新/ 写回/ 磁盘/ ./ 用/ SSD/ 存储/ 查询/ 连接/ 操作过程/ 中/ 生成/ 的/ 临时/ 表/ 、/ 中间/ 结果/ 等/ 数据/ 也/ 可以/ 有效/ 提升/ 循环/ 嵌套/ 、/ Hash/ 、/ 排序/ -/ 合并/ 等/ 连接/ 算法/ 的/ 性能/ [/ 6/ ,/ 47/ ]/ ;/ (/ 3/ )/ 性能/ 对比/ ./ 为了/ 对比/ 混合/ 存储/ 的/ 系统/ 性能/ ,/ 我们/ 搭建/ 了/ 基于/ 三星/ MZ/ -/ 7PD/ 型/ SSD/ 和/ 磁盘/ 的/ 混合/ 存储/ 平台/ ,/ 并/ 在/ 磁盘/ 、/ 混合/ 存储/ 和/ SSD3/ 种/ 不同/ 的/ 存储/ 架构/ 下/ 对/ PostgreSQL/ 数据库系统/ 的/ 性能/ 进行/ 了/ 测试/ ./ SSD/ 在/ 混合/ 存储/ 环境/ 中/ 的/ 作用/ 是/ 存储/ 日志/ 文件/ 和/ 系统/ 表/ 数据/ ./ TPC/ -/ C/ 测试/ 采用/ Bench/ -/ markSQL/ 分别/ 对/ 10/ 个/ 和/ 200/ 个/ 数据仓库/ 进行/ 事务处理/ 性能/ 测试/ ,/ 实验/ 结果/ 如图/ 9/ (/ a/ )/ 所示/ ,/ 在/ 混合/ 存储/ 环境/ 下/ ,/ PostgreSQL/ 数据库/ 每秒/ 处理/ 的/ 事务/ 数/ (/ tpmC/ )/ 比/ 磁盘/ 存储/ 提高/ 近/ 1/ 倍/ ./ 数据库系统/ 的/ 日志/ 操作/ 多以/ 顺序/ 读写/ 为主/ ,/ 而/ 对系统/ 表/ 的/ 访问/ 更/ 多/ 的/ 是/ 读/ 操作/ ,/ 因此/ ,/ 将/ 日志/ 和/ 系统/ 表/ 分离/ 存储/ 在/ SSD/ 可以/ 发挥/ SSD/ 良好/ 的/ 顺序/ 读写/ 和/ 快速/ 随机/ 读/ 性能/ ./ 3/ 种/ 存储/ 架构/ 下/ 的/ TPC/ -/ H/ 测试/ 结果/ 如图/ 9/ (/ b/ )/ 所/ Page13/ 示/ ,/ 查询/ 数据流/ 由/ 22/ 个/ 复杂/ 查询/ 和/ 2/ 个/ 更新/ 操作/ 随机/ 组成/ ,/ 数据库/ 包含/ 8/ 张表/ ,/ 数据量/ 为/ 1GB/ ./ 实验/ 结果显示/ ,/ 将/ 特种/ 数据/ 存储/ 到/ SSD/ ,/ 多/ 并发/ 用户/ 下/ 查询处理/ 吞吐/ 提升/ 的/ 幅度/ 为/ 48.9/ %/ ./ 4.2/ SSD/ 作为/ 内存/ 的/ 扩展/ 缓存/ 随着/ 内存/ 读写/ 速度/ 的/ 不断/ 提升/ ,/ 内存/ 和/ 磁盘/ 之间/ 的/ 性能/ 鸿沟/ 在/ 持续/ 变大/ ./ 尽管/ 大型/ 数据中心/ 配置/ 的/ 内存容量/ 越来越/ 高/ ,/ 但/ 数据/ 的/ 增长/ 远超过/ 内存容量/ 的/ 增长/ ,/ 简单/ 的/ 扩充/ 内存容量/ 不仅/ 需要/ 昂贵/ 的/ 财力/ 支出/ ,/ 还要/ 消耗/ 大量/ 能源/ ./ SSD/ 的/ 出现/ 弥合/ 了/ 内存/ 和/ 磁盘/ 之间/ 的/ 性能/ 差距/ ,/ 在/ 内存/ 和/ 磁盘/ 之间/ 添加/ SSD/ 作/ 扩展/ 缓存/ 层/ 可/ 大幅/ 提升/ 缓冲区/ 访问/ 性能/ ,/ 缓解/ 磁盘/ I/ // O/ 压力/ ,/ 缩短/ 系统/ 恢复/ 时间/ ./ SSD/ 作/ 内存/ 扩展/ 的/ 系统/ 架构/ 见图/ 10/ ./ 图中/ SSD/ 的/ 作用/ 是/ 暂存/ 从/ 内存/ 置换/ 出/ 的/ 数据/ ,/ 当/ 内存/ 缺页/ 中断/ 时/ ,/ 系统/ 首先/ 访问/ SSD/ 中/ 的/ 数据/ ,/ 若/ 命中/ 则/ 将/ 数据/ 读入/ 内存/ ,/ 否则/ 从/ 磁盘/ 读取数据/ ./ SSD/ 作/ 扩展/ 缓存/ 层/ 最/ 需要/ 解决/ 以下/ 两个/ 核心/ 问题/ :/ (/ 1/ )/ 内存/ 中/ 哪些/ 数据/ 在/ 何时/ 缓存/ 到/ SSD/ ./ 不同于/ 单一/ 类型/ 介质/ 的/ 缓冲区/ 管理/ ,/ 在/ 异质/ 多级/ 缓存/ 环境/ 下/ ,/ 缓冲区/ 替换算法/ 必须/ 考虑/ 数据/ 页/ 的/ 读写/ 状态/ 、/ 数据/ 访问/ 形式/ 和/ 硬件/ 自身/ 特征/ 等/ 因素/ ;/ (/ 2/ )/ SSD/ 中/ 的/ 数据/ 怎样/ 组织/ 并/ 如何/ 换出/ 或/ 写/ 回/ 磁盘/ ./ SSD/ 暂存/ 了/ 从/ 内存/ 被/ 驱逐/ 出/ 的/ 数据/ ,/ 合理/ 地/ 组织/ 存储/ 这些/ 数据/ 有助于/ 内存/ 缺页/ 时/ 快速/ 识别/ 并/ 读取/ SSD/ 中/ 的/ 数据/ ./ 当/ SSD/ 可用/ 空间/ 低于/ 设定/ 条件/ 时/ ,/ 需要/ 将/ 部分/ 数据/ 页/ 换/ 出/ SSD/ ,/ 其中/ 的/ 脏页/ 需要/ 写回/ 磁盘/ ./ 设计/ 适合/ SSD/ 读写/ 特性/ 的/ 替换/ 策略/ 对系统/ 性能/ 的/ 影响/ 至关重要/ ./ 4.2/ ./ 1/ 缓存/ 策略/ 文献/ [/ 48/ ]/ 基于/ IBM/ 的/ DB2/ 数据库系统/ 提出/ 了/ TAC/ 缓存/ 策略/ ./ TAC/ 考虑/ 数据/ 访问/ 的/ 冷热/ 特性/ ,/ 以块/ (/ 32/ 个/ 数据/ 页/ )/ 为/ 热度/ 计算/ 单位/ ,/ 每次/ 从/ 磁盘/ 读数据/ 都/ 会/ 计算/ 该/ 数据/ 所在/ 的/ 块/ 是否/ 满足/ 一定/ 的/ 热度/ 条件/ ,/ 若/ 满足/ 则/ 被/ 缓存/ 在/ SSD/ ,/ 如果/ SSD/ 可用/ 空间/ 不足/ 则/ 选择/ 热度/ 最低/ 的/ 数据/ 换出/ SSD/ ./ 对于/ 内存/ 换出/ 的/ 脏页/ ,/ TAC/ 同时/ 写入/ SSD/ 和/ 磁盘/ ./ 文献/ [/ 49/ ]/ 提出/ 的/ LC/ 缓存/ 策略/ 区别对待/ 从/ 内存/ 换出/ 的/ 干净/ 页/ 和/ 脏页/ ,/ 提出/ 了/ Clean/ -/ Write/ (/ CW/ )/ 、/ Dual/ -/ Write/ (/ DW/ )/ 、/ Lazy/ -/ Cleaning/ (/ LC/ )/ 3/ 种/ 缓存/ 策略/ ./ 这里/ CW/ 表示/ SSD/ 只/ 缓存/ 从/ 内存/ 置换/ 出/ 的/ 干净/ 页/ ;/ DW/ 表示/ 缓存/ 内存/ 换出/ 的/ 脏页/ 和/ 干净/ 页/ ,/ 脏页/ 被/ 同时/ 写入/ SSD/ 和/ 磁盘/ ;/ LC/ 与/ DW/ 的/ 区别/ 在于/ 处理/ 脏页/ 的/ 策略/ 不同/ ,/ LC/ 先/ 将/ 脏页/ 写入/ SSD/ ,/ 随后/ 再/ 批量/ 写入/ 磁盘/ ./ 3/ 种/ 缓存/ 策略/ 对/ 不同/ 类型/ 访问/ 负载/ 表现/ 出/ 的/ 性能/ 有/ 较大/ 差异/ :/ (/ 1/ )/ 对于/ 更新/ 操作/ 密集/ 的/ 负载/ ,/ LC/ 算法/ 的/ 性能/ 相对/ 较/ 好/ ./ 这/ 是因为/ LC/ 能够/ 将/ 对/ 同一/ 数据/ 页/ 的/ 多次/ 修改/ 经过/ SSD/ 的/ 暂存/ 而/ 变成/ 对/ 磁盘/ 的/ 一次/ 写/ 操作/ ,/ 磁盘/ 写/ 操作/ 的/ 数量/ 较/ 少/ ;/ (/ 2/ )/ 对于/ 读/ 操作/ 密集/ 的/ 负载/ ,/ CW/ 表现/ 出/ 更/ 高/ 的/ 命中率/ ,/ DW/ 省去/ 了/ LC/ 处理/ 脏页/ 的/ 复杂/ 管理/ 代价/ ,/ 所以/ 在/ 性能/ 上要/ 优于/ LC/ ./ FaCE/ 系统/ [/ 50/ ]/ 综合/ 考虑/ 了/ SSD/ 价格/ 、/ 随机/ 写/ 操作/ 性能/ 差/ 等/ 因素/ ,/ 提出/ 了/ 一种/ 经济/ 有效/ 的/ 缓存/ 管理策略/ ./ FaCE/ 选择/ SSD/ 作为/ 扩展/ 缓存/ ,/ 利用/ SSD/ 的/ 高速/ 随机/ 读/ 性能/ 和/ 非易/ 失性/ 提高/ 数据/ 访问/ 的/ 吞吐量/ ,/ 降低/ 系统/ 恢复/ 时间/ ./ FaCE/ 系统/ 的/ 主要/ 特点/ 包括/ :/ (/ 1/ )/ 对于/ 从/ 内存/ 被/ 驱逐/ 进入/ SSD/ 的/ 数据/ ,/ FaCE/ 以/ 顺序/ 追加/ 的/ 方式/ 写入/ SSD/ ,/ 对于/ SSD/ 已经/ 存在/ 的/ 旧版本/ 数据/ FaCE/ 予以/ 保留/ ,/ 这/ 避免/ 了/ 对/ SSD/ 的/ 随机/ 写/ 操作/ ;/ (/ 2/ )/ FaCE/ 扩充/ 了/ 事务/ 检查点/ 机制/ 和/ 恢复/ 模块/ ,/ 以组/ 提交/ 的/ 方式/ 周期性地/ 将/ 记录/ 缓存数据/ 的/ 元/ 信息/ 写入/ SSD/ ,/ 通过/ 快速/ 扫描/ 存储/ 在/ SSD/ 中/ 的/ 元/ Page14/ 数据/ ,/ 使/ 系统/ 恢复/ 时间/ 显著/ 降低/ ./ OracleExadata/ ①/ 采用/ 统计/ 的/ 方法/ 将/ 数据表/ 、/ 索引/ 等/ 热/ 数据/ 缓存/ 至/ SSD/ ,/ 内存/ 换出/ 的/ 干净/ 页/ 也/ 缓存/ 在/ SSD/ 以/ 提高/ 命中率/ ,/ 数据库系统/ 性能/ 提升/ 较大/ ./ hStorage/ -/ DB/ [/ 51/ ]/ 实现/ 了/ 一个/ 基于/ 混合系统/ 的/ 数据/ 存储管理/ 应用/ 框架/ ./ hStorage/ -/ DB/ 底层/ 采用/ SSD/ 和/ 磁盘/ 的/ 混合/ 存储/ ,/ SSD/ 用作/ 内存/ 的/ 扩展/ 缓存/ ./ hStorage/ -/ DB/ 为/ 每/ 一次/ I/ // O/ 请求/ 都/ 赋予/ 特定/ 的/ 语义/ 信息/ ,/ 存储管理/ 器/ 响应/ I/ // O/ 请求/ 时/ 根据/ 语义/ 信息/ 执行/ 缓存/ 策略/ ./ hStorage/ -/ DB/ 为/ 操作系统/ 、/ 文件系统/ 以及/ 数据库系统/ 添加/ 了/ 一个/ 访问/ 优先级/ 生成/ 模块/ ,/ 该/ 模块/ 提取/ I/ // O/ 请求/ 携带/ 的/ 语义/ 信息/ 生成/ 并/ 特定/ 的/ 服务质量/ —/ —/ —/ QoS/ (/ QualityofService/ )/ ,/ 这里/ QoS/ 实际上/ 指/ 的/ 是/ 页面/ 进入/ 或换/ 出/ SSD/ 的/ 优先级/ ./ 存储管理/ 器/ 根据/ QoS/ 对/ SSD/ 和/ 磁盘/ 中/ 的/ 数据/ 进行/ 写入/ 、/ 读取/ 、/ 迁移/ 等/ 操作/ ./ hStorage/ -/ DB/ 弥补/ 了/ 存储系统/ 和/ 数据库系统/ 之间/ I/ // O/ 语义/ 信息/ 的/ 缺失/ ,/ 存储/ 处理/ 不/ 受/ 负载/ 访问/ 动态变化/ 的/ 影响/ ./ hStorage/ -/ DB/ 对/ 数据库系统/ 特别/ 是/ 复杂/ 的/ OLAP/ 应用/ 和/ 高/ 并发/ 负载/ 访问/ 性能/ 提升/ 幅度/ 比较/ 大/ ,/ 对/ 不同/ 类型/ 负载/ 的/ 查询处理/ 性能/ 均/ 有/ 提升/ ./ 表/ 7/ 列出/ 了/ 目前/ 主要/ 的/ 几个/ 缓存/ 系统/ ./ 表/ 7SSD/ 作为/ 扩展/ 缓存/ 性能/ 对比/ 分析/ 缓存/ 架构/ 页/ 类型/ 数据/ 替换/ 数据/ 同步/ TAC/ [/ 48/ ]/ Both/ 热度/ Write/ -/ through/ 优点/ :/ 缓冲区/ 访问/ 性能/ 提升/ 明显/ ,/ 数据/ 同步/ 代价/ 低/ LC/ [/ 49/ ]/ BothLRU/ -/ 2Write/ -/ back/ 优点/ :/ 适用/ 于/ 多种/ 访问/ 负载/ ;/ 有效/ 减少/ 磁盘/ 写/ 操作/ 的/ 次数/ FaCE/ [/ 50/ ]/ BothFIFOWrite/ -/ back/ 优点/ :/ 优化/ 了/ 写/ 操作/ ,/ 系统/ 吞吐/ 高/ ;/ 恢复/ 性能/ 提升/ 明显/ Exadata/ ①/ CleanLRUWrite/ -/ through/ 优点/ :/ 算法/ 简单/ ;/ SSD/ 和/ 磁盘/ 数据/ 迁移/ 代价/ 少/ 4.2/ ./ 2/ 性能/ 对比/ 为了/ 验证/ 多级/ 缓存/ 系统/ 的/ 性能/ ,/ 本文/ 对/ 已有/ 的/ 部分/ 缓存/ 策略/ 进行/ 了/ 实验/ 对比/ ,/ 我们/ 基于/ disksim4/ ./ 0/ ②/ 和/ SSDModel/ [/ 52/ ]/ 设计/ 实现/ 了/ 一个/ 多级/ 缓存/ 实验/ 仿真/ 平台/ ./ 实验/ 代码/ 使用/ C/ 实现/ ,/ 操作系统/ 为/ Ubuntu12/ ./ 10/ ,/ 页面/ 大小/ 4KB/ ,/ 缓冲区/ 大小/ 4MB/ ./ 验证/ 缓存/ 策略/ 包括/ LRU/ -/ Through/ 、/ CW/ [/ 49/ ]/ 、/ LC/ [/ 49/ ]/ 和/ FaCE/ [/ 50/ ]/ ./ 其中/ LRU/ -/ Through/ 部分/ 实现/ 了/ Exadata/ 的/ 管理策略/ ,/ 内存/ 置换/ 出/ 的/ 脏/ 数据/ 将/ 被/ 同步/ 写回/ 闪存/ 和/ 磁盘/ ,/ CW/ 和/ LC/ 是/ 文献/ [/ 49/ ]/ 提到/ 的/ 两种/ 策略/ ./ 实验/ 所用/ 的/ 两个/ 数据/ 集/ 基于/ TPC/ -/ C/ 标准/ ,/ 采用/ BenchmarkSQL/ 运行/ PostgreSQL/ 获得/ ./ 数据/ 集/ 的/ 统计/ 信息/ 如表/ 8/ 所示/ ./ 数据/ 集/ 访问/ 次数/ 读/ 次数/ 写/ 次数/ 读写/ 比/ T12193476180523038824682/ ./ 3/ %/ // 17.7/ %/ T21988563126273772582663/ ./ 5/ %/ // 36.5/ %/ 在/ 不同/ 的/ SSD/ 和/ 内存/ 的/ 容量/ 比下/ ,/ 实验/ 统计/ 了/ T1/ 和/ T2/ 的/ 运行/ 时间/ ,/ 图/ 11/ (/ a/ )/ 描述/ 了/ 数据/ 集/ T1/ 在/ 4/ 种/ 缓存/ 架构/ 下/ 的/ 运行/ 时间/ ./ 从/ 结果/ 来看/ ,/ FaCE/ 缓存/ 策略/ 的/ 性能/ 相对/ 较/ 好/ ,/ 因为/ FaCE/ 系统/ 采用/ 顺序/ 追加/ 的/ 方式/ 处理/ 从/ 内存/ 置换/ 出/ 的/ 数据/ ,/ SSD/ 数据管理/ 的/ 代价/ 相对/ 较/ 低/ ./ 其它/ 3/ 种/ 缓存/ 策略/ 的/ 差异/ 并/ 不是/ 很大/ ,/ 特别/ 是/ CW/ 和/ LC/ 替换/ 策略/ ,/ 原因/ 在于/ 数据/ 集/ T1/ 是/ 读/ 操作/ 比较/ 密集/ 的/ 负载/ ,/ 基于/ 干净/ 页/ 的/ 缓存/ 策略/ 降低/ 了/ 算法/ 执行/ 的/ 复杂度/ ,/ 系统资源/ 消耗/ 少/ ./ LRU/ -/ Through/ 以/ LRU/ 方式/ 管理/ SSD/ 中/ 数据/ ,/ 图/ 11T1/ 和/ T2/ 在/ 不同/ 缓存/ 策略/ 下/ 的/ 运行/ 所用/ 时间/ ①/ ②/ Page15/ 缓存/ 性能/ 不如/ CW/ 的/ LRU/ -/ K/ 算法/ ./ 数据/ 集/ T2/ 比/ T1/ 有/ 更/ 多/ 的/ 写/ 操作/ ,/ 正如/ 图/ 11/ (/ b/ )/ 所示/ ,/ LC/ 和/ FaCE/ 策略/ 在/ 处理/ 脏页/ 方面/ 的/ 性能/ 优势/ 体现/ 得/ 更加/ 明显/ ./ 特别/ 是/ FaCE/ 系统/ ,/ 随着/ SSD/ 容量/ 的/ 增大/ ,/ 系统/ 运行/ 时间/ 显著/ 减少/ ,/ 当/ SSD/ 和/ 内存/ 的/ 容量/ 比/ 超过/ 20/ 之后/ ,/ 性能/ 提升/ 幅度/ 开始/ 变小/ ,/ 这/ 是因为/ SSD/ 对/ 无效/ 数据/ 页/ 回收/ 的/ 代价/ 影响/ 了/ 系统/ 性能/ 的/ 提升/ ./ 5/ 未来/ 工作/ 的/ 展望/ 结合/ 新/ 硬件/ 发展趋势/ 和/ 现有/ 的/ 闪存/ 数据管理/ 特点/ ,/ 我们/ 认为/ 以下/ 几个/ 方面/ 是/ 未来/ 的/ 研究/ 方向/ ./ 5.1/ 基于/ 闪存/ 的/ 超大/ 数据管理/ 随着/ 越来越/ 多/ 应用/ 技术/ 的/ 出现/ 和/ 发展/ ,/ 数据/ 的/ 增长/ 已经/ 完全/ 失去/ 控制/ ,/ 对/ 业务/ 运行/ 也/ 造成/ 了/ 影响/ ,/ 构建/ 面向/ 企业级/ 应用/ 的/ 超大/ 数据/ 管理系统/ 是/ 解决/ 海量/ 数据/ 存储/ 和/ 管理/ 等/ 问题/ 的/ 必由之路/ ./ 主要/ 研究/ 内容/ 包括/ 如下/ 几个/ 方面/ :/ (/ 1/ )/ 高性能/ 、/ 高/ 扩展/ ./ 基于/ 闪存/ 的/ 新/ 硬件/ 特性/ 和/ 大/ 数据/ 呈现/ 的/ 多样性/ ,/ 合理/ 的/ 数据分布/ 会/ 加快/ 数据/ 的/ 访问/ 性能/ ./ 数据管理/ 体系/ 的/ 各个环节/ 必须/ 相应/ 的/ 调整/ 管理策略/ 以/ 适应/ 新型/ 存储/ 的/ 特性/ ./ 关系数据库/ 技术/ 在/ 可扩展性/ 方面/ 存在/ 不足/ ./ 近年来/ ,/ 在/ 超大/ 数据/ 管理系统/ 方面/ ,/ 基于/ 闪存/ 的/ NoSQL/ 数据库/ 技术/ 成为/ 热门/ 的/ 研究/ 点/ [/ 53/ -/ 54/ ]/ ;/ (/ 2/ )/ 低能耗/ 、/ 高/ 吞吐/ ./ 低能耗/ 已/ 逐渐/ 成为/ 计算机/ 存储系统/ 的/ 一项/ 关键/ 挑战/ ./ 将/ 闪存/ 引入/ 大规模/ 据/ 管理系统/ 非常/ 有助于/ 解决/ 能耗/ 和/ 高/ 吞吐/ 等/ 方面/ 的/ 严峻/ 挑战/ ./ 一方面/ ,/ 引入/ 闪存/ 使得/ 缓存/ 空间/ 显著/ 增大/ ,/ 能/ 获得/ 更/ 高/ 的/ 缓存/ 命中率/ 从而/ 显著/ 降低/ 对/ 磁盘/ 的/ 访问/ 密度/ ,/ 在/ 存储/ 层/ 内部/ 可以/ 通过/ 倾斜/ 的/ 数据分布/ ,/ 使/ 部分/ 磁盘/ 存储/ 冷门/ 数据/ 来/ 增加/ 空闲/ 时间/ 达到/ 节能/ 的/ 目的/ ,/ 另一方面/ ,/ 引入/ 闪存/ 可以/ 显著/ 减少/ 内存/ 的/ 使用/ ,/ 从而/ 降低/ 缓存/ 层/ 自身/ 的/ 能耗/ ;/ (/ 3/ )/ 可靠性/ 、/ 可用性/ ./ 闪存/ 有限/ 的/ 使用寿命/ 是/ 构建/ 大/ 数据管理/ 必须/ 要/ 考虑/ 的/ 问题/ ./ 设计/ 闪存/ 友好/ 的/ 算法/ 和/ 应用/ 有利于/ 保证系统/ 的/ 可靠性/ 和/ 可用性/ ./ 5.2/ 混合/ 存储/ 数据库系统/ 基于/ 闪存/ 的/ 混合/ 存储系统/ 为/ 构建/ 高性能/ 、/ 可/ 扩展/ 的/ 海量/ 数据管理/ 提供/ 了/ 一种/ 经济/ 有效/ 的/ 途径/ ./ 文献/ [/ 55/ ]/ 中/ ,/ 作者/ 基于/ 闪存/ 构建/ 的/ 多级/ 缓存/ 系统/ 极大/ 提升/ 了/ 数据库系统/ 的/ 恢复/ 性能/ ./ 混合/ 存储/ 数据管理/ 必须/ 能够/ 动态/ 的/ 调整/ 外存/ 系统/ 中/ 保存/ 的/ 数据/ ,/ 根据/ 数据/ 和/ 闪存/ 特性/ 合理/ 地/ 分配/ 数据/ 存储/ 位置/ 来/ 获得/ 性能/ 和/ 价格/ 的/ 最佳/ 比/ ./ 数据/ 分类/ 、/ 数据分布/ 、/ 数据/ 迁移/ 等/ 是/ 混合/ 数据库系统/ 需要/ 解决/ 的/ 关键技术/ ./ (/ 1/ )/ 数据/ 分类/ ./ 在/ 混合/ 存储/ 数据/ 管理系统/ 中/ ,/ 闪存/ 设备/ 常/ 作为/ 内存/ 扩展/ 以/ 满足/ 大规模/ 数据/ 应用/ 对系统/ 高/ 吞吐/ 的/ 需求/ ./ 实现/ 内存/ 扩展/ 这一/ 功能/ 的/ 核心/ 问题/ 是/ 如何/ 对/ 缓存数据/ 进行/ 有效/ 分类管理/ ,/ 过滤/ 冷/ 数据/ ,/ 把/ 对系统/ 性能/ 影响/ 较大/ 的/ 热/ 数据/ 存储/ 到/ 闪存/ 以/ 提高/ 命中率/ ,/ 数据/ 分类/ 算法/ 必须/ 能够/ 有效/ 地/ 鉴别/ 当前/ 访问/ 负载/ 的/ 冷热/ 程度/ ;/ (/ 2/ )/ 数据分布/ ./ 不同/ 厂商/ 和/ 接口/ 的/ SSD/ 产品/ 在/ 读写/ 速度/ 、/ 价格/ 等/ 方面/ 的/ 差距/ 非常/ 大/ ,/ 因此/ 数据管理/ 中心/ 通常/ 会/ 选择/ 不同/ 类型/ 和/ 性能/ 的/ SSD/ 产品/ 来/ 构建/ 多级/ 异质/ 的/ 混合/ 存储系统/ ./ 充分发挥/ 各级/ 存储介质/ 的/ 性能/ 特性/ ,/ 合理/ 的/ 数据/ 布局/ 是/ 实现/ 高性价比/ 数据库系统/ 的/ 重要/ 因素/ ./ 如何/ 智能/ 有效/ 地/ 监测/ 访问/ 负载/ 变化/ 是/ 数据/ 合理/ 分布/ 的/ 一大/ 挑战/ ;/ (/ 3/ )/ 数据/ 迁移/ ./ 在/ 混合/ 存储系统/ 中/ ,/ 为了/ 完成/ 数据/ 的/ 有效/ 分布/ ,/ 数据/ 迁移/ 是/ 不可避免/ 的/ ./ 数据/ 迁移/ 是/ 指/ 数据/ 在/ 不同/ 介质/ 之间/ 移动/ ./ 系统/ 通常/ 会/ 根据/ 实时/ 的/ 负载/ 访问/ 将/ 读/ 操作/ 密集/ 的/ 数据/ 迁移/ 到/ SSD/ ,/ 以/ 提高/ 数据/ 的/ 查询/ 性能/ ,/ 修改/ 比较/ 频繁/ 的/ 数据/ 则/ 被/ 存储/ 到/ 磁盘/ ./ 迁移/ 策略/ 必须/ 充分考虑/ 迁移/ 过程/ 中/ 占用/ CPU/ 、/ 总线/ 、/ 内存/ 等/ 系统资源/ 而/ 产生/ 的/ 系统/ 代价/ ./ 5.3/ 新型/ 存储技术/ 对/ 闪存/ 数据库系统/ 的/ 影响/ 近年来/ ,/ 一些/ 新兴/ 的/ 存储技术/ 为/ 数据库系统/ 带来/ 新/ 的/ 机遇/ 和/ 挑战/ ./ 相变/ 存储器/ 、/ 磁阻/ 式/ 随机/ 存储器/ 等/ 一系列/ 技术/ 相继/ 进入/ 产品开发/ 阶段/ ./ 它们/ 可以/ 按位/ 访问/ 且/ 非易失/ ,/ 读写/ 速度/ 与/ 内存/ 相当/ ,/ 而/ 存储密度/ 比/ 内存/ 至少/ 有/ 一个/ 数量级/ 的/ 提升/ ./ 这些/ 新型/ 存储技术/ 被/ 称为/ 存储/ 级/ 内存/ (/ StorageClassMemory/ ,/ SCM/ )/ ./ 相变/ 存储器/ (/ PhaseChangeMemory/ ,/ PCM/ )/ 是/ 最具/ 市场/ 发展潜力/ 的/ SCM/ 设备/ ,/ PCM/ 利用/ 材料/ 在/ 不同/ 温度/ 下/ 可/ 逆转/ 的/ 相变/ 来/ 存储/ 信息/ ./ 相比/ 闪存/ ,/ PCM/ 具有/ 更/ 高/ 的/ 读写/ 速度/ 、/ 更/ 低/ 的/ 能耗/ 和/ 更长/ 的/ 使用寿命/ ./ 表/ 9/ 对/ 几种/ 主要/ 的/ 存储技术/ 进行/ 了/ 对比/ ./ 页/ 大小/ 读/ 能耗/ 写/ 能耗/ 写/ 次数/ 读/ 延迟/ 写/ 延迟/ 内存/ 64B0/ ./ 8J/ // GB1/ ./ 2J/ // GB20/ ~/ 50ns20/ ~/ 50nsPCM64B1J/ // GB6J/ // GB106/ ~/ 108/ ~/ 50ns/ ~/ 1/ μ/ s/ 闪存/ 4KB1/ ./ 5J/ // GB17/ ./ 5J/ // GB104/ ~/ 105/ ~/ 25/ μ/ s/ ~/ 500/ μ/ s/ 磁盘/ 512B65J/ // GB65J/ // GB/ ~/ 5ms/ ~/ 5msPCM/ 目前/ 已经/ 在/ 通信/ 设备/ 、/ 消费/ 电子/ 、/ PC/ 和/ 其它/ 嵌入式/ 领域/ 得到/ 应用/ ./ 随着/ PCM/ 技术/ 的/ 飞速发展/ ,/ 将/ PCM/ 引入/ 闪存/ 数据管理/ 也/ 是/ 未来/ 的/ 一个/ 研/ Page16/ 究/ 热点/ ,/ 具体/ 可/ 分为/ 以下/ 几个/ 研究/ 点/ ./ (/ 1/ )/ SSD/ 和/ PCM/ 混合/ 存储/ ./ 针对/ SSD/ 随机/ 写/ 性能/ 差/ 和/ PCM/ 可/ 按位/ 访问/ 的/ 特点/ ,/ 将/ PCM/ 用作/ SSD/ 的/ 扩展/ 可以/ 提升/ 数据库系统/ 性能/ ./ 文献/ [/ 57/ -/ 58/ ]/ 将/ PCM/ 和/ SSD/ 组成/ 混合系统/ ,/ 利用/ PCM/ 做/ SSD/ 的/ 日志/ 存储/ 区/ ,/ 所有/ 对/ 数据/ 的/ 修改/ 都/ 以/ 日志/ 的/ 方式/ 写入/ PCM/ ,/ 日志/ 写/ 满后/ 将/ 数据/ 进行/ 合并/ 产生/ 新/ 数据/ ./ 将/ PCM/ 和/ SSD/ 组合/ 应用/ 可以/ 有效/ 降低/ 系统/ 能耗/ ,/ 延长/ SSD/ 的/ 可用/ 寿命/ ;/ (/ 2/ )/ PCM/ 用作/ 内存/ 的/ 扩展/ 缓存/ ./ PCM/ 支持/ 更/ 细粒度/ 的/ 数据/ 访问/ ,/ 用/ PCM/ 缓存/ 上层/ 应用/ 对/ 数据库/ 元组/ 级/ 的/ 修改/ 不但/ 可以/ 减少/ 数据/ 写入/ 量/ ,/ 还/ 可以/ 提高/ 并发/ 访问/ 度/ ./ 在/ 文献/ [/ 59/ ]/ 中/ ,/ 作者/ 提出/ 的/ PCM/ -/ Logging/ 缓存/ 策略/ 支持/ 元组/ 级/ 并发/ 访问/ ,/ 数据库/ 事务处理/ 性能/ 得到/ 极大/ 提升/ ./ PCMLogging/ 采用/ 类似/ 于/ 影子/ 页/ 的/ 事务处理/ 办法/ ,/ 当/ 事务/ 对/ 数据/ 执行/ 更新/ 操作/ 时/ ,/ PCMLogging/ 不/ 添加/ 显式/ 的/ 日志/ 记录/ ,/ 每次/ 更新/ 都/ 会/ 在/ 内存/ 保留/ 数据/ 的/ 旧版本/ ,/ 当/ 内存/ 可用/ 空间/ 低于/ 设定/ 的/ 阈值/ ,/ 再/ 将/ 数据/ 写到/ PCM/ ./ PCM/ 存储/ 的/ 数据/ 会/ 批量/ 写入/ SSD/ ./ 元/ 数据/ 记录/ 了/ 数据/ 更新/ 的/ 历史/ ,/ 在/ 执行/ 事务处理/ 的/ 时候/ ,/ 通过/ 修改/ 存储/ 在/ 内存/ 和/ PCM/ 中/ 的/ 元/ 数据/ 来/ 保证/ 事务/ 的/ 一致性/ 和/ 原子/ 性/ ./ 5.4/ 软硬件/ 一体化/ 的/ 数据库系统/ 传统/ 的/ 数据库/ 技术/ ,/ 数据/ 由/ 磁盘/ 读入/ 内存/ 进行/ 查询/ 、/ 对比/ 或/ 修改/ 等/ 操作/ ./ 随着/ 企业/ 业务/ 数据/ 的/ 不断/ 增长/ ,/ 大量/ 数据/ 需要/ 从/ 外存/ 读取/ 到/ 服务器/ 内存/ ,/ 这/ 已经/ 成为/ 制约/ 系统/ 性能/ 的/ 瓶颈/ ./ 另一方面/ ,/ 企业/ 数据管理/ 或者/ 数据中心/ 搭建/ 数据业务/ 处理/ 平台/ 的/ 过程/ 也/ 是/ 相当/ 复杂/ ,/ 需要/ 将/ 操作系统/ 、/ 数据管理/ 软件/ 、/ 存储/ 硬件/ 以及/ 网络/ 等/ 组件/ 优化/ 整合/ 在/ 一起/ ,/ 来/ 满足用户/ 持续/ 工作/ 的/ 高/ 可用/ 业务/ 支持/ ./ 将/ 数据库/ 、/ 存储/ 和/ 服务器/ 集成/ 在/ 一起/ 不仅/ 能够/ 为/ 企业/ 提供/ 便捷/ 安装/ 、/ 易于/ 维护/ 的/ 业务/ 开发/ 运营/ 平台/ ,/ 还/ 能/ 以/ 一种/ 优化/ 的/ 方式/ 协调/ 资源分配/ 、/ 实现/ 均衡/ 负载/ 、/ 有效/ 降低/ 应用/ 的/ 复杂性/ 、/ 提高/ 数据管理/ 的/ 性能/ ./ 数据库机/ (/ DatabaseMachine/ )/ 的/ 出现/ 为/ 解决/ 上述/ 问题/ 提供/ 了/ 一个/ 理想/ 方案/ ./ 早期/ 的/ 数据库机/ 可以/ 很/ 好/ 地/ 保证/ 数据库系统/ 和/ 操作系统/ 的/ 可靠性/ ,/ 但/ 磁盘/ 低速/ 的/ I/ // O/ 性能/ 使得/ 数据库机/ 技术/ 没有/ 得到/ 推广/ 和/ 应用/ ./ 闪存/ 的/ 出现/ 解决/ 了/ 数据库机/ I/ // O/ 瓶颈/ 问题/ ,/ 将/ 闪存/ 引入/ 数据库机/ 存储体系/ ,/ 采用/ 智能/ 缓存/ 技术/ 将/ 经常/ 访问/ 的/ 热/ 数据/ 透明/ 的/ 缓存/ 在/ 闪存/ 和/ 内存/ 中/ ,/ 而/ 活动性/ 低/ 的/ 数据/ 则/ 被/ 保留/ 在/ 低成本/ 的/ 磁盘/ ./ 目前/ Oracle/ 、/ IBM/ 等/ 相继/ 推出/ 软硬件/ 集成/ 产品/ ,/ 可以/ 预见/ 在/ 大/ 数据处理/ 和/ 分析/ 领域/ ,/ 运用/ 闪存/ 技术/ 将/ 软硬件/ 融合/ 的/ 数据库机/ 一定/ 会/ 成为/ 未来/ 数据管理/ 的/ 重要/ 技术/ ./ 6/ 结束语/ 硬件/ 技术/ 发展/ 驱动/ 软件技术/ 革命/ ,/ 闪存/ 等/ 新型/ 存储器/ 件/ 的/ 出现/ 为/ 提高/ 数据管理/ 性能/ 带来/ 了/ 机遇/ 和/ 挑战/ ./ 应用/ 新型/ 存储介质/ 解决/ 海量/ 数据管理/ 是/ 数据库/ 技术/ 未来/ 的/ 主要/ 发展/ 方向/ ./ 因此/ ,/ 针对/ 硬件/ 特性/ ,/ 设计/ 数据库/ 体系结构/ 和/ 算法/ 来/ 解决/ 数据库/ 技术/ 领域/ 中/ 查询/ 优化/ ,/ 索引/ 管理/ 、/ 事务/ 恢复/ 与/ 并发/ 控制/ 等/ 关键问题/ 是/ 非常/ 必要/ 的/ ./ 本文/ 首先/ 讨论/ 了/ 闪存/ 的/ 特性/ 和/ 闪存/ 转换/ 层/ 机制/ ;/ 对/ 基于/ 闪存/ 的/ 数据库系统/ 相关/ 研究/ 进行/ 了/ 归类/ 总结/ ;/ 详细/ 讨论/ 了/ 闪存/ 在/ 混合/ 存储/ 数据管理/ 中/ 的/ 重要/ 作用/ ./ 研究/ 适合/ 闪存/ 特性/ 的/ 数据管理/ 技术/ 是/ 数据管理/ 研究/ 领域/ 的/ 一个/ 热点/ ,/ 目前/ 该/ 领域/ 仍/ 有/ 许多/ 问题/ 需要/ 做/ 深入/ 的/ 研究/ ./ 

