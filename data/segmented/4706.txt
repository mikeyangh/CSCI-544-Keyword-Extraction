Page1/ 数据中心/ 网络/ 高效/ 数据/ 汇聚/ 传输/ 算法/ 方兴/ 1/ )/ 1/ )/ (/ 数学/ 工程/ 与/ 先进/ 计算/ 国家/ 重点/ 实验室/ 江苏/ 无锡/ 214125/ )/ 2/ )/ (/ 解放军信息工程大学/ 国家/ 数字/ 交换/ 系统工程/ 技术/ 研究/ 中心/ 郑州/ 450002/ )/ 3/ )/ (/ 信息系统/ 工程/ 国防科技/ 重点/ 实验室/ (/ 国防科学技术大学/ )/ 长沙/ 410073/ )/ 摘要/ 在/ 数据中心/ 中/ ,/ 类/ MapReduce/ 的/ 分布式计算/ 系统/ 在/ 数据/ 的/ 混洗/ 阶段/ 产生/ 巨大/ 流量/ ,/ 令/ 数据中心/ 的/ 东西向/ 网络资源/ 成为/ 瓶颈/ ./ 将/ 这些/ 高度/ 相关/ 的/ 数据流/ 在/ 接收端/ 进行/ 聚合/ 是/ 分布式计算/ 的/ 通用/ 处理/ 方式/ ,/ 为了/ 降低/ 网络通信/ 量/ 并/ 有效/ 利用/ 带宽/ ,/ 文中/ 采用/ 网/ 内/ 关联性/ 流量/ 的/ 汇聚/ 传输/ 策略/ ,/ 将/ 混洗/ 和/ 汇聚/ 并行/ 化/ ,/ 达到/ 进一步/ 降低/ 东西向/ 网络资源/ 消耗/ 、/ 缩短/ 混洗/ 阶段/ 延迟/ 的/ 目的/ ./ 目前/ 提出/ 的/ IRS/ -/ based/ 算法/ 在/ 适用/ 场景/ 上/ 有/ 一定/ 局限性/ ,/ 为了/ 解决/ 这一/ 问题/ ,/ 文中/ 首先/ 在/ 以/ 服务器/ 为/ 中心/ 的/ 代表/ 结构/ BCube/ 上/ 建立/ incast/ 最/ 小树/ 模型/ ,/ 分别/ 提出/ MIB/ -/ based/ 算法/ 和/ MC/ -/ based/ 算法/ ,/ 仅/ 根据/ 已知/ 拓扑/ 结构/ 和/ 发送/ 节点/ 编号/ 即可/ 快速/ 生成/ 一棵/ 近似/ 的/ 最小/ 代价/ incast/ 树/ ./ MIB/ -/ based/ 算法/ 针对/ 发送/ 节点/ 强/ 关联/ 的/ 情况/ ,/ 使/ 高层/ 发送/ 节点/ 尽可能/ 汇聚/ 到/ 已有/ 的/ 低层/ 发送/ 节点/ 构建/ incast/ 树/ ;/ MC/ -/ based/ 算法/ 针对/ 发送/ 节点/ 松散/ 关联/ 的/ 情况/ ,/ 将/ 节点/ 进行/ 最大/ 程度/ 上/ 的/ 聚合/ ,/ 通过/ 增加/ 最少/ 的/ 汇聚/ 点/ 完成/ incast/ 树/ 的/ 构建/ ./ 随后/ 将/ 上述/ 两种/ 算法/ 结合/ 起来/ 进一步/ 提出/ 适用/ 于/ 各种/ 场景/ 的/ M2/ -/ based/ 算法/ ,/ 通过/ 推算/ 时间/ 复杂度/ 证明/ 该/ 算法/ 能够/ 满足/ 在线/ 构建/ incast/ 树/ 的/ 需求/ ./ 最后/ ,/ 详细分析/ 了/ M2/ -/ based/ 算法/ 对/ 其他/ 数据中心/ 网络结构/ 的/ 适应性/ 以及/ 网/ 内/ 汇聚/ 传输/ 能够/ 减少/ 作业/ 完成/ 时间/ 的/ 原理/ ./ 小规模/ 实验/ 结果表明/ ,/ 在/ 不同/ 网络/ 规模/ 下/ ,/ M2/ -/ based/ 比/ IRS/ -/ based/ 节省/ 了/ 网络/ 中约/ 3/ %/ 的/ 数据量/ ,/ 整个/ 作业/ 在/ 混洗/ 和/ Reduce/ 阶段/ 的/ 等待时间/ 比/ 不/ 采用/ 网/ 内/ 汇聚/ 缩短/ 约/ 2/ // 3/ ;/ 在/ 不同/ 传输/ 节点/ 规模/ 下/ ,/ M2/ -/ based/ 比/ IRS/ -/ based/ 节省/ 了/ 网络/ 中约/ 19/ %/ 的/ 数据量/ ,/ 整个/ 作业/ 在/ 混洗/ 和/ Reduce/ 阶段/ 的/ 等待时间/ 比/ 不/ 采用/ 网/ 内/ 汇聚/ 缩短/ 约/ 3/ // 4/ ./ 关键词/ 数据中心/ ;/ 数据/ 汇聚/ ;/ 网/ 内/ 聚合/ ;/ 混洗/ 传输/ ;/ incast/ 树/ 1/ 引言/ 随着/ 分布式/ 数据处理/ 技术/ 和/ 云/ 计算/ 的/ 不断/ 发展/ ,/ 大规模/ 数据中心/ 成为/ 分布式计算/ 系统/ (/ 如/ Map/ -/ Reduce/ [/ 1/ ]/ 、/ Dryad/ [/ 2/ ]/ 、/ CIEL/ [/ 3/ ]/ 、/ Pregel/ [/ 4/ ]/ 和/ Spark/ [/ 5/ ]/ )/ 处理/ 和/ 存储/ 大/ 数据/ 的/ 平台/ ./ 在/ 数据中心/ 上/ 运行/ 的/ 应用/ 利用/ 分布式计算/ 框架/ 将/ 数据/ 分发/ 到/ 成百上千/ 台/ 服务器/ 上/ 并行执行/ ,/ 从而/ 达到/ 在/ 短时间/ 内/ 处理/ Tb/ (/ Terabyte/ )/ 级/ 以上/ 海量/ 数据/ 的/ 目的/ ./ 为了/ 确保/ 高/ 可扩展性/ ,/ 这些/ 应用/ 通常/ 采用/ 分割/ -/ 汇聚/ 的/ 操作/ 模式/ :/ 在/ 分割/ 阶段/ ,/ 主/ 节点/ 将/ 作业/ 或/ 用户/ 请求/ 分成/ 若干个/ 子/ 任务/ ,/ 发送到/ 不同/ 的/ 工作/ 节点/ 并行执行/ ,/ 每个/ 工作/ 节点/ 处理/ 一个/ 数据/ 子集/ ,/ 并/ 在/ 本地/ 生成/ 部分/ 中间/ 结果/ ;/ 在/ 汇聚/ 阶段/ ,/ 由/ 各/ 工作/ 节点/ 生成/ 的/ 庞大/ 的/ 中间/ 结果/ 集/ 被/ 分割/ 成/ 不同/ 子集/ ,/ 由/ 一个/ 或/ 多个/ 工作/ 节点/ 通过/ 聚合/ 处理/ 得到/ 最终/ 的/ 输出/ 数据/ ./ 例如/ ,/ 在/ Hadoop/ 的/ MapReduce/ 中/ ,/ 输入/ 数据/ 集/ 被/ 分割/ 并/ 分别/ 发送到/ 不同/ 的/ mapper/ 上/ 处理/ ,/ 生成/ 一系列/ 中间/ 结果/ ;/ reducer/ 把/ 具有/ 相同/ 键/ 的/ 中间/ 数据/ 合并/ 从而/ 得到/ 结果/ 数据/ ./ 可见/ ,/ 汇聚/ 阶段/ 典型/ 地/ 包括/ 一个/ 数据流/ 的/ 混洗/ (/ shuffle/ )/ 传输/ 过程/ ,/ 大量/ 工作/ 节点/ 之间/ 相互/ 通信/ ,/ 产生/ “/ 多/ 对/ 多/ ”/ 的/ 流量/ 模式/ ,/ Facebook/ 的/ 数据中心/ 显示/ 在/ 汇聚/ 阶段/ 产生/ 的/ 网络流量/ 占/ 总流量/ 的/ 46/ %/ [/ 6/ ]/ ,/ 许多/ 研究/ 均/ 表明/ ,/ 这一/ 巨大/ 的/ 网络流量/ 使/ 网络/ 传输/ 成为/ MapReduce/ 应用/ 的/ 性能/ 瓶颈/ [/ 7/ -/ 9/ ]/ ./ 例如/ ,/ 在/ Facebook/ 的/ 所有/ 包含/ Reduce/ 阶段/ 的/ MapReduce/ 作业/ 中/ ,/ 网络/ 传输/ 占/ 总/ 运行/ 时间/ 的/ 33/ %/ ,/ 在/ 26/ %/ 的/ 作业/ 中/ ,/ 传输/ 占据/ 50/ %/ 以上/ 的/ 运行/ 时间/ ,/ 有/ 16/ %/ 的/ 作业/ ,/ 传输/ 甚至/ 占据/ 其/ 70/ %/ 以上/ 的/ 运行/ 时间/ [/ 6/ ]/ ./ 产生/ 上述/ 瓶颈/ 的/ 原因/ 主要/ 有/ 以下几点/ ,/ 首先/ ,/ 现代/ 数据中心/ 的/ 内部/ 流量/ 已/ 从/ 传统/ 的/ “/ 南北/ 流量/ ”/ 为主/ 演变/ 为/ “/ 东西/ 流量/ ”/ 为主/ ,/ 而/ MapReduce/ 作业/ 造成/ 的/ 大量/ 流量/ 令/ 数据中心/ 的/ 东西向/ 网络资源/ 成为/ 瓶颈/ ;/ 其次/ ,/ 传统/ 数据中心/ 网络/ 的/ 带宽/ 收敛/ 比较/ 高/ ,/ 大大/ 限制/ 了/ 混洗/ 过程/ 的/ 数据/ 传输率/ ,/ 如/ 汇聚/ 层/ 通常/ 为/ 51/ ,/ 即/ 在/ 一些/ 通信/ 模式/ 下/ 汇聚/ 层/ 的/ 可用/ 带宽/ 仅为/ 服务器端/ 的/ 20/ %/ ,/ 而/ 核心层/ 则/ 高达/ 801/ ,/ 甚至/ 2401/ [/ 7/ ]/ ;/ 再者/ ,/ 服务器端/ 有限/ 的/ 可用/ 带宽/ (/ 通常/ 最多为/ 1Gbps/ 或/ 10Gbps/ )/ 成为/ “/ 多/ 对/ 多/ ”/ 通信/ 的/ 瓶颈/ ;/ 最后/ ,/ 普通/ 商业/ 交换机/ 的/ 可用/ 缓存/ 空间/ 较/ 小/ ,/ 当/ 多台/ 服务器/ 同时/ 向/ 一台/ 服务器/ 传输/ 大量/ 数据/ 时/ 往往/ 造成/ Page3/ 交换机/ 的/ 缓冲区/ 溢出/ 而/ 发生/ 丢包/ ,/ 从而/ 导致/ 网络/ 吞吐量/ 急剧下降/ ,/ 即/ 典型/ 的/ TCPIncast/ [/ 10/ ]/ 问题/ ./ 现存/ 的/ 解决/ 这些/ 问题/ 的/ 方法/ 主要/ 包括/ 采用/ 全/ 二分/ 带宽/ 拓扑/ 结构/ 消除/ 网络/ 的/ 带宽/ 收敛/ 比以/ 增加/ 网络/ 的/ 可用/ 带宽/ ,/ 如/ VL2/ [/ 7/ ]/ 、/ PortLand/ [/ 11/ ]/ 、/ BCube/ [/ 12/ ]/ 、/ DCell/ [/ 8/ ]/ 等/ ,/ 或/ 通过/ 数据/ 迁移/ 避免/ 网络/ 热点/ ,/ 如/ Hedera/ [/ 9/ ]/ ./ 然而/ ,/ 上述/ 方法/ 都/ 未能/ 减少/ 网络/ 的/ 通信量/ ,/ 使得/ 性能/ 还是/ 受限于/ 终端服务器/ 的/ 可用/ 带宽/ ,/ 尽管/ 目前/ 许多/ 数据中心/ 已经/ 升级/ 到/ 10G/ 网络/ ,/ 但/ 鉴于/ 成本/ 因素/ 和/ 更/ 高/ 的/ 带宽/ 收敛/ 比/ ,/ 全面/ 更新/ 到/ 40G/ 网络/ 仍然/ 需要/ 相当/ 长/ 的/ 一段时间/ ./ 再者/ ,/ 由于/ 缺乏/ 任务/ 级/ 的/ 调度/ 策略/ 我们/ 仍/ 不能/ 很/ 好/ 地/ 处理/ 流/ 的/ 聚合/ 行为/ ./ 因为/ 在/ MapReduce/ 中/ ,/ 通常/ 只有/ 接收/ 到/ Map/ 阶段/ 处理/ 的/ 所有/ 数据/ ,/ Reduce/ 阶段/ 的/ 处理过程/ 方可/ 开始/ ,/ 如果/ 将/ 一次/ 传输/ 定义/ 为/ 在/ 任务/ 的/ 两个/ 连续/ 阶段/ 中/ 通过/ 一组/ 数据流/ ,/ 则/ 整个/ 任务/ 的/ 运行/ 时间/ 不是/ 由/ 单个/ 流/ 的/ 持续时间/ 决定/ ,/ 而是/ 依赖于/ 完成/ 整个/ 传输/ 所/ 花费/ 的/ 时间/ ./ 在/ 分布式计算/ 框架/ 中/ ,/ 任务/ 节点/ 间/ 的/ 唯一/ 通信/ 过程/ 发生/ 在/ 混洗/ 传输/ 阶段/ ./ 通过/ 网络/ 和/ 计算资源/ 联合/ 实现/ 网/ 内/ 关联性/ 流量/ 的/ 聚合/ ,/ 能够/ 极大/ 降低/ 对/ 稀缺/ 的/ 东西向/ 网络资源/ 的/ 消耗/ ,/ 避免/ MapReduce/ 作业/ 在/ 混洗/ 阶段/ 产生/ 太长/ 的/ 等待/ 延迟/ ./ 由于/ “/ 多/ 对/ 多/ ”/ 混洗/ 传输/ 由/ 一组/ 互不/ 相关/ 的/ “/ 多/ 对/ 一/ ”/ incast/ 传输/ 组成/ ,/ 因此/ ,/ 我们/ 通过/ 优化/ incast/ 传输/ 实现/ 高效/ 混洗/ 传输/ ./ 本文/ 利用/ 数据中心/ 网络/ 的/ 拓扑/ 特性/ 建立/ 高效/ 的/ incast/ 数据/ 汇聚/ 树/ ,/ 将/ 混洗/ 和/ 汇聚/ 并行/ 化/ ,/ 在/ 传输数据/ 的/ 同时/ 聚合/ 数据流/ ,/ 从而/ 减少/ 网络/ 中/ 传输/ 的/ 数据量/ 并/ 提高/ 网络/ 性能/ ./ 然而/ ,/ 最小/ 代价/ incast/ 树/ 的/ 构造/ 是/ 个/ NP/ 难/ 问题/ ,/ 最近/ 提出/ 的/ 算法/ IRS/ -/ based/ [/ 13/ ]/ 在/ incast/ 成员/ 节点/ 的/ 推算/ 上/ 仍/ 具有/ 一定/ 的/ 随机性/ ,/ 导致/ 各层/ 新增/ 许多/ 不必要/ 的/ 汇聚/ 节点/ ,/ 从而/ 增加/ 了/ 数据流/ 和/ 链路/ 代价/ ./ 为了/ 解决/ 上述/ 问题/ ,/ 本文/ 首先/ 提出/ 了/ 两种/ 分别/ 适用/ 于/ 不同/ 场景/ 的/ 最小/ 代价/ incast/ 树/ 构建/ 算法/ MIB/ -/ based/ 和/ MC/ -/ based/ ./ MIB/ -/ based/ 算法/ 针对/ 发送/ 节点/ 强/ 关联/ 的/ 情况/ ,/ 使/ 高层/ 发送/ 节点/ 尽可能/ 汇聚/ 到/ 已有/ 的/ 低层/ 发送/ 节点/ 构建/ incast/ 树/ ;/ MC/ -/ based/ 算法/ 针对/ 发送/ 节点/ 松散/ 关联/ 的/ 情况/ ,/ 将/ 节点/ 进行/ 最大/ 程度/ 上/ 的/ 聚合/ ,/ 通过/ 增加/ 最少/ 的/ 汇聚/ 点/ 完成/ incast/ 树/ 的/ 构建/ ./ 将/ 上述/ 两种/ 算法/ 结合/ 起来/ 进一步/ 提出/ 了/ M2/ -/ based/ 算法/ ,/ 在/ 任何/ 场景/ 下/ 能够/ 在/ 更/ 大程度/ 上/ 减小/ 网络/ 中/ 传输/ 的/ 数据量/ ,/ 且/ 仍然/ 能够/ 在/ 较/ 短时间/ 内/ 完成/ 数据中心/ 的/ 混洗/ 传输/ ./ 同时/ ,/ 本文/ 提出/ 的/ 方法/ 同样/ 适用/ 于/ 以/ 交换机/ 为/ 中心/ 的/ FBFLY/ 和/ HyperX/ 等/ 基于/ Generalizedhypercube/ [/ 14/ ]/ 的/ 网络结构/ ./ 2/ 研究/ 背景/ 及/ 相关/ 工作/ 2.1/ 数据中心/ 网络结构/ 现有/ 的/ 数据中心/ 网络/ 主要/ 依靠/ 交换机/ 、/ 汇聚/ 交换机/ 、/ 核心/ 交换机/ // 路由器/ 将/ 服务器/ 连接起来/ 构成/ 树形/ 结构/ ,/ 然而/ 树形/ 结构/ 的/ 高带宽/ 收敛/ 比/ (/ oversub/ -/ scription/ )/ 使/ 其/ 很/ 难/ 达到/ 数据中心/ 网络/ 所/ 追求/ 的/ 高/ 可/ 扩展/ 、/ 容错性/ 好/ 、/ 高/ 聚集/ 带宽/ 等/ 目标/ ./ 因为/ 树型/ 结构/ 的/ 高层/ 核心/ 交换机/ // 路由器/ 构成/ 网络/ 的/ 流量/ 瓶颈/ ,/ 所以/ 在/ 扩展/ 系统/ 时/ ,/ 往往/ 需要/ 更换/ 为/ 更/ 高端/ 的/ 交换机/ ;/ 而且/ 树型/ 结构/ 的/ 容错性/ 也/ 不/ 理想/ ,/ 容易/ 出现/ 单点故障/ ;/ 与此同时/ ,/ 许多/ 应用服务/ ,/ 如/ 搜索引擎/ 等/ 对/ 服务器/ 间/ 数据交换/ 的/ 带宽/ 要求/ 越来越/ 高/ ,/ 因此/ ,/ 研究/ 人员/ 针对/ 传统/ 数据中心/ 网络结构/ 的/ 固有/ 缺陷/ ,/ 提出/ 了/ 一些/ 新/ 的/ 架构设计/ 方案/ ./ 目前/ 提出/ 的/ 数据中心/ 网络结构/ 主要/ 分为/ 两大类/ ,/ 即以/ 交换机/ 为/ 中心/ 的/ 结构/ 和/ 以/ 服务器/ 为/ 中心/ 的/ 结构/ ./ 在/ 以/ 交换机/ 为/ 中心/ 的/ 结构/ 中/ ,/ 网络连接/ 和/ 路由/ 功能/ 主要/ 由/ 交换机/ 完成/ ./ Fat/ -/ Tree/ [/ 15/ ]/ 、/ VL2/ 和/ Port/ -/ Land/ 中/ 交换机/ 彼此/ 互连/ 成/ 各种/ 树形/ 结构/ ,/ 服务器/ 仅/ 通过/ 一个/ NIC/ 端口/ 与/ 接入/ 层交换机/ 相连/ ,/ 这种/ 结构/ 通过/ 在/ 树形/ 结构/ 上层/ 横向/ 增加/ 更/ 多/ 的/ 交换机/ 来/ 提供/ 网络/ 冗余/ ,/ 故/ 称之为/ 以/ 交换机/ 为/ 中心/ 的/ 类/ 树结构/ ./ 为/ 克服/ 类/ 树结构/ 的/ 固有/ 弊端/ ,/ 研究/ 人员/ 又/ 提出/ 了/ 两种/ 以/ 交换机/ 为/ 中心/ 的/ 扁平/ 结构/ FBFLY/ [/ 16/ ]/ 和/ HyperX/ [/ 17/ ]/ ,/ 其/ 基本/ 思想/ 是/ 将/ 高基/ 交换机/ 互连/ 成/ 一个/ GeneralizedHypercube/ 结构/ ,/ 每个/ 交换机/ 的/ 剩余/ 端口/ 连接/ 一些/ 服务器/ ./ 由于/ 所有/ 链路/ 和/ 交换机/ 被/ 公平/ 使用/ ,/ 所以/ 与/ 类/ 树结构/ 相比/ 扁平/ 结构/ 本身/ 不/ 存在/ 性能/ 瓶颈/ ./ 在/ 以/ 服务器/ 为/ 中心/ 的/ 结构/ 中/ ,/ 主要/ 的/ 互连/ 和/ 路由/ 功能/ 由/ 服务器/ 完成/ ./ 这类/ 拓扑/ 结构/ 中/ ,/ 服务器/ 通常/ 采用/ 多个/ NIC/ 端口/ 接入/ 并/ 连接/ 网络/ ,/ 使得/ 网络/ 具有/ 大量/ 冗余/ 的/ 链路/ 和/ 平行/ 路径/ 以/ 支持/ 各种类型/ 的/ 流量/ 模式/ ./ 他们/ 或者/ 仅/ 将/ 交换机/ 作为/ 类似/ 于/ crossbar/ 的/ 交换/ 功能/ 使用/ ,/ 如/ DCell/ 、/ BCube/ 、/ FiConn/ [/ 18/ ]/ 和/ HCN/ [/ 19/ ]/ ;/ 或者/ 不/ 使用/ 任何/ 交换机/ 构建/ 网络/ ,/ 如/ CamCube/ [/ 20/ ]/ ./ 在/ 上述/ 两类/ 结构/ 中/ ,/ FBFLY/ 和/ BCube/ 最具/ 代表性/ ./ FBFLY/ 是/ 一个/ 利用/ 高/ 基数/ 交换机/ 构建/ 的/ 易/ 扩展/ 、/ 低/ 直径/ 的/ 多维/ 直接/ 网络/ ./ FBFLY/ 中/ 的/ 所有/ 交换机/ 在/ 各个/ 维上/ 与/ 其他/ 所有/ 交换机/ 互连/ ,/ 剩余/ 端口/ 连接/ 服务器/ ,/ 任何/ 两个/ 服务器之间/ 不/ 直接/ 相连/ ./ k/ 元/ n/ 维/ 的/ FBFLY/ 同构/ 于/ k/ 元/ n/ 立方/ 网络/ torus/ ,/ 不同/ 的/ 是/ ,/ torus/ 中/ 各维/ 互连/ 成/ 一个/ 环形/ 结构/ ,/ 而/ FBFLY/ 中/ 各/ Page4/ 维全/ 互连/ ./ 例如/ ,/ FBFLY/ (/ c/ ,/ k/ ,/ n/ )/ 网络/ 中共/ 包括/ ckn/ -/ 1/ 台/ 服务器/ 和/ kn/ -/ 1/ 个/ k/ 口/ 交换机/ ,/ 每个/ 交换机/ 连接/ 的/ 服务器/ 个数/ 为/ c/ ./ BCube/ 针对/ 模块化/ 数据中心/ 设计/ ,/ 其/ 典型/ 规模/ 为/ 1K/ ~/ 4K/ ./ BCube/ 结构/ 以/ 迭代/ 方式/ 构建/ ,/ BCube/ (/ n/ ,/ k/ )/ 同构/ 于/ n/ 元/ k/ +/ 1/ 维/ 的/ GeneralizedHypercube/ 结构/ ,/ 不同/ 的/ 是/ ,/ GeneralizedHypercube/ 结构/ 中/ 的/ 所有/ 邻居/ 服务器/ 直接/ 相连/ ,/ 而/ BCube/ 中/ 的/ 图/ 1BCube/ (/ 4/ ,/ 1/ )/ 结构/ 2.2/ 数据中心/ 网/ 内/ 数据/ 汇聚/ 在/ 许多/ 分布式计算/ 应用/ 中/ ,/ 数据/ 在/ 接收端/ 汇聚/ ,/ 输出/ 数据/ 的/ 大小/ 仅/ 是/ 输入/ 数据/ 的/ 一小部分/ ./ 以/ MapReduce/ 为例/ ,/ 在/ 混洗/ 传输/ 阶段/ ,/ 从/ 所有/ 发送/ 节点/ 传输/ 到/ 某/ 相应/ 接收/ 节点/ 的/ 数据流/ 是/ 高度/ 相关/ 的/ ,/ 也就是说/ ,/ 对/ 每个/ incast/ 传输/ ,/ 相同/ 接收/ 节点/ 的/ key/ // value/ 对/ 拥有/ 相同/ 的/ key/ 值/ ,/ 因此/ ,/ 通常/ 在/ 接收端/ 应用/ 一个/ 汇聚/ 函数/ (/ sum/ ,/ maximum/ ,/ minimum/ ,/ count/ ,/ top/ -/ k/ 和/ KNN/ )/ 把/ 具有/ 相同/ 键/ 的/ 中间/ 数据/ 合并/ 生成/ 结果/ 数据/ ./ 研究/ 表明/ 在/ Google/ 的/ MapReduce/ 中/ ,/ 平均/ 输出/ 数据/ 占/ 中间/ 数据/ 集/ 大小/ 的/ 40.3/ %/ [/ 1/ ]/ ,/ 同样/ 的/ 应用/ 在/ Facebook/ 中/ ,/ 从/ 中间/ 数据/ 集到/ 输出/ 数据/ 的/ 数据量/ 减少/ 了/ 81.7/ %/ [/ 21/ ]/ ,/ 而/ 在/ Yahoo/ 中/ ,/ 数据量/ 更是/ 减少/ 了/ 90.5/ %/ [/ 21/ ]/ ./ 这些/ 数据/ 说明/ 在/ 接收端/ 执行/ 数据/ 汇聚/ 操作/ 能够/ 缩减/ 数据量/ 的/ 规模/ ,/ 受此/ 启发/ ,/ 如果/ 在/ 混洗/ 阶段/ 执行/ 相同/ 的/ 数据/ 汇聚/ 操作/ ,/ 还/ 能够/ 进一步/ 减少/ 网络/ 中/ 的/ 流量/ ,/ 如图/ 2/ 所示/ ./ 图/ 2Incast/ 传输/ 阶段/ 构建/ 数据/ 汇聚/ 树/ 的/ 示意图/ 邻居/ 服务器之间/ 均/ 通过/ 交换机/ 相连/ ./ BCube/ (/ n/ ,/ 0/ )/ 由/ n/ 个/ 服务器/ 连接/ 一个/ n/ 口/ 交换机/ 构成/ ,/ BCube/ (/ n/ ,/ k/ )/ 由/ n/ 个/ BCubek/ -/ 1/ 连接/ nk/ 个/ n/ 口/ 交换机/ 构成/ ./ 每个/ BCube/ (/ n/ ,/ k/ )/ 具有/ k/ +/ 1/ 个/ 网络/ 端口/ ./ 具有/ 多个/ 网络/ 端口/ 的/ 服务器/ 连接/ 到/ 多个/ 层次/ 的/ 小型/ 交换机/ ,/ 任何/ 两个/ 服务器之间/ 没有/ 直接/ 连接/ ./ 图/ 1/ 所示/ 为/ BCube/ (/ 4/ ,/ 1/ )/ 结构/ ,/ 包括/ 16/ 台/ 服务器/ 和/ 两/ 层交换机/ ./ 特别/ 是/ 在/ 以/ 服务器/ 为/ 中心/ 的/ 数据中心/ 网络/ 中/ ,/ 服务器/ 可/ 使用/ 集成/ 有/ 交换机/ 芯片/ 的/ PCI/ 网卡/ Server/ -/ Switch/ ,/ 他/ 不但/ 具备/ 传统/ 交换机/ 的/ 能力/ 而且/ 能/ 通过/ 高速/ PCI/ 口/ 实现/ CPU/ 和/ ServerSwitch/ [/ 22/ ]/ 的/ 高速/ 互联/ ,/ 能/ 借助/ 服务器/ 强大/ 的/ 计算能力/ 甚至/ 存储/ 能力/ 实现/ 对/ 网络流量/ 的/ 深入分析/ 处理/ 和/ 对/ 数据流/ 的/ 网内/ 存储/ 、/ 聚合/ 等/ 功能/ ./ 然而/ 当前/ 数据中心/ 的/ 网内/ 关联性/ 流量/ 聚合/ 方面/ 的/ 研究/ 工作/ 依然/ 很/ 欠缺/ ./ Costa/ 等/ 人/ [/ 23/ ]/ 针对/ CamCube/ 结构设计/ 了/ 一个/ 类/ MapReduce/ 的/ 系统/ Camdoop/ ,/ 在/ Camdoop/ 中/ ,/ 服务器/ 使用/ getParent/ 函数/ 计算/ incast/ 树/ 拓扑/ ,/ 给定/ 接收/ 节点/ R/ 和/ 一个/ 发送/ 节点/ (/ 或/ 中间/ 节点/ )/ S/ ,/ getParent/ 函数/ 返回/ S/ 的/ 6/ 个/ 邻居/ 中距离/ R/ 最近/ 的/ 一个/ ,/ 因此/ ,/ 在/ 一棵/ incast/ 树中/ ,/ 由/ 每个/ 发送/ 节点/ 传输/ 的/ 数据流/ 各自/ 沿着/ 不/ 相关/ 的/ 路由/ 路径/ 发送/ ,/ 类似/ 于/ 基于/ 单播/ 汇聚/ 树/ 传输/ 的/ 方法/ ,/ 这种/ 方法/ 难以实现/ 中间/ 数据流/ 的/ 有效/ 汇聚/ ,/ 从而/ 很难/ 有效/ 减少/ 网络流量/ ;/ Guo/ 等/ 人/ 针对/ incast/ 汇聚/ 传输/ 提出/ 了/ 一个/ 近似/ 的/ 优化/ 算法/ IRS/ -/ based/ ./ 在/ incast/ 树中/ ,/ 每/ 一个/ 中间/ 节点/ 都/ 有/ 若干/ 流/ 输入/ 和/ 一个/ 流/ 输出/ ,/ 较少/ 的/ 中间/ 节点/ 则/ 意味着/ 较少/ 的/ 数据流/ ,/ 因此/ ,/ IRS/ -/ based/ 算法/ 试图/ 在/ 每/ 一层/ 中/ 寻找/ 包含/ 最少/ 节点/ 的/ 服务器/ 集合/ ./ 然而/ ,/ 该/ 算法/ 在/ 逐层/ 推算/ 汇聚/ 点时/ 没有/ 考虑/ 低层/ 已有/ 的/ 发送/ 节点/ ,/ 也就是说/ ,/ IRS/ -/ based/ 算法/ 通过/ 对/ 上/ 一层/ 节点/ 的/ 同一/ 维/ 进行/ 调整/ 来/ 生成/ 下/ 一层/ 节点/ ,/ 没有/ 考虑/ 上/ 一层/ 节点/ 与/ 位于/ 下层/ 的/ 已有/ 节点/ 直接/ 聚合/ 的/ 可能/ ,/ 从而/ 导致/ 新增/ 一些/ 不必要/ 的/ 节点/ ./ 为此/ ,/ 本文/ 提出/ 了/ 一种/ 新/ 的/ 计算/ 最小/ 代价/ incast/ 树/ Page5/ 的/ 高效/ 算法/ M2/ -/ based/ ,/ 该/ 算法/ 充分考虑/ 高层/ 发送/ 节点/ 能够/ 直接/ 汇聚/ 到/ 已有/ 的/ 低层/ 发送/ 节点/ 的/ 情况/ ,/ 仅/ 根据/ 已知/ 拓扑/ 结构/ 和/ 节点/ 编号/ 即可/ 快速/ 生成/ 一棵/ 近似/ 的/ 最小/ 代价/ incast/ 树/ ./ 相对/ 于/ IRS/ -/ based/ 算法/ ,/ M2/ -/ based/ 占用/ 更少/ 的/ 数据中心/ 资源/ ,/ 且/ 能够/ 在/ 较/ 短时间/ 内/ 进一步/ 减小/ 网络/ 中/ 传输/ 的/ 数据量/ ./ 3/ 数据中心/ 关联性/ 流量/ 的/ 网内/ 聚合/ 算法/ 3.1/ 问题/ 描述/ 给定/ 发送/ 节点/ 集/ {/ S1/ ,/ S2/ ,/ …/ ,/ Sm/ }/ 和/ 接收/ 节点/ R/ ,/ 在/ incast/ 传输/ 阶段/ ,/ 从/ 各/ 发送/ 节点/ 到/ R/ 的/ 消息/ 路由/ 本质/ 上/ 形成/ 一棵/ 汇聚/ 树/ ./ 在/ 富/ 连接/ 数据中心/ 网络/ (/ 如/ BCube/ )/ 中/ 存在/ 许多/ 棵/ 路由/ 成本/ 不尽相同/ 的/ 汇聚/ 树/ ,/ 我们/ 面临/ 的/ 挑战/ 是/ 如何/ 构建/ 一棵/ 使/ 网络/ 内/ 传输/ 的/ 数据量/ 尽可能/ 最小/ 的/ 汇聚/ 树/ ,/ 即/ 最小/ 代价/ incast/ 树/ ./ 假设/ 数据中心/ 网络结构/ 以图/ G/ =/ (/ V/ ,/ E/ )/ 表示/ ,/ 其中/ ,/ V/ 是/ 网络/ 中/ 节点/ 的/ 集合/ ,/ E/ 是/ 连接/ 节点/ 的/ 边/ 的/ 集合/ ./ 节点/ 对应/ 数据中心/ 的/ 交换机/ 或/ 服务器/ ,/ 边/ (/ u/ ,/ v/ )/ 定义/ 一条/ 从/ u/ 到/ v/ 的/ 链路/ ,/ 则/ 最小/ 代价/ incast/ 树/ 的/ 建立/ 问题/ 可/ 形式化/ 描述/ 为/ 在/ G/ =/ (/ V/ ,/ E/ )/ 中/ 寻找/ 一个/ 包括/ 所有/ 发送/ 节点/ 集/ 和/ 接收/ 节点/ 的/ 最小/ 代价/ 连通/ 子图/ ,/ 使得/ 该/ 连通/ 子图/ 上/ 的/ 链路/ 代价/ 之/ 和/ 最小/ ./ 以/ BCube/ 结构/ 为例/ ,/ 给出/ 如下/ 定义/ ./ 定义/ 1/ ./ 在/ BCube/ (/ n/ ,/ k/ )/ 中/ ,/ 如果/ 两台/ 服务器/ 的/ 编号/ xkxk/ -/ 1/ …/ x1x0/ 和/ ykyk/ -/ 1/ …/ y1y0/ 仅/ 在/ 第/ j/ (/ j/ ∈/ [/ 0/ ,/ k/ ]/ )/ 维/ 不同/ ,/ 则/ 称/ 它们/ 为/ j/ 维/ 1/ 跳/ 邻居/ 服务器/ ,/ 其中/ ,/ xi/ ,/ yi/ ∈/ {/ 0/ ,/ 1/ ,/ …/ ,/ n/ -/ 1/ }/ ,/ i/ ∈/ [/ 0/ ,/ k/ ]/ ./ 每台/ 服务器/ 在/ 每个/ 维度/ 都/ 有/ n/ -/ 1/ 个/ 1/ 跳/ 邻居/ 服务器/ ,/ 且/ 所有/ j/ 维/ 1/ 跳/ 邻居/ 服务器/ 共同/ 连接/ 到/ 第/ j/ 层交换机/ 上/ ,/ 因此/ ,/ 将/ 任意/ 两台/ 编号/ 在/ j/ 个/ 维度/ 都/ 不/ 相同/ 的/ 服务器/ 称为/ j/ 跳/ 邻居/ 服务器/ ./ 令/ 接收/ 节点/ 编号/ 为/ rkrk/ -/ 1/ …/ r1r0/ ,/ 一个/ 发送/ 节点/ 的/ 编号/ 为/ sksk/ -/ 1/ …/ s1s0/ ,/ 其中/ ri/ ,/ si/ ∈/ {/ 0/ ,/ 1/ ,/ …/ ,/ n/ -/ 1/ }/ ,/ i/ ∈/ [/ 0/ ,/ k/ ]/ ,/ 则/ 接收/ 节点/ 和/ 每个/ 发送/ 节点/ 间/ 的/ 海明/ 距离/ 最多为/ k/ +/ 1/ ./ 因此/ ,/ 所有/ 发送/ 节点/ 和/ 接收/ 节点/ 间/ 的/ 最/ 短/ 路径/ 组成/ 一个/ 具有/ k/ +/ 2/ 层/ 的/ 多层/ 有向图/ ,/ 如图/ 3/ 所示/ ./ 第/ 0/ 层仅/ 包括/ 接收/ 节点/ ;/ 第/ k/ +/ 1/ 层仅/ 包括/ 发送/ 节点/ ;/ 第/ j/ (/ j/ ∈/ [/ 1/ ,/ k/ +/ 1/ ]/ )/ 层/ 的/ 服务器/ 节点/ 是/ 接收/ 节点/ 的/ j/ 跳/ 邻居/ ./ 一般/ 地/ ,/ 只有/ 发送/ 节点/ 和/ 接收/ 节点/ 无法/ 形成/ 一个/ 确定/ 的/ 连通/ 子图/ ,/ 即/ 无法/ 构建/ 一棵/ incast/ 树/ ,/ 那么/ ,/ 如何/ 在/ 第/ k/ 层到/ 第/ 1/ 层中/ 适当/ 地/ 选择/ 一些/ 中间/ 节点/ 使/ incast/ 树/ 的/ 代价/ 最小/ 成为/ 解决问题/ 的/ 关键/ ./ 文献/ [/ 13/ ]/ 已经/ 证明/ 在/ BCube/ 网络/ 中/ 建立/ 最小/ incast/ 树/ 问题/ 是/ 一个/ NP/ 难/ 问题/ ,/ 因此/ ,/ 本文/ 的/ 目标/ 是/ 寻找/ 一种/ 高效/ 的/ 近似算法/ ,/ 仅/ 根据/ 已知/ 拓扑/ 结构/ 以及/ 发送/ 节点/ 和/ 接收/ 节点/ 的/ 编号/ 即可/ 快速/ 生成/ 一棵/ 近似/ 的/ 最小/ 代价/ incast/ 树/ ./ 图/ 3BCube/ (/ 4/ ,/ 1/ )/ 结构/ 中/ ,/ 发送/ 节点/ 11/ 、/ 21/ 、/ 22/ 、/ 3.2/ MIB/ -/ based/ 算法/ 在/ incast/ 树中/ ,/ 每/ 新增/ 一个/ 汇聚/ 节点/ ,/ 所有/ 经过/ 该/ 节点/ 的/ 输入/ 流将/ 汇聚/ 为/ 一个/ 输出/ 流/ ,/ 那么/ ,/ 汇聚/ 节点/ 数量/ 越/ 少/ ,/ 输出/ 的/ 流/ 的/ 数量/ 则/ 越少/ ,/ 从而/ 网络/ 中/ 传输/ 的/ 数据流/ 的/ 总数/ 越少/ ./ 因此/ ,/ 一个/ 近似/ 的/ 优化/ 策略/ 为/ 使/ 高层/ 发送/ 节点/ 尽可能/ 汇聚/ 到/ 已有/ 的/ 低层/ 发送/ 节点/ ,/ 即/ 尽量/ 使/ 各层/ 中除/ 发送/ 节点/ 外/ 的/ 新增/ 汇聚/ 节点/ 数/ 最少/ ./ 首先/ 给出/ 如下/ 定义/ ./ 定义/ 2/ ./ 发送/ 节点/ 共有/ l/ (/ l/ ∈/ [/ 1/ ,/ k/ +/ 1/ ]/ )/ 层/ ,/ 节点/ A/ 位于/ 第/ l/ (/ l/ ∈/ [/ 1/ ,/ m/ )/ )/ 层/ ,/ 则/ 将/ 第/ l/ +/ 1/ 层到/ 第/ l/ 层中/ 与/ 节点/ A/ 的/ 编号/ 依次/ 相差/ j/ (/ j/ ∈/ [/ 1/ ,/ l/ -/ l/ ]/ )/ 维/ 的/ 发送/ 节点/ 称为/ 节点/ A/ 的/ 相关/ 发送/ 节点/ ,/ 其中/ ,/ 位于/ 第/ l/ (/ l/ ∈/ [/ l/ +/ 1/ ,/ l/ ]/ )/ 层/ 的/ 节点/ 称为/ 节点/ A/ 的/ 第/ l/ -/ l/ 层/ 相关/ 发送/ 节点/ ./ 定义/ 3/ ./ 由/ 节点/ A/ 及其/ 相关/ 发送/ 节点/ 构成/ 的/ 节点/ 集/ 称为/ 一组/ incast/ 树/ 分支/ ./ 定义/ 4/ ./ 在/ 一组/ incast/ 树/ 分支/ 节点/ 中/ ,/ 如果/ 除/ 最低/ 层外/ 的/ 其他/ 节点/ 都/ 不能/ 再/ 形成/ 新/ 的/ incast/ 树/ 分支/ ,/ 则/ 称/ 该/ incast/ 树/ 分支/ 为/ 最小/ incast/ 树/ 分支/ ./ 例如/ ,/ 图/ 3/ 中/ 11/ 和/ 21/ 是/ 01/ 的/ 第/ 1/ 层/ 相关/ 发送/ 节点/ ,/ 32/ 是/ 02/ 的/ 第/ 1/ 层/ 相关/ 发送/ 节点/ ,/ 因此/ 节点/ 集/ {/ 11/ ,/ 21/ ,/ 01/ }/ 和/ {/ 32/ ,/ 30/ }/ 构成/ 2/ 组/ incast/ 树/ 分支/ ,/ 且/ 均/ 为/ 最小/ incast/ 树/ 分支/ ./ 由/ 上述/ 定义/ 可知/ ,/ 最小/ incast/ 树/ 分支/ 由/ 一系列/ 相关/ 发送/ 节点/ 构成/ ,/ 位于/ 不同/ 层次/ 的/ 相关/ 发送/ 节点/ 之间/ 其/ 编号/ 相差/ 的/ 位数/ 即/ 为/ 层次/ Page6/ 差/ ./ 因此/ ,/ 构建/ 最小/ incast/ 树/ 分支/ 的/ 过程/ 即/ 为/ 从/ 最低/ 层/ 发送/ 节点/ 开始/ ,/ 自/ 底向上/ 寻找/ 相关/ 发送/ 节点/ 集/ 的/ 过程/ ,/ 如/ 算法/ 1/ 所示/ ./ 算法/ 1/ ./ BuildIncastMinimalBranch/ 函数/ ./ 输入/ :/ 接收/ 节点/ R/ ,/ 第/ l/ 层/ 第/ x/ 个/ 发送/ 节点/ Sl/ [/ x/ ]/ 输出/ :/ 第/ l/ 层/ 第/ x/ 个/ 发送/ 节点/ 的/ 最小/ incast/ 树/ 分支/ 数/ 1/ ./ IFSl/ >/ 02/ ./ THENFindMutualNode/ (/ R/ ,/ S/ )/ 3/ ./ FORi/ ←/ 0toIl/ ./ lengthDO4/ ./ BuildIncastMinimalBranch/ (/ R/ ,/ Il/ )/ FindMutualNode/ (/ R/ ,/ S/ )/ 1/ ./ FORi/ ←/ 0toSl/ ./ lengthDO2/ ./ FORj/ ←/ 0toSl/ ./ lengthDO3/ ./ IFSl/ [/ i/ ]/ 是/ Sl/ [/ j/ ]/ 的/ (/ l/ -/ l/ )/ -/ 跳/ 邻居/ ;/ 4/ ./ 将/ 发送/ 节点/ Sl/ [/ j/ ]/ 添加/ 到/ Il/ [/ i/ ]/ ;/ 在/ 算法/ 1/ 中/ ,/ 从/ 给定/ 发送/ 节点/ 集/ 的/ 最低/ 层起/ ,/ 对/ 每/ 一个/ 节点/ 逐层/ 查找/ 其/ 相关/ 发送/ 节点/ ,/ 这些/ 具有/ 高度/ 相关性/ 的/ 发送/ 节点/ 构成/ 一组/ incast/ 树/ 分支/ ,/ 并/ 存入/ 相应/ 节点/ 的/ incast/ 树/ 分支/ 数组/ ,/ 最终/ 将/ 给定/ 发送/ 节点/ 集/ 分割/ 成/ 若干组/ 最小/ incast/ 树/ 分支/ ./ 因此/ ,/ 在/ 每/ 一组/ 最小/ incast/ 树/ 分支/ 中/ ,/ 如何/ 通过/ 增加/ 最少/ 的/ 汇聚/ 节点/ 将/ 这些/ 具有/ 高度/ 相关性/ 的/ 发送/ 节点/ 连接起来/ ,/ 即将/ 最小/ incast/ 树/ 分支/ 构成/ 一棵/ 最小/ 代价/ incast/ 树/ 分支/ 成为/ 解决问题/ 的/ 关键/ ./ 定理/ 1/ 给出/ 最小/ incast/ 树/ 分支/ 中/ 位于/ 各个/ 层次/ 的/ 发送/ 节点/ 的/ 编号/ 规律/ 和/ 汇聚/ 关系/ ./ 定理/ 1/ ./ 在/ 一组/ 最小/ incast/ 树/ 分支/ 中/ ,/ 假设/ 接收/ 节点/ 为/ X/ (/ 0/ )/ ,/ 第/ l/ (/ l/ ∈/ [/ 1/ ,/ k/ +/ 1/ ]/ )/ 层中/ 的/ 服务器/ 节点/ 表示/ 为/ X/ (/ l/ )/ ,/ 有/ (/ 1/ )/ 当/ l/ </ l/ 时/ ,/ X/ (/ l/ )/ 中有/ l/ -/ l/ 个/ 维度/ 与/ X/ (/ l/ )/ 不同/ ./ (/ 2/ )/ 当/ l/ >/ l/ 时/ ,/ 若/ X/ (/ l/ )/ 与/ X/ (/ 0/ )/ 在/ 某/ 一维/ 不同/ ,/ X/ (/ l/ )/ 与/ X/ (/ l/ )/ 必然/ 在/ 该维/ 相同/ ./ (/ 3/ )/ 当/ 3/ / la/ =/ lb/ / k/ +/ 1/ ,/ la/ ,/ lb/ >/ l/ +/ 1/ ,/ 若/ X/ (/ la/ )/ 和/ X/ (/ lb/ )/ 在/ 与/ X/ (/ l/ )/ 不同/ 的/ 维度/ 上/ 有/ j/ (/ j/ ∈/ [/ 1/ ,/ la/ -/ l/ ]/ )/ 维/ 相同/ ,/ 则/ X/ (/ la/ )/ 与/ X/ (/ lb/ )/ 在/ 第/ j/ +/ l/ 层/ 可以/ 汇聚/ 到/ 同一个/ 节点/ ;/ 否则/ 不能/ 在/ 第/ l/ +/ 1/ ~/ la/ -/ 1/ 层/ 实现/ 汇聚/ ./ (/ 4/ )/ 当/ 3/ / la/ ≠/ lb/ / k/ +/ 1/ ,/ la/ >/ lb/ >/ l/ ,/ 若/ 二者/ 在/ 与/ X/ (/ l/ )/ 不同/ 的/ 维度/ 上/ 有/ j/ (/ j/ ∈/ [/ 1/ ,/ lb/ -/ l/ ]/ )/ 维/ 相同/ ,/ 则/ X/ (/ la/ )/ 与/ X/ (/ lb/ )/ 在/ 第/ j/ +/ l/ 层/ 可以/ 汇聚/ 到/ 同一个/ 节点/ ;/ 否则/ 不能/ 在/ 第/ l/ +/ 1/ ~/ lb/ 层/ 实现/ 汇聚/ ./ 证明/ ./ (/ 1/ )/ 由/ 定义/ 1/ 、/ 2/ 可知/ ,/ 对/ 一组/ incast/ 树/ 分支/ 节点/ ,/ X/ (/ l/ )/ 是/ X/ (/ 1/ )/ 的/ l/ -/ 1/ 跳/ 邻居/ 节点/ ,/ X/ (/ l/ )/ 是/ X/ (/ 1/ )/ 的/ l/ -/ 1/ 跳/ 邻居/ 节点/ ,/ 因此/ ,/ X/ (/ l/ )/ 中有/ l/ -/ l/ 个/ 维度/ 与/ X/ (/ l/ )/ 不同/ ,/ 得证/ ;/ (/ 2/ )/ 已知/ X/ (/ l/ )/ 中有/ l/ 个/ 维度/ 与/ X/ (/ 0/ )/ 不同/ ,/ 假设/ X/ (/ l/ )/ 与/ X/ (/ l/ )/ 在/ 这/ l/ 个/ 相应/ 维/ 不同/ ,/ 因为/ X/ (/ l/ )/ 中共/ 有/ l/ -/ l/ 个/ 维度/ 与/ X/ (/ l/ )/ 不同/ ,/ 所以/ 除了/ 这/ l/ 个/ 维度/ 之外/ ,/ X/ (/ l/ )/ 中/ 还有/ l/ -/ 2l/ 个/ 维度/ 与/ X/ (/ l/ )/ 不同/ ,/ 因此/ X/ (/ l/ )/ 中共/ 有/ l/ -/ l/ 个/ 维度/ 与/ X/ (/ 0/ )/ 不同/ ,/ 而/ 实际上/ ,/ X/ (/ l/ )/ 是/ X/ (/ 0/ )/ 的/ l/ 跳/ 邻居/ 节点/ ,/ 故/ X/ (/ l/ )/ 中/ 应有/ l/ 个/ 维度/ 与/ X/ (/ 0/ )/ 不同/ ,/ 与/ 原/ 假设/ 矛盾/ ,/ 故原/ 假设/ 不/ 成立/ ,/ X/ (/ l/ )/ 与/ X/ (/ 1/ )/ 必然/ 在/ 相应/ 维/ 相同/ ,/ 得证/ ;/ (/ 3/ )/ 因为/ X/ (/ la/ )/ 有/ la/ -/ l/ 个/ 维度/ 与/ X/ (/ l/ )/ 不同/ ,/ 又/ X/ (/ la/ )/ 和/ X/ (/ lb/ )/ 在/ 与/ X/ (/ l/ )/ 不同/ 的/ 维度/ 上/ 有/ j/ 维/ 相同/ ,/ 所以/ X/ (/ la/ )/ 和/ X/ (/ lb/ )/ 有/ la/ -/ j/ -/ l/ 维/ 不同/ ,/ 即/ X/ (/ la/ )/ 与/ X/ (/ lb/ )/ 各自/ 需/ 调整/ la/ -/ j/ -/ l/ 维可/ 实现/ 汇聚/ ,/ 故/ 在/ 第/ j/ +/ l/ 层/ 可以/ 汇聚/ 到/ 同一个/ 节点/ ./ 反之/ ,/ 若/ X/ (/ la/ )/ 和/ X/ (/ lb/ )/ 在/ 与/ X/ (/ l/ )/ 不同/ 的/ 维度/ 上/ 均/ 不/ 相同/ ,/ 即/ X/ (/ la/ )/ 与/ X/ (/ lb/ )/ 各自/ 需/ 调整/ la/ -/ l/ 维可/ 实现/ 汇聚/ ,/ 故/ 只能/ 在/ 第/ l/ 层/ 汇聚/ 到/ X/ (/ l/ )/ ,/ 即/ 不能/ 在/ 第/ l/ +/ 1/ ~/ la/ -/ 1/ 层/ 实现/ 汇聚/ ,/ 得证/ ;/ (/ 4/ )/ 因为/ X/ (/ la/ )/ 有/ la/ -/ l/ 个/ 维度/ 与/ X/ (/ l/ )/ 不同/ ,/ X/ (/ lb/ )/ 有/ lb/ -/ l/ 个/ 维度/ 与/ X/ (/ l/ )/ 不同/ ,/ 又/ 二者/ 在/ 与/ X/ (/ l/ )/ 不同/ 的/ 维度/ 上/ 有/ j/ 维/ 相同/ ,/ 所以/ X/ (/ la/ )/ 与/ X/ (/ lb/ )/ 分别/ 需/ 调整/ la/ -/ j/ -/ l/ 维和/ lb/ -/ j/ -/ l/ 维/ 即可/ 实现/ 汇聚/ ,/ 故/ 二者/ 在/ 第/ j/ +/ l/ 层/ 可以/ 汇聚/ 到/ 同一个/ 节点/ ./ 反之/ ,/ 若/ X/ (/ la/ )/ 和/ X/ (/ lb/ )/ 在/ 与/ X/ (/ l/ )/ 不同/ 的/ 维度/ 上/ 均/ 不/ 相同/ ,/ 即/ X/ (/ la/ )/ 与/ X/ (/ lb/ )/ 分别/ 需/ 调整/ la/ -/ l/ 维和/ lb/ -/ l/ 维可/ 实现/ 汇聚/ ,/ 故/ 只能/ 在/ 第/ l/ 层/ 汇聚/ 到/ X/ (/ l/ )/ ,/ 即/ 不能/ 在/ 第/ l/ +/ 1/ ~/ lb/ 层/ 实现/ 汇聚/ ,/ 得证/ ./ 证毕/ ./ 由/ 定理/ 1/ 可以/ 很/ 容易/ 地/ 推算出/ 各层/ 发送/ 节点/ 的/ 下/ 一/ 跳/ 节点/ ,/ 如/ 推论/ 1/ ./ 推论/ 1/ ./ 在/ 一组/ 最小/ incast/ 树/ 分支/ 中/ ,/ 令/ 第/ l/ (/ l/ ∈/ …/ le/ [/ 1/ ,/ k/ +/ 1/ ]/ )/ 层/ 节点/ 为/ X/ (/ l/ )/ =/ lklk/ -/ 1/ …/ le1le2X/ (/ l/ )/ =/ lklk/ -/ 1/ …/ le1le2le1le2/ 层/ 相关/ 发送/ 节点/ ./ 若/ X/ (/ l/ )/ 和/ X/ (/ l/ )/ 在/ 与/ X/ (/ l/ )/ 不同/ 的/ 维度/ 上/ 有/ j/ (/ j/ ∈/ [/ 1/ ,/ min/ (/ l/ ,/ l/ )/ -/ l/ ]/ )/ 维/ 相同/ ,/ 即/ le1/ =/ le1/ ≠/ le1/ 烄/ le2/ =/ le2/ ≠/ le2/ 烅/ j/ =/ lele/ 烆/ 调整/ 除/ j/ 维/ 的/ 其他/ 任意/ 维度/ 为/ X/ (/ l/ )/ 的/ 相应/ 维/ 得到/ 其下/ 一/ 跳/ 节点/ ,/ 并/ 在/ 第/ j/ +/ l/ 层/ 汇聚/ 到/ 节点/ X/ (/ j/ +/ l/ )/ =/ lklk/ -/ 1/ …/ ae1ae2/ 调整/ 维度/ le1le2/ 其下/ 一/ 跳/ 节点/ ,/ 将/ 所有/ 节点/ 相连/ 则/ 构成/ 一棵/ 以/ X/ (/ l/ )/ 为根/ 节点/ 的/ 最小/ 代价/ incast/ 树/ 分支/ ./ 推论/ 1/ 给出/ 了/ 将/ 最小/ incast/ 树/ 分支/ 自顶向下/ 构建/ 最小/ 代价/ incast/ 树/ 分支/ 的/ 方法/ ./ 其中/ 下/ 一/ 跳/ 节点/ Page7/ 的/ 生成/ 方法/ 使得/ 位于/ 高层/ 的/ 发送/ 节点/ 尽可能/ 汇聚/ 到/ 已有/ 的/ 低层/ 发送/ 节点/ ,/ 最大/ 程度/ 上/ 确保/ 各层/ 新增/ 的/ 汇聚/ 节点/ 数/ 最少/ ./ 假设/ 最高层/ 为/ H/ ,/ 共有/ mH/ 个/ 发送/ 节点/ ,/ 距离/ 最高层/ 最近/ 的/ 低层/ 发送/ 节点/ 位于/ 第/ l/ (/ l/ ∈/ [/ 1/ ,/ H/ ]/ )/ 层/ ,/ 那么/ 根据上述/ 推论/ 可以/ 构建/ 出以/ X/ (/ l/ )/ 为根/ ,/ 以/ mH/ 个/ 发送/ 节点/ 为/ 叶子/ 节点/ 的/ 部分/ 最小/ 代价/ incast/ 树/ 分支/ ;/ 同理/ ,/ 可以/ 继续/ 构建/ 出以/ 距离/ X/ (/ l/ )/ 最近/ 的/ 低层/ 发送/ 节点/ X/ (/ l/ )/ (/ l/ ∈/ [/ 1/ ,/ l/ )/ )/ 为根/ ,/ 以/ X/ (/ l/ )/ 为/ 叶子/ 节点/ 的/ 部分/ 最小/ 代价/ incast/ 树/ 分支/ ,/ 直到/ 形成/ 一棵/ 完整/ 的/ 最小/ 代价/ incast/ 树/ 分支/ ./ 我们/ 将/ 这种/ 方法/ 命名/ 为/ MIB/ -/ based/ (/ MinimalIncastBranchbased/ )/ 汇聚/ 树/ 构建/ 方法/ ./ 3.3/ MC/ -/ based/ 算法/ 针对/ 多层次/ 、/ 强/ 关联/ 的/ 发送/ 节点/ ,/ 采用/ 自/ 底向上/ 推算/ 相关/ 发送/ 节点/ ,/ 自顶向下/ 建立/ 汇聚/ 路径/ 的/ 方法/ 构建/ 最小/ 代价/ incast/ 树/ ./ 那么/ ,/ 对于/ 不能/ 构成/ 一组/ incast/ 树/ 分支/ 的/ 节点/ 将/ 通过/ 寻找/ 各层/ 节点/ 之间/ 的/ 汇聚/ 关系/ 将/ 节点/ 进行/ 最大/ 程度/ 上/ 的/ 合并/ ,/ 即/ 针对/ 松散/ 关联/ 的/ 发送/ 节点/ ,/ 我们/ 采用/ 自顶向下/ 聚类/ 并/ 建立/ 汇聚/ 路径/ 的/ 方法/ ,/ 通过/ 计算/ 最小/ 聚类/ 节点/ 组/ (/ MinimalClusteringNodeGroups/ ,/ MCNG/ )/ 使/ 高层/ 节点/ 逐层/ 合并/ 到/ 低层/ 节点/ 构建/ 最小/ 代价/ incast/ 树/ ./ 首先/ 给出/ 最小/ 聚类/ 节点/ 组/ 的/ 定义/ ./ 定义/ 5/ ./ 将/ 发送/ 节点/ 按照/ 如下/ 要求/ 进行/ 分组/ ,/ 即/ 组内/ 成员/ 之间/ 互为/ j/ (/ j/ ∈/ [/ 1/ ,/ k/ +/ 1/ ]/ )/ 跳/ 邻居/ 且/ 各组/ 之间/ 无/ 交集/ ,/ 使得/ 组合/ 化/ 程度/ 最高/ 而/ 分组/ 数目/ 最小/ ,/ 由此/ 形成/ 的/ 节点/ 组/ 定义/ 为/ 最小/ 聚类/ 节点/ 组/ ./ 最小/ 聚类/ 问题/ (/ MinimalClusteringProblem/ )/ 也/ 是/ 一个/ NP/ 难/ 问题/ ,/ 本文/ 提出/ 了/ 一种/ 近似/ 的/ 优化/ 算法/ ,/ 如/ 算法/ 2/ 所示/ ./ 令图/ G/ =/ (/ V/ ,/ E/ )/ 中/ V/ 表示/ 所有/ 待/ 聚类/ 发送/ 节点/ ,/ 对/ 任意/ 两个/ 节点/ u/ ,/ v/ ∈/ V/ ,/ 若/ u/ 和/ v/ 互为/ j/ (/ j/ ∈/ [/ 1/ ,/ k/ +/ 1/ ]/ )/ 跳/ 邻居/ ,/ 则/ 存在/ (/ u/ ,/ v/ )/ ∈/ E/ ./ 首先/ ,/ 计算/ 图/ G/ 中/ 所有/ 节点/ 的/ 度/ 并/ 找出/ 具有/ 最大/ 度/ 的/ 节点/ u/ ,/ 由于/ u/ 和/ 不同/ 的/ 邻居/ 节点/ 可能/ 在/ 不同/ 的/ 维度/ 上/ 相差/ j/ 维/ ,/ 因此/ 计算/ 出/ 在/ 相同/ 维度/ 上/ 相差/ j/ 维/ 的/ 邻居/ 节点/ 的/ 最大/ 集合/ 构成/ 一组/ ;/ 然后/ ,/ 从图/ G/ 中将/ 该组/ 内/ 的/ 所有/ 节点/ 和/ 相关/ 的/ 边/ 移除/ ,/ 对于/ 剩下/ 的/ 节点/ 重复/ 以上/ 过程/ 直到/ 图/ G/ 为空/ ./ 最终/ ,/ 该/ 算法/ 将/ 所有/ 待/ 汇聚/ 的/ 发送/ 节点/ 分成/ 若干/ 无/ 交集/ 的/ 组/ ./ 算法/ 2/ ./ MinClustering/ 函数/ ./ 输入/ :/ 图/ G/ =/ (/ V/ ,/ E/ )/ 输出/ :/ 最小/ 聚类/ 节点/ 组/ 1/ ./ Groups/ =/ {/ }/ ;/ 2/ ./ WHILEG/ ≠/ / DO3/ ./ 计算/ V/ 中/ 每个/ 节点/ 的/ 度/ ;/ 4.5/ ./ 6/ ./ 因此/ ,/ 在/ 由/ 非/ incast/ 树/ 分支/ 组成/ 的/ 节点/ 集中/ 构建/ 最小/ 代价/ incast/ 树/ 的/ 方法/ 为/ ,/ 首先/ ,/ 在/ 第/ k/ +/ 1/ 层/ 的/ 所有/ 节点/ 中/ 寻找/ k/ 维/ 相同/ 的/ MCNG/ ,/ 得到/ 位于/ 第/ k/ 层/ 的/ 汇聚/ 节点/ ;/ 第二/ ,/ 在/ 第/ l/ (/ l/ / k/ )/ 层/ 的/ 剩余/ 节点/ 中/ 寻找/ 在/ 与/ X/ (/ 0/ )/ 不同/ 维度/ 上/ k/ -/ 1/ 维/ 相同/ 的/ MCNG/ ,/ 得到/ 位于/ 第/ k/ -/ 1/ 层/ 的/ 汇聚/ 节点/ ;/ 在/ 第/ l/ (/ l/ / k/ -/ 1/ )/ 层/ 的/ 剩余/ 节点/ 中/ 寻找/ 在/ 与/ X/ (/ 0/ )/ 不同/ 维度/ 上/ k/ -/ 2/ 维/ 相同/ 的/ MCNG/ ,/ 得到/ 位于/ 第/ k/ -/ 2/ 层/ 的/ 汇聚/ 节点/ ;/ 以此类推/ ,/ 直到/ 在/ 第/ l/ (/ l/ / 2/ )/ 层/ 的/ 剩余/ 节点/ 中/ 寻找/ 在/ 与/ X/ (/ 0/ )/ 不同/ 维度/ 上/ 1/ 维/ 相同/ 的/ MCNG/ ,/ 得到/ 位于/ 第/ 2/ 层/ 的/ 汇聚/ 节点/ ;/ 第三/ ,/ 对/ 从/ 第/ k/ +/ 1/ 层到/ 第/ 2/ 层/ 的/ 所有/ 不能/ 汇聚/ 的/ 节点/ 逐一/ 调整/ 相应/ 维度/ 为/ X/ (/ 0/ )/ 的/ 相应/ 维/ 得到/ 其下/ 一/ 跳/ 节点/ ,/ 最后/ ,/ 将/ 所有/ 节点/ 相连/ 则/ 构成/ 一棵/ 以/ X/ (/ 0/ )/ 为根/ 节点/ 的/ 最小/ 代价/ incast/ 树/ ./ 我们/ 将/ 这种/ 构建/ 最小/ 代价/ incast/ 树/ 的/ 方法/ 命名/ 为/ MC/ -/ based/ (/ MinimalClusteringbased/ )/ 汇聚/ 树/ 构建/ 方法/ ./ 3.4/ M2/ -/ based/ 算法/ 在/ 实际/ 应用/ 中/ ,/ 发送/ 节点/ 的/ 分布/ 往往/ 具有/ 随机性/ ,/ 因此/ ,/ 需要/ 把/ MIB/ -/ based/ 和/ MC/ -/ based/ 结合/ 起来/ 共同/ 构建/ 一棵/ 最小/ 代价/ incast/ 树/ ,/ 我们/ 将/ 这/ 两种/ 方法/ 统称/ 为/ M2/ -/ based/ ./ 综上所述/ ,/ 给定/ 发送/ 节点/ 集/ 和/ 接收/ 节点/ ,/ 最小/ 代价/ incast/ 树/ 的/ 构建/ 过程/ 分为/ 以下/ 5/ 步/ :/ 步骤/ 1/ ./ 根据/ 发送/ 节点/ 与/ 接收/ 节点/ 的/ 编号/ 计算/ 出/ 每个/ 发送/ 节点/ 在/ incast/ 树中/ 的/ 层次/ ./ 即/ 位于/ 第/ j/ (/ j/ ∈/ [/ 1/ ,/ k/ +/ 1/ ]/ )/ 层/ 的/ 发送/ 节点/ 是/ 接收/ 节点/ 的/ j/ 跳/ 邻居/ ,/ 它们/ 的/ 编号/ 相差/ j/ 维/ ./ 步骤/ 2/ ./ 从/ 最低/ 层/ 发送/ 节点/ 开始/ ,/ 自/ 底向上/ 逐层/ 构建/ incast/ 树/ 分支/ ./ 假设/ 最低/ 层/ 发送/ 节点/ 为/ 第/ l/ 层/ ,/ 节点/ 个数/ 为/ ml/ ,/ 对/ 第/ l/ 层中/ 的/ 每/ 一个/ 发送/ 节点/ ,/ 自/ 底向上/ 查找/ 其/ 相关/ 发送/ 节点/ ,/ 构成/ ml/ 组/ incast/ 树/ 分支/ ./ 对/ 余下/ 各层/ 中/ 的/ 剩余/ 发送/ 节点/ 依次/ 采用/ 相同/ 的/ 方法/ 构建/ incast/ 树/ 分支/ ./ 步骤/ 3/ ./ 对/ 每/ 一组/ incast/ 树/ 分支/ ,/ 再次/ 应用/ 上/ 一步/ 中/ 的/ 方法/ 递归/ 构建/ incast/ 树/ 分支/ ,/ 直到/ 所有/ incast/ 树/ 分支/ 均/ 为/ 最小/ incast/ 树/ 分支/ ./ 对/ 每/ 一组/ 最小/ incast/ 树/ 分支/ ,/ 可/ 根据/ 推论/ 1/ 直接/ 构建/ 出/ 最小/ 代价/ incast/ 树/ 分支/ ./ 步骤/ 4/ ./ 对/ 没有/ 构成/ incast/ 树/ 分支/ 的/ 剩余/ 节点/ 则/ 通过/ 计算/ MCNG/ 自顶向下/ 构建/ 最小/ 代价/ incastPage8/ 树/ 分支/ ./ 步骤/ 5/ ./ 将/ 位于/ 第/ 1/ 层/ 的/ 发送/ 节点/ 与/ 接收/ 节点/ 相连/ 得到/ 最终/ 的/ 最小/ 代价/ incast/ 树/ ./ 例如/ ,/ 令/ 接收/ 节点/ R/ =/ 000/ ,/ 发送/ 节点/ 集/ 为/ {/ 002/ ,/ 003/ ,/ 010/ ,/ 011/ ,/ 031/ ,/ 121/ ,/ 202/ ,/ 211/ ,/ 221/ ,/ 300/ ,/ 301/ ,/ 321/ ,/ 322/ ,/ 323/ }/ ./ 根据/ 发送/ 节点/ 与/ 接收/ 节点/ 的/ 编号/ 将/ 发送/ 节点/ 分为/ 3/ 层/ ,/ 分别/ 为/ l1/ =/ {/ 002/ ,/ 003/ ,/ 010/ ,/ 300/ }/ ,/ l2/ =/ {/ 011/ ,/ 031/ ,/ 202/ ,/ 301/ }/ ,/ l3/ =/ {/ 121/ ,/ 211/ ,/ 221/ ,/ 321/ ,/ 322/ ,/ 323/ }/ ./ 对/ 第/ l1/ 层到/ 第/ l3/ 层/ 的/ 每/ 一个/ 节点/ ,/ 自/ 底向上/ 查找/ 其/ 相关/ 发送/ 节点/ ,/ 构成/ 7/ 组/ incast/ 树/ 分支/ ,/ 如图/ 4/ (/ a/ )/ 所示/ ./ 对/ 第一组/ incast/ 树/ 分支/ 递归/ 构建/ 最小/ incast/ 树/ 分支/ ,/ 由此/ 形成/ 8/ 组/ 最小/ incast/ 树/ 分支/ ,/ 如图/ 4/ (/ b/ )/ 所示/ ./ 对/ 第/ 1/ 、/ 2/ 组/ 最小/ incast/ 树/ 分支/ 可/ 根据/ 推论/ 1/ 直接/ 构建/ 出其/ 最小/ 代价/ incast/ 树/ 分支/ ,/ 如图/ 4/ (/ c/ )/ 所示/ ./ 对/ 没有/ 汇聚/ 到/ 第/ l1/ 层/ 的/ 剩余/ 节点/ 图/ 4BCube/ (/ 4/ ,/ 1/ )/ 结构/ 中/ 最小/ 代价/ incast/ 树/ 的/ 构建/ 过程/ {/ 031/ ,/ 121/ ,/ 221/ }/ 自顶向下/ 逐层/ 计算/ MCNG/ 并/ 合并/ 构建/ 最小/ 代价/ incast/ 树/ ,/ 如图/ 4/ (/ d/ )/ 所示/ ./ 最后/ 将/ 位于/ 第/ 1/ 层/ 的/ 发送/ 节点/ 与/ 接收/ 节点/ 相连/ 得到/ 一棵/ 最小/ 代价/ incast/ 树/ ./ 3.5/ 算法/ 复杂性/ 分析/ 假设/ incast/ 树中/ 所有/ 边/ 的/ 权重/ 为/ 1/ ,/ 树/ 的/ 代价/ 为/ 所有/ 边/ 权重/ 之/ 和/ ,/ 则/ 最小/ 代价/ incast/ 树/ 的/ 构建/ 问题/ 可/ 等效/ 为/ Steiner/ 树/ 问题/ ,/ 是/ 一个/ NP/ 难/ 问题/ ,/ 目前/ 已经/ 提出/ 的/ 在/ 一般/ 图中/ 构建/ Steiner/ 树/ 的/ 近似算法/ 其/ 时间/ 复杂度/ 为/ O/ (/ mN2/ )/ ,/ m/ 表示/ 发送/ 节点/ 的/ 个数/ ,/ N/ 表示/ 网络/ 规模/ ./ 然而/ ,/ 大规模/ 商用/ 数据中心/ 通常/ 拥有/ 成千上万/ 台/ 服务器/ ,/ 这一较/ 高/ 的/ 复杂度/ 显然/ 无法/ 满足/ 在线/ 构建/ incast/ 树/ 的/ 需要/ ,/ 而且/ 这些/ 算法/ 也/ 无法/ 高效/ 利用/ 诸如/ BCube/ 等富/ 连接/ 网络/ 的/ 拓扑/ 特性/ ./ 本文/ 提出/ 的/ M2/ -/ based/ 算法/ 利用/ BCube/ 的/ 多/ 等价/ 路径/ 特性/ 构建/ 最小/ 代价/ incast/ 树/ 大大降低/ 了/ 通用/ 算法/ 的/ 复杂度/ ./ 定理/ 2/ ./ 假设/ incast/ 传输/ 由/ m/ 个/ 发送/ 节点/ 组成/ ,/ 位于/ 第/ l/ 层/ 的/ 发送/ 节点/ 的/ 个数/ 为/ ml/ (/ l/ ∈/ [/ 1/ ,/ k/ +/ 1/ ]/ )/ ,/ 则/ m/ =/ m1/ +/ m2/ +/ …/ +/ mk/ +/ 1/ ,/ 那么/ 最小/ 代价/ incast/ 树/ 构建/ 算法/ 的/ 时间/ 复杂度/ 为/ O/ (/ m2/ (/ lgm/ +/ lgN/ )/ )/ ./ 证明/ ./ 最小/ 代价/ incast/ 树/ 构建/ 算法/ 的/ 计算/ 量/ 主要/ 花费/ 在/ 2/ 个/ 阶段/ ,/ 即/ 自/ 底向上/ 计算/ 最小/ incast/ 树/ 分支/ (/ 算法/ 1/ )/ 和/ 对/ 不能/ 构成/ incast/ 树/ 分支/ 的/ 剩余/ 节点/ 计算/ MCNG/ (/ 算法/ 2/ )/ ./ 第/ 1/ 阶段/ 中/ ,/ 从/ 第/ 1/ 层到/ 第/ k/ +/ 1/ 层/ 逐层/ 递归/ 构建/ 最小/ incast/ 树/ 分支/ ,/ 形成/ 一棵/ 深度/ 为/ O/ (/ lgm/ )/ 的/ 递归/ 树/ ,/ 其中/ ,/ 每/ 一层/ 的/ 代价/ 为/ O/ (/ mj/ ×/ (/ mj/ +/ 1/ +/ mj/ +/ 2/ +/ …/ +/ mk/ +/ 1/ )/ )/ =/ O/ (/ mj/ ×/ (/ m/ -/ m1/ -/ m2/ -/ …/ -/ mj/ )/ )/ =/ O/ (/ m2/ )/ ./ 因此/ ,/ 第/ 1/ 阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ m2lgm/ )/ ./ 第/ 2/ 阶段/ 中/ ,/ 逐层/ 计算/ MCNG/ 的/ 时间/ 复杂度/ 为/ O/ (/ (/ mk/ +/ 1/ +/ mk/ +/ …/ +/ mj/ )/ 2/ )/ =/ O/ (/ m2/ )/ ,/ 最/ 多/ 需要/ 计算/ k/ 次/ ,/ 因此/ ,/ 第/ 2/ 阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ km2/ )/ =/ O/ (/ m2lgN/ )/ ,/ 综上/ ,/ 总/ 的/ 时间/ 复杂度/ 为/ O/ (/ m2/ (/ lgm/ +/ lgN/ )/ )/ ./ 4/ 讨论/ 4.1/ 扩展/ 到/ 其他/ 网络结构/ 在/ 以/ 交换机/ 为/ 中心/ 的/ 结构/ 中/ ,/ 传统/ 交换机/ 不/ 提供/ 可编程/ 数据/ 层/ ,/ 而/ 软件/ 定义/ 的/ 网络/ 技术/ 仅/ 支持/ 控制/ 层/ 的/ 可编程/ ./ 网内/ 汇聚/ 要求/ 网络设备/ 能够/ 缓存/ 和/ 处理/ 数据流/ ./ 因此/ ,/ 将/ 用户/ 定义/ 的/ 汇聚/ 函数/ 放在/ 传统/ 交换机/ 上/ 是/ 不/ 可行/ 的/ ,/ 以/ 交换机/ 为/ 中心/ 的/ 结构/ 不能/ 直接/ 支持/ 网/ 内/ 汇聚/ ./ 近年/ ,/ 新型/ 的/ 思科/ ASIC/ 和/ aristaPage9/ 应用/ 交换机/ 提供/ 可编程/ 的/ 数据/ 层/ ,/ 如果/ 数据中心/ 利用/ 这种/ 基于/ 软件/ 的/ 或/ 基于/ FPGA/ 的/ 新型/ 交换机/ ,/ 在/ 以/ 交换机/ 为/ 中心/ 的/ 结构/ 中/ 实现/ 网/ 内/ 汇聚/ 将/ 成为/ 可能/ ./ 在/ 以/ 交换机/ 为/ 中心/ 的/ 结构/ 中/ 构建/ 最小/ incast/ 树/ 的/ 工作/ 将/ 在/ 下/ 一步/ 开展/ ./ 目前/ ,/ 以/ 服务器/ 为/ 中心/ 的/ 结构/ 已经/ 能够/ 支持/ 数据中心/ 的/ 网内/ 汇聚/ ./ 尽管/ 本文/ 基于/ BCube/ 结构/ 进行/ 研究/ ,/ 文中/ 提出/ 的/ 方法/ 仍/ 可/ 应用/ 到/ 其他/ 以/ 服务器/ 为/ 中心/ 的/ 结构/ 中/ ./ 然而/ ,/ 在/ 不同/ 的/ 网络结构/ 上/ 构建/ incast/ 树/ 需要/ 利用/ 不同/ 结构/ 的/ 不同/ 拓扑/ 特性/ ,/ 关于/ 在/ 其他/ 以/ 服务器/ 为/ 中心/ 的/ 结构/ 上/ 的/ 汇聚/ 传输/ 策略/ 也/ 将/ 作为/ 我们/ 后续/ 工作/ 之一/ ./ 如果/ 采用/ 具有/ 可编程/ 数据/ 层/ 的/ 新型/ 交换机/ ,/ 本文/ 提出/ 的/ 方法/ 可/ 直接/ 应用/ 于/ 以/ 交换机/ 为/ 中心/ 的/ FBFLY/ 和/ HyperX/ 结构/ ,/ 因为/ BCube/ 拓扑/ 本质/ 上/ 属于/ GeneralizedHypercube/ 结构/ ,/ 而/ FBFLY/ 和/ HyperX/ 在/ 交换机/ 的/ 互连/ 层面/ 上/ 也/ 同构/ 于/ GeneralizedHypercube/ ./ 4.2/ 对/ 作业/ 完成/ 时间/ 的/ 影响/ 给定/ 一个/ 类/ MapReduce/ 作业/ ,/ 其/ 执行/ 时间/ 取决于/ 3/ 个/ 阶段/ ,/ 即/ map/ 、/ 混洗/ 和/ reduce/ ./ 网内/ 汇聚/ 操作/ 仅/ 影响/ 混洗/ 和/ reduce/ 阶段/ 的/ 完成/ 时间/ ,/ 而/ 对/ map/ 阶段/ 无/ 影响/ ./ 混洗/ 阶段/ 的/ 完成/ 时间/ 主要/ 取决于/ 网络/ 的/ 通信量/ 及/ 可用/ 的/ 网络资源/ ./ 在/ 数据中心/ 中/ ,/ 类/ MapReduce/ 的/ 分布式计算/ 框架/ 存在/ map/ 倾斜/ 问题/ [/ 24/ -/ 28/ ]/ ,/ 由于/ 不同/ map/ 任务/ 上/ 负载/ 分布/ 的/ 不/ 均衡性/ ,/ 使得/ map/ 任务/ 的/ 运行/ 时间/ 高度/ 可变/ ./ 当/ 这种/ 倾斜/ 发生/ 时/ ,/ 一些/ map/ 任务/ 会/ 花费/ 更/ 长时间/ 处理/ 输入/ 数据/ ,/ 从而/ 延缓/ 了/ 整个/ 作业/ 的/ 完成/ 时间/ ./ 同理/ ,/ reduce/ 任务/ 也/ 存在/ 类似/ 问题/ ./ 近年来/ ,/ 研究/ 人员/ 提出/ 了/ 许多/ 方法/ 解决/ 或/ 缓解/ map/ 倾斜/ 问题/ ,/ 这些/ 策略/ 与/ 使用/ 网/ 内/ 汇聚/ 优化/ 传输/ 是/ 正交/ 的/ ,/ 因此/ ,/ 我们/ 采用/ 这些/ 方法/ 使/ 所有/ map/ 任务/ 尽可能/ 同时/ 完成/ 以/ 更好/ 地/ 支持/ 网/ 内/ 汇聚/ 策略/ 的/ 应用/ ./ 在/ 上述/ 设定/ 下/ ,/ incast/ 传输/ 中/ 的/ 每/ 一个/ 发送/ 节点/ 沿着/ incast/ 树向/ 接收/ 节点/ 传送数据/ 流/ ./ 当/ 到达某/ 汇聚/ 节点/ ,/ 该流/ 的/ 所有/ 数据包/ 将/ 被/ 缓存/ ,/ 一旦/ 有/ 新/ 的/ 数据流/ 到来/ ,/ 汇聚/ 节点/ 即可/ 执行/ 汇聚/ 操作/ ,/ 即将/ 所有/ key/ -/ value/ 对/ 根据/ key/ 值/ 分组/ ,/ 并/ 对/ 每组/ 应用/ 汇聚/ 函数/ ./ 如果/ 汇聚/ 节点/ 上/ 的/ 可用/ 缓存/ 很小/ 或者/ 等待/ 所有/ 流/ 到达/ 的/ 时间/ 超出/ 某个/ 阈值/ ,/ 则/ 生成/ 一个/ 新/ 的/ 数据流/ 并/ 继续/ 沿着/ incast/ 树向/ 接收/ 节点/ 发送/ ./ 原理/ 上/ 类似/ 于/ 文献/ [/ 29/ ]/ 中/ 的/ MapReduce/ 延迟/ 调度/ 技术/ ./ 因此/ ,/ 与/ 目前/ 不/ 采用/ 网/ 内/ 汇聚/ 策略/ 的/ 方法/ 相比/ ,/ 网/ 内/ 汇聚/ 直接/ 减少/ 了/ 混洗/ 阶段/ 传输/ 的/ 网络流量/ ,/ 从而/ 缩短/ 了/ 混洗/ 阶段/ 的/ 持续时间/ ./ 在/ 这种/ 方式/ 下/ ,/ 由于/ 存在/ 拖后腿/ 的/ map/ 任务/ ,/ 最后/ 到达/ 的/ 数据流/ 可能/ 无法/ 在/ 汇聚/ 节点/ 与/ 其他/ 流/ 聚合/ ,/ 将/ 以/ cut/ -/ through/ 的/ 方式/ 转发/ ,/ 等同于/ 现存/ 的/ 无/ 网内/ 汇聚/ 的/ 方法/ ./ 因此/ ,/ 采用/ 网/ 内/ 汇聚/ 算法/ 后/ ,/ 混洗/ 阶段/ 的/ 完成/ 时间/ 在/ 最坏/ 情况/ 下/ 与/ 现存/ 方法/ 相同/ ./ 同时/ ,/ 与/ 现存/ 方法/ 相比/ ,/ 网/ 内/ 汇聚/ 策略/ 使/ 接收端/ 接收/ 的/ 数据量/ 大大减少/ ,/ 从而/ 减少/ 了/ 接收端/ 进行/ reduce/ 计算/ 的/ 时间/ ./ 综上/ ,/ 我们/ 的/ 方法/ 不会/ 增加/ 混洗/ 阶段/ 的/ 完成/ 时间/ ,/ 且/ 能够/ 减少/ reduce/ 计算/ 的/ 时间/ ,/ 因此/ ,/ 与/ 现存/ 方法/ 相比/ 能够/ 减少/ 整个/ 作业/ 的/ 完成/ 时间/ ./ 5/ 仿真/ 实验/ 本节/ 对/ M2/ -/ based/ 算法/ 与/ 目前/ 不/ 采用/ 网/ 内/ 汇聚/ 的/ 方案/ (/ 以下/ 简称/ 现存/ 方法/ )/ 、/ 单播/ 算法/ 以及/ IRS/ -/ based/ 算法/ 进行/ 对比/ 实验/ ,/ 通过/ 调整/ 网络/ 规模/ 和/ incast/ 传输/ 节点/ 的/ 规模/ 评估/ 如下/ 3/ 个/ 指标/ :/ 混洗/ 传输/ 的/ 数据量/ 即/ incast/ 树中/ 所有/ 边/ 流量/ 的/ 总和/ 、/ 汇聚/ 服务器/ 个数/ 、/ 新增/ 服务器/ 个数/ 、/ incast/ 树中/ 的/ 有效/ 链路/ 个数/ 以及/ 接收端/ 的/ 数据量/ ./ 由于/ 实验/ 条件/ 所/ 限/ ,/ 我们/ 仅/ 搭建/ 了/ 小型/ 的/ 测试/ 床/ ,/ 在/ 大规模/ 真实/ 网络/ 上/ 的/ 验证/ 工作/ 拟/ 留待/ 下/ 一步/ 完成/ ./ 5.1/ 实验设计/ 实验/ 平台/ 采用/ 3/ 台/ 服务器/ 通过/ 1GB/ 以太网交换机/ 互连/ ./ 服务器/ 的/ 硬件/ 配置/ 包括/ 一个/ 2/ 路/ 8/ 核/ 2.50/ GHzIntelXeonE5420/ 处理器/ ,/ 24GB/ 内存/ 和/ 1TBSATA/ 硬盘/ ./ Hadoop/ 分布式/ 实验/ 环境/ 由/ 3/ 台/ 服务器/ 上/ 运行/ 的/ 31/ 台/ RedHat/ 虚拟机/ 构成/ ,/ 其中/ ,/ 1/ 台/ 服务器/ 上/ 运行/ 11/ 台/ 虚拟机/ ,/ 1/ 台为/ Hadoop/ 的/ 管理/ 节点/ ,/ 10/ 台为/ 数据/ 节点/ ;/ 其余/ 2/ 台/ 服务器/ 上/ 各/ 运行/ 10/ 台/ 虚拟机/ 均/ 作为/ Hadoop/ 的/ 数据/ 节点/ ./ 每个/ 数据/ 节点/ 支持/ 4/ 个/ map/ 任务/ 和/ 1/ 个/ reduce/ 任务/ ./ 每台/ 服务器/ 使用/ 一块/ Intel/ 网卡/ ,/ 该/ 服务器/ 上/ 的/ 所有/ 虚拟机/ 通过/ 虚拟/ 交换机/ 共享/ 该/ 网卡/ ./ 修改/ Hadoop/ 使/ 其/ 支持/ 网/ 内/ 数据包/ 缓存/ 和/ 汇聚/ 功能/ ./ MapReduce/ 作业/ 采用/ Hadoop0/ ./ 21.0/ 中/ 的/ 样例/ 程序/ Wordcount/ ,/ 包括/ 120/ 个/ 发送/ 节点/ (/ map/ 任务/ )/ 和/ 1/ 个/ 接收/ 节点/ (/ reduce/ 任务/ )/ ./ 为/ 每个/ map/ 任务分配/ 10/ 个/ 64M/ 大小/ 的/ 输入/ 文件/ ./ 在/ 混洗/ 阶段/ ,/ 执行/ 中间/ 结果/ 本地/ 汇聚/ 后/ 从/ 每个/ 发送/ 端/ 传输/ 到/ 接收端/ 的/ 平均/ 数据/ 大小/ 为/ 1M/ ./ 在/ 实际/ 的/ 数据中心/ 网络/ 中/ ,/ map/ 任务/ 往往/ 被/ 调度/ 到/ 空闲/ 服务器/ 执行/ incast/ 传输/ ,/ 从而/ 发送/ 节点/ 呈/ 随机/ 分布/ ,/ 因此/ ,/ 为/ 所有/ 发送/ 节/ Page10/ 点/ 和/ 接收/ 节点/ 随机/ 分配/ 一个/ BCube/ 编号/ ,/ 为了/ 实现/ 在/ BCube/ (/ 6/ ,/ k/ )/ (/ 2/ / k/ / 8/ )/ 网络/ 上/ 的/ incast/ 传输/ ,/ 根据/ 相应/ 算法/ 推算出/ 中间/ 节点/ ,/ 则/ 所有/ 节点/ 共同/ 构成/ 一个/ incast/ 连通/ 子图/ ,/ 相当于/ 一个/ 部分/ 的/ BCube/ 网络/ ./ Incast/ 树中/ 的/ 节点/ 与/ 31/ 台/ 虚拟机/ 的/ 映射/ 关系/ 为/ :/ 发送/ 节点/ 和/ 接收/ 节点/ 分别/ 映射/ 到/ 30/ 台/ 数据/ 节点/ ./ 通过/ 在/ 每台/ 虚拟机/ 上/ 设置/ 代理/ 软件/ 模拟/ 中间/ 节点/ 收发/ 和/ 存储/ 数据包/ ,/ 将/ 中间/ 节点/ 也/ 映射/ 到/ 30/ 台/ 数据/ 节点/ ./ 同时/ ,/ 为了/ 确保/ 执行/ incast/ 传输/ 时/ 一台/ 数据/ 节点/ 上/ 的/ 多个/ 中间/ 节点/ 之间/ 不/ 发生/ 本地/ 通信/ ,/ 将/ 任图/ 5incast/ 传输/ 中/ ,/ 各/ 评价/ 指标/ 随/ BCube/ (/ 6/ ,/ k/ )/ 网络/ 的/ k/ 值/ 的/ 变化趋势/ 何/ 一对/ 在/ incast/ 树/ 的/ 连续/ 层次/ 出现/ 的/ 邻居/ 节点/ 映射/ 到/ 不同/ 的/ 数据/ 节点/ ./ 因此/ ,/ incast/ 树中/ 的/ 每/ 一条/ 边/ 映射/ 为/ 两台/ 虚拟机/ 之间/ 的/ 虚拟/ 链路/ 或/ 服务器之间/ 的/ 物理/ 链路/ ./ 5.2/ 网络/ 规模/ 的/ 影响/ 给定/ incast/ 树/ ,/ 在/ BCube/ (/ 6/ ,/ k/ )/ 子/ 网上/ 部署/ 具有/ 120/ 个/ 发送/ 节点/ 和/ 1/ 个/ 接收/ 节点/ 的/ incast/ 传输/ ./ 实验/ 分别/ 采用/ M2/ -/ based/ 算法/ 、/ 现存/ 方法/ 、/ 单播/ 算法/ 和/ IRS/ -/ based/ 算法/ 生成/ 相应/ 的/ incast/ 树/ ,/ 执行/ 100/ 次取/ 平均/ 结果/ ,/ 如图/ 5/ 所示/ ./ Page11/ 图/ 5/ (/ a/ )/ 表示/ 不同/ 网络/ 规模/ 下/ incast/ 树中/ 传输/ 的/ 流量/ 的/ 变化趋势/ ./ 与/ 现存/ 方法/ 相比/ ,/ M2/ -/ based/ 算法/ 、/ 单播/ 算法/ 和/ IRS/ -/ based/ 算法/ 均/ 显著/ 节省/ 了/ 网络/ 中/ 传输/ 的/ 流量/ ,/ 证明/ 了/ 关联性/ 流量/ 网/ 内/ 汇聚/ 策略/ 的/ 有效性/ ./ M2/ -/ based/ 算法/ 和/ IRS/ -/ based/ 算法/ 明显/ 优于/ 单播/ 算法/ ,/ 一个/ 重要/ 原因/ 是/ 前/ 两种/ 算法/ 中/ 的/ 汇聚/ 点/ 个数/ 随/ k/ 值/ 的/ 增大/ 而/ 增加/ ,/ 而/ 单播/ 算法/ 中/ 的/ 汇聚/ 点/ 个数/ 随着/ k/ 值/ 的/ 增大/ 而/ 减少/ ,/ 如图/ 5/ (/ b/ )/ 所示/ ./ M2/ -/ based/ 算法/ 的/ 效果/ 更好/ ,/ 因为/ M2/ -/ based/ 通过/ 增加/ 最少/ 的/ 节点/ 完成/ incast/ 树/ 的/ 构建/ ,/ 减少/ 了/ 输出/ 的/ 流/ 的/ 数量/ ,/ 从而/ 减少/ 了/ 网络/ 中/ 传输/ 的/ 数据流/ 的/ 总量/ ,/ 如图/ 5/ (/ c/ )/ 所示/ ./ 此外/ ,/ M2/ -/ based/ 算法/ 占用/ 更少/ 的/ 链路/ ,/ 从而/ 占用/ 更少/ 的/ 服务器/ 和/ 网络设备/ ,/ 节约/ 更/ 多/ 的/ 网络资源/ ,/ 如图/ 5/ (/ d/ )/ 所示/ ./ 同时/ ,/ 关联性/ 流量/ 的/ 网内/ 汇聚/ 策略/ 均/ 极大/ 地/ 减少/ 了/ 接收端/ 的/ 数据量/ ,/ 如图/ 5/ (/ e/ )/ 所示/ ./ 表/ 1/ 中/ 的/ 数据/ 说明/ 与/ 现存/ 方法/ 相比/ ,/ M2/ -/ based/ 明显/ 减少/ 了/ 整个/ 作业/ 在/ 混洗/ 和/ reduce/ 阶段/ 的/ 等待/ 延迟/ ./ 表/ 1/ 网络/ 规模/ 对/ 混洗/ 和/ reduce/ 阶段/ 完成/ 时间/ 的/ 影响/ BCube/ (/ 6/ ,/ k/ )/ k/ =/ 2k/ =/ 3k/ =/ 4k/ =/ 5k/ =/ 6/ 图/ 6BCube/ (/ 4/ ,/ 8/ )/ 网络/ 中/ ,/ incast/ 传输/ 的/ 数据量/ 和/ 有效/ 链路/ 数随/ 发送/ 节点/ 数量/ 的/ 变化趋势/ 表/ 2/ 网络/ 规模/ 对/ 混洗/ 和/ reduce/ 阶段/ 完成/ 时间/ 的/ 影响/ 1000150020003000/ 综上所述/ ,/ M2/ -/ based/ 算法/ 支持/ 发送/ 节点/ 为/ 120/ 的/ 小规模/ incast/ 传输/ ,/ 且/ 生成/ 更少/ 的/ 网络流量/ 并/ 占用/ 更少/ 的/ 数据中心/ 资源/ ./ 5.3/ Incast/ 传输/ 节点/ 规模/ 的/ 影响/ 在/ 现实/ 的/ 数据中心/ 网络/ 中/ ,/ 类/ MapReduce/ 作业/ 通常/ 包括/ 数百/ 甚至/ 上/ 千个/ map/ 任务/ ,/ 由于/ 资源/ 有限/ ,/ 现有/ 测试/ 平台/ 无法/ 运行/ 大规模/ 的/ 词频/ 统计/ 程序/ ,/ 因此/ ,/ 我们/ 通过/ 模拟程序/ 证明/ M2/ -/ based/ 算法/ 的/ 扩展性/ ./ 令/ 发送/ 节点/ m/ ∈/ {/ 100/ ,/ 200/ ,/ …/ ,/ 3900/ ,/ 4000/ }/ ,/ 通过/ Hadoop/ 的/ 样例/ 程序/ RandomTextWriter/ 为/ 每个/ 发送/ 节点/ 提供/ 输入/ 数据/ ./ 控制/ 从/ 每个/ 发送/ 节点/ 传输/ 到/ 接收/ 节点/ 的/ 平均/ 数据量/ 为/ 1G/ ./ 图/ 6/ 为/ BCube/ (/ 4/ ,/ 8/ )/ 网络/ 中/ ,/ incast/ 传输/ 的/ 数据量/ 和/ 有效/ 链路/ 数随/ 发送/ 节点/ 数量/ 的/ 变化趋势/ ./ BCube/ (/ 4/ ,/ 8/ )/ 网络/ 的/ 规模/ 为/ 262144/ ,/ 能够/ 满足/ 实际/ 数据中心/ 网络/ 的/ 规模/ 要求/ ./ 结果表明/ ,/ 当/ 发送/ 节点/ 的/ 数量/ 从/ 100/ 增长/ 到/ 4000/ 时/ ,/ 与/ 现存/ 方法/ 相比/ ,/ M2/ -/ based/ 算法/ 和/ 单播/ 算法/ 均/ 显著/ 节省/ 了/ 网络/ 中/ 传输/ 的/ 数据量/ ,/ 证明/ 了/ 关联性/ 流量/ 网/ 内/ 汇聚/ 策略/ 在/ 大规模/ incast/ 传输/ 中/ 的/ 有效性/ ./ 且/ 在/ 拥有/ 4000/ 个/ 节点/ 的/ incast/ 传输/ 中/ M2/ -/ based/ 算法/ 仍然/ 优于/ 其他/ 两种/ 方法/ ./ 图/ 6/ (/ b/ )/ 表明/ M2/ -/ based/ 算法/ 占用/ 更少/ 的/ 链路/ ,/ 从而/ 占用/ 更少/ 的/ 服务器/ 和/ 网络设备/ ,/ 节约/ 更/ 多/ 的/ 网络资源/ ./ 表/ 2/ 显示/ 在/ 大规模/ incast/ 中/ ,/ 与/ 现存/ 方法/ 相比/ ,/ M2/ -/ based/ 仍然/ 能够/ 减少/ 整个/ 作业/ 在/ 混洗/ 和/ reduce/ 阶段/ 的/ 等待/ 延迟/ ./ 综上所述/ ,/ M2/ -/ based/ 算法/ 能够/ 支持/ 较/ 大规模/ 的/ incast/ 传输/ ,/ 且/ 生成/ 更少/ 的/ 网络流量/ 并/ 占用/ 更少/ 的/ 数据中心/ 资源/ ./ 6/ 结论/ 在/ 大规模/ 分布式计算/ 应用/ 中/ ,/ 混洗/ 传输/ 阶段/ 产/ Page12/ 生/ 的/ 巨大/ 网络流量/ 给/ 数据中心/ 网络/ 带来/ 巨大/ 压力/ ,/ 严重/ 影响/ 应用/ 性能/ ./ 在/ 数据传输/ 过程/ 中/ 执行/ 网/ 内/ 关联性/ 流量/ 的/ 聚合/ 能够/ 大大减少/ 网络流量/ ,/ 提高/ 通信/ 性能/ ./ 数据中心/ 网络/ 的/ 数据/ 汇聚/ 可/ 形式化/ 描述/ 为/ 最小/ 代价/ incast/ 树/ 的/ 建立/ 问题/ ,/ 然而/ ,/ 最小/ 代价/ 传输/ 汇聚/ 树/ 的/ 构建/ 是/ 一个/ NP/ 难/ 问题/ ./ 针对/ 这一/ 问题/ ,/ 本文/ 提出/ 了/ 一种/ 构建/ 最小/ 代价/ 传输/ 汇聚/ 树/ 的/ 算法/ M2/ -/ based/ ,/ 仅/ 根据/ 已知/ 数据中心/ 网络/ 的/ 拓扑/ 结构/ 以及/ 发送/ 节点/ 和/ 接收/ 节点/ 的/ 编号/ 即可/ 快速/ 构建/ 出/ 一棵/ 近似/ 的/ 最小/ 代价/ incast/ 树/ ,/ 实验/ 结果表明/ ,/ 与/ 现有/ 方法/ 相比/ ,/ M2/ -/ based/ 能够/ 占用/ 更少/ 的/ 数据中心/ 资源/ 、/ 在/ 较/ 短时间/ 内/ 进一步/ 减小/ 网络/ 中/ 传输/ 的/ 数据量/ ./ 

