Page1MapReduce/ 集群/ 中/ 最大/ 收益/ 问题/ 的/ 研究/ 王习/ 特申德荣于/ 戈白梅/ 聂铁铮寇/ 月/ (/ 东北大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110004/ )/ 摘要/ MapReduce/ 是/ 目前/ 最为/ 流行/ 的/ 用于/ 大/ 数据分析/ 的/ 并行/ 系统/ 之一/ ./ 许多/ 企业/ 已经/ 搭建/ 了/ 自己/ 的/ MapReduce/ 集群/ ,/ 为/ 广大/ 用户/ 提供/ 计算/ 服务/ ./ 用户/ 可以/ 向/ 集群/ 提交/ 具有/ 完成/ 时限/ 要求/ 的/ MapReduce/ 作业/ ,/ 若/ 作业/ 被/ 按时/ 完成/ ,/ 则/ 企业/ 可以/ 获得/ 一定/ 的/ 收益/ ./ 针对/ 这种/ 应用/ 场景/ ,/ 该文/ 首次/ 提出/ 了/ MapReduce/ 集群/ 中/ 的/ 最大/ 收益/ 问题/ ./ 为/ 有效/ 地/ 解决/ 该/ 问题/ ,/ 首先/ 提出/ 了/ 一种/ 基于/ 序列/ 的/ 任务调度/ 策略/ (/ 简称/ 为/ SEQ/ 策略/ )/ ,/ 并/ 证明/ 了/ 在/ 处理/ 具有/ 完成/ 时限/ 约束/ 的/ 作业/ 时/ SEQ/ 策略/ 存在/ 优势/ ./ 基于/ SEQ/ 策略/ ,/ 该文/ 提出/ 了/ 最大/ 收益/ 的/ 调度/ 算法/ (/ SchedulingAlgorithmforMaximumBenefit/ ,/ 简称/ AMB/ 算法/ )/ ,/ 该/ 算法/ 可以/ 快速/ 地/ 确定/ 可/ 接收/ 作业/ ,/ 并/ 给出/ 有效/ 的/ 执行/ 方案/ ,/ 以/ 达到/ 最大化/ 收益/ 的/ 目的/ ./ 另外/ ,/ 针对/ 在/ 实际/ 应用/ 中/ 的/ 某些/ 异常情况/ (/ 如/ 节点/ 宕机/ )/ ,/ 该文/ 也/ 设计/ 了/ 有效/ 的/ 超时/ 处理/ 策略/ ,/ 进一步/ 增加/ 了/ 算法/ 的/ 实用性/ ./ 最后/ ,/ 通过/ 大量/ 的/ 实验/ 验证/ 了/ 该文/ 所/ 提出/ 算法/ 的/ 有效性/ ./ 关键词/ 大/ 数据/ ;/ MapReduce/ 集群/ ;/ 完成/ 时限/ ;/ 最大/ 收益/ 问题/ 1/ 引言/ 如今/ ,/ 随着/ 信息技术/ 的/ 不断/ 发展/ ,/ 数据/ 呈现出/ 爆炸式/ 的/ 增长/ 趋势/ ,/ 而/ 对于/ 海量/ 数据/ 的/ 分析/ 与/ 处理/ 也/ 成为/ 了/ 一个/ 热点/ 课题/ [/ 1/ ]/ ./ MapReduce/ [/ 2/ ]/ 作为/ 一款/ 流行/ 的/ 并行计算/ 框架/ ,/ 已/ 被/ 公认/ 为/ 是/ 用于/ 分析/ 和/ 处理/ 海量/ 数据/ 的/ 最/ 有效途径/ 之一/ ./ 该/ 框架/ 提供/ 了/ 一套/ 简洁/ 高效/ 的/ API/ ,/ 用户/ 只/ 需要/ 编写/ 相应/ 的/ Map/ 和/ Reduce/ 函数/ ,/ 就/ 可以/ 轻松/ 的/ 处理/ TB/ 甚至/ PB/ 级别/ 的/ 海量/ 数据/ ,/ 而/ 不用/ 关心/ 具体/ 的/ 处理/ 细节/ (/ 如/ 数据分布/ 、/ 容错/ 处理/ 等/ )/ ./ 目前/ 许多/ 大型/ IT/ 公司/ 都/ 已经/ 组建/ 了/ 自己/ 的/ MapReduce/ 集群/ ,/ 为/ 广大/ 互联网/ 用户/ 提供/ 方便快捷/ 的/ 云/ 计算/ 服务/ ./ 用户/ 只/ 需要/ 支付/ 一定/ 的/ 费用/ ,/ 就/ 可以/ 在/ 这些/ 集群/ 上/ 运行/ 自定义/ 的/ MapReduce/ 作业/ ./ 在/ 这个/ 过程/ 中/ ,/ IT/ 公司/ 与/ 用户/ 之间/ 经常/ 以/ 服务/ 层/ 协议/ [/ 3/ -/ 4/ ]/ (/ ServiceLevelAgreement/ ,/ SLA/ )/ 的/ 方式/ 来/ 规定/ 服务/ 的/ 具体/ 细节/ ./ 常见/ 的/ 付费/ 方式/ 主要/ 包括/ 如下/ 2/ 类/ :/ 一种/ 是/ 按/ 租用/ 量/ 付费/ ,/ 即/ 所/ 支付/ 的/ 费用/ 与/ 用户/ 所/ 申请/ 的/ 集群/ 规模/ 和/ 使用/ 时间/ 成正比/ ;/ 另/ 一种/ 是/ 按/ 完成/ 效果/ 付费/ (/ 或称/ 按/ 完成/ 时限/ 付费/ )/ ,/ 即/ 用户/ 在/ 提交/ 作业/ 的/ 同时/ 也/ 给出/ 完成/ 时间/ 的/ 要求/ ,/ 服务提供者/ 只有/ 按时/ 完成/ 该/ 作业/ ,/ 才能/ 获得/ 相应/ 的/ 报酬/ ./ 如/ 情感/ 分析/ 、/ 垃圾邮件/ 检测/ 等/ 常见/ 的/ MapReduce/ 应用/ ,/ 都/ 需要/ 相应/ 的/ 完成/ 时间/ 保证/ ,/ 是/ 典型/ 的/ 按/ 完成/ 时限/ 付费/ 的/ 应用/ 实例/ ./ 本文/ 所/ 提出/ 的/ 最大/ 收益/ 问题/ 主要/ 针对/ 有/ 完成/ 时限/ 约束/ 的/ MapReduce/ 作业/ ./ 具体/ 地/ ,/ 每个/ 用户/ 提交/ 的/ 作业/ 可以/ 抽象/ 为/ 如下/ 4/ 部分/ :/ (/ 1/ )/ 对/ 作业/ 内容/ 的/ 具体/ 描述/ ,/ 即/ 用户/ 自定义/ 的/ Map/ 和/ Reduce/ 函数/ ;/ (/ 2/ )/ 完成/ 时限/ ,/ 即/ 用户/ 对/ 作业/ 最终/ 完成/ 时间/ 的/ 要求/ ;/ (/ 3/ )/ 收益/ ,/ 如果/ 作业/ 被/ 接收/ 并且/ 按时/ 完成/ 企业/ 可以/ 得到/ 的/ 经济收益/ ;/ (/ 4/ )/ 赔偿/ ,/ 如果/ 作业/ 被/ 接收/ 但/ 未/ 按时/ 完成/ 需要/ 赔付/ 给/ 用户/ 的/ 费用/ ./ 对于/ 这些/ 服务提供商/ 而言/ ,/ 在/ 一段时间/ 内/ 可能/ 有/ 大量/ 的/ 用户/ 申请/ 运行/ 作业/ ./ 考虑/ 到/ 有限/ 的/ 集群/ 规模/ 和/ 计算能力/ ,/ 服务提供者/ 需要/ 选择性/ 地/ 接收/ 合适/ 的/ 作业/ ,/ 并/ 使用/ 有效/ 的/ 调度/ 算法/ 保证/ 所有/ 接收/ 的/ 作业/ 能够/ 按时/ 完成/ ,/ 以/ 达到/ 最大化/ 经济收益/ 的/ 目的/ ./ 针对/ 上述情况/ ,/ 本文/ 首次/ 提出/ 了/ MapReduce/ 集群/ 中/ 的/ 最大/ 收益/ 问题/ ./ 为/ 有效/ 解决/ 该/ 问题/ ,/ 需要/ 从/ 大量/ 申请/ 中/ 快速/ 找到/ 可/ 接收/ 的/ 作业/ 集合/ ,/ 并/ 根据/ MapReduce/ 作业/ 的/ 执行/ 特点/ ,/ 给出/ 合理/ 的/ 调度/ 方案/ ,/ 具体/ 的/ 难点/ 如下/ :/ (/ 1/ )/ 快速/ 选择/ 合理/ 的/ 可/ 接收/ 的/ 作业/ 集/ :/ 明显/ 地/ ,/ 对于/ N/ 个/ 作业/ 申请/ ,/ 可以/ 有/ 2N/ 种/ 接收/ 作业/ 集/ ./ 服务提供者/ 需要/ 快速/ 地/ 从中/ 确定/ 一个/ 合理/ 的/ 接收/ 作业/ 集/ ./ 一方面/ ,/ 他们/ 希望/ 接收/ 尽量/ 多/ 的/ 且/ 具有/ 较/ 高/ 收益/ 的/ 作业/ ,/ 以/ 最大化/ 总/ 收益/ ./ 另一方面/ ,/ 如果/ 接收/ 的/ 作业/ 过多/ 超过/ 了/ 系统/ 的/ 计算能力/ ,/ 会/ 导致/ 许多/ 作业/ 无法/ 按时/ 完成/ ,/ 反而/ 会/ 降低/ 总/ 收益/ ./ 因此/ ,/ 如何/ 选择/ 合理/ 的/ 可/ 接收/ 作业/ 集是/ 难点/ 之一/ ./ (/ 2/ )/ 合理/ 的/ 调度/ 算法/ :/ 当/ 确定/ 了/ 可/ 接收/ 作业/ 集合/ 之后/ ,/ 一旦/ 出现/ 某个/ 接收/ 的/ 作业/ 无法/ 按时/ 完成/ ,/ 就/ 会/ 带来/ 收益/ 损失/ ,/ 因此/ 合理/ 的/ 调度/ 算法/ 是/ 非常/ 必要/ 的/ ./ 但是/ 由于/ MapReduce/ 作业/ 自身/ 的/ 执行/ 特点/ ①/ ,/ 导致/ 无法/ 对/ Reduce/ 任务/ 进行/ 很/ 好/ 的/ 预先安排/ ./ 因此/ ,/ 如何/ 设计/ 一个/ 合理/ 的/ 调度/ 算法/ 是/ 难点/ 之二/ ./ (/ 3/ )/ 良好/ 的/ 超时/ 处理/ 策略/ :/ 由于/ 异常情况/ (/ 网络/ 阻塞/ 、/ 节点/ 宕机/ 等/ )/ 在/ 大规模/ 集群/ 中是/ 无法/ 避免/ 的/ ./ 因此/ 即便/ 采用/ 优秀/ 的/ 调度/ 算法/ ,/ 也/ 无法/ 完全避免/ 作业/ 超时/ ./ 此时/ ,/ 系统/ 必须/ 合理/ 的/ 放弃/ 个别/ 作业/ 以/ 保证/ 其他/ 作业/ 不会/ 受到/ 影响/ ./ 因此/ ,/ 如何/ 设计/ 一个/ 良好/ 的/ 超时/ 处理/ 策略/ 是/ 难点/ 之三/ ./ 为/ 有效/ 解决/ MapReduce/ 集群/ 中/ 的/ 最大/ 收益/ 问题/ ,/ 本文/ 设计/ 了/ 作业/ 收益/ 的/ 评价/ 标准/ ,/ 并/ 以/ 最大化/ 收益/ 为/ 目标/ 设计/ 了/ 相关/ 的/ 算法/ ./ 具体/ 地/ ,/ 本文/ 的/ 贡献/ 点/ 总结/ 如下/ :/ (/ 1/ )/ 本文/ 首次/ 提出/ 了/ 在/ MapReduce/ 环境/ 下/ 的/ 最大/ 收益/ 问题/ ,/ 给出/ 了/ 收益/ 的/ 评价/ 标准/ ./ (/ 2/ )/ 提出/ 了/ 一种/ 基于/ 序列/ 的/ 任务调度/ 策略/ (/ 简称/ SEQ/ 策略/ )/ ,/ 并/ 证明/ 了/ SEQ/ 策略/ 在/ 处理/ 具有/ 完成/ 时限/ 约束/ 的/ 作业/ 时/ 具有/ 明显/ 的/ 优势/ ./ (/ 3/ )/ 基于/ SEQ/ 策略/ ,/ 本文/ 提出/ 了/ 以/ 最大化/ 收益/ 为/ 目的/ 的/ AMB/ 算法/ ./ 对于/ 静态/ 的/ 申请/ 作业/ 集合/ ,/ AMB/ 算法/ 可以/ 快速/ 地/ 选择/ 可/ 接收/ 的/ 作业/ 集合/ ,/ 并/ 给出/ 合理/ 的/ 调度/ 方案/ ,/ 保证/ 接收/ 的/ 作业/ 按时/ 完成/ ;/ 当有/ 新/ 作业/ 提交/ 时/ (/ 即/ 针对/ 动态/ 的/ 作业/ 集合/ )/ ,/ AMB/ 算法/ 采用/ 增量/ 的/ 方法/ 进行/ 快速/ 地/ 接收/ 判定/ ,/ 并/ 及时/ 地/ 更新/ 调度/ 方案/ ./ (/ 4/ )/ 在/ 实际/ 生产/ 中/ ,/ 异常情况/ (/ 如/ 节点/ 宕机/ 等/ )/ 无法/ 完全避免/ ,/ 某些/ 被/ 接收/ 的/ 作业/ 可能/ 无法/ 按时/ 完成/ ./ 针对/ 此种/ 情况/ ,/ 本文/ 设计/ 一种/ 超时/ 处理/ 策略/ ,/ 可以/ 有效/ 地/ 提高/ 算法/ 的/ 实用性/ ./ ①/ 对于/ 任意/ 一个/ MapReduce/ 作业/ ,/ 系统/ 都/ 会/ 将/ 其切/ 分成/ 多个/ Page3/ (/ 5/ )/ 最后/ ,/ 本文/ 通过/ 大量/ 实验/ 验证/ 了/ 所/ 提出/ 算法/ 的/ 有效性/ ./ 本文/ 第/ 2/ 节/ 概述/ MapReduce/ 的/ 背景/ 知识/ 和/ 相关/ 工作/ ;/ 第/ 3/ 节/ 陈述/ MapReduce/ 中/ 的/ 最大/ 收益/ 问题/ ;/ 第/ 4/ 节/ 详细描述/ 本文/ 提出/ 的/ 相关/ 算法/ ;/ 第/ 5/ 节/ 给出/ 实验/ 结果/ 与/ 分析/ ;/ 第/ 6/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 背景/ 知识/ 本/ 小节/ 首先/ 对/ MapReduce/ 框架/ 进行/ 了/ 概述/ ,/ 然后/ 总结/ 了/ MapReduce/ 环境/ 中/ 的/ 相关/ 工作/ ./ 2.1/ MapReduce/ 概述/ MapReduce/ 是/ 一款/ 由/ Google/ 公司/ 提出/ 的/ 并行计算/ 框架/ ,/ 主要/ 适用/ 于/ 大规模/ 数据/ 的/ 分析/ 与/ 处理/ ./ 该/ 框架/ 依托/ 于/ 一个/ 底层/ 的/ 分布式文件系统/ [/ 5/ ]/ (/ DFS/ )/ 存储/ 输入输出/ 文件/ ./ 典型/ 地/ ,/ 数据文件/ 会/ 被/ 切/ 分成/ 多个/ 等/ 大/ 的/ 分片/ ,/ 分布式/ 地/ 存储/ 在/ DFS/ 当中/ ./ 该/ 框架/ 采用/ 主从/ (/ master/ -/ slave/ )/ 架构/ ,/ 主/ 节点/ 主要/ 负责/ 集群/ 管理/ 和/ 任务调度/ ,/ 对于/ 任何/ 一个/ MapReduce/ 作业/ ,/ 主/ 节点/ 都/ 会/ 将/ 其/ 分割/ 成/ 多个/ Map/ 和/ Reduce/ 任务/ ,/ 并/ 将/ 它们/ 分给/ 空闲/ 的/ 从/ 节点/ 进行/ 处理/ ./ 每个/ 从/ 节点/ 上/ 都/ 具有/ 一定/ 数目/ 的/ Map/ (/ Reduce/ )/ 任务/ 槽/ ,/ 用于/ 处理/ 主/ 节点/ 所指/ 派/ 的/ Map/ (/ Reduce/ )/ 任务/ ./ 图/ 1/ 描述/ 了/ 一个/ MapReduce/ 作业/ 执行/ 的/ 大体/ 流程/ ./ 当/ 一个/ 作业/ j/ 被/ 提交/ 时/ ,/ 系统/ 的/ 主/ 节点/ 会/ 将/ 其切/ 分成/ m/ 个/ Map/ 任务/ 和/ r/ 个/ Reduce/ 任务/ ./ 通常/ m/ 是/ j/ 的/ 输入/ 文件/ 所/ 包含/ 的/ 分片/ 数目/ ,/ 而/ r/ 由/ 用户/ 指定/ 或/ 为/ 默认值/ ./ 在/ Map/ 阶段/ ,/ 首先/ ,/ 一个/ 分片/ 中/ 的/ 数据/ 会/ 被/ 分配/ 给/ 一个/ 特定/ 的/ Map/ 任务/ 槽/ (/ 如/ M1/ )/ ,/ 并/ 被/ 解析/ 成/ 一系列/ (/ k1/ ,/ v1/ )/ 格式/ 的/ 键/ -/ 值/ 对/ (/ key/ -/ valuepair/ )/ ./ 然后/ ,/ 每个/ Map/ 任务/ 槽/ 调用/ 用户/ 提交/ 的/ Map/ 函数/ ,/ 输入/ 一系列/ (/ k2/ ,/ v2/ )/ 格式/ 的/ 键/ -/ 值/ 对/ 作为/ 中间/ 结果/ ./ 中间/ 结果/ 会/ 被/ 划分/ 成/ r/ 个块/ ,/ 并/ 被/ 发送给/ 相应/ 的/ Reduce/ 任务/ 槽/ ./ 划分/ 函数/ 保证/ 具有/ 相同/ 键/ (/ key/ )/ 的/ 键/ -/ 值/ 对/ 被/ 划分/ 到/ 同一个/ 块/ 中/ ./ 在/ Reduce/ 阶段/ ,/ 首先/ ,/ 每个/ Reduce/ 任务/ 槽/ (/ 如/ R1/ )/ 将/ 收到/ 的/ 块/ 合并/ 到/ 一起/ ,/ 形成/ 一系列/ (/ k2/ ,/ list/ (/ v2/ )/ )/ 格式/ 的/ 键/ -/ 值/ 对/ ./ 接下来/ 调用/ 用户/ 提交/ 的/ Reduce/ 函数/ ,/ 输出/ 最终/ 结果/ ./ 最终/ 结果/ 将/ 被/ 写/ 回到/ DFS/ 当中/ ./ 2.2/ 相关/ 工作/ 目前/ 已经/ 出现/ 许多/ 适用/ 于/ MapReduce/ 的/ 任务调度/ 算法/ [/ 6/ -/ 9/ ]/ ,/ 如/ FIFO/ 调度/ 器/ ①/ 、/ Capacity/ 调度/ 器/ ②/ 、/ Fair/ 调度/ 器/ ③/ 等等/ ./ 也/ 出现/ 许多/ 针对/ 特定/ 应用/ 场景/ 的/ 调度/ 算法/ :/ Sandholm/ 和/ Lai/ 等/ 人/ [/ 10/ ]/ 提出/ 的/ 一种/ 调度/ 算法/ ,/ 允许/ 用户/ 根据/ 作业/ 的/ 重要/ 程度/ ,/ 动态/ 调整/ 所/ 申请/ 的/ 计算/ 资源量/ ./ Zaharia/ 等/ 人/ [/ 11/ ]/ 提出/ 了/ LATE/ 调度/ 算法/ ,/ 主要/ 适用/ 于/ 异构/ 的/ 集群/ 环境/ ./ Kwon/ 等/ 人/ [/ 12/ ]/ 针对/ MapReduce/ 处理过程/ 中/ 出现/ 的/ 数据/ 倾斜/ 问题/ ,/ 提出/ 了/ Skewtune/ 算法/ ./ 此外/ ,/ 还/ 出现/ 了/ 一些/ 针对/ 具有/ 完成/ 时限/ 要求/ 作业/ 的/ 调度/ 算法/ ./ Polo/ 等/ 人/ [/ 13/ ]/ 提出/ 了/ PD/ 调度/ 算法/ ,/ 该/ 算法/ 可以/ 估计/ 作业/ 的/ 完成/ 时间/ ,/ 如果/ 一个/ 作业/ 无法/ 按时/ 完成/ ,/ 则/ 将/ 计算资源/ 优先/ 地/ 分配/ 给/ 这个/ 作业/ ./ 但/ 该/ 算法/ 并/ 没有/ 设计/ 接收/ 判定/ 模块/ ,/ 会/ 接收/ 用户/ 提交/ 的/ 所有/ 作业/ ,/ 明显/ 无法/ 应用/ 于/ 本文/ 提出/ 的/ 应用/ 场景/ ./ DC/ 调度/ 算法/ [/ 14/ ]/ 和/ MinEDF/ -/ WC/ 算法/ [/ 15/ -/ 16/ ]/ 则/ 设计/ 了/ 接收/ 判定/ 模块/ ,/ 若/ 算法/ 认为/ 提交/ 的/ 作业/ 无法/ 按时/ 完成/ ,/ 则/ 会/ 驳回/ 该/ 作业/ ./ 具体/ 地/ ,/ DC/ 调度/ 算法/ 根据/ 作业/ 的/ 大小/ ,/ 尝试/ 分配/ 固定/ 个数/ Map/ 任务/ 槽/ 给/ 该/ 作业/ ,/ 并/ 假设/ 每个/ 作业/ 在/ Reduce/ 阶段/ 都/ 可以/ 使用/ 全部/ 的/ Reduce/ 任务/ 槽/ ./ 而/ MinEDF/ -/ WC/ 算法/ 则/ 根据/ 作业/ 的/ 大小/ ,/ 尝试/ 分配/ 固定/ 数目/ 的/ Map/ 和/ Reduce/ 任务/ 槽/ 给/ 该/ 作业/ ,/ 并/ 使/ 每个/ 作业/ 所/ 获得/ 的/ 任务/ 槽/ 总数/ 最小/ ./ 可见/ ,/ DC/ 和/ MinEDF/ -/ WC/ 算法/ 所/ 采用/ 的/ 估计/ 模型/ 都/ 是/ 静态/ 的/ ./ 但/ 在/ MapReduce/ 集群/ 中/ ,/ 为/ 达到/ 高度/ 的/ 可用性/ ,/ 普遍/ 采用/ 动态/ 的/ 任务分配/ 方式/ ./ 因此/ 这种/ 静态/ 估计/ 模型/ 会/ 导致系统/ 可用性/ 大大降低/ ,/ 同时/ 也/ 无法/ 充分利用/ 系统/ 的/ 计算资源/ ./ 另外/ ,/ 这些/ 算法/ 只/ 考虑/ 到/ 了/ 作业/ 的/ 完成/ 时限/ 要求/ ,/ 但/ 并未/ 进一步/ 考虑/ 收益/ 问题/ ,/ 因此/ 与/ 本文/ 的/ 设计/ 目标/ 也/ 不/ 相同/ ./ MapReduce/ 下/ 的/ 最大/ 收益/ 问题/ 是/ 本文/ 首次/ 提出/ 的/ ,/ 与/ 现有/ 研究/ 存在/ 很大/ 不同/ ./ 已有/ 算法/ 不能/ 很/ 好地解决/ 最大/ 收益/ 问题/ ,/ 因此/ 设计/ 一种/ 可以/ 有效/ 解决/ ①/ ②/ ③/ Page4/ 该/ 问题/ 的/ 算法/ 是/ 十分/ 有/ 意义/ 的/ ./ 3/ 问题/ 描述/ 本文/ 主要/ 针对/ MapReduce/ 环境/ 下/ 的/ 最大/ 收益/ 问题/ ,/ 其他/ 的/ 性能指标/ ,/ 如/ 吞吐量/ 等/ ,/ 并/ 不是/ 本文/ 的/ 重点/ 讨论/ 问题/ ./ 另外/ ,/ 本文/ 提出/ 的/ AMB/ 算法/ 的/ 具体/ 任务分配/ 方法/ 遵循/ 了/ MapReduce/ 的/ 动态分配/ 原则/ ,/ 因此/ 并/ 不会/ 影响/ MapReduce/ 的/ 其他/ 特性/ ,/ 如/ 容错/ 处理/ 、/ 负载/ 均衡/ 等/ ./ 本文/ 主要/ 考虑/ 常见/ 的/ 同构/ MapReduce/ 集群/ ,/ 即/ 认为/ 每个/ 从/ 节点/ 的/ 处理/ 能力/ 大致相同/ ./ 在/ 一个/ 具有/ M/ 个/ Map/ 任务/ 槽/ 和/ R/ 个/ Reduce/ 任务/ 槽/ 的/ MapReduce/ 集群/ 中/ ,/ 对于/ 任意/ 一个/ 用户/ 提交/ 的/ 作业/ j/ ,/ 如下/ 参数/ 为/ 已知/ :/ (/ 1/ )/ j/ 具有/ 的/ Map/ 任务/ 个数/ :/ j/ ./ Nm/ ;/ (/ 2/ )/ j/ 具有/ 的/ Reduce/ 任务/ 个数/ :/ j/ ./ Nr/ (/ 为/ 达到/ 较/ 高/ 处理/ 效率/ ,/ j/ ./ Nm/ (/ j/ ./ Nr/ )/ 常为/ M/ (/ R/ )/ 的/ 整数倍/ )/ ;/ (/ 3/ )/ j/ 的/ 完成/ 时限/ 要求/ :/ j/ ./ deadline/ ;/ (/ 4/ )/ 当/ 作业/ j/ 被/ 接收/ 并/ 在/ j/ ./ deadline/ 之前/ 完成/ 时/ ,/ 企业/ 可以/ 获得/ 的/ 收益/ :/ j/ ./ benefit/ ./ 此外/ ,/ 企业/ 可/ 为/ 所有/ 作业/ 设定/ 统一/ 的/ 赔付/ 比/ α/ ,/ 如果/ j/ 被/ 接收/ 但/ 未能/ 按时/ 完成/ ,/ 则/ 需要/ 赔付/ 给/ 用户/ 的/ 费用/ 为/ j/ ./ benefit/ ·/ α/ ./ 不失/ 一般性/ 地/ ,/ 若/ 企业/ 不/ 提供/ 赔付/ 服务/ ,/ 则/ 可/ 将/ 赔付/ 比/ α/ 设为/ 0/ ./ 设计/ 目标/ :/ 在/ 一段时间/ 内有/ 大量/ 用户/ 向/ 服务提供商/ (/ 即/ 集群/ 的/ 拥有者/ )/ 提出/ 作业/ 申请/ ,/ 这些/ 作业/ 形成/ 了/ 申请/ 候选/ 集/ J/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ J/ |/ }/ ./ 首先/ ,/ 服务提供商/ 需要/ 从/ J/ 中/ 选择/ 可/ 接收/ 作业/ 集/ A/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ A/ |/ }/ ,/ 并/ 根据/ 合适/ 的/ 调度/ 算法/ 尝试/ 去/ 完成/ A/ 中/ 的/ 所有/ 作业/ ./ 最终/ ,/ 对于/ A/ 中/ 的/ 任意/ 作业/ ji/ ,/ 若/ ji/ 在/ ji/ ./ deadline/ 之前/ 完成/ ,/ 那么/ 称/ ji/ 是/ 有效/ 的/ ,/ 提供商/ 可以/ 获得/ 收益/ ji/ ./ benefit/ ,/ 否则/ ,/ 称/ ji/ 是/ 无效/ 的/ ,/ 提供商/ 需要/ 赔付/ ji/ ./ benefit/ ·/ α/ ./ 那么/ ,/ 可/ 获得/ 的/ 总/ 收益/ 可以/ 表示/ 为/ P/ =/ ∑/ j/ ∈/ A/ ,/ j/ 是/ 有效/ 的/ j/ ./ benefit/ -/ ∑/ j/ ∈/ A/ ,/ j/ 是/ 无效/ 的/ j/ ./ benefit/ ·/ α/ MapReduce/ 下/ 的/ 最大/ 收益/ 问题/ ,/ 即/ 设计/ 有效/ 的/ 算法/ 以/ 最大化/ 总/ 收益/ P/ ./ 4/ 算法/ 描述/ 本/ 小节/ 首先/ 提出/ 了/ 一种/ 基于/ 序列/ 的/ 任务调度/ 策略/ ,/ 接下来/ 根据/ 这种/ 策略/ 提出/ 了/ AMB/ 算法/ ,/ 最后/ 给出/ 了/ 超时/ 处理/ 的/ 方法/ ./ 4.1/ 基于/ 序列/ 的/ 任务调度/ 策略/ 对于/ 任意/ 作业/ j/ ,/ 首先/ 需要/ 估计/ 如下/ 2/ 个/ 基本参数/ :/ (/ 1/ )/ j/ 的/ 平均/ 每个/ Map/ 任务/ 的/ 处理/ 时间/ :/ j/ ./ Tm/ ;/ (/ 2/ )/ j/ 的/ 平均/ 每个/ Reduce/ 任务/ 的/ 处理/ 时间/ :/ j/ ./ Tr/ (/ 这些/ 参数/ 可以/ 通过/ 简单/ 的/ 抽样/ 得出/ ,/ 文献/ [/ 11/ ,/ 13/ ]/ 中均/ 采用/ 了/ 类似/ 的/ 方法/ ,/ 具体/ 细节/ 详见/ 本文/ 附录/ A/ )/ ./ 若/ 集群/ 中/ 的/ 全部/ 任务/ 槽/ 都/ 用于/ 处理/ 该/ 作业/ ,/ 那么/ 可以/ 估计/ j/ 的/ Map/ 阶段/ 的/ 耗时/ 为/ TCm/ (/ j/ )/ =/ j/ ./ Nm/ // M/ ×/ j/ ./ Tm/ ,/ Reduce/ 阶段/ 的/ 耗时/ 为/ TCr/ (/ j/ )/ =/ j/ ./ Nr/ // R/ ×/ j/ ./ Tr/ ./ TCm/ (/ j/ )/ 和/ TCr/ (/ j/ )/ 是/ 本文/ 调度/ 策略/ 中/ 主要/ 使用/ 的/ 参数/ ./ 定义/ 1/ ./ 序列/ ./ 对于/ 一个/ 作业/ 集合/ JS/ (/ 所/ 包含/ 的/ 作业/ 个数/ 记/ 作/ |/ JS/ |/ )/ ,/ 序列/ S/ 是/ JS/ 中/ 所有/ 作业/ 的/ 一种/ 排列/ ,/ 它/ 规定/ 了/ JS/ 中/ 的/ 所有/ 作业/ 的/ Map/ 阶段/ 的/ 完成/ 顺序/ ./ 具体/ 地/ ,/ 若记/ j/ 的/ Map/ 阶段/ 的/ 完成/ 时间/ 为/ COTm/ (/ j/ )/ ,/ 对于/ 给定/ 的/ 序列/ S/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ JS/ |/ }/ ,/ 那么/ / ji/ ∈/ S/ (/ 0/ </ i/ </ |/ JS/ |/ )/ ,/ S/ 规定/ COTm/ (/ ji/ )/ </ COTm/ (/ ji/ +/ 1/ )/ ./ 基于/ 一个/ 给定/ 的/ 序列/ S/ ,/ 本文/ 提出/ 了/ 一种/ 全新/ 的/ 任务调度/ 策略/ (/ SEQ/ 策略/ )/ ,/ 具体/ 过程/ 如下/ ./ (/ 1/ )/ Map/ 部分/ ,/ 当/ 一个/ 空闲/ 的/ Map/ 任务/ 槽/ 请求/ 任务/ 时/ ,/ 主/ 节点/ 选择/ 一个/ 属于/ 序列/ S/ 中首/ 作业/ 的/ Map/ 任务分配/ 给/ 该/ 任务/ 槽/ ./ 当首/ 作业/ 的/ Map/ 任务/ 全部/ 分配/ 完毕/ 之后/ ,/ 将/ 该/ 作业/ 从/ 序列/ 首部/ 移除/ ./ 例如/ 在/ 图/ 2/ 中/ ,/ 给定/ 序列/ S/ =/ {/ j1/ ,/ j2/ ,/ j4/ ,/ j3/ }/ ,/ 当/ Map/ 任务/ 槽/ 请求/ 任务/ 时/ ,/ SEQ/ 策略/ 选择/ 首/ 作业/ 的/ Map/ 任务分配/ 给/ 该/ 槽/ ./ (/ 2/ )/ Reduce/ 部分/ ,/ 将/ 集合/ JS/ 中/ 的/ 作业/ 按照/ 完成/ 时限/ 由小到大/ 的/ 顺序/ 进行/ 排列/ ,/ 得到/ 一个/ 有序/ 队列/ Ld/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ JS/ |/ }/ ./ 当/ 一个/ 空闲/ 的/ Reduce/ 任务/ 槽/ 请求/ 任务/ 时/ ,/ 主/ 节点/ 顺序/ 查找/ Ld/ 中/ 的/ 作业/ ,/ 找到/ 第一个/ 已经/ 完成/ 了/ Map/ 阶段/ 的/ 作业/ ,/ 并/ 选择/ 一个/ 属于/ 该/ 作业/ 的/ Reduce/ 任务分配/ 给/ 空闲/ 的/ 任务/ 槽/ ./ 例如/ 在/ 图/ 2/ 中/ ,/ Ld/ =/ {/ j1/ ,/ j2/ ,/ j3/ ,/ j4/ }/ ,/ 若/ 在/ 时间/ 点/ 330/ 时有/ Reduce/ 任务/ 槽/ 请求/ 任务/ ,/ 此时/ 作业/ j1/ ,/ j2/ 完成/ 了/ Map/ 阶段/ ,/ j1/ 的/ 完成/ 时限/ 较/ 小/ ,/ 所以/ 选择/ 一个/ 属于/ j1/ 的/ Reduce/ 任务分配/ 给/ 该/ 槽/ ./ 根据上述/ 的/ 作业/ 执行/ 策略/ ,/ 对于/ 一个/ 给定/ 的/ 序列/ Page5S/ ,/ 可以/ 计算/ 出/ 任意/ 作业/ j/ 的/ Map/ 阶段/ 的/ 完成/ 时间/ :/ COTm/ (/ j/ )/ 以及/ Reduce/ 阶段/ 的/ 完成/ 时间/ :/ COTr/ (/ j/ )/ ./ 具体方法/ 如下/ ./ (/ 1/ )/ 给定/ 序列/ S/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ JS/ |/ }/ ,/ / ji/ ∈/ S/ ,/ 其/ Map/ 阶段/ 的/ 完成/ 时间/ 为/ COTm/ (/ ji/ )/ =/ COTm/ (/ ji/ -/ 1/ )/ +/ TCm/ (/ j/ )/ =/ ∑/ k/ ∈/ [/ 1/ ,/ i/ ]/ TCm/ (/ jk/ )/ ./ 例如/ 在/ 图/ 2/ 中/ ,/ 给定/ 序列/ S/ =/ {/ j1/ ,/ j2/ ,/ j4/ ,/ j3/ }/ ,/ 作业/ j2/ 的/ Map/ 阶段/ 完成/ 时间/ 为/ COTm/ (/ j2/ )/ =/ COTm/ (/ j1/ )/ +/ TCm/ (/ j2/ )/ =/ 140/ +/ 190/ =/ 330/ ./ (/ 2/ )/ 对于/ 作业/ 集合/ JS/ ,/ 按照/ 作业/ 完成/ 时限/ 由小到大/ 排序/ ,/ 可以/ 容易/ 地/ 得到/ 队列/ Ld/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ JS/ |/ }/ ./ 那么/ 对于/ Ld/ 中/ 的/ 第一个/ 作业/ j1/ ,/ 根据/ 给定/ 的/ 序列/ S/ ,/ 可以/ 计算/ 得出/ 其/ Map/ 阶段/ 的/ 完成/ 时间/ COTm/ (/ j1/ )/ ,/ 那么/ 其/ Reduce/ 阶段/ 的/ 完成/ 时间/ :/ COTr/ (/ j1/ )/ =/ COTm/ (/ j1/ )/ +/ TCr/ (/ j1/ )/ ./ 我们/ 将/ 时间段/ [/ COTm/ (/ j1/ )/ ,/ COTr/ (/ j1/ )/ ]/ 标记/ 为/ “/ 占用/ ”/ ./ 那么/ 对于/ Ld/ 中/ 的/ 第/ i/ 个/ 作业/ ji/ ,/ 我们/ 首先/ 计算/ 得出/ COTm/ (/ ji/ )/ ,/ 接下来/ 从/ 时间/ 点/ COTm/ (/ ji/ )/ 开始/ ,/ 找到/ 一系列/ 未/ 被/ “/ 占用/ ”/ 的/ 时间段/ ,/ 使/ 其/ 总长度/ 为/ TCr/ (/ ji/ )/ ,/ 标记/ 这些/ 时间段/ 为/ “/ 占用/ ”/ ,/ 最后/ 一个/ 时间段/ 的/ 结束/ 时间/ 即/ 作业/ ji/ 的/ Reduce/ 阶段/ 完成/ 时间/ COTr/ (/ ji/ )/ ./ 例如/ 在/ 图/ 2/ 中/ ,/ 给定/ S/ =/ {/ j1/ ,/ j2/ ,/ j4/ ,/ j3/ }/ ,/ Ld/ =/ {/ j1/ ,/ j2/ ,/ j3/ ,/ j4/ }/ ,/ 作业/ j1/ 的/ Map/ 阶段/ 完成/ 时间/ COTm/ (/ j1/ )/ =/ 140/ ,/ Reduce/ 完成/ 时间/ COTr/ (/ j1/ )/ =/ 140/ +/ 220/ =/ 360/ ,/ 时间段/ [/ 140/ ,/ 360/ ]/ 被/ j1/ 占用/ ./ j2/ 的/ Map/ 完成/ 时间/ COTm/ (/ j2/ )/ =/ 330/ ,/ 但/ 时间段/ [/ 330/ ,/ 360/ ]/ 被/ j1/ 占用/ ,/ 因此/ j2/ 占用/ 的/ 时间段/ 为/ [/ 360/ ,/ 480/ ]/ ./ j2/ 的/ Reduce/ 阶段/ 完成/ 时间/ COTr/ (/ j2/ )/ =/ 480/ ./ 基于/ 上述/ 的/ 作业/ 执行/ 策略/ 以及/ 完成/ 时间/ 计算方法/ ,/ 下面/ 给出/ 有效/ 序列/ 的/ 定义/ ./ 定义/ 2/ ./ 有效/ 序列/ ./ 给定/ 作业/ 集合/ JS/ ,/ 对于/ 一个/ 序列/ S/ ,/ 若/ 使用/ SEQ/ 策略/ 可以/ 使得/ / j/ ∈/ JS/ ,/ COTr/ (/ j/ )/ / j/ ./ deadline/ ,/ 那么/ 称/ S/ 为/ 一个/ 有效/ 序列/ ./ 下面/ ,/ 我们/ 说明/ 本文/ 提出/ 的/ SEQ/ 策略/ 在/ 处理/ 具有/ 完成/ 时间/ 约束/ 作业/ 时/ 的/ 优势/ ./ 定理/ 1/ ./ Map/ 最优性/ ./ 对于/ 作业/ 集合/ JS/ ,/ 给定/ 序列/ S/ (/ 即/ 给定/ 了/ 作业/ Map/ 阶段/ 的/ 完成/ 顺序/ )/ ,/ 那么/ SEQ/ 策略/ 可以/ 保证/ / ji/ ∈/ JS/ ,/ ji/ 在/ 满足/ S/ 约束/ 的/ 前提/ 下/ ,/ 可以/ 在/ 最/ 短时间/ 内/ 完成/ 它/ 的/ Map/ 阶段/ ./ 证明/ ./ 给定/ 序列/ S/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ JS/ |/ }/ 和/ S/ 中/ 的/ 第/ i/ 个/ 作业/ ji/ ,/ S/ 规定/ ji/ 的/ Map/ 阶段/ 必须/ 在/ 所有/ jk/ (/ 1/ / k/ </ i/ )/ 的/ Map/ 阶段/ 结束/ 之后/ 才能/ 完成/ ,/ 即/ ji/ 的/ Map/ 阶段/ 的/ 最早/ 完成/ 时间/ 为/ ∑/ k/ ∈/ [/ 1/ ,/ i/ ]/ TCm/ (/ jk/ )/ ./ 同时/ ,/ 若/ 采用/ SEQ/ 策略/ 进行/ 任务分配/ ,/ ji/ 的/ Map/ 阶段/ 完成/ 时间/ COTm/ (/ ji/ )/ 亦/ 为/ 该值/ ./ 对于/ 任意/ ji/ (/ i/ ∈/ [/ 1/ ,/ |/ JS/ |/ ]/ )/ ,/ 上述/ 结论/ 均/ 成立/ ,/ 定理/ 得证/ ./ 证毕/ ./ 定理/ 2/ ./ Reduce/ 最优性/ ./ 对于/ 作业/ 集合/ JS/ ,/ 给定/ 序列/ S/ ,/ 如果/ 使用/ SEQ/ 策略/ 进行/ 任务分配/ 会/ 出现/ 作业/ 超时/ ,/ 那么/ 无论/ 何种/ 调度/ 策略/ 都/ 无法/ 保证/ JS/ 中/ 所有/ 作业/ 都/ 按时/ 完成/ ,/ S/ 一定/ 不是/ 有效/ 序列/ ./ 证明/ ./ 定理/ 1/ 已经/ 证明/ 了/ SEQ/ 策略/ 在/ Map/ 阶段/ 的/ 最优性/ ,/ 因此/ 这里/ 只/ 需要/ 考虑/ Reduce/ 阶段/ ./ 假设/ 当/ 使用/ SEQ/ 策略/ 时/ ,/ 作业/ j/ 是/ 超时/ 作业/ ,/ 此时/ 有/ 2/ 种/ 情况/ :/ (/ 1/ )/ 若/ COTm/ (/ j/ )/ +/ TCr/ (/ j/ )/ >/ j/ ./ deadline/ ,/ 即/ 作业/ j/ 在/ Map/ 阶段/ 完成/ 之后/ 就/ 马上/ 运行/ 他/ 的/ Reduce/ 任务/ ,/ 也/ 无法/ 按时/ 完成/ ./ 那么/ 显然/ 无论/ 使用/ 何种/ 调度/ 策略/ ,/ 都/ 无法/ 使/ j/ 按时/ 完成/ ./ (/ 2/ )/ 若/ COTm/ (/ j/ )/ +/ TCr/ (/ j/ )/ / j/ ./ deadline/ ,/ 而/ j/ 的/ Reduce/ 完成/ 时间/ COTr/ (/ j/ )/ >/ j/ ./ deadline/ ./ 那么/ 根据/ SEQ/ 策略/ ,/ 在/ 时间段/ [/ COTm/ (/ j/ )/ ,/ COTr/ (/ j/ )/ ]/ 内/ ,/ 必有/ 部分/ 时间/ 被/ 一些/ 完成/ 时间/ 时限/ 小于/ j/ ./ deadline/ 的/ 作业/ 的/ Reduce/ 任务/ 占用/ ./ 我们/ 从/ 这些/ 作业/ 当中/ ,/ 选择/ Map/ 阶段/ 完成/ 时间/ 最小/ 的/ 作业/ ,/ 记为/ j/ ./ 在/ 时间段/ [/ COTm/ (/ j/ )/ ,/ COTr/ (/ j/ )/ ]/ 内/ 运行/ Reduce/ 任务/ 的/ 所有/ 作业/ 中/ ,/ 判断/ 是否/ 仍然/ 存在/ 完成/ 时间/ 时限/ 小于/ j/ ./ deadline/ 的/ 作业/ ,/ 若/ 存在/ ,/ 则/ 重复/ 上述/ 过程/ ,/ 直到/ 我们/ 找到/ 最终/ 作业/ jf/ ,/ 使得/ 在/ 时间段/ [/ COTm/ (/ jf/ )/ ,/ COTr/ (/ j/ )/ ]/ 内/ 运行/ Reduce/ 任务/ 的/ 所有/ 作业/ 的/ 完成/ 时限/ 都/ 不/ 小于/ jf/ ./ deadline/ ./ 显然/ 地/ ,/ 在/ 时间段/ [/ COTm/ (/ jf/ )/ ,/ COTr/ (/ j/ )/ ]/ 内/ ,/ 不/ 存在/ 空闲/ 的/ 时间段/ ./ 那么/ 如果/ 使用/ 其他/ 调度/ 策略/ ,/ 可以/ 使/ j/ 按时/ 完成/ ,/ 则/ 一定/ 会/ 有/ 其他/ 作业/ 变得/ 超时/ ./ 根据上述/ 2/ 个/ 定理/ ,/ 在/ 给定/ 序列/ S/ 时/ ,/ 本文/ 提出/ 的/ SEQ/ 策略/ 是/ 最优/ 的/ ,/ 也就是说/ 如果/ 使用/ SEQ/ 策略/ 会/ 出现/ 作业/ 超时/ ,/ 那么/ 任何/ 策略/ 都/ 无法/ 保证/ 所有/ 作业/ 都/ 按时/ 完成/ ./ 4.2/ AMB/ 算法/ 具体/ 地/ ,/ AMB/ 算法/ 由/ 2/ 个/ 部分/ 构成/ :/ 首先/ ,/ 针对/ 一般/ 情况/ ,/ 即/ 申请/ 候选/ 集/ 为/ 静态/ 时/ ,/ 算法/ 利用/ 一种/ 新型/ 的/ 评分/ 策略/ 确定/ 接收/ 优先级/ ,/ 并/ 采用/ 了/ 有效/ 的/ 剪枝/ 策略/ 以/ 快速/ 地/ 确定/ 可以/ 接收/ 的/ 作业/ 集合/ ,/ 并/ 找到/ 相应/ 的/ 有效/ 序列/ ;/ 此外/ ,/ 在/ 实际/ 应用/ 中/ ,/ 作业/ 集合/ 往往/ 是/ 动态/ 更新/ 的/ ,/ 即/ 允许/ 在/ 运行/ 过程/ 中有/ 新/ 的/ 作业/ 提交/ ./ 针对/ 这种/ 情况/ ,/ AMB/ 算法/ 采用/ 一种/ 增量/ 的/ 方法/ 实现/ 快速/ 地/ 接收/ 判定/ ,/ 并/ 在/ 必要/ 时/ 更新/ 有效/ 序列/ ./ 下面/ 就/ 这/ 2/ 部分/ 进行/ 详细/ 的/ 阐述/ ./ Page64/ ./ 2.1/ 静态/ 部分/ 对于/ 具有/ 大量/ 作业/ 的/ 申请/ 集合/ J/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ J/ |/ }/ ,/ 我们/ 需要/ 根据/ SEQ/ 策略/ 快速/ 地/ 确定/ 可/ 接收/ 作业/ 集合/ A/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ A/ |/ }/ ,/ 并/ 确定/ 适合/ 集合/ A/ 的/ 有效/ 序列/ ,/ 以/ 达到/ 最大/ 收益/ 的/ 目的/ ./ 但是/ ,/ 对于/ 申请/ 集合/ J/ ,/ 就/ 存在/ 2/ |/ J/ |/ 种/ 不同/ 的/ 接收/ 作业/ 集合/ ./ 对于/ 任何/ 一种/ 接收/ 集合/ A/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ A/ |/ }/ ,/ 仍然/ 存在/ |/ A/ |/ !/ 种/ 不同/ 的/ 序列/ ./ 为/ 快速/ 找到/ 可/ 接收/ 集合/ 和/ 对应/ 的/ 有效/ 序列/ ,/ 本文/ 提出/ 了/ AMB/ 算法/ ,/ 具体步骤/ 如下/ ./ 为/ 提高/ 接收/ 判定/ 的/ 效率/ ,/ 本文/ 首先/ 对/ 申请/ 集合/ J/ 中/ 的/ 作业/ 进行/ 合理/ 排序/ ,/ 以/ 确定/ 接收/ 的/ 优先/ 次序/ ./ 通过/ 分析/ MapReduce/ 作业/ 的/ 特点/ ,/ 排序/ 主要/ 考虑/ 如下/ 2/ 个/ 方面/ :/ (/ 1/ )/ 直观/ 地/ ,/ 由于/ 集群/ 的/ 总/ 计算能力/ 有限/ ,/ 为/ 实现/ 收益/ 最大/ ,/ 应/ 考虑/ 优先/ 接收/ “/ 收益/ 比/ ”/ 大/ 的/ 作业/ ./ 其中/ / j/ ∈/ J/ ,/ j/ 的/ 系统/ 耗时/ 可以/ 量化/ 为/ STC/ (/ j/ )/ =/ TCm/ (/ j/ )/ ·/ M/ // (/ M/ +/ R/ )/ +/ TCr/ (/ j/ )/ ·/ R/ // (/ M/ +/ R/ )/ ,/ 则/ j/ 的/ 收益/ 比/ :/ Br/ (/ j/ )/ =/ j/ ./ benefit/ // STC/ (/ j/ )/ ,/ 即/ 运行/ j/ 时/ 每秒/ 可以/ 获得/ 的/ 收益/ ./ 例如/ 在/ 表/ 1/ 中/ ,/ 作业/ j1/ 的/ 收益/ 比/ :/ Br/ (/ j1/ )/ =/ 300/ // (/ 150/ ·/ 30/ // 50/ +/ 170/ ·/ 20/ // 50/ )/ ≈/ 1.90/ ./ (/ 2/ )/ 另外/ ,/ 考虑/ 到/ MapReduce/ 集群/ 的/ 特点/ ,/ 如果/ 某个/ 作业/ j/ 过长/ ,/ 那么/ 当/ 运行/ j/ 的/ Map/ (/ Reduce/ )/ 任务/ 时/ ,/ 大部分/ Reduce/ (/ Map/ )/ 任务/ 槽/ 可能/ 由于/ 得不到/ 任务/ 而/ 被/ 闲置/ ,/ 导致/ 系统资源/ 的/ 浪费/ ,/ 进而/ 影响/ 其他/ 作业/ 的/ 正常/ 接收/ ./ 因此/ ,/ 应/ 考虑/ 对/ 过长/ 作业/ 引入/ 收益/ 惩罚/ 机制/ ./ 例如/ 在/ 表/ 1/ 中/ ,/ 作业/ j5/ 的/ 收益/ 比/ 很/ 高/ ,/ 但/ 相比/ 于/ 其他/ 作业/ ,/ 它/ 的/ TCm/ (/ j5/ )/ 和/ TCr/ (/ j5/ )/ 过长/ ,/ 若/ 接收/ j5/ ,/ 会/ 影响/ 其他/ 作业/ 的/ 接收/ ,/ 使/ 总体/ 收益/ 变/ 低/ ,/ 因此/ 需要/ 对/ j5/ 加入/ 收益/ 惩罚/ ./ 表/ 1/ 排序/ 得分/ 举例/ (/ Map/ 槽/ 数/ 犕/ =/ 30/ ,/ Reduce/ 槽/ 数/ 犚/ =/ 20/ )/ 作业/ TCm/ (/ j/ )/ // sTCr/ (/ j/ )/ // s/ 完成/ 时间/ // s/ 收益/ 收益/ 比/ 排序/ 得分/ j11501705003001/ ./ 901.90/ j21601406503402/ ./ 242.24/ j31901809804002/ ./ 152.15/ j41402004003802/ ./ 322.32/ j5400500100013603/ ./ 091.91/ j61901206003502/ ./ 162.16/ 综合/ 考虑/ 上述/ 2/ 方面/ 因素/ ,/ 本文/ 提出/ 了/ 一种/ 以/ 最大化/ 收益/ 为/ 目标/ 的/ 排序/ 得分/ 函数/ ,/ 得分/ 较/ 高/ 的/ 作业/ 将/ 被/ 优先/ 接收/ ./ 其中/ Ad/ (/ j/ )/ 为/ j/ 的/ 调整/ 系数/ ,/ STC/ (/ j/ )/ ·/ Ad/ (/ j/ )/ 为/ j/ 的/ 调整/ 时间/ ./ 具体/ 地/ ,/ 记/ 集合/ J/ 中/ 所有/ 作业/ Map/ 阶段/ 耗时/ 之/ 和/ Total/ _/ TCm/ =/ ∑/ j/ ∈/ JTCm/ (/ j/ )/ ./ 对于/ 作业/ j/ ,/ 记录/ J/ 中除/ j/ 以外/ 其他/ 作业/ 的/ Map/ 阶段/ 平均/ 耗时/ TCm/ (/ j/ )/ =/ (/ Total/ _/ TCm/ -/ TCm/ (/ j/ )/ )/ // (/ |/ J/ |/ -/ 1/ )/ ./ 给定/ 一个/ 惩罚/ 阈值/ β/ (/ β/ >/ 1/ )/ ,/ 若/ TCm/ (/ j/ )/ >/ TCm/ (/ j/ )/ ·/ β/ ,/ 那么/ 认为/ j/ 的/ Map/ 阶段/ 过长/ ;/ 同理/ ,/ 若/ TCr/ (/ j/ )/ >/ TCr/ (/ j/ )/ ·/ β/ ,/ 那么/ 认为/ j/ 的/ Reduce/ 阶段/ 过长/ ,/ 则/ 调整/ 系数/ Ad/ (/ j/ )/ 为/ Ad/ (/ j/ )/ =/ 下面/ ,/ 我们/ 通过/ 一个/ 例子/ 来/ 具体/ 说明文/ 中/ 排序/ 得分/ 和/ 调整/ 系数/ 的/ 含义/ ./ 例/ 1/ ./ 如图/ 3/ 中/ 所示/ ,/ j5/ 是/ 表/ 1/ 中/ 的/ 作业/ ./ j5/ 的/ 系统/ 耗时/ 为/ STC/ (/ j5/ )/ =/ 400/ ×/ 3/ // 5/ +/ 500/ ×/ 2/ // 5/ =/ 440/ ,/ 则/ j5/ 的/ 收益/ 比为/ Br/ (/ j5/ )/ =/ 1360/ // 440/ ≈/ 3.09/ ./ 假设/ 在/ 理想/ 情况/ 下/ ,/ j5/ 可以/ 与/ 其他/ 作业/ 共享/ 系统资源/ ,/ 系统资源/ 可以/ 充分利用/ ,/ 此时/ j5/ 的/ 排序/ 得分/ 等于/ 收益/ 比/ ./ 但/ 在/ 实际/ 情况/ 下/ ,/ 根据/ 表/ 1/ 中/ 的/ 其他/ 作业/ 的/ 运行/ 时/ 长/ 可以/ 看出/ ,/ j5/ 的/ Map/ 和/ Reduce/ 阶段/ 的/ 耗时/ 都/ 远超过/ 其他/ 作业/ ./ 在/ j5/ 的/ Map/ 任务/ 运行/ 期间/ ,/ 其他/ 作业/ 的/ Reduce/ 任务/ 很快/ 地/ 执行/ 完毕/ ,/ 在/ 剩余/ 的/ 时间/ 里/ ,/ 许多/ Reduce/ 任务/ 槽/ 由于/ 无法/ 获得/ 任务/ 而/ 长期/ 处于/ 空闲/ 状态/ ,/ 导致/ 了/ 计算资源/ 的/ 浪费/ ,/ 而/ 实际上/ 这种/ 资源/ 浪费/ 是/ 由/ j5/ 引起/ 的/ ./ 同理/ ,/ 当/ j5/ 的/ Reduce/ 任务/ 运行/ 期间/ ,/ 也/ 会/ 有/ 大量/ 闲置/ 的/ Map/ 任务/ 槽/ ./ 具体/ 地/ ,/ j5/ 的/ Map/ 和/ Reduce/ 阶段/ 与/ 同/ 其他/ 作业/ 共享/ 的/ 时间/ 长度/ 的/ 期望值/ 分别/ 是/ TCm/ (/ j5/ )/ =/ 166/ 和/ TCr/ (/ j5/ )/ =/ 162/ ,/ 因此/ 我们/ 可以/ 将/ j5/ 占用/ 的/ 系统/ 时间/ 调整/ 为/ STC/ (/ j/ )/ ·/ Ad/ (/ j/ )/ =/ 440/ ×/ [/ (/ 400/ -/ 166/ )/ // 400/ ×/ 3/ // 5/ +/ (/ 500/ -/ 162/ )/ // 500/ ×/ 2/ // 5/ +/ 1/ ]/ ≈/ 713/ ,/ 即/ j5/ 的/ 调整/ 时间/ 为/ 713/ ,/ 则/ 排序/ 得/ 分为/ Score/ (/ j5/ )/ =/ 1360/ // Page7713/ ≈/ 1.91/ ./ 为/ 方便/ 描述/ ,/ 假设/ 申请/ 集合/ J/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ J/ |/ }/ 中/ 的/ 作业/ 已经/ 按照/ 式/ (/ 2/ )/ 的/ 得分/ 降序/ 排列/ 完毕/ ,/ / ji/ ∈/ J/ ,/ Score/ (/ ji/ )/ / Score/ (/ ji/ +/ 1/ )/ ./ 接下来/ ,/ 一种/ 基本/ 的/ 接收/ 判定/ 方法/ 是/ ,/ 首先/ 初始化/ 接收/ 集合/ A/ 为空/ ;/ 然后/ ,/ 逐个/ 审查/ J/ 中/ 的/ 作业/ ,/ 对于/ / ji/ ∈/ J/ ,/ 依据/ SEQ/ 策略/ ,/ 判定/ 是否/ 存在/ 对于/ A/ ∪/ {/ ji/ }/ 的/ 有效/ 序列/ ./ 若/ 存在/ ,/ 将/ ji/ 加入/ 到/ A/ 中/ ,/ 否则/ ,/ 放弃/ 作业/ ji/ ./ 但/ 实际上/ ,/ 对于/ 任意/ A/ ∪/ {/ ji/ }/ ,/ 都/ 存在/ (/ |/ A/ |/ +/ 1/ )/ !/ 种/ 序列/ ./ 下面/ ,/ 我们/ 就/ 介绍/ 2/ 种/ 剪枝/ 策略/ 以/ 快速/ 地/ 找到/ 有效/ 序列/ ./ 定理/ 3/ ./ 给定/ 作业/ 集合/ A/ 的/ 一个/ 有效/ 序列/ S/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ jn/ }/ ,/ 对于/ 一个/ 新/ 作业/ jnew/ ,/ 有/ n/ +/ 1/ 个/ 位置/ 可供/ jnew/ 插入/ (/ 第/ i/ 个/ 位置/ 介于/ ji/ -/ 1/ 与/ ji/ 之间/ )/ ./ 如果/ TCm/ (/ jnew/ )/ +/ COTm/ (/ ji/ )/ +/ TCr/ (/ ji/ )/ >/ ji/ ./ deadline/ ,/ 那么/ jnew/ 无法/ 插入/ 到/ 位置/ [/ 1/ ,/ i/ ]/ 中/ ./ 证明/ ./ 明显/ 地/ ,/ jnew/ 插入/ 到/ [/ 1/ ,/ i/ ]/ 中/ 的/ 任何/ 位置/ ,/ ji/ 都/ 将/ 超时/ ./ 定理/ 4/ ./ 给定/ 作业/ 集合/ A/ 的/ 一个/ 有效/ 序列/ S/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ jn/ }/ ,/ 对于/ 一个/ 新/ 作业/ jnew/ ,/ 若/ COTm/ (/ ji/ )/ +/ TCm/ (/ jnew/ )/ +/ TCr/ (/ jnew/ )/ >/ jnew/ ./ deadline/ ,/ 那么/ jnew/ 无法/ 插入/ 到/ 位置/ [/ i/ +/ 1/ ,/ n/ +/ 1/ ]/ 中/ ./ 证明/ ./ 假设/ jnew/ 可以/ 插入/ 到/ [/ i/ +/ 1/ ,/ n/ +/ 1/ ]/ 中/ 的/ 某个/ 位置/ ,/ 根据/ SEQ/ 策略/ ,/ jnew/ 的/ 最早/ 完成/ 时间/ / COTm/ (/ ji/ )/ +/ TCm/ (/ jnew/ )/ +/ TCr/ (/ jnew/ )/ >/ jnew/ ./ deadline/ ./ 因此/ ,/ jnew/ 必然/ 超时/ ./ 利用/ 上述/ 定理/ ,/ 本文/ 提出/ 的/ AMB/ 算法/ (/ 静态/ 部分/ )/ 可以/ 快速/ 地/ 得到/ 可/ 接收/ 的/ 作业/ 集合/ 以及/ 相应/ 的/ 有效/ 序列/ ,/ 以/ 达到/ 最大/ 收益/ ./ 算法/ 1/ 给出/ 了/ 算法/ 的/ 具体/ 过程/ ./ 算法/ 1/ ./ AMB/ 算法/ (/ 静态/ 部分/ )/ ./ 输入/ :/ 用户/ 提交/ 的/ 作业/ 申请/ 集合/ J/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ J/ |/ }/ 输出/ :/ 接收/ 作业/ 集合/ A/ 以及/ 相应/ 的/ 有效/ 序列图/ 4AMB/ 算法/ -/ 静态/ 部分/ 1/ ./ 根据/ 式/ (/ 2/ )/ 计算/ J/ 中/ 各/ 作业/ 的/ 排序/ 得分/ ;/ 2/ ./ 将/ J/ 中/ 作业/ 按照/ 得分/ 降序/ 排序/ ;/ 3/ ./ J/ 中首/ 作业/ j1/ 加入/ A/ ,/ {/ j1/ }/ 加入/ 有效/ 序列/ 集合/ φ/ 1/ ;/ 4/ ./ FOREACHji/ ∈/ J/ (/ i/ >/ 1/ )/ DO/ 初始化/ 有效/ 序列/ 集合/ φ/ i/ 为空/ ;/ 5/ ./ FOREACHS/ ∈/ φ/ i/ -/ 1DO6/ ./ 根据/ 定理/ 3/ 判断/ ji/ 可/ 插入/ 的/ 最小/ 位置/ a/ ;/ 7/ ./ 根据/ 定理/ 4/ 判断/ ji/ 可/ 插入/ 的/ 最大/ 位置/ b/ ;/ 8/ ./ IFa/ / bTHEN9/ ./ FOREACHp/ ∈/ [/ a/ ,/ b/ ]/ DO10/ ./ 将/ ji/ 插入/ S/ 的/ p/ 位置/ ,/ 得到/ 新/ 序列/ S/ ;/ 11/ ./ 根据/ SEQ/ 策略/ 计算/ S/ 中/ 各/ 作业/ 完成/ 时间/ ;/ 12/ ./ IFS/ 是/ 有效/ 序列/ THEN13/ ./ 将/ S/ 插入/ 有效/ 序列/ 集合/ φ/ i/ 中/ ;/ 14/ ./ ENDIF15/ ./ ENDFOR16/ ./ ENDIF17/ ./ ENDFOR18/ ./ IF/ φ/ i/ 不为/ 空/ THEN19/ ./ 将/ ji/ 加入/ A/ 中/ ;/ 20/ ./ ELSE21/ ./ 放弃/ 接收/ ji/ ,/ φ/ i/ =/ φ/ i/ -/ 1/ ;/ 22/ ./ ENDIF23/ ./ ENDFOR24/ ./ 返回/ 集合/ A/ 和/ φ/ |/ J/ |/ 中/ 的/ 任一/ 有效/ 序列/ ;/ 例/ 2/ (/ AMB/ 算法/ -/ 静态/ 部分/ )/ ./ 继续/ 表/ 1/ 中/ 给出/ 了/ 的/ 例子/ ,/ 根据/ 得分/ 排序/ 得到/ 的/ 有序/ 作业/ 集合/ J/ =/ {/ j4/ ,/ j2/ ,/ j6/ ,/ j3/ ,/ j5/ ,/ j1/ }/ ./ 接下来/ 如图/ 4/ 所示/ ,/ 在/ AMB/ 算法/ 中/ ,/ 首先/ 将/ j4/ 加入/ 到/ 接收/ 集合/ A/ 中/ ./ 下面/ 考虑/ j2/ ,/ 由于/ TCm/ (/ j2/ )/ +/ COTm/ (/ j4/ )/ +/ TCr/ (/ j4/ )/ =/ 160/ +/ 140/ +/ 200/ =/ 500/ >/ j4/ ./ deadline/ ,/ 根据/ 定理/ 3/ ,/ j2/ 无法/ 插入/ 到/ j4/ 之前/ ./ 因此/ ,/ 只/ 需要/ 判断/ {/ j4/ ,/ j2/ }/ 是否/ 为/ 有效/ 序列/ ./ 根据/ SEQ/ 策略/ 中/ 作业/ 完成/ 时间/ 的/ 计算方法/ ,/ 得知/ {/ j4/ ,/ j2/ }/ 为/ 有效/ 序列/ ./ 接下来/ 考虑/ j6/ ,/ 此时/ 对于/ A/ 的/ 有效/ 序列/ {/ j4/ ,/ j2/ }/ ,/ COTm/ (/ j2/ )/ +/ TCm/ (/ j6/ )/ +/ TCr/ (/ j6/ )/ =/ 300/ +/ 190/ +/ 120/ =/ 610/ >/ j6/ ./ deadline/ ,/ 根据/ 定理/ 4/ ,/ j6/ 无法/ 插入/ 到/ j2/ 之后/ ./ 同时/ ,/ 根据/ 定理/ 3/ ,/ j6/ 无法/ 插入/ 到/ j4/ 之前/ ./ 因此/ ,/ 只/ 需要/ 判断/ {/ j4/ ,/ j6/ ,/ j2/ }/ 是否/ 为/ 有效/ 序列/ ./ 经/ 进一步/ 计算/ ,/ 得知/ {/ j4/ ,/ j6/ ,/ j2/ }/ 确实/ 为/ 有效/ 序列/ ./ 重复/ 上述/ 过程/ 直至/ 判断/ 完毕/ J/ 中/ 的/ 所有/ 作业/ ./ 最终/ ,/ 通过/ AMB/ 算法/ ,/ 我们/ 得到/ 了/ 接收/ 作业/ 集合/ A/ 以/ Page8/ 及/ A/ 的/ 有效/ 序列/ {/ j4/ ,/ j2/ ,/ j6/ ,/ j3/ }/ ./ 其/ 总/ 收益/ 为/ 1470.4/ ./ 2.2/ 动态/ 部分/ 在/ 实际/ 应用/ 中/ ,/ 申请/ 作业/ 集合/ 往往/ 是/ 动态/ 更新/ 的/ ,/ 即/ 允许/ 在/ 运行/ 过程/ 中/ 提交/ 新/ 的/ 作业/ 申请/ ./ 在/ 这种/ 动态/ 的/ 情况/ 下/ ,/ 对于/ 每个/ 新/ 提交/ 的/ 作业/ ,/ 系统/ 首先/ 需要/ 根据/ 目前/ 的/ 剩余/ 计算资源/ ,/ 判断/ 该/ 作业/ 是否/ 可以/ 被/ 接收/ ;/ 此外/ ,/ 若/ 成功/ 接收/ 新/ 的/ 作业/ ,/ 那么/ 还/ 需要/ 及时/ 地/ 生成/ 新/ 的/ 有效/ 序列/ ./ 在/ 本文/ 的/ AMB/ 算法/ 中/ ,/ 主要/ 采用/ 了/ 一种/ 简单/ 的/ 增量/ 方法/ 来/ 有效/ 地/ 解决/ 上述/ 问题/ ./ 具体/ 处理过程/ 描述/ 如下/ ./ 设在/ 运行/ 过程/ 中/ 的/ 某一时间/ 点/ t/ ,/ 系统/ 检测/ 到/ 若干个/ 新/ 的/ 作业/ 申请/ ,/ 记/ 作/ 集合/ J/ ./ 首先/ ,/ 对/ J/ 中/ 的/ 作业/ 按照/ 排序/ 得分/ (/ 见式/ (/ 2/ )/ )/ 进行/ 降序/ 排序/ ./ 明显/ 地/ ,/ 得分/ 较/ 高/ 的/ 作业/ 具有/ 较/ 高/ 的/ 接收/ 优先级/ (/ 具体/ 原图/ 5AMB/ 算法/ -/ 动态/ 部分/ 4.3/ 超时/ 处理/ 本文/ 的/ AMB/ 算法/ 主要/ 针对/ 同构/ 集群/ 设计/ ,/ 绝大部分/ 情况/ 下/ 可以/ 保证/ 估计值/ j/ ./ Tm/ 、/ j/ ./ Tr/ 贴近/ 真实/ 值/ ./ 但/ 在/ 实际/ 应用/ 中/ ,/ 某些/ 异常情况/ (/ 如/ 网络/ 阻塞/ 、/ 节点/ 宕机/ 等/ )/ 是/ 无法/ 完全避免/ 的/ ,/ 会/ 导致/ 某些/ 被/ 接收/ 的/ 作业/ 无法/ 按时/ 完成/ ./ 在/ 这种/ 情况/ 下/ ,/ 必须/ 对/ 运行/ 中/ 的/ 作业/ 进行/ 合理/ 的/ 调整/ ,/ 才/ 能够/ 保证/ 总体/ 收益/ 最大化/ ./ 下面/ ,/ 我们/ 给出/ 一个/ 作业/ 超时/ 的/ 具体/ 实例/ ./ 例/ 4/ ./ 继续/ 表/ 1/ 中/ 所示/ 的/ 例子/ ,/ 经过/ AMB/ 算法/ 计算/ ,/ 我们/ 已经/ 得到/ 了/ 接收/ 作业/ 集合/ 以及/ 相应/ 的/ 有效/ 序列/ {/ j4/ ,/ j2/ ,/ j6/ ,/ j3/ }/ (/ 具体/ 细节/ 如图/ 4/ 所示/ )/ ./ 但/ 在/ 系统/ 执行/ j4/ 的/ Map/ 任务/ 时/ ,/ 出现/ 部分/ 节点/ 宕机/ ./ 在/ 重启/ 宕机/ 节点/ 之后/ ,/ 重新/ 估计/ j4/ 的/ 完成/ 时间/ ,/ 发现/ j4/ 的/ Map/ 阶段/ 在/ 时间/ 点/ 170/ 才能/ 完成/ ./ 按照/ 原/ 有效/ 序列/ 计算/ 各/ 作业/ 的/ 完成/ 时间/ ,/ 结果/ 如图/ 6/ 所示/ ./ 此时/ ,/ 作业/ j2/ 无法/ 按时/ 完成/ ./ 当/ 预计/ 某些/ 已/ 被/ 接收/ 的/ 作业/ 无法/ 按时/ 完成/ 时/ ,/ 就/ 需要/ 及时/ 地/ 放弃/ 某些/ 作业/ ,/ 以/ 保证/ 整体/ 收益/ ./ 一种/ 最为/ 基本/ 的/ 策略/ 就是/ 放弃/ 正在/ 运行/ 的/ 作业/ ./ 因为/ 按因/ 已/ 在/ 静态/ 部分/ 阐述/ )/ ./ 接下来/ ,/ 依次/ 遍历/ J/ 中/ 的/ 作业/ ,/ 对于/ 任意/ 作业/ j/ ,/ j/ ∈/ J/ ,/ 可以/ 根据/ 定理/ 3/ 、/ 4/ 计算/ 出/ j/ 可/ 插入/ 原/ 有效/ 序列/ S/ 中/ 的/ 位置/ ./ 若/ 存在/ 有效/ 位置/ ,/ 则/ 接收/ j/ 并/ 生成/ 新/ 的/ 有效/ 序列/ ./ 否则/ ,/ 放弃/ j/ ./ 例/ 3/ (/ AMB/ 算法/ -/ 动态/ 部分/ )/ ./ 继续/ 表/ 1/ 中/ 给出/ 的/ 例子/ ,/ 原/ 有效/ 序列/ 已/ 计算/ 完毕/ ,/ S/ =/ {/ j4/ ,/ j2/ ,/ j6/ ,/ j3/ }/ ,/ 图/ 5/ (/ b/ )/ 为原/ 有效/ 序列/ ./ 接下来/ ,/ 假设/ 在/ 时间/ 点/ t/ =/ 300s/ 时/ ,/ 系统/ 接收/ 到/ 2/ 个/ 新/ 的/ 作业/ 请求/ j7/ 、/ j8/ ,/ 具体/ 参数/ 详见/ 图/ 5/ (/ a/ )/ ./ 那么/ ,/ 首先/ 计算/ j7/ 、/ j8/ 的/ 排序/ 得分/ ,/ Score/ (/ j7/ )/ =/ 2.13/ ,/ Score/ (/ j8/ )/ =/ 1.92/ ,/ 则/ 优先/ 考虑/ j7/ ./ 接下来/ ,/ 根据/ 定理/ 3/ 、/ 4/ ,/ 发现/ j7/ 可以/ 插入/ 到/ j6/ 、/ j3/ 之间/ ,/ 因此/ 接收/ j7/ ,/ 并/ 将/ 有效/ 序列/ 更新/ 为/ S/ =/ {/ j4/ ,/ j2/ ,/ j6/ ,/ j7/ ,/ j3/ }/ ./ 类似/ 地/ ,/ 判断/ j8/ ,/ 发现/ j8/ 无法/ 插入/ 到/ S/ 当中/ ,/ 因此/ 拒绝/ j8/ ./ 图/ 5/ (/ c/ )/ 描述/ 了/ 更新/ 后/ 的/ 最终/ 结果/ ./ 照原/ 有效/ 序列/ ,/ 所有/ 未/ 执行/ 作业/ 的/ 参数均/ 未/ 发生变化/ ,/ 而/ 某个/ 作业/ 无法/ 按时/ 完成/ 的/ 根源/ 只是/ 因为/ 当前/ 运行/ 的/ 作业/ 无法/ 按照/ 原/ 计划/ 完成/ ./ 例如/ 在/ 图/ 6/ 中/ ,/ j2/ 无法/ 按时/ 完成/ 只是/ 因为/ j4/ 的/ Map/ 阶段/ 完成/ 时间/ 变长/ ./ 而/ 放弃/ j4/ 就/ 可以/ 确保/ 其他/ 作业/ 都/ 按时/ 完成/ ./ 算法/ 2/ ./ 超时/ 处理/ 算法/ ./ 输入/ :/ 接收/ 作业/ 集合/ A/ ,/ 原/ 有效/ 序列/ S/ ,/ 正在/ 运行/ 的/ 作/ 输出/ :/ 需要/ 放弃/ 的/ 作业/ 集合/ C1/ ./ 将/ A/ 中/ 的/ 作业/ 按照/ 收益/ 由小到大/ 排序/ ;/ 2/ ./ IFjrunning/ 是/ 收益/ 最小/ 的/ 作业/ THEN3/ ./ C/ =/ {/ jrunning/ }/ ;/ 4/ ./ ELSE5/ ./ FOREACHji/ ∈/ A/ 且/ ji/ ./ benefit/ </ jrunning/ ./ benefitDO6/ ./ IF/ 在/ S/ 中/ 移除/ ji/ ,/ S/ 变为/ 有效/ 序列/ THENPage97/ ./ C/ =/ {/ ji/ }/ ,/ BREAK/ ;/ 8/ ./ ELSEIFji/ ./ benefit/ +/ ∑/ j/ ∈/ CTHEN9/ ./ 将/ ji/ 加入/ C/ 中/ ;/ 10/ ./ IF/ 在/ S/ 中/ 移除/ C/ 中/ 的/ 所有/ 作业/ ,/ S/ 变为/ 有效/ 11/ ./ BREAK/ ;/ 12/ ./ ENDIF13/ ./ ELSE14/ ./ C/ =/ {/ jrunning/ }/ ;/ 15/ ./ ENDIF16/ ./ ENDFOR17/ ./ ENDIF/ 但/ 根据/ 式/ (/ 1/ )/ ,/ 为/ 保证/ 总/ 收益/ P/ 最大/ ,/ 应/ 在/ 保证/ 剩余/ 作业/ 都/ 能够/ 按时/ 完成/ 的/ 前提/ 下/ ,/ 放弃/ 收益/ 最低/ 的/ 作业/ ./ 基于/ 这种/ 思想/ ,/ 本文/ 提出/ 了/ 一种/ 新型/ 的/ 超时/ 处理/ 算法/ ./ 算法/ 2/ 给出/ 了/ 该/ 算法/ 的/ 具体/ 过程/ ./ 例/ 5/ ./ 在/ 图/ 6/ 所示/ 的/ 例子/ 中/ ,/ 按照/ 作业/ 收益/ 进行/ 排序/ ,/ 收益/ 低于/ j4/ 的/ 作业/ 有/ j2/ 、/ j6/ ./ 首先/ 尝试/ j2/ ,/ 发现/ 放弃/ j2/ ,/ 序列/ {/ j4/ ,/ j6/ ,/ j3/ }/ 变为/ 有效/ 序列/ ./ 则/ 超时/ 处理/ 完成/ ./ 5/ 实验/ 分析/ 在/ 本/ 小节/ 中/ ,/ 我们/ 首先/ 基于/ Hadoop/ 系统/ 实现/ 了/ AMB/ 算法/ (/ 详见/ 附录/ B/ )/ ,/ 并/ 分别/ 使用/ 静态/ 作业/ 集/ 和/ 动态/ 作业/ 集/ 测试/ 了/ 算法/ 的/ 性能/ ./ 实验/ 中/ 所/ 使用/ 的/ MapReduce/ 集群/ 包括/ 1/ 个主/ 节点/ 和/ 40/ 个子/ 节点/ ./ 每个/ 子/ 节点/ 上/ 配置/ 2/ 个/ Map/ 任务/ 槽/ 和/ 2/ 个/ Reduce/ 任务/ 槽/ ,/ 文件系统/ 分片/ 大小/ 为/ 64MB/ ./ 全部/ 41/ 个/ 节点/ 的/ 配置/ 均/ 为/ IntelCorei321003/ ./ 1GHzCPU/ ,/ 8GB/ 内存/ ,/ 500GB/ 硬盘/ ,/ 操作系统/ 为/ RedHatLinux6/ ./ 1.5/ ./ 1/ 静态/ 作业/ 集/ 的/ 实验/ 结果/ 与/ 分析/ 在/ 本节/ 实验/ 中/ ,/ 所/ 使用/ 的/ 作业/ 主要/ 包括/ 如下/ 3/ 种/ 常见/ 的/ MapReduce/ 作业/ :/ 词频/ 统计/ 、/ 倒排/ 索引/ 和/ 分布式/ Grep/ ./ 输入/ 的/ 文件/ 为/ 维基百科/ 提供/ 的/ 数据/ 转储/ 文件/ (/ 主要/ 内容/ 是/ 条目/ 、/ 模板/ 、/ 图片/ 描述/ 及/ 基本/ 的/ 元/ 页面/ 等/ 信息/ ,/ 链接/ :/ http/ :/ // // download/ ./ wikipedia/ ./ com/ // enwiki/ // )/ ./ 对于/ 一个/ 申请/ 作业/ 集/ J/ ,/ 我们/ 主要/ 考量/ 如下/ 3/ 个/ 主要参数/ 对/ 算法/ 性能/ 的/ 影响/ :/ (/ 1/ )/ J/ 的/ 规模/ N/ ,/ 即/ J/ 包含/ 的/ 作业/ 个数/ ;/ (/ 2/ )/ J/ 中/ 作业/ 的/ 平均/ 大小/ L/ :/ 我们/ 用/ 作业/ 输入/ 文件/ 的/ 分片/ 数目/ 来/ 度量/ 一个/ 作业/ 的/ 大小/ ,/ 通常/ 情况/ 下/ ,/ 较大/ 的/ 作业/ 需要/ 更/ 多/ 的/ 计算资源/ ./ 在/ 实验/ 中/ ,/ 对于/ 给定/ 的/ L/ ,/ 限定/ / j/ ∈/ J/ ,/ j/ 的/ 大小/ 在/ 区间/ [/ 0.5/ L/ ,/ 1.5/ L/ ]/ 内/ ;/ (/ 3/ )/ J/ 中/ 作业/ 的/ 平均/ 完成/ 时限/ D/ :/ 限定/ / j/ ∈/ J/ ,/ j/ ./ deadline/ 为/ 区间/ [/ 0.5/ D/ ,/ 1.5/ D/ ]/ 内/ 的/ 一个/ 随机/ 值/ ./ 此外/ / j/ ∈/ J/ ,/ j/ 的/ 收益/ j/ ./ benefit/ 为/ [/ 300/ ,/ 700/ ]/ 内/ 的/ 一个/ 随机/ 值/ ,/ 赔付/ 比/ α/ =/ 0.3/ ,/ 惩罚/ 阈值/ β/ =/ 2/ ./ 表/ 2/ 给出/ 了/ 主要参数/ 的/ 默认值/ 和/ 变化/ 范围/ ./ 参数/ 平均/ 作业/ 大小/ 默认值/ 150/ 变化/ 范围/ 100/ ~/ 20020/ ~/ 40800/ ~/ 1600/ 本文/ 以/ 总/ 收益/ P/ (/ 见式/ (/ 1/ )/ )/ 为首/ 要/ 性能指标/ ./ 此外/ ,/ 本文/ 还/ 使用/ 接收/ 率/ 和/ 完成率/ 以/ 更/ 全面/ 地/ 衡量/ 算法/ 的/ 性能/ ,/ 具体/ 地/ :/ (/ 1/ )/ 接收/ 率/ =/ 接收/ 作业/ 集/ 规模/ // 申请/ 作业/ 集/ 规模/ ./ (/ 2/ )/ 完成率/ =/ 按时/ 完成/ 的/ 作业/ 数目/ // 接收/ 作业/ 集/ 规模/ ./ 本文/ 使用/ DC/ 和/ MinEDF/ -/ WC/ 作为/ 对比/ 算法/ ./ 注意/ 这/ 2/ 种/ 算法/ 仅/ 针对/ 具有/ 完成/ 时限/ 约束/ 的/ 作业/ 而/ 设计/ ,/ 因此/ 在/ 确定/ 接收/ 作业/ 集时/ ,/ 无法/ 考虑/ 收益/ ./ 此外/ ,/ 在/ 考量/ 总/ 收益/ 时/ ,/ 我们/ 引入/ 了/ 理想/ 值/ 的/ 概念/ ,/ 即/ 在/ 最/ 理想/ 的/ 状态/ 下/ ,/ 假设/ 系统/ 的/ 计算资源/ 可以/ 被/ 收益/ 比高/ 的/ 作业/ 全部/ 占用/ ,/ 且/ 不必/ 考虑/ 赔偿/ 时/ ,/ 企业/ 可/ 获得/ 的/ 最大/ 收益/ ./ 具体/ 地/ ,/ 对于/ 申请/ 作业/ 集合/ J/ ,/ 找到/ 具有/ 最大/ 完成/ 时限/ 的/ 作业/ j/ ,/ 记/ Max/ _/ time/ =/ j/ ./ deadline/ ./ 接下来/ ,/ 将/ J/ 中/ 的/ 作业/ 按照/ 收益/ 比降/ 序/ 排序/ ,/ 得到/ 有序/ 集合/ J/ =/ {/ j1/ ,/ j2/ ,/ …/ ,/ j/ |/ J/ |/ }/ ./ 确定/ k/ 值/ ,/ 使得/ 前/ k/ 个/ 作业/ 的/ 总/ 系统/ 耗时/ TCk/ =/ ∑/ kMax/ _/ time/ ,/ 同时/ 使前/ k/ +/ 1/ 个/ 作业/ 的/ 总/ 耗时/ TCk/ +/ 1/ =/ ∑/ k/ +/ 1STC/ (/ ji/ )/ >/ Max/ _/ time/ ,/ 则/ 总/ 收益/ 的/ 理想/ 值为/ Ideal/ =/ ∑/ ki/ =/ 1/ 可以/ 看出/ ,/ Ideal/ 值/ 是/ 总/ 收益/ 的/ 上限/ ,/ 在/ 绝大多数/ 情况/ 下/ 是/ 无法/ 达到/ 的/ ./ 例如/ 在/ 表/ 1/ 中/ ,/ 将/ 作业/ 按照/ 收益/ 比/ 进行/ 排序/ 得到/ 有序/ 集合/ J/ =/ {/ j5/ ,/ j4/ ,/ j2/ ,/ j6/ ,/ j3/ ,/ j1/ }/ ,/ 根据上述/ 公式/ 计算/ ,/ Max/ _/ time/ =/ 1000/ ,/ k/ =/ 4/ ,/ TCk/ =/ 440/ +/ 164/ +/ 152/ +/ 162/ =/ 918/ ./ 也/ 就是/ 在/ 理想/ 状态/ 下/ ,/ 系统/ 可以/ 接收/ 的/ 完整/ 作业/ 为/ j5/ ,/ j4/ ,/ j2/ ,/ j6/ ,/ 还/ 可以/ 接收/ 一部分/ j3/ ,/ 那么/ 理想/ 值/ Ideal/ =/ 1360/ +/ 380/ +/ 340/ +/ 350/ +/ 400/ ·/ (/ 1000/ -/ 918/ )/ // 186/ ≈/ 2606.5/ ./ 1.1/ 作业/ 大小/ 的/ 影响/ 如图/ 7/ 所示/ ,/ 本文/ 首先/ 测试/ 了/ 不同/ 作业/ 大小/ 对/ 算法/ 性能/ 的/ 影响/ ./ 在/ 图/ 7/ (/ a/ )/ 中/ ,/ 我们/ 测试/ 作业/ 大小/ 对/ 收益/ 的/ 影响/ ,/ 其中/ Ideal/ 为式/ (/ 4/ )/ 所示/ 的/ 理想/ 值/ ./ 可以/ 看出/ ,/ DC/ 和/ MinEDF/ -/ WC/ 算法/ 可以/ 提供/ 的/ 收/ Page10/ 益较/ 低/ ./ 相比之下/ ,/ AMB/ 算法/ 可以/ 带来/ 非常/ 高/ 的/ 收益/ ,/ 仅仅/ 略低于/ 理想/ 值/ ./ 随着/ 作业/ 逐渐/ 增大/ ,/ 3/ 种/ 算法/ 的/ 收益/ 都/ 会/ 有所/ 降低/ ./ 在/ 图/ 7/ (/ b/ )/ 中/ ,/ 测试/ 了/ 作业/ 大小/ 对/ 接收/ 率/ 的/ 影响/ ./ 在/ 3/ 种/ 算法/ 中/ ,/ 基于/ SEQ/ 调度/ 策略/ 的/ AMB/ 算法/ 可以/ 充分利用/ 计算资源/ ,/ 提供/ 了/ 最高/ 的/ 接收/ 率/ ./ 而/ DC/ 和/ MinEDF/ -/ WC/ 算法/ 使用/ 较为简单/ 的/ 调度/ 策略/ ,/ 无法/ 充分发挥/ 系统/ 的/ 计算能力/ ,/ 导致/ 它们/ 接收/ 的/ 作业/ 数量/ 较少/ ./ 此外/ ,/ 由于/ 完成/ 时限/ 不变/ ,/ 系统/ 在/ 固定/ 时间段/ 内/ 的/ 计算能力/ 一定/ ./ 因此/ ,/ 随着/ 作业/ 增大/ ,/ 3/ 种/ 算法/ 接收/ 的/ 作业/ 数目/ 都/ 有所/ 减少/ ./ 在/ 图/ 7/ (/ c/ )/ 中/ ,/ 测试/ 了/ 作业/ 大小/ 对/ 完成率/ 的/ 影响/ ./ 容易/ 看出/ ,/ 在/ 3/ 种/ 算法/ 中/ ,/ 完成率/ 对/ 作业/ 大小/ 的/ 变化/ 不/ 敏感/ ,/ 并/ 没有/ 发生/ 明显/ 变化/ ./ 其中/ ,/ AMB/ 算法/ 使用/ SEQ/ 策略/ 进行/ 任务调度/ ,/ 可以/ 保证/ 几乎/ 全部/ 被/ 接收/ 的/ 作业/ 都/ 能够/ 按时/ 完成/ ,/ 超时/ 处理/ 算法/ 几乎/ 不会/ 被/ 调用/ ./ MinEDF/ -/ WC/ 算法/ 也/ 可以/ 保持/ 较/ 高/ 的/ 完成率/ ,/ 而/ DC/ 算法/ 在/ Reduce/ 任务调度/ 策略/ 上/ 存在/ 图/ 7/ 作业/ 大小/ 的/ 影响/ 图/ 8/ 申请/ 作业/ 集/ 规模/ 的/ 影响/ 图/ 9/ 完成/ 时限/ 的/ 影响/ 不足/ ,/ 导致/ 一些/ 作业/ 进入/ Reduce/ 阶段/ 后/ 被/ 抛弃/ ,/ 因此/ 利用率/ 最低/ ./ 另外/ ,/ 综合/ 考虑/ 图/ 7/ (/ b/ )/ 和/ (/ c/ )/ 的/ 结果/ ,/ 我们/ 可以/ 发现/ AMB/ 算法/ 在/ 接收/ 率/ 与/ 完成率/ 方面/ 都/ 占有/ 绝对/ 的/ 优势/ ,/ 这/ 也/ 是/ 该/ 算法/ 可以/ 保持/ 较/ 高/ 总/ 收益/ 的/ 主要/ 原因/ ./ 5.1/ ./ 2/ 申请/ 作业/ 集/ 规模/ 的/ 影响/ 在/ 图/ 8/ 中/ ,/ 我们/ 对/ 申请/ 作业/ 集/ 规模/ 的/ 影响/ 进行/ 了/ 测试/ ./ 如图/ 8/ (/ a/ )/ 所示/ ,/ 对于/ 不同/ 的/ 申请/ 集/ 规模/ ,/ 总/ 收益/ 并/ 没有/ 明显/ 变化/ ./ 在/ 图/ 8/ (/ b/ )/ 中/ ,/ 随着/ 申请/ 集/ 规模/ 的/ 增大/ ,/ 3/ 种/ 算法/ 的/ 接收/ 率/ 都/ 有所/ 下降/ ./ 这/ 主要/ 是/ 由于/ 完成/ 时限/ 没有/ 变化/ ,/ 系统/ 在/ 一定/ 时间段/ 内所能/ 接收/ 的/ 作业/ 数目/ 也/ 不会/ 变化/ ,/ 而/ 申请/ 总数/ 增加/ ,/ 因此/ 接收/ 率/ 降低/ ./ 在/ 图/ 8/ (/ c/ )/ 中/ ,/ 测试/ 了/ 申请/ 集/ 规模/ 对/ 完成率/ 的/ 影响/ ,/ 与/ 图/ 7/ (/ c/ )/ 类似/ ,/ 完成率/ 对/ 申请/ 作业/ 集/ 规模/ 也/ 不/ 敏感/ ,/ 并未/ 发生/ 明显/ 变化/ ./ 5.1/ ./ 3/ 完成/ 时限/ 的/ 影响/ 图/ 9/ 测试/ 了/ 完成/ 时限/ 对/ 算法/ 性能/ 的/ 影响/ ./ 如图/ 9Page11/ (/ a/ )/ 所示/ ,/ 随着/ 完成/ 时限/ 的/ 增加/ ,/ 系统/ 能够/ 接收/ 更/ 多/ 的/ 作业/ ,/ 所以/ 3/ 种/ 算法/ 提供/ 的/ 收益/ 都/ 随之/ 增加/ ./ 类似/ 地/ ,/ 在/ 图/ 9/ (/ b/ )/ 中/ ,/ 随着/ 完成/ 时限/ 的/ 增加/ ,/ 3/ 种/ 算法/ 的/ 接受/ 率/ 也/ 随之/ 增加/ ./ 图/ 9/ (/ c/ )/ 出现/ 了/ 与/ 图/ 7/ (/ c/ )/ 和/ 图/ 8/ (/ c/ )/ 相似/ 的/ 结果/ ,/ 本文/ 不/ 作/ 赘述/ ./ 5.2/ 动态/ 作业/ 集/ 的/ 实验/ 结果/ 与/ 分析/ 为了/ 更/ 贴近/ 真实/ 应用/ 场景/ ,/ 本/ 部分/ 采用/ 了/ 动态/ 的/ 申请/ 作业/ 集合/ ./ 具体/ 地/ ,/ 实验/ 中共/ 生成/ 了/ 60/ 个/ 作业/ 申请/ ,/ 其中/ 作业/ 的/ 平均/ 大小/ (/ 分片/ 数目/ )/ 为/ 150/ ,/ 每个/ 作业/ 的/ 完成/ 时限/ 设定/ 为/ 提交/ 时间/ 点/ 之后/ 的/ 400s/ ~/ 600s/ 内/ 的/ 随机/ 值/ ,/ 收益/ 为/ [/ 300/ ,/ 700/ ]/ 内/ 的/ 一个/ 随机/ 值/ ,/ 其他/ 参数/ 设定/ 与/ 5.1/ 小节/ 相同/ ./ 在/ 实验/ 中/ ,/ 平均/ 每隔/ 图/ 10/ 监听/ 结果/ (/ 动态/ 作业/ 集/ )/ 通过/ 上述/ 大量/ 实验/ 验证/ ,/ 我们/ 进一步/ 证明/ 了/ 本文/ 提出/ 的/ SEQ/ 策略/ 和/ AMB/ 算法/ 的/ 有效性/ ./ 6/ 总结/ 本文/ 首次/ 提出/ 了/ MapReduce/ 集群/ 中/ 的/ 最大/ 收益/ 问题/ ,/ 并/ 给出/ 了/ 作业/ 收益/ 的/ 评价/ 标准/ ./ 通过/ 分析/ MapReduce/ 作业/ 的/ 特点/ ,/ 本文/ 提出/ 了/ 一种/ 新型/ 的/ 任务调度/ 策略/ ,/ SEQ/ 策略/ ,/ 并/ 证明/ 了/ 该/ 策略/ 在/ 处理/ 具有/ 完成/ 时限/ 约束/ 的/ 作业/ 时有/ 良好/ 性质/ ./ 基于/ SEQ/ 策略/ ,/ 本文/ 了/ 提出/ 以/ 最大化/ 收益/ 为/ 目标/ 的/ AMB/ 算法/ ,/ 该/ 算法/ 可以/ 快速/ 地/ 确定/ 可/ 接收/ 作业/ 集合/ 并/ 给出/ 有效/ 的/ 作业/ 执行/ 方案/ ,/ 以/ 保证/ 所有/ 接收/ 的/ 作业/ 都/ 可以/ 按时/ 完成/ ,/ 可以/ 最大化/ 收益/ ./ 此外/ ,/ 针对实际/ 应用/ 中/ 无法/ 避免/ 的/ 某些/ 异常情况/ (/ 如/ 节点/ 宕机/ 等/ )/ ,/ 本文/ 设计/ 了/ 有效/ 的/ 超时/ 处理/ 策略/ ./ 最后/ ,/ 通过/ 大量/ 实验/ 验证/ 了/ 本文/ 提出/ 算法/ 的/ 有效性/ 和/ 实用性/ ./ 

