Page1/ 基于/ 最小/ 圆/ 覆盖/ 区域/ 划分/ 的/ 索引/ 过滤/ 算法/ 陈洁/ 1/ )/ ,/ 2/ )/ 方滨兴/ 1/ )/ ,/ 2/ )/ 谭建龙/ 2/ )/ 金世超/ 2/ )/ ,/ 3/ )/ 1/ )/ (/ 北京邮电大学/ 计算机/ 学院/ 北京/ 100876/ )/ 2/ )/ (/ 中国科学院/ 信息工程/ 研究所/ 信息/ 智能/ 处理/ 实验室/ 北京/ 100093/ )/ 3/ )/ (/ 北京大学/ 软件/ 与/ 微电子/ 学院/ 北京/ 100084/ )/ 摘要/ 过滤/ 算法/ 设计/ 是/ 信息内容/ 安全/ 处理/ 系统/ 中/ 的/ 一个/ 重要环节/ ,/ 过滤/ 速度/ 成为/ 衡量/ 过滤/ 系统/ 性能/ 的/ 首要/ 因素/ ./ 索引/ 结构/ 是/ 处理/ 大规模/ 数据/ 的/ 一种/ 有效/ 方式/ ,/ 但/ 目前/ 索引/ 方法/ 都/ 是/ 针对/ 特定/ 检索/ 领域/ 而/ 设计/ ,/ 在/ 实际/ 过滤/ 应用/ 中/ ,/ 并/ 不能/ 满足/ 过滤/ 实时性/ 需求/ ./ 为了/ 加快/ 信息/ 过滤/ 中/ 数据/ 查询/ 的/ 判定/ 速度/ ,/ 文中/ 提出/ 一种/ 基于/ 最小/ 圆/ 覆盖/ 的/ 区域/ 划分/ 方法/ ,/ 构建/ 了/ 适合/ 过滤/ 的/ 索引/ 结构/ :/ F/ -/ tree/ ./ 该/ 算法/ 充分考虑/ 实际/ 过滤/ 环境/ 中正/ 例/ (/ 正常/ 信息/ )/ 多/ 、/ 反例/ (/ 敏感/ 信息/ )/ 少/ 的/ 非/ 平衡/ 数据分布/ 特性/ ,/ 利用/ 最小/ 圆/ 覆盖/ 划分/ 方法/ 得到/ 最大/ 否定/ 判断/ 区域/ ./ 在/ 查询/ 阶段/ ,/ 正例/ 以/ 最大/ 概率/ 落入/ 否定/ 区域/ ,/ 根据/ 否定性/ 判定/ 原理/ 可以/ 对/ 正例/ 快速/ 否定/ 判定/ ,/ 从而/ 加快/ 整体/ 查询/ 的/ 判定/ 速度/ ./ 实验/ 表明/ ,/ 与/ 现有/ 算法/ 相比/ ,/ 所/ 提出/ 的/ 算法/ 减少/ 了/ 查询/ 中/ 的/ 距离/ 计算/ 次数/ ,/ 有效/ 提高/ 了/ 过滤/ 查询/ 性能/ ./ 关键词/ 过滤/ 算法/ ;/ 最小/ 圆/ 覆盖/ ;/ 否定性/ 判定/ ;/ 索引/ 结构/ 1/ 引言/ 信息/ 过滤/ 是/ 信息内容/ 安全/ 领域/ 具有/ 实际/ 应用/ 价值/ 的/ 一个/ 研究/ 方向/ ./ 针对/ 网络/ 中/ 存在/ 的/ 敏感/ 信息/ ,/ 设计/ 有效/ 的/ 过滤/ 算法/ ,/ 对/ 用户/ 所/ 请求/ 的/ 网页/ 信息/ 进行/ 审计/ ,/ 从而/ 过滤/ 判定/ 为/ 敏感/ 内容/ 的/ 信息/ ./ 过滤/ 算法/ 设计/ 是/ 整个/ 安全/ 过滤/ 系统/ 中/ 的/ 一个/ 重要环节/ ,/ 决定/ 过滤/ 系统/ 整体/ 的/ 速度/ 性能/ ./ 一般/ 认为/ 敏感/ 信息/ 过滤/ 技术/ 实质/ 上/ 是/ 一个/ 二/ 分类/ 的/ 问题/ ,/ 目前/ 过滤/ 算法/ 主要/ 采用/ 基于/ 模式/ 分类/ 的/ 方法/ ,/ 通过/ 学习/ 基本/ 的/ 模型/ ,/ 为/ 每个/ 测试数据/ 都/ 打/ 上/ 一个/ 标签/ ,/ 从而/ 过滤/ 标记/ 为/ 敏感/ 信息/ 的/ 数据/ ,/ 常用/ 的/ 有/ 基于/ 概率论/ 的/ 贝叶斯/ 分类/ 方法/ 以及/ 基于/ 最大/ 间隔/ 的/ SVM/ 分类/ 方法/ ./ 而/ 在/ 实际/ 过滤/ 应用/ 中/ 我们/ 需要/ 面对/ 的/ 是/ 海量/ 数据/ 的/ 处理/ ,/ 数据量/ 的/ 个数/ 远远/ 超出/ 了/ 传统模式/ 分类/ 方法/ 的/ 应对/ 能力/ ./ 因此/ 为/ 特征/ 集/ 建立/ 有效/ 的/ 索引/ 结构/ 是/ 实现/ 大规模/ 数据/ 高性能/ 检测/ 的/ 关键技术/ ./ 目前/ 在/ 信息检索/ 领域/ 已有/ 大量/ 有效/ 的/ 索引/ 构建/ 方法/ 被/ 提出/ ,/ 虽然/ 信息检索/ 和/ 信息/ 过滤/ 在/ 某些/ 关键技术/ 的/ 运用/ 上/ 有/ 相似之处/ ,/ 但/ 信息安全/ 过滤/ 相比/ 信息检索/ 需要/ 更快/ 的/ 判定/ 速度/ ,/ 在/ 数据处理/ 方式/ 上/ 也/ 不同/ ./ 目前/ 基于/ 检索/ 的/ 索引/ 结构/ 根本/ 不能/ 满足/ 实际/ 过滤/ 处理/ 环境/ 中所/ 需/ 的/ 实时性/ 需求/ ./ 本文/ 在/ 分析/ 实际/ 网络/ 中正/ 例/ 与/ 反例/ 非/ 平衡/ 分布/ 特性/ 的/ 基础/ 上/ ,/ 提出/ 了/ 一种/ 面向/ 安全/ 过滤/ 的/ 基于/ 最小/ 圆/ 覆盖/ 区域/ 划分/ 的/ 索引/ 构建/ 方法/ ./ 该/ 方法/ 利用/ 否定性/ 判定/ 的/ 思想/ ,/ 结合/ 最小/ 圆/ 覆盖/ 理论/ 基础/ ,/ 通过/ 对/ 数据/ 进行/ 最小/ 圆/ 划分/ ,/ 使/ 每个/ 最小/ 圆/ 之间/ 呈现/ 稀疏/ 性/ 分布/ 特性/ ,/ 以此/ 构建/ 适合/ 实际/ 网页/ 过滤/ 的/ 高性能/ 索引/ 结构/ F/ -/ tree/ ./ 本文/ 的/ 主要/ 贡献/ 包括/ :/ (/ 1/ )/ 深入分析/ 敏感/ 信息/ 过滤/ 的/ 特性/ ,/ 引入/ 图形学/ 中/ 最小/ 圆/ 覆盖/ 理论/ 来/ 解决/ 实际/ 的/ 应用/ 问题/ ./ (/ 2/ )/ 提出/ 一种/ 新/ 的/ 区域/ 划分/ 策略/ —/ —/ —/ 最小/ 圆/ 覆盖/ 区域/ 划分/ ,/ 并/ 基于/ 此/ 划分/ 构建/ 了/ 适合/ 快速/ 过滤/ 的/ 索引/ 结构/ F/ -/ tree/ ,/ 以/ 满足/ 过滤/ 实时性/ 需求/ ./ (/ 3/ )/ 在/ 大量/ 数据/ 集上/ ,/ 对/ 文本/ 提出/ 的/ 方法/ 进行/ 了/ 实验/ 验证/ ./ 多组/ 实验/ 结果/ 证明/ ,/ 所/ 提出/ 的/ 过滤/ 索引/ 结构/ 在/ 查询/ 中所/ 需/ 的/ 距离/ 比较/ 次数/ 在/ 不同/ 搜索/ 半径/ 条件/ 设置/ 下/ 都/ 少于/ 经典/ 的/ M/ -/ tree/ 检索/ 结构/ ,/ 在/ 过滤/ 应用/ 中/ 表现/ 出极/ 高/ 的/ 查询/ 性能/ ./ 本文/ 第/ 2/ 节/ 分析/ 过滤/ 索引/ 树结构/ 特点/ ;/ 第/ 3/ 节/ 描述/ 所/ 需要/ 解决/ 的/ 问题/ ;/ 第/ 4/ 节/ 介绍/ 基于/ 最小/ 圆/ 区域/ 划分/ 的/ 过滤/ 索引/ 结构/ F/ -/ tree/ 的/ 构建/ 方法/ ;/ 第/ 5/ 节/ 通过/ 实验/ 验证/ 所/ 提出/ 算法/ 的/ 有效性/ ;/ 最后/ 是/ 结束语/ ./ 2/ 过滤/ 索引/ 树结构/ 特点/ 相似性/ 索引/ 方法/ 一般/ 应用/ 在/ 检索/ 领域/ ,/ 是/ 一种/ 处理/ 大规模/ 数据/ 或/ 高维/ 数据/ 的/ 有效/ 技术手段/ ,/ 其/ 基本原理/ 是/ 根据/ 数据/ 的/ 分布/ 特性/ ,/ 构建/ 有效/ 的/ 索引/ 结构/ 组织/ 数据/ ,/ 从而/ 加快/ 数据检索/ 的/ 速度/ ./ 典型/ 的/ 检索/ 索引/ 结构/ 可以/ 简单/ 地用/ 图/ 1/ 来/ 表示/ ,/ 检索/ 的/ 主要/ 特点/ 是/ 尽量/ 多地/ 检索/ 出/ 相关/ 的/ 数据/ ./ 因此/ ,/ 有效/ 的/ 检索/ 树结构/ 要/ 近似/ 平衡/ 树/ ,/ 一般/ 是/ 搜索/ 到/ 叶子/ 节点/ 才/ 返回/ 结果/ ,/ 这个/ 结果/ 可以/ 直接/ 反馈/ 给/ 用户/ ,/ 让/ 用户/ 评价/ ,/ 从而/ 更新/ 用户/ 模板/ ,/ 使/ 搜索/ 结果/ 更/ 精确/ ./ 因此/ ,/ 在/ 构建/ 基于/ 检索/ 的/ 索引/ 结构/ 时/ ,/ 主要/ 考虑/ 尽量/ 多/ 的/ 搜索/ 出/ 满足用户/ 所/ 需求/ 的/ 数据/ ./ 由于/ 安全/ 过滤/ 具有/ 实时性/ 和/ 否定/ 判断/ 的/ 特性/ ,/ 这个/ 特性/ 与/ 基于/ 检索/ 的/ 索引/ 结构/ 在/ 本质/ 上/ 有所不同/ ,/ 因此/ 适合/ 过滤/ 的/ 索引/ 结构/ 和/ 适合/ 检索/ 索引/ 结构/ 有/ 很大/ 区别/ ./ 当/ 构建/ 一个/ 适合/ 过滤/ 的/ 索引/ 结构/ 后/ ,/ 给定/ 查询/ q/ ,/ 我们/ 不/ 需要/ 找出/ 与/ 它/ 相似/ 的/ 多个/ 数据/ 对象/ ,/ 因为/ 在/ 安全/ 过滤/ 中/ 没有/ 反馈/ ,/ 不/ 需要/ 把/ 结果/ 反馈/ 给/ 用户/ ,/ 只/ 需要/ 尽快/ 判定/ 它/ 的/ 特性/ ,/ 从而/ 直接/ 进行/ 处理/ ./ 因此/ ,/ 我们/ 构建/ 的/ 过滤/ 索引/ 结构/ ,/ 在/ 查询/ 阶段/ 不/ 需要/ 每个/ 查询/ 都/ 搜索/ 到/ 叶子/ 节点/ 才/ 返回/ 结果/ ,/ 而是/ 查询/ 到/ 部分/ 中间/ 节点/ 时/ ,/ 就/ 可以/ 判定/ 查询/ 数据/ 的/ 特征/ ,/ 从而/ 退出/ 查询/ ./ 典型/ 的/ 过滤/ 索引/ 结构/ 可以/ 用图/ 2/ 简单/ 描述/ ./ 在/ 查询/ 阶段/ 查询/ 数据/ 不/ 需要/ 遍历/ 到/ Page3/ 叶子/ 节点/ ,/ 只/ 需要/ 使/ 判定/ 结果/ 尽可能/ 在/ 树/ 的/ 中间/ 节点/ 就/ 返回/ ./ 通过/ 设计/ 中间/ 节点/ 的/ 返回/ 模式/ ,/ 加快/ 过滤/ 应用/ 中/ 数据/ 判定/ 速度/ ./ 3/ 问题/ 描述/ 根据/ 第/ 2/ 节/ 的/ 分析/ 可知/ ,/ 具有/ 高性能/ 特性/ 的/ 过滤/ 索引/ 树/ 需要/ 在/ 中间/ 节点/ 就/ 返回/ 结果/ ./ 根据/ 以上/ 特点/ ,/ 在/ 构建/ 索引/ 结构/ 过程/ 中/ ,/ 数据/ 空间/ 的/ 分割/ 是否/ 合理/ ,/ 会/ 直接/ 影响/ 索引/ 结构/ 的/ 性能/ ./ 目前/ 存在/ 的/ 区域/ 划分/ 方法/ (/ 如/ 基于/ 支点/ 选择/ 的/ 方法/ [/ 1/ -/ 2/ ]/ ,/ 还有/ 基于/ 划分/ 的/ 方法/ [/ 3/ ]/ )/ ,/ 大部分/ 都/ 是/ 遵循/ 层次化/ 聚类/ 的/ 原则/ ./ 每/ 一种/ 索引/ 都/ 有/ 自己/ 的/ 特性/ ,/ 包括/ 数据类型/ 、/ 数据分布/ 情况/ 还有/ 维度/ 大小/ ./ 这些/ 特性/ 对/ 索引/ 结构/ 的/ 性能/ 都/ 有/ 较大/ 的/ 影响/ ./ M/ -/ tree/ 索引/ [/ 4/ ]/ 至今/ 被/ 认为/ 是/ 性能/ 最优/ 的/ 索引/ 结构/ 之一/ ,/ 这种/ 索引/ 结构/ 是/ 根据/ 数据/ 空间/ 中/ 各个/ 数据/ 点/ 之间/ 的/ 距离/ 进行/ 空间/ 划分/ 的/ ,/ 将/ 一个/ 数据/ 空间/ 分成/ 两个/ 子/ 空间/ [/ 5/ ]/ ./ M/ -/ tree/ 也/ 是/ 基于/ 层次/ 聚类/ 划分/ 空间/ ,/ 划分/ 后/ 数据/ 空间/ 里/ 的/ 数据/ 聚集/ 较/ 稠密/ ,/ 这种/ 结构/ 非常适合/ 检索/ 的/ 需求/ ,/ 数据/ 空间/ 划分/ 示意图/ 如图/ 3/ 所示/ ./ 在/ 安全/ 过滤/ 中/ ,/ 由于/ 应用领域/ 不/ 一样/ ,/ 对/ 数据处理/ 的/ 方式/ 也/ 不/ 一样/ ,/ 基于/ 检索/ 的/ 索引/ 结构/ 根本/ 不能/ 满足/ 实时性/ 需求/ ./ 下面/ 我们/ 将/ 分析/ 安全/ 过滤/ 中/ 的/ 数据分布/ 特性/ ,/ 在/ 此基础/ 上/ 描述/ 具体/ 过滤/ 应用/ 中/ 需要/ 解决/ 什么样/ 的/ 特定/ 问题/ 才能/ 构建/ 适合/ 过滤/ 的/ 高效/ 索引/ 结构/ ./ 假设/ 对于/ 给定/ 数据/ 集/ X/ ,/ 其中/ 包括/ 有/ 正例/ 和/ 反例/ ,/ 在/ 实际/ 网络/ 环境/ 中/ 数据分布/ 表现/ 为/ 一个/ 非/ 平衡/ 分布/ 特性/ ,/ 正例/ 较/ 多/ (/ 正常/ 信息/ )/ ,/ 反例/ 较/ 少/ (/ 敏感/ 信息/ )/ ./ 在/ 查询/ 阶段/ ,/ 我们/ 需要/ 对/ 反例/ 进行/ 判定/ ,/ 继而/ 进行/ 过滤/ 处理/ ./ 在/ 这样/ 一个/ 非/ 平衡/ 的/ 数据分布/ 条件/ 下/ ,/ 利用/ 否定性/ 判断/ 原理/ ,/ 只/ 需/ 快速/ 否定/ 判定/ 大量/ 正例/ 数据/ ,/ 就/ 可以/ 加快/ 整个/ 查询/ 的/ 综合/ 判定/ 速度/ ,/ 从而/ 提高/ 索引/ 结构/ 过滤/ 处理/ 的/ 性能/ ./ 下面/ 通过/ 一个/ 简单/ 实例/ 来/ 说明/ 需要/ 解决/ 的/ 问题/ ./ 考虑/ 如图/ 4/ 所示/ 的/ 集合/ S/ ,/ 包含/ 有/ 9/ 个/ 数据/ 点/ ,/ 这些/ 数据/ 点/ 都/ 为/ 反例/ 数据/ ,/ 所/ 需/ 解决/ 的/ 主要/ 问题/ 是/ 如何/ 对/ 数据/ 区域/ 进行/ 划分/ 使得/ 集合/ S/ 中/ 的/ 空白/ 区域/ 最大/ ,/ 即/ 否定/ 判定/ 区域/ 达到/ 最大/ ./ 通过/ 上面/ 区域/ 划分/ 构建/ 索引/ 结构/ ,/ 当/ 给定/ 查询/ 点/ q/ 时/ ,/ 查询/ 数据/ 点以/ 最大/ 概率/ 落入/ 划分/ 区域/ 后/ 的/ 空白/ 区域/ ,/ 就/ 可以/ 快速/ 判定/ 查询/ 数据/ 点/ q/ 必然/ 不/ 属于/ 敏感/ 信息/ ./ 由于/ 在/ 实际/ 过滤/ 中/ 大部分/ 数据/ 都/ 不/ 属于/ 敏感/ 信息/ ,/ 所以/ 这样/ 的/ 数据/ 划分/ 就/ 使得/ 大部分/ 数据/ 只/ 需/ 与/ 根/ 节点/ 比较/ 或/ 与/ 部分/ 中间/ 节点/ 比较/ 就/ 可以/ 得到/ 最后/ 判定/ 结果/ ,/ 从而/ 提高/ 整体/ 数据/ 的/ 查询/ 性能/ ./ 想要/ 快速/ 得到/ 判定/ 结果/ ,/ 在/ 区域/ 空间/ 划分/ 时/ ,/ 就/ 必须/ 使得/ 划分/ 后/ 的/ 空白/ 区域/ 最大/ ./ 因此/ ,/ 在/ 构建/ 过滤/ 索引/ 树/ 阶段/ ,/ 需要/ 解决/ 以下/ 两个/ 基本/ 问题/ :/ (/ 1/ )/ 如何/ 得到/ 包含/ 所有/ 点集/ 的/ 最小/ 区域/ ?/ (/ 2/ )/ 如何/ 确保/ 每次/ 区域/ 划分/ 后/ 所得/ 空白/ 区域/ 都/ 最大/ ?/ 在/ 第/ 4/ 节/ ,/ 我们/ 将/ 具体/ 描述/ 如何/ 通过/ 最小/ 圆/ 覆盖/ 的/ 方法/ 来/ 解决/ 基于/ 否定性/ 判断/ 的/ 快速/ 过滤/ 问题/ ./ 4/ 基于/ 最小/ 圆/ 覆盖/ 的/ 过滤/ 索引/ 方法/ 4.1/ 最小/ 圆/ 覆盖/ 算法/ 在/ 数据/ 划分/ 时/ ,/ 为/ 保证/ 在/ 每次/ 区域/ 划分/ 中/ 都/ 得到/ 最大/ 空白/ 区域/ ,/ 就/ 需要/ 用/ 一个/ 最小/ 的/ 区域/ 来/ 包括/ 数据/ 集簇/ ,/ 使得/ 簇间/ 较/ 稀疏/ ,/ 空白/ 区域/ 达到/ 最大/ ./ 求/ 一个/ 最小/ 圆/ 包含/ 给/ 定点/ 集/ 所有/ 点/ 的/ 问题/ 是/ 人们/ 在/ 理论/ 和/ 实践/ 上/ 都/ 十分/ 感兴趣/ 的/ 一个/ 问题/ [/ 6/ -/ 8/ ]/ ./ 最小/ 圆/ 覆盖/ 问题/ 可以/ 形式化/ 描述/ 为/ :/ 给定/ 有/ Page4/ 限点集/ S/ ,/ 包含/ 所有/ 点集/ S/ 的/ 最小/ 圆/ B/ 满足/ :/ B/ =/ B/ (/ c/ ,/ r/ )/ ·/ ·/ =/ {/ x/ :/ ‖/ x/ -/ c/ ‖/ / r/ }/ ./ 由于/ 最小/ 圆/ 的/ 圆心/ 是/ 到/ 集合/ 中/ 最远/ 点/ 的/ 距离/ 最近/ 的/ 一个点/ ,/ 因此/ 在/ 一些/ 规划/ 中有/ 实际/ 的/ 应用/ 价值/ ./ 圆心/ 可以/ 看作/ 是/ 点集/ 的/ 中心/ ./ 基于/ n/ 个点/ 的/ 最小/ 圆/ 覆盖/ 算法/ [/ 9/ ]/ 可以/ 用/ 算法/ 1/ 描述/ ./ 算法/ 1/ ./ 最小/ 圆/ 覆盖/ 算法/ ./ 输入/ :/ n/ 个/ 数据/ 点/ 输出/ :/ 包含/ n/ 个/ 数据/ 点/ 的/ 最小/ 圆/ 1/ ./ 在/ 点集/ n/ 中任取/ 3/ 点/ A/ ,/ B/ ,/ C/ ./ 2/ ./ 作/ 一个/ 包含/ 三点/ 的/ 最小/ 圆/ C1/ ./ 3/ ./ 在/ 点/ 集中/ 找出/ 距离/ C1/ 最远/ 的/ 点/ D/ ./ 若点/ D/ 在/ 圆/ C1/ 的/ 圆内/ 或/ 圆周/ 上/ ,/ 则/ 该/ 圆/ 即/ 为/ 所求/ 的/ 最小/ 圆/ ,/ 算法/ 结束/ ./ 否则/ ,/ 继续执行/ 步/ 4.4/ ./ 在/ A/ ,/ B/ ,/ C/ ,/ D/ 中选/ 3/ 个点/ ,/ 求解/ 使/ 包含/ 这/ 4/ 个点/ 的/ 圆/ 最小/ ./ 所/ 选取/ 的/ 三点/ 成为/ 新/ 的/ A/ ,/ B/ ,/ C/ 三点/ ,/ 返回/ 执行/ 步/ 2/ ./ 最小/ 圆/ 覆盖/ 算法/ 在/ 规划/ 设施/ 中有/ 广泛应用/ ./ 在/ 我们/ 设计/ 的/ 过滤/ 索引/ 结构/ 中/ ,/ 可以/ 用来/ 生成/ 最大/ 空白/ 区域/ ,/ 从而/ 可以/ 加快/ 搜索/ 速度/ ./ 在/ 4.2/ 节/ 我们/ 将/ 具体/ 描述/ 如何/ 使用/ 最小/ 圆/ 覆盖/ 算法/ 构建/ 适合/ 过滤/ 的/ 索引/ 结构/ F/ -/ tree/ ./ 4.2/ F/ -/ tree/ 索引/ 生成/ 算法/ 构建/ 适合/ F/ -/ tree/ 过滤/ 索引/ 结构/ 的/ 主要/ 目的/ 是/ 加快/ 在/ 数据/ 查询/ 阶段/ 的/ 判定/ 速度/ ,/ 使得/ 查询/ 数据/ 以/ 最大/ 概率/ 落入/ 索引/ 结构/ 所/ 拥有/ 数据/ 点/ 以外/ 的/ 区域/ ,/ 也/ 就是/ 上面/ 所/ 描述/ 的/ 数据/ 划分/ 中/ 的/ 空白/ 区域/ ./ 因此/ 在/ 进行/ 支点/ 选择/ 或/ 区域/ 划分/ 时/ ,/ 首要/ 考虑/ 因素/ 是/ 相近/ 点集/ 之间/ 组成/ 的/ 区域/ 尽可能/ 小/ ,/ 而/ 划分/ 后/ 的/ 点集/ 区域/ 之间/ 的/ 距离/ 要/ 尽可能/ 大/ ,/ 才能/ 保证/ 在/ 数据/ 集/ 划分/ 后/ ,/ 整个/ 集合/ 区域/ 所/ 拥有/ 的/ 空白/ 区域/ 最大/ ./ 在/ 实际/ 安全/ 过滤/ 应用/ 中/ ,/ 由于/ 大量/ 查询/ 数据/ 是/ 正例/ ,/ 落入/ 空白/ 区域/ 概率/ 较大/ ,/ 因此/ 设计/ 具有/ 较大/ 空白/ 区域/ 的/ 索引/ 结构/ 可以/ 使/ 大量/ 查询/ 数据/ 只/ 需/ 查询/ 树/ 的/ 根/ 节点/ 或/ 部分/ 中间/ 节点/ 就/ 可以/ 快速/ 得到/ 判定/ 结果/ ,/ 而/ 不/ 需要/ 遍历/ 直到/ 叶子/ 节点/ 才/ 返回/ 结果/ ,/ 从而/ 加快/ 查询/ 数据/ 集/ 的/ 整体/ 查询/ 速度/ ./ 由/ 以上/ 结合/ 具体/ 过滤/ 应用领域/ 的/ 理论/ 分析/ ,/ 基于/ 启发式/ 规则/ ,/ 我们/ 设计/ 了/ 一种/ 有效/ 的/ 基于/ 最小/ 圆/ 覆盖/ 的/ 过滤/ 索引/ 结构/ F/ -/ tree/ ./ 假设/ 有/ 包含/ n/ =/ 3k/ 的/ 数据/ 集/ Ω/ ,/ 那么/ 适合/ 安全/ 过滤/ 应用领域/ 的/ F/ -/ tree/ 索引/ 结构/ 的/ 构建/ 方法/ 由/ 算法/ 2/ 给出/ ./ 在/ 构建/ 过滤/ 索引/ 树结构/ 中/ ,/ 采用/ 自低/ 向上/ 逐层/ 构成/ 节点/ 的/ 生成/ 方式/ ./ 算法/ 2/ ./ F/ -/ tree/ _/ Build/ (/ Ω/ )/ ./ 输入/ :/ 反例/ 数据/ 集/ (/ Ω/ )/ 输出/ :/ F/ -/ tree1/ ./ // / 叶子/ 节点/ 的/ 生成/ / // a/ )/ 在/ Ω/ 中/ 选择/ 离/ 原点/ 最近/ 的/ 一点/ u1/ ;/ b/ )/ 寻找/ 离/ u1/ 最近/ 的/ 两点/ u2/ 、/ u3/ ;/ c/ )/ 求解/ u1/ 、/ u2/ 、/ u3/ 最小/ 覆盖/ 圆/ c1/ ;/ d/ )/ 寻找/ 离/ c1/ 最远/ 的/ 点/ u4/ ;/ e/ )/ 寻找/ 离/ u4/ 最近/ 的/ 两点/ u5/ 、/ u6/ ;/ f/ )/ 求解/ u4/ 、/ u5/ 、/ u6/ 最小/ 覆盖/ 圆/ c2/ ;/ g/ )/ 重复/ 执行/ 步/ d/ )/ ~/ f/ )/ ,/ 直到/ 所有/ 数据/ 点/ 都/ 生成/ 最小/ 圆/ ./ 在/ 通过/ 以上/ 处理/ 阶段/ 的/ 区域/ 划分/ 后/ ,/ 可/ 生成/ 3k/ -/ 1/ 个/ 包含/ 3/ 个/ 数据/ 点集/ 的/ 最小/ 覆盖/ 圆/ ,/ 由/ 这些/ 最小/ 圆/ 集合/ 可/ 生成/ 过滤/ 索引/ 树/ F/ -/ tree/ 的/ 叶子/ 节点/ ./ 2/ ./ // / 中间层/ 节点/ 的/ 生成/ / // a/ )/ 从/ 3k/ -/ 1/ 个/ 最小/ 圆中/ 选择/ 圆心/ 离/ 原点/ 最近/ 的/ 圆/ c1/ ;/ b/ )/ 寻找/ 离/ c1/ 最近/ 的/ 两个/ 圆/ c2/ 、/ c3/ ;/ c/ )/ 基于/ c1/ 、/ c2/ 、/ c3/ 包含/ 的/ 所有/ 点/ ,/ 求解/ 最小/ 覆盖/ 圆/ c4/ ;/ d/ )/ 寻找/ 离/ c4/ 最远/ 的/ 两个/ 圆/ c5/ ;/ e/ )/ 寻找/ 离/ c5/ 最近/ 的/ 两个/ 圆/ c6/ 、/ c7/ ;/ f/ )/ 求解/ c5/ 、/ c6/ 、/ c7/ 包含/ 所有/ 点/ 的/ 最小/ 圆/ c8/ ;/ g/ )/ 重复/ 执行/ 步/ d/ )/ ~/ f/ )/ ,/ 直到/ 3k/ -/ 1/ 个/ 最小/ 圆/ 集合/ 中/ 每/ 通过/ 叶子/ 节点/ 中/ 3k/ -/ 1/ 个/ 最小/ 圆/ 之间/ 结合/ 处理/ ,/ 可以/ 生成/ 3k/ -/ 2/ 个/ 最小/ 圆/ ,/ 这些/ 最小/ 圆/ 覆盖/ 了/ 叶子/ 节点/ 中/ 多个/ 最小/ 圆所/ 包含/ 的/ 所有/ 数据/ 点集/ ./ 利用/ 这个/ 阶段/ 生成/ 的/ 3k/ -/ 2/ 个/ 最小/ 圆/ 构成/ 过滤/ 索引/ 树/ F/ -/ tree/ 的/ 第/ k/ -/ 1/ 层/ 中间/ 节点/ ./ 3/ ./ 重复/ 第/ 2/ 阶段/ ,/ 经过/ 迭代/ 划分/ ,/ 依次/ 可/ 生成/ 过滤/ 索引/ 树/ F/ -/ tree/ 结构/ 的/ 第/ k/ -/ 2/ ,/ k/ -/ 3/ ,/ …/ ,/ 1/ 层/ 的/ 中间/ 节点/ ./ 根/ 节点/ ./ 4/ ./ 最后/ 包含/ 所有/ 数据/ 点/ 的/ 最小/ 覆盖/ 圆/ 构成/ F/ -/ tree/ 的/ 由/ 上面/ 建树/ 过程/ 可知/ ,/ F/ -/ tree/ 为/ 一颗/ 平衡/ 二叉树/ ,/ 具有/ 平衡/ 二叉树/ 所/ 拥有/ 的/ 良好/ 特性/ ,/ 同时/ 也/ 具备/ 具体/ 应用领域/ 的/ 特点/ ./ 结合/ 过滤/ 应用领域/ 中非/ 平衡/ 数据分布/ 特性/ ,/ 利用/ 最小/ 圆/ 覆盖/ 划分/ 数据/ 区域/ ,/ 使得/ 区域/ 划分/ 后/ 的/ 数据/ 空间/ 空白/ 区域/ 最大/ ,/ 符合/ 查询/ 阶段/ 否定性/ 判断/ 的/ 处理/ ,/ 可以/ 加快/ 整体/ 的/ 查询/ 速度/ ./ 在/ 图/ 5/ 中/ ,/ 通过/ 一个/ 简单/ 的/ 例子/ 描述/ 了/ 过滤/ 索引/ 树/ F/ -/ tree/ 构建/ 过程/ 中/ 数据/ 区域/ 划分/ 情况/ ,/ 首先/ 在/ 图/ 5/ (/ a/ )/ 中/ ,/ 由/ 3/ 个/ 数据/ 点/ 生成/ 的/ 最小/ 覆盖/ 圆/ 构成/ F/ -/ tree/ 中/ 每个/ 叶子/ 节点/ ;/ 其次/ ,/ F/ -/ tree/ 中间/ 节点/ 可以/ 通过/ 叶子/ 节点/ 中/ 最小/ 圆/ 之间/ 结合/ 生成/ (/ 图/ 5/ (/ b/ )/ )/ ;/ 最后/ 覆盖/ 所有/ 点/ 的/ 最小/ 圆/ 构成/ F/ -/ tree/ 的/ 根/ 节点/ (/ 图/ 5/ (/ c/ )/ )/ ./ 图示/ 中/ 只/ 展示/ 了/ 两个/ 最小/ 圆/ 的/ 结合/ 方式/ ./ Page54/ ./ 3F/ -/ tree/ 相似性/ 查询/ 算法/ 众多/ 应用领域/ 要求/ 索引/ 结构/ 有/ 相似性/ 查询/ ,/ 即/ 查找/ 数据库/ 中/ 与/ 某个/ 给定/ 的/ 高维/ 适量/ 最近/ 的/ k/ 个/ 数据/ ,/ 这一/ 查询/ 通常/ 称为/ K/ 近邻/ 查询/ ./ 当/ K/ =/ 1/ 时为/ “/ 最近/ 邻/ 查询/ ”/ ,/ 这个/ 是/ 在/ 检索/ 领域/ 所/ 需要/ 的/ 查询/ ./ 而/ 在/ 过滤/ 应用领域/ ,/ 我们/ 需要/ 通过/ 相似性/ 来/ 判定/ 数据/ 的/ 特性/ 或/ 性质/ ,/ 不/ 需要/ 找出/ 在/ 查询/ 阶段/ 所/ 搜索/ 到/ 的/ 具体/ 数据/ 点/ ./ 因此/ ,/ 在/ F/ -/ tree/ 的/ 相似性/ 查询/ 阶段/ ,/ 采用/ 区域/ 查询/ 的/ 方法/ 进行/ 数据/ 的/ 判定/ 处理/ ./ 区域/ 查询/ 可/ 由/ 定义/ 1/ 给出/ ./ 定义/ 1/ ./ 区域/ 查询/ ./ 给定/ 一个/ 查询/ (/ q/ ,/ r/ )/ ,/ q/ ∈/ M/ ,/ M/ 为/ 对象/ 集/ ,/ r/ 为/ 查询/ 半径/ ,/ 是/ 一个/ 非负值/ ,/ 区域/ 查询/ 就是/ 要/ 从/ 对象/ 集/ M/ 中/ 找出/ 与/ 查询/ q/ 之间/ 距离/ 小于/ r/ 的/ 所有/ 数据库/ 对象/ ./ 给出/ 区域/ 查询/ 的/ 定义/ 后/ ,/ 现在/ 来/ 描述/ 基于/ 区域/ 查询/ 的/ F/ -/ tree/ 的/ 查询/ 算法/ ./ 给定/ 查询/ R/ (/ q/ ,/ r/ )/ ,/ 设置/ 查询/ q/ 的/ 查询/ 半径/ 为/ r/ ./ 基于/ 过滤/ 索引/ F/ -/ tree/ 的/ 区域/ 查询/ 算法/ 可用/ 如下/ 步骤/ 来/ 描述/ :/ 给定/ 一个/ 查询/ R/ (/ q/ ,/ r/ )/ 1/ ./ 从根/ 节点/ 开始/ 遍历/ 查询/ F/ -/ tree/ ./ 2/ ./ 在/ 每个/ 中间/ 节点/ Cj/ ,/ 执行/ :/ a/ )/ 如果/ d/ (/ q/ ,/ Cj/ )/ / r/ ,/ 退出/ 搜索/ ,/ 对/ 查询/ q/ 执行/ 放行/ b/ )/ 如果/ d/ (/ q/ ,/ Cj/ )/ </ r/ ,/ 进入/ 子/ 节点/ 搜索/ ./ 直到/ q/ 不/ 属于/ 与/ 基于/ 检索/ 的/ 索引/ 结构/ 不同/ ,/ 基于/ 过滤/ 的/ 索引/ 结构/ 在/ 查询/ 阶段/ 不/ 需要/ 遍历/ 整棵/ 索引/ 树/ 的/ 所有/ 节点/ ,/ 由于/ 生成/ 了/ 最大/ 的/ 否定/ 判定/ 区域/ ,/ 大量/ 查询/ 在/ 中间/ 节点/ 就/ 可以/ 报告/ 满足条件/ 的/ 节点/ ,/ 退出/ 查询/ ./ 在/ 查询/ 过程/ 中/ ,/ 查询/ 节点/ 将/ 大量/ 减少/ ./ 5/ 实验/ 结果/ 与/ 分析/ 5.1/ 实验/ 设置/ 在/ 实验/ 中/ ,/ 我们/ 对/ 基于/ 最小/ 圆/ 覆盖/ 区域/ 划分/ 的/ 索引/ 结构/ F/ -/ tree/ 进行/ 了/ 测试/ ,/ 并/ 与/ 基于/ 检索/ 的/ 索引/ 结构/ M/ -/ tree/ 的/ 性能/ 进行/ 了/ 比较/ 和/ 分析/ ./ 两种/ 索引/ 结构/ 均/ 使用/ Windows/ 环境/ 下/ 的/ C语言/ 实现/ ./ 由于/ 距离/ 计算/ 的/ 费用/ 较/ 高/ ,/ 我们/ 就/ 使用/ “/ 距离/ 计算/ 次数/ ”/ 作为/ 算法/ 计算/ 复杂度/ 的/ 度量/ 准则/ ./ 另一方面/ ,/ 由于/ 我们/ 实现/ 的/ 是/ 内存/ 索引/ 结构/ ,/ 所以/ 这里/ 我们/ 并/ 不/ 考虑/ 磁盘/ 的/ I/ // O/ 操作/ ./ 在/ 实验/ 中/ ,/ 选取/ 两个/ 实验/ 数据/ 集/ ,/ 一个/ 数据/ 集/ data1/ 包含/ 729/ 个/ 随机/ 生成/ 的/ 均匀分布/ 数据/ ,/ 另/ 一个/ 是/ 由/ 2187/ 个/ 随机/ 生成/ 的/ 均匀分布/ 数据/ 组成/ 的/ 数据/ 集/ data2/ ./ 分别/ 验证/ 所/ 提出/ 的/ 过滤/ 索引/ 结构/ 应用/ 在/ 不同/ 数据量/ 情况/ 下/ 的/ 查询/ 性能/ ./ 5.2/ 实验/ 结果/ 数据/ 集/ 1/ ./ 在/ 数据/ 集/ 1/ 的/ 基础/ 上/ ,/ 分别/ 建立/ 相应/ 的/ M/ -/ tree/ 和/ F/ -/ tree/ ./ 查询/ 性能/ 的/ 好坏/ 是/ 衡量/ 索引/ 结构/ 好坏/ 的/ 一个/ 重要/ 标志/ [/ 10/ ]/ ,/ 在/ 查询/ 阶段/ ,/ 采用/ q/ (/ r/ )/ 区域/ 查询/ 方式/ ./ 我们/ 随机/ 地/ 选取/ 100/ 个/ 查询/ 数据/ 点/ ,/ 计算/ 这/ 100/ 个/ 查询/ 的/ 平均/ 距离/ 计算/ 次数/ ,/ 并/ 据此/ 来/ 比/ Page6/ 较/ 这/ 两种/ 索引/ 结构/ 的/ 性能/ ./ 在/ 表/ 1/ 中/ ,/ M/ -/ tree/ (/ times/ )/ 和/ F/ -/ tree/ (/ times/ )/ 分别/ 表示/ 两种/ 索引/ 结构/ 从根/ 节点/ 开始/ 直到/ 查询/ 到/ 满足要求/ 的/ 所有/ 数据/ 点/ 所/ 需要/ 的/ 距离/ 比较/ 次数/ ./ 搜索/ 半径/ rM/ -/ tree/ (/ times/ )/ F/ -/ tree/ (/ times/ )/ 0.00010/ ./ 0020.0040/ ./ 0060.0080/ ./ 010.020/ ./ 040.060/ ./ 080.1/ 将/ 查询/ 半径/ r/ 的/ 值/ 设置/ 为/ 0.0001/ 开始/ 进行/ 实验/ ,/ 在/ 多组/ 实验/ 中/ ,/ 逐渐/ 增加/ 搜索/ 半径/ r/ 的/ 值/ ,/ 直到/ r/ =/ 0.1/ ,/ 以此/ 用来/ 测试/ 在/ 设置/ 不同/ 搜索/ 半径/ r/ 的/ 条件/ 下/ ,/ 两种/ 索引/ 结构/ 所/ 需/ 距离/ 比较/ 次数/ 的/ 变化/ ./ 图/ 6/ 给出/ 了/ 数据/ 集/ data1/ 上/ 两种/ 索引/ 所/ 需要/ 的/ 距离/ 比较/ 次数/ 随/ 查询/ 半径/ 增加/ 而/ 产生/ 的/ 不同/ 结果/ ./ 从图/ 6/ 所/ 展示/ 的/ 实验/ 结果/ 可以/ 得出/ ,/ 在/ 最初/ 区域/ 搜索/ 半径/ 为/ 0.0001/ 时/ ,/ M/ -/ tree/ 索引/ 结构/ 的/ 平均/ 距离/ 比较/ 次数/ 只有/ 16.51/ 次/ ,/ 而/ F/ -/ tree/ 的/ 平均/ 距离/ 比较/ 次数/ 却/ 达到/ 27.88/ 次/ ,/ F/ -/ tree/ 距离/ 比较/ 次数/ 是/ M/ -/ tree/ 的/ 1.6/ 倍/ 左右/ ./ 随着/ 查询/ 半径/ r/ 的/ 增加/ ,/ F/ -/ tree/ 与/ M/ -/ tree/ 之间/ 的/ 距离/ 比较/ 次数/ 差距/ 逐渐/ 减小/ ./ 当/ 半径/ 增加/ 到/ 0.01/ 左右/ 时/ ,/ F/ -/ tree/ 的/ 距离/ 比较/ 次数/ 开始/ 小于/ M/ -/ tree/ ,/ 查询/ 性能/ 开始/ 增强/ ,/ 继续/ 增加/ 查询/ 半径/ ,/ F/ -/ tree/ 与/ M/ -/ tree/ 之间/ 的/ 距离/ 比较/ 次数/ 差距/ 变/ 大/ ,/ 在/ 整个/ 查询/ 半径/ 变化/ 过程/ 中/ ,/ F/ -/ tree/ 的/ 查询/ 性能/ 整体/ 呈现/ 增强/ 趋势/ ,/ 查询/ 性能/ 优于/ M/ -/ tree/ ./ 总体/ 来说/ ,/ r/ 在/ 0/ ~/ 0.1/ 的/ 区间/ 变化/ 时/ ,/ M/ -/ tree/ 的/ 查询/ 性能/ 受/ 半径/ 变化/ 的/ 影响/ 较大/ ,/ 表现/ 为/ 图/ 6/ 中/ 斜率/ 较大/ 的/ 曲线/ ./ 相反/ ,/ F/ -/ tree/ 在/ 整个/ 半径/ 变化/ 过程/ 中/ ,/ 查询/ 中所/ 需/ 距离/ 比较/ 次数/ 随着/ 半径/ 增加/ ,/ 所/ 需/ 的/ 查询/ 次数/ 变化/ 较/ 小/ ,/ 在/ 整个/ 查询/ 半径/ 增加/ 的/ 过程/ 中/ ,/ 性能/ 趋于稳定/ ./ 因此/ ,/ 在/ 一定/ 查询/ 半径/ 变化/ 波动/ 范围/ 内/ ,/ F/ -/ tree/ 在/ 查询/ 性能/ 上/ 相对/ 于/ M/ -/ tree/ 来说/ ,/ 性能/ 相对/ 稳定/ ./ 数据/ 集/ 2/ ./ 主要/ 测试/ 两种/ 索引/ 结构/ 处理/ 大/ 数据/ 集/ 的/ 性能/ 变化/ 情况/ ./ 同样/ ,/ 我们/ 从/ 数据/ 集中/ 随机/ 选择/ 100/ 个/ 数据/ 作为/ 测试/ 中/ 的/ 查询/ 数据/ ,/ 表/ 2/ 中/ 给出/ 了/ 两种/ 索引/ 结构/ 在/ 不同/ 查询/ 半径/ 设置/ 下/ 所/ 需/ 的/ 距离/ 比较/ 次数/ ./ 图/ 7/ 描述/ 了/ 两种/ 索引/ 结构/ 所/ 需/ 距离/ 比较/ 次数/ 随/ 查询/ 半径/ 变化/ 而/ 变化/ 的/ 曲线图/ ./ 搜索/ 半径/ rM/ -/ tree/ (/ times/ )/ F/ -/ tree/ (/ times/ )/ 0.00010/ ./ 0020.0040/ ./ 0060.0080/ ./ 010.020/ ./ 040.060/ ./ 080.1/ 从表/ 2/ 和/ 图/ 7/ 所/ 展示/ 的/ 查询/ 结果/ 可以/ 得出/ ,/ 当/ 搜索/ 半径/ 为/ 0.0001/ 时/ ,/ M/ -/ tree/ 索引/ 结构/ 所/ 需/ 的/ 距离/ 计算/ 次数/ 为/ 40.94/ ,/ 而/ F/ -/ tree/ 却/ 只/ 需要/ 34.09/ ,/ 在/ 最/ 初始/ 设定/ 的/ 查询/ 半径/ 条件/ 下/ ,/ F/ -/ tree/ 所/ 需/ 的/ 距离/ 比较/ 次数/ 要/ 小于/ M/ -/ tree/ ./ 而/ 随着/ 查询/ 半径/ 的/ 增加/ ,/ F/ -/ tree/ 所需/ 距离/ 比较/ 次数/ 与/ M/ -/ tree/ 所/ 需/ 的/ 距离/ 比较/ 次数/ 之差/ 也/ 逐渐/ 增加/ ,/ 距离/ 比较/ 次数/ 只有/ M/ -/ tree/ 的/ 1/ // 2/ 左右/ ./ 在/ 整个/ 查询/ 半径/ 变化/ 区间/ 内/ ,/ F/ -/ tree/ 距离/ 比较/ 次数/ 随/ 查询/ 半径/ 增加/ 的/ 变化/ 相对/ 稳定/ ,/ 在/ 图/ 7/ 上/ 表现/ 为/ 斜率/ 较/ 小/ 的/ 曲线/ ./ Page7/ 下面/ ,/ 我们/ 比较/ 数据/ 集/ 大小/ 的/ 变化/ 对/ 查询/ 性能/ 的/ 影响/ ,/ 设定/ 搜索/ 半径/ 为/ r/ =/ 0.02/ ,/ 分别/ 得到/ 在/ 两种/ 数据/ 集下/ 所/ 构建/ 的/ M/ -/ tree/ 和/ F/ -/ tree/ 两种/ 索引/ 结构/ 的/ 查询/ 性能/ 比较/ (/ 图/ 8/ )/ ./ 从图/ 8/ 中/ 的/ 结果/ 描述/ 中/ 可以/ 得出/ ,/ 在/ 搜索/ 半径/ 设置/ 为/ 0.02/ 的/ 情况/ 下/ ,/ F/ -/ tree/ 的/ 搜索/ 性能/ 在/ 两种/ 数据/ 集上/ 的/ 测试/ 中/ 都/ 要/ 优于/ M/ -/ tree/ ./ 尤其/ 是/ 应用/ 在/ 不同/ 数据量/ 的/ 情况/ 下/ ,/ M/ -/ tree/ 搜索/ 所/ 需要/ 的/ 距离/ 比较/ 次数/ 随着/ 数据量/ 急速/ 增大/ ,/ 也/ 表现/ 急剧/ 增加/ 的/ 趋势/ :/ 当/ 数据量/ 为/ 729/ 时/ ,/ 所/ 需/ 距离/ 比较/ 次数/ 为/ 39.67/ ,/ 而/ 当/ 数据量/ 增加/ 到/ 2187/ 时/ ,/ 所/ 需/ 的/ 距离/ 比较/ 次数/ 增加/ 到/ 85.76/ ,/ 这个/ 距离/ 比较/ 次数/ 是/ 应用/ 于/ 小/ 数据/ 集时/ 所/ 需/ 距离/ 比较/ 次数/ 的/ 2/ 倍/ 左右/ ,/ 查询/ 性能/ 下降/ 速度/ 较快/ ./ 而/ 对于/ 所/ 提出/ 的/ 基于/ 过滤/ 的/ 索引/ 结构/ F/ -/ tree/ 来说/ ,/ 从图/ 8/ 所/ 展示/ 的/ 实验/ 结果/ 可以/ 得出/ ,/ 当/ 数据量/ 为/ 729/ 时/ ,/ 距离/ 比较/ 次数/ 为/ 33.61/ ,/ 而/ 当/ 数据量/ 增加/ 到/ 2187/ 时/ ,/ 所/ 需/ 的/ 距离/ 比较/ 次数/ 为/ 46.63/ ,/ 数据量/ 的/ 增加/ 对/ F/ -/ tree/ 的/ 索引/ 性能/ 影响/ 很小/ ./ 图/ 8/ 两种/ 数据/ 集/ data1/ 和/ data2/ 的/ 性能/ 比较/ 5.3/ 结果/ 分析/ 在/ 所/ 设置/ 的/ 多组/ 实验/ 中/ ,/ F/ -/ tree/ 都/ 表现/ 出/ 了/ 较/ 好/ 的/ 性能/ ,/ 这/ 是因为/ 我们/ 所/ 需要/ 面对/ 的/ 具体/ 问题/ 是/ 敏感/ 信息/ 过滤/ ,/ 而/ 实际/ 网络/ 环境/ 中/ 敏感/ 信息/ 数据分布/ 具有/ 非/ 平衡性/ ,/ 并且/ 在/ 过滤/ 过程/ 中/ 需要/ 具有/ 较/ 快/ 的/ 判定/ 速度/ ./ 根据/ 以上/ 两个/ 特性/ ,/ 利用/ 最小/ 圆/ 覆盖/ 划分/ 数据/ 区域/ ,/ 使/ 否定/ 区域/ 达到/ 最大/ ,/ 这样/ 构建/ 的/ 索引/ 树是/ 一棵/ 平衡/ 树/ ,/ 每个/ 节点/ 区域/ 不会/ 存在/ 覆盖/ 问题/ ,/ 所/ 划分/ 的/ 节点/ 区域/ 也/ 会/ 比较/ 稀疏/ ./ 在/ F/ -/ tree/ 的/ 查询/ 阶段/ ,/ 由于/ 我们/ 得到/ 了/ 最大/ 的/ 否定/ 区域/ ,/ 在/ 查询/ 半径/ 较/ 小/ 的/ 情况/ 下/ ,/ 需要/ 比较/ 的/ 数据/ 点较/ 多/ ,/ 查询/ 性能/ 优势/ 不/ 明显/ ./ 而/ 当/ 半径/ 增加/ ,/ 查询/ q/ 遍历/ 节点/ 时/ ,/ 覆盖/ 的/ 数据/ 点较/ 多/ ,/ 分布/ 较/ 多/ 的/ 正常/ 数据/ 以/ 最大/ 概率/ 落入/ 否定/ 区域/ ,/ 从而/ 在/ 查询/ 时/ 可以/ 快速/ 得到/ 判定/ 结果/ ./ 而/ 基于/ 检索/ 的/ M/ -/ tree/ 索引/ 结构/ 在/ 划分/ 数据/ 空间/ 时/ ,/ 数据/ 划分/ 比较/ 稠密/ ,/ 以便/ 搜索/ 到/ 更/ 多/ 的/ 相似性/ 数据/ ,/ 在/ 查询/ 判定/ 阶段/ ,/ 每到/ 一个/ 区域/ 都/ 需要/ 进一步/ 判断/ ,/ 并/ 不/ 适合/ 需要/ 快速/ 判定/ 的/ 非/ 平衡/ 分布/ 敏感/ 信息/ 过滤/ 领域/ ,/ 在/ 搜索/ 距离/ 比较/ 次数/ 上/ 相比/ 稀疏/ 区域/ 划分/ 的/ 过滤/ 索引/ 结构/ F/ -/ tree/ 有所增加/ ./ 6/ 结束语/ 索引/ 是/ 基于/ 内容/ 相似性/ 查询/ 的/ 有效/ 方法/ ,/ 而/ 数据/ 空间/ 的/ 分割/ 直接/ 影响/ 索引/ 结构/ 的/ 查询/ 性能/ ./ 本文/ 针对实际/ 敏感/ 信息/ 过滤/ 应用/ 中/ 数据/ 非/ 平衡/ 分布/ 的/ 特点/ ,/ 提出/ 了/ 基于/ 否定/ 判断/ 的/ 过滤/ 模型/ ./ 采用/ 基于/ 最小/ 圆/ 覆盖/ 的/ 区域/ 划分/ 方法/ 解决/ 基于/ 否定性/ 判断/ 的/ 过滤/ 问题/ ,/ 构建/ 符合/ 否定/ 判断/ 的/ 过滤/ 索引/ 结构/ F/ -/ tree/ ./ 实验/ 结果显示/ :/ 在/ 不同/ 查询/ 半径/ 值/ r/ 设置/ 下/ ,/ F/ -/ tree/ 的/ 查询/ 性能/ 明显/ 优于/ M/ -/ tree/ ,/ 并且/ 随着/ 数据量/ 的/ 增加/ ,/ F/ -/ tree/ 所/ 需/ 的/ 距离/ 比较/ 次数/ 增长幅度/ 不大/ ./ 因此/ ,/ 所/ 设计/ 的/ F/ -/ tree/ 索引/ 结构/ 在/ 综合性/ 能/ 上/ 表现/ 出/ 一定/ 的/ 稳定性/ 和/ 鲁棒性/ ./ 

