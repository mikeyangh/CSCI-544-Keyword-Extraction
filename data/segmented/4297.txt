Page1/ 一种/ 面向/ 非对称/ 多核/ 处理器/ 的/ 虚拟机/ 集成/ 调度/ 算法/ 陈锐忠/ 齐德昱/ 林伟伟/ 李剑/ (/ 华南理工大学/ 计算机系统/ 研究所/ 广州/ 510006/ )/ (/ 华南理工大学/ 计算机科学/ 与/ 工程学院/ 广州/ 510006/ )/ 摘要/ 在/ 计算机/ 体系结构/ 领域/ ,/ 非对称/ 多核/ 处理器/ 将/ 成为/ 未来/ 的/ 主流/ ./ 对于/ 非对称/ 多核/ 处理器/ 上/ 的/ 虚拟/ 处理器/ 调度/ 问题/ ,/ 现有/ 研究/ 缺乏/ 理论/ 分析/ ,/ 且/ 没有/ 考虑/ 虚拟/ 处理器/ 的/ 同步/ 特性/ ./ 针对/ 该/ 问题/ ,/ 文中/ 首先/ 建立/ 非线性/ 规划/ 模型/ ,/ 分析/ 得出/ 全面/ 考虑/ 虚拟/ 处理器/ 同步/ 特性/ 、/ 核心/ 非/ 对称性/ 以及/ 核心/ 负载/ 的/ 调度/ 原则/ ./ 然后/ ,/ 基于/ 调度/ 原则/ 提出/ 一个/ 集成/ 调度/ 算法/ ,/ 该/ 算法/ 定义/ 了/ 效用/ 因子/ 、/ 比例/ 系数/ 、/ 比例/ 资源/ 的/ 概念/ ,/ 结合/ 虚拟/ 处理器/ 的/ 同步/ 特性/ 和/ 核心/ 的/ 非/ 对称性/ 对/ 资源/ 和/ 负载/ 进行/ 全面/ 度量/ ;/ 同时/ 通过/ 运行/ 队列/ 分解/ 降低/ 调度/ 开销/ ./ 提出/ 的/ 算法/ 是/ 第一个/ 在/ 非对称/ 多核/ 处理器/ 上/ 利用/ 虚拟/ 处理器/ 同步/ 特性/ 的/ 调度/ 算法/ ./ 实际/ 平台/ 上/ 的/ 实验/ 表明/ :/ 该/ 算法/ 实现/ 了/ 公平/ 调度/ ,/ 并且/ 性能比/ 其他/ 同类/ 算法/ 提高/ 19/ %/ ~/ 48/ %/ ./ 关键词/ 云/ 计算/ ;/ 虚拟化/ ;/ 非对称/ 多核/ 处理器/ ;/ 虚拟/ 处理器/ 调度/ ;/ 负载/ 均衡/ 1/ 引言/ 云/ 计算/ 将/ 大量/ 软硬件/ 资源整合/ 在/ 一起/ ,/ 形成/ 规模/ 巨大/ 的/ 共享/ 虚拟/ 资源/ 池/ ,/ 为/ 远程/ 计算机用户/ 提供/ 便利/ 、/ 经济/ 的/ 服务/ ,/ 吸引/ 了/ 各界/ 的/ 广泛/ 关注/ [/ 1/ ]/ ./ 作为/ 云/ 计算/ 的/ 基础/ 技术/ 之一/ ,/ 系统/ 虚拟化/ 在/ 提高/ 资源/ 利用率/ 、/ 简化/ 系统管理/ 等/ 方面/ 有着/ 不可/ 替代/ 的/ 作用/ ,/ 是/ 当今/ 的/ 一个/ 研究/ 热点/ [/ 2/ ]/ ./ 随着/ 芯片/ 集成/ 规模/ 极限/ 的/ 逼近/ 以及/ 能耗/ 和/ 成本/ 等/ 因素/ ,/ 多核/ 处理器/ 逐渐/ 占据/ 了/ 市场/ [/ 3/ -/ 4/ ]/ ./ 相对/ 于/ 对称/ 多核/ 处理器/ (/ SymmetricMulti/ -/ coreProcessor/ ,/ SMP/ )/ ,/ 单一/ 指令集/ 非对称/ 多核/ 处理器/ (/ AsymmetricSingle/ -/ ISAMulti/ -/ coreProcessors/ ,/ AMP/ )/ 在/ 能耗/ 、/ 面积/ 等/ 方面/ 有着/ 巨大/ 的/ 优势/ ,/ 将/ 成为/ 未来/ 的/ 主流/ [/ 5/ -/ 9/ ]/ ./ 在/ 系统/ 虚拟化/ 环境/ 下/ ,/ 虚拟/ 处理器/ (/ VirtualCPU/ ,/ VCPU/ )/ 调度/ 是/ AMP/ 发挥优势/ 的/ 关键/ ./ 因为/ 目前/ 占据/ 市场/ 的/ 仍/ 是/ SMP/ ,/ 现有/ 的/ VCPU/ 调度/ 算法/ [/ 10/ -/ 14/ ]/ 针对/ SMP/ 设计/ ,/ 没有/ 利用/ AMP/ 的/ 特性/ 和/ 优势/ ,/ 从而/ 面临/ 两/ 方面/ 的/ 挑战/ :/ (/ 1/ )/ AMP/ 的/ 非/ 对称性/ ./ 很多/ 传统/ 调度/ 器/ 的/ 设计/ 原则/ ,/ 在/ AMP/ 上/ 不再/ 适用/ ./ 传统/ 调度/ 器/ 假设/ 所有/ 核心/ 性能/ 相等/ ,/ 因此/ 只/ 根据/ 核心/ 的/ 负载/ 做/ 调度/ 决策/ ./ 然而/ 在/ 非对称/ 多核/ 处理器/ 上/ ,/ 除了/ 核心/ 负载/ ,/ 调度/ 器/ 还/ 必须/ 考虑/ 核心/ 的/ 性能/ [/ 15/ ]/ ./ AMP/ 上/ 的/ 核心/ 支持/ 单一/ 指令集/ 结构/ ,/ 因此/ VCPU/ 在/ 各个/ 核心/ 上/ 都/ 可以/ 正确/ 执行/ ;/ 而/ 由于/ 核心/ 的/ 性能/ 不同/ ,/ VCPU/ 在/ 不同/ 核心/ 上/ 的/ 执行/ 效率/ 却是/ 不同/ 的/ ./ 为了/ 发挥/ AMP/ 的/ 优势/ ,/ 调度/ 器/ 必须/ 根据/ 各个/ VCPU/ 在/ 不同/ 核心/ 上/ 的/ 加速/ 比来/ 做/ 调度/ 决策/ [/ 9/ ,/ 16/ ]/ ./ 研究/ [/ 17/ ]/ 表明/ ,/ 根据/ 该/ 原则/ 设计/ 的/ 虚拟机/ 调度/ 器/ 可以/ 把/ 性能/ 提高/ 40/ %/ ./ (/ 2/ )/ VCPU/ 的/ 同步/ 特性/ ./ 为了/ 发挥/ 多核/ 处理器/ 的/ 计算能力/ ,/ 并行程序/ 已/ 变得/ 越来越/ 流行/ [/ 4/ ,/ 18/ ]/ ,/ 而/ 同一/ 并行程序/ 中/ 的/ 多个/ 线程/ 需要/ 进行/ 同步/ ./ 在/ 非/ 虚拟化/ 环境/ 下/ ,/ 线程/ 在/ 物理/ 核心/ 上/ 运行/ ,/ 所有/ 核心/ 一直/ 在线/ ,/ 因此/ 可以/ 迅速/ 释放/ 获得/ 的/ 同步/ 锁/ ./ 然而/ ,/ 在/ 虚拟化/ 环境/ 下/ ,/ 线程/ 在/ VCPU/ 上/ 运行/ ,/ VCPU/ 不是/ 一直/ 在线/ 的/ ./ 在/ KVM/ 、/ Xen/ 等/ 虚拟机/ 管理器/ (/ VirtualMachineMonitor/ ,/ VMM/ )/ 中/ ,/ VCPU/ 需要/ 分/ 时/ 共享/ 物理/ 核心/ ,/ 从而/ 导致/ 了/ 同步/ 延迟/ [/ 10/ -/ 11/ ,/ 13/ ]/ ,/ 例如/ 锁/ 持有者/ 抢占/ (/ LockHolderPreemption/ ,/ LHP/ )/ [/ 19/ ]/ :/ 多个/ 在线/ 的/ VCPU/ 忙/ 等/ 一个/ 由/ 离线/ 的/ VCPU/ 持有/ 的/ 锁/ ./ 同步/ 延迟/ 严重/ 降低/ 了/ 系统/ 的/ 性能/ 和/ 效能/ (/ 文献/ [/ 11/ ]/ 表明/ 该/ 问题/ 可/ 使/ 性能/ 降低/ 1.3/ 倍/ )/ ./ 如何/ 利用/ VCPU/ 的/ 同步/ 特性/ 与/ AMP/ 的/ 非/ 对称性/ ,/ 实现/ 高效/ 的/ VCPU/ 调度/ ,/ 是/ 该/ 形势/ 下/ 的/ 一个/ 关键问题/ ./ 针对/ 该/ 问题/ 的/ 研究/ 主要/ 有/ 文献/ [/ 20/ -/ 21/ ]/ ,/ 它们/ 证明/ 了/ VMM/ 必须/ 针对/ 核心/ 的/ 非/ 对称性/ 进行/ 设计/ ./ 然而/ ,/ 这些/ 研究/ 存在/ 3/ 个/ 问题/ :/ (/ 1/ )/ 独立/ 调度/ VCPU/ ,/ 忽略/ 了/ 同步/ 延迟/ ;/ (/ 2/ )/ 缺乏/ 理论/ 分析/ ;/ (/ 3/ )/ 没有/ 兼顾/ 公平性/ 和/ 性能/ ./ 因此/ ,/ 这些/ 方法/ 难以/ 高效/ 运行/ 并行程序/ ,/ 特别/ 是/ 同步/ 密集/ 的/ 并行程序/ (/ 如/ 4.2/ ./ 1/ 节/ 的/ 实验所/ 示/ )/ ./ 可见/ AMP/ 上/ 的/ VCPU/ 调度/ 问题/ 尚未/ 解决/ ./ 因此/ ,/ 本文/ 以/ 公平/ 、/ 高性能/ 为/ 目标/ ,/ 为/ AMP/ 上/ 的/ VCPU/ 调度/ 问题/ 建立/ 了/ 非线性/ 规划/ 模型/ ,/ 分析/ 核心/ 的/ 非/ 对称性/ 和/ VCPU/ 的/ 同步/ 特性/ ,/ 得出/ 在/ 公平性/ 约束/ 下/ ,/ 调度/ 应/ 遵循/ 3/ 个/ 原则/ :/ (/ 1/ )/ 同一/ 虚拟机/ 的/ 各个/ VCPU/ 在/ 同类/ 核心/ 上/ 运行/ ,/ 但/ 不/ 在/ 同一个/ 核心/ 上/ 运行/ ./ (/ 2/ )/ 协同/ 调度/ 运行/ 并行程序/ 的/ VCPU/ ,/ 独立/ 调度/ 运行/ 串行/ 程序/ 的/ VCPU/ ./ (/ 3/ )/ 负载/ 均衡/ ./ 在/ 此基础/ 上/ ,/ 本文/ 提出/ 一个/ 集成/ 调度/ 算法/ ,/ 其/ 特点/ 如下/ :/ (/ 1/ )/ 保证/ 了/ 3/ 个/ 调度/ 原则/ ,/ 提高/ 调度/ 性能/ ./ (/ 2/ )/ 定义/ 了/ 效用/ 因子/ 、/ 比例/ 系数/ 、/ 比例/ 资源/ 的/ 概念/ ./ 效用/ 因子/ 用于/ 综合/ 度量/ VCPU/ 的/ 资源/ 需求/ 和/ 核心/ 的/ 负载/ 情况/ ,/ 比例/ 系数/ 用于/ 表征/ 核心/ 的/ 非/ 对称性/ ,/ 比例/ 资源/ 对/ 处理器/ 的/ 计算资源/ 进行/ 抽象/ ./ 这/ 三者/ 结合/ VCPU/ 的/ 同步/ 特性/ 和/ 核心/ 的/ 非/ 对称性/ 对/ 资源/ 和/ 负载/ 进行/ 度量/ ,/ 以/ 实现/ AMP/ 上/ 的/ 公平/ 调度/ ./ (/ 3/ )/ 分解/ 运行/ 队列/ ,/ 控制/ 调度/ 开销/ ./ 据/ 我们/ 所知/ ,/ 还/ 没有/ 研究/ 对/ 该/ 问题/ 进行/ 建模/ 分析/ ,/ 本文/ 是/ 第一个/ 利用/ AMP/ 上/ 的/ VCPU/ 同步/ 特性/ 的/ 调度/ 算法/ ./ 本文/ 在/ Xen4/ ./ 0.1/ 和/ AMDOpteron2384/ 上/ 对/ 算法/ 的/ 性能/ 、/ 公平性/ 和/ 开销/ 进行/ 比较/ 分析/ ,/ 实验/ 证明/ :/ 该/ 算法/ 在/ 有效/ 控制/ 开销/ 的/ 情况/ 下/ 实现/ 了/ 公平/ 调度/ ,/ 并且/ 性能比/ 其他/ 同类/ 算法/ 提高/ 了/ 19/ %/ ~/ 48/ %/ ./ 本文/ 第/ 2/ 节对/ 问题/ 进行/ 描述/ 和/ 建模/ 分析/ ,/ 给出/ 调度/ 的/ 目标/ 和/ 原则/ ;/ 第/ 3/ 节/ 详细描述/ 集成/ 调度/ 算法/ ;/ 第/ 4/ 节对/ 所/ 提出/ 的/ 算法/ 进行/ 实验/ 和/ 比较/ 分析/ ;/ 第/ 5/ 节/ 介绍/ 相关/ 研究/ ;/ 最后/ 是/ 总结/ 以及/ 对/ 未来/ 工作/ 的/ 展望/ ./ Page32/ 问题/ 描述/ 与/ 建模/ 2.1/ 问题/ 描述/ 目标/ 如下/ :/ 本文/ 研究/ AMP/ 上/ 的/ VCPU/ 调度/ 问题/ ,/ 关注/ 的/ (/ 1/ )/ 性能/ ./ 最小化/ 任务/ 的/ 完成/ 时间/ ./ (/ 2/ )/ 公平性/ ./ 权重/ 相等/ 的/ VCPU/ 应/ 得到/ 相等/ 的/ CPU/ 资源/ ./ 权重/ 可/ 由/ 管理员/ 根据/ 实际/ 需求/ 手动/ 设定/ ./ 如图/ 1/ 所示/ ,/ 在/ 系统/ 虚拟化/ 中/ ,/ 虚拟机/ (/ VirtualMachine/ ,/ VM/ )/ 是/ 在/ 一个/ 物理/ 计算机/ 上/ 模拟/ 出来/ 的/ 多个/ 独立/ 的/ 、/ 具有/ 完整/ 硬件/ 系统/ 功能/ 的/ 执行/ 环境/ ,/ 每个/ VM/ 里面/ 可以/ 运行/ 不同/ 的/ 操作系统/ ,/ 即/ 客户机/ 操作系统/ (/ GuestOperatingSystem/ ,/ GOS/ )/ ./ VMM/ 运行/ 在/ 物理/ 硬件/ 和/ VM/ 之间/ ,/ 对/ 物理/ 硬件/ 进行/ 抽象/ ,/ 并/ 提供/ VCPU/ 、/ 虚拟内存/ 等/ 资源/ 给/ 各个/ VM/ [/ 22/ -/ 23/ ]/ ./ 有/ 代表性/ 的/ 系统/ 虚拟化/ 软件/ 包括/ Xen/ 、/ KVM/ 、/ VMwareESX/ 等/ ./ 下面/ 通过/ 一个/ 简单/ 的/ 例子/ 来/ 说明/ 该/ 问题/ ./ 示例/ 中/ 的/ AMP/ 包含/ 6/ 个/ 核心/ (/ 如图/ 2/ 、/ 图/ 3/ )/ :/ F1/ 和/ F2/ 是/ 快/ 核心/ ,/ S1/ ~/ S4/ 是/ 慢/ 核心/ ,/ 快/ 核心/ 的/ 计算能力/ 是/ 慢/ 核心/ 的/ 2/ 倍/ ./ 对于/ 该/ 平台/ 上/ 运行/ 的/ 3/ 个/ VM/ (/ A/ ,/ B/ 和/ C/ )/ ,/ 每个/ VM/ 包含/ 2/ 个/ VCPU/ :/ A1/ 和/ A2/ 属于/ A/ ,/ B1/ 和/ B2/ 属于/ B/ ,/ C1/ 和/ C2/ 属于/ C/ ./ 3/ 个/ VM/ 的/ 权重/ 相等/ ./ 每个/ VM/ 上/ 运行/ 一个/ 2/ 线程/ 的/ 并行程序/ ,/ 线程/ 每隔/ 2/ 个/ 单位/ 时间/ 就要/ 同步/ 一次/ ,/ 然后/ 继续/ 运行/ ./ 图/ 2/ 给出/ 一个/ 现有/ VMM/ 中/ VCPU/ 调度/ 示例/ ./ 由于/ 现有/ VMM/ 调度/ 器/ 没有/ 考虑/ 核心/ 的/ 非/ 对称性/ ,/ 将/ VCPU/ 随机/ 映射/ 到/ 低/ 负载/ 的/ 核心/ 上/ ,/ 这/ 将/ 导致/ 两/ 方面/ 问题/ :/ (/ 1/ )/ 公平性/ ./ 快/ 核心/ 的/ 计算能力/ 是/ 慢/ 核心/ 的/ 两倍/ ,/ 但/ VMM/ 依然/ 对/ 权重/ 相等/ 的/ VM/ 分配/ 同样/ 的/ CPU/ 时间/ ,/ 这/ 将/ 导致/ 分配/ 到/ 快/ 核心/ 上/ 的/ VM/ 得到/ 更/ 多/ 的/ CPU/ 资源/ ,/ 影响/ 公平性/ (/ 如图/ 2/ 中/ A/ 和/ B/ 得到/ 的/ CPU/ 资源/ 多于/ C/ )/ ./ (/ 2/ )/ 性能/ ./ 当/ 属于/ 同一/ VM/ 的/ 几个/ VCPU/ 分配/ 到/ 性能/ 不同/ 的/ 核心/ 上/ 执行/ 时/ ,/ 将/ 导致/ 快/ 核心/ 上/ 的/ VCPU/ 空等慢/ 核心/ 上/ 的/ VCPU/ 同步/ 的/ 情况/ ,/ 降低/ 性能/ (/ 如图/ 2/ 中/ A1/ 和/ A2/ 分别/ 映射/ 到/ 异类/ 核心/ F1/ 和/ S1/ 上/ ,/ 导致/ 等待/ ;/ B1/ 和/ B2/ 亦然/ )/ ./ 图/ 3/ 给出/ 了/ 理想/ 的/ VCPU/ 调度/ 示例/ ./ 该/ 示例/ 一方面/ 根据/ 快慢/ 核心/ 间/ 的/ 性能/ 差异/ 调整/ 了/ 对/ VM/ 的/ CPU/ 时间/ 分配/ ,/ 实现/ 了/ 公平/ 调度/ ;/ 另一方面/ 它/ 将/ 属于/ 同一/ VM/ 的/ 几个/ VCPU/ 调度/ 到/ 同类/ 核心/ 上/ 运行/ ,/ 从而/ 避免/ 了/ VCPU/ 空等/ 的/ 情况/ ,/ 并/ 将/ 节省下来/ 的/ CPU/ 时间/ 用于/ 调度/ 其他/ VCPU/ (/ 如图/ 3/ 中/ 的/ Vx/ )/ ,/ 从而/ 提高/ 了/ 性能/ ./ 本文/ 提出/ 的/ 集成/ 调度/ 算法/ 实现/ 了/ 这种/ 调度/ ./ 2.2/ 建模/ 分析/ 在/ 系统/ 虚拟化/ 环境/ 下/ ,/ 任务/ 的/ 执行/ 包含/ 2/ 个/ 操作/ :/ GOS/ 将/ 任务/ 映射/ 到/ 所属/ VM/ 的/ VCPU/ 上/ ,/ VMM/ 调度/ 器/ 将/ VCPU/ 映射/ 到/ 核心/ 上/ ./ 我们/ 可以/ 为/ AMP/ 上/ 的/ VCPU/ 调度/ 问题/ 建立/ 非线性/ 规划/ 模型/ ,/ 表/ 1/ 中/ 给出/ 了/ 本文/ 使用/ 的/ 主要/ 变量/ 和/ 参数/ ./ Page4/ 名称/ 含义/ Ti/ 任务/ T/ 的/ 第/ i/ 个/ 线程/ R/ (/ Vi/ )/ Vi/ 分配/ 到/ 的/ CPU/ 资源/ iTi/ 的/ 第/ m/ 个/ 阶段/ vmiVi/ 包含/ 的/ 第/ m/ 个/ VCPUTmTki/ ./ cTki/ ./ stTkTk/ 时间/ 第/ i/ 个/ 核心/ 的/ 单位/ 时/ Ci/ 间/ 计算能力/ Vi/ 第/ i/ 个/ VM/ ω/ (/ Vi/ )/ Vi/ 的/ 权重/ 设/ T/ =/ T1/ ,/ T2/ ,/ …/ ,/ T/ {/ i/ ./ st/ 表示/ Tk/ 个/ 线程/ 的/ 任务/ ,/ 所有/ 线程/ 每隔/ 一定/ 时间/ 间隔/ 需/ 进行/ 同步/ ,/ 线程/ Ti/ 可/ 根据/ 同步/ 间隔/ 分为/ Ni/ 个/ 阶段/ i/ ,/ T2/ {/ T1/ 行/ 同步/ ,/ 或者/ 因为/ 运行/ 并行程序/ ,/ 或者/ 因为/ 访问共享/ 资源/ (/ 如/ 硬盘/ 、/ 网卡/ 等/ )/ [/ 11/ ]/ ./ 因此/ 每个/ 阶段/ 可/ 分为/ 计算/ 操作/ 和/ 同步操作/ ,/ Tk/ 量/ ,/ TkC2/ ,/ …/ ,/ Cn/ }/ ,/ n/ ∈/ N/ 表示/ n/ 个/ 核心/ 的/ 集合/ ,/ 第/ i/ 个/ 核心/ 的/ 单位/ 时间/ 计算能力/ 为/ Ci/ ./ V/ =/ {/ V1/ ,/ V2/ ,/ …/ ,/ Vn/ }/ ,/ n/ ∈/ N/ 表示/ 在/ 系统/ 中/ 运行/ 的/ n/ 个/ VM/ 的/ 集合/ ,/ ω/ (/ Vi/ )/ 表示/ Vi/ 的/ 权重/ ,/ R/ (/ Vi/ )/ 表示/ Vi/ 分配/ 到/ 的/ CPU/ 资源/ ,/ 由/ 2.1/ 节/ 的/ 公平性/ 目标/ 可得式/ (/ 1/ )/ 成立/ :/ 权重/ 相等/ 的/ VCPU/ 应/ 得到/ 相等/ 的/ CPU/ 资源/ ./ P/ (/ Vi/ )/ =/ {/ v1i/ ,/ v2i/ ,/ …/ ,/ vn/ 合/ ./ 为了/ 避免/ 频繁/ 上下文/ 切换/ 带来/ 的/ 巨大/ 开销/ [/ 10/ ]/ ,/ 我们/ 假设/ 式/ (/ 2/ )/ 成立/ :/ 一个/ VM/ 包含/ 的/ VCPU/ 数目/ 不/ 大于/ 物理/ 核心/ 总数/ ,/ 而/ 又/ 不/ 小于/ 该/ VM/ 上/ 运行/ 的/ 线程/ 数/ ./ T/ 的/ 调度/ 可/ 抽象/ 为/ 一个/ 时空/ 映射/ M/ =/ (/ s/ ,/ t/ )/ ,/ 其中/ s/ 是/ 一个/ 空间/ 映射/ ,/ 表示/ 将/ T/ 的/ 各个/ 阶段/ 映射/ 到/ 各个/ 核心/ 上/ ;/ t/ 是/ 一个/ 时间/ 映射/ ,/ 表示/ 将/ T/ 的/ 各个/ 阶段/ 映射/ 到/ 核心/ 的/ 时间/ 片上/ ./ 设/ t/ (/ Tm/ 时间/ ,/ 即/ Tm/ 系/ ,/ 只有/ 所有/ 前驱/ 阶段/ 都/ 完成/ 了/ ,/ 一个/ 新/ 阶段/ 才能/ 开始/ ,/ 即式/ (/ 3/ )/ :/ Tk/ 、/ Tl/ 表示/ 任意/ 2/ 个/ 线程/ ,/ 所有/ 线程/ 要/ 完成/ 前驱/ 阶段/ (/ Tml/ )/ ;/ Tm/ (/ Tn/ 性能/ 相关/ ./ TimeM/ (/ T/ )/ 表示/ 映射/ M/ 下/ T/ 的/ 完成/ 时间/ ,/ 它/ 等于/ T/ 最后/ 阶段/ 中/ 运行/ 最慢/ 线程/ 的/ 完成/ 时间/ ,/ 满足/ 式/ (/ 4/ )/ ./ 式/ (/ 1/ )/ 保证/ 了/ 系统/ 的/ 公平性/ ./ 对于/ 一个/ 动态/ 调度/ 算法/ 来说/ ,/ 最大化/ 系统/ 性能/ ,/ 等价/ 于/ 最小化/ 任务/ 完成/ 时间/ ./ 因此/ 我们/ 可得/ 该/ 问题/ 的/ 非线性/ 规划/ 模型/ 如下/ :/ MinimizeTimeM/ (/ T/ )/ ω/ (/ Vi/ )/ =/ ω/ (/ Vj/ )/ / R/ (/ Vi/ )/ =/ R/ (/ Vj/ )/ 烄/ for0/ </ i/ ,/ j/ / V/ (/ 1/ )/ maxkt/ (/ Tms/ ./ t/ ./ 烅/ for0/ </ k/ ,/ l/ / Tandm/ </ n/ (/ 3/ )/ TimeM/ (/ T/ )/ =/ maxkt/ (/ TNkk/ )/ +/ TNkk/ ./ c/ 烆/ 但/ 在/ 现实/ 中/ 由于/ 缺乏/ Tk/ 识/ ,/ 加上/ 求解/ 该/ 问题/ 带来/ 的/ 开销/ ,/ 无法/ 求得/ 该/ 问题/ 的/ 最优/ 解/ ./ 因此/ 我们/ 采用/ 启发式/ 算法/ 来求/ 问题/ 的/ 近/ 优解/ ./ 由式/ (/ 3/ )/ 、/ (/ 4/ )/ 可/ 推出/ 如下/ 等式/ :/ 其中/ p/ 是/ 任务/ T/ 的/ 阶段/ 数目/ ,/ 由/ T/ 本身/ 属性/ 决定/ ,/ 无法/ 通过/ 调度/ 优化/ ./ 可见/ 在/ 公平性/ 约束/ 下/ ,/ AMP/ 上/ VCPU/ 调度/ 应/ 遵循/ 的/ 原则/ 如下/ :/ (/ 1/ )/ 同一/ VM/ 的/ 各个/ VCPU/ 在/ 同类/ 核心/ 上/ 运行/ ,/ 但/ 不/ 在/ 同一个/ 核心/ 上/ 运行/ ./ 同类/ 核心/ 指/ 性能/ 相等/ 的/ 核心/ ./ 由式/ (/ 3/ )/ ~/ (/ 5/ )/ 可知/ 任务/ 完成/ 时间/ 取决于/ 运行/ 最慢/ 的/ 线程/ ,/ 如果/ 将/ 同一/ VM/ 的/ 各个/ VCPU/ 放到/ 性能/ 不同/ 的/ 核心/ 上/ 运行/ ,/ 即/ Tm/ 待慢/ 核心/ 上/ 的/ VCPU/ 同步/ 的/ 情况/ (/ 如图/ 2/ 的/ 示例/ )/ ./ 而/ 当/ 同一/ VM/ 的/ 各个/ VCPU/ 放在/ 同一/ 核心/ 上/ 运行/ 时/ ,/ 任务/ 变成/ 串行/ 执行/ ,/ 完成/ 时间/ TimeM/ (/ T/ )/ =/ j/ =/ 1/ ∑/ T/ ∑/ p/ 度/ 需/ 遵循/ 该/ 原则/ ./ (/ 2/ )/ 协同/ 调度/ 运行/ 并行程序/ 的/ VCPU/ ,/ 独立/ 调度/ 运行/ 串行/ 程序/ 的/ VCPU/ ./ 协同/ 调度/ (/ co/ -/ schedule/ )/ 指/ 调度/ 多个/ 相关/ 的/ VCPU/ 在/ 不同/ 核心/ 上/ 同时/ 运行/ ,/ 如/ VMwareESX/ 的/ 调度/ 器/ ;/ 独立/ 调度/ 是/ 这样/ 一种/ 机制/ :/ 调度/ 时/ 把/ VCPU/ 看成/ 一个/ 独立/ 实体/ ,/ 只要/ 有/ 空闲/ 核心/ 就/ 单独/ 运行/ ,/ 不/ 考虑/ 其他/ VCPU/ ,/ 如/ Xen/ 的/ Credit/ 调度/ 器/ ./ 协同/ 调度/ 在/ 减少/ VCPU/ 同步/ 时间/ 的/ 同时/ ,/ 将/ 带来/ 优先级/ 反转/ 、/ 处理器/ 碎片/ 等/ 问题/ [/ 11/ ,/ 13/ ]/ ,/ 增加/ 开销/ ./ 运行/ 并行程序/ 的/ VCPU/ 同步/ 较/ 多/ ,/ 需要/ 协同/ 调度/ 来/ 减少/ k/ ./ st/ ;/ 而/ 运行/ 串行/ 程序/ 的/ VCPU/ 的/ TmTm/ 上/ 原则/ (/ 1/ )/ 已/ 保证/ 同一/ VM/ 的/ 各个/ VCPU/ 不/ 在/ 同一/ 核心/ 上/ 运行/ ,/ 因此/ 应/ 独立/ 调度/ ,/ 以/ 降低/ 调度/ 开销/ ./ 同/ k/ =/ 1Page5/ 时/ ,/ 该/ 原则/ 将/ 没/ 参与/ 协同/ 调度/ 的/ 核心/ 分配/ 给/ 其它/ 正在/ 运行/ 串行/ 程序/ 的/ VCPU/ ,/ 这/ 避免/ 了/ 协同/ 调度/ 的/ 碎片/ 问题/ [/ 11/ ,/ 13/ ]/ ,/ 提高/ 了/ 系统/ 性能/ 和/ 效率/ ./ (/ 3/ )/ 各/ 核心/ 负载/ 均衡/ ./ 由式/ (/ 3/ )/ ~/ (/ 5/ )/ 可知/ 任务/ 每一/ 阶段/ 的/ 完成/ 时间/ 取决于/ 运行/ 最慢/ 的/ 线程/ ./ 在/ 公平性/ 约束/ 下/ ,/ 每个/ VM/ 的/ 得到/ 的/ 资源/ 与其/ 权重/ 成正比/ ,/ 从而/ 轻/ 负载/ 核心/ 将/ 空转/ ,/ 而重/ 负载/ 核心/ 的/ 调度/ 周期/ 将/ 延长/ ,/ 这/ 降低/ 了/ 系统/ 的/ 效率/ ,/ 并/ 使本/ 阶段/ 的/ Tmt/ (/ Tm/ +/ 1/ 成/ 时间/ ./ 因此/ 各/ 核心/ 应/ 保持/ 负载/ 均衡/ ./ 3/ 集成/ 调度/ 算法/ k/ )/ 增大/ ,/ 进一步/ 增加/ 了/ 运行/ 最慢/ 的/ 线程/ 的/ 完/ 文献/ [/ 6/ ,/ 8/ -/ 9/ ,/ 20/ ]/ 表明/ :/ 由/ 少量/ 快/ 核心/ 和/ 大量/ 慢/ 核心/ 组成/ 的/ AMP/ 将/ 是/ 未来/ 的/ 主流/ ./ 因此/ 本文/ 假设/ AMP/ 上/ 有/ 2/ 类/ 核心/ :/ 少量/ 快/ 核心/ 和/ 大量/ 慢/ 核心/ ./ 如何/ 推广/ 到/ n/ 种/ 核心/ 是/ 我们/ 下/ 一步/ 研究/ 的/ 内容/ ./ 本文/ 采用/ 分布/ 式调度/ 器/ 模型/ [/ 24/ -/ 26/ ]/ :/ 每个/ 核心/ 有/ 一个/ 独立/ 的/ VCPU/ 队列/ ,/ 同一/ 队列/ 中/ 的/ VCPU/ 循环/ 运行/ ,/ 分/ 时/ 共享/ 该/ 物理/ 核心/ ./ 现有/ 的/ 虚拟/ 处理器/ 调度/ 器/ (/ 如/ KVM/ 、/ Xen/ )/ 广泛/ 采用/ 该/ 调度/ 器/ 模型/ ./ 该/ 算法/ 由/ 4/ 个/ 模块/ 组成/ :/ 初始/ 映射/ 、/ 资源分配/ 、/ 资源/ 消耗/ 和/ 虚拟/ 处理器/ 选择/ ,/ 执行/ 模型/ 如图/ 4/ 所示/ ./ 初始/ 映射/ 只/ 在/ VM/ 启动/ // 关闭/ 时/ 执行/ ,/ 用于/ 根据/ 各个/ VM/ 的/ 权重/ 、/ 核心/ 的/ 计算能力/ 和/ 负载/ 情况/ 将/ VCPU/ 映射/ 到/ 各个/ 核心/ 上/ ;/ 资源分配/ 每个/ 调度/ 周期/ (/ cycle/ )/ 执行/ 1/ 次/ ,/ 用于/ 根据/ 各个/ VM/ 的/ 权重/ 和/ 公平/ 调度/ 原则/ 为/ VCPU/ 分配/ 计算资源/ ;/ 虚拟/ 处理器/ 选择/ 、/ 资源/ 消耗/ 每个/ 单位/ 时间/ (/ slot/ )/ 执行/ 一次/ ,/ 前者/ 根据/ 2.2/ 节/ 的/ 调度/ 原则/ 作出/ 决策/ ,/ 后者/ 根据/ 公平/ 调度/ 原则/ 处理/ 每个/ VCPU/ 的/ 资源/ 消耗/ ./ 3.1/ 初始/ 映射/ 算法/ 根据/ VM/ 的/ 资源/ 需求/ 和/ 当前/ 核心/ 的/ 负载/ 情况/ 做/ 初始/ 映射/ ./ 本文/ 提出/ 一个/ 新/ 的/ 概念/ —/ —/ —/ 效用/ 因子/ (/ UtilityFactor/ ,/ UF/ )/ ,/ 用于/ 综合/ 度量/ VM/ 的/ 资源/ 需求/ 和/ 核心/ 的/ 负载/ 情况/ ./ UF/ 对/ 核心/ 非/ 对称性/ 进行/ 了/ 处理/ ,/ 使/ 算法/ 可以/ 兼顾/ 2.2/ 节/ 所述/ 的/ 调度/ 原则/ ./ 定义/ 如下/ :/ UF/ (/ Vi/ )/ =/ μ/ ×/ Demand/ (/ Vi/ )/ +/ (/ 1/ -/ μ/ )/ ×/ Load/ ,/ Demand/ (/ Vi/ )/ =/ max/ (/ 0/ ,/ |/ P/ (/ Vi/ )/ |/ -/ N/ (/ FC/ )/ )/ Load/ =/ max/ (/ 0/ ,/ AvgLoad/ (/ FC/ )/ -/ AvgLoad/ (/ SC/ )/ )/ ,/ 其中/ Demand/ (/ Vi/ )/ 度量/ 了/ Vi/ 的/ 资源/ 需求/ ,/ Load/ 度量/ 了/ 当前/ 的/ 核心/ 负载/ 情况/ ,/ 参数/ μ/ 用于/ 调节/ 资源/ 需求/ 和/ 核心/ 负载/ 的/ 重要性/ (/ 参数/ 灵敏度/ 分析/ 详见/ 4.2/ ./ 4/ 节/ )/ ./ N/ (/ S/ )/ 表示/ 核心/ 集合/ S/ 包含/ 核心/ 的/ 数目/ ,/ FC/ 表示/ 平台/ 上/ 所有/ 快/ 核心/ 的/ 集合/ ,/ SC/ 表示/ 平台/ 上/ 所有/ 慢/ 核心/ 的/ 集合/ ./ AvgLoad/ (/ S/ )/ 表示/ 核心/ 集合/ S/ 的/ 平均/ 负载/ ./ AvgLoad/ (/ S/ )/ 定义/ 如下/ :/ CoreLoad/ (/ Ci/ )/ =/ 其中/ CoreLoad/ (/ Ci/ )/ 表示/ 核心/ Ci/ 的/ 负载/ ,/ 即/ Ci/ 上/ 的/ VCPU/ 得到/ 的/ 计算资源/ 之/ 和/ ,/ rq/ (/ Ci/ )/ 表示/ 在/ Ci/ 上/ 运行/ 的/ VCPU/ 集合/ ,/ 如式/ (/ 10/ )/ 所示/ ./ 本文/ 定义/ SF/ (/ Ci/ )/ 为/ 核心/ Ci/ 的/ 比例/ 系数/ (/ ScaledFactor/ ,/ SF/ )/ ,/ 即/ 核心/ Ci/ 的/ 频率/ 与/ 平台/ 最低/ 核心/ 频率/ 之比/ ./ 这里/ SF/ (/ Ci/ )/ 用于/ 实现/ 非对称/ 多核/ 处理器/ 上/ 的/ 负载/ 均衡/ —/ —/ —/ 核心/ 的/ 负载/ 与其/ 计算能力/ 成正比/ [/ 27/ ]/ ,/ 后文/ 还/ 将/ 用于/ 资源/ 的/ 公平/ 分配/ 和/ 消耗/ ./ VCPULoad/ (/ vj/ 到/ 的/ 计算资源/ ./ 在/ 公平性/ 约束/ 下/ ,/ VMVk/ 得到/ 的/ 资源/ 与其/ 权重/ ω/ (/ Vk/ )/ 成正比/ ,/ 这些/ 资源/ 平均/ 分给/ Vk/ 的/ 每个/ VCPUvj/ 当/ 一个/ VM/ 的/ UF/ 较/ 小时/ ,/ 快/ 核心/ 负载/ 轻于/ 慢/ 核心/ ;/ 并且/ 该/ VM/ 的/ VCPU/ 数目/ 小于/ 快/ 核心/ 数目/ ,/ 可/ 根据/ 调度/ 原则/ (/ 1/ )/ 将/ 其/ 包含/ 的/ VCPU/ 映射/ 到/ 快/ 核心/ 上/ 执行/ ./ 反之/ 当/ 一个/ VM/ 的/ UF/ 较大/ 时/ ,/ 快/ 核心/ 负载/ 较/ 重/ ;/ 而/ 当/ 它/ 的/ VCPU/ 数目/ 大于/ 快/ 核心/ 数目/ 时/ ,/ Page6/ 将/ 其/ 映射/ 到/ 快/ 核心/ 上将/ 违反/ 调度/ 原则/ (/ 1/ )/ ,/ 因此/ 应/ 将/ 其/ 调度/ 到/ 慢/ 核心/ 上/ 运行/ ./ 算法/ 以/ VM/ 的/ UF/ 作为/ 初始/ 映射/ 的/ 标准/ :/ 将/ UF/ 小于/ 阈值/ Threshold/ 的/ VCPU/ 调度/ 到/ 快/ 核心/ 上/ 执行/ ,/ 将/ UF/ 大于/ Threshold/ 的/ VCPU/ 调度/ 到/ 慢/ 核心/ 上/ 执行/ ,/ 并/ 保证/ 同一/ VM/ 的/ 各个/ VCPU/ 不/ 在/ 同一/ 核心/ 上/ 运行/ ./ 伪/ 代码/ 描述/ 如下/ ./ 算法/ 1/ ./ 初始/ 映射/ ./ for/ (/ 每/ 一个/ 虚拟机/ V/ )/ {/ NV/ =/ V/ 的/ VCPU/ 数目/ ;/ if/ (/ NV/ >/ N/ (/ SC/ )/ )/ {/ // // 此时/ 只能/ 保证/ 各个/ VCPU/ 不/ AP/ =/ 所有/ 核心/ 中/ NV/ 个/ 负载/ 最轻/ 的/ 核心/ ;/ }/ else/ {/ if/ (/ UF/ (/ V/ )/ </ =/ Threshold/ )/ }/ 将/ V/ 包含/ 的/ VCPU/ 分别/ 放入/ AP/ 中/ ;/ }/ 初始/ 映射/ 只是/ 尽量/ 兼顾/ 调度/ 原则/ (/ 1/ )/ 和/ (/ 3/ )/ ,/ 如果/ 在/ 后面/ 的/ 执行/ 过程/ 中/ 发现/ 初始/ 映射/ 不是/ 最优/ 方案/ ,/ 虚拟/ 处理器/ 选择/ 模块/ 将/ 根据/ 调度/ 原则/ 做/ 自动/ 调整/ ./ 3.2/ 资源分配/ 为了/ 实现/ 公平/ 调度/ ,/ 每个/ VM/ 得到/ 的/ CPU/ 资源/ 应/ 与其/ 权重/ 成正比/ ./ 而/ 在/ AMP/ 上/ ,/ 每个/ 核心/ 根据/ 其/ 性能/ 拥有/ 不同/ 的/ 计算资源/ ./ 为此/ 我们/ 提出/ 一个/ 新/ 的/ 概念/ —/ —/ —/ 比例/ 资源/ (/ ScaledResource/ ,/ SR/ )/ ,/ 用于/ 表示/ CPU/ 资源/ ,/ 使/ 每个/ 核心/ 可/ 分配/ 的/ 资源/ 与其/ 计算能力/ 成正比/ ./ SRunit/ 表示/ 单位/ 比例/ 资源/ ,/ SRtotal/ 表示/ 1/ 个/ cycle/ (/ Z/ 个/ slot/ )/ 平台/ 可/ 分配/ 的/ 比例/ 资源/ 总数/ ,/ 定义/ 如式/ (/ 12/ )/ ;/ SRtotal/ 按照/ 权重/ 分给/ 各个/ VM/ ,/ 同属/ 一个/ VM/ 的/ 各个/ VCPU/ 平分/ 该/ VM/ 的/ SR/ ,/ 如式/ (/ 13/ )/ 所示/ ;/ SRinc/ (/ vj/ 增的/ SR/ ,/ SR/ (/ vj/ 式/ (/ 14/ )/ 所示/ ,/ 这/ 实现/ 了/ 对/ vj/ 过度/ 消耗/ ,/ 新/ 周期/ vj/ 余/ ,/ 新/ 周期/ vjSRtotal/ =/ Z/ ×/ (/ N/ (/ FC/ )/ ×/ SF/ (/ Ci/ )/ +/ N/ (/ SC/ )/ ×/ 为了/ 提高效率/ ,/ 算法/ 对/ 运行/ 队列/ 进行/ 分解/ :/ 为/ 每个/ 核心/ Ci/ 维护/ 3/ 个/ VCPU/ 队列/ :/ queue1/ (/ Ci/ )/ ,/ queue2/ (/ Ci/ )/ ,/ queue3/ (/ Ci/ )/ ./ 设/ |/ P/ (/ v/ )/ |/ 为/ 虚拟/ 处理器/ v/ 所属/ 的/ VM/ 包含/ 的/ VCPU/ 数目/ ,/ queue2/ (/ Ci/ )/ 存放/ |/ P/ (/ v/ )/ |/ >/ N/ (/ SC/ )/ 的/ VCPU/ ./ 当/ Ci/ 为慢/ 核心/ 时/ ,/ queue1/ (/ Ci/ )/ 存放/ N/ (/ FC/ )/ </ |/ P/ (/ v/ )/ |/ / N/ (/ SC/ )/ 的/ VCPU/ ,/ queue3/ (/ Ci/ )/ 存放/ |/ P/ (/ v/ )/ |/ / N/ (/ FC/ )/ 的/ VCPU/ ;/ 当/ Ci/ 为/ 快/ 核心/ 时/ ,/ queue1/ (/ Ci/ )/ 存放/ |/ P/ (/ v/ )/ |/ / N/ (/ FC/ )/ 的/ VCPU/ ,/ queue3/ (/ Ci/ )/ 存放/ N/ (/ FC/ )/ </ |/ P/ (/ v/ )/ |/ / N/ (/ SC/ )/ 的/ VCPU/ ./ 为了/ 控制/ 开销/ ,/ 每个/ 队列/ 没有/ 严格/ 排序/ ,/ 但/ 保证/ SR/ >/ 0/ 的/ VCPU/ 在/ SR/ </ 0/ 的/ VCPU/ 前面/ ./ 3.4/ 节将/ 利用/ 这/ 3/ 个/ VCPU/ 队列/ 提高/ 虚拟/ 处理器/ 选择/ 效率/ ./ 算法/ 伪/ 代码/ 描述/ 如下/ ./ 算法/ 2/ ./ 资源分配/ ./ for/ (/ 每/ 一个/ VCPUvi/ )/ 按照/ 式/ (/ 12/ )/ ~/ (/ 14/ )/ 更新/ SR/ (/ vi/ )/ 值/ ;/ for/ (/ 每/ 一个/ 核心/ Ci/ )/ 按照/ VCPU/ 的/ SR/ 值/ 调整/ Ci/ 的/ VCPU/ 队列/ ;/ 3.3/ 资源/ 消耗/ 每过/ 1/ 个/ slot/ ,/ 处于/ 运行/ 状态/ 的/ VCPU/ 的/ 将/ 消耗/ SR/ ./ 考虑/ 到/ AMP/ 的/ 性能/ 非/ 对称性/ ,/ SR/ 减少/ 的/ 量/ 应/ 与/ 运行/ 核心/ 的/ 计算能力/ 成正比/ ,/ 以/ 实现/ 公平/ 调度/ ./ 每过/ 1/ 个/ 周期/ (/ Z/ 个/ slot/ )/ ,/ 由/ 启动/ 捆绑/ 处理器/ (/ BootStrapProcessor/ ,/ BSP/ )/ 触发/ 资源分配/ 操作/ ;/ 每过/ 1/ 个/ slot/ ,/ 各个/ 核心/ 触发/ 资源/ 消耗/ 操作/ ./ 设/ CV/ (/ Ci/ )/ 表示/ 核心/ Ci/ 正在/ 运行/ 的/ VCPU/ ,/ 算法/ 伪/ 代码/ 描述/ 如下/ ./ 算法/ 3/ ./ 资源/ 消耗/ ./ for/ (/ 每/ 一个/ 核心/ Ci/ )/ {/ SR/ (/ CV/ (/ Ci/ )/ )/ =/ SR/ (/ CV/ (/ Ci/ )/ )/ -/ SF/ (/ Ci/ )/ ×/ SRunit/ ;/ if/ (/ CiisBSP/ &&/ 1cyclepassed/ )/ {/ }/ 3.4/ 虚拟/ 处理器/ 选择/ 在/ 新/ 的/ slot/ 开始/ 时/ ,/ 算法/ 需为/ 每个/ 核心/ 选择/ 1/ 个/ VCPU/ 来/ 运行/ ./ 若/ CV/ (/ Ci/ )/ 已/ 消耗/ 完/ 资源/ ,/ 算法/ 先/ 在/ 本地/ 的/ 3/ 个/ 运行/ 队列/ 中/ 选择/ 还有/ 剩余/ 资源/ 的/ VCPU/ 运行/ ;/ 若/ 本地/ 的/ VCPU/ 资源/ 都/ 消耗/ 完/ 了/ ,/ 则/ 需/ 进行/ 负载/ 均衡/ :/ 算法/ 从/ 其他/ 核心/ 的/ 运行/ 队列/ 中/ 迁移/ 还有/ 剩余/ 资源/ 的/ VCPU/ 过来/ 执行/ ./ 为了/ 使/ 同一/ VM/ 的/ 各个/ VCPU/ 能/ 在/ 同类/ 核心/ 上/ 运行/ (/ 调度/ 原则/ (/ 2/ )/ )/ ,/ 在/ 选择/ 迁移/ 的/ VCPU/ 时/ ,/ 需/ 考虑/ 它/ 所属/ VM/ 包含/ 的/ VCPU/ 数目/ ./ 因此/ ,/ 当/ 与/ 同类/ 核心/ 进行/ 负载/ 均衡/ 时/ ,/ Page7/ 按照/ queue1/ →/ queue2/ →/ queue3/ 的/ 顺序/ 选择/ VCPU/ ;/ 当/ 与/ 异类/ 核心/ 进行/ 负载/ 均衡/ 时/ ,/ 按照/ queue3/ →/ queue2/ →/ queue1/ 的/ 顺序/ 选择/ VCPU/ ./ 当/ CV/ (/ Ci/ )/ 还有/ 剩余/ 资源/ 时/ ,/ 算法/ 操作/ 如下/ :/ 若/ CV/ (/ Ci/ )/ 正在/ 运行/ 并行程序/ ,/ 算法/ 同步/ 运行/ 与其/ 同属/ 一个/ VM/ 的/ VCPU/ ;/ 否则/ CV/ (/ Ci/ )/ 单独/ 运行/ ./ 当/ |/ P/ (/ CV/ (/ Ci/ )/ )/ |/ 小于/ 核心/ 总数/ 时/ ,/ 没/ 参与/ 协同/ 调度/ 的/ 核心/ 可/ 分配/ 给/ 其它/ 正在/ 运行/ 串行/ 程序/ 的/ VCPU/ ,/ 这/ 避免/ 了/ 协同/ 调度/ 的/ 碎片/ 问题/ [/ 11/ ,/ 13/ ]/ ,/ 提高/ 了/ 系统/ 性能/ 和/ 效率/ ./ 本文/ 使用/ 文献/ [/ 12/ ]/ 提供/ 的/ 方法/ 判断/ VCPU/ 上/ 运行/ 的/ 程序/ 类型/ ,/ 该/ 方法/ 是/ 一种/ 基于/ 灰盒/ 知识/ 的/ 推理/ 技术/ ,/ 此处/ 不再/ 赘述/ ./ 算法/ 伪/ 代码/ 描述/ 如下/ ./ 算法/ 4/ ./ VCPU/ 选择/ 和/ 负载/ 均衡/ ./ for/ (/ 每/ 一个/ 核心/ Ci/ )/ {/ if/ (/ SR/ (/ CV/ (/ Ci/ )/ )/ / 0/ )/ {/ // // 当前/ 运行/ 的/ VCPU/ 已/ 消耗/ }/ else/ {/ // // 当前/ 运行/ 的/ VCPU/ 还/ 未/ 消耗/ 完/ 资源/ }/ }/ 算法/ 5/ ./ VCPU/ 执行/ ./ 输入/ :/ 核心/ Ciif/ (/ CV/ (/ Ci/ )/ 在/ 运行/ 并行程序/ )/ {/ VCPUs/ =/ 与/ CV/ (/ Ci/ )/ 同属/ 一个/ VM/ 的/ VCPU/ 集合/ ;/ cores/ =/ VCPUs/ 所在/ 的/ 核心/ 集合/ ;/ }/ else/ {/ CV/ (/ Ci/ )/ 继续/ 在/ Ci/ 上/ 执行/ ;/ }/ 3.5/ 算法/ 运行/ 开销/ 相对/ 于/ Xen/ 的/ Credit/ 调度/ 器/ [/ 20/ ]/ ,/ 集成/ 调度/ 算法/ 的/ 开销/ 主要/ 来源于/ 2/ 个/ 方面/ :/ (/ 1/ )/ 初始/ 映射/ ./ 设/ m/ 表示/ VM/ 总数/ ,/ n/ 表示/ 核心/ 总数/ ,/ 初始/ 映射/ 的/ 时间/ 复杂度/ 为/ O/ (/ mnlgn/ )/ ./ 初始/ 映射/ 的/ 时间/ 复杂度/ 来源于/ 2/ 方面/ :/ ①/ for/ 循环/ ,/ 执行/ m/ 次/ ,/ 时间/ 复杂度/ 为/ O/ (/ m/ )/ ;/ ②/ 选取/ NV/ 个/ 负载/ 最轻/ 的/ 核心/ ,/ 对/ 核心/ 根据/ 负载/ 做/ 堆排序/ ,/ 时间/ 复杂度/ 为/ O/ (/ nlgn/ )/ ./ 因为/ 核心/ 选取/ (/ ①/ 方面/ )/ 嵌套/ 在/ for/ 循环/ (/ ②/ 方面/ )/ 中/ 执行/ ,/ 初始/ 映射/ 模块/ 总/ 的/ 时间/ 复杂度/ 为/ O/ (/ m/ )/ ×/ O/ (/ nlgn/ )/ =/ O/ (/ mnlgn/ )/ ./ 由于/ 初始/ 映射/ 只/ 在/ VM/ 启动/ // 关闭/ 时/ 执行/ ,/ 开销/ 并不大/ ./ (/ 2/ )/ 协同/ 调度/ ./ 协同/ 调度/ 将/ 带来/ 额外/ 的/ 上下文/ 切换/ ./ 不过/ 算法/ 只/ 协同/ 调度/ 运行/ 并行程序/ 的/ VCPU/ ,/ 并且/ 采用/ 了/ 协同/ 调度/ 和/ 独立/ 调度/ 相结合/ 的/ 方法/ ,/ 将/ 没/ 参加/ 协同/ 调度/ 的/ 核心/ 分配/ 给/ 其他/ 正在/ 运行/ 串行/ 程序/ 的/ VCPU/ ,/ 这/ 避免/ 了/ 碎片/ 问题/ [/ 11/ ,/ 13/ ]/ ./ 另外/ ,/ 如同/ Credit/ 调度/ 器/ ,/ 集成/ 调度/ 算法/ 在/ 一个/ 核心/ 没有/ 可/ 运行/ 的/ 资源/ 时才/ 执行/ VCPU/ 迁移/ ,/ 迁移/ 次数/ 不/ 多于/ Credit/ ;/ 并且/ 算法/ 通过/ 运行/ 队列/ 分解/ 提高/ 了/ VCPU/ 的/ 选择/ 效率/ ,/ 因此/ 在/ VCPU/ 迁移/ 方面/ 并/ 没有/ 额外/ 的/ 开销/ ./ 综上所述/ ,/ 集成/ 调度/ 算法/ 开销/ 不/ 大/ ,/ 这/ 将/ 在/ 4.2/ ./ 3/ 节/ 的/ 实验/ 中/ 得到/ 进一步/ 验证/ ./ 4/ 实验/ 与/ 分析/ 4.1/ 实验/ 平台/ 与/ 方法/ 本节/ 将/ 集成/ 调度/ 算法/ (/ 下文/ 简称/ IA/ )/ 与/ AASH/ [/ 20/ ]/ 、/ Xen/ 自带/ 的/ 调度/ 器/ [/ 20/ ]/ (/ 下文/ 简称/ Credit/ )/ 进行/ 比较/ ./ 本文/ 采用/ Xen4/ ./ 0.1/ 实现/ 和/ 运行/ 上述/ 算法/ ,/ 客户机/ 操作系统/ 为/ Linux2/ ./ 6.27/ 内核/ 的/ Ubuntu8/ ./ 10/ ./ 测试程序/ 包括/ 并行程序/ 和/ 串行/ 程序/ ,/ 其中/ 并行程序/ 选自/ PARSEC/ [/ 28/ ]/ ,/ 串行/ 程序/ 选自/ SPECCPU2006/ ,/ 如表/ 2/ 所示/ ./ 实验/ 平台/ 是/ 一台/ 8GB/ 内存/ 的/ 2/ 路/ AMDOpteron2384/ 服务器/ ./ AMDOpteron2384/ 是/ 对称/ 多核/ 处理器/ ,/ 包含/ 4/ 个/ 2.7/ GHz/ 的/ 核心/ ./ 本文/ 用/ Page8DVFS/ 将/ 其中/ 6/ 个/ 核心/ 的/ 频率/ 调整/ 为/ 1.5/ GHz/ ,/ 另外/ 2/ 个/ 核心/ 的/ 频率/ 保持/ 在/ 2.7/ GHz/ ,/ 以/ 实现/ 2/ 个/ 快/ 核心/ +/ 6/ 个慢/ 核心/ 的/ 非/ 对称性/ 结构/ ./ fulidanimate/ 、/ facesim/ 、/ 并行/ 测试程序/ blackscholes/ 、/ swaptions/ 实验/ 中/ 我们/ 保证/ 每个/ VM/ 的/ VCPU/ 数目/ 等于/ 该/ VM/ 运行/ 的/ 测试程序/ 线程/ 数/ ,/ 以/ 避免/ 客户机/ 操作系统/ 的/ 调度/ 器/ 可能/ 带来/ 的/ 噪声/ ./ 对于/ 并行/ 测试程序/ ,/ 我们/ 通过/ 配置/ 程序/ 的/ 线程/ 数来/ 达到/ 该/ 效果/ ;/ 对于/ 串行/ 测试程序/ ,/ 我们/ 通过/ 同时/ 运行/ 程序/ 来/ 实现/ 该/ 效果/ ./ 测试程序/ 在/ 每个/ 调度/ 算法/ 下/ 分别/ 运行/ 3/ 次/ ,/ 取/ 相应/ 指标/ 的/ 平均值/ 作为/ 度量/ ./ 当/ 其中/ 某个/ 程序/ 提前完成/ 时/ ,/ 我们/ 让/ 其/ 重新/ 运行/ ,/ 以/ 保持/ 测试环境/ 的/ 稳定性/ ./ 参考/ Xen/ 的/ 调度/ 器/ 设计/ ,/ 我们/ 取/ 调度/ 周期/ cycle/ =/ 30ms/ ,/ 单位/ 时间/ slot/ =/ 10ms/ ./ 结合/ 测试/ 平台/ 配置/ 和/ 经验/ ,/ 在/ 4.2/ ./ 1/ ~/ 4.2/ ./ 3/ 节中/ 我们/ 取式/ (/ 6/ )/ 中/ 的/ μ/ =/ 0.6/ ,/ 初始/ 映射/ 的/ Threshold/ =/ 0.3/ ;/ μ/ 和/ Threshold/ 取/ 其他/ 值时/ 的/ 算法/ 表现/ 详见/ 4.2/ ./ 4/ 节/ ./ 4.2/ 实验/ 结果/ 与/ 分析/ 4.2/ ./ 1/ 性能/ 分析/ 由于/ 测试/ 平台/ 包含/ 2/ 个/ 快/ 核心/ 和/ 6/ 个慢/ 核心/ ,/ 为了/ 模拟/ 多种/ 同步/ 特性/ 和/ 资源/ 需求/ 的/ VM/ 共存/ 的/ 情况/ ,/ 我们/ 为/ 该/ 实验/ 配置/ 了/ 4/ 个/ DomU/ (/ VM1/ ~/ VM4/ )/ ,/ 包含/ 的/ VCPU/ 数目/ 如表/ 3/ 所示/ ./ 为了/ 更加/ 全面/ 地/ 比较/ 各个/ 算法/ 的/ 性能/ ,/ 我们/ 设计/ 了/ 多种/ 组合/ 的/ 并行程序/ 和/ 串行/ 程序/ 组成/ 的/ 测试/ 集/ ,/ 如表/ 4/ 所示/ ,/ 从左到右/ 表示/ 分别/ 在/ VM1/ ~/ VM4/ 上/ 运行/ ./ 为了/ 便于/ 比较/ 实验/ 结果/ ,/ 我们/ 以/ Credit/ 的/ 完成/ 时间/ 为/ 基准/ 对/ 数据/ 进行/ 归一化/ 处理/ ,/ Credit/ 的/ 完成/ 时间/ 为/ 1/ ,/ 小于/ 1/ 表示/ 完成/ 时间/ 小于/ Credit/ ,/ 否则/ 反之/ ./ DomainVM1VM2VM3VM4/ #/ VCPU2268/ 测试/ 集/ W1W2W3W4/ (/ perlbench/ 、/ xalancmk/ 、/ bwaves/ 、/ swaptions/ )/ 程序/ 完成/ 时间/ 如图/ 5/ 所示/ ,/ 包括/ 每个/ 程序/ 的/ 相对/ 完成/ 时间/ 以及/ 每个/ 测试/ 集/ 的/ 平均/ 相对/ 完成/ 时间/ (/ geo/ -/ mean/ )/ ./ 在/ 各个/ 测试/ 集/ 的/ 平均/ 完成/ 时间/ 上/ ,/ IA/ 比/ Credit/ 短/ 23/ %/ ~/ 28/ %/ ,/ 也/ 比/ AASH/ 短/ 23/ %/ ~/ 25/ %/ ./ 特别/ 是/ 对于/ 并行程序/ ,/ IA/ 的/ 优势/ 尤其/ 明显/ ,/ 相对/ 于/ Credit/ 和/ AASH/ 的/ 提高/ 有/ 37/ %/ ~/ 48/ %/ ;/ 对于/ 串行/ 程序/ ,/ IA/ 也/ 有/ 至少/ 19/ %/ 的/ 提高/ ./ IA/ 的/ 性能/ 优势/ 来源于/ 它/ 保证/ 了/ 3/ 个/ 调度/ 原则/ ,/ 在/ 调度/ 时/ 考虑/ 了/ 核心/ 的/ 非/ 对称性/ ,/ 并/ 根据/ 程序/ 的/ 同步/ 特性/ 和/ AMP/ 的/ 负载/ 情况/ 将/ VCPU/ 映射/ 到/ 合适/ 的/ 核心/ 上/ ./ 在/ 实验/ 中/ 我们/ 还/ 发现/ :/ 对于/ 并行程序/ (/ 如/ facesim/ 和/ swaptions/ )/ ,/ AASH/ 的/ 性能/ 与/ Credit/ 接近/ ;/ 对于/ 存储/ 密集型/ 程序/ (/ 如/ mcf/ 和/ soplex/ )/ ,/ AASH/ 的/ 性能/ 还/ 不如/ Credit/ ./ 这/ 是因为/ AASH/ 在/ 调度/ 时/ 主要/ 关注/ 利用/ 快/ 核心/ 公平/ 地/ 加速/ 每个/ VCPU/ ,/ 并/ 优先/ 将/ 快/ 核心/ 分配/ 给/ VCPU/ 数目/ 小于/ 快/ 核心/ 数目/ 的/ VM/ ,/ 这/ 带来/ 了/ 额外/ 的/ VCPU/ 迁移/ ,/ 对于/ 运行/ 存储/ 密集型/ 程序/ 的/ VCPU/ ,/ 迁移/ 将/ 遭受/ cache/ 的/ 冷启动/ 效应/ ,/ 降低/ 了/ 性能/ ./ 并且/ AASH/ 独立/ 调度/ 每个/ VCPU/ ,/ 没有/ 考虑/ 其/ 运行/ 并行程序/ 时/ 的/ 同步/ 问题/ ,/ 这/ 将/ 带来/ LHP/ (/ LockHolderPreemption/ )/ 和/ LCB/ (/ LockCompetitorsBlocking/ )/ 问题/ [/ 12/ ,/ 14/ ]/ ,/ 增加/ 并行程序/ 的/ 运行/ 时间/ ./ 4.2/ ./ 2/ 公平性/ 分析/ 该/ 实验/ 包括/ 5/ 个/ 权重/ 相等/ 的/ DomU/ (/ VM1/ ~/ VM5/ )/ ,/ 每个/ VM/ 包含/ 2/ 个/ VCPU/ ./ 测试程序/ 包括/ 并行程序/ (/ blackscholes/ 、/ fulidanimate/ 、/ facesim/ )/ 和/ 串行/ 程序/ (/ libquantum/ 、/ calculix/ 、/ namd/ )/ ./ 在/ 每次/ 实验/ 中/ ,/ 我们/ 在/ 5/ 个/ VM/ 上/ 运行/ 一样/ 的/ 测试程序/ ,/ 为了/ 便于/ 比较/ 实验/ 结果/ ,/ 我们/ 定义/ 了/ 比例/ 完成/ 时间/ (/ ScaledCompletionTime/ ,/ SCT/ )/ :/ 设/ ti/ 表示/ 一次/ 实验/ 中/ 第/ i/ 个/ VM/ 的/ 实际/ 完成/ 时间/ ,/ 则/ 这次/ 实验/ 中该/ VM/ 的/ 比例/ 完成/ 时间/ SCTi/ 定义/ 如下/ :/ Page9/ 我们/ 在/ 每次/ 实验/ 中/ 比较/ IA/ ,/ AASH/ 和/ Credit/ 上/ 各/ VM/ 的/ SCT/ 的/ 标准差/ ,/ 由于/ 5/ 个/ VM/ 的/ 权重/ 和/ VCPU/ 数目/ 都/ 相等/ ,/ 且/ 运行/ 一样/ 的/ 测试程序/ ,/ SCT/ 的/ 标准差/ 越小/ ,/ 说明/ 算法/ 越/ 公平/ ./ 程序/ SCT/ 的/ 标准差/ 如图/ 6/ 所示/ :/ IA/ 下/ 标准差/ 不/ 超过/ 0.02/ ,/ 比/ AASH/ 和/ Credit/ 稳定/ ./ 这/ 是因为/ IA/ 通过/ 比例/ 系数/ 和/ 比例/ 资源/ ,/ 在/ 资源分配/ 和/ 消耗/ 时/ 对/ 核心/ 非/ 对称性/ 进行/ 处理/ ,/ 使/ 资源/ 的/ 消耗/ 速度/ 和/ 核心/ 频率/ 成正比/ ,/ 保证/ 了/ 调度/ 的/ 公平性/ ./ 实验/ 结果表明/ Credit/ 下/ 程序/ 完成/ 时间/ 波动/ 最大/ ,/ 这/ 是因为/ 它/ 完全/ 没有/ 考虑/ 核心/ 的/ 性能/ 差异/ ./ 而/ AASH/ 在/ 运行/ 串行/ 程序/ 时/ 公平性/ 与/ IA/ 接近/ ,/ 在/ 运行/ 并行程序/ 时/ 公平性/ 差于/ IA/ ./ 这/ 是因为/ AASH/ 将/ 每个/ VCPU/ 当成/ 独立/ 的/ 调度/ 实体/ ,/ 从而/ 部分/ VM/ 出现/ LHP/ 和/ LCB/ 问题/ [/ 12/ ,/ 14/ ]/ ,/ 使/ 完成/ 时间/ 出现/ 波动/ ./ 4.2/ ./ 3/ 开销/ 分析/ 该/ 实验/ 的/ 虚拟机/ 配置/ 、/ 测试/ 集/ 和/ 实验/ 结果/ 处理/ 方法/ 与/ 4.2/ ./ 1/ 节/ 相同/ ,/ 不同/ 的/ 是/ 该/ 实验/ 运行/ 在/ 未经/ DVFS/ 调整/ 的/ 服务器/ 上/ ,/ 即/ 8/ 个/ 核心/ 都/ 是/ 2.7/ GHz/ ./ 我们/ 使/ AASH/ 假设/ 仍/ 在/ 2/ 个/ 快/ 核心/ +/ 6/ 个慢/ 核心/ 的/ 服务器/ 上/ 运行/ ,/ 同时/ 使/ IA/ 中/ 每个/ 核心/ 的/ SF/ =/ 1/ ./ 以此/ 来/ 分析/ IA/ 和/ AASH/ 带来/ 的/ 额外/ 开销/ ./ 实验/ 结果/ 如图/ 7/ 所示/ ,/ 超过/ 1/ 表示/ 算法/ 的/ 开销/ ./ IA/ 的/ 开销/ 很小/ ,/ 对于/ 串行/ 程序/ ,/ 初始/ 映射/ 只/ 在/ VM/ 启动/ // 关闭/ 时/ 执行/ ,/ 开销/ 不/ 超过/ 2/ %/ ;/ 对于/ 并行程序/ ,/ 协同/ 调度/ 带来/ 的/ 收益/ 大于/ 其/ 开销/ ,/ 因此/ 即使/ 在/ 对称/ 多核/ 处理器/ 上/ ,/ IA/ 的/ 性能/ 仍/ 有/ 17/ %/ ~/ 20/ %/ 的/ 提高/ ./ AASH/ 的/ 开销/ 主要/ 来源于/ 公平/ 共享/ 快/ 核心/ 造成/ 的/ VCPU/ 迁移/ ,/ 因此/ 对于/ 计算/ 密集型/ 程序/ 开销/ 较/ 小/ ,/ 而/ 对于/ 存储/ 密集型/ 程序/ (/ 如/ mcf/ 和/ soplex/ )/ 开销/ 较大/ ,/ 达到/ 18/ %/ ~/ 20/ %/ ./ 这/ 验证/ 了/ 3.5/ 节/ 的/ 算法/ 开销/ 分析/ ,/ 也/ 进一步/ 解释/ 了/ 各/ 算法/ 在/ 4.2/ ./ 1/ 节中/ 的/ 性能/ 表现/ ./ 4.2/ ./ 4/ 参数/ 灵敏度/ 分析/ 该/ 实验/ 分析/ (/ μ/ ,/ Threshold/ )/ 的/ 不同/ 取值/ 对/ 算法/ 性能/ 和/ 公平性/ 的/ 影响/ ./ 在/ 实验/ 平台/ 、/ 虚拟机/ 配置/ 和/ 测试/ 集/ 选取/ 上/ ,/ 性能/ 的/ 参数/ 灵敏度/ 实验/ 同/ 4.2/ ./ 1/ 节/ ,/ 结果/ 如图/ 8/ 所示/ ,/ 由于/ 各个/ 测试/ 集/ 表现/ 相近/ 的/ 趋势/ ,/ 限于/ 篇幅/ 我们/ 只/ 给出/ W1/ 在/ 不同/ 参数/ 取值/ 下/ 的/ 表现/ ;/ 公平性/ 的/ 参数/ 灵敏度/ 实验/ 方法/ 同/ 4.2/ ./ 2/ 节/ ,/ 图/ 9/ 为/ 测试程序/ 在/ 不同/ 参数/ 取值/ 下/ 实际/ 完成/ 时间/ 的/ 标准差/ 比较/ ./ 当/ (/ μ/ ,/ Threshold/ )/ =/ (/ 0.6/ ,/ 0.3/ )/ 时/ ,/ IA/ 取得/ 最优性/ 能/ ./ 不同/ 机器配置/ 的/ 核心/ 性能/ 差异/ 、/ 迁移开销/ 等/ 都/ 不同/ ,/ 而/ 在/ 本文/ 采用/ 的/ 实验/ 平台/ 上/ ,/ (/ 0.6/ ,/ 0.3/ )/ 正好/ 平衡/ 了/ VCPU/ 资源/ 需求/ 、/ 核心/ 非/ 对称性/ 和/ 核心/ 负载/ ./ (/ μ/ ,/ Threshold/ )/ 取值/ 主要/ 影响/ VCPU/ 的/ 初始/ 映射/ ,/ 当/ 取值/ 无法/ 很/ 好/ 地/ 平衡/ 各个/ 因素/ 时/ ,/ 将/ 在/ 后续/ 的/ 虚拟/ 处理器/ 选择/ 时/ 带来/ 额外/ 的/ VCPU/ 迁移/ ,/ 从而/ 影响/ 性能/ ./ 另外/ ,/ 如图所示/ ,/ 在/ (/ μ/ ,/ Threshold/ )/ 的/ 不同/ 取/ Page10/ 值下/ ,/ IA/ 的/ 性能/ 差异/ 并/ 不是/ 特别/ 大/ ,/ 这/ 是因为/ 即使/ 初始/ 映射/ 无法/ 平衡/ 各个/ 因素/ ,/ 后续/ 的/ 虚拟/ 处理器/ 选择/ 也/ 会/ 通过/ 动态/ 迁移/ VCPU/ 予以/ 补偿/ ,/ 这/ 也/ 说明/ 了/ 算法/ 的/ 有效性/ ./ (/ μ/ ,/ Threshold/ )/ 取值/ 对/ 算法/ 公平性/ 没有/ 影响/ ,/ 这/ 是因为/ 公平性/ 由/ 资源分配/ 和/ 资源/ 消耗/ 这/ 两个/ 模块/ 决定/ ./ 不管/ VCPU/ 初始/ 映射/ 到/ 哪个/ 核心/ 上/ ,/ 资源分配/ 和/ 资源/ 消耗/ 模块/ 都/ 可以/ 保证/ 它/ 得到/ 与其/ 权重/ 相对/ 应/ 的/ CPU/ 资源/ ./ 定量分析/ 机器配置/ 和/ 参数/ 取值/ 之间/ 的/ 关系/ 是/ 我们/ 下/ 一步/ 研究/ 的/ 内容/ ./ 4.3/ 实验/ 小结/ 基于/ 以上/ 实验/ ,/ 我们/ 可以/ 得出/ 以下/ 结论/ :/ (/ 1/ )/ 性能/ ./ 相对/ 于/ 其他/ 调度/ 算法/ ,/ 集成/ 调度/ 算法/ 具有/ 明显/ 优势/ ,/ 能/ 把/ 测试/ 集/ 平均/ 完成/ 时间/ 缩短/ 23/ %/ ~/ 28/ %/ ;/ 对于/ 并行程序/ ,/ 该/ 优势/ 更加/ 明显/ ,/ 完成/ 时间/ 缩短/ 可/ 达到/ 48/ %/ ;/ 对于/ 串行/ 程序/ ,/ 集成/ 调度/ 算法/ 也/ 有/ 至少/ 19/ %/ 的/ 提高/ ./ (/ 2/ )/ 公平性/ ./ 不管/ 是/ 执行/ 并行程序/ 还是/ 串行/ 程序/ ,/ 集成/ 调度/ 算法/ 比/ Credit/ 和/ AASH/ 公平/ ./ (/ 3/ )/ 开销/ ./ 集成/ 调度/ 算法/ 的/ 初始/ 映射/ 开销/ 不/ 超过/ 任务/ 完成/ 时间/ 的/ 2/ %/ ,/ 这/ 给/ 系统/ 造成/ 的/ 负担/ 很小/ ,/ 是/ 可以/ 接受/ 的/ ./ 而/ 协同/ 调度/ 的/ 开销/ 远/ 小于/ 其/ 收益/ ./ 5/ 相关/ 研究/ AMP/ 将/ 成为/ 未来/ 的/ 主流/ 体系结构/ [/ 5/ -/ 9/ ]/ ,/ 但/ 出于/ 设计/ 制造/ 成本/ 等/ 方面/ 的/ 考虑/ ,/ 真正/ 的/ AMP/ 还/ 没有/ 上市/ ./ 因此/ ,/ 对于/ VCPU/ 调度/ 问题/ ,/ 之前/ 的/ 研究/ 主要/ 集中/ 在/ SMP/ 上/ ./ 业界/ 知名/ 的/ VMM/ 对/ 该/ 问题/ 有/ 不同/ 的/ 解决方案/ :/ VMware/ 协同/ 调度/ 属于/ 同一/ VM/ 的/ 所有/ VCPU/ ,/ Xen/ 和/ KVM/ 则/ 独立/ 调度/ 所有/ VCPU/ ./ 文献/ [/ 10/ ,/ 12/ ]/ 对/ SMP/ 上/ 的/ VCPU/ 调度/ 问题/ 进行/ 建模/ 分析/ ,/ 证明/ 了/ 当/ 一个/ VM/ 正在/ 运行/ 并行程序/ 时/ ,/ 协同/ 调度/ 它/ 所有/ 的/ VCPU/ 可以/ 提高/ 性能/ ,/ 协同/ 调度/ 和/ 独立/ 调度/ 有/ 不同/ 的/ 适用/ 场景/ ;/ 并/ 给出/ 了/ 一个/ 面向/ SMP/ 的/ VCPU/ 调度/ 算法/ :/ 协同/ 调度/ 运行/ 并行程序/ 的/ VCPU/ ,/ 独立/ 调度/ 运行/ 串行/ 程序/ 的/ VCPU/ ./ 在/ 文献/ [/ 10/ ]/ 的/ 方法/ 中/ ,/ VM/ 上/ 运行/ 的/ 程序/ 类型/ 由/ 管理员/ 手动/ 设定/ ;/ 文献/ [/ 12/ ]/ 则/ 采用/ 一种/ 基于/ 灰盒/ 知识/ 的/ 推理/ 技术/ 来/ 自动/ 判断/ 程序/ 类型/ ./ 文献/ [/ 11/ ]/ 通过/ 实验/ 说明/ 同一/ VM/ 的/ VCPU/ 之间/ 的/ 同步/ 有/ 可能/ 是因为/ 运行/ 并行程序/ ,/ 也/ 有/ 可能/ 是因为/ 多个/ 串行/ 程序/ 访问共享/ 资源/ ,/ 并/ 提出/ 一个/ 面向/ SMP/ 的/ 平衡/ 调度/ 算法/ :/ 只/ 将/ 属于/ 同一/ VM/ 的/ VCPU/ 放在/ 不同/ 核心/ 上/ ,/ 但/ 不/ 强制/ 它们/ 同时/ 执行/ ./ 该/ 算法/ 是/ 协同/ 调度/ 和/ 独立/ 调度/ 的/ 折中/ 版本/ ./ VCPU/ 在/ SMP/ 上/ 每个/ 核心/ 的/ 执行/ 效率/ 是/ 一样/ 的/ ,/ 但/ 在/ AMP/ 不同/ 类型/ 核心/ 上/ 的/ 执行/ 效率/ 却是/ 不同/ 的/ ,/ 将/ SMP/ 上/ 的/ VCPU/ 调度/ 算法/ 照搬/ 到/ AMP/ 上/ 的话/ ,/ 对系统/ 的/ 公平性/ 和/ 性能/ 都/ 会/ 有/ 影响/ (/ 如/ 2.1/ 节/ 示例/ )/ ./ 而/ 本文/ 提出/ 的/ 集成/ 调度/ 算法/ 定义/ 了/ 效用/ 因子/ 、/ 比例/ 系数/ 、/ 比例/ 资源/ 的/ 概念/ ,/ 针对/ AMP/ 的/ 非/ 对称性/ 做/ 了/ 处理/ ,/ 保证/ 了/ 调度/ 的/ 公平性/ 和/ 性能/ ./ 本文/ 讨论/ 的/ AMP/ 上/ 的/ VCPU/ 调度/ 问题/ ,/ 近年来/ 有/ 少数/ 研究/ 工作/ ./ 文献/ [/ 21/ ]/ 以/ 降低/ 能耗/ 为/ 目标/ ,/ 认为/ Dom0/ 对/ 核心/ 性能/ 不/ 敏感/ ,/ 因此/ 可以/ 放在/ 慢/ 核心/ 上/ 执行/ ,/ 从而/ 使/ DomU/ 可以/ 优先/ 使用/ 快/ 核心/ ./ 但是/ 该/ 方法/ 无法/ 保证/ 公平性/ 和/ 性能/ ./ 跟/ 本文/ 讨论/ 问题/ 比较/ 相关/ 的/ 是/ 文献/ [/ 20/ ]/ ,/ 其/ 提出/ 的/ AASH/ 调度/ 器/ 也/ 是/ 以/ 性能/ 和/ 公平性/ 为/ 目标/ ,/ 具有/ 3/ 个/ 特性/ :/ ①/ 所有/ VCPU/ 公平/ 共享/ 快/ 核心/ ;/ ②/ 支持/ 面向/ AMP/ 的/ 操作系统/ ;/ ③/ 支持/ 设定/ VM/ 使用/ 快/ 核心/ 的/ 优先级/ ./ 但/ 集成/ 调度/ 算法/ 与/ AASH/ 存在/ 以下/ 不同/ :/ (/ 1/ )/ AASH/ 无法/ 兼顾/ 特性/ ①/ 和/ 特性/ ③/ [/ 20/ ]/ ;/ 集成/ 调度/ 算法/ 则/ 兼顾/ 了/ 公平性/ 和/ 3/ 个/ 调度/ 原则/ ./ (/ 2/ )/ AASH/ 需要/ 在/ 快慢/ 核心/ 间/ 频繁/ 迁移/ VCPU/ ,/ 增加/ 了/ 调度/ 开销/ ;/ 集成/ 调度/ 算法/ 则/ 通过/ 运行/ 队列/ 分解/ 对/ 调度/ 开销/ 进行/ 有效/ 控制/ ./ (/ 3/ )/ AASH/ 假设/ VM/ 的/ 权重/ 与其/ 包含/ 的/ VCPU/ 数目/ 成正比/ ,/ 但/ 现实/ 中/ 这/ 一/ 假设/ 往往/ 不/ 成立/ ;/ 集成/ 调度/ 算法/ 没对/ VM/ 的/ 权重/ 做/ 任何/ 假设/ ,/ 可/ 全面/ 支持/ Xen/ 的/ 权重/ 设置/ ./ 另外/ ,/ 文献/ [/ 20/ -/ 21/ ]/ 都/ 没有/ 考虑/ VCPU/ 的/ 同步/ 特性/ ,/ 也/ 没有/ 对/ AMP/ 上/ 的/ VCPU/ 调度/ 问题/ 进行/ 理论/ 分析/ ;/ 本文/ 建立/ 的/ 非线性/ 规划/ 模型/ 则/ 分析/ 了/ VCPU/ 的/ 同步/ 特性/ 和/ 核心/ 的/ 非/ 对称性/ ./ 6/ 总结/ 与/ 展望/ 高效/ 的/ VCPU/ 调度/ 算法/ 是/ 提高/ 虚拟化/ 系统/ 性能/ 的/ 关键/ ./ 本文/ 对/ AMP/ 上/ 的/ VCPU/ 调度/ 问题/ 进行/ 研究/ ,/ 建立/ 了/ 非线性/ 规划/ 模型/ ,/ 分析/ 得出/ 了/ 3/ 个/ 调度/ 原则/ ,/ 并/ 基于/ 调度/ 原则/ 提出/ 了/ 集成/ 调度/ 算法/ ./ 据/ 我们/ 所知/ ,/ 本文/ 是/ 第一个/ 对/ 该/ 问题/ 进行/ 建模/ 分析/ 的/ 研究/ ,/ 提出/ 的/ 算法/ 是/ 第一个/ 利用/ AMP/ 上/ 的/ VCPU/ 同步/ 特性/ 的/ 调度/ 算法/ ./ 实际/ 平台/ 上/ 全面/ 的/ 对比/ 实验/ 表明/ :/ 集成/ 调度/ 算法/ 的/ 性能/ 、/ 公平性/ 和/ 开销/ 都/ 优于/ 其他/ AMP/ 上/ 的/ 调度/ 算法/ ./ 集成/ 调度/ 算法/ 的/ 性能/ 优势/ 来/ Page11/ 源于/ 它/ 保证/ 了/ 3/ 个/ 调度/ 原则/ ,/ 在/ VCPU/ 调度/ 时/ 全面/ 考虑/ 核心/ 的/ 性能/ 、/ 负载/ 情况/ 以及/ VCPU/ 的/ 同步/ 特性/ ,/ 这/ 也/ 验证/ 了/ 调度/ 原则/ 的/ 有效性/ ;/ 公平性/ 优势/ 来源于/ 本文/ 提出/ 的/ 概念/ —/ —/ —/ 效用/ 因子/ 、/ 比例/ 系数/ 、/ 比例/ 资源/ ,/ 它们/ 使/ 核心/ 的/ 负载/ 、/ 资源/ 的/ 消耗/ 速度/ 与/ 核心/ 性能/ 成正比/ ;/ 开销/ 优势/ 主要/ 来源于/ 运行/ 队列/ 分解/ ,/ 它/ 有效/ 提高/ 了/ VCPU/ 选择/ 效率/ ./ 本文/ 提出/ 的/ 调度/ 算法/ 以/ 性能/ 和/ 公平性/ 为/ 目标/ ,/ 如何/ 通过/ VCPU/ 调度/ 降低/ 系统/ 能耗/ ,/ 将/ 是/ 我们/ 下/ 一步/ 的/ 研究/ 工作/ ./ 

