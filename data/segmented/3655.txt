Page1SAM/ :/ 一种/ 容错/ 的/ 末级/ 缓存/ 可/ 扩展/ 地址映射/ 方法/ 李崇民/ 汪/ 东升/ 王海霞/ 薛一波/ (/ 清华/ 信息/ 科学技术/ 国家/ 实验室/ (/ 筹/ )/ 北京/ 100084/ )/ 摘要/ 随着/ 半导体/ 工艺/ 进步/ ,/ 多核/ 处理器/ 超过/ 60/ %/ 的/ 片/ 上/ 面积/ 由片/ 上/ 缓存/ 占据/ ./ 由于/ 特征/ 尺寸/ 缩小/ 及/ 供电/ 电压/ 下降/ ,/ 片上/ 缓存/ 较/ 以往/ 更/ 容易/ 发生/ 错误/ ./ 缓存/ 错误/ 包括/ 可/ 恢复/ 的/ 软/ 错误/ (/ softerror/ )/ 及/ 不可/ 恢复/ 的/ 不/ 稳定/ 位/ (/ erraticbit/ )/ 失效/ ./ 传统/ 容错/ 技术/ 主要/ 研究/ 针对/ 单个/ 缓存/ 模块/ 的/ 保护/ ./ 当/ 缓存/ 中/ 包含/ 成百上千/ 个/ 模块/ 时/ ,/ 即使/ 单个/ 缓存/ 模块/ 出错/ 的/ 概率/ 很/ 低/ ,/ 系统/ 中有/ 一个/ 或/ 多个/ 缓存/ 出错/ 的/ 概率/ 也/ 相对/ 较/ 高/ ./ 文中/ 提出/ 可/ 扩展/ 地址映射/ (/ SAM/ )/ 方法/ ,/ 支持/ 对/ 可/ 缓存/ 地址/ 空间/ 灵活/ 高效/ 的/ 映射/ ,/ 提高/ 末级/ 缓存/ 的/ 可靠性/ ./ 通过/ 对末级/ 缓存/ 地址/ 空间/ 进行/ 重构/ ,/ 只要/ 有末级/ 缓存/ 模块/ 可以/ 工作/ ,/ SAM/ 就/ 能够/ 保证系统/ 正确/ 运行/ ./ SAM/ 可/ 应用/ 于/ 共享/ 或/ 集群/ 缓存/ 组织/ 方式/ ./ 文中/ 提出/ 的/ 算法/ 能/ 根据/ 末级/ 缓存/ 中/ 出错/ 缓存/ 模块/ 的/ 数目/ 变化/ ,/ 动态/ 调整/ 集群/ 缓存/ 组织/ 方式/ 下/ 的/ 集群/ 大小/ ./ 实验/ 结果表明/ ,/ SAM/ 方法/ 可/ 在/ 多种/ 出错/ 环境/ 下/ 保证系统/ 功能/ 正确/ ,/ 且/ 性能/ 平滑/ 下降/ ./ 关键词/ 多核/ 处理器/ ;/ 高速缓存/ ;/ 地址映射/ ;/ 容错/ ;/ 可靠性/ 1/ 引言/ 随着/ 半导体/ 工艺/ 不断进步/ ,/ 每/ 一代/ 产品/ 的/ 集成度/ 都/ 在/ 增加/ ,/ 在/ 一个/ 芯片/ 上/ 可以/ 集成/ 多个/ 处理器/ 核/ ./ 在/ 不久/ 的/ 将来/ ,/ 片上/ 多处理器/ 中/ 会/ 包含/ 有/ 成百上千/ 个/ 处理器/ 核/ [/ 1/ ]/ ./ 片上/ 存储资源/ 也/ 将/ 占据/ 超过/ 60/ %/ 的/ 芯片/ 面积/ ,/ 缓存/ 的/ 可靠性/ 对/ 芯片/ 的/ 可靠性/ 有/ 较大/ 影响/ ./ 导致/ 片上/ 缓存/ 错误/ 的/ 原因/ 主要/ 有/ 粒子/ 撞击/ (/ 软/ 错误/ )/ 或/ 不/ 稳定/ 位/ (/ erraticbit/ )/ 失效/ [/ 2/ ]/ ./ 软/ 错误/ 是/ 瞬时/ 的/ 、/ 可/ 恢复/ 的/ ,/ 而/ 不/ 稳定/ 位/ 失效/ 是/ 不可/ 恢复/ 的/ ./ 这/ 两种/ 错误/ 都/ 与/ 工艺/ 参数/ 密切相关/ ./ 随着/ 特征/ 尺寸/ 减小/ ,/ 出错/ 概率/ 呈/ 指数/ 式/ 增加/ ./ 许多/ 研究/ 关注/ 高速缓存/ 的/ 可靠性/ ,/ 如/ CPPC/ [/ 3/ ]/ 、/ ZerehCache/ [/ 4/ -/ 5/ ]/ 等/ ,/ 这些/ 技术/ 为/ 单个/ 缓存/ 模块/ (/ module/ )/ 提供/ 容错/ 机制/ ./ 目前/ 片上/ 多处理器/ 的/ 缓存/ 普遍/ 采用/ 非均/ 一性/ 缓存/ 结构/ [/ 6/ ]/ (/ Non/ -/ UniformCacheArchi/ -/ tecture/ ,/ NUCA/ )/ ,/ 末级/ 缓存/ 由/ 多个/ 缓存/ 模块/ 组成/ ,/ 目的/ 是/ 减少/ 数据/ 访问/ 的/ 延迟/ 与/ 竞争/ ①/ ./ 即使/ 单个/ 缓存/ 模块/ 出错/ 的/ 概率/ 很/ 低/ ,/ 片上/ 所有/ 缓存/ 模块/ 中有/ 至少/ 一个/ 模块/ 出错/ 的/ 概率/ 还是/ 相当可观/ 的/ ./ NUCA/ 结构/ 中/ ,/ 末级/ 缓存/ 的/ 可/ 缓存/ 地址/ 空间/ 由/ 所有/ 缓存/ 模块/ 组成/ ./ 当/ 一个/ 模块/ 出现/ 不可/ 恢复/ 错误/ 时/ ,/ 整个/ 地址/ 空间/ 的/ 完整性/ 将/ 被/ 破坏/ ,/ 影响/ 到/ 整个/ 缓存/ 系统/ 的/ 正确性/ ./ 这比/ 某个/ 一级/ 缓存/ 出现/ 不可/ 恢复/ 错误/ 更加/ 严重/ ,/ 因为/ 系统/ 可以/ 关闭/ 出错/ 的/ 一级/ 缓存/ 模块/ ,/ 在/ 损失/ 部分/ 性能/ 后/ 系统/ 仍然/ 能够/ 正确/ 运行/ ./ 目前/ 的/ 相关/ 研究/ 主要/ 关注/ 单个/ 缓存/ 模块/ 的/ 可靠性/ ,/ 考虑/ 末级/ 缓存/ 系统/ 整体/ 可靠性/ 的/ 研究/ 较少/ ./ 本文/ 提出/ 可/ 扩展/ 地址映射/ (/ SAM/ )/ 方法/ ,/ 可以/ 在/ 大规模/ 缓存/ 系统/ 中/ 进行/ 灵活/ 的/ 地址映射/ ./ 当末级/ 缓存/ 中有/ 缓存/ 模块/ 出现/ 不可/ 恢复/ 错误/ 时/ ,/ SAM/ 将/ 缺失/ 的/ 那/ 部分/ 地址/ 空间/ 重新分配/ 到/ 其他/ 功能/ 正常/ 的/ 缓存/ 模块/ 来/ 重构/ 可/ 缓存/ 地址/ 空间/ ./ 在/ 重新配置/ 之后/ ,/ 可/ 缓存/ 地址/ 空间/ 重新/ 变得/ 完整/ ,/ 系统/ 可以/ 继续/ 运行/ ,/ 因此/ 能够/ 提高/ 系统/ 的/ 可靠性/ ./ 极端/ 情况/ 下/ ,/ SAM/ 可以/ 保证系统/ 在/ 所有/ 末级/ 缓存/ 全部/ 失效/ 之前/ ,/ 系统/ 仍然/ 能/ 正确/ 运行/ ./ SAM/ 可/ 应用/ 于/ 共享/ 与/ 集群/ 缓存/ 组织/ 方式/ ./ 在/ 集群/ 组织/ 方式/ (/ clusterorganization/ )/ 下/ ,/ 当/ 出错/ 缓存/ 模块/ 数目/ 过多时/ ,/ SAM/ 可以/ 动态/ 将/ 集群/ 规模/ 调整/ 到/ 一个/ 适当/ 大小/ 并/ 保证/ 性能/ 的/ 平滑/ 下降/ ./ SAM/ 可/ 与/ 其它/ 末级/ 缓存/ 容错/ 技术/ 共存/ ./ 本文/ 对/ 64/ 核/ 瓦片/ (/ TILE/ )/ 结构/ 的/ 片/ 上/ 多处理器/ 进行/ 模拟实验/ ,/ 结果表明/ ,/ SAM/ 可以/ 在/ 不同/ 出错/ 情况/ 下/ 保证系统/ 性能/ 的/ 平稳/ 下降/ ./ 本文/ 主要/ 工作/ 包括/ :/ (/ 1/ )/ 指出/ 在/ 末级/ 缓存/ 中/ ,/ 即使/ 单个/ 缓存/ 模块/ 出错/ 的/ 概率/ 很/ 低/ ,/ 但/ 整个/ 系统/ 中/ 存在/ 出错/ 缓存/ 模块/ 的/ 概率/ 相对/ 较/ 高/ ./ (/ 2/ )/ 提出/ 可/ 扩展/ 地址映射/ 方法/ ,/ 可以/ 以较/ 小/ 硬件/ 代价/ 完成/ 可/ 缓存/ 地址/ 空间/ 的/ 重新/ 构建/ ./ (/ 3/ )/ 在/ SAM/ 对/ 地址/ 空间/ 重构/ 过程/ 中/ ,/ 能够/ 动态/ 调整/ 集群/ 组织/ 方式/ 下/ 每个/ 集群/ 规模/ 的/ 大小/ ,/ 以/ 保证/ 缓存/ 性能/ 的/ 平滑/ 下降/ ./ 2/ 背景/ 与/ 动机/ 2.1/ 背景/ 在/ 当前/ 多数/ 片上/ 多处理器/ 中/ ,/ SRAM/ 缓存/ 占据/ 了/ 一半/ 以上/ 的/ 芯片/ 面积/ ./ 缓存/ 出错/ 通常/ 由/ 缓存/ 位/ 失效/ 引发/ ,/ 缓存/ 位/ 失效/ 可以/ 分为/ 永久/ 失效/ 与非/ 永久/ 失效/ 两大类/ ./ 永久性/ 失效/ 主要/ 是/ 由/ 随机/ 掺杂/ 波动/ [/ 7/ ]/ (/ RandomDopantFluctuation/ ,/ RDF/ )/ 引起/ 的/ ./ Kulkarni/ 等/ 人/ [/ 8/ ]/ 指出/ 缓存/ 位/ 失效/ 的/ 概率/ 随着/ 供电/ 电压/ 的/ 下降/ 成/ 指数/ 上升/ ./ 永久性/ 失效/ 对/ 芯片/ 的/ 产出率/ 有/ 较大/ 影响/ ,/ 但/ 在/ 对/ 多处理器/ 缓存/ 可靠性/ 的/ 影响/ 中所/ 占/ 比例/ 不大/ ./ 非永久性/ 失效/ 包括/ 软/ 错误/ 和/ 不/ 稳定/ 位/ 失效/ [/ 1/ ]/ ./ 其中/ 软/ 错误/ 由/ 宇宙射线/ // 粒子/ 撞击/ 导致/ ,/ 软/ 错误/ 已/ 对/ 微电子/ 工业/ 产生/ 影响/ ,/ 有/ 厂商/ 称软/ 错误/ 已经/ 成为/ 客户/ 站点/ 中断/ 的/ 主要/ 原因/ [/ 9/ ]/ ./ 软/ 错误/ 属于/ 瞬时/ 错误/ ,/ 可以/ 通过/ 如/ ECC/ [/ 10/ ]/ 纠错码/ 等/ 方式/ 纠正/ ./ 不/ 稳定/ 位/ 失效/ 会/ 导致/ SRAM/ 单元/ Vccmin/ 的/ 波动/ [/ 11/ ]/ ,/ 不过/ 很难/ 得到/ 关于/ 不/ 稳定/ 位/ 失效/ 的/ 详细信息/ 与/ 物理/ 模型/ ./ 在/ 低/ 供电/ 电压/ 情况/ 下/ ,/ 不/ 稳定/ 位/ 失效/ 会/ 直接/ 导致/ 一个/ 缓存/ 单元/ 的/ 故障率/ 升高/ ,/ 需要/ 引起/ 重视/ ./ 单个/ 缓存/ 单元/ 的/ 可靠性/ 通常/ 用/ FIT/ (/ FailuresInTime/ )/ 表示/ ,/ 即/ 一个/ 缓存/ 单元/ 在/ 109/ 个/ 小时/ 内/ 的/ 故障/ 次数/ ./ 非永久性/ 失效/ 发生/ 的/ 概率/ 随着/ 工艺/ 的/ 进步/ 而/ 不断/ 上升/ ,/ 研究/ 表明/ ,/ 每/ 一代/ 工艺/ 进步/ ,/ 单个/ 缓存/ 单元/ 发生/ 软/ 错误/ 的/ 概率/ 增加/ 约/ 8/ %/ [/ 12/ ]/ ./ 根据/ 摩尔定律/ ,/ 每/ 一代/ 产品/ 芯片/ 上/ 的/ 晶体管/ 数目/ 约/ 增加一倍/ ,/ 因此/ 芯片/ 上/ 缓存/ 出错/ 的/ 概率/ 成/ 指数/ 式/ 增加/ ./ 例如/ 将来/ 16nm/ 工艺/ 下/ 芯片/ 的/ 失效/ 概率/ 是/ 180nm/ 工艺/ 下/ 的/ 100/ 倍/ 左右/ [/ 12/ ]/ ./ 老化/ 现象/ 也/ 对/ 晶体管/ 性能/ 有/ 较大/ 影响/ ,/ 导致/ 晶体管/ 的/ 饱和电流/ 逐渐/ 降低/ ./ 研究/ 认为/ 当/ 工艺/ 达到/ 32nm/ 后/ 老化/ 现象/ 会/ 更加/ 明显/ ./ 在/ 45nm/ 工/ ①/ 为/ 简单/ 起见/ 且/ 不失/ 普遍性/ ,/ 本文/ 假定/ 片上/ 共有/ 两级/ 存储/ ,/ 二/ Page3/ 艺下/ ,/ 缓存/ 单元/ 的/ 临界/ 电压/ (/ thresholdvoltage/ )/ 会/ 有/ 30mV/ 的/ 标准差/ ,/ 缓存/ 的/ 出错/ 概率/ 会/ 达到/ 10/ -/ 3/ [/ 13/ ]/ ./ 当/ 特征/ 尺寸/ 减小/ 时/ ,/ 缓存/ 的/ 出错/ 概率/ 会/ 更/ 高/ ./ 图/ 1/ 给出/ 了/ 元器件/ 在/ 不同/ 工艺/ 中/ ,/ 时间/ 与/ 电压/ 的/ 可靠性/ 变化趋势/ ./ 除了/ 缓存/ 单元/ 出错/ 之外/ ,/ 一个/ 缓存/ 模块/ 还会/ 受/ 其它/ 故障/ 的/ 影响/ ,/ 如/ 控制/ 逻辑/ 出错/ ,/ 数据链/ 路/ 断开/ ,/ 缓存/ 中/ 的/ 标志/ 或/ 目录/ 出错/ 等/ [/ 14/ ]/ ,/ 实际上/ 缓存/ 模块/ 的/ 出错/ 概率/ 还会/ 更/ 高/ ./ 2.2/ 动机/ 对/ 采用/ NUCA/ 结构/ 的/ 片/ 上/ 多处理器/ ,/ 如果/ 一个/ 末级/ 缓存/ 模块/ 出错/ ,/ 则/ 整个/ 末级/ 缓存/ 将/ 无法/ 工作/ ./ 假定/ 末级/ 缓存/ 中共/ 有/ n/ 个/ 缓存/ 模块/ ,/ 每个/ 缓存/ 模块/ 出错/ 的/ 概率/ 是/ p/ ,/ 且/ 各/ 缓存/ 模块/ 之间/ 相互/ 独立/ ,/ 则/ 整个/ 末级/ 缓存/ 出错/ 的/ 概率/ 为/ 图/ 2/ (/ a/ )/ 给出/ 了/ 缓存/ 模块/ 数目/ 从/ 64/ 增加/ 到/ 2048/ ,/ p/ 为/ 10/ -/ 4/ ~/ 10/ -/ 3/ 时/ ,/ 整个/ 末级/ 缓存/ 出错/ 的/ 概率/ ./ 当/ p/ =/ 10/ -/ 3/ ,/ n/ >/ 128/ 时/ ,/ 整个/ 末级/ 缓存/ 的/ 出错/ 概率/ 超过/ 了/ 10/ %/ ./ 当/ n/ >/ 1024/ 时/ ,/ 即使/ p/ =/ 10/ -/ 4/ ,/ 整个/ 末级/ 缓存/ 的/ 出错/ 概率/ 也/ 超过/ 了/ 10/ %/ ./ 因此/ 末级/ 缓存/ 的/ 可靠性/ 设计/ 面临/ 巨大/ 的/ 挑战/ ./ 当末级/ 缓存/ 中/ 包含/ 成百上千/ 个/ 缓存/ 模块/ 时/ ,/ 虽然/ 至少/ 一个/ 缓存/ 模块/ 出错/ 的/ 概率/ 相当/ 高/ ,/ 但/ 多个/ 二级缓存/ 模块/ 同时/ 出错/ 的/ 概率/ 是/ 相对/ 较/ 低/ 的/ ./ n/ 个/ 模块/ 中有/ m/ 个/ 出错/ 的/ 概率/ 为/ 图/ 2/ (/ b/ )/ 给出/ 了/ 在/ 不同/ 缓存/ 模块/ 数目/ n/ 下/ ,/ 恰好/ 有/ m/ 个/ 缓存/ 模块/ 出错/ 的/ 概率/ ./ 若有/ 一种/ 具有/ 容错/ 能力/ 的/ 设计方案/ ,/ 在/ 包含/ n/ 个/ 缓存/ 模块/ 的/ 末级/ 缓存/ 结构/ 中/ ,/ 能够/ 容忍/ 不/ 多于/ m/ 个/ 缓存/ 模块/ 出错/ ,/ 整个/ 缓存/ 系统/ 功能/ 正常/ 的/ 概率/ 为/ 图/ 3/ 给出/ 在/ 不同/ n/ 值/ 和/ m/ 值下/ 缓存/ 系统/ 功能/ 正常/ 的/ 概率/ ./ 例如/ 当/ p/ =/ 10/ -/ 3/ ,/ n/ =/ 1024/ 时/ ,/ 如果/ 能够/ 允许/ 不/ 超过/ 5/ 个/ 缓存/ 模块/ 出错/ ,/ 整个/ 系统/ 功能/ 出错/ 的/ 概率/ 小于/ 10/ -/ 4/ ./ 式/ (/ 3/ )/ 是/ 本文/ 提出/ 的/ 可/ 扩展/ 地址映射/ 方法/ 的/ 动机/ ./ SAM/ 通过/ 对/ 可/ 缓存/ 地址/ 空间/ 进图/ 3/ 如果/ 能/ 容忍/ m/ 个/ 缓存/ 模块/ 故障/ ,/ 系统/ 功能/ 完好/ 的/ 概率/ Page4/ 行/ 重构/ ,/ 能/ 在/ 多个/ 二级缓存/ 模块/ 出错/ 的/ 情况/ 下/ 保证系统/ 正确/ 运行/ ./ 针对/ 集群/ 组织/ 方式/ ,/ SAM/ 能/ 动态/ 调整/ 区域/ 的/ 规模/ ./ SAM/ 保证/ 只要/ 有/ 一个/ 末级/ 缓存/ 模块/ 工作/ ,/ 缓存/ 系统/ 就/ 能/ 正确/ 运行/ ,/ 这/ 同时/ 也/ 允许/ 系统/ 通过/ 关闭/ 部分/ 二级缓存/ 模块/ 来/ 降低/ 系统/ 功耗/ ./ 3/ 相关/ 工作/ 提高/ 系统可靠性/ 的/ 研究/ 主要/ 可以/ 分为/ 三/ 部分/ :/ 首先/ 是/ 电路/ 级/ 解决/ 方法/ ,/ 此类/ 方法/ 目标/ 是/ 提高/ 单个/ 缓存/ 单元/ 的/ 可靠性/ ./ 动态/ 电压/ // 频率/ 调整/ (/ DVFS/ )/ 技术/ 对/ 较易/ 出错/ 的/ SRAM/ 单元/ 施以/ 较/ 高/ 的/ 电压/ 或/ 较/ 低/ 的/ 频率/ ./ 此类/ 方法/ 需要/ 识别/ 出/ 一列/ 缓存/ 单元/ 中/ 最易/ 出错/ 的/ 那/ 一个/ ,/ 同时/ 访问/ 延迟/ 也/ 是/ 由/ 最易/ 出错/ 的/ 那个/ 单元/ 决定/ ,/ 因而/ 会/ 影响/ 系统/ 性能/ ./ 其它/ 研究/ 试图/ 去/ 改变传统/ SRAM/ 单元/ 的/ 结构/ 以/ 提高/ 可靠性/ [/ 8/ ,/ 15/ ]/ ,/ 代价/ 是/ 芯片/ 面积/ 增加/ ./ 第二种/ 方法/ 是/ 编码/ 解决/ 方法/ ,/ 此类/ 方法/ 适用/ 于/ 故障率/ 较/ 低且/ 以/ 瞬时/ 错误/ 为主/ 的/ 情况/ ./ 错误/ 检测/ 码/ (/ EDC/ )/ 与/ 纠错码/ (/ ECC/ )/ [/ 10/ ]/ 可用/ 来/ 探测/ // 纠正/ 缓存/ 中/ 的/ 错误/ ./ 二维/ 错误/ 检测/ 码/ [/ 16/ ]/ 将/ EDC/ 同时/ 应用/ 到/ 数据/ 阵列/ 的/ 行和列/ 上/ ./ 多位/ 纠错码/ 可以/ 容忍/ 更/ 高/ 的/ 出错/ 概率/ ,/ 但会/ 带来/ 延迟/ 、/ 面积/ 与/ 功耗/ 上/ 的/ 开销/ ./ CPPC/ 方法/ [/ 3/ ]/ 用/ 两个/ 寄存器/ 对/ 缓存/ 中/ 的/ 写/ 回/ 操作/ 提供/ 奇偶校验/ 保护/ ./ 最后/ 一类/ 是/ 利用/ 体系结构/ 方法/ 来/ 提高/ 缓存/ 的/ 可靠性/ ./ 最/ 有效/ 的/ 提高/ 存储/ 结构/ 可靠性/ 的/ 方法/ 是/ 多模/ 冗余/ ,/ 但是/ 其/ 面积/ 与/ 功耗/ 开销/ 太/ 大/ [/ 17/ ]/ ./ 冗余/ 行或列/ 可以/ 提高/ 存储/ 结构/ 的/ 可靠性/ [/ 18/ ]/ ./ 有/ 研究/ 将/ 多个/ 损坏/ 的/ 缓存/ 行/ // 块/ // 字/ 合并/ 成/ 一个/ 功能/ 正常/ 的/ 缓存/ 行/ // 块/ // 字/ [/ 7/ ,/ 19/ -/ 20/ ]/ ,/ 代价/ 是/ 增加/ 了/ 面积/ 和/ 访问/ 延迟/ ./ NUCA/ 结构/ [/ 6/ ]/ 最早/ 是/ 由/ Kim/ 等/ 人/ 提出/ ,/ S/ -/ NUCA/ [/ 21/ ]/ 可/ 灵活/ 支持/ 不同/ 的/ 共享/ 度/ (/ 区域/ 大小/ )/ ./ Hammoud/ 等/ 人/ [/ 22/ ]/ 提出/ 了/ 根据/ 缓存/ 缺失/ 率及/ 平均/ 延迟/ 来/ 调整/ 共享/ 度/ 的/ 方法/ ./ 此外/ 还有/ 将/ 缓存/ 划分/ 为/ 私有/ 与/ 共享/ 区域/ [/ 23/ ]/ 及/ 将/ 缓存/ 用/ 虚拟/ 层次/ [/ 24/ ]/ 进行/ 组织/ 的/ 方法/ ./ 4/ 可/ 扩展/ 地址映射/ 方案设计/ 4.1/ 常规/ 地址映射/ NUCA/ 结构/ 通过/ 地址映射/ 确定/ 每个/ 可/ 缓存/ 地址/ 所/ 对应/ 的/ 缓存/ 模块/ ./ 常规/ 地址映射/ 可以/ 分为/ 三类/ :/ 高位/ 交错/ 、/ 低位/ 交错/ 和/ 地址/ 偏离/ (/ addressskewing/ )/ ./ 这/ 三种/ 映射/ 方式/ 实现/ 较为简单/ ,/ 且/ 具有/ 确定性/ ,/ 即/ 一个/ 地址/ 对应/ 的/ 缓存/ 块/ 只能/ 存在/ 于/ 由/ 地址映射/ 所/ 确定/ 的/ 缓存/ 模块/ 中/ ./ 如果/ 一个/ 缓存/ 模块/ 出现/ 故障/ ,/ 即使/ 其它/ 绝大部分/ 缓存/ 模块/ 都/ 功能/ 正常/ ,/ 整个/ 缓存/ 系统/ 也/ 不能/ 再/ 正确/ 工作/ ./ 如果/ 能够/ 利用/ 功能/ 正常/ 的/ 缓存/ 模块/ 重新/ 构建/ 可/ 缓存/ 地址/ 空间/ ,/ 缓存/ 系统/ 的/ 可靠性/ 将/ 大大增加/ ./ 要/ 重建/ 可/ 缓存/ 地址/ 空间/ ,/ 就/ 需要/ 设计/ 出新/ 的/ 地址映射/ 方法/ ,/ 将/ 可/ 缓存/ 地址/ 空间/ 重新分配/ 到/ 功能/ 完好/ 的/ 缓存/ 模块/ 上/ ./ 完成/ 地址/ 重新分配/ 后/ ,/ 一级/ 缓存/ 需要/ 知道/ 去/ 哪里/ 寻找/ 一个/ 地址/ 所/ 对应/ 的/ 缓存/ 块/ ./ 为/ 说明/ 简便/ 且/ 不失/ 一般性/ ,/ 本文/ 应用/ 一个/ 16/ 核/ TILE/ 结构/ 的/ 片/ 上/ 多处理器/ 来/ 说明/ SAM/ 机制/ 的/ 原理/ 与/ 实现/ ./ 如图/ 4/ (/ a/ )/ 所示/ ,/ 所有/ 节点/ 通过/ 二维/ mesh/ 网络/ 互连/ ,/ 每个/ 节点/ 中/ 包括/ 一个/ 处理器/ 核/ ,/ 私有/ 的/ 一级/ 数据/ // 指令/ 缓存/ ,/ 和/ 共享/ 的/ 二级缓存/ ,/ 通过/ 路由器/ 与/ 片/ 上/ 网络连接/ ./ 每/ 一个/ 二级缓存/ 负责/ 1/ // 16/ 的/ 可/ 缓存/ 地址/ 空间/ ,/ 并/ 通过/ 片上/ 网络/ 接收/ 来自/ 其它/ 节点/ 的/ 请求/ ./ 图/ 4/ (/ b/ )/ 给出/ 了/ 4/ ×/ 4/ 集群/ 的/ 组织/ 方式/ ./ H/ 和/ R/ 分别/ 代表/ 全局/ 宿主/ 与/ 区域/ 宿主/ 节点/ ./ 4.2/ 共享/ 方式/ 下/ 的/ 可/ 扩展/ 地址映射/ 在/ 大规模/ 片上/ 多处理器/ 中/ ,/ 末级/ 缓存/ 中/ 一般/ 采用/ 目录/ 一致性/ 协议/ 维护/ 数据/ 的/ 一致性/ ./ 在/ 共享/ 组织/ 方式/ 下/ ,/ 对/ 每个/ 保存/ 在/ 缓存/ 中/ 的/ 数据/ ,/ 都/ 有/ 一个/ 由/ 地址映射/ 确定/ 的/ 宿主/ 节点/ ,/ 在/ 该/ 节点/ 末级/ 缓存/ 中有/ 对应/ 的/ 目录/ 项来/ 记录/ 对应/ 数据共享/ 副本/ 的/ 位置/ ./ 在/ 一级/ 缓存/ 发生/ 缺失/ 时/ ,/ 会/ 向/ 对应/ 末级/ 缓存/ 发送数据/ 请求/ ./ 如果/ 宿主/ 节点/ 发生/ 永久/ 故障/ 或者/ 频繁/ 的/ 非/ 永久/ Page5/ 故障/ ,/ 属于/ 该/ 部分/ 地址/ 空间/ 的/ 数据/ 就/ 会/ 失去/ 控制/ ,/ 不能/ 保证系统/ 运行/ 正确/ ./ 如果/ 缺失/ 的/ 地址/ 空间/ 可以/ 重新/ 映射/ 到/ 功能/ 正常/ 的/ 一个/ 或/ 多个/ 缓存/ 模块/ 上/ ,/ 就/ 能/ 保持/ 系统/ 正确/ 运行/ ./ 本文/ 提出/ 的/ 可/ 扩展/ 地址映射/ (/ SAM/ )/ 方法/ 可以/ 实现/ 上述/ 功能/ ./ 图/ 5/ 用/ 一个/ 简单/ 的/ 例子/ 来/ 说明/ SAM/ 容错/ 功能/ 的/ 实现/ 机制/ ./ 示例/ 系统/ 中/ 包含/ 两个/ 处理器/ 核/ ,/ 末级/ 缓存/ 由/ 两个/ 二级缓存/ 模块/ 组成/ ./ 在/ 没有/ 故障/ 发生/ 时/ ,/ 两个/ 二级缓存/ 模块/ 都/ 能/ 正常/ 工作/ ,/ 每个/ 二级缓存/ 模块/ 负责/ 一半/ 的/ 可/ 缓存/ 地址/ 空间/ ./ 如果/ 其中/ 一个/ 缓存/ 模块/ 出现/ 故障/ ,/ 则/ 整个/ 系统/ 都/ 不能/ 正常/ 工作/ ./ 而/ 通过/ 应用/ SAM/ 机制/ ,/ 可以/ 将/ 整个/ 可/ 缓存/ 地址/ 空间/ 都/ 映射/ 到/ 功能/ 正常/ 的/ 二级缓存/ 模块/ 上/ ,/ 整个/ 系统/ 可以/ 继续/ 正确/ 运行/ ./ 此时/ 所有/ 一级/ 缓存/ 的/ 请求/ 都/ 会/ 发送到/ 左侧/ 完好/ 的/ 二级缓存/ 模块/ ,/ 其/ 接收/ 的/ 请求/ 数量/ 将会/ 是/ 之前/ 的/ 2/ 倍/ ./ 这会/ 影响/ 到/ 系统/ 性能/ ,/ 但/ 系统/ 仍能/ 正确/ 运行/ ./ 设计/ SAM/ 机制/ 的/ 关键/ 是/ 将/ 整个/ 可/ 缓存/ 地址/ 空图/ 6/ 共享/ 方式/ 下/ 的/ 可/ 扩展/ 地址映射/ 间/ 重新分配/ 给/ 功能/ 正常/ 的/ 缓存/ 模块/ ,/ 从而/ 提高/ 末级/ 缓存/ 系统/ 的/ 可靠性/ ./ 重新分配/ 可/ 缓存/ 地址/ 空间/ 的/ 关键/ 是/ 确定/ 一个/ 可/ 缓存/ 地址/ 的/ 宿主/ 节点/ ,/ 这样/ 一级/ 缓存/ 发生/ 缺失/ 后/ ,/ 就/ 可以/ 将/ 请求/ 发送到/ 对应/ 的/ 二级缓存/ 模块/ ./ 因此/ 一级/ 缓存/ 必须/ 知道/ 可/ 缓存/ 地址/ 空间/ 重新分配/ 的/ 方案/ ./ 为/ 解决/ 上述/ 问题/ ,/ SAM/ 在/ 每个/ 一级/ 缓存/ 中/ 增加/ 了/ 一个/ 全局/ 宿主/ 节点/ 配置/ 表/ (/ GlobalHomenodeConfigurationTable/ ,/ GNCT/ )/ ./ 该/ 配置/ 表/ 的/ 项数/ 与/ 二级缓存/ 模块/ 数目/ 一样/ ,/ 按照/ 传统/ 地址映射/ 方式/ 所/ 确定/ 的/ 全局/ 宿主/ 节点/ 编号/ 进行/ 索引/ ./ 每个/ 表项/ 内容/ 为/ 新/ 的/ 全局/ 宿主/ 节点/ 编号/ ./ 当/ 所有/ 二级缓存/ 模块/ 功能/ 正常/ 时/ ,/ 表项/ 中/ 的/ 内容/ 与/ 索引/ 相同/ ./ 当有/ 二级缓存/ 模块/ 出现/ 故障/ 时/ ,/ 表项/ 内容/ 更新/ 为/ 经过/ 对/ 可/ 缓存/ 地址/ 空间/ 重新分配/ 后/ 的/ 新/ 宿主/ 节点/ 编号/ ./ 图/ 6/ 给出/ 了/ 对/ 16/ 核片/ 上/ 多处理器/ 可/ 缓存/ 地址/ 空间/ 进行/ 重新分配/ 的/ 例子/ ./ 最初/ 所有/ 二级缓存/ 模块/ 都/ 正常/ 工作/ ,/ 图/ 6/ (/ a/ )/ 中/ 宿主/ 节点/ 配置/ 表中/ 的/ 节点/ 编号/ 也/ 与/ 常规/ 地址映射/ 一样/ ./ 当图/ 6/ (/ b/ )/ 中有/ 一个/ 二级缓存/ 出现/ 故障/ 后/ ,/ 配置/ 表中/ 的/ 内容/ 被/ 重置/ ,/ 其中/ 第/ 6/ 个/ 表项/ 的/ 宿主/ 节点/ 编号/ 由/ 5/ 变为/ 4/ ./ 此时/ 编号/ 为/ 4/ 的/ 二级缓存/ 会/ 承受/ 之前/ 约/ 2/ 倍/ 的/ 缓存/ 请求/ ./ 图/ 6/ (/ c/ )/ 和/ 图/ 6/ (/ d/ )/ 给出/ 二级缓存/ 故障/ 增加/ 时/ 配置/ 表/ 内容/ 的/ 变化/ 情况/ ./ 考虑/ 到/ 负载平衡/ ,/ SAM/ 将/ 缺失/ 的/ 可/ 缓存/ 地址/ 空间/ 分布/ 到/ 多个/ 二级缓存/ 中/ ,/ 由于/ 对/ 全局/ 宿主/ 节点/ 配置/ 表/ 的/ 查找/ 并/ 不/ 在/ 缓存/ 访问/ 的/ 关键/ 路径/ 上/ ,/ 对系统/ 的/ 性能/ 不会/ 产生/ 影响/ ./ Page64/ ./ 3/ 集群/ 方式/ 下/ 的/ 可/ 扩展/ 地址映射/ 随着/ 片上/ 处理器/ 核/ 数目/ 的/ 增加/ ,/ 共享/ 组织/ 方式/ 下/ 的/ 目录/ 存储/ 开销/ 也/ 呈/ 线性/ 增加/ ./ 例如/ 当/ 缓存/ 行/ 大小/ 为/ 64/ 字节/ 时/ ,/ 一个/ 512/ 核/ TILE/ 结构/ 的/ 片/ 上/ 多处理器/ 的/ 目录/ 存储/ 开销/ 与/ 数据/ 存储/ 开销/ 相等/ ./ 采用/ 集群/ 组织/ 方式/ 可以/ 节省/ 目录/ 存储/ 开销/ ,/ 同时/ 降低/ 数据/ 的/ 访问/ 延迟/ ./ 集群/ 组织/ 方式/ 具有/ 较/ 好/ 的/ 可扩展性/ ,/ 是/ 设计/ 未来/ 众核/ 存储系统/ 的/ 一种/ 选择/ ./ 在/ 集群/ 方式/ 下/ ,/ 末级/ 缓存/ 被/ 划分/ 为/ 多个/ 区域/ ,/ 每个/ 区域/ 内/ 的/ 二级缓存/ 可/ 组成/ 一个/ 完整/ 的/ 可/ 缓存/ 地址/ 空间/ ./ 在/ 一级/ 缓存/ 发生/ 缺失/ 时/ ,/ 首先/ 向/ 区域/ 宿主/ 节点/ 发送/ 请求/ ,/ 如果/ 区域/ 宿主/ 节点/ 缺失/ 再/ 向/ 全局/ 宿主/ 节点/ 发送/ 请求/ ./ 集群/ 方图/ 7/ 集群/ 方式/ 下/ 的/ 可/ 扩展/ 地址映射/ 实现/ 如果/ 一个/ 区域/ 中/ 的/ 故障/ 二级缓存/ 过多/ ,/ 该/ 区域/ 的/ 缓存/ 性能/ 会/ 受到/ 较大/ 影响/ ./ SAM/ 提供/ 重新/ 调整/ 区域/ 大小/ 的/ 机制/ 来/ 减少/ 这种/ 影响/ ,/ 该/ 机制/ 的/ 伪/ 代码/ 在/ 图/ 8/ 中/ 给出/ ./ 该/ 算法/ 可以/ 调整/ 一个/ 区域/ 内/ 的/ 二级缓存/ 模块/ 数目/ ./ 图/ 9/ 给出/ 了/ 两个/ 例子/ 来/ 说明/ 对/ 区域/ 大小/ 的/ 重新/ 调整/ ./ 在/ 图/ 9/ (/ a/ )/ 中/ ,/ 只有/ L2/ -/ 1/ 出现/ 故障/ ,/ 此时/ SAM/ 将/ 其/ 地址/ 空间/ 重新分配/ 到/ L2/ -/ 0/ 上/ ,/ 整个/ 系统/ 仍然/ 由/ 4/ 个/ 区域/ 组成/ ./ 而/ 在/ 图/ 10/ (/ b/ )/ 中/ ,/ 共有/ 4/ 个/ 二级缓存/ 出现/ 故障/ ,/ 此时/ SAM/ 将/ 区域/ 数目/ 由/ 4/ 个/ 减少/ 到/ 2/ 个/ ./ 通过/ 动态/ 调整/ 区域/ 规模/ ,/ SAM/ 可以/ 避免/ 缓存/ 请求/ 过多地/ 集中/ 到/ 某个/ 二级缓存/ ,/ 同时/ 也/ 能/ 保证系统/ 性能/ 的/ 平滑/ 下降/ ./ 由于/ 每个/ 区域/ 内/ 包含/ 的/ 二级缓存/ 和/ 一级/ 缓存/ 节点/ 会/ 在/ 调整/ 后/ 发生/ 改变/ ,/ 同时/ 一个/ 地址/ 对应/ 的/ 区域/ 宿主/ 节点/ 也/ 会/ 改变/ ./ 此时/ 在/ 全局/ 宿主/ 节点/ 需要/ 记录/ 每个/ 区域/ 宿主/ 节点/ 的/ 位置/ ,/ 同时/ 区域/ 宿主/ 节点/ 也/ 需要/ 记录/ 每个/ 一级/ 缓存/ 子/ 节点/ 的/ 位置/ ./ 为/ 记录/ 这些/ 信息/ ,/ SAM/ 在/ 每个/ 二级缓存/ 中/ 增加/ 子/ 节点/ 配置/ 表/ (/ SubNodeConfigurationTable/ ,/ SNCT/ )/ ./ SNCT/ 由/ 两/ 部分/ 组成/ ,/ 分别/ 用来/ 记录/ 区域/ 宿主/ 节点/ 的/ 位置/ 和/ 式/ 下/ 区域/ 宿主/ 节点/ 的/ 确定/ 通常/ 采用/ 常规/ 地址映射/ 方法/ ./ 对/ 任意/ 一个/ 可/ 缓存数据/ ,/ 其/ 区域/ 宿主/ 节点/ 和/ 全局/ 宿主/ 节点/ (/ 可能/ 会/ 映射/ 到/ 同一/ 缓存/ 模块/ )/ 都/ 是/ 确定/ 的/ ./ 为/ 在/ 集群/ 方式/ 下/ 实现/ 容错/ 机制/ ,/ SAM/ 在/ 一级/ 缓存/ 中/ 增加/ 了/ 一个/ 区域/ 宿主/ 节点/ 配置/ 表/ (/ RegionalhomeNodeConfigurationTable/ ,/ RNCT/ )/ ,/ 其/ 结构/ 与/ 全局/ 宿主/ 节点/ 配置/ 表/ 类似/ ,/ 只是/ 每个/ 表项/ 中/ 的/ 编号/ 是/ 区域/ 宿主/ 节点/ ./ 在/ 集群/ 方式/ 下/ ,/ 全局/ 宿主/ 节点/ 不再/ 由/ 一级/ 缓存/ 直接/ 访问/ ,/ 而是/ 通过/ 二级缓存/ 中/ 的/ 区域/ 宿主/ 节点/ 访问/ ,/ 因此/ 将/ 全局/ 宿主/ 节点/ 配置/ 表移/ 到/ 二级缓存/ 中/ ./ 集群/ 方式/ 下/ SAM/ 的/ 具体/ 设计/ 如图/ 7/ 所示/ ./ 一级/ 缓存/ 子/ 节点/ 的/ 位置/ ./ SNCT/ 依照/ 节点/ 在/ 目录/ 中/ 的/ 位置/ 来/ 索引/ ,/ 表项/ 中/ 的/ 值/ 则/ 是/ 子/ 节点/ 的/ 具体/ 编号/ ,/ 同时/ 每个/ 表项/ 中/ 增加/ 1/ 位以/ 标记/ 对应/ 编号/ 是/ 区域/ 宿主/ 子/ 节点/ 还是/ 一级/ 缓存/ 子/ 节点/ ./ 4.4/ 可/ 扩展/ 地址映射/ 的/ 硬件/ 开销/ 共享/ 组织/ 方式/ 下/ ,/ SAM/ 设计/ 的/ 硬件/ 开销/ 仅/ 为/ 全/ Page7/ 图/ 9/ 集群/ 方式/ 下/ SAM/ 自动/ 调整/ 示例/ 局/ 宿主/ 节点/ 配置/ 表/ ./ 配置/ 表/ 项数/ 与/ 二级缓存/ 数目/ 相同/ ,/ 每/ 一个/ 表项/ 需要/ log2n/ 位来/ 存储/ 新/ 的/ 全局/ 宿主/ 节点/ ./ 共享/ 方式/ SAM/ 的/ 硬件/ 开销/ 是/ nlog2n/ 位/ ./ 集群/ 组织/ 方式/ 下/ ,/ 需要/ 增加/ 3/ 个/ 配置/ 表/ ,/ 即/ 全局/ 宿主/ 节点/ 配置/ 表/ 、/ 区域/ 宿主/ 节点/ 配置/ 表与子/ 节点/ 配置/ 表/ ./ 前/ 两个/ 配置/ 表/ 的/ 硬件/ 开销/ 在/ 最坏/ 情况/ 下/ 与/ 共享/ 组织/ 方式/ 相同/ ,/ 而子/ 节点/ 配置/ 表/ 每个/ 表项/ 还/ 需要/ 额外/ 1/ 位来/ 标记/ 表项/ 是/ 二级缓存/ 还是/ 一级/ 缓存/ ./ 表/ 1/ 给出/ 了/ 在/ 每个/ 二级缓存/ 模块/ 大小/ 为/ 1MB/ 时/ ,/ 不同/ 规模/ 的/ 片/ 上/ 多处理器/ 实现/ SAM/ 机制/ 所/ 需/ 的/ 硬件/ 开销/ ./ 在/ 1024/ 核时/ ,/ 集群/ 方式/ 下/ SAM/ (/ SAM/ -/ C/ )/ 的/ 硬件/ 开销/ 要/ 小于/ 1/ %/ ./ 表/ 1/ 每个/ 缓存/ 模块/ 为/ 1MB/ 时/ SAM/ -/ C/ 的/ 存储/ 开销/ 节点/ 数目/ HNCT/ +/ RNCTSNCT/ 总开销/ // 位/ 占/ 二级缓存/ 64128256512102420485/ 实验/ 评测/ 5.1/ 实验/ 设置/ 为/ 验证/ 可/ 扩展/ 地址映射/ 方法/ 的/ 效果/ ,/ 我们/ 利用/ Simics/ ①/ 和/ GEMS/ [/ 25/ ]/ 建立/ 实验/ 环境/ ./ Simics/ 是/ 一个/ 事件驱动/ 的/ 全/ 系统模拟/ 平台/ ./ Wisconsin/ 大学/ 的/ GEMS/ 在/ Simics/ 的/ 基础/ 之上/ 实现/ 了/ 完整/ 的/ 片/ 上/ 存储/ 层次/ ,/ 为片/ 上/ 存储/ 层次/ 研究/ 提供/ 了/ 平台/ ./ 表/ 2/ 中/ 给出/ 了/ 片/ 上/ 多处理器/ 系统/ 的/ 配置/ ,/ 二级缓存/ 与/ 一级/ 缓存/ 的/ 数据/ 是/ 全/ 包含/ 关系/ ,/ 片上/ 网络/ 中/ 传输/ 的/ 是/ 所有/ 维护/ 一致性/ 所/ 需/ 的/ 消息/ ./ 为/ 评估/ SAM/ 的/ 效果/ ,/ 本文/ 分别/ 将/ 共享/ 方式/ 与/ 集群/ 方式/ 作为/ 对比/ 的/ 基准/ 系统/ ,/ 同时/ 分别/ 用/ 1/ 个/ 或/ 8/ 个/ 二级缓存/ 模块/ 出错/ 时/ 的/ 系统/ 性能/ 与/ 缓存/ 性能/ 作为/ 对比/ ./ 表/ 3/ 给出/ 了/ 不同/ 方案/ 的/ 简写/ 及其/ 描述/ ./ CMP/ 规模/ 缓存/ 行/ 大小/ L1I/ -/ Cache/ 大小/ // 相连/ 度/ L1D/ -/ Cache/ 大小/ // 相连/ 度/ L1/ 延迟/ L1/ 替换/ 策略/ L2Cache/ 大小/ // 相连/ 度/ L2/ 延迟/ L2/ 替换/ 策略/ 网络拓扑/ 每/ 跳/ 延迟/ 片外/ 存储/ 延迟/ ①/ https/ :/ // // www/ ./ simics/ ./ net/ // Page8/ 方案/ 名称/ BASESAM/ -/ 1SAM/ -/ 8BASE/ -/ CSAM/ -/ C1SAM/ -/ C/ 方式/ ,/ 有/ 1/ 个/ 二级缓存/ 出错/ SAM/ -/ C8SAM/ -/ C/ 方式/ ,/ 有/ 8/ 个/ 二级缓存/ 出错/ 实验/ 选择/ 的/ 基准/ 测试程序/ 来自/ SPLASH/ -/ 2/ [/ 26/ ]/ 和/ PARSEC/ [/ 27/ ]/ 测试程序/ 集/ ,/ 这些/ 程序/ 覆盖/ 科学计算/ 及/ 通用/ 数据处理/ ./ 表/ 4/ 给出/ 了/ 本文/ 选择/ 的/ 测试程序/ 及/ 问题/ 规模/ ./ 本文/ 采用/ 执行/ 时间/ 作为/ 系统/ 性能/ 的/ 标准/ ,/ 并用/ 平均/ 片上/ 延迟/ 作为/ 评价/ 缓存/ 性能/ 的/ 标准/ ./ 负载/ 名称/ fftluradixoceanfmmvolrend/ (/ vol/ ./ )/ barnes/ (/ barn/ ./ )/ cholesky/ (/ chol/ ./ )/ Tkl5/ ./ obodytrack/ (/ bod/ ./ )/ Simsmallfluidanimate/ (/ flui/ ./ )/ Simsmallx264vipsswaption/ (/ swap/ ./ )/ Simsmall5/ ./ 2/ 共享/ 方式/ 下/ SAM/ 的/ 性能/ 图/ 10/ 给出/ 了/ SAM/ -/ 1/ 和/ SAM/ -/ 8/ 方案/ 下/ 整个/ 系图/ 10/ 共享/ 组织/ 方式/ 下/ 的/ 系统/ 性能/ 图/ 11/ 共享/ 组织/ 方式/ 下/ 的/ 缓存/ 性能/ 统与/ 基准/ 系统/ BASE/ 相对/ 比/ 的/ 性能/ ./ 在/ SAM/ -/ 8/ 方案/ 中/ ,/ 系统/ 性能/ 下降/ 最大/ 的/ 程序/ 为/ lu/ ,/ 下降/ 了/ 约/ 10/ %/ ,/ 其它/ 程序/ 的/ 性能/ 下降/ 幅度/ 都/ 低于/ 7/ %/ ./ SAM/ -/ 1/ 和/ SAM/ -/ 8/ 的/ 系统/ 性能/ 平均/ 分别/ 下降/ 了/ 1.9/ %/ 和/ 3.1/ %/ ./ 图/ 11/ 给出/ 了/ SAM/ -/ 1/ 和/ SAM/ -/ 8/ 的/ 缓存/ 性能/ ./ 其中/ SAM/ -/ 8/ 在/ bodytrack/ 程序/ 上/ 缓存/ 性能/ 下降/ 最大/ ,/ 性能/ 下降/ 达/ 15/ %/ ./ SAM/ -/ 1/ 和/ SAM/ -/ 8/ 的/ 系统/ 性能/ 平均/ 分别/ 下降/ 了/ 2.0/ %/ 和/ 5.9/ %/ ./ 5.3/ 集群/ 方式/ 下/ SAM/ 的/ 性能/ 图/ 12/ 给出/ 了/ SAM/ -/ C1/ 和/ SAM/ -/ C8/ 方案/ 下/ 整个/ 系统/ 与/ 基准/ 系统/ BASE/ 相对/ 比/ 的/ 性能/ ./ 在/ SAM/ -/ 8/ 方案/ 中/ ,/ 系统/ 性能/ 下降/ 最大/ 的/ 程序/ 为/ volrend/ ,/ 下降/ 了/ 约/ 9/ %/ ./ SAM/ -/ 1/ 和/ SAM/ -/ 8/ 的/ 系统/ 性能/ 平均/ 分别/ 下降/ 了/ 1.0/ %/ 和/ 2.7/ %/ ./ 图/ 13/ 给出/ 了/ SAM/ -/ 1/ 和/ SAM/ -/ 8/ 的/ 缓存/ 性能/ ./ 其中/ SAM/ -/ 8/ 在/ fluidanimate/ 程序/ 上/ 缓存/ 性能/ 下降/ 最大/ ,/ 达/ 12/ %/ ./ SAM/ -/ 1/ 和/ SAM/ -/ 8/ 的/ 系统/ 性能/ 平均/ 分别/ 下降/ 了/ 1.9/ %/ 和/ 4.3/ %/ ./ 5.4/ 敏感性/ 分析/ 为/ 研究/ 重建/ 可/ 缓存/ 地址/ 空间/ 对/ 缓存/ 系统/ 性能/ 的/ 影响/ ,/ 选择/ fft/ 和/ radix/ 程序/ 测试/ 从/ 1/ 个/ 二级缓存/ 故障/ 直到/ 32/ 个/ 二级缓存/ 故障/ 时/ 的/ 缓存/ 系统/ 性能/ ./ 图/ 14/ 和/ 图/ 15/ 分别/ 给出/ 了/ 共享/ 方式/ 与/ 集群/ 方式/ 下/ 缓存/ 系统/ 的/ 相对/ 性能/ ./ 在/ 共享/ 方式/ 下/ ,/ fft/ 与/ radix/ 的/ 缓存/ 性能/ 分别/ 平滑/ 下降/ 到/ 了/ 基准/ 系统/ 的/ 69/ %/ 和/ 80/ %/ ./ 在/ 集群/ 方式/ 下/ ,/ 最初/ 系统/ 是/ 由/ 16/ 个/ 区域/ 组成/ ,/ 每个/ 区域/ 内/ 包含/ 4/ 个/ 节点/ ./ 当出/ 故障/ 的/ 二级缓存/ 数目/ 超/ Page9/ 图/ 12/ 集群/ 组织/ 方式/ 下/ 的/ 系统/ 性能/ 图/ 13/ 集群/ 组织/ 方式/ 下/ 的/ 缓存/ 性能/ 图/ 14/ 共享/ 组织/ 方式/ 下/ 缓存/ 性能/ 下降/ 曲线/ 过/ 16/ 时/ ,/ SAM/ -/ C/ 将/ 系统/ 动态/ 调整/ 为/ 4/ 个/ 区域/ ,/ 每个/ 区域/ 包含/ 16/ 个/ 节点/ ./ 从图/ 15/ 中/ 可以/ 看出/ ,/ 当/ 二级缓存/ 故障/ 数目/ 达到/ 17/ 个/ 时/ ,/ 缓存/ 系统/ 的/ 性能/ 出现/ 了/ 波动/ ,/ 这/ 说明/ 了/ 动态/ 调整/ 片上/ 区域/ 划分/ 方法/ 的/ 效果/ ./ 图/ 15/ 集群/ 组织/ 方式/ 下/ 缓存/ 性能/ 下降/ 曲线/ 6/ 结论/ 片上/ 多处理器/ 的/ 片/ 上/ 末级/ 缓存/ 通常/ 采用/ NUCAPage10/ 结构/ ,/ 即使/ 单个/ 缓存/ 模块/ 的/ 出错/ 概率/ 较/ 低/ ,/ 当/ NUCA/ 中/ 包含/ 成百上千/ 个/ 缓存/ 模块/ 时/ ,/ 整个/ 缓存/ 出错/ 的/ 概率/ 也/ 较为/ 可观/ ./ 本文/ 提出/ 可/ 扩展/ 地址映射/ (/ SAM/ )/ 方法/ ,/ 目的/ 是/ 提高/ 片上/ 末级/ 存储系统/ 的/ 可靠性/ ./ SAM/ 在/ 不/ 十分/ 可靠/ 的/ 缓存/ 模块/ 基础/ 上/ 构建/ 了/ 高度/ 可靠/ 的/ 片/ 上/ 存储系统/ ./ SAM/ 的/ 硬件/ 开销/ 较/ 小/ ,/ 对/ 由/ 1024/ 个/ 1MB/ 模块/ 组成/ 的/ 二级缓存/ ,/ 实现/ SAM/ 所/ 需/ 的/ 硬件/ 开销/ 小于/ 1/ %/ ./ SAM/ 能够/ 在/ 相当/ 数量/ 的/ 二级缓存/ 出现/ 故障/ 时/ 保证系统/ 的/ 正确/ 运行/ ./ SAM/ 机制/ 可以/ 应用/ 在/ 共享/ 缓存/ 组织/ 方式/ 和/ 集群/ 缓存/ 组织/ 方式/ 下/ ./ 在/ 集群/ 方式/ 下/ ,/ SAM/ 可以/ 通过/ 动态/ 算法/ 选择/ 一个/ 适当/ 的/ 区域/ 大小/ ./ 模拟实验/ 表明/ ,/ 在/ 两种/ 组织/ 方式/ 下/ ,/ SAM/ 都/ 能够/ 实现/ 系统/ 性能/ 的/ 平滑/ 下降/ ./ SAM/ 可以/ 与/ 其它/ 提高/ 系统可靠性/ 的/ 方案/ 共同/ 工作/ ./ SAM/ 对/ 提高/ 将来/ 大规模/ 众核/ 处理器/ 存储系统/ 可靠性/ 是/ 一个/ 可行/ 的/ 设计方案/ ./ 

