Page1/ 固定/ 移动/ 融合/ 网络/ 中/ 基于/ 资源/ 挑战/ 的/ 垃圾/ 语音/ 防范/ 方法/ 何光宇/ 1/ )/ ,/ 2/ )/ 闻英友/ 2/ )/ 赵宏/ 1/ )/ 1/ )/ (/ 东北大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110004/ )/ 2/ )/ (/ 东软/ 集团/ 研究院/ 沈阳/ 110179/ )/ 摘要/ 以/ 经典/ 单向/ 函数/ 为/ 基础/ ,/ 设计/ 并/ 验证/ 了/ 一种/ 用于/ 垃圾/ 语音/ (/ SpamoverInternetTelephony/ ,/ SPIT/ )/ 防范/ 的/ 方法/ ./ 该/ 方法/ 利用/ 资源/ 挑战/ 机制/ ,/ 要求/ 垃圾/ 语音/ 的/ 发送者/ 消耗/ 大量/ 系统资源/ 来/ 破解/ 谜题/ 才/ 可以/ 发送/ 语言/ 会话/ 请求/ ./ 谜题/ 设计/ 算法/ 避免/ 了/ 相关/ 研究/ 存在/ 的/ 缺陷/ ,/ 使得/ 方法/ 更加/ 安全/ 、/ 可靠/ ;/ 谜题/ 破解/ 算法/ 要求/ 发送者/ 对/ CPU/ 与/ Memory/ 进行/ 双重/ 消耗/ ,/ 从而/ 缩小/ 不同/ 配置/ 终端/ 在/ 破解/ 过程/ 中/ 的/ 消耗/ 差距/ ./ 对/ 方法/ 进行/ 仿真/ 实验/ ,/ 分析/ 结果表明/ 方法/ 具有/ 很/ 好/ 的/ 有效性/ 与/ 适用性/ ./ 关键词/ SPIT/ ;/ 单向/ 函数/ ;/ 资源/ 消耗/ ;/ 谜题/ 设计/ ;/ 谜题/ 破解/ 1/ 引言/ 在/ 传统/ IP/ 网络/ 环境/ 下/ ,/ Spam/ 被/ 概括/ 地/ 定义/ 为/ 非/ 预期/ 的/ 信息/ 通信/ ./ EmailSpam/ 即/ 垃圾/ 电子邮件/ ,/ 作为/ 典型/ 代表/ 给/ 传统/ 互联网/ 带来/ 了/ 严重/ 的/ 安全/ 威胁/ 和/ 经济损失/ [/ 1/ ]/ ./ 随着/ IP/ 应用/ 的/ 普及/ 以及/ 基于/ IP/ 多媒体/ 子系统/ (/ IMS/ )/ 的/ 固定/ 移动/ 融合/ (/ FixedMobileConvergence/ ,/ FMC/ )/ 网络/ 的/ 发展/ ,/ 基于/ SIP/ [/ 2/ ]/ 协议/ 的/ Page2/ 与/ EmailSpam/ 不同/ ,/ SPIT/ 具有/ 实时性/ 和/ 直接/ 性/ 的/ 特点/ ,/ 因此/ 具有/ 更大/ 的/ 威胁/ ./ 垃圾/ 语音/ 以/ 音频/ 作为/ 内容/ 承载/ 手段/ ,/ 使得/ 较为/ 成熟/ 的/ 基于/ 内容/ 过滤/ 的/ EmailSpam/ 检测/ 方法/ 难以/ 实施/ ./ 融合/ 网络/ 的/ 开放/ 与/ 互通/ 也/ 使得/ 简单/ 的/ 黑白/ 名单/ 机制/ 不再/ 适用/ ./ 针对/ SPIT/ 检测/ 与/ 防范/ 的/ 重点/ 和/ 难点/ ,/ 相关/ 组织/ 、/ 学者/ 在/ 综合/ 检测/ 与/ 防范/ 模型/ [/ 6/ -/ 10/ ]/ 、/ 实体/ 认证/ 方法/ [/ 15/ -/ 16/ ]/ 、/ 行为/ 分析方法/ [/ 17/ -/ 19/ ]/ 、/ 信任/ 评判/ 方法/ [/ 20/ -/ 22/ ]/ 、/ 音频/ 检测/ 方法/ [/ 23/ -/ 24/ ]/ 、/ 资源/ 消耗/ 方法/ [/ 27/ -/ 29/ ]/ 等/ 方面/ 展开/ 研究/ ,/ 并/ 进行/ 仿真/ 验证/ [/ 25/ -/ 26/ ]/ 与/ 分析/ 评估/ [/ 11/ -/ 14/ ]/ ,/ 其中/ 资源/ 消耗/ 方法/ 能够/ 对/ 潜在/ 的/ SPIT/ 发送者/ 进行/ 资源/ 挑战/ ,/ 发送者/ 需要/ 消耗/ 大量/ 系统资源/ 与/ 时间/ 才能/ 应对/ 挑战/ ,/ 对以/ 高频/ 、/ 广域/ 为/ 目标/ 的/ SPIT/ 攻击/ 来说/ 是/ 一种/ 行之有效/ 的/ 防范/ 手段/ ./ 然而/ 目前/ 研究成果/ 也/ 存在/ 一些/ 问题/ 与/ 不足/ ./ Dwork/ 等/ 人/ [/ 27/ ]/ 与/ Banerjee/ 等/ 人/ [/ 28/ ]/ 提出/ 的/ 方法/ 仅/ 对/ 发送者/ 的/ CPU/ 资源/ 进行/ 消耗/ ,/ 由于/ 不同/ 终端/ 的/ CPU/ 频率/ 存在/ 很大/ 差距/ ,/ 因此/ 该/ 方法/ 的/ 性能/ 波动/ 较大/ ./ Abadi/ 等/ 人/ [/ 29/ ]/ 提出/ 的/ 方法/ 主要/ 对/ 发图/ 1/ 体系结构/ 改造/ 后/ 的/ 体系结构/ 增加/ 了/ ResourceChallenger/ 与/ ResourceResponder/ ,/ 二者/ 为/ 逻辑/ 功能/ 组件/ ,/ 可以/ 部署/ 为/ 独立/ 的/ 物理/ 实体/ ,/ 也/ 可以/ 集成/ 到/ Proxy/ 与/ Teminal/ 中/ ,/ 分别/ 实现/ 对/ caller/ 系统资源/ 的/ 挑战/ 及/ 对/ callee/ 挑战/ 的/ 应答/ ./ 图/ 2/ 给出/ 了/ 改造/ 后/ 基于/ SIP/ 协议/ 的/ VoIP/ 会话/ 流程/ ./ (/ 1/ )/ 每次/ OutBound/ 的/ Terminal/ 发来/ Invite/ 请求/ ,/ InBound/ 的/ ResourceChallenger/ 都/ 会/ 设计/ 一个/ 迷题/ ,/ 作为/ Challenge/ 发送给/ caller/ ;/ (/ 2/ )/ caller/ 利用/ 功能/ 组件/ ResourceResponder/ 来/ 破解/ 迷题/ ,/ 并/ 将/ 答案/ 作为/ Response/ 返回/ 给/ 送者/ 的/ 内存/ 资源/ 进行/ 消耗/ ,/ 由于/ 不同/ 终端/ 的/ 内存/ 频率/ 差距/ 相对/ 较/ 小/ ,/ 因此/ 规避/ 了/ 性能/ 波动/ 的/ 问题/ ./ 然而/ 以上/ 3/ 种/ 方法/ 的/ 挑战/ 空间/ 有限/ ,/ SPIT/ 发送者/ 可以/ 对/ 挑战/ 的/ 计算结果/ 进行/ 缓存/ ,/ 也/ 可以/ 预先/ 计算/ 出/ 不同/ 挑战/ 对应/ 的/ 结果/ ,/ 从而/ 轻松/ 应对/ 挑战/ ./ 本文/ 提出/ 一个/ 基于/ 资源/ 挑战/ 的/ SPIT/ 防范/ 模型/ ,/ 并/ 对模型/ 做/ 形式化/ 的/ 描述/ ./ 针对/ 模型/ 中/ 关键/ 算法/ 进行/ 重构/ 与/ 改进/ ,/ 克服/ 了/ 现有/ 研究成果/ 的/ 问题/ 与/ 不足/ ./ 第/ 2/ 节/ 给出/ 基于/ 资源/ 挑战/ 的/ SPIT/ 防范/ 模型/ ;/ 第/ 3/ 节/ 描述/ 模型/ 的/ 具体/ 算法/ ;/ 第/ 4/ 节/ 通过/ 实验/ 分析模型/ 及/ 算法/ 的/ 性能/ 与/ 效用/ ;/ 第/ 5/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 基于/ 资源/ 挑战/ 的/ SPIT/ 防范/ 模型/ 2.1/ 体系结构/ 与/ 流程/ 逻辑/ 境/ 进行/ 改造/ ,/ 增加/ 一些/ 功能/ 组件/ ,/ 如图/ 1/ 所示/ ./ 为了/ 实现/ 资源/ 挑战/ 机制/ ,/ 需要/ 对/ 传统/ VoIP/ 环/ ResourceChallenger/ ;/ (/ 3/ )/ ResourceChallenger/ 对/ 答案/ 进行/ 验证/ ,/ 如果/ 答案/ 错误/ 则/ 发送/ Bye/ 拒绝请求/ ,/ 如果/ 答案/ 正确/ 则/ 向/ callee/ 转发/ Invite/ 请求/ ;/ (/ 4/ )/ callee/ 判断/ 是否/ 接受/ 请求/ ,/ 如果/ 拒绝/ 则/ 发送/ Bye/ 请求/ ,/ 如果/ 接受/ 则/ 发送/ OK/ 应答/ ;/ ACK/ 请求/ ,/ 进而/ 双方/ 建立/ 媒体/ 会话/ ;/ (/ 5/ )/ 如果/ callee/ 返回/ OK/ 应答/ ,/ 则/ caller/ 发送/ (/ 6/ )/ 会话/ 完成/ 后/ ,/ callee/ 发送/ Bye/ 请求/ ,/ caller/ 返回/ OK/ 应答/ ,/ 会话/ 结束/ ./ Page3/ 图/ 2/ 流程/ 逻辑/ 2.2/ 形式化/ 描述/ 为了/ 准确/ 、/ 规范/ 地/ 展现/ 模型/ ,/ 支撑/ 模型/ 完备/ 、/ 无/ 二义性/ 的/ 实现/ ,/ 本/ 小节/ 给出/ 形式化/ 的/ 描述/ ./ 由于/ SIP/ 会话/ 基于/ 事务/ ,/ 因此/ 对/ SIP/ 事务/ 有限/ 状态机/ (/ SIPTransactionFiniteAutomation/ ,/ ST/ -/ FA/ )/ 进行/ 改进/ ,/ 使/ 其/ 能够/ 支持/ SPIT/ 防范/ 的/ 需要/ ./ ST/ -/ FA/ 按照/ 处理/ 的/ 请求/ 是否/ 为/ INVITE/ 分为/ INVITE/ 类型/ 与/ Non/ -/ INVITE/ 类型/ ,/ 本文/ 阐述/ 的/ SPIT/ 防范/ 方法/ 作用/ 于/ 连接/ 建立/ 阶段/ ,/ 因此/ 下面/ 给出/ 改进/ 后/ 的/ 客户端/ (/ UAC/ )/ 与/ 服务器端/ (/ UAS/ )/ 的/ INVITE/ 类型/ 的/ ST/ -/ FA/ ./ 定义/ 1/ ./ 一个/ 用于/ SPIT/ 防范/ 的/ 客户端/ ST/ -/ FA/ 是/ 一个/ 五元/ 组/ (/ Qc/ ,/ Σ/ c/ ,/ δ/ c/ ,/ qc/ ,/ Fc/ )/ ,/ 其中/ :/ Qc/ 是/ 一个/ 有穷/ 状态/ 的/ 集合/ ,/ 用来/ 表示/ 客户端/ 会话/ 建立/ 过程/ 中/ 的/ 各个/ 状态/ ,/ 定义/ 为/ {/ Calling/ ,/ Proceeding/ ,/ Computing/ ,/ Pending/ ,/ Completed/ ,/ Terminated/ }/ ;/ Σ/ c/ 是/ 导致/ 状态/ 变迁/ 的/ 各种/ 信息/ 的/ 集合/ ,/ 定义/ 为/ {/ Request/ ,/ Response/ }/ ;/ δ/ c/ :/ Qc/ ×/ Σ/ c/ →/ Qc/ 是/ 状态/ 转换/ 函数/ ,/ 图/ 3/ 给出/ 了/ 在/ 任一/ 状态/ qpre/ ∈/ Qc/ 时/ ,/ 发送/ 请求/ req/ ∈/ Σ/ c/ 或/ 收到/ 应答/ resp/ ∈/ Σ/ c/ 后/ 应该/ 进入/ 的/ 下/ 一/ 状态/ qpost/ ∈/ Σ/ c/ ;/ qc/ ∈/ Q/ 是/ 起始/ 状态/ ,/ 即/ 发起/ 会话/ 请求/ 时/ 的/ 状态/ Calling/ ;/ F/ ∈/ Q/ 是/ 接受/ 状态/ ,/ 即会话/ 结束/ 后/ 的/ 状态/ 定义/ 2/ ./ 一个/ 用于/ SPIT/ 防范/ 的/ 服务器端/ Terminated/ ./ ST/ -/ FA/ 是/ 一个/ 五元/ 组/ (/ Qs/ ,/ Σ/ s/ ,/ δ/ s/ ,/ qs/ ,/ Fs/ )/ ,/ 其中/ :/ Qs/ 是/ 一个/ 有穷/ 状态/ 的/ 集合/ ,/ 用来/ 表示/ 服务器端/ 会话/ 建立/ 过程/ 中/ 的/ 各个/ 状态/ ,/ 定义/ 为/ {/ Proceeding/ ,/ Designing/ ,/ Pending/ ,/ Verifying/ ,/ Completed/ ,/ Con/ -/ firmed/ ,/ Terminated/ }/ ;/ Σ/ s/ 是/ 导致/ 状态/ 变迁/ 的/ 各种/ 信息/ 的/ 集合/ ,/ 定义/ 为/ {/ Request/ ,/ Response/ }/ ;/ Page4/ δ/ s/ :/ Qs/ ×/ Σ/ s/ →/ Qs/ 是/ 状态/ 转换/ 函数/ ,/ 图/ 4/ 给出/ 了/ 在/ 任一/ 状态/ qpre/ ∈/ Qs/ 时/ ,/ 发送/ 请求/ req/ ∈/ Σ/ s/ 或/ 收到/ 应答/ resp/ ∈/ Σ/ s/ 后/ 应该/ 进入/ 的/ 下/ 一/ 状态/ qpost/ ∈/ Σ/ s/ ;/ qs/ ∈/ Q/ 是/ 起始/ 状态/ ,/ 即/ 收到/ 会话/ 请求/ 时/ 的/ 状态/ Proceeding/ ;/ Fs/ ∈/ Q/ 是/ 接受/ 状态/ ,/ 即会话/ 结束/ 后/ 的/ 状态/ Terminated/ ./ 3/ 模型/ 中/ 关键/ 算法/ 3.1/ 算法/ 设计/ 原则/ 基于/ 资源/ 挑战/ 的/ 方法/ 本质/ 上/ 是/ 通过/ 对/ caller/ 系统资源/ 的/ 消耗/ ,/ 利用/ 技术手段/ 从/ 经济性/ 层面/ 实现/ 对/ SPIT/ 攻击/ 的/ 防范/ ./ 为了/ 解决/ 现有/ 研究成果/ 存在/ 的/ 问题/ ,/ 提高/ 方法/ 的/ 鲁棒性/ 与/ 实用性/ ,/ 在/ 设计/ 时/ 需要/ 遵循/ 以下/ 原则/ :/ (/ 1/ )/ caller/ 需要/ 耗费/ 大量/ 系统资源/ 来/ 破解/ callee/ 设计/ 的/ 迷题/ 才/ 可以/ 成功/ 发送/ 语音/ 请求/ ,/ 而/ callee/ 只/ 需/ 消耗/ 极少/ 资源/ 便/ 可/ 设计/ 谜题/ 并/ 验证/ 答案/ 的/ 正确性/ ;/ (/ 2/ )/ 迷题/ 需要/ 对/ caller/ 的/ CPU/ 与/ Memory/ 进行/ 双重/ 消耗/ ,/ 最大/ 程度/ 缩小/ 配置/ 不同/ 的/ 终端/ 破解/ 迷题/ 时/ 的/ 差距/ ;/ (/ 3/ )/ 实现/ 一次/ 一问/ ,/ 避免/ 结果/ 被/ 多次/ 使用/ ;/ (/ 4/ )/ 随机/ 挑选/ 迷题/ 空间/ ,/ 使得/ 缓存/ 前续/ 计算/ 结本节/ 后续/ 给出/ 迷题/ 设计/ 及/ 破解/ 的/ 算法/ ,/ 并/ 讨论/ 果/ 与/ 预先/ 计算/ 不/ 可行/ ./ 给出/ 的/ 算法/ 如何/ 满足/ 设计/ 原则/ 的/ 要求/ ./ 3.2/ 迷题/ 设计/ 算法/ 迷题/ 设计/ 的/ 核心思想/ 是/ ResourceChallenger/ 利用/ 单向/ 函数/ 的/ 不可逆性/ 迫使/ ResourceResponder/ 通过/ 穷举/ 的/ 方法/ 来/ 计算/ 其/ 逆函数/ ,/ 从而/ 达到/ 资源/ 消耗/ 的/ 目的/ ./ 典型/ 的/ 单向/ 函数/ 有大/ 素数/ 因数/ 乘积/ 与/ 大/ 指数/ 求/ 幂模/ 运算/ ,/ 为了/ 与/ 主流/ 密码/ 系统/ 相一致/ ,/ 并/ 控制/ 自变量/ 与/ 值域/ 的/ 范围/ ,/ 本文/ 选择/ 后者/ ./ 其中/ a/ 称为/ 底数/ ,/ x/ 称为/ 指数/ ,/ n/ 称为/ 模数/ ,/ y/ 称为/ 余数/ ./ 此时/ ResourceChallenger/ 的/ 挑战/ 是/ 一个/ 三元组/ Challenge/ =/ {/ a/ ,/ n/ ,/ y/ }/ ./ ResourceResponder/ 需要/ 遍历/ x/ ∈/ Domain/ (/ x/ )/ =/ {/ x/ |/ 1/ / x/ / n/ -/ 1/ }/ ,/ 寻找/ x/ / 使得/ y/ =/ f/ (/ x/ / )/ ./ 在/ 该/ 算法/ 中/ ,/ 设/ 离散/ 型/ 随机变量/ M/ 表示/ ResourceResponder/ 找到/ x/ / 需要/ 计算/ 的/ 次数/ ,/ 其/ 概率分布/ 为/ P/ {/ M/ =/ mj/ =/ j/ }/ =/ pj/ =/ 1n/ -/ 1/ ./ 于是/ M/ 的/ 数学/ 期望/ 和/ 方差/ 分别/ 为/ 可见/ ResourceResponder/ 找到/ 特定/ 的/ x/ / 的/ 偶然性/ 比较/ 大/ ,/ 即/ 不同/ 挑战/ 对/ ResourceResponder/ 的/ 资源/ 消耗/ 不够/ 稳定/ ./ 因此/ 对/ 该/ 算法/ 进行/ 改进/ ,/ 利用/ 多次/ 遍/ 历来/ 降低/ 单次/ 遍历/ 存在/ 的/ 高/ 偶然性/ 问题/ ./ 改进/ 后/ 的/ 算法/ 中/ ,/ ResourceChallenger/ 首先/ 选定/ x0/ ,/ 然后/ 利用/ 式/ (/ 4/ )/ 重复/ 执行/ k/ 轮/ 得到/ xk/ ./ 为了/ 针对/ 每个/ xi/ +/ 1/ 可以/ 找到/ 唯一/ 的/ xi/ 与/ 之/ 对应/ ,/ 式/ (/ 1/ )/ 中/ 模数/ 选择/ 素数/ 记为/ p/ ,/ a/ 选择/ 群/ G/ =/ 〈/ Z/ / 根/ ,/ Domain/ (/ x/ )/ =/ {/ x/ |/ 1/ / x/ / p/ -/ 1/ }/ ./ 此时/ 挑战/ 是/ 一个/ 四元组/ Challenge/ =/ {/ a/ ,/ p/ ,/ k/ ,/ xk/ }/ ./ ResourceResponder/ 收到/ Challenge/ 后/ ,/ 首先/ 遍历/ xk/ -/ 1/ ∈/ Domain/ (/ x/ )/ ,/ 找到/ x/ / k/ -/ 1/ 使得/ xk/ =/ f/ (/ x/ / k/ -/ 1/ )/ ./ 如此/ 重复/ 遍历/ k/ 轮以/ 找到/ x/ / 0/ =/ x0/ ./ 设/ 离散/ 型/ 随机变量/ M1/ ,/ M2/ ,/ …/ ,/ Mk/ 分别/ 表示/ 第/ k/ 轮/ 找到/ x/ / k/ -/ 1/ 需要/ 计算/ 的/ 次数/ ,/ M/ 表示/ 表示/ 找到/ x/ / 0/ 需要/ 计算/ 的/ 总/ 次数/ ,/ M/ =/ ∑/ k/ 数/ ,/ M1/ ,/ M2/ ,/ …/ ,/ Mk/ 相互/ 独立/ ,/ 于是/ M/ 的/ 数学/ 期望/ 和/ 方差/ 分别/ 为/ Page5D/ (/ M/ )/ =/ ∑/ k/ 随着/ k/ 值/ 的/ 增加/ ,/ 该/ 算法/ 可以/ 有效/ 避免/ 单次/ 遍历/ 的/ 高/ 偶然性/ ,/ 然而/ 由于/ 式/ (/ 1/ )/ 引入/ 了/ 模/ 运算/ ,/ 使得/ x0/ 到/ xk/ 序列/ 中/ 容易/ 出现/ 循环/ ,/ 即/ xi/ =/ xi/ +/ c/ ./ ResourceResponder/ 在/ 逐轮/ 遍历/ 中/ 发现/ 循环/ 后/ ,/ 可以/ 在/ c/ 轮内/ 找到/ x/ / 0/ =/ x0/ ,/ 得到/ 破解/ 捷径/ 从而/ 逃避/ 大量/ 的/ 资源/ 消耗/ ./ 解决/ 的/ 方法/ 是/ 在/ 谜题/ 设计/ 的/ 每/ 一轮/ 加入/ 该轮/ 的/ 信息/ i/ ,/ 从而/ 保证/ x0/ 到/ xk/ 序列/ 中/ 不/ 存在/ 周期性/ 循环/ ./ ResourceChallenger/ 在/ 每次/ 计算/ f/ (/ xi/ )/ 后/ 将/ 其/ 与/ i/ 做/ 异或/ 操作/ ,/ 从而/ 避免/ 了/ 周期性/ 循环/ ./ 然而/ 异或/ 操作/ 的/ 结果/ 可能/ 超出/ Domain/ (/ x/ )/ ,/ 因此/ 还要/ 与/ p/ 做模/ 运算/ ./ 模/ 运算/ 的/ 结果/ 可能/ 为/ 0/ ,/ 因此/ 令/ f/ (/ 0/ )/ =/ 0/ ./ 异或/ 操作/ 还/ 可能/ 破坏/ xi/ +/ 1/ 与/ xi/ 的/ 一一/ 映射/ 关系/ ,/ 因此/ 需要/ 对/ x0/ 到/ xk/ 序列/ 求和/ 得到/ sum/ ./ 此时/ 挑战/ 是/ 一个/ 五元/ 组/ Challenge/ =/ {/ a/ ,/ p/ ,/ k/ ,/ xk/ ,/ sum/ }/ ./ ResourceResponder/ 收到/ Challenge/ 后/ ,/ 每轮/ 遍历/ 都/ 要/ 选择/ f/ (/ xi/ )/ Xori/ 的/ 值/ 为/ xi/ +/ 1/ 或/ xi/ +/ 1/ +/ p/ ./ 进行/ k/ 轮/ 遍历/ 计算/ 得到/ x/ / 0/ ,/ 并用/ x/ / 0/ 到/ x/ / k/ 的/ 和/ sum/ / 与/ sum/ 进行/ 比较/ ,/ 如果/ 相等/ 则/ 计算/ 结束/ ,/ 否则/ 选择/ 其它/ 组合/ 继续/ 计算/ ,/ 直到/ sum/ / 与/ sum/ 相等/ ./ 算法/ 目前/ 已经/ 具有/ 一定/ 的/ 实用性/ ,/ 但/ 在/ k/ 确定/ 的/ 情况/ 下/ ,/ Challenge/ =/ {/ a/ ,/ p/ ,/ k/ ,/ xk/ ,/ sum/ }/ 中/ xk/ 可取/ 不同/ 值/ 的/ 数量/ 为/ p/ ./ 因此/ ResourceResponder/ 可以/ 缓存/ 以往/ 计算/ 得到/ 的/ xk/ 对应/ 的/ x0/ ,/ 也/ 可以/ 在/ 闲暇/ 的/ 时间/ 预先/ 计算/ 出/ 每个/ xk/ 对应/ 的/ x0/ ,/ 从而/ 轻松/ 的/ 应对/ 挑战/ ./ 针对/ 这个/ 问题/ 的/ 解决/ 方法/ 是/ ,/ 在/ 每次/ 设计/ Challenge/ 时/ ,/ 加入/ 临时/ 信息/ 从而/ 使得/ 预先/ 计算/ 与/ 缓存/ 结果/ 不再/ 有效/ ./ 烅/ 烄/ xi/ +/ 1/ =/ 烆/ ResourceChallenger/ 每次/ 挑战/ 前/ ,/ 随机/ 选择/ 一个/ 变量/ token/ ∈/ Domain/ (/ x/ )/ ./ 当/ 轮次/ i/ 为/ 奇数/ 时/ ,/ 计算/ f/ (/ xi/ )/ 并/ 与/ i/ 做/ 异或/ 操作/ ,/ 再/ 与/ p/ 做模/ 运算/ ;/ 当/ 轮次/ i/ 为/ 偶数/ 时/ ,/ 计算/ f/ (/ xi/ )/ 并/ 依次/ 与/ i/ 和/ token/ 做/ 异或/ 操作/ ,/ 再/ 与/ p/ 做模/ 运算/ ./ 重复/ 执行/ k/ 次/ 得到/ xk/ ,/ 此时/ 挑战/ 是/ 一个/ 六元/ 组/ Challenge/ =/ {/ a/ ,/ p/ ,/ k/ ,/ xk/ ,/ token/ ,/ sum/ }/ ./ ResourceResponder/ 如何/ 破解/ 该/ 谜题/ ,/ 在/ 下面/ 给出/ 详细/ 阐述/ ./ 3.3/ 迷题/ 破解/ 算法/ ResourceResponder/ 收到/ Challenge/ =/ {/ a/ ,/ p/ ,/ k/ ,/ xk/ ,/ token/ ,/ sum/ }/ 后/ 采用/ 递归/ 的/ 方法/ 进行/ 破解/ ./ 递归函数/ 的/ 形式参数/ 为/ 3/ 元组/ {/ l/ ,/ x/ ,/ s/ }/ ,/ 其中/ l/ 代表/ 当前/ 的/ 轮次/ ,/ x/ 代表/ 当前/ 轮次/ xl/ 的/ 值/ ,/ s/ 代表/ 到/ 当前/ 轮次/ 为止/ 已/ 得到/ 的/ xl/ 的/ 和/ ,/ 即/ s/ =/ ∑/ k/ 递归/ 初始/ 时/ ,/ l/ =/ k/ ,/ x/ =/ xk/ ,/ s/ =/ xk/ ./ 如果/ l/ =/ 0/ 且/ s/ =/ sum/ ,/ 则/ 递归/ 结束/ ,/ 返回/ x0/ =/ x/ ./ 如果/ l/ =/ 0/ 且/ s/ ≠/ sum/ ,/ 则/ 返回/ 上层/ 函数/ ./ 如果/ l/ ≠/ 0/ ,/ 则/ 令/ x/ =/ x/ ,/ 并/ 执行/ 如下/ 计算/ :/ x/ =/ xXorl/ -/ 1/ ,/ i/ 为/ 奇数/ 遍历/ Domain/ (/ x/ )/ ,/ 如果/ 找到/ x/ / 使得/ x/ =/ f/ (/ x/ / )/ ./ 递归/ 调用/ 该/ 函数/ ,/ 此时/ 形式参数/ 赋值/ 为/ 3/ 元组/ {/ l/ -/ 1/ ,/ x/ / ,/ s/ +/ x/ / }/ ./ 如果/ 没有/ 找到/ x/ / ,/ 并且/ x/ / N/ -/ p/ ,/ 则/ 递归/ 调用/ 该/ 函数/ ,/ 此时/ 形式参数/ 赋值/ 为/ 3/ 元组/ {/ l/ ,/ x/ +/ p/ ,/ s/ }/ ./ 利用/ 该/ 递归函数/ 进行/ 谜题/ 破解/ ,/ 至少/ 要/ 进行/ l/ 轮/ 遍历/ ,/ 每轮/ 遍历/ 都/ 需要/ 依次/ 取/ x/ ∈/ Domain/ (/ x/ )/ ,/ 计算/ f/ (/ x/ )/ ./ 因此/ 理性/ 的/ ResourceResponder/ 会/ 首先/ 进行/ 一次/ 全/ 遍历/ ,/ 存储/ x/ →/ f/ (/ x/ )/ 的/ 映射/ 关系/ ,/ 在/ 每个/ 轮次/ 的/ 遍历/ 中/ 只/ 需要/ 反向/ 查询/ 便/ 可/ 找到/ x/ 对应/ 的/ x/ / ./ 反向/ 查询/ 实质/ 上/ 是/ 对/ Memory/ 的/ 随机/ 访问/ ,/ 随机/ 访问/ 的/ 效率/ 取决于/ Memory/ 的/ 时钟/ 频率/ ,/ 较之/ CPU/ 的/ 频率/ (/ 通常/ 333MHz/ -/ n/ ×/ 3GHz/ ,/ 几十倍/ )/ ,/ Memory/ 的/ 频率/ (/ 通常/ 333MHz/ ~/ 800MHz/ ,/ 几倍/ )/ 在/ 不同/ 终端/ 之间/ 差别/ 较/ 小/ ,/ 因此/ 采取/ 对/ ResourceResponder/ 的/ Memory/ 进行/ 消耗/ ,/ 可以/ 在/ 很大/ 程度/ 上/ 缩小/ 不同/ 配置/ 的/ ResourceResponder/ 破解/ 谜题/ 所/ 消耗/ 的/ 资源/ 的/ 差距/ ./ 4/ 实验/ 与/ 分析/ 为了/ 验证/ 本文/ 提出/ 的/ 资源/ 挑战/ 方法/ ,/ 搭建/ 仿真/ 环境/ 进行/ 实验/ 与/ 分析/ ./ 由于/ 关注/ 的/ 重点/ 是/ 该/ 方法/ 对/ ResourceResponder/ 的/ CPU/ 与/ Memory/ 的/ 消耗/ 情况/ 以及/ 该/ 方法/ 面对/ 不同/ 类型/ 与/ 配置/ 的/ ResourceResponder/ 所/ 表现/ 出/ 的/ 适用性/ ,/ 实验/ 选择/ 3/ 台/ 不同/ 类型/ 与/ 配置/ 的/ 计算机/ 作为/ ResourceResponder/ ,/ 观察/ 它们/ 在/ 解决/ 谜题/ 过程/ 中/ 的/ 表现/ ,/ 从而/ 验证/ 本文/ 提出/ 的/ 方法/ 的/ 有效性/ ./ 表/ 1/ 给出/ 作为/ ResourceResponder/ 的/ 3/ 台/ 计算机/ 的/ 配置/ 信息/ ./ Page6Machine/ 表/ 1ResourceResponder/ 配置/ 信息/ 表/ 2/ 给出/ 了/ 对于/ 不同/ Challenge/ =/ {/ a/ ,/ p/ ,/ k/ ,/ xk/ ,/ token/ ,/ sum/ }/ ,/ ResourceResponder/ 进行/ 破解/ 的/ 资源/ 消耗/ 情况/ ./ 其中/ 大/ 素数/ p/ =/ 9973/ ,/ 其/ 本原/ 根/ a/ =/ 11/ ,/ token/ =/ 8888/ ./ ResourceChallenger/ 在/ 设计/ 谜题/ 时/ ,/ x0/ 选择/ 1234/ ,/ 轮次/ k/ 从/ 100/ 到/ 1500/ 以/ 100/ 等/ 差/ 递增/ ./ C/ // R/ 分别/ 代表/ 用/ A/ 、/ B/ 、/ C/ 配置/ 的/ 计算机/ 进行/ 谜表/ 2/ 谜题/ 设计/ 与/ 破解/ 的/ 资源/ 消耗/ A0/ ./ 03/ // 2.460/ ./ 05/ // 3.890/ ./ 06/ // 6.450/ ./ 09/ // 9.730/ ./ 11/ // 14.750/ ./ 13/ // 19.960/ ./ 14/ // 26.630/ ./ 15/ // 33.110/ ./ 16/ // 41.070/ ./ 17/ // 51.520/ ./ 17/ // 61.600/ ./ 17/ // 72.960/ ./ 18/ // 84.790/ ./ 18/ // 98.210/ ./ 19/ // 112.10/ 图/ 5/ 给出/ 了/ 不同/ 配置/ 的/ ResourceResponder/ 破解/ 轮次/ 递增/ 的/ Challenge/ 时所/ 需要/ 的/ 时间/ ,/ 该图/ 反映/ 出/ 本文/ 提出/ 方法/ 的/ 一些/ 特性/ :/ (/ 1/ )/ 随着/ 轮次/ 的/ 增加/ ,/ 破解/ 谜题/ 的/ 时间/ 也/ 随之/ 增加/ ;/ (/ 2/ )/ 破解/ 谜题/ 所/ 需/ 时间/ 的/ 增加/ 从/ 平缓/ 趋向/ 剧烈/ ;/ (/ 3/ )/ ResourceResponder/ 破解/ 谜题/ 所/ 需/ 时间/ 的/ 差异/ 要/ 小于/ 其/ 配置/ 的/ 差异/ ./ 这些/ 特性/ 证明/ 了/ 本文/ 提出/ 的/ 谜题/ 设计/ 与/ 破解/ 方法/ 的/ 有效性/ 以及/ 适用性/ ./ 题/ 设计/ 与/ 破解/ 所/ 需/ 的/ 时间/ ,/ 单位/ 为/ s/ ./ 文献/ [/ 29/ ]/ 实验/ 用到/ Server/ 、/ Desktop/ 、/ Laptop/ 配置/ 差距/ 与/ 本文/ 实验/ 用到/ A/ 、/ C/ 、/ B/ 计算机/ 配置/ 差距/ 相当/ ,/ 文献/ [/ 29/ ]/ 实验/ 结果/ 表现/ 出/ 性能/ 差异/ 为/ 182442/ ,/ 本文/ 实验/ 结果/ 表现/ 出/ 性能/ 差异/ 为/ 202327/ ,/ 可见/ 本文/ 算法/ 性能/ 明显/ 优于/ 文献/ [/ 29/ ]/ 的/ 算法/ 性能/ ./ 图/ 6/ 和/ 图/ 7/ 分别/ 给出/ 不同/ 配置/ 的/ ResourceResponder/ 破解/ 轮次/ 递增/ 的/ Challenge/ 时/ CPU/ 与/ 内存/ 的/ 消耗/ ./ 由图/ 可知/ ,/ 破解/ 谜题/ 过程/ 几乎/ 占用/ ResourceResponder/ 的/ 全部/ CPU/ 资源/ ,/ 符合/ 资源/ 消耗/ 的/ 思想/ ;/ 并且/ 对/ Memory/ 的/ 使用/ 基本/ 恒定/ 在/ 23MB/ ,/ 这/ 说明/ 进行/ 资源/ 挑战/ 不/ 要求/ ResourceResponder/ 具有/ 大量/ 内存/ ,/ 该/ 方法/ 可以/ 推广/ 至/ PDA/ 、/ 智能手机/ 等/ 终端设备/ ./ Page75/ 结束语/ 本文/ 提出/ 的/ 基于/ 资源/ 挑战/ 的/ SPIT/ 防范/ 方法/ ,/ 克服/ 了/ 相关/ 研究/ 中/ 存在/ 的/ 消耗/ 抖动/ 较大/ ,/ 存在/ 破解/ 捷径/ 、/ 重复/ 利用/ 计算结果/ 、/ 预先/ 计算/ 等/ 诸多/ 缺陷/ ,/ 并且/ 实现/ 了/ 对/ ResourceResponder/ 的/ CPU/ 与/ Memory/ 的/ 双重/ 消耗/ ./ 仿真/ 实验/ 的/ 分析/ 结果表明/ ,/ 该/ 方法/ 可以/ 根据/ 实际/ 需要/ 设计/ 出/ 任意/ 难度/ 的/ 谜题/ ,/ 并/ 可以/ 扩展/ 到/ PDA/ 、/ 智能手机/ 等/ 终端设备/ ,/ 具有/ 很/ 好/ 的/ 有效性/ 与/ 适用性/ ./ 

