Page1/ 一种/ 多/ 核间/ 内存/ 公平/ 调度/ 模型/ 刘虎球/ 赵鹏/ (/ 清华大学/ 计算机科学/ 与/ 技术/ 学院/ 北京/ 100084/ )/ 摘要/ 计算机/ 的/ 发展/ 已/ 进入/ 多核/ 时代/ ,/ 在/ 共享内存/ 的/ 计算机系统/ 中/ ,/ 内存/ 需要/ 为/ 多/ 核/ 提供/ 公平/ 的/ 服务/ ./ 文中/ 提出/ 一种/ 在/ 多/ 核/ 环境/ 下/ 的/ 内存/ 公平/ 调度/ 模型/ ,/ 将/ 多/ 核/ 调度/ 问题/ 转化/ 为/ 一个/ 数学模型/ ,/ 极大/ 地/ 拓展/ 了/ 研究/ 多核/ 调度/ 的/ 思路/ ,/ 然后/ 通过/ 启发式/ 算法/ 求解/ ,/ 得到/ 了/ 一个/ 性能/ 较优/ 的/ 公平/ 调度/ 算法/ FQ/ -/ SJF/ ./ 基准/ soplex/ 的/ 实验/ 结果表明/ ,/ 相比/ FR/ -/ FCFS/ 调度/ 算法/ ,/ 平均/ 读取/ 延迟/ 比/ FR/ -/ FCFS/ 减小/ 了/ 10.6/ %/ ,/ 有效/ 验证/ 了/ 提出/ 的/ 多/ 核/ 调度/ 模型/ ./ 关键词/ 多核/ 内存/ 调度/ ;/ 多核/ 调度/ 模型/ ;/ 公平/ 队列/ 调度/ 1/ 引言/ 近年来/ ,/ CPU/ 的/ 多/ 核技术/ 得到/ 了/ 大力发展/ ,/ 在/ 共享内存/ 的/ 多/ 核/ 体系结构/ 中/ ,/ 多个/ 处理器/ 需要/ 访问/ 同/ 一部分/ 系统/ 内存/ ,/ 因此/ 内存/ 调度/ 的/ 重要性/ 日益/ 明显/ ,/ 逐渐/ 成为/ 国内外/ 的/ 研究/ 热点/ [/ 1/ -/ 2/ ]/ ./ 人们/ 也/ 希望/ 通过/ 设计/ 较/ 好/ 的/ 内存/ 体系结构/ 来/ 解决/ 处理器/ 和/ 内存/ 之间/ 的/ 发展/ 速率/ 差/ [/ 3/ -/ 4/ ]/ ./ 在/ 内存/ 调度/ 中/ ,/ 主要/ 完成/ 的/ 是/ 接收/ 内存/ 请求/ 队列/ 中/ 的/ 请求/ ,/ 然后/ 在/ 算法/ 控制/ 下/ 执行/ 被/ 选中/ 的/ 请求/ ,/ 本文/ 首先/ 提出/ 了/ 一个/ 通用/ 的/ 内存/ 公平/ 调度/ 模型/ ./ 并/ 通过/ 理论/ 上/ 论证/ ,/ 目前/ 的/ 多种/ 调度/ 算法/ 均/ 为/ 该/ 模型/ 的/ 一个/ 解/ ,/ 并且/ 通过/ 设置/ 不同/ 模型/ 参数/ ,/ 使得/ 该/ 模型/ 具有/ 不同/ 的/ 代表/ 意义/ ./ 随后/ ,/ 通过/ 使用/ 启发式/ 算法/ 为/ 模型/ 构造/ 了/ 一个/ 解/ ,/ 并/ 通过/ 模拟/ 仿真/ 实现/ 该/ 内/ Page2/ 存/ 调度/ 算法/ ,/ 通过/ 修改/ M5/ 模拟器/ ,/ 并/ 在/ M5/ 模拟器/ 上/ 运行/ 各种/ 待/ 测试/ 的/ 基准/ 应用/ ,/ 与/ 现行/ 的/ 几种/ 多核/ 调度/ 算法/ 进行/ 性能/ 上/ 的/ 综合/ 比较/ 并/ 验证/ 了/ 模型/ 的/ 可用性/ ./ 2/ 相关/ 工作/ 2.1/ 存储系统/ 为了/ 有效/ 定位/ 和/ 说明/ 内存/ 调度/ ,/ 首先/ 简要地/ 对/ 计算机/ 的/ 基本/ 组成/ 和/ 软硬件/ 构造/ 予以/ 说明/ ./ 现代/ 计算机/ 都/ 以/ 存储器/ 为/ 核心/ ,/ 这/ 与/ 古典/ 的/ 冯/ ·/ 诺/ 依曼结构/ 有所不同/ ,/ 从/ 程序员/ 的/ 角度/ ,/ 计算机/ 要/ 开始/ 工作/ ,/ 必须/ 把/ 程序/ 装载/ 到/ 计算机/ 的/ 内存/ 中/ ./ 该/ 过程/ 可以/ 归为/ 存储管理/ 过程/ ./ 在/ 程序执行/ 过程/ 中/ ,/ 中央/ 控制器/ 所/ 需要/ 的/ 指令/ 从/ 存储器/ 中/ 读取/ ,/ 运算器/ 所/ 需要/ 的/ 数据/ 同样/ 从/ 内存/ 中/ 读取/ ,/ 执行/ 完/ 的/ 结果/ 同样/ 需要/ 写/ 回到/ 内存/ 中/ ,/ 在/ 当前/ 的/ 主流/ 系统结构/ 中/ ,/ IO/ 设备/ 也/ 可以/ 直接/ 和/ 存储器/ 进行/ 数据交换/ ,/ 可见/ 存储器/ 已经/ 成为/ 计算机/ 的/ 核心部件/ ./ 对于/ 内存/ 调度/ ,/ 从/ 操作系统/ 的/ 层次/ 上/ 看/ ,/ 主要/ 由/ 硬件/ 完成/ ,/ 这/ 是因为/ 当前/ 的/ 体系结构/ 中/ ,/ 存储器/ 内部结构/ 对于/ 存储管理/ 是/ 透明/ 的/ ./ 当/ CPU/ 将/ 读取/ 内存/ 的/ 请求/ 交由/ 内存/ 控制器/ [/ 7/ ]/ 后/ ,/ 此时/ 完全/ 由/ 内存/ 调度/ 来/ 完成/ ,/ 其中/ 包括/ 从/ 内存/ 请求/ 队列/ 中/ 获取/ 内存/ 请求/ ,/ 然后/ 按照/ 内存/ 调度/ 算法/ 处理/ 该/ 请求/ 队列/ ,/ 待/ 请求/ 被/ 执行/ 完时/ ,/ 通知/ CPU/ 可以/ 继续执行/ ,/ 因而/ 对于/ 操作系统/ 来说/ ,/ 是/ 完全/ 透明/ 的/ ./ 在/ 当前/ 的/ 多/ 核/ 系统/ 中/ ,/ 各/ 处理器/ 通过/ 共享内存/ 资源/ 完成/ 一些/ 混合/ 应用/ ,/ 同时/ 也/ 通过/ 内存/ 共享/ 完成/ 部分/ 核间/ 数据共享/ 和/ 通信/ [/ 8/ -/ 9/ ]/ ./ 因此/ 内存/ 调度/ 更/ 需要/ 均衡/ 地/ 响应/ 各个/ 处理器/ 的/ 内存/ 读写/ 请求/ ,/ 从而/ 有效/ 提高/ 各个/ 处理器/ 的/ 利用率/ ./ 但/ 内存/ 调度/ 仍旧/ 完全/ 由/ 存储器/ 内部/ 控制器/ 完成/ ,/ 从/ 操作系统/ 角度看/ ,/ 属于/ 硬件/ 内部/ 的/ 逻辑/ ./ 2.2/ 时序/ 约束/ 通过/ 前面/ 的/ 描述/ ,/ 可以/ 知道/ ,/ 内存/ 调度/ 通过/ 有效/ 的/ 管理/ Cache/ 和/ 主存/ 的/ 数据/ ,/ 从而/ 提高/ 系统/ 的/ Cache/ 命中率/ ,/ 缩短/ 存储器/ 的/ 访问/ 周期/ ./ 但是/ 目前/ Cache/ 和/ DRAM/ 均/ 受到/ 物理/ 材料/ 的/ 限制/ ,/ 受到/ 综合/ 的/ 时序/ 约束/ ,/ 下面/ 将/ 首先/ 简要/ 介绍/ 一下/ 在/ 内存/ 调度/ 中/ 主要/ 考虑/ 的/ 一些/ 时序/ 约束/ ./ Cache/ 是/ 当前/ 存储体系/ 中/ 访问/ 速率/ 较/ 高/ 的/ 存储芯片/ ,/ 当/ CPU/ 发出/ 读/ 请求/ 时/ ,/ 存储系统/ 首先/ 会/ 根据/ CAM/ (/ ContentAddressableMemory/ )/ 检查/ Cache/ 是否/ 命中/ ,/ 若/ 命中/ 则/ 直接/ 读取/ ,/ 否则/ 将/ 访问/ 请求/ 提交/ 至/ 内存/ 访问/ 队列/ 中/ ./ 主存/ DRAM/ 作为/ 存储系统/ 的/ 重要/ 核心部件/ ,/ 内存/ 调度/ 在/ 执行/ 内存/ 请求/ 时/ 将/ 内存/ 中/ 的/ 数据/ 及时/ 推送/ 到/ 存储器/ 中/ ,/ 为了/ 完成/ 有效/ 的/ 内存/ 调度/ ,/ 内存/ 控制器/ 需要/ 对/ 存储器/ 的/ 时序/ 进行/ 规划/ ,/ 当/ 处理完毕/ 时/ ,/ 及时/ 返回/ 数据/ 给/ CPU/ ,/ 防止/ 等待时间/ 过长/ ./ 2.3/ 多核/ 内存/ 调度/ 算法/ 从前/ 文/ 的/ 介绍/ 可以/ 看出/ ,/ 尽管/ 内存/ 调度/ 不/ 属于/ 操作系统/ 范畴/ ,/ 但是/ 对/ 存储器/ 系统/ 性能/ 有着/ 非常/ 重要/ 的/ 作用/ ./ 和/ 存储系统/ 一样/ ,/ 内存/ 调度/ 同样/ 存在/ 调度/ 目标/ ,/ 其中/ 包括/ 吞吐/ 率/ 、/ 平均/ 等待时间/ 、/ 公平性/ 、/ Cache/ 命中率/ 等/ [/ 10/ -/ 11/ ]/ ,/ 下面/ 将/ 简单/ 地/ 进行/ 介绍/ ./ (/ 1/ )/ 吞吐/ 率/ ./ 在/ 存储系统/ 中/ ,/ 吞吐/ 率/ 是/ 指/ 在/ 一段时间/ 内/ ,/ 系统/ 的/ 单位/ 时间/ 的/ 吞吐量/ ,/ 是/ 一种/ 访问/ 速率/ 的/ 量度/ ,/ 该/ 指标/ 主要/ 从/ CPU/ 的/ 角度/ 进行/ 设计/ ,/ 实际/ 中/ 常常/ 使用/ 每个/ 总线/ 周期/ 指令/ 条数/ (/ InstructionsPerClock/ )/ IPC/ 指标/ 代替/ ./ (/ 2/ )/ 平均/ 等待时间/ ./ 内存/ 请求/ 平均/ 访问/ 的/ 等待时间/ ,/ 该/ 参数/ 较小则/ 表示/ 系统/ 的/ 访问速度/ 较/ 快/ ,/ 同样/ 存储器/ 的/ 访问/ 周期/ 也/ 越/ 小/ ./ (/ 3/ )/ 公平性/ ./ 表示/ 各个/ 内存/ 请求/ 的/ 延迟/ 是否/ 公平/ ,/ 在/ 目前/ 的/ 多/ 核/ 调度/ 中/ ,/ 是/ 考虑/ 的/ 另/ 一个/ 重要/ 因素/ ,/ 主要/ 是/ 防止/ 个别/ 请求/ 过长/ 等待/ ,/ 保证/ 公平性/ 和/ 服务质量/ ./ (/ 4/ )/ Cache/ 命中率/ ./ 通过/ 有效/ 的/ 调度/ 可以/ 提高/ Cache/ 的/ 命中率/ ,/ 提高/ 访问速度/ ,/ 该/ 部分/ 目前/ 逐渐/ 被/ 引入/ 到/ 调度/ 系统/ 中/ ./ 目前/ 的/ 调度/ 算法/ 主要/ 考虑/ 了/ 上述/ 因素/ ,/ 而/ 上述/ 指标/ 同样/ 常常/ 用于/ 测试/ 基准/ 的/ 评价/ 指标/ [/ 12/ ]/ ,/ 下面/ 将/ 分别/ 从/ 上述/ 角度/ 对/ 已有/ 的/ 一些/ 多核/ 调度/ 算法/ 做/ 一些/ 简单/ 的/ 介绍/ ./ 2.3/ ./ 1/ 通用/ 多核/ 调度/ 算法/ 在/ 计算机/ 的/ 调度/ 算法/ 中/ ,/ 经典/ 的/ 调度/ 算法/ 占据/ 着/ 重要/ 地位/ ,/ 其中/ 包括/ 先来/ 先/ 服务/ (/ FCFS/ )/ 、/ 优先级/ 调度/ 算法/ 、/ 最长/ 时间/ 未/ 被/ 访问/ (/ LRU/ )/ 、/ 最小/ 频率/ 访问/ (/ LFU/ )/ 等/ ,/ 其中/ FCFS/ 算法/ 后来/ 衍生/ 了/ 一个系列/ 的/ 算法/ ,/ 具体/ 在/ 第/ 2/ 小节/ 中/ 予以/ 详细/ 介绍/ ./ 而/ 优先级/ 调度/ 算法/ 使用/ 并不多/ ,/ 针对/ 内存/ 请求/ 队列/ ,/ 内存/ 控制器/ 通过/ 识别/ 请求/ 的/ 优先级/ 标签/ ,/ 从而/ 有效/ 地/ 调度/ 内存/ ,/ 为/ 有/ 实时性/ 要求/ 的/ 请求/ 提供/ 服务/ 保障/ ./ 2.3/ ./ 2/ 基于/ FCFS/ 衍生/ 的/ 多/ 核/ 调度/ 算法/ FCFS/ 调度/ 算法/ 实现/ 最为/ 简单/ ,/ 人们/ 在/ 研究/ 多核/ 调度/ 时/ ,/ 同样/ 构造/ 了/ 一些/ 基于/ FCFS/ 的/ 衍生/ 算法/ ,/ 其中/ 包括/ FR/ -/ FCFS/ (/ FirstReady/ ,/ FirstComeFirstPage3Service/ )/ 、/ FR/ -/ VFTF/ (/ FirstReady/ ,/ VirtualFinishTimeFirst/ )/ 等/ ,/ FR/ -/ FCFS/ ,/ 即/ 从/ 请求/ 的/ 就绪/ 队列/ 的/ 队头/ 中/ 获取/ 内存/ 请求/ ,/ 该/ 算法/ 有效/ 地/ 减少/ 了/ 内存/ 控制器/ 在/ 获得/ 内存/ 请求/ 后/ 的/ 就绪/ 等待时间/ ,/ 但是/ 该/ 算法/ 可能/ 引起/ 部分/ 请求/ 等待/ 过长/ [/ 13/ ]/ ./ FR/ -/ VFTF/ 算法/ 和/ FR/ -/ FCFS/ 存在/ 细微/ 区别/ ,/ 主要/ 是因为/ FR/ -/ VFTF/ 需要/ 估算/ 内存/ 访问/ 请求/ 的/ 虚拟/ 结束/ 时间/ ,/ 优先/ 执行/ 就绪/ 队列/ 中/ 最早/ 结束/ 的/ 访问/ 请求/ ./ 2.3/ ./ 3/ 基于/ 替换/ 策略/ 系列/ 调度/ 算法/ 在/ 前面/ 的/ 内存/ 存储/ 体系结构/ 中/ ,/ Cache/ 容量/ 尽管/ 受限/ ,/ 但是/ 对/ 存储系统/ 的/ 性能/ 却/ 有着/ 不可/ 忽略/ 的/ 作用/ ./ 因此/ 很多/ 调度/ 算法/ 重点/ 考虑/ 了/ 私有/ Cache/ 和/ 共享/ Cache/ 的/ 存储/ 情况/ [/ 13/ ]/ ,/ 提高/ Cache/ 的/ 命中率/ ,/ 即/ 对/ 一些/ 进入/ Cache/ 的/ 数据/ 行/ 优先/ 考虑/ ,/ 具体/ 的/ 现行/ 基于/ 替换/ 策略/ 的/ 算法/ 主要/ 有/ 按/ 顺序/ 、/ 优先级/ 、/ 行/ 打开/ 、/ 行/ 关闭/ 、/ 最/ 多/ 等待/ 、/ 最少/ 等待/ 等/ [/ 14/ -/ 15/ ]/ ./ 2.3/ ./ 4/ 基于/ FQ/ 系列/ 调度/ 算法/ 在/ 前面/ 的/ 多/ 核/ 调度/ 算法/ 中/ ,/ 都/ 较为/ 关注/ 系统/ 的/ 吞吐/ 率/ ,/ 但是/ 对系统/ 的/ 线程/ 级别/ 的/ 延迟/ 并未/ 量化/ ,/ 调度/ 算法/ 中/ 还/ 出现/ 了/ 一部分/ 以/ 公平/ 策略/ 为/ 核心/ 的/ 调度/ 算法/ [/ 16/ -/ 17/ ]/ ,/ 其中/ 主要/ 体现/ 在/ 各个/ 请求/ 的/ 延迟/ 均等/ 或/ 各个/ 线程/ 访问/ 延迟/ 一致/ ,/ 当然/ 该类/ 算法/ 对系统/ 的/ 性能/ 也/ 有/ 一定/ 影响/ ,/ 一般/ 体现/ 在/ 系统/ 的/ 吞吐/ 率/ 有所/ 下降/ ,/ 不同/ 算法/ 在/ 性能/ 和/ 公平性/ 上/ 侧重点/ 略微/ 不同/ ./ FQ/ (/ FairQueue/ )/ 算法/ 以/ FQ/ -/ VFTF/ [/ 13/ ]/ (/ FairQueue/ ,/ VirtualFinishTimeFirst/ )/ 最为/ 典型/ ,/ 即/ 从/ 就绪/ 队列/ 的/ 头部/ 选择/ 最早/ 完成/ 的/ 请求/ 执行/ 调度/ ./ 需要/ 注意/ 的/ 是/ ,/ 该/ 算法/ 的/ 最早/ 完成/ 时间/ 使用/ 虚拟/ 完成/ 时间/ 进行/ 估算/ ,/ 各个/ CPU/ 等/ 比例/ 使用/ 内存/ ./ 在/ 调度/ 的/ 过程/ 中/ ,/ 尽量/ 使/ 各个/ CPU/ 发出/ 的/ 各个/ 请求/ 延迟/ 在/ 统计/ 意义/ 上/ 均等/ ,/ 同时/ 始终/ 保证/ 在/ 任何时刻/ ,/ 各个/ CPU/ 得到/ 的/ 服务/ 仅/ 和/ 当前/ 的/ 请求/ 现状/ 有关/ ,/ 而/ 和/ 历史/ 上/ 的/ 请求/ 没有/ 关系/ ./ 3/ 多核/ 调度/ 模型/ 实际/ 中/ ,/ 在/ 很多/ 情况/ 下/ ,/ 调度/ 算法/ 需要/ 为/ 应用程序/ 提供/ 较/ 高/ 的/ 吞吐/ 率/ ,/ 但是/ 还/ 需要/ 保证/ 提供/ QoS/ (/ QualityofService/ )/ ./ 在/ 网络/ 中/ ,/ 曾经/ 有/ FairQueue/ 的/ 概念/ ,/ 在/ 多/ 核/ 内存/ 调度/ 领域/ 中/ ,/ 尽管/ 引入/ 了/ 该/ 思想/ ,/ 但是/ 算法/ 大都/ 基于/ 请求/ 来/ 考虑/ ./ 另外/ ,/ 目前/ 的/ 多/ 核/ 调度/ 算法/ 的/ 研究/ 大都/ 从/ 传统/ 算法/ 进行/ 构造/ ,/ 然后/ 使用/ 模拟器/ 反复/ 验证/ ./ 实际上/ ,/ 作为/ 一个多/ 核/ 调度/ 问题/ ,/ 完全/ 可以/ 将/ 其/ 抽象/ 成/ 一个/ 具体/ 的/ 数学模型/ ,/ 从而/ 通过/ 使用/ 数学模型/ 的/ 求解/ 方法/ 直接/ 求解/ 出/ 高效/ 的/ 多/ 核/ 调度/ 算法/ ./ 3.1/ 模型/ 假设/ 由于/ 实际/ 中/ 内存/ 时序/ 相对/ 较为/ 复杂/ ,/ 不利于/ 进行/ 实际/ 中/ 的/ 抽象/ 建模/ 并/ 分析/ ,/ 因此/ 在/ 本次/ 研究/ 中/ ,/ 以/ 简化/ 的/ DDR2/ 时序/ 为/ 背景/ 做出/ 一定/ 的/ 模型/ 假设/ 来/ 进行/ 理论/ 建模/ 分析/ ,/ 鉴于/ 研究/ 需要/ ,/ 参考文献/ [/ 13/ ]/ 对模型/ 先/ 做出/ 如下/ 假设/ :/ (/ 1/ )/ 内存/ 的/ 物理/ 结构/ 和/ 上/ 文中/ 描述/ 的/ 一致/ ,/ 即/ 主要/ 包括/ Channel/ 、/ Rank/ 、/ Bank/ 、/ Row/ 、/ Col/ ,/ 并且/ 允许/ 在/ Bank/ 上/ 进行/ 并行/ 调度/ ,/ 其中/ Bank/ 和/ Channel/ 调度/ 器/ 的/ 调度/ 算法/ 可以/ 不/ 一致/ ./ (/ 2/ )/ 同一个/ 进程/ 或/ 线程/ 的/ 请求/ 需要/ 按序/ 完成/ ,/ 即/ 一个/ 线程/ 的/ 第/ k/ 个/ 内存/ 访问/ 请求/ 必须/ 建立/ 在/ 第/ k/ -/ 1/ 个/ 请求/ 已经/ 完成/ 的/ 基础/ 上/ ,/ 该/ 假设/ 主要/ 是/ 为了/ 保证/ CPU/ 执行/ 指令/ 的/ 线程/ 级/ 有序性/ ./ (/ 3/ )/ 内存/ 控制器/ 可以/ 通过/ 请求/ 直接/ 获得/ 该/ 请求/ 对应/ 的/ CPU/ 、/ 线程/ 、/ 请求/ 发起/ 时间/ 、/ 优先级/ 等/ ,/ 在/ 后/ 文中/ 也/ 称为/ 贴标签/ ./ (/ 4/ )/ 内存/ 访问/ 请求/ 有序/ 进入/ 内存/ 请求/ 的/ 队列/ ,/ 内存/ 控制器/ 可以/ 自由/ 地/ 执行/ 队列/ 中/ 的/ 任意/ 请求/ ,/ 同时/ 执行/ 完毕/ 时/ 将/ 数据/ 返回/ 到/ Cache/ ,/ 然后/ 通知/ CPU/ 访问/ 该/ 数据/ ./ (/ 5/ )/ 内存/ 调度/ 关注/ 的/ 是/ 目前/ 通用/ 的/ 调度/ 场景/ 下/ 的/ 情形/ ,/ 忽略/ 了/ 各种/ 特殊/ 应用/ 场景/ 下/ 的/ 其它/ 时序/ 和/ 延迟/ 要求/ ./ 例如/ 在/ 一些/ 嵌入式/ 系统/ 中/ ,/ 对/ 实时性/ 要求/ 相对/ 较/ 高/ ,/ 而/ 对/ 吞吐/ 率/ 却/ 并/ 不/ 严格/ ,/ 此种/ 情况/ 未/ 予以考虑/ ./ 3.2/ 符号/ 约定/ 为了/ 后面/ 描述/ 模型/ 的/ 方便/ ,/ 需要/ 对/ Bank/ 、/ Chan/ -/ nel/ 等/ 时间/ 进行/ 符号化/ 约定/ ,/ 因此/ 对/ 访问/ 的/ 队列/ 也/ 进行/ 符号化/ 约定/ ,/ 此外/ 还/ 对/ 描述/ 模型/ 所/ 需/ 的/ 符号/ 进行/ 了/ 初步/ 约定/ ,/ 具体/ 如表/ 1/ 所示/ ./ 符号/ NcpuCPU/ 个数/ Nthread/ 线程/ 个数/ Nirequest/ 线程/ i/ 的/ 请求/ 个数/ i/ 第/ i/ 个/ Channel/ 对应/ 的/ Bank/ 数目/ NbankNchannel/ 内存/ 系统/ 的/ Channel/ 数目/ i/ 第/ i/ 个/ 线程/ 的/ 第/ k/ 个/ 内存/ 请求/ mki/ 第/ mkaki/ 第/ mkLktRCD/ 内存/ 的/ 行/ 寻址/ 到列/ 寻址/ 延迟时间/ tRP/ 内存/ 行/ 地址/ 控制器/ 预充电/ 时间/ tRFC/ 内存/ 的/ 行/ 刷新周期/ 时间/ tRAS/ 一个/ 行/ 地址/ 从/ 激活/ 到/ 复位/ 的/ 时间/ Page4/ 符号/ Bjl/ ./ Lki/ 第/ mkBjl/ ./ SkiBjl/ ./ Fkii/ 第/ mkCl/ ./ Lki/ 第/ mkCl/ ./ Ski/ 第/ mkCl/ ./ FktCLtWLtWR3/ ./ 3/ 多核/ 调度/ 优化/ 模型/ 根据/ 前面/ 的/ 介绍/ ,/ 目前/ 的/ 主流/ 算法/ 大都/ 关注/ 了/ 吞吐/ 率/ 和/ 公平性/ ,/ 实际/ 中/ 这/ 两个/ 评价/ 指标/ 也/ 足以/ 概括/ 当前/ 的/ 主流/ 调度/ 算法/ ./ 表/ 2/ 对模型/ 使用/ 的/ 符号/ 做/ 了/ 进一步/ 的/ 补充/ 说明/ ./ 符号/ λ/ 1/ 吞吐/ 率/ 的/ 加权/ 系数/ λ/ 2/ 公平性/ 的/ 加权/ 系数/ F/ 公平性/ ,/ 其中/ 该值/ 越大越/ 好/ T/ 吞吐/ 率/ ,/ 其中/ 该值/ 越大越/ 好/ Wtotal/ ./ mkWready/ ./ mkWqueue/ ./ mkWbank/ ./ mkWchannel/ ./ mki/ 第/ mkl/ ./ mkSj/ 使用/ 层次/ 分析法/ 的/ 建模/ 方法/ ,/ 得到/ 最优化/ 模型/ ,/ 模型/ 以/ 吞吐/ 率/ 和/ 公平性/ 为/ 目标/ 函数/ ,/ 满足/ 内存/ 访问/ 和/ 调度/ 的/ 一些/ 时序/ 约束/ ./ 综合/ 上文/ 描述/ ,/ 具体/ 模型/ 如下/ 所示/ :/ s/ ./ t/ ./ F/ =/ minT/ =/ ∑/ Nthread/ ,/ NiLki/ =/ Bj3/ ./ 4/ 模型/ 验证/ 及其/ 说明/ 首先/ 对/ 上述/ 模型/ 的/ 合理性/ 进行/ 解释/ 说明/ ,/ F/ 和/ T/ 分别/ 概括/ 了/ 多/ 核/ 内存/ 调度/ 算法/ 的/ 公平性/ 指标/ 和/ 吞吐/ 率/ 指标/ ./ 在/ 此处/ ,/ 吞吐/ 率/ 使用/ 了/ 在/ 一个/ 周期/ 内/ 完成/ 的/ 有效/ 的/ 访问/ 时间/ 数/ 和/ 总/ 的/ 请求/ 访问/ 时间/ 总数/ 之比/ ./ 为了/ 使/ 上述/ 目标/ 加权/ 平均值/ 最大化/ ,/ 调度/ 算法/ 一方面/ 需要/ 尽量/ 提高/ 内存/ 请求/ 的/ 访问/ 速率/ ,/ 保证/ 吞吐/ 率/ ;/ 另一方面/ 控制/ 来自/ 不同/ 处理器/ 的/ 访问/ 请求/ 的/ 等待时间/ 应当/ 尽量/ 均匀/ ,/ 从而/ 保证/ 公平性/ ./ 模型/ 对/ 内存/ 访问/ 的/ 细微/ 时序/ 没有/ 直接/ 给出/ 约束/ 的/ 表达式/ ,/ 这/ 是因为/ 内部/ 实现/ 对于/ 不同/ 的/ 物理/ 结构/ 可能/ 不/ 一致/ ,/ 实际/ 中/ 主要/ 包括/ 访问/ 的/ Bank/ 的/ 行/ 是否/ 命中/ 时/ 需要/ 的/ 等待时间/ 、/ 行/ 刷新/ 时间/ 、/ 行/ 充电/ 、/ 激活/ 时间/ 等/ ,/ 不同/ 硬件/ 存在/ 不同/ 约束/ ,/ 因而/ 没有/ 直接/ 给出/ 明确/ 的/ 约束条件/ ,/ 另外/ 在/ 等待时间/ 上/ 被/ 细/ 分成/ 了/ 就绪/ 前/ 等待时间/ 、/ 队列/ 中/ 等待/ 进入/ Bank/ 队列/ 的/ 时间/ 、/ Bank/ 中/ 等待时间/ 、/ Channel/ 中/ 等待时间/ 等/ ,/ 因此/ 方程/ (/ 6/ )/ 、/ (/ 9/ )/ 分别/ 给出/ 了/ Bank/ 、/ Channel/ 对/ 请求/ 的/ 服务/ 开始/ 和/ 结束/ 时间/ 约束/ ./ 3.4/ ./ 1/ 参数设置/ 3.4/ ./ 1.1/ 模型/ 加权/ 系数/ 从/ 前面/ 的/ 模型/ 中/ 可以/ 看出/ ,/ 模型/ 的/ 目标/ 函数/ 中/ 包括/ 公平性/ 和/ 吞吐/ 率/ 两个/ 指标/ ,/ 在/ 公平性/ 和/ 吞吐/ 率/ 两个/ 指标/ 的/ 计算/ 上/ 可以/ 看出/ 两者/ 模式/ 基本一致/ ,/ 并且/ 已经/ 包括/ 了/ 归一化/ 过程/ ./ 现/ 对模型/ 的/ 加权/ 系数/ λ/ 1/ 和/ λ/ 2/ 增加/ 一致性/ 约束条件/ ,/ 即/ 对于/ 不同/ 的/ 应用/ 场景/ ,/ 用户/ 可以/ 通过/ 配置/ 不同/ 的/ λ/ 1/ 、/ λ/ 2/ 来/ 表明/ 对/ 不同/ 策略/ 的/ 侧重/ 性/ ./ 当/ λ/ 1/ =/ 1/ 时/ ,/ 表示/ 系统/ 唯独/ 关心/ 各个/ 请求/ 的/ 公平性/ ,/ 即/ 模型/ 的/ 结果/ 会/ 尽量/ 使/ 各个/ 请求/ 的/ 等待时间/ 相对/ 访问/ 时间/ 均等/ ;/ 同理/ ,/ 当/ λ/ 2/ =/ 1/ 时/ ,/ 系统/ 仅/ 关心/ 系统/ 的/ 吞吐/ 率/ ,/ 此时/ 系统/ 会/ 尽量减少/ 将/ 被/ 执行/ 的/ 请求/ 的/ 等待时间/ ,/ 如/ 优先/ 发/ 长度/ 较长/ 或/ 访问/ 频率/ 较/ 高/ 的/ 请求/ 等/ ,/ 而/ 实际/ 中/ ,/ 如果/ 对此/ 没有/ 过多/ 的/ 侧重/ ,/ 可以/ 将/ λ/ 1/ 、/ λ/ 2/ 设置/ 相当/ 即可/ ,/ 否则/ 按照/ 具体/ 需要/ 实际/ 配置/ 即可/ ./ Page53/ ./ 4.1/ ./ 2/ 模型/ 度量/ 周期/ 在/ 模型/ 中/ ,/ 细化/ 思考/ 即可/ 知道/ ,/ 调度/ 可能/ 发生/ 在/ 任意/ 时刻/ ,/ 而/ 上述/ 模型/ 的/ 计算/ 需要/ 一定/ 的/ 参考/ 周期/ ,/ 即/ 考虑/ 一个多/ 大/ 范围/ 内/ 的/ 内存/ 访问/ 请求/ 的/ 公平性/ 和/ 系统/ 吞吐/ 率/ ./ 总体/ 上/ 说/ ,/ 调度/ 周期/ 主要/ 为/ :/ 调度/ 的/ 实际/ 队列/ 、/ 一个/ 测试/ 周期/ T/ 、/ 从/ 开机/ 至/ 调度/ 时刻/ ,/ 其中/ 最后/ 一种/ 方式/ 充分利用/ 了/ 调度/ 的/ 历史/ 消息/ ,/ 同时/ 被/ 评价/ 的/ 请求/ 可以/ 限制/ 是/ 当前/ 尚未/ 运行/ 结束/ 的/ 线程/ 发出/ 的/ 访问/ 请求/ ,/ 从而/ 防止/ 因为/ 过多/ 不/ 相关/ 的/ 历史/ 流量/ 带来/ 的/ 持续/ 影响/ ,/ 本文/ 使用/ 该/ 策略/ ./ 3.4/ ./ 2/ 模型/ 验证/ 调研/ 发现/ ,/ 在/ 目前/ 的/ FCFS/ 、/ FQ/ 系列/ 算法/ 中/ ,/ 均/ 以/ 吞吐/ 率/ 和/ 公平性/ 为/ 指标/ [/ 18/ ]/ ,/ 其中/ 吞吐/ 率/ 在/ 优化/ 中/ 更为/ 常见/ ,/ 本文/ 中/ 的/ 模型/ 通过/ 最小化/ 评测/ 周期/ 内/ 各/ 请求/ 中/ 最大/ 的/ 等待时间/ 所/ 占/ 比例/ ,/ 来/ 保证/ 各个/ 请求/ 的/ 等待时间/ 尽量/ 均等/ ./ 同时/ ,/ 通过/ 计算/ 各个/ 线程/ 完成/ 的/ 传送/ 量/ 和/ 需求量/ 之比来/ 表示/ 评测/ 周期/ 内/ 系统/ 的/ 吞吐/ 率/ ,/ 通过/ 将/ 其/ 最大化/ ,/ 有效/ 地/ 提高/ 系统/ 的/ 吞吐/ 率/ ./ 因此/ ,/ 模型/ 的/ 优化/ 目标/ 概括/ 了/ 调度/ 算法/ 的/ 主要/ 性能指标/ ./ 该/ 模型/ 有效/ 地/ 将/ 计算机/ 内存/ 调度/ 问题/ 抽象/ 为/ 一个/ 数学/ 建模/ 问题/ ,/ 从而/ 将/ 对/ 调度/ 算法/ 的/ 研究/ 转化/ 为/ 求解/ 模型/ ,/ 此时/ 用于/ 求解/ 模型/ 的/ 一些/ 方法/ 均/ 可以/ 借鉴/ 到/ 该/ 数学模型/ 中/ ,/ 其中/ 包括/ 求解/ 复杂/ 模型/ 的/ 启发式/ 算法/ ./ 也/ 可以/ 通过/ 计算机/ 模拟/ 的/ 方法/ 求解/ 本/ 模型/ ,/ 当然/ 具体/ 的/ 构造方法/ 依赖于/ 具体/ 问题/ ./ 下/ 一节/ 中/ ,/ 将/ 对模型/ 进行/ 求解/ ./ 3.5/ 模型/ 改进/ 在/ 此/ 模型/ 中/ ,/ 对/ 预取/ 没有/ 详细/ 的/ 说明/ 和/ 约束/ ./ 实际/ 中/ ,/ 合理/ 地/ 使用/ 预取/ 甚至/ 分段/ 技术/ [/ 19/ -/ 20/ ]/ 能够/ 极大/ 提高/ 多核/ 性能/ ,/ 同时/ 也/ 可以/ 有效/ 地/ 减少/ 访问/ 的/ 延迟/ ./ 另外/ ,/ 硬件/ 的/ Cache/ 架构/ 、/ 容量/ 也/ 会/ 对/ 内存/ 系统/ 性能/ 产生/ 较大/ 影响/ [/ 21/ ]/ ./ 在/ 本文/ 的/ 研究/ 中/ ,/ 我们/ 在/ 同等条件/ 下/ 进行/ 比较/ ,/ 忽略/ 了/ 硬件/ 带来/ 的/ 影响/ ./ 在/ 本/ 模型/ 中/ ,/ 主要/ 是/ 在/ 请求/ 和/ 线程/ 的/ 角度/ 进行/ 优化/ ./ 实际上/ ,/ 在/ 必要/ 的/ 场合/ ,/ 我们/ 更/ 期待/ CPU/ 的/ 利用率/ 更高/ ,/ 因此/ 从/ CPU/ 的/ 角度/ 进行/ 量化/ 和/ 评价/ 将/ 产生/ 更好/ 的/ 结果/ ./ 调度/ 的/ 复杂性/ 也/ 在/ 一定/ 程度/ 上/ 得到/ 减弱/ ./ 另外/ ,/ 当前/ 的/ 模型/ 没有/ 考虑/ 优先级/ 和/ 实时性/ 等/ 问题/ ,/ 因此/ 改进/ 空间/ 仍旧/ 非常/ 大/ ./ 4/ 模型/ 求解/ 与/ 验证/ 4.1/ 算法/ 提出/ 从/ 第/ 3/ 节中/ 介绍/ 的/ 模型/ 可以/ 知道/ ,/ 为了/ 获得/ 模型/ 的/ 较优/ 解/ ,/ 在/ 减少/ 每个/ 请求/ 的/ 访问/ 时间/ 的/ 同时/ 需要/ 关注/ 各个/ 请求/ 、/ CPU/ 、/ 线程/ 的/ 平均/ 延迟/ 情况/ ,/ 这/ 是因为/ 请求/ 的/ 延迟/ 相差/ 较大/ 将/ 影响/ 调度/ 的/ 公平性/ ./ 4.2/ 内存/ 控制器/ 在/ 对/ 内存/ 控制器/ 结构/ 进行/ 阐述/ 之前/ ,/ 首先/ 简要/ 描述/ 一下/ 内存/ 控制器/ 的/ 作用/ ,/ 从前/ 文/ 描述/ 可以/ 知道/ ,/ 内存/ 控制器/ 主要/ 完成/ 的/ 是/ 维护/ 内存/ 请求/ 队列/ ,/ 同时/ 从/ 队列/ 中/ 选择/ 合适/ 的/ 请求/ 交由/ 下层/ 硬件/ 执行/ ,/ 因此/ 控制器/ 的/ 一个/ 重要/ 功能/ 即/ 为/ 调度/ 和/ 决策/ ./ 为了/ 完成/ 该项/ 任务/ ,/ 内存/ 控制器/ 需要/ 一定/ 的/ 存储空间/ 来/ 缓存/ 上层/ 的/ 内存/ 访问/ 请求/ ./ 另外/ ,/ 在/ 前文/ 介绍/ 的/ 内存/ 体系结构/ 中/ ,/ 已经/ 说明/ 了/ 内存/ 的/ Row/ 、/ Bank/ 、/ Rank/ 、/ Channel/ 内部/ 层次/ 关系/ ,/ 因此/ 内存/ 控制器/ 同样/ 需要/ 完成/ Row/ 、/ Bank/ 、/ Rank/ 、/ Channel/ 级别/ 的/ 调度/ 控制/ ,/ 为了/ 设计/ 简单/ ,/ 在/ 各个/ 调度/ 器中/ 使用/ 的/ 算法/ 均/ 一致/ ./ 从图/ 1/ 可以/ 看出/ ,/ 相比/ 文献/ [/ 13/ ]/ 的/ 内核/ 控制器/ 结构/ ,/ 该/ 内存/ 控制器/ 中/ 存在/ “/ 内存/ 访问/ 请求/ 缓冲/ +/ 综合/ 调度/ ”/ 区/ ,/ 进入/ 该/ 区域/ 的/ 请求/ 已经/ 被/ 贴/ 上/ 了/ 时序/ 、/ CPU/ 、/ 线程/ 的/ 标签/ ./ 在/ 实现/ 时/ ,/ 该/ 区域/ 被/ 循环/ 使用/ ,/ 为了/ 控制/ 方便/ ,/ 使用/ 了/ 链表/ 进行/ 组织/ ./ 该/ 区域/ 的/ 大小/ 对系统/ 的/ 性能/ 存在/ 一定/ 的/ 影响/ ,/ 这/ 是因为/ 如果/ 该/ 区域/ 填/ 充满/ 后/ ,/ CPU/ 将/ 出现/ 空闲/ 等待/ ./ 调度/ 算法/ 的/ 主要/ 工作/ 在于/ 综合/ 调度/ ,/ 然后/ 将要/ 执行/ 的/ 内存/ 访问/ 请求/ 交由/ Bank/ 调度/ 器/ 对应/ 执行/ ,/ Bank/ 执行/ 完毕/ 后/ 由/ Channel/ 完成/ 最终/ 的/ 数据传输/ ,/ 在/ 图/ 中/ 除了/ “/ Cache/ 行/ 缓冲区/ ”/ 上/ 的/ 数据总线/ 外/ ,/ 其余/ 总线/ 均/ 为/ 控制/ 总线/ ./ 此外/ ,/ 在/ 图/ 1/ 中/ 没有/ 明确/ 区分/ 读写/ 请求/ ./ Page6/ 另外/ ,/ 需要/ 注意/ 的/ 是/ ,/ 在/ 内存/ 控制器/ 中/ 也/ 没有/ 详细/ 介绍/ SDRAM/ 数据总线/ 和/ 地址总线/ ,/ 实际上/ 由/ Channel/ 调度/ 控制器/ 管理/ 的/ 地址总线/ 还/ 需注意/ 时序/ 问题/ ./ 在/ 图/ 1/ 中/ ,/ 可以/ 看出/ ,/ 和/ 处理器/ 的/ 数据/ 交互/ 均/ 通过/ Cache/ 的/ 行/ 缓冲区/ 来/ 完成/ ./ 4.3/ 算法/ 描述/ 根据/ 前面/ 的/ 模型/ 介绍/ ,/ 利用/ 启发式/ 算法/ ,/ 同时/ 参考/ 现有/ 的/ 一些/ 算法/ ,/ 通过/ 综合/ 考虑/ 优先级/ 等/ 因素/ ,/ 利用/ 模型/ 可以/ 构造/ 出/ 如下/ 算法/ 1/ ./ 算法/ 1/ ./ FQ/ -/ SJF/ ./ 1/ ./ 若/ 存在/ 优先级/ 不/ 等/ 的/ 请求/ ,/ 则/ 选择/ 优先级/ 最高/ 的/ 请求/ ;/ 否则/ 转步/ 2/ ;/ 2/ ./ 在/ 定义/ 公平性/ 指标/ 下/ ,/ 找到/ 最/ 不/ 公平/ 的/ 访问/ 请求/ ,/ 若/ 其/ 指标/ 在/ 容忍/ 区间/ 内则/ 转步/ 3/ ;/ 否则/ 执行/ 该/ 次访问/ ;/ 3/ ./ 从/ 队列/ 头部/ 找到/ 数据/ 已经/ 在/ Cache/ 的/ 行/ 缓冲区/ 的/ 请求/ ,/ 执行/ 该/ 请求/ ;/ 否则/ 转入/ 步/ 4/ ;/ 4/ ./ 从/ 队列/ 中/ 选取/ 一个/ 所/ 需/ 执行/ 时间/ 最短/ 请求/ ./ 对于/ 调度/ 算法/ ,/ 若行/ 缓冲区/ 较大/ ,/ 则/ 还/ 存在/ 较为/ 关键/ 的/ 一项/ 决策/ ,/ 即/ 替换/ 问题/ ,/ 需要/ 选择/ 一行/ 用于/ 新/ 的/ 内存/ 请求/ 换入/ ./ 从/ 以前/ 的/ 研究/ 情况/ 来看/ ,/ LRU/ 算法/ 在/ 换/ 出/ 方面/ 具有/ 较/ 好/ 的/ 性能/ ,/ 因此/ 在/ 本/ 算法/ 中/ ,/ 选取/ 替换/ 最长/ 时间/ 未/ 被/ 使用/ 的/ 行/ ./ 4.4/ 仿真/ 测试/ 使用/ M5/ 模拟器/ 对/ 该/ 内存/ 调度/ 系统/ 进行/ 测试/ ,/ 其中/ 开发/ 测试/ 的/ 环境/ 架构/ 主要/ 为/ :/ 在/ WindowsXP/ 上/ 运行/ VMware7/ ./ 0/ 虚拟机/ ,/ 然后/ 在/ VM/ 中/ 运行/ ubuntu/ ,/ 进而/ 在/ ubuntu/ 中/ 运行/ M5/ 模拟器/ 并/ 采集/ Trace/ ./ 模拟器/ 的/ 参数/ 和/ 真机/ 环境/ 具体/ 介绍/ 如表/ 3/ 所示/ ./ 属性/ CPU/ 主频/ 内存/ // 外存/ 缓存/ 系统/ 真机/ 参数/ 单核/ 2GHz2GB/ // 250GB4MBXP5/ ./ 1.2600/ 虚拟机/ VM/ 参数/ 2GHz512MB/ // 20GB/ 缺省/ VM7/ ./ 0M5/ 参数/ 4/ 核/ 2GHz128MB/ // 无/ 限制/ 缺省/ M5/ ./ opt2/ ./ 0/ 整体/ 上/ 使用/ M5/ 模拟器/ ,/ 但是/ 实际/ 中/ ,/ 为了/ 保证/ 测试/ 的/ 数据/ Trace/ 始终/ 一致/ ,/ 在/ 初次/ 测试/ 的/ 同时/ ,/ 将/ 请求/ 队列/ 中/ 的/ Trace/ 保存/ 下来/ ,/ 测试/ 其它/ 算法/ 时/ 直接/ 使用/ Trace/ 作为/ 调度/ 对象/ ,/ 然后/ 计算/ 出/ 性能/ 评价/ 所/ 需/ 的/ 关键/ 结果/ 等/ ./ 其中/ 上层/ 运行/ 的/ 基准/ 应用/ 为/ SPEC2000/ ,/ 通过/ 该/ 方案/ ,/ 有效/ 提高/ 了/ 测试/ 的/ 速率/ ,/ 同时/ 保证/ 了/ 各个/ 算法/ 测试/ 的/ 数据/ 的/ 一致性/ ./ 下面/ 对/ 单一/ 应用/ 的/ Trace/ 进行/ 简单/ 的/ 分析/ ,/ 并且/ 针对/ 各/ 算法/ 进行/ 一个/ 初步/ 的/ 比较/ 和/ 运算/ ,/ 在/ 本次/ 测试/ 中/ ,/ 采集/ 和/ 测试/ 的/ Trace/ 主要/ 包括/ 如下/ 几个/ :/ gcc/ 、/ mcf/ 、/ sphinx/ 、/ astar/ 、/ bzip2/ 、/ crafty/ 、/ gap/ 、/ gzip/ 、/ h264ref/ 、/ soplex/ 、/ vortex/ 、/ vpr/ 等/ ,/ 首先/ 选择/ gcc/ 应用/ 作为/ 研究/ 对象/ 进行/ 简要/ 的/ Trace/ 分析/ ./ 首先/ 查看/ Trace/ 的/ 抵达/ 时刻/ 和/ 次序/ 关系/ ,/ 前/ 300000/ 个/ 访问/ 请求/ 的/ 抵达/ 时刻/ 分析/ 图如图/ 2/ 所示/ ,/ 从图/ 中/ 可以/ 看出/ ,/ 该/ 应用/ 的/ Trace/ 到达/ 时刻/ 较为/ 均匀/ ,/ 并且/ 和/ 次序/ 呈/ 线性关系/ ,/ 由于/ 数据/ 较/ 多/ ,/ 放大/ 前/ 30000/ 个/ Trace/ 分析/ ,/ 其/ 次序/ 如图/ 3/ 所示/ ,/ 从图/ 中/ 可以/ 看出/ Trace/ 仍旧/ 具有/ 较/ 好/ 的/ 线性/ 时序/ 关系/ ./ 需要/ 指出/ 的/ 是/ ,/ 该/ Trace/ 没有/ 区分/ 指令和数据/ Trace/ ,/ 而是/ 混合/ 在/ 一起/ 进行/ 测试/ ./ 其中/ 读/ 请求/ 共/ 268840/ 个/ ,/ 写/ 请求/ 31160/ 个/ ./ 下面/ 将/ 分别/ 介绍/ FR/ -/ FCFS/ 和/ FQ/ -/ SJF/ 算法/ 的/ 运行/ 结果/ ,/ 由/ 前面/ 的/ Trace/ 分析/ 结果/ 可以/ 看出/ ,/ 整个/ 过程/ 中/ 内存/ 请求/ 间隔/ 较为/ 均匀/ ,/ 因此/ 下文/ 主要/ 针对/ 前/ 30000/ 个/ 访问/ 请求/ 的/ Trace/ 进行/ 调度/ 模拟/ 分析/ ./ 评测/ 指标/ 选用/ 平均/ 访问/ 延迟/ ,/ 并/ 选取/ FR/ -/ FCFS/ 的/ 前/ 30000/ 个/ 访问/ 请求/ 的/ 平均/ 访问/ 延迟/ 作为/ 归一化/ 的/ 参考值/ ,/ 针对/ 每/ 相邻/ 的/ 100/ 个/ 请求/ 取/ 平均/ 访问/ 延迟/ ,/ 归一化/ 后/ 绘制/ 平均/ 访问/ 延迟/ 图例/ ./ Page7/ 在/ 图/ 4/ 中/ 描述/ 了/ 负载/ 较/ 小时/ ,/ 两种/ 调度/ 算法/ 对/ gcc/ 的/ 内存/ 访问/ 请求/ 的/ 处理/ 延迟/ 大体一致/ ,/ 表明/ 算法/ 在/ 轻/ 负载/ 时/ 表现/ 较优/ ./ 而/ 随着/ 负载/ 增加/ ,/ 在/ 图/ 5/ 、/ 图/ 6/ 中/ 可以/ 看出/ 较/ 重/ 负载/ 时/ ,/ FQ/ -/ SJF/ 算法/ 的/ 读取/ 延迟/ 均/ 要/ 比/ FR/ -/ FCFS/ 小/ ,/ 性能/ 上/ 提高/ 了/ 接近/ 10/ %/ ,/ 并且/ 随着/ 负载/ 增加/ ,/ 提升/ 空间/ 越大/ ./ 当然/ ,/ 随着/ 负载/ 的/ 增加/ ,/ 会/ 受到/ 总线/ 等/ 限制/ ,/ 访问/ 延迟/ 也/ 会/ 极大/ 增加/ ./ 图/ 4gcc/ 基准/ FR/ -/ FCFS/ 和/ FQ/ -/ SJF/ 平均/ 读取/ 延迟/ 图/ 5vortex/ 基准/ FR/ -/ FCFS/ 和/ FQ/ -/ SJF/ 平均/ 读取/ 延迟/ 图/ 6gap/ 基准/ FR/ -/ FCFS/ 和/ FQ/ -/ SJF/ 平均/ 读取/ 延迟/ 图/ 7gzip/ 和/ vpr/ 混合/ 内存/ 访问/ 平均/ 读取/ 延迟/ 图/ 7/ 展示/ 了/ 在/ 多个/ 测试/ 基准/ 混合/ 运行/ 时/ 的/ 平均/ 读取/ 延迟/ 分析/ 图/ ./ 从图/ 中/ 可以/ 看出/ ,/ 测试/ 结果/ 表现/ 较优/ ,/ 性能/ 得到/ 提升/ ./ 一些/ 其它/ 基准/ 的/ 测试/ 结果/ 如表/ 4/ 所示/ ,/ FQ/ -/ SJF/ 相对/ FR/ -/ FCFS/ 的/ 平均/ 读取/ 延迟/ 同样/ 减小/ 了/ 许多/ ,/ 单个/ soplex/ 基准/ 平均/ 访问/ 延迟/ 减小/ 了/ 10.6/ %/ ,/ 在/ 多个/ 基准/ 的/ 同等/ 混合/ 性能/ 测试/ 中/ ,/ 延迟/ 减小/ 了/ 6.1/ %/ ./ 测试/ 基准/ 加速/ 比/ 减少/ 延迟/ // %/ 测试/ 基准/ 加速/ 比/ 减少/ 延迟/ // %/ vortex1/ ./ 0524.9/ astar1/ ./ 1019.2/ soplex1/ ./ 11810.6/ gcc1/ ./ 0000h264ref1/ ./ 1029.3/ bzip21/ ./ 17614.9/ gap1/ ./ 0646.0/ gzip/ ,/ vpr1/ ./ 0656.14/ ./ 5/ 算法/ 改进/ 算法/ 上/ ,/ FQ/ -/ SJF/ 仅为/ 模型/ 的/ 一个/ 普通/ 解/ ,/ 通过/ 进一步/ 求解/ ,/ 将/ 可以/ 获得/ 性能/ 更佳/ 的/ 调度/ 算法/ ,/ 从/ Trace/ 分析/ 来看/ ,/ 到达/ 时刻/ 和/ 次序/ 基本/ 呈现/ 线性关系/ ,/ 另外/ ,/ 在/ 负载/ 较/ 高时/ ,/ FQ/ -/ SJF/ 性能/ 会/ 降低/ ,/ 同时/ 调度/ 开销/ 相对/ 较大/ ,/ 因此/ 此处/ 可以/ 通过/ 改进/ FQ/ -/ SJF/ ,/ 使得/ 在/ 必要/ 时/ 将/ FQ/ -/ SJF/ 退化/ 为/ FR/ -/ FCFS/ 算法/ ,/ 此时/ 内存/ 控制器/ 的/ 调度/ 开销/ 将/ 大为/ 减小/ ./ 在/ 内存/ 控制器/ 一节/ 已经/ 提到/ ,/ 对于/ Bank/ 和/ Channel/ 的/ 调度/ 直接/ 和/ 核心/ 调度/ 算法/ 一致/ ./ 实际上/ ,/ 在/ Bank/ 级别/ 和/ Channel/ 级别/ 可以/ 做出/ 一些/ 改进/ ,/ 也/ 可以/ 引入/ 对/ Cache/ 行/ 的/ 刷新/ 和/ 替换/ 控制/ ,/ 从而/ 加速/ 特定/ 的/ 基准/ 应用/ ./ 另外/ ,/ 部分/ 系统/ 可能/ 对/ 实时性/ 存在/ 要求/ ,/ 此时/ 算法/ 需要/ 综合/ 权衡/ 各大/ 指标/ ,/ 并/ 将/ 优先级/ 高/ 的/ 请求/ 优先/ 调度/ ./ 需要/ 特别/ 指出/ 的/ 是/ ,/ 复杂/ 的/ 调度/ 算法/ 常常/ 伴随/ 着/ 增加/ 了/ 内核/ 控制器/ 内部/ 实现/ 该/ 算法/ 的/ 复杂性/ ./ Page85/ 结论/ 本文/ 提出/ 了/ 一个多/ 核间/ 内存/ 调度/ 模型/ ,/ 该/ 模型/ 将/ 多/ 核/ 调度/ 的/ 实际/ 问题/ 直接/ 转化/ 为/ 一个/ 数学模型/ 中/ 的/ 优化/ 问题/ ,/ 从而/ 在/ 构造/ 算法/ 时/ 可以/ 参照/ 数学模型/ ,/ 求解/ 的/ 方法/ 快速/ 衍生/ 出/ 高效/ 合理/ 的/ 内存/ 调度/ 算法/ ,/ 并/ 对模型/ 进行/ 了/ 初步/ 的/ 求解/ 验证/ ,/ 得到/ 了/ 一个/ 模型/ 解/ ./ 从/ 测试/ 结果/ 上/ 看/ ,/ 相比/ 传统/ 的/ FR/ -/ FCFS/ 算法/ ,/ 系统/ 吞吐/ 率/ 和/ 延迟/ 均/ 有/ 较大/ 改善/ ./ 致谢/ 本文/ 作者/ 得到/ 了/ 清华大学/ 计算机科学/ 与/ 技术/ 系/ 操作系统/ 实验室/ 的/ 老师/ 和/ 同学/ 们/ 的/ 许多/ 帮助/ 和/ 建议/ ,/ 在/ 此/ 表示感谢/ !/ 

