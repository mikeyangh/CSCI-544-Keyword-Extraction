Page1/ 软件/ 定义/ 网络系统/ 中/ 面向/ 流/ 的/ 调度/ 算法/ 宛考/ 罗/ 雪峰/ 江勇/ 徐恪/ (/ 清华大学/ 计算机科学/ 与/ 技术/ 系/ 北京/ 100084/ )/ 摘要/ 软件/ 定义/ 网络/ (/ SoftwareDefinedNetworking/ ,/ SDN/ )/ 由于/ 其/ 控制/ 和/ 转发/ 分离/ 的/ 特性/ ,/ 在/ 学术研究/ 和/ 工程/ 上/ 广泛应用/ 于/ 数据中心/ 等/ 领域/ ./ SDN/ 体系结构/ 中/ 没有/ 规定/ 特定/ 转发/ 机制/ ,/ 而是/ 通过/ 更改/ 控制/ 模块/ 或者/ 开发/ 具体/ 的/ 控制器/ App/ 来/ 实现/ ./ NOX/ 是/ 斯坦福大学/ 在/ 2008/ 年/ 提出/ 的/ 第/ 1/ 种/ OpenFlow/ 控制器/ ,/ 它/ 基于/ OpenFlow/ 协议/ 提出/ 了/ 类似/ 传统/ 路由器/ OSPF/ 协议/ 的/ 最/ 短/ 路径/ 转发/ 算法/ ,/ 即/ NOX/ 路由/ 模块/ (/ NOXroutingmodule/ )/ ./ 该/ 算法/ 通过/ SDN/ 系统控制/ 链路/ 收集/ 全局/ 交换机/ 静态/ 参数/ ,/ 并/ 没有/ 利用/ SDN/ 系统/ 的/ 优势/ 来/ 获得/ 交换机/ 运行/ 时/ 的/ 状态/ 信息/ 来/ 提高/ 转发/ 性能/ ./ 该文/ 根据/ SDN/ 集中控制/ 以及/ 控制器/ 计算能力/ 可/ 扩展/ 等/ 特性/ ,/ 设计/ SDN/ 结点/ 、/ 路径/ 和/ 流/ 的/ 评价/ 体系/ ,/ 将/ 各/ 体系/ 分支/ 的/ 评价/ 指标/ 作为/ 交换机/ 运行/ 时/ 的/ 状态/ 信息/ 参数/ ,/ 在/ 此基础/ 上/ 提出/ 均衡/ 算法/ ./ 该/ Online/ 算法/ 具有/ 自适应性/ 和/ 启发性/ ,/ 有效/ 地/ 提高/ 了/ SDN/ 在/ 转发/ 过程/ 中/ (/ 特别/ 是/ 针对/ 大/ 数据量/ )/ 的/ 运行/ 效率/ ./ 关键词/ 软件/ 定义/ 网络/ ;/ 自/ 适应/ 启发式/ 算法/ ;/ 集中控制/ ;/ 流/ 分析/ ;/ 下一代/ 互联网/ 1/ 引言/ 软件/ 定义/ 网络/ (/ SoftwareDefinedNetworking/ ,/ SDN/ )/ 系统/ 作为/ 信息网络/ 研究/ 的/ 一种/ 实现/ 方式/ ,/ 其/ 控制/ 平面/ 和/ 数据/ 平面/ 分离/ 能够/ 提供/ 信息处理/ 的/ 高度/ 可控/ 、/ 易于/ 实现/ 和/ 部署/ 等/ 特性/ ./ 目前/ SDN/ 系统/ 基本/ 以/ OpenFlow/ [/ 1/ ]/ 为/ 主要/ 协议/ 进行/ 开发/ 和/ 实现/ ,/ 在/ 企业/ 网/ 、/ 数据中心/ 、/ 接入网/ 、/ 网络/ 虚拟/ 智能/ 等/ 应用/ 中有/ 颠覆性/ 的/ 表现/ ./ 开放/ 网络/ 基金会/ (/ OpenNetworkingFoundation/ ,/ ONF/ )/ ①/ 组织/ 成员/ 中/ 的/ 一些/ 大型/ 网络/ 技术/ 公司/ 都/ 推出/ 了/ 自己/ 的/ SDN/ 体系/ 实现/ ,/ 如/ IBM/ -/ SDN/ [/ 2/ ]/ 、/ Nicira/ -/ SDN/ [/ 3/ ]/ 、/ G/ -/ ScaleNetwork/ [/ 4/ ]/ ./ 在/ 学术研究/ 中/ ,/ 基于/ 集中控制/ 的/ 网络流量/ 负载/ 、/ 流/ 传输/ 质量/ 是/ 研究/ 的/ 热点/ ./ SDN/ 最/ 著名/ 的/ 应用/ 场景/ 是/ 提高/ 数据中心/ 之间/ 的/ 链路/ 利用率/ ./ Google/ 的/ B4/ 网络/ 中/ [/ 4/ ]/ ,/ 使用/ SDN/ 调度/ 专用/ 交换机/ 能够/ 使得/ 链路/ 利用率/ 达到/ 95/ %/ 以上/ ,/ Microsoft/ 的/ SWAN/ 控制器/ [/ 5/ ]/ 除了/ 具有/ 高/ 链路/ 利用率/ 外/ ,/ 还/ 能够/ 自动/ 解决/ 拥堵/ 更新/ (/ congestion/ -/ freeupdate/ )/ 问题/ ,/ 并/ 能/ 使用/ 非/ 专用/ 商业/ 交换机/ ./ 以上/ 两种/ SDN/ 构架/ 和/ 方案/ 是/ 基于/ 广义/ 网/ 和/ 数据中心/ 之间/ 的/ ,/ 调度/ 的/ 数据/ 流量/ 需求/ 预先/ 已知/ ,/ 不能/ 很/ 好/ 应对/ 非/ 预知/ 数据/ ,/ 同时/ 方案/ 在/ 小规模/ 数据中心/ 或者/ 数据中心/ 内部/ 实现/ 代价/ 过大/ ,/ 本文/ 提出/ 的/ 基于/ SDN/ 系统/ 面向/ 流/ 的/ 启发式/ 均衡/ 算法/ 能够/ 在/ 一定/ 程度/ 上/ 解决/ 以上/ 两个/ 问题/ ./ 在/ 集中式/ 控制/ 机制/ 下/ 调度/ 资源/ 并/ 使/ 系统/ 状态/ 达到/ 最优化/ 已有/ 相关/ 研究/ ,/ 如/ 文献/ [/ 6/ ]/ 中/ 提出/ 在/ 数据中心/ 中/ 根据/ 当前/ 网络/ 负载/ 情况/ 调整/ 交换机/ 数量/ 的/ 方法/ 实现/ 负载/ 均衡/ ;/ 文献/ [/ 7/ ]/ 中/ 对/ SDN/ 控制器/ 进行/ 了/ 分析/ ,/ 通过/ 建立/ 规则/ 集来/ 实现/ 流/ 分布/ ,/ 减小/ 控制器/ 过载/ 和/ 延迟/ ,/ 以及/ 控制/ 规则/ 表/ 规模/ ./ 这/ 两种/ 算法/ 都/ 是/ 通过/ 更改/ 传输/ 机制/ 的/ 方式/ ,/ 因此/ 都/ 需要/ 修改/ OpenFlow/ 协议/ ./ 文献/ [/ 8/ ]/ 中/ 提出/ 增加/ 一个/ 实体/ RackManager/ 来/ 处理/ 源/ 路由/ 匹配/ 问题/ ,/ 减少/ 控制器/ 匹配/ 负担/ ,/ 但/ 其/ 收集/ 信息/ 都/ 是/ 通过/ 静态/ 调用/ 实现/ 不能/ 很/ 好/ 应对/ 网络流量/ 变化/ 情况/ ./ 文献/ [/ 9/ ]/ 中/ 提出/ 一个/ 调度/ 系统/ ,/ 设计/ 定制/ 化/ 的/ 路由/ 策略/ ,/ 能够/ 动态/ 调度/ 计算/ 和/ 带宽/ 资源/ ;/ 文献/ [/ 10/ ]/ 中/ 把/ 负载/ 均衡/ 算法/ 作为/ 插件/ 嵌入/ NOX/ ./ 这/ 3/ 篇文章/ 都/ 提出/ 了/ 增加/ 额外/ 事件驱动/ 模块/ 辅助/ 控制器/ ,/ 但/ 这些/ 模块/ 只是/ 针对/ 当前/ 状态/ ,/ 不能/ 对/ 未来/ 网络/ 运行/ 状态/ 进行/ 预测/ ./ 文献/ [/ 11/ ]/ 在/ SDN/ 交换机/ 和/ 普通/ 交换机/ 混合/ 节点/ 网络/ 中/ 提出/ 了/ 基于/ OSPF/ 的/ SOTE/ 算法/ ,/ 通过/ 动态分配/ 权值/ 减轻/ 了/ 混合/ 局部/ 拥堵/ 路径/ ,/ 提高/ 整个/ 混合/ 网络/ 的/ 工作效率/ ./ 但是/ 该/ 算法/ 抓取/ 信息/ 是/ 即时/ 信息/ ,/ 仅/ 对/ 当前/ 状态/ 有效/ ./ 为了/ 让/ 调度/ 算法/ 获得/ 网络/ 各/ 实体/ 的/ 状态/ 信息/ 并/ 能/ 达到/ 最优化/ 部署/ ,/ 本文/ 将/ 网络/ 实体/ 运行/ 状态/ 信息/ 收集/ 和/ 权值/ 评价/ 体系/ 与/ 调度/ 算法/ 脱离/ ,/ 以/ 线程/ 独立/ 的/ 模块/ 运行/ 在/ 控制器/ 系统/ 中/ ./ 其中/ 权值/ 评价/ 体系/ 主要/ 针对/ 运行/ 过程/ 中/ 节点/ 、/ 路径/ 和/ 流/ 进行/ 实时/ 估值/ 评价/ ./ 各/ 模块/ 工作/ 方式/ 为/ :/ 控制器/ 额外/ 增加/ 信息/ 收集/ 模块/ 收集/ 实体/ 运行/ 信息/ ,/ 优化/ 计算/ 模块/ ,/ 使/ 其/ 根据/ 一些/ 规则/ 对/ 这些/ 收集/ 信息/ 进行/ 评价/ 后/ 得出/ 相应/ 估值/ ,/ 流/ 分配/ 模块/ 再/ 根据/ 这些/ 估值/ 选择/ 最佳/ 匹配/ 方案/ ,/ 调度/ 模块/ 根据/ 最佳/ 方案/ 进行/ 部署/ ./ 通过/ 以上/ 4/ 个/ 独立/ 模块/ 协同工作/ 后/ 可以/ 使/ 系统/ 运行/ 更加/ 高效/ ./ 在/ 权值/ 评价/ 体系/ 中/ ,/ 本文/ 使用/ 启发式/ 自/ 适应/ 算法/ 来/ 预测/ 未来/ 网络/ 运行/ 状态/ ./ 由于/ SDN/ 系统/ 特性/ 是/ 全局/ 控制/ 和/ 基于/ 流/ 分析/ 的/ ,/ 因此/ 可以/ 收集/ 的/ 信息/ 既有/ 系统/ 历史/ 信息/ ,/ 也/ 有/ 系统/ 全局/ 信息/ ;/ 既有/ 交换机/ 节点/ 信息/ ,/ 也/ 有流/ 信息/ ./ 控制器/ 端/ 通过/ 收集/ 有用/ 信息/ 来/ 估计/ 未来/ 系统/ 状态/ (/ 自/ 适应/ )/ ,/ 并/ 通过/ 预测/ 的/ 未来/ 状态/ 求/ 出/ 可能性/ 最优/ 解/ (/ 启发式/ )/ ,/ 因此/ 可/ 制定/ 更加/ 合理/ 优化/ 的/ 转发/ 策略/ ./ 本文/ 提到/ 的/ 自/ 适应/ 启发式/ 算法/ 应用/ 在/ 以下/ 几个/ 方面/ :/ (/ 1/ )/ 流/ 的/ 动态性/ 预测/ ./ 根据/ 测量/ 流/ 的/ 出现/ 次数/ 来/ 估算/ 流/ 的/ 发生/ 频率/ ,/ 预测/ 未来/ 流/ 分布/ 情况/ ./ 引入/ 流量/ 参数/ 能够/ 更加/ 准确/ 地/ 描述/ 流/ 的/ 运行/ 状态/ ;/ (/ 2/ )/ 估算/ 交换机/ 转发/ 上限/ 阈值/ ./ 节点/ 评价/ 模块/ 通过/ 当前/ 承载/ 转发/ 的/ 流/ 对/ 交换机/ 有/ 一定/ 预判/ ,/ 在/ 发生/ 堵塞/ 之前/ 能够/ 及时/ 预警/ ,/ 避免/ 节点/ 堵塞/ 不能/ 工作/ ;/ (/ 3/ )/ 评估/ 节点/ 转发/ 性能/ ./ 预测/ 节点/ 剩余/ 带宽/ 或者/ 剩余/ 流量/ ,/ 链路/ 算法/ 以此/ 为/ 权值/ 进行/ 最短/ 路径/ 选择/ ;/ (/ 4/ )/ 路径/ 评估/ ./ 对/ 两/ 节点/ 所有/ 路径/ 进行/ 筛选/ ,/ 创建/ 可/ 选/ 路径/ 集合/ ,/ 并/ 在/ 可选/ 路径/ 中/ 预测/ 未来/ 路径/ 上/ 的/ 流/ 状态/ ,/ 为/ 路径/ 选择/ 算法/ 提供/ 估计/ 参数/ ;/ (/ 5/ )/ 对流/ 进行/ 评估/ ./ 当/ 节点/ 发生/ 超载/ 时/ ,/ 为了/ 节点/ 恢复正常/ 需要/ 转移/ 部分/ 承载/ 流/ ,/ 流/ 评价/ 模块/ 对/ 该/ 节点/ 上/ 运行/ 的/ 流/ 进行/ 评价/ 估值/ ./ 本文/ 第/ 2/ 节/ 讨论/ SVN/ 系统/ 中/ 面向/ 流/ 的/ 调度/ 算/ ①/ https/ :/ // // www/ ./ opennetworking/ ./ org/ // Page3/ 法/ 的/ 背景/ 、/ 可行性/ 和/ 动机/ ;/ 第/ 3/ 节/ 具体/ 研究/ 算法/ 细节/ ;/ 第/ 4/ 节/ 给出/ 算法/ 实现/ 框架/ ;/ 第/ 5/ 节/ 通过/ 实验/ 对/ 算法/ 进行/ 评价/ ;/ 第/ 6/ 节/ 讨论/ 未来/ 工作/ 和/ 阐述/ 本文/ 结论/ ./ 2/ 算法/ 背景/ 本/ 节/ 通过/ 两个/ 实例/ 讨论/ 在/ 最/ 短/ 路径/ 算法/ 中/ ,/ 因/ 不能/ 获得/ 网络/ 中/ 实时/ 状态/ 信息/ 和/ 预测/ 未来/ 运行/ 情况/ 而/ 带来/ 的/ 系统资源/ 利用/ 问题/ 和/ 可能/ 引起/ 拥堵/ 情况/ ,/ 并/ 讨论/ 了/ SDN/ 上/ 实现/ 面对/ 流/ 的/ 调度/ 算法/ 的/ 可行性/ ./ 图/ 1/ 流/ 选择/ 不同/ 节点/ (/ 左图/ 显示/ 插入/ 流前/ 网络/ 运行/ 状态/ ;/ 中/ 图/ 显示/ 选择/ 最/ 短路/ 径流/ 的/ 运行/ 状态/ ,/ 经过/ 的/ 节点/ 有/ 2.1/ ./ 2/ 系统资源/ 利用/ 情况/ 静态/ 算法/ 调度/ 时/ ,/ 评价/ 各个/ 节点/ 运行/ 状态/ 是/ 相互/ 独立/ 不/ 相关/ 的/ ,/ 各/ 节点/ 不/ 知道/ 其他/ 节点/ 的/ 运行/ 状态/ ./ 每个/ 节点/ 都/ 会/ 优先/ 服务/ 优先/ 值高/ 的/ 流/ ,/ 由于/ 没有/ 全局/ 意识/ ,/ 优先/ 值低/ 的/ 流/ 就/ 会/ 很/ 有/ 可能/ 被/ 节点/ 拒绝服务/ ,/ 但/ 如果/ 全局/ 情况/ 下/ ,/ 评价/ 低/ 的/ 流/ 是/ 可以/ 运行/ 的/ ./ 如图/ 2/ 示例/ ,/ 左图/ 中/ 显示/ 在/ 某/ 初始/ 环境/ 下/ ,/ 网络/ 中有/ 3/ 个流/ :/ A/ →/ E/ 、/ A/ →/ F/ 、/ A/ →/ D/ ,/ 其/ 分别/ 承载/ 的/ 节点/ 路径/ 为/ :/ AE/ 、/ AGF/ 、/ ABCD/ ./ 各个/ 节点/ 创建/ 本/ 节点/ 阈值/ 来/ 评价/ 继续/ 增加/ 负载/ 的/ 能力/ ,/ 各/ 节点/ 优先选择/ 负载/ 比较/ 小/ 的/ 流/ ,/ 这样/ 能够/ 使得/ 承载/ 该/ 服务/ 后/ 不/ 超过/ 阈值/ ./ 系统/ 某/ 时刻/ 需要/ 创建/ 新/ 的/ 流/ A/ →/ D/ ,/ 假设/ 在/ 评价/ 体系/ 下/ ,/ 流/ A/ →/ D/ 负载/ 很大/ ./ 在/ 独立/ 节点/ 情况/ 下/ ,/ 各个/ 节点/ 不/ 考虑/ 全局/ 信息/ ,/ 只/ 根据/ 本/ 节点/ 运行/ 状图/ 2/ 全局/ 信息/ 下流/ 的/ 可/ 分配/ (/ 左图/ 有/ 3/ 个流/ :/ AE/ 、/ AGF/ 、/ ABCD/ ./ 当/ 创建/ 新/ 的/ 流/ A/ →/ D/ ,/ 左图/ A/ 相邻/ 结点/ E/ 、/ G/ 、/ B/ 因/ 节点/ 本身/ 独立/ 阈值/ 设置/ ,/ 均/ 不能/ 负载/ 该流/ ,/ 系统/ 拒绝/ 承载/ 该/ 服务/ ./ 中图/ 因/ 知悉/ 全局/ 情况/ ,/ 可/ 调整/ 分流/ ,/ 流/ AGF/ 转向/ 为/ AEF/ ,/ 这样/ G/ 节点/ 因空/ 出流/ AGF/ 的/ 承载能力/ ,/ 系统/ 可以/ 承载/ 流/ A/ →/ D/ 的/ 服务/ ,/ 创建/ 路径/ AGD/ ./ 右图/ 是/ 另外/ 一种/ 可/ 2.1/ ./ 3Offline/ 算法/ 问题/ 文献/ [/ 6/ -/ 8/ ]/ 中/ 提到/ 的/ 算法/ 是/ 静态/ Offline/ 算法/ ./ 2.1/ 传统/ 算法/ 的/ 问题/ 2.1/ ./ 1/ 最短/ 路径/ 选择/ NOX/ 和/ FOX/ 默认/ 是/ 以类/ OSPF/ [/ 12/ ]/ 选择/ 最短/ 路径/ 方式/ 来/ 寻路/ 的/ ,/ 权值/ 为/ 节点/ 带宽/ ./ 如图/ 1/ 示例/ ,/ 左图/ 显示/ 一些/ 节点/ 已经/ 有些/ 负载/ ./ 中图/ 有/ 新流/ A/ →/ D/ 申请/ 产生/ ,/ 在/ 节点/ AD/ 间/ 有/ 3/ 条可选/ 路径/ :/ AEFGD/ ,/ AGD/ ,/ ABCD/ ./ 通过/ 传统/ 最短/ 路径/ 计算/ 得到/ 路径/ AGD/ ./ 但/ 此时/ A/ 点/ G/ 点/ 都/ 存在/ 负载/ ,/ 因此/ 可能/ 引起/ 节点/ 超载/ ./ 右图/ 通过/ 收集/ 3/ 条/ 路径/ 实时/ 运行/ 状态/ ,/ 得出/ 最优/ 路径/ ABCD/ ./ 这些/ 运行/ 状态/ 是/ 实时/ 的/ ,/ 因此/ 实现/ 算法/ 必须/ 是/ Online/ 的/ ./ 态/ 创建/ 本/ 节点/ 阈值/ ,/ 如/ 左图/ 所示/ ./ A/ 相邻/ 结点/ E/ 、/ G/ 、/ B/ 因/ 节点/ 本身/ 独立/ 阈值/ 设置/ ,/ 均/ 不能/ 负载/ 该流/ ,/ 系统/ 拒绝/ 承载/ 该/ 服务/ ./ 中图/ 因/ 控制器/ 知悉/ 全局/ 情况/ ,/ 控制器/ 可/ 调整/ E/ 节点/ 分流/ ,/ 流/ A/ →/ F/ 改变/ 路径/ 为/ AEF/ ,/ 这样/ G/ 节点/ 因空/ 出流/ A/ →/ F/ 的/ 承载能力/ ,/ 可以/ 承载/ 流/ A/ →/ D/ 的/ 服务/ ,/ 创建/ 路径/ AGD/ ./ 这种/ 调度/ 方式/ 在/ 路由器/ 没有/ 全局/ 实时/ 智能/ 下/ 不会/ 出现/ ,/ 通常/ 做法/ 是/ 拒绝服务/ 造成/ 丢包/ ./ 右图/ 是/ 另外/ 一种/ 分配/ 方式/ ,/ 将/ ABCD/ 当前/ 运行/ 的/ 流段/ 移到/ AGD/ ,/ 新建/ 的/ 流以/ AB/ -/ CD/ 路径/ 进行/ 传输/ ./ 控制器/ 可/ 根据/ 一些/ 权值/ 判定/ 那种/ 方式/ 更加/ 合理/ ,/ 再/ 具体/ 进行/ 部署/ ./ 在/ 大量/ 复杂/ 拓扑/ 情况/ 下/ ,/ 当流/ 集合/ 总流/ 到达/ 系统/ 能力/ 阈值/ 时/ ,/ 此种/ 情况/ 经常出现/ ,/ 造成/ 系统资源/ 不能/ 充分利用/ 的/ 情况/ ./ 其/ 核心/ 实现/ 方式/ 是/ :/ 收集/ 部分/ 或者/ 全局/ 的/ 信息/ ,/ 通过/ 最优化/ 算法/ 算/ 出/ 最优/ 解/ ,/ 再/ 根据/ 最优/ 解/ 进行/ 资源/ 重新/ Page4/ 部署/ ./ Offline/ 算法/ 的/ 问题/ 是/ 收集/ 的/ 信息/ 是/ 基于/ 瞬时/ 的/ ,/ 其/ 最优/ 解只/ 对/ 收集/ 时刻/ 的/ 整个/ 系统/ 状态/ 有效/ ./ 如果/ 系统/ 不是/ 基于/ 时/ 不变/ 假设/ (/ Non/ -/ TimeVariantAssumption/ )/ ,/ 当/ 系统/ 运行/ 一段时间/ 后/ ,/ 系统/ 状态/ 发生变化/ ,/ 之前/ 最优/ 解便/ 有/ 可能/ 失效/ ./ 同理/ ,/ 当/ 发生/ 节点/ 超载/ 时/ ,/ 由于/ 处理错误/ 模块/ 的/ 算法/ 计算/ 和/ 部署/ 延迟/ 性/ ,/ 当/ 系统/ 部署/ 好/ 处理/ 策略/ 后/ 其/ 超载/ 节点/ 已经/ 不是/ 超载/ 状态/ ,/ 因此/ 处理/ 方法/ 失效/ ./ 2.2/ 运行/ 时/ 状态/ 算法/ 在/ SDN/ 上/ 可行性/ 为了/ 提高/ 系统/ 运行/ 性能/ 和/ 减少/ 失效/ 配置/ ,/ 需要/ 有/ 运行/ 时/ 状态/ 算法/ 对/ 全局/ 进行/ 均衡/ 调度/ ./ 该/ 算法/ 需要/ 满足/ :/ (/ 1/ )/ 基于/ 网络/ 节点/ 和/ 链路/ 的/ 实时/ 信息/ ;/ (/ 2/ )/ 信息/ 是/ 全局性/ 的/ ;/ (/ 3/ )/ 算法/ 能够/ 在/ 一段时间/ 内/ 具有/ 有效性/ ;/ (/ 4/ )/ 算法/ 能够/ 快速/ 部署/ ,/ 并且/ 部署/ 代价/ 比较/ 小/ ./ SDN/ 系统/ 以下/ 几个/ 特性/ 能够/ 比较/ 好/ 的/ 满足/ 以上/ 几点/ ,/ 使得/ 运行/ 时/ 状态/ 算法/ 在/ SDN/ 系统/ 上/ 具有/ 可行性/ ./ 2.2/ ./ 1/ 集中控制/ 本文/ 所/ 讨论/ 到/ 的/ 集中控制/ ,/ 主要/ 关注/ 在/ 集中/ 收集/ 全局/ 信息/ 上/ ./ SDN/ 并/ 不/ 只/ 限于/ 集中式/ 控制/ ,/ 一些/ 商业/ 控制器/ 都/ 有/ 分布式/ 控制/ 模型/ ,/ 如/ Google/ 、/ Nicira/ 、/ NEC/ 共同/ 设计/ 的/ Onix/ 模型/ [/ 13/ ]/ ,/ 并/ 在/ B4/ 网络/ 中/ 应用/ ./ 一些/ 超大型/ 网络/ 收集/ 全局/ 信息/ 可能/ 需要/ 多个/ 控制器/ 并/ 对/ 信息/ 碎片/ 进行/ 拼接/ ./ 但/ 本文/ 的/ 算法/ 不是/ 瞬时/ 全局/ 信息/ 相关/ 的/ ,/ 其/ 启发式/ 可以/ 允许/ 有/ 一定/ 的/ 信息/ “/ 时差/ ”/ ./ 传统/ 路由器/ 网络/ 中/ ,/ OSPF/ 通过/ LSA/ 得到/ 全局/ 网络拓扑/ 以及/ 各/ 节点/ 间/ 路径/ 传输/ 带宽/ ,/ 路由器/ 分布式/ 转发/ 全局性/ 信息/ ,/ 并/ 独立/ 维护/ 全局/ 信息/ 副本/ ./ 文献/ [/ 14/ -/ 15/ ]/ 中/ 对/ OSPF/ 和/ IS/ -/ IS/ 协议/ 重新/ 设置/ 权值/ ,/ 目的/ 是/ 为了/ 尽可能/ 描述/ 节点/ 和/ 链路/ 运行/ 时/ 状态/ ,/ 但/ 还是/ 以/ 静态/ 方式/ 实行/ ,/ 因此/ 需要/ 多次/ 触发/ 权值/ 收集/ 和/ 计算/ 模块/ ,/ 这种/ 间接性/ 获得/ 全局/ 信息/ 机制/ 有/ 一定/ 局限性/ ./ 如果/ 需要/ 更/ 多/ 的/ 全局性/ 信息/ ,/ 如/ 运行/ 时/ 节点/ 状态/ ,/ 运行/ 时/ 链路/ 状态/ 及/ 运行/ 时/ 传输流/ 状态/ ,/ 路由器/ 需要/ 更/ 复杂/ 的/ 扩展/ 模块/ ,/ 这种/ 高性能/ 智能/ 路由器/ 功能/ 升级/ 困难/ ,/ 命令行/ 接口/ 及/ 配置/ 复杂/ ,/ 部署/ 成本/ 昂贵/ ,/ 难以/ 实际/ 推广应用/ ./ 相对/ 于/ 传统/ 网络/ ,/ SDN/ 额外/ 提供/ 控制器/ 实现/ 集中控制/ 功能/ ,/ 控制器/ 通过/ 有/ 专门/ 的/ 控制/ 链路/ 连接/ 各/ 交换机/ 来/ 收集/ 全局/ 信息/ ,/ 有/ 专门/ 的/ 操作系统/ 以及/ App/ 实现/ 复杂/ 的/ 调度/ 计算/ 功能/ ./ 在/ 传输/ 过程/ 中/ ,/ 集中控制/ 的/ 主要/ 实现/ 有/ 收集/ 全局/ 信息/ 、/ 执行/ 控制/ 功能/ 、/ 全局/ 部署/ 策略/ ./ 2.2/ ./ 2/ 实时性/ 控制/ 信息/ 丰富/ SDN/ 是/ 基于/ 流/ 分析/ 的/ ,/ 如/ PCEP/ 协议/ 和/ BGP/ -/ LS/ // SNMP/ 的/ 路径/ 记录/ ,/ ForCes/ 协议/ 的/ XML/ 文本/ 描述/ ./ 本文/ 将/ 以/ OpenFlow/ 作为/ 示例/ 具体分析/ ,/ 并/ 在/ 实验/ 中/ 实现/ ./ 对于/ 流/ 的/ 相关/ 分析/ ,/ 其/ 分析/ 粒度/ 可/ 在/ Open/ -/ Flow1/ ./ 0/ 规范/ 定义/ 十元/ 组/ (/ 输入/ 端口/ 、/ MAC/ 源地址/ 、/ MAC/ 目的/ 地址/ 、/ 以太网/ 类型/ 、/ VLANID/ 、/ IP/ 源地址/ 、/ IP/ 目的/ 地址/ 、/ IP/ 端口/ 、/ TCP/ 源/ 端口/ 、/ TCP/ 目的/ 端口/ )/ 进行/ 选择/ ,/ 没有/ 被/ 选择/ 的/ 元组/ 通过/ 通配符/ 号/ 代替/ ,/ 如/ 在/ 防火墙/ 级别/ 的/ 流/ 分析/ 上/ ,/ 元组/ 可/ 选择/ 传统/ 五元/ 组/ ./ 通过/ 流/ 分析/ ,/ 能够/ 得到/ 更加/ 丰富/ 的/ 运行/ 时/ 状态/ 信息/ ./ OpenFlow/ 流/ 定义/ 中/ ,/ 就/ 有/ 多种/ 信息/ 供/ 控制器/ 读取/ ./ 在/ 控制器/ 端/ 设置/ 特殊/ 的/ 流/ 分析/ 模块/ ,/ 可/ 获得/ 更/ 多/ 信息/ 如流/ 应用/ 特性/ 、/ 带宽/ 大小/ 、/ 长短/ 流/ 、/ 流/ 的/ 出现/ 频率/ 等等/ ./ 流/ 的/ 描述/ 特征/ 越/ 丰富/ ,/ 其/ 对流/ 的/ 实时/ 预测/ 越/ 准确/ ./ 文献/ [/ 16/ ]/ 通过/ 设计/ 链路/ 权值/ 使/ 局部/ 网络/ 传输/ 稳定/ ,/ 文献/ [/ 17/ ]/ 通过/ MPLS/ 标签/ 处理/ 来/ 保持/ 网络流量/ 稳定/ ,/ 文献/ [/ 18/ ]/ 通过/ 在/ QoS/ 支持/ 的/ 网络/ 中/ 对/ 网络/ 事件/ 进行/ 学习/ 来/ 预测/ 未来/ 情况/ ,/ 这些/ 都/ 是/ 额外/ 增加/ 路由器/ 模块/ 来/ 获取/ 网络/ 复杂/ 信息/ ./ SDN/ 作为/ 全网/ 状态/ 敏感/ 的/ 系统/ ,/ 为/ 基于/ 全网/ 感知/ 的/ 算法/ 提供/ 实现/ 基础/ ./ 控制器/ 收集/ 到/ 的/ 全局/ 信息/ 不再/ 局限于/ 网络/ 静态/ 信息/ ,/ 还/ 可以/ 收集/ 系统/ 运行/ 时/ 的/ 状态/ 信息/ ,/ 如/ 节点/ 工作/ 信息/ 、/ 流/ 传输/ 信息/ ./ 这些/ 信息/ 为/ Online/ 算法/ 提供/ 了/ 很/ 好/ 的/ 参考/ 数据/ ,/ 如/ LABERIO/ [/ 19/ ]/ ./ 通过/ 这些/ 信息/ 可/ 使用/ 自/ 适应/ 启发式/ 的/ 算法/ 来/ 预测/ 未来/ 特性/ ,/ 因此/ 会/ 更/ 智能/ 更/ 高效/ ./ 算法/ 的/ 计算/ 代价/ 全部/ 由/ 控制器/ 及/ 额外/ 模块/ 承担/ ,/ 在/ 交换机/ 层/ 并/ 不/ 感知/ ,/ 因此/ 具有/ 很强/ 的/ 可执行性/ ./ SDN/ 协议/ 对流/ 的/ 操作控制/ 使得/ 可以/ 进行/ 多/ 粒度/ 处理/ ,/ 算法/ 本身/ 提供/ 的/ 可/ 操作/ 项/ 也/ 更/ 多/ ./ 如当/ 节点/ 运行/ 出现/ 热点/ 即/ 超过/ 阈值/ 时/ ,/ 控制器/ 可自/ 适应/ 选择/ 最大/ 可能/ 转出/ 该/ 节点/ 的/ 部分/ 工作/ 流将/ 其/ 排出/ ,/ 并/ 安放/ 这些/ 流/ 到/ 其他/ 节点/ ,/ 而/ 不仅/ 标记/ 该点/ 不可/ 用/ ./ 2.2/ ./ 3/ 可编程/ 和/ 可/ 扩展/ 构架/ 在/ 传统/ 路由器/ 结构/ 中/ ,/ 一些/ 具有/ 多个/ 管理/ 功能/ 结构/ 的/ 调度/ 算法/ 往往/ 需要/ 高性能/ 路由器/ 来/ 实现/ ,/ 这些/ 路由器/ 往往/ 价格昂贵/ ,/ 且/ 配置/ 复杂/ 和/ 功能/ 升级/ 代价/ 过大/ ./ 在/ SDN/ 系统/ 中/ ,/ 具体/ 的/ 控制器/ 系统/ 提供/ 了/ API/ ,/ 我们/ 可/ 通过/ 编写/ 具体/ 控制器/ 系统/ 的/ App/ 对/ 网络资源/ 进行/ 调度/ 和/ 操作/ ./ 本文/ 通过/ 在/ 控制器/ 端/ 增加/ 额外/ 的/ 模块/ 来/ 收集/ 信息/ 、/ 计算/ 权值/ 和/ 优化/ 数据/ 集/ ,/ 这些/ 模块/ 是/ 线程/ 独立/ 的/ ,/ 调度/ 模块/ 会/ 根据/ 这些/ 结果/ 计/ Page5/ 算/ 最优/ 结果/ 并/ 部署/ 到/ 系统/ 中/ ./ 3/ 算法/ 设计/ 3.1/ 流/ 的/ 动态/ 特性/ 和/ 流/ 参数/ 的/ 规约/ 简化/ 设/ SDN/ 系统/ 中/ 所有/ 流/ X1/ ,/ X2/ ,/ …/ ,/ Xn/ 组成/ 集合/ XX/ ,/ 对于/ 某个/ 流/ Xi/ ,/ 运行/ 带宽/ 为/ bXi/ 流/ 频率/ 本身/ 具有/ 时间/ 的/ 统计/ 特性/ ,/ 可以/ 通过/ 建立/ 流/ 的/ 历史/ 信息库/ ,/ 对/ 其/ 启发式/ 预测/ 未来/ 运行/ 情况/ ./ 信息库/ 样本量/ 越大/ ,/ 预测/ 会越/ 精确/ ./ 对流/ 频率/ 的/ 信息/ 收集/ 方式/ 可以/ 通过/ 以下/ 两种/ 方式/ 实现/ ./ (/ 1/ )/ 传输/ 协议/ 规定/ 流在/ 传输/ 过程/ 中/ 携带/ 相关/ 描述/ 信息/ ,/ 运行/ 过程/ 中/ 触发/ 一些/ 事件/ 时/ ,/ 可/ 让/ 控制器/ 事件处理/ 模块/ 调度/ 流/ 分析程序/ ,/ 对流/ 携带/ 的/ 信息/ 进行/ 储存/ 和/ 统计/ ./ 在/ OpenFlow/ 的/ 1.3/ 版本/ (/ 目前/ OpenFlow/ 最新/ 发布/ 版本/ 为/ 1.5/ ,/ 本文/ 仅/ 讨论/ 稳定/ 版本/ 1.3/ )/ 中/ ,/ 与/ 流/ 运行/ 时/ 状态/ 相关/ 的/ 描述/ 信息/ 字段/ 如表/ 1/ 所述/ ./ 流/ 表项/ 自/ 创建/ 起/ 时间/ 从表/ 1/ 中/ 可知/ 这些/ 信息/ 字段/ 是/ 基于/ 交换机/ 流表/ 的/ ,/ 这些/ 字段/ 不/ 太/ 关注/ 流/ 本身/ 运行/ 时/ 工作/ 状态/ ./ 因此/ 通过/ 流/ 携带/ 描述/ 相关/ 信息/ 这种/ 方式/ 需要/ 重新/ 扩展/ 协议/ 标准/ ,/ 更改/ 和/ 增加/ 控制器/ 系统/ 底层/ 模块/ 对/ 新/ 加字/ 段/ 的/ 解析/ 功能/ ./ (/ 2/ )/ 在/ 控制器/ APP/ 层/ 增加/ 对流/ 频率/ 测量/ 模块/ 和/ 储存/ 模块/ ./ 这种/ 方式/ 比较/ 灵活/ ,/ 使用/ 控制器/ OS/ 提供/ 的/ 功能/ 和/ API/ 接口/ ,/ 可/ 根据/ 考察/ 标准/ 的/ 不同/ 定制/ 不同/ 监测/ 方式/ 和/ 收集/ 储存/ 方式/ ./ 本文/ 采取/ 这种/ 方式/ ./ 实际操作/ 中/ 由于/ 无法/ 预知/ 准确/ 流/ 特性/ ,/ Λ/ Xi/ 通过/ 流/ 检测/ 模块/ 对/ 其/ 历史/ 信息/ 进行/ 计算/ 得到/ 的/ 统计/ 近似/ 得出/ ./ 假设/ 信息/ 收集/ 模块/ 更新/ 频率/ Frc/ ,/ 值/ λ/ Xi/ 已经/ 收集/ 信息/ c/ 次/ ,/ 其中/ 流/ Xi/ 出现/ xi/ 次/ ,/ 即/ λ/ Xi/ =/ xi/ // c/ ./ 对于/ 节点/ 集合/ SS/ 某个/ 节点/ S/ ,/ 记/ 上面/ 运行/ 的/ 流/ 集合/ 为/ X/ (/ S/ )/ ,/ 流/ Xi/ 在/ 其/ 出现/ 概率/ 为/ λ/ Xi/ 路径/ 上/ 节点/ 集合/ 为/ PXi/ / A/ ,/ B/ ∈/ PXi/ λ/ Xi/ 性质/ 相关/ ,/ 如/ 一些/ 流在/ 白天/ 出现/ 频率/ 很/ 高/ ,/ 夜间/ 出现/ 频率/ 很/ 低/ ./ 频率/ 可用/ λ/ Xi/ 刻/ 、/ App/ 代表/ 流/ 种类/ ,/ 这/ 取决于/ 对流/ 分析/ 粒度/ ./ 流/ 的/ 分析/ 粒度/ 大小/ 是/ 通过/ 流/ 观测/ 值/ 参数/ 数量/ 来/ 调整/ 的/ ./ 2.2/ ./ 2/ 节中/ 提到/ OpenFlow1/ ./ 0/ 规范/ 的/ 十元/ 组可/ 作为/ 流/ 分析/ 的/ 基础/ 参数/ ./ 但/ 这些/ 参数/ 不是/ 必须/ 的/ ,/ 参数/ 数量/ 同/ 信息/ 收集/ 模块/ 复杂度/ 和/ 运行/ 消耗/ 代价/ 有/ 很大/ 联系/ ./ 在/ 数据中心/ 网络/ 中流/ 数量/ 和/ 种类/ 都/ 非常/ 多/ ,/ 为了/ 减轻/ 收集/ 和/ 计算/ 模块/ 负担/ ,/ 我们/ 需要/ 减少/ 流/ 的/ 参数/ 数量/ ,/ 因此/ 对流/ 参数/ 的/ 简化/ 和/ 分类/ 规约/ 是/ 必需/ 的/ ./ 文献/ [/ 20/ ]/ 中/ 通过/ FlowVisor/ 从/ 网络/ 功能/ 和/ 流/ 类型/ 划分/ 的/ 粒度/ 对/ 网络/ 流/ 进行/ 规约/ ,/ 这种/ 方法/ 控制/ 了/ 分析/ 粒度/ ,/ 但/ 不能/ 获得/ 运行/ 时/ 统计/ 特性/ ./ 文献/ [/ 21/ ]/ 中/ 分析/ 数据流/ 之间/ 的/ 通配/ 特征/ ,/ 减小/ 了/ 对/ 控制器/ 的/ 访问/ ,/ 这/ 是从/ 细粒度/ 对流/ 进行/ 的/ 分析/ ./ 本文/ 仅/ 选取/ 了/ 流/ 的/ 起始/ 地址/ 和/ 目的/ 地址/ 二元/ 组/ ,/ 以/ 交换机/ 节点/ 为/ 基本/ 单位/ ,/ 对/ 网络/ 性能/ 进行/ 均衡/ 分析/ ./ 3.2/ 节点/ 转发/ 阈值/ 上限/ 本文/ 认为/ 节点/ 被动/ 拥堵/ 造成/ 的/ 损失/ 远大于/ 节点/ 主动/ 拒绝服务/ 丢包/ 造成/ 的/ 损失/ ,/ 因为/ 被动/ 拥堵/ 是/ 不/ 可控/ ,/ 无法/ 通过/ 有效/ 算法/ 解决/ 的/ ./ 因此/ 需要/ 设定/ 阈值/ ,/ 避免/ 节点/ 超载/ 后/ 运行/ 到/ 完全/ 瘫痪/ ./ 通过/ 交换机/ 节点/ 负载/ 流/ 的/ 带宽/ 总和/ 的/ 带宽/ 占用率/ Pwl/ (/ S/ )/ 作为/ 某个/ 节点/ S/ 运行/ 时/ 承载/ 状态/ ./ 设/ b/ (/ S/ )/ 为/ 节点/ 带宽/ ,/ 工作/ 流/ 负载/ 占用/ 带宽/ 为/ wl/ (/ S/ )/ =/ ∑/ wl/ (/ S/ )/ // b/ (/ S/ )/ ./ 一般/ 情况/ 下/ 管理员/ 根据/ 经验/ 或者/ 由/ 交换机/ 缺省/ 自定义/ 阈值/ ,/ 通常/ 在/ 50/ %/ ~/ 70/ %/ 之间/ ./ 这种/ 设定/ 的/ 静态/ 阈值/ 不能/ 根据/ 节点/ 实际/ 运行/ 情况/ 进行/ 自动/ 浮动/ ,/ 当/ 不同/ 流/ 经过/ 某/ 交换机/ 节点/ 时/ ,/ 控制器/ 因/ 固定/ 阈值/ 采取/ 的/ 处理事件/ 应对/ 不能/ 很/ 好/ 适应/ 实际/ 运行/ 的/ 流/ 状态/ ,/ 从而/ 对/ 整体/ 性能/ 造成/ 影响/ ./ 固定/ 阈值/ 特别/ 不/ 适应/ 承载/ 动态/ 和/ 不能/ 预知/ 的/ 负载/ ,/ 如/ 交换机/ 节点/ 承载/ 带宽/ 小/ 的/ 流/ 情况/ ./ 假设/ 短流/ Xshort/ 产生/ 前/ ,/ 系统/ 中/ 已有/ 流/ 集合/ X1/ ,/ …/ ,/ Xn/ 运行/ ,/ 对系统/ 资源配置/ 已/ 存在/ 在/ 优化/ 状态/ Sop/ (/ X1/ ,/ …/ ,/ Xn/ )/ ./ 当流/ Xshort/ 在/ 交换机/ 节点/ S/ 生成/ 时/ 使得/ 该/ 节点/ 负载/ 超过/ 固定/ 阈值/ TH/ (/ S/ )/ ,/ 引发/ 系统/ 处理/ 节点/ 超过/ 阈值/ 事件/ ./ 控制器/ 对系统/ 中/ 各/ 交换机/ 节点/ 进行/ 流/ 调控/ 重新分配/ 后/ ,/ 得到/ 优化/ 状态/ Sop/ (/ X1/ ,/ …/ ,/ Xn/ ,/ Xshort/ )/ ./ 短流/ Xshort/ 很快/ 结束/ 并/ 在/ 很/ 长时间/ 内/ 不再/ 产生/ ,/ 此时/ 系统/ 中流/ X1/ ,/ …/ ,/ Xn/ 运行/ 在/ 有/ 短流/ Xshort/ 存在/ 的/ 优化/ 配置/ X1/ ,/ …/ ,/ Xn/ ,/ Xshort/ 下/ ./ 因为/ 系统/ 工作/ 在/ 流/ 集合/ X1/ ,/ …/ ,/ Xn/ 下/ ,/ 有/ Sop/ (/ X1/ ,/ …/ ,/ Xn/ )/ / Sop/ (/ X1/ ,/ …/ ,/ Xn/ ,/ Xshort/ )/ ,/ 即/ 系统/ 状态/ Sop/ (/ X1/ ,/ …/ ,/ Xn/ ,/ Page6Xshort/ )/ 在/ X1/ ,/ …/ ,/ Xn/ 下/ 不是/ 最优/ 状态/ ./ 没有/ 预测/ 流/ Xshort/ 的/ 运行/ 时/ 状态/ 就/ 会/ 造成/ 此类情况/ 发生/ ,/ 此时/ 如果/ 将/ 阈值/ 调高些/ 就/ 不会/ 触发/ 系统/ 重/ 分配/ 事件/ ,/ 从而/ 避免/ 引起/ 的/ 次优/ 状态/ 后果/ ./ 流/ 进行/ 规约/ 后/ 在/ 相同/ 路径/ 在/ 一段时间/ 内流/ 的/ 性质/ 是/ 相同/ 和/ 具有/ 延续性/ 的/ ,/ 如/ 长短/ 流/ 带宽/ 、/ 占/ 总流/ 带宽/ 比重/ 、/ 发生/ 频率/ 等等/ ./ 因此/ 可以/ 通过/ 自/ 适应/ 启发式/ 算法/ ,/ 根据/ 在/ 某个/ 节点/ 上/ 承载/ 流/ 的/ 历史/ 特性/ 预测/ 未来/ 特性/ ./ 根据/ 流/ 未来/ 特性/ ,/ 可以/ 设置/ 节点/ 的/ 上限/ 阈值/ ./ 3.2/ ./ 1/ 通过/ 节点/ 带宽/ 估计/ 阈值/ 上限/ 本文/ 引用/ 绝对/ 中/ 位差/ MAD/ (/ MedianAbsoluteDeviation/ )/ [/ 22/ ]/ 统计/ 方法/ 处理/ 节点/ 历史/ 信息/ ./ MAD/ 作为/ 稳健/ 统计/ 方法/ 它/ 为/ 传统/ 统计/ 方法/ 提供/ 了/ 一种/ 替代/ 方案/ ./ 其/ 目的/ 是/ 生成/ 一种/ 不会/ 受/ 模型/ 假设/ 的/ 细微/ 偏差/ 过分/ 影响/ 的/ 模拟量/ ./ MAD/ 是/ 统计/ 离差/ 的/ 一种/ 稳定/ 估计量/ ,/ 对于/ 没有/ 均值/ 或者/ 方差/ 的/ 分布/ 来说/ ,/ 它/ 具有/ 更好/ 的/ 性能/ ,/ 如/ Cauchy/ 分布/ ,/ 因此/ 比/ 样本/ 方差/ 或者/ 标准差/ 具有/ 更/ 广泛/ 的/ 应用/ ./ 对于/ 数据/ 集中/ 的/ 异常/ 值/ ,/ MAD/ 比/ 标准差/ 具有/ 更好/ 的/ 容忍性/ ./ 由于/ 标准差/ 对/ 样本/ 值/ 与/ 均值/ 的/ 差取/ 平方/ ,/ 所以/ 从/ 平均/ 来看/ ,/ 大偏差/ 值会/ 造成/ 更/ 严重/ 的/ 偏离/ ,/ 这样/ 异常/ 值/ 的/ 影响/ 将/ 更/ 大/ ./ 而/ 对于/ MAD/ ,/ 少量/ 异常/ 值/ 与/ 均值/ 之差/ 的/ 数量级/ 是/ 可以/ 忽略不计/ 的/ ./ MAD/ 定义/ 为/ MAD/ (/ X/ )/ =/ mediani/ (/ |/ Xi/ -/ medianj/ (/ Xj/ )/ |/ )/ ,/ 由/ 3.2/ ./ 1/ 节/ 定义/ ,/ 经过/ 当前/ 节点/ 的/ MAD/ 值为/ MAD/ =/ mediani/ (/ |/ bXi/ -/ medianj/ (/ bX/ 定义/ 节点/ 带宽/ 上限/ 阈值/ 为/ 其中/ ,/ α/ ∈/ R/ +/ ,/ 为/ 自定义/ 参数/ ,/ 系统管理员/ 通过/ 调整/ α/ 值来/ 微调/ 节点/ 转换/ 流/ 的/ 程度/ ./ MAD/ 值越/ 小/ 说明/ 该/ 节点/ 上/ 的/ 流/ 带宽/ 很/ 平稳/ ,/ 节点/ 上线/ 阈值/ 可以/ 调大些/ ,/ 节点/ 可以/ 承载/ 更/ 多/ 的/ 流/ ./ MAD/ 值越/ 大/ ,/ 说明/ 该/ 节点/ 各流/ 带宽/ 差别/ 很大/ ,/ 需要/ 调小/ 上限/ 阈值/ 避免/ 带宽/ 大/ 的/ 流/ 突发/ 造成/ 节点/ 过载/ 拥塞/ ./ 3.2/ ./ 2/ 通过/ 节点/ 流量/ 估计/ 阈值/ 上限/ 上节/ MAD/ 参考/ 的/ 是/ 流/ 的/ 带宽/ 统计/ 值/ ,/ 流/ 生成/ 频率/ λ/ Xi/ 为/ 参数/ 调节/ 交换机/ 节点/ 阈值/ 已经/ 够用/ ,/ 这/ 是因为/ 简单/ 系统/ 中流/ 种类/ 较/ 单一/ 且/ 频率/ 变化/ 不大/ ./ 但/ 在/ 复杂/ 系统/ 中/ ,/ 流/ 种类/ 较/ 多/ 频率/ 变化/ 频繁/ ,/ 因此/ 调节/ 节点/ 阈值/ 需要/ 考虑/ 流/ 频率/ 参数/ ./ λ/ XibXi/ 确/ 描述/ 流/ 运行/ 状态/ ,/ 能/ 很/ 好地解决/ 频率/ 高/ 的/ 短流/ 优先级/ 过低/ 和/ 频率/ 低/ 长流/ 优先级/ 过高/ 的/ 问题/ ./ 通过/ 流量/ 估计/ MADF/ 值/ 定义/ 如下/ :/ MADF/ =/ mediani/ (/ |/ λ/ XibXi/ -/ medianj/ (/ λ/ X/ 定义/ 节点/ 的/ 流量/ 上限/ 阈值/ 为/ 以上/ 两种/ 算法/ 复杂度/ 为/ O/ (/ n2/ )/ ./ 需要/ 注意/ 的/ 是/ ,/ 当/ 采取/ 4.1/ 节中/ 计算/ 模块/ ,/ 每次/ 计算/ 都/ 有/ 上/ 一次/ 数据/ 记录/ ,/ 我们/ 不/ 需要/ 每次/ 都/ 统计/ 所有/ 样本/ ,/ 因此/ 算法/ 复杂度/ 可降/ 为/ O/ (/ n/ )/ ,/ 每次/ 计算/ 因有/ 上/ 一次/ 均值/ 参与/ ,/ 故/ 具有/ 自适应性/ ./ 3.3/ 节点/ 评估/ 当/ 交换机/ 节点/ 负载/ 超过/ 阈值/ 后/ ,/ 控制器/ 需要/ 对/ 该/ 节点/ 上/ 的/ 流/ 进行/ 重新/ 调度/ ,/ 减轻/ 该/ 节点/ 负载/ ./ 对于/ 选出/ 来/ 的/ 流/ ,/ 需要/ 对/ 其/ 进行/ 重新/ 寻找/ 路径/ 算法/ 操作/ ./ 触发/ 该/ 算法/ 事件/ 有/ :/ 当/ 一个/ 流/ 需要/ 重新/ 放置/ 时/ 或者/ 产生/ 新/ 的/ 流/ ./ 传统/ OSPF/ 协议/ 运行/ 最短/ 路径/ 算法/ ,/ 对/ 节点/ 评估/ 权值/ 为/ Metric/ // b/ (/ S/ )/ ,/ 其中/ Metric/ 通常/ 取/ 静态/ 值为/ 108bit/ ,/ 通过/ LSA/ 传输/ 信息/ ./ 该/ 算法/ 有/ 两个/ 问题/ :/ 一是/ 节点/ 样本/ 量过大/ ./ 最短/ 路径/ 算法/ 基本/ 通过/ Dijkstra/ 算法/ 实现/ ,/ 此/ 算法/ 的/ 时间/ 复杂度/ 为/ O/ (/ n2/ )/ ,/ n/ 为/ 节点/ 个数/ ./ 当/ 没有/ 采取/ 启发性/ 时/ ,/ 网络/ 节点/ 探测/ 方式/ 是/ 圆形/ 波阵面/ 展开/ 的/ ,/ 当/ 结点/ 数量/ 很多/ 时/ ,/ 算法/ 消耗/ 过大/ ./ 有/ 一些/ 基于/ Dijkstra/ 优化/ 的/ 算法/ ,/ 方式/ 是/ 对/ 样本/ 节点/ 进行/ 预/ 优化/ ,/ 这样/ 可以/ 使得/ 选择/ 样本/ 减少/ ,/ 目前/ 认为/ 最好/ 能够/ 到/ O/ (/ l/ +/ nlogn/ )/ [/ 23/ ]/ ,/ l/ 为/ 链接/ 个数/ ./ 二是/ 节点/ 带宽/ 不能/ 反映/ 当前/ 节点/ 运行/ 时/ 状态/ ./ 传统/ 算法/ 中/ 没有/ 根据/ 实际/ 节点/ 实际/ 运行/ 时/ 情况/ ,/ b/ (/ S/ )/ 越大/ 的/ 节点/ ,/ 被/ 分配/ 的/ 流越/ 多/ ,/ 因此/ 实际上/ 越/ 拥堵/ ./ 因此/ 需要/ 对/ 节点/ 进行/ 运行/ 状态/ 评估/ ./ 节点/ 评估/ 算法/ 对/ 当前/ 节点/ 可/ 承载/ 状态/ 进行/ 评估/ ,/ 路径/ 选择/ 算法/ 淘汰/ 大量/ 不/ 在/ 阈值/ 范围/ 的/ 节点/ 以/ 减少/ 样本量/ ./ 通过/ 这/ 两个/ 步骤/ 能够/ 有效/ 解决/ 传统/ 算法/ 的/ 两个/ 问题/ ./ 采用/ 该/ 算法/ 代价/ 是/ 在/ 控制器/ 端/ 增加/ 全局/ 监控/ 模块/ ,/ 独立/ 动态/ 计算/ 模块/ 以及/ 矩阵/ 维护/ 模块/ ./ 这些/ 额外/ 的/ 模块/ 在/ 数据/ 转发/ 过程/ 中/ 的/ 消耗/ 可/ 忽略不计/ ,/ 因为/ 本身/ 算法/ 是/ 根据/ 流/ 情况/ 在/ 少量/ 样本/ 中/ 取值/ ,/ 这些/ 样本/ 和/ 取值/ 都/ 是/ 独立/ 模块/ 已经/ 维护/ 好/ 的/ 统计/ 结果/ ./ 3.3/ ./ 1/ 节点/ 剩余/ 带宽/ 评估/ 节点/ 剩余/ 带宽/ 评估/ (/ NodeLeftBandwidthEvaluation/ ,/ NLBE/ )/ 方式/ 为/ :/ 设/ 节点/ S/ 可/ 被/ 调用/ 带宽/ 为/ Avail/ (/ S/ )/ ,/ 上限/ 阈值/ 为/ THu/ (/ S/ )/ ,/ 一般/ 的/ 有/ 则/ 剩余/ 带宽/ 为/ Page7/ 可/ 被/ 调用/ 带宽/ 为/ Avail/ (/ S/ )/ =/ THu/ (/ S/ )/ ·/ b/ (/ S/ )/ -/ wl/ (/ S/ )/ ./ 拓扑/ 中/ 节点/ 集合/ SS/ 中/ 各/ 节点/ 状态/ b/ (/ S/ )/ ,/ bXi/ 际/ 观测/ 值/ ,/ 通过/ 信息/ 收集/ 模块/ 收集/ ,/ 并/ 被/ 写/ 到/ 节点/ 状态/ 向量/ ./ wl/ (/ S/ )/ ,/ THu/ (/ S/ )/ ,/ Avail/ (/ S/ )/ 通过/ 计算/ 模块/ 读取/ 节点/ 状态/ 向量/ 矩阵/ 得到/ ,/ 并/ 被/ 写/ 到/ 节点/ 状态/ 向量/ 对应/ 区域/ ./ 路径/ 算法/ 读取/ Avail/ (/ S/ )/ 作为/ 权值/ ,/ 淘汰/ 大量/ 不/ 在/ 阈值/ THAvail/ (/ S/ )/ 范围/ 内/ 节点/ (/ 本/ 节/ 算法/ 为/ 小于/ 阈值/ 情况/ )/ ,/ 计算/ 得出/ 预测/ 最优/ 路径/ ./ 其中/ XXtrigger/ 为/ 触发/ 最短/ 路径/ 算法/ 发生/ 时刻/ 节点/ S/ 同时/ 新/ 生成/ 流/ 集合/ ,/ 一般/ 情况/ 下/ 为了/ 降低/ 算法/ 复杂度/ 和/ 增加/ 即时/ 反应速度/ ,/ THAvail/ (/ S/ )/ 取/ 静态/ 经验值/ ./ 其/ 算法/ 复杂度/ 为/ O/ (/ n/ )/ ./ 3.3/ ./ 2/ 节点/ 剩余/ 流量/ 评估/ NLBE/ 算法/ 是/ 基于/ 节点/ 本身/ 的/ 当前/ 承载能力/ 的/ ,/ 但是/ 流/ 频率/ λ/ Xi/ 对/ 未来/ 某/ 节点/ 运行/ 状态/ 有/ 很大/ 影响/ ./ 假设/ 某个/ 时刻/ 系统/ 检测/ 到/ 一个/ 带宽/ 大/ 的/ 流/ 正在/ 运行/ ,/ 算得/ Avail/ (/ S/ )/ 值/ 比较/ 小/ ./ 但/ 其/ 发生/ 频率/ 很小/ ,/ 之后/ 便/ 很少/ 出现/ ./ 这样/ 会/ 使得/ 这/ 段时间/ 内/ 实际/ Availac/ (/ S/ )/ 值/ 远大于/ 计算/ Avail/ (/ S/ )/ ,/ 造成/ 资源/ 浪费/ ./ 同样/ 情况/ ,/ 如果/ 流/ 带宽/ 小/ 但/ 频率/ 大/ ,/ 实际/ Availac/ (/ S/ )/ 值远/ 小于/ 计算/ Avail/ (/ S/ )/ ,/ 造成/ 系统资源/ 最优/ 分配/ 失败率/ 增加/ ./ 以上/ 两种/ 情况/ 都/ 会/ 造成/ 系统/ 次优/ 状态/ 运行/ 概率/ 增加/ ,/ 整个/ 系统/ 处理/ 能力/ 降低/ ./ 节点/ 剩余/ 流量/ 评估/ (/ NodeLeftFluxEvaluation/ ,/ NLFE/ )/ 方式/ 为/ :/ 记/ 节点/ S/ 可用/ 流量/ 为/ FluxAvail/ (/ S/ )/ ,/ 工作/ 负载/ 可记/ 为/ 流/ 可能/ 消失/ 而/ 造成/ 剩下/ 的/ 流量/ 为/ 可/ 被/ 调用/ 流量/ 为/ FluxAvail/ (/ S/ )/ =/ THu/ 由/ FluxAvail/ (/ S/ )/ 定义/ 可/ 得到/ 一些/ 现象/ :/ 当/ λ/ Xi/ =/ 1/ 时/ ,/ 该/ 算法/ 退化/ 到/ NLBE/ 算法/ ./ 该流/ 发生/ 频率/ λ/ Xi/ =/ 1/ 时/ ,/ 可取/ 固定/ 预估/ 值/ ./ 当流/ 带宽/ 比价/ 平稳/ ,/ 所有/ 的/ 流/ 频率/ λ/ Xi/ / 1/ // 2/ 时/ ,/ 可知/ 一定/ 有/ 足够/ 的/ 容纳/ 带宽/ 不/ 超过/ 阈值/ 的/ 流/ ,/ 这/ 类/ 节点/ 被/ 当做/ 优质/ 节点/ ./ 最短/ 路径/ 算法/ 选择/ 节点/ 时/ 优先/ 考虑/ 优质/ 节点/ ,/ 这样/ 能够/ 尽量/ 缩短/ 寻找/ 节点/ 时间/ ./ 其/ 算法/ 复杂度/ 为/ O/ (/ n/ )/ ,/ 因为/ 阈值/ 和/ 流量/ 都/ 是/ 通过/ 前次/ 数据/ 迭代/ 计算/ 的/ ,/ 因此/ 具有/ 自适应性/ ./ 3.4/ 可选/ 路径/ 评估/ 可/ 选/ 路径/ 评估/ 运用/ 在/ 新建/ 流/ 或者/ 选出/ 一些/ 流后/ 需要/ 重新/ 放置/ 路径/ ,/ 该/ 算法/ 需要/ 额外/ 模块/ ./ 在/ 某/ 时刻/ Ti/ 通过/ 最短/ 路径/ 算法/ 选出/ 的/ 节点/ 状态/ 是/ 时刻/ Ti/ 的/ 状态/ ,/ NLFE/ 中/ 通过/ 流/ 估计值/ λ/ Xi/ 态/ ./ 鉴于/ SDN/ 控制器/ 控制/ 层面/ 可/ 扩展/ 特性/ ,/ 可以/ 建立/ 两/ 节点/ 间/ 的/ 路径/ 数据库/ ,/ 实时/ 算法/ 可/ 通过/ 可/ 选/ 路径/ 上/ 节点/ 状态/ 来/ 评估/ 路径/ 情况/ ./ 当/ 网络拓扑/ 改变/ 时/ ,/ 触发/ 寻找/ 两点/ 路径/ 集合/ 算法/ ,/ 更新/ 各/ 网络/ 路径/ 数据库/ ,/ 该/ 数据库/ 仅/ 记录/ 两/ 节点/ 连通/ 情况/ ,/ 非/ 运行/ 状态/ 的/ 复杂/ 信息/ ./ 本/ 算法/ 默认/ 网络/ 节点/ 硬件/ 上/ 开关/ 频率/ 很/ 低/ ,/ 如/ 在/ 信息/ 收集/ 频率/ 内/ 不会/ 开关/ 多次/ ./ 这样/ 收集/ 到/ 的/ 节点/ 信息/ 被/ 认为/ 是/ 有效/ 的/ ./ 运行/ 状态/ 信息/ 收集/ 模块/ 收集/ 各/ 节点/ 运行/ 时/ 信息/ ,/ 当/ 发现/ 某条/ 路径/ 上/ 的/ 一些/ 节点/ 超载/ 时/ ,/ 排除/ 这些/ 路径/ ,/ 在/ 剩下/ 可/ 选/ 路径/ 中/ ,/ 通过/ 下面/ 的/ 评价/ 算法/ 获取信息/ ,/ 判定/ 可/ 选/ 最优/ 路径/ ./ 3.4/ ./ 1/ 路径/ 带宽/ 评估/ 路径/ 带宽/ 评估/ (/ LinkBandwidthEvaluation/ ,/ LBE/ )/ 方式/ 为/ :/ 设/ 路径/ 集合/ 开始/ 节点/ Ssour/ 和/ 结束/ 节点/ Sdes/ 表示/ 为/ ,/ Path/ (/ Ssour/ ,/ Sdes/ )/ 为/ 两/ 节点/ 可/ 选/ 路径/ 集合/ ,/ Pi/ 为/ 可选/ 路径/ 集合/ 某/ 一条/ 路径/ ,/ Si/ ,/ j/ 为/ Pi/ 路径/ 上/ 的/ 某/ 一/ 传输/ 节点/ ./ 则/ Pi/ 路径/ 可用/ 带宽/ 为/ 每条/ 路径/ 上/ 节点/ 带宽/ 最小值/ 决定/ ,/ 即/ 有/ 路径/ 选择/ 算法/ 选择/ 带宽/ 最大/ 的/ 路径/ ,/ 即/ Pm/ =/ {/ maxbPi/ 其/ 算法/ 复杂度/ 为/ O/ (/ n/ )/ ./ 3.4/ ./ 2/ 路/ 径流量/ 评估/ 路/ 径流量/ 评估/ (/ LinkFluxEvaluation/ ,/ LFE/ )/ :/ 流/ X/ 在/ 路径/ Pi/ 上/ 各/ 节点/ Si/ ,/ j/ 的/ 带宽/ 被/ 认为/ 是/ 一致/ 的/ ,/ 但流/ 的/ 实际/ 频率/ Λ/ Xi/ 于/ 信息/ 收集/ 模块/ 收集/ 信息/ 频率/ Frc/ 并/ 不/ 和/ 优化/ 调整/ 模块/ 频率/ Fro/ 同步/ ,/ 为了/ 使/ 优化/ 调整/ 信息/ 有效/ ,/ 有/ Fro/ -/ Frc/ =/ Δ/ F/ ./ 其中/ ,/ Δ/ F/ 为/ 两/ 模块/ 频率/ 差/ ,/ Δ/ F/ 过/ 大会/ 使得/ 收集/ 信息/ 时效性/ 降低/ ,/ Δ/ F/ 过/ 小/ 频繁/ 触发/ 优化/ 事件/ 会/ 产生/ 过/ 优化/ 状态/ ,/ 即/ 整个/ 系统/ 已经/ 接近/ 优化/ 状态/ ,/ 再次/ 触发/ 优化/ 取得/ 优化/ 结果/ 差别/ 并不大/ ./ Page8Fro/ 除了/ 受到/ 优化/ 调整/ 模块/ 主动/ 触发/ 影响/ 外/ ,/ 还/ 受到/ 流/ 生成/ 和/ 交换机/ 节点/ 超载/ 受到/ 影响/ ,/ 因此/ Fro/ 是/ 个/ 动态/ 值/ ,/ 为/ 反馈/ 函数/ :/ 为了/ 便于/ 取值/ ,/ 一般/ 使/ Δ/ F/ 主动/ 取值/ Δ/ F/ ∈/ [/ 0/ ,/ Frc/ // 2/ ]/ ,/ 从而/ 得到/ 估计值/ Fro/ ./ 在/ 可选/ 路径/ Pi/ 上/ 每个/ 节点/ Si/ ,/ j/ 上测/ 到/ 的/ 频率/ λ/ X/ (/ Si/ ,/ j/ )/ 并/ 不是/ 相等/ 的/ ./ 其/ 相对误差/ 为/ |/ λ/ X/ (/ Si/ ,/ a/ )/ -/ λ/ X/ (/ Si/ ,/ b/ )/ |/ / Δ/ F/ ,/ Si/ ,/ a/ ,/ Si/ ,/ b/ ∈/ Pi/ ./ 流/ X/ 如/ 存在/ 多条/ 可/ 选/ 路径/ ,/ 则/ 各/ 路径/ 必然/ 存在/ 至少/ 两个/ 以上/ (/ 源/ 和/ 目的/ 两个/ 节点/ )/ 重合/ 节点/ ./ 重合/ 节点/ 上/ 的/ 流/ X/ 频率/ ,/ 接近/ 等于/ 该/ 节点/ 上/ 所有/ 可/ 选/ 路径/ 频率/ 之/ 和/ ./ 如图/ 1/ 中/ ,/ 流/ A/ →/ D/ ,/ 有/ 3/ 条可选/ 路径/ ,/ 节点/ A/ 上/ 测试/ 到/ 的/ 流/ 频率/ 为/ 3/ 条路/ 径流/ 频率/ 之/ 和/ ./ 节点/ G/ 上/ 测试/ 到/ 的/ 流/ 频率/ 为/ 两条/ 路径/ 上流/ 频率/ 之/ 和/ ./ 因此/ 对于/ 流/ X/ 在/ Pi/ 上/ 的/ 频率/ ,/ 可取/ 非/ 重合/ 节点/ 最大值/ :/ λ/ X/ (/ Pi/ )/ =/ {/ max/ λ/ X/ (/ Si/ ,/ j/ )/ Si/ ,/ j/ ∈/ Pi/ ,/ 通过/ 统计/ 流在/ 各可选/ 路径/ 上/ 的/ 概率/ ,/ 可/ 估计/ 该流/ 在/ 可选/ 路径/ 上/ 产生/ 的/ 未来/ 流量/ 为/ 对于/ 路径/ 的/ 选择/ ,/ 有/ 两种/ 选择/ 方法/ :/ (/ 1/ )/ 最大/ 流量/ (/ LFE/ -/ MFE/ )/ 最大/ 流量/ 指/ 选择/ 该流/ 所有/ 经过/ 的/ 路径/ 中有/ 最大/ 流量/ 路径/ ,/ 即/ 选择/ 路径/ :/ Pm/ =/ {/ maxFluxX/ (/ Pi/ )/ ,/ Pi/ ∈/ Path/ (/ Ssour/ ,/ Sdes/ )/ }/ ./ 因为/ 该流/ 在/ 这条/ 路径/ 上/ 运行/ 流量/ 最大/ ,/ 被/ 认为/ 该条/ 路径/ 容量/ 最/ 适合/ 该流/ ,/ 该条/ 路径/ 同/ 其他/ 可/ 选/ 路径/ 比/ 起来/ ,/ 不会/ 因为/ 进行/ 调整/ 而/ 最先/ 选择/ 该流/ ./ 其/ 算法/ 复杂度/ 为/ O/ (/ n/ )/ ./ (/ 2/ )/ 最佳/ 匹配/ (/ LFE/ -/ BFE/ )/ 流在/ 运行/ 中/ ,/ 流量/ 有大有小/ ./ 最佳/ 匹配/ 指/ 选择/ 流量/ 最合适/ 的/ 路径/ ,/ 选择/ 合适/ 路径/ 后/ ,/ 相差/ 流量/ 趋近/ 为/ 0/ ,/ 使得/ 该/ 剩余/ 流量/ 不/ 浪费/ ,/ 流/ X/ 的/ 流量/ 期望/ 为取/ 路径/ :/ 其/ 算法/ 复杂度/ 为/ O/ (/ n/ )/ ,/ 以上/ 流量/ 取值/ 都/ 基于/ 流/ 频率/ 参数/ ,/ 因此/ 具有/ 自适应性/ ./ 3.5/ 流/ 评估/ 传统/ 传输方式/ 中/ 节点/ 对流/ 的/ 处理/ 方式/ 是/ 做/ 尽力/ 转发/ 服务/ ,/ 如果/ 节点/ 不能/ 承担/ 服务/ 则/ 丢弃/ 转发/ 包/ ,/ 一些/ 协议/ 如/ TCP/ 会/ 根据/ 丢包/ 情况/ 被动/ 调节/ 流量/ ./ 这种/ 以/ 节点/ 为/ 单位/ 的/ 分布式/ 控制/ 转发/ 方式/ 在/ 全局/ 上/ 对流/ 进行/ 分析/ 控制/ 比较/ 弱/ ,/ 而/ SDN/ 的/ 集中控制/ 方式/ 能够/ 将/ 监控/ 、/ 收集/ 信息/ 、/ 计算/ 路径/ 、/ 转发/ 等/ 过程/ 进行/ 解/ 耦/ 而/ 不/ 损害/ 转发/ 性能/ 和/ 效率/ ,/ 通过/ 独立/ 的/ 进程/ 可以/ 专门/ 全局/ 对流/ 进行/ 控制/ ,/ 可以/ 收集/ 更加/ 丰富/ 的/ 信息/ ./ 通过/ 这些/ 信息/ 集/ 可以/ 对流/ 进行/ 评价/ 计算/ ,/ 独立/ 的/ 转发/ 进程/ 可/ 根据/ 这些/ 评/ 价值/ 进行/ 更好/ 的/ 流/ 调度/ ./ 同样/ 受到/ 流/ 分析/ 粒度/ 大小/ 影响/ ,/ 如果/ 粒度/ 过细/ ,/ 造成/ 的/ 系统/ 负载/ 和/ 延时/ 过高/ ./ 为了/ 使得/ 评价/ 模块/ 有效/ 运行/ ,/ 本文/ 算法/ 只/ 对/ 规约/ 到/ 二元/ 组/ 的/ 流/ 进行/ 评估/ ./ 当/ 一个/ 节点/ 在/ 运行/ 中/ 超载/ 后/ ,/ 控制器/ 需要/ 对/ 该/ 节点/ 进行/ 修正/ ,/ 以便/ 该/ 节点/ 回到/ 正常/ 负载/ 状态/ ./ 传统/ 情况/ 采取/ 鸵鸟/ 策略/ (/ NoawarePolitics/ )/ :/ 最/ 原始/ 的/ 方法/ 就是/ 交换机/ 节点/ 保持/ 工作/ 状态/ 不变/ ,/ 继续/ 对/ 承载/ 的/ 流/ 进行/ 转发/ 服务/ ,/ 该/ 节点/ 继续/ 超载/ 直到/ 堵塞/ (/ 即/ 是/ 负载/ 超过/ 100/ %/ )/ ./ 交换机/ 堵塞/ 后/ 会/ 触发/ 堵塞/ 事件/ ,/ 控制器/ 会/ 标记/ 该/ 节点/ 堵塞/ ,/ 再/ 把/ 上面/ 承载/ 的/ 流/ 调度/ 到/ 其他/ 节点/ ./ 此种/ 策略/ 下/ 交换机/ 必然/ 会/ 出现/ 传输/ 堵塞/ 事件/ ,/ 控制器/ 会/ 进行/ 堵塞/ 事件处理/ 以致/ 系统/ 传输/ 性能/ 降低/ ./ 在/ SDN/ 系统/ 中/ 可/ 采取/ 方法/ 很多/ ,/ 鉴于/ SDN/ 集中控制/ 和/ 控制能力/ 可/ 扩充/ 特性/ ,/ 当/ 一个/ 节点/ 上/ 的/ 负载/ 超过/ 阈值/ 时/ ,/ 可以/ 对/ 当前/ 流/ 进行/ 选择/ ,/ 将/ 一些/ 流/ 转移/ 到/ 其他/ 路径/ ./ 这种/ 方式/ 需要/ 对流/ 进行/ 评估/ ,/ 以便/ 相关/ 选择/ 算法/ 根据/ 其/ 评估/ 值/ 进行/ 选择/ ./ 在/ 选择/ 流中/ ,/ 算法/ 并/ 不/ 复杂/ ,/ 一般/ 选择权/ 值/ 最高/ 最/ 值得/ 排除/ 的/ 流/ ./ 同/ 节点/ 评估/ 和/ 路径/ 评估/ 不同/ 的/ 是/ ,/ 流/ 评估/ 不仅仅/ 注重/ 运行/ 时/ 状态/ ,/ 更加/ 重视/ 其/ “/ 迁移/ ”/ 的/ 困难/ 程度/ ./ 3.5/ ./ 1/ 流/ 运行/ 时/ 状态/ 评估/ 控制器/ 流/ 评价/ 模块/ 评价/ 流/ 运行/ 时/ 状态/ ,/ 可/ 参考/ 参数/ 有流/ 带宽/ 、/ 流/ 频率/ 、/ 流/ 流量/ 、/ 流/ 内容/ 等/ ./ 其/ 目的/ 是/ 把/ 在/ 当前/ 节点/ 状态/ 最/ 不好/ 的/ 流/ 选出/ ,/ 并/ 能/ 使/ 其/ 正常/ 工作/ ./ (/ 1/ )/ 带宽/ 评估/ 最小/ 带宽/ 方法/ (/ MinimumBandwidth/ ,/ Min/ -/ B/ )/ 是从/ 带宽/ 最小/ 的/ 流往/ 上/ 选择/ ./ 将/ 当前/ 节点/ 流/ 集合/ X/ (/ S/ )/ 占用/ 带宽/ bXiX2/ ,/ …/ ,/ Xn/ }/ ./ 从/ 最小/ 到/ 最大/ 开始/ 累加/ ,/ 其/ 和/ 第/ 1/ 次/ 达到/ 需要/ 移动/ 的/ 带宽/ 量/ bout/ 时/ ,/ 开始/ 排除/ 这些/ 短流/ ./ 设/ 向上/ 差值/ 为/ Page9/ 即求/ 最大/ 带宽/ 方法/ (/ MaximumBandwidth/ ,/ Max/ -/ B/ )/ 是/ 将/ 当前/ 节点/ 流/ 带宽/ 排序/ 后/ ,/ 直接/ 选择/ 最大/ 带宽/ 的/ 流/ 移出/ ./ 设/ 向下/ 差值/ 为/ 即求/ 使用/ 最小/ 带宽/ 方法/ 好处/ 是/ 能够/ 恰到好处/ 地/ 选出/ 空间/ ,/ 使得/ 空/ 出/ 浪费/ 最小/ ./ 因为/ 带宽/ 大/ 的/ 流/ 移出来/ 能够/ 合适/ 的/ 路径/ 不太多/ ,/ 其他/ 节点/ 可/ 提供/ 带宽/ 都/ 不够/ ./ 缺点/ 是/ 这些/ 带宽/ 小/ 的/ 流/ 需要/ m/ 次/ 部署/ 工作/ ./ 最大/ 带宽/ 方法/ 能够/ 让/ 空余/ 的/ 带宽/ 可以/ 填补/ 更/ 多/ 的/ 流/ ,/ 该/ 节点/ 超载/ 的/ 几率/ 降低/ ,/ 移出/ 流/ 的/ 重新部署/ 的/ 次数/ 少/ 了/ ,/ 缺点/ 是/ 被/ 移出/ 的/ 带宽/ 大/ 的/ 流/ 可能/ 没/ 其他/ 交换机/ 节点/ 有/ 足够/ 的/ 剩余/ 带宽/ 能够/ 承担/ ./ 其/ 算法/ 复杂度/ 为/ O/ (/ n/ )/ ./ (/ 2/ )/ 流量/ 评估/ 通过/ 带宽/ 评价/ 流/ 运行/ 状态/ 不/ 需要/ 额外/ 模块/ ,/ 但/ 参数/ 改成/ 流量/ bXi/ λ/ Xi/ 不能/ 更加/ 准确/ 评估/ 流/ 运行/ 状态/ ./ 当/ 增加/ 流量/ bXi/ λ/ Xi/ 时/ ,/ 也/ 可用/ 类似/ 带宽/ 评估/ 的/ 方法/ 进行/ 流量/ 评估/ ./ 将/ 带宽/ bXi/ (/ MinimumFlux/ ,/ Min/ -/ F/ )/ ,/ 最大/ 流量/ 方法/ (/ MaximumFlux/ ,/ Max/ -/ F/ )/ ./ 其/ 算法/ 复杂度/ 为/ O/ (/ n/ )/ ./ 3.5/ ./ 2/ 流可/ 管理/ 状态/ 评估/ 流/ 管理/ 评价/ 主要/ 在/ 控制器/ 调度/ 流/ 方面/ ,/ 当/ 对流/ 进行/ 操作/ 时会/ 有/ 相应/ 代价/ ./ 一般/ 情况/ 在/ 流/ 传输/ 中是/ 路径/ 分配/ 好/ 就/ 不再/ 移动/ 的/ ,/ 除非/ 路径/ 节点/ 发生/ 超载/ 触发/ 重新/ 寻找/ 路径/ ./ 但/ 在/ 数据中心/ 中当/ 需要/ 高效/ 承载/ 更/ 多/ 服务/ 时/ ,/ 需要/ 优化/ 流/ 的/ 路径/ 选择/ ,/ 对流/ 的/ 操作/ 评价/ 就/ 需要/ 考虑/ 流/ 移动/ 的/ 代价/ ./ 流/ 的/ “/ 管理/ 性质/ ”/ 分/ 两种/ 场景/ :/ 一是/ 指/ SDN/ 系统/ 对流/ 可控/ 程度/ ,/ 如流/ 非正常/ 工作/ 管理/ ,/ 流/ 转移/ 的/ 困难/ 程度/ ;/ 二是/ 指/ 在/ 移动/ 流/ 场景/ 中/ 移动/ 便捷性/ 和/ 移动/ 后/ 提高/ 系统/ 整体/ 效率/ 程度/ ./ 3.5/ ./ 2.1/ 违反/ 服务/ 等级/ 协议/ 评估/ 在/ 流/ 转发/ 中/ ,/ 默认/ 流/ 的/ 频率/ λ/ Xi/ 的/ ,/ 其/ 占用/ 带宽/ bXi/ 但是/ ,/ 也/ 有/ 可能/ 在/ 流/ 传输/ 中/ 出现/ 奇点/ 情况/ ,/ 如/ 某/ 一/ 时刻/ 带宽/ 激增/ ./ 用户/ 本身/ 可能/ 并不知道/ ,/ 如/ DDOS/ 攻击/ 等等/ ,/ 流量/ 不/ 受/ 交换机/ 带宽/ 限制/ 突然/ 增大/ ./ 本文/ 算法/ 为了/ 避免出现/ 这种/ 情况/ ,/ 使得/ 统计数据/ 对/ 原本/ 数据/ 造成/ 污染/ ,/ 附带/ 了/ 违反/ 服务/ 等级/ 协议/ (/ Service/ -/ LevelAgreementViolation/ ,/ SLAV/ )/ 处理/ 模块/ ./ 目前/ ,/ SDN/ 并/ 没有/ 官方/ 的/ 类似/ 于云/ 基础设施/ 即/ 服务/ (/ InfrastructureAsAService/ ,/ IAAS/ )/ 层/ 的/ 完整/ 契约/ 模块/ ,/ 如/ 限制/ 流量/ (/ 本身/ 是/ 最大/ 服务/ 的/ )/ ,/ 契约/ 服务/ ,/ 用户/ 管理/ 等等/ ./ 本文/ 在/ 实验/ 中/ 增加/ 部分/ 简单/ 功能/ ,/ 避免/ 奇点/ 干扰/ 减少/ 统计/ 误差/ ,/ 该/ 模块/ 在/ 算法/ 中是/ 可选/ 的/ ./ 在/ SDN/ 扩展/ 模块/ 中/ ,/ 也/ 可以/ 通过/ 流/ 用户/ 同/ SDN/ 进行/ 契约/ 协商/ ,/ 即/ 服务/ 等级/ 协议/ (/ Service/ -/ LevelAgreement/ ,/ SLA/ )/ ./ SDN/ 系统/ 承诺/ 满足/ 服务/ ,/ 如果/ SDN/ 系统/ 违反/ 发生/ SLA/ 情况/ ,/ 系统/ 会/ 有/ 一些/ 惩罚/ 补偿/ ./ 但/ 用户/ 发生/ SLAV/ ,/ 则/ 系统/ 可/ 对/ 其/ 服务/ 进行/ 选择/ ,/ 拒绝服务/ 或者/ 评估/ 为/ 优先级/ 比较/ 低/ 的/ 服务/ 权值/ ./ Radware/ ①/ 公司/ 在/ OpenDaylight/ ②/ 控制器/ 系统/ 框架/ 内/ 提出/ 了/ Defense4All/ 产品/ ,/ 主要/ 目的/ 是/ 防范/ DDOS/ 攻击/ ,/ 为/ 用户/ 提供/ 安全/ 管理/ 和/ 服务/ ./ 本文/ 增加/ 类似/ 模块/ ,/ 该/ 模块/ 在/ 算法/ 中是/ 可选/ 的/ ,/ 仅/ 辅助/ 信息/ 采集/ 模块/ 实现/ 简单/ 功能/ :/ 通过/ 检测/ 流量/ 避免/ 奇点/ 干扰/ 减少/ 统计/ 误差/ ./ 需要/ 注意/ 的/ 是/ 流量/ 激增/ 本身/ 不能/ 准确/ 标明/ 该流/ 是/ 受到/ 劫持/ 或是/ 处于/ 不/ 正常/ 工作/ 状态/ ,/ 因此/ 需要/ 与/ 用户/ 契约/ 模块/ 协同工作/ ,/ 与/ 其中/ 声明/ 的/ 流量/ 大小/ 进行/ 比/ 对/ ./ OpenDaylight/ 项目/ 中/ VirtualTenantNetwork/ 提出/ 了/ 租户/ 概念/ ,/ 该/ 子项目/ 还/ 在/ 发展/ 中/ ,/ 但/ 没有/ 特定/ 标准规定/ 租户/ 应该/ 声明/ 何种/ 消息/ 格式/ 和/ 内容/ ./ 其/ 算法/ 思想/ 如下/ :/ 设/ 一个/ 流/ Y/ 第/ i/ 次/ 统计/ 该流/ 的/ 带宽/ 记为/ bY/ (/ i/ )/ ,/ 经过/ 第/ n/ 次/ 统计/ ,/ 该流/ Y/ 统计/ 的/ 平均/ 流量/ 为/ 在/ 第/ n/ +/ 1/ 次/ ,/ 如果/ 流量/ 激增/ ,/ 即/ 超过/ 本身/ 某个/ 限度/ 时/ bY/ (/ n/ +/ 1/ )/ -/ bY/ / μ/ ·/ bY/ +/ ν/ ,/ 该流/ 被/ 认为/ 是/ 超过/ 系统/ 能够/ 承担/ 能力/ ,/ 其中/ 参数/ μ/ ∈/ R/ +/ 、/ ν/ ∈/ R/ 可以/ 作为/ 系统/ 与/ 用户/ 的/ 服务/ 契约/ ./ 流/ Xi/ 发生/ 违约/ 时/ ,/ 被/ SLAV/ 管理/ 模块/ 设置/ 权值/ Slten/ (/ Xi/ )/ ,/ 并/ 被/ 记录/ 到/ 该/ 流/ 的/ 状态/ 库中/ ./ Slten/ (/ Xi/ )/ 可/ 适当/ 取/ 比较/ 大/ 的/ 值/ ,/ 以便/ 让/ 流/ 选择/ 程序/ 将/ 该流/ 移出/ 繁忙/ 节点/ ,/ 避免/ 引起/ 整个/ 系统/ 性能/ 降低/ ./ SDN/ 因/ 自身/ 调度/ 也/ 发生/ 违反/ SLA/ 情况/ 时/ ,/ 控制器/ 也/ 可/ 增加/ 模块/ 记录/ 流/ Xi/ 被/ SDN/ 系统/ 违反/ SLA/ 情况/ ./ 在/ 调度/ 流/ 时/ ,/ 可/ 通过/ SLAV/ 管理/ 模块/ 设置/ 权值/ Slsys/ (/ Xi/ )/ ,/ 并/ 通过/ 设置/ 系统/ 惩罚/ 值/ Penalty/ (/ Slsys/ (/ Xi/ )/ )/ ①/ ②/ Page10/ 增加/ 调度/ 模块/ 的/ 权值/ 来/ 提高/ 该流/ 服务质量/ ./ 这种/ 方式/ 对/ 某/ 一/ 具体/ 流/ 具有/ 优化/ 性/ ,/ 不/ 提高/ 整个/ 系统/ 性能/ ./ 在/ 本文/ 中/ ,/ 该/ 部分/ 在/ 实验/ 部分/ 被/ 忽略/ ./ 3.5/ ./ 2.2/ 流可/ 移动性/ 评估/ (/ FlowMovableEvalua/ -/ 流/ 管理/ 中有/ 两种/ 情况/ :/ (/ 1/ )/ 新/ 的/ 流/ Xnew/ 生成/ 时/ ,/ 设/ Xnew/ 开始/ 节点/ 和/ 目的/ 节点/ 分别/ 为/ Ssour/ 和/ Sdes/ ,/ 因/ 节点/ 负载/ 情况/ ,/ 系统/ 无法/ 通过/ 最短/ 路径/ 算法/ 创建/ 一条/ 最短/ 路径/ Pi/ 来/ 负载/ 该流/ ;/ (/ 2/ )/ 对/ 已/ 运行/ 的/ 流/ Xt/ ,/ 当前/ 所用/ 路径/ 为/ Pi/ ,/ 可/ 选/ 路径/ 集合/ Path/ (/ Ssour/ ,/ Sdes/ )/ ,/ Si/ ,/ j/ 为/ Pi/ 路径/ 上/ 的/ 某/ 一/ 传输/ 节点/ ./ 假设/ 运行/ 过程/ 中/ Si/ ,/ j/ 拥堵/ 或者/ 超过/ 阈值/ ,/ 系统/ 会/ 选择/ 另外/ 一条/ 可/ 选/ 路径/ Pa/ 来/ 传输流/ Xt/ ./ 传统/ 方法/ 中/ 如果/ 没有/ 可/ 选/ 路径/ ,/ 即/ :/ (/ 1/ )/ 没/ 找到/ Pi/ 或者/ (/ 2/ )/ 没/ 找到/ Pa/ ,/ 系统/ 就/ 认为/ 无法/ 服务/ ./ 不过/ 在/ 集中控制/ 情况/ 下/ ,/ 系统/ 可/ 尝试/ 预判/ 是否/ 可以/ 将/ 部分/ 权值/ 低/ 的/ 流/ 转移/ 到/ 其他/ 路径/ ,/ 在/ 路径/ Pi/ 增加/ 额外/ 能力/ 来/ 承载/ 流/ Xi/ 服务/ ./ 流/ 的/ 可/ 移动性/ 评估/ 可/ 通过/ 更改/ 流表/ 的/ 节点/ 数目/ 来/ 参考/ ./ (/ 1/ )/ 情况/ 中/ ,/ 可/ 选择/ Path/ (/ Ssour/ ,/ Sdes/ )/ 中/ 路径/ 上/ 承载/ 流量/ 最小/ 的/ 路径/ Pi/ ,/ 尝试/ 增加/ 流/ Xnew/ ,/ 来/ 得到/ 过载/ 节点/ 集/ Sov/ (/ Pi/ )/ ,/ 从而/ 规约/ 到/ (/ 2/ )/ 情况/ ./ 对/ 每个/ 过载/ 节点/ Si/ ,/ j/ ∈/ Sov/ (/ Pi/ )/ 上/ 承载/ 的/ 所有/ 流/ 集合/ X/ (/ Si/ ,/ j/ )/ 中/ 每/ 条流/ Xi/ ,/ 通过/ 路径/ 选择/ 算法/ 得到/ 新可选/ 路径/ Pa/ 后/ ,/ 有/ 相同/ 路径/ 节点/ 集合/ 为/ Pi/ ∩/ Pa/ ./ 这/ 对于/ 原/ 路径/ Pi/ ,/ 需要/ 在/ 流表中/ 减少/ Xi/ 流/ 表项/ 的/ 节点/ 集合/ 为/ Sdel/ =/ Pi/ -/ Pi/ ∩/ Pa/ ,/ 需要/ 在/ 流表中/ 增加/ Xi/ 流/ 表项/ 的/ 节点/ 集合/ 为/ Sadd/ =/ Pa/ -/ Pi/ ∩/ Pa/ ./ 流/ 转移/ 代价/ Mov/ (/ Xi/ )/ 定义/ 为/ Mov/ (/ Xi/ )/ =/ Cost/ (/ Sadd/ )/ +/ Cost/ (/ Sdel/ )/ ,/ 在/ SDN/ 系统/ 中/ ,/ 各/ 节点/ 调整/ 流/ 转移/ 代价/ 有着/ 细微差别/ ,/ 与/ 各/ 节点/ 流表/ 以及/ 整个/ 系统/ 的/ 运行/ 状态/ 有关/ ,/ 本/ 算法/ 认为/ 每个/ 更改/ 节点/ 消耗/ 相等/ ./ 流/ 评价/ 权值/ 定义/ 为/ MXi/ =/ Mov/ (/ Xi/ )/ -/ η/ ·/ Slten/ (/ Xi/ )/ ,/ 其中/ Slten/ (/ Xi/ )/ 为/ 可/ 选值/ ./ 根据/ 以上/ 分析/ ,/ 则/ 可以/ 在/ 当前/ 节点/ Si/ ,/ j/ 上/ 承载/ 的/ 所有/ 流/ 集合/ X/ (/ Si/ ,/ j/ )/ 中/ ,/ 对/ 所有/ 流/ 进行/ 筛选/ 和/ 权值/ 排序/ ./ 选出/ 权值/ 较/ 小/ 的/ 流/ 进行/ 移出/ ./ 设有/ r/ 个/ ,/ 将/ 这些/ 流/ 移出/ 后/ ,/ 路径/ 空/ 出/ 流量/ 为/ 其/ 满足条件/ 为/ M/ (/ X/ )/ / bX/ λ/ X/ ./ 当/ 移动/ 流过/ 多/ 或者/ 修改/ 节点/ 过多/ ,/ 系统/ 可能/ 因为/ 修改/ 流表/ 消耗/ 过多/ 时间/ ,/ 修改/ 后/ 系统/ 也/ 不易/ 恢复/ 稳定/ 状态/ ./ 通过/ 定义/ 移动/ 阈值/ Mup/ 来/ 控制/ 移动/ 情况/ ,/ 当/ 移动/ 节点/ 数/ 超过/ Mup/ 可/ 判定/ 不/ 移动/ 该流/ ./ 即/ 要求/ 当/ 没有/ 可/ 选/ 路径/ 时/ ,/ 即/ 每/ 条流/ 都/ 找/ 不到/ 替代/ 路径/ ,/ 或者/ 找到/ 路径/ 但/ 不/ 满足/ Mup/ 阈值/ ,/ 则/ 认为/ 系统/ 不能/ 经过/ 调整/ 满足/ 服务/ ./ 其/ 算法/ 复杂度/ 为/ O/ (/ n2/ )/ ,/ 同样/ 由于/ 采取/ 4.1/ 节中/ 记录/ 前次/ 优化/ 数据/ 方式/ ,/ 我们/ 不/ 需要/ 每次/ 都/ 全局/ 计算/ 样本/ 值/ ,/ 只/ 需用/ 当前/ 值同/ 上次/ 优化/ 后/ 的/ 值/ 进行/ 计算/ ,/ 其/ 算法/ 复杂度/ 为/ 可降/ 为/ O/ (/ n/ )/ ./ 由于/ Mup/ 与/ 具体/ 系统/ 拓扑/ 和/ 任务/ 负债/ 有关/ ,/ 只能/ 通过/ 经验/ 取值/ ,/ 因此/ 流/ 可以/ 移动性/ 评估/ 具有/ 启发性/ ./ 4/ 系统/ 框架/ 及/ 运行/ 流程/ SDN/ 可以/ 通过/ 不同/ 协议/ 来/ 实现/ ,/ 使用/ Open/ -/ Flow/ 优点/ 在于/ 能够/ 控制/ 流量/ 通过/ 交换机/ 方式/ ,/ 并/ 通过/ 网络/ 传递/ 到/ 网络/ 拥有者/ 、/ 单个/ 用户/ 或者/ 单个/ 应用程序/ ./ 能够/ 让/ 用户/ 制定/ 一些/ 路径/ 政策/ ,/ 以便/ 找到/ 可用/ 带宽/ 、/ 较/ 少/ 延迟/ 或/ 阻塞/ ./ OpenFlow/ 也/ 有/ 扩展性/ 和/ 安全性/ 等/ 弱点/ ./ 安全性/ 弱点/ 是因为/ 集中控制/ 的/ 原因/ ,/ 外部/ 攻击/ 可以/ 从/ 一个点/ 攻击/ ,/ 不像/ 分散式/ 的/ 会/ 相对/ 安全/ ./ ONF/ 现在/ 也/ 有/ 专门/ 的/ 项目组/ 解决/ 安全性/ 问题/ ,/ 但/ 目前/ 还/ 没有/ 解决/ 扩展/ 问题/ 的/ 项目组/ ./ OpenFlow/ 协议/ 1.3/ 版本/ 提高/ 了/ 扩展性/ ,/ 但/ 还/ 达/ 不到/ 商业/ 程度/ 需求/ ./ 同时/ ,/ 目前/ 实现/ SDN/ 北向/ 接口/ (/ NorthBoundInterface/ ,/ NBI/ )/ 的/ 方法/ 在/ 数量/ 已经/ 超过/ 20/ 多个/ ,/ 虽然/ 每/ 一种/ 方法/ 都/ 很/ 有/ 价值/ ,/ 但是/ 数量/ 过多/ 也/ 造成/ 编程/ 接口/ 的/ 混乱/ ,/ 网络/ 服务提供商/ 、/ 系统/ 架构/ 和/ 应用/ 开发人员/ 都/ 有/ 采用/ 不同/ 的/ 接口/ 来/ 实现/ 自己/ 的/ SDN/ 应用/ 实例/ 的/ 方案/ ./ 因此/ 本文/ 提出/ 的/ 各个/ 模块/ ,/ 可能/ 部分/ 能够/ 通过/ 使用/ 一些/ 控制器/ 提供/ 的/ API/ 实现/ ,/ 但/ 不能/ 保证/ 所有/ 控制器/ API/ 能够/ 完全/ 实现/ 所有/ 模块/ ./ 在/ 不能/ 用/ API/ 实现/ 的/ 情况/ 下/ ,/ 需要/ 编写/ 独立/ 模块/ 协同/ 控制器/ 系统/ 工作/ ./ 4.1/ 系统/ 框架/ 节点/ 、/ 流/ 和/ 路径/ 等/ 网络/ 状态/ 信息/ 运算/ 模块/ 通过/ 控制器/ App/ 实现/ ,/ 各/ 状态/ 信息/ 通过/ 数据库/ 储存/ 其/ 历史/ 信息/ ,/ 其/ 原始数据/ 、/ 计算/ 数据/ 和/ 优化/ 数据/ 存于/ 对应/ 数据表/ 中/ ,/ 供/ 与/ 状态/ 信息管理/ 模块/ 提取/ ./ 某/ 时刻/ 的/ 优化/ 数据/ 是/ 通过/ 当前/ 网络/ 状态/ 数据/ 和/ 该/ 时刻/ 前/ 一/ 时刻/ 优化/ 后/ 的/ 历史数据/ 计算/ 而/ 来/ ,/ 因此/ 不/ 需要/ 对/ 大量/ 历史/ 原始数据/ 计算/ 便/ 可/ 得到/ 当前/ 时刻/ 最优/ 值/ ./ Framework/ 中/ 各/ 模块/ 进程/ 独立/ ,/ 各/ 模块/ 负责/ 结点/ 管理/ ,/ 路径/ 管理/ ,/ 流/ 管理/ ,/ SLAV/ 管理/ 功能/ ./ 调度/ 模块/ 负载/ 选取/ 优/ Page11/ 化后/ 数据/ 进行/ 部署/ ./ 以/ Path/ 模块/ 为例/ ,/ 模块/ 内部/ 构成/ 如图/ 3/ ./ 各/ 模块/ 内部/ 功能/ 如下/ :/ (/ 1/ )/ 信息/ 收集/ 模块/ 收集/ 相关/ 信息/ ,/ 包括/ 节点/ 运行/ 状态/ 、/ 节点/ 位置/ 、/ 链路/ 情况/ 、/ 流/ 运行/ 状态/ 信息/ 等等/ ./ 收集/ 信息/ 过于/ 频繁/ ,/ 系统/ 全局/ 信息/ 会/ 比较/ 精确/ ,/ 但/ 带来/ 的/ 消耗/ 也/ 过/ 大/ ./ 在/ 实际/ 运行/ 过程/ 中/ ,/ 可/ 由/ 系统管理员/ 设定/ 一个/ 初值/ F0/ ,/ 然后/ 根据/ 实际/ 运行/ 情况/ 及/ 反馈/ 信息/ ,/ 调整/ 收集/ 信息/ 频率/ ,/ 避免/ 因为/ 收集/ 信息/ 带来/ 的/ 消耗/ ,/ 具体/ 值/ 在/ 5.1/ ./ 3/ 节中/ 设置/ ./ (/ 2/ )/ 权值/ 计算/ 模块/ 通过/ 文章/ 中/ 提到/ 的/ 自/ 适应/ 启发式/ 算法/ ,/ 通过/ 收集/ 到/ 的/ 信息/ 数据库/ ,/ 计算/ 相关/ 权值/ ./ (/ 3/ )/ 优先/ 值/ 计算/ 模块/ 该/ 模块/ 将/ 权值/ 根据/ 评价/ 算法/ 进行/ 计算/ ,/ 得出/ 最终/ 优选/ 结果/ 或者/ 优选/ 结果/ 集合/ ,/ 由/ 调度/ 模块/ 选取/ 进行/ 部署/ ./ 其中/ ,/ 为了/ 尽量/ 缩短/ 自/ 适应/ 算法/ 样本/ 的/ 收集/ 时间/ ,/ 需要/ 一定/ 频率/ 将/ 各/ 状态/ 信息/ 保存/ 到/ 数据库/ ./ 模块/ 重新启动/ 能够/ 读取/ 这些/ 数据/ ,/ 这样/ 能够/ 获得/ 之前/ 已经/ 统计/ 的/ 样本/ 信息/ ,/ 提高/ 预估/ 值/ 精确度/ ./ 估价/ 数据库/ 包括/ 流/ 经过/ 节点/ ,/ 流/ 带宽/ 等流/ 运行/ 状态/ 信息/ ./ 当新流/ 增加/ 时/ 可以/ 改写/ 新流/ 增加/ 事件/ ,/ 控制器/ 登记/ 同时/ 可以/ 直接/ 建立/ 流/ 初始化/ 信息/ ./ 当/ 一个/ 节点/ 没/ 经过/ 预估/ 值/ 突然/ 堵塞/ 时/ ,/ 同样/ 可/ 改写/ 堵塞/ 事件/ ,/ 分析/ 堵塞/ 原因/ (/ 堵塞/ 的/ 流/ 情况/ )/ ,/ 哪个/ 流/ 引起/ 故障/ ,/ 然后/ 记录/ 相关/ 信息/ 到流/ 状态/ 数据库/ ,/ 这个/ 时候/ 可以/ 根据/ 对/ 引起/ 堵塞/ 的/ 流/ 评价/ Slten/ (/ Xi/ )/ 值/ ./ 4.2/ 工作/ 流程/ 所有/ 模块/ 都/ 是/ 通过/ 事件驱动/ ,/ 其中/ 信息/ 收集/ 和/ 状态/ 计算/ 都/ 是/ 线程/ 独立/ 模块/ 通过/ 一定/ 频率/ 触发/ ./ 收集/ 模块/ 收集/ 到/ 信息/ 后/ ,/ 写/ 在/ 原始/ 数据库/ ,/ 再/ 通过/ 状态/ 计算/ 模块/ 进行/ 优化/ 计算/ ,/ 得出/ 一些/ 权值/ 和/ 筛选/ 后/ 的/ 数据/ 集/ ./ 调度/ 模块/ 再/ 根据/ 事件处理/ 函数/ 选择/ 这些/ 数据/ 集/ 进行/ 合理/ 计算/ ,/ 得出/ 结果/ 后/ 重新部署/ ./ 在/ 实现/ 算法/ 评价/ 时/ ,/ 本文/ 关注/ 的/ 事件/ 如下/ :/ (/ 1/ )/ 节点/ 堵塞/ 节点/ 堵塞/ 由/ SDN/ 系统/ 本身/ 触发/ 事件/ ,/ 可/ 改写/ 节点/ 堵塞/ 事件处理/ 函数/ ,/ 标记/ 引发/ 堵塞/ 的/ 流/ ,/ 并/ 通过/ 流/ 评价/ 模块/ 得到/ 流权值/ ,/ 根据/ 这些/ 权值/ 选择/ 一个/ 或者/ 多个/ 流/ 进行/ 分流/ ./ (/ 2/ )/ 节点/ 超载/ 即/ 节点/ 超过/ 阈值/ ,/ 与/ 节点/ 堵塞/ 不同/ 的/ 是/ 节点/ 超载/ 时/ 节点/ 还/ 可以/ 继续/ 工作/ ./ 该/ 事件/ 由/ 检控/ 模块/ 发起/ 预警/ 事件/ ,/ 并/ 由/ 调度/ 模块/ 处理/ ,/ 处理/ 方式/ 同/ 节点/ 堵塞/ ./ (/ 3/ )/ 新建/ 流/ 当/ 节点/ 有/ 新建/ 流/ 时/ ,/ 系统/ 触发/ 新建/ 流/ 事件/ ./ 可/ 改写/ 该/ 事件/ :/ 最短/ 路径/ 算法/ 读取/ 的/ 权值/ 改为/ 状态/ 计算/ 模块/ 算出/ 的/ 值/ ,/ 当/ 最/ 短/ 路径/ 算法/ 找/ 不到/ 路径/ 时/ 添加/ 分流/ 算法/ ./ 5/ 实验/ 和/ 算法/ 评估/ 状态/ 优化/ 模块/ 通过/ 不同/ 评价/ 算法/ 得出/ 相应/ 数据/ 值/ ,/ 调度/ 算法/ 根据/ 这些/ 值/ 部署/ 到/ 系统/ 中/ ,/ 根据/ 系统/ 运行/ 情况/ 来/ 评估/ 这些/ 评价/ 算法/ 性能/ ,/ 同时/ 与/ SDN/ 系统/ 缺省/ 算法/ 进行/ 比较/ ./ 5.1/ 实验/ 5.1/ ./ 1/ 平台/ 介绍/ 由于/ 条件/ 限制/ ,/ 本文/ 选择/ 最/ 方便/ 获得/ 的/ Mininet/ ①/ ,/ 目前/ Mininet/ 是/ 大部分/ 科研机构/ 和/ 工程/ 实验室/ 接受/ 的/ 交换机/ 模拟/ 运行/ 环境/ ./ 但/ Mininet/ 设计/ 构架/ 在/ 控制器/ 扩展/ 情况/ ,/ 存在/ 以下/ 讨论/ 议题/ :/ (/ 1/ )/ 单一/ 交换机/ 不能/ 同时/ 指定/ 连接/ 多个/ 控制器/ ;/ (/ 2/ )/ 同一/ 实验/ 场景/ 中/ ,/ 独立/ 交换机/ 不能/ 指定/ 不同/ 的/ 控制器/ IP/ ;/ (/ 3/ )/ 多/ 控制器/ 之间/ 交互/ 和/ 发现/ ./ 因此/ ,/ 算法/ 中/ 各/ 独立/ 进程/ 模块/ 只能/ 被/ 部署/ 运行/ 在/ 单一/ 控制器/ 上/ ,/ 实验/ 结果/ 不能/ 很/ 好/ 展现/ 算法/ 框架/ 在/ 分布式/ 控制器/ 环境/ 下/ 性能/ 优势/ ./ 尽管如此/ ,/ 算法/ 框架/ 能够/ 对/ 未来/ 运行/ 状态/ 有/ 一定/ 预判性/ ,/ 能够/ 有效/ 避免/ 拥塞/ ,/ 在/ 单机/ 控制器/ 环境/ 中/ 能够/ 体现/ 效率/ 优势/ ,/ 5.2/ 节中/ 实验/ 结果/ 能够/ 说明/ 情况/ ./ 5.1/ ./ 2/ 硬件/ 设置/ 实验/ 选择/ POX/ ②/ 作为/ 控制器/ 系统/ ,/ 算法/ 基于/ POX/ 中/ Python/ 脚本/ 实现/ ,/ 可以/ 推广/ 到/ 其他/ 控制器/ 平台/ ./ 控制器/ 所在/ 软件/ 环境/ 为/ Ubuntu14/ ./ 04/ 桌面/ ①/ ②/ Page1264/ 位/ 版本/ ,/ 硬件/ 环境/ 为/ DELLR710/ ,/ 其中/ CPU/ 为/ 双/ XeonE5620/ ,/ 2.4/ GHz/ ;/ 内存/ 16GB/ ,/ 硬盘/ 600GB/ ./ Mininet/ 中/ 交换机/ 选择/ 胖树为/ 拓扑/ 结构/ 模拟/ 数据中心/ 场景/ ./ 在/ 严格/ 胖树/ 拓扑/ 结构/ 情况/ 下/ [/ 24/ ]/ ,/ k/ 个/ POD/ (/ 组/ )/ 里/ 有/ k/ 个叶/ 节点/ 交换机/ ,/ 每个/ POD/ 下层/ k/ // 2/ 交换机/ 连接/ k/ // 2/ 个/ Host/ ,/ k/ 个/ POD/ 共/ 可/ 连接/ k3/ // 4/ 给/ 个/ Host/ ,/ 其中/ 有叶/ 节点/ 交换机/ k2/ 个/ ,/ 中心/ 交换机/ (/ k/ // 2/ )/ 2/ 个/ ,/ 核心/ 路由器/ 1/ 个/ ./ 一般/ 数据中心/ 一个/ cluster/ 的/ Host/ 数量/ 在/ 1000/ 以上/ ,/ 可以/ 取/ k/ =/ 16/ 来/ 模拟/ 1024/ 个/ Host/ 场景/ ,/ 此时/ 叶/ 节点/ 交换机/ 256/ 个/ ,/ 核心/ 交换机/ 64/ 个/ ./ 但/ 这/ 在/ 实际/ 实验/ 中/ 模拟/ 320/ 个/ 交换机/ 已/ 达到/ 承载/ 服务器/ 的/ 极限/ 性能/ ,/ 无法/ 再/ 进行/ 模拟/ 流/ 的/ 传输/ 工作/ ./ 而/ 在/ 实际/ 数据中心/ 网络拓扑/ 搭建/ 中/ ,/ 为了/ 减少/ 交换机/ 成本/ ,/ 并/ 不/ 遵循/ 严格/ 胖树/ 拓扑/ 结构/ ./ 本文/ 实验/ 在/ Mininet/ 环境/ 中/ 各/ 节点/ 组成/ 仿胖/ 树结构/ 8/ 个/ POD/ 中/ 各/ 中心/ 交换机/ 与/ 核心/ 路由器/ 相连/ ./ 每个/ POD/ 有/ 8/ 个/ 交换机/ ,/ 每个/ 叶/ 节点/ 交换机/ 连接/ Host/ 个数/ 服从/ [/ 11/ ,/ 20/ ]/ 的/ 随机/ 分布/ ,/ 这种/ 结构/ 可/ 处理/ 700/ 多个/ Host/ 情况/ ./ 整个/ 系统结构/ 有/ 64/ 个叶/ 节点/ 交换机/ ,/ 8/ 个/ 中心/ 交换机/ ,/ 叶/ 节点/ 交换机/ 带宽/ 为/ 100MB/ ,/ 中心/ 交换机/ 带宽/ 1GB/ ./ 模拟/ 环境/ 所在/ 软件/ 环境/ 为/ Ubuntu14/ ./ 04/ 服务器/ 64/ 位/ 版本/ ,/ Mininet/ 版本/ 为/ 2.1/ ./ 0/ ./ 硬件/ 环境/ 为/ DELLR710/ ,/ 其中/ CPU/ 为/ 双/ XeonE5620/ ,/ 2.4/ GHz/ ;/ 内存/ 32GB/ ,/ 双硬盘/ 600GB/ ./ 为了/ 在/ 单一/ 承载/ 硬件/ 服务器/ 上/ 尽可能/ 模拟/ 多/ 交换机/ 节点/ 来/ 接近/ 实际/ 数据中心/ 拓扑/ 情况/ 而/ 不/ 降低/ 性能/ ,/ 实验/ 没有/ 设计/ 在/ 交换机/ 传输/ 带宽/ 为/ 10GB/ 和/ 100GB/ 场景/ ./ 通过/ 同/ 比例/ 设计/ 传输/ 流量/ 大小/ ,/ 并/ 不/ 影响/ 对/ 算法/ 在/ 实际/ 运行/ 中/ 的/ 效率/ 和/ 性能/ 评估/ ./ 实验/ 中/ Mininet/ 没有/ 生成/ 与/ 交换机/ 相连/ 的/ Host/ ,/ 这/ 是因为/ :/ (/ 1/ )/ 算法/ 只/ 关心/ 交换机/ 运行/ 性能/ ,/ 将/ 叶/ 节点/ 交换机/ 中/ 各/ Host/ 之间/ 传输/ 的/ 流通/ 过流/ 规约/ 为叶/ 节点/ 交换机/ 之间/ 的/ 流/ ;/ (/ 2/ )/ 算法/ 中/ 不/ 涉及/ Host/ ,/ 为了/ 节省/ 模拟/ 运行/ 环境/ 承载/ 服务器/ 的/ 资源/ 和/ 提高/ 性能/ ,/ 流/ 直接/ 在/ 节点/ 交换机/ 端/ 产生/ ./ 5.1/ ./ 3/ 数据/ 设置/ 在/ Mininet/ 中/ 可以/ 通过/ ping/ ,/ iperf/ ,/ wget/ ,/ netperf/ ,/ netcat/ 或者/ python/ 环境/ 下/ 的/ scapy/ 等/ 命令/ 在/ Mininet/ 控制台/ 指定/ 某/ 特定/ 节点/ 产生/ 流/ ./ 但/ 这些/ 流/ 生成/ 方式/ 是/ 静态/ 的/ ,/ 不能/ 动态/ 模拟/ 实际/ 数据中心/ 流/ 工作/ 情况/ ./ 为了/ 更好/ 模拟/ 实际/ 网络/ 运行/ 情况/ ,/ 试验/ 中/ 设计/ POX/ 程序/ 通过/ 独立/ 进程/ 来/ 模拟/ 动态/ 流/ 产生/ 过程/ ,/ 通过/ Wireshark/ 进行/ 接受/ 包/ 统计/ ./ 根据/ 5.1/ ./ 2/ 小节/ 中/ 特别/ 指出/ 的/ Mininet/ 模拟/ 数据中心/ 环境/ 的/ 承载/ 服务器/ 实际/ 情况/ ,/ 流/ 带宽/ 与/ 交换机/ 带宽/ 设计/ 成/ 一定/ 比例/ ./ 实验/ 中/ 通过/ 设计/ 长流/ 和/ 短/ 流来/ 模拟/ 实际/ 流/ 带宽/ 分布/ ,/ 流/ 传输/ 节点/ 配对/ 在/ 叶/ 节点/ 交换机/ 集合/ 中/ 随机/ 产生/ ,/ 在/ 实验/ 中/ 设置/ 为/ 每个/ 叶/ 节点/ 交换机/ 每秒/ 产生/ 规约/ 后/ 的/ 流/ (/ 3.1/ 节/ )/ 个数/ 为/ 服从/ 泊松/ 分布/ ,/ 其中/ λ/ 值/ 取值/ 范围/ 为/ [/ 50/ ,/ 2000/ ]/ ,/ 当流/ 数目/ 总数/ 越大时/ ,/ 其/ 并发流/ 配对/ 越/ 多/ ,/ 即/ λ/ 取值/ 越大/ ./ 同时/ 规定/ 当/ 发生/ 拥塞/ 时/ ,/ 保存/ 该/ 流下/ 次/ 重发/ 直到/ 传输/ 成功/ ./ 在/ 节点/ 交换机/ // 中心/ 交换机/ 带宽/ 100MB/ // 1GB/ 情况/ 下/ ,/ 大/ 流/ 带宽/ 大小/ 服从/ [/ 1Mbps/ ,/ 10Mbps/ ]/ 为/ 区间/ 的/ 随机/ 分布/ ;/ 小流/ 带宽/ 大小/ 服从/ [/ 1Kbps/ ,/ 10Kbps/ ]/ 为/ 区间/ 的/ 随机/ 分布/ ./ 各种/ 相同/ 带宽/ 大小/ 的/ 流/ 发生/ 频率/ 分别/ 服从/ 指数分布/ ,/ 每次/ 实验/ 流/ 的/ 数量/ 总和/ 相等/ ,/ 长短/ 流/ 按照/ 设定/ 配给/ 比例/ 产生/ ,/ 缺省/ 情况/ 下/ 比例/ 各为/ 50/ %/ ./ 5.1/ ./ 4/ 算法/ 设置/ 实验/ 过程/ 中/ ,/ 系统/ 运行/ 过程/ 如下/ :/ (/ 1/ )/ 节点/ 正常/ 工作/ ,/ 按照/ 控制器/ 分配/ 好/ 的/ 流表/ 正常/ 进行/ 转发/ 包/ 工作/ ./ (/ 2/ )/ 通过/ MAD/ 或者/ MADF/ 判断/ 节点/ 是否/ 超过/ 阈值/ ./ (/ 3/ )/ 节点/ 状态/ 超过/ 阈值/ ,/ 触发/ 该/ 节点/ 重新/ 选择/ 路径/ 事件/ ./ (/ 4/ )/ 路径/ 选择/ 事件/ 使用/ 最短/ 路径/ (/ NLBE/ 和/ NLFE/ )/ ,/ 最优/ 可/ 选/ 路径/ (/ LBE/ 和/ LFE/ )/ 算法/ ,/ 两个/ 路径/ 算法/ 因/ 参数/ 不同/ 分别/ 有/ 带宽/ 和/ 流量/ 两种/ 实现/ 方式/ ./ (/ 5/ )/ 如果/ 分流/ 事件/ 增加/ 流/ 评价/ 功能/ ,/ 则/ 对流/ 使用/ 可/ 移动性/ 评估/ (/ FME/ )/ 算法/ ./ MAD/ -/ NLBE/ 标签/ 表示/ 实验/ 中/ 采取/ 算法/ 为/ 节点/ 阈值/ 使用/ 带宽/ 估计/ 算法/ ,/ 当/ 需要/ 选择/ 路径/ 时/ 使用/ 节点/ 剩余/ 带宽/ 评估/ 算法/ ./ 其他/ 算法/ 标签/ 可/ 从表/ 2/ 中/ 得出/ 相关/ 内容/ ./ 我们/ 设置/ 以/ 带宽/ 为/ 评价/ 基础/ 的/ MAD/ -/ NLBE/ ,/ MAD/ -/ LBE/ 和/ 以/ 流量/ 为/ 评价/ 基础/ 的/ MADF/ -/ NLBE/ ,/ MADF/ -/ LBE/ ,/ MADF/ -/ NLBE/ -/ FME/ ,/ MADF/ -/ LBE/ -/ FME/ 算法/ 进行/ 实验/ ,/ 并/ 进行/ 相互/ 比较/ ./ 同时/ 我们/ 也/ 引入/ NOX/ 和/ Floodlight/ 中/ 缺省/ 的/ 基于/ OSPF/ 协议/ 的/ 最/ 短/ 路径/ 算法/ (/ ShortP/ )/ ,/ 与/ 以上/ 算法/ 进行/ 比较/ ./ Page135/ ./ 1.5/ 算法/ 时间/ 和/ 初始值/ 设置/ 由于/ 我们/ 利用/ 额外/ 模块/ 统计/ 流/ 频率/ ,/ 并/ 将/ 最近/ 一次/ 优化/ 后/ 的/ 数据/ 进行/ 记录/ 作为/ 下/ 一次/ 优化/ 操作/ 的/ 输入/ 值/ ,/ 这样/ 减少/ 了/ 大/ 样本量/ 的/ 统计/ 和/ 取值/ 计算/ ./ 4.1/ 节中/ 提到/ ,/ F0/ 值/ 设置/ 同/ 收集/ 信息/ 模块/ 相关/ ,/ 与/ 实验/ 中/ 交换机/ 数目/ ,/ 链路/ 数目/ 和/ 任务/ 数目/ 相关/ ,/ 也/ 同/ 实验/ 机器/ 性能/ 相关/ ./ 由于/ 没有/ 准确/ 值/ ,/ 我们/ 只能/ 通过/ 统计数据/ 得出/ 合理/ 值/ ./ 我们/ 测/ 到/ ,/ 在/ 任务/ 随机/ 分布/ 情况/ 和/ 5.1/ ./ 2/ 节中/ 硬件/ 环境/ 下/ ,/ 控制器/ 收集/ 所有/ 数据/ 并/ 计算结果/ 进行/ 部署/ 需要/ 2s/ ~/ 3s/ 延时/ ,/ 我们/ 将/ F0/ 值设/ 为/ 3s/ ./ 当/ F0/ 值/ 超过/ 10s/ 时/ ,/ 当/ 突发/ 任务/ 增多/ 时/ ,/ 优化/ 设置/ 逐渐/ 失效/ ./ 5.2/ 实验/ 评价/ 系统/ 可/ 通过/ 多种/ 参数/ 评价/ 性能/ ./ 本/ 文选/ 系统/ 服务/ 时间/ 宏观/ 上/ 评价/ 各/ 策略/ 在/ 系统/ 上/ 运行/ 效率/ ,/ 选取/ 各个/ 策略/ 运行/ 中/ 发生/ 的/ 分流/ 次数/ 来/ 评价/ 对流/ 服务/ 造成/ 的/ 影响/ ,/ 节点/ 超载/ 预警/ 次数/ 评价/ 策略/ 对/ 节点/ 智能/ 调度/ 能力/ ./ 在/ 各项/ 实验/ 中/ ,/ 能够/ 观测/ 到/ 系统/ 存在/ 一个/ 处理/ 能力/ 阈值/ ,/ 超过/ 该/ 阈值/ 系统/ 开始/ 频繁/ 出现/ 部分/ 流/ 得不到/ 服务/ 情况/ ./ 该/ 阈值/ 与/ 网络拓扑/ 、/ 流/ 配对/ 分布/ 、/ 流量/ 大小/ 等/ 网络/ 运行/ 时/ 状态/ 有关/ ./ 该/ 阈值/ 是/ 动态/ 值/ ,/ 只能/ 通过/ 观测/ 评测/ 数据/ 确定/ 其/ 范围/ ,/ 不能/ 得到/ 准确/ 值/ ./ 5.2/ ./ 1/ 服务/ 时间/ 相同/ 流/ 数量/ 和/ 大小/ 情况/ 下/ ,/ 各个/ 算法/ 处理/ 时间/ 不同/ ,/ 我们/ 在/ 相同/ 负载/ 和/ 资源/ 情况/ 下/ 比较/ 各个/ 方案/ 处理/ 时间/ ./ 实验/ 结果/ 如图/ 4/ 所示/ ./ 通过/ 图例/ 可以/ 看到/ ,/ 最短/ 路径/ 算法/ (/ ShortP/ )/ 开始/ 和/ 其他/ 算法/ 差别/ 处于/ 线性关系/ ,/ 但是/ 到/ 了/ 107/ 附近/ ,/ 性能/ 急剧/ 变差/ ./ 这/ 是因为/ 到/ 了/ 系统/ 处理/ 阈值/ ,/ 开始/ 有流/ 不能/ 得到/ 服务/ ./ 带宽/ 和/ 流量/ 的/ 权值/ 都/ 能够/ 有效/ 降低/ 寻路/ 节点/ 样本量/ ,/ 因此/ 各/ 优化/ 算法/ 都/ 能够/ 更/ 快/ 响应/ ./ 在/ 系统/ 处理/ 阈值/ 之后/ ,/ 也/ 能/ 保持/ 较/ 快/ 的/ 反应时间/ ./ 流量/ 能够/ 更加/ 精确/ 的/ 反应/ 节点/ 状态/ ,/ 因此/ 在/ 选择/ 节点/ 算法/ 中/ 选择/ 的/ 路径/ 能够/ 更好/ 地/ 完成/ 流/ 传输服务/ ,/ 体现/ 在/ 整体/ 服务/ 时间/ 更少/ ./ 5.2/ ./ 2/ 发生/ 的/ 分流/ 事件/ 次数/ 当新流/ 产生/ 时/ ,/ 如果/ 通过/ 分配/ 路径/ 算法/ 不能/ 找到/ 可/ 承载/ 的/ 路径/ ,/ 就/ 可能/ 触发/ 分流/ 事件/ ./ 该/ 情况/ 表明/ 可/ 选/ 路径/ 上/ 已经/ 饱和/ ,/ 我们/ 对/ 算法/ MADF/ -/ NLFE/ 和/ MADF/ -/ LFE/ 分别/ 增加/ 了/ 触发/ 主动/ 分流/ 事件处理/ :/ MADF/ -/ NLFE/ -/ FME/ 和/ MADF/ -/ LFE/ -/ FME/ ,/ 与/ 原/ 算法/ 比较/ 处理结果/ 如图/ 5/ 所示/ ./ 从/ 实验/ 结果/ 可以/ 看到/ ,/ 在/ 一般/ 情况/ 下/ ,/ 采用/ MADF/ 比/ MAD/ 情况/ 要/ 好/ ,/ 采用/ 可/ 选/ 路径/ 比/ 最/ 短/ 路径/ 要/ 好/ ./ 不过/ 超过/ 系统/ 处理/ 能力/ 阈值/ 后/ ,/ 可/ 选/ 路径/ 比/ 最/ 短/ 路径/ 要/ 差/ ,/ 这/ 是因为/ ,/ 最短/ 路径/ 获取/ 的/ 是/ 即时/ 信息/ ,/ 可/ 选/ 路径/ 是/ 经过/ 一定/ 频率/ 计算/ 的/ 统计/ 值/ ,/ 超过/ 系统/ 处理/ 能力/ 阈值/ 后/ ,/ 可/ 选/ 路径/ 反应/ 能力/ 没有/ 最短/ 路径/ 快/ ,/ 从而/ 不能/ 得到/ 服务/ 的/ 流/ 更/ 多/ ./ 在/ 使用/ 分流/ 处理/ 功能/ 后/ ,/ 系统/ 并/ 不能/ 完全/ 消除/ 该/ 事件/ ,/ 从/ 实验/ 结果/ 可以/ 看出/ ,/ 产生/ 流/ 与/ 该/ 事件/ 大部分/ 满足/ log/ 取值/ 的/ 线性关系/ ./ 5.2/ ./ 3/ 节点/ 过载/ 次数/ 本文/ 通过/ 观测/ 节点/ 过载/ 次数/ 来/ 判定/ 算法/ 的/ 稳定性/ ./ 如果/ 算法/ 发生/ 节点/ 过载/ 次数/ 过大/ ,/ 则/ 该/ 算法/ 分配/ 流/ 承载/ 路径/ 并/ 不能/ 考虑/ 流/ 运行/ 情况/ ,/ 会/ 造成/ 路径/ 重新分配/ ./ 节点/ 过载/ 情况/ 如图/ 6/ ./ Page14/ 从/ 实验/ 结果/ 可以/ 看出/ ,/ 原始/ 的/ 最/ 短/ 路径/ 算法/ 引起/ 的/ 节点/ 过载/ 次数/ 很/ 高/ ,/ 具有/ 运行/ 时/ 情况/ 的/ 算法/ 能够/ 减少/ 过载/ 情况/ ./ 但是/ 超过/ 系统/ 处理/ 阈值/ 时/ 各/ 算法/ 节点/ 过载/ 数目/ 趋近/ 相同/ ,/ 这/ 是因为/ 大量/ 流/ 情况/ 已经/ 有/ 很多/ 节点/ 趋于/ 饱和状态/ ,/ 没有/ 过多/ 的/ 空余/ 节点/ 承担/ 额外/ 流/ ./ 分流/ 处理/ 进程/ 在/ 系统/ 性能/ 阈值/ 之内/ 能/ 很/ 好/ 的/ 避免/ 节点/ 过载/ ,/ 但/ 超过/ 阈值/ 引起/ 的/ 改变/ 有限/ ./ 5.3/ 实验/ 结论/ 通过/ 以上/ 3/ 个/ 实验/ 场景/ ,/ 对/ 各种/ 评价/ 体系/ 进行/ 实验/ 评价/ ./ 发现/ 增加/ 评价/ 体系/ 后/ ,/ 系统/ 在/ 处理/ 能力/ 阈值/ 之内/ 能够/ 有效/ 增加/ 系统/ 性能/ ./ 增加/ 额外/ 处理/ 模块/ 后/ ,/ 能够/ 减少/ 系统/ 节点/ 过载/ 等/ 消耗/ ./ 但是/ 超过/ 系统/ 能力/ 阈值/ 后/ ,/ 算法/ 性能/ 降低/ ,/ 当/ 需要/ 适时/ 信息/ 时/ ,/ 一些/ 原先/ 运行/ 很/ 好/ 的/ 算法/ 会/ 失效/ ./ 此外/ ,/ 本文/ 提出/ 的/ 算法/ 框架/ 中/ ,/ 认为/ 控制器/ 端/ 模块/ 因/ CPU/ 达到/ 100/ %/ ,/ 可能/ 会因/ 等待/ CPU/ 分配/ 计算资源/ 造成/ 延时/ ,/ 从而/ 使/ 算法/ 有效性/ 降低/ ./ 实验/ 中/ ,/ 在/ 控制器/ 和/ Mininet/ 承载/ 服务器端/ 观测/ CPU/ 负载/ 情况/ ./ 在/ 流/ 数目/ 为/ [/ 900/ ,/ 107/ ]/ 区间/ ,/ 承载/ 服务器/ CPU/ 运行/ 没有/ 达到/ 100/ %/ ./ 在/ 流/ 数目/ 108/ 时/ ,/ Mininet/ 端/ 无/ 影响/ ,/ 控制器/ 端/ 有/ 间歇性/ 达到/ 100/ %/ ,/ 不过/ 持续时间/ 少于/ 1000ms/ ./ 在/ 流/ 数目/ 109/ 时/ ,/ 因/ 控制流/ 的/ 并发/ 发生/ 数目/ 过大/ ,/ 控制器/ 和/ Mininet/ 承载/ 服务器/ 都/ 发生/ CPU/ 过载/ 情况/ ,/ 此种/ 情况/ 下因/ Mininet/ 模拟/ 开始/ 失效/ ,/ 比较/ 难以/ 分析/ 算法/ 有效性/ ,/ 故/ 在/ 实验/ 中/ 没有/ 流/ 数目/ 109/ 情况/ ./ 6/ 总结/ 与/ 展望/ 本文/ 详细/ 讨论/ 了/ SDN/ 集中控制/ 和/ 控制能力/ 扩展/ 特性/ ,/ 并/ 对/ 当前/ 转发/ 模式/ 进行/ 了/ 分析/ ./ 分析/ 了/ 静态/ 特性/ 的/ 优缺点/ ,/ 引进/ 了/ 节点/ 状态/ 、/ 可/ 选/ 路径/ 、/ 流/ 状态/ 3/ 个/ 评价/ 体系/ ,/ 通过/ 在/ 控制器/ 端/ 编写/ APP/ 或者/ 更改/ 基础/ 模块/ 来/ 实现/ ./ 在/ 系统/ 运行/ 时/ 各个/ 模块/ 独立/ 线性/ 工作/ ,/ 收集/ 特定/ 信息/ 并/ 加以/ 优化/ 计算/ ,/ 得出/ 优化/ 统计/ 信息/ 提供/ 给/ 相应/ 供/ 控制器/ 调度/ 模块/ 使用/ ./ 与/ 一般/ 算法/ 比较/ ,/ 因为/ 有/ 了/ 额外/ 的/ 计算/ 优化/ 结果/ ,/ 控制器/ 不/ 需要/ 额外/ 计算/ 最优/ 值/ ,/ 因此/ 能够/ 迅速/ 反应/ ,/ 保持/ 长时间/ 的/ 最优/ 状态/ ./ 通过/ Mininet/ 模拟/ 实际/ 交换机/ 情况/ ,/ 设计/ POX/ 相关/ APP/ ,/ 部署/ 后/ 经过/ 实验/ 得出结论/ :/ 在/ 控制器/ 能力/ 满足/ 额外/ 模块/ 运行/ 需要/ 下/ ,/ 改进/ 后/ 的/ 体系结构/ 和/ 算法/ 能够/ 在/ 系统/ 阈值/ 能力/ 范围/ 内/ 有效/ 的/ 提高/ 传输/ 性能/ ./ 随着/ 作者/ 对/ 该/ 问题/ 的/ 研究/ 深入/ ,/ 发现/ 还有/ 许多/ 工作/ 未来/ 值得注意/ 和/ 跟进/ ./ 实验/ 改进/ ./ 由于/ Mininet/ 的/ 限制/ ,/ 一些/ 实际/ 数据/ 的/ 测量/ 比较/ 难以/ 进行/ ,/ 如/ :/ (/ 1/ )/ 直接/ 通过/ 测试/ 数据中心/ 的/ 实际/ 流量/ 值来/ 确定/ 算法/ 性能/ 和/ 有效性/ 是/ 最/ 直接/ 的/ ./ 但/ 因/ 实际/ 数据中心/ 拓扑/ 庞大/ ,/ 流量/ 节点/ 分散/ ,/ Mininet/ 目前/ 还/ 不能/ 达到/ 该/ 扩展/ 度/ ;/ (/ 2/ )/ Mininet/ 目前/ 不/ 支持/ 多/ 控制器/ ,/ 同时/ 本身/ 不/ 支持/ 多/ 物理/ 服务器/ 承载/ ,/ 因此/ 本文/ 算法/ 中/ 的/ 独立/ 线程/ 模块/ scale/ -/ out/ 的/ 特性/ 在/ 少/ 样本量/ 情况/ 下/ 只能/ 体现/ 少量/ 优势/ ./ 静态/ 模型/ 扩展/ ./ 本文/ 的/ 根据/ 流/ 特性/ 产生/ 的/ 启发性/ 算法/ ,/ 算法/ 复杂度/ 比较/ 小/ ,/ 原因/ 是/ 部署/ 时延/ 比较/ 小/ ./ 更/ 精确性/ 的/ 算法/ ,/ 算法/ 复杂度/ 增加/ ,/ 也/ 会/ 增加/ 控制器/ 模块/ 复杂度/ ./ 自/ 适应/ 启发/ 算法/ 的/ 上限/ 分析/ 、/ 准确度/ 分析/ 需要/ 进行/ 跟进/ 研究/ ./ 动态/ 模型/ ./ 在/ 考虑/ 到/ 算法/ 效率/ 时/ ,/ 同时/ 也/ 要/ 考虑/ 到/ 额外/ 模块/ 的/ 复杂度/ 和/ 重新部署/ 的/ 时延/ ,/ 需要/ 折中/ 平衡/ ./ 系统/ 本身/ 符合/ 一些/ Markov/ 转换/ 特性/ ,/ 可以/ 通过/ 系统/ 动态/ 建模/ 来/ 实现/ 该/ 模型/ ,/ 通过/ 随机/ 过程/ 的/ 一些/ 特性/ ,/ 在/ 统计学/ 特性/ 上/ 进行/ 预测/ 分析/ ./ 流/ 复杂/ 分析/ ./ SDN/ 流量/ 预测/ 模型/ 运行/ 方式/ 是/ 在/ 控制器/ 端/ 增加/ 流/ 信息/ 统计/ 模块/ ,/ 根据/ 流/ 被/ 监控/ 到/ 的/ 历史/ 统计/ 特性/ 来/ 预测/ 其/ 未来/ 行为/ ./ 本文/ 对流/ 的/ 分析/ 限于/ 流/ 带宽/ 和/ 频率/ ,/ 流/ 也/ 可/ 从/ 内容/ 特性/ 来/ 推测/ 传输/ 性质/ ./ 如/ 根据/ 协议/ 标签/ 对流/ 进行/ 统计/ 性/ 取样/ 标记/ 进行/ 长短/ 流/ 分析/ ,/ 这样/ 也/ 会/ 增加/ 模块/ 复杂度/ ./ 模块/ 的/ 扩展/ ./ 本文/ 算法/ 是/ 以/ POX/ 为/ 基础/ ,/ 基于/ Openflow/ 协议/ ,/ 所以/ 一些/ 模块/ 是/ 以/ 该/ 系统/ 的/ APP/ 来/ 实现/ 的/ ./ 目前/ SDN/ 也/ 有/ 其他/ 控制器/ 系统/ 如/ Flood/ -/ light/ 、/ Beacon/ 、/ Trema/ 、/ Maestro/ 、/ SNAC/ 、/ OpenDay/ -/ light/ 等/ ./ 各种/ 控制器/ 系统/ 体系结构/ 并/ 不/ 一样/ ,/ APP/ 实现/ 功能/ 的/ 方式/ 不/ 一致/ ,/ 统一/ 的/ API/ 接口/ 能够/ 更加/ 有利于/ 模块/ 的/ 扩展/ ./ 模块/ 的/ 性能/ ./ 本文/ 提到/ 的/ 模块/ 都/ 运行/ 在/ 控制器/ 主机/ 上/ ,/ 这些/ 计算/ 消耗/ 不算/ 入/ 转发/ 消耗/ 中/ ./ 但是/ 控制器/ 主机/ 能力/ 有限/ ,/ 目前/ 没有/ 一个/ 很/ 好/ 的/ 平台/ 能够/ 分散/ 计算能力/ 和/ 数据处理/ 能力/ ./ 因此/ 模块/ 数量/ 过多/ 时会/ 影响/ 处理/ 效率/ ./ 

