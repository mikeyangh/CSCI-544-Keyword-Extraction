Page1/ 一种/ 基于/ 数据/ 访问/ 特征/ 的/ 层次化/ 缓存/ 优化/ 设计/ 李崇民/ 王海霞/ 张熙/ 汪/ 东升/ (/ 清华大学/ 计算机科学/ 与/ 技术/ 系/ 北京/ 100084/ )/ (/ 清华/ 信息/ 科学技术/ 实验室/ 北京/ 100084/ )/ 摘要/ 随着/ 片上/ 可/ 集成/ 的/ 处理器/ 核数/ 增加/ ,/ 多核/ 处理器/ 的/ 片/ 上/ 通信/ 延迟/ 不断/ 增大/ ,/ 目录/ 存储/ 开销/ 也/ 随之/ 线性/ 增长/ ./ 层次化/ 缓存/ 结构/ 将片/ 上/ 缓存/ 递归/ 划分/ 为/ 多级/ 区域/ ,/ 并/ 将/ 数据/ 复制到/ 各级/ 区域/ 内以/ 减小/ 片上/ 通信/ 延迟/ ,/ 同时/ 通过/ 多级/ 目录/ 结构/ 降低/ 了/ 目录/ 存储/ 开销/ ./ 文中/ 通过/ 对/ 数据/ 访问/ 特征/ 进行/ 分析/ ,/ 提出/ 一种/ 新型/ 改进/ 层次化/ 缓存/ 结构/ (/ EHCD/ )/ ,/ 将/ 从/ 片外/ 读入/ 的/ 数据/ 直接/ 放置/ 在/ 请求者/ 所属/ 的/ 底层/ 区域/ 内/ ,/ 在/ 降低/ 延迟/ 的/ 同时/ ,/ 保证/ 私有/ 数据/ 在/ 片/ 上/ 最后/ 一级/ 缓存/ 中/ 只有/ 一份/ 副本/ ,/ 提高/ 片上/ 存储/ 的/ 空间/ 利用率/ ,/ 具有/ 良好/ 的/ 可扩展性/ ./ 对/ 16/ 核/ 处理器/ 的/ 实验/ 结果表明/ ,/ EHCD/ 设计/ 比/ 传统/ 共享/ 缓存/ 结构/ 执行/ 时间/ 平均/ 减少/ 24/ %/ ,/ 比/ 原有/ 层次化/ 缓存/ 设计/ 执行/ 时间/ 平均/ 减少/ 15/ %/ ,/ 具有/ 很/ 好/ 的/ 优化/ 效果/ ./ 关键词/ 片上/ 多处理器/ ;/ 层次化/ 缓存/ ;/ 多级/ 目录/ ;/ 数据/ 访问/ 特征/ 1/ 引言/ 随着/ 半导体/ 工艺/ 的/ 进步/ ,/ 单个/ 芯片/ 上/ 能够/ 集成/ 越来越/ 多/ 的/ 处理器/ 核/ ,/ 片上/ 多处理器/ (/ ChipMulti/ -/ Processor/ ,/ CMP/ )/ 已经/ 成为/ 计算机/ 体系结构/ 研究/ 的/ 主要/ 方向/ 之一/ ./ 片上/ 存储系统/ 的/ 性能/ 是/ 影响/ 片上/ 多处理器/ 系统/ 性能/ 的/ 一个/ 主要/ 因素/ ./ 片上/ 多处理器/ 的/ 片/ 上/ 存储/ 主要/ 采用/ 非均/ 一/ 缓存/ 结构/ (/ Non/ -/ UniformCacheArchitecture/ ,/ NUCA/ )/ 结构/ [/ 1/ ]/ ./ 在/ NUCA/ 结构/ 中/ ,/ 最后/ 一级/ 缓存/ 被/ 分成/ 多个/ bank/ 放置/ 在/ 片/ 上/ 的/ 不同/ 位置/ ./ 一个/ 处理器/ 核到/ 某个/ bank/ 的/ 访问/ 延迟/ 由/ 两/ 部分/ 组成/ :/ 缓存/ bank/ 访问/ 延迟/ 和/ 片/ 上/ 通信/ 延迟/ ./ 如果/ 不/ 考虑/ 片上/ 网络/ 拥塞/ ,/ 片上/ 通信/ 延迟/ 与/ 处理器/ 核到/ 其要/ 访问/ 的/ 缓存/ 之间/ 的/ 距离/ 成正比/ ./ 处理器/ 核/ 访问/ 邻近/ 的/ 缓存/ 所/ 需/ 的/ 延迟/ 较/ 低/ ,/ 而/ 访问/ 距离远/ 的/ 缓存/ 就/ 需要/ 较/ 高/ 的/ 延迟/ ./ 如果/ 处理器/ 核所/ 需要/ 的/ 大部分/ 数据/ 要/ 从/ 距离/ 较远/ 的/ 缓存/ 处/ 获得/ ,/ 片上/ 通信/ 延迟/ 会/ 比较/ 长/ ,/ 从而/ 降低/ 系统/ 的/ 性能/ ./ 数据/ 的/ 复制/ 和/ 迁移/ 技术/ 通过/ 将/ 数据/ 复制/ 或/ 迁移/ 到/ 使用/ 数据/ 的/ 处理器/ 核/ 邻近/ 的/ 缓存/ 中/ ,/ 减少/ 片上/ 的/ 通信/ 延迟/ ,/ 提高/ 最后/ 一级/ 缓存/ 系统/ 的/ 性能/ ./ 层次化/ 缓存/ [/ 2/ ]/ 是/ 一种/ 静态/ 的/ 数据/ 复制技术/ ,/ 它/ 针对/ 片上/ 多处理器/ 中/ 存储/ 层次/ 与/ 片/ 上/ 网络/ 的/ 特点/ ,/ 将片/ 上/ 资源/ 递归/ 地/ 划分/ 成/ 多级/ 区域/ ./ 当/ 一个/ 处理器/ 核/ 需要/ 访问/ 某个/ 数据/ 时/ ,/ 在/ 包含/ 发出请求/ 的/ 处理器/ 核/ 的/ 每/ 一级/ 区域/ 内/ 都/ 保存/ 一份/ 该/ 数据/ 的/ 副本/ ./ 层次化/ 缓存/ 保证/ 处理器/ 的/ 大多数/ 据/ 请求/ 能够/ 在/ 距离/ 该/ 处理器/ 较近/ 的/ 底层/ 区域/ 内部/ 得到/ 满足/ ,/ 是/ 降低/ 片上/ 通信/ 延迟/ 的/ 一种/ 有效/ 设计/ ./ 多级/ 区域/ 的/ 副本/ 位置/ 需要/ 通过/ 目录/ 进行/ 维护/ ,/ 但是/ 全/ 目录/ 结构/ 的/ 存储/ 开销/ 较大/ ./ 早期/ 的/ 层次化/ 目录/ [/ 3/ ]/ 采用/ 树型/ 结构/ 来/ 记录/ 数据/ 的/ 共享/ 情况/ ,/ 有效/ 减少/ 了/ 目录/ 的/ 开销/ ,/ 但/ 由于/ 在/ 树根/ 附近/ 的/ 流量/ 过于/ 集中/ ,/ 容易/ 成为/ 系统/ 的/ 瓶颈/ ,/ 影响/ 了/ 层次化/ 目录/ 的/ 广泛应用/ ./ PHD/ [/ 4/ ]/ 通过/ 将/ 树/ 的/ 根/ 节点/ 按照/ 地址/ 分布/ 到/ 整个/ 系统/ 中/ ,/ 解决/ 了/ 上述/ 瓶颈/ 问题/ ./ 不过/ PHD/ 是/ 应用/ 在/ 超/ 立方体/ 网络/ 中/ 的/ ,/ 其/ 各级/ 目录/ 在/ 物理/ 上/ 是/ 分开/ 的/ ./ 在/ 访问/ 各级/ 目录/ 时/ 需要/ 较大/ 的/ 延迟/ ./ 层次化/ 缓存/ [/ 2/ ]/ 借鉴/ PHD/ 的/ 思想/ ,/ 利用/ 存储/ 开销/ 较/ 小/ 的/ 多级/ 目录/ 来/ 维护/ 片上/ 数据/ 的/ 共享/ 信息/ ,/ 同时/ 解决/ 了/ 数据/ 就近/ 访问/ 和/ 目录/ 存储/ 开销/ 问题/ ./ 通过/ 对/ 数据/ 访问/ 特征/ 进行/ 分析/ ,/ 可以/ 发现/ 在/ 最后/ 一级/ 缓存/ 的/ 容量/ 绝大部分/ 被/ 私有/ 数据/ 占据/ ,/ 并且/ 大多数/ 的/ 私有/ 数据/ 只/ 被/ 访问/ 一次/ ./ 对于/ 一个/ 私有/ 数据/ ,/ 如果/ 在/ 各级/ 区域/ 内/ 都/ 为/ 其/ 保存/ 一个/ 数据/ 副本/ ,/ 会/ 降低/ 最后/ 一级/ 缓存/ 的/ 空间/ 利用率/ ./ 本文/ 对/ 层次化/ 缓存/ 结构/ 进行/ 优化/ ,/ 对片/ 外/ 读入/ 数据/ 的/ 放置/ 策略/ 进行/ 了/ 改进/ ,/ 将/ 从/ 片外/ 读入/ 的/ 数据/ 直接/ 放置/ 在/ 请求者/ 所属/ 的/ 底层/ 区域/ 内/ ,/ 保证/ 私有/ 数据/ 在/ 片/ 上/ 最后/ 一级/ 缓存/ 中/ 只有/ 一份/ 副本/ ,/ 以/ 提高/ 片上/ 最后/ 一级/ 存储/ 的/ 空间/ 利用率/ ./ 模拟实验/ 结果表明/ ,/ 改进/ 的/ 层次化/ 缓存/ (/ EnhancedHierarchicalCacheDirectory/ ,/ EHCD/ )/ 设计/ 比/ 传统/ 共享/ 缓存/ 结构/ 执行/ 时间/ 平均/ 减少/ 24/ %/ ,/ 比/ 原有/ 层次化/ 缓存/ 设计/ 执行/ 时间/ 平均/ 减少/ 15/ %/ ,/ 具有/ 很/ 好/ 的/ 优化/ 效果/ ./ 2/ 相关/ 工作/ 目前/ 对片/ 上/ 存储/ 进行/ 优化/ 的/ 研究/ 工作/ 主要/ 集中/ 在/ 数据/ 的/ 复制/ 与/ 迁移/ 上/ ,/ 主要/ 思想/ 是/ 把/ 将/ 数据/ 放置/ 在/ 与/ 请求/ 该/ 数据/ 的/ 处理器/ 核/ 邻近/ 的/ 缓存/ bank/ 中/ ,/ 这样/ 对/ 该/ 数据/ 的/ 后续/ 访问/ 的/ 延迟/ 就/ 会/ 比较/ 小/ ,/ 从而/ 提高/ 整个/ 系统/ 的/ 性能/ ./ CC/ [/ 5/ ]/ 将/ 从/ 本地/ 私有/ 缓存/ 中/ 替换/ 出来/ 的/ 数据/ 放到/ 邻近/ 的/ 有/ 空闲/ 空间/ 的/ L2/ 缓存/ 中/ ,/ 为了/ 获得/ 各/ L2/ 缓存/ 的/ 空闲/ 情况/ ,/ CC/ 将/ 各/ L2/ 缓存/ 的/ Tag/ 集中/ 在/ 一起/ 进行/ 管理/ ./ DCC/ [/ 6/ ]/ 将/ CC/ 中/ 集中式/ 的/ Tag/ 分成/ 多个/ 分布式/ 的/ Tag/ 组/ ,/ 每组/ 负责/ 对/ 一部分/ L2/ 缓存/ 进行/ 管理/ ./ D/ -/ NUCA/ [/ 1/ ]/ 通过/ 一个/ 命中/ 计数/ 来/ 决定/ 是否/ 将/ 一个/ 数据/ 迁移/ 到/ 更/ 快/ 的/ 缓存/ bank/ 中/ ./ NuRAPID/ [/ 7/ ]/ 将/ 不/ 经常/ 使用/ 的/ 数据/ 迁移/ 到/ 具有/ 空闲/ 缓存/ 行/ 的/ 邻近/ 缓存/ 中/ ./ VR/ 和/ VM/ [/ 8/ -/ 9/ ]/ 将/ L1/ 缓存/ 中/ 替换/ 出来/ 的/ 数据/ 保存/ 在/ 本地/ 的/ L2/ 缓存/ 中/ ,/ 当/ 再次/ 访问/ 该/ 数据/ 时/ ,/ 就/ 可以/ 从/ 本地/ 的/ L2/ 缓存/ 中/ 直接/ 得到/ 该/ 数据/ ./ ASR/ [/ 10/ ]/ 在/ VR/ 的/ 基础/ 上/ 把/ 数据/ 细分/ 为/ 只读/ 数据/ 和/ 读写/ 数据/ ,/ 在/ 数据/ 从/ L1/ 缓存/ 替换/ 时/ ,/ 以/ 一定/ 的/ 概率/ 将/ 只读/ 数据/ 保存/ 在/ 本地/ 的/ L2/ 缓存/ 中/ ./ ASR/ 将/ 复制/ 分为/ 多个/ 级别/ ,/ 每个/ 级别/ 对应/ 不同/ 的/ 将/ 只读/ 数据/ 复制到/ 本地/ L2/ 缓存/ 的/ 概率/ ,/ ASR/ 在/ L2/ 缓存/ 中/ 增加/ 额外/ 的/ 硬件/ 来/ 实时/ 选择/ 对系统/ 最/ 有利/ 的/ 复制/ 级别/ ./ R/ -/ NUCA/ [/ 11/ ]/ 与/ 操作系统/ 相结合/ ,/ 将/ 数据/ 按页/ 粒度/ 分为/ 私有/ 数据/ 、/ 指令/ 和/ 共享/ 数据/ 三种/ ./ 将/ 私有/ 数据/ 直接/ 复制/ 在/ 本地/ ,/ 共享/ 数据/ 则/ 只/ 在/ 根/ 节点/ 处/ 保存/ ,/ 指令/ 数据/ 按照/ 轮转/ 地址映射/ 方案/ 在/ 片/ 上/ 维护/ 多个/ 副本/ ./ 为/ 减少/ 维护/ 数据共享/ 信息/ 的/ 目录/ 开销/ ,/ SCI/ [/ 12/ ]/ 中/ 利用/ 链表/ 结构/ 来/ 维护/ 数据/ 的/ 一致性/ ,/ 具有/ 较/ 好/ 的/ 可扩展性/ ,/ 不过/ 性能/ 受到/ 一定/ 影响/ ./ Wilson/ 最早/ 提/ Page3/ 出/ 了/ 基于/ 总线/ 的/ 层次化/ 多处理器/ [/ 13/ ]/ ./ PHD/ [/ 4/ ]/ 和/ 层次化/ 目录/ [/ 3/ ]/ 将/ 层次化/ 的/ 概念/ 应用/ 到/ 应用/ 目录/ 协议/ 的/ 多处理器/ 中/ ./ 层次化/ 目录/ 中/ 的/ 根/ 节点/ 可能/ 会/ 成为/ 影响/ 系统/ 性能/ 的/ 瓶颈/ ,/ PHD/ 在/ 超/ 立方体/ 结构/ 中/ 提出/ 了/ 将/ 根/ 节点/ 分布/ 到/ 各个/ 节点/ 中/ 的/ 思想/ ,/ 不过/ 每/ 一级/ 的/ 目录/ 还是/ 分开/ 存放/ 的/ ./ 层次化/ 缓存/ [/ 2/ ]/ 借鉴/ 了/ PHD/ 的/ 思想/ ,/ 将/ 其/ 应用/ 到/ 二维/ 的/ 网络拓扑/ 上/ ,/ 并/ 应用/ 多级/ 目录/ 来/ 减少/ 目录/ 的/ 存储/ 开销/ ,/ 在/ 提高/ 系统/ 性能/ 的/ 同时/ 降低/ 了/ 存储/ 开销/ 问题/ ./ Huh/ 等/ 人/ [/ 14/ ]/ 提出/ 了/ 一种/ 可/ 灵活/ 确认/ 一系列/ 数据共享/ 度/ 的/ NUCA/ 结构/ ,/ 并/ 研究/ 了/ 不同/ 共享/ 度/ 与/ 性能/ 之间/ 的/ 关系/ ./ 3/ 层次化/ 缓存/ 的/ 基本/ 结构/ 本节/ 以/ 一个/ 16/ 核/ Tile/ 结构/ 的/ 片/ 上/ 多处理器/ 为例/ ,/ 对/ 层次化/ 缓存/ 设计/ 中/ 的/ 关键问题/ 进行/ 说明/ ./ Tile/ 结构设计/ 简单/ 且/ 易于/ 扩展/ ,/ 在/ 多/ 核/ 处理器/ 设计/ 与/ 研究/ 中/ 被/ 广泛/ 采用/ ./ 图/ 1/ 给出/ 了/ 一个/ Tile/ 结构/ 16/ 核/ 处理器/ ,/ 每个/ Tile/ 结构/ 包含/ 有/ 一个/ 处理器/ 核/ 、/ 分立/ 的/ 指令和数据/ L1/ 缓存/ 、/ 一个/ L2/ 缓存/ 和/ 1/ 个/ 将/ 每个/ 节点/ 连接/ 到片/ 上/ 网络/ 的/ 路由器/ ,/ 各个/ Tile/ 间/ 通过/ 片上/ 网络连接/ ./ 层次化/ 缓存/ 设计/ 的/ 关键在于/ 层次/ 区域/ 划分/ 方法/ 和/ 多级/ 目录/ 的/ 结构/ 及/ 组织/ 方式/ ./ 为了/ 简化/ 描述/ ,/ 本文/ 只/ 研究/ 4n/ (/ n/ >/ 1/ )/ 个/ Tile/ 的/ 多/ 核/ 处理器/ ,/ 所有/ Tile/ 节点/ 组成/ 一个/ 2n/ ×/ 2n/ 的/ 阵列/ ./ 3.1/ 多级/ 区域/ 划分/ 在/ 层次化/ 缓存/ 中/ ,/ 每/ 4/ 个/ 邻近/ 的/ Tile/ 节点/ 组成/ 一个/ 1/ 级/ 区域/ ,/ 4/ 个/ 相邻/ 的/ 1/ 级/ 区域/ 组成/ 一个/ 2/ 级/ 区域/ ,/ 此/ 过程/ 会/ 重复/ 下去/ ,/ 直到/ 系统/ 中/ 所有/ 节点/ 都/ 包含/ 在/ 一个/ 区域/ 中/ ./ 在/ 每/ 一个/ 区域/ 内/ ,/ 层次化/ 缓存/ 为/ 每个/ 缓存/ 块/ 指定/ 一个/ 节点/ 作为/ 其/ 在/ 该/ 区域/ 内/ 的/ 根/ 节点/ ,/ 负责/ 该/ 数据/ 块/ 在/ 区域/ 内/ 的/ 一致性/ ./ 从/ 处理器/ 核/ 发出/ 的/ 请求/ 会/ 依次/ 访问/ 其/ 所属/ 的/ 从小到大/ 的/ 各级/ 区域/ 的/ 根/ 节点/ ,/ 直到/ 到达/ 一个/ 能/ 满足/ 该/ 请求/ 的/ 根/ 节点/ ./ 图/ 1/ 所示/ 的/ 系统/ 中/ ,/ 每/ 4/ 个/ 邻近/ 节点/ (/ 如/ T0/ 、/ T1/ 、/ T4/ 、/ T5/ )/ 组成/ 一个/ 1/ 级/ 区域/ ,/ 4/ 个/ 1/ 级/ 区域/ 组成/ 一个/ 2/ 级/ 区域/ ,/ 这个/ 2/ 级/ 区域/ 包含/ 了/ 系统/ 中/ 的/ 全部/ 片上/ 节点/ ./ 层次化/ 缓存/ 根据/ 每个/ 节点/ 在/ 区域/ 中/ 的/ 位置/ 对/ 这些/ 节点/ 重新/ 编号/ ./ 每个/ 节点/ 的/ 编号/ 为/ 一个/ 4/ 进制/ 数/ an/ …/ an/ +/ 1ai/ …/ a1/ ,/ 其中/ ai/ ∈/ {/ 0/ ,/ 1/ ,/ 2/ ,/ 3/ }/ (/ 1/ / i/ / n/ )/ 是/ 包含/ 该/ 节点/ 的/ i/ -/ 1/ 区域/ 在/ 第/ i/ 级/ 区域/ 内/ 的/ 位置/ ,/ 数值/ 0/ 对应/ 于/ 左上/ 位置/ ,/ 1/ 、/ 2/ 、/ 3/ 分别/ 表示/ 右/ 上/ 、/ 左下/ 和/ 右/ 下/ 位置/ ./ 图/ 2/ 给出/ 了/ 基准/ 系统/ 中/ 各/ 节点/ 的/ 新/ 编号/ ,/ 这种/ 编号/ 方式/ 便于/ 确定/ 一个/ 区域/ 内/ 任一/ 地址/ 对应/ 的/ 根/ 节点/ 的/ 位置/ ./ 如果/ 一个/ 编号/ 为/ an/ …/ an/ +/ 1ai/ …/ a1/ 的/ 节点/ 对/ 一个/ 最低/ n/ 位是/ bn/ …/ bn/ +/ 1bi/ …/ b1/ (/ 除去/ 行内/ 偏移/ )/ 的/ 地址/ 发出请求/ ,/ 那么/ 该/ 地址/ 在/ 一个/ i/ 级/ 区域/ 内/ 对应/ 的/ 根/ 节点/ 编号/ 为/ an/ …/ ai/ +/ 1bi/ …/ b1/ ./ 可以/ 看出/ ,/ 区域/ 根/ 节点/ 的/ 编号/ 会/ 随着/ 请求/ 节点/ 和/ 请求/ 地址/ 的/ 改变/ 而/ 改变/ ./ 如果/ 请求/ 的/ 地址/ 分布/ 是/ 均匀/ 的/ ,/ 那么/ 区域/ 根/ 节点/ 的/ 分布/ 也/ 是/ 均匀/ 的/ ./ 对于/ 包含/ 4n/ 个/ 节点/ 的/ 片/ 上/ 多处理器/ ,/ 一个/ 数据/ 在/ 一个/ i/ 级/ 区域/ 的/ 根/ 节点/ 同时/ 也/ 是/ 该/ 数据/ 在/ 一个/ 1/ 级/ 、/ 2/ 级/ …/ (/ i/ -/ 1/ )/ 级/ 区域/ 的/ 根/ 节点/ ./ 对于/ 每个/ 地址/ ,/ 一共/ 有/ 4n/ -/ i/ 个/ i/ 级根/ 节点/ ,/ 同时/ 所有/ 区域/ 根/ 节点/ 的/ 数目/ 为/ 4n/ -/ 1/ 个/ ./ 3.2/ 多级/ 目录/ 层次化/ 缓存/ 使用/ 多级/ 目录/ 来/ 记录/ 一个/ 数据/ 在/ 区域/ 或/ 节点/ 间/ 的/ 共享/ 情况/ ./ 一个/ 数据/ 的/ 第/ i/ 级/ 区域/ 根/ 节点/ 维护/ 一个/ 4/ 位/ i/ -/ 1/ 级/ 目录/ ,/ 目录/ 中/ 的/ 每/ 一位/ 对应/ 构成/ 该/ 区域/ 的/ 4/ 个/ i/ -/ 1/ 级/ 区域/ 内该/ 数据/ 的/ 共享/ 情况/ ./ 由于/ 第/ i/ 级/ 节点/ 同时/ 也/ 是/ 某个/ 1/ 级/ 、/ 2/ 级/ 直到/ i/ -/ 1/ 级/ 区域/ 的/ 根/ 节点/ ,/ 因此/ 该/ 节点/ 需要/ 维护/ 一个/ 0/ 级/ 目录/ 、/ 1/ 级/ 目录/ 直到/ i/ -/ 1/ 级/ 目录/ ,/ 如图/ 3/ (/ a/ )/ 所示/ ,/ 其中/ 0/ 级/ 目录/ 中/ 维护/ 的/ 是/ 数据/ 在/ 区域/ 内/ L1/ 缓存/ 中/ 的/ 共享/ 情况/ ./ 如果/ 一个/ 多级/ 目录/ 中/ 的/ 第/ k/ 级/ 目录/ 中/ 的/ 第/ m/ 位/ 被/ 置位/ ,/ 则/ 表示/ 在/ 第/ m/ 个/ k/ 级子/ 区域/ 内/ 存在/ 有/ 该/ 数据/ 的/ 有效/ 副本/ ,/ 没有/ 置位/ 则/ 表明/ 第/ m/ 个/ k/ 级子/ 区域/ 内/ 没有/ 该/ 数据/ ./ 图/ 3/ (/ b/ )/ 给出/ 了/ 一个/ 16/ 核/ 处理器/ 目录/ 组织/ 方式/ 的/ 实例/ ./ Page4/ 图/ 3/ 层次化/ 缓存/ 的/ 多级/ 目录/ (/ 全局/ 根/ 节点/ 为/ T11/ ,/ 在/ 3/ 个/ 1/ 级/ 区域/ 内/ 共有/ 7/ 个/ L1/ 缓存/ 共享/ 该/ 数据/ )/ 要/ 维护/ 层次化/ 缓存/ 系统/ 中/ 数据/ 的/ 一致性/ ,/ 需要/ 对/ 原有/ 的/ 目录/ 协议/ 进行/ 修改/ ./ 在/ 层次化/ 缓存/ 中/ ,/ 一个/ L2/ 缓存/ 可能/ 与/ 其它/ 的/ L2/ 缓存/ 进行/ 交互/ ./ 当/ 一个/ 处理器/ 核/ 需要/ 数据/ 时/ ,/ 首先/ 将/ 请求/ 发送到/ 其/ 所在/ 的/ 1/ 级/ 区域/ 的/ 根/ 节点/ 中/ 的/ L2/ 缓存/ ,/ 如果/ 请求/ 可以/ 在/ 1/ 级/ 区域/ 内/ 得到/ 满足/ ,/ 就/ 可以/ 快速/ 地/ 给/ 处理器/ 返回/ 响应/ 消息/ ;/ 否则/ 就要/ 把/ 请求/ 消息/ 向上/ 一级/ 区域/ 的/ 根/ 节点/ ,/ 直到/ 到达/ 一个/ 能/ 处理/ 该/ 请求/ 的/ 根/ 节点/ 为止/ ./ 根据/ 程序/ 在/ 执行/ 时/ 的/ 局部性/ 原理/ ,/ 从/ 处理器/ 核/ 发出/ 的/ 多数/ 请求/ 都/ 可以/ 在/ 层次化/ 化/ 缓存/ 的/ 1/ 级/ 区域/ 内/ 得到/ 满足/ ,/ 降低/ 了/ 每个/ 消息/ 的/ 平均/ 传输/ 距离/ ,/ 从而/ 图/ 4/ 不同/ 共享/ 度/ 的/ 数据/ 在/ L2/ 缓存/ 中所/ 占/ 空间/ 图/ 5/ 不同/ 被/ 访问/ 次数/ 的/ 数据/ 在/ L2/ 缓存/ 中所/ 占/ 空间/ 降低/ 请求/ 的/ 延迟/ ,/ 同时/ 也/ 会/ 降低/ 片上/ 网络/ 的/ 流量/ ./ 由于/ 采用/ 了/ 多级/ 目录/ 来/ 保存/ 数据/ 块/ 的/ 共享/ 信息/ ,/ 层次化/ 缓存/ 有效/ 地/ 降低/ 了/ 目录/ 的/ 存储空间/ ./ 4/ 改进/ 的/ 层次化/ 缓存/ 4.1/ 最后/ 一级/ 缓存/ 中/ 的/ 数据分布/ 最后/ 一级/ 缓存/ 中/ 的/ 数据/ 可以/ 分为/ 两种/ ,/ 私有/ 数据/ 和/ 共享/ 数据/ ./ 如果/ 一个/ 缓存/ 行中/ 的/ 数据/ 只/ 被/ 一个/ 处理器/ 访问/ ,/ 就是/ 私有/ 数据/ ;/ 如果/ 被/ 多个/ 处理器/ 访问/ ,/ 就是/ 共享/ 数据/ ./ 不同/ 的/ 缓存/ 组织/ 方案/ 适用/ 于/ 不同/ 的/ 数据分布/ ,/ 假如/ 最后/ 一级/ 缓存/ 中/ 都/ 是/ 私有/ 数据/ ,/ 则/ 私有/ 缓存/ 组织/ 方式/ 是/ 最佳/ 选择/ ./ 通过/ 了解/ 缓存/ 一级/ 缓存/ 中/ 的/ 数据分布/ 特性/ ,/ 可以/ 为/ 设计/ 缓存/ 组织/ 方案/ 提供/ 参考/ ./ 通过/ 对/ SPLASH/ -/ 2/ [/ 15/ ]/ 和/ PARSEC/ [/ 16/ ]/ 测试程序/ 集中/ 的/ 应用/ 进行/ 分析/ [/ 17/ ]/ ,/ 可以/ 发现/ 私有/ 数据/ 占据/ 了/ L2/ 缓存/ 的/ 大部分/ 空间/ ./ 图/ 4/ 给出/ 了/ 私有/ 数据/ 与/ 共享/ 数据/ 在/ L2/ 缓存/ 中所/ 占/ 空间/ 的/ 比例/ ,/ 可以/ 看出/ 私有/ 数据/ (/ 共享/ 数目/ =/ 1/ )/ 平均/ 占据/ 了/ 超过/ 92/ %/ 的/ 空间/ ./ 图/ 5/ 给出/ 了/ 不同/ 访问/ 次数/ 的/ 数据/ 在/ L2/ 缓存/ 中所/ 占/ 的/ 空间/ ,/ 平均/ 有/ 70/ %/ 的/ 数据/ 只/ 被/ 访问/ 了/ 一次/ ,/ 这部分/ 数据/ 当然/ 是/ 私有/ 数据/ ./ 从图/ 4/ 和/ 图/ 5/ 可以/ 看出/ :/ L2/ 缓存/ 空间/ 中/ 多数/ (/ 约/ 70/ %/ )/ 的/ 数据/ 是/ 私有/ 的/ 并且/ 只/ 被/ 访问/ 了/ 一次/ ./ 基本/ 层次化/ 缓存/ 既/ 在/ 1/ 级/ 区域/ 的/ 根/ 节点/ 处/ 保存/ 这些/ 数据/ ,/ 同时/ 也/ 在/ 全局/ 根/ 节点/ 处保/ Page5/ 存/ 这些/ 数据/ ,/ 这/ 对于/ 私有/ 数据/ 并/ 没有/ 用处/ ./ 更好/ 的/ 方法/ 是/ 直接/ 将/ 这些/ 数据/ 放置/ 在/ 请求/ 节点/ 所属/ 的/ 1/ 级/ 区域/ 中/ ,/ 这样/ 既/ 可以/ 保证/ 私有/ 数据/ 具有/ 较/ 低/ 的/ 访问/ 延迟/ ./ 也/ 能够/ 提高/ L2/ 缓存/ 的/ 空间/ 利用率/ ./ 4.2/ 改进/ 的/ 数据/ 放置/ 策略/ 通过/ 对/ 最后/ 一级/ 缓存/ 中/ 的/ 数据分布/ 进行/ 分析/ ,/ 本文/ 提出/ 改进/ 的/ 数据/ 放置/ 策略/ ,/ 比/ 几种/ 常用/ 的/ 缓存/ 组织/ 方式/ 更加/ 适用/ 于/ SPLASH/ -/ 2/ [/ 15/ ]/ 和/ PARSEC/ [/ 16/ ]/ 测试程序/ 集/ ./ 图/ 6/ 给出/ 了/ 不同/ 缓存/ 组织/ 方式/ 中/ 的/ 私有/ 数据/ 放置/ 策略/ ./ 在/ 前/ 3/ 种/ 组织/ 方式/ 中/ ,/ 根/ 节点/ 中/ 总是/ 会/ 保存/ 一份/ 由片/ 外/ 访问/ 来/ 的/ 数据/ ./ 在/ 图/ 6/ (/ a/ )/ 中/ 的/ 共享/ 组织/ 方式/ 中/ ,/ 所有/ 数据/ 只/ 在/ 根/ 节点/ 保存/ 一份/ ,/ 发生/ 替换/ 时/ 直接/ 同片/ 外/ 主存/ 交互/ ,/ 具有/ 最好/ 的/ 空间/ 利用率/ ./ 而/ 在/ 图/ 6/ (/ b/ )/ 和/ 图/ 6/ (/ c/ )/ 的/ 方案/ 中/ ,/ 一个/ 数据/ 片上/ 最后/ 一级/ 缓存/ 中/ 可能/ 有/ 多个/ 副本/ ,/ 其/ 存储空间/ 的/ 利用率/ 比/ 共享/ 方式/ 要/ 低/ ./ 当非/ 全局/ 根/ 节点/ 发生/ 替换/ 图/ 6/ 不同/ 缓存/ 组织/ 方式/ 下/ 的/ 私有/ 数据/ 存放/ 方式/ 时/ ,/ 需要/ 同/ 全局/ 根/ 节点/ 交互/ ,/ 替换/ 出去/ 的/ 缓存/ 行/ 被/ 保存/ 在/ 全局/ 根/ 节点/ 中/ ,/ 直到/ 根/ 节点/ 中/ 发生/ 替换/ 时该/ 数据/ 才/ 会/ 被/ 替换/ 到/ 片外/ ./ 根据/ 图/ 4/ 和/ 图/ 5/ 给出/ 的/ 数据分布/ 特性/ ,/ 可以/ 发现/ 在/ 根/ 节点/ 中/ 保存/ 私有/ 数据/ 的/ 副本/ 会/ 降低/ 根/ 节点/ 的/ 空间/ 利用率/ ./ 本文/ 提出/ 如图/ 6/ (/ d/ )/ 的/ 改进/ 层次化/ 缓存/ ,/ 其/ 放置/ 策略/ 如下/ :/ 当/ 数据/ 被/ 初次/ 访问/ 时/ ,/ 只/ 在/ 包含/ 请求/ 节点/ 的/ 1/ 级/ 区域/ 内/ 保存/ 一份/ 该/ 数据/ 的/ 副本/ ,/ 同时/ 改变/ 替换/ 操作/ 的/ 处理过程/ ,/ 在/ 非根/ 节点/ 发生/ 替换/ 时/ ,/ 不再/ 将/ 被/ 替换/ 的/ 数据/ 保存/ 在/ 全局/ 根/ 节点/ 中/ ,/ 将/ 提高/ 二级缓存/ 的/ 空间/ 利用率/ ./ 对于/ 一个/ 数据/ 被/ 多个/ 1/ 级/ 区域/ 共享/ 的/ 情况/ ,/ 可以/ 通过/ 片上/ 转发/ 来/ 减少/ 开销/ 较大/ 的/ 片外/ 访问/ ./ 4.3/ 一致性/ 协议/ 的/ 实现/ 改进/ 的/ 层次/ 缓存/ 实现/ 了/ 图/ 6/ (/ d/ )/ 所示/ 的/ 数据/ 放置/ 策略/ ,/ 为此/ 需要/ 在/ 每个/ Tile/ 的/ 二级缓存/ 中/ 增加/ 一个/ 新/ 的/ 目录/ 缓存/ 来/ 记录/ 数据/ 在/ 1/ 级/ 区域/ 内/ 的/ 共享/ 情况/ ,/ 同时/ 可以/ 简化/ 每/ 一个/ 缓存/ 行中/ 的/ 目录/ 项/ ,/ 只/ 记录/ 该/ 数据/ 在/ 本/ 区域/ 内/ 的/ L1/ 缓存/ 中/ 的/ 共享/ 情况/ ./ 对于/ 图/ 1/ 的/ 基准/ 系统/ ,/ 一个/ 目录/ 缓存/ 中/ 的/ 目录/ 项/ 需要/ 4/ 位/ 记录/ 数据/ 在/ 4/ 个/ 1/ 级/ 区域/ 中/ 的/ 共享/ 情况/ ,/ L2/ 数据/ 缓存/ 中/ 的/ 一个/ 目录/ 项/ 也/ 只/ 需要/ 4/ 位来/ 记录/ 数据/ 在/ L1/ 缓存/ 中/ 的/ 共享/ 情况/ ./ 此/ 结构/ 也/ 适用/ 于/ 包含/ 更/ 多/ 区域/ 层次/ 的/ 系统/ ,/ 此时/ 目录/ 缓存/ 中/ 的/ 目录/ 项/ 记录/ 的/ 是/ 在/ 下/ 一级/ 存储/ 区域/ 中/ 的/ 数据共享/ 情况/ ./ 在/ 修改/ 缓存/ 结构/ 的/ 同时/ ,/ 还/ 需要/ 对/ 一致性/ 协议/ 进行/ 修改/ ,/ 包括/ L1/ 缓存/ 发出/ 的/ 一致性/ 请求/ 的/ 处理/ 流程/ :/ 即/ 从/ 片外/ 读入/ 一个/ 数据/ 时/ ,/ 直接/ 将/ 数据/ 放置/ 在/ 请求者/ 所在/ 的/ 1/ 级/ 区域/ ,/ 全局/ 根/ 节点/ 只/ 在/ 新/ 增加/ 的/ 目录/ 缓存/ 中/ 记录/ 该/ 1/ 级/ 区域/ 的/ 共享/ 信息/ ./ 为了/ 说明/ 一致性/ 协议/ 的/ 修改/ ,/ 我们/ 将/ 分别/ 描述/ 由/ L1/ 缓存/ 发出/ 的/ 各种/ 请求/ 的/ 处理过程/ ./ 首先/ 考虑/ L1/ 缓存/ 发出/ 的/ 读/ 请求/ ./ 在/ 1/ 级/ 区域/ 根/ 节点/ 收到/ 由/ L1/ 缓存/ 发出/ 的/ 读/ 请求/ 后/ ,/ 将/ 在/ 数据/ 缓存/ 中/ 查找/ 该/ 数据/ ./ 如果/ 保存/ 有/ 该/ 数据/ ,/ 只要/ 将/ 该/ 数据/ 返回/ 发出请求/ 的/ L1/ 缓存/ 并/ 更新/ 该/ 缓存/ 行/ 的/ 目录/ 项/ 即可/ ;/ 如果/ 此/ 数据/ 被/ 本/ 区域/ 内/ 的/ 其它/ 一级/ 缓存/ 修改/ ,/ 具体/ 的/ 处理/ 流程/ 与/ 基本/ 的/ 层次/ 缓存/ 相同/ ;/ 如果/ 在/ 1/ 级/ 区域/ 根/ 节点/ 发生/ 缺失/ ,/ 则/ 需要/ 向上/ 一级/ 区域/ 根/ 节点/ (/ 全局/ 根/ 节点/ )/ 发出/ 读/ 请求/ ./ 当/ 全局/ 根/ 节点/ 收到/ 由/ 1/ 级/ 区域/ 根/ 节点/ 发来/ 的/ 读/ 请求/ 后/ ,/ 将/ 在/ 目录/ 缓存/ 中/ 查找/ 对应/ 的/ 目录/ 项/ ./ 如果/ 该/ 数据/ 被/ 其它/ 1/ 级/ 区域/ 独占/ 或/ 被/ 多个/ 1/ 级/ 区域/ 共享/ ,/ 读/ 请求/ 会/ 被/ 转发/ 到/ 距离/ 请求/ 节点/ 最近/ 的/ 一个/ 1/ 级/ 区域/ 根/ 节点/ ,/ 同时/ 在/ 目录/ 缓存/ 的/ 目录/ 项/ 中将/ 发来/ 请求/ Page6/ 的/ 1/ 级/ 区域/ 加入/ ./ 否则/ 说明/ 片上/ 没有/ 该/ 数据/ ,/ 全局/ 根/ 节点/ 会向片/ 外/ 发送/ 读/ 请求/ ,/ 并/ 将/ 由片/ 外/ 得到/ 的/ 数据/ 送到/ 发来/ 请求/ 的/ 1/ 级/ 区域/ 根/ 节点/ ,/ 同时/ 在/ 目录/ 缓存/ 中/ 记录/ 数据/ 的/ 共享/ 信息/ (/ 被/ 发来/ 请求/ 的/ 1/ 级/ 区域/ 所/ 独占/ )/ ./ 如果/ 一个/ 1/ 级/ 区域/ 根/ 节点/ 收到/ 由/ 全局/ 根/ 节点/ 转发/ 来/ 的/ 读/ 请求/ ,/ 它/ 负责/ 提供/ 该/ 数据/ 的/ 最新/ 版本/ ./ 如果/ 数据/ 被/ 某个/ 一级/ 缓存/ 所/ 修改/ ,/ 则/ 要/ 向/ 该/ 一级/ 缓存/ 发/ 一个/ 写回/ 请求/ ,/ 并/ 在/ 得到/ 写/ 回/ 的/ 数据/ 后/ 将/ 最新/ 的/ 数据/ 直接/ 发送到/ 最初/ 发出/ 读/ 请求/ 的/ 1/ 级/ 区域/ 的/ 根/ 节点/ ,/ 同时/ 更新/ 自己/ 的/ 缓存/ 行/ ,/ 并/ 将/ 缓存/ 行/ 的/ 状态/ 更新/ 为/ 共享/ (/ S/ )/ ./ 下面/ 考虑/ L1/ 缓存/ 发生/ 写/ 缺失/ 的/ 情况/ ./ 当/ 1/ 级/ 区域/ 根/ 节点/ 收到/ 由/ L1/ 缓存/ 发来/ 的/ 写/ 请求/ 后/ ,/ 如果/ 在/ 1/ 级/ 区域/ 根/ 节点/ 内/ 的/ 状态/ 为/ 独占/ 或/ 修改/ ,/ 那么/ 处理过程/ 与/ 原始/ 的/ 层次/ 缓存/ 目录/ 一样/ ./ 如果/ 缓存/ 行/ 的/ 状态/ 为/ 不/ 存在/ (/ NP/ )/ 或/ 共享/ ,/ 则/ 需要/ 向/ 全局/ 根/ 节点/ 发送/ 请求/ 以/ 取得/ 写/ 权限/ ,/ 并/ 在/ 收集/ 到/ 所有/ 的/ 响应/ 消息/ 之后/ 将/ 响应/ 发送到/ 最初/ 的/ L1/ 缓存/ ./ 如果/ 全局/ 根/ 节点/ 收到/ 由/ 1/ 级/ 区域/ 根/ 节点/ 发来/ 的/ 写/ 请求/ ,/ 将/ 在/ 新/ 增加/ 的/ 目录/ 缓存/ 中/ 查找/ 该/ 目录/ 项/ ./ 如果/ 数据/ 正在/ 被/ 另外/ 一个/ 1/ 级/ 区域/ 所/ 修改/ ,/ 那么/ 写/ 请求/ 会/ 被/ 转发给/ 唯一/ 的/ 独占/ 者/ ./ 如果/ 该/ 数据/ 被/ 多个/ 1/ 区域/ 共享/ ,/ 则/ 所有/ 在/ 其它/ 1/ 级/ 区域/ 中/ 的/ 数据/ 副本/ 都/ 要/ 被/ 无效/ ,/ 同时/ 向/ 距离/ 请求/ 节点/ 最近/ 的/ 一个/ 1/ 级/ 区域/ 发送/ 转发/ 请求/ ./ 如果/ 全局/ 根/ 节点/ 中/ 并/ 没有/ 请求/ 数据/ 的/ 目录/ 项/ ,/ 它/ 将/ 会/ 发起/ 一次/ 片外/ 访问/ ,/ 处理过程/ 与/ 读/ 请求/ 类似/ ./ 如果/ 一个/ 1/ 级/ 区域/ 根/ 节点/ 收到/ 一个/ 无效/ 请求/ (/ Inv/ )/ ,/ 它会/ 将/ 区域/ 内/ 所有/ 数据/ 副本/ 无效/ ,/ 之后/ 返回/ 确认/ (/ Ack/ )/ 消息/ ./ 如果/ 收到/ 的/ 是/ 一个/ 转发/ 过来/ 的/ 写/ 请求/ ,/ 响应/ 消息/ 将会/ 包含/ 有/ 最新/ 的/ 数据/ ./ 最后/ 将/ 一致性/ 状态/ 设/ 为/ 无效/ ./ 如果/ 一级/ 缓存/ 发生/ 替换/ ,/ 其/ 处理过程/ 与/ 层次/ 缓存/ 目录/ 相同/ ./ 如果/ 1/ 级/ 区域/ 根/ 节点/ 发生/ 替换/ ,/ 如果/ 要/ 被/ 替换/ 的/ 数据/ 是/ 干净/ 的/ (/ clean/ )/ ,/ 就/ 发送/ 一个/ PUTS/ 请求/ 到/ 全局/ 根/ 节点/ 的/ 目录/ 缓存/ ,/ 否则/ 将/ 发送/ 一个/ 包含/ 最新/ 数据/ 的/ PUTX/ 请求/ ./ 如果/ 全局/ 根/ 节点/ 收到/ 一个/ PUTS/ 请求/ ,/ 会/ 在/ 目录/ 缓存/ 中/ 检查/ 请求者/ 是否是/ 片上/ 的/ 最后/ 一个/ 共享/ 者/ ,/ 如果/ 片上/ 还有/ 其它/ 共享/ 者/ ,/ 就/ 将/ 发出请求/ 的/ 节点/ 从/ 目录/ 中/ 清除/ ;/ 否则/ 将/ 这条/ 目录/ 项/ 从/ 目录/ 缓存/ 中/ 移除/ ./ 如果/ 收到/ 的/ 是/ PUTX/ 请求/ 且/ 为/ 片/ 上/ 唯一/ 的/ 共享/ 者/ ,/ 全局/ 根/ 节点/ 将会/ 把/ 这个/ 最新/ 的/ 数据/ 写/ 回到/ 片外/ 的/ 主存/ 中/ ,/ 同时/ 从/ 目录/ 缓存/ 中/ 移除/ 相应/ 的/ 目录/ 项/ ./ 由于/ 大部分/ 一级/ 缓存/ 发出/ 的/ 请求/ 都/ 能/ 在/ 1/ 级/ 区域/ 内/ 得到/ 满足/ ,/ 读写/ 请求/ 都/ 能够/ 很快/ 得到/ 响应/ ,/ 以较/ 小/ 的/ 延迟/ 完成/ 操作/ ,/ 从而/ 提高/ 整个/ 系统/ 的/ 性能/ ./ 5/ 系统/ 评测/ 5.1/ 实验/ 设置/ 为/ 验证/ 层次化/ 缓存/ 及/ EHCD/ 的/ 效果/ ,/ 我们/ 利用/ Simics/ 和/ GEMS/ [/ 18/ ]/ 建立/ 实验/ 环境/ ./ Simics/ 是/ 一个/ 事件驱动/ 的/ 全/ 系统模拟/ 平台/ ./ 威斯康星大学/ 的/ GEMS/ 模拟器/ 在/ Simics/ 的/ 基础/ 之上/ 实现/ 了/ 完整/ 的/ 片/ 上/ 存储/ 层次/ ,/ 为片/ 上/ 存储/ 层次/ 研究/ 提供/ 了/ 平台/ ./ 表/ 1/ 给出/ 了/ 片/ 上/ 多处理器/ 系统/ 的/ 配置/ ,/ 二级缓存/ 与/ 一级/ 缓存/ 的/ 数据/ 是/ 全/ 包含/ 的/ 关系/ ,/ 片上/ 网络/ 中/ 传输/ 的/ 是/ 所有/ 维护/ 一致性/ 所/ 需/ 的/ 消息/ ./ CMP/ 规模/ 缓存/ 行/ 大小/ L1/ 指令/ 缓存/ 大小/ // 相连/ 度/ 32KB/ // 2/ 路组/ 相连/ L1/ 数据/ 缓存/ 大小/ // 相连/ 度/ 32KB/ // 2/ 路组/ 相连/ L1/ 访问/ 延迟/ L1/ 替换/ 策略/ 片上/ 目录/ 缓存/ 大小/ 片上/ 目录/ 延迟/ L2/ 缓存/ 大小/ // 相连/ 度/ L2/ 访问/ 延迟/ L1/ 替换/ 策略/ 网络拓扑/ 每/ 跳/ 延迟/ 片外/ 存储/ 延迟/ 5.2/ 实验/ 结果/ 实验/ 选择/ 的/ 基准/ 测试程序/ 来自/ SPLASH/ -/ 2/ [/ 15/ ]/ 和/ PARSEC/ [/ 16/ ]/ 测试程序/ 集/ ,/ 这些/ 程序/ 覆盖/ 科学计算/ 及/ 通用/ 数据处理/ ./ 表/ 2/ 给出/ 了/ 10/ 个/ 测试程序/ 及其/ 问题/ 规模/ ./ 实验/ 采用/ L1/ 缺失/ 延迟/ 、/ 程序执行/ 时间/ 和/ 片/ 上/ 网络流量/ 作为/ 评价/ 的/ 标准/ ./ fftluradixraytrace/ (/ ray/ ./ )/ Teapot/ ./ envoceanferret/ (/ fer/ )/ freqmine/ (/ fre/ ./ )/ Simsmallstreamcluster/ (/ str/ ./ )/ Simsmallvipsx264Page7/ 本文/ 对/ 4/ 种/ 方案/ 进行/ 评测/ ,/ 基准/ 方案/ 为/ 共享/ 组织/ 方式/ (/ Shared/ )/ ,/ 对比/ 系统/ 包括/ VM/ 、/ 层次化/ 缓存/ (/ HCD/ )/ 和/ 改进/ 的/ 层次化/ 缓存/ (/ EHCD/ )/ ./ 实验/ 模拟/ 一个/ 由/ 4/ ×/ 4mesh/ 连接/ 的/ 16/ 核/ 的/ 片/ 上/ 多处理器/ ./ 图/ 7/ 给出/ 了/ 平均/ L1/ 缺失/ 延迟/ 的/ 实验/ 结果/ ./ 由于/ VM/ 将/ 从/ L1/ 缓存/ 替换/ 出来/ 的/ 缓存/ 行/ 保存/ 到/ 本地/ 的/ L2/ 缓存/ 中/ ,/ 因此/ 它/ 具有/ 最小/ 的/ L1/ 缺失/ 延迟/ ,/ VM/ 的/ 平均/ L1/ 缺失/ 延迟/ 为/ 共享/ 组织/ 方式/ 的/ 74/ %/ ./ EHCD/ 的/ L1/ 缺失/ 延迟/ 比/ 共享/ 组织/ 方式/ 平均/ 减少/ 16/ %/ ,/ 比/ HCD/ 平均/ 减少/ 7/ %/ ./ 由于/ 大多数/ L1/ 请求/ 可以/ 在/ 本地/ 1/ 级/ 区域/ 内/ 命中/ ,/ 读写/ 请求/ 的/ 延迟/ 都/ 有所/ 降低/ ./ L1/ 缓存/ 发出/ 的/ 请求/ 多数/ 不必/ 被/ 发送到/ 根/ 节点/ ,/ 从而/ 减少/ 了/ 片/ 上/ 网络图/ 7L1/ 缺失/ 延迟/ 图/ 8/ 片上/ 网络流量/ 图/ 9/ 系统/ 性能/ 5.3/ 与/ VM/ 方案/ 的/ 对比/ VM/ 方案/ 将/ 私有/ 和/ 共享/ 方式/ 结合/ 起来/ 管理/ 片上/ 的/ L2/ 缓存/ 资源/ ,/ VM/ 基于/ 共享/ 组织/ 方式/ ,/ 通过/ 动态/ 地/ 将/ 从/ L1/ 缓存/ 中/ 替换/ 出来/ 的/ 缓存/ 行/ 保存/ 在/ 本地/ 的/ L2/ 缓存/ 中来/ 减少/ 线/ 延迟/ ./ 为了/ 提高/ L2/ 缓存/ 的/ 空间/ 利用率/ ,/ 在/ 需要/ 将/ 数据/ 替换/ 出根/ 节点/ 时/ ,/ 对于/ 还有/ 共享/ 者/ 的/ 缓存/ 行/ ,/ VM/ 将/ 其/ 保存/ 在/ 一个/ Tag/ 缓存/ 中/ ./ 的/ 流量/ ./ 如图/ 8/ 所示/ ,/ 3/ 种/ 对比/ 方案/ 都/ 比/ 共享/ 组织/ 方式/ 的/ 片/ 上/ 网络流量/ 要/ 小/ ./ HCD/ 和/ EHCD/ 方案/ 的/ 平均/ 片上/ 流量/ 分别/ 是/ 共享/ 方式/ 的/ 68/ %/ 和/ 72/ %/ ,/ 因为/ EHCD/ 不/ 在/ 根/ 节点/ 保存/ 数据/ ,/ 引发/ 了/ 更/ 多/ 的/ 片/ 上/ 转发/ ,/ 因此/ 比/ HCD/ 增加/ 了/ 4/ %/ 的/ 网络流量/ ./ 在/ VM/ 方案/ 中/ ,/ L1/ 缓存/ 可以/ 从/ 本地/ L2/ 缓存/ 中/ 取得/ 大部分/ 的/ 数据/ ,/ 因此/ 具有/ 最小/ 的/ 平均/ 网络流量/ ,/ 是/ 共享/ 组织/ 方式/ 的/ 46/ %/ ,/ 不过/ 它/ 同时/ 也/ 有着/ 最多/ 的/ 片外/ 缺失/ ./ 图/ 9/ 给出/ 了/ 测试程序/ 的/ 执行/ 时间/ ./ 从图/ 中/ 可以/ 看出/ ,/ EHCD/ 的/ 执行/ 时间/ 比/ 共享/ 组织/ 方式/ 平均/ 降低/ 了/ 24/ %/ ,/ 比/ VM/ 平均/ 降低/ 了/ 10/ %/ ,/ 比/ HCD/ 平均/ 提升/ 15/ %/ ./ EHCD/ 中/ ,/ 对于/ 私有/ 数据/ ,/ 只/ 在/ 本地/ 的/ 1/ 级/ 区域/ 中/ 保存/ 有/ 一个/ 副本/ ./ 对于/ 共享/ 数据/ ,/ 则/ 在/ 访问/ 过该/ 数据/ 的/ 1/ 级/ 区域/ 内/ 保存/ 有/ 数据/ 副本/ ./ 下面/ 详细/ 比较/ 一下/ 两种/ 方案/ ./ 从/ 存储/ 开销/ 上/ 来看/ ,/ 由于/ 采用/ 了/ 多级/ 目录/ ,/ EHCD/ 的/ 目录/ 存储/ 开销/ 比/ VM/ 小/ ./ 例如/ 一个/ 16/ 核/ 的/ 片/ 上/ 多处理器/ 中/ ,/ VM/ 中/ 的/ 每个/ 缓存/ 行/ 需要/ 16/ 位来/ 记录/ Page8/ 数据/ 的/ 共享/ 信息/ ,/ 而/ 在/ EHCD/ 中/ ,/ 每/ 一个/ 缓存/ 行/ 和/ 目录/ 缓存/ 中/ 的/ 目录/ 项/ 都/ 只/ 需要/ 4/ 位来/ 记录/ 数据/ 在/ 1/ 级/ 区域/ 内/ 或/ 1/ 级/ 区域间/ 的/ 共享/ 信息/ ./ 与此同时/ ,/ 如果/ 假定/ 物理地址/ 长度/ 为/ 40/ 位且/ 状态/ 需要/ 2/ 位来/ 表示/ ,/ 每个/ Tile/ 节点/ 的/ 1MB/ 的/ L2/ 缓存/ 在/ 共享/ 组织/ 方式/ 下/ 需要/ 1.26/ MB/ 的/ 存储/ 开销/ ,/ EHCD/ 的/ 开销/ 为/ 1.17/ MB/ ,/ 开销/ 比/ VM/ 降低/ 了/ 7/ %/ 左右/ ./ 从片/ 上/ 副本/ 数目/ 上/ 来看/ :/ VM/ 方案/ 多个/ L2/ 缓存/ 中/ 保存/ 有/ 数据/ 的/ 副本/ ,/ 最/ 多/ 可以/ 达到/ 16/ 个/ ,/ 而/ 在/ EHCD/ 中/ 最/ 多只/ 会/ 有/ 4/ 个/ 副本/ ,/ 因此/ EHCD/ 的/ 空间/ 利用率/ 比/ VM/ 高/ ./ 从/ 具体/ 性能/ 上/ 来看/ :/ 从/ 实验/ 结果/ 来看/ ,/ 与/ 共享/ 组织/ 方式/ 相比/ ,/ VM/ 方案/ 的/ 执行/ 时间/ 降低/ 为/ 14/ %/ ,/ EHCD/ 方案/ 的/ 执行/ 时间/ 降低/ 为/ 24/ %/ ,/ EHCD/ 比/ VM/ 方案/ 执行/ 时间/ 降低/ 了/ 10/ %/ ,/ 具有/ 较/ 好/ 的/ 性能/ ./ 从/ 可扩展性/ 上/ 来看/ :/ VM/ 方案/ 的/ 目录/ 开销/ 与/ 片/ 上/ 处理器/ 核/ 的/ 数据/ 成正比/ ,/ 当/ 系统/ 规模/ 扩大/ 时/ ,/ 其/ 目录/ 开销/ 会/ 很快/ 超过/ 缓存/ 容量/ 所/ 需/ 存储/ ./ 而/ EHCD/ 方案/ 的/ 目录/ 存储/ 开销/ 与/ 处理器/ 核/ 的/ 数据/ 成/ 对数/ 关系/ 增长/ ,/ 远远/ 小于/ VM/ 方案/ 的/ 目录/ 存储/ 开销/ ,/ 具有/ 良好/ 的/ 可扩展性/ ./ 6/ 结论/ 随着/ 片上/ 可/ 集成/ 处理器/ 核/ 数目/ 的/ 增加/ ,/ 基于/ 共享/ 缓存/ 组织/ 方式/ 的/ 多/ 核/ 处理器/ 片上/ 通信/ 延迟/ 不断/ 增大/ ,/ 保存/ 数据共享/ 信息/ 的/ 目录/ 存储/ 开销/ 也/ 线性/ 增加/ ./ 本文/ 在/ 层次化/ 缓存/ 结构/ 上/ ,/ 对/ 最后/ 一级/ 缓存/ 中/ 的/ 数据/ 放置/ 进行/ 优化/ ,/ 将/ 从/ 片外/ 读入/ 的/ 数据/ 直接/ 放置/ 在/ 请求者/ 所属/ 的/ 底层/ 区域/ 内/ ,/ 保证/ 私有/ 数据/ 在/ 片/ 上/ 最后/ 一级/ 缓存/ 中/ 只有/ 一份/ 副本/ ./ 该/ 技术/ 提高/ 了/ 片/ 上/ 最后/ 一级/ 存储/ 的/ 空间/ 利用率/ ,/ 提供/ 良好/ 的/ 可扩展性/ ./ 对/ 16/ 核/ 处理器/ 的/ 实验/ 结果表明/ ,/ EHCD/ 设计/ 比/ 传统/ 共享/ 缓存/ 结构/ 执行/ 时间/ 平均/ 减少/ 24/ %/ ,/ 比/ 原有/ 层次化/ 缓存/ 设计/ 执行/ 时间/ 平均/ 减少/ 15/ %/ ,/ 具有/ 很/ 好/ 的/ 优化/ 效果/ ./ 

