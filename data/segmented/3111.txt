Page1/ 硬/ 实时/ 系统/ 在/ 强/ 分区/ 约束/ 下/ 的/ 双层/ 分区/ 调度/ 李昕颖/ 顾健/ 何锋/ 熊华钢/ (/ 北京航空航天大学/ 电子信息/ 工程学院/ 北京/ 100191/ )/ 摘要/ 文中/ 研究/ 了/ 硬/ 实时/ 系统/ 在/ 强/ 分区/ 约束/ 下/ 的/ 双层/ 分区/ 的/ 调度/ 问题/ ,/ 合理/ 建立/ 了/ 强/ 分区/ 约束/ 下/ 的/ 双层/ 分区/ 调度/ 模型/ ,/ 给出/ 了/ 最坏/ 情况/ 下/ 的/ 分区/ 任务/ 集可/ 调度/ 的/ 判定/ 条件/ ./ 同时/ ,/ 在/ 此基础/ 上/ ,/ 提出/ 了/ 与/ 分区/ 利用率/ 匹配/ 的/ 分区/ 设计/ 方法/ ,/ 导出/ 了/ 该/ 方法/ 下/ 的/ 系统/ 可/ 调度/ 利用率/ 的/ 最小/ 上限/ ./ 仿真/ 实验/ 表明/ ,/ 在/ 严格/ 实时/ 的/ 条件/ 下/ ,/ 文中/ 提出/ 的/ 方法/ 相对/ 于/ 现有/ 方法/ 更具/ 优越性/ ,/ 并/ 提高/ 了/ 分区/ 可/ 调度/ 利用率/ 的/ 最小/ 上限/ ./ 关键词/ 实时/ 系统/ ;/ 强/ 分区/ 约束/ ;/ 分区/ 调度/ ;/ 可/ 调度/ 利用率/ ;/ 分区/ 设计/ 1/ 引言/ 在/ 综合化/ 实时/ 系统/ 中/ ,/ 各种/ 应用软件/ 共享/ 计算资源/ 、/ 网络资源/ ,/ 为了/ 防止/ 错误/ 在/ 关键/ 级别/ 不同/ 的/ 应/ Page2/ 系统/ 的/ 容错/ 能力/ ./ 综合/ 模块化/ 的/ 航空/ 电子/ 系统软件/ 标准/ —/ —/ —/ ARINC653/ 标准/ 中/ 提出/ 了/ 双层/ 分区/ 的/ 调度/ 策略/ [/ 1/ ]/ ,/ 由此/ 带来/ 两个/ 问题/ :/ (/ 1/ )/ 给定/ 分区/ 参数/ ,/ 如何/ 在/ 严格/ 实时/ 的/ 约束条件/ 下/ ,/ 对/ 分区/ 任务/ 的/ 可/ 调度/ 性/ 进行/ 分析/ ;/ (/ 2/ )/ 给定/ 分区/ 任务/ ,/ 分区/ 的/ 设计/ 直接/ 影响/ 系统/ 的/ 实时/ 特性/ ./ 如何/ 合理/ 地/ 设计/ 分区/ ,/ 使/ 分区/ 中/ 的/ 任务/ 都/ 满足/ 实时性/ 要求/ ,/ 又/ 提供/ 尽可能/ 大/ 的/ 处理器/ 利用率/ ./ 这是/ 两个/ 重要/ 的/ 理论/ 和/ 工程/ 问题/ ./ 商用/ 领域/ 中/ 的/ 多数/ 研究/ 工作/ 侧重于/ 最小化/ 任务/ 的/ 平均/ 响应/ 时间/ 、/ 最小化/ 任务/ 的/ 截止期/ 错过/ 率/ 等/ 平均/ 统计/ 特性/ 方面/ 的/ 研究/ [/ 2/ ]/ ./ 但是/ 在/ 航空/ 电子/ 等/ 硬/ 实时/ 系统/ 中/ ,/ 强调/ 每个/ 任务/ 必须/ 在/ 截止/ 时限/ 内/ 完成/ ,/ 满足/ 实时性/ ,/ 否则/ 可能/ 带来/ 灾难性/ 后果/ ./ 硬/ 实时/ 系统/ 与/ 一般/ 的/ 系统/ 相比/ ,/ 具有/ 不同/ 的/ 特性/ ,/ 因此/ 研究/ 方法/ 有/ 较大/ 不同/ ./ 文献/ [/ 3/ -/ 4/ ]/ 讨论/ 了/ 基于/ 服务器/ 思想/ 的/ 分层/ EDF/ 调度/ 方法/ ,/ 但是/ 对于/ 具有/ 大量/ 周期/ 任务/ 的/ 航空/ 电子/ 等/ 硬/ 实时/ 系统/ 来说/ ,/ 是/ 不/ 合适/ 的/ [/ 5/ ]/ ./ 针对/ 区间/ 层/ 采用/ RM/ 的/ 分层/ 分区/ 调度/ ,/ 主要/ 有/ 两种/ 方法/ 来/ 分析/ 系统/ 的/ 可/ 调度/ 性/ ./ 一种/ 是/ 采用/ CPU/ 利用率/ 的/ 分析方法/ ,/ 还有/ 一种/ 是/ 利用/ 时间/ 需求/ 函数/ 的/ 分析方法/ ./ 文献/ [/ 6/ -/ 8/ ]/ 都/ 采用/ 了/ 时间/ 需求/ 函数/ 的/ 方法/ 提出/ 任务/ 可/ 调度/ 性/ 条件/ ,/ 但是/ 这些/ 文献/ 中/ 的/ 分层/ 分区/ 调度/ 模型/ 都/ 不/ 满足/ 强/ 分区/ 约束条件/ ,/ 也/ 就是/ 分区/ 隔离/ 且/ 固定/ 周期/ 的/ 约束条件/ ,/ 并且/ 推导/ 得到/ 的/ 可/ 调度/ 判定/ 条件/ 时间/ 复杂度/ 很/ 高/ ,/ 缺少/ 鲁棒性/ ./ 文献/ [/ 9/ ]/ 利用/ 了/ CPU/ 利用率/ 的/ 分析方法/ ,/ 给出/ 了/ 区间/ 层/ 采用/ RM/ 调度/ ,/ 分区/ 所有/ 任务/ 可/ 调度/ 利用率/ 的/ 最小/ 上限/ ,/ 但/ 要求/ 分区/ 的/ 周期/ 必须/ 是/ 分区/ 中/ 所有/ 任务/ 周期/ 的/ 最大公约数/ 或/ 最大公约数/ 的/ 约数/ ,/ 约束条件/ 使/ 其/ 实际/ 应用/ 受到/ 很大/ 限制/ ./ 文献/ [/ 10/ ]/ 运用/ 以上/ 两种/ 方法/ 对/ 可/ 调度/ 性/ 做/ 了/ 研究/ ,/ 但是/ 得到/ 的/ 可/ 调度/ 利用率/ 比较/ 低/ ./ 对于/ 分区/ 设计/ 的/ 研究/ ,/ 文献/ [/ 7/ ,/ 11/ ]/ 提出/ 的/ 方法/ 以/ 时间/ 需求/ 函数/ 推出/ 的/ 可/ 调度/ 性/ 条件/ 为/ 基础/ ,/ 时间/ 复杂度/ 高/ ./ 文献/ [/ 12/ ]/ 提出/ 的/ 方法/ 有效/ 地/ 避免/ 了/ 时间/ 需求/ 函数/ 的/ 复杂性/ ,/ 采用/ 均衡/ 型/ 和/ 耗尽/ 型/ 的/ 方法/ 来/ 进行/ 分区/ 设计/ ,/ 但/ 不能/ 完全/ 保证系统/ 的/ 实时性/ ./ 本文/ 根据/ 以上/ 不足/ ,/ 建立/ 了/ 满足/ 强/ 分区/ 约束条件/ 的/ 双层/ 分区/ 调度/ 模型/ ./ 在/ 给定/ 分区/ 参数/ 条件/ 下/ ,/ 推导/ 了/ 最坏/ 情况/ 下/ 的/ 分区/ 任务/ 集/ 严格/ 实时/ 条件/ ,/ 并/ 提出/ 了/ 与/ 分区/ 利用率/ 匹配/ 的/ 分区/ 设计/ 方法/ ,/ 导出/ 了/ 该/ 方法/ 下/ 系统/ 可/ 调度/ 利用率/ 上限/ ./ 通过/ 仿真/ 进行/ 了/ 比较/ 和/ 验证/ ./ 2/ 基本概念/ 2.1/ 分层/ 调度/ 模型/ 双层/ 分区/ 调度/ 模型/ 如图/ 1/ 所示/ ,/ 操作系统/ 层/ 根据/ ARINC653/ 标准/ ,/ 采用/ 轮转/ 调度/ 的/ 方式/ 激活/ 每/ 一个/ 分区/ ./ 在/ 区间/ 层/ ,/ 根据/ 分/ 区内/ 定义/ 的/ 调度/ 策略/ 进行/ 任务调度/ ./ 每/ 一个/ 分区/ 内部/ 的/ 任务/ 只能/ 在/ 当前/ 分区/ 处于/ 激活状态/ 才/ 有/ 可能/ 被/ 执行/ ,/ 从而/ 使得/ 模块/ 中/ 各/ 分区/ 相互/ 独立/ [/ 13/ ]/ ./ 本文/ 区间/ 层/ 采用/ RM/ (/ RateMonotonic/ )/ 调度/ 算法/ ,/ 它/ 的/ 定时/ 行为/ 比/ 动态/ 优先级/ 算法/ 调度/ 的/ 系统/ 具有/ 更好/ 的/ 预知/ 性/ ,/ 更/ 满足/ 硬/ 实时/ 系统/ 可预测性/ 的/ 要求/ ./ 2.2/ 任务模型/ 假设/ 有/ n/ 个/ 实时/ 任务/ ,/ 分别/ 用/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ n/ 表示/ ,/ 它们/ 组成/ 一个/ 任务/ 集合/ Γ/ ,/ 即/ Γ/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ n/ }/ ./ 任务/ 特征/ 定义/ 如下/ :/ (/ 1/ )/ 任务/ 最坏/ 情形/ 执行/ 时间/ Ci/ :/ 表示/ 第/ i/ 个/ 任务/ 在/ 最坏/ 情况/ 下/ 无/ 中断/ 执行/ 所/ 需/ 的/ 处理器/ 时间/ ./ (/ 2/ )/ 任务/ 的/ 周期/ Ti/ :/ 表示/ 第/ i/ 个/ 任务/ 的/ 产生/ 周期/ ./ 对于/ 非/ 周期/ 任务/ ,/ 则/ 表示/ 任务/ 产生/ 的/ 最小/ 时间/ 间隔/ ./ (/ 3/ )/ 任务/ 的/ 截止/ 期限/ 等于/ 任务/ 的/ 周期/ ,/ 即/ Di/ =/ Ti/ ./ (/ 4/ )/ 任务/ 之间/ 相互/ 独立/ (/ 不/ 存在/ 因/ 共享资源/ 而/ 导致/ 阻塞/ )/ ./ 根据/ 以上/ 定义/ ,/ 任务/ 由/ 一个二维/ 数组/ 表述/ :/ 任务/ τ/ i/ 的/ 利用率/ 定义/ 为/ 任务/ 集/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ n/ 的/ 利用率/ 为/ 2.3/ 分区/ 调度/ 模型/ 假定/ 分区/ P/ Ω/ 由/ N/ Ω/ 个/ 任务/ 组成/ ,/ 可/ 表示/ 为/ Γ/ Ω/ =/ {/ τ/ Ω/ i/ (/ Ci/ ,/ Ti/ )/ ,/ i/ =/ 1/ ,/ 2/ ,/ …/ ,/ N/ Ω/ }/ ./ 其中/ τ/ Ω/ i/ 的/ 下标/ 表示/ Page3/ 第/ Ω/ 个/ 分区/ 中/ 的/ 第/ i/ 个/ 任务/ ./ 分区/ 调度/ 模型/ 如图/ 2/ 所示/ ./ 在/ 系统/ 层/ ,/ 采用/ 周期性/ 的/ 轮转/ 调度/ 激活/ 分区/ P/ Ω/ ,/ 我们/ 定义/ 系统/ 的/ 轮转/ 周期/ 时长/ 为/ TRL/ ./ 在/ 每/ 一个/ 轮转/ 周期/ 内/ ,/ T/ Ω/ 表示/ 分区/ P/ Ω/ 的/ 执行/ 时间/ ,/ 在/ 其余/ TRL/ -/ T/ Ω/ 时间段/ 内/ ,/ 分区/ P/ Ω/ 处于/ 阻塞状态/ ./ 2.4/ 相关/ 定义/ 定义/ 1/ ./ 在/ 一个/ 调度/ 中/ ,/ 若/ 某/ 任务/ 集中/ 的/ 所有/ 任务/ 的/ 实时/ 约束条件/ 都/ 满足/ ,/ 则/ 称/ 在/ 此/ 调度/ 策略/ 下/ ,/ 该/ 任务/ 集是/ 可/ 调度/ 的/ ./ 定义/ 2/ ./ 在/ 某/ 调度/ 策略/ 下/ ,/ 只要/ 系统/ 利用率/ 不/ 大于/ U/ / ,/ 就/ 能/ 保证系统/ 中/ 所有/ 任务/ 都/ 是/ 可/ 调度/ 的/ ,/ U/ / 称为/ 可/ 调度/ 利用率/ 的/ 上限/ ./ Ubound/ 表示/ 最坏/ 情况/ 下/ 可/ 调度/ 利用率/ 的/ 上限/ ,/ 即/ 为/ 可/ 调度/ 利用率/ 的/ 最小/ 上限/ ./ 定义/ 3/ ./ 分/ 区内/ 的/ 任务/ 只能/ 在/ 激活/ 的/ 分区/ 窗口/ 内/ 运行/ ,/ 分区/ 周期性地/ 被/ 激活/ ,/ 当/ 某个/ 处于/ 激活状态/ 的/ 分区/ 中/ 没有/ 任务/ 处于/ 就绪/ 状态/ ,/ 即使/ 其它/ 分区/ 有/ 任务/ 处于/ 就绪/ 状态/ ,/ 也/ 不能/ 跨越/ 分区/ 的/ 边界/ 在/ 当前/ 空闲/ 的/ 分/ 区内/ 执行/ ,/ 在/ 时间/ 和/ 空间/ 上/ 对/ 任务/ 进行/ 这种/ 分区/ 隔离/ ,/ 称为/ 系统/ 的/ 强/ 分区/ 约束条件/ ./ 定义/ 4/ ./ α/ Ω/ 表示/ 分区/ P/ Ω/ 的/ 执行/ 能力/ ,/ 即/ 每/ 一次/ 轮转/ 周期/ 内/ 分区/ P/ Ω/ 的/ 执行/ 时间/ 与/ 轮转/ 周期/ 时长/ 之/ 比/ ,/ α/ Ω/ =/ T/ Ω/ // TRL/ ./ 根据/ α/ Ω/ 的/ 定义/ 可知/ 若/ 系统/ 有/ m/ 个/ 分区/ ,/ 则/ 系统/ 可/ 调度/ 约束条件/ 为/ 3/ 分区/ 的/ 可/ 调度/ 利用率/ 分析/ 3.1/ 两个/ 分区/ 的/ 简单/ 情况/ 为了/ 阐述/ 思想/ ,/ 我们/ 首先/ 以/ 两个/ 分区/ 的/ 简单/ 情况/ 为例/ ./ 考虑/ 分区/ P1/ 和/ P2/ ,/ 执行/ 能力/ 分别/ 为/ α/ 1/ 、/ α/ 2/ ,/ 分区/ 所/ 包括/ 的/ 硬/ 实时/ 任务/ 分别/ 为/ τ/ 1/ 、/ τ/ 2/ ./ 假定/ C1/ 、/ T1/ 、/ T2/ 都/ 已经/ 确定/ 了/ ,/ 现在/ 考虑/ τ/ 1/ 、/ τ/ 2/ 满足/ 截止/ 时限/ 的/ 要求/ 时/ ,/ C2/ 能取/ 的/ 最大值/ ./ 其中/ 分区/ P1/ 对/ 分区/ P2/ 的/ 影响/ ,/ 可以/ 看成/ 是/ 由/ 一/ 周期/ 任务/ τ/ 0/ 对/ P2/ 的/ 抢占/ 而/ 形成/ ./ 任务/ τ/ 0/ 的/ 周期/ 为/ TRL/ ,/ 执行/ 时间/ 为/ TRL/ (/ 1/ -/ α/ 2/ )/ ./ 设/ R/ =/ T2/ // TRL/ / 1/ ,/ 分/ 两种/ 情况/ 讨论/ :/ (/ 1/ )/ kTRL/ / T2/ / kTRL/ +/ TRL/ (/ 1/ -/ α/ 2/ )/ ,/ 此时/ C2/ 最大/ 为/ k/ (/ TRL/ -/ TRL/ (/ 1/ -/ α/ 2/ )/ )/ =/ k/ α/ 2TRL/ ,/ 分区/ P2/ 的/ 任务/ 利用率/ U2/ =/ C2/ // T2/ =/ k/ (/ TRL/ -/ TRL/ (/ 1/ -/ α/ 2/ )/ )/ k/ / R/ / k/ +/ (/ 1/ -/ α/ 2/ )/ ./ U2/ 是/ 关于/ R/ 的/ 单调/ 递减/ 函数/ ./ (/ 2/ )/ kTRL/ +/ TRL/ (/ 1/ -/ α/ 2/ )/ / T2/ / (/ k/ +/ 1/ )/ TRL/ ,/ 此时/ C2/ 最大/ 为/ T2/ -/ (/ k/ +/ 1/ )/ TRL/ (/ 1/ -/ α/ 2/ )/ ,/ 分区/ P2/ 的/ 任务/ 利用率/ U2/ =/ C2/ // T2/ =/ 1/ -/ (/ k/ +/ 1/ )/ TRL/ (/ 1/ -/ α/ 2/ )/ (/ k/ +/ 1/ )/ (/ 1/ -/ α/ 2/ )/ R/ ,/ k/ +/ (/ 1/ -/ α/ 2/ )/ / R/ / k/ +/ 1/ ./ U2/ 是/ 关于/ R/ 的/ 单调/ 递增/ 函数/ ./ 显然/ ,/ 在/ 两种/ 情况/ 的/ 交界/ 点上/ U2/ 取/ 最小值/ ,/ 即/ R/ =/ k/ +/ (/ 1/ -/ α/ 2/ )/ 时/ ,/ U2/ =/ k/ α/ 2k/ +/ (/ 1/ -/ α/ 2/ )/ ,/ 对于/ k/ =/ 1/ ,/ 2/ ,/ …/ ,/ U2/ 的/ 最小值/ 为/ α/ 22/ -/ α/ 2/ ./ α/ 12/ -/ α/ 1.3/ ./ 2/ 两个/ 分区/ 的/ 复杂/ 情况/ 分区/ P1/ 和/ P2/ 分别/ 包括/ 硬/ 实时/ 任务/ 集/ Γ/ 1/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ k/ }/ 和/ Γ/ 2/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ n/ }/ ,/ 执行/ 能力/ 分别/ 为/ α/ 1/ 、/ α/ 2/ ,/ 其中/ 分区/ P1/ 对/ 分区/ P2/ 的/ 影响/ ,/ 可以/ 看成/ 是/ 由/ 一/ 周期/ 任务/ τ/ 0/ =/ {/ TRL/ (/ 1/ -/ α/ 2/ )/ ,/ TRL/ }/ 对/ P2/ 的/ 抢占/ 而/ 形成/ 的/ ./ 不失/ 一般性/ ,/ 假定/ 任务/ 按/ T1/ </ T2/ </ T3/ </ …/ </ Tn/ 排列/ ,/ 则/ T0/ </ T1/ </ T2/ </ T3/ </ …/ </ Tn/ ,/ Liu/ 和/ Layland/ [/ 14/ ]/ 证明/ 了/ 最难/ 调度/ 的/ 系统/ 发生/ 在/ 所有/ 任务/ 同时/ 开始/ ,/ 并且/ Ci/ ,/ Ti/ 满足/ 式/ (/ 6/ )/ 和/ 式/ (/ 7/ )/ :/ 同理/ ,/ 分区/ P1/ 的/ 任务/ 利用率/ U1/ 的/ 最小值/ 为/ Ci/ =/ Ti/ +/ 1/ -/ Ti/ ,/ 0/ / i/ / n/ -/ 1/ ,/ Cn/ =/ 2T0/ -/ Tn/ (/ 7/ )/ 此时/ ,/ 分区/ P2/ 的/ 任务/ 利用率/ U/ =/ T2/ -/ T1T1/ +/ …/ Tn/ -/ Tn/ -/ 1Tn/ -/ 1/ +/ 2T0/ -/ TnTn/ 定义/ Ri/ =/ Ti/ +/ 1/ // Ti/ ,/ 式/ (/ 8/ )/ 可/ 化为/ U/ =/ ∑/ n/ -/ 1Page4/ 当/ R1/ =/ R2/ …/ =/ Rn/ -/ 1/ =/ R/ 时/ ,/ 式/ (/ 9/ )/ 等/ 号/ 成立/ 取/ 最小值/ U/ =/ (/ n/ -/ 1/ )/ R/ +/ 2/ / U/ / R/ =/ (/ n/ -/ 1/ )/ -/ (/ n/ -/ 1/ )/ 21/ +/ U/ (/ )/ 0/ 即/ R/ =/ 2U0/ =/ (/ 1/ -/ α/ 2/ )/ ,/ 分区/ P2/ 的/ 任务/ 总/ 利用率/ 取得/ 最小值/ ,/ 即可/ 调度/ 利用率/ 的/ 最小/ 上/ 界/ 同理/ 分区/ P1/ 的/ 任务/ 可/ 调度/ 利用率/ 的/ 最小/ 上界/ 为/ Ubound/ =/ k23/ ./ 3/ 一般/ 情况/ 定理/ 1/ ./ 处理器/ 系统/ 有/ m/ 个/ 分区/ ,/ 每个/ 分区/ Pi/ 上/ 执行/ ni/ 个/ 任务/ ,/ 分区/ 执行/ 能力/ 为/ α/ i/ ,/ 分区/ 的/ 任务/ 总/ 利用率/ Ui/ 满足/ 则/ 分区/ 可/ 调度/ ./ 证明/ ./ 考虑/ 某/ 一个/ 分区/ Pi/ ,/ 其它/ (/ m/ -/ 1/ )/ 个/ 分区/ 对本/ 分区/ 的/ 阻塞/ ,/ 都/ 可以/ 看作/ 是/ 一/ 周期/ 任务/ τ/ 0/ =/ {/ TRL/ (/ 1/ -/ α/ i/ )/ ,/ TRL/ }/ 对/ 分区/ Pi/ 中/ 任务/ 的/ 抢占/ 形成/ 的/ ./ 因此/ 根据/ 式/ (/ 10/ )/ ,/ 直接/ 得出/ 定理/ 1/ 的/ 结论/ ./ 证毕/ ./ 4/ 分区/ 设计/ 4.1/ 分区/ 设计/ 方法/ 对于/ 系统/ 中/ 运行/ 的/ 特定/ 任务/ 集/ ,/ 如果/ 所/ 采用/ 的/ 分区/ 设计/ 方法/ 既/ 能/ 保证/ 各个/ 分区/ 任务/ 的/ 可/ 调度/ 性/ ,/ 又/ 能/ 满足/ 系统/ 可/ 调度/ 约束条件/ ,/ 那么/ 在/ 该/ 分区/ 设计/ 方法/ 下/ ,/ 该/ 任务/ 集可/ 实时/ 执行/ ,/ 即/ 系统/ 是/ 可/ 调度/ 的/ ./ 如果/ 分区/ 设计/ 得太大/ ,/ 则/ 分区/ 占用/ 系统资源/ 太/ 多/ ,/ 造成/ 系统资源/ 一定/ 程度/ 的/ 浪费/ ./ 如果/ 分区/ 设计/ 得/ 太小/ ,/ 则/ 不能/ 保证系统/ 的/ 可/ 调度/ 性/ ./ 因此/ 为/ 每个/ 分区/ 分配/ 合理/ 的/ 分区/ 执行/ 能力/ 是/ 分区/ 设计/ 的/ 关键/ ./ 由/ 定理/ 1/ 可知/ ,/ 只要/ Ui/ / ni2/ 分区/ Pi/ 一定/ 可/ 调度/ ./ 在/ 满足/ 分区/ 任务/ 可/ 调度/ 的/ 约束条件/ 下/ ,/ 为了/ 使/ 系统/ 的/ 可/ 调度/ 利用率/ 尽可能/ 大/ ,/ 应/ 取/ 分区/ 执行/ 能力/ 的/ 最小值/ ./ 从/ 匹配/ 的/ 角度/ 令上式/ 相等/ ,/ 可以/ 得到/ 上式/ 为/ 本文/ 提出/ 的/ 匹配/ 型/ 分区/ 设计/ 方法/ ./ 当/ 给定/ 分区/ 任务/ 时/ ,/ 按此/ 方法/ 进行/ 分区/ 设计/ ,/ 为/ 每个/ 分区/ 分配/ 合理/ 的/ 执行/ 能力/ ,/ 则/ 能/ 保证/ 各/ 分区/ 任务/ 的/ 可/ 调度/ 性/ ./ 对于/ 有/ m/ 个/ 分区/ ,/ 每个/ 分区/ Pi/ 上/ 执行/ ni/ 个/ 任务/ 的/ 系统/ ,/ 分区/ 设计/ 方法/ 的/ 复杂度/ 最多为/ O/ (/ mn/ )/ ,/ 其中/ n/ =/ max/ (/ ni/ ,/ i/ =/ 1/ ,/ 2/ ,/ …/ ,/ m/ )/ ./ 复杂度/ 开销/ 是/ 系统/ 完全/ 可以/ 接受/ 的/ ./ 4.2/ 系统/ 可/ 调度/ 利用率/ 分析/ 定理/ 2/ ./ 处理器/ 系统/ 有/ m/ 个/ 分区/ ,/ 每个/ 分区/ Pi/ 上/ 执行/ 的/ 硬/ 实时/ 任务/ 集/ Γ/ i/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ ni/ }/ ,/ 如果/ 每个/ 分区/ 的/ 执行/ 能力/ 按照/ 式/ (/ 11/ )/ 分配/ ,/ 只要/ 系统/ 的/ 总/ 利用率/ 满足/ 则/ 系统/ 可/ 调度/ ./ 理/ 1/ 可知/ ,/ 各个/ 分区/ 可/ 调度/ ./ 证明/ ./ (/ 1/ )/ 分区/ 的/ 执行/ 能力/ 按照/ 式/ (/ 11/ )/ 分配/ ,/ 根据/ 定/ (/ 2/ )/ ∑/ m/ ∑/ m/ α/ i/ / 2m/ -/ 2/ ∑/ mni/ +/ 1/ )/ -/ ni/ 为/ ni/ 的/ 单调/ 递减/ 函数/ ,/ 所以/ 可得/ i/ =/ 1/ 即/ 满足/ 系统/ 可/ 调度/ 性/ 约束条件/ ./ 推论/ 1/ ./ 处理器/ 有/ m/ 个/ 分区/ ,/ 每个/ 分区/ Pi/ 上/ 执行/ 的/ 硬/ 实时/ 任务/ 集/ Γ/ i/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ ni/ }/ ,/ 每个/ 分区/ 的/ 执行/ 能力/ 按照/ 式/ (/ 11/ )/ 分配/ ,/ n1/ =/ n2/ =/ …/ =/ nm/ =/ n/ ,/ 则/ 系统/ 的/ 可/ 调度/ 利用率/ 最小/ 上界/ 为/ 证明/ ./ (/ 1/ )/ n1/ =/ n2/ =/ …/ =/ nm/ =/ n/ 时/ ,/ 按/ 定理/ 2/ 可知/ ,/ Page5U/ / mn2m/ (/ 2/ )/ 下面/ 证明/ 对于/ 任意/ 给定/ 实数/ ξ/ ,/ 0/ </ ξ/ </ 1/ ,/ 至少/ 存在/ 一个/ 任务/ 集/ 的/ 利用率/ U/ / mn2mmn/ +/ ξ/ ,/ 使得/ ∑/ m/ 条件/ ./ 对于/ 给定/ 的/ m/ 和/ n/ ,/ 假设/ β/ =/ 2m/ 个/ 任务/ 集/ ,/ 具有/ 以下/ 参数/ :/ U1/ =/ U2/ =/ …/ =/ Um/ =/ n/ β/ 1U/ =/ ∑/ m/ α/ 1/ =/ α/ 2/ =/ …/ =/ α/ m/ =/ 2/ -/ 2n/ β/ 1/ =/ 2/ -/ 2/ β/ 1/ α/ i/ =/ 2m/ -/ 2m/ β/ 1i/ =/ 1/ 则/ ∑/ mn/ +/ ξ/ (/ )/ mn/ 所以/ β/ 1/ 则/ ∑/ m/ α/ i/ >/ 2m/ -/ 2m1i/ =/ 1/ 由/ 定理/ 2/ 可知/ ,/ 各个/ 分区/ 的/ 任务/ 数/ ni/ 越大/ ,/ 系统/ 可/ 调度/ 利用率/ 上界/ 越/ 小/ ./ 推论/ 2/ ./ 处理器/ 有/ m/ 个/ 分区/ ,/ 每个/ 分区/ Pi/ 上/ 执行/ 的/ 硬/ 实时/ 任务/ 集/ Γ/ i/ =/ {/ τ/ 1/ ,/ τ/ 2/ ,/ …/ ,/ τ/ ni/ }/ ,/ 每个/ 分区/ 的/ 执行/ 能力/ 按照/ 式/ (/ 11/ )/ 分配/ ,/ ni/ 都/ 取/ 较大/ 值/ ,/ 则/ 系统/ 的/ 可/ 调度/ 利用率/ 最小/ 上界/ 为/ 证明/ ./ (/ 1/ )/ 分区/ 的/ 执行/ 能力/ 按照/ 式/ (/ 11/ )/ 分配/ ,/ 根据/ 定理/ 1/ 可知/ ,/ 各个/ 分区/ 可/ 调度/ ./ (/ 2/ )/ α/ i/ =/ 2/ -/ 2/ (/ Ui/ // ni/ +/ 1/ )/ -/ ni/ ,/ 当/ ni/ 取/ 较大/ 值时/ ,/ α/ i/ 接近/ 于/ 2/ -/ 2e/ -/ Ui/ ,/ 因此/ ∑/ m/ α/ i/ =/ 2m/ -/ 2/ ∑/ mi/ =/ 1/ 即/ 满足/ 系统/ 可/ 调度/ 性/ 约束条件/ ./ (/ 3/ )/ 下面/ 证明/ 对于/ 任意/ 给定/ 实数/ ξ/ ,/ 0/ </ ξ/ </ 1/ ,/ 至少/ 存在/ 一个/ 任务/ 集/ 的/ 利用率/ U/ / mln2m/ 使得/ ∑/ m/ 下/ 参数/ :/ i/ =/ 1/ 对于/ 给定/ 的/ m/ 和/ ni/ ,/ 构造/ 一个/ 任务/ 集/ ,/ 具有/ 以/ α/ i/ =/ 2/ -/ 2ln2m/ 当/ ni/ 取/ 较大/ 值时/ ,/ α/ i/ =/ 2/ -/ 2e/ -/ ln2m/ ∑/ m/ α/ i/ =/ 2m/ -/ (/ 2m/ -/ 1/ )/ e/ -/ ξ/ >/ 2m/ -/ (/ 2m/ -/ 1/ )/ =/ 1/ ./ i/ =/ 1/ 由/ 推论/ 2/ 可知/ ,/ 当/ m/ 的/ 值/ 越/ 大/ ,/ Ubound/ 越小/ ./ m/ →/ 时/ ,/ min/ (/ Ubound/ )/ ≈/ 1/ // 2/ ,/ 即/ 最坏/ 情况/ 下/ ,/ 系统/ 可/ 调度/ 利用率/ 不/ 小于/ 50/ %/ ./ 5/ 计算机/ 仿真/ 实验/ 5.1/ 实时性/ 比较/ 通过/ C++/ 建模/ ,/ 对/ 处理器/ 双层/ 分区/ 调度/ 策略/ 下/ 的/ 多个/ 任务/ 集/ 进行/ 了/ 仿真/ 实验/ ,/ 实验/ 平台/ 采用/ V/ C++/ 6.0/ ./ 将/ 匹配/ 型/ 的/ 分区/ 设计/ 方法/ 与/ 耗尽/ 型/ 和/ 均衡/ 型/ 两种/ 分区/ 设计/ 方法/ 下/ 的/ 调度/ 情况/ 进行/ 了/ 实验/ 比较/ ./ 耗尽/ 型/ 分区/ 设计/ 思想/ 是/ 期望/ 分区/ 每次/ 都/ 能/ 占用/ 全部/ 处理器/ 资源/ 执行/ 全部/ 任务/ ;/ 均衡/ 型/ 分区/ 设计/ 思想/ 是/ 将/ 处理器/ 资源/ 平均分配/ 给/ 每个/ 分区/ [/ 12/ ]/ ./ 实验/ 中/ ,/ 将/ 任务/ 延迟时间/ 率/ 作为/ 衡量/ 系统/ 强/ 实时性/ 的/ 指标/ ,/ 任务/ 延迟时间/ 率/ 定义/ 为/ 任务/ 的/ 实际/ 执行/ 延迟时间/ 与/ 任务/ 的/ 截止/ 期限/ 的/ 比率/ ./ 最大/ 延迟时间/ 率/ 、/ 最小/ 延迟时间/ 率/ 和/ 平均/ 延迟时间/ 率/ 分别/ 表示/ 任务/ 执行/ 的/ 最大/ 延迟时间/ 、/ 最小/ 延迟时间/ 和/ 平均/ 延迟时间/ 与/ 任务/ 截止/ 期限/ 的/ 比率/ ./ 实验/ 结果/ 如图/ 3/ ~/ 图/ 5/ 所示/ ,/ 在/ 仿真/ 环境/ 中/ ,/ 系统/ 由/ 两个/ 分区/ 组成/ ,/ 分区/ 中/ 包括/ 周期性/ 的/ 实时/ 任务/ ,/ 并且/ 任务/ 的/ 截止/ 时限/ 与/ 周期/ 相等/ ,/ 表/ 1/ 给出/ 了/ 实验/ 中/ 的/ 一组/ 任务/ 集/ ,/ 任务/ 的/ 执行/ 时间/ 和/ 周期/ 参数设置/ 如表/ 1/ 所示/ ./ 表/ 2/ 给出/ 了/ 实验/ 的/ 对比/ 结果/ ./ Page6/ 表/ 2/ 采用/ 不同/ 方法/ 分区/ 设计/ 的/ 仿真/ 结果/ 比较/ 比较/ 参数/ 耗尽/ 型/ 均衡/ 型/ 匹配/ 型/ 从表/ 2/ 的/ 结果/ 可以/ 看出/ ,/ 对于/ 同一/ 任务/ 集/ ,/ 在/ 相同/ 的/ 仿真/ 时间/ 内/ ,/ 如图/ 3/ ~/ 5/ 所示/ 的/ 3/ 种/ 分区/ 设计/ 方法/ 的/ 最大/ 延迟时间/ 率/ 差别/ 较大/ ./ 耗尽/ 型/ 和/ 均衡/ 型/ 的/ 分区/ 设计/ 均/ 使得/ 任务/ 的/ 实际/ 执行/ 延迟时间/ 有/ 可能/ 最大/ 延迟时间/ 率/ // %/ 188.462103/ ./ 84676.923/ 超过/ 截止/ 时限/ (/ 最大/ 延迟时间/ 率/ 分别/ 为/ 188.642/ %/ 、/ 103.846/ %/ ,/ 超过/ 截止/ 时限/ 的/ 周期/ 任务/ 数/ 分别/ 为/ 12/ 和/ 4/ )/ ,/ 而/ 匹配/ 型/ 的/ 分区/ 设计/ 实验/ 中/ ,/ 没有/ 任务/ 的/ 实际/ 执行/ 延迟时间/ 超过/ 截止/ 时限/ (/ 最大/ 延迟时间/ 率/ 76.923/ %/ ,/ 超过/ 截止/ 时限/ 的/ 周期/ 任务/ 数为/ 0/ )/ ./ 仿真/ 实验/ 结果表明/ 基于/ 匹配/ 型/ 的/ 分区/ 设计/ 可以/ 更好/ 地/ 满足/ 硬/ 实时/ 系统/ 双层/ 分区/ 调度/ 的/ 实时性/ 要求/ ./ 5.2/ 分区/ 可/ 调度/ 利用率/ 比较/ 文献/ [/ 10/ ]/ 给出/ 了/ 双层/ 调度/ 下/ 分区/ 可/ 调度/ 利用率/ 的/ 最小/ 上限/ ./ 参照/ 本文/ 定理/ 1/ ,/ 可以/ 得到/ 分区/ 执行/ 能力/ 下/ 相应/ 的/ 分区/ 可/ 调度/ 利用率/ 最小/ 上限/ Ubound/ ,/ 其/ 结果/ 与/ 文献/ [/ 10/ ]/ 的/ 比较/ 如表/ 3/ 所示/ ./ 由表/ 3/ 分析/ 可知/ ,/ 随着/ 分区/ 处理/ 能力/ α/ 的/ 增加/ ,/ 分区/ 最大/ 可/ 调度/ 利用率/ 的/ 最小/ 上限/ 也/ 相应/ 增加/ ./ 对于/ 相同/ 的/ 分区/ 处理/ 能力/ ,/ 同一/ 分区/ 中子/ 任务/ 数目/ 越/ 多/ ,/ 分区/ 的/ 最大/ 可/ 调度/ 利用率/ 最小/ 上限/ 越小/ ./ 相比/ 文献/ [/ 10/ ]/ ,/ 本文/ 给出/ 的/ 计算方法/ 有效/ 地/ 提高/ 了/ 可/ 调度/ 利用率/ 的/ 最小/ 上限/ ./ 图/ 3/ 耗尽/ 型/ 分区/ 设计/ 情况/ 下/ 延迟时间/ 率/ 曲线图/ 4/ 均衡/ 型/ 分区/ 设计/ 情况/ 下/ 延迟时间/ 率/ 曲线图/ 5/ 匹配/ 型/ 分区/ 设计/ 情况/ 下/ 延迟时间/ 率/ 曲线/ α/ 0.10/ ./ 0520.0350/ ./ 0510.0350/ ./ 0510.0350/ ./ 20.1080/ ./ 0750.1060/ ./ 0740.1050/ ./ 0740.30/ ./ 1690.1210/ ./ 1640.1180/ ./ 1630.1180/ ./ 40.2360/ ./ 1740.2260/ ./ 1680.2230/ ./ 1670.50/ ./ 3090.2360/ ./ 2920.2260/ ./ 2880.2230/ ./ 60.3910/ ./ 3090.3630/ ./ 2920.3570/ ./ 2880.70/ ./ 4810.3980/ ./ 4400.3700/ ./ 4310.3630/ ./ 80.5820/ ./ 5070.5240/ ./ 4620.5110/ ./ 4520.90/ ./ 6970.6460/ ./ 6160.5760/ ./ 5980.5601/ ./ 00.8280/ ./ 8280.7180/ ./ 7180.6930/ ./ 693/ 注意/ 到/ α/ =/ 1/ 的/ 情况/ ,/ 分区/ 可/ 调度/ 利用率/ 最小/ 上限/ 取/ 最大值/ ,/ 此时/ 分区/ 占用/ 全部/ 系统资源/ ,/ 即/ 相当于/ 单层/ 的/ RM/ 调度/ ,/ 两种/ 方法/ 得到/ 的/ 结果/ 都/ 与/ Liu/ 和/ Layland/ [/ 14/ ]/ 所/ 推导/ 的/ RM/ 可/ 调度/ 利用率/ 上限/ 相一致/ ,/ α/ 取/ 其它/ 值时/ ,/ 本文/ 的/ 方法/ 相比/ 文献/ [/ 10/ ]/ ,/ 在/ 其/ 基础/ 上/ 至少/ 提高/ 了/ 6.7/ %/ ./ 5.3/ 分区/ 设计/ 成功率/ 仿真/ 实验/ 中/ ,/ 使用/ 分区/ 设计/ 成功率/ (/ successfulPage7/ 机/ 选择/ ,/ 服从/ 均匀分布/ ;/ designpercentage/ )/ 作为/ 衡量/ 分区/ 设计/ 算法/ 好坏/ 的/ 一个/ 性能指标/ ./ 成功/ 分区/ 设计/ 是/ 指能/ 找到/ 满足/ 系统/ 可/ 调度/ 约束条件/ 的/ 分区/ 参数/ ,/ 使得/ 系统/ 所有/ 分/ 区内/ 的/ 任务/ 可/ 成功/ 调度/ ,/ 找/ 不到/ 这样/ 的/ 分区/ 参数/ ,/ 则/ 说/ 分区/ 设计/ 失败/ ./ 分区/ 设计/ 成功率/ 越高/ ,/ 说明/ 分区/ 设计/ 算法/ 越好/ ./ 系统/ 分别/ 由/ 2/ 个/ 分区/ 、/ 3/ 个/ 分区/ 、/ 5/ 个/ 分区/ 组成/ ,/ 任务/ 的/ 参数/ 根据/ 下面/ 的/ 方法/ 产生/ :/ (/ 1/ )/ 每个/ 分区/ 中/ 任务/ 的/ 个数/ 在/ 2/ ~/ 10/ 个/ 之间/ 随/ (/ 2/ )/ 任务/ 最坏/ 情况/ 下/ 的/ 执行/ 时间/ Ci/ 在/ 2/ 个/ 时间/ 单位/ 到/ 30/ 个/ 时间/ 单位/ 之间/ 随机/ 选择/ ,/ 服从/ 均匀分布/ ;/ (/ 3/ )/ 每个/ 任务/ 实例/ τ/ i/ 的/ 松弛/ 时间/ li/ 服从/ 100/ ~/ (/ 4/ )/ 任务/ 周期/ Ti/ =/ Ci/ +/ li/ ./ 实验/ 结果/ 是/ 采用/ 200/ 次/ 独立/ 实验/ 结果/ 的/ 平均值/ ,/ 为了/ 比较/ 算法/ 在/ 不同/ 的/ 系统/ 负载/ 情况/ 下/ 的/ 性能/ ,/ 实验/ 中/ 系统/ 负载/ 率/ 的/ 取值/ 范围/ 为/ 0.4/ ~/ 0.8/ ./ 图/ 6/ 给出/ 了/ 分区/ 数目/ 分别/ 为/ 2/ 、/ 3/ 、/ 5/ 时/ ,/ 不同/ 的/ 系统/ 负载/ 下/ 分区/ 设计/ 成功率/ 的/ 变化趋势/ ./ 从图/ 中/ 我们/ 不难/ 发现/ ,/ 只要/ 系统/ 负载/ 率/ 不/ 大于/ 50/ %/ ,/ 则/ 调度/ 成功率/ 为/ 100/ %/ ,/ 这/ 与/ 推论/ 2/ 的/ 结论/ 相一致/ ./ 当/ 系统/ 负载/ 率/ 大于/ 50/ %/ 之后/ ,/ 随着/ 系统/ 负载/ 的/ 增加/ ,/ SDP/ 呈/ 下降/ 趋势/ ./ 在/ 相同/ 的/ 负载/ 情况/ 下/ ,/ 随着/ 分区/ 数目/ 的/ 增加/ ,/ SDP/ 呈/ 下降/ 趋势/ ./ 这是/ 由于/ 分区/ 数越/ 多/ ,/ 任务/ 越/ 多/ ,/ 系统/ 更/ 复杂/ ,/ 因此/ 保证系统/ 实时性/ 的/ 分区/ 设计/ 成功率/ 越低/ ./ 400/ 之间/ 的/ 均匀分布/ ;/ 6/ 结论/ 一般/ 的/ 可/ 调度/ 性/ 研究/ 大多/ 集中/ 于/ 最大/ 响应/ 时间/ 分析/ 的/ 方法/ ,/ 它/ 的/ 分析/ 结果/ 对/ 任务/ 的/ 周期/ 和/ 执行/ 时间/ 的/ 值/ 敏感/ ,/ 缺少/ 鲁棒性/ ./ 在/ 工程设计/ 的/ 初始/ 阶段/ ,/ 任务/ 集合/ 也许/ 不能/ 完备/ ,/ 可/ 调度/ 利用率/ 对于/ 指导/ 我们/ 在/ 设计/ 时/ 灵活/ 选择/ 任务/ 具有/ 重要/ 意义/ ./ 本文/ 根据/ ARINC653/ 标准/ ,/ 建立/ 了/ 可行/ 的/ 分区/ 调度/ 模型/ ,/ 通过/ 可/ 调度/ 利用率/ ,/ 对系统/ 的/ 实时/ 性能/ 进行/ 了/ 理论/ 分析/ ./ 本文/ 给出/ 了/ 分区/ 可/ 调度/ 利用率/ 的/ 最小/ 上限/ ./ 提出/ 了/ 与/ 分区/ 利用率/ 匹配/ 的/ 分区/ 设计/ 方法/ ,/ 证明/ 了/ 在/ 最坏/ 情况/ 下/ ,/ 系统/ 可/ 调度/ 的/ 利用率/ 不/ 小于/ 50/ %/ ,/ 并/ 进行/ 了/ 仿真/ 验证/ ./ 为/ 硬/ 实时/ 系统/ 双层/ 分区/ 调度/ 设计/ 提供/ 了/ 理论/ 分析/ 基础/ ./ 

