Page1/ 分布式/ 约束/ 优化/ 问题/ 研究/ 及其/ 进展/ 1/ )/ (/ 国防科学技术大学/ 计算机/ 学院/ 长沙/ 410073/ )/ 2/ )/ (/ 中国/ 电子设备/ 系统工程/ 公司/ 北京/ 100039/ )/ 摘要/ 多/ Agent/ 协作/ 过程/ 中/ 的/ 许多/ 问题/ 都/ 可以/ 被/ 抽象/ 为/ 分布式/ 约束/ 优化/ 问题/ (/ DCOP/ )/ ,/ 如/ 规划/ 、/ 行程/ 安排/ 、/ 分布式/ 控制/ 和/ 资源分配/ 等/ ./ 这些/ 问题/ 关注/ 于/ 如何/ 通过/ 协调/ 多/ Agent/ 之间/ 的/ 相互/ 决定/ ,/ 以/ 达到/ 一个/ 全局/ 最优/ 决策/ 的/ 目的/ ./ 相应/ 地/ ,/ 分布式/ 约束/ 优化/ 算法/ 是/ 用来/ 求解/ 此类/ 问题/ 的/ 一种/ 有效/ 方式/ ./ 该文/ 对/ 分布式/ 约束/ 优化/ 问题/ 进行/ 了/ 综述/ ,/ 首先/ ,/ 阐述/ 了/ 分布式/ 约束/ 优化/ 问题/ 的/ 基本概念/ ,/ 并/ 提出/ 了/ 一种/ 分布式/ 约束/ 优化/ 算法/ 的/ 分类/ 框架/ ./ 其次/ ,/ 根据/ 该/ 分类/ 框架/ ,/ 介绍/ 了/ 目前/ 已有/ 的/ 分布式/ 约束/ 优化/ 算法/ ,/ 并/ 加以/ 对比/ 分析/ ./ 此外/ ,/ 分析/ 了/ 分布式/ 约束/ 优化/ 问题/ 的/ 相关/ 应用/ ./ 最后/ ,/ 指明/ 了/ 分布式/ 约束/ 优化/ 领域/ 的/ 未来/ 研究/ 趋势/ ./ 关键词/ 分布式/ 约束/ 优化/ ;/ Agent/ ;/ 人工智能/ ;/ 分布式/ 约束/ 优化/ 算法/ 1/ 引言/ 云/ 计算/ 是/ 随着/ 计算/ 、/ 存储/ 以及/ 通信/ 技术/ 的/ 快速/ Page2/ 般/ 来说/ ,/ CP/ 希望/ 能够/ 尽可能/ 地/ 提高/ 其/ 资源/ 利用率/ 以/ 谋求/ 自身/ 利益/ 的/ 最大化/ ./ 然而/ ,/ 在/ 很多/ 情况/ 下/ ,/ 用户/ // 租户/ 可能/ 需要/ 同时/ 租用/ 多个/ CP/ 的/ 资源/ 来/ 完成/ 其/ WK/ 请求/ ,/ 不同/ 的/ CP/ 由于/ 资源/ 的/ 有限/ 以及/ 相互之间/ 需要/ 互相/ 通信/ 等/ 而/ 使/ 它们/ 之间/ 存在/ 一定/ 的/ 约束/ ./ 不同/ CP/ 出于/ 对/ 自身/ 收益/ 最大化/ 的/ 目的/ ,/ 在/ 分配资源/ 给/ WK/ 时/ 并未/ 考虑/ 它们/ 之间/ 的/ 约束/ ,/ 使得/ 其/ 分配/ 给/ 用户/ // 租户/ 的/ 资源/ 并非/ 是/ 最/ 合理/ 的/ ,/ 导致/ 不同/ CP/ 之间/ 的/ 资源分配/ 方式/ 存在/ 一定/ 的/ 冲突/ (/ 违背/ 了/ 相关/ 的/ 约束/ )/ ,/ 最终/ 使得/ 全局/ 的/ 资源/ 利用率/ 较/ 低/ ./ 我们/ 称/ 将/ WK/ 部署/ 在/ CP/ 提供/ 的/ 基础设施/ 资源/ 上/ 的/ 问题/ 为云/ 计算/ 中/ 的/ 资源分配/ 问题/ (/ ResourceAllocation/ ,/ RA/ )/ [/ 1/ -/ 2/ ]/ ,/ 不同/ CP/ 之间/ 在/ RA/ 中/ 因为/ 共同/ 服务/ 于/ 同一/ WK/ 而/ 导致/ 它们/ 在/ 分配资源/ 时/ 存在/ 一定/ 的/ 约束/ ,/ 如/ 它们/ 之间/ 互相/ 通信/ 等/ ./ 如何/ 有效/ 地/ 解决/ RA/ 问题/ 并且/ 使得/ 全局/ 资源/ 利用率/ 最大化/ 是/ 一个/ 非常/ 具有/ 挑战性/ 的/ 工作/ ./ 约束/ 是/ 事物/ 之间/ 相互/ 制约/ \/ 冲突/ 关系/ 的/ 数学/ 建模/ [/ 3/ ]/ ./ 约束/ 满足/ 问题/ (/ ConstraintSatisfactionProblems/ ,/ CSPs/ )/ [/ 4/ ]/ 的/ 目标/ 是/ 找到/ 一个/ “/ 和谐/ ”/ 的/ 解/ ,/ 即/ 满足/ 问题/ 中/ 所有/ 约束条件/ 的/ 解/ ./ 自/ Montanari/ 等/ 人/ [/ 5/ ]/ 首次/ 在/ 图像处理/ 问题/ 中/ 提出/ 了/ CSPs/ 以来/ ,/ CSPs/ 作为/ 一种/ 重要/ 的/ 求解/ 方法/ 在/ 人工智能/ 与/ 计算机科学/ 等/ 领域/ 得到/ 了/ 广泛/ 的/ 应用/ [/ 6/ ]/ ,/ 从/ n/ 皇后/ 、/ 图/ 染色/ 等/ 经典/ 问题/ 到/ 时序/ 安排/ 、/ 计划编制/ 、/ 资源分配/ 等/ 问题/ ,/ 都/ 可以/ 通过/ 建模/ 成/ CSPs/ 来/ 求解/ [/ 4/ ]/ ./ 通过/ 将/ RA/ 建模/ 成/ CSPs/ 问题/ 进行/ 求解/ ,/ 能够/ 找到/ 一个/ 满足/ WK/ 约束/ 的/ 资源分配/ 方式/ ,/ 即/ 为/ 一个/ 约束/ 满足/ 解/ ,/ 但/ CSPs/ 并未/ 考虑/ 解/ 的/ 质量/ 问题/ ,/ 解/ 的/ 质量/ 在/ RA/ 中指/ 部署/ WK/ 所/ 付出/ 的/ “/ 代价/ ”/ ,/ 即/ 部署/ 该/ WK/ 所/ 需要/ 的/ 物理/ 资源/ 的/ 数量/ ./ 然而/ ,/ 在/ 很多/ 情况/ 下/ ,/ CP/ 往往/ 希望/ 部署/ 一个/ WK/ 所/ 花费/ 的/ 代价/ 最小/ ,/ 即/ 分配/ 给/ 该/ WK/ 的/ 资源/ 最少/ ,/ 在/ 这种/ 提出/ 了/ 最优性/ 要求/ 时/ ,/ CSPs/ 则/ 无法/ 适用/ ./ 约束/ 优化/ 问题/ (/ ConstraintOptimizationProblems/ ,/ COPs/ )/ [/ 7/ -/ 8/ ]/ 在/ CSPs/ 的/ 基础/ 上/ 进一步/ 提出/ 了/ 最优性/ 的/ 要求/ ./ 分布式/ 约束/ 优化/ 问题/ (/ DistributedConstraintOptimizationProblem/ ,/ DCOP/ )/ 是/ 分布式/ 的/ COPs/ ,/ 它/ 由/ 一系列/ 独立/ 的/ COPs/ 组成/ ,/ 其中/ 每个/ COPs/ 由/ 一个/ Agent/ 所/ 拥有/ ,/ 不同/ 的/ Agent/ 之间/ 因为/ 一些/ 共同/ 的/ 约束/ 而/ 构成/ 一个/ 整体/ ,/ 它/ 能够/ 有效/ 地/ 用于/ 求解/ RA/ 问题/ ,/ 同时/ 能够/ 保证/ 得到/ 的/ 解是/ 全局/ 最优/ 的/ ./ 通过/ 将/ RA/ 建模/ 成/ DCOP/ 问题/ 以/ 求解/ 最优/ 分配/ 方案/ ,/ RA/ 问题/ 分布/ 于/ 多/ Agent/ 中/ ,/ 其中/ 每个/ CP/ 即为/ 一个/ Agent/ ,/ 它/ 是/ 一个/ 自治体/ ,/ Agent/ 之间/ 相互/ 独立/ ,/ 分别/ 负责管理/ 自己/ 的/ 内部/ 问题/ ./ 每个/ Agent/ 又/ 是/ 智能/ 的/ ,/ 能够/ 根据/ 环境/ 的/ 不同/ 做出/ 有利/ 的/ 选择/ ./ DCOP/ 的/ 目标/ 就是/ 通过/ 协调/ 多个/ Agent/ 之间/ 的/ 相互/ 决定/ ,/ 使得/ 整体/ 的/ 利益/ 最大化/ ,/ 从而/ 达到/ 一个/ 全局/ 最优/ 的/ 目的/ ./ 除了/ RA/ 问题/ 外/ ,/ 现实/ 应用/ 中/ 的/ 许多/ 问题/ 也/ 都/ 可以/ 通过/ 建模/ 成/ DCOP/ 问题/ 进行/ 求解/ ,/ 如/ 资源/ 调度/ 和/ 任务分配/ 、/ 协同/ 决策问题/ [/ 9/ ]/ 、/ 组合/ 拍卖/ 问题/ [/ 10/ ]/ 、/ Web/ 服务/ 组合/ 问题/ [/ 11/ ]/ 、/ 传感器/ 分配/ 问题/ [/ 12/ ]/ 等/ ./ DCOP/ 是/ NP/ 难/ 问题/ [/ 4/ ]/ ,/ 对/ 其/ 进行/ 求解/ 是/ 一件/ 既/ 非常/ 困难/ 又/ 非常/ 具有/ 挑战性/ 的/ 工作/ ./ 分布式/ 约束/ 优化/ 求解/ 算法/ (/ DCOP/ )/ 是/ 目前/ 能够/ 有效/ 求解/ DCOP/ 问题/ 的/ 算法/ ,/ 不同/ 算法/ 的/ 主要/ 区别/ 在于/ 求解/ DCOP/ 时所/ 花费/ 的/ 代价/ 以及/ 求得/ 解/ 的/ 质量/ 不同/ ,/ 如/ 算法/ 时间/ 、/ 空间/ 复杂度/ 以及/ 解/ 是否/ 最/ 优等/ ,/ 在/ 寻找/ 最优/ 解/ 过程/ 中/ 为了/ 使/ 代价/ 尽可能/ 最小/ ,/ 研究者/ 们/ 纷纷/ 提出/ 了/ 各种/ 用于/ 求解/ DCOP/ 问题/ 的/ 算法/ ./ 近年来/ 重点/ 关注/ DCOP/ 的/ 国际/ 顶级/ 会议/ 有/ AAAI/ (/ AmericanAssociationforAINationalConference/ )/ 、/ AAMAS/ (/ Intl/ ./ Conf/ ./ onAutonomousAgentsandMulti/ -/ AgentSystems/ )/ 、/ IJCAI/ (/ Intl/ ./ JointConf/ ./ onAI/ )/ 等/ ./ DCOP/ 的/ 主要/ 研究/ 团队/ 有/ 日本/ 九州/ 大学/ 的/ Yokoo/ [/ 13/ -/ 14/ ]/ 、/ 瑞士/ 洛桑/ 理工学院/ 的/ BoiFaltings/ 以及/ 以色列/ 本/ 古里安/ 大学/ 等/ ./ 本文/ 以/ 如何/ 有效/ 地/ 对/ DCOP/ 进行/ 求解/ 为/ 目标/ ,/ 对/ DCOP/ 进行/ 了/ 综述/ ./ 本文/ 第/ 2/ 节/ 给出/ DCOP/ 的/ 相关/ 形式化/ 描述/ ,/ 并且/ 介绍/ 如何/ 将/ 常见/ 的/ 经典/ 问题/ 建模/ 为/ DCOP/ ;/ 第/ 3/ 节/ 提出/ DCOP/ 算法/ 分类/ 框架/ ;/ 第/ 4/ 节/ 介绍/ 现有/ 的/ 典型/ DCOP/ 算法/ ,/ 且/ 对比/ 不同/ 算法/ 之间/ 的/ 异同/ 性/ ;/ 第/ 5/ 节/ 分析/ DCOP/ 问题/ 相关/ 的/ 典型/ 应用/ ;/ 最后/ ,/ 分析/ DCOP/ 领域/ 未来/ 的/ 发展趋势/ 并/ 总结/ 全文/ ./ 2/ 分布式/ 约束/ 优化/ 问题/ 描述/ 为了/ 更/ 深入/ 地/ 了解/ 分布式/ 约束/ 优化/ 问题/ 及其/ 特点/ ,/ 我们/ 将/ 首先/ 介绍/ 分布式/ 约束/ 优化/ 问题/ 的/ 定义/ 以及/ 相关/ 应用/ 实例/ ./ 2.1/ 分布式/ 约束/ 优化/ 问题/ 定义/ 定义/ 1/ ./ 分布式/ 约束/ 优化/ 问题/ 通常/ 被/ 定义/ 为/ 五元/ 组/ 〈/ X/ ,/ D/ ,/ F/ ,/ A/ ,/ m/ 〉/ ,/ 其中/ X/ =/ {/ x1/ ,/ …/ ,/ xn/ }/ 是/ 变量/ 的/ 集合/ ,/ D/ =/ {/ D1/ ,/ …/ ,/ Dn/ }/ 是/ X/ 中/ 变量/ 所/ 对应/ 的/ 值域/ 集合/ ,/ F/ =/ {/ f1/ ,/ …/ ,/ fm/ }/ 是/ 约束/ 函数/ 代价/ 的/ 集合/ ,/ A/ =/ {/ A1/ ,/ …/ ,/ Ak/ }/ 是/ Agent/ 的/ 集合/ ,/ m/ 表示/ AgentPage3/ 与/ 变量/ 之间/ 的/ 管理/ 关系/ ,/ 它/ 是/ A/ →/ χ/ 的/ 一个双/ 射/ ./ 其中/ χ/ 是/ 变量/ 集合/ X/ 的/ 一个/ 划分/ ,/ 表示/ 每个/ Agent/ 所/ 对应/ 的/ 内部/ 变量/ 集合/ ,/ 例如/ 对于/ Agent/ -/ 1/ ,/ 存在/ 变量/ (/ x11/ ,/ …/ ,/ x1k/ )/ 属于/ 其/ 内部/ 变量/ ./ 约束/ 代价/ 函数/ 是/ 指/ 定义/ 违反/ 约束条件/ 所/ 带来/ 的/ 代价/ ,/ 一般/ 包括/ 域/ 内/ 约束/ 和域/ 间/ 约束/ 两种/ ,/ 前者/ 是/ 指/ 同一/ Agent/ 内/ 变量/ 之间/ 的/ 约束/ ,/ 而/ 后者/ 是/ 多个/ Agent/ 之间/ 变量/ 的/ 约束/ ./ 同样/ ,/ DCOP/ 中/ 的/ 硬/ 约束条件/ ,/ 对于/ 可能/ 的/ 组合/ 赋值/ 为/ 0/ ,/ 不/ 可能/ 的/ 组合/ 赋值/ 为/ ./ 定义/ 2/ ./ DCOP/ 的/ 目标/ 是/ 通过/ 协商/ 多/ Agent/ 之间/ 的/ 相互/ 决策/ ,/ 对/ 变量/ 进行/ 合理/ 赋值/ ,/ 使得/ 所有/ 违反/ 的/ 约束/ 代价/ 和/ 最小/ ./ 其解/ 的/ 形式化/ 的/ 表示/ 如下/ 式/ (/ 1/ )/ 所示/ ./ 与/ COP/ 的/ 最大/ 区别/ 在于/ 问题/ 分布/ 于/ 多个/ Agent/ 之中/ ,/ 且/ 它们/ 是/ 相互/ 独立/ 的/ 自治体/ ,/ Agent/ 之间/ 只能/ 通过/ 消息传递/ 方式/ 进行/ 交互/ ./ 2.2/ 具体/ 问题/ 的/ DCOP/ 建模/ 多/ Agent/ 领域/ 中/ 的/ 许多/ 真实/ 问题/ 都/ 可以/ 建模/ 成/ DCOP/ 问题/ ,/ 例如/ Petcu/ 等/ 人/ [/ 10/ ]/ 对/ 多/ Agent/ 组合/ 拍卖/ 以及/ 覆盖网/ 优化/ 等/ 问题/ 用/ DCOP/ 进行/ 建模/ ,/ Maheswaran/ 等/ 人/ [/ 15/ ]/ 将/ 分布式/ 多/ 事件/ 调度/ 建模/ 为/ DCOP/ 问题/ 进行/ 求解/ ,/ Sultanik/ 等/ 人/ [/ 16/ ]/ 实现/ 了/ 多/ Agent/ 任务调度/ 语言/ C/ -/ TMS/ 到/ DCOP/ 的/ 自动/ 转换/ ,/ Zhang/ 等/ 人/ [/ 12/ ]/ 给出/ 了/ 移动/ 传感器/ 网络/ 中/ 的/ DCOP/ 的/ 应用/ 等/ ./ 下面/ 我们/ 给出/ DCOP/ 的/ 一个/ 具体/ 问题/ 的/ 建模/ 过程/ ,/ 通过/ 它/ 能够/ 让/ 我们/ 更进一步/ 了解/ DCOP/ ./ 实例/ 1/ ./ 分布式/ 组合/ 拍卖/ 问题/ (/ DistributedCombinatorialAuction/ ,/ DCA/ )/ 是/ 多/ Agent/ 领域/ 中/ 资源分配/ 的/ 一种/ 常见/ 方式/ ,/ 它/ 允许/ 不同/ 的/ 报价/ 者/ 对/ 不同/ 的/ 货品/ 组合/ 进行/ 竞价/ ,/ 在/ 货品/ 数量/ 有限/ 的/ 情况/ 下/ ,/ 其/ 目标/ 是/ 如何/ 分配/ 这些/ 货品/ 使得/ 货品/ 拥有者/ 获得/ 的/ 收益/ 最大/ ./ DCA/ 可/ 被/ 定义/ 为/ 三元组/ 〈/ A/ ,/ G/ ,/ B/ 〉/ ,/ 其中/ A/ =/ {/ A1/ ,/ …/ ,/ Ak/ }/ 表示/ 报价/ 者/ (/ Agent/ )/ 集合/ ,/ G/ =/ {/ g1/ ,/ …/ ,/ gn/ }/ 是/ 所有/ 的/ 货品/ 集合/ ,/ B/ =/ {/ b1/ ,/ …/ ,/ bk/ }/ 是/ 所有/ 的/ 报价单/ 集合/ ./ 报价单/ bi/ 示/ 报价/ 者/ Ai/ 报价/ 的/ 货品/ 集合/ ,/ vi/ 所/ 报价/ 的/ 货品/ Gik/ 为/ 1/ ,/ 否则/ 为/ 0/ ./ vi/ 对于/ / bik/ ∧/ gj/ ∈/ GmGi0/ ,/ 即/ 保证/ 同一/ 货品/ 不能/ 同时/ 被/ 两个/ 不同/ 的/ 报价/ 者/ 获得/ ./ 图/ 1/ 列出/ 了/ 分布式/ 组合/ 拍卖/ 问题/ 建模/ 成/ DCOP/ 的/ 模型/ ./ 如图/ 1/ 所示/ ,/ 有/ 3/ 个/ 报价/ 者/ {/ A1/ ,/ A2/ ,/ A3/ }/ 以及/ 3/ 件/ 货品/ {/ g1/ ,/ g2/ ,/ g3/ }/ ,/ A1/ 对/ 货品/ g1/ ,/ g3/ 进行/ 报价/ ;/ A2/ 对/ 货品/ g1/ ,/ g2/ ,/ g3/ 报价/ ;/ A3/ 对/ 货品/ g2/ ,/ g3/ 报价/ ./ 在/ 将/ 该/ 问题/ 建模/ 成/ DCOP/ 时/ ,/ Agent/ 集合/ 为/ 出价/ 者/ {/ A1/ ,/ A2/ ,/ A3/ }/ ,/ 变量/ 集合/ X/ 为/ {/ g1i/ 表示/ 报价/ 者/ Ak/ 对/ 货品/ gi/ 进行/ 了/ 报价/ ,/ 值域/ 集合/ Dgk/ 为/ {/ 0/ ,/ 1/ }/ ,/ 其中/ 1/ 表示/ 出价/ 者/ 获得/ 该/ 商品/ ,/ 否则/ 没/ 获得/ 该/ 商品/ ./ 映射/ 关系/ M/ 如下/ ,/ A1/ →/ {/ g1/ {/ g2/ 的/ 商品/ 集合/ ./ F/ 表示/ 效益/ 函数/ 集合/ ,/ 表示/ 一组/ 商品/ 所/ 能够/ 带来/ 的/ 效益/ ,/ 如/ 对于/ 组合/ 〈/ g1/ 〈/ 1/ ,/ 1/ 〉/ 时/ ,/ 其/ 效益/ 为/ 10/ ,/ 而/ 对于/ 其他/ 的/ 取值/ ,/ 效益/ 值为/ 0/ ./ 该/ 问题/ 中/ 存在/ 约束/ 是/ 不同/ 的/ 出价/ 者/ 对/ 同一/ 货品/ 进行/ 了/ 报价/ ,/ 最/ 多/ 只有/ 一个/ 报价/ 者/ 能够/ 获得/ 货品/ ,/ 2/ ,/ g21/ ,/ g2/ 其/ 目标/ 是/ 找到/ 一个/ 使得/ 货品/ 拥有者/ 可/ 获得/ 的/ 收益/ 最大/ 的/ 分配/ 方案/ ./ 通过/ 对/ 上述/ 实例/ 的/ 建模/ ,/ 我们/ 知道/ 一个/ 现实/ 应用/ 中/ 的/ 问题/ 能够/ 建模/ 成/ DCOP/ 进行/ 求解/ 必须/ 具备/ 以下/ 几个/ 特性/ :/ (/ 1/ )/ 问题/ 分布/ 于/ 多/ Agent/ 之间/ ,/ 在/ 现实/ 应用/ 中/ ,/ 即/ 问题/ 中/ 涉及/ 到/ 多个/ 角色/ (/ 如/ RA/ 中/ 的/ 云/ 提供商/ 、/ 组合/ 拍卖/ 中/ 的/ 拍卖/ 者/ )/ 的/ 参与/ ;/ (/ 2/ )/ 各个/ 不同/ 的/ 参与者/ 之间/ 存在/ 一定/ 的/ 约束条件/ (/ 如/ 组合/ 拍卖/ 中/ 货品/ 的/ 数量/ 有限/ ,/ 不同/ 的/ 拍卖/ 者/ 对/ 其/ 进行/ 竞争/ )/ ;/ (/ 3/ )/ Agent/ 间/ 需要/ 互相/ 协作/ 完成/ 决策/ ,/ 在/ 求解/ DCOP/ 时/ Agent/ 间/ 需要/ 通过/ 大量/ 的/ 消息传递/ 最终/ 达成/ 一致/ ;/ (/ 4/ )/ 问题/ 求解/ 中有/ 确定/ 的/ 目标/ 函数/ (/ 如/ 组合/ 拍卖/ 问题/ 中/ ,/ 如何/ 使得/ 货品/ 拥有者/ 的/ 获益/ 最大/ )/ ,/ 并且/ 要求/ 寻找/ 到/ 最优/ 解/ ./ 在/ 满足/ 以上/ 4/ 个/ 特性/ 的/ 绝大部分/ 现实/ 应用/ 中/ 的/ 问题/ 都/ 可以/ 考虑/ 建模/ 为/ DCOP/ 问题/ Page4/ 进行/ 求解/ ./ 3/ 分布式/ 约束/ 优化/ 算法/ 分类/ 本文/ 通过/ 对/ 现有/ 的/ 分布式/ 约束/ 优化/ 求解/ 算法/ (/ DCOP/ )/ 进行/ 研究/ 分析/ ,/ 提出/ 了/ 一种/ DCOP/ 算法/ 分类/ 图/ 2DCOP/ 算法/ 分类/ 框架/ 在/ 完全/ 算法/ 中/ ,/ 根据/ 求解/ 的/ 方式/ 不同/ ,/ 分为/ 基于/ 搜索/ // 回溯/ 的/ 算法/ (/ Searchalgorithm/ )/ 以及/ 基于/ 动态/ 规划/ 的/ 算法/ (/ Dynamicprogramming/ )/ ./ 搜索算法/ 中/ 根据/ Agent/ 之间/ 的/ 通信/ 方式/ ,/ 又/ 可以/ 分为/ 同步/ 搜索算法/ (/ Synchronousalgorithm/ )/ 以及/ 异步/ 搜索算法/ (/ Asynchronousalgorithm/ )/ 两种/ ,/ 两者/ 的/ 本质区别/ 在于/ Agent/ 之间/ 的/ 通信/ 是否/ 同步/ ./ 同步/ 算法/ 中/ Agent/ 是/ 同步操作/ 的/ ,/ 而/ 异步算法/ 中/ Agent/ 则/ 是/ 异步/ 工作/ 的/ ./ 对于/ 非/ 完全/ 算法/ ,/ 可以/ 分为/ Agent/ 个体/ 决策/ 算法/ (/ Individualagentsalgorithm/ )/ 和/ Agent/ 组/ 决策/ 的/ 算法/ (/ Groupagentsalgorithm/ )/ [/ 17/ ]/ ./ 其中/ ,/ Agent/ 个体/ 决策/ 算法/ 通过/ 对/ Agent/ 从/ 其他/ Agent/ (/ 相邻/ 的/ )/ 处/ 收集/ 的/ 信息/ ,/ 对/ Agent/ 自身/ 的/ 决策/ 过程/ 等/ 进行/ 简化/ ,/ 从而/ 加快/ 求解/ 速度/ ;/ 而/ Agent/ 组/ 决策/ 算法/ 是/ 通过/ 若干个/ Agent/ 组成/ 本地/ 组/ 进行/ 决策/ ,/ 而/ 非/ Agent/ 本身/ 单独/ 进行/ 决策/ ./ 组/ 决策/ 算法/ 又/ 可以/ 分为/ k/ -/ size/ 最优/ 算法/ 和/ t/ -/ distance/ 最优/ 算法/ ./ 3.1/ 完全/ 算法/ 搜索算法/ 是/ 基于/ 分枝/ 定界/ 思想/ 对/ 状态/ 空间/ 进行/ 搜索/ 求解/ ,/ 搜索算法/ 的/ 效率/ 取决于/ 剪枝/ 的/ 效率/ ,/ 算法/ 的/ 剪枝/ 效率高/ ,/ 可以/ 大大/ 地/ 避免/ 对于/ 非解/ 空间/ 的/ 搜索/ ,/ 从而/ 减小/ 算法/ 的/ 时间/ 和/ 空间/ 复杂度/ ./ 基于/ 动态/ 规划/ 的/ 算法/ 基于/ 桶/ 消元/ (/ bucket/ -/ elimination/ )/ 的/ 思想/ 进行/ 求解/ ,/ 根据/ 问题/ 中/ 涉及/ 到/ 约束/ 关系/ ,/ 对/ 变量/ 逐一/ 进行/ 消元/ ,/ 不断/ 简化/ 问题/ ,/ 直到/ 找到/ 解/ 为止/ ./ 3.1/ ./ 1/ 基于/ 搜索/ 的/ 算法/ 目前/ ,/ 大部分/ 的/ DCOP/ 求解/ 算法/ 都/ 是/ 基于/ 搜索算法/ [/ 18/ -/ 20/ ]/ ./ 基于/ 搜索/ 的/ 算法/ 首先/ 将/ 所有/ 的/ 变量/ 按照/ 框架/ ./ 如图/ 2/ 所示/ ,/ 根据/ 算法/ 是否/ 对/ 得到/ 的/ 解/ 提供/ 质量保证/ ,/ 可/ 分为/ 完全/ 算法/ (/ Completealgorithm/ )/ 和/ 非/ 完全/ 算法/ (/ Non/ -/ completealgorithm/ )/ ./ 两者/ 的/ 区别/ 在于/ ,/ 在/ 前者/ 中/ ,/ 如果/ 问题/ 存在/ 最优/ 解/ ,/ 那么/ 其/ 保证/ 一定/ 能够/ 找到/ 最优/ 解/ ,/ 而/ 后者/ 则/ 不/ 保证/ 一定/ 能够/ 找到/ 最优/ 解/ ./ 一定/ 的/ 结构/ 组织/ 起来/ ,/ 如/ 线性/ 序列/ [/ 21/ ]/ 、/ 任意/ 序列/ 或者/ DFS/ 结构/ [/ 22/ ]/ ./ 然后/ 在/ 这些/ 结构/ 上/ 结合/ 分枝/ 定界/ 思想/ 进行/ 遍历/ 搜索/ 求解/ ./ 根据/ Agent/ 之间/ 消息传递/ 是否/ 同步/ ,/ 可/ 分为/ 同步/ 搜索算法/ 和/ 异步/ 搜索算法/ ./ (/ 1/ )/ 同步/ 搜索算法/ Agent/ 在/ 发送/ 一个/ 消息/ 后/ 必须/ 要/ 在/ 收到/ 相应/ 的/ 回复/ 消息/ 后/ ,/ 才能/ 继续/ 后续/ 的/ 工作/ ,/ 如/ 计算/ 、/ 发送/ 消息/ 等/ ./ 中间/ 过程/ 中/ Agent/ 一直/ 处于/ 空闲/ 等待/ 状态/ ,/ 而且/ 由于/ 该/ 原因/ ,/ 导致/ 同步/ 搜索算法/ 效率/ 较/ 低/ ./ 目前/ 常见/ 的/ 同步/ 搜索算法/ 有/ SBB/ [/ 21/ ]/ 、/ dAO/ -/ Opt/ [/ 10/ ]/ 、/ dAOBB/ [/ 10/ ]/ 、/ dAOBB/ (/ i/ )/ [/ 10/ ]/ 等/ ./ (/ 2/ )/ 异步/ 搜索算法/ 允许/ Agent/ 在/ 收到/ 回复/ 消息/ 前/ ,/ 继续/ 后面/ 的/ 工作/ ,/ 不/ 需要/ 处于/ 空闲/ 等待/ 状态/ ./ 相比/ 于/ 同步/ 搜索算法/ ,/ 它/ 的/ 优点/ 是/ Agent/ 不会/ 长时间/ 处于/ 空闲/ 等待/ 状态/ ,/ 一定/ 程度/ 上/ 提高/ 了/ 算法/ 效率/ ,/ 但/ 该类/ 算法/ 往往/ 会/ 因为/ Agent/ 之间/ 的/ 频繁/ 交互/ 产生/ 大量/ 的/ 消息/ ,/ 通信/ 开销/ 会/ 比较/ 大/ ./ 目前/ 常见/ 的/ 算法/ 有/ ADOPT/ [/ 9/ ]/ 、/ NCBB/ [/ 23/ ]/ 、/ BnB/ -/ ADOPT/ [/ 24/ ]/ 、/ IDB/ -/ ADOPT/ [/ 25/ ]/ 、/ OptAPO/ [/ 26/ ]/ 、/ AFB/ [/ 27/ ]/ 等/ ./ 搜索算法/ 的/ 优点/ 在于/ 其所/ 需/ 的/ 内存空间/ 为/ 多项式/ 级别/ ,/ 不足之处/ 是/ 会/ 产生/ 大量/ 的/ 消息/ ,/ 导致/ 通信/ 开销/ 较大/ ,/ 尤其/ 是/ 异步/ 搜索算法/ ./ 如果/ 拥有/ 足够/ 大/ 的/ 内存空间/ ,/ 可以/ 采用/ Cache/ 机制/ 将/ 算法/ dAOBB/ 和/ NCBB/ 扩展/ 为/ dAOBB/ (/ i/ )/ 和/ NCBB/ (/ i/ )/ ,/ 这能/ 在/ 一定/ 程度/ 上/ 提高/ 算法/ 的/ 效率/ ./ 3.1/ ./ 2/ 基于/ 动态/ 规划/ 的/ 算法/ 基于/ 动态/ 规划/ 的/ DCOP/ 算法/ 的/ 基本/ 思想/ 是/ 在/ Page5DFS/ 结构/ 的/ 基础/ 上/ 进行/ 变量/ 消元/ [/ 28/ ]/ ./ 基于/ 动态/ 规划/ 的/ 算法/ 在/ 人工智能/ 领域/ 也/ 可以/ 将/ 其/ 归/ 为/ 基于/ 推理/ 的/ 方法/ ,/ 随着/ 其/ 在/ COP/ 方面/ 的/ 应用/ ,/ 已经/ 被/ 逐渐/ 地/ 扩展/ 为/ 与/ 其他/ 技术/ 结合/ 使用/ ,/ 例如/ 与/ 分枝/ 限界/ 估测/ 以及/ 与/ 搜索/ 方法/ 结合/ 等/ [/ 29/ -/ 32/ ]/ ./ 目前/ 常见/ 的/ 算法/ 有/ DPOP/ [/ 33/ ]/ 和/ H/ -/ DPOP/ [/ 34/ ]/ 等/ ./ 3.2/ 非/ 完全/ 算法/ 非/ 完全/ 算法/ (/ 近似算法/ )/ 无法/ 保证/ 一定/ 能/ 找到/ 最优/ 解/ ,/ 即使/ 问题/ 存在/ 最优/ 解/ ,/ 因为/ 该类/ 算法/ 只/ 对/ 部分/ 状态/ 空间/ 进行/ 搜索/ ./ 完全/ 算法/ 的/ 时间/ 复杂度/ 往往/ 非常/ 高/ ,/ 在/ 很多/ 大规模/ 的/ 现实/ 应用/ 中/ ,/ 求解/ 最优/ 解/ 非常/ 难/ 、/ 代价/ 巨大/ ,/ 而且/ 有时/ 根据/ 应用/ 需求/ 不/ 需要/ 寻找/ 最优/ 解/ ,/ 只/ 需要/ 找到/ 一个/ 近似/ 最优/ 解/ 即可/ ./ 非/ 完全/ 算法/ 则/ 能够/ 很/ 好/ 地/ 满足/ 这种/ 应用/ 的/ 需求/ ,/ 花费/ 较/ 小/ 的/ 代价/ 找到/ 一个/ 近似/ 最优/ 解/ ./ 其中/ ,/ DCOP/ 非/ 完全/ 算法/ 分为/ Agent/ 个体/ 决策/ 的/ 算法/ 和/ Agent/ 组/ 决策/ 的/ 算法/ ./ 3.2/ ./ 1/ 基于/ Agent/ 个体/ 决策/ 的/ 算法/ Agent/ 个体/ 决策/ 算法/ 主要/ 包括/ MGM/ // DBA/ (/ MaximumGainMessage/ // DistributedBreakoutAlgorithm/ )/ [/ 35/ -/ 36/ ]/ 、/ ALS/ _/ DisCOP/ [/ 37/ ]/ 、/ DSA/ (/ DistributedStochasticAlgorithm/ )/ [/ 38/ ]/ 等/ ,/ 这/ 类/ 算法/ 通常/ 不为/ 解/ 的/ 质量/ 提供/ 任何/ 保证/ ./ 然而/ 在/ 很多/ 的/ 实际/ 应用/ 中/ 关于/ 解/ 的/ 质量/ 问题/ 是/ 一个/ 很/ 重要/ 的/ 考虑/ 因素/ ,/ 导致/ 这/ 类/ 算法/ 的/ 应用/ 范围/ 具有/ 很大/ 的/ 局限性/ ./ 但/ 2009/ 年/ 提出/ 的/ max/ -/ sum/ [/ 39/ ]/ 算法/ 是/ 一个/ 例外/ ,/ 针对/ 某些/ 特定/ 问题/ 实例/ ,/ 它/ 可以/ 提供/ 质量保证/ ,/ 实验/ 表明/ 其/ 在/ 95/ %/ 情况/ 下/ 可以/ 直接/ 得到/ 最优/ 解/ ./ 此类/ 算法/ 可以/ 对解/ 的/ 质量/ 提供/ 一定/ 的/ 保证/ ./ 3.2/ ./ 2/ 基于/ Agent/ 组/ 决策/ 的/ 算法/ Agent/ 组/ 决策/ 的/ 算法/ 中/ ,/ Agent/ 以组/ 的/ 形式/ 去/ 寻找/ 其/ 各自/ 取值/ ,/ 同/ 一组/ 内/ 的/ Agent/ 通过/ 协调/ 它们/ 之间/ 的/ 取值/ ,/ 来/ 达到/ 一个/ 局部/ 最优/ 的/ 结果/ ,/ 主要/ 代表性/ 算法/ 有/ KOPT/ [/ 40/ ]/ 和/ DALO/ [/ 17/ ]/ 算法/ 等/ ./ 在/ 组/ 决策/ 算法/ 中/ ,/ 根据/ 如何/ 将/ Agent/ 集合/ 构成/ 不同/ 的/ 组/ ,/ 又/ 可以/ 分为/ k/ -/ size/ 最优/ 算法/ 和/ t/ -/ distance/ 最优/ 算法/ ./ 在/ 下面/ 的/ 章节/ 中/ ,/ 我们/ 将/ 详细/ 对/ DCOP/ 求解/ 算法/ 进行/ 介绍/ ,/ 包括/ 完全/ 算法/ 和/ 非/ 完全/ 算法/ ,/ 并且/ 对/ 相关/ 算法/ 进行/ 了/ 对比/ 分析/ ./ 4/ 分布式/ 约束/ 优化/ 问题/ 完全/ 算法/ 如图/ 2/ 所示/ 算法/ 分类/ 框架/ ,/ 本节/ 对/ 每/ 一类/ 中/ 比较/ 常见/ 的/ DCOP/ 完全/ 算法/ 进行/ 了/ 研究/ ./ DCOP/ 算法/ 在/ 求解/ DCOP/ 时/ ,/ 首先/ 需要/ 将/ 问题/ 中/ 所/ 涉及/ 的/ 变量/ 按/ 一定/ 的/ 结构/ 组织/ 起来/ ,/ 如/ 线性/ 序列/ [/ 21/ ]/ 、/ 任意/ 序列/ 、/ 伪树/ (/ Pseudo/ -/ Tree/ )/ 结构/ [/ 10/ ]/ 或者/ DFS/ (/ Depth/ -/ FirstSearchTree/ )/ 结构/ [/ 22/ ]/ ,/ 目前/ 绝大多数/ DCOP/ 算法/ 都/ 是/ 基于/ DFS/ 结构/ 的/ ./ 此外/ ,/ 还有/ 一些/ 研究/ 是/ 基于/ 混合结构/ 进行/ 求解/ 的/ [/ 41/ -/ 42/ ]/ ./ 下面/ 首先/ 介绍/ DFS/ 结构/ ,/ 然后/ 再/ 分别/ 介绍/ 各类/ 中/ 比较/ 常见/ 的/ DCOP/ 算法/ ./ 最后/ ,/ 对/ 各种/ 算法/ 的/ 复杂性/ 进行/ 对比/ 分析/ ,/ 有利于/ 我们/ 横向/ 地/ 比较/ 各种/ 算法/ 的/ 优缺点/ 以及/ 适应/ 范围/ ./ 4.1/ DFS/ 结构/ 目前/ 大部分/ 的/ DCOP/ 算法/ 都/ 是/ 基于/ DFS/ 结构/ (/ 伪/ 树结构/ 的/ 一种/ 特例/ )/ ,/ 但/ 也/ 存在/ 一些/ 是/ 基于/ 随机/ 序列/ 的/ ,/ 比较/ 典型/ 的/ 有/ Yokoo/ 等/ 人/ [/ 43/ -/ 44/ ]/ 提出/ 的/ ABT/ 算法/ 和/ AWC/ 算法/ ,/ Silaghi/ 等/ 人/ [/ 45/ ]/ 提出/ 的/ AAS/ 算法/ ,/ Gershman/ 等/ 人/ [/ 27/ ,/ 46/ ]/ 提出/ 的/ AFB/ 算法/ 等/ ./ 也/ 有/ 一些/ 算法/ 是/ 基于/ 顺序/ 序列/ 的/ ,/ 如/ Hirayama/ 等/ 人/ [/ 21/ ]/ 提出/ 的/ SBB/ 算法/ ./ 下面/ 我们/ 将/ 介绍/ 伪/ 树结构/ 以及/ DFS/ 结构/ 的/ 相关/ 概念/ ./ 定义/ 3/ ./ 约束/ 图/ G/ 所/ 对应/ 的/ 伪树/ (/ Pseudo/ -/ Tree/ )/ 结构/ ,/ 根/ 节点/ 是/ 图/ G/ 中/ 预先/ 选定/ 的/ 一个/ 节点/ ,/ 并且/ 图/ G/ 中/ 的/ 相邻/ 节点/ 必定/ 处于/ 同一/ 分枝/ 中/ ./ 自/ Freuder/ 等/ 人/ [/ 22/ ]/ 最早/ 将/ 伪/ 树结构/ 引入/ 到/ 约束/ 优化/ 问题/ 中/ ,/ 从而/ 得到/ 了/ 广泛/ 的/ 应用/ [/ 47/ -/ 49/ ]/ ./ DFS/ 树/ 可以/ 看作/ 是/ 伪树/ 的/ 一种/ 特例/ ,/ 其/ 所有/ 的/ 边/ 都/ 属于/ 约束/ 图/ (/ 即/ DFS/ 中边/ 的/ 数目/ 与/ 约束/ 图/ 一样/ )/ ./ 我们/ 可知/ 因为/ 其/ 特有/ 属性/ ,/ 使得/ DFS/ 非常适合/ 于/ 进行/ 深度/ 优先/ 搜索/ 遍历/ ./ 定义/ 4/ ./ DFS/ 结构/ 通常/ 定义/ 如下/ ,/ 图/ G/ 对应/ 的/ DFS/ 结构/ 与/ 约束/ 图/ G/ 的/ 节点/ 的/ 数目/ 和/ 边/ 的/ 数目/ 都/ 相同/ ,/ 并且/ 相邻/ 的/ 节点/ 必定/ 处于/ 同一/ 分枝/ 中/ ./ 图/ 3/ 为/ 一个/ 简单/ 的/ 约束/ 图/ G/ 转换成/ 伪/ 树结构/ 以及/ DFS/ 结构/ 的/ 例子/ ./ 由图/ 3/ 可知/ ,/ 对于/ 伪树/ 来说/ ,/ 允许/ 树/ 的/ 边/ 数目/ 多于/ 原图/ G/ 的/ 边数/ ,/ 图/ 3/ (/ b/ )/ 中/ 需要/ 添加/ 两条/ 虚边/ X4/ -/ X2/ 和/ X4/ -/ X6/ ,/ 而图/ 3/ (/ c/ )/ 中/ 只/ 包含/ 原图/ G/ 中/ 的/ 边/ ./ DFS/ 结构/ 对于/ DCOP/ 算法/ 的/ 求解/ 效率/ 有/ 一定/ 的/ 影响/ ./ 在/ 搜索/ 的/ 算法/ 中/ ,/ 算法/ 的/ 时间/ 复杂性/ 是/ DFS/ 深度/ 的/ 指数/ 级/ ,/ 而/ 基于/ 动态/ 规划/ 算法/ ,/ 时间/ 和/ 空间/ 复杂度/ 都/ 是/ DFS/ 宽度/ 的/ 指数/ 级/ ./ 因此/ ,/ DFS/ 结构/ 的/ 好坏/ 对于/ 算法/ 的/ 效率/ 有/ 一定/ 的/ 影响/ ./ 显然/ ,/ 对于/ 同一个/ 图/ G/ ,/ 其/ 对应/ 的/ DFS/ 结构/ 并/ 不是/ 唯一/ 的/ ./ 目前/ 生成/ DFS/ 结构/ 的/ 算法/ 和/ 策略/ 较/ 多/ ,/ Chechetka/ 等/ Page6/ 图/ 3/ 一个/ 简单/ 问题/ 的/ 伪/ 树结构/ 以及/ DFS/ 结构/ 示例/ 人/ [/ 50/ ]/ 提出/ 了/ 第/ 1/ 个/ 通过/ 使用/ 启发式/ 算法/ 去/ 尽量/ 地/ 降低/ DFS/ 的/ 深度/ ./ 对于/ 减小/ DFS/ 宽度/ 方面/ ,/ 也/ 有/ 较/ 多/ 的/ 研究/ ,/ 如/ 采用/ MaximumCardinalitySet/ [/ 51/ ]/ 、/ MaximumDegree/ [/ 51/ ]/ 以及/ Min/ -/ Fill/ 策略/ [/ 52/ ]/ 等/ 都/ 能够/ 在/ 一定/ 程度/ 上/ 减小/ DFS/ 的/ 宽度/ ./ 对于/ 不同/ 的/ DCOP/ 算法/ ,/ 根据/ 具体/ 应用/ 的/ 特点/ ,/ 构造/ 最合适/ 的/ DFS/ 结构/ 是/ 非常/ 重要/ 的/ ./ 4.2/ 同步/ 搜索算法/ 下面/ 我们/ 将/ 从/ 基于/ 线性/ 序列/ 和/ 基于/ DFS/ 结构/ 两/ 方面/ 来/ 介绍/ DCOP/ 算法/ ./ 4.2/ ./ 1/ 基于/ 线性/ 序列/ 结构/ 基于/ 线性/ 序列/ 结构/ 的/ 同步/ 搜索算法/ 是/ 指/ 在/ 进行/ 搜索/ 之前/ ,/ 所有/ 的/ 变量/ 按照/ 线性/ 序列/ 进行/ 排列/ ,/ 然后/ 在/ 此/ 序列/ 上/ 按照/ 一定/ 的/ 搜索/ 策略/ 进行/ 搜索/ 求解/ ./ Hirayamad/ 等/ 人/ [/ 21/ ]/ 于/ 1997/ 年/ 提出/ 了/ 第/ 1/ 个/ DCOP/ 完全/ 算法/ SBB/ (/ SynchronousBranchandBound/ )/ ,/ SBB/ 算法/ 主要/ 是/ 用于/ 解决/ DCSP/ ,/ 有时/ 也/ 可/ 用于/ 求解/ DCOP/ ./ 其/ 思想/ 很/ 简单/ ,/ 是/ 经典/ 的/ 分枝/ 定界/ 算法/ 的/ 分布式/ 版本/ ./ 在/ SBB/ 算法/ 中/ ,/ 所有/ 的/ 变量/ 事先/ 都/ 按照/ 线性/ 序列/ 排列/ 好/ (/ 按照/ 一定/ 的/ 优先级/ 排列/ ,/ 一般/ 按/ 从/ 高到/ 低/ 的/ 顺序排列/ )/ ,/ 搜索/ 时/ 按/ 顺序/ 依次/ 对/ 变量/ 进行/ 赋值/ ,/ 在/ 遇到/ 冲突/ 时/ ,/ 改变/ 变量/ 赋值/ ,/ 必要/ 时/ 进行/ 回溯/ ./ SBB/ 算法/ 在/ 问题/ 规模/ 较大/ ,/ 包含/ 的/ 变量/ 较多时/ ,/ 效率/ 一般/ 较/ 低/ ./ 因此/ ,/ SBB/ 一般/ 只/ 用于/ 解决/ 特定/ 的/ 问题/ ,/ 使用/ 范围/ 有限/ ./ Yokoo/ 等/ 人/ [/ 53/ ]/ 提出/ 的/ 异步/ 回溯/ 算法/ ABT/ (/ AsynchronousBackTracking/ )/ 算法/ 也/ 是/ 基于/ 线性/ 序列/ 的/ ,/ 但/ 其/ 一般/ 也/ 只/ 用于/ 对/ 约束/ 满足/ 问题/ 进行/ 求解/ ,/ 对于/ 约束/ 优化/ 问题/ 求解/ 的/ 范围/ 有限/ ./ Gershman/ 等/ 人/ [/ 54/ ]/ 提出/ 的/ AFB/ (/ AsynchronousForwardBounding/ )/ 算法/ 也/ 是/ 基于/ 线性/ 序列/ 结构/ 的/ ,/ 但/ 其/ 采用/ 的/ 是/ “/ 同步/ -/ 异步/ ”/ 混合/ 方式/ ,/ 在/ 搜索/ 过程/ 中/ 利用/ 异步/ 前瞻/ (/ LookAhead/ )/ 技术/ ,/ 减少/ 了/ 一些/ 没/ 必要/ 的/ 搜索/ ./ 4.2/ ./ 2/ 基于/ DFS/ 结构/ Nilsson/ 等/ 人/ 提出/ 的/ AND/ // OR/ 搜索/ 空间/ 在/ 搜索/ 领域/ 有/ 一定/ 的/ 影响力/ ,/ 并且/ 已/ 被/ 应用/ 于/ 诸多/ 领域/ 中/ [/ 22/ ,/ 48/ ,/ 55/ ]/ ./ Dechter/ 等/ 人/ [/ 49/ ]/ 通过/ AND/ // OR/ 图/ 捕获/ 一般/ 的/ 图形/ 模型/ 的/ 搜索/ 空间/ ,/ 包括/ 约束/ 网络/ 以及/ 信任/ 网络/ ./ 在/ AND/ // OR/ 搜索/ 空间/ 进行/ 搜索/ 求解/ 的/ 效率/ 显然/ 要/ 比/ 在/ 线性/ 序列/ 上/ 求解/ 高/ ,/ 因为/ 在/ 搜索/ 过程/ 中/ ,/ 可以/ 对/ AND/ // OR/ 空间/ 中/ 不同/ 分枝/ 同时/ 进行/ 搜索/ 是/ 其/ 关键所在/ ./ (/ 1/ )/ dAO/ -/ OptCollin/ 等/ 人/ [/ 48/ ]/ 于/ 1999/ 年/ 提出/ 了/ dAO/ -/ Opt/ 算法/ ,/ dAO/ -/ Opt/ 是/ 一个/ 同步/ AND/ // OR/ 搜索算法/ 的/ 扩展/ ,/ 在/ DFS/ 结构/ 上以/ 深度/ 优先/ 搜索/ 的/ 策略/ 进行/ 分布式/ 搜索/ ./ DFS/ 结构/ 中/ 不同/ 分枝/ 可以/ 同时/ 进行/ 搜索/ ,/ 这/ 在/ 一定/ 程度/ 上/ 加快/ 了/ 搜索/ 的/ 效率/ ./ dAO/ -/ Opt/ 算法/ 引入/ 了/ 局部/ 代价/ (/ LocalCost/ )/ 的/ 概念/ ,/ 局部/ 代价/ 是/ 指/ 搜索/ 过程/ 中部/ 分解/ 所/ 产生/ 的/ 代价/ ./ 在/ 搜索/ 从根/ 节点/ 到/ 叶子/ 节点/ 过程/ 中/ ,/ 叶子/ 节点/ 接受/ 的/ 消息/ 中将/ 包含/ 所有/ 可能/ 赋值/ 的/ 局部/ 代价/ ,/ 叶子/ 节点/ 从中/ 选择/ 最好/ 情况/ 的/ 代价/ ,/ 并/ 返回/ 给/ 其父/ 节点/ ./ dAO/ -/ Opt/ 算法/ 的/ 代价/ 在/ 最坏/ 情况/ 下/ 是/ DFS/ 深度/ 的/ 指数/ 级/ ,/ 相比/ 于/ 线性/ 序列/ 是/ 所有/ 变量/ 的/ 指数/ 级/ 有/ 较大/ 的/ 改善/ ./ (/ 2/ )/ dAOBBMarinescu/ 等/ 人/ [/ 55/ ]/ 提出/ 的/ dAOBB/ (/ AND/ // ORBranchandBound/ )/ 算法/ ,/ 针对/ 的/ 是/ dAO/ -/ Opt/ 算法/ 中/ 没有/ 考虑/ 剪枝/ 技术/ 而/ 导致/ 需要/ 对/ 全局/ 空间/ 进行/ 搜索/ 的/ 局限性/ ./ dAOBB/ 算法/ 在/ dAO/ -/ Opt/ 的/ 基础/ 上/ 结合/ 了/ 剪枝/ 技术/ 的/ 思想/ ,/ 是/ AOBB/ 算法/ 的/ 分布式/ 版本/ ,/ dAOBB/ 在/ dAO/ -/ Opt/ 的/ 基础/ 上/ 结合/ 了/ 分枝/ 界限/ 技术/ ,/ 合理/ 地/ 使用/ 剪枝/ 技术/ 可以/ 避免/ 对/ 不/ 可能/ 求得/ 解/ 的/ 状态/ 空间/ 进行/ 搜索/ ,/ 一定/ 程度/ 上/ 提高/ 了/ 搜索/ 的/ 效率/ ./ 同样/ ,/ dAOBB/ 算法/ 也/ 是/ 同步/ 搜索算法/ ./ 初始/ 界限/ 选择/ 的/ 好坏/ 对于/ dAOBB/ 算法/ 的/ 效率/ 是/ 有/ 很大/ 影响/ 的/ ,/ 因而/ 涌现出/ 了/ 很多/ 与/ dAOBB/ 算/ Page7/ 法/ 相关/ 的/ 改进/ ,/ 目的/ 是/ 尽可能/ 地/ 提高/ 其/ 效率/ ./ 如/ Faltings/ 等/ 人/ [/ 56/ ]/ 提出/ 的/ A/ -/ DPOP/ 算法/ ,/ 是/ 一个/ 采用/ 了/ 自/ 适应/ minibucket/ 策略/ 的/ 算法/ ,/ A/ -/ DPOP/ 算法/ 能够/ 很/ 好/ 地/ 与/ dAOBB/ 算法/ 结合/ ,/ 在/ 界限/ 选择/ 方面/ 能/ 得到/ 更好/ 的/ 结果/ ./ 同时/ ,/ Marinescu/ 等/ 人/ [/ 57/ ]/ 通过/ 将/ dAOBB/ 与/ Cache/ 机制/ 结合/ ,/ 提出/ 了/ dAOBB/ (/ i/ )/ 算法/ ,/ 其中/ i/ 代表/ 的/ 是/ Cache/ 的/ 大小/ ,/ 采用/ Cache/ 机制/ 能够/ 大大/ 地/ 加快/ 算法/ 的/ 求解/ 速度/ ,/ 效率/ 大大提高/ ./ (/ 3/ )/ HEDA/ 丁博/ 等/ 人/ [/ 58/ ]/ 针对/ 低/ 约束/ 密度/ 的/ 分布式/ 约束/ 优化/ 问题/ ,/ 提出/ 了/ 一种/ 基于/ 贪婪/ 和/ 回/ 跳/ 思想/ 的/ 算法/ HEDA/ ./ 在/ 该/ 算法/ 中/ ,/ 每个/ Agent/ 基于/ 贪婪/ 原则/ 进行/ 决策/ ,/ 利用/ 低/ 约束/ 密度/ 问题/ 中/ 大多数/ 赋值/ 组合/ 不/ 存在/ 冲突/ 这一/ 特点/ 来/ 加快/ 求解/ 速度/ ,/ 并/ 在/ 必要/ 时/ 通过/ 贪婪/ 求解/ 过程/ 的/ 回/ 跳/ 来/ 保证/ 算法/ 完全性/ ./ 4.3/ 异步/ 搜索算法/ 针对/ 同步/ 搜索算法/ 中/ ,/ Agent/ 通常/ 要花/ 大量/ 的/ 时间/ 等待/ 其他/ Agent/ 的/ 消息/ ,/ 导致/ 效率/ 较/ 低/ 的/ 问题/ ,/ 研究者/ 们/ 提出/ 了/ 各种/ 异步/ 搜索算法/ ,/ 有/ ADOPT/ [/ 9/ ]/ 、/ NCBB/ [/ 23/ ]/ 、/ BnB/ -/ ADOPT/ [/ 24/ ]/ 、/ IDB/ -/ ADOPT/ [/ 25/ ]/ 、/ Opt/ -/ APO/ [/ 26/ ]/ 、/ AFB/ [/ 27/ ]/ 等/ ./ 4.3/ ./ 1ADOPTModi/ 等/ 人/ [/ 9/ ]/ 于/ 2005/ 年/ 提出/ 了/ DCOP/ 的/ 异步算法/ ADOPT/ (/ AsynchronousDistributedOptimization/ )/ ,/ ADOPT/ 是/ DCOP/ 领域/ 中/ 第/ 1/ 个/ 完全/ 异步算法/ ./ ADOPT/ 是/ 在/ DFS/ 结构/ 上/ 进行/ 异步/ 搜索/ 操作/ 的/ ,/ 根据/ DFS/ 结构/ 划分/ Agent/ 的/ 优先级/ 关系/ (/ DFS/ 中/ 祖先/ 节点/ 的/ 优先级/ 一般/ 要/ 高于/ 子孙/ 节点/ )/ ./ 该/ 算法/ 的/ 创新/ 之/ 处/ 主要/ 有/ 3/ 点/ :/ (/ 1/ )/ 在/ 搜索/ 过程/ 中/ ,/ 每个/ Agent/ 仅仅/ 根据/ 当前/ 已知/ 的/ 信息/ 选择/ 最优/ 的/ 取值/ ,/ 而/ 非/ 全局/ 信息/ 进行/ 选择/ ;/ (/ 2/ )/ 通过/ 回溯/ 门槛/ (/ backtrackthreshold/ )/ 来/ 有效/ 地/ 改变/ Agent/ 的/ 取值/ ,/ 这/ 能够/ 有效/ 地/ 帮助/ 我们/ 获得/ 之前/ 搜索/ 过/ 的/ 取值/ ;/ (/ 3/ )/ 算法/ 能够/ 在/ 找到/ 最优/ 解时/ 及时/ 停止/ 算法/ 的/ 运行/ ,/ 而/ 不/ 需要/ 额外/ 的/ 算法/ 结束/ 机制/ ./ ADOPT/ 在/ 求解/ DCOP/ 时有/ 很多/ 的/ 好处/ ,/ 但/ 因/ 其/ 计算/ 过程/ 中/ Agent/ 之间/ 自主/ 地/ 进行/ 通信/ 以及/ 更改/ 自身/ 取值/ 信息/ ,/ 每次/ 更改/ 都/ 需要/ 发送信息/ 给/ 其/ 邻居/ 节点/ ,/ 会/ 导致/ 消息/ 数量/ 太/ 多/ ,/ 因此/ 网络/ 开销/ 很大/ ,/ 同时/ 还/ 需要/ DFS/ 宽度/ 的/ 指数/ 级别/ 的/ 内存空间/ ./ 4.3/ ./ 2BnB/ -/ ADOPT/ 南加州/ 大学/ 的/ William/ 等/ 人/ [/ 24/ ]/ 于/ 2008/ 年/ 在/ AAMAS/ 上/ 提出/ 了/ BnB/ -/ ADOPT/ 算法/ ./ BnB/ -/ ADOPT/ 在/ ADOPT/ 上/ 做出/ 了/ 改进/ ,/ 与/ ADOPT/ 算法/ 最大/ 的/ 区别/ 在于/ 将/ 搜索/ 策略/ 从/ Best/ -/ First/ 改变/ 为/ Depth/ -/ First/ (/ 深度/ 优先/ )/ 分枝/ 界限/ 搜索/ ./ 算法/ BnB/ -/ ADOPT/ 运行/ 中/ 的/ 消息传递/ 以及/ 通信/ 都/ 是/ 基于/ ADOPT/ 的/ 框架/ 完成/ 的/ ./ 将/ 搜索/ 策略/ 转变成/ Depth/ -/ First/ 分枝/ 界限/ 搜索/ 是因为/ Best/ -/ First/ 搜索/ 需要/ 不断/ 重复/ 地/ 构造/ 部分/ 解/ ,/ 这会/ 导致/ 很大/ 的/ 计算/ 开销/ 以及/ 内存空间/ [/ 59/ ]/ ,/ 而/ Depth/ -/ First/ 分枝/ 界限/ 搜索/ 则/ 不/ 存在/ 这个/ 问题/ ./ 4.3/ ./ 3IDB/ -/ ADOPTWilliam/ 等/ 人/ [/ 21/ ]/ 于/ 2009/ 年/ 提出/ 的/ IDB/ -/ ADOPT/ (/ IterativeDecreasingBoundADOPT/ )/ 算法/ 也/ 是/ 在/ ADOPT/ 算法/ 上/ 做/ 的/ 改进/ ./ 与/ BnB/ -/ ADOPT/ 算法/ 一样/ ,/ IDB/ -/ ADOPT/ 算法/ 也/ 是/ 基于/ Depth/ -/ First/ 搜索/ 策略/ ,/ 不同之处/ 在于/ IDB/ -/ ADOPT/ 算法/ 中/ 的/ Bound/ 是/ 逐渐/ 递减/ 的/ ./ 其/ 基本/ 思想/ 如下/ ,/ 在/ 搜索/ 过程/ 中/ ,/ 消息/ 中/ 携带/ 着/ 一个/ Bound/ (/ 初始值/ 无穷大/ )/ ,/ 每当/ 找到/ 一个/ 解/ ,/ 且/ 其/ 代价/ 小于/ Bound/ 的/ 值时/ ,/ 就/ 用/ 计算/ 出/ 的/ 代/ 价值/ 替换/ Bound/ 的/ 原来/ 值/ ,/ 这样/ Bound/ 的/ 取值/ 就/ 在/ 不断/ 减小/ ,/ 直到/ 不/ 存在/ 一个/ 解/ ,/ 满足/ 其/ 代价/ 比/ 当前/ Bound/ 还/ 小时/ ,/ 此时/ 的/ 解则/ 是/ 最优/ 解/ ./ 实验/ 表明/ IDB/ -/ ADOPT/ 算法/ 在/ 处理/ 大型/ DCOP/ 问题/ 时/ 的/ 效率/ 要/ 比/ ADOPT/ 高/ ./ 4.3/ ./ 4AFB/ 本/ 古里安/ 大学/ 的/ Gershman/ 等/ 人/ [/ 54/ ]/ 于/ 2006/ 年/ 在/ ECAI/ 上/ 提出/ 了/ AFB/ 算法/ ./ AFB/ 与/ SBB/ 算法/ 一样/ ,/ 也/ 是/ 基于/ 变量/ 的/ 线性/ 序列/ 进行/ 搜索/ ,/ 不同之处/ 在于/ AFB/ 是/ 一个/ “/ 同步/ —/ 异步/ ”/ 混合/ 算法/ ,/ 将/ SBB/ 算法/ 和/ 异步/ 前瞻/ (/ LookAhead/ )/ 结合/ 在/ 一起/ ,/ 而/ SBB/ 算法/ 是/ 同步/ 算法/ ./ 4.3/ ./ 5OptAPOMailler/ 等/ 人/ [/ 26/ ]/ 提出/ 的/ 最/ 优异/ 步/ 部分/ 交叉/ 算法/ OptAPO/ (/ OptimalAsynchronousPartialOverlay/ )/ 利用/ 了/ 称为/ 调停者/ (/ Mediator/ )/ 的/ Agent/ ./ 调停者/ 在/ 算法/ 执行/ 中/ 动态/ 产生/ ,/ 可以/ 将/ 部分/ 变量/ 及其/ 约束/ 集中/ 起来/ ./ OptAPO/ 算法/ 在/ 调停者/ 的/ 干预/ 下/ 直接/ 地/ 通信/ 约束/ ,/ 以/ 局部/ 地/ 集中/ 问题/ ./ OptAPO/ 允许/ Agent/ 扩展/ 和/ 交叉/ 它们/ 在/ 求解/ 过程/ 中/ 用于/ 本地/ 决策/ 的/ 上下文/ ./ 上面/ 介绍/ 的/ 这些/ 搜索算法/ 都/ 是/ 目前/ DCOP/ 问题/ 中/ 比较/ 常见/ 的/ 求解/ 算法/ ,/ 为了/ 进一步/ 了解/ 它们/ 之间/ 的/ 主要/ 区别/ ,/ 表/ 1/ 对比/ 了/ 算法/ 中/ 的/ 一些/ 相关/ 属性/ ,/ 包括/ 搜索/ 策略/ 、/ 通信/ 方式/ 、/ 消息传递/ 方式/ 以及/ 所/ 基于/ 的/ 拓扑/ 结构/ ./ Page8/ 表/ 1DCOP/ 搜索算法/ 的/ 属性/ 比较/ ADOPTNCBBBnB/ -/ ADOPTdAO/ -/ OptdAOBBIDB/ -/ ADOPT4/ ./ 4/ 基于/ 动态/ 规划/ 算法/ 动态/ 规划/ (/ DynamicProgramming/ )/ [/ 60/ -/ 61/ ]/ 一直/ 被/ 认为/ 是/ 解决/ 组合/ 拍卖/ 问题/ [/ 62/ ]/ 的/ 有效/ 方法/ 之一/ ./ 简单/ 而言/ ,/ 动态/ 规划/ 是/ 通过/ 逐一/ 进行/ 变量/ 消元/ 进行/ 求解/ 的/ ,/ 消元/ 过程/ 中/ 主要/ 依据/ 变量/ 之间/ 的/ 约束/ 关系/ ./ Dechter/ 等/ 人/ 提出/ 了/ 动态/ 规划/ 算法/ 的/ 通用/ 框架/ BE/ (/ BucketElimination/ )/ ,/ 框架/ 中/ 详细/ 介绍/ 了/ BE/ 的/ 消元/ 求解/ 原理/ ./ 而/ Kask/ 等/ 人/ 提出/ 了/ 适用/ 于/ 集中式/ 问题/ 的/ 动态/ 规划/ 算法/ BTE/ (/ BucketTreeElimination/ )/ ,/ BT/ E通/ 过/ 在/ BucketTree/ 结构/ 上/ 进行/ 消元/ 求解/ ./ 以下/ 将/ 详细/ 介绍/ 各种/ 典型/ 的/ 动态/ 规划/ DCOP/ 算法/ ,/ 包括/ DPOP/ 、/ H/ -/ DPOP/ 、/ M/ -/ DPOP/ 、/ O/ -/ DPOP/ 等/ ./ 4.4/ ./ 1DPOP/ 瑞士/ 洛桑/ 联邦/ 理工学院/ 人工智能/ 实验室/ 的/ Petcu/ 等/ 人/ [/ 33/ ]/ 于/ 2005/ 年/ 在/ IJCAI/ 会议/ 上/ 提出/ 了/ DPOP/ 算法/ ,/ 开创/ 了/ 基于/ 动态/ 规划/ 策略/ 在/ DCOP/ 问题/ 中/ 的/ 应用/ ./ DPOP/ 是/ 一个/ 基于/ 动态/ 规划/ 的/ DCOP/ 完全/ 算法/ ,/ 是/ 集中式/ BucketElimination/ 算法/ [/ 63/ ]/ 运用/ 于/ DFS/ 结构/ 的/ 分布式/ 版本/ ./ 下面/ 将/ 简单/ 介绍/ DPOP/ 算法/ 的/ 思想/ ./ DPOP/ 算法/ 大致/ 可以/ 分为/ 3/ 个/ 阶段/ :/ DFS/ 构造/ 阶段/ 、/ UTIL/ 消息/ 传播/ 以及/ VALUE/ 消息/ 传播/ 阶段/ ,/ 具体/ 过程/ 包含/ 以下/ 3/ 个/ 阶段/ :/ (/ 1/ )/ DFS/ 构造/ 阶段/ ./ DPOP/ 算法/ 也/ 是/ 基于/ DFS/ 结构/ 的/ ,/ 构造/ DFS/ 的/ 方法/ 有/ 很多/ ,/ 3.1/ 节中/ 已经/ 详细/ 介绍/ 过/ 了/ 有关/ DFS/ 结构/ 的/ 内容/ ;/ (/ 2/ )/ UTIL/ 消息/ 传播/ 阶段/ ./ 该/ 阶段/ 是/ 自/ 底向上/ 传播/ 的/ ,/ 从/ 叶子/ 节点/ 开始/ 沿着/ 伪树/ 中/ 的/ 树边/ (/ tree/ -/ edge/ )/ 开始/ 向上/ 传播/ ./ UTIL/ 消息/ 的/ 定义/ 如下/ ./ UTIL/ 消息/ 是/ 一个/ 多维/ 矩阵/ ,/ 其中/ 每一/ 维度/ 代表/ 的/ 是/ 一个/ 变量/ ,/ UTIL/ 消息/ 中/ 包括/ 了/ 所有/ 变量/ 取/ 不同/ 值时/ 所/ 带来/ 的/ 效用/ 值/ ;/ (/ 3/ )/ VALUE/ 消息/ 传播/ 阶段/ ./ 该/ 阶段/ 与/ UTIL/ 消息/ 传播/ 阶段/ 相反/ ,/ 是/ 自顶向下/ 传播/ 的/ ./ 在/ 上一阶段/ 完成/ 之后/ ,/ 从根/ 节点/ 发起/ ./ 每个/ 节点/ 根据/ 收集/ 到/ 的/ UTIL/ 消息/ ,/ 选择/ 使得/ 效用/ 值/ 达到/ 最大/ 的/ 那个/ 值/ ,/ 直到/ 所有/ 的/ 变量/ 都/ 有/ 取值/ 时/ ,/ 算法/ 结束/ ./ 分布式/ 约束/ 优化/ 问题/ 在/ 过去/ 的/ 一些/ 年里/ 一直/ 稳定/ 快速/ 地/ 发展/ [/ 64/ ]/ ./ 动态/ 规划/ 方法/ 对于/ 求解/ DCOP/ 问题/ 有/ 很大/ 吸引力/ ,/ 因为/ 只/ 需要/ 线性/ 级别/ 的/ 消息/ 数量/ ,/ 但是/ 存在/ 的/ 问题/ 是/ 消息/ 的/ 大小/ 变得/ 非常/ 巨大/ ,/ Agent/ 之间/ 交互/ 的/ 消息/ 经常/ 含有/ 许多/ 冗余/ 的/ 信息/ ,/ DPOP/ 等/ 算法/ 并/ 没有/ 考虑/ 问题/ 本身/ 的/ 一些/ 硬/ 约束条件/ ./ 4.4/ ./ 2H/ -/ DPOPKumar/ 等/ 人/ [/ 34/ ]/ 针对/ DPOP/ 算法/ 中/ 消息/ 长度/ 指数/ 级/ 等/ 不足/ ,/ 于/ 2008/ 年/ 在/ AAAI/ 会议/ 上/ 首次/ 提出/ 了/ H/ -/ DPOP/ 算法/ ,/ H/ -/ DPOP/ 中/ 通过/ 使用/ CDD/ (/ ConstraintDecisionDiagrams/ )/ [/ 65/ ]/ 技术/ 来/ 剔除/ 一些/ 不/ 可能/ 的/ 赋值/ (/ 硬/ 约束条件/ 不/ 满足/ 的/ 赋值/ )/ ,/ 达到/ 压缩/ UTIL/ 消息/ 的/ 目的/ ./ 4.4/ ./ 3O/ -/ DPOPPetcu/ 等/ 人/ [/ 66/ ]/ 于/ 2006/ 年/ 提出/ O/ -/ DPOP/ 算法/ ,/ O/ -/ DPOP/ 算法/ 主要/ 用于/ 解决/ 开放/ 环境/ 的/ 多/ Agent/ 组合/ 优化/ 问题/ ./ 算法/ 与/ DPOP/ 算法/ 类似/ ,/ 也/ 是/ 基于/ 动态/ 规划/ 策略/ 进行/ 求解/ ,/ 但是/ 它/ 是/ 增量/ 式/ 的/ (/ incre/ -/ mental/ )/ ,/ 适合/ 于/ 开放性/ 问题/ ./ 4.4/ ./ 4M/ -/ DPOPPetcu/ 等/ 人/ [/ 67/ ]/ 于/ 2006/ 年/ 提出/ 的/ M/ -/ DPOP/ 算法/ 在/ 求解/ DCOP/ 问题/ 时/ ,/ 同时/ 考虑/ 了/ 社会/ 选择/ 问题/ (/ SocialChoice/ )/ ./ 将/ 社会/ 选择/ 问题/ 建模/ 成/ DCOP/ 问题/ ,/ 通过/ 使用/ 激励/ 相容/ 机制/ 以及/ 纳什/ 均衡/ 等/ 技术/ 来/ 保证/ Agent/ 的/ 可信性/ (/ Faithful/ )/ ,/ 解决/ 了/ 多/ Agent/ 系统/ 中/ 由于/ Agent/ 的/ 自私/ 等/ 特性/ 给/ 问题/ 带来/ 的/ 麻烦/ ,/ 同时/ 这个/ 算法/ 也/ 特别/ 适用/ 于/ 许多/ 经济/ 方面/ 的/ 问题/ ./ 除/ 上面/ 介绍/ 的/ 几种/ 基于/ 动态/ 规划/ 的/ 算法/ 外/ ,/ 还有/ 很多/ 其他/ 相关/ 的/ 算法/ ,/ 如/ 哈佛大学/ Greenstadt/ 等/ 人/ [/ 68/ ]/ 于/ 2007/ 年/ 在/ AAMAS/ 上/ 提出/ 的/ SSDPOP/ 算法/ ./ 相比/ 于/ DPOP/ 算法/ ,/ SSDPOP/ 提供/ 了/ 隐私/ 保护/ 技术/ ,/ 对/ Agent/ 不愿/ 透入/ 给/ 其他/ Agent/ 的/ 信息/ 增加/ 了/ 一定/ 的/ 保护/ 机制/ ,/ 能/ 减少/ 隐私/ 丢失/ 等/ 现象/ 的/ 发生/ ./ 实验/ 结果表明/ SSDPOP/ 将/ 隐私/ 丢失/ 降低/ 了/ 29/ %/ ~/ Page988/ %/ 左右/ ./ 此外/ ,/ 还有/ S/ -/ DPOP/ [/ 69/ ]/ 、/ A/ -/ DPOP/ [/ 56/ ]/ 、/ PC/ -/ DPOP/ [/ 10/ ]/ 、/ BB/ -/ M/ -/ DPOP/ [/ 10/ ]/ 算法/ 等/ ./ 4.5/ 算法/ 比较/ 基于/ 搜索/ 的/ 算法/ 与/ 基于/ 动态/ 规划/ 的/ 算法/ 最/ 主要/ 的/ 区别/ 在于/ 算法/ 的/ 复杂性/ 不同/ ,/ 主要/ 包括/ 时间/ 复杂度/ 以及/ 空间/ 复杂度/ ./ 基于/ 动态/ 规划/ 的/ 算法/ 的/ 时间/ 和/ 空间/ 复杂度/ 都/ 是/ 树/ 的/ 宽度/ 的/ 指数/ 级别/ ./ 然而/ ,/ 对于/ 强力/ 搜索/ 只/ 需要/ 线性/ 的/ 内存/ ,/ 但是/ 所/ 需/ 的/ 时间/ 则/ 取决/ AlgorithmdAO/ -/ OptADOPTNCBBDPOPBnB/ -/ ADOPTH/ -/ DPOPIDB/ -/ ADOPT/ 表/ 2DCOP/ 算法/ 复杂性/ 对比/ TimecomplexityExponentialinthedepthofDFSExponentialinthenumberofvariables/ (/ worst/ -/ case/ )/ ExponentialinthedepthofDFSLinearnumberofmessagesExponentialinthedepthofDFSLinearnumberofmessagesExponentialinthedepthofDFS/ 如表/ 3/ 所示/ ,/ 给出/ 了/ DCOP/ 算法/ 的/ 内存/ 与/ 消息/ 数量/ 的/ 对比/ 关系/ ,/ 表中/ w/ ./ c/ ./ expon/ 代表/ 的/ 是/ 图/ 的/ 宽度/ 的/ 指数/ 级/ (/ constraintdiagramwidth/ )/ ./ 我们/ 可知/ 基于/ 搜索/ 的/ 算法/ 其所/ 需要/ 的/ 内存/ 是/ 比较/ 小/ 的/ ,/ 如表/ 3DCOP/ 算法/ 内存/ 与/ 消息/ 数量/ 对比/ Memorylinearpolynomialw/ ./ c/ ./ exponexponential5/ 分布式/ 约束/ 优化/ 问题/ 非/ 完全/ 算法/ 5.1/ Agent/ 个体/ 决策/ 算法/ Agent/ 个体/ 决策/ 算法/ 主要/ 有/ DBA/ [/ 35/ -/ 36/ ]/ 、/ ALS/ _/ DisCOP/ [/ 37/ ]/ 、/ DSA/ [/ 38/ ]/ 等/ ./ 最小/ 冲突/ 回溯/ 等/ 约束/ 满足/ 算法/ 中/ 的/ 爬山/ 搜索/ 策略/ ,/ 有时/ 会/ 使/ 求解/ 过程/ 陷入/ 局部/ 最小/ (/ local/ -/ minima/ )/ 状态/ ./ local/ -/ minima/ 状态/ 就是/ 一些/ 约束/ 没有/ 被/ 满足/ 从而/ 出现/ 冲突/ ,/ 但是/ 这些/ 冲突/ 的/ 数目/ 不能/ 通过/ 单独/ 改变/ 任何/ 一个/ 变量/ 的/ 值来/ 减小/ ./ 因此/ ,/ DBA/ 算法/ 通过/ 以下/ 两个/ 步骤/ 来/ 实现/ :/ 第一/ ,/ 始终/ 保证/ 评估/ 值/ 是/ 逐步提高/ 的/ ,/ 相邻/ 的/ Agent/ 对/ 可能/ 会/ 提高/ 的/ 评估/ 值/ 进行/ 通信/ ,/ 只有/ 能够/ 最大/ 提高/ 评估/ 值/ 的/ Agent/ 才/ 去/ 改变/ 自己/ 的/ 取值/ ./ 如果/ 两个/ Agent/ 不/ 相邻/ ,/ 那么/ 它们/ 可能/ 出现/ 同时/ 改变/ 自己/ 取值/ 的/ 情况/ ;/ 第二/ ,/ 与/ 检测/ 整个/ Agent/ 是否/ 陷入/ local/ -/ minima/ 不同/ 的/ 是/ ,/ 每个/ Agent/ 检测/ 其/ 是否/ 处于/ quasi/ -/ local/ -/ 于/ 问题/ 的/ 结构/ ,/ 即/ 与/ 问题/ 的/ 规模/ 有关/ ./ 如表/ 2/ 所示/ ,/ 我们/ 对/ 某些/ DCOP/ 算法/ 的/ 时间/ 和/ 空间/ 复杂性/ 进行/ 了/ 比较/ ./ 从表/ 2/ 可以/ 看出/ ,/ 基于/ 动态/ 规划/ 的/ 算法/ 的/ 空间/ 复杂度/ 较大/ ,/ 而/ 基于/ 搜索/ 的/ 算法/ 在/ 时间/ 复杂度/ 上/ 是/ 难以预测/ 的/ ./ 在/ 实际/ 应用/ 中/ ,/ 针对/ 问题/ 的/ 特点/ ,/ 如/ 问题/ 的/ 规模/ 以及/ 对于/ 时间/ 和/ 空间/ 复杂度/ 的/ 要求/ ,/ 选择/ 一个/ 合适/ 的/ 算法/ 往往/ 能/ 获得/ 较/ 好/ 的/ 效果/ ./ ADOPT/ 、/ NCBB/ 、/ AFB/ 等/ ,/ 都/ 是/ 线性/ 的/ ,/ 但是/ 其/ 消息/ 数量/ 都/ 是/ 指数/ 级/ 的/ ./ 而/ 基于/ 动态/ 规划/ 的/ 方法/ ,/ 如/ DPOP/ 、/ H/ -/ DPOP/ 等/ ,/ 其/ 消息/ 数量/ 是/ 线性/ 的/ ,/ 但/ 其/ 需要/ 的/ 内存/ 较大/ ,/ 是/ 指数/ 级/ 的/ ./ ADOPT/ ,/ NCBB/ ,/ AFB/ ,/ SynchBBminima/ 状态/ ,/ 这/ 是/ 比/ local/ -/ minima/ 要/ 更弱/ 的/ 条件/ ,/ 并/ 能够/ 通过/ 局部/ 通信/ 而/ 检测/ 到/ ./ DSA/ 算法/ 中/ ,/ 所有/ Agent/ 之间/ 都/ 是/ 平等/ 的/ ,/ 在/ 处理过程/ 中/ 它们/ 之间/ 没有/ 明显/ 的/ 区分/ 标识/ ,/ 该/ 算法/ 是/ 同步/ 算法/ ./ 节点/ 在/ 发送/ 消息/ 之后/ 必须/ 要/ 收到/ 返回/ 的/ 消息/ 后/ ,/ 才/ 继续/ 下/ 一步/ 的/ 操作/ ,/ 执行/ 局部/ 的/ 计算/ ,/ 并且/ 改变/ 局部/ 状态/ ./ 5.2/ Agent/ 组/ 决策/ 算法/ 在/ Agent/ 组/ 决策/ 算法/ 中/ ,/ 又/ 可以/ 进一步/ 分为/ k/ -/ size/ 最优/ 算法/ [/ 70/ ]/ 和/ t/ -/ distance/ 最优/ 算法/ [/ 71/ ]/ ,/ 它们/ 的/ 区别/ 主要/ 在于/ 选取/ 同组/ 中/ 的/ Agent/ 的/ 方式/ 不同/ ./ k/ -/ size/ 最优/ 算法/ 是/ 随机/ 选取/ k/ 个/ Agent/ 构成/ 一个组/ ;/ 而/ 在/ t/ -/ distance/ 最优/ 算法/ 中/ ,/ 围绕/ 一个/ 中心/ Agent/ ,/ 并/ 将/ 与/ 该/ Agent/ 之间/ 距离/ 小于/ 或/ 等于/ t/ 的/ Agent/ 的/ 集合/ 构成/ 一个组/ ./ 组/ 决策/ 算法/ 有/ 一个/ 特点/ ,/ 假设/ 该组/ 中/ 的/ Agent/ 个数/ 为/ n/ ,/ 如果/ 组/ 决策/ 找到/ 一个/ 局部/ 最优/ 解/ ,/ 我们/ 不/ 可能/ 通过/ 改变/ 小于/ 或/ 等于/ n/ 个/ AgentPage10/ 的/ 决策/ 使/ 结果/ 变得/ 更优/ ./ k/ -/ size/ 最优/ 算法/ 中/ ,/ 典型/ 的/ 算法/ 有/ max/ -/ sum/ [/ 39/ ,/ 72/ -/ 73/ ]/ 以及/ KOPT/ [/ 36/ ]/ 等/ ./ max/ -/ sum/ 算法/ [/ 39/ ,/ 72/ -/ 73/ ]/ 是/ 一种/ 基于/ 一般性/ 分布式/ 定律/ (/ GeneralisedDistributiveLaw/ ,/ GDL/ )/ [/ 74/ -/ 75/ ]/ 提出/ 的/ ,/ 在/ max/ -/ sum/ 的/ 基础/ 上/ ,/ 又/ 相应/ 地/ 提出/ 了/ Fast/ -/ Max/ -/ Sum/ (/ FMS/ )/ [/ 76/ ]/ 等/ 算法/ ,/ FMS/ 相比/ 于/ 一般/ 的/ max/ -/ sum/ 算法/ ,/ 在/ 求解/ 过程/ 中/ 产生/ 的/ 消息/ 数量/ 更/ 少/ ,/ 时间/ 复杂性/ 也/ 更/ 小/ ./ Macarthur/ 等/ 人/ [/ 77/ ]/ 以/ FMS/ 算法/ 为/ 基础/ ,/ 又/ 相应/ 地/ 提出/ 了/ BnBFMS/ 算法/ ,/ 该/ 算法/ 在/ FMS/ 的/ 基础/ 上/ ,/ 又/ 对解/ 的/ 质量/ 提供/ 一定/ 的/ 保证/ ./ 然而/ ,/ 这些/ 算法/ 并非/ 对/ 所有/ 的/ k/ 都/ 适用/ ,/ 只是/ k/ 在/ 一定/ 的/ 范围/ 内/ 有效/ ./ 而/ KOPT/ 算法/ 则/ 是/ k/ -/ size/ 最优/ 算法/ 中/ 的/ 一种/ 特例/ ,/ 它/ 是/ 一种/ 针对/ 任意/ k/ 都/ 有效/ 的/ k/ -/ size/ 最优/ 算法/ ,/ 而且/ KOPT/ 算法/ 对于/ 得到/ 的/ 解/ 提供/ 一定/ 的/ 保证/ ./ Vinyals/ 等/ 人/ [/ 78/ ]/ 提出/ 了/ 一种/ 新/ 的/ k/ -/ size/ 最优/ 算法/ DaC/ ,/ 该/ 算法/ 的/ 核心思想/ 是/ 分割/ 与/ 协同/ ,/ 即将/ Agent/ 分割/ 成/ 不同/ 的/ 组/ ,/ 然后/ 把/ 每个/ 组/ 看成/ 是/ 一个/ 局部/ 寻找/ 最优/ 的/ 过程/ ./ 通过/ 协同/ 不同/ 组/ 之间/ 的/ 结果/ ,/ 在/ 一定/ 范围/ 内/ 寻找/ 到/ 一个/ 局部/ 最优/ 解/ ./ Yin/ 等/ 人/ [/ 17/ ]/ 提出/ 了/ t/ -/ distance/ 最优/ 的/ 评判/ 标准/ ,/ 并/ 在/ 此基础/ 上/ 提出/ 了/ 一种/ t/ -/ distance/ 算法/ DALO/ ,/ DALO/ 是/ 一种/ 异步算法/ ,/ 是/ 对/ 分布式/ 局部/ 搜索算法/ 的/ 改进/ ./ DALO/ 算法/ 主要/ 包括/ 以下/ 3/ 个/ 阶段/ :/ 第一/ ,/ Agent/ 将/ 其/ 局部/ 信息/ 以及/ 约束/ 通过/ 消息/ 发送到/ 距离/ 其/ t/ 跳/ 以内/ 的/ 节点/ ,/ 然后/ 将/ 其/ 取值/ 发送到/ t/ +/ 1/ 跳/ 以内/ 的/ 节点/ 上/ ./ 第二/ ,/ 根据/ 上一阶段/ 收集/ 的/ 信息/ ,/ 所有/ 组中/ 的/ leader/ 节点/ 计算/ 其/ 局部/ 最优/ 解/ ,/ 在/ 计算/ 过程/ 中/ 假设/ 该组/ 之外/ 的/ Agent/ 的/ 取值/ 都/ 保持/ 不变/ ./ 第三/ ,/ 如果/ 一个/ leader/ 节点/ 找到/ 了/ 一个/ 更好/ 的/ 局部/ 解/ ,/ 该/ leader/ 节点/ 将/ 这个/ 新/ 的/ 取值/ 发送给/ 外部/ 的/ Agent/ ./ 但是/ 这种/ 情况/ 下/ 可能/ 会/ 导致/ 部分/ 出现/ 重合/ 的/ 组中/ Agent/ 存在/ 冲突/ ,/ DALO/ 通过/ 使用/ 分布式/ 的/ 锁/ 机制/ 来/ 实现/ ./ Bigdeli/ 等/ 人/ [/ 79/ ]/ 提出/ 一种/ 新/ 的/ t/ -/ distance/ 最优/ 算法/ DGOPT/ ,/ 该/ 算法/ 在/ DALO/ 的/ 基础/ 上/ ,/ 提出/ 了/ 动态/ 添加/ 或者/ 减少/ 同组/ 中/ Agent/ 的/ 组/ 优化/ 策略/ ,/ 在/ 一个/ Agent/ 组中/ ,/ leader/ 节点/ 根据/ 边缘/ 分布/ (/ marginalcontribution/ )/ 的/ 概念/ 添加/ 或者/ 减少/ 同组/ 中/ Agent/ 节点/ 的/ 个数/ ./ Vinyals/ 等/ 人/ [/ 80/ ]/ 提出/ 了/ 一种/ 能够/ 适用/ 于/ k/ -/ size/ 最优/ 以及/ t/ -/ distance/ 最优/ 两种/ 类型/ 的/ 算法/ 的/ 通用/ 框架/ ,/ 并且/ 在/ 该/ 框架/ 下/ 提出/ 了/ 一种/ 新/ 的/ 算法/ ,/ 该/ 算法/ 是/ DALO/ 算法/ 的/ 一种/ 扩展/ ,/ 它/ 能够/ 在/ k/ -/ size/ 最优/ 以及/ t/ -/ distance/ 两种/ 标准/ 下/ 用于/ 寻找/ 局部/ 最优/ 解/ ./ 大多数/ 的/ k/ -/ size/ 最优/ 算法/ 只能/ 是/ 1/ -/ size/ 最优/ 的/ ,/ 如/ MGM/ 、/ DBA/ 等/ ./ 目前/ 的/ 组/ 决策/ 算法/ 在/ k/ / 3/ 时/ ,/ 其/ 计算/ 复杂度/ 非常/ 大/ ,/ 使得/ 其/ 很/ 难/ 应用/ 于/ 实际/ 问题/ 的/ 求解/ 中/ ./ 然而/ ,/ 由/ Katagishi/ 等/ 人/ [/ 40/ ]/ 提出/ 的/ KOPT/ 算法/ ,/ 则/ 属于/ 这/ 类/ 算法/ 的/ 一个/ 特例/ ,/ 其/ 可以/ 是/ 任意/ size/ 最优/ 的/ ,/ 只是/ 不同/ size/ 计算/ 量/ 不同/ ./ 显然/ ,/ n/ 个/ 节点/ 时/ 的/ n/ -/ size/ 最优/ 就是/ 真正/ 全局/ 最优/ ./ 但是/ KOPT/ 算法/ 存在/ 以下/ 几个/ 问题/ :/ 第一/ ,/ 理论/ 分析/ 结果显示/ ,/ k/ -/ size/ 最优/ 的/ 解/ 的/ 下限/ 是/ 与/ 图/ 的/ 密集/ 程度/ 成反比/ [/ 81/ ]/ ./ 大量/ 的/ 研究/ 都/ 证明/ 了/ k/ -/ size/ 最优/ 对于/ 得到/ 的/ 解/ 能够/ 提供/ 一定/ 的/ 质量保证/ ,/ 如/ 在/ 节点/ 数量/ 为/ n/ 时/ ,/ 有/ R/ (/ A/ )/ / (/ k/ -/ 1/ )/ // (/ 2n/ -/ k/ -/ 1/ )/ R/ (/ A/ / )/ [/ 17/ ,/ 71/ ]/ ,/ 其中/ R/ (/ A/ )/ 为/ k/ -/ size/ 最优/ 求得/ 的/ 解/ ,/ 而/ R/ (/ A/ / )/ 为/ 全局/ 最优/ 解/ ,/ 这是/ 一个/ k/ -/ size/ 最优/ 解/ 的/ 下限/ ./ 考虑/ 到/ 不/ 完全/ 算法/ 的/ 时间/ 复杂度/ 相对/ 较/ 小/ ,/ 同时/ 又/ 对解/ 的/ 质量/ 提供/ 一定/ 的/ 保证/ ,/ 使得/ 其/ 被/ 广泛/ 地/ 用于/ 求解/ 一些/ 大型/ 的/ 实际/ 问题/ 当中/ ./ 第二/ ,/ 面临/ 着/ 一个/ 消息/ 数量/ 巨大/ 的/ 问题/ ,/ 尤其/ 是/ 当图/ 的/ 密度/ 较大/ 的/ 时候/ ./ 为了/ 有效/ 地/ 解决/ 这个/ 问题/ ,/ Yin/ 等/ 人/ [/ 71/ ]/ 提出/ 了/ 另外/ 一种/ 衡量/ 解/ 的/ 质量/ 的/ 标准/ t/ -/ distance/ 最优/ ,/ 它/ 通过/ 节点/ 间/ 的/ 距离/ 来/ 定义/ Agent/ 组中/ 的/ 成员/ ,/ 且/ 在/ t/ -/ distance/ 最优性/ 下/ ,/ 提出/ 了/ 一种/ 异步/ 局部/ 搜索算法/ ,/ 该/ 算法/ 基于/ lock/ // commit/ 协议/ ,/ 其/ 性能/ 相对/ 于/ KOPT/ 有/ 较大/ 的/ 改善/ ./ 针对/ 于/ k/ -/ size/ 最优/ 以及/ t/ -/ distance/ 最优/ ,/ 两种/ 不同/ 的/ 评价/ 非/ 完全/ 算法/ 解/ 的/ 质量/ 的/ 标准/ ,/ 下面/ 进行/ 了/ 相关/ 比较/ ./ 在/ k/ -/ size/ 最优/ 中/ ,/ 每/ 一组/ 中/ 的/ Agent/ 的/ 个数/ 是/ 固定/ 的/ k/ 个/ ,/ 但是/ 满足/ k/ -/ size/ 的/ 组/ 的/ 个数/ 可能/ 会/ 很多/ ./ 然而/ t/ -/ distance/ 最优/ 中/ 每/ 一组/ 中/ 的/ Agent/ 的/ 个数/ 是/ 不/ 固定/ 的/ ,/ 在/ 图/ 的/ 密度/ 较大/ 时/ ,/ 决策/ 组中/ 的/ Agent/ 数量/ 往往/ 会/ 很大/ ,/ 但/ 决策/ 组/ 的/ 个数/ 是/ 有限/ 的/ ,/ 其/ 数量/ 不/ 超过/ Agent/ 的/ 个数/ ./ 针对/ 某些/ 特定/ 的/ 环形/ 结构图/ ,/ 我们/ 分析/ 了/ k/ -/ size/ 最优/ 和/ t/ -/ distance/ 最优/ 对于/ 解/ 的/ 质量/ 的/ 保证/ 情况/ ./ 首先/ ,/ 在/ k/ =/ 1/ 和/ t/ =/ 0/ 时/ ,/ k/ -/ size/ 最优/ 以及/ t/ -/ distance/ 最优/ 得到/ 的/ 结果/ 是/ 一样/ 的/ ,/ 因为/ 它们/ 都/ 是/ 将/ 每个/ Agent/ 看成/ 是/ 一个/ 独立/ 的/ 组/ 进行/ 决策/ ./ 其次/ ,/ t/ -/ distance/ 最优/ 得到/ 的/ 解/ 的/ 质量/ 往往/ 要/ 好/ 于/ k/ -/ size/ 最优/ ,/ 因为/ t/ -/ distance/ 最优/ 的/ 解/ 必然/ 是/ k/ -/ size/ 最优/ (/ k/ =/ 2t/ +/ 1/ )/ 的/ 解/ ,/ 因为/ 每/ 一个/ k/ -/ size/ 的/ 决策/ 组都/ 属于/ t/ -/ distance/ 中/ ./ 反之/ 则/ 不是/ ,/ 存在/ 某些/ k/ -/ size/ 最优/ 的/ 解/ ,/ 却/ 不是/ t/ -/ distance/ 最优/ 的/ (/ t/ =/ (/ k/ -/ 1/ )/ // 2/ )/ ./ Page116/ 分布式/ 约束/ 优化/ 问题/ 的/ 相关/ 应用/ 6.1/ 云/ 计算/ 中/ 的/ 资源/ 映射/ 问题/ 根据/ 前面/ 的/ 介绍/ ,/ 我们/ 可知/ 云/ 计算/ 中/ 的/ 资源分配/ 问题/ (/ RA/ )/ [/ 82/ -/ 83/ ]/ 是/ 目前/ 云/ 计算/ 中/ 的/ 一个/ 重点/ 研究/ 方向/ ./ 在/ RA/ 问题/ 中/ ,/ 如果/ 需要/ 得到/ 资源分配/ 的/ 最优/ 方案/ 时/ ,/ 将/ RA/ 问题/ 建模/ 成/ DCOP/ 进行/ 求解/ 是/ 一种/ 有效/ 的/ 方法/ ./ 在/ RA/ 中/ ,/ WK/ 是/ 指/ 虚拟/ 节点/ 由/ 虚拟/ 链路/ 连接/ 构成/ 的/ 虚拟/ 网络/ (/ VirtualNetwork/ ,/ VN/ )/ [/ 83/ ]/ ,/ 而/ CP/ 提供/ 的/ 基础设施/ 可以/ 建模/ 为/ 由/ 物理/ 节点/ 通过/ 物理/ 链路/ 连接/ 构成/ 的/ 物理/ 网络/ (/ SubstrateNetwork/ ,/ SN/ )/ [/ 83/ ]/ ./ 其/ 目标/ 是/ 要/ 将/ WK/ 映射/ 到/ SN/ 上/ ,/ 其中/ 虚拟/ 节点/ 映射/ 到/ SN/ 中/ 的/ 物理/ 节点/ 上/ ,/ 虚拟/ 链路/ 映射/ 到/ SN/ 中/ 的/ 物理/ 路径/ 上/ ,/ 同时/ 满足/ WK/ 中/ 节点/ 和/ 链路/ 对/ 资源/ 的/ 约束/ ,/ 如/ 节点/ 对/ CPU/ 、/ memory/ 等/ 资源/ 有/ 一定/ 的/ 约束/ ,/ 链路/ 对/ 带宽/ 、/ 延迟/ 等/ 资源/ 有/ 一定/ 约束/ ./ 图/ 4/ 给出/ 了/ 如何/ 将/ RA/ 问题/ 建模/ 成/ DCOP/ 进行/ 求解/ ,/ 如图/ 4/ (/ a/ )/ 所示/ ,/ 为/ RA/ 中/ 的/ WK/ 请求/ ,/ 图/ 4/ (/ b/ )/ 、/ (/ c/ )/ 、/ (/ d/ )/ 分别/ 为/ 3/ 个/ CP/ 提供/ 的/ SN/ ./ 其中/ 的/ 1/ 个/ 约束/ 是/ 要/ 将/ WK/ 中/ 的/ 虚拟/ 节点/ 1/ 、/ 2/ 、/ 3/ 分别/ 映射/ 到/ CP1/ 、/ CP2/ 和/ CP3/ 中/ ,/ 并且/ 满足/ WK/ 中/ 虚拟/ 节点/ 和/ 虚拟/ 链路/ 对/ 资源/ 的/ 约束/ ./ 在/ 建模/ 成/ DCOP/ 的/ 过程/ 中/ ,/ 其/ 相关/ 的/ 定义/ 如下/ :/ Agent/ 集合/ 为/ {/ CP1/ ,/ CP2/ ,/ CP3/ }/ ,/ 变量/ 集合/ X/ 为/ 虚拟/ 节点/ {/ 1/ ,/ 2/ ,/ 3/ }/ ,/ 变量/ X/ 中/ 变量/ 的/ 值域/ D/ 分别/ 为/ {/ A/ ,/ B/ ,/ C/ }/ 、/ {/ D/ ,/ E/ ,/ F/ ,/ G/ }/ 和/ {/ H/ ,/ I/ ,/ J/ ,/ K/ ,/ L/ ,/ M/ }/ ./ 映射/ 关系/ M/ 如下/ :/ CP1/ →/ {/ 1/ }/ 、/ CP2/ →/ {/ 2/ }/ 和/ CP3/ →/ {/ 3/ }/ ./ 约束/ 代价/ 函数/ F/ 是/ 指/ 映射/ WK/ 产生/ 的/ 代价/ ,/ 而/ 代价/ 又/ 被/ 定义/ 为/ 分配/ 给/ WK/ 的/ 资源/ 数量/ ,/ 一般/ 包括/ 节点/ 所/ 需/ 的/ CPU/ 资源/ 和/ 链路/ 所/ 需/ 的/ 带宽/ 资源/ 等/ ./ 在/ 将/ RA/ 建模/ 成/ DCOP/ 问题/ 后/ ,/ 可以/ 采用/ 第/ 4/ 节中/ 介绍/ 的/ 算法/ 进行/ 求解/ ,/ 并且/ 可以/ 根据/ RA/ 的/ 具体/ 要求/ 选择/ 算法/ ,/ 如果/ 当前/ WK/ 请求/ 任务/ 比较/ 紧急/ ,/ 希望/ 部署/ 时间/ 较/ 短/ ,/ 时间/ 复杂度/ 较/ 小/ 的/ 算法/ 应该/ 更为/ 合适/ ,/ 如/ DPOP/ 算法/ 等/ ./ 如果/ WK/ 中/ 的/ 变量/ 数量/ 较大/ ,/ 则/ 选用/ 搜索算法/ 更为/ 合适/ ,/ 因为/ 其所/ 需要/ 的/ 空间/ 复杂度/ 以及/ 内存/ 更/ 小/ ./ 出于/ 商业/ 目的/ 考虑/ ,/ 不同/ CP/ 之间/ 的/ 信息/ 往往/ 不/ 希望/ 对外/ 透露/ ,/ 在/ 这种/ 情况/ 下/ 选择/ M/ -/ DPOP/ 算法/ 更为/ 合适/ ./ 如果/ 考虑/ CP/ 提供/ 的/ SN/ 可能/ 出现/ 故障/ 导致/ SN/ 的/ 动态变化/ ,/ 则/ 可/ 进一步/ 将/ 其/ 建模/ 为/ 动态/ DCOP/ 进行/ 求解/ ,/ 这/ 在/ 下面/ 将会/ 展开/ 介绍/ ./ 除此之外/ ,/ 很多/ 还有/ 其他/ 寻找/ Agent/ 间/ 共同/ 决策/ 的/ 一致/ 组合/ 问题/ ,/ 比如/ 会议/ 时间/ 安排/ [/ 10/ ]/ 、/ 分布式/ 日常/ 安排/ [/ 10/ ]/ 、/ 传感器/ 资源分配/ [/ 12/ ]/ 等/ ,/ 都/ 可以/ 建模/ 为/ DCOP/ 问题/ 来/ 求解/ ,/ 并且/ 可以/ 根据/ 具体/ 问题/ 的/ 特点/ 选择/ 相应/ 的/ DCOP/ 算法/ ./ 6.2/ 动态/ 分布式/ 约束/ 优化/ 问题/ 的/ 研究/ 随着/ 互联网/ 新型/ 应用/ 的/ 发展/ ,/ 许多/ 问题/ 的/ 应用环境/ 往往/ 是/ 动态变化/ 的/ ./ 从而/ 要求/ DCOP/ 算法/ 能够/ 有效/ 地/ 解决/ 这种/ 动态变化/ 下/ 的/ 约束/ 优化/ 问题/ ./ 如/ 上面/ 提到/ 的/ 云/ 计算/ 中/ 的/ RA/ 问题/ ,/ 参与/ 资源分配/ 的/ CP/ 数量/ 可能/ 动态变化/ 以及/ CP/ 内部/ 的/ 基础设施/ 资源/ 也/ 可能/ 动态变化/ ,/ 如/ CP/ 提供/ 的/ 数据中心/ 网络/ 中/ 节点/ 出现/ 故障/ 或者/ 因/ 人工/ 原因/ 导致/ 某些/ 节点/ 不能/ 正常/ 工作/ 时/ ,/ 都/ 会/ 导致/ 其/ 结构/ 发生/ 改变/ ./ 此外/ ,/ 用户/ 请求/ WK/ 也/ 可能/ 随着/ 用户/ 需求/ 的/ 变化/ 而/ 动态/ 发生/ 改变/ ./ 例如/ ,/ 以/ 动态/ 会议/ 时间/ 调度/ 问题/ 为例/ ,/ 对于/ 每/ 一个/ 参加/ 会议/ 的/ 成员/ 来说/ ,/ 其/ 行程/ 安排/ 可能/ 随/ 时间/ 会/ 动态/ 发生变化/ ,/ 这种/ 情况/ 下/ 之前/ 已/ 分配/ 的/ 方案/ ,/ 在/ 成员/ 时间/ 发生/ 改变/ 时/ ,/ 未必/ 满足/ 新/ 的/ 要求/ ./ 在/ 以上/ 情况/ 中/ ,/ 都/ 希望/ 能够/ 有/ 动态/ DCOP/ 算法/ 来/ 有效/ 地/ 解决/ 这些/ 问题/ ./ 然而/ ,/ 本文/ 提到/ 的/ DCOP/ 算法/ 在/ 求解/ 动态/ DCOP/ 问题/ 上/ 还/ 存在/ 一定/ 的/ 局限性/ ,/ 算法/ 本身/ 以及/ 对/ 算法/ 时间/ 复杂度/ 远远/ 超过/ 了/ 应用/ 的/ 需求/ ./ 因此/ ,/ 考虑/ 到/ 现在/ 应用/ 的/ 这种/ 高度/ 动态性/ ,/ 目前/ 有/ 一些/ 研究/ 侧重于/ anytime/ 算法/ 的/ 研究/ ,/ 该类/ 算法/ 能够/ 保证/ 任意/ 时间/ 都/ 能/ 给出/ 问题/ 的/ 解/ ,/ 但/ 其/ 给出/ 的/ 不是/ 问题/ 的/ 最优/ 解/ ,/ 而是/ 近似/ 最优/ 解/ ,/ 与/ 前面/ 介绍/ 的/ 非/ 完全/ 算法/ 有/ 一定/ 的/ 类似之处/ ./ DCOP/ 非/ 完全/ 算法/ 能够/ 在/ 一定/ 程度/ 上/ 解决/ 这种/ 高度/ 动态/ 问题/ 的/ 需求/ ./ 7/ 未来/ 的/ 研究/ 趋势/ 综合/ 分布式/ 约束/ 优化/ 问题/ 目前/ 研究/ 的/ 热点问题/ 以及/ 广泛/ 关注/ 的/ 应用领域/ ,/ 未来/ 的/ 研究/ 趋势/ 主要/ 关注/ 于/ 如下/ 几个/ 方面/ :/ Page12/ (/ 1/ )/ 动态/ DCOP/ 算法/ 的/ 研究/ 随着/ 互联网/ 新型/ 应用/ 的/ 发展/ ,/ 许多/ 问题/ 的/ 应用环境/ 不再/ 是/ 恒定/ 不变/ 的/ ,/ 而是/ 可以/ 动态/ 改变/ 的/ ./ 如/ 动态/ 传感器/ 分配/ 问题/ ,/ 目标/ 的/ 到达/ 可能/ 是/ 随机/ 的/ 、/ 不可/ 预测/ 的/ ,/ 而且/ 目标/ 的/ 位置/ 是/ 可以/ 动态/ 移动/ 的/ ./ 云/ 计算/ 中/ 的/ 资源分配/ 问题/ (/ RA/ )/ ,/ 用户/ 请求/ 往往/ 也/ 是/ 动态变化/ 的/ ,/ 本文/ 介绍/ 的/ 这些/ DCOP/ 算法/ 在/ 解决/ 环境/ 动态/ 改变/ 的/ 问题/ 上/ 存在/ 一定/ 的/ 局限性/ ./ 目前/ ,/ 动态/ 约束/ 满足/ 问题/ 已经/ 应用/ 于/ 解决/ 某些/ 现实/ 问题/ [/ 69/ -/ 71/ ,/ 83/ ]/ ,/ 但是/ 它们/ 基本上/ 都/ 是/ 针对/ 集中式/ 环境/ 的/ ,/ 对于/ 分布式/ 动态/ DCOP/ 算法/ 的/ 研究/ 还/ 不/ 成熟/ ./ 动态/ DCOP/ 主要/ 面临/ 以下/ 挑战/ :/ 算法/ 必须/ 能够/ 处理/ 系统/ 中/ 任意/ 状态/ 的/ 改变/ ,/ 如云/ 计算/ 中/ 的/ 资源分配/ 问题/ 中/ ,/ 云/ 用户/ 或者/ 租户/ 往往/ 是/ 动态变化/ ,/ 每时每刻/ 都/ 有/ 请求/ 到来/ 的/ ,/ 其/ 动态性/ 是/ 不可/ 预测/ 的/ ./ 解决/ 这/ 类/ 高度/ 动态/ 环境/ 下/ 约束/ 优化/ 问题/ ,/ 对于/ 算法/ 的/ 复杂性/ 要求/ 很/ 高/ ,/ 要求/ 其/ 能够/ 以/ 尽可能/ 小/ 的/ 时间/ 代价/ 计算/ 给出/ 合适/ 的/ 解/ ./ 然而/ ,/ 目前/ 的/ DCOP/ 算法/ 在/ 求解/ 这/ 类/ 现实/ 应用/ 中/ 的/ 许多/ 问题/ 存在/ 明显/ 的/ 不足/ ,/ 也/ 是/ 未来/ 需要/ 重点/ 关注/ 的/ 方向/ 之一/ ./ Petcu/ 等/ 人/ 提出/ 了/ S/ -/ DPOP/ 算法/ ,/ S/ -/ DPOP/ 算法/ 能够/ 在/ 环境/ 发生变化/ 时/ 做出/ 相应/ 的/ 调整/ ,/ 但/ 其/ 还/ 不能/ 用于/ 解决/ 实际/ 的/ 问题/ ./ 因此/ ,/ 动态/ DCOP/ 算法/ 的/ 研究/ 必将/ 成为/ 以后/ 该/ 领域/ 研究/ 的/ 一大/ 热点问题/ ./ (/ 2/ )/ 社会/ 选择/ 因素/ 对/ DCOP/ 的/ 影响/ DCOP/ 问题/ 的/ 目标/ 是/ 通过/ 对/ Agent/ 的/ 变量/ 序列/ 进行/ 赋值/ ,/ 在/ 满足/ 约束条件/ 的/ 情况/ 下/ ,/ 最大化/ 全局/ 利益/ ./ 一般/ 情况/ 下/ ,/ Agent/ 都/ 会/ 有/ 一些/ 私有/ 信息/ (/ 通常/ 不/ 希望/ 对外/ 透露/ )/ ,/ 在/ 多/ Agent/ 进行/ 协商/ 决策/ 时/ ,/ 通常/ 都/ 认为/ 其他/ Agent/ 公布出来/ 的/ 信息/ 是/ 可信/ 的/ ,/ 而/ 不/ 考虑/ Agent/ 谎报/ 信息/ 的/ 情况/ 出现/ ./ 然而/ ,/ 这一/ 说法/ 具有/ 很大/ 的/ 局限性/ ,/ 在/ 现实/ 应用/ 中/ ,/ Agent/ 往往/ 是/ 自私/ 的/ ,/ 它/ 对/ 问题/ 有/ 自己/ 的/ 偏好/ ,/ 可能/ 会/ 做出/ 使/ 自己/ 利益/ 最大化/ 的/ 选择/ ,/ 而/ 忽略/ 全局/ 利益/ 最大化/ 的/ 目标/ ,/ 这/ 就是/ 所谓/ 的/ 社会/ 选择/ (/ SocialChoice/ )/ 问题/ ./ 如/ 上面/ 提到/ 的/ 云/ 计算/ 中/ 的/ 资源分配/ 问题/ ,/ CP/ 可能/ 通过/ 对外/ 透露/ 虚假/ 的/ 信息/ 以/ 谋求/ 自身/ 的/ 利益/ 最大化/ ,/ 毕竟/ 对于/ CP/ 来说/ ,/ 利益/ 最大化/ 才/ 是/ 其/ 最/ 重要/ 的/ 指标/ ./ 因此/ ,/ 在/ 这类/ 问题/ 中/ ,/ 其/ 目标/ 是/ 如何/ 在/ Agent/ 自私/ 的/ 情况/ 下/ 使得/ 全局/ 利益/ 最大化/ ./ 解决/ 这/ 类/ 社会/ 选择/ 问题/ 可以/ 考虑/ 使用/ 激励/ 相容/ 机制/ 如/ Vickrey/ -/ Clarke/ -/ Groves/ (/ VCG/ )/ 机制/ 以及/ 纳什/ 均衡/ 等/ 技术/ 来/ 保证/ Agent/ 的/ 可信性/ (/ Faithful/ )/ ,/ 预防/ Agent/ 谎报/ 个人/ 偏好/ 能力/ 等/ 信息/ ./ 如/ Agent/ 对外/ 发布/ 真实/ 信息/ 时/ ,/ 给予/ 相应/ 的/ 奖励/ ,/ 而/ 如果/ 发现/ Agent/ 发布/ 虚假/ 信息/ 时/ ,/ 相应/ 地/ 给予/ 惩罚/ 措施/ ,/ 这/ 在/ 一定/ 程度/ 上/ 能够/ 避免/ Agent/ 发布/ 虚假/ 信息/ 的/ 可能性/ ./ 但是/ 在/ 一些/ 实际/ 问题/ 中/ ,/ 对于/ 问题/ 的/ 界限/ 确定/ 是/ 非常/ 困难/ 的/ ,/ 这/ 也/ 导致/ 了/ 激励机制/ 在/ 解决/ 该类/ 问题/ 的/ 不足/ ./ 文献/ [/ 10/ ]/ 中将/ 社会/ 选择/ 问题/ 建模/ 成/ DCOP/ 问题/ 并/ 提出/ 了/ M/ -/ DPOP/ 算法/ ,/ 最先/ 针对/ 有效/ 社会/ 选择/ 问题/ 提供/ 了/ 可信/ 机制/ 的/ 分布式/ 实现/ 算法/ ,/ 诚实/ 性/ (/ faithfulness/ )/ 保证/ 了/ 所有/ 的/ Agent/ 都/ 应该/ 遵守/ 相关/ 的/ 协议/ 规定/ ,/ 不能/ 为了/ 私自/ 的/ 利益/ 而/ 做/ 假/ ./ 这一/ 算法/ 也/ 开启/ 了/ 对于/ 有效/ 社会/ 选择/ 问题/ 的/ 研究/ ,/ 这/ 也/ 将/ 成为/ 以后/ 研究/ 的/ 一个/ 热点问题/ ./ (/ 3/ )/ DCOP/ 非/ 完全/ 算法/ 应用/ 的/ 研究/ 在/ DCOP/ 问题/ 面临/ 的/ 挑战/ 中/ ,/ 代价/ 问题/ 往往/ 是/ 最受/ 关注/ 的/ ./ 当/ 问题/ 的/ 规模/ 较大/ 时/ ,/ 采用/ DCOP/ 完全/ 算法/ 进行/ 求解/ 时/ ,/ 尽管/ 能够/ 找到/ 最优/ 解/ ,/ 但是/ 其/ 花费/ 的/ 时间/ 、/ 空间/ 代价/ 以及/ 通信/ 开销/ 往往/ 很大/ ,/ 这/ 对/ 许多/ 实时性/ 要求/ 较/ 高/ 的/ 应用/ 往往/ 不/ 适用/ ./ 如云/ 计算/ 中/ 的/ 资源分配/ 问题/ (/ RA/ )/ ,/ 在/ 很多/ 情况/ 下/ ,/ 考虑/ 到/ 用户/ 请求/ 的/ 紧迫性/ 以及/ CP/ 对/ 得到/ 最优/ 解/ 的/ 需求/ 不大时/ ,/ 此时/ ,/ 它们/ 未必/ 需要/ 花费/ 昂贵/ 的/ 代价/ 去/ 得到/ 最优/ 解/ ,/ 而/ 只要/ 得到/ 近似/ 最优/ 解/ 即可/ ./ 考虑/ 到/ 以上/ 原因/ ,/ 越来越/ 多/ 的/ 现实/ 应用/ 问题/ (/ 资源分配/ 问题/ )/ 都/ 可/ 采用/ 非/ 完全/ DCOP/ 算法/ 进行/ 求解/ ./ 非/ 完全/ 算法/ 虽然/ 无法/ 找到/ 全局/ 最优/ 解/ ,/ 但是/ 其/ 时间/ 以及/ 通信/ 开销/ 等/ 大大降低/ ,/ 而且/ 一些/ DCOP/ 近似算法/ 能够/ 对解/ 的/ 质量/ 提供/ 一定/ 的/ 质量保证/ ,/ 如/ k/ -/ size/ 最优/ 算法/ 能够/ 保证/ 解/ 的/ 下限/ 是/ (/ k/ -/ 1/ )/ // (/ 2n/ -/ k/ -/ 1/ )/ [/ 17/ ]/ ./ 因此/ ,/ 考虑/ 到/ 这些/ 应用/ 的/ 实际/ 情况/ ,/ 当其/ 对/ 时间/ 以及/ 通信/ 开销/ 要求/ 较/ 高/ ,/ 往往/ 通过/ 计算/ 其/ 近似/ 最优/ 解来/ 解决/ ./ 采用/ DCOP/ 近似算法/ (/ 非/ 完全/ 算法/ )/ 进行/ 求解/ 优化/ 问题/ 时/ ,/ 由于/ 其/ 通过/ 搜索/ 部分/ 解/ 空间/ 进行/ 求解/ ,/ 既/ 能够/ 保证/ 得到/ 的/ 结果/ 能够/ 在/ 可以/ 承受/ 的/ 范围/ 内/ ,/ 又/ 能够/ 大大/ 地/ 降低/ 求解/ 时所/ 消耗/ 的/ 资源/ 以及/ 求解/ 时间/ 度/ ./ 这/ 无非/ 是/ 一个/ 更好/ 的/ 选择/ ./ 现有/ 的/ 有关/ DCOP/ 非/ 完全/ 算法/ 的/ 研究/ ,/ 大多/ 都/ 还/ 停留/ 在/ 理论/ 层面/ 的/ 研究/ ,/ 针对/ 如何/ 评价/ 这/ 类/ 算法/ 得到/ 的/ 解/ 的/ 质量/ ,/ 提出/ 了/ k/ -/ size/ 最优/ 以及/ t/ -/ distance/ 最优/ 的/ 评判/ 标准/ ,/ 并且/ 有/ 很多/ 的/ 研究/ 通过/ 理论/ 证明/ [/ 17/ ,/ 71/ ]/ ,/ 证实/ 了/ 它们/ 对解/ 的/ 质量/ 确实/ 有/ 一定/ 的/ 保证/ ./ 但是/ ,/ 关于/ 如何/ 将/ DCOP/ 非/ 完全/ 算法/ 运用/ 于/ 实际/ 问题/ 中/ ,/ 以及/ 如何/ 根据/ 具体/ 的/ 实际/ 问题/ 选择/ 合适/ 的/ 近似算法/ 是/ 未来/ 的/ 研究/ 热点/ 之一/ ./ Page138/ 结束语/ 分布式/ 约束/ 优化/ 问题/ 的/ 研究/ 作为/ 新兴/ 的/ 一个/ 热点/ 研究/ 问题/ ,/ 从/ 完全/ 算法/ 到/ 非/ 完全/ 算法/ 、/ 从/ 搜索算法/ 到/ 基于/ 动态/ 规划/ 的/ 算法/ 、/ 从/ 同步/ 算法/ 到/ 异步算法/ 、/ 从/ 单纯/ 的/ 理论/ 研究/ 到/ 实际/ 系统/ 的/ 有效/ 部署/ 、/ 从/ 单一/ 的/ 算法/ 提出/ 到/ 面向/ 应用/ 的/ 具体实施/ ,/ 可以/ 说/ ,/ 分布式/ 约束/ 优化/ 问题/ 领域/ 的/ 研究/ 是/ 一个/ 非常/ 活跃/ 的/ 方向/ ./ 从/ 整体/ 上/ 讲/ ,/ 目前/ 在/ 分布式/ 约束/ 优化/ 方面/ 的/ 研究/ 还远/ 未成熟/ ,/ 尚未/ 建立/ 起/ 一套/ 完整/ 的/ 理论体系/ ,/ 而且/ 从/ 技术/ 理论/ 的/ 完善/ 到/ 算法/ 的/ 具体/ 应用/ 还有/ 很大/ 的/ 差距/ ./ 本文/ 回顾/ 了/ 近年来/ 学术界/ 在/ 分布式/ 约束/ 优化/ 问题/ 研究/ 领域/ 的/ 主要/ 成果/ ,/ 在/ 一个/ 给定/ 的/ 研究/ 框架/ 下/ ,/ 对/ 分布式/ 约束/ 优化/ 问题/ 进行/ 了/ 综述/ ,/ 详细/ 介绍/ 了/ 常用/ 的/ 一些/ 分布式/ 约束/ 优化/ 算法/ 并/ 加以/ 比较/ ./ 在/ 本文/ 中/ 对/ 各种/ 算法/ 的/ 定性分析/ 、/ 定量分析/ 以及/ 性能/ 分析/ 较/ 少/ ,/ 主要/ 原因/ 如下/ :/ 第一/ ,/ 目前/ 很多/ 的/ DCOP/ 算法/ ,/ 虽然/ 能够/ 找到/ 相应/ 算法/ 的/ 论文/ ,/ 但是/ 相应/ 算法/ 的/ 代码/ 我们/ 还/ 没有/ 办法/ 完全/ 获得/ ./ 第二/ ,/ 不同/ 类型/ 的/ DCOP/ 算法/ ,/ 如/ 完全/ 算法/ 和/ 非/ 完全/ 算法/ 之间/ ,/ 绝大多数/ 是/ 基于/ 不同/ 的/ 平台/ 开发/ 设计/ 的/ ,/ 目前/ 还/ 没有/ 公用/ 的/ 平台/ 能够/ 测试/ 所有/ 的/ 算法/ ,/ 平台/ 的/ 不同/ 对于/ 测试/ 的/ 结果/ 会/ 产生/ 很大/ 的/ 影响/ ./ 第三/ ,/ 目前/ DCOP/ 研究者/ 们/ 在/ 测试/ 他们/ 的/ 算法/ 的/ 性能/ 时/ ,/ 都/ 是/ 基于/ 一些/ 典型/ 的/ 问题/ ,/ 如/ 地图/ 着色/ 问题/ 、/ Scale/ -/ free/ 问题/ 等/ ,/ 基本/ 没有/ 算法/ 在/ 测试/ 性能/ 时/ 是/ 基于/ 现实/ 应用/ 问题/ 的/ ./ 在/ 我们/ 未来/ 的/ 研究/ 工作/ 中/ ,/ 将/ 着重/ 针对/ 一个/ 主要/ 的/ 研究/ 问题/ ,/ 并/ 针对/ 该/ 问题/ 对/ 各种/ 算法/ 的/ 性能/ 进行/ 测试/ 比较/ ./ 本文/ 最后/ 总结/ 并/ 指明/ 了/ 未来/ 研究/ 的/ 趋势/ ./ 

