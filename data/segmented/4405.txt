Page1YARM/ :/ 基于/ MapReduce/ 的/ 高效/ 可/ 扩展/ 的/ 语义/ 推理/ 引擎/ 顾荣/ 王芳芳/ 袁/ 春风/ 黄宜华/ (/ 南京大学/ 计算机软件/ 新/ 技术/ 国家/ 重点/ 实验室/ 南京/ 210046/ )/ 摘要/ 随着/ 语义/ 网/ 的/ 快速/ 发展/ ,/ RDF/ 语义/ 数据/ 大量/ 涌现/ ./ 大规模/ RDF/ 语义/ 数据/ 推理/ 的/ 一个/ 主要/ 问题/ 是/ 计算/ 量/ 大/ 、/ 完成/ 计算/ 需要/ 消耗/ 很长/ 的/ 时间/ ./ 显然/ ,/ 传统/ 的/ 单机/ 语义/ 推理/ 引擎/ 难以/ 处理/ 大规模/ 的/ 语义/ 数据/ ./ 另一方面/ ,/ 现有/ 的/ 基于/ MapReduce/ 的/ 大规模/ 语义/ 推理/ 引擎/ ,/ 缺乏/ 对/ 算法/ 在/ 分布/ 和/ 并行计算/ 环境/ 下/ 执行/ 效率/ 的/ 优化/ ,/ 使得/ 推理/ 时间/ 仍然/ 较长/ ./ 此外/ ,/ 现有/ 的/ 推理/ 引擎/ 大多/ 存在/ 可扩展性/ 方面/ 的/ 不足/ ,/ 难以/ 适应/ 大规模/ 语义/ 数据/ 的/ 增长/ 需求/ ./ 针对/ 现有/ 的/ 语义/ 推理/ 系统/ 在/ 执行/ 效率/ 和/ 可扩展性/ 方面/ 的/ 不足/ ,/ 文中/ 提出/ 了/ 一种/ 基于/ MapReduce/ 的/ 并行/ 化/ 语义/ 推理/ 算法/ 和/ 引擎/ YARM/ ./ 为了/ 实现/ 分布/ 和/ 并行计算/ 环境/ 下/ 的/ 高效/ 推理/ ,/ YARM/ 做出/ 了/ 以下/ 4/ 点/ 优化/ :/ (/ 1/ )/ 采用/ 合理/ 的/ 数据/ 划分/ 模型/ 和/ 并行/ 化/ 算法/ ,/ 降低/ 计算/ 节点/ 间/ 的/ 通信/ 开销/ ;/ (/ 2/ )/ 优化/ 推理/ 规则/ 的/ 执行/ 次序/ ,/ 提升/ 了/ 推理/ 计算速度/ ;/ (/ 3/ )/ 设计/ 了/ 简洁/ 的/ 去/ 重/ 策略/ ,/ 避免/ 新增/ 作业处理/ 重复/ 数据/ ;/ (/ 4/ )/ 设计/ 实现/ 了/ 一种/ 新/ 的/ 基于/ MapReduce/ 的/ 并行/ 化/ 推理/ 算法/ ./ 实验/ 结果表明/ ,/ 在/ 真实/ 数据/ 集/ 和/ 大规模/ 合成/ 数据/ 集上/ ,/ YARM/ 的/ 执行/ 速度/ 比/ 当前/ 最新/ 的/ 基于/ MapReduce/ 的/ 推理/ 引擎/ 快/ 10/ 倍/ 左右/ ,/ 同时/ YARM/ 还/ 表现/ 出/ 更好/ 的/ 数据/ 和/ 系统/ 可扩展性/ ./ 关键词/ RDF/ ;/ RDFS/ 推理/ ;/ MapReduce/ ;/ 语义/ 推理/ ;/ 分布式/ 推理/ 1/ 引言/ 近年来/ ,/ 行业/ 应用/ 数据/ 规模/ 的/ 爆炸性/ 增长/ 推动/ 了/ 大/ 数据/ 技术/ 的/ 迅猛发展/ ./ 在/ 常规/ 大/ 数据/ 迅猛/ 增长/ 的/ 同时/ ,/ 语义/ 数据/ 特别/ 是/ RDF/ 数据/ 也/ 以/ 数亿/ 甚至/ 数十亿元/ 组/ 的/ 规模/ 大量/ 涌现/ ./ 例如/ ,/ 截至/ 2012/ 年/ 3/ 月/ ,/ LOD/ (/ LinkedOpenData/ )/ 项目/ ①/ 所/ 收集/ 的/ RDF/ 数据/ 集/ 已经/ 包含/ 了/ 超过/ 325/ 亿条/ RDF/ 三元组/ ./ 大规模/ 语义/ 数据/ 发展/ 的/ 这/ 一/ 趋势/ 对/ RDF/ 数据/ 存储/ 、/ 查询/ 和/ 推理/ 在/ 可扩展性/ 和/ 效率/ 方面/ 提出/ 了/ 新/ 的/ 挑战/ [/ 1/ ]/ ./ RDF/ 推理/ 所/ 关注/ 的/ 主要/ 目标/ 是/ 如何/ 借助/ 自动/ 推理机/ 从/ 给定/ 的/ 知识/ 演绎/ (/ 推导/ )/ 出/ 一些/ 结论/ ,/ 从而/ 使/ 隐含/ 的/ 知识/ 外显/ 出来/ [/ 2/ ]/ ./ 对/ 隐含/ 的/ 语义/ 数据/ 的/ 支持/ 是/ RDF/ 图/ 与/ 其他/ 数据模型/ 的/ 本质区别/ ,/ 也/ 是/ 语义/ 网/ 发展/ 的/ 重要/ 推动力/ [/ 3/ ]/ ./ 大/ 数据/ 技术/ 背景/ 下/ ,/ 随着/ RDF/ 语义/ 数据/ 规模/ 的/ 迅速/ 扩大/ ,/ 研究/ 寻找/ 高效/ 的/ 并行/ 化/ 语义/ 推理/ 机制/ 和/ 方法/ 成为/ 一个/ 重要/ 技术难题/ ,/ 成为/ 大规模/ RDF/ 数据/ 管理系统/ 迫切需要/ 研究/ 解决/ 的/ 重要/ 问题/ ./ 利用/ 并行计算/ 技术/ 解决/ 大规模/ RDF/ 数据/ 相关/ 问题/ 已/ 成为/ 学术界/ 和/ 工业界/ 的/ 普遍/ 共识/ [/ 4/ ]/ ./ 由/ Google/ 提出/ 的/ MapReduce/ 并行计算/ 模型/ 以其高/ 可扩展性/ 和/ 高/ 易用性/ 成为/ 目前/ 大/ 数据处理/ 最为/ 成功/ 的/ 并行计算/ 技术/ 之一/ [/ 5/ ]/ ./ Hadoop/ 是/ GoogleMapReduce/ 框架/ 的/ 一个/ 开源/ 实现/ ,/ 其/ 提供/ 了/ 类似/ 于/ GoogleGFS/ 的/ 分布式/ 数据/ 存储系统/ HDFS/ 以及/ 类似/ 于/ GoogleBigTable/ 的/ 面向/ 半/ 结构化/ 数据/ 存储/ 和/ 管理系统/ HBase/ ./ 目前/ ,/ Hadoop/ 已/ 成为/ 大/ 数据/ 存储/ 和/ 并行处理/ 实际上/ 的/ 工业/ 标准/ ,/ 也/ 成为/ 目前/ 大/ 数据/ 深度/ 分析/ 挖掘/ 并行处理/ 的/ 主流/ 技术/ 和/ 平台/ ,/ 在/ 国内外/ 诸多/ 大型/ 互联网/ 企业/ 和/ 其他/ 大/ 数据分析/ 行业/ 应用/ 中/ 得到/ 广泛应用/ ./ 因此/ ,/ 现实生活/ 中/ 很多/ 涉及/ 到/ 大规模/ 语义/ 分析/ 挖掘/ 的/ 大/ 数据分析/ 应用/ 都/ 可能/ 需要/ 在/ 这个/ 平台/ 上/ 实现/ ,/ 这/ 就/ 使得/ 基于/ MapReduce/ 完成/ 大/ 数据/ 场景/ 下/ 快速/ 的/ RDFS/ 推理/ 变得/ 十分/ 重要/ ./ 目前/ 已有/ 基于/ MapReduce/ 的/ 并行/ 推理/ 的/ 研究/ 工作/ [/ 6/ -/ 7/ ]/ ./ 这些/ 工作/ 主要/ 是/ 将/ 传统/ 的/ 推理/ 技术/ 直接/ 迁移/ 到/ MapReduce/ 框架/ 下/ ,/ 这种/ 直接/ 迁移/ 的/ 方式/ 使得/ 一次/ 推理/ 任务/ 需/ 多个/ 链式/ MapReduce/ 作业/ 协同工作/ 才能/ 完成/ ,/ 其中/ 包括/ 增加/ 额外/ 处理/ 重复/ 数据/ 的/ 作业/ ./ 因此/ ,/ 现有/ 的/ 这些/ 基于/ MapReduce/ 的/ 方法/ 推理/ 计算/ 效率/ 较/ 低/ ./ 为了/ 实现/ MapReduce/ 下/ 大规模/ RDF/ 数据/ 的/ 高效/ 推理/ ,/ 本文/ 在/ 对/ 资源/ 描述/ 框架/ RDF/ 、/ RDFSchema/ (/ RDFS/ )/ 等/ 相关/ 技术/ 分析/ 的/ 基础/ 上/ ,/ 实现/ 了/ 一种/ 高效/ 的/ 基于/ MapReduce/ 的/ RDFS/ 推理/ 算法/ 和/ 引擎/ YARM/ (/ YetAnotherReasoningSystemwithMapReduce/ )/ ./ 通过/ 采用/ 合理/ 的/ 数据/ 划分/ 方案/ 和/ 优化/ 的/ 推理/ 规则/ 执行/ 策略/ ,/ YARM/ 将/ 推理/ 计算/ 分解/ 为/ 多个/ 相互间/ 没有/ 依赖/ 关系/ 的/ 独立/ 的/ 推理/ 任务/ ,/ 解决/ 了/ 传统/ 推理/ 算法/ 的/ 直接/ 迁移/ 所/ 带来/ 的/ 大量/ 数据/ 移动/ 问题/ ./ 此外/ ,/ 不同于/ 传统/ 的/ 推理机/ ,/ YARM/ 根据/ 推理/ 规则/ 之间/ 的/ 依赖/ 关系/ ,/ 优化/ 了/ 规则/ 执行/ 次序/ ,/ 避免/ 了/ 迭代/ 计算/ ,/ 提高/ 了/ 推理/ 过程/ 的/ 执行/ 效率/ ./ 最后/ ,/ YARM/ 还/ 采取/ 了/ 有效/ 的/ 措施/ 来/ 解决/ 分布式/ 推理/ 中/ 的/ 重复/ 数据/ 消除/ 问题/ ./ 在/ 大规模/ LUBM/ 以及/ WordNet/ 与/ DBpedia/ 等/ 模拟/ 和/ 真实/ 实验/ 数据/ 集上/ 的/ 实验/ 结果表明/ ,/ 相比/ 于/ 传统/ 的/ 基于/ MapReduce/ 的/ 推理/ 引擎/ ,/ YARM/ 在/ 执行/ 效率/ 上/ 提升/ 了/ 10/ 倍/ 左右/ ,/ 同时/ 表现/ 出/ 良好/ 的/ 可扩展性/ ./ 与/ 当前/ 基于/ MapReduce/ 的/ 语义/ 信息/ 并行/ 推理/ 算法/ 相比/ ,/ 论文/ 的/ 主要/ 贡献/ 可以/ 归纳/ 为/ 如下/ 4/ 个/ 方面/ :/ (/ 1/ )/ 研究/ 设计/ 了/ 一种/ 简洁/ 的/ 数据/ 划分/ 方案/ ,/ 将/ 模式/ RDF/ 和/ 实例/ RDF/ 数据/ 分开/ 处理/ ,/ 解决/ 了/ 传统/ 推理/ 算法/ 的/ 直接/ 迁移/ 而/ 导致/ 的/ 多次/ 数据通信/ 问题/ ./ (/ 2/ )/ 研究/ 并/ 提供/ 了/ 一种/ 优化/ 的/ 规则/ 应用/ 次序/ ,/ 提高/ 了/ 推理/ 的/ 执行/ 效率/ ./ ①/ TheCooperativeAssociationforInternetDataAnalysis/ (/ CAI/ -/ Page3/ (/ 3/ )/ 结合/ RDFS/ 规则/ 特征/ 和/ MapReduce/ 框架/ 特点/ 设计/ 了/ 一种/ 高效/ 的/ 重复/ 数据/ 检测/ 和/ 消除/ 策略/ ./ (/ 4/ )/ 设计/ 实现/ 了/ 完整/ 的/ MapReduce/ 并行/ 化/ 推理/ 算法/ ./ 本文/ 第/ 2/ 节/ 详细/ 介绍/ RDF/ 、/ RDFS/ 以及/ 推理/ 问题/ 的/ 相关/ 概念/ ;/ 第/ 3/ 节/ 介绍/ RDFS/ 推理/ 并行/ 化/ 的/ 相关/ 工作/ ;/ 第/ 4/ 节对/ RDFS/ 推理/ 并行/ 化/ 处理/ 的/ 技术/ 困难/ 进行/ 分析/ 并/ 给出/ 解决方案/ ;/ 第/ 5/ 节/ 讨论/ YARM/ 的/ 设计/ 和/ 实现/ ;/ 第/ 6/ 节/ 采用/ 多个/ 数据/ 集对/ YARM/ 进行/ 测试/ 和/ 分析/ ;/ 最后/ 对/ 全文/ 进行/ 总结/ ./ 2/ 语义/ 推理/ 相关/ 概念/ RDF/ (/ ResourceDescriptionFramework/ ,/ 资源/ 描述/ 框架/ )/ ①/ 是/ 一种/ 数据模型/ ,/ 是/ 由/ 万维网/ 联盟/ (/ WorldWideWebConsortium/ ,/ W3C/ )/ 组织/ 的/ RDF/ 工作组/ 于/ 1999/ 年/ 提出/ 的/ 描述/ Web/ 信息/ 的/ 知识/ 表示/ 语言/ ./ RDF/ 是/ 谓词/ 逻辑/ 的/ 一种/ 特殊/ 形式/ ,/ 具有/ 形式化/ 的/ 语义/ 表示/ ,/ 有助于/ 计算机/ 理解/ 它/ 所/ 表达/ 的/ 语义/ 信息/ ./ RDF/ 数据模型/ (/ RDF/ 图/ )/ 的/ 组成/ 包括/ 资源/ 、/ 属性/ 和/ 陈述/ ./ 资源/ 以/ 唯一/ 的/ 统一/ 资源/ 标识符/ (/ UniformResourceIdentifiers/ ,/ URI/ )/ 来/ 表示/ ,/ 可以/ 是/ 网络/ 上/ 的/ 任何/ 信息/ 、/ 虚拟/ 概念/ 或/ 现实/ 事物/ 等/ ;/ 属性/ 则/ 用来/ 描述/ 资源/ 的/ 特征/ 以及/ 资源/ 之间/ 的/ 关系/ ,/ 每一/ 属性/ 都/ 有/ 其/ 意义/ ;/ 陈述/ 是/ 一条/ 三元组/ ,/ 表示/ 为/ (/ 主语/ 、/ 谓语/ 、/ 宾语/ )/ 的/ 形式/ ./ 其中/ 主语/ 是/ 资源/ ,/ 由/ URI/ 表示/ ;/ 谓语/ 是/ 属性/ ,/ 亦/ 由/ URI/ 表示/ ;/ 宾语/ 是/ 资源/ (/ URI/ )/ 或/ 文本/ ./ RDF/ 的/ 词汇/ 描述语言/ RDFSchema/ (/ RDFS/ )/ ②/ 利用/ RDF/ 进一步/ 定义/ 了/ 建模/ 原语/ ,/ RDFS/ 可以/ 看作/ 是/ 针对/ RDF/ 模型/ 的/ 一个/ 基本/ 类型/ 系统/ ,/ 是/ 一种/ 简单/ 的/ 本体/ 语言/ ,/ 即/ “/ 一种/ 对/ 共享/ 概念化/ 的/ 、/ 明确/ 的/ 形式化/ 说明/ ”/ [/ 8/ ]/ ./ 使用/ RDFS/ 可以/ 定义/ 属性/ 的/ 特征/ ,/ 定义/ 被/ 描述/ 资源/ 的/ 类/ ,/ 并/ 对/ 类/ 和/ 关系/ 的/ 可能/ 组合/ 进行/ 约束/ ./ RDFS/ 规则/ 推理/ 支持/ 几乎/ 所有/ 的/ RDFS/ 蕴含/ ,/ 并且/ 具有/ 良好/ 的/ 可计算性/ 和/ 表达能力/ ,/ 是/ 最/ 广泛/ 使用/ 的/ 推理方法/ 之一/ ,/ 得到/ 了/ 众多/ 研究者/ 的/ 关注/ 和/ 研究/ [/ 1/ ,/ 3/ ,/ 6/ -/ 7/ ,/ 9/ ]/ ./ RDF/ 图显式/ 地/ 表示/ 了/ 一个/ 三元组/ 的/ 集合/ ,/ 同时/ 结合/ RDFS/ 语义/ 定义/ 的/ 一组/ 规则/ (/ 如表/ 1/ 所示/ )/ 还/ 具有/ 表示/ 隐含/ 数据/ 的/ 能力/ ,/ 这是/ RDF/ 数据模型/ 不同于/ 传统/ 数据模型/ 的/ 主要/ 特征/ 之一/ ./ 隐含/ 数据/ 的/ 求解/ 过程/ 即/ 为/ 推理/ 过程/ ,/ 亦/ 即/ 在/ 给定/ 一个/ RDF/ 图/ G/ 的/ 情况/ 下/ ,/ 根据/ RDFS/ 推理/ 规则/ 加入/ 一组/ 新/ 的/ 三元组/ T/ ,/ 从而/ 得到/ 更大/ 的/ RDF/ 图/ G/ ,/ 这个/ 过程/ 称为/ 推理/ 过程/ 或/ RDFS/ 闭包/ 的/ 具体化/ [/ 9/ ]/ ./ G/ 所/ 描述/ 的/ 数据/ 是/ 显式/ 的/ RDF/ 语义/ 信息/ ,/ 称为/ 显式/ 数据/ ;/ 新/ 加入/ 的/ 三元组/ 集合/ T/ 是/ 隐含/ 的/ RDF/ 语义/ 信息/ ,/ 称为/ 隐含/ 数据/ ./ 例如/ ,/ 设/ RDF/ 图中/ 有/ 如下/ 三元组/ {/ (/ Master/ ,/ rdfs/ :/ subClassOf/ ,/ Student/ )/ ,/ (/ Student/ ,/ rdfs/ :/ subClassOf/ ,/ Person/ )/ }/ ./ 根据/ 规则/ 11/ 可知/ ,/ RDF/ 图中/ 还/ 隐含/ 着/ 三元组/ (/ Master/ ,/ rdfs/ :/ subClassOf/ ,/ Person/ )/ ./ 事实上/ ,/ 表/ 1/ 中/ 给出/ 的/ 13/ 条/ 规则/ 是/ RDFS/ 推理/ 的/ 一个/ 标准/ 规则/ 集/ ./ 该/ 规则/ 集/ 具有/ 良好/ 的/ 计算能力/ 和/ 可判定性/ ,/ 包含/ 了/ 所有/ RDFS/ 蕴涵/ ,/ 被/ 广泛应用/ 于/ 各种/ 领域/ [/ 1/ ]/ ./ RDFS/ 本身/ 是/ 一个/ 原始/ 本体/ 语言/ ,/ 用于/ 描述/ 概念/ 型/ 的/ 信息/ ,/ 而/ 非/ 特定/ 的/ 实例/ 或/ 对象/ ,/ 是/ 具有/ 广泛/ 的/ 抽象/ 意义/ 的/ ,/ 也就是说/ RDFS/ 适用/ 于/ 任何/ 领域/ ,/ 具有/ 高度/ 的/ 通用性/ [/ 9/ ]/ ./ 基于/ RDFS/ ,/ 用户/ 可定义/ 面向/ 特定/ 应用/ 系统/ 的/ 概念/ 对象/ 和/ 数据/ 关系/ ,/ 创建/ 相应/ 的/ RDF/ 数据/ ./ 推理/ 可以/ 在/ 数据/ 插入/ 到/ RDF/ 存储系统/ 时/ 执行/ ,/ 称为/ 前向/ 推理/ ;/ 也/ 可以/ 在/ 查询/ 发生/ 时/ 执行/ ,/ 称为/ 后/ 向/ 推理/ ./ 前向/ 推理/ (/ forwardchaining/ )/ 从/ 一个/ 初始/ 的/ 事实/ 出发/ ,/ 不断/ 应用/ 规则/ 得出结论/ ./ 前向/ 推理/ 在/ 数据/ 插入/ 存储系统/ 时/ 被/ 触发/ ,/ 推理/ 得到/ 的/ 三元组/ 和/ 原/ 三元组/ 都/ 保存/ 在/ RDF/ 存储系统/ 中/ ./ 其/ 优点/ 是/ 查询/ 速度/ 快/ ;/ 缺点/ 是/ 计算/ 全部/ 隐式/ 数据/ 需要/ 的/ 时间/ 开销/ 较大/ ,/ 而且/ 推理/ 结果/ 的/ 物化/ 需要/ 占用/ 较/ 多/ 的/ 磁盘空间/ ./ 当前/ 有/ 一些/ 前向/ 推理/ 系统/ ,/ 如/ Sesame/ 和/ RStar/ ./ 后/ 向/ 推理/ (/ backwardchaining/ )/ 从/ 查询/ 目标/ 出发/ ,/ 利用/ 规则/ 不断/ 地/ 进行/ 目标/ 消解/ 来/ 完成/ 推理/ ./ 推理/ 在/ 查询/ 时/ 触发/ ,/ 从/ 规则/ 的/ 结论/ 出发/ 依次/ 归纳/ 为/ 规则/ 的/ 条件/ ./ 这种/ 方法/ 不/ 需要/ 大量/ 的/ 磁盘空间/ 来/ 保存/ 无用/ 的/ 推理/ 结果/ ,/ 也/ 不/ 需要/ 额外/ 的/ 数据/ 预处理/ 时间/ ,/ 但是/ 由于/ 推理/ 在/ 查询/ 时/ 完成/ ,/ 因此/ 会/ 导致/ 查询处理/ 性能/ 较/ 低/ ./ 由于/ 前向/ 推理/ 在/ 查询/ 响应/ 时间/ 方面/ 的/ 优势/ 以及/ 其/ 在/ 推理/ 系统/ 中/ 的/ 主流/ 地位/ [/ 10/ ]/ ,/ 同时/ 也/ 由于/ 目前/ 主流/ 的/ 大/ 数据分析/ 挖掘/ 并行处理/ 平台/ 是/ HadoopMap/ -/ Reduce/ ,/ 本文/ 主要/ 研究/ 基于/ MapReduce/ 的/ 前/ 向/ 推理/ 并行/ 化/ 算法/ ./ 下文/ 中/ 的/ 推理/ 均/ 指前/ 向/ 推理/ ./ 为了/ 表达/ 方便/ ,/ 本文/ 使用/ 实例/ 数据/ 和/ 模式/ 数据/ 分别/ 代表/ 由/ RDF/ 语义/ 构造/ 的/ 三元组/ 和/ 使用/ RDFS/ 语义/ 构造/ 的/ 三元组/ ./ ①/ ②/ Page4/ 表/ 1RDFS/ 推理/ 规则/ 3/ 相关/ 工作/ 当前/ ,/ 在/ RDFS/ 语义/ 推理/ 方面/ 有着/ 众多/ 的/ 研究/ [/ 6/ ,/ 7/ ,/ 10/ -/ 21/ ]/ ./ 根据/ 计算/ 模式/ 和/ 实现/ 方式/ 的/ 不同/ ,/ 可以/ 分为/ 以下/ 几种/ :/ (/ 1/ )/ 基于/ 单/ 节点/ 的/ 推理方法/ ./ 典型/ 的/ 单机/ 推理/ 系统/ 有/ Jena/ [/ 11/ ]/ 、/ Pellet/ [/ 12/ ]/ 、/ Sesame/ [/ 13/ ]/ 等/ ./ 这些/ 系统/ 为/ 语义/ 数据/ 推理/ 奠定/ 了/ 重要/ 的/ 技术/ 基础/ ,/ 但是/ 由于/ 单/ 节点/ 运行/ 环境/ 的/ 限制/ ,/ 在/ 可扩展性/ 和/ 计算/ 性能/ 方面/ 存在/ 不足/ ,/ 它们/ 难以/ 处理/ 大规模/ 语义/ 数据/ ./ (/ 2/ )/ 基于/ 关系/ 型/ 数据库/ 的/ 推理方法/ [/ 14/ -/ 15/ ]/ ./ 这类/ 方法/ 采用/ 关系数据库/ 作为/ RDF/ 存储系统/ ,/ 结合/ 现有/ 的/ 单机/ 推理/ 系统对/ 语义/ 数据/ 进行/ 推理/ ,/ 满足/ 了/ 语义/ 信息/ 的/ 存储/ 和/ 查询/ 要求/ ./ 与/ 单机/ 推理/ 系统/ 类似/ ,/ 这/ 类/ 系统/ 在/ 推理/ 速度/ 和/ 可扩展性/ 方面/ 也/ 存在/ 不足/ ./ (/ 3/ )/ 基于/ 分布式/ 哈希/ 技术/ 的/ 推理方法/ ./ 文献/ [/ 16/ ]/ 采用/ 了/ 基于/ 分布式/ 哈希/ 技术/ 的/ 并行/ 推理方法/ ./ 该/ 方法/ 将/ 数据/ 存储/ 在/ 分布式/ 哈希/ 表中/ ,/ 推理/ 过程/ 需/ 不断/ 访问/ 哈希/ 表以/ 避免/ 数据/ 重复/ ./ 该类/ 方法/ 存在/ 的/ 主要/ 问题/ 是/ 负载/ 不/ 均衡/ ,/ 因此/ 在/ 处理/ 大规模/ 数据/ 的/ 场景/ 下/ ,/ 容易/ 产生/ 严重/ 的/ 性能/ 瓶颈/ ./ (/ 4/ )/ 基于/ 数据/ 划分/ 的/ 推理方法/ ./ 这类/ 方法/ 主要/ 通过/ 对/ 语义/ 数据/ 或/ 规则/ 进行/ 划分/ 来/ 实现/ 语义/ 数据/ 推理/ 的/ 并行/ 化/ ./ MacCartney/ 等/ 人/ [/ 17/ ]/ 提出/ 了/ 一种/ 基于/ 图/ 划分/ 的/ 一阶/ 逻辑推理/ 算法/ ;/ Soma/ 和/ Prasanna/ [/ 10/ ]/ 提出/ 了/ 一种/ 通过/ 数据/ 划分/ 来/ 实现/ 并行/ 推理/ 的/ 技术/ ,/ 但是/ 这些/ 方法/ 并/ 没有/ 提供/ 大/ 数据/ 集下/ 的/ 实验/ 结果/ ./ Weaver/ 与/ Hendler/ [/ 18/ ]/ 提出/ 了/ 一种/ 数据/ 划分/ 模型/ ,/ 在/ 该/ 模型/ 下/ 推理/ 任务/ 可/ 被/ 分解/ 为/ 相互/ 独立/ 的/ 多个/ 并行/ 子/ 任务/ ,/ 各/ 节点/ 对/ 本地/ 的/ 数据/ 应用/ 所有/ 的/ 推理/ 规则/ ,/ 直到/ 不再/ 有/ 新/ 的/ 数据/ 产生/ ,/ 最后/ 通过/ 合并/ 各/ 节点/ 局部/ 结果/ 得到/ 全局/ 解/ ./ 该/ 方案/ 的/ 缺陷/ 是/ 没有/ 检测/ 和/ 过滤/ 重复/ 数据/ ,/ 另外/ 该/ 方案/ 在/ 每个/ 数据/ 单元/ 上/ 使用/ 传统/ 的/ 推理机/ ,/ 计算/ 效率/ 较/ 低/ ./ (/ 5/ )/ 基于/ P2P/ 网络/ 的/ 推理方法/ ./ 文献/ [/ 1/ ,/ 19/ -/ 20/ ]/ 提出/ 了/ 基于/ P2P/ 自/ 组织/ 网络/ 的/ 并行/ 化/ 推理方法/ Marvin/ ./ Marvin/ 以/ “/ divide/ -/ conquer/ -/ swap/ ”/ 的/ 方式/ 执行/ 前向/ 推理/ ,/ 蕴含/ 规则/ 以/ 渐进/ 方式/ 执行/ 直到/ 不会/ 再/ 产生/ 新/ 数据/ 为止/ ,/ 整个/ 推理/ 过程/ 也/ 需要/ 多次/ 数据通信/ [/ 21/ ]/ ./ (/ 6/ )/ 基于/ MapReduce/ 的/ 推理方法/ ./ 这类/ 方法/ 在/ 底层/ 采用/ HadoopMapReduce/ 方法/ 和/ 平台/ ,/ 结合/ 数据/ 划分/ 方法/ 来/ 实现/ 大规模/ 语义/ 数据/ 的/ 推理/ ./ 文献/ [/ 7/ ]/ 第一次/ 提出/ 基于/ MapReduce/ 的/ 推理/ 算法/ ,/ 但是/ 并未/ 给出/ 任何/ 实验/ 结果/ ./ Urbani/ 等/ 人/ [/ 6/ ]/ 提出/ 的/ 基于/ MapReduce/ 物化/ RDFS/ 闭包/ 的/ 分布式/ 推理/ 算法/ reasoning/ -/ hadoop/ ,/ 是/ 目前为止/ 最快/ 的/ 大规模/ 并行/ 化/ 推理/ 算法/ ./ 该/ 算法/ 通过/ 分析/ RDFS/ 规则/ 之间/ 的/ 依赖/ 关系/ ,/ 分析/ 出/ RDFS/ 规则/ 依赖图/ ,/ 在/ 该/ 图/ 的/ 指导/ 下/ 将/ 原来/ 需要/ 多次/ 迭代/ 才能/ 完成/ 的/ 推理/ 工作/ 简化/ 为/ 只/ 需/ 4/ 次/ MapReduce/ 作业/ ./ 但是/ 该/ 方案/ 中/ 每个/ 步骤/ 使用/ 相同/ 的/ 数据/ 划分/ 方案/ ,/ 不同/ 的/ 只是/ 计算/ 部分/ ,/ 这/ 导致/ 了/ 大量/ 静态数据/ 重复/ 传输/ 和/ 中间/ 结果/ 不能/ 有效/ 利用/ 的/ 问题/ ,/ 此外/ reasoning/ -/ hadoop/ 中/ 每个/ 作业/ 一般/ 都/ 是/ 较/ 短/ 的/ 数据/ 密集型/ 作业/ ,/ 推理/ 过程/ 中/ 的/ 大部分/ 时间/ 都/ 消耗/ 在/ 任务/ 的/ 创建/ 、/ 数据传输/ 以及/ 磁盘/ 输入输出/ 上/ ,/ 处理/ 代价/ 高/ ,/ 计算/ 性能/ 较/ 低/ ./ 基于/ MapReduce/ 的/ RDFS/ 推理/ 算法/ 提出/ 后/ ,/ 得到/ 了/ 学术界/ 的/ 广泛/ 关注/ ,/ 众多/ 研究者/ 开始/ 探讨/ 基于/ MapReduce/ 的/ 特定/ 领域/ 或/ 其他/ 规则/ 库/ 的/ 推理/ 算法/ ./ Liu/ 等/ 人/ [/ 22/ ]/ 提出/ 了/ 基于/ MapReduce/ 的/ 大规模/ 模糊/ RDF/ 语义/ 数据/ 的/ 分布/ 推理/ 引擎/ ;/ Tachmazidis/ 等/ 人/ [/ 23/ ]/ 提出/ 了/ 基于/ MapReduce/ 的/ 非/ 单调/ 规则/ 推理/ 的/ 并行/ 化/ 设计方案/ ;/ 而/ Wu/ 等/ 人/ [/ 24/ ]/ 提出/ 了/ 基于/ MapReduce/ 的/ 分布式/ 规则/ 执行/ 机制/ ,/ 但/ 并未/ 给出/ 实验/ 数据/ ;/ Jang/ 和/ Ha/ [/ 25/ ]/ 针对/ 规则/ 推理/ 中/ 的/ 传递性/ 关系/ 的/ 计算/ 提出/ 了/ 特定/ Page5/ 的/ 解决方案/ ;/ Maeda/ 等/ 人/ [/ 26/ ]/ 提出/ 了/ 基于/ MapReduce/ 的/ 规则/ 系统/ 的/ 设计/ 和/ 实现/ ./ 这些/ 工作/ 的/ 研究/ 进一步/ 拓展/ 了/ MapReduce/ 在/ 语义/ 推理/ 领域/ 的/ 应用/ ,/ 为/ 大规模/ 分布式/ 语义/ 推理/ 做出/ 了/ 重要/ 贡献/ ./ 本文/ 所/ 提出/ 的/ 并行/ 化/ 推理/ 算法/ 和/ 对应/ 实现/ 的/ 引擎/ YARM/ 采用/ 了/ 与/ Weaver/ 和/ Hendler/ 类似/ 的/ 数据/ 划分/ 模型/ ,/ 并/ 根据/ RDFS/ 规则/ 依赖/ 关系/ 优化/ 了/ 推理/ 过程/ ./ YARM/ 采用/ 不同/ 数据/ 划分/ 模型/ ,/ 使/ 推理/ 在/ 一次/ MapReduce/ 作业/ 之内/ 即可/ 完成/ ,/ 显著/ 提升/ 了/ 计算/ 效率/ ./ 在/ 单个/ 任务/ 上/ ,/ YARM/ 采用/ 与/ reasoning/ -/ hadoop/ 类似/ 的/ 规则/ 优化/ 策略/ 进行/ 推理/ 计算/ ,/ 以/ 避免/ 多次/ 迭代/ 处理/ ./ 此外/ ,/ YARM/ 还/ 结合/ MapReduce/ 的/ 特点/ 设计/ 了/ 高效/ 的/ 重复/ 数据/ 检测/ 和/ 消除/ 机制/ ./ 4RDFS/ 推理/ 并行/ 化/ 问题/ 和/ 解决方案/ 4.1/ 并行/ 化/ 问题/ 大规模/ RDF/ 语义/ 数据/ 推理/ 的/ 一个/ 主要/ 问题/ 是/ 计算/ 量/ 大/ 、/ 完成/ 计算/ 需要/ 消耗/ 很长/ 的/ 时间/ ,/ 因此/ ,/ 需要/ 研究/ 并行/ 化/ 的/ RDFS/ 推理/ 算法/ ./ RDFS/ 推理/ 过程/ 实质/ 上/ 是/ 一个/ 对/ RDF/ 输入/ 数据/ 反复/ 应用/ RDFS/ 推理/ 规则/ 进行/ 推理/ 的/ 过程/ ./ RDFS/ 推理/ 规则/ 如表/ 1/ 所示/ ./ 其中/ ,/ 规则/ 1/ 、/ 4/ 、/ 6/ 、/ 8/ 、/ 10/ 只有/ 一个/ 条件/ 语句/ ,/ 对/ 推理/ 并行/ 化/ 算法/ 改造/ 没有/ 影响/ ;/ 而/ 规则/ 12/ 和/ 13/ 在/ RDF/ 数据/ 中是/ 极少/ 出现/ 的/ ,/ 在/ 大多数/ 推理/ 工作/ 中均/ 不/ 进行/ 讨论/ [/ 6/ ,/ 14/ -/ 15/ ,/ 18/ ,/ 21/ ]/ ./ 因此/ ,/ 影响/ 推理/ 并行/ 化/ 改造/ 的/ 主要/ 规则/ 归结/ 在/ 表/ 2/ 中/ ./ 表/ 2/ 影响/ 推理/ 并行/ 化/ 改造/ 的/ RDFS/ 规则/ 子集/ 规则/ 2prdfs/ :/ domainx3prdfs/ :/ rangex5prdfs/ :/ subPropertyOfq7spo9srdf/ :/ typex11xrdfs/ :/ subClassOfy/ 这些/ 规则/ 在/ 推理/ 中/ 被/ 表示/ 为/ 三元组/ 的/ 连接/ (/ join/ )/ 操作/ ,/ 并且/ 需要/ 反复/ 执行/ ./ 应用/ 于/ 处理/ 大规模/ RDF/ 数据/ 时/ ,/ 将会/ 面临/ 多次/ 大规模/ 数据/ 集/ 的/ 自/ 连接/ 操作/ ,/ 导致/ 巨大/ 的/ 计算/ 量/ ,/ 因此/ ,/ 传统/ 的/ 推理机/ 不能/ 直接/ 应用/ 于/ 大规模/ 数据/ 的/ 处理/ ./ 此外/ ,/ 在/ 推理/ 过程/ 中/ 会/ 产生/ 大量/ 重复/ 数据/ ,/ 这些/ 重复/ 数据/ 既/ 可能/ 位于/ 同一/ 节点/ ,/ 也/ 可能/ 位于/ 不同/ 节点/ ,/ 如图/ 1/ 所示/ ./ 如何/ 检测/ 和/ 消除/ 这些/ 重复/ 数据/ 也/ 是/ 推理/ 算法/ 并行/ 化/ 改造/ 时/ 需要/ 研究/ 并/ 解决/ 的/ 一个/ 重要/ 问题/ ./ 图/ 1/ 重复/ 数据/ (/ 灰色/ 部分/ 和/ 白色/ 部分/ 既/ 可能/ 位于/ 同一/ 词/ 的/ 规则/ :/ 规则/ 5/ ./ 规则/ :/ 规则/ 11/ ./ 则/ 2/ 、/ 3/ 、/ 9.4/ ./ 2/ 推理/ 并行/ 化/ 解决方案/ 4.2/ ./ 1/ 规则/ 依赖/ 关系/ 为了/ 设计/ 出/ 高效/ 可/ 扩展/ 的/ 并行/ 化/ 推理/ 引擎/ ,/ 需要/ 对/ RDFS/ 的/ 规则/ 进行/ 深入分析/ ./ 首先/ 按/ 规则/ 的/ 输出/ 对/ 其/ 分类/ ,/ 可/ 分为/ 如下/ 几类/ :/ (/ 1/ )/ 输出/ 三元组/ 以/ rdfs/ :/ subPropertyOf/ 为谓/ (/ 2/ )/ 输出/ 三元组/ 以/ rdfs/ :/ subClassOf/ 为/ 谓词/ 的/ (/ 3/ )/ 输出/ 三元组/ 以/ rdf/ :/ type/ 为/ 谓词/ 的/ 规则/ :/ 规/ (/ 4/ )/ 输出/ 三元组/ 无/ 固定/ 模式/ 的/ 规则/ :/ 规则/ 7/ ./ 另一方面/ ,/ 依据/ 规则/ 输入/ 可/ 将/ 规则/ 分为/ 4/ 类/ :/ (/ 1/ )/ 输入/ 三元组/ 中/ 至少/ 有/ 一条/ 谓词/ 为/ rdfs/ :/ subPropertyOf/ 的/ 规则/ :/ 规则/ 5/ 、/ 7/ ./ (/ 2/ )/ 输入/ 三元组/ 中/ 至少/ 有/ 一条/ 谓词/ 为/ rdfs/ :/ subClassOf/ 的/ 规则/ :/ 规则/ 9/ 、/ 11/ ./ (/ 3/ )/ 输入/ 三元组/ 中/ 至少/ 有/ 一条/ 谓词/ 为/ rdf/ :/ type/ 的/ 规则/ :/ 规则/ 9/ ./ (/ 4/ )/ 输入/ 三元组/ 中/ 至少/ 有/ 一条/ 为/ 任意/ 实例/ 三元组/ 的/ 规则/ :/ 规则/ 2/ 、/ 3/ 、/ 7/ ./ 按/ 以上/ 推理/ 规则/ 的/ 输入输出/ 关系/ 重新/ 对/ 这些/ 规则/ 进行/ 组织/ ,/ 可/ 得到/ 如图/ 2/ 所示/ 的/ 规则/ 依赖/ 关系/ 图/ ./ Page6RDFS/ 规则/ 还/ 具有/ 如下/ 的/ 特征/ :/ (/ 1/ )/ RDFS/ 中/ 每/ 一条/ 规则/ 的/ 输入/ 至多/ 有/ 两个/ 三元组/ ,/ 且/ 至少/ 一个/ 为/ RDFS/ 模式/ 三元组/ ;/ (/ 2/ )/ 据统计/ ,/ RDF/ 数据/ 集中/ 模式/ 三元组/ 的/ 数量/ 只/ 占/ 极少/ 的/ 一部分/ ,/ 大部分/ 数据/ 为/ 实例/ 三元组/ ./ 这/ 说明/ RDFS/ 推理/ 中/ 不/ 存在/ 实例/ 数据/ 之间/ 的/ 连接/ 操作/ ,/ 只/ 存在/ 模式/ 数据/ 之间/ 或/ 模式/ 数据/ 与/ 实例/ 数据/ 之间/ 的/ 连接/ 操作/ [/ 6/ ,/ 14/ -/ 15/ ,/ 18/ ,/ 21/ ]/ ./ 4.2/ ./ 2/ 数据/ 划分/ 模型/ 解决/ 数据通信/ 问题/ 的/ 方法/ 是/ 设计/ 一个/ 好/ 的/ 数据/ 划分/ 策略/ [/ 10/ ]/ ./ 根据/ 对/ RDFS/ 规则/ 的/ 分析/ 可知/ ,/ RDF/ 数据/ 集/ 可以/ 被/ 分成/ 两/ 部分/ :/ 一部分/ 是/ 小规模/ 的/ 模式/ 数据/ ;/ 另/ 一部分/ 是/ 大规模/ 的/ 实例/ 数据/ ./ 模式/ 数据/ 和/ 实例/ 数据/ 之间/ 存在/ 连接/ 关系/ ,/ 而/ 实例/ 数据/ 之间/ 是/ 没有/ 数据/ 依赖/ 关系/ 的/ ,/ 因此/ 在/ 划分/ 数据/ 时/ ,/ 将/ 小规模/ 模式/ 数据/ 作为/ 全局/ 数据/ ,/ 复制到/ 每个/ 节点/ 的/ 内存/ 中/ ;/ 然后/ ,/ 我们/ 对/ 大规模/ 的/ 实例/ 数据/ 进行/ 划分/ ,/ 并/ 采用/ 分布式/ 存储/ 的/ 方式/ ,/ 以此/ 解决/ 大规模/ RDF/ 实例/ 数据/ 的/ 存储管理/ 和/ 并行/ 化/ 推理/ 计算/ ./ 在/ 这种/ 数据/ 划分/ 模型/ 下/ ,/ 一方面/ ,/ 规则/ 匹配/ 由/ 原来/ 一个/ 大表/ 的/ 自/ 连接/ 操作/ 转换/ 为/ 两个/ 集合/ 间/ 的/ 连接/ (/ 一个/ 小规模/ 模式/ 数据/ 集/ 与/ 一个/ 大规模/ 实例/ 数据/ 集/ 的/ 连接/ )/ ,/ 例如/ ,/ 规则/ 9/ (/ srdf/ :/ typex/ )/ (/ xrdfs/ :/ subClassOfy/ )/ →/ (/ srdf/ :/ typey/ )/ 可/ 通过/ 对/ 模式/ 数据/ 集/ 和/ 实例/ 数据/ 集在/ x/ 上/ 做/ 连接/ 实现/ ;/ 另一方面/ ,/ 各/ 计算/ 节点/ 的/ 任务/ 之间/ 无/ 关联/ 关系/ ,/ 整个/ 输入/ 数据/ 上/ 的/ 推理/ 可/ 分解成/ 多个/ 可/ 同时/ 并行执行/ 的/ 推理/ 任务/ ./ 该/ 数据/ 划分/ 模型/ 在/ 文献/ [/ 18/ ]/ 中/ 被/ 首次/ 提出/ ,/ 并/ 经过/ 了/ 严格/ 的/ 证明/ ,/ YARM/ 借鉴/ 上述/ 数据/ 划分/ 模型/ ,/ 以/ 减少/ MapReduce/ 环境/ 下/ 推理/ 时/ 节点/ 间/ 的/ 数据通信/ 开销/ ./ 4.2/ ./ 3/ 消除/ 迭代/ 在/ 推理/ 过程/ 中/ 迭代/ 涉及/ 到/ 两个/ 方面/ :/ 第一/ ,/ 单个/ 规则/ 需要/ 迭代/ 运算/ ,/ 如/ 规则/ 5/ 、/ 7/ 、/ 9/ 、/ 11/ ,/ 这/ 类/ 规则/ 的/ 特点/ 是/ 规则/ 输出/ 又/ 可以/ 作为/ 自身/ 的/ 输入/ ,/ 称为/ 传递/ 规则/ ./ 传递/ 规则/ 的/ 推理/ 计算/ 实质/ 上/ 是/ 求解/ 输入/ 数据/ 的/ 传递/ 闭包/ ./ 第二/ ,/ 不同/ 规则/ 间/ 存在/ 依赖/ 关系/ (/ 图/ 2/ )/ ,/ 整个/ 推理/ 过程/ 需要/ 多次/ 迭代/ 直到/ 不再/ 产生/ 新/ 的/ 隐含/ 数据/ 为止/ ./ 通过/ 对/ 规则/ 间/ 依赖/ 关系/ 的/ 分析/ ,/ 我们/ 得到/ 了/ 一个/ 非/ 循环/ 的/ 规则/ 依赖图/ (/ 图/ 2/ )/ ,/ 该图/ 存在/ 一种/ 拓扑/ 排序/ (/ 比如/ 规则/ “/ 5/ ,/ 11/ ,/ 7/ ,/ 2/ ,/ 3/ ,/ 9/ ”/ ,/ 这里/ 的/ 序列/ 不是/ 表达/ 前后/ 两项/ 的/ 一一/ 依赖/ 关系/ ,/ 而是/ 图论/ 中/ 的/ 拓扑/ 排序/ 关系/ ./ 具体/ 地/ ,/ 指在/ 这个/ 序列/ 中/ 不/ 存在/ 任何/ 一项/ 依赖于/ 该项/ 之后/ 出现/ 的/ 项/ 的/ 情况/ )/ ,/ 使得/ 我们/ 对/ 每条/ 规则/ 只/ 应用/ 一次/ 即可/ 推导/ 出/ 所有/ 的/ 隐含/ 数据/ ,/ 推理/ 过程/ 不再/ 需要/ 多次/ 迭代/ ./ 另一方面/ ,/ 对于/ 单个/ 传递/ 规则/ 来说/ ,/ 通过/ 在/ 规则/ 7/ 之前/ 执行/ 规则/ 5/ ,/ 可以/ 消除/ 规则/ 7/ 的/ 迭代/ 计算/ ,/ 同样/ 在/ 规则/ 9/ 之前/ 执行/ 规则/ 11/ ,/ 可以/ 消除/ 规则/ 9/ 的/ 迭代/ 计算/ [/ 15/ ]/ ./ 而/ 同时/ 规则/ 5/ 和/ 11/ 的/ 推理/ 只/ 涉及/ 小规模/ 模式/ 数据/ ,/ 其/ 推理/ 计算/ 可/ 在/ 内存/ 中/ 完成/ ./ 4.2/ ./ 4/ 消重/ 策略/ 在/ RDFS/ 推理/ 中/ 重复/ 数据/ 存在/ 两种/ 类型/ :/ 第一种/ 是/ 新/ 推导/ 出/ 的/ 结果/ 和/ 原/ 数据/ 存在/ 重复/ (/ 图/ 3/ )/ ;/ 第二种/ 是/ 新/ 推导/ 出/ 的/ 数据/ 之间/ 存在/ 重复/ (/ 图/ 1/ )/ ./ 为了/ 消除/ 结果/ 中/ 的/ 重复/ 数据/ ,/ 需要/ 将/ 原始数据/ 和/ 新/ 推导/ 出/ 的/ 数据/ 进行/ 比较/ ./ 因为/ Hadoop/ 能/ 自动/ 地/ 将/ Map/ 端/ 输出/ 的/ 键值/ 对/ 按键/ 值/ 组织/ 在/ 一起/ ,/ 因此/ 在/ 将/ 三元组/ 设置/ 为/ 键值/ 的/ 情况/ 下/ ,/ 相同/ 三元组/ 会/ 被/ 组织/ 在/ 一起/ ,/ 可以/ 很/ 容易/ 地/ 使用/ Combine/ 和/ Reduce/ 来/ 实现/ 重复/ 数据/ 的/ 检测/ 和/ 消除/ ./ 图/ 3/ 重复/ 数据/ (/ 白色/ 框内/ 为/ 原始数据/ ,/ 黑色/ 框内/ 为/ 由表/ 2/ 可知/ ,/ RDFS/ 规则/ 的/ 输出/ 存在/ 4/ 种/ 模式/ :/ (/ 1/ )/ 模式/ 1/ (/ ?/ x/ ,/ rdf/ :/ type/ ,/ ?/ y/ )/ ,/ 即/ 谓词/ 为/ rdf/ :/ type/ 的/ 三元组/ ;/ (/ 2/ )/ 模式/ 2/ (/ ?/ x/ ,/ rdfs/ :/ subPropertyOf/ ,/ ?/ y/ )/ ,/ 即/ 谓词/ 为/ rdfs/ :/ subPropertyOf/ 的/ 三元组/ ;/ (/ 3/ )/ 模式/ 3/ (/ ?/ x/ ,/ rdfs/ :/ subClassOf/ ,/ ?/ y/ )/ ,/ 即/ 谓词/ 为/ rdfs/ :/ subClassOf/ 的/ 三元组/ ;/ (/ 4/ )/ 模式/ 4/ (/ ?/ x/ ,/ ?/ subPropertyRelated/ ,/ ?/ y/ )/ ,/ 即/ 谓词/ 具有/ rdfs/ :/ subPropertyOf/ 属性/ 的/ 三元组/ ./ 其中/ ,/ 与/ 模式/ 1/ 和/ 模式/ 4/ 匹配/ 的/ 三元组/ 只/ 可能/ 为/ 实例/ 三元组/ ;/ 与/ 模式/ 2/ 和/ 模式/ 3/ 匹配/ 的/ 三元组/ 只/ 可能/ 为/ 模式/ 三元组/ ./ 可见/ ,/ RDFS/ 规则/ 的/ 输出/ 遵循/ 固定/ 的/ 模式/ ,/ 因此/ ,/ 只/ 需/ 与/ 原始/ RDF/ 图中/ 匹配/ 这些/ 模式/ 的/ 部分/ 数据/ 进行/ 比较/ ,/ 即可/ 检测/ 出/ 所有/ 与/ 原始/ RDF/ 三元组/ 存在/ 重复/ 的/ 推理/ 结果/ ./ 这种/ 方式/ 会/ 减少/ 大量/ 不必要/ 的/ 数据传输/ ,/ 对/ 提升/ 推理/ 性能/ 起到/ 重要/ 作用/ ./ Page75YARM/ 的/ 设计/ 与/ 实现/ 5.1/ MapReduce/ 并行/ 化/ 推理/ 算法/ 设计/ 与/ 实现/ 根据/ 第/ 4/ 节/ 的/ 推理/ 算法/ 并行/ 化/ 解决方案/ ,/ 在/ YARM/ 中/ RDFS/ 前向/ 推理/ 可/ 归结为/ 3/ 个/ 阶段/ ./ 在/ 阶段/ I/ 中/ ,/ 将/ 小规模/ 模式/ 数据/ 复制到/ 每个/ 节点/ 的/ 内存/ 中/ ,/ 同时/ 将/ 实例/ 数据/ 划分/ 为/ 多个/ 互不/ 重叠/ 的/ 分区/ ./ 每个/ 节点/ 拥有/ 全部/ 的/ 模式/ 数据/ 和/ 部分/ 实例/ 数据/ ,/ 在/ 推理/ 执行/ 过程/ 中/ ,/ 将/ 不/ 需要/ 从/ 其他/ 节点/ 得到/ 数据/ 或者/ 图/ 4YARM/ :/ 基于/ MapReduce/ 的/ 并行/ 化/ 推理/ 算法/ 与/ 处理过程/ 5.2/ 数据/ 划分/ 在/ YARM/ 中/ ,/ 我们/ 假定/ 整个/ RDF/ 三元组/ 数据/ 集/ 按行/ 存储/ 在/ HDFS/ 中/ ,/ 实例/ 数据/ 和/ 模式/ 数据/ 分别/ 作为/ 一个/ 文件/ ./ 首先/ ,/ 将/ 利用/ HadoopMapReduce/ 中/ 的/ DistributedCache/ 机制/ ,/ 在/ map/ (/ )/ 的/ setup/ (/ )/ 初始化/ 函数/ 中将/ 模式/ 数据/ 复制到/ 每个/ 节点/ 的/ 本地/ 内存/ 中/ ;/ 然后/ 将/ 实例/ 数据/ 作为/ map/ (/ )/ 函数/ 的/ 输入/ ,/ 这样/ 可以/ 利用/ HDFS/ 自身/ 的/ 存储/ 机制/ 把/ 数据/ 集切/ 分成/ 固定/ 大小/ 的/ N/ 个子/ 数据/ 块/ (/ 默认/ 为/ 64MB/ )/ ,/ 这些/ 子/ 数据/ 块/ 分布/ 在/ 集群/ 内/ 不同/ 的/ 节点/ 上/ ./ 为了/ 节省/ 数据/ 导入/ 时间/ 和/ 存储空间/ ,/ 我们/ 对/ RDF/ 三元组/ 进行/ 了/ 编码/ 压缩/ ,/ 模式/ 三元组/ 和/ 实例/ 三元组/ 在/ 编码/ 阶段/ 分别/ 输出/ 到/ 不同/ 的/ 文件/ ,/ 同时/ ,/ 考虑/ 到/ 程序/ 的/ 实现/ ,/ 存储/ 文件/ 采用/ HadoopSequenceFile/ 格式/ ,/ 每条/ 序列/ 以/ 键值/ (/ key/ -/ value/ )/ 对/ 的/ 形式/ 存储/ ,/ 直接/ 以/ 三元组/ 作为/ 键/ (/ key/ )/ ,/ 值/ (/ value/ )/ 设置/ 为空/ ./ 由于/ 所有/ 三元组/ 的/ 大小/ 被/ 编码/ 为/ 相同/ 的/ 长度/ ,/ 因此/ 各/ 节点/ 得到/ 的/ 三元组/ 数量/ 基本相同/ ,/ 保证/ 了/ 各/ 节点/ 间/ 的/ 负载/ 均衡/ ./ 其次/ ,/ 为了/ 便于/ Map/ 阶段/ 的/ 处理/ ,/ 依据/ 所/ 匹配/ 的/ 规则/ ,/ 模式/ 数据/ 被/ 组织/ 成/ 四类/ 相应/ 的/ 内存/ 数据结构/ ./ 其中/ 与/ 规则/ 2/ 匹配/ 的/ 三元组/ (/ 即/ 谓词/ 为/ rdfs/ :/ 其他/ 控制/ 信息/ ,/ 亦/ 即/ 各/ 节点/ 之间/ 是/ 相互/ 独立/ 的/ ,/ 可以/ 并行/ 地/ 执行/ 推理/ 计算/ ./ 在/ 阶段/ II/ 中/ ,/ 各/ 节点/ 并行/ 地/ 对/ 本地/ 数据/ 执行/ 推理/ 计算/ 过程/ ,/ 该/ 阶段/ 主要/ 负责/ 依据/ 规则/ 依赖图/ 对/ 输入/ 数据/ 应用/ 推理/ 规则/ 进行/ 推理/ 处理/ ./ 阶段/ Ⅲ/ 负责/ 对/ 各/ 节点/ 的/ 推理/ 结果/ 进行/ 合并/ ,/ 并/ 消除/ 结果/ 中/ 的/ 重复/ 数据/ ./ 可以/ 看出/ ,/ 阶段/ I/ 相当于/ 数据/ 划分/ 阶段/ ,/ 阶段/ II/ 相当于/ 推理/ 计算/ 阶段/ ,/ 而/ 阶段/ Ⅲ/ 相当于/ 合并/ 阶段/ ,/ 因此/ 这/ 3/ 个/ 阶段/ 可以/ 方便/ 地用/ Map/ -/ Reduce/ 并行计算/ 模型/ 加以/ 实现/ ./ YARM/ 执行/ 框架/ 如图/ 4/ 所示/ ./ domain/ 的/ 三元组/ )/ 存放/ 在/ domainMap/ 数据/ 集中/ ,/ 例如/ ,/ 三元组/ (/ masterDegreeFrom/ ,/ rdfs/ :/ domain/ ,/ Master/ )/ 的/ 谓词/ 为/ rdfs/ :/ domain/ ,/ 则/ 〈/ masterDegree/ -/ From/ ,/ Master/ 〉/ 被/ 添加/ 到/ domainMap/ 中/ ;/ 与/ 规则/ 3/ 匹配/ 的/ 三元组/ (/ 谓词/ 为/ rdfs/ :/ range/ 的/ 三元组/ )/ 存放/ 在/ rangeMap/ 数据/ 集中/ ;/ 与/ 规则/ 5/ 和/ 7/ 匹配/ 的/ 三元组/ (/ 谓词/ 为/ rdfs/ :/ subClassOf/ 的/ 三元组/ )/ 存放/ 在/ subClassMap/ 数据/ 集中/ ,/ 例如/ ,/ 三元组/ (/ Master/ ,/ rdfs/ :/ subClassOf/ ,/ Student/ )/ 的/ 谓词/ 为/ subClassOf/ ,/ 则/ 〈/ Master/ ,/ Student/ 〉/ 被/ 添加/ 到/ subClassMap/ 中/ ;/ 而/ 与/ 规则/ 9/ 和/ 11/ 匹配/ 的/ 三元组/ (/ 谓词/ 为/ rdfs/ :/ subPro/ -/ pertyOf/ 的/ 三元组/ )/ 存放/ 在/ subPropMap/ 数据/ 集中/ ./ Mapper/ 端/ setup/ (/ )/ 装载/ 和/ 组织/ 数据/ 的/ 实现/ 如/ 算法/ 1/ 所示/ ./ 其中/ ,/ setup/ (/ )/ 函数/ 从/ HDFS/ 中/ 读取/ 所有/ 的/ 模式/ 三元组/ ,/ 并/ 根据/ 三元组/ 所/ 匹配/ 的/ 规则/ 逐条/ 进行/ 处理/ ,/ 将/ 其/ 组织/ 为/ 不同/ 的/ 内存/ 数据结构/ ,/ 方便/ 之后/ 各/ 推理/ 规则/ 的/ 执行/ ;/ 最后/ ,/ 因为/ 规则/ 5/ 和/ 规则/ 11/ 的/ 推理/ 只/ 涉及/ 模式/ 数据/ ,/ 并且/ 处于/ 规则/ 依赖图/ 的/ 底层/ ,/ 应该/ 首先/ 被/ 执行/ ,/ 因此/ 这/ 两条/ 规则/ 的/ 推理/ 在/ 模式/ 数据/ 装载/ 到/ 内存/ 后/ 便/ 立即/ 以/ 批处理/ 方式/ 加以/ 执行/ ,/ 在/ 执行/ 过程/ 中/ 重复/ 的/ 模式/ 数据/ 也/ 会/ 得到/ 处理/ ./ 而/ 其余/ 涉及/ 到/ 实例/ 数据/ 的/ 推理/ 规则/ 在/ map/ (/ )/ 函数/ 中/ 逐行/ Page8/ 加以/ 处理/ ./ 算法/ 1/ ./ 模式/ 数据/ 预处理/ ./ 输入/ :/ 模式/ 三元组/ 集合/ Schema/ 输出/ :/ 模式/ 三元组/ 分类/ 集合/ setup/ (/ )/ FORSchema/ ./ next/ (/ )/ !/ =/ nulltriple/ =/ Schema/ ./ next/ (/ )/ ;/ IFtriple/ ./ predicate/ =/ =/ rdfs/ :/ domaindomainMap/ ./ add/ (/ triple/ ./ subject/ ,/ triple/ ./ object/ )/ ;/ ELSEIFtriple/ ./ predicate/ =/ =/ rdfs/ :/ rangerangeMap/ ./ add/ (/ triple/ ./ subject/ ,/ triple/ ./ object/ )/ ;/ ELSEIFtriple/ ./ predicate/ =/ =/ rdfs/ :/ subPropertyOfsubpropMap/ ./ add/ (/ triple/ ./ subject/ ,/ triple/ ./ object/ )/ ;/ ELSEIFtriple/ ./ predicate/ =/ =/ rdfs/ :/ subClassOfsubclassMap/ ./ add/ (/ triple/ ./ subject/ ,/ triple/ ./ object/ )/ ENDIFENDFORsubpropMap/ ./ transitiveClosure/ (/ )/ ;/ // // 执行/ 规则/ 5/ 的/ 推理/ subclassMap/ ./ transitiveClosure/ (/ )/ ;/ // // 执行/ 规则/ 11/ 的/ 推理/ 5.3/ Map/ 阶段/ 的/ 规则/ 推理/ 计算/ Map/ 计算/ 阶段/ (/ 阶段/ II/ )/ ,/ 用来/ 执行/ 规则/ 2/ 、/ 3/ 、/ 7/ 、/ 9/ 的/ 推理/ ./ Map/ 端的/ 输入/ 是从/ 实例/ 数据文件/ 中/ 读取/ 出来/ 的/ 〈/ spo/ -/ null/ 〉/ 键值/ 对/ ./ 如/ 算法/ 2/ 所示/ :/ 在/ map/ (/ )/ 函数/ 中/ ,/ 对/ 读入/ 的/ 实例/ 三元组/ 确定/ 所/ 匹配/ 的/ 规则/ ,/ 并/ 根据/ 规则/ 依赖图/ 触发/ 新/ 的/ 推理/ 直到/ 到达/ 规则/ 依赖图/ 的/ 顶端/ ,/ 即可/ 得到/ 该/ 实例/ 三元组/ 的/ 全部/ 推理/ 结果/ ./ 同时/ map/ (/ )/ 还/ 对/ 原/ 数据/ 进行/ 过滤/ ,/ 以便/ 在/ Reduce/ 端/ 进行/ 重复/ 数据/ 的/ 检测/ 和/ 消除/ ./ 匹配/ 规则/ 的/ 确定/ 是/ 通过/ 检查/ 三元组/ 的/ 谓词/ (/ 模式/ )/ 实现/ 的/ ./ 例如/ ,/ 如图/ 5/ 所示/ ,/ RDF/ 图中/ 有/ 如下/ 三元组/ {/ (/ Jolin/ ,/ masterDegreeFrom/ ,/ University0/ )/ ,/ (/ masterDegreeFrom/ ,/ rdfs/ :/ domain/ ,/ Master/ )/ ,/ (/ Master/ ,/ rdfs/ :/ subClassOf/ ,/ Student/ )/ }/ ,/ 其中/ 模式/ 三元组/ (/ masterDegreeFrom/ ,/ rdfs/ :/ domain/ ,/ Master/ )/ 和/ 实例/ 三元组/ (/ Jolin/ ,/ masterDegreeFrom/ ,/ University0/ )/ 与/ 规则/ 2/ 匹配/ ,/ 因此/ 首先/ 要/ 对/ 其/ 应用/ 规则/ 2/ ;/ 规则/ 2/ 的/ 输出/ (/ Jolin/ ,/ rdf/ :/ type/ ,/ Master/ )/ 和/ 模式/ 三元组/ (/ Master/ ,/ rdfs/ :/ subClassOf/ ,/ Student/ )/ 与/ 规则/ 9/ 匹配/ ,/ 因此/ 规则/ 2/ 会/ 继续/ 触发/ 规则/ 9/ 的/ 执行/ ;/ 规则/ 9/ 在/ 规则/ 依赖图/ 中是/ 最上层/ 的/ 规则/ ,/ 推理/ 计算/ 至此/ 完成/ ./ 为了/ 检测/ 和/ 消除/ 重复/ 数据/ ,/ YARM/ 需要/ 将/ 输入/ 的/ 原始/ 三元组/ 和/ 新/ 推导/ 出/ 的/ 三元组/ 进行/ 比较/ ,/ 所以/ Map/ 端/ 输出/ 新/ 三元组/ 的/ 同时/ ,/ 还/ 需要/ 将/ 原始/ 三元组/ 传递/ 到/ Reduce/ 端/ ./ 为了/ 尽可能减少/ 传输/ 不必要/ 的/ 静态数据/ ,/ YARM/ 在/ Map/ 阶段/ 对原/ 数据/ 进行/ 过滤/ ./ 通过/ 对/ RDFS/ 规则/ 的/ 输出/ 进行/ 分析/ ,/ 看到/ 只有/ 谓词/ 为/ rdf/ :/ type/ 以及/ 谓词/ 具有/ rdfs/ :/ subPropertyOf/ 属性/ 的/ 实例/ 三元组/ 才/ 存在/ 与/ 新/ 推导/ 出/ 的/ 三元组/ 产生/ 重复/ 的/ 可能性/ ,/ 因此/ Map/ 只/ 需/ 过滤/ 出/ 这部分/ 数据/ 并/ 将/ 其/ 传递/ 给/ Reduce/ 即可/ ./ Map/ 会/ 输出/ 两种/ 类型/ 的/ 数据/ (/ 原始/ 的/ 和/ 新/ 推导/ 出/ 的/ 三元组/ )/ ,/ 为了/ 对/ 两者/ 进行/ 区分/ 以便/ 后续/ 的/ 消重/ 处理/ ,/ YARM/ 使用/ (/ s/ ,/ p/ ,/ o/ )/ 三元组/ 作为/ 键/ ,/ 使用/ 标志/ 作为/ 值来/ 识别/ 三元组/ 的/ 类型/ ./ 算法/ 2/ ./ Map/ 阶段/ 的/ 规则/ 推理/ 算法/ ./ 输入/ :/ key/ 为/ 实例/ 三元组/ ;/ value/ 为空/ (/ null/ )/ 输出/ :/ key/ 为/ 输出/ 三元组/ ;/ value/ 表示/ key/ 是否/ 为原/ 实例/ map/ (/ key/ ,/ value/ )/ T/ =/ {/ key/ }/ ;/ // // T/ 存放/ 各步/ 的/ 推理/ 结果/ ,/ 初始化/ 为/ 原始/ 三/ IFkey/ ./ predicate/ =/ =/ “/ rdf/ :/ type/ ”/ orsubprop/ ./ containsemit/ (/ key/ ,/ original/ _/ flag/ )/ ;/ // // 原始数据/ 的/ 过滤/ ENDIFFOR/ (/ rule/ :/ RDFSrules/ )/ FOR/ (/ t/ :/ T/ )/ IFt/ ./ match/ (/ rule/ )/ applyruletot/ ;/ addderivedtripletoT/ ;/ ENDIFENDFORENDFORT/ ./ delete/ (/ key/ )/ ;/ FOR/ (/ t/ :/ T/ )/ emit/ (/ t/ ,/ derived/ _/ flag/ )/ ;/ ENDFOR5/ ./ 4/ 合并/ 阶段/ 的/ 去/ 重/ 处理/ 合并/ 阶段/ 的/ 任务/ 是/ 收集/ 所有/ 新/ 推导/ 出/ 的/ 三元组/ ,/ 同时/ 对/ RDFS/ 推理/ 中/ 存在/ 的/ 重复/ 数据/ 进行/ 处理/ ,/ 该/ 阶段/ 使用/ Reduce/ 和/ Combine/ 来/ 实现/ ./ Page9Combine/ 先对/ 本地/ 的/ 重复/ 数据/ 进行/ 处理/ ,/ 以/ 减少/ 数据传输/ 量/ ;/ Reduce/ 确保/ 推理/ 结果/ 中/ 没有/ 重复/ 推理/ 结果/ ./ 如/ 算法/ 3/ 和/ 4/ 所示/ :/ 因为/ 同一/ 键值/ 的/ 元组/ 会/ 被/ Hadoop/ 自动/ 组织/ 在/ 一起/ ,/ 所以/ combine/ (/ )/ 和/ reduce/ (/ )/ 只/ 需要/ 判断/ 该/ 元组/ 对应/ 的/ 数据/ 集中/ 是否/ 存在/ 原始/ 三元组/ ,/ 若/ 存在/ 则/ 直接/ 丢弃/ ,/ 否则/ 对/ 每个/ 三元组/ 输出/ 唯一/ 一份/ ./ 算法/ 3/ ./ Combiner/ 类/ ./ 输入/ :/ 算法/ 2/ 中/ map/ 函数/ 的/ 输出/ 结果/ 输出/ :/ key/ 为/ 推理/ 结果/ 三元组/ ;/ value/ 表示/ 输出/ 的/ key/ 是/ combine/ (/ key/ ,/ valueList/ )/ IFvalueList/ ./ contains/ (/ original/ _/ flag/ )/ emit/ (/ key/ ,/ original/ _/ flag/ )/ ;/ ELSEemit/ (/ key/ ,/ derived/ _/ flag/ )/ ;/ ENDIF/ 算法/ 4/ ./ Reducer/ 类/ ./ reduce/ (/ key/ ,/ valueList/ )/ 输入/ :/ 算法/ 2/ 和/ 算法/ 3/ 的/ 输出/ 结果/ 输出/ :/ key/ 为/ 推理/ 结果/ 三元组/ ;/ value/ 为空/ IF/ !/ valueList/ ./ contains/ (/ original/ _/ flag/ )/ emit/ (/ key/ ,/ null/ )/ ;/ ENDIF6/ 实验/ 6.1/ 实验/ 环境/ 与/ 设置/ 我们/ 从/ 执行/ 效率/ 、/ 数据/ 扩展性/ 和/ 机器/ 可扩展性/ 三个/ 方面/ 分别/ 评估/ YARM/ 的/ 性能/ ./ 实验/ 过程/ 中/ ,/ 我们/ 采用/ reasoning/ -/ hadoop/ [/ 6/ ]/ 与/ YARM/ 进行/ 对比/ ,/ 据/ 我们/ 所知/ ,/ reasoning/ -/ hadoop/ 是/ 目前/ 最快/ 的/ 并/ 具有/ 高/ 可扩展性/ 的/ 大规模/ RDF/ 数据/ 推理/ 引擎/ ,/ 通过/ 与/ reasoning/ -/ hadoop/ 做/ 比较/ ,/ 可/ 间接/ 地/ 取得/ 与/ 其他/ 方法/ 比较/ 的/ 结果/ ./ 我们/ 采用/ 的/ 实验/ 集群/ 由/ 1/ 个/ 主控制/ 节点/ (/ Job/ -/ Tracker/ )/ 和/ 16/ 个/ 计算/ 节点/ (/ TaskTracker/ )/ 组成/ ,/ 集群/ 的/ 节点/ 配置/ 参见/ 表/ 3/ ./ NetworkBandwidthJVMVersionHadoopVersion/ 实验/ 所用/ 数据/ 集/ 选用/ 了/ 一个/ 合成/ 的/ 数据/ 集/ LUBM/ (/ LehighUniversityBenchmark/ )/ [/ 27/ ]/ 大学/ 语义/ 数据/ ,/ 两个/ 真实/ 的/ 数据/ 集/ WordNet/ [/ 28/ ]/ 电子词典/ 语义/ 数据/ 以及/ DBpedia/ 数据/ 集/ [/ 29/ ]/ ./ 所有/ 数据/ 经/ 编码/ 压缩/ 后以/ HadoopSequenceFile/ 文件格式/ 存储/ 在/ HDFS/ 中/ ,/ 默认/ 的/ 分块/ 大小/ 为/ 64MB/ ,/ 均匀/ 地/ 分布/ 在/ 集群/ 内/ 的/ 各/ 计算/ 节点/ 上/ ./ LUBM/ 数据/ 集是/ 当前/ 公认/ 的/ 面向/ 大规模/ 本体/ 应用环境/ 的/ 语义/ Web/ 知识库/ 系统/ 测试/ 基准/ ./ 实验/ 中/ 利用/ 拟合/ 工具/ 生成/ 了/ 5/ 组/ 规模/ 的/ 测试数据/ :/ LUBM/ -/ 100/ 、/ LUBM/ -/ 250/ 、/ LUBM/ -/ 500/ 、/ LUBM/ -/ 750/ 和/ LUBM/ -/ 1000/ ,/ 分别/ 含有/ 100/ 、/ 250/ 、/ 500/ 、/ 750/ 和/ 1000/ 个/ 大学/ 的/ 语义/ 数据/ ,/ 三元组/ 规模/ 分别/ 为/ 13million/ 、/ 33million/ 、/ 66million/ 、/ 100million/ 和/ 133million/ ./ WordNet/ 是/ 一个/ 真实/ 的/ 语义/ 数据/ 集/ ,/ 是/ 美国普林斯顿大学/ 认知科学/ 实验室/ 于/ 1985/ 年/ 起/ 开发/ 的/ 大型/ 英文/ 词汇/ 数据库/ ,/ 在/ WordNet/ 中/ 词语/ 按照/ 语义/ 来/ 组织/ ,/ 共/ 含有/ 1942887/ 条/ 三元组/ ./ DBpedia/ 是/ 一个/ 被/ 广泛/ 使用/ 的/ RDF/ 数据/ 集/ ,/ 数据/ 是从/ 维基百科/ 网页/ 中/ 抽取/ 出/ 的/ 结构化/ 信息/ ,/ 包含/ 了/ 众多/ 领域/ 的/ 实体/ 信息/ ,/ 被/ 广泛/ 用作/ RDF/ 数据/ 查询/ 的/ 一个/ 标准/ 数据/ 集/ ./ 实验/ 中/ 选用/ 了/ 4/ 组/ 不同/ 大小/ 的/ DBpedia/ 数据/ 集/ :/ DBpedia/ -/ 1/ (/ 35milliontriples/ )/ ,/ DBpedia/ -/ 2/ (/ 85milliontriples/ )/ ,/ DBpedia/ -/ 3/ (/ 140milliontriples/ )/ 和/ DBpedia/ -/ 4/ (/ 210milliontriples/ )/ ./ 6.2/ 执行/ 性能/ 测试/ 我们/ 对/ 10/ 组/ 数据/ (/ 5/ 组/ LUBM/ 数据/ ,/ 1/ 组/ Word/ -/ Net/ 以及/ 4/ 组/ DBpedia/ 数据/ )/ 分别/ 在/ reasoning/ -/ hadoop/ 和/ YARM/ 下/ 做/ 了/ 5/ 趟/ 测试/ ,/ 最后/ 取/ 平均/ 运行/ 时间/ ,/ 实验/ 结果/ 如表/ 4/ 所示/ ./ 数据/ 集/ TripleLUBM/ -/ 10013.0630/ ./ 06646.54713/ ./ 5LUBM/ -/ 25033.0742/ ./ 16454.48613/ ./ 6LUBM/ -/ 50066.0834/ ./ 11458.51214/ ./ 2LUBM/ -/ 750100.0911/ ./ 10664.76014/ ./ 0LUBM/ -/ 1000133.0964/ ./ 14372.73213/ ./ 2WordNet1/ ./ 9373.54870/ ./ 7185.3/ DBpedia/ -/ 135.0146/ ./ 65122.5486/ ./ 5DBpedia/ -/ 285.0383/ ./ 29533.63911/ ./ 4DBpedia/ -/ 3140.0662/ ./ 13140.64216/ ./ 3DBpedia/ -/ 4210.0734/ ./ 42443.64616/ ./ 8/ 由/ 实验/ 结果/ 可见/ ,/ 与/ reasoning/ -/ hadoop/ 相比/ ,/ YARM/ 在/ 执行/ 时间/ 上要/ 快/ 10/ 倍/ 左右/ ./ 此外/ ,/ 虽然/ WordNet/ 的/ 数据/ 集/ 规模/ 小于/ LUBM/ -/ 100/ ,/ 但是/ YARM/ 在/ WordNet/ 上/ 的/ 推理/ 时间/ 大于/ 在/ LUBM/ -/ Page10100/ 上/ 的/ 推理/ 时间/ ,/ 这/ 是因为/ WordNet/ 的/ 推理/ 复杂性/ 要/ 远远/ 大于/ LUBM/ ,/ 实验/ 结果/ 说明/ 影响/ YARM/ 执行/ 效率/ 的/ 是/ 推理/ 复杂性/ ,/ 影响/ reasonging/ -/ hadoop/ 的/ 因素/ 则/ 侧重于/ 数据/ 集/ 规模/ ./ 因此/ 在/ 大规模/ RDF/ 推理/ 任务/ 中/ ,/ YARM/ 比/ reasoning/ -/ hadoop/ 具有/ 更好/ 的/ 性能/ ./ 6.3/ 数据/ 可扩展性/ 测试/ 为了/ 观测/ 数据/ 规模/ 增长/ 时/ YARM/ 实际/ 运行/ 时间/ 的/ 变化/ 情况/ ,/ 并且/ 尽量避免/ 因/ 采用/ 复杂性/ 不同/ 的/ 数据/ 集对/ 结果/ 造成/ 的/ 影响/ ,/ 我们/ 选用/ 复杂性/ 相同/ 但/ 大小/ 不同/ 的/ 5/ 组/ LUBM/ 和/ 4/ 组/ DBpedia/ 数据/ 集/ 进行/ 测试/ ./ LUBM/ 的/ 规模/ 从/ 100/ 个/ 大学/ 增加/ 到/ 1000/ 个/ ,/ 每个/ 规模/ 级别/ 下/ 分别/ 作/ 5/ 趟/ 测试/ ,/ 最后/ 取/ 平均/ 运行/ 时间/ ./ DBpedia/ 选用/ 了/ 不同/ 大小/ 的/ 4/ 组/ 数据/ :/ 分别/ 为/ 35M/ 条/ 记录/ 、/ 85M/ 条/ 记录/ 、/ 140M/ 条/ 记录/ 和/ 210M/ 条/ 记录/ ,/ 每组/ 数据/ 下/ 也/ 分别/ 做/ 5/ 趟/ 测试/ ,/ 最后/ 取/ 平均/ 运行/ 时间/ ./ 实验/ 结果/ 见图/ 6/ 和/ 图/ 7/ ,/ 图中/ 纵坐标/ 为/ 执行/ 时间/ ,/ 横坐标/ 为/ 数据/ 规模/ ./ 可见/ ,/ 随着/ 数据/ 规模/ 的/ 增长/ ,/ YARM/ 推理/ 时间/ 呈现出/ 近似于/ 线性/ 增长/ 的/ 趋势/ ,/ 与/ reasoning/ -/ hadoop/ 相比/ ,/ YARM/ 具备/ 了/ 更/ 理想/ 的/ 数据/ 可扩展性/ ./ 6.4/ 系统/ 可扩展性/ 测试/ 为了/ 观察/ 集群/ 规模/ 增大/ 时/ ,/ YARM/ 的/ 性能/ 变化/ 情况/ ,/ 我们/ 还/ 进行/ 了/ 系统/ 可扩展性/ 实验/ ./ 实验/ 中/ 采用/ 了/ LUBM/ -/ 1000/ 数据/ 集/ ,/ 集群/ 计算/ 节点/ 规模/ 从/ 1/ 个/ 节点/ 增长/ 到/ 16/ 个/ 节点/ ./ 实验/ 结果/ 数据处理/ 后/ 如图/ 8/ 所示/ ./ 图/ 8/ 显示/ 了/ 计算/ 节点/ 数目/ 变化/ 时/ YARM/ 的/ 运行/ 性能/ 变化/ 曲线/ ./ 其中/ 横坐标/ 为/ 集群/ 内/ 计算/ 节点/ 数目/ ,/ 纵坐标/ 为/ 执行/ 时间/ ./ 由图/ 中/ 曲线/ 可见/ ,/ YARM/ 运行/ 时间/ 在/ 小于/ 8/ 个/ 结点/ 时随/ 集群/ 内/ 节点/ 数目/ 的/ 增加/ 呈/ 接近/ 于/ 线性/ 的/ 下降/ ,/ 但/ 超过/ 8/ 个/ 节点/ 后/ 则/ 下降/ 趋于/ 平缓/ 并/ 接近/ 于/ 一个/ 下限/ ,/ 这个/ 下限/ 取决于/ 一个/ 数据/ 块/ 由/ 单个/ 处理器/ 处理/ 所/ 需/ 的/ 计算/ 时间/ 加上/ 整个/ 算法/ 并行/ 化/ 的/ 额外/ 开销/ ./ 另外/ ,/ 我们/ 计算/ 了/ 算法/ 的/ 相对/ 加速/ 比/ 和/ 计算/ 效率/ ./ 相对/ 加速/ 比即/ 同一/ 算法/ 在/ 单个/ 处理器/ 上/ 运行/ 的/ 时间/ 除以/ 在/ 多个/ 处理器/ 上/ 运行/ 的/ 时间/ ,/ 计算/ 效率/ 是/ 指/ 加速/ 比/ 和/ 处理器/ 数目/ 的/ 比值/ ./ 我们/ 发现/ 随着/ 集群/ 中/ 节点/ 数目/ 的/ 增加/ ,/ YARM/ 加速/ 比/ 快速/ 上升/ ./ 与/ reasoning/ -/ hadoop/ 相比/ ,/ 加速/ 比/ 上升/ 得/ 更/ 快/ ,/ 到达/ 极限/ 的/ 速度/ 更慢/ ./ 本/ 实验/ 中/ 加速/ 比/ 相对/ 的/ 执行/ 时间/ 基础/ 是/ YARM/ 在/ 与/ 集群/ 内/ 计算/ 节点/ 配置/ 相同/ 的/ 单/ 节点/ 环境/ 下/ ,/ 以/ local/ 模式/ 运行/ 的/ Hadoop/ 上/ 的/ 运行/ 时间/ ./ 图/ 6LUBM/ 数据/ 规模/ 变化/ 时/ 运行/ 时间/ 对比/ 图图/ 7DBPedia/ 数据/ 规模/ 变化/ 时/ 运行/ 时间/ 对比/ 图/ 计算/ 效率/ 定义/ 为/ 加速/ 比/ 和/ 处理器/ 数目/ 的/ 比值/ ,/ 计算/ 效率/ 反应/ 了/ 集群/ 系统/ 中/ 计算资源/ 的/ 利用率/ 的/ 高低/ ./ 在/ 计算/ 量/ 确定/ 的/ 前提/ 下/ ,/ 随着/ 并行计算/ 系统/ 规模/ 的/ 增长/ ,/ 计算/ 效率/ 会/ 有所/ 下降/ ./ 经/ 计算/ 发现/ ,/ 与/ reasonong/ -/ hadoop/ 相比/ ,/ YARM/ 的/ 计算/ 效率/ 曲线/ 下降/ 的/ 更/ 平缓/ ./ 总的说来/ ,/ 从图/ 8/ 以及/ 相应/ 的/ 计算结果/ 可以/ 发现/ ,/ 随着/ 处理器/ 数目/ 的/ 增长/ ,/ YARM/ 运行/ 时间/ 的/ 下降/ 和/ 加速/ 比/ 的/ 上升/ 都/ 十分/ 显著/ ,/ 并行执行/ 的/ 效果/ 较/ Page11/ 好/ ./ 同时/ ,/ 随着/ 处理器/ 规模/ 的/ 增大/ ,/ YARM/ 计算/ 效率/ 下降/ 的/ 趋势/ 也/ 是/ 比较/ 缓慢/ 的/ ,/ 即/ 算法/ 有/ 比较/ 好/ 的/ 可扩展性/ ./ 7/ 总结/ 为了/ 实现/ 大规模/ RDF/ 数据/ 的/ 推理/ 计算/ ,/ 本文/ 设计/ 和/ 实现/ 了/ 一种/ 基于/ MapReduce/ 的/ 高效/ 并行/ 化/ 推理/ 执行/ 引擎/ YARM/ ./ 它/ 将/ 整个/ RDF/ 图/ 的/ 推理/ 分解成/ 多个/ 相互/ 独立/ 的/ 更/ 小规模/ 的/ 推理/ 任务/ ,/ 增加/ 了/ 任务/ 执行/ 的/ 并行度/ ,/ 使得/ RDFS/ 推理/ 在/ 一次/ MapReduce/ 作业/ 之内/ 即可/ 完成/ ./ 同时/ ,/ 对/ 单个/ 节点/ 上/ 的/ 本地/ 数据/ 使用/ 优化/ 的/ 推理/ 执行/ 机制/ ./ 实验/ 结果表明/ ,/ YARM/ 的/ 计算速度/ 比/ 当前/ 最快/ 的/ 基于/ MapReduce/ 的/ 并行/ 推理/ 引擎/ (/ reasoning/ -/ hadoop/ )/ 高出/ 10/ 倍/ 左右/ ,/ 同时/ YARM/ 也/ 具备/ 了/ 良好/ 的/ 可扩展性/ ./ 在/ 未来/ 的/ 工作/ 中/ ,/ 我们/ 将/ 继续/ 对/ YARM/ 进行/ 改进/ ./ 我们/ 将/ 进一步/ 研究/ 高效/ 的/ 分布式/ OWL/ 推理/ 引擎/ ./ 另外/ ,/ 我们/ 还拟/ 研究/ 如何/ 利用/ 基于/ 内存/ 的/ 分布式计算/ 平台/ 来/ 设计/ 和/ 实现/ RDFS/ 及/ OWL/ 推理/ 算法/ 和/ 系统/ ./ 致谢/ 感谢/ 审稿人/ 提出/ 的/ 宝贵意见/ 及/ 王善/ 永/ 同学/ 对/ 论文/ 终稿/ 进行/ 的/ 格式/ 校验/ !/ 

