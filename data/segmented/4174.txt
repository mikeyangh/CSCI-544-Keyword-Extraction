Page1/ 基于/ 多/ 类/ 特征/ 的/ Android/ 应用/ 恶意/ 行为/ 检测/ 系统/ 杨欢/ 1/ )/ 张玉清/ 1/ )/ ,/ 2/ )/ 胡予/ 濮/ 1/ )/ 刘奇旭/ 2/ )/ 1/ )/ (/ 西安电子科技大学/ 综合/ 业务网/ 理论/ 及/ 关键技术/ 国家/ 重点/ 实验室/ 西安/ 710071/ )/ 2/ )/ (/ 中国科学院/ 大学/ 国家/ 计算机网络/ 入侵/ 防范/ 中心/ 北京/ 100190/ )/ 摘要/ 目前/ 针对/ 未知/ 的/ Android/ 恶意/ 应用/ 可以/ 采用/ 数据挖掘/ 算法/ 进行/ 检测/ ,/ 但/ 使用/ 单一/ 数据挖掘/ 算法/ 无法/ 充分发挥/ Android/ 应用/ 的/ 多类/ 行为/ 特征/ 在/ 恶意代码/ 检测/ 上/ 所/ 起/ 的/ 不同/ 作用/ ./ 文中/ 首次/ 提出/ 了/ 一种/ 综合/ 考虑/ Android/ 多类/ 行为/ 特征/ 的/ 三层/ 混合/ 系综/ 算法/ THEA/ (/ TripleHybridEnsembleAlgorithm/ )/ 用于/ 检测/ Android/ 未知/ 恶意/ 应用/ ./ 首先/ ,/ 采用/ 动/ 静态/ 结合/ 的/ 方法/ 提取/ 可以/ 反映/ Android/ 应用/ 恶意/ 行为/ 的/ 组件/ 、/ 函数调用/ 以及/ 系统/ 调用/ 类/ 特征/ ;/ 然后/ ,/ 针对/ 上述/ 3/ 类/ 特征/ 设计/ 了/ 三层/ 混合/ 系综/ 算法/ THEA/ ,/ 该/ 算法/ 通过/ 构建/ 适合/ 3/ 类/ 特征/ 的/ 最优/ 分类器/ 来/ 综合/ 评判/ Android/ 应用/ 的/ 恶意/ 行为/ ;/ 最后/ ,/ 基于/ THEA/ 实现/ 了/ Android/ 应用/ 恶意/ 行为/ 检测工具/ Androdect/ ,/ 并/ 对/ 现实/ 中/ 的/ 1126/ 个/ 恶意/ 应用/ 和/ 2000/ 个/ 非/ 恶意/ 应用/ 进行/ 检测/ ./ 实验/ 结果表明/ ,/ Androdect/ 能够/ 利用/ Android/ 应用/ 的/ 多类/ 行为/ 特征/ 有效/ 检测/ Android/ 未知/ 恶意/ 应用/ ./ 并且/ 与/ 其它/ 相关/ 工作/ 对比/ ,/ Androdect/ 在/ 检测/ 准确率/ 和/ 执行/ 效率/ 上/ 表现/ 更优/ ./ 关键词/ 系综/ 算法/ ;/ Android/ 应用/ ;/ 多/ 类/ 特征/ ;/ 恶意代码/ 检测/ ;/ 行为/ 分析/ ;/ 数据挖掘/ ;/ 智能手机/ ;/ 网络/ 行为/ 1/ 引言/ 近年来/ ,/ 智能手机/ 普及率/ 迅速/ 增加/ ,/ 智能手机/ 应用/ 功能/ 激增/ ./ 全球/ 最具/ 权威/ 的/ IT/ 研究/ 与/ 顾问/ 咨询/ 公司/ Gartner/ 的/ 数据/ 显示/ ①/ ,/ 预期/ 到/ 2016/ 年/ 年底/ ,/ 将/ 有/ 23/ 亿部/ 电脑/ 、/ 平板/ 电脑/ 以及/ 智能手机/ 使用/ Android/ 系统/ ,/ 而/ 微软/ Windows/ 设备/ 的/ 数量/ 为/ 22.8/ 亿/ ./ Android/ 近年来/ 的/ 快速/ 发展/ 使/ 其/ 成为/ 了/ 一个/ 占/ 主导地位/ 的/ 智能手机/ 平台/ ,/ 拥有/ 整个/ 市场/ 约/ 三分之二/ 的/ 份额/ ./ 由于/ Android/ 系统/ 的/ 开放性/ ,/ 它/ 也/ 成为/ 了/ 众多/ 恶意代码/ 开发者/ 的/ 活跃/ 地盘/ ./ Android/ 用户/ 可以/ 从/ GooglePlay/ ②/ 和/ 第三方/ Android/ 市场/ (/ 例如/ :/ Amazon/ 、/ hiapk/ 、/ gfan/ 等/ )/ 下载/ 应用程序/ ./ 应用程序/ 开发者/ 可以/ 上传/ 自己/ 的/ 应用程序/ 到/ 第三方/ Android/ 市场/ ./ GooglePlay/ (/ 前/ 名为/ AndroidMarket/ )/ ,/ 是/ 一个/ 由/ Google/ 为/ Android/ 设备/ 开发/ 的/ 在线/ 应用程序/ 商店/ ,/ 可以/ 让/ 用户/ 浏览/ 、/ 下载/ 及/ 购买/ GooglePlay/ 上/ 的/ 第三方/ 应用程序/ ③/ ./ GooglePlay/ 提供/ 了/ Google/ ’/ sBouncer/ 检测/ 恶意程序/ ,/ 但是/ 实时性/ 不够/ ,/ 恶意程序/ 在/ 被/ 检测/ 出来/ 之前/ 已经/ 被/ 用户/ 大量/ 下载/ [/ 1/ ]/ ./ 根据/ 独立/ 安全/ 机构/ Av/ -/ test/ 在/ 2013/ 年/ 1/ 月/ 使用/ ESET/ 、/ Lookout/ :/ Antivirus/ &/ Security/ 、/ Kaspersky/ 、/ Qihoo360/ 等/ 22/ 个/ 手机/ 杀毒软件/ 对/ 869/ 个/ 已知/ Android/ 恶意/ 应用/ 的/ 检测/ 报告/ 显示/ ④/ ,/ 各大/ 手机/ 杀毒软件/ 的/ 平均/ 查杀/ 率为/ 94/ %/ ./ 而/ 对于/ 未知/ 恶意/ 应用/ 的/ 检测/ ,/ 各大/ 厂商/ 没有/ 公开/ 杀毒软件/ 的/ 技术细节/ ,/ 本文/ 无法/ 做/ 详细分析/ ./ 由于/ 恶意代码/ 的/ 数量/ 和/ 种类/ 越来越/ 多/ ,/ 加上/ 代码/ 混淆/ 、/ 加密/ 等/ 技术/ 的/ 兴起/ ,/ 使得/ 恶意代码/ 检测/ 变得/ 越来越/ 困难/ ./ 目前/ ,/ 典型/ 的/ 恶意代码/ 检测/ 技术/ 包括/ 基于/ 签名/ 、/ 行为/ 的/ 检测/ 方法/ ./ 传统/ 的/ 基于/ 签名/ 的/ 检测/ 技术/ 被/ 普遍/ 使用/ ,/ 但是/ 它/ 必须/ 拥有/ 一类/ 恶意/ 应用/ 的/ 签名/ 库后/ 才能/ 检测/ 该类/ 恶意/ 应用/ ,/ 因此/ 无法/ 有效/ 检测/ 未知/ 的/ 恶意/ 应用/ ./ 基于/ 行为/ 的/ 恶意代码/ 检测/ 目前/ 主要/ 采用/ 动态/ 和/ 静态/ 两种/ 方法/ ./ 动态/ 方法/ 是/ 在/ 系统/ 运行/ 过程/ 中/ 收集/ 应用程序/ 的/ 一些/ 行为/ 信息/ ./ 优点/ 是/ 绕过/ 了/ 静态方法/ 遇到/ 的/ 代码/ 混淆/ 和/ 加密/ 等/ 方面/ 的/ 问题/ ,/ 缺点/ 是/ 动态/ 测试代码/ 覆盖率/ 低/ ,/ 并且/ 有些/ 恶意程序/ 可以/ 防止/ 自身/ 在/ 模拟器/ 下/ 运行/ ,/ 当/ 在/ 模拟器/ 下/ 运行/ 时会/ 自动/ 崩溃/ ;/ 静态方法/ 主要/ 研究/ 使用/ 反汇编/ 反编译/ 技术/ 或者/ 在/ smali/ 中间代码/ 上/ 进行/ 控制流/ 和/ 数据流/ 分析/ 技术/ 来/ 进行/ 恶意代码/ 检测/ ./ 优点/ 是/ 代码/ 覆盖率/ 高/ ,/ 缺点/ 是/ 要/ 解决/ 静态方法/ 无法/ 检测/ 的/ 代码/ 混淆/ 、/ 加密/ 以及/ 在/ 动态/ 执行/ 中才/ 解码/ 恶意代码/ 的/ 问题/ ./ 由于/ 数据挖掘/ 技术/ 可以/ 从/ 大量/ 数据/ 中/ 挖掘出/ 有/ 意义/ 的/ 信息/ [/ 2/ -/ 4/ ]/ ,/ 有些/ 研究者/ 利用/ 该/ 技术/ 挖掘出/ 恶意/ 应用/ 的/ 行为/ 特征/ ,/ 以此/ 来/ 检测/ 未知/ 恶意/ 应用/ ./ 但是/ ,/ 目前/ 的/ 研究/ 方法/ 存在/ 3/ 方面/ 的/ 局限性/ :/ (/ 1/ )/ 不同/ 的/ 数据挖掘/ 算法/ 针对/ 同/ 一类/ 特征/ 的/ 检测/ 效果/ 不同/ ,/ 无法/ 预知/ 哪个/ 算法/ 效果/ 最优/ ;/ (/ 2/ )/ 同/ 一种/ 算法/ 对/ 不同/ 类型/ 的/ 特征/ 检测/ 效果/ 不/ 一定/ 都/ 是/ 最优/ ;/ (/ 3/ )/ 使用/ 单一/ 的/ 算法/ 不能/ 充分发挥/ 每/ 类/ 特征/ 在/ Android/ 恶意/ 应用/ 检测/ 时所起/ 的/ 不同/ 作用/ ./ 本文/ 针对/ 以上/ 方法/ 的/ 局限性/ ,/ 首次/ 提出/ 一种/ 基于/ 三层/ 混合/ 系综/ 算法/ 的/ 多类/ 特征/ Android/ 应用/ 恶意/ 行为/ 检测/ 系统/ ,/ 自动检测/ Android/ 平台/ 的/ 恶意/ 应用程序/ ./ 该/ 系统/ 采用/ 动/ 静态/ 结合/ 的/ 行为/ 特征提取/ 方法/ ,/ 提取/ Android/ 应用/ 的/ 多类/ 行为/ 特征/ ,/ 再/ 采用/ 三层/ 混合/ 系综/ 算法/ 建立/ 检测/ 模型/ ,/ 并/ 对/ 大量/ 现实/ 中/ 的/ 应用程序/ 进行/ 检测/ ./ 具体方法/ 介绍/ 如下/ :/ 首先/ ,/ 本文/ 创建/ 恶意/ 应用/ 库/ 和/ 非/ 恶意/ 应用/ 库/ ./ 恶意/ 应用/ 库/ 的/ 创建/ 参考文献/ [/ 5/ ]/ 中/ 所/ 使用/ 的/ 部分/ 恶意/ 应用/ ./ 非/ 恶意/ 应用/ 库/ 的/ 创建/ 是/ 通过/ 修改/ Akdeniz/ ⑤/ 的/ 爬虫/ 程序/ 从/ GooglePlay/ 上/ 批量/ 下载/ 应用程序/ ,/ 并/ 使用/ 多种/ 已有/ 检测/ 软件/ 、/ 杀毒软件/ 和/ 人工/ 进行/ 检测/ ,/ 确保/ 数据库/ 的/ 准确性/ ./ 其次/ ,/ 在/ 特征提取/ 阶段/ ,/ 本文/ 采用/ 动/ 静态/ 结合/ 的/ 分析/ 技术/ ./ 静态/ 分析/ 主要/ 对/ AndroidManifest/ ./ xml/ 文件/ 进行/ 自动化/ 分析/ ./ 一是/ 提取/ packet/ 名称/ 和/ activity/ 名称/ 为/ 动态分析/ 提供/ 参数/ ;/ 二是/ 对/ permission/ 、/ activity/ 、/ service/ 、/ receiver/ 和/ provider/ 组件/ 进行/ 特征提取/ ;/ 三是/ 对/ 使用/ native/ 代码/ 的/ 应用程序/ 中/ 的/ lib/ 库/ 文件/ 进行/ 分析/ ,/ 提取/ 应用程序/ 的/ 函数调用/ 序列/ ./ 动态分析/ 主要/ 采用/ 沙盒/ 技术/ ,/ 自动/ 完成/ 启动/ 模拟器/ 、/ 安装/ 应用程序/ 、/ 模拟/ 用户/ 行为/ 和/ 提取/ 系统/ 调用/ 序列/ 等/ 工作/ ./ 而后/ ,/ 在/ 特征描述/ 阶段/ ,/ 对/ 提取/ 的/ 多类/ 特征/ 进行/ ①/ ②/ ③/ ④/ ⑤/ Page3/ 格式化/ 处理/ ,/ 构建/ 各类/ 特征/ 的/ 集合/ ./ 一是/ 静态/ 获取/ 的/ 各个/ 组件/ 使用/ 个数/ 的/ 统计数据/ ;/ 二是/ 静态/ 获取/ 的/ 应用程序/ lib/ 文件/ 所/ 使用/ 的/ 重要/ 函数调用/ 的/ 统计数据/ ;/ 三是/ 动态/ 获取/ 的/ 各个系统/ 调用/ 使用/ 次数/ 的/ 统计数据/ ./ 最后/ ,/ 使用/ 三层/ 混合/ 系综/ 算法/ 建立/ 检测/ 模型/ ./ 第一层/ 使用/ 多个/ 基础/ 分类器/ 对/ 3/ 种/ 不同/ 类型/ 特征/ 进行/ 训练/ ,/ 给出/ 适合/ 不同/ 类型/ 特征/ 的/ 最优/ 算法/ ;/ 第二层/ 将/ 系综/ 算法/ 与/ 最优/ 分类/ 算法/ 结合/ 再次/ 进行/ 训练/ 建立/ 模型/ ,/ 进一步提高/ 检测/ 准确率/ ;/ 第三层/ 对待/ 检测/ 的/ 应用程序/ 使用/ 建立/ 的/ 模型/ 进行/ 分类/ 并/ 使用/ 判决/ 算法/ 给出/ 检测/ 结果/ ./ 本/ 方法/ 通过/ 实验/ 对/ 1126/ 个/ 恶意/ 应用/ 和/ 2000/ 个/ 非/ 恶意/ 应用/ 进行/ 了/ 检测/ ./ 实验/ 结果表明/ ,/ 本文/ 提出/ 的/ 方法/ 在/ 有效性/ 、/ 准确性/ 和/ 执行/ 效率/ 上/ 表现/ 良好/ ,/ 准确率/ 为/ 94.24/ %/ ,/ 优于/ 其它/ Android/ 恶意/ 应用/ 检测/ 系统/ ./ 本文/ 的/ 主要/ 创新/ 点/ 与/ 贡献/ 如下/ :/ (/ 1/ )/ 采用/ 动/ 静态/ 结合/ 的/ 行为/ 特征提取/ 方法/ ,/ 动态/ 方法/ 弥补/ 了/ 静态方法/ 不能/ 检测/ 运行/ 中/ 释放/ 的/ 恶意代码/ 的/ 缺点/ ,/ 也/ 绕过/ 了/ 静态方法/ 遇到/ 的/ 代码/ 加密/ 和/ 混淆/ 问题/ ;/ 静态方法/ 为/ 动态/ 方法/ 提供/ 了/ 运行/ 参数/ ,/ 可以/ 分析/ 动态/ 方法/ 无法/ 处理/ 的/ 应用程序/ ./ (/ 2/ )/ 本文/ 设计/ 的/ 检测/ 系统/ 提取/ 了/ 应用程序/ 的/ 多类/ 行为/ 特征/ ,/ 充分反映/ 了/ 应用程序/ 行为/ ,/ 并且/ 该/ 系统/ 具有/ 可扩展性/ ,/ 可以/ 加入/ 更/ 多/ 类型/ 特征/ 进行/ 检测/ ./ (/ 3/ )/ 首次/ 提出/ 了/ 一种/ 三层/ 混合/ 系综/ 算法/ THEA/ (/ TripleHybridEnsembleAlgorithm/ )/ ,/ 对/ 各类/ 特征/ 分别/ 选取/ 最优/ 的/ 基础/ 分类/ 算法/ 从而/ 给出/ 综合/ 判决/ 结果/ ./ 并/ 首次/ 将/ 其/ 应用/ 到/ Android/ 应用/ 的/ 恶意代码/ 检测/ ,/ 实验/ 证明/ 了/ 该/ 算法/ 的/ 有效性/ ./ (/ 4/ )/ 将/ 提出/ 的/ 原型/ 系统/ 实现/ 了/ 自动化/ 的/ 检测工具/ Androdect/ ,/ 对/ 大量/ 现实/ 中/ 的/ 恶意/ 应用/ 和/ 非/ 恶意/ 应用/ 进行/ 检测/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 工作/ ;/ 第/ 3/ 节/ 总体/ 介绍/ 检测/ 系统/ ;/ 第/ 4/ 节/ 阐述/ 系统/ 的/ 关键技术/ 和/ 算法/ ;/ 第/ 5/ 节/ 给出/ 实验设计/ 与/ 结果/ 分析/ ;/ 第/ 6/ 节/ 讨论/ 本文/ 提出/ 系统/ 的/ 局限性/ 和/ 下/ 一步/ 工作/ ;/ 最后/ 在/ 第/ 7/ 节对/ 本文/ 进行/ 总结/ ./ 2/ 相关/ 工作/ 随着/ 智能手机/ 的/ 广泛应用/ ,/ 发布/ 手机/ 应用程序/ 的/ 官方/ 市场/ 和/ 第三方/ 市场/ 上/ 都/ 出现/ 了/ 含有/ 恶意代码/ 的/ 应用程序/ ,/ 使得/ 智能手机/ 应用程序/ 的/ 恶意代码/ 检测/ 成为/ 了/ 研究/ 热点/ ./ 由于/ Android/ 系统/ 占有/ 大量/ 的/ 市场份额/ 以及/ 其/ 平台/ 的/ 开放性/ ,/ 手机/ 平台/ 恶意代码/ 检测/ 研究/ 更多地/ 集中/ 在/ Android/ 系统/ 平台/ ./ 目前/ ,/ 国内外/ 典型/ 的/ Android/ 平台/ 恶意代码/ 检测/ 技术/ 主要/ 有/ 基于/ 签名/ 和/ 基于/ 行为/ 的/ 检测/ 方法/ ./ 首先/ 出现/ 的/ 是/ 基于/ 签名/ 的/ 方法/ ./ 文献/ [/ 6/ ]/ 重点/ 介绍/ 了/ 基于/ 特征/ 码/ 的/ 恶意代码/ 检测/ 方法/ ./ 国外/ 著名/ 的/ Android/ 恶意代码/ 检测工具/ Androguard/ ①/ 也/ 是/ 基于/ 签名/ 的/ 方法/ ,/ 它/ 的/ 主要/ 缺点/ 是/ 无法/ 检测/ 未知/ 恶意/ 应用/ ./ 随后/ ,/ 由于/ 基于/ 签名/ 的/ 方法/ 无法/ 检测/ 未知/ 恶意/ 应用/ ,/ 研究者/ 开始/ 研究/ 基于/ 行为/ 的/ 恶意代码/ 检测/ 方法/ ./ 文献/ [/ 7/ ]/ 使用/ 动态/ 方法/ 监视/ 手机/ 应用程序/ 的/ 网络/ 行为/ 、/ 短信/ 和/ 隐私/ 等/ 信息/ ./ Blsing/ 等/ 人/ [/ 8/ ]/ 使用/ 动态/ 方法/ 分析/ Android/ 应用/ 的/ 系统/ 调用/ 、/ 网络/ 访问/ 、/ 文件/ 和/ 内存/ 等/ 方面/ 的/ 信息/ ./ Enck/ 等/ 人/ [/ 9/ ]/ 提出/ 了/ 使用/ 动态/ 污染/ 分析/ 变量/ 层/ 、/ 方法/ 层/ 、/ 消息/ 层/ 和/ 文件/ 层/ 的/ 信息/ ,/ 用于/ 检测/ 隐私/ 泄露/ 方面/ 的/ 漏洞/ ./ 路程/ [/ 7/ ]/ 、/ 国外/ 研究者/ Shabtai/ 等/ 人/ [/ 10/ ]/ 以及/ Padriya/ 等/ 人/ [/ 11/ ]/ 研究/ 了/ Android/ 源代码/ 的/ 静态/ 分析/ 技术/ ./ 近年来/ ,/ 也/ 有/ 研究者/ 将/ 数据挖掘/ 技术/ 应用/ 到/ 手机/ 平台/ 恶意代码/ 检测/ ./ 2009/ 年/ ,/ Schmidt/ 等/ 人/ [/ 12/ ]/ 使用/ 静态方法/ 获取/ 函数调用/ 特征/ ,/ 对/ Symbian/ 系统/ 和/ Android/ 系统/ [/ 13/ ]/ 进行/ 基于/ 分类/ 算法/ 的/ 恶意代码/ 检测/ ,/ 由于/ 研究/ 时间/ 比较/ 早/ ,/ 还/ 没有/ 大量/ 真实/ 的/ 恶意/ 样本/ 用来/ 验证/ 结果/ ./ 2011/ 年/ ,/ Iker/ 等/ 人/ [/ 14/ ]/ 使用/ 动态/ 方法/ 提取/ 系统/ 调用/ 特征/ ,/ 应用/ K/ -/ means/ 聚类/ 算法/ 区分/ 基于/ 同一/ 应用程序/ 改写/ 的/ 恶意代码/ 和/ 非/ 恶意代码/ ,/ 该/ 方法/ 只/ 限于/ 检测/ 同一/ 应用程序/ 的/ 不同/ 变种/ 是否/ 包含/ 恶意代码/ ./ 2012/ 年/ ,/ Shabtai/ 等/ 人/ [/ 15/ ]/ 使用/ 动态/ 人工/ 方法/ 提取/ API/ 特征/ 并/ 使用/ 分类/ 算法/ 对/ 自己/ 编写/ 的/ Android/ 恶意代码/ 进行/ 检测/ ,/ 但/ 没有/ 使用/ 现实/ 中/ 的/ 大量/ 应用程序/ 进行/ 验证/ ./ 上述/ 工作/ 从/ 基于/ 签名/ 的/ 检测/ 方法/ 过渡/ 到/ 基于/ 行为/ 的/ 检测/ 方法/ ,/ 从/ 检测/ 已知/ 恶意/ 应用/ 过渡/ 到/ 检测/ 未知/ 恶意/ 应用/ ,/ 在/ 基于/ 数据挖掘/ 算法/ 的/ 研究/ 中/ 大部分/ 是/ 基于/ 处理/ 单一/ 类型/ 特征/ 的/ 数据挖掘/ 算法/ ,/ 然而/ ,/ 实际/ 中/ 需要/ 考虑/ 恶意/ 应用/ 的/ 多类/ 行为/ 特征/ ,/ 目前/ 还/ 没有/ 一种/ 数据挖掘/ 算法/ 可以/ 充分发挥/ 不同/ 类型/ 特征/ 在/ Android/ 恶意代码/ 检测/ 中所起/ 的/ 不同/ 作用/ ./ ①/ Androguard/ [/ EB/ // OL/ ]/ ./ http/ :/ // // code/ ./ google/ ./ com/ // p/ // an/ -/ Page43Androdect/ 检测/ 系统/ 本文/ 提出/ 了/ 一种/ 基于/ 三层/ 混合/ 系综/ 算法/ 的/ 多类/ 特征/ Android/ 恶意/ 行为/ 检测/ 系统/ ,/ 并/ 实现/ 了/ 工具/ Androdect/ ,/ 可以/ 自动化/ 地/ 检测/ 未知/ 恶意/ 应用/ ./ 该/ 系统/ 采用/ 动/ 静态/ 结合/ 的/ 分析/ 技术/ 提取/ Android/ 应用/ 的/ 多类/ 行为/ 特征/ ,/ 并/ 设计/ 了/ 三层/ 混合/ 系综/ 算法/ THEA/ 建立/ 检测/ 模型/ ./ Androdect/ 检测/ 系统/ 框图/ 如图/ 1/ 所示/ ,/ 该/ 系统/ 由/ 6/ 个/ 部分/ 组成/ :/ Apps/ 数据库/ 、/ 预处理/ 模块/ 、/ 特征提取/ 模块/ 、/ 特征/ 集合/ 、/ 格式化/ 处理/ 模块/ 和/ 三层/ 混合/ 系综/ 算法/ 检测/ 模块/ ,/ 具体/ 介绍/ 如下/ :/ (/ 1/ )/ Apps/ 数据库/ ./ 本文/ 创建/ 了/ 恶意/ 应用/ 程序库/ 和/ 非/ 恶意/ 应用/ 程序库/ ./ 恶意/ 应用/ 程序库/ 使用/ 文献/ [/ 5/ ]/ 中/ 提供/ 的/ 部分/ 恶意/ 应用/ ./ 而/ 对于/ 非/ 恶意/ 应用/ 库/ ,/ 由于/ GooglePlay/ 将/ 应用程序/ 下载/ 并/ 直接/ 安装/ 在/ 手机/ 上/ ,/ 这/ 对/ 实验/ 造成/ 不便/ ,/ 因此/ ,/ 本文/ 使用/ Java/ 语言/ 改写/ 了/ Akdeniz/ 的/ 爬虫/ 程序/ ,/ 增加/ 了/ 异常/ 处理/ 、/ 去/ 重/ 、/ 迭代/ 等/ 功能/ ,/ 可以/ 实现/ 从/ GooglePlay/ 上/ 批量/ 不间断/ 下载/ 应用程序/ 到/ PC/ 端/ ./ (/ 2/ )/ 预处理/ 模块/ ./ 文献/ [/ 16/ ]/ 指出/ GooglePlay/ 上/ 52208/ 个/ 应用程序/ 中/ 只有/ 2/ 个/ 为/ 恶意/ 应用/ ,/ 所以/ 可图/ 1Androdect/ 检测/ 系统/ 框图/ 4/ 关键技术/ 与/ 算法/ 4.1/ 特征提取/ 技术/ 本文/ 结合/ 了/ 动/ 静态/ 行为/ 分析/ 技术/ ,/ 提取/ Android/ 应用/ 的/ 3/ 种/ 不同/ 类型/ 特征/ ,/ 下面/ 分别/ 作/ 详细/ 介绍/ ./ 4.1/ ./ 1/ 静态/ 分析/ 技术/ 系统/ 中/ 的/ 静态/ 分析/ 模块/ 采用/ 的/ 是/ 静态/ 分析/ 技术/ ,/ 使用/ AndroidSDK/ (/ SoftwareDevelopmentKit/ ,/ 软件开发/ 工具包/ )/ 中/ 自带/ 的/ AAPT/ (/ AndroidAsset/ 以/ 认为/ GooglePlay/ 上/ 的/ 应用程序/ 基本/ 为/ 非/ 恶意/ 应用/ ./ 但是/ ,/ 为了/ 使/ 结果/ 更加/ 精确/ ,/ 本文/ 对/ 从/ GooglePlay/ 上/ 批量/ 下载/ 的/ 应用程序/ 使用/ 其它/ 检测工具/ 、/ 杀毒软件/ 和/ 人工/ 进行/ 检测/ ,/ 确保/ 非/ 恶意/ 应用/ 程序库/ 中/ 的/ 应用程序/ 均/ 为/ 非/ 恶意/ 应用/ ,/ 不/ 包含/ 可疑/ 的/ 恶意/ 应用/ ./ (/ 3/ )/ 特征提取/ 模块/ ./ 本文/ 结合/ 动/ 静态/ 行为/ 分析/ 技术/ ./ 其中/ ,/ 静态/ 分析/ 主要/ 对/ 应用程序/ 进行/ 自动化/ 分析/ ,/ 提取/ 各个/ 组件/ 特征/ 和/ 函数调用/ 序列/ ;/ 动态分析/ 采用/ 沙盒/ 技术/ ,/ 自动/ 提取/ 各个/ 应用程序/ 的/ 系统/ 调用/ 序列/ 特征/ ./ (/ 4/ )/ 特征/ 集合/ ./ 在/ 特征描述/ 阶段/ ,/ 构建/ 3/ 种/ 不同/ 类型/ 特征/ 的/ 集合/ ./ ①/ 静态/ 获取/ 各个/ 组件/ 使用/ 个数/ 的/ 统计数据/ ;/ ②/ 静态/ 获取/ 应用程序/ lib/ 文件/ 中/ 所/ 使用/ 的/ 重要/ 函数调用/ 的/ 统计数据/ ;/ ③/ 动态/ 获取/ 各个系统/ 调用/ 使用/ 次数/ 的/ 统计数据/ ./ (/ 5/ )/ 格式化/ 处理/ 模块/ ./ 本文/ 使用/ Python/ 语言/ 编写/ 代码/ 对/ 提取/ 的/ 特征/ 集合/ 进行/ 格式化/ 处理/ ,/ 统一/ 处理/ 为/ CSV/ (/ CommaSeparatedValues/ )/ 格式/ ,/ 即/ 逗号/ 分隔/ 值/ 格式/ ./ 每一/ 行为/ 一个/ 应用程序/ 测试/ 样本/ ./ (/ 6/ )/ 三层/ 混合/ 系综/ 算法/ 检测/ 模块/ ./ 使用/ 三层/ 混合/ 系综/ 算法/ 对/ 数据/ 进行/ 处理/ ,/ 创建/ 最优/ 的/ 检测/ 模型/ ,/ 对待/ 检测/ 应用程序/ 进行/ 检测/ ./ PackagingTool/ ,/ Android/ 资产/ 打包/ 工具/ )/ 对/ 每个/ Android/ 应用/ (/ 即/ APK/ )/ 进行/ 解压缩/ ,/ 提取/ Android/ -/ Manifest/ ./ xml/ 文件/ 和/ lib/ 库/ 文件/ (/ ./ so/ 文件/ )/ ./ 每个/ 应用程序/ 都/ 包含/ 一个/ AndroidManifest/ ./ xml/ 文件/ ,/ 位于/ 根目录/ 下/ ,/ 它/ 定义/ 了/ 应用程序/ 的/ 内容/ 和/ 行为/ ./ 静态/ 分析/ 模块/ 主要/ 完成/ 以下/ 3/ 个/ 工作/ ,/ 如图/ 2/ 所示/ ./ (/ 1/ )/ 对/ Android/ 应用/ 进行/ 自动化/ 分析/ ,/ 提取/ 其中/ 的/ packagename/ 和/ launchableactivity/ 为/ 动态分析/ 提供/ 参数/ ./ (/ 2/ )/ 对/ AndroidManifest/ ./ xml/ 文件/ 进行/ 自动化/ 分析/ ,/ 提取/ 各个/ 组件/ 使用/ 个数/ 情况/ ,/ 包括/ permission/ 、/ Page5activity/ 、/ service/ 、/ receiver/ 和/ provider/ ①/ ./ Permission/ 描述/ 了/ 该/ 应用程序/ 请求/ 的/ 权限/ ,/ 为了/ 保护/ 设备/ 上/ 的/ 资源/ 和/ 功能/ ./ Activity/ 通常/ 表示/ 应用程序/ 的/ 一个/ 用户界面/ ./ Service/ 类似/ 于/ Windows/ 平台/ 的/ 服务/ ,/ 它/ 是/ 可能/ 长时间/ 运行/ 的/ 后台/ 进程/ ./ Receiver/ 使得/ 应用程序/ 可以/ 接收/ 系统/ 或者/ 其它/ 应用程序/ 的/ Intent/ 消息/ ./ 内容/ provider/ 定义/ 了/ 一种/ 标准/ 机制/ 来/ 共享/ 数据/ ,/ 允许/ 应用程序/ 使用/ 其它/ 应用程序/ 的/ 数据/ ./ 例如/ :/ 随机/ 挑选/ 几个/ APK/ 进行/ 静态/ 分析/ ,/ 结果/ 如表/ 1/ 所示/ ,/ cn/ ./ cntv/ ./ apk/ 应用程序/ 声明/ 了/ 10/ 个/ permission/ 、/ 20/ 个/ activity/ 和/ 2/ 个/ service/ 组件/ ,/ 但是/ 没有/ 使用/ receiver/ 和/ provider/ 组件/ ./ cn/ ./ cntv/ ./ apkbubei/ ./ tingshu/ ./ apk14/ 个/ 59/ 个/ 4/ 个/ 1/ 个/ 0/ 个/ com/ ./ meitu/ ./ kankan/ ./ apk16/ 个/ 32/ 个/ 1/ 个/ 0/ 个/ 0/ 个/ (/ 3/ )/ 使用/ AndroidNDK/ (/ NativeDevelopmentKit/ ,/ 原生/ 软件开发/ 工具包/ )/ 中/ 的/ arm/ -/ linux/ -/ androideabi/ -/ readelf/ ./ exe/ 提取/ native/ 代码/ 编译/ 链接/ 后/ 生成/ 的/ ELF/ 文件/ 的/ 函数调用/ 序列/ ./ 可/ 执行/ 链接/ 格式/ ELF/ (/ ExecutableandLinkingFormat/ )/ 目标/ 文件/ 有/ 3/ 种/ 类型/ :/ 可重/ 定位/ 文件/ 、/ 可执行文件/ 和/ 共享/ 目标/ 文件/ ./ 共享/ 目标/ 文件/ 即/ lib/ 文件夹/ 下/ 的/ ./ so/ 文件/ ,/ 它/ 是/ Androidnative/ 代码/ 所/ 涉及/ 的/ 文件/ ,/ 用于/ 和/ 其它/ 共享/ 目标/ 文件/ 或者/ 可重/ 定位/ 文件/ 一起/ 生成/ ELF/ 目标/ 文件/ 或者/ 和/ 执行/ 文件/ 一起/ 创建/ 进程/ 映像/ ./ 本文/ 对/ 每个/ 应用程序/ 的/ 多个/ ./ so/ 文件/ 进行/ 合并/ 后/ 使用/ readelf/ 工具/ 提取/ “/ ./ dynsym/ ”/ section/ 中/ 保存/ 的/ 动态/ 符号表/ “/ SymbolTable/ ”/ ./ 并且/ 所/ 抽取/ 的/ 信息/ 选取/ “/ FUNC/ ”/ 类型/ ,/ 不能/ 选取/ “/ OBJECT/ ”/ 等/ 其它/ 类型/ ,/ 因为/ 函数调用/ 必须/ 是从/ 外部/ 调用/ 、/ 共享/ 库/ 或者/ 系统/ 调用/ 的/ 函数/ ./ 对/ 数据库/ 中/ 的/ 应用程序/ 进行/ 统计/ ,/ 如表/ 2/ 所示/ ,/ 可以/ 得出/ 恶意/ 应用/ 中含/ native/ 代码/ 的/ 应用程序/ 占/ 47/ %/ ,/ 非/ 恶意/ 应用/ 中含/ native/ 代码/ 的/ 应用程序/ 占/ 33/ %/ ./ 恶意/ 应用/ 程序库/ 1126/ 非/ 恶意/ 应用/ 程序库/ 20004.1/ ./ 2/ 动态分析/ 技术/ 主要/ 采用/ 沙盒/ 技术/ ,/ 流程图/ 如图/ 3/ 所示/ ./ 系统/ 中/ 动态分析/ 模块/ 使用/ 动态分析/ 技术/ ,/ 本文/ ①/ TheAndroidManifest/ ./ xmlFile/ [/ EB/ // OL/ ]/ ./ http/ :/ // // devel/ -/ Page6/ 数/ 安装/ 应用程序/ ./ 参数/ 开启/ 应用程序/ ./ 户/ 行为/ ./ 调用/ 序列/ ./ 步骤/ 1/ ./ 创建/ 模拟器/ 快照/ 并/ 从/ 快照/ 启动/ ./ 步骤/ 2/ ./ 使用/ 静态/ 分析/ 获得/ 的/ packagename/ 参/ 步骤/ 3/ ./ 使用/ 静态/ 分析/ 获得/ 的/ launchableactivity/ 步骤/ 4/ ./ 使用/ SDK/ 自带/ 的/ 工具/ monkey/ 模拟/ 用/ 步骤/ 5/ ./ 使用/ SDK/ 自带/ 的/ 工具/ strace/ 提取/ 系统/ 步骤/ 6/ ./ 关闭/ 并/ 卸载/ 应用程序/ ./ 以前/ 研究者/ 也/ 做/ 过/ 此类/ 工作/ ,/ 但/ 都/ 没有/ 给出/ 具体/ 实现/ 方案/ 和/ 在/ 现实/ 环境/ 下/ 的/ 测试/ 结果/ ./ 本文/ 根据/ 实际/ 工作/ 提出/ 此/ 过程/ 中/ 的/ 一些/ 具体/ 问题/ 和/ 相应/ 的/ 解决方案/ ,/ 具体/ 介绍/ 如下/ :/ (/ 1/ )/ 模拟器/ 快照/ ./ 为了/ 加快/ 系统/ 运行/ 速度/ ,/ 在/ 创建/ 模拟器/ 后/ 创建/ 模拟器/ 快照/ ,/ 每/ 运行/ 整/ 百个/ 应用程序/ 后/ 重新启动/ 一次/ 模拟器/ ,/ 以免/ 重复/ 安装/ 卸载/ 应用程序/ 造成/ 垃圾文件/ 过多/ 影响/ 运行/ 速度/ ,/ 也/ 避免/ 每/ 处理/ 一个/ 应用程序/ 重启/ 模拟器/ 一次/ 影响/ 运行/ 速度/ ./ (/ 2/ )/ 是否/ 使用/ activity/ 组件/ ./ 判断/ 应用程序/ 是否/ 使用/ activity/ 组件/ ,/ 因为/ 没有/ activity/ 组件/ 无法/ 使用/ monkey/ 工具/ 提取/ 系统/ 调用/ 特征/ ./ 因此/ ,/ 本文/ 构建/ 的/ 系统/ 会/ 自动/ 提取/ 出/ 没有/ 使用/ activity/ 组件/ 的/ 应用程序/ ,/ 而后/ 使用/ 静态/ 分析/ 技术/ 来/ 弥补/ 该/ 缺点/ ./ (/ 3/ )/ 模拟器/ 下/ 无法/ 运行/ ./ 开启/ 应用程序/ 后要/ 判断/ 其/ 是否/ 崩溃/ ,/ 部分/ 开发者/ 为了/ 防止/ 应用程序/ 在/ 模拟器/ 中/ 运行/ ,/ 会/ 使/ 应用程序/ 开启/ 后/ 自动/ 崩溃/ ./ 本文/ 提出/ 的/ 系统/ 在/ 运行/ 过程/ 中/ 会/ 输出/ 这些/ 应用程序/ ,/ 后面/ 在/ 真/ 机上/ 依次/ 进行/ 同样/ 的/ 系统/ 调用/ 特征提取/ ./ (/ 4/ )/ 多/ 进程/ ./ 有些/ 应用程序/ 含有/ 多个/ 进程/ ,/ 一个/ 进程/ 为/ 正常/ 行为/ ,/ 另/ 一个/ 进程/ 为/ 恶意/ 行为/ ,/ 由于/ 无法/ 预先判断/ 某/ 应用程序/ 中/ 哪个/ 进程/ 为/ 恶意/ 行为/ ,/ 哪个/ 进程/ 为/ 正常/ 行为/ ./ 因此/ ,/ 本/ 系统/ 不/ 把/ 此类/ 应用程序/ 作为/ 训练样本/ ,/ 通过/ 对/ 每个/ 进程/ 分别/ 提取/ 系统/ 调用/ 特征/ 可以/ 检测/ 此类/ 应用程序/ ,/ 只要/ 含有/ 恶意/ 行为/ 特征/ 就/ 判定/ 为/ 恶意/ 应用/ ./ 4.2/ 三层/ 混合/ 系综/ 算法/ 恶意代码/ 检测/ 所/ 选取/ 的/ 特征/ 和/ 算法/ ./ 表/ 3/ 列出/ 了/ 之前/ 研究者/ 使用/ 分类/ 聚类/ 算法/ 进行/ 表/ 3/ 相关/ 工作/ 中/ 选取/ 特征/ 及/ 使用/ 的/ 算法/ 对比/ 检测工具/ 选取/ 特征/ DroidMat/ [/ 17/ ]/ 权限/ 、/ Intent/ 、/ APIK/ -/ means/ // EM/ 、/ kNN/ // NBAndromaly/ [/ 15/ ]/ APINB/ 、/ BN/ 、/ DTJ48/ 、/ Histogram/ 、/ Crowdroid/ [/ 14/ ]/ 系统/ 调用/ 文献/ [/ 12/ ]/ 中/ 工具/ 函数调用/ CentroidMachine/ 、/ NB/ 、/ SVM/ 文献/ [/ 13/ ]/ 中/ 工具/ 函数调用/ PART/ 、/ Prism/ 、/ kNN/ 会/ 不会/ 有/ 一种/ 算法/ 总/ 表现/ 为/ 最优/ 呢/ ?/ 意/ 代码/ 检测/ 上/ 所/ 起/ 的/ 不同/ 作用/ 呢/ ?/ DroidMat/ [/ 17/ ]/ 提取/ 权限/ 、/ Intent/ 、/ API/ 特征/ ,/ 使用/ 聚类/ 算法/ 进行/ 聚类/ 而后/ 使用/ 分类/ 算法/ 检测/ 恶意/ 应用/ ,/ 对比/ 了/ 两种/ 聚类/ 算法/ K/ -/ means/ 和/ ExpectationMaximization/ (/ EM/ )/ 以及/ 两种/ 分类/ 算法/ k/ -/ NearestNeighbor/ (/ kNN/ )/ 和/ NaveBayes/ (/ NB/ )/ 的/ 检测/ 结果/ ./ Andromaly/ [/ 15/ ]/ 提取/ 了/ API/ 特征/ ,/ 对比/ 了/ 6/ 种/ 数据挖掘/ 算法/ NB/ 、/ BayesianNetworks/ (/ BN/ )/ 、/ DecisionTree/ (/ DT/ )/ J48/ 、/ Histogram/ 、/ K/ -/ means/ 和/ Logistic/ 的/ 检测/ 结果/ ./ Crowdroid/ [/ 14/ ]/ 针对/ 系统/ 调用/ 特征/ 进行/ 提取/ ,/ 使用/ K/ -/ means/ 聚类/ 算法/ 进行/ 检测/ ./ 文献/ [/ 12/ ]/ 针对/ 函数调用/ 特征/ 进行/ 提取/ ,/ 对比/ 了/ CentroidMachine/ 、/ NB/ 、/ SupportVectorMachine/ (/ SVM/ )/ 3/ 种/ 分类/ 算法/ 的/ 检测/ 结果/ ./ 文献/ [/ 13/ ]/ 针对/ 函数调用/ 特征/ 进行/ 提取/ ,/ 对比/ 了/ PART/ 、/ Prism/ 、/ kNN3/ 种/ 分类/ 算法/ 的/ 检测/ 结果/ ./ 效果/ 不同/ ,/ 那么/ ,/ 哪/ 一种/ 算法/ 最优/ 呢/ ?/ 由/ 上面/ 的/ 分析/ 结果/ 可以/ 提出/ 以下/ 3/ 个/ 问题/ :/ (/ 1/ )/ 针对/ 同一/ 类型/ 特征/ 选用/ 不同/ 的/ 算法/ ,/ 检测/ (/ 2/ )/ 针对/ 不同/ 类型/ 的/ 特征/ ,/ 使用/ 同一/ 算法/ 检测/ ,/ (/ 3/ )/ 如何/ 充分发挥/ 不同/ 类型/ Android/ 特征/ 在/ 恶/ 以上/ 相关/ 研究/ 的/ 检测/ 结果/ 说明/ 使用/ 传统/ 分类/ 聚类/ 算法/ 无法/ 预先/ 知道/ 哪个/ 算法/ 对/ 该/ 特征/ 检测/ 效果/ 最优/ ;/ 也/ 没有/ 一种/ 固定/ 的/ 算法/ 对/ 不同/ 类型/ 的/ 特征/ 表现/ 效果/ 总是/ 最优/ ;/ 并且/ 单一/ 算法/ 不能/ 充分发挥/ 不同/ 类型/ Android/ 特征/ 在/ 恶意代码/ 检测/ 上/ 所/ 起/ 的/ 不同/ 作用/ ./ 因此/ ,/ 针对/ 以上/ 提出/ 的/ 问题/ ,/ 本文/ 设计/ 了/ 一种/ 针对/ 多/ 类/ 特征/ 基于/ 多种/ 基础/ 分类器/ 的/ 三层/ 混合/ 系综/ 算法/ THEA/ (/ TripleHybridEnsembleAlgorithm/ )/ ./ 4.2/ ./ 1/ 相关/ 概念/ 定义/ 1/ ./ 分类器/ 系综/ [/ 18/ ]/ ./ 分类器/ 系综/ 是/ 一种/ 从根本上/ 提升/ 分类/ 精度/ 的/ 方法/ ,/ 是/ 将/ k/ 个/ 学习/ 得到/ 的/ 模型/ 系列/ M1/ ,/ M2/ ,/ …/ ,/ Mk/ 组合/ 起来/ ,/ 创建/ 一个/ 改进/ 的/ 复合/ 模型/ M/ / ./ 传统/ 的/ 系综/ 方法/ 有/ 装袋/ (/ Bagging/ )/ 和/ 提升/ (/ Adaboost/ )/ ./ 装袋/ 是/ 对/ 每个/ 模型/ 给出/ 等/ 权重/ 预测/ ;/ 提升/ 是/ 初始/ 时/ 赋予/ 每个/ 元组/ 同样/ 的/ 权重/ ,/ 每/ 得到/ 分类器/ Mi/ 之后/ ,/ 更新/ 权重/ ,/ 使得/ 后面/ 的/ 分类器/ Mi/ +/ 1/ 更/ 关注/ Mi/ 误/ 分类/ 的/ 训练/ 元组/ ./ 定义/ 2/ ./ k/ 折/ 交叉/ 确认/ (/ k/ -/ foldcross/ -/ valida/ -/ tion/ )/ [/ 18/ ]/ ./ k/ 折/ 交叉/ 确认/ 就是/ 将/ 初始/ 数据/ 随机/ 划分/ 为/ k/ 个/ 互不/ 相交/ 的/ 子集/ ,/ 也/ 叫/ “/ 折/ ”/ D1/ ,/ D2/ ,/ …/ ,/ Dk/ ,/ 每个/ 折/ 的/ 大小/ 大致/ 相等/ ./ 训练/ 和/ 检验/ 进行/ k/ 次/ ./ 在/ 第/ i/ 次/ Page7/ 迭代/ ,/ 划分/ Di/ 用作/ 检验/ 集/ ,/ 其余/ 的/ 划分/ 一起/ 用来/ 训练/ 模型/ ./ 4.2/ ./ 2THEA/ 图/ 4/ 为/ 本文/ 设计/ 的/ 三层/ 混合/ 系综/ 算法/ THEA/ 框图/ ./ 具体/ 思想/ 为/ ,/ 因为/ 无法/ 预先/ 知道/ 哪个/ 算法/ 对/ 特定/ 类型/ 特征/ 表现/ 效果/ 最优/ ,/ 为了/ 不/ 盲目/ 地/ 随机/ 选择/ 一个/ 算法/ 进行/ 检测/ ,/ 本/ 算法/ 在/ 第/ 1/ 层/ 设计/ 采用/ 多个/ 基础/ 分类器/ 分别/ 进行/ 检测/ ,/ 选出/ 最优/ 分类器/ ./ 并且/ 针图/ 4/ 三层/ 混合/ 系综/ 算法/ THEA/ 下面/ 对/ 算法/ 1/ 的/ 流程/ 做/ 详细/ 介绍/ :/ 第/ 1/ 层/ 对/ 3/ 个/ 不同/ 类型/ 特征/ 库/ Di/ (/ i/ =/ 1/ ,/ 2/ ,/ 3/ )/ 使用/ 多个/ 基础/ 分类/ 算法/ Mm/ (/ m/ =/ 1/ ,/ 2/ ,/ 3/ ,/ 4/ )/ 依次/ 采用/ k/ 折/ 交叉/ 确认/ 方法/ 进行/ 训练/ ,/ 此处/ m/ 选取/ 4/ ,/ k/ 选取/ 10/ ./ 在/ 一种/ 特征/ 集合/ 中/ ,/ 每/ 一个/ 基础/ 分类/ 算法/ Mm/ (/ m/ =/ 1/ ,/ 2/ ,/ 3/ ,/ 4/ )/ 进行/ 10/ 折/ 交叉/ 确认/ ,/ 生成/ 的/ 分类器/ 可以/ 用/ 矩阵/ 描述/ 为/ 每列取/ k/ 次/ 检测/ 的/ 平均值/ 作为/ 最后/ 的/ 分类器/ ./ 对/ 3/ 个/ 不同/ 的/ 特征/ 集合/ Di/ (/ i/ =/ 1/ ,/ 2/ ,/ 3/ )/ 依次/ 迭代/ Mm/ (/ m/ =/ 1/ ,/ 2/ ,/ 3/ ,/ 4/ )/ 基础/ 分类/ 算法/ ,/ 生成/ 的/ 分类器/ 可以/ 用/ 矩阵/ 描述/ 为/ 在/ 每/ 一列/ 中/ 选取/ 最优/ 的/ 分类器/ ,/ 共/ 选取/ i/ 个/ 分类器/ ./ 对/ 不同/ 类型/ 的/ 特征选择/ 效果/ 最优/ 的/ 分类器/ ,/ 不是/ 盲目/ 地/ 使用/ 一种/ 分类器/ 对/ 所有/ 类型/ 特征/ 进行/ 检测/ ./ 在/ 第/ 2/ 层/ 为了/ 使/ 检测/ 效果/ 更优/ ,/ 本/ 算法/ 使用/ 了/ 系综/ 算法/ 分别/ 对/ 选取/ 的/ 3/ 个/ 最优/ 分类器/ 的/ 分类/ 效果/ 进行/ 提升/ ./ 最后/ ,/ 在/ 第/ 3/ 层/ 对/ 一个/ 应用程序/ 的/ 3/ 种/ 不同/ 类型/ 特征/ 进行/ 一个/ 综合/ 评判/ ,/ 使用/ 计算/ 加权/ 平均值/ 的/ 判决/ 算法/ 给出/ 检测/ 结果/ ./ 最后/ ,/ 相当于/ 针对/ 每种/ 类型/ 特征/ 集合/ 输出/ 一个/ 最优/ 分类器/ Ci/ (/ i/ =/ 1/ ,/ 2/ ,/ 3/ )/ ./ 本文/ 选取/ 的/ 基础/ 分类/ 算法/ 为/ NB/ 、/ kNN/ 、/ PART/ 、/ J48/ [/ 2/ ]/ ,/ 由于/ 系统/ 具有/ 可扩展性/ ,/ 还/ 可以/ 加入/ 更/ 多/ 基础/ 分类/ 算法/ ./ 关键/ 是/ 基础/ 分类/ 算法/ 要/ 选取/ 差异/ 大/ 的/ ,/ 这样/ 有利于/ 分类器/ 的/ 效果/ ./ 第/ 2/ 层/ 使用/ RotationForest/ 算法/ 提升/ 第/ 1/ 层/ 输出/ 的/ 3/ 个/ 最优/ 分类器/ 的/ 分类/ 效果/ ./ RotationForest/ 算法/ [/ 19/ ]/ 是/ 利用/ 特征提取/ 来/ 构造/ 基/ 分类器/ 差异性/ 的/ 集成/ 学习/ 方法/ ,/ 该/ 算法/ 的/ 基/ 分类器/ 只能/ 选定/ 一种/ 算法/ ,/ 但是/ 经过/ 变换/ 产生/ 多个/ 基/ 分类器/ ,/ 它们/ 不仅/ 精度高/ 而且/ 差异/ 大/ ,/ 该/ 算法/ 的/ 设计者/ 也/ 证实/ 其/ 特性/ 比/ 传统/ 的/ Bagging/ 、/ Adaboost/ 系综/ 算法/ 分类/ 效果/ 更优/ ./ 因此/ ,/ 本文/ 选用/ RotationForest/ 算法/ 在/ 第/ 2/ 层/ 输出/ 3/ 个/ 改进/ 的/ 最优/ 分类器/ ./ 第/ 3/ 层/ 对待/ 检测/ 应用程序/ 提取/ 3/ 种/ 类型/ 的/ 特征/ ,/ 使用/ 第/ 2/ 层/ 输出/ 的/ 3/ 个/ 最优/ 分类器/ 进行/ 分类/ ,/ 最后/ 使用/ Voting/ 函数/ 求/ 加权/ 平均值/ 给出/ 判决/ 结果/ ./ 本文/ 选取/ 0/ 代表/ 非/ 恶意/ 应用/ ,/ 1/ 代表/ 恶意/ 应用/ ,/ 每个/ 分/ Page8/ 类器/ 给出/ 的/ 结果/ Result/ 为/ 0/ 到/ 1/ 之间/ 某个/ 值/ (/ 例如/ 0.8/ ,/ 表示/ 将/ 该/ 应用程序/ 判定/ 为/ 恶意/ 应用/ 的/ 概率/ 为/ 80/ %/ ,/ 判定/ 为/ 非/ 恶意/ 应用程序/ 的/ 概率/ 为/ 20/ %/ )/ ,/ 该值/ 体现/ 了/ 该类/ 特征/ 判定/ 结果/ 的/ 权重/ ,/ 越/ 接近/ 1/ 则/ 表示/ 根据/ 该类/ 特征/ 将/ 待/ 检测/ 的/ 未知/ 应用程序/ 判定/ 为/ 恶意/ 应用/ 的/ 权重/ 就/ 越/ 大/ ./ 然后/ 将/ 每种/ 特征/ 的/ 结果/ 求/ 加权/ 平均值/ 得出/ 最后/ 判断/ 结果/ ./ Voting/ 函数/ 公式/ 定义/ 如下/ :/ 加权/ 平均值/ =/ x/ ×/ Result1/ +/ y/ ×/ Result2/ +/ z/ ×/ Result3x/ ,/ y/ ,/ z/ ∈/ (/ 0/ ,/ 1/ )/ ;/ 0/ / Result1/ ,/ Result2/ ,/ Result3/ / 1/ ,/ 其中/ ,/ x/ ,/ y/ ,/ z/ 表示/ 该/ 应用程序/ 是否/ 含有/ 该类/ 特征/ ,/ 1/ 代表/ 有/ ,/ 0/ 代表/ 无/ ;/ Result/ 表示/ 根据/ 各类/ 特征/ 的/ 判定/ 结果/ ./ 算法/ 1/ ./ THEA/ ./ 输入/ :/ Di/ :/ 3/ 种/ 类型/ 训练样本/ 的/ 集合/ ,/ i/ =/ 1/ ,/ 2/ ,/ 3Dij/ :/ 每种/ 训练样本/ 集合/ 被/ 等/ 分为/ k/ 个/ 元组/ ,/ j/ =/ 1/ ,/ 2/ ,/ …/ ,/ kk/ :/ 轮数/ (/ 每轮/ 产生/ 一个/ 分类器/ )/ Mm/ :/ 基础/ 分类/ 算法/ ,/ m/ =/ 1/ ,/ 2/ ,/ 3/ ,/ 4C/ :/ 生成/ 的/ 分类器/ Cal/ :/ 计算/ w/ =/ Accuracy/ 的/ 值/ RF/ :/ RotationForest/ 算法/ 输出/ :/ CTHEA/ 三层/ 混合/ 系综/ 分类器/ ,/ Result/ 过程/ 1/ ./ 生成/ THEA/ 分类器/ 并/ 给出/ 分类/ 结果/ // // 第/ 1/ 层/ 分类/ 算法/ FOReachDiinDDOFOReachMminMDOSetwi/ =/ Max/ (/ w1/ ,/ w2/ ,/ w3/ ,/ w4/ )/ OutputCiwithwiOutputC1/ ,/ C2/ ,/ C3/ // // 第/ 2/ 层/ 分类/ 算法/ FOReachDiinDDODivideDitokpartsFORj/ =/ 1tokDOOutputRF/ (/ Ci/ )/ iwithMeanvalueOutputRF/ (/ C1/ )/ 1/ ,/ RF/ (/ C2/ )/ 2/ ,/ RF/ (/ C3/ )/ 3/ // // 第/ 3/ 层/ 分类/ 算法/ ReadnewtestDnFOReachRF/ (/ Ci/ )/ iinRF/ (/ C/ )/ DOTest/ (/ Dn/ ,/ RF/ (/ Ci/ )/ i/ )/ OutputResultiVoting/ (/ Resulti/ ,/ Result2/ ,/ Result3/ )/ Output/ (/ CTHEA/ ,/ Result/ )/ 5/ 实验设计/ 与/ 结果/ 分析/ 本文/ 通过/ 实验/ 来/ 评估/ Androdect/ 系统/ 的/ 有效性/ ,/ 与/ 之前/ 的/ 相关/ 工作/ 进行/ 对比/ ,/ 并/ 重点/ 与/ 国外/ 著名/ 的/ Android/ 恶意代码/ 检测工具/ Androguard/ 使用/ 相同/ 的/ 测试/ 集/ 进行/ 对比/ 分析/ ./ 5.1/ 实验/ 环境/ 本文/ 使用/ Java/ 和/ Python/ 语言/ 实现/ 了/ 自动化/ 检测工具/ Androdect/ ./ 其中/ ,/ 动/ 静态/ 行为/ 特征提取/ 部分/ 主要/ 由/ Python/ 语言/ 实现/ ,/ APK/ 捕获/ 和/ 三层/ 混合/ 系综/ 算法/ 实现/ 主要/ 由/ Java/ 语言/ 实现/ ./ 使用/ Androdect/ 对/ 现实/ 中/ 1126/ 个/ 恶意程序/ 和/ 2000/ 个/ 非/ 恶意程序/ 进行/ 检测/ ./ 所有/ 实验/ 在/ 内存/ 为/ 4GB/ ,/ 处理器/ 为/ Intel/ (/ R/ )/ Core/ (/ TM/ )/ 2Quad2/ ./ 67GHz/ 的/ 机器/ 上/ 完成/ ./ Androguard/ 测试/ 实验/ 在/ 1GB/ 内存/ 的/ VirtualBox/ 虚拟机/ 上/ 完成/ ./ 为了/ 对比/ ,/ Androdect/ 的/ 测试/ 实验/ 同样/ 在/ 1GB/ 内存/ 的/ 虚拟机/ 上/ 完成/ ./ 5.2/ 实验/ 结果/ 分类器/ 性能/ 的/ 评估/ 参数/ [/ 18/ ]/ ./ 在/ 介绍/ 本/ 实验/ 结果/ 之前/ ,/ 先/ 介绍/ 几个/ 用来/ 衡量/ 定义/ 3/ ./ 混淆/ 矩阵/ (/ confusionmatrix/ )/ ./ 混淆/ 矩阵/ 是/ 分析/ 分类器/ 识别/ 不同/ 类/ 元组/ 情况/ 的/ 一种/ 有用/ 工具/ ,/ 如表/ 4/ 所示/ ./ 本文/ 将/ 非/ 恶意/ 应用/ 定义/ 为/ 正/ 元组/ ,/ 恶意/ 应用/ 定义/ 为/ 负/ 元组/ ./ Truepositives/ (/ t/ _/ pos/ )/ 指/ 分类器/ 将/ 非/ 恶意/ 应用/ 正确/ 识别/ 为/ 非/ 恶意/ 应用/ 的/ 元组/ ;/ Truenegatives/ (/ t/ _/ neg/ )/ 指/ 分类器/ 将/ 恶意/ 应用/ 正确/ 识别/ 为/ 恶意/ 应用/ 的/ 元组/ ;/ Falsepositives/ (/ f/ _/ pos/ )/ 指/ 分类器/ 将/ 恶意/ 应用/ 错误/ 识别/ 为/ 非/ 恶意/ 应用/ 的/ 元组/ ;/ Falsenegatives/ (/ f/ _/ neg/ )/ 指/ 分类器/ 将/ 非/ 恶意/ 应用/ 错误/ 识别/ 为/ 恶意/ 应用/ 的/ 元组/ ./ 预测/ 为/ ↓/ 非/ 恶意/ 应用/ 恶意/ 应用/ 由/ 混淆/ 矩阵/ 计算/ 出/ 相应/ 的/ 分类器/ 评估/ 参数/ 的/ 公式/ 为/ Page9Accuracy/ =/ t/ _/ pos/ +/ t/ _/ negTPRate/ =/ Recall/ =/ t/ _/ posFPRate/ =/ f/ _/ posPrecision/ =/ t/ _/ posF/ -/ measure/ =/ 2/ ×/ recall/ ×/ precision/ 定义/ 4/ ./ ROC/ 曲线/ (/ ReceiverOperatingChar/ -/ acteristic/ 接收者/ 运行/ 特征/ )/ ./ ROC/ 曲线/ 显示/ 了/ 给定/ 模型/ 的/ Truepositives/ 概率/ 与/ Falsepositives/ 概率/ 之间/ 的/ 比较/ 评定/ ./ 定义/ 5/ ./ AUC/ (/ AreaUnderCurve/ )/ ./ ROC/ 曲线/ 下面/ 的/ 面积/ 是/ 模型/ 准确率/ 的/ 度量/ AUC/ ./ 为了/ 评估/ 模型/ 的/ 准确率/ ,/ 可以/ 测量/ 曲线/ 下方/ 的/ 面积/ ,/ 面积/ 越/ 接近/ 0.5/ ,/ 对应/ 模型/ 的/ 准确率/ 越低/ ,/ 完全/ 准确/ 的/ 模型/ 的/ 面积/ 为/ 1/ ./ 第/ 1/ 层/ 分类/ 使用/ 选定/ 的/ 基础/ 分类器/ PART/ 、/ NB/ 、/ kNN/ 、/ J48/ 对/ 3/ 种/ 类型/ 特征/ 采用/ 10/ 折/ 交叉/ 检验/ 测试/ ,/ 结果/ 如表/ 5/ ~/ 表/ 7/ 所示/ ./ 由/ 测试/ 结果/ 可以/ 看出/ ,/ 针对/ 各个/ 组件/ 特征/ ,/ kNN/ 算法/ 表现/ 最优/ ;/ 针对/ 函数调用/ 特征/ ,/ PART/ 算法/ 的/ TPRate/ 值/ 最高/ ,/ kNN/ 算法/ 的/ AUC/ 值/ 最高/ ./ 由于/ 函数调用/ 特征/ 数量/ 较/ 多/ ,/ 本文/ 采用/ 特征选择/ 算法/ 对/ 原有/ 特征/ 进行/ 筛选/ ,/ 目的/ 是/ 选择/ 对/ 分类器/ 影响/ 较大/ 的/ 255/ 个/ 特征/ ,/ 同时/ 降低/ 维度/ 减少/ 计算/ 时间/ ./ 具体/ 使用/ InfoGainAttributeEval/ 评价/ 策略/ 方法/ (/ 根据/ 与/ 分类/ 有关/ 的/ 每/ 一个/ 属性/ 的/ 信息/ 增益/ 进行/ 评估/ )/ 和/ Ranker/ 搜索/ 策略/ 方法/ (/ 属性/ 判据/ 值/ 排序/ )/ ;/ 针对/ 系统/ 调用/ 特征/ ,/ J48/ 算法/ 的/ TPRate/ 值/ 最高/ ,/ PART/ 算法/ 的/ AUC/ 值/ 最高/ ./ 由于/ Accuracy/ 指标/ 综合/ 考虑/ 了/ 混淆/ 矩阵/ 的/ 4/ 个/ 分量/ ,/ 本文/ 使用/ Accuracy/ 评估/ 分类器/ 性能/ ,/ 表/ 8/ 给出/ 了/ 各种/ 特征/ 集合/ 各个/ 基础/ 分类器/ Accuracy/ 值/ 的/ 结果/ ./ 由此/ 得出/ ,/ kNN/ 算法/ 为/ 针对/ 各个/ 组件/ 特征/ 的/ 最优/ 分类器/ ,/ PART/ 算法/ 为/ 针对/ 函数调用/ 特征/ 的/ 最优/ 分类器/ ,/ J48/ 算法/ 为/ 针对/ 系统/ 调用/ 特征/ 的/ 最优/ 分类器/ ./ TPRateFPRatePrecisionRecallF/ -/ MeasureAUCPART0/ ./ 8720.1360/ ./ 8740.8720/ ./ 8730.936/ NB0/ ./ 7770.1880/ ./ 8080.7770/ ./ 7810.870/ kNN0/ ./ 9060.0930/ ./ 9080.9060/ ./ 9060.938/ J480/ ./ 8980.1170/ ./ 8980.8980/ ./ 8980.923/ TPRateFPRatePrecisionRecallF/ -/ MeasureAUCPART0/ ./ 9750.0260/ ./ 9750.9750/ ./ 9750.977/ NB0/ ./ 910.0920/ ./ 910.910/ ./ 910.969/ kNN0/ ./ 9720.0280/ ./ 9720.9720/ ./ 9720.985/ J480/ ./ 970.0330/ ./ 970.970/ ./ 9690.979/ TPRateFPRatePrecisionRecallF/ -/ MeasureAUCPART0/ ./ 8120.250/ ./ 8090.8120/ ./ 8080.854/ NB0/ ./ 6490.4860/ ./ 6280.6490/ ./ 6280.603/ kNN0/ ./ 7550.2850/ ./ 7550.7550/ ./ 7550.715/ J480/ ./ 8180.2160/ ./ 8170.8180/ ./ 8170.814/ PART87/ ./ 1797.4681/ ./ 16NB77/ ./ 6791.0264/ ./ 88kNN90/ ./ 5697.2175/ ./ 46J4889/ ./ 8396.9581/ ./ 77/ 最优/ 算法/ kNN/ 第/ 2/ 层/ 分类/ 使用/ RotationForest/ 算法/ 对/ 第/ 1/ 层/ 选取/ 的/ 3/ 个/ 最优/ 分类器/ 使用/ 10/ 折/ 交叉/ 确认/ 重新/ 训练/ ,/ 得出/ 表/ 9/ ./ 由此/ 看出/ ,/ 经过/ RotationForest/ 算法/ 后/ ,/ 分类器/ 效果/ 得到/ 了/ 明显/ 的/ 改善/ ./ TPRateFPRatePrecisionRecallF/ -/ MeasureAUC/ 各个/ 组件/ 特征/ 0.9120/ ./ 090.9140/ ./ 9120.9130/ ./ 948/ 函数调用/ 特征/ 09750.0270/ ./ 9760.9750/ ./ 9750.988/ 系统/ 调用/ 特征/ 0.8740/ ./ 1640.8730/ ./ 8740.8730/ ./ 945/ 第/ 3/ 层/ 分类/ 使用/ 第/ 2/ 层/ 输出/ 的/ 3/ 个/ 最优/ 分类器/ 模型/ 并/ 结合/ 判决/ 算法/ 对/ 新/ 的/ 未知/ 应用程序/ 进行/ 检测/ ./ 依旧/ 采用/ 10/ 折/ 交叉/ 确认/ 对/ 3126/ 个/ 应用程序/ 进行/ 测试/ ,/ 得到/ 的/ 混淆/ 矩阵/ 为表/ 10/ ,/ 准确率/ 为/ 94.24/ %/ ./ 测试/ 结果/ 充分证明/ 了/ Androdect/ 系统/ 的/ 有效性/ ./ 预测/ 为/ ↓/ 非/ 恶意/ 应用/ // 个/ 恶意/ 应用/ // 个/ 非/ 恶意/ 应用/ 恶意/ 应用/ 5.3/ 结果/ 比较/ 为了/ 评估/ Androdect/ 系统/ 的/ 有效性/ ,/ 本文/ 将/ 提出/ 的/ 方法/ 与/ 近年来/ 的/ 相关/ 工作/ 进行/ 对比/ ,/ 并/ 与/ 国外/ 著名/ 的/ Androguard/ 工具/ 使用/ 相同/ 的/ 测试/ 样本/ 进行/ 对比/ 分析/ ./ 5.3/ ./ 1/ 与/ 近年来/ 相关/ 工作/ 的/ 对比/ 表/ 11/ 列出/ 了/ 本文/ 提出/ 的/ 方法/ 与/ 近年来/ 的/ 相关/ Page10/ 工作/ 的/ 对比/ 情况/ ./ DroidMat/ [/ 17/ ]/ 提取/ 权限/ 、/ Intent/ 、/ API/ 等/ 特征/ ,/ 使用/ 聚类/ 算法/ 进行/ 聚类/ 而后/ 使用/ 分类/ 算法/ 检测/ 恶意/ 应用/ ,/ 对比/ 了/ 两种/ 聚类/ 算法/ K/ -/ means/ 和/ ExpectationMaximization/ (/ EM/ )/ 以及/ 两种/ 分类/ 算法/ k/ -/ NearestNeighbor/ (/ kNN/ )/ 和/ NaveBayes/ (/ NB/ )/ 的/ 检测/ 结果/ ./ 该/ 方法/ 将/ 多类/ 特征/ 放在/ 一个/ 集合/ 中/ ,/ 使用/ 单一/ 种类/ 分类/ 算法/ 进行/ 检测/ ./ Andromaly/ [/ 15/ ]/ ,/ 动态/ 提取/ API/ 特征/ ,/ 对比/ 使用/ 3/ 种/ 特征选择/ 算法/ ChiSquare/ 、/ FisherScore/ 、/ InfoGain/ 和/ 6/ 种/ 数据挖掘/ 算法/ NB/ 、/ BN/ 、/ DTJ48/ 、/ Histogram/ 、/ K/ -/ means/ 、/ Logistic/ 的/ 测试/ 结果/ ,/ 缺点/ 一是/ 没有/ 使用/ 真实/ 的/ 恶意/ 应用/ 进行/ 实验/ 验证/ ,/ 仅/ 使用/ 自己/ 编写/ 的/ 4/ 个/ 恶意/ 应用/ 进行/ 检测/ ;/ 二是/ 动态/ 提取/ 整个/ 运行/ 环境/ 的/ API/ 特征/ ,/ 没有/ 表/ 11/ 相关/ 工作/ 对比/ 检测工具/ DroidMat/ [/ 17/ ]/ 权限/ 、/ API/ 、/ Intent/ 等/ 特征/ Andromaly/ [/ 15/ ]/ Crowdroid/ [/ 14/ ]/ AASandbox/ [/ 8/ ]/ 文献/ [/ 12/ ]/ 中/ 工具/ 文献/ [/ 13/ ]/ 中/ 工具/ Androdect/ 组件/ 、/ 系统/ 调用/ 、/ 函数调用/ 等/ 特征/ 动静/ 结合/ 综上所述/ ,/ DroidMat/ 和/ Androdect/ 系统/ 提取/ 了/ Android/ 应用/ 的/ 多类/ 行为/ 特征/ ,/ 充分反映/ 了/ Android/ 应用/ 恶意/ 行为/ 特征/ ;/ AASandbox/ 和/ Androdect/ 系统/ 采用/ 了/ 动/ 静态/ 结合/ 的/ 特征提取/ 技术/ ,/ 弥补/ 了/ 动/ 静态/ 分析/ 技术/ 各自/ 的/ 缺点/ ;/ 除了/ Androdect/ 系统/ ,/ 其它/ 工具/ 都/ 采用/ 单一/ 分类/ 或者/ 聚类/ 算法/ 进行/ 检测/ ;/ 本文/ 设计/ 的/ 实验/ 收集/ 了/ 更/ 多/ 现实/ 中/ 的/ 应用程序/ 进行/ 检测/ 来/ 验证/ 系统/ 的/ 有效性/ 和/ 准确性/ ./ 5.3/ ./ 2/ 与/ Androguard/ 对比/ 由于/ 在/ 网上/ 可以/ 很/ 容易/ 获得/ Androguard/ 工具/ ,/ 本文/ 使用/ 同样/ 的/ 测试/ 样本/ 对/ Androguard/ 以及/ Androdect/ 进行/ 了/ 测试/ ./ 使用/ Androguard/ 官方网站/ 提供/ 的/ Ubuntu/ 系统/ 镜像/ ARE/ (/ AndroidReverseEngineering/ )/ ,/ ARE/ 默认/ 安装/ 的/ Androguard/ 版本/ 过低/ ,/ 作者/ 没有/ 更新/ ,/ 本文/ 将/ 其/ 进行/ 更新/ ,/ 并/ 下载/ 相关/ 依赖/ 库/ 重新/ 编译/ ,/ 更新/ 至/ 2013/ 年/ 4/ 月/ 最新/ 版本/ Androguard/ -/ 1.9/ ./ 但是/ 最新/ 版本/ Androguard/ -/ 1.9/ 以及/ Androguard/ -/ 1.6/ 对于/ APK/ 的/ 解析/ 存在/ 问题/ ,/ 有/ 很多/ 不能/ 处理/ 的/ 应用程序/ ,/ 对/ 恶意/ 应用/ 的/ 检测/ 效果/ 很差/ ,/ 反而/ 较/ 低版本/ 更加/ 稳定/ ./ 并且/ 发现/ 更新/ 版本/ 的/ Androguard/ 签名/ 库/ 并/ 没有/ 发生变化/ ,/ 只是/ 加入/ 了/ 更/ 多/ 的/ 程序/ 分析/ 功能/ ,/ 对本/ 实验/ 没有/ 影响/ ./ 因此/ 本文/ 还是/ 与/ ARE/ 默认/ 安装/ 的/ Androguard/ 版本/ 进行/ 对比/ ./ 针对/ 运行/ 中/ 的/ APK/ 进行/ 特征提取/ ;/ 三是/ 测试/ 过程/ 多/ 人工/ 参与/ ./ Crowdroid/ [/ 14/ ]/ 使用/ 动态/ 方法/ 对系统/ 调用/ 进行/ 特征提取/ ,/ 基于/ K/ -/ means/ 聚类/ 算法/ 进行/ 检测/ ,/ 该/ 工具/ 只能/ 区分/ 同一/ 应用程序/ 的/ 各个/ 变种/ 是否/ 为/ 恶意/ 应用/ ./ AASandbox/ [/ 8/ ]/ 提出/ 了/ 动态/ 提取/ 系统/ 调用/ 特征/ 的/ 总体/ 框架/ 和/ 思想/ ,/ 没有/ 应用/ 数据挖掘/ 算法/ 进行/ 检测/ ,/ 也/ 没有/ 给出/ 验证/ 结果/ ./ 文献/ [/ 12/ ]/ 提出/ 的/ 工具/ 采用/ 静态方法/ 提取/ 函数调用/ 特征/ ,/ 对比/ 了/ 3/ 种/ 分类/ 算法/ CentroidMachine/ 、/ NB/ 、/ SVM/ 的/ 检测/ 结果/ ,/ 但/ 只/ 针对/ Symbian/ 系统/ 进行/ 了/ 验证/ ./ 文献/ [/ 13/ ]/ 静态/ 提取/ 了/ 函数调用/ 特征/ ,/ 对比/ 了/ 3/ 种/ 分类/ 算法/ PART/ 、/ Prism/ 、/ kNN/ 在/ Android/ 系统/ 上/ 的/ 检测/ 结果/ ,/ 对/ 240/ 个/ 应用/ 进行/ 验证/ ./ K/ -/ means/ 、/ LogisticAndroid4/ 个/ 自己/ 编写/ APKPART/ 、/ Prism/ 、/ kNNAndroid240/ 个/ APK/ 三层/ 混合/ 系综/ 算法/ Android3126/ 个/ APK/ 对比/ 发现/ ,/ Androguard/ 处理/ 大量/ 应用程序/ 时/ 无法/ 完全/ 自动化/ ,/ 并/ 有/ 部分/ 应用程序/ 不能/ 正确处理/ ,/ 进程/ 可能/ 被/ 意外/ 杀死/ ,/ 报错/ 退出/ ,/ 或者/ 停止/ 执行/ ./ 而且/ 运行/ 时间/ 慢/ ,/ 平均/ 一个/ 应用程序/ 大约/ 需要/ 运行/ 2.5/ min/ ,/ 程序/ 意外/ 中止/ 后/ 需/ 人工/ 发现/ 重启/ 程序/ ,/ 排除/ 运行/ 中/ 的/ 间隔时间/ ,/ 运行/ 3126/ 个/ 应用程序/ 需要/ 耗费/ 5.5/ 天/ 时间/ ./ 具体/ 的/ 对比/ 数据/ 如表/ 12/ 所示/ ,/ 测试/ 结果/ 使用/ 混淆/ 矩阵/ 说明/ ,/ 如表/ 13/ 、/ 表/ 10/ 所示/ ./ 由此/ 得出/ ,/ Androdect/ 在/ 准确率/ 上/ 高于/ Androguard/ ,/ 并且/ 运行/ 时间/ 短/ ,/ 可以/ 处理/ 几乎/ 所有/ 的/ 应用程序/ ./ 表/ 12Androdect/ 与/ Androguard/ 测试数据/ 对比/ Androguard90/ ./ 74/ 大于/ 5.51663126/ Androdect94/ ./ 242.1/ 预测/ 为/ ↓/ 非/ 恶意/ 应用/ // 个/ 恶意/ 应用/ // 个/ 非/ 恶意/ 应用/ 恶意/ 应用/ 5.3/ ./ 3/ 结论/ 改进/ 了/ 它们/ 的/ 缺点/ ,/ 主要/ 优点/ 有/ 以下/ 几个/ 方面/ :/ 本文/ 提出/ 的/ 系统/ 结合/ 了/ 上述/ 研究/ 方法/ 的/ 优点/ ,/ (/ 1/ )/ 以往/ 的/ 研究/ 方法/ 大多/ 提取/ 单一/ 种类/ 特征/ ,/ Page11/ 本文/ 提出/ 的/ 系统/ 提取/ 3/ 种/ 不同/ 类型/ 特征/ ,/ 充分反映/ 了/ 应用程序/ 行为/ ,/ 并且/ 该/ 系统/ 具有/ 可扩展性/ ,/ 可以/ 加入/ 更/ 多/ 类型/ 特征/ 进行/ 检测/ ./ (/ 2/ )/ 采用/ 动/ 静态/ 结合/ 的/ 特征提取/ 方法/ ,/ 动态/ 方法/ 弥补/ 了/ 静态方法/ 不能/ 检测/ 运行/ 中/ 释放/ 恶意代码/ 的/ 缺点/ ,/ 绕过/ 了/ 代码/ 加密/ 混淆/ 问题/ ;/ 静态方法/ 为/ 动态/ 方法/ 提供/ 了/ 运行/ 参数/ ,/ 解决/ 了/ 动态/ 方法/ 无法/ 处理/ 的/ 应用程序/ ./ (/ 3/ )/ 首次/ 设计/ 了/ 三层/ 混合/ 系综/ 算法/ THEA/ ,/ 可以/ 充分考虑/ 不同/ 类型/ 特征/ 在/ Android/ 恶意代码/ 检测/ 中所起/ 的/ 不同/ 作用/ ,/ 对/ 各类/ 特征/ 分别/ 选取/ 最优/ 基础/ 分类器/ 并/ 给出/ 综合/ 判决/ 结果/ ,/ 实验/ 证明/ 了/ 该/ 算法/ 的/ 有效性/ ./ (/ 4/ )/ 对/ 大量/ 现实/ 中/ 的/ 应用程序/ 进行/ 检测/ ,/ 可以/ 处理/ 几乎/ 所有/ 的/ 应用程序/ ,/ 并且/ 实现/ 了/ 完全/ 自动化/ ./ 6/ 讨论/ 第/ 5/ 节/ 介绍/ 了/ Androdect/ 系统/ 与/ 其它/ 相关/ 工作/ 比较/ 的/ 主要/ 优点/ ,/ 但是/ 该/ 系统/ 仍然/ 存在/ 一些/ 局限性/ ./ 下面/ 给出/ 该/ 系统/ 的/ 局限性/ 和/ 下/ 一步/ 工作/ 方向/ :/ (/ 1/ )/ 本文/ 提出/ 的/ Android/ 恶意/ 应用/ 检测/ 系统/ 具有/ 一定/ 的/ 扩展性/ ,/ 主要/ 表现/ 在/ 两个/ 方面/ ./ 一是/ 特征/ 类型/ 方面/ ,/ 可以/ 加入/ 更/ 多/ 类型/ 的/ 特征/ ,/ 不仅/ 局限于/ 本文/ 提出/ 的/ 3/ 类/ 特征/ ./ 例如/ ,/ 可以/ 加入/ 具体/ 的/ 权限/ 使用/ 情况/ 、/ 上层/ API/ 使用/ 情况/ 等/ 特征/ ;/ 二是/ 基础/ 分类器/ 的/ 选择/ ,/ 本文/ 强调/ 了/ 基础/ 分类器/ 的/ 选择/ 应/ 选取/ 差异/ 较大/ 的/ 不同/ 类型/ 的/ 分类器/ ,/ 也/ 可以/ 加入/ SVM/ 等/ 精度/ 更/ 高/ 的/ 分类器/ 作为/ 基础/ 分类器/ ,/ 本文/ 只/ 选取/ 了/ 之前/ 研究者/ 通常/ 使用/ 的/ 四个/ 分类器/ ,/ 下/ 一步/ 工作/ 中将/ 加入/ 分类/ 精度/ 更/ 高/ 的/ 分类器/ ./ (/ 2/ )/ 在/ Android/ 恶意/ 应用/ 的/ 检测/ 研究/ 中/ 本文/ 提出/ 分别/ 针对/ 不同/ 特征/ 做/ 分类/ 还/ 出于/ 以下/ 几个/ 原因/ :/ ①/ 不是/ 所有/ 的/ Android/ 应用程序/ 都/ 包含/ 本文/ 提取/ 的/ 全部/ 3/ 种/ 类型/ 特征/ ,/ 部分/ Android/ 应用程序/ 不/ 存在/ 本文/ 提取/ 的/ 函数调用/ 特征/ ,/ 部分/ Android/ 应用程序/ 没有/ 使用/ 组件/ ,/ 所以/ 无法/ 将/ 所有/ 特征/ 混在/ 一起/ 考虑/ ./ ②/ 一个/ Android/ 应用程序/ 的/ 组件/ 特征/ 只有/ 5/ 个/ ,/ 而/ 系统/ 调用/ 特征/ 可能/ 使用/ 100/ 多个/ ,/ 函数调用/ 特征/ 可能/ 使用/ 上/ 千个/ ,/ 如果/ 将/ 所有/ 这些/ 特征/ 融合/ 在/ 一起/ 考虑/ ,/ 那么/ 组件/ 类/ 的/ 5/ 个/ 特征/ 可能/ 会/ 被/ 淹没/ ./ 并且/ 对于/ 不同/ 类型/ 的/ 特征/ ,/ 本文/ 衡量/ 的/ 数据/ 不同/ ,/ 针对/ 组件/ 特征/ 本文/ 考虑/ 的/ 是/ 每个/ 应用程序/ 使用/ 每个/ 组件/ 的/ 个数/ ;/ 针对/ 系统/ 调用/ 特征/ 本文/ 考虑/ 的/ 是/ 每个/ 应用程序/ 使用/ 每个/ 函数调用/ 的/ 次数/ ;/ 针对/ 函数调用/ 特征/ 本文/ 考虑/ 的/ 是/ 每个/ 应用程序/ 使用/ 了/ 哪些/ 函数调用/ ./ ③/ 本文/ 提出/ 的/ 检测/ 系统/ 的/ 时间/ 消耗/ 主要/ 在/ 各类/ 特征提取/ 和/ 格式化/ 处理/ 部分/ ,/ 而/ 分类器/ 的/ 训练/ 和/ 检测/ 上/ 执行/ 时间/ 很/ 短/ ,/ 通常/ 在/ 几秒/ 或/ 几分钟/ 内/ 完成/ ,/ 并/ 不会/ 牺牲/ 很多/ 时间/ ./ (/ 3/ )/ 本文/ 中/ 的/ 动态/ 行为/ 特征提取/ 模块/ 使用/ 的/ 是/ Monkey/ 工具/ ①/ ,/ 它/ 是/ Android/ 中/ 的/ 一个/ 命令行/ 工具/ ,/ 可以/ 在/ 模拟器/ 或/ 实际/ 设备/ 中/ 运行/ ./ 它/ 向/ 系统/ 发送/ 伪/ 随机/ 的/ 用户/ 事件/ 流/ (/ 如/ 按键/ 输入/ 、/ 触摸屏/ 输入/ 、/ 手势/ 输入/ 等/ )/ ,/ 模拟/ 人类/ 使用/ 应用程序/ 的/ 动作/ ./ 后面/ 的/ 工作/ 可以/ 参考文献/ [/ 20/ ]/ 所/ 做/ 的/ 研究/ ,/ 在/ 动态/ 模拟/ 事件/ 时/ 基于/ UI/ (/ UserInterface/ )/ 智能/ 地有/ 规律/ 地/ 触发/ 事件/ ./ 但是/ ,/ 该/ 文献/ 也/ 指出/ ,/ 此/ 研究/ 没有/ 在/ 大量/ 应用程序/ 上/ 做/ 测试/ ,/ 因为/ 基于/ UI/ 触发/ 恶意/ 行为/ 的/ 应用程序/ 占/ 少数/ ./ (/ 4/ )/ 针对/ 多/ 类/ 特征/ 的/ 三层/ 混合/ 系综/ 算法/ 可以/ 结合/ 云/ 计算/ 平台/ 进行/ 更/ 快速/ 的/ 处理/ ,/ 进一步/ 研究/ 实现/ 在线/ 实时/ 数据/ 检测/ ,/ 预防/ 现有/ 的/ update/ 攻击/ ./ Update/ 攻击/ 就是/ 在/ 应用程序/ 提示/ 更新/ 后/ ,/ 用户/ 确认/ 并/ 下载安装/ 含有/ 恶意代码/ 的/ 更新/ 程序/ ./ (/ 5/ )/ 本文/ 实验/ 中/ 的/ 恶意/ 样本/ 已经/ 是/ 广为流传/ 的/ 恶意/ 应用/ ,/ 各大/ 杀毒软件/ 已经/ 在/ 各自/ 的/ 病毒库/ 中/ 包含/ 了/ 这些/ 病毒/ ,/ 所以/ 检测/ 率会/ 比较/ 高/ ./ 手机/ 上/ 的/ 杀毒软件/ 对/ 已知/ 病毒/ 的/ 查杀/ 率/ 也/ 比较/ 高/ ./ 根据/ 独立/ 安全/ 机构/ Av/ -/ test/ 在/ 2013/ 年/ 1/ 月/ 使用/ ESET/ 、/ Lookout/ :/ Antivirus/ &/ Security/ 、/ Kaspersky/ 、/ Qihoo360/ 等/ 22/ 个/ 手机/ 杀毒软件/ 对/ 869/ 个/ 已知/ Android/ 恶意/ 应用/ 的/ 检测/ 报告/ 显示/ ,/ 各大/ 手机/ 杀毒软件/ 的/ 平均/ 查杀/ 率为/ 94/ %/ ,/ 与/ 本文/ 工具/ 的/ 准确率/ 94.24/ %/ 相平/ ./ 而/ 本文/ 主要/ 研究/ 的/ 是/ 对/ 未知/ 恶意/ 应用/ 的/ 检测/ ,/ 在/ 此/ 方面/ ,/ 各大/ 厂商/ 没有/ 公开/ 自己/ 的/ 杀毒软件/ 的/ 技术细节/ ,/ 本文/ 无法/ 做/ 详细分析/ ./ 7/ 总结/ 本文/ 采用/ 动/ 静态/ 结合/ 的/ 技术/ 提取/ Android/ 应用/ 的/ 多类/ 行为/ 特征/ ,/ 通过/ 设计/ 三层/ 混合/ 系综/ 算法/ THEA/ 建立/ 检测/ 模型/ ,/ 并/ 实现/ 检测工具/ Androdect/ 进行/ 恶意代码/ 检测/ ./ 一方面/ 弥补/ 了/ 动态分析/ 和/ 静态/ 分析/ 各自/ 的/ 缺点/ ,/ 另一方面/ 充分考虑/ 了/ 不同/ 类型/ 特/ ①/ UI/ // ApplicationExerciserMonkey/ [/ EB/ // OL/ ]/ ,/ http/ :/ // // devel/ -/ Page12/ 征在/ Android/ 恶意/ 行为/ 检测/ 中所起/ 的/ 不同/ 作用/ ,/ 对/ 各类/ 特征/ 分别/ 选取/ 最优/ 算法/ 并/ 给出/ 综合/ 判决/ 结果/ ./ 使用/ Androdect/ 对/ 现实/ 中/ 1126/ 个/ 恶意/ 应用/ 和/ 2000/ 个/ 非/ 恶意/ 应用/ 进行/ 测试/ ./ 实验/ 结果表明/ ,/ Androdect/ 在/ 准确率/ 和/ 执行/ 效率/ 上/ 表现/ 良好/ ,/ 优于/ 其它/ 著名/ 的/ 恶意代码/ 检测工具/ ./ 下/ 一步/ 工作/ 将/ 研究/ 加入/ 更/ 多/ 类型/ 行为/ 特征/ 以及/ 精度/ 更/ 高/ 的/ 基础/ 分类/ 算法/ ,/ 在/ 动态/ 阶段/ 模拟/ 更/ 精确/ 的/ 用户/ 触发/ 行为/ ,/ 并/ 对/ 三层/ 混合/ 系综/ 算法/ 结合/ 云/ 计算/ 实现/ 更/ 快速/ 的/ 处理/ ,/ 进一步/ 完善/ 系统/ ./ 致谢/ 感谢/ 我/ 的/ 导师/ 、/ 师兄/ 以及/ 我们/ 的/ 团队/ 给予/ 我/ 的/ 所有/ 帮助/ ,/ 还要/ 感谢/ 给予/ 此/ 论文/ 意见/ 和/ 帮助/ 的/ 各位/ 审稿/ 专家/ 和/ 编辑/ ,/ 最后/ 感谢/ 我/ 的/ 家人/ 给予/ 我/ 的/ 大力支持/ !/ 

