Page1/ 基于/ 随机/ 游走/ 的/ 大容量/ 固态/ 硬盘/ 磨损/ 均衡/ 算法/ 赵鹏/ 白石/ (/ 清华大学/ 计算机科学/ 与/ 技术/ 系/ 北京/ 100084/ )/ 摘要/ 基于/ 闪存/ 的/ 大容量/ 固态/ 硬盘/ (/ SSD/ )/ 能够/ 在/ 未来/ 取代/ 磁盘/ ./ 它/ 有/ 很多/ 优点/ ,/ 包括/ 非易/ 失性/ 、/ 低能耗/ 、/ 抗震性/ 强/ 等/ ./ 然而/ ,/ 基于/ NAND/ 闪存/ 的/ 存储/ 块/ 自身/ 存在/ 有限/ 的/ 擦除/ 重写/ 次数/ 的/ 问题/ 一直/ 影响/ 着/ 它/ 的/ 广泛应用/ ./ 当/ 闪存/ 芯片/ 达到/ 擦除/ 重写/ 的/ 限制/ 次数/ 后/ ,/ 存储/ 块/ 上/ 的/ 数据/ 就/ 会/ 变得/ 不/ 可靠/ ./ 目前/ 研究者/ 们/ 已经/ 提出/ 了/ 一些/ 磨损/ 均衡/ 算法/ 来/ 解决/ 这个/ 问题/ ./ 但/ 当/ 固态/ 硬盘/ 的/ 存储容量/ 不断/ 增大/ 后/ ,/ 这些/ 算法/ 需要/ 越来越/ 多/ 的/ 内存容量/ 来/ 保证/ 运行/ ./ 文中/ 提出/ 一种/ 基于/ 随机/ 游走/ 的/ 磨损/ 均衡/ 算法/ 来/ 应用/ 在/ 大容量/ 的/ 固态/ 硬盘/ 上/ ,/ 该/ 算法/ 能够/ 很大/ 程度/ 地/ 减少/ 内存/ 消耗/ ./ 实验/ 表明/ 所/ 需/ 内存容量/ 仅为/ BET/ 算法/ 的/ 15.6/ %/ ,/ 与此同时/ 磨损/ 均衡/ 的/ 性能/ 并/ 没有/ 降低/ ./ 关键词/ 闪存/ ;/ 固态/ 硬盘/ ;/ 磨损/ 均衡/ ;/ 随机/ 游走/ 1/ 引言/ 闪存/ 是/ 一种/ 非易失/ 的/ 存储介质/ ,/ 具有/ 体积小/ 、/ 能耗/ 低/ 、/ 抗震性/ 强/ 等/ 特点/ ,/ 被/ 广泛应用/ 于/ MP3/ 播放器/ 、/ 智能手机/ 、/ 掌上电脑/ 、/ 数码相机/ 等/ 电子/ 消费类/ 设备/ ./ 随着/ 闪存/ 容量/ 的/ 不断/ 增大/ ,/ 基于/ 闪存/ 的/ 固态/ 硬盘/ 随/ Page2/ 正在/ 慢慢/ 成为/ 主流/ 存储设备/ ./ 本文/ 提出/ 了/ 一种/ 应用/ 于/ 大容量/ 的/ 固态/ 硬盘/ 的/ 基于/ 随机/ 游走/ 的/ 磨损/ 均衡/ 算法/ ./ 利用/ 该/ 算法/ 能够/ 很大/ 程度/ 地/ 减少/ 控制器/ 的/ 内存/ 消耗/ ,/ 与此同时/ 又/ 不会/ 降低/ 磨损/ 均衡/ 的/ 性能/ ./ 文章/ 首先/ 分析/ 闪存/ 及/ 固态/ 硬盘/ 的/ 发展趋势/ ,/ 随后/ 在/ 第/ 2/ 节/ 着重/ 介绍/ 闪存/ 存储芯片/ 的/ 内部结构/ 以及/ 存在/ 的/ 磨损/ 均衡/ 问题/ ;/ 第/ 3/ 节/ 介绍/ 关于/ 磨损/ 均衡/ 方面/ 的/ 相关/ 工作/ ;/ 在/ 第/ 4/ 节中/ 引入/ 随机/ 游走/ 的/ 概念/ 和/ 模型/ ,/ 并/ 将/ 其/ 设计/ 到/ 我们/ 提出/ 的/ 算法/ 中/ ,/ 还/ 介绍/ 存储/ 面所/ 维护/ 的/ 元/ 数据/ ,/ 最后/ 给出/ 了/ 算法/ 的/ 整体/ 流程/ ;/ 第/ 5/ 节/ 给出/ 本文/ 算法/ 的/ 一些/ 实验/ 结果/ 并/ 进行/ 比较/ 分析/ ;/ 第/ 6/ 节对/ 工作/ 做出/ 总结/ 和/ 展望/ ./ 2/ 固态/ 硬盘/ 的/ 内部结构/ 近几年来/ ,/ 英特尔/ 、/ 三星/ 等/ 电子/ 制造厂商/ 设计/ 实现/ 了/ 多种/ 基于/ 闪存/ 的/ 固态/ 硬盘/ 产品/ ./ 厂商/ 通常/ 使用/ MLC/ (/ 多层/ 存储单元/ )/ 来/ 降低/ 固态/ 硬盘/ 的/ 制造/ 成本/ ./ 然而/ MLC/ 的/ 单元/ 磨损/ 上/ 限值/ 远远/ 低于/ SLC/ (/ 单层/ 存储单元/ )/ ./ 一个/ 闪存/ 芯片/ 由/ 多个/ 存储/ 面/ (/ plane/ )/ 组成/ ,/ 每个/ 存储/ 面由/ 多个/ 存储/ 块/ (/ block/ )/ 组成/ ,/ 而/ 每个/ 存储/ 块/ 又/ 可以/ 分成/ 一定/ 数量/ 的/ 存储/ 页/ (/ page/ )/ ./ 存储/ 块/ 是/ 擦除/ 操作/ 的/ 最小/ 单元/ ,/ 而读/ 和/ 写/ 操作/ 是/ 以/ 存储/ 页/ 为/ 单位/ 的/ ./ 当/ 一个/ 存储/ 页/ 被/ 写入/ 数据/ 后/ ,/ 它/ 只有/ 在/ 进行/ 了/ 擦除/ 操作/ 后/ 才能/ 再次/ 写入/ 新/ 的/ 数据/ ./ 这个/ 特点/ 称为/ 写前/ 擦除/ ./ 因此/ ,/ 利用/ 非/ 本地/ 更新/ 数据/ 的/ 方法/ 是/ 将要/ 更新/ 的/ 数据/ 写/ 到/ 空闲/ 存储/ 区域/ ,/ 从而/ 替代/ 老/ 版本/ 的/ 数图/ 116GB/ 闪存/ 内部/ 结构图/ 如图/ 2/ 所示/ ,/ 基于/ 闪存/ 的/ 固态/ 硬盘/ 通常/ 包含/ 一个/ 控制器/ 和/ 一系列/ 的/ NAND/ 闪存/ 芯片/ ./ 它/ 给/ 主机/ 系统/ 提供/ 并行/ ATA/ 、/ 串行/ ATA/ 、/ PCI/ -/ E/ 和/ USB/ 等/ 逻辑/ 磁盘/ 接口/ ./ 控制器/ 中/ 包含/ 一个/ 闪存/ 转换/ 层/ (/ FTL/ )/ ./ 据/ ./ 最新/ 版本/ 的/ 数据/ 是/ 有效/ 的/ ,/ 而/ 老/ 版本/ 的/ 数据/ 是/ 无效/ 的/ ./ 在/ 闪存/ 中/ 可能/ 同时/ 存在/ 同一/ 逻辑/ 地址/ 数据/ 的/ 多个/ 不同/ 版本/ ./ 存储/ 有效/ 数据/ 的/ 存储/ 页/ 称为/ 有效/ 页/ ,/ 存储/ 无效/ 数据/ 的/ 存储/ 页/ 称为/ 无效/ 页/ ./ 虽然/ NAND/ 闪存/ 有/ 不少/ 优点/ ,/ 但是/ 它/ 还有/ 一些/ 缺点/ ,/ 比如/ ,/ 由/ 写/ 前/ 擦除/ 引起/ 的/ 高/ I/ // O/ 延迟/ 和/ 由/ 擦除/ 重写/ 次数/ 限制/ 带来/ 的/ 不可靠性/ ./ 当/ 达到/ 擦除/ 重写/ 的/ 限制/ 次数/ 后/ ,/ 数据/ 就/ 会/ 变得/ 不/ 可靠/ ./ 当前/ SLCNAND/ 闪存/ 的/ 擦除/ 重写/ 次数/ 限制/ 为/ 100000/ 次/ ,/ 而/ MLC/ 的/ 仅/ 为/ 10000/ 次/ ./ 如果/ 数据/ 总是/ 被/ 写/ 到/ 同一个/ 闪存/ 地址/ ,/ 频繁/ 的/ 更新/ 数据/ 会/ 使/ 存储/ 块/ 失效/ ./ 为了/ 延长/ 闪存/ 的/ 使用寿命/ ,/ 基本/ 的/ 方法/ 是/ 数据/ 不/ 在/ 同一个/ 地址/ 被/ 更新/ 并且/ 各个/ 存储/ 块/ 均匀/ 地被/ 更新/ ,/ 这/ 就是/ 磨损/ 均衡/ ./ 也就是说/ 需要/ 将/ 数据/ 写入/ 操作/ 均匀/ 地/ 分布/ 到/ 各个/ 存储/ 块/ 上/ ,/ 从而/ 达到/ 磨损/ 均衡/ 的/ 目的/ ./ 本文/ 选用/ 了/ 常见/ 的/ 三星/ K9XXG08UXM/ [/ 1/ -/ 2/ ]/ NAND/ 闪存/ 进行/ 分析/ 讨论/ ./ 图/ 1/ 给出/ 了/ 16GBMLCNAND/ 闪存/ 芯片/ 的/ 内部结构/ ./ 一个/ 16GB/ 的/ 闪存/ 封装/ 单元/ 包含/ 8/ 个/ 2GB/ 的/ 闪存/ 芯片/ ./ 每个/ 闪存/ 芯片/ 包含/ 8192/ 个/ 存储/ 块/ ,/ 由/ 4/ 个/ 包含/ 2048/ 个/ 存储/ 块/ 的/ 存储/ 面/ 组成/ ./ 闪存/ 芯片/ 可以/ 独立/ 操作/ ,/ 每/ 一个/ 操作/ 包含/ 对/ 一个/ 或/ 两个/ 存储/ 面/ 的/ 操作/ ./ 每个/ 存储/ 块/ 包含/ 64/ 个/ 4KB/ 大小/ 的/ 存储/ 页/ ./ 每个/ 存储/ 页/ 有/ 4096/ +/ 128B/ ./ 在/ 每个/ 存储/ 页/ 中/ 可以/ 划分/ 为/ 用户/ 数据/ 区/ (/ 4096B/ )/ 和/ 冗余/ 数据/ 区/ (/ 128B/ )/ ./ 冗余/ 数据/ 区/ 用于/ 存放数据/ 错误/ 检测/ 信息/ 和/ 其它/ 元/ 数据/ ,/ 用户/ 数据/ 区则/ 用于/ 存放/ 通用/ 的/ 数据/ ./ 闪存/ 转换/ 层/ 负责/ 实现/ 地址映射/ 、/ 磨损/ 均衡/ 、/ 差错控制/ 和/ 垃圾/ 回收/ 等/ 功能/ ./ 由于/ 垃圾/ 回收/ 的/ 单位/ 是/ 数据/ 块/ ,/ 当/ 一个/ 数据/ 块/ 要/ 被/ 擦除/ 时/ ,/ 数据/ 块/ 中/ 的/ 有效/ 数据/ 必须/ 要/ 复制到/ 其它/ 空闲/ 数据/ 页/ 来/ 保证数据/ 不会/ 丢失/ ./ Page33/ 相关/ 工作/ 在/ 闪存/ 中/ ,/ 数据/ 更新/ 程度/ 是/ 不/ 一样/ 的/ ./ 更新/ 频繁/ 的/ 数据/ 称为/ 热/ 数据/ ,/ 而/ 很少/ 更改/ 的/ 数据/ 称为/ 冷/ 数据/ ./ 如果/ 热/ 数据/ 在/ 某/ 一个/ 存储/ 块/ 上/ 被/ 频繁/ 地/ 更新/ ,/ 则/ 这个/ 存储/ 块/ 可能/ 比/ 其它/ 块/ 更/ 快/ 失效/ ./ 目前/ 研究/ 人员/ 已经/ 提出/ 了/ 很多/ 有效/ 的/ 闪存/ 磨损/ 均衡/ 算法/ [/ 3/ ]/ ./ 磨损/ 均衡/ 算法/ 的/ 目标/ 是/ 通过/ 均匀/ 地/ 将/ 擦除/ 操作/ 分布/ 到/ 整个/ 存储空间/ 来/ 延长/ 闪存/ 的/ 使用寿命/ ./ 随着/ 闪存/ 技术/ 的/ 发展/ ,/ 闪存/ 的/ 容量/ 不断/ 增大/ ,/ 而/ 支持/ 磨损/ 均衡/ 的/ 内存空间/ 需求/ 也/ 变得/ 很大/ ./ 相比/ 于/ 闪存/ ,/ 人们/ 对/ 固态/ 硬盘/ 的/ 磨损/ 均衡/ 算法/ 研究/ 较少/ ./ 现有/ 的/ 磨损/ 均衡/ 算法/ 可以/ 被/ 分成/ 两类/ :/ 动态/ 磨损/ 均衡/ 算法/ 和/ 静态/ 磨损/ 均衡/ 算法/ ./ 3.1/ 动态/ 磨损/ 均衡/ 算法/ 动态/ 磨损/ 均衡/ 算法/ 主要/ 是/ 防止/ 热/ 数据/ 写/ 到/ 同一个/ 数据/ 块/ 上/ ,/ 因此/ 不/ 存在/ 某个/ 数据/ 块/ 比/ 其它/ 数据/ 块/ 更/ 容易/ 磨损失效/ ./ Ban/ [/ 4/ ]/ 提出/ 要/ 在/ 一定/ 的/ 数据/ 擦除/ 操作/ 次数/ 后/ 随机/ 选择/ 一个/ 数据/ 块/ 进行/ 擦除/ ./ Woodhouse/ [/ 5/ ]/ 提出/ ,/ 在/ 100/ 次/ 擦除/ 操作/ 后要/ 随机/ 选择/ 一个/ 全部/ 数据/ 都/ 是/ 有效/ 的/ 数据/ 块/ 进行/ 擦除/ ./ 然而/ ,/ 动态/ 磨损/ 均衡/ 算法/ 的/ 问题/ 在于/ 存储/ 冷/ 数据/ 的/ 块/ 的/ 擦除/ 次数/ 远/ 小于/ 那些/ 存储/ 热/ 数据/ 的/ 数据/ 块/ ./ 这/ 将/ 导致/ 冷热/ 数据/ 块/ 之间/ 的/ 不/ 均衡/ ,/ 热/ 数据/ 块/ 很/ 容易/ 失效/ ./ 3.2/ 静态/ 磨损/ 均衡/ 算法/ 为了/ 防止/ 冷/ 数据/ 块/ 保持/ 不变/ ,/ 研究/ 人员/ 又/ 提出/ 了/ 很多/ 静态/ 磨损/ 均衡/ 算法/ ./ 静态/ 磨损/ 均衡/ 算法/ 试图/ 将/ 冷/ 数据/ 移动/ 到/ 被/ 擦/ 过/ 多次/ 的/ 块/ 中/ 从而/ 保证/ 更加/ 均衡/ 的/ 磨损/ ./ Dual/ -/ Pool/ [/ 6/ ]/ 方法/ 维护/ 了/ 两个/ 存储/ 池/ ,/ 分别/ 存放/ 热/ 数据/ 块/ 和/ 冷/ 数据/ 块/ ,/ 通过/ 数据/ 计算/ 来/ 对/ 两个/ 存储/ 池中/ 的/ 数据/ 块/ 进行/ 交换/ ,/ 但会/ 增加/ 大量/ 不必要/ 的/ 交换/ 开销/ ./ BET/ [/ 7/ ]/ 方法/ 则/ 采用/ 一个/ “/ 擦除/ 位/ 图表/ ”/ 来/ 维护/ 数据/ 块/ 的/ 擦除/ 状态/ ./ 如果/ 数据/ 块/ 的/ 个数/ 很多/ ,/ 则/ “/ 擦除/ 位/ 图表/ ”/ 也/ 将/ 变得/ 很大/ ./ 还有/ 很多/ 算法/ 是/ 通过/ 维护/ 整个/ 闪存/ 上/ 数据/ 块/ 的/ 信息/ 来/ 保证/ 擦除/ 操作/ 的/ 均衡性/ ,/ 但是/ 当/ 闪存/ 容量/ 变大/ 的/ 时候/ ,/ 它们/ 需要/ 更/ 多/ 的/ 内存空间/ 来/ 存储/ 每个/ 数据/ 块/ 和/ 数据/ 页/ 的/ 信息/ 以/ 完成/ 策略/ 的/ 运算/ ./ 4/ 随机/ 游走/ 磨损/ 均衡/ 算法/ 算法/ 的/ 主要/ 目标/ 是/ 减少/ 控制器/ 的/ 内存/ 开销/ ,/ 降低/ 能耗/ ,/ 其/ 本身/ 具有/ 极强/ 的/ 容量/ 可扩展性/ ,/ 即使/ 固态/ 硬盘/ 的/ 容量/ 达到/ 数百/ GB/ 甚至/ 上万/ GB/ 也/ 不会/ 消耗/ 太/ 多/ 内存容量/ ./ 由于/ 闪存/ 芯片/ 的/ 物理/ 结构/ ,/ 考虑/ 以/ 一个/ 包含/ 2048/ 个块/ 的/ 存储/ 面/ 作为/ 一个/ 分组/ ./ 只为/ 每个/ 分组/ (/ 一个/ 存储/ 面/ )/ 维护/ 少量/ 的/ 元/ 数据/ 信息/ ,/ 而/ 不是/ 维护/ 每个/ 数据/ 块/ 的/ 信息/ ./ 根据/ 每个/ 存储/ 面/ 的/ 元/ 数据/ 信息/ ,/ 可以/ 选择/ 一个/ 合适/ 的/ 存储/ 面来/ 进一步/ 决定/ 哪个/ 块/ 被/ 擦除/ ./ 然后/ 采用/ 有/ 偏向/ 的/ 随机/ 游走/ 算法/ 来/ 最终/ 决定/ 需要/ 擦除/ 的/ 目标/ 数据/ 块/ ./ 4.1/ 随机/ 游走/ 模型/ 随机/ 游走/ [/ 8/ -/ 9/ ]/ 是/ 一种/ 有趣/ 的/ 理论/ ,/ 其/ 基本/ 含义/ 是/ 一系列/ 运动/ 中/ 的/ 每/ 一步/ 的/ 方向/ 和/ 长度/ 都/ 是/ 随机/ 决定/ 的/ ,/ 如同/ 一个/ 人/ 随机/ 地/ 行走/ ./ 一个/ 最/ 基本/ 的/ 随机/ 游走/ 模型/ 是/ ,/ 在/ 规则/ 格子/ 上/ 随机/ 游走/ 的/ 每/ 一步/ 都/ 根据/ 某个/ 概率分布/ 移动/ 到/ 另/ 一个/ 格子/ 交叉点/ 上/ ./ 在/ 最/ 简单/ 的/ 随机/ 游走/ 中/ ,/ 每/ 一步/ 只能/ 跨越/ 一个/ 方格/ 而/ 到达/ 相邻/ 的/ 方格/ 交叉点/ 上/ ./ 在/ 有限/ 方格/ 的/ 简单/ 均衡/ 随机/ 游走/ 中/ ,/ 每/ 一步/ 到达/ 相邻/ 的/ 格子/ 交叉点/ 的/ 概率/ 是/ 相同/ 的/ ./ 给出/ 一个/ 在/ N/ 维空间/ 整数/ 格上/ 随机/ 游走/ 的/ 实例/ ./ 首先/ ,/ 考虑/ 在/ 数轴/ 上/ 的/ 一维/ 随机/ 游走/ ,/ 每/ 一步/ 移动/ 都/ 可能/ 到达/ 左边/ 或/ 右边/ 的/ 概率/ 是/ 那么/ 一维/ 随机/ 游走/ 就/ 是从/ 原点/ 出发/ ,/ 然后/ 在/ 一维/ 数轴/ 上/ 不断/ 重复/ 随机/ 游走/ 过程/ ./ 根据/ 图/ 1/ ,/ 闪存/ 芯片/ 的/ 内部/ 可以/ 看成/ 是/ 二维/ 方格/ ,/ 那么/ 一个/ 最/ 基本/ 的/ 想法/ 就是/ 将/ 随机/ 游走/ 映射/ 到/ 闪存/ 的/ 层次化/ 结构/ 上/ ./ 图/ 3/ 给出/ 了/ 在/ 闪存/ 上/ 进行/ 随机/ 游走/ 的/ 情况/ ./ 在/ 行走/ 过程/ 的/ 每/ 一步/ 都/ 有/ 4/ 种/ 移动/ 方向/ 的/ 选择/ ,/ X/ 轴/ 表示/ 存储/ 面号/ ,/ Y/ 轴/ 代表/ 数据/ 块/ 号/ ./ 为了/ 能/ 使/ 数据/ 块/ 均匀/ 地被/ 擦除/ ,/ 我们/ 采用/ 有/ 偏向/ Page4/ 的/ 随机/ 游走/ 来/ 控制/ 每步/ 移动/ 的/ 概率/ ./ 对/ 每个/ 数据/ 块/ 要/ 给出/ 方向/ 选择/ 的/ 权重/ 作为/ 参数/ ./ 比如/ 得到/ 向/ 左侧/ 移动/ 的/ 概率/ 是/ :/ wleft/ 和/ wright/ 分别/ 表示/ 向/ 左/ 移动/ 和/ 向/ 右/ 移动/ 的/ 权重/ 参数/ ./ 4.2/ 闪存/ 存储/ 面上/ 的/ 元/ 数据/ 动态随机/ 存储器/ (/ DRAM/ )/ 相比/ 于/ 闪存/ 价格/ 更高/ ,/ 而且/ DRAM/ 内存容量/ 更大时/ 需要/ 消耗/ 更/ 多/ 的/ 能量/ ,/ 会/ 造成/ 很大/ 的/ 电力/ 损耗/ ./ 通常/ ,/ 如图/ 2/ 所示/ ,/ 大容量/ 固态/ 硬盘/ 的/ 控制器/ 会/ 采用/ 64MB/ 或/ 更/ 大/ 的/ DRAM/ 内存容量/ 来/ 存储/ 控制/ 磨损/ 均衡/ 的/ 数据表/ ./ 我们/ 设计/ 算法/ 的/ 主要/ 目的/ 是/ 减少/ 维护/ 磨损/ 均衡/ 数据/ 的/ 内存/ 开销/ ,/ 并且/ 达到/ 和/ 其它/ 算法/ 相当/ 的/ 性能/ ./ 我们/ 提出/ 的/ 算法/ 只/ 在/ 内存/ 中/ 维护/ 每个/ 闪存/ 存储/ 面/ 的/ 元/ 数据/ ,/ 而/ 不/ 需要/ 在/ 内存/ 中/ 维护/ 每个/ 数据/ 块/ 的/ 元/ 数据/ ./ 每个/ 闪存/ 存储/ 面/ 可以/ 被/ 认为/ 是/ 闪存/ 数据/ 块/ 组/ ./ 采用/ 闪存/ 存储/ 面而/ 不是/ 任意/ 大小/ 的/ 数据/ 块/ 组有/ 更/ 大/ 的/ 好处/ ,/ 闪存/ 芯片/ 支持/ 一些/ 新/ 的/ 操作/ ,/ 例如/ 三星/ 的/ 闪存/ 芯片/ 支持/ 内部/ 的/ 写/ 回/ 优化/ ,/ 允许/ 数据/ 在/ 闪存/ 存储/ 面/ 内部/ 从/ 一个/ 数据/ 块/ 传输/ 到/ 另/ 一块/ 上/ 不/ 需要/ 通过/ 外围/ 的/ 引脚/ ,/ 从而/ 加快/ 传输速度/ ./ 在/ 每个/ 闪存/ 存储/ 面/ 的/ 元/ 数据/ 的/ 维护/ 中/ ,/ 我们/ 选择/ 了/ 两种/ 统计数据/ 值/ ,/ 期望值/ E/ 和/ 方差/ Var/ ./ 在/ 这种/ 情况/ 下/ ,/ 期望值/ 是/ 闪存/ 存储/ 面上/ 的/ 所有/ 数据/ 块/ 的/ 平均/ 擦除/ 次数/ ./ 方差/ 则/ 表示/ 相同/ 闪存/ 存储/ 面上/ 的/ 所有/ 数据/ 块/ 的/ 各个/ 擦除/ 次数/ 距离/ 期望值/ 的/ 变化/ 大小/ ./ 较/ 小/ 的/ 方差/ 能够/ 表明/ 在/ 某个/ 存储/ 面内/ 的/ 每个/ 块/ 的/ 擦除/ 次数/ 趋向于/ 平均/ 擦除/ 次数/ ,/ 而/ 较大/ 的/ 方差/ 则/ 能够/ 表明/ 擦除/ 次数/ 的/ 差异性/ 很大/ ./ 在/ 固态/ 硬盘/ 的/ 控制器/ 初始化/ 时/ ,/ 应当/ 读入/ 每个/ 存储/ 面上/ 每个/ 块/ 的/ 擦除/ 次数/ 来/ 计算/ 相应/ 的/ E/ 和/ Var/ ./ 当/ 一个/ 块/ 被/ 擦除/ 后/ ,/ 统计/ 值/ 需要/ 被/ 重新/ 计算/ ./ 例如/ ,/ ec/ 用来/ 表示/ 一个/ 数据/ 块/ 的/ 擦除/ 次数/ ,/ 如果/ 通过/ 一次/ 擦除/ 操作/ ,/ 其中/ 一个/ 数据/ 块/ 的/ 擦除/ 次数/ 从/ ec/ 更新/ 到/ ec/ ,/ 则/ 存储/ 面上/ 的/ 期望值/ 更新/ 为/ N/ 表示/ 一个/ 闪存/ 存储/ 面上/ 的/ 数据/ 块/ 个数/ ./ 那么/ 当/ 一次/ 擦除/ 操作/ 需要/ 擦除/ 同一/ 存储/ 面上/ 的/ n/ (/ n/ / 1/ )/ 个/ 数据/ 块/ 时/ ,/ 则/ 存储/ 面上/ 的/ 期望值/ 更新/ 为/ 由于/ 方差/ 的/ 计算/ 依赖于/ 期望值/ ,/ 同样/ 条件/ 下方/ Var/ =/ Var/ +/ 2n/ (/ ec/ -/ E/ )/ 差/ 的/ 计算公式/ 如下/ 所示/ :/ 4.3/ 算法/ 流程/ 算法/ 基于/ 大容量/ 固态/ 盘/ 上/ 广泛应用/ 的/ 块/ 映射/ FTL/ [/ 10/ ]/ ./ 块/ 映射/ FTL/ 相比/ 页/ 映射/ FTL/ 需要/ 更少/ 的/ 内存/ ./ FTL/ 是/ 固态/ 硬盘/ 中/ 的/ 一个/ 重要/ 组成部分/ ,/ 主要/ 负责/ 地址/ 转换/ ,/ 它/ 同样/ 需要/ 在/ DRAM/ 内存/ 中/ 维护/ 一个/ 地址/ 转换/ 表/ ,/ 基于/ 块/ 粒度/ 的/ 转换/ 表/ 显然/ 比/ 基于/ 页/ 粒度/ 的/ 转换/ 表/ 节省/ 内存空间/ ./ 在/ 块/ 映射/ FTL/ 中/ ,/ 会/ 将/ 上层/ 操作系统/ 的/ 逻辑/ 块/ 地址/ (/ LBA/ )/ 请求/ 转换/ 为/ 物理/ 块/ 地址/ (/ PBA/ )/ ./ 每个/ 逻辑/ 块/ 地址/ 会/ 根据/ 地址/ 转换/ 表/ 被/ 分成/ 逻辑/ 数据/ 块/ 号/ 和/ 偏移/ 地址/ ./ 利用/ 物理/ 块/ 地址/ 可以/ 访问/ 具体/ 的/ 存储/ 面上/ 的/ 某/ 数据/ 块/ 中/ 的/ 数据/ ./ 图/ 4/ 给出/ 了/ 随机/ 游走/ 磨损/ 均衡/ 算法/ 的/ 基本/ 流程/ ./ 在/ 算法/ 初始/ 阶段/ ,/ 首先/ 需要/ 计算/ 每个/ 存储/ 面/ 的/ E/ 和/ Var/ ./ 为了/ 节省/ 计算/ 时间/ ,/ 每个/ 存储/ 面/ 的/ 元/ 数据/ 会/ 事先/ 存储/ 到/ 固态/ 硬盘/ 的/ 特定/ 区域/ 中/ ./ 系统/ 开机/ 后/ ,/ 直接/ 将/ 需要/ 维护/ 的/ 元/ 数据/ 进行/ 加载/ ./ 若/ 固态/ 硬盘/ 中/ 不/ 存在/ 元/ 数据表/ ,/ 则/ 首先/ 需要/ 在/ 固态/ 硬盘/ 控制器/ 的/ 内存/ 中/ 创建/ 元/ 数据表/ ,/ 创建/ 元/ 数据表/ 需要/ 读取/ 每个/ 存储/ 面上/ 的/ 所有/ 物理/ 块/ 的/ 元/ 数据/ 中/ 的/ 擦除/ 次数/ ,/ 然后/ 计算/ 每个/ 存储/ 面/ 的/ 数学/ 期望/ E/ 和/ 方差/ Var/ ./ 面内位/ 算法/ ./ 基于/ 随机/ 游走/ 的/ 磨损/ 均衡/ 算法/ 流程/ ./ 1/ ./ 利用/ 式/ (/ 4/ )/ 和/ (/ 5/ )/ 为/ 每个/ 闪存/ 存储/ 面/ i/ 计算/ Ei/ 和/ Vari/ 初始化/ 面/ 2/ ./ 根据/ Ei/ 对/ 存储/ 面/ 进行/ 排序/ ./ 3/ ./ 利用/ 方差/ Var/ 在/ 数学/ 期望/ E/ 最小/ 的/ M/ 个/ 存储/ 面组/ 中/ 选择/ 方/ 4/ ./ 随机/ 游走/ ,/ 利用/ 数据/ 块/ 中/ 的/ 擦写/ 次数/ 来/ 计算/ 移动/ 方向/ 的/ 概率/ ./ 5/ ./ 利用/ 左右/ 移动/ 的/ 概率/ 来/ 决定/ 移动/ 方向/ ./ 6/ ./ 将/ 指针/ 移动/ 到/ 目标/ 数据/ 块/ ,/ 更新/ 面内/ 位置/ 指针/ p/ ./ 7/ ./ 如果/ 目标/ 数据/ 块块/ 中/ 含有/ 有效/ 数据/ ,/ 则/ 将/ 数据/ 拷贝到/ 合适/ 的/ 8/ ./ 擦除/ 目标/ 数据/ 块/ ,/ 更新/ 目标/ 块/ 的/ 擦除/ 次数/ 和/ 相关/ 的/ Ei/ 和/ Vari/ ./ 差/ 最大/ 的/ 存储/ 面为/ 目标/ 存储/ 面/ ./ 内/ 位置/ 指针/ p/ ./ 更新/ 块/ 中/ ,/ 并/ 修改/ 地址映射/ 表/ ./ Page5/ 置/ 指针/ 初始化/ 为/ 0/ ,/ 也/ 就是/ 指向/ 存储/ 面上/ 的/ 0/ 号/ 数据/ 块/ ./ 然后/ 按照/ E/ 值/ 的/ 大小/ 对/ 存储/ 面/ 进行/ 排序/ ./ 利用/ 相应/ 方差/ Var/ 在/ 数学/ 期望/ E/ 最小/ 的/ M/ 个/ 存储/ 面中/ 选择/ 方差/ 最大/ 的/ 存储/ 面/ 作为/ 目标/ 存储/ 面/ ./ 这样/ 就/ 找到/ 了/ 平均/ 擦除/ 次数/ 少/ 而/ 擦除/ 分布/ 不/ 均匀/ 的/ 存储/ 面/ ./ 接下来/ ,/ 在/ 目标/ 存储/ 面上/ 进行/ 随机/ 游走/ 的/ 过程/ ./ 从/ 目标/ 存储/ 面中/ 维护/ 的/ 面内/ 位置/ 指针/ 所指/ 的/ 位置/ 作为/ 起始/ 位置/ ,/ 根据/ 预定/ 的/ 步长/ 向/ 左/ 或/ 向/ 右/ 移动/ 面内/ 位置/ 指针/ 并/ 利用/ 当前/ 位置/ 相邻/ 的/ 数据/ 块/ 的/ 擦除/ 次数/ 来/ 影响/ 左右/ 移动/ 的/ 概率/ ,/ 计算/ 向/ 左/ 移动/ 的/ 概率/ 公式/ 如式/ (/ 6/ )/ 所示/ :/ PL/ 为/ 向/ 左/ 移动/ 的/ 概率/ ,/ ecL/ 为/ 左/ 相邻/ 数据/ 块/ 的/ 擦除/ 次数/ ,/ ecR/ 为/ 右/ 相邻/ 数据/ 块/ 的/ 擦除/ 次数/ ./ 每步/ 的/ 随机/ 游走/ 均/ 通过/ 伪/ 随机/ 函数/ 生成/ 一个/ 0/ 到/ 1/ 区间/ 的/ 小数/ ,/ 若该/ 小数/ 在/ 0/ 到/ PL/ 之间/ ,/ 则/ 向/ 左/ 移动/ ;/ 否则/ 向/ 右/ 移动/ ./ 按照/ 随机/ 游走/ 的/ 结果/ 移动/ 面内/ 的/ 位置/ 指针/ ,/ 从/ 原来/ 的/ 位置/ 基础/ 上/ 向/ 左/ 或/ 向/ 右/ 移动/ 步长/ 个/ 数据/ 块/ ./ 面内/ 位置/ 指针/ 移动/ 到/ 目标/ 数据/ 块/ 后/ ,/ 更新/ 面内/ 位置/ 指针/ p/ 到/ 新/ 位置/ ./ 将/ 一个/ 存储/ 面上/ 的/ 数据/ 块/ 按照/ 块/ 号/ 构成/ 一个/ 循环/ ,/ 如果/ 指针/ 到达/ 存储/ 面/ 的/ 最后/ 一块/ 上/ ,/ 则/ 右侧/ 的/ 块/ 是/ 0/ 号块/ ./ 如果/ 指针/ 在/ 0/ 号块/ ,/ 则/ 左侧/ 是/ 最后/ 的/ 数据/ 块/ ./ 最终/ 我们/ 得到/ 了/ 需要/ 擦除/ 的/ 那个/ 目标/ 数据/ 块/ ./ 如果/ 目标/ 数据/ 块/ 中/ 存在/ 有效/ 数据/ ,/ 则/ 需要/ 将/ 有效/ 数据/ 拷贝到/ 更新/ 块/ ,/ 同时/ 需要/ 更新/ 地址/ 转换/ 表/ ,/ 然后/ 才能/ 擦除/ 目标/ 数据/ 块/ ./ 最后/ ,/ 更新/ 目标/ 存储/ 面中/ 维护/ 的/ 元/ 数据/ 的/ E/ 和/ Var/ 值/ ./ 为了/ 防止/ 固态/ 硬盘/ 的/ 突然/ 掉电/ ,/ 从而/ 导致/ DRAM/ 内存/ 中/ 的/ 元/ 数据/ 丢失/ ,/ 设计/ 了/ 周期性/ 的/ 保存/ 元/ 数据/ 的/ 机制/ ./ 在/ 指定/ 的/ 时间/ 周期/ 内/ ,/ 控制器/ 会/ 将/ 内存/ 中/ 的/ 元/ 数据表/ 写/ 回到/ 特定/ 的/ 存储/ 区域/ 中/ ./ 为了/ 防止/ 重复/ 写回/ ,/ 增加/ 一个/ 全局/ 写入/ 计数器/ ,/ 当/ 写入/ 计数器/ 不/ 为/ 零时/ ,/ 才/ 需要/ 将/ 元/ 数据/ 信息/ 进行/ 写回/ 操作/ ./ 每个/ 周期/ 结束/ 后/ ,/ 计数器/ 将会/ 清零/ ./ 5/ 实验/ 结果/ 5.1/ 实验/ 配置/ 为了/ 评测/ 我们/ 提出/ 的/ 基于/ 随机/ 游走/ 的/ 磨损/ 均衡/ 算法/ ,/ 我们/ 采用/ trace/ 驱动/ 的/ 软件/ 模拟器/ DiskSimSSD/ 扩展/ 版/ [/ 2/ ]/ 来/ 进行/ 评测/ ./ 主要/ 的/ 实验/ 手段/ 是/ 对/ 模拟器/ 进行/ 相应/ 的/ 代码/ 修改/ ,/ 加入/ 所/ 提出/ 的/ 磨损/ 均衡/ 算法/ ./ 为了/ 对/ 其/ 性能/ 进行/ 比较/ ,/ 还/ 同时/ 实现/ 了/ JFFS2/ [/ 5/ ]/ 和/ BET/ 算法/ [/ 7/ ]/ ./ 我们/ 选择/ 了/ 写/ 操作/ 密集/ 的/ 工作/ 负载/ 序列/ 来/ 评测/ 算法/ 的/ 性能/ ./ 采用/ 的/ 工作/ 负载/ 序列/ 来自/ 企业级/ 实际/ 应用/ ./ UMASS/ 金融/ 工作/ 负载/ 序列/ ①/ 是/ 在线/ 收集/ 的/ 金融/ 单位/ 的/ 实际/ 工作/ 负载/ 数据/ ./ 我们/ 将/ 其/ 分别/ 命名/ 为/ Financial1/ 和/ Financial2/ ./ MSR/ 剑桥/ 工作/ 负载/ 序列/ ②/ 是从/ 微软/ 剑桥/ 研究院/ 的/ 企业/ 服务器/ 上/ 采集/ 一周/ 的/ 数据/ ./ 我们/ 将/ 其/ 命名/ 为/ MSR/ ./ 对/ 实验/ 结果/ 采用/ 了/ 3/ 个/ 测量/ 基准/ 来/ 评价/ 算法/ 的/ 磨损/ 均衡/ 的/ 性能/ ./ 其/ 分别/ 是/ 平均/ 擦写/ 次数/ EX/ ,/ 擦写/ 次数/ 的/ 标准差/ VarX/ 和/ 最大/ 擦写/ 次数/ MaxX/ ,/ 其/ 计算方法/ 如下/ :/ 其中/ ,/ eci/ 为/ 各个/ 数据/ 块/ 的/ 擦除/ 次数/ ,/ N/ 为/ 数据/ 块/ 个数/ ./ 5.2/ 性能/ 比较/ 我们/ 选择/ 了/ 4/ 种/ 方法/ 来/ 做/ 性能/ 对比/ 实验/ ,/ 分别/ 是/ :/ 无/ 磨损/ 均衡/ 、/ JFFS2/ 中/ 的/ 磨损/ 均衡/ 算法/ 、/ BET/ 算法/ 和/ 我们/ 提出/ 的/ 算法/ ,/ 分别/ 将/ 其/ 标记/ 为/ NoWL/ 、/ JFFS2/ 、/ BET/ 、/ Our/ ./ 图/ 5/ 中/ 显示/ 了/ 最大/ 擦写/ 次数/ ,/ NoWL/ 在/ 每种/ 测试数据/ 中/ 都/ 有/ 最大/ 的/ 擦写/ 次数/ ./ 结合/ 图/ 6/ 可以/ 看出/ ,/ 在/ 无/ 磨损/ 均衡/ 的/ 情况/ 下/ ,/ 最大/ 擦除/ 次数/ 与其/ 相应/ 的/ 平均/ 擦除/ 次数/ 差别/ 较大/ ,/ 也就是说/ 明/ 磨损/ 不是/ 均衡/ 的/ ;/ JFFS2/ 中/ 增加/ 了/ 磨损/ 均衡/ 的/ 考虑/ ,/ 所以/ 它/ 的/ 最大/ 擦除/ 次数/ 和/ 平均/ 擦除/ 次数/ 差别/ 小/ 一些/ ;/ BET/ 和/ 我们/ 提出/ 的/ 算法/ 的/ 性能/ 差不多/ ,/ 在/ 最大/ 擦写/ 次数/ 和/ 平均/ 擦写/ 次数/ 的/ 差别/ 很小/ ,/ 擦除/ 较为/ 均衡/ ./ 最后/ ,/ 图/ 7/ 显示/ 了/ 擦写/ 次数/ 的/ 标准差/ ,/ 这/ 也/ 验证/ 了/ 上述/ 说明/ ,/ 在/ 无/ 磨损/ 均衡/ 的/ 情况/ 下/ ,/ 擦写/ 次数/ 的/ 标准差/ 非常/ 高/ ;/ JFFS2/ 方法/ 的/ 标准差/ 有所/ 降低/ ;/ BET/ 和/ 我们/ 提出/ 的/ 算法/ 的/ 标准差/ 都/ 小于/ JFFS2/ 且/ 数值/ 较/ 小/ ,/ 这/ 就/ 意味着/ 数据/ 块/ 的/ 擦写/ 次数/ 相对/ 更加/ 均匀/ ./ 通过/ 实验/ 数据/ 可以/ 看出/ ,/ 我们/ 提出/ 的/ 方法/ 在/ 磨损/ 均衡/ 的/ 性能/ 方面/ 与/ BET/ 相当/ ./ ①/ ②/ Page65/ ./ 3/ 内存/ 消耗/ 算法/ 中/ 主要/ 维护/ 了/ 两个/ 统计/ 量/ :/ 存储/ 面上/ 各/ 数据/ 块/ 的/ 擦除/ 次数/ 的/ 期望/ E/ 和/ 方差/ Var/ ,/ 为了/ 维护/ 这些/ 数据/ ,/ 需要/ 为/ 每个/ 数据/ 在/ 内存/ 中/ 分配/ 32/ 位/ 的/ 存储空间/ ./ 此外/ ,/ 由于/ 每个/ 存储/ 面有/ 2048/ 个/ 数据/ 块/ ./ 那么/ 面内/ 位置/ 指针/ p/ 只/ 需要/ 16/ 位来/ 保存/ ./ 总共/ 每个/ 存储/ 面/ 需要/ 10/ 个/ 字节/ 的/ 内存/ 消耗/ ./ 在/ BET/ 算法/ 中/ ,/ 其/ 使用/ 位图/ 来/ 标示/ 数据/ 块/ 的/ 擦除/ 状态/ ,/ 每个/ 数据/ 块/ 用/ 1/ 位来/ 表示/ ./ 对于/ 64GB/ 的/ 固态/ 硬盘/ ,/ BET/ 算法/ 需要/ 8192/ 字节/ 的/ 空间/ (/ 512/ ×/ 16/ =/ 8192/ 字节/ )/ 来/ 保证/ 算法/ 的/ 正常/ 运行/ ./ 对于/ 我们/ 提出/ 的/ 算法/ ,/ 总共/ 元/ 数据/ 需要/ 1280/ 字节/ ./ 和/ BET/ 相比/ ,/ 我们/ 提出/ 的/ 算法/ 只/ 需要/ 其/ 占用/ 空间/ 的/ 15.6/ %/ ./ 图/ 8/ 给出/ 了/ 在/ 不同/ 容量/ 下/ ,/ 我们/ 所提/ 的/ 算法/ 和/ BET/ 算法/ 所/ 占用/ 的/ 内存容量/ 对比/ ./ 可以/ 看到/ 即使/ 固态/ 硬盘容量/ 达到/ 10TB/ ,/ 我们/ 的/ 算法/ 所/ 需要/ 的/ 内存容量/ 也/ 只有/ 200KB/ ,/ 而/ BET/ 算法/ 则/ 需要/ 1.25/ MB/ 的/ 内存容量/ ./ 6/ 总结/ 本文/ 提出/ 了/ 一种/ 应用/ 于/ 大容量/ 固态/ 硬盘/ 的/ 基于/ 随机/ 游走/ 的/ 磨损/ 均衡/ 算法/ ./ 算法/ 中/ 主要/ 维护/ 了/ 两个/ 统计/ 量/ :/ 期望/ E/ 和/ 方差/ Var/ ,/ 还有/ 每个/ 存储/ 面上/ 的/ 面内/ 位置/ 指针/ p/ ./ 算法/ 主要/ 采用/ 了/ 随机/ 游走/ 的/ 模型/ 来/ 选择/ 需要/ 擦/ 出/ 的/ 目标/ 块/ ./ 我们/ 的/ 实验/ 结果表明/ ,/ 该/ 算法/ 在/ 运行/ 时/ 只/ 需要/ 很少/ 的/ 内存空间/ 就/ 可以/ 得到/ 和/ 其它/ 算法/ 大致相同/ 的/ 磨损/ 均衡/ 性能/ ./ 自身/ 具有/ 很/ 好/ 的/ 可扩展性/ ,/ 可以/ 更好/ 地/ 应用/ 在/ 更/ 大容量/ 的/ 固态/ 硬盘/ 上/ ./ 致谢/ 本文/ 得到/ 了/ 清华大学/ 计算机科学/ 与/ 技术/ 系/ 操作系统/ 实验室/ 的/ 老师/ 与/ 同学/ 们/ 的/ 许多/ 帮助/ 和/ 有益/ 建议/ ,/ 在/ 此/ 表示感谢/ !/ 

