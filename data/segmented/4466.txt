Page1/ 一种/ 基于/ OpenFlow/ 的/ SDN/ 访问/ 控制策略/ 实时/ 冲突检测/ 与/ 解决/ 方法/ 王鹃/ 1/ )/ ,/ 2/ )/ 王江/ 1/ )/ 焦虹阳/ 1/ )/ 王勇/ 1/ )/ 陈诗雅/ 1/ )/ 刘世辉/ 1/ )/ 胡宏新/ 3/ )/ 1/ )/ (/ 武汉大学/ 计算机/ 学院/ 武汉/ 430072/ )/ 2/ )/ (/ 教育部/ 空天/ 信息安全/ 与/ 可信计算/ 重点/ 实验室/ 武汉/ 430072/ )/ 3/ )/ (/ 克莱姆/ 森/ 大学/ 克莱姆/ 森/ 29634/ 美国/ )/ 摘要/ 软件/ 定义/ 网络/ SDN/ (/ Software/ -/ DefinedNetworking/ )/ 是/ 由/ 美国斯坦福大学/ CleanSlate/ 研究组/ 提出/ 的/ 一种/ 新型/ 网络/ 创新/ 架构/ ,/ 可/ 通过/ 软件/ 编程/ 的/ 形式/ 定义/ 和/ 控制/ 网络/ ,/ 其/ 控制/ 平面/ 和/ 转发/ 平面/ 分离/ 及/ 开放性/ 可编程/ 的/ 特点/ ,/ 为/ 新型/ 互联网/ 体系结构/ 研究/ 提供/ 了/ 新/ 的/ 实验/ 途径/ ,/ 也/ 极大/ 地/ 推动/ 了/ 下一代/ 互联网/ 的/ 发展/ ./ OpenFlow/ 是/ SDN/ 的/ 主要/ 协议/ ,/ 定义/ 了/ SDN/ 控制器/ 与/ 交换机/ 之间/ 的/ 通信/ 标准/ ./ 目前/ ,/ 很多/ 基于/ OpenFlow/ 的/ SDN/ 设备/ 已经/ 在/ 实际/ 中/ 得到/ 了/ 部署/ ./ 但是/ ,/ 基于/ OpenFlow/ 的/ SDN/ 却/ 面临/ 很多/ 安全/ 挑战/ ./ 其中/ 一个/ 重要/ 的/ 挑战/ 是/ 如何/ 建立/ 一个/ 安全可靠/ 的/ SDN/ 防火墙/ 应用/ ./ 由于/ OpenFlow/ 协议/ 的/ 无/ 状态/ 性/ ,/ 现有/ 的/ SDN/ 防火墙/ 可以/ 被/ 通过/ 改写/ 交换机/ 中/ 的/ 流/ 表项/ 轻松/ 绕过/ ./ 针对/ 这一/ 安全/ 威胁/ ,/ 作者/ 提出/ 了/ 基于/ Flowpath/ 的/ 实时/ 动态/ 策略/ 冲突检测/ 与/ 解决/ 方法/ ./ 通过/ 获取/ 实时/ 的/ SDN/ 网络/ 状态/ ,/ 能够/ 准确/ 地/ 检测/ 防火墙/ 策略/ 的/ 直接/ 和/ 间接/ 违反/ ,/ 并且/ 一旦/ 发现/ 冲突/ ,/ 可以/ 基于/ Flowpath/ 进行/ 自动化/ 和/ 细粒度/ 的/ 冲突/ 解决/ ./ 最后/ ,/ 作者/ 在/ 开源/ 控制器/ Floodlight/ 上/ 实现/ 了/ 一个/ 安全/ 增强/ 的/ 防火墙/ 应用/ FlowVerifier/ ,/ 并/ 基于/ Mininet/ 对/ FlowVerifier/ 的/ 性能/ 进行/ 了/ 评估/ ./ 结果表明/ FlowVerifier/ 能够/ 检测/ 和/ 自动化/ 地/ 解决/ SDN/ 网络/ 中/ 由于/ 流表/ 改写/ 而/ 引入/ 的/ 策略/ 冲突/ 及其/ 带来/ 的/ 安全/ 威胁/ ./ 关键词/ 软件/ 定义/ 网络/ ;/ OpenFlow/ ;/ 策略/ ;/ 冲突检测/ 与/ 解决/ ;/ 访问控制/ 1/ 引言/ 软件/ 定义/ 网络/ SDN/ (/ Software/ -/ DefinedNet/ -/ working/ )/ 是/ 由/ 美国斯坦福大学/ CleanSlate/ ①/ 研究组/ 提出/ 的/ 一种/ 新型/ 网络/ 创新/ 架构/ ,/ 可/ 通过/ 软件/ 编程/ 的/ 形式/ 定义/ 和/ 控制/ 网络/ ,/ 被/ 认为/ 是/ 网络/ 领域/ 的/ 一场/ 革命/ ./ SDN/ 的/ 本质/ 特点/ 是/ 控制/ 平面/ 和/ 数据/ 平面/ 的/ 分离/ 以及/ 开放/ 可编程/ 性/ ./ 通过/ 分离/ 控制/ 平面/ 和/ 数据/ 平面/ 以及/ 开放/ 的/ 通信协议/ ,/ SDN/ 打破/ 了/ 传统/ 网络设备/ 的/ 封闭性/ ./ 此外/ ,/ 南北向/ 和/ 东西向/ 的/ 开放/ 接口/ 及/ 可编程/ 性/ ,/ 也/ 使得/ 网络管理/ 变得/ 更加/ 简单/ 、/ 动态/ 和/ 灵活/ ./ OpenFlow/ 是/ 目前/ SDN/ 的/ 主流/ 协议/ ,/ 其/ 定义/ 了/ SDN/ 控制器/ 与/ 交换机/ 之间/ 的/ 通信/ 标准/ ./ SDN/ 控制器/ 通过/ OpenFlow/ 协议/ ②/ 对/ OpenFlow/ 交换机/ 中/ 的/ 流表/ 进行/ 控制/ ./ 控制器/ 会为/ 特定/ 的/ 工作/ 负载/ 计算/ 最佳/ 路径/ ,/ 从而/ 对/ 交换机/ 的/ 数据/ 转发/ 定义/ 路径/ ./ 控制器/ 可以/ 是/ 一个/ 设备/ ,/ 一个/ 虚拟机/ 或是/ 一个/ 物理/ 服务器/ ./ 目前/ 基于/ OpenFlow/ 的/ SDN/ 已经/ 在/ 美国斯坦福大学/ 、/ Internet2/ 、/ 日本/ 的/ JGN2plus/ 等/ 多个/ 科研机构/ 中/ 得到/ 部署/ ,/ 一些/ 网络设备/ 生产商/ 也/ 推出/ 了/ 支持/ OpenFlow/ 的/ 有线/ 和/ 无线/ 交换/ 设备/ ./ Google/ 等/ 公司/ 已经/ 在/ 其云/ 数据中心/ 部署/ 了/ SDN/ ./ 国内/ ,/ 清华大学/ 、/ 中国科学院/ 、/ 北京邮电大学/ 等/ 以及/ 一些/ 知名企业/ ,/ 如/ 华为/ 、/ 百度/ 、/ 腾讯/ 、/ 阿里/ 等/ 也/ 都/ 开始/ 研究/ 和/ 部署/ SDN/ 实验/ 平台/ ./ 根据/ 美国/ 著名/ 市场/ 研究/ 公司/ Infonetics/ 的/ 调查/ 数据/ ,/ 未来/ 几年/ SDN/ 的/ 市场/ 价值/ 将/ 超过/ 30/ 亿美元/ ./ Gartner/ 在/ 2013/ 年/ 发布/ 的/ IT/ 十大/ 战略性/ 技术/ 趋势/ 报告/ 中/ 也/ 将/ SDN/ 列为/ 未来/ 五年/ 的/ 十大/ 关键技术/ 之一/ ./ 随着/ SDN/ 的/ 发展/ 和/ 相关/ 网络设备/ 的/ 应用/ ,/ 基于/ OpenFlow/ 的/ SDN/ 网络/ 也/ 面临/ 很多/ 新/ 的/ 安全/ 挑战/ ,/ 其中/ 一个/ 重要/ 的/ 挑战/ 是/ 如何/ 建立/ 一个/ 安全可靠/ 的/ 防火墙/ ./ 由于/ OpenFlow/ 协议/ 几乎/ 是/ 无/ 状态/ 的/ ,/ 当/ 主机/ 或/ 网络设备/ 发送信息/ 时/ ,/ 只有/ 当前/ 流/ 的/ 第一个/ 包会/ 被/ 控制器/ 检测/ ,/ 而/ 接下来/ 的/ 包都会/ 直接/ 通过/ 交换机/ ./ 因此/ ,/ 攻击者/ 可以/ 通过/ 改写/ 交换机/ 中/ 的/ 流/ 表项/ 而/ 轻松/ 绕过/ SDN/ 防火墙/ ./ 针对/ 上述/ 安全/ 威胁/ ,/ 我们/ 提出/ 了/ 一种/ 基于/ Flow/ -/ path/ 的/ 实时/ 动态/ 策略/ 冲突检测/ 与/ 解决/ 方法/ ./ 通过/ 获取/ 实时/ SDN/ 网络/ 状态/ ,/ 能够/ 准确/ 地/ 检测/ 防火墙/ 策略/ 的/ 直接/ 和/ 间接/ 违反/ ,/ 并且/ 一旦/ 发现/ 冲突/ ,/ 可以/ 基于/ Flowpath/ 进行/ 自动化/ 和/ 细粒度/ 的/ 冲突/ 解决/ ./ 最后/ ,/ 我们/ 在/ 开源/ 控制器/ Floodlight/ ③/ 上/ 实现/ 了/ 一个/ 安全/ 增强/ 的/ 防火墙/ 应用/ FlowVerifier/ ,/ 并/ 在/ Mininet/ 下/ 对/ FlowVerifier/ 进行/ 了/ 性能/ 评估/ ./ 结果表明/ Flow/ -/ Verifier/ 能够/ 检测/ 和/ 自动化/ 地/ 解决/ SDN/ 网络/ 中/ 由于/ 流表/ 改写/ 而/ 引入/ 的/ 策略/ 冲突/ 及其/ 带来/ 的/ 安全/ 威胁/ ./ 论文/ 的/ 主要/ 贡献/ 如下/ :/ (/ 1/ )/ 分析/ 了/ SDN/ 中/ 的/ 安全/ 威胁/ 和/ 挑战/ ./ 通过/ 两个/ 安全策略/ 冲突/ 的/ 例子/ 描述/ 了/ 目前/ OpenFlow/ 网络/ 中/ 安全策略/ 违反/ 的/ 威胁/ 并/ 分析/ 了/ 引起/ 防火墙/ 安全策略/ 被/ 绕过/ 的/ 的/ 主要/ 原因/ ./ (/ 2/ )/ 提出/ 了/ 一种/ 基于/ Flowpath/ 的/ SDN/ 策略/ 动态/ 冲突检测/ 方法/ ./ 该/ 方法/ 通过/ 获取/ 实时/ 的/ SDN/ 网络/ 状态/ ,/ 并/ 比较/ 防火墙/ 的/ 安全策略/ 空间/ 和/ 对应/ 的/ ①/ ②/ ③/ flow/ ./ org/ // documents/ // openflow/ -/ spec/ -/ v1/ ./ 1.0/ ./ pdf2014/ ,/ 4/ ,/ 30tation/ // 2014/ ,/ 4/ ,/ 30Page3Flowpath/ 空间/ ,/ 对/ 防火墙/ 的/ 安全策略/ 进行/ 动态/ 的/ 冲突检测/ ./ (/ 3/ )/ 提出/ 自动化/ 的/ 冲突/ 解决/ 机制/ ./ 一旦/ 检测/ 到/ 策略/ 冲突/ ,/ 根据/ 不同/ 情况/ 基于/ Flowpath/ 对/ 冲突/ 进行/ 自动化/ 的/ 解决/ ,/ 如/ 可以/ 通过/ 在/ 交换机/ 的/ 入口/ 或/ 出口/ 插入/ 特殊/ 的/ 阻断/ 流表来/ 阻止/ 恶意/ 的/ 信息流/ ,/ 进行/ 冲突/ 解决/ ./ (/ 4/ )/ 实现/ 与/ 评估/ ./ 基于/ Floodlight/ 实现/ 了/ 一个/ 安全/ 增强/ 的/ SDN/ 防火墙/ 应用/ FlowVerifier/ ./ 同时/ ,/ 对/ FlowVerifier/ 的/ 性能/ 进行/ 了/ 评估/ ./ 结果表明/ Flow/ -/ Verifier/ 能够/ 有效/ 地/ 解决/ 由于/ 策略/ 冲突/ 带来/ 的/ 安全/ 威胁/ ./ 2SDN/ 网络/ 的/ 安全/ 挑战/ SDN/ 作为/ 一种/ 新型/ 的/ 网络/ 架构/ ,/ 出现/ 时间/ 较/ 短/ ./ 作为/ 其/ 核心/ 协议/ ,/ OpenFlow/ 规定/ 了/ 控制器/ 和/ 交换机/ 通信/ 的/ 数据/ 标准/ ./ 控制器/ 向/ 交换机/ 发送/ 符合/ OpenFlow/ 标准/ 的/ 命令/ ./ 一个/ OpenFlow/ 交换机/ 可能/ 会/ 包含/ 多个/ 流表/ ,/ 一个/ 流表/ 可能/ 包含/ 多个/ 流/ 表项/ ./ 一条/ 流/ 表项/ 包含/ 包头/ 域/ 、/ 计数器/ 域/ 和/ 操作/ 域/ ./ 包头/ 域/ 指出/ 了/ 需要/ 匹配/ 的/ 数据包/ 的/ 信息/ ,/ 包括/ 输入/ 端口/ ,/ 源/ 、/ 目的/ MAC/ 地址/ ,/ 源/ 、/ 目的/ IP地址/ 等/ ;/ 计数器/ 域/ 则/ 表示/ 匹配/ 到/ 此条/ 流/ 表项/ 的/ 数据包/ 的/ 个数/ 或者/ 匹配/ 到/ 此流/ 表项/ 的/ 某个/ 类型/ 的/ 数据包/ 的/ 个数/ 或/ 字节数/ ;/ 操作/ 域/ 则/ 是/ 一个/ 集合/ ,/ 包含/ 转发/ 、/ 丢弃/ 、/ 修改/ 等/ 操作/ ./ 当/ 数据包/ 被/ 转发/ 时/ ,/ 它/ 将/ 与/ 交换机/ 中/ 的/ 流/ 表项/ 进行/ 匹配/ ,/ 如/ 存在/ 多个/ 可以/ 被/ 匹配/ 的/ 流/ 表项/ 则/ 仅/ 匹配/ 优先级/ 最高/ 的/ 那个/ ./ 当流表中/ 没有/ 可以/ 匹配/ 的/ 流/ 表项/ 时/ ,/ 那么/ 交换机/ 则/ 把/ 数据包/ 以/ Message/ -/ In/ 的/ 形式/ 发图/ 1/ 重写/ 操作/ 导致/ 安全策略/ 被/ 绕过/ 送给/ 控制器/ ,/ 由/ 控制器/ 通过/ 广播/ 信息/ 进行/ MAC/ 地址/ 学习/ ,/ 找到/ 转发/ 的/ 数据通路/ ./ 流/ 表项/ 中/ 的/ Set/ -/ Field/ 操作/ 可以/ 对/ 数据包/ 的/ 包头/ 进行/ 重写/ ,/ 从而/ 达到/ 对/ 网络结构/ 的/ 灵活/ 控制/ 和/ 可编程/ 目的/ ./ SDN/ 网络/ 的/ 这种/ 灵活性/ 导致/ 其/ 面临/ 一些/ 新/ 的/ 安全/ 挑战/ [/ 1/ -/ 2/ ]/ ./ 首先/ ,/ OpenFlow/ 协议/ 几乎/ 是/ 无/ 状态/ 的/ ./ 当/ 一条/ 信息流/ 在/ 交换机/ 中/ 没有/ 找到/ 流/ 表项/ 与/ 之/ 匹配/ 时/ ,/ 控制器/ 只/ 接受/ 该/ 信息流/ 的/ 第一个/ 数据包/ 并/ 对/ 其/ 进行/ 检查/ ./ 随后/ 数据包/ 会/ 通过/ 交换机/ 直接/ 转发/ ./ 因此/ ,/ 攻击者/ 可以/ 利用/ 流/ 表项/ 的/ Set/ -/ Field/ 操作/ 构造/ 一个/ 可以/ 绕过/ SDN/ 防火墙/ 安全策略/ 的/ 恶意/ 流/ ,/ 如图/ 1/ 所示/ ./ 图/ 1/ 的/ 网络拓扑/ 中有/ 4/ 台/ 主机/ 、/ 3/ 台/ 交换机/ 和/ 1/ 台/ 控制器/ ./ 位于/ 控制器/ 的/ 防火墙/ 应用/ 定义/ 了/ 一条/ 安全/ 规则/ ,/ 阻止/ 主机/ A/ (/ IP/ :/ 10.0/ ./ 1.12/ )/ 和/ 主机/ C/ (/ IP/ :/ 10.0/ ./ 3.32/ )/ 进行/ 通信/ ./ 假设/ A/ 、/ D/ 为/ 企业/ 内部/ 网络/ 的/ 主机/ ,/ B/ 为/ 外部/ 网络/ 的/ 主机/ ,/ 但/ 通过/ 了/ 企业/ 的/ 认证/ ,/ C/ 为/ 外部/ 网络/ 未/ 通过/ 企业/ 认证/ 的/ 主机/ ./ 现在/ 主机/ A/ 的/ 恶意/ 使用者/ 可以/ 通过/ 以下/ 3/ 个/ 交换机/ 的/ 流/ 表项/ (/ 如图/ 1/ 所示/ )/ ,/ 将/ 企业/ 内部/ 的/ 机密信息/ 发送到/ 外部/ 网络/ 未/ 通过/ 验证/ 的/ C/ 主机/ ./ 具体/ 实现/ 过程/ 如下/ :/ 第/ 1/ 台/ 交换机/ 的/ 流/ 表项/ 把/ 源地址/ 为/ 10.0/ ./ 1/ ./ x/ 且/ 目的/ 地址/ 为/ 10.0/ ./ 2/ ./ x/ 的/ 数据包/ 的/ 源地址/ 改为/ 10.0/ ./ 4/ ./ x/ ;/ 第/ 2/ 台/ 交换机/ 的/ 流/ 表项/ 把/ 源地址/ 为/ 10.0/ ./ 4/ ./ x/ 且/ 目的/ 地址/ 为/ 10.0/ ./ 2/ ./ x/ 的/ 数据包/ 的/ 目的/ 地址/ 改为/ 10.0/ ./ 3/ ./ x/ ;/ 最后/ 一台/ 交换机/ 的/ 流/ 表项/ 转发/ 源地址/ 为/ 10.0/ ./ 4/ ./ x/ 且/ 目的/ 地址/ 为/ 10.0/ ./ 3/ ./ x/ 的/ 数据包/ ./ 在/ 这种/ 情况/ 下/ ,/ 主机/ A/ (/ 10.0/ ./ 4.22/ )/ 可/ 通过/ 给/ 主机/ B/ (/ 10.0/ ./ 2.22/ )/ 发送/ 数据包/ 而/ 绕过/ 防火墙/ ./ 该/ 数据包/ 可以/ 绕过/ 防火墙/ 是因为/ 它/ 和/ 防火墙/ 的/ 安全策略/ 不/ 匹配/ ,/ 但是/ 通过/ 上文/ 所述/ 的/ 流表/ 操作/ 这个/ 数据包/ 最终/ 会/ 被/ 发到/ 主机/ CPage4/ 而/ 不是/ 主机/ B/ ./ 这样/ ,/ 主机/ A/ 实现/ 了/ 绕过/ 防火墙/ 与/ 主机/ C/ 通信/ 的/ 目的/ ./ 通过/ 这个/ 例子/ ,/ 我们/ 可以/ 看到/ 目前/ 基于/ OpenFlow/ 的/ SDN/ 网络/ 存在/ 防火墙/ 被/ 通过/ 改写/ 流表/ 而/ 绕过/ 的/ 安全/ 威胁/ ./ 其次/ ,/ 现有/ 的/ SDN/ 防火墙/ 忽略/ 了/ 流/ 表项/ 之间/ 的/ 依赖性/ ,/ 从而/ 使得/ 由于/ 流/ 表项/ 之间/ 的/ 依赖/ 关系/ 而/ 导致/ 防火墙/ 的/ 安全策略/ 违反/ ./ 如图/ 2/ 所示/ ,/ 假设/ 网络/ 中/ 一个/ 应用程序/ 已经/ 把/ 一条/ 流/ (/ Flow1/ )/ 的/ 3/ 个/ 转发/ 规则/ 安装/ 到/ 交换机/ ./ 第/ 1/ 台/ 交换机/ 中/ 第/ 1/ 条流/ 表项/ 匹配/ 从/ 10.0/ ./ 4/ ./ x/ 到/ 10.0/ ./ 2/ ./ x/ 的/ 数据包/ 并/ 将/ 其/ 源地址/ 改成/ 10.0/ ./ 1/ ./ x/ ./ 第/ 2/ 台/ 交换机/ 中/ 第/ 1/ 条流/ 表项/ 匹配/ 从/ 10.0/ ./ 1/ ./ x/ 到/ 10.0/ ./ 2/ ./ x/ 的/ 数据包/ 并/ 将/ 数据包/ 的/ 源地址/ 由/ 10.0/ ./ 1/ ./ x/ 改成/ 10.0/ ./ 4/ ./ x/ ,/ 目的/ 地址/ 由/ 10.0/ ./ 2/ ./ x/ 改成/ 10.0/ ./ 3/ ./ x/ ./ 第/ 3/ 台/ 交换机/ 中/ 的/ 第/ 1/ 条流/ 表项/ 匹配/ 从/ 10.0/ ./ 4/ ./ x/ 到/ 10.0/ ./ 3/ ./ x/ 的/ 数据包/ 并/ 直接/ 转发/ ./ 通过/ 这/ 3/ 条流表/ ,/ 类似/ 于图/ 1/ ,/ 主机/ A/ (/ IP/ :/ 10.0/ ./ 1.12/ )/ 借助于/ 主机/ B/ (/ IP/ :/ 10.0/ ./ 2.22/ )/ 将/ 信息/ 发送给/ 了/ 主机/ C/ (/ IP/ :/ 10.0/ ./ 3.22/ )/ ./ 此时/ ,/ 假设/ 还有/ 另外/ 一个/ 应用程序/ 把/ 另外/ 一条/ 流/ (/ Flow2/ )/ 的/ 策略/ 安装/ 到/ 交换机/ ,/ 此/ 策略/ 只/ 包含/ 3/ 条/ 转发/ 规则/ ,/ 都/ 是/ 把/ 来自/ 主机/ A/ (/ IP/ :/ 10.0/ ./ 1.12/ )/ 的/ 数据/ 包转发/ 到/ 主机/ B/ (/ IP/ :/ 10.0/ ./ 2.22/ )/ ./ 我们/ 可以/ 进一步/ 假设/ Flow2/ 中/ 的/ 策略/ 优先级/ 比/ Flow1/ 的/ 优先级/ 低/ ./ 在/ 第/ 1/ 台/ 交换机/ 中/ ,/ 数据/ 包转发/ 正常/ ./ 当/ 数据包/ 到达/ 第/ 2/ 台/ 交换机/ 时/ ,/ 由于/ 两条/ 流/ 表项/ 都/ 是/ 匹配/ 从/ 10.0/ ./ 1/ ./ x/ 到/ 10.0/ ./ 2/ ./ x/ 的/ 数据包/ ,/ 而/ 由/ 假设/ 可知/ ,/ 无论是/ 来自/ Flow1/ 还是/ 来自/ 图/ 2/ 规则/ 依赖/ 导致/ 安全策略/ 被/ 绕过/ Flow2/ 的/ 数据包/ ,/ 都/ 会/ 按照/ 第/ 1/ 条流/ 表项/ 进行/ 处理/ ./ 所以/ 来自/ Flow2/ 的/ 数据包/ 原本/ 应该/ 从/ 主机/ A/ (/ IP/ :/ 10.0/ ./ 1.12/ )/ 发到/ 主机/ B/ (/ 10.0/ ./ 2.22/ )/ ,/ 结果/ 却/ 发到/ 了/ 主机/ C/ (/ 10.0/ ./ 3.32/ )/ ./ 这是/ 我们/ 发现/ 的/ 一种/ 由于/ 流表/ 的/ 优先级/ 关系/ 而/ 导致/ 防火墙/ 规则/ 被/ 违反/ 的/ 情形/ ./ 因此/ ,/ 即使/ 所有/ 不同/ 流/ 定义/ 的/ 策略/ 都/ 不/ 违反/ 防火墙/ 安全策略/ ,/ 但是/ 他们/ 之间/ 的/ 依赖/ 关系/ 可能/ 会/ 导致/ 安全策略/ 违反/ 情况/ 的/ 发生/ ./ 针对/ 第/ 1/ 种/ 防火墙/ 安全策略/ 被/ 绕过/ 的/ 情况/ ,/ 美国/ 德克萨斯/ 农工/ 大学/ 安全/ 通信/ 和/ 计算机系统/ 实验室/ 的/ 研究/ 小组/ 在/ “/ ASecurityEnforcementKernelforOpenFlowNetworks/ ”/ 论文/ 中/ 设计/ 了/ 一种/ 增强/ 安全/ 的/ SDN/ 操作系统/ 内核/ ,/ 其中/ 提出/ 了/ 基于/ 别名/ 集/ 的/ SDN/ 安全策略/ 冲突检测/ 方法/ ./ 该/ 方法/ 将/ 通信/ 中/ 源地址/ 和/ 目的/ 地址/ 分别/ 放到/ 两个/ 地址/ 集合/ 中/ ,/ 并/ 将/ Set/ -/ Field/ 操作/ 中/ 被/ 修改/ 的/ 地址/ 也/ 加入/ 到/ 上述/ 两个/ 集合/ ,/ 然后/ 将/ 源地址/ 集合/ 和/ 目的/ 地址/ 集合/ 与/ 防火墙/ 的/ 安全/ 规则/ 进行/ 比较/ 从而/ 发现/ 策略/ 冲突/ ./ 别名/ 集/ 方法/ 可以/ 找到/ 一些/ 简单/ 的/ 由于/ 修改/ 流表/ 造成/ 的/ 安全策略/ 冲突/ ./ 然而/ ,/ 因为/ 它/ 并/ 不/ 基于/ 网络/ 的/ 实时/ 状态/ ,/ 所以/ 在/ 一些/ 复杂/ 的/ 实例/ 中/ 会/ 产生/ 误报/ ./ 以图/ 1/ 中/ 的/ 网络拓扑/ 为例/ ,/ 防火墙/ 规则/ 为/ 禁止/ A/ 与/ C/ 通信/ ,/ 假设/ 3/ 个/ 交换机/ 中/ 的/ 流/ 表项/ 如下/ :/ S1/ :/ Match/ (/ src/ =/ A/ ,/ dst/ =/ B/ )/ →/ Set/ (/ src/ =/ D/ ,/ dst/ =/ B/ )/ S2/ :/ Match/ (/ src/ =/ D/ ,/ dst/ =/ B/ )/ →/ Set/ (/ src/ =/ D/ ,/ dst/ =/ C/ )/ S3/ :/ Match/ (/ src/ =/ D/ ,/ dst/ =/ C/ )/ →/ Set/ (/ src/ =/ D/ ,/ dst/ =/ B/ )/ Page5S1/ 交换机/ 匹配/ 源地址/ 是/ A/ 且/ 目的/ 地址/ 是/ B/ 的/ 数据包/ ,/ 然后/ 把/ 它/ 的/ 源地址/ 改为/ D/ ;/ S2/ 交换机/ 把/ 源地址/ 是/ D/ 且/ 目的/ 地址/ 是/ B/ 的/ 数据包/ 的/ 目的/ 地址/ 改为/ C/ ;/ S3/ 交换机/ 把/ 源地址/ 是/ D/ 且/ 目的/ 地址/ 是/ C/ 的/ 数据包/ 的/ 目的/ 地址/ 改为/ B/ ./ 按照/ 别名/ 集/ 的/ 冲突检测/ 算法/ ,/ 会/ 得出/ (/ A/ ,/ D/ )/ →/ (/ B/ ,/ C/ )/ 之间/ 存在/ 冲突/ ,/ 即/ A/ 与/ C/ 之间/ 存在/ 冲突/ ./ 但/ 事实上/ ,/ A/ 发给/ B/ 的/ 数据包/ ,/ 最终/ 到达/ 了/ B/ ,/ 而/ 没有/ 到达/ C/ ,/ 即/ 别名/ 集/ 算法/ 发生/ 了/ 误报/ ./ 针对/ 上述/ 问题/ ,/ 我们/ 提出/ 了/ 一种/ 基于/ Flow/ -/ path/ 的/ SDN/ 安全策略/ 动态/ 检测/ 和/ 解决/ 方法/ ./ 通过/ 比较/ ShiftedFlowpathSpace/ 和/ 防火墙/ DenyAuthorizationSpace/ ,/ 对/ 防火墙/ 安全策略/ 进行/ 动态/ 冲突检测/ 和/ 自动化/ 的/ 冲突/ 解决/ ./ 3/ 基于/ Flowpath/ 的/ SDN/ 安全策略/ 动态/ 冲突检测/ 方法/ 3.1/ 全网/ 的/ FlowpathFlowpath/ 指/ 的/ 是/ SDN/ 中/ 每个/ Flow/ 的/ 转发/ 路径/ ,/ 我们/ 所/ 提出/ 的/ SDN/ 安全策略/ 动态/ 冲突检测/ 和/ 解决/ 方法/ 建立/ 在/ Flowpath/ 探测/ 的/ 基础/ 上/ ./ Flowpath/ 的/ 建立/ 基于/ HeaderSpaceAnalysis/ (/ HSA/ )/ [/ 3/ -/ 4/ ]/ 算法/ ./ HSA/ 提供/ 了/ 一个/ 数据包/ 路径/ 计算/ 模型/ ./ 数据包/ 的/ 包头/ 可以/ 看做/ 一个/ HeaderSpace/ 空间/ {/ 0/ ,/ 1/ }/ L/ 中/ 的/ 一个点/ ,/ L/ 为/ 包头/ 最大/ 长度/ ./ 网络设备/ 的/ 转发/ 操作/ 可以/ 根据/ HeaderSpace/ 空间/ 的/ 转发/ 规则/ 描述/ 成/ 一个/ 转换/ 函数/ T/ ./ 这个/ 转换/ 函数/ T/ 可以/ 模拟/ 转发/ 操作/ ,/ 例如/ 接收/ 数据包/ 动作/ ,/ 然后/ 将/ 其/ 转发/ 到/ 相应/ 的/ 输出/ 端口/ ,/ 即/ 例如/ ,/ 定义/ a/ 和/ b/ 之间/ 的/ 转换/ 函数/ 为/ Ra/ →/ b/ =/ ∪/ a/ →/ bpaths/ {/ Tn/ (/ Γ/ (/ Tn/ -/ 1/ (/ …/ (/ Γ/ (/ T1/ (/ h/ ,/ p/ )/ …/ )/ )/ )/ )/ )/ }/ ,/ 所以/ ,/ a/ 和/ b/ 之间/ 的/ 路径/ 是/ 一些/ 转换/ 函数/ 的/ 组合/ ,/ 每个/ 组合/ 的/ 形式/ 如下/ :/ 具体/ 实现/ 时/ ,/ 我们/ 将/ a/ 和/ b/ 之间/ 的/ 路径/ (/ Flowpath/ )/ 描述/ 为/ 如下/ (/ switch/ ,/ rule/ )/ 序列/ ,/ 其中/ rule/ 是/ 交换机/ 的/ 处理/ 规则/ ./ 获取/ Flowpath/ 的/ 主要/ 流程/ 如/ 算法/ 1/ 所示/ ./ 我们/ 获取/ 头/ 节点/ 的/ 头部/ 作为/ 一条/ Flowpath/ 的/ 起点/ ,/ 根据/ 网络/ 的/ 拓扑/ 结构/ 即可/ 得到/ 下/ 一/ 跳/ (/ 交换机/ )/ ,/ 然后/ 获取/ 交换机/ 中/ 的/ 流/ 表项/ 的/ 头部/ 信息/ ,/ 将/ 它们/ 转换成/ 二进制/ 向量/ ./ 将头/ 结点/ 头部/ 信息/ 中/ 的/ 目的/ 地址/ 和/ 下/ 一/ 跳/ 头部/ 信息/ 中/ 的/ 源地址/ 进行/ 二进制/ 交/ 运算/ ,/ 若/ 交集/ 不为/ 空/ ,/ 则/ 将/ 下/ 一/ 跳/ 加入/ 到/ Flowpath/ 中/ ,/ 这样/ 我们/ 就/ 找到/ 了/ 一条/ Flowpath/ 的/ 一部分/ ./ 接下来/ ,/ 通过/ 网络拓扑/ 获得/ 下/ 一/ 跳/ 交换机/ ,/ 同样/ ,/ 比较/ 上/ 一/ 跳/ 头部/ 信息/ 中/ 的/ 目的/ 地址/ 和/ 下/ 一/ 跳/ 的/ 源地址/ ,/ 若/ 存在/ 交集/ ,/ 那么/ 我们/ 又/ 找到/ 了/ 这条/ Flowpath/ 的/ 另外/ 一部分/ ,/ 重复/ 这个/ 过程/ ,/ 直到/ 找到/ 目的/ 节点/ ,/ 一条/ Flowpath/ 就/ 形成/ 了/ ./ 算法/ 1/ ./ Flowpath/ 探测/ 算法/ ./ 输入/ :/ flowtable/ ;/ topology/ 输出/ :/ flow/ _/ path/ [/ ]/ find/ _/ flow/ _/ path/ (/ flowtable/ ;/ topology/ )/ flow/ _/ path/ ./ path/ [/ ]/ ←/ [/ ]/ flow/ _/ path/ ./ src/ ←/ first/ _/ flow/ _/ entry/ ./ src/ ;/ switch/ _/ linked/ _/ list/ =/ null/ ;/ flow/ _/ path/ ./ dst/ ←/ last/ _/ flow/ _/ entry/ ./ dst/ ;/ returnflow/ _/ path/ [/ ]/ ;/ 3.2/ 算法/ 复杂度/ 分析/ 假设/ topology/ 中有/ m/ 个/ 主机/ ,/ n/ 个/ 交换机/ ,/ 平均/ 每个/ 交换机/ 中/ 的/ 流/ 表项/ 数目/ 为/ k/ ./ 根据/ 算法/ 1/ 的/ 描述/ ,/ 从/ m/ 个/ 主机/ 中/ 任选/ 一/ 主机/ 开始/ 遍历/ ,/ 根据/ 拓扑/ 结构/ 获取/ 到/ 该/ 主机/ 连接/ 的/ 交换机/ ,/ 并/ 查找/ 交换机/ 中/ 的/ 流表/ 条目/ 与/ 主机/ 、/ 端口/ 进行/ 匹配/ ./ 执行/ 1/ 次/ ./ 行/ k/ 次/ ./ 流表/ 对/ 算法/ 复杂度/ 的/ 影响/ :/ (/ 1/ )/ 最佳/ 情况/ :/ 第一次/ 就/ 匹配/ 成功/ ,/ 匹配/ 操作/ 只/ (/ 2/ )/ 最坏/ 情况/ :/ 最后/ 一次/ 匹配/ 成功/ ,/ 匹配/ 操作/ 执/ (/ 3/ )/ 平均/ 情况/ :/ 匹配/ 操作/ 执行/ k/ // 2/ 次/ ./ 拓扑/ 结构/ 对/ 算法/ 复杂度/ 的/ 影响/ :/ (/ 1/ )/ 若/ n/ 个/ 交换机/ 排列成/ 线型/ 网络/ ,/ 则/ 路径/ 的/ 探测/ 算法/ 最多要/ 经过/ n/ 个/ 交换机/ ,/ 最少/ 经过/ 1/ 个/ 交换机/ ,/ 平均/ 经过/ n/ // 2/ 个/ 交换机/ ./ (/ 2/ )/ 若/ n/ 个/ 交换机/ 排列成/ 网状/ ,/ 经由/ 的/ 交换机/ Page6/ 最多/ 小于/ n/ ,/ 最少/ 为/ 1/ ./ 度为/ (/ 3/ )/ 若/ n/ 个/ 交换机/ 排列成/ 树状/ ,/ 情况/ 与/ 网状/ 类似/ ./ 综上/ ,/ 找出/ 全/ 网络/ 中/ 所有/ Flowpath/ 的/ 时间/ 复杂/ 最坏/ 情况/ :/ m/ ×/ k/ ×/ n/ 次/ 比较/ 平均/ 情况/ :/ m/ ×/ (/ k/ // 2/ )/ ×/ (/ n/ // 2/ )/ 次/ 比较/ 最佳/ 情况/ :/ m/ 次/ 比较/ 3.3/ 重写/ 的/ Flowpath/ 空间/ 与/ Deny/ 授权/ 空间/ 本文/ 中/ 关注/ 的/ 是/ 防火墙/ 安全策略/ 的/ 间接/ 违反/ ,/ 即/ 每/ 一条/ 流表/ 的/ 策略/ 都/ 没有/ 直接/ 违反/ 防火墙/ 的/ 策略/ ,/ 但是/ 通过/ 若干条/ 流表/ 的/ 修改/ 和/ 转发/ ,/ 最终/ 却/ 绕过/ 了/ 防火墙/ 的/ 安全策略/ ./ 由于/ 防火墙/ 安全策略/ 的/ 间接/ 违反/ 必须/ 通过/ 修改/ 流/ 表项/ 才能/ 成功/ ,/ 因此/ 我们/ 在/ 进行/ 冲突检测/ 时/ 只/ 需要/ 关注/ 那些/ 存在/ 重写/ 操作/ 的/ Flowpath/ ,/ 我们/ 称之为/ ShiftedFlowpath/ ,/ 所有/ 的/ ShiftedFlowpath/ 构成/ ShiftedFlowpathSpace/ ./ 由/ 这些/ ShiftedFlowpath/ 组成/ 的/ 图称/ 作为/ ShiftedFlowpathGraph/ ./ 此外/ ,/ 防火墙/ 中/ 的/ Deny/ 规则/ 也/ 构成/ 了/ Deny/ 授权/ 空间/ (/ DenyAuthorizationSpace/ )/ ./ 在/ 检测/ 防护/ 墙/ 策略/ 的/ 间接/ 违反/ 时/ ,/ 我们/ 需要/ 比较/ DenyAuthorizationSpace/ 和/ ShiftedFlowpathSpace/ ./ 4/ 冲突检测/ 与/ 解决/ 4.1/ 方案/ 概要/ 通常/ 情况/ 下/ ,/ 防火墙/ 规则/ 包含/ 5/ 个域/ :/ 源地址/ 、/ 源/ 端口/ 、/ 目的/ 地址/ 、/ 目的/ 端口/ 和/ 协议/ ./ Flowpath/ 的/ 入口/ 头部/ 包含/ 3/ 个域/ :/ 源地址/ 、/ 源/ 端口/ 和/ 协议/ ./ Flow/ -/ path/ 的/ 出口/ 头部/ 包含/ 两个/ 域/ :/ 目的/ 地址/ 和/ 目的/ 端口/ ./ 为了/ 检测/ 防火墙/ 规则/ 是否/ 与/ OpenFlow/ 交换机/ 中/ 的/ 流表/ 规则/ 冲突/ ,/ 我们/ 从/ 防火墙/ 规则/ 中/ 提取/ 源地址/ 和/ 目的/ 地址/ ,/ 并且/ 根据/ 该/ 规则/ 计算/ 与/ 之/ 对应/ 的/ ShiftedFlowpath/ ./ 如果/ 存在/ 与/ 防火墙/ 规则/ 源地址/ 和/ 目的/ 地址/ 对应/ 的/ ShiftedFlowpath/ ,/ 则/ 可以/ 确定/ 防火墙/ 策略/ 和/ 流表/ 策略/ 之间/ 存在/ 冲突/ ./ 在/ 检测/ 策略/ 冲突/ 时/ ,/ 我们/ 还/ 需要/ 考虑/ 不同/ 的/ 情况/ ,/ 如/ 添加/ 新/ 的/ 防火墙/ 规则/ 和/ 更新/ 防火墙/ 规则/ 以及/ 添加/ 新/ 的/ 流/ 表项/ 和/ 更新/ 流/ 表项/ ,/ 以便/ 在/ 防火墙/ 规则/ 发生/ 改变/ 时/ 和/ 网络/ 状态/ 发生/ 改变/ 时/ 重新/ 检测/ 防火墙/ 策略/ 空间/ 与/ 流表/ 策略/ 空间/ 的/ 冲突/ ./ 一旦/ 安全策略/ 的/ 冲突/ 被/ 检测/ 出来/ ,/ 这些/ 冲突/ 需要/ 自动化/ 地/ 解决/ ,/ 因为/ 在/ 一个/ 较大/ 的/ 网络/ 里/ ,/ 由/ 管理员/ 手工/ 解决/ 冲突/ 是/ 非常/ 困难/ 的/ ./ 由于/ 安全策略/ 的/ 违反/ 可能/ 是/ 完全/ 的/ 也/ 可能/ 仅/ 是/ 部分/ 违反/ ,/ 因此/ 需要/ 根据/ 不同/ 的/ 情况/ 进行/ 不同/ 的/ 冲突/ 解决/ ./ 对于/ 完全/ 的/ 策略/ 违反/ ,/ 我们/ 可以/ 将/ 这条/ Flowpath/ 直接/ 从/ 网络/ 中/ 移除/ 或者/ 拒绝/ 那些/ 完全/ 违反/ 安全策略/ 的/ 流/ 表项/ 插入/ 交换机/ ./ 对于/ 部分/ 安全策略/ 违反/ ,/ 不/ 能够/ 直接/ 移除/ Flowpath/ 或者/ 拒绝/ 流/ 表项/ 的/ 插入/ ,/ 因为/ 它们/ 可能/ 与/ 其他/ 的/ 流/ 存在/ 依赖/ 关系/ ,/ 从而/ 可能/ 会/ 影响/ 其他/ 的/ SDN/ 应用/ ./ 针对/ 这个/ 问题/ ,/ 我们/ 可以/ 通过/ 添加/ 更高/ 优先级/ 的/ Deny/ 规则/ 来/ 解决/ 策略/ 的/ 部分/ 违反/ ./ 具体/ 在/ 冲突/ 解决/ 时/ ,/ 也/ 需要/ 考虑/ 以下/ 各种/ 不同/ 的/ 情况/ ,/ 从而/ 进行/ 自动化/ 和/ 细粒度/ 的/ 冲突/ 解决/ ./ 4.2/ 添加/ 防火墙/ 规则/ 和/ 更新/ 防火墙/ 规则/ 向/ 防火墙/ 中/ 添加/ 新/ 的/ 规则/ 可能/ 会/ 导致/ 防火墙/ 策略/ 与/ 交换机/ 流表/ 策略/ 之间/ 的/ 新/ 的/ 冲突/ ./ 如果/ 新/ 的/ 防火墙/ 规则/ 不是/ Deny/ 规则/ ,/ 那么/ 它们/ 就/ 不会/ 导致/ 被/ 绕过/ 的/ 威胁/ ./ 所以/ ,/ 在/ 冲突检测/ 时/ 我们/ 仅/ 考虑/ Deny/ 规则/ ./ 在/ 检测/ 冲突/ 之前/ ,/ 需要/ 重新/ 确定/ DenyAuthorizationSpace/ ,/ 通过/ 检查/ 新/ 加入/ 的/ 防火墙/ 规则/ 和/ 现有/ 的/ 防火墙/ 规则/ 间/ 的/ 依赖/ 关系/ ,/ 确定/ 新/ 的/ DenyAuthorizationSpace/ ./ 然后/ 我们/ 获取/ 与/ 之/ 对应/ 的/ ShiftedFlowpathSpace/ ,/ 将/ 新/ 的/ DenyAuthorizationSpace/ 和/ 得到/ 的/ ShiftedFlowpathSpace/ 进行/ 比较/ 以/ 检测/ 冲突/ 的/ 发生/ ./ 此外/ ,/ 在/ 更新/ 现有/ 防火墙/ 规则/ 的/ 时候/ 也/ 可能/ 会/ 改变/ 内部/ 表/ 依赖/ 关系/ 而/ 导致/ DenyAuthorizationSpace/ 的/ 改变/ ./ 因此/ ,/ 在/ 更新/ 防火墙/ 规则/ 时/ 也/ 应该/ 更新/ DenyAuthorizationSpace/ ,/ 像/ 添加/ 新/ 的/ 防火墙/ 规则/ 一样/ ,/ 重新/ 计算/ DenyAuthorizationSpace/ ,/ 然后/ 与/ 对应/ 的/ ShiftedFlowpathSpace/ 进行/ 比较/ ,/ 检测/ 是否/ 存在/ 冲突/ ./ 在/ 添加/ 新/ 的/ 防火墙/ 规则/ 或者/ 更新/ 防火墙/ 规则/ 时/ ,/ 当新/ 的/ 防火墙/ 规则/ 被/ 添加/ 到/ DenyAuthorizationSpace/ 中/ ,/ 相应/ 的/ ShiftedFlowpath/ 就/ 会/ 建立/ ./ 在/ ShiftedFlowpathSpace/ 中/ 记录/ 着/ 与/ 新/ 的/ 防火墙/ 规则/ 相关/ 的/ Flowpath/ 的/ 源地址/ 和/ 目的/ 地址/ ./ 而且/ ,/ 通过/ 直接/ 比较/ ShiftedFlowpathSpace/ 信息/ 和/ 防火墙/ DenyAuthorizationSpace/ 信息/ 可以/ 检测/ 出/ 策略/ 的/ 冲突/ ./ 如果/ ShiftedFlowpathSpace/ 比/ 防火墙/ 的/ DenyAuthorizationSpace/ 小/ ,/ 那么/ ShiftedFlowpath/ 就/ 可以/ 被/ 移除/ ./ 但是/ 如果/ ShiftedFlowpathSpace/ 比新/ 的/ 防火墙/ DenyAuthorizationSpace/ 大/ ,/ 我们/ 就/ 需要/ 阻止/ ShiftedFlowpathSpace/ 中/ 与/ 防火墙/ 冲突/ 的/ 部分/ 信息流/ ./ 图/ 3/ 展示/ 了/ 一个/ 例子/ ,/ 当/ 一个/ 新/ 的/ 规则/ 被/ 添加/ 到/ 防火墙/ 中/ ,/ 防火墙/ 发现/ ShiftedFlowpathSpace/ 比新/ 的/ DenyAuthorizationSpace/ 大/ ./ 因此/ 防火墙/ 通过/ 插入/ 更高/ 优先级/ 的/ 阻断/ 流表/ 的/ 方式/ ,/ 在/ 头/ 交换机/ 和/ 尾/ 交换机/ 处/ 拒绝/ 了/ Flowpath/ 中/ 冲突/ 的/ 那/ 部分/ 信息流/ ./ Page7/ 图/ 3/ 从/ 头尾/ 交换机/ 添加/ 流表/ 解决/ 冲突/ 4.3/ 添加/ 流/ 表项/ 和/ 更新/ 流/ 表项/ 当/ 网络应用/ 程序/ 或者/ 控制器/ 向/ 交换机/ 流表中/ 添加/ 新/ 的/ 流/ 表项/ 或者/ 更新/ 流/ 表项/ 时/ ,/ 网络/ 的/ 状态/ 会/ 发生/ 改变/ ,/ 从而/ 可能/ 引入/ 与/ 防火墙/ 策略/ 相/ 违背/ 的/ 新/ 冲突/ ./ 因此/ ,/ 在/ 流/ 表项/ 发生/ 改变/ 时/ ,/ 需要/ 更新/ 流/ 地址/ 空间/ ,/ 重新/ 计算/ ShiftedFlowpath/ ./ 此时/ 没有/ 必要/ 再/ 重新/ 构造/ 全网/ 的/ ShiftedFlowpath/ ,/ 而/ 只/ 需图/ 4/ 拒绝/ 流/ 表项/ 添加/ 解决/ 冲突/ 要/ 对/ 插入/ 新/ 的/ 流/ 表项/ 的/ 交换机/ 的/ 那个/ 局部/ ShiftedFlowpath/ 进行/ 更新/ ./ 然后/ ,/ 我们/ 再/ 将/ 新/ 的/ ShiftedFlowpathSpace/ 和/ DenyAuthorizationSpace/ 进行/ 比较/ ,/ 检测/ 是否/ 存在/ 冲突/ ./ 一旦/ 检测/ 出/ 冲突/ ,/ 我们/ 冲突/ 解决/ 模块/ 会/ 拒绝/ 这些/ 流/ 表项/ 的/ 添加/ 或者/ 更新/ 请求/ ./ 图/ 4/ 展示/ 了/ 一个/ 例子/ ,/ 当/ 一个/ 新/ 的/ 流/ 表项/ 被/ 插/ Page8/ 入到/ Table3/ 中/ ,/ 我们/ 检测/ 出/ 在/ 防火墙/ 策略/ 和/ 这条/ 新/ 的/ 流/ 表项/ 之间/ 存在/ 冲突/ ./ ShiftedFlowpathSpace/ (/ 1110/ →/ x100/ )/ 比/ 防火墙/ 的/ DenyAuthorizationSpace/ (/ 1110/ →/ xx00/ )/ 小/ ./ 所以/ 添加/ 这条/ 新/ 的/ 流/ 表项/ 的/ 请求/ 被/ 拒绝/ ./ 当/ ShiftedFlowpathSpace/ 比/ DenyAuthorizationSpace/ 大时/ ,/ 冲突/ 部分/ 将会/ 在/ 头尾/ 交换机/ 处/ 被/ 阻断/ (/ 如图/ 4/ 所示/ )/ ./ 5/ 实现/ 与/ 评估/ 5.1/ 实现/ 我们/ 在/ Ubuntu12/ ./ 04LTS/ 下/ 使用/ Mininet/ 模拟/ SDN/ 网络资源/ ,/ 通过/ 虚拟机/ 中/ 运行/ Mininet/ 搭建/ 网络拓扑/ 结构/ ./ 使用/ Floodlight/ -/ 0.9/ ./ 0/ 版本/ 作为/ 网络/ 的/ 后台/ 控制器/ ,/ 我们/ 在/ 控制器/ 中/ 实现/ 了/ Flowpath/ 探测/ 模块/ ,/ 冲突检测/ 模块/ 和/ 冲突/ 解决/ 模块/ ./ Flow/ -/ path/ 探测/ 模块/ 可以/ 构建/ ShiftedFlowpath/ ./ 基于/ ShiftedFlowpath/ ,/ 冲突检测/ 模块/ 可以/ 通过/ 比较/ 防火墙/ 的/ DenyAuthorizationSpace/ 和/ ShiftedFlowpathSpace/ 检测/ 安全策略/ 的/ 间接/ 违反/ ./ 当/ 检测/ 到/ 策略/ 冲图/ 5FlowVerifier/ 的/ 实现/ 框架/ 5.2/ 评估/ 为了/ 评估/ FlowVerifier/ 的/ 效果/ 和/ 性能/ ,/ 我们/ 将/ 实验/ 系统/ 搭/ 在/ 四核/ IntelCorei5/ -/ 3230M2/ ./ 6GHzCPU/ 和/ 4GB/ 内存/ 的/ Ubuntu12/ ./ 04LTS/ 主机/ 上/ ,/ 并/ 针对/ 防火墙/ 策略/ 被/ 绕过/ 的/ 实例/ 1/ (/ 图/ 1/ )/ 和/ 实例/ 2/ (/ 图/ 2/ )/ 进行/ 测试/ ,/ 针对/ 这/ 两种/ 情况/ ,/ FlowVerifier/ 可以/ 找到/ 安全策略/ 冲突/ 并/ 自动/ 解决/ 这些/ 冲突/ ,/ 检测/ 冲突/ 和/ 冲突/ 解决/ 的/ 耗时/ 如表/ 1/ 所示/ ./ 冲突检测/ 的/ 时间/ 包括/ 建立/ ShiftedFlowpath/ 和/ 比较/ 防火墙/ Deny/ 突时/ ,/ 冲突/ 解决/ 模块/ 将/ 根据/ 不同/ 情况/ 进行/ 自动化/ 的/ 冲突/ 解决/ ./ 如图/ 5/ 所示/ ,/ 控制/ 节点/ 主要/ 包含/ Floodlight/ 及/ Flowpath/ 探测/ 模块/ 、/ 冲突检测/ 、/ 冲突/ 解决/ 模块/ ./ 这些/ 新/ 的/ 功能/ 构成/ 了/ 安全/ 增强/ 的/ SDN/ 防火墙/ FlowVerifier/ ./ 控制器/ 通过/ JavaAPI/ 提供/ 的/ 拓扑/ 管理/ 服务/ 获取/ 、/ 存储/ 拓扑/ 信息/ ./ 同时/ ,/ 它/ 通过/ JavaAPI/ 函数/ 读取/ 每个/ MininetSwitch/ 里/ 的/ 流表/ ,/ 并/ 生成/ Flowpath/ 图/ ,/ 存储/ 起来/ ./ 我们/ 可以/ 通过/ Floodlight/ 控制器/ 平台/ 提供/ 的/ JavaAPI/ 获取/ 所有/ 流/ 的/ 信息/ ,/ 同时/ 我们/ 在/ 控制器/ 平台/ 实现/ 了/ 一个/ 新/ 的/ JavaAPI/ 获取/ 所有/ 防火墙/ 规则/ 的/ 信息/ ./ 当/ 应用程序/ 或者/ 控制器/ 往/ MininetSwitch/ 里/ 添加/ 新/ 的/ 流/ 表项/ 时/ ,/ Flowpath/ 图/ 就/ 会/ 做/ 相应/ 更新/ ./ 当/ 冲突检测/ 模块/ 检测/ 到/ Flowpath/ 和/ 防火墙/ 规则/ 之间/ 存在/ 冲突/ 时/ ,/ 它/ 将/ 调用/ 冲突/ 解决/ 模块/ 自动化/ 进行/ 冲突/ 解决/ ./ 为了/ 优化/ 我们/ 所/ 开发/ 的/ 应用程序/ 的/ 性能/ ,/ 我们/ 将/ 源地址/ 和/ 目的/ 地址/ 转换成/ 二进制/ 向量/ ./ 然后/ ,/ 通过/ 直接/ 比较/ 二进制位/ 计算/ 出/ 防火墙/ DenyAuthorizationSpace/ 和/ ShiftedFlowpathSpace/ 的/ 交集/ ,/ 大大提高/ 了/ 冲突检测/ 的/ 效率/ ./ AuthorizationSpace/ 和/ ShiftedFlowpathSpace/ 的/ 时间/ ./ 表/ 1FlowVerifier/ 在/ 实例/ 1/ 和/ 实例/ 2/ 中/ 的/ 耗时/ 实例/ 冲突检测/ 时间/ // ms/ 冲突/ 解决/ 时间/ // ms/ 实例/ 1/ 实例/ 2/ 此外/ ,/ 我们/ 还/ 实现/ 了/ 在/ FortNox/ [/ 5/ ]/ 中/ 提到/ 的/ 别名/ 集/ 冲突检测/ 方法/ ,/ 并/ 将/ 我们/ 的/ 方法/ 和/ 他们/ 的/ 方法/ Page9/ 作/ 了/ 对比/ ./ 针对/ 上面/ 设计/ 两种/ 方案/ ,/ 我们/ 比较/ 了/ 两种/ 方法/ 的/ 有效性/ 和/ 误报/ 情况/ ,/ 结果/ 如表/ 2/ 所示/ ./ 表中/ 所填/ 结果/ 的/ 第/ 1/ 个/ 属性/ 值/ 代表/ 有效性/ ,/ 第/ 2/ 个/ 属性/ 值/ 代表/ 是否/ 存在/ 误报/ ./ 根据/ 结果显示/ ,/ 在/ 实例/ 1/ 中/ ,/ 两种/ 方法/ 的/ 检测/ 结果/ 都/ 是/ 有效/ 的/ 且/ 不/ 存在/ 误报/ ,/ 但是/ 在/ 实例/ 2/ 中/ ,/ 两种/ 方法/ 虽然/ 都/ 检测/ 出/ 了/ 结果/ ,/ 但是/ 别名/ 集/ 冲突检测/ 方法/ 存在/ 误报/ 情况/ ./ 当/ Flow2/ 没有/ 插入/ 到/ 交换机/ 时/ ,/ 误报/ 出现/ 了/ ./ 此时/ ,/ 没有/ 从/ 主机/ A/ 到/ 主机/ C/ 的/ 信息流/ ,/ 只有/ 主机/ B/ 到/ 主机/ C/ 的/ 信息流/ ./ 别名/ 集/ 冲突检测/ 方法/ 存在/ 误报/ 是因为/ 它/ 仅仅/ 将/ 被/ 修改/ 的/ 地址/ 加入/ 到/ 别名/ 集中/ ,/ 将/ 源地址/ 集合/ 和/ 目的/ 地址/ 集合/ 与/ 防火墙/ 规则/ 进行/ 对比/ ./ 它/ 并/ 没有/ 考虑/ 到/ 网络/ 中/ 的/ 实时/ 流/ 状态/ ,/ 相反/ ,/ 我们/ 的/ 方法/ 基于/ 实时/ 的/ Flowpath/ 并且/ 通过/ 比较/ 防火墙/ DenyAuthorizationSpace/ 和/ ShiftedFlowpathSpace/ 空间/ ,/ 能够/ 精确/ 地/ 检测/ 策略/ 冲突/ ./ 方法/ FlowVerifier/ 有效/ 检测/ 出/ 冲突/ ,/ FortNox/ 有效/ 检测/ 出/ 冲突/ ,/ 考虑/ 到/ 网络拓扑/ 的/ 复杂度/ 和/ 流/ 表项/ 的/ 数量/ 会/ 成为/ 影响/ FlowVerifier/ 系统/ 性能/ 的/ 两个/ 主要/ 因素/ ,/ 我们/ 创建/ 了/ 简单/ 网络拓扑/ 结构/ (/ 图/ 6/ )/ 和/ 复杂/ 网络拓扑/ 结构/ (/ 图/ 7/ )/ ./ 简单/ 网络拓扑/ 包括/ 3/ 台/ 交换机/ (/ S1/ ,/ S2/ ,/ S3/ )/ 和/ 4/ 台/ 主机/ (/ h1/ ,/ h2/ ,/ h3/ ,/ h4/ )/ ;/ 复杂/ 网络拓扑/ 结构/ 包括/ 8/ 台/ 交换机/ 和/ 64/ 台/ 主机/ ./ 这些/ 交换机/ 中/ 的/ 流表/ 构成/ 了/ Flowpath/ ./ 同时/ ,/ 这些/ 交换机/ 通过/ OpenFlow/ 协议/ 与/ 控制器/ 通信/ ./ 如果/ 交换机/ 中/ 的/ 某/ 条流/ 表项/ 更改/ 我们/ 也/ 比较/ 了/ 添加/ 不同/ 数量/ 的/ 候选/ 流/ 表项/ 到/ 交换机/ ,/ 原版/ Floodlight/ 控制器/ 和/ 带有/ FlowVerifier/ 图/ 7/ 复杂/ 网络拓扑/ 了/ ,/ 交换/ 机会/ 发送/ 一个/ Flow/ -/ Removed/ 类型/ 的/ 消息/ 到/ Floodlight/ 控制器/ ./ 因此/ ,/ Floodlight/ 控制器/ 可以/ 实时/ 地/ 更新/ 网络拓扑/ 结构/ ,/ 与此同时/ ,/ 冲突检测/ 模块/ 也/ 会/ 及时/ 检测/ 冲突/ ./ 在/ 这个/ 实验/ 中/ ,/ 我们/ 的/ 目标/ 是/ 在/ 不同/ 数量/ 的/ 流/ 表项/ 情况/ 下/ 测试/ FlowVerifier/ 的/ 性能/ ,/ 为了/ 实现/ 这个/ 目的/ ,/ 我们/ 专门/ 编写/ 了/ 计算/ 并/ 记录/ 延迟时间/ 的/ 函数/ ,/ 将/ 系统/ 获取/ 防火墙/ 规则/ 和/ 所有/ 流/ 表项/ 所用/ 的/ 时间/ 排除/ 在外/ ./ 我们/ 预先/ 在/ 防火墙/ 模块/ 中/ 配置/ 了/ 防火墙/ 规则/ ,/ 将/ 它们/ 分别/ 与/ 100/ ,/ 200/ ,/ 300/ ,/ …/ ,/ 1000/ 条/ 候选/ 流/ 表项/ 对比/ 检测/ ./ 我们/ 在/ 两种/ 网络拓扑/ 中/ 分别/ 进行/ 了/ 测试/ ,/ 结果/ 如图/ 8/ 所示/ ./ 从/ 结果/ 我们/ 可以/ 看出/ ,/ 随着/ 候选/ 流/ 表项/ 的/ 增加/ ,/ 冲突检测/ 计算/ 所用/ 时间/ 线性/ 增长/ ./ 而且/ ,/ 我们/ 还/ 可以/ 观察/ 到/ ,/ 两种/ 网络拓扑/ 结构/ 在/ 耗时/ 上/ 的/ 差异/ ,/ 通过/ 这种/ 差异/ 对比/ ,/ 我们/ 可以/ 知道/ 拓扑/ 结构/ 的/ 复杂程度/ 对于/ 冲突检测/ 时间/ 是/ 有/ 影响/ 的/ ,/ 但是/ 我们/ 同时/ 也/ 可以/ 看到/ 复杂/ 拓扑/ 与/ 简单/ 拓扑/ 在/ 添加/ 1000/ 条流/ 表项/ 的/ 冲突检测/ 时间/ 相差/ 仅/ 3ms/ 左右/ ,/ 因此/ 可知/ 在/ 较/ 复杂/ 网络拓扑/ 的/ 情况/ 下/ FlowVerifier/ 也/ 能/ 在/ 较/ 短时间/ 内/ 计算/ 出/ 冲突/ ./ 模块/ 的/ 控制器/ 所用/ 时间/ ,/ 在/ 这个/ 实验/ 中/ ,/ 我们/ 使用/ 网络拓扑/ 结构/ 为/ 图/ 6/ 所示/ 的/ 简单/ 拓扑/ 结构/ ,/ 我们/ 添加/ Page10/ 图/ 8/ 不同/ 数量/ 的/ 流/ 表项/ 情况/ 下/ FlowVerifier/ 的/ 性能/ 流/ 表项/ 的/ 条数/ 为/ 10/ ,/ 100/ ,/ 1000/ ,/ 分析/ 结果/ 如图/ 9/ 所示/ ./ 由/ 结果/ 我们/ 观察/ 到/ ,/ 随着/ 流/ 表项/ 条数/ 增加/ ,/ 添加/ 流表/ 时间/ 近乎/ 线性/ 增加/ ,/ 与此同时/ ,/ 我们/ 也/ 可以/ 观察/ 到/ FlowVerifier/ 模块/ 所/ 占用/ 耗时/ 也/ 渐渐/ 增多/ ,/ 但是/ ,/ 在/ 流/ 表项/ 条数/ 可控/ 的/ 情况/ 下/ ,/ 延迟/ 是/ 在/ 可/ 接受/ 范围/ 内/ 的/ ./ 图/ 9/ 比较/ Floodlight/ 与/ FlowVerifier/ 添加/ 10/ ,/ 100/ ,/ 与此同时/ ,/ 我们/ 还/ 测试/ 了/ 多种/ 情况/ 下/ 原版/ Floodlight/ 控制器/ 和/ 带有/ FlowVerifier/ 模块/ 的/ 控制器/ 在/ CPU/ 开销/ 上/ 的/ 差异/ ,/ 实验/ 网络拓扑/ 如图/ 7/ 所示/ ,/ 每种/ 情形/ 我们/ 都/ 做/ 了/ 10/ 次/ 重复/ 实验/ ,/ 每次/ 实验/ 取/ 最高/ 结果/ ,/ 把/ 10/ 次/ 实验/ 数据/ 作/ 平均/ ,/ 测试/ 结果/ 如表/ 3/ 所示/ ./ 表/ 3Floodlight/ 和/ FlowVerifier/ 在/ 多种/ 情况/ 下/ 的/ 启动/ 时/ 输入/ 10/ 条流/ 表项/ 12.7/ 输入/ 50/ 条流/ 表项/ 26.4/ 输入/ 100/ 条流/ 表项/ 50.1/ 输入/ 500/ 条流/ 表项/ 125.9/ 输入/ 1000/ 条流/ 表项/ 147.8/ 由表/ 3/ 可知/ ,/ 在/ 不同/ 状况/ 下/ Floodlight/ 和/ FlowVeri/ -/ fier/ 的/ CPU/ 占用率/ 是/ 不/ 相同/ 的/ ,/ 我们/ 可以/ 看到/ 的/ 是/ FlowVerifier/ 相较/ 于/ 原版/ Floodlight/ 在/ CPU/ 开销/ 上/ 的/ 差异/ 不是/ 很大/ ./ 6/ 相关/ 工作/ 随着/ SDN/ 技术/ 的/ 快速/ 应用/ 与/ 发展/ ,/ 有关/ SDN/ 安全/ 话题/ 备受/ 关注/ ./ 在/ OpenFlow/ 和/ SDN/ 网络/ 自身/ 的/ 安全性/ 方面/ ,/ FlowVisor/ [/ 6/ ]/ 建立/ 了/ 一个/ 网络/ 虚拟化/ 平台/ ,/ 其/ 网络/ 分片/ 技术/ 通过/ 在/ 控制/ 层/ 和/ 数据/ 层/ 增加/ 一层/ ,/ 实现/ 虚拟/ 网络/ 隔离/ 从而/ 提供/ 一定/ 的/ 安全/ 保障/ ./ FLOVER/ [/ 7/ ]/ 是/ 一个/ 可以/ 检测/ 部署/ 在/ OpenFlow/ 网络/ 中/ 的/ 流表/ 策略/ 是否/ 违反/ 了/ 网络/ 的/ 安全策略/ 的/ 新型/ 检测/ 系统/ ,/ 它/ 可以/ 检测/ 出/ 由于/ 出错/ 导致/ 无效/ 和/ 不/ 可见/ 的/ 路由/ ,/ 但是/ 它/ 并/ 没有/ 考虑/ 到/ 防火墙/ 策略/ ./ Pyretic/ [/ 8/ ]/ 提出/ 了/ 一种/ 高级/ 语言/ 用于/ 应用程序/ 策略/ 的/ 合成/ ./ 它/ 通过/ 一个/ 策略/ 合成器/ 将/ 防火墙/ 策略/ 和/ 流表/ 策略/ 合成/ 到/ 一起/ ,/ 然后/ 将/ 合成/ 后/ 的/ 策略/ 推送/ 到/ 每/ 一台/ SDN/ 交换机/ 的/ 流表/ 空间/ 中/ ./ 该/ 方法/ 可以/ 检测/ 防火墙/ 策略/ 和/ 流表/ 策略/ 的/ 直接/ 冲突/ ,/ 但是/ 无法/ 检测/ 它们/ 之间/ 由于/ 流表/ 重写/ 或/ 流表间/ 依赖/ 关系/ 而/ 导致/ 的/ 策略/ 间接/ 违反/ ./ 此外/ ,/ 该/ 方法/ 将/ 合成/ 后/ 的/ 策略/ 推送/ 到/ 交换机/ 中/ ,/ 但是/ SDN/ 交换机/ 使用/ 三态/ 内容/ 寻址/ 存储器/ (/ TCAM/ )/ 存储/ 流表/ ,/ 其/ 存储空间/ 非常/ 有限/ ,/ 因此/ 当/ 防火墙/ 规则/ 较多时/ ,/ 这种/ 推送/ 到/ 每台/ 交换机/ 的/ 方式/ 是/ 不/ 实用/ 的/ ./ 再者/ ,/ 如果/ 流表/ 策略/ 完全/ 而/ 不是/ 部分/ 违反/ 了/ 防火墙/ 策略/ ,/ 在/ 实际/ 当中/ 可以/ 直接/ 将/ 其/ 丢弃/ ,/ 也/ 不/ 需要/ 将/ 违反/ 的/ 防火墙/ 策略/ 安装/ 到/ SDN/ 交换机/ 中/ ./ Anteater/ [/ 9/ ]/ 利用/ SAT/ 解析器/ 将/ 数据/ 平面/ 的/ 信息/ 转换成/ 布尔/ 表达式/ ,/ 然后/ 将/ 需要/ 检测/ 的/ 策略/ 属性/ 转换成/ SAT/ 问题/ ,/ 从而/ 检测/ 策略/ 的/ 属性/ ,/ 如/ 一致性/ ./ FlowChecker/ [/ 10/ ]/ 将/ 网络/ 策略/ 转换成/ 逻辑/ 表示/ ,/ 然后/ 利用/ 二进制/ 决策/ 图/ (/ BinaryDecisionDiagram/ )/ 检测/ 网络/ 策略/ 的/ 属性/ ./ 但/ 上述/ 两种/ 方法/ 对/ 网络/ 策略/ 的/ 检测/ 是/ 静态/ 的/ ,/ 没有/ 获取/ 和/ 描述/ 网络/ 的/ 策略/ 的/ 动态变化/ ,/ 因此/ 无法/ 检测/ 防火墙/ 策略/ 的/ 间接/ 违反/ ./ Veri/ -/ Flow/ [/ 11/ ]/ 利用/ 图/ 搜索/ 技术/ 描述/ 网络/ 的/ 状态/ 和/ 验证/ 网络/ 的/ 性质/ ,/ 如/ 可达性/ ,/ 从而/ 可以/ 潜在地/ 检查/ 安全/ 冲突/ ,/ 但是/ 却/ 不能/ 自动/ 和/ 实时/ 地/ 解决/ 冲突/ ./ Floodlight/ 包含/ 了/ 一款/ 开源/ 的/ 基于/ OpenFlow/ 标准/ 的/ SDN/ 防火墙/ 应用/ ,/ 但是/ 该/ 防火墙/ 仅仅/ 是/ 把/ 传统/ 防火墙/ 的/ 包/ 过滤/ 功能/ 应用/ 到/ 了/ SDN/ 控制器/ 中/ ,/ 仅/ 能够/ 检测/ 策略/ 的/ 直接/ 违反/ ./ Page11/ 与/ 我们/ 的/ 研究/ 工作/ 最/ 相近/ 的/ 是/ Shin/ 等/ 人/ 给出/ 的/ 一种/ 安全/ 增强/ 的/ SDN/ 控制器/ FortNox/ ,/ 在/ Fort/ -/ Nox/ 中/ 他们/ 针对/ 现有/ 防火墙/ 容易/ 被/ 绕过/ 的/ 问题/ ,/ 提出/ 了/ 别名/ 集/ 策略/ 检测/ 方法/ ,/ 该/ 方法/ 通过/ 将/ 流表中/ 被/ 修改/ 过/ 的/ 源地址/ 和/ 目的/ 地址/ 加入/ 到/ IP地址/ 集合/ 中/ ,/ 然后/ 与/ 防火墙/ 策略/ 中/ 的/ IP地址/ 进行/ 比较/ 来/ 检测/ 策略/ 违反/ ./ 该/ 方法/ 能够/ 检测/ 出/ 部分/ 策略/ 违反/ ,/ 但/ 由于/ 缺乏/ 跟踪/ 数据流/ 路径/ 的/ 机制/ ,/ 从而/ 导致/ 该/ 方法/ 存在/ 误报/ ./ 针对/ 上述/ 问题/ ,/ 我们/ 提出/ 了/ 基于/ 网络/ 状态/ 的/ 实时/ 动态/ 策略/ 冲突检测/ 与/ 解决/ 方法/ ./ 通过/ 获取/ 实时/ 的/ SDN/ 网络/ 状态/ ,/ 我们/ 的/ 方法/ 能够/ 更/ 准确/ 地/ 检测/ 防火墙/ 策略/ 的/ 直接/ 和/ 间接/ 违反/ ./ 同时/ ,/ 与/ FortNox/ 不同/ ,/ 我们/ 基于/ SDN/ 网络/ 状态/ 初步/ 给出/ 了/ 自动化/ 的/ 冲突/ 解决/ 方法/ ./ 7/ 结论/ SDN/ 的/ 开放性/ 和/ 动态性/ 使得/ 网络管理/ 变得/ 更加/ 灵活/ 和/ 智能/ ,/ 然而/ 这些/ 特性/ 也/ 使得/ SDN/ 面临/ 新/ 的/ 安全/ 威胁/ ./ 本/ 论文/ 针对/ 现有/ 的/ SDN/ 防火墙/ 可以/ 被/ 通过/ 改写/ 交换机/ 中/ 的/ 流/ 表项/ 轻松/ 绕过/ 这一/ 安全/ 问题/ ,/ 提出/ 了/ 基于/ Flowpath/ 的/ 实时/ 动态/ 策略/ 冲突检测/ 与/ 解决/ 方法/ ./ 通过/ 获取/ 实时/ 的/ SDN/ 网络/ 状态/ ,/ 并/ 比较/ 防火墙/ DenyAuthorizationSpace/ 和/ ShiftedFlowpathSpace/ ,/ 我们/ 的/ 方法/ 能够/ 准确/ 地/ 检测/ 防火墙/ 策略/ 的/ 间接/ 违反/ ,/ 并且/ 一旦/ 发现/ 冲突/ ,/ 可以/ 基于/ Flowpath/ 进行/ 自动化/ 和/ 细粒度/ 的/ 冲突/ 解决/ ./ 最后/ ,/ 我们/ 在/ 开源/ 控制器/ Floodlight/ 上/ 实现/ 了/ 一个/ 安全/ 增强/ 的/ 防火墙/ 应用/ FlowVerifier/ ,/ 并/ 在/ Mininet/ 下/ 对/ FlowVerifier/ 进行/ 了/ 性能/ 的/ 评估/ ./ 结果表明/ FlowVerifier/ 能够/ 检测/ 和/ 自动化/ 地/ 解决/ SDN/ 网络/ 中/ 由于/ 流表/ 改写/ 而/ 引入/ 的/ 策略/ 冲突/ 及其/ 带来/ 的/ 安全/ 威胁/ ,/ 并且/ 其/ 性能/ 开销/ 在/ 可/ 接受/ 范围/ 内/ ./ 

