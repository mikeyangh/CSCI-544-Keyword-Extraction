Page1/ 云/ 计算环境/ 中/ 面向/ OLTP/ 应用/ 的/ 数据分布/ 研究/ 1/ )/ (/ 中国人民大学/ 数据/ 工程/ 与/ 知识/ 工程/ 教育部/ 重点/ 实验室/ 北京/ 100872/ )/ 2/ )/ (/ 最高人民法院/ 信息中心/ 北京/ 100745/ )/ 3/ )/ (/ 中国人民大学/ 信息/ 学院/ 北京/ 100872/ )/ 4/ )/ (/ 北京航空航天大学/ 软件开发/ 环境/ 国家/ 重点/ 实验室/ 北京/ 100191/ )/ 摘要/ 云/ 计算/ 为/ 大型/ OLTP/ 应用/ 中/ 分布式/ 数据/ 的/ 高效/ 存储/ 和/ 管理/ 带来/ 了/ 新/ 的/ 机遇/ ,/ 大/ 数据/ 则/ 对/ 分布式/ 数据/ 的/ 存储/ 与/ 管理/ 提出/ 了/ 新/ 的/ 挑战/ ,/ 自动/ 数据分布/ 逐渐/ 成为/ 分布式系统/ 中/ 的/ 研究/ 重点/ 和/ 难点/ ./ 该文/ 对/ 影响/ 数据分布/ 问题/ 的/ 三要素/ 数据/ 、/ 负载/ 和/ 节点/ 进行/ 分析/ ,/ 将/ 该/ 问题/ 抽象/ 为/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ 3/ 个/ 相互/ 关联/ 的/ 子/ 问题/ ,/ 提出/ 了/ 数据分布/ 问题/ 的/ 三角/ 架构/ DaWN/ ./ 由于/ 不同/ 的/ 系统/ 有/ 不同/ 的/ 应用/ 需求/ ,/ DaWN/ 架构/ 以/ 代价/ 模型/ 为/ 枢纽/ ,/ 对/ 特定/ 应用/ 需要/ 达到/ 的/ 效能/ 目标/ 和/ 资源/ 限制/ 进行/ 调配/ ,/ 并/ 提出/ 了/ 数据分布/ 问题/ 所/ 面临/ 的/ 技术/ 挑战/ ./ 该文/ 对/ DaWN/ 架构/ 中以/ 顶点/ 为/ 代表/ 的/ 3/ 个/ 基本要素/ 进行/ 详细分析/ ,/ 着重/ 对/ 以边/ 为/ 代表/ 的/ 3/ 条/ 关联/ 关系/ 进行/ 阐释/ ,/ 并/ 据此/ 对云/ 环境/ 中/ 大规模/ OLTP/ 应用/ 的/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ 3/ 个/ 数据分布/ 子/ 问题/ 的/ 研究成果/ 和/ 进展/ 进行/ 归纳/ 和/ 总结/ ./ 基于/ 以上/ 分析/ ,/ 该文/ 以/ 数据/ 分片/ 、/ 数据/ 分片/ 和/ 负载/ 执行/ 为/ 变量/ ,/ 使用/ 真值表/ 覆盖/ 数据分布/ 问题/ 中/ 的/ 8/ 种/ 类型/ ,/ 并/ 采用/ 三维/ 立体/ 坐标系/ 的/ 方式/ 对/ 相关/ 工作/ 的/ 分布/ 进行/ 归纳/ 总结/ 和/ 呈现/ ./ 最后/ ,/ 该文/ 从/ 代价/ 模型/ 研究/ 、/ 测试/ 基准/ 研究/ 、/ 自动化/ 数据分布/ 技术/ 研究/ 、/ 特定/ 应用/ 研究/ 等/ 4/ 个/ 角度/ ,/ 对/ 数据分布/ 问题/ 的/ 未来/ 发展/ 方向/ 进行/ 展望/ ./ 关键词/ 数据分布/ ;/ 三角/ 架构/ ;/ 数据/ 分片/ ;/ 数据/ 分配/ ;/ OLTP/ ;/ 大/ 数据/ 1/ 引言/ 作为/ 一种/ 动态/ 演进/ 的/ 复杂/ 架构/ ,/ 云/ 计算/ 通过/ 有效/ 整合/ 、/ 共享/ 和/ 利用/ 分布式/ 数据/ 环境/ 中/ 的/ 软硬件/ 资源/ ,/ 构建/ 应对/ 多种/ 服务/ 需求/ 的/ 应用/ 平台/ ,/ 是/ 当前/ 大规模/ 应用/ 研究/ 的/ 重点/ ./ 随着/ 信息技术/ 的/ 普及/ ,/ 云/ 环境/ 中/ 各类/ 应用/ 系统/ 平台/ 的/ 数据管理/ 量级/ 正/ 从/ TB/ 级/ 向/ PB/ 级/ 甚至/ EB/ 级/ 规模/ 迈进/ ./ 根据/ IDC/ 的/ 预测/ ①/ ,/ 到/ 2020/ 年/ 全球/ 数据/ 存储量/ 极/ 可能/ 达到/ 35ZB/ ./ 很多/ 大型/ 在线/ 事务/ 级/ 应用/ 处理/ 平台/ 都/ 面临/ 着/ 迅速/ 膨胀/ 的/ 数据/ 规模/ 和/ 日益/ 沉重/ 的/ 事务/ 级/ 计算/ 的/ 双重/ 压力/ ./ 举例来说/ ,/ 在/ 2013/ 年/ 淘宝/ 双十/ 一/ 狂欢节/ 中/ ,/ 淘宝网/ ②/ 在/ 短短/ 一天/ 内/ 便/ 完成/ 了/ 约/ 1.88/ 亿笔/ 在线/ 交易/ ,/ 最/ 繁忙/ 时须/ 完成/ 的/ 订单/ 量/ 达/ 79/ 万笔/ // min/ ,/ 峰值/ 流量/ 1.3/ 万笔/ // s/ ;/ 国内/ 火车票/ 预定/ 官网/ 12306/ ③/ 每次/ 出票/ 都/ 需要/ 计算/ 该车/ 次/ 在/ 全线/ 每个/ 站点/ 上/ 的/ 各类/ 车票/ 数量/ ,/ 每年/ 春节前夕/ 会/ 车票/ 预定/ 进入/ 高峰期/ ,/ 以/ 春节/ 预定/ 高峰期/ 2014/ 年/ 1/ 月/ 6/ 日为例/ ,/ 全天/ 网络/ 出票/ 400/ 万张/ ,/ 峰值/ 时刻/ 出票量/ 超过/ 1700/ 张/ // s/ ./ 大型/ 联机/ 事务处理/ (/ On/ -/ LineTransactionProcessing/ ,/ OLTP/ )/ 应用/ 的/ 业务/ 需求/ 对/ 分布式/ 数据管理/ 提出/ 了/ 新/ 的/ 挑战/ ,/ 如何/ 有效/ 地/ 存储/ 和/ 管理/ 业务/ 系统/ 中/ 迅猛/ 增加/ 的/ 海量/ 数据/ 是/ 很多/ 应用/ 平台/ 上/ 亟待解决/ 的/ 重要/ 问题/ ,/ 其中/ 一项/ 关键/ 任务/ 就是/ 如何/ 进行/ 数据分布/ ,/ 即/ 如何/ 合理/ 地/ 将/ 不断/ 增加/ 的/ 数据/ 分配/ 到/ 不同/ 的/ 数据/ 节点/ 上/ ,/ 保证系统/ 的/ 高/ 吞吐量/ 、/ 高可用性/ 和/ 高/ 可扩展性/ ./ 根据/ 数据管理/ 与/ 分析/ 领域/ 的/ 发展/ 历史/ 和/ 研究/ 趋势/ ,/ 我们/ 从/ 数据/ 规模/ 和/ 数据处理/ 复杂度/ 两个/ 维度/ 上/ 进行/ 分解/ ,/ 将/ 云/ 计算/ 时代/ 的/ 数据管理/ 体系/ 划分/ 为/ 如图/ 1/ 所示/ 的/ 4/ 类/ 领域/ ./ A/ ./ 传统/ 数据库/ ./ 应用/ 于/ 数据/ 规模较/ 小/ 、/ 数据处理/ 复杂程度/ 不高/ 的/ 应用/ 中/ ,/ 可/ 采用/ 传统/ 的/ 数据库系统/ 进行/ 数据管理/ ,/ 如图/ 1/ 中/ A/ 域/ 所示/ ./ B/ ./ 数据仓库/ ./ 应用/ 于/ 数据/ 规模较/ 小/ 、/ 数据分析/ 处理/ 复杂/ 程度较高/ 的/ 应用/ 中/ ,/ 可/ 采用/ 传统/ 的/ 数据仓库/ 系统/ 进行/ 数据管理/ ,/ 如图/ 1/ 中/ B/ 域/ 所示/ ./ C/ ./ 云/ 环境/ 中/ 的/ 各类/ NoSQL/ 数据库/ ./ 应用/ 于/ 大规模/ 或/ 超大规模/ 数据/ 的/ 非/ 关系/ 型/ 分布式/ 存储/ 与/ 管理/ ,/ 主要/ 提供/ 复杂/ 分析/ 操作/ ,/ 可/ 采用/ 诸如/ 基于/ Hadoop/ 的/ NoSQL/ 数据库/ 进行/ 数据管理/ ,/ 如图/ 1/ 中/ C/ 域/ 所示/ ./ D/ ./ 云/ 环境/ 中/ 的/ 各类/ 分布式/ 数据库/ ./ 应用/ 于/ 大规模/ 或/ 超大规模/ 数据/ 的/ 关系/ 型/ 分布式/ 存储/ 与/ 管理/ ,/ 主要/ 提供/ 相对/ 简单/ 的/ 事务/ 或/ 查询/ 操作/ ,/ 通常/ 需要/ 在/ 毫秒/ 甚至/ 亚秒级/ 完成/ ,/ 需要/ 采用/ 面向/ 云/ 的/ 分布式/ 数据管理/ 方式/ ,/ 如图/ 1/ 中/ D/ 域/ 所示/ ./ 本文/ 重点/ 关注/ D/ 类/ 应用/ 中/ 的/ 数据分布/ 问题/ ./ 随/ ①/ ②/ ③/ Page3/ 着/ 数据量/ 的/ 增长/ ,/ 对大/ 数据/ 进行/ 管理/ 的/ 基本/ 策略/ 是/ 将/ 计算/ 推向/ 数据/ 而/ 不是/ 移动/ 大量/ 的/ 数据/ 来/ 提高/ 计算/ 性能/ [/ 1/ ]/ ./ 在/ 这类/ 应用/ 中/ ,/ 单纯/ 依靠/ 增加/ 高性能/ 计算/ 存储/ 节点/ 的/ 向上/ 扩展/ (/ Scale/ -/ Up/ )/ 方式/ 或者/ 升级/ 分布式/ 数据库系统/ 的/ 方法/ 已经/ 不能/ 适用/ 于/ 当前/ 的/ 应用/ 需求/ ,/ 将/ 大量/ 的/ 廉价/ 存储/ 和/ 处理/ 设备/ 通过/ 分布式应用/ 系统/ 进行/ 整合/ 的/ 向/ 外/ 扩展/ (/ Scale/ -/ Out/ )/ 方式/ 因/ 其/ 高性价比/ 和/ 高/ 可扩展性/ 逐渐/ 受到/ 推崇/ ./ 有效/ 管理/ 跨越/ 数千台/ 服务器/ 的/ 大规模/ 分布式/ 数据/ 不是/ 一项/ 简单/ 的/ 任务/ ,/ 它/ 需要/ 基于/ 系统工程/ 观点/ 的/ 有效/ 技术/ 来/ 识别/ 和/ 修复/ 在/ 系统/ 的/ 实际/ 实施/ 和/ 运行/ 中/ 可能/ 不断/ 出现/ 的/ 各种/ 问题/ ./ 根据/ CAP/ 原理/ [/ 2/ -/ 3/ ]/ ,/ 分布式系统/ 中/ 的/ 一致性/ (/ Consistency/ )/ 、/ 可用性/ (/ Availability/ )/ 和/ 分区/ 容忍性/ (/ PartitionTolerance/ )/ 三者/ 不可/ 兼得/ ./ 对于/ 分布式系统/ 而言/ ,/ 分区/ 容忍性/ 是/ 业务/ 应用/ 的/ 基本/ 要求/ 和/ 实施/ 策略/ ./ 如果/ 片面追求/ 系统/ 并行/ 中/ 的/ 高度/ 一致性/ 和/ 分区/ 容忍性/ (/ 比如/ 分布式/ 事务/ 机制/ )/ ,/ 很难/ 获得/ 良好/ 的/ 系统/ 扩展性/ 和/ 可用性/ ,/ 而/ 这/ 正是/ 云/ 计算环境/ 中/ 大规模/ OLTP/ 应用/ 的/ 重要/ 前提/ ./ 因此/ ,/ 当前/ 分布式/ 数据/ 存储/ 与/ 管理系统/ 的/ 设计/ 趋势/ 之一/ 是/ 转向/ 支持/ 符合/ ACID/ (/ Atomicity/ 原子/ 性/ 、/ Consistency/ 一致性/ 、/ Isolation/ 隔离/ 性/ 、/ Durability/ 持久性/ )/ 约束/ 的/ 事务/ 级/ 应用/ ./ 令人遗憾/ 的/ 是/ ,/ 虽然/ 分布式/ 并行计算/ 及其/ 执行/ 引擎/ 的/ 迅速/ 发展/ (/ 如/ MapReduce/ [/ 4/ ]/ 、/ HadoopDryad/ [/ 6/ ]/ )/ 和/ 高层次/ 的/ 语言/ 支持/ (/ PigDryadLINQ/ [/ 9/ ]/ )/ 极大/ 地/ 简化/ 了/ 大规模/ 分布式/ 数据/ 密集型/ 应用/ 的/ 发展/ ,/ 但/ 这/ 是/ 以/ 牺牲/ 数据/ 的/ 强/ 一致性/ 为/ 代价/ ./ 在/ 每时每刻/ 都/ 要/ 处理/ 大量/ 订单/ 的/ 淘宝网/ 和/ 12306/ 等/ 在线/ 交易系统/ 中/ ,/ 数据管理/ 必须/ 服从/ 强/ 一致性/ ,/ 而/ 目前/ 大规模/ 分布式/ 数据/ 管理系统/ 大多数/ 仅/ 提供/ 非常/ 有限/ 的/ 事务处理/ 功能/ ./ 举例来说/ ,/ Dynamo/ [/ 10/ ]/ 、/ MongoDB/ [/ 11/ ]/ 、/ CouchDB/ [/ 12/ ]/ 和/ Cassandra/ [/ 13/ ]/ 等/ 尚未/ 提供/ 事务/ 级/ 支持/ ;/ Bigtable/ [/ 14/ ]/ 、/ Spanner/ [/ 15/ ]/ 和/ PNUTS/ [/ 16/ ]/ 等/ 只/ 提供/ 单排/ 的/ 事务/ 或/ 事务/ 更新/ ,/ 不能/ 处理/ 多表/ 事务/ 查询/ ,/ 难以/ 推广/ 到/ OLTP/ 系统/ 中/ ,/ 像/ Azure/ [/ 17/ ]/ 、/ Megastore/ [/ 18/ ]/ 、/ OracleNoSQL/ 数据库/ [/ 19/ ]/ 等/ 这类/ 较/ 小规模/ 的/ 子集/ 数据库/ 也/ 因为/ 不/ 完全/ 支持/ 传统/ 的/ 事务/ 级/ 应用/ 而/ 无法/ 提供/ 线性/ 的/ 向/ 外/ 扩展/ 性能/ ,/ 而/ 基于/ H/ -/ Store/ [/ 20/ ]/ 的/ VoltDB/ [/ 21/ -/ 22/ ]/ 虽然/ 支持/ 完全/ 的/ ACID/ ,/ 但是/ 它/ 在/ 执行/ 并发/ 操作/ 时/ 需要/ 停止/ (/ 或/ 限制/ )/ 所/ 处理/ 的/ 事务/ 来/ 访问/ 跨越/ 多个/ 分区/ 的/ 数据/ ./ 减少/ 事务性/ 支持/ 大大简化/ 了/ 线性/ 可/ 扩展/ 的/ 分布式/ 存储/ 解决方案/ ,/ 然而/ 对于/ 不易/ 分割/ 事务/ 的/ 应用程序/ ,/ 保证/ 原子/ 性/ 和/ 隔离/ 性/ 的/ 要求/ 可能/ 产生/ 代码/ 复杂性/ 增加/ 、/ 应用/ 程序开发/ 速度慢/ 、/ 客户端/ 事务/ 调度/ 性能/ 低等/ 弊端/ ./ 数据分布/ 的/ 目的/ 是/ 将/ 数据/ 分片/ 为/ 一系列/ 不/ 相交/ 的/ 数据/ 片段/ ,/ 并/ 按照/ 一定/ 的/ 数据/ 分配/ 策略/ 分散/ 放置/ 到/ 各个/ 数据/ 节点/ 上/ ./ 对于/ 分布式应用/ 而言/ ,/ 数据分布/ 是/ 决定/ 大型/ OLTP/ 系统/ 性能/ 的/ 关键因素/ ./ 由于/ 事务/ 锁/ 的/ 存在/ ,/ 完成/ 跨/ 节点/ 事务所/ 需/ 的/ 时间/ 开销/ 往往/ 远大于/ 单/ 节点/ 事务/ ./ 因此/ ,/ 数据/ 的/ 并行处理/ 能力/ 很大/ 程度/ 上/ 取决于/ 数据分布/ 的/ 状况/ ,/ 也就是说/ ,/ 数据分布/ 的/ 优劣/ 直接/ 影响/ 到/ 大规模/ 分布式/ OLTP/ 系统/ 的/ 运行/ 效率/ [/ 23/ -/ 24/ ]/ ./ 例如/ ,/ 文献/ [/ 25/ -/ 26/ ]/ 的/ 验证/ 结果显示/ ,/ 在/ 相同/ 软硬件/ 环境/ 设置/ 下/ ,/ 不同/ 的/ 数据分布/ 策略/ 可以/ 带来/ 10/ 倍/ 以上/ 的/ 性能/ 差异/ ./ 对于/ 大多数/ OLTP/ 应用/ 而言/ ,/ 数据分布/ 实施/ 的/ 主要/ 压力/ 来自/ 于/ 系统/ 运行/ 中/ 的/ 动态变化/ :/ 数据量/ 迅猛/ 增长/ ,/ 数据/ 间/ 的/ 关联/ 关系/ 随着/ 工作/ 负载/ 的/ 访问/ 频次/ 和/ 使用/ 模式/ 不断/ 变化/ ,/ 物理/ 节点/ 的/ 存储/ 和/ 处理/ 能力/ 也/ 随着/ 系统/ 运行/ 起伏不定/ ./ 因此/ ,/ 一个/ 数据分布/ 策略/ 的/ 设计/ 目标/ 是/ 不仅/ 要/ 在/ 系统/ 运行/ 的/ 初始状态/ 下/ 找到/ 一个/ 合适/ 的/ 数据分布/ 策略/ ,/ 而且/ 要/ 在/ 数据/ 、/ 负载/ 、/ 节点/ 等/ 因素/ 不断/ 发生变化/ 的/ 时候/ 进行/ 动态/ 调整/ ,/ 从而/ 全力/ 提升/ 运行/ 环境/ 中/ 的/ 系统/ 性能/ ,/ 并/ 尽可能/ 地/ 保证/ 全局/ 范围/ 内/ 的/ 负载/ 均衡/ ./ 本文/ 的/ 第/ 2/ 节将/ 详细/ 阐述/ 数据分布/ 问题/ 的/ 三角/ 架构/ 和/ 当前/ 面临/ 的/ 键/ 挑战/ ;/ 第/ 3/ 节对/ 影响/ 数据分布/ 的/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ 3/ 个/ 关键问题/ 的/ 研究进展/ 进行/ 分类/ 、/ 对比/ 和/ 总结/ ;/ 第/ 4/ 节/ 主要/ 展望未来/ 的/ 研究/ 工作/ ;/ 最后/ ,/ 在/ 第/ 5/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 数据分布/ 数据分布/ (/ DataDistribution/ )/ 是/ 指/ 在/ 分布式系统/ 中/ ,/ 按照/ 一定/ 的/ 策略/ 将/ 数据/ 分片/ 成/ 逻辑/ 片段/ ,/ 并/ 将/ 这些/ 片段/ 分配/ 存储/ 到/ 不同/ 的/ 物理/ 节点/ 上/ ,/ 使/ 分布式系统/ 对/ 数据/ 的/ 并行处理/ 能力/ 得以/ 充分发挥/ ./ 数据分布/ 通常/ 包括/ 3/ 个/ 步骤/ :/ 即/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ ./ 其中/ ,/ 数据/ 分片/ (/ DataFragmentation/ )/ 从/ 逻辑/ 上将/ 全体/ 数据/ 按照/ 其/ 相互/ 关系/ 划分/ 为/ 逻辑/ 片段/ ,/ 即子/ 关系/ ./ 数据/ 分配/ (/ DataAllocation/ )/ 从/ 物理/ 上将/ 划分/ 好/ 的/ 逻辑/ 片段/ 分配/ 存储/ 到/ 不同/ 节点/ 上/ ./ 而/ 负载/ 执行/ (/ WorkloadProcessing/ )/ 则/ 是/ 将/ 需要/ 执行/ 的/ 工作/ 负载/ 按照/ 节点/ 的/ 实际/ 执行/ 能力/ 及/ 所/ 存储/ 的/ 数据/ 片段/ 进行/ 调度/ 和/ 运行/ ./ 数据分布/ 就是/ 通过/ 数据/ 分片/ 、/ 数据分布/ 和/ 负载/ 执行/ 来/ 统一/ 管理/ 分布式系统/ 中/ 的/ 数据/ 和/ 节点/ ,/ 并/ 处理/ 工作/ 负载/ 的/ 综合/ 过程/ ,/ 如图/ 2/ 所示/ ./ Page42/ ./ 1/ 问题/ 描述/ 为了/ 进一步/ 阐述/ 面向/ 大规模/ OLTP/ 应用/ 的/ 数据分布/ 问题/ ,/ 我们/ 考虑/ 以下/ 应用/ 场景/ :/ 一个/ 具有/ 大规模/ 数据量/ 和/ 工作/ 负载/ 的/ 数据中心/ 需要/ 将/ 系统/ 中/ 不断/ 产生/ 的/ 数据/ 和/ 需要/ 执行/ 的/ 事务/ 配置/ 到/ 多个/ 存储/ 节点/ 上/ ./ 针对/ 大规模/ OLTP/ 应用/ ,/ 需要/ 解决/ 的/ 关键问题/ 是/ 如何/ 分布/ 存储/ 所有/ 的/ 数据/ ,/ 使得/ 单个/ 事务/ 尽可能/ 在/ 单一/ 存储/ 节点/ 上/ 完成/ 以/ 避免/ 跨/ 节点/ 的/ 通信/ 代价/ ,/ 并/ 尽可能/ 保证/ 各/ 节点/ 能够/ 相对/ 均衡/ 的/ 执行/ 不同/ 事务/ 请求/ 并/ 能/ 充分发挥/ 每/ 一个/ 存储/ 节点/ 的/ 运算/ 能力/ ./ 根据/ 研究/ 和/ 分析/ ,/ 我们/ 提出/ 了/ 称为/ DaWN/ (/ 表示/ 数据/ data/ 、/ 负载/ workload/ 和/ 节点/ nodes/ )/ 的/ 三角/ 架构/ 来/ 刻画/ 数据分布/ 问题/ ,/ 如图/ 3/ 所示/ ./ 通过/ 数据/ 、/ 负载/ 和/ 节点/ 3/ 个/ 基本要素/ 来/ 回答/ 数据分布/ 过程/ 中/ “/ 分/ 什么/ ”/ 、/ “/ 怎么/ 分/ ”/ 和/ “/ 分到/ 哪/ ”/ 这/ 3/ 个/ 基本/ 问题/ ,/ 并/ 以/ 代价/ 模型/ 为/ 枢纽/ ,/ 将/ 三要素/ 间/ 的/ 相互/ 关联/ 关系/ 分别/ 抽象/ 为/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ 这/ 3/ 条/ 纽带/ ./ (/ 1/ )/ 数据/ (/ Data/ )/ ./ 是/ 指/ 系统/ 中/ 运行/ 的/ 所有/ 数据/ ,/ 包括/ 元/ 数据/ 、/ 实例/ 数据/ 、/ 日志/ 数据/ 、/ 中间/ 数据/ 等/ ./ 假设/ 所有/ 数据/ 均/ 以/ 关系/ 形式/ 存储/ ,/ 且/ 关系/ 及/ 关系/ 中/ 的/ 属性/ 有/ 明确/ 的/ 说明/ ,/ 对于/ 每/ 一个/ 关系/ ,/ 其元/ 数据/ 包括/ 关系/ 的/ 属性/ 集/ 、/ 平均/ 元组/ 的/ 大小/ 、/ 元组/ 的/ 数量/ ./ 对于/ 每个/ 属性/ ,/ 其元/ 数据/ 包括/ 该/ 属性/ 是否/ 唯一/ 、/ 每个/ 不同/ 取值/ 的/ 估计/ 数目/ 、/ 数据类型/ 、/ 存储/ 属性/ 值/ 所/ 需/ 的/ 字节数/ 、/ 主外键/ 设置/ 等/ 信息/ ./ (/ 2/ )/ 负载/ (/ Workload/ )/ ./ 是/ 指/ 使用/ 数据/ 运行/ 于/ 节点/ 上/ 的/ 各类/ 应用/ 操作/ ,/ 通常/ 由/ 一组/ 事务/ 或者/ 查询/ 构成/ ,/ 其元/ 数据/ 包括/ 所/ 使用/ 的/ 事务/ 或者/ 查询/ 的/ 基本模式/ ,/ 及其/ 在/ 负载/ 执行/ 中所/ 占/ 的/ 比重/ ./ (/ 3/ )/ 节点/ (/ Nodes/ )/ ./ 是/ 指/ 数据/ 存放/ 和/ 负载/ 运行/ 的/ 物理/ 节点/ ,/ 其元/ 数据/ 包括/ 节点/ 的/ 组织/ 方式/ 、/ 节点/ 的/ 物理/ 信息/ ,/ 如/ 磁盘/ 容量/ 、/ CPU/ 频率/ 、/ CPU/ 个数/ 、/ 内存大小/ 、/ 网络带宽/ 等/ 特征/ ./ 根据/ 要素/ 间/ 的/ 相互/ 关联/ 与/ 制约/ 关系/ ,/ 数据分布/ 问题/ 需/ 考虑/ 以下/ 3/ 个/ 关键问题/ :/ (/ 1/ )/ 数据/ 分片/ (/ DataFragmentation/ )/ ./ 又称/ 数据/ 划分/ (/ DataPartitioning/ )/ ,/ 是/ 指/ 将/ 全局/ 概念/ 上/ 的/ 数据/ 关系逻辑/ 地/ 划分/ 为/ 若干个/ 大小/ 相同/ 或者/ 不同/ 的/ 局部/ 逻辑/ 片段/ (/ 又称/ 子/ 关系/ 或/ 数据/ 子集/ )/ ,/ 分片/ 后/ 的/ 每/ 一个/ 部分/ 称为/ 一个/ 数据/ 碎片/ (/ DataFragment/ )/ ,/ 它/ 是/ 数据/ 存放/ 的/ 基本/ 单位/ ./ 它/ 介于/ 数据/ 与/ 负载/ 之间/ ,/ 侧重于/ 逻辑/ 层面/ ,/ 主要/ 影响/ 系统/ 的/ 可扩展性/ (/ Scalability/ )/ ./ (/ 2/ )/ 数据/ 分配/ (/ DataAllocation/ )/ ./ 数据/ 分片/ 将/ 数据/ 集/ 逻辑/ 地/ 划分/ 为/ 数据/ 片段/ ,/ 之后/ 需要/ 通过/ 一定/ 的/ 数据/ 分配/ 策略/ 将/ 数据/ 物理/ 地/ 存放/ 到/ 存储/ 节点/ 上/ ./ 它/ 介于/ 数据/ 与/ 节点/ 之间/ ,/ 侧重于/ 物理/ 层面/ ,/ 主要/ 影响/ 系统/ 的/ 可用性/ (/ Availability/ )/ ./ (/ 3/ )/ 负载/ 执行/ (/ WorkloadProcessing/ )/ ./ 它/ 是/ 指/ 工作/ 负载/ 通过/ 访问/ 数据/ 节点/ 上/ 的/ 数据/ 完成/ 负载/ 的/ 执行/ 过程/ ./ 它/ 介于/ 节点/ 与/ 负载/ 之间/ ,/ 侧重于/ 实施/ 层面/ ,/ 主要/ 影响/ 系统/ 的/ 吞吐量/ (/ Throughput/ )/ ./ 此外/ ,/ 从/ 静态/ 的/ 角度/ 来看/ ,/ 数据分布/ 需要/ 按照/ 从/ 数据/ 分片/ 到/ 数据/ 分配/ 再/ 到/ 负载/ 执行/ 的/ 顺序/ 来/ 完成/ ;/ 从/ 动态/ 的/ 角度/ 来看/ ,/ 在/ 数据/ 生成/ 、/ 负载/ 访问/ 和/ 节点/ 存储/ 的/ 系统/ 运行/ 过程/ 中/ ,/ 3/ 条/ 纽带/ 间/ 存在/ 着/ 因/ 三要素/ 的/ 变化/ 而/ 带来/ 的/ 动态/ 制衡/ 关系/ ./ 因此/ ,/ 在/ DaWN/ 架构/ 中/ ,/ 我们/ 使用/ 代价/ 模型/ 来/ 表示/ 系统/ 运行/ 的/ 基本/ 目标/ 和/ 限制/ ,/ 基于/ 数据/ 、/ 节点/ 和/ 工作/ 负载/ 的/ 信息/ 进行/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ ,/ 处于/ 架构/ 的/ 枢纽/ 位置/ ./ 尽管/ 我们/ 对/ 数据分布/ 问题/ 的/ 研究/ 主要/ 针对/ 云环/ Page5/ 境中/ 的/ 大型/ OLTP/ 应用/ ,/ 但是/ 所/ 提出/ 的/ DaWN/ 架构/ 对于/ 各种类型/ 的/ 数据分布/ 问题/ 研究/ 具有/ 普遍意义/ 上/ 的/ 适用性/ ./ 在/ 此基础/ 上/ ,/ 我们/ 定义数据/ 分布/ 问题/ 如下/ ./ 定义/ 1/ ./ 数据分布/ (/ DataDistribution/ )/ ./ 在/ 给定/ 的/ 数据/ 集/ D/ 、/ 负载/ 集/ W/ 和/ 节点/ 集/ N/ 的/ 约束/ 下/ ,/ 根据/ 数据/ 分片/ 策略/ stfrag/ 、/ 数据/ 分配/ 策略/ stallo/ 及/ 负载/ 执行/ 策略/ stproc/ ,/ 基于/ 代价/ 模型/ CM/ 找到/ 合适/ 的/ 数据分布/ 解决方案/ sol/ ./ 在/ 此/ ,/ 我们/ 进一步/ 形式化/ 定义数据/ 集/ D/ =/ {/ F1/ ,/ F2/ ,/ …/ ,/ F/ |/ D/ |/ }/ ,/ 其中/ ,/ Fi/ 表示/ 按照/ 数据/ 分片/ 策略/ stfrag/ 得到/ 的/ 数据/ 片段/ ;/ 负载/ 集/ W/ =/ {/ T1/ ,/ T2/ ,/ …/ ,/ T/ |/ W/ |/ }/ ,/ 其中/ ,/ Tj/ 表示/ 负载/ 执行/ 中/ 第/ j/ 种/ 事务/ 模式/ ;/ 节点/ 集/ N/ =/ {/ N1/ ,/ N2/ ,/ …/ ,/ N/ |/ N/ |/ }/ ,/ 其中/ ,/ Nk/ 表示/ 系统/ 中/ 第/ k/ 个/ 存储/ 节点/ ;/ 代价/ 模型/ CM/ =/ CMCost/ -/ CMThroughout/ (/ 详细/ 形式化/ 表示/ 见/ 3.4/ 节/ )/ ,/ 其中/ CMCost/ 表示/ 依照/ 数据/ 分配/ 策略/ stallo/ 得到/ 的/ 系统/ 执行/ 成本/ ,/ CMThroughout/ 表示/ 依照/ 负载/ 执行/ 策略/ stproc/ 得到/ 的/ 系统/ 吞吐量/ ;/ 对于/ 数据分布/ 问题/ 解/ 空间/ SOL/ 〈/ D/ ,/ W/ ,/ N/ ,/ stfrag/ ,/ stallo/ ,/ stproc/ 〉/ 中/ 的/ 解决方案/ sol/ ,/ 其/ 最优/ 解/ 的/ 目标/ 函数/ 可以/ 表示/ 为/ solBest/ =/ minCM/ ./ 一些/ 早期/ 研究/ [/ 27/ -/ 29/ ]/ 已经/ 证明/ ,/ 数据分布/ 问题/ 及其/ 子/ 问题/ 均/ 为/ NP/ -/ Hard/ 问题/ ,/ 因此/ ,/ 很难/ 找到/ 一个/ 最优/ 的/ 数据分布/ 解决方案/ ./ 同时/ ,/ 由于/ 不同/ 的/ 应用/ 系统/ 有/ 不同/ 的/ 实施/ 目标/ ,/ 在/ 设计/ 不同/ 的/ 解决方案/ 时/ ,/ 会/ 在/ 目标/ 的/ 达成/ 中/ 存在/ 一定/ 的/ 妥协/ 和/ 折中/ ./ 任何/ 系统/ 都/ 不是/ 完美/ 的/ ,/ 所有/ 解决方案/ 必然/ 会/ 有/ 相应/ 的/ 侧重点/ 及/ 需要/ 权衡/ 的/ 地方/ ,/ 如何/ 进行/ 取舍/ 是/ 通过/ 代价/ 模型/ 来/ 决定/ 的/ ,/ 这/ 也/ 正是/ 其/ 作为/ 枢纽/ 的/ 意义/ 所在/ ./ 2.2/ 关键/ 挑战/ 数据分布/ 的/ 主要/ 目的/ 是/ 通过/ 数据/ 的/ 合理/ 分布/ ,/ 使/ 尽可能/ 多/ 的/ 数据/ 就/ 地/ 存放/ ,/ 减少/ 跨越/ 逻辑/ 分区/ 或/ 物理/ 节点/ 的/ 数据/ 访问/ ,/ 即/ 提高/ 访问/ 的/ 局部性/ ./ 如何/ 处理/ DaWN/ 架构/ 中/ 3/ 条/ 边上/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ 之间/ 的/ 相互依存/ 和/ 制约/ ,/ 是/ 解决/ 数据分布/ 问题/ 的/ 重点/ 和/ 难点/ ./ (/ 1/ )/ 不同/ 的/ 数据/ 分片/ 策略/ 对应/ 不同/ 的/ 数据/ 分配/ 方案/ ,/ 数据分布/ 需要/ 考虑/ 有关/ 数据/ 、/ 场地/ 、/ 应用/ 及/ 它们/ 之间/ 的/ 关联/ 信息/ ,/ 与/ 服务器/ 能/ 提供/ 的/ 支持/ 有关/ ,/ 所以/ ,/ 在/ 设计/ 系统/ 解决方案/ 之前/ 对/ 用户/ 与/ 系统/ 需求/ 进行/ 总体/ 预测/ 和/ 估计/ ,/ 用以/ 确定/ 什么样/ 的/ 分布/ 策略/ 最为/ 合适/ ./ (/ 2/ )/ 实际/ 应用/ 中/ ,/ 根据/ 选定/ 的/ 数据分布/ 策略/ ,/ 数据/ 按照/ 相互/ 关系/ 分布/ 在/ 不同/ 的/ 节点/ 上/ ,/ 负载/ 根据/ 应用/ 需求/ 千变万化/ ,/ 节点/ 的/ 存储/ 和/ 处理/ 能力/ 也/ 随行就市/ ,/ 需要/ 随/ 系统/ 运行/ 动态/ 描述/ 和/ 维护/ 数据分布/ 特性/ 及其/ 相关/ 信息/ ./ (/ 3/ )/ 用户/ 的/ 应用/ 需求/ 千变万化/ ,/ 节点/ 服务器/ 可能/ 出现/ 升级/ 或/ 宕机/ ,/ 且/ 每个/ 节点/ 处理/ 能力/ 都/ 有/ 一定/ 的/ 承受/ 限度/ ,/ 应用/ 的/ 业务/ 负载/ 和/ 数据量/ 可能/ 面临/ 瞬时/ 激增/ 等/ 问题/ ./ 作为/ 一个/ NP/ -/ Hard/ 问题/ ,/ 需要/ 在/ 条件/ 限定/ 下/ 得到/ 数据分布/ 问题/ 的/ 可行/ 解/ ,/ 并/ 从中/ 选择/ 一个/ 相对/ 较优/ 的/ 解决方案/ ,/ 需要/ 遵守/ 的/ 策略/ 有/ 两个/ :/ 一是/ 最大/ 限度/ 地/ 提高/ 并行/ ;/ 二是/ 尽可能减少/ 通信/ ./ 以/ 代价/ 模型/ 为/ 核心/ 的/ 数据分布/ 策略/ 强调/ 以/ 实际/ 应用/ 需求/ 为/ 基础/ 进行/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ ,/ 从容应对/ 数据/ 、/ 负载/ 和/ 节点/ 间/ 的/ 制衡/ 和/ 挑战/ ./ 3/ 研究进展/ 根据/ DaWN/ 架构/ ,/ 以下/ 主要/ 从/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 规划/ 这/ 3/ 个/ 方面/ ,/ 对/ 数据分布/ 问题/ 的/ 相关/ 研究/ 和/ 进展/ 进行/ 归纳/ 和/ 总结/ ./ 3.1/ 数据/ 分片/ 数据/ 分片/ [/ 30/ -/ 33/ ]/ 的/ 研究/ 始于/ 20/ 世纪/ 70/ 年代/ ,/ 是/ 目前/ 提供/ 持久数据/ 管理/ 可扩展性/ 的/ 最优/ 方法/ 之一/ ./ 在/ 逻辑/ 上/ ,/ 每/ 一个/ 数据/ 片段/ 都/ 具有/ 一定/ 的/ 独立性/ ,/ 可以/ 在/ 一个/ 或/ 多个/ 数据/ 分区/ 中/ 进行/ 数据/ 存取/ 操作/ ./ 采用/ 合适/ 的/ 数据/ 分片/ 策略/ ,/ 可以/ 大大提高/ 数据/ 查询/ 速度/ ,/ 简化/ 大型/ 关系/ 数据管理/ ,/ 提高/ 系统/ 整体/ 性能/ 、/ 事务/ 吞吐量/ 和/ 可扩展性/ [/ 34/ ]/ ./ 文献/ [/ 27/ ,/ 35/ ]/ 认为/ ,/ 无论/ 采用/ 什么/ 方法/ 进行/ 数据/ 分片/ ,/ 都/ 需要/ 参考/ 以下/ 3/ 个/ 准则/ 以/ 保证/ 其/ 有效性/ 和/ 合理性/ ./ (/ 1/ )/ 完整性/ 原则/ (/ Completeness/ )/ ./ 全局/ 关系/ 中/ 的/ 所有/ 数据项/ 必须/ 通过/ 数据/ 分片/ 划分/ 到/ 对应/ 的/ 数据/ 片段/ 中/ ,/ 不/ 允许/ 出现/ 某个/ 数据项/ 属于/ 全局/ 关系/ 却/ 不/ 属于/ 任何/ 一个/ 数据/ 片段/ ,/ 即/ 对于/ 关系/ DS/ 分片/ 后/ 形成/ 的/ 所有/ |/ D/ |/ 个/ 数据/ 片段/ F1/ ,/ F2/ ,/ …/ ,/ F/ |/ D/ |/ 应/ 满足/ F1/ ∪/ F2/ ∪/ …/ ∪/ F/ |/ D/ |/ =/ D/ ,/ 或者说/ ,/ 对于/ 每/ 一个/ 数据/ 关系/ 元组/ t/ 有/ t/ ∈/ D/ ,/ / Fi/ ∈/ D/ 有/ t/ ∈/ Fi/ ./ (/ 2/ )/ 可/ 重构/ 原则/ (/ Reconstruction/ )/ ./ 被/ 划分/ 的/ 数据/ 片段/ 必须/ 可以/ 通过/ 某种/ 方式/ 重新/ 构成/ 分片/ 前/ 的/ 全局/ 关系/ ,/ 即/ 存在/ 重构/ 函数/ g/ 使得/ D/ =/ g/ (/ F1/ ,/ F2/ ,/ …/ ,/ F/ |/ D/ |/ )/ ,/ 也/ 即/ 对于/ 每/ 一个/ 数据/ 关系/ 元组/ t/ 有/ / t/ ∈/ D/ ,/ t/ ∈/ g/ (/ F1/ ,/ F2/ ,/ …/ ,/ F/ |/ D/ |/ )/ ./ (/ 3/ )/ 不/ 相交/ 原则/ (/ Disjointness/ )/ ./ 划分/ 全局/ 关系/ Page6D/ 后/ 所得/ 的/ 各/ 数据/ 片/ Fi/ 互不/ 重叠/ ,/ 即/ 各个/ 分片/ 都/ 应该/ 是/ 不/ 相交/ 的/ Fi1/ ∩/ Fi2/ =/ / (/ i1/ ≠/ i2/ ,/ 0/ / i1/ ,/ i2/ / |/ D/ |/ )/ ,/ 或者说/ ,/ 对于/ 每/ 一个/ 数据/ 关系/ 元组/ t/ 有/ t/ ∈/ Fi1/ 且/ !/ / t/ ∈/ Fi2/ (/ i1/ ≠/ i2/ ,/ 0/ / i1/ ,/ i2/ / |/ D/ |/ )/ ./ 分片/ 的/ 基本/ 逻辑/ 形式/ 有/ 两种/ :/ 水平/ 分片/ (/ Hori/ -/ zontalPartitioning/ )/ [/ 32/ ]/ 和/ 垂直/ 分片/ (/ VerticalParti/ -/ tioning/ )/ [/ 33/ ]/ ./ 他们/ 分别/ 对/ 具有/ 相同/ 性质/ 的/ 元组/ (/ 行/ 关系/ )/ 或/ 属性/ (/ 列/ 关系/ )/ 进行/ 划分/ ,/ 使/ 具有/ 相同/ 划分/ 特性/ 的/ 数据/ 划分/ 到/ 一组/ ,/ 每组/ 都/ 构成/ 一个/ 数据/ 片段/ ./ 由于/ 数据/ 分片/ 的/ 逻辑/ 特性/ ,/ 不/ 相交/ 原则/ 并/ 不适/ 用于/ 垂直/ 分片/ ./ 对于/ 大规模/ OLTP/ 应用/ 而言/ ,/ 主要/ 采用/ 水平/ 分片/ 以/ 保证数据/ 访问/ 的/ 完整性/ 和/ 独立性/ ,/ 减少/ 节点/ 间/ 的/ 连接/ 操作/ ,/ 从而/ 提高/ 执行/ 性能/ ,/ 降低/ 通信/ 代价/ ./ 通常/ ,/ 水平/ 分片/ 方案/ 的/ 设计/ 可/ 归纳/ 为/ 两步/ :/ 一是/ 分片/ 键/ 选择/ 策略/ ;/ 二是/ 分片/ 实施/ 策略/ ./ 3.1/ ./ 1/ 分片/ 键/ 选择/ 策略/ 在/ 实现/ 分片/ 之前/ ,/ 首先/ 需要/ 指定/ 分片/ 键/ 作为/ 系统/ 索引/ 依据/ ,/ 系统/ 将/ 根据/ 分片/ 键/ 将/ 数据/ 划分/ 为/ 数据/ 碎片/ 并/ 聚集/ 到/ 对应/ 的/ 数据/ 片段/ 中/ ,/ 而后/ 这些/ 数据/ 片段/ 将/ 根据/ 该/ 索引/ 的/ 大致/ 顺序/ 分布/ 存储/ 到/ 物理/ 节点/ 上/ ./ 由于/ 数据/ 的/ 物理/ 存储/ 位置/ 依赖于/ 此/ ,/ 所以/ 合理/ 的/ 选择/ 分片/ 键/ 非常/ 重要/ ./ 分片/ 键/ 选择/ 策略/ 是/ 指/ 如何/ 选择/ 合适/ 的/ 分片/ 键来/ 实施/ 数据/ 划分/ ./ 理想/ 的/ 解决方案/ 是/ 在/ 无需/ 人工干预/ 和/ 配置/ 的/ 情况/ 下/ 对/ 数据/ 进行/ 分片/ ,/ 同时/ ,/ 能够/ 使得/ 分片/ 后/ 的/ 系统/ 性能/ 尽可能/ 达到/ 最优/ ./ 随着/ 分布式/ 技术/ 在/ 数据库/ 领域/ 的/ 应用/ 和/ 研究/ ,/ 数据/ 分片/ 技术/ 有/ 了/ 非常/ 多/ 的/ 进展/ [/ 25/ -/ 27/ ,/ 32/ -/ 33/ ,/ 35/ -/ 36/ ]/ ./ 虽然/ 不当/ 的/ 分片/ 键/ 选择/ 会/ 大大/ 影响/ 查询/ 性能/ [/ 26/ ]/ ,/ 然而/ 大多数/ 研究/ 通常/ 假定/ 认为/ 适当/ 的/ 分片/ 键/ 已/ 被/ 选定/ 而/ 专注/ 于/ 分片/ 实施/ 策略/ [/ 37/ ]/ ,/ 对于/ 分片/ 键/ 的/ 选择/ 问题/ 却/ 鲜有/ 涉及/ ./ 在/ 实际/ 应用/ 中/ ,/ 虽然/ 许多/ 商业/ 数据库系统/ (/ 如/ Oracle/ [/ 38/ ]/ 、/ DB2/ [/ 39/ ]/ 、/ SQLServer/ [/ 40/ ]/ 、/ SAPHANA/ [/ 41/ ]/ 等/ )/ 都/ 提到/ 分片/ 键/ 选择/ 的/ 重要性/ ,/ 并/ 内置/ 相应/ 建议/ 机制/ ,/ 但是/ 其/ 策略/ 通常/ 与/ 系统/ 底层/ 深刻/ 的/ 结合/ 在/ 一起/ 且/ 不/ 开源/ ,/ 因此/ 很难/ 在/ 其他/ 应用/ 中/ 直接/ 使用/ ./ 在/ 新近/ 出现/ 或者/ 开源/ 的/ 大多数/ 数据管理/ 体系结构/ 中/ ,/ 数据/ 分片/ 键/ 的/ 选择/ 主要/ 采用/ 无差别/ 的/ 系统/ 默认/ 方式/ 或者/ 进行/ 人工/ 设置/ [/ 27/ ,/ 42/ ]/ ./ 根据/ 对/ 已有/ 研究/ 和/ 商业系统/ 的/ 应用/ 分析/ ,/ 现有/ 的/ 分片/ 键/ 选择/ 策略/ 可/ 分为/ 以下/ 4/ 类/ :/ (/ 1/ )/ 主键/ 选择/ 法/ (/ PrimaryKeySelection/ )/ ./ 这是/ 工业界/ 最/ 广泛/ 采用/ 的/ 分片/ 键/ 选择/ 策略/ ,/ 其/ 变体/ 有/ 诸如/ 使用/ 外键/ 、/ 关系/ 表中/ 的/ 第/ 1/ 列/ 等/ 作为/ 分片/ 键/ ./ (/ 2/ )/ 随机/ 选择/ 法/ (/ RandomSelection/ )/ ./ 没有/ 足够/ 的/ 数据库/ 管理/ 经验/ 或/ 没有/ 任何/ 约束条件/ 的/ 指定/ 分片/ 键时/ ,/ 可能/ 采用/ 这种/ 方式/ ./ 这/ 可能/ 导致系统/ 性能/ 受到/ 极大/ 影响/ ./ (/ 3/ )/ 遍历/ 选择/ 法/ (/ ExhaustiveSelection/ )/ ./ 尝试/ 遍历/ 所有/ 可能/ 的/ 分片/ 键/ 组合/ 以/ 获得/ 分片/ 键/ (/ 组/ )/ ,/ 使得/ 分片/ 后/ 的/ 系统/ 性能/ 最佳/ ./ 为了/ 获取/ 有效/ 信息/ 以/ 降低/ 遍历/ 空间/ 复杂度/ ,/ 它/ 需要/ 使用/ 样本/ 数据/ 集/ 和/ 负载/ 模拟/ 真实世界/ 中/ 的/ 系统/ 运行/ 状态/ ,/ 然而/ 现实/ 应用/ 并非/ 一成不变/ ,/ 因此/ 这种/ 方法/ 很难/ 正确/ 预测/ 系统/ 实时/ 运行/ 时/ 的/ 系统/ 成本/ ,/ 仅/ 适用/ 于/ 数据/ 及/ 访问/ 模式/ 稳定/ 的/ 应用/ 类型/ ./ (/ 4/ )/ 分析/ 选择/ 法/ (/ AnalyticalSelection/ )/ ./ 这种/ 方法/ 基于/ 对/ 数据/ 和/ 工作/ 负载/ 的/ 模式分析/ ,/ 通常/ 采用/ 人工/ 或/ 自动/ 优化/ 辅助工具/ 进行/ 设置/ ./ 比如/ 文献/ [/ 43/ ]/ 提出/ ASAWA/ 方法/ 进行/ 自动/ 分片/ 键/ 的/ 选择/ ,/ 不仅/ 考虑/ 了/ 数据/ 和/ 工作/ 负载/ 模式/ ,/ 同时/ 结合/ 了/ 设计/ 和/ 执行/ 信息/ ,/ 从而/ 使得/ 经常/ 共同/ 出现/ 在/ 同一个/ 查询/ 中/ 的/ 数据/ 元组/ 更/ 有/ 可能/ 被/ 划分/ 到/ 相同/ 的/ 数据/ 分片/ 中/ ,/ 从而/ 减少/ 跨/ 节点/ 连接/ 操作/ ,/ 提升/ 系统/ 性能/ ./ 随着/ 数据量/ 的/ 迅速/ 增加/ 以及/ 负载/ 中/ 各式各样/ 的/ 用户/ 需求/ ,/ 实际/ 应用/ 中/ 究竟/ 采用/ 哪/ 种/ 分片/ 键/ 选择/ 策略/ ,/ 要/ 根据/ 具体/ 业务/ 场景/ 决定/ ./ 这/ 一部分/ 的/ 工作/ 将/ 集中/ 于/ 以/ 自上而下/ 的/ 视角/ ,/ 根据/ 具体/ 的/ 数据/ 和/ 负载/ 要求/ 自动/ 选择/ ./ 3.1/ ./ 2/ 分片/ 实施/ 策略/ 分片/ 实施/ 策略/ 是/ 指/ 采用/ 什么样/ 的/ 策略/ 将/ 数据/ 划分/ 到/ 不同/ 的/ 分区/ 中/ ./ 文献/ [/ 26/ ,/ 44/ ]/ 的/ 研究/ 表明/ :/ 对于/ 分布式/ 事务/ ,/ 系统/ 吞吐量/ 受制于/ 节点/ 发送/ 和/ 接收/ 两/ 阶段/ 提交/ 消息/ 的/ 速度/ ,/ 同时/ ,/ 由于/ 系统/ 必须/ 等待/ 来自/ 多个/ 节点/ 的/ 消息/ ,/ 其/ 性能/ 与/ 分区/ 数量/ 是/ 相关/ 的/ ./ 因此/ ,/ 如果/ 采用/ 的/ 数据/ 分片/ 策略/ 能够/ 最大/ 限度/ 地/ 减少/ 分布式/ 事务/ 数量/ 和/ 每笔/ 事务/ 访问/ 的/ 分区/ 数量/ ,/ 可以/ 减少/ 事务/ 执行/ 的/ 通信/ 和/ 协调/ 成本/ ,/ 提高/ 系统/ 性能/ [/ 25/ ,/ 35/ ]/ ./ 根据/ 对/ 已有/ 应用/ 和/ 研究/ 的/ 归纳/ 和/ 总结/ ,/ 相关/ 研究/ 中/ 的/ 水平/ 分片/ 实施/ 策略/ 可以/ 抽象/ 为/ 图/ 4/ 所示/ 的/ 层次/ 架构/ ./ (/ 1/ )/ 简单/ 分片/ ./ 这类/ 方法/ 以/ 数据/ 为/ 中心/ ,/ 对表/ 结构/ 进行/ 划分/ ,/ 是/ 较为/ 成熟/ 的/ 数据/ 分片/ 类型/ ,/ 采用/ 的/ 分片/ 策略/ [/ 27/ ]/ 主要/ 有/ Hash/ 、/ Range/ 、/ Round/ -/ Robin/ 等/ ./ 其中/ ,/ 只/ 使用/ 一种/ 方法/ 划分/ 数据/ 一次/ 的/ 模式/ 是/ 一次/ 分片模式/ ,/ 采用/ 一种/ 或/ 多种/ 基本/ 划分/ 方法/ 进行/ 两次/ Page7/ 及/ 以上/ 划分/ 的/ 方式/ 是/ 混合/ 分片模式/ ,/ 如/ List/ -/ Hash/ 、/ Range/ -/ Range/ 等/ ./ 已有/ 的/ 混合/ 分片/ 优化/ 研究/ [/ 45/ -/ 47/ ]/ 能够/ 在/ 单表/ 划分/ 时/ 取得/ 较/ 好/ 的/ 效果/ ,/ 但是/ 随着/ 采用/ 不同/ 分片/ 方法/ 的/ 顺序/ 不同/ ,/ 得到/ 的/ 结果/ 会/ 各有/ 差异/ ,/ 而且/ 多表/ 环境/ 中/ 的/ 优化/ 效果/ 不/ 甚/ 理想/ [/ 26/ ]/ ./ 目前/ ,/ 大多数/ 商业/ 数据库系统/ 和/ 工业界/ 的/ 应用/ 中/ (/ 如/ Oracle/ [/ 38/ ]/ 、/ DB2/ [/ 39/ ]/ 、/ SQLServer/ [/ 40/ ,/ 48/ ]/ 等/ )/ 所/ 支持/ 的/ 是/ 单表/ 分片模式/ ,/ 它们/ 通常/ 与/ 自身/ 的/ 查询/ 优化/ 器/ 紧密结合/ [/ 48/ ]/ ,/ 根据/ 输入/ 数据/ 的/ 属性/ 和/ 索引/ 策略/ ,/ 充分/ 推理/ 并/ 集成/ 到/ 统一/ 的/ 优化/ 框架/ 中/ ,/ 完成/ 数据/ 分片/ ./ 简单/ 分片/ 策略/ 不/ 依赖于/ 数据/ 、/ 负载/ 和/ 节点/ 间/ 的/ 相互/ 关系/ ,/ 也/ 不/ 依赖于/ 数据/ 分片/ 、/ 分配/ 和/ 负载/ 执行/ 的/ 先验/ 知识/ ,/ 操作/ 简单/ ,/ 执行/ 方便/ ./ 但是/ ,/ 由于/ 没有/ 考虑/ 到/ 数据/ 访问/ 模式/ (/ 特别/ 是/ 该/ 模式/ 不/ 均匀/ 时/ )/ ,/ 可能/ 会/ 造成/ 严重/ 的/ 节点/ 过载/ 和/ 数据/ 倾斜/ ./ (/ 2/ )/ 参照/ 分片/ ./ 这类/ 方法/ 通常/ 依赖于/ 数据/ 、/ 负载/ 和/ 节点/ 间/ 的/ 相互/ 关系/ ,/ 或者/ 数据/ 分片/ 、/ 分配/ 和/ 负载/ 执行/ 的/ 先验/ 知识/ ,/ 根据/ 数据/ 与/ 负载/ 间/ 的/ 相关性/ 及/ 具体/ 应用/ 特点/ 进行/ 数据/ 分片/ ,/ 寻求/ 获得/ 最优/ 解/ 的/ 可能性/ ./ 与/ 工业界/ 应用/ 多/ 采用/ 单表/ 分片/ 的/ 方式/ 不同/ ,/ 学术界/ 研究/ 大多/ 集中/ 于/ 此/ ,/ 主要/ 分为/ 两类/ ./ ①/ 遍历/ 式/ 参照/ 分片/ ./ 根据/ 给定/ 的/ 数据/ 、/ 负载/ 和/ 节点/ 特性/ ,/ 对/ 所有/ 可能/ 的/ 划分/ 方案/ 进行/ 蛮力/ 式/ 遍历/ 搜索/ ,/ 以求/ 找到/ 最合适/ 的/ 分片/ 方案/ ./ 然而/ ,/ 如果/ 有/ 问题/ 的/ 搜索/ 空间/ 非常/ 大/ ,/ 可能/ 需要/ 过度/ 的/ 运行/ 时间/ ./ 为了/ 避免/ 检查/ 搜索/ 空间/ 中/ 的/ 所有/ 可行/ 点/ ,/ 可/ 采用/ 分支/ 定界/ 等/ 方法/ 进行/ 剪枝/ 从而/ 减少/ 复杂性/ ,/ 也/ 可以/ 通过/ 动态/ 规划/ 方法/ 避免/ 一些/ 冗余/ 计算/ ./ 常用/ 的/ 算法/ 有/ 枚举法/ 、/ 图/ 划分/ 法/ 、/ 邻域/ 搜索算法/ 等/ ./ 举例来说/ ,/ 文献/ [/ 49/ ]/ 推出/ 一个/ 综合/ 的/ 分区/ 调整/ 设计/ 方法/ ,/ 该/ 方法/ 先/ 通过/ 调用/ 一个/ “/ 建议/ ”/ 模式/ 来/ 评价/ 所有/ 的/ 工作/ 负载/ 报表/ 生成/ 候选/ 配置/ ./ 通过/ 比较/ 和/ 评估/ 所有/ 的/ 备选/ 方案/ ,/ 在/ 枚举/ 过程/ 中/ 评估/ 它们/ 的/ 代价/ 模型/ 排名顺序/ ,/ 直到/ 达到/ 停止/ 条件/ 的/ 配置/ ,/ 并/ 在/ 随后/ 的/ 分区/ 扩展/ 中/ ,/ 进一步/ 进行/ 额外/ 候选/ 方案/ 的/ 比较/ ,/ 找到/ 最佳/ 解决方案/ ./ Schism/ [/ 23/ ]/ 是/ 一种/ 基于/ 图/ 划分/ 的/ 面向/ 事务/ 查询/ 的/ 数据/ 分片/ 方法/ ,/ 它/ 将/ 每/ 一个/ 元组/ 视为/ 一个/ 节点/ ,/ 将/ 在/ 工作/ 负载/ 中/ 被/ 同时/ 访问/ 的/ 元组/ 节点/ 之间/ 用边/ 相连/ ,/ 采用/ 图/ 划分算法/ Metis/ ①/ 进行/ 数据/ 分片/ ,/ 平衡/ 分区/ 界限/ ,/ 其/ 划分/ 结果/ 能够/ 保证/ 良好/ 的/ 本地/ 语义/ 特征/ ,/ 同时/ 有效/ 地/ 减少/ 系统/ 中/ 分布式/ 事务/ 的/ 数量/ ,/ 适合/ 于/ 数据/ 和/ 负载/ 相对/ 固定/ 的/ OLTP/ 应用/ ./ 文献/ [/ 50/ ]/ 对/ Schism/ 进行/ 了/ 改进/ ,/ 依据/ 时间/ 窗口/ 模型/ 聚类/ 元组/ ,/ 并/ 构建/ 簇/ 节点/ 图/ ,/ 利用/ 分区/ 感知/ 策略/ 对图/ 进行/ 删减/ 来/ 降低/ 算法/ 的/ 复杂度/ ,/ 提高/ 了/ 分区/ 事务/ 查询/ 速度/ ./ 文献/ [/ 51/ ]/ 对/ Schism/ 进行/ 了/ 扩展/ ,/ 以/ Granola/ 为/ 基础/ ,/ 改进/ 了/ 划分/ 图/ 的/ 边/ 权值/ 机制/ ,/ 协调/ 事务/ 的/ 两/ 阶段/ 提交/ ,/ 采用/ 基于/ 机器/ 学习/ 的/ 路由/ 机制/ ,/ 完成/ 自动/ 数据/ 分片/ ,/ 同时/ 实现/ 了/ 对/ 运行/ 时/ 事务/ 的/ 跟踪/ 采集/ 和/ 基于/ 静态/ 程序/ 分析/ 的/ 自动/ 事务/ 选择/ ./ 随机/ 邻域/ 搜索/ (/ RandomNeighborhoodSearch/ ,/ RNS/ )/ [/ 40/ ]/ 通过/ 产生/ 中等/ 质量/ 的/ 初步解决/ 方案/ ,/ 根据/ 预定/ 义/ 的/ 代价/ 模型/ ,/ 使用/ 概率/ 选择/ 和/ 测试/ 等/ 方式/ 在/ 附近/ 搜索/ 空间/ 的/ 解决方案/ 中/ 探寻/ 更好/ 的/ 解决方案/ ,/ 是/ 一种/ 有效/ 的/ 近似/ 方法/ ./ 文献/ [/ 26/ ]/ 在/ 保证/ 事务处理/ 本地性/ 的/ 前提/ 下/ ,/ 对/ 无/ 共享/ 数据库/ 中/ 数据/ 分片/ 可能/ 产生/ 的/ 数据/ 倾斜/ 问题/ 进行/ 了/ 研究/ ,/ 并/ 采用/ 大规模/ 邻域/ 搜索/ (/ LargeNeighborhoodSearch/ ,/ LNS/ )/ [/ 52/ -/ 53/ ]/ 进行/ 数据/ 分片/ ,/ 最小化/ 分布式/ 事务/ 数量/ ./ 然而/ ,/ 该/ 算法/ 在/ 停止/ 指定/ 的/ 搜索/ 步骤/ 或/ 已/ 过/ 固定/ 数量/ 的/ 步骤/ 后/ 没有/ 改善/ 的/ 解决方案/ ,/ 如果/ 有/ 新增/ 数据/ ,/ 仍然/ 需要/ 重新/ 进行/ 计算/ 和/ 分配/ ./ 上述/ 几项/ 研究/ 工作/ 适用/ 于/ 数据/ 、/ 负载/ 和/ 节点均/ 相对/ 稳定/ 的/ 应用/ ./ 然而/ ,/ 这样/ 的/ 系统/ 相对/ 较少/ ./ 而且/ ,/ 在/ 实际/ 的/ 大规模/ OLTP/ 应用/ 中/ ,/ 特别/ 是/ 当前/ 的/ 大/ 数据/ 环境/ 里/ ,/ 基本/ 不/ 可能/ 采取/ 一次性/ 划分/ 且/ 无/ 后续/ 调整/ 的/ 策略/ ./ 因此/ ,/ 这/ 类/ 方法/ 难以/ 得到/ 广泛/ 的/ 应用/ ./ 最近/ ,/ 文献/ [/ 54/ -/ 56/ ]/ 提出/ 处理/ 增量/ 数据/ 的/ 解决方案/ ./ 从/ one/ -/ size/ -/ fits/ -/ all/ 的/ 视角/ ,/ 文献/ [/ 54/ ]/ 提出/ 了/ 一种/ 单维/ 划分算法/ ,/ 采用/ 或/ 水平/ 或/ 垂直/ 划分/ 的/ 方式/ ,/ 将/ 两种/ 策略/ 混合/ 起来/ ,/ 完成/ 在线/ 的/ 数据/ 划分/ 请求/ ,/ 可以/ 用于/ OLTP/ ,/ 但/ 主要/ 面向/ OLAP/ 应用/ ./ 文献/ [/ 55/ ]/ 将/ 数据/ 划分/ 技术/ 应用/ 到/ 一个/ 特定/ 的/ 科学计算/ 环境/ 中/ ,/ 面向/ 具/ ①/ Metis/ ./ http/ :/ // // glaros/ ./ dtc/ ./ umn/ ./ edu/ // gkhome/ // views/ // metis/ // index/ ./ htmlPage8/ 有/ 工作/ 流/ 特征/ 的/ 数据/ 进行/ 数据/ 划分/ ./ 文献/ [/ 56/ ]/ 应用/ Table/ -/ as/ -/ a/ -/ Column/ 理念/ ,/ 采取/ 表内/ Range/ 分片/ 、/ 表间/ 列式/ 聚集/ 的/ 方式/ ,/ 提出/ 了/ TDPS/ 策略/ ,/ 将/ 水平/ 划分/ 的/ 元组/ 完整/ 特性/ 和/ 垂直/ 划分/ 的/ 元组/ 聚集/ 特性/ 有效/ 的/ 结合/ 起来/ ,/ 根据/ 数据表/ 的/ 依赖/ 关系/ 和/ 工作/ 负载/ 的/ 均衡/ 要求/ 对/ 增量/ 数据/ 进行/ 动态/ 划分/ ,/ 从而/ 为/ 各类/ OLTP/ 应用/ 提供/ 一个/ 合适/ 粒度/ 的/ 分片/ 方案/ ./ ②/ 启发式/ 参照/ 分片/ ./ 根据/ 具体/ 的/ 应用/ 场景/ ,/ 结合/ 给定/ 的/ 数据/ 、/ 负载/ 和/ 节点/ 的/ 模式/ 与/ 特性/ ,/ 以/ 具体/ 应用/ 需求/ 驱动/ 智能/ 启发/ 算法/ 的/ 使用/ ,/ 缩小/ 解/ 空间/ 的/ 搜索/ 维度/ ,/ 以求/ 快速/ 找到/ 合适/ 的/ 分片/ 方案/ ./ 目前/ ,/ 常用/ 的/ 启发式/ 方法/ 主要/ 有/ 遗传算法/ 、/ 模拟/ 进化/ 算法/ 、/ 模拟退火/ 算法/ 等/ ./ 遗传算法/ (/ GeneticAlgorithm/ ,/ GA/ )/ 是/ 模拟/ 达尔文/ 生物/ 进化论/ 的/ 自然选择/ 和/ 遗传学/ 机理/ 的/ 生物进化/ 过程/ 的/ 计算/ 模型/ [/ 57/ -/ 59/ ]/ ./ 文献/ [/ 58/ ]/ 通过/ 将/ 分片/ 聚类/ 问题/ 形式化/ 为/ 旅行/ 商/ 问题/ (/ TravelingSalesmanProblem/ ,/ TSP/ )/ 结构/ ,/ 使用/ 优化/ 的/ 遗传算法/ 进行/ 聚类/ ,/ 解决/ 数据/ 分片/ 问题/ ./ 由于/ 遗传算法/ 的/ 整体/ 搜索/ 策略/ 和/ 优化/ 搜索/ 方法/ 在/ 计算/ 时/ 不/ 依赖于/ 梯度/ 信息/ 或/ 其他/ 辅助/ 知识/ ,/ 而/ 只/ 需要/ 影响/ 搜索/ 方向/ 的/ 目标/ 函数/ 和/ 相应/ 的/ 适应度/ 函数/ ./ 模拟/ 进化/ 算法/ (/ SimulatedEvolutionAlgorithm/ ,/ SE/ )/ 通过/ 模拟/ 自然/ 进化/ 过程/ 来/ 搜索/ 最优/ 解/ [/ 60/ -/ 61/ ]/ ,/ 它/ 主要/ 使用/ 概率/ 搜索/ 技术/ ,/ 对/ 减少/ 或/ 增加/ 一个/ 客观/ 的/ 代价/ 函数/ 的/ 机制/ 进行/ 实施/ ,/ 并/ 为/ 解决/ 这/ 类/ 问题/ 找到/ 合适/ 的/ 解决方案/ 和/ 替代/ 方法/ ./ 模拟退火/ 算法/ (/ SimulateAnnealAlgorithm/ ,/ SAA/ )/ 来源于/ 固体/ 退火/ 原理/ ,/ 即将/ 固体/ 充分/ 升温/ 再/ 徐徐/ 冷却/ ,/ 升温/ 固体/ 内部/ 粒子/ 呈/ 无序/ 状态/ 且/ 内能/ 增大/ ,/ 冷却/ 时/ 粒子/ 渐趋/ 有序/ 且/ 在/ 每个/ 温度/ 都/ 达到/ 平衡态/ ,/ 最后/ 在/ 常温/ 时/ 达到/ 内能/ 最小/ 的/ 基态/ ./ 文献/ [/ 62/ -/ 63/ ]/ 将/ 模拟退火/ 计算/ 与/ 著名/ 的/ Hopfield/ 神经网络/ 相结合/ ,/ 用于/ 数据/ 划分/ 的/ 组合/ 优化/ 问题/ ,/ 寻找/ 最优/ 的/ 解决方案/ ./ 虽然/ 使用/ 启发式/ 方法/ 能够/ 结合/ 具体/ 的/ 应用/ 场景/ ,/ 有效/ 地/ 降低/ 解/ 空间/ 的/ 搜索/ 维度/ ,/ 然而/ ,/ 如果/ 每个/ 片段/ 的/ 访问/ 模式/ 的/ 变化/ 频率/ 高/ ,/ 这种/ 方法/ 需要/ 花费/ 大量/ 的/ 时间/ 用于/ 不同/ 节点/ 间/ 的/ 数据通信/ 和/ 传输/ ./ 因此/ ,/ 响应/ 时间/ 和/ 延迟/ 将会/ 增加/ ./ 如何/ 能够/ 在/ 提高/ 分片/ 效果/ 的/ 前提/ 下/ ,/ 高效/ 地/ 执行/ 数据/ 分片/ 及/ 分片/ 后/ 的/ 工作/ 负载/ 是/ 亟待解决/ 的/ 研究/ 问题/ ./ 3.2/ 数据/ 分配/ 对于/ 大规模/ OLTP/ 应用/ 而言/ ,/ 单个/ 节点/ 的/ 存储/ 和/ 处理/ 能力/ 是/ 不能/ 满足/ 业务/ 需求/ 的/ ,/ 需要/ 将/ 系统/ 中/ 的/ 数据/ 及/ 相关/ 负载/ 分散/ 到/ 不同/ 的/ 物理/ 节点/ 上/ 存储/ 、/ 管理/ 和/ 执行/ ./ 一个/ 事务/ 是否/ 可以/ 在/ 单一/ 数据/ 分片/ 内/ 执行/ 须/ 依赖于/ 数据/ 分配/ ,/ 因此/ ,/ 文献/ [/ 30/ ]/ 引入/ 数据/ 分片/ 的/ 同时/ 也/ 引入/ 了/ 数据/ 分配/ 的/ 研究/ ./ 数据/ 分配/ (/ DataAllocation/ )/ ,/ 又称/ 数据/ 放置/ (/ Dataallocation/ )/ ,/ 是/ 指/ 按照/ 一定/ 的/ 方法/ 或/ 策略/ ,/ 将/ 使用/ 分片/ 策略/ 划分/ 全局/ 关系/ 得到/ 的/ 逻辑/ 片段/ 合理/ 地/ 存放/ 到/ 物理/ 数据/ 节点/ 上/ ./ 简单/ 的/ 数据/ 分配/ 容易/ 做到/ ,/ 但是/ 要/ 让/ 系统/ 高效/ 而/ 稳健/ 的/ 运行/ 则/ 需要/ 按照/ 应用/ 目标/ 进行/ 优化/ 设计/ ./ 设计/ 不当/ 的/ 数据/ 分配/ 会/ 导致/ 计算/ 低效/ 、/ 接入/ 成本/ 高/ 和/ 网络/ 负载/ 重/ [/ 27/ ]/ ./ 在/ 分布式系统/ 设计/ 中/ ,/ 数据/ 分配/ 的/ 基本/ 原则/ 是/ :/ 以/ 系统/ 全局性/ 能/ 优化/ 和/ 节点/ 负载平衡/ 为/ 优化/ 目标/ ,/ 尽可能/ 地/ 将/ 数据/ 放置/ 在/ 执行/ 或者/ 靠近/ 访问/ 它/ 的/ 负载/ 所在/ 的/ 节点/ 上/ ./ 因此/ ,/ 在/ 数据/ 分配/ 中/ 需要/ 注意/ 做到/ 以下/ 两点/ :/ (/ 1/ )/ 局部/ 访问/ 原则/ (/ LocalAccessing/ )/ ./ 进行/ 数据/ 分配/ 时/ ,/ 需要/ 尽量/ 地/ 将/ 可能/ 会/ 同时/ 访问/ 或/ 处理/ 的/ 数据/ 放在/ 相同/ 或/ 相邻/ 的/ 节点/ 上/ ,/ 使/ 查询/ 或者/ 事务/ 的/ 处理/ 尽可能/ 地/ 在/ 相同/ 或/ 相邻/ 的/ 节点/ 上/ 完成/ ,/ 降低/ 因跨/ 节点/ 的/ 负载/ 访问/ 所/ 产生/ 的/ 节点/ I/ // O/ 、/ 通信/ 等/ 代价/ ,/ 提高/ 数据/ 访问/ 或/ 处理/ 的/ 局部性/ ,/ 保证系统/ 性能/ ./ 文献/ [/ 64/ ]/ 指出/ 设计/ 良好/ 的/ 应用/ 应/ 使得/ 数据/ 的/ 本地/ 访问/ 程度/ 达到/ 90/ %/ 以上/ ./ (/ 2/ )/ 负载/ 均衡/ 原则/ (/ LoadBalancing/ )/ ./ 每/ 一个/ 节点/ 的/ 存储/ 和/ 处理/ 能力/ 不尽相同/ ,/ 所/ 存储/ 的/ 数据/ 内容/ 和/ 处理/ 方式/ 也/ 必/ 各有千秋/ ./ 在/ 系统/ 运行/ 中/ ,/ 由于/ 数据/ 分配/ 的/ 透明性/ 和/ 不确定性/ ,/ 每个/ 节点/ 所/ 需承担/ 的/ 局部/ 数据处理/ 和/ 全局/ 数据/ 访问/ 的/ 任务/ 和/ 强度/ 都/ 有/ 差异/ ,/ 而且/ 用户/ 需求/ 和/ 数据/ 生产/ 千变万化/ ,/ 需要/ 在/ 数据/ 分配/ 时/ ,/ 使/ 各个/ 节点/ 的/ 数据/ 存储/ 、/ 访问/ 、/ 处理/ 和/ 通信/ 的/ 负载/ 尽量/ 均衡/ ,/ 提高/ 系统/ 并行处理/ 能力/ ./ 在/ 一般/ 情况/ 下/ ,/ 要/ 完全/ 做到/ 上述/ 准则/ 是/ 非常/ 困难/ 的/ ,/ 在/ 实际/ 的/ 应用/ 中/ 需要/ 根据/ 具体/ 的/ 应用/ 场景/ 和/ 用户/ 需求/ 选择/ 主要/ 的/ 数据/ 分配/ 目标/ ,/ 结合/ 相关/ 约束条件/ 构建/ 代价/ 模型/ 权衡利弊/ ,/ 优化/ 实际/ 分配/ 策略/ ./ 总体/ 上/ ,/ 实际/ 采用/ 的/ 策略/ 可以/ 分为/ 两大类/ :/ 在/ 计算/ 过程/ 中/ 无须/ 改变/ 的/ 分配/ 称为/ 静态/ 分配/ ,/ 在/ 计算/ 执行/ 前/ 可/ 预先确定/ ;/ 在/ 并行计算/ 中/ 需要/ 对/ 新增/ 数据/ 进行/ 分配/ 或者/ 对/ 已有/ 数据/ 重新分配/ 的/ 称为/ 动态分配/ 或重/ 分配/ ./ (/ 1/ )/ 静态/ 分配/ 策略/ 早期/ 有/ 很多/ 静态/ 分配/ 策略/ 研究/ [/ 65/ -/ 68/ ]/ ./ 其中/ ,/ 静态/ Page9Hash/ 方法/ 是/ 传统/ 并行/ 存储系统/ 中/ 方法/ ,/ 无需/ 查询/ 元/ 数据/ 服务器/ ,/ 计算/ 从/ 逻辑/ 数据/ 标识符/ 到/ 物理/ 位置/ 的/ 映射/ ./ Round/ -/ Robin/ 可以/ 根据/ 最大/ 并行度/ 的/ 定义/ 实现/ 最大/ 并行/ ,/ 很多/ 应用/ 存储系统/ 采用/ 此/ 机制/ [/ 69/ ]/ ./ 但是/ 一旦/ 有/ 节点/ 增删/ ,/ 为了/ 保持/ 模/ 函数/ 的/ 一致性/ 和/ 整个/ 系统/ 的/ 负载/ 均衡/ ,/ 模数/ 范围/ 发生变化/ ,/ 需要/ 根据/ 新/ 的/ 范围/ 改变/ 存储/ 映射/ 或者/ 移动/ 数据/ ,/ 这种/ 代价/ 是/ 很大/ 的/ ./ 因此/ ,/ 在/ 静态/ 环境/ 中/ ,/ 由于/ 节点/ 上/ 的/ 分片/ 接入/ 概率/ 不变/ ,/ 能够/ 为/ 数据/ 分配/ 提供/ 最佳/ 解决方案/ ./ 然而/ ,/ 在/ 动态/ 环境/ 中/ ,/ 这些/ 概率/ 随着/ 时间/ 的/ 推移/ 变化/ ,/ 原/ 分配/ 方案/ 不能/ 做出/ 对应/ 的/ 调整/ ,/ 会/ 影响/ 应用/ 系统/ 的/ 性能/ 和/ 稳定/ ./ (/ 2/ )/ 动态分配/ 策略/ 在/ 早期/ 的/ 动态数据/ 分配/ 研究/ 中/ ,/ 文献/ [/ 70/ -/ 71/ ]/ 给出/ 了/ 初步/ 的/ 数据/ 动态分配/ 框架/ ,/ 以及/ 进行/ 重/ 分配/ 的/ 过程/ ./ 在/ 近期/ 的/ 研究/ 中/ ,/ 文献/ [/ 72/ ]/ 定义/ 了/ 可/ 扩展/ 分布式/ 数据库系统/ 中/ 的/ 数据/ 分配/ 问题/ ,/ 提出/ 了/ 一个/ 利用/ 时间/ 序列/ 模型/ 进行/ 短期/ 负载/ 预测/ 的/ 高效/ 算法/ ,/ 提前/ 进行/ 节点/ 数目/ 调整/ 和/ 片段/ 重新分配/ ,/ 避免/ 节点/ 过载/ 和/ 性能/ 退化/ ./ 文献/ [/ 73/ ]/ 提出/ 了/ 一种/ 改进/ 的/ 遗传算法/ 作为/ 数据/ 分配/ 策略/ ,/ 以多/ 目标/ 优化/ 理论/ 为/ 指导/ ,/ 采用/ 自/ 适应/ 的/ 负载/ 均衡/ 策略/ 对/ 各个/ 节点/ 所/ 要/ 执行/ 的/ 工作/ 负载/ 进行/ 调优/ ,/ 以/ 获得/ 更好/ 的/ 系统/ 性能/ ./ 文献/ [/ 74/ ]/ 基于/ 一致性/ 哈希/ 算法/ 的/ 基本/ 思想/ ,/ 通过/ 引入/ 虚拟/ 节点/ 提高/ 负载/ 均衡/ ,/ 提出/ 一种/ 高效/ 动态数据/ 分配/ 策略/ ,/ 同时/ 采用/ 一种/ 新颖/ 的/ 可用/ 存储容量/ 感知/ 和/ 存储容量/ 利用率/ 感知/ 的/ 方法/ 增强/ 云/ 存储系统/ 的/ 性能/ ./ 文献/ [/ 75/ ]/ 着眼于/ 提高/ 新/ 的/ 数据/ 放置/ 机制/ 来/ 减少/ 因/ 节点/ 增删/ 造成/ 的/ 数据/ 移动/ ,/ 为/ 衡量/ 再/ 平衡/ 过程/ 的/ 性能/ 给出/ 了/ 无效/ 移动率/ 的/ 概念/ ,/ 通过/ 使用/ 次序/ 选择/ 和/ 改进/ 的/ 次序/ 选择/ 机制/ 的/ 机制/ ,/ 对/ 可/ 扩展/ 并行/ 存储系统/ 的/ 数据/ 放置/ 进行/ 了/ 研究/ ./ 我们/ [/ 76/ ]/ 提出/ 了/ 自动/ 数据/ 分片/ 问题/ 解决/ 的/ 基本/ 架构/ ,/ 并/ 对/ 其/ 进行/ 了/ 具体/ 的/ 实施/ ,/ 对/ 各/ 功能模块/ 的/ 协动/ 关系/ 进行/ 探讨/ ,/ 采用/ Nash/ -/ Pareto/ 优化/ 均衡/ 策略/ 使得/ 前述/ 各/ 机制/ 相得益彰/ ,/ 协同/ 支持/ 自动/ 数据分布/ 的/ 执行/ ,/ 实验/ 结果/ 体现/ 了/ 解决方案/ 的/ 有效性/ ./ 文献/ [/ 77/ ]/ 将/ 市场/ 理念/ 融入/ 到/ 云/ 环境/ 下/ 负载/ 均衡/ 的/ 挑战/ ,/ 提出/ 一个/ 称为/ MBA/ 的/ 以/ 市场/ 为/ 基础/ 的/ 控制/ 方法/ ,/ 将/ 节点/ 视为/ 交易市场/ ,/ 通过/ 目标/ 市场/ 规则/ 来/ 智能/ 地/ 决定/ 数据/ 的/ 分配/ 和/ 迁移/ ,/ 从而/ 实现/ 云/ 数据库/ 节点/ 之间/ 数据/ 的/ 合理/ 分布/ ,/ 平衡/ 工作/ 负载/ ,/ 并/ 提高/ 云/ 数据库/ 的/ 整体/ 运行/ 性能/ ./ 此外/ ,/ 在/ 科学计算/ 及/ 工作/ 流/ 领域/ 对/ 数据分布/ 问题/ 的/ 研究/ 尤为/ 深入/ ./ 文献/ [/ 78/ ]/ 提出/ 了/ 能够/ 自/ 适应/ 存储/ 规模/ 变化/ 、/ 公平/ 有效/ 的/ 数据/ 布局/ 算法/ CCHDP/ ,/ 将/ 聚类/ 算法/ 与/ 一致性/ hash/ 方法/ 相结合/ ,/ 通过/ 引入/ 少量/ 的/ 虚拟/ 设备/ 实现/ 按照/ 设备/ 权重/ 分配/ 数据/ ,/ 并/ 在/ 存储/ 规模/ 发生变化/ 时/ 进行/ 自/ 适应/ 的/ 调节/ ./ 文献/ [/ 79/ ]/ 设计/ 了/ 基于/ 聚类/ 矩阵/ 的/ 数据/ 放置/ 策略/ ,/ 在/ 工作/ 流/ 建立/ 阶段/ ,/ 使用/ BEA/ 算法/ [/ 80/ ]/ 对/ 按照/ 建立/ 的/ 全局/ 数据/ 关系/ 相关矩阵/ 进行/ 变换/ 和/ 聚类/ ,/ 进行/ 高/ 内聚/ 低/ 耦合/ 的/ 分配/ ;/ 在/ 工作/ 流/ 执行/ 阶段/ ,/ 在/ 满足/ 存储/ 限制/ 的/ 前提/ 下/ ,/ 新/ 产生/ 的/ 数据/ 集/ 被/ 放置/ 在/ 相关度/ 最大/ 的/ 数据中心/ 上/ ./ 文献/ [/ 81/ ]/ 针对/ 大规模/ 数据/ 去/ 重/ 查询/ 的/ 挑战/ ,/ 提出/ 了/ 一种/ 自/ 适应/ 的/ 散列/ 和/ 直方图/ 相结合/ 的/ 数据分布/ 策略/ ,/ 动态/ 调整/ 各/ 节点/ 之间/ 的/ 数据/ 均衡/ ,/ 适用/ 于/ 数据/ 动态变化/ 的/ 工作/ 流/ 系统/ ./ 文献/ [/ 82/ ]/ 分别/ 针对/ 云/ 计算环境/ 数据/ 密集型/ 应用/ 中/ 的/ 跨/ 数据中心/ 传输/ 、/ 数据/ 依赖/ 和/ 全局/ 负载/ 均衡/ 3/ 个/ 目标/ 对/ 数据/ 布局/ 方案/ 进行/ 求解/ 、/ 评价/ 、/ 调整/ 和/ 优化/ ,/ 提出/ 一种/ 三/ 阶段/ 数据/ 布局/ 策略/ ,/ 具有/ 良好/ 的/ 综合性/ 能/ ./ 然而/ ,/ 由于/ 研究/ 领域/ 和/ 系统/ 特性/ 不同/ ,/ 这些/ 研究/ 很难/ 实施/ “/ 拿来主义/ ”/ 直接/ 将/ 其/ 应用/ 于/ 实践/ ,/ 但是/ 可以/ 在/ 大规模/ OLTP/ 应用/ 的/ 数据/ 分配/ 中/ 作为/ 参考/ 和/ 借鉴/ ./ 综合/ 前述/ 相关/ 研究/ 工作/ 和/ 进展/ ,/ 根据/ 不同/ 的/ 应用/ 需求/ ,/ 我们/ 可以/ 构建/ 出/ 解决/ 数据/ 分配/ 问题/ 的/ 核心/ 策略/ 组件/ ,/ 如图/ 5/ 所示/ ./ 根据/ 图/ 5/ ,/ 从/ 系统/ 架构/ 的/ 角度/ 上/ ,/ 数据/ 分配/ 策略/ 可以/ 分为/ 独立/ 模式/ 、/ 逻辑/ 分布模式/ 和/ 混合/ 模式/ ./ 不同/ 的/ 模式/ 中/ ,/ 模块/ 间/ 的/ 耦合/ 性/ 不同/ ./ 从/ 算法/ 的/ 角度/ 上/ ,/ 数据/ 分配/ 策略/ 可以/ 分为/ 集中式/ 策略/ 和/ 非/ 集中式/ 策略/ ./ 从/ 影响/ 算法/ 性能/ 的/ 因素/ ,/ 主要/ 有/ 数据/ 加载/ 、/ 通讯/ 延迟/ 、/ 带宽/ 限制/ 、/ 机器/ 资源/ 限制/ 、/ 操作/ 权限/ 等/ ./ 从/ 操作/ 级别/ 来看/ ,/ 有/ 运算/ 重用/ 和/ 复制/ 等/ ./ 从/ 影响/ 数据/ 重/ 分布/ 的/ 因素/ ,/ 主要/ 有/ 网络/ 变化/ 、/ 数据/ 变化/ 和/ 业务/ 流/ 变化/ 等/ ./ 对于/ 数据/ 分配/ 的/ 重新/ 设置/ 也/ 分为/ 静态/ 和/ 动态/ 两种/ 类型/ ,/ 静态/ 方式/ 是/ 一次/ 设置/ 之后/ 不再/ 变化/ 的/ ,/ 动态/ 设置/ 则/ 根据/ 资源/ 控制/ 和/ 迁移/ 进行/ 相应/ 的/ 策略/ 变化/ ./ 正是/ 这些/ 不同/ 的/ 组件/ 假设/ 展示/ 了/ 这些/ 研究/ 在/ 核心部件/ 的/ 选择/ 上/ 带来/ 的/ 解决方案/ 的/ 多样性/ ,/ 极大/ 的/ 影响/ 了/ 这些/ 数据/ 分配/ 策略/ 的/ 设计/ 和/ 实施/ ./ 在/ 实际/ 应用/ 中/ ,/ 可以/ 对/ 核心/ 组件/ 进行/ 相应/ 更替/ 以/ 满足/ 实际/ 的/ 系统/ 和/ 用户/ 需求/ ./ Page10/ 图/ 5/ 数据/ 分配/ 算法/ 核心/ 组件/ 3.3/ 负载/ 执行/ 在/ 云/ 计算环境/ 中/ ,/ 高效/ 的/ 资源管理/ 和/ 负载/ 均衡/ 是/ 缩短/ 事务/ 平均/ 响应/ 时间/ 和/ 提高/ 系统资源/ 利用率/ 的/ 必然/ 要求/ ./ 负载/ 执行/ 要求/ 综合/ 数据量/ 、/ 工作/ 负载量/ 和/ 节点/ 存储/ 处理/ 能力/ 等/ 信息/ ,/ 使得/ 每个/ 节点/ 的/ 数据/ 存储量/ 和/ 工作/ 负载量/ 能够/ 根据/ 其/ 存储/ 处理/ 能力/ 达到/ 相对/ 平衡/ 的/ 状态/ ,/ 在/ 保证系统/ 性能/ 的/ 前提/ 下/ ,/ 以期/ 达到/ 负载/ 均衡/ 的/ 运行/ 效果/ ./ 负载/ 执行/ 会/ 受到/ 许多/ 因素/ 的/ 影响/ ,/ 如/ 应用/ 需求/ 、/ 系统/ 架构/ 、/ 资源/ 调度/ 等/ ./ 用户/ 访问/ 请求/ 的/ 不/ 可预测性/ 可能/ 导致/ 某些/ 节点/ 的/ 访问/ 压力/ 过重/ ,/ 而/ 其他/ 节点/ 比较/ 空闲/ ,/ 在/ 热点/ 数据分布/ [/ 83/ ]/ 、/ 负载/ 分布/ 不均/ [/ 84/ ]/ 的/ 情况/ 下/ ,/ 持续/ 的/ 并发/ 访问/ 压力/ 将/ 影响/ 系统/ 的/ 整体/ 性能/ ./ 一般来说/ ,/ 对于/ 动态/ 运行/ 的/ 云/ 计算/ 系统/ ,/ 无论/ 采用/ 哪/ 种/ 数据分布/ 方法/ ,/ 都/ 不可避免/ 地会/ 出现/ 节点/ 负载/ 执行/ 不/ 均衡/ 的/ 情况/ ,/ 这/ 主要/ 是/ DaWN/ 架构/ 里/ 基本/ 元素/ 间/ 的/ 相互/ 变化/ 和/ 制衡/ 造成/ 的/ ./ (/ 1/ )/ 数据/ 特性/ 差异/ ./ 相同/ 任务/ 在/ 不同/ 的/ 节点/ 可能/ 产生/ 不同/ 数量/ 的/ 中间/ 结果/ ,/ 带来/ 计算/ 量/ 和/ 存取/ 开销/ 的/ 差异/ ./ (/ 2/ )/ 负载/ 执行/ 差异/ ./ 多任务/ 同时/ 运行/ 时/ ,/ 由于/ 各/ 节点/ 执行/ 顺序/ 的/ 差异/ ,/ 导致/ 每个/ 任务/ 在/ 各/ 节点/ 的/ 完成/ 时间/ 的/ 差异/ ./ (/ 3/ )/ 节点/ 性能/ 差异/ ./ 由于/ 硬件/ 缺陷/ 或者/ 不/ 稳定/ 导致/ 部分/ 节点/ 的/ 执行/ 性能/ 低下/ ,/ 在/ 分布式/ 多/ 节点/ 环境/ 中/ ,/ 不可避免/ 地会/ 出现/ 个别/ 节点/ 的/ 硬件/ 发生/ 老化/ 或者/ 缺陷/ 的/ 情况/ ./ 对/ 负载/ 执行/ 的/ 处理/ 策略/ 主要/ 是/ 通过/ 负载/ 预测/ 来/ 完成/ 的/ ,/ 即/ 根据/ 系统/ 的/ 数据/ 关系/ 、/ 负载/ 运行/ 特性/ 、/ 节点/ 增容/ 决策/ 等/ 影响/ 因素/ ,/ 使用/ 统计/ 、/ 数据挖掘/ 、/ 模式分析/ 等/ 方式/ ,/ 确定/ 未来/ 负载/ 执行/ 的/ 趋势/ ,/ 以期/ 达到/ 负载/ 均衡/ 的/ 目标/ ./ 动态数据/ 的/ 重新分配/ 必须/ 有效/ 地/ 适应/ 于/ 访问/ 模式/ 的/ 变化/ ./ 采用/ 机器/ 学习/ 技术/ 对/ 负载/ 建模/ [/ 85/ ]/ 是/ 提取/ 数据库系统/ 信息/ 的/ 重要/ 方法/ ./ 文献/ [/ 86/ ]/ 的/ 研究/ 工作/ 首创/ 通过/ 产生/ 内部事务/ 执行/ 模型/ ,/ 即/ 建模/ 事务/ 执行/ 过程/ 中/ 执行/ 了/ 哪些/ 查询/ 而/ 不是/ 简单/ 地/ 完成/ 事务/ 执行/ ,/ 来/ 优化/ 在/ 分布式/ 数据库/ 环境/ 中/ 各/ 事务/ 的/ 执行/ ./ 已有/ 的/ 方法/ 通常/ 是/ 基于/ 单个/ 查询/ 或者/ 一组/ 事务/ 来/ 建模/ 工作/ 负载/ ,/ 从而/ 管理/ 资源分配/ 或者/ 估算/ 其他/ 事务/ 未来/ 的/ 活动/ ./ 在/ 前者/ 的/ 类别/ 中/ ,/ 文献/ [/ 87/ -/ 88/ ]/ 采用/ 马尔可夫/ 模型/ 动态/ 地/ 确定/ 何时/ 应用程序/ 的/ 工作/ 负载/ 属性/ 已经/ 改变/ 及/ 数据库/ 的/ 物理/ 设计/ 需要/ 更新/ ./ 文献/ [/ 89/ ]/ 通过鉴定/ 样本/ 数据库/ 的/ 工作/ 负载/ 判断/ 其/ 应用程序/ 类型/ (/ 是/ OLTP/ 还是/ OLAP/ 应用/ )/ ,/ 并/ 据此/ 对/ 调谐/ 系统配置/ ./ 文献/ [/ 90/ ]/ 利用/ 决策树/ 方法/ 对/ 长时间/ 运行/ 的/ OLAP/ 查询/ 进行/ 资源/ 调度/ 和/ 分配/ ./ 文献/ [/ 91/ ]/ 基于/ 当前/ 正在/ 执行/ 的/ 查询/ 采用/ 马尔可夫/ 模型/ 来/ 估计/ 应用程序/ 下/ 一步/ 将要/ 执行/ 的/ 查询/ ,/ 然后/ 在/ 有/ 足够/ 可用/ 资源/ 的/ 前提/ 下/ 对/ 下/ 一个/ 查询/ 进行/ 预取/ ./ 同样/ ,/ 文献/ [/ 92/ ]/ 基于/ 当前/ DBMS/ 正在/ 执行/ 的/ 事务/ ,/ 采用/ 马尔可夫/ 模型/ 来/ 估计/ 用户/ 将要/ 执行/ 的/ 下/ 一个/ 事务/ ./ 文献/ [/ 93/ ]/ 使用/ 基于/ 查询/ 的/ 马尔可夫/ 模型/ (/ Markovmodels/ )/ ,/ 但/ 他们/ 的/ 模型/ 主要/ 以/ 离线/ 分析/ 为/ 目的/ ,/ 用于/ 识别/ 跨/ 事务/ 边界/ 的/ 用户/ 会话/ 和/ 提取/ 额外/ 的/ 使用/ 模式/ ./ 文献/ [/ 94/ ]/ 通过/ 使用/ Markov/ 模型/ 描述/ OLTP/ 应/ Page11/ 用/ 中/ 的/ 存储/ 过程/ ,/ 采用/ 4/ 种/ 不同/ 的/ 优化/ 设置/ 来/ 预测/ 未来/ 事务/ 的/ 执行/ 以/ 提高/ 其/ 可扩展性/ 和/ 准确性/ ./ 3.4/ 代价/ 模型/ 在/ 数据/ 管理系统/ 中/ ,/ 数据分布/ 方案/ 采用/ 代价/ 模型/ 来/ 估计/ DBMS/ 将/ 有/ 多少/ 资源/ 用于/ 执行/ 特定/ 的/ 查询/ 或/ 事务/ ./ 根据/ DaWN/ 架构/ ,/ 解决/ 数据分布/ 问题/ 需要/ 综合/ 考虑/ 三要素/ 的/ 各种/ 特性/ (/ 比如/ 数据/ 片段/ 的/ 大小/ 、/ 负载/ 的/ 执行/ 需求/ 、/ 节点/ 的/ 存储/ 限制/ 以及/ 网络通信/ 代价/ 等/ )/ ,/ 根据/ 应用/ 需求/ 构建/ 多个/ 数据分布/ 方案/ ,/ 并/ 通过/ 代价/ 模型/ 估算/ 和/ 对比/ 各/ 方案/ 的/ 执行/ 成本/ ,/ 得到/ 最佳/ 的/ 解决/ 策略/ ./ 作为/ 分布式系统/ 中/ 的/ 一个/ 关键问题/ ,/ 数据/ 分配/ 有/ 许多/ 执行/ 方法/ 和/ 实施/ 措施/ ./ 从/ 应用/ 性能/ 和/ 用户/ 需求/ 的/ 角度/ 考虑/ ,/ 数据/ 分配/ 方案/ 应/ 尽可能/ 地/ 强调/ 处理/ 本地性/ 以/ 减少/ 全局/ 事务/ 并/ 网络通信/ 代价/ ;/ 同时/ ,/ 必须/ 保证/ 数据分布/ 方案/ 的/ 计算/ 可行性/ ,/ 即/ 算法/ 须/ 具有/ 较/ 小/ 的/ 时间/ 和/ 空间/ 复杂度/ ./ 不同/ 的/ 优化/ 模型/ 采用/ 不同/ 的/ 优化/ 度量/ 标准/ ,/ 这些/ 标准/ 通常/ 可以/ 归为/ 两类/ ./ (/ 1/ )/ 性能/ ./ 最大化/ 整体/ 系统/ 性能/ 的/ 基本/ 测度/ 方法/ 是/ 最大/ 限度/ 的/ 提高/ 单位/ 时间/ 内/ 的/ 系统/ 吞吐量/ ,/ 即/ 单位/ 时间/ 内/ 完成/ 的/ 事务/ 或者/ 查询处理/ 的/ 数量/ ./ 对于/ 一个/ 事务/ 来说/ ,/ 如果/ 能够/ 在/ 一个/ 节点/ 运算/ 完成/ 是/ 最/ 理想/ 的/ 状态/ ,/ 如果/ 需要/ 在/ 多个/ 节点/ 运算/ 完成/ ,/ 则/ 需要/ 增加/ 传输/ 成本/ 和/ 系统/ 访问/ 成本/ ./ 因此/ ,/ 通常/ 这一/ 目标/ 的/ 实现/ 是/ 通过/ 尽量/ 最小化/ 全局/ 范围/ 内/ 跨/ 节点/ 事务处理/ 的/ 数量/ ./ (/ 2/ )/ 成本/ ./ 最小化/ 整体/ 系统/ 运行/ 成本/ 的/ 基本/ 测度/ 是/ 最小化/ 网络通信/ 数据量/ 和/ 事务/ 响应/ 时间/ ./ 根据/ 负载/ 特性/ 进行/ 分片/ 的/ 数据/ 可以/ 通过/ 数据/ 分配/ 存放/ 到/ 数据/ 节点/ 上/ ,/ 同时/ 需要/ 兼顾/ 节点/ 上/ 的/ 数据/ 存储/ 与/ 工作/ 负载/ 均衡/ ./ 已有/ 研究/ 和/ 应用/ 系统/ 根据/ 各自/ 的/ 侧重点/ 对/ 代价/ 模型/ 的/ “/ 最优/ ”/ 加以/ 区别/ ,/ 其/ 衡量/ 应/ 同时/ 包含/ 性能/ 和/ 成本/ 这/ 两个/ 因素/ ,/ 即用/ 最小/ 的/ 处理/ 代价/ 给/ 用户/ 最快/ 最准/ 的/ 响应/ ./ 但/ 由于/ 问题/ 过于/ 复杂/ ,/ 至今/ 还/ 没有/ 研究/ 出/ 这样/ 的/ 模型/ [/ 27/ ]/ ./ 根据/ 已有/ 研究/ ,/ 我们/ 对/ 数据分布/ 问题/ 中/ 所/ 使用/ 的/ 代价/ 模型/ 可以/ 归为/ 两类/ :/ 一类/ 是/ 分析/ 型/ 模型/ ,/ 即/ 基于/ 启发式/ 方法/ 估计/ 资源/ 消耗/ [/ 95/ -/ 96/ ]/ ;/ 另一类/ 是/ “/ 真实世界/ ”/ 模型/ ,/ 即/ 利用/ 数据库/ 管理系统/ 内部/ 的/ 查询/ 优化/ 器来/ 计算/ 和/ 估计/ 运行/ 代价/ [/ 35/ ,/ 97/ ]/ ./ 很多/ 文献/ 对主/ 内存/ DBMS/ 的/ 代价/ 估算/ 的/ 都/ 是/ 面向/ 单/ 节点/ 系统/ [/ 98/ ]/ 或/ 不/ 考虑/ 负载/ 倾斜/ [/ 99/ -/ 100/ ]/ 的/ ./ 总体/ 来讲/ ,/ 数据分布/ 的/ 设计/ 期望/ 是/ 尽可能/ 优化/ 整体/ 系统/ 性能/ (/ 如/ 响应/ 时间/ 、/ 吞吐量/ 等/ )/ ./ 虽然/ 理想/ 的/ 解决方案/ 应该/ 完全/ 杜绝/ 分布式/ 事务/ 的/ 发生/ ,/ 但/ 实际/ 系统/ 中/ 通常/ 只能/ 是/ 尽可能减少/ 分布式/ 事务/ 数量/ ./ 如果/ 还要/ 考虑/ 诸如/ 数据/ 在/ 不断/ 增长/ 、/ 工作/ 负载/ 的/ 内容/ 可能/ 发生/ 较大/ 的/ 变化/ 等/ 情形/ ,/ 上述/ 问题/ 将/ 变得/ 更为/ 复杂/ ./ 在/ 最快/ 响应/ 每/ 一个/ 事物/ 、/ 最大化/ 每/ 一个/ 节点/ 的/ 吞吐量/ 的/ 同时/ 最小化/ 处理/ 成本/ 是/ 非常复杂/ 的/ 参考模型/ ./ 因此/ ,/ 数据分布/ 问题/ 的/ 解决方案/ 的/ 基本/ 思想/ 是/ 将/ 数据/ 按照/ 一定/ 的/ 数据/ 划分/ 策略/ 分割/ 成/ 数据/ 片段/ ,/ 并/ 按照/ 片段/ 间/ 的/ 相互/ 关系/ 和/ 工作/ 负载/ 的/ 访问/ 情况/ 进行/ 聚集/ ,/ 并/ 分别/ 放置/ 到/ 对应/ 的/ 数据/ 节点/ 上/ ,/ 其/ 设计/ 目标/ 是/ 使/ 存取/ 访问/ 相关度/ 高/ 的/ 数据/ 分配/ 在/ 同一/ 节点/ 上/ ,/ 并/ 兼顾/ 全部/ 节点/ 上/ 的/ 数据/ 存储/ 和/ 负载/ 执行/ 的/ 均衡/ ,/ 以/ 避免出现/ 严重/ 的/ 数据/ 倾斜/ ./ 3.5/ 分析/ 归纳/ 对于/ 大规模/ OLTP/ 应用/ 而言/ ,/ 解决/ 数据分布/ 问题/ 需要/ 从/ 各个/ 子/ 问题/ 的/ 可行/ 解中/ 选择/ 一个/ 解决方案/ ,/ 并/ 在/ 最小化/ 跨/ 节点/ 数据/ 访问量/ 和/ 最大化/ 整个/ 应用/ 的/ 负载/ 吞吐量/ 这/ 两个/ 全局/ 优化/ 目标/ 中/ 进行/ 权衡/ 和/ 取舍/ ./ 在/ 国内/ 国外/ 已经/ 出现/ 的/ 大量/ 研究/ 中/ ,/ 基本/ 的/ 数据分布/ 策略/ 通常/ 是/ 基于/ 磁盘/ 容量/ 、/ 访问/ 频率/ 或者/ 网络流量/ ,/ 在/ 最大化/ 系统/ 吞吐量/ 的/ 前提/ 下/ ,/ 尽量减少/ 分布式/ 事务/ 的/ 数量/ ,/ 同时/ 兼顾/ 物理/ 节点/ 上/ 的/ 数据/ 和/ 负载/ 均衡/ ./ 目前/ ,/ 工业界/ 的/ 实现/ 偏重于/ 忽略/ 三要素/ 特性/ 的/ 无差别/ 简单/ 处理/ ,/ 学术界/ 的/ 研究/ 文献/ 偏重于/ 子/ 问题/ 的/ 算法/ 设计/ ,/ 根据/ 2.2/ 节/ ,/ 在/ 当前/ 新/ 时期/ 云/ 计算环境/ 中/ 的/ 大规模/ OLTP/ 应用/ 迫切需要/ 对/ 数据分布/ 问题/ 进行/ 整体性/ 和/ 创新性/ 的/ 研究/ 、/ 设计/ 与/ 实现/ ./ 根据/ DaWN/ 架构/ ,/ 可以/ 按照/ 三要素/ 的/ 变化/ 特征/ ,/ 对/ 不同/ 的/ 数据分布/ 解决方案/ 进行/ 归纳/ 和/ 总结/ ./ 由此/ ,/ 我们/ 认为/ ,/ 在/ 数据分布/ 问题/ 中/ :/ 数据/ 的/ 变化/ 主要/ 来自/ 数据量/ 的/ 增加/ 和/ 数据/ 更新/ ;/ 负载/ 的/ 变化/ 主要/ 来自/ 负载/ 访问/ 模式/ 和/ 频次/ 的/ 变化/ ;/ 节点/ 的/ 变化/ 主要/ 来自/ 节点/ 的/ 同质性/ 和/ 异质性/ 设计/ ./ 因此/ ,/ 对于/ 大规模/ 分布式应用/ 而言/ ,/ 重新/ 定义数据/ 模式/ 、/ 负载/ 模式/ 及/ 频繁/ 的/ 增减/ 更换/ 数据/ 节点/ 会/ 导致/ 严重/ 的/ 系统/ 不/ 稳定/ ./ 根据/ 数据/ 、/ 负载/ 和/ 节点/ 的/ 变化/ 特性/ ,/ 按照/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ 的/ 变化/ 特征/ ,/ 可以/ 得到/ 8/ 类/ 数据分布/ 解决方案/ ,/ 如表/ 1/ 所示/ ./ 其中/ ,/ S/ 代表/ 静态/ Static/ 类型/ ,/ F/ 、/ A/ 、/ P/ 分别/ 代表/ 动态变化/ 的/ 数据/ 分片/ Fragmentation/ 、/ 数据/ 分配/ Allocation/ 和/ 负载/ 执行/ Processing/ 分量/ ./ Page12/ 编号/ (/ 1/ )/ (/ 2/ )/ (/ 3/ )/ (/ 4/ )/ (/ 5/ )/ (/ 6/ )/ (/ 7/ )/ (/ 8/ )/ FAP/ 型/ 以/ 数据/ 变化/ 、/ 负载/ 变化/ 和/ 节点/ 变化/ 分别/ 作为/ D/ 、/ W/ 、/ N/ 轴/ 的/ 演进/ 方向/ ,/ 对/ 前述/ 所有/ 相关/ 参考文献/ 进行/ 应用/ 分类/ ,/ 如图/ 6/ 所示/ ./ (/ 1/ )/ S/ 型/ 静态数据/ 分布/ ,/ 这/ 类/ 方案/ [/ 23/ ,/ 26/ ,/ 30/ -/ 33/ ,/ 58/ -/ 59/ ]/ 主要/ 处理/ 数据量/ 不/ 增加/ 、/ 工作/ 负载/ 对/ 数据/ 的/ 访问/ 是/ 稳定/ 的/ 或者/ 具有/ 一定/ 的/ 时序/ 规则/ 的/ 、/ 节点/ 是/ 均/ 质/ 的/ 数据分布/ 问题/ ./ (/ 2/ )/ F/ 型/ 动态/ 分片/ 型/ 数据分布/ ,/ 这/ 类/ 方案/ [/ 45/ -/ 47/ ,/ 49/ -/ 50/ ,/ 56/ -/ 57/ ,/ 62/ ]/ 主要/ 处理/ 数据量/ 增加/ 、/ 工作/ 负载/ 对/ 数据/ 的/ 访问/ 是/ 稳定/ 的/ 或者/ 具有/ 一定/ 的/ 时序/ 规则/ 的/ 、/ 节点/ 是/ 均/ 质/ 的/ 数据分布/ 问题/ ./ (/ 3/ )/ A型/ 动态分配/ 型/ 数据分布/ ,/ 这/ 类/ 方案/ [/ 64/ -/ 67/ ]/ 主要/ 处理/ 数据量/ 不/ 增加/ 、/ 工作/ 负载/ 对/ 数据/ 的/ 访问/ 是/ 时序/ 不/ 稳定/ 的/ 或者/ 不规则/ 的/ 、/ 节点/ 是/ 均/ 质/ 的/ 数据分布/ 问题/ ./ (/ 4/ )/ P/ 型/ 动态/ 负载/ 调整型/ 数据分布/ ,/ 这/ 类/ 方案/ [/ 85/ -/ 94/ ,/ 101/ ]/ 主要/ 处理/ 数据量/ 不/ 增加/ 、/ 工作/ 负载/ 对/ 数据/ 的/ 访问/ 是/ 稳定/ 的/ 或者/ 具有/ 一定/ 的/ 时序/ 规则/ 的/ 、/ 节点/ 是/ 异质/ 的/ 数据分布/ 问题/ ,/ 即/ 节点/ 设备/ 在/ 存储容量/ 、/ 处理速度/ 、/ 网络带宽/ 等/ 方面/ 具有/ 巨大/ 差异/ ,/ 不能/ 按照/ 均质/ 的/ 方式/ 来/ 处理/ 所有/ 节点/ ./ (/ 5/ )/ F/ A型/ 节点均/ 质型/ 数据分布/ ,/ 这/ 类/ 方案/ [/ 38/ -/ 40/ ,/ 48/ ,/ 51/ ,/ 54/ -/ 55/ ,/ 60/ -/ 61/ ,/ 75/ ,/ 95/ -/ 97/ ]/ 主要/ 处理/ 数据量/ 增加/ 、/ 工作/ 负载/ 对/ 数据/ 的/ 访问/ 是/ 时序/ 不/ 稳定/ 的/ 或者/ 不规则/ 的/ 、/ 节点/ 是/ 均/ 质/ 的/ 数据分布/ 问题/ ./ (/ 6/ )/ FP/ 型/ 负载/ 稳定型/ 数据分布/ ,/ 这/ 类/ 方案/ [/ 70/ -/ 71/ ,/ 74/ ,/ 76.78/ -/ 79/ ,/ 98/ -/ 100/ ]/ 主要/ 处理/ 数据量/ 增加/ 、/ 工作/ 负载/ 对/ 数据/ 的/ 访问/ 是/ 稳定/ 的/ 或者/ 具有/ 一定/ 的/ 时序/ 规则/ 的/ 、/ 节点/ 是/ 异质/ 的/ 数据分布/ 问题/ ./ (/ 7/ )/ AP/ 型/ 数据/ 稳定型/ 数据分布/ ,/ 这/ 类/ 方案/ [/ 102/ -/ 106/ ]/ 主要/ 处理/ 数据量/ 不/ 增加/ 、/ 工作/ 负载/ 对/ 数据/ 的/ 访问/ 是/ 时序/ 不/ 稳定/ 的/ 或者/ 不规则/ 的/ 、/ 节点/ 是/ 异质/ 的/ 数据分布/ 问题/ ./ (/ 8/ )/ FAP/ 型/ 全/ 动态/ 型/ 数据分布/ ,/ 这/ 类/ 方案/ [/ 72/ -/ 73/ ,/ 77/ ,/ 82/ ]/ 主要/ 处理/ 数据量/ 增加/ 、/ 工作/ 负载/ 对/ 数据/ 的/ 访问/ 是/ 时序/ 不/ 稳定/ 的/ 或者/ 不规则/ 的/ 、/ 节点/ 是/ 异质/ 的/ 数据分布/ 问题/ ./ 这类/ 综合性/ 研究/ 最/ 难/ ,/ 但是/ 由于/ 其/ 最/ 符合实际/ 的/ 应用/ 场景/ ,/ 代表/ 着/ 数据分布/ 问题/ 解决方案/ 的/ 发展/ 方向/ ./ 其他/ 7/ 种/ 类型/ 的/ 数据分布/ 可以/ 视为/ 其/ 某种/ 类型/ 的/ 特殊/ 应用/ ./ 4/ 未来/ 研究/ 方向/ 在/ 面向/ 大/ 数据/ 的/ 云/ 计算环境/ 中/ 进行/ 数据分布/ 是/ 一个/ 复杂/ 的/ 系统性/ 问题/ ,/ 需要/ 我们/ 持续/ 不断/ 的/ 努力/ ./ 在/ 未来/ 的/ 研究/ 工作/ 中/ ,/ 可以/ 在/ 以下/ 发展/ 方向/ 中/ 进行/ 进一步/ 的/ 研究/ ./ (/ 1/ )/ 代价/ 模型/ 研究/ ./ 每/ 一个/ 数据分布/ 及其/ 子/ 问题/ 的/ 研究/ 都/ 会/ 根据/ 应用/ 特性/ 和/ 优化/ 目标/ 构建/ 相应/ 的/ 代价/ 模型/ ./ 然而/ ,/ 由于/ 系统/ 目标/ 千差万别/ ,/ 这些/ 代价/ 模型/ 从/ 定义/ 到/ 实现/ 都/ 很/ 难/ 达到/ 互通/ 互融/ 的/ 要求/ ./ 如何/ 能够/ 将/ 数据分布/ 问题/ 所/ 涉及/ 的/ 方方面面/ 的/ 要素/ 统一/ 组织/ 起来/ ,/ 并/ 在/ 具体实施/ 的/ 过程/ 中/ 各有/ 侧重/ ,/ 使得/ 相互/ 的/ 研究/ 和/ 应用/ 有/ 更/ 多/ 的/ 分享/ 和/ 借鉴/ 是/ 一个/ 非常/ 值得/ 深思/ 的/ 问题/ ./ (/ 2/ )/ 测试/ 基准/ 研究/ ./ 在/ 云/ 计算/ 时代/ ,/ 面向/ OLTP/ 的/ 数据分布/ 及其/ 各个/ 子/ 问题/ 的/ 研究/ 仍/ 局限于/ 特定/ 应用/ 或者/ 传统/ 的/ 测试/ 基准/ ./ 然而/ ,/ 由于/ 数据/ 关系/ 简单/ 、/ 事务/ 类型/ 较少且/ 工作/ 负载/ 及/ 数据/ 特性/ 稳定/ ,/ 如/ TPCC/ ①/ 的/ 传统/ 应用/ 和/ 测试/ 基准/ 不能/ 反映/ 大/ 数据/ 环/ ①/ http/ :/ // // www/ ./ tpc/ ./ org/ // tpcc/ // Page13/ 境中/ 的/ 数据/ 3V/ 特性/ ./ 而且/ ,/ 应用/ 研究/ 各自为政/ ,/ 所/ 提出/ 的/ 方法/ 的/ 普适性/ 和/ 适用范围/ 难以/ 验证/ 和/ 普及/ ./ 这一/ 现状/ 的/ 存在/ 迫切要求/ 有/ 一个/ 反映/ 云/ 计算环境/ 中/ OLTP/ 应用/ 特性/ 的/ 测试/ 基准/ 的/ 诞生/ ,/ 实现/ 面向/ 数据分布/ 问题/ 的/ 可/ 对比/ 测试/ ,/ 量化/ 测试/ 结果/ ,/ 实现/ 相关/ 研究/ 之间/ 的/ 可/ 测量/ 性/ 、/ 可重复性/ 和/ 可/ 对比性/ ./ (/ 3/ )/ 自动化/ 数据分布/ 技术/ 研究/ ./ 计算/ 的/ 根本/ 目的/ 是/ 将/ 那些/ 看似/ 非常/ 困难/ 的/ 问题/ 逐步/ 实现/ 自动化/ ,/ 提高/ 生产/ 效率/ ./ 要/ 显著/ 提高/ 数据/ 管理系统/ 的/ 性能/ ,/ 最/ 重要/ 的/ 是/ 去除/ 人工/ 操作/ ./ 这/ 是因为/ ,/ 硬件资源/ 及/ 软件/ 运行/ 环境/ 非常/ 昂贵/ 的/ 情况/ 已/ 是/ 昨日/ 黄花/ ,/ 今天/ 最/ 昂贵/ 的/ 是/ 人员/ 成本/ ./ 如果/ 要/ 在/ IT/ 技术/ 的/ 演进/ 中/ 取胜/ ,/ “/ 一切/ 自动/ ”/ 的/ 系统/ (/ 包括/ 自我/ 修复/ 、/ 自我/ 维持/ 、/ 自我/ 调整/ 等/ )/ 才/ 是/ 终极/ 答案/ [/ 21/ ]/ ./ 对于/ 数据分布/ 问题/ ,/ 要/ 实现/ 全面/ 的/ 自动化/ 解决方案/ 需要/ 着重/ 解决/ 3/ 个/ 相互/ 关联/ 的/ 关键问题/ 的/ 挑战/ ,/ 即/ :/ 一个/ 全局性/ 的/ 关系/ 应当/ 如何/ 划分/ ,/ 划分/ 后/ 的/ 数据/ 片段/ 应当/ 如何/ 分配/ 给/ 通信/ 网络/ 中/ 的/ 数据/ 节点/ 以及/ 如何/ 执行/ 数据/ 分片/ 和/ 数据/ 分配任务/ 以/ 实现/ 预定/ 的/ 目标/ ./ (/ 4/ )/ 特定/ 应用/ 研究/ ./ 对于/ 特定/ 领域/ 的/ 数据分布/ 问题/ 进行/ 优化/ ,/ 例如/ 在/ 科学计算/ 中其/ 优化/ 目标/ 是/ 设计/ 尽可能/ 地/ 使用/ 最少/ 时间/ 和/ 空间/ 的/ 索引/ ,/ 空间科学/ 数据库/ 的/ 应用/ 则/ 要求/ 尽可能/ 地/ 采用/ 更/ 多/ 的/ 优化/ 技术/ 在/ 同等/ 的/ 约束/ 环境/ 中/ 产生/ 理想/ 选择/ ,/ 但是/ 启发式/ 方法/ 通常/ 导致/ 次优/ 行为/ 的/ 产生/ ./ 根据/ 特定/ 应用领域/ 进行/ 小/ 范围/ 里/ 的/ 普适/ 方案设计/ 和/ 实施/ 将/ 极大地提高/ 该/ 领域/ 的/ 数据分布/ 针对性/ 和/ 整体/ 系统/ 性能/ ./ 5/ 结论/ 云/ 计算/ 时代/ 里/ 大/ 数据/ 波谲云/ 诡来/ 袭/ ,/ 为/ 面向/ 大规模/ OLTP/ 应用/ 的/ 数据分布/ 问题/ 带来/ 了/ 新/ 的/ 发展/ 机会/ 和/ 挑战/ ./ 本文/ 提出/ 了/ 以/ 数据/ 、/ 负载/ 和/ 节点/ 为/ 要素/ 的/ 数据分布/ 三角/ 架构/ DaWN/ ,/ 并/ 以此/ 为/ 纲/ ,/ 归纳/ 总结/ 了/ 数据分布/ 及其/ 3/ 个子/ 问题/ (/ 即/ 数据/ 分片/ 、/ 数据/ 分配/ 和/ 负载/ 执行/ )/ 的/ 相关/ 研究进展/ ./ 最后/ ,/ 提出/ 了/ 一些/ 面向/ 大规模/ OLTP/ 应用/ 的/ 数据分布/ 问题/ 未来/ 研究/ 和/ 发展/ 的/ 课题/ 和/ 方向/ ./ 

