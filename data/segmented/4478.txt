Page1/ 多核/ 系统/ 共享内存/ 资源分配/ 和/ 管理/ 研究/ 高珂/ 1/ )/ ,/ 2/ )/ 陈荔城/ 1/ )/ ,/ 2/ )/ 范东/ 睿/ 1/ )/ 刘志勇/ 1/ )/ ,/ 3/ )/ 1/ )/ (/ 中国科学院计算技术研究所/ 计算机/ 体系结构/ 国家/ 重点/ 实验室/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 大学/ 北京/ 100049/ )/ 3/ )/ (/ 中国科学院计算技术研究所/ 移动/ 计算/ 与/ 新型/ 终端/ 北京市/ 重点/ 实验室/ 北京/ 100190/ )/ 摘要/ 对于/ 共享内存/ 资源/ 的/ 多/ 核/ 系统/ 来说/ ,/ 分配/ 和/ 管理/ 有限/ 的/ 内存/ 资源/ 是/ 一个/ 非常/ 重要/ 且/ 具有/ 挑战性/ 的/ 问题/ ./ 随着/ 处理器/ 核数/ 的/ 快速增长/ ,/ 不同/ 线程/ 间/ 的/ 访存/ 请求/ 对系统/ 中/ 共享内存/ 的/ 竞争/ 也/ 愈发/ 激烈/ ,/ 由此/ 导致/ 的/ 对系统/ 性能/ 和/ 系统/ 公平性/ 的/ 影响/ 也/ 更加/ 显著/ ./ 为了/ 缓解/ 这一/ 问题/ ,/ 除了/ 增加/ 可用/ 共享资源/ 外/ ,/ 公平/ 高效/ 地/ 管理/ 和/ 利用/ 共享内存/ 资源/ 至关重要/ ./ 在/ 各类/ 共享资源/ 中/ ,/ 对系统/ 性能/ 影响/ 最大/ 的/ 是/ 共享/ Cache/ 和/ DRAM/ ./ 文中/ 将/ 这/ 两级/ 共享内存/ 资源/ 的/ 分配/ 和/ 管理/ 研究/ 归结为/ 三个/ 重要/ 方面/ ,/ 包括/ 共享/ 缓存/ 分区/ 、/ 访存/ 请求/ 调度/ 以及/ 地址映射/ 优化/ ,/ 并/ 从/ 优化/ 系统/ 吞吐/ 率/ 和/ 公平性/ 方面/ 分析/ 总结/ 了/ 一系列/ 共享/ 缓存/ 分区/ 策略/ ,/ 从/ 缓解/ 多线程/ 对/ DRAM/ 的/ 竞争/ 和/ 相互/ 干扰/ 方面/ 分析/ 概括/ 了/ 一系列/ 访存/ 调度/ 算法/ 和/ 地址映射/ 策略/ ./ 最后/ 对/ 共享内存/ 资源/ 未来/ 的/ 研究/ 和/ 发展/ 做/ 了/ 总结/ 和/ 展望/ ./ 关键词/ 多核/ 系统/ ;/ 共享/ 缓存/ ;/ 缓存/ 分区/ ;/ 动态随机/ 存储器/ ;/ 访存/ 调度/ ;/ 地址映射/ 1/ 引言/ 处理器/ 和/ 内存/ 系统/ 是/ 冯诺/ 依曼/ 体系结构/ 计算/ 系统/ 的/ 两大/ 核心部件/ ./ 处理器/ 的/ 任何/ 操作/ 必须/ 首先/ 从/ 内存/ 系统/ 中/ 取出/ 指令和数据/ ,/ 然后/ 处理器/ 再/ 将/ 操作/ 完成/ 的/ 数据/ 保存/ 回/ 内存/ 中/ ./ 这种/ 以/ 内存/ 为/ 中心/ 的/ 体系结构/ 使得/ 内存/ 墙/ [/ 1/ -/ 2/ ]/ (/ MemoryWall/ )/ 问题/ 成为/ 限制/ 计算/ 系统/ 整体/ 性能/ 的/ 关键因素/ ./ 在/ 过去/ 三十年/ 中/ ,/ 由/ 摩尔定律/ 所/ 推动/ 的/ 处理器/ 体系结构/ 改进/ ,/ 使得/ 处理器/ 的/ 性能/ 得到/ 高速/ 的/ 发展/ ,/ 而/ 内存/ 系统/ 的/ 性能/ 改善/ 却/ 远远/ 落后/ 于/ 处理器/ ./ 多线程/ 执行/ 和/ 多/ 核/ 处理器/ 的/ 出现/ ,/ 使得/ 这一/ 问题/ 的/ 影响/ 更加/ 严重/ ./ 来自/ 多个/ 处理器/ 核/ 的/ 访存/ 请求/ 对/ 共享内存/ 资源/ (/ Cache/ 和/ DRAM/ )/ 产生/ 激烈/ 的/ 竞争/ ,/ 对/ 内存/ 系统/ 产生/ 越来越/ 大/ 的/ 压力/ ./ 内存/ 系统/ 的/ 性能/ 成为/ 系统/ 规模/ 扩展/ 和/ 性能/ 提升/ 的/ 关键因素/ ,/ 内存/ 资源/ 的/ 优化/ 配置/ 和/ 高效/ 管理/ 已经/ 成为/ 提升/ 多核/ 系统/ 性能/ 的/ 关键技术/ ./ 现代/ 多核/ 处理器/ 通常/ 包含/ 私有/ 缓存/ (/ PrivateCache/ )/ 和/ 末级/ 共享/ 缓存/ LLC/ (/ LastLevelCache/ )/ ./ 图/ 1/ 所/ 展示/ 的/ 是/ 一个/ 典型/ 的/ 多/ 核/ 系统/ ./ 这种/ 多级/ 层次结构/ 是/ 缓解/ 处理器/ 与/ DRAM/ 内存/ 之间/ 性能/ 差异/ 最/ 常用/ 的/ 方法/ ./ 它/ 利用/ 程序/ 局部性/ 原理/ ,/ 把/ 不同/ 速度/ 、/ 不同/ 容量/ 和/ 不同/ 造价/ 的/ SRAM/ 缓存/ 插/ 在/ 处理器/ 和/ DRAM/ 之间/ ./ 通过/ 减少/ 对/ DRAM/ 的/ 访问/ 次数/ 来/ 大幅/ 缩短/ 访存/ 延迟/ ./ 私有/ 缓存/ 的/ 特点/ 是/ 更/ 靠近/ 处理器/ ,/ 为/ 每个/ 核/ 独占/ ,/ 容量/ 较/ 小/ ,/ 但/ 访问速度/ 较/ 快/ ,/ 不同/ 缓存/ 之间/ 可能/ 存在/ 数据/ 的/ 冗余/ 备份/ ,/ 需要/ 进行/ 一致性/ 维护/ ./ 末级/ 共享/ 缓存/ 的/ 特点/ 是/ 容量/ 较大/ 但/ 访问速度/ 较慢/ ,/ 可以/ 缓存/ 多个/ 进程/ 或/ 线程/ 的/ 独有/ 或/ 共享/ 数据/ ,/ 多核/ 共享/ 可以/ 减少/ 数据/ 的/ 冗余/ ,/ 并/ 降低/ 多/ 核间/ 的/ 通信/ 延迟/ ,/ 但/ 这/ 将/ 导致/ 多/ 核对/ 共享资源/ 的/ 竞争/ 访问/ 和/ 相互/ 干扰/ ,/ 产生/ 较/ 高/ 的/ 缓存/ 失效率/ (/ CacheMissRate/ )/ ,/ 影响/ 整个/ 系统/ 的/ 吞吐/ 率/ 和/ 公平性/ [/ 3/ -/ 4/ ]/ ./ 由于/ Cache/ 比/ DRAM/ 更/ 靠近/ 计算/ 单元/ ,/ 故/ 更/ 容易/ 影响/ 计算/ 性能/ ./ 一种/ 直观/ 的/ 方式/ 是/ 将/ Cache/ 资源/ 划分/ 为/ 若干/ 独立/ 的/ 部分/ ,/ 并/ 分别/ 赋予/ 不同/ 的/ 线程/ ,/ 从而/ 缓解/ 线程/ 间/ 对/ 共享/ Cache/ 的/ 竞争/ 和/ 相互/ 干扰/ ./ 采用/ 分区/ 的/ 方法/ 从/ 20/ 世纪/ 90/ 年代/ 以来/ ,/ 一直/ 被/ 人们/ 反复研究/ ,/ 通常/ 结合/ 各种/ 替换/ 策略/ 和/ 实现/ 机制/ 来/ 适应/ 不同/ 的/ 计算环境/ ,/ 以/ 达成/ 不同/ 的/ 性能/ 目标/ ./ 从/ 主存储器/ 的/ 角度/ 讲/ ,/ 影响/ 系统/ 性能/ 的/ 主要/ 因素/ 包括/ 内存/ 控制器/ 的/ 地址映射/ (/ AddressMapping/ )/ 和/ 访存/ 调度/ 策略/ (/ Scheduling/ )/ ./ 当/ 发生/ 末级/ 缓存/ 失效/ 时/ ,/ 处理器/ 不得不/ 延长/ 访存/ 路径/ ,/ 访问/ DRAM/ 存储器/ ./ 由于/ 片下/ 内存/ 的/ 访问/ 延迟/ 比/ 缓存/ 延迟/ 大/ 的/ 多/ ,/ 通常/ 存在/ 数量级/ 上/ 的/ 差距/ ,/ 导致/ 处理器/ 所/ 需要/ 的/ 数据/ 无法/ 及时/ 返回/ ,/ 处理器/ 进入/ 阻塞/ ①/ 状态/ 并/ 等待/ 请求/ 返回/ ,/ 严重/ 浪费/ 计算资源/ ,/ 并/ 对系统/ 性能/ 造成/ 巨大/ 影响/ ./ 学术界/ 和/ 工业界/ 对/ 这类/ 问题/ 已有/ 大量/ 的/ 相关/ 研究/ ,/ 因为/ 上述/ 任何/ 一个/ 方面/ 的/ 改进/ ,/ 都/ 可以/ 降低/ 访存/ 的/ 延迟/ 进而/ 提高/ 系统/ 的/ 性能/ ./ 在/ 多/ 核/ 平台/ 上/ ,/ 为了/ 并发/ 地/ 处理/ 不同/ 核/ 的/ 访存/ 请求/ ,/ 现代/ 的/ DRAM/ 系统/ 通常/ 包含/ 多个/ Bank/ ,/ 以/ 并发/ 地/ 独立/ 处理/ 各自/ 的/ 访存/ 请求/ ./ 然而/ 如果/ 来自/ 不同/ 进程/ // 线程/ 的/ 访存/ 请求/ 访问/ 同一个/ Bank/ ,/ 则/ 会/ 产生/ Bank/ 上/ 的/ 冲突/ ./ Bank/ 冲突/ 将/ 引发/ 两个/ 对/ 性能/ 的/ “/ 负/ ”/ 影响/ :/ (/ 1/ )/ 潜在/ 的/ 可/ 被/ 并行处理/ 的/ 访存/ 请求/ ,/ 将/ 不得不/ 被/ 串行/ 地/ 执行/ ;/ (/ 2/ )/ Bank/ 上/ 的/ 行/ 缓冲/ (/ RowBuffer/ )/ 将/ 产生/ “/ 颠簸/ ”/ ./ 这/ 两个/ “/ 负/ ”/ 影响/ 都/ 会/ 加大/ 访存/ 延迟/ ,/ 使得/ “/ 内存/ 墙/ ”/ 问题/ 在/ 多/ 核/ 计算环境/ 中/ 更为/ 突出/ ./ 地址映射/ 是否/ 合理/ 会/ 严重/ 影响/ 程序/ 的/ DRAM/ 访问/ 行为/ ,/ 例如/ 连续/ 的/ 访存/ 请求/ 被/ 映射/ 到/ 相同/ Bank/ 的/ 不同/ 行中/ ,/ 就/ 会/ 造成/ Bank/ 冲突/ ./ 地址映射/ 的/ 优化/ 目标/ 就是/ 最小化/ Bank/ 冲突/ ,/ 并/ 同时/ 增加/ 数据/ 局部性/ ./ 访存/ 调度/ 策略/ 是/ 另/ 一种/ 重要/ 的/ 优化/ 方式/ ,/ 它/ 可以/ 根据/ 不同/ 的/ 计算环境/ 因地制宜/ 地/ 采用/ 不同/ 的/ 调度/ 算法/ ,/ 并/ 较/ 易于/ 与/ 现有/ 系统集成/ ./ 从/ 21/ 世纪/ 初/ 开始/ ,/ 这一/ 方法/ 被/ 人们/ 反复/ 地/ 使用/ ./ 该/ 方法/ 可/ 被/ 概括/ 为/ 通过/ 调整/ 内存/ 控制器/ 调度/ 队列/ 中访存/ 请求/ 的/ 顺序/ ,/ 实现/ 缓解/ 线程/ 间/ 的/ 访存/ 干扰/ ,/ 同时/ 兼顾/ 公平性/ (/ Fairness/ )/ 和/ 吞吐/ 率/ ①/ 对于/ 乱序执行/ 处理器/ 来说/ ,/ 重/ 排序/ 缓存/ ROB/ 满时/ 才/ 发生/ Page3/ (/ Throughput/ )/ 的/ 目标/ ./ 我们/ 认为/ ,/ 针对/ 多核/ 系统/ 中线/ 程间/ 的/ 访存/ 干扰/ 问题/ ,/ 共享内存/ 资源/ 的/ 分配/ 和/ 管理/ 研究/ 可以/ 归结为/ 两个/ 系统/ 层次/ 上/ 的/ 三个/ 重要/ 方面/ ,/ 包括/ 共享/ 缓存/ 分区/ 、/ 访存/ 请求/ 调度/ 以及/ 地址映射/ 优化/ ./ 本文/ 将/ 在/ 这/ 三个/ 方面/ 介绍/ 、/ 概括/ 以及/ 展望未来/ 的/ 发展/ 方向/ ./ 本文/ 第/ 2/ 节/ 从/ Cache/ 层次/ 介绍/ 并/ 分析/ 片上/ 共享/ 缓存/ 分区/ 的/ 相关/ 研究/ ,/ 主要/ 包括/ 共享/ 缓存/ 分区/ 框架/ 以及/ 针对/ 多核/ 环境/ 下/ 缓存/ 分区/ 的/ 重要/ 目标/ 和/ 近期/ 的/ 研究/ 特点/ ;/ 第/ 3/ 节/ 我们/ 从/ DRAM/ 存储/ 层次/ 对/ 内存/ 控制器/ 优化/ 技术/ 进行/ 概括/ 总结/ ,/ 包括/ 访存/ 调度/ 算法/ 和/ 地址映射/ 两个/ 重要/ 方面/ ,/ 将/ 调度/ 算法/ 按照/ 不同/ 的/ 实现/ 层次/ 进行/ 分类/ 归纳/ 和/ 总结/ ,/ 并/ 对/ 单核/ 时代/ 到/ 多/ 核/ 时代/ 地址映射/ 优化/ 的/ 软硬件/ 相关/ 研究/ 进行/ 分类/ 和/ 概括/ ;/ 第/ 4/ 节/ 总结/ 全文/ ,/ 并/ 分析/ 讨论/ 内存/ 共享资源/ 未来/ 的/ 研究/ 和/ 发展趋势/ ./ 2/ 共享/ 缓存/ 分区/ 在/ 框架/ (/ framework/ )/ 上/ ,/ 我们/ 将/ 共享/ 缓存/ 分区/ 归结为/ 三个/ 主要/ 的/ 构成/ 部分/ :/ 缓存/ 性能/ 信息/ 探测/ 和/ 收集/ 、/ 缓存/ 分区/ 算法/ 以及/ 具体/ 的/ 缓存/ 分区/ 实现/ 机制/ ./ 随着/ 多核/ // 众核/ 时代/ 的/ 来临/ ,/ 线程/ 级/ 大规模/ 并行/ 的/ 趋势/ 越来越/ 明显/ ,/ 可/ 并行/ 的/ 多/ 应用程序/ 行为/ 特征/ 更为/ 复杂/ 和/ 多样/ ,/ 在/ 给定/ 不同/ 目标/ 和/ 体系结构/ 特征/ 的/ 限制/ 下/ ,/ 共享/ 缓存/ 分区/ 面临/ 新/ 的/ 问题/ 和/ 挑战/ ./ 本节/ 主要/ 分为/ 两/ 部分/ :/ 第/ 1/ 部分/ 集中/ 分析/ 和/ 总结/ 与/ 缓存/ 分区/ 框架/ 相关/ 的/ 若干/ 问题/ ,/ 其中/ 包括/ 硬件/ 缓存/ 性能/ 计数器/ 的/ 设计/ 和/ 采用/ ,/ 实际/ 应用/ 中/ 的/ 几种/ 衍生/ 和/ 折中/ 缓存/ 分区/ 算法/ ,/ 以及/ 这些/ 分区/ 算法/ 在/ 软硬件/ 环境/ 下/ 的/ 具体/ 实现/ 机制/ ;/ 第/ 2/ 部分/ 集中/ 讨论/ 多核/ // 众核/ 时代/ 到来/ 之后/ ,/ 线程/ 间/ 干扰/ 所/ 产生/ 的/ 新/ 问题/ 和/ 新/ 趋势/ ,/ 分析/ 并/ 总结/ 了/ 面向/ 吞吐/ 率/ 和/ 公平性/ 的/ 缓存/ 分区/ 研究/ ,/ 以及/ 针对/ 线程/ 数量/ 进一步/ 增长/ 所/ 带来/ 的/ 扩展性/ 问题/ 的/ 细粒度/ 分区/ 研究/ ./ 2.1/ 共享/ 缓存/ 分区/ 框架/ 共享/ 缓存/ 分区/ 研究/ 在/ 单核/ 时代/ 就/ 已经/ 出现/ ,/ 主要/ 涉及/ 的/ 是/ 指令和数据/ 的/ 缓存/ 分配/ 问题/ ./ Stone/ 等/ 人/ [/ 5/ ]/ 研究/ 了/ 多道程序/ 在/ 单核/ 处理器/ 上/ 的/ 最优化/ 分区/ 问题/ ,/ 他/ 认为/ 缺失/ 率/ 是/ 缓存/ 大小/ 的/ 函数/ ,/ 图/ 2/ 所示/ 为/ 缺失/ 率/ 函数/ 随/ 分区/ 状态/ 转换/ 图/ ./ 其中/ M/ (/ x/ )/ 代表/ 进程/ 的/ 缓存/ 缺失/ 率/ ,/ I/ 和/ D/ 分别/ 代表/ 指令流/ 和/ 数据流/ ,/ C/ 为/ 共享/ 缓存/ 的/ 容量/ 大小/ ,/ S/ (/ x/ )/ 代表/ 每个/ 进程/ 在/ 缓存/ 容量/ x/ 下/ 的/ 概率/ ./ Stone/ 通过/ 推导/ 证明/ 指令流/ 和/ 数据流/ 存在/ 最优化/ 分区/ 的/ 情形/ :/ 当/ 不同/ 源访存/ 缺失/ 率/ 函数/ 的/ 导数/ 相等/ 时/ ,/ 即/ 是/ 最优化/ 分区/ 的/ 情形/ ./ 然而/ 在/ 竞争/ 的/ 情况/ 下/ ,/ 对/ 共享/ 缓存/ 的/ 无约束/ 管理/ ,/ 无法/ 实现/ 最优化/ ./ Suh/ 等/ 人/ [/ 6/ -/ 7/ ]/ 认为/ 根据/ Stone/ 的/ 简单/ 贪婪/ 算法/ 可以/ 找到/ 最优/ 的/ 缓存/ 分区/ ,/ 但/ 指出/ 这种/ 方法/ 只/ 适合/ 缓存/ 缺失/ 率/ 函数/ 是/ 单调/ 的/ 情形/ ./ 在/ 实际/ 应用/ 中/ ,/ 缓存/ 缺失/ 率/ 函数/ 并/ 不是/ 严格/ 单调/ 的/ ,/ 这/ 导致/ 如果/ 采用/ 分割/ 算法/ ,/ 将/ 带来/ 很大/ 的/ 实现/ 开销/ ./ Suh/ 等/ 人/ [/ 6/ ]/ 提出/ 了/ 自己/ 的/ 缓存/ 分区/ 整体/ 框架/ ,/ 并/ 重点/ 研究/ 了/ 缓存/ 的/ 分配/ 算法/ ./ Suh/ 等/ 人/ 给出/ 了/ 多/ 核/ 共享/ 缓存/ 分区/ 的/ 形式化/ 定义/ :/ 假设/ 当前/ 运行/ 的/ 进程/ 数为/ N/ ,/ 若/ 按照/ 缓存/ 块/ 的/ 粒度/ 完成/ 分区/ ,/ 进程/ 间/ 共享/ 缓存/ 块/ 的/ 个数/ 是/ C/ ,/ 问题/ 是/ 将/ 共享/ 缓存/ 分割/ 成/ N/ 个/ 互不/ 相交/ 的/ 子集/ ,/ 目标/ 是/ 最小化/ 整体/ 的/ 缓存/ 缺失/ 率/ ./ 每次/ 分区/ 的/ 时间/ 间隔/ 记为/ T/ (/ 该/ 时间/ 包含/ 重新/ 分区/ 所/ 导致/ 的/ 开销/ )/ ./ 设/ Ci/ 是/ 分配/ 给/ 第/ i/ 个/ 进程/ 的/ 缓存/ 块/ 的/ 个数/ ,/ 分区/ 需要/ 产生/ 一个/ 包含/ N/ 个/ 元素/ 的/ 序列/ {/ C1/ ,/ C2/ ,/ …/ ,/ CN/ }/ ./ 定义/ mi/ (/ c/ )/ 是/ 第/ i/ 个/ 进程/ 在/ 时间/ T/ 内所/ 发生/ 的/ 缺失/ 率/ ,/ 最优化/ 分区/ 就是/ 使得/ 表达式/ ∑/ N/ 其/ 限制/ 条件/ 为/ ∑/ N/ 形式化/ 的/ 描述/ 对/ 基于/ 性能/ 探测/ 和/ 收集/ 的/ 缓存/ 分区/ 框架/ 研究/ 具有/ 指导意义/ ./ 2.1/ ./ 1/ 性能/ 信息/ 探测/ 和/ 收集/ 现代/ 商用/ 处理器/ 一般/ 包含/ 硬件/ 缓存/ 性能/ 计数器/ ./ 通过/ 性能/ 计数器/ 可以/ 在/ 程序运行/ 过程/ 中/ 动态/ 和/ 周期性地/ 收集/ 特定/ 信息/ ,/ 比如/ 访存/ 次数/ 、/ 缺失/ 次数/ 等/ ./ 这种/ 精确/ 地/ 获取/ 程序/ 访存/ 行为/ 特征/ 信息/ 的/ 探测/ 装置/ ,/ 可/ 有效/ 辅助/ 缓存/ 分区/ 选择/ 机制/ 做出/ 相应/ 的/ 分配/ 和/ 调度/ 策略/ ./ Suh/ 等/ 人/ [/ 7/ ]/ 提出/ 通过/ 边界/ 收益/ (/ MarginalGains/ )/ 的/ 方法/ 来/ 寻找/ 适合/ 各个/ 程序/ 的/ 分区/ 大小/ ./ 对组/ 相联/ 缓存/ 增加/ 路/ 计数器/ (/ WayCounter/ )/ ,/ 当/ 一个/ 最/ 近期/ 使用/ MRU/ (/ MostRecentlyUsed/ )/ 缓存/ 路/ 中/ 的/ 缓存/ 行/ 发生/ 命中/ 时/ ,/ Counter/ (/ 0/ )/ 增加/ 1/ ./ Counter/ (/ 1/ )/ 统计/ 次/ 最/ 近期/ MRU/ 的/ 缓存/ 行/ 命中/ 次数/ ,/ 以此类推/ ,/ Counter/ (/ N/ )/ 统计/ 近期/ 最少/ 使用/ LRU/ (/ LeastRecentlyUsed/ )/ 的/ 缓存/ 命中/ 次数/ ./ 除了/ 这些/ Page4/ 信息/ 外/ ,/ 每个/ 缓存/ 块/ 还/ 需要/ 增加/ 进程/ 的/ ID/ 信息/ ,/ 另外/ 每个/ 处理器/ 包含/ 一个/ 缓存/ 块/ 计数器/ ,/ 用以/ 保存/ 处理器/ 所/ 包含/ 的/ 缓存/ 块数/ ./ 这种/ 每路/ 缓存/ 对应/ 一个/ 计数器/ 的/ 结果/ 是/ 将/ 一路/ 缓存/ 作为/ 缓存/ 分区/ 单元/ ,/ 在/ 系统/ 的/ 缓存/ 路数/ 足够/ 多且/ 线程/ 数较/ 少时/ ,/ 这种/ 做法/ 可以/ 取得/ 较为理想/ 的/ 效果/ ./ 通过/ 对/ 性能/ 信息/ 进行/ 监控/ ,/ 既/ 可以/ 得到/ 线程/ 随/ 可用/ 缓存/ 空间/ 减小/ 而/ 导致/ 的/ 缓存/ 失效率/ 的/ 增加/ 趋势/ ,/ 也/ 能/ 反过来/ 获取/ 当/ 线程/ 的/ 可用/ 缓存/ 空间/ 增加/ 时/ ,/ 线程/ 的/ 缓存/ 失效率/ 降低/ 的/ 趋势/ ./ 这种/ 随着/ 缓存/ 空间/ 的/ 增减/ 带来/ 的/ 性能/ 改变/ 即/ 为/ 边际/ 效益/ ./ 在/ 具体/ 的/ 分区/ 实现/ 机制/ 中/ ,/ 收集/ 哪些/ 信息/ 与/ 特定/ 的/ 缓存/ 分区/ 目标/ 有关/ ,/ 比如/ 对/ 缓解/ 多核/ 多线程/ 程序/ 的/ 访存/ 竞争/ 和/ 污染/ ,/ 提高/ 系统/ 整体/ 性能/ 而言/ ,/ 需要/ 收集/ 总/ 的/ 缓存/ 缺失/ 率/ 信息/ [/ 3/ ]/ ;/ 对/ 更加/ 公平/ 地/ 对待/ 并行/ 运行/ 的/ 多道程序/ ,/ 保证/ 各个/ 进程/ 的/ 服务质量/ QoS/ (/ QualityofService/ )/ 而言/ ,/ 需要/ 收集/ 各个/ 进程/ 在/ 单独/ 运行/ 和/ 共享/ 运行/ 下/ 的/ 缓存/ 失效/ 比/ 信息/ [/ 4/ ]/ ./ 2.1/ ./ 2/ 缓存/ 分区/ 分配/ 算法/ 依据/ 探测/ 和/ 收集/ 获取/ 的/ 性能/ 信息/ ,/ 可以/ 设计/ 相应/ 的/ 算法/ 来/ 确定/ 每个/ 处理器/ 核/ 可用/ 的/ 缓存/ 空间/ 配额/ ./ 缓存/ 分区/ 分配/ 算法/ 的/ 有效性/ 对/ 缓存/ 分区/ 机制/ 性能/ 具有/ 重要/ 的/ 影响/ ,/ 对/ 缓解/ 多核/ 之间/ 的/ 访存/ 竞争/ 和/ 污染/ 具有/ 重要/ 作用/ ./ Hassidim/ [/ 8/ ]/ 从/ 理论/ 上/ 证明/ 了/ 为/ 多/ 核/ 处理器/ 中/ 的/ 每个/ 核/ 寻找/ 最优/ 的/ 共享/ 缓存/ 分区/ 配额/ 是/ 一个/ NP/ 难/ 的/ 问题/ ./ 当/ 处理器/ 核/ 的/ 数量/ 达到/ 一定/ 规模/ 时/ ,/ 对/ 每/ 一种/ 可能性/ 的/ 分区/ 分别/ 评估/ 是/ 不切实际/ 的/ ,/ 例如/ 对于/ 一个/ 32/ 路/ 的/ 末级/ 共享/ 缓存/ 进行/ 分区/ ,/ 四核/ 的/ 情况/ 下/ 将/ 会/ 有/ 6545/ 种/ 分区/ 可能/ ,/ 八核时/ 将/ 会/ 达到/ 15380937/ 种/ 可能/ ./ 因此/ ,/ 在/ 具体/ 实现/ 缓存/ 分区/ 机制/ 的/ 时候/ ,/ 都/ 会/ 有所/ 侧重/ 和/ 权衡/ ./ 比如/ 在/ 缓存/ 分区/ 研究/ 早期/ 提出/ 并/ 被/ 广泛/ 研究/ 的/ 常用/ 算法/ 有/ 贪婪/ 算法/ [/ 9/ ]/ 、/ 基于/ 分段/ 的/ 凸函数/ 算法/ [/ 5/ ]/ 以及/ 前瞻/ 预测/ 算法/ [/ 3/ ]/ 等等/ ./ 2.1/ ./ 3/ 缓存/ 分区/ 实现/ 机制/ 缓存/ 分区/ 除了/ 需要/ 通过/ 算法/ 来/ 确定/ 分区/ 在/ 大小/ 和/ 数量/ 的/ 最优/ 划分/ 外/ ,/ 还/ 需要/ 一个/ 底层/ 的/ 实现/ 机制/ ./ 根据/ 实施/ 的/ 路径/ 和/ 时机/ 的/ 不同/ ,/ 可/ 将/ 缓存/ 分区/ 实现/ 机制/ 分为/ 两类/ :/ (/ 1/ )/ 严格/ 限定/ 缓存/ 位置/ 分区/ ./ 概括地说/ 是/ 严格/ 限制/ 访存/ 地址/ 在/ 缓存/ 中/ 的/ 位置/ ./ 路/ 分区/ (/ WayParti/ -/ tioning/ )/ 或者/ 列/ 分区/ (/ ColumnCaching/ )/ 方式/ 是/ 将/ 缓存/ 按路/ 进行/ 分割/ ,/ 并/ 限制/ 每个/ 分区/ 映射/ 到/ 系统/ 可用/ 路/ 的/ 子/ 集中/ ./ 路/ 分区/ 比较简单/ ,/ 但/ 也/ 存在/ 较/ 明显/ 的/ 问题/ :/ 以路/ 粒度/ 进行/ 分区/ ,/ 可用/ 分区/ 数/ 受限于/ 路/ 的/ 数目/ ,/ 可扩展性/ 较差/ ;/ 另外/ 也/ 会/ 导致/ 每个/ 分区/ 的/ 关联度/ 降低/ ,/ 影响/ 分区/ 后/ 的/ 性能/ ./ 为了/ 避免/ 关联度/ 的/ 缺失/ ,/ 可以/ 将/ 缓存/ 按组/ (/ Set/ )/ 分区/ ,/ 比如/ 可/ 重配/ Cache/ [/ 10/ ]/ 和/ MolecularCache/ [/ 11/ ]/ ./ 还/ 可以/ 通过/ 页/ 着色/ 技术/ ,/ 利用/ 操作系统/ 的/ 虚存/ 管理/ 来/ 限制/ 进程/ 可用/ 的/ 物理地址/ 到/ 固定/ 的/ 缓存/ 组中/ ./ (/ 2/ )/ 基于/ 替换/ 策略/ 的/ 分区/ ./ 另外/ 一种/ 分区/ 实现/ 机制/ 是/ 通过/ 修改/ 缓存/ 的/ 分配/ 和/ 替换/ 策略/ 来/ 实现/ ./ 这种/ 机制/ 没有/ 对/ 缓存/ 分区/ 位置/ 进行/ 严格/ 限制/ ./ 如表/ 1/ 所示/ ,/ 我们/ 统计/ 了/ 从/ 2000/ 年/ 开始/ 至今/ 共享/ 缓存/ 分区/ 所/ 采用/ 的/ 不同/ 实现/ 机制/ ./ 其中/ 路/ 分区/ [/ 6/ ,/ 10/ ,/ 12/ ]/ 最/ 简单/ ,/ 但/ 存在/ 分区/ 粒度/ 较大/ ,/ 分区/ 数目/ 受限于/ 可用/ 路数/ ,/ 可扩展性/ 较差/ 等/ 问题/ ./ 为了/ 避免/ 关联度/ 的/ 降低/ ,/ 可以/ 采用/ 组分/ 区/ [/ 10/ -/ 11/ ]/ 的/ 方式/ ,/ 然而/ 这种/ 方法/ 需要/ 可/ 配置/ 的/ 译码器/ 或者/ 需要/ 对/ 缓存/ 阵列/ 做/ 较大/ 的/ 修改/ ./ 通过/ 操作系统/ 的/ 页/ 着色/ [/ 13/ ]/ 来/ 限制/ 一个/ 进程/ 的/ 物理/ 地址映射/ 到/ 固定/ 的/ 缓存/ 组中/ ,/ 无需/ 硬件/ 修改/ ,/ 但是/ 同样/ 存在/ 分区/ 粒度/ 较大/ 的/ 问题/ ,/ 并且/ 软件/ 的/ 方法/ 在/ 页面/ 重/ 着色/ 过程/ 中/ 需要/ 进行/ 内存/ 拷贝/ ,/ 开销/ 较大/ ,/ 因此/ 要求/ 重/ 着色/ 分区/ 操作/ 不能/ 太/ 频繁/ ./ Xie/ 等/ 人/ [/ 14/ ]/ 提出/ 的/ PIPP/ 伪/ 分区/ 机制/ ,/ 是/ 一种/ 基于/ 修改/ 缓存/ 替换/ 策略/ 的/ 分区/ 机制/ ,/ 这种/ 机制/ 避免/ 限制/ 内存/ 物理地址/ 在/ 缓存/ 中/ 的/ 位置/ ,/ 通过/ 分别/ 赋予/ 每个/ 分区/ 在/ LRU/ 替换/ 链中/ 不同/ 的/ 插入/ 位置/ 来/ 实现/ 分区/ ,/ 并/ 在/ 发生/ Cache/ 命中/ 访问/ 时/ 缓慢/ 地/ 提升/ 该/ 缓存/ 行/ 的/ 位置/ ,/ 而/ 不/ 像/ 原/ LRU/ 直接/ 将/ 其/ 插入/ 到/ LRU/ 链头/ ./ PIPP/ 是/ 一种/ 结合/ UCP/ [/ 3/ ]/ 方案/ 的/ 分区/ 机制/ ,/ 然而/ 同样/ 存在/ 扩展性/ 的/ 问题/ ./ 随着/ 处理器/ 核数/ 的/ 快速增长/ ,/ 共享/ 缓存/ 分区/ 需要/ 向/ 更/ 细粒度/ 划分/ 的/ 方向/ 发展/ ./ 发表/ 年份/ 研究者/ 2000Chiou/ 等/ 人/ [/ 12/ ]/ 路/ 分区/ 低/ 2000Ranganathan/ 等/ 人/ [/ 10/ ]/ 组分/ 区/ // 路/ 分区/ 高/ 2002Suh/ 等/ 人/ [/ 6/ ]/ 2004Iyer/ 等/ 人/ [/ 15/ ]/ 基于/ 替换/ 策略/ 低/ 2006Varadarajan/ 等/ 人/ [/ 11/ ]/ 组分/ 区高/ 2008Lin/ 等/ 人/ [/ 13/ ]/ 2009Xie/ 等/ 人/ [/ 14/ ]/ 基于/ 替换/ 策略/ 低/ 2011Sanchez/ 等/ 人/ [/ 16/ ]/ 细粒度/ 低/ 2013Cook/ 等/ 人/ [/ 17/ ]/ 2.2/ 多核/ 处理器/ 缓存/ 分区/ 多核/ 环境/ 下/ 共享/ 缓存/ 会/ 同时/ 接收/ 来自/ 于/ 多个/ 线程/ 的/ 访存/ 请求/ ,/ 而/ 单个/ 线程/ 的/ 访存/ 行为/ 特征/ 在/ 时间/ 局部性/ 和/ 空间/ 局部性/ 上/ 具有/ 很大/ 不同/ ,/ 随着/ 并行执行/ 的/ 线程/ 数量/ 的/ 增长/ ,/ 程序/ 行为/ 特征/ 更加/ 复杂/ 多样/ ,/ 这/ 加重/ 了/ 线程/ 间/ 的/ 相互/ 干扰/ ,/ 降低/ 了/ 共享/ 缓存/ 的/ 使用/ 效率/ ./ 因此/ 多核/ 环境/ 下/ 的/ 缓存/ 分区/ 必须/ 要/ 考虑/ 如/ Page5/ 何/ 控制线/ 程/ 自身/ 对/ 缓存/ 的/ 需求/ ,/ 以及/ 对/ 其他/ 线程/ 的/ 干扰/ 程度/ ./ 最大/ 公平性/ (/ Fairness/ )/ 和/ 最大化/ 吞吐/ 率/ (/ Throughput/ )/ 是/ 目前/ 多核/ 环境/ 下所要/ 达到/ 的/ 两大/ 目标/ ./ 另外/ 由于/ 线程/ 数量/ 的/ 增长/ 所/ 导致/ 分区/ 粒度/ 的/ 扩展性/ 问题/ 也/ 已/ 成为/ 新/ 的/ 研究/ 方向/ ./ 2.2/ ./ 1/ 公平性/ 分区/ Kim/ 等/ 人/ [/ 4/ ]/ 研究/ 了/ 以/ 公平性/ 为/ 目标/ 的/ 缓存/ 分区/ 机制/ ,/ 他们/ 认为/ 操作系统/ 的/ 线程/ 调度/ 依赖于/ 硬件/ 提供/ 公平/ 的/ 缓存/ 共享/ 的/ 能力/ ,/ 并/ 提出/ 了/ 5/ 种/ 公平性/ 的/ 衡量标准/ ./ Kim/ 等/ 人/ 首先/ 对系统/ 的/ 公平性/ 给出/ 了/ 一个/ 理想化/ 的/ 定义/ :/ 如果/ 分区/ 满足/ Tshr1Tded1/ =/ Tshr2Tded2/ =/ …/ =/ TshrnTdedn/ 为/ 系统/ 是/ 绝对/ 公平/ 的/ ,/ 其中/ Tshri/ 表示/ 多个/ 线程/ 并行/ 运行/ 时/ 线程/ i/ 的/ 运行/ 时间/ ;/ Tdedi/ 表示/ 线程/ i/ 独占/ 处理器/ 资源/ 时/ 的/ 运行/ 时间/ ./ 在/ 实际/ 系统/ 中/ ,/ Tshri/ 信息/ 易于/ 获取/ ,/ 但是/ Tdedi/ 信息/ 很难/ 取得/ ./ 因此/ Kim/ 等/ 人/ 提出/ 另外/ 5/ 种/ 可用/ 指标/ 来/ 衡量/ 系统/ 公平性/ ./ 所用/ 到/ 的/ 信息/ 包括/ 各/ 线程/ 独占/ 缓存/ 时/ 产生/ 的/ 失效/ 数/ Miss/ _/ dedi/ 和/ 缓存/ 失效率/ Missr/ _/ dedi/ ,/ 以及/ 多个/ 线程/ 并行/ 时/ 的/ 缓存/ 失效/ 数/ Miss/ _/ shri/ 和/ 缓存/ 失效率/ Missr/ _/ shri/ ./ 通过/ 对/ 其/ 不同/ 的/ 计算/ ,/ 可以/ 产生/ 不同/ 的/ 衡量标准/ ,/ 包括/ 平衡/ 各/ 线程/ 缓存/ 失效/ 数/ 增加/ 的/ 比例/ ;/ 平衡/ 各/ 线程/ 的/ 缓存/ 失效/ 数/ ;/ 平衡/ 缓存/ 失效率/ 增加/ 的/ 比例/ ;/ 平衡/ 各/ 线程/ 并行/ 运行/ 增加/ 的/ 缓存/ 失效率/ ./ 通过/ 带有/ 这些/ 衡量标准/ 的/ 实验/ 表明/ 以/ 改善/ 系统/ 公平性/ 为/ 目标/ 的/ 缓存/ 分区/ 机制/ 通常/ 可以/ 同时/ 提高/ 系统/ 吞吐/ 率/ ,/ 但是/ 以/ 最大化/ 吞吐/ 率为/ 目标/ 的/ 缓存/ 分区/ 则/ 无法/ 保障/ 公平性/ ./ 分区/ 如果/ 没有/ 公平性/ 考虑/ ,/ 则/ 会/ 出现/ 诸如/ 线程/ 饥饿/ 、/ 优先级/ 倒置/ 以及/ 某些/ 线程/ 非常/ 依赖于/ 其他/ 线程/ 的/ 运行/ 等/ 问题/ ./ 2.2/ ./ 2/ 最大化/ 吞吐/ 率/ Qureshi/ 等/ 人/ 在/ 文献/ [/ 3/ ]/ 中/ 提出/ 了/ 一种/ 基于/ 收益率/ 的/ 缓存/ 分区/ UCP/ (/ Utility/ -/ basedCachePartition/ )/ 机制/ ./ UCP/ 的/ 优化/ 目标/ 是/ 最大化/ 系统/ 吞吐/ 率/ ./ 与/ Suh/ 对/ 边际/ 效益/ 的/ 定义/ 相同/ ,/ UCP/ 中/ 把/ 随着/ 缓存/ 空间/ 增加/ 而/ 减少/ 的/ 缓存/ 失效/ 数/ 称之为/ 收益/ (/ Utility/ )/ ./ 针对/ 以前/ 监控器/ 存在/ 的/ 缺点/ ,/ UCP/ 提出/ 一种/ 新/ 的/ 收益/ 监控器/ UMON/ (/ UtilityMonitor/ )/ 对/ 其/ 进行/ 改进/ ,/ 每个/ UMON/ 增加/ 一组/ 辅助/ 标签/ 目录/ ATD/ (/ AuxiliaryTagDirectory/ )/ ./ ATD/ 除了/ 不/ 包含/ 具体/ 的/ 数据项/ 外/ ,/ 与/ 共享/ 缓存/ 保持/ 相同/ 的/ 结构/ ,/ 如图/ 3/ 所示/ ./ 各/ 线程/ 间/ 的/ ATD/ 保持/ 相互/ 独立/ ,/ 从而/ 避免/ 了/ 并行/ 运行/ 线程/ 对/ 所/ 获取/ 的/ 缓存/ 收益/ 信息/ 的/ 影响/ ,/ 能够/ 更为/ 准确/ 地/ 反映/ 一个/ 线程/ 独立/ 的/ 访存/ 行为/ 特征/ ./ 在/ UCP/ 中/ 根据/ 不同/ 程序/ 从/ 额外/ 的/ 缓存/ 空间/ 获取/ 的/ 收益/ 情况/ 不同/ ,/ Qureshi/ 等/ 人/ [/ 3/ ]/ 将/ 程序/ 划分/ 为/ 3/ 类/ :/ 当分/ 得/ 的/ 缓存/ 空间/ 增多/ 时/ ,/ 其/ 收益/ 不会/ 发生/ 显著/ 变化/ 的/ 称为/ 低收益/ 类/ (/ LowUtility/ )/ ;/ 随着/ 所/ 分配/ 的/ 缓存/ 空间/ 增加/ 其/ 收益/ 持续上升/ 的/ 程序/ 称为/ 高/ 收益/ 类/ (/ HighUtility/ )/ ;/ 当/ 分配/ 的/ 缓存/ 空间/ 增加/ 到/ 某个/ 临界点/ 后/ 其/ 收益/ 不再/ 继续/ 提升/ 的/ 称为/ 饱和/ 收益/ 类/ (/ SaturatingUtility/ )/ ./ 低收益/ 类/ 程序/ 在/ 并行/ 运行/ 时/ ,/ 彼此间/ 对于/ 自身/ 可用/ 的/ 缓存/ 空间/ 不/ 敏感/ ,/ 因而/ 缓存/ 分区/ 并非/ 必需/ ;/ 当/ 饱和/ 收益/ 类/ 程序/ 共同/ 运行/ 时/ ,/ 只要/ 知道/ 各/ 程序/ 的/ 缓存/ 需求/ ,/ 即可/ 分别/ 为/ 其/ 分配/ 合理/ 的/ 缓存/ 空间/ ;/ 当/ 饱和/ 收益/ 类/ 程序/ 与/ 低收益/ 类/ 程序/ 共同/ 运行/ 时/ ,/ 优先/ 满足/ 饱和/ 收益/ 类/ 的/ 缓存/ 需求/ ;/ 而/ 高/ 收益/ 类/ 的/ 程序/ 在/ 与/ 其他/ 类/ 程序/ 共同/ 运行/ 时/ ,/ 由于/ 高/ 收益/ 类/ 程序/ 总是/ 对于/ 可用/ 缓存/ 空间/ 大小/ 很/ 敏感/ ,/ 因此/ 需要/ 特别/ 对待/ ./ 所/ 做/ 分区/ 方式/ 的/ 可能/ 数目/ 随/ 并行程序/ 数量/ 的/ 增加/ 呈/ 指数/ 增长/ ,/ 因此/ 通过/ 验证/ 每种/ 可能/ 的/ 分区/ 来/ 选择/ 一个/ 最好/ 的/ 分区/ 策略/ 变得/ 不切实际/ ./ Qureshi/ 等/ 人/ [/ 3/ ]/ 提出/ 前瞻/ 算法/ 作为/ 一种/ 可/ 扩展/ 的/ 替代/ 算法/ ./ 通过/ 对/ 程序/ 的/ 访存/ 特征/ 进行/ 研究/ 并/ 分类/ ,/ 解释/ 不同/ 的/ 程序/ 从/ 缓存/ 分区/ 的/ 获益/ 状况/ ,/ 可以/ 帮助/ 制定/ 有效/ 的/ 缓存/ 分区/ 策略/ ./ 然而/ UCP/ 中所/ 提出/ 的/ 分类/ 方式/ 更/ 多/ 的/ 是/ 对于/ 一个/ 线程/ 收益/ 曲线/ 的/ 直观/ 判断/ ,/ 并/ 没有/ 提出/ 一个/ 形式化/ 的/ 算法/ 来/ 对/ 程序/ 进行/ 准确/ 归类/ ,/ 因而/ 很难/ 在/ 硬件/ 上/ 实现/ ./ 另外/ ,/ UCP/ 通过/ 在/ 每个/ 核/ 的/ UMON/ 中/ 增加/ ATD/ ,/ 以/ 获取/ 更为/ 准确/ 的/ 访存/ 信息/ ,/ 但是/ 这/ 也/ 带来/ 了/ 较大/ 的/ 硬件/ 开销/ ./ 除了/ 硬件/ 方法/ 辅助/ 分区/ 外/ ,/ 软件/ 的/ 方法/ 也/ 可以/ 达到/ 共享/ 缓存/ 分区/ 的/ 效果/ ./ Lin/ 等/ 人/ [/ 13/ ]/ 提出/ 一种/ 采用/ 页/ 着色/ 技术/ 来/ 提高/ 吞吐/ 率/ 的/ 分区/ 方式/ ./ 这是/ 一种/ 纯/ 软件/ 的/ 缓存/ 划分/ 方法/ ,/ 它/ 通过/ 操作系统/ 的/ 虚实/ 地址映射/ 来/ 实现/ Cache/ 划分/ ./ 目前/ 大部分/ 计算机系统/ 的/ 最后/ 一级/ Cache/ 是/ 物理地址/ 索引/ 的/ ,/ 所以/ 如果/ 操作系统/ 分页/ 能/ 使/ 这些/ 程序/ 仅/ 访问/ Cache/ 的/ 某/ 一部/ Page6/ 分/ ,/ 即可/ 实现/ 分区/ 的/ 效果/ ./ 如图/ 4/ 所示/ ,/ 物理地址/ 中/ 物理/ 页/ 索引/ 的/ 部分/ 与/ L2/ 缓存/ 组/ 索引/ 重合/ 的/ 部分/ 是/ 操作系统/ 分页/ 算法/ 可以/ 控制/ 的/ ,/ 示例/ 中/ 显示/ 重合/ 的/ 部分/ 有/ 4/ 位/ ./ 这/ 4/ 位/ 代表/ 16/ 种/ 不同/ 取值/ ,/ 即/ 可以/ 把/ Cache/ 划分/ 成/ 16/ 个/ 不同/ 的/ 区域/ ,/ 通常/ 被称作/ 把/ Cache/ 划分/ 成/ 16/ 种/ 不同/ 的/ 颜色/ ./ 操作系统/ 的/ 页面/ 存储/ 分配/ 算法/ 可以/ 限制/ 程序/ 所/ 使用/ 的/ 物理/ 页面/ 地址/ 的/ 4/ 位取/ 一种/ 或者/ 多种/ 颜色/ ,/ 通过/ 为/ 不同/ 程序/ 选择/ 不同/ 的/ 颜色/ ,/ 就/ 能/ 保证/ 这些/ 程序/ 映射/ 到/ Cache/ 的/ 不同/ 部分/ ./ 软件/ 页/ 着色/ 的/ 方法/ 受限于/ 颜色/ 数/ 固定/ 的/ 地址映射/ 方式/ ,/ 另外/ 存在/ 分区/ 粒度/ 较大/ 和/ 分区/ 不/ 能够/ 太/ 频繁/ 的/ 限制/ ./ 2.2/ ./ 3/ 细粒度/ 分区/ 目前/ 有关/ 共享/ 缓存/ 分区/ 的/ 趋势/ 在/ 朝向/ 更/ 细粒度/ 的/ 方向/ 发展/ ,/ 这/ 也/ 是/ 多/ 核/ 时代/ 的/ 必然/ 要求/ ./ Sanchez/ 等/ 人/ 在/ 文献/ [/ 16/ ]/ 中/ 针对/ 之前/ 的/ UCP/ 策略/ 分区/ 粒度/ 大/ 、/ 可扩展性/ 差/ 、/ 效率/ 低等/ 问题/ ,/ 提出/ 一种/ 新/ 的/ 缓存/ 分区/ 策略/ Vantage/ ./ Vantage/ 以/ 缓存/ 行为/ 单位/ 进行/ 缓存/ 分区/ ,/ 解决/ 了/ 分区/ 粒度/ 大/ 的/ 问题/ ./ Vantage/ 以较/ 小/ 的/ 代价/ 把/ 共享/ 缓存/ 分为/ 数十个/ 分区/ ,/ 解决/ 了/ 随着/ 线程/ 数/ 增多/ 缓存/ 分区/ 可扩展性/ 差/ 的/ 问题/ ;/ 同时/ 在/ Vantage/ 中/ ,/ 不会/ 破坏/ 缓存/ 的/ 关联度/ ,/ 避免/ 由于/ 缓存/ 关联度/ 降低/ 导致/ 的/ 缓存/ 失效率/ 上升/ ;/ 并且/ 线程/ 间/ 仍然/ 执行/ 严格/ 分区/ ,/ 避免/ 了/ 线程/ 间/ 的/ 相互/ 干扰/ ./ 与/ 之前/ 的/ 缓存/ 分区/ 方案/ 的/ 另外/ 一个/ 不同点/ 在于/ ,/ Vantage/ 中/ 并/ 不会/ 把/ 全部/ 共享/ 缓存/ 空间/ 都/ 分配/ 给/ 线程/ 使用/ ,/ 而是/ 保留/ 一小部分/ (/ 例如/ 10/ %/ 的/ 缓存/ 空间/ )/ ./ 当/ 线程/ 对于/ 缓存/ 的/ 实际/ 需求/ 超出/ 缓存/ 分区/ 策略/ 分配/ 给/ 该/ 线程/ 的/ 缓存/ 空间/ 时/ ,/ 可以/ 共用/ 保留/ 的/ 这部分/ 共享/ 缓存/ ,/ 而/ 不是/ 占用/ 其他/ 线程/ 的/ 缓存/ 空间/ ./ 另外/ ,/ 随着/ 处理器/ 核数/ 的/ 迅速/ 增长/ ,/ 在/ 大规模/ 的/ 处理器/ 核上/ 进行/ 末级/ 缓存/ 划分/ 越来越/ 具有/ 挑战性/ ./ Song/ 等/ 人/ [/ 18/ ]/ 针对/ 众核/ 处理器/ [/ 19/ ]/ 结构/ ,/ 提出/ 了/ 一种/ 隐式/ 动态/ 的/ 共享/ Cache/ 空间/ 的/ 划分/ 机制/ ,/ 用于/ 隔离/ 不同/ 线程/ 在/ 共享/ Cache/ 中/ 的/ 数据/ ,/ 减少/ 多个/ 线程/ 访问/ 缓存/ 的/ 冲突/ 问题/ ./ 3/ 内存/ 控制器/ 优化/ DRAM/ 内存/ 系统/ 主要/ 由/ 内存/ 控制器/ 和/ 内存/ 芯片/ 组成/ ./ 内存/ 控制器/ 通过/ 一个/ 片选/ 信号/ 控制/ 一个/ 内存/ Rank/ ,/ 每个/ Rank/ 由/ 多个/ DRAM/ 颗粒/ 组成/ ./ 为了/ 提高/ 访存/ 的/ 并发/ 度/ ,/ DRAM/ 颗粒/ 由/ 多个/ Bank/ 体/ 并联/ 而成/ ,/ 如/ 主流/ 的/ DDR3/ 颗粒/ 包含/ 8/ 个/ Bank/ 体/ ./ Bank/ 体/ 主要/ 由/ 存储阵列/ 和行/ 缓存/ (/ RowBuffer/ )/ 组成/ ,/ 行/ 缓存/ 用于/ 存放/ 正在/ 被/ 读写访问/ 的/ 内存/ 行/ ./ 如图/ 5/ 所示/ ./ 由于/ DRAM/ 访存/ 协议/ 的/ 复杂性/ 、/ 大量/ 的/ 时序/ 参数/ 、/ 多变/ 的/ 芯片/ 组织/ 形式/ 以及/ 所/ 面对/ 的/ 不同/ 应用程序/ 特征/ ,/ 在/ 一个/ 给定/ 设计/ 目标/ 的/ 限制/ 下/ ,/ 如何/ 挖掘/ 内存/ 控制器/ 的/ 设计/ 空间/ ,/ 甚至/ 可以/ 与/ 指令集/ 的/ 微结构/ 设计/ 相提并论/ [/ 20/ ]/ ./ 设计/ 目标/ 可能/ 是/ 最小化/ 面积/ 开销/ 、/ 最/ 低功耗/ 要求/ 、/ 最大化/ 系统/ 性能/ 、/ 最大化/ 系统/ 公平性/ ,/ 或者/ 在/ 这/ 几种/ 相互/ 冲突/ 的/ 设计/ 目标/ 中/ 取得/ 权衡/ (/ Tradeoff/ )/ ./ 其中/ 访存/ 请求/ 调度/ 算法/ 和/ 地址映射/ 机制/ ,/ 对于/ 内存/ 控制器/ 的/ 设计/ 和/ 实现/ 来说/ 至关重要/ ,/ 因此/ 本文/ 将/ 集中/ 在/ 这/ 两个/ 方面/ 进行/ 研究/ 阐述/ ./ 我们/ 以表/ 2/ 给/ 出自/ 2006/ 年/ 以来/ 关于/ 内存/ 控制器/ 优化/ 的/ 相关/ 工作/ ,/ 并/ 根据/ 调度/ 算法/ 在/ 不同/ 的/ 系统/ 层次/ 上将/ 其/ 分成/ 三大类/ :/ 后/ 端/ 调度/ 、/ 前端/ 调度/ 以及/ 进程/ 调度/ ;/ 对于/ 地址映射/ 机制/ ,/ 根据/ 不同/ 程序/ 的/ 行为/ 特征/ ,/ 程序/ 数据/ 在/ 物理地址/ 中/ 的/ 位置/ 是否/ 可变/ ,/ 可/ 将/ 其/ 归结为/ 静态/ 和/ 动态/ 的/ 方法/ ./ 本文/ 将/ 在/ 后面/ 各/ 小节/ 中/ 分别/ 作/ 进一步/ 阐述/ ./ 另外/ ,/ 随着/ 内存/ 芯片/ 的/ 容量/ 、/ 工作频率/ 和/ 带宽/ 的/ 进一步/ 增加/ ,/ 在/ 某些/ 大型/ 系统/ 中/ DRAM/ 内存/ 消耗/ 的/ 功耗/ ,/ 甚至/ 超过/ 处理器/ 核/ 本身/ 的/ 功耗/ ./ 内/ Page7/ 存/ 控制器/ 的/ 另/ 一个/ 优化/ 目标/ 是/ 降低/ DRAM/ 功耗/ ./ 最近/ 几年/ 关于/ DRAM/ 存储系统/ 的/ 低功耗/ 研究/ 主要/ 体现/ 在/ 两个/ 方面/ :/ (/ 1/ )/ 采用/ 片/ 上访/ 存/ 调度/ 或者/ 存储管理/ 的/ 办法/ ,/ 借助/ DRAM/ 存储系统/ 的/ 低功耗/ 模式/ [/ 21/ ]/ ,/ 或者/ 通过/ 调度/ 的/ 方式/ 进行/ 动态/ 电压/ 和/ 频率/ 调整/ 节能/ [/ 22/ -/ 23/ ]/ ;/ (/ 2/ )/ 通过/ 改变/ DIMM/ 结构/ 来/ 达到/ 降低功耗/ 的/ 目的/ [/ 24/ ]/ ./ 发表/ 年份/ 研究者/ 2006Nesbit/ 等/ 人/ [/ 25/ ]/ 2007Mutlu/ 等/ 人/ [/ 26/ ]/ 公平性/ STFM/ 算法/ 2008Ipek/ 等/ 人/ [/ 27/ ]/ 2008Mutlu/ 等/ 人/ [/ 28/ ]/ 公平性/ 和/ 性能/ PAR/ -/ BS2010Kim/ 等/ 人/ [/ 29/ ]/ 2010Kim/ 等/ 人/ [/ 30/ ]/ 公平性/ 和/ 性能/ TCM/ 算法/ 2010Ebrahimi/ 等/ 人/ [/ 31/ ]/ 公平性/ FST/ 算法/ 2011Ebrahimi/ 等/ 人/ [/ 32/ ]/ 多线程/ 性能/ 并行/ 调度/ 2011Muralidhara/ 等/ 人/ [/ 33/ ]/ 性能/ 通道/ 分区/ 2011Kaseridis/ 等/ 人/ [/ 34/ ]/ 性能/ 映射/ 和/ 调度/ 2012Ausavarungnirun/ [/ 35/ ]/ 异构/ 系统/ 性能/ SMS/ 调度/ 2012Jeong/ 等/ 人/ [/ 36/ ]/ 2013Ghose/ 等/ 人/ [/ 37/ ]/ 图/ 6/ 访存/ 请求/ 调度/ 器/ 结构图/ 3.1/ ./ 1/ 后端/ 调度/ 算法/ 早期/ 的/ 访存/ 调度/ 算法/ 大多/ 面向/ 单核/ 处理器/ ,/ 主要/ 优化/ 目标/ 是/ 减少/ 访存/ 延迟/ ,/ 提高/ 带宽/ 的/ 利用效率/ ,/ 通常/ 所/ 采用/ 的/ 方法/ 是/ 挖掘/ 访存/ 请求/ 的/ Bank/ 级/ 并行度/ 和/ RowBuffer/ 局部性/ ./ 它/ 需要/ 在/ 一定/ 时间/ 周期/ 内/ 寻找/ 局部/ 最优/ 的/ 访存/ 序列/ ./ 由于/ 这/ 一时期/ 的/ 访存/ 调度/ 策略/ 主要/ 面向/ DRAM/ 的/ 3D/ 结构/ 特点/ 进行/ 优化/ ,/ 我们/ 将/ 此类/ 研究/ 工作/ 称之为/ 后端/ 访存/ 调度/ 算法/ 研究/ ./ 对于/ 处在/ 内存/ 控制器/ 访存/ 队列/ 中/ 的/ 访存/ 请求/ ,/ 访存/ 调度/ 器会/ 根据/ DRAM/ 访问/ 协议/ (/ 如/ DDR3/ 协议/ )/ 以及/ 资源/ 限制/ 情况/ 选择/ 一部分/ 访存/ 请求/ 进行/ 响应/ ./ 最/ 简单/ 的/ 调度/ 顺序/ 是/ 先来/ 先/ 服务/ FCFS/ (/ FirstComeFirstServe/ )/ ,/ 访存/ 请求/ 严格/ 按照/ 到达/ 时间/ 的/ 3.1/ 访存/ 请求/ 调度/ 算法/ 访存/ 请求/ 调度/ 单元/ 是/ 内存/ 控制器/ 的/ 核心部件/ ,/ 也/ 是/ 提高/ 多核/ 处理器/ 内存/ 系统/ 性能/ 的/ 关键/ 模块/ ./ 长期以来/ 受/ 内存/ 芯片/ 结构特征/ 和/ 应用程序/ 访存/ 特征/ 的/ 限制/ ,/ 内存/ 系统/ 一直/ 面临/ 着/ 理论/ 峰值/ 带宽/ 高/ ,/ 而/ 实际/ 有效/ 带宽/ 利用率/ 低/ 的/ 问题/ ./ 访存/ 请求/ 调度/ 是/ 在/ 不同/ 的/ 目标/ 指导/ 下/ ,/ 对/ 访存/ 请求/ 进行/ 重新/ 排序/ 的/ 过程/ ./ 调度/ 对象/ 是/ 内存/ 控制器/ 队列/ 中/ 的/ 所有/ 请求/ ./ 当/ 来自/ 多核/ 的/ 访存/ 请求/ 进入/ 内存/ 控制器/ 后/ ,/ 请求/ 将/ 被/ 缓存/ 在/ 单个/ 或者/ 多个/ 队列/ 中/ ,/ 并/ 被/ 转换成/ 一系列/ 状态/ 和/ 数据/ ./ 请求/ 队列/ 可能/ 有/ 多种/ 组织/ 方式/ ,/ 一种/ 方式/ 是/ 每个/ Bank/ 分配/ 一个/ 独立/ 的/ 队列/ ,/ 如图/ 6/ 所示/ ./ 另/ 一种/ 方式/ 是/ 对/ 所有/ Rank/ 和/ Bank/ 只/ 维护/ 一个/ 全局/ 的/ 请求/ 队列/ ,/ 在/ 这种/ 队列/ 结构/ 的/ 组织/ 下/ ,/ 需要/ 采用/ 较/ 复杂/ 的/ 硬件/ 逻辑/ 来/ 执行/ 请求/ 的/ 重新/ 排序/ ./ DRAM/ 内存/ 控制器/ 可以/ 依据/ 许多/ 因素/ 对/ 队列/ 中/ 的/ 访存/ 请求/ 进行/ 调度/ ,/ 包括/ 请求/ 的/ 优先级/ 、/ 给定/ 请求/ 的/ 可/ 获得/ 的/ 资源/ 数/ 、/ 请求/ 的/ Bank/ 地址/ 、/ 请求/ 的/ 到达/ 时间/ 或者/ 访问/ 历史/ 等/ 信息/ ./ 先后顺序/ 被/ 调度/ 执行/ ,/ 并且/ 多个/ 访存/ 操作/ 之间/ 不能/ 流水/ ,/ 后/ 一个/ 访存/ 请求/ 必须/ 等/ 前/ 一个/ 访存/ 请求/ 的/ 所有/ 操作/ 结束/ 之后/ 才能/ 开始/ ,/ 因此/ 这种/ 策略/ 会/ 使/ DRAM/ 的/ Bank/ 级/ 并行性/ 得不到/ 利用/ ./ Rixner/ 等/ 人/ [/ 38/ ]/ 提出/ 了/ 行/ 缓存/ 命中/ 优先/ 的/ 调度/ 策略/ FR/ -/ FCFS/ (/ FirstReady/ -/ FirstComeFirstServe/ )/ ,/ 如图/ 7/ 所示/ ./ 这种/ 调度/ 策略/ 可/ 在/ 满足/ 资源/ 和/ 时序/ 的/ 限制/ 下/ ,/ 同时/ 发掘/ Bank/ 级/ 并行性/ 和/ RowBuffer/ 局部性/ ./ 访存/ 请求/ 可以/ 被/ 乱序/ 调度/ ,/ 且/ 发送到/ 不同/ Bank/ 的/ 访存/ 请求/ 可以/ 流水/ 执行/ ,/ 另外/ 当访存/ 请求/ 所/ 需/ 访问/ 的/ 数据/ 就/ 在/ 当前/ 行/ 缓存/ 时/ ,/ 这些/ 访存/ 请求/ 将/ 被/ 赋予/ 更/ 高/ 的/ 优先级/ 并/ 被/ 优先/ 调度/ 执行/ ,/ 以/ 提高/ 行/ 缓存/ 命中率/ 来/ 降低/ 访存/ 的/ 延迟/ ./ 但/ 这种/ 调度/ 没有/ 考虑/ 应用/ 的/ 需求/ ,/ 是/ 一种/ 局部/ 的/ 调度/ 优化/ 策略/ ./ Page8/ 图/ 7/ 是否/ 有重/ 排序/ 请求/ 的/ 两种/ 服务/ 完成/ 时间/ Hur/ 等/ 人/ [/ 39/ ]/ 认为/ DRAM/ 调度/ 算法/ 不应/ 仅/ 采用/ 贪婪/ 式/ 的/ 局部/ 调度/ ,/ 还/ 应该/ 依赖于/ 应用/ 的/ 需求/ ,/ 并/ 根据/ 某些/ 特定/ 反馈/ 信息/ 来/ 选择/ 合适/ 的/ 调度/ 算法/ ./ 他们/ 提出/ 一种/ 根据/ 访存/ 请求/ 的/ 历史/ 信息/ 进行/ 决策/ 的/ 自/ 适应/ 访存/ 调度/ 算法/ ,/ 调度/ 器/ 不再/ 维护/ 一个/ 统一/ 的/ 访存/ 请求/ 队列/ ,/ 而是/ 将/ 读写/ 请求/ 分开/ 并/ 分别/ 为/ 其/ 维护/ 一个/ 独立/ 的/ 访存/ 队列/ ./ 仲裁/ 器/ 根据/ 访存/ 的/ 历史/ 信息/ 以及/ 两个/ 队列/ 中/ 读写/ 请求/ 的/ 比例/ 来/ 决定/ 下/ 一个/ 被/ 调度/ 的/ 访存/ 请求/ 是/ 读/ 还是/ 写/ ./ 这种/ 考虑/ 读写/ 平衡/ 的/ 调度/ 算法/ 为/ 访存/ 请求/ 调度/ 器/ 提供/ 了/ 一种/ 新/ 的/ 设计/ 参考/ ,/ 该/ 方法/ 需要/ 与/ FR/ -/ FCFS/ 调度/ 方法/ 结合/ 起来/ 才能/ 获得/ 比较/ 好/ 的/ 结果/ ./ Lee/ 等/ 人/ [/ 40/ ]/ 提出/ 了/ 预取/ (/ Pretech/ )/ 感知/ 的/ 访存/ 调度/ 算法/ ,/ 他们/ 认为/ 如果/ 一个/ 时间段/ 内/ 无用/ 的/ 预取/ 太多/ ,/ 那么/ 由/ 预取/ 触发/ 的/ 访存/ 请求/ 应该/ 比/ 正常/ 访存/ 请求/ 的/ 优先级/ 低/ ,/ 这样/ 使/ 有效/ 的/ 访存/ 请求/ 能/ 更/ 快/ 被/ 响应/ ./ 而/ 在/ 预取/ 效果/ 好时/ ,/ 预取/ 请求/ 应该/ 与/ 普通/ 读写/ 访存/ 请求/ 具有/ 相同/ 的/ 调度/ 优先级/ ,/ 这样/ 能/ 达到/ 隐藏/ 延迟/ 的/ 效果/ ./ 该/ 算法/ 需要/ 在/ 处理器/ 内/ 增加/ 一些/ 结构/ 来/ 记录/ 预取/ 的/ 有效性/ ./ 另外/ 如果/ 一个/ 预取/ 请求/ 长时间/ 没有/ 被/ 响应/ ,/ 而且/ 又/ 被/ 后来/ 的/ 正常/ 读写/ 请求/ 所/ 替代/ ,/ 那么/ 这个/ 预取/ 请求/ 将/ 是/ 无用/ 的/ ,/ 需要/ 把/ 这个/ 预取/ 请求/ 从/ 访存/ 队列/ 中/ 删除/ ./ 内存/ 控制器/ 中/ 的/ 这些/ 调度/ 算法/ 可以/ 显著/ 地/ 改善/ DRAM/ 的/ 行/ 缓存/ 局部性/ ,/ 提高/ Bank/ 的/ 并行度/ ,/ 从而/ 降低/ 处理器/ 的/ 阻塞/ 时间/ ,/ 并/ 增强/ 预取/ 的/ 效率/ ./ 但/ 这/ 一时期/ 针对/ 的/ 主要/ 是/ 单核/ 处理器/ ,/ 所/ 采用/ 的/ 优化/ 决策/ 都/ 是/ 基于/ 当前/ 看到/ 的/ 或/ 历史/ 的/ 访存/ 序列/ ,/ 当/ 处理器/ 发展/ 到/ 多/ 核/ 时代/ ,/ 片上/ 集成/ 的/ 功能/ 部件/ 越来越/ 多时/ ,/ 访存/ 调度/ 研究/ 开始/ 更/ 多/ 的/ 关注/ 多个/ 访存源/ 之间/ 的/ 调度/ ./ 3.1/ ./ 2/ 前端/ 调度/ 算法/ 多核/ 环境/ 下/ DRAM/ 会/ 同时/ 接收/ 来自/ 于/ 多个/ 线程/ 或者/ 多个/ 进程/ 的/ 访存/ 请求/ ,/ 这些/ 访存/ 请求/ 会/ 进入/ 内存/ 控制器/ 竞争/ 内存/ 资源/ ,/ 一个/ 线程/ 的/ 访存/ 请求/ 不仅/ 可以/ 推迟/ 其他/ 线程/ 访存/ 请求/ 的/ 响应/ 时间/ ,/ 也/ 会/ 破坏/ 其他/ 线程/ 访存/ 请求/ 的/ 行/ 缓存/ 局部性/ ./ 因此/ DRAM/ 的/ 内存/ 控制器/ 调度/ 必须/ 考虑/ 如何/ 控制/ 多核/ 环境/ 下访存/ 请求/ 的/ 响应/ 顺序/ ./ 最大化/ 吞吐/ 率/ (/ Throughput/ )/ 和/ 最大/ 公平性/ (/ Fairness/ )/ ,/ 是/ 目前/ 前端/ 调度/ 算法/ 所/ 要/ 达到/ 的/ 两大/ 主要/ 目标/ ./ 吞吐/ 率指/ 的/ 是/ 单位/ 时间/ 内/ 完成/ 的/ 访存/ 请求/ 数目/ ./ 公平性/ 指/ 的/ 是/ 线程/ 共享/ 运行/ 相比/ 于/ 线程/ 单独/ 运行/ 所/ 造成/ 的/ 减速比/ (/ Slowdown/ )/ 差异/ 问题/ ,/ 公平性/ 问题/ 也/ 是/ 服务质量/ (/ QualityofService/ )/ 问题/ ./ Zhu/ 等/ 人/ [/ 41/ ]/ 认为/ 在/ 同时/ 多线程/ 处理器/ SMT/ (/ SimultaneousMulti/ -/ Threading/ )/ 中/ ,/ 随着/ 线程/ 数目/ 的/ 增多/ ,/ 内存/ 系统/ 的/ 访存/ 压力/ 越来越/ 大/ ,/ 导致/ Bank/ 竞争/ 加剧/ ,/ 通过/ 改善/ RowBuffer/ 局部性/ 来/ 提高/ 性能/ 变得/ 越来越/ 困难/ ,/ 而/ 通过/ 线程/ 感知/ 的/ 调度/ 策略/ 则/ 可以/ 有效/ 改善/ 性能/ ./ 最少/ 访存/ 请求/ 优先/ 原则/ 认为/ 如果/ 访存/ 队列/ 中/ 来自/ 于/ 某个/ 进程/ 的/ 访存/ 请求/ 数量/ 少于/ 其他/ 同时/ 执行/ 的/ 进程/ ,/ 那么/ 该/ 进程/ 的/ 访存/ 请求/ 应该/ 获得/ 较/ 高/ 的/ 优先级/ ./ 这/ 是因为/ 一旦/ 响应/ 了/ 该/ 进程/ 的/ 少数几个/ 访存/ 请求/ ,/ 该/ 进程/ 就/ 可以/ 继续/ 往/ 下/ 执行/ ,/ 同时/ 对/ 其他/ 进程/ 延迟/ 的/ 影响/ 也/ 比较/ 小/ ./ 针对/ 存储/ 级/ 并行性/ 对多核/ 系统/ 性能/ 影响/ 的/ 发现/ ,/ Mutlu/ 等/ 人/ [/ 28/ ]/ 提出/ 了/ 并行性/ 感知/ 的/ 访存/ 请/ Page9/ 求/ 批量/ 调度/ 方式/ PAR/ -/ BS/ (/ Parallelism/ -/ AwareBatchScheduling/ )/ ./ 这种/ 调度/ 方式/ 包括/ 批量/ 调度/ 和/ 并行性/ 感知/ 两个/ 方面/ ./ 批量/ 调度/ 指/ 的/ 是/ 对/ 访存/ 队列/ 中/ 来自/ 不同/ 进程/ 的/ 访存/ 请求/ 按/ 到达/ 时间/ 的/ 先后顺序/ 进行/ 分组/ ,/ 前/ 一组/ 的/ 所有/ 访存/ 请求/ 的/ 优先级/ 都/ 高于/ 后/ 一组/ 的/ 所有/ 请求/ ,/ 但/ 每/ 一个/ 分组/ 内部/ 的/ 所有/ 访存/ 请求/ 可以/ 按照/ 普通/ 的/ 访存/ 请求/ 调度/ 策略/ 进行/ 调度/ ./ 而/ 并行性/ 感知/ 指/ 的/ 是/ 调度/ 时/ 考虑/ 每/ 一个/ 进程/ 的/ Bank/ 级/ 并/ 图/ 8/ 增加/ 并行/ 感知/ 的/ DRAM/ 访存/ 请求/ 调度/ 模型/ 在/ 批量/ 调度/ 方式/ 中/ ,/ 分组/ 的/ 大小/ 是/ 一个/ 重要/ 的/ 参数/ ./ 如果/ 分组/ 太/ 大/ ,/ 那么/ 分组/ 内/ 采用/ 的/ FR/ -/ FCFS/ 调度/ 策略/ 会/ 导致/ 行/ 缓存/ 局部性/ 好/ 的/ 程序/ 比/ 局部性/ 较差/ 的/ 程序/ 得到/ 更/ 多/ 的/ 访存/ 响应/ ,/ 从而/ 破坏/ 系统/ 公平性/ ./ 而/ 如果/ 分组/ 太小/ 又/ 容易/ 破坏/ 程序/ 的/ 行/ 缓存/ 局部性/ ./ 因此/ 分组/ 的/ 大小/ 需要/ 权衡/ 系统/ 性能/ 与/ 公平性/ 这/ 两个/ 方面/ ./ Mutlu/ 等/ 人/ [/ 28/ ]/ 通过/ 实验/ 选择/ 了/ 一个/ 经验性/ 值/ 作为/ 分组/ 大小/ ./ 通常/ 情况/ 下/ ,/ 为了/ 提高/ 内存/ 系统/ 的/ 吞吐/ 率/ ,/ 一般/ 优先/ 调度/ 延迟/ 敏感/ 的/ 线程/ ./ 因为/ 延迟/ 敏感/ 的/ 线程/ 以/ 计算/ 为主/ ,/ 访/ 存量/ 小/ ,/ 优先/ 调度/ 对系统/ 的/ 公平性/ 影响/ 不大/ ./ 而/ 带宽/ 敏感/ 型/ 线程/ 对/ 内存/ 系统/ 公平性/ 产生/ 较大/ 影响/ ./ Kim/ 等/ 人/ 首次/ 把/ 区分/ 不同/ 线程/ 的/ 访存/ 行为/ 作为/ 优化/ 的/ 主要/ 手段/ ,/ 在/ 运行/ 时/ 将/ 并行/ 的/ 线程/ 划分/ 为/ 访存/ 密集/ 和/ 访存/ 非/ 密集/ 两类/ ,/ 并/ 始终/ 赋予/ 后者/ 较/ 高/ 的/ 优先级/ ,/ 被/ 称为/ 线程/ 簇/ 调度/ 算法/ [/ 30/ ]/ TCM/ (/ ThreadClusterMemoryscheduling/ )/ ./ 与/ PAR/ -/ BS/ 相比/ ,/ TCM/ 更为/ 有效/ 地/ 提高/ 了/ 系统/ 的/ 吞吐/ 率/ ,/ 因为/ 访存/ 非/ 密集型/ 的/ 程序/ 对系统/ 的/ 吞吐/ 率/ 影响/ 更为/ 显行性/ ,/ 尽可能/ 使/ 同一个/ 进程/ 发送到/ 不同/ Bank/ 的/ 访存/ 请求/ 被/ 并行执行/ ./ 批量/ 调度/ 不但/ 为/ 并行性/ 感知/ 调度/ 方式/ 提供/ 了/ 基础/ ,/ 而且/ 批量/ 调度/ 的/ 分组/ 大小/ 可以/ 控制/ 性能/ 的/ 公平性/ ,/ 因为/ 可以/ 采用/ 轮询/ 的/ 方式/ 响应/ 各个/ 进程/ 的/ 分组/ ,/ 而/ 同一个/ 分组/ 内部/ 的/ 调度/ 策略/ 可以/ 尽可能/ 地/ 考虑/ 提高/ 性能/ ,/ 这样/ 能够/ 兼顾/ 系统/ 性能/ 与/ 公平性/ ./ 图/ 8/ 展示/ 了/ PAR/ -/ BS/ 的/ 调度/ 过程/ ./ 著/ ./ 另外/ Kim/ 等/ 人/ 认为/ 多核/ 处理器/ 平台/ 访存/ 请求/ 的/ 到达/ 规律/ 符合/ Pareto/ 随机/ 分布/ ,/ 所以/ 采用/ 排队/ 论/ 的/ 最小/ 获得/ 服务/ 线程/ 优先/ 的/ 思想/ ,/ 提出/ 了/ ATLAS/ 算法/ [/ 29/ ]/ ./ 该/ 调度/ 算法/ 在/ 每个/ 调度/ 周期/ 内/ 按照/ 每个/ 线程/ 已经/ 获得/ 的/ 带宽/ 大小/ ,/ 对/ 线程/ 进行/ 排序/ ,/ 并/ 赋予/ 获得/ 最小/ 带宽/ 线程/ 的/ 访存/ 请求/ 最高/ 的/ 优先级/ ./ Ipek/ 等/ 人/ [/ 27/ ]/ 指出/ 依靠/ 一些/ 专家/ 根据/ 影响/ 性能/ 和/ 公平性/ 的/ 一些/ 要素/ 制定/ 调度/ 策略/ 的/ 方法/ 无法/ 预计/ 调度/ 决策/ 的/ 长期/ 效果/ ,/ 而且/ 这种/ 方法/ 无法/ 从/ 已经/ 完成/ 的/ 调度/ 决策/ 中/ 汲取/ 经验/ ./ 因此/ 提出/ 通过/ 机器/ 学习/ 的/ 方法/ 来/ 设计/ 一个/ 可以/ 自动/ 学习/ ,/ 并且/ 可以/ 灵活/ 适应/ 执行/ 环境/ 变化/ 的/ 访存/ 调度/ 请求/ 策略/ ./ 采用/ 强化/ 学习/ 的/ 机器/ 学习/ 方法/ ,/ Ipek/ 描绘/ 了/ 强化/ 学习/ 的/ 过程/ ,/ 学习/ 主体/ (/ 调度/ 决策/ 机制/ )/ 会/ 与/ 周围/ 的/ 环境/ 执行/ 多次/ 交互/ ,/ 每次/ 交互/ 学习/ 主体/ 都/ 会/ 感知/ 环境/ 的/ 状态/ ,/ 并且/ 决定/ 自身/ 的/ 行动/ ./ 学习/ 主体/ 的/ 行动/ 将/ 改变/ 环境/ 的/ 状态/ ,/ 环境/ 的/ 新/ 状态/ 将/ 作为/ 学习/ 主体/ 的/ 下/ 一次/ 输入/ ,/ 同时/ 环境/ 会作/ 相应/ 的/ 改变/ ./ 学习/ 主体/ 就/ 在/ 重复/ 的/ 交互/ 过程/ 中/ 学习/ 如何/ 才能/ 达到/ 状态/ 到/ 行动/ 的/ 最佳/ 映射/ ,/ Page10/ 使得/ 学习/ 主体/ 从/ 环境/ 中/ 获得/ 的/ 特定/ 回馈/ 最大/ ./ 3.1/ ./ 3/ 进程/ 调度/ 算法/ 从/ 某种意义/ 上/ 说/ ,/ 进程/ 调度/ 应该/ 被/ 看作/ 系统软件/ 的/ 一部分/ 而/ 不是/ 由/ 内存/ 控制器/ 所/ 控制/ 的/ ,/ 但/ 由于/ 进程/ 的/ 行为/ 对于/ 存储系统/ 的/ 使用/ 效率/ 具有/ 重要/ 影响/ ,/ 所以/ 在/ 内存/ 控制器/ 的/ 访存/ 调度/ 策略/ 中/ 考虑/ 进程/ 的/ 行为/ 特征/ 进行/ 访存/ 请求/ 的/ 调度/ 优化/ 也/ 会/ 影响/ 存储系统/ 的/ 效率/ ./ 多个/ 进程/ 的/ 并行执行/ 虽然/ 可以/ 达到/ 更/ 高/ 的/ 带宽/ 利用率/ ,/ 却/ 容易/ 导致/ 超/ 线性/ 的/ 性能/ 降低/ ./ Zhang/ [/ 42/ ]/ 提出/ 了/ 多/ 核/ 环境/ 下/ 基于/ 程序/ 访存/ 阶段/ 的/ 粗粒度/ 进程/ 调度/ 策略/ ,/ 通过/ 进程/ 调度/ ,/ 程序执行/ 过程/ 中/ 的/ 访存/ 总量/ 虽然/ 没有/ 改变/ ,/ 但是/ 程序/ 对/ 访存/ 带宽/ 的/ 突发/ 式/ 访存/ 得到/ 了/ “/ 平坦/ 化/ ”/ ,/ 从而/ 减少/ 算法/ 部件/ 的/ 等待时间/ ,/ 提高/ 系统/ 吞吐/ 率/ ./ Zhang/ 等/ 人/ 构造/ 了/ 识别/ 程序/ 所处/ 访存/ 阶段/ 的/ PIN/ 工具/ ,/ 用来/ 识别/ 程序/ 访存/ 阶段/ 的/ 边界/ ,/ 他们/ 还/ 提出/ 了/ 考虑/ 程序/ 全局/ 访存/ 行为/ 的/ 独立/ 进程/ 调度/ 算法/ ,/ 实现/ 了/ 基于/ 程序/ 访存/ 阶段/ 的/ 粗粒度/ 进程/ 调度/ ./ 带宽/ 感知/ 的/ 进程/ 调度/ ,/ 是/ 一种/ 相对/ 有效/ 和/ 容易/ 实现/ 的/ 用于/ 缓解/ 带宽/ 竞争/ 的/ 方式/ ./ 另外/ ,/ Xu/ 等/ 人/ [/ 43/ ]/ 通过/ 带宽/ 敏感/ 线程/ 调度/ 手段/ 较为/ 有效/ 地/ 缓解/ 了/ 对/ 带宽/ 的/ 不/ 恰当/ 竞争/ 而/ 引发/ 的/ 若干/ 问题/ ,/ 进而/ 提高/ 了/ 整体/ 吞吐/ 率/ ./ 具体做法/ 是/ ,/ 通过/ 性能/ 监控/ 单元/ PMU/ (/ PerformanceMoniterUnit/ )/ 监视/ 并发/ 执行/ 的/ 每个/ 进程/ 的/ 访存/ 带宽/ ,/ 并/ 利用/ 进程/ 调度/ 的/ 手段/ 使/ 整个/ 系统/ 的/ 带宽/ 利用率/ 趋于/ “/ 均衡/ ”/ (/ 即/ 当前工作/ 集/ 的/ 平均/ 带宽/ 需求/ )/ ./ 这一/ 做法/ 源于/ 这样/ 一个/ 观察/ :/ 带宽/ 的/ 利用率/ 在/ 10ms/ 的/ 时间/ 片内/ (/ Linux/ 进程/ 调度/ 的/ 时间/ 片/ 是/ 100ms/ )/ 仍然/ 有/ 较大/ 的/ 波动/ ,/ 如果/ 调度/ 算法/ 在/ 某/ 一个/ 时间段/ 内使/ 带宽/ 的/ 利用/ 达到/ 峰值/ (/ PeakBandwidth/ )/ ,/ 那么/ 将会/ 引发/ 超/ 线性/ 的/ 性能/ 下降/ ./ 因此/ ,/ 该/ 调度/ 算法/ 将/ 调度/ 的/ 时间/ 片/ 减小/ ,/ 并/ 使得/ 带宽/ 利用率/ 始终/ 维持/ 在/ 某个/ “/ 均衡/ ”/ 的/ 状态/ ,/ 这一/ 做法/ 在/ 真实/ 的/ 系统/ 上/ 可以/ 取得/ 平均/ 近/ 5/ %/ 的/ 性能/ 提升/ ./ 多核/ 处理器/ 对/ 共享内存/ 资源/ 的/ 竞争/ 是/ 导致系统/ 性能/ 下降/ 的/ 主要/ 原因/ ,/ 并且/ 使得/ 性能/ 变得/ 愈发/ 不可/ 预测/ ,/ 并/ 在/ 这类/ 系统/ 上/ 产生/ 更为严重/ 的/ 服务质量/ 问题/ ,/ Xu/ 等/ 人/ [/ 44/ ]/ 针对/ QoS/ 问题/ ,/ 提出/ 一种/ 进程/ 调度/ 策略/ 来/ 改善/ 系统/ 公平性/ ./ 其/ 策略/ 是/ 对于/ 并行/ 运行/ 的/ 多个/ 程序/ ,/ 保证/ 相同/ 权重/ 的/ 应用/ 具有/ 相同/ 的/ 性能/ 减速比/ ./ 基本/ 方法/ 是/ 在/ 系统/ 运行/ 过程/ 中/ ,/ 监控/ 所有/ 程序/ 的/ 性能/ 变化/ ./ 当/ 发现/ 一个/ 程序/ 相对/ 于/ 其他/ 进程/ 来说/ ,/ 遭遇/ 到/ 更/ 多/ 的/ 减速/ 并/ 积累/ 了/ 更/ 多/ 需要/ 完成/ 的/ 工作/ 时/ ,/ 便/ 分配/ 较/ 多/ 的/ CPU/ 时间/ 片/ 给/ 它/ ,/ 从而/ 改善/ 系统/ 的/ 公平性/ ./ Xu/ 等/ 人/ 的/ 方法/ 可以/ 赋给/ 不同/ 的/ 进程/ 以/ 不同/ 的/ 权重/ ,/ 并/ 提供/ 一个/ 有效/ 和/ 健壮/ 的/ 调节器/ 允许/ OS/ 自由/ 地/ 调整/ 公平性/ 和/ 吞吐/ 率/ ./ 3.2/ 地址映射/ 优化/ 影响/ 内存/ 系统/ 延迟/ 和/ 带宽/ 维持/ 的/ 因素/ 有/ 很多/ ,/ 除了/ 访存/ 请求/ 调度/ 之外/ ,/ 另/ 一个/ 可以/ 直接/ 影响/ 内存/ 系统/ 性能/ 的/ 是/ 地址映射/ ./ 地址映射/ 指/ 的/ 是/ 一个/ 给定/ 的/ 物理地址/ ,/ 如何/ 将/ 其/ 分片/ 划分/ 来/ 确定/ Channel/ 、/ Rank/ 、/ Bank/ 、/ Row/ 以及/ Column/ 在/ 内存地址/ 上/ 的/ 位置/ ./ 地址映射/ 的/ 优化/ 目标/ 是/ 在/ 提供/ 一定/ Bank/ 间/ 并发/ 度/ 的/ 情况/ 下/ 降低/ Bank/ 内/ 的/ 行/ 缓存/ 冲突/ ./ 如果/ 地址映射/ 与/ 程序/ 的/ 运行/ 时访存/ 行为/ 不/ 相匹配/ ,/ 例如/ 连续/ 的/ 访存/ 请求/ 被/ 映射/ 到/ 相同/ Bank/ 的/ 不同/ 行中/ ,/ 就/ 会/ 造成/ Bank/ 冲突/ ./ 我们/ 将/ 用于/ 消除/ Bank/ 冲突/ 的/ 方法/ 分成/ 两类/ :/ 静态/ 的/ 方法/ 和/ 动态/ 的/ 方法/ ./ 静态/ 的/ 方法/ 主要/ 集中/ 在/ 早期/ 的/ 地址映射/ 研究/ 当中/ ./ 存储体/ 斜排/ (/ Skewing/ )/ 技术/ 在/ 20/ 世纪/ 70/ 年代/ 已经/ 被/ 提出/ 用以/ 解决/ 多个/ 存储体/ 中/ 的/ 访存/ 冲突/ 问题/ [/ 45/ -/ 46/ ]/ ./ 针对/ 斜排/ 技术/ ,/ Gao/ 等/ 人/ [/ 47/ -/ 48/ ]/ 在/ 质数/ 内存/ 系统/ 下/ 引入/ 孙子/ 定理/ 来/ 解决/ Bank/ 冲突/ 问题/ ./ Frailong/ 等/ 人/ [/ 49/ ]/ 提出/ 按位/ 异或/ 函数/ (/ XOR/ )/ 进行/ 地址映射/ 缓解/ 存储体/ 访问/ 冲突/ ./ XOR/ 映射/ 方式/ 的/ 好处/ 是/ 易于/ 在/ 硬件/ 中/ 实现/ 且/ 开销/ 很/ 低/ ./ 多种/ XOR/ 地址映射/ 方式/ 被/ 提出/ 以/ 解决/ 各种/ 常用/ 的/ 地址/ 访问/ 模式/ 中/ 的/ 存储体/ 访问/ 冲突/ 问题/ [/ 49/ -/ 54/ ]/ ./ 对于/ 其他/ 的/ 存储/ 层次/ ,/ Liu/ 等/ 人/ [/ 55/ ]/ 提出/ 采用/ XOR/ 地址映射/ 的/ 方法/ 减少/ Cache/ 访问/ 中/ 的/ 行/ 访问/ 冲突/ 问题/ ,/ Zhang/ 等/ 人/ [/ 56/ ]/ 提出/ 采用/ XOR/ 地址映射/ 方法/ 减少/ 存储体/ 访问/ 中/ 的/ 行/ 缓存/ (/ RowBuffer/ )/ 冲突/ 问题/ ./ Hsu/ 和/ Smith/ [/ 57/ ]/ 在/ 具有/ CachedDRAM/ 的/ 向量/ 超级计算机/ 系统/ 中/ 提出/ 并/ 研究/ 了/ 内存/ 的/ 交叉/ 存储/ (/ Interleaving/ )/ 技术/ ,/ 该/ 技术/ 可以/ 实现/ 提高/ 数据/ 局部性/ 同时/ 避免/ Bank/ 冲突/ 的/ 目标/ ./ 早期/ 的/ 地址映射/ 方法/ 通常/ 是/ 针对/ 数据结构/ 中/ 的/ 访问/ 冲突/ 而/ 提出/ 的/ ,/ 而/ 处理器/ 核数/ 及/ 可/ 并行执行/ 的/ 线程/ 个数/ 的/ 不断/ 增多/ ,/ 对/ 地址映射/ 提出/ 了/ 新/ 的/ 挑战/ ,/ 静态/ 地址映射/ 方法/ 已经/ 无法/ 满足要求/ ./ 动态/ 的/ 地址映射/ 方法/ ,/ 可以/ 同时/ 避免/ 线程/ 内/ 以及/ 线程/ 间/ 的/ Bank/ 冲突/ ./ 例如/ ,/ Impulse/ [/ 58/ ]/ 内存/ 系统/ 通过/ 引入/ 一层/ 新/ 的/ 影子/ (/ Shadow/ )/ 地址/ 空间/ ,/ 并/ 在/ 内存/ 控制器/ 中/ 实现/ 从/ 影子/ 地址/ 到/ 物理地址/ 的/ 动态/ 重/ 映射/ 来/ 改善/ 内存/ 性能/ ,/ 但是/ 该/ 方法/ 需要/ 修改/ 应用程序/ 和/ 操作系统/ 以/ 改变/ 数据/ 最终/ 在/ DRAM/ 中/ 的/ 存储/ 位置/ ./ Mi/ 等/ 人/ [/ 59/ ]/ 和/ Liu/ 等/ 人/ [/ 60/ ]/ 通过/ 页/ 着色/ 技术/ 对/ 这/ 一/ 问题/ 进行/ 了/ 进一步/ 的/ 研究/ ./ Page113/ ./ 2.1/ 静态方法/ 页/ 交叉/ 存储/ (/ PageInterleaving/ )/ 是/ 一种/ 典型/ 的/ 静态/ 地址映射/ 方式/ ./ 图/ 9/ 展示/ 的/ 是/ 我们/ 通过/ HMTT/ 卡/ [/ 61/ ]/ 测得/ 的/ Intel/ 服务器/ 真实/ 的/ 地址映射/ ./ 从图/ 中/ 可以/ 看出/ ,/ 这种/ 地址映射/ 方式/ 将/ 内存地址/ 空间/ 按/ 页面/ 大小/ 分配/ 到/ 不同/ Bank/ 的/ 相同/ 行中/ ./ 目的/ 是/ 使/ 访问/ 同一个/ 页面/ 内/ 连续/ 地址/ 的/ 访存/ 请求/ ,/ 被/ 映射/ 到/ 同一个/ Bank/ 的/ 相同/ 行中/ 增加/ 行/ 缓存/ 局部性/ ,/ 而/ 使/ 相隔/ 距离/ 超过/ 一个/ DRAM/ 页面/ 大小/ 的/ 访存/ 请求/ 尽量/ 映射/ 到/ 不同/ 的/ Bank/ 上/ ,/ 以/ 增加/ Bank/ 级/ 并行度/ ./ 图/ 9IntelXeon5645/ 服务器/ 真实/ 地址映射/ (/ 双通道/ ,/ 页/ 交替/ 对/ 地址/ 连续/ 的/ 访存/ 请求/ 会/ 产生/ 连续/ 的/ 行/ 缓存/ 命中/ ,/ 不过/ 这种/ 地址映射/ 方式/ 有/ 一个/ 缺点/ 是/ 没有/ 考虑/ Cache/ 对/ 访存/ 请求/ 序列/ 的/ 影响/ ./ Zhang/ 等/ 人/ [/ 56/ ]/ 在/ 分析/ 了/ 大量/ 的/ 行/ 缓存/ 失效/ 的/ 情况/ 之后/ 发现/ ,/ 行/ 缓存/ 冲突/ 的/ 产生/ 有/ 3/ 个/ 原因/ :/ L2Cache/ 冲突/ 失效/ 、/ L2/ 写回/ 以及/ 特定/ 的/ 程序/ 访存/ 模式/ ./ Cache/ 冲突/ 失效/ 以及/ Cache/ 写/ 回/ 在/ 这种/ 地址映射/ 中/ ,/ 必然/ 导致/ 图/ 10XOR/ 地址映射/ 方法/ 3.2/ ./ 2/ 动态/ 方法/ 由于/ 多道程序/ 的/ 访存/ 序列/ 之间/ 通常/ 不/ 存在/ DRAM/ 行/ 缓存/ 局部性/ ,/ 因此/ 不同/ 程序/ 的/ 访存/ 请求/ 往往/ 访问/ DRAM/ 中/ 同一/ Bank/ 的/ 不同/ 行/ ,/ 导致/ RowDRAM/ 的/ 行/ 缓存/ 冲突/ ./ 下面/ 以/ Cache/ 写/ 回为例/ 说明/ 这种/ 映射/ 方式/ 的/ 缺点/ :/ 假设/ Cache/ 写回/ 请求/ W/ 是/ 由/ 读/ 请求/ R/ 触发/ 的/ ,/ 那么/ R/ 和/ W/ 肯定/ 被/ 映射/ 到/ 相同/ 的/ Cache/ 块/ ./ 所以/ 它们/ 的/ CacheSet/ 索引/ 一定/ 相同/ ,/ 而/ R/ 和/ W/ 访问/ 的/ 是/ 不同/ 的/ 物理地址/ (/ 否则/ 不会/ 产生/ 写回/ )/ ,/ 那么/ 它们/ 的/ CacheTag/ 一定/ 不同/ ./ 通常/ 末级/ 共享/ 缓存/ 的/ 大小/ 除以/ 相联/ 度/ 之后/ 的/ 值/ 要/ 大于/ DRAM/ 的/ 页/ 大小/ ,/ 所以/ Bank/ 将会/ 是/ CacheSet/ 中/ 的/ 一部分/ ,/ 而/ CacheTag/ 往往/ 是/ Row/ 索引/ 的/ 一部分/ ,/ 这/ 就/ 意味着/ R/ 和/ W/ 访问/ 的/ 是/ 同一个/ Bank/ 内部/ 的/ 不同/ Row/ ,/ 所以/ R/ 和/ W/ 这/ 两个/ 连续/ 的/ 访存/ 请求/ 必然/ 导致/ 行/ 缓存/ 冲突/ ./ 针对/ 这种/ 情况/ ,/ Zhang/ 等/ 人/ [/ 56/ ]/ 提出/ 一种/ 新/ 的/ 地址映射/ 方式/ :/ XOR/ 地址映射/ 方式/ ./ XOR/ 是/ 一种/ 常用/ 的/ 用于/ 散列/ 地址/ 的/ 异或/ 方法/ ,/ Liu/ 等/ 人/ [/ 55/ ]/ 曾/ 提出/ 基于/ XOR/ 的/ 方法/ 在/ 缓存/ -/ 主存/ 之间/ 进行/ 地址映射/ ./ 如图/ 10/ 所示/ ,/ 通过/ 物理地址/ 中/ Bank/ 索引/ 对应/ 的/ 位/ 与/ CacheTag/ 的/ 低位/ 进行/ XOR/ 运算/ ,/ 结果/ 作为/ 新/ 的/ Bank/ 索引/ ,/ 使得/ 原来/ 映射/ 到/ 相同/ Bank/ 的/ 不同/ Row/ 的/ 地址/ ,/ 被/ 随机/ 分布/ 到/ 不同/ 的/ Bank/ 上/ ,/ 这样/ 可以/ 显著/ 减少/ 由于/ Cache/ 的/ 冲突/ 失效/ 和/ Cache/ 写回/ 引起/ 的/ 行/ 缓存/ 冲突/ ./ 引入/ XOR/ 地址映射/ 使/ DRAM/ 的/ 地址映射/ 与/ Cache/ 地址映射/ 不/ 对称/ ,/ 从而/ 消除/ 某种程度/ 的/ RowBuffer/ 冲突/ ./ Zhang/ 等/ 人/ 还/ 证明/ 了/ XOR/ 地址映射/ 能够/ 保持/ 物理地址/ 到/ DRAM/ 的/ 一一/ 映射/ 的/ 关系/ ./ Buffer/ 的/ 局部性/ 被/ 破坏/ ,/ 造成/ 行/ 缓存/ 冲突/ ./ 不加/ 约束/ 的/ 竞争/ 会/ 使/ 程序/ 的/ 执行/ 时间/ 难以预测/ ,/ 同时/ 造成/ 系统资源/ 浪费/ ,/ 降低/ 系统/ 的/ 吞吐/ 率/ ./ Mi/ 等/ 人/ [/ 59/ ]/ 认为/ 通过/ 内存/ 控制器/ 调度/ 的/ 方式/ 很难/ 解决/ 这个/ 问题/ ,/ 因为/ Page12/ 调度/ 的/ 作用/ 范围/ 受到/ 指令/ 窗口/ 和/ 访存/ 请求/ 队列/ 长度/ 的/ 限制/ ,/ 不能/ 彻底消除/ 程序/ 间/ 的/ 竞争/ 造成/ 的/ 行/ 缓存/ 冲突/ ./ Mi/ 提出/ 了/ 多道程序/ 间/ Bank/ 划分/ 的/ 思想/ ,/ 他/ 通过/ 页/ 着色/ 的/ 方式/ (/ 依据/ 物理地址/ 位中/ 的/ Bank/ 位/ )/ 将/ 不同/ 进程/ 分配/ 到/ 具有/ 不同/ 颜色/ 的/ Bank/ 上/ ,/ 实现/ 不同/ 进程/ 对/ Bank/ 访问/ 的/ 隔离/ ,/ 以/ 避免/ 在/ Bank/ 上/ 相互/ 干扰/ 和/ 冲突/ ./ Liu/ 等/ 人/ [/ 60/ ]/ 进一步/ 在/ 真实/ 多核/ 机器/ 上/ ,/ 采用/ 页/ 着色/ 技术/ ,/ 通过/ 纯/ 软件/ 的/ 方式/ 实现/ 了/ Bank/ 级/ 划分/ 机制/ BPM/ (/ Bank/ -/ levelPartitionMechanism/ )/ ./ 基于/ BPM/ ,/ 他们/ 做/ 了/ 广泛/ 的/ 实验/ ,/ 综合/ 所有/ 随机/ 产生/ 的/ 工作/ 集/ 测试数据/ ,/ 实验/ 结果表明/ 能/ 得到/ 平均/ 4.7/ %/ 的/ 性能/ 提升/ (/ 最高/ 达/ 8.6/ %/ )/ ,/ 同时/ 降低/ 4.5/ %/ (/ 最高/ 达/ 15.8/ %/ )/ 的/ 不公平性/ ,/ 这/ 主要/ 是/ 通过/ 减少/ 平均/ 15/ %/ 的/ Bank/ 干扰/ (/ RowBufferMiss/ 率/ 的/ 降低/ )/ 带来/ 的/ ./ 此外/ 由于/ 行/ 缓存/ 命中/ 访问/ 的/ 增加/ ,/ 导致/ 内存/ 芯片/ 使用/ 效率/ 的/ 提升/ ,/ 这/ 带来/ 5.2/ %/ 的/ 内存/ 系统/ 能耗/ 的/ 节省/ ./ 从/ 以上/ 地址映射/ 的/ 发展/ 来看/ ,/ 动态/ 的/ 地址映射/ 技术/ 是/ 多/ 核/ 系统/ 发展/ 的/ 必然趋势/ ./ 4/ 总结/ 与/ 展望/ 共享/ 缓存/ 和/ DRAM/ 内存/ 系统/ 是/ 目前/ 制约/ 多核/ 系统/ 性能/ 的/ 关键因素/ ,/ 随着/ 处理器/ 核数/ 的/ 快速增长/ ,/ 来自/ 不同/ 核/ 不同/ 线程/ 的/ 访存/ 请求/ 对/ 有限/ 的/ 共享内存/ 资源/ 产生/ 越来越/ 激烈/ 的/ 竞争/ ,/ 因此/ 挖掘/ 和/ 提高/ 共享内存/ 资源/ 利用效率/ 具有/ 重要/ 的/ 理论/ 价值/ 和/ 实际意义/ ./ 本文/ 主要/ 在/ 共享/ 缓存/ 分区/ 、/ 内存/ 请求/ 调度/ 以及/ 地址映射/ 三/ 方面/ 对/ 共享内存/ 资源分配/ 和/ 管理/ 研究/ 进行/ 了/ 综述/ ,/ 并/ 给出/ 了/ 未来/ 的/ 发展趋势/ ./ 在/ 第/ 2/ 节中/ ,/ 本文/ 从/ 系统/ 吞吐/ 率/ 和/ 系统/ 公平性/ 角度/ 介绍/ 了/ 一系列/ 对/ 共享/ 缓存/ 分区/ 的/ 相关/ 研究/ 、/ 算法/ 和/ 实现/ 机制/ ./ 然而/ 近十年/ 的/ 研究/ 发现/ ,/ 共享/ 缓存/ 分区/ 并/ 不/ 总是/ 有效/ ,/ 因为/ Cache/ 本身/ 会/ 自动/ 和/ 动态/ 调整/ 每个/ 程序/ 的/ 资源分配/ ,/ 而/ 共享/ 缓存/ 分区/ 却/ 限制/ 程序/ 对/ 其他/ 分区/ 中/ 缓存/ 资源/ 的/ 利用/ ./ 本文/ 认为/ 虽然/ 分区/ 在/ 一定/ 程度/ 上/ 解决/ 了/ 共享/ 缓存/ 干扰/ 和/ 污染/ 的/ 问题/ ,/ 但是/ 随着/ 多核/ // 众核/ 时代/ 的/ 到来/ ,/ 一些/ 算法/ 的/ 复杂度/ 和/ 硬件/ 开销/ 也/ 将/ 大幅/ 增长/ ,/ 导致/ 其/ 失去/ 实用性/ 和/ 可扩展性/ ./ 另外/ ,/ 处理器/ 核数/ 和/ 线程/ 数/ 规模/ 进一步/ 增大/ ,/ 共享/ 缓存/ 容量/ 也/ 呈现出/ 增长/ 的/ 趋势/ ,/ 然而/ 这/ 并未/ 导致/ 进程/ // 线程/ 对/ 缓存/ 需求/ 的/ 进一步/ 增加/ ,/ 同时/ 运行/ 的/ 多道程序/ 以及/ 多线程/ 程序/ ,/ 在/ 云/ 计算/ 和/ 大/ 数据/ 时代/ 展现出/ 越来越/ 明显/ 的/ 访存/ 行为/ 特征/ 上/ 的/ 差异/ ,/ 比如/ Web/ 服务/ 、/ 搜索引擎/ 、/ 视频/ 服务/ 、/ 生物/ 计算/ 等/ 应用/ ./ 本文/ 认为/ 基于/ 工作/ 集/ 特征/ ,/ 对/ 缓存/ 容量/ 需求/ 以及/ 带宽/ 需求/ 进行/ 分类/ ,/ 以及/ 轻量级/ 的/ 快速/ 硬件/ 分区/ 机制/ 将/ 是/ 未来/ 的/ 一个/ 发展趋势/ ./ 在/ 第/ 3/ 节中/ ,/ 本文/ 从/ 访存/ 请求/ 调度/ 算法/ 和/ 地址映射/ 角度/ 介绍/ 了/ 一系列/ 对/ DRAM/ 内存/ 系统/ 的/ 相关/ 研究/ ./ 访存/ 请求/ 调度/ 在/ 本质/ 上/ 是/ 改变/ 内存/ 控制器/ 对/ 请求/ 的/ 服务/ 顺序/ ,/ 以/ 更/ 适应/ 现代/ DRAM/ 内存/ 的/ 存储/ 结构/ 并/ 在/ 不同/ 系统优化/ 目标/ 之间/ 做出/ 权衡/ ,/ 比如/ 服务质量/ 、/ 实时性/ 要求/ 或/ 最大化/ 吞吐/ 率/ 等/ ./ 访存/ 请求/ 调度/ 越来越/ 趋向/ 从/ 全局/ 了解/ 不同/ 线程/ 的/ 需求/ ./ 应用/ 级/ 或者/ 结构/ 级/ 的/ 信息/ 将/ 参与/ 调度/ ,/ 比如/ 将/ 线程/ 按照/ 访存/ 密集/ 、/ 非/ 密集/ 分别/ 调度/ ;/ 或者/ 将/ 结构/ 级/ 信息/ ,/ 比如/ load/ // store/ 指令/ 参与/ 控制器/ 调度/ ;/ 或者/ 通过/ MSHR/ 进行/ 流速/ 控制/ 等/ 方式/ ./ 不过/ 随着/ 处理器/ 核数/ 的/ 增长/ ,/ 调度/ 算法/ 的/ 作用/ 范围/ 越来越/ 受到/ 指令/ 窗口/ 和/ 访存/ 请求/ 队列/ 长度/ 的/ 限制/ ./ 地址映射/ 相对/ 于/ 调度/ 算法/ 可以/ 在/ 很大/ 程度/ 上/ 缓解/ 线程/ 之间/ 对/ DRAM/ 资源/ 的/ 争抢/ ,/ 但/ 静态/ 的/ 映射/ 方法/ 不/ 适应/ 多核/ 时代/ 所/ 带来/ 越来越/ 多/ 的/ 线程/ 干扰/ 情形/ ,/ 最大化/ Bank/ 级/ 并行/ 和/ RowBuffer/ 命中/ 难以/ 同时/ 满足/ ./ 在线/ 程/ 数量/ 较少/ 的/ 情况/ 下/ ,/ 可以/ 通过/ Bank/ 级/ 并行/ 增加/ 性能/ ,/ 但/ 在/ 大量/ 挖掘/ 线程/ 级/ 并行/ 的/ 多线程/ 处理器/ 中/ ,/ 这种/ 最大化/ 单线程/ 性能/ 的/ 地址映射/ 方式/ ,/ 会/ 造成/ 线程/ 的/ 相互/ 干扰/ ,/ 减少/ RowBuffer/ 命中/ ,/ 降低/ 内存/ 带宽/ 和/ 性能/ ./ 通过/ 限制/ 单线程/ 可用/ 的/ Bank/ 数量/ ,/ 虽然/ 可能/ 降低/ 单线程/ 性能/ ,/ 但/ 在/ 大量/ 线程/ 级/ 并行/ 的/ 应用/ 中/ ,/ 却/ 可/ 有效/ 降低/ 线程/ 间/ 对/ Bank/ 的/ 相互/ 干扰/ ,/ 会/ 提升/ 系统/ 整体/ 吞吐/ 率/ ,/ 进而/ 提高/ 系统/ 整体/ 性能/ ./ 本文/ 认为/ 以往/ 面向/ 充分/ 挖掘/ Bank/ 级/ 并行/ 的/ 映射/ 方式/ ,/ 将会/ 被/ 动态/ 以及/ 面向/ 线程/ 级/ Bank/ 划分/ 的/ 映射/ 方式/ 所/ 替代/ ./ 总之/ ,/ 随着/ 处理器/ 核数/ 的/ 增加/ ,/ 多核/ 系统/ 会/ 产生/ 大量/ 的/ 访存/ 请求/ ,/ 对系统/ 中/ 共享内存/ 资源/ 的/ 访问/ 竞争/ 加剧/ ./ 在/ 摩尔定律/ 的/ 推动/ 下/ ,/ 存储容量/ 依然/ 在/ 快速增长/ ,/ RowBuffer/ 也/ 有/ 增大/ 的/ 趋势/ ./ 但是/ 大量/ 线程/ 相互/ 干扰/ 所/ 导致/ 的/ RowBuffer/ 局部性/ 变差/ 已/ 成为/ 影响/ 内存/ 性能/ 的/ 一个/ 重要/ 问题/ ./ 增加/ 系统/ 中/ 内存/ 通道/ 或/ Bank/ 数量/ 是/ 提高/ 内存/ 性能/ 的/ 有效/ 方法/ 之一/ ,/ 但/ 这种/ 方式/ 会/ 带来/ 较/ 高/ 的/ 成本/ 以及/ 受到/ 处理器/ 引脚/ (/ Pin/ )/ 数量/ 的/ 限制/ ./ 本文/ 认为/ 独立/ 异构/ 的/ DRAM/ 微结构/ 技术/ 、/ 高速串行总线/ 、/ 消息/ 内存/ 以及/ 板上/ 缓存/ ,/ 已/ 成为/ DRAM/ 内存/ 系统/ 的/ 发展趋势/ 和/ 重要/ 的/ 研究/ 方向/ ./ Page13/ 致谢/ 感谢/ 评审/ 专家/ 付出/ 的/ 辛勤劳动/ 和/ 对/ 本文/ 提出/ 的/ 中肯/ 意见/ !/ 

