Page1CCN/ 中/ 选择性/ 缓存/ 机制/ 的/ 研究/ 刘外/ 喜/ 1/ )/ ,/ 2/ )/ 余顺争/ 2/ )/ 胡晓/ 1/ )/ 朱萍/ 玉/ 1/ )/ 1/ )/ (/ 广州大学/ 电子信息/ 工程系/ 广州/ 510006/ )/ 2/ )/ (/ 中山大学/ 电子/ 通信/ 工程系/ 广州/ 510006/ )/ 摘要/ 现有/ Internet/ 架构/ 存在/ 着/ 众所周知/ 的/ 缺点/ ,/ 未来/ 网络/ 架构/ 的/ 研究/ 成为/ 了/ 热点/ ./ 其中/ ,/ CCN/ (/ Content/ -/ CentricNetworking/ )/ 在/ 众多/ 新/ 架构/ 中正/ 逐渐/ 被/ 大家/ 认为/ 是/ 最/ 有/ 前途/ 的/ 方案/ 之一/ ,/ 它/ 要求/ 网络/ 中/ 的/ 每/ 一/ 节点/ 都/ 要/ 有/ 缓存/ 功能/ ./ 所以/ ,/ 研究/ 高效/ 的/ 缓存/ 机制/ 就/ 成为/ 实现/ CCN/ 预期/ 目标/ 的/ 关键/ ./ 针对/ CCN/ 现有/ 缓存/ 机制/ 中/ 存在/ 的/ “/ 无序/ 缓存/ ”/ 的/ 问题/ ,/ 文中/ 提出/ 了/ 选择性/ 缓存/ 机制/ SC/ (/ SelectiveCaching/ )/ ./ 它/ 根据/ 用户/ 的/ 潜在/ 需求/ 和/ 内容/ 的/ 流行/ 规律/ ,/ 只/ 在/ 必要/ 的/ 节点/ 上/ 选择性/ 地/ (/ 而/ 不是/ 沿着/ 内容/ 传输/ 路径/ 处处/ 地/ )/ 缓存/ ./ 同时/ ,/ 采用/ 带宽/ 换/ 缓存/ 的/ 思想/ ,/ 利用/ 链路/ 的/ 冗余/ 带宽/ ,/ 将/ 内容/ 分流/ 到/ 相邻/ 节点/ 缓存/ ,/ 进一步/ 提升/ 缓存/ 效率/ ./ 我们/ 首先/ 提出/ 了/ 缓存/ 空间/ 消耗/ 的/ 理论/ 分析模型/ ,/ 然后/ 在/ 多种/ 实验/ 条件/ 下/ 对/ SC/ 进行/ 了/ 验证/ ,/ 实验/ 结果表明/ SC/ 可以/ 提高/ 网络/ 的/ 缓存/ 效率/ 和/ 性能/ ,/ 同时/ SC/ 的/ 通信/ 、/ 计算/ 、/ 状态/ 记忆/ 等/ 额外/ 开销/ 也/ 都/ 很小/ ./ 关键词/ 内容/ 中心/ 网络/ (/ CCN/ )/ ;/ 选择性/ 缓存/ ;/ 内容/ 放置/ ;/ 带宽/ 换/ 缓存/ 1/ 引言/ 当前/ ,/ 各种/ 新/ 的/ 互联网/ 应用/ 层出不穷/ ,/ 但/ 现有/ 的/ 协议/ 架构/ 却/ 无法/ 适应/ 这一/ 应用/ 需求/ 的/ 发展/ ,/ 存在/ 着/ 一系列/ 的/ 问题/ :/ 移动性/ 的/ 支持/ 、/ 扩展性/ 、/ 安全性/ 问题/ 等/ ./ 为了/ 彻底/ 地/ 克服/ 上述/ 问题/ ,/ 设计/ 一种/ 全新/ 的/ 互联网/ 架构/ 逐渐/ 成为/ 了/ 研究者/ 们/ 的/ 共识/ ./ 缓存/ 是/ 一种/ 改善/ Web/ 服务/ 的/ 重要/ 技术/ ,/ 它/ 使得/ 内容/ 更加/ 靠近/ 用户/ ,/ 从而/ 可以/ 减少/ 网络带宽/ 的/ 消耗/ 、/ 服务器/ 的/ 负载/ 、/ 用户/ 的/ 访问/ 时延/ [/ 1/ ]/ ./ 正是/ 考虑/ 到/ 这些/ 优势/ ,/ 在/ 设计/ 全新/ 未来/ 互联网/ 的/ 时候/ ,/ 这一/ 针对/ Web/ 服务/ 的/ 思想/ 被/ 扩展/ 到/ 全网/ 以及/ 所有/ 应用/ ./ CCN/ (/ Content/ -/ CentricNetworking/ )/ [/ 2/ ]/ 正是/ 这一/ 思路/ 的/ 典型/ 代表/ ,/ 它/ 正/ 逐渐/ 被/ 大家/ 认为/ 是/ 众多/ 未来/ 互联网/ 架构/ 中/ 最/ 有/ 前途/ 的/ 方案/ 之一/ ./ CCN/ 要求/ 每个/ 节点/ 都/ 能/ 缓存/ 经过/ 的/ 内容/ ,/ 覆盖/ 全网/ 的/ 缓存/ 成为/ 了/ 网络体系结构/ 中/ 固有/ 的/ 一部分/ ,/ 因此/ 网络/ 不仅/ 是/ 一个/ 传输/ 体/ ,/ 也/ 成为/ 了/ 一个/ 存储体/ ./ 当/ 用户/ 请求/ 某一/ 内容/ 时/ ,/ 任何/ 缓存/ 有/ 该/ 内容/ 的/ 中间/ 节点/ 都/ 可以/ 做出/ 响应/ ./ 这样/ 一种/ 全网/ 缓存/ 机制/ 使得/ 信息/ 快速/ 地/ 扩散/ 到/ 网络/ 中/ ./ 对于/ 每/ 一个/ 请求/ ,/ 网络/ 都/ 可以/ 提供/ 多个/ 数据源/ ,/ 从而/ 大幅度提高/ 网络/ 的/ 性能/ ./ 这/ 实际上/ 将/ 以前/ 只有/ CDN/ (/ ContentDistributionNetworks/ )/ 和/ P2P/ (/ Peer/ -/ to/ -/ Peer/ )/ 等/ 专有/ 网络/ 中才/ 会/ 提供/ 的/ 多方/ 通信/ 服务/ 扩展/ 到/ 全/ 网络/ ./ 基于/ 这一/ 新型/ 的/ 通信/ 模式/ ,/ 要/ 将/ 覆盖/ 全网/ 的/ 缓存/ 的/ 潜在/ 优势/ 发挥/ 到/ 最大/ ,/ 设计/ 一种/ 高效/ 的/ 缓存/ 机制/ 成为/ 了/ 关键/ ./ 高效/ 地/ 缓存/ 意味着/ :/ 在/ 部署/ 相同/ 大小/ 的/ 缓存/ 的/ 情况/ 下/ ,/ 用户/ 能够/ 更/ 容易/ 地/ 从/ 缓存/ 中/ 获取/ 想要/ 的/ 内容/ ,/ 原始/ 内容/ 服务器/ 的/ 负荷/ 得以/ 减少/ ./ 而/ 在/ 当前/ 已/ 提出/ 来/ 的/ 众多/ 缓存/ 机制/ 中/ ,/ 依然/ 还有/ “/ 无序/ 缓存/ ”/ 的/ 问题/ 需要/ 解决/ ,/ 主要/ 表现/ 如下/ :/ (/ 1/ )/ 无效/ 缓存/ ./ 在/ 众多/ CCN/ 的/ 原始/ 提案/ 中/ ,/ 执行/ 的/ 是/ 处处/ 缓存/ (/ CacheEverythingEverywhere/ ,/ CEE/ )/ ,/ 即/ 所有/ 的/ 内容/ 被/ 要求/ 在/ 去往/ 目的地/ 途中/ 所有/ 节点/ 缓存/ ,/ 但/ 这种/ 处处/ 缓存/ 的/ 机制/ 饱受/ 质疑/ [/ 3/ ]/ ,/ 会/ 导致/ 严重/ 的/ 缓存/ 浪费/ :/ 因为/ 请求/ 可以/ 被/ 任意/ 中间/ 节点/ 响应/ 后/ 而/ 不会/ 往/ 上游/ 转发/ ,/ 那么/ 其/ 上游/ 某些/ 节点/ 缓存/ 的/ 内容/ 可能/ 根本/ 没有/ 机会/ 响应/ 后来/ 的/ 请求/ ,/ 但/ 由于/ 空间/ 受限/ 而/ 必须/ 被/ 替换/ 掉/ ./ 我们/ 将/ 这种/ 内容/ 在/ 被/ 替换/ 之前/ 没有/ 机会/ 发挥作用/ 的/ 现象/ 称为/ “/ 无效/ 缓存/ ”/ ./ 在/ 如图/ 1/ 所示/ 的/ 网络/ 中/ ,/ 当/ H/ 和/ F/ 节点/ 都/ 从/ 服务器/ C/ 节点/ 请求/ 了/ 内容/ o/ 后/ ,/ 如果/ 按照/ 处处/ 缓存/ 的/ 机制/ ,/ 那么/ o/ 会/ 在/ B/ 、/ A/ 、/ D/ 节点/ 被/ 缓存/ ./ 当/ 后来/ 的/ E/ 节点/ 再次/ 请求/ 内容/ o/ 时/ ,/ 会/ 从/ A/ 节点/ 得到/ 响应/ ,/ 那么/ 此时/ 在/ B/ 和/ D/ 节点/ 缓存/ 的/ 内容/ o/ 就/ 无法/ 发挥作用/ ,/ 成为/ “/ 无效/ 缓存/ ”/ ./ 可见/ ,/ 这种/ 现象/ 在/ 处处/ 缓存/ 机制/ 中/ 普遍存在/ ./ (/ 2/ )/ 同质化/ 缓存/ ./ 对于/ 非/ 协作/ 式/ 缓存/ ,/ 各个/ 节点/ 独立/ 地/ 缓存/ 和/ 替换/ 将会/ 导致/ 内容/ 的/ 分布/ 存在/ 以下/ 不合理/ :/ ①/ 各/ 节点/ 缓存/ 类似/ 的/ 内容/ ;/ ②/ 在/ 时间/ 上/ 分布/ 不合理/ ,/ 在/ 热门/ 时间/ 里/ ,/ 每个/ 节点/ 都/ 缓存/ 相同/ 的/ 内容/ ,/ 然而/ 热门/ 时间/ 一/ 过/ ,/ 该/ 内容/ 在/ 各/ 节点/ 上/ 又/ 几乎/ 同时/ 地/ 消失/ 了/ ./ 以上/ 不合理/ 将/ 导致/ 缓存/ 的/ 效率/ 不高/ ,/ 全网/ 缓存/ 的/ 潜能/ 没有/ 完全/ 发挥/ 出来/ ./ 为了/ 解决/ “/ 无效/ 缓存/ ”/ 和/ “/ 同质化/ 缓存/ ”/ 等/ 问题/ ,/ 我们/ 提出/ 了/ 选择性/ 缓存/ 机制/ SC/ (/ SelectiveCaching/ )/ ,/ 本文/ 的/ 主要/ 贡献/ 如下/ :/ (/ 1/ )/ 提出/ 一种/ 轻量级/ 的/ 改善/ 缓存/ 效率/ 的/ 机制/ :/ 节点/ 根据/ 用户/ 的/ 潜在/ 需求/ 和/ 内容/ 的/ 兴衰/ 规律/ ,/ 选择性/ 地/ 缓存/ ,/ 节点/ 之间/ 隐性/ 地/ 协作/ ,/ 避免/ “/ 无效/ 缓存/ ”/ ;/ 实现/ 冗余/ 的/ 带宽/ 换取/ 缓存/ 空间/ ;/ 同时/ 也/ 实现/ 了/ 差异化/ 缓存/ ,/ 避免/ “/ 同质化/ 缓存/ ”/ ./ (/ 2/ )/ 提出/ 了/ 一个/ 分析/ 缓存/ 空间/ 消耗/ 的/ 模型/ ./ (/ 3/ )/ 定义/ 了/ 一系列/ 适合/ CCN/ 这/ 一新/ 架构/ 的/ 性能/ 测量/ 参数/ ,/ 并/ 通过/ 广泛/ 的/ 实验/ 验证/ 了/ SC/ 的/ 优越性/ 能/ ./ 2/ 相关/ 工作/ 自/ Web/ 缓存/ 提出/ 以来/ ,/ 研究/ 主要/ 包括/ 内容/ 的/ 放置/ (/ placement/ )/ 和/ 替换/ (/ replacement/ )/ 机制/ 等/ 领域/ ./ 在/ 内容/ 的/ 替换/ 机制/ 方面/ ,/ 实现/ 方法/ 主要/ 是/ 利用/ 内容/ 被/ 请求/ 所/ 具有/ 的/ 时间/ 局域/ 性/ (/ TemporalLocality/ )/ 和/ 空间/ 局域/ 性/ (/ SpatialLocality/ )/ 来/ 尽量/ 提高/ 替换/ 的/ 准确率/ ,/ 即/ 让/ 缓存/ 能够/ 最大/ 可能/ 地/ 保留/ 用户/ 最/ 需要/ 的/ 内容/ [/ 4/ ]/ ,/ 如/ LRU/ (/ LatestRecentlyUsed/ )/ 、/ LFU/ (/ LeastFrequentlyUsed/ )/ 等/ [/ 4/ ]/ 既/ 简单/ 又/ 实用/ ./ 本文/ 只/ 研究/ Page3/ 放置/ 机制/ ,/ 下面/ 综述/ 与其/ 相关/ 的/ 研究/ 工作/ ./ 关于/ 如何/ 更好/ 地/ 将/ 内容/ 放置/ 在/ 合适/ 位置/ 的/ 问题/ ,/ Tang/ 和/ Chanson/ 等/ 人/ [/ 5/ ]/ 针对/ 线性/ 拓扑/ 进行/ 了/ 研究/ :/ 从/ client/ 发送/ 请求/ 到/ 服务器端/ 时/ ,/ 将/ 沿途/ 各/ 节点/ 的/ 信息/ 带到/ 服务器端/ ,/ 这些/ 信息/ 包括/ 目标/ 内容/ 的/ 大小/ 、/ 访问/ 频率/ 、/ 因为/ 替换/ 而/ 需要/ 付出/ 的/ 代价/ 等/ 信息/ ./ 服务器/ 根据/ 这些/ 信息/ 进行/ 计算/ ,/ 获得/ 缓存/ 节点/ 的/ 最佳/ 分布/ ,/ 目标/ 是/ 使/ 全网/ 对/ 所有/ 目标/ 内容/ 的/ 接入/ 代价/ (/ accesscost/ )/ 最小/ ./ 这个/ 计算结果/ 会/ 由/ 逆向/ 沿途/ 返回/ 的/ 数据/ 报文/ 带到/ 各个/ 节点/ ,/ 各/ 节点/ 据此/ 更新/ 自己/ 的/ 缓存/ ./ 在/ 此基础/ 上/ ,/ Li/ 和/ Shen/ 等/ 人/ [/ 6/ ]/ 进一步/ 讨论/ 了/ 树型/ 拓扑/ 网络/ 中/ 内容/ 放置/ 的/ 优化/ 问题/ ./ 而/ Shen/ 和/ Xu/ [/ 7/ ]/ 则/ 考虑/ 在/ 多/ 服务器/ 的/ 网络/ 中/ 内容/ 的/ 放置/ 问题/ ./ 显而易见/ 的/ 是/ ,/ 因为/ 采用/ 了/ 集中式/ 的/ 优化/ 计算/ ,/ 这/ 类/ 方法/ 能够/ 很/ 好/ 地/ 得到/ 合适/ 的/ 放置/ 地点/ ,/ 但/ s/ (/ o/ )/ 、/ f/ (/ o/ )/ 、/ m/ (/ o/ )/ 的/ 精确度/ 极大/ 地/ 影响/ 着/ 该/ 方法/ 的/ 效果/ ./ 而/ 实际上/ ,/ 这些/ 信息/ 并/ 不/ 容易/ 获取/ ,/ 要/ 精确/ 就/ 需要/ 额外/ 开销/ (/ 如/ 文献/ [/ 5/ ]/ 利用/ 内容/ o/ 在/ 过去/ 被/ 请求/ 的/ 历史/ 来/ 进行/ 推测/ )/ ;/ 而/ 要/ 节省/ 开销/ 则/ 会/ 以/ 降低/ 性能/ 为/ 代价/ ./ 同时/ ,/ 该类/ 方法/ 的/ 计算/ 量/ 也/ 不小/ ,/ 被/ 用到/ 的/ 动态/ 规划/ 算法/ 的/ 时间/ 复杂度/ 达到/ 了/ O/ (/ k2/ )/ ,/ k/ 是/ 沿途/ 存有/ 描述符/ 的/ 节点/ 数量/ ,/ 接近/ 于/ 沿途/ 节点/ 的/ 数量/ ./ Psaras/ 等/ 人/ [/ 8/ ]/ 提出/ 基于/ 概率/ 的/ 缓存/ 机制/ ,/ Interest/ 沿途/ 节点/ 按照/ 如下/ 原则/ 来/ 确定/ 对/ 内容/ 进行/ 缓存/ 的/ 概率/ :/ (/ 1/ )/ 节点/ 距离/ 服务器/ 越近/ ,/ 概率/ 越低/ ;/ (/ 2/ )/ 节点/ 缓存/ 资源/ 越/ 多/ ,/ 概率/ 越大/ ./ 该/ 方法/ 对/ 缓解/ “/ 同质化/ 缓存/ ”/ 有/ 一些/ 帮助/ ,/ 但/ 依然/ 无法/ 克服/ “/ 无效/ 缓存/ ”/ 的/ 问题/ ./ Hosseini/ -/ Khayat/ [/ 9/ ]/ 则/ 从/ 合适/ 地/ 选择/ 缓存/ 对象/ 的/ 角度/ 提出/ 了/ 选择性/ 缓存/ 机制/ ,/ 中心思想/ 是/ :/ 如果/ 缓存/ 一个/ 新到/ 的/ 内容/ 需要/ 替换/ 掉/ 一个/ 对/ 提升/ 系统/ 性能/ 更/ 有/ “/ 价值/ ”/ 的/ 内容/ ,/ 那么/ 就/ 没有/ 必要/ 缓存/ ./ 但/ 该/ 方法/ 中/ 的/ “/ 价值/ ”/ 依赖于/ 对/ 流行/ 度/ 指标/ T/ 的/ 判断/ ,/ 而/ 文中/ 的/ T/ 是/ 一个/ 预设/ 的/ 固定值/ ,/ 所以/ 不能/ 成为/ 一种/ 在线/ 的/ 解决方案/ ./ Miao/ 等/ 人/ [/ 10/ ]/ 则/ 针对/ 互联网/ 的/ 视频/ 应用/ ,/ 提出/ 了/ 类似/ 的/ 思想/ :/ 仅仅/ 是/ 一小部分/ 对/ 提升/ 系统/ 性能/ 有着/ 重要/ 贡献/ 的/ 帧/ 才/ 会/ 被/ 缓存/ 起来/ ./ 这种/ 缓存/ 机制/ 比较/ 适合/ 于/ 节点/ 缓存/ 容量/ 相比/ 于/ 每个/ 被/ 缓存/ 的/ 对象/ 比较/ 小/ 的/ 情况/ ,/ 即当/ 节点/ 的/ 缓存/ 容量/ 只/ 够/ 缓存/ 热门/ 视频/ 内容/ 时/ ,/ 该/ 机制/ 是/ 有效/ 的/ ./ 而/ 当/ 节点/ 的/ 缓存/ 容量/ 相比/ 于/ 被/ 缓存/ 的/ 对象/ 很大/ 时/ ,/ 根据/ 缓存/ 的/ 时间/ 局域/ 性/ ,/ 要/ 被/ 替换/ 掉/ 的/ 内容/ ,/ 往往/ 是/ 长时间/ 没有/ 被/ 击中/ 的/ 不/ 热门/ 的/ 内容/ ,/ 因而是/ 对系统/ 性能/ 影响/ 较/ 小/ 的/ 内容/ ./ 与/ 上述/ 不同/ 的/ 是/ ,/ Lauinger/ 等/ 人/ [/ 11/ ]/ 利用/ 选择性/ 缓存/ 机制/ 来/ 实现/ ICN/ 中/ 的/ 隐私/ 保护/ ./ 刘外/ 喜/ 等/ 人/ [/ 12/ ]/ 提出/ 了/ 把/ 内容/ 的/ 放置/ 、/ 发现/ 、/ 替换/ 统一/ 起来/ 考虑/ 的/ APDR/ 机制/ ,/ 实现/ 内容/ 的/ 有序/ 缓存/ ./ APDR/ 的/ 主要/ 思想/ 是/ :/ Interest/ 报文/ 除了/ 携带/ 对/ 内容/ 的/ 请求/ ,/ 还/ 收集/ 沿途/ 各/ 节点/ 对/ 该/ 内容/ 的/ 潜在/ 需求/ 、/ 空闲/ 缓存/ 等/ 信息/ ,/ 使得/ Interest/ 的/ 汇聚/ 点/ 和/ 目的地/ 节点/ ,/ 可以/ 据此/ 计算/ 出/ 一个/ 缓存/ 方案/ ,/ 并/ 把/ 该/ 方案/ 附加/ 在/ Data/ 报文/ 之上/ ,/ 通知/ 返程/ 途中/ 的/ 某些/ 节点/ 缓存/ 该/ 内容/ 并/ 设置/ 指定/ 的/ 缓存/ 时间/ ./ Cho/ 等/ 人/ [/ 13/ ]/ 提出/ WAVE/ 机制/ :/ 上游/ 节点/ 利用/ CMW/ (/ ChunkMarkingWindow/ ,/ 块/ 标记/ 窗口/ )/ 给/ 下游/ 节点/ 提供/ 缓存/ 建议/ ,/ CMW/ 会/ 随着/ 内容/ 的/ 流行/ 程度/ 而成/ 指数/ 增长/ ,/ 从而/ 使得/ 越/ 流行/ 的/ 内容/ 分布/ 越广/ ,/ 主要/ 是/ 实现/ 一个/ 文件/ 多个/ 分块/ 在/ 网络/ 上/ 的/ 合理/ 分布/ ./ 该/ 方法/ 中/ 在/ 上下游/ 节点/ 之间/ 传递/ 的/ 缓存/ 建议/ 将/ 是/ 一个/ 不小/ 的/ 开销/ ,/ 并且/ 随着/ 文件/ 被/ 划分/ 块/ 的/ 数目/ 的/ 增加/ 而/ 增加/ ./ Fiore/ 等/ 人/ [/ 14/ ]/ 提出/ 了/ “/ Hamlet/ ”/ 算法/ :/ 利用/ 无线/ 信道/ 的/ 广播/ 特性/ ,/ 节点/ n/ 偷听/ 到/ 某/ 一个/ 节点/ m/ 在/ 请求/ 内容/ r/ ,/ 那么/ n/ 就/ 认为/ m/ 自此以后/ 会/ 缓存/ 该/ 内容/ r/ ;/ 或者/ 节点/ n/ 偷听/ 到/ 某/ 一个/ 节点/ p/ 回应/ 了/ 内容/ r/ 的/ 请求/ ,/ 那么/ n/ 就/ 认为/ p/ 拥有/ 内容/ r/ ./ 知道/ 了/ 周围/ 节点/ 缓存/ 什么/ 内容/ 后/ ,/ 自己/ 在/ 做/ 替换/ 决定/ 的/ 时候/ 就/ 要求/ 自己/ 和/ 周围/ 节点/ 的/ 缓存/ 内容/ 区别/ 开来/ [/ 15/ ]/ ./ 该文/ 虽然/ 实现/ 了/ 差异化/ 缓存/ ,/ 但/ 可以/ 看出/ ,/ 偷听/ 信息/ 是/ 这种/ 方法/ 的/ 实现/ 基础/ ,/ 所以/ 不/ 可靠/ ,/ 具有/ 随机/ 的/ 波动性/ ./ Rosensweig/ 等/ 人/ [/ 16/ ]/ 提出/ Breadcrumbs/ 算法/ :/ 每个/ 节点/ 记住/ 目标/ 内容/ 被/ 转发/ 与/ 缓存/ 的/ 历史/ ,/ 方法/ 是/ 记住/ 该/ 目标/ 内容/ 的/ 五元/ 组/ (/ 5/ -/ tupleentry/ )/ ./ 五元/ 组/ 包括/ :/ 目标/ 内容/ 的/ 上游/ 节点/ 号/ 、/ 目标/ 内容/ 的/ 下游/ 节点/ 号/ 、/ 目标/ 内容/ 经过/ 该/ 节点/ 的/ 最近/ 的/ 时间/ 、/ 目标/ 内容/ 在/ 该/ 节点/ 被/ 请求/ 的/ 最近/ 的/ 时间/ 等/ ./ 利用/ 这些/ 信息/ 就/ 可以/ 分析/ 出/ 目标/ 内容/ 在/ 网络/ 中/ 的/ 缓存/ 情况/ ,/ 将/ 内容/ 的/ 放置/ 、/ 内容/ 的/ 路由/ 等/ 集成/ 在/ 一起/ ./ 但/ Breadcrumbs/ 有/ 可能/ 会/ 出现/ 循环/ 路由/ ,/ 并且/ 记住/ 每个/ 内容/ 历史/ 的/ 开销/ 也/ 不小/ ./ Carofiglio/ 和/ Muscariello/ 等/ 人/ [/ 17/ ]/ 也/ 针对/ 带宽/ 与/ 缓存/ 联合/ 优化/ 问题/ 进行/ 了/ 研究/ ,/ 假设/ 用户/ 请求/ 到达/ 过程/ 遵循/ 马尔可夫/ 过程/ ,/ 并/ 已知/ 网络拓扑/ 和/ 内容/ 流行/ 度/ 分布/ 等/ 先验/ 知识/ ,/ 在/ 网络资源/ (/ 缓存/ 容量/ 、/ 带宽/ )/ 总量/ 一定/ 的/ 前提/ 下/ ,/ 如何/ 合理/ 地/ 在/ 节点/ 之间/ 分配/ 他们/ ,/ 使得/ 用户/ 获取/ 内容/ 的/ 时间/ 最短/ ./ 但/ 该文/ 仅仅/ 可/ 看作/ 是/ 一个/ 静态/ 的/ 网络/ 的/ 规划/ ,/ 是/ 一个/ 资源分配/ 的/ 优化/ 问题/ ,/ 不能/ 用作/ 实时/ 动态/ 的/ 缓存/ 机制/ ./ Page4/ 叶润生/ 等/ 人/ [/ 18/ ]/ 将/ 缓存/ 的/ 信息/ 引入/ 到/ 路由/ 决策/ 中/ ,/ 提出/ 了/ 邻居/ 缓存/ 路由/ 机制/ ,/ 在/ 减少/ 网络/ 冗余/ 流量/ 的/ 同时/ 提高/ 了/ 整体/ 网络/ 的/ 性能/ ,/ 但/ 该/ 方法/ 的/ 主动/ 探测/ 机制/ 需要/ 付出/ 一些/ 额外/ 的/ 通信/ 开销/ ./ 针对/ 分布式/ 缓存/ 系统/ 中/ 如何/ 优化/ 内容/ 的/ 放置/ 位置/ ,/ 使/ 访问/ 开销/ 最小化/ ,/ 李/ 文中/ 等/ 人/ [/ 19/ ]/ 提出/ 一种/ 图/ 算法/ 来/ 解决/ 该/ 问题/ ,/ 但/ 该/ 方法/ 假设/ 已知/ 各/ 节点/ 上/ 用户/ 的/ 需求/ 以及/ 替换/ 开销/ ,/ 只能/ 看作/ 是/ 一个/ 静态/ 的/ 规划/ 方法/ ./ 李春洪/ 等/ 人/ [/ 20/ ]/ 针对/ 多媒体/ 内容/ 分发/ 服务/ 中/ 节点/ 负载/ 不/ 平衡/ 的/ 问题/ ,/ 设计/ 了/ 一种/ 无/ 热点/ 的/ 覆盖网/ 协同/ 缓存/ 机制/ —/ —/ —/ HFOCC/ (/ HotspotsFreeOverlayCooperativeCaching/ )/ ./ 通过/ 将/ “/ 热点/ ”/ 对象/ 复制到/ 低/ 负载/ 节点/ ,/ 分散/ 服务/ 请求/ ,/ 达到/ 消除/ 热点/ 的/ 目的/ ./ 该文/ 采用/ 一种/ “/ 软/ ”/ 副本/ 生命期/ 控制/ 机制/ ,/ 当/ 工作/ 负载/ 发生变化/ 时/ ,/ 冗余/ 副本/ 被/ 及时/ 删除/ ./ 该文/ 从/ 平衡/ 负载/ 的/ 角度/ 考虑/ 缓存/ 的/ 优化/ 放置/ 问题/ ,/ 实际上/ 是/ 一种/ 基于/ 推送/ 的/ 机制/ ,/ 牺牲/ 少量/ 的/ 命中率/ 换取/ 吞吐/ 率/ 和/ 资源/ 利用率/ ./ 节点/ 需要/ 记录/ 每个/ 内容/ 在/ 网络/ 中/ 所有/ 的/ 位置/ 以便/ 于/ 查询/ ,/ 在/ 内容/ 比较/ 多时/ ,/ 查询/ 速度/ 以及/ 建立/ 该/ 记录/ 所/ 需要/ 的/ 通信/ 开销/ ,/ 都/ 是/ 需要/ 考虑/ 的/ 问题/ ./ Liu/ 等/ 人/ [/ 21/ ]/ 为/ CCN/ 中/ 缓存/ 效率/ 的/ 分析/ 建立/ 理论/ 模型/ ,/ 并/ 证明/ 利用网络/ 编码/ 可以/ 改善/ CCN/ 的/ 缓存/ 效率/ ./ 与/ 上述/ 工作/ 不同/ 的/ 是/ ,/ 本文/ 采用/ 的/ 是/ 按/ 需/ 缓存/ 的/ 思想/ :/ 只/ 缓存/ 在/ 那些/ 有/ 潜在/ 需求/ 的/ 节点/ 上/ ./ 同时/ ,/ 我们/ 在/ 缓存/ 机制/ 中/ 用/ 带宽/ 换取/ 缓存/ ,/ 进一步提高/ 缓存/ 效率/ ./ SC/ 机制/ 也/ 考虑/ 到/ 了/ 内容/ 兴衰/ 的/ 规律/ ,/ 使/ 缓存/ 该/ 内容/ 的/ 节点/ 在/ 空间/ 上/ 的/ 分布/ 更加/ 符合/ 需求/ ./ 而且/ ,/ SC/ 非常简单/ ,/ 不/ 需要/ 复杂/ 的/ 计算/ ,/ 因而/ 对/ 节点/ 计算资源/ 的/ 开销/ 很小/ ./ 3CCN/ 的/ 基本/ 机制/ 在/ 本节/ ,/ 我们/ 将/ 综述/ CCN/ 的/ 一些/ 重要/ 内容/ ,/ 有关/ CCN/ 更加/ 详细/ 的/ 内容/ 请/ 参考文献/ [/ 2/ ]/ ./ CCN/ 架构/ 有/ 两个/ 特点/ :/ 通信/ 是/ 由/ 接收者/ (/ 也/ 就是/ 内容/ 的/ 需求者/ )/ 发起/ ;/ 缓存/ 是/ 全网/ 所有/ 节点/ 的/ 必备/ 功能/ ./ CCN/ 有/ 两类/ 报文/ :/ 兴趣/ (/ Interest/ )/ 和/ 数据/ (/ Data/ )/ 报文/ ./ 为了/ 获得/ 一个/ 内容/ ,/ 需求者/ 发出/ 一个/ 带有/ 内容/ 名字/ 的/ Interest/ ,/ Interest/ 不断/ 地/ 在/ 网络/ 中/ 被/ 转发/ ,/ 直到/ 有/ 中间/ 节点/ 的/ 缓存/ 或/ 内容/ 服务器/ 对/ 其/ 响应/ ,/ 然后/ ,/ 数据/ 报文/ 会/ 沿着/ Interest/ 报文/ 走过/ 的/ 路径/ 逆向/ 回到/ 数据/ 需求者/ ,/ 在/ 本文/ 中/ ,/ 我们/ 称/ 这/ 一/ 路径/ 为/ Interest/ 路径/ ./ 由于/ CCN/ 中/ 的/ 节点/ 并/ 没有/ 地址/ 标识/ ,/ 所以/ 整个/ 过程/ 的/ 路由/ 都/ 是/ 基于/ 内容/ 名字/ 的/ ./ 同时/ 为了/ 加强/ 网络/ 的/ 安全/ ,/ 在/ 整个/ 转发/ 过程/ 中/ ,/ 每个/ 数据/ 报文/ 总是/ 和/ 内容/ 产生/ 者/ 的/ 签名/ 信息/ 绑定/ 在/ 一起/ 的/ ,/ 这样/ 中间/ 节点/ 和/ 内容/ 需求者/ 都/ 可以/ 对/ 其/ 进行/ 验证/ [/ 3/ ]/ ./ 在/ CCN/ 中/ ,/ 为了/ 实现/ 内容/ 的/ 路由/ 和/ 转发/ ,/ 每个/ 路由器/ 会/ 有/ 3/ 个/ 功能模块/ :/ FIB/ (/ ForwardingInfor/ -/ mationBase/ )/ 、/ PIT/ (/ PendingInterestTable/ )/ 和/ CS/ (/ ContentStore/ )/ [/ 2/ ]/ ./ 其中/ ,/ FIB/ 和/ TCP/ // IP/ 架构/ 中/ 路由器/ 的/ 转/ 发表/ 的/ 功能/ 基本/ 类似/ ,/ 但/ 它/ 允许/ 匹配/ 多个/ 端口/ 进行/ 转发/ ./ 4SC/ 的/ 运行机制/ 在/ 我们/ 的/ 系统/ 模型/ 中/ ,/ 网络/ 是/ 由/ 原始/ 内容/ 服务器/ (/ OriginalContentServers/ ,/ OCS/ )/ 和/ 一些/ 配置/ 了/ 缓存/ 的/ 路由器/ 节点/ 以及/ 一些/ 用户/ 组成/ ./ 其中/ 只有/ OCS/ 会/ 产生/ 内容/ ,/ 并且/ 会/ 保存/ 该/ 内容/ 直到/ 其/ 过期/ ./ 我们/ 将/ 整个/ 网络/ 记为/ G/ (/ V/ ,/ E/ )/ ,/ 其中/ 所有/ 节点/ 的/ 集合/ 记为/ V/ ,/ 所有/ 链路/ 的/ 集合/ 记为/ E/ ./ 为了/ 简单/ 起/ 见/ ,/ 假定/ 在/ 内容/ 传输/ 的/ 路径/ 上/ ,/ 节点/ i/ -/ 1/ 在/ 节点/ i/ 的/ 下游/ (/ 即/ 更/ 靠近/ 请求者/ 那/ 一边/ )/ ./ 本文/ 不/ 考虑/ 泛洪/ 路由/ 的/ 情况/ ,/ 即/ 节点/ 在/ 收到/ Interest/ 时/ ,/ 只会/ 根据/ 路由/ 协议/ 选择/ 一个/ 下/ 一/ 跳/ ,/ 而/ 不会/ 向/ 所有/ 的/ 端口/ 广播/ ./ 4.1/ SC/ 的/ 基本原理/ SC/ 的/ 基本/ 思想/ 是/ 基于/ 以下/ 考虑/ :/ 对于/ 内容/ o/ ,/ 节点/ i/ 上/ 的/ 某个/ 端口/ 如果/ 曾经/ 收到/ 过/ 对/ 该/ 内容/ 的/ 请求/ ,/ 并且/ 已经/ 把/ 内容/ o/ 从/ 这个/ 端口/ 转发/ 出去/ ,/ 因为/ 下游/ 节点/ 缓存/ 的/ 存在/ ,/ 那么/ 在/ 未来/ 一段时间/ 内/ 不会/ 再次/ 从/ 这个/ 端口/ 收到/ 对/ 该/ 内容/ 的/ 请求/ ./ 所以/ ,/ 当/ 节点/ i/ 的/ 所有/ 端口/ 都/ 请求/ 过/ 内容/ o/ 并/ 被/ 满足/ 以后/ ,/ 节点/ i/ 则/ 没有/ 必要/ 缓存/ 内容/ o/ ./ 因此/ ,/ 节点/ i/ 上/ 没有/ 请求/ 过/ 内容/ o/ 的/ 端口/ 数量/ 越/ 少/ ,/ 那么/ 未来/ 一段时间/ 内/ 节点/ i/ 收到/ 对/ 内容/ o/ 的/ 请求/ 的/ 概率/ 就/ 会/ 越/ 低/ ,/ 则/ 节点/ i/ 需要/ 缓存/ 内容/ o/ 的/ 概率/ 就/ 可以/ 越低/ ,/ 节点/ i/ 上/ 因此/ 而/ 腾出/ 的/ 空间/ 就/ 可以/ 用于/ 缓存/ 其它/ 内容/ ./ 节点/ 之间/ 的/ 这种/ 差异化/ 缓存/ 可以/ 提升/ 缓存/ 的/ 效率/ ,/ 可以/ 尽可能/ 地/ 将/ 内容/ 缓存/ 于/ 靠近/ 用户/ 的/ 边缘/ 节点/ ,/ 实现/ 隐性/ 协作/ 缓存/ ./ 研究/ 表明/ ,/ 任何/ 内容/ 在/ 一定/ 的/ 空间/ 区域/ 内/ ,/ 其/ 受欢迎/ 程度/ 在/ 时间/ 维度/ 上/ 都/ 会/ 经历/ 从/ 上升/ 、/ 流行/ 高峰/ 到/ 最后/ 衰减/ 的/ 过程/ ./ 通过/ 聚类分析/ ,/ 可以/ 找到/ 这个/ 过/ Page5/ 程/ 的/ 规律/ [/ 22/ ]/ ,/ 甚至/ 可/ 预测/ 内容/ 未来/ 一段时间/ 的/ 流行/ 度/ [/ 23/ ]/ ./ 我们/ 称/ 流行/ 高峰/ 及其/ 之前/ 的/ 时期/ 为/ 传播/ 早期/ ,/ 其它/ 为/ 传播/ 晚期/ ./ 显然/ ,/ 在/ 内容/ o/ 传播/ 的/ 不同/ 时期/ ,/ 用户/ 的/ 需求/ 不/ 一样/ :/ 在/ 早期/ ,/ 需求/ 会/ 多一些/ ,/ 并且/ 呈上升/ 趋势/ ;/ 在/ 晚期/ ,/ 需求/ 会少/ 一些/ ,/ 并且/ 呈/ 下降/ 趋势/ ./ 所以/ ,/ 缓存/ 内容/ o/ 的/ 节点/ 数量/ 在/ 不同/ 的/ 时期/ 应该/ 有所区别/ ,/ 我们/ 总体/ 的/ 原则/ 是/ :/ 早期/ 多于/ 晚期/ ./ 那么/ 相应/ 地/ ,/ 节点/ i/ 缓存/ 内容/ o/ 的/ 概率/ ,/ 也/ 是/ 早期/ 高于/ 晚期/ ./ 4.1/ ./ 1/ 传播/ 早期/ 时/ 的/ SC/ 在/ 传播/ 早期/ ,/ 为了/ 进一步提高/ 系统/ 的/ 整体/ 缓存/ 效率/ ,/ SC/ 中/ 还/ 嵌入/ 带宽/ 换/ 缓存/ 的/ 思想/ :/ 当/ 两个/ 节点/ 之间/ 的/ 带宽/ 宽裕/ 时/ ,/ 可以/ 将/ 内容/ 有意/ 地/ 缓存/ 在/ 远/ 一点/ 的/ 、/ 缓存/ 容量/ 大/ 一些/ 的/ 节点/ 上/ ./ 具体/ 策略/ 如下/ :/ (/ 1/ )/ 在/ 内容/ 传输/ 的/ Interest/ 路径/ 上/ ,/ 节点/ i/ 与其/ 下游/ i/ -/ 1/ 之间/ 的/ 链路/ 利用率/ 越小/ ,/ 节点/ i/ 缓存/ 该/ 内容/ 的/ 概率/ 越小/ ,/ 即/ 下游/ 节点/ i/ -/ 1/ 缓存/ 该/ 内容/ 的/ 概率/ 越高/ ./ (/ 2/ )/ 在/ 内容/ 传输/ 的/ Interest/ 路径/ 上/ ,/ 节点/ i/ 的/ 缓存/ 容量/ 越大/ ,/ 节点/ i/ 缓存/ 该/ 内容/ 的/ 概率/ 越大/ ./ 为了/ 实现/ 上述/ 策略/ ,/ 把/ 式/ (/ 1/ )/ 定义/ 的/ pi/ (/ o/ )/ 作为/ 节点/ i/ 缓存/ 内容/ o/ 的/ 概率/ :/ 其中/ ,/ ci/ 表示/ 节点/ i/ 的/ 缓存/ 容量/ 大小/ ;/ ui/ 是/ 在/ 内容/ 传输/ 的/ Interest/ 路径/ 上/ 节点/ i/ 与其/ 下游/ 节点/ i/ -/ 1/ 之间/ 的/ 链路/ 利用率/ ,/ 0/ / ui/ </ 1/ ./ 在/ 带宽/ 换/ 缓存/ 的/ 过程/ 中/ ,/ 需要/ 上下游/ 节点/ 的/ 配合/ :/ 我们/ 用/ ai/ (/ o/ )/ 表示/ 节点/ i/ +/ 1/ 对/ 节点/ i/ 的/ 缓存/ 请求/ ,/ 即/ ai/ (/ o/ )/ =/ 0/ 表示/ 节点/ i/ +/ 1/ 缓存/ 内容/ o/ ,/ 它/ 对/ 节点/ i/ 没有/ 要求/ ,/ 节点/ i/ 可以/ 自主/ 决定/ 是否/ 缓存/ 内容/ o/ ;/ ai/ (/ o/ )/ =/ 1/ 表示/ 节点/ i/ +/ 1/ 不/ 缓存/ 内容/ o/ 而/ 要求/ 节点/ i/ 必须/ 缓存/ 内容/ o/ ./ 这样/ 做/ 的/ 目的/ 是/ ,/ 当/ 节点/ i/ +/ 1/ 不/ 缓存/ 内容/ o/ 时/ ,/ 它/ 可以/ 利用/ 冗余/ 的/ 链路/ 带宽/ ,/ 随时/ 从/ 相邻/ 节点/ i/ 那里/ 获取/ 内容/ o/ ,/ 以/ 满足用户/ 对/ 内容/ o/ 的/ 请求/ ./ 在/ 上述/ 协作/ 策略/ 中/ ,/ 每个/ 节点/ 只会/ 向/ 其/ 相邻/ 的/ 下游/ 节点/ 寻求/ 协作/ ,/ 而/ 不是/ 向/ 上游/ 节点/ 寻求/ 协作/ ,/ 这样/ 做/ 的/ 原因/ 是/ ,/ 上游/ 节点/ 的/ 缓存/ 负载/ 更大/ 一些/ ,/ 应该/ 减轻/ 其/ 负载/ ;/ 而/ 下游/ 节点/ 更/ 靠近/ 用户端/ ,/ 其/ 缓存/ 更/ 有利于/ 改善/ 对/ 用户/ 请求/ 的/ 响应/ 时间/ ./ 4.1/ ./ 2/ 传播/ 晚期/ 时/ 的/ SC/ 当/ 内容/ o/ 在/ 节点/ i/ 处于/ 传播/ 晚期/ 时/ ,/ 我们/ 用/ qi/ (/ o/ ,/ t/ )/ (/ qi/ (/ o/ ,/ t/ )/ </ 1/ )/ 表示/ 内容/ o/ 在/ 节点/ i/ 被/ 缓存/ 的/ 概率/ ,/ 定义/ 如下/ :/ 其中/ ,/ ni/ 表示/ 节点/ i/ 的/ 端口/ 总数/ ;/ mi/ (/ o/ )/ 表示/ 节点/ i/ 在/ 收到/ 内容/ o/ 之前/ 收到/ 过/ 对/ 内容/ o/ 的/ 请求/ 的/ 端口/ 数量/ ./ θ/ (/ t/ )/ (/ θ/ (/ t/ )/ </ 1/ )/ 是/ 调节/ 因子/ ,/ 根据/ 网络/ 中/ 内容/ 需求/ 的/ 状况/ 调节/ qi/ (/ o/ ,/ t/ )/ 的/ 大小/ ./ 在/ 传播/ 晚期/ ,/ 时间/ 越往后/ ,/ 需求/ 越/ 少/ ,/ 所以/ θ/ (/ t/ )/ 应该/ 随/ 时间/ 衰减/ ./ 根据/ 文献/ [/ 22/ ]/ 中/ 的/ 研究/ 结果/ ,/ 内容/ 在/ 时间/ 上/ 的/ 兴衰/ 过程/ 可以/ 被/ 聚类/ 为/ 6/ 类/ ,/ 对于/ 常见/ 的/ 一类/ 内容/ 的/ 衰减模型/ 可以/ 用式/ (/ 3/ )/ 来/ 表示/ ,/ τ/ =/ 0.2/ ,/ θ/ 0/ =/ 0.8/ ,/ C/ =/ 0/ ./ 为了/ 实现/ 上述/ 关于/ 内容/ 在/ 传播/ 早/ 、/ 晚期/ 以/ 不同/ 的/ 、/ 合理/ 的/ 概率/ 被/ 缓存/ 的/ 思想/ ,/ 用/ ri/ (/ o/ )/ 记录/ 内容/ o/ 在/ 节点/ i/ 被/ 请求/ 的/ 历史/ ,/ 用以/ 推断/ 该/ 内容/ 处于/ 传播/ 早期/ 还是/ 晚期/ ./ ri/ (/ o/ )/ =/ 0/ 是/ 初始状态/ ,/ 表示/ 节点/ i/ 从/ 其/ 任意/ 一个/ 接口/ 最/ 多只/ 收到/ 过/ 一次/ 对/ 内容/ o/ 的/ 请求/ ./ 在/ 节点/ i/ 向/ 收到/ 过/ 内容/ o/ 请求/ 的/ 接口/ 转发/ 内容/ o/ 之后/ ,/ 由于/ 下游/ 节点/ 的/ 缓存/ 作用/ ,/ 在/ 未来/ 一段时间/ 内/ 不会/ 再/ 从/ 该/ 接口/ 收到/ 对/ 该/ 内容/ 的/ 新/ 请求/ ./ 所以/ ,/ ri/ (/ o/ )/ =/ 0/ 表示/ 内容/ 处于/ 传播/ 的/ 早期/ ./ ri/ (/ o/ )/ =/ 1/ 表示/ 节点/ i/ 从/ 曾经/ 转发/ 过/ 内容/ o/ 的/ 任意/ 一个/ 接口/ 再次/ 收到/ 对/ 内容/ o/ 的/ 请求/ ./ 这/ 说明/ 内容/ o/ 在/ 这个/ 接口/ 下游/ 已经/ 很/ 长时间/ 没有/ 被/ 请求/ ,/ 从而/ 导致/ 其/ 在/ 下游/ 节点/ 的/ 缓存/ 中/ 已经/ 没有/ 了/ ./ 所以/ ,/ ri/ (/ o/ )/ =/ 1/ 表示/ 内容/ o/ 处于/ 传播/ 的/ 晚期/ ./ 所以/ ,/ 我们/ 把/ 节点/ i/ 从/ 曾经/ 转发/ 过/ 内容/ o/ 的/ 任意/ 一个/ 接口/ 再次/ 收到/ 对/ 内容/ o/ 的/ 请求/ 的/ 时刻/ ,/ 作为/ θ/ (/ t/ )/ 衰减/ 的/ 起点/ 时间/ (/ t/ =/ 0/ )/ ./ 关于/ 传播/ 早期/ 和/ 晚期/ 模型/ ,/ 我们/ 将会/ 在/ 6.2/ 节/ 更/ 详细/ 地/ 讨论/ ./ 4.2/ SC/ 的/ 主要/ 算法/ 算法/ 1/ 给出/ 了/ 节点/ i/ 实现/ 选择性/ 缓存/ 机制/ 的/ 伪/ 代码/ ./ 第/ 1/ 行/ ,/ 初始化/ ,/ 获取/ 上游/ 节点/ 带来/ 的/ 参数/ ,/ 如/ ai/ (/ o/ )/ ;/ 计算/ mi/ (/ o/ )/ ./ ai/ (/ o/ )/ 是/ 节点/ i/ 是否/ 需要/ 帮助/ 其/ 上游/ 节点/ 的/ 标记/ ./ 我们/ 在/ 初始化/ 时/ ,/ 所有/ 节点/ 的/ a/ (/ o/ )/ 都/ 置/ 为/ 零/ ./ 即/ 每个/ 节点/ 在/ 默认/ 情况/ 下/ 是/ 不/ 需要/ 帮助/ 上游/ 节点/ 的/ ,/ 可以/ 独立/ 地/ 根据/ 算法/ 确定/ 缓存/ 的/ 概率/ ./ 第/ 2/ ~/ 17/ 行/ ,/ ai/ (/ o/ )/ =/ 0/ 表示/ 节点/ i/ 要/ 根据/ 算法/ 1/ 进行/ 选择性/ 地/ 缓存/ ./ 第/ 3/ ~/ 11/ 行/ ,/ 在/ 内容/ 传播/ 的/ 早期/ ,/ 为/ 满足用户/ 的/ 潜在/ 需求/ ,/ 内容/ 需要/ 被/ 缓存/ 在/ 多个/ 节点/ ,/ 因此/ 以较/ 高/ 的/ 概率/ 在/ 节点/ i/ 或/ 相邻/ 节点/ 中/ 缓存/ ./ Page6/ 算法/ 1/ ./ 选择性/ 缓存/ 算法/ ./ 1/ ./ 初始化/ ;/ 2/ ./ IF/ (/ ai/ (/ o/ )/ =/ 0/ )/ 3/ ./ IF/ (/ ri/ (/ o/ )/ =/ 0/ )/ 4/ ./ Case1/ :/ ni/ -/ 1/ >/ mi/ (/ o/ )/ ,/ 5/ ./ Case2/ :/ ni/ -/ 1/ =/ mi/ (/ o/ )/ ,/ 6/ ./ IF/ (/ ni/ =/ 2/ )/ 7.8/ ./ ELSE9/ ./ 10/ ./ EndIF11/ ./ Case3/ :/ ni/ -/ 1/ </ mi/ (/ o/ )/ ,/ 节点/ i/ 不/ 做/ 缓存/ 处理/ ./ 12/ ./ ElseIF/ (/ ri/ (/ o/ )/ =/ 1/ )/ 13/ ./ Case1/ :/ ni/ -/ 1/ >/ mi/ (/ o/ )/ ,/ 14/ ./ 节点/ i/ 以/ 概率/ qi/ (/ o/ ,/ t/ )/ 缓存/ 内容/ o/ ;/ 15/ ./ Case2/ :/ ni/ -/ 1/ =/ mi/ (/ o/ )/ ,/ 节点/ i/ 不/ 缓存/ 内容/ o/ ;/ 16/ ./ Case3/ :/ ni/ -/ 1/ </ mi/ (/ o/ )/ ,/ 节点/ i/ 不/ 做/ 缓存/ 处理/ ./ 17/ ./ EndIF18/ ./ ElseIF/ (/ ai/ (/ o/ )/ =/ 1/ )/ ,/ 节点/ i/ 必须/ 缓存/ 内容/ o/ ;/ 19/ ./ EndIF/ 第/ 4/ 行/ ,/ ni/ -/ 1/ >/ mi/ (/ o/ )/ 说明/ 节点/ i/ 还有/ 一部分/ 端口/ 没有/ 请求/ 过/ 内容/ o/ ,/ 其/ 下游/ 用户/ 对/ 内容/ o/ 有/ 潜在/ 的/ 需求/ ./ 所以/ ,/ 内容/ o/ 需要/ 在/ 节点/ i/ 和/ i/ -/ 1/ 中/ 被/ 100/ %/ 地/ 缓存/ ,/ 要么/ 在/ 节点/ i/ (/ 以/ 概率/ pi/ (/ o/ )/ )/ ,/ 要么/ 在/ 节点/ i/ -/ 1/ (/ 以/ 概率/ 1/ -/ pi/ (/ o/ )/ )/ ./ 同时/ ,/ 这里/ 也/ 体现/ 了/ 带宽/ 换/ 缓存/ 的/ 思想/ :/ 当/ 节点/ i/ 缓存/ 较/ 小/ ,/ 而/ 同时/ ui/ 也/ 较/ 小/ 的/ 时候/ ,/ 那么/ 在/ 节点/ i/ 缓存/ 的/ 概率/ 较/ 低/ ./ 也就是说/ ,/ 把/ 本来/ 应该/ 在/ 节点/ i/ 缓存/ 的/ 内容/ 放到/ 节点/ i/ -/ 1/ 缓存/ ,/ 即/ 故意/ 让/ Interest/ 跑/ 远/ 一点/ 的/ 路途/ ./ 因为/ 两个/ 节点/ 之间/ 的/ 带宽/ 充裕/ ,/ 所以/ 这样/ 做/ 不会/ 影响/ 用户/ 的/ 接入/ 代价/ ,/ 但/ 却/ 可以/ 充分/ 地/ 利用/ 节点/ i/ -/ 1/ 的/ 缓存/ 空间/ ,/ 用/ 带宽/ 换取/ 缓存/ 的/ 策略/ 得以/ 实现/ ./ 条件/ ni/ -/ 1/ >/ mi/ (/ o/ )/ 中减/ 1/ 的/ 原因/ 是/ :/ 由于/ 本文/ 采用/ 非/ 泛洪/ 路由/ ,/ 有/ 一个/ 端口/ 是/ 去往/ 上游/ 的/ ,/ 不/ 计入/ 到/ Interest/ 来源/ 端口/ ./ 文中/ 其它/ 地方/ 减/ 1/ 的/ 原因/ 都/ 类似/ ,/ 限于/ 空间/ ,/ 不再/ 赘述/ ./ 第/ 5/ ~/ 10/ 行/ ,/ ni/ -/ 1/ =/ mi/ (/ o/ )/ 说明/ 在/ 未来/ 一段时间/ 内/ ,/ 下游/ 节点/ 向/ 节点/ i/ 请求/ 内容/ o/ 的/ 概率/ 很/ 低/ ./ 所以/ 不/ 需要/ 缓存/ 该/ 内容/ ,/ 以/ 腾出/ 空间/ 缓存/ 其它/ 内容/ (/ 第/ 9/ 行/ )/ ./ 但是/ ,/ 存在/ ni/ =/ 2/ 的/ 特殊/ 情况/ (/ 第/ 6/ ~/ 7/ 行/ )/ ,/ 此时/ ,/ 如果/ 按照/ 上述/ 原则/ ,/ 这种/ 节点/ 将/ 永远/ 不会/ 缓存/ 任何/ 内容/ ,/ 缓存/ 空间/ 白白地/ 浪费/ 了/ ./ 所以/ 此时/ 可以/ 按/ 概率/ v/ (/ v/ </ 1/ )/ 缓存/ 内容/ o/ ,/ 本文/ 中/ v/ =/ 0.5/ ./ 第/ 11/ 行/ ,/ 实际上/ 等效于/ :/ ni/ =/ mi/ (/ o/ )/ ,/ 即/ 所有/ 端口/ 都/ 有/ 请求/ ,/ 说明/ 节点/ i/ 已经/ 缓存/ 了/ 内容/ o/ ;/ 或者/ 是/ 内容/ o/ 的/ 服务器/ ,/ 所以/ 不/ 做/ 任何/ 处理/ ./ 第/ 12/ ~/ 17/ 行/ ,/ 内容/ o/ 在/ 节点/ i/ 不是/ 第一次/ 被/ 请求/ ,/ 处于/ 内容/ 传播/ 的/ 晚期/ ,/ 内容/ 不/ 需要/ 被/ 缓存/ 在/ 太/ 多/ 的/ 节点/ ./ 所以/ 以较/ 低/ 的/ 概率/ 在/ 节点/ i/ 缓存/ ,/ 也/ 不/ 需要/ 节点/ i/ -/ 1/ 的/ 协作/ ./ 第/ 13/ ~/ 14/ 行/ ,/ ni/ -/ 1/ >/ mi/ (/ o/ )/ 说明/ 节点/ i/ 还有/ 一部分/ 端口/ 没有/ 请求/ 过/ 内容/ o/ ./ 但/ 此时/ ,/ 处于/ 内容/ 传播/ 的/ 晚期/ ,/ 很多/ 节点/ 会/ 满足/ 这个/ 条件/ ,/ 因此/ 以较/ 低/ 概率/ qi/ (/ o/ ,/ t/ )/ (/ qi/ (/ o/ ,/ t/ )/ </ 1/ )/ 在/ 节点/ i/ 中/ 缓存/ ./ 第/ 15/ 行/ ,/ 节点/ i/ 不/ 缓存/ 内容/ o/ ,/ 原因/ 同/ 第/ 9/ 行/ ./ 第/ 16/ 行/ ,/ 节点/ i/ 不/ 做/ 任何/ 处理/ ,/ 原因/ 同/ 第/ 11/ 行/ ./ 第/ 18/ 行/ ,/ ai/ (/ o/ )/ =/ 1/ 表示/ 上游/ 节点/ 没有/ 缓存/ 内容/ o/ ,/ 所以/ 节点/ i/ 必须/ 缓存/ 内容/ o/ ./ 此时/ ,/ 节点/ i/ -/ 1/ 的/ 缓存/ 概率/ 与/ 节点/ i/ 没有/ 关系/ ,/ 它/ 只会/ 向/ 节点/ i/ -/ 2/ 寻求/ 协作/ ./ 4.3/ SC/ 的/ 性能/ 分析/ SC/ 的/ 一个/ 主要/ 目标/ 是/ :/ 只/ 在/ 必要/ 的/ 地方/ 选择性/ 地/ 缓存/ ,/ 以/ 达到/ 节约/ 缓存/ 的/ 目的/ ,/ 从而/ 提高/ 缓存/ 效率/ ./ 本节/ 对/ SC/ 的/ 这/ 一/ 性能/ 表现/ 进行/ 理论/ 分析/ ,/ 为/ 简化/ 分析/ ,/ 这里/ 暂/ 不/ 考虑/ 带宽/ 换取/ 缓存/ ./ 实/ [/ 24/ ]/ ,/ 节点/ 的/ 度数/ 为/ n/ 的/ 概率/ 为/ 其中/ n/ / 2/ ,/ β/ 是/ 幂律/ 分布/ 参数/ ,/ 一般/ 认为/ 2/ / β/ / 3/ ,/ c/ =/ 1/ ∑/ n/ / 2/ 假设/ 度数/ 等于/ 2/ 的/ 节点/ 是/ 网络/ 边界/ 节点/ ,/ 用于/ 用户/ 接入/ 网络/ ,/ 并设/ 任意/ 一个/ 边界/ 节点/ 收到/ 用户/ 对/ 某个/ 内容/ 的/ 至少/ 一个/ Interest/ 的/ 概率/ 是/ r2/ ./ 根据/ 互联网络/ 中/ 节点/ 度数/ 是/ 幂律/ 分布/ 的/ 事/ 如果/ 网络/ 中共/ 有/ N/ 个/ 节点/ ,/ 则/ 其中/ 度数/ 等于/ 2/ 的/ 节点/ 数量/ 是/ Nc2/ -/ β/ ,/ 网络/ 中/ 度数/ 等于/ n/ 的/ 节点/ 数量/ 是/ Ncn/ -/ β/ ./ 所以/ ,/ 每个/ 度数/ 为/ n/ 的/ 节点/ 平均/ 能够/ 收到/ 来自/ vn/ =/ (/ 2/ // n/ )/ -/ β/ 个/ 度数/ 等于/ 2/ 的/ 节点/ 的/ 请求/ ./ 当/ 这些/ 度数/ 等于/ 2/ 的/ 节点/ 中/ 至少/ 有/ 一个/ 用户/ 发出/ Interest/ 时/ ,/ 该/ 度数/ 为/ n/ 的/ 节点/ 会/ 收到/ 至少/ 一个/ Interest/ ./ 因此/ ,/ 度数/ 为/ n/ 的/ 节点/ 收到/ 对/ 某个/ 内容/ 至少/ 一个/ Interest/ 的/ 概率/ 是/ 所以/ 在/ 该/ 节点/ 的/ n/ -/ 1/ 个/ 接口/ 中/ (/ 其中/ 一个/ 接口/ 假定/ 与/ 上游/ 的/ 更/ 高度/ 数/ 的/ 节点/ 连接/ )/ ,/ 平均/ 每个/ 接口/ 收到/ 至少/ 一个/ Interest/ 的/ 概率/ 是/ wn/ =/ 1/ -/ (/ 1/ -/ r2/ )/ vn/ // (/ n/ -/ 1/ )/ ./ 因此/ ,/ 它/ 的/ m/ 个/ 接口/ 都/ 收到/ 对/ 该/ Page7/ 内容/ 的/ Interest/ 的/ 概率/ 是/ 其中/ ,/ 1/ / m/ / n/ -/ 1/ ./ 当该/ 节点/ 收到/ 所/ 请求/ 的/ 内容/ 后/ ,/ 以/ 一定/ 的/ 概率/ 缓存/ 该/ 内容/ ,/ 根据/ 算法/ 1/ ,/ 该/ 内容/ 在/ 不同/ 的/ 传播/ 时期/ 被/ 该/ 节点/ 缓存/ 的/ 概率/ 不/ 一样/ ./ 对于/ 该/ 节点/ 来说/ ,/ 其/ 度数/ 为/ n/ ,/ 并且/ 已经/ 有/ m/ 个/ 接口/ 请求/ 过该/ 内容/ ./ 我们/ 假设/ 内容/ o/ 处于/ 传播/ 早期/ 的/ 概率/ 为/ z1/ ,/ 在/ 此/ 传播/ 阶段/ 该/ 节点/ 缓存/ 内容/ o/ 的/ 概率/ 是/ pn/ ,/ m/ ;/ 内容/ o/ 处于/ 传播/ 晚期/ 的/ 概率/ 为/ z2/ ,/ 在/ 此/ 传播/ 阶段/ 该/ 节点/ 缓存/ 内容/ o/ 的/ 概率/ 是/ qn/ ,/ m/ ,/ 其中/ z1/ +/ z2/ =/ 1/ ./ 因此/ ,/ 内容/ 在/ 该/ 节点/ 不/ 被/ 缓存/ 的/ 概率/ PS/ 可以/ 用式/ (/ 7/ )/ 表示/ ./ 这/ 说明/ ,/ 相比/ 于/ 让/ 内容/ 在/ 每个/ 节点/ 100/ %/ 地/ 缓存/ 的/ CEE/ 机制/ ,/ SC/ 机制/ 减少/ 了/ 每个/ 内容/ 在/ 网络/ 中/ 被/ 复制/ 的/ 平均/ 份数/ ./ 所以/ ,/ 在/ 给定/ 网络/ 缓存/ 容量/ 的/ 情况/ 下/ ,/ SC/ 相比/ 于/ CEE/ 提高/ 了/ 网络/ 缓存/ 的/ 能力/ ./ PS/ =/ ∑/ n/ / 2/ 其中/ ,/ 根据/ 算法/ 1/ ,/ 我们/ 可以/ 得到/ pn/ ,/ m/ 和/ qn/ ,/ m/ 在/ 不同/ 情况/ 下/ 的/ 取值/ 如表/ 1/ 所示/ ,/ pn/ ,/ m/ =/ 1/ 表示/ 的/ 含义/ 是/ :/ 在/ 相邻/ 两个/ 节点/ 中/ 肯定/ 有/ 一个/ 会/ 缓存/ ./ 其中/ ,/ 调节/ 因子/ θ/ (/ t/ )/ 的/ 期望/ 是/ θ/ =/ θ/ (/ τ/ )/ =/ θ/ 0/ τ/ 2/ =/ 0.032/ ./ n/ 与/ m/ 的/ 关系/ 传播/ 早期/ n/ -/ 1/ >/ mpn/ ,/ m/ =/ 1qn/ ,/ m/ =/ 1/ -/ mn/ -/ 1/ =/ mpn/ ,/ m/ =/ v/ ,/ n/ =/ 2/ ,/ m/ =/ 1n/ -/ 1/ </ mpn/ ,/ m/ =/ 0/ 图/ 2/ 给出/ 了/ 幂律/ 分布/ 参数/ β/ 和/ 边界/ 用户/ 请求/ 概率/ r2/ 对/ SC/ 提高/ 网络/ 缓存/ 的/ 能力/ 的/ 影响/ ,/ 其中/ 纵轴/ 是/ 式/ (/ 7/ )/ 的/ PS/ ./ 不失/ 一般性/ ,/ 我们/ 这里/ 的/ z1/ =/ z2/ =/ 0.5/ ;/ max/ {/ n/ }/ =/ 100/ ;/ r2/ 变动/ 范围/ 为/ 1/ %/ / r2/ / 10/ %/ ;/ β/ 遵循/ 实际/ 网络/ 中/ 的/ 分布/ :/ 2/ / β/ / 3/ ./ 图/ 2/ 明显/ 地/ 显示/ ,/ SC/ 提高/ 网络/ 缓存/ 的/ 能力/ 会/ 随着/ β/ 的/ 减小/ 而/ 增加/ ,/ 也/ 随着/ r2/ 的/ 增加/ 而/ 增加/ ,/ 总体/ 保持/ 在/ 3.64/ %/ ~/ 19.56/ %/ 区间/ ./ 也就是说/ ,/ 在/ 用户/ 请求/ 越多/ 的/ 繁忙/ 网络/ 中/ ,/ SC/ 提高/ 网络/ 缓存/ 的/ 能力/ 更强/ ./ 我们/ 也/ 看到/ ,/ r2/ 对/ PS/ 的/ 影响/ 更大/ 一些/ ,/ 当/ r2/ 从/ 1/ %/ 增加/ 到/ 10/ %/ ,/ PS/ 的/ 平均值/ 从/ 4.61/ %/ 快速/ 地/ 增加/ 到/ 17.72/ %/ ./ 5/ 仿真/ 实验/ 本文/ 研究/ 的/ 是/ 内容/ 放置/ 机制/ ,/ 而/ LRU/ 是/ 一个/ 被/ 普遍/ 使用/ 的/ 内容/ 替换/ 机制/ ,/ SC/ 的/ 放置/ 机制/ 结合/ LRU/ 的/ 替换/ 机制/ 简称/ 为/ SC/ +/ LRU/ ./ 我们/ 从/ 相关/ 工作/ 中/ 选择/ 代表性/ 的/ 放置/ 机制/ 作为/ SC/ 性能/ 比较/ 的/ 对象/ :/ 一个/ 是/ 传统/ 的/ 处处/ 缓存/ 的/ 放置/ 机制/ 与/ LRU/ 的/ 组合/ ,/ 称为/ CEE/ +/ LRU/ ./ 另外/ 一个/ 是/ 最近/ 提出/ 来/ 的/ 一个/ 选择性/ 缓存/ 机制/ —/ —/ —/ 基于/ 介数/ 的/ 放置/ 机制/ [/ 25/ ]/ ,/ 它/ 与/ LRU/ 的/ 组合/ ,/ 称为/ EgoBetw/ +/ LRU/ ./ 在/ Chai/ 等/ 人/ [/ 25/ ]/ 提出/ 的/ EgoBetw/ +/ LRU/ 中/ :/ 只/ 将/ 内容/ 缓存/ 于/ Interest/ 路径/ 中/ 节点/ 介数/ (/ Betweenness/ )/ 最大/ 的/ 节点/ ./ 即/ ,/ 使/ 内容/ 放置/ 于/ 更加/ 重要/ 的/ 节点/ 上来/ 实现/ 更/ 精准/ 的/ 选择/ ,/ 从而/ 提高/ 缓存/ 效率/ ./ 但/ 其/ 潜在/ 的/ 问题/ 是/ :/ 介数/ 最大/ 的/ 节点/ 的/ 缓存/ 被/ 挤满/ 了/ ,/ 并且/ 由于/ 空间/ 有限/ 必然/ 会/ 导致/ 需要/ 频繁/ 地/ 替换/ 对象/ ,/ 而/ 其它/ 的/ 节点/ 的/ 缓存/ 却/ 没有/ 被/ 充分利用/ ./ 这样/ 做会/ 将/ 流量/ 引向/ 介数/ 大/ 的/ 节点/ ,/ 从而/ 形成/ 拥塞/ 点/ ,/ 进而/ 降低/ 网络/ 的/ 容量/ [/ 26/ ]/ ./ 并且/ ,/ 为了/ 构建/ Egonetwork/ [/ 27/ ]/ ,/ 节点/ 之间/ 需要/ 互相/ 通信/ ,/ 这样/ 势必会/ 带来/ 通信/ 开销/ ./ 同时/ ,/ EgoBetw/ +/ LRU/ 中/ 每个/ 节点/ 为了/ 计算/ 自己/ 的/ 介数/ 而/ 需要/ 付出/ 巨大/ 的/ 计算/ 量/ ,/ 并且/ 在/ 网络拓扑/ 变化/ 后/ ,/ 又/ 需要/ 为此/ 而/ 重新/ 计算/ 和/ 通信/ ./ 即使/ 介数/ 计算/ 的/ 复杂度/ 降低/ 到/ O/ (/ d2m/ )/ [/ 28/ ]/ ,/ 但/ 要/ 将/ 该/ 方法/ 应用/ 于/ 实际/ 网络/ ,/ 这些/ 问题/ 依然/ 是/ 一个/ 不小/ 的/ 挑战/ ,/ 这里/ 的/ dm/ 是/ 网络/ 中/ 节点/ 度/ 的/ 最大值/ ./ 本文/ 采用/ 多个/ 性能参数/ 将/ SC/ +/ LRU/ 与/ CEE/ +/ LRU/ 、/ EgoBetw/ +/ LRU/ 进行/ 对比/ ,/ 其中/ 包括/ 相对/ 击中/ 度/ (/ RelativeHitDegree/ )/ 、/ 平均/ 接入/ 代价/ (/ AverageAccessCost/ )/ 、/ 无效/ 缓存/ 度/ (/ InvalidCachingDegree/ )/ 、/ 相对/ 内容/ 差异/ 度/ (/ RelativeContentDiversityDegree/ )/ 、/ 缓存/ 消耗率/ (/ PercentofConsumedCache/ )/ 、/ 节点/ 负载/ 的/ 基尼系数/ 等/ ./ 另外/ ,/ 我们/ 也/ 研究/ 了/ 各个/ 参数/ 对/ 网络/ 性能/ 的/ 影响/ ,/ 如/ 相对/ 缓存/ 大小/ (/ RelativeCacheSize/ )/ 、/ Zipf/ 参数/ (/ Zipfparameter/ (/ α/ )/ )/ 、/ 内容/ 服务器/ 数量/ 等/ ./ 5.1/ 性能参数/ CCN/ 根本性/ 地/ 改变/ 了/ 传统/ 的/ 网络/ 架构/ 以及/ 通/ Page8/ 信/ 模式/ ,/ 所以/ 需要/ 定义/ 一些/ 能够/ 更加/ 准确/ 地/ 反映/ CCN/ 性能/ 的/ 测量/ 参数/ ,/ 本文/ 对此/ 进行/ 了/ 尝试/ ./ 其中/ 约定/ :/ Total/ _/ num/ 是/ 网络/ 中/ 所有/ 节点/ 总/ 的/ 缓存/ 数量/ ;/ Consumed/ _/ num/ 是/ 网络/ 中/ 被/ 消耗/ 的/ 平均/ 缓存/ 数量/ ;/ Request/ _/ num/ 是/ 用户/ 请求/ 的/ 总/ 次数/ ,/ 这些/ 参数/ 的/ 值/ 表示/ 的/ 是/ 我们/ 在/ 实验/ 周期/ 内/ 统计/ 的/ 结果/ ,/ 如/ 没有/ 特别/ 说明/ ,/ 后面/ 的/ 参数/ 也/ 都/ 是/ 据此/ 约定/ ./ (/ 1/ )/ 相对/ 击中/ 度/ RHD/ (/ RelativeHitDegree/ )/ 缓存/ 击中/ 率/ 是/ 一个/ 传统/ 的/ 测量/ 缓存/ 性能/ 的/ 参数/ ./ 它/ 被/ 定义/ 为/ :/ 由/ 缓存/ 而/ 不是/ OCS/ 响应/ 用户/ 请求/ 的/ 概率/ ./ 但/ 这/ 不能/ 准确/ 地/ 反映/ 缓存/ 的/ 效率/ ,/ 因为/ 该/ 定义/ 中/ 没有/ 考虑/ 到/ 代价/ ,/ 即/ 实现/ 一个/ 击中/ 率/ 需要/ 消耗/ 多少/ 缓存/ 空间/ ./ 所以/ 我们/ 定义/ 相对/ 击中/ 度/ 如下/ :/ 其中/ ,/ Hit/ _/ num/ 是/ 被/ 缓存/ 响应/ 的/ 次数/ ;/ 显然/ ,/ 相对/ 击中/ 度越/ 高/ ,/ 缓存/ 的/ 效率/ 就/ 越/ 高/ ./ (/ 2/ )/ 平均/ 接入/ 代价/ AAC/ (/ AverageAccessCost/ )/ AAC/ 被/ 定义/ 为/ :/ Interest/ 找到/ 所/ 需/ 内容/ 的/ 平均/ 时间/ ./ 它/ 实际上/ 可/ 看作/ 是/ 测量/ QoE/ (/ QualityofExperience/ )/ 的/ 参数/ ./ (/ 3/ )/ 无效/ 缓存/ 度/ ICD/ (/ InvalidCachingDegree/ )/ 为了/ 准确/ 地/ 反映/ 前/ 文/ 所述/ 的/ “/ 无效/ 缓存/ ”/ 的/ 程度/ ,/ 我们/ 定义/ 无效/ 缓存/ 度/ 如下/ :/ 其中/ ,/ Invalid/ _/ num/ 表示/ “/ 无效/ 缓存/ ”/ 的/ 总/ 次数/ ,/ 即/ 在/ 实验/ 期间/ ,/ 对于/ 网络/ 的/ 所有/ 节点/ ,/ 内容/ 在/ 被/ 替换/ 之前/ 没有/ 发挥/ 任何/ 作用/ 的/ 次数/ 的/ 总和/ ./ ICD/ 实际上/ 反映/ 的/ 是/ 由于/ 每/ 一次/ 用户/ 请求/ 而/ 引起/ 的/ “/ 无效/ 缓存/ ”/ 的/ 次数/ ,/ 显然/ ,/ ICD/ 越低/ ,/ 缓存/ 效率/ 越高/ ./ (/ 4/ )/ 相对/ 内容/ 差异/ 度/ RCDD/ (/ RelativeContentDiversityDegree/ )/ 实现/ 差异化/ 缓存/ 从而/ 提高/ 全网/ 的/ 整体/ 性能/ 是/ SC/ 的/ 目标/ 之一/ ./ 而/ 在/ CEE/ +/ LRU/ 中/ ,/ 由于/ 各/ 节点/ 的/ 缓存/ 和/ 替换/ 决定/ 是/ 独立/ 做出/ 的/ ,/ 所以/ “/ 同质化/ 缓存/ ”/ 非常/ 严重/ ./ 同时/ ,/ 各种/ 机制/ 对/ 缓存/ 空间/ 的/ 消耗/ 程度/ 也/ 不同/ ,/ 为了/ 定量/ 地/ 比较/ 这种/ 差异/ 程度/ ,/ 我们/ 定义/ 相对/ 内容/ 差异/ 度/ 如下/ :/ 其中/ ,/ Content/ _/ num/ 表示/ OCS/ 产生/ 的/ 所有/ 的/ 内容/ 种类/ 的/ 数量/ ;/ Type/ _/ num/ 表示/ 缓存/ 中/ 内容/ 种类/ 的/ 平均/ 数量/ ./ RCDD/ 的/ 定义/ 实际上/ 反映/ 了/ 实现/ 差异化/ 缓存/ 的/ 缓存/ 效率/ ,/ 即/ 单位/ 缓存/ 消耗率/ 实现/ 的/ 内容/ 差异/ 率/ ./ 显然/ ,/ 它/ 越/ 大/ ,/ 缓存/ 效率/ 也/ 越/ 高/ ./ (/ 5/ )/ 缓存/ 消耗率/ PCC/ (/ PercentofConsumedCache/ )/ 不同/ 的/ 缓存/ 机制/ 消耗/ 的/ 缓存/ 数量/ 是/ 不/ 一样/ 的/ ,/ 我们/ 定义/ PCC/ 如下/ :/ (/ 6/ )/ 节点/ 负载/ 的/ Gini/ 系数/ (/ Load/ _/ G/ )/ 设/ 节点/ i/ 的/ 负载/ 为/ γ/ i/ ,/ 其/ 被/ 定义/ 为/ 节点/ i/ 在/ 一段时间/ 内/ 响应/ 用户/ 的/ Interest/ 的/ 次数/ ./ 为了/ 衡量/ 各/ 节点/ 负载/ 的/ 均衡/ 情况/ ,/ 我们/ 引入/ Gini/ 系数/ (/ Ginicoefficient/ )/ ./ 该/ 系数/ 是/ 一个/ 用于/ 衡量/ 概率分布/ 不/ 均匀/ 程度/ 的/ 测度/ ,/ Gini/ 系数/ 越大/ ,/ 说明/ 越/ 不/ 均衡/ ,/ 其/ 被/ 定义/ 为/ [/ 29/ ]/ 其中/ ,/ γ/ -/ 是/ 各/ 节点/ 的/ 平均/ 负载/ ,/ N/ 是/ 节点/ 的/ 数量/ ./ 5.2/ 实验/ 参数设置/ 我们/ 的/ 实验/ 网络/ 的/ 拓扑/ 模型/ 来自/ 于/ Tierpro/ -/ gram/ [/ 30/ ]/ ,/ 由/ 100/ 个/ 节点/ 和/ 386/ 条/ 链路/ 组成/ ./ 它/ 由/ 广域网/ WAN/ 和/ 城域网/ MAN/ 组成/ ,/ 广域网/ 是/ 骨干网/ ,/ 城域网/ 完成/ 接入/ 的/ 任务/ ./ 内容/ 的/ 请求/ 过程/ 服从/ 泊松/ 过程/ ,/ 亦/ 即/ ,/ 请求/ 的/ 间隔时间/ 是/ 指数分布/ ,/ 平均/ 是/ 1s/ ~/ 10s/ ./ 同时/ ,/ 我们/ 假设/ 用户/ 对/ 内容/ 的/ 访问/ 模式/ 遵循/ Zipf/ 分布/ [/ 31/ ]/ ./ 就是说/ ,/ 如果/ 用/ Pr/ {/ Ck/ }/ 表示/ 第/ k/ 级/ 受欢迎/ 程度/ 的/ 内容/ 被/ 请求/ 到/ 的/ 概率/ ,/ 那么/ 它/ 遵循/ 以下/ 规律/ :/ Pr/ {/ Ck/ }/ ∝/ k/ -/ α/ ,/ α/ 称为/ 是/ Zipf/ 参数/ (/ Zipfparameter/ (/ α/ )/ )/ ./ 表/ 2/ 列出/ 了/ 本文/ 主要/ 的/ 实验/ 参数/ 以及/ 默认值/ ./ WAN/ 节点/ 数/ // MAN/ 节点/ 数/ 4/ :/ 96/ 用户/ 的/ 数量/ 内容/ 的/ 数量/ 内容/ 的/ 大小/ 节点/ 缓存/ 的/ 大小/ 服务器/ 的/ 数量/ 访问/ 模式/ 5.3/ 实验/ 结果/ 本/ 节/ 给出/ 实验/ 结果/ ,/ 如/ 没有/ 特别/ 说明/ ,/ 所有/ 结果/ Page9/ 都/ 是/ 我们/ 经过/ 10/ 次/ 实验/ 后/ 得到/ 的/ 平均值/ ./ 同时/ ,/ 为了/ 观察/ 网络/ 性能/ 受/ 某个/ 参数/ 的/ 影响/ ,/ 我们/ 一次/ 只/ 让/ 一个/ 参数/ 变化/ ,/ 其它/ 参数/ 保持/ 不变/ ,/ 其/ 取值/ 如表/ 2/ 默认值/ 所示/ ./ 5.3/ ./ 1/ 相对/ 缓存/ 大小/ (/ RelativeCacheSize/ )/ 的/ 影响/ 一般/ 情况/ 下/ ,/ 互联网/ 中/ 的/ 缓存/ 大小/ 显然/ 会/ 远远/ 小于/ 内容/ 的/ 大小/ ./ 本文/ 使用/ 相对/ 缓存/ 大小/ 的/ 概念/ ,/ 即/ 全体/ 缓存/ 大小/ 占/ 全体/ 内容/ 大小/ 的/ 百分比/ ,/ 它/ 反映/ 了/ 缓存/ 空间/ 的/ 稀缺/ 程度/ ./ 在/ 本节/ ,/ 我们/ 研究/ 相对/ 缓存/ 大小/ 对系统/ 性能/ 的/ 影响/ ,/ 通过/ 它/ 可以/ 更加/ 准确/ 地/ 观察/ 到/ 缓存/ 大小/ 如何/ 影响/ 网络/ 性能/ 的/ 情况/ ./ 图/ 3/ 给出/ 了/ 系统/ 性能/ 在/ 不同/ 缓存/ 大小/ 下/ 的/ 表现/ ,/ 其中/ 相对/ 缓存/ 大小/ 从/ 0.4/ %/ 大/ 范围/ 地/ 变化/ 到/ 100/ %/ ./ 从图/ 3/ (/ a/ )/ 可以/ 看到/ ,/ 正如/ 所/ 预料/ 的/ 那样/ ,/ 3/ 种/ 机制/ 的/ RHD/ 都/ 会/ 随着/ 相对/ 缓存/ 的/ 增加/ 而/ 增加/ ./ 但/ 在/ 这/ 过程/ 中/ ,/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 的/ 性能/ 一直/ 比/ CEE/ +/ LRU/ 好/ ,/ 这/ 正是/ 因为/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 中/ 选择性/ 的/ 缓存/ 机制/ 节约/ 了/ 缓存/ 空间/ 而/ 带来/ 的/ 好处/ ,/ 这/ 与/ 前文/ 的/ 理论/ 分析/ 结果/ 是/ 一致/ 的/ ./ 而/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 的/ 性能/ 接近/ ./ 图/ 3/ (/ b/ )/ 显示/ ,/ 3/ 种/ 机制/ 的/ 平均/ 接入/ 代价/ 会/ 随着/ 相对/ 缓存/ 的/ 增加/ 而/ 减小/ ./ 这/ 也/ 很/ 容易/ 解释/ ,/ 因为/ 缓存/ 命中率/ 提高/ 了/ ,/ 接入/ 代价/ 自然/ 也/ 就/ 下降/ 了/ ./ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 的/ 平均/ 接入/ 代价/ 在/ 相对/ 缓存/ 比较/ 小/ 的/ 时候/ 比/ CEE/ +/ LRU/ 要/ 低/ ./ 但是/ 也/ 注意/ 到/ 的/ 是/ ,/ 在/ 相对/ 缓存/ 大于/ 36/ %/ 的/ 时候/ ,/ CEE/ +/ LRU/ 的/ 表现/ 超越/ 了/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ ./ 上述/ 观察/ 说明/ 选择性/ 缓存/ 机制/ 在/ 相对/ 缓存/ 较/ 小/ 情况/ 下/ 的/ 优势/ 更加/ 明显/ 一些/ ,/ 而/ 在/ 缓存/ 空间/ 不/ 稀缺/ 的/ 情况/ 下/ ,/ 处处/ 缓存/ 机制/ 可以/ 将/ 内容/ 大量/ 地/ 缓存/ 于/ 网络/ 中/ 的/ 各个/ 节点/ ,/ 就近/ 地/ 满足用户/ 的/ 需求/ ./ 而/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 的/ 性能/ 接近/ ./ 从图/ 3/ (/ c/ )/ 可以/ 看到/ ,/ 3/ 种/ 机制/ 的/ ICD/ 会/ 随着/ 相对/ 缓存/ 的/ 增加/ 而/ 减小/ ./ 这/ 是因为/ 缓存/ 增加/ 了/ ,/ 缓存/ 就/ 不会/ 那么/ 稀缺/ ,/ 那么/ 内容/ 在/ 被/ 替换/ 之前/ 可以/ 保留/ 更长/ 的/ 时间/ ,/ 那么/ “/ 无效/ 缓存/ ”/ 的/ 现象/ 就/ 会/ 减少/ ./ 同时/ ,/ 我们/ 也/ 注意/ 到/ ,/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 的/ 表现/ 一直/ 比/ CEE/ +/ LRU/ 好/ ,/ 并且/ 不管/ 在/ 什么/ 情况/ 下/ ,/ SC/ +/ LRU/ 始终保持/ 着/ 大约/ 50/ %/ 的/ 优势/ ./ 而/ 由于/ EgoBetw/ +/ LRU/ 能够/ 更加/ 精准/ 地/ 选择/ 缓存/ 位置/ ,/ 所以/ 其/ ICD/ 比/ SC/ +/ LRU/ 更/ 低/ 一些/ ./ 图/ 3/ (/ d/ )/ 显示/ ,/ 3/ 种/ 机制/ 的/ RCDD/ 会/ 随着/ 相对/ 缓存/ 的/ 增大/ 而/ 增大/ ,/ 这/ 是因为/ 缓存/ 大/ 了/ ,/ 缓存/ 内容/ 的/ 种类/ 会/ 增多/ ./ 而/ 在/ 这/ 一/ 过程/ 中/ ,/ SC/ +/ LRU/ 总是/ 比/ CEE/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 要/ 大/ ./ 5.3/ ./ 2Zipf/ 参数/ (/ α/ )/ 的/ 影响/ 现在/ ,/ 大家/ 已经/ 普遍认为/ ,/ 用户/ 对/ 内容/ 的/ 偏好/ 是/ 服从/ Zipf/ 分布/ 的/ [/ 31/ ]/ ./ 不同/ 网络应用/ 的/ 分布/ 参数/ 也/ 不/ 一样/ ,/ Zipf/ 参数/ (/ α/ )/ 越大/ ,/ 说明/ 用户/ 的/ 偏好/ 越/ 集中/ ./ Page10/ 在/ 本节/ ,/ 我们/ 研究/ 用户/ 的/ 偏好/ 模式/ 对/ 缓存/ 机制/ 的/ 性能/ 的/ 影响/ ,/ 更/ 准确/ 地说/ ,/ 我们/ 想/ 看看/ 缓存/ 机制/ 面向/ 不同/ 网络应用/ 的/ 表现/ ./ 图/ 4/ 是/ 实验/ 结果/ ,/ 其中/ Zipf/ 参数/ (/ α/ )/ 从/ 0.1/ 变化/ 到/ 1/ ./ 图/ 4/ (/ a/ )/ 明显/ 地/ 显示/ ,/ 3/ 种/ 机制/ 的/ RHD/ 会/ 随着/ Zipf/ 参数/ 的/ 增加/ 而/ 增加/ ,/ 但/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 一直/ 优于/ CEE/ +/ LRU/ ./ 并且/ 随着/ Zipf/ 参数/ 的/ 增加/ ,/ SC/ +/ LRU/ 机制/ 相对/ 于/ 的/ CEE/ +/ LRU/ 优势/ 在/ 增加/ ,/ 并且/ 在/ α/ / 0.86/ 的/ 时候/ 也/ 超越/ 了/ EgoBetw/ +/ LRU/ ./ 从图/ 4/ (/ b/ )/ 可以/ 看到/ ,/ 3/ 种/ 机制/ 的/ 平均/ 接入/ 代价/ 都/ 会/ 随着/ Zipf/ 参数/ 的/ 增加/ 而/ 降低/ ,/ 但/ SC/ +/ LRU/ 相对/ 于/ CEE/ +/ LRU/ 一直/ 保持/ 着/ 优势/ ,/ EgoBetw/ +/ LRU/ 在/ α/ / 0.4/ 后/ 在/ 三者/ 之中/ 是/ 最好/ 的/ ./ 图/ 4/ (/ c/ )/ 显示/ ,/ 随着/ Zipf/ 参数/ 的/ 增加/ ,/ SC/ +/ LRU/ 和/ CEE/ +/ LRU/ 的/ ICD/ 会/ 减少/ ,/ 但/ SC/ +/ LRU/ 一直/ 优于/ CEE/ +/ LRU/ ,/ 而/ EgoBetw/ +/ LRU/ 在/ 此/ 过程/ 表现/ 最好/ 并/ 保持/ 着/ 相对/ 的/ 平稳/ ./ 而/ 在/ 图/ 4/ (/ d/ )/ 中/ ,/ 随着/ Zipf/ 参数/ 的/ 增加/ ,/ 3/ 种/ 机制/ 的/ RCDD/ 会/ 缓慢/ 地/ 减少/ ./ 这/ 主要/ 是因为/ 随着/ Zipf/ 参数/ 的/ 增加/ ,/ 用户/ 更加/ 偏好/ 于/ 更/ 少/ 的/ 一部分/ 内容/ ./ 由于/ LRU/ 替换/ 机制/ 的/ 存在/ ,/ 网络/ 缓存/ 会/ 实时/ 地/ 根据/ 这种/ 变化/ 调整/ 缓存/ 的/ 内容/ ,/ 所以/ 缓存/ 中/ 内容/ 的/ 种类/ 数量/ 在/ 这/ 一/ 过程/ 中/ 会/ 降低/ ./ 但/ 也/ 可以/ 明显/ 地/ 看到/ SC/ +/ LRU/ 一直/ 高于/ CEE/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ ./ 5.3/ ./ 3/ 内容/ 服务器/ 数量/ 的/ 影响/ 我们/ 最后/ 一组/ 实验/ 是/ 想/ 检验/ SC/ 机制/ 的/ 可扩展性/ ,/ 以及/ 部署/ 在/ 有/ 不同/ 数量/ 内容/ 服务器/ 的/ 应用/ 场景/ 下/ 的/ 性能/ 表现/ ./ 从图/ 5/ (/ a/ )/ 可以/ 看出/ ,/ 3/ 种/ 机制/ 的/ RHD/ 随着/ OCS/ 数量/ 的/ 增加/ 而/ 在/ 减少/ ./ 这/ 主要/ 是因为/ 随着/ OCS/ 数量/ 的/ 增加/ ,/ 内容/ 的/ 地点/ 变得/ 更加/ 分散/ ,/ Interest/ 在/ 早期/ 经过/ 的/ 路径/ 更/ 多/ 了/ ,/ 内容/ 会/ 被/ 扩散/ 到/ 更/ 多/ 的/ 节点/ 上/ ./ 所以/ 我们/ 的/ 实验/ 结果表明/ ,/ 传统意义/ 上/ 的/ 击中/ 率/ Hit/ _/ num/ 加/ 的/ ./ 只是/ 由于/ 它/ 的/ 增加/ 速度/ 比/ 缓存/ 空间/ 消耗/ 的/ 速度/ 要慢/ ,/ 所以/ 从式/ (/ 8/ )/ 可以/ 看出/ ,/ RHD/ 的/ 减少/ 也/ 是/ 正常/ 的/ ./ 也就是说/ 在/ 这/ 一/ 过程/ 中/ ,/ 击中/ 率/ 在/ 提高/ ,/ 但/ 缓存/ 的/ 效率/ 在/ 降低/ ./ 但/ 不管/ 在/ 哪种/ 情况/ 下/ ,/ SC/ +/ LRU/ 一直/ 高于/ CEE/ +/ LRU/ ,/ EgoBetw/ +/ LRU/ 则/ 更/ 高/ ./ 从图/ 5/ (/ b/ )/ 可以/ 看到/ ,/ 3/ 种/ 机制/ 的/ 平均/ 接入/ 代价/ 都/ 会/ 随着/ OCS/ 数量/ 的/ 增加/ 而/ 提高/ ,/ 这是/ 伴随/ RHD/ 降低/ 的/ 必然结果/ ,/ 但/ SC/ +/ LRU/ 一直/ 保持/ 着/ 优势/ ,/ EgoBetw/ +/ LRU/ 则/ 更少/ ./ 图/ 5/ (/ c/ )/ 显示/ ,/ 随着/ OCS/ 数量/ 的/ 增加/ ,/ 3/ 种/ 机制/ 的/ ICD/ 会/ 缓慢/ 地/ 增加/ ,/ 但/ SC/ +/ LRU/ 一直/ 少于/ CEE/ +/ LRU/ ,/ EgoBetw/ +/ LRU/ 则/ 最少/ ./ 而/ 从/ 图/ 5/ (/ d/ )/ 可知/ ,/ 随着/ OCS/ 数量/ 的/ 增加/ ,/ 3/ 种/ 机制/ 的/ RCDD/ 的/ 波动/ 不/ 大/ ,/ 与/ OCS/ 数量/ 变化/ 的/ 联系/ 也/ 不/ 明显/ ,/ 但/ SC/ +/ LRU/ 最高/ ./ Page115/ ./ 3.4/ 缓存/ 的/ 消耗/ 本/ 节/ 分析/ 在/ 3/ 种/ 机制/ 下/ 节点/ 缓存/ 的/ 消耗/ 情况/ ./ 图/ 6/ 给出/ 了/ 3/ 种/ 机制/ 在/ 各种/ 实验/ 场景/ 情况/ 下/ 的/ PCC/ ,/ 它们/ 的/ 变化趋势/ 基本一致/ ,/ 其中/ 横轴/ 是/ 场景/ 序号/ ,/ 包括/ 5.3/ ./ 1/ 节/ ~/ 5.3/ ./ 3/ 节中/ 展现/ 的/ 各种/ 场景/ ./ 因为/ CEE/ +/ LRU/ 是/ 处处/ 缓存/ ,/ 所以/ 其/ PCC/ 显而易见/ 地是/ 最高/ 的/ ,/ 而/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 比较/ 接近/ ./ SC/ +/ LRU/ 相对/ 于/ CEE/ +/ LRU/ 节省/ 的/ 空间/ 平均/ 大约/ 是/ 18/ %/ 左右/ ,/ 这/ 与/ 前文/ 4.3/ 节/ 的/ 理论/ 分析/ 是/ 一致/ 的/ ./ 5.3/ ./ 5/ 节点/ 的/ 负载/ 本/ 节/ 分析/ 网络/ 中/ 各/ 节点/ 在/ 3/ 种/ 机制/ 下/ 承担/ 负载/ 的/ 均衡/ 情况/ ,/ 图/ 7/ 给出/ 了/ 3/ 种/ 机制/ 在/ 各种/ 实验/ 场景/ 情况/ 下/ 的/ Load/ _/ G/ ,/ 其中/ 横轴/ 是/ 场景/ 序号/ ,/ 包括/ 5.3/ ./ 1/ 节/ ~/ 5.3/ ./ 3/ 节中/ 展现/ 的/ 各种/ 场景/ ./ 选择性/ 缓存/ 机制/ 由于/ 将/ 内容/ 集中/ 缓存/ 到/ 有限/ 的/ 节点/ 上/ ,/ 所以/ 网络/ 的/ 流量/ 显然/ 会/ 比/ 处处/ 缓存/ 机制/ 更加/ 集中/ ,/ 图/ 7/ 中/ 呈现/ 的/ 结果/ 也/ 证明/ 了/ 这/ 一点/ :/ 在/ 绝大部分/ 情况/ 下/ ,/ CEE/ +/ LRU/ 是/ 最低/ 的/ ,/ EgoBetw/ +/ LRU/ 最高/ ,/ SC/ +/ LRU/ 适中/ ./ 因此/ ,/ 实验/ 结果/ 也/ 就/ 证明/ 了/ EgoBetw/ +/ LRU/ 的/ 缺点/ 之一/ :/ 会/ 将/ 流量/ 引向/ 介数/ 大/ 的/ 节点/ ,/ 从而/ 形成/ 一些/ 负载/ 过重/ 的/ 拥塞/ 点/ ,/ 进而/ 降低/ 网络/ 的/ 容量/ ./ 6/ 讨论/ 6.1/ SC/ 的/ 开销/ 现/ ,/ 而/ 为此/ 付出/ 的/ 代价/ 也/ 很小/ :/ 前文/ 的/ 实验/ 结果/ 证明/ SC/ 具有/ 不错/ 的/ 性能/ 表/ (/ 1/ )/ 通信/ 开销/ 在/ SC/ 机制/ 中/ ,/ 上下游/ 节点/ 之间/ 需要/ 传送/ 的/ 仅仅/ 是/ 一个/ 比特/ 的/ ai/ (/ o/ )/ ;/ 而/ 在/ SC/ 算法/ 中/ 需要/ 用到/ 的/ ni/ ,/ mi/ (/ o/ )/ 则/ 可以/ 从/ FIB/ 和/ PIT/ 中/ 获取/ ,/ 不/ 需要/ 额外/ 的/ 开销/ ./ 而/ 在/ EgoBetw/ 中/ ,/ 为了/ 计算/ 介数/ ,/ 节点/ 之间/ 的/ 通信量/ 是/ O/ (/ |/ V/ |/ )/ 量级/ 的/ [/ 28/ ]/ ,/ 这里/ 的/ |/ V/ |/ 是/ 网络/ 的/ 节点/ 数量/ ./ Page12/ (/ 2/ )/ 计算/ 开销/ SC/ 的/ 复杂度/ 是/ O/ (/ 1/ )/ ,/ 与/ 网络/ 规模/ 无关/ ./ 而/ EgoBetw/ 中介/ 数/ 计算/ 的/ 复杂度/ 是/ O/ (/ d2m/ )/ ,/ 这里/ 的/ dm/ 是/ 网络/ 中/ 节点/ 度/ 的/ 最大值/ [/ 28/ ]/ ,/ 其/ 计算/ 量/ 是/ 与/ 网络/ 规模/ 相关/ 的/ ./ 在/ 2.8/ GHz/ 的/ CPU/ (/ IntelPentium4/ )/ 和/ 2GB/ 内存/ 的/ PC机/ 上/ 测量/ ,/ 表/ 3/ 给出/ 了/ 不同/ 网络/ 规模/ 中/ 的/ 单个/ 节点/ 在/ 两种/ 机制/ 下/ 的/ 计算/ 开销/ ./ 表/ 3/ 的/ 结果/ 也/ 证实/ 了/ 上述/ 分析/ ,/ SC/ 的/ 计算/ 开销/ 远远/ 小于/ EgoBetw/ ,/ 并且/ 是/ 与/ 网络/ 规模/ 无关/ 的/ ./ 网络/ 节点/ 的/ 数量/ (/ 3/ )/ 状态/ 记忆/ 开销/ 在/ SC/ 中/ ,/ 节点/ i/ 需要/ 记住/ 内容/ o/ 的/ 状态/ ri/ (/ o/ )/ ,/ 但是/ 只/ 需要/ 1bit/ ./ 虽然/ 互联网/ 的/ 内容/ 规模/ 达到/ 亿/ 级别/ ,/ 但/ 鉴于/ 内容/ 流行/ 的/ 规律/ [/ 22/ ]/ ,/ 很多/ 内容/ 都/ 是/ 在/ 一段时间/ 内/ 流行/ ,/ 过/ 了/ 这/ 段时间/ 后/ ,/ 我们/ 就/ 没有/ 必要/ 记住/ 它们/ 的/ 状态/ ./ 所以/ ,/ 我们/ 可以/ 采取/ 定时/ 清除/ 的/ 机制/ 减少/ 这一/ 开销/ ./ 采用/ 定时/ 清除/ 机制/ 带来/ 的/ 潜在/ 后果/ 是/ :/ 有些/ 内容/ 本来/ 已经/ 不是/ 第/ 1/ 次/ 请求/ ,/ 但/ 被/ 当作/ 是/ 第/ 1/ 次/ 请求/ ./ 亦/ 即/ ,/ 节点/ i/ 缓存/ 这些/ 内容/ 的/ 概率/ 会/ 被/ 错误/ 地/ 提高/ ,/ 为此/ 会/ 浪费/ 一些/ 缓存/ 空间/ ./ 但/ 上文/ 的/ 实验/ 结果/ 证明/ ,/ 即便如此/ ,/ SC/ 还是/ 能够/ 较/ 好/ 地/ 改善/ 缓存/ 的/ 效率/ 和/ 性能/ ./ 我们/ 通过/ 调节/ 定时/ 的/ 大小/ ,/ 来/ 调节/ 状态/ 被/ 记住/ 的/ 内容/ 的/ 数量/ ./ 根据/ 内容/ 流行/ 规律/ 遵循/ Zipf/ 分布/ 的/ 事实/ ,/ 在/ 本文/ 中/ ,/ 我们/ 将/ 这/ 一/ 数量/ 控制/ 在/ 当前/ 内容/ 总/ 的/ 数量/ 的/ 5/ %/ 左右/ ,/ 并且/ 我们/ 这里/ 也/ 是/ 采用/ LRU/ 来/ 实现/ 替换/ 的/ ./ 6.2/ 内容/ 处于/ 传播/ 的/ 早/ 、/ 晚期/ 的/ 判断/ 如前/ 文/ 所述/ ,/ 在/ 内容/ 传播/ 的/ 不同/ 时期/ ,/ SC/ 采取/ 了/ 不同/ 的/ 策略/ ./ 所以/ ,/ 如果/ 能够/ 准确/ 地/ 判断/ 内容/ 传播/ 所处/ 的/ 时期/ ,/ SC/ 将会/ 使/ 缓存/ 节点/ 的/ 数量/ 及/ 分布/ 更好/ 地/ 与/ 实际/ 需求/ 相吻合/ ,/ 从而/ 更好/ 地/ 发挥/ 缓存/ 的/ 潜能/ ./ 从/ CCN/ 的/ 通信/ 模式/ 可知/ ,/ 对于/ 每/ 一次/ 响应/ Interest/ 的/ 过程/ 来讲/ ,/ 内容/ o/ 的/ 传播/ 路径/ 都/ 是/ 一个/ 以/ 响应/ 节点/ 为/ 根部/ 的/ 树/ ./ 按照/ SC/ 机制/ ,/ 这个/ 树中/ 至少/ 会/ 有/ 一个/ 节点/ 缓存/ 内容/ o/ ,/ 可能/ 在/ 中间/ 分叉/ 节点/ 也/ 可能/ 在/ 叶子/ 节点/ ,/ 并且/ 经过/ 多次/ SC/ 这种/ 机制/ 的/ 选择/ 后/ ,/ 内容/ o/ 会/ 逐渐/ 地沉/ 向/ 下游/ 的/ 叶子/ 节点/ ./ 这些/ 缓存/ 内容/ o/ 的/ 节点/ 实际上/ 起到/ 了/ 把关/ 的/ 作用/ ,/ 是/ 在/ 为/ 下游/ 一群/ 潜在/ 的/ 用户服务/ ,/ 我们/ 称/ 它们/ 为/ 关隘/ 节点/ ./ 在/ 传播/ 的/ 早期/ ,/ 那些/ 潜在/ 的/ 用户/ 连续不断/ 地/ 发出请求/ 的/ 概率/ 很/ 高/ ,/ 因为/ LRU/ 的/ 存在/ ,/ 那么/ 内容/ o/ 在/ 关隘/ 节点/ 被/ 替换/ 掉/ 的/ 概率/ 会/ 很小/ ./ 那么/ 这些/ 潜在用户/ 的/ 请求/ 会/ 从/ 关隘/ 节点/ 得到/ 满足/ ,/ 而/ 不会/ 往/ 上游/ 转发/ ./ 如果/ 当/ 某个/ 时候/ ,/ 用户/ 的/ 请求/ 不能/ 从/ 关隘/ 节点/ 得到/ 满足/ 而/ 被/ 转发/ 到/ 了/ 上游/ 节点/ 的/ 时候/ ./ 亦/ 即/ ,/ Interest/ 第二次/ 出现/ 的/ 时候/ ,/ 那/ 可能/ 是因为/ 关隘/ 节点/ 很久没/ 有/ 收到/ 内容/ o/ 的/ 请求/ 了/ ,/ 根据/ LRU/ 的/ 替换/ 机制/ ,/ 内容/ o/ 在/ 关隘/ 节点/ 被/ 替换/ 掉/ 了/ ./ 这样/ ,/ 我们/ 就/ 有/ 理由/ 相信/ ,/ 此时/ 内容/ 已经/ 过/ 了/ 传播/ 的/ 早期/ ,/ 正/ 处于/ 晚期/ ./ 所以/ ,/ 我们/ 可以/ 将/ Interest/ 在/ 同一个/ 接口/ 第二次/ 出现/ 看作/ 内容/ 处于/ 传播/ 晚期/ 的/ 标志/ ./ 而/ 在/ 实际/ 情况/ 中/ ,/ 由于/ 关隘/ 节点/ 缓存/ 容量/ 的/ 限制/ ,/ 一些/ 传播/ 早期/ 的/ 内容/ 也/ 可能/ 在/ 缓存/ 中/ 被/ 替换/ 掉/ ,/ 从而/ 出现/ 以下/ 情况/ :/ 在/ 传播/ 早期/ ,/ Interest/ 在/ 同一个/ 接口/ 也/ 会/ 出现/ 第二次/ 请求/ ./ 这种/ 情况/ 会/ 带来/ 以下/ 后果/ :/ 内容/ 本来/ 处于/ 传播/ 早期/ 但/ 被/ 当作/ 是/ 晚期/ ,/ 从而/ 降低/ 了/ 该/ 内容/ 被/ 缓存/ 的/ 概率/ ./ 但/ 其/ 影响/ 往往/ 局限于/ 局部/ ,/ 因为/ 只有/ 在/ 网络/ 的/ 整体/ 缓存/ 容量/ 都/ 严重不足/ 的/ 情况/ 下/ 这种/ 影响/ 才/ 会/ 体现/ 出来/ ./ 从/ 另/ 一个/ 角度/ 来看/ ,/ 降低/ 内容/ 被/ 缓存/ 的/ 概率/ 并不一定/ 都/ 是/ 坏事/ ,/ 它/ 可能/ 有利于/ 改善/ 网络/ 整体/ 缓存/ 容量/ 不足/ 带来/ 的/ 性能/ 下降/ ./ 上文/ 实验/ 结果/ 也/ 证明/ :/ 即便/ 存在/ 这种/ 情况/ ,/ SC/ 还是/ 能够/ 较/ 好/ 地/ 改善/ 缓存/ 的/ 效率/ 和/ 性能/ ./ 6.3/ θ/ (/ 狋/ )/ 参数/ 的/ 选择/ 因为/ 不同/ 内容/ 的/ 衰减/ 规律/ 存在/ 差异/ ,/ 为了/ 做出/ 准确/ 的/ 缓存/ 决定/ ,/ θ/ (/ t/ )/ 的/ 衰减/ 规律/ 需要/ 和/ 内容/ 流行/ 度/ 的/ 衰减/ 规律/ 保持一致/ ,/ 而式/ (/ 3/ )/ 中/ θ/ 0/ ,/ C/ ,/ τ/ 等/ 参数/ 决定/ 了/ θ/ (/ t/ )/ 衰减/ 的/ 过程/ ./ 本文/ 从/ 文献/ [/ 22/ ]/ 中/ 选取/ 了/ 一个/ 常见/ 内容/ 兴衰/ 曲线/ 作为/ 参考模型/ ./ 为了/ 更加/ 准确/ 地/ 选择/ θ/ (/ t/ )/ 参数/ ,/ 使/ 其/ 与/ 内容/ 的/ 实际/ 衰减/ 过程/ 保持/ 完全一致/ ,/ 我们/ 可/ 从/ 以下/ 两/ 方面/ 着手/ :/ 一方面/ ,/ 通过/ 聚类/ 技术/ 获取/ 不同/ 类型/ 内容/ 的/ 衰减/ 曲线/ ,/ 例如/ 借助于/ CCN/ 命名/ 机制/ 中/ 包含/ 的/ 内容/ 类型信息/ 进行/ 聚类/ ,/ 然后/ 为/ 不同/ 类型/ 的/ 内容/ 选择/ 合适/ 的/ θ/ (/ t/ )/ 参数/ ./ 另一方面/ ,/ 我们/ 可以/ 利用/ 文献/ [/ 23/ ]/ 中/ 的/ 研究成果/ ,/ 预测/ 内容/ 的/ 衰减/ 过程/ ./ 但/ 加入/ 预测/ 过程/ 将/ 增加/ 系统/ 计算/ 负担/ ,/ 所以/ 如何/ 在/ 性能/ 和/ 计算/ 负担/ 之间/ 取得/ 平衡/ ,/ 是/ 需要/ 进一步/ 研究/ 的/ 内容/ ./ 7/ 结论/ 为了/ 使/ CCN/ 的/ 全网/ 缓存/ 尽可能/ 地/ 发挥/ 出/ 潜在/ 的/ 优势/ ,/ 本文/ 提出/ 了/ 一种/ 轻量级/ 的/ 隐性/ 协作/ 缓存/ 机/ Page13/ 制/ SC/ :/ 根据/ 用户/ 的/ 潜在/ 需求/ 选择/ 缓存/ 地点/ ,/ 兼顾/ 带宽/ 换/ 缓存/ 的/ 思想/ ,/ 克服/ 了/ “/ 无序/ 缓存/ ”/ 的/ 问题/ ./ 实验/ 结果显示/ :/ 在/ 各种/ 实验/ 条件/ 下/ ,/ 从/ 相对/ 击中/ 度/ 、/ 平均/ 接入/ 代价/ 、/ 无效/ 缓存/ 度/ 、/ 相对/ 内容/ 差异/ 度/ 、/ 缓存/ 消耗率/ 等/ 指标/ 来看/ ,/ SC/ +/ LRU/ 相对/ 于/ CEE/ +/ LRU/ 的/ 优势/ 很/ 明显/ ,/ 而/ 付出/ 的/ 代价/ 仅仅/ 是/ 节点/ 负载/ 的/ 基尼系数/ 的/ 少量/ 提高/ ,/ 以及/ 很少/ 的/ 计算/ 与/ 通信/ 开销/ ./ 而/ SC/ +/ LRU/ 和/ EgoBetw/ +/ LRU/ 则/ 互有/ 优劣/ ,/ SC/ +/ LRU/ 虽然/ 在/ 某些/ 指标/ 上/ 逊于/ EgoBetw/ +/ LRU/ ,/ 但/ SC/ +/ LRU/ 的/ 负载/ 更加/ 均衡/ ,/ 算法/ 的/ 通信/ 开销/ 、/ 计算/ 开销/ 也/ 远远/ 小于/ EgoBetw/ +/ LRU/ ./ 同时/ ,/ SC/ 在/ 各种/ 实验/ 条件/ 下/ 都/ 有/ 良好/ 的/ 性能/ ,/ 展现/ 了/ 良好/ 的/ 扩展性/ ./ 所以/ ,/ 经过/ 综合/ 比较/ ,/ 从/ 实用/ 的/ 角度/ 来看/ ,/ SC/ 相比/ 于/ EgoBetw/ 具有/ 优势/ ./ 展望未来/ ,/ 还有/ 很多/ 地方/ 可以/ 研究/ ,/ 例如/ ,/ 可以/ 将/ SC/ 拓展/ 到/ 移动/ 网络/ 环境/ 中/ ,/ 此时/ 可以/ 研究/ 将/ 推送/ 机制/ 嵌入/ 到/ SC/ ./ 

