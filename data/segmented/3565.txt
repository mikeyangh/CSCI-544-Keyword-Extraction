Page1/ 传感器/ 网络/ 调试/ 研究/ 综述/ 马峻岩/ 周兴社/ 张羽/ 李士宁/ 李志刚/ (/ 西北工业大学/ 计算机/ 学院/ 西安/ 710072/ )/ 摘要/ 越来越/ 多/ 面向/ 不同/ 应用领域/ 的/ 传感器/ 网络/ 被/ 部署/ 在/ 真实/ 环境/ 中/ ,/ 帮助/ 人们/ 以新/ 的/ 方式/ 观测/ 周围/ 的/ 物理/ 世界/ ./ 然而/ ,/ 这些/ 系统/ 常常/ 会/ 出现/ 各种/ 不可/ 预期/ 的/ 故障/ ,/ 能否/ 快速/ 有效/ 地/ 对/ 这些/ 故障/ 进行/ 检测/ 、/ 定位/ 和/ 修复/ ,/ 是/ 传感器/ 网络/ 调试/ 需要/ 研究/ 的/ 重要/ 内容/ ./ 在/ 概述/ 了/ 传感器/ 网络/ 调试/ 问题/ 之后/ ,/ 文章/ 总结/ 、/ 比较/ 了/ 传感器/ 网络/ 调试/ 过程/ 中/ 常用/ 的/ 系统/ 状态/ 信息/ 获取/ 技术/ ,/ 然后/ 从/ 故障/ 检测/ 、/ 故障/ 定位/ 和/ 故障/ 修复/ 3/ 个/ 方面/ 综述/ 了/ 代表性/ 关键技术/ 及/ 相关/ 工具/ ,/ 最后/ 探讨/ 了/ 该/ 领域/ 未来/ 的/ 研究/ 方向/ ./ 关键词/ 传感器/ 网络/ ;/ 调试/ ;/ 故障/ 检测/ ;/ 故障/ 定位/ ;/ 故障/ 修复/ ;/ 物/ 联网/ 1/ 引言/ 传感器/ 网络/ 是/ 实现/ 物/ 联网/ 的/ 重要/ 基础/ [/ 1/ ]/ ,/ 其/ 广泛/ 获取/ 客观/ 物理/ 信息/ 的/ 能力/ ,/ 使/ 它/ 在/ 环境监测/ 、/ 军事/ 侦察/ 、/ 医疗卫生/ 、/ 智能/ 人居/ 环境/ 及/ 抢险救灾/ 等/ 领域/ 具有/ 十分/ 广阔/ 的/ 应用/ 前景/ ./ 随着/ 技术/ 的/ 进步/ 和/ 研究/ 的/ Page2/ 速/ 有效/ 地/ 对/ 这些/ 故障/ 进行/ 检测/ ,/ 确定/ 故障/ 形成/ 的/ 原因/ 并/ 加以/ 修复/ ,/ 是/ 传感器/ 网络/ 需要/ 解决/ 的/ 关键问题/ 之一/ [/ 7/ ]/ ./ 调试/ 主要/ 涉及/ 故障/ 的/ 检测/ 、/ 定位/ 与/ 修复/ ./ 本文/ 综述/ 传感器/ 网络/ 调试/ 技术/ 的/ 研究进展/ ,/ 具体/ 结构/ 安排/ 如下/ :/ 第/ 2/ 节/ 概述/ 传感器/ 网络/ 调试/ 问题/ ;/ 第/ 3/ 节/ 介绍/ 故障/ 检测/ 与/ 定位/ 过程/ 中/ 涉及/ 的/ 主要/ 系统/ 状态/ 信息/ ,/ 并/ 对/ 常用/ 的/ 系统/ 状态/ 信息/ 获取/ 技术/ 进行/ 总结/ 与/ 比较/ ;/ 第/ 4/ 节/ 综述/ 当前/ 具有/ 代表性/ 的/ 故障/ 检测/ 、/ 定位/ 和/ 修复/ 技术/ ;/ 第/ 5/ 节/ 展望未来/ 的/ 研究/ 方向/ ;/ 第/ 6/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 传感器/ 网络/ 常见故障/ 及/ 评价/ 准则/ 2.1/ 常见故障/ 及/ 分类/ 本文/ 中/ 传感器/ 网络故障/ 是/ 指/ 系统/ 运行/ 过程/ 中/ 出现/ 的/ 不/ 希望/ 或/ 不可/ 接受/ 的/ 行为/ ./ 按照/ 系统/ 层次/ 关系/ ,/ 我们/ 可以/ 将/ 传感器/ 网络故障/ 从/ 高到/ 低/ ,/ 分为/ 应用/ 故障/ 、/ 网络故障/ 和/ 节点/ 故障/ 三类/ ,/ 表/ 1/ 对/ 各类/ 常见故障/ 进行/ 了/ 总结/ ./ 这里/ 低层次/ 故障/ 通常/ 会以/ 某种/ 形式/ 在/ 高层次/ 故障/ 中/ 反映/ ,/ 而/ 不同/ 低层次/ 故障/ 可能/ 会/ 表现/ 为/ 同一/ 高层次/ 的/ 形式/ ./ 例如/ ,/ 链路/ 失效/ 可能/ 是/ 节点/ 损毁/ 引起/ ,/ 也/ 有/ 可能/ 是/ 错误/ 软件/ 行为/ 所致/ ;/ 感知/ 数据/ 缺失/ 可能/ 是/ 网络/ 大量/ 丢包/ 造成/ ,/ 也/ 有/ 可能/ 是/ 路由/ 中/ 存在/ 环路/ 的/ 结果/ ./ 应用/ 故障/ 感知/ 数据/ 缺失/ ,/ 检测/ 延时/ 较长/ ,/ 生命期/ 过/ 短/ 这些/ 故障/ 产生/ 的/ 原因/ 主要/ 包括/ 环境/ 干扰/ 、/ 硬件/ 失效/ 和/ 软件/ 失效/ ./ 由/ 环境/ 干扰/ 和/ 硬件/ 失效/ 产生/ 的/ 故障/ 一般/ 可以/ 通过/ 容错/ 技术/ 消除/ 故障/ 的/ 影响/ ,/ 而/ 软件/ 失效/ 产生/ 的/ 故障/ ,/ 只有/ 在/ 软件缺陷/ 被/ 修复/ 后/ 才/ 可能/ 不会/ 继续/ 对系统/ 运行/ 造成/ 影响/ ./ 软件/ 失效/ 引发/ 的/ 故障/ 往往/ 因/ 系统资源/ 和/ 部署/ 环境/ 的/ 限制/ 而/ 难以/ 调试/ ,/ 本文/ 重点/ 研究/ 这/ 一类/ 故障/ 的/ 调试/ 问题/ ./ 2.2/ 问题/ 与/ 挑战/ 作为/ 一种/ 新型/ 的/ 感知/ 计算/ 方式/ ,/ 传感器/ 网络/ 具有/ 鲜明/ 的/ 特点/ ,/ 而/ 这些/ 特点/ 也/ 为/ 调试/ 提出/ 了/ 一系列/ 挑战/ ./ (/ 1/ )/ 与/ 物理/ 世界/ 紧密/ 耦合/ 传感器/ 网络/ 被/ 部署/ 在/ 物理/ 世界/ 中/ ,/ 在/ 无人/ 看护/ 的/ 情况/ 下/ 感知/ 环境/ 状况/ (/ 如/ 温度/ 、/ 空气质量/ 、/ 震动/ 等/ )/ ,/ 对/ 感知/ 数据/ 进行/ 处理/ 并/ 实时/ 地/ 做出/ 反应/ ./ 由于/ 与/ 物理/ 世界/ 紧密/ 偶合/ ,/ 传感器/ 网络/ 的/ 功能/ 和/ 行为/ 在/ 很大/ 程度/ 上/ 受到/ 部署/ 环境影响/ ./ 这/ 就/ 导致/ 部署/ 前/ 对系统/ 进行/ 的/ 各种/ 测试/ ,/ 仅能/ 对/ 实际/ 部署/ 后/ 系统/ 的/ 正确性/ 与/ 各项/ 性能参数/ 做出/ 一个/ 大致/ 评估/ ,/ 那些/ 部署/ 后/ 出现/ 的/ 问题/ 常常/ 无法/ 在/ 部署/ 前/ 的/ 测试/ 中/ 发现/ ./ 此外/ ,/ 有些/ 部署/ 环境/ 使/ 调试/ 工作/ 仅能/ 以/ 远程/ 方式/ 进行/ ,/ 这/ 也/ 为/ 传感器/ 网络/ 调试/ 带来/ 了/ 不少/ 困难/ ./ (/ 2/ )/ 资源/ 高度/ 受限/ 受/ 成本/ 、/ 体积/ 和/ 功耗/ 的/ 限制/ ,/ 传感器/ 节点/ 的/ 计算能力/ 、/ 存储空间/ 和/ 通信/ 带宽/ 都/ 比/ 传统/ 计算/ 方式/ 中/ 的/ 节点/ (/ 如/ 服务器/ 、/ 个人/ PC/ 、/ 手持/ 移动/ 设备/ 和/ 专用/ 嵌入式/ 设备/ 等/ )/ 要弱/ 很多/ ./ 此外/ ,/ 由于/ 节点/ 一般/ 靠/ 电池/ 驱动/ ,/ 而/ 很多/ 情况/ 下受/ 环境/ 和/ 节点/ 数量/ 的/ 限制/ ,/ 更换/ 电池/ 往往/ 不易/ 实现/ ,/ 这使/ 能源/ 成为/ 系统/ 中/ 最为/ 宝贵/ 的/ 资源/ ./ 系统/ 状态/ 可见度/ 是/ 指/ 调试/ 人员/ 观测/ 节点/ 程序/ 内部/ 状态/ 的/ 能力/ ,/ 是/ 实施/ 调试/ 的/ 重要/ 前提/ [/ 8/ -/ 10/ ]/ ./ 然而/ 可见度/ 和/ 资源/ 开销/ 之间/ 存在/ 着/ 根本/ 的/ 矛盾/ ,/ 外部/ 观测者/ 通过/ 与/ 节点/ 之间/ 的/ 通信/ 获得/ 节点/ 内部/ 状态/ ,/ 增加/ 可见度/ 意味着/ 将/ 引入/ 更/ 多/ 的/ 资源/ 开销/ ./ 传感器/ 网络资源/ 高度/ 受限/ 为/ 故障/ 的/ 检测/ 、/ 定位/ 和/ 修复/ 带来/ 了/ 巨大/ 的/ 挑战/ ./ (/ 3/ )/ 应用/ 相关性/ 与/ 构建/ 在/ 通用/ 网络协议/ 栈上/ 的/ 传统/ 分布式系统/ 不同/ ,/ 传感器/ 网络/ 要/ 根据/ 应用/ 在/ 功能/ 、/ 性能/ 、/ 部署/ 方式/ 和/ 部署/ 环境/ 等/ 方面/ 的/ 需求/ ,/ 对/ 通信协议/ 、/ 能量/ 管理/ 和/ 任务调度/ 等/ 系统/ 各个/ 部分/ 进行/ 定制/ 化/ 设计/ ./ 定制/ 化/ 设计/ 满足/ 了/ 应用/ 在/ 多方面/ 的/ 需求/ ,/ 然而/ 缺乏/ 通用/ 基础/ 软件/ 的/ 支持/ ,/ 意味着/ 传感器/ 网络/ 将/ 缺少/ 坚固/ 的/ 固件/ (/ firmfirmware/ [/ 11/ ]/ )/ ./ 由于/ 测试环境/ 与/ 部署/ 环境/ 的/ 差异/ ,/ 再/ 加上/ 适用/ 于/ 传感器/ 网络/ 测试方法/ 与/ 工具/ 的/ 欠缺/ ,/ 传感器/ 网络/ 部署/ 前/ 往往/ 缺乏/ 足够/ 的/ 测试/ ./ 因此/ 部署/ 后/ 的/ 系统/ 更/ 容易/ 受到/ 各类/ 故障/ 的/ 影响/ ./ (/ 4/ )/ 持续/ 运行/ 感知/ 数据/ 的/ 获取/ 是/ 支撑/ 上层/ 应用/ 的/ 关键/ ,/ 而/ 像/ 自然环境/ 监测/ 、/ 电网/ 设备/ 的/ 运行/ 管理/ 以及/ 水资源/ 质量/ 控制/ 等/ 应用/ ,/ 需要/ 对/ 相关/ 对象/ 或/ 过程/ 进行/ 不间断/ 地/ 监测/ ./ 因此/ 传感器/ 网络/ 需要/ 长期/ 持续/ 运行/ ,/ 为/ 上层/ 应用/ 提供/ 感知/ 数据/ ./ 故障/ 可能/ 发生/ 在/ 系统/ 运行/ 过程/ 中/ 的/ 任何/ 阶段/ ,/ 有时/ 为了/ 保证/ 传感器/ 网络/ 持续/ 运行/ ,/ 需要/ 避免/ 调试/ Page3/ 传感器/ 网络/ 调试/ 中/ ,/ 人们/ 比较/ 关注/ 的/ 评价/ 准则/ 时/ 的/ 探针/ 效应/ (/ probe/ -/ effect/ )/ ,/ 即要/ 在/ 尽量/ 不/ 影响/ 或/ 中断/ 系统/ 运行/ 的/ 前提/ 下/ 实施/ 系统/ 调试/ ./ 此外/ ,/ 长期/ 持续/ 运行/ 还会/ 使/ 传感器/ 网络/ 会/ 受到/ “/ 软件/ 衰退/ ”/ 的/ 影响/ [/ 12/ -/ 13/ ]/ ./ 这些/ 都/ 对/ 受/ 资源/ 以及/ 部署/ 环境/ 限制/ 的/ 传感器/ 网络/ 调试/ 提出/ 了/ 更/ 大/ 的/ 挑战/ ./ 2.3/ 调试/ 技术/ 的/ 评价/ 准则/ 包括/ 误报率/ 、/ 漏报/ 率/ 、/ 资源/ 开销/ 和/ 速度/ 等/ ./ (/ 1/ )/ 误报率/ 和/ 漏报/ 率/ ./ 误报/ 是/ 指当/ 系统/ 不/ 存在/ 某种/ 故障/ 时/ ,/ 故障/ 检测/ 报告/ 系统/ 可能/ 存在/ 某种/ 故障/ ./ 误报率/ 等于/ 误/ 报数/ 除以/ 故障/ 检测/ 总数/ ./ 漏报/ 是/ 指/ 系统/ 中/ 存在/ 某类/ 故障/ ,/ 而/ 故障/ 检测/ 没有/ 报告/ 该/ 故障/ ./ 漏报/ 率/ 等于/ 漏报/ 数/ 除以/ 故障/ 检测/ 总数/ ./ 误报率/ 和/ 漏报/ 率会/ 受/ 很多/ 因素/ 的/ 影响/ ,/ 如/ 检测/ 模型/ 以及/ 检测/ 信息/ 质量/ 等/ ./ 过多/ 误报/ 会/ 导致/ 大量/ 的/ 人工/ 分析/ ,/ 而/ 过/ 多/ 漏报/ 则/ 会/ 使/ 故障/ 检测/ 有效性/ 降低/ ./ 故障/ 检测/ 时/ 的/ 误报率/ 和/ 漏报/ 率越/ 小/ ,/ 则/ 表明/ 故障/ 检测/ 越好/ ./ 然而/ ,/ 误报率/ 和/ 漏报/ 率/ 之间/ 往往/ 存在/ 着/ 折中/ 关系/ ,/ 即/ 有时/ 降低/ 误报率/ 会/ 使/ 漏报/ 率/ 增加/ ,/ 反之/ 有时/ 降低/ 漏报/ 率/ 也/ 会/ 导致/ 误报率/ 升高/ ./ (/ 2/ )/ 资源/ 开销/ ./ 传感器/ 节点/ 资源/ 高度/ 受限/ ,/ 当/ 调试/ 需要/ 占用/ 节点/ 上/ 各类/ 资源/ 时/ ,/ 这些/ 资源/ 的/ 开销/ 将/ 成为/ 衡量/ 调试/ 技术/ 好坏/ 的/ 另一类/ 重要/ 评价/ 准则/ ./ 相关/ 资源/ 开销/ 包括/ 通信/ 开销/ 、/ 存储/ 开销/ (/ 包括/ 数据/ 存储/ 和/ 程序/ 存储/ )/ 、/ 计算/ 开销/ 和/ 能耗/ 开销/ ./ 由于/ 无线通信/ 是/ 传感器/ 网络/ 能耗/ 开销/ 的/ 主要/ 因素/ ,/ 因此/ 能耗/ 开销/ 一般/ 借助/ 通信/ 开销/ 间接/ 的/ 衡量/ ./ 系统/ 运行/ 时/ 的/ 状态/ 信息/ 是/ 故障/ 检测/ 和/ 定位/ 的/ 重要依据/ ,/ 这些/ 状态/ 信息/ 的/ 获取/ 是/ 资源/ 开销/ 的/ 主要/ 来源/ ./ 在/ 有限/ 的/ 资源/ 开销/ 与/ 足够/ 的/ 状态/ 信息/ 之间/ 进行/ 权衡/ ,/ 是/ 传感器/ 网络故障/ 检测/ 和/ 定位/ 需要/ 解决/ 的/ 一个/ 主要/ 问题/ ./ 当/ 通过/ 代码/ 更新/ 进行/ 故障/ 修复/ 时/ ,/ 则/ 需要/ 尽可能减少/ 更新/ 中/ 的/ 通信/ 开销/ ./ (/ 3/ )/ 速度/ ./ 如果/ 调试/ 涉及/ 大量/ 计算/ (/ 这里/ 通常/ 是/ 指非/ 传感器/ 节点/ 上/ 的/ 计算/ )/ ,/ 则/ 速度/ 也/ 是/ 衡量/ 某一/ 调试/ 技术/ 好坏/ 的/ 一个/ 重要/ 准则/ ./ 例如/ ,/ 在/ 使用/ 静态/ 分析/ 技术/ 对/ 传感器/ 网络/ 程序/ 进行/ 故障/ 检测/ 时/ ,/ 分布式系统/ 中/ 的/ 非/ 确定性/ 会/ 导致/ 状态/ 空间/ 爆炸/ 问题/ ,/ 一个/ 好/ 的/ 故障/ 检测/ 方法/ 需要/ 在/ 保证/ 较/ 低/ 误报率/ 和/ 漏报/ 率/ 的/ 前提/ 下/ ,/ 对/ 状态/ 空间/ 进行/ 有效/ 化简/ ,/ 提高/ 故障/ 检测/ 的/ 速度/ ./ 3/ 系统/ 状态/ 信息/ 的/ 获取/ 系统/ 运行/ 过程/ 中/ 的/ 状态/ 信息/ 是/ 实施/ 故障/ 检测/ 和/ 定位/ 的/ 重要依据/ ,/ 而/ 系统资源/ 上/ 的/ 限制/ 为/ 传感器/ 网络/ 状态/ 信息/ 获取/ 提出/ 了/ 挑战/ ./ 状态/ 信息/ 获取/ 包括/ 信息/ 的/ 输出/ 与/ 收集/ ./ 这/ 一节/ 我们/ 首先/ 介绍/ 传感器/ 网络/ 中/ 常用/ 的/ 系统/ 状态/ 信息/ ,/ 然后/ 从/ 状态/ 信息/ 的/ 输出/ 和/ 收集/ 两/ 方面/ 对/ 现有/ 相关/ 研究/ 进行/ 总结/ 与/ 比较/ ./ 3.1/ 系统/ 状态/ 信息/ 传感器/ 网络系统/ 状态/ 包括/ 单个/ 节点/ 状态/ 和/ 节点/ 之间/ 的/ 通信/ 状态/ ,/ 其中/ 单个/ 节点/ 状态/ 可/ 进一步/ 分为/ 硬件/ 状态/ 与/ 软件/ 状态/ ./ 3.1/ ./ 1/ 硬件/ 状态/ 硬件/ 状态/ 涉及/ 组成/ 节点/ 的/ 各个/ 元器件/ (/ 如/ 处理器/ 、/ 射频/ 芯片/ 和/ 传感器/ 等/ )/ ,/ 主要/ 包括/ 这些/ 器件/ 的/ 工作/ 状态/ 以及/ 可能/ 受/ 环境影响/ 而/ 变化/ 的/ 相关/ 特性/ 参数/ 等/ ./ 由于/ 节点/ 能耗/ 相对/ 容易/ 测量/ ,/ 且/ 能/ 反映/ 各个/ 器件/ 工作/ 状态/ 的/ 综合/ 情况/ ,/ 因此/ 成为/ 一种/ 常用/ 的/ 系统/ 状态/ 信息/ ./ 表/ 2/ 根据/ 数据/ 手册/ 给出/ 了/ IRIS/ 节点/ ①/ 主要/ 器件/ 不同/ 工作/ 状态/ 组合/ 时/ 的/ 综合/ 能耗/ 情况/ ,/ 可以/ 看出/ 利用/ 节点/ 详细/ 的/ 能耗/ 记录/ ,/ 调试/ 人员/ 可以/ 对/ 节点/ 行为/ 和/ 状态/ 进行/ 分析/ 与/ 推断/ ./ 表/ 2IRIS/ 节点/ 主要/ 器件/ 不同/ 状态/ 时/ 节点/ 能耗/ 情况/ MCURadioFlash/ 电流/ // mAsleepononononon3/ ./ 1.2/ 软件/ 状态/ 在/ 运行/ 过程/ 中/ ,/ 节点/ 存储器/ 和/ 寄存器/ 中/ 所有/ 时刻/ 的/ 内容/ ,/ 包含/ 了/ 软件/ 执行/ 时/ 的/ 主要/ 状态/ 信息/ ./ 根据/ 程序/ 不同/ 的/ 构建/ 方式/ ,/ 这些/ 内容/ 可以/ 进一步/ 被/ 映射/ 为/ 软件/ 不同/ 抽象层次/ 上/ 的/ 各种/ 状态/ 视图/ ,/ 例如/ 程序/ 计数器/ 的/ 变化/ 反映/ 了/ 机器/ 代码/ 的/ 执行/ 情况/ ,/ 而/ 这些/ 机器/ 代码/ 又/ 对应/ 着/ 上层/ 软件/ 抽象/ 中/ 的/ 不同/ 部分/ ./ 中断/ 的/ 执行/ 、/ 操作系统/ 中/ 任务/ 的/ 调度/ 、/ 程序/ 中/ 变量/ 的/ 修改/ 以及/ 函数/ 的/ 调用/ 执行/ ,/ 这些/ 视图/ 从/ 不同/ 的/ 层面/ 和/ 视角/ 反映/ 了/ 软件/ 的/ 执行/ 情况/ ,/ 包含/ 了/ 故障/ 检测/ 和/ 定位/ 所/ 需/ 的/ 关键/ 信息/ ./ 3.1/ ./ 3/ 通信/ 状态/ 通信/ 状态/ 包括/ 节点/ 之间/ 消息/ 交换/ 的/ 内容/ 和/ 交换/ 发生/ 的/ 时间/ ./ 节点/ 通过/ 消息传递/ 进行/ 协作/ ,/ 完成/ 特定/ 任务/ ,/ 通信/ 状态/ 影响/ 了/ 节点/ 自身/ 状态/ 以及/ 节点/ 间/ 的/ 交互/ ./ 例如/ ,/ 网络/ 中/ 簇首/ 的/ 选举/ 、/ 邻居/ 关系/ 的/ 确定/ 以/ ①/ IRIS/ ,/ wirelessmodules/ ./ http/ :/ // // www/ ./ memsic/ ./ comPage4/ 系统/ 状态/ 信息/ 输出/ 主要/ 包括/ 正常/ 输出/ 、/ 平台/ 接及/ 下/ 一/ 跳/ 路由/ 的/ 选择/ 等/ 都/ 会/ 受到/ 通信/ 状态/ 的/ 影响/ ./ 通信/ 状态/ 决定/ 了/ 网络/ 中/ 节点/ 之间/ 的/ 关系/ ,/ 这些/ 关系/ 一方面/ 可以/ 通过/ 分析/ 节点/ 之间/ 交换/ 的/ 消息/ 进行/ 推断/ ,/ 另一方面/ 也/ 可以/ 从/ 程序/ 中/ 存储/ 的/ 邻居/ 表/ 和/ 路由表/ 等/ 相关/ 数据结构/ 获得/ ./ 3.2/ 系统/ 状态/ 信息/ 的/ 输出/ 口/ 输出/ 和/ 插装/ 代码/ 输出/ 三种/ 方式/ [/ 14/ ]/ ./ 3.2/ ./ 1/ 正常/ 输出/ 传感器/ 网络/ 在/ 运行/ 过程/ 中/ 会/ 产生/ 一系列/ 输出/ ./ 这里/ 正常/ 输出/ 是/ 指/ :/ 系统/ 运行/ 过程/ 中非/ 调试/ 目的/ 的/ 、/ 必要/ 的/ 信息/ 输出/ ,/ 如/ 节点/ 上报/ 的/ 感知/ 数据/ 以及/ 网络/ 中/ 的/ 路由/ 维护/ 消息/ 等/ ./ 这些/ 正常/ 输出/ 信息/ ,/ 可以/ 用于/ 系统/ 状态/ 的/ 推断/ ,/ 如/ Suelo/ [/ 15/ ]/ 使用/ 节点/ 上报/ 的/ 传感器/ 数据/ 对/ 传感器/ 故障/ 进行/ 检测/ ,/ SNIF/ [/ 8/ ]/ 和/ LiveNet/ [/ 16/ ]/ 则/ 通过/ 无线/ 监听/ 得到/ 的/ 网络/ 消息/ ,/ 对/ 网络故障/ 和/ 性能/ 进行/ 检测/ 与/ 分析/ ./ 然而/ ,/ 受/ 资源/ 上/ 的/ 约束/ ,/ 传感器/ 网络/ 运行/ 过程/ 中/ 的/ 正常/ 输出/ 往往/ 非常/ 有限/ ./ 在/ 不/ 借助/ 无线/ 监听/ 和/ 其他/ 信息/ 输出/ 方式/ 时/ ,/ 通常/ 很难/ 对/ 传感器/ 网络/ 进行/ 调试/ ./ 针对/ 这一/ 问题/ ,/ 有/ 研究/ 人员/ 提出/ 使用/ 可见度/ (/ visibility/ )/ 准则/ 进行/ 传感器/ 网络协议/ 设计/ [/ 17/ -/ 19/ ]/ ,/ 以/ 克服/ 使用/ 正常/ 输出/ 进行/ 调试/ 的/ 局限/ ./ 3.2/ ./ 2/ 平台/ 接口/ 输出/ 为了/ 便于/ 调试/ ,/ 一般/ 系统/ 都/ 向/ 用户/ 提供/ 获取/ 额外/ 系统/ 状态/ 信息/ 的/ 接口/ ,/ 如/ Linux/ 的/ ptrace/ 系统/ 调用/ 以及/ Java/ 虚拟机/ 的/ JVMTI/ 接口/ 等/ ./ 然而/ ,/ 受/ 资源/ 以及/ 运行/ 时/ 修改/ 能力/ 的/ 限制/ ,/ 大多数/ 传感器/ 节点/ 操作系统/ 对/ 这方面/ 的/ 支持/ 较/ 少/ ,/ 且/ 提供/ 的/ 接口/ 功能/ 也/ 十分/ 有限/ ./ 例如/ ,/ TinyOS/ [/ 20/ ]/ 仅/ 提供/ CTP/ (/ Collec/ -/ tionTreeProtocol/ )/ 协议/ [/ 21/ ]/ 调试信息/ 的/ 获取/ 接口/ CollectionDebug/ ;/ Contiki/ [/ 22/ ]/ 的/ 远程/ Shell/ 则/ 允许/ 用/ 对/ 节点/ 运行/ 的/ 线程/ 、/ 能量消耗/ 和/ 简单/ 的/ 网络通信/ 情况/ 进行/ 查询/ ,/ 类似/ 的/ 还有/ BTNut/ [/ 23/ ]/ 和/ LiteOS/ [/ 24/ ]/ 提供/ 的/ Shell/ 接口/ ./ 通过/ 这些/ 接口/ ,/ 用户/ 可以/ 获取/ 一些/ 简单/ 的/ 调试信息/ ./ 3.2/ ./ 3/ 插装/ 代码/ 输出/ 正常/ 输出/ 和/ 平台/ 接口/ 提供/ 的/ 调试信息/ 非常/ 有限/ ,/ 特别/ 是/ 在/ 故障/ 定位/ 时/ ,/ 用户/ 往往/ 需要/ 更/ 多/ 相关/ 的/ 系统/ 内部/ 状态/ 信息/ 对/ 故障/ 位置/ 进行/ 分析/ ./ 插装/ 代码/ 可以/ 帮助/ 用户/ 获得/ 如/ 变量/ 状态/ 、/ 函数调用/ 记录/ 以及/ 堆栈/ 使用/ 情况/ 等/ 各类/ 系统/ 内部/ 状态/ ,/ 为/ 深入分析/ 故障/ 提供/ 帮助/ ./ (/ 1/ )/ 源码/ 插装/ ./ 源码/ 插装/ 是/ 指/ 通过/ 手工/ 或者/ 自动/ 方式/ 修改/ 程序/ 源代码/ ,/ 在/ 需要/ 实施/ 监测/ 的/ 位置/ 增加/ 相关/ 信息/ 输出/ 语句/ (/ 如/ 改变/ LED/ 状态/ 、/ 输出/ 信息/ 到/ 串口/ 或/ 增加/ 日志/ 记录/ 等/ )/ ,/ 例如/ 在/ 日志/ 中/ 记录/ 某一/ 变量/ 每次/ 被/ 修改/ 的/ 数值/ ./ 该/ 方法/ 在/ 实现/ 上/ 相对/ 简单/ 且/ 较为/ 灵活/ ,/ 但/ 插/ 装后/ 需要/ 对/ 源代码/ 进行/ 重新/ 编译/ ,/ 这/ 对/ 部署/ 后/ 系统/ 意味着/ 需要/ 更新/ 节点/ 上/ 的/ 二进制/ 代码/ ./ 更新/ 开销/ 过大/ 和/ 节点/ 重启/ 所/ 导致/ 的/ 相关/ 程序/ 状态/ 丢失/ ,/ 是/ 代码/ 更新/ 的/ 两个/ 主要/ 问题/ ./ 代码执行/ 方式/ 决定/ 了/ 代码/ 更新/ 时/ 的/ 数据传输/ 量/ ,/ 但/ 同时/ 也/ 会/ 限制/ 插装/ 方法/ 可/ 获得/ 的/ 调试信息/ 类型/ ,/ 即/ 代码/ 修改/ 能力/ ./ 例如/ ,/ 虽然/ 虚拟机/ [/ 25/ -/ 26/ ]/ 上/ 运行/ 的/ 字节/ 码/ 程序/ 相对/ 体积/ 较/ 小/ ,/ 但/ 这些/ 程序/ 的/ 插装/ 却/ 无法/ 获得/ 底层/ 虚拟机/ 相关/ 的/ 状态/ 信息/ ./ 此外/ ,/ 如果/ 代码/ 更新/ 涉及/ 到/ ROM/ 的/ 擦写/ ,/ 还会/ 受到/ MCU/ 编程/ 电压/ 的/ 限制/ ./ 依靠/ 普通/ 电池/ 供电/ 的/ 节点/ 电压/ 会/ 随/ 系统/ 运行/ 时间/ 的/ 增加/ 而/ 逐渐/ 降低/ ,/ 当/ 电压/ 低于/ 某一/ 阈值/ 后/ ,/ ROM/ 擦写/ 将/ 无法/ 实施/ ./ 最后/ ,/ 如果/ 代码/ 更新/ 需要/ 重启/ 节点/ ,/ 则/ 可能/ 造成/ 重要/ 调试信息/ 的/ 丢失/ (/ 如/ 故障/ 发生/ 时/ 错误/ 的/ 路由/ 状态/ 信息/ )/ ,/ 从而/ 增加/ 了/ 调试/ 难度/ 与/ 周期/ [/ 2/ ]/ ./ 本文/ 4.3/ ./ 1/ 节/ 详细/ 讨论/ 了/ 几类/ 主要/ 代码/ 更新/ 方式/ 在/ 修改/ 能力/ 、/ 更新/ 开销/ 和/ 是否/ 需要/ 重启/ 等/ 方面/ 的/ 特性/ ./ (/ 2/ )/ 目标/ 码/ 插装/ ./ 目标/ 码/ 插装/ 是/ 在/ 不/ 修改/ 源代码/ 的/ 情况/ 下/ 对/ 程序实施/ 插装/ 的/ 方法/ ./ 该/ 方法/ 主要/ 用于/ 对/ 运行/ 程序/ 的/ 动态/ 修改/ ,/ 也/ 可/ 用于/ 一些/ 无法/ 实施/ 源码/ 插装/ 的/ 情况/ ,/ 例如/ 对/ 无/ 源码/ 的/ 二进制/ 库/ 进行/ 插装/ ./ 在/ 目标/ 码中/ 插入/ 新/ 指令/ 的/ 同时/ ,/ 保证/ 原/ 目标/ 码中/ 指令/ 对/ 地址/ 以及/ 数据/ 的/ 引用/ 依然/ 有效/ 是/ 该/ 方法/ 实施/ 时/ 需要/ 解决/ 的/ 关键问题/ ./ Trampoline/ 是/ 目标/ 码/ 插装/ 的/ 一项/ 常用/ 技术/ [/ 27/ -/ 28/ ]/ ./ 假设/ 插/ 装点/ 程序/ 地址/ 为/ A/ ,/ 相应/ 的/ 指令/ 为/ I/ ,/ 则/ 插/ 装时/ 指令/ I/ 将/ 被/ 替换/ 为/ 指向/ 程序/ 中/ 某/ 一/ 特定/ 区域/ 的/ 跳转/ 指令/ ./ 特定/ 区域/ 包含/ 了/ 相关/ 状态/ 的/ 提取/ 代码/ 和/ 被/ 替换/ 的/ 指令/ I/ ,/ 该/ 区域/ 最后/ 的/ 跳转/ 指令/ 将/ 指向/ 原/ 地址/ A/ 处/ 指令/ I/ 的/ 下/ 一条/ 指令/ 地址/ ,/ 即/ A/ +/ sizeof/ (/ I/ )/ ./ 这种/ 方式/ 使/ 插装/ 代码/ 在/ 不/ 改变/ 原先/ 代码/ 逻辑/ 的/ 前提/ 下/ ,/ 可以/ 获取/ 程序运行/ 时/ 的/ 相关/ 状态/ 信息/ ./ 动态/ 目标/ 码/ 插装/ 避免/ 了/ 源码/ 插装/ 中/ 代码/ 编译/ 和/ 更新/ 的/ 步骤/ ,/ 同时/ 也/ 防止/ 了/ 因/ 重启/ 而/ 导致/ 的/ 状态/ 丢失/ ./ 但/ 由于/ 涉及/ 机器指令/ 的/ 修改/ ,/ 与/ 源码/ 插装/ 相比/ ,/ 该/ 方法/ 实现/ 时/ 较为/ 复杂/ 且/ 通用性/ 差/ ./ 与/ 源码/ 插装/ 类似/ ,/ 如果/ 目标/ 插装/ 涉及/ 到/ ROM/ 改写/ ,/ 则/ 还/ 会/ 受到/ MCU/ 编程/ 电压/ 的/ 限制/ ./ (/ 3/ )/ 调用/ 截取/ ./ 调用/ 截取/ 是/ 通过/ 调用者/ 与/ 被/ 调用者/ 之间/ 安插/ 的/ 截取/ 器/ ,/ 获取/ 二者/ 间/ 的/ 传递/ 消息/ ,/ 并/ 完成/ 特定/ 处理/ 工作/ 的/ 一种/ 插装/ 方法/ ,/ 常/ 被/ 用于/ 性能/ Page5/ 参数/ 收集/ 和/ 调试/ 等/ 领域/ [/ 14/ ]/ ./ 由于/ 调用/ 截取/ 方法/ 通常/ 不/ 需要/ 对/ 目标程序/ 进行/ 修改/ ,/ 与/ 其他/ 方法/ 相比/ 其/ 代码/ 入侵/ 性/ 较弱/ ,/ 但/ 仅/ 能/ 获取/ 和/ 修改/ 函数/ 之间/ 传递/ 的/ 信息/ ./ 对于/ 支持/ 运行/ 时/ 模块/ 动态/ 加载/ 的/ 传感器/ 节点/ 操作系统/ 如/ Contiki/ [/ 22/ ]/ 和/ SOS/ [/ 29/ ]/ 等/ ,/ 动态/ 调用/ 截取/ 可以/ 通过/ 系统/ 提供/ 的/ 运行/ 时/ 链接/ 实现/ [/ 30/ ]/ ./ 当/ 操作系统/ 不/ 具备/ 这样/ 的/ 功能/ 时/ ,/ 也/ 可/ 利用/ 目标/ 码/ 插装/ 加以/ 实现/ [/ 31/ ]/ ,/ 但/ 较/ 前者/ 复杂/ ./ 3.3/ 系统/ 状态/ 信息/ 的/ 收集/ 传感器/ 网络资源/ 以及/ 部署/ 环境/ 的/ 限制/ 为/ 调试/ 时/ 的/ 状态/ 信息/ 收集/ 带来/ 了/ 挑战/ ,/ 可/ 使用/ 的/ 收集/ 方式/ 极其/ 有限/ ./ 常见/ 的/ 收集/ 方式/ 有/ 以下/ 四种/ :/ 带内/ 收集/ 、/ 本地/ 存储/ 、/ 网络/ 监听/ 和/ 带外/ 收集/ [/ 9/ ]/ ./ 表/ 3/ 对/ 不同/ 收集/ 方式/ 的/ 特性/ 进行/ 了/ 总结/ ./ 带内/ 收集/ 低/ 高高/ 否否/ 本地/ 存储/ 高低/ 高否否/ 网络/ 监听/ 低低/ 中否/ 是/ 带外/ 收集/ 高低/ 低/ 是/ 是/ 3.3/ ./ 1/ 带内/ 收集/ 带内/ 收集/ 利用/ 传感器/ 网络/ 自身/ 无线/ 传输/ 带宽/ 将/ 收集/ 的/ 数据/ 发送/ 回/ 基站/ ./ 带内/ 收集/ 可以/ 使用/ 应用程序/ 已有/ 的/ 路由/ ,/ 但/ 有时/ 为了/ 避免/ 应用/ 失效/ 对/ 数据/ 收集/ 的/ 影响/ ,/ 也/ 可以/ 使用/ 独立/ 于/ 应用/ 的/ 收集/ 协议/ [/ 32/ ]/ ./ 带内/ 收集/ 不/ 需要/ 额外/ 基础设施/ 或硬件/ 的/ 支持/ ,/ 是/ 最/ 常用/ 有时/ 甚至/ 是/ 唯一/ 的/ 收集/ 方式/ ,/ 但/ 这种/ 方式/ 会/ 占用/ 传感器/ 网络/ 的/ 传输/ 带宽/ 并/ 可能/ 对/ 应用/ 产生/ 影响/ ./ 因此/ 在/ 使用/ 带内/ 收集/ 方式/ 时/ ,/ 往往/ 尽可能/ 的/ 通过/ 聚合/ [/ 33/ ]/ 、/ 捎带/ [/ 34/ ]/ 、/ 分布式/ 处理/ [/ 35/ -/ 36/ ]/ 以及/ 优化/ 轻量级/ 监测/ 方案/ [/ 37/ ]/ 等/ 手段/ 减少/ 带内/ 传输/ 开销/ ./ 3.3/ ./ 2/ 本地/ 存储/ 本地/ 存储/ 将/ 收集/ 的/ 数据/ 保存/ 在/ 传感器/ 节点/ Flash/ 存储器/ 中/ ,/ 供/ 事后/ 提取/ 与/ 分析/ ./ 与/ 带/ 内/ 收集/ 相比/ ,/ 本地/ 存储/ 在/ 信息/ 记录/ 过程/ 中/ 不/ 产生/ 额外/ 的/ 通信/ 开销/ ,/ 所以/ 不会/ 对/ 应用/ 通信/ 造成/ 太/ 大/ 影响/ ./ 其/ 调试信息/ 收集/ 主要/ 受到/ 存储器/ 容量/ 的/ 限制/ ./ 对于/ 本地/ 存储/ 信息/ ,/ 其/ 处理/ 方式/ 可/ 分为/ 集中/ 和/ 分布式/ 两种/ :/ 集中式/ 处理/ 需要/ 将/ 节点/ Flash/ 中/ 的/ 信息/ ,/ 通过/ 串口/ 或者/ 无线/ 方式/ 全部/ 提取/ 后/ 进行/ 集中式/ 的/ 处理/ ./ 串口/ 提取/ 方式/ 不会/ 对/ 网络通信/ 造成/ 影响/ ,/ 但/ 要求/ 节点/ 是/ 物理/ 可/ 接触/ 的/ ;/ 无线/ 方式/ 提取/ 时/ ,/ 可以/ 使用/ 独立/ 信道/ 或者/ 移动/ 基站/ 减小/ 数据/ 提取/ 过程/ 对/ 网络通信/ 的/ 影响/ ,/ 然而/ 过多/ 的/ 数据/ 仍会/ 产生/ 过大/ 的/ 通信/ 开销/ ./ 分布式/ 处理/ 将/ 部分/ 调试/ 分析/ 工作/ 交由/ 节点/ 完成/ [/ 38/ ]/ ,/ 克服/ 了/ 集中式/ 处理/ 数据/ 提取/ 开销/ 过大/ 的/ 问题/ ./ 随着/ 低功耗/ 、/ 大容量/ 存储设备/ 在/ 传感器/ 节点/ 上/ 应用/ 和/ 普及/ [/ 39/ ]/ 以及/ 节点/ 上/ 功能/ 更加/ 强大/ 的/ 轻量级/ 文件系统/ 如/ Coffee/ [/ 40/ ]/ 和/ 数据库/ 的/ 出现/ [/ 41/ ]/ ,/ 利用/ 节点/ 本地/ 存储/ 和/ 计算能力/ 进行/ 分布式/ 的/ 调试/ 将/ 成为/ 未来/ 传感器/ 网络/ 调试/ 的/ 一个/ 研究/ 热点/ ./ 3.3/ ./ 3/ 网络/ 监听/ 网络/ 监听/ 借助/ 无线/ 信道/ 共享/ 特性/ ,/ 使用/ 额外/ 部署/ 的/ 监听/ 节点/ (/ sniffer/ )/ 进行/ 数据/ 收集/ ./ 该/ 技术/ 最早/ 被/ 应用/ 于/ WLAN/ 的/ 监测/ 与/ 分析/ [/ 42/ ]/ ,/ 可以/ 在/ 最大/ 程度/ 上/ 减少/ 数据/ 收集/ 过程/ 对/ 原有/ 系统/ 的/ 影响/ ./ 根据/ 监听/ 节点/ 能力/ 的/ 不同/ ,/ 监听/ 可/ 分为/ 在线/ [/ 8/ ]/ 和/ 离线/ [/ 16/ ]/ 两种/ 模式/ ./ 在线/ 监听/ 节点/ 一般/ 配备/ 能力/ 较/ 强且/ 不会/ 对/ 传感器/ 网络通信/ 造成/ 干扰/ 的/ 通信/ 模块/ (/ 如/ WLAN/ 或/ 蓝牙/ 等/ )/ ,/ 可以/ 将/ 监听/ 到/ 的/ 数据/ 实时/ 传送/ 回/ 数据处理/ 中心/ ./ 离线/ 监听/ 节点/ 与/ 普通/ 节点/ 类似/ ,/ 将/ 监听/ 到/ 的/ 消息/ 存储/ 到/ 本地/ Flash/ 中供/ 事后/ 分析/ ,/ 但/ 用户/ 需要/ 解决/ 监听/ 节点/ 的/ 回收/ 或/ 监听/ 数据/ 的/ 提取/ 问题/ ./ 除了/ 网络通信/ 时/ 产生/ 的/ 正常/ 输出/ 外/ ,/ 用户/ 还/ 可以/ 让/ 节点/ 利用/ 带内/ 通信/ 以/ 广播/ 的/ 形式/ 向/ 监听/ 节点/ 发送/ 程序/ 内部/ 状态/ ,/ 这种/ 方法/ 与/ 带/ 内/ 收集/ 方式/ 相比/ 具有/ 更/ 小/ 的/ 开销/ ,/ 且/ 调试/ 时/ 对系统/ 的/ 影响/ 较/ 小/ [/ 9/ ]/ ./ 采用/ 监听/ 方式/ 进行/ 数据/ 收集/ 时/ ,/ 关键/ 要/ 解决/ 多个/ 监听/ 节点/ 记录/ 的/ 同步/ 问题/ 以及/ 监听/ 丢包/ 导致/ 的/ 非/ 确定/ 状态/ 的/ 推断/ 问题/ [/ 9/ ,/ 43/ ]/ ./ 3.3/ ./ 4/ 带外/ 收集/ 带外/ 收集/ 是/ 指/ 利用/ 节点/ 无线/ 传输/ 以外/ 方式/ (/ 如/ 串口/ )/ 进行/ 的/ 数据/ 收集/ ,/ 该/ 方式/ 一般/ 需要/ 进行/ 节点/ 硬件/ 上/ 的/ 附加/ 连接/ 或/ 修改/ ./ 与/ 其他/ 方式/ 相比/ ,/ 带外/ 收集/ 一般/ 具有/ 较/ 高/ 的/ 数据传输/ 带宽/ ,/ 且/ 不会/ 影响/ 应用/ 的/ 通信/ ./ 带外/ 收集/ 是/ 测试台/ (/ Testbed/ )/ 中/ 最/ 常见/ 的/ 数据/ 收集/ 方式/ [/ 44/ -/ 46/ ]/ ./ 除了/ 测试台/ ,/ 带外/ 传输/ 也/ 可/ 用于/ 部署/ 后/ 系统/ 状态/ 信息/ 的/ 收集/ ./ 例如/ ,/ Khan/ 等/ 人/ [/ 47/ ]/ 使用/ 附加/ 的/ 低成本/ 无线/ 传输/ 模块/ 收集/ 节点/ 能耗/ 使用/ 情况/ ,/ 并/ 利用/ 这些/ 信息/ 对/ 节点/ 能量/ 耗尽/ 、/ 天线/ 损坏/ 、/ 系统/ 崩溃/ 和/ 异常/ 重启/ 等/ 故障/ 进行/ 检测/ ./ 4/ 关键技术/ 4.1/ 故障/ 检测/ 故障/ 检测/ 是/ 故障/ 定位/ 和/ 修复/ 的/ 前提/ ,/ 主要/ 包括/ 数据/ 故障/ 检测/ 、/ 网络故障/ 检测/ 和/ 软件/ 故障/ 检测/ 三类/ ./ 4.1/ ./ 1/ 数据/ 故障/ 检测/ 作为/ 数据/ 型/ 网络/ ,/ 感知/ 数据/ 的/ 正确性/ 对/ 传感器/ Page6/ 网络应用/ 尤为重要/ ./ 为了/ 获取/ 物理/ 世界/ 信息/ ,/ 传感器/ 网络/ 通常/ 被/ 部署/ 在/ 无人/ 看护/ 的/ 户外/ 或者/ 环境/ 较为/ 恶劣/ 的/ 区域/ ,/ 这/ 使得/ 感知/ 数据/ 质量/ 很/ 容易/ 受到/ 部署/ 环境/ 的/ 影响/ ./ 如果/ 传感器/ 上报/ 数据/ 与/ 实际/ 物理现象/ 不/ 一致/ ,/ 我们/ 则/ 认为/ 发生/ 了/ 数据/ 故障/ [/ 48/ ]/ ./ 硬件/ 故障/ 、/ 连接/ 失效/ 、/ 校准/ 参数/ 的/ 漂移/ 、/ 环境/ 噪音/ 以及/ 软件缺陷/ 都/ 会/ 导致/ 数据/ 故障/ ./ 故障/ 数据/ 的/ 处理/ 和/ 传输/ 会/ 浪费/ 系统资源/ ,/ 更/ 重要/ 的/ 是/ 大量/ 故障/ 数据/ 会/ 导致/ 应用/ 本身/ 无法/ 正常/ 工作/ ./ 数据/ 本身/ 的/ 属性/ (/ 如/ 最大值/ 、/ 最小值/ 和/ 变化率/ 等/ )/ 以及/ 多个/ 数据/ 点/ 在/ 时空/ 上/ 的/ 约束/ 关系/ (/ 如同/ 一/ 时刻/ 相邻/ 位置/ 或者/ 同一/ 位置/ 相邻/ 时刻/ 的/ 温度/ 具有/ 相关性/ )/ 是/ 数据/ 故障/ 检测/ 的/ 主要/ 依据/ ./ 分布式/ 数据/ 故障/ 检测/ 可以/ 减少/ 因/ 错误/ 读数/ 传输/ 产生/ 的/ 额外/ 开销/ ,/ 但/ 检测/ 算法/ 复杂度/ 会受/ 传感器/ 节点/ 资源/ 限制/ ./ Gao/ 等/ 人/ [/ 49/ ]/ 通过/ 节点/ 数据/ 与/ 邻居/ 节点/ 数据/ 的/ 加权/ 中/ 值/ 比较/ 进行/ 故障/ 检测/ ,/ 并/ 根据/ 检测/ 结果/ 更新/ 权值/ 提高/ 检测/ 方法/ 对/ 动态/ 故障/ 的/ 适应性/ ./ Rajagopal/ 等/ 人/ [/ 50/ ]/ 则/ 提出/ 利用/ 节点/ 与/ 邻居/ 感知/ 数据/ 在/ 相关性/ 上/ 的/ 突变/ 进行/ 数据/ 故障/ 检测/ ./ 类似/ 的/ 分布式/ 数据/ 故障/ 检测/ 研究/ 还有/ 很多/ ,/ 但/ 这些/ 研究/ 大部分/ 没有/ 考虑/ 故障/ 检测/ 算法/ 在/ 实际/ 节点/ 上/ 应用/ 的/ 开销/ ,/ 因此/ 适用范围/ 也/ 具有/ 一定/ 的/ 局限性/ ./ Ni/ 等/ 人/ [/ 48/ ]/ 认为/ 虽然/ 分布式/ 处理/ 有助于/ 减少/ 总/ 通信/ 开销/ ,/ 但/ 融合/ 中心/ 相关/ 信息/ 减少/ ,/ 会/ 导致/ 故障/ 决策/ 可信度/ 降低/ ./ 此外/ ,/ 由于/ 集中式/ 检测/ 可以/ 借助/ 大量/ 历史数据/ 以及/ 高性能/ 计算/ 设备/ 对/ 数据/ 进行/ 处理/ 和/ 分析/ ,/ 因此/ Ni/ 等/ 人认/ 集中式/ 数据/ 故障/ 检测/ 较/ 分布式/ 更具/ 实用性/ ./ Sharma/ 等/ 人/ [/ 51/ ]/ 针对/ 文献/ [/ 48/ ]/ 中/ 总结/ 的/ 传感器/ 网络/ 典型/ 数据/ 故障/ 提出/ 了/ 基于/ 规则/ 、/ 基于/ 估计/ 、/ 基于/ 学习/ 以及/ 混合/ 等/ 4/ 种/ 具有/ 代表性/ 的/ 集中式/ 故障/ 检测/ 方法/ ./ 实验/ 表明/ 在/ 中/ 高度/ 故障率/ 情况/ 下/ ,/ 这/ 4/ 种/ 方法/ 均/ 具有/ 较/ 高/ 的/ 检测/ 效力/ ,/ 而/ 其他/ 情况/ 下/ 的/ 检测/ 效力/ 则/ 依赖于/ 故障/ 的/ 类型/ ./ 为了/ 解决/ 因/ 土壤/ 传感器/ 不/ 可靠/ 导致/ 的/ 读数/ 或者/ 校准/ 失效/ 问题/ ,/ Suelo/ [/ 15/ ]/ 首先/ 将/ 感知/ 数据/ 变换/ 为/ 故障/ 特征/ 空间/ 中/ 的/ 向量/ ,/ 然后/ 依据/ 已知/ 故障/ 数据库/ 向/ 用户/ 指示/ 需要/ 采取/ 的/ 相关/ 措施/ (/ 如/ 校准/ 、/ 验证/ 读数/ 等/ )/ ,/ 最后/ 用户/ 根据/ 传感器/ 的/ 实际/ 情况/ 对/ 故障/ 数据库/ 进行/ 更新/ ,/ 从而/ 达到/ 对/ 故障/ 检测/ 系统/ 改进/ 与/ 优化/ ./ FIND/ [/ 52/ ]/ 则/ 通过/ 将/ 多个/ 节点/ 感知/ 数据/ 实际/ 测量/ 结果/ 排序/ ,/ 并/ 将/ 该/ 排序/ 与/ 根据/ 节点/ 位置/ 关系/ 得到/ 的/ 理论/ 排序/ 相对/ 比/ ,/ 对/ 数据/ 故障/ 进行/ 检测/ ./ 4.1/ ./ 2/ 网络故障/ 检测/ 传感器/ 网络/ 常用/ 于/ 收集/ 分布/ 于/ 空间/ 与/ 时间/ 上/ 的/ 各种/ 物理/ 世界/ 信息/ ,/ 网络/ 的/ 正常/ 与否/ 直接/ 影响/ 到/ 这些/ 信息/ 的/ 收集/ ./ 网络故障/ 检测/ 重点/ 研究/ 网络通信/ 中如/ 链路/ 失效/ 、/ 网络/ 拥塞/ 和/ 节点/ 失效/ 等/ 相关/ 问题/ 的/ 检测/ ./ 这里/ 网络故障/ 检测/ 是从/ 网络通信/ 的/ 角度/ 出发/ 解释/ 系统/ 不能/ 完成/ 某项/ 数据传输/ 任务/ 的/ 原因/ ,/ 也/ 就是/ 常说/ 的/ 网络/ 故障诊断/ ./ 例如/ ,/ 网络故障/ 检测/ 可以/ 确定/ 数据/ 丢包/ 是/ 由/ 某些/ 节点/ 异常/ 行为/ 导致/ 的/ 网络/ 拥塞/ 所/ 造成/ 的/ ,/ 但/ 一般/ 不/ 关心/ 导致/ 这些/ 节点/ 异常/ 行为/ 的/ 软件缺陷/ 是/ 什么/ ./ 正如/ 2.2/ 节所/ 讨论/ 的/ 那样/ ,/ 应用/ 相关/ 产生/ 的/ 定制/ 化/ 设计/ 以及/ 环境/ 对系统/ 的/ 影响/ ,/ 使/ 传感器/ 网络/ 的/ 网络通信/ 更/ 容易/ 受到/ 软件缺陷/ 的/ 影响/ ,/ 因此/ 网络故障/ 检测/ 与/ 调试/ 密切相关/ ./ 网络故障/ 检测/ 主要/ 可/ 分为/ 主动/ 监测/ 和/ 被动/ 监听/ 两类/ ./ (/ 1/ )/ 基于/ 主动/ 监测/ 的/ 故障/ 检测/ 有限/ 的/ 能量/ 和/ 传输/ 带宽/ ,/ 使得/ 基站/ 接收/ 的/ 感知/ 数据/ 往往/ 成为/ 网络故障/ 检测/ 仅/ 有/ 的/ 依据/ ,/ 然而/ 这些/ 数据/ 提供/ 的/ 信息/ 十分/ 有限/ ./ 主动/ 监测/ 通过/ 收集/ 额外/ 的/ 网络通信/ 参数/ 解决/ 网络故障/ 检测/ 信息/ 不足/ 的/ 问题/ ./ Sympathy/ [/ 53/ ]/ 根据/ 传感器/ 网络/ 数据通信/ 特点/ ,/ 提出/ 了/ 一组/ 与/ 网络/ 连通性/ 、/ 网络/ 数据流/ 和/ 节点/ 相关/ 的/ 监测/ 参数/ 用于/ 网络故障/ 检测/ ./ 利用/ 收集/ 到/ 的/ 参数/ 以及/ 相关/ 决策树/ 算法/ ,/ 用户/ 可以/ 对/ 几种/ 常见/ 的/ 网络故障/ 进行/ 检测/ ./ 该/ 方法/ 简单/ 实用/ ,/ 适用/ 于/ 大部分/ 数据/ 收集/ 类/ 应用/ ,/ 可/ 检测/ 网络/ 中/ 节点/ 的/ 失效/ 、/ 重启/ 、/ 邻居/ 缺失/ 和/ 路由/ 失效/ 等/ 故障/ ,/ 但/ 缺点/ 是/ 相关/ 参数/ 收集/ 产生/ 的/ 通信/ 开销/ 较大/ ./ 针对/ Sympathy/ 故障/ 检测/ 开销/ 过大/ 的/ 问题/ ,/ Wachs/ 等/ 人/ [/ 19/ ]/ 提出/ 从/ 协议/ 设计/ 出发/ ,/ 减少/ 网络故障/ 检测/ 时/ 的/ 可见/ 性/ 开销/ ./ Wachs/ 等/ 人/ 将/ 可见/ 性/ 开销/ 定义/ 为/ 对/ 每种/ 故障/ 发生/ 概率/ 与/ 检测/ 出该/ 故障/ 所/ 需/ 能耗/ 开销/ 乘积/ 的/ 和/ ./ 通过/ 对/ 协议/ 的/ 重新/ 设计/ ,/ 减少/ 协议/ 的/ 可见/ 性/ 开销/ ,/ 实现/ 对/ 故障/ 检测/ 开销/ 的/ 优化/ ./ 然而/ ,/ 重新/ 设计协议/ 的/ 方法/ 并不一定/ 适用/ 于/ 大多数/ 情况/ ./ 针对/ 数据/ 收集/ 类/ 应用/ ,/ PAD/ [/ 19/ ]/ 提出/ 了/ 一种/ 轻量级/ 的/ 故障/ 检测/ 方法/ ./ 该/ 方法/ 首先/ 利用/ 轻量级/ 数据包/ 标记/ 策略/ ,/ 得到/ 网络拓扑/ 和/ 一些/ 初步/ 网络/ 运行/ 信息/ (/ 如/ 网络拓扑/ 和/ 路由/ 相关/ 信息/ )/ ,/ 其次/ 根据/ 这些/ 初步/ 的/ 结果/ 得到/ 网络/ 元素/ 的/ 依赖/ 关系/ 图/ 和/ 推断/ 模型/ ,/ 然后/ 使用/ 观测/ 到/ 的/ 症状/ 作为/ 推断/ 模型/ 输入/ ,/ 计算/ 在/ 某/ 一/ 故障/ 条件/ 下/ ,/ 网络/ 中/ 不同/ 元素/ 发生/ 故障/ 的/ 后验/ 概率/ ,/ 最后/ 通过/ 各种/ 故障/ 后验/ 概率/ 的/ 比较/ 实施/ 故障/ 检测/ ./ 基于/ 特定/ 模型/ 的/ 分析方法/ 通常/ 只能/ 处理/ 已知/ 的/ 故障/ ,/ AD/ [/ 54/ ]/ 提出/ 借助/ 相关/ 图/ (/ correlationgraph/ )/ 进行/ 故障/ 检测/ ,/ 其中/ 相关/ 图/ 描述/ 了/ 节点/ 各个/ 参数/ 在/ 一/ Page7/ 段时间/ 内/ 的/ 统计/ 上互/ 相关性/ ./ 文章/ 认为/ 在/ 网络/ 正常/ 运行/ 情况/ 下/ ,/ 同一/ 节点/ 不同/ 时刻/ 的/ 相关/ 图/ 具有/ 时间/ 相关性/ ,/ 而/ 同一/ 时刻/ 不同/ 节点/ 的/ 相关/ 图/ 具有/ 空间/ 相关性/ ./ AD/ 通过/ 相关/ 图/ 在/ 时间/ 与/ 空间/ 上/ 的/ 突变/ 检测/ 实现/ 网络故障/ 的/ 检测/ ./ 该/ 方法/ 开销/ 较/ 小/ ,/ 适用/ 于/ 数据/ 收集/ 类/ 应用/ 的/ 网络故障/ 检测/ ,/ 但/ 可能/ 并/ 不适/ 用于/ 应用/ 场景/ 较为/ 复杂/ 的/ 情况/ (/ 如/ 目标/ 跟踪/ )/ ./ (/ 2/ )/ 基于/ 被动/ 监听/ 的/ 故障/ 检测/ 利用/ 无线/ 传输/ 介质/ 共享/ 的/ 特性/ ,/ 被动/ 监听/ 可以/ 在/ 完全/ 不/ 影响/ 应用/ 本身/ 的/ 情况/ 下/ ,/ 收集/ 用于/ 故障/ 检测/ 的/ 信息/ ./ 在/ 允许/ 部署/ 额外/ 监听/ 节点/ 的/ 情况/ 下/ ,/ 监听/ 节点/ 收集/ 的/ 各种/ 网络通信/ 消息/ 可以/ 为/ 网络/ 的/ 性能/ 分析/ 与/ 故障/ 检测/ 提供/ 足够/ 的/ 信息/ ./ SNIF/ [/ 8/ ]/ 允许/ 用户/ 利用/ 监听/ 到/ 的/ 数据包/ 对/ 监测/ 类/ 传感器/ 网络应用/ 的/ 网络故障/ 进行/ 检测/ ./ 根据/ 监听/ 到/ 数据包/ 中/ 的/ 特定/ 字/ 段/ ,/ SNIF/ 可以/ 对/ 节点/ 死亡/ 和/ 重启/ 、/ 邻居/ 缺失/ 、/ 路由/ 环路/ 、/ 网络/ 断裂/ 等/ 故障/ 进行/ 检测/ ./ 例如/ ,/ 数据包/ 中/ 序列号/ (/ sequencenumber/ )/ 的/ 重置/ 表明/ 节点/ 重启/ ,/ 一段时间/ 内/ 链路/ 广播/ 中/ 不/ 包含/ 任何/ 邻居/ 信息/ ,/ 则/ 表明/ 节点/ 邻居/ 缺失/ ./ 此外/ ,/ 用户/ 还/ 可以/ 利用/ SNIF/ 提供/ 的/ 面向/ 数据流/ 的/ 分析/ 框架/ 实现/ 自定义/ 的/ 故障/ 检测/ ./ 基于/ 监听/ 的/ 网络故障/ 检测/ 的/ 类似/ 研究/ 还有/ 很多/ [/ 16/ ,/ 43/ ,/ 55/ ]/ ,/ 其/ 区别/ 主要/ 体现/ 在/ 监听/ 数据/ 获取/ 与/ 处理/ 方式/ 上/ 的/ 不同/ ./ 4.1/ ./ 3/ 软件/ 故障/ 检测/ 传感器/ 网络/ 中/ 很大/ 一部分/ 故障/ 与/ 软件缺陷/ 有关/ ,/ 如果/ 能/ 在/ 软件/ 层面/ 尽早/ 检测/ 出/ 故障/ ,/ 则/ 会/ 减少/ 后期/ 故障/ 定位/ 的/ 难度/ ./ 因此/ 有效/ 的/ 软件/ 故障/ 检测/ 技术/ 可以/ 在/ 很大/ 程度/ 上/ 解决/ 传感器/ 网络故障/ 定位问题/ ./ (/ 1/ )/ 基于/ 测试/ 的/ 故障/ 检测/ 测试/ 是/ 系统/ 部署/ 前/ 故障/ 检测/ 的/ 主要/ 手段/ ,/ 测试环境/ 的/ 相对/ 可控性/ ,/ 使/ 部署/ 前/ 的/ 故障/ 检测/ 较/ 部署/ 后/ 更为/ 容易/ ./ 然而/ ,/ 测试环境/ 与/ 实际/ 部署/ 环境/ 的/ 差异/ 以及/ 现有/ 测试方法/ 在/ 应用/ 于/ 传感器/ 网络/ 测试/ 时/ 的/ 各种/ 不足/ ,/ 很大/ 程度/ 上/ 降低/ 了/ 部署/ 前/ 测试/ 对/ 软件/ 故障/ 检测/ 的/ 有效性/ ./ 针对/ 这一/ 问题/ ,/ 基于/ 测试/ 的/ 故障/ 检测/ 一方面/ 需要/ 尽可能/ 减小/ 测试环境/ 与/ 部署/ 环境/ 的/ 差异/ ,/ 另一方面/ 需要/ 根据/ 传感器/ 网络/ 特点/ 对/ 传统/ 测试方法/ 进行/ 改进/ ./ 表/ 4/ 不同/ 测试环境/ 可扩展性/ 与/ 真实度/ 的/ 对比/ 可扩展性/ +++++++++/ 真实性/ ++++++++++/ 在/ 测试环境/ 方面/ ,/ 通用/ 网络/ 模拟器/ 如/ ns/ -/ 2/ ①/ 等/ 可以/ 用于/ 系统/ 设计/ 初期/ 网络协议/ 的/ 性能/ 分析/ 与/ 评价/ ,/ 但/ 通用/ 模拟器/ 存在/ 两点/ 不足/ ./ 首先/ ,/ 开发人员/ 需要/ 对/ 协议/ 进行/ 二次/ 实现/ ;/ 其次/ ,/ 二次/ 实现/ 代码/ 在/ 实际/ 运行/ 前/ 缺乏/ 有效/ 的/ 验证/ 手段/ ./ 这/ 大大增加/ 了/ 系统/ 实际/ 运行/ 时/ 出现/ 故障/ 的/ 可能/ ,/ 从而/ 加重/ 后续/ 的/ 系统/ 调试/ 工作/ ./ 针对/ 通用/ 模拟器/ 的/ 不足/ ,/ 集成/ 模拟/ 开发/ 环境/ 如/ TOSSIM/ 等/ [/ 56/ -/ 57/ ]/ ,/ 将/ 通用/ 模拟器/ 与/ 系统/ 开发/ 环境/ 进行/ 集成/ ,/ 使/ 用户/ 可以/ 直接/ 使用/ 编写/ 的/ 应用/ 程序代码/ 进行/ 网络/ 模拟/ ./ 为了/ 屏蔽/ 不同/ 硬件平台/ 的/ 差异/ ,/ 集成/ 模拟/ 开发/ 环境/ 一般/ 是/ 在/ 相关/ 操作系统/ 的/ 某/ 一组/ API/ 上/ 构建/ 模拟器/ ,/ 将/ 应用/ 代码/ 与/ 相关/ 操作系统/ API/ 的/ 模拟/ 库/ 链接/ 实现/ 集成/ 开发/ 环境/ 中/ 的/ 模拟/ ./ 由于/ 集成/ 模拟/ 开发/ 环境/ 是/ 在/ 某组/ 特定/ API/ 上/ 进行/ 模拟/ ,/ 所以/ 无法/ 完全/ 反映/ 代码/ 在/ 节点/ 上/ 运行/ 的/ 真实情况/ ./ 指令/ 级/ 精度/ 模拟器/ 直接/ 使用/ 交叉/ 编译/ 生成/ 的/ 目标/ 代码/ 进行/ 模拟/ [/ 58/ -/ 59/ ]/ ,/ 进而/ 使该/ 环境/ 下/ 的/ 测试/ 可以/ 对/ 因/ 中断/ 等/ 一些/ 时序/ 问题/ 引发/ 的/ 故障/ 进行/ 检测/ ,/ 但/ 指令/ 级/ 精度/ 模拟器/ 的/ 使用/ 受限于/ 特定/ 的/ 节点/ 硬件平台/ ,/ 其/ 通用性/ 较差/ ./ 虽然/ 模拟器/ 可控/ 的/ 执行/ 环境/ 以及/ 详尽/ 的/ 执行/ 记录/ ,/ 为/ 故障/ 检测/ 带来/ 了/ 很大/ 的/ 便利/ ,/ 但/ 大量/ 真实世界/ 的/ 简化/ 模型/ (/ 如/ 无线/ 传输/ 和/ 能耗/ 等/ )/ 使得/ 很多/ 实际/ 部署/ 中/ 的/ 故障/ 无法/ 在/ 模拟器/ 中/ 再现/ ./ 测试台/ [/ 44/ -/ 46/ ]/ 则/ 允许/ 开发人员/ 以/ 相对/ 可控/ 的/ 方式/ ,/ 对/ 由/ 真实/ 节点/ 构成/ 的/ 传感器/ 网络/ 进行/ 各/ 方面/ 性能/ 和/ 功能/ 的/ 测试/ ,/ 增加/ 了/ 系统/ 测试/ 的/ 真实度/ ./ 表/ 4/ 对/ 不同/ 测试环境/ 可扩展性/ 与/ 真实度/ 之间/ 的/ 差别/ 进行/ 了/ 总结/ ./ 在/ 测试方法/ 方面/ ,/ 当/ 使用/ 真实/ 节点/ 进行/ 测试/ 时/ ,/ 由于/ 测试/ 可能/ 涉及/ 到/ 多个/ 节点/ 、/ 多/ 类/ 节点/ 硬件平台/ 和/ 不同/ 计算能力/ 的/ 设备/ (/ 如/ PC/ 、/ 节点/ 和/ 移动/ 基站/ 等/ )/ ,/ 因此/ 传统/ 的/ 测试方法/ 与/ 自动化/ 测试/ 框架/ 无法/ 直接/ 应用/ 于/ 传感器/ 网络/ ./ TUnit/ ②/ 针对/ 上述/ 问题/ ,/ 对/ 现有/ 测试/ 软件架构/ 进行/ 扩展/ ,/ 为/ TinyOS/ 设计/ 了/ 自动化/ 的/ 单元测试/ 框架/ ./ 然而/ ,/ TUnit/ 需要/ 用户/ 使用/ TinyOS/ 编写/ 测试用例/ ,/ 且/ 测试/ 断言/ 只能/ 引用/ 节点/ 的/ 本地/ 状态/ ./ MUnit/ [/ 60/ ]/ 则/ 利用/ EmbeddedRPC/ 技术/ [/ 61/ ]/ ,/ 允许/ 用户/ 在/ PC/ 端/ 使用/ 更加/ 简洁/ 的/ 脚本语言/ 编写/ 测试用例/ ,/ 并/ 对/ 涉及/ 多个/ 节点/ 的/ 分布式/ 状态/ 进行/ 断言/ ./ 这些/ 技术/ 都/ 在/ 不同/ 程度/ 上/ 简化/ 和/ 改进/ 了/ 传感器/ 网络/ 部署/ 前/ 的/ 测试/ 过程/ ,/ 使/ 开发人员/ 可以/ 将/ 传统/ 测试/ 技术/ 应用/ 于/ 传感器/ 网络/ 开发/ ./ 然而/ ,/ 应用/ 相关/ ①/ ②/ Page8/ 性/ 导致/ 的/ 定制/ 化/ 设计/ ,/ 使得/ 传统/ 测试方法/ 不能/ 满足/ 传感器/ 网络/ 所有/ 的/ 测试/ 需求/ ./ 特别/ 是/ 在/ 协议/ 测试/ 方面/ ,/ 现有/ 传感器/ 网络系统/ 开发人员/ 缺乏/ 足够/ 的/ 方法/ 与/ 工具/ ,/ 在/ 真实/ 节点/ 上/ 对/ 定制/ 化/ 的/ 通信协议/ 进行/ 功能/ 与/ 性能/ 方面/ 的/ 充分/ 测试/ ./ 这一/ 问题/ 已经/ 逐渐/ 引起/ 了/ 人们/ 的/ 关注/ ,/ 目前/ 的/ 研究/ 主要/ 包括/ 通用/ 评测/ 环境/ 的/ 设计/ [/ 62/ ]/ 、/ 基于/ 可控/ 无线/ 干扰/ 的/ 测试/ [/ 63/ -/ 64/ ]/ 以及/ 基于/ 故障注入/ 测试/ [/ 65/ ]/ 方法/ 的/ 研究/ ./ (/ 2/ )/ 运行/ 时/ 故障/ 检测/ 正如/ 本文/ 2.2/ 节/ 所述/ ,/ 传感器/ 网络/ 与/ 物理/ 世界/ 紧密/ 耦合/ 的/ 特点/ ,/ 使得/ 部署/ 前/ 的/ 测试/ 仅能/ 对/ 实际/ 部署/ 后/ 系统/ 的/ 正确性/ 与/ 各项/ 性能参数/ 做出/ 一个/ 大致/ 评估/ ,/ 而/ 那些/ 部署/ 后/ 出现/ 的/ 问题/ 常常/ 无法/ 在/ 部署/ 前/ 测试/ 中/ 发现/ ./ 部署/ 后/ 故障/ 需要/ 使用/ 运行/ 时/ 故障/ 检测/ 技术/ 进行/ 检测/ ./ 程序运行/ 时/ 故障/ 检测/ 是/ 根据/ 程序运行/ 时/ 状态/ ,/ 对/ 故障/ 进行/ 自动识别/ 的/ 过程/ ./ 资源/ 上/ 的/ 限制/ 使/ 传感器/ 网络/ 具有/ 非常/ 有限/ 的/ 可见/ 性/ ,/ 而/ 部署/ 环境/ 的/ 复杂/ 与/ 不/ 可控性/ 又/ 使/ 故障/ 再现/ 十分困难/ ,/ 这些/ 都/ 为/ 部署/ 后/ 的/ 故障/ 检测/ 与/ 定位/ 带来/ 了/ 巨大/ 的/ 挑战/ ./ 有效/ 的/ 运行/ 时/ 故障/ 检测/ 可以/ 使/ 传感器/ 网络/ 具有/ fail/ -/ fast/ 属性/ ,/ 具有/ 这种/ 属性/ 的/ 系统/ 能/ 在/ 故障/ 发生/ 后/ 尽可能/ 早地/ 捕获/ 故障/ ,/ 并/ 向/ 用户/ 提供/ 与/ 引发/ 故障/ 最为/ 相关/ 的/ 系统/ 状态/ 信息/ ,/ 从而/ 帮助/ 用户/ 更加/ 容易/ 和/ 快速/ 地/ 对/ 故障/ 进行/ 定位/ [/ 66/ ]/ ./ 根据/ 故障/ 涉及/ 的/ 节点/ 个数/ ,/ 运行/ 时/ 故障/ 检测/ 可/ 分为/ 单/ 节点/ 与/ 多/ 节点/ 两类/ ./ ①/ 单/ 节点/ 故障/ 检测/ 出于/ 效率/ 原因/ ,/ 节点/ 上/ 的/ 程序/ 通常/ 使用/ C/ 或者/ 类似/ C/ 的/ 编程语言/ 如/ nesC/ [/ 67/ ]/ 进行/ 编写/ ,/ 这/ 使得/ 空/ 指针/ 引用/ 以及/ 数组/ 越界/ 访问/ 等/ 错误/ 往往/ 难以避免/ ./ 然而/ ,/ 由于/ 节点/ 数据/ 存储空间/ 非常/ 有限/ ,/ 节点/ 上/ 通常/ 没有/ 用户/ // 内核/ 边界/ 和/ 内存保护/ 机制/ ./ 因此/ 与/ 其他/ 计算机系统/ 相比/ ,/ 缓冲区/ 溢出/ 、/ 栈/ 溢出/ 以及/ 数组/ 越界/ 等/ 运行/ 时/ 故障/ ,/ 对/ 节点/ 的/ 影响/ 更为严重/ ./ 这类/ 故障/ 一旦/ 发生/ 通常/ 难以/ 调试/ ,/ 节点/ 程序/ 将/ 可能/ 进入/ 不可/ 预知/ 的/ 状态/ ,/ 失去/ 对/ 外界/ 的/ 响应/ ./ 因此/ 需要/ 对/ 这类/ 故障/ 进行/ 检测/ ,/ 并/ 在/ 故障/ 发生/ 时/ 采取相应/ 的/ 恢复/ 措施/ ./ SafeTinyOS/ [/ 68/ ]/ 基于/ Deputy/ [/ 69/ ]/ 编译器/ 提供/ 的/ 标记/ 语言/ 对/ TinyOS/ 组件/ 进行/ 安全/ 化/ 标记/ ,/ 使/ 程序/ 可以/ 在/ 运行/ 时/ 检测/ 空/ 指针/ 引用/ 以及/ 数组/ 越界/ 访问/ 等/ 故障/ ,/ 同时/ 向/ 用户/ 提供/ 用于/ 定位/ 故障/ 的/ 相关/ 信息/ ./ 此外/ ,/ 如果/ 在/ 检测/ 到/ 故障/ 后/ 采取/ 重启/ 或微/ 重启/ 技术/ 对/ 节点/ 进行/ 恢复/ [/ 70/ ]/ ,/ 将/ 改善/ 系统/ 的/ 可用性/ ./ TinyOS/ 组件/ 化/ 编程/ 模型/ 最大/ 限度/ 地/ 增加/ 了/ 代码/ 的/ 复用/ 度/ ,/ 很大/ 程度/ 上/ 解决/ 了/ 因/ 应用/ 定制/ 产生/ 的/ 代码/ 复用/ 问题/ ./ 在/ TinyOS/ 中/ ,/ 接口定义/ 了/ 组件/ 之间/ 交互/ 的/ 唯一/ 方式/ ,/ 然而/ 原有/ 接口/ 只/ 包含/ 了/ 类型信息/ ,/ 并未/ 给出/ 其/ 精确/ 的/ 语意/ 以及/ 调用/ 模式/ 的/ 规范/ ./ 在/ 很多/ 情况/ 下/ ,/ 用于/ 连接/ 各类/ 组件/ 的/ 接口/ 在/ 定义/ 时/ 包含/ 了/ 很多/ 隐含/ 的/ 使用/ 限制/ ,/ 这些/ 限制/ 会/ 在/ 组件/ 使用/ 不/ 当时/ 导致/ 程序/ 出现/ 故障/ ./ 这种/ 问题/ 会/ 随着/ 应用/ 复杂度/ 和/ 代码/ 规模/ 的/ 增加/ 而/ 变得/ 更加/ 严重/ ./ 当/ 这类/ 故障/ 发生/ 时/ ,/ 用户/ 往往/ 需要/ 深入分析/ 他人/ 的/ 组件/ 实现/ 以/ 确定/ 故障/ 原因/ ./ 为了/ 解决/ 上述/ 不足/ ,/ Archer/ 等/ 人/ [/ 71/ ]/ 为/ TinyOS/ 接口/ 设计/ 了/ 一种/ 契约/ (/ contract/ )/ 描述语言/ ./ 开发人员/ 使用/ 该/ 语言/ 定义/ 接口/ 调用/ 时/ 的/ 前件/ (/ pre/ -/ condition/ )/ 与/ 后件/ (/ post/ -/ condition/ )/ ,/ 这些/ 契约/ 最终/ 与/ 源程序/ 一起/ 编译/ 为/ 可/ 执行/ 代码/ ,/ 在/ 程序执行/ 时/ 对接口/ 契约/ 进行/ 检查/ ,/ 并/ 在/ 契约/ 违反/ 时/ 帮助/ 开发人员/ 快速/ 定位/ 故障/ ./ 当/ 需要/ 检查/ 的/ 接口/ 过多时/ ,/ 保存/ 每个/ 接口/ 状态/ 的/ 数据/ 存储/ 开销/ 是/ 限制/ 该/ 方法/ 应用/ 的/ 主要/ 因素/ ./ ②/ 多/ 节点/ 故障/ 检测/ 传感器/ 网络/ 由/ 多个/ 节点/ 组成/ ,/ 这些/ 节点/ 通过/ 相互协作/ 完成/ 特定/ 的/ 感知/ 任务/ ,/ 软件缺陷/ 可能/ 会/ 使/ 协作/ 失效/ 从而/ 导致/ 故障/ ./ 由于/ 需要/ 获取/ 多个/ 节点/ 的/ 状态/ ,/ 这些/ 状态/ 收集/ 时/ 开销/ 以及/ 多/ 节点/ 状态/ 间/ 的/ 同步/ 是/ 多/ 节点/ 运行/ 时/ 故障/ 检测/ 需要/ 解决/ 的/ 重要/ 问题/ ./ PDA/ (/ PassiveDistributedAssertion/ )/ 通过/ 引入/ 被动/ 的/ 分布式/ 断言/ 对/ 多/ 节点/ 交互故障/ 进行/ 检测/ [/ 9/ ]/ ./ PDA/ 在/ 传统/ 断言/ 中/ 引入/ 节点/ 集合/ 操作符/ ,/ 允许/ 用户/ 在/ 同一/ 时刻/ 为/ 涉及/ 多个/ 空间/ 上/ 分布/ 的/ 节点/ 状态/ 创建/ 断言/ ,/ 并/ 在/ 系统/ 运行/ 过程/ 中/ 使用/ 网络/ 监听/ 方式/ 收集/ 相关/ 节点/ 状态/ 信息/ ,/ 然后/ 再/ 集中地/ 进行/ 断言/ 的/ 检查/ ./ 为了/ 确保/ 断言/ 检查/ 结果/ 正确性/ ,/ PDA/ 需要/ 消除/ 监听/ 记录/ 中因/ 数据/ 丢失/ 和/ 时间/ 同步/ 精度/ 导致/ 的/ 误差/ ./ 然而/ ,/ 断言/ 失效/ 并/ 不/ 总/ 意味着/ 系统/ 存在/ 故障/ ,/ 有效/ 的/ 断言/ 依赖于/ 用户/ 对系统/ 状态/ 正确/ 的/ 假设/ ./ 当/ 涉及/ 多个/ 节点/ 状态/ 时/ ,/ 正确/ 的/ 断言/ 有时/ 并/ 不/ 像/ 传统/ 程序/ 中/ 那样/ 容易/ 建立/ ./ 由于/ 断言/ 涉及/ 到/ 多个/ 节点/ 内部/ 程序/ 状态/ ,/ PDA/ 最/ 主要/ 的/ 开销/ 来自/ 这些/ 状态/ 的/ 收集/ ./ 与/ PDA/ 类似/ ,/ Lodder/ 等/ 人/ [/ 72/ ]/ 提出/ 利用/ 传感器/ 网络/ 运行/ 记录/ 以/ 离线/ 的/ 方式/ 重构/ 网络/ 的/ 全局/ 状态/ ,/ 供/ 用户/ 对/ 其/ 一致性/ 进行/ 检查/ 与/ 分析/ ;/ EvAnT/ [/ 73/ ]/ 则/ 从/ 事件/ 分析/ 角度/ 对/ 网络/ 中/ 节点/ 状态/ 建模/ ,/ 允许/ 用户/ 通过/ 创建/ 事件/ 查询/ 的/ 方式/ 对/ 涉及/ 多个/ 节点/ 的/ 故障/ 进行/ 检测/ ./ (/ 3/ )/ 基于/ 形式化/ 和/ 其他/ 静态/ 分析/ 的/ 故障/ 检测/ 传统/ 测试方法/ 允许/ 开发人员/ 得到/ 一组/ 特定/ 参数/ 配置/ 下/ 的/ 执行/ 结果/ ,/ 但/ 大量/ 参数/ 和/ 每种/ 参数/ 可能/ 值/ Page9/ 产生/ 的/ 组合/ 爆炸/ 使/ 其/ 无法/ 揭示/ 所有/ 情况/ 下/ 的/ 故障/ ./ 由于/ 节点/ 软件/ 规模较/ 小/ 并且/ 任务调度/ 执行/ 方式/ 相对/ 简单/ ,/ 这/ 使得/ 应用/ 形式化/ 和/ 其他/ 静态/ 分析/ 技术/ 对/ 软件/ 进行/ 故障/ 检测/ 成为/ 可能/ ./ 例如/ ,/ 有/ 研究/ 人员/ 通过/ 模型/ 检验/ (/ modelchecking/ )/ [/ 74/ ]/ 和/ 符号执行/ (/ symbolicexecution/ )/ [/ 75/ ]/ 等/ 方法/ 对/ 传感器/ 网络系统/ 状态/ 空间/ 进行/ 搜索/ ,/ 揭示/ 一部分/ 因非/ 确定性/ 事件/ 导致/ 的/ 故障/ ./ 然而/ ,/ 随着/ 网络/ 中/ 节点/ 数/ 和/ 拓扑/ 复杂度/ 的/ 增加/ ,/ 这/ 类/ 方法/ 会/ 遇到/ 状态/ 空间/ 爆炸/ 问题/ ./ 程序代码/ 到/ 检验/ 模型/ 的/ 自动/ 转换/ 以及/ 状态/ 空间/ 的/ 有效/ 化简/ 是/ 这类/ 故障/ 检测/ 方法/ 能否/ 有效/ 应用/ 的/ 关键/ ./ 目前/ ,/ 这/ 一方面/ 问题/ 开始/ 得到/ 软件工程/ 领域/ 研究/ 人员/ 的/ 关注/ ./ 结合/ 传感器/ 网络/ 程序/ 特点/ ,/ 将/ 现有/ 软件/ 分析/ 技术/ 中/ 相关/ 成果/ [/ 14/ ]/ 进行/ 应用/ 和/ 改进/ ,/ 是/ 这/ 一/ 领域/ 未来/ 需要/ 探索/ 的/ 内容/ ./ 4.1/ ./ 4/ 其它/ 故障/ 检测/ 技术/ 能耗/ 是/ 传感器/ 网络/ 一项/ 重要/ 的/ 指标/ 参数/ ,/ 为了/ 确保/ 部署/ 系统/ 可以/ 长时间/ 运行/ ,/ 传感器/ 节点/ 大部分/ 时间/ 处于/ 低功耗/ 休眠状态/ ,/ 因此/ 节点/ 运行/ 过程/ 中/ 能耗/ 异常/ 可以/ 用于/ 系统故障/ 检测/ 与/ 分析/ ./ 节点/ 能耗/ 计量/ 可/ 分为/ 硬件/ 计量/ 和/ 软件/ 计量/ 两种/ 方式/ ./ 硬件/ 计量/ 需要/ 修改/ 传感器/ 节点/ 硬件/ ,/ 其/ 附加/ 成本/ 随/ 测量/ 精度/ 提高/ 而/ 增加/ [/ 76/ -/ 77/ ]/ ./ 软件/ 计量/ 没有/ 附加/ 成本/ 且/ 精度/ 适中/ ,/ 通过/ 对/ 节点/ 能耗/ 的/ 预先/ 测量/ 与/ 校准/ ,/ 再/ 结合/ 节点/ 硬件/ 在/ 不同/ 能耗/ 状态/ 下/ 的/ 运行/ 时间/ 统计/ 结果/ ,/ 可以/ 对/ 能耗/ 进行/ 较为/ 准确/ 的/ 估计/ [/ 78/ ]/ ./ 此外/ ,/ 借助/ 软件/ 计量/ 用户/ 还/ 可/ 获得/ 程序/ 不同/ 模块/ 的/ 能耗/ 使用/ 情况/ ,/ 并/ 使用/ 这些/ 信息/ 对系统/ 进行/ 更加/ 深入/ 的/ 分析/ [/ 79/ ]/ ./ 文献/ [/ 78/ -/ 80/ ]/ 借助/ 能耗/ 测量/ 对/ 节点/ 程序/ 及/ 网络/ 性能/ 进行/ 了/ 分析/ ./ Khan/ 等/ 人/ [/ 47/ ]/ 利用/ 节点/ 能耗/ 建模/ 对/ 路由/ 失效/ 、/ 天线/ 失效/ 和/ 系统/ 崩溃/ 等/ 典型/ 故障/ 进行/ 检测/ ./ 4.2/ 故障/ 定位/ 故障/ 修复/ 的/ 前提/ 是/ 准确/ 地/ 隔离/ 故障/ ,/ 查找/ 导致/ 故障/ 的/ 软件缺陷/ 位置/ ,/ 即/ 故障/ 定位/ ./ 4.2/ ./ 1/ 可视化/ 与/ 交互技术/ 传感器/ 节点/ 的/ 人机接口/ 通常/ 十分/ 有限/ ,/ 一般/ 仅/ 配备/ 有限/ 的/ LED/ 灯/ 和/ 按键/ ,/ 这为/ 节点/ 的/ 内部/ 状态/ 检查/ ,/ 特别/ 是/ 部署/ 时/ 和/ 部署/ 后/ 的/ 现场/ 调试/ 带来/ 了/ 诸多不便/ ./ SeeDTV/ [/ 81/ ]/ 提供/ 的/ 带有/ 图形化/ 接口/ 的/ 手持/ 设备/ ,/ 可以/ 让/ 用户/ 迅速/ 对/ 部署/ 现场/ 中/ 网络/ 无线通信/ 数据/ 、/ 节点/ 硬件/ 接口/ 、/ 传感器/ ADC/ 读数/ 以及/ 电量/ 消耗/ 等/ 信息/ 实施/ 检查/ ,/ 从而/ 帮助/ 用户/ 更加/ 快速/ 有效/ 地/ 对/ 故障/ 进行/ 分析/ ./ 在/ 实际/ 应用/ 部署/ 中/ ,/ SeeDTV/ 帮助/ 实验/ 人员/ 发现/ 了/ 两个/ 通信/ 功能/ 异常/ 节点/ ,/ 一个/ 能耗/ 异常/ 节点/ 以及/ 一个/ ADC/ 异常/ 节点/ ./ 此外/ Ganju/ 等/ 人/ [/ 82/ ]/ 研究/ 了/ 基于/ 声/ 信号/ 反馈/ 的/ 辅助/ 调试/ 技术/ ;/ Gauger/ 等/ 人/ [/ 83/ ]/ 则/ 对/ 手势/ 、/ 指向/ 和/ 扫描/ 三种/ 与/ 传感器/ 节点/ 的/ 交互方式/ 进行/ 了/ 研究/ ,/ 这些/ 技术/ 适用/ 于/ 某些/ 特殊/ 情况/ 下/ 的/ 调试/ ./ 除了/ 部署/ 环境/ 中/ 与/ 节点/ 交互/ 上/ 的/ 限制/ ,/ 缺乏/ 统一/ 、/ 通用/ 的/ 人机交互/ 接口/ 使/ 传感器/ 网络故障/ 定位/ 变得/ 繁琐/ 而/ 又/ 容易/ 出错/ ./ 网络拓扑/ 、/ 节点/ 状态/ 以及/ 感知/ 数据/ 的/ 可视化/ 可以/ 帮助/ 用户/ 更加/ 有效/ 的/ 对系统/ 状态/ 进行/ 分析/ ./ Mote/ -/ View/ [/ 45/ ]/ 是/ 一款/ 商业化/ 的/ 传感器/ 网络/ 可视化/ 监控/ 与/ 管理工具/ ,/ 但/ 缺乏/ 通用性/ 与/ 可扩展性/ ./ Octopus/ [/ 84/ ]/ 是/ 一款/ 与/ Mote/ -/ View/ 功能/ 类似/ 开放/ 源代码/ 的/ 传感器/ 网络/ 可视化/ 与/ 管理工具/ ,/ 其/ 平台/ 无关/ 性/ 以及/ 丰富/ 的/ 配置/ 接口/ 使/ 其/ 可以/ 方便/ 地同/ 现有/ 节点/ 软件平台/ (/ 如/ TinyOS/ 和/ Contiki/ 等/ )/ 进行/ 集成/ ./ 然而/ ,/ 当/ 用户/ 需要/ 对/ 数据/ 进行/ 一些/ 相对/ 复杂/ 的/ 处理/ 时/ ,/ 上面/ 列举/ 的/ 可视化/ 工具/ 无法/ 很/ 好/ 地/ 满足/ 这/ 类/ 用户/ 的/ 需求/ ./ 针对/ 这一/ 问题/ ,/ tinyLAB/ [/ 85/ ]/ 基于/ Matlab/ 计算/ 平台/ 向/ 用户/ 提供/ 了/ 传感器/ 网络/ 数据/ 实时/ 分析/ 、/ 可视化/ 与/ 交互/ 环境/ ./ 此外/ ,/ 分析/ 网络/ 性能/ 时/ ,/ 无线/ 监听器/ 获得/ 的/ 大量/ 数据包/ 往往/ 需要/ 通过/ 可视化/ 技术/ 帮助/ 用户/ 更加/ 直观/ 的/ 对/ 网络/ 的/ 各项/ 性能/ 进行/ 分析/ ./ 现有/ 针对/ 传感器/ 网络/ 无线通信/ 标准/ 的/ 商业化/ 网络分析/ 工具/ 如/ PerytonsAnalyzer/ ①/ 等/ 都/ 提供/ 了/ 这样/ 的/ 功能/ ./ 4.2/ ./ 2/ 源码/ 调试器/ 源码/ 调试器/ (/ source/ -/ leveldebugger/ )/ 允许/ 用户/ 在/ 程序/ 中/ 任意/ 位置/ 设置/ 断点/ ,/ 并/ 在/ 断点/ 激活/ 后/ 对/ 程序/ 状态/ 进行/ 检查/ 与/ 修改/ ,/ 是/ 一种/ 常用/ 的/ 故障/ 定位/ 与/ 分析/ 工具/ ./ 借助/ 编译器/ 生成/ 的/ 源码/ // 机器码/ 符号/ 映射/ 表/ ,/ 源码/ 调试器/ —/ —/ —/ 有时/ 又/ 被称作/ 符号/ 调试器/ (/ symbolicdebugger/ )/ 或者/ 被/ 简称/ 为/ 调试器/ —/ —/ —/ 向/ 用户/ 提供/ 了/ 源代码/ 级别/ 的/ 调试/ 视图/ ./ 源码/ 调试器/ 常见/ 的/ 实现/ 方式/ 有/ 4/ 种/ ./ 大多数/ 调试器/ 借助/ 处理器/ 内置/ 特殊/ 寄存器/ 实现/ 断点/ 以及/ 监测/ 变量/ 地址/ 的/ 存储/ ,/ 当/ 程序/ 计数器/ 或/ 内存/ 访问/ 地址/ 与/ 这些/ 寄存器/ 中/ 的/ 内容/ 相匹配/ 时/ ,/ 处理器/ 会/ 通过/ 特殊/ 的/ 调用/ 将/ 控制权/ 交给/ 调试器/ ./ 然而/ 由于/ 大多数/ 传感器/ 节点/ 使用/ 的/ 处理器/ 通常/ 不/ 包含/ 这样/ 的/ 功能/ ,/ 因此/ 该/ 方法/ 不适/ 用于/ 传感器/ 网络/ ./ 第/ 2/ 种/ 方法/ 通过/ 程序运行/ 时/ 系统/ 提供/ 的/ 控制/ 接口/ (/ 如/ JavaDebugAPI/ )/ 实现/ ,/ 然而/ 由于/ 资源/ 的/ 限制/ ,/ 大多数/ 传感器/ 网络/ 程序/ 直接/ 在/ 硬件/ 而/ 非/ 某种/ 运行/ 时/ 系统/ 上/ 执行/ ,/ 因此/ 该/ 方法/ 也/ 不/ 具有/ 普遍性/ ./ 第/ 3/ 种/ 方法/ 通过/ In/ -/ Circuit/ ①/ PerytonsAnalyzer/ ./ http/ :/ // // www/ ./ perytons/ ./ comPage10Emulator/ (/ ICE/ )/ 硬件/ 仿真/ 实现/ ,/ 调试器/ 借助/ IC/ E通/ 过/ JTAG/ (/ IEEE1149/ ./ 1/ )/ 接口/ 实现/ 对/ 节点/ 处理器/ 的/ 控制/ 以及/ 内部/ 状态/ 的/ 提取/ ./ 由于/ 该/ 方法/ 需要/ 每个/ 被/ 调试/ 节点/ 与/ 一个/ 单独/ 的/ ICE/ 物理/ 相连/ ,/ 因此/ 并/ 不适/ 用于/ 部署/ 后/ 或/ 由/ 过/ 多/ 节点/ 构成/ 的/ 传感器/ 网络/ ./ 第/ 4/ 种/ 方法/ 通过/ 目标/ 码/ 动态/ 插装/ 实现/ 程序/ 断点/ 和/ 控制权/ 的/ 转移/ ,/ 该/ 方法/ 不用/ 修改/ 源代码/ 且/ 无需/ 额外/ 硬件/ 的/ 支持/ ,/ 因此/ 可/ 用于/ 部署/ 后/ 传感器/ 网络/ 的/ 远程/ 调试/ ./ Clairvoyant/ [/ 27/ ]/ 通过/ 目标/ 码/ 动态/ 插装/ 为/ TinyOS/ 实现/ 了/ 一个/ 类/ GNUGDB/ 的/ 远程/ 调试器/ ,/ 其/ 节点/ 上/ 额外/ 软件/ 的/ 程序/ 存储/ (/ ROM/ )/ 和/ 数据/ 存储/ (/ RAM/ )/ 开销/ 分别/ 为/ 32KB/ 和/ 1KB/ ./ Clairvoyant/ 使用/ Trickle/ [/ 86/ ]/ 协议/ 和/ 专门/ 消息/ 分配器/ ,/ 解决/ 传感器/ 网络/ 多/ 跳/ 环境/ 下/ PC/ 与/ 节点/ 之间/ 相关/ 调试信息/ 的/ 传输/ 问题/ ,/ 然而/ Clairvoyant/ 与/ 应用程序/ 必须/ 采用/ 相似/ 的/ 底层/ 通信协议/ 栈/ ./ 此外/ ,/ Clairvoyant/ 调试信息/ 采用/ 的/ 带/ 内/ 传输方式/ 会/ 对/ 应用/ 本身/ 的/ 通信/ 造成/ 一定/ 影响/ ./ 最后/ 由于/ 需要/ 对/ 程序/ ROM/ 存储器/ 的/ 内容/ 进行/ 改写/ ,/ 调试器/ 的/ 使用/ 会受/ 存储器/ 擦写/ 次数/ 以及/ 擦写/ 电压/ 的/ 限制/ ./ 与/ 基于/ 源码/ 插装/ 的/ 故障/ 定位/ 技术/ 相比/ ,/ Clair/ -/ voyant/ 允许/ 用户/ 在/ 无需/ 修改/ 源码/ 的/ 情况/ 下/ ,/ 以/ 交互/ 的/ 方式/ 对/ 程序/ 的/ 执行/ 以及/ 状态/ 进行/ 检查/ ,/ 在/ 某些/ 情况/ 下/ 可以/ 大大简化/ 故障/ 定位/ 与/ 分析/ 的/ 时间/ ./ 然而/ 受/ 网络通信/ 方式/ 、/ 程序/ 存储空间/ 、/ 存储器/ 擦写/ 以及/ 调试器/ 探针/ 效应/ 等/ 方面/ 的/ 限制/ ,/ Clairvoyant/ 并/ 不适/ 用于/ 故障/ 定位/ 的/ 所有/ 情况/ ./ 远程/ 源代码/ 调试器/ 允许/ 用户/ 以/ 控制/ 执行/ 和/ 检查程序/ 状态/ 的/ 方式/ 对/ 程序执行/ 进行/ 深入/ 的/ 分析/ ,/ 但/ 其/ 实现/ 方式/ 较为/ 复杂/ ./ 在/ 某些/ 情况/ 下/ 简单/ 的/ 状态/ 查询/ 以及/ 远程/ 过程/ 调用/ 同样/ 可/ 帮助/ 调试/ 人员/ 实施/ 故障/ 的/ 定位/ 与/ 分析/ ./ SNMS/ [/ 32/ ]/ 借助/ 程序/ 编译/ 时/ 产生/ 的/ 符号表/ 信息/ 允许/ 用户/ 查询/ 和/ 修改/ TinyOS/ 程序/ 组件/ 的/ 变量/ 状态/ ./ Marionette/ [/ 61/ ]/ 则/ 在/ 其/ 基础/ 之上/ 为/ TinyOS/ 添加/ 了/ 嵌入式/ 远程/ 过程/ 调用/ (/ EmbeddedRPC/ )/ 支持/ ./ 此外/ ,/ LiteOS/ 和/ Contiki/ 提供/ 的/ 远程/ Shell/ 功能/ 允许/ 用户/ 对/ 节点/ 实施/ 一些/ 简单/ 的/ 远程/ 控制/ 和/ 检查/ ./ 4.2/ ./ 3/ 程序执行/ 记录/ 调试器/ 允许/ 用户/ 在/ 不/ 添加/ 任何/ 额外/ 代码/ 的/ 情况/ 下/ 对/ 程序/ 的/ 执行/ 进行/ 控制/ 与/ 检查/ ,/ 然而/ 在/ 合适/ 的/ 位置/ 设置/ 断点/ 检查程序/ 状态/ ,/ 往往/ 需要/ 用户/ 对/ 故障/ 具有/ 一定/ 的/ 认识/ ./ 当/ 断点/ 难以/ 设置/ 或者/ 无法/ 使用/ 时/ ,/ 用户/ 需要/ 借助/ 程序执行/ 记录/ 对/ 故障/ 进行/ 事后/ 分析/ 和/ 定位/ ./ 传感器/ 节点/ 有限/ 的/ 资源/ 与其/ 运行/ 过程/ 中/ 产生/ 的/ 大量/ 状态/ 信息/ (/ 如/ 传感器/ 读数/ 、/ 程序/ 中/ 变量/ 的/ 修改/ 、/ 函数/ 的/ 调用/ 以及/ 代码执行/ 路径/ 等/ )/ 为/ 程序执行/ 记录/ 提出/ 了/ 挑战/ ./ (/ 1/ )/ AOP/ (/ AspectOrientedProgramming/ )/ 技术/ 程序执行/ 记录/ 一般/ 通过/ 代码/ 插装/ 实现/ ./ 与/ 传统/ 日志/ 使用/ 方式/ 相比/ ,/ 节点/ 有限/ 的/ 资源/ 以及/ 潜在/ 故障/ 的/ 不可/ 预知/ 性/ ,/ 使得/ 用户/ 需要/ 一种/ 更加/ 便捷/ 的/ 手段/ ,/ 根据/ 实际/ 运行/ 需要/ 设置/ 插装/ 代码/ ./ AOP/ 技术/ 可以/ 有效/ 地/ 分离/ 系统/ 业务/ 逻辑/ 与/ 监测/ 逻辑/ ,/ 使/ 用户/ 以/ 简洁/ 的/ 方式/ 对/ 代码/ 插装/ 进行/ 描述/ ./ 例如/ 为了/ 监测/ 系统/ 某一/ 变量/ 的/ 状态/ ,/ 用户/ 需要/ 在/ 变量/ 修改/ 的/ 相关/ 位置/ 安放/ 插装/ 代码/ ,/ 在/ 非/ AOP/ 的/ 手工/ 方式/ 下/ 用户/ 可能/ 会/ 遗漏/ 某些/ 安置/ 点/ ,/ 而/ AOP/ 则/ 向/ 用户/ 提供/ 了/ 基于/ 模式匹配/ 的/ 插装/ 描述/ 方式/ ,/ 允许/ 指定/ 在/ 某/ 变量/ 每次/ 修改/ 后/ 实施/ 插装/ [/ 10/ ,/ 28/ ,/ 87/ ]/ ./ AOP/ 技术/ 可以/ 让/ 用户/ 更加/ 高效/ 地/ 对/ 程序实施/ 插装/ ,/ 减少/ 了/ 插装/ 过程/ 中因/ 人工/ 介入/ 而/ 导致/ 的/ 错误/ ./ 例如/ ,/ Cao/ 等/ 人/ [/ 28/ ]/ 采用/ AOP/ 和/ 动态/ 目标/ 码/ 插装/ 技术/ ,/ 允许/ 用户/ 在/ 程序运行/ 中/ 根据/ 需要/ 动态/ 地/ 设置/ 程序执行/ 记录/ 点/ (/ tracepoint/ )/ ./ 用户/ 使用/ 简洁/ 的/ 声明/ 式/ 语言/ 在/ 程序/ 特定/ 语句/ 、/ 函数调用/ 入口/ 或/ 返回/ 处/ 添加/ 记录/ 点/ ,/ 其/ 语言/ 形式/ 如下/ :/ 其中/ TRACE/ 和/ FROM/ 关键字/ 用于/ 限定/ 记录/ 点/ 的/ 位置/ ,/ 如/ 某/ 一/ 文件/ 中/ 的/ 某/ 一/ 函数/ ,/ 用户/ 可以/ 使用/ 正则表达式/ 对/ 文件/ 以及/ 函数/ 进行/ 筛选/ ;/ WHERE/ 用于/ 限定/ 记录/ 点/ 生效/ 的/ 条件/ ;/ 而/ EXECUTE/ 用于/ 指定/ 记录/ 点/ 生效/ 时/ 需要/ 执行/ 的/ 一系列/ 操作/ 如/ 调用/ 的/ 函数/ 和/ 变量/ 的/ 读写/ 等/ ./ (/ 2/ )/ 事件/ 日志/ 、/ 函数调用/ 记录/ 以及/ 控制流/ 追踪/ 事件/ 日志/ (/ eventlogging/ )/ 、/ 函数调用/ 记录/ (/ calltracing/ )/ 以及/ 控制流/ 追踪/ (/ control/ -/ flowtracing/ )/ 从/ 不同/ 的/ 粒度/ 上/ 反应/ 了/ 程序/ 的/ 执行/ 情况/ ,/ 用户/ 可以/ 利用/ 这些/ 记录/ 对/ 故障/ 进行/ 事后/ 的/ 定位/ 与/ 分析/ ./ 虽然/ 大部分/ 传感器/ 网络操作系统/ 提供/ 了/ 事件/ 日志/ 系统/ ,/ 但/ 节点/ 有限/ 的/ 存储/ 、/ 带宽/ 以及/ 能量/ 使得/ 传统/ 事件/ 日志/ 方式/ 并/ 不能/ 很/ 好/ 的/ 适用/ 于/ 传感器/ 网络/ 的/ 故障/ 分析/ ./ SNMS/ [/ 32/ ]/ 对/ 日志/ 中/ 字符/ 常量/ 用/ 标识符/ 进行/ 再/ 编码/ ,/ 减少/ 了/ 事件/ 日志/ 中/ 不必要/ 的/ 存储/ ,/ 但/ 仍然/ 无法/ 解决/ 大量/ 事件/ 带来/ 的/ 存储/ 问题/ ./ NodeMD/ [/ 88/ ]/ 将/ 事件/ 记录/ 限定/ 为/ 15/ 个/ 常见/ 的/ 系统/ 事件/ ,/ 并/ 结合/ 系统/ 中/ 不同/ 线程/ 执行/ 时/ 对应/ 的/ 事件/ 序列/ 签名/ ,/ 重构/ 出/ 用于/ 故障/ 分析/ 的/ 运行/ 记录/ ./ 其/ 相关/ 的/ 系统/ 事件/ 包括/ 函数/ 的/ 调用/ 与/ 返回/ ,/ 线程/ 的/ 相关/ 操作/ 如/ 创建/ 、/ 退出/ 、/ 阻塞/ 、/ Page11/ 休眠/ 等/ ,/ 软件/ 定时器/ 的/ 设置/ 和/ 超时/ 以及/ 中断/ 触发/ ./ 虽然/ 每个/ 事件/ 仅/ 需要/ 4/ 比特/ 的/ 存储空间/ ,/ 但/ 真实/ 应用/ 中/ 产生/ 的/ 事件/ 日志/ 仍/ 远大于/ 节点/ 自身/ 的/ 存储/ 能力/ ./ 与/ 随意/ 添加/ 的/ 事件/ 日志/ 相比/ ,/ 程序执行/ 时/ 特定/ 信息/ 记录/ ,/ 如/ 函数调用/ 和/ 控制流/ ,/ 同样/ 可以/ 为/ 故障/ 分析/ 提供/ 帮助/ ./ 函数调用/ 记录/ 可以/ 用于/ 故障/ 的/ 初步/ 定位/ ,/ 而/ 程序控制/ 流/ 信息/ 则/ 可以/ 为/ 故障/ 定位/ 提供/ 更加/ 详细/ 执行/ 分析/ 记录/ ./ 利用/ 程序/ 自身/ 结构/ 的/ 特征/ ,/ 这些/ 信息/ 可以/ 被/ 进一步/ 有效/ 压缩/ ./ 借助/ 局部/ 调用/ 日志/ 技术/ (/ localcalllogging/ )/ [/ 89/ ]/ ,/ LIS/ [/ 87/ ]/ 可以/ 有效/ 的/ 减少/ 传统/ 基于/ 全局/ 标识符/ 生成/ 的/ 函数调用/ 记录/ 中/ 的/ 冗余/ ,/ 用户/ 通过/ 指定/ 关注/ 区域/ (/ RegionOfInterest/ ,/ ROI/ )/ 获取/ 可能/ 产生/ 故障/ 模块/ 的/ 函数调用/ 记录/ ./ LIS/ 首先/ 根据/ ROI/ 对/ 程序/ 中/ 的/ 函数/ 进行/ 分类/ ,/ 然后/ 根据/ 分类/ 进行/ 全局/ 标识符/ 和/ 局部/ 标识符/ 的/ 分配/ ./ LIS/ 通过/ 在/ 拥有/ 全局/ 标识符/ 的/ 函数/ 中/ 使用/ 局部/ 标识符/ 记录/ 函数调用/ ,/ 将/ 原先/ 全局/ 的/ 名字/ 空间/ 分解/ 为/ 多个/ 较/ 小/ 局部/ 名字/ 空间/ ,/ 进而/ 有效/ 地/ 减少/ 记录/ 中/ 标识符/ 的/ 平均/ 比特/ 宽度/ ./ 实验/ 表明/ 随着/ 需要/ 记录/ 函数/ 个数/ 的/ 增加/ ,/ 局部/ 调用/ 日志/ 技术/ 可以/ 有效/ 的/ 将/ 记录/ 大小/ 减少/ 到/ 使用/ 全局/ 标识符/ 时/ 的/ 40/ %/ 到/ 65/ %/ ./ Sundaram/ 等/ 人/ [/ 90/ ]/ 认为/ 程序执行/ 时/ 产生/ 的/ 控制流/ 记录/ 可以/ 帮助/ 用户/ 解决/ 大部分/ 情况/ 下/ 的/ 故障/ 分析/ 问题/ ,/ 并/ 基于/ BL/ 路径/ 编码/ [/ 91/ ]/ 算法/ 为/ TinyOS/ 出/ 了/ 一种/ 高效/ 的/ 控制流/ 追踪/ 技术/ ./ 该/ 技术/ 通过/ 记录/ 系统/ 运行/ 过程/ 中/ 事件/ 、/ 任务/ 以及/ 这些/ 执行/ 单元/ 内部/ 控制流/ ,/ 并/ 利用/ 程序执行/ 的/ 周期性/ 特征/ 对/ 记录/ 进行/ 压缩/ ,/ 从而/ 大大减少/ 了/ 记录/ 所/ 需/ 的/ 存储空间/ ./ 4.2/ ./ 4/ 重放/ 和/ 检查点/ 某些/ 传感器/ 网络应用/ 的/ 行为/ ,/ 如/ 目标/ 追踪/ 应用/ ,/ 主要/ 受/ 感知/ 的/ 外部/ 事件/ 影响/ ,/ 而/ 动态/ 部署/ 环境/ 中/ 感知/ 事件/ 的/ 异步/ 与/ 不可/ 重复/ 特性/ ,/ 为/ 这类/ 应用/ 的/ 故障/ 定位/ 以及/ 性能/ 分析/ 带来/ 巨大/ 的/ 挑战/ ./ 重放/ 技术/ 很/ 早就/ 被/ 用于/ 分布式系统/ 调试/ ,/ 一般/ 通过/ 对非/ 确定/ 事件/ 如/ 中断/ 、/ I/ // O/ 以及/ 消息/ 的/ 记录/ 实现/ ./ 通过/ 对/ 系统故障/ 进行/ 重/ 放/ (/ replay/ )/ ,/ 用户/ 可以/ 调整/ 相关/ 参数/ 并/ 对/ 程序/ 的/ 执行/ 进行/ 分析/ ,/ 确定/ 导致/ 系统故障/ 的/ 原因/ ./ EnviroLog/ [/ 92/ ]/ 向/ 用户/ 提供/ 了/ 异步/ 感知/ 事件/ 的/ 记录/ 与/ 重放/ 服务/ ./ 在/ 记录/ 阶段/ ,/ 日志/ 模块/ 为/ 用户/ 感兴趣/ 的/ 事件/ 创建/ 带有/ 时间/ 戳/ 的/ 记录/ 并/ 保存/ 在/ Flash/ 存储器/ 中/ ;/ 在/ 重放/ 阶段/ ,/ 重/ 放/ 模块/ 依据/ 先前/ 保存/ 记录/ 和/ 时间/ 戳/ 进行/ 事件/ 的/ 重放/ ./ 重放/ 模型/ 假设/ 系统/ 重放/ 的/ 执行/ 不会/ 对/ 被/ 重放/ 的/ 事件/ 本身/ 产生/ 影响/ ,/ 即/ 系统/ 输出/ 单向/ 依赖于/ 记录/ 的/ 异步/ 事件/ ./ 由于/ 传感器/ 节点/ 资源/ 受限/ ,/ 重/ 放/ 技术/ 的/ 使用/ 会/ 受到/ 外部/ 事件/ 产生/ 的/ 数据量/ 以及/ 重/ 放/ 时间/ 同步/ 精度/ 的/ 限制/ ./ 与/ 重放/ 技术/ 类似/ ,/ 检查点/ (/ checkpointing/ )/ 技术/ 通过/ 在/ 程序执行/ 过程/ 中/ 周期性/ 创建/ 检查点/ ,/ 使/ 用户/ 可以/ 利用/ 故障/ 发生/ 前后/ 附近/ 的/ 检查点/ 将/ 系统/ 恢复/ 到/ 相应/ 的/ 状态/ ,/ 从而/ 实现/ 故障/ 的/ 再现/ ./ 由于/ 需要/ 存储/ 整个/ 系统/ 的/ 状态/ ,/ 检查点/ 技术/ 通常/ 无法/ 应用/ 于/ 资源/ 受限/ 且/ 已/ 部署/ 的/ 传感器/ 网络/ ./ Osterlind/ 等/ 人/ [/ 93/ ]/ 为/ 传感器/ 网络/ 测试台/ 提出/ 一/ 了/ 种/ 检查点/ 技术/ ,/ 该/ 技术/ 可以/ 为/ 测试/ 台上/ 的/ 运行/ 程序/ 周期性/ 创建/ 检查点/ ,/ 并/ 允许/ 用户/ 将/ 检查点/ 对应/ 的/ 系统/ 状态/ 转移/ 到/ 模拟器/ 中/ ,/ 实现/ 检查点/ 跨平台/ 加载/ ./ 中央/ 服务器/ 通过/ 向/ 节点/ 发送/ 冻结/ 与/ 解冻/ 命令/ 实现/ 检查点/ 的/ 创建/ 与/ 恢复/ ./ 为了/ 保证/ 获取/ 到/ 的/ 整个/ 网络/ 状态/ 的/ 一致性/ ,/ 需要/ 尽可能减少/ 网络/ 中/ 所有/ 节点/ 检查点/ 创建/ 的/ 时间/ 同步/ 误差/ ./ 除了/ 故障/ 定位/ ,/ 该/ 技术/ 可以/ 应用/ 于/ 如/ 测试台/ 的/ 重复/ 实验/ 、/ 故障注入/ 测试/ 以及/ 模拟/ 模型/ 验证/ 等/ 很多/ 领域/ ./ 4.2/ ./ 5/ 其它/ 故障/ 定位/ 技术/ (/ 1/ )/ 基于/ 数据挖掘/ 的/ 日志/ 分析/ 运行/ 环境/ 的/ 不/ 可控性/ 使得/ 传感器/ 网络/ 中/ 的/ 有些/ 故障/ 往往/ 难以/ 再现/ ,/ 如/ 协议/ 设计/ 中/ 缺陷/ 或/ 多/ 组件/ 集成/ 导致/ 的/ 组件/ 之间/ 的/ 交互/ 问题/ ./ 用户/ 需要/ 借助/ 事后/ 分析/ 手段/ 对/ 这类/ 故障/ 进行/ 定位/ ,/ 但/ 节点/ 资源/ 上/ 的/ 限制/ 使得/ 用户/ 无法/ 获得/ 足够/ 的/ 事后/ 调试信息/ ./ 应用/ 数据挖掘/ 算法/ 对/ 故障/ 日志/ 进行/ 分析/ ,/ 将/ 有效/ 地/ 帮助/ 用户/ 对/ 故障/ 成因/ 进行/ 推断/ ./ Dustminer/ [/ 94/ ]/ 通过/ 收集/ 系统/ 运行/ 过程/ 中/ 正常/ 与/ 故障/ 两种/ 情况/ 下/ 的/ 事件/ 日志/ ,/ 利用/ 关联/ 规则/ 挖掘/ 算法/ (/ Apriori/ )/ 提取/ 两种/ 情况/ 下/ 判别/ 模式/ (/ discriminativepatters/ )/ ,/ 即/ 两种/ 情况/ 下/ 特有/ 的/ 事件/ 序列/ ./ 用户/ 通过/ 对比/ 与/ 分析/ 这些/ 特有/ 序列/ 对/ 故障/ 原因/ 做出/ 推断/ ./ 类似/ 的/ ,/ SNTS/ [/ 95/ ]/ 使用/ PART/ 算法/ [/ 96/ ]/ 得到/ 故障/ 与/ 正常/ 两种/ 情况/ 下/ 日志/ 记录/ 对应/ 的/ 判别/ 规则/ ,/ 用户/ 通过/ 分析/ 这些/ 规则/ 对/ 故障/ 成因/ 进行/ 推断/ ./ (/ 2/ )/ 编程/ 抽象/ 对/ 故障/ 定位/ 的/ 支持/ 全新/ 的/ 应用/ 需求/ 以及/ 受限/ 的/ 资源/ 为/ 传感器/ 网络应用/ 编程/ 提出/ 了/ 挑战/ ,/ 人们/ 为/ 传感器/ 网络/ 设计/ 了/ 很多/ 新颖/ 的/ 编程/ 抽象/ ,/ 以/ 简化/ 编程/ 、/ 帮助/ 用户/ 快速/ 地/ 构建/ 应用/ ./ 然而/ ,/ 当/ 用户/ 构建/ 的/ 应用/ 出现/ 问题/ ,/ 并且/ 相应/ 编程/ 抽象/ 又/ 缺乏/ 对/ 调试/ 的/ 支持/ 时/ ,/ 编程/ 抽象/ 的/ 优势/ 将/ 不复存在/ ,/ 用户/ 需要/ 分析/ 生成/ 代码/ 对/ 相关/ 故障/ 进行/ 定位/ ./ 因此/ ,/ 编程/ 抽象/ 在/ 设计/ 时/ ,/ 需要/ 考虑/ 向/ 用户/ 提供/ 故障/ 定位/ 方面/ 的/ 支持/ [/ 97/ ]/ ./ YETI/ [/ 98/ ]/ 利用/ TinyOS/ 的/ nesC/ 编译器/ 产生/ 的/ nes/ C语言/ 到/ C语言/ Page12/ 的/ 映射/ 信息/ 向/ 用户/ 提供/ 了/ 支持/ nesC/ 编程/ 抽象/ 调试/ 的/ 集成/ 开发/ 环境/ ./ MDB/ [/ 99/ ]/ 则/ 允许/ 用户/ 以/ 顺序/ 的/ 方式/ 对/ MacroLab/ [/ 100/ ]/ 宏/ 编程/ 代码/ 进行/ 调试/ ,/ 而/ 这些/ 代码/ 对应/ 的/ 节点/ 程序/ 实际/ 是/ 以/ 异步/ 、/ 分布式/ 的/ 方式/ 在/ 多个/ 节点/ 上/ 执行/ 的/ ./ 4.3/ 故障/ 修复/ 故障/ 修复/ 是/ 调试/ 过程/ 中/ 的/ 重要一环/ ,/ 其/ 目的/ 是/ 对/ 部署/ 后/ 的/ 传感器/ 网络系统/ 及/ 应用/ 进行/ 缺陷/ 排除/ 、/ 功能/ 升级/ 和/ 性能/ 优化/ 以/ 适应/ 周边/ 物理/ 环境/ 和/ 自身/ 动态/ 系统/ 的/ 变化/ ./ 与/ 传统/ 故障/ 修复/ 相比/ ,/ 传感器/ 网络故障/ 修复/ 除了/ 遵循/ 通用/ 的/ 原因/ 分析/ 、/ 缺陷/ 排除/ 、/ 复查/ 测试/ 和/ 确认/ 正常/ 等/ 步骤/ 外/ ,/ 还/ 具有/ 如下/ 特点/ :/ (/ 1/ )/ 原地/ (/ insitu/ )/ 故障/ 修复/ 由于/ 众多/ 感知/ 节点/ 深度/ 嵌入/ 于/ 物理/ 环境/ 之中/ ,/ 系统/ 一旦/ 部署/ ,/ 在/ 许多/ 应用/ 场景/ 下/ (/ 如/ 野生动物/ 习性/ 监测/ 、/ 深海/ 、/ 火山/ 喷发/ 口/ )/ ,/ 物理/ 接触/ 全部/ 节点/ 并/ 不/ 现实/ ,/ 因此/ 需要/ 借助/ 无线/ 链路/ 对/ 远程/ 节点/ 上/ 运行/ 的/ 软件缺陷/ 进行/ 修复/ ./ 实现/ 该/ 过程/ 的/ 途径/ 通常/ 被/ 称为/ “/ 空中/ ”/ 重/ 编程/ (/ over/ -/ the/ -/ airreprogramming/ )/ ./ (/ 2/ )/ 故障/ 修复/ 能力/ 与/ 故障/ 修复/ 代价/ 存在/ 矛盾/ 传感器/ 网络故障/ 修复/ 能力/ 取决于/ 空中/ 重/ 编程/ 的/ 粒度/ 和/ 节点/ 执行/ 环境/ 能力/ ./ 因为/ 不同/ 层次/ 的/ 抽象/ 级别/ 使得/ 对/ 底层/ 的/ 完整/ 执行程序/ 或/ 程序/ 部分/ 模块/ 更新/ 比/ 对/ 高层/ 的/ 虚拟机/ 脚本/ 更新/ 具有/ 更强/ 、/ 更/ 灵活/ 的/ 修复/ 能力/ ./ 而/ 现有/ 的/ 研究/ 已/ 表明/ 传感器/ 节点/ 传输/ 信息/ 要/ 比/ 执行/ 计算/ 更/ 消耗/ 能量/ ,/ 这/ 使得/ 想要/ 获得/ 更/ 高/ 的/ 故障/ 修复/ 能力/ 就/ 可能/ 产生/ 更大/ 的/ 故障/ 修复/ 代价/ ./ 4.3/ ./ 1/ 代码/ 更新/ 代码/ 更新/ 是/ 传感器/ 网络软件/ 故障/ 修复/ 的/ 主要/ 手段/ ./ 作为/ 传感器/ 网络/ 中/ 一个/ 重要/ 研究/ 领域/ ,/ 人们/ 对/ 代码/ 更新/ 进行/ 了/ 深入/ 的/ 研究/ ./ 本文/ 仅/ 对/ 代码/ 更新/ 技术/ 进行/ 简要/ 介绍/ ,/ 关于/ 这方面/ 更加/ 深入/ 的/ 论述/ ,/ 读者/ 可以/ 参考/ 代表性/ 的/ 文献/ 和/ 相关/ 综述/ [/ 101/ -/ 103/ ]/ ./ 根据/ 不同/ 的/ 故障/ 修复/ 能力/ ,/ 我们/ 将/ 传感器/ 网络/ 代码/ 更新/ 方法/ 分为/ 3/ 类/ :/ 全/ 映像/ 更新/ 、/ 模块/ 级/ 更新/ 、/ 虚拟机/ 级/ 更新/ ./ (/ 1/ )/ 全/ 映像/ 更新/ 有些/ 节点/ 操作系统/ (/ 如/ TinyOS/ [/ 20/ ]/ 和/ MOS/ [/ 104/ ]/ )/ 通过/ 在/ 编译/ 时/ 静态/ 优化/ 代码/ 的/ 方法/ ,/ 达到/ 对/ 处理器/ 和/ 存储资源/ 的/ 合理/ 使用/ ,/ 以/ 提高/ 系统/ 的/ 运行/ 效率/ ./ 在/ 这样/ 的/ 执行/ 环境/ 中/ ,/ 操作系统/ 和/ 应用程序/ 混合/ 编译成/ 一个/ 单一/ 的/ 可/ 执行/ 代码/ ,/ 因此/ 不管/ 是/ 应用程序/ 还是/ 操作系统/ 在/ 修复/ 时/ ,/ 都/ 需要/ 对/ 整个/ 程序/ 映像/ 进行/ 更新/ ./ 这种/ 情况/ 下/ 代码/ 传输/ 代价/ 会/ 很大/ ,/ 给/ 故障/ 修复/ 带来/ 巨大/ 挑战/ ./ 这类/ 更新/ 技术/ 研究/ 的/ 重点/ 是/ 如何/ 降低/ 大块/ 数据/ 分发/ 时/ 的/ 网络/ 传输/ 开销/ ,/ 并/ 尽可能减少/ 整个/ 网络/ 代码/ 更新/ 时间/ ./ 其中/ ,/ 具有/ 代表性/ 的/ 研究/ 有/ Deluge/ [/ 101/ ]/ 、/ MNP/ [/ 105/ ]/ 和/ RatelessDeluge/ [/ 106/ ]/ 等/ ./ 增量/ 式/ 更新/ 是/ 对/ 全/ 映像/ 更新/ 的/ 一种/ 改进/ [/ 101/ ]/ ,/ 它/ 假设/ 每次/ 更新/ 只/ 修改/ 了/ 少量/ 的/ 代码/ ./ 通过/ 只/ 传输/ 更新/ 映像/ 与/ 原/ 映像/ 的/ 不同/ 部分/ ,/ 增量/ 更新/ 可以/ 有效/ 的/ 减少/ 代码/ 的/ 传输/ 量/ ./ (/ 2/ )/ 模块/ 级/ 更新/ 这/ 类/ 更新/ 技术/ 一般/ 需要/ 节点/ 执行/ 环境/ 具有/ 动态/ 模块/ 加载/ 功能/ (/ 如/ SOS/ [/ 29/ ]/ 和/ Contiki/ [/ 22/ ]/ )/ ./ 由于/ 模块/ 之间/ 是/ 一种/ 松散/ 的/ 耦合/ ,/ 所以/ 模块/ 之间/ 的/ 调用/ 比/ 简单/ 的/ 函数调用/ 需要/ 更大/ 的/ 开销/ ,/ 同时/ 由于/ 缺乏/ 编译/ 时/ 的/ 全局/ 优化/ ,/ 因此/ 在/ 代码/ 体积/ 和/ 执行/ 效率/ 上/ ,/ 比/ 单一化/ 执行/ 环境/ 要/ 低/ ./ 但是/ 模块化/ 执行/ 环境/ 具有/ 动态/ 的/ 模块/ 加载/ 能力/ ,/ 使得/ 在/ 传感器/ 网络故障/ 修复/ 时/ ,/ 只/ 需/ 更新/ 部分/ 的/ 程序模块/ ,/ 而/ 不用/ 将/ 整个/ 程序/ 的/ 代码/ 全部/ 更新/ ./ 模块/ 级/ 修复/ 在/ 传输/ 和/ 更新/ 代价/ 上/ 比全/ 映像/ 更新/ 要/ 小/ ,/ 因此/ 可以/ 节省/ 更/ 多/ 的/ 能量/ ,/ 延长/ 传感器/ 网络/ 的/ 生命周期/ ./ (/ 3/ )/ 虚拟机/ 级/ 更新/ 如果/ 故障/ 修复/ 涉及/ 的/ 代码执行/ 环境/ 是/ 虚拟机/ 时/ (/ 如/ Mate/ [/ 26/ ]/ 和/ ASVM/ [/ 25/ ]/ )/ ,/ 由于/ 传输/ 的/ 是/ 虚拟机/ 脚本/ ,/ 其/ 更新/ 代码/ 量/ 远/ 低于/ 二进制/ 映像/ 代码/ 量/ ./ 因此/ 在/ 虚拟机/ 执行/ 环境/ 中/ ,/ 更新/ 修复/ 在/ 网络/ 中/ 的/ 传输/ 开销/ 比前/ 两种/ 执行/ 环境/ 都/ 要/ 小/ ./ 此外/ ,/ 虚拟机/ 解释/ 执行/ 的/ 特点/ ,/ 使/ 程序/ 在/ 执行/ 时/ 不能/ 直接/ 访问/ 硬件/ ,/ 而/ 只能/ 间接/ 地/ 通过/ 虚拟机/ 完成/ ,/ 因此/ 虚拟/ 级/ 的/ 故障/ 修复/ 具有/ 良好/ 的/ 执行/ 安全性/ ./ 但是/ 中间代码/ 解释/ 执行/ 的/ 效率/ 比前/ 两种/ 执行/ 环境/ 都/ 低/ ./ 另外/ ,/ 如何/ 选定/ 适合/ 的/ 虚拟机/ 指令集/ 是/ 一个/ 挑战性/ 的/ 问题/ ./ ASVM/ 提供/ 了/ 一种/ 静态/ 的/ 应用/ 相关/ 的/ 虚拟机/ 生成/ 框架/ ,/ 它/ 可以/ 针对/ 应用/ 的/ 特点/ 来/ 定义/ 相应/ 的/ 虚拟机/ 执行/ 环境/ ./ DAViM/ [/ 107/ ]/ 和/ DVM/ [/ 108/ ]/ 都/ 试图/ 提供/ 一种/ 支持/ 可/ 动态/ 重/ 配置/ 的/ 通用/ 虚拟机/ 执行/ 环境/ 来/ 进一步提高/ 故障/ 修复/ 的/ 能力/ ./ 修改/ 能力/ 高/ 更新/ 开销/ 高依/ 情况/ 中/ 是否/ 重启/ 是/ 最后/ ,/ 表/ 5/ 对/ 不同/ 代码/ 更新/ 方式/ 在/ 修改/ 能力/ 、/ 更新/ 开销/ 以及/ 更新/ 后/ 节点/ 是否/ 需要/ 重启/ 等/ 方面/ 的/ 特点/ 进行/ 了/ 总结/ 与/ 比较/ ./ 4.3/ ./ 2/ 软件/ 抗衰/ 技术/ (/ softwarerejuvenation/ )/ 与/ 物理/ 世界/ 紧密/ 耦合/ 以及/ 长期/ 运行/ 的/ 特性/ ,/ 使/ 传感器/ 网络/ 会/ 受到/ “/ 软件/ 衰退/ ”/ 的/ 影响/ [/ 13/ ,/ 70/ ]/ ./ 软件/ 衰/ Page13/ 退是/ 指/ 一个/ 长时间/ 持续/ 运行/ 的/ 软件系统/ 会/ 发生/ 状态/ 退化/ 和/ 性能/ 降低/ ,/ 最终/ 导致系统/ 崩溃/ [/ 12/ ]/ ./ 软件/ 衰退/ 的/ 根本原因/ 是/ 系统/ 中/ 的/ 软件缺陷/ ,/ 这/ 类/ 缺陷/ 往往/ 因/ 错误/ 传播/ 模型/ 复杂/ 而/ 难以/ 进行/ 故障/ 定位/ ,/ 当/ 系统资源/ 高度/ 受限/ 时/ 故障/ 定位/ 将/ 变得/ 异常/ 困难/ ./ 然而/ ,/ 在/ 相关/ 缺陷/ 被/ 彻底/ 从/ 系统/ 中/ 移除/ 之前/ ,/ 我们/ 可以/ 借助/ 软件/ 抗衰/ 技术/ 对/ 相关/ 故障/ 进行/ 修复/ ./ 软件/ 抗衰/ 技术/ 的/ 基本/ 思想/ 是/ 通过/ 周期性地/ 暂停/ 软件/ 的/ 运行/ ,/ 清除/ 持续/ 运行/ 系统/ 的/ 内部/ 状态/ 、/ 重新启动/ 并/ 恢复/ 为/ 初始状态/ 或/ “/ 健康/ 的/ ”/ 中间状态/ ,/ 预防/ 将来/ 可能/ 发生/ 的/ 更/ 严重/ 的/ 故障/ [/ 109/ ]/ ./ 节点/ 重启/ 是/ 传感器/ 网络/ 中/ 最/ 简单/ 也/ 是/ 最/ 常用/ 的/ 一种/ 抗衰/ 方法/ ,/ 但/ 这种/ 方式/ 的/ 代价/ 较/ 高/ ./ 因为/ 简单/ 重启/ 会/ 影响/ 保存/ 在/ 数据/ 存储器/ 中/ 节点/ 所有/ 的/ 软件/ 状态/ ,/ 其中/ 的/ 某些/ 状态/ 重建/ 需要/ 消耗/ 节点/ 的/ 能源/ ,/ 如/ 路由/ 信息/ 、/ 邻居/ 表等/ 状态/ 信息/ ./ 当/ 软件/ 衰退/ 部分/ 与/ 这些/ 状态/ 无关/ 时/ ,/ 整个/ 系统/ 的/ 重启/ 会/ 导致/ 过多/ 的/ 开销/ ./ Chen/ 等/ 人/ [/ 70/ ]/ 研究/ 了/ 节点/ 内存/ 错误处理/ 时/ 的/ 微/ 重启/ 技术/ ,/ 而/ Woehrle/ 等/ 人/ [/ 13/ ]/ 则/ 从/ 组件/ 角度/ 研究/ 了/ 细粒度/ 重启/ 的/ 节点/ 软件/ 抗衰/ 技术/ ./ 这些/ 研究/ 表明/ 软件/ 抗衰/ 技术/ 在/ 传感器/ 网络/ 中/ 应用/ 的/ 可行性/ 与/ 有效性/ ,/ 是/ 传感器/ 网络/ 一个/ 重要/ 的/ 研究/ 方向/ ./ 未来/ 传感器/ 网络软件/ 抗衰/ 技术/ 需要/ 在/ 系统结构/ 设计/ 、/ 恢复/ 时机/ 以及/ 不同/ 恢复/ 策略/ 对系统/ 开销/ 的/ 影响/ 等/ 方面/ 进行/ 深入/ 的/ 研究/ ./ 5/ 未来/ 研究/ 方向/ 随着/ 越来越/ 多/ 实际/ 应用/ 系统/ 的/ 出现/ ,/ 越来越/ 多/ 的/ 研究/ 人员/ 开始/ 关注/ 传感器/ 网络/ 调试/ 以及/ 与/ 实际/ 部署/ 相关/ 的/ 各类/ 问题/ ,/ 同时/ 提出/ 了/ 不少/ 新颖/ 的/ 解决方案/ 和/ 技术/ [/ 6/ -/ 7/ ]/ ./ 但/ 目前/ 这个/ 领域/ 的/ 研究/ 还/ 处于/ 一个/ 起步/ 阶段/ ,/ 我们/ 认为/ 未来/ 的/ 热点/ 研究/ 方向/ 包括/ 以下/ 一些/ 内容/ ./ 5.1/ 部署/ 前/ 测试/ 与/ 验证/ 通过/ 各种/ 测试/ 与/ 验证/ 手段/ 尽可能/ 在/ 部署/ 前/ 发现/ 系统/ 潜在/ 缺陷/ ,/ 可以/ 在/ 一定/ 程度/ 上/ 减少/ 在/ 部署/ 后/ 资源/ 受限/ 条件/ 下/ 实施/ 调试/ 可能/ ./ 现有/ 的/ 模拟/ 仿真/ 工具/ 通常/ 对/ 感知/ 和/ 无线/ 传输/ 等/ 模型/ 做/ 了/ 过/ 多/ 简化/ 和/ 假设/ ,/ 并且/ 大多/ 注重/ 网络通信/ 层面/ 的/ 性能/ 分析/ ,/ 无法/ 对/ 一些/ 感知/ 数据/ 驱动/ 的/ 应用/ —/ —/ —/ 如/ 目标/ 追踪/ 和/ 危险/ 气体/ 扩散/ 检测/ 等/ —/ —/ —/ 进行/ 有效/ 的/ 模拟/ 分析/ ./ 未来/ 需要/ 研究/ 典型/ 应用/ 场景/ 建模/ 与/ 仿真技术/ ,/ 通过/ 完善/ 、/ 优化/ 无线/ 传输/ 和/ 感知/ 数据模型/ ,/ 允许/ 用户/ 在/ 系统/ 实际/ 部署/ 前/ 借助/ 模拟器/ 对系统/ 的/ 功能/ 与/ 性能/ 进行/ 较为/ 全面/ 的/ 评估/ ./ 此外/ ,/ 未来/ 基于/ 测试台/ 实验/ 结果/ 的/ 模拟/ 增强/ 技术/ 、/ 非/ 确定性/ 故障注入/ 的/ 测试/ 技术/ 以及/ 支持/ 复杂/ 环境/ 通信/ 干扰/ 模拟/ 的/ 测试台/ 技术/ 研究/ ,/ 将/ 有效/ 提高/ 模拟/ 与/ 测试环境/ 的/ 真实度/ ,/ 帮助/ 开发人员/ 尽早/ 捕获/ 系统/ 潜在/ 缺陷/ ./ 此外/ ,/ 已有/ 研究/ 表明/ 静态/ 软件/ 分析/ 技术/ 可以/ 有效/ 地/ 揭示/ 某些/ 与非/ 确定性/ 故障/ 相关/ 软件缺陷/ ./ 结合/ 节点/ 程序/ 特性/ 以及/ 网络/ 约束/ 关系/ ,/ 将/ 已有/ 静态/ 软件/ 分析/ 技术/ 应用/ 于/ 传感器/ 网络故障/ 检测/ ,/ 也/ 是/ 未来/ 部署/ 前/ 调试/ 技术/ 需要/ 深入研究/ 的/ 内容/ ./ 5.2/ 操作系统/ 和/ 编程/ 抽象/ 对/ 调试/ 的/ 支持/ 为了/ 满足/ 传感器/ 网络/ 全新/ 的/ 应用/ 需求/ ,/ 新颖/ 的/ 操作系统/ 和/ 编程/ 抽象/ 一直/ 是/ 人们/ 研究/ 的/ 一个/ 热点/ ,/ 然而/ 这些/ 操作系统/ 和/ 编程/ 抽象/ 在/ 设计/ 时/ 很少/ 考虑/ 如何/ 为/ 构建/ 的/ 应用/ 提供/ 专门/ 的/ 调试/ 支持/ [/ 97/ ]/ ./ 未来/ 的/ 研究/ ,/ 人们/ 一方面/ 需要/ 为/ 现有/ 操作系统/ 和/ 编程/ 抽象/ 增加/ 调试/ 支持/ ,/ 如/ 本文/ 4.2/ ./ 5/ 节/ 提到/ 的/ MDB/ 调试器/ ;/ 另一方面/ 则/ 需要/ 从/ 调试/ 角度/ 出发/ ,/ 重新考虑/ 操作系统/ 、/ 运行/ 环境/ 以及/ 编程/ 抽象/ 的/ 设计/ ,/ 从而/ 为/ 构建/ 的/ 应用/ 提供/ 有效/ 的/ 调试/ 手段/ 和/ 验证/ 机制/ ./ 例如/ 有/ 研究/ 人员/ 提出/ 通过/ RESTful/ 接口/ 抽象/ 出/ 节点/ 硬件/ 的/ 基本功能/ ,/ 将/ 应用逻辑/ 从/ 节点/ 程序/ 中/ 剥离/ [/ 11/ ]/ ,/ 开发人员/ 通过/ 这些/ 接口/ 在/ 节点/ 嵌入式软件/ 之上/ 构建/ 应用/ ,/ 进而/ 缓解/ 了/ 传感器/ 网络/ 调试/ 时因/ 受限/ 资源/ 导致/ 的/ 各类/ 问题/ ./ 这类/ 思想/ 也/ 被/ 用于/ 解决/ 普适/ 计算环境/ 中/ 异构/ 设备/ 集成/ 时/ 的/ 可扩展性/ 问题/ [/ 110/ ]/ ./ 5.3/ 长期/ 监测/ 与/ 事后/ (/ post/ -/ mortem/ )/ 调试/ 持续/ 运行/ 以及/ 资源/ 受限/ 特性/ ,/ 向/ 传感器/ 网络/ 的/ 长期/ 监测/ 提出/ 了/ 挑战/ ./ 调试/ 需要/ 系统/ 状态/ 可见/ ,/ 然而/ 可见度/ 和/ 资源/ 开销/ 之间/ 存在/ 矛盾/ ./ 传感器/ 网络/ 监测/ 需要/ 在/ 足够/ 的/ 可见度/ 和/ 有限/ 的/ 资源/ 之间/ 寻求/ 一个/ 合适/ 的/ 平衡点/ ./ 特别/ 是/ 当/ 需要/ 对系统/ 进行/ 长时间/ 观测/ 以/ 收集/ 足够/ 的/ 信息/ 对/ 相关/ 问题/ 进行/ 推断/ 时/ ,/ 这种/ 平衡/ 显得/ 更加/ 的/ 重要/ ./ 例如/ ,/ vLevels/ [/ 10/ ]/ 为/ 系统/ 监测/ 提出/ 的/ 可见度/ 管理机制/ 以及/ ADA/ [/ 111/ ]/ 提出/ 的/ 自/ 适应/ 调试/ 方法/ ,/ 都/ 考虑/ 了/ 调试/ 中/ 资源/ 开销/ 与/ 状态/ 信息/ 的/ 平衡/ 问题/ ./ 此外/ ,/ 低功耗/ 、/ 大容量/ 以及/ 低成本/ Flash/ 存储设备/ 的/ 出现/ ,/ 使得/ 用户/ 可以/ 在/ 节点/ 本地/ 记录/ 更/ 多/ 的/ 系统/ 运行/ 情况/ 供/ 后期/ 故障/ 定位/ 使用/ ./ 未来/ 以/ 存储/ 为/ 中心/ 的/ 事后/ 调试/ 技术/ 研究/ 将/ 有效/ 克服/ 现有/ 集中式/ 在/ 资源/ 开销/ 大/ 以及/ 状态/ 信息/ 不足/ 方面/ 的/ 缺点/ ./ 5.4/ 异构/ 环境/ 下/ 故障/ 定位/ 与/ 分析/ 随着/ 智能/ 设备/ 的/ 增加/ 以及/ 物/ 联网/ 的/ 兴起/ ,/ 越来越/ 多/ 的/ 传感器/ 网络应用/ 将会/ 涉及/ 多种/ 计算/ 、/ 通信/ 和/ Page14/ 感知/ 能力/ 各异/ 的/ 设备/ ./ 这些/ 设备/ 在/ 软硬件/ 以及/ 协议/ 标准/ 上/ 的/ 差异/ 会为/ 传感器/ 网络/ 调试/ 带来/ 更大/ 的/ 挑战/ ./ 这/ 也/ 是/ 以后/ 物/ 联网/ 在/ 应用/ 集成/ 过程/ 中/ 需要/ 考虑/ 和/ 解决/ 的/ 一个/ 重要/ 问题/ ./ 6/ 结束语/ 随着/ 实际/ 应用/ 系统/ 的/ 部署/ ,/ 传感器/ 网络/ 调试/ 问题/ 得到/ 了/ 越来越/ 多/ 的/ 关注/ ./ 本文/ 全面/ 分析/ 了/ 传感器/ 网络/ 调试/ 所/ 涉及/ 的/ 问题/ 与/ 面临/ 的/ 挑战/ ,/ 详细/ 总结/ 了/ 调试/ 过程/ 中/ 常用/ 的/ 系统/ 状态/ 信息/ 及其/ 获取/ 技术/ ,/ 综述/ 了/ 调试/ 中/ 具有/ 代表性/ 的/ 故障/ 检测/ 、/ 定位/ 与/ 修复/ 技术/ ,/ 并/ 在/ 最后/ 指出/ 了/ 未来/ 的/ 研究/ 方向/ ./ 我们/ 相信/ ,/ 随着/ 传感器/ 网络理论/ 与/ 技术/ 研究/ 的/ 深入/ ,/ 越来越/ 多/ 基于/ 无线/ 传感/ 技术/ 的/ 应用/ 将/ 被/ 布署/ 在/ 生产/ 和/ 生活/ 的/ 各个领域/ ./ 致谢/ 审稿人/ 为/ 本文/ 提出/ 了/ 宝贵/ 的/ 修改意见/ ,/ 作者/ 在/ 此/ 表示/ 衷心感谢/ !/ 

