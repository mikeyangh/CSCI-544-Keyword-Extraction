Page1/ 基于/ 包含/ 的/ 指针/ 分析/ 优化/ 技术/ 综述/ 陈/ 聪明/ 1/ )/ ,/ 2/ )/ 霍玮/ 1/ )/ 于/ 洪涛/ 1/ )/ ,/ 2/ )/ 冯晓兵/ 1/ )/ 1/ )/ (/ 中国科学院计算技术研究所/ 计算机系统/ 结构/ 重点/ 实验室/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 研究生院/ 北京/ 100190/ )/ 摘要/ 指针/ 分析/ 是/ 程序/ 分析/ 和/ 编译/ 优化/ 的/ 基础/ ,/ 针对/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 的/ 改进/ 一直/ 是/ 指针/ 分析/ 领域/ 研究/ 的/ 热点/ 之一/ ./ 文中/ 从/ 该/ 指针/ 分析/ 算法/ 改进/ 的/ 两类/ 技术/ 来/ 总结/ 近/ 二十年/ 来/ 相关/ 的/ 研究/ 工作/ ,/ 包括/ 在线/ 优化/ 技术/ 如/ 约束/ 图上/ 的/ 强/ 连通/ 分量/ 的/ 检测/ 和/ 消除/ 等/ 和/ 离线/ 优化/ 技术/ 如/ 变量/ 替换/ 等/ ./ 通过/ 实验/ 对比/ 了/ 7/ 种较/ 有/ 影响力/ 的/ 分析/ 算法/ 和/ 三种/ 离线/ 优化/ 算法/ ,/ 并/ 从/ 性能/ 、/ 内存/ 开销/ 等/ 方面/ 进行/ 了/ 评述/ 和/ 总结/ ./ 文章/ 最后/ 阐述/ 了/ 基于/ 包含/ 的/ 指针/ 分析/ 今后/ 潜在/ 的/ 研究/ 方向/ ./ 关键词/ 指针/ 分析/ ;/ Andersen/ 风格/ ;/ 指向/ 集/ ;/ 约束/ 图/ ;/ 流/ 不/ 敏感/ 1/ 引言/ 指针/ 是/ 众多/ 编程语言/ 中/ 广泛/ 使用/ 的/ 一种/ 特殊/ 的/ 数据类型/ ./ 一个/ 指针/ 变量/ 用于/ 保存/ 一个/ 程序/ 对象/ 的/ Page2/ 中/ 指针/ 分析/ 是/ 指/ 分析/ 一个/ 指针/ 所有/ 可能/ 指向/ 的/ 内存/ 位置/ ,/ 包括/ 程序/ 中/ 的/ 全局变量/ 、/ 局部变量/ 、/ 动态数据/ 对象/ 等等/ ./ 指针/ 分析/ 是/ 一类/ 特殊/ 的/ 数据流/ 问题/ [/ 1/ ]/ ,/ 它/ 是/ 其它/ 静态/ 程序/ 分析/ 的/ 基础/ ,/ 但/ 指针/ 使用/ 的/ 灵活性/ 导致/ 了/ 指针/ 分析/ 的/ 复杂性/ ,/ 实际上/ 精确/ 的/ 指针/ 分析/ 是/ 一个/ 不可判定/ 问题/ [/ 2/ -/ 3/ ]/ ,/ 所以/ 实际/ 的/ 指针/ 分析/ 算法/ 都/ 是/ 近似/ 且/ 保守/ 的/ ,/ 须/ 在/ 效率/ 和/ 精度/ 之间/ 进行/ 折衷/ ./ 在/ 过去/ 的/ 近/ 三十年/ 间/ ,/ 指针/ 分析/ 一直/ 是/ 程序/ 分析/ 领域/ 的/ 研究/ 重点/ 之一/ ,/ 至今/ 仍/ 很/ 活跃/ ./ 指针/ 分析/ 研究/ 的/ 内容/ 主要/ 集中/ 在/ 分析/ 精度/ 和/ 时空/ 开销/ 之间/ 的/ 取舍/ ./ 精度/ 方面/ ,/ 主要/ 指流/ 敏感性/ (/ flow/ -/ sensitivity/ )/ 和/ 上下文/ 敏感性/ (/ context/ -/ sensitivity/ )/ ,/ 一般而言/ ,/ 流/ 敏感/ 分析方法/ 的/ 精度/ 明显/ 好于/ 流/ 不/ 敏感/ 的/ 分析方法/ ,/ 在/ 上下文/ 敏感性/ 上/ 也/ 有/ 同样/ 的/ 特点/ ./ 精度/ 不同/ ,/ 对应/ 的/ 指针/ 分析/ 算法/ 的/ 差别/ 也/ 较大/ ,/ 指针/ 分析/ 领域/ 的/ 大多数/ 研究/ 工作/ 都/ 是/ 在/ 保证/ 精度/ 的/ 前提/ 下/ 研究/ 如何/ 提升/ 分析/ 算法/ 的/ 效率/ ./ 流/ 不/ 敏感/ 的/ 指针/ 分析/ 普遍/ 使用/ 在/ 开源/ 或者/ 产品/ 级/ 高级/ 编译器/ 中/ ,/ 其中/ 主要/ 有/ 两类/ :/ 基于/ 包含/ (/ inclusion/ -/ based/ )/ [/ 4/ ]/ 的/ 指针/ 分析/ 和/ 基于/ 合并/ (/ unifi/ -/ cation/ -/ based/ )/ [/ 5/ ]/ 的/ 指针/ 分析/ ./ 基于/ 包含/ 的/ 指针/ 分析/ 是/ 一种/ 基于/ 约束/ 集/ (/ constraintset/ )/ 求解/ [/ 6/ -/ 8/ ]/ 的/ 流/ 不/ 敏感/ 的/ 指针/ 分析方法/ ,/ 由/ Andersen/ [/ 4/ ]/ 于/ 1994/ 年/ 在/ 他/ 的/ 博士论文/ 中/ 首次/ 提出/ ./ 该/ 指针/ 分析/ 又/ 称为/ 基于/ 子集/ (/ subset/ -/ based/ )/ 的/ 指针/ 分析/ 或者/ 基于/ 约束/ 的/ (/ constraint/ -/ based/ )/ 指针/ 分析/ ,/ 在/ 指针/ 分析/ 领域/ 后来/ 也/ 被/ 称之为/ Andersen/ 风格/ (/ Andersen/ -/ Style/ )/ 的/ 指针/ 分析/ ,/ 其/ 算法/ 的/ 时间/ 复杂度/ 为/ O/ (/ n3/ )/ ,/ 其中/ n/ 指/ 程序/ 中/ 参与/ 分析/ 的/ 变量/ 数/ ;/ 而/ 基于/ 合并/ 的/ 指针/ 分析/ 是/ 由/ Steensgaard/ [/ 5/ ]/ 在/ 1996/ 年/ 提出/ 的/ 一种/ 指针/ 分析方法/ ,/ 又/ 称为/ 基于/ 等价/ (/ equivalence/ -/ based/ )/ 的/ 指针/ 分析/ ,/ 或者/ 也/ 称之为/ Steensgaard/ 风格/ (/ Steensgaard/ -/ Style/ )/ 的/ 指针/ 分析/ ,/ 其/ 复杂度/ 接近/ 于/ 线性/ 复杂度/ ./ 在/ 近/ 三十年/ 来/ 的/ 指针/ 分析/ 研究/ 中/ ,/ 很/ 大部分/ 的/ 研究/ 工作/ 都/ 是/ 集中/ 在/ 对/ 上述/ 两种/ 指针/ 分析方法/ 的/ 改进/ ./ 相对/ 于/ 基于/ 合并/ 的/ 指针/ 分析/ ,/ 对/ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 研究/ 更/ 活跃/ 同时/ 也/ 更具/ 影响力/ :/ 一方面/ 是因为/ 基于/ 包含/ 的/ 指针/ 分析方法/ 精度/ 更/ 高/ 而/ 更/ 能/ 满足/ 其它/ 程序/ 分析/ 的/ 需要/ ;/ 另一方面/ 基于/ 包含/ 的/ 指针/ 分析/ 由于/ 其/ 分析/ 算法/ 本身/ 的/ 特点/ 使得/ 其/ 效率/ 提升/ 的/ 空间/ 更大/ ./ 目前/ 开源/ 编译器/ (/ 如/ GCC/ 和/ LLVM/ )/ 均/ 使用/ 的/ 是/ 融合/ 了/ 优化/ 改进/ 技术/ 的/ 基于/ 包含/ 的/ 指针/ 分析/ ./ 所以/ ,/ 我们/ 相信/ 对/ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 优化/ 技术/ 进行/ 详细/ 的/ 总结/ 和/ 分析/ 具有/ 十分/ 重要/ 的/ 意义/ ,/ 这/ 也/ 是/ 本/ 综述/ 的/ 主要/ 出发点/ ./ 在/ 指针/ 分析/ 领域/ ,/ 有/ 多篇/ 综述/ 文章/ 对/ 指针/ 分析/ 领域/ 的/ 相关/ 研究/ 工作/ 做/ 了/ 较为/ 全面/ 的/ 分析/ 和/ 总结/ ,/ 如/ 文献/ [/ 9/ -/ 11/ ]/ 等等/ ./ 但是/ 这些/ 综述/ 都/ 是从/ 宏观/ 角度/ 对/ 各种/ 指针/ 分析方法/ 及/ 相关/ 工作/ 作/ 横向/ 的/ 介绍/ ,/ 并/ 没有/ 就/ 某/ 一类/ 具体/ 的/ 指针/ 分析/ 算法/ 做/ 深入探讨/ ,/ 缺乏/ 对/ 分析/ 算法/ 具体/ 的/ 改进/ 措施/ 的/ 介绍/ ,/ 亦/ 没有/ 详实/ 的/ 可供参考/ 的/ 实验/ 数据/ ./ 与/ 其它/ 综述/ 不同/ 的/ 是/ ,/ 本/ 综述/ 关注/ 的/ 是/ 基于/ 包含/ 的/ 指针/ 分析/ 及/ 相关/ 研究/ 工作/ ,/ 主要/ 涵盖/ 了/ 近/ 二十年/ 来/ 对/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 进行/ 优化/ 的/ 相关/ 工作/ ,/ 并/ 通过/ 详细/ 的/ 实验/ 数据/ 对/ 各种/ 优化/ 方法/ 进行/ 对比/ 和/ 分析/ ./ 本文/ 第/ 2/ 节/ 介绍/ 基于/ 包含/ 的/ 指针/ 分析/ 基本概念/ 和/ 算法/ ;/ 第/ 3/ 节/ 总结/ 在线/ 优化/ 技术/ 相关/ 的/ 算法/ ,/ 并/ 通过/ 实验/ 进行/ 对比/ 和/ 分析/ ;/ 第/ 4/ 节/ 总结/ 离线/ 优化/ 相关/ 的/ 技术/ ,/ 并/ 通过/ 实验/ 进行/ 对比/ 和/ 分析/ ;/ 第/ 5/ 节/ 简要/ 介绍/ 指针/ 分析/ 通用/ 改进/ 技术/ ,/ 包括/ 精度/ 提升/ 和/ 指向/ 集/ 表示/ ;/ 最后/ 一节/ 总结/ 全文/ 同时/ 阐述/ 指针/ 分析/ 领域/ 今后/ 潜在/ 的/ 研究/ 方向/ ./ 2/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 基于/ 包含/ 的/ 指针/ 分析/ 将/ 指针/ 值/ 看作/ 是/ 一种/ 约束/ 关系/ ,/ 这种/ 约束/ 关系/ 直观/ 上/ 来说/ 是/ 指/ 一种/ 集合/ 包含/ 关系/ ./ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 建立/ 在/ 集合/ 约束/ 分析/ 之上/ ,/ 它/ 将/ 指针/ 分析/ 分为/ 两个/ 阶段/ :/ 约束/ 生成/ (/ constraintgeneration/ )/ 和/ 约束/ 求解/ (/ constraintres/ -/ olution/ )/ ./ 约束/ 生成/ 使用/ 一种/ 约束/ 规范/ 语言/ 来/ 表示/ 实际/ 的/ 程序/ ;/ 约束/ 求解/ 根据/ 生成/ 的/ 约束/ 使用/ 迭代/ 方法/ 求解/ 以/ 得到/ 问题/ 的/ 最小/ 解/ ./ 关于/ 约束/ 分析/ 的/ 详细/ 介绍/ 和/ 应用/ 可以/ 参考文献/ [/ 4/ ]/ ./ 2.1/ 约束/ 生成/ 在/ 约束/ 生成/ 过程/ 中/ ,/ 基于/ 包含/ 的/ 指针/ 分析/ 将/ 每/ 一条/ 赋值/ 语句/ 看作/ 一个/ 约束/ (/ 许多/ 高级/ 语言/ 都/ 支持/ 强制/ 类型转换/ ,/ 在/ 指针/ 分析/ 算法/ 中/ 不/ 考虑/ 变量/ 的/ 类型信息/ ,/ 因此/ 此处/ 以及/ 下文/ 对/ 指针/ 变量/ 和/ 非/ 指针/ 变量/ 不加区分/ )/ ,/ 并/ 按照/ 约定/ 规则/ 为/ 每/ 一条/ 语句/ 生成/ 对应/ 的/ 约束/ ,/ 将/ 整个/ 程序转换/ 成/ 一个/ 约束/ 集合/ ./ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 约束/ 系统/ 可以/ 抽象/ 为表/ 1/ 第/ 2/ 列/ 所示/ 的/ 4/ 条/ 规则/ :/ 其中/ [/ addr/ ]/ 称为/ 基本/ 约束/ ,/ [/ trans/ ]/ 称为/ 简单/ 约束/ ,/ [/ deref1/ ]/ 和/ [/ deref2/ ]/ 都/ 是/ 复杂/ 约束/ ./ τ/ 1/ ,/ τ/ 2/ ,/ τ/ 3/ 是/ 约束/ 变量/ ,/ 约束/ 生成/ 过程/ 中为/ 每个/ 程序/ 变量/ v/ 赋予/ 一个/ 约束/ 变量/ τ/ ,/ 约束/ 变量/ τ/ 表示/ v/ 的/ 抽象/ Page3/ 存储/ 位置/ ,/ τ/ 的/ 值/ 表示/ v/ 所/ 指向/ 的/ 存储/ 位置/ 集合/ ./ 例如/ 对于/ 指针/ 变量/ 赋值/ 语句/ p/ =/ q/ ,/ 其/ 对应/ 的/ 约束/ 为/ τ/ 1/ / τ/ 2/ ,/ 表示/ p/ 所/ 指向/ 的/ 存储/ 位置/ 集合/ (/ 简称/ 为/ 指向/ 集/ )/ 包含/ q/ 的/ 指向/ 集/ ./ 符号/ “/ {/ }/ ”/ 代表/ 取/ 地址/ 操作/ ,/ “/ / ”/ 代表/ 指针/ 解/ 引用/ 操作/ ./ 表/ 1/ 中/ 最后/ 两列/ 显示/ 了/ 由/ 示例/ 语句/ 生成/ 的/ 初始/ 约束/ 以及/ 基于/ 上述/ 4/ 条/ 约束/ p/ =/ a/ ;/ p/ =/ q/ ;/ q/ =/ a/ ;/ q/ =/ r/ ;/ p/ =/ / q/ ;/ p/ =/ r/ ;/ / p/ =/ q/ ;/ 表/ 1/ 约束/ 规则/ 以及/ 约束/ 求解/ [/ addr/ ]/ [/ deref2/ ]/ 基本/ 约束/ 和/ 简单/ 约束/ 是/ 构建/ 初始/ 约束/ 图/ (/ constraintgraph/ )/ 的/ 基础/ ./ 约束/ 图是/ 一种/ 有向图/ ,/ 如图/ 1/ 所示/ ,/ 图中/ 的/ 节点/ 表示/ 程序/ 变量/ ,/ 有/ 向/ 边/ 表示/ 简单/ 约束/ ./ 子图/ (/ a/ )/ 为/ 示例/ 程序/ 对应/ 的/ 初始/ 的/ 约束/ 图/ ,/ 初始/ 约束/ 图/ 的/ 建立/ 分为/ 三步/ :/ 首先/ 为/ 程序/ 中/ 的/ 每个/ 变量/ 建立/ 一个/ 节点/ ,/ 然后/ 根据/ 基本/ 约束/ 标注/ 节点/ 的/ 指向/ 集/ ,/ 最后/ 为/ 每/ 一个/ 初始/ 的/ 简单/ 约束/ 建立/ 一条/ 有/ 向/ 边/ ./ 所有/ 复杂/ 约束/ 是/ 进行/ 约束/ 求解/ 的/ 驱动/ ,/ 因为/ 复杂/ 约束/ 会/ 导致/ 新/ 的/ 简单/ 约束/ 产生/ ./ 子图/ (/ b/ )/ 是/ 示例/ 程序/ 约束/ 求解/ 后/ 的/ 结果/ ,/ 其中/ 虚线/ 边为/ 约束/ 求解/ 过程/ 中/ 在/ 约束/ 图中/ 新/ 添加/ 的/ 有/ 向/ 边/ ,/ 各/ 节点/ 指向/ 集/ 元素/ 的/ 改变/ 在/ 图/ 中用/ 粗体/ 标出/ ./ 具体/ 的/ 约束/ 求解/ 算法/ 在下文/ 给出/ ./ 2.2/ 约束/ 求解/ 约束/ 求解/ 基本/ 算法/ 如图/ 2/ 所示/ ,/ 其中/ 输入/ 为/ 初始/ 的/ 约束/ 图/ ,/ 输出/ 为/ 求解/ 之后/ 的/ 约束/ 图/ ,/ 符号/ pts/ (/ x/ )/ 表示/ 变量/ x/ 的/ 指向/ 集/ ./ 算法/ 使用/ 基于/ 工作/ 集/ (/ work/ -/ list/ )/ 的/ 迭代/ 求解/ 方法/ ,/ 算法/ 6/ ~/ 19/ 行/ 表示/ 一次/ 迭代/ 过程/ 中/ 的/ 所有/ 操作/ ,/ 该/ 过程/ 主要/ 分为/ 两步/ :/ 处理/ 两类/ 复杂/ 约束/ (/ 7/ ~/ 15/ 行/ )/ 和/ 传递/ 指向/ 集/ (/ 16/ ~/ 19/ 行/ )/ ./ 处理/ 复杂/ 约束/ 的/ 过程/ 中/ 可能/ 会/ 向/ 约束/ 图中/ 添加/ 新边/ (/ 10/ 行/ 规则/ 进行/ 约束/ 求解/ 之后/ 的/ 结果/ ./ 此处/ 为/ 简单/ 起/ 见/ ,/ 用/ 同一个/ 字母/ 表示/ 程序/ 变量/ 与/ 对应/ 的/ 约束/ 变量/ ,/ 如/ 语句/ p/ =/ a/ 中/ 的/ 程序/ 变量/ p/ 与/ 对应/ 约束/ (/ p/ / {/ a/ }/ )/ 中/ 约束/ 变量/ p/ ./ 此处/ 需要/ 指出/ 的/ 是/ ,/ 语句/ 的/ 顺序/ 并/ 不/ 影响/ 约束/ 的/ 生成/ 以及/ 约束/ 求解/ 结果/ ,/ 这/ 也/ 是/ 流/ 敏感/ 的/ 分析/ 与/ 流/ 不/ 敏感/ 的/ 分析/ 之间/ 的/ 差异/ ./ 和/ 14/ 行/ )/ ,/ 这会/ 导致/ 新/ 的/ 指向/ 集/ 传递/ 过程/ (/ 16/ 行/ )/ ;/ 而/ 指向/ 集/ 的/ 更新/ (/ 17/ 行/ )/ 会/ 导致/ 工作/ 集/ 的/ 更新/ (/ 19/ 行/ )/ 从而/ 进入/ 下/ 一次/ 的/ 迭代/ 过程/ ./ 当/ 工作/ 集为/ 空时/ ,/ 算法/ 终止/ ./ 约束/ 图中/ 的/ n/ 个/ 节点/ 之间/ 最多/ 有/ n2/ 条有/ 向/ 边/ ,/ 因此/ 不论是/ 处理/ 复杂/ 约束/ 还是/ 传递/ 指向/ 集/ ,/ 这/ 两步/ 操作/ 中/ 理论/ 上/ 最多能/ 有/ n2/ 个/ 节点/ 添加/ 到/ 工作/ 集中/ ,/ 且/ 工作/ 集中/ 节点/ 数是/ 有限/ 的/ ,/ 因此/ 算法/ 必然/ 能/ 在/ 有限/ 次/ 迭代/ 之后/ 终止/ ./ 提升/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 效率/ 的/ 改进/ 措施/ 本质/ 上/ 并/ 没有/ 减小/ 指针/ 分析/ 算法/ 的/ 复杂度/ ,/ 而是/ 通过/ 显著/ 地/ 减少/ n/ 来/ 获得/ 性能/ 的/ 提升/ ./ 这些/ 措施/ 主要/ 可以/ 分为/ 两类/ :/ 一类/ 是/ 在线/ 优化/ ,/ 主要/ 是/ 约束/ 图上/ 强/ 连通/ 分量/ (/ stronglyconnectedcomponents/ )/ 的/ 检测/ 和/ 消除/ ,/ 所谓/ 在线/ 是/ 指/ 优化/ 在/ 约束/ 求解/ 过程/ 中/ 进行/ ./ Page4/ 约束/ 求解/ 以/ 复杂/ 约束/ 为/ 驱动/ 进行/ 迭代/ ,/ 其间/ 不断/ 有/ 新边/ 加入/ 到/ 约束/ 图中/ ,/ 通过/ 检测/ 和/ 合并/ 不断更新/ 的/ 约束/ 图上/ 的/ 强/ 连通/ 分量/ 可以/ 显著/ 地/ 减少/ 约束/ 图上/ 冗余/ 的/ 指向/ 集/ 传递/ ,/ 同时/ 有效/ 地/ 降低/ 约束/ 求解/ 过程/ 中/ 的/ 迭代/ 次数/ ;/ 另外/ 一类/ 称为/ 离线/ 优化/ (/ OfflineOptimization/ )/ ,/ 是/ 指/ 在/ 约束/ 生成/ 之后/ 约束/ 求解/ 之前/ 进行/ 预处理/ ,/ 通过/ 变量/ 替换/ 和/ 合并/ 强/ 连通/ 分量/ 等/ 策略/ 减小/ 约束/ 图/ 的/ 规模/ 从而/ 减少/ 约束/ 求解/ 的/ 时空/ 开销/ ./ 以上/ 两种/ 技术/ 是/ 对/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 的/ 最为/ 重要/ 的/ 改进/ ./ 此外/ 还有/ 一些/ 研究/ 工作/ 集中/ 在/ 提升/ 分析/ 的/ 精度/ 上/ ,/ 如/ 将/ 初始/ 的/ 基于/ 域/ 的/ (/ Field/ -/ Based/ )/ 的/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ [/ 4/ ]/ 改进/ 成域/ 敏感/ (/ Field/ -/ Sensitive/ )/ 的/ 算法/ ;/ 或者/ 做/ 上下文/ 敏感/ 的/ 改进/ ,/ 提升/ 原始/ 算法/ 过程/ 间/ 分析/ 的/ 精度/ ;/ 另外/ 还有/ 采用/ 更为/ 有效/ 的/ 数据结构/ 表示/ 指向/ 集/ ,/ 以此/ 提升/ 分析/ 的/ 效率/ 等等/ ./ 本文/ 主要/ 从/ 在线/ 优化/ 和/ 离线/ 优化/ 两/ 方面/ 对/ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 相关/ 改进/ 技术/ 做/ 一个/ 总结/ 和/ 评述/ ./ 3/ 在线/ 优化/ 在/ 约束/ 求解/ 过程/ 中/ 采用/ 的/ 在线/ 优化/ 技术/ 概括/ 起来/ 可以/ 分为/ :/ 约束/ 图上/ 强/ 连通/ 分量/ 的/ 检测/ 和/ 消除/ 、/ 指向/ 集/ 传递/ 过程/ 中/ 的/ 优化/ 、/ 工作/ 集/ 节点/ 的/ 迭代/ 求解/ 顺序/ ./ 3.1/ 约束/ 图上/ 强/ 连通/ 分量/ 的/ 检测/ 和/ 消除/ 约束/ 图上/ 强/ 连通/ 分量/ 的/ 检测/ 和/ 消除/ (/ OnlineCycleDetectionandElimination/ ,/ 为/ 行文/ 方便/ ,/ 以下/ 简称/ OCD/ )/ 是/ 显著/ 提高/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 效率/ 的/ 一项/ 重要/ 改进/ 技术/ ./ 在/ 约束/ 求解/ 过程/ 中/ 不断/ 有/ 新边/ 加入/ 到/ 约束/ 图中/ ,/ 可能/ 在/ 约束/ 图上/ 产生/ 新/ 的/ 强/ 连通/ 分量/ ,/ 该/ 优化/ 通过/ 合并/ 节点/ 来/ 消除/ 强/ 连通/ 分量/ ./ OCD/ 之所以/ 能够/ 提高/ 约束/ 求解/ 的/ 效率/ ,/ 其本质/ 原因/ 在于/ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 约束/ 图中/ 的/ 每/ 一条/ 边/ 实质/ 上/ 代表/ 的/ 是/ 一个/ 偏序/ 关系/ ,/ 例如/ 图/ 3/ 所示/ ./ 图中/ 各/ 节点/ 的/ 初始/ 指向/ 集在/ 其/ 下方/ 标出/ ,/ 如/ w/ 的/ 初始/ 指向/ 集/ 为/ {/ a/ }/ ./ 约束/ 求解/ 时/ ,/ 指向/ 集/ 基于/ 有/ 向/ 边/ 进行/ 传递/ ,/ 虽然/ 各/ 节点/ 的/ 初始/ 指向/ 集/ 不同/ ,/ 但/ 由于/ 节点/ w/ 、/ x/ 、/ y/ 、/ z/ 构成/ 了/ 一个/ 强/ 连通/ 分量/ ,/ 在/ 约束/ 求解/ 之后/ 各个/ 节点/ 的/ 指向/ 集都/ 是/ {/ a/ ,/ b/ ,/ c/ ,/ d/ }/ ./ 换言之/ ,/ 同/ 在/ 一个/ 强/ 连通/ 分量/ 中/ 的/ 各个/ 节点/ 在/ 约束/ 求解/ 之后/ 的/ 指向/ 集/ 必定/ 是/ 相同/ 的/ ①/ ./ 将/ 同/ 在/ 一个/ 强/ 连通/ 分量/ 中/ 的/ 节点/ 合并/ ,/ 既/ 可以/ 减少/ 指向/ 集在/ 其/ 内部/ 冗余/ 的/ 传递/ ,/ 以/ 提升/ 迭代/ 求解/ 的/ 效率/ ,/ 同时/ 还/ 可以/ 有效/ 地/ 降低/ 存储/ 的/ 开销/ ,/ 因为/ 合并/ 之后/ 的/ 节点/ 只/ 需/ 维持/ 一个/ 指向/ 集/ ./ 实际上/ ,/ 在/ 图/ 算法/ 领域/ 已有/ 一些/ 经典/ 的/ 算法/ 能够/ 高效/ 地/ 检测/ 有向图/ 上/ 的/ 强/ 连通/ 分量/ ,/ 如/ Tarjan/ 的/ 算法/ [/ 12/ ]/ 和/ Nuutila/ [/ 13/ ]/ 的/ 算法/ ,/ 其中/ 后者/ 是/ 对/ 前者/ 的/ 改进/ ,/ 指针/ 分析/ 中/ 很/ 早就/ 使用/ 了/ 这些/ 算法/ ,/ 所以/ OCD/ 的/ 难点/ 并/ 不/ 在于/ 如何/ 检测/ 强/ 连通/ 分量/ ,/ 而是/ 如何/ 选择/ 检测/ 的/ 时机/ 以及/ 如何/ 控制/ 整个/ 算法/ 的/ 开销/ 等/ ./ 改进/ 算法/ 大致/ 可以/ 分为/ 两类/ :/ 根据/ 对强/ 连通/ 分量/ 检测/ 的/ 规模/ 和/ 频度/ ,/ OCD/ 的/ 一类/ 是/ 在/ 有/ 新边/ 加入/ 到/ 约束/ 图中/ 的/ 时候/ 执行/ OCD/ ,/ 这种/ 方式/ 检测/ 的/ 频度/ 较/ 高/ ,/ 且/ 检测/ 的/ 规模/ 一般/ 只/ 限于/ 由该/ 边/ 两端/ 顶点/ 出发/ 的/ 所有/ 可/ 达/ 路径/ ./ 例如/ :/ Fhndrich/ 等/ 人/ [/ 14/ ]/ 首次/ 提出/ 在/ 约束/ 图上/ 做/ OCD/ 可以/ 显著/ 提升/ 约束/ 求解/ 的/ 效率/ ,/ 他们/ 基于/ 路径/ 可达性/ 来/ 查找/ 约束/ 图上/ 的/ 强/ 连通/ 分量/ ./ 具体/ 而言/ ,/ 约束/ 图中/ 每/ 加入/ 一条/ 新边/ x/ →/ y/ ,/ 算法/ 从/ 节点/ x/ 开始/ 反向/ 执行/ 一遍/ 深度/ 优先/ (/ Depth/ -/ First/ )/ 遍历/ ,/ 实际上/ 是/ 为了/ 判断/ 是否/ 存在/ 始于/ 节点/ y/ 、/ 终于/ 节点/ x/ 的/ 路径/ ,/ 如果/ 存在/ 这样/ 一条/ 路径/ p/ ,/ 则/ p/ 和/ 有/ 向/ 边/ x/ →/ y/ 将/ 构成/ 一个/ 强/ 连通/ 分量/ ./ 但是/ 该/ 方法/ 的/ 问题/ 在于/ ,/ 从/ 节点/ x/ 开始/ 的/ 路径/ 条数/ 如果/ 是/ 指数/ 级/ 的/ ,/ 则/ 遍历/ 的/ 开销/ 将会/ 不/ 可控/ ,/ 因此/ 算法/ 在/ 此基础/ 上/ 增加/ 了/ 一个/ 遍历/ 的/ 终止/ 条件/ ./ 终止/ 条件/ 虽然/ 控制/ 了/ 算法/ 的/ 整体/ 开销/ ,/ 但是/ 弊端/ 是/ 导致/ 算法/ 无法/ 检测/ 出/ 当前/ 约束/ 图上/ 所有/ 的/ 强/ 连通/ 分量/ ./ Fhndrich/ 等/ 人/ 工作/ 的/ 重要/ 意义/ 在于/ 其/ 算法/ 显示/ 了/ OCD/ 能够/ 有效/ 地/ 提高/ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 效率/ ./ 在此之后/ ,/ 他们/ 又/ 做/ 了/ 进一步/ 的/ 提高/ 分析/ 效率/ 的/ 尝试/ ,/ 采用/ 映射/ 合并/ (/ ProjectionMerging/ )/ [/ 15/ ]/ 的/ 方式/ 减少/ 约束/ 图上/ 的/ 冗余/ ,/ 与/ OCD/ 算法/ 结合/ 在/ 当时/ 可以/ 分析/ 50/ 万行/ 左右/ 的/ 程序/ ./ 继/ Fhndrich/ 等/ 人/ 之后/ ,/ Heintze/ 和/ Tardieu/ 提出/ 了/ 一种/ 动态/ 迁移/ 闭包/ 的/ 算法/ [/ 16/ ]/ ,/ 以下/ 简称/ 为/ HT/ 算法/ ./ HT/ 算法/ 基于/ 子集/ 图/ 进行/ 约束/ 求解/ ,/ 子集/ 图是/ 一种/ 类似/ 于/ 约束/ 图/ 的/ 有向图/ ,/ 是/ 对/ 约束/ 图/ 的/ 扩展/ ,/ 图上/ 同时/ 包含/ 指针/ 变量/ 和/ 指针/ 解/ 引用/ 变量/ ,/ 且/ 子集/ 图上/ 的/ 有/ 向/ 边/ 是/ 反/ 偏序/ 方向/ 的/ ./ HT/ 算法/ 并/ 不/ 在/ 迭代/ ①/ 限于/ 篇幅/ ,/ 具体/ 的/ 证明/ 未/ 在/ 本文/ 中/ 列出/ ,/ 可/ 参考文献/ [/ 14/ ]/ ./ Page5/ 此后/ ,/ Pearce/ 等/ 人/ [/ 18/ ]/ 提出/ 了/ 一种/ 检测/ 强/ 连通/ 分量/ 的/ 新/ 算法/ ,/ 以下/ 简称/ PKH1/ 算法/ ./ 该/ 算法/ 的/ 特点/ 是/ 其/ 并/ 不/ 在/ 当/ 约束/ 图上/ 每/ 加入/ 一条/ 新边/ 之后/ 就/ 检测/ 强/ 连通/ 分量/ ,/ 而是/ 动态/ 地/ 维持/ 一个/ 约束/ 图/ 节点/ 的/ 拓扑/ 序/ ./ 如果/ 新边/ 加入/ 后/ 改变/ 了/ 原有/ 的/ 拓扑/ 序/ ,/ 则/ 说明/ 约束/ 图上/ 可能/ 存在/ 强/ 连通/ 分量/ ,/ 此时/ 才/ 进行/ 检测/ ,/ 并且/ 重新/ 生成/ 新/ 的/ 拓扑/ 序/ ./ 整体而言/ ,/ 相对/ 于/ Fhndrich/ 的/ 算法/ ,/ Pearce/ 等/ 人/ 所/ 提出/ 的/ OCD/ 算法/ 对于/ 规模/ 较大/ 的/ 程序/ ,/ 分析/ 效率/ 的/ 提升/ 效果/ 明显/ ,/ 但是/ 整体而言/ 相对/ 于/ HT/ 却/ 不够/ 高效/ ./ Harderkopf/ 等/ 人/ [/ 19/ ]/ 提出/ 了/ 惰性/ 强/ 连通/ 分量/ 检测/ (/ LazyCycleDetection/ ,/ LCD/ )/ 算法/ ./ LCD/ 算法/ 的/ 基本/ 思想/ 是/ 基于/ 这样/ 一个/ 假设/ :/ 如果/ 一条/ 有/ 向/ 边上/ 的/ 两个/ 结点/ 指向/ 集/ 相同/ ,/ 则/ 这/ 条边/ 可能/ 在/ 一个/ 强/ 连通/ 分量/ 上/ ./ 因此/ 算法/ 在/ 传递/ 指向/ 集/ 的/ 过程/ 中/ ,/ 首先/ 会/ 判断/ 当前/ 所/ 处理/ 的/ 有/ 向/ 边/ 两端/ 节点/ 的/ 指向/ 集/ 是否/ 相同/ ,/ 基于/ 判断/ 的/ 结果/ 进行/ 强/ 连通/ 分量/ 的/ 检测/ ./ 但是/ 这个/ 假设/ 并/ 不是/ 在/ 所有/ 情况/ 下/ 都/ 成立/ ,/ 最/ 理想/ 的/ 情况/ 是/ 能/ 成功/ 检测/ 到/ 强/ 连通/ 分量/ ,/ 否则/ 就/ 将/ 已经/ 检测/ 过/ 的/ 有/ 向/ 边/ 添加/ 到/ 一个/ 集合/ 中/ ,/ 以/ 避免/ 之后/ 迭代/ 过程/ 中/ 的/ 重复/ 计算/ ,/ 但是/ 如此一来/ ,/ 算法/ 就/ 无法/ 保证/ 能够/ 检测/ 出/ 约束/ 图上/ 所有/ 的/ 强/ 连通/ 分量/ ./ 过程/ 中/ 传递/ 指向/ 集/ ,/ 在/ 处理/ 复杂/ 约束/ 需要/ 用到/ 当前/ 节点/ 指向/ 集时/ ,/ 通过/ 子集/ 图上/ 的/ 可达性/ 来/ 获取/ ,/ 同时/ 对/ 可达/ 路径/ 进行/ 标记/ ,/ 如果/ 有/ 路径/ 构成/ 强/ 连通/ 分量/ ,/ 则/ 进行/ 合并/ ./ HT/ 算法/ 非常/ 高效/ ,/ 并且/ 颇具/ 影响力/ ,/ 之后/ Whaley/ 等/ 人/ [/ 17/ ]/ 将/ 此/ 算法/ 推广/ 到/ 分析/ Java/ 程序/ ./ HT/ 算法/ 与/ Andersen/ [/ 4/ ]/ 所提/ 的/ 初始/ 算法/ 一样/ ,/ 都/ 是/ 基于/ 域/ (/ field/ -/ based/ )/ 的/ ./ Pereira/ 等/ 人/ [/ 20/ ]/ 以/ Hardekopf/ 等/ 人/ 的/ 工作/ 为/ 基础/ ,/ 提出/ 了/ 横向/ 传播/ 和/ 纵向/ 传播/ 算法/ (/ WavePropa/ -/ gation/ ,/ DeepPropagation/ ,/ 以下/ 简称/ WP/ 算法/ 和/ DP/ 算法/ )/ ./ 其中/ 的/ DP/ 算法/ 开始/ 先/ 采用/ Nuutila/ 的/ 强/ 连通/ 分量/ 检测/ 算法/ [/ 13/ ]/ 在/ 整个/ 约束/ 图上/ 做/ OCD/ ,/ 之后/ 对/ 所有/ 节点/ 执行/ 指向/ 集/ 传递/ 操作/ ,/ 最后/ 处理/ 复杂/ 约束/ ,/ 在/ 添加/ 完新边/ 之后/ ,/ 算法/ 以/ 指定/ 的/ 起始/ 节点/ 和/ 终止/ 节点/ 做/ 深度/ 优先/ 遍历/ ,/ 同时/ 在/ 遍历/ 的/ 过程/ 中/ 传递/ 指向/ 集/ ./ 例如/ 对于/ 复杂/ 约束/ p/ =/ / q/ ,/ 以/ p/ 为/ 起始/ 节点/ 和/ 终止/ 节点/ 做/ 深度/ 优先/ 遍历/ ,/ 如果/ 最后/ 能够/ 到达/ p/ ,/ 则/ 说明/ 新边/ 添加/ 后/ 出现/ 了/ 新/ 的/ 强/ 连通/ 分量/ ,/ 可以/ 将/ 其/ 合并/ ;/ 否则/ 仅仅/ 传递/ 指向/ 集/ ./ 同理/ ,/ 对于/ 复杂/ 约束/ / p/ =/ q/ ,/ 则/ 以/ p/ 中/ 更新/ 的/ 指向/ 集/ 元素/ 为/ 起点/ ,/ q/ 为/ 终点/ 遍历/ ./ 算法/ 重复/ 上述/ 步骤/ 直到/ 约束/ 图/ 不再/ 改变/ ./ 另外/ 一类/ 算法/ 则/ 是/ 在/ 整个/ 约束/ 图上/ 执行/ OCD/ ,/ 一般/ 的/ 频度/ 是/ 每次/ 迭代/ 检测/ 一次/ ,/ 能/ 检测/ 到/ 当前/ 约束/ 图上/ 所有/ 强/ 连通/ 分量/ ./ 代表性/ 的/ 工作/ 包括/ :/ Pearce/ 等/ 人/ 提出/ 的/ 另/ 一个/ 改进/ 算法/ [/ 21/ ]/ ,/ 以下/ 简称/ 为/ PKH2/ 算法/ ./ 算法/ 嵌套/ 两层/ 循环/ ,/ 外层/ 循环/ 每次/ 迭代/ 开始/ 之前/ 在/ 整个/ 约束/ 图上/ 首先/ 执行/ 一遍/ 强/ 连通/ 分量/ 检测/ ,/ 在/ 此/ 过程/ 中/ 可以/ 附带/ 得到/ 约束/ 图上/ 节点/ 的/ 拓扑/ 序/ ;/ 之后/ 内层/ 循环/ 按照/ 拓扑/ 序/ 逐个/ 处理/ 约束/ 图上/ 的/ 节点/ ./ 总体/ 上/ 算法/ 对强/ 连通/ 分量/ 检测/ 的/ 频度/ 不够/ ,/ 一定/ 程度/ 上/ 制约/ 了/ 分析/ 效率/ ,/ 因此/ 还有/ 提升/ 空间/ ./ 除此之外/ ,/ Pearce/ 等/ 人/ 还/ 从/ 图/ 算法/ 角度/ 进一步/ 研究/ 了/ OCD/ 的/ 相关/ 改进/ 技术/ [/ 22/ -/ 23/ ]/ ./ Harderkopf/ 等/ 人/ [/ 19/ ]/ 还/ 提出/ 了/ 混合式/ 的/ 强/ 连通/ 分量/ 检测/ (/ HybridCycleDetection/ ,/ HCD/ )/ 算法/ ./ HCD/ 算法/ 的/ 思想/ 是/ 在/ 约束/ 求解/ 之前/ ,/ 基于/ 离线/ 约束/ 图先/ 做/ 一遍/ 预处理/ ./ 所谓/ 的/ 离线/ 约束/ 图/ 和/ HT/ 算法/ 所提/ 的/ 子集/ 图/ 类似/ ,/ 通过/ 在/ 离线/ 约束/ 图上/ 预先/ 找出/ 可能/ 存在/ 的/ 强/ 连通/ 分量/ 为/ 后续/ 的/ 约束/ 求解/ 提供/ 辅助/ 信息/ ,/ 即/ 对/ 形如/ / p/ =/ q/ (/ 或者/ q/ =/ / p/ )/ 这样/ 的/ 复杂/ 约束/ ,/ 在/ 离线/ 约束/ 图中/ ,/ 节点/ / p/ 和/ 节点/ q/ 构成/ 一个/ 环/ ,/ 此环/ 的/ 存在/ 意味着/ p/ 的/ 指向/ 集中/ 的/ 所有/ 元素/ 对应/ 的/ 节点/ 将会/ 和/ 节点/ q/ 构成/ 强/ 连通/ 分量/ ,/ 因此/ 在/ 约束/ 求解/ 时/ 就/ 可/ 将/ p/ 的/ 指向/ 集中/ 的/ 元素/ 所/ 代表/ 的/ 节点/ 和/ 节点/ q/ 直接/ 合并/ ,/ 这样/ 省去/ 了/ 遍历/ 约束/ 图/ 查找/ 强/ 连通/ 分量/ 的/ 开销/ ./ HCD/ 算法/ 的/ 创新/ 之/ 处/ 本质/ 上/ 可以/ 归为/ 一种/ 离线/ 的/ 优化/ ,/ 不过/ 因为/ 离线/ 收集/ 的/ 信息/ 主要/ 是/ 用于/ 约束/ 求解/ 过程/ 中/ 的/ OCD/ ,/ 因此/ 本文/ 仍然/ 将/ 其/ 归/ 为/ 一种/ OCD/ 算法/ ,/ HCD/ 算法/ 也/ 可以/ 与/ 其它/ 算法/ 相结合/ 使用/ ./ Pereira/ 等/ 人/ [/ 20/ ]/ 提出/ 的/ WP/ 算法/ 实际上/ 是/ 在/ PKH2/ 算法/ [/ 21/ ]/ 的/ 基础/ 上/ 对/ 其/ 进行/ 了/ 改进/ ./ 算法/ 的/ 主要/ 思想/ 是/ 将/ 处理/ 复杂/ 约束/ 添加/ 新边/ 的/ 过程/ 与/ 传播/ 指向/ 集/ 的/ 过程/ 分离/ ./ 算法/ 的/ 主要/ 步骤/ 与/ DP/ 算法/ 类似/ ,/ 只不过/ 在/ 第/ 3/ 步/ 处理/ 完/ 所有/ 复杂/ 约束/ 之后/ 不再/ 进行/ 深度/ 优先/ 遍历/ ,/ 所以/ ,/ WP/ 算法/ 与/ DP/ 算法/ 效率/ 之间/ 的/ 不同之处/ 在于/ ,/ DP/ 算法/ 能够/ 以/ 更/ 小/ 的/ 代价/ 在/ 新边/ 添加/ 之后/ 就/ 能/ 检测/ 出/ 一些/ 潜在/ 的/ 强/ 连通/ 分量/ ./ 3.2/ 指向/ 集/ 传递/ 过程/ 中/ 的/ 优化/ 在/ 约束/ 求解/ 每次/ 迭代/ 的/ 指向/ 集/ 传递/ 过程/ 中/ ,/ 有时/ 并不需要/ 将/ 当前/ 节点/ 完整/ 的/ 指向/ 集/ 传递/ 给/ 其/ 后继/ 结点/ ,/ 而/ 只/ 需/ 传递/ 本次/ 迭代/ 相较/ 于/ 前次/ 迭代/ 新/ 增加/ 的/ 指向/ 集/ 元素/ 即可/ ,/ 这/ 就是/ 差异/ 传播/ (/ DifferencePage6Propagation/ )/ 的/ 思想/ ./ Pearce/ 等/ 人/ 在/ PKH1/ 算法/ [/ 18/ ]/ 中/ 提出/ 了/ 差异/ 传播/ 技术/ ./ 所谓/ 差异/ ,/ 可以/ 量化/ 为/ 约束/ 求解/ 过程/ 中/ 一个/ 变量/ 在/ 两次/ 迭代/ 之间/ 指向/ 集/ 元素/ 的/ 变化/ ,/ 如果/ 本次/ 迭代/ 和/ 前次/ 迭代/ 中/ ,/ 当前/ 变量/ 的/ 指向/ 集/ 元素/ 没有/ 更新/ ,/ 则/ 无需/ 向/ 其/ 后继/ 节点/ 传递/ 指向/ 集/ ./ 差异/ 传播/ 可以/ 一定/ 程度/ 上/ 减少/ 因/ 约束/ 图上/ 冗余/ 的/ 指向/ 集/ 传递/ 所/ 带来/ 的/ 时空/ 开销/ ,/ 有助于/ 提升/ 分析/ 算法/ 的/ 效率/ ./ 首先/ 将/ 此/ 技术/ 应用/ 到/ 指针/ 分析/ 领域/ 的/ 是/ Lhotk/ 和/ Hendren/ [/ 24/ ]/ ,/ 此外/ ,/ 在/ PKH2/ 算法/ 以及/ WP/ 算法/ 和/ DP/ 算法/ 中/ 也/ 均/ 有/ 使用/ ./ 3.3/ 工作/ 集/ 节点/ 的/ 选取/ 顺序/ 在/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 的/ 迭代/ 过程/ 中/ ,/ 不难/ 发现/ 工作/ 集/ 节点/ 的/ 选取/ 顺序/ 会/ 影响/ 分析/ 的/ 开销/ ./ 以图/ 1/ 子图/ (/ a/ )/ 中/ 的/ 初始/ 约束/ 图为例/ ,/ 如果/ 在/ 求解/ 之初/ 从/ 工作/ 集中/ 选取/ 的/ 节点/ 为/ q/ ,/ 经有/ 向/ 边/ q/ →/ p/ 将/ q/ 的/ 指向/ 集/ {/ b/ }/ 传到/ 节点/ p/ ,/ 而/ 在/ 某/ 一个/ 时刻/ ,/ 当/ 迭代/ 进行/ 到/ 节点/ r/ 时/ ,/ 指向/ 集/ 经由/ 有/ 向/ 边/ r/ →/ q/ 传递/ 导致/ 节点/ q/ 的/ 指向/ 集/ 被/ 更新/ ,/ 因此/ 算法/ 又/ 将/ 处理/ 一遍/ 节点/ q/ ./ 如果/ 采用/ 拓扑/ 序/ 先后/ 选择/ 节点/ r/ 、/ q/ 、/ p/ ,/ 则/ 可以/ 避免/ 上述/ 冗余/ 计算/ 的/ 部分/ ./ 实际上/ ,/ 已有/ 许多/ 研究/ 工作/ 是/ 关于/ 如何/ 在/ 有向图/ 上/ 按照/ 拓扑/ 序/ 处理/ 节点/ [/ 25/ -/ 27/ ]/ ,/ 但/ 这些/ 都/ 只是/ 针对/ 于/ 静态/ 的/ 有向图/ ./ 结合/ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 特点/ ,/ 由于/ 复杂/ 约束/ 的/ 存在/ ,/ 导致/ 在/ 约束/ 求解/ 的/ 过程/ 中/ 不断/ 有/ 新边/ 加入/ ,/ 换言之/ ,/ 约束/ 图上/ 的/ 拓扑/ 序是/ 动态变化/ 的/ ,/ 如果/ 每次/ 迭代/ 都/ 重新/ 生成/ 拓扑/ 序/ ,/ 则/ 会/ 影响/ 算法/ 的/ 执行/ 效率/ ./ 一种/ 比较简单/ 有效/ 的/ 选择/ 方式/ 是/ 最近/ 最少/ 使用/ 策略/ (/ LeastRecentlyFired/ ,/ LRF/ )/ ,/ 也/ 就是/ 最近/ 最少/ 访问/ 到/ 的/ 节点/ 具有/ 最高/ 的/ 优先级/ ,/ 因此/ 最先/ 得到/ 处理/ ./ Pearce/ [/ 18/ ]/ 、/ Hardekopf/ [/ 19/ ]/ 、/ Pereira/ [/ 20/ ]/ 等/ 人/ 的/ 分析/ 算法/ 中/ 都/ 采用/ 了/ 这种/ 策略/ ./ 3.4/ 实验/ 上文/ 介绍/ 了/ 比较/ 有/ 代表性/ 的/ 改进/ 算法/ ,/ 为了/ 对/ 以上/ 算法/ 有/ 一个/ 较为/ 全面/ 的/ 评价/ ,/ 本文/ 对/ 上述/ 的/ HT/ [/ 16/ ]/ 、/ PKH1/ [/ 18/ ]/ 、/ PKH2/ [/ 21/ ]/ 、/ LCD/ [/ 19/ ]/ 、/ LCD/ +/ HCD/ [/ 19/ ]/ 、/ WP/ [/ 20/ ]/ 、/ DP/ [/ 20/ ]/ 7/ 个/ 分析/ 算法/ 做/ 了/ 较为/ 全面/ 的/ 对比/ 实验/ ,/ 所有/ 算法/ 在/ 精度/ 上/ 没有/ 差别/ ,/ 都/ 是/ 上下文/ 不/ 敏感/ 、/ 域/ 不/ 敏感/ 的/ (/ 出于/ 实验/ 公平性/ 上/ 的/ 考虑/ ,/ 将/ PKH2/ 修改/ 成域/ 不/ 敏感/ 的/ 算法/ )/ ./ 所用/ 的/ 测试用例/ 为表/ 2/ 所示/ 的/ 6/ 个/ 测试程序/ ,/ Emacs/ 是/ Linux/ 系统/ 中/ 常用/ 的/ 文本编辑/ 器/ ,/ Ghost/ -/ script/ 是/ 一个/ PS/ 文本/ 浏览/ 工具/ ,/ Gimp/ 是/ Linux/ 系统/ 中/ 的/ 一个/ 绘图/ 软件/ ,/ Insight/ 是/ 基于/ GDB/ 调试器/ 的/ 一个/ 图形化/ 用户界面/ 程序/ ,/ Wine/ 是/ Windows/ 操作系统/ 的/ 模拟器/ ,/ 而/ Linux/ 是/ Linux/ 操作系统/ 内核/ ./ 表中/ 第/ 3/ 列为/ 程序/ 的/ 规模/ ,/ 其中/ Linux/ 和/ Wine/ 是/ 两个/ 超过/ 百万/ 行/ 的/ 程序/ ./ 第/ 4/ 列是/ 各/ 测试程序/ 初始/ 的/ 约束/ 规模/ ,/ 包括/ 上文/ 提到/ 的/ 所有/ 4/ 类/ 约束/ ./ 实验/ 过程/ 中/ 约束/ 生成/ 部分/ 的/ 数据/ 获取/ 采用/ 了/ 与/ LCD/ [/ 19/ ]/ 、/ DP/ [/ 20/ ]/ 等/ 算法/ 类似/ 的/ 流程/ ,/ 这些/ 约束/ 通过/ CIL/ [/ 28/ ]/ 前端/ 生成/ ,/ 同时/ 出于/ 指向/ 集/ 存储/ 效率/ 上/ 的/ 考虑/ ,/ 将/ 每/ 一个/ 约束/ 变量/ 映射/ 成/ 一个/ 整形/ 数值/ ,/ 将/ 变量/ 之间/ 的/ 约束/ 转换成/ 整型/ 值/ 之间/ 的/ 约束/ 关系/ ,/ 将/ 生成/ 的/ 约束/ 写入/ 约束/ 文件/ 中/ ,/ 之后/ 各个/ 分析/ 算法/ 读取/ 约束/ 文件/ 进行/ 约束/ 求解/ ./ 测试程序/ 简称/ 规模/ // Emacs/ -/ 21.4/ aemacs16/ ./ 98321327122Ghostscript/ -/ 8.15/ gs24/ ./ 216931280071Gimp/ -/ 2.2/ ./ 8gimp55/ ./ 4411783125203Insight/ -/ 6.5/ inst60/ ./ 324340499245Wine/ -/ 0.9/ ./ 21wine133/ ./ 8713065199465Linux/ -/ 2.4/ ./ 26lnx217/ ./ 2574788231290/ 实验/ 所用/ 硬件平台/ 为/ :/ Intel/ 四核/ CPUE5430/ (/ 2.66/ GHz/ )/ x2/ ,/ 16GBDDR3/ 内存/ ,/ 操作系统/ 为/ Redhat/ 企业/ 版/ 5.1/ ./ 测试/ 之前/ ,/ 用/ gcc/ 编译/ 各/ 算法/ 源程序/ ,/ 编译/ 优化/ 选项/ 为/ O3/ ,/ 同时/ 由于/ 实验/ 机器/ 是/ 64/ 位/ 的/ ,/ 编译/ 时/ 设置/ 选项/ “/ -/ m32/ ”/ 用来/ 生成/ 32/ 位/ 模式/ 下/ 的/ 可/ 执行/ 码/ ,/ 以此/ 与/ 各/ 算法/ 文献/ 中/ 的/ 实验/ 方法/ 保持一致/ ,/ 此外/ ,/ 实际/ 测试/ 的/ 程序/ 都/ 是/ 单线程/ 的/ ./ 所有/ 测试/ 所得/ 数据/ 都/ 是/ 取/ 3/ 次/ 运行/ 结果/ 的/ 算术/ 平均值/ ./ 由于/ 初始/ 生成/ 的/ 约束/ 规模/ 较大/ ,/ 而/ 各/ 算法/ 的/ 效率/ 不/ 一/ ,/ 对于/ 较大/ 的/ 测试程序/ ,/ 某些/ 算法/ 可能/ 无法/ 完成/ 分析/ ./ 因此/ 实验/ 过程/ 中/ 采用/ 了/ 离线/ 变量/ 替换/ [/ 29/ ]/ 算法/ 对/ 初始/ 约束/ 进行/ 了/ 离线/ 优化/ (/ 优化/ 后/ 的/ 约束/ 规模/ 如表/ 2/ 第/ 5/ 列/ 所示/ )/ ,/ 以/ 加快/ 分析/ 算法/ 的/ 效率/ ,/ 提高/ 测试/ 结果/ 的/ 显示/ 度/ ./ 表/ 3/ 显示/ 了/ 上述/ 7/ 种/ 分析/ 算法/ 运行/ 时间/ 的/ 对比/ 数据/ ,/ 图/ 4/ 是/ 以/ HT/ 算法/ 为/ 基准/ ,/ 各/ 算法/ 相对/ 于/ HT/ 算法/ 时间/ 开销/ 的/ 对比/ 图示/ ,/ 图中/ 虚线/ 表示/ HT/ 算法/ 归一化/ 后/ 的/ 数据/ ,/ GeoM/ 表示/ 几何/ 平均值/ ./ 表/ 4/ 显示/ 了/ 上述/ 7/ 种/ 分析/ 算法/ 的/ 内存/ 开销/ 对比/ 数据/ ,/ 图/ 5/ 是/ 以/ HT/ 算法/ 为/ 基准/ ,/ 各/ 算法/ 相对/ 于/ HT/ 算法/ 内存/ 开销/ 的/ 对比/ 图示/ ,/ 图中/ 虚线/ 表示/ HT/ 算法/ 归一化/ 后/ 的/ 数据/ ./ Page7/ 测试程序/ emacsgimpgsinstlnxwine/ 表/ 37/ 种/ 分析/ 算法/ 的/ 时间/ 开销/ 对比/ 92.1830/ ./ 159.60/ 表/ 47/ 种/ 分析/ 算法/ 的/ 内存/ 开销/ 对比/ 测试程序/ emacs21/ ./ 8420.3722/ ./ 9120.6320/ ./ 4126.4517/ ./ 81gimpgsinstlnxwine/ 图/ 4/ 算法/ 执行/ 时间/ 对比/ (/ 基于/ HT/ 算法/ 的/ 归一化/ )/ 图/ 5/ 算法/ 内存/ 开销/ 对比/ (/ 基于/ HT/ 算法/ 的/ 归一化/ )/ 以上/ 数据/ 统计/ 的/ 是/ 约束/ 求解/ 的/ 时空/ 开销/ ,/ 不/ 包括/ 文件/ 读取/ 过程/ 中/ 的/ 开销/ ./ 整体/ 上/ ,/ PKH1/ 的/ 性能/ 明显/ 差于/ 其它/ 算法/ ,/ 其/ 原因/ 在于/ 算法/ 每/ 加入/ 新边/ 即/ 检测/ 强/ 连通/ 分量/ 并且/ 重新/ 生成/ 拓扑/ 序/ 的/ 开销/ 较大/ ,/ 且/ 算法/ 无法/ 保证/ 检测/ 出/ 约束/ 图上/ 的/ 所有/ 强/ 连通/ 分量/ ./ HT/ 算法/ 虽然/ 提出/ 较/ 早/ ,/ 但是/ 却/ 比较/ 高效/ ,/ 原因/ 主要/ 在于/ 算法/ 勿需/ 传递/ 指向/ 集/ ,/ 在/ 计算/ 可达性/ 获取/ 指向/ 集/ 的/ 同时/ 能够/ 隐式/ 地/ 检测/ 到/ 子集/ 图上/ 的/ 绝大部分/ 强/ 连通/ 分量/ ./ LCD/ 和/ LCD/ +/ HCD/ 算法/ 的/ 效率/ 要/ 好/ 于/ HT/ 算法/ ,/ 其中/ LCD/ +/ HCD/ 算法/ 尤为/ 明显/ ,/ 这/ 也/ 正好/ 显示/ 了/ HCD/ 离线/ 优化/ 的/ 作用/ ./ WP/ 算法/ 作为/ 对/ PKH2/ 算法/ 的/ 改进/ ,/ 虽然/ 时间/ 开销/ // sLCDLCD/ +/ HCDWP/ 内存/ 开销/ // MBLCDLCD/ +/ HCDWP94/ ./ 98/ 对于/ 强/ 连通/ 分量/ 的/ 检测/ 频度/ 没有/ 增加/ ,/ 但是/ 调整/ 了/ 算法/ 的/ 整体/ 结构/ ,/ 性能/ 相对/ 于/ 后者/ 仍/ 有/ 不小/ 提升/ ./ 在/ 内存/ 开销/ 上/ ,/ 除/ WP/ 之外/ ,/ 其它/ 算法/ 之间/ 几/ 无差别/ ,/ 原因/ 在于/ WP/ 算法/ 在/ 分析/ 过程/ 中/ 约束/ 图中/ 的/ 每/ 一个/ 节点/ 保留/ 两个/ 指向/ 集/ :/ 本次/ 迭代/ 中/ 的/ 指向/ 集/ 和/ 前次/ 迭代/ 后/ 的/ 指向/ 集/ ,/ 用以/ 计算/ 两次/ 迭代/ 之间/ 指向/ 集/ 的/ 差异/ ,/ 一定/ 程度/ 上/ 增加/ 了/ 内存/ 的/ 开销/ ./ 4/ 离线/ 优化/ 所谓/ 离线/ 优化/ ,/ 是/ 指/ 在/ 约束/ 生成/ 之后/ 约束/ 求解/ 之前/ 对/ 约束/ 做/ 精简/ ./ 优化/ 手段/ 都/ 是/ 以/ 变量/ 替换/ 的/ 方式/ 将/ 多个/ 具有/ 相同/ 某种/ 属性/ 的/ 变量/ 用/ 一个/ 变量/ 表示/ ,/ 从而/ 减少/ 约束/ 变量/ 的/ 规模/ 以及/ 与/ 之/ 相关/ 的/ 约束/ 的/ 数量/ ,/ 达到/ 显著/ 减少/ 后续/ 约束/ 求解/ 时空/ 开销/ 的/ 目的/ ./ 约束/ 求解/ 之后/ ,/ 要/ 得到/ 替换/ 之前/ 程序/ 的/ 指针/ 分析/ 信息/ ,/ 只/ 需/ 经过/ 一个/ 反/ 替换/ 的/ 过程/ 即可/ ,/ 替换/ 和/ 反/ 替换/ 的/ 过程/ 通过/ 维持/ 一个/ 简单/ 的/ 映射/ 关系/ 即可/ 实现/ ./ 可/ 进行/ 替换/ 的/ 变量/ 的/ 属性/ 主要/ 有/ 两种/ :/ 指针/ 等价/ (/ pointerequivalent/ )/ 和/ 位置/ 等价/ (/ locationequiva/ -/ lence/ )/ ./ 4.1/ 指针/ 等价/ 对于/ 任意/ 变量/ x/ 、/ y/ ,/ 经过/ 约束/ 求解/ 后/ ,/ 如果/ 变量/ x/ 的/ 指向/ 集中/ 的/ 元素/ 和/ 变量/ y/ 的/ 指向/ 集中/ 的/ 元素/ 相同/ ,/ 则/ 称/ x/ 和/ y/ 是/ 指针/ 等价/ 的/ ./ 由/ 所有/ 指针/ 等价/ 的/ 变量/ 构成/ 的/ 变量/ 集合/ 称为/ 指针/ 等价/ 集/ (/ pointerequivalencesets/ )/ ./ 指针/ 等价/ 意味着/ 确定/ 了/ 指针/ 等价/ 集中/ 一个/ 变量/ 的/ 指向/ 集/ ,/ 也/ 就/ 能/ 确定/ 该/ 集合/ 中/ 其它/ 变量/ 的/ 指向/ 集/ ,/ 因此/ 可用/ 一个/ 变量/ 来/ 替换/ 指针/ 等价/ 集中/ 的/ 所有/ 变量/ ./ 替换/ 之后/ 约束/ 变量/ 的/ 规模/ 显著/ 减/ Page8/ 少/ ,/ 而且/ 也/ 可以/ 减少/ 指向/ 集在/ 指针/ 等价/ 集中/ 变量/ 之间/ 的/ 冗余/ 传播/ ,/ 这/ 是因为/ 指针/ 等价/ 集中/ 的/ 部分/ 变量/ 也/ 可能/ 在/ 一个/ 强/ 连通/ 分量/ 上/ ./ 上文/ 提到/ ,/ 在/ 一个/ 强/ 连通/ 分量/ 上/ 的/ 变量/ 的/ 指向/ 集/ 相同/ ,/ 因此/ 指针/ 等价/ 变量/ 的/ 查找/ 算法/ 与/ OCD/ 类似/ ,/ 都/ 须/ 做/ 强/ 连通/ 分量/ 的/ 检测/ ./ 此外/ ,/ 理论/ 上/ 的/ 证明/ [/ 29/ ]/ 确保/ 了/ 这种/ 替换/ 不会/ 影响/ 约束/ 求解/ 结果/ 的/ 正确性/ ./ Rountev/ 等/ 人/ [/ 29/ ]/ 提出/ 了/ 离线/ 变量/ 替换/ (/ OfflineVariableSubstitution/ ,/ OVS/ )/ 算法/ ,/ 该/ 算法/ 复杂度/ 为/ 线性/ O/ (/ n/ )/ ,/ 其中/ n/ 表示/ 源程序/ 中/ 的/ 变量/ 数/ ./ 算法/ 基于/ 由/ 所有/ 约束/ 构建/ 的/ 子集/ 图/ (/ subsetgraph/ )/ ,/ 子集/ 图是/ 根据/ 基本/ 约束/ 、/ 简单/ 约束/ 和/ 所有/ 复杂/ 约束/ 构建/ 的/ 有向图/ ,/ 子集/ 图中/ 的/ 节点/ 包括/ 被取/ 地址/ 的/ 变量/ 以及/ 指针/ 解/ 引用/ 的/ 变量/ ,/ 这/ 一点/ 与/ 约束/ 图/ 不同/ ,/ 也/ 不同于/ 上文/ 提到/ 的/ HT/ 算法/ 中/ 的/ 子集/ 图/ ,/ 但是/ 节点/ 之间/ 的/ 偏序/ 关系/ 与/ 前/ 两者/ 是/ 一致/ 的/ ./ OVS/ 算法/ 首先/ 合并/ 子集/ 图中/ 的/ 强/ 连通/ 分量/ ,/ 得到/ 有/ 向/ 无/ 环图/ ./ 之后/ 在/ 新图/ 上/ 按照/ 拓扑/ 序/ 逐个/ 处理/ 节点/ ,/ 给/ 每个/ 节点/ 附上/ 一个整/ 数值/ 标号/ ,/ 在/ 此/ 过程/ 中/ 算法/ 区分/ 直接/ 节点/ 和/ 非/ 直接/ 节点/ ,/ 所谓/ 直接/ 节点/ ,/ 是/ 指其/ 指向/ 集/ 结果/ 完全/ 取决于/ 它/ 在/ 子集/ 图中/ 的/ 所有/ 前驱/ 节点/ ./ 如果/ 是非/ 直接/ 节点/ 则/ 为/ 其/ 赋上/ 新/ 的/ 标号/ ,/ 如果/ 是/ 直接/ 节点/ ,/ 则/ 分/ 情况/ 讨论/ :/ 如果/ 它/ 没有/ 前驱/ ,/ 则/ 附上/ 标号/ 0/ ;/ 如果/ 有/ 前驱/ 且/ 所有/ 前驱/ 节点/ 的/ 标号/ 相同/ ,/ 则/ 给/ 当前/ 节点/ 也/ 赋上/ 同样/ 的/ 标号/ ;/ 如果/ 有/ 前驱/ 但是/ 前驱/ 节点/ 的/ 标号/ 不/ 一致/ ,/ 则/ 给/ 当前/ 节点/ 赋上/ 新/ 的/ 标号/ ./ 最终/ 标号/ 相同/ 的/ 变量/ 隶属于/ 同一个/ 指针/ 等价/ 集/ ./ 此外/ ,/ OVS/ 算法/ 还/ 能/ 附带/ 发现/ 空/ 指针/ (/ Non/ -/ Point/ -/ er/ )/ ,/ 即/ 指向/ 为空/ 的/ 变量/ ,/ 所有/ 标号/ 为/ 0/ 的/ 变量/ 即/ 属于/ 这/ 一类/ ./ 与/ 空/ 指针/ 相关/ 的/ 约束/ 可以/ 预先/ 删除/ ,/ 因为/ 其/ 指向/ 集/ 必定/ 为空/ ,/ 所以/ 约束/ 求解/ 过程/ 中/ 这些/ 约束/ 必然/ 不会/ 发生/ 指向/ 集/ 的/ 传递/ ./ OVS/ 算法/ 非常/ 高效/ ,/ 线性/ 时间/ 的/ 复杂度/ 下/ ,/ 平均/ 能够/ 将/ 约束/ 规模/ 减少/ 64/ %/ ./ Hardekopf/ 等/ 人/ [/ 30/ ]/ 在/ OVS/ 的/ 基础/ 上/ 做/ 了/ 进一步/ 的/ 改进/ ,/ 提出/ 了/ 基于/ Hash/ 的/ 值/ 标号/ (/ Hash/ -/ basedValueNumbering/ ,/ 下文/ 简称/ 为/ HVN/ )/ 方法/ ./ 算法/ 根据/ 约束/ 建立/ 所谓/ 的/ 离线/ 约束/ 图/ (/ offlineconstraintgraph/ )/ ,/ 离线/ 约束/ 图/ 与/ OVS/ 子集/ 图/ 类似/ ,/ 唯一/ 的/ 不同之处/ 在于/ ,/ 对于/ 形如/ p/ / q/ 的/ 简单/ 约束/ ,/ 子集/ 图中/ 包含/ 节点/ 以及/ 有/ 向/ 边/ (/ q/ →/ p/ )/ 、/ (/ / q/ →/ / p/ )/ ,/ 而/ 离线/ 约束/ 图中/ 仅仅/ 包含/ 节点/ 以及/ 有/ 向/ 边/ (/ q/ →/ p/ )/ ,/ 因此/ 形式/ 上/ ,/ 离线/ 约束/ 图/ 规模/ 会/ 更/ 小/ ./ HVN/ 算法/ 与/ OVS/ 算法/ 最大/ 不同之处/ 在于/ :/ 假设/ 离线/ 约束/ 图上/ 的/ 两个/ 结点/ 分别/ 为/ p/ 和/ q/ ,/ 设/ 节点/ p/ 的/ 所有/ 前驱/ 节点/ 的/ 标号/ 值/ 集合/ 为/ Sp/ ,/ 节点/ q/ 的/ 所有/ 前驱/ 节点/ 的/ 标号/ 值/ 集合/ 为/ Sq/ ,/ 如果/ Sp/ =/ Sq/ ,/ 则/ 节点/ p/ 和/ 节点/ q/ 有/ 相同/ 的/ 标号/ ./ 但是/ 在/ OVS/ 的/ 算法/ 中/ ,/ 节点/ p/ 和/ 节点/ q/ 被/ 赋上/ 了/ 不同/ 的/ 标号/ ,/ 因此/ HVN/ 相对/ 于/ OVS/ 能/ 找到/ 更/ 多/ 指针/ 等价/ 的/ 变量/ ./ 同时/ ,/ Hardekopf/ 还/ 提出/ 了/ HRU/ (/ HVNwithdeReferenceandUnion/ ,/ HR/ 和/ HU/ 合/ 称为/ HRU/ )/ 算法/ ./ HR/ 算法/ 是/ 基于/ 指针/ 变量/ 与/ 解/ 引用/ 变量/ 之间/ 的/ 对应/ 关系/ ,/ 而/ HU/ 算法/ 则/ 是/ 基于/ 离线/ 约束/ 图上/ 的/ 抽象/ 指向/ 集/ 的/ 传递/ ,/ 两者/ 都/ 是/ 对/ HVN/ 的/ 扩展/ ,/ 对/ HVN/ 的/ 分析/ 结果/ 做/ 更/ 深层次/ 的/ 精化/ ./ HRU/ 的/ 复杂度/ 为/ O/ (/ n4/ )/ ./ 虽然/ 复杂度/ 更高/ ,/ 但/ 相对/ 于/ OVS/ 而言/ ,/ HRU/ 显著/ 增加/ 了/ 发现/ 指针/ 等价/ 变量/ 的/ 机会/ ./ 根据/ Hardekopf/ 等/ 人/ [/ 30/ ]/ 的/ 分析/ ,/ 在/ 基于/ 包含/ 的/ 指针/ 分析/ 最终/ 结果/ 中/ ,/ 仍/ 有/ 大量/ 满足/ 指针/ 等价/ 的/ 变量/ 未/ 被/ 检测/ 出来/ ,/ 指针/ 等价/ 变量/ 的/ 查找/ 算法/ 还有/ 较大/ 的/ 提升/ 空间/ ,/ 因此/ 之后/ 仍然/ 有/ 相关/ 的/ 研究/ 工作/ 致力于/ 更/ 大程度/ 挖掘/ 程序/ 中/ 指针/ 等价/ 的/ 变量/ ./ 例如/ Simon/ 等/ 人/ [/ 31/ ]/ 借鉴/ 了/ 同/ 似性/ (/ Bisimilarity/ ,/ 简称/ BSM/ )/ 的/ 概念/ 和/ 思想/ [/ 32/ ]/ ,/ 提出/ 了/ 一种/ 新/ 的/ 技术/ 用于/ 查找/ 指针/ 等价/ 的/ 变量/ ./ 他们/ 基于/ 超级/ 图/ (/ SupersetGraph/ )/ 和/ 模拟/ 图/ (/ SimulationGraph/ )/ 来/ 判断/ 图中/ 节点/ 是否是/ 同/ 似的/ (/ Bisimilar/ )/ ,/ 如果/ 满足/ 该/ 条件/ ,/ 则/ 节点/ 所/ 代表/ 的/ 变量/ 就是/ 指针/ 等价/ 的/ ,/ BSM/ 算法/ 的/ 复杂度/ 为/ O/ (/ n3/ )/ ./ BSM/ 也/ 仍/ 有/ 可/ 改进/ 的/ 空间/ ,/ 例如/ 基于/ 更好/ 设计/ 和/ 定义/ 的/ 模拟/ 图/ 应该/ 可以/ 检测/ 出/ 更/ 多/ 指针/ 等价/ 和/ 位置/ 等价/ 的/ 变量/ ,/ 此外/ ,/ BSM/ 不仅/ 能够/ 作为/ 一种/ 离线/ 优化/ 的/ 算法/ ,/ 同时/ 该/ 方法/ 也/ 可/ 与/ OCD/ 一样/ 在/ 约束/ 求解/ 过程/ 中/ 执行/ ,/ 但是/ 由于/ 其较/ 高/ 的/ 复杂度/ ,/ 其/ 执行/ 频度/ 必须/ 控制/ 得/ 更/ 小/ ./ 整体/ 上/ ,/ Simon/ 的/ 方法/ 不仅/ 相对/ 于/ HRU/ 等/ 算法/ 找出/ 了/ 更/ 多/ 指针/ 等价/ 的/ 变量/ ,/ 而且/ 一定/ 程度/ 上/ 拓宽/ 了/ 离线/ 优化/ 算法/ 改进/ 的/ 思路/ ./ 值得一提的是/ ,/ 指针/ 等价/ 的/ 思想/ 不仅仅/ 在/ 基于/ 包含/ 的/ 指针/ 分析/ 中/ 作为/ 离线/ 优化/ 的/ 策略/ ,/ 在/ 整个/ 指针/ 分析/ 领域/ 也/ 有/ 广泛/ 使用/ [/ 5/ ,/ 33/ -/ 34/ ]/ ./ 4.2/ 位置/ 等价/ 对于/ 任意/ 变量/ x/ 、/ y/ ,/ 如果/ x/ ∈/ pts/ (/ z/ )/ ,/ 则/ 一定/ 有/ y/ ∈/ pts/ (/ z/ )/ 成立/ ;/ 反之/ ,/ 如果/ y/ ∈/ pts/ (/ z/ )/ ,/ 则/ 一定/ 有/ x/ ∈/ pts/ (/ z/ )/ 成立/ 时/ ,/ 我们/ 称/ 满足/ 上述/ 条件/ 的/ 变量/ x/ 和/ 变量/ y/ 是/ 位置/ 等价/ 的/ ./ 换言之/ ,/ 位置/ 等价/ 的/ 变量/ 必定/ 同时/ 存在/ 于/ 某个/ 或者/ 某些/ 变量/ 的/ 指向/ 集中/ ./ 同样/ ,/ 找出/ 位置/ 等价/ 的/ 变量/ 的/ 目的/ 也/ 是/ 为了/ 进行/ 替换/ ,/ 一个/ 指向/ 集中/ 所有/ 位置/ 等价/ 的/ 变量/ 可以/ 用/ 一个/ 变量/ 表示/ ,/ 从而/ 可以/ 显著/ 减少/ 算法/ 的/ 空间/ 开销/ ./ 但是/ 与/ 指针/ 等价/ 不同/ 的/ 是/ ,/ 直接/ 节点/ 所/ 代表/ 的/ 变量/ 不会/ 被/ 其它/ Page9/ 变量/ 间接/ 引用/ 到/ ,/ 但是/ 位置/ 等价/ 的/ 变量/ 则/ 有/ 可能/ ,/ 因此/ 在/ 约束/ 求解/ 过程/ 中/ 还/ 需用/ 到/ 变量/ 替换/ 过程/ 中/ 的/ 映射/ 关系/ ./ 查找/ 位置/ 等价/ 变量/ 的/ 算法/ (/ 简称/ 为/ LE/ 算法/ )/ 由/ Hardekopf/ 等/ 人/ [/ 30/ ]/ 首先/ 提出/ ./ LE/ 算法/ 的/ 复杂度/ 为/ O/ (/ n/ )/ ,/ 算法/ 本身/ 并/ 不/ 复杂/ ,/ 它/ 基于/ HRU/ 算法/ 的/ 分析/ 结果/ ,/ 在/ 离线/ 约束/ 图上/ 对/ 形如/ &/ a/ 的/ 节点/ 计算/ 其/ 所有/ 后继/ 结点/ 的/ 标号/ 集合/ ,/ 具有/ 相等/ 的/ 标号/ 集合/ 的/ 这种/ 节点/ 即/ 被/ 赋上/ 相同/ 的/ 位置/ 等价/ 标签/ ./ BSM/ 算法/ [/ 31/ ]/ 也/ 能/ 找出/ 位置/ 等价/ 的/ 变量/ ,/ 但是/ 效果/ 不如/ LE/ 算法/ ./ 在/ 指针/ 分析/ 之外/ ,/ Liang/ 等/ 人/ [/ 35/ ]/ 也/ 将/ 位置/ 等价/ 的/ 思想/ 用于/ 程序/ 切片/ 等/ 数据流/ 分析/ 的/ 优化/ ./ 4.3/ 实验/ 本文/ 从/ 上述/ 离线/ 优化/ 算法/ 中/ 选取/ 了/ 其中/ 较具/ 代表性/ 的/ 工作/ 进行/ 对比/ ,/ 包括/ OVS/ [/ 29/ ]/ 、/ HRU/ [/ 30/ ]/ 、/ HRU/ +/ LE/ [/ 30/ ]/ 3/ 种/ 算法/ ./ 各/ 优化/ 算法/ 基于/ 初始/ 的/ 约束/ 文件/ 进行/ 优化/ ,/ 之后/ 在/ 优化/ 的/ 基础/ 上/ 采用/ LCD/ 算法/ [/ 6/ ]/ 进行/ 分析/ ,/ 采用/ LCD/ 的/ 原因/ 在于/ ,/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 的/ 复杂度/ 较/ 高/ ,/ 而/ LCD/ 是/ 目前/ 效率/ 较/ 高/ 的/ 分析/ 算法/ ./ 整个/ 过程/ 的/ 开销/ 包括/ 优化/ 部分/ 的/ 开销/ 和/ 分析/ 的/ 开销/ ./ 为/ 显示/ 优化/ 的/ 效果/ ,/ 实验/ 中/ 也/ 加入/ 初始/ 的/ 约束/ 文件/ 一并/ 分析/ (/ 在/ 表/ 7/ 和表/ 8/ 中以/ “/ ORIGIN/ ”/ 标示/ )/ ,/ 但是/ 这部分/ 由于/ 没有/ 做/ 离线/ 优化/ ,/ 因此/ 只有/ 分析/ 的/ 开销/ ./ 实验/ 平台/ 配置/ 和/ 测试用例/ 与/ 第/ 3.4/ 节/ 相同/ ./ 实验/ 流程/ 同样/ 是/ 由/ CIL/ 前端/ 生成/ 各个/ 测试用例/ 初始/ 的/ 约束/ ,/ 并/ 将/ 其/ 写入/ 文件/ 中/ ,/ 之后/ 采用/ 不同/ 的/ 离线/ 优化/ 算法/ 对/ 初始/ 约束/ 进行/ 优化/ ,/ 并/ 统计/ 优化/ 过程/ 中/ 的/ 开销/ ;/ 在/ 离线/ 优化/ 的/ 基础/ 上/ ,/ 调用/ LCD/ 算法/ 进行/ 约束/ 求解/ ,/ 并/ 统计/ 求解/ 过程/ 中/ 的/ 开销/ ./ 表/ 5/ 和表/ 6/ 显示/ 了/ 各/ 算法/ 优化/ 过程/ 中/ 的/ 时间/ 和/ 空间/ 开销/ ./ 表/ 7/ 和表/ 8/ 显示/ 了/ 分析/ 过程/ 中/ 的/ 时空/ 开销/ ,/ 其中/ 由于/ 未经/ 优化/ 的/ 初始/ 约束/ 规模/ 过大/ ,/ 对/ linux/ 和/ wine/ 两个/ 测试用例/ 的/ 初始/ 约束/ 的/ 分析/ 都/ 未能/ 完成/ (/ OOM/ 表示/ Run/ -/ OutofMemory/ )/ ./ 图/ 6/ 显示/ 了/ 各/ 优化/ 算法/ 优化/ 之后/ 的/ 约束/ 文件/ 相对/ 于/ 初始/ 未经/ 优化/ 的/ 约束/ 文件/ 的/ 比例/ ,/ 比例/ 越小/ 说明/ 优化/ 效果/ 越/ 明显/ ./ 测试程序/ emacs0/ ./ 150.33/ gimpgsinstlnxwine/ 测试程序/ emacs22/ ./ 0424.3124/ ./ 98gimp109/ ./ 93129.49133/ ./ 25gsinstlnxwine198/ ./ 48606.86614/ ./ 52/ 测试程序/ emacs13/ ./ 792.040/ ./ 00930.0043/ gimp77/ ./ 3529.985/ ./ 150.040/ gs28/ ./ 499.637/ ./ 110.24/ inst140/ ./ 8250.8811/ ./ 691.61/ lnxOOM220/ ./ 8462.952/ ./ 31wineOOM820/ ./ 31469.602/ ./ 25/ 测试程序/ emacs195/ ./ 6120.632/ ./ 522.12/ gimp3120/ ./ 44425.13145/ ./ 958.42/ gs594/ ./ 4994.9854/ ./ 628.69/ inst2071/ ./ 40235.54111/ ./ 2513.46/ lnxOOM1002/ ./ 60389.4037/ ./ 07wineOOM1750/ ./ 161120.9342/ ./ 79/ 图/ 6/ 离线/ 优化/ 之后/ 的/ 约束/ 相对/ 于/ 初始/ 约束/ 的/ 比例图/ 7/ 显示/ 了/ LCD/ 分析/ 算法/ 结合/ 不同/ 的/ 离线/ 优化/ 算法/ 的/ 运行/ 时间/ 对比/ ,/ 需要/ 强调/ 的/ 是/ ,/ 此处/ 的/ 时间/ 开销/ 由/ 各/ 离线/ 优化/ 算法/ 的/ 优化/ 时间/ 加上/ LCD/ 分析/ 算法/ 的/ 执行/ 时间/ 所/ 组成/ ./ 各/ 算法/ 基于/ LCD/ +/ HRUPage10/ 做/ 了/ 归一化/ ,/ 如图/ 中/ 虚线/ 所示/ ,/ 由于/ 对/ linux/ 和/ wine/ 两个/ 测试程序/ 的/ 初始/ 约束/ 文件/ 的/ 分析/ 未能/ 完成/ ,/ 因此/ 没有/ 将/ LCD/ +/ ORIGIN/ 的/ 组合/ 列入/ 图中/ ./ 更/ 小规模/ 的/ 约束/ 图/ 意味着/ 更/ 小/ 开销/ 的/ 迭代/ 求解/ ,/ 从图/ 中/ 可以/ 明显/ 看出/ 各/ 优化/ 算法/ 所/ 获得/ 的/ 性能/ 提升/ ./ 如图/ 8/ 所示/ ,/ 相对/ 于/ OVS/ ,/ HRU/ 发现/ 并且/ 合并/ 了/ 更/ 多/ 指针/ 等价/ 的/ 变量/ ,/ 显著/ 减少/ 了/ 内存/ 开销/ ,/ 平均/ 使用/ 的/ 内存/ 只/ 占/ OVS/ 所/ 使用/ 的/ 57/ %/ ./ 由于/ 增加/ 了/ 对/ 位置/ 等价/ 变量/ 的/ 合并/ 和/ 替换/ ,/ HRU/ +/ LE/ 算法/ 相对/ 于/ HRU/ 算法/ 也/ 减少/ 了/ 一部分/ 内存/ 开销/ ,/ 但是/ 除了/ 较/ 大规模/ 的/ 程序/ (/ 如/ wine/ )/ 之外/ ,/ 减少/ 的/ 幅度/ 并不大/ ./ 由于/ 离线/ 优化/ 和/ 在线/ 分析/ 两个/ 过程/ 可以/ 独立/ 进行/ ,/ 所以/ 此处/ 统计/ 的/ 内存/ 开销/ 是/ 取自/ 两/ 部分/ 的/ 最大者/ ./ 与/ 其它/ 算法/ 不同/ 的/ 是/ ,/ HRU/ +/ LE/ 算法/ 优化/ 过程/ 中/ 的/ 空间/ 开销/ 显著/ 高于/ 分析/ 部分/ 的/ 空间/ 开销/ ,/ 这/ 也/ 是/ 图/ 8/ 中/ 各/ 算法/ 之间/ 对比度/ 没有/ 图/ 7/ 显著/ 的/ 原因/ ./ 5/ 通用/ 改进/ 技术/ 本章/ 简要/ 介绍/ 指针/ 分析/ 的/ 通用/ 改进/ 技术/ ,/ 主要/ 包括/ 精度/ 提升/ 和/ 指向/ 集/ 表示/ ./ 这些/ 技术/ 在/ 一定/ 程度/ 上/ 具有/ 普适性/ ,/ 不仅/ 适用/ 于/ 基于/ 包含/ 的/ 指针/ 分析/ 同样/ 也/ 适用/ 于/ 其它/ 指针/ 分析方法/ ./ 5.1/ 精度/ 提升/ Andersen/ [/ 4/ ]/ 所/ 提出/ 的/ 初始/ 算法/ 本质/ 上/ 是/ 流/ 不/ 敏感/ 的/ ,/ 同时/ 也/ 是/ 基于/ 域/ (/ field/ -/ based/ )/ 的/ 和/ 上下文/ 不/ 敏感/ 的/ ,/ 但/ 可以/ 结合/ 域/ 敏感/ 、/ 上下文/ 敏感/ 等/ 提升/ 其/ 分析/ 精度/ ./ 广义/ 上/ ,/ 域/ 敏感/ 的/ 分析/ 包括/ 区分/ 结构/ 体/ (/ 或/ 共用/ 体/ 、/ 对象/ 等/ )/ 的/ 不同/ 域/ 、/ 函数指针/ 的/ 处理/ 、/ 堆/ 建模/ 、/ 指针/ 运算/ 、/ 常量/ 处理/ 等等/ ,/ 其中/ 最/ 关键/ 的/ 问题/ 是/ 如何/ 区分/ 和/ 处理/ 结构/ 体/ (/ 共用/ 体/ )/ 变量/ 的/ 不同/ 域/ ./ 在/ 指针/ 分析/ 领域/ ,/ 对于/ 结构/ 体/ (/ 或/ 共用/ 体/ 、/ 对象/ 等/ )/ 域/ 的/ 处理/ 通常/ 有/ 3/ 种/ 策略/ :/ (/ 1/ )/ 域/ 不/ 敏感/ (/ field/ -/ insensitive/ )/ ./ 对域/ 不加区分/ ,/ 例如/ 将/ s/ ./ a/ ,/ s/ ./ b/ 等同/ 视为/ 同一个/ 变量/ s/ ;/ (/ 2/ )/ 基于/ 域/ 的/ (/ field/ -/ based/ )/ ./ 区分/ 域/ ,/ 但是/ 不/ 区分/ 含有/ 相同/ 域/ 的/ 不同/ 结构/ 体/ (/ 或/ 联合体/ )/ 实例/ ./ 例如/ 将/ s1/ ./ a/ 和/ s2/ ./ a/ 视为/ 同一/ 变量/ ,/ 而/ 将/ s1/ ./ a/ 和/ s1/ ./ b/ 视为/ 两个/ 不同/ 变量/ ;/ (/ 3/ )/ 域/ 敏感/ (/ field/ -/ sensitive/ )/ ./ 区分/ 域/ ,/ 同时/ 区分/ 不同/ 结构/ 体/ 实例/ ./ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 多数/ 工作/ 都/ 是/ 域/ 不/ 敏感/ 或者/ 基于/ 域/ 的/ ,/ 相对而言/ ,/ 域/ 敏感/ [/ 21/ ,/ 36/ -/ 38/ ]/ 的/ 算法/ 无论是/ 在/ 设计/ 还是/ 实现/ 上/ 都/ 比/ 上述/ 两种/ 方式/ 更为/ 复杂/ ,/ 对于/ 指针/ 使用/ 极为/ 灵活/ 的/ C语言/ 尤其/ 如此/ ./ 在/ 针对/ C/ 的/ 基于/ 包含/ 的/ 域/ 敏感/ 指针/ 分析/ 研究/ 方面/ ,/ Pearce/ 等/ 人/ [/ 21/ ]/ 提出/ 的/ 算法/ 较具/ 影响力/ ,/ 该/ 算法/ 在域/ 敏感/ 方面/ 的/ 改进/ 主要/ 集中/ 在/ 两/ 方面/ :/ 首先/ 是/ 对于/ 函数指针/ 的/ 处理/ ,/ 在/ Pearce/ 的/ 扩展/ 规则/ 中/ ,/ 变量/ 加上/ 偏移/ 值/ 就/ 可以/ 对应/ 到/ 不同/ 的/ 域/ 变量/ ,/ 其/ 算法/ 用/ 函数/ 的/ 第一个/ 形参/ 地址/ 代表/ 当前/ 函数/ 的/ 基/ 地址/ (/ 类似/ 的/ ,/ 结构/ 体/ 的/ 基/ 地址/ 用/ 第一个/ 域/ 地址/ 表示/ )/ ,/ 同时/ 在/ 推导/ 规则/ 中/ 对/ 偏移/ 的/ 范围/ 作/ 了/ 限定/ ,/ 以/ 防止/ 函数指针/ 之间/ 的/ 类型转换/ 所/ 带来/ 的/ 参数/ 不/ 匹配/ 的/ 问题/ ;/ 其次/ 是/ 对/ 复杂/ 域/ 操作/ 的/ 刻画/ ,/ 类似/ 于/ 对域/ 取/ 地址/ 这样/ 的/ 操作/ 必须/ 做/ 特殊/ 处理/ ,/ 将/ 约束/ 图中/ 的/ 有/ 向/ 边/ 扩展/ 为/ 加权/ 有/ 向/ 边/ ,/ 权重/ 表示/ 偏移/ 值/ ./ Pearce/ 算法/ 的/ 复杂度/ 为/ O/ (/ n4/ )/ ,/ 其中/ n/ 表示/ 约束/ 图中/ 节点/ 数量/ ,/ 其/ 文献/ 中/ 的/ 实验/ 结果显示/ 域/ 敏感/ 能/ 大幅度/ 提升/ 基于/ 包含/ 的/ 指针/ 分析/ 的/ 精度/ ./ 此外/ ,/ 域/ 敏感/ 还/ 可/ 进一步/ 精化/ ,/ 于/ 洪涛/ 等/ [/ 39/ ]/ 将域/ 的/ 区分/ 与/ 机器/ 模型/ 的/ 数据/ 布局/ 结合/ 起来/ ,/ 使得/ 域/ 敏感/ 的/ 分析/ 在/ 特定/ 机器/ 上能/ 达到/ 更/ 高/ 的/ 精度/ ,/ 该/ 技术/ 虽然/ 基于/ Steensgaard/ 指针/ 分析/ ,/ 但/ 也/ 可/ 扩展/ 到/ 其它/ 指针/ 分析方法/ ./ 上下文/ 敏感/ 是/ 提升/ 指针/ 分析/ 精度/ 的/ 重要/ 方法/ ,/ 但/ 其/ 难点/ 主要/ 在于/ 如何/ 处理/ 由于/ 区分/ 大量/ 调用/ 点/ 的/ 上下文/ 而/ 导致/ 的/ 空间/ 爆炸/ 问题/ ./ 广义/ 上/ 的/ 上下文/ 敏感/ 分析/ 有/ 两种/ 实现/ 方式/ ./ 第/ 1/ 种/ 实现/ 方式/ 称为/ 调用/ 链/ (/ calling/ -/ string/ )/ 或者/ k/ -/ CFA/ ,/ 由/ 函数调用/ 的/ 调用/ 栈/ 信息/ 构成/ 不同/ 的/ 调用/ 上下文/ ,/ 直观/ 上/ ,/ 调用/ 链/ 对应/ 的/ 是/ 调用/ 栈中/ 的/ 一个/ 函数/ 序列/ ./ 在/ 实现/ 中/ ,/ 往往/ 对/ 调用/ 链/ 的/ 长度/ (/ 假设/ 为/ k/ )/ 进行/ 控制/ ,/ 即/ 只/ 分析/ 最/ 初始/ 的/ k/ 个/ 调用/ 点/ 的/ 信息/ ,/ 以/ 获得/ 分析/ 效率/ 和/ 精度/ 之间/ 的/ 折中/ ./ 该/ 实现/ 方式/ 结合/ 其它/ 技术/ 可以/ 获得/ 较/ 好/ 的/ 效率/ 和/ 精度/ ,/ 如/ Whaley/ 等/ 人/ [/ 40/ -/ 41/ ]/ 提出/ 了/ 基于/ 过程/ 克隆/ 的/ 上下文/ 敏感/ 的/ 指针/ 分析/ 算法/ ,/ 能够/ 利用/ 上下文/ 不/ 敏感/ 的/ 分析/ 达到/ 上下文/ 敏感/ 的/ 效果/ ./ Page11/ 第/ 2/ 种/ 实现/ 方式/ 称为/ 转移/ 函数/ (/ transferfunc/ -/ tion/ )/ ,/ 本质/ 上/ 是/ 过程/ 内/ 区域/ (/ region/ )/ 分析/ 向/ 过程/ 间/ 的/ 扩展/ ./ 转移/ 函数/ 反映/ 了/ 函数/ 入口/ 参数/ 和/ 出口/ 参数/ 之间/ 的/ 关系/ ,/ 给定/ 函数/ 入口/ 参数/ 中/ 与/ 指针/ 相关/ 的/ 信息/ ,/ 由/ 转移/ 函数/ 直接/ 计算/ 函数/ 出口/ 参数/ 中/ 所/ 包含/ 的/ 指针/ 信息/ ./ 程序/ 分析/ 之前/ ,/ 遍历/ 调用/ 图/ 对/ 每/ 一个/ 函数/ 构建/ 其/ 转移/ 函数/ ,/ 之后/ 以/ 函数/ 不同/ 的/ 调用/ 点/ 的/ 上下文/ 信息/ 为/ 输入/ 应用/ 转移/ 函数/ 得出/ 指针/ 分析/ 的/ 结果/ ,/ 以/ 实现/ 上下文/ 敏感/ 的/ 分析/ ./ 大部分/ 上下文/ 敏感/ 的/ 指针/ 分析/ 都/ 采用/ 了/ 这种/ 实现/ 方式/ [/ 42/ -/ 44/ ]/ ./ 黄波/ 等/ 人/ [/ 45/ ]/ 提出/ 了/ 一种/ 指针/ 指向/ 信息/ 在/ 过程/ 间/ 的/ 传播/ 方法/ ,/ 该/ 方法/ 通过/ 对/ 函数调用/ 点处/ 指针/ 指向/ 信息/ 内/ 的/ 表达式/ 进行/ 标记/ 的/ 策略/ 一次性/ 求得/ 需要/ 映射/ 到/ 被/ 调/ 函数/ 中/ 的/ 指针/ 指向/ 信息/ ./ 实验/ 结果显示/ ,/ 该/ 方法/ 分析/ 精度/ 与/ Wilson/ 等/ 人/ [/ 44/ ]/ 算法/ 相当/ ./ 此外/ ,/ 刘强/ [/ 46/ ]/ 、/ 孙洪浩/ 等/ 人/ [/ 47/ ]/ 也/ 对/ 上下文/ 敏感/ 指针/ 分析/ 算法/ 的/ 改进/ 做/ 了/ 有益/ 尝试/ ./ 除域/ 敏感/ 和/ 上下文/ 敏感/ 之外/ ,/ 还有/ 其它/ 提升/ 指针/ 分析/ 精度/ 的/ 方法/ 和/ 策略/ ,/ 如堆/ 建模/ 、/ 对象/ 敏感/ 等/ ,/ 但/ 限于/ 篇幅/ 且/ 非/ 本文/ 重点/ 关注/ 的/ 方面/ ,/ 因此/ 不再/ 赘述/ ./ 5.2/ 指向/ 集/ 表示/ 在/ 指针/ 分析/ 中/ ,/ 一般/ 采用/ 位/ 向量/ (/ bitvector/ )/ 或者/ 二元/ 决策/ 图/ (/ BinaryDecisionDiagram/ ,/ BDD/ )/ 来/ 表示/ 指向/ 集/ ,/ 二者/ 都/ 能/ 有效/ 地/ 降低/ 存储/ 开销/ ,/ 但/ 在/ 存储/ 和/ 操作/ 效率/ 上/ 还是/ 有/ 一些/ 差异/ ./ 位/ 向量/ 是/ 使用/ 广泛/ 的/ 传统/ 的/ 数据结构/ ,/ 已有/ 不少/ 开源/ 的/ 实现/ ,/ 如/ GCC/ 中/ 的/ bitmap/ 、/ Open64/ 编译器/ 中/ 的/ SPARSE/ _/ BV/ 等/ ./ Berndl/ 等/ 人/ [/ 48/ ]/ 首次/ 在/ 指针/ 分析/ 中/ 引入/ 了/ BDD/ ,/ 用于/ 表示/ 约束/ 图/ 和/ 指向/ 集/ ,/ 之后/ Whaley/ 等/ 人/ [/ 40/ ]/ 以及/ Hardekopf/ 等/ 人/ [/ 19/ ,/ 30/ ]/ 也/ 在/ 指针/ 分析/ 中/ 使用/ BDD/ ./ BDD/ 是/ 一种/ 以/ 紧凑/ 形式/ 表示/ 数据/ 的/ 数据结构/ ,/ 且/ 能够/ 进行/ 比较/ 快速/ 的/ 操作/ ,/ 目前/ 已有/ 许多/ 不同/ 的/ BDD/ 表示/ 和/ 实现/ 库/ ./ BDD/ 也/ 被/ 广泛/ 用于/ 程序/ 分析/ 领域/ 中/ ,/ 如/ 用于/ 形状/ 分析/ [/ 49/ -/ 50/ ]/ 和/ 谓词/ 抽象/ [/ 51/ ]/ 等/ ./ 图/ 9/ 显示/ 了/ 分别/ 采用/ BDD/ 和/ 位/ 向量/ 表示/ 指针/ 指向/ 集/ 的/ 结果/ ./ 其中/ ,/ BDD/ 将/ 变量/ 分为/ 两个/ 域/ :/ 变量/ a/ ,/ b/ ,/ c/ 属于/ 变量/ 域/ V/ ,/ 指向/ 对象/ x/ ,/ y/ ,/ z/ 属于/ 指向/ 域/ P/ ./ 这里/ 为/ 简单/ 起/ 见/ ,/ 用/ 两个/ bit/ 表示/ 一个/ 元素/ ,/ 例如/ 用/ 00/ 表示/ a/ 和/ x/ ,/ 01/ 表示/ b/ 和/ y/ ,/ 10/ 表示/ c/ 和/ z/ ./ 因此/ 指向/ 关系/ a/ 指向/ x/ 可以/ 编码/ 为/ 0000/ ,/ c/ 指向/ z/ 编码/ 为/ 1010/ ,/ 其它/ 指向/ 关系/ 以此类推/ ./ 最终/ 的/ 表示/ 结果/ 如子/ 图/ (/ a/ )/ 所示/ ,/ 图中/ 只/ 含有/ 5/ 个/ BDD/ 节点/ (/ 结果/ 0/ 和/ 1/ 的/ 表示/ 除外/ )/ ./ 用位/ 向量/ 表示/ 指向/ 集如子/ 图/ (/ b/ )/ 所示/ ,/ 图中/ 给/ 每/ 一个/ 变量/ 一个/ 标号/ ,/ 如/ 假设/ 变量/ x/ 、/ y/ 、/ z/ 的/ 标号/ 分别/ 为/ 24/ 、/ 25/ 、/ 26/ ./ 相对而言/ ,/ BDD/ 表示/ 虽然/ 不如/ 位/ 向量/ 直观/ 方便/ ,/ 但是/ 存储/ 开销/ 更/ 小/ ./ BDD/ 表示/ 的/ 大小/ 取决于/ 所/ 采用/ 的/ 变量/ 的/ 顺序/ ,/ 但/ 决定/ BDD/ 表示/ 中/ 变量/ 的/ 最优/ 顺序/ 是/ 一个/ NP/ 难/ 的/ 问题/ [/ 52/ ]/ ,/ 所以/ 在/ 工程/ 实现/ 的/ 时候/ ,/ 往往/ 是/ 找/ 一个/ 相对/ 较优/ 的/ 顺序/ ,/ 尽量减少/ 空间/ 开销/ ,/ 最大/ 程度/ 上/ 发挥/ BDD/ 的/ 作用/ ./ 文献/ [/ 48/ ]/ 中/ 对此/ 问题/ 做/ 了/ 详细/ 阐述/ ./ 一般而言/ ,/ 二元/ 决策/ 图/ 相对/ 于位/ 相量/ 来说/ ,/ 在/ 存储/ 效率/ 上/ 优于/ 后者/ ,/ 在/ 操作/ 效率/ 上/ 不如/ 后者/ ./ 图/ 9/ 只/ 从/ 存储/ 开销/ 上/ 做/ 了/ 简单/ 对比/ ,/ 两者之间/ 的/ 具体/ 差异/ 可以/ 参考文献/ [/ 19/ ,/ 30/ ,/ 48/ ]/ 中/ 给出/ 的/ 相关/ 对比/ 数据/ ./ 6/ 总结/ 和/ 展望/ 指针/ 分析/ 是/ 程序/ 分析/ 和/ 编译/ 优化/ 的/ 基础/ ,/ 也/ 一直/ 是/ 程序/ 分析/ 领域/ 的/ 热点/ 研究/ 问题/ ./ 到/ 目前为止/ ,/ 已经/ 有/ 相当/ 多/ 的/ 研究/ 工作/ 关注/ 于/ 指针/ 分析/ 的/ 算法/ 改进/ ,/ 主要/ 可以/ 分为/ 两类/ :/ 流/ 敏感/ 指针/ 分析/ 算法/ 的/ 改进/ 和/ 流/ 不/ 敏感/ 指针/ 分析/ 算法/ 的/ 改进/ ./ 本文/ 主要/ 回顾/ 和/ 总结/ 了/ 近/ 二十年/ 来/ 关于/ 流/ 不/ 敏感/ 的/ 基于/ 包含/ 的/ 指针/ 分析/ 以下/ 两/ 方面/ 的/ 工作/ :/ 在线/ 优化/ 和/ 离线/ 优化/ ,/ 并/ 选取/ 其中/ 7/ 种较/ 具/ 影响力/ 的/ 在线/ 优化/ 算法/ 和/ 3/ 种/ 离线/ 优化/ 算法/ 通过/ 实验/ 进行/ 了/ 对比/ 和/ 评述/ ./ 虽然/ 结合/ 现有/ 的/ 各种/ 优化/ 技术/ ,/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 的/ 效率/ 已经/ 得到/ 了/ 很大/ 提升/ ,/ 但/ 随着/ 计算机硬件/ 的/ 发展/ 、/ 软件/ 规模/ 的/ 增长/ 以及/ 应用/ 需求/ 的/ 变化/ ,/ 对/ 指针/ 分析/ 的/ 要求/ 也/ 在/ 改变/ ./ 我们/ 认为/ ,/ 基于/ 包含/ 的/ 指针/ 分析/ 未来/ 潜在/ 的/ 研究/ 方向/ 包括/ 如下/ 几个/ 方面/ :/ (/ 1/ )/ 分析/ 效率/ 的/ 进一步/ 提升/ ./ 一方面/ 是/ 离线/ 优化/ 与/ 在线/ 分析/ 的/ 结合/ ,/ HCD/ [/ 19/ ]/ 是/ 一个/ 值得/ 借鉴/ 的/ 范例/ ,/ 它/ 将/ 离线/ 预先/ 分析/ 所/ 得到/ 的/ 信息/ 用于/ 在线/ 的/ 优化/ ;/ 另一方面/ ,/ 离线/ 的/ 优化/ 还有/ 可/ 提升/ 的/ 空间/ ,/ 特别/ Page12/ 是/ 如何/ 以/ 高效/ 的/ 方法/ 找到/ 更/ 多/ 指针/ 等价/ 的/ 变量/ ,/ 在/ 这方面/ ,/ BSM/ [/ 31/ ]/ 将/ 同似/ (/ bisimilarity/ )/ 的/ 概念/ 与/ 指针/ 等价/ 、/ 位置/ 等价/ 联系/ 起来/ ,/ 提供/ 了/ 一种/ 离线/ 优化/ 的/ 新思路/ ./ 此外/ ,/ 无论是/ 离线/ 优化/ 还是/ 在线/ 优化/ ,/ 其本质/ 上/ 都/ 是/ 在/ 一个/ 有向图/ (/ 约束/ 图/ )/ 中/ 查找/ 满足/ 特定/ 属性/ (/ 指针/ 等价/ 、/ 位置/ 等价/ 、/ 强/ 连通/ 分量/ )/ 的/ 节点/ 和/ 边/ 并/ 将/ 其/ 合并/ 的/ 过程/ ,/ 因此/ ,/ 将来/ 的/ 研究/ 也许/ 可以/ 结合/ 图论/ 中/ 的/ 先进/ 算法/ 或/ 技术/ 进行/ 更/ 深入/ 的/ 优化/ ./ (/ 2/ )/ 客户/ 分析/ 需求/ 驱动/ ./ 一般而言/ ,/ 指针/ 分析/ 精度/ 越高/ ,/ 对/ 后续/ 的/ 客户/ 分析/ (/ clientanalysis/ )/ 越/ 有利/ ./ 但/ 问题/ 在于/ 一方面/ 全/ 敏感/ (/ 流/ 敏感/ 、/ 上下文/ 敏感/ 结合/ 域/ 敏感/ 等/ )/ 的/ 指针/ 分析/ 的/ 开销/ 太/ 大/ ,/ 另一方面/ 不同/ 的/ 客户/ 分析/ 对/ 指针/ 分析/ 精度/ 的/ 要求/ 也/ 可能/ 是/ 不同/ 的/ ./ 在/ 这种/ 情况/ 下/ ,/ 需求/ 驱动/ (/ demand/ -/ driven/ )/ 的/ 指针/ 分析/ [/ 53/ -/ 56/ ]/ 可以/ 作为/ 一种/ 解决方案/ ,/ 它/ 只/ 在/ 客户/ 分析/ 有/ 需求/ (/ query/ )/ 的/ 时候/ 做/ 必要/ 的/ 分析/ ,/ 其/ 最大/ 的/ 优势/ 在于/ 避免/ 了/ 对/ 全/ 程序/ 进行/ 分析/ 所/ 带来/ 的/ 较大/ 时空/ 开销/ ,/ 同时/ 可以/ 适用/ 逐步/ 精化/ 的/ 指针/ 分析/ [/ 53/ ]/ ,/ 对/ 不同/ 的/ 客户/ 需求/ 采用/ 不同/ 精度/ 的/ 分析/ ,/ 此外/ 相同/ 需求/ 的/ 分析/ 结果/ 还/ 可以/ 保存起来/ 复用/ 以/ 减少/ 重复/ 分析/ 的/ 代价/ ./ (/ 3/ )/ 指针/ 分析/ 并行/ 化/ ./ 多核/ 为/ 并行/ 提供/ 了/ 天然/ 丰富/ 的/ 计算资源/ ,/ 相对/ 于/ 优化/ 而言/ ,/ 并行/ 所/ 带来/ 的/ 效率/ 提升/ 更为/ 显著/ ,/ 但是/ 对于/ 基于/ 包含/ 的/ 指针/ 分析/ 算法/ 而言/ ,/ 并行/ 化/ 的/ 关键问题/ 是/ 要/ 解决/ 如何/ 处理/ 不/ 规整/ 的/ 数据结构/ 同时/ 采取/ 何种/ 并行/ 方式/ 以/ 避免/ 并行任务/ 之间/ 的/ 数据/ 依赖/ ./ M/ / ndez/ -/ Lojo/ 等/ [/ 57/ ]/ 对/ Java/ 程序/ 上/ 的/ 基于/ 包含/ 的/ 指针/ 分析/ 做/ 了/ 并行/ 化/ 的/ 尝试/ ,/ 在/ 八核/ 机器/ 上/ 的/ 平均/ 加速/ 比能/ 达到/ 3/ 左右/ ,/ 并行/ 所/ 带来/ 的/ 效率/ 提升/ 相当可观/ ./ (/ 4/ )/ 并行程序/ 的/ 指针/ 分析/ ./ 并行程序/ 的/ 指针/ 分析/ 是/ 并行程序/ 分析/ 和/ 检测/ 的/ 基础/ ,/ 如/ 静态数据/ 竞争/ (/ racecondition/ )/ 的/ 检测/ 等/ ,/ 该/ 方向/ 的/ 研究/ 仍然/ 较为/ 初步/ 但/ 需求/ 却/ 由于/ 多核/ 时代/ 的/ 来临/ 而/ 变得/ 日益/ 迫切/ ./ 实际上/ 已有/ 相关/ 的/ 针对/ 并行程序/ 指针/ 分析/ 的/ 研究/ ,/ 如/ 文献/ [/ 58/ ]/ 是/ 针对/ 多线程/ 的/ CILK/ 程序/ 所/ 设计/ 的/ 指针/ 分析方法/ ,/ 该/ 算法/ 整体/ 是/ 流/ 敏感/ 的/ ,/ 但是/ 对于/ 并行/ 区域/ 中/ 的/ 代码/ 则/ 做/ 流/ 不/ 敏感/ 的/ 处理/ ./ 未来/ 的/ 研究/ 需要/ 关注/ 如何/ 结合/ 并行程序/ 的/ 固有/ 特点/ 进一步/ 提升/ 分析/ 的/ 精度/ ,/ 与/ 针对/ 并行程序/ 的/ 流/ 分析/ 框架/ 相结合/ 可能/ 是/ 一个/ 研究/ 趋势/ ./ (/ 5/ )/ 指针/ 分析/ 与/ 软件/ 检测/ ./ 软件/ 的/ 可靠性/ 日益/ 受到重视/ ,/ 因此/ 软件/ 检测/ 、/ 程序验证/ 等/ 研究/ 领域/ 也/ 日益/ 成为/ 热点/ ./ 编译器/ 由于/ 具有/ 强大/ 的/ 程序/ 分析/ 能力/ ,/ 可以/ 作为/ 软件/ 检测/ 的/ 一个/ 良好/ 的/ 支撑/ 平台/ ./ 与/ 服务/ 于/ 传统/ 的/ 编译/ 优化/ 不同/ ,/ 服务/ 于/ 软件/ 检测/ 的/ 指针/ 分析/ 有/ 其/ 新/ 的/ 特点/ [/ 41/ ,/ 59/ -/ 61/ ]/ ./ 例如/ ,/ 对于/ 优化/ 而言/ ,/ 指针/ 分析/ 的/ 结果/ 首先/ 必须/ 正确/ 以/ 保证/ 优化/ 的/ 正确/ ,/ 因而/ 往往/ 是/ 保守/ 的/ ;/ 但/ 对于/ 软件/ 检测/ 而言/ ,/ 指针/ 分析/ 的/ 结果/ 则/ 可以/ 相对/ 激进/ 一些/ ,/ 因为/ 在/ 有/ 可能/ 减少/ 漏报/ 的/ 同时/ 增加/ 一些/ 误报/ 信息/ 并/ 不会/ 影响/ 检测工具/ 本身/ 的/ 功能/ ./ 

