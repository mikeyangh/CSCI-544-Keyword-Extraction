Page1/ 一种/ 基于/ 新型/ 图/ 模型/ 的/ API/ 推荐/ 系统/ 姜伟/ 3/ )/ 1/ )/ (/ 中国科学院计算技术研究所/ 前瞻/ 实验室/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 大学/ 北京/ 100149/ )/ 3/ )/ (/ 中国/ 石油/ 长城/ 钻探/ 工程/ 有限公司/ 测井技术/ 研究院/ 北京/ 100101/ )/ 摘要/ 对象/ 实例/ 化是/ 软件工程/ 类库/ 复用/ 中/ 一个/ 常见/ 、/ 复杂/ 的/ 问题/ ./ 即/ 根据/ 已知/ 源/ 类型/ 的/ 对象/ ,/ 用户/ 需要/ 编写/ 代码/ 对/ 目标/ 类型/ 进行/ 实例/ 化/ ./ 研究/ 人员/ 提出/ 了/ 若干种/ API/ 自动/ 推荐/ 系统/ 辅助/ 用户/ 解决/ 上述/ 问题/ ./ 然而/ 这些/ 系统/ 不能/ 同时/ 兼顾/ 准确率/ 和/ 查全率/ ,/ 因此/ 在/ 一定/ 程度/ 上/ 影响/ 了/ 系统/ 的/ 实用性/ ./ 该文/ 提出/ 了/ 一种/ 兼顾/ 准确率/ 和/ 查全率/ ,/ 基于/ 新型/ 图/ 模型/ 的/ API/ 推荐/ 系统/ —/ —/ —/ APISynth/ ./ 在/ 查全率/ 方面/ ,/ APISynth/ 使用/ 一个/ 新颖/ 的/ 全局/ 图/ 模型/ 来/ 表达/ 类库/ 中/ 所有/ 的/ API/ 依赖/ 关系/ 和/ API/ 历史/ 使用/ 信息/ ./ 利用/ 新/ 的/ 全局/ 图/ 模型/ 具有/ 的/ 特殊/ Tag/ 元素/ 和/ 可达/ 性质/ 以/ 避免/ 错误/ 的/ API/ 调用/ ./ 在/ 准确率/ 方面/ ,/ APISynth/ 首先/ 将/ 对象/ 实例/ 化/ 问题/ 建模/ 为/ Top/ -/ K/ 子图/ 查询/ 问题/ ,/ 然后/ 设计/ 一种/ 新/ 的/ 支持/ DAG/ 形式/ 解/ 的/ 图/ 搜索算法/ ,/ 避免/ 了/ 传统/ 的/ 最/ 短/ 路径/ 图/ 搜索算法/ 导致/ 的/ 查/ 不准/ 问题/ ./ 实验/ 结果表明/ ,/ 与/ 现有/ 多种/ 方法/ 相比/ ,/ APISynth/ 在/ 准确率/ 和/ 查全率/ 两/ 方面/ 均/ 获得/ 了/ 较大/ 提升/ ./ 关键词/ 代码/ 辅助工具/ ;/ API/ 推荐/ 工具/ ;/ 代码/ 复用/ 1/ 引言/ 随着/ 计算机/ 在/ 人类/ 生产/ 、/ 生活/ 领域/ 的/ 不断/ 普及/ ,/ 以及/ 云/ 计算/ 、/ 大/ 数据/ 等/ 新兴/ 计算/ 模式/ 的/ 不断/ 出现/ ,/ 以/ 社交/ 网站/ 、/ 搜索引擎/ 为/ 代表/ 的/ 超大型/ 应用/ 系统/ 得到/ 了/ 迅猛发展/ ./ 在/ 此/ 背景/ 下/ ,/ 计算机/ 应用/ 的/ 复杂性/ 不断/ 增加/ ,/ 软件系统/ 的/ 规模/ 也/ 进入/ 了/ 爆发性/ 增长/ 的/ 历史/ 时期/ ,/ 软件开发/ 和/ 维护/ 的/ 代价/ 一直/ 在/ 持续/ 增大/ ./ 如/ 微软/ 的/ Windows/ 操作系统/ 的/ 代码/ 规模/ 已经/ 超过/ 4000/ 万行/ ,/ 多个/ 版本/ 的/ Linux/ 操作系统/ 的/ 代码/ 规模/ 均/ 在/ 亿行/ 以上/ ,/ 开源/ Hadoop/ 的/ 代码/ 量/ 达到/ 了/ 230/ 万行/ ①/ ./ 包括/ Yahoo/ 、/ Cloudra/ 、/ Facebook/ 在内/ 的/ 数十家/ 大型软件/ 公司/ 和/ 近万名/ 开发者/ 构成/ 了/ 庞大/ 的/ Hadoop/ 社区/ ,/ 每年/ 贡献/ 的/ 新增/ 代码/ 量/ 都/ 高达/ 30/ ~/ 40/ 万行/ ②/ ./ 在/ 这些/ 超大规模/ 、/ 大型/ 群体/ 参与/ 的/ 软件系统/ 开发/ 过程/ 中/ ,/ 类库/ 复用/ 可以/ 有效/ 地/ 提高/ 软件/ 开发人员/ 的/ 编程/ 效率/ 、/ 改善/ 软件/ 的/ 质量/ [/ 1/ ]/ ./ 然而/ ,/ 由于/ 类库/ 中/ API/ 的/ 数量/ 巨大/ 并且/ 使用/ 方式/ 复杂/ ,/ 类库/ 复用/ 的/ 过程/ 中/ 往往/ 也/ 会/ 涉及/ 很多/ 复杂/ 的/ 工作/ [/ 2/ ]/ ./ 对象/ 实例/ 化/ ,/ 作为/ 其中/ 的/ 典型/ 代表/ ,/ 就是/ 类库/ 复用/ 中/ 的/ 一个/ 突出/ 的/ 挑战性/ 问题/ ./ 其/ 根本/ 目标/ 是/ 根据/ 已知/ 类型/ 的/ 对象/ 获取/ 未知/ 类型/ 的/ 对象/ (/ 或/ 称为/ 对/ 未知/ 类型/ 的/ 实例/ 化/ )/ ./ 即/ 给定/ 起始/ 点/ 类型/ (/ SourceType/ )/ 和/ 终点/ 类型/ (/ DestinationType/ )/ 作为/ 输入/ 查询/ ,/ 输出/ 从/ 起始/ 点/ 类型/ 到/ 终点/ 类型/ 的/ 方法/ 调用/ 序列/ [/ 3/ ]/ ./ 面对/ 规模/ 和/ 复杂性/ 不断/ 增长/ 的/ 软件系统/ ,/ 依靠/ 手工/ 查找/ 、/ 比/ 对/ 的/ 方式/ 实现/ 对象/ 实例/ 化/ 低效/ 且/ 易错/ ./ GEF/ (/ GraphicalEditingFramework/ )/ 作为/ 一个/ 常用/ Eclipse/ 的/ 图形/ 交互/ 类库/ ,/ 就/ 涉及/ 35/ 万行/ 代码/ ③/ ,/ 共计/ 6/ 万多个/ API/ 方法/ ./ 开发人员/ 使用/ 这个/ 类库/ 时/ ,/ 需要/ 阅读/ 海量/ 的/ 、/ 甚至/ 未/ 及时/ 更新/ 的/ 参考/ 文档/ 来/ 找到/ 一个/ 正确/ 的/ 对象/ 实例/ 化/ 方案/ ./ 据/ 有关/ 研究/ 人员/ 统计/ ,/ 编程人员/ 查找/ 和/ 理解/ 现有/ API/ 用法/ 的/ 时间/ 占用/ 了/ 超过/ 40/ %/ 的/ 编程/ 时间/ [/ 4/ ]/ ./ 因此/ ,/ 如果/ 能够/ 自动/ 地/ 完成/ 对象/ 实例/ 化/ 工作/ ,/ 为/ 开发人员/ 推荐/ 最/ 相关/ 的/ 方法/ 调用/ 序列/ ,/ 将/ 极大/ 地/ 减少/ 用户/ 查找/ 、/ 理解/ 、/ 组合/ 和/ 调试/ 的/ 工作量/ ,/ 进而/ 降低/ 人工/ 错误率/ ,/ 提高/ 软件/ 的/ 质量/ ./ 因此/ ,/ 面向对象/ 实例/ 化/ 的/ 自动/ API/ 推荐/ 引起/ 了/ 诸多/ 研究/ 人员/ 的/ 关注/ [/ 2/ -/ 3/ ,/ 5/ -/ 6/ ]/ ,/ 已/ 成为/ 一个/ 研究/ 的/ 热点/ [/ 7/ ]/ ./ 这些/ 相关/ 工作/ 中/ 实现/ 的/ 对象/ 实例/ 化/ 工具/ [/ 2/ -/ 3/ ,/ 5/ -/ 6/ ]/ 被/ 称为/ API/ 推荐/ 系统/ ./ 这些/ API/ 推荐/ 系统/ [/ 2/ -/ 3/ ,/ 5/ -/ 6/ ]/ 首先/ 搜集/ 查询/ (/ Source/ ,/ Destination/ )/ 涉及/ 的/ 类库/ 源码/ 或/ 代码/ 样例/ ,/ 然后/ 采用/ 本文/ 称之为/ 全局/ 连通/ 图/ [/ 2/ ]/ 或/ 局部/ 非/ 连通/ 图/ [/ 3/ ,/ 5/ -/ 6/ ]/ 的/ 模型/ 对/ 代码/ 中/ 包含/ 的/ API/ 依赖/ 关系/ 进行/ 建模/ ./ 其中/ ,/ 前者/ 对/ 类库/ 源码/ 中/ 所有/ API/ 的/ 依赖/ 关系/ 进行/ 统一/ 建模/ ,/ 而/ 后者/ 则/ 分别/ 对/ 单个/ 类/ 文件/ 或/ 方法/ 进行/ 建模/ ./ 在/ 图/ 模型/ 的/ 支持/ 下/ ,/ 二者/ 采用/ 基于/ 图/ 搜索/ [/ 2/ -/ 3/ ,/ 5/ ]/ 或/ 模式匹配/ [/ 6/ ]/ 的/ 方法/ 来/ 生成/ 从/ 起始/ 点/ 类型/ (/ SourceType/ )/ 到/ 终点/ 类型/ (/ DestinationType/ )/ 的/ 子/ 图/ ./ 每个/ 子图/ 表示/ 的/ 方法/ 调用/ 序列/ 就/ 构成/ 一个/ 解/ ./ Prospector/ [/ 2/ ]/ 是/ 一种/ 基于/ 全局/ 连通/ 图/ 模型/ 的/ 方法/ ./ 它/ 可以/ 完整/ 刻画/ 类库/ 中/ 所有/ 类型/ 之间/ 的/ 转换/ 关系/ ,/ 每/ 一种/ 可能/ 的/ 方法/ 调用/ 序列/ 都/ 可以/ 从中/ 找到/ ./ 理论/ 上/ 这种/ 方式/ 具有/ 很/ 好/ 的/ 查全率/ ./ 实际/ 情况/ 中/ ,/ 由于/ 方法/ 调用/ 通常/ 需要/ 满足/ 一个/ 或/ 多个/ 输入/ 参数/ 的/ 需求/ ,/ 方法/ 调用/ 序列/ 常常/ 会/ 呈现/ 为/ 有/ 向/ 无/ 环图/ (/ DAG/ )/ 的/ 形式/ ./ 然而/ ,/ 由于/ Prospector/ 采用/ 最短/ 路径/ 搜索算法/ ,/ 不能/ 直接/ 支持/ DAG/ 图/ 形式/ 解/ 的/ 搜索/ ,/ 在/ 搜索/ 过程/ 中/ 会/ 导致/ 不少/ 方法/ 的/ 输入/ 参数/ 未能/ 被/ 实例/ 化/ ./ 为了/ 解决/ 这一/ 问题/ ,/ Prospector/ 将/ 这些/ 参数/ 作为/ 自由/ 变量/ (/ freevariable/ )/ ,/ 要求/ 开发人员/ 手工/ 输入/ 新/ 的/ 查询/ 搜索/ 这些/ 自由/ 变量/ 的/ 实例/ 化解/ ,/ 并/ 组合/ 这些/ 解来/ 生成/ 最终/ 结果/ ./ 可见/ ,/ 这种/ 需要/ 人工干预/ 才能/ 推荐/ 出/ 完整/ 解/ 的/ 工作/ 机制/ ,/ 会/ 在/ 一定/ 程度/ 上/ 影响/ 用户/ 体验/ ./ 同时/ ,/ Prospector/ 也/ 无法/ 对/ 人工/ 组合/ 后/ 的/ 解/ 进行/ 精确/ 的/ 优劣/ 排序/ ,/ 易/ 导致用户/ 选择/ 无效/ 解/ ./ 第/ 2/ 节将/ 给出/ 一个/ 具体/ 的/ 示例/ 对/ Prospector/ 存在/ 的/ 问题/ 予以/ 说明/ ./ 本文/ 的/ 实验/ 结果/ 也/ 表明/ 该/ 方法/ 在/ 准确性/ 方面/ 存在/ 明显/ 不足/ ./ 与/ 之/ 相比/ ,/ 文献/ [/ 3/ ,/ 5/ -/ 6/ ]/ 采用/ 了/ 基于/ 局部/ 非/ 连通/ 图/ 模型/ 的/ 机制/ ,/ 它们/ 的/ 图/ 模型/ 包括/ 多个/ 局部/ 非/ 连通/ 图/ ,/ 分别/ 表达/ 某个/ 方法/ 或类/ 文件/ 内部/ 的/ API/ 依赖/ 关系/ ./ 单个/ 局部/ 图/ 规模/ 相对/ 较/ 小/ ,/ 能够/ 大大/ 地/ 减少/ 问题/ 空间/ ,/ 因此/ 有利于/ 系统/ 准确率/ 的/ 提升/ ./ 但是/ ,/ 这/ 类/ 方法/ 的/ 图/ 模型/ 不能/ 表达/ 孤立/ 局部/ 图/ 之间/ 的/ API/ 依赖/ 关系/ ,/ 难以/ 对/ 类库/ 中/ 所有/ 的/ API/ 依赖/ 关系/ 进行/ 完整/ 刻画/ ,/ 因此/ 容易/ 产生/ 遗漏/ ,/ 造成/ 系统/ 查全率/ 的/ 下降/ ./ 尽管/ 文献/ [/ 6/ ]/ 提出/ 一种/ 查询/ 分裂/ 的/ 技术/ 可以/ 实现/ 跨/ 多个/ 局部/ 图/ 的/ 搜索/ ,/ 但是/ 它/ 使用/ 语句/ 间/ 的/ 控制流/ 构建/ 图/ 模型/ ,/ 无法/ 对/ API/ 之间/ 的/ 数据/ 依赖/ 关系/ 进行/ 刻画/ ,/ 从而/ ①/ ②/ ③/ Page3/ 使/ 其/ 能够/ 描述/ 的/ 解/ 空间/ 变小/ ,/ 降低/ 了/ 系统/ 的/ 查全率/ ./ 表/ 1/ 对/ 现有/ 工作/ 的/ 特点/ 进行/ 了/ 总结/ 和/ 分析/ ./ 由此可知/ ,/ 现有/ 方法/ 要么/ 查全率/ 不足/ ,/ 要么/ 准确性/ 无法/ 保障/ ./ 为了/ 解决/ 这一/ 问题/ ,/ 本文/ 提出/ 了/ 一个/ 新/ 的/ 全局/ 表/ 1/ 对象/ 实例/ 化/ 自动/ 推荐/ 方法/ 的/ 总结/ 与/ 对比/ API/ 依赖/ 描述/ 数据/ 依赖/ 控制/ 依赖/ 典型/ 工具/ Prospector/ [/ 2/ ]/ √/ ParseWeb/ [/ 5/ ]/ ×/ XSnippet/ [/ 3/ ]/ GraPacc/ [/ 6/ ]/ 本文/ 的/ 主要/ 贡献/ 包括/ :/ (/ 1/ )/ 提出/ 一个/ 新/ 的/ 加权/ 全局/ 连通/ 图/ 模型/ ./ 能够/ 准确/ 地/ 表达/ 相关/ 类库/ 包含/ 的/ API/ 依赖/ 关系/ 以及/ API/ 历史/ 使用/ 信息/ ./ 与/ 现有/ 全局/ 连通/ 图/ 模型/ 不同/ ,/ 本文/ 的/ 图/ 模型/ 中/ 节点/ 表示/ API/ 方法/ ;/ 边/ 用于/ 连接/ 输入/ 类型/ (/ 接收者/ 和/ 方法/ 的/ 参数/ )/ 与/ 输出/ 类型/ (/ 方法/ 的/ 返回值/ )/ 相匹配/ 的/ 方法/ ,/ 以此/ 表示/ 方法/ 间/ 的/ 数据/ 依赖/ ,/ 每条/ 边/ 带有/ 一个/ 参数/ 标签/ (/ Tag/ )/ ;/ API/ 历史/ 使用/ 信息/ (/ API/ 方法/ 在/ 相关/ 项目/ 中/ 被/ 使用/ 的/ 频率/ )/ 用于/ 对图/ 模型/ 进行/ 完善/ 和/ 补充/ :/ 将/ 其/ 作为/ 服务质量/ QoS/ (/ QualityofService/ )/ 赋值/ 给/ 相应/ 的/ 节点/ ./ 与/ 经典/ 图论/ 不同/ ,/ 本文/ 借助/ 新元素/ Tag/ 提出/ 了/ 新/ 的/ 可达性/ 定义/ ,/ 以/ 满足/ 搜索/ DAG/ 子图/ 的/ 需求/ ./ (/ 2/ )/ 提出/ 一种/ 新/ 的/ 图/ 搜索算法/ ./ 借助/ 新型/ 图/ 模型/ 的/ 结构/ 及/ 可达/ 性质/ ,/ 提出/ 了/ 新/ 的/ Top/ -/ K/ 子图/ 查询/ 问题/ 来/ 建模/ 方法/ 调用/ 序列/ 的/ 查询/ 问题/ ,/ 并/ 提出/ 了/ 关键/ 路径/ 松弛/ 算法/ 及/ DAG/ 子图/ 排序/ 方法/ ,/ 指导/ 编程人员/ 选择/ 正确/ 结果/ ./ (/ 3/ )/ 通过/ 一系列/ 对比/ 实验/ 对/ 所/ 提出/ 的/ 方法/ 进行/ 系统化/ 验证/ ,/ 实验/ 结果表明/ ,/ 本文/ 的/ 方法/ 获得/ 了/ 更/ 高/ 的/ 查全率/ 和/ 准确率/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 工作/ ;/ 第/ 3/ 节/ 阐述/ 加权/ API/ 图/ 模型/ ;/ 第/ 4/ 节/ 对系统/ 进行/ 整体/ 概述/ ;/ 第/ 5/ 节/ 阐述/ 算法/ 细节/ ;/ 第/ 6/ 节/ 讨论/ 实验/ 结果/ ;/ 第/ 7/ 节/ 进行/ 全文/ 总结/ ./ 2/ 相关/ 工作/ 本/ 节/ 首先/ 综述/ 对象/ 实例/ 化/ 推荐/ 工作/ 的/ 进展/ ;/ 然后/ 介绍/ 其他/ 较为/ 相关/ 的/ 工作/ ./ 2.1/ 对象/ 实例/ 化/ 推荐/ 为/ 便于/ 讨论/ ,/ 本文/ 根据/ 图/ 模型/ 的/ 异同/ ,/ 将/ 现有/ 方/ 连通/ 图/ 模型/ —/ —/ —/ 加权/ API/ 图/ ,/ 给出/ 了/ 新/ 的/ 不同于/ 传统/ 图论/ 的/ 可达性/ 定义/ 及/ 搜索算法/ ,/ 并/ 设计/ 实现/ 了/ 一个/ 新/ 的/ API/ 推荐/ 系统/ —/ —/ —/ APISynth/ ,/ 来/ 帮助/ 编程人员/ 完成/ 对象/ 实例/ 化/ 的/ 任务/ ./ ×/ √/ ×/ √/ 法/ 分为/ 两类/ :/ 基于/ 全局/ 图/ 模型/ 的/ 方法/ [/ 2/ ]/ 和/ 基于/ 局部/ 图/ 模型/ 的/ 方法/ [/ 3/ ,/ 5/ -/ 6/ ]/ ./ 需要/ 指出/ ,/ 尽管/ Nguyen/ 等/ 人/ [/ 6/ ]/ 将/ 文献/ [/ 6/ ]/ 归类/ 为/ 代码/ 补全/ 方法/ ,/ 但是/ 由于/ 该/ 方法/ 也/ 可/ 用于/ 解决/ 对象/ 实例/ 化/ 的/ 问题/ ,/ 本文/ 也/ 将/ 其/ 纳入/ 本/ 节/ 一并/ 讨论/ ./ 为了/ 更/ 直观/ 地/ 描述/ 现有/ 方法/ 的/ 特征/ ,/ 尤其/ 是/ 相关/ 图/ 模型/ 的/ 结构/ ,/ 以图/ 1/ 所示/ 代码/ 为例/ ,/ 本文/ 在/ 图/ 2/ 中/ 给出/ 各/ 方法/ 提出/ 的/ 图/ 模型/ ./ 为/ 便于/ 表述/ ,/ 下文/ 将/ 使用/ 代码/ 的/ 符号/ 简记/ 形式/ (/ 图/ 1/ 右侧/ )/ 进行/ 相关/ 问题/ 的/ 阐述/ ./ 图/ 2/ 相关/ 工作/ 图/ 模型/ 示例/ (/ 基于/ 图/ 1/ 示例/ 代码/ 建模/ )/ 2.1/ ./ 1/ 基于/ 全局/ 图/ 模型/ 的/ 方法/ Prospector/ [/ 2/ ]/ 根据/ 类库/ 中/ 的/ API/ 依赖/ 关系/ 构建/ 图/ 模型/ ./ 图中/ 的/ 节点/ 表示/ 对象/ 类型/ ;/ 边/ 表示/ API/ 方法/ 调用/ ,/ 用来/ 实现/ 类型/ 之间/ 的/ 转换/ ./ 图/ 2/ (/ a/ )/ 展示/ 了/ Prospector/ 构建/ 的/ 图/ 模型/ ./ 基于/ 该图/ ,/ Prospector/ 将/ 对象/ 实例/ 化/ 问题/ 建模/ 为/ 一个/ 传统/ 的/ 图/ 搜索/ 问题/ —/ —/ —/ Page4/ 最短/ 路径/ 问题/ ,/ 并/ 使用/ 路径/ 搜索算法/ 求取/ 起点/ 类型/ 到/ 终点/ 类型/ 的/ 方法/ 调用/ 序列/ ./ 这些/ 方法/ 调用/ 序列/ 在/ 图/ 中/ 表现/ 为/ 路径/ 或/ DAG/ 的/ 形式/ ./ 例如/ ,/ 当/ 方法/ 调用/ 序列/ 中/ 存在/ 带/ 参数/ 的/ 方法/ 调用/ 时/ ,/ 该/ 序列/ 在/ 图/ 中将/ 呈现/ 为/ DAG/ 的/ 形式/ ./ 然而/ ,/ Prospector/ 采用/ 最短/ 路径/ 搜索算法/ 不能/ 直接/ 求取/ DAG/ 形式/ 的/ 解/ ,/ 因此/ 需要/ 额外/ 的/ 人工干预/ ,/ 具体/ 过程/ 见表/ 2/ ./ 步骤/ 1234/ 由表/ 2/ 可知/ ,/ 当/ 满足/ 查询/ 的/ 最终/ 结果/ 表现/ 为/ DAG/ 形式/ 时/ ,/ 搜索/ 过程/ 中/ 就/ 会/ 产生/ 自由/ 变量/ ./ 此时/ ,/ Prospector/ 需要/ 人工干预/ 才能/ 生成/ 有效/ 解/ ./ 但是/ 过多/ 的/ 人工干预/ 易/ 造成/ 错误操作/ ,/ 导致/ 不/ 正确/ 结果/ 的/ 生成/ ,/ 从而/ 降低/ 了/ 系统/ 的/ 准确率/ ./ 此外/ ,/ Prospector/ 对/ 结果/ 的/ 评价/ 也/ 不够/ 精确/ 和/ 全面/ ./ 这一/ 问题/ 也/ 存在/ 于/ DAG/ 图/ 形式/ 的/ 服务/ 组合/ 问题/ 中/ [/ 8/ -/ 10/ ]/ ./ 本文/ 称此/ 问题/ 为/ “/ 弱/ DAG/ 机制/ ”/ 问题/ ./ 已有/ 的/ 研究/ 工作/ 表明/ ,/ 带/ 参数/ API/ 的/ 调用/ 在/ 实际/ 应用/ 中/ 往往/ 占有/ 较大/ 比例/ ,/ 例如/ 在/ 3/ 个/ 典型/ 的/ Java/ 项目/ (/ Eclipse3/ ./ 6.2/ ,/ Tomcat7/ ./ 0/ ,/ JBoss5/ ./ 0/ )/ 中/ ,/ 带/ 参数/ API/ 方法/ 的/ 调用/ 次数/ 的/ 平均/ 占/ 比/ 为/ 59/ %/ [/ 11/ ]/ ./ 此外/ ,/ 本文/ 对/ GEF/ 类库/ 的/ 统计/ 结果表明/ ,/ 带/ 参数/ API/ 方法/ 的/ 占/ 比/ 也/ 达到/ 28/ %/ ./ 据此/ 可知/ ,/ 对象/ 实例/ 化/ 查询/ 的/ 解以/ DAG/ 形式/ 出现/ 的/ 概率/ 较/ 高/ ,/ 而/ 由此/ 引发/ 的/ 弱/ DAG/ 机制/ 问题/ 会/ 显著/ 影响/ Prospector/ 的/ 准确率/ ./ 2.1/ ./ 2/ 基于/ 局部/ 图/ 模型/ 的/ 方法/ 基于/ 局部/ 图/ 模型/ 的/ 方法/ [/ 3/ ,/ 5/ -/ 6/ ]/ 将/ 相关/ 的/ API/ 依赖/ 关系/ 建模/ 为/ 多个/ 图/ 模型/ ./ 每/ 一个/ 图仅/ 对应/ 于/ 一个/ 特定/ 单元/ 的/ 代码/ ,/ 例如/ 类库/ 中/ 的/ 一个/ 类/ 文件/ [/ 3/ ]/ 或者/ 代码/ 样例/ 中/ 一个/ API/ 方法/ 包含/ 的/ 内部/ 代码/ [/ 5/ -/ 6/ ]/ ./ 这类/ 方法/ 构建/ 的/ 图/ 模型/ 由/ 多个/ 仅仅/ 表达/ 局部/ 、/ 特定/ 单元/ API/ 依赖/ 关系/ 的/ 图/ 组成/ ,/ 因此/ 可/ 称之为/ 局部/ 图/ 模型/ ./ 文献/ [/ 3/ ,/ 5/ -/ 6/ ]/ 构建/ 的/ 局部/ 图/ 模型/ 分别/ 具有/ 不同/ 的/ 特点/ ./ 例如/ ,/ 在/ 文献/ [/ 3/ ]/ 构建/ 的/ 图/ 中/ ,/ 节点/ 表示/ 一条/ 代码/ 语句/ ,/ 边/ 表示/ 语句/ 调用/ 次序/ ,/ 如图/ 2/ (/ c/ )/ 所示/ ;/ 文献/ [/ 5/ ]/ 与/ 文献/ [/ 2/ ]/ 构建/ 的/ 图/ 较为/ 相似/ ,/ 不同点/ 是/ 前者/ 在/ 图/ 中/ 增加/ 了/ 专门/ 指向/ 方法/ 参数/ 的/ 边/ ,/ 如图/ 2/ (/ b/ )/ 所示/ ;/ 文献/ [/ 6/ ]/ 构建/ 的/ 图/ 中/ 包括/ 3/ 类/ 节点/ :/ 数据/ 节点/ (/ 数据类型/ )/ 、/ 动作/ 节点/ (/ 方法/ 调用/ )/ 和/ 控制/ 节点/ (/ 循环/ 、/ 分支/ )/ ,/ 同时/ 使用/ 数据/ 依赖边/ 和/ 控制/ 依赖边/ 刻画/ 节点/ 间/ 的/ 关系/ ,/ 如图/ 2/ (/ d/ )/ 所示/ ./ 上述/ 工作/ 采用/ 的/ 求解/ 策略/ 也/ 具有/ 差异性/ ./ 与/ 文献/ [/ 2/ ]/ 相似/ ,/ 文献/ [/ 3/ ,/ 5/ ]/ 也/ 将/ 对象/ 实例/ 化/ 问题/ 建模/ 为/ 最/ 短/ 路径/ 问题/ ,/ 并/ 使用/ 标准/ 的/ 图/ 搜索算法/ 在/ 局部/ 图/ 模型/ 上/ 查找/ 解/ ./ 与/ 之/ 不同/ ,/ 文献/ [/ 6/ ]/ 则/ 通过/ 模式匹配/ 的/ 方式/ 解决/ 对象/ 实例/ 化/ 问题/ :/ 首先/ 使用/ 专门/ 的/ 工具/ Grouminer/ [/ 8/ ]/ 将/ 局部/ 图/ 模型/ 中/ 频繁/ 出现/ 的/ 子/ 图/ 抽取/ 为/ 模式/ ;/ 然后/ 使用/ 与/ 查询/ 匹配/ 的/ 模式/ 来/ 生成/ 子图/ 形式/ 的/ 解/ ./ 局部/ 非/ 连通/ 图/ 模型/ 可以/ 压缩/ 问题/ 空间/ ,/ 因此/ 有利于/ 提高/ 系统/ 的/ 准确率/ ./ 但是/ 这种/ 非/ 连通/ 图/ 无法/ 表达/ 图/ 与/ 图/ 之间/ 的/ 关系/ ,/ 因此/ 会/ 遗漏掉/ 部分/ 有效/ 解/ ,/ 从而/ 降低/ 系统/ 的/ 查全率/ ./ 有/ 研究者/ 可能/ 会/ 质疑/ ,/ 可/ 通过/ 构建/ 跨/ 局部/ 图/ 的/ API/ 依赖/ 连通/ 局部/ 图/ ,/ 从而/ 提升/ 系统/ 的/ 查全率/ ./ 然而/ ,/ 当/ 这些/ 局部/ 图/ 连通/ 后/ ,/ 文献/ [/ 3/ ]/ 所/ 提出/ 的/ 模型/ 将/ 与/ 全局/ 连通/ 图/ 模型/ 相似/ ,/ 仍会/ 带来/ “/ 弱/ DAG/ 机制/ ”/ 的/ 问题/ ./ 与/ 文献/ [/ 3/ ]/ 不同/ ,/ 文献/ [/ 5/ -/ 6/ ]/ 提出/ 的/ 每个/ 孤立/ 的/ 局部/ 图/ 存在/ 根据/ 语句/ 调用/ 次序/ 构建/ 的/ 边/ ./ 然而/ ,/ 在/ 局部/ 图/ 模型/ 中/ ,/ 图/ 与/ 图/ 之间/ 却/ 不会/ 存在/ 语句/ 调用/ 关系/ ./ 因此/ 文献/ [/ 5/ -/ 6/ ]/ 无法/ 实现/ 局部/ 非/ 连通/ 图/ 的/ “/ 连通/ ”/ ./ 此外/ ,/ 本文/ 还/ 注意/ 到/ 文献/ [/ 5/ ]/ 提出/ 了/ 一种/ 查询/ 分裂/ 的/ 技术/ ,/ 能够/ 实现/ 跨图/ 搜索/ ./ 但是/ 这一/ 技术/ 的/ 局限性/ 在于/ 跨图/ 搜索/ 的/ 载体/ 必须/ 为/ 根据/ 语句/ 控制流/ 构建/ 的/ 图/ 模型/ ./ 但是/ 由于/ 这类/ 图/ 模型/ 无法/ 表示/ API/ 之间/ 的/ 数据/ 依赖/ 关系/ ,/ 其/ 能够/ 描述/ 的/ 解/ 空间/ 有限/ ./ 因此/ ,/ 即使/ 采用/ 查询/ 分裂/ 技术/ ,/ 文献/ [/ 5/ ]/ 的/ 查全率/ 依然/ 有/ 提升/ 空间/ ./ 本文/ 在/ 实验/ 部分/ 对此/ 进行/ 了/ 验证/ ./ 综上/ ,/ 现有/ 工作/ 难以/ 兼顾/ 准确率/ 和/ 查全率/ ./ 2.2/ 其他/ 相关/ 工作/ 文献/ [/ 12/ -/ 20/ ]/ 根据/ 用户/ 的/ 需求/ 进行/ 代码/ 推荐/ ,/ 是/ 与/ 本文/ 较为/ 相关/ 的/ 研究/ 工作/ ./ CodeBroker/ [/ 12/ ]/ 和/ Strathcona/ [/ 13/ ]/ 首先/ 分析/ 用户/ Page5/ 正在/ 编辑/ 的/ 代码/ 来/ 抽取/ 上下文/ 信息/ ;/ 然后/ 从/ 代码/ 库中/ 查找/ 与/ 上下文/ 相似/ 的/ 代码/ 样例/ ./ 然而/ ,/ 这些/ 方法/ 的/ 输出/ 仅仅/ 是/ 与/ 上下文/ 信息/ 相似/ 的/ 代码/ 样例/ ,/ 而/ 不是/ 满足/ 对象/ 实例/ 化/ 查询/ 的/ 方法/ 调用/ 序列/ ./ 文献/ [/ 14/ -/ 18/ ]/ 利用/ 数据挖掘/ 技术/ 推荐/ 代码/ ./ 这些/ 方法/ 采用/ 关联/ 规则/ 挖掘/ [/ 14/ -/ 16/ ]/ 、/ 随机/ 游走/ [/ 17/ ]/ 、/ 时序/ 模式/ 挖掘/ [/ 18/ ]/ 等/ 策略/ 推荐/ 代码/ ./ 但是/ ,/ 这些/ 方法/ 的/ 输入/ 不/ 支持/ 对象/ 实例/ 化/ 查询/ ,/ 因此/ 不能/ 生成/ 满足要求/ 的/ 方法/ 调用/ 序列/ ./ 文献/ [/ 19/ -/ 20/ ]/ 采用/ 信息检索/ 技术/ 搜索/ 样例/ 代码/ ./ 通常/ ,/ 这些/ 工作/ 首先/ 对/ 代码/ 库中/ 的/ 源文件/ 进行/ 索引/ ;/ 然后/ 通过/ 信息检索/ 技术/ (/ 如/ 关键词/ 匹配/ )/ 来/ 查找/ 相关/ 的/ 代码/ 样例/ ./ 文献/ [/ 19/ ]/ 对/ 13/ 个/ 典型/ 的/ 代码/ 搜索引擎/ (/ 如/ Codease/ ①/ ,/ GoogleCodeSearch/ ②/ ,/ Krugle/ ③/ )/ 进行/ 了/ 对比/ ./ 然而/ ,/ 代码/ 搜索引擎/ 常/ 返回/ 海量/ 、/ 结构复杂/ 的/ 结果/ 页面/ ,/ 使/ 用户/ 很难/ 快速/ 地/ 定位/ 正确/ 解/ ./ 上文/ 介绍/ 了/ 相关/ 工作/ ,/ 接下来/ 阐述/ 本文/ 为/ 刻画/ 类库/ API/ 依赖/ 关系/ 所/ 构建/ 的/ 图/ 模型/ ,/ 本文/ 设计/ 的/ 搜索算法/ 将/ 根据/ 此图/ 进行/ 求解/ ./ 3/ 加权/ API/ 图/ 模型/ 3.1/ 相关/ 术语/ 介绍/ 本文/ 使用/ 的/ 相关/ 术语/ 及其/ 定义/ 见表/ 3/ ./ 术语/ 方法/ (/ mi/ )/ 服务质量/ QoS/ 查询/ R/ 方法/ 匹配/ 全局/ 服务质量/ GQoS3/ ./ 2WAG/ 图/ 模型/ 为/ 准确/ 地/ 表达/ 相关/ 类库/ 包含/ 的/ API/ 依赖/ 关系/ 以及/ API/ 历史/ 使用/ 信息/ ,/ 本文/ 设计/ 了/ 一个/ 新型/ 的/ 加权/ API/ 图/ 模型/ (/ WeightedAPIGraph/ ,/ WAG/ )/ G/ =/ (/ M/ ,/ E/ )/ 对/ API/ 依赖/ 关系/ 进行/ 建模/ ,/ 如图/ 3/ 所示/ ./ 本文/ 将/ 基于/ 此图/ 来/ 搜索/ 满足/ 对象/ 实例/ 化/ 查询/ 的/ 解/ ./ 在/ WAG/ 中/ ,/ 节点/ 集/ M/ 表示/ API/ 方法/ 集合/ ,/ / mk/ ∈/ M/ ,/ mk/ =/ (/ k/ ,/ I/ ,/ o/ ,/ ω/ )/ ./ 其中/ ,/ k/ 是/ 节点/ mk/ 的/ 标识/ ,/ I/ 和/ o/ 分别/ 表示/ mk/ 对应/ 方法/ 的/ 输入/ 参数/ 类型/ 集合/ 和/ 唯一/ 的/ 输出/ 参数/ 类型/ ./ mk/ 有/ 相应/ 的/ 权值/ (/ 即/ 方法/ 的/ QoS/ )/ ,/ 由/ 加权/ 函数/ ω/ :/ M/ →/ R/ 给出/ ./ 有/ 向/ 边集/ E/ 表示/ 方法/ 匹配/ 集合/ ,/ 该/ 集合/ 满足/ :/ / ek/ ∈/ E/ ,/ ek/ =/ (/ mu/ ,/ mv/ ,/ tagek/ 其中/ ,/ mu/ 和/ mv/ 分别/ 是/ 边/ 的/ 头/ 结点/ (/ headnode/ )/ 和/ 尾/ 节点/ (/ tailnode/ )/ ,/ mu/ 是/ 的/ mv/ 直接/ 前继/ ,/ mv/ 是/ mu/ 的/ 直接/ 后继/ ,/ mu/ 对应/ 的/ 方法/ 匹配/ mv/ 对应/ 的/ 方法/ ./ ek/ 的/ 标记/ tagek/ (/ 1/ )/ tagek/ =/ mu/ ./ o/ ;/ (/ 2/ )/ tagek/ ∈/ mv/ ./ I/ ./ 需要/ 特别/ 指出/ ,/ 当/ 查询/ 请求/ R/ 发起/ 时/ ,/ 图/ 中将/ 动态/ 生成/ 临时/ 的/ 起始/ 节点/ Source/ 和/ 终/ 节点/ Destination/ ,/ 它们/ 满足/ :/ (/ 1/ )/ Source/ ./ I/ =/ / ∧/ Source/ ./ o/ =/ R/ ./ S/ ;/ (/ 2/ )/ Destination/ ./ I/ =/ R/ ./ D/ ∧/ Destination/ ./ o/ =/ null/ ./ 此外/ ,/ WAG/ 也/ 可以/ 处理/ 下述/ 两类/ 特殊/ 情形/ :/ 情形/ 1/ (/ 向上/ 转型/ )/ :/ 在/ 面向对象/ 的/ 编程语言/ 中/ (/ 如/ Java/ )/ ,/ 因为/ 向上/ 转型/ (/ 即将/ 子类/ 对象/ 转换/ 为/ 父类/ 对象/ )/ 为/ 永远/ 安全/ 的/ 操作/ ,/ 所以/ 尽管/ 有些/ 向上/ 转型/ 操作/ 未/ 在/ 相关/ 源代码/ 中/ 出现/ ,/ 本文/ 也/ 将/ 在/ 图/ 中/ 构建/ 表示/ 这/ 类/ 操作/ 的/ 节点/ ;/ 情形/ 2/ (/ 静态方法/ )/ :/ 由于/ 调用/ 静态方法/ 无需/ 输入/ 接收者/ 对象/ ,/ 当/ 查询/ 请求/ 发起/ 时/ ,/ 将/ 构建/ 从/ 起始/ 点到/ 静态方法/ 对应/ 节点/ 的/ 边/ ./ 3.3/ 图/ 性质/ 与/ 经典/ 图论/ 的/ 节点/ 可达性/ 不同/ ,/ WAG/ 图/ 的/ 节点/ 可达性/ 如下/ ./ 定义/ 1/ ./ 节点/ 的/ 可达性/ ./ 给定/ WAG/ 图/ G/ =/ (/ M/ ,/ E/ )/ ,/ 在/ 一次/ 从/ 起始/ 节点/ Source/ 开始/ 的/ 搜索/ 过程/ 中/ ,/ / mi/ ∈/ M/ ,/ mi/ 可达/ 当且/ 仅/ 当/ / inputi/ ∈/ mi/ ./ I/ ,/ / pi/ =/ 〈/ Source/ ,/ …/ ,/ mi/ -/ 1/ ,/ mi/ 〉/ ,/ 使得/ 路径/ pi/ 中/ 的/ 边/ e/ =/ (/ mi/ -/ 1/ ,/ mi/ ,/ tage/ )/ 满足/ tage/ =/ inputi/ ./ ①/ ②/ ③/ ④/ I/ 表示/ 包含/ 输入/ 参数/ 的/ 集合/ ,/ 而/ 使用/ 小写字母/ o/ 表示/ 单个/ 返/ Page6/ 在/ 定义/ 1/ 中/ ,/ 一个/ 节点/ mi/ 可达/ ,/ 不仅/ 要求/ 从/ Source/ 到/ mi/ 存在/ 路径/ ,/ 而且/ 要求/ 存在/ 从/ Source/ 到/ mi/ 的/ 路径/ 集合/ ,/ 使得/ 该/ 路径/ 集合/ 必须/ 包含/ mi/ 的/ 全部/ 输入/ 类型/ 作为/ Tag/ 的/ 入边/ ./ 这/ 不同于/ 经典/ 图论/ 的/ 节点/ 可达性/ ./ 在/ 经典/ 图论/ 中/ ,/ 判断/ 一个/ 节点/ mi/ 是否/ 可/ 达/ ,/ 只/ 需/ 判断/ 从/ Source/ 到/ mi/ 是否/ 存在/ 路径/ 即可/ ./ 基于/ WAG/ 图/ 的/ 搜索算法/ 在/ 访问/ 节点/ 时/ 遵循/ 如下/ 原则/ :/ 若/ 一个/ 节点/ mi/ 可达/ ,/ 则/ 可/ 访问/ mi/ 的/ 后继/ 节点/ ;/ 否则/ ,/ 不能/ 访问/ ./ 特别/ 地/ ,/ 当/ 在/ WAG/ 图上/ 进行/ 搜索/ 时/ ,/ 可/ 访问/ mi/ 的/ 后继/ 节点/ 的/ 含义/ 为/ :/ 可/ 调用/ mi/ 对应/ 的/ API/ 方法/ 获取/ mi/ 输出/ 类型/ 的/ 对象/ ./ 因此/ ,/ 当/ mi/ 输入/ 类型/ 的/ 对象/ 还/ 未/ 被/ 全部/ 获取/ 时/ ,/ 定义/ 1/ 中/ 的/ 可达性/ 能够/ 避免/ 错误/ 地/ 调用/ 该/ 方法/ 获取/ 其/ 输出/ 类型/ 的/ 对象/ ./ 例如/ ,/ 在/ 图/ 3/ 中/ ,/ 当/ 从/ Source/ 开始/ 搜索/ 时/ ,/ 首先/ 找到/ 路径/ p/ =/ 〈/ Source/ ,/ m1/ ,/ m2/ ,/ m4/ 〉/ ./ 然而/ ,/ 此时/ m4/ 并/ 不可/ 达/ ./ 原因/ 在于/ m4/ 的/ 另外/ 一个/ 输入/ 类型/ D/ 作为/ Tag/ 的/ 入边/ 未/ 被/ p/ 包含/ ./ 需要/ 指出/ ,/ 在/ 传统/ 的/ 全局/ 连通/ 图/ 模型/ 中/ ,/ 其/ 节点/ 的/ 可达/ 性质/ 与/ 经典/ 图论/ 相同/ :/ 对于/ 任意/ 节点/ mi/ ,/ 当/ 存在/ 从/ 起始/ 节点/ 到/ mi/ 的/ 路径/ 时/ ,/ mi/ 即为/ 可达/ ./ 它/ 不能/ 保证/ 被/ 调用/ 的/ API/ 方法/ 的/ 所有/ 输入/ 类型/ 均/ 已/ 被/ 实例/ 化/ ./ 例如/ ,/ 在/ 图/ 2/ (/ a/ )/ 中/ ,/ 当/ 从/ 节点/ C/ 开始/ 搜索/ 时/ ,/ 尽管/ 可/ 通过/ 访问/ 边/ C/ ./ m4/ 使得/ 节点/ E/ 可达/ ,/ 但是/ 此时/ API/ 方法/ C/ ./ m4/ 的/ 另外/ 一个/ 输入/ D/ 还/ 未/ 被/ 实例/ 化/ ,/ 从而/ 将/ 导致/ 自由/ 变量/ 的/ 出现/ ./ 根据/ 第/ 1/ 节中/ 的/ 分析/ 可知/ ,/ 这/ 将/ 引发/ “/ 弱/ DAG/ 机制/ ”/ 问题/ ,/ 因此/ 会/ 显著/ 影响/ 相关/ 系统/ 的/ 准确率/ ./ 综上所述/ ,/ 与/ 现有/ 全局/ 连通/ 图/ 模型/ 相比/ ,/ 本文/ 提出/ 的/ WAG/ 模型/ 能够/ 更/ 准确/ 地/ 描述/ API/ 方法/ 能否/ 被/ 调用/ ,/ 因此/ 可以/ 基于/ WAG/ 及其/ 节点/ 可/ 达/ 性质/ 设计/ 新/ 的/ 搜索算法/ 来/ 提高/ 系统/ 的/ 准确性/ ./ 可见/ ,/ 在/ 对象/ 实例/ 化/ 领域/ ,/ 加权/ API/ 图/ 模型/ 的/ 提出/ 弥补/ 了/ 现有/ 全局/ 连通/ 图/ 模型/ 的/ 不足/ ,/ 是/ 本文/ 的/ 一个/ 主要/ 创新/ ./ 3.4/ 问题/ 定义/ 给定/ 查询/ 请求/ R/ ,/ 本文/ 将/ 其/ 对应/ 的/ 对象/ 实例/ 化/ 问题/ 转化/ 为/ 基于/ WAG/ 模型/ 的/ Top/ -/ K/ 子图/ 查询/ 问题/ ./ 定义/ 2/ ./ Top/ -/ K/ 子图/ 查询/ 问题/ ./ 给定/ 查询/ 请求/ R/ 和/ WAG/ 图/ G/ =/ (/ M/ ,/ E/ )/ ,/ 加权/ 函数/ ω/ :/ M/ →/ R/ 表示/ 从/ 节点/ 集合/ 到/ 实数/ 集合/ 的/ 映射/ ./ 子图/ 集合/ SGAll/ 表示/ 所有/ 满足/ R/ 的/ 方法/ 调用/ 序列/ 对应/ 子图/ 的/ 集合/ ./ SGAll/ 中/ 的/ 每个/ 子图/ 定义/ 了/ 其/ 蕴含/ 的/ 方法/ (/ m1/ ,/ m2/ ,/ …/ ,/ mn/ )/ 的/ 一个/ 调用/ 结构/ ,/ 这些/ 方法/ 满足/ 如下/ 关系/ :/ (/ 1/ )/ mi/ ./ I/ / ∪/ (/ 2/ )/ R/ ./ D/ / ∪/ 子图/ SGi/ 的/ 权重/ 值/ 是/ 指/ SGi/ 包含/ 节点/ 的/ 权重/ 值/ 的/ 聚合/ 值/ :/ ω/ (/ SGi/ )/ =/ SGi/ ./ GQoS/ ./ 定义/ 最优/ 子图/ SG/ 的/ GQoS/ 为/ δ/ =/ Min/ {/ ω/ (/ SGi/ )/ |/ SGi/ ∈/ SGALL/ }/ ./ SGAll/ 中/ 的/ 最优/ 子图/ 定义/ 为/ 权重/ ω/ (/ SGi/ )/ =/ δ/ 的/ 任何/ 子图/ ./ Top/ -/ K/ 子图/ 集合/ SGTop/ -/ K/ 表示/ SGAll/ 中/ 权重/ 值/ 最优/ 的/ K/ 个子/ 图/ 组成/ 的/ 集合/ ,/ 它们/ 满足/ :/ (/ 3/ )/ Max/ {/ ω/ (/ SG/ )/ |/ SG/ ∈/ SGTop/ -/ K/ }/ / Min/ {/ ω/ (/ SG/ )/ |/ SG/ ∈/ SGAll/ -/ SGTop/ -/ K/ }/ ./ 由/ 上述/ 定义/ 可知/ ,/ 在/ WAG/ 图中/ 找出/ 满足/ 查询/ 请求/ R/ 的/ 前/ K/ 个/ GoS/ 最优/ 子图/ 的/ 问题/ 等价/ 于/ Top/ -/ K/ 子图/ 查询/ 问题/ ./ 本文/ 将/ 在/ 第/ 5/ 节/ 详细/ 阐述/ Top/ -/ K/ 子图/ 查询/ 问题/ 的/ 图/ 搜索算法/ ./ 此外/ ,/ 本文/ 的/ 目标/ 子图/ 是/ 一个个/ DAG/ 形式/ 的/ 解/ ,/ 只有/ 在/ 特殊/ 情况/ 下/ 才/ 是/ 链状/ 解/ (/ 子图/ 中/ 所有/ 方法/ 的/ 输入/ 参数均/ 为/ 一个/ )/ ./ 例/ 1/ ./ 以图/ 3/ 为例/ ,/ 给定/ 对象/ 实例/ 化/ 查询/ (/ A/ ,/ D/ )/ ,/ 图中/ 矩形框/ 内/ 的/ 图/ 可/ 作为/ 一个/ DAG/ 形式/ 的/ 解/ ./ 3.5/ QoS/ 类型/ 与/ 计算/ 规则/ WAG/ 中子/ 图/ GQoS/ 的/ 计算/ 规则/ 将/ 在/ 本/ 小节/ 进行/ 说明/ ./ 该/ 计算/ 规则/ 与/ QoS/ 类型/ 和/ 调用/ 模式/ 相关/ ./ 3.5/ ./ 1QoS/ 类型/ 文献/ [/ 21/ -/ 22/ ]/ 定义/ 了/ 两类/ QoS/ :/ (/ 1/ )/ 否定/ 型/ ,/ 即/ QoS/ 值越/ 大/ ,/ 服务质量/ 越差/ ,/ 比如/ 响应/ 时间/ 和/ 价格/ ;/ (/ 2/ )/ 肯定/ 型/ ,/ 即/ QoS/ 值越/ 大/ 、/ 服务质量/ 越/ 好/ ,/ 比如/ 吞吐量/ 和/ 声誉/ ./ 同时/ ,/ 为了/ 对/ 多个/ QoS/ 进行/ 统一/ 度量/ ,/ 按照/ 度量/ 方式/ 的/ 不同/ 又/ 可/ 把/ QoS/ 分为/ 以下/ 4/ 种/ 类型/ :/ (/ 1/ )/ 累加/ 型/ ,/ 如/ 使用/ 次数/ ,/ 两个/ API/ 总/ 的/ 使用/ 次数/ 由/ 两个/ API/ 各自/ 的/ 使用/ 次数/ 累加/ 得到/ ;/ (/ 2/ )/ 最小值/ 型/ ,/ 如/ 吞吐量/ ,/ 两个/ 顺序调用/ 的/ API/ 处理/ 数据/ 的/ 全局/ 吞吐量/ ,/ 由/ 具有/ 最小/ 吞吐量/ 的/ API/ 决定/ ;/ (/ 3/ )/ 乘积/ 型/ ,/ 如/ 声誉/ 、/ 可靠性/ ;/ (/ 4/ )/ 最大值/ 型/ ./ 在/ 本文/ 中/ ,/ 方法/ 的/ QoS/ 将/ 利用/ API/ 方法/ 在/ 相关/ 项目/ 中/ 的/ 使用/ 次数/ 进行/ 计算/ ./ 式/ (/ 1/ )/ 给出/ 了/ 具体/ 的/ 计算/ 方式/ :/ mi/ ./ QoS/ =/ Log/ 烄/ 烅/ 烆/ +/ ,/ 在/ 式/ (/ 1/ )/ 中/ ,/ mi/ ./ Count/ 表示/ 方法/ mi/ 的/ 在/ 相关/ 项目/ 中/ 被/ 使用/ 的/ 次数/ ,/ Max/ 和/ Min/ 分别/ 表示/ 所有/ 方法/ 中/ ,/ 被/ 使用/ 的/ 最大/ 次数/ 和/ 最小/ 次数/ ./ 本质/ 上/ ,/ 式/ (/ 1/ )/ 计算/ 出/ 的/ QoS/ 值/ 是/ 方法/ 调用/ 次数/ 的/ 正则/ 化/ 形式/ ./ 因为/ Page7/ 方法/ 的/ QoS/ 越小/ 表明/ 方法/ 被/ 使用/ 的/ 频率/ 越高/ ,/ 被/ 采纳/ 的/ 可能性/ 也/ 越/ 高/ ,/ 所以/ QoS/ 越/ 小/ 的/ 方法/ 服务质量/ 越优/ ,/ 反之/ 越差/ ./ 因此/ ,/ 本文/ 设计/ 的/ QoS/ 属于/ 否定/ 型/ ./ 3.5/ ./ 2GQoS/ 计算/ 规则/ GQoS/ 的/ 计算/ 规则/ 由图/ 的/ 组合/ 模式/ 和/ QoS/ 类型/ 共同/ 决定/ ./ 在/ 组合/ 模式/ 方面/ ,/ WAG/ 模型/ 中/ 包含/ 的/ 原子结构/ 可/ 被/ 顺序/ 、/ 合并/ 和/ 分叉/ 3/ 种/ 组合/ 模式/ 充分/ 描述/ ,/ 如图/ 4/ 所示/ ./ 在/ QoS/ 类型/ 方面/ ,/ 本文/ 定义/ 的/ QoS/ 表示/ API/ 的/ 调用/ 次数/ ,/ 适用/ 于/ 累加/ 型/ 度量/ 标准/ ./ 据此/ 可定义/ 相关/ 组合/ 模式/ 的/ GQoS/ 计算/ 规则/ ,/ 如表/ 4/ 所示/ ./ 模式/ 顺序/ 合并/ 分叉/ 在/ 顺序/ 模式/ 中/ ,/ 因为/ 节点/ 依次/ 被/ 顺序调用/ ,/ 所以/ 采用/ 累加/ 型函数/ 计算/ GQoS/ 聚合/ 值/ ./ 即/ 最后/ 一个/ 被/ 调用/ 节点/ m/ 的/ 由/ 其/ 所有/ 前驱/ 的/ QoS/ 和/ 其/ 自身/ 的/ QoS/ 累加/ 得到/ ./ 在/ 合并/ 模式/ 中/ ,/ 当/ m1/ -/ mn/ 均/ 已/ 能够/ 被/ 调用/ 时/ ,/ 才/ 可/ 调用/ 节点/ m/ ./ 在/ 本文/ 中/ ,/ m/ 的/ GQoS/ 由/ m1/ -/ mn/ 中/ GQoS/ 质量/ 最差/ 的/ 节点/ 决定/ ,/ 同时/ 又/ 因为/ 节点/ 的/ QoS/ 属于/ 否定/ 型/ ,/ 所以/ 采用/ 最大值/ 函数/ 和/ 累加/ 型函数/ 计算/ GQoS/ 聚合/ 值/ ./ 即/ 合并/ 节点/ m/ 的/ GQoS/ 是/ 所有/ 前驱/ GQoS/ 的/ 最大值/ 与其/ 自身/ QoS/ 之/ 和/ ./ 在/ 分叉/ 模式/ 中/ ,/ 当/ m/ 能/ 被/ 调用/ 时/ ,/ 则/ 可/ 调用/ 其/ 分支/ 节点/ m1/ -/ mn/ 中/ 的/ 任一/ 节点/ ./ 因此/ 可/ 采用/ 累加/ 型函数/ 计算/ GQoS/ 聚合/ 值/ ,/ 即/ 分支/ 节点/ 的/ GQoS/ 由/ 其/ 分叉/ 节点/ m/ 的/ GQoS/ 和/ 其/ 自身/ 的/ QoS/ 累加/ 得到/ ./ 例/ 2/ ./ 以图/ 3/ 为例/ ,/ 利用/ 表/ 4/ 中/ 的/ GQoS/ 计算/ 规则/ 可得/ m4/ ./ GQoS/ =/ ∑/ (/ max/ {/ m2/ ./ GQoS/ ,/ m3/ ./ GQoS/ }/ ,/ m4/ ./ QoS/ )/ 需要/ 指出/ ,/ WAG/ 图中/ 任意子/ 图/ SGi/ 的/ GQoS/ 是/ 根据/ SGi/ 中/ 所有/ 节点/ QoS/ 按照/ 指定/ 规则/ 计算/ 出/ 的/ 聚合/ 值/ ./ 该值/ 最终/ 等于/ SGi/ 中/ 终结/ 点/ 的/ GQoS/ ./ 4APISynth/ 系统/ 概述/ 本文/ 设计/ 并/ 实现/ 了/ APISynth/ 系统/ ,/ 该/ 系统/ 实现/ 了/ Top/ -/ KDAG/ 图/ 搜索算法/ ./ 如图/ 5/ 所示/ ,/ APISynth/ 包括/ 图/ 构建/ 模块/ 、/ 解/ 搜索/ 模块/ 和/ 结果/ 排序/ 模块/ ./ 图/ 构建/ 模块/ 负责/ 分析/ 类库/ 源码/ 并/ 构建/ WAG/ 模型/ ,/ 包括/ 代码/ 分析器/ 和/ 图/ 模型/ 构建/ 器/ ./ 代码/ 分析器/ 负责/ 分析/ 源代码/ ,/ 生成/ API/ 依赖/ 信息/ 和/ QoS/ 信息/ ./ 软件/ 分析/ 技术/ 可/ 分为/ 静态/ 分析/ 和/ 动态分析/ 两类/ [/ 22/ ]/ ./ 借助/ 工具/ Spoon/ ①/ 和/ Javassit/ ②/ ,/ 本文/ 对/ 类库/ 源码/ 进行/ 了/ 静态/ 分析/ ,/ 抽取/ 其中/ 的/ API/ 依赖/ 关系/ ./ 图/ 模型/ 构建/ 器则/ 负责/ 构建/ WAG/ 模型/ ./ 解/ 搜索/ 模块/ 完成/ Top/ -/ K/ 子图/ 查询/ ,/ 包括/ 关键/ 路径/ 搜索器/ 和/ DAG/ 构建/ 器/ ./ 前者/ 负责/ 生成/ 关键/ 路径/ ./ 后者/ 负责/ 构建/ 每/ 一条/ 关键/ 路径/ 对应/ 的/ DAG/ ./ 结果/ 排序/ 模块/ 使用/ 排序/ 处理器/ 对/ 推荐/ 结果/ 进行/ 排序/ ./ 下文/ 将/ 分别/ 对/ 3/ 个/ 模块/ 中/ 的/ 工作/ 进行/ 介绍/ ./ 4.1/ WAG/ 图/ 的/ 存储/ 结构/ 及/ 构建/ 鉴于/ WAG/ 图/ 的/ 特殊/ 结构/ 和/ 新/ 的/ 节点/ 可/ 达/ 性质/ ,/ 为/ 提高/ 搜索算法/ 的/ 效率/ ,/ 本文/ 未/ 使用/ 经典/ 的/ 图/ 存储/ 结构/ ,/ 如/ 邻接/ 表/ 或/ 邻接矩阵/ 表示/ WAG/ ,/ 而是/ 设计/ 了/ 新型/ 的/ 存储/ 结构/ ,/ 如图/ 6/ 所示/ ,/ 包括/ 节点/ 表/ ,/ 倒排/ 索引/ 表和可/ 触发/ 参数表/ ./ ①/ ②/ Page8/ 节点/ 表/ 用来/ 存储/ 节点/ 及其/ 相关/ 信息/ ./ 本文/ 使用/ 五元/ 组/ 表示/ 节点/ ,/ 具体/ 形式/ 为/ {/ mi/ ,/ Imi/ ,/ Omi/ ,/ selfQoS/ ,/ GQoS/ ,/ Number/ ,/ Status/ }/ ./ 其中/ ,/ mi/ 是/ 节点/ 的/ 标识/ ;/ Imi/ 和/ Omi/ 分别/ 表示/ 节点/ 的/ 输入/ 参数/ 集/ 和/ 输出/ 参数/ 集/ ;/ selfQoS/ 表示/ 节点/ 自身/ 的/ QoS/ ;/ GQoS/ 表示/ 从/ 起始/ 节点/ 到/ 当前/ 节点/ 的/ 全局/ QoS/ ;/ Number/ 用于/ 记录/ 节点/ 需要/ 被/ 实例/ 化/ 的/ 输入/ 参数/ 的/ 个数/ ,/ 初始值/ 为/ 节点/ 输入/ 参数/ 集/ 的/ 大小/ ;/ Status/ 表示/ 节点/ 的/ 可达/ 状态/ ,/ 默认/ 状态/ 为/ 不可/ 达/ ,/ 记为/ disabled/ ./ 在/ 搜索/ 过程/ 中/ ,/ 当/ Number/ 变为/ 0/ 时/ ,/ 将/ Status/ 置/ 为/ enabled/ ,/ 表示/ 节点/ 可达/ ./ 需要/ 指出/ ,/ GQoS/ 、/ Number/ 和/ Status/ 将/ 在/ 搜索/ 过程/ 中/ 动态/ 更新/ (/ 见/ 第/ 5/ 节/ )/ ./ 倒排/ 索引/ 表/ 用来/ 表示/ 和/ 存储/ WAG/ ./ 表中/ 的/ 项为/ 键值/ 对/ (/ 参数/ ,/ 节点/ 集/ )/ ./ 其中/ ,/ 键为/ 参数/ ,/ 其值/ 为/ 需要/ 该/ 参数/ 作为/ 输入/ 的/ 节点/ 集合/ ./ 倒排/ 索引/ 表/ 的/ 使用/ 能/ 极大/ 提高/ Top/ -/ K/ 子图/ 的/ 搜索/ 效率/ ./ 尽管/ 与/ 传统/ 的/ 邻接/ 表/ 和/ 邻接矩阵/ 相比/ ,/ 使用/ 倒排/ 索引/ 表/ 存储/ 图/ 将/ 耗费/ 更/ 多/ 的/ 内存空间/ ,/ 然而/ 这/ 对/ 主流/ 计算机/ 并/ 不/ 构成/ 挑战性/ 问题/ ./ 本文/ 将/ 在/ 6.3/ ./ 3/ 小节/ 对此/ 进行/ 讨论/ ./ 可/ 触发/ 参数表/ (/ ReachablePreconditionTable/ ,/ RPT/ )/ 用来/ 存储/ 搜索/ 过程/ 中可达/ 节点/ 的/ 输入/ 参数/ 及其/ 最优/ 提供者/ 的/ 相关/ 信息/ ./ 4.2/ Top/ -/ 犓/ 子/ 图/ 搜索/ 本/ 小节/ 阐述/ Top/ -/ KDAG/ 图/ 搜索算法/ ,/ 它/ 能/ 直接/ 求取/ DAG/ 形式/ 解/ ,/ 而/ 不仅仅/ 是/ 传统/ 最短/ 路径/ 算法/ 求取/ 的/ 链状/ 解/ ./ 因此/ ,/ 基于/ Top/ -/ KDAG/ 搜索算法/ 的/ APISynth/ 系统/ 无需/ 人工干预/ ,/ 可/ 自动/ 地/ 完成/ 对象/ 实例/ 化解/ 的/ 推荐/ ./ 对于/ DAG/ 形式/ 的/ 子/ 图/ ,/ 本文/ 作者/ 观察/ 到/ 其/ 包含/ 一条/ 特殊/ 路径/ p/ ,/ 满足/ p/ ./ GQoS/ =/ DAG/ ./ GQoS/ ./ p/ 被/ 称为/ 次/ DAG/ 的/ 关键/ 路径/ ./ 受此/ 启发/ ,/ 算法/ 首先/ 生成/ 关键/ 路径/ ;/ 然后/ 基于/ 关键/ 路径/ 构建/ DAG/ 图/ 形式/ 的/ 解/ ./ 因此/ ,/ Top/ -/ K/ 子图/ 查询/ 问题/ 简化/ 为/ 求取/ Top/ -/ K/ 条/ 关键/ 路径/ ./ 根据/ 以上/ 分析/ ,/ 本文/ 需要/ 解决/ 如下/ 问题/ :/ (/ 1/ )/ 如何/ 在/ 未知/ DAG/ 的/ 情况/ 下/ 求取/ 关键/ 路径/ ?/ (/ 2/ )/ 如何/ 根据/ 关键/ 路径/ 构建/ DAG/ ,/ 并/ 保证/ DAG/ 全局/ 服务质量/ 的/ 最优性/ 以及/ DAG/ 中/ 的/ 节点均/ 满足/ 定义/ 1/ 中/ 的/ 可达/ 性质/ ?/ (/ 3/ )/ 如何/ 求取/ 更/ 多条/ 关键/ 路径/ 以/ 获得/ K/ 个/ GQoS/ 最优/ 的/ DAG/ ?/ Top/ -/ KDAG/ 搜索算法/ 通过/ 4/ 个/ 主要/ 步骤/ 解决/ 上述/ 问题/ ,/ 如图/ 7/ 所示/ (/ 算法/ 细节/ 见/ 第/ 5/ 节/ )/ ./ (/ 1/ )/ 执行/ 一次/ 从/ Source/ 节点/ 开始/ 的/ 前/ 向搜索/ ,/ 在/ 搜索/ 过程/ 中/ 确认/ 所有/ 可达/ 的/ 节点/ ,/ 并/ 记录/ 可/ 达/ 节点/ 相关/ 的/ 信息/ ,/ 如/ GQoS/ 和/ 节点/ 输入/ 的/ 最优/ 提供者/ ./ (/ 2/ )/ 根据/ 步/ 1/ 中/ 记录/ 的/ 信息/ ,/ 执行/ 一次/ 从/ Desti/ -/ nation/ 节点/ 开始/ 的/ 后/ 向搜索/ ,/ 求/ 取出/ GQoS/ 最优/ 的/ 关键/ 路径/ kpopt/ ,/ 并/ 将/ 其/ 放入/ 优先/ 队列/ 中/ ./ (/ 3/ )/ 弹/ 出/ 优先/ 队列/ 中/ 的/ 关键/ 路径/ ,/ 并/ 利用/ 其/ 构建/ DAG/ ./ 如果/ DAG/ 的/ 数量/ 小于/ 设定/ 的/ 阈值/ ,/ 则/ 执行/ 步/ 4/ ;/ 否则/ ,/ 终止/ ./ (/ 4/ )/ 对/ 当前/ 弹出/ 的/ 关键/ 路径/ 使用/ “/ 松弛/ ”/ 操作/ 来/ 生成/ 其他/ GQoS/ 较差/ 的/ 关键/ 路径/ ./ 然后/ 返回/ 步/ 3/ 以/ 生成/ 更/ 多/ 的/ DAG/ ./ 4.3/ 结果/ 排序/ 为/ 减少/ 开发人员/ 检查/ 结果/ 的/ 次数/ ,/ 需要/ 对/ 候选/ 结果/ 进行/ 排序/ ,/ 将/ 优越/ 的/ 结果/ 推荐/ 给/ 开发人员/ ./ 本文/ 采用/ 4/ 个/ 度量/ 标准/ 对/ 结果/ 进行/ 评价/ ,/ 包括/ GQoS/ 、/ 节点/ 个数/ 、/ 边数/ 和/ 直径/ (/ 关键/ 路径/ 的/ 长度/ )/ ①/ ./ 本文/ 使用/ 的/ 排序/ 准则/ 为/ 上述/ 4/ 个/ 度量/ 值越/ 小/ ,/ 结果/ 排名/ 越高/ ./ 其/ 合理性/ 体现/ 为/ :/ (/ 1/ )/ GQoS/ 反映/ 了/ 一个/ 子图/ 对应/ 方法/ 调用/ 序列/ 的/ 总体/ 使用/ 频率/ ,/ 而/ 优先选择/ 较常/ 使用/ 的/ 代码/ 是/ 编程人员/ 的/ 共识/ [/ 3/ ]/ ;/ (/ 2/ )/ 其余/ ①/ 可/ 根据/ 需要/ 将/ 4/ 个/ 度量/ 标准/ 扩展/ 至/ 更/ 多个/ ./ Page93/ 个/ 度量/ 标准/ 反映/ 了/ 一个/ 子图/ 对应/ 代码/ 的/ 数量/ (/ 度量/ 值越/ 小/ ,/ 代码/ 量/ 越/ 小/ )/ ./ 据统计/ ,/ 编程人员/ 倾向/ 使用/ 代码/ 量/ 小/ 的/ 方案/ [/ 2/ -/ 3/ ]/ ./ 传统/ 方法/ [/ 2/ -/ 3/ ,/ 5/ -/ 6/ ]/ 仅/ 采用/ 路径/ 长度/ 来/ 评价/ 结果/ 的/ 代码/ 长度/ ./ 与/ 之/ 不同/ ,/ 本文/ 综合/ 考虑/ 了/ 待/ 评价/ 结果/ 中/ 包含/ 的/ 节点/ 、/ 边/ 和/ 直径/ 等/ 信息/ ,/ 因此/ 可令/ DAG/ 图/ 形式/ 解/ 的/ 优劣/ 得到/ 更/ 全面/ 、/ 准确/ 地/ 反映/ ./ 本质/ 上/ ,/ 此处/ 的/ 排序/ 问题/ 是/ 一个多/ 对象/ 多/ 属性/ 的/ 排序/ 问题/ ./ 这/ 与/ 数据库/ 领域/ 的/ 多维/ 排序/ 类似/ ./ 因此/ ,/ 本文/ 的/ 排序/ 算法/ 可/ 借鉴/ 经典/ 的/ 多维/ 数据/ 集/ 排序/ 算法/ —/ —/ —/ Fagin/ 算法/ [/ 23/ ]/ ./ 算法/ 流程/ 如图/ 8/ 所示/ ./ 首先/ ,/ 计算/ DAG/ 形式/ 解/ 的/ 4/ 个/ 度量/ 值/ (/ Criteria1/ ~/ Criteria4/ )/ ,/ 并/ 分别/ 根据/ 不同/ 的/ 度量/ 标准/ 对/ 结果/ 进行/ 排序/ (/ 为/ 提高效率/ ,/ 该/ 过程/ 可/ 并行执行/ )/ ./ 式/ (/ 2/ )/ 定义/ 了/ DAG/ 图/ 形式/ 解/ SGi/ 度量/ 值/ 的/ 计算/ 规则/ :/ SGi/ ./ Score/ =/ 烄/ SGi/ ./ Ck/ -/ Min/ {/ Ck/ }/ Max/ {/ Ck/ }/ -/ Min/ {/ Ck/ }/ 烅/ 1/ ,/ 烆/ 其中/ ,/ Ck/ (/ k/ ∈/ 1/ ,/ 2/ ,/ 3/ ,/ 4/ )/ 表示/ 相应/ 的/ 度量/ 标准/ 的/ 得分/ ./ Max/ (/ Ck/ )/ 和/ Min/ (/ Ck/ )/ 分别/ 表示/ 所有/ 结果/ 中/ Ck/ 度量/ 标准/ 的/ 最大/ 得分/ 和/ 最小/ 得分/ ./ 其次/ ,/ 生成/ 各/ 度量/ 标准/ 的/ 评分表/ (/ List1/ ~/ List4/ )/ ,/ 并/ 计算/ 聚合/ 值得/ 到/ 最终/ 评分/ :/ 其中/ ,/ 权值/ ω/ 满足/ ∑/ 5Top/ -/ 犓/ DAG/ 搜索算法/ 详解/ 本/ 节/ 详细/ 阐述/ Top/ -/ KDAG/ 搜索算法/ ./ 它/ 包括/ 3/ 个/ 核心/ 模块/ :/ (/ 1/ )/ 最优/ 关键/ 路径/ 求取/ ①/ ;/ (/ 2/ )/ 如何/ 根据/ 关键/ 路径/ 构建/ DAG/ ;/ (/ 3/ )/ 如何/ 通过/ 对/ 当前/ 关键/ 路径/ 进行/ 松弛/ 操作/ ,/ 生成/ 新/ 的/ 关键/ 路径/ ./ 5.1/ 最优/ 关键/ 路径/ 求取/ (/ 步/ 1/ ~/ 2/ )/ 算法/ 的/ 前/ 两步/ 旨在/ 求取/ GQoS/ 最优/ 的/ 关键/ 路径/ ./ 为此/ ,/ 本文/ 实现/ 了/ Sim/ -/ Dijkstra/ 算法/ ./ 算法/ 的/ 基本/ 思想/ 是/ :/ (/ 1/ )/ 根据/ 查询/ 请求/ ,/ 执行/ 一次/ 从/ 端点/ Source/ 到/ 端点/ Destination/ 的/ 前/ 向搜索/ ,/ 找出/ 两端/ 点/ 之间/ 所有/ 可达/ 的/ 节点/ ;/ (/ 2/ )/ 将/ 每个/ 可/ 达/ 节点/ 输入/ 的/ 最优/ 提供者/ 记录/ 到/ 可/ 触发/ 参数表/ RPT/ 中/ ;/ (/ 3/ )/ 当前/ 向搜索/ 结束/ 后/ ,/ 发起/ 一次/ 后/ 向搜索/ 过程/ Backward/ -/ KP/ 求取/ 最优/ 关键/ 路径/ ./ 5.1/ ./ 1/ 相关/ 概念/ 定义/ 3/ ./ 节点/ 输入/ 的/ 最优/ 提供者/ ./ 即该/ 节点/ 所有/ 可/ 达/ 前驱/ 中/ ,/ 提供/ 该/ 输入/ 且/ GQoS/ 最小/ 的/ 前驱/ 结点/ ./ 其/ 形式化/ 定义/ 如下/ :/ 给定/ WAG/ 图/ G/ =/ (/ M/ ,/ E/ )/ ,/ / mi/ ∈/ M/ ,/ / inputi/ ∈/ mi/ ./ I/ ,/ inputi/ 的/ 最优/ 提供者/ 为/ popt/ ,/ popt/ ∈/ M/ ,/ 当且/ 仅/ 当/ popt/ 满足/ :/ (/ 1/ )/ popt/ ./ status/ =/ enabled/ ;/ (/ 2/ )/ popt/ ./ o/ =/ inputi/ ;/ (/ 3/ )/ popt/ ./ GQoS/ =/ Min/ {/ m/ ./ GQoS/ |/ m/ ∈/ M/ ∧/ m/ ./ o/ =/ inputi/ ∧/ m/ ./ status/ =/ enabled/ }/ ./ 定义/ 4/ ./ 关键/ 前驱/ ./ 即/ 某/ 节点/ 所有/ 输入/ 的/ 最优/ 提供者/ 中/ GQoS/ 最大/ 的/ 那个/ 最优/ 提供者/ ./ 其/ 形式化/ 定义/ 如下/ :/ 给定/ WAG/ 图/ G/ =/ (/ M/ ,/ E/ )/ ,/ / mi/ ∈/ M/ ,/ 节点/ Mi/ 的/ 关键/ 前驱/ 定义/ 为/ π/ (/ mi/ )/ =/ mkp/ ,/ 当且/ 仅/ 当/ 节点/ mkp/ 满足/ :/ (/ 1/ )/ mkp/ ∈/ M/ ;/ (/ 2/ )/ mkp/ ./ o/ ∈/ mi/ ./ I/ ;/ (/ 3/ )/ mkp/ ./ GQoS/ =/ Max/ {/ inputi/ ./ popt/ ./ GQoS/ |/ inputi/ ∈/ mi/ ./ I/ }/ ./ 例/ 3/ ./ 以图/ 3/ 为例/ ,/ 对于/ m4/ 的/ 两个/ 输入/ C/ 和/ D/ ,/ 它们/ 对应/ 的/ 最优/ 提供者/ 分别/ 为/ m4/ 的/ 前驱/ m2/ 和/ m3/ ./ 并且/ 有/ (/ m2/ ./ GQoS/ =/ 4.5/ +/ 3.7/ =/ 8.2/ )/ >/ (/ m3/ ./ GQoS/ =/ 7.2/ )/ ./ 由此可知/ ,/ m2/ 是/ m4/ 的/ 关键/ 前驱/ ./ 定义/ 5/ ./ 关键/ 路径/ ./ 即/ DAG/ 中/ 一串/ 顺序/ 相连/ 的/ 关键/ 前驱/ 构成/ 的/ 路径/ ./ 其/ 形式化/ 定义/ 如下/ :/ 在/ WAG/ 图/ G/ =/ (/ M/ ,/ E/ )/ 中/ ,/ 给定/ 从/ mi/ 节点/ 到/ mj/ 节点/ 的/ 子/ 图/ SG/ ,/ 则/ SG/ 的/ 关键/ 路径/ 为/ p/ =/ 〈/ mi/ ,/ mi/ +/ 1/ ,/ …/ ,/ mj/ 〉/ ,/ 当且/ 仅/ 当/ p/ 中/ 节点/ 满足/ :/ 例/ 4/ ./ 图/ 9/ 展示/ 了/ 一个/ DAG/ 及其/ 关键/ 路径/ ./ ①/ 与/ 最优/ DAG/ 对应/ 的/ 关键/ 路径/ 为/ 最优/ 关键/ 路径/ ./ Page10/ 需要/ 指出/ ,/ 关键/ 路径/ 不是/ 一条/ 随意/ 选取/ 的/ 普通/ 路径/ ,/ 它/ 的/ GQoS/ 与/ DAG/ 的/ GQoS/ 相同/ ./ 5.1/ ./ 2Sim/ -/ Dijkstra/ 算法/ Sim/ -/ Dijkstra/ 算法/ 使用/ 一个/ 优先/ 队列/ enabled/ -/ Nodes/ 存储/ 未/ 处理/ 的/ 可达/ 节点/ ./ 队列/ enabledNodes/ 的/ 性质/ 是/ 优先/ 弹/ 出/ 具有/ 最小/ GQoS/ 的/ 节点/ ./ 其/ 巧妙/ 之/ 处/ 在于/ 能够/ 避免/ 可/ 达/ 节点/ 的/ 多次/ 更新/ 处理/ ,/ 提高/ 算法/ 效率/ ./ 具体/ 过程/ 见/ 算法/ 1/ :/ 首先/ ,/ 使用/ Source/ 节点/ 来/ 初始化/ enabledNodes/ (/ 第/ 1/ ~/ 2/ 行/ )/ ;/ 其次/ ,/ 使用/ popBest/ (/ )/ ①/ 操作/ 优先/ 弹出/ enabledNodes/ 中/ GQoS/ 最好/ (/ 最小/ )/ 的/ 节点/ ./ 然后/ ,/ 对于/ 每个/ enabledNodes/ 中弹/ 出/ 的/ 节点/ v/ ,/ 如果/ v/ 的/ 输出/ (/ par/ )/ 未/ 被/ 存储/ 到/ RPT/ 中/ ,/ 算法/ 将/ 添加/ 相关/ 的/ 项/ (/ par/ ,/ v/ ./ GQoS/ ,/ v/ )/ 到/ RPT/ 中/ (/ 第/ 4/ ~/ 7/ 行/ )/ ;/ 最后/ ,/ 对于/ v/ 的/ 每个/ 后继/ 节点/ u/ ,/ 令其/ Number/ 值减/ 1/ ,/ 以/ 表示/ 这些/ 节点/ 的/ 相关/ 输入/ 已/ 被/ 实例/ 化/ ./ 因此/ ,/ 当/ u/ 的/ Number/ 值为/ 0/ 时/ ,/ 其/ 状态/ 将/ 被/ 置/ 为/ 可达/ (/ 第/ 8/ ~/ 11/ 行/ )/ ./ 上述/ 操作/ 会/ 不断/ 循环/ 执行/ 以/ 获得/ 新/ 的/ 可达/ 节点/ 并/ 将/ 它们/ 存储/ 到/ enabledNodes/ 中/ ./ 当/ enabledNodes/ 为/ 空时/ ,/ 算法/ 将/ 终止/ ./ 需要/ 指出/ ,/ Sim/ -/ Dijkstra/ 算法/ 能够/ 确保/ 每/ 一个/ RPT/ 表项/ 中/ 参数/ (/ par/ )/ 的/ 提供者/ (/ provider/ )/ 均/ 为/ 其/ 最优/ 提供者/ ./ 究其原因/ 在于/ 优先/ 队列/ enabledNodes/ 中/ GQoS/ 最好/ 的/ 节点/ popt/ 总是/ 被/ 优先/ 处理/ ./ 因此/ ,/ popt/ 输出/ 参数/ M/ 将/ 优先/ 存入/ RPT/ 表中/ ./ 当/ 其他/ 提供/ 参数/ M/ 的/ 节点/ 再/ 被/ 处理/ 时/ ,/ 根据/ 算法/ 1/ 第/ 5/ 行中/ 的/ 判断/ 逻辑/ ,/ 这些/ 节点/ 将/ 不能/ 作为/ M/ 的/ 提供者/ 存入/ RPT/ 表项/ 中/ ./ 综上所述/ ,/ 当/ 算法/ 1/ 结束/ 后/ ,/ RPT/ 表中/ 所有/ 参数/ 的/ 提供者/ 均/ 为/ 其/ 最优/ 提供者/ ./ 算法/ 1/ ./ Sim/ -/ Dijkstra/ 算法/ ./ 输入/ :/ WAG/ 图/ 模型/ 、/ 优先/ 队列/ :/ enabledNodes/ 输出/ :/ 节点/ 可/ 达/ 信息/ (/ RPT/ 表项/ )/ 1/ ./ 初始化/ 优先/ 队列/ enabledNodes/ ;/ 2/ ./ enabledNodes/ ./ add/ (/ Source/ )/ ;/ 3/ ./ WHILEenableNodes/ ≠/ / DO4/ ./ v/ / enableNodes/ ./ popBest/ (/ )/ ;/ 5/ ./ IFv/ ./ o/ / RPT/ ./ keys/ (/ )/ THEN6/ ./ FOREACHnodeu/ ∈/ v/ ./ successorsDO7/ ./ RPT/ ./ addentry/ (/ par/ ,/ v/ ./ GQoS/ ,/ v/ )/ ;/ 8/ ./ u/ ./ Number/ -/ -/ ;/ 9/ ./ IFu/ ./ Number/ =/ 0THEN10/ ./ u/ ./ GQoS/ / getGQoS/ (/ u/ )/ ;/ 11/ ./ enabledNodes/ ./ add/ (/ u/ )/ ;/ 12/ ./ ENDIF13/ ./ ENDFOR14/ ./ ENDIF15/ ./ ENDWHILE/ 例/ 5/ ./ 以图/ 3/ 为例/ 说明/ Sim/ -/ Dijkstra/ 算法/ 的/ 执行/ 过程/ ,/ 见表/ 5/ ./ 步骤/ enabledNodes/ (/ GQoS/ )/ 123455.1/ ./ 3Backward/ -/ KP/ 过程/ 利用/ Sim/ -/ Dijkstra/ 算法/ 输出/ 的/ RPT/ 表/ ,/ 本文/ 采用/ Backward/ -/ KP/ 过程/ 生成/ 所/ 需/ 关键/ 路径/ ,/ 具体/ 过程/ 见/ 算法/ 2/ :/ 首先/ ,/ 依次/ 初始化/ 栈/ kpStack/ 和/ 关键/ 前驱/ 变量/ keyPredecessor/ (/ 第/ 1/ ~/ 2/ 行/ )/ ;/ 其次/ ,/ 将/ keyPredecessor/ 中/ 的/ 节点/ 入栈/ ,/ 并/ 利用/ RPT/ 表/ 记录/ 的/ 参数/ 的/ 最优/ 提供者/ 信息/ 迭代/ 求取/ 当前/ 节点/ 的/ 关键/ 前驱/ ,/ 当/ keyPredecessor/ 中/ 的/ 节点/ 为/ Source/ 时/ ,/ 终止/ 迭代/ (/ 第/ 3/ ~/ 6/ 行/ )/ ;/ 最后/ ,/ 依次/ 弹出/ kpStack/ 中/ 的/ 节点/ 生成/ 关键/ 路径/ (/ 第/ 7/ 行/ )/ ./ 算法/ 2/ ./ Backward/ -/ KP/ 过程/ ./ 输入/ :/ 节点/ 可/ 达/ 信息/ 、/ 节点/ 输入/ 的/ 最优/ 提供者/ 输出/ :/ 关键/ 路径/ 1/ ./ 初始化/ 栈/ kpStack/ ;/ 2/ ./ keyPredecessor/ / Destination/ ;/ 3/ ./ WHILEkeyPredecessor/ ≠/ SourceDO4/ ./ kpStack/ ./ add/ (/ keyPredecessor/ )/ ;/ 5/ ./ keyPredecessor/ / π/ (/ keyPredecessor/ )/ ;/ 6/ ./ ENDWHILE7/ ./ keyPath/ / keyPredecessor/ +/ kpStack/ ./ popall/ (/ )/ ;/ 例/ 6/ ./ 以图/ 3/ 为例/ 说明/ 上述/ 执行/ 过程/ ,/ 见表/ 6/ ./ ①/ popBest/ (/ )/ 是/ 优先/ 队列/ 的/ 元素/ 弹/ 出/ 操作/ ./ 在/ 实验/ 中/ ,/ 优先/ 队/ Page11/ 步骤/ 1234565.2/ DAG/ 解/ 构建/ (/ 步/ 3/ )/ 关键/ 路径/ 用于/ 指导/ 构建/ DAG/ (/ 当解/ 为/ 链状/ 形式/ 时/ ,/ 此/ 步骤/ 将/ 被/ 省略/ )/ ./ 具体/ 过程/ 如下/ ,/ 从/ Destination/ 到/ Source/ 发起/ 一次/ 沿/ 关键/ 路径/ 的/ 后/ 向搜索/ 生成/ DAG/ :/ 对于/ 关键/ 路径/ 上/ 的/ 节点/ ,/ 其/ 关键/ 输入/ 参数/ 的/ 提供者/ 为/ 关键/ 前驱/ ;/ 对于/ 其他/ 输入/ 参数/ ,/ 选取/ 不/ 改变/ 当前/ 节点/ 关键/ 前驱/ 的/ 提供者/ ./ 对于/ 非关键/ 路径/ 上/ 的/ 节点/ ,/ 根据/ RPT/ 存储/ 的/ 信息/ 查找/ 其/ 输入/ 参数/ 的/ 最优/ 提供者/ ./ 需要/ 指出/ ,/ 按照/ 上述/ 过程/ 构建/ 的/ DAG/ ,/ 其/ GQoS/ 与/ 关键/ 路径/ 的/ GQoS/ 相同/ ./ 例/ 7/ ./ 以图/ 3/ 为例/ 说明/ DAG/ 的/ 构建/ 过程/ ,/ 见表/ 7/ ./ 步骤/ 1234565.3/ 关键/ 路径/ 松弛/ (/ KPL/ )/ 算法/ (/ 步/ 4/ )/ 如果/ 构建/ 的/ DAG/ 的/ 数量/ 小于/ 阈值/ K/ 时/ ,/ 本文/ 将/ 对/ 最优/ 关键/ 路径/ 进行/ 松弛/ 操作/ 来/ 生成/ 服务质量/ 较差/ 的/ 其他/ 关键/ 路径/ ./ 这些/ 新/ 的/ 关键/ 路径/ 将/ 继续/ 指导/ 构建/ 与其/ 对应/ 的/ DAG/ ./ 本文/ 将/ 被/ 松弛/ 的/ 关键/ 路径/ 称为/ 最优/ 关键/ 路径/ ,/ 通过/ 松弛/ 操作/ 生成/ 的/ 路径/ 称为/ 非/ 最优/ 关键/ 路径/ ./ 定义/ 6/ ./ 松弛/ ①/ 操作/ Loose/ ./ 松弛/ 操作/ 的/ 作用/ 对象/ 是/ 关键/ 路径/ 上/ 的/ 节点/ ,/ 它/ 旨在/ 改变/ 当前/ 关键/ 路径/ 上/ 某个/ 节点/ 的/ 关键/ 前驱/ ,/ 以/ 获取/ 该/ 节点/ 新/ 的/ 关键/ 前驱/ ,/ 从而/ 令新/ 关键/ 前驱/ 的/ GQoS/ 仅/ 大于/ 旧/ 关键/ 前驱/ 的/ GQoS/ ./ 形式化/ 定义/ 如下/ :/ 对于/ 关键/ 路径/ p/ =/ 〈/ mi/ ,/ mi/ +/ 1/ ,/ …/ ,/ mj/ 〉/ ,/ / mk/ ∈/ p/ ,/ 其/ 关键/ 前驱/ mkp/ =/ mk/ -/ 1/ ,/ k/ >/ i/ ./ 给定/ mk/ 的/ 可达/ 前驱/ 集合/ Pmk/ (/ 1/ )/ m/ ./ status/ =/ enabled/ ;/ (/ 2/ )/ m/ ./ o/ ∈/ mk/ ./ I/ ;/ 令/ mkp/ =/ Loose/ (/ mk/ )/ ,/ 则/ Mkp/ 满足/ :/ (/ 3/ )/ mkp/ ∈/ Pmk/ -/ mkp/ ;/ (/ 4/ )/ mkp/ ./ GQoS/ >/ mkp/ ./ GQoS/ ,/ k/ >/ i/ ;/ (/ 5/ )/ mkp/ ./ GQoS/ =/ Min/ {/ m/ ./ GQoS/ |/ m/ ∈/ Pmi/ -/ mkp/ }/ ./ 例/ 8/ ./ 以图/ 10/ 为例/ 解释/ 松弛/ 操作/ ./ 选取/ m4/ 作为/ 松弛/ 节点/ ./ 由图/ 10/ 可知/ ,/ m4/ 输入/ 参数/ 的/ 提供者/ 包括/ m3/ 、/ m2/ 和/ m5/ ,/ 这些/ 节点/ 的/ GQoS/ 分别/ 为/ 7.2/ 、/ 8.2/ 和/ 15/ ./ 其中/ ,/ m4/ 的/ 关键/ 前驱/ 为/ m2/ ./ 根据/ 松弛/ 操作/ 的/ 定义/ 可得/ m5/ =/ Loose/ (/ m4/ )/ ./ 非/ 最优/ 关键/ 路径/ 生成/ :/ 按照/ 从/ Destination/ 节点/ 到/ Source/ 节点/ 的/ 顺序/ ,/ 依次/ 对/ 关键/ 路径/ 的/ 节点/ mk/ 进行/ 松弛/ 操作/ ./ 若/ 存在/ mkp/ =/ Loose/ (/ mk/ )/ ,/ 则/ 首先/ 由/ mkp/ 节点/ 开始/ 执行/ Backward/ -/ KP/ 过程/ 求取/ 一条/ 从/ Source/ 到/ mkp/ 的/ 路径/ ,/ 然后/ 将/ 这条/ 路径/ 与/ 最优/ 关键/ 路径/ 包含/ 的/ 从/ mkp/ 到/ Destination/ 的/ 子/ 路径/ 进行/ 组合/ ,/ 得到/ 新/ 的/ 关键/ 路径/ ./ 需要/ 指出/ ,/ 新/ 求取/ 的/ 关键/ 路径/ 的/ GQoS/ 将/ 差于/ (/ 大于/ )/ 原有/ 关键/ 路径/ 的/ GQoS/ ./ 例/ 9/ ./ 以图/ 10/ 为例/ ,/ 其/ 最优/ 关键/ 路径/ 为/ 〈/ Source/ ,/ m1/ ,/ m2/ ,/ m4/ ,/ Destination/ 〉/ (/ GQoS/ =/ 9.9/ )/ ./ 图中/ 的/ 虚线/ 双/ 箭头/ 标明/ 了/ 一条/ 非/ 最优/ 关键/ 路径/ ,/ 其/ 具体/ 生成/ 过程/ 见表/ 8/ ./ 步骤/ 123456/ 本文/ 结合/ 松弛/ 操作/ 实现/ 了/ 关键/ 路径/ 松弛/ KPL/ (/ Key/ -/ PathbasedLoose/ )/ 算法/ ./ 当/ 使用/ 最优/ 关键/ 路径/ ①/ 本文/ 之所以/ 使用/ “/ 松驰/ ”/ 这个/ 动词/ 表示/ 其他/ 非/ 最优/ 主/ 路径/ 的/ Page12/ 不足以/ 生成/ 足够/ 数量/ 的/ DAG/ 时/ ,/ KPL/ 算法/ 能够/ 找出/ 定义/ 2/ 中/ 满足/ 查询/ R/ 的/ Top/ -/ K/ 子图/ ./ 算法/ 的/ 具体/ 过程/ 见/ 算法/ 3/ :/ 首先/ ,/ 分别/ 使用/ 最优/ 关键/ 路径/ 和/ 数值/ k/ 初始化/ 优先/ 队列/ keyPaths/ 和/ 阈值/ 变量/ threshold/ (/ 第/ 1/ ~/ 2/ 行/ )/ ./ keyPaths/ 的/ 性质/ 是/ 具有/ 最小/ GQoS/ 的/ 关键/ 路径/ 将/ 优先/ 弹出/ ./ 其次/ ,/ 对/ keyPaths/ 进行/ 循环/ 操作/ ./ 当/ keyPaths/ 不为/ 空时/ ,/ 弹/ 出/ 当前/ 最优/ 的/ 关键/ 路径/ 并/ 构建/ 该/ 关键/ 路径/ 对应/ 的/ DAG/ (/ 第/ 4/ ~/ 5/ 行/ )/ ./ 如果/ DAG/ 的/ 数量/ 满足/ 阈值/ 要求/ ,/ 则/ 算法/ 结束/ ;/ 否则/ ,/ 更新/ 阈值/ ,/ 并/ 对/ 当前/ 关键/ 路径/ 的/ 节点/ 进行/ 松弛/ 操作/ ./ 同时/ ,/ 联合/ Backward/ -/ KP/ 过程/ 生成/ 新/ 的/ GQoS/ 较差/ 的/ 关键/ 路径/ ,/ 并/ 将/ 这些/ 关键/ 路径/ 存储/ 到/ keyPaths/ 中/ (/ 第/ 7/ ~/ 11/ 行/ )/ ./ 算法/ 3/ ./ KPL/ 算法/ ./ 输入/ :/ 最优/ 关键/ 路径/ P/ ,/ 阈值/ k/ 输出/ :/ Top/ -/ K/ 子图/ 1/ ./ keyPaths/ / P/ ;/ 2/ ./ threshold/ / k/ ;/ 3/ ./ WHILEkeyPaths/ ≠/ / DO4/ ./ keyPath/ / keyPaths/ ./ popBest/ (/ )/ ;/ 5/ ./ DAGs/ / keyPath/ ./ constructDAGs/ (/ )/ ;/ 6/ ./ IF/ |/ DAGs/ |/ / thresholdTHENreturn/ ;/ 7/ ./ threshold/ / threshold/ -/ |/ DAGs/ |/ ;/ 8/ ./ FOREACHnodev/ ∈/ keyPathDO9/ ./ newKeyPath/ / Loose/ (/ v/ )/ / Backward/ -/ KP/ (/ )/ ;/ 10/ ./ keyPaths/ ./ add/ (/ newKeyPath/ )/ ;/ 11/ ./ ENDFOR12/ ./ ENDWHILE6/ 实验/ 6.1/ 实验/ 设置/ 基于/ Top/ -/ KDAG/ 搜索算法/ ,/ 本文/ 实现/ 了/ APISynth/ 系统/ 来/ 自动/ 地/ 进行/ 对象/ 实例/ 化/ 推荐/ ./ 实验/ 设置/ 介绍/ 如下/ :/ 实验/ 环境/ ./ 2.4/ GHzCPU/ ,/ 4GBRAM/ ,/ Windows7/ 操作系统/ ./ 对比/ 方法/ ./ 基于/ 全局/ 图/ 模型/ 的/ 方法/ Prospector/ ①/ [/ 2/ ]/ 、/ 基于/ 局部/ 图/ 模型/ 的/ 方法/ ②/ ParseWeb/ [/ 5/ ]/ 和/ GraPacc/ [/ 6/ ]/ ./ 测试数据/ 集/ ./ 公平/ 起/ 见/ ,/ 实验/ 基于/ 对比/ 工作/ 使用/ 的/ 类库/ 和/ 必要/ 的/ Java/ 依赖/ 包/ 构建/ 图/ 模型/ ./ 具体/ 而言/ ,/ 与/ Prospector/ 和/ ParseWeb/ 对比/ 时/ 使用/ 了/ GEF/ (/ GraphicalEditingFramework/ )/ 类库/ ,/ 而/ 与/ GraPacc/ 对比/ 时/ 使用/ 了/ JavaSDKUtility/ (/ java/ ./ util/ ,/ java/ ./ io/ )/ 类库/ ./ 此外/ ,/ 基于/ GEF/ 类库/ 的/ Logic/ ③/ 项目/ 源码/ 将/ 用于/ 统计/ 相关/ API/ 的/ 使用/ 频率/ ./ 测试/ 查询/ ./ 实验/ 使用/ 了/ 50/ 个/ (/ Source/ ,/ Destination/ )/ 形式/ 的/ 查询/ 进行/ 对比/ 实验/ ./ 其中/ 包括/ 选/ 自/ 文献/ [/ 2/ ,/ 5/ ]/ 的/ 42/ 个/ 已有/ 查询/ ,/ 以及/ 本文/ 为/ 实验设计/ 的/ 8/ 个/ 查询/ ./ 需要/ 指出/ ,/ 满足/ 实验/ 所用/ 查询/ 均/ 需要/ 完成/ 较为/ 复杂/ 的/ 编程/ 任务/ :/ 需要/ 调用/ 构造/ 器/ 函数/ 或/ 执行/ 向上/ 、/ 向下/ 转型/ 操作/ 或/ 调用/ 静态方法/ ./ 度量/ 准则/ ./ 针对/ 一个/ 查询/ 任务/ ,/ API/ 推荐/ 系统/ 将/ 生成/ 多个/ 候选/ 结果/ 供/ 开发人员/ 选择/ ./ 为了/ 对/ 相关/ 推荐/ 系统/ 进行/ 评估/ ,/ 本文/ 采用/ 推荐/ 系统/ 常用/ 的/ 评价/ 指标/ ,/ 如/ 查全率/ 、/ 准确率/ 和/ F/ 值来/ 对/ 推荐/ 结果/ 的/ 优劣/ 进行/ 统一/ 衡量/ ./ 因为/ 候选/ 结果/ 中/ 排名/ 第一/ 的/ 结果/ 的/ 重要/ 程度/ 最高/ ,/ 所以/ 本文/ 采用/ 信息检索/ 领域/ 广泛/ 使用/ 的/ 度量/ 指标/ P/ @/ 1/ 评估/ 准确率/ ./ 具体/ 而言/ ,/ 查全率/ (/ Recall/ )/ 表示/ 可/ 被/ 满足/ 的/ 查询/ 在/ 所有/ 查询/ 中/ 的/ 比例/ ./ 准确率/ (/ P/ @/ 1/ )/ 表示/ 在/ 可/ 被/ 满足/ 的/ 查询/ 中/ ,/ 候选/ 结果/ 列表/ 中/ Top1/ 结果/ 为/ 正确/ 的/ 查询/ 的/ 比例/ ./ F/ 值/ 表示/ 准确率/ 和/ 查全率/ 的/ 调和/ 平均/ :/ F/ -/ score/ =/ 2/ // (/ 1/ // P/ @/ 1/ +/ 1/ // Recall/ )/ ./ 6.2/ 对比/ 实验/ 6.2/ ./ 1APISynthvs/ ./ Prospector/ 基于/ 文献/ [/ 2/ ,/ 5/ ]/ 中/ 的/ 查询/ ,/ 本文/ 对比/ 了/ APISynth/ 和/ Prospector/ 的/ 推荐/ 结果/ ./ 实验/ 结果/ 见表/ 9/ 、/ 表/ 10/ 、/ 表/ 11/ 和表/ 12/ 中/ 的/ 相关/ 列/ :/ Prospector/ 能够/ 支持/ 的/ 查询/ 数量/ 分别/ 为/ 18/ ,/ 7/ ,/ 6/ 和/ 8/ ,/ 而/ APISynth/ 则/ 分别/ 为/ 20/ ,/ 11/ ,/ 10/ ④/ 和/ 8/ ./ 实验/ 结果表明/ 在/ 能够/ 支持/ 的/ 查询/ 方面/ ,/ APISynth/ 优于/ Prospector/ ./ 原因/ 分析/ 如下/ :/ 实验/ 中/ ,/ 对于/ 需要/ DAG/ 形式/ 解/ 的/ 查询/ ,/ Prospector/ 会/ 返回/ 大量/ 无关/ 的/ 结果/ ,/ 其/ 正确/ 的/ 结果/ 往往/ 被/ 淹没/ 在/ 海量/ 的/ 无效/ 解中/ ./ 与/ Prospector/ 相比/ ,/ APISynth/ 能够/ 直接/ 搜索/ 出/ DAG/ 形式/ 的/ 解/ ,/ 能/ 对/ 其/ 进行/ 全面/ 、/ 准确/ 评价/ ,/ 因此/ 提升/ 了/ 系统/ 的/ 准确率/ ./ 需要/ 特别/ 指出/ ,/ APISynth/ 唯一/ 未能/ 解决/ 的/ 查询/ 任务/ 是/ 表/ 9/ 中/ 的/ (/ AbstractDecoratedTextEditor/ ,/ ProjectViewer/ )/ ./ 根据/ 分析/ ,/ 本文/ 作者/ 发现/ GEF/ 类库/ 中/ 不/ 包含/ ProjectViewer/ 类型/ ,/ 因此/ 该/ 查询/ 任务/ 也/ 不能/ 被/ 其他/ 方法/ 解决/ ./ ①/ ②/ ③/ ④/ Page13/ 表/ 9/ 基于/ 文献/ [/ 2/ ]/ 中/ 使用/ 查询/ 任务/ 的/ 实验/ 对比/ 结果/ InputStreamStringTableViewerIWorkbenchScrollingGraphicalViewerFigureCanvasKeyEventEnumerationSelectionChangedEventISelectionImageRegistryMapIViewPartTableViewerIEditorSiteStringIWorkbenchPageIWorkbenchPageIFileIWorkbenchWindowAbstractGraphicalEditPartConnectionLayerIWorkspace/ 注/ :/ PROS/ :/ Prospector/ ,/ APIS/ :/ APISynth/ ,/ Nil/ :/ 当前/ 候选/ 结果/ 集中/ 被/ 评判/ 为/ 正确/ 结果/ 的/ 个数/ 为/ 0/ ./ 表/ 10/ 基于/ 文献/ [/ 5/ ]/ 中/ 使用/ 查询/ 任务/ 的/ 实验/ 对比/ 结果/ ISelectionIStructuredSelectionICompilationUnitYesYesYesElementChangedEventICompilationUnitYesYesYesIEditorPartIEditorPartViewPartTextEditorActionTextEditorActionITextEditorAbstractDecoratedTextEditorITextEditorITextEditor/ 注/ :/ PARS/ :/ ParseWeb/ ,/ PROS/ :/ Prospector/ ,/ APIS/ :/ APISynth/ ./ 表/ 11/ 基于/ Logic/ 项目/ 相关/ 查询/ 任务/ [/ 5/ ]/ 的/ 实验/ 对比/ 结果/ SourceIPageSiteActionRegistryIActionActionRegistryProviderIPageSiteProviderIPageSitemanagerStringCompositeCompositeGraphicalViewerThumbnailGraphicalViewer/ 注/ :/ NO/ :/ 推荐/ 结果/ 集/ 的/ 大小/ ,/ RA/ :/ 用户/ 期待/ 结果/ 的/ 排名/ ,/ PARS/ :/ ParseWeb/ ,/ PROS/ :/ Prospector/ ,/ APIS/ :/ APISynth/ ,/ Nil/ :/ 当前/ 候选/ 结果/ 集中/ 被/ 评判/ 为/ 正确/ 结果/ 的/ 个数/ 为/ 0/ ./ 表/ 12/ 基于/ JavaSDKUtility/ 相关/ 查询/ 任务/ 的/ 对比/ 结果/ SourceFileReaderInputStreamBufferedReader16Nil104121LinkedHashMapIteratorArrayListFileWriterFileInputStreamDataInputStream36Nil201121FilePattern/ 注/ :/ NO/ :/ 推荐/ 结果/ 集/ 的/ 大小/ ,/ RA/ :/ 用户/ 期待/ 结果/ 的/ 排名/ ,/ GraP/ :/ GraPacc/ ,/ PROS/ :/ Prospector/ ,/ APIS/ :/ APISynth/ ,/ Nil/ :/ 当前/ 候选/ 结果/ 集中/ 被/ 评判/ 为/ 正确/ 结果/ 的/ 个数/ 为/ 0.6/ ./ 2.2/ APISynthvs/ ./ ParseWeb/ 基于/ 文献/ [/ 5/ ]/ 中/ 的/ 查询/ 本文/ 对/ APISynth/ 和/ ParseWeb/ 进行/ 了/ 对比/ 实验/ ./ 实验/ 结果/ 见表/ 10/ 和表/ 11/ 的/ 相关/ 列/ :/ ParseWeb/ 支持/ 的/ 查询/ 数量/ 分别/ 为/ 11/ 和/ 8/ ,/ 而/ APISynth/ 则/ 分别/ 为/ 11/ 和/ 10/ ./ 实验/ 结果表明/ ,/ 在/ 支持/ 的/ 查询/ 数量/ 方面/ APISynth/ 优于/ ParseWeb/ ./ 原因/ 分析/ 如下/ :/ 由于/ ParseWeb/ 使用/ 语句/ 间/ 的/ 控制流/ 构建/ 图/ 模型/ ,/ 无法/ 对/ 更为/ 精细/ 的/ API/ 之间/ 的/ 数据/ 依赖/ 关系/ 进行/ 刻画/ ,/ 将/ 造成/ 某些/ 查询/ 请求/ 无法/ 被/ 满足/ ./ 下面/ 以图/ 11/ 为例/ 对此/ 进行/ 解释/ ./ 当/ 编程人员/ 输入/ 查询/ (/ GraphicalViewer/ ,/ IFigure/ )/ 时/ ,/ 尽管/ 示例/ 代码/ 包含/ 满足/ 查询/ 的/ 方法/ 调用/ 序列/ ,/ 然而/ ParseWeb/ 不能/ 根据/ 这/ 段/ 代码/ 推荐/ 出/ 相关/ 的/ 解/ ./ 原因/ 在于/ ParseWeb/ 无法/ 分析/ 出/ 方法/ getGraphical/ -/ Viewer/ (/ )/ 返回值/ 为/ GraphicalViewer/ 这一/ 数据/ 依赖/ 关系/ ,/ 从而/ 无法/ 匹配/ 查询/ 包含/ 的/ 类型/ ./ 6.2/ ./ 3APISynthvs/ ./ GraPacc/ 本/ 小节/ 实验/ 对比/ 了/ APISynth/ 和/ GraPacc/ [/ 6/ ]/ ./ 实验/ 结果/ 见表/ 12/ :/ APISynth/ 能够/ 支持/ 所有/ 的/ 查询/ ,/ 而/ GraPacc/ 仅/ 支持/ 4/ 个/ 查询/ ./ 实验/ 结果表明/ ,/ 在/ 支持/ 的/ 查询/ 数量/ 方面/ ,/ APISynth/ 优于/ GraPacc/ ./ 原因/ 分析/ 如下/ :/ 因为/ GraPacc/ 不能/ 利用/ 跨/ 模式/ 的/ API/ 依赖/ ,/ 所以/ 减少/ 了/ 推荐/ 出/ 正确/ 解/ 的/ 可能性/ ./ 此外/ ,/ GraPacc/ 还/ 受限于/ 模式/ 库中/ 模式/ 的/ 数量/ ./ 例如/ ,/ 因为/ 满足/ 查询/ (/ InputStream/ ,/ BufferedReader/ )/ 的/ 方法/ 调用/ 序列/ 未/ 包含/ 在/ 模式/ 库中/ ,/ 所以/ GraPacc/ 不/ 支持/ 该/ 查询/ ./ Page146/ ./ 3/ 评价/ 与/ 分析/ 根据上述/ 对比/ 实验/ 的/ 结果/ ,/ 本文/ 从/ 3/ 个/ 方面/ 对/ 相关/ 工作/ 进行/ 评估/ ,/ 包括/ 推荐/ 结果/ 的/ 正确性/ 、/ 最优/ 结果/ 的/ 检测/ 次数/ 以及/ 推荐/ 系统/ 的/ 响应/ 时间/ ./ 6.3/ ./ 1/ 正确性/ 根据/ 对比/ 实验/ 结果/ ,/ 本文/ 对/ 相关/ 工作/ 的/ 准确率/ 、/ 查全率/ 和/ F/ 值/ 这些/ 反映/ 结果/ 正确性/ 的/ 指标/ 进行/ 了/ 评估/ ./ 需要/ 指出/ ,/ 在/ 被/ 评估/ 的/ 相关/ 工作/ 中/ ,/ APISynth/ 和/ Prospector/ 是/ 基于/ 全局/ 图/ 模型/ 的/ 方法/ ,/ 而/ ParseWeb/ 和/ GraPacc/ 是/ 基于/ 局部/ 图/ 模型/ 的/ 方法/ ./ 本文/ 采用/ 专家组/ 评判/ 的/ 方法/ 对/ 推荐/ 结果/ 的/ 正确性/ 进行/ 评判/ ./ 专家/ 组成员/ 包括/ 7/ 名/ 具备/ 3/ 年/ 以上/ Java/ 表/ 13/ 实验/ 结果/ 评价/ APISynthParseWeb/ 查全率/ P/ @/ 1F/ 值/ Check/ #/ 6.3/ ./ 2/ 结果/ 检测/ 次数/ 衡量/ API/ 推荐/ 系统/ 的/ 一个/ 重要/ 指标/ 是/ 系统/ 能否/ 提高/ 开发人员/ 的/ 编程/ 效率/ ./ 为此/ ,/ 依据/ 对比/ 实验/ 结果/ 中/ 的/ Rank/ 值/ ,/ 本文/ 统计/ 了/ 用户/ 在/ 找到/ 期望/ 结果/ 之前/ ,/ 需要/ 检测/ 候选/ 结果/ 的/ 平均/ 数目/ ./ 例如/ ,/ 若期望/ 结果/ 的/ Rank/ 值为/ k/ ,/ 则/ 表明/ 找到/ 该/ 结果/ 之前/ 需要/ 用户/ 从头开始/ 查阅/ 排名/ 靠/ 前/ 的/ k/ -/ 1/ 个/ 结果/ ,/ 于是/ 共/ 检测/ 结果/ 数目/ 为/ k/ 次/ ./ 因此/ ,/ 实验/ 计算/ 了/ 相关/ 表中/ 的/ rank/ 列值/ (/ 表/ 9/ 、/ 表/ 11/ 和表/ 12/ )/ 的/ 平均值/ 作为/ 结果/ 检测/ 次数/ ,/ 如表/ 13/ 中/ 的/ Check/ #/ 所示/ ./ 公平/ 起/ 见/ ,/ 实验/ 只/ 选取/ 对比/ 方法/ 双方/ 均/ 可/ 支持/ 的/ 查询/ 任务/ 作为/ 统计/ 源/ ./ 实验/ 结果表明/ ,/ 与/ 其他/ 方法/ 相比/ ,/ 使用/ APISynth/ 可/ 显著/ 减少/ 正确/ 结果/ 的/ 检测/ 次数/ ,/ 因此/ 能/ 提高/ 开发人员/ 的/ 编程/ 效率/ ./ 6.3/ ./ 3/ 系统/ 响应/ 时间/ APISynth/ 借助/ 特殊/ 的/ 数据/ 存储/ 结构/ 能/ 极大/ 地/ 提升/ 算法/ 的/ 执行/ 效率/ ./ 实验/ 结果表明/ ,/ APISynth/ 完成/ 一次/ 查询/ 的/ 平均/ 时间/ 通常/ 在/ 200ms/ 以内/ ,/ 足以/ 满足/ 开发人员/ 在/ 系统/ 响应/ 速率/ 方面/ 的/ 要求/ ./ 需要/ 指出/ ,/ 虽然/ 相比/ 邻接/ 表/ 或/ 邻接矩阵/ 等/ 传统/ 图/ 存储/ 结构/ ,/ 本文/ 采用/ 的/ 存储/ 结构/ 需要/ 耗费/ 更/ 多/ 的/ 内存空间/ ,/ 但是/ 实验/ 结果表明/ ,/ 这/ 对于/ 当今/ 拥有/ GB/ 级别/ 内存/ 的/ 主流/ 计算机/ 不/ 构成/ 挑战性/ 问题/ ./ 本文/ 对/ APISynth/ 运行/ 时/ 占用/ 的/ 内存/ 进行/ 了/ 跟踪/ 统计/ ./ 结果显示/ ,/ APISynth/ 工作/ 时/ 平均/ 只/ 消耗/ 15MB/ 的/ 内存/ 来/ 存储/ GEF/ 类库/ 及其/ 依赖/ 库/ ./ 据统计/ ,/ GEF/ 类库/ 及其/ 依/ 编程/ 经验/ 的/ 程序员/ ./ 具体/ 而言/ ,/ 多数/ 专家/ 支持/ 的/ 推荐/ 方案/ 将/ 最终/ 被/ 评判/ 为/ 正确/ 结果/ ./ 本文/ 将/ 记录/ 候选/ 结果/ 集中/ 第/ 1/ 个/ 被/ 评判/ 为/ 正确/ 结果/ 的/ 位置/ ,/ 如表/ 9/ 、/ 表/ 11/ 和表/ 12/ 的/ Rank/ 列/ 所示/ ./ 当/ 候选/ 结果/ 集中/ 没有/ 任何/ 结果/ 被/ 评判/ 为/ 正确/ 时/ ,/ 相应/ 的/ rank/ 值/ 将/ 置/ 为/ Nil/ ./ 表/ 13/ 给出/ 了/ 准确率/ 、/ 查全率/ 和/ F/ 值/ 的/ 评估/ 结果/ ./ 由此可知/ ,/ 与/ 基于/ 局部/ 图/ 模型/ 的/ 方法/ 相比/ ,/ API/ -/ Synth/ 将/ 系统/ 的/ 查全率/ 平均/ 提升/ 了/ 40/ %/ ;/ 而/ 与/ 基于/ 全局/ 图/ 模型/ 的/ 方法/ 相比/ ,/ APISynth/ 将/ 系统/ 的/ P/ @/ 1/ 提升/ 了/ 34/ %/ ./ 此外/ ,/ 与/ 其他/ 方法/ 相比/ ,/ APISynth/ 将/ F/ 值/ 平均/ 提升/ 了/ 21/ %/ ./ 这/ 表明/ APISynth/ 能够/ 更好/ 地/ 兼顾/ 查全率/ 和/ 准确率/ ./ 0.800/ ./ 560.662/ ./ 25/ 赖库/ 包含/ 的/ 方法/ 和/ 对象/ 数目/ 均/ 在/ 60000/ 以上/ ,/ 而/ 常用/ 的/ 44/ 个/ 类库/ 的/ 方法/ 和/ 对象/ 数目/ 均/ 小于/ 5000/ [/ 6/ ,/ 11/ ]/ ./ 综上/ 可知/ ,/ APISynth/ 在/ 多数/ 情况/ 下/ 可以/ 高效/ 地/ 工作/ ,/ 而/ 不会/ 受到/ 内存容量/ 的/ 限制/ ./ 7/ 结论/ 针对/ 对象/ 实例/ 化/ ,/ 本文/ 设计/ 并/ 实现/ 了/ 一种/ 基于/ 新型/ 加权/ API/ 图/ (/ WAG/ )/ 的/ API/ 推荐/ 系统/ —/ —/ —/ APISynth/ ./ 新型/ WAG/ 图/ 可/ 更/ 全面/ 、/ 准确/ 地/ 描述/ API/ 的/ 调用/ 依赖/ 关系/ ,/ 有效/ 地/ 提升/ 了/ 推荐/ 系统/ 的/ 查全率/ ./ 此外/ ,/ 本文/ 提出/ 的/ 基于/ WAG/ 图/ 的/ Top/ -/ KDAG/ 搜索算法/ 可/ 直接/ 搜索/ DAG/ 形式/ 的/ 解/ 使得/ 系统/ 能/ 对/ 其/ 进行/ 准确/ 地/ 评分/ ./ 基于/ 真实/ 类库/ 数据/ 集/ 进行/ 的/ 对比/ 实验/ 表明/ ,/ 与/ 现有/ 方法/ Prospector/ 、/ ParseWeb/ 和/ GraPacc/ 相比/ ,/ APISynth/ 在/ 准确率/ 和/ 查全率/ 两/ 方面/ 获得/ 了/ 更好/ 的/ 表现/ ./ 同时/ APISynth/ 的/ 响应/ 时间/ 在/ 200ms/ 以内/ ,/ 能/ 较/ 好/ 地/ 满足/ 开发人员/ 的/ 需求/ ./ 在/ 未来/ 的/ 工作/ 中/ ,/ 我们/ 将/ 主要/ 从/ 以下/ 两个/ 方面/ 进一步/ 加强/ 研究/ :/ (/ 1/ )/ 根据/ 实际/ 需要/ ,/ 在/ 搜索算法/ 中/ 引入/ 更/ 多维度/ 的/ QoS/ ,/ 深入研究/ 多维/ QoS/ 场景/ 下/ 最优/ 方案/ 的/ 求取/ 机制/ ;/ (/ 2/ )/ 当/ 类库/ 版本/ 变更/ 时/ ,/ 由于/ 类库/ 中/ API/ 的/ 变化/ ,/ 原有/ 支持/ 旧版本/ 类库/ 的/ 推荐/ 结果/ 常/ 在/ 新/ 版本/ 类库/ 环境/ 下/ 发生/ 编译/ 错误/ ./ 为此/ ,/ 我们/ 将/ 研究/ 如何/ 根据/ 新旧/ 版本/ 之间/ 的/ 差异/ 实现/ 过时/ 推荐/ 结果/ 的/ 主动/ 发现/ 和/ 自动/ 迁移/ ./ Page15/ 

