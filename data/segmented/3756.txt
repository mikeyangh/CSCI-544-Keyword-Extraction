Page1/ 支持/ 频繁/ 位置/ 更新/ 的/ 不/ 确定/ 移动/ 对象/ 索引/ 策略/ 丁晓锋/ 金海/ 赵娜/ (/ 华中科技大学/ 服务/ 计算技术/ 与/ 系统/ 教育部/ 重点/ 实验室/ 武汉/ 430074/ )/ (/ 华中科技大学/ 集群/ 与/ 网格/ 计算/ 湖北省/ 重点/ 实验室/ 武汉/ 430074/ )/ 摘要/ 移动/ 数据/ 采集/ 和/ 处理/ 技术/ 的/ 迅速/ 发展/ 给/ 研究/ 人员/ 提出/ 了/ 新/ 的/ 应用/ 需求/ ,/ 如何/ 在/ 频繁/ 位置/ 更新/ 应用/ 中/ 索引/ 不/ 确定/ 移动/ 对象/ 的/ 当前/ 及/ 未来/ 位置/ 信息/ 成为/ 当前/ 的/ 研究/ 热点/ 之一/ ./ TPU/ 树是/ 针对/ 不/ 确定/ 移动/ 对象/ 的/ 当前/ 及/ 未来/ 位置/ 信息/ 索引/ 的/ 策略/ ,/ 其/ 具有/ 较/ 高/ 的/ 概率/ 域/ 查询/ 效率/ ,/ 但是/ 其/ 采用/ 的/ 传统/ 自顶向下/ 更新/ 算法/ ,/ 存在/ 频繁/ 位置/ 更新/ 效率/ 低下/ 的/ 问题/ ./ 通过/ 在/ TPU/ 树上/ 增加/ 一个/ 记录/ 不/ 确定/ 移动/ 对象/ 状态/ 特征/ 的/ 更新/ 备忘录/ (/ UM/ )/ 内存/ 结构/ ,/ 文中/ 提出/ 了/ 一种/ 支持/ 频繁/ 位置/ 更新/ 的/ 不/ 确定/ 移动/ 对象/ 索引/ 策略/ TPU2M/ 树/ ,/ 并/ 在/ 此基础/ 之上/ 提出/ 了/ 一种/ 改进/ 的/ 基于/ 备忘录/ (/ MMBU/ // I/ )/ 的/ 更新/ // 插入/ 算法/ ./ 代价/ 分析/ 和/ 实验/ 仿真/ 表明/ ,/ 采用/ MMBU/ // I/ 算法/ 的/ TPU2M/ 树/ 频繁/ 更新/ 性能/ 大大/ 优于/ TPU/ 树/ 和/ ABx/ 树/ 索引/ ,/ 且/ 概率/ 查询/ 性能/ 与/ 传统/ 索引/ 大致/ 相当/ ,/ 因此/ 具有/ 很/ 好/ 的/ 实用价值/ 和/ 广泛/ 的/ 应用/ 前景/ ./ 关键词/ 不/ 确定/ 移动/ 对象/ ;/ 索引/ 结构/ ;/ 基于/ 备忘录/ 更新/ ;/ TPU/ 树/ ;/ 概率/ 查询/ 1/ 引言/ 近年来/ ,/ 伴随/ 着/ 科学技术/ 的/ 不断进步/ ,/ 人们/ 对/ 数据/ 的/ 采集/ 方式/ 呈现/ 多样化/ 和/ 对/ 数据处理/ 技术/ 的/ 逐步/ 深入研究/ ,/ 不确定性/ 数据/ 得到/ 学术界/ 和/ 工业界/ 的/ 广泛/ 重视/ [/ 1/ -/ 2/ ]/ ./ 在/ 诸多/ 应用/ 如实/ 时/ 交通/ 信息管理/ 与/ 导航/ 、/ 军事/ 监控/ 和/ 民航/ 管制/ 中/ ,/ 移动/ 终端/ 的/ 实时/ 位置/ 信息/ 的/ 不确定性/ 普遍存在/ ,/ 如何/ 对/ 移动/ 终端/ 的/ 不确定性/ 实时/ 位置/ 信息/ 进行/ 监控/ 和/ 管理/ 是/ 一个/ 至关重要/ 的/ 问题/ [/ 3/ -/ 5/ ]/ ./ 传统/ 数据库/ 索引/ 技术/ 是/ 为/ 存储/ 精确/ 的/ 数据/ 而/ 设计/ ,/ 其/ 索引/ 结构/ 中/ 存储/ 移动/ 对象/ 的/ 精确/ 位置/ ,/ 因此/ 无法/ 有效/ 地/ 管理/ 不确定性/ 数据/ ,/ 从而/ 学术界/ 和/ 工业界/ 对/ 研发/ 新型/ 的/ 不确定性/ 数据管理/ 技术/ 提出/ 了/ 要求/ ./ 针对/ 如何/ 高效/ 管理/ 移动/ 对象/ 实时/ 变化/ 的/ 精确/ 位置/ 信息/ ,/ 研究/ 人员/ 提出/ 了/ 一系列/ 的/ 索引/ 模型/ ,/ 根据/ 位置/ 信息/ 的/ 不同/ 类型/ ,/ 大致/ 可以/ 分为/ 两类/ [/ 6/ ]/ :/ 一类/ 是/ 针对/ 移动/ 对象/ 历史/ 位置/ 信息/ 的/ 索引/ ;/ 另一类/ 是/ 针对/ 移动/ 对象/ 当前/ 及/ 未来/ 位置/ 信息/ 的/ 索引/ ./ 其中/ 包括/ 许多/ 基于/ 参数/ 化/ 的/ 索引/ 方法/ 来/ 对/ 移动/ 对象/ 当前/ 及/ 未来/ 位置/ 信息/ 进行/ 管理/ ,/ 如/ TPR/ 树/ [/ 7/ ]/ 及其/ 变种/ TPR/ / 树/ [/ 8/ ]/ 、/ REXP/ 树/ [/ 9/ ]/ 和/ STAR/ 树/ [/ 10/ ]/ 等/ ./ TPR/ 树/ 及其/ 变种/ TPR/ / 树/ 由于/ 沿用/ 了/ 传统/ R/ 树/ 的/ 查询/ ,/ 插入/ 及/ 删除/ 等/ 算法/ 而/ 成为/ 目前/ 广泛/ 使用/ 的/ 精确/ 移动/ 对象/ 当前/ 及/ 未来/ 位置/ 信息/ 索引/ 方法/ ,/ 但/ 其/ 固有/ 的/ 自顶向下/ (/ top/ -/ down/ )/ 更新/ 模式/ ,/ 由于/ 较大/ 的/ I/ // O/ 代价/ 而/ 难以/ 满足/ 大量/ 并发/ 更新/ 的/ 要求/ ./ REXP/ 树/ 借用/ TPR/ 树/ 的/ 时间/ 参数/ 策略/ ,/ 通过/ 在/ R/ / 树上/ 添加/ 数据/ 的/ 有效期/ 属性/ ,/ 提高/ 了/ 失效/ 数据/ 的/ 删除/ 效率/ ,/ 从而/ 表现/ 出/ 比较/ 好/ 的/ 更新/ 性能/ ./ STAR/ 树/ 在/ 处理/ 简单/ 更新/ 时/ 也/ 表现/ 出/ 很/ 好/ 的/ 性能/ ./ 研究/ 人员/ 提出/ 能/ 同时/ 对/ 移动/ 对象/ 历史/ 、/ 当前/ 及/ 未来/ 位置/ 信息/ 进行/ 索引/ 的/ 模型/ (/ BBx/ 树/ [/ 11/ ]/ 、/ RPPF/ 树/ [/ 12/ ]/ )/ ./ 但/ 上述/ 索引/ 方法/ 包括/ R/ 树/ 家族/ [/ 3/ ]/ 均/ 不能/ 很/ 好/ 地/ 处理/ 移动/ 对象/ 频繁/ 位置/ 更新/ ./ Lee/ 等/ 人/ [/ 13/ ]/ 提出/ 了/ 基于/ R/ 树/ 的/ 自/ 底向上/ (/ Bottom/ -/ UpUpdate/ ,/ BUU/ )/ 更新/ 思想/ ,/ 其/ 更新过程/ 起/ 始于/ 要求/ 更新/ 的/ 叶/ 节点/ ,/ 无需/ 浪费/ 大量/ 查找时间/ ,/ 从而/ 大大提高/ 动态/ 更新/ 性能/ ,/ 但/ 辅助/ 索引/ 的/ 维护/ 和/ 大量/ 内存空间/ 的/ 占用/ 导致系统/ 稳定性/ 较差/ ,/ 且/ 不能/ 很/ 好地解决/ 频繁/ 大幅度/ 位置/ 更新/ 问题/ ./ 针对/ 如何/ 管理/ 和/ 查询/ 对象/ 的/ 不确定性/ 位置/ 信息/ ,/ Tao/ 等/ 人/ [/ 1/ ]/ 提出/ 了/ 基于/ R/ / 树/ 的/ 不/ 确定/ 对象/ 索引/ 策略/ U/ 树/ ,/ 其/ 固有/ 的/ 良好/ 动态/ 结构/ 可以/ 使得/ 数据/ 对象/ 以/ 任何/ 次序/ 更新/ 或/ 插入/ ,/ 而且/ 对/ 不/ 确定/ 数据/ 本身/ 的/ 概率密度/ 分布/ (/ ProbabilityDensityFunction/ ,/ PDF/ )/ 没有/ 任何/ 限制/ ./ 文献/ [/ 4/ ]/ 针对/ 支持/ 不/ 确定/ 移动/ 对象/ 当前/ 及/ 未来/ 位置/ 信息/ 索引/ 和/ 查询/ 的/ 问题/ ,/ 提出/ 了/ 一种/ 基于/ U/ 树/ 的/ 高效率/ 当前/ 及/ 未来/ 不/ 确定/ 位置/ 信息检索/ 的/ 索引/ 结构/ TPU/ 树/ ,/ 并/ 提出/ 了/ 一种/ 改进/ 的/ 基于/ p/ -/ bound/ 的/ 域/ 查询/ (/ Modifiedp/ -/ boundBasedRangeQuery/ ,/ MP/ _/ BBRQ/ )/ 处理/ 算法/ ./ 实验/ 表明/ ,/ 采用/ MP/ _/ BBRQ/ 算法/ 的/ TPU/ 树/ 概率/ 域/ 查询/ 效率/ 可以/ 得到/ 很大/ 程度/ 的/ 提高/ ./ 最近/ ,/ Zhang/ 等/ 人/ [/ 5/ ]/ 提出/ 来/ 一种/ 基于/ Bx/ 树/ 的/ 不/ 确定/ 移动/ 对象/ 索引/ 策略/ ABx/ 树/ ,/ 利用/ 矩形框/ 推论/ 法则/ (/ Rectangleinference/ )/ 和/ 蒙特卡洛/ (/ Monte/ -/ Carlo/ )/ 模拟/ 相结合/ 的/ 方法/ 预测/ 移动/ 对象/ 未来/ 的/ 大概/ 位置/ 信息/ ,/ 并/ 提出/ 了/ 高效/ 的/ 概率/ 范围/ 查询/ 和/ 概率/ K/ 最近/ 邻/ 查询/ 算法/ ./ 但/ 由于/ 上述/ 索引/ 采用/ 传统/ 的/ 自顶向下/ 更新/ 方法/ ,/ 不断/ 变化/ 的/ 不/ 确定/ 移动/ 对象/ 位置/ 信息/ ,/ 会/ 使得/ 更新/ 过于/ 频繁/ 而/ 导致/ 系统资源/ 枯竭/ ,/ 从而/ 影响/ 系统/ 的/ 响应/ 时间/ 和/ 查询/ 效率/ ./ 本文/ 针对/ 支持/ 频繁/ 位置/ 更新/ 的/ 不/ 确定/ 移动/ 对象/ 当前/ 及/ 未来/ 位置/ 索引/ 方法/ ,/ 提出/ 了/ 一种/ 基于/ TPU/ 树/ 与/ 更新/ 备忘录/ (/ Update/ -/ Memo/ ,/ UM/ )/ 内存/ 结构/ 的/ TPU2M/ 树/ ,/ 并/ 提出/ 了/ 一种/ 改进/ 的/ 基于/ 备忘录/ 更新/ // 插入/ (/ ModifiedMemo/ -/ BasedUpdate/ // Insert/ ,/ MMBU/ // I/ )/ 算法/ ./ TPU2M/ 树/ 在/ 基本/ TPU/ 树结构/ 上/ ,/ 增加/ 了/ 记录/ 不/ 确定/ 移动/ 对象/ 状态/ 特征/ 的/ UM/ 内存/ 结构/ ./ MMBU/ // I/ 算法/ 利用/ UM/ 控制/ 不/ 确定/ 移动/ 对象/ 的/ 位置/ 更新/ ,/ 在/ 保留/ 原有/ 记录/ 的/ 情况/ 下/ 首先/ 插入/ 新/ 记录/ ,/ 这样/ 就/ 减少/ 了/ 查找/ 原有/ 记录/ 的/ 磁盘/ I/ // O/ ,/ 从而/ 很大/ 程度/ 上/ 提高/ 了/ 记录/ 的/ 更新/ 效率/ ,/ 然后/ TPU2M/ 树/ 利用/ 空间/ 清理/ 器/ ,/ 定期/ 清除/ 索引/ 树叶/ 节点/ 中/ 包含/ 的/ 旧/ 记录/ ,/ 同时/ 维护/ 并/ 限定/ UM/ 内存/ 结构/ 的/ 大小/ ,/ 为/ 索引/ 树/ 高效/ 稳定/ 运行/ 提供/ 保证/ ./ 本文/ 的/ 主要/ 贡献/ 如下/ :/ (/ 1/ )/ 本文/ 引入/ 了/ 一种/ 新颖/ 的/ 数据结构/ —/ —/ —/ UM/ 内存/ 结构/ ./ 通过/ 与/ 传统/ 的/ 索引/ 结构/ TPU/ 树/ 相结合/ ,/ 提出/ 了/ 一种/ 新/ 的/ 不/ 确定/ 移动/ 对象/ 索引/ 结构/ TPU2M/ 树/ ./ (/ 2/ )/ 本文/ 出/ 了/ 一种/ 改进/ 的/ 基于/ 备忘录/ 的/ 更新/ // 插入/ MMBU/ // I/ 算法/ ,/ 采用/ 合适/ 的/ TPU2M/ 树/ 索引/ ,/ 显著/ 地/ 提高/ 了/ 大量/ 不/ 确定/ 移动/ 对象/ 并发/ 更新/ 的/ 效率/ ,/ 并/ 利用/ 自/ 底向上/ 的/ 更新/ 思想/ 来/ 进一步提高/ 索引/ 树/ 的/ 更新/ 效率/ ./ (/ 3/ )/ 本文/ 引入/ 了/ 空间/ 清理/ 器/ ,/ 利用/ 合适/ 的/ 运行机制/ 可/ 显著/ 地/ 稳定/ TPU2M/ 树/ 的/ 运行/ 效率/ ./ (/ 4/ )/ 设计/ 了/ 详细/ 的/ 性能/ 评价/ 实验/ ,/ 并/ 与/ 传统/ 算法/ 进行/ 了/ 比较/ ./ 实验/ 结果表明/ ,/ 采用/ MMBU/ // I/ 算法/ Page3/ 的/ TPU2M/ 树/ 动态/ 更新/ 性能/ 大大/ 优于/ TPU/ 树/ 和/ ABx/ 树/ 索引/ ,/ 查询/ 性能/ 与/ 同类/ 索引/ 大致/ 相当/ ./ 本文/ 第/ 2/ 节/ 详细描述/ TPU2M/ 树/ 不/ 确定/ 移动/ 对象/ 索引/ 的/ 内部结构/ ,/ 及其/ 更新/ 与/ 查询处理/ 算法/ ;/ 第/ 3/ 节/ 引入/ 了/ 空间/ 清理/ 器/ 并/ 具体/ 讨论/ 其/ 对/ TPU2M/ 树/ 索引/ 性能/ 的/ 影响/ ;/ 第/ 4/ 节/ 给出/ 不同/ 更新/ 策略/ 的/ 代价/ 分析/ ;/ 第/ 5/ 节/ 给出/ 实验/ 结果/ ;/ 第/ 6/ 节对/ 全文/ 工作/ 进行/ 总结/ ,/ 并/ 介绍/ 了/ 未来/ 的/ 研究/ 方向/ ./ 2TPU2M/ 树/ 不/ 确定/ 移动/ 对象/ 索引/ U/ 树是/ Tao/ 等/ 人/ [/ 1/ ]/ 提出/ 的/ 一种/ 针对/ 不/ 确定/ 对象/ 当前/ 位置/ 信息管理/ 的/ 索引/ 模型/ ,/ 丁晓锋/ 等/ 人/ [/ 4/ ]/ 在/ 此基础/ 上/ 提出/ 了/ 针对/ 不/ 确定/ 移动/ 对象/ 的/ TPU/ 树/ 索引/ 策略/ ./ U/ 树及/ TPU/ 树/ 采用/ 传统/ 的/ 删除/ 加/ 插入/ 两/ 阶段/ 更新/ 策略/ ,/ 即当/ 移动/ 对象/ 发出/ 位置/ 或/ 速度/ 更新/ 请求/ 时/ ,/ 算法/ 首先/ 从/ 索引/ 树根/ 节点/ 开始/ ,/ 依次/ 比较/ 此/ 对象/ 原有/ MBR/ (/ VBR/ )/ 与/ 中间/ 节点/ MBR/ (/ VBR/ )/ 大小/ ,/ 直至/ 在/ 叶/ 节点/ 中/ 找到/ 移动/ 对象/ 所在/ 的/ 索引/ 项/ 并/ 删除/ ,/ 然后/ 再/ 执行/ 一次/ 自顶向下/ 的/ 搜索/ ,/ 在/ 合适/ 位置/ 中/ 插入/ 新/ 的/ 移动/ 对象/ 记录/ ./ 自顶向下/ 的/ 更新/ 模式/ 非常简单/ 直观/ ,/ 有助于/ 索引/ 结构/ 的/ 维护/ ./ 但/ 由于/ 所有/ 的/ 移动/ 对象/ 位置/ 记录/ 存储/ 在/ 索引/ 树/ 的/ 叶/ 节点/ 中/ ,/ 采用/ 此种/ 模式/ 往往/ 从根/ 节点/ 开始/ 搜索/ 相关/ 记录/ ,/ 从而/ 具有/ 很/ 高/ 的/ 搜索/ 定位/ 代价/ ,/ 在/ 频繁/ 更新/ 应用/ 中/ 必然/ 导致/ 索引/ 树/ 查询/ 性能/ 的/ 下降/ ./ 鉴于/ 此/ ,/ 我们/ 采用/ 类似/ 于/ 文献/ [/ 14/ ]/ 中/ 基于/ 备忘录/ (/ Memo/ -/ BasedUpdate/ ,/ MBU/ )/ 更新/ 的/ 思想/ 来/ 提高/ TPU/ 树/ 的/ 动态/ 更新/ 和/ 访问/ 效率/ ./ 并/ 利用/ Lee/ 等/ 人/ [/ 13/ ]/ 提出/ 的/ 自/ 底向上/ (/ BUU/ )/ 的/ 更新/ 思想/ 来/ 进一步提高/ 索引/ 树/ 的/ 频繁/ 更新/ 效率/ ./ 根据/ 基于/ 备忘录/ 更新/ 的/ 思想/ ,/ 索引/ 结构/ 必须/ 能够/ 区分/ 相关/ 移动/ 物体/ 位置/ 的/ 新旧/ 记录/ ,/ 因此/ 利用/ 一个/ 记录/ 移动/ 物体/ 更新/ 状态/ 的/ 更新/ 备忘录/ (/ UM/ )/ 内存/ 结构/ 来/ 标识/ 移动/ 物体/ 的/ 最新/ 位置/ 记录/ ./ 为了/ 将/ 位置/ 更新/ 记录/ 及时/ 插入/ 到/ 索引/ 树中/ ,/ 我们/ 提出/ 了/ 改进/ 的/ 基于/ 备忘录/ 更新/ // 插入/ (/ MMBU/ // I/ )/ 算法/ ,/ 思想/ 如下/ :/ 首先/ 判断/ 其/ 是否/ 超出/ 所在/ 叶/ 节点/ 的/ MBR/ (/ VBR/ )/ 范围/ 之内/ ,/ 若/ 未/ 超出范围/ ,/ 则/ 直接/ 更新/ 叶/ 节点/ 页面/ 及/ 数据/ 页面/ 即可/ ;/ 否则/ ,/ 算法/ 不需/ 首先/ 查找/ 并/ 删除/ 相应/ 的/ 旧/ 记录/ ,/ 而是/ 允许/ 同一/ 对象/ 的/ 若干/ 新旧/ 位置/ 记录/ 共存/ 于/ 索引/ 树中/ ,/ 即/ 直接/ 利用/ 标准/ 的/ TPU/ 树/ 插入/ 算法/ 自顶向下/ 进行/ 搜索/ ,/ 在/ 合适/ 的/ 叶/ 节点/ 中/ 插入/ 新/ 记录/ ,/ 并/ 同时/ 更新/ UM/ 内存/ 结构/ 的/ 在/ TPU2M/ 树中/ 能否/ 有效/ 地/ 管理/ 和/ 维护/ 不/ 确定/ 移动/ 对象/ 的/ 新旧/ 记录/ 是/ 影响/ 索引/ 树/ 性能/ 的/ 关键/ ./ 我们/ 引入/ 时间/ 戳/ (/ time/ -/ stamp/ )/ 概念/ 来/ 标识/ 记录/ 的/ 新旧/ 程度/ ./ 在/ TPU/ 树/ 基本/ 索引/ 结构/ 基础/ 上/ ,/ 每个/ TPU2M/ 树叶子/ 节点/ 的/ 记录/ 项/ 都/ 添加/ 了/ 一个/ 标识/ 该/ 记录/ 插入/ 时间/ 的/ time/ -/ stamp/ 属性/ ,/ 记录/ 形式/ 为/ 〈/ oid/ ,/ PCR/ (/ pi/ )/ ,/ VBR/ ,/ ptr/ ,/ time/ -/ stamp/ 〉/ ,/ oid/ ,/ PCR/ (/ pi/ )/ ,/ VBR/ ,/ ptr/ ,/ time/ -/ stamp/ 分别/ 表示/ 不/ 确定/ 移动/ 对象/ 标识/ 、/ Pi/ 限定性/ 区域/ 、/ 速度/ 包围/ 框/ 、/ 节点/ 磁盘/ 页面/ 地址/ 、/ 时间/ 戳/ ./ 为/ 方便/ 快速/ 区分/ 移动/ 对象/ 的/ 最新/ 记录/ 和/ 若干/ 旧/ 记录/ ,/ TPU2M/ 树/ 引入/ 了/ 辅助/ 内存/ 结构/ UM/ ,/ 其/ 包含/ 数据项/ 的/ 记录/ 形式/ 为/ 〈/ oid/ ,/ Slatest/ ,/ Ntotal/ 〉/ ,/ oid/ ,/ Slatest/ ,/ Ntotal/ 分别/ 表示/ 不/ 确定/ 移动/ 对象/ 标识/ 、/ 不/ 确定/ 移动/ 对象/ oid/ 的/ 最新/ 时间/ 戳/ 、/ 不/ 确定/ 移动/ 对象/ oid/ 在/ 索引/ 树中/ 的/ 记录/ 总数/ ./ 例如/ ,/ 〈/ 100/ ,/ 20090623001/ ,/ 5/ 〉/ 表示/ 标识/ 为/ 100/ 的/ 不/ 确定/ 移动/ 对象/ 在/ 索引/ 树/ 中共/ 有/ 5/ 条/ 记录/ ,/ 其中/ 具有/ 时间/ 戳/ ‘/ 20090623001/ ’/ 的/ 记录/ 是/ 最新/ 位置/ 记录/ ./ 为/ 进一步/ 加快/ 移动/ 对象/ 在/ UM/ 中/ 的/ 查找/ 速度/ ,/ TPU2M/ 树/ 索引/ 还/ 增加/ 了/ 一个/ 建于/ 移动/ 对象/ 标识/ oid/ 之上/ 的/ 辅助/ 索引/ (/ Hash/ )/ 来/ 定位/ 不/ 确定/ 移动/ 对象/ 在/ UM/ 中/ 的/ 位置/ ./ 另外/ ,/ 当/ 空间/ 清理/ 器/ 清除/ 叶/ 节点/ 中/ 包含/ 的/ 旧/ 记录/ 之后/ ,/ TPU2M/ 树/ 需要/ 以自/ 底向上/ 的/ 方式/ 动态/ 调整/ 树结构/ ,/ 这/ 就/ 要求/ 各/ 节点/ 能够/ 访问/ 父/ 节点/ 磁盘/ 页面/ ,/ 因此/ ,/ 我们/ 修改/ 了/ TPU/ 树/ 索引/ 节点/ 的/ 记录/ 结构/ ,/ 增加/ 了/ 一个/ 指向/ 父/ 节点/ 磁盘/ 页面/ 地址/ 的/ 物理/ 指针/ parent/ -/ ptr/ ./ TPU2M/ 树/ 索引/ 节点/ 记录/ 形式/ 为/ 〈/ block/ ,/ level/ ,/ num/ _/ entries/ ,/ entry/ ,/ …/ ,/ entry/ ,/ parent/ -/ ptr/ 〉/ ,/ 其中/ block/ 表示/ 该/ 节点/ 所在/ 的/ 磁盘/ 页面/ 号/ ;/ level/ 表示/ 该/ 节点/ 在/ 索引/ 树中/ 的/ 层次/ (/ 叶/ 结点/ 层次/ 为/ 0/ ,/ 根/ 节点/ 层次/ 最大/ )/ ;/ num/ _/ entries/ 表示/ 该/ 节点/ 中/ 包含/ 的/ 记录/ 项/ 数目/ ./ 相关/ 内容/ 以/ 标识/ 新旧/ 记录/ ./ TPU2M/ 树/ 在/ 记录/ 更新/ 次数/ 达到/ 一定/ 条件/ 时/ 激活/ 空间/ 清理/ 器/ ,/ 然后/ 空间/ 清理/ 器/ 依据/ UM/ 内存/ 结构/ 的/ 内容/ 清除/ 当前/ 叶子/ 节点/ 中/ 包含/ 的/ 所有/ 旧/ 记录/ ./ 2.1/ TPU2M/ 树/ 索引/ 结构图/ 1/ 所示/ 为/ 支持/ MMBU/ // I/ 算法/ 的/ TPU2M/ 树/ 索引/ 结构/ ./ 其中/ 右上角/ 为/ 辅助/ 内存/ 结构/ UM/ ./ 特别/ 地/ ,/ 考虑/ 到/ 大部分/ 不/ 确定/ 移动/ 对象/ 都/ 会/ 发生/ 位置/ 更新/ 从而/ 在/ 索引/ 树中/ 存在/ 多条/ 记录/ ,/ 我们/ 在/ UM/ 的/ 记录/ 的/ 部分/ 结构/ 中/ ,/ 使/ Ntotal/ 标识/ 不/ 确定/ 移动/ 对象/ 在/ 索引/ 树中/ 的/ 总/ 记录/ 数/ ,/ 这样/ 就/ 保证/ UM/ 在/ 大小/ 相当/ Page4/ 的/ 情况/ 下/ ,/ 避免/ 终因/ Ntotal/ 仅仅/ 标识/ 不/ 确定/ 移动/ 对象/ 的/ 旧/ 记录/ 数所/ 引起/ 的/ 记录/ 幻像/ 问题/ ./ 此外/ ,/ 内存/ 结图/ 1/ 支持/ MMUB/ // I/ 算法/ 的/ TPU2M/ 树结构/ 2.2/ MMBU/ // I/ 算法/ 当/ 不/ 确定/ 移动/ 对象/ 发出/ 位置/ 更新/ 请求/ 时/ ,/ 新/ 的/ 位置/ 记录/ 信息/ 要求/ 被/ TPU2M/ 树/ 索引/ ,/ 算法/ 首先/ 根据/ UM/ 中/ 的/ 记录/ 确定/ 移动/ 对象/ 的/ 叶/ 节点/ ,/ 并/ 判断/ 其/ 是否/ 超出/ 所在/ 叶/ 节点/ 的/ MBR/ (/ VBR/ )/ 范围/ 之内/ ,/ 若/ 未/ 超出范围/ ,/ 则/ 直接/ 更新/ 叶/ 节点/ 页面/ 及/ 数据/ 页面/ ,/ 否则/ 更新过程/ 等价/ 于/ 在/ 索引/ 树中/ 插入/ 新/ 记录/ ,/ 因此/ ,/ 插入/ 新/ 记录/ 和/ 更新/ 索引/ 树/ 中原/ 有/ 记录/ 在/ TPU2M/ 树中/ 具有/ 相同/ 的/ 处理过程/ ,/ 其/ 关键在于/ 如何/ 处理/ 产生/ 的/ 移动/ 对象/ 位置/ 信息/ 新/ 记录/ ./ 图/ 2/ (/ a/ )/ 所示/ 为/ TPU2M/ 树/ 的/ 插入/ 处理过程/ ./ 其中/ 关键/ 的/ MMBU/ // I/ 算法/ 思想/ 如下/ :/ 首先/ 给/ 预处理/ 的/ 新/ 记录/ 分配/ 时间/ 戳/ ,/ 执行/ 标准/ 的/ TPU/ 树/ 插入/ 算法/ 在/ 索引/ 树中/ 插入/ 新/ 记录/ ,/ 然后/ 更新/ 内存/ 结构/ UM/ 的/ 内容/ ,/ 如果/ 新/ 记录/ 的/ oid/ 在/ UM/ 中/ 不/ 存在/ ,/ 则/ 插入/ 新/ 的/ UM/ 数据项/ 并/ 设置/ 相应/ Slatest/ 为/ time/ -/ stamp/ ,/ Ntotal/ 为/ 1/ ;/ 否则/ ,/ 将/ 相应/ UM/ 数据项/ 中/ 的/ 时间/ 戳/ 更新/ 为/ time/ -/ stamp/ ,/ 且/ 移动/ 对象/ oid/ 的/ 记录/ 总数/ 加/ 1/ ./ 算法/ 1/ 描述/ 了/ MMBU/ // I/ 算法/ ./ 算法/ 1/ ./ MMBU/ // I/ 算法/ ./ Input/ :/ oid/ ,/ newPCR/ ,/ newVBROutput/ :/ updatedTPU2M/ -/ treeBegin1/ ./ time/ -/ stamp/ ←/ stampcounter/ ;/ 2/ ./ newrecord/ =/ 〈/ oid/ ,/ newPCR/ ,/ newVBR/ ,/ time/ -/ stamp/ 〉/ ;/ 3/ ./ insertthenewrecordtotheTPU2M/ -/ tree/ ;/ 4/ ./ searchoidinUpdateMemoUM/ ;/ 5/ ./ ifnoentryisfoundinUM6/ ./ theninsert/ (/ oid/ ,/ time/ -/ stamp/ ,/ 1/ )/ toUM/ ;/ 7/ ./ else8/ ./ fentry/ ←/ entryfoundinUM9/ ./ fentry/ ./ time/ -/ stamp/ ←/ time/ -/ stamp/ 构/ UM/ 为/ 索引/ 结构/ 快速/ 准确/ 在/ 叶子/ 节点/ 中/ 定位/ 不/ 确定/ 移动/ 对象/ 的/ 存储/ 位置/ 提供/ 了/ 可靠保证/ ./ 10/ ./ fentry/ ./ Ntotal/ ++/ ;/ 11/ ./ endifEnd2/ ./ 3/ 查询处理/ TPU2M/ 树/ 的/ 查询处理/ 过程/ 类似/ 于/ TPU/ 树/ ./ 但/ 由于/ 移动/ 对象/ 的/ 若干/ 旧/ 记录/ 和/ 新/ 记录/ 共存/ 于/ TPU2M/ 树中/ ,/ 因此/ 需要/ 在/ 结果/ 集中/ 剔除/ 满足条件/ 的/ 旧/ 记录/ ,/ 保留/ 满足条件/ 的/ 最新/ 记录/ ./ 查询处理/ 过程/ 如下/ :/ 首先/ 利用/ 标准/ TPU/ 树/ 查询处理/ 算法/ ,/ 得到/ 实际/ 结果/ 的/ 候选/ 集/ ,/ 然后/ 利用/ UM/ 作为/ 过滤器/ 清除/ 候选/ 集中/ 的/ 旧/ 记录/ ./ 图/ 2/ (/ b/ )/ 所示/ 为/ TPU2M/ 树/ 的/ 查询处理/ 过程/ ./ UM/ 过滤器/ 的/ 工作/ 原理/ 如下/ :/ 比较/ 候选/ 集中/ 叶子/ 节点/ 记录/ 项/ 与/ 相应/ UM/ 数据项/ 的/ 时间/ 戳/ 大小/ ,/ 若叶/ 节点/ 记录/ 项/ 的/ 时间/ 戳/ 等于/ UM/ 数据项/ 的/ 时间/ 戳/ ,/ 则/ 此/ 记录/ 为/ 最新/ 的/ 不/ 确定/ 移动/ 对象/ 位置/ 信息/ 记录/ ,/ 并/ 保存/ 在/ 最终/ 结果/ 集中/ ,/ 否则/ ,/ 此/ 记录/ 作为/ 旧/ 的/ 移动/ 对象/ 位置/ 信息/ 记录/ 而/ 被/ 清除/ ./ 算法/ 2/ 描述/ 了/ Filter/ 算法/ ./ Page5/ 算法/ 2/ ./ Filter/ 算法/ ./ Input/ :/ leafentryeOutput/ :/ answer/ -/ setBegin1/ ./ searche/ ./ oidinUpdateMemoUM/ ;/ 2/ ./ fentry/ ←/ entryfoundinUM/ ;/ 3/ ./ ife/ ./ time/ -/ stamp/ =/ =/ fentry/ ./ time/ -/ stamp4/ ./ thenanswer/ -/ set/ ←/ fentry/ ;/ 5/ ./ endif6/ ./ returnanswer/ -/ set/ ;/ End3/ 空间/ 清理/ 器/ 大量/ 移动/ 对象/ 位置/ 信息/ 旧/ 记录/ 的/ 存在/ 势必/ 影响/ TPU2M/ 索引/ 树/ 的/ 查询/ 和/ 更新/ 效率/ ,/ 因此/ ,/ 我们/ 使用/ 空间/ 清理/ 器/ (/ spacecleaner/ )/ 定期/ 清除/ TPU2M/ 树中/ 包含/ 的/ 旧/ 记录/ ,/ 并/ 动态/ 维护/ UM/ 内存/ 结构/ 的/ 大小/ ,/ 从而/ 提高/ 索引/ 树/ 的/ 整体/ 效率/ ./ 空间/ 清理/ 器/ 利用/ 清除/ (/ Clean/ )/ 算法/ 处理/ 索引/ 树中/ 存在/ 的/ 移动/ 对象/ 位置/ 信息/ 旧/ 记录/ ,/ 空间/ 清理/ 器/ 的/ 工作/ 原则/ 主要/ 有/ 两条/ :/ 懒散/ 处理/ (/ lazily/ )/ 和/ 批量/ 删除/ (/ batches/ )/ ,/ 即/ 索引/ 树因/ 更新/ 或/ 插入/ 操作/ 产生/ 的/ 移动/ 对象/ 旧/ 记录/ ,/ 并/ 没有/ 被/ 清理/ 器/ 当即/ 删除/ ,/ 而是/ 根据/ 一定/ 清理/ 周期/ ,/ 在/ 索引/ 树/ 当前/ 操作/ 的/ 叶/ 节点/ 内/ 批量/ 删除/ 该/ 节点/ 包含/ 的/ 所有/ 移动/ 对象/ 旧/ 记录/ ./ Clean/ 算法/ 负责/ 清除/ 指定/ 叶/ 节点/ 中/ 包含/ 的/ 所有/ 移动/ 对象/ 旧/ 记录/ ./ Clean/ 算法/ 首先/ 将/ 指定/ 叶/ 节点/ 中/ 的/ 所有/ 记录/ 项/ 与/ 相应/ UM/ 数据项/ 作/ 比较/ ,/ 删除/ 判定/ 出/ 的/ 旧/ 记录/ ,/ 并/ 对/ 相应/ UM/ 数据项/ 作/ 修改/ ,/ 然后/ 根据/ 该/ 节点/ 清除/ 后/ 的/ 情况/ ,/ 动态/ 调整/ 索引/ 树结构/ ,/ 算法/ 3/ 描述/ 了/ Clean/ 算法/ ./ 算法/ 3/ ./ Clean/ 算法/ ./ Input/ :/ leafnodeNOutput/ :/ cleanedTPU2M/ -/ treeBegin1/ ./ foreachentryeinN2/ ./ searche/ ./ oidinUM/ ;/ 3/ ./ fentry/ ←/ entryfoundinUM/ ;/ 4/ ./ ife/ ./ time/ -/ stamp/ =/ =/ fentry/ ./ time/ -/ stamp5/ ./ thene/ c++/ ;/ // // eccountsthelatestentry6/ ./ else7/ ./ deleteefromN8/ ./ fentry/ ./ Ntotal/ -/ -/ ;/ 9/ ./ iffentry/ ./ Ntotal/ =/ =/ 010/ ./ thendeletefentryfromUM/ ;/ 11/ ./ endif12/ ./ endif13/ ./ endfor14/ ./ ifec/ </ MINentries/ // // theminimumnumberofen/ -/ 15/ ./ thenreinserttheremainingentriesofNintothe16/ ./ elseadjusttheNandN/ ’/ sancestorsinabottomup17/ ./ endifEnd/ 另外/ ,/ 我们/ 引入/ 检查/ 率/ (/ inspectionratio/ ,/ ir/ )/ 来/ 衡量/ 空间/ 清理/ 器/ 检查/ 叶/ 节点/ 的/ 频率/ ./ 检查/ 率/ ir/ 定义/ 为/ :/ 在/ 时间段/ T/ 内/ ,/ 被/ 清理/ 的/ 叶/ 节点/ 个数/ C/ 与/ TPU2M/ 树/ 更新/ 次数/ U/ 的/ 比率/ ,/ 即/ ir/ =/ C/ // U/ ./ 其/ 大小/ 设置/ 直接/ 影响/ 到/ TPU2M/ 树/ 的/ 清理/ 周期/ ,/ 对/ 索引/ 树/ 整体/ 性能/ 有/ 至关重要/ 的/ 影响/ ./ 较/ 低/ 的/ 检查/ 率/ 虽然/ 提高/ 了/ TPU2M/ 树/ 的/ 更新/ 效率/ ,/ 但/ 因此/ 导致/ 的/ 过/ 多/ 移动/ 对象/ 位置/ 信息/ 旧/ 记录/ 会/ 影响/ TPU2M/ 树/ 的/ 查询/ 效率/ ;/ 相反/ ,/ 检查/ 率/ 偏/ 高/ 将/ 引起/ 清理/ 器/ 频繁/ 的/ 扫描/ 叶/ 节点/ ,/ 在/ 不同/ 的/ 触发/ 机制/ 下会/ 影响/ 到/ 索引/ 树/ 的/ 更新/ 效率/ ./ 因此/ ,/ 检查/ 率/ ir/ 的/ 设置/ 在/ TPU2M/ 树/ 更新/ 和/ 查询/ 效率/ 之间/ 存在/ 平衡/ ,/ 我们/ 将/ 在/ 代价/ 分析/ 和/ 实验/ 仿真/ 中/ 进一步/ 说明/ ./ 4/ 代价/ 分析/ 为/ 方便/ 对/ TPU2M/ 树/ 索引/ 性能/ 和/ 不同/ 的/ 更新/ 策略/ 进行/ 代价/ 分析/ ,/ 参照/ 文献/ [/ 14/ ]/ 我们/ 约定/ 所/ 需/ 代价/ 参数/ 如下/ :/ L/ 为/ 索引/ 树中/ 叶子/ 节点/ 的/ 个数/ ;/ E/ 为/ 辅助/ 内存/ 结构/ UM/ 中/ 记录/ 项/ 的/ 大小/ ;/ H/ 为/ 索引/ 树/ 的/ 高度/ ;/ M/ 为/ 索引/ 树中/ 不/ 确定/ 移动/ 对象/ 的/ 总/ 个数/ 以及/ 移动/ 对象/ 更新/ 总/ 次数/ U/ ./ 4.1/ 失效率/ 与/ UM/ 大小/ 根据/ 空间/ 清理/ 器/ 在/ TPU2M/ 树中/ 的/ 运行机制/ ,/ 存在/ 于/ 叶子/ 节点/ 中/ 的/ 所有/ 旧/ 记录/ ,/ 在/ 空间/ 清理/ 器/ 的/ 一次/ 运行/ 之后/ 将/ 被/ 全部/ 清除/ ,/ 而/ 每个/ 叶子/ 节点/ 在/ 索引/ 树/ 累计/ 至/ L/ // ir/ 次/ 插入/ // 更新/ 操作/ 才/ 被/ 清理/ 器/ 扫描/ 一次/ ./ 因此/ ,/ 在/ 最坏/ 情况/ 下/ 索引/ 树中/ 包含/ 旧/ 记录/ 的/ 个数/ 为/ L/ // ir/ ./ 作为/ TPU2M/ 树中/ 重要/ 性能指标/ 之一/ 的/ 失效率/ (/ obsoleteratio/ ,/ or/ )/ ,/ 我们/ 定义/ 为/ 索引/ 树中/ 旧/ 记录/ 个数/ 占/ 移动/ 对象/ 总/ 数量/ 的/ 比率/ ./ 较/ 高/ 的/ 失效率/ 意味着/ 过多/ 移动/ 对象/ 位置/ 信息/ 旧/ 记录/ 存在/ 索引/ 树中/ ,/ 因而/ 影响/ TPU2M/ 树/ 的/ 查询/ 效率/ ./ 失效率/ 在/ 索引/ 树中/ Page6/ 旧/ 记录/ 个数/ 达到/ 顶峰/ 时/ 具有/ 上/ 限值/ L/ // (/ ir/ ×/ M/ )/ ,/ 因此/ 很/ 容易/ 得到/ TPU2M/ 树中/ 失效率/ 的/ 平均值/ 为/ L/ // 2/ (/ ir/ ×/ M/ )/ ./ 假设/ 每/ 一个/ 不/ 确定/ 移动/ 对象/ 旧/ 记录/ 占用/ 内存/ 结构/ UM/ 一个/ 数据项/ ,/ 则/ UM/ 的/ 上限/ 尺寸/ 为/ (/ L/ ×/ E/ )/ // ir/ ,/ 且/ UM/ 在/ 索引/ 树中/ 的/ 平均/ 大小/ 为/ (/ L/ ×/ E/ )/ // 2ir/ ./ 不难/ 发现/ 失效率/ or/ 和/ UM/ 大小/ 都/ 与/ 叶子/ 节点/ 个数/ L/ 成正比/ ,/ 而/ L/ 远远/ 小于/ 移动/ 对象/ 总/ 个数/ M/ ,/ 因此/ 失效率/ 与/ UM/ 在/ 都/ 保证/ 了/ 较/ 小/ 的/ 值/ ,/ 使得/ UM/ 在/ 内存/ 中/ 得以/ 有效/ 运行/ ,/ 从而/ 确保/ 了/ 索引/ 树/ 高效/ 稳定/ 的/ 性能/ ./ 为/ 进一步/ 证明/ 本/ 索引/ 的/ 有效性/ ,/ 既/ 新增/ 内存/ 结构/ UM/ 的/ 空间/ 复杂度/ 对/ 索引/ 性能/ 的/ 影响/ 是/ 甚微/ 的/ ,/ 我们/ 假设/ 不/ 需要/ 删除/ 索引/ 树中/ 冗余/ 的/ 旧/ 记录/ ,/ 且/ 移动/ 对象/ 的/ 总数/ M/ 保持/ 不变/ ,/ 若/ 一个/ float/ 或/ int/ 型数/ 占/ 4/ 个/ Bytes/ ,/ 那么/ UM/ 的/ 大小/ 等于/ M/ ×/ (/ 4/ +/ 4/ +/ 4/ )/ Bytes/ =/ 12M/ (/ Bytes/ )/ ,/ 当/ M/ 取/ 实验/ 系统/ 中/ 最大/ 的/ 值/ 10Million/ 时/ ,/ UM/ 所/ 占/ 的/ 最大/ 内存/ 为/ 120MB/ ,/ 远/ 小于/ 系统/ 提供/ 的/ 内存/ ,/ 因此/ ,/ 空间/ 复杂度/ 的/ 增加/ 对/ 索引/ 性能/ 的/ 影响/ 是/ 微小/ 的/ ./ 4.2/ 更新/ 代价/ 我们/ 依次/ 分析/ 并/ 给出/ 3/ 种/ 不同/ 更新/ 策略/ :/ 自顶向下/ 更新/ 、/ 自/ 底向上/ 更新/ ,/ 以及/ 基于/ 备忘录/ 更新/ 所/ 需/ 的/ 磁盘/ I/ // O/ 次数/ ,/ 如表/ 1/ 所示/ ./ 其中/ 自顶向下/ 更新/ 代价/ 由/ 两/ 部分/ 构成/ :/ (/ 1/ )/ 查询/ 并/ 删除/ 旧/ 记录/ 的/ 代价/ ;/ (/ 2/ )/ 插入/ 新/ 节点/ 的/ 代价/ ./ 由于/ 索引/ 树/ 包含/ 节点/ 之间/ 的/ 区域/ 重叠/ 性/ ,/ 查询/ 一条/ 记录/ 在/ 最好/ 情况/ 下/ 也/ 要/ 访问/ H/ 个/ 节点/ ,/ 在/ 最坏/ 情况/ 下要/ 访问/ L/ ×/ (/ L/ -/ 1/ )/ // 4/ 个/ 节点/ ./ 搜索/ 到/ 旧/ 记录/ 后要/ 进行/ 删除/ 操作/ 并/ 写/ 回/ 磁盘/ ,/ 在/ 没有/ 节点/ 下溢/ 或/ 上溢/ 的/ 情况/ 下/ 至少/ 需要/ 一次/ 写/ 磁盘/ ./ 插入/ 新/ 记录/ 需要/ 首先/ 访问/ H/ 个/ 节点/ 以/ 搜索/ 到/ 合适/ 的/ 叶子/ 节点/ ,/ 然后/ 对/ 该/ 叶子/ 节点/ 进行/ 读写/ 磁盘操作/ ./ 因此/ ,/ 自顶向下/ 更新/ 策略/ 的/ 一次/ 更新/ 在/ 最好/ 情况/ 下/ 需要/ 2/ ×/ (/ H/ +/ 1/ )/ 次/ 磁盘/ I/ // O/ ,/ 最坏/ 情况/ 下/ 需要/ L/ ×/ (/ L/ -/ 1/ )/ // 4/ +/ H/ +/ 2/ 次/ 磁盘/ I/ // O/ ./ 更新/ 策略/ 自顶向下/ 自/ 底向上/ 备忘录/ 当新/ 记录/ 插入/ 到/ 旧/ 记录/ 所在/ 的/ 原始/ 叶子/ 节点/ 时/ ,/ 自/ 底向上/ 更新/ 策略/ 取得/ 最小/ 更新/ 代价/ 3/ 次/ 磁盘/ I/ // O/ :/ 读取/ 辅助/ 索引/ 以/ 定位/ 到/ 原始/ 叶子/ 节点/ ,/ 然后/ 读取/ 并/ 写/ 回该/ 叶子/ 节点/ ./ 当新/ 记录/ 插入/ 到/ 与/ 旧/ 记录/ 所在/ 原始/ 叶子/ 节点/ 不/ 相关/ 的/ 叶子/ 节点/ 时/ ,/ 自/ 底向上/ 更新/ 策略/ 取得/ 最大/ 更新/ 代价/ H/ +/ 6/ 次/ 磁盘/ I/ // O/ :/ 读取/ 辅助/ 索引/ 以/ 定位/ 到/ 原始/ 叶子/ 节点/ ,/ 然后/ 读取/ 并/ 写/ 回该/ 叶子/ 节点/ ,/ 访问/ H/ 个/ 节点/ 以/ 搜索/ 到/ 合适/ 的/ 叶子/ 节点/ ,/ 然后/ 对/ 该/ 叶子/ 节点/ 进行/ 读写/ 磁盘操作/ 以/ 插入/ 新/ 记录/ ,/ 最后/ 写回/ 辅助/ 索引/ 以/ 定位/ 新/ 记录/ ./ 基于/ 备忘录/ 的/ 更新/ 策略/ 只/ 需/ 考虑/ 将/ 新/ 记录/ 直接插入/ 到/ 叶子/ 节点/ 的/ 代价/ ,/ 因此/ ,/ 无论是/ 最好/ 或者/ 最坏/ 情况/ 下该/ 更新/ 策略/ 均/ 需要/ H/ +/ 1/ 次/ 磁盘/ I/ // O/ ./ 需要/ 指出/ ,/ 由于/ TPU2M/ 树中/ 使用/ 的/ 空间/ 清理/ 器/ 在/ 索引/ 树/ 当前/ 操作/ 节点/ 中/ 进行/ 清理/ 工作/ ,/ 因此/ 清除/ 旧/ 记录/ 并不需要/ 多余/ 的/ 磁盘/ I/ // O/ ./ 索引/ 树/ 的/ 高度/ 通常/ 在/ 4/ 层/ 左右/ ,/ 因此/ 基于/ 备忘录/ 更新/ 在/ 平均/ 情况/ 下/ 具有/ 最小/ 的/ 磁盘/ I/ // O/ 次数/ ./ 5/ 实验/ 仿真/ 与/ 性能/ 评估/ 为/ 切实/ 评价/ TPU2M/ 索引/ 树/ 在/ 不/ 确定/ 移动/ 对象/ 频繁/ 位置/ 更新/ 情况/ 下/ 的/ 索引/ 性能/ ,/ 我们/ 设计/ 了/ 一组/ 实验/ ,/ 对/ 文中/ 提出/ 的/ 算法/ 给出/ 了/ 验证/ 分析/ ,/ 同时/ 对/ TPU/ 树/ ,/ ABx/ 树/ 和/ TPU2M/ 树/ 进行/ 了/ 性能/ 比较/ ./ 实验/ 数据/ 集/ 采用/ 文献/ [/ 15/ ]/ 中/ 基于/ 道路/ 网络/ 的/ 移动/ 对象/ 产生器/ 随机/ 生成/ ./ 在/ 10000km/ ×/ 10000km/ 空间/ 区域/ 内/ 模拟/ 1M/ ~/ 10M/ 移动/ 对象/ 的/ 运动/ 情况/ ,/ 其中/ 默认值/ 为/ 1M/ ./ 每个/ 移动/ 对象/ 的/ 不/ 确定/ 区域/ 是/ 半径/ 为/ 50km/ 的/ 圆圈/ ,/ 概率密度/ 分布/ 为/ 平均/ 分布/ 或/ 高斯分布/ ./ 在/ 初始/ 时刻/ t/ 每个/ 移动/ 对象/ 选择/ 一个/ 目的地/ 开始/ 运动/ ,/ 到达/ 目标/ 之后/ 发出/ 位置/ 更新/ 请求/ 并/ 重新/ 随机/ 选择/ 一个/ 新/ 目的地/ 运动/ ./ 其中/ ,/ 移动/ 对象/ 运动/ 目的地/ 设为/ 5000/ 个/ MBR/ ,/ 移动/ 速度/ 在/ [/ 20/ ,/ 50/ ]/ 之间/ 均匀分布/ ./ 值得注意/ ,/ 移动/ 对象/ 可以/ 从/ 系统/ 中/ 消失/ ,/ 也/ 可以/ 加入/ 新/ 的/ 移动/ 对象/ ,/ 但/ 移动/ 对象/ 总数/ 小于/ 系统/ 设定/ 的/ 值/ ./ 实验/ 中/ 的/ 主要参数/ 如表/ 2/ 所示/ ,/ 其中/ 粗体/ 字/ 为/ 默认值/ ./ 不/ 确定/ 对象/ 的/ 数量/ 数据/ 空间/ 不/ 确定/ 半径/ 检查/ 率/ 更新/ 次数/ 移动/ 距离/ 对/ 移动/ 对象/ 数据/ 集/ ,/ 我们/ 基于/ Gist/ 分别/ 构建/ TPU/ 树/ 和/ TPU2M/ 树/ 索引/ ,/ 节点/ 大小/ 均/ 设置/ 为/ 1KB/ ,/ 中间/ 节点/ 扇出/ 两者/ 均/ 为/ 27/ ,/ 叶子/ 节点/ 的/ 扇/ 出/ 随/ Page7U/ -/ catalog/ 的/ 大小/ 而/ 变化/ ,/ 并/ 设定/ U/ -/ catalog/ =/ 10/ ,/ 页面/ 缓存/ 大小/ 均/ 为/ 100KB/ ./ 基于/ Bx/ 树/ 构建/ ABx/ 树/ 索引/ ,/ 节点/ 大小/ 设置/ 为/ 1KB/ ./ 索引/ 树根/ 节点/ 常驻/ 缓存/ 中/ ,/ 并/ 使用/ 最近/ 最少/ 使用/ (/ LUR/ )/ 缓存/ 替代/ 策略/ ./ 实图/ 3/ 检查/ 率/ 的/ 影响/ 检查/ 率/ ir/ 的/ 大小/ 直接/ 影响/ 到/ 辅助/ 内存/ 结构/ UM/ 的/ 大小/ ,/ TPU2M/ 索引/ 树/ 的/ 查询/ 和/ 更新/ 时间/ 以及/ 失效率/ or/ ./ 图/ 3/ 比较/ 了/ 不同/ ir/ 大小/ 情况/ 下/ 内存/ 结构/ UM/ 的/ 大小/ 和/ 失效率/ ./ 正如/ 第/ 4/ 节中/ 分析/ 的/ 结果/ :/ UM/ 的/ 大小/ 以及/ 失效率/ 均/ 与/ 检查/ 率/ 成反比/ 增长/ ./ 从/ 实验/ 可以/ 看出/ ,/ 随着/ 检查/ 率/ 的/ 逐渐/ 增加/ ,/ 内存/ 结构/ UM/ 的/ 大小/ 与/ 索引/ 树/ 的/ 旧/ 记录/ 比率/ 呈/ 下降/ 趋势/ ./ 这是/ 由于/ 较大/ 的/ 检查/ 率会/ 引起/ 空间/ 清理/ 器/ 更加/ 频繁/ 地/ 删除/ UM/ 中/ 多余/ 的/ 记录/ 项/ 和/ 清理/ 叶子/ 节点/ 中/ 过时/ 的/ 移动/ 对象/ 旧/ 记录/ ,/ 很大/ 程度/ 减少/ 内存/ 结构/ 的/ 大小/ 与/ TPU2M/ 树/ 的/ 旧/ 记录/ 占用率/ ,/ 从而/ 为/ 移动/ 对象/ 新/ 记录/ 开辟/ 更/ 多/ 新/ 的/ 插入/ 空间/ ./ 不难/ 发现/ ,/ 在/ 检查/ 率/ 增至/ 20/ %/ 时/ ,/ 移动/ 对象/ 旧/ 记录/ 比率/ 急剧下降/ 至/ 2/ %/ ,/ 此为/ UM/ 尺寸/ 的/ 大小/ 和/ TPU2M/ 树/ 产生/ 较为理想/ 的/ 更新/ 与/ 查询/ 效率/ 提供/ 了/ 最佳时机/ ,/ 因此/ 在/ 下面/ 的/ 实验/ 当中/ ,/ 我们/ 均/ 设定/ 检查/ 率/ ir/ =/ 20/ %/ ./ 5.1/ 更新/ 代价/ 为/ 全面/ 验证/ TPU2M/ 树/ 在/ 更新/ 策略/ 上/ 的/ 最优性/ ,/ 我们/ 分别/ 比较/ 了/ 不同/ 更新/ 次数/ 、/ 更新/ 幅度/ 以及/ 不同/ 的/ 移动/ 对象/ 个数/ 对/ 索引/ 树/ 更形/ 性能/ 的/ 影响/ ./ 其中/ ,/ 图/ 4/ (/ a/ )/ 比较/ 了/ 不同/ 索引/ 方法/ 在/ 每隔/ 100k/ 次/ 更新/ 后/ 的/ 更新/ 性能/ ./ 可以/ 看出/ ,/ TPU2M/ 树/ 的/ 更新/ 性能/ 在/ 频繁/ 更新/ 中/ 相对/ 于/ 传统/ 索引/ TPU/ 树/ 和/ ABx/ 树/ 具有/ 绝对/ 的/ 优势/ ./ 图/ 4/ (/ b/ )/ 比较/ 了/ 在/ 不同/ 移动/ 更新/ 幅度/ 情况/ 下/ TPU2M/ 树/ 与/ TPU/ 树/ 和/ ABx/ 树/ 动态/ 更新/ 所/ 需要/ 的/ 平均/ 磁盘/ I/ // O/ 次数/ ./ 特别/ 地/ ,/ 不/ 确定/ 移动/ 对象/ 位验/ 硬件/ 环境/ 是/ :/ Intel/ (/ R/ )/ Pentium/ (/ R/ )/ Dual/ -/ Core2/ ./ 50GHz/ 的/ CPU/ ,/ 内存/ 为/ 2048MBRAM/ ;/ 软件/ 环境/ 是/ :/ WindowsXP/ 操作系统/ 和/ Visual/ C++/ 6.0/ 集成/ 开发/ 环境/ ./ 置/ 更新/ 保持/ 较/ 高/ 的/ 频率/ ,/ 平均/ 更新/ 次数/ 在/ 100k/ 左右/ ./ 可以/ 看出/ ,/ TPU2M/ 树/ 的/ 更新/ 所/ 需/ 平均/ 磁盘/ I/ // O/ 维持/ 在/ 50/ 次/ 左右/ 不变/ ,/ 具有/ 很/ 好/ 的/ 动态/ 更新/ 性能/ ./ 而/ TPU/ 树/ 和/ ABx/ 树则/ 始终保持/ 着/ 相对/ 较/ 高/ 的/ 磁盘/ I/ // O/ 次数/ ./ 这是/ 由于/ TPU2M/ 树/ 的/ 更新过程/ 利用/ UM/ 内存/ 结构/ ,/ 在/ 索引/ 树中/ 无需/ 查找/ 旧/ 记录/ 而/ 直接插入/ 不/ 确定/ 移动/ 对象/ 的/ 新/ 记录/ ./ 而且/ ,/ TPU2M/ 树/ 在/ 较/ 小/ 位置/ 更新/ 幅度/ 的/ 情况/ 下/ ,/ 可以/ 采用/ 更新/ 代价/ 较/ 低/ 的/ 自/ 底向上/ 方法/ ,/ 因此/ 更新/ 代价/ 可以/ 得到/ 进一步/ 减少/ ./ 而/ TPU/ 树/ 和/ ABx/ 树/ 由于/ 传统/ 的/ 自顶向下/ 更新过程/ ,/ 使得/ 更新/ 代价/ 相对/ 最高/ ./ 图/ 4/ (/ c/ )/ 比较/ 了/ 在/ 逐渐/ 增加/ 不/ 确定/ 移动/ 对象/ 数量/ 的/ 情况/ 下/ 3/ 种/ 索引/ 的/ 更新/ 所/ 需/ 平均/ 磁盘/ I/ // O/ 次数/ ./ 不难看出/ ,/ TPU/ 树/ 和/ ABx/ 树/ 的/ 更新/ 代价/ 随着/ 不/ 确定/ 移动/ 对象/ 个数/ 的/ 增加/ 趋于/ 增加/ 的/ 趋势/ ,/ 这是/ 由于/ 所/ 查找/ 定位/ 节点/ 个数/ 的/ 增加/ 使得/ 更新/ 代价/ 逐渐/ 增加/ ,/ 而/ TPU2M/ 树/ 的/ 更新/ 代价/ 基本/ 不/ 受/ 移动/ 对象/ 个数/ 的/ 影响/ ./ 这是/ 由于/ TPU2M/ 树/ 的/ 更新/ 代价/ 由/ 插入/ 新/ 记录/ 和/ 清除/ 旧/ 记录/ 两/ 部分/ 组成/ ,/ 而/ 这/ 两/ 阶段/ 的/ 代价/ 正如/ 第/ 4/ 节/ 分析/ 显示/ 并/ 不受/ 移动/ 对象/ 个数/ 的/ 影响/ ./ 因此/ TPU2M/ 索引/ 树/ 具有/ 良好/ 的/ 可扩展性/ ./ 图/ 4/ (/ d/ )/ 给出/ 了/ 在/ 不同/ 移动/ 对象/ 数量/ 情况/ 下/ TPU2M/ 树/ 需要/ 辅助/ 结构/ 内存空间/ 的/ 大小/ ./ 不难/ 发现/ ,/ 内存/ 结构/ UM/ 大小/ 与/ 不/ 确定/ 移动/ 对象/ 个数/ 成/ 线性/ 增长/ ,/ 所以/ 内存/ 结构/ UM/ 的/ 大小/ 相对/ 于/ 索引/ 树/ TPU2M/ 的/ 大小/ 同样/ 是/ 可/ 扩展/ 的/ ./ Page8/ 图/ 4/ 更新/ 性能/ 比较/ 5.2/ 查询/ 代价/ 索引/ 树中/ 旧/ 记录/ 的/ 存在/ 势必/ 影响/ TPU2M/ 树/ 的/ 概率/ 查询/ 效率/ ./ 图/ 5/ 显示/ 了/ TPU2M/ 树/ 与/ TPU/ 树/ 和/ ABx/ 树/ 3/ 种/ 索引/ 结构/ 在/ 回答/ 200/ 个/ 窗口/ 查询/ 所/ 需要/ 的/ 平均/ 磁盘/ I/ // O/ 次数/ ./ 查询/ 窗口/ 范围/ 大小/ 记为/ qRlen/ ,/ 速度/ 矢量/ 记为/ qVlen/ ,/ 窗口/ 查询/ 时间/ 记为/ qTlen/ ,/ 概率/ 阈值/ 记为/ Pc/ (/ Pc/ 的/ 默认值/ 设为/ 0.6/ )/ ./ 其中/ ,/ 图/ 5/ (/ a/ )/ 和/ (/ b/ )/ 比较/ 了/ 3/ 种/ 不同/ 索引/ 方法/ 在/ 每隔/ 100k/ 次/ 更新/ 后/ 的/ 查询/ 性能/ ,/ 可以/ 看出/ ,/ TPU2M/ 树/ 在/ 频繁/ 更新/ 下/ 的/ 查询/ 所/ 需/ 平均/ 磁盘/ I/ // O/ 次数/ 只是/ 略高于/ TPU/ 树/ 和/ ABx/ 树/ ./ 图/ 5/ (/ c/ )/ 和/ (/ d/ )/ 比较/ 了/ 3/ 种/ 不同/ 索引/ 方法/ 在/ 更新/ 幅度/ 不断/ 增加/ 情况/ 下/ 的/ 查询/ 性能/ ./ 可以/ 看出/ ,/ 即使/ 发生/ 了/ 较大/ 位置/ 幅度/ 的/ 频繁/ 更新/ ,/ TPU2M/ 树/ 一直/ 保持/ 着/ 较/ 好/ 的/ 查询/ 性能/ ,/ 平均/ 磁盘/ I/ // O/ 次数/ 只是/ 略高于/ TPU/ 树/ 和/ ABx/ 树/ ./ 这是/ 由于/ 较/ 低/ 的/ 旧/ 记录/ 比率/ 2/ %/ 保证/ 了/ TPU2M/ 树中/ 包含/ 有限/ 的/ 不/ 确定/ 移动/ 对象/ 旧/ 记录/ ./ 值得一提的是/ ,/ TPU2M/ 树/ 的/ 查询/ 性能/ 在/ 不/ 确定/ 移动/ 对象/ 的/ 更新/ 幅度/ 小于/ 100km/ 之前/ ,/ 基本上/ 与/ TPU/ 树/ 和/ ABx/ 树/ 具有/ 相同/ 的/ 概率/ 查询/ 效率/ ,/ 并/ 只/ 在/ 位置/ 更新/ 幅度/ 达到/ 100km/ 时/ 略微/ 高于/ TPU/ 树/ 和/ ABx/ 树/ ./ 这是/ 由于/ TPU2M/ 树/ 在/ 位置/ 更新/ 幅度/ 达到/ 100km/ 之前/ ,/ 大部分/ 采用/ 自/ 底向上/ 的/ 更新/ 方法/ 动态/ 扩展/ 叶子/ 节点/ 及父/ 节点/ 大小/ 以/ 适应/ 新/ 的/ 位置/ 信息/ 记录/ ,/ 之后/ 则/ 删除/ 索引/ 树中/ 多余/ 的/ 旧/ 记录/ ,/ 从而/ 保证/ 了/ 内存/ 结构/ UM/ 具有/ 较/ 小/ 的/ 容量/ ,/ 进而/ 使得/ 内存/ 结构/ 和/ 索引/ 树/ 本身/ 更加/ 紧凑/ ,/ 具有/ 与/ TPU/ 树/ 和/ ABx/ 树/ 相当/ 的/ 概率/ 窗口/ 查询处理/ 效率/ ./ 5.3/ 最近/ 邻/ 查询/ 图/ 6/ 显示/ 了/ TPU2M/ 树/ 与/ TPU/ 树/ 和/ ABx/ 树/ 3/ 种/ 索引/ 结构/ 在/ 回答/ 50/ 个/ 最近/ 邻/ 查询/ 所/ 需要/ 的/ 平均/ 磁盘/ I/ // O/ 次数/ ./ 由于/ 不/ 确定/ 移动/ 对象/ 是/ 随机/ 地/ 分布/ 在/ 一个/ 区域/ 中/ 的/ ,/ 因此/ 最近/ 邻/ 查询/ 返回/ 的/ 是/ 当前/ 时间/ 点上/ 有/ 可能/ 成为/ 查询/ 点/ 最近/ 邻居/ 的/ 移动/ 对象/ ./ 指定/ 的/ 概率/ 阈值/ 记为/ Pc/ (/ Pc/ 的/ 默认值/ 设为/ 0.5/ )/ ,/ 那么/ 查询/ 结果/ 是/ 返回/ 所有/ 最近/ 邻/ 概率/ 大于/ 等于/ 0.5/ 的/ 移动/ 对象/ ./ 其中/ ,/ 图/ 6/ (/ a/ )/ 比较/ 了/ 3/ 种/ 不同/ 索引/ 方法/ 在/ 每隔/ 100k/ 次/ 更新/ 后/ 的/ 最近/ 邻/ 查询/ 性能/ ,/ 跟/ 窗口/ 查询/ 具有/ 相似/ 的/ 结果/ ,/ TPU2M/ 树/ 在/ 频繁/ 更新/ 下/ 的/ 查询/ 所/ 需/ 平均/ 磁盘/ I/ // O/ 次数/ 略高于/ TPU/ 树/ 和/ ABxPage9/ 图/ 5/ 查询/ 性能/ 比较/ 图/ 6/ 最近/ 邻/ 查询/ 性能/ 比较/ 树/ ./ 不难/ 发现/ ,/ 由于/ 最近/ 邻/ 查询/ 的/ 计算/ 复杂度/ 高于/ 窗口/ 查询/ ,/ 因此/ 3/ 种/ 索引/ 结构/ 在/ 处理/ 最近/ 邻/ 查询/ 时/ 的/ 平均/ 磁盘/ I/ // O/ 次数/ 也/ 较/ 高/ ./ 图/ 6/ (/ b/ )/ 比较/ 了/ 3/ 种/ 不同/ 索引/ 方法/ 在/ 更新/ 幅度/ 不断/ 增加/ 情况/ 下/ 的/ 最近/ 邻/ 查询/ 性能/ ./ 跟/ 窗口/ 查询/ 相似/ ,/ 即使/ 移动/ 对象/ 发生/ 了/ 较大/ 位置/ 幅度/ 的/ 频繁/ 更新/ ,/ TPU2M/ 树/ 一直/ 保持/ 着/ 较/ 好/ 的/ 查询/ 性能/ ,/ 平均/ 磁盘/ I/ // O/ 次数/ 只是/ 略高于/ TPU/ 树/ 和/ ABx/ 树/ ./ 不难/ 发现/ ,/ TPU2M/ 树/ 的/ 最近/ 邻/ 查询/ 性能/ 在/ 更新/ 幅度/ 不/ 超过/ 100km/ 之前/ ,/ 基本上/ 与/ TPU/ 树/ 和/ ABx/ 树/ 具有/ 相同/ 的/ 处理/ 效率/ ./ 这是/ 由于/ TPU2MPage10/ 树/ 在/ 位置/ 更新/ 幅度/ 未/ 达到/ 100km/ 时/ ,/ 基本上/ 采用/ 自/ 底向上/ 的/ 更新/ 方法/ 动态/ 扩展/ 叶子/ 节点/ 及其/ 父/ 节点/ 以/ 适应/ 新/ 的/ 位置/ 信息/ 记录/ ,/ 随后/ 删除/ 多余/ 的/ 旧/ 记录/ ,/ 从而/ 保证/ 了/ 内存/ 结构/ UM/ 较/ 小/ 的/ 容量/ ,/ 使得/ 内存/ 结构/ 和/ 索引/ 树/ 更加/ 紧凑/ ,/ 从而/ 具有/ 与/ TPU/ 树/ 和/ ABx/ 树/ 相当/ 的/ 概率/ 最近/ 邻/ 查询处理/ 能力/ ./ 6/ 结论/ 本文/ 在/ 不/ 确定/ 移动/ 对象/ 当前/ 及/ 未来/ 位置/ 索引/ 技术/ TPU/ 索引/ 树/ 基础/ 之上/ ,/ 针对/ 不/ 确定/ 移动/ 对象/ 频繁/ 位置/ 更新/ 带来/ 的/ 系统/ 效率/ 低下/ 问题/ ,/ 提出/ 了/ 一种/ 支持/ 频繁/ 大幅度/ 位置/ 更新/ 的/ 移动/ 对象/ 索引/ 策略/ —/ —/ —/ TPU2M/ 树/ ./ 与/ 传统/ 的/ 索引/ 方法/ 相比/ ,/ 其/ 增加/ 了/ 一个/ 记录/ 移动/ 对象/ 状态/ 特征/ 的/ 更新/ 备忘录/ UM/ 内存/ 结构/ ,/ 并/ 提出/ 了/ 一种/ 改进/ 的/ 基于/ 备忘录/ (/ MMBU/ // I/ )/ 更新/ // 插入/ 算法/ ./ 实验/ 仿真/ 表明/ ,/ 采用/ MMBU/ // I/ 更新/ 算法/ 的/ TPU2M/ 索引/ 树/ 频繁/ 更新/ 效率/ 大大/ 高于/ TPU/ 树/ 和/ ABx/ 树/ ,/ 并且/ 查询/ 效率/ 与/ 同类/ 索引/ 大致/ 相当/ ./ 在/ 基于/ 位置/ 的/ 服务/ 、/ 移动/ 计算/ 等/ 具有/ 频繁/ 更新/ 要求/ 的/ 应用领域/ ,/ TPU2M/ 索引/ 树/ 具有/ 较/ 高/ 的/ 实用价值/ 和/ 广泛/ 的/ 应用/ 前景/ ./ 下/ 一步/ 的/ 研究/ 方向/ 是/ 在/ 不/ 确定/ 移动/ 对象/ 的/ 环境/ 中/ ,/ 将/ 问题/ 扩展/ 到/ 支持/ 局部/ 位置/ 更新/ 及/ 高级/ 概率/ 查询/ 如/ Top/ -/ K/ 查询/ 、/ Skyline/ 查询/ 等/ ./ 

