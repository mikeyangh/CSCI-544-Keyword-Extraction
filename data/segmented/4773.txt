Page1/ 面向/ 近似/ 近邻/ 查询/ 的/ 分布式/ 哈希/ 学习/ 方法/ 文庆福/ 1/ )/ 王建民/ 1/ )/ ,/ 2/ )/ 朱晗/ 1/ )/ 曹越/ 1/ )/ 龙明盛/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 清华大学/ 软件/ 学院/ 北京/ 100084/ )/ 2/ )/ (/ 清华大学/ 信息科学/ 与/ 技术/ 国家/ 实验室/ (/ 筹/ )/ 北京/ 100084/ )/ 摘要/ 近似/ 近邻/ 查询/ 是/ 信息检索/ 领域/ 中/ 的/ 一项/ 重要/ 技术/ ./ 随着/ 文本/ 、/ 图像/ 、/ 视频/ 等/ 非/ 结构化/ 数据/ 规模/ 的/ 迅速/ 增长/ ,/ 如何/ 对/ 海量/ 高维/ 数据/ 进行/ 快速/ 、/ 准确/ 的/ 查询/ 是/ 处理/ 大规模/ 数据/ 所/ 必须/ 面对/ 的/ 问题/ ./ 哈希/ 作为/ 近似/ 近邻/ 查询/ 的/ 关键/ 方法/ 之一/ ,/ 能够/ 在/ 保持数据/ 相似性/ 的/ 条件/ 下/ 对/ 高维/ 数据/ 进行/ 大/ 比例/ 压缩/ ./ 以往/ 所/ 提出/ 的/ 哈希/ 方法/ 往往/ 都/ 是/ 应对/ 集中式/ 存储/ 的/ 数据/ ,/ 因而/ 难以/ 处理/ 分布式/ 存储/ 的/ 数据/ ./ 该文/ 提出/ 了/ 一种/ 基于/ 乘积/ 量化/ 的/ 分布式/ 哈希/ 学习/ 方法/ SparkPQ/ ,/ 并/ 在/ Spark/ 分布式计算/ 框架/ 下/ 实现/ 算法/ ./ 在/ 传统/ 的/ 乘积/ 量化/ 方法/ 的/ 基础/ 上/ ,/ 该文/ 首先/ 给出/ 了/ 分布式/ 乘积/ 量化/ 模型/ 的/ 形式化/ 定义/ ./ 然后/ ,/ 作者/ 设计/ 了/ 一种/ 按/ 行列/ 划分/ 的/ 分布式/ 矩阵/ ,/ 采用/ 分布式/ K/ -/ Means/ 算法/ 实现/ 模型/ 求解/ 和/ 码本/ 训练/ ,/ 利用/ 训练/ 出/ 的/ 码本/ 模型/ 对/ 分布式/ 数据/ 进行/ 编码/ 和/ 索引/ ./ 最终/ ,/ 该文/ 构建/ 了/ 一套/ 完整/ 的/ 近似/ 近邻/ 查询/ 系统/ ,/ 不仅/ 可以/ 大幅/ 降低/ 存储/ 和/ 计算/ 开销/ ,/ 而且/ 在/ 保证/ 高/ 检索/ 准确率/ 的/ 条件/ 下/ 加速/ 查询/ 效率/ ./ 在/ 较/ 大规模/ 的/ 图像/ 检索/ 数据/ 集上/ 进行/ 的/ 实验/ 验证/ 了/ 方法/ 的/ 正确性/ 和/ 可扩展性/ ./ 关键词/ 近似/ 近邻/ 查询/ ;/ 哈希/ 学习/ ;/ 高维索引/ ;/ 分布式计算/ ;/ Spark1/ 引言/ 在/ 信息技术/ 迅速/ 发展/ 的/ 今天/ ,/ 非/ 结构化/ 数据/ 如/ 文本/ 、/ 图像/ 、/ 视频/ 以及/ 音频/ 等/ 都/ 呈现出/ 指数/ 级/ 的/ 增长/ ./ 如何/ 从/ 海量/ 的/ 互联网/ 数据/ 中/ 快速/ 、/ 准确/ 地/ 获取/ 用户/ 想要/ 的/ 信息/ ,/ 是非/ 结构化/ 大/ 数据管理/ 与/ 检索/ 中/ 的/ 一个/ 重要/ 技术/ 问题/ ./ 谷歌/ 、/ 百度/ 等/ 互联网/ 公司/ 所/ 提供/ 的/ 文本/ 、/ 图像/ 等/ 搜索/ 服务/ 为/ 我们/ 获取信息/ 带来/ 了/ 极大/ 的/ 便利/ ./ 而/ 在/ 这些/ 搜索/ 服务/ 的/ 背后/ ,/ 都/ 需要/ 近似/ 近邻/ 查询/ (/ ApproximateNearestNeighborSearch/ )/ 技术/ 的/ 支持/ ./ 在/ 大规模/ 高维/ 数据/ 的/ 应用/ 场景/ 下/ ,/ 精确/ 的/ 近邻/ 查询/ 需要/ 耗费/ 大量/ 存储/ 和/ 计算资源/ ,/ 且/ 查询/ 时间/ 太/ 长/ 、/ 索引/ 系统/ 吞吐量/ 过低/ ,/ 实际/ 应用/ 价值/ 偏低/ ./ 近似/ 近邻/ 查询/ 技术/ 可以/ 大幅度/ 缩短/ 查询/ 时间/ 、/ 降低/ 存储/ 和/ 计算/ 开销/ ,/ 同时/ 保证/ 查询/ 结果/ 与/ 精确/ 查询/ 结果/ 近似/ ,/ 因此/ 具有/ 更/ 高/ 的/ 实用性/ ./ 除了/ 信息检索/ 以外/ ,/ 近似/ 近邻/ 查询/ 技术/ 被/ 广泛应用/ 于/ 机器/ 学习/ 、/ 数据挖掘/ 、/ 多媒体/ 管理/ 等/ 领域/ ./ 近年来/ ,/ 近似/ 近邻/ 查询/ 技术/ 一直/ 是/ 相当/ 活跃/ 的/ 研究/ 方向/ ,/ 新/ 的/ 实现/ 方法/ 不断/ 出现/ ,/ 但是/ 该/ 技术/ 面临/ 的/ 挑战/ 却/ 没有/ 改变/ ./ 一方面/ ,/ 随着/ 互联网/ 上/ 的/ 数据/ 越来越/ 多/ ,/ 需要/ 处理/ 的/ 数据量/ 也/ 越来越/ 大/ ,/ 传统/ 的/ 树/ 索引/ 结构/ 一般/ 都/ 是/ 面向/ 小规模/ 数据/ 而/ 设计/ 的/ 单机/ 结构/ ./ 大规模/ 数据/ 一般/ 无法/ 做到/ 单机/ 存储/ ,/ 这些/ 数据/ 往往/ 存储/ 于/ 分布式系统/ 中/ ,/ 同时/ 也/ 需要/ 一种/ 分布式/ 的/ 索引/ 结构/ 来/ 支持/ 查询/ 和/ 检索/ ./ 海量/ 的/ 数据/ 不仅/ 给/ 数据/ 存储/ 带来/ 了/ 压力/ ,/ 同时/ 也/ 给/ 实时/ 数据/ 查询/ 带来/ 了/ 挑战/ ./ 另一方面/ ,/ 在/ 图像/ 、/ 视频/ 、/ 音频/ 等/ 非/ 结构化/ 数据处理/ 过程/ 中/ ,/ 往往/ 都/ 会/ 对/ 数据/ 进行/ 特征提取/ ./ 针对/ 特定/ 的/ 任务/ ,/ 为了/ 获得/ 更/ 高/ 的/ 准确度/ ,/ 往往/ 提取/ 出/ 的/ 特征/ 维度/ 都/ 比较/ 高/ ./ 例如/ ,/ 在/ 图像/ 和/ 视频/ 数据处理/ 过程/ 中/ ,/ 常用/ 的/ SIFT/ 、/ SURF/ 特征/ 有/ 128/ 维/ ,/ GIST/ 特征/ 有/ 960/ 维/ ,/ 近年来/ 取得/ 突破/ 的/ 深度/ 卷积/ 网络/ 特征/ 为/ 4096/ 维/ ,/ 而/ BOW/ (/ BagofWords/ )/ 词袋/ 特征/ 的/ 维度/ 更是/ 高/ 达/ 成千上万/ 维/ ./ 怎样/ 对/ 如此/ 高/ 维度/ 的/ 数据/ 进行/ 快速/ 、/ 高效/ 的/ 检索/ 是/ 一个/ 十分/ 具有/ 挑战性/ 的/ 问题/ ./ 哈希/ 方法/ 可以/ 对/ 高维/ 数据/ 进行/ 保持/ 相似性/ 的/ 编码/ 压缩/ ,/ 从而/ 减少/ 了/ 近似/ 近邻/ 查询/ 的/ 存储空间/ 和/ 计算/ 时间/ ./ 在/ 数据/ 规模/ 不断/ 增长/ 的/ 今天/ ,/ 越来越/ 多/ 的/ 应用/ 都/ 是/ 基于/ 存储/ 在/ 分布式系统/ 中/ 的/ 大规模/ 数据/ ,/ 例如/ 互联网/ 文本/ 、/ 图像/ 和/ 视频/ 检索/ 等/ ./ 现有/ 的/ 很多/ 哈希/ 算法/ 都/ 是/ 在/ 单机/ 的/ 环境/ 下/ 实现/ 的/ ,/ 而/ 在/ 分布式/ 环境/ 下/ ,/ 现有/ 大部分/ 哈希/ 算法/ 都/ 要求/ 将/ 所有/ 数据/ 迁移/ 到/ 同一/ 台/ 机器/ 中/ 进行/ 集中式/ 学习/ ,/ 但/ 这/ 违背/ 了/ 数据/ 的/ 分布式/ 存储/ 方式/ ,/ 带来/ 了/ 很/ 高/ 的/ 数据/ 迁移/ 代价/ ,/ 并且/ 单机/ 能够/ 处理/ 的/ 数据/ 总是/ 很/ 有限/ 的/ ,/ 因此/ 一种/ 有效/ 的/ 分布式/ 哈希/ 方法/ 是/ 非常/ 有/ 必要/ 的/ ./ 为/ 有效/ 管理/ 和/ 分析/ 分布式/ 数据/ ,/ Hadoop/ 、/ Storm/ 、/ Spark/ 等/ 大/ 数据/ 分布式/ 处理/ 系统/ 相继/ 涌现/ ./ 本文/ 基于/ Spark/ 分布式计算/ 平台/ 设计/ 并/ 实现/ 了/ 一种/ 分布式/ 哈希/ 学习/ 方法/ ,/ 从而/ 实现/ 对/ 分布式/ 高维/ 数据/ 进行/ 快速/ 准确/ 的/ 检索/ ./ 利用/ Spark/ 分布式计算/ 框架/ 的/ 特点/ 构建/ 的/ 系统/ 能够/ 更为/ 高效/ 地/ 应对/ 大规模/ 数据/ 的/ 近似/ 近邻/ 查询/ 任务/ ./ 本文/ 第/ 2/ 节/ 分别/ 对/ 基于/ 树结构/ 和/ 基于/ 哈希/ 的/ 两大类/ 近似/ 近邻/ 查询方法/ 进行/ 综述/ ;/ 第/ 3/ 节/ 介绍/ 向量量化/ 和/ 乘积/ 量化/ 的/ 哈希/ 方法/ 以及/ Spark/ 弹性/ 分布式/ 数据/ 集/ 模型/ ;/ 第/ 4/ 节/ 阐述/ 分布式/ 哈希/ 学习/ 方法/ 及其/ 在/ Spark/ 上/ 的/ 设计/ 与/ 实现/ ;/ 第/ 5/ 节/ 分析/ 讨论/ 了/ 分布式/ 哈希/ 算法/ 和/ 近似/ 近邻/ 查询/ 系统/ 在/ 大规模/ 图像/ 检索/ 数据/ 集上/ 的/ 实验/ 结果/ ;/ 最终/ ,/ 第/ 6/ 节对/ 本文/ 工作/ 进行/ 了/ 总结/ 和/ 展望/ ./ 2/ 相关/ 工作/ 对于/ 近似/ 近邻/ 查询/ 问题/ ,/ 在/ 不/ 考虑/ 时间/ 效率/ 的/ 情况/ 下/ ,/ 这一/ 问题/ 可以/ 直接/ 通过/ 线性/ 扫描/ 的/ 方式/ 来/ 解决/ ./ 比如/ ,/ 可以/ 直接/ 计算/ 查询/ 数据/ q/ 与/ 数据/ 集合/ S/ 中/ 每/ 一条/ 数据/ 的/ 距离/ ,/ 并/ 根据/ 距离/ 大小/ 选取/ 出/ 距离/ 最近/ 的/ 前/ r/ 个/ 数据/ 组成/ 一个/ 结果/ 列表/ ./ 但/ 由于/ 数据/ 集合/ S/ 的/ 规模/ 非常/ 大/ ,/ 这种/ 朴素/ 的/ 查询方法/ 的/ 查询/ 时间/ 太/ 长/ 、/ 计算/ 代价/ 太大而/ 无法/ 实用/ ./ 但是/ ,/ 如果/ 首/ Page3/ 先/ 从/ 规模/ 比较/ 大/ 的/ 数据/ 集合/ S/ 上/ 筛选/ 出/ 一个/ 显著/ 小/ 的/ 候选/ 集合/ S/ ,/ 然后/ 在/ 集合/ S/ 上/ 进行/ 朴素/ 的/ 线性/ 扫描/ 选取/ 出前/ r/ 个/ 近邻/ 数据/ ,/ 这时/ 的/ 线性/ 扫描时间/ 效率/ 是/ 可以/ 接受/ 的/ ,/ 整个/ 查询/ 过程/ 的/ 时间/ 效率/ 和/ 准确率/ 就/ 取决于/ 筛选/ 出/ 候选/ 集合/ S/ 的/ 过程/ ./ 候选/ 集合/ S/ 大小/ 与/ 查询/ 准确率/ 有着/ 密切关系/ ,/ 一般而言/ ,/ 集合/ S/ 越大/ 查询/ 准确率/ 越高/ ,/ 但/ 后续/ 线性/ 扫描/ 阶段/ 的/ 时间/ 就会/ 越长/ ;/ 反之/ ,/ 集合/ S/ 越小则/ 查询/ 准确率/ 会越/ 低/ ,/ 但/ 后续/ 线性/ 扫描/ 阶段/ 的/ 时间/ 就/ 会/ 越短/ ./ 近邻/ 查询/ 问题/ 的/ 关键/ 就/ 在于/ 如何/ 选取/ 出/ 一个/ 近邻/ 候选/ 集合/ S/ ./ 为了/ 快速/ 地/ 筛选/ 出/ 近邻/ 候选/ 集合/ ,/ 就/ 需要/ 将/ 待/ 检索/ 数据库/ 索引/ 起来/ ./ 依据/ 不同/ 的/ 索引/ 结构/ 分类/ ,/ 近邻/ 查询/ 的/ 方法/ 一般/ 可以/ 分为/ 基于/ 树结构/ 的/ 索引/ 和/ 基于/ 哈希/ 的/ 索引/ 两大类/ ./ 2.1/ 基于/ 树结构/ 的/ 索引/ 传统/ 的/ 树结构/ 索引/ 方法/ 有/ 很多/ ,/ 比如/ R/ 树/ 、/ KD/ 树/ 、/ Ball/ 树/ 等/ ./ 下面/ 介绍/ FLANN/ [/ 1/ ]/ 近似/ 近邻/ 搜索算法/ 库中/ 用到/ 的/ 两种/ 树结构/ 索引/ 方法/ ./ 经典/ 的/ KD/ 树会/ 将/ 原始/ 的/ 数据/ 空间/ 按/ 数据/ 的/ 每个/ 维度/ 划分/ 成/ 一棵/ 二叉树/ ./ 它/ 在/ 低维/ 的/ 空间/ 上/ 检索/ 效率/ 非常/ 高/ ,/ 但/ 随着/ 维度/ 不断/ 增加/ ,/ KD/ 树/ 的/ 检索/ 效率/ 会/ 迅速/ 降低/ 并/ 退化/ 为/ 线性/ 扫描/ ./ 因此/ ,/ 许多/ 改进/ KD/ 树/ 的/ 工作/ 涌现/ 出来/ ./ 其中/ ,/ Silpa/ -/ Anan/ 等/ 人/ [/ 2/ ]/ 提出/ 了/ 一种/ 随机化/ KD/ 树/ 的/ 改进/ 方法/ ./ 原始/ 的/ KD/ 树/ 方法/ 在/ 空间/ 划分/ 时会/ 选取/ 数据/ 方差/ 最大/ 的/ 维度/ ,/ 在/ 该/ 维度/ 上将/ 空间/ 一分为二/ ,/ 而/ 随机化/ KD/ 树/ 在/ 数据/ 空间/ 划分/ 的/ 时候/ ,/ 并/ 不是/ 固定/ 选择/ 数据/ 方差/ 最大/ 的/ 维度/ ,/ 而是/ 从/ 数据/ 方差/ 比较/ 大/ 的/ 前/ 几个/ 维度/ 中/ 随机/ 地/ 选取/ 一个/ 维度/ 进行/ 空间/ 划分/ ./ 此外/ ,/ FLANN/ 中/ 的/ 层次/ K/ -/ Means/ 树/ [/ 3/ ]/ 是/ 在/ 数据/ 需要/ 划分/ 时/ ,/ 使用/ K/ -/ Means/ 聚类/ 的/ 方法/ 将/ 数据/ 划分/ 成/ K/ 份/ ./ 依照/ 这一/ 方法/ ,/ 在/ 每/ 一层/ 中/ 都/ 使用/ K/ -/ Means/ 聚类/ ,/ 当/ 数据量/ 少于/ K/ 个/ 时/ ,/ 就/ 可以/ 直接/ 将/ 这/ K/ 个/ 节点/ 作为/ 叶子/ 节点/ ./ 这样/ ,/ 层次/ K/ -/ Means/ 树/ 就/ 可以/ 看作/ 是/ 一棵/ K/ 叉/ 树/ ./ 利用/ 层次/ K/ -/ Means/ 树作/ 近似/ 近邻/ 查询/ 的/ 时候/ ,/ 当/ 遍历/ 到/ 某个/ 父亲/ 节点/ ,/ 首先/ 在/ 其子/ 节点/ 当中/ 选取/ 出/ 一个/ 距离/ 查询/ 数据/ 最近/ 的/ 子/ 节点/ ,/ 然后/ 再/ 优先/ 遍历/ 这个/ 子/ 节点/ ./ 显然/ ,/ 这样/ 的/ 查询/ 效率/ 是/ 非常/ 高/ 的/ ,/ 能够/ 快速/ 地/ 找到/ 近邻/ 候选/ 集合/ ./ 但是/ 在/ 层次/ K/ -/ Means/ 树/ 的/ 建树/ 过程/ 中/ ,/ 在/ 每个/ 非/ 叶子/ 节点/ 都/ 要/ 执行/ 一次/ K/ -/ Means/ 聚类/ ,/ 这种/ 算法/ 不管/ 在/ 时间/ 效率/ 上/ 还是/ 空间/ 效率/ 上/ 代价/ 都/ 是/ 非常/ 大/ 的/ ./ 2.2/ 基于/ 哈希/ 的/ 索引/ 传统/ 树结构/ 索引/ 方法/ 最大/ 的/ 不足/ 就是/ 存储空间/ 占用/ 过大/ ,/ 随着/ 维度/ 的/ 不断/ 增长/ ,/ 空间/ 代价/ 成倍增长/ ./ 因此/ ,/ 我们/ 需要/ 对/ 原始数据/ 通过/ 哈希/ 进行/ 编码/ 压缩/ 以/ 节省/ 空间/ ./ 现有/ 哈希/ 方法/ 主要/ 分为/ 数据/ 无关/ 哈希/ 和/ 数据/ 驱动/ 哈希/ ./ 数据/ 无关/ 哈希/ 方法/ 以/ 局部/ 敏感/ 哈希/ (/ LocalitySensitiveHashing/ ,/ LSH/ )/ [/ 4/ ]/ 为/ 代表/ ,/ 其/ 变种/ 之一/ 是/ 随机/ 投影/ 法/ ,/ 该/ 方法/ 在/ 不/ 考虑/ 数据分布/ 的/ 情况/ 下/ 将/ 原始/ 空间/ 中/ 的/ 数据/ 随机/ 投影/ 到/ 超平面/ 获取/ 相应/ 编码/ ./ 数据/ 驱动/ 哈希/ 方法/ 主要/ 通过/ 判别/ 数据结构/ 及/ 分布/ 信息/ 来/ 自动/ 学习/ 哈希/ 函数/ ,/ 代表性/ 的/ 方法/ 主要/ 有谱/ 哈希/ (/ SpectralHashing/ ,/ SH/ )/ [/ 5/ ]/ 、/ 迭代/ 量化/ (/ IterativeQuantization/ ,/ ITQ/ )/ [/ 6/ ]/ 、/ 乘积/ 量化/ (/ ProductQuantization/ ,/ PQ/ )/ [/ 7/ ]/ 、/ 笛卡尔/ K/ 均值/ (/ CartesianK/ -/ Means/ )/ [/ 8/ ]/ 以及/ 组合/ 量化/ (/ CompositeQuantization/ )/ [/ 9/ ]/ 等/ ./ 局部/ 敏感/ 哈希/ (/ LSH/ )/ 的/ 基本/ 思想/ 是/ 保持/ 相似性/ 的/ 空间/ 转换/ ,/ 对于/ 原始/ 空间/ 中/ 相似/ 的/ 两个/ 数据/ 点/ ,/ 经过/ 相同/ 的/ 哈希/ 函数/ 映射/ 后/ ,/ 这/ 两个/ 数据/ 点/ 在/ 映射/ 后/ 的/ 空间/ 中/ 依然/ 是/ 相似/ 的/ ;/ 反之/ ,/ 如果/ 两个/ 点/ 在/ 原始/ 空间/ 中/ 不/ 相似/ ,/ 那么/ 映射/ 后/ 的/ 两个/ 点/ 也/ 是/ 不/ 相似/ 的/ ./ 局部/ 敏感/ 哈希/ 算法/ 首先/ 将/ 原始数据/ 嵌入/ 到/ 汉明/ 空间/ ,/ 然后/ 在/ 汉明/ 空间/ 中/ 选取/ 多个/ 位置/ 的/ 值/ 进行/ 组合/ ,/ 作为/ 哈希/ 映射/ ./ 最后/ ,/ 将/ 上述/ 经过/ 哈希/ 映射/ 得到/ 的/ 序列/ 进一步/ 通过/ 哈希/ 函数/ 转化成/ 一个/ 实数/ ./ 这样/ ,/ 就/ 实现/ 了/ 原始/ 向量/ 到/ 哈希/ 桶/ 的/ 转换/ ./ 由于/ 局部/ 敏感/ 特性/ 的/ 存在/ ,/ 原始/ 空间/ 中/ 越/ 相似/ 的/ 两个/ 数据/ 点/ ,/ 经过/ 哈希/ 之后/ ,/ 越有/ 可能/ 出现/ 在/ 同一个/ 哈希/ 桶/ 中/ ./ 谱/ 哈希/ (/ SH/ )/ 的/ 基本/ 思想/ 与/ 局部/ 敏感/ 哈希/ 类似/ ,/ 但/ 对/ 数据/ 的/ 分布/ 特点/ 进行/ 建模/ ,/ 在/ 保证/ 原始/ 空间/ 的/ 向量/ 相似性/ 条件/ 下/ ,/ 它/ 将/ 整个/ 编码/ 过程/ 转化/ 为/ 一个/ 图/ 分割/ 的/ 过程/ ./ 它/ 首先/ 对/ 原始/ 空间/ 的/ 高维/ 数据/ 进行/ 谱分析/ ,/ 通过/ 松弛/ 约束条件/ 转化/ 为/ 求解/ 一个/ 拉普拉斯/ 矩阵/ 的/ 特征值/ 分解/ 问题/ ./ 谱/ 哈希/ 的/ 求解/ 过程/ 为/ :/ 首先/ 根据/ 数据/ 对/ 的/ 相似/ 度/ 构造/ 一个/ K/ 近邻/ 图/ ,/ 该图/ 上/ 每个/ 顶点/ 代表/ 一个/ 数据/ 点/ ,/ 该/ 顶点/ 仅/ 与其/ 最/ 相似/ 的/ K/ 个/ 数据/ 点有/ 边/ 相连/ ,/ 边/ 的/ 权重/ 由/ 数据/ 点/ 之间/ 的/ 相似/ 度/ 确定/ ;/ 其次/ 由/ K/ 近邻/ 图/ 的/ 邻接矩阵/ 得到/ 拉普拉斯/ 矩阵/ ,/ 计算/ 拉普拉斯/ 矩阵/ 的/ 特征值/ 和/ 特征向量/ (/ 图/ 分割/ 算法/ )/ ;/ 最后/ 选取/ 前/ 若干个/ 最小/ 特征值/ 对应/ 的/ 特征向量/ ,/ 通过/ 对/ 其/ 进行/ 二值化/ 得到/ 哈希/ 编码/ ./ 原始数据/ 空间/ 进行/ 降维/ ,/ 将/ 原始/ 的/ p/ 维/ 数据/ 狓/ ∈/ / 降成/ d/ 维/ 向量/ 狏/ ∈/ / 迭代/ 量化/ (/ ITQ/ )/ 首先/ 通过/ 主/ 成分/ 分析/ (/ PCA/ )/ 对/ Page4/ 迭代/ 如下/ 两个/ 步骤/ 直到/ 收敛/ :/ (/ 1/ )/ 通过/ 正交变换/ 矩阵/ 犚/ 将/ 任一/ 向量/ 狏/ 旋转/ 得到/ 犚/ 狏/ ;/ (/ 2/ )/ 将/ 犚/ 狏/ 通过/ 符号/ 函数/ sgn/ 进行/ 二值化/ ,/ 得到/ 对应/ 的/ 二进制/ 编码/ 犫/ =/ sgn/ (/ 犚/ 狏/ )/ ∈/ -/ 1/ ,/ {/ }/ 1d/ ./ ITQ/ 的/ 学习/ 目标/ 是/ 使/ 整个/ 数据/ 集/ 的/ 量化/ 误差/ 最小/ ,/ 即/ 要求/ 旋转/ 后/ 的/ 向量/ 犚/ 狏/ 与/ 编码/ 后/ 的/ 哈希/ 码/ 犫/ 之间/ 的/ 均/ 方/ 误差/ 犫/ -/ 犚/ 狏/ 2/ 最小/ ./ 3/ 背景/ 知识/ 3.1/ 向量量化/ 向量量化/ (/ VectorQuantization/ )/ [/ 10/ ]/ 就是/ 对/ 原始/ 向量/ 进行/ 量化/ 压缩/ ,/ 维度/ 为/ p/ 的/ 原始/ 向量/ 狓/ ∈/ / 通过/ 量化/ 函数/ q/ 被/ 映射/ 为/ q/ (/ )/ 狓/ ∈/ C/ =/ 犮/ {/ }/ i/ ,/ 其中/ 集合/ C/ 被/ 称为/ 码本/ ,/ C/ 中/ 的/ 每个/ 元素/ 犮/ i/ 被/ 称为/ 码字/ ,/ 映射/ q/ (/ )/ 狓/ 就是/ 将/ 向量/ 狓/ 用/ 码本/ C/ 中/ 的/ 某个/ 码字/ 来/ 表示/ ./ 在/ 向量量化/ 中/ ,/ 对/ 一个/ 包含/ n/ 个/ p/ 维/ 数据/ 点/ 的/ 数据/ 集/ / =/ 狓/ {/ }/ j/ 据点/ 聚成/ k/ 类簇/ ,/ 同时/ 用/ 聚类/ 中心/ 来/ 代表/ 每/ 一个/ 类簇/ 的/ 数据/ ./ 记/ 矩阵/ 犆/ ∈/ / 聚类/ 中心/ 构成/ ,/ 每/ 一列/ 都/ 是/ 一个/ 聚类/ 中心/ ,/ 即/ 犆/ =/ [/ 犮/ 1/ ,/ 犮/ 2/ ,/ …/ ,/ 犮/ k/ ]/ ./ 向量量化/ 模型/ 简单/ 有效/ ,/ 使用/ 最/ 朴素/ 的/ 枚举/ 方法/ 就/ 可以/ 将/ 数据/ 点/ 映射/ 到/ 相应/ 聚类/ 中心/ ./ 这种/ 映射/ 过程/ 将/ 每条/ 原始数据/ 的/ 大小/ 压缩/ 到/ log2kbit/ ,/ 所/ 需要/ 消耗/ 的/ 存储空间/ 会/ 随着/ k/ 的/ 增长/ 而/ 呈现出/ 对/ 数级/ 增长/ ./ 3.2/ 乘积/ 量化/ 乘积/ 量化/ (/ ProductQuantization/ ,/ PQ/ )/ [/ 7/ ]/ 是/ 比/ 向量量化/ 更/ 有效/ 的/ 一种/ 量化/ 方法/ ./ 假设/ 需要/ 量化/ 压缩/ p/ 维/ 的/ 向量/ 到/ 64bit/ ,/ 如果/ 采用/ 向量量化/ 方法/ ,/ 则/ 需要/ 有/ 264/ 个/ 聚类/ 中心/ ,/ 这样/ 不管/ 是从/ K/ -/ Means/ 聚类/ 所/ 需要/ 的/ 时间/ 还是/ 从/ 存储/ 聚类/ 中心/ 所/ 占用/ 的/ 空间/ 来看/ ,/ 都/ 是/ 不/ 可行/ 的/ ./ 为了/ 解决/ 上述/ 聚类/ 中心/ (/ 即/ 码字/ )/ 数量/ 膨胀/ 问题/ ,/ 在/ 乘积/ 量化/ 算法/ 中/ ,/ 首先/ 将/ 原始/ 的/ 数据/ 空间/ 划分/ 为/ m/ 个/ 不/ 相交/ 的/ 子/ 空间/ ,/ 也/ 就是/ 将/ p/ 维/ 的/ 向量/ 切成/ m/ 个/ 长度/ 为/ p/ // m/ 的/ 子/ 向量/ ;/ 在/ 每个/ 子/ 空间/ 里/ ,/ 分别/ 对/ 其中/ 的/ 子/ 向量/ 集合/ 进行/ K/ -/ Means/ 聚类/ ,/ 聚类/ 中心/ 数量/ 为/ h/ ./ 这样/ 就/ 可以/ 用/ 聚类/ 中心/ 编号/ 1/ ~/ h/ 对子/ 向量/ 进行/ 编码/ ,/ m/ 个子/ 向量/ 的/ 编码/ 串接/ 在/ 一起/ 就/ 构成/ 了/ 原始/ 向量/ 的/ 哈希/ 编码/ ./ 这样/ ,/ 原始/ 空间/ 的/ p/ 维/ 向量/ 就/ 可以/ 压缩/ 为/ mlog2hbit/ 的/ 哈希/ 编码/ ,/ 从而/ 大大/ 节省/ 了/ 存储空间/ ./ 乘积/ 量化/ (/ PQ/ )/ 学习/ 方法/ 的/ 目标/ 函数/ 形式化/ 如下/ :/ 其中/ 狓/ i/ 是/ p/ 维/ 原始/ 向量/ ;/ 犫/ j/ 子/ 空间/ 中聚类/ 后/ 所属/ 的/ 聚类/ 中心/ 编号/ (/ 即/ 在/ 码本/ 中字/ 编号/ )/ ,/ 每条/ 数据/ 在/ 每个/ 子/ 空间/ 中仅/ 能/ 属于/ 一个/ 聚类/ 中心/ ,/ 因此/ 犫/ j/ 中/ ,/ 整体/ 的/ 码本/ C/ 就/ 可以/ 用/ 多个/ 子/ 空间/ 中/ 码本/ 的/ 笛卡尔/ 积/ 的/ 形式/ 表示/ ,/ C/ =/ C1/ ×/ C2/ ×/ …/ ×/ Cm/ ./ 码本/ 的/ 大小/ 就是/ 所有/ 子/ 空间/ 中聚类/ 中心/ 数量/ 的/ 乘积/ ,/ 根据/ 前面/ 的/ 假设/ ,/ 共有/ m/ 个子/ 空间/ ,/ 每个/ 子/ 空间/ 聚类/ 个数/ 为/ h/ ,/ 所以/ 码本/ 大小/ 就是/ k/ =/ hm/ ./ 求解/ 过程/ 其实/ 并/ 不/ 复杂/ ,/ 正如/ 前/ 文/ 提到/ ,/ 在/ 每个/ 子/ 空间/ 中/ 做/ K/ -/ Means/ 聚类/ 就/ 可以/ 求解/ 出/ 码本/ ,/ 这样/ 我们/ 就/ 可以/ 利用/ 码本/ 对/ 每个/ 子/ 空间/ 中/ 的/ 子/ 向量/ 进行/ 编码/ ,/ 从而/ 对/ 原始/ 向量/ 进行/ 编码表示/ ./ 整个/ 算法/ 的/ 空间/ 复杂度/ 就/ 和/ 向量/ 维度/ p/ 、/ 子/ 空间/ 数量/ m/ 、/ 子/ 空间/ 聚类/ 中心/ 数量/ h/ 有关/ ./ 存储/ 码本/ 所/ 需要/ 的/ 空间/ 为/ O/ (/ mhp/ )/ ./ 从表/ 1/ 中/ 乘积/ 量化/ 算法/ 和/ 向量量化/ 算法/ 的/ 空间/ 占用/ 对比/ 可知/ ,/ 当/ m/ =/ 1/ 时/ ,/ 乘积/ 量化/ 就/ 退化/ 成/ 普通/ 的/ K/ -/ Means/ 向量量化/ 了/ ./ 此外/ ,/ h/ 取值/ 越大/ ,/ 不仅/ 计算/ 时间/ 复杂度/ 越大/ ,/ 而且/ 空间/ 复杂度/ 也/ 越/ 大/ ,/ 进而/ 也/ 会/ 使得/ 在/ 查询/ 时/ 的/ 时间/ 复杂度/ 变大/ ./ 因此/ ,/ 选择/ 合适/ 的/ m/ 和/ h/ 的/ 参数值/ 是/ 非常/ 重要/ 的/ ./ 文献/ [/ 6/ ]/ 中/ 指出/ ,/ 为了/ 能够/ 用/ 一个/ 字节/ 表示/ bj256/ ;/ 而/ 对于/ 128/ 维/ 的/ 向量/ 数据/ ,/ 在/ 采用/ 64bit/ 进行/ 哈希/ 编码/ 时/ ,/ m/ =/ 8/ 是/ 比较/ 合适/ 的/ 取值/ ./ 向量量化/ klog2kO/ (/ kp/ )/ 乘积/ 量化/ hmmlog2hO/ (/ mhp/ )/ 3.3/ Spark/ 与/ 弹性/ 分布式/ 数据/ 集/ Spark/ 是/ 一个/ 实现/ 了/ MapReduce/ 编程/ 范式/ 的/ 通用/ 的/ 大/ 数据/ 分布式计算/ 框架/ ,/ 最初/ 由/ UCBerkeleyAMPLab/ 开发/ 完成/ ./ Spark/ 继承/ 了/ MapReduce/ 编程/ 简单/ 的/ 优点/ ,/ 并/ 增加/ 了/ 对/ 分布式/ 内存/ 计算/ 的/ 支持/ ./ MapReduce/ 将/ 计算/ 过程/ 的/ 中间/ 数据/ 存储/ 在/ 磁盘/ 上/ ,/ 而/ Spark/ 一般/ 是/ 用/ 内存/ 来/ 存储/ 中间/ 数据/ ,/ 从而/ 提高/ 计算/ 效率/ ./ 在/ Spark/ 数据处理/ 过程/ 中/ ,/ 数据/ 来源/ 不仅/ 可以/ 是/ 本地/ 文件系统/ 或者/ HDFS/ 上/ 各种/ 格式/ 的/ 数据/ ,/ 还/ 可以/ 是/ HBase/ 、/ Cassandra/ 等/ 数据库/ 中/ 的/ 数据/ ./ 在/ Spark/ 内核/ 的/ 基础/ 上/ ,/ 还/ 集成/ 了/ SparkStreaming/ 、/ SparkSQL/ 、/ MLlib/ 、/ GraphX/ 等/ 数据处理/ 的/ 组件/ ,/ 形/ Page5/ 成一栈/ 式/ 的/ 生态系统/ ./ 图/ 1/ 是/ Spark/ 集群/ 系统/ 架构图/ ./ 驱动程序/ (/ Driver/ )/ 会/ 和/ 集群/ 的/ 管理器/ (/ ClusterManager/ )/ 相连接/ ,/ 驱动/ 管理器/ 为/ 集群/ 其他/ 节点/ 分配资源/ ./ 在/ 分配/ 完毕/ 以后/ ,/ 驱动程序/ 会/ 将/ 应用程序/ 发送到/ 各个/ 节点/ 的/ 执行/ 进程/ (/ Executor/ )/ ./ 之后/ 驱动程序/ 会/ 调配/ 任务/ 给/ 各个/ 执行/ 进程/ 执行/ 任务/ ./ 弹性/ 分布式/ 数据/ 集/ (/ ResilientDistributedData/ -/ sets/ ,/ RDD/ )/ [/ 11/ ]/ 是/ Spark/ 中/ 的/ 分布式/ 内存/ 的/ 抽象/ ./ 相比/ 于/ MapReduce/ 的/ 计算/ 过程/ ,/ RDD/ 可以/ 被/ 缓存/ 在/ 内存/ 中/ ,/ 每/ 一次/ 的/ 计算/ 产生/ 的/ 结果/ 都/ 可以/ 保留/ 在/ 内存/ 中/ ,/ 从而/ 避免/ 了/ 大量/ 的/ 磁盘/ 读写操作/ ,/ 大大/ 节省/ 了/ 计算/ 时间/ ./ 在/ Spark/ 程序/ 中/ ,/ RDD/ 的/ 创建/ 是/ 通过/ 静态/ 类/ SparkContext/ 来/ 实现/ ,/ 主要/ 包含/ 有/ 两种/ 创建/ 来源/ :/ 一/ 是从/ 指定/ 的/ 文件系统/ (/ 或/ 指定/ 的/ 数据库/ )/ 读取数据/ 来/ 创建/ ;/ 二/ 是从/ 内存/ 数据/ 集合/ 直接/ 生成/ ./ 不同于/ MapReduce/ 中仅/ 有/ map/ 和/ reduce/ 两种/ 操作/ ,/ RDD/ 还/ 支持/ 多种/ 丰富/ 的/ 常用/ 操作/ ,/ 主要/ 分为/ 转换/ 操作/ 、/ 控制/ 操作/ 和/ 行为/ 操作/ 3/ 类/ ./ 转换/ 操作/ 顾名思义/ ,/ 就是/ 将/ 一个/ RDD/ 操作/ 之后/ 转换/ 为/ 另/ 一个/ RDD/ ,/ 包括/ map/ 、/ flatMap/ 、/ filter/ 等/ 操作/ ./ 控制/ 操作/ 主要/ 是/ 将/ RDD/ 缓存/ 到/ 内存/ 中/ 或者/ 磁盘/ 上/ ,/ 比如/ cache/ 、/ persist/ 、/ check/ -/ point/ 等/ 操作/ ./ 行为/ 操作/ 主要/ 分为/ 两类/ :/ 一类/ 是/ 变成/ 集合/ 或/ 标量/ 的/ 操作/ ;/ 另一类/ 是/ 将/ RDD/ 存储/ 到/ 外部/ 文件系统/ 或/ 数据库/ 的/ 操作/ ./ Spark/ 的/ 所有/ 对/ RDD/ 的/ 操作/ ,/ 只有/ 当/ 执行/ 行为/ 操作/ 时/ ,/ 才/ 会/ 执行/ 之前/ 的/ 转换/ 或/ 控制/ 操作/ ./ 例如/ ,/ 我们/ 先对/ RDD/ 执行/ map/ 操作/ ,/ 然后/ 执行/ reduce/ 操作/ ,/ 在/ map/ 操作/ 时/ ,/ Spark/ 并/ 不会/ 真正/ 执行/ ,/ 只是/ 记录/ ,/ 只有/ 执行/ reduce/ 操作/ 时才/ 会/ 真正/ 一起/ 计算/ ./ 这一/ 特性/ 称为/ 惰性/ 计算/ (/ lazycomputing/ )/ ./ 4/ 分布式/ 哈希/ 学习/ 及其/ Spark/ 实现/ 4.1/ 算法/ 整体/ 设计/ 算法/ 的/ 总体/ 流程/ 设计/ 如图/ 2/ 所示/ ,/ 首先/ 在/ 训练/ 数据/ 集上/ 进行/ 码本/ 的/ 训练/ ,/ 得到/ 码本/ 模型/ 后/ 将/ 其/ 应用/ 在/ 原始数据/ 集上/ 进行/ 编码/ 压缩/ ,/ 从而/ 可以/ 将/ 原始数据/ 进行/ 编码表示/ ,/ 将/ 编码/ 后/ 的/ 数据/ 存储/ 起来/ ./ 最终/ ,/ 对于/ 任意/ 一个/ 查询/ 向量/ ,/ 通过/ 近似/ 近邻/ 查询/ 算法/ 在/ 编码数据/ 集上/ 找出/ 近邻/ 候选/ 集合/ ./ 在/ 近似/ 近邻/ 查询/ 过程/ 中/ ,/ 主要/ 分为/ 两步/ :/ 首先/ 是/ 通过/ 索引/ 找出/ 候选/ 集合/ ;/ 然后/ 在/ 候选/ 集合/ 上/ 进行/ 重新/ 排序/ ./ 4.2/ 数据结构/ 设计/ 在/ Spark/ 上/ ,/ 分布式/ 程序/ 的/ 编写/ 必须/ 依赖/ 分布式/ 数据结构/ RDD/ ,/ RDD/ 分布式/ 地/ 存储/ 在/ 不同/ 节点/ 上/ ,/ 这样/ 才能/ 使得/ 程序/ 分布式/ 地/ 执行/ ./ 因此/ ,/ 在/ 编写/ Spark/ 程序/ 过程/ 中/ 如何/ 合理/ 设计/ 程序/ 的/ RDD/ 数据结构/ 非常/ 重要/ ./ 在/ SparkMLlib/ 库中/ 提供/ 了/ 一种/ 自带/ 的/ RDD/ 数据结构/ BlockMatrix/ ./ BlockMatrix/ 是/ 用/ RDD/ 构建/ 的/ 分布式/ 矩阵/ ,/ 其中/ RDD/ 的/ 类型/ 是/ (/ (/ Int/ ,/ Int/ )/ ,/ Matrix/ )/ ./ (/ Int/ ,/ Int/ )/ 是/ Matrix/ 的/ 下标/ 索引/ ,/ BlockMatrix/ 的/ 每/ 一个/ 元素/ 都/ 是/ 一个/ 带/ 下标/ 索引/ 的/ 矩阵/ ./ BlockMatrix/ 还/ 提供/ 了/ 一些/ 自带/ 的/ 函数/ 可/ 供/ 调用/ ,/ 如/ add/ 、/ multiply/ 等/ ./ 图/ 3/ 是/ 一个/ 示例/ 的/ BlockMatrix/ 的/ 划分/ 方式/ ,/ 图中/ 的/ 8/ ×/ 10/ 的/ 矩阵/ 被/ 按行/ 划分/ 成/ 4/ 个子/ 空间/ ,/ 每个/ 子/ 空间/ 上/ 有/ 10/ 个子/ 向量/ ,/ 具体/ 实验/ 过程/ 中/ 的/ 参数/ 大小/ 与/ 此/ 不同/ ./ 那么/ 我们/ 需要/ 一个/ 4/ ×/ 10/ 的/ BlockMatrix/ 来/ 存储/ ,/ 图中/ 深色/ 框中/ 的/ 向量/ 就/ 对应/ 了/ 一个/ matrix/ ,/ 相应/ matrix/ 的/ 下标/ 索引/ 标示/ 在/ 图/ 中/ 了/ ./ 在/ 上/ 一/ 章节/ 的/ 算法/ 中/ 已经/ 说明/ ,/ 我们/ 需要/ 划分/ m/ 个子/ 空间/ ,/ 每个/ 子/ 空间/ 中有/ n/ 个子/ 向量/ ,/ 因此/ 我们/ 用/ m/ ×/ n/ 的/ BlockMatrix/ 数据结构/ 来/ 表示/ 数据/ 是/ 比较/ 合适/ 的/ ./ 具体/ 而言/ ,/ 我们/ 算法/ 中/ 的/ 训练/ 集/ 数据/ 、/ 原始数据/ 、/ 编码/ 后/ 的/ 数据/ 等/ 都/ 是/ 用/ BlockMatrix/ 来/ 存储/ ./ Page64/ ./ 3/ 训练/ 码本/ 首先/ ,/ 我们/ 将/ 乘积/ 量化/ 模型/ 的/ 目标/ 函数/ 进行/ 分布式/ 表示/ ,/ 把/ 式/ (/ 1/ )/ 改写/ 成/ 弗罗/ 贝/ 尼乌斯/ 范数/ (/ Frobeniusnorm/ )/ 的/ 形式/ :/ 其中/ 犡/ =/ 狓/ 1/ ,/ 狓/ 2/ ,/ …/ ,/ 狓/ [/ 证明/ 如何/ 从式/ (/ 1/ )/ 推导/ 到式/ (/ 2/ )/ ./ 证明/ ./ 由/ 弗罗/ 贝/ 尼乌斯/ 范数/ 的/ 定义/ 可知/ 而/ 犡/ -/ 犆/ 1/ 犫/ 1/ 熿/ 犆/ m/ 犫/ m/ 燀/ 狓/ 1/ =/ 狓/ m/ 故/ 犡/ -/ 因此/ 式/ (/ 1/ )/ 可以/ 改写/ 为式/ (/ 2/ )/ ./ 证毕/ ./ 在/ 分布式/ 的/ 系统/ 中/ ,/ 数据/ 是/ 分布式/ 地/ 存储/ 在/ 拥有/ S/ 个/ 节点/ 的/ 计算/ 集群/ 上/ ./ 假设/ 第/ t/ 个/ 节点/ 上/ 存储/ 的/ nt/ 个/ 数据/ ,/ 原来/ 的/ 数据/ 矩阵/ 犡/ 就/ 可以/ 被/ 划分/ 成/ S/ 个/ 小/ 的/ 矩阵/ 进行/ 分布式/ 存储/ ,/ 即/ 犡/ =/ [/ 犡/ 1/ ,/ 犡/ 2/ ,/ …/ ,/ 犡/ S/ ]/ ,/ 其中/ 犡/ i/ ∈/ / 也/ 可以/ 用/ 犅/ =/ 犅/ 1/ ,/ 犅/ 2/ ,/ …/ ,/ 犅/ [/ 布式/ 这一/ 特点/ ,/ 由式/ (/ 2/ )/ ,/ 我们/ 可以/ 写出/ 如下/ 形式/ 的/ 分布式/ 乘积/ 量化/ 的/ 目标/ 函数/ :/ 从式/ (/ 3/ )/ 中/ ,/ 我们/ 可以/ 看出/ ,/ 在/ 每/ 一个/ 子/ 空间/ 中/ 需要/ 求解/ 的/ 等式/ 形式/ 都/ 是/ 相同/ 的/ ./ 以/ 第一个/ 子/ 空间/ 为例/ ,/ 对于/ ∑/ S/ 犆/ 1/ 和/ 犅/ 1t/ ,/ 只/ 需要/ 对/ 犡/ 1t/ 进行/ 分布式/ K/ -/ Means/ 聚类/ 就/ 可以/ 得到/ 结果/ ./ 在/ 具体/ 训练/ 码本/ 的/ 过程/ 中/ ,/ 如/ 前/ 文中/ 所/ 介绍/ 的/ 一样/ ,/ 首先/ 将/ 训练/ 集中/ 的/ 数据/ 划分/ 到/ m/ 个子/ 空间/ ./ 然后/ 在/ 每个/ 子/ 空间/ 中/ ,/ 对/ 所有/ 的/ 子/ 向量/ 数据/ 进行/ K/ -/ Means/ 聚类/ ,/ 可以/ 得到/ h/ 个/ 聚类/ 中心/ ,/ 也/ 就/ 得到/ 每个/ 子/ 空间/ 的/ 码本/ ./ 图/ 4/ 表示/ 了/ 对/ 训练/ 数据/ 集/ 犡/ 进行/ 划分/ 为/ m/ 个子/ 空间/ ,/ 然后/ 在子/ 空间/ 中/ 分别/ 聚类/ 得到/ 码本/ 模型/ 犆/ ./ 训练/ 集/ 的/ 选取/ 对/ 整个/ 算法/ 是/ 非常/ 关键/ 的/ ,/ 最终/ 近邻/ 查询/ 的/ 准确率/ 一定/ 程度/ 上/ 取决于/ 训练/ 集/ 的/ 好坏/ ./ 在/ 选择/ 训练/ 集上/ 有/ 两点/ 需要/ 注意/ :/ 一是/ 训练/ 集/ 的/ 规模/ 大小/ ;/ 二是/ 训练/ 集/ 的/ 代表性/ ./ 一般而言/ ,/ 模型/ 确定/ 以后/ ,/ 训练/ 集/ 的/ 规模/ 不宜/ 过大/ 也/ 不能/ 太小/ ./ 此外/ ,/ 训练/ 集/ 还/ 应该/ 尽可能/ 得/ 有/ 代表性/ ,/ 尽可能/ 广泛/ 地/ 分布/ 于/ 整个/ 数据/ 空间/ ,/ 这样/ 才能/ 使得/ 训练/ 出来/ 的/ 码本/ 更好/ 地/ 量化/ 原始数据/ 空间/ ,/ 更/ 准确/ 地/ 对/ 原始数据/ 集/ 进行/ 编码/ ./ 在/ 后面/ 的/ 实验/ 过程/ 中/ ,/ 我们/ 采用/ 对/ 原始数据/ 集/ 随机/ 采样/ 的/ 方法/ 来/ 构建/ 训练/ 集/ ./ 码本/ 的/ 训练/ 算法/ 描述/ 如/ 算法/ 1/ 所示/ ./ 算法/ 1/ ./ 训练/ 码本/ ./ 输入/ :/ 训练/ 集/ 犡/ 矩阵/ ,/ 子/ 空间/ 聚类/ 数量/ h/ ,/ 聚类/ 算法/ 最/ Page7/ 输出/ :/ 码本/ 模型/ 数组/ model1/ ./ uniformlysplit/ 犡/ byrowsintomsubspaces2/ ./ FOREACHsubspacei/ =/ 1/ :/ minparallelDO3/ ./ [/ ]/ modeli/ ←/ kmeans/ _/ train/ 犡/ [/ i/ ]/ ,/ h/ ,/ (/ 4/ ./ ENDFOREACH5/ ./ RETURNmodel4/ ./ 4/ 编码/ 压缩/ 训练/ 得出/ 每个/ 子/ 空间/ 中/ 的/ 码本/ 之后/ ,/ 将/ 其/ 应用/ 到/ 原始数据/ 集/ 犣/ 上/ 进行/ 编码/ 压缩/ ./ 首先/ ,/ 同样/ 也/ 是/ 将/ 原始数据/ 集/ 划分/ 到/ m/ 个子/ 空间/ ./ 然后/ 在/ 每个/ 子/ 空间/ 中/ ,/ 对/ 每/ 一个/ 数据/ 的/ 子/ 向量/ ,/ 分别/ 用/ 训练/ 出来/ 的/ 码本/ 进行/ 编码/ ,/ 也/ 就是/ 用/ 训练/ 好/ 的/ K/ -/ Means/ 模型/ 进行/ 预测/ ,/ 可以/ 计算/ 出/ 每个/ 子/ 向量/ 的/ 所属/ 聚类/ 中心/ ,/ 从而/ 可以/ 使用/ 对应/ 的/ 聚类/ 中心/ 序号/ 对/ 该子/ 向量/ 进行/ 编码/ ./ 这样/ ,/ 整个/ 数据/ 集中/ 的/ 向量/ 数据/ 都/ 可以/ 用/ 编码/ 来/ 进行/ 表示/ ./ 完成/ 编码/ 压缩/ 之后/ ,/ 编码/ 后/ 的/ 数据/ 集/ 相比/ 于/ 原始数据/ 集/ ,/ 存储空间/ 成倍/ 减少/ ./ 图/ 5/ 中/ 编码/ 压缩/ 过程/ 的/ 示意图/ ,/ 将/ 码本/ 模型/ 犆/ 广播/ 到/ 原始数据/ 集/ 犣/ 的/ 每个/ 子/ 空间/ ,/ 在子/ 空间/ 中/ 对应/ 编码/ 压缩/ 形成/ 编码/ 后/ 的/ 矩阵/ 犅/ ./ 具体/ 算法/ 如/ 算法/ 2/ 所示/ ./ 算法/ 2/ ./ 编码/ 压缩/ ./ 输入/ :/ 码本/ 模型/ 数组/ model/ ,/ 原始数据/ 集/ 犣/ 矩阵/ 输出/ :/ 编码/ 后/ 的/ 矩阵/ 犅/ 1/ ./ uniformlysplit/ 犣/ byrowsintomsubspaces2/ ./ broadcastmodeltoallnodes3/ ./ n/ ←/ numofcolumnsof/ 犣/ 4/ ./ FOREACHsubspacei/ =/ 1/ :/ m/ ,/ columnj/ =/ 1/ :/ nin5/ ./ 犅/ i/ ,/ [/ ]/ j/ ←/ [/ ]/ modeli/ ./ predict/ 犣/ i/ ,/ [/ ]/ (/ )/ j6/ ./ ENDFOREACH7/ ./ RETURN/ 犅/ 4.5/ 近邻/ 查询/ 在/ 近似/ 近邻/ 查询/ 的/ 过程/ 中/ ,/ 对于/ 任意/ 一个/ 查询/ 向量/ 狇/ ,/ 计算/ 狇/ 和/ 任意/ 的/ 数据库/ 中/ 向量/ 狓/ i/ 之间/ 的/ 距离/ 时/ ,/ 使用/ 非对称/ 距离/ 度量/ (/ Asymmetricdistancecomputation/ )/ [/ 7/ ]/ 方式/ 进行/ 距离/ 计算/ ./ 哈希/ 方法/ 的/ 出发点/ 就是/ 避免/ 直接/ 计算/ 狇/ 和/ 狓/ i/ 之间/ 的/ 欧式/ 距离/ D/ (/ 狇/ ,/ 狓/ i/ )/ ,/ 因此/ 如果/ 狇/ 与/ 数据库/ 中/ 的/ 每/ 一个/ 向量/ 都/ 计算/ 一次/ 距离/ ,/ 查询/ 的/ 时间/ 代价/ 太大/ ./ 在/ 近似/ 近邻/ 查询/ 过程/ 中/ ,/ 使用/ 狇/ 和/ 狓/ i/ 之间/ 的/ 非对称/ 距离/ AD/ 狇/ ,/ 狓/ (/ )/ i/ 近似/ 表示/ 原始/ 距离/ D/ 狇/ ,/ 狓/ (/ )/ i/ ,/ 其中/ AD/ 狇/ ,/ 狓/ (/ )/ i/ =/ D/ (/ 狇/ ,/ 狓/ i/ )/ ,/ 狓/ i/ 是/ 狓/ i/ 所属/ 的/ 聚类/ 中心/ ./ D/ 狇/ ,/ 狓/ (/ )/ i/ 可以/ 先/ 计算出来/ 存储/ 在/ 查找/ 表中/ ,/ 在/ 之后/ 查找/ 比较/ 时/ ,/ 用/ 查找/ 表中/ 的/ 非对称/ 距离/ 近似/ 表示/ 原始/ 距离/ ./ 在/ 算法/ 具体/ 流程/ 上/ ,/ 我们/ 首先/ 计算/ 出/ 狇/ 在/ 子/ 空间/ 中/ 对应/ 子/ 向量/ 和子/ 空间/ 中聚类/ 中心/ 之间/ 的/ 距离/ ,/ 将/ 计算/ 出/ 的/ 距离/ 用/ 一个/ 查找/ 表/ 存储/ 好/ ./ 现在/ 我们/ 计算/ 查询/ 向量/ 狇/ 和/ 数据库/ 中/ 每个/ 数据/ 之间/ 的/ 距离/ ./ 在/ 每个/ 子/ 空间/ 中/ ,/ 因为/ 子/ 向量/ 与/ 聚类/ 中心/ 之间/ 距离/ 已经/ 存储/ 在/ 查找/ 表中/ ,/ 可以/ 查找/ 出/ 每个/ 数据/ 与/ 向量/ 狇/ 之间/ 的/ 近似/ 距离/ ./ 最后/ ,/ 将/ 不同/ 子/ 空间/ 中/ 同一/ 向量/ 距离/ 求和/ ./ 这样/ 就/ 得到/ 了/ 查询/ 向量/ 狇/ 和/ 数据库/ 中/ 每个/ 向量/ 之间/ 的/ 距离/ ./ 通过/ 线性/ 扫描/ 一遍/ 距离/ 数组/ ,/ 我们/ 就/ 可以/ 快速/ 获取/ 出前/ k/ 个/ 近邻/ 向量/ ./ 图/ 6/ 是/ 近似/ 近邻/ 查询/ 阶段/ 的/ 流程图/ ./ 算法/ 如/ 算法/ 3/ 所示/ ./ 算法/ 3/ ./ 近邻/ 查询/ ./ 输入/ :/ 码本/ 模型/ 数组/ model/ ,/ 编码数据/ 集/ 犅/ ,/ 查询/ 向量/ 狇/ 输出/ :/ 近邻/ 集合/ result/ 数组/ 1/ ./ FORi/ =/ 1/ →/ mDO2/ ./ FORj/ =/ 1/ →/ model/ [/ i/ ]/ ./ numOfCenters3/ ./ 犇/ [/ i/ ,/ j/ ]/ ←/ computeDist/ (/ [/ ]/ modelsi/ ./ center/ [/ j/ ]/ ,/ 狇/ )/ 4/ ./ ENDFOR5/ ./ ENDFOR6/ ./ n/ ←/ numofcolumnsof/ 犅/ 7/ ./ broadcastdisttoallnodes8/ ./ FOREACHsubspacei/ =/ 1/ :/ m/ ,/ columnj/ =/ 1/ :/ nin9/ ./ dist/ [/ i/ ]/ ←/ dist/ [/ i/ ]/ +/ 犇/ [/ i/ ,/ 犅/ [/ i/ ,/ j/ ]/ ]/ 10/ ./ ENDFOREACH11/ ./ result/ ←/ getTopK/ (/ )/ dist12/ ./ RETURNresult/ 上述/ 的/ 查询/ 过程/ 中/ ,/ 非对称/ 距离/ 与/ 原始/ 距离/ 之间/ 的/ 误差/ 可以/ 用/ AD/ 狇/ ,/ 狓/ (/ )/ i/ -/ D/ 狇/ ,/ 狓/ (/ )/ i/ 表示/ ./ Page8/ 定理/ 1/ ./ 狓/ i/ -/ 犆/ 犫/ i2/ 是/ 非对称/ 距离/ AD/ 狇/ ,/ 狓/ (/ )/ i/ 与/ 原始/ 距离/ D/ 狇/ ,/ 狓/ (/ )/ i/ 之间/ 误差/ 的/ 上界/ ./ 证明/ ./ AD/ 狇/ ,/ 狓/ (/ )/ i/ -/ D/ 狇/ ,/ 狓/ (/ )/ i/ 由/ 定理/ 1/ 可知/ ,/ 非对称/ 距离/ 与/ 原始/ 距离/ 之间/ 的/ 误差/ 可以/ 被式/ (/ 1/ )/ 中/ 目标/ 函数/ 所/ 约束/ ,/ 最小化/ 目标/ 函数/ 的/ 同时/ ,/ 也/ 最小化/ 了/ 非对称/ 距离/ 与/ 原始/ 距离/ 之间/ 的/ 误差/ ,/ 从而/ 保证/ 检索/ 的/ 准确性/ ./ 4.6/ 系统优化/ 集群/ 系统/ 上/ 的/ 分布式/ 程序/ 一般/ 都/ 会/ 需要/ 考虑/ 节点/ 间/ 数据通信/ 的/ 问题/ ,/ Spark/ 中/ 对/ RDD/ 已经/ 进行/ 了/ 较/ 完备/ 的/ 封装/ ,/ 让/ 开发者/ 可以/ 不用/ 直接/ 进行/ 底层/ 的/ 数据管理/ (/ 通信/ 、/ 容错/ )/ ,/ 只/ 需/ 通过/ 操作/ 上层/ 的/ 一些/ 接口/ 即可/ ,/ 但是/ 数据通信/ 的/ 问题/ 在/ Spark/ 中/ 仍/ 是/ 一个/ 不能/ 忽视/ 的/ 问题/ ,/ 只有/ 了解/ 底层/ 的/ 通信/ 机制/ 才能/ 利用/ API/ 编写出/ 高效/ 的/ 程序/ ./ 程序/ 优化/ 的/ 原则/ 是/ 尽可能/ 地/ 减少/ 数据/ 的/ 通信/ ,/ 特别/ 是/ 数据量/ 比较/ 大/ 的/ 数据通信/ ./ 以上/ 是/ 对系统/ 的/ 第/ 1/ 点/ 优化/ ./ 第/ 2/ 点/ 优化/ 是/ 利用/ SparkRDD/ 的/ 持久/ 化机制/ ./ SparkRDD/ 的/ 持久/ 化/ 可以/ 将/ RDD/ 数据/ 缓存/ 到/ 内存/ 或者/ 磁盘/ 上/ ,/ 以后/ 用到/ RDD/ 的/ 时候/ 不必/ 多次重复/ 计算/ ,/ 从而/ 节省时间/ 效率/ ,/ 这一/ 机制/ 特别/ 适合/ 在/ 迭代/ 算法/ 中/ 使用/ ./ 在/ 我们/ 的/ 算法/ 中/ ,/ 我们/ 选择/ 将/ 一些/ 反复/ 用到/ RDD/ 缓存/ 在/ 内存/ 当中/ ./ 第/ 3/ 点/ 优化/ 是/ 对/ Spark/ 程序/ 参数/ 的/ 调优/ ./ Spark/ 程序/ 需要/ 设置/ 一些/ 如/ executor/ 数量/ 、/ 每个/ executor/ 的/ 核数/ 、/ executor/ 内存大小/ 、/ RDD/ 分区/ 数等/ 在内/ 的/ 系列/ 参数/ ./ 一般而言/ ,/ executor/ 的/ 数量/ 乘以/ 每个/ executor/ 的/ 核数/ 应该/ 与/ 集群/ 的/ 总/ 核数/ 相同/ ;/ executor/ 的/ 内存大小/ 应该/ 与/ 集群/ 中/ 每台/ 机器/ 的/ 内存大小/ 除以/ 每台/ 机器/ 分配/ 的/ executor/ 数/ 相同/ ;/ RDD/ 的/ 分区/ 数会/ 直接/ 影响/ 程序/ 并行度/ ,/ 合适/ 的/ 分区/ 数/ 才能/ 保证/ 程序/ 充分/ 并行执行/ ,/ 这一/ 参数设置/ 应该/ 与/ executor/ 数量/ 相关/ ./ 5/ 实验/ 结果/ 与/ 分析/ 在/ 本节/ 中/ ,/ 我们/ 通过/ 在/ 4/ 个/ 数据/ 集上/ 进行/ 大量/ 对比/ 试验/ ,/ 以此/ 来/ 观察/ 我们/ 在/ Spark/ 上/ 所/ 实现/ 的/ 分布式/ 乘积/ 量化/ 方法/ SparkPQ/ 的/ 性能/ 和/ 可扩展性/ ./ 一方面/ ,/ 我们/ 通过/ 和/ 单机版/ 的/ PQ/ 、/ ITQ/ 、/ SH/ 、/ LSH/ 这/ 4/ 个/ 算法/ 在/ 不同/ 数据/ 集上/ 的/ 对比/ 来/ 观测/ 算法/ 的/ 性能/ 好坏/ ;/ 另一方面/ ,/ 我们/ 通过/ 在/ Spark/ 集群/ 上/ ,/ 改变/ 集群/ 的/ 节点/ 数量/ 、/ Spark/ 参数/ 配置/ 、/ 数据/ 集/ 大小/ 、/ 算法/ 参数/ 等/ 来/ 观测/ 的/ SparkPQ/ 的/ 可扩展性/ 和/ 对/ 参数/ 变化/ 的/ 敏感/ 程度/ ./ 5.1/ 实验/ 环境/ 和/ 数据/ 集/ 实验/ 环境/ ./ 本次/ 实验/ 中/ Spark/ 部分/ 的/ 实验/ 是/ 在/ 由/ 4/ 台/ 机器/ 构成/ 的/ SparkonYARN/ 集群/ 系统/ 上/ 完成/ 的/ ./ 其中/ 每台/ 机器配置/ 相同/ ,/ 如表/ 2/ 所示/ ./ 操作系统/ CPU/ 核数/ Scala/ 版本/ Spark/ 版本/ 非/ 分布式/ 的/ PQ/ 、/ ITQ/ 、/ SH/ 、/ LSH/ 算法/ 的/ 单机/ 实验/ 是/ 在/ 一台/ 机器/ 上/ 完成/ ,/ 配置/ 信息/ 如表/ 3/ 所示/ ./ CPU/ 核数/ MATLAB/ 版本/ 数据/ 集/ ./ 实验/ 过程/ 中/ ,/ 共/ 使用/ 了/ 4/ 个/ 数据/ 集/ :/ SIFT1M/ 、/ GIST1M/ 、/ CIFAR/ -/ 10/ 和/ SIFT100M/ ,/ 这/ 4/ 个/ 数据/ 集/ 近年来/ 被/ 广泛/ 用于/ 衡量/ 近似/ 近邻/ 查询方法/ 的/ 有效性/ [/ 7/ -/ 9/ ,/ 12/ -/ 13/ ]/ ./ 向量/ ,/ 其/ 原始/ 图片/ 来源于/ 图片/ 分享/ 网站/ Flickr/ ./ SIFT1M/ 中/ 的/ 每条/ 数据/ 为/ 128/ 维/ 的/ SIFT/ 特征/ GIST1M/ 中/ 的/ 每条/ 数据/ 是/ 960/ 维/ 的/ GIST/ 特征向量/ ./ CIFAR/ -/ 10/ 数据/ 集是/ 一个/ 8/ ×/ 108/ 千万/ 极小/ 图像/ 数据/ 集/ [/ 14/ ]/ 的/ 子集/ ,/ 被/ 广泛应用/ 于/ 计算机/ 视觉/ 领域/ 测试/ 目标/ 识别/ [/ 15/ ]/ 、/ 图像/ 分类/ [/ 16/ ]/ 等/ 任务/ 的/ 效果/ ,/ 由/ 60000/ 张/ 32/ ×/ 32/ 大小/ 的/ 彩色图像/ 组成/ ,/ 分/ 属于/ 10/ 个/ 类别/ ,/ 每个/ 类别/ 包含/ 6000/ 张/ 图片/ ./ 在/ 本次/ 实验/ 中/ ,/ 我们/ 对/ CIFAR/ -/ 10/ 数据/ 集中/ 的/ 每张/ 图片/ 提取/ 出/ 320/ 维/ 的/ GIST/ 特征/ ,/ 并/ 从中/ 随机/ 选出/ 1000/ 张/ 图片/ 作为/ 测试数据/ 集/ ,/ 其余/ 59000/ 张/ 作为/ 训练/ 数据/ 集和待/ 检索/ 数据/ 集/ ./ SIFT100M/ 是/ SIFT1B/ [/ 7/ ]/ 数据/ 集/ 的/ 一个/ 子集/ ,/ 包含/ 数据/ 集中/ 的/ 1/ // 10/ 数据/ ,/ 该/ 数据/ 集中/ 的/ 待/ 检索/ 集由/ Page9108/ 个/ SIFT/ 特征向量/ 构成/ ,/ 用来/ 验证/ 我们/ 提出/ 的/ 方法/ 在/ 大规模/ 数据/ 集上/ 的/ 可扩展性/ ./ 整个/ 实验/ 部分/ 使用/ 的/ 所有/ 数据/ 集/ 规模/ 如表/ 4/ 所示/ ./ 实验/ 部分/ 包括/ 算法/ 性能/ 对比/ 实验/ 和/ 算法/ 可/ 扩展/ 数据/ 集/ 维度/ 训练/ 集/ 检索/ 集/ 测试/ 集/ SIFT1M128105106104GIST1M9605/ ×/ 105106103CIFAR103205/ ./ 9/ ×/ 1045.9/ ×/ 104103SIFT100M128107108104/ 表/ 4/ 中/ 维度/ 是/ 表示/ 向量/ 的/ 维数/ ,/ 训练/ 集/ 、/ 检索/ 集/ 和/ 测试/ 集/ 表示/ 的/ 是/ 其中/ 向量/ 的/ 数量/ 大小/ ./ 训练/ 集是/ 用于/ 训练/ 哈希/ 模型/ 的/ 数据/ 集/ ,/ 检索/ 集/ 包含/ 所有/ 可以/ 被/ 编码/ 检索/ 到/ 的/ 数据库/ 数据/ ,/ 测试/ 集是/ 指/ 用于/ 查询/ 的/ 所有/ 数据/ ./ 5.2/ 实验/ 设置/ 性/ 实验/ ,/ 下文/ 将/ 详述/ 各/ 部分/ 实验/ 的/ 具体/ 设置/ ./ 在/ 性能/ 对比/ 实验/ 部分/ ,/ 我们/ 参照/ 文献/ [/ 6/ ]/ ,/ 使用/ 召回/ 率/ (/ Recall/ )/ 、/ 查准率/ (/ Precision/ )/ 、/ 平均/ 准确率/ (/ MeanAveragePrecision/ )/ 等/ 评价/ 指标/ ./ 通过/ 与/ PQ/ 、/ ITQ/ 、/ SH/ 、/ LSH/ 等/ 方法/ 在/ 不同/ 数据/ 集上/ 的/ 召回/ 率/ 、/ 查准率/ 和/ 平均/ 准确率/ 的/ 对比/ 来/ 观测/ 算法/ 的/ 性能/ ./ 下面/ 列举/ 出/ 实验/ 中/ 对比/ 的/ 所有/ 算法/ :/ (/ 1/ )/ SparkPQ/ ./ Spark/ 上/ 分布式/ 乘积/ 量化/ 方法/ ./ (/ 2/ )/ PQ/ ./ 单机版/ 的/ 乘积/ 量化/ 方法/ ./ (/ 3/ )/ ITQ/ ./ 第/ 2.2/ 节中/ 介绍/ 的/ 迭代/ 量化/ 方法/ ./ (/ 4/ )/ SH/ ./ 第/ 2.2/ 节中/ 介绍/ 的/ 谱/ 哈希/ 方法/ ./ (/ 5/ )/ LSH/ ./ 第/ 2.2/ 节中/ 介绍/ 的/ 局部/ 敏感/ 哈希/ 方法/ ./ 在/ 验证/ 算法/ 可扩展性/ 的/ 实验/ 中/ ,/ 我们/ 通过/ 在/ 表/ 5Spark/ 与/ MATLAB/ 上/ 实验/ 召回/ 率/ Spark0/ ./ 224MATLAB0/ ./ 226/ 此外/ ,/ 我们/ 还/ 将/ 分布式/ 乘积/ 量化/ 算法/ 与/ ITQ/ 、/ SH/ 、/ LSH/ 等/ 经典/ 算法/ 的/ 性能/ 对比/ ,/ 图/ 7/ 是/ 改变/ 查询/ 检出/ 相似/ 向量/ 的/ 数量/ R/ ,/ 不同/ 算法/ 的/ 实验/ 召回/ 率/ 的/ 变化/ 曲线图/ ./ 从图/ 7/ 中/ 可以/ 看出/ ,/ 我们/ 提出/ 的/ 分布式/ 乘积/ 量化/ 方法/ 的/ 召回/ 率要/ 比/ 其它/ 几种/ 经典/ 方法/ 的/ 召回/ 率/ 都/ 要/ 高/ ,/ 证明/ 了/ 我们/ 方法/ 的/ 有效性/ ./ 除此之外/ 我们/ 发现/ 检出/ 数量/ 越大/ ,/ 召回/ 率越/ 高/ ,/ 这/ 与/ 召回/ 率/ 的/ 定义/ 相符/ ./ 5.3/ ./ 2CIFAR/ -/ 10/ 数据/ 集/ 实验/ 结果/ 在/ CIFAR/ -/ 10/ 数据/ 集上/ 的/ 实验/ 中/ ,/ Spark/ 集群/ Spark/ 集群/ 中/ 改变/ 集群/ 的/ 节点/ 数量/ 、/ Spark/ 中/ 分配/ 的/ executor/ 数量/ 大小/ 、/ 训练/ 集/ 数据/ 大小/ 和子/ 空间/ 数量/ m/ 等/ 参数/ 来/ 验证/ 算法/ 的/ 可扩展性/ 和/ 对/ 参数/ 的/ 敏感/ 程度/ ./ 集群/ 节点/ 数量/ 为/ 实验/ 中/ 使用/ 的/ 机器/ 数量/ ,/ 在/ 实验/ 中/ 默认/ 总/ 节点/ 数量/ 为/ 4/ ./ Executor/ 数量/ 为/ Spark/ 分配/ 给/ 程序/ 的/ 任务/ 执行/ 进程/ 个数/ ,/ 实验/ 中/ 默认设置/ 为/ 32/ ./ 训练/ 集/ 大小/ 是/ 指/ 哈希/ 学习/ 过程/ 中/ 训练/ 集/ 数据/ 的/ 多少/ ./ 子/ 空间/ 数量/ m/ 和子/ 空间/ 聚类/ 中心/ 数量/ h/ 会/ 影响/ 整体/ 数据压缩/ 的/ 编码/ 长度/ ,/ 默认/ m/ =/ 8/ ,/ h/ =/ 256/ ,/ 使用/ 8log256/ =/ 64bit/ 长度/ 编码/ 原始/ 向量/ 数据/ ./ 5.3/ 算法/ 性能/ 对比/ 实验/ 5.3/ ./ 1SIFT1M/ 数据/ 集/ 实验/ 结果/ 首先/ 我们/ 在/ SIFT1M/ 数据/ 集上/ 进行/ 对比/ 实验/ ,/ 通过/ 比较/ Spark/ 集群/ 上/ 实现/ 的/ 分布式/ 乘积/ 量化/ 方法/ 和/ 单机/ MATLAB/ 实现/ 的/ 乘积/ 量化/ 方法/ 的/ 查询/ 召回/ 率/ ,/ 以/ 验证/ 算法/ 的/ 正确性/ ./ 在/ Spark/ 集群/ 系统/ 上/ 的/ 程序/ 参数设置/ ,/ 我们/ 采用/ yarn/ -/ client/ 模式/ 在/ 集群/ 上/ 运行/ 程序/ ,/ 所有/ 参数/ 如/ 5.2/ 节/ 所述/ ,/ 均/ 采用/ 默认设置/ ,/ 编码/ 长度/ 为/ 64bit/ ./ 在/ 本次/ 实验/ 中/ ,/ SIFT1M/ 数据/ 中有/ 104/ 个/ 查询/ 向量/ ,/ 对于/ 任意/ 一个/ 查询/ 向量/ ,/ 通过/ 整个/ 近似/ 近邻/ 查询/ 计算/ ,/ 我们/ 在/ 数据库/ 向量/ 中/ 找到/ 前/ 100/ 个/ 近邻/ 向量/ ,/ 并/ 分别/ 取/ 检出/ 数量/ R/ 为/ 1/ 、/ 2/ 、/ 5/ 、/ 10/ 、/ 20/ 、/ 50/ 、/ 100/ ,/ 计算/ 出前/ R/ 个/ 向量/ 中/ 出现/ 最近/ 邻/ 向量/ 的/ 次数/ s/ ,/ 那么/ 衡量标准/ 召回/ 率/ =/ s/ // 104/ ./ 表/ 5/ 中是/ Spark/ 集群/ 上/ 分布式/ 乘积/ 量化/ 方法/ 和/ MATLAB/ 上/ 实现/ 的/ 乘积/ 量化/ 方法/ 的/ 召回/ 率/ 对比/ ./ 从表中/ 可以/ 看出/ ,/ Spark/ 上/ 分布式/ 算法/ 的/ 召回/ 率/ 与/ MATLAB/ 单机/ 版本/ 的/ 相差/ 不/ 大/ ,/ 从而/ 证明/ 了/ 算法/ 正确/ 有效/ ./ 0.5930/ ./ 607/ 系统/ 的/ 配置/ 以及/ 程序/ 的/ 参数设置/ 和/ SIFT1M/ 实验/ 中/ 完全相同/ ./ 对于/ CIFAR/ -/ 10/ 中/ 60000/ 张/ 图片/ ,/ 随机/ 产生/ 1000/ 张/ 图片/ 作为/ 测试数据/ ,/ 其他/ 59000/ 张/ 图片/ 用于/ 训练/ 和/ 检索/ ,/ 对于/ 图片/ ,/ 我们/ 提取/ 出/ 320/ 维/ 的/ GIST/ 特征/ ,/ 使用/ 欧氏/ 距离/ 先/ 计算/ 出/ 1000/ 个/ 测试数据/ 的/ 与/ 剩余/ 待/ 检索/ 数据/ 的/ 近邻/ 关系/ ./ 使用/ 此/ 近邻/ 关系/ 作为/ 衡量/ 基准/ ,/ 对于/ 每个/ 算法/ ,/ 我们/ 分别/ 计算/ 检索/ 的/ 查准率/ 、/ 召回/ 率/ 以及/ 平均/ 准确率/ ,/ 以此/ 对比/ 不同/ 算法/ 的/ 性能/ 好坏/ ./ 在/ 图/ 8/ 中/ ,/ 我们/ 可以/ 看到/ 不同/ 算法/ 的/ 查准率/ 变/ Page10/ 化/ ,/ 检出/ 数量/ R/ 从/ 0/ 增加/ 到/ 1000/ ,/ 随着/ 检出/ 数量/ 增大/ ,/ 所有/ 算法/ 的/ 查准率/ 都/ 在/ 不断/ 降低/ ./ 然而/ 不管/ 检出/ 数量/ 如何/ 变化/ ,/ 分布式/ 乘积/ 量化/ 算法/ 的/ 查准率/ 均/ 比/ 其它/ 算法/ 高/ ./ 图/ 9/ 则/ 反映/ 的/ 是/ 检出/ 数量/ R/ 从/ 0/ 变化/ 到/ 1000/ ,/ 不同/ 算法/ 的/ 召回/ 率/ 变化/ 情况/ ./ 同样/ ,/ 分布式/ 乘积/ 量化/ 方法/ 的/ 召回/ 率/ 高于/ 其他/ 所有/ 算法/ ./ 图/ 10/ 展现/ 了/ 不同/ 算法/ 在/ 不同/ 编码/ 长度/ 下/ 的/ 平均/ 准确率/ 变化/ 情况/ ./ 在/ 编码/ 长度/ 分别/ 为/ 8/ 、/ 16/ 、/ 32/ 、/ 64/ 、/ 128/ 情况/ 下/ ,/ 我们/ 可以/ 看到/ ,/ 对于/ 所有/ 算法/ ,/ 编码/ 比特/ 数越/ 大/ ,/ 算法/ 的/ 平均/ 准确率/ 越高/ ,/ 即/ 平均/ 准确率/ 随着/ 比特/ 数/ 的/ 增大/ 而/ 升高/ ./ 然而/ ,/ 不同/ 算法/ 的/ 增长幅度/ 是/ 不同/ 的/ ./ 我们/ 可以/ 比较/ SparkPQ/ 和/ ITQ/ ,/ ITQ/ 在/ 从/ 8bit/ 到/ 16bit/ 长度/ 情况/ 下/ ,/ 平均/ 准确率/ 增长幅度/ 较大/ ,/ 之后/ 逐渐/ 趋缓/ ;/ SparkPQ/ 在/ 8bit/ 长度/ 的/ 平均/ 准确率/ 较/ 高/ ,/ 最初/ 的/ 增长幅度/ 也/ 不大/ ,/ 但是/ 在/ 64bit/ 变化/ 到/ 128bit/ 长度/ 时/ ,/ 平均/ 准确率/ 增长/ 的/ 幅度/ 较大/ ./ 由此/ 可以/ 看出/ ,/ SparkPQ/ 在/ 编码/ 长度/ 较长/ 时/ ,/ 增加/ 编码/ 长度/ 的/ 时/ 仍/ 能/ 保持/ 较/ 好/ 的/ 平均/ 准确率/ 增幅/ ./ 图/ 10/ 不同/ 算法/ CIFAR/ -/ 10/ 上/ 的/ 平均/ 准确率/ 对比/ 图/ 11/ 是/ 我们/ 从/ 实验/ 中选/ 取出/ 的/ 3/ 个/ 相似/ 图像/ 检索/ 的/ 示例/ ,/ 对于/ 每个/ 查询/ 请求/ 的/ 图片/ ,/ 选取/ 出前/ 36/ 个/ 最/ 相似/ 的/ 图片/ ./ 同样/ ,/ 在/ 这个/ 实验/ 中/ 对/ 图片/ 提取/ 320/ 维/ 的/ GIST/ 特征/ ,/ 采用/ 特征向量/ 的/ 欧氏/ 距离/ 近邻/ 关系/ 作为/ 参考/ 标准/ ./ 图中/ 深色/ 框/ 标识/ 出/ 的/ 图片/ 与/ 查询/ 图片/ 并/ 不/ 近邻/ ./ 从图/ 中/ 可以/ 看出/ ,/ 对于/ 这/ 3/ 个/ 查询/ 请求/ ,/ 其中/ 分布式/ 乘积/ 量化/ 的/ 返回/ 结果/ 是/ 最/ 精确/ 的/ ,/ 迭代/ 量化/ 方法/ 次之/ ,/ 局部/ 敏感/ 哈希/ 和/ 谱/ 哈希/ 的/ 准确度/ 较差/ ./ 5.4/ 算法/ 可扩展性/ 实验/ 5.4/ ./ 1SIFT1M/ 数据/ 集/ 实验/ 结果/ 本/ 实验/ 通过/ 比较/ 不同/ 节点/ 数量/ 的/ Spark/ 集群/ 上/ 的/ 乘积/ 量化/ 的/ 近似/ 近邻/ 查询方法/ 实验/ 的/ 召回/ 率/ 和/ 时间/ 消耗/ 的/ 对比/ ,/ 用于/ 验证/ 算法/ 的/ 可扩展性/ ./ 本次/ 实验/ 分布式/ 乘积/ 量化/ 算法/ 部分/ 采用/ 默认/ 配置/ ,/ 通过/ 改变/ 集群/ 中/ 节点/ 数量/ ,/ 观察/ 不同/ 检出/ 数量/ 的/ 召回/ 率/ 变化/ 与/ 计算/ 时间/ 随/ 集群/ 节点/ 数量/ 的/ 变化/ ./ 表/ 6/ 和表/ 7/ 分别/ 显示/ 的/ 是/ 在/ 不同/ 节点/ 数量/ 的/ Spark/ 集群/ 系统/ 上/ 实验/ 召回/ 率/ 对比/ 以及/ 所用/ 时间/ 对比/ ./ Page11/ 图/ 11CIFAR/ -/ 10/ 数据/ 集上/ 64/ 位/ 编码/ 长度/ 图像/ 检索/ 示例/ 表/ 6/ 不同/ 节点/ 数量/ Spark/ 集群/ 系统/ 上/ 的/ 实验/ 召回/ 率/ 节点/ 数/ 召回/ 率/ (/ R/ =/ 1/ )/ 召回/ 率/ (/ R/ =/ 2/ )/ 召回/ 率/ (/ R/ =/ 5/ )/ 召回/ 率/ (/ R/ =/ 10/ )/ 召回/ 率/ (/ R/ =/ 20/ )/ 召回/ 率/ (/ R/ =/ 50/ )/ 召回/ 率/ (/ R/ =/ 100/ )/ 10.22720/ ./ 23130.22040/ ./ 224/ 表/ 7/ 不同/ 节点/ 数量/ Spark/ 集群/ 系统/ 上/ 的/ 实验/ 时间/ 节点/ 数/ 训练/ 时间/ // s/ 编码/ 时间/ // s/ 单次/ 查询/ // s1234/ 仅/ 从表/ 6/ 来看/ ,/ 不同/ 节点/ 数量/ 的/ Spark/ 集群/ 系统/ 上/ 实验/ 的/ 召回/ 率/ 相差/ 不大/ ./ 在/ 保证/ 召回/ 率/ 变化/ 不大/ 的/ 情况/ 下/ ,/ 从表/ 7/ 中/ 我们/ 可以/ 看出/ 在/ 训练/ 、/ 编码/ 和/ 查询/ 3/ 个/ 阶段/ 的/ 时间/ 消耗/ 上/ ,/ 随着/ 节点/ 数量/ 的/ 增多/ ,/ 训练/ 时间/ 迅速/ 下降/ 并/ 逐渐/ 趋缓/ ,/ 并/ 没有/ 保持/ 理想/ 的/ 线性/ 下降/ 趋势/ ,/ 这是/ 由于/ 节点/ 增多/ 时/ ,/ Spark/ 集群/ 的/ 额外/ 计算/ 开销/ 增多/ ,/ 包括/ 网络通信/ 时间/ 等/ ./ 整体而言/ ,/ 时间/ 消耗/ 随着/ 节点/ 增加/ 而/ 下降/ 说明/ 该/ 系统/ 的/ 可扩展性/ 良好/ ./ 此外/ ,/ 我们/ 还/ 在/ SIFT1M/ 数据/ 集上/ 进行/ 训练/ 集/ 0.6040/ ./ 6020.6000/ ./ 593/ 大小/ 与/ 训练/ 时间/ 关系/ 的/ 实验/ ./ 通过/ 改变/ 不同/ 训练/ 数据/ 集/ 的/ 大小/ ,/ 从而/ 对比/ 实验/ 的/ 召回/ 率/ 和/ 时间/ 消耗/ 情况/ ,/ 用以/ 验证/ 算法/ 可扩展性/ ./ 在/ 实验/ 参数设置/ 方面/ ,/ 我们/ 采用/ 与/ 上/ 一/ 实验/ 中/ 的/ 4/ 节点/ Spark/ 集群/ 实验/ 相同/ 的/ 配置/ ./ 同样/ 我们/ 采用/ 召回/ 率/ 作为/ 查询/ 结果/ 好坏/ 的/ 衡量标准/ ./ 不同之处/ ,/ 我们/ 分别/ 取/ 训练/ 集/ 大小/ 为/ 0.1/ M/ 、/ 0.2/ M/ 、/ 0.5/ M/ 、/ 1M/ 进行/ 实验/ ,/ 观察/ 实验/ 召回/ 率/ 和/ 时间/ 消耗/ 的/ 变化/ ./ 从表/ 8/ 来看/ ,/ 改变/ 实验/ 中/ 的/ 训练/ 集合/ 大小/ ,/ 随着/ 训练/ 集/ 增大/ ,/ 召回/ 率/ 呈现出/ 增长/ 的/ 趋势/ ,/ 但是/ 并/ 不/ 明显/ ./ 从表/ 9/ 中/ 我们/ 可以/ 看出/ 在/ 随着/ 训练/ 集/ 的/ 增大/ ,/ 训练/ 时间/ 迅速/ 地/ 增大/ ,/ 随后/ 逐渐/ 趋于/ 缓慢/ 增长/ ./ 编码/ 时间/ 和/ 单次/ 查询/ 之所以/ 时间/ 变化/ 不/ 大/ ,/ 是因为/ 并/ 不受/ 训练/ 数据/ 集/ 大小/ 变化/ 的/ 影响/ ./ 因此/ ,/ 实验/ 表明/ 系统/ 的/ 可扩展性/ 较/ 好/ ./ Page12/ 训练/ 集/ 大小/ // M/ 召回/ 率/ (/ R/ =/ 1/ )/ 召回/ 率/ (/ R/ =/ 2/ )/ 召回/ 率/ (/ R/ =/ 5/ )/ 召回/ 率/ (/ R/ =/ 10/ )/ 召回/ 率/ (/ R/ =/ 20/ )/ 召回/ 率/ (/ R/ =/ 50/ )/ 召回/ 率/ (/ R/ =/ 100/ )/ 表/ 8Spark/ 集群/ 系统/ 上/ 不同/ 训练/ 集/ 大小/ 实验/ 召回/ 率/ 0.10/ ./ 20.51/ ./ 0/ 表/ 9Spark/ 集群/ 系统/ 上/ 不同/ 训练/ 集/ 大小/ 实验/ 时间/ 训练/ 集/ // M/ 训练/ 时间/ // s/ 编码/ 时间/ // s/ 单次/ 查询/ // s0/ ./ 10.21235/ ./ 75.221/ ./ 480.52601/ ./ 55.181/ ./ 471.05616/ ./ 34.931/ ./ 475.4/ ./ 2GIST1M/ 数据/ 集/ 实验/ 结果/ 对/ GIST1M/ 数据/ 集/ 的/ 实验/ 都/ 在/ Spark/ 集群/ 系统/ 上/ 完成/ ,/ Spark/ 集群/ 系统/ 的/ 配置/ 与/ SIFT1M/ 的/ 实验/ 相同/ ,/ 在/ yarn/ -/ client/ 模式/ 运行/ 程序/ ,/ executor/ 的/ 数量/ 为/ 32/ ./ 在/ 本次/ 实验/ 中/ ,/ 我们/ 分别/ 采用/ 32bit/ 、/ 64bit/ 、/ 96bit/ 、/ 128bit/ 、/ 256bit/ 这些/ 不同/ 编码/ 长度/ 进行/ 实验/ ,/ 观察/ 实验/ 中/ 压缩/ 编码/ 长度/ 对/ 召回/ 率/ 的/ 影响/ ,/ 如图/ 12/ 所示/ ./ 在/ 同等/ 检出/ 数量/ 下/ ,/ 编码/ 长度/ 越长/ ,/ 召回/ 率越/ 高/ ./ 图/ 12GIST1M/ 上/ 不同/ 编码/ 长度/ 下/ 的/ 召回/ 率图/ 13/ 中是/ 记录/ 了/ 在/ GIST1M/ 上/ 不同/ 编码/ 长度/ 的/ 算法/ 运行/ 时间/ ./ 从图/ 13/ 可以/ 看出/ ,/ 随着/ 编码/ 长度/ 的/ 增大/ ,/ 算法/ 的/ 训练/ 时间/ 、/ 编码/ 时间/ 、/ 单次/ 查询/ 时间/ 都/ 是/ 在/ 不断/ 增长/ 的/ ,/ 但是/ 增长/ 的/ 幅度/ 较/ 小/ ./ 时间/ 不断/ 增长/ 是因为/ 编码/ 长度/ mlogh/ 增大/ ,/ 子/ 空间/ m/ 数量/ 就/ 会/ 增大/ ,/ 从而/ 需要/ 在/ 更/ 多子/ 空间/ 中/ 训练/ 码本/ 、/ 压缩/ 编码/ 和/ 检索/ 近邻/ ,/ 增加/ 了/ 计算/ 时间/ ./ 5.4/ ./ 3CIFAR/ -/ 10/ 数据/ 集/ 实验/ 结果/ 与/ 上/ 一个/ 实验/ 配置/ 相同/ ,/ 我们/ 在/ CIFAR/ -/ 10/ 数据/ 集上/ 的/ 分别/ 对/ 不同/ 长度/ 的/ 编码/ 进行/ 比较/ ,/ 采用/ 准图/ 13GIST1M/ 上/ 不同/ 编码/ 长度/ 的/ 算法/ 运行/ 时间/ 确率/ (/ Precision/ )/ 来/ 衡量/ 检出/ 效果/ ./ 在/ 图/ 14/ 中/ ,/ R/ 是/ 检出/ 数据/ 的/ 数量/ ,/ 我们/ 可以/ 看到/ 在/ 同样/ 的/ 压缩/ 编码/ 下/ ,/ 准确率/ 随着/ 检出/ 数量/ 增大/ 而/ 不断/ 降低/ ./ 在/ 相同/ 的/ 检出/ 数量/ 条件/ 下/ ,/ 编码/ 长度/ 越长/ ,/ 检出/ 的/ 准确率/ 越高/ ./ 图/ 14CIFAR/ -/ 10/ 上/ 不同/ 编码/ 长度/ 下/ 的/ 查准率/ 图/ 15/ 是/ 不同/ 编码/ 长度/ 下/ 的/ 算法/ 运行/ 时间/ 变化/ 情况/ ,/ 从图/ 15/ 中/ 可以/ 得出/ 与/ 图/ 13/ 中/ 实验/ 相似/ 的/ 结论/ ,/ 编码/ 长度/ 分别/ 为/ 32bit/ 、/ 64bit/ 、/ 96bit/ 、/ 128bit/ 、/ 256bit/ ,/ 算法/ 的/ 训练/ 时间/ 、/ 编码/ 时间/ 、/ 单次/ 查询/ 时间/ 都/ 是/ 在/ 不断/ 增长/ 的/ ,/ 运行/ 时间/ 增长/ 的/ 速度/ 与/ 编码/ 长度/ 的/ 增长幅度/ 有关/ ./ 图/ 16/ 中是/ 在/ 压缩/ 编码/ 长度/ 分别/ 为/ 32bit/ 、/ 64bit/ 、/ Page13/ 图/ 15CIFAR/ -/ 10/ 上/ 不同/ 编码/ 长度/ 的/ 算法/ 运行/ 时间/ 96bit/ 、/ 128bit/ 、/ 256bit/ 情况/ 下/ ,/ 训练/ 时间/ 随/ executor/ 数量/ 的/ 变化/ ./ 从图/ 16/ 中/ 可以/ 看出/ ,/ 大体上/ executor/ 的/ 数量/ 越/ 多/ ,/ 训练/ 时间/ 就/ 越短/ ,/ 但是/ 也/ 并非/ executor/ 数量/ 越多越好/ ,/ 与/ Spark/ 集群/ 系统/ 的/ 总/ 处理器/ 核数/ 有关/ ./ 当/ executor/ 数量/ 超过/ 集群/ 的/ 总核/ 数时/ ,/ 训练/ 时间/ 反而/ 会/ 增加/ ./ 实验/ 中/ 集群/ 的/ 总/ 核数/ 为/ 32/ ,/ 因此/ 当/ executor/ 数量/ 为/ 48/ 时/ ,/ 训练/ 时间/ 略大于/ executor/ 数量/ 为/ 32/ 的/ 情况/ ./ 图/ 16CIFAR/ -/ 10/ 上/ 训练/ 时间/ 随/ executor/ 数量/ 的/ 变化/ 5.4/ ./ 4SIFT100M/ 数据/ 集/ 实验/ 结果/ 使用/ SIFT100M/ 数据/ 集/ 进行/ 实验/ 主要/ 是/ 为了/ 在/ 一个/ 更/ 大规模/ 数据/ 集上/ 验证/ 算法/ 的/ 可扩展性/ ./ 由于/ 输入/ 数据/ 规模/ 变/ 大/ ,/ 因此/ Spark/ 集群/ 相关/ 参数/ 需要/ 有所/ 调整/ ./ 集群/ 节点/ 数/ 仍/ 为/ 4/ ,/ executor/ 的/ 数目/ 为/ 15/ ,/ 每个/ executor/ 分配内存/ 大小/ 为/ 12GB/ ,/ 其它/ 参数/ 不变/ ./ 在/ 此/ 我们/ 比较/ 了/ 不同/ 编码/ 长度/ 下/ 召回/ 率/ 的/ 变化/ 以及/ 计算/ 时间/ 的/ 变化/ ./ 图/ 17/ 是/ SIFT100M/ 上/ 不同/ 编码/ 长度/ 下/ 召回/ 率/ 的/ 变化/ 图/ ./ 由于/ 数据/ 集/ 较大/ ,/ 当/ 编码/ 长度/ 为/ 16/ 时/ ,/ 召回/ 率/ 几乎/ 接近/ 于/ 0/ ,/ 随着/ 编码/ 长度/ 增大/ ,/ 召回/ 率/ 也/ 不断/ 提高/ ./ 图/ 18/ 是/ 不同/ 编码/ 长度/ 的/ 算法/ 计算/ 时间/ 变化/ 图/ ,/ 随着/ 编码/ 长度/ 增大/ ,/ 计算/ 时间/ 呈现出/ 缓慢/ 增长/ ./ 以上/ 观察/ 与/ 小/ 数据/ 集时/ 的/ 情况/ 相似/ ,/ 从而/ 证明/ 了/ 在/ 较/ 大规模/ 的/ 数据/ 集上/ ,/ 我们/ 的/ 方法/ 依然/ 具有/ 良好/ 的/ 可扩展性/ ./ 图/ 17SIFT100M/ 上/ 不同/ 编码/ 长度/ 下/ 的/ 召回/ 率图/ 18SIFT100M/ 上/ 不同/ 编码/ 长度/ 的/ 算法/ 运行/ 时间/ 6/ 结束语/ 本文/ 针对/ 大规模/ 高维/ 数据/ 的/ 近似/ 近邻/ 查询/ 问题/ ,/ 通过/ 对/ 乘积/ 量化/ 的/ 哈希/ 方法/ 的/ 深入研究/ ,/ 我们/ 在/ Spark/ 平台/ 上/ 实现/ 了/ 一套/ 基于/ 乘积/ 量化/ 分布式/ 哈希/ 方法/ 的/ 近似/ 近邻/ 查询/ 系统/ ./ 该/ 系统/ 一方面/ 对/ 数据/ 进行/ 了/ 编码/ 压缩/ ,/ 从而/ 可以/ 大幅度降低/ 空间/ 占用/ ;/ 另一方面/ 在/ 保证/ 查询/ 准确率/ 的/ 同时/ ,/ 通过/ Spark/ 集群/ 系统/ 并行计算/ 的/ 方式/ 可以/ 大大提高/ 查询/ 的/ 效率/ ./ Page14/ 本文/ 已经/ 实现/ 了/ 一套/ 基于/ Spark/ 的/ 近似/ 近邻/ 查询/ 系统/ ,/ 采用/ 乘积/ 量化/ 的/ 方法/ 进行/ 分布式/ 哈希/ 编码/ ,/ 但/ 并/ 没有/ 在/ Spark/ 上/ 实现/ 一套/ 高效/ 的/ 索引/ 方法/ ./ 在/ 接下来/ 的/ 研究/ 中/ ,/ 我们/ 准备/ 实现/ 一套/ 高效/ 索引/ 方法/ [/ 17/ ]/ 以/ 提高/ 查询/ 的/ 性能/ ./ 致谢/ 感谢/ 清华大学/ 信息科学/ 与/ 技术/ 国家/ 实验室/ 大/ 数据/ 科学/ 与/ 技术/ 专项/ 、/ 国家自然科学基金/ 项目/ 、/ 中国/ 博士后/ 基金/ 特别/ 资助/ 项目/ 的/ 支持/ ./ 感谢/ 《/ 计算机/ 学报/ 》/ 编辑部/ 和/ 审稿/ 专家/ 的/ 宝贵意见/ !/ 

