Page1UWSN/ 中/ 基于/ 随机/ 游走/ 模型/ 的/ 可靠/ 路由/ 算法/ 研究/ 1/ )/ (/ 东北大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110819/ )/ 2/ )/ (/ 沈阳/ 理工大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110159/ )/ 摘要/ UWSN/ (/ UnderwaterWirelessSensorNetworks/ )/ 相较/ 于/ 传统/ 的/ 无线/ 传感器/ 网络/ 采用/ 了/ 声/ 信号/ 进行/ 数据传输/ ,/ 由于/ 高/ 传输/ 延迟/ 的/ 引入/ ,/ 冲突/ 类/ 数据/ 丢失/ 现象/ 凸显/ ,/ 网络/ 可靠/ 通信/ 面临/ 全新/ 的/ 挑战/ ./ 为了/ 在/ 这样/ 的/ 环境/ 中/ 实现/ 低消耗/ 、/ 高/ 可靠/ 网络通信/ 这一/ 目的/ ,/ 文中/ 设计/ 了/ 一种/ 最小化/ 冲突/ 概率/ 路由/ 算法/ MCR/ (/ MinimumConflictprobabilityRouting/ )/ ./ 该/ 算法/ 融合/ 了/ 网络/ 节点/ 的/ 度值/ 和/ 节点/ 工作/ 负载/ ,/ 形成/ 了/ 一种/ 全新/ 的/ 路由/ 策略/ DBM/ (/ DegreeandBuffbasedMetric/ )/ ./ 在/ 该/ 路由/ 策略/ 基础/ 上/ ,/ 采用/ 图论/ 中/ 的/ 随机/ 游走/ 模型/ 对源/ 节点/ 与/ sink/ 节点/ 之间/ 的/ 路径/ 进行/ 选择/ ./ MCR/ 算法/ 的/ 核心思想/ 是/ 选择/ 两点/ 之间/ 冲突/ 概率/ 最低/ 的/ 路径/ 完成/ 数据传输/ ,/ 虽然/ 该/ 算法/ 不能/ 从/ Mac/ 层/ 解决/ 冲突/ 类/ 丢/ 包/ 问题/ ,/ 但是/ 从/ 基于/ NS/ -/ 2/ 的/ 仿真/ 实验/ 结果/ 来看/ ,/ 在/ UWSN/ 环境/ 下/ ,/ MCR/ 算法/ 相较/ 于/ 传统/ 路由/ 算法/ 有效/ 地/ 减少/ 了/ 路径/ 中/ 的/ 冲突/ 类/ 丢/ 包/ 概率/ ,/ 提升/ 了/ 端/ 到/ 端/ 链路/ 可靠性/ 、/ 具有/ 较/ 高较/ 稳定/ 的/ 网络/ 吞吐量/ ./ 关键词/ 水下/ 无线/ 传感器/ 网络/ ;/ 数据/ 冲突/ ;/ 路由/ 策略/ ;/ 路由/ 算法/ ;/ 物/ 联网/ 1/ 引言/ 地球/ 71/ %/ 的/ 表面/ 被/ 海洋所/ 覆盖/ ,/ 这些/ 未/ 被/ 探索/ 的/ 区域/ 内/ 蕴含着/ 丰富/ 的/ 资源/ 和/ 未知/ 的/ 可能性/ ,/ 与/ 陆地/ 的/ 探索/ 进度/ 相比/ ,/ 对于/ 海洋环境/ 的/ 了解/ ,/ 人类/ 仍停留/ 在/ 一个/ 初级阶段/ ./ 随着/ 沉船/ 探索/ 等/ 一系列/ 水下/ 探索/ 行为/ 的/ 开展/ ,/ 人们/ 对/ 海洋/ 等/ 深水/ 环境/ 的/ 关注/ 程度/ 也/ 与日俱增/ ./ 但是/ 深水/ 环境/ 中/ 充满/ 着/ 不确定性/ 和/ 危险/ ,/ 很多/ 区域/ 是/ 人类/ 无法/ 涉足/ 的/ ,/ 例如/ 马里亚纳/ 海沟/ 最深/ 的/ 地方/ 有/ 10000/ 多米/ ,/ 一些/ 特制/ 的/ 探测仪/ 都/ 会/ 被/ 高/ 水压/ 破坏/ ,/ 并且/ 单个/ 探测仪器/ 探测/ 区域/ 受限/ 、/ 探测/ 成本/ 很/ 高/ ./ 在/ 这样/ 的/ 一个/ 形势/ 下/ ,/ 人们/ 开始/ 考虑/ 将/ 无线/ 传感器/ 网络应用/ 在/ 该/ 深水/ 环境/ 下/ ,/ 形成/ 一种/ 水下/ 无线/ 传感器/ 网络/ UWSN/ (/ UnderwaterWirelessSensorNetworks/ )/ [/ 1/ -/ 5/ ]/ ./ 水下/ 环境/ 与/ 陆地/ 环境/ 之间/ 存在/ 很大/ 的/ 差别/ ,/ 例如/ 电磁波/ 无法/ 传输/ 、/ 节点/ 易受/ 水流/ 影响/ 而/ 发生/ 位移/ 等/ ,/ 这些/ 物理/ 特性/ 使得/ 传统/ 无线/ 传感器/ 网络/ 无法/ 直接/ 应用/ 于/ 水下/ 环境/ ./ 在/ 传输/ 媒介/ 上/ UWSN/ 采用/ 声频/ 信号/ 取代/ 原来/ 的/ 电磁波/ ,/ 使得/ 节点/ 之间/ 能够/ 通过/ 无线/ 的/ 方式/ 进行/ 远距离/ 通信/ ,/ 解决/ 了/ 电磁波/ 的/ 局限性/ ,/ 但是/ 传输/ 媒介/ 的/ 改变/ 导致/ 了/ 水下/ 无线/ 传感器/ 网络/ 很多/ 关键技术/ 需要/ 重新/ 设计/ ./ 声音/ 传播/ 的/ 速度/ 与/ 电磁波/ 相比/ 少/ 了/ 5/ 个/ 数量级/ ,/ 两/ 节点/ 之间/ 的/ 信号/ 传输/ 延迟/ 上升/ 到/ 了/ 秒/ 级/ ,/ 这/ 不但/ 使得/ 传统/ 的/ 一些/ 路由/ 算法/ 变得/ 低效/ ,/ 也/ 使得/ 传统/ 无线网络/ 中/ 类似/ 隐藏/ 终端/ 的/ 冲突/ 丢包/ 问题/ 变得/ 凸显/ [/ 6/ ]/ ./ 水下/ 无线/ 传感器/ 面临/ 的/ 这些/ 问题/ 对/ 研究者/ 而言/ 是/ 一个/ 全新/ 的/ 挑战/ ,/ 本文/ 的/ 主要/ 工作/ 是/ 针对/ UWSN/ 中/ 冲突/ 类/ 丢/ 包/ 现象/ 提出/ 一种/ 高效/ 、/ 高/ 可靠/ 的/ 路由/ 算法/ ,/ 提高/ UWSN/ 的/ 网络/ 传输/ 性能/ ./ 传统/ WSN/ (/ WirelessSensorNetworks/ )/ 中/ ,/ 路由/ 算法/ 往往/ 会先/ 建立/ 好源/ 节点/ 到/ 目的/ 节点/ 的/ 路径/ ,/ 当源/ 节点/ 有/ 数据/ 需要/ 发送/ 时/ ,/ 它/ 仅仅/ 按照/ 路径/ 的/ 设定/ 将/ 数据包/ 发送给/ 下/ 一/ 跳/ 节点/ ,/ 下/ 一/ 跳/ 节点/ 也/ 会/ 按照/ 路径/ 继续/ 将/ 数据/ 向/ 后/ 传输/ ,/ 通过/ 这种/ 方式/ ,/ 数据包/ 最终/ 会/ 被/ 传送/ 至/ 目的/ 节点/ ./ 这种/ 路由/ 协议/ 的/ 主要/ 任务/ 是/ 建立/ 路由/ ,/ 一旦/ 路由/ 建立/ 成功/ ,/ 则/ 每个/ 节点/ 按照/ 路由/ 的/ 标定/ 进行/ 传输/ 即可/ ,/ AODV/ 就是/ 一个/ 经典/ 算法/ ,/ 通过/ REQ/ 探测/ 包/ 建立/ 源/ 节点/ 与/ 目的/ 节点/ 间/ 跳数/ 最少/ 的/ 路径/ ,/ 这种/ 路由/ 协议/ 中/ 的/ 路径/ 建立/ 需要/ 正向/ 路径/ 和/ 反向/ 路径/ 的/ 闭环/ 通信/ 成功/ 才能/ 完成/ ,/ 在/ UWSN/ 中/ ,/ 丢包/ 现象/ 严重/ ,/ 闭环/ 通信/ 成功/ 的/ 几率/ 很/ 低/ ,/ 成功/ 建立/ 一次/ 路由/ 需要/ 大量/ 探测/ 包/ 和/ 时延/ ./ 此外/ ,/ 即使/ 成功/ 建立/ 了/ 一条/ 路由/ ,/ 该/ 路由/ 的/ 性能/ 和/ 寿命/ 都/ 不/ 确定/ ./ 在/ UWSN/ 中/ 直接/ 应用/ 传统/ 的/ 路由/ 算法/ 将会/ 导致/ 低效/ 的/ 性能/ ,/ 这/ 在/ 后/ 文中/ 的/ 实验/ 中将/ 会/ 进一步/ 描述/ ./ UWSN/ 环境恶劣/ ,/ 需要/ 快捷/ 有效/ 的/ 方法/ 才能/ 获得/ 较/ 高/ 的/ 路由/ 性能/ ./ 常用/ 的/ 算法/ 往往/ 是/ 基于/ 位置/ 信息/ 的/ 定向/ 扩散/ ,/ 当源/ 节点/ 有/ 数据/ 要/ 发送/ 时/ ,/ 中继/ 节点/ 即时/ 地/ 通过/ 路由/ 计算方法/ 计算/ 出/ 最优/ 的/ 下/ 一/ 跳/ ,/ 并/ 将/ 数据/ 发送给/ 这个/ 下/ 一/ 跳/ ./ 对于/ 这样/ 的/ 协议/ ,/ 不/ 需要/ 花费/ 大量/ 的/ 能量/ 、/ 时间/ 去/ 建立/ 或者/ 维护/ 路由/ 信息/ ./ 这类/ 协议/ 中/ 的/ 最/ 关键问题/ 是/ 如何/ 设计/ 算法/ 实时/ 地/ 找到/ 最优/ 的/ 下/ 一/ 跳/ ./ 一些/ 路由/ 协议/ 采用/ 广播/ 技术/ 和/ 地理位置/ 信息/ 来/ 计算/ 下/ 一/ 跳/ ,/ 这样/ 的/ 路由/ 协议/ 比较/ 适用/ 于/ 移动性/ 较强/ 的/ 网络/ 中/ ,/ 但是/ 在/ 路径/ 的/ QoS/ 服务/ 性能/ 方面/ 欠缺/ 考虑/ ,/ 并且/ 对于/ 大规模/ 网络/ 往往/ 是/ 通过/ 局部/ 算法/ 进行/ 计算/ ,/ 最终/ 可能/ 导致/ 数据/ 无法/ 到达/ 目的/ 节点/ ,/ 降低/ 了/ 其/ 实用性/ [/ 7/ ]/ ./ 针对/ 上述/ 问题/ ,/ 本文/ 提出/ 了/ 一种/ MCR/ 路由/ 算法/ ./ UWSN/ 中/ 丢/ 包/ 原因/ 主要/ 有/ 硬件/ 类/ 、/ 冲突/ 类/ 和/ 信号/ 衰减/ 类/ ./ 硬件/ 类/ 丢/ 包是/ 指/ 由于/ 设备/ 故障/ 造成/ 数据包/ 丢失/ ,/ 冲突/ 类/ 丢/ 包是/ 指/ 信号/ 由于/ 互相/ 干扰/ 造成/ 数据/ 丢失/ ,/ 信号/ 衰减/ 类/ 丢/ 包是/ 指/ 节点/ 由于/ 移动/ 或/ 障碍物/ 阻隔/ 等/ 原因/ 造成/ 信号强度/ 较弱/ 产生/ 丢包/ [/ 8/ ]/ ./ 本文/ 主要/ 针对/ UWSN/ 中/ 冲突/ 类/ 丢/ 包/ 进行/ 了/ 研究/ ,/ 基于/ 网络拓扑/ 结构/ 和/ 网络/ 节点/ 工作/ 状态/ 设计/ 了/ 一种/ 路由/ 策略/ DBM/ (/ DegreeandBuffbasedMetric/ )/ ,/ 在/ 此基础/ 上/ ,/ 采用/ 随机/ 游走/ 思想/ 完成/ UWSN/ 中源/ 节点/ 与/ 目的/ 节点/ 之间/ 的/ 路由/ 建立/ ,/ 降低/ 数据/ 冲突/ 概率/ ,/ 提升/ 网络/ 性能/ ./ 2/ 相关/ 工作/ 在/ 近几年/ 内/ ,/ 一些/ 针对/ UWSN/ 的/ 路由/ 算法/ 产生/ 了/ ,/ 大部分/ 协议/ 主要/ 是/ 基于/ 位置/ 信息/ 的/ [/ 9/ -/ 12/ ]/ ./ 文献/ [/ 10/ ]/ 提出/ 了/ 一种/ H2/ -/ DAB/ ,/ 该/ 协议/ 将/ UWSN/ 从/ 水下/ 至/ 水面/ 分成/ 若干个/ 层/ ,/ 每/ 一层/ 都/ 会/ 有/ 一个/ sink/ 节点/ ,/ 然后/ 通过/ 两个/ 阶段/ 的/ 工作/ 来/ 完成/ 数据/ 的/ 路由/ ./ 第/ 1/ 阶段/ ,/ sink/ 节点/ 通过/ 发送/ Hello/ 包为/ 每个/ 悬浮/ 节点/ 分配/ 一个/ 动态/ 的/ ID/ ,/ 每个/ 节点/ 收到/ Hello/ 包后/ 会/ 更新/ 信息/ 并且/ 继续/ 进行/ 广播/ ./ 因此/ ,/ 最终/ 每个/ 节点/ 都/ 会/ 获得/ 一个/ ID/ ,/ ID/ 的/ 数值/ 和/ 层/ 是/ 相关/ 的/ ,/ 越是/ 深处/ 的/ 节点/ 对应/ 的/ ID/ 的/ 数值/ 越大/ ./ 第/ 2/ 阶段/ ,/ 数据包/ 通过/ 这些/ ID/ 进行/ 传输/ ,/ 数据包/ 总是/ 被/ 发送到/ 较/ 小/ 的/ ID/ 节点/ ,/ 最终/ 数据包/ 就/ 像/ 物体/ 浮出/ 水面/ 一样/ 会/ 被/ 传送/ 到/ 水面/ ./ 通过/ 这种/ 协议/ 能够/ 简单/ 地/ 进行/ 数据/ 采集/ ,/ Page3/ 但是/ 该/ 协议/ 对/ 水下/ 网络拓扑/ 布局/ 有着/ 非常/ 严格/ 的/ 分层/ 要求/ ,/ 并且/ 分配/ ID/ 也/ 会/ 花费/ 较/ 多/ 的/ 时间/ 和/ 带宽/ 消耗/ ./ 此外/ ,/ 节点/ 的/ 频繁/ 漂移/ 使得/ ID/ 的/ 更新/ 要/ 非常/ 及时/ 才能/ 确保/ 可靠/ 通信/ ./ 为了/ 提升/ 该/ 协议/ 的/ 可靠性/ ,/ 文献/ [/ 11/ ]/ 基于/ H2/ -/ DAB/ 提出/ 了/ 一种/ 2H/ -/ ACK/ 模型/ ./ VBF/ [/ 12/ ]/ 是/ 一种/ 经典/ 的/ 基于/ 泛洪/ 和/ 位置/ 信息/ 的/ 路由/ 算法/ ,/ 每个/ 节点/ 都/ 知道/ 自身/ 的/ 位置/ 坐标/ ,/ 一次/ 数据/ 发送/ 过程/ 内/ ,/ 在/ 源/ 节点/ 的/ 邻居/ 节点/ 中/ ,/ 距离/ 目的/ 节点/ 距离/ 向量/ 最短/ 的/ 节点/ 将会/ 被选为/ 源/ 节点/ 的/ 下/ 一/ 跳/ ./ 在/ VBF/ 算法/ 中/ ,/ 数据包/ 可能/ 无法/ 传输/ 到/ 水面/ 上/ 的/ sink/ 节点/ ,/ 这/ 是因为/ 当/ 网络/ 较为/ 稀疏/ 时/ ,/ 可能/ 会/ 出现/ 一种/ 情况/ :/ 计算/ 出/ 的/ 源/ 节点/ 下/ 一/ 跳/ 节点/ ,/ 无法/ 继续/ 与/ 后续/ 节点/ 通信/ ./ 为了/ 提升/ VBF/ 的/ 可靠性/ ,/ 文献/ [/ 9/ ]/ 提出/ 了/ 一种/ HH/ -/ VBF/ 协议/ ,/ 该/ 协议/ 为/ 每/ 一个/ 节点/ 都/ 使用/ 了/ 距离/ 向量/ ,/ 和/ 之前/ 的/ 静态/ 源/ 节点/ 至/ 目的/ 节点/ 距离/ 向量/ 相比/ ,/ 具有/ 更/ 高/ 的/ 动态性/ 和/ 可靠性/ ,/ 但是/ HH/ -/ VBF/ 仍/ 属于/ 局部/ 最优/ 求解/ 方式/ ,/ 并/ 不能/ 完全/ 解决/ VBF/ 存在/ 的/ 问题/ ./ 针对/ 上述/ 问题/ ,/ 本文/ 提出/ 了/ MCR/ (/ MinimumClashprobabilityRouting/ )/ 算法/ ./ 图/ 1/ 显示/ 了/ 一种/ 经典/ 路由/ 算法/ AODV/ 的/ 流程/ 示意图/ [/ 13/ ]/ ./ 图/ 1/ (/ a/ )/ 中/ 1/ 号/ 节点/ 是/ 源/ 节点/ ,/ 7/ 号/ 节点/ 是/ 目的/ 节点/ ,/ 1/ 号/ 节点/ 没有/ 1/ →/ 7/ 的/ 有效/ 路由/ ./ 当/ 1/ 号/ 节点/ 要/ 给/ 7/ 号/ 节点/ 发送数据/ 时/ ,/ 1/ 号/ 节点/ 会/ 首先/ 通过/ 泛洪/ 方式/ 广播/ REQ/ 探测/ 包/ ,/ 数据包/ 格式/ 如图/ 1/ (/ b/ )/ ,/ REQ/ 数据包/ 每次/ 被/ 转发/ 时/ 将/ 会/ 更新/ Path/ 与/ Hops/ 两个/ 字段/ ./ 例如/ 当/ 1/ 号/ 节点/ 发出/ 的/ REQ1/ 到达/ 4/ 号/ 节点/ 的/ 时候/ ,/ Path/ 字段/ 被/ 更新/ 为/ 1/ →/ 4/ ,/ Hops/ 字段/ 被/ 更新/ 为/ 1/ ,/ 这/ 两个/ 字/ 段/ 更新/ 完毕/ 后/ 就/ 会/ 产生/ 一个/ 新/ 的/ REQ4/ 数据包/ ,/ 4/ 号/ 节点/ 判断/ 自己/ 是否/ 为/ 该/ REQ/ 的/ 目的/ 节点/ ,/ 若/ 不是/ ,/ 则/ 4/ 号/ 节点/ 会/ 继续/ 广播/ 该/ 新/ 的/ REQ4/ ./ 当/ REQ4/ 到达/ 7/ 号/ 节点/ 时/ ,/ Path/ 字段/ 被/ 更新/ 为/ 1/ →/ 4/ →/ 7/ ,/ Hops/ 字段/ 被/ 更新/ 为/ 2/ ,/ 与此同时/ 7/ 号/ 节点/ 判断/ 出/ 自己/ 就是/ 目的/ 节点/ ,/ 则/ 7/ 号/ 节点/ 不再/ 广播/ REQ/ ,/ 而是/ 等待/ 一段时间/ T/ ,/ 然后/ 开始/ 整理/ 收集/ 到/ 的/ REQ/ 数据包/ ,/ 并/ 选择/ Hops/ 最小/ 的/ 路径/ 作为/ 最终/ 路径/ ,/ 若/ 存在/ 多条/ ,/ 则/ 随机/ 选择/ 一条/ ./ 例如/ 对于/ 图/ 1/ (/ a/ )/ ,/ 7/ 号/ 节点/ 最终/ 会/ 获取/ 代表/ 3/ 条/ 路径/ 的/ REQ/ :/ 1/ →/ 4/ →/ 7/ ,/ 1/ →/ 5/ →/ 6/ →/ 7/ 与/ 1/ →/ 2/ →/ 3/ →/ 6/ →/ 7/ ,/ 对应/ 的/ Hops/ 分别/ 为/ 2/ 、/ 3/ 、/ 4/ ,/ 7/ 号/ 节点/ 最终/ 会/ 选择/ 1/ →/ 4/ →/ 7/ 作为/ 最终/ 通信/ 路径/ ./ 为了/ 告知/ 1/ 号/ 节点/ 这/ 条/ 路径/ 的/ 成功/ 建立/ ,/ 7/ 号/ 节点/ 将会/ 按照/ REQ/ 的/ 逆向/ 路径/ 发送/ Feedback/ 数据包/ ,/ 与/ REQ/ 不同/ ,/ Feedback/ 数据包/ 不是/ 广播/ 而是/ 根据/ REQ/ 中/ 记录/ 的/ 路径/ 逆向/ 定点/ 传输/ ,/ 与/ REQ/ 类似/ ,/ Feedback/ 数据包/ 每/ 被/ 转发/ 一次/ 将会/ 更新/ Path/ 字段/ ,/ 这样/ 1/ 号/ 节点/ 收到/ 7/ 号/ 节点/ 的/ Feedback/ 数据包/ 后/ ,/ 就/ 可以/ 从/ Path/ 字段/ 中/ 提取/ 出/ 建立/ 的/ 路径/ 1/ →/ 4/ →/ 7/ ./ 类似/ AODV/ 传输/ 协议/ 在/ 传统/ 无线/ 传感器/ 网络/ 中/ 应用/ 较/ 多/ ,/ 其/ 优点/ 在于/ 建立/ 的/ 路径/ 可靠/ 有效/ ,/ 并且/ 可以/ 通过/ Hops/ 字段/ 选择/ 最短/ 路径/ ,/ 提高/ 通信/ 效率/ ,/ 节约/ 能量/ ./ 即使/ 网络/ 节点/ 发生变化/ ,/ 也/ 可以/ 通过/ 定期/ 发送/ REQ/ 更新/ 路由/ 信息/ 的/ 方式/ 解决/ 该/ 问题/ ./ 与/ 传统/ 的/ 无线/ 传感器/ 网络应用/ 环境/ 不同/ ,/ UWSN/ 的/ 通信/ 无法/ 通过/ 电磁波/ 进行/ 传递/ ,/ 因为/ 电磁波/ 在/ 水/ 介质/ 中/ 损耗/ 很大/ ./ 目前/ 在/ UWSN/ 通信/ 中/ 应用/ 较/ 多/ 的/ 通信/ 方式/ 是/ 声/ 通信/ ,/ 声/ 通信/ 具有/ 如下/ 两个/ 特点/ [/ 14/ ]/ :/ (/ 1/ )/ 声/ 传播/ 的/ 速度/ 与/ 电磁波/ 传播速度/ 差距/ 较大/ ./ (/ 2/ )/ 声/ 传播/ 的/ 带宽/ 较窄/ ,/ 通信/ 速率/ 较/ 低/ ./ UWSN/ 的/ 应用环境/ 较为/ 复杂/ ,/ 各类/ 丢包/ 现象/ 凸显/ ./ 若/ 在/ 这样/ 的/ 环境/ 中/ 应用/ 类似/ AODV/ 的/ 传输/ 协议/ ,/ 则/ 会/ 出现/ 不同/ 的/ 结果/ ./ 在/ 采用/ 声/ 通信/ 的/ UWSN/ 中/ ,/ 1/ 号/ 节点/ 通过/ 泛洪/ 方式/ 发送/ REQ/ 继而/ 等待/ 目的/ 节点/ 反馈/ 回来/ 的/ Feedback/ 对应/ 的/ 过程/ 将会/ 非常/ “/ 漫长/ ”/ ,/ 大幅度降低/ 了/ 网络/ 端到/ 端/ 吞吐量/ [/ 15/ ]/ ;/ 由于/ UWSNPage4/ 信号/ 传播/ 速率/ 的/ 降低/ ,/ 网络/ 同步/ 、/ CSMA/ // CA/ 等/ 机制/ 无法/ 体现/ 出以/ 电磁波/ 为/ 介质/ 时/ 的/ 性能/ ,/ 网络/ 冲图/ 2/ 隐藏/ 终端/ 问题/ 图/ 2/ 中/ ,/ 1/ 、/ 2/ 、/ 3/ 号/ 节点/ 为/ 4/ 号/ 节点/ 的/ 邻居/ 节点/ ,/ 且/ 1/ 、/ 2/ 、/ 3/ 号/ 节点/ 彼此/ 均/ 不/ 连通/ ,/ 此时/ 当/ 1/ 号/ 节点/ 给/ 4/ 号/ 节点/ 发送数据/ 时/ ,/ 2/ 、/ 3/ 号/ 节点/ 探测/ 到/ 信道/ 仍为/ 空闲/ ,/ 也/ 同时/ 向/ 4/ 号/ 节点/ 发送数据/ ,/ 从而/ 信号/ 在/ 4/ 号/ 节点/ 处/ 冲突/ ,/ 造成/ 数据/ 丢失/ ./ 目前/ 解决/ 隐藏/ 终端/ 的/ 方法/ 有/ 两种/ :/ 一种/ 是/ 接收/ 节点/ 在/ 接收/ 的/ 同时/ 发送/ 忙音/ 来/ 通知/ 邻居/ 节点/ ,/ 即/ BTMA/ (/ BusyToneMultipleAccess/ )/ 系列/ ;/ 另/ 一种/ 方法/ 是/ 发送/ 节点/ 在/ 数据/ 发送/ 前/ 与/ 接收/ 节点/ 进行/ 一次/ 短/ 控制/ 消息/ 握手/ 交换/ ,/ 以/ 短消息/ 的/ 方式/ 通知/ 邻居/ 节点/ 它/ 即将/ 进行/ 接收/ ,/ 即/ RTS/ // CTS/ 方式/ ./ 这种/ 方式/ 是/ 目前/ 解决/ 这个/ 问题/ 的/ 主要/ 趋势/ ,/ 如/ 已经/ 提出/ 来/ 的/ CSMA/ // CA/ 、/ MACA/ 、/ MACAW/ 等/ ./ 还有/ 将/ 两种/ 方法/ 结合/ 起来/ 使用/ 的/ 多址/ 协议/ ,/ 如/ DBTMA/ ./ 但是/ 上述/ 思路/ 在/ UWSN/ 中/ 却/ 并/ 不/ 适用/ ,/ 因为/ UWSN/ 中/ 信号/ 传输/ 时间/ 不可/ 忽略/ [/ 16/ ]/ ,/ 即使/ 4/ 号/ 节点/ 及时/ 发出/ 了/ 忙音/ ,/ 但是/ 2/ 、/ 3/ 号/ 节点/ 可能/ 在/ 忙音/ 到达/ 之前/ 发出/ 了/ 数据/ [/ 17/ -/ 18/ ]/ ./ 此外/ ,/ 在/ 高/ 传输/ 延迟/ 的/ UWSN/ 中/ 很/ 难/ 实现/ 时钟/ 同步/ ,/ 基于/ 时钟/ 同步/ 的/ 隐藏/ 终端/ 解决/ 方法/ 也/ 难以/ 取得/ 较/ 好/ 的/ 收益/ ./ 为此/ 本文/ 从/ 路由/ 协议/ 设计/ 角度/ ,/ 设计/ 了/ MCR/ 路由/ 算法/ ,/ 优化/ 端到/ 端的/ 路径/ 选择/ ,/ 降低/ 端到/ 端/ 路径/ 中/ 冲突/ 类/ 丢/ 包/ 发生/ 的/ 几率/ ,/ 提高/ 网络/ 性能/ ./ 3MCR/ 协议/ 的/ 提出/ 本/ 节/ 主要/ 分为/ 两/ 部分/ ,/ 3.1/ 节/ 主要/ 介绍/ 了/ DBM/ 路由/ 策略/ 及其/ 相关/ 结论/ ;/ 3.2/ 节在/ DBM/ 基础/ 之上/ 采突/ 可能性/ 急剧/ 增加/ ,/ 例如/ 隐藏/ 终端/ 冲突/ 现象/ 如图/ 2/ 所示/ ./ 用/ 随机/ 游走/ 算法/ 形成/ 了/ MCR/ 路由/ 协议/ ./ 3.1/ DBM/ 路由/ 策略/ 本文/ 主要/ 关注/ 的/ 是/ 数据/ 在/ 传输/ 中/ 冲突/ 类/ 数据包/ 丢失/ 问题/ ./ UWSN/ 和/ 其他/ 类型/ 的/ 无线通信/ 节点/ 一样/ ,/ 每个/ 节点均/ 具有/ 一个/ 接收/ 缓存/ RxBuff/ 和/ 发送/ 缓存/ TxBuff/ ./ 当/ 节点/ 接收/ 到/ 一个/ 数据包/ 后/ ,/ 该/ 数据包/ 首先/ 会/ 存入/ RxBuff/ 中/ ,/ 然后/ 按照/ 协议/ 格式/ 解析/ 该/ 数据包/ ,/ 获得/ 信息/ ;/ 当/ 节点/ 想/ 发送/ 一个/ 数据包/ 时/ ,/ 该/ 数据包/ 会/ 被/ 放置/ 在/ TxBuff/ 中/ ,/ 等待/ 硬件/ 控制/ 信号/ 来/ 进行/ 数据/ 发送/ ./ 为了/ 简化/ 描述/ 本文/ 将/ 这/ 两个/ 缓存/ 统一/ 标记/ 为/ B/ 号/ ,/ length/ 代表/ 缓存/ 的/ 大小/ ,/ 在/ 后/ 文中/ length/ 可以/ 取/ 两个/ 值/ :/ max/ 和/ actual/ ,/ 其中/ Bmax/ 存/ 的/ 最大值/ ,/ 该值/ 通常/ 是/ 预先/ 设定/ 的/ ,/ Bactual/ 节点/ 缓存/ 的/ 实际/ 利用/ 值/ ,/ 表示/ 节点/ 在/ 工作/ 中/ 被/ 占用/ 的/ 缓存/ 空间/ 长度/ ./ 对于/ 两点/ 之间/ 路径/ 上/ 的/ 信号/ 冲突/ 概率/ 计算/ 有/ 一种/ 方法/ 如下/ :/ 节点/ i/ 与/ j/ 之间/ 有/ m/ 个/ 中间/ 节点/ ,/ 当/ 节点/ i/ 向/ 节点/ j/ 发送数据/ 时/ ,/ 统计/ 这/ m/ 个/ 中间/ 节点/ 的/ 所有/ 邻居/ 节点/ 数量/ 之/ 和/ Mum/ ,/ 认为/ Mum/ 越大/ 的/ 路径/ 对应/ 的/ 冲突/ 概率/ 也/ 越/ 大/ ./ 但是/ 若/ 两条/ 路径/ 的/ Mum/ 值/ 相同/ (/ 例如/ 均/ 为/ 10/ )/ ,/ 其中/ 一条/ 路径/ 的/ 中间/ 节点/ 个数/ 为/ 3/ ,/ 中间/ 节点/ 对应/ 的/ 邻居/ 节点/ 数/ 依次/ 为/ 3/ 、/ 3/ 、/ 4/ ;/ 另/ 一条/ 路径/ 的/ 中间/ 节点/ 个数/ 为/ 2/ ,/ 中间/ 节点/ 对应/ 的/ 邻居/ 节点/ 数/ 依次/ 为/ 5/ 、/ 5/ ,/ 最终/ 的/ 两条/ 路径/ 的/ 冲突/ 概率/ 存在/ 着/ 很大/ 差别/ ,/ 因此/ 上述/ 方法/ 存在/ 局限性/ ./ 本文/ 将/ 端/ 到/ 端/ 之间/ 链路/ 的/ 冲突/ 概率/ 转变/ 为/ 路径/ Page5/ 上/ 两点/ 之间/ 冲突/ 概率/ 的/ 乘积/ ./ 假设/ 路径/ 中有/ n/ 个/ 中间/ 节点/ ,/ 每个/ 中间/ 节点/ i/ 的/ 度值/ 为/ di/ ,/ 节点/ i/ 成功/ 转发/ 数据/ 的/ 概率/ 为/ 1/ // di/ ,/ 端到/ 端的/ 成功/ 交付/ 概率/ 的/ 计算方法/ 如下/ :/ 式/ 中/ Sn/ 表示/ 由/ n/ 个/ 节点/ 形成/ 的/ 路径/ 内/ ,/ 在/ 冲突/ 干扰/ 情况/ 下/ 成功/ 进行/ 数据/ 交互/ 的/ 概率/ ./ 从式/ (/ 1/ )/ 可以/ 看出/ ,/ 当/ 转发/ 节点/ 的/ 度值/ 趋于/ 无穷大/ 时/ ,/ 成功/ 转发/ 的/ 概率/ 为/ 0/ ;/ 当/ 转发/ 节点/ 的/ 度值/ 为/ 1/ 时/ ,/ 成功/ 交互/ 概率/ 为/ 1/ ./ 式/ (/ 1/ )/ 属于/ 拓扑/ 层面/ 的/ 概率/ 估计/ ,/ 在/ 实际/ 应用/ 中式/ (/ 1/ )/ 存在/ 一个/ 问题/ ,/ 某个/ 节点/ 的/ 度值/ 较大/ ,/ 但是/ 该/ 节点/ 的/ 邻居/ 节点/ 并/ 没有/ 数据/ 要/ 发送/ ,/ 即/ 每个/ 邻居/ 节点均/ 不/ 抢占/ 信道/ ,/ 也/ 就/ 不会/ 与/ 该/ 节点/ 发生冲突/ ,/ 此时/ 若/ 以式/ (/ 1/ )/ 进行/ 计算/ ,/ 则/ 计算结果/ 和/ 实际/ 情况/ 将会/ 出现/ 较大/ 差别/ ./ 针对/ 上述/ 问题/ ,/ 本文/ 将/ 邻居/ 节点/ 的/ 工作/ 状态/ 引入/ 到/ 了/ 式/ (/ 1/ )/ 中/ ./ UWSN/ 中/ 难以实现/ 时钟/ 同步/ ,/ 基于/ 时隙/ 分配/ 的/ 节点/ 工作/ 机制/ 难以/ 执行/ ,/ 本文/ 研究/ 认为/ UWSN/ 中/ 的/ 节点均/ 采用/ 自由竞争/ 的/ 方式/ 抢占/ 信道/ ,/ 即当/ 某个/ 节点/ 发现/ 发送/ 缓存/ 中有/ 数据/ 需要/ 发送/ ,/ 则/ 通过/ 自由竞争/ 的/ 方式/ 进行/ 数据/ 发送/ ,/ 若/ 没有/ 数据/ 需要/ 发送/ ,/ 则/ 进入/ 节能/ 休眠状态/ ./ 缓存/ 占用率/ 能够/ 标示/ 节点/ 竞争/ 信道/ 的/ 频度/ ,/ 频度/ 影响/ 着/ 冲突/ 概率/ ,/ 因此/ 本文/ 引入/ 了/ 缓存/ 占用/ 比率/ 的/ 概率/ 进行/ 修正/ ./ 图/ 3/ 描述/ 了/ 一条/ 通信/ 路径/ 1/ →/ 2/ →/ 3/ ,/ 这/ 条/ 路径/ 存在/ 两个/ 转发/ 过程/ :/ 1/ →/ 2/ 与/ 2/ →/ 3/ ./ 为了/ 简化/ 分析/ ,/ 本文/ 做出/ 如下/ 两点/ 假设/ :/ (/ 1/ )/ 冲突/ 发生/ 在/ 转发/ 过程/ 中/ 的/ 接收端/ (/ 本文/ 主要/ 针对/ 隐藏/ 终端/ 类/ 冲突/ 问题/ )/ ,/ 例如/ 本文/ 称/ 转发/ 过程/ 1/ →/ 2/ 中/ 的/ 转发/ 节点/ 为/ 2/ 号/ 节点/ ,/ 该/ 转发/ 过程/ 的/ 成功率/ 称为/ 2/ 号/ 节点/ 转发/ 成功率/ ./ (/ 2/ )/ 1/ 号/ 节点/ 向/ 2/ 号/ 节点/ 转发/ 数据/ 后/ 将/ 不会/ 成为/ 2/ 号/ 节点/ 的/ 干扰源/ ,/ 2/ 号/ 节点/ 的/ 干扰源/ 是/ 指/ 除了/ 转发/ 过程/ 中源/ 节点/ 外/ 的/ 其他/ 邻居/ 节点/ (/ 因为/ 通常/ 1/ 号/ 节点/ 转发/ 数据/ 后/ 需要/ 收到/ 2/ 号/ 节点/ 的/ 应答/ 才/ 会/ 继续/ 发送数据/ ,/ 之间/ 有/ 良好/ 的/ 协调/ )/ ./ 依据/ 上述/ 两点/ 假设/ ,/ 可/ 认为/ 干扰源/ a/ 、/ b/ 并/ 不会/ 对/ 这条/ 路径/ 进行/ 干扰/ ,/ 在/ 转发/ 过程/ 1/ →/ 2/ 中/ ,/ 成功/ 概率/ 等于/ 1/ 减去/ 2/ 号/ 节点/ 干扰源/ 干扰/ 的/ 概率/ ,/ 并且/ 2/ 号/ 节点/ 的/ 干扰源/ 不/ 包括/ 转/ 发源/ 节点/ 1/ 号/ 节点/ ,/ 以此类推/ 可以/ 得出/ 节点/ i/ 的/ 转发/ 成功率/ Si/ 的/ 计算方法/ :/ 式/ (/ 2/ )/ 中/ di/ 是/ 节点/ i/ 的/ 度值/ ,/ 取值/ 范围/ 为/ 1/ 到/ 无穷大/ 之间/ 的/ 正整数/ ,/ l/ 表示/ 节点/ i/ 的/ 邻居/ 节点/ 逻辑/ 编号/ ./ 依据/ 假设/ 1/ 可知/ ,/ 节点/ i/ 是/ 指/ 一条/ 路径/ 中/ 除源/ 节点/ 外/ 的/ 其他/ 节点/ ,/ 例如/ 图/ 3/ 中/ 的/ 2/ 、/ 3/ 号/ 节点/ ./ 当/ di/ 为/ 1/ 时/ ,/ 即/ 两点/ 通信/ ,/ 依据/ 假设/ 2/ 可知/ 转发/ 成功率/ 为/ 1/ ./ 即使/ 转发/ 节点/ i/ 的/ 度值/ 为/ 无穷大/ ,/ 若/ 干扰/ 节点/ 中/ 缓存/ 占用/ 比率/ 均/ 为/ 0/ ,/ 则/ i/ 节点/ 转发/ 数据/ 成功率/ 仍为/ 1/ ,/ 缓存/ 占用率/ 与度值/ 共同/ 决定/ 了/ i/ 节点/ 转发/ 成功率/ ./ DBM/ 路由/ 策略/ 定义/ :/ 在/ 一条/ 路径/ l/ 中/ ,/ 有/ n/ 个/ 节点/ ,/ 则/ 该/ 路径/ 的/ DBM/ 值/ 计算方法/ 如下/ :/ 式/ (/ 3/ )/ 中/ ,/ 除源/ 节点/ 外/ 还有/ n/ -/ 1/ 个/ 转发/ 节点/ ./ 通过/ 式/ (/ 2/ )/ 、/ (/ 3/ )/ 可以/ 看出/ ,/ 当/ 两个/ 相邻/ 的/ 节点/ i/ 、/ j/ 进行/ i/ →/ j/ 数据/ 转发/ 的/ 时候/ ,/ 可以/ 总结/ 得出/ 如下/ 几点/ 结论/ :/ (/ 1/ )/ 当/ 节点/ j/ 的/ 邻居/ 节点/ 数目/ 趋于/ 无穷大/ 时/ ,/ 若/ 每个/ 邻居/ 节点/ 的/ 缓存/ 占用率/ 均/ 为/ 1/ ,/ 则/ 转发/ 过程/ i/ →/ j/ 成功/ 的/ 概率/ 也/ 将/ 趋于/ 0/ ./ (/ 2/ )/ 当/ 节点/ j/ 的/ 邻居/ 节点/ 数量/ 趋于/ 无穷大/ 时/ ,/ 但是/ 每个/ 邻居/ 节点/ 的/ 待发/ 数据量/ 均/ 为/ 0/ 时/ ,/ 此时/ 转发/ 过程/ i/ →/ j/ 的/ 成功/ 概率/ 为/ 1/ ./ (/ 3/ )/ 无论/ 节点/ j/ 的/ 邻居/ 节点/ 数量/ 多少/ ,/ 邻居/ 节点/ 中/ 的/ 待发/ 数据量/ 是/ 多少/ ,/ 转发/ 过程/ i/ →/ j/ 均/ 是/ 有/ 成功/ 概率/ 的/ ,/ 可以/ 趋于/ 0/ 但是/ 不会/ 等于/ 0/ ./ (/ 4/ )/ 当/ 节点/ j/ 有/ m/ 个/ 邻居/ 节点/ ,/ 且/ 每个/ 邻居/ 节点/ 的/ 缓存/ 均/ 为/ 满负荷/ 状态/ 时/ (/ 即程/ i/ →/ j/ 成功/ 的/ 概率/ 为/ 1/ // m/ ./ 由式/ (/ 2/ )/ 、/ (/ 3/ )/ 可知/ ,/ DBM/ 受/ 缓存/ 占用率/ 影响/ ,/ 而/ 缓存/ 占用率/ 会/ 随着/ 时间/ 的/ 推移/ 而/ 改变/ ,/ 因此/ 通过/ DBM/ 策略/ 选择/ 的/ 路由/ 可能/ 并/ 不是/ 当前/ 网络/ 最优/ 的/ 路由/ ./ 降低/ 该/ 可能性/ 的/ 方法/ 主要/ 有/ 如下/ 两种/ :/ (/ 1/ )/ 和/ AODV/ 协议/ 中/ 周期/ 发送/ REQ/ 探测/ 包/ 维护/ 路由/ 的/ 时效性/ 一样/ ,/ 本文/ 可以/ 周期/ 地/ 通过/ 单跳/ hello/ 包/ 更新/ 各个/ 节点/ 对应/ 邻居/ 节点/ 的/ 缓存/ 占用/ Page6/ 率/ ,/ 使得/ DBM/ 值/ 具有/ 较/ 高/ 的/ 时效性/ ,/ 从而/ 降低/ 上述/ 现象/ 发生/ 的/ 可能性/ ./ 相应/ 地/ ,/ 网络带宽/ 消耗/ 也/ 会/ 增加/ ,/ 因此/ 需要/ 结合/ 具体/ 网络/ 设定/ 恰当/ 的/ 更新/ 周期/ ./ (/ 2/ )/ 规范/ 网络/ 布局/ 和/ 节点/ 的/ 数据/ 采集/ 流程/ ./ UWSN/ 主要/ 功能/ 是/ 周期/ 采集/ 数据/ ,/ 若/ 能够/ 对/ 节点/ 布局/ 和/ 数据/ 采集/ 进行/ 规范化/ ,/ 则/ 在/ 任何时刻/ 网络/ 中/ 各个/ 节点/ 的/ 缓存/ 占用率/ 均/ 可以/ 通过/ 数学/ 推导/ 形成/ 占用率/ 与/ 时间/ 的/ 函数/ ,/ 从而/ 降低/ 上述/ 现象/ 发生/ 的/ 可能性/ ./ 但/ 相应/ 地/ 计算/ 复杂度/ 和/ 布设/ 成本/ 将会/ 随着/ 网络/ 规模/ 的/ 增加/ 而/ 增加/ ./ 3.2/ MCR/ 协议/ 上文/ 介绍/ 了/ DBM/ 路由/ 策略/ 的/ 概念/ 及其/ 计算方法/ ,/ 本/ 节/ 主要/ 介绍/ 如何/ 将/ 该/ 策略/ 应用/ 于/ 路由/ 算法/ 中/ ./ 图/ 4/ 描述/ 了/ UWSN/ 的/ 一种/ 网络/ 布局/ ,/ UWSN/ 网络/ 中/ 存在/ 一个/ sink/ 节点/ 和/ 若干/ 普通/ 节点/ ,/ sink/ 节点/ 通常/ 具有/ 较/ 高/ 的/ 性能/ ,/ 通常/ 被/ 放置/ 在/ 水面/ 上/ ,/ 主要/ 负责/ 收集/ UWSN/ 中/ 的/ 普通/ 节点/ 采集/ 到/ 的/ 数据/ 并/ 通过/ GPRS/ 等/ 服务/ 将/ 这些/ 数据/ 转发/ 至/ Internet/ ./ 普通/ 节点/ 打开/ 电源/ 后/ 开始/ 进行/ 数据/ 采集/ ,/ 采集/ 到/ 的/ 数据/ 会/ 存入/ 自身/ 缓存/ 中/ ,/ 等待/ 竞争/ 信道/ 向/ sink/ 节点/ 发送数据/ ./ 对于/ 网络/ 中/ 的/ 一个/ 普通/ 节点/ ,/ 当其/ 工作/ 时/ 并不知道/ 通过/ 哪条/ 路由/ 才/ 可以/ 将/ 数据/ 传送/ 到/ sink/ 节点/ ,/ 此时/ 需要/ 进行/ 路由/ 建立/ ./ UWSN/ 环境/ 中/ 冲突/ 干扰/ 频繁/ ,/ 图/ 5/ 邻居/ 信息/ 表/ ToNi/ 的/ 结构/ 示意图/ 为了/ 防止/ 广播/ 风暴/ 的/ 发生/ ,/ 可以/ 设置/ REQ/ 的/ 生命周期/ 为/ Lhops/ ,/ REQ/ 每/ 被/ 转发/ 一次/ L/ 就/ 会/ 减/ 1/ ,/ 当/ L/ 值为/ 0/ 时/ ,/ REQ/ 不再/ 被/ 发送/ ,/ 且/ 广播/ 中/ 通过/ ID/ 标志/ 解决/ 循环/ 广播/ 问题/ ,/ 即当/ REQ/ 被/ 节点/ i/ 发到/ 节点/ j/ ,/ 则/ 节点/ j/ 广播/ 后/ i/ 将/ 不会/ 接收/ ./ 例如/ 在/ 图/ 4/ 在/ 这样/ 的/ 不/ 稳定/ 环境/ 下/ ,/ 若想/ 获得/ 一条/ 性能/ 较/ 高/ 的/ 路由/ ,/ 通常/ 有/ 如下/ 两种/ 思路/ :/ (/ 1/ )/ 通过/ 周期/ 广播/ 足够/ 数量/ 的/ 探测/ 包对/ 路由/ 质量/ 进行/ 评估/ ./ (/ 2/ )/ 基于/ 网络/ 相关/ 参数/ 的/ 计算/ 进行/ 路由/ 质量/ 评估/ ./ UWSN/ 中/ 的/ 传感器/ 节点/ 对/ 数据/ 的/ 采集/ 通常/ 是/ 规律性/ 的/ 行为/ ,/ 即/ 缓存/ 中/ 数据/ 的/ 增长/ 速率/ 是/ 相对/ 稳定/ 的/ ;/ 尽管/ 网络/ 会/ 出现/ 变化/ ,/ 但/ 总体/ 来看/ 拓扑/ 结构/ 仍/ 是/ 相对/ 稳定/ 的/ ./ 因此/ ,/ 上文/ 的/ DBM/ 计算结果/ 也/ 会/ 相对/ 稳定/ ./ DBM/ 策略/ 带宽/ 消耗/ 主要/ 集中/ 在/ 基于/ 一跳/ hello/ 包/ 的/ 邻居/ 信息/ 采集/ 上/ ,/ 在/ 后续/ 的/ 路径/ 建立/ 过程/ 中源/ 节点/ 只/ 需要/ 发起/ 一次/ 路由/ 建立/ 请求/ REQ/ 广播/ 就/ 可以/ 完成/ 路由/ 建立/ ,/ 避免/ 了/ 类似/ AODV/ 协议/ 中/ 的/ Feedback/ 数据包/ 导致/ 的/ 带宽/ 消耗/ (/ 在/ UWSN/ 中/ ,/ REQ/ 与/ Feedback/ 反馈/ 包均/ 成功/ 被/ 交付/ 的/ 几率/ 很/ 低/ ,/ 因此/ AODV/ 协议/ 在/ UWSN/ 中将/ 会/ 导致/ 大量/ 带宽/ 消耗/ )/ ./ 综上/ ,/ 采用/ DBM/ 对/ 路由/ 质量/ 进行/ 评估/ 相比/ 于/ 传统/ 路由/ 协议/ 能够/ 在/ 减小/ 一部分/ 带宽/ 消耗/ 的/ 基础/ 上/ 获得/ 较为/ 稳定/ 的/ 评估/ 结果/ ,/ 具有/ 较/ 高/ 的/ 实用性/ ,/ 为此/ 本文/ 选择/ 了/ 方法/ 2/ ./ 图/ 4/ 中/ ,/ 当/ 7/ 号/ 节点/ 有/ 数据/ 需要/ 发送给/ sink/ 节点/ 时/ ,/ 7/ 号/ 节点/ 发起/ 一次/ 路由/ 建立/ 请求/ REQ/ 广播/ ,/ REQ/ 数据/ 报文格式/ 和/ 图/ 1/ (/ b/ )/ 基本一致/ ,/ 但是/ 在/ hops/ 字段/ 后/ 增加/ 了/ 邻居/ 信息/ 表/ ToNi/ 字段/ ,/ 邻居/ 信息/ 表如图/ 5/ 所示/ ,/ 该表/ 属于/ 链表/ 结构/ ,/ 记录/ 了/ 接收/ 到/ REQ/ 节点/ 的/ 邻居/ 节点/ ID/ 和/ 邻居/ 节点/ 对应/ 的/ 缓存/ 占用率/ ,/ 该表/ 的/ 建立/ 主要/ 通过/ 周期/ 发送/ hello/ 包/ ,/ hello/ 包/ 只有/ 一跳/ 的/ 寿命/ ,/ 通过/ hello/ 包/ 除了/ 能/ 获得/ ToNi/ 同时/ 也/ 能/ 及时发现/ 邻居/ 的/ 变化/ ,/ 发送/ 周期/ 并不需要/ 太/ 频繁/ ./ 当/ 网络/ 中/ 某个/ 节点/ 接收/ 到/ REQ/ 后/ ,/ 会/ 将/ 自己/ 的/ 邻居/ 信息/ 表/ 添加/ 到/ REQ/ 中/ 的/ ToNi/ 字段/ 中/ ,/ 然后/ 将/ 更新/ 后/ 的/ REQ/ 继续/ 向前/ 传递/ ,/ ToNi/ 字段/ 对应/ 的/ 链表/ 内容/ 也/ 会/ 逐渐/ 增加/ ./ 中/ ,/ 由/ 7/ 号/ 节点/ 发起/ 一次/ REQ/ ,/ 将/ L/ 设置/ 为/ 3/ ,/ 则/ 这次/ REQ/ 广播/ 涉及/ 到/ 的/ 节点/ ID/ 分别/ 为/ 1/ 、/ 2/ 、/ 3/ 、/ 4/ 、/ 5/ 、/ 6/ 、/ 7/ ./ 依照/ 这种/ REQ/ 机制/ ,/ 最终/ sink/ 节点/ 会/ 得到/ 一个/ 全面/ 的/ ToNi/ 字段/ ,/ 并/ 进行/ 路由/ 选择/ 计算/ ./ 为了/ 简化/ 描述/ 计算/ 过程/ ,/ 本文/ 假设/ 图/ 4/ 中/ 所有/ 节点/ 的/ 缓存/ Page7/ 占用率/ 均/ 为/ 50/ %/ ,/ L/ =/ 3/ ,/ 7/ 号/ 节点/ 向/ sink/ 节点/ 发送/ 的/ REQ/ 数据包/ 将会/ 涉及/ 到/ 1/ ~/ 7/ 号/ 节点/ ,/ 各/ 节点/ 度值/ 和/ 缓存/ 占用率/ 见表/ 1/ ./ 由/ 3.1/ 节/ 介绍/ 可知/ ,/ 当/ 节点/ i/ 向/ 节点/ j/ 发送数据/ 时/ ,/ 节点/ j/ 是/ 该/ 过程/ 的/ 转发/ 节点/ ,/ 式/ (/ 2/ )/ 中/ ,/ 只/ 考虑/ 了/ 节点/ j/ 的/ 转发/ 成功率/ ,/ 并/ 没有/ 考虑/ 节点/ i/ 与/ 节点/ j/ 的/ 连通/ 关系/ ,/ 当/ 节点/ i/ 与/ j/ 不/ 连通/ 时/ ,/ 无论/ 节点/ j/ 转发/ 成功率/ 多大/ ,/ 则/ i/ →/ j/ 过程/ 的/ 转发/ 成功率/ 均/ 为/ 0/ ./ 为此/ ,/ 对式/ (/ 2/ )/ 进行/ 了/ 修正/ ,/ 设/ i/ →/ j/ 转发/ 过程/ 的/ 成功率/ 为/ Spj/ ,/ 则/ 该/ 成功率/ 的/ 计算方法/ 如下/ :/ 其中/ Si/ 的/ 定义/ 见式/ (/ 2/ )/ ./ 式/ (/ 4/ )/ 的/ 核心思想/ 是/ 节点/ j/ 的/ 度值/ 和/ 邻居/ 节点/ 的/ 缓存/ 占用率/ 一旦/ 确定/ ,/ 则/ 节点/ j/ 转发/ 数据/ 的/ 成功率/ 也/ 将/ 确定/ ,/ 无论是/ 哪个/ 源/ 节点/ 与/ j/ 通信/ ,/ 转发/ 成功率/ 均/ 相同/ ,/ 但是/ 若/ 某个/ 节点/ 与/ j/ 不/ 相连/ ,/ 则/ j/ 转发/ 该/ 节点/ 数据/ 的/ 成功率/ 为/ 0/ ,/ 通过/ 邻居/ 信息/ 表/ 内容/ 可以/ 容易/ 地/ 判断/ 出/ 两/ 节点/ 是否/ 相连/ ./ 通过/ 式/ (/ 4/ )/ 可以/ 计算/ 出/ 网络/ 中/ 任意/ 两点/ 间/ 的/ 转发/ 成功率/ ,/ 并/ 形成/ 一个/ M/ ×/ M/ 的/ 矩阵/ 犔/ 量/ )/ ,/ 结合/ 随机/ 游走/ 理论/ 模型/ ,/ 可以/ 计算/ 出/ 从源/ 节点/ 出发/ 到达/ 网络/ 中/ 任意/ 节点/ (/ 包含/ sink/ 节点/ )/ 的/ 成功/ 概率/ ,/ 计算方法/ 如下/ :/ ~/ f/ 其中/ ,/ 犛/ s/ 出发/ 经历/ f/ (/ f/ / 0/ )/ 步/ 随机/ 游走/ 后/ ,/ 到达/ 网络/ 中/ 其他/ 节点/ 的/ 成功/ 概率/ ./ 依据/ 上文/ 给出/ 的/ 转发/ 成功/ 概率/ 定义/ 可知/ 当/ f/ =/ 0/ 时/ ,/ 犛/ 除了/ 源/ 节点/ 对应/ 的/ 位置/ 为/ 1/ ,/ 其他/ 均/ 为/ 0/ ./ 为了/ 更/ 直观/ 理解/ MCR/ 协议/ 原理/ ,/ 本文/ 给出/ 了/ 随机/ 游走/ 算法/ 在/ 路径/ 搜索/ 中/ 的/ 具体操作/ 细节/ :/ (/ 1/ )/ 结合/ 网络拓扑/ 中/ 各/ 节点/ 度值/ 与/ 各/ 节点/ 邻居/ 节点/ 的/ 缓存/ 占用率/ ,/ 形成/ 一个/ M/ ×/ M/ 的/ 矩阵/ 犔/ (/ 2/ )/ 依据/ 数据源/ 节点/ 的/ ID/ 号/ ,/ 形成/ 一个/ 初始/ 矩/ ~/ 0/ 阵/ 犛/ s/ ./ (/ 3/ )/ 依据/ 网络/ 规模/ 或者/ 经验值/ ,/ 设计/ 好/ 随机/ 游走/ 的/ 步数/ f/ ./ (/ 4/ )/ 基于/ 式/ (/ 6/ )/ ,/ 可以/ 得到/ f/ 步/ 随机/ 游走/ 之后/ ,/ 源/ 节点/ 到达/ 网络/ 中/ 各个/ 节点/ 的/ 成功/ 概率/ ,/ 概率/ 值/ 将/ 会/ 被/ 存储/ 在/ 矩阵/ 犛/ 以图/ 4/ 为例/ ,/ 设/ 7/ 号/ 节点/ 为/ 数据源/ 节点/ ,/ 该/ 节点/ 将会/ 产生/ 数据/ ,/ 并/ 要/ 将/ 数据/ 传至/ sink/ 节点/ ./ 设/ REQ/ 的/ 生命周期/ 为/ 3hops/ ,/ 节点/ 相关/ 参数/ 见表/ 1/ ,/ 节点/ 4/ 为/ sink/ 节点/ ,/ 也/ 就是/ REQ/ 的/ 目的/ 节点/ ,/ 则/ 7/ 号/ 节点/ 与/ sink/ 节点/ 间/ 各条/ 路径/ 转发/ 成功率/ 的/ 计算/ 流程/ 如下/ :/ ~/ ~/ 17/ =/ 犔/ 犛/ ID1234567/ 烄/ node1/ \/ 1/ ×/ node21/ ×/ node31/ ×/ 烅/ node4001/ ×/ node50001/ ×/ node6001/ ×/ 烆/ node7000001S0/ 烄/ S07/ →/ 107/ →/ 20S07/ →/ 30S0/ 烅/ S07/ →/ 407/ →/ 50S07/ →/ 60S0/ 烆/ 7/ →/ 7/ 式/ (/ 7/ )/ 中/ ,/ nodei/ 行/ 代表/ 节点/ i/ 的/ 成功/ 转发/ 概率/ ,/ 1/ ~/ 7/ 代表/ 节点/ 序号/ ,/ 例如/ 节点/ 1/ 转发/ 节点/ 2/ 或/ 3/ 的/ 成功/ 概率/ 均/ 为/ 7/ // 12/ ./ S0/ 时/ 到达/ 各个/ 节点/ i/ 的/ 成功率/ ./ 因此/ 7/ 号/ 节点/ 通过/ 1/ 跳/ (/ 即/ 1/ 步/ 随机/ 游走/ )/ 到达/ 各个/ 节点/ 的/ 成功/ 概率/ 计算结果/ 见式/ (/ 7/ )/ ,/ 不难看出/ 7/ 号/ 节点/ 在/ 1/ 跳/ 到达/ 4/ 号/ 节点/ 的/ 成功率/ S17/ 号/ 节点/ 将会/ 存在/ 成功/ 传输/ 给/ sink/ 节点/ 的/ 概率/ ,/ 因此/ 为了/ 简化/ 描述/ ,/ 本文/ 直接/ 计算/ 3/ 跳后/ 7/ 号/ 节点/ 成功/ 交付/ 数据/ 给/ 网络/ 中/ 其他/ 节点/ 的/ 概率/ 矩阵/ ,/ 计算结果/ 如下/ :/ Page8/ ~/ 2/ 犛/ 7/ =/ 犔/ ~/ ×/ ~/ 3/ 犛/ ~/ 7/ =/ 犔/ ×/ S2/ 烄/ S27/ →/ 6/ →/ 107/ →/ 6/ →/ 20S27/ →/ 6/ →/ 3S2/ 烅/ 7/ →/ 6/ →/ 40S27/ →/ 6/ →/ 5S27/ →/ 6/ →/ 6/ \/ S2/ 烆/ 7/ →/ 7/ →/ 7/ 式/ (/ 8/ )/ 中/ 类似/ S3/ 为/ 路径/ 标记/ Pm/ (/ Pathmark/ )/ ,/ 代表/ 3/ 跳后/ ,/ 7/ 号/ 节点/ 到达/ 1/ 号/ 节点/ 的/ 路径/ 有/ 两条/ ,/ 分别/ 为/ 7/ →/ 6/ →/ 3/ →/ 1/ (/ 成功/ 概率/ 为/ 35/ // 144/ )/ 和/ 7/ →/ 6/ →/ 5/ →/ 1/ (/ 成功/ 概率/ 为/ 0/ ,/ 因为/ 5/ 和/ 1/ 不/ 相连/ )/ ./ Pm/ 对应/ 的/ 路径/ 若/ 满足/ 如下/ 条件/ 之一/ 的/ 时候/ ,/ 则/ 该/ 路径/ 对应/ 的/ 成功/ 转发/ 率/ 标记/ 为/ 无/ 意义/ —/ —/ —/ “/ \/ ”/ :/ (/ 1/ )/ 路径/ 存在/ 闭环/ ,/ 则/ 该/ 链路/ 记/ 为/ “/ \/ ”/ (/ 例如/ 式/ (/ 7/ )/ 中/ 的/ S17/ →/ 7/ 和/ 式/ (/ 8/ )/ 中/ 的/ S2/ (/ 2/ )/ 若干个/ “/ \/ ”/ 的/ 和/ 等于/ “/ \/ ”/ ./ (/ 3/ )/ “/ \/ ”/ +/ X/ (/ 非/ 0/ 且/ 非/ “/ \/ ”/ )/ =/ X/ ./ (/ 4/ )/ “/ \/ ”/ +/ 0/ =/ “/ \/ ”/ ./ “/ \/ ”/ 标记/ 也/ 能/ 有效/ 预防/ 算法/ 复杂度/ 随着/ REQ/ 生命周期/ L/ 值/ 的/ 增加/ 而/ 无限/ 增加/ 的/ 情况/ ./ 通常/ L/ 值/ 不/ 应该/ 被/ 设置/ 为/ 较大/ 的/ 值/ ,/ 一方面/ 会/ 增加/ 计算/ 复杂度/ ,/ 另一方面/ 也/ 会/ 造成/ 多/ 跳/ 路径/ 的/ 不可靠性/ 增加/ ./ 在/ 上例/ 中/ ,/ 可以/ 看出/ 当/ f/ =/ 0/ 、/ 1/ 、/ 2/ 时/ ,/ 节点/ 7/ 与/ sink/ 节点/ 之间/ 的/ 路径/ 转发/ 成功率/ 均/ 为/ 0/ ,/ 这/ 是因为/ 在/ 2/ 跳/ 之内/ ,/ 节点/ 7/ 与/ sink/ 节点/ 无法/ 建立/ 连接/ ./ 当/ f/ =/ 3/ 时/ ,/ Pm/ 为/ S3/ (/ 7/ →/ 6/ →/ 3/ →/ 4/ )/ (/ 7/ →/ 6/ →/ 5/ →/ 4/ )/ ,/ 其中/ 路径/ 7/ →/ 6/ →/ 3/ →/ 4/ 的/ 转发/ 成功率/ 为/ 5/ // 18/ ,/ 7/ →/ 6/ →/ 5/ →/ 4/ 的/ 转发/ 成功率/ 为/ 6/ // 18/ ./ 简单/ 比较/ 可以/ 看出/ 路径/ 7/ →/ 6/ →/ 5/ →/ 4/ 的/ 转发/ 成功率/ 较优/ ,/ 则/ sink/ 节点/ 将会/ 沿着/ 4/ →/ 5/ →/ 6/ →/ 7/ 发送/ Feedback/ 数据包/ 通知/ 7/ 号/ 节点/ 选择/ 7/ →/ 6/ →/ 5/ →/ 4/ 路径/ 进行/ 数据/ 发送/ ,/ 至此/ ,/ 整个/ 路由/ 选择/ 计算/ 流程/ 就/ 结束/ 了/ ./ 综上所述/ ,/ 可以/ 形成/ 一种/ 路由/ 建立/ 算法/ MCR/ ./ 算法/ MCR/ ./ ProcedureMCR/ (/ Source/ ,/ Destination/ )/ {/ 1/ ./ get/ _/ ToNi/ (/ )/ ;/ // // 初始化/ 网络/ ,/ 获取/ 网络/ 中/ 各个/ 节点/ 2/ ./ Init/ _/ REQ/ (/ L/ ,/ f/ ,/ fmax/ )/ ;/ // // 初始化/ REQ/ 数据包/ ,/ 设/ 3/ ./ Form/ _/ matrix/ _/ 犔/ 4/ ./ FORf/ =/ 0tof/ {/ 犛/ 5/ ./ IF/ (/ 犛/ 6/ ./ Send/ _/ Feedback/ (/ Destination/ ,/ Source/ )/ ;/ // // 目的/ 节/ 7/ ./ END/ }/ 3.3/ MCR/ 算法/ 的/ 科学/ 意义/ 与/ 理论/ 分析/ 水下/ 无线/ 传感器/ 网络/ 中/ 信号/ 传输/ 延迟/ 较/ 高/ 、/ 节点/ 移动性/ 较强/ ,/ 类似/ AODV/ 的/ 全局/ 最/ 短路/ 由/ 算法/ 并/ 不/ 具有/ 较/ 高/ 的/ 性能/ ./ AODV/ 需要/ 通过/ 大量/ 端到/ 端的/ 探测/ 包来/ 发现/ 路由/ 、/ 维护/ 路由/ ,/ 但是/ 实际上/ ,/ 在/ 高/ 信号/ 延迟/ 、/ 高/ 移动性/ 的/ 环境/ 中/ 这类/ 算法/ 会/ 一直/ 疲于/ 路由/ 发现/ 与/ 维护/ ,/ 减少/ 有效/ 数据/ 的/ 传输/ 量/ ,/ 在/ 后文/ 的/ 实验/ 环节/ 中/ ,/ 该/ 现象/ 非常/ 凸显/ (/ 每/ 一次/ 路由/ 发现/ 或者/ 维护/ ,/ 都/ 需要/ 进行/ 全/ 路径/ 探测/ ,/ 有效/ 数据传输/ 所/ 占/ 总/ 时间/ 比例/ 很少/ )/ ./ MCR/ 算法/ 的/ 本质/ 可以/ 认为/ 是/ 一种/ 概率/ 路由/ ,/ 避免/ 了/ UWSN/ 环境/ 导致/ 有效/ 数据/ 一直/ 无法/ 传输/ 的/ 现象/ ,/ 从而/ 增加/ 了/ 网络/ 吞吐量/ ./ MCR/ 能/ 在/ 路径/ 断开/ 后/ 会/ 重新/ 建立/ 路由/ ,/ 但是/ 与/ 类似/ AODV/ 算法/ 不同之处/ 在于/ ,/ MCR/ 发起/ 一次/ REQ/ 就/ 可以/ 完成/ 路径/ 的/ 建立/ ,/ 而/ AODV/ 需要/ 多次/ REQ/ 、/ Feedback/ 闭环/ 成功/ 才能/ 完成/ 路径/ 的/ 建立/ (/ 为了/ 确保/ 路径/ 的/ 可靠/ )/ ./ 从后/ 文中/ 的/ 实验/ 数据/ 来看/ ,/ 大/ Page9/ 量/ 的/ 探测/ 包/ 存在/ 于/ 网络/ 中/ 反而/ 会/ 增加/ 冲突/ 概率/ ,/ 降低/ 可靠性/ ,/ MCR/ 在/ 可靠性/ 上/ 具有/ 较/ 高/ 的/ 提升/ ./ 在/ 步骤/ 4/ 与/ 5/ 中/ ,/ 有/ 两种/ 方法/ 可以/ 建立/ 路由/ ,/ 第/ 1/ 种/ 是/ sink/ 节点/ 收到/ 一个/ REQ/ 立即/ 建立/ 一条/ 路径/ ;/ 第/ 2/ 种/ 是/ sink/ 节点/ 收集/ 到/ 所有/ REQ/ 后/ 通过/ 随机/ 游走/ 算法/ 建立/ 路径/ ./ 这/ 两种/ 方法/ 有/ 一个/ 很大/ 的/ 区别/ ,/ 例如/ 在/ 图/ 4/ 中/ ,/ 5/ 号/ 节点/ 给/ 4/ 号/ 节点/ 发送/ REQ/ 失败/ 了/ ,/ 但是/ 5/ 号/ 节点/ 将/ 自身/ 的/ 邻居/ 信息/ 表/ 通过/ 3/ 号/ 节点/ 传送/ 给/ 了/ 4/ 号/ 节点/ ,/ 则/ 最终/ 的/ 犔/ 留/ 了/ 5/ 号/ 节点/ 的/ 信息/ ,/ 在/ 路由/ 计算/ 结束/ 后/ ,/ 若/ 7/ →/ 6/ →/ 5/ →/ 4/ 对应/ 的/ 转发/ 成功率/ 较/ 高/ ,/ 则/ 该/ 路径/ 不会/ 因为/ 一次/ 偶然/ 的/ REQ/ 丢失/ 而/ 被/ 忽略/ ,/ 这/ 就是/ MCR/ 路由/ 算法/ 的/ 一个/ 优势/ ,/ 增加/ 了/ 路由/ 的/ 鲁棒性/ ./ 4/ 实验/ 分析/ 为了/ 对/ MCR/ 协议/ 性能/ 进行/ 评估/ ,/ 本/ 节/ 进行/ 了/ 图/ 6/ 节点/ 布局/ 图/ 信道/ 类型/ 衰减模型/ 网络/ 接口类型/ Mac/ 层/ 协议/ Interfacequeuetype/ (/ ifq/ )/ Linklayertype/ 天线/ 类型/ Maxpacketinifq/ 节点/ 数量/ (/ nn/ )/ 路由/ 协议/ 一系列/ 仿真/ 实验/ ,/ 实验/ 平台/ 为/ NS/ -/ 2/ 仿真/ 平台/ ./ 为了/ 更加/ 直观/ 地/ 描述/ MCR/ 协议/ 性能/ ,/ 本文/ 引入/ 了/ 典型/ 的/ 源/ 驱动/ 式/ AODV/ 协议/ 、/ 表/ 驱动/ 式/ DSDV/ 协议/ [/ 19/ ]/ 以及/ UWSN/ 中/ 较为/ 成熟/ 的/ 位置/ 信息/ 驱动/ VBF/ 算法/ 与其/ 进行/ 性能/ 对比/ ./ 4.1/ 实验/ 环境/ 在/ 基于/ NS/ -/ 2/ 的/ 仿真/ 实验/ 中/ [/ 20/ -/ 21/ ]/ ,/ 20/ 个/ 节点/ 被/ 均匀/ 放置/ 在/ 600m/ ×/ 450m/ 的/ 矩形/ 区域/ 内/ ,/ 拓扑/ 形状/ 如图/ 6/ 所示/ ,/ 任意/ 相邻/ 两/ 节点/ 间/ 距离/ 均/ 为/ 150m/ ,/ 仿真/ 相关/ 参数/ 详细/ 设置/ 如表/ 2/ 所示/ ./ 为了/ 使得/ 仿真/ 环境/ 与/ UWSN/ 的/ 环境/ 接近/ ,/ 进行/ 了/ 一些/ 如下/ 设置/ :/ (/ 1/ )/ 带宽/ 被/ 设置/ 为/ 低/ 速率/ ,/ 带宽/ 值为/ 256kbps/ ;/ (/ 2/ )/ 将/ 数据包/ 缓存/ 数量/ 最大值/ 设置/ 成较/ 小值/ ,/ 增加/ 冲突/ 类/ 丢/ 包/ 概率/ ,/ 取值/ 为/ 50/ ;/ (/ 3/ )/ Mac/ 层/ 两/ 节点/ 间/ 的/ 丢/ 包率/ 与/ 距离/ 关系/ 如表/ 2/ 所示/ ,/ 为了/ 模拟/ UWSN/ 链路/ 的/ 不/ 可靠/ 特性/ ,/ 将/ 节点/ 距离/ 设置/ 为/ 150m/ ;/ (/ 4/ )/ 关闭/ RTS/ // CTS/ 功能/ ,/ 增加/ 隐藏/ 终端/ 发生/ 可能性/ ./ 图/ 6/ 中/ ,/ 节点/ 0/ 代表/ 数据源/ 节点/ ,/ 采用/ 的/ Agent/ 为/ TCP/ ,/ 节点/ 19/ 代表/ sink/ 节点/ ,/ 采用/ 的/ Agent/ 为/ Page10TCP/ // sink/ ./ 仿真/ 时间/ 为/ 1500s/ ,/ 节点/ 0/ 向/ 节点/ 19/ 发送/ 恒定/ 速率/ cbr/ 数据流/ ,/ cbr/ 数据包/ 长度/ 为/ 64byte/ ,/ 无/ 发送/ 间隔/ ,/ 发送/ 速率/ 为/ 16kb/ ./ 图/ 6/ 中/ 的/ 虚线/ 箭头/ ,/ 描述/ 了/ MCR/ 、/ DSDV/ 、/ AODV/ 在/ 仿真/ 过程/ 中/ 的/ 某/ 一/ 时刻/ 建立/ 的/ 路由/ ./ 4.2/ 性能/ 评价/ 参数/ 本文/ 主要/ 从端/ 到/ 端/ 数据/ 丢失/ 率/ droprate/ 、/ 端到/ 端/ 数据/ 延迟/ 、/ 端到/ 端/ 数据/ 延迟/ 抖动/ 、/ 网络/ 吞吐量/ 等/ 4/ 个/ 参数/ 对/ 路由/ 协议/ 性能/ 进行/ 评估/ ./ 具体/ 参数/ 定义/ 如下/ :/ (/ 1/ )/ 端到/ 端/ 数据/ 丢失/ 率/ ./ 在/ 仿真/ 过程/ 中/ 的/ 各个/ 时间/ 点上/ 记录/ 节点/ 0/ 发出/ 的/ 数据包/ 总数/ T0/ ,/ 记录/ 节点/ 19/ 接收/ 到/ 的/ 数据包/ 总数/ R0/ ,/ 则/ 有/ droprate/ =/ T0/ // R0/ ./ (/ 2/ )/ 端到/ 端/ 数据/ 延迟/ ./ 设/ 数据包/ Pi/ (/ i/ 为/ 数据包/ 序列号/ )/ 为/ 节点/ 0/ 成功/ 发送至/ 节点/ 19/ 的/ 数据包/ ,/ 记录/ 每/ 一个/ Pi/ 在/ 节点/ 0/ 产生/ 的/ 时刻/ t/ _/ start/ ,/ 记录/ 节点/ 19/ 收到/ 来自/ 节点/ 0/ 的/ Pi/ 数据包/ 对应/ 时刻/ t/ _/ end/ ,/ 则/ 有/ 序列号/ 为/ i/ 的/ 数据/ 延迟/ 为/ t/ _/ end/ -/ t/ _/ start/ ./ (/ 3/ )/ 端到/ 端/ 数据/ 延迟/ 抖动/ [/ 22/ ]/ ./ 设/ recvTime/ (/ j/ )/ 代表/ 节点/ 19/ 收到/ 序列号/ 为/ j/ 的/ 数据包/ 时刻/ ,/ recvTime/ (/ i/ )/ 为/ 节点/ 19/ 收到/ 序列号/ 为/ i/ 的/ 数据包/ 时刻/ ,/ i/ 和/ j/ 是/ 节点/ 19/ 收到/ 的/ 相邻/ 数据包/ 序号/ ,/ 则/ 有/ 数据/ 延迟/ 计算公式/ 如下/ :/ Jitter/ =/ (/ 4/ )/ 网络/ 吞吐量/ ./ 记录/ 节点/ 19/ 在/ 经历/ t/ 秒/ 时/ ,/ 收到/ 的/ 有效/ 数据/ 总/ 比特/ 数目/ sum/ (/ t/ )/ ,/ 则/ 有/ 吞吐量/ 为/ sum/ (/ t/ )/ // t/ ./ 4.3/ 实验/ 结果/ 分析/ (/ 1/ )/ 端到/ 端/ 数据/ 丢失/ 率/ 分析/ 在/ 仿真/ 实验/ 中/ ,/ REQ/ 数据包/ 的/ 寿命/ 均/ 被/ 设置/ 为/ 5/ 跳/ ,/ 图/ 7/ 给出/ 了/ 3/ 种/ 路由/ 算法/ 对应/ 的/ 丢/ 包率/ ./ 图/ 7/ 中/ 横坐标/ 表示/ 仿真/ 记录/ 的/ 时间/ 点/ ,/ 横坐标/ 空缺/ 表示/ 在/ 仿真/ 过程/ 中该/ 时刻/ 点/ 没有/ 对应/ 任何/ 行为/ ./ 从图/ 7/ 中/ 可以/ 看出/ AODV/ 和/ DSDV/ 相似/ 的/ 丢/ 包率/ 没有/ 明显/ 的/ 规律/ ,/ 这/ 是因为/ AODV/ 和/ DSDV/ 均/ 考虑/ 最短/ 路径/ ,/ 因此/ 在/ 丢/ 包率/ 上/ 没有/ 必然/ 的/ 趋势/ ,/ 这/ 和/ 路径/ 选择/ 的/ 偶然性/ 有关/ ./ MCR/ 的/ 丢/ 包率/ 一直/ 较/ 低/ ,/ 这/ 是因为/ MCR/ 算法/ 基于/ 节点/ 缓存/ 和度值/ 考虑/ 了/ 路径/ 转发/ 成功率/ ,/ 会/ 选择/ 干扰源/ 较少/ 的/ 路径/ ,/ 在/ 对/ AODV/ 和/ DSDV/ 的/ trace/ 文件/ 分析/ 中/ 发现/ ,/ 数据/ 丢失/ 主要/ 有/ 两个/ 原因/ :/ ①/ 数据/ 冲突/ ,/ 占/ 39.3/ %/ ;/ ②/ 路径/ 损坏/ ,/ 占/ 51.7/ %/ ./ 而/ 在/ MCR/ 的/ trace/ 中/ ,/ 数据/ 冲突/ 占/ 18.4/ %/ ,/ 路径/ 损坏/ 占/ 45.2/ %/ ./ 可以/ 看出/ MCR/ 丢/ 包率/ 的/ 降低/ 主要/ 受益/ 于/ 冲突/ 类/ 丢/ 包/ 的/ 减少/ ./ VBF/ 算法/ 的/ 核心思想/ 是/ 在/ 源/ 节点/ 通信/ 范围/ 内/ 寻找/ 与/ 目的/ 节点/ 位置/ 最为/ 接近/ 的/ 节点/ 作为/ 下/ 一/ 跳/ ,/ 并/ 以此类推/ 直到/ 数据/ 被/ 交付/ 至/ 目的/ 节点/ ./ 在/ 图/ 6/ 规则/ 布局/ 网络/ 中/ VBF/ 算法/ 与/ MCR/ 算法/ 相似/ ,/ 具有/ 较/ 低/ 的/ 丢/ 包率/ ,/ 并且/ 算法/ 简单/ 实用/ ,/ 但是/ VBF/ 算法/ 属于/ 局部/ 最优/ 算法/ ,/ 在/ 不规则/ 的/ 网络拓扑/ 中/ 很/ 容易/ 出现/ 数据/ 在/ 中继/ 过程/ 进入/ “/ 死胡同/ ”/ 的/ 现象/ ,/ 无法/ 找到/ 下/ 一/ 跳/ ,/ 此时/ 数据/ 将会/ 丢失/ ./ 在/ 图/ 7/ 中/ 还/ 可以/ 看出/ ,/ 在/ 0/ ~/ 150s/ 之间/ ,/ AODV/ 和/ DSDV/ 的/ 丢/ 包率/ 均/ 为/ 1/ ,/ 数据/ 在/ 150s/ 后/ 才/ 开始/ 正式/ 传输/ ./ 通过/ trace/ 文件/ 分析/ 发现/ ,/ 在/ 前/ 150s/ 内/ AODV/ 和/ DSDV/ 一直/ 处于/ 频繁/ 路径/ 建立/ 阶段/ ,/ 经历/ 了/ 很/ 久/ 的/ REQ/ 广播/ ,/ 建立/ 了/ 一条/ 链路/ ,/ 结果/ 很快/ 就/ 发现/ 该/ 链路/ 被/ 损坏/ ,/ 又/ 需要/ 重新/ 建立/ ./ VBF/ 算法/ 在/ 一/ 开始/ 需要/ 通过/ 广播/ 收集/ 各个/ 节点/ 的/ 位置/ 信息/ ,/ 每个/ 节点/ 需要/ 知道/ 自己/ 通信/ 范围/ 内/ 各个/ 邻居/ 节点/ 的/ 位置/ 信息/ ,/ 这个/ 过程/ 需要/ 消耗/ 一部分/ 时间/ ,/ 从图/ 7/ 中/ 可以/ 看出/ ,/ 大概/ 消耗/ 了/ 100s/ 左右/ ./ 而/ MCR/ 算法/ 并/ 不/ 完全/ 依赖/ REQ/ 和/ Feedback/ 构成/ 的/ 环路/ ,/ 通过/ 随机/ 游走/ 的/ 方法/ ,/ 即使/ 有/ 一些/ REQ/ 或/ Feedback/ 在/ 传输/ 过程/ 中/ 丢失/ 了/ ,/ 也/ 不会/ 造成/ 路径/ 丢失/ (/ 见/ 本文/ 3.3/ 节/ )/ ,/ 因此/ ,/ 更能/ 快速/ 全面/ 地/ 完成/ 有效/ 路由/ 的/ 建立/ ./ (/ 2/ )/ 端到/ 端/ 数据/ 延迟/ 分析/ 图/ 8/ 中/ 横坐标/ 是/ 某个/ 数据包/ 产生/ 的/ 时刻/ ,/ 纵坐标/ 代表/ 该/ 时刻/ 产生/ 的/ 数据/ 端到/ 端/ 延迟/ 大小/ ./ 横坐标/ 的/ 空缺/ 代表/ 着/ 在/ 仿真/ 实验/ 中该/ 时刻/ 点上/ 节点/ 0/ 没有/ 能够/ 成功/ 将/ 数据传输/ 给/ 节点/ 19/ ./ 通过/ 图/ 8/ 可以/ 看出/ 在/ 成功/ 发送/ 的/ 数据/ 样本/ 中/ ,/ MCR/ 的/ 端/ 到/ 端/ 延迟/ 较/ 高/ ,/ 而/ AODV/ 、/ DSDV/ 、/ VBF/ 的/ 端/ 到/ 端/ 延迟/ 较为/ 相似/ ,/ 这/ 主要/ 是因为/ AODV/ 、/ DSDV/ 、/ VBF/ 均/ 偏好/ 选择/ Page11/ 跳数/ 最少/ 的/ 路径/ ,/ 在/ 数据传输/ 过程/ 中跳数/ 是/ 影响/ 端到/ 端/ 延迟/ 的/ 一个/ 重要/ 因素/ ,/ 因此/ AODV/ 、/ DSDV/ 、/ VBF/ 对应/ 的/ 延迟/ 较/ 低/ ;/ 而/ MCR/ 没有/ 考虑/ 跳数/ 问题/ ,/ 在/ 路径/ 选择/ 过程/ 中/ 可能/ 会/ 选择/ 一条/ 跳数/ 较大/ 的/ 路径/ ,/ 从而/ 增加/ 了/ 延迟/ ./ 图/ 8/ 还/ 显示/ 了/ AODV/ 、/ DSDV/ 、/ VBF/ 对应/ 的/ 横坐标/ 相比/ 于/ MCR/ 空缺/ 很大/ ,/ 这/ 表明/ 在/ 仿真/ 过程/ 中/ AODV/ 、/ DSDV/ 、/ VBF/ 的/ 实际/ 成功/ 数据/ 交付/ 只是/ 出现/ 在/ 几个/ 短暂/ 的/ 时间/ 区间/ 上/ ,/ 空缺/ 的/ 地方/ 代表/ 网络/ 一直/ 在/ 建立/ 路径/ 或者/ 是/ 传输/ 失败/ ./ 产生/ 这个/ 现象/ 的/ 主要/ 原因/ 是/ AODV/ 、/ DSDV/ 、/ VBF/ 偏好/ 追求/ 最短/ 路径/ 而/ 没有/ 考虑/ 路径/ 传输/ 的/ 可靠性/ 和/ 干扰源/ ,/ 从而/ 导致/ 不论/ 在/ 路径/ 建立/ 阶段/ 还是/ 数据传输/ 阶段/ 频繁/ 出现/ 数据包/ 丢失/ ./ 此外/ ,/ 图/ 8/ 与/ 图/ 7/ 是/ 可以/ 对应/ 上/ 的/ ,/ 例如/ 在/ 图/ 7/ 和/ 图/ 8/ 的/ 1200s/ 附近/ ,/ 图/ 7/ 的/ DSDV/ 算法/ 丢/ 包率/ 之所以/ 能够/ 急剧下降/ ,/ 是因为/ 图/ 8/ 中/ DSDV/ 算法/ 在/ 1200s/ 附近/ 成功/ 交付/ 了/ 大量/ 数据/ ./ (/ 3/ )/ 端到/ 端/ 数据/ 延迟/ 抖动/ 分析/ 节点/ 19/ 接收/ 到/ 数据包/ 的/ 序号/ 排序/ 可能/ 与/ 节点/ 0/ 发送/ 的/ 数据包/ 序号/ 排序/ 不同/ ,/ 例如/ 节点/ 0/ 发送/ 序号/ 为/ {/ 1/ ,/ 2/ ,/ 3/ }/ ,/ 而/ 节点/ 19/ 接收/ 到/ 的/ 序号/ 可能/ 为/ {/ 3/ ,/ 2/ ,/ 1/ }/ ./ 根据/ 端到/ 端/ 延迟/ 抖动/ 的/ 定义/ 可知/ ,/ jitter/ 值/ 可能/ 出现/ 正值/ 也/ 可能/ 出现/ 负值/ ./ jitter/ 值/ 可以/ 反映/ 网络/ 的/ 稳定性/ ,/ 若/ jitter/ 值/ 较大/ ,/ 则/ 可以/ 认为/ 链路/ 在/ 某个/ 地方/ 出现/ 拥堵/ ,/ 网络/ 不/ 稳定/ ./ 图/ 9/ 中/ 的/ jitter/ 数据/ 有/ 很多/ 看起来/ 很接/ 近于零/ ,/ 但是/ 实际上/ 并/ 不/ 为/ 0/ ,/ 因为/ NS/ -/ 2/ 仿真/ 实验/ 中/ ,/ 数据包/ 的/ 时间/ 间隔/ 非常/ 短/ ,/ 基本/ 是/ 在/ 毫秒/ 级/ ,/ 因此/ 计算/ 出/ 的/ jitter/ 值/ 看起来/ 才/ 会/ 很小/ ./ 图/ 9/ 的/ 横坐标/ 是/ 成功/ 交付/ 数据包/ 的/ 序号/ ,/ 在/ NS/ -/ 2/ 仿真/ 中/ ,/ AODV/ 与/ MCR/ 协议/ 的/ 数据包/ 序号/ 与/ 有效/ 数据/ 绑定/ ,/ 即/ 路由/ 层/ 的/ ARQ/ 、/ relpy/ 等/ 数据/ 不会/ 导致/ 序号/ 增加/ ,/ 而/ DSDV/ 、/ VBF/ 与/ AODV/ 、/ MCR/ 不同/ ,/ 路由/ 层/ 的/ message/ 会/ 使/ 序号/ 增加/ ,/ 因此/ 图/ 9/ 中/ 的/ DSDV/ 数据包/ 序号/ 要/ 比/ AODV/ 序号/ 大/ 很多/ ,/ 实际上/ 两者/ 传输/ 的/ 有效/ 数据量/ 很/ 接近/ ./ 纵轴/ 是/ 成功/ 接收/ 到/ 的/ 某/ 序号/ 数据包/ 对应/ 的/ 延迟/ 抖动/ 值/ ./ 由于/ MCR/ 选择/ 的/ 路径/ 可靠性/ 较/ 高/ ,/ 路由/ 建立/ 和/ 维护/ 时间/ 开销/ 低/ ,/ 因此/ 大部分/ 仿真/ 时间/ 均/ 被/ 用来/ 进行/ 有效/ 数据传输/ ,/ 所以/ 有效/ 传输/ 的/ 数据包/ 数量/ 较大/ ;/ 而/ AODV/ 与/ DSDV/ 需要/ 消耗/ 大量/ 时间/ 去/ 建立/ 、/ 维护/ 路由/ ,/ 而且/ 频繁/ 发生/ 数据/ 丢失/ ,/ 导致/ 有效/ 传输/ 的/ 数据量/ 很小/ ;/ VBF/ 属于/ 源/ 驱动/ 算法/ ,/ 每个/ 节点/ 没有/ 维护/ 路由表/ ,/ 每当/ 一个/ 节点/ 接收/ 到/ 数据包/ 后/ ,/ 总是/ 会/ 计算/ 其/ 邻居/ 节点/ 与/ 目的/ 节点/ 的/ 距离/ ,/ 并/ 选择/ 最为/ 接近/ 的/ 作为/ 下/ 一/ 跳/ ,/ 这/ 导致/ 在/ 数据通信/ 过程/ 中/ 消耗/ 一些/ 时间/ ,/ 导致/ 有效/ 数据传输/ 的/ 时间/ 变少/ ./ 从图/ 9/ 中/ 还/ 可以/ 看出/ 在/ 成功/ 传输/ 的/ 数据/ 样本/ 中/ ,/ AODV/ 和/ MCR/ 对应/ 的/ 延迟/ 抖动/ 较为/ 相似/ ,/ 而/ DSDV/ 、/ VBF/ 对应/ 的/ 延迟/ 抖动/ 较/ 小/ ./ 这/ 是因为/ DSDV/ 属于/ 表/ 驱动/ 路由/ 协议/ ,/ 在/ 一次/ 路径/ 确定/ 和/ 下/ 一次/ 路径/ 更新/ 之间/ ,/ 不再/ 会/ 有/ 路由/ 搜索/ 行为/ ,/ 数据/ 将会/ 严格/ 按照/ 确定/ 的/ 路由/ 进行/ 传输/ ,/ 即使/ 多次/ 发送/ 失败/ 也/ 不会/ 随意/ 改变/ 路径/ ;/ VBF/ 算法/ 在/ 整个/ 通信/ 过程/ 中/ 几乎/ 没有/ 多余/ 的/ 探测/ 包/ 消耗/ ,/ 在/ 规则/ 拓扑/ 网络/ 中/ 出现/ 数据/ 交付/ 失败/ 的/ 概率/ 也/ 很/ 低/ ,/ 避免/ 了/ 数据/ 重传/ 的/ 现象/ ,/ 因此/ 延迟/ 抖动/ 较/ 小/ ,/ 但/ 在/ 不规则/ 网络/ 中/ ,/ 很/ 可能/ 会/ 因为/ 数据/ 回传/ 造成/ 大量/ 数据/ 拥塞/ ,/ 导致/ 较/ 高/ 延迟/ 抖动/ ;/ 而/ AODV/ 和/ MCR/ 属于/ 源/ 驱动/ 路由/ 协议/ ,/ 一旦/ 发现/ 路径/ 不可/ 用则/ 立刻/ 会/ 发起/ REQ/ 广播/ 进行/ 路径/ 寻找/ 、/ 建立/ ,/ 从而/ 为/ 网络/ 注入/ 了/ 大量/ 探测/ 包/ ,/ 使得/ 网络/ 的/ 正常/ 数据传输/ 变得/ 不/ 稳定/ ./ (/ 4/ )/ 网络/ 吞吐量/ 分析/ 吞吐量/ 是/ 衡量/ 一个/ 网络/ 性能/ 的/ 重要/ 参数/ ,/ 吞吐/ Page12/ 量/ 的/ 大小/ 、/ 吞吐量/ 的/ 稳定性/ ,/ 对/ 网络应用/ 具有/ 重要/ 的/ 指导/ 价值/ ./ 图/ 10/ 的/ 横坐标/ 是/ 仿真/ 过程/ 中/ 记录/ 的/ 时间/ 点/ ,/ 纵坐标/ 是/ 各个/ 时间/ 点上/ 统计/ 的/ 节点/ 19/ 与/ 节点/ 0/ 之间/ 的/ 端/ 到/ 端网络/ 吞吐量/ ,/ 单位/ 是/ kbps/ ./ 从图/ 10/ 中/ 可以/ 看出/ AODV/ 协议/ 在/ 200s/ 附近/ 时有/ 一个/ 吞吐量/ 峰值/ ,/ 这和图/ 7/ 相对/ 应/ ,/ AODV/ 协议/ 在/ 200s/ 附近/ 的/ 一段时间/ 内/ ,/ 成功/ 交付/ 率/ 很/ 高/ ,/ 此时/ 的/ 吞吐量/ 也/ 随之/ 上涨/ ,/ 随着/ 仿真/ 时间/ 的/ 推移/ ,/ AODV/ 的/ 交付/ 率/ 逐渐/ 降低/ ,/ 并且/ 网络/ 上/ 大量/ 时间/ 消耗/ 在/ 路径/ 探索/ 和/ 维护/ 上/ ,/ 有效/ 数据传输/ 量/ 越来越少/ ,/ 从而/ 导致/ AODV/ 网络/ 吞吐量/ 急剧下降/ ./ DSDV/ 吞吐量/ 一直/ 处于/ 极低/ 的/ 状态/ ,/ 虽然/ 在/ 1200s/ 时/ 的/ 交付/ 率/ 较/ 高/ ,/ 但是/ 由于/ 仿真/ 时间/ 基数/ 已经/ 很大/ ,/ 因此/ 最终/ 吞吐量/ 结果/ 仍然/ 很/ 低/ ./ VBF/ 吞吐量/ 一直/ 较/ 低/ ,/ 这/ 主要/ 是因为/ VBF/ 每次/ 传输数据/ 时/ 总是/ 会/ 消耗/ 一部分/ 时间/ 来/ 计算/ 各个/ 节点/ 与/ 目的/ 节点/ 的/ 距离/ ./ 相比/ 于/ AODV/ 、/ DSDV/ 、/ VBF/ ,/ MCR/ 具有/ 较/ 稳定/ 的/ 吞吐量/ ,/ 这/ 主要/ 取决于/ 两/ 方面/ :/ (/ 1/ )/ MCR/ 协议/ 降低/ 了/ 冲突/ 类/ 数据/ 丢包/ 概率/ ,/ 提高/ 了/ 端/ 到/ 端/ 数据包/ 交付/ 率/ ;/ (/ 2/ )/ MCR/ 在/ 整个/ 仿真/ 时间/ 内/ ,/ 在/ 路径/ 建立/ 、/ 维护/ 方面/ 只/ 消耗/ 了/ 较/ 少/ 的/ 一部分/ 时间/ (/ 不/ 需要/ 等待/ REQ/ 和/ Feedback/ 构成/ 环路/ 就/ 可以/ 计算/ 出/ 有效/ 路径/ )/ ,/ 大部分/ 的/ 时间/ 均/ 被/ 用来/ 传输/ 有效/ 数据/ ./ 因此/ MCR/ 在/ 吞吐量/ 性能/ 方面/ 优越/ 于/ AODV/ 、/ DSDV/ 、/ VBF/ ./ 5/ 结论/ 本文/ 针对/ 水下/ 无线/ 传感器/ 网络/ 的/ 物理/ 特性/ ,/ 设计/ 了/ 一种/ 最小化/ 冲突/ 概率/ 的/ 路由/ 算法/ MCR/ ,/ 该/ 算法/ 综合/ 考虑/ 网络/ 中/ 节点/ 的/ 度值/ 和/ 通信/ 负载/ ,/ 融合/ 随机/ 游走/ 思想/ ,/ 为/ 数据/ 的/ 传输/ 选择/ 了/ 一条/ 冲突/ 概率/ 较/ 低/ 的/ 路径/ ./ 基于/ NS/ -/ 2/ 仿真/ 平台/ 分别/ 对/ AODV/ 、/ DSDV/ 、/ VBF/ 和/ MCR/ 路由/ 算法/ 进行/ 了/ 实验/ 评估/ ,/ 并/ 得出/ 以下几点/ 结论/ :/ (/ 1/ )/ 在/ UWSN/ 中/ ,/ 冲突/ 类/ 丢/ 包/ 在/ 丢/ 包/ 总数/ 内/ 占据/ 很大/ 比例/ ,/ MCR/ 算法/ 能够/ 有效/ 避免/ 冲突/ 类/ 丢/ 包/ ,/ 相比/ 于/ 其他/ 两种/ 具有/ 更/ 低/ 的/ 丢/ 包率/ ;/ (/ 2/ )/ 由于/ MCR/ 算法/ 没有/ 选择/ 跳数/ 最少/ 的/ 路径/ ,/ 因此/ 在/ 端/ 到/ 端/ 延迟/ 性能/ 上/ 不如/ DSDV/ 、/ AODV/ 与/ VBF/ ;/ (/ 3/ )/ AODV/ 、/ MCR/ 相比/ 于/ VBF/ 、/ DSDV/ 协议/ 会/ 不定期/ 的/ 进行/ 路径/ 探索/ 和/ 维护/ ,/ 因此/ 在/ 延迟/ 抖动/ 性能/ 上/ AODV/ 、/ MCR/ 不如/ DSDV/ 、/ 规则/ 拓扑/ 下/ 的/ VBF/ ;/ (/ 4/ )/ 相比/ 于/ AODV/ 、/ VBF/ 、/ DSDV/ ,/ MCR/ 具有/ 更/ 高/ 和/ 更/ 稳定/ 的/ 网络/ 吞吐量/ ,/ 这/ 主要/ 是因为/ MCR/ 的/ 丢/ 包率/ 较/ 低/ ,/ 并且/ 大部分/ 仿真/ 时间/ MCR/ 均/ 处于/ 有效/ 数据传输/ 阶段/ ,/ 而/ AODV/ 与/ DSDV/ 大部分/ 仿真/ 时间/ 花费/ 在/ 路径/ 探索/ 和/ 维护/ 上/ ,/ 并且/ 丢包/ 现象/ 严重/ ,/ VBF/ 没有/ 维护/ 路由表/ ,/ 导致/ 每次/ 数据/ 转发/ 时均/ 需要/ 消耗/ 一些/ 时间/ 来/ 计算/ 最优/ 下/ 一/ 跳/ ;/ (/ 5/ )/ MCR/ 采用/ 随机/ 游走/ 思想/ 进行/ 路由/ 计算/ ,/ 相比/ 于/ AODV/ 和/ DSDV/ ,/ MCR/ 协议/ 无需/ 等待/ REQ/ 和/ Feedback/ 构成/ 回路/ (/ 在/ 链路/ 较差/ 的/ 环境/ 中/ ,/ 很难/ 构成/ 回路/ )/ 就/ 可以/ 完成/ 路径/ 建立/ ,/ 路由/ 建立/ 速度/ 更/ 快/ ;/ (/ 6/ )/ MCR/ 算法/ 并/ 不会/ 因/ 一次/ REQ/ 或者/ Feedback/ 的/ 丢失/ 而/ 导致/ 一条/ 路径/ 被/ 忽略/ ,/ 具有/ 更鲁棒/ 的/ 路径/ 发现/ 性能/ ./ UWSN/ 与/ 传统/ WSN/ 不同/ ,/ 由于/ 通信/ 环境/ 的/ 改变/ ,/ 冲突/ 类/ 丢/ 包/ 现象/ 剧增/ ,/ MCR/ 针对/ 该/ 现象/ 进行/ 了/ 路由/ 策略/ 和/ 路由/ 搜索算法/ 的/ 设计/ ,/ 在/ 丢/ 包率/ 、/ 吞吐量/ 等/ 方面/ 获得/ 了/ 收益/ ,/ 但是/ 在/ 延迟/ 和/ 延迟/ 抖动/ 方面/ 仍/ 存在/ 不足/ ./ 实验/ 仿真/ 环境/ 主要/ 是/ 面向/ UWSN/ 构建/ 的/ ,/ 在/ 其他/ 环境/ 下/ 性能/ 对比/ 结果/ 如何/ ,/ 是/ 本文/ 下/ 一步/ 的/ 工作/ ./ 此外/ ,/ UWSN/ 中/ ,/ 除了/ 冲突/ 类/ 丢/ 包/ ,/ 还有/ 链路/ 质量/ 不/ 稳定/ 导致/ 的/ 丢/ 包/ ,/ 如何/ 全面/ 地/ 考虑/ 各种/ 丢包/ 因素/ ,/ 进一步提高/ MCR/ 协议/ 的/ 性能/ 也/ 是/ 本文/ 的/ 下/ 一步/ 主要/ 工作/ ./ 致谢/ 感谢/ 辽宁省/ 面向/ 先进/ 装备/ 制造业/ 的/ 嵌入式/ 技术/ 重点/ 实验室/ 对本/ 论文/ 的/ 实验/ 平台/ 支持/ ./ 感谢/ 辽宁省/ 教育厅/ 对本/ 论文/ 的/ 项目/ 经费/ 支持/ !/ 

