Page1/ 基于/ 懒/ 符号执行/ 的/ 软件/ 脆弱性/ 路径/ 求解/ 算法/ 秦晓军/ 周林/ 陈左宁/ 甘水滔/ (/ 江南/ 计算技术/ 研究所/ 江苏/ 无锡/ 214083/ )/ 摘要/ 为了/ 解决/ 软件测试/ 中/ 路径/ 爆炸/ 、/ 新/ 路径/ 发现/ 率低/ 以及/ 静态/ 分析/ 中/ 虚报/ 率/ 高等/ 问题/ ,/ 提出/ 了/ 动/ 静态/ 分析/ 结合/ 的/ 脆弱性/ 挖掘/ 框架/ ,/ 并/ 针对/ 循环/ 爆炸/ 问题/ 设计/ 了/ 基于/ 懒/ 符号执行/ 的/ 路径/ 求解/ 算法/ ,/ 该/ 路径/ 求解/ 算法/ 应用/ 最短/ 路径/ 、/ 条件/ 约束/ 集/ 概率/ 和/ 可达/ 路径/ 数量/ 3/ 种/ 静态/ 信息/ 制导/ 符号执行/ ,/ 提高/ 了/ 路径/ 选择/ 的/ 准确率/ ,/ 能/ 较/ 快/ 地/ 逼近/ 脆弱/ 点/ ,/ 并/ 利用/ 懒/ 符号执行/ 技术/ 自动识别/ 循环/ 结构/ ,/ 通过/ 推迟/ 变量/ 实例/ 化等/ 方法/ ,/ 有效/ 地/ 缓解/ 了/ 循环/ 结构/ 的/ 路径/ 组合/ 爆炸/ 问题/ ,/ 最终/ 生成/ 到达/ 脆弱/ 点集/ 的/ 数据包/ ./ 对/ coreutils6/ ./ 10/ 命令/ 包/ 的/ 实验/ 结果表明/ ,/ 与/ 现有/ 的/ 方法/ KLEE/ 、/ Otter/ 和/ SAGE/ 相比/ ,/ 该文/ 提出/ 的/ 方法/ 可以/ 有效/ 地/ 对/ 具有/ 较/ 多/ 分支/ 的/ 程序/ 进行/ 分析/ ,/ 当/ 测试程序/ 越大其/ 优势/ 越/ 明显/ ./ 关键词/ 软件/ 脆弱性/ ;/ 静态/ 分析/ ;/ 懒/ 符号执行/ ;/ 条件/ 约束/ 集/ 概率/ 1/ 引言/ 动态分析/ 方法/ 和/ 静态/ 分析方法/ 是/ 目前/ 软件/ 脆弱/ Page2/ 弱点/ 的/ 路径/ ,/ 误报率/ 很/ 高/ ./ 另一方面/ ,/ 静态/ 分析方法/ 不/ 具备/ 脆弱/ 点/ 的/ 自动/ 验证/ 能力/ ,/ 大部分/ 情况/ 下/ 需要/ 依赖于/ 人工/ 分析/ 确认/ 并/ 构造/ 触发/ 数据/ ,/ 不但/ 费时费力/ ,/ 而且/ 并/ 不能/ 保证/ 准确率/ ./ 动态分析/ 方法/ 的/ 基本思路/ 是/ 利用/ 测试用例/ 动态/ 执行程序/ 中/ 的/ 每个/ 分支/ ,/ 通过/ 收集/ 路径/ 信息/ 挖掘/ 程序/ 脆弱性/ ,/ 具有/ 较/ 高/ 的/ 准确率/ ,/ 目前/ 主要/ 分为/ 模糊/ 测试/ 和/ 污点/ 分析/ // 符号执行/ 两种/ 思路/ ./ 动态分析/ 方法/ 的/ 主要/ 障碍/ 在于/ 测试/ 效率/ 不高/ ,/ 虽然/ 研究/ 人员/ 对/ 之/ 进行/ 了/ 各种/ 改进/ [/ 1/ -/ 4/ ]/ ,/ 但/ 动态分析/ 方法/ 始终/ 面临/ 如何/ 提高/ 执行/ 路径/ 覆盖率/ 和/ 解决/ 路径/ 爆炸/ 等/ 问题/ ,/ 所/ 需/ 时间/ 复杂度/ 和/ 空间/ 复杂度/ 往往/ 与/ 被/ 检测/ 的/ 程序代码/ 量/ 呈/ 指数/ 增长/ 的/ 关系/ ,/ 对于/ 较/ 大规模/ 的/ 软件/ 显得/ 力不从心/ ./ 动态/ 测试/ 和/ 静态/ 分析/ 在/ 很大/ 程度/ 上/ 具有/ 互补性/ ./ 对/ 前者/ 而言/ ,/ 只有/ 能/ 覆盖/ 脆弱性/ 所在/ 语句/ 的/ 测试/ 输入/ 才/ 是/ 有/ 意义/ 的/ ,/ 如能/ 获取/ 程序/ 中/ 潜在/ 脆弱/ 点/ 的/ 类型/ 和/ 位置/ ,/ 就/ 能/ 在/ 不/ 损害/ 脆弱性/ 发现/ 能力/ 的/ 前提/ 下/ ,/ 通过/ 避免/ 生成/ 和/ 执行/ 无效/ 的/ 输入/ 来/ 降低/ 测试/ 开销/ ./ 而/ 静态/ 分析方法/ 虽然/ 误报率/ 高/ ,/ 但/ 能/ 提取/ 程序/ 中/ 潜在/ 脆弱/ 语句/ 的/ 位置/ 和/ 类型信息/ ,/ 如果/ 能/ 有效/ 地/ 利用/ 静态/ 分析/ 的/ 结果/ 来/ 指导/ 动态/ 测试/ ,/ 将/ 带来/ 两个/ 方面/ 的/ 优势/ :/ 一方面/ ,/ 静态/ 分析/ 过程/ 能/ 提供/ 目标/ 脆弱/ 点集/ 和/ 附加/ 的/ 信息/ ,/ 提高/ 动态/ 测试/ 的/ 针对性/ 和/ 有效性/ ,/ 另一方面/ ,/ 动态/ 测试/ 能/ 更/ 准确/ 地/ 验证/ 脆弱/ 点/ 是否/ 真正/ 存在/ 并/ 有效/ 定位/ ,/ 弥补/ 静态/ 测试方法/ 虚报/ 率过/ 高/ 的/ 缺陷/ ./ 针对/ 上述/ 现状/ ,/ 本文/ 设计/ 了/ 一种/ 动/ 静态/ 分析/ 结合/ 的/ 脆弱性/ 挖掘/ 框架/ ,/ 先/ 通过/ 静态/ 分析/ 获取/ 疑似/ 脆弱/ 点集/ ,/ 再/ 计算/ 能/ 到达/ 疑似/ 脆弱/ 点集/ 的/ 可达/ 数据包/ ,/ 如果/ 有解/ ,/ 则/ 确认/ 了/ 该/ 脆弱/ 点/ 的/ 可/ 触发/ 性/ ,/ 同时/ 自动/ 生成/ 了/ 可/ 触发/ 该/ 脆弱/ 点/ 的/ 输入/ 数据/ ,/ 如图/ 1/ 所示/ ./ 基于/ 该/ 框架/ ,/ 本文/ 提出/ 了/ 基于/ 脆弱/ 点集/ 制导/ 的/ 可达/ 数据包/ 计算/ 模型/ VTsolver/ ,/ 该/ 模型/ 结合/ 动态/ 符号执行/ 和/ 静态/ 分析/ 的/ 优点/ ,/ 实现/ 计算/ 脆弱/ 点/ 可达/ 数据包/ 的/ 自动化/ ./ VTsolver/ 模型/ 包含/ 了/ 本文/ 提出/ 的/ 懒/ 符号执行/ 、/ 约束条件/ 集/ 概率/ 指导/ 等/ 方法/ ,/ 能够/ 有效/ 地/ 缓解/ 路径/ 爆炸/ 、/ 虚报/ 率过/ 高等/ 问题/ ./ 其/ 基本/ 思想/ 是/ :/ 先/ 通过/ 静态/ 分析/ 获取/ 疑似/ 脆弱/ 点集/ ,/ 并/ 计算/ 提取/ 路径/ 概率/ 、/ 路径/ 长度/ 和/ 可达/ 路径/ 数量/ 等/ 指导性/ 参数/ ,/ 然后/ 利用/ 可/ 达/ 数据包/ 计算技术/ 获得/ 能/ 到达/ 脆弱/ 点/ 的/ 数据包/ ,/ 在/ 可达/ 数据包/ 计算/ 过程/ 中/ ,/ 之前/ 提取/ 的/ 路径/ 概率/ 、/ 路径/ 长度/ 和/ 可达/ 路径/ 数量/ 等/ 信息/ 用于/ 反馈/ 指导/ 路径/ 搜索/ ./ 对/ 符号执行/ 过程/ 中/ 的/ 循环/ 组合/ 爆炸/ 问题/ ,/ VTsolver/ 模型/ 提出/ 的/ 懒/ 符号执行/ 的/ 思想/ 予以/ 有效/ 缓解/ ./ VTsolver/ 模型/ 在/ 进行/ 动态/ 符号执行/ 的/ 同时/ 搜集/ 执行/ 路径/ 对应/ 的/ 路径/ 约束条件/ ,/ 当/ 确定/ 到达/ 脆弱/ 点后/ ,/ 通过/ 求取/ 对应/ 执行/ 路径/ 的/ 路径/ 条件/ ,/ 可以/ 得到/ 该/ 执行/ 路径/ 上/ 的/ 脆弱/ 点/ 数据包/ ./ 本文/ 第/ 2/ 节/ 介绍/ 目前/ 国内外/ 在/ 脆弱/ 点/ 可达/ 数据包/ 计算技术/ 方面/ 的/ 相关/ 工作/ ;/ 第/ 3/ 节/ 详细描述/ 基于/ 懒/ 符号执行/ 的/ 路径/ 求解/ 算法/ ;/ 第/ 4/ 节/ 通过/ 实验/ 将/ 基于/ 懒/ 符号执行/ 的/ 路径/ 求解/ 算法/ 与/ 目前/ 比较/ 主流/ 的/ 符号执行/ 工具/ KLEE/ ,/ Otter/ ,/ SAGE/ 进行/ 了/ 性能/ 比较/ ;/ 第/ 5/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 相关/ 工作/ 基于/ 制导/ 的/ 脆弱/ 点/ 可达/ 数据包/ 计算技术/ 是/ 最近/ 几年/ 才/ 发展/ 起来/ 的/ 软件/ 脆弱性/ 分析/ 技术/ ./ 早期/ 研究/ 人员/ 在/ 模糊/ 测试/ 中/ 引入/ 制导/ 思想/ ,/ 用来/ 排除/ 无用/ 路径/ ,/ 解决/ 覆盖率/ 问题/ [/ 1/ ,/ 5/ -/ 6/ ]/ ./ 符号执行/ 技术/ 取得/ 进步/ 之后/ ,/ 制导/ 检测/ 思想/ 应用/ 到/ 符号执行/ 中/ 用于/ 计算/ 能够/ 到达/ 脆弱/ 点/ 的/ 数据包/ ,/ 以/ 提高/ 路径/ 搜索/ 的/ 准确性/ ./ 2011/ 年/ 崔展/ 齐/ 等/ 人/ [/ 7/ ]/ 提出/ 了/ 一种/ 目标/ 制导/ 的/ 混合/ 执行/ 测试方法/ ,/ 利用/ 目标/ 脆弱/ 点/ 的/ 可达性/ 静态/ 信息/ 来/ 指导/ 符号执行/ ./ 同年/ Ma/ 等/ 人/ [/ 8/ ]/ 提出/ 了/ 3/ 种/ 脆弱/ 点/ 可达/ 数据包/ 计算/ 算法/ :/ 最/ 短距离/ 符号执行/ (/ Shortest/ -/ DistanceSymbolicExecution/ ,/ SDSE/ )/ ,/ 调用/ 链后/ 向/ 符号执行/ (/ Call/ -/ Chain/ -/ BackwardSymbolicExecution/ ,/ CCBSE/ )/ 和/ 混合/ 调用/ 链后/ 向/ 符号执行/ (/ MixedCall/ -/ Chain/ -/ BackwardSymbolicExecution/ ,/ Mix/ -/ CCBSE/ )/ ./ SDSE/ 、/ CCBSE/ 和/ Mix/ -/ CCBSE/ 这/ 3/ 种/ 算法/ 在/ 路径/ 选择/ 策略/ 时/ 利用/ 的/ 都/ 是/ 最/ 短/ 路径/ 优先/ 思想/ ,/ 其中/ ,/ SDSE/ 算法/ 是/ 利用/ 当前/ 节点/ 和/ 脆弱/ 点/ 之间/ 的/ 最/ 短/ 路径/ ,/ CCBSE/ 利用/ 的/ 是/ 当前/ 节点/ 和/ 程序执行/ 入口/ 点/ 之间/ 的/ 最/ 短/ 路径/ ,/ Mix/ -/ CCBSE/ 利用/ 的/ 是/ 两个/ 当前/ 节点/ Page3/ (/ 初始/ 的/ 两个/ 当前/ 节点/ 分别/ 是/ 程序/ 入口/ 和/ 目标/ 脆弱/ 点/ )/ 之间/ 的/ 最/ 短/ 路径/ ./ 上述/ 算法/ 的/ 主要/ 问题/ 在于/ ,/ 如果/ 利用/ 最短/ 路径/ 选择/ 策略/ 导向/ 的/ 后续/ 搜索/ 中/ 约束/ 集/ 不可/ 解/ 或/ 路径/ 不可/ 达/ ,/ 则/ 符号执行/ 引擎/ 将/ 浪费/ 大量/ 时间/ 在/ 无效/ 的/ 路径/ 上/ ./ 2012/ 年/ Chen/ 等/ 人/ [/ 9/ ]/ 利用/ 动态/ 符号执行/ 得到/ 的/ 控制流/ 图/ 信息/ ,/ 采用/ 带/ 有限/ 状态机/ 的/ 扩展/ 程序/ 行为/ 模型/ (/ ExtendedProgramBehaviormodelwithFinite/ -/ StateMachinecontrolledparameters/ ,/ EPBFSM/ )/ 指导/ 模糊/ 测试/ 的/ 执行/ 路径/ ./ 同年/ Pak/ [/ 10/ ]/ 做/ 了/ 类似/ 工作/ ,/ 但/ 其/ 对/ 非线性/ 约束/ 不能/ 很/ 好/ 处理/ ,/ 不能/ 准确/ 产生/ 非线性/ 约束/ 中/ 符号/ 变量/ 的/ 范围/ 值/ ,/ 另外/ 由于/ 要/ 处理/ 模糊/ 测试/ 和/ 符号执行/ 的/ 衔接/ ,/ 因此/ 效率/ 不高/ ,/ 内存/ 消耗/ 较大/ ./ 目前/ 的/ 符号执行/ 方法/ 还/ 存在/ 一个/ 共同/ 的/ 问题/ ,/ 即/ 遇到/ 多重/ 循环/ 代码/ 时/ ,/ 会/ 遭遇/ 严重/ 的/ 路径/ 组合/ 爆炸/ ,/ 并/ 有/ 很大/ 可能/ 漏报/ 循环/ 内/ 的/ 越界/ 脆弱性/ ,/ 当前/ 循环/ 难题/ 已/ 作为/ 符号执行/ 研究/ 中/ 亟待解决/ 的/ 挑战性/ 问题/ 被/ 提出/ ,/ 本文/ 提出/ 的/ 懒/ 符号执行/ 方法/ 较/ 好/ 地/ 缓解/ 了/ 该/ 问题/ ./ 3VTsolver/ 模型/ 目标/ 制导/ 的/ 符号执行/ 方法/ 主要/ 解决/ 的/ 问题/ 是/ :/ 在/ 给定/ 脆弱/ 点/ 位置/ 的/ 条件/ 下/ ,/ 如何/ 找到/ 一条/ 可/ 达/ 路径/ 触发/ 给定/ 脆弱/ 点/ 并/ 得到/ 相应/ 的/ 测试/ 数据包/ ./ 程序/ 的/ 执行/ 可以/ 用/ 状态/ 进行/ 描述/ ,/ 脆弱/ 点/ 的/ 可达性/ 可以/ 通过/ 检查/ 当前/ 状态/ 是否/ 满足/ 特定/ 的/ 性质/ 来/ 进行/ 判断/ ./ 利用/ 符号执行/ 引擎/ ,/ 目标/ 制导/ 的/ 符号执行/ 技术/ 能/ 较/ 好地解决/ 脆弱/ 点/ 可达/ 数据包/ 的/ 计算/ 问题/ ./ 符号执行/ 引擎/ 是/ VTsolver/ 模型/ 中/ 的/ 一个/ 完备/ 执行/ 系统/ ,/ 只要/ 是/ 它/ 能/ 执行/ 的/ 路径/ 都/ 等价/ 于/ 数据包/ 可达/ ./ 符号执行/ 引擎/ 同时/ 使用/ 具体/ 参数/ 和/ 符号/ 参数/ 驱动程序/ 运行/ ,/ 符号/ 参数/ 可以/ 对/ 基本/ 数据类型/ ,/ 字符串/ 等/ 进行/ 抽象/ ./ 当/ 符号执行/ 引擎/ 执行/ 时/ 遇到/ 符号化/ 的/ 条件/ 语句/ 时/ ,/ 将/ 调用/ 可/ 满足/ 性模/ 理论/ (/ SatisfiabilityModuloTheories/ ,/ SMT/ )/ 求解/ 器/ STP/ (/ SimpleTheoremProver/ )/ 对/ 搜集/ 到/ 的/ 约束/ 集/ 进行/ 求解/ ,/ 判断/ 分支/ 是否/ 可/ 达/ ,/ 以及/ 有/ 多少/ 分支/ 是/ 可达/ 的/ ,/ 如果/ 有/ 多条/ 路径/ 可/ 达/ ,/ 则/ 需要/ 把/ 这些/ 状态/ 保留/ 下来/ ,/ 用于/ 路径/ 的/ 遍历/ ./ VTsolver/ 模型/ 应用/ 最短/ 路径/ 、/ 条件/ 约束/ 集/ 概率/ 和/ 可达/ 路径/ 数量/ 3/ 种/ 关键/ 静态/ 信息/ 制导/ 符号执行/ ,/ 提高/ 了/ 路径/ 选择/ 的/ 准确性/ ,/ 能/ 较/ 快/ 的/ 到达/ 脆弱/ 点/ ,/ 并/ 得到/ 相应/ 的/ 数据包/ ./ 特别/ 地/ ,/ 针对/ 目前/ 循环体/ 符号执行/ 时间/ 开销/ 过大/ 的/ 问题/ ,/ VTsolver/ 提出/ 了/ 一种/ 懒/ 符号执行/ 方法/ ,/ 在/ “/ 必要/ 时/ ”/ 才/ 对/ 循环体/ 进行/ 符号执行/ ,/ 极大/ 减少/ 了/ 无效/ 的/ 符号执行/ 运算/ 开销/ ./ 懒/ 符号执行/ 方法/ 主要/ 包含/ 基于/ 懒/ 符号执行/ 的/ 前/ 向/ 路径/ 求解/ 算法/ (/ FrontwardtracesolvealgorithmbasedonLazySymbolicExecution/ ,/ FLSE/ )/ ,/ 基于/ 懒/ 符号执行/ 的/ 后/ 向/ 路径/ 求解/ 算法/ (/ BackwardtracesolvealgorithmbasedonLazySymbolicExecution/ ,/ BLSE/ )/ ,/ 基于/ 懒/ 符号执行/ 的/ 混合/ 路径/ 求解/ 算法/ (/ HybridtracesolvealgorithmbasedonLazySymbolicExecution/ ,/ HLSE/ )/ ./ 3.1/ 基本/ 定义/ 定义/ 1/ (/ 节点/ 距离/ )/ ./ 过程/ 间/ 控制流/ 图/ (/ Inter/ -/ proceduralControlFlowGraph/ ,/ ICFG/ )/ 中/ 从/ 当前/ 结点/ 到/ 脆弱/ 点/ 路径/ 内/ 的/ 边/ 数目/ ,/ 称为/ 当前/ 结点/ 和/ 脆弱/ 点/ 之间/ 的/ 距离/ ./ 定义/ 2/ (/ 节点/ 可达性/ )/ ./ 对于/ ICFG/ 中/ 任意/ 两/ 节点/ n1/ 与/ nk/ ,/ 满足/ 可/ 达/ 条件/ 当且/ 仅/ 当/ :/ 对于/ i/ ,/ 0/ </ i/ </ k/ ,/ ni/ ∈/ D/ -/ Pred/ (/ ni/ +/ 1/ )/ ,/ 存在/ 一条/ 路径/ path/ =/ 〈/ n1/ ,/ n2/ ,/ …/ ,/ nk/ 〉/ ,/ 其中/ D/ -/ Pred/ (/ ni/ +/ 1/ )/ 表示/ 节点/ ni/ +/ 1/ 的/ 直接/ 前驱/ 集合/ ./ 定义/ 3/ (/ 条件/ 约束/ 集/ 概率/ )/ ./ 条件/ 约束/ 集/ 概率/ 定义/ 为/ 条件/ 约束/ 集/ 的/ 解集/ 数量/ 与/ 解集/ 空间/ 基数/ 的/ 比率/ ./ 3.2/ 模型/ 框架/ VTsolver/ 模型/ 的/ 基本/ 流程/ 如图/ 2/ 所示/ ./ Page4/ 不管/ 是/ 高级/ 语言/ 还是/ 二进制/ 语言/ ,/ 都/ 会/ 隐含/ 各种类型/ 和/ 内存/ 访问/ 等/ 信息/ ,/ 有些/ 情况/ 下/ 存在/ 二义性/ ,/ 如/ C语言/ 中/ 指针/ 与/ 数组/ 的/ 定义/ ,/ 形式/ 上/ 可能/ 完全相同/ ,/ 但/ 具有/ 不同/ 的/ 内存/ 访问/ 模式/ ./ 二义性/ 的/ 存在/ 使/ 代码/ 不够/ 直观/ ,/ 不/ 便于/ 自动化/ 分析/ ,/ 需要/ 转换成/ 中间/ 语言/ ,/ 并且/ 转换/ 后/ 的/ 中间/ 语言/ 不能/ 丢失/ 源语言/ 中/ 的/ 类型/ 等/ 重要/ 信息/ ./ 本文/ 使用/ CIL/ 中间/ 语言/ ,/ CIL/ 是/ 一种/ 源到/ 源/ (/ 可逆/ )/ 的/ 中间/ 语言/ ,/ 比较/ 适合/ 源代码/ 分析/ ./ 第/ 1/ 步/ ./ 先/ 将/ 程序代码/ 转换成/ 中间/ 语言/ 代码/ CIL/ 表示/ 形式/ ,/ 转换/ 前/ 疑似/ 脆弱/ 点集/ 在/ 程序代码/ 中/ 已经/ 被/ 标记/ ;/ 第/ 2/ 步/ ./ 在/ 转换/ 后/ 的/ CIL/ 中间/ 语言/ 表示/ 的/ 基础/ 上/ 提取/ 条件/ 约束/ 集/ 概率/ 、/ 路径/ 长度/ 和/ 路径/ 数量/ 等/ 静态/ 信息/ ;/ 图/ 3VTsolver/ 模型/ 的/ 功能模块/ 划分/ 前端/ 的/ 脆弱/ 点集/ 标记/ 模块/ 将/ 脆弱/ 点集/ 在/ 程序/ 中/ 标记/ 出来/ 作为/ 后/ 端/ 静态/ 分析/ 和/ 懒/ 符号执行/ 等/ 模块/ 的/ 基本/ 输入/ ./ CIL/ 中间/ 语言/ 转换/ 模块/ 将/ 目标/ 源代码/ 转换/ 为/ CIL/ 中间/ 语言/ ,/ 后/ 端/ 执行/ 均/ 基于/ CIL/ 中间/ 语言/ 进行/ ,/ 这样/ 不仅/ 提高/ 了/ 模型/ 的/ 扩展/ 能力/ ,/ 并且/ 能够/ 实现/ 对/ 多种/ 程序设计/ 语言/ 的/ 支持/ ./ CIL/ 左值/ 表达式/ 通过/ 〈/ 内存地址/ ,/ 对象/ 类型/ 〉/ 二元/ 属性/ 组来/ 进行/ 表示/ ,/ 而/ 高级/ 语言/ 中/ 只用/ 〈/ 内存地址/ 〉/ 表示/ 左值/ 表达式/ ,/ 导致/ 同一个/ 语句/ 会/ 产生/ 二义性/ ,/ CIL/ 中间/ 语言/ 可以/ 消除/ 这种/ 二义性/ ./ VTsolver/ 模型/ 后/ 端的/ 路径/ 调度/ 模块/ 主要/ 综合/ 3/ 种/ 决策/ 因素/ 对/ 路径/ 进行/ 决策/ ,/ 并/ 把/ 下/ 一条/ 要/ 执行/ 的/ 路径/ 信息/ 传递/ 给/ 懒/ 符号执行/ 模块/ ./ 懒/ 符号执行/ 模块/ 是/ VTsolver/ 模型/ 的/ 核心/ 模块/ 之一/ ,/ 主要/ 包括/ 3/ 个/ 功能/ :/ (/ 1/ )/ 循环/ 结构/ 判断/ ./ 对/ 需要/ 进行/ 懒/ 符号执行/ 的/ 语句/ 或/ 过程/ 进行/ 判断/ ,/ 由于/ 循环/ 结构/ 尤其/ 是/ 多层/ 循环/ 是/ 影响/ 符号执行/ 效率/ 的/ 重要/ 因素/ [/ 11/ ]/ ,/ 为了/ 简化/ 其/ 第/ 3/ 步/ ./ 初始化/ 懒/ 符号执行/ 调度/ 器/ ,/ 并/ 输入/ 条件/ 约束/ 集/ 概率/ ,/ 路径/ 长度/ 和/ 路径/ 数量/ 3/ 种/ 调度/ 因素/ ,/ 调度/ 器/ 开始/ 工作/ 并/ 根据/ 调度/ 策略/ 选择/ 分支/ 路径/ 供懒/ 符号执行/ 引擎/ 执行/ ;/ 第/ 4/ 步/ ./ 懒/ 符号执行/ 引擎/ 执行/ 路径/ 并/ 搜集/ 路径/ 对应/ 的/ 约束条件/ ;/ 第/ 5/ 步/ ./ 利用/ 符号/ 约束/ 求解/ 器/ 求解/ 约束条件/ 得到/ 可/ 达/ 数据包/ ./ VTsolver/ 的/ 功能模块/ 划分/ 如图/ 3/ 所示/ ,/ 整个/ 模型/ 可以/ 分为/ 前端/ 和/ 后/ 端/ 两个/ 部分/ ,/ 前端/ 主要/ 由/ 脆弱/ 点集/ 标记/ 模块/ 和/ CIL/ 中间/ 语言/ 转换/ 模块/ 组成/ ./ 后端/ 主要/ 由/ 路径/ 调度/ (/ 路径/ 策略/ 选择/ )/ 模块/ 、/ 懒/ 符号执行/ 模块/ (/ LazySymbolicExecution/ ,/ LSE/ )/ 、/ 静态/ 分析/ 模块/ 和/ STP/ 符号/ 约束条件/ 求解/ 模块/ 组成/ ./ 中/ 的/ 判断/ 规则/ ,/ 懒/ 符号执行/ 只/ 对/ 涉及/ 符号/ 实例/ 化/ 的/ 循环/ 结构/ 进行/ 处理/ ;/ (/ 2/ )/ 符号执行/ ./ 对/ 确定/ 的/ 语句/ 进行/ 符号执行/ ,/ 其中/ 包括/ 实例/ 化/ 的/ 具体/ 程序执行/ 和/ 符号化/ 的/ 程序/ 模拟/ 执行/ ;/ (/ 3/ )/ 路径/ 约束条件/ 管理/ ./ 通过/ 将/ 新/ 收集/ 的/ 符号/ 约束/ 加入/ 到/ 已有/ 的/ 符号/ 约束/ 集/ ,/ 将/ 得到/ 与/ 输入/ 相关/ 的/ 新/ 变量/ 以及/ 关系/ 表达式/ ,/ 同时/ 将/ 懒/ 符号执行/ 中/ 自主/ 选择/ 的/ 新/ 路径/ 反馈/ 给/ 路径/ 调度/ 模块/ ./ FLSE/ 算法/ 、/ BLSE/ 算法/ 和/ HLSE/ 算法/ 在/ 以上/ 所/ 描述/ 的/ 功能模块/ 基础/ 上/ 进行/ 实现/ ,/ 其/ 不同之处/ 体现/ 在/ 符号执行/ 的/ 方向/ 和/ 策略/ 上/ ,/ FLSE/ 算法/ 是从/ 程序/ 的/ 执行/ 入口/ 点/ 开始/ 搜索/ 脆弱/ 点/ ,/ 最后/ 搜索/ 到/ 整条/ 执行/ 路径/ ./ BLSE/ 算法/ 是从/ 脆弱/ 点/ 位置/ 开始/ 搜索/ 直/ 到达/ 程序执行/ 入口/ ,/ 逆向/ 得到/ 整条/ 执行/ 路径/ ,/ HLSE/ 算法/ 是从/ 程序/ 入口/ 点/ 和/ 脆弱/ 点/ 同时/ 开始/ 并行/ 搜索/ ,/ 最后/ 把/ 前段/ 和/ 后/ 段/ 相连/ 得到/ 整条/ 执行/ 路径/ ./ 由于/ 懒/ 符号执行/ 算法/ 和/ 条件/ 约束/ 集/ 概率/ 计算/ 是/ Page5FLSE/ 算法/ 、/ BLSE/ 算法/ 和/ HLSE/ 算法/ 的/ 重要/ 子/ 算法/ ,/ 下面/ 先/ 介绍/ 懒/ 符号执行/ 算法/ 和/ 条件/ 约束/ 集/ 概率/ 计算/ ,/ 然后/ 再/ 介绍/ FLSE/ 算法/ 、/ BLSE/ 算法/ 和/ HLSE/ 算法/ ./ 3.3/ 懒/ 符号执行/ 算法/ 懒/ 符号执行/ 算法/ 的/ 基本/ 思想/ 是/ 当/ 符号执行/ 引擎/ 遇到/ 循环/ 分支/ 或/ 多重/ 循环/ 分支/ 时/ ,/ 将/ 循环/ 变量/ 符号化/ ,/ 推迟/ 符号/ 变量/ 的/ 实例/ 化/ ,/ 即/ :/ 先对/ 循环体/ 进行/ 符号执行/ ,/ 再/ 根据/ 分支/ 条件/ 与/ 循环/ 变量/ 、/ 符号/ 变量/ 的/ 关系/ 回溯/ 执行/ 循环/ 结构/ ,/ 否则/ 按/ 原有/ 序列/ 执行/ ./ 将/ 循环/ 计数/ 变量/ 符号化/ ,/ 而/ 不是/ 按照/ 通常/ 的/ 做法/ 实例/ 化/ 循环/ 计数/ 变量/ 并/ 执行/ 循环/ 结构/ 体/ ,/ 这种/ 处理/ 方法/ 能够/ 避免/ 大量/ 循环/ 分支/ 路径/ 的/ 产生/ ,/ 另一方面/ ,/ 通过/ 对/ 循环/ 结构/ 体/ 的/ 考察/ 能/ 更加/ 精确/ 地/ 求解/ 出/ 循环/ 计数/ 变量/ 的/ 可解/ 范围/ ,/ 从而/ 指导/ 符号执行/ 的/ 路径/ 选择/ ,/ 使得/ 执行/ 更加/ 有效/ ./ 在/ 进行/ 懒/ 符号执行/ 之前/ ,/ 相关/ 静态/ 信息/ 已经/ 计算/ 完成/ ,/ 比如/ 可达性/ 信息/ ,/ 因此/ 在/ 描述/ 算法/ 时/ 不再/ 赘述/ 静态/ 分析/ 方面/ 的/ 行为/ ./ 懒/ 符号执行/ 过程/ 如/ 算法/ 1/ 和/ 算法/ 2/ ./ 算法/ 1/ ./ 懒/ 符号执行/ 算法/ LazySymbolicExecute/ ./ 输入/ :/ l/ :/ 表示/ 第/ l/ 行/ 语句/ 输出/ :/ δ/ :/ 新/ 路径/ 条件/ 约束/ 集/ 1/ ./ while/ ~/ branch/ (/ l/ )/ do/ // // 判定/ 是否是/ 分支/ 2/ ./ m/ ←/ m/ ∪/ m/ (/ v/ ,/ e/ )/ // / 其中/ v/ ,/ e/ 为/ l/ 中/ 的/ 变量/ ,/ v/ 为/ 3/ ./ l/ ←/ next/ (/ l/ )/ // // 读下/ 一条/ 语句/ 4/ ./ endwhile5/ ./ if/ ~/ isloop/ (/ l/ )/ then/ // // 判断/ 是否是/ 循环/ 语句/ 6/ ./ c/ ←/ m/ (/ cond/ (/ l/ )/ )/ 7/ ./ ifSAT/ (/ δ/ ∧/ c/ )/ then/ // / SAT/ 为/ 约束/ 求解/ 判定/ 器/ / // 8/ ./ // / 如有/ 解则/ 符号执行/ 语句/ l/ ,/ 否则/ 符号/ 执/ LazySymbolicExecute/ (/ target/ (/ l/ )/ ,/ δ/ ∧/ c/ ,/ m/ )/ 9/ ./ elseifSAT/ (/ δ/ ∧/ ~/ c/ )/ then10/ ./ LazySymbolicExecute/ (/ next/ (/ l/ )/ ,/ δ/ ∧/ ~/ c/ ,/ m/ )/ 11/ ./ ENDIF12/ ./ ELSE13/ ./ // // 是/ 循环/ 语句/ ,/ 调用/ 懒/ 符号执行/ 引擎/ 函数/ LazySymbolicEngine/ (/ l/ ,/ δ/ ,/ m/ )/ 14/ ./ LazySymbolicExecute/ (/ next/ (/ l/ )/ ,/ δ/ ∧/ ~/ c/ ,/ m/ )/ 15/ ./ ENDIF/ 算法/ 2/ ./ 循环体/ 执行/ 算法/ LazySymbolicEngine/ ./ 输入/ :/ l/ :/ 表示/ 第/ l/ 行/ 语句/ 输出/ :/ δ/ :/ 新/ 路径/ 条件/ 约束/ 集/ 1/ ./ symbolic/ (/ i/ )/ // // 将/ 循环/ 变量/ i/ 符号化/ 2/ ./ ifisloop/ _/ end/ (/ l/ )/ then/ // // 判断/ 是否/ 循环/ 结构/ 结束/ 3/ ./ RETURN/ δ/ // // 返回/ 更新/ 后/ 的/ 约束/ 集/ 4/ ./ ELSE5/ ./ LazySymbolicExecute/ (/ target/ (/ l/ )/ ,/ δ/ ∧/ c/ ,/ m/ )/ 6/ ./ ENDIFl/ 表示/ 第/ l/ 行/ 语句/ ,/ δ/ 表示/ 路径/ 条件/ 约束/ 集合/ ,/ m/ 表示/ 关于/ 符号/ 变量/ 的/ 映射/ 集合/ ,/ branch/ (/ l/ )/ 判断/ l/ 是否是/ 分支/ 语句/ ,/ 对/ 顺序/ 执行/ 语句/ l/ :/ v/ =/ e/ ,/ next/ (/ l/ )/ 表示/ 下/ 一条/ 执行/ 语句/ ,/ m/ (/ v/ ,/ e/ )/ 表示/ 新/ 发现/ 的/ 映射/ 关系/ ./ 对/ 分支/ 语句/ l/ ,/ target/ (/ l/ )/ 表示/ 跳转/ 的/ 目标/ 语句/ ,/ isloop/ (/ l/ )/ 判断/ l/ 是否是/ 循环/ 语句/ ,/ cond/ (/ l/ )/ 表示/ 语句/ l/ 中/ 的/ 约束条件/ ,/ c/ 为/ 临时/ 变量/ ,/ 保存/ cond/ (/ l/ )/ 的/ 值/ ,/ LazySymbolicEngine/ 对/ 循环/ 结构/ 进行/ 懒/ 符号执行/ ./ isloop/ _/ end/ (/ l/ )/ 表示/ 判断/ 语句/ l/ 是否/ 为/ 循环体/ 结束/ ./ 算法/ 1/ 中/ 第/ 1/ ~/ 4/ 行/ 判断/ 当前/ 执行/ 的/ 语句/ 是否/ 为/ 分支/ 语句/ 并/ 更新/ 符号/ 变量/ 映射/ ,/ 第/ 5/ ~/ 12/ 行/ 判断/ 分支/ 语句/ 是否/ 为/ 循环/ 语句/ ,/ 如果/ 是/ 循环/ 语句/ ,/ 则/ 进行/ 懒/ 符号执行/ ;/ 否则/ 搜集/ 约束条件/ ,/ 并/ 利用/ SAT/ 求解/ 器来/ 判断/ 路径/ 是否/ 可行/ ,/ 第/ 13/ 行/ 表示/ 搜集/ 关于/ 循环/ 变量/ 的/ 可解/ 约束条件/ ./ 第/ 14/ 行/ 执行/ 循环/ 结构/ ./ 算法/ 2/ 表示/ 对/ 循环/ 结构/ 体/ 进行/ 符号执行/ ./ 第/ 1/ 行对/ 循环/ 变量/ i/ 进行/ 符号化/ ,/ 第/ 2/ 行/ 判断/ 是否是/ 循环/ 结构/ 体/ 结束/ ,/ 如果/ 是/ 循环/ 结构/ 体/ 结束/ ,/ 则/ 返回/ 包含/ 关于/ i/ 的/ 约束/ 集/ δ/ ,/ 第/ 5/ 行/ 搜集/ 结构/ 体/ 约束/ 信息/ ./ 懒/ 符号执行/ 可以/ 有效/ 解决/ 执行/ 循环/ 的/ 盲目性/ 问题/ ./ 例如/ 考察/ 以下/ 一段/ 代码/ :/ 1/ ./ symbolic/ (/ m/ )/ ;/ // // 变量/ m/ 符号化/ 2/ ./ symbolic/ (/ n/ )/ ;/ // // 变量/ n/ 符号化/ 3/ ./ for/ (/ i/ =/ 0/ ;/ i/ </ MAXLOOPNUM1/ ;/ i/ ++/ )/ 4/ ./ {/ 5/ ./ for/ (/ j/ =/ 0/ ;/ j/ </ MAXLOOPNUM2/ ;/ j/ ++/ )/ 6/ ./ {/ 7/ ./ statementm/ (/ m/ ,/ i/ ,/ j/ )/ ;/ // // 变量/ m/ 的/ 赋值/ 依赖/ i/ ,/ j8/ ./ statementn/ (/ n/ ,/ i/ ,/ j/ )/ ;/ // // 变量/ n/ 的/ 赋值/ 依赖/ i/ ,/ j9/ ./ …/ 10/ ./ if/ (/ condition/ (/ m/ ,/ n/ )/ )/ // // 条件/ 分支/ 11/ ./ g/ (/ m/ ,/ n/ )/ ;/ 12/ ./ …/ 13/ ./ }/ 14/ ./ }/ Page6/ 第/ 1/ 、/ 2/ 行/ 代码/ 标记变量/ m/ 、/ n/ 为/ 符号/ 变量/ ,/ 第/ 7/ 、/ 8/ 行/ 代码/ 说明/ m/ 、/ n/ 的/ 值/ 由/ i/ 、/ j/ 决定/ ,/ 对/ 符号/ 变量/ m/ 、/ n/ 赋值/ 实例/ 化后/ ,/ 调用函数/ g/ (/ m/ ,/ n/ )/ ./ 如/ 函数/ g/ (/ m/ ,/ n/ )/ 可/ 到达/ 脆弱/ 点/ ,/ 一般/ 的/ 符号执行/ 算法/ 将/ i/ ,/ j/ 实例/ 化/ 并/ 进入/ 到/ 循环/ 结构/ 体/ 进行/ 执行/ ,/ 当/ 遇到/ 第/ 10/ 行时/ ,/ 如果/ 不/ 满足条件/ 则/ 返回/ 继续/ 尝试/ 新/ 的/ 循环/ 值/ ./ 懒/ 符号执行/ 算法/ 则/ 先/ 符号执行/ g/ (/ m/ ,/ n/ )/ ,/ 确定/ 可/ 到达/ 脆弱/ 点/ 的/ m/ 、/ n/ 的/ 约束条件/ ,/ 然后/ 根据/ 第/ 7/ 、/ 8/ 行列/ 出/ m/ 、/ n/ 和/ i/ 、/ j/ 的/ 函数/ 关系/ 确定/ i/ 、/ j/ 的/ 约束条件/ ./ 这样/ 避免/ 了/ 对/ i/ 、/ j/ 的/ 进行/ 盲目/ 的/ 符号执行/ ,/ 极大地提高/ 了/ 符号执行/ 的/ 效率/ ./ 动态/ 符号执行/ 在/ 一定/ 程度/ 上/ 解决/ 了/ 缺乏/ 测试用例/ 集/ 的/ 问题/ ,/ 但/ 由于/ 该/ 方法/ 从/ 程序/ 本身/ 出发/ ,/ 未/ 将/ 目标/ 脆弱性/ 的/ 先验/ 知识/ 作为/ 指导/ ,/ 导致/ 生成/ 和/ 执行/ 了/ 大量/ 无效/ (/ 不能/ 覆盖/ 脆弱性/ 语句/ )/ 的/ 测试/ 输入/ ,/ 浪费/ 了/ 时间/ 和/ 计算资源/ ./ 另外/ ,/ 符号执行/ 在/ 执行/ 多重/ 循环/ 程序/ 时/ ,/ 会/ 遭遇/ 严重/ 的/ 路径/ 组合/ 爆炸/ 问题/ ,/ 懒/ 符号执行/ 通过/ 推迟/ 循环/ 符号/ 变量/ 的/ 实例/ 化/ ,/ 先对/ 循环/ 结构/ 内/ 的/ 语句/ 进行/ 符号执行/ ,/ 反推/ 可/ 到达/ 脆弱/ 点/ 的/ 条件/ ,/ 然后/ 根据/ 可达性/ 条件/ 有/ 选择地/ 进行/ 符号执行/ ,/ 较/ 好/ 地/ 克服/ 了/ 这个/ 问题/ ./ 3.4/ 约束条件/ 集/ 概率/ 在/ 进行/ 符号执行/ 时/ ,/ 除/ 收集/ 约束条件/ ,/ 还/ 需要/ 收集/ 约束条件/ 集/ 概率/ ,/ 约束条件/ 集/ 概率/ 描述/ 的/ 是/ 约束条件/ 集可解/ 的/ 概率/ 有/ 多/ 大/ ,/ 约束条件/ 集/ 和/ 执行/ 路径/ 是/ 一一对应/ 的/ ,/ 因此/ 将/ 其/ 作为/ 路径/ 选择/ 的/ 一个/ 因素/ 可以/ 使得/ 所/ 选择/ 的/ 路径/ 更加/ 合理/ ./ 本文/ 通过/ 算法/ probSymCalculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ 来/ 求取/ 约束条件/ 集/ 概率/ ,/ 其中/ l/ 表示/ 代码/ 所在/ 行/ 数/ ,/ ψ/ 表示/ 当前/ 收集/ 到/ 的/ 条件/ 约束/ 集/ ,/ m/ 表示/ 关于/ 符号/ 变量/ 的/ 映射/ 集合/ ,/ p/ 表示/ ψ/ 约束/ 集/ 概率/ ./ 算法/ probSymCalculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ 的/ 具体/ 描述/ 见/ 算法/ 3/ ./ 算法/ 3/ ./ 约束条件/ 集/ 概率/ 求解/ 算法/ probSym/ -/ Calculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ ./ 输入/ :/ l/ :/ 表示/ 第/ l/ 行/ 语句/ 输出/ :/ p/ :/ 约束条件/ 集/ 概率/ 1/ ./ while/ ~/ branch/ (/ l/ )/ do2/ ./ m/ ←/ m/ (/ v/ ,/ e/ )/ 3/ ./ l/ ←/ next/ (/ l/ )/ // // 读下/ 一条/ 语句/ 4/ ./ endwhile5/ ./ c/ ←/ m/ (/ cond/ (/ l/ )/ )/ 6/ ./ ψ/ ←/ relation/ (/ ψ/ ,/ c/ )/ 7/ ./ pc/ ←/ prob/ (/ ψ/ ∧/ c/ )/ // prob/ (/ ψ/ )/ 8/ ./ probSymCalculate/ (/ target/ (/ l/ )/ ,/ ψ/ ∧/ c/ ,/ m/ ,/ p/ / pc/ )/ 9/ ./ probSymCalculate/ (/ next/ (/ l/ )/ ,/ ψ/ ∧/ ~/ c/ ,/ m/ ,/ p/ / (/ 1/ -/ pc/ )/ )/ relation/ (/ ψ/ ,/ c/ )/ 表示/ 抽取/ ψ/ 中/ 与/ c/ 相关/ 的/ 条件/ 约束/ ψ/ ,/ 设/ ψ/ 中/ 与/ c/ 独立/ 的/ 条件/ 约束/ 为/ 珔/ 独立/ ,/ c/ 与/ 珔/ 句/ ,/ 需要/ 提取/ 约束条件/ ,/ 并/ 更新/ 约束/ 集/ ψ/ ,/ 约束/ 集/ ψ/ ∧/ c/ 的/ 概率/ 可以/ 通过/ 条件/ 概率/ 来/ 进行/ 计算/ :/ Prob/ (/ ψ/ ∧/ c/ )/ =/ Prob/ (/ ψ/ )/ / Prob/ (/ c/ |/ ψ/ )/ 因为/ ψ/ =/ ψ/ ∧/ 珔/ 因为/ Prob/ (/ ψ/ ∧/ 珔/ 约束/ 集/ ψ/ ∧/ ~/ c/ 的/ 概率/ 可以/ 通过/ 条件/ 概率/ 来/ 进行/ 计算/ :/ Prob/ (/ ψ/ ∧/ ~/ c/ )/ 本文/ 使用/ LattE/ ①/ 对/ 约束/ 概率/ 进行/ 求解/ ,/ LattE/ 接受/ “/ =/ ”/ 和/ “/ / ”/ 表达式/ ,/ “/ / ”/ 和/ “/ >/ ”/ 表达式/ 可以/ 通过/ 乘以/ -/ 1/ 转换/ 为/ “/ </ ”/ 和/ “/ / ”/ 表达式/ ,/ “/ </ ”/ 可以/ 通过/ 减去/ 一个/ 常数/ 来/ 转换成/ “/ / ”/ 表达式/ ,/ 不/ 直接/ 支持/ “/ ≠/ ”/ 表达式/ ./ 约束条件/ 集/ 概率/ 通过/ 对/ 单个/ 约束条件/ 概率/ 的/ 计算/ 获得/ ,/ 求取/ 单个/ 约束条件/ 概率/ 的/ 算法/ 见/ 算法/ 4/ ./ 算法/ 4/ ./ 单个/ 约束条件/ 概率/ 求解/ 算法/ ./ probConditons/ (/ ψ/ / ψ/ 1/ ∧/ ψ/ 2/ ∧/ …/ ∧/ ψ/ n/ )/ ./ 输入/ :/ ψ/ i/ :/ 约束条件/ 输出/ :/ p/ :/ 新/ 路径/ 条件/ 约束/ 集/ 1/ ./ ConSet/ ←/ {/ ψ/ 1/ ,/ ψ/ 2/ ,/ …/ ,/ ψ/ n/ }/ ;/ 2/ ./ Vars/ ←/ {/ var/ |/ / con/ ∈/ ConSet/ ∧/ var/ ∈/ con/ }/ ;/ 3/ ./ neqConSet/ ←/ {/ con/ |/ con/ ∈/ ConSet/ ∧/ con/ / ≠/ relation/ }/ ;/ ①/ UCDavis/ ,/ Mathematics/ ./ Latteintegrale/ ./ http/ :/ // // www/ ./ Page74/ ./ lgeConSet/ ←/ Conset/ -/ neqConSet/ ;/ 5/ ./ unSet/ ←/ {/ lgeConSet/ ∧/ var/ =/ 6/ ./ num/ ←/ num/ ∧/ (/ ∧/ lgeConSet/ )/ -/ num/ ∨/ (/ ∨/ unConSet/ )/ ;/ 7/ ./ p/ ←/ pnum/ ∏/ var/ ∈/ Vars/ 为了/ 让/ LattE/ 支持/ “/ ≠/ ”/ 表达式/ ,/ 首先/ 将/ 约束条件/ 集/ ConSet/ 分解/ 为/ 两个/ 集合/ ,/ 一个/ 是/ 不/ 含/ “/ ≠/ ”/ 的/ 表达式/ 集合/ lgeConSet/ ,/ 另/ 一个/ 是/ 含/ “/ ≠/ ”/ 的/ 表达式/ 集合/ neqConSet/ ./ unSet/ 集合/ 为/ 满足/ lgeConSet/ 条件/ 约束/ ,/ 但是/ 不/ 满足/ neqConSet/ 条件/ 约束/ 的/ 约束/ 集/ ./ 考虑/ 到/ unSet/ 集合/ 中/ 元素/ 之间/ 的/ 相关性/ 问题/ ,/ 根据/ 容斥/ 原理/ ,/ 约束条件/ 集解/ 的/ 数量/ num/ ∨/ (/ ∨/ unSet/ )/ 计算公式/ 如下/ :/ num/ ∨/ (/ ∨/ unSet/ )/ =/ ∑/ 其中/ unSet/ / 表示/ unSet/ 的/ 幂集/ ,/ #/ θ/ 表示/ 集合/ θ/ 的/ 元素/ 数量/ ,/ num/ ∧/ (/ ∧/ θ/ i/ ∈/ θ/ θ/ i/ )/ 表示/ ∧/ θ/ i/ ∈/ θ/ θ/ i/ 解/ 的/ 数量/ ./ 3.5/ 基于/ 懒/ 符号执行/ 的/ 路径/ 求解/ 算法/ 3.5/ ./ 1/ 基于/ 懒/ 符号执行/ 的/ 前/ 向/ 路径/ 求解/ 算法/ SDSE/ ,/ Klee/ 等/ 系统/ 利用/ 优先/ 执行/ 最短/ 路径/ 策略/ 来/ 进行/ 脆弱/ 点/ 位置/ 的/ 前/ 向搜索/ ,/ 执行/ 的/ 策略/ 只以/ 当前/ 信息/ 即/ 最/ 短/ 路径/ 作为/ 唯一/ 决策/ 因素/ ,/ 没有/ 考虑/ 约束/ 集/ 概率/ 和/ 后续/ 路径/ 数量/ 等/ 关键因素/ ,/ 决策/ 因素/ 过于/ 简单/ ,/ 因此/ 当/ 最/ 短/ 路径/ 对应/ 的/ 约束/ 集无解/ 时/ ,/ 算法/ 必须/ 回溯到/ 上/ 一个/ 分支/ 节点/ ,/ 否则/ 浪费/ 太/ 多/ 时间/ 在/ 无解/ 的/ 路径/ 上/ ./ 基于/ 懒/ 符号执行/ 的/ 前/ 向/ 路径/ 求解/ 算法/ (/ FLSE/ )/ 是/ 一种/ 综合/ 考虑/ 了/ 最/ 短/ 路径/ 、/ 约束/ 概率/ 和/ 可达/ 路径/ 数量/ 3/ 种/ 关键因素/ 对下/ 一条/ 执行/ 路径/ 进行/ 选择/ ,/ 并/ 对/ 选择/ 路径/ 进行/ 懒/ 符号执行/ 的/ 目标/ 制导/ 脆弱/ 点/ 可达/ 数据包/ 计算/ 法/ ./ FLSE/ 算法/ 在/ 决策/ 出/ 下/ 一条/ 执行/ 分支/ 后/ ,/ 会先/ 判断/ 下/ 一条/ 执行/ 分支/ 是否是/ 循环/ 分支/ ,/ 如果/ 不是/ 循环/ 分支/ 则/ 进行/ 正常/ 的/ 符号执行/ ,/ 如果/ 是/ 循环/ 分支/ 则/ 提取/ 循环/ 条件/ ,/ 将/ 循环/ 控制变量/ 符号化/ ,/ 对/ 循环/ 结构/ 体/ 进行/ 符号执行/ ,/ 对/ 循环/ 结构/ 体/ 进行/ 切片/ 和/ 数据流/ 分析/ ,/ 变量/ 的/ 依赖/ 关系/ ,/ 活性/ 分析/ ,/ 循环/ 分支/ 之间/ 的/ 独立性/ 等/ 性质/ ,/ 得到/ 关于/ 循环/ 控制变量/ 的/ 约束/ 信息/ ./ FLSE/ 算法/ 描述/ 如/ 算法/ 5/ ./ 算法/ 5/ ./ FLSE/ 算法/ FLSESymbolicExecute/ ./ 输入/ :/ vulset/ :/ 脆弱/ 点集/ 输出/ :/ vulcase/ :/ 到达/ 脆弱/ 点集/ 的/ 数据包/ 1/ ./ initial/ (/ tasklist/ ,/ vulset/ ,/ main/ )/ 2/ ./ probSymCalculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ 3/ ./ while/ (/ tasklist/ !/ =/ NULL/ )/ 4/ ./ l/ =/ select/ (/ tasklist/ )/ 5/ ./ LazySymbolicExecute/ (/ l/ ,/ δ/ ,/ m/ )/ 6/ ./ endwhile/ 其中/ initial/ (/ tasklist/ ,/ vulset/ ,/ main/ )/ 表示/ 对/ 符号执行/ 引擎/ 进行/ 初始化/ ,/ 将/ 初始/ 的/ 执行/ 状态/ 添加/ 到/ tasklist/ 中/ ,/ probSymCalculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ 计算/ 约束条件/ 集/ 概率/ ,/ select/ (/ tasklist/ )/ 选取/ 一个/ 任务/ 状态/ l/ ,/ LazySym/ -/ bolicExecute/ (/ l/ ,/ δ/ ,/ m/ )/ 对/ l/ 进行/ 懒/ 符号执行/ ./ FLSE/ 算法/ 一方面/ 通过/ 提前/ 确定/ 和/ 求解/ 多个/ 执行/ 分支/ ,/ 减少/ 了/ 不必要/ 的/ 回溯/ ,/ 不/ 需要/ 在/ 一个/ 过程/ 内/ 反复/ 的/ 修正/ 约束条件/ 集/ ,/ 解决/ 了/ 符号/ 变量/ 受父/ 节点/ 控制/ 时所/ 带来/ 的/ 过程/ 内/ 约束条件/ 集/ 无法/ 修正/ 的/ 问题/ ./ FLSE/ 算法/ 通过/ 提前/ 求解/ 若干/ 节点/ ,/ 利用/ 后续/ 节点/ 的/ 分支/ 信息/ ,/ 有效/ 地/ 提高/ 了/ 符号执行/ 的/ 效率/ ./ 另一方面/ ,/ 一次/ 符号执行/ 跨越/ 多个/ 节点/ ,/ 得到/ 更/ 多/ 关于/ 循环/ 符号/ 变量/ 的/ 信息/ ,/ 减少/ 了/ 循环/ 分支/ 数量/ ,/ 从而/ 减少/ 了/ 影子/ 内存/ 的/ 数量/ ,/ 有效/ 地/ 缓解/ 了/ 符号执行/ 的/ 状态/ 数量/ 爆炸/ 问题/ ./ 3.5/ ./ 2/ 基于/ 懒/ 符号执行/ 的/ 后/ 向/ 路径/ 求解/ 算法/ CCBSE/ 算法/ 与/ SDSE/ 算法/ 类似/ ,/ 利用/ 优先/ 执行/ 最短/ 路径/ 策略/ 来/ 进行/ 脆弱/ 点/ 位置/ 的/ 后/ 向搜索/ ,/ 执行/ 的/ 策略/ 也/ 只/ 以/ 当前/ 信息/ 即/ 最/ 短/ 路径/ 作为/ 唯一/ 决策/ 因素/ ,/ 没有/ 考虑/ 约束/ 集/ 的/ 求解/ 概率/ 和/ 前续/ 路径/ 数量/ 等/ 关键因素/ ,/ 决策/ 因素/ 过于/ 简单/ ./ 而且/ CCBSE/ 算法/ 每步/ 只/ 执行/ 一个/ 分支/ ,/ 没有/ 充分利用/ 后续/ 分支/ 进行/ 综合/ 决策/ ./ 基于/ 懒/ 符号执行/ 的/ 后/ 向/ 路径/ 求解/ 算法/ (/ BLSE/ )/ 从/ 脆弱/ 点/ 所在/ 函数/ 开始/ ,/ 通过/ 一次/ 多/ 步/ 逆向/ 追溯/ 的/ 方法/ 搜索/ 整个/ 执行/ 路径/ ,/ BLSE/ 对下/ 一条/ 执行/ 路径/ 进行/ 选择/ 时/ 综合/ 考虑/ 了/ 最/ 短/ 路径/ 、/ 约束/ 集/ 概率/ 和/ 可达/ 路径/ 数量/ 3/ 种/ 关键因素/ ,/ 有效/ 地/ 提高/ 了/ 路径/ 搜索/ 效率/ ./ 其/ 算法/ 描述/ 如/ 算法/ 6/ ./ 算法/ 6/ ./ BLSE/ 算法/ BLSESymbolicExecute/ ./ 输入/ :/ vulset/ :/ 脆弱/ 点集/ 输出/ :/ vulcase/ :/ 到达/ 脆弱/ 点集/ 的/ 数据包/ 1/ ./ initial/ (/ tasklist/ ,/ vulset/ ,/ vulfun/ )/ 2/ ./ probSymCalculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ 3/ ./ while/ (/ tasklist/ !/ =/ NULL/ )/ do4/ ./ l/ =/ select/ (/ tasklist/ )/ 5/ ./ LazySymbolicExecute/ (/ l/ ,/ δ/ ,/ m/ )/ 6/ ./ next/ _/ l/ =/ CFGBackForward/ (/ l/ )/ 7/ ./ add/ (/ tasklist/ ,/ next/ _/ l/ )/ 8/ ./ endwhile/ 其中/ initial/ (/ tasklist/ ,/ vulset/ ,/ vulfun/ )/ 表示/ 对/ 符号/ 执/ Page8/ 行/ 引擎/ 进行/ 初始化/ ,/ 这里/ 与/ FLSE/ 算法/ 有所不同/ ,/ FLSE/ 算法/ 是从/ 程序/ 入口/ 点/ 开始/ 进行/ 符号执行/ 的/ ,/ BLSE/ 算法/ 是从/ 目标/ 脆弱/ 点/ 开始/ 的/ ,/ vulfun/ 是/ 脆弱/ 点/ 所在/ 函数/ ./ probSymCalculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ 计算/ 约束条件/ 集/ 概率/ ,/ select/ (/ tasklist/ )/ 选取/ 一个/ 任务/ 状态/ l/ ,/ LazySymbolicExecute/ (/ l/ ,/ δ/ ,/ m/ )/ 对/ l/ 进行/ 懒/ 符号执行/ ,/ CFGBackForward/ (/ l/ )/ 选取/ 下次/ 要/ 的/ 执行/ 路径/ ,/ 并/ 通过/ add/ (/ tasklist/ ,/ next/ _/ l/ )/ 加入/ 到/ 任务/ 列表/ tasklist/ 中/ ./ BLSE/ 算法/ 有/ 两个/ 关键/ 的/ 步骤/ :/ (/ 1/ )/ 在/ 过程/ 间/ 控制流/ 图中/ 找到/ 调用/ 当前/ 函数/ 的/ 调用函数/ 集/ ,/ 并/ 跟/ 设定/ 的/ 策略/ 选择/ 一个/ 较/ 好/ 的/ 调用函数/ 作为/ 下/ 一个/ 符号执行/ 函数/ ;/ (/ 2/ )/ 在/ 选定/ 好/ 的/ 调用函数/ 中/ 使用/ FLSE/ 算法/ ,/ 找到/ 一条/ 较/ 好/ 路径/ 到达/ 目标/ 函数/ ./ 第一个/ 关键步骤/ 中/ 从/ 调用函数/ 集中/ 选取/ 一个/ 较/ 好/ 的/ 调用函数/ 优先/ 执行/ ,/ 其/ 选取/ 策略/ 包含/ 两个/ 决策/ 因素/ :/ 调用函数/ 与/ 被/ 测/ 程序/ 入口/ 之间/ 的/ 距离/ 和/ 调用函数/ 与/ 被/ 测/ 程序/ 入口/ 之间/ 路径/ 的/ 数量/ ./ 如图/ 4/ 所示/ ,/ BLSE/ 算法/ 先/ 确定/ 脆弱/ 点/ 所在/ 函数/ vulfun/ ,/ 并/ 利用/ FLSE/ 算法/ ,/ 找到/ 一条/ 从/ vulfun/ 函数/ 入口/ 到/ 脆弱/ 点/ 的/ 执行/ 路径/ (/ p1/ ,/ p2/ ,/ …/ ,/ pk/ )/ ,/ 并/ 搜集/ 相应/ 的/ 路径/ 约束条件/ s1/ ,/ 然后/ 在/ vulfun/ 的/ 直接/ 前驱/ 集/ D/ -/ Pred/ (/ vulfun/ )/ 中/ ,/ 利用/ 决策函数/ decision/ (/ Pathlen/ ,/ Pathnum/ )/ 求/ 出/ 直接/ 前驱/ 集/ D/ -/ Pred/ (/ vulfun/ )/ 中/ 各/ 元素/ 的/ 权重/ 值/ ,/ 并/ 优先/ 执行/ 权重/ 最大/ 的/ 直接/ 前驱/ 结点/ ,/ 其中/ Pathlen/ 表示/ 直接/ 前驱/ 结点/ 到/ 被/ 测/ 函数/ 执行/ 入口/ 之间/ 的/ 距离/ ,/ Pathnum/ 表示/ 直接/ 前驱/ 结点/ 到/ 被/ 测/ 函数/ 执行/ 入口/ 之间/ 的/ 路径/ 数量/ ./ 节点/ 距离/ Pathlen/ 和/ 路径/ 数量/ Pathnum/ 是/ 预先/ 可以/ 计算/ 的/ ,/ 因此/ 直接/ 前驱/ 权重/ 值/ decision/ (/ Pathlen/ ,/ Pathnum/ )/ 也/ 是/ 可以/ 预先/ 计算/ 的/ ,/ 从而/ 不会/ 因为/ 直接/ 前驱/ 权重/ 值/ decision/ (/ Pathlen/ ,/ Pathnum/ )/ 的/ 计算/ 而/ 影响/ 整个/ 算法/ 的/ 执行/ 效率/ ,/ 这里/ 没有/ 考虑/ 约束条件/ 概率/ 因素/ ,/ 主要/ 是因为/ 在/ 后/ 向/ 执行/ 路径/ 搜索/ 时/ ,/ 约束条件/ 概率/ 的/ 求取/ 比较复杂/ ,/ 而且/ 效果/ 也/ 不/ 一定/ 好/ ./ 在/ 决策/ 出/ 下/ 一条/ 执行/ 分支/ callvulfun2/ 后/ ,/ 利用/ BLSE/ 算法/ 搜索/ callvulfun2/ 函数/ 内/ 从/ callvulfun2/ 函数/ 入口/ 到/ 调用/ vulfun/ 函数/ 之间/ 的/ 执行/ 路径/ (/ pk/ +/ 1/ ,/ pk/ +/ 2/ ,/ …/ ,/ pk2/ )/ ,/ 并/ 搜集/ 相应/ 的/ 条件/ 约束/ s2/ ,/ 同时/ 并/ 不会/ 直接/ 对/ 所/ 得到/ 的/ 条件/ 约束/ 进行/ 求解/ ,/ 而是/ 预先/ 考察/ 下个/ 分支/ 中/ 的/ 分支/ 和/ 分支/ 条件/ 情况/ ,/ 分析/ 下个/ 分支/ 函数/ 入口/ 与/ 调用/ callvulfun2/ 语句/ 之间/ 的/ 可达性/ 条件/ ,/ 将/ 其/ 加入/ 到/ 约束/ 集中/ ,/ 并/ 进行/ 综合/ 求解/ ,/ 如果/ 调用/ callvulfun2/ 语句/ 总是/ 可达/ 的/ ,/ 则/ 不/ 需要/ 加入/ 约束/ 集中/ ,/ 简化/ 条件/ 约束/ 求解/ ,/ 提高/ 求解/ 效率/ ./ 3.5/ ./ 3/ 基于/ 懒/ 符号执行/ 的/ 混合/ 路径/ 求解/ 算法/ FLSE/ 算法/ 和/ BLSE/ 算法/ 都/ 有/ 本身/ 不可避免/ 的/ 不足/ ,/ FLSE/ 算法/ 适用/ 于/ 前后/ 搜集/ 的/ 路径/ 约束条件/ 信息/ ,/ 基于/ 懒/ 符号执行/ 的/ 混合/ 路径/ 求解/ 算法/ (/ HLSE/ )/ 结合/ 了/ FLSE/ 算法/ 和/ BLSE/ 算法/ 的/ 优点/ ,/ 同时/ 从/ 程序/ 入口/ 和/ 脆弱/ 点/ 两个/ 节点/ 同时/ 出发/ 进行/ 条件/ 路径/ 搜索/ ,/ 这样/ 在/ 进行/ 路径/ 选择/ 时/ ,/ 得到/ 的/ 信息/ 更/ 多/ ,/ 选择/ 出来/ 的/ 分支/ 也/ 更加/ 合理/ ./ 具体/ 算法/ 描述/ 如/ 算法/ 7/ ./ 算法/ 7/ ./ HLSE/ 算法/ HLSESymbolicExecute/ ./ 输入/ :/ vulset/ :/ 脆弱/ 点集/ 输出/ :/ vulcase/ :/ 到达/ 脆弱/ 点集/ 的/ 数据包/ 1/ ./ initial/ (/ ftasklist/ ,/ vulset/ ,/ main/ )/ 2/ ./ initial/ (/ btasklist/ ,/ vulset/ ,/ vulfun/ )/ 3/ ./ probSymCalculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ 4/ ./ FLSESymbolicExecute/ (/ ftasklist/ )/ 5/ ./ BLSESymbolicExecute/ (/ btasklist/ )/ 其中/ ,/ ftasklist/ 和/ btasklist/ 分别/ 为/ FLSE/ 和/ BLSE/ 的/ 状态/ 集/ ,/ initial/ (/ ftasklist/ ,/ vulset/ ,/ main/ )/ 表示/ 对/ ftasklist/ 进行/ 初始化/ ,/ 对/ main/ 参数/ 和/ 全局变量/ 的/ 符号化/ ,/ 生成/ 初始状态/ ./ initial/ (/ btasklist/ ,/ vulset/ ,/ vulfun/ )/ 表示/ 对/ btasklist/ 进行/ 初始化/ ,/ 对/ 脆弱/ 点/ 调用函数/ 的/ 参数/ 和/ 全局变量/ 进行/ 符号化/ 并/ 产生/ 初始状态/ ./ probSymCalculate/ (/ l/ ,/ ψ/ ,/ m/ ,/ p/ )/ 计算/ 约束条件/ 集/ 概率/ ,/ FLSESymbolicExecute/ (/ ftasklist/ )/ 和/ BLSE/ -/ SymbolicExecute/ (/ btasklist/ )/ 分别/ 进行/ 前/ 向/ 懒/ 符号执行/ 和/ 后/ 向/ 懒/ 符号执行/ ./ Page94/ 实验/ 与/ 分析/ 本/ 实验/ 的/ 测试/ 对象/ 为/ 以上/ 的/ 3/ 个/ 例子/ 和/ BUSYBOX1/ ./ 11.2/ ,/ 测试/ 结果/ 如表/ 1/ 所示/ ./ 表/ 13/ 种懒/ 符号执行/ 算法/ 与/ KLEE/ [/ 12/ ]/ ,/ SAGE/ [/ 13/ ]/ ,/ 测试/ 包/ killsetuidgid8/ ./ 47258.5116/ ./ 1826.743892/ ./ 1221.63/ trodchown24/ ./ 29105.21112/ ./ 80255.71596/ ./ 12114.10/ ls/ 均值/ 164.48233/ ./ 9855.19116/ ./ 631438.5361/ ./ 93/ 以/ 对/ od/ 命令/ 包/ 的/ 测试/ 为例/ 分析/ ,/ FLSE/ ,/ BLSE/ 算法/ 的/ 测试/ 效率/ 最高/ ,/ HLSE/ 算法/ 的/ 测试/ 效率/ 一般/ ,/ 因为/ 这个/ 程序/ 较为简单/ ,/ 程序/ 分支/ 较/ 少/ ,/ 因此/ 在/ 前/ 向/ 约束条件/ 和/ 后/ 向/ 约束条件/ 联合/ 求解/ 上/ 消耗/ 的/ 时间/ 就/ 显/ 的/ 较为/ 突出/ ./ KLEE/ 算法/ 的/ 测试/ 效率/ 较/ 好/ ,/ KLEE/ 使用/ 的/ 是/ Round/ -/ RobinRP/ (/ RadomPath/ )/ 算法/ 来/ 计算/ 路径/ 末端/ 与/ 脆弱/ 点/ 之前/ 的/ 距离/ ,/ 同时/ 兼顾/ 了/ 覆盖率/ 和/ 路径/ 执行/ 的/ 准确率/ ./ Otter/ 采用/ 最短/ 路径/ 的/ 路径/ 选择/ 策略/ ,/ 测试/ 效率/ 较/ 好/ ./ SAGE/ 注重/ 提高/ 覆盖率/ ,/ 覆盖/ 每个/ 执行/ 分支/ ,/ 通过/ 块/ 覆盖/ (/ blockcoverage/ )/ 进行/ 启发式/ 选择/ 状态/ 执行/ ,/ 因此/ 把/ 太/ 多/ 的/ 时间/ 浪费/ 在/ 不能到达/ 脆弱/ 点/ 的/ 程序/ 分支/ 上/ ./ 以/ 对/ ls/ 命令/ 包/ 的/ 测试/ 为例/ 分析/ ,/ HLSE/ 测试/ 效率/ 最高/ ,/ FLSE/ ,/ BLSE/ ,/ KLEE/ ,/ Otter/ 的/ 效率/ 次之/ ,/ SAGE/ 的/ 效率/ 最差/ ,/ 因为/ ls/ 程序/ 中/ 无效/ 的/ 分支/ 太/ 多/ ,/ 因此/ SAGE/ 浪费/ 在/ 这些/ 分支/ 上/ 的/ 时间/ 显得/ 特别/ 表/ 2/ 懒/ 符号执行/ 对/ coreutil6/ ./ 10/ 软件包/ 测试/ 的/ 生成/ 结果/ 序号/ 123456789/ 表/ 2/ 中/ 列出/ 了/ 9/ 个/ 命令/ 包/ 的/ 测试/ 结果/ ,/ 有/ 3/ 个/ 指针/ 误用/ 脆弱/ 点/ ,/ 3/ 个栈/ 溢出/ 脆弱/ 点/ ,/ 两个/ 整数/ 溢出/ 突出/ ./ 从/ 对/ BUSYBOX/ 中/ ls/ ,/ chown/ ,/ tr/ ,/ od/ ,/ kill/ 和/ setuidgid/ 共/ 6/ 个/ 命令/ 的/ 测试/ 结果/ 数据/ 可以/ 看出/ ,/ SAGE/ 的/ 性能/ 表现/ 是/ 相对/ 最差/ 的/ ,/ FLSE/ 在/ 对/ 其中/ 5/ 个/ 命令/ 的/ 测试/ 过程/ 中/ 表现/ 优异/ ,/ BLSE/ 在/ 对/ 其中/ 4/ 个/ 命令/ 的/ 测试/ 性能/ 较/ 好/ ,/ 但/ 两个/ 算法/ 在/ 对/ ls/ 命令/ 的/ 测试/ 中/ 出现/ 性能/ 突变/ ,/ 表现/ 不够/ 稳定/ ,/ HLSE/ 的/ 综合/ 效率/ 是/ 最高/ 的/ ,/ 并且/ 随着/ 被/ 测试代码/ 规模/ 的/ 增大/ ,/ HLSE/ 算法/ 的/ 优势/ 越来越/ 明显/ ./ 测试/ 性能/ 比较/ 见图/ 5/ ./ 图/ 5/ 中/ 纵坐标/ 表示/ 对/ 程序/ 进行/ 测试/ 花费/ 的/ 时间/ ,/ 单位/ 为/ 秒/ ,/ 横坐标/ 表示/ 被测/ 程序/ 的/ 代码/ 规模/ ,/ 单位/ 为/ 行数/ ./ 从图/ 5/ 中/ 可以/ 看出/ SAGE/ 在/ 对/ setuidgid/ 程序包/ 进行/ 测试/ 时/ 效果/ 非常/ 差/ ,/ 因为/ setuidgid/ 中/ 循环/ 比/ 其它/ 测试/ 数据包/ 多/ ,/ 且/ 不能/ 达到/ 脆弱/ 点/ 的/ 无用/ 路径/ 也/ 较/ 多/ ,/ SAGE/ 为了/ 提高/ 覆盖率/ ,/ 在/ 遍历/ 这些/ 路径/ 时/ 浪费/ 了/ 太/ 多/ 的/ 时间/ ./ 最后/ ,/ VTsolver/ 在/ 针对/ 软件/ coreutil6/ ./ 10/ 的/ 脆弱/ 点/ 测试/ 中/ ,/ 快速/ 的/ 生成/ 了/ 9/ 个/ 漏洞/ 可/ 达/ 数据包/ ,/ 其中/ 包括/ 2/ 个/ (/ 序号/ 2/ 和/ 序号/ 7/ )/ 未公开/ 漏洞/ ,/ 详细情况/ 见表/ 2/ ./ "/ -/ Z/ "/ "/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x00/ "/ "/ \/ x32/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x20/ \/ x00/ "/ 脆弱/ 点/ 和/ 一个/ 竞争/ 条件/ 脆弱/ 点/ ,/ 其中/ dir/ 和/ ls/ 命令/ 的/ 脆弱/ 点/ 已经/ 收录/ 在/ CVE/ 中/ ./ Page105/ 总结/ 脆弱/ 点/ 可达/ 数据包/ 计算/ 是/ 指/ 在/ 进行/ 程序/ 分析/ 时/ ,/ 对于/ 给定/ 的/ 代码/ 脆弱/ 点/ 位置/ ,/ 找到/ 一条/ 可/ 达/ 路径/ 触发/ 给定/ 脆弱/ 点/ 和/ 得到/ 相应/ 可/ 达/ 数据包/ ./ 程序/ 的/ 执行/ 可以/ 用/ 状态/ 进行/ 描述/ ,/ 脆弱/ 点/ 的/ 可达性/ 可以/ 通过/ 检查/ 当前/ 状态/ 是否/ 满足/ 特定/ 的/ 性质/ 来/ 进行/ 判断/ ./ 脆弱/ 点/ 可达/ 数据包/ 计算技术/ 应用/ 很/ 广泛/ ,/ 比如/ 一个/ 静态/ 分析/ 的/ 脆弱性/ 测试工具/ 找到/ 了/ 一些/ 脆弱/ 点/ ,/ 但是/ 并/ 不能/ 确定/ 是不是/ 真正/ 的/ 错误/ ,/ 于是/ 需要/ 测试/ 数据包/ 来/ 验证/ 这些/ 脆弱/ 点/ ./ 在/ 进行/ 软件开发/ 的/ 时候/ 可能/ 会/ 遇到/ 一些/ 断言/ (/ assert/ )/ 报告/ ,/ 但是/ 没有/ 相应/ 的/ 测试/ 数据包/ ,/ 如果/ 开发者/ 对/ 代码/ 不/ 熟悉/ 或者/ 代码/ 量/ 比较/ 大/ ,/ 要/ 找到/ 触发/ 断言/ 的/ 原因/ 是/ 非常/ 困难/ 的/ ,/ 因此/ 需要/ 测试/ 数据包/ 帮助/ 开发者/ 定位/ 错误/ ./ 符号执行/ 技术/ 非常适合/ 解决/ 脆弱/ 点/ 可达/ 数据包/ 计算/ 问题/ ,/ 符号执行/ 引擎/ 是/ 一个/ 完备/ 的/ 执行/ 系统/ ,/ 只要/ 是/ 它/ 能/ 执行/ 的/ 路径/ 都/ 是/ 可达/ 的/ ./ 符号执行/ 引擎/ 调用/ 程序运行/ ,/ 同时/ 使用/ 具体/ 参数/ 和/ 符号/ 参数/ ./ 符号/ 参数/ 可以/ 对/ 基本/ 数据类型/ ,/ 字符串/ 等/ 进行/ 抽象/ ./ 当/ 符号执行/ 引擎/ 执行/ 时/ 遇到/ 符号化/ 的/ 条件/ 语句/ 时/ ,/ 将/ 调用/ SMT/ 求解/ 器/ STP/ 对/ 符号执行/ 引擎/ 搜集/ 到/ 的/ 约束/ 集/ 进行/ 求解/ ,/ 判断/ 分支/ 是否/ 可/ 达/ ,/ 有/ 多少/ 分支/ 是/ 可达/ 的/ ,/ 如果/ 有/ 多条/ 路径/ 可/ 达/ ,/ 则/ 需要/ 把/ 这些/ 状态/ 保留/ 下来/ ,/ 用于/ 路径/ 的/ 遍历/ ./ 本文/ 提出/ 了/ 基于/ 懒/ 符号执行/ 的/ 前/ 向/ 路径/ 求解/ 算法/ (/ FLSE/ )/ ,/ 基于/ 懒/ 符号执行/ 的/ 后/ 向/ 路径/ 求解/ 算法/ (/ BLSE/ )/ 和/ 基于/ 懒/ 符号执行/ 的/ 混合/ 路径/ 求解/ 算法/ (/ HLSE/ )/ ,/ 有效/ 地/ 提高/ 了/ 符号执行/ 引擎/ 的/ 执行/ 效率/ ./ FLSE/ 算法/ 综合/ 考虑/ 了/ 最/ 短/ 路径/ 、/ 约束/ 概率/ 、/ 可/ 达/ 路径/ 数量/ 3/ 种/ 关键因素/ ,/ 对下/ 一条/ 执行/ 路径/ 进行/ 选择/ ,/ 有效/ 地/ 提高/ 了/ 路径/ 搜索/ 效率/ ./ 另外/ FLSE/ 算法/ 在/ 决策/ 出/ 下/ 一条/ 执行/ 分支/ 后/ ,/ 并/ 不会/ 直接/ 对/ 所/ 得到/ 的/ 条件/ 约束/ 进行/ 求解/ ,/ 而是/ 预先/ 考察/ 下个/ 分支/ 中/ 的/ 分支/ 和/ 分支/ 条件/ 情况/ ,/ 如果/ 满足/ 设定/ 的/ 提前/ 策略/ ,/ 能够/ 确定/ 再/ 下个/ 执行/ 分支/ ,/ 则/ 把/ 这个/ 分支/ 对应/ 的/ 条件/ 加入/ 当前/ 约束条件/ 集/ ,/ 同样/ 可以/ 对/ 后面/ 的/ 执行/ 分支/ 实施/ 提前/ 策略/ ,/ 直到/ 遇到/ 不能/ 满足/ 提前/ 策略/ 的/ 结点/ ./ BLSE/ 算法/ 从/ 脆弱/ 点/ 所在/ 函数/ 开始/ ,/ 通过/ 一次/ 多/ 步/ 逆向/ 追溯/ 的/ 方法/ 搜索/ 整个/ 执行/ 路径/ ,/ BLSE/ 综合/ 考虑/ 了/ 最/ 短/ 路径/ 、/ 约束/ 概率/ 、/ 可/ 达/ 路径/ 数量/ 3/ 种/ 关键因素/ ,/ 对下/ 一条/ 执行/ 路径/ 进行/ 选择/ ,/ 以/ 提高/ 路径/ 搜索/ 效率/ ./ BLSE/ 算法/ 有/ 两个/ 关键/ 的/ 步骤/ :/ (/ 1/ )/ 在/ 过程/ 间/ 控制流/ 图中/ 找到/ 调用/ 当前/ 函数/ 的/ 调用函数/ 集/ ,/ 并/ 跟/ 设定/ 的/ 策略/ 选择/ 一个/ 较/ 好/ 的/ 调用函数/ 作为/ 下/ 一个/ 符号执行/ 函数/ ;/ (/ 2/ )/ 在/ 选定/ 好/ 的/ 调用函数/ 中/ 使用/ FLSE/ 算法/ ,/ 找到/ 一条/ 较/ 好/ 路径/ 到达/ 目标/ 函数/ ./ HLSE/ 算法/ 结合/ 了/ FLSE/ 算法/ 和/ BLSE/ 算法/ 的/ 优点/ ,/ 同时/ 从/ 程序/ 入口/ 和/ 脆弱/ 点/ 两个/ 节点/ 同时/ 出发/ 进行/ 条件/ 路径/ 搜索/ ,/ 这样/ 在/ 进行/ 路径/ 选择/ 时/ ,/ 得到/ 的/ 信息/ 更/ 多/ ,/ 选择/ 出来/ 的/ 分支/ 也/ 更加/ 科学/ ./ 

