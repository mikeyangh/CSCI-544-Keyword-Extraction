Page1/ 基于/ 三角形/ 自/ 适应/ 细分/ 的/ 有效/ 光照/ 烘焙/ 方法/ 李杨/ 1/ )/ ,/ 2/ )/ 周果/ 1/ )/ ,/ 2/ )/ 李/ 淳/ 秡/ 1/ )/ 邱显杰/ 1/ )/ 王兆其/ 1/ )/ 1/ )/ (/ 中国科学院计算技术研究所/ 虚拟现实/ 实验室/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 大学/ 北京/ 100049/ )/ 摘要/ 传统/ 的/ 纹理/ 烘焙/ 技术/ 虽然/ 能/ 产生/ 高质量/ 的/ 视觉效果/ ,/ 但/ 需要/ 占用/ 大量/ 的/ 存储空间/ ,/ 进而/ 影响/ 实时/ 绘制/ 的/ 性能/ ./ 针对/ 这一/ 问题/ ,/ 文中/ 提出/ 一种/ 基于/ 自/ 适应/ 三角形/ 细分/ 的/ 有效/ 光照/ 烘焙/ 方法/ ,/ 在/ 保证/ 绘制/ 效果/ 的/ 前提/ 下/ ,/ 可以/ 保持/ 低/ 存储/ 和/ 高/ 帧/ 率/ ./ 作者/ 首先/ 提出/ 一种/ 适合/ 三角形/ 的/ 自/ 适应/ 细分/ 模式/ ,/ 通过/ GPU/ 四叉树/ 编码表示/ 子/ 三角形/ 级别/ 的/ 细分/ ;/ 其次/ ,/ 利用/ 光照/ 图/ 纹理/ 和/ GPU/ 可编程/ 着色器/ 快速/ 决定/ 三角形/ 的/ 自/ 适应/ 细分/ 模式/ ;/ 第三/ ,/ 针对/ 细分/ 模式/ 的/ 性质/ ,/ 通过/ 缝合/ 操作/ ,/ 有效/ 地/ 消除/ 不同/ 细分/ 模式/ 下/ 相邻/ 三角形/ 之间/ 可能/ 出现/ 的/ 裂缝/ ;/ 最后/ 通过/ 最小/ 二乘/ 意义/ 的/ 全局/ 优化/ ,/ 计算/ 顶点/ 颜色/ ./ 另外/ ,/ 算法/ 还/ 可以/ 通过/ 用户/ 定义/ 的/ 参数/ 灵活/ 地/ 控制/ 细分/ 粒度/ 和/ 绘制/ 效果/ ./ 实验/ 结果/ 证明/ ,/ 与/ 传统/ 的/ 基于/ 光照/ 图/ 的/ 实时/ 渲染/ 方法/ 相比/ ,/ 文中/ 算法/ 通过/ 使用/ 细分/ 后/ 的/ 模型/ 顶点/ 颜色/ 代替/ 光照/ 图/ ,/ 不仅/ 可以/ 节省/ 80/ %/ 以上/ 的/ 存储空间/ ,/ 还/ 可以/ 保持/ 高帧/ 率/ ,/ 并/ 达到/ 近似/ 的/ 绘制/ 效果/ ./ 关键词/ 光照/ 图/ ;/ 自/ 适应/ 细分/ ;/ 光照/ 烘焙/ ;/ 纹理/ 烘焙/ 1/ 引言/ 全局/ 光照/ 效果/ ,/ 在/ 计算机/ 图形学/ 应用领域/ 发挥/ 着/ 重要/ 的/ 作用/ ./ 然而/ ,/ 对于/ 日趋/ 复杂/ 的/ 场景/ ,/ 其/ 计算/ 往往/ 非常/ 困难/ 而且/ 很难/ 达到/ 实时性/ ./ 较为/ 普遍/ 的/ 解决/ 方法/ 是/ 预计/ 算/ 光照/ 信息/ 并/ 存储/ 到/ 顶点/ 属性/ 或者/ 纹理/ 里/ [/ 1/ ]/ ./ 这类/ 算法/ 包括/ 辐射体/ 、/ 预计/ 算/ 的/ 辐射/ 度/ 传递/ 、/ 环境/ 遮挡/ 、/ 软/ 阴影/ 算法/ 等/ ./ 应用/ 最广/ 的/ 光照/ 烘焙/ 技术/ 是/ 顶点/ 烘焙/ 和/ 纹理/ 烘焙/ ./ 顶点/ 烘焙/ 将/ 光照/ 信息/ 存储/ 在/ 模型/ 顶点/ 属性/ 里/ ./ 该/ 方法/ 仅/ 需要/ 少量/ 的/ 存储/ ,/ 并/ 通过/ 硬件/ 光栅/ 化/ 和/ 插值/ 操作/ 来/ 恢复/ 光照/ 信息/ ./ 不过/ ,/ 它/ 不/ 太/ 适合/ 于/ 面积/ 大/ 的/ 图元/ ,/ 因为/ 当前/ 的/ 图形/ 硬件/ 插值/ 操作/ 不/ 支持/ 复杂/ 的/ 插值/ 函数/ ,/ 不能/ 很/ 好/ 地/ 重构/ 光照/ 信息/ ./ 对于/ 包含/ 高频/ 信号/ 的/ 区域/ 可能/ 会/ 产生/ 光照/ 不/ 连续/ 的/ 走样/ 问题/ ./ 纹理/ 烘焙/ ,/ 通常/ 称为/ 光照/ 图/ 技术/ ,/ 在/ 纹理/ 上/ 保存/ 光照/ 数据/ ./ 由于/ 纹理/ 里面/ 包含/ 了/ 大量/ 的/ 像素/ 采样/ ,/ 这种/ 技术/ 可以/ 达到/ 高质量/ 的/ 视觉效果/ ./ 不过/ 对于/ 复杂/ 的/ 场景/ ,/ 光照/ 图/ 和/ 纹理/ 坐标/ 需要/ 较大/ 的/ 存储/ ,/ 从而/ 制约/ 了/ 其实/ 时/ 性能/ 和/ 可用性/ ./ 对于/ 一些/ 产品设计/ 或者/ 场景/ 预览/ 等/ 应用领域/ ,/ 比如/ 室内设计/ 展示/ ,/ 往往/ 需要/ 很多/ 高分辨率/ 的/ 光照/ 图来/ 体现/ 效果/ ./ 这些/ 纹理/ 占用/ 了/ 大部分/ 的/ 存储空间/ ,/ 而且/ 会/ 严重/ 影响/ 系统/ 实时/ 性能/ ./ 一个/ 折中/ 的/ 解决/ 方法/ 是/ 使用/ 顶点/ 烘焙/ 方法/ ,/ 不过/ 我们/ 发现/ ,/ 对于/ 许多/ 模型/ 来说/ ,/ 这一/ 方法/ 并/ 不能/ 很/ 好/ 地/ 展示/ 光照/ 效果/ ./ 由于/ 建模/ 和/ 烘焙/ 往往/ 由/ 不同/ 的/ 人/ 完成/ ,/ 为了/ 达到/ 好/ 的/ 效果/ ,/ 烘焙/ 时/ 可能/ 会/ 需要/ 对模型/ 进行/ 手工/ 的/ 细分/ ./ 对于/ 效果/ 要求/ 高/ 的/ 应用/ ,/ 往往/ 需要/ 大量/ 的/ 手工劳动/ ./ 另外/ ,/ 由于/ 光照/ 贴图/ 一般/ 仅仅/ 保存/ 光照/ 信息/ ,/ 对于/ 大部分/ 的/ 纹理/ 区域/ 一般/ 只/ 分布/ 低频/ 的/ 光照/ 信息/ ,/ 在/ 这些/ 区域/ 采用/ 标准/ 的/ 顶点/ 颜色/ 线性插值/ 就/ 已/ 足够/ ./ 针对/ 以上/ 问题/ ,/ 本文/ 提出/ 了/ 一种/ 基于/ 自/ 适应/ 三角形/ 细分/ 的/ 光照/ 烘焙/ 方法/ ./ 其/ 主要/ 解决/ 的/ 问题/ 是/ ,/ 如何/ 自动/ 细分/ 每个/ 三角形/ ,/ 才能/ 保证/ 细分/ 后/ 的/ 子/ 三角形/ 顶点/ 颜色/ 插值/ 后/ 得到/ 的/ 信息/ 和/ 初始/ 的/ 光照/ 图/ 信息/ 最/ 接近/ ./ 实验/ 证明/ ,/ 该/ 算法/ 不仅/ 速度/ 快/ 、/ 全自动/ ,/ 而且/ 可以/ 用于/ 任何/ 基于/ 纹理/ 烘焙/ 的/ 场景/ 渲染/ ,/ 如/ 环境/ 遮挡/ 烘焙/ 下/ 的/ 室内外/ 场景/ 、/ 面积/ 光源/ 影响/ 下/ 的/ 软/ 阴影/ 场景/ 、/ 间接/ 光照/ 的/ 场景/ 等/ ./ 算法/ 可以/ 达到/ 近似/ 纹理/ 烘焙/ 的/ 效果/ ,/ 同时/ 保持/ 高帧/ 率/ 和/ 低/ 存储/ 消耗/ ./ 2/ 相关/ 工作/ 过去/ 的/ 几十年/ 里/ ,/ 许多/ 研究者/ 致力于/ 光照/ 信息/ 的/ 预计/ 算/ 领域/ ,/ 例如/ ,/ 辐射体/ [/ 2/ ]/ 、/ 预计/ 算/ 的/ 辐射/ 度/ 传递/ [/ 3/ ]/ 、/ 环境/ 遮挡/ 域/ [/ 4/ ]/ 、/ 预计/ 算/ 的/ 光照/ 传递/ 矩阵/ [/ 5/ ]/ 等/ ./ 许多/ 商业软件/ ,/ 如/ 3dsMax/ 、/ Blender/ 、/ Beast/ 、/ Maya/ ,/ 都/ 提供/ 了/ 强大/ 的/ 建模/ 和/ 烘焙/ 工具/ ,/ 可以/ 将/ 光照/ 信息/ 预计/ 算/ 并/ 保存/ 在/ 顶点/ 属性/ 或者/ 纹理/ 里/ ./ 不过/ ,/ 随着/ 技术/ 的/ 复杂化/ ,/ 烘焙/ 的/ 结果/ 数据/ 日益/ 庞大/ ,/ 如/ 32/ 位/ 浮点/ 纹理/ 或者/ HDR/ 纹理/ ./ 在/ 实时/ 渲染/ 时/ ,/ 这些/ 数据/ 会/ 被/ 导入/ 内存/ 并/ 送往/ 显存/ ,/ 严重/ 影响/ 了/ 实时/ 性能/ ,/ 对/ 硬件/ 也/ 有/ 较/ 高/ 的/ 要求/ ,/ 一般/ 仅仅/ 适于/ PC/ 上/ 的/ 应用/ ,/ 而/ 不/ 适合/ 配置/ 较/ 低/ 的/ 移动/ 设备/ ./ 为了/ 解决/ 存储/ 开销/ 大/ 的/ 问题/ ,/ 一些/ 研究者/ 开始/ 了/ 纹理/ 压缩算法/ 的/ 研究/ ,/ 特别/ 是/ 针对/ 光照/ 图/ 纹理/ 的/ 压缩/ ./ Hu/ 等/ 人/ [/ 6/ ]/ 提出/ 一种/ 将/ 球面/ 调和/ 的/ 光照/ 图/ 进行/ 压缩/ 的/ 算法/ ,/ 并/ 将/ 其/ 应用/ 在/ 名为/ Halo3/ 的/ 游戏/ 里/ ./ 他们/ 首先/ 对/ 光照/ 图/ 纹理/ 进行/ 数值/ 分析/ ,/ 然后/ 对于/ 低频/ 的/ 区域/ ,/ 重新/ 参数/ 化/ 并/ 分配/ 更少/ 的/ 纹理/ 图素/ ./ Rasmusson/ 等/ 人/ [/ 7/ ]/ 提出/ 一种/ 基于/ 参数/ 化/ 平滑/ 轮廓/ 函数/ 的/ 光照/ 图/ 纹理/ 压缩算法/ ,/ 专门/ 针对/ 高频/ 信息/ 比较/ 少/ 的/ 光照/ 图/ 进行/ 压缩/ ./ 这类/ 方法/ 虽然/ 能/ 减少/ 光照/ 图/ 的/ 存储量/ ,/ 但/ 仍然/ 需要/ 实时/ 的/ 纹理/ 解码/ 和/ 访问/ ,/ 也/ 会/ 产生/ 一定/ 的/ 性能/ 影响/ ./ 为了/ 更好/ 地/ 利用/ 纹理/ 存储/ ,/ 还有/ 一类/ 方法/ 通过/ 在/ 顶点/ 上/ 存储/ 约简/ 的/ 数据/ 来/ 代替/ 纹理/ ,/ 从而/ 减少/ 实时/ 绘制/ 时/ 的/ 存储/ ./ MeshColors/ [/ 8/ ]/ 在/ 模型/ 的/ 顶点/ 上/ 存储/ 三角形/ 内部/ 的/ 多个/ 颜色/ 采样/ 值/ ./ 这种/ 虚拟/ 细分/ 的/ 方法/ 不/ 需要/ 纹理/ 方法/ 中/ 的/ 参数/ 化/ ,/ 而且/ 还/ 能/ 避免/ 纹理/ 方法/ 中/ 边界/ 不/ 连续/ 的/ 走样/ 问题/ ./ 不过/ ,/ 它/ 需要/ 通过/ 片元/ 着色器/ (/ fragmentshader/ )/ 实现/ mip/ -/ map/ 信号/ 重构/ 算法/ ./ 而/ 在/ 纹理/ 方法/ 中/ 这/ 是/ 伴随/ 着/ 硬件/ 插值/ 和/ 光栅/ 化/ 之后/ ,/ 由/ 硬件/ 实现/ 的/ ./ 因此/ 这种/ 方法/ 会/ 严重/ 影响/ 实时/ 的/ 性能/ ,/ 只能/ 用于/ 比较/ 小/ 的/ 场景/ 里/ ./ 最小/ 二乘/ 顶点/ 烘焙/ (/ LeastSquaresVertexBaking/ )/ [/ 9/ ]/ 通过/ 在/ 顶点/ 位置/ 计算/ 最小/ 二乘/ 意义/ 的/ 最优/ 颜色/ 解/ ,/ 从而/ 达到/ 最大/ 的/ 近似/ 原始/ 光照/ 图/ 信号/ 的/ 目的/ ./ 为了/ 避免/ 颜色/ 梯度/ 不/ 连续/ ,/ 文献/ [/ 9/ ]/ 还/ 提出/ 一个/ 修正/ 项来/ 最小化/ 错误率/ ,/ 从而/ 保持/ 最优/ 解/ ./ 这种/ 方法/ 比/ 其它/ 的/ 顶点/ 烘焙/ 方法/ 产生/ 更/ 精确/ 的/ 顶点/ 颜色/ ,/ 适合/ 低频/ 光照/ 场景/ 以及/ 充分/ 细分/ 后/ 的/ 场景/ ./ 我们/ 已经/ 实现/ 了/ 这个/ 方法/ ,/ 发现/ 它/ 不/ 太/ 适合/ 于/ 大/ 三角形/ ,/ 即使/ 里面/ 仅/ 包含/ 低频/ 信息/ ,/ 见图/ 13/ ./ 最近/ ,/ 一些/ 研究者/ 开始/ 尝试/ 使用/ 混合/ 方法/ 来/ 解决/ 这个/ 问题/ ./ Schfer/ 等/ 人/ [/ 10/ ]/ 混合/ 基于/ 顶点/ 和/ 基于/ 纹理/ 的/ 存储/ 方式/ ./ 他们/ 在/ 高频/ 的/ 区域/ ,/ 使用/ 纹理/ 的/ 方法/ ,/ 低频/ 的/ 区域/ 使用/ 最小/ 二乘/ 意义/ 的/ 优化/ 顶点/ 颜色/ 插值/ ,/ 通过/ 这种/ 方式/ 恢复/ 原始/ 的/ 光照/ 图/ 信号/ ./ 最后/ ,/ 他们/ 融合/ 两种/ 存储/ 方式/ ,/ 避免/ 在/ 接缝处/ 的/ Page3/ 不/ 连续/ ./ 为了/ 进一步/ 约简/ 纹理/ 数据/ 存储/ ,/ 同样/ 是/ Schfer/ 等/ 人/ [/ 11/ ]/ 在/ 顶点/ 处/ 存储/ 多/ 分辨率/ 的/ 属性/ 值/ ,/ 然后/ 通过/ 硬件/ 细分/ 操作/ (/ Tesselation/ )/ 实现/ 近似/ 纹理/ 方法/ 的/ 效果/ ./ 不过/ 由于/ 他们/ 在/ 数据结构/ 上/ 使用/ 了/ 不/ 连续/ 的/ 内存/ 布局/ (/ 顶点/ 、/ 边/ 、/ 面上/ 的/ 数据/ 单独/ 存储/ )/ ,/ 在/ 实时/ 绘制/ 时/ ,/ 属性/ 的/ 查询/ 制约/ 了/ 性能/ ./ 与/ 上述/ 方法/ 类似/ ,/ 本文/ 算法/ 同样/ 在/ 顶点/ 属性/ 存储/ 光照/ 信息/ ./ 不同/ 的/ 是/ ,/ 本文/ 仅/ 存储/ 颜色/ ,/ 细分/ 规则/ 仅/ 依赖/ 初始/ 的/ 光照/ 图/ 纹理/ ,/ 而且/ 实验/ 表明/ ,/ 本文/ 算法/ 可以/ 达到/ 近似/ 纹理/ 烘焙/ 的/ 效果/ ./ 模型/ 细分/ 算法/ 一直/ 以来/ 都/ 是/ 一个/ 比较/ 热门/ 的/ 研究/ 领域/ ./ 关于/ 各种/ 细分/ 方法/ ,/ 可以/ 参考文献/ [/ 12/ -/ 13/ ]/ ,/ 这里/ ,/ 我们/ 只是/ 列出/ 一些/ 相关/ 的/ 算法/ ./ Krivanek/ 等/ 人/ [/ 14/ ]/ 提出/ 一种/ 算法/ ,/ 可以/ 在/ 辐射/ 度/ (/ Radiosity/ )/ 预计/ 算时/ ,/ 通过/ 考虑/ 相邻/ 面片/ 的/ 辐射/ 度/ 变化/ ,/ 在/ 变化/ 快/ 的/ 区域/ 进一步/ 细分/ ./ 这种/ 方法/ 可以/ 加快/ 辐射/ 度/ 算法/ 的/ 预计/ 算/ ,/ 不/ 需要/ 像/ 传统/ 的/ 均匀/ 细分/ 的/ 方法/ 一样/ 消耗/ 大量/ 的/ 时间/ ./ Coombe/ 等/ 人/ [/ 15/ ]/ 提出/ 一种/ 硬件加速/ 的/ 逐步求精/ 辐射/ 度/ 实现/ 方法/ ./ 他们/ 考虑/ 辐射/ 度/ 梯度/ 的/ 变化/ 量/ ,/ 在/ 纹理/ 空间/ 细分/ 面片/ ./ 不过/ ,/ 这种/ 方法/ 仅能/ 细分/ 4/ 边形/ 场景/ ./ 后来/ Wallner/ [/ 16/ ]/ 改进/ 了/ 算法/ ,/ 可以/ 支持/ 任意/ 的/ 三角形/ 场景/ 的/ 细分/ ./ Bosch/ 等/ 人/ [/ 17/ ]/ 提出/ 一种/ 基于/ 自/ 适应/ 细分/ 的/ 交互性/ 日光/ 光照/ 系统/ ./ 它/ 提供/ 了/ 一种/ 自/ 适应/ 的/ 模型/ 细分/ 方法/ ./ 不过/ 其/ 细分/ 算法/ 依赖于/ 迭代/ 的/ 可见/ 性/ 计算/ ,/ 耗时/ 严重/ ,/ 限制/ 了/ 其/ 性能/ ./ 所有/ 的/ 上述/ 细分/ 方法/ ,/ 都/ 是/ 依赖于/ 具体/ 的/ 渲染/ 技术/ ,/ 比如/ 辐射/ 度/ 、/ PRT/ (/ 预计/ 算/ 的/ 辐射/ 度/ 传递/ )/ 等/ ./ Boubekeur/ 等/ 人/ [/ 18/ ]/ 提出/ 了/ 一种/ 运行/ 在/ GPU/ 顶点/ 着色器/ 中/ 的/ 自/ 适应/ 细分/ 网格/ 的/ 方法/ ,/ 预先/ 为/ 每个/ 顶点/ 计算/ 出/ 一个/ 额外/ 的/ 深度/ 标签/ (/ tag/ )/ ,/ 然后/ 在/ 顶点/ 着色器/ 中/ 根据/ 标签/ 选择/ 合适/ 的/ 自/ 适应/ 细分/ 模式/ 对/ 粗糙/ 的/ 多边形/ 网格/ 进行/ 细分/ ./ 这些/ 模式/ 预/ 存在/ 一个/ 最大/ 分割/ 深度/ 下/ 生成/ 的/ 矩阵/ 中/ ,/ 缓存/ 在/ GPU/ 的/ 显存/ 里/ ./ 图/ 1/ 自/ 适应/ 三角形/ 细分/ 算法/ 流程图/ (/ 首先/ 输入/ 数据/ 为/ 模型/ 三角/ 面/ 和/ 预计/ 算/ 的/ 光照/ 图/ ,/ 之后/ 是/ 纹理/ 空间/ 的/ 采样/ 分类/ 和/ 逐/ 三角形/ 细分/ 模式/ 决策/ 方法/ ,/ 最后/ 在/ 3/ -/ D/ 物体/ 空间/ 对模型/ 进行/ 细分/ 和/ 缝合/ ,/ 并且/ 计算/ 优化/ 的/ 顶点/ 颜色/ )/ Dyken/ 等/ 人/ [/ 19/ ]/ 提出/ 一种/ 基于/ 细分/ 模板/ 的/ 网格/ 自/ 适应/ 细分/ 方法/ ,/ 虽然/ 仍然/ 是/ 采用/ 预定/ 义/ 细分/ 模式/ 到/ GPU/ 显存/ 里/ ,/ 但是/ 它/ 简化/ 了/ 模式/ 的/ 数目/ ,/ 并且/ 通过/ 自/ 适应/ 模板/ 边界/ 匹配/ 的/ 方法/ 解决/ 不同/ 模式/ 之间/ 的/ 连接/ 问题/ ./ 王旭/ 等/ 人/ [/ 20/ ]/ 提出/ 一种/ 在/ GPU/ 上/ 实现/ 地形/ 渲染/ 的/ 自/ 适应/ 算法/ ,/ 首先/ 在/ GPU/ 里/ 计算/ 逐/ 三角形/ 的/ 细分/ 模式/ ,/ 之后/ 在/ 绘制/ 时/ 通过/ 访问/ GPU/ 缓存/ ,/ 选择/ 适当/ 的/ 细分/ 模式/ 对/ 三角形/ 进行/ 细分/ ./ 上述/ 这些/ 方法/ 虽然/ 能/ 自/ 适应/ 的/ 生成/ 不同/ 三角形/ 的/ 细分/ 模式/ ,/ 但是/ 在/ 每个/ 三角形/ 内部/ 往往/ 都/ 是/ 使用/ 均匀/ 细分/ 模式/ ./ 本文/ 算法/ 采用/ 类似/ 文献/ [/ 20/ ]/ 中/ 一分/ 四/ 的/ 细分/ 模式/ ,/ 不同/ 的/ 是/ ,/ 本文/ 通过/ 结合/ MeshColors/ [/ 8/ ]/ 中/ 提到/ 的/ 性质/ ,/ 提出/ 一种/ 新/ 的/ 细分/ 模式/ 和/ GPU/ 四叉树/ 编码方式/ ,/ 可以/ 实现/ 子/ 三角形/ 级别/ 的/ 自/ 适应/ 细分/ ./ 文献/ [/ 20/ ]/ 通过/ 使用/ 多/ 张/ 纹理/ 保存/ Mip/ -/ Map/ 多/ 分辨率/ 的/ 四叉树/ 编码/ 信息/ ,/ 不同/ 的/ 是/ 本文/ 仅/ 使用/ 一张/ 纹理/ ,/ 这种/ 编码方式/ 不仅/ 可以/ 节省/ 纹理/ 个数/ 还/ 可以/ 通过/ 片/ 元逻辑/ 操作/ ,/ 快速/ 地/ 实现/ GPU/ 发射/ (/ Scatter/ )/ 操作/ ./ 3/ 算法/ 综述/ 这里/ 简述/ 算法/ 流程/ ./ 需要/ 指出/ 的/ 是/ ,/ 本文/ 算法/ 的/ 输入/ 都/ 是/ 光照/ 图/ 纹理/ ,/ 它/ 由/ 其它/ 建模/ 软件/ ,/ 如/ 3dsMax/ 、/ Maya/ 、/ 或者/ Beast/ ,/ 预先/ 烘焙/ 好/ ./ 另外/ ,/ 一般/ 预计/ 算/ 的/ 光照/ 图/ 主要/ 包括/ 低频/ 的/ 光照/ 信息/ ,/ 如/ 环境/ 光照/ 、/ 间接/ 光照/ 、/ 软/ 阴影/ 、/ 环境/ 遮挡/ 等/ ,/ 高频/ 信息/ 非常少/ ./ 因此/ 我们/ 假定/ 光照/ 图中以/ 低频/ 信号/ 为主/ ./ 我们/ 的/ 算法/ 主要/ 包括/ 基于/ 信号/ 的/ 高频/ 提取/ 、/ 三角形/ 细分/ 模式/ 决策/ 以及/ 三角形/ 细分/ 缝合/ 与/ 顶点/ 优化/ 颜色/ 计算/ 3/ 个/ 步骤/ ,/ 见图/ 1/ ./ 首先/ 利用/ 光照/ 图/ ,/ 创建/ 一张/ 标记/ 纹理/ (/ MarkTexture/ ,/ MT/ )/ ,/ 标记/ 出/ 高频/ 的/ 区域/ ./ 其次/ ,/ 我们/ 利用/ 顶点/ 和/ 片元/ 着色器/ ,/ 快速/ 计算/ 每个/ 三角形/ 的/ 细分/ 模式/ ,/ 并/ 以/ 四叉树/ 编码/ 的/ 方式/ 压/ Page4/ 缩/ 存储/ 到/ 一张/ 纹理/ 中/ (/ SLT/ )/ ./ 接着/ ,/ 我们/ 回读/ SLT/ 到/ CPU/ 里/ ,/ 利用/ 细分/ 模式/ 的/ 性质/ 进行/ 三角形/ 快速/ 细分/ 和/ 缝合/ 操作/ ./ 最后/ ,/ 利用/ 光照/ 图/ 纹理/ ,/ 对/ 每个/ 子/ 三角形/ 顶点/ 做/ 全局/ 最小/ 二乘/ 优化/ 的/ 颜色/ 计算/ ./ 我们/ 将会/ 在/ 下面/ 几个/ 小节/ 讨论/ 算法/ 的/ 细节/ ,/ 同时/ 描述/ 基于/ 硬件/ 的/ 实现/ 方法/ ./ 4/ 三角形/ 细分/ 模式/ 本文/ 算法/ 主要/ 关注/ 自/ 适应/ 的/ 三角形/ 细分/ ,/ 因此/ 针对/ 三角形/ 的/ 细分/ 模式/ 是/ 算法/ 的/ 关键点/ ./ 迄今为止/ ,/ 有/ 许多/ 细分/ 模式/ 相关/ 的/ 研究/ 工作/ ./ 我们/ 的/ 三角形/ 细分/ 模式/ 决策/ 步骤/ 和/ 真正/ 的/ 细分/ 是/ 两个/ 独立/ 的/ 阶段/ ,/ 分别/ 在/ GPU/ 和/ CPU/ 中/ 完成/ ,/ 这会/ 牵扯/ 到/ GPU/ 往/ CPU/ 的/ 数据/ 回读/ ./ 另外/ 我们/ 希望/ 细分/ 模式/ 应/ 具有/ 良好/ 的/ 性质/ ,/ 可以/ 保存/ 多/ 分辨率/ 的/ 模式/ 并/ 实现/ 子/ 三角形/ 级别/ 的/ 细分/ 粒度/ ./ 本文/ 算法/ 使用/ 类似/ 文献/ [/ 20/ ]/ 中/ 14/ 的/ 细分/ 模式/ ,/ 与/ 之/ 不同/ 的/ 是/ ,/ 本文/ 结合/ MeshColors/ [/ 8/ ]/ 中/ 的/ 模式/ 性质/ ,/ 提出/ 一种/ 新/ 的/ 细分/ 模式/ ,/ 称为/ 2/ -/ 幂次/ MeshColors/ 细分/ 模式/ ./ 这种/ 模式/ 不仅/ 可以/ 表示/ 多/ 分辨率/ 下/ 各种/ 复杂/ 的/ 模式/ ,/ 而且/ 仅/ 需要/ 很少/ 的/ 数据/ 存储/ ,/ 下面/ 详细/ 介绍/ 一下/ 这种/ 细分/ 模式/ 及其/ 性质/ ./ 2/ -/ 幂次/ MeshColors/ 结构/ 类似/ MeshColors/ 结构/ ,/ 2/ -/ 幂次/ 结构/ 仍然/ 使用/ 均匀分布/ 的/ 三角形/ 采样/ 点/ 作为/ 细分/ 后/ 的/ 子/ 三角形/ 顶点/ ,/ 见图/ 2/ ./ 不同/ 的/ 是/ ,/ MeshColors/ 结构/ 仅/ 使用/ 一个/ 参数/ R/ 作为/ 三角形/ 的/ 分辨率/ ,/ 虽然/ 对/ 每个/ 三角形/ 可以/ 有/ 不同/ 的/ R/ ,/ 但是/ 对/ 一个/ 三角形/ 内部/ ,/ 它/ 始终保持/ 均匀/ 细分/ ,/ 因此/ 无法控制/ 子/ 三角形/ 级别/ 的/ 细分/ ./ 2/ -/ 幂次/ 结构/ 改进/ 了/ MeshColors/ 结构/ ,/ 定义/ M/ 为/ 2/ -/ 幂次/ 结构/ 的/ 最大/ 层级/ ,/ 它/ 与/ R/ 的/ 关系/ 为/ 图/ 22/ -/ 幂次/ 细分/ 结构/ (/ 不同/ 分辨率/ M/ 下/ 的/ 完全/ 细分/ 模式/ ./ 顶点/ 采样/ (/ 大/ 三角形/ 顶点/ )/ 、/ 边/ 采样/ (/ 浅色/ 点/ )/ 、/ 面/ 采样/ (/ 中间色/ 点/ )/ )/ 我们/ 的/ 细分/ 规则/ 为/ 一/ 分为/ 四/ ,/ 即/ 对/ 每个/ 子/ 三角形/ Ti/ ,/ 如果/ 需要/ 细分/ ,/ 则/ 在/ 其边/ 的/ 中点/ 插入/ 采样/ 点/ ,/ 从而/ 得到/ 3/ 个/ 新/ 的/ 采样/ 点/ 和/ 4/ 个/ 新/ 的/ 子/ 三角形/ ./ 给定/ 一个/ 三角形/ 的/ 2/ -/ 幂次/ 最大/ 细分/ 级别/ M/ ,/ 我们/ 可以/ 计算/ 每个/ 顶点/ 、/ 边/ 、/ 面内/ 的/ 最大/ 采样/ 数/ :/ 由于/ 所有/ 的/ 采样/ 点/ 都/ 是/ 均匀分布/ 的/ ,/ 我们/ 使用/ 重心坐标/ 来/ 表示/ 这些/ 采样/ 点/ ,/ 类似/ MeshColors/ 结构/ ,/ 我们/ 仍然/ 使用/ 两个/ 索引/ i/ 和/ j/ 来/ 唯一/ 表示/ 一个/ 三角形/ 内/ 的/ 采样/ 点/ :/ 其中/ 0/ / i/ / 2M/ 且/ 0/ / j/ / 2M/ -/ i/ ./ 这样/ ,/ 给定/ 一个/ 三角形/ 的/ 3/ 个/ 顶点/ (/ 有序/ )/ ,/ 我们/ 就/ 可以/ 唯一/ 确定/ 当前/ 层次/ M/ 下/ 的/ 所有/ 可能/ 的/ 采样/ 点集/ ./ 所有/ 可能/ 的/ 细分/ 模式/ 都/ 是/ 由/ 这些/ 采样/ 点/ 所/ 组成/ 的/ 三角形/ 构成/ ,/ 如图/ 3/ 所示/ ./ 图/ 32/ -/ 幂次/ 结构/ 采样/ 分布/ (/ M/ 为/ 2/ 时/ 的/ 所有/ 找/ 最近/ 的/ 子/ 三角形/ 顶点/ 采样/ 给定/ 三角形/ 表面/ 点/ p/ ,/ 需要/ 快速/ 找到/ 当前/ 级别/ M/ 下所处/ 的/ 子/ 三角形/ 的/ 3/ 个/ 顶点/ ./ MeshColors/ 中/ 提到/ ,/ 很难/ 使用/ 一个/ 统一/ 的/ 公式/ 来/ 求解/ 这个/ 问题/ ,/ 因此/ 我们/ 将/ 所有/ 细分/ 的/ 三角形/ 分为/ 2/ 类/ :/ 上/ 三角/ 和/ 下/ 三角/ ,/ 见图/ 4/ ./ 正如/ MeshColors/ 中/ 提到/ 的/ ,/ 首先/ 需要/ 计算/ 2/ 个值/ :/ 其中/ P/ 是/ 表面/ 点/ p/ 的/ 重心坐标/ ./ 如果/ ω/ =/ 0/ ,/ p/ 点/ 刚好/ 落在子/ 三角形/ 的/ 顶点/ 上/ ,/ Page5/ 其/ 重心坐标/ 为/ B/ ;/ 如果/ ω/ i/ +/ ω/ j/ +/ ω/ k/ =/ 1/ ,/ p/ 所处/ 的/ 子/ 三角形/ 为/ 上/ 三角/ ,/ 顶点/ 重心坐标/ 为/ Pi/ +/ 1/ ,/ j/ 、/ Pi/ ,/ j/ +/ 1/ 、/ Pi/ ,/ j/ ,/ 如图/ 4/ (/ b/ )/ ;/ 如果/ ω/ i/ +/ ω/ j/ +/ ω/ k/ =/ 2/ ,/ p/ 所处/ 的/ 子/ 三角形/ 为/ 下/ 三角/ ,/ 顶点/ 重心坐标/ 为/ Pi/ ,/ j/ +/ 1/ 、/ Pi/ +/ 1/ ,/ j/ 、/ Pi/ +/ 1/ ,/ j/ +/ 1/ ,/ 如图/ 4/ (/ a/ )/ ./ 找/ 所有/ 细/ 分子/ 三角形/ 顶点/ 采样/ 给定/ 一个/ 细分/ 层次/ M/ ,/ 需/ 要求/ 出/ 当前/ 三角形/ 所有/ 子/ 三角形/ 的/ 顶点/ 重心坐标/ 及/ 顺序/ ,/ 我们/ 使用/ 如下/ 的/ 公式/ 求解/ :/ 子/ 三角形/ (/ 上/ 三角/ )/ :/ 其中/ 0/ / i/ / 2M/ ,/ 0/ / j/ / 2M/ -/ i/ ./ 子/ 三角形/ (/ 下/ 三角/ )/ :/ 其中/ 3/ / 2M/ ,/ 0/ / i/ / 2M/ -/ 2/ ,/ 1/ / j/ / 2M/ -/ 1/ -/ i/ ./ 5/ 三角形/ 细分/ 模式/ 决策/ 算法/ 5.1/ 细分/ 模式/ 决策/ 与/ 其它/ 的/ 三角形/ 细分/ 方法/ 相比/ ,/ 本文/ 算法/ 使用/ 一种/ 间接/ 细分/ 策略/ ,/ 即/ 我们/ 没有/ 直接/ 在/ 物体/ 空间/ 对/ 三角形/ 进行/ 细分/ ./ 我们/ 首先/ 在/ 2/ -/ D/ 纹理/ 空间/ ,/ 使用/ 图像处理/ 的/ 方法/ 找到/ 需要/ 细分/ 的/ 三角形/ 并/ 决定/ 其/ 细分/ 模式/ ,/ 之后/ 才/ 真正/ 细分/ ./ 整个/ 细分/ 模式/ 决策/ 包括/ 3/ 个子/ 阶段/ :/ (/ 1/ )/ 基于/ 信号/ 的/ 光照/ 图/ 采样/ 分类/ ;/ (/ 2/ )/ 逐/ 像素/ 的/ 细分/ 模式/ 决策/ ;/ (/ 3/ )/ 逐/ 三角形/ 细分/ 模式/ 决策/ ./ 5.1/ ./ 1/ 基于/ 信号/ 的/ 光照/ 图/ 采样/ 分类/ 要/ 快速/ 地/ 决定/ 每个/ 三角形/ 的/ 细分/ 模式/ ,/ 有/ 两个/ 问题/ 需要/ 解决/ :/ (/ 1/ )/ 决定/ 一个/ 三角形/ 是否/ 需要/ 细分/ ;/ (/ 2/ )/ 决定/ 三角形/ 要/ 细分/ 到/ 什么/ 程度/ ./ 我们/ 需要/ 约束/ 细分/ 规则/ ,/ 防止/ 细分/ 过度/ ./ 对于/ 第/ 1/ 个/ 问题/ ,/ 最/ 简单/ 的/ 解决/ 方法/ 就是/ 对模型/ 进行/ 密集/ 采样/ ,/ 然后/ 遍历/ 每个/ 采样/ ,/ 判断/ 该/ 采样/ 的/ 颜色/ 值/ 和/ 周围/ 颜色/ 值/ 的/ 差别/ ,/ 从而/ 判断/ 所属/ 三角形/ 是否/ 需要/ 细分/ [/ 10/ ]/ ./ 不过/ 采样/ 的/ 数量/ 、/ 位置/ 直接/ 影响/ 到/ 最终/ 的/ 细分/ 结果/ ,/ 而且/ 由于/ 物体/ 本身/ 形状/ 拓扑/ 复杂性/ ,/ 采样/ 相对/ 比较/ 困难/ ./ 本文/ 算法/ 使用/ 光照/ 图/ 纹理/ 作为/ 采样/ 集/ ,/ 其中/ 每个/ 像素/ 对应/ 的/ 物体/ 空间/ 点/ 作为/ 采样/ 点/ ./ 通过/ 控制/ 光照/ 图/ 纹理/ 的/ 大小/ Res/ ,/ 可以/ 控制/ 采样/ 点/ 的/ 个数/ ,/ 从而/ 影响/ 整体/ 细分/ 效果/ ./ 另外/ ,/ 为了/ 进一步提高/ 效率/ ,/ 本文/ 首先/ 在/ GPU/ 里/ 对/ 初始/ 光照/ 图/ 纹理/ 进行/ 分析/ ,/ 找出/ 其/ 高频/ 的/ 像素/ ,/ 记录/ 到/ 输出/ 标记/ 纹理/ (/ MT/ )/ 中/ ./ 算法/ 首先/ 使用/ FBO/ (/ 帧/ 缓存/ 对象/ )/ ,/ 在/ 2/ -/ D/ 纹理/ 空间/ 绘制/ 每个/ 三角形/ ,/ 顶点/ 位置/ 通过/ 其/ 纹理/ 坐标/ 与/ 纹理/ 大小/ Res/ 的/ 乘积/ 来/ 计算/ ./ 图形/ 硬件/ 光栅/ 化/ 自动/ 把/ 每个/ 三角形/ 离散/ 成片/ 元/ ,/ 作为/ 一个/ 采样/ 点/ ./ 在/ 片元/ 处理器/ 里/ ,/ 我们/ 访问/ 该片/ 元/ 对应/ 的/ 光照/ 图/ 纹理/ 中/ 的/ 颜色/ ,/ 同时/ 访问/ 其/ 邻域/ 颜色/ ./ 通过/ 采用/ 类似/ Vedel/ 等/ 人/ [/ 21/ ]/ 的/ 方法/ ,/ 将/ 颜色/ 梯度/ 大于/ 一个/ 阙值/ 的/ 片元/ ,/ 标记/ 为/ 高频/ 片元/ ./ 我们/ 定义/ 这个/ 阙值/ 为/ Hfvalue/ ,/ 并且/ 可以/ 通过/ 调节/ 它/ 来/ 控制/ 细分/ 的/ 深度/ 以及/ 最终/ 的/ 效果/ ./ 这/ 一步/ 可以/ 通过/ GPU/ 快速/ 的/ 完成/ ,/ 大大减少/ 下/ 一步/ 细分/ 决策/ 所/ 需要/ 的/ 计算/ 量/ ./ 由于/ 光照/ 图/ 纹理/ 本身/ 存在/ 大量/ 的/ 无效/ 像素/ (/ 不/ 对应/ 任何/ 物体/ 表面/ 点/ 的/ 像素/ )/ ,/ 这步/ 结束/ 时/ 得到/ 的/ 标记/ 纹理/ 可能/ 会/ 产生/ 不/ 正确/ 的/ 情况/ ,/ 见图/ 5/ ./ 不过/ 我们/ 能够/ 通过/ 三角形/ 保守/ 光栅/ 化/ 和/ 使用/ 一个/ 标记/ 位来/ 标记/ 无效/ 的/ 像素/ ./ 图/ 5/ 纹理/ 空间/ 的/ 高频/ 采样/ 搜索/ (/ 正确/ 的/ 高频/ 区域/ (/ 中间/ 白色/ 框内/ )/ 、/ 错误/ 的/ 区域/ (/ 灰色/ )/ 和/ 输入/ 的/ 三角形/ )/ 5.1/ ./ 2/ 逐/ 像素/ 的/ 细分/ 模式/ 决策/ 上/ 一步/ 结束/ 时/ ,/ 我们/ 得到/ 一张/ 标记/ 纹理/ (/ MT/ )/ ,/ 其/ 像素/ 保存/ 了/ 每个/ 采样/ 的/ 标记/ 值/ ./ 一共/ 分为/ 3/ 类/ 像素/ :/ 无效/ 采样/ 、/ 有效/ 低频/ 采样/ 和/ 有效/ 高频/ 采样/ ./ 通过/ 使用/ MT/ 和/ 片元/ 着色器/ ,/ 我们/ 可以/ 解决/ 上/ 一节/ 提到/ 的/ 两个/ 问题/ ./ 与/ 上/ 一步/ 类似/ ,/ 算法/ 依然/ 使用/ FBO/ ,/ 在/ 2/ -/ D/ 纹理/ 空间/ 绘制/ 每个/ 三角形/ ,/ 同时/ 绑定/ MT/ 作为/ 输入/ 纹理/ 以/ 方便/ 查询/ ./ 在/ 片元/ 着色器/ 里/ ,/ 我们/ 逐/ 像素/ 地/ 判断/ 所属/ 三角形/ 的/ 细分/ 模式/ ,/ 进而/ 输出/ 结果/ ./ 由于/ 算法/ 的/ 细分/ 规则/ 是/ 1/ // 4/ 细分/ ,/ 即/ 每次/ 细分/ 一个/ 子/ 三角形/ 都/ 会/ 产生/ 4/ 个/ 小/ 三角形/ ,/ 我们/ 使用/ 四叉树/ 编码/ 来/ 保存/ 细分/ 模式/ ,/ 下面/ 详细描述/ 四叉树/ 编码/ 的/ 定义/ 和/ 逐/ 像素/ 构造/ 过程/ ./ 给定/ 一个/ 待/ 细分/ 的/ 三角形/ (/ 或子/ 三角形/ )/ Ti/ ,/ 只/ 可能/ 有/ 两种/ 形式/ :/ 上/ 三角/ 和/ 下/ 三角/ ./ 一旦/ 确定/ 要细/ Page6/ 分/ ,/ 按照/ 本文/ 的/ 细分/ 规则/ ,/ 将/ 被/ 细分/ 为/ 4/ 个子/ 三角形/ ./ 为了/ 编码/ 方便/ ,/ 我们/ 为/ 每个/ 细分/ 的/ 子/ 三角形/ 定义/ 一个/ 位置/ 符号/ Tpos/ ,/ 且/ 1/ / Tpos/ / 4/ ,/ 见图/ 6/ ./ 图/ 6/ 上/ 三角/ (/ 左图/ )/ 和/ 下/ 三角/ (/ 右图/ )/ (/ 数字/ 代表/ Tpos/ )/ 我们/ 使用/ 完全/ 四叉树/ 编码/ 来/ 保存/ 每个/ 三角形/ 的/ 细分/ 模式/ ./ 四叉树/ 每个/ 节点/ 代表/ 一个/ 可/ 细分/ 的/ 子/ 三角形/ ./ 四叉树/ 的/ 第/ 1/ 层根/ 节点/ 代表/ M/ =/ 1/ 的/ 三角形/ 模式/ ,/ 往下/ 第/ M/ 层/ 共有/ 4M/ -/ 1/ 个/ 节点/ ./ 每个/ 节点/ 保存/ 一个/ 数据/ 值/ ,/ 代表/ 当前/ 节点/ 所/ 对应/ 的/ 三角形/ 是否/ 需要/ 细分/ (/ 0/ :/ 不/ 需要/ 细分/ ;/ 1/ :/ 需要/ 细分/ )/ ./ 对/ M/ 层上/ 的/ 某/ 一个/ 节点/ n/ (/ 1/ / n/ / 4M/ -/ 1/ )/ ,/ 如果/ 需要/ 细分/ ,/ 则/ 其/ M/ +/ 1/ 层/ 对应/ 的/ 子/ 节点/ 为/ 4n/ -/ 3/ 、/ 4n/ -/ 2/ 、/ 4n/ -/ 1/ 、/ 4n/ ,/ 且/ 其/ 分别/ 对应/ 的/ Tpos/ 为/ 1/ 、/ 2/ 、/ 3/ 、/ 4/ ,/ 见图/ 7/ ./ 图/ 7/ 三角形/ 细分/ 模式/ 与/ 对应/ 的/ 四叉树/ (/ 上面/ 一行/ 代表/ 不同/ 最大/ 细分/ 层次/ 下/ 的/ 一种/ 三角形/ 细分/ 模式/ ;/ 下面/ 一行/ 代表/ 其/ 对应/ 的/ 四叉树/ 表示/ ,/ 我们/ 的/ 四叉树/ 都/ 是/ 完全/ 四叉树/ ,/ 为了/ 显示/ 目的/ ,/ 这里/ 隐藏/ 了/ 许多/ 为/ 0/ 的/ 节点/ )/ 有/ 了/ 四叉树/ 编码方式/ ,/ 下/ 一步/ 我们/ 需要/ 考虑/ 如何/ 在/ GPU/ 里/ 使用/ 它/ ./ 由于/ 片元/ 着色器/ 输出/ 是/ 像素/ ,/ 因此/ 我们/ 选择/ RGBA32/ 格式/ 纹理/ 作为/ FBO/ 的/ 输出/ ./ 另外/ 为了/ 描述/ 简单/ ,/ 我们/ 假定/ 最大/ 细分/ 层次/ M/ =/ 4/ ,/ 这样/ 我们/ 使用/ 一张/ 纹理/ 就/ 足够/ 了/ ./ 后面/ 的/ 实验/ 证明/ ,/ 对于/ 大部分/ 的/ 模型/ ,/ M/ =/ 4/ 的/ 细分/ 级别/ 已经/ 可以/ 满足/ 需求/ ./ 给定/ 一个/ RGBA32/ 格式/ 的/ 片元/ ,/ 我们/ 定义/ 编码表示/ 如图/ 8/ 所示/ ./ 其中/ 每个/ 字/ 段/ 占用/ 的/ 位数/ 和/ 代表/ 的/ 含义/ 如表/ 1/ 所示/ ./ 字段名/ 所/ 占/ 位数/ RG1G2G3G4B/ 和/ A/ 上面/ 介绍/ 了/ 四叉树/ 编码方式/ ,/ 下面/ 描述/ 如何/ 逐/ 像素/ 的/ 构造/ 各自/ 的/ 四叉树/ 模式/ ./ 算法/ 伪/ 代码/ 如/ 算法/ 1/ 所示/ ./ 算法/ 1/ ./ 逐/ 像素/ 的/ 细分/ 模式/ 决策/ ./ 1/ ./ 对/ 当前/ 片元/ p/ 计算/ 对应/ 的/ 纹理/ 坐标/ TCc2/ ./ 读取/ MT/ 纹理/ 获得/ 当前/ 片元/ 对应/ 的/ 标记/ Mc3/ ./ 根据/ Mc/ 对/ 当前/ 片元/ 分类/ :/ 4/ ./ 情况/ 1/ :/ Mc/ 是/ 无效/ 像素/ ,/ 输出/ 无效/ 像素/ ,/ 中止/ ;/ 5/ ./ 情况/ 2/ :/ Mc/ 是/ 有效/ 像素/ 6/ ./ 迭代/ :/ 找到/ p/ 在/ 当前/ 层次/ M/ 下/ 最近/ 的/ 子/ 三角形/ Tnear7/ ./ 计算/ p/ 在/ Tnear/ 里面/ 的/ 重心/ 插值/ 颜色/ Ci8/ ./ 从/ MT/ 中/ 获取/ p/ 的/ 颜色/ Cp9/ ./ 情况/ 1/ :/ Ci/ -/ Cc/ >/ Hfvalue10/ ./ 情况/ 2/ :/ Ci/ -/ Cc/ / Hfvalue/ (/ 1/ )/ 在/ 纹理/ 空间/ 绘制/ 每/ 一个/ 三角形/ ,/ 同时/ 给/ 三角形/ 绑定/ 3/ 个/ uniform/ 变量/ ,/ 存储/ 三角形/ 3/ 个/ 顶点/ 的/ 坐标/ v1/ 、/ v2/ 、/ v3/ (/ 纹理/ 空间/ )/ ./ 在/ 片元/ 着色器/ 里/ ,/ 给定/ 一个/ 片元/ ,/ 我们/ 把/ 它/ 看做/ 表面/ 的/ 一个/ 采样/ 点/ p/ ,/ 使用/ 式/ (/ 6/ )/ ~/ (/ 7/ )/ ,/ 在/ 光照/ 图/ 纹理/ 空间/ 找/ M/ =/ 0/ 层次/ 下/ 最近/ 的/ 子/ 三角形/ Tnear3/ 个/ 顶点/ 重心坐标/ 索引/ p1/ 、/ p2/ 、/ p3/ ./ (/ 2/ )/ 访问/ 光照/ 图/ 纹理/ ,/ 获取/ p/ 点/ 对应/ 的/ 颜色/ 值/ Cp/ ./ (/ 3/ )/ 根据/ 重心坐标/ p1/ 、/ p2/ 、/ p3/ 和/ 原/ 三角形/ 顶点/ v1/ 、/ v2/ 、/ v3/ ,/ 计算/ 子/ 三角形/ Tnear/ 顶点/ 的/ 纹理/ 坐标/ ,/ 访问/ 光照/ 图/ ,/ 获取/ p1/ 、/ p2/ 、/ p3/ 对应/ 的/ 颜色/ 值/ Cp1/ 、/ Cp2/ 、/ Cp3/ ./ (/ 4/ )/ 计算/ p/ 点/ 在/ Tnear/ 中/ 相对/ 与/ p1/ 、/ p2/ 、/ p3/ 的/ 重心坐标/ ,/ 并/ 根据/ Cp1/ 、/ Cp2/ 、/ Cp3/ ,/ 计算/ p/ 的/ 重心/ 插值/ 颜色/ Ci/ ./ (/ 5/ )/ 通过/ 比较/ Ci/ 与/ Cp/ ,/ 判断/ 是否/ 需要/ 继续/ 迭代/ 进行/ 下/ 一/ 层次/ 的/ 计算/ ./ 如/ 上述/ 所示/ ,/ 对于/ 层次/ 为/ M/ 的/ 子/ 三角形/ Tnear/ ,/ 如果/ 是/ 高频/ 采样/ ,/ 就/ 需要/ 对/ 其/ 进行/ 细分/ ,/ 并/ 执行/ 下/ 一层/ 判断/ ,/ 同时/ 要/ 修改/ 此时/ 三角形/ 对应/ 的/ 四叉树/ 编码/ ,/ 根据/ M/ 我们/ 可以/ 定位/ 要/ 修改/ 的/ 位置/ 在/ 哪个/ 字/ 段/ (/ 见/ Page7/ 表/ 1/ )/ ,/ 下面/ 还/ 需要/ 确定/ 具体/ 要/ 修改/ 哪一位/ ,/ 这/ 就/ 需要/ 判断/ Tnear/ 在/ 其/ 上/ 一级/ 父/ 三角形/ Tparent/ 下/ 的/ 位置/ Tpos/ ,/ 我们/ 使用/ 如下/ 公式/ 来/ 计算/ (/ 见图/ 9/ )/ :/ (/ 1/ )/ I/ (/ Tnear/ ,/ 1/ )/ =/ I/ (/ Tparent/ ,/ 1/ )/ ×/ 2/ 且/ (/ 2/ )/ I/ (/ Tnear/ ,/ 2/ )/ =/ I/ (/ Tparent/ ,/ 2/ )/ ×/ 2/ 且/ (/ 3/ )/ I/ (/ Tnear/ ,/ 3/ )/ =/ I/ (/ Tparent/ ,/ 3/ )/ ×/ 2/ 且/ (/ 4/ )/ 其它/ 情况/ ,/ 图/ 9/ 给/ 定子/ 三角形/ Tnear/ (/ △/ ABC/ )/ ,/ 判断/ 其/ 在/ 上级/ 图/ 10/ 逐/ 三角形/ 细分/ 模式/ 决策/ (/ 其中/ ,/ (/ a/ )/ 为/ 绘制/ 覆盖/ LT/ 的/ 大量/ 顶点/ ,/ 深色/ 点/ 组成/ 的/ 三角形/ 索引/ 为/ 1/ ,/ 浅色/ 点/ 组成/ 的/ 首先/ 绘制/ 大量/ 的/ 顶点/ ,/ 其/ 数量/ 为/ Res/ ×/ Res/ ,/ 如/ 5.1/ ./ 1/ 节/ 所示/ ,/ Res/ 为/ 光照/ 图/ 的/ 大小/ 同时/ 也/ 是/ LT/ 纹理/ 的/ 大小/ ./ 通过/ 设置/ 好/ 每个/ 顶点/ 的/ 位置/ ,/ 保证/ 这些/ 顶点/ 刚好/ 覆盖/ LT/ 大小/ 的/ 一个/ 矩形/ 区域/ ./ 为/ 加速/ 性能/ ,/ 我们/ 使用/ VBO/ (/ 顶点/ 缓存/ 对象/ )/ 来/ 存储/ 顶点/ ./ 输出/ 是/ 一张/ 1/ -/ D/ 纹理/ ,/ 其/ 大小/ 对应/ 三角形/ 的/ 个数/ ./ 每个/ 像素/ 保存/ 该/ 索引/ 下/ 三角形/ 的/ 细分/ 模式/ ./ 在/ 顶点/ 着色器/ 里/ ,/ 计算/ 出/ 每个/ 顶点/ 对应/ LT/ 纹理/ 中/ 的/ 纹理/ 坐标/ ,/ 从中/ 读取/ 三角形/ 细分/ 模式/ 和/ 三角形/ 索引/ ,/ 通过/ 索引/ 计算/ 该/ 三角形/ 正确/ 的/ 输出/ 位置/ ,/ 从/ 其中/ I/ (/ Ti/ ,/ x/ )/ 表示/ 三角形/ Ti/ 中/ 的/ 第/ x/ 个/ 顶点/ 的/ 重心坐标/ i/ 分量/ ,/ J/ (/ Ti/ ,/ x/ )/ 是/ j/ 分量/ ./ 根据/ 式/ (/ 10/ )/ ~/ (/ 13/ )/ ,/ 可以/ 快速/ 计算/ 出/ 每个/ 需要/ 细分/ 的/ 子/ 三角形/ 在/ 四叉树/ 编码/ 里/ 的/ 位置/ ,/ 从而/ 修改/ 标志/ 位/ ./ 算法/ 1/ 结束/ 后/ ,/ 就/ 得到/ 了/ 当前/ 片元/ 作为/ 采样/ 所/ 决定/ 的/ 三角形/ 的/ 细分/ 模式/ ,/ 刚好/ 对应/ 于/ 一棵/ 单支/ 四叉树/ ,/ 最后/ 通过/ 四叉树/ 编码/ 输出/ 为片/ 元/ 颜色/ ./ 5.1/ ./ 3/ 逐/ 三角形/ 细分/ 模式/ 决策/ 上/ 一步/ 结束/ 时/ ,/ 得到/ 了/ 一张/ 逐/ 像素/ 细分/ 模式/ 纹理/ (/ LT/ )/ ,/ 下面/ 需要/ 计算/ 每个/ 三角形/ 的/ 细分/ 模式/ ,/ 即将/ 每个/ 三角形/ 所属/ 所有/ 的/ 片元/ 对应/ 的/ 细分/ 模式/ 合并/ ,/ 其实质/ 是/ 对/ 多个/ 单支/ 四叉树/ 的/ 合并/ 操作/ ,/ 可以/ 通过/ 发射/ 法/ (/ Scatter/ )/ 或/ 吸收/ 法/ (/ Gather/ )/ 来/ 实现/ ./ 当前/ 的/ 片元/ 着色器/ 无法/ 实现/ 随机/ 写/ 操作/ ,/ 不/ 符合/ 发射/ 法/ 要求/ ;/ 如果/ 用/ 吸收/ 法/ ,/ 需要/ 多个/ Pass/ 的/ 渲染/ ,/ 由于/ 每个/ 三角形/ 所/ 包含/ 的/ 采样/ 个数/ 不同/ ,/ 效率/ 较/ 低/ ,/ 因此/ 也/ 不/ 适合/ 吸收/ 法/ ./ 本文/ 算法/ 使用/ 顶点/ 着色器/ 来/ 实现/ 单支/ 四叉树/ 的/ 合并/ 操作/ ,/ 流程/ 见图/ 10/ ./ 而/ 修改/ 顶点/ 的/ 位置/ gl/ _/ Position/ ./ 同时/ 将/ 细分/ 模式/ 通过/ varying/ 变量/ 传递/ 给/ 片元/ 着色器/ ./ 片元/ 着色器/ 仅/ 需要/ 输出/ 顶点/ 对应/ 的/ 三角形/ 细分/ 模式/ ./ 最后/ 通过/ 硬件/ 逻辑/ 位/ 或/ (/ GL/ _/ OR/ )/ 可以/ 保证/ 不同/ 的/ 细分/ 模式/ 编码/ 合并/ 在/ 一起/ ,/ 即/ 不同/ 的/ 单支/ 四叉树/ 合并/ 为/ 一个/ 四叉树/ ./ 这样/ 就/ 得到/ 了/ 每个/ 三角形/ 正确/ 的/ 细分/ 模式/ ./ 5.2/ 问题/ 分析/ 5.1/ 节/ 3/ 步/ 之后/ ,/ 得到/ 的/ 是/ 一张/ 1/ -/ D/ 三角形/ 细分/ 模式/ 纹理/ (/ SLT/ )/ ,/ 里面/ 存储/ 每个/ 三角形/ 的/ 细分/ 模式/ ,/ 下面/ 需要/ 讨论/ 其中/ 的/ 几个/ 问题/ :/ Page8/ 第/ 1/ 个/ 问题/ ,/ 在/ 5.1/ ./ 3/ 节中/ ,/ 要/ 从/ LT/ 里/ 读取/ 细分/ 模式/ 和/ 三角形/ 索引/ ,/ 索引/ 应该/ 是从/ 1/ 开始/ ,/ 最大/ 到/ 三角形/ 的/ 个数/ ./ 不过/ 会/ 有/ 一些/ 像素/ 读取/ 到/ 的/ 索引/ 值为/ 0/ ./ 这/ 是因为/ 光照/ 图/ 本身/ 会/ 存在/ 大量/ 的/ 无效/ 像素/ ,/ 这些/ 像素/ 会/ 影响/ 之后/ 的/ 步骤/ ,/ 从而/ 出现/ 不/ 属于/ 任何/ 三角形/ 的/ 像素/ ,/ 即/ 索引/ 为/ 0/ ./ 为了/ 处理/ 这/ 类/ 像素/ ,/ 有/ 两个/ 方法/ :/ (/ 1/ )/ 在/ 顶点/ 着色器/ 里/ ,/ 将/ 这类/ 像素/ 通过/ 设置/ gl/ _/ Position/ ,/ 使/ 其/ 投影/ 到/ 视口/ 之外/ ,/ 从而/ 不会/ 产生/ 片元/ ;/ (/ 2/ )/ 重新/ 设置/ 输出/ 纹理/ 的/ 大小/ 为/ 三角形/ 的/ 个数/ +/ 1/ ,/ 多余/ 的/ 一个/ 像素/ 用来/ 保存/ 这些/ 无效/ 像素点/ ./ 本文/ 算法/ 使用/ 第/ 2/ 种/ 方法/ ,/ 因为/ 它/ 还/ 可以/ 辅助/ 统计/ 无效/ 像素/ 的/ 个数/ ./ 第/ 2/ 个/ 问题/ ,/ 在/ 输出/ 纹理/ SLT/ 里会/ 出现/ 空洞/ ,/ 即/ 部分/ 位置/ 没有/ 三角形/ 索引/ 信息/ ./ 理论/ 上/ 讲/ ,/ 每个/ 三角形/ 都/ 有/ 一定/ 的/ 面积/ ,/ 其/ 在/ 光照/ 图/ 纹理/ 里/ 应该/ 都/ 占有/ 一定/ 数量/ 的/ 像素/ ,/ 因此/ 在/ SLT/ 里面/ 都/ 应该/ 能/ 找到/ 对应/ 的/ 位置/ 信息/ ./ 不过/ 由于/ 输入/ 的/ 光照/ 图/ 一般/ 经过/ 展/ UV/ 操作/ 和/ 烘焙/ 之后/ 生成/ ,/ 这/ 两个/ 阶段/ 的/ 误差/ 会/ 造成/ 部分/ 三角形/ 在/ 光照/ 图/ 纹理/ 中/ 的/ 投影/ 非常/ 小/ ,/ 甚至/ 不到/ 一个/ 像素/ ,/ 因此/ 产生/ 上述/ 问题/ ./ 不过/ ,/ 通过/ 实验/ 可以/ 发现/ ,/ 这些/ 特殊/ 三角形/ 在/ 物体/ 空间/ 往往/ 也/ 是/ 面积/ 很小/ 或者/ 狭长的/ 形状/ ,/ 我们/ 直接/ 为/ 这些/ 三角形/ 设置/ M/ =/ 0/ 的/ 细分/ 模式/ ,/ 并且/ 发现/ 这样/ 并/ 不会/ 影响/ 算法/ 效率/ 和/ 效果/ ./ 第/ 3/ 个/ 问题/ ,/ SLT/ 作为/ 1/ -/ D/ 纹理/ ,/ 其/ 大小/ 也/ 受到/ 当前/ 图形/ 硬件/ 的/ 限制/ ./ MeshColors/ [/ 8/ ]/ 中/ 提到/ ,/ 目前/ 1/ -/ D/ 纹理/ 的/ 最大/ 尺寸/ 为/ 4096/ ,/ 即/ 我们/ 只能/ 处理/ 不/ 超过/ 4096/ 个/ 三角形/ 的/ 模型/ ./ 这个/ 问题/ 可以/ 通过/ 多/ pass/ 渲染/ 或者/ 使用/ 2/ -/ D/ 或/ 3/ -/ D/ 纹理/ 的/ 方法/ 解决/ ./ 我们/ 实现/ 了/ 这/ 两种/ 方法/ ,/ 发现/ 后者/ 的/ 效率/ 要/ 更/ 高/ ,/ 另外/ 实验/ 中/ 使用/ 的/ 模型/ 三角形/ 数/ 一般/ 都/ 不/ 超过/ 百万/ 个/ ,/ 因此/ 一张/ 2/ -/ D/ 纹理/ 可以/ 满足要求/ ./ 另外/ 由于/ 算法/ 依赖/ 硬件/ 片/ 元逻辑/ 位/ 或/ 操作/ ,/ 当前/ 的/ 图形/ 硬件/ 还/ 不/ 支持/ RGBA32/ 浮点/ 格式/ 纹理/ 的/ 片/ 元逻辑/ 操作/ ,/ 因此/ 这/ 一步/ 我们/ 使用/ 的/ 是/ RGBAUI32/ 整数/ 纹理/ ./ 6/ 三角形/ 细分/ 及/ 缝合/ 目前为止/ ,/ 我们/ 已经/ 得到/ 了/ 每个/ 三角形/ 的/ 细分/ 模式/ ,/ 下/ 一步/ 需要/ 进行/ 三角形/ 的/ 细分/ ./ 如果/ 只是/ 简单/ 的/ 按/ 四叉树/ 编码/ 细分/ ,/ 会/ 产生/ T/ -/ vertices/ 孤立/ 点/ [/ 19/ ]/ ,/ 见图/ 11/ (/ a/ )/ 浅色/ 点/ ./ 为了/ 消除/ 孤立/ 点/ ,/ 还/ 需要/ 对/ 三角形/ 进行/ 适当/ 的/ 缝合/ 操作/ ./ 许多/ 文献/ (/ 如/ 文献/ [/ 19/ ]/ )/ 使用/ 塌陷/ 方法/ 来/ 处理/ 孤立/ 点/ ,/ 这种/ 方法/ 虽然/ 可以/ 解决/ 一定/ 的/ 问题/ ,/ 但是/ 不/ 适合/ 我们/ 的/ 细分/ 模式/ ,/ 另外/ 可能/ 会/ 带来/ 实时/ 渲染/ 时/ 的/ 光照/ 不/ 连续/ ./ 我们/ 提出/ 一种/ 针对/ 2/ -/ 幂次/ 细分/ 模式/ 的/ 缝合/ 方法/ ./ 图/ 11/ 三角形/ 细分/ 与/ 缝合/ 操作/ (/ (/ a/ )/ △/ ABC/ 内部/ 非/ 均匀/ 细分/ ,/ 与其/ 周围/ 三角形/ 也/ 有着/ 不同/ 的/ 细分/ 模式/ ,/ 产生/ T/ -/ vertices/ 孤立/ 点/ (/ 浅色/ )/ ;/ (/ b/ )/ 上/ 图/ :/ △/ ABC/ 采样/ 点/ 生成/ ,/ 内/ 采样/ (/ 中间色/ )/ 和/ 邻接/ 额外/ 采样/ (/ 深色/ )/ ;/ 下图/ :/ △/ ABC/ 子/ 三角形/ 遍历/ 及/ 内部/ 额外/ 采样/ 点/ 生成/ (/ 浅色/ )/ ;/ (/ c/ )/ 基于/ 采样/ 点/ 的/ 子/ 三角形/ 缝合/ 操作/ ;/ (/ d/ )/ △/ ABC/ 不/ 存在/ 额外/ 采样/ 点/ ,/ 正常/ 细分/ )/ 给定/ 初始/ 三角形/ △/ ABC/ ,/ 首先/ 从/ SLT/ 中/ 读取/ 其/ 细分/ 模式/ ./ 根据/ 细分/ 模式/ 中/ 的/ 四叉树/ 编码/ ,/ 我们/ 不/ 直接/ 细分/ 三角形/ ,/ 而是/ 先/ 遍历/ 其/ 所有/ 的/ 子/ 三角形/ ,/ 同时/ 建立/ 如下/ 数据结构/ :/ 原/ 三角形/ :/ △/ :/ index/ ,/ Adj1/ ,/ Adj2/ ,/ Adj3index/ 为/ 三角形/ 索引/ 号/ ,/ Adj1/ ,/ Adj2/ ,/ Adj3/ 是/ 三角形/ 三条/ 边/ 的/ 邻接/ 三角形/ 索引/ ./ 采样/ 点集/ S/ :/ S/ =/ {/ s1/ ,/ …/ ,/ sn/ }/ s/ :/ i/ ,/ jS/ 为/ 所有/ 子/ 三角形/ 的/ 顶点/ 采样/ 重心坐标/ 集合/ (/ 保存/ i/ 和/ j/ 索引/ 形式/ )/ ./ 边集/ E/ :/ E/ =/ {/ e1/ ,/ …/ ,/ en/ }/ ex/ :/ si/ ,/ sj/ ,/ sxE/ 为/ 所有/ 子/ 三角形/ 的/ 边/ 构成/ 的/ 集合/ ,/ ex/ 为/ 采样/ si/ 与/ sj/ 构成/ 的/ 边/ ,/ 不/ 分/ 先后顺序/ ,/ sx/ 为/ ex/ 上除/ 端点/ 外/ 的/ 其它/ 采样/ ,/ 即/ T/ -/ vertices/ 孤立/ 点/ (/ 见图/ 11/ (/ a/ )/ 浅色/ 点/ )/ ./ 子/ 三角形/ 集合/ T/ :/ T/ =/ {/ T1/ ,/ …/ ,/ Tn/ }/ Tx/ :/ si/ ,/ sj/ ,/ sk/ ,/ ei/ ,/ ej/ ,/ ekT/ 为/ 所有/ 子/ 三角形/ 的/ 集合/ ,/ 子/ 三角形/ Tx/ 保存/ 3/ 个/ 顶点/ 在/ S/ 中/ 的/ 索引/ si/ 、/ sj/ 、/ sk/ 和/ 三条/ 边/ 在/ E/ 中/ 的/ 索引/ ei/ 、/ ej/ 、/ ek/ ./ Page9/ 遍历/ 完/ 所有/ 的/ 子/ 三角形/ ,/ 首先/ 生成/ 三角形/ 内部/ 采样/ 点集/ S/ ,/ 如图/ 11/ (/ b/ )/ 中/ 中间色/ 点/ ./ 之后/ ,/ 对/ △/ ABC/ ,/ 的/ 3/ 条边/ ,/ 找/ 其/ 邻接/ 三角形/ 中/ 对应/ 边上/ 的/ 采样/ 点/ ,/ 插入/ 到/ S/ 中/ ,/ 可能/ 会/ 形成/ 一些/ 边界/ 上/ 的/ 孤立/ 点/ ,/ 如图/ 11/ (/ b/ )/ 中/ 深色/ 点/ ./ 接着/ 遍历/ 边集/ E/ ,/ 对/ 每/ 一条/ 边/ e/ ,/ 在/ S/ 中/ 找/ 该/ 边上/ 的/ T/ -/ vertices/ 孤立/ 采样/ 点集/ Sx/ ,/ 如图/ 11/ (/ b/ )/ 中/ 浅色/ 点/ ./ 这里/ 给定/ 一个/ 采样/ 点/ 重心坐标/ si/ ,/ 需要/ 判断/ 它/ 是否/ 在/ 边/ e/ 上/ ,/ 我们/ 采用/ 如下/ 方法/ 计算/ ./ 将/ 三角形/ 的/ 边/ 分为/ 3/ 类/ (/ 见图/ 12/ )/ :/ 平行线/ :/ i1/ =/ i2/ 右/ 斜线/ :/ j1/ =/ j2/ 左/ 斜线/ :/ 其它/ 情况/ 其中/ ,/ i1/ 、/ j1/ 和/ i2/ 、/ j2/ 是/ 边/ 的/ 顶点/ 重心坐标/ 索引/ ./ 给定/ 一个/ 采样/ si/ ,/ 其/ 重心坐标/ 索引/ 为/ ix/ 、/ jy/ ,/ 针对/ 不同/ 类型/ 的/ 边/ ,/ 可以/ 通过/ 下面/ 公式/ 判断/ 其/ 是否/ 在/ 边上/ :/ 采样/ 在/ 平行线/ 上/ :/ ix/ =/ i1/ =/ i2/ 且/ jy/ ∈/ (/ min/ (/ j1/ ,/ j2/ )/ ,/ max/ (/ j1/ ,/ j2/ )/ )/ 采样/ 在/ 右/ 斜线/ 上/ :/ jx/ =/ j1/ =/ j2/ 且/ ix/ ∈/ (/ min/ (/ i1/ ,/ i2/ )/ ,/ max/ (/ i1/ ,/ i2/ )/ )/ 采样/ 在/ 左/ 斜线/ 上/ :/ (/ ix/ -/ i1/ )/ ×/ (/ j2/ -/ jy/ )/ =/ (/ i2/ -/ ix/ )/ ×/ (/ jy/ -/ j1/ )/ 且/ (/ (/ i2/ -/ ix/ )/ // (/ ix/ -/ i1/ )/ )/ >/ 0/ 图/ 12/ 三角形/ 边/ e/ 分类/ (/ 空心/ 点为/ 端点/ ,/ 黑色/ 点为/ 边上/ 采样/ 点/ )/ 到此为止/ ,/ 我们/ 已经/ 计算/ 出/ △/ ABC/ 在/ 其/ 细分/ 模式/ 下/ 所有/ 子/ 三角形/ 以及/ 其/ 每条/ 边上/ 的/ T/ -/ vertices/ 孤立/ 点/ ./ 下/ 一步/ 我们/ 可以/ 对/ 存在/ 孤立/ 点/ 的/ 子/ 三角形/ 进行/ 缝合/ ,/ 具体方法/ 如图/ 11/ (/ c/ )/ 所示/ ./ 算法/ 首先/ 遍历/ 子/ 三角形/ 集合/ T/ ,/ 对/ 每/ 一个/ 子/ 三角形/ Ti/ ,/ 如果/ 其/ 边上/ 不/ 存在/ T/ -/ vertices/ ,/ 就/ 找/ 下/ 一个/ 子/ 三角形/ ;/ 否则/ 首先/ 找到/ Ti/ 中/ T/ -/ vertices/ 最多/ 的/ 边/ e/ ,/ 然后/ 找/ 其/ 最靠近/ 中心/ 的/ 采样/ 点/ s/ ,/ 连接/ s/ 于/ Ti/ 对角/ 顶点/ ,/ 构造/ 新/ 的/ 边/ enew/ ,/ 插入/ E/ ,/ 它/ 将子/ 三角形/ Ti/ ,/ 分成/ 两个/ 新/ 的/ 三角形/ T1/ 和/ T2/ ./ 将/ T1/ 和/ T2/ 插入/ T/ ,/ 同时/ 删除/ Ti/ ./ 继续/ 遍历/ ,/ 直到/ T/ 都/ 遍历/ 完/ 为止/ ./ 经过/ 上述/ 细分/ 和/ 缝合/ 操作/ ,/ 我们/ 实现/ 三角形/ 的/ 自/ 适应/ 细分/ 模式/ 同时/ 又/ 保证/ 三角形/ 之间/ 的/ 连续性/ 和/ 避免/ T/ -/ vertices/ 孤立/ 点/ ./ 7/ 顶点/ 颜色/ 优化/ 计算/ 细分/ 后/ 的/ 三角形/ ,/ 其/ 顶点/ 颜色/ 可以/ 通过/ 对/ 光照/ 图/ 进行/ 简单/ 点/ 采样/ 、/ 局部/ 过滤/ 平均/ 采样/ 、/ 或者/ 采用/ 最小/ 二乘/ 优化/ 的/ 方法/ 计算/ ./ 正如/ 文献/ [/ 10/ ]/ 中/ 提到/ 的/ ,/ 使用/ 最小/ 二乘/ 最优化/ 计算/ 得到/ 的/ 顶点/ 颜色/ ,/ 经过/ 插值/ 后/ 效果/ 最好/ ./ 这种/ 方法/ 可以/ 避免/ 细分/ 过度/ ,/ 同时/ 可以/ 达到/ 近似/ 纹理/ 烘焙/ 的/ 效果/ ./ 和/ 文献/ [/ 9/ -/ 10/ ]/ 类似/ ,/ 我们/ 也/ 是/ 用/ 最小/ 二乘/ 优化/ 方法/ ./ 不同/ 的/ 是/ ,/ 我们/ 不/ 需要/ 像/ 文献/ [/ 10/ ]/ 中/ 在/ 物体/ 空间/ 做泊松/ 采样/ ./ 我们/ 使用/ 光照/ 图/ 纹理/ 作为/ 采样/ 集/ ./ 给定/ 采样/ 集/ :/ 其中/ P/ 是/ 光照/ 图/ 纹理/ 中/ 的/ 采样/ 集/ ,/ pi/ 是/ 其中/ 的/ 一个/ 像素/ 采样/ ,/ n/ 是/ P/ 中/ 的/ 有效/ 像素/ 采样/ 数/ ./ 我们/ 可以/ 使用/ 参数/ Res/ 来/ 控制/ n/ 的/ 大小/ ./ 假定/ I/ (/ p/ )/ 是/ p/ 点/ 的/ 颜色/ ,/ f/ (/ p/ )/ 是/ p/ 在/ 所属/ 三角形/ 内/ 的/ 重心/ 插值/ 颜色/ ,/ 则/ 最小/ 二乘/ 错误率/ E/ 可以/ 表示/ 成/ :/ 为了/ 计算/ E/ 的/ 最小值/ ,/ 对/ 其/ 两边/ 求导/ 可以/ 推出/ 如下/ 形式/ 的/ 线性方程/ :/ 其中/ ,/ 其中/ ,/ S/ △/ 是/ 三角形/ 的/ 面积/ 和/ 公式/ ,/ Tij/ 是/ 包含/ 顶点/ i/ 和/ j/ 的/ 三角形/ 集合/ ,/ Fi/ 是/ 包含/ 顶点/ i/ 的/ 三角形/ 集合/ ,/ Hi/ 是/ Fi/ 对应/ 光照/ 图中/ 的/ 采样/ 集合/ ,/ bary/ (/ p/ ,/ i/ )/ 是/ 相对/ 顶点/ i/ 的/ 重心坐标/ 分量/ ./ 我们/ 使用/ UMFPack/ 开源/ 数学/ 库/ 求解/ 方程/ (/ 18/ )/ ./ 最后/ 可以/ 计算/ 出/ 最小/ 二乘/ 意义/ 上/ 的/ 顶点/ 优化/ 颜色/ ./ 8/ 实验/ 结果/ 和/ 分析/ 本文/ 算法/ 的/ 实现/ 平台/ 为/ Core4X26003/ ./ 4GHzCPU/ ,/ 4.0/ GBRAM/ ,/ NVidiaGeforce550GTXGPU/ ./ 编程语言/ 为/ C++/ 和/ Opengl/ ./ GPU/ 着色/ 语言/ 使用/ GLSL/ ./ 为了/ 高质量/ 的/ 视觉效果/ ,/ 所有/ 的/ 实验/ 均/ 采用/ 8/ 倍/ MSAA/ (/ 多重/ 采样/ 反/ 走样/ )/ 技术/ ./ Page10/ 我们/ 的/ 目标/ 之一/ 是/ 权衡/ 效率/ 与/ 效果/ ,/ 相对/ 纹理/ 烘焙/ 可以/ 节省/ 大量/ 的/ 实时/ 存储/ ./ 我们/ 使用/ 3/ 个/ 场景/ 来/ 验证/ 算法/ 效率/ 和/ 效果/ :/ 简单/ 的/ 平面/ 场景/ ,/ 见图/ 13/ ;/ 精细/ 的/ 人头/ 模型/ ,/ 见图/ 14/ ;/ 复杂/ 的/ 室内/ 场景/ ,/ 见图/ 15/ ./ 我们/ 实现/ 了/ 点/ 采样/ 顶点/ 颜色/ 方法/ ,/ 最小/ 二乘/ 顶点/ 颜色/ 计算方法/ 和/ 纹理/ 贴图/ 的/ 方法/ ,/ 并且/ 与/ 本文/ 算法/ 做/ 了/ 效果/ 与/ 效率/ 的/ 对比/ ./ 理论/ 上/ 讲/ ,/ 点/ 采样/ 顶点/ 颜色/ 的/ 方法/ (/ 类似/ 顶点/ 烘焙/ )/ 需要/ 最少/ 的/ 存储/ 并/ 占用/ 最少/ 的/ 顶点/ ./ 其/ 缺点/ 就是/ 受/ 当前/ 硬件/ 只/ 支持/ 线性插值/ 的/ 限制/ ,/ 效果/ 并/ 不好/ ,/ 如图/ 13/ 和/ 图/ 15/ ./ 最小/ 二乘/ 顶点/ 计算方法/ 通过/ 全局/ 最优/ 最小/ 二乘/ 计算/ ,/ 对于/ 大部分/ 足够/ 细分/ 的/ 模型/ ,/ 可以/ 产生/ 不错/ 的/ 视觉效果/ ,/ 但是/ 不太/ 适合/ 包含/ 大/ 三角形/ 的/ 模型/ ,/ 如图/ 13/ ./ 本文/ 算法/ 结合/ 自/ 适应/ 细分/ 技术/ ,/ 经过/ 快速/ 的/ 后处理/ 工作/ ,/ 不仅/ 可以/ 达到/ 较/ 高/ 的/ 实时/ 帧/ 率/ ,/ 还/ 可以/ 近似/ 纹理/ 烘焙/ 的/ 效果/ ,/ 见图/ 15/ ./ 图/ 14/ 中/ ,/ 我们/ 使用/ 一个/ 包含/ 5.8/ K/ 顶点/ ,/ 11.5/ K/ 三角形/ 的/ 精细/ 人头/ 模型/ 来/ 验证/ 算法/ ./ 从图/ 中/ 可/ 看出/ ,/ 最小/ 二乘/ 方法/ 也/ 可以/ 达到/ 近似/ 的/ 效果/ ,/ 不过/ 在/ 耳朵/ 和/ 嘴巴/ 处/ 的/ 细节/ 表现/ 不如/ 本文/ 的/ 算法/ ./ 上述/ 3/ 个/ 实验/ 表明/ ,/ 本文/ 算法/ 更/ 适合/ 于/ 粗糙/ 模型/ 和/ 细节/ 的/ 显示/ ./ 表/ 2/ 记录/ 了/ 实验/ 的/ 量化/ 数据/ 对比/ ./ 其中/ 顶点/ 包括/ 了/ 纹理/ 边界/ 复制/ 过/ 的/ 顶点/ (/ 拥有/ 不同/ 纹理/ 坐标/ 的/ 同样/ 的/ 顶点/ )/ ./ 本文/ 的/ 光照/ 图均/ 使用/ 3dsMax/ 和/ Maya/ 渲染/ ,/ 渲染器/ 使用/ Vray/ 和/ Mentalray/ 光线/ 跟踪/ 渲染器/ ./ 纹理/ 格式/ 为/ RGBA8/ ./ 纹理/ 分辨率/ Res/ 使用/ 标准/ 的/ 1024/ 大小/ ./ 从表/ 2/ 中/ 可以/ 看出/ ,/ 算法/ 最/ 耗时/ 的/ 步骤/ 主要/ 是/ CPU/ 中/ 细分/ 缝合/ 和/ 优化/ 顶点/ 颜色/ 计算/ ,/ 但/ 都/ 控制/ 在/ 1s/ 以内/ ./ 通过/ 自/ 适应/ 的/ 增加/ 少量/ 的/ 三角形/ ,/ 算法/ 可以/ 节省/ 80/ %/ 以上/ 的/ 存储/ ,/ 并/ 可以/ 提高/ 1/ %/ ~/ 9/ %/ 以上/ 的/ 帧/ 率/ ./ 本文/ 算法/ 其中/ 一个/ 优点/ 就是/ 可以/ 通过/ Hfvalue/ 灵活/ 地/ 控制/ 细分/ 度/ 以及/ 最终/ 的/ 效果/ ./ 我们/ 使用/ 一个/ 3K/ 三角形/ 的/ 粗糙/ 模型/ 来/ 验证/ ./ Hfvalue/ 设置/ 越小/ ,/ 我们/ 可以/ 获得/ 越/ 精确/ 的/ 实时/ 效果/ ,/ 图/ 16/ 演示/ 了/ 不同/ 参数/ 控制/ 下/ 的/ 细分/ 效果/ ./ 最后/ 一个/ 对比/ 实验/ ,/ 本文/ 算法/ 与/ 逐/ 三角形/ 的/ 均匀/ 细分/ 的/ 方法/ 做/ 了/ 对比/ (/ 类似/ 文献/ [/ 18/ ]/ 与/ 文献/ [/ 20/ ]/ 中/ 的/ 细分/ 规则/ )/ ,/ 见图/ 17/ ./ 这些/ 自/ 适应/ 方法/ 虽然/ 可以/ 控制/ 不同/ 三角形/ 的/ 多/ 分辨率/ ,/ 但是/ 对/ 三角形/ 内部/ ,/ 往往/ 采取/ 均匀/ 细分/ 方法/ ,/ 这样/ 会/ 产生/ 大量/ 的/ 三角形/ ./ 本文/ 算法/ 可以/ 控制/ 子/ 三角形/ 级别/ 的/ 自/ 适应/ 细分/ ,/ 对/ 三角形/ 内部/ 也/ 支持/ 非/ 均匀/ 细分/ ./ 图/ 17/ 可以/ 看出/ ,/ 在/ 设定/ 同样/ 最大/ 细分/ 层次/ 下/ ,/ 本文/ 算法/ 不仅/ 可以/ 保持/ 绘制/ 效果/ ,/ 而且/ 可以/ 减少/ 接近/ 15/ %/ 的/ 三角形/ 数/ ./ Page11/ 表/ 2/ 环境/ 遮挡/ 烘焙/ 后/ 的/ 测试/ 场景/ (/ Tps/ :/ 点/ 采样/ 顶点/ 颜色/ 计算/ ;/ Tls/ :/ 最小/ 二乘/ 顶点/ 颜色/ 计算/ ;/ Tours/ :/ 本文/ 算法/ ;/ Ttex/ :/ 纹理/ 方法/ ./ 步/ 1/ ~/ 步/ 3/ 表示/ 本文/ 算法/ GPU/ 中/ 的/ 3/ 个/ 步骤/ ./ 细分/ 与/ 求解/ 包括/ 三角形/ 细分/ 缝合/ 以及/ 优化/ 顶点/ 颜色/ 计算/ 时间/ ./ Final/ // rate/ 记录/ 了/ 实时/ 绘制/ 时/ 的/ 帧/ 率/ 及/ 相对/ 纹理/ 方法/ 的/ 帧/ 率/ 增加/ 倍率/ (/ 黑体/ 百分数/ )/ ./ 最后/ 1/ 列是/ 本文/ 算法/ 与/ 纹理/ 方法/ 在/ 存储量/ 上/ 的/ 对比/ 和/ 减少/ 存储/ 的/ 百分比/ (/ 黑体/ 百分数/ )/ )/ 步/ 1/ 步/ 2/ 步/ 3/ 细分/ 与/ 场景/ 平面/ 25/ // 15432/ // 282137013700.004/ ms0/ ./ 002ms0/ ./ 84ms0/ ./ 82ms1355/ // 2/ %/ 13305.23/ K/ // 人头/ 5.8/ K/ // 房间/ 9.8/ K/ // 图/ 17/ 本文/ 子/ 三角形/ 级别/ 的/ 细分/ 算法/ 与/ 三角形/ 级别/ 均匀/ 细分/ 算法/ 的/ 对比/ (/ 三角形/ 细分/ 最大/ 层次/ 设定/ 为/ M/ =/ 4/ ,/ 左列/ :/ 三角形/ 级别/ 均匀/ 细分/ 效果/ 与/ 线/ 框图/ (/ 共/ 20528/ 个/ 三角形/ )/ ;/ 右列/ :/ 本文/ 子/ 三角形/ 级别/ 细分/ 效果/ 与/ 线/ 框图/ (/ 生成/ 17032/ 个/ 三角形/ )/ Tours/ 为了/ 验证/ 算法/ 的/ 适用性/ ,/ 我们/ 测试/ 了/ 其它/ 3/ 个/ 不同/ 类型/ 光照/ 贴图/ 的/ 场景/ :/ 环境/ 遮挡/ 烘焙/ 下/ 的/ 室外/ 城堡/ 、/ 面积/ 光源/ 影响/ 下/ 的/ 斯坦福/ Bunny/ 模型/ 软/ 阴影/ 效果/ 场景/ 、/ 间接/ 光照/ 下/ 的/ CornelBox/ 场景/ ,/ 见图/ 18/ ./ 本文/ 算法/ 适用/ 于/ 许多/ 基于/ 光照/ 贴图/ 的/ 场景/ 的/ 实时/ 渲染/ ./ 图/ 18/ 本文/ 算法/ 处理/ 不同/ 方式/ 的/ 烘焙/ 贴图/ 后/ 的/ 效果/ Page129/ 总结/ 及/ 未来/ 工作/ 本文/ 提出/ 一种/ 基于/ 光照/ 图/ 纹理/ 的/ 自/ 适应/ 三角形/ 细分/ 算法/ ,/ 可以/ 在/ 节省/ 存储/ 的/ 同时/ ,/ 满足/ 实时/ 渲染/ 的/ 需求/ ./ 通过/ 快速/ 的/ 后处理/ 工作/ ,/ 我们/ 可以/ 通过/ 对模型/ 做/ 最小化/ 的/ 修改/ ,/ 保证/ 其/ 细分/ 后/ 可以/ 达到/ 纹理/ 烘焙/ 级别/ 的/ 视觉效果/ ./ 顶点/ 烘焙/ 在/ 大/ 三角形/ 之上/ 的/ 走样/ 可以/ 完全避免/ ,/ 另外/ 通过/ 自/ 适应/ 的/ 细分/ 模式/ ,/ 可以/ 控制/ 子/ 三角形/ 级别/ 的/ 细分/ ,/ 比起/ 传统/ 的/ 均匀/ 细分/ 来说/ ,/ 还/ 可以/ 减少/ 细分/ 后/ 的/ 三角形/ 数量/ ./ 最后/ ,/ 通过/ 一个/ 控制参数/ Hfvalue/ 还/ 可以/ 灵活/ 地/ 控制/ 细分/ 效果/ ./ 算法/ 实现/ 简单/ 、/ 鲁棒/ ,/ 而且/ 适合/ 于/ 当前/ 的/ 图形/ 硬件/ ./ 目前/ 该/ 算法/ 可/ 改进/ 方向/ 主要/ 有/ 2/ 个/ :/ (/ 1/ )/ 由于/ 算法/ 在/ GPU/ 计算/ 逐/ 三角形/ 的/ 细分/ 模式/ 时/ ,/ 采用/ 完全/ 四叉树/ 编码/ 保存/ 细分/ 模式/ ,/ 并/ 使用/ RGBA32UI/ 格式/ 纹理/ 作为/ 输出/ ,/ 一张/ 128/ 位/ 的/ 纹理/ 最/ 多/ 只能/ 保存/ M/ =/ 4/ 层次/ 的/ 细分/ 模式/ (/ R/ 组件/ 要/ 保存/ 三角形/ 索引/ )/ ,/ 虽然/ 这/ 可以/ 满足/ 大部分/ 需求/ ,/ 但/ 对于/ 一些/ 具有/ 高频/ 信息/ 的/ 超大/ 三角形/ ,/ 层次/ 4/ 的/ 细分/ 还/ 不足以/ 很/ 好/ 地/ 恢复/ 光照/ 信息/ ,/ 如果/ 使用/ 多/ 张/ 纹理/ 保存/ 模式/ ,/ 又/ 会/ 影响/ GPU/ 步骤/ 的/ 效率/ ;/ (/ 2/ )/ 算法/ 使用/ 细分/ 后/ 的/ 三角形/ 的/ 顶点/ 颜色/ 来/ 逼近/ 光照/ 图/ 信号/ ,/ 对于/ 大规模/ 的/ 场景/ ,/ 还是/ 会/ 产生/ 大量/ 的/ 细分/ 三角形/ ,/ CPU/ 到/ GPU/ 的/ 数据传输/ 以及/ 光栅/ 化/ 本身/ 可能/ 会/ 成为/ 实时/ 绘制/ 的/ 瓶颈/ ./ 因此/ ,/ 解决/ 这/ 两个/ 问题/ 将/ 是/ 我们/ 下/ 一步/ 的/ 工作/ 重点/ ,/ 我们/ 现在/ 也/ 在/ 考虑/ 结合/ 类似/ 文献/ [/ 18/ ]/ 中/ 预存/ 模式/ 的/ 方法/ 来/ 改进/ ./ 最后/ ,/ 我们/ 希望/ 该/ 方法/ 可以/ 应用/ 于/ 光照/ 烘焙/ 、/ 产品设计/ 与/ 展示/ 、/ 建模/ 辅助/ 、/ 家居设计/ 等/ 实时/ 预览/ 系统/ ./ 在/ 此基础/ 上/ ,/ 我们/ 计划/ 开发/ 一种/ 场景/ 可视化/ 和/ 实时/ 预览/ 工具/ ,/ 作为/ 设计/ 和/ 建模/ 的/ 辅助/ 工作/ ./ 致谢/ 非常感谢/ 匿名/ 审稿/ 专家/ 的/ 宝贵意见/ !/ 

