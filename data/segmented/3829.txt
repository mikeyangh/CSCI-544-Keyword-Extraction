Page1/ 图形/ 处理器/ 通用/ 计算/ 关键技术/ 研究/ 综述/ 王/ 海峰/ 2/ )/ ,/ 3/ )/ 陈庆奎/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 上海理工大学/ 光电/ 信息/ 与/ 计算机/ 工程学院/ 上海/ 200093/ )/ 2/ )/ (/ 上海理工大学/ 管理/ 学院/ 上海/ 200093/ )/ 3/ )/ (/ 临沂/ 大学/ 信息/ 学院/ 山东/ 临沂/ 276002/ )/ 摘要/ 当前/ 图形/ 处理器/ 的/ 通用/ 计算/ 取得/ 长足发展/ ,/ 为/ 适应/ 通用/ 计算/ 图形/ 处理器/ 在/ 硬件/ 体系结构/ 和/ 软件/ 支持/ 方面/ 完成/ 相应/ 调整/ 和/ 改变/ ,/ 面对/ 各种/ 应用领域/ 中/ 数据/ 规模/ 增大/ 的/ 趋势/ ,/ 多/ GPU/ 系统/ 和/ GPU/ 集群/ 的/ 研究/ 应用/ 日趋/ 增多/ ./ 以流/ 处理器/ 及/ 图形/ 处理器/ 硬件/ 体系/ 为/ 依据/ ,/ 介绍/ 学术/ 和/ 工业/ 领域/ 中流/ 处理器/ 及/ 图形/ 处理器/ 体系/ 变化趋势/ ./ 从/ 软件/ 编程/ 环境/ 、/ 硬件/ 计算/ 与/ 通信/ 等/ 方面/ 展开讨论/ ,/ 阐述/ 通用/ 计算/ 中/ 图形/ 处理器/ 的/ 关键问题/ ,/ 包括/ 编程/ 模型/ 及/ 语言/ 的/ 发展/ 和/ 方向/ ,/ 存储/ 模型/ 的/ 量化/ 研究/ 、/ 访存/ 模式/ 和/ 行为/ 的/ 优化/ 以及/ 分布式/ 存储管理/ 的/ 热点问题/ ,/ 典型/ 通信/ 原型/ 系统/ 的/ 对比/ 及/ 通信/ 难点/ 的/ 分析/ ,/ GPU/ 片内/ 和/ 片间/ 的/ 负载/ 均衡/ ,/ 可靠性/ 和/ 容错/ 计算/ ,/ GPU/ 功耗/ 评测/ 及/ 低功耗/ 优化/ 的/ 研究进展/ ./ 综述/ 在/ 海量/ 数据处理/ 、/ 智能/ 计算/ 、/ 复杂/ 网络/ 、/ 集群/ 应用领域/ 中/ 图形/ 处理器/ 的/ 研究进展/ 及/ 成果/ ./ 总结/ 在/ 通用/ 计算/ 发展/ 中/ 存在/ 的/ 技术/ 问题/ 和/ 未来/ 挑战/ ./ 关键词/ 图形/ 处理器/ ;/ 通用/ 计算/ ;/ 可编程/ 性/ ;/ GPU/ 集群/ 1/ 引言/ 计算机/ 图形/ 处理器/ GPU/ (/ GraphicsProcessingUnit/ )/ 具有/ 极高/ 计算/ 性能/ 和/ 相对/ 廉价/ 的/ 成本/ ,/ 以/ 超过/ 摩尔定律/ 的/ 速度/ 更新/ 硬件/ ,/ 从/ 2003/ 年/ 后/ 在/ 通用/ 计算/ 领域/ 图形/ 处理器/ GPGPU/ (/ General/ -/ PurposeComputingGraphicsProcessingUnit/ )/ 取得/ 长足发展/ ./ 在/ 学术界/ 人们/ 研制/ 了/ 以下/ 典型/ 处理器/ 芯片/ :/ 斯坦福大学/ 的/ Imagine/ 、/ Merrimac/ 及/ 国防科学技术大学/ 的/ 飞腾/ FT64/ [/ 1/ ]/ ,/ 而/ 飞腾/ 处理器/ 已/ 成功/ 应用/ 于/ “/ 天河/ 一号/ ”/ 超级计算机/ 的/ 设计/ 中/ ./ 在/ 工业界/ Nvidia/ 、/ AMD/ 等/ 公司/ 持续/ 更新/ 其/ GPU/ 硬件/ 产品/ ,/ 利用/ 推广/ 软件/ 的/ 方式/ 来/ 扩大/ 各自/ 硬件/ 产品/ 的/ 生态圈/ ,/ 目前/ Nvidia/ 在/ 通用/ 计算/ 领域/ 中/ 成果/ 显著/ ./ 国内/ 吴恩华/ 教授/ [/ 2/ -/ 3/ ]/ 总结/ 了/ 2004/ 年/ 之前/ GPU/ 的/ 发展/ 历史/ 和/ 现代/ GPU/ 基本/ 结构/ ,/ 阐述/ 了/ 通用/ 计算/ 的/ 技术/ 原理/ 、/ 软件工具/ 及/ 详细/ 的/ 发展/ 之/ 路/ ,/ 总结/ 了/ 各种/ 应用领域/ 的/ 进展/ ,/ 如/ 流体/ 模拟/ 、/ 代数/ 计算/ 、/ 数据库/ 应用/ 、/ 频谱/ 分析/ 等/ ./ 国外/ Owens/ 研究/ 团队/ 综述/ 了/ 2008/ 年/ 之前/ GPGPU/ 的/ 硬件/ 及/ 软件/ 方面/ 的/ 应用/ 进展/ [/ 4/ -/ 5/ ]/ ,/ 分别/ 从/ GPU/ 体系/ 、/ 计算/ 编程/ 模型/ 、/ 软件开发/ 环境/ 和/ 编程语言/ 等/ 方面/ 作/ 了/ 详细/ 介绍/ ;/ 然后/ 重点/ 分析/ 了/ GPU/ 计算/ 中/ 的/ 关键技术/ 和/ 算法/ 问题/ ,/ 即原/ 语法/ 和/ 排序/ 、/ 数据库/ 查询/ 、/ 微分方程/ 、/ 线性代数/ 中/ 的/ 算法/ ,/ 这些/ 算法/ 注重/ 提高/ 数据/ 并行性/ 、/ 减少/ SIMD/ 线程/ 分歧/ 执行/ 、/ 最大化/ 算术/ 密度/ 及/ 提高/ 流/ 带宽/ 4/ 个/ 方面/ 的/ 优化/ 研究/ ;/ 最后/ 介绍/ 在/ 游戏/ 物理/ 、/ 科学计算/ 领域/ 中/ 的/ 具体/ 实例/ ./ 本文/ 重点/ 关注/ 最近/ 3/ 年内/ GPGPU/ 发展/ 过程/ 中/ 关键技术/ 的/ 研究/ 与/ 进展/ ,/ 特别/ 是/ 由于/ 海量/ 数据处理/ 的/ 需要/ ,/ 单/ 节点/ GPU/ 受到/ 硬件/ 限制/ ,/ 多/ GPU/ 系统/ 和/ GPU/ 集群/ 的/ 应用/ 研究/ 成为/ 新/ 热点/ ./ 主要/ 包括/ 以下/ 几个/ 方面/ :/ (/ 1/ )/ GPU/ 芯片/ 特点/ 及/ 体系/ 更新/ ,/ 以此/ 为/ 基础/ 展开/ 存储/ 、/ 通信/ 及/ 编程/ 模型/ 等/ 方面/ 的/ 论述/ ;/ (/ 2/ )/ GPU/ 体系/ 变化/ 对/ 编程/ 模型/ 的/ 影响/ ,/ 编程语言/ 的/ 发展趋势/ ;/ (/ 3/ )/ 对/ 存储/ 模型/ 及/ 性能/ 优化/ 的/ 分析/ ;/ (/ 4/ )/ 通信/ 是/ 影响/ 并行计算/ 性能/ 的/ 重要/ 因素/ ,/ 分/ 垂直/ 和/ 水平/ 通信/ 两个/ 方面/ 阐述/ 现有/ 研究成果/ 及/ 存在/ 的/ 问题/ ;/ (/ 5/ )/ 在/ 单/ GPU/ 和/ GPU/ 集群/ 范围/ 内/ 讨论/ 负载/ 均衡/ 问题/ ;/ (/ 6/ )/ 可靠性/ 分析/ 及/ 容错/ 计算/ ;/ (/ 7/ )/ 低功耗/ 优化/ 及/ 绿色/ 计算/ ./ 本文/ 第/ 2/ 节/ 介绍/ GPU/ 体系/ 的/ 发展/ 变化/ ,/ 特别/ 是/ 工业界/ 中/ 典型/ 产品/ 的/ 对比/ ;/ 第/ 3/ 节/ 介绍/ GPGPU/ 中/ 关键技术/ 的/ 研究/ 及/ 进展/ ,/ 指出/ 现有/ 研究成果/ 存在/ 的/ 问题/ 和/ 发展/ 思路/ ;/ 第/ 4/ 节/ 简述/ 非/ 图形/ 计算/ 应用/ 和/ 集群/ 应用/ 中/ 的/ 新/ 成果/ ;/ 最后/ 总结/ 现有/ 研究/ 面临/ 的/ 挑战/ 和/ 展望未来/ 工作/ ./ 2GPU/ 体系/ 及/ 发展/ 2.1/ GPU/ 体系/ 的/ 通用/ 计算/ 历程/ 从/ 芯片/ 体系/ 的/ 演化/ 能/ 看出/ GPU/ 向/ 通用/ 计算/ 的/ 发展趋势/ ./ 在/ 早期/ 固定/ 图形/ 流水线/ 模式/ 下/ ,/ 随着/ 图形/ 计算/ 需求/ 复杂性/ 的/ 提高/ ,/ 处于/ 图形/ 流水线/ 中/ 的/ 顶点/ 处理器/ 、/ 几何/ 处理器/ 、/ 像素/ 与/ 子素/ 处理器/ 等/ 可编程/ 性/ 得到/ 增强/ [/ 3/ ]/ ,/ 不仅/ 使/ 处理器/ 摆脱/ 固定/ 流水线/ 的/ 禁锢/ 成为/ 可能/ ,/ 而且/ 逐步/ 表现/ 出/ 通用/ 计算/ 的/ 能力/ ./ 为/ 解决/ GPU/ 片内/ 负载/ 均衡/ 问题/ ,/ 统一/ 渲染/ 处理器/ (/ ShaderProcessor/ )/ 取代/ 各种/ 可编程/ 部件/ ,/ 这/ 就/ 出现/ 了/ 通用/ 计算/ GPU/ 的/ 雏形/ [/ 5/ ]/ ./ 而流/ 处理器/ 在/ 图形/ 处理器/ 中/ 的/ 应用/ 奠定/ GPU/ 通用/ 计算/ 的/ 基础/ ./ 流/ 处理器/ 是/ 在/ 流/ 计算/ 模型/ 上/ 充分考虑/ 并发/ 和/ 通信/ 的/ 计算/ 体系/ ./ 对/ 计算/ 单元/ 精简/ 动态控制/ 设计/ ,/ 如/ 去除/ 分支/ 预测/ 、/ 乱序/ 控制/ 逻辑/ 、/ 内存/ 预取/ 等/ 功能/ ,/ 通过/ 降低/ 硬件/ 复杂性/ 达到/ 提高/ 运算/ 单元/ 密度/ 的/ 目的/ ;/ 为/ 维护/ 数据/ 局部性/ 和/ 并发/ 性/ ,/ 流/ 处理器/ 有/ 多层/ 存储体系/ ,/ 一般/ 分片/ 上/ 本地/ 存储器/ 、/ 流/ 寄存器/ 文件/ 和/ 片/ 外存储器/ 3/ 部分/ ./ 流/ 处理器/ 的/ 控制/ 部分/ 即流/ 控制器/ ,/ 负责/ 指令/ 发射/ 、/ 流/ 数据/ 装载/ 和/ 与/ 主机/ 通信/ ;/ 外部/ 存储/ 控制器/ 负责/ 片/ 外存储器/ 与/ 外部/ DRAM/ 的/ 数据交换/ ./ 各种/ 流/ 处理器/ 的/ 主要/ 差别/ 是/ 算术/ 计算/ 单元/ 的/ 类型/ 和/ 数量/ 、/ ALU/ 集群/ 数量/ 以及/ 各级/ 存储器/ 的/ 容量/ 与/ 带宽/ ./ 2.2/ 学院派/ 流/ 处理器/ Imagine/ [/ 6/ -/ 7/ ]/ 是/ 斯坦福大学/ 的/ 研究/ 项目/ ,/ 并且/ 在/ Intel/ 公司/ 和/ 德州仪器/ 公司/ 的/ 支持/ 下/ 实现/ 第一款/ 流/ 处理器/ 芯片/ ./ Imagine/ 中有/ 8/ 个/ ALUClusters/ ,/ 而/ 每个/ 计算/ 簇中/ 计算/ 单元/ 不/ 对/ 等/ ,/ 有/ 6/ 个/ 浮点/ 计算/ 单元/ ,/ Page3/ 其中/ 有/ 3/ 个/ 加法器/ 、/ 2/ 个/ 乘法器/ ./ 为/ 解决/ 片外/ 通信/ 昂贵/ 、/ 芯片/ 上/ 通信/ 面积/ 大于/ 计算/ 面积/ 的/ 问题/ ,/ Imagine/ 通过/ 3/ 级/ 存储/ 结构/ 减少/ 片外/ 通信/ ,/ 以/ 充分/ 提高/ 片内/ 运算/ 能力/ ./ Merrimac/ 项目/ 中/ 基于/ 流/ 处理器/ 构建/ 超级/ 计算/ 来/ 提高/ 科学计算/ 性能/ ,/ 在/ Merrimac/ 中/ 通过/ 网络连接/ 16/ 个流/ 处理器/ ,/ 每个/ 流/ 处理器/ 中有/ 16/ 个/ ALUClusters/ ,/ 计算/ 簇内/ 设计/ 对/ 等/ 计算/ 单元/ ,/ 有利于/ 负载/ 调度/ ,/ 适合/ 计算/ 密集型/ 的/ 科学计算/ 任务/ [/ 8/ ]/ ./ 国防科学技术大学/ 张春元/ 教授/ 领导/ 的/ MASA/ 团队/ 设计/ 了/ 可编程/ 64/ 位流/ 处理器/ MASA/ [/ 9/ -/ 10/ ]/ ,/ MASA/ 继承/ 了/ 流/ 体系/ 的/ 基本特征/ 和/ 层次/ 带宽/ 等/ 特性/ ,/ 改进/ 存储/ 模型/ 和/ 计算/ 功能/ 单元/ ./ 采用/ 共享/ 存储空间/ 和/ 非/ 阻塞/ 传输技术/ 来/ 解决/ 中间/ 数据/ 导致/ 的/ 标量/ 核/ 与/ 访存/ 带宽/ 压力/ 提高/ 的/ 问题/ ;/ 计算/ 单元/ 中/ 增加/ 特定/ 操作/ ,/ 并/ 保证/ 对/ 等/ 性/ ,/ 进一步提高/ 核/ 运算/ 的/ 性能/ ./ 国防科学技术大学/ 杨学军/ 院士/ [/ 1/ ]/ 领导/ 开发/ 的/ 飞腾/ 64/ 位流/ 处理器/ ,/ 在/ 流/ 体系结构/ 基础/ 上/ 设计/ 针对/ 科学计算/ 的/ 加速/ 方案/ ,/ 提供/ 消息传递/ 和/ 流通/ 信/ 两种/ 通信/ 方式/ ,/ 并且/ 利用/ 自主/ 研发/ 的/ 网络接口/ 可/ 将/ 大量/ 飞腾/ 处理器/ 连接起来/ 构成/ 超级计算机/ ./ 超级计算机/ “/ 天河/ 一号/ ”/ 中/ 应用/ 大量/ 飞腾/ 处理器/ ,/ 标志/ 着/ 国产/ 流/ 处理器/ 逐渐/ 成熟/ 并/ 走向/ 工业/ 应用/ 道路/ ./ 2.3/ 工业/ 图形/ 处理器/ 在/ 工业界/ 中/ Nvidia/ 公司/ 的/ GPU/ 是/ 应用/ 最/ 广泛/ 的/ 图形/ 处理器/ ,/ 体系结构/ 经历/ GT80/ 、/ GT200/ 和/ Fermi/ 三代/ 发展/ ./ 2006/ 年/ ,/ GT80/ 首次/ 将/ 顶点/ 与/ 像素/ 处理器/ 统一/ 为/ 渲染/ 处理器/ ,/ 统一/ 的/ 目的/ 是/ 为/ 解决/ 片内/ 负载/ 不/ 均衡/ 的/ 问题/ ;/ 渲染/ 处理器/ 把/ 矢量/ 处理器/ 拆/ 分为/ 标量/ 处理器/ ,/ 因此/ 渲染/ 处理器/ 本质/ 是/ 标量/ 线程/ 处理器/ ,/ 并/ 采用/ 单指令/ 多线程/ 执行/ 模式/ ./ GT200/ 的/ 设计/ 中/ 继续/ 增加/ 片上/ 计算/ 面积/ ,/ 扩充/ 片内/ SM/ 和/ SM/ 内线/ 程/ 数量/ ./ 片上/ 计算/ 单元/ 数量/ 增加/ 后/ 出现/ 两个/ 问题/ ,/ (/ 1/ )/ 对/ 线程/ 和/ 指令/ 调度/ 及/ 仲裁/ 机制/ 提出/ 更高/ 要求/ ,/ GT200/ 通过/ 指令/ 双/ 发射/ 机制/ 来/ 满足/ 大量/ 计算/ 单元/ 需要/ 的/ 指令和数据/ ;/ (/ 2/ )/ 芯片/ 功耗/ 损失/ 增大/ ./ 从/ GT200/ 开始/ 考虑/ 向/ 用户/ 提供/ 动态/ 频率/ 与/ 电压/ 机制/ 来/ 优化/ 能耗/ ./ Fermi/ 体系/ 如图/ 1/ (/ a/ )/ 所示/ ,/ 增加/ 计算/ 簇内/ 计算/ 单元/ 的/ 密度/ ,/ 流/ 多处理器/ SM/ 中/ 由/ 8/ 个流/ 处理器/ 增加/ 到/ 32/ 个/ ,/ 并且/ 流/ 处理器/ 与/ CUDA/ 紧密结合/ ,/ 改为/ CUDA/ 核心/ ,/ 体现/ 向/ 通用/ 计算/ 发展/ 的/ 决心/ ;/ 提高/ 计算/ 簇/ 之间/ 任务/ 并行性/ ,/ 允许/ 同时/ 执行/ 多个/ 核/ 函数/ ;/ 提高/ 单个/ 计算/ 簇内/ 的/ 线程/ 并行度/ ,/ 在/ 单个/ SM/ 中/ 提供/ 双/ Warps/ 调度/ 器/ 和/ 分配/ 单元/ ;/ 在/ Fermi/ 体系/ 中为/ 降低/ 片外/ 通信/ 代价/ 引入/ 真正/ 的/ 缓存/ 体系/ ,/ 为/ 整个/ 芯片/ 中/ 各个/ 计算/ 簇/ 提供/ 一个/ 768KB/ 的/ 共享/ 二级缓存/ ;/ 为/ 解决/ 各种/ 应用程序/ 对/ 缓存/ 的/ 不同/ 需求/ ,/ 增加/ 片/ 内存储器/ 的/ 灵活/ 配置/ 机制/ ./ 即/ 单个/ SM/ 中/ 的/ 64KB/ 片内/ 缓存/ 可/ 配置/ 为/ 16KB/ 共享内存/ 和/ 48KB/ 一级/ 缓存/ 或者/ 48KB/ 共享内存/ 和/ 16KB/ 一级/ 缓存/ [/ 11/ ]/ ./ 总之/ ,/ Nvidia/ 在/ 改进/ 存储/ 模型/ 的/ 数据/ 局部性/ 、/ 提高/ 线程/ 吞吐量/ 的/ 调度/ 机制/ 及/ 减少/ 片外/ 通信/ 代价/ 等/ 方面/ 取得/ 较/ 好/ 成绩/ ./ Nvidia/ 的/ 主要/ 市场/ 对手/ 是/ AMD/ ,/ 以/ Radeon/ 系列产品/ 为例/ 介绍/ AMD/ 芯片/ ./ AMDGPU/ 属于/ 矢量/ 处理器/ [/ 12/ ]/ ,/ 5/ 个流/ 核心/ (/ StreamCore/ )/ 组成/ 1/ 个/ 超长/ 指令/ 体系/ 的/ 线程/ 处理器/ ,/ 其中/ 4/ 个/ 普通/ 流/ 核心/ 负责/ 矢量/ 并行操作/ ,/ 1/ 个/ 特殊/ 流/ 核心/ (/ T/ -/ Stream/ )/ 处理/ 特定/ 数学计算/ ./ 多个/ 线程/ 处理器/ 组成/ 一个/ 单指令/ 多/ 数据/ 处理器/ 阵列/ 及/ 计算/ 单元/ (/ ComputeUnit/ )/ ./ 存储系统/ 由/ 全局/ 显存/ 、/ 一/ 、/ 二级缓存/ 、/ 共享存储器/ 和/ 寄存器/ 构成/ ,/ 每个/ 计算/ 单元/ 中有/ 一级/ 缓存/ 和/ 共享存储器/ ,/ 多个/ 计算/ 单元/ 共享/ 一个/ 二级缓存/ [/ 13/ ]/ ./ AMD/ 与/ Nvidia/ 明显/ 区别/ 是/ 流/ 处理器/ 体系/ 不同/ ,/ AMD/ 以/ 计算/ 单元/ 规模/ 来/ 提高/ 性能/ ,/ 采用/ 单指令/ 多/ 数据结构/ ,/ 趋向/ 指令/ 并行/ 方向/ ;/ Nvidia/ 则/ 在/ 有限/ 计算/ 单元/ 前提/ 下/ 优化/ 并行/ 体系/ 来/ 提高/ 性能/ ,/ 采用/ 多指令/ 多/ 数据/ ,/ 偏向/ 线程/ 并行度/ 方向/ ,/ 因此/ NvidiaGPU/ 更/ 高效/ 地/ 执行/ 分支/ 程序/ ,/ 通用/ 计算能力/ 较强/ ./ 其次/ ,/ Nvidia/ 缓存/ 及/ 管理机制/ 比较/ 强大/ ,/ 如图/ 1/ (/ a/ )/ 所示/ ./ 最小/ 线程/ 执行/ 粒度/ 不同/ ,/ 执行/ 线程/ 粒度/ 越小/ 并行度/ 越高/ ,/ 掩盖/ 延迟/ 的/ 能力/ 越强/ ./ Nvidia/ 执行/ 线程/ 粒度/ 是/ 16/ 个/ 线程/ ,/ 而/ AMD/ 是/ 64/ 个/ 线程/ ./ 未来/ Nvidia/ 继续/ 向/ 通用/ 计算/ 发展/ ,/ 而/ AMD/ 则/ 用/ 自身/ 技术/ 优势/ 关注/ 片内/ 异构/ 核/ 融合/ 设计/ ./ AMD/ 在/ 2011/ 年/ 7/ 月/ 上市/ 的/ 代号/ 为/ Fusion/ 的/ APU/ ,/ 在/ 解决/ CPU/ 与/ GPU/ 片/ 间通信/ 瓶颈/ 和/ 处理/ 标/ Page4/ 量/ 和/ 矢量/ 负载/ 都/ 表现/ 不凡/ ./ 但是/ ,/ 现在/ APU/ 中/ x86/ 与/ SIMD/ 核心/ 之间/ 的/ 存储/ 区域/ 未能/ 实现/ 无缝/ 集成/ ,/ 成为/ 下一代/ Fusion/ 研究/ 重点/ [/ 13/ ]/ ./ Intel/ 公司/ 也/ 尝试/ 进入/ 图形/ 处理器/ 领域/ ,/ 提供/ 代号/ Larrabee/ 的/ 高端/ GPU/ 体系/ 设计方案/ ,/ 然而/ 最终/ 并未/ 投片/ 生产/ ./ Larrabee/ 中/ 标量/ 和/ 矢量/ 计算/ 单元/ 都/ 有/ 寄存器/ ,/ 标量/ 单元/ 是/ 顺序/ 执行/ 、/ 双/ 发射/ CPU/ 核心/ ,/ 支持/ 预取/ 、/ 任务/ 与/ 指令/ 调度/ 和/ 缓存/ 一致性/ 策略/ 等/ 功能/ ;/ 矢量/ 处理器/ 单元/ 负责/ 处理/ 各种/ 从/ 简单/ 到/ 矢量/ 计算/ 的/ 指令/ ;/ Larrabee/ 具有/ 完整/ 一/ 、/ 二级缓存/ 及/ 管理机制/ ,/ 因为/ 基于/ x86/ 结构/ 的/ 设计/ ,/ 所以/ 更/ 具有/ 通用/ 计算能力/ [/ 14/ ]/ ./ 虽然/ Larrabee/ 未能/ 成功/ 以/ GPU/ 形式/ 出现/ ,/ 但是/ Intel/ 宣布/ 已经/ 集成/ 到/ “/ 高性能/ 协处理器/ 家族/ ”/ 中/ ,/ SC2011/ 大会/ 后/ 发布/ 了/ KnightCorner50/ 核/ 的/ 原型/ 芯片/ ①/ ./ 总之/ ,/ 通过/ GPU/ 芯片/ 体系/ 发展/ 可以/ 看出/ 如下/ 趋势/ :/ 增加/ 计算资源/ 密度/ ,/ 提高/ 存储体系/ 性能/ 和/ 功能/ ,/ 增强/ 通信/ 能力/ 和/ 可靠性/ ,/ 降低功耗/ 等/ ./ 因此/ ,/ 下/ 一节/ 重点/ 讨论/ 相关/ 技术/ ./ 3GPGPU/ 关键技术/ 及/ 进展/ 3.1/ GPU/ 编程/ 模型/ 3.1/ ./ 1/ 片内/ 编程/ 模型/ 从片/ 内/ 与/ 片间/ 两个/ 角度/ 分析/ 编程/ 模型/ 的/ 发展/ ./ 对于/ 早期/ GPU/ 片内/ ,/ 在/ 数据/ 并行/ 编程/ 模型/ 基础/ 上/ ,/ 程序员/ 将/ 各种/ 算法/ 映射/ 到/ 绘图/ 流水线/ 中/ ,/ 以此/ 挖掘/ GPU/ 硬件/ 并行性/ ./ 随着/ 可编程/ 部件/ 功能/ 增强/ ,/ 出现/ 了/ 以/ 顶点/ 、/ 子素/ 处理器/ 等/ 硬件/ 为/ 基础/ 的/ 渲染/ 模型/ (/ ShaderModel/ )/ ./ 为/ 解决/ 片内/ 负载/ 均衡/ 问题/ ,/ 统一/ 各种/ 可编程/ 部件/ 后/ 出现/ 了/ 统一/ 渲染/ 模型/ (/ UnitedShaderModel/ )/ [/ 5/ ]/ ./ CTM/ [/ 15/ ]/ 对/ GPU/ 片内/ 编程/ 模式/ 有/ 重要/ 影响/ ,/ 抽象化/ GPU/ 硬件/ 来/ 降低/ 对/ 底层/ 的/ 依赖/ ,/ 把/ 开发/ 控制策略/ 返还/ 编程人员/ ./ 此后/ ,/ 由于/ 更/ 适合/ 通用/ 计算/ 的/ 流/ 处理器/ SP/ (/ StreamProgramming/ )/ [/ 2/ ]/ 的/ 出现/ ,/ 流式/ 编程/ 模型/ (/ StreamProgrammingModel/ )/ 逐渐/ 成熟/ ,/ 并/ 在/ Brook/ 和/ CUDA/ 编程语言/ 中/ 应用/ [/ 16/ -/ 17/ ]/ ./ 流/ 编程/ 模型/ 的/ 优点/ 是/ 捕捉/ 应用程序/ 的/ 两种/ 局部性/ :/ (/ 1/ )/ 核内/ 局部性/ ./ 在/ 核/ 的/ 执行/ 过程/ 中/ 所有/ 引用/ 的/ 数据/ 都/ 集中/ 在/ 核内/ ;/ (/ 2/ )/ 生产/ 消费/ 关系/ 局部性/ ./ 由于/ 数据/ 在/ 各个/ 核/ 之间/ 流动/ ,/ 有效/ 组织/ 核/ 之间/ 的/ 逻辑/ 顺序/ 能/ 把/ 生产/ 消费/ 关系/ 控制/ 在/ 局部/ 范围/ 内/ ./ 3.1/ ./ 2/ 片间/ 编程/ 模型/ GPU/ 长期/ 以协/ 处理/ 或/ 加速器/ 的/ 方式/ 存在/ ,/ 因此/ GPU/ 与/ CPU/ 之间/ 的/ 耦合/ 关系/ 对片间/ 编程/ 模型/ 有/ 影响/ ,/ 如/ NvidiaGPU/ 与/ CPU/ 之间/ 是/ 松/ 耦合/ 关系/ ,/ 而/ Larrabee/ 与/ Fusion/ 是/ 紧/ 耦合/ 关系/ ./ 松/ 耦合/ 体系/ 侧重/ 向/ 用户/ 提供/ 灵活/ 的/ 编程/ 模型/ ,/ 如/ OpenCL/ [/ 18/ ]/ 存在/ 数据/ 并行/ 模型/ 、/ 任务/ 并行/ 模型/ 和/ 混合/ 编程/ 模型/ ,/ 根据/ 不同/ 应用程序/ 的/ 性能/ 特点/ 灵活/ 选择/ 适当/ 编程/ 模型/ ;/ CUDA/ 也/ 针对/ 片间/ 松/ 耦合/ 体系/ ,/ 基本/ 编程/ 模型/ 是/ 数据/ 并行/ 模型/ [/ 19/ ]/ ,/ 而且/ 是/ 细粒度/ 数据/ 并行/ ./ 此外/ CUDA/ 中/ 提供/ 流/ 的/ 机制/ ,/ 用户/ 运用/ 多流/ 可以/ 达到/ 任务/ 并行执行/ ,/ 因此/ 在/ 某种程度/ 上/ CUDA/ 给出/ 一种/ 任务/ 并行/ 编程/ 的/ 途径/ ./ 在/ 松/ 耦合/ 体系/ 中/ 存在/ 一个/ 问题/ ,/ 由于/ CPU/ 即/ 是/ 计算/ 管理者/ 又/ 是/ 执行者/ ,/ 因此/ CPU/ 未/ 被/ 充分利用/ ./ 而片/ 间/ 紧/ 耦合/ 体系/ 有效/ 解决/ 了/ 该/ 问题/ ,/ 平衡/ 编程/ 模型/ 能/ 在/ GPU/ 与/ CPU/ 之间/ 合理/ 分配/ 计算/ 负载/ ,/ 充分利用/ CPU/ 计算资源/ ;/ 实现/ 以/ 线程/ 为/ 调度/ 单位/ 的/ 细粒度/ 数据/ 和/ 任务/ 并行计算/ ./ 3.1/ ./ 3/ 编程/ 模型/ 发展/ 方向/ 未来/ 编程/ 模型/ 预计/ 向/ 两个/ 方向/ 发展/ ./ 为/ 降低/ 并行程序/ 设计/ 复杂性/ 和/ 提高/ 非专业/ 开发人员/ 的/ 效率/ ,/ GPU/ 片内/ 要/ 出现/ 元/ 编程/ 模式/ ./ 元/ 程序设计/ 是/ 编写/ 生成/ 代码/ 的/ 程序/ ./ 在/ 元/ 编程/ 模式/ 中/ 自动/ 生成/ 任务/ 划分/ 、/ 通信/ 等/ 代码/ ,/ 编程人员/ 更/ 专注/ 于/ 特定/ 领域/ 的/ 算法/ 设计/ ./ GPU/ 片/ 间通信/ 能力/ 增强/ 后/ ,/ 片间/ 编程/ 模型/ 必然/ 向/ 分布式/ 方向/ 演化/ ./ 如/ CUDASA/ 中/ 的/ 分布式/ 编程/ 模式/ 能/ 有效/ 解决/ 负载/ 均衡/ 和/ 全局/ 存储管理/ 、/ 通信/ 的/ 问题/ ,/ 降低/ GPU/ 集群/ 应用程序/ 的/ 开发/ 难度/ [/ 20/ ]/ ./ 3.2/ GPU/ 开发/ 语言/ 3.2/ ./ 1GPU/ 开发/ 语言/ GPU/ 开发/ 语言/ 从/ 专门/ 的/ 着色/ 语言/ 、/ 面向/ 流/ 计算/ 模型/ 的/ 流/ 语言/ ,/ 发展/ 到/ 现在/ 的/ 面向/ 通用/ 计算/ 领域/ 的/ 编程语言/ ./ 以下/ 分/ 3/ 个/ 方面/ 介绍/ :/ GPU/ 编程语言/ 起源/ 着色/ 语言/ (/ ShadingLan/ -/ guage/ )/ ,/ 如/ GLSL/ 、/ HLSL/ 、/ Cg/ [/ 5/ ]/ ./ 着色/ 语言/ 是/ 独立/ 图形处理/ 硬件/ 的/ 高级/ 编程语言/ ,/ 为了/ 开发者/ 灵活/ 、/ 方便/ 控制/ 并行/ 图形/ 渲染/ ./ 存在/ 两个/ 局限性/ :/ (/ 1/ )/ 对/ 底层/ 图形库/ 依赖性/ 强/ ,/ 可移植性/ 差/ ;/ (/ 2/ )/ 开发/ 难度/ 大/ ,/ 不仅/ 要/ 掌握/ 并行/ 开发技术/ ,/ 而且/ 要/ 了解/ 硬件/ 结构/ 和/ 图形库/ 细节/ ./ 针对/ 流/ 编程/ 模型/ 出现/ 一些/ 流/ 编程语言/ ,/ 如/ StreamIt/ 、/ StreamC/ // KernelC/ 、/ Brook/ // BrookTran/ ./ 其中/ StreamIt/ [/ 21/ ]/ 是/ 麻省理工学院/ 为/ RAW/ 流/ 处理器/ 开发/ 、/ 以/ Java/ 为/ 基本/ 语法/ 的/ 流/ 处理/ 语言/ ,/ 允许/ 在/ 状/ ①/ http/ :/ // // www/ ./ cnbeta/ ./ com/ // articles/ // 162339/ ./ htmPage5/ 态/ 空间/ 表示/ 基础/ 上/ 进行/ 一系列/ 变换/ ./ StreamC/ // KernelC/ [/ 22/ ]/ 是/ 斯坦福大学/ 为/ Imagine/ 设计/ 的/ 流/ 编程语言/ ,/ 分为/ 流/ 与/ 核/ 两种/ 指令/ 类型/ ,/ 在/ 编译/ 阶段/ 能够/ 优化/ 流/ 调度/ 、/ 访存/ 调度/ 和/ 通信/ 调度/ ./ Brook/ [/ 23/ ]/ 是/ 在/ C/ // Fortran/ 基础/ 上/ 扩展/ 的/ 另/ 一种/ 流/ 编程语言/ ,/ 提供/ 实时/ 运行库/ ,/ 允许/ 用户/ 创建/ 和/ 管理/ 流/ ./ 流/ 编程语言/ 为/ GPU/ 通用/ 编程语言/ 的/ 发展/ 奠定/ 基础/ ./ 随着/ 非/ 图形/ 计算/ 应用/ 的/ 增多/ ,/ 各种/ 领域/ 的/ 用户/ 对/ 通用/ 编程语言/ 的/ 需求/ 增大/ ./ 两大/ GPU/ 厂商/ 为/ 扩大/ 各自/ 硬件/ 产品/ 的/ 生态圈/ ,/ 分别/ 推出/ 不同/ 通用/ 计算/ 语言/ ,/ Nvidia/ 的/ CUDA/ 和/ AMD/ 的/ Brook/ +./ CUDA/ 以/ C语言/ 为/ 基础/ ,/ 由于/ 具备/ 了/ 以下/ 两个/ 优点/ ,/ 从而/ 迅速/ 增加/ 了/ 用户数量/ :/ (/ 1/ )/ 封装/ 图形/ 编程/ 底层/ 转化/ 算法/ ;/ (/ 2/ )/ 降低/ 编程/ 难度/ ,/ 用户/ 无需/ 考虑/ 计算/ 模型/ 和/ 操作/ 资源/ 的/ 限制/ ,/ 利于/ 集中/ 设计/ 特定/ 应用领域/ 算法/ ./ AMD/ 的/ Brook/ +/ 是从/ 斯坦福大学/ 的/ 流/ 编程语言/ Brook/ 基础/ 上/ 扩展/ 而/ 来/ ,/ 提供/ 流/ 机制/ 、/ 各种/ 数据/ 对象/ 和/ 核/ 并行计算/ 方式/ ,/ 在/ AMD/ 各/ 产品/ 系列/ 中/ 得到/ 应用/ ./ 学术界/ 也/ 有/ 较/ 好/ 研究成果/ ,/ 清华大学/ Hou/ 等/ 人/ [/ 24/ ]/ 提出/ BSGP/ 通用/ 编程语言/ ,/ 将/ BulkSynchronousProgramming/ (/ BSP/ )/ 模型/ 应用/ 到流/ 处理器/ 编程/ 中/ ,/ 增加/ 若干/ 关键词/ Spawn/ 、/ Barrier/ 、/ Require/ 、/ Fork/ 、/ Kill/ 等/ ,/ 与/ CUDA/ 相比/ 不仅/ 获得/ 相似/ 计算/ 性能/ ,/ 而且/ 降低/ 了/ 编程/ 及/ 维护/ 的/ 复杂性/ ./ 3.2/ ./ 2/ 编程语言/ 发展/ 方向/ 编程语言/ 在/ 向/ 抽象化/ 发展/ ./ 因为/ CUDA/ 与/ OpenCL/ 用户/ 仍然/ 需要/ 管理/ 存储器/ 、/ 建立/ 、/ 调度/ 核/ 运算/ ,/ 所以/ 逐渐/ 有/ 研究者/ 关注/ 提高/ 抽象/ 设计/ 能力/ 的/ 编程语言/ ,/ 如/ PyCUDA/ [/ 25/ ]/ 、/ JCUDA/ [/ 26/ ]/ 、/ hiCUDA/ [/ 27/ ]/ 等/ ,/ 将/ 现有/ 并行/ 编程语言/ 与/ 灵活/ 的/ 脚本语言/ 相结合/ ,/ 创建/ 更/ 抽象/ 的/ 编程语言/ ./ PyCUDA/ 通过/ Python/ 脚本/ 编程/ 实时/ 生成/ CUDA/ 代码/ ,/ 以/ 提高/ 代码/ 抽象性/ 的/ 方法/ 来/ 降低/ 编程/ 复杂性/ 和/ 改善/ 编码/ 效率/ ;/ JCUDA/ 在/ Jini/ 接口/ 上/ 建立/ Java/ 与/ CUDA/ 的/ 接口/ ,/ 通过/ 在/ Java/ 应用程序/ 中/ 嵌入/ CUDA/ 代码/ 来/ 加速/ 关键/ 算法/ ./ hiCUDA/ 是/ 基于/ 编译/ 标示/ 符/ 的/ 高层/ 语言/ ,/ 在/ 现有/ 计算/ 和/ 数据模型/ 基础/ 上/ 允许/ 用/ CUDA/ 编程/ ./ Glift/ [/ 28/ ]/ 提供/ 灵活/ 、/ 高效/ 的/ 数据结构/ 实现/ 机制/ ,/ 通过/ 添加/ 库函数/ 、/ 元语言/ 等/ 方法/ 开发软件/ ,/ 属于/ 一种/ 抽象/ 编程语言/ ./ 总之/ ,/ 目前/ 抽象/ 通用/ 编程语言/ 处在/ 初级/ 研究/ 阶段/ ,/ 大多数/ 研究成果/ 仅/ 实现/ 简单/ 数组/ 计算/ ,/ 缺乏/ 高级/ 功能/ ,/ 还/ 存在/ 较大/ 研究/ 空间/ ./ GPU/ 编程语言/ 以/ 提高/ 开发/ 效率/ 和/ 降低/ 编程/ 难度/ 为/ 目标/ ,/ 从/ 面向/ GPU/ 硬件/ 的/ 低级语言/ 到/ 通用/ 编程语言/ ,/ 再/ 向/ 更/ 抽象/ 、/ 快捷/ 的/ 脚本语言/ 发展/ ./ 3.3/ 存储/ 模型/ 与/ 性能/ 分析/ 现代/ GPU/ 存储/ 子系统/ 由/ 不同/ 存储/ 区域/ 构成/ ,/ 主要/ 分为/ 片外/ 和/ 片/ 内/ 存储/ 区/ 两/ 部分/ ,/ 如图/ 2/ 所示/ ./ 片外/ 存储/ 区/ 由/ 通用/ 存储器/ 与/ 常量/ 存储器/ 构成/ ,/ 通用/ 存储器/ 是/ 早期/ 纹理/ 存储器/ 演化/ 而/ 来/ ,/ 如/ Nvidia/ 的/ 全局/ 显存/ ;/ 片内/ 存储/ 区/ 包括/ 缓存/ 与/ 用于/ 局部/ 数据共享/ 和/ 重用/ 的/ 快速/ 存储器/ ./ 片/ 内存储器/ 具有/ 局部/ 特性/ ,/ 在/ 体系/ 中/ 属于/ 一个/ 多线程/ 计算/ 单元/ ,/ 即/ Nvidia/ 流/ 多处理器/ 或/ AMDSIMD/ 引擎/ ./ GPU/ 存储/ 子系统/ 有/ 以下/ 特点/ :/ (/ 1/ )/ GPU/ 无/ 主动/ 发起/ 访问/ 片/ 外存储器/ 的/ 能力/ ,/ 与/ CPU/ 存在/ 较/ 高/ 的/ 通信/ 和/ 访存/ 耦合度/ ;/ (/ 2/ )/ GPU/ 片上/ 缓存/ 是/ 不/ 满足/ 数据/ 一致性/ 的/ 二维/ 纹理/ Cache/ ,/ 而且/ 容量/ 小/ ./ 因为/ GPU/ 存储/ 子系统/ 性能/ 决定/ 计算/ 性能/ ,/ 所以/ 厂商/ 一直/ 致力于/ GPU/ 存储/ 性能/ 的/ 提高/ ./ 增加/ 片外/ 存储/ 控制器/ 寻址/ 范围/ ,/ Nvidia/ 的/ Fermi/ 可/ 访问/ 6GB/ 全局/ 显存/ ;/ 增强/ 片内/ 缓存/ 硬件/ 功能/ ,/ 如/ Fermi/ 的/ 二级缓存/ 体系/ 和/ 可/ 灵活/ 配置/ 的/ 一级/ 缓存/ 机制/ ;/ 本/ 节/ 主要/ 对/ GPU/ 存储/ 模型/ 分两/ 方面/ 讨论/ ,/ GPU/ 片上/ 存储管理/ 与/ 分布式/ 存储管理/ ./ 3.3/ ./ 1GPU/ 片上/ 存储管理/ 存储/ 性能/ 一直/ 是/ GPU/ 计算/ 性能/ 的/ 瓶颈/ ,/ 定量分析/ 是/ 一种/ 常用/ 的/ 研究/ 方法/ ./ 因为/ 厂商/ 未公开/ 片/ 内存储器/ 硬件/ 机制/ ,/ 所以/ 需要/ 合理/ 的/ 黑盒/ 模型/ 来/ 分析/ 存储/ 性能/ ,/ 如/ 3C/ 模型/ 分析/ 片内/ 缓存/ 行为/ [/ 29/ ]/ ./ 在/ 建立/ 量化/ 分析模型/ 时/ 需要/ 考虑/ 应用程序/ 的/ 访存/ 特性/ ,/ 根据/ 不同/ 访存/ 特征/ 对/ 应用程序/ 进行/ 分类/ ,/ 针对/ 不同/ 类别/ 来/ 分析/ 性能/ 损失/ ./ 由于/ 应用程序/ 访存/ 模式/ 的/ 多样性/ ,/ 因此/ 提高/ 定量分析/ 模型/ 的/ 普适性/ 成为/ 一个/ 难点/ ./ 建模/ 过程/ 中/ 需要/ 综合/ 考虑/ ,/ 不能/ 忽视/ 任何/ 一个/ 区域/ 对/ 计算/ 性能/ 的/ 影响/ ,/ 如片/ 内/ 共享存储器/ 、/ 共享存储器/ 冲突/ 、/ 全局/ 显存/ 合并/ 访存/ 及/ 分支/ 指令/ 的/ 执行/ 机制/ 等/ 对/ 存储/ 性能/ 的/ 影响/ [/ 30/ ]/ ./ 除/ 定量分析/ 之外/ ,/ 存储/ 模型/ Page6/ 还/ 能/ 实现/ 特定/ 功能/ ,/ 如/ 实现/ 高效/ 、/ 透明/ 的/ 片/ 内外/ 数据传输/ ./ 根据/ 存储体系/ 的/ 物理/ 组织/ 特点/ ,/ 建立/ 树状/ 层次模型/ ,/ 节点/ 记录/ 存储/ 区/ 的/ 存取速度/ 、/ 容量/ 等/ 属性/ ,/ 并/ 把/ GPU/ 的/ 核心/ 抽象/ 为/ 工作/ 线程/ ,/ 通过/ 树中/ 各层/ 节点/ 操作/ 解决/ 数据交换/ 任务/ [/ 31/ ]/ ./ 由于/ GPU/ 存储体系/ 要/ 面临/ 海量/ 线程/ 并发/ 操作/ ,/ 在/ 各种/ 应用/ 中访存/ 模式/ 对/ 性能/ 影响/ 敏感/ ,/ 因此/ 有/ 学者/ 关注/ 访存/ 模式/ 的/ 研究/ ,/ 如/ 分析/ 聚集/ 和/ 散列/ 操作/ 中/ 随机/ 访问/ 模式/ 的/ 性能/ [/ 32/ ]/ ,/ 小/ 缓存/ 访问/ 模式/ 、/ 流式/ 顺序/ 访问/ 模式/ 和/ 无序/ 随机/ 访问/ 模式/ 对/ 性能/ 的/ 影响/ [/ 33/ ]/ ./ Jang/ 等/ 人/ [/ 12/ ]/ 针对/ 嵌套循环/ 程序/ 中/ 基于/ 数组/ 的/ 访问/ 模式/ ,/ 建立/ 严格/ 数学模型/ ,/ 并/ 通过/ 数据/ 转换方法/ 正确/ 映射/ 到/ 不同/ 的/ 存储/ 区中/ ,/ 在/ AMD/ 和/ Nvidia/ 两种/ GPU/ 上均/ 获得/ 较/ 好/ 优化/ 效果/ ./ CUDA/ 中为/ 全局/ 显存/ 提供/ 了/ 一种/ 合并/ 访存/ 模式/ ,/ 能够/ 合并/ 多线程/ 的/ 访存/ 操作/ 来/ 降低/ 访存/ 延迟/ ./ 然而/ 在/ 多线程/ 环境/ 中/ 合并/ 访存/ 机制/ 存在/ 同步/ 问题/ ,/ Ha/ 等/ 人/ [/ 34/ ]/ 分析/ 证明/ 合并/ 访存/ 具有/ 良好/ 同步性/ ,/ 由/ 同步/ 而/ 引起/ 的/ 性能/ 损失/ 较/ 小/ ./ 通常/ GPU/ 片上/ 缓存/ 及/ 局部/ 快速/ 存储器/ 成为/ 应用程序/ 性能/ 优化/ 的/ 焦点/ ,/ 需要/ 重点/ 考虑/ 数据/ 访问/ 局部性/ 和/ 重用/ 性/ 两种/ 因素/ ./ GPU/ 中/ 数据/ 访问/ 侧重于/ 空间/ 局部性/ ,/ 在/ 早期/ 子素/ 处理器/ 和/ 纹理/ 缓存/ 体系/ 中/ Govindaraju/ 用/ 3C/ 模型/ 分析/ 缓存/ 行为/ ,/ 提高/ 数据/ 访问/ 局部性/ [/ 29/ ]/ ;/ 在/ 聚集/ 和/ 散列/ 操作/ 中/ 采用/ 多轮/ 计算/ 的/ 方法/ 优化/ 数据/ 访问/ 局部性/ ,/ 这是/ 一种/ 用/ 计算资源/ 降低/ 访存/ 延迟/ 的/ 均衡/ 思想/ [/ 32/ ]/ ./ 对于/ 数据/ 局部性/ 韩博/ 引入/ 一种/ 度量/ 方法/ ,/ 即/ 访问/ 密度/ ./ 访问/ 密度/ 是/ 在/ 同一时间/ 单位/ 内/ 数据/ 单元/ 被/ 不同/ 线程/ 访问/ 的/ 次数/ [/ 33/ ]/ ,/ 这种/ 衡量/ 数据/ 访问/ 局部性/ 的/ 方法/ 对/ 提高/ 缓存/ 性能/ 具有/ 重要/ 意义/ ./ 数据/ 重用/ 中/ 的/ 挑战/ 是/ 动态/ 重用/ 性/ ,/ 在/ 编译/ 前/ 复杂/ 算法/ 中/ 的/ 数据/ 存取/ 模式/ 是/ 不/ 确定/ 的/ ,/ 如/ 应用/ 广泛/ 的/ Sum/ -/ product/ 算法/ [/ 35/ ]/ ./ 对于/ GPU/ 中/ 共享/ 存储/ 区/ 综合/ 考虑/ 时间/ 和/ 空间/ 局部性/ ,/ 设计/ 缓存/ 预取/ 和/ 替换算法/ 来/ 解决/ 动态数据/ 重用/ ./ 在/ 硬件/ 方面/ 由于/ 流/ 处理器/ 数量/ 的/ 激增/ ,/ 必然/ 出现/ 复杂/ 线程/ 仲裁/ 机构/ ,/ 需要/ 更/ 复杂/ 的/ 片/ 上/ 存储系统/ ./ Nvidia/ 开始/ 提供/ 可编程/ 共享存储器/ SharedMemory/ ,/ 使/ 软件/ 管理/ 缓存/ 成为/ 可能/ ./ 目前/ Fermi/ 一/ 、/ 二级缓存/ 的/ 出现/ ,/ 必然/ 使得/ 通过/ 优化/ 缓存/ 来/ 提高/ 计算/ 性能/ 成为/ 以后/ 的/ 研究/ 热点/ ./ 对于/ GPU/ 众核/ 多线程/ 体系/ ,/ 软件/ 显式/ 管理/ 缓存/ 尚存/ 在/ 一些/ 难点/ :/ (/ 1/ )/ 对/ 不规则/ 存取/ 模式/ 的/ 缓存/ 优化/ ,/ 如/ 光线/ 跟踪/ 算法/ ;/ (/ 2/ )/ 缺少/ 基本/ 硬件/ 缓存/ 操作/ 原语/ ;/ (/ 3/ )/ 在/ GPU/ 中/ 缺少/ 线程/ 之间/ 的/ 细粒度/ 同步/ 机制/ ,/ 导致/ 更新/ 缓存/ 状态/ 效率/ 较/ 低/ ./ 3.3/ ./ 2/ 分布式/ 存储管理/ 随着/ 节点/ 内多/ GPU/ 和/ GPU/ 集群/ 的/ 发展/ ,/ GPU/ 分布式/ 存储管理/ 成为/ 一个/ 重要/ 研究/ 方向/ ./ 为/ 用户/ 提供/ 透明/ 管理/ 的/ 地址/ 空间/ 和/ 数据/ 一致性/ 的/ 维护/ 是/ 两个/ 倍受/ 关注/ 的/ 问题/ ./ 统一/ 地址/ 空间/ 的/ 建立/ 和/ 维护/ 一直/ 是/ 解决/ 分布式/ 透明化/ 管理/ 的/ 主要/ 思路/ ./ 在/ 多/ GPU/ 环境/ 中/ Moerschell/ 等/ 人/ [/ 36/ ]/ 建立/ 全局/ 纹理/ 存储空间/ ,/ 借鉴/ CPU/ 对/ 缓存/ 状态/ 的/ 跟踪/ 方法/ ,/ 通过/ 目录/ 记录/ 分布式/ 节点/ 中/ 存储器/ 使用/ 状态/ 来/ 维护/ 数据/ 一致性/ ./ 针对/ Fermi/ 体系/ CUDA4/ ./ 0/ 提出/ GPU/ 统一/ 寻址/ 空间/ 的/ 概念/ ,/ 支持/ 多个/ GPU/ 及/ CPU/ 统一/ 调用/ 全局/ 显存/ 和/ CPU/ 内存/ 的/ 功能/ ./ 分布式/ GPU/ 存储系统/ 本质/ 上/ 是/ 异构/ 存储体系/ ,/ 数据/ 一致性/ 维护/ 和/ 通信/ 管理/ 的/ 复杂性/ 大/ ./ 文献/ [/ 37/ ]/ 提出/ 一个/ 非对称/ 分布式/ 共享/ 存储/ 模型/ ,/ CPU/ 负责/ 数据/ 一致性/ 维护/ 和/ 通信/ ,/ GPU/ 处于/ 完全/ 被动/ 状态/ ./ 并且/ 向/ 开发者/ 提供/ 基于/ CUDAAPI/ 来/ 降低/ 分布式/ 管理/ 的/ 复杂性/ 及/ 开发成本/ ./ 分布式/ 存储管理/ 需要/ 解决/ 的/ 另/ 一个/ 问题/ 是/ 提高/ 可扩展性/ ,/ 通过/ 降低/ 存储管理/ 的/ 难度/ 来/ 达到/ 推广/ 多/ GPU/ 和/ GPU/ 集群/ 应用/ 的/ 目的/ ./ CUDASA/ 和/ Zippy/ 都/ 属于/ 这/ 类/ 开发/ 框架/ ,/ 特别/ 是/ CUDA4/ ./ 0/ 对/ 虚拟/ 统一/ 地址/ 的/ 解决方案/ 都/ 反映/ 这/ 类/ 问题/ 的/ 重要性/ ./ 现有/ 研究成果/ 存在/ 一些/ 不足/ ,/ 对于/ 动态/ 负载/ 或/ 不规则/ 负载/ 任务/ ,/ 因为/ 未能/ 有效/ 解决/ 动态/ 数据传输/ 问题/ ,/ 所以/ 数据/ 一致性/ 维护/ 尚且/ 存在/ 较大/ 研究/ 空间/ ./ 3.4/ 通信模型/ 及/ 分析/ GPGPU/ 的/ 通信/ 指/ 发生/ 在/ GPU/ 片内/ 或/ 片间/ 控制/ 信息/ 和/ 数据/ 的/ 交换/ 过程/ ,/ 主要/ 分/ 垂直/ 通信/ 和/ 水平/ 通信/ ./ 垂直/ 通信/ 是/ GPU/ 片内/ 存储体系/ 中/ 各种/ 存储器/ 之间/ 的/ 数据传输/ ,/ 由于/ GPU/ 不能/ 主动/ 发起/ 通信/ 请求/ ,/ 具有/ 与/ CPU/ 之间/ 存在/ 控制/ 耦合度/ 高/ 的/ 限制/ ./ 水平/ 通信/ 指/ 节点/ 内多/ GPU/ 之间/ 或/ GPU/ 集群/ 中/ 节点/ 之间/ 的/ 通信/ ./ 因为/ 网络设备/ 与/ GPU/ 存储器/ 之间/ 无/ 直接/ 通道/ ,/ 需要/ 经过/ 发送/ 端/ 和/ 接受/ 端的/ CPU/ 内存/ 及/ 网络/ 信道/ 进行/ 通信/ ,/ 所以/ 水平/ 通信/ 控制/ 复杂度/ 高/ ./ 3.4/ ./ 1GPU/ 垂直/ 通信/ GPU/ 垂直/ 通信/ 的/ 研究/ 集中/ 于/ 提高/ 透明化/ 通信/ 和/ 降低/ GPU/ 通信/ 依赖性/ 两个/ 方面/ ./ GPU/ 物理/ 存储体系/ 的/ 层次/ 特性/ 使/ 抽象/ 树/ 成为/ 解决/ 垂直/ 通信/ 的/ 直观/ 方法/ ./ 并行/ 编程语言/ Sequoia/ 中/ 就/ 提供/ 单/ GPU/ 存储体系/ 的/ 树形/ 模型/ ,/ 在/ 编程/ 中/ 允许/ 用户/ 有效/ 地/ 控制/ 存储体系/ 中/ 各层次/ 之间/ 的/ 数据/ 移动/ 和/ 定位/ ,/ 实现/ 垂直/ 通信/ 的/ 透明化/ 操作/ ./ 树形/ 存储/ 模型/ 易/ 扩展/ 到/ 集群/ 中/ ,/ Page7/ 完成/ 集群/ 节点/ 内/ 的/ 垂直/ 通信/ 任务/ ./ 将/ 集群/ 节点/ 的/ 存储体系/ 抽象/ 为/ 树形/ 结构/ ,/ 把/ 垂直/ 通信/ 的/ 操作/ 转化/ 为/ 对/ 树/ 的/ 操作/ ,/ 提高/ 数据/ 传递/ 的/ 抽象性/ 和/ 性能/ [/ 38/ ]/ ./ 研究者/ 也/ 在/ 尝试/ 寻找/ 一种/ 软件/ 机制/ 来/ 解决/ 垂直/ 通信/ 的/ 控制/ 耦合/ 问题/ ./ 通过/ 操作系统/ 提供/ 的/ 回调/ 机制/ ,/ 在/ GPU/ 核/ 函数/ 中/ 设置/ 回调/ 函数/ 的/ 执行/ 条件/ ,/ 当核/ 运算/ 满足/ 触发/ 条件/ 时/ 执行/ 回调/ 函数/ ,/ 并/ 由/ 其/ 发起/ 通信/ 请求/ 和/ 数据交换/ 工作/ [/ 39/ ]/ ./ 然而/ ,/ 在/ 增强/ GPU/ 垂直/ 通信/ 的/ 独立性/ 方面/ 还/ 存在/ 难点/ ,/ 需要/ 继续/ 探索/ ./ 3.4/ ./ 2GPU/ 水平/ 通信/ 水平/ 通信/ 中/ 的/ 关键问题/ 是/ 控制/ 通信/ 管理/ 的/ 复杂性/ ./ 在/ 多/ GPU/ 或/ GPU/ 集群/ 应用/ 开发/ 中/ 用户/ 以/ 显式/ 方式/ 控制/ 水平/ 通信/ ,/ 必然/ 存在/ 大量/ 通信/ 与/ 计算/ 逻辑/ 代码/ 紧密/ 耦合/ 的/ 现象/ ,/ 不仅/ 开发/ 难度/ 大/ ,/ 而且/ 维护/ 成本/ 高/ ./ 为/ 解决/ 该/ 问题/ ,/ 研究/ 人员/ 关注/ 通信接口/ 和/ 通信/ 框架/ 的/ 研究/ 及/ 应用/ 工作/ ,/ 出现/ cudaMPI/ [/ 40/ ]/ 、/ DCGN/ [/ 41/ ]/ 、/ CUDASA/ [/ 20/ ]/ 、/ Zippy/ [/ 42/ ]/ ./ 以下/ 围绕/ 这些/ 典型/ 系统/ 来/ 讨论/ 水平/ 通信/ ./ 通用性/ 是/ 水平/ 通信/ 框架/ 和/ 接口/ 库/ 的/ 一个/ 设计/ 目标/ ./ 分层/ 策略/ 是/ 控制软件/ 复杂性/ 的/ 主要/ 方法/ ,/ 从/ 接近/ 通信/ 底层/ 的/ 角度/ 设计/ 水平/ 通信接口/ 具有/ 较/ 好/ 的/ 通用性/ ,/ cudaMPI/ 就是/ 以该/ 方式/ 实现/ 的/ 分布式/ 共享/ 存储/ 结构/ 的/ 通信接口/ 库/ [/ 40/ ]/ ./ cudaMPI/ 分别/ 在/ CUDA/ 和/ OpenGL/ 基础/ 上/ 设计/ 出/ 类似/ MPI/ 的/ 两个/ 通信接口/ 库/ cudaMPI/ 和/ glMPI/ ,/ 提供/ 点对点/ 和/ 集合/ 通信/ 两种/ 模式/ 及/ 异步/ 传输/ 功能/ ./ 扩展性/ 是/ 另/ 一个/ 设计/ 目标/ ,/ 通用性/ 与/ 扩展性/ 相互促进/ ,/ cudaMPI/ 最靠近/ 通信/ 管理/ 底层/ ,/ 不仅/ 通用性/ 好/ 而且/ 扩展性/ 强/ ./ 抽象性/ 是/ 又/ 一个/ 设计/ 目标/ ,/ 抽象性/ 与/ 通用性/ 相互/ 制约/ ./ 通信接口/ 的/ 抽象性/ 可以/ 将/ 数据/ 一致性/ 和/ 局部性/ 维护/ 等/ 细节/ 隐藏/ 起来/ ,/ 允许/ 在/ 实现/ 通信/ 功能/ 时/ 不/ 需要/ 了解/ 源/ 节点/ 、/ 目的/ 节点/ 等/ 细节/ 信息/ ,/ 为/ 用户/ 提供/ 一个/ 简洁/ 、/ 抽象/ 的/ 接口/ 集/ ./ 在/ 抽象性/ 设计/ 中/ Zippy/ 和/ CUDASA/ 表现/ 较/ 好/ ,/ 均/ 采用/ 全局/ 数组/ 策略/ GA/ (/ GlobalArray/ )/ 来/ 实现/ 水平/ 通信/ 功能/ ./ CUDASA/ 在/ CUDA/ 基础/ 上/ 增加/ 总线/ 层/ 和/ 网络层/ ,/ 将/ 应用层/ 与/ 底层/ 通信/ 隔离/ ./ 在/ 集群/ 中/ 选择/ 一个/ 物理/ 节点/ 来/ 管理/ 任务调度/ 和/ 通信/ ,/ 并/ 建立/ 一个/ 分布式/ 共享/ 存储/ 池/ ,/ 由/ 各/ 节点/ 中/ 的/ 部分/ 片外/ 显存/ 组成/ 共享/ 存储/ 池/ ,/ 分布式/ 共享/ 池/ 统一/ 编址/ ,/ 水平/ 通信/ 被/ 转化/ 为/ 针对/ 全局/ 数组/ 的/ 操作/ ./ 该/ 方式/ 不仅/ 能/ 提高/ 数据/ 局部性/ ,/ 而且/ 可/ 实现/ 节点/ 间/ 的/ 透明/ 通信/ ./ CUDASA/ 的/ 通信/ 方式/ 直观/ 、/ 简捷/ ./ 缺点/ 是/ 由于/ 采纳/ 集中式/ 管理/ ,/ 当/ 集群/ 规模/ 增大/ 后/ 容易/ 出现/ 通信/ 拥塞/ ./ Zippy/ 与/ CUDASA/ 不同之处/ 在于/ 分布式/ 管理模式/ ,/ 有效/ 避免/ 集中式/ 通信/ 管理/ 中/ 的/ 性能/ 瓶颈/ ./ 建立/ 两种/ 分层/ 的/ 局部/ 和/ 全局/ 数组/ ,/ 局部/ 数组/ 位于/ 各/ GPU/ 纹理/ 存储器/ 中/ ,/ 分布/ 在/ 各/ 节点/ 的/ 部分/ 纹理/ 存储器/ 构成/ 全局/ 数组/ ./ Zippy/ 提供/ 一个/ 虚拟/ 全局/ 存储空间/ ,/ 图/ 3/ 解释/ 了/ Zippy/ 透明/ 通信/ 过程/ ./ 图/ 3/ 中有/ 两个/ 全局/ 数组/ ,/ Zippy/ 有/ 两种/ 全局/ 数组/ 通信/ 方式/ :/ (/ 1/ )/ 在/ 一个/ 全局/ 数组/ 内/ 传递数据/ ,/ 例如/ GA1/ 的/ Region1/ 传送/ 到/ Region2/ ;/ (/ 2/ )/ 在/ 两个/ 全局/ 数组/ 之间/ 传递数据/ ,/ 比如/ GA1/ 的/ Region1/ 传输/ 到/ GA2/ 的/ Region3/ ./ 在/ Zippy/ 基础/ 上/ 用户/ 不/ 需要/ 关注/ 水平/ 通信/ 的/ 底层/ 细节/ ,/ 只要/ 显式/ 控制/ 全局/ 数组/ 中/ 的/ 数据传输/ 就/ 能/ 准确/ 地/ 控制/ 通信/ 的/ 内容/ 和/ 时机/ ,/ 因此/ Zippy/ 有效/ 地/ 将/ 数据/ 局部性/ 控制权/ 转移/ 到/ 应用层/ ./ Zippy/ 的/ 缺点/ 是/ 无/ 动态/ 通信/ 能力/ ,/ 数据/ 一致性/ 机制/ 设计/ 过于/ 简单/ ,/ 造成/ 性能/ 损失/ ./ GPU/ 水平/ 通信/ 的/ 最大/ 挑战/ 是/ 动态/ 通信/ ./ 由于/ GPU/ 缺乏/ 主动/ 通信/ 能力/ ,/ GPU/ 与/ CPU/ 之间/ 存在/ 很/ 高/ 通信/ 耦合度/ ,/ 当/ 复杂/ 算法/ 产生/ 动态数据/ 时/ 动态/ 通信/ 更难/ 实现/ ./ 为/ 解决/ 该/ 问题/ ,/ Stuart/ 等/ 人/ [/ 41/ ]/ 设计/ DCGN/ 通信接口/ ,/ DCGN/ 主要/ 用/ 多线程/ 轮询/ 的/ 方法/ 实现/ 动态/ 通信/ ./ 在/ 分布式/ 环境/ 中/ 每个/ 节点/ 都/ 有/ 一个/ 线程/ (/ CommThread/ )/ 负责/ 轮询/ 通信/ 状态/ ,/ 当/ 节点/ 1/ 检索/ 到/ 发送/ 请求/ ,/ 而/ 节点/ 2/ 检索/ 到/ 接受/ 请求/ 后/ ,/ 数据/ 从/ GPU/ 传送/ 到/ CPU/ 主存/ 中/ ,/ 然后/ 经过/ 网络/ 发送到/ 节点/ 2/ 的/ 主存/ ,/ 最后/ 节点/ 2/ 的/ 通信/ 进程/ 将/ 接收/ 到/ 的/ 数据/ 发送到/ GPU/ 显存/ ,/ 如图/ 4/ 所示/ ./ DCGN/ 通过/ 轮询/ 机制/ 实现/ GPU/ 和/ CPU/ 之间/ 解/ 耦合/ ,/ 以/ 损失/ 计算/ 性/ Page8/ 能/ 和/ 降低/ 通信/ 稳定性/ 为/ 代价/ 来/ 实现/ 动态/ 通信/ ./ 总之/ ,/ 水平/ 通信/ 的/ 研究/ 围绕/ 3/ 个/ 目标/ :/ 抽象性/ 、/ 通用性/ 、/ 扩展性/ ,/ 表/ 1/ 提供/ 定性分析/ 现有/ 研究成果/ 的/ 性能/ 对比/ ./ 通用性/ 对/ GPU/ 高性能/ 计算/ 的/ 发展/ 起到/ 重要/ 支撑/ 作用/ ,/ cudaMPI/ 、/ DCGN/ 、/ CUDASA/ 等/ 框架/ 的/ 设计/ 都/ 体现/ 出对/ 通用性/ 的/ 需求/ ./ 因为/ cudaMPI/ 最靠近/ 通信/ 底层/ ,/ 所以/ 该/ 接口/ 的/ 通用性/ 最好/ ;/ 另一方面/ ,/ CUDASA/ 提供/ 最靠近/ 用户/ 的/ 应用层/ 接口/ ,/ 此外/ 在/ CUDA/ 基础/ 上/ 进行/ 扩展/ ,/ 因此/ 通用性/ 较/ 好/ ;/ DCGN/ 采用/ 多线程/ 轮询/ 机制/ ,/ 实现/ 机制/ 比较复杂/ 导致/ 通用性/ 最差/ ./ 为/ 降低/ 计算/ 和/ 通信/ 的/ 耦合度/ 而/ 提高/ 数据通信/ 的/ 抽象性/ ,/ 使/ 各种/ 应用领域/ 的/ 开发人员/ 集中/ 于/ 算法/ 设计/ ./ 在/ 抽象性/ 方面/ CUDASA/ 具有/ 严格/ 的/ 分层/ 结构/ ,/ 隐藏/ 水平/ 通信/ 的/ 细节/ ,/ 抽象性/ 最好/ ;/ DCGN/ 以/ 原语/ 和/ 接口方式/ 实现/ 复杂/ 动态/ 通信/ ,/ 因此/ 抽象性/ 较/ 好/ ;/ 由于/ cudaMPI/ 用户/ 必须/ 掌握/ 各种/ 通信/ 细节/ ,/ 如/ 自行/ 维护/ 数据/ 一致性/ 和/ 局部性/ 等/ ,/ 所以/ 抽象性/ 最差/ ./ 在/ 扩展性/ 方面/ 现有/ 研究/ 只是/ 处于/ 原型/ 阶段/ ,/ 都/ 没有/ 出色/ 表现/ ./ 因为/ cudaMPI/ 为/ 底层/ 支持/ ,/ 能/ 向/ 更/ 抽象/ 层/ 扩展/ ,/ 所以/ 其/ 扩展性/ 较/ 好/ ;/ DCGN/ 实现/ 复杂度/ 高/ ,/ 其/ 扩展性/ 表现/ 最差/ ./ 总之/ ,/ 提高/ 水平/ 通信/ 框架/ 或/ 接口/ 的/ 扩展性/ 仍/ 是/ 一个/ 开放性/ 课题/ ./ 性能/ 分类/ 好/ 较/ 好/ 一般/ 较差/ 通用性/ cudaMPICUDASAZippyDCGN/ 抽象性/ CUDASADCGNZippycudaMPI/ 扩展性/ cudaMPICUDASAZippyDCGN3/ ./ 5/ 负载/ 均衡/ 提高/ 数据处理/ 的/ 吞吐量/ 是/ GPU/ 设计/ 的/ 主要/ 目标/ ,/ 尽量/ 降低/ 计算/ 单元/ 的/ 复杂性/ ,/ 以此/ 提高/ 计算/ 单元/ 密度/ ./ 为/ 降低/ 硬件/ 设计/ 复杂性/ ,/ 早期/ GPU/ 负载/ 均衡/ 的/ 功能/ 被/ 固化/ 在/ 硬件/ 层/ ./ 但是/ 应用层/ 仍然/ 需要/ 解决/ 负载/ 均衡/ ,/ 无效/ 负载/ 均衡/ 策略/ 导致/ GPU/ 无法/ 充分发挥/ 计算能力/ [/ 43/ ]/ ,/ 比如/ 图形处理/ 中/ 的/ 光线/ 跟踪/ [/ 44/ ]/ ./ 随着/ GPU/ 硬件/ 发展/ ,/ 如/ 复杂/ 同步/ 机制/ 和/ 原语/ 操作/ 的/ 出现/ ,/ 负载/ 均衡/ 出现/ 从/ 硬件/ 层/ 向/ 软件/ 层/ 过渡/ 的/ 趋势/ ./ 此外/ ,/ 节点/ 内多/ GPU/ 系统/ 和/ 集群/ 应用/ 的/ 推广/ ,/ 负载/ 均衡/ 必然/ 成为/ 未来/ GPU/ 通用/ 计算/ 中/ 的/ 一个/ 活跃/ 课题/ ./ 本节/ 从/ 负载/ 均衡/ 的/ 方法/ 和/ 粒度/ 两个/ 方面/ 讨论/ ,/ 方法/ 分/ 静态/ 与/ 动态/ 负载/ 均衡/ ,/ 任务调度/ 的/ 粒度/ 分/ 节点/ 内/ 细粒度/ 与/ 节点/ 间/ 粗粒度/ ./ 3.5/ ./ 1/ 静态/ 与/ 动态/ 负载/ 均衡/ 静态/ 负载/ 均衡/ 法/ 简单/ 、/ 易/ 实现/ ,/ 最/ 典型/ 代表/ 是/ 静态/ 任务/ 列表/ 方案/ ./ 由于/ 该/ 方案/ 与/ 锁/ 无关/ ,/ 同步/ 成本低/ ,/ 计算/ 性能/ 较/ 好/ ,/ 因此/ 成为/ CUDA/ 中/ 默认/ 调度/ 方案/ [/ 45/ ]/ ./ 文献/ [/ 46/ ]/ 在/ 编译/ 前/ 提取/ 代码/ 中/ 的/ 性能/ 特征/ ,/ 将/ 任务分配/ 转化/ 为/ 一个/ 分类/ 问题/ ,/ 用主/ 成分/ 法/ 建立/ 分类/ 预测器/ ,/ 经过训练/ 后/ 完成/ 实时/ 任务/ 的/ 分配/ ./ 静态/ 法/ 无法/ 有效/ 处理/ 负载/ 未知/ 和/ 动态/ 负载/ 的/ 计算/ 任务/ ,/ 需要/ 动态/ 负载/ 均衡/ DLB/ (/ DynamicLoadBalance/ )/ 机制/ 来/ 解决/ ./ 随着/ 散列/ Scatter/ 操作/ 和/ 硬件/ 原子/ 操作/ 的/ 出现/ ,/ 在/ 硬件/ 方面/ 已经/ 达到/ 软件/ 实现/ 动态/ 负载/ 均衡/ 的/ 要求/ ./ 传统/ SMP/ 系统/ 的/ DLB/ 方案/ 可/ 应用/ 到/ GPU/ 通用/ 计算/ 领域/ ./ 动态/ 均衡/ 中/ 最/ 基本/ 的/ 数据结构/ 是/ 队列/ ,/ 在/ 队列/ 基础/ 上/ 有/ 多种/ 动态/ 均衡/ 策略/ ./ 由/ 同步/ 锁/ 机制/ 分为/ 阻塞/ 式/ 和/ 非/ 阻塞/ 式/ 任务/ 队列/ ,/ 阻塞/ 式/ 任务/ 队列/ 需要/ 共享/ 访问/ ,/ 同步/ 锁/ 代价/ 比较/ 高/ ,/ 易/ 造成/ 计算/ 性能/ 损失/ ;/ 非/ 阻塞/ 任务/ 队列/ 是/ 一种/ 锁/ 无关/ 的/ 并发/ 访问共享/ 任务/ 队列/ 的/ 方案/ ,/ 利用/ GPU/ 的/ CAS/ 操作/ (/ CompareAndSwap/ )/ 解决/ 访问/ 冲突/ ,/ 另外/ 由/ 懒惰/ 更新/ 机制/ 降低/ 冲突/ [/ 47/ ]/ ./ 从/ 队列/ 管理/ 方式/ 的/ 角度/ 分为/ 集中式/ 和/ 分布式/ ,/ 由于/ 存在/ 严重/ 锁/ 竞争/ ,/ 集中式/ 比/ 分布式/ 队列/ 性能/ 差/ ./ 分布式/ 队列/ 出现/ 各种/ 扩展/ 形式/ ,/ 任务/ 窃取/ (/ TaskStealing/ )/ 允许/ 不同/ 处理器/ 之间/ 通信/ 和/ 窃取/ 邻居/ 队列/ 中/ 的/ 计算/ 任务/ ,/ 提高/ 处理器/ 利用率/ ./ 但是/ 每个/ 处理器/ 要/ 考虑/ 最坏/ 情况/ 下/ 的/ 任务/ 负载/ ,/ 导致/ 各/ 处理器/ 必须/ 维护/ 较大/ 任务/ 队列/ ,/ 从而/ 浪费/ 存储资源/ ./ 任务/ 共享/ 策略/ (/ TaskDonation/ )/ 可/ 解决/ 该/ 问题/ ,/ 任务/ 共享/ 适合/ 缺乏/ 处理器/ 局部性/ 的/ GPU/ 体系/ ,/ 各/ 处理器/ 分别/ 维护/ 较/ 小/ 任务/ 队列/ ,/ 当/ 队列/ Pi/ 任务/ 溢出/ 时/ 采用/ RoundRobin/ 方式/ 选取/ 任务/ 接受/ 处理器/ Pr/ ,/ 然后/ 溢出/ 的/ 任务/ 由/ Pr/ 执行/ ./ 电影/ 实时/ 渲染/ ReyesRen/ -/ dering/ 中/ 任务/ 窃取/ 与/ 任务/ 共享/ 机制/ 比/ 集中式/ 任务/ 队列/ 提高/ 100/ 倍/ 的/ 处理器/ 利用率/ ,/ 在/ 存储器/ 利用率/ 方面/ 任务/ 共享/ 优于/ 任务/ 窃取/ 机制/ [/ 47/ ]/ ./ 从/ 队列/ 层次/ 上/ 分为/ 单层/ 和/ 多层/ 队列/ ./ 在/ 解决/ 光线/ 跟踪/ 计算/ 中/ 分别/ 建立/ 全局/ 和/ 局部/ 双层/ 任务/ 队列/ ,/ 一个/ GPU/ 对应/ 全局/ 任务/ 队列/ 而/ GPU/ 中/ 的/ 每个/ 执行/ 单元/ 对应/ 一个/ 局部/ 队列/ ,/ 取得/ 高于/ 硬件/ 调度/ 的/ 性能/ 结果/ [/ 48/ ]/ ./ 3.5/ ./ 2/ 负载/ 均衡/ 粒度/ 负载/ 均衡/ 的/ 粒度/ 分/ GPU/ 内/ 细粒度/ 和/ GPU/ 之间/ 粗粒度/ ./ 在/ 细粒度/ 负载/ 均衡/ 的/ 层次/ 上/ ,/ Cederman/ 等/ 人/ [/ 45/ ]/ 比较/ 多种/ 调度/ 方案/ ,/ 以八叉树/ 空间/ 剖分/ 算法/ 验证/ 得出/ 任务/ 窃取/ 获得/ 最优性/ 能/ ,/ 静态/ 任务/ 队列/ 性能/ 较/ 好/ ;/ 当/ 处理单元/ 增多/ 时/ 阻塞/ 式/ 任务/ 队列/ 性能/ 最差/ ,/ 非/ 阻塞/ 式/ 任务/ 队列/ 性能/ 较/ 好/ 而/ 扩展性/ 较差/ ./ 粗粒度/ 调度/ 分为/ GPU/ 之间/ 和/ GPU/ 与/ CPU/ 之间/ 两种/ 情况/ ./ 光线/ 追踪/ 的/ 负载/ 均衡/ 是/ 解决/ 计算/ 任务/ 在/ 多个/ 同/ Page9/ 构/ GPU/ 处理器/ 之间/ 的/ 分配/ [/ 48/ ]/ ./ 而/ CPU/ 与/ GPU/ 异构/ 处理器/ 之间/ 的/ 任务调度/ 是/ 当前/ 热门/ 问题/ ,/ 如/ 在/ 计算机/ 游戏/ 设计/ 领域/ [/ 49/ ]/ ./ Gregg/ 等/ 人/ [/ 50/ ]/ 研究/ 在/ 运行/ 时刻/ 动态/ 调度/ GPU/ 和/ CPU/ 的/ 方法/ ,/ 以/ 基准/ 程序/ 的/ 历史/ 计算/ 数据/ 和/ 计算/ 任务/ 的/ 输入/ 数据/ 为/ 动态/ 决策/ 基础/ ,/ 重点/ 考虑/ 两种/ 异构/ 处理器/ 之间/ 的/ 竞争/ 状态/ 来/ 设计/ 动态/ 调度/ 算法/ ./ Jimenez/ 等/ 人/ [/ 51/ ]/ 用/ 预测/ 方法/ 解决/ 任务分配/ ,/ 根据/ 历史/ 性能/ 数据/ 建立/ 预测/ 模型/ ,/ 从/ 全局/ 范围/ 内/ 调度/ 计算资源/ ./ 文献/ [/ 46/ ]/ 将/ GPU/ 和/ CPU/ 中/ 的/ 任务分配/ 问题/ 转化/ 为/ 一个/ 分类/ 问题/ ,/ 构建/ 层次/ 预测器/ ./ 第一层/ 是/ 简单/ 预测器/ ,/ 决定/ 任务/ 是否/ 完全/ 在/ GPU/ 或/ 在/ CPU/ 中/ 执行/ ,/ 第二层/ 是/ 个/ 复杂/ 预测器/ ,/ 用/ 支持/ 向量/ 机中/ 的/ 线性/ 核/ 预测/ 分类/ ,/ 该/ 方法/ 性能/ 优化/ 率/ 达到/ 85/ %/ ./ Qilin/ [/ 52/ ]/ 是/ 在/ GPU/ 异构计算/ 体系/ 中自/ 适应/ 分配/ 计算/ 任务/ 的/ 原型/ 系统/ ./ 实验/ 发现/ 不同/ 算法/ 中/ GPU/ 与/ CPU/ 之间/ 粗粒度/ 的/ 任务调度/ 对/ 计算/ 性能/ 的/ 影响/ 大/ ./ 故/ 首先/ 将/ 任务/ 分为/ 在/ GPU/ 和/ CPU/ 中/ 计算/ 的/ 两个/ 子/ 任务/ TG/ (/ (/ 1/ -/ β/ )/ N/ )/ ,/ Tc/ (/ β/ N/ )/ ,/ 自动/ 任务/ 映射/ 转为/ 求/ 最优/ 划分/ 点/ β/ 的/ 问题/ ./ 通过/ 离线/ 学习/ 构造/ 拟合/ 函数/ ,/ 用/ 训练/ 后/ 的/ 拟合/ 函数/ 实现/ 运行/ 时刻/ 动态分配/ 任务/ ./ 3.6/ 可靠性/ 与/ 容错/ 计算/ 在/ GPU/ 计算/ 过程/ 中/ 存在/ 逻辑/ 计算/ 和/ 访存/ 错误/ 等/ 暂时/ 故障/ ,/ 但是/ 厂商/ 提供/ 较少/ 的/ 故障/ 检测/ 支持/ [/ 53/ ]/ ./ 通用/ 计算/ 的/ 发展/ 对/ GPU/ 计算/ 的/ 可靠性/ 和/ 容错性/ 提出/ 更/ 严格要求/ ,/ 特别/ 是/ 多/ GPU/ 系统/ 和/ 集群/ 应用/ 的/ 推广/ ,/ 然而/ 可靠性/ 分析/ 及/ 容错/ 方案/ 的/ 研究/ 处在/ 起步/ 阶段/ ./ 下面/ 分/ GPU/ 片内/ 与/ 分布式/ 两个/ 方向/ 讨论/ ./ 3.6/ ./ 1GPU/ 可靠性/ 与/ 容错/ GPU/ 片内/ 可靠/ 和/ 容错/ 研究/ 集中/ 在/ 访存/ 容错性/ 和/ 计算/ 可靠性/ 两个/ 方面/ ./ 在/ 访存/ 容错性/ 研究/ 中以/ 软件/ 方式/ 实现/ 显存/ ECC/ 校验/ ,/ 在/ 应用程序/ 读写/ 显存/ 的/ 位置/ 添加/ 错误/ 检查/ 函数/ ,/ 由/ 错误/ 检测/ 函数/ 完成/ ECC/ 校验/ ,/ 软/ 校验/ 降低/ ECC/ 校验/ 的/ 硬件/ 成本/ [/ 54/ ]/ ./ Haque/ 通过/ 统计/ 方法/ 量化/ 访存/ 故障/ 并/ 建立/ 可靠性/ 模型/ ,/ 在/ CUDA/ 和/ OpenCL/ 两个/ 平台/ 上/ 设计/ 开源/ 存储/ 测试程序/ MemtestG80/ [/ 55/ ]/ ./ 冗余/ 计算/ 是/ 解决/ 计算/ 可靠性/ 的/ 基本思路/ ,/ 研究/ 焦点/ 是/ 寻找/ 性能/ 与/ 可靠性/ 之间/ 最优/ 解/ 的/ 问题/ ./ R/ -/ Nave/ 、/ R/ -/ Scatter/ 和/ R/ -/ Thread/ 是/ 3/ 种/ 应用层/ 的/ 冗余/ 计算/ 策略/ [/ 53/ ]/ ./ R/ -/ Nave/ 是/ 最/ 简单/ 的/ 复算/ 方式/ ,/ 一个/ 任务/ 运算/ 两次/ 并/ 比较/ 结果/ ,/ 计算/ 吞吐量/ 降为/ 未/ 增加/ 冗余/ 时/ 的/ 一半/ ;/ 后/ 两种/ 模型/ 利用/ 潜在/ 的/ 计算资源/ 来/ 减少/ 冗余/ 计算/ 造成/ 的/ 性能/ 损失/ ./ R/ -/ Scatter/ 以/ 指令/ 级/ 并行/ 交错/ 执行/ ,/ 而/ R/ -/ Thread/ 以/ 线程/ 级/ 并行/ 交错/ 执行/ 原始/ 和/ 冗余/ 程序/ ./ 相对而言/ ,/ 硬件/ 冗余/ 复算/ 具有/ 透明度/ 高/ 和/ 复算/ 性能/ 损失/ 小/ 的/ 优点/ ./ 文献/ [/ 56/ ]/ 介绍/ 一种/ 可/ 在/ 未来/ GPU/ 体系/ 中/ 应用/ 的/ 硬件/ 复算/ 方案/ ./ 在/ 充分考虑/ 时间/ 局部性/ 的/ 基础/ 上/ ,/ 同时/ 启用/ 两个/ 计算/ 核心/ ,/ 一个/ 核心/ 负责/ 计算/ ,/ 另/ 一个/ 负责/ 复算/ ./ Ameya/ ①/ 分析/ 了/ 4/ 种/ 基本/ 容错/ 策略/ 的/ 性能/ 损失/ :/ (/ 1/ )/ Re/ -/ execution/ 策略/ 直观/ 便捷/ ,/ 适合/ GPU/ 容错/ 计算/ ,/ 然而/ 容错/ 代价/ 较大/ ;/ (/ 2/ )/ 空间/ 冗余/ 策略/ 可/ 处理/ Re/ -/ execution/ 不能/ 解决/ 的/ 固定/ 硬件/ 故障/ 检测/ 问题/ ,/ 容错/ 代价/ 较/ 低/ ;/ (/ 3/ )/ 数据/ 多样性/ 策略/ 是/ 执行/ 两次/ 增加/ 随机/ 干扰/ 的/ 特定/ 输入/ 数据/ ,/ 通过/ 比较/ 输出/ 结果/ 来/ 判断/ 是否/ 存在/ 故障/ ./ 因为/ 要/ 创建/ 随机/ 比较/ 数据/ 集/ ,/ 所以/ 容错/ 代价/ 高于/ Re/ -/ execution/ ;/ (/ 4/ )/ 算法/ 容错/ 策略/ 是/ 基于/ 校验/ 值/ 的/ 特定/ 应用层/ 容错/ 方案/ ,/ 具有/ 硬件/ 依赖性/ 小/ 和/ 容错/ 代价/ 低/ 的/ 优点/ ,/ 但是/ 缺乏/ 普适性/ ./ 国内/ 徐/ 新海/ 博士/ 等/ 人/ 基于/ Gregerson/ 的/ 时间/ 双模/ 冗余/ 法/ 实现/ 面向/ GPGPU/ 的/ 故障/ 检测/ ,/ 将/ GPU/ 从/ 异构/ 系统/ 中/ 分离出来/ 后/ 分析/ GPU/ 瞬时/ 故障/ 的/ 传播/ 规律/ ,/ 提出/ Lazy/ 的/ 容错/ 思想/ ,/ 把/ 故障/ 检测/ 和/ 恢复/ 控制/ 在/ 不/ 可靠/ 数据/ 范围/ 内/ 明显降低/ 容错/ 代价/ [/ 57/ ]/ ./ 3.6/ ./ 2GPU/ 分布式/ 可靠性/ 与/ 容错/ 计算/ 目前/ 多/ GPU/ 系统/ 和/ GPU/ 集群/ 的/ 可靠性/ 及/ 容错/ 研究/ 处于/ 初级阶段/ ,/ 主要/ 集中/ 在/ 故障/ 规律/ 的/ 分析/ 、/ 仿真/ 与/ 检测/ 等/ 方面/ ./ 通常/ 基于/ 特定/ 概率分布/ 对/ 大规模/ 集群/ 系统/ 的/ 故障/ 规律/ 进行/ 分析/ ,/ 如/ 指数分布/ 等/ ,/ 然而/ 这种/ 假设/ 在/ 实际/ 应用/ 中/ 不能/ 准确/ 反映/ 真实情况/ ./ Haque/ 等/ 人/ [/ 55/ ]/ 对/ 蛋白质/ 折叠/ 网/ Folding/ @/ home/ 中/ 分布/ 在/ 世界各地/ 的/ 5000/ 多/ GPU/ 统计/ 了/ 故障/ 规律/ ,/ 证明/ 假设/ 故障/ 规律/ 法/ 存在/ 严重/ 缺陷/ ,/ 这项/ 成果/ 对/ GPU/ 集群/ 的/ 可靠性/ 研究/ 具有/ 重要/ 价值/ ./ 传统/ 集群/ 容错/ 方法/ 开始/ 应用/ 于/ GPU/ 集群/ 容错/ 计算/ 方面/ ,/ 国防科学技术大学/ 较/ 早/ 涉及/ 异构/ GPU/ 集群/ 的/ 容错/ 计算/ 研究/ ,/ 用/ Brook/ 语言/ 实现/ 了/ 应用层/ 检查点/ 恢复/ 原型/ 系统/ HiAL/ -/ Ckpt/ [/ 58/ ]/ ./ 在/ HiAL/ -/ Ckpt/ 中将/ GPU/ 集群/ 分为/ CPU/ 控制/ 的/ Master/ 层/ 和/ GPU/ 计算/ 的/ Slaver/ 层/ ,/ 以/ 在/ 应用程序/ 中以/ 插入/ 编译/ 指示/ 符/ 的/ 方式/ 增加/ 检测点/ 功能/ ,/ 而/ CPU/ 运行/ 状态/ 保存/ 到/ 计算机/ 外存/ 中/ ,/ GPU/ 运行/ 状态/ 和/ 数据/ 保存/ 到/ 主机/ 内存/ 里/ ,/ 实验/ 表明/ 这种/ 分层/ 的/ 检查点/ 技术/ 容错/ ①/ http/ :/ // // homepages/ ./ cae/ ./ wise/ ./ edu/ // ece753/ // papers/ // Paper/ _/ 4/ ./ Page10/ 代价/ 较/ 小/ ./ 3.7/ 低功耗/ 及/ 优化/ 研究/ GPU/ 芯片/ 中/ 计算资源/ 密度/ 大/ ,/ 在/ 取得/ 高/ 计算/ 性能/ 的/ 同时/ 功耗/ 也/ 大于/ CPU/ ,/ 高功耗/ 对/ 稳定性/ 与/ 可靠性/ 也/ 有/ 重要/ 影响/ ./ 在/ 硬件/ 方面/ ,/ GPU/ 厂商/ 试图/ 从/ 芯片/ 设计/ 中/ 降低功耗/ ,/ 例如/ Nvidia/ 在/ GTX200/ 增加/ 动态/ 频率/ 门限/ 功能/ ,/ 当/ GPU/ 处于/ 空闲/ 状态/ 时/ 降低/ 频率/ ;/ 在/ 软件/ 方面/ ,/ 支持/ 比较简单/ 的/ 功耗/ 优化/ ,/ 如/ 驱动程序/ 检测/ 到/ GPU/ 处于/ 轻/ 负载/ 状态/ 时/ 降低/ 计算/ 频率/ ./ 现在/ GPU/ 低功耗/ 研究/ 处于/ 起步/ 阶段/ ,/ 大多数/ 研究/ 集中/ 在/ 能耗/ 评测/ 分析/ 方面/ ./ 以/ 测量/ 统计/ 的/ 方法/ 研究/ GPU/ 通用/ 计算/ 中/ 的/ 功耗/ ,/ 这种/ 方法/ 直观/ 、/ 准确性/ 高/ ./ 评测/ Nvidia/ 两种/ 芯片/ 体系/ GTX200/ 与/ GF100/ 指令/ 级/ 功耗/ ,/ 比如/ 通信/ 、/ 浮点/ 算术/ 和/ 访存/ 指令/ 等/ [/ 59/ ]/ ;/ CUDA/ 中/ 不同/ 计算/ 程序/ 能耗/ 情况/ [/ 60/ ]/ ./ 此外/ ,/ 研究者/ 关注/ 程序/ 特征/ 对/ 性能/ 和/ 功耗/ 的/ 影响/ [/ 61/ ]/ ,/ 根据/ 通信/ 、/ 计算/ 、/ 访存/ 3/ 个/ 特征/ 将/ 程序/ 分为/ 3/ 类/ ,/ 研究/ 在/ 各种/ 频率/ 下/ 不同/ 程序/ 功耗/ 情况/ [/ 62/ ]/ ;/ 研究/ 方法/ 也/ 在/ 不断/ 向/ 精确/ 方向/ 改进/ ,/ 出现/ 一些/ 实验/ 结合/ 统计分析/ 的/ 功耗/ 建模/ 及/ 优化/ 研究成果/ ./ Ma/ 等/ 人/ [/ 63/ ]/ 通过/ 统计分析/ 建立/ GPU/ 功耗/ 模型/ ,/ 预测/ 目标/ GPU/ 运行/ 时/ 功耗/ ;/ 利用/ 历史数据/ 建立/ 的/ 功耗/ 模型/ ,/ 控制/ GPU/ 中/ 活动/ SM/ 数量/ 来/ 获得/ 性能/ 与/ 功耗/ 的/ 平衡/ [/ 64/ ]/ ./ 这些/ 功耗/ 预测/ 模型/ 为/ 未来/ GPU/ 功耗/ 优化/ 奠定/ 基础/ ,/ 然而/ 基于/ 统计分析/ 方法/ 得出/ 的/ 预测/ 模型/ ,/ 具有/ 较大/ 局限性/ ,/ 存在/ 精确性/ 低/ 的/ 缺点/ ./ 为/ 提高/ 统计法/ 功耗/ 预测/ 的/ 精度/ 和/ 可行性/ ,/ 从/ PTX/ 指令/ 层/ 统计/ 动态/ 指令/ 数/ 构建/ 功耗/ 预测/ 模型/ ,/ 用/ GPU/ 仿真器/ 验证/ 该/ 方法/ 能/ 提高/ 预测/ 精度/ [/ 65/ ]/ ./ 将/ 源代码/ 切片/ 作为/ 功耗/ 分析/ 粒度/ 并/ 建立/ 功耗/ 预测/ 模型/ ,/ 该/ 方法/ 使/ 开发者/ 迅速/ 了解/ 应用程序/ 的/ 能耗/ 行为/ ,/ 成为/ 一种/ 在/ 开发/ 过程/ 中/ 快捷/ 优化/ 程序/ 的/ 功耗/ 预测/ 法/ [/ 66/ ]/ ./ 现在/ 还/ 出现/ 深层次/ 分析/ 优化/ 功耗/ 的/ 研究/ ,/ 国防科学技术大学/ 的/ Wang/ 等/ 人/ 提出/ 合并/ 多个/ 独立/ 核/ 函数/ 的/ 方法/ 实现/ 节能/ ,/ 将/ 核/ 函数/ 聚合/ 转为/ 为/ 一个/ 动态/ 规划/ 问题/ ,/ 该/ 方法/ 可以/ 嵌入/ 到/ 编译器/ 的/ 能耗/ 优化/ 设计/ 中/ [/ 67/ ]/ ./ 国防科学技术大学/ 的/ 林一松/ 等/ 人/ [/ 68/ ]/ 从/ CUDA/ 线程/ Warp/ 调度/ 角度/ ,/ 分析程序/ 的/ 计算/ 与/ 访存/ 并行度/ ,/ 建立/ 严格/ 的/ 功耗/ 理论/ 模型/ ,/ 在/ 此/ 模型/ 上/ 求解/ 并行度/ 与/ 频率/ 的/ 关系/ ,/ 给出/ 有效/ 优化/ 应用程序/ 功耗/ 的/ 策略/ ./ 最后/ 仿真/ 实验/ 表明/ ,/ 动态/ 调整/ 计算/ 、/ 访存/ 频率/ 的/ 功耗/ 优化/ 策略/ 有效/ ./ 综合/ 考虑/ CPU/ -/ GPU/ 的/ 异构体/ 系/ ,/ 使用/ AOV/ 网/ 分析/ CUDA/ 计算/ 任务/ 中/ 各子/ 任务/ 的/ 依赖/ 关系/ ,/ 降低/ 非关键/ 路径/ 中子/ 任务/ 的/ 冗余/ 能耗/ ,/ 达到/ 不/ 影响/ 程序执行/ 性能/ 前提/ 下/ 的/ 节能/ 目的/ [/ 69/ ]/ ./ Gebhart/ 等/ 人/ [/ 70/ ]/ 深入/ GPU/ 芯片/ 体系/ 中/ 尝试/ 通过/ 增加/ 寄存器/ 文件/ 缓存/ 和/ 将/ 线程/ 调度/ 改为/ 双层/ 调度/ 的/ 方式/ 优化/ 计算/ 功耗/ ,/ 并/ 取得/ 较/ 理想/ 效果/ ./ 4GPGPU/ 的/ 应用/ 及/ 进展/ 随着/ GPGPU/ 在/ 软/ 、/ 硬件/ 方面/ 的/ 发展/ ,/ GPGPU/ 在/ 非/ 图形/ 计算/ 领域/ 的/ 应用/ 取得/ 长足进展/ ,/ 特别/ 是/ 海量/ 数据管理/ 的/ GPU/ 并行/ 研究/ 与/ 应用/ ./ 另外/ ,/ GPU/ 集群/ 的/ 应用/ 逐渐/ 开展/ ./ 在/ 这些/ 应用领域/ 中/ 编程/ 模式/ 、/ 存储/ 性能/ 优化/ 、/ 通信/ 优化/ 和/ 负载/ 均衡/ 等/ 关键技术/ 都/ 得到/ 应用/ 和/ 发展/ ./ 4.1/ GPU/ 非/ 图形/ 计算/ 应用/ 4.1/ ./ 1/ 传统/ 数据库/ 应用/ 由于/ 海量/ 数据处理/ 的/ 需求/ ,/ 在/ 传统/ 数据库/ 管理/ 中/ GPU/ 得以/ 推广应用/ ./ 原语/ 方法/ 是/ 一种/ GPU/ 解决/ 大/ 数据/ 集/ 并行处理/ 的/ 基本/ 方法/ ,/ 例如/ Harris/ 实现/ 数据处理/ 原语/ 库/ Cudpp/ ①/ ./ 香港科技大学/ 的/ 研究员/ 利用/ GPU/ 设计/ 原语/ 集合/ ,/ 如/ Map/ 、/ Split/ 、/ Scatter/ 、/ Gather/ 、/ Sort/ 等/ ,/ 实现/ 无/ 索引/ 嵌套循环/ Join/ 、/ 索引/ 嵌套循环/ Join/ 、/ 归并/ Join/ 和/ 散列/ Join/ 并行算法/ [/ 71/ ]/ ./ 但是/ 原/ 语法/ 需要/ 开发者/ 熟悉/ GPU/ 底层/ 开发/ 的/ 知识/ ,/ 因而/ 降低/ GPU/ 并行/ 数据库/ 应用/ 的/ 开发/ 效率/ ./ 文献/ [/ 72/ ]/ 尝试/ 解决/ 该/ 问题/ ,/ 设计/ GPU/ 计算/ 的/ SQL/ 接口/ ,/ 数据库/ 开发人员/ 无需/ 掌握/ 诸如/ CUDA/ 之类/ 的/ GPU/ 编程语言/ ,/ 使用/ 更/ 抽象/ 的/ SQL/ 语言/ 设计/ 基于/ GPU/ 的/ 数据库/ 应用程序/ ./ He/ 等/ 人/ [/ 73/ ]/ 用/ 提高/ 空间/ 和/ 时间/ 局部性/ 的/ 优化/ 策略/ 解决/ 了/ 大/ 数据/ 负载/ 的/ 内存/ 墙/ 问题/ ,/ 并/ 以/ 分层/ 方法/ 开发/ 基于/ GPU/ 的/ 关系数据库/ 管理系统/ GDB/ ./ 4.1/ ./ 2/ 数据挖掘/ 应用/ 并行/ 和/ 分布式/ 数据挖掘/ 的/ 研究/ 吸引/ 大量/ 研究/ 人员/ 的/ 目光/ ,/ 然而/ 基于/ GPU/ 的/ 并行/ 数据挖掘/ 研究/ 尚少/ ./ 典型/ 数据挖掘/ 算法/ 的/ GPU/ 移植/ ,/ 比如/ K/ -/ Means/ 聚类/ 算法/ [/ 74/ ]/ 、/ 密度/ 链聚类/ 算法/ CUDA/ -/ DClust/ [/ 75/ ]/ 等/ ./ 其中/ 最/ 典型/ 的/ 研究成果/ 是/ 周国亮/ 博士/ 等/ 人/ [/ 76/ ]/ 实现/ 的/ GPU/ 并行/ 方体/ 算法/ GPU/ -/ Cubing/ ./ 在/ 联机/ 分析/ 处理/ OLAP/ 和/ 数据仓库/ 领域/ ,/ 方体/ 计算/ 是/ 一个/ 核心/ 问题/ ,/ 对于/ 大/ 数据量/ 实时/ 计算/ 是/ 一项/ 非常/ 有/ 挑战/ 的/ 工作/ ./ 算法/ 采用/ 自/ 底向上/ 、/ 广度/ 优先/ 的/ 划分/ 策略/ ,/ 在/ 计算/ 过程/ 中/ 多个/ 分区/ 被/ 分配/ 给/ 不同/ 的/ 线程/ 块/ 同步/ 处/ ①/ http/ :/ // // code/ ./ google/ ./ com/ // p/ // cudpp/ // Page11/ 理/ ,/ 获得/ 了/ 至少/ 两倍/ 以上/ 加速/ 比/ ./ Fang/ 等/ 人/ [/ 77/ ]/ 研制/ GPUMiner/ ,/ 利用/ CUDA/ 实现/ K/ -/ Means/ 聚类/ 算法/ 和/ Apriori/ 频繁/ 集/ 挖掘/ 算法/ ;/ 在/ DirectX/ 基础/ 上/ 实现/ 数据挖掘/ 的/ 可视化/ ,/ 允许/ 用户/ 与/ GPUMiner/ 进行/ 在线/ 交互/ 操作/ ,/ 提高/ 数据分析/ 的/ 准确性/ 和/ 算法/ 的/ 收敛/ 速度/ ./ GPU/ 对/ 数据挖掘/ 应用/ 算法/ 的/ 性能/ 提升/ 带来/ 巨大/ 机遇/ ,/ 以/ K/ -/ Means/ 聚类/ 算法/ 为例/ ,/ GPU/ 算法/ 分别/ 比/ 单核/ CPU/ 提高/ 200/ ~/ 400/ 倍/ ,/ 比/ 8/ 核/ CPU/ 算法/ 提高/ 6/ ~/ 12/ 倍/ ./ 此外/ ,/ 以下/ 应用/ 广泛/ 的/ 算法/ 均/ 能/ 移植/ 到/ GPU/ 中/ 优化/ 性能/ ,/ 时间/ 序列/ 数据分析/ 中/ 的/ 隐/ 马尔科夫/ 模型/ 的/ GPU/ 并行算法/ ,/ 贝叶斯/ 网络分析/ 算法/ 及/ 支持/ 向量/ 机/ 的/ 训练/ 和/ 分类/ 算法/ 等/ ./ 4.1/ ./ 3/ 人工智能/ 应用/ 在/ 人工智能/ 领域/ 中/ 存在/ 一些/ 计算/ 密度/ 高/ 的/ 优化/ 算法/ ,/ 当/ 问题/ 规模/ 增大/ 后/ 比较/ 适合/ 移植/ 到/ GPU/ 集群/ 中/ ./ 李建明/ [/ 78/ -/ 79/ ]/ 等/ 学者/ 将/ 并行/ 遗传算法/ ,/ 并行/ 蚁群/ 算法/ 移植/ 到/ GPU/ 中/ ,/ 以/ CUDA/ 线程/ 为/ 调度/ 基本/ 单位/ ,/ 不仅/ 保持/ 抑制/ 早熟/ 的/ 特性/ ,/ 而且/ 提高/ 了/ 算法/ 运行/ 速度/ ./ 文献/ [/ 80/ ]/ 提出/ GPU/ 并行/ 鱼群/ 算法/ ,/ 利用/ CUDA/ 线程/ 块/ 模拟/ 鱼群/ ,/ 由于/ 忽视/ 线程/ 块/ 之间/ 通信/ ,/ 未能/ 充分/ 挖掘/ GPU/ 并行计算/ 能力/ ./ 4.1/ ./ 4/ 复杂/ 网络应用/ 复杂/ 网络/ 的/ 理论/ 研究/ 中有/ 较/ 多/ 计算/ 密度/ 大/ 的/ 经典/ 算法/ ,/ 比如/ 复杂/ 网络/ 的/ 社区/ 发现/ 算法/ 和/ 链路/ 预测/ 算法/ 等/ ./ 由于/ 这/ 类/ 算法/ 具有/ 数据/ 密集/ 和/ 计算/ 密集/ 的/ 特点/ ,/ 适合/ 数据/ 并行/ 划分/ 的/ 原则/ ,/ 因此/ GPGPU/ 并行/ 化/ 复杂/ 网络/ 算法/ 具有/ 重要/ 意义/ ./ 在/ 文献/ [/ 81/ ]/ 中/ 讨论/ 随机/ 图/ 的/ 染色/ 算法/ 在/ GPU/ 中/ 的/ 详细/ 设计方案/ ,/ 并/ 与/ 多/ 核/ CPU/ 中/ 的/ 多线程/ 算法/ 进行/ 性能/ 对比/ ,/ 证明/ GPU/ 并行算法/ 效果/ 优于/ CPU/ 多线程/ 算法/ ./ 4.2/ GPU/ 集群/ 应用/ 在/ GPGPU/ 的/ 发展/ 过程/ 中/ ,/ 存储容量/ 的/ 限制/ 始终/ 是/ 个/ 关键问题/ ./ 尽管/ 硬件/ 厂商/ 不断/ 提高/ 显存/ 容量/ ,/ 然而/ GPU/ 局部/ 存储器/ 的/ 扩充/ 受到/ 集成电路/ 的/ 制约/ ,/ GPU/ 显存/ 扩容/ 有限/ ./ 为/ 克服/ GPU/ 通用/ 计算/ 应用/ 中/ 的/ 硬件/ 壁垒/ ,/ 多/ GPU/ 系统/ 和/ GPU/ 集群/ 的/ 应用/ 逐渐/ 增多/ ./ Fan/ 等/ 人/ [/ 82/ ]/ 最早/ 提出/ GPU/ 集群/ 解决/ 科学计算/ 问题/ ,/ 此后/ 科学计算/ 领域/ 中/ 逐渐/ 出现/ GPU/ 集群/ 计算/ 的/ 应用/ ./ 对/ 统计/ 物理学/ 中/ 的/ IsingModel/ 提出/ 元/ Spin/ 的/ 概念/ ,/ 建立/ 元/ Spin/ 与/ 具体/ Spin/ 之间/ 的/ 映射/ ,/ 根据/ 映射/ 关系/ 划分/ 并行计算/ 任务/ [/ 83/ ]/ ./ 文献/ [/ 84/ ]/ 对比/ CELL/ 、/ GPU/ 、/ CPU3/ 种/ 集群/ 的/ 偏/ 微分方程/ 计算/ ,/ 实验/ 表明/ GPU/ 集群/ 取得/ 最优/ 加速/ 效果/ ./ GPU/ 集群/ 在/ 有限元/ 计算/ 中将/ MG/ 方法/ 中/ 不同/ 网格/ 分配/ 到/ 各个/ CPU/ 和/ GPU/ 计算/ 单元/ 中/ ,/ 在/ 集群/ 范围/ 内/ 合理/ 分配/ 计算/ 负载/ 获得理想/ 加速/ 比/ [/ 85/ ]/ ./ 在/ 仿真/ 计算/ 中/ GPU/ 集群/ 处理/ 流体/ 表面/ 流动/ 的/ 可视化/ 问题/ [/ 86/ ]/ ,/ 利用/ LBM/ 格子/ 波尔兹曼/ 模型模拟/ 流体/ 流动/ 和/ 空中/ 污染物/ 的/ 扩散/ 仿真/ ,/ 在/ 具有/ 30/ 个/ 节点/ 的/ GPU/ 集群/ 中/ 取得/ 了/ 比同/ 规模/ CPU/ 集群/ 高/ 4.6/ 倍/ 的/ 性能/ 优势/ [/ 87/ ]/ ./ 另外/ ,/ GPU/ 集群/ 在/ 工业/ 应用领域/ 也/ 逐渐/ 开展/ 起来/ ,/ 陈庆奎/ 研究/ 团队/ 在/ 上海市/ 重点/ 科技/ 攻关项目/ 支持/ 下/ 构建/ 了/ 基于/ GPU/ 集群/ 的/ 3G/ 视频/ 质量/ 分析/ 系统/ [/ 65/ -/ 66/ ]/ ./ 该/ 系统/ 由/ IP/ 网络/ 数据包/ 分拣/ 节点/ 、/ H/ ./ 264/ 视频/ 质量/ 参数/ 提取/ 节点/ 和/ 基于/ GPU/ 的/ 视频/ 质量/ 分析/ 节点/ ,/ GPU/ 集群/ 能够/ 完成/ 实时/ 海量/ 视频流/ 质量/ 分析/ 任务/ ,/ 当/ 系统/ 采用/ 27/ 个/ 节点/ 构成/ 9/ 条/ 视频/ 分析/ 流水线/ 时/ 可/ 完成/ 1/ 万条/ 视频流/ 的/ 质量/ 分析/ ,/ 满足/ 电信/ 企业/ 3G/ 骨干网/ 上/ 的/ 视频/ 质量/ 分析/ 需求/ ./ 5/ 结束语/ 图形/ 处理器/ 通用/ 计算/ 经过/ 多年/ 的/ 发展/ ,/ 未来/ 仍/ 将/ 继续/ 保持高速/ 发展/ ./ GPGPU/ 的/ 关键技术/ 研究/ 中/ 存在/ 如下/ 挑战/ :/ (/ 1/ )/ 由于/ GPU/ 硬件/ 标准/ 很难/ 统一/ ,/ 因此/ 导致/ 编程/ 模型/ 中/ 难以/ 合理/ 分配/ 异构计算/ 资源/ ./ 而/ 对/ 硬件/ 体系/ 不/ 敏感/ 、/ 高度/ 抽象/ 的/ 通用/ 编程语言/ 一直/ 会/ 存在/ 调试/ 困难/ 的/ 挑战/ ;/ (/ 2/ )/ 各种/ 领域/ 中/ 的/ 软件/ 和/ 算法/ 向/ GPU/ 移植/ 的/ 难题/ 始终/ 限制/ GPGPU/ 发展/ ,/ 设计/ 高可靠性/ 和/ 复用/ 性/ 的/ 公共/ 并行算法/ 库是/ 一种/ 有效/ 的/ 解决/ 途径/ ;/ (/ 3/ )/ 有效/ 地/ 解决/ 分布式/ 共享/ 存储/ 模型/ 中/ 的/ 数据/ 一致性/ 问题/ 及/ 造成/ 的/ 性能/ 损失/ ;/ (/ 4/ )/ 设计/ 优化/ 控制/ GPU/ 缓存/ 的/ 普适性/ 算法/ ,/ 对/ 提高/ 各类/ 算法/ 性能/ 有/ 重要/ 价值/ ;/ (/ 5/ )/ GPU/ 集群/ 节点/ 之间/ 动态/ 通信/ 尚未/ 完全/ 解决/ ,/ 然而/ 大部分/ 算法/ 需要/ 节点/ 之间/ 动态/ 交换/ 数据/ ./ 虽然/ CUDASA/ 与/ Zippy/ 等/ 系统/ 实现/ 节点/ 之间/ 的/ 透明/ 通信/ ,/ 但是/ 节点/ 之间/ 只能/ 进行/ 静态/ 通信/ ./ 尽管/ DCGN/ 对/ 动态/ 通信/ 提出/ 解决方案/ ,/ 由/ 动态/ 通信/ 引起/ 的/ 数据/ 一致性/ 问题/ 并未/ 有效/ 解决/ ;/ (/ 6/ )/ 对于/ 大量/ 实时/ 计算/ 任务/ ,/ GPU/ 集群/ 的/ 稳态/ 可用/ 度/ 必须/ 大于/ 0.9999/ ./ 由于/ GPU/ 与/ CPU/ 的/ 编程/ 模式/ 和/ 存储/ 模型/ 都/ 不同/ ,/ 因此/ 传统/ 可靠性/ 解决方案/ 不/ 适合/ GPU/ 集群/ ./ 为/ GPU/ 集群/ 建立/ 合适/ 的/ 可靠性/ 模型/ ,/ 在/ 满足/ 可靠性/ 约束/ 下/ 优化/ 容错/ 代价/ 成为/ 一项/ 长期/ 研究课题/ ;/ (/ 7/ )/ GPU/ 集群/ 的/ 能耗/ 优化/ 问题/ ,/ 以及/ 考虑/ 性能/ 、/ 可靠性/ 等/ 约束/ 的/ 能耗/ 优化/ ;/ (/ 8/ )/ CPU/ 与/ Page12GPU/ 协同/ 计算/ 问题/ ./ 在/ CUDASA/ 中/ 开始/ 关注/ GPU/ 与/ CPU/ 协同/ 计算/ 问题/ ,/ 将/ 大规模/ 计算/ 任务分配/ 给/ 分布式/ 环境/ 中/ 的/ CPU/ 与/ GPU/ 节点/ ,/ 实现/ 协同/ 计算/ 中/ 的/ 负载/ 均衡/ ./ 但是/ 协同/ 计算/ 中/ 的/ 很多/ 问题/ 尚未/ 解决/ ,/ 比如/ 对于/ 集群/ 中/ 异构/ 节点/ 的/ 同步/ 处理/ ,/ 尚未/ 出现/ 保证/ 计算/ 性能/ 和/ 稳定性/ 的/ 同步/ 策略/ ./ 另外/ ,/ 随着/ “/ 天河/ 一号/ ”/ 的/ 出现/ ,/ 大规模/ 集群/ 计算/ 系统/ 中/ CPU/ 和/ GPU/ 协同/ 计算/ 存在/ 较/ 多/ 挑战/ ,/ 国防科学技术大学/ 杨灿群/ 研究员/ 总结/ 在/ 天河/ 设计/ 中/ 存在/ 的/ 主要/ 问题/ :/ 自/ 适应/ 任务/ 均衡/ 模型/ ,/ 优化/ 垂直/ 通信/ 的/ 软件/ 流水/ 机制/ ,/ 解决/ GPU/ 片间/ 访存/ 冲突/ 的/ 流式/ 数据/ 读取/ 策略/ ,/ 减少/ 进程/ 与/ 线程/ 迁移开销/ 的/ 亲/ 和/ 调度/ ,/ 动态/ 性能/ 测量/ 及/ 确定/ 大规模/ 系统/ 的/ 故障/ 定位问题/ ①/ ./ 总之/ ,/ 对于/ 大规模/ GPU/ 与/ CPU/ 协同/ 计算/ 问题/ ,/ 将会/ 在/ 通用/ 编程/ 模型/ 及/ 语言/ 、/ 分布式/ 存储/ 模型/ 优化/ 、/ 水平/ 通信/ 优化/ 、/ 可靠性/ 及/ 容错/ 、/ 低功耗/ 计算/ 、/ 集群/ 中间件/ 等/ 方面/ 取得/ 新/ 的/ 进展/ 和/ 突破/ ./ GPU/ 通用/ 计算/ 的/ 应用领域/ 尚需/ 拓展/ ,/ 复杂/ 网络/ 研究/ 中/ 社会/ 网络/ 、/ 生物/ 蛋白/ 网络/ 等/ 均/ 存在/ 数据量/ 大/ 、/ 计算/ 密度/ 大/ 的/ 重要/ 算法/ ,/ 因此/ 对/ 复杂/ 网络/ 并行算法/ 的/ 研究/ 是/ 个/ 崭新/ 的/ 交叉/ 研究/ 方向/ ./ 致谢/ 感谢/ 匿名/ 审稿人/ 和/ 编辑/ 提出/ 的/ 宝贵意见/ !/ 

