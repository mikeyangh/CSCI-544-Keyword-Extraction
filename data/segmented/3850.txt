Page1Seadown/ :/ 一种/ 异构/ MapReduce/ 集群/ 中/ 面向/ SLA/ 的/ 能耗/ 管理/ 方法/ 林彬/ 李/ 姗姗/ 廖湘科/ 孟令/ 丙/ 刘晓东/ 黄/ / (/ 国防科学技术大学/ 计算机/ 学院/ 长沙/ 410073/ )/ 摘要/ 数据中心/ 的/ 能耗/ 管理/ 已经/ 成为/ 大规模/ 数据处理/ 中/ 的/ 热点问题/ ,/ 其/ 主要/ 目标/ 是/ 控制/ 相关/ 成本/ 的/ 急剧/ 增长/ ./ 大量/ 的/ 工作/ 围绕/ 着/ 在/ 集群/ 利用率/ 较/ 低时/ ,/ 关闭/ 部分/ 服务器/ 来/ 降低/ 能耗/ ,/ 但是/ 这些/ 方法/ 都/ 严重/ 受限于/ 数据/ 存储/ 策略/ ,/ 同时/ 难以/ 保证/ 应用/ 的/ 实时/ 性能/ ./ MapReduce/ 集群/ 作为/ 目前/ 流行/ 的/ 大规模/ 数据处理/ 平台/ ,/ 能耗/ 问题/ 尤为/ 突出/ ./ 文中/ 针对/ 异构/ MapReduce/ 集群/ ,/ 提出/ 一种/ 面向/ SLA/ 的/ 能耗/ 管理/ 方法/ Seadown/ ./ 首先/ ,/ 提出/ 一种/ 混合/ 数据/ 副本/ 存储/ 策略/ ,/ 它/ 允许/ 关闭/ 大量/ 节点/ ,/ 同时/ 保证数据/ 的/ 完整性/ 和/ 集群/ 的/ 容错/ 能力/ ./ 其次/ ,/ 设计/ 了/ 一种/ 基于/ 历史记录/ 的/ 响应/ 时间/ 预测/ 方法/ ,/ 它/ 根据/ 服务器/ 节点/ 的/ 数量/ 、/ 性能参数/ 和/ 运行/ 时间/ 的/ 历史/ 信息/ 准确/ 估计/ 程序/ 的/ 响应/ 时间/ ,/ 相对误差/ 大都/ 在/ 6/ %/ 以下/ ./ 最后/ ,/ 通过/ 选择性/ 地/ 关闭/ 部分/ 节点/ 以/ 达到/ 最小化/ 能耗/ ,/ 同时/ 保证/ 应用程序/ 的/ 实时/ 性能/ ./ 文中/ 证明/ 了/ 该/ 优化/ 问题/ 是/ NP/ -/ hard/ 问题/ ,/ 并/ 提出/ 了/ 一种/ 启发式/ 的/ 节点/ 关闭/ 策略/ ./ 实验/ 结果表明/ ,/ 在/ 节点/ 关闭/ 策略/ 下/ MapReduce/ 应用/ 的/ 实时性/ 得以/ 保证/ ,/ 同时/ 降低/ 了/ 大量/ 的/ 能耗/ ./ 关键词/ 能耗/ 管理/ ;/ 节点/ 可/ 开关/ ;/ MapReduce/ ;/ 数据中心/ ;/ 绿色/ 计算/ 1/ 引言/ 近年来/ ,/ 随着/ 数据中心/ 规模/ 的/ 不断扩大/ 和/ 网络应用/ 服务/ 的/ 急剧/ 膨胀/ ,/ 能源消耗/ 日益增长/ ,/ 所/ 带来/ 的/ 开销/ 不仅/ 占/ 了/ 数据中心/ 总开销/ 的/ 很大/ 比重/ ,/ 同时/ 限制/ 了/ 基础设施/ 的/ 扩容/ 和/ 使用性能/ [/ 1/ ]/ ./ 据统计/ ,/ 数据中心/ 的/ 利用率/ 大都/ 维持/ 在/ 30/ %/ 以下/ ,/ 但是/ 服务器/ 的/ 能耗/ 却/ 很/ 高/ ,/ 并且/ 大部分/ 都/ 被/ 浪费/ 了/ [/ 2/ -/ 3/ ]/ ./ 在/ 此/ 背景/ 下/ ,/ 工业界/ 和/ 学术界/ 的/ 研究/ 人员/ 提出/ 了/ 在/ 利用率/ 较/ 低/ 的/ 时段/ ,/ 通过/ 关闭/ 部分/ 服务器/ 来/ 降低/ 能耗/ ./ MapReduce/ 作为/ 目前/ 主流/ 的/ 大规模/ 数据处理/ 模型/ ,/ 已经/ 广泛应用/ 于/ 各大/ 数据中心/ ,/ 如/ Google/ 、/ Yahoo/ !/ 以及/ Facebook/ 等/ [/ 4/ ]/ ./ MapReduce/ 集群/ 的/ 特点/ 是/ 计算/ 和/ 存储/ 处于/ 同一/ 节点/ ,/ 通过/ 部署/ 大量/ 廉价/ 的/ 机器/ 来/ 提供/ 网络应用/ 服务/ ,/ 并且/ 越来越/ 趋于/ 异构化/ ./ 然而/ 在/ MapReduce/ 集群/ 中/ 关闭/ 节点/ 会/ 严重/ 受限/ :/ 数据/ 的/ 完整性/ 遭到/ 破坏/ ,/ 应用/ 的/ 实时性/ 得不到/ 保证/ ,/ 并且/ 这些/ 计算/ 和/ 存储/ 的/ 因素/ 需要/ 同时/ 考虑/ ,/ 加大/ 了/ 能耗/ 管理/ 的/ 难度/ ./ 研究者/ 大多/ 致力于/ 重新/ 设计/ CPU/ 、/ 网络/ 以及/ 存储/ 子系统/ ,/ 使/ 它们/ 的/ 能耗/ 与/ 利用率/ 成正比/ ,/ 即/ “/ Energy/ -/ Proportional/ ”/ ,/ 减少/ 不必要/ 的/ 浪费/ [/ 3/ ,/ 5/ -/ 7/ ]/ ./ 然而/ 这些/ 工作/ 都/ 是/ 针对/ 单一/ 子系统/ ,/ 没有/ 考虑/ MapReduce/ 集群/ 中/ 计算/ 与/ 存储系统/ 相结合/ 带来/ 的/ 问题/ ./ Leverich/ 等/ 人/ [/ 8/ ]/ 首次/ 将/ 关闭/ 节点/ 策略/ 应用/ 于/ MapReduce/ 集群/ ,/ 他/ 提出/ 建立/ 集群/ 的/ 一个/ 子集/ “/ CoveringSubset/ ”/ ,/ 在/ 每次/ 存储/ 新/ 数据/ 时/ 都/ 至少/ 将/ 一个/ 数据/ 副本/ 存放/ 在/ 这个/ 子/ 集中/ ,/ 并且/ 在/ 集群/ 利用率/ 较/ 低/ 的/ 时段/ 关闭/ 子集/ 之外/ 的/ 所有/ 节点/ ./ 这种/ 方法/ 能够/ 保证数据/ 的/ 完整性/ ,/ 但/ 没有/ 考虑/ 集群/ 的/ 容错/ 问题/ 以及/ 应用程序/ 的/ 性能/ 问题/ ./ Lang/ 等/ 人/ [/ 9/ ]/ 提出/ 一种/ “/ All/ -/ inStrategy/ ”/ 的/ 策略/ ,/ 即/ 当/ 有/ MapReduce/ 任务/ 时/ 就/ 开启/ 所有/ 节点/ ,/ 快速/ 完成/ MapReduce/ 程序/ ,/ 当/ 没有/ 任务/ 时/ 就/ 关闭/ 所有/ 节点/ ,/ 消除/ 了/ 机器/ 空闲/ 时/ 带来/ 的/ 能耗/ 损失/ ,/ 但是/ 它/ 没有/ 解决/ 在/ 应用/ 处理过程/ 中/ 能耗/ 过高/ 的/ 问题/ ./ 在/ MapReduce/ 集群/ 中/ 关闭/ 节点/ 的/ 目标/ 是/ 尽可能/ 地/ 降低/ 能耗/ ,/ 同时/ 兼顾/ 计算/ 和/ 存储/ 带来/ 的/ 问题/ ,/ 包括/ 数据完整性/ 、/ 容错/ 能力/ 和/ 应用/ 的/ 实时/ 性能/ ./ 数据完整性/ 指/ 数据/ 是/ 可/ 连通/ 的/ ,/ 在/ 关闭/ 节点/ 的/ 情况/ 下/ ,/ 数据/ 至少/ 要/ 保证/ 有/ 一个/ 副本/ 存储/ 在/ 活跃/ 的/ 节点/ 上/ ./ 容错/ 能力/ 指当/ 服务器/ 意外/ 宕机/ 时/ ,/ 丢失/ 的/ 数据/ 可以/ 快速/ 恢复/ ./ 尽管/ 关闭/ 节点/ 可以/ 减少/ 能耗/ 损失/ ,/ 然而/ 在/ 大规模/ 数据/ 并行处理/ 中/ 会/ 导致/ 性能/ 严重/ 下降/ ,/ 使得/ 应用/ 的/ 响应/ 时间/ 不可/ 接受/ ./ 在/ 云/ 基础/ 服务设施/ 中/ ,/ 云/ 设施/ 提供者/ 为/ Internet/ 应用/ 者/ 分配/ 计算资源/ ,/ 两者之间/ 签订/ 并/ 遵从/ 服务/ 级/ 合约/ (/ ServiceLevelAgreement/ ,/ SLA/ )/ ./ 云/ 设施/ 提供者/ 应该/ 分配/ 合适/ 的/ 资源/ 以/ 满足/ 应用/ 的/ 服务/ 级/ 目标/ ,/ 这里/ 的/ SLA/ 指/ 用户/ 的/ 应用程序/ 在/ 指定/ 时间/ 内/ 运行/ 完/ ./ 当/ 决定/ 是否/ 关闭/ 某个/ 节点/ 时/ ,/ 需要/ 保证/ 该/ 节点/ 上/ 的/ 数据/ 在/ 其它/ 活跃/ 节点/ 上/ 存在/ 备份/ ,/ 保证/ 集群/ 仍然/ 具有/ 一定/ 的/ 容错/ 能力/ ,/ 同时/ 还要/ 知道/ 响应/ 时间/ 的/ 增加/ 是否/ 可以/ 接受/ ./ 然而/ 在/ MapReduce/ 集群/ 的/ 存储/ 策略/ 下/ ,/ 如/ HDFS/ 、/ GFS/ ,/ 关闭/ 少量/ 节点/ 就/ 会/ 导致/ 数据/ 丢失/ [/ 8/ ]/ ./ MapReduce/ 程序/ 的/ 响应/ 时间/ 受/ 很多/ 因素/ 的/ 影响/ ,/ 如/ 节点/ 的/ 性能/ 、/ 参与/ 计算/ 的/ 节点/ 数量/ 、/ 异构/ 性/ 和/ 数据/ 局部性/ 特征/ ,/ 使得/ 程序/ 性能/ 难以预测/ ,/ 影响/ 节点/ 关闭/ 的/ 决策/ ./ 针对/ 上述/ 问题/ ,/ 本文/ 提出/ 了/ 一种/ 在/ 异构/ MapReduce/ 集群/ 中/ 的/ 能耗/ 管理/ 框架/ Seadown/ ./ 首先/ ,/ 提出/ 了/ 一种/ 混合/ 数据/ 副本/ 存储/ 方法/ ,/ 集成/ 了/ 顺序存储/ 策略/ 和/ 随机/ 存储/ 策略/ 的/ 优点/ ,/ 使得/ 在/ MapReduce/ 集群/ 中/ 能够/ 关闭/ 大量/ 节点/ ,/ 同时/ 兼顾/ 系统/ 的/ 容错性/ 能/ ,/ 保证/ 集群/ 正常/ 运转/ ./ 其次/ ,/ 提出/ 了/ 一种/ 基于/ 历史记录/ 的/ 响应/ 时间/ 预测/ 方法/ ,/ 根据/ 服务器/ 节点/ 的/ 数量/ 、/ 性能参数/ 运行/ 时间/ 的/ 历史/ 信息/ 估算/ 响应/ 时间/ ./ 实验/ 表明/ ,/ 该/ 方法/ 能够/ 准确/ 地/ 预测/ 响应/ 时间/ ,/ 相对误差/ 大都/ 在/ 6/ %/ 以下/ ./ 最后/ ,/ 在/ 响应/ 时间/ 预测/ 的/ 基础/ 上/ ,/ 最小化/ 能耗/ 的/ 同时/ 满足/ 应用/ 的/ SLA/ 要求/ ./ 本文/ 证明/ 了/ 能耗/ 最小化/ 问题/ 是/ NP/ -/ hard/ 问题/ ,/ 并/ 提出/ 一种/ 启发式/ 的/ 节点/ 关闭/ 算法/ ,/ 有效/ 地/ 解决/ 能耗/ 与/ 性能/ 优化/ 问题/ ./ 本文/ 第/ 2/ 节/ 讨论/ 相关/ 工作/ ;/ 第/ 3/ 节/ 描述/ 问题/ 模型/ ;/ 第/ 4/ 节/ 给出/ 混合/ 数据/ 副本/ 存储/ 策略/ ;/ 第/ 5/ 节/ 提出/ 面向/ SLA/ 的/ 能耗/ 管理策略/ ,/ 包括/ 响应/ 时间/ 预测/ 方法/ Page3/ 和/ 启发式/ 的/ 关闭/ 节点/ 策略/ ;/ 在/ 第/ 6/ 节/ 详细/ 给出/ 了/ 实验/ 评测/ ./ 最后/ 总结/ 全文/ 并/ 对/ 下/ 一步/ 工作/ 进行/ 展望/ ./ 2/ 相关/ 研究/ 2.1/ MapReduce/ 框架/ 下/ 的/ 能耗/ 问题/ MapReduce/ 用于/ 大规模/ 数据/ 集/ (/ 大于/ 1TB/ )/ 的/ 并行/ 运算/ ,/ 广泛应用/ 于/ Google/ 、/ Yahoo/ !/ 、/ Amazon/ ./ 分布/ grep/ 、/ 分布/ 排序/ 、/ Web/ 连接/ 图/ 反转/ 、/ Web/ 访问/ 日志/ 分析/ 等/ 都/ 基于/ 此/ 框架/ [/ 4/ ,/ 10/ ]/ ./ MapReduce/ 框架/ 在/ 大规模/ 数据/ 集上/ 做/ 并行处理/ 有/ 极大/ 的/ 优势/ ,/ 但是/ 在/ 集群/ 的/ 能效/ 提升/ 方面/ 则/ 存在/ 诸多/ 限制/ [/ 8/ ]/ ./ 首先/ ,/ MapReduce/ 框架/ 将/ 数据/ 采用/ 分布式/ 的/ 随机/ 方式/ 存储/ 到/ 各个/ 节点/ ,/ 提供/ PB/ 级/ 的/ 数据/ 存储/ ,/ 并/ 提供/ 良好/ 的/ 处理/ 性能/ 和/ 可靠性/ ./ 即使/ 是/ 空闲/ 的/ 节点/ 也/ 要/ 处于/ 开机/ 状态/ ,/ 从而/ 保证数据/ 的/ 可用性/ ./ 其次/ ,/ MapReduce/ 框架/ 部署/ 在/ 数万/ 台/ 节点/ 上/ ./ 这些/ 节点/ 需要/ 应对/ MapReduce/ 处理/ 和/ 其他/ 无关/ 工作/ 负载/ ./ 这/ 就/ 意味着/ ,/ 在/ 工作/ 负载/ 和/ 硬件/ 配置/ 之间/ 难以/ 找到/ 一个/ 完美/ 匹配/ ,/ 导致/ 硬件资源/ 的/ 浪费/ 或者/ 紧张/ ./ 2.2/ 能耗/ 管理/ 的/ 相关/ 技术/ 目前/ 对/ 数据中心/ 能耗/ 问题/ 的/ 研究/ 工作/ 主要/ 集中/ 在/ 关闭/ 节点/ 上/ ,/ 主要/ 思想/ 是/ 在/ 集群/ 利用率/ 较/ 低/ 的/ 时段/ ,/ 关闭/ 部分/ 服务器/ ,/ 将/ 负载/ 迁移/ 到/ 活跃/ 节点/ 上/ ,/ 提高/ 集群/ 的/ 效率/ ./ Barroso/ 等/ 人/ [/ 3/ ]/ 提出/ 了/ “/ Energy/ -/ Proportional/ ”/ 即/ 系统/ 能耗/ 与/ 工作量/ 成正比/ 的/ 概念/ ,/ 他们/ 认为/ 计算机/ 的/ 各个/ 子系统/ 在/ 设计/ 时/ 都/ 应该/ 符合/ 这个/ 标准/ ./ 通过/ 实时/ 监控/ CPU/ 、/ 网络/ 和/ 存储/ 等/ 子系统/ ,/ 自动/ 关闭/ 利用率/ 低/ 甚至/ 空转/ 的/ 部件/ ,/ 提高/ 运转/ 部件/ 的/ 利用率/ ,/ 达到/ “/ Energy/ -/ Proportional/ ”/ [/ 5/ -/ 7/ ,/ 11/ -/ 12/ ]/ ./ 众多/ 硬件/ 厂商/ 推出/ 低能耗/ 处理器/ ,/ 在/ 系统/ 利用率/ 较/ 低时/ 自动/ 转入/ 低能耗/ 模式/ [/ 13/ ]/ ./ 但是/ 这些/ 工作/ 都/ 只/ 关注/ 单一/ 子系统/ ,/ 很少/ 关注/ MapReduce/ 集群/ ,/ 没有/ 考虑/ 计算/ 和/ 存储系统/ 紧密结合/ 的/ 情况/ ./ Leverich/ 等/ 人/ [/ 8/ ]/ 首次/ 尝试/ 将/ 关闭/ 节点/ 的/ 策略/ 应用/ 于/ MapReduce/ 集群/ ,/ 他们/ 验证/ 了/ 这种/ 策略/ 的/ 可行性/ ,/ 但是/ 方法/ 过于/ 简单/ ,/ 没有/ 考虑/ 数据/ 可靠性/ 和/ 任何/ 性能/ 方面/ 的/ 问题/ ./ Amur/ 等/ 人/ [/ 12/ ]/ 设计/ 了/ 一个/ 具有/ 弹性/ 的/ “/ Energy/ -/ Proportional/ ”/ 存储系统/ ,/ 他们/ 改变/ 了/ 数据/ 的/ 存放/ 策略/ ,/ 从而/ 可以/ 根据/ 负载/ 情况/ 自动/ 调整/ 集群/ 的/ 大小/ ./ 然而/ 他们/ 依然/ 是/ 建立/ 在/ “/ CoveringSubset/ ”/ 基础/ 上/ 的/ ,/ 数据恢复/ 能力/ 较差/ ./ Sierra/ 系统/ 采用/ 了/ 全新/ 的/ 数据/ 存储/ 策略/ 来/ 达到/ “/ Energy/ -/ Proportional/ ”/ [/ 14/ ]/ ,/ 系统/ 考虑/ 了/ 数据/ 可用性/ 、/ 一致性/ 和/ 容错/ 能力/ ,/ 但/ 缺点/ 依然/ 是/ 数据/ 失效恢复/ 能力/ 较差/ ./ 并且/ 这些/ 系统/ 都/ 没有/ 考虑/ MapReduce/ 应用/ 的/ 性能/ 问题/ ./ Lang/ 等/ 人/ [/ 15/ ]/ 将/ 顺序存储/ 策略/ 应用/ 于/ 节能/ 系统/ 中/ ,/ 他们/ 发现/ 这种/ 存储/ 方式/ 很/ 自然/ 地/ 匹配/ 于/ 节点/ 关闭/ 策略/ ,/ 易于/ 负载/ 均衡/ 和/ 能耗/ 管理/ ./ 但是/ 他们/ 的/ 应用/ 是/ 数据库系统/ ,/ 难以/ 移植/ 到/ MapReduce/ 集群/ 中/ ./ 在/ 另/ 一项/ 工作/ 中/ [/ 9/ ]/ ,/ 作者/ 比较/ 了/ “/ CoveringSubset/ ”/ 方法/ 和/ “/ All/ -/ inStrategy/ ”/ 方法/ ./ 这/ 两种/ 方法/ 节省/ 的/ 能耗/ 取决于/ 应用程序/ 本身/ 的/ 复杂度/ 和/ 服务器/ 节点/ 的/ 功耗/ 参数/ ,/ 没有/ 一种/ 方法/ 适用/ 于/ 所有/ 应用/ ./ 并且/ 这/ 两种/ 方法/ 都/ 过于/ 简单/ ,/ 作者/ 提出/ 的/ “/ All/ -/ inStrategy/ ”/ 方法/ 并/ 没有/ 在/ 程序运行/ 过程/ 中/ 降低/ 能耗/ ,/ 缺少/ 响应/ 时间/ 预测/ 机制/ 来/ 帮助/ 决策/ ./ Lin/ 等/ 人/ [/ 16/ ]/ 通过/ 动态/ 调整/ 数据中心/ 的/ 节点/ 数量/ ,/ 根据/ 服务器/ 负载/ 最小化/ 能耗/ ./ 通过/ 建模/ ,/ 详细/ 计算/ 了/ 能耗/ 开销/ ,/ 找出/ 了/ 理论/ 最优/ 值/ ,/ 但是/ 忽略/ 了/ 数据/ 可靠性/ 和/ 性能/ 要求/ ./ 本文/ 在/ 此/ 模型/ 基础/ 上/ ,/ 提出/ 一种/ 异构/ MapReduce/ 集群/ 中/ 面向/ SLA/ 的/ 能耗/ 管理/ 方法/ ,/ 最小化/ 能耗/ 的/ 同时/ 满足/ 数据完整性/ 、/ 数据/ 容错/ 能力/ 和/ 应用/ 的/ 实时性/ 要求/ ./ 3/ 系统/ 建模/ 本文/ 考虑/ 的/ 异构/ 系统/ 由/ 多个/ 机架/ 组成/ ,/ 假设/ 机架/ 内/ 的/ 节点/ 是/ 同构/ 的/ ,/ 机架/ 间/ 的/ 节点/ 是/ 异构/ 的/ ,/ 共有/ m/ 个/ 机架/ ,/ 机架/ i/ (/ i/ =/ 1/ ,/ …/ ,/ m/ )/ 有/ N/ (/ i/ )/ 个/ 节点/ ./ 每个/ 节点/ 具有/ 不同/ 的/ 性能指标/ 和/ 功耗/ 参数/ ,/ 即/ 运行/ 不同/ 的/ 应用/ 会/ 表现/ 出/ 不同/ 的/ 性能/ ./ 这里/ 用/ C/ (/ i/ ,/ ω/ )/ 表示/ 机架/ i/ 内/ 的/ 节点/ 在/ 运行/ 程序/ ω/ 时/ 的/ 计算/ 性能/ ,/ E/ (/ i/ ,/ ω/ )/ 表示/ 在/ 单位/ 时间/ 里/ 机架/ i/ 内/ 的/ 节点/ 在/ 运行/ 程序/ ω/ 时/ 的/ 能耗/ ./ 本文/ 采用/ Xie/ 等/ 人/ [/ 17/ ]/ 提出/ 的/ 计算/ 率来/ 衡量/ C/ (/ i/ ,/ ω/ )/ ,/ 通过/ 记录/ 每个/ 节点/ 单独/ 运行/ 相同/ 输入/ 的/ MapReduce/ 应用/ 的/ 响应/ 时间/ ,/ 以/ 它们/ 的/ 最小值/ 为/ 基准/ ,/ 得到/ 节点/ 之间/ 计算能力/ 的/ 比值/ ./ 能耗/ 模型/ E/ (/ i/ ,/ ω/ )/ 用/ 一个/ 线性/ 公式/ 表示/ ,/ 大量/ 的/ 研究/ 表明/ 服务器/ 的/ 能耗/ 通常/ 与/ CPU/ 利用率/ 成正比/ [/ 8/ ,/ 16/ ,/ 18/ ]/ ./ 通过/ 一些/ 前期/ 实验/ 可以/ 获得/ 每台/ 服务器/ 在/ 不同/ 应用/ 下/ 的/ 计算能力/ 和/ 能耗/ 参数/ ./ 基于/ 上面/ 的/ 系统/ 建模/ ,/ 下面/ 介绍/ 能耗/ 最小化/ 问题/ 的/ 建模/ ./ 关闭/ 节点/ 操作/ 可以/ 看作/ 是/ 系统/ 状态/ 的/ 改变/ ,/ 并/ 由/ 一个二维/ 向量/ 犡/ (/ i/ ,/ j/ )/ 表示/ 第/ i/ 机架/ 的/ 第/ j/ 个/ 节点/ 的/ 状态/ ./ 犡/ (/ i/ ,/ j/ )/ 为/ 1/ 表示/ 节点/ 处于/ 活跃/ 状态/ ,/ Page4/ 为/ 0/ 则/ 表示/ 该/ 节点/ 被/ 关闭/ 或/ 处于/ 节能/ 状态/ ,/ X/ (/ i/ )/ =/ ∑/ N/ (/ i/ )/ 犡/ (/ i/ ,/ j/ )/ 表示/ 机架/ i/ 内/ 活跃/ 节点/ 的/ 数量/ ./ 这样/ 我们/ j/ =/ 1/ 基于/ Lin/ 等/ 人/ [/ 16/ ]/ 提出/ 的/ 模型/ ,/ 进一步/ 考虑/ 在/ 异构/ MapReduce/ 集群/ 中/ 面向/ SLA/ 的/ 能耗/ 最小化/ 问题/ ./ 在/ MapReduce/ 默认/ 调度/ 策略/ FIFO/ 下/ [/ 4/ ]/ ,/ 分配/ 到/ 工作/ 节点/ 上/ 的/ 任务/ 数量/ 与/ 节点/ 的/ 计算能力/ 成正比/ ,/ 计算能力/ 越强/ 单个/ 任务/ 越/ 快/ 完成/ ,/ 从而/ 有/ 空闲/ 槽/ 接受/ 新/ 任务/ ./ 本文/ 关注/ 以/ Map/ 任务/ 为主/ 的/ 应用/ ,/ 即/ Map/ 阶段/ 的/ 运行/ 时间/ 远超过/ Shuffle/ 和/ Reduce/ 阶段/ ,/ 这种/ 类型/ 的/ 应用/ 实际上/ 是/ MapReduce/ 模型/ 的/ 主流/ 应用/ ,/ 占据/ 了/ 数据中心/ 应用/ 的/ 很大/ 比重/ ./ 忽略/ Reduce/ 任务/ 占用/ 的/ CPU/ 槽/ 和/ 运行/ 时间/ ,/ 可以/ 用/ 节点/ 分配/ 到/ 的/ Map/ 任务/ 数量/ 衡量/ 节点/ 的/ 计算能力/ ./ 这里/ 用/ ω/ (/ i/ )/ 表示/ 机架/ i/ 内/ 的/ 节点/ 在/ 单位/ 时间/ 内/ 运行/ 应用/ ω/ 时所/ 分配/ 的/ Map/ 任务/ 数量/ ,/ ω/ (/ i/ )/ // ω/ (/ j/ )/ =/ C/ (/ i/ ,/ ω/ )/ // C/ (/ j/ ,/ ω/ )/ ,/ ω/ =/ ∑/ m/ 点/ 从/ 关闭/ 状态/ 到/ 活跃/ 状态/ 的/ 启动/ 能耗/ ,/ 因为/ 大量/ 研究/ 表明/ 这种/ 能耗/ 仅/ 占/ 总/ 能耗/ 很小/ 的/ 一部分/ ,/ 可以/ 忽略不计/ ./ 那么/ 能耗/ 优化/ 问题/ 如下/ 所示/ :/ MinimizeE/ (/ X/ ,/ ω/ )/ =/ ∑/ ms/ ./ t/ ./ ∑/ m/ 公式/ 表示/ 目标/ 函数/ 为/ 最小化/ 集群/ 能耗/ ,/ 条件/ 为/ FIFO/ 调度/ 策略/ 下/ Map/ 任务分配/ 与/ 节点/ 计算能力/ 成正比/ ./ QualityofServices/ 指在/ 关闭/ 部分/ 节点/ 的/ 情况/ 下/ ,/ 依然/ 要/ 保证/ 一定/ 的/ 服务质量/ :/ 存储/ 服务/ ,/ 用户/ 的/ 数据/ 不能/ 丢失/ ,/ 数据/ 在/ 意外/ 丢失/ 时/ 能够/ 快速/ 恢复/ ,/ 保证数据/ 的/ 完整性/ ;/ 计算/ 服务/ ,/ 用户/ 提交/ 的/ 任务/ 需要/ 在/ 指定/ 的/ 时间/ 内/ 运行/ 完/ ./ 本文/ 提出/ 的/ 异构/ MapReduce/ 集群/ 中/ 面向/ SLA/ 的/ 能耗/ 管理/ 方法/ Seadown/ 由/ 两个/ 模块/ 组成/ ./ 一个/ 是/ 混合/ 数据/ 副本/ 存储/ 策略/ ,/ 允许/ 关闭/ 大量/ 节点/ 同时/ 保证/ 数据完整性/ ,/ 还/ 兼顾/ 了/ 容错性/ 能/ ,/ 保证/ MapReduce/ 集群/ 的/ 正常/ 运转/ ./ 另/ 一个/ 是/ SLA/ 感知/ 的/ 能耗/ 管理策略/ ,/ 它/ 能够/ 准确/ 预测/ 在/ 节点/ 关闭/ 情况/ 时/ 程序/ 的/ 响应/ 时间/ ,/ 在/ 满足/ SLA/ 的/ 要求/ 下/ 尽可能/ 地/ 关闭/ 节点/ 以/ 降低/ 集群/ 能耗/ ./ 在/ 后面/ 几节/ 中/ 会/ 详细描述/ Seadown/ 管理/ 方法/ ./ 4/ 混合/ 数据/ 副本/ 存储/ 策略/ 数据/ 副本/ 存储/ 策略/ 是/ 将/ 数据/ 块/ 的/ 多个/ 副本/ 按照/ 一定/ 的/ 规则/ 放置/ 到/ 集群/ 的/ 不同/ 节点/ 中/ [/ 19/ ]/ ,/ 目前/ 主要/ 的/ 策略/ 分为/ 顺序存储/ 策略/ 和/ 随机/ 存储/ 策略/ ./ 前者/ 的/ 典型/ 代表/ 是/ ChainedDeclustering/ 或/ 基于/ DHT/ 的/ 存储/ [/ 20/ -/ 21/ ]/ ,/ 后者/ 主要/ 应用/ 于/ HDFS/ 和/ GFS/ [/ 10/ ]/ 等/ 分布式文件系统/ ./ 采用/ 何种/ 存储/ 策略/ 主要/ 考虑/ 两/ 方面/ 的/ 指标/ :/ 一是/ 在/ 保证/ 数据完整性/ 的/ 前提/ 下/ 能够/ 关闭/ 的/ 服务器/ 节点/ 的/ 数量/ ,/ 即/ 在/ 关闭/ 了/ 某些/ 节点/ 后/ ,/ 每个/ 数据/ 块/ 仍/ 至少/ 有/ 一个/ 备份/ 存储/ 在/ 活跃/ 节点/ 上/ ;/ 另/ 一个/ 是/ 数据/ 重建/ 并行度/ ,/ 指当/ 有/ 节点/ 意外/ 宕机/ 时/ ,/ 丢失/ 的/ 数据/ 可以/ 并行/ 恢复/ 到/ 多少/ 个/ 节点/ 上/ ./ 参与/ 数据恢复/ 的/ 节点/ 越/ 多/ ,/ 重建/ 速度/ 越/ 快/ ,/ 容错/ 能力/ 越强/ ,/ 这/ 对于/ MapReduce/ 集群/ 来说/ 至关重要/ ./ 下面/ 详细描述/ 数据/ 副本/ 存储/ 策略/ ./ 4.1/ 顺序存储/ 策略/ 在/ 顺序存储/ 策略/ 下/ ,/ 数据/ 首先/ 随机/ 选择/ 一个/ 节点/ ,/ 之后/ 顺序/ 选择/ 其后/ k/ -/ 1/ 个/ 节点/ ,/ 所有/ 副本/ 都/ 存放/ 在/ 连续/ k/ 个/ 节点/ 上/ (/ k/ 为/ 副本/ 因子/ )/ ./ 这样/ 在/ 关闭/ 节点/ 时/ ,/ 只/ 需要/ 保证/ 每/ 连续/ k/ 个/ 节点/ 中/ 都/ 至少/ 有/ 一个/ 节点/ 是/ 活跃/ 的/ ,/ 就/ 可以/ 保持/ 数据完整性/ ,/ 因此/ 最/ 多/ 允许/ 关闭/ 集群/ 节点/ 总/ 数量/ 的/ (/ k/ -/ 1/ )/ // k/ ./ 然而/ 当/ 某个/ 节点/ 意外/ 失效/ 时/ ,/ 丢失/ 的/ 数据/ 副本/ 需要/ 重建/ 到/ 活跃/ 的/ 节点/ 上/ ,/ 保持数据/ 副本/ 的/ 顺序/ 特征/ (/ 连续/ k/ 个/ 节点/ )/ ./ 因此/ 失效/ 数据/ 最多能/ 重建/ 到/ 失效节点/ 前后/ 的/ 连续/ k/ -/ 1/ 个/ 活跃/ 节点/ 上/ ,/ 数据/ 重建/ 度为/ 2/ (/ k/ -/ 1/ )/ ,/ 导致/ 了/ 较慢/ 的/ 恢复/ 速度/ ,/ 容错/ 能力差/ ./ 因此/ ,/ 顺序存储/ 策略/ 的/ 特征/ 是/ 允许/ 关闭/ 大量/ 节点/ ,/ 而/ 容错/ 能力/ 较/ 低/ ./ 4.2/ 随机/ 存储/ 策略/ 在/ 随机/ 存储/ 策略/ 下/ ,/ 数据/ 块/ 副本/ 的/ 存放/ 位置/ 没有/ 任何/ 规则/ 关联/ ,/ 一旦/ 发生/ 节点/ 失效/ ,/ 失效/ 的/ 数据/ 块/ 可以/ 随机/ 恢复/ 到/ 任何/ 一个/ 活跃/ 节点/ 上/ ,/ 因此/ 所有/ 活跃/ 节点/ 都/ 可以/ 参与/ 恢复/ 进程/ ,/ 并行度/ 大大提高/ ./ 这种/ 容错/ 能力/ 使得/ 随机/ 存储/ 策略/ 被/ 广泛应用/ 于/ 数据中心/ ,/ 因为/ 大量/ 廉价/ 机器/ 的/ 部署/ 导致/ 宕机/ 的/ 概率/ 较/ 高/ ,/ 需要/ 快速/ 的/ 数据恢复/ ./ 然而/ 另一方面/ ,/ 随机/ 存储/ 策略/ 使得/ 数据/ 块/ 副本/ 在/ 选择/ 存放/ 节点/ 时/ ,/ 组合/ 方式/ 很多/ (/ CkN/ )/ ./ 当/ 关闭/ 任意/ k/ 个/ 节点/ 时/ ,/ 某些/ 数据/ 块/ 的/ 所有/ 副本/ 落/ 在/ 这/ k/ 个/ 节点/ 上/ 的/ 概率/ 就/ 会/ 很/ 高/ ,/ 并且/ 数据量/ 越大/ ,/ 概率/ 越高/ ./ 关闭/ 任何/ k/ -/ 1/ 个/ 节点/ 都/ 可能/ 导致/ 数据/ 丢失/ ,/ 因此/ ,/ 随机/ 存储/ 策略/ 的/ 特征/ 是/ 容错/ 能力/ 强/ ,/ 但/ 允许/ 关闭/ 的/ 节点/ 数量/ 有限/ ./ Page54/ ./ 3/ 混合/ 存储/ 策略/ 基于/ 上述/ 特征/ ,/ 本文/ 提出/ 一种/ 混合/ 数据/ 副本/ 存储/ 策略/ ,/ 集成/ 了/ 顺序存储/ 策略/ 和/ 随机/ 存储/ 策略/ 的/ 优点/ ./ 主要/ 思想/ 是/ 在/ 同一/ 机架/ 内/ 的/ 副本/ 按照/ 顺序/ 方式/ 存储/ ,/ 而/ 机架/ 间/ 的/ 副本/ 按照/ 随机/ 方式/ 存储/ ,/ 图/ 1/ 表示/ 了/ 按照/ 混合/ 存储/ 方式/ 存放数据/ 副本/ 的/ 过程/ ./ 图/ 1/ 中共/ 有/ m/ 个/ 机架/ ,/ 每个/ 机架/ 内/ 的/ 节点/ 按/ 顺序/ 编号/ ,/ 一个/ 数据/ 块/ 的/ 3/ 个/ 副本/ 选择/ 存储/ 位置/ ./ 前/ 两个/ 副本/ 连续/ 存放/ 到/ 机架/ 1/ 的/ 节点/ 2/ 和/ 节点/ 3/ 上/ ,/ 而/ 第/ 3/ 个/ 副本/ 随机/ 存放/ 到/ 其它/ 的/ 机架/ 中/ ./ 如果/ 有/ 第/ 4/ 个/ 副本/ 待/ 存储/ ,/ 则/ 按/ 顺序/ 方式/ 存储/ 到/ 第/ 3/ 个/ 副本/ 所在/ 节点/ 的/ 后/ 一个/ 节点/ ,/ 而/ 第/ 5/ 个/ 副本/ 按照/ 随机/ 方式/ 选择/ 一个/ 新/ 节点/ ./ 交替/ 采用/ 顺序/ 和/ 随机/ 存储/ 策略/ ,/ 直到/ 所有/ 数据/ 副本/ 找到/ 存放/ 位置/ ./ 混合/ 存储/ 策略/ 描述/ 如下/ ./ 算法/ 1/ ./ 混合/ 数据/ 副本/ 存储/ 策略/ ./ 输入/ :/ 副本/ 因子/ k/ 输出/ :/ 数据/ 副本/ 存放/ 位置/ 1/ ./ 将/ 待/ 存储/ 文件/ 划分/ 成/ 大小/ 相等/ 的/ 数据/ 块/ ,/ 数据/ 块/ 按/ n/ ;/ 2/ ./ 根据/ 副本/ 因子/ (/ 副本/ 数量/ )/ 确定/ 数据/ 块/ 的/ 备份/ 数量/ ;/ 3/ ./ FORi/ =/ 1ton4/ ./ FORj/ =/ 1tok5/ ./ IF/ (/ j/ %/ 2/ )/ !/ =/ 06/ ./ 在/ 集群/ 中/ 随机/ 选择/ 一个/ 机架/ h/ ;/ 7/ ./ 在/ 机架/ h/ 中/ 选择/ 一个/ 节点/ 作为/ 存储/ 位置/ ;/ 8/ ./ j/ =/ j/ +/ 1/ ;/ 9/ ./ ELSE10/ ./ 已知/ 副本/ j/ -/ 1/ 存储/ 在/ 节点/ p/ 上/ ;/ 11/ ./ 选择/ 节点/ p/ 的/ 后继/ 节点/ 作为/ 存储/ 位置/ ;/ 12/ ./ j/ =/ j/ +/ 1/ ;/ 13/ ./ ENDIF14/ ./ ENDFOR15/ ./ i/ =/ i/ +/ 1/ ;/ 16/ ./ ENDFOR/ 在/ 混合/ 存储/ 策略/ 下/ ,/ 不仅/ 允许/ 关闭/ 大量/ 的/ 节点/ 并/ 保证/ 数据完整性/ ,/ 还/ 具有/ 较强/ 的/ 容错/ 能力/ ./ 因为/ 采用/ 了/ 顺序存储/ 方式/ ,/ 在/ 关闭/ 节点/ 时/ 只/ 需要/ 保证/ 同一/ 机架/ 内/ 两个/ 相邻/ 的/ 节点/ 不/ 被/ 同时/ 关闭/ 就/ 能/ 保持/ 数据完整性/ ;/ 因为/ 采用/ 了/ 随机/ 存储/ 方式/ ,/ 当/ 发生/ 节点/ 意外/ 宕机/ 时/ ,/ 某些/ 数据/ 副本/ 可以/ 恢复/ 到/ 相邻/ 的/ 活跃/ 节点/ 上/ ,/ 某些/ 数据/ 副本/ 可以/ 恢复/ 到/ 其它/ 机架/ 中/ 任何/ 一个/ 节点/ 上/ ,/ 因此/ 数据/ 重建/ 度/ 是/ N/ -/ NumRack/ (/ i/ )/ +/ 2/ ,/ NumRack/ (/ i/ )/ 表示/ 发生/ 节点/ 宕机/ 的/ 机架/ 内部/ 活跃/ 节点/ 数量/ ./ 混合/ 存储/ 策略/ 的/ 两个/ 属性/ 是/ 顺序存储/ 策略/ 和/ 随机/ 存储/ 策略/ 的/ 折中/ ./ 在/ 一个/ 大型/ 数据中心/ 中/ 能够/ 关闭/ 一半/ 的/ 节点/ ,/ 已经/ 能够/ 降低/ 大量/ 能耗/ ,/ 混合/ 存储/ 策略/ 能够/ 适用/ 于/ 节能/ 系统/ ./ 5SLA/ 感知/ 的/ 能耗/ 管理策略/ 本/ 节/ 讨论/ 能耗/ 管理策略/ ,/ 在/ 保证/ SLA/ 要求/ 的/ 前提/ 下/ 尽可能/ 地/ 关闭/ 节点/ ./ 在/ 异构/ MapReduce/ 集群/ 中/ 关闭/ 节点/ 需要/ 考虑/ 性能/ 下降/ 问题/ ,/ 关闭/ 哪些/ 节点/ 能够/ 最小化/ 能耗/ ,/ 并且/ 保证/ 响应/ 时间/ 不/ 超过/ SLA/ 的/ 要求/ 是/ 一个/ 难点/ ./ 本文/ 设计/ 了/ 一种/ 基于/ 历史记录/ 的/ 响应/ 时间/ 预测/ 方法/ ,/ 它/ 根据/ 服务器/ 节点/ 的/ 数量/ 、/ 性能参数/ 和/ 运行/ 时间/ 的/ 历史/ 信息/ 准确/ 估计/ 程序/ 的/ 响应/ 时间/ ./ 基于/ 关闭/ 节点/ 下/ 响应/ 时间/ 的/ 预估/ ,/ 选择性/ 地/ 关闭/ 部分/ 节点/ 以/ 达到/ 最小化/ 能耗/ ,/ 同时/ 保证/ 应用程序/ 的/ 实时/ 性能/ ./ 下面/ 详细/ 介绍/ 基于/ 历史记录/ 的/ 运行/ 时间/ 预测/ 方法/ 和/ 启发式/ 的/ 节点/ 关闭/ 策略/ ./ 5.1/ 响应/ 时间/ 预测/ 方法/ 在/ 异构/ 集群/ 中/ MapReduce/ 应用/ 的/ 运行/ 时间/ 受到/ 很多/ 因素/ 的/ 影响/ ,/ 如/ 单个/ 节点/ 的/ 性能/ 、/ 节点/ 的/ 数量/ 和/ 跨/ 机架/ 的/ 数据传输/ 等/ 因素/ [/ 22/ ]/ ./ 当/ 关闭/ 节点/ 时/ ,/ 这些/ 因素/ 综合/ 在/ 一起/ 导致/ 运行/ 时间/ 难以预测/ ./ Polo/ 等/ 人/ [/ 23/ ]/ 提出/ 了/ 一种/ 动态/ 预测/ MapReduce/ 程序运行/ 时间/ 的/ 方法/ ,/ 记录/ 当前/ 程序运行/ 的/ 时间/ 和/ 已经/ 完成/ 的/ Map/ 任务/ 数量/ ,/ 通过/ 计算/ 当前/ 已/ 完成/ 任务/ 占/ 总任务/ 的/ 比重/ 得出/ 最终/ 响应/ 时间/ ,/ 这种/ 方法/ 的/ 相对误差/ 较/ 小/ ./ 本文/ 基于/ 上述/ 方法/ ,/ 首先/ 记录/ 程序/ 在/ 节点/ 全部/ 开启/ 时/ 的/ 运行/ 时间/ ,/ 当/ 某些/ 节点/ 关闭/ 后/ ,/ 用/ 节点/ 计算/ 率/ 可以/ 计算/ 出/ 性能/ 的/ 下降/ ,/ 从而/ 预测/ 增长/ 的/ 响应/ 时间/ ,/ 但是/ 这种/ 方法/ 没有/ 考虑/ 跨/ 机架/ 数据传输/ 带来/ 的/ 时间/ 开销/ ./ 在/ 节点/ 全部/ 开启/ 时/ ,/ 根据/ 数据/ 局部性/ 原理/ ,/ MapReduce/ 的/ Map/ 任务/ 被/ 分配/ 到/ 数据/ 所在/ 的/ 节点/ ,/ 避免/ 了/ 数据传输/ 的/ 时间/ 开销/ ./ 然而/ 当/ 某些/ 节点/ 被/ 关闭/ 后/ ,/ 该/ 节点/ 上/ 的/ Map/ 任务/ 需要/ 重新分配/ 到/ 其它/ 有/ 空闲/ CPU/ 槽/ 的/ 节点/ 上/ ,/ 这些/ 节点/ 并不一定/ 有/ Map/ 任务/ 所/ 需/ 的/ 数据/ ,/ 导致/ 数据/ 局部性/ 差/ ,/ 带来/ 数据/ Page6/ 传输/ 时间/ 开销/ [/ 4/ ,/ 22/ ]/ ./ 如图/ 2/ 所示/ ,/ 当/ 机架/ 1/ 的/ 节点/ 2/ 意外/ 失效/ 时/ ,/ 该/ 节点/ 未/ 完成/ 的/ 任务/ 需要/ 重新分配/ 到/ 其它/ 活跃/ 节点/ 上/ ,/ Map1/ 分配/ 到/ 机架/ m/ 中/ ,/ Map2/ 分配/ 到/ 机架/ 2/ 中/ 等等/ ,/ 但/ 这些/ 任务/ 的/ 数据/ 在/ 机架/ 1/ 的/ 节点/ 3/ 上/ ,/ 导致/ 跨/ 机架/ 的/ 数据传输/ ./ MapReduce/ 程序运行/ 时间/ 预测/ 不仅/ 要/ 考虑/ 集群/ 计算能力/ 的/ 下降/ ,/ 还要/ 考虑/ 额外/ 的/ 数据传输/ 开销/ ./ MapReduce/ 程序/ 的/ 运行/ 时间/ 由/ 两/ 部分/ 时间/ 构成/ :/ T/ (/ X/ ,/ ω/ )/ =/ Tmap/ (/ X/ ,/ ω/ )/ +/ Ttransfer/ (/ X/ ,/ ω/ )/ ./ Tmap/ (/ X/ ,/ ω/ )/ 表示/ 计算/ 时间/ ,/ Ttransfer/ (/ X/ ,/ ω/ )/ 表示/ 额外/ 的/ 数据传输/ 时间/ ./ 根据/ 节点/ 运算/ 性能/ 的/ 计算公式/ ,/ Tmap/ (/ X/ ,/ ω/ )/ =/ Tavg/ (/ ω/ )/ ∑/ m/ 节点/ 全/ 开时/ 程序/ 的/ 运行/ 时间/ ,/ ∑/ m/ 集群/ 的/ 计算能力/ ,/ ∑/ m/ 点后/ 集群/ 的/ 计算能力/ ./ 随着/ 节点/ 数量/ 的/ 减少/ ,/ 计算能力/ 降低/ ,/ 响应/ 时间/ 增加/ ./ 下面/ 详细/ 介绍/ 关闭/ 节点/ 引入/ 的/ 数据传输/ 时间/ 的/ 计算方法/ ./ 首先/ 定义/ 机架/ 间/ 数据/ 的/ 传输/ 时间/ ,/ Taccess/ (/ i/ ,/ j/ )/ 表示/ 机架/ i/ 与/ j/ 之间/ 传输/ 64MB/ 数据/ 块/ 的/ 时间/ ./ M/ (/ ω/ )/ 表示/ 应用/ 的/ 总/ Map/ 任务/ 数量/ ,/ 如果/ 节点/ 全部/ 开启/ ,/ 则/ 分配/ 到/ 机架/ i/ 内/ 的/ 任务/ 数量/ 为/ M/ (/ ω/ )/ N/ (/ i/ )/ C/ (/ i/ ,/ ω/ )/ ∑/ m/ 于是/ 分配/ 到/ 机架/ i/ 内/ 单个/ 节点/ 上/ 的/ 任务/ 为/ 如果/ 有/ 节点/ 关闭/ ,/ 这些/ 任务/ 需要/ 重新分配/ 到/ 其它/ 活跃/ 节点/ 上/ ./ 现在/ 考虑/ 机架/ i/ 内/ 多个/ 节点/ 关闭/ 的/ 情况/ ,/ Xi/ 表示/ 活跃/ 节点/ 数量/ ,/ 则/ 机架/ i/ 内/ 需要/ 重新分配/ 的/ Map/ 任务/ 数量/ 为/ (/ N/ (/ i/ )/ -/ X/ (/ i/ )/ )/ M/ (/ ω/ )/ C/ (/ i/ ,/ ω/ )/ ∑/ m/ 用/ M/ (/ i/ ,/ ω/ )/ 表示/ ./ 在/ 最坏/ 情况/ 下/ ,/ 分配/ 到/ 其它/ 机架/ 的/ 任务/ 都/ 需要/ 跨/ 机架/ 读取数据/ ,/ 导致/ 较长/ 的/ 时间/ 开销/ ./ 因此/ ,/ 机架/ i/ 引入/ 的/ 时间/ 开销/ 为/ MAX1/ / j/ / mTaccess/ (/ i/ ,/ j/ )/ M/ (/ i/ ,/ ω/ )/ C/ (/ j/ ,/ ω/ )/ ∑/ m/ 记为/ Ttransfer/ (/ X/ ,/ i/ ,/ ω/ )/ ./ 取/ 最大值/ 表示/ 不同/ 机架/ 间/ 的/ 数据传输/ 是/ 并行/ 的/ ,/ 则/ 整个/ 集群/ 的/ 数据传输/ 时间/ 为/ 实验/ 数据/ 表明/ ,/ 预估/ 的/ 响应/ 时间/ 会/ 略大于/ 真实/ 时间/ ,/ 并且/ 相对误差/ 大都/ 在/ 6/ %/ 以内/ ./ 5.2/ 节点/ 关闭/ 策略/ 本/ 节/ 描述/ 启发式/ 的/ 节点/ 关闭/ 策略/ ,/ 解决/ 能耗/ 最小化/ 问题/ ./ 这里/ 我们/ 将/ 节点/ 关闭/ 过程/ 描述/ 为/ 系统/ 状态/ 的/ 转换/ ,/ 从/ N/ =/ (/ N/ (/ 1/ )/ ,/ N/ (/ 2/ )/ ,/ …/ ,/ N/ (/ m/ )/ )/ 切换/ 到/ X/ =/ (/ X/ (/ 1/ )/ ,/ X/ (/ 2/ )/ ,/ …/ ,/ X/ (/ m/ )/ )/ ,/ N/ 是/ 集群/ 中/ 所有/ 服务器/ 的/ 数量/ ,/ X/ 表示/ 关闭/ 节点/ 后/ 的/ 状态/ ./ N/ (/ i/ )/ 表示/ 机架/ i/ 中/ 的/ 所有/ 节点/ ,/ X/ (/ i/ )/ 表示/ 关闭/ 接点/ 后/ 机架/ i/ 中/ 剩余/ 的/ 节点/ 数量/ ./ 能耗/ 优化/ 问题/ 可以/ 描述/ 为/ 以下/ 公式/ :/ MinimizeE/ (/ X/ ,/ ω/ )/ =/ ∑/ ms/ ./ t/ ./ ∑/ m/ 犡/ (/ i/ ,/ j/ )/ +/ 犡/ (/ i/ ,/ j/ %/ N/ (/ i/ )/ +/ 1/ )/ / 1/ 表示/ 相邻/ 的/ 两个/ 节点/ 不能/ 被/ 同时/ 关闭/ ./ T/ </ TSLA/ 表示/ 应用程序/ 的/ 响应/ 时间/ 必须/ 满足/ SLA/ 的/ 性能/ 要求/ ./ 首先/ 证明/ 优化/ 问题/ 是/ 一个/ NP/ -/ hard/ 问题/ ,/ 可以/ 演化/ 为/ 0/ -/ 1/ 背包/ 问题/ ./ 定理/ 1/ ./ 功耗/ 最小化/ 问题/ 是/ NP/ -/ hard/ 问题/ ./ 证明/ ./ 为了/ 简单/ ,/ 首先/ 按/ 顺序/ 把/ 两个/ 相邻/ 的/ 节点/ 合并/ 为/ 一个/ 大/ 节点/ ,/ 则/ 节点/ 数量/ 变为/ 原来/ 的/ 一半/ ./ 关闭/ 节点/ 的/ 操作/ 变为/ 从/ 两个/ 小/ 节点/ 中选/ 一个/ ,/ 依然/ 遵从/ 不能/ 同时/ 关闭/ 两个/ 相邻/ 节点/ 的/ 原则/ ,/ 满足/ 数据完整性/ 的/ 要求/ ./ 因此/ ,/ 能耗/ 最小化/ 问题/ 变成/ 能耗/ 和/ 性能/ 的/ 折中/ ,/ 寻找/ 一个/ 最优/ 值/ ./ 如果/ 选择/ 计算能力/ 强/ 的/ 节点/ (/ 一般/ 情况/ 下/ ,/ 其/ 功耗/ 指标/ 也/ 比较/ 高/ )/ ,/ 能够/ 大幅/ 降低/ 能耗/ ,/ 然而/ 响应/ 时间/ 也/ 大幅/ 增长/ ./ 如果/ 选择/ 计算能力/ 弱/ 的/ 节点/ ,/ 虽然/ 响应/ 时间/ 不会/ 受太大/ 影响/ ,/ 但/ 能耗/ 也/ 只有/ 小幅/ 降低/ ./ 每个/ 节点/ 都/ 有/ 功耗/ 指标/ 和/ 性能/ Page7/ 参数/ ,/ 能耗/ 最小化/ 问题/ 可以/ 归结为/ 0/ -/ 1/ 背包/ 问题/ ,/ 因此/ 这个/ 优化/ 问题/ 是/ NP/ -/ hard/ 问题/ ./ 证毕/ ./ 本文/ 提出/ 一种/ 启发式/ 的/ 节点/ 关闭/ 策略/ 解决/ 能耗/ 最小化/ 问题/ ,/ 在/ 大型/ 集群/ 中/ 并不需要/ 理论/ 最优/ 值/ ,/ 近似/ 最优/ 解/ 满足/ 降低/ 能耗/ 的/ 要求/ ./ 无论/ 选择/ 何种/ 计算能力/ 的/ 节点/ ,/ 能耗/ 的/ 降低/ 和/ 响应/ 时间/ 的/ 增加/ 都/ 很/ 难/ 取舍/ ,/ 并且/ 关闭/ 节点/ 引入/ 的/ 数据传输/ 时间/ 在/ 异构/ 集群/ 中/ 变得/ 更加/ 复杂/ ./ 为了/ 解决/ 这个/ 问题/ ,/ 引入/ 一个/ 衡量/ 指标/ Δ/ E/ // Δ/ T/ ,/ 表示/ 在/ 关闭/ 节点/ 后/ 能耗/ 的/ 降低/ 值/ 和/ 响应/ 时间/ 增加值/ 的/ 比率/ ,/ 比值/ 越大/ ,/ 表示/ 关闭/ 该/ 节点/ 越/ 有效/ ./ 因此/ ,/ 每次/ 在/ 选择/ 节点/ 时/ ,/ 选择/ 使/ Δ/ E/ // Δ/ T/ 比值/ 最大/ 的/ 节点/ ,/ 直到/ SLA/ 要求/ 被/ 破坏/ 或/ 数据完整性/ 被/ 破坏/ ./ 启发式/ 的/ 节点/ 关闭/ 策略/ 如下/ 所示/ ./ 算法/ 2/ ./ 节点/ 关闭/ 策略/ ./ 输入/ :/ 机架/ 数量/ m/ ,/ 节点/ 规模/ N/ ,/ ω/ ,/ Tavg/ (/ ω/ )/ ,/ TSLA/ 输出/ :/ 集群/ 状态/ X1/ ./ 初始化/ X/ =/ N/ ;/ 2/ ./ 初始化/ 机架/ 集合/ S/ =/ / ;/ 3/ ./ FORi/ =/ 1tom4/ ./ IFX/ (/ i/ )/ >/ (/ N/ (/ i/ )/ +/ 1/ )/ // 25/ ./ IFT/ (/ X/ (/ 1/ )/ ,/ …/ ,/ X/ (/ i/ )/ -/ 1/ ,/ …/ ,/ X/ (/ m/ )/ ,/ ω/ )/ / TSLA6/ ./ 机架/ i/ 加入/ 集合/ S/ ;/ 7/ ./ ENDIF8/ ./ ENDIF9/ ./ ENDFOR10/ ./ IFS/ =/ =/ / 11/ ./ 程序/ 退出/ ,/ 集群/ 状态/ 为/ X/ ;/ 12/ ./ ELSE13/ ./ 在/ 集合/ S/ 中/ 挑选/ 有/ 最大/ Δ/ E/ // Δ/ T/ 比值/ 的/ 机架/ j/ ;/ 14/ ./ 关闭/ j/ 中/ 的/ 节点/ h/ (/ 不/ 同时/ 关闭/ 两个/ 相邻/ 节点/ )/ ;/ 15/ ./ X/ (/ j/ ,/ h/ )/ =/ 0/ ;/ 16/ ./ ENDIF17/ ./ 返回/ 步/ 2/ ./ 上述/ 的/ 节点/ 关闭/ 策略/ 能够/ 细粒度/ 地/ 关闭/ 节点/ ,/ 首先/ 在/ 整个/ 集群/ 中/ 选择/ 部分/ 机架/ ,/ 关闭/ 这些/ 机架/ 中/ 的/ 节点/ 不会/ 导致/ 数据/ 丢失/ ./ 然后/ 在/ 这个/ 机架/ 集合/ 中/ 去除/ 那些/ 在/ 关闭/ 节点/ 后/ 打破/ SLA/ 要求/ 的/ 机架/ ,/ 最后/ 在/ 剩下/ 的/ 机架/ 中/ 选择/ 使/ Δ/ E/ // Δ/ T/ 最大化/ 的/ 机架/ ,/ 从中/ 选择/ 一个/ 节点/ 关闭/ ,/ 遵从/ 不/ 同时/ 关闭/ 两个/ 相邻/ 节点/ 的/ 原则/ ./ 整个/ 算法/ 直到/ 数据完整性/ 或/ SLA/ 无法/ 满足/ 时/ 退出/ ./ 本文/ 提出/ 的/ 启发式/ 节点/ 关闭/ 策略/ 是/ 一种/ 贪心/ 算法/ ,/ 它/ 能够/ 快速/ 地/ 找出/ 优化/ 问题/ 的/ 近似/ 解/ ,/ 这/ 对于/ 一个/ 大型/ 实际/ 系统/ 来说/ 已经/ 足够/ 了/ ./ 6/ 系统/ 评测/ 本节/ 对/ 面向/ SLA/ 的/ 节能/ 管理系统/ Seadown/ 进行/ 实验/ 评测/ ,/ 包括/ 响应/ 时间/ 的/ 评测/ 和/ 能耗/ 的/ 评测/ ./ 在/ hadoop/ -/ 0.20/ ./ 2/ 版本/ 中/ 实现/ 了/ 混合/ 数据/ 副本/ 存储/ 策略/ 、/ 响应/ 时间/ 预测/ 方法/ 和/ 启发式/ 的/ 节点/ 关闭/ 策略/ ./ 实验/ 使用/ 以/ Map/ 任务/ 为主/ 的/ MapReduce/ 应用程序/ Grep/ 和/ Word/ -/ Count/ ,/ Grep/ 是/ 用于/ 文本文件/ 的/ 搜索/ 工具/ ,/ 而/ Word/ -/ Count/ 用于/ 在/ 文本文件/ 中/ 统计/ 词频/ ./ 这/ 两个/ 应用/ 是/ 典型/ 的/ 以/ Map/ 任务/ 为主/ 的/ 程序/ ,/ 只有/ 一个/ Reduce/ 任务/ 并且/ 数据传输/ 量/ 很少/ ./ 实验/ 中/ ,/ 数据/ 集/ 采用/ 160GB/ 自动/ 生成/ 的/ 文本文件/ ,/ 在/ 全/ 系统/ 开启/ 时/ 运行/ 约/ 15min/ 并且/ 集群/ 利用率/ 较/ 低/ ./ 实验/ 平台/ 由/ 48/ 台/ 桌面/ 机/ 组成/ 一个/ 集群/ ,/ 机器/ 分为/ 4/ 种/ 类型/ ,/ 每种/ 类型/ 12/ 台/ ,/ 这样/ 组成/ 4/ 个/ 机架/ 的/ 异构/ 系统/ ./ 这个/ 系统/ 与/ 本文/ 的/ 异构/ 集群/ 模型/ 相符/ ,/ 即/ 机架/ 内/ 的/ 机器/ 是/ 同构/ 的/ ,/ 机架/ 间/ 的/ 机器/ 是/ 异构/ 的/ ./ 每个/ 机架/ 的/ 节点/ 连/ 到/ 各自/ 的/ CiscoCatalyst3750/ -/ 24TS/ 交换机/ 上/ ,/ 交换机/ 连/ 到/ 一个/ Cisco/ 路由器/ 上/ ,/ 组成/ 一个/ 连通/ 的/ 集群/ ./ 集群/ 的/ 配置/ 如表/ 1/ 所示/ ./ 机架/ 号/ CPU/ 类型/ 1IntelCorei32/ ./ 943201721022IntelCore2Duo2/ ./ 84320158903IntelCore2Duo2/ ./ 04320118704IntelCore2Duo2/ ./ 4432013280/ 在/ 实验/ 中/ 关闭/ 了/ Hadoop/ 的/ 数据/ 自动/ 恢复/ 功能/ ,/ 因为/ 恢复/ 数据/ 需要/ 占用/ 大量/ 的/ 网络资源/ ,/ 在/ 拷贝/ 数据/ 的/ 过程/ 中/ 会/ 消耗/ 大量/ 的/ 能耗/ ,/ 即/ 关闭/ 节点/ 反而/ 会/ 能耗/ 增多/ ./ 一旦/ 应用程序/ 完成/ ,/ 则/ 开启/ 数据/ 自动/ 恢复/ 功能/ ,/ 在/ 混合/ 数据/ 副本/ 存储/ 策略/ 下/ ,/ 恢复/ 时间/ 很快/ ./ 6.1/ 响应/ 时间/ 预测/ 评估/ 本/ 节/ 测试/ 响应/ 时间/ 预测/ 方法/ 的/ 准确性/ ./ 首先/ 预测/ 估计/ 时间/ 和/ 真实/ 时间/ 的/ 差值/ ,/ 选择/ 关闭/ 机架/ 1/ 的/ 部分/ 节点/ 并/ 记录/ 真实/ 响应/ 时间/ ./ 图/ 3/ 和/ 图/ 4/ 分别/ 是/ Page8/ 不同/ 应用/ 的/ 比较/ ,/ 未/ 考虑/ 额外/ 数据传输/ 开销/ 的/ 预测/ 时间/ 小于/ 真实/ 时间/ ,/ 并/ 随着/ 节点/ 关闭/ 数量/ 的/ 增多/ ,/ 两者之间/ 的/ 差值/ 越来越/ 大/ ./ 因为/ 关闭/ 的/ 节点/ 越/ 多/ ,/ 重新分配/ 的/ 任务/ 越/ 多/ ,/ 导致/ 网络/ 数据传输/ 量/ 增大/ ./ 当/ 考虑/ 额外/ 的/ 数据传输/ 时间/ 后/ ,/ 它/ 略微/ 大于/ 真实/ 的/ 响应/ 时间/ ,/ 因为/ 预测/ 时间/ 是/ 在/ 最差/ 情况/ 时/ 计算/ 的/ ./ 将/ 响应/ 时间/ 估计/ 的/ 大/ 一点/ 有利于/ 满足/ SLA/ 要求/ ,/ 并且/ 程序运行/ 过程/ 中/ 可能/ 会/ 出现/ straggler/ ,/ 也/ 会/ 增加/ 响应/ 时间/ ,/ 应该/ 少/ 关闭/ 一些/ 节点/ ./ 在/ 不同/ 的/ 机架/ 中/ 关闭/ 节点/ 对/ 响应/ 时间/ 的/ 预测/ 也/ 会/ 产生/ 影响/ ./ 如果/ 计算能力/ 强/ 的/ 节点/ 被/ 关闭/ ,/ 则/ 会/ 产生/ 大量/ 的/ 重新分配/ 的/ Map/ 任务/ ,/ 数据传输/ 时间/ 会/ 增大/ ,/ 时间/ 预测值/ 与/ 真实/ 值/ 之间/ 的/ 差值/ 将会/ 增大/ ./ 如图/ 5/ 所示/ ,/ 机架/ 1/ 的/ 节点/ 性能/ 最高/ ,/ 它/ 对/ 时间/ 预测/ 的/ 影响/ 也/ 越/ 大/ ,/ 相对误差/ 也/ 越/ 大/ ./ 然而/ 随着/ 节点/ 关闭/ 数量/ 的/ 增多/ ,/ 4/ 条/ 曲线/ 都/ 趋于/ 平缓/ ,/ 即/ 相对误差/ 都/ 趋于稳定/ ./ 然后/ 随机/ 在/ 所有/ 机架/ 中/ 挑选/ 一些/ 节点/ 关闭/ ,/ 测量/ 相对误差/ ./ 如/ 机架/ 1/ 的/ 3/ 个/ 节点/ 、/ 机架/ 2/ 的/ 4/ 个/ 节点/ 、/ 机架/ 3/ 的/ 3/ 个/ 节点/ 、/ 机架/ 4/ 的/ 2/ 个/ 节点/ ,/ 这里/ 只/ 选择/ 了/ 部分/ 组合/ ,/ 因为/ 全部/ 组合/ 数量/ 巨大/ ,/ 实验/ 时间/ 过长/ ,/ 部分/ 组合/ 能够/ 反映/ 总体/ 的/ 相对误差/ ./ 如图/ 6/ 所示/ ,/ 相对误差/ 大都/ 集中/ 在/ 4/ %/ ~/ 6/ %/ 之间/ ,/ 只有/ 少数/ 组合/ 的/ 误差/ 超过/ 6/ %/ ,/ 这/ 对于/ 运行/ 时间/ 较长/ 的/ 应用/ 来说/ 足够/ 好/ 了/ ./ 6.2/ 节点/ 关闭/ 策略/ 评估/ 本/ 节/ 研究/ 节点/ 关闭/ 策略/ 的/ 效率/ ./ 在/ 开始/ 阶段/ ,/ 启发式/ 算法/ 会/ 选择/ 计算能力/ 强/ 的/ 节点/ 关闭/ ,/ 因为/ 它/ 能/ 大幅/ 降低/ 能耗/ 而/ SLA/ 要求/ 依然/ 得到/ 满足/ ./ 随着/ 节点/ 关闭/ 数量/ 增多/ ,/ 性能/ 会/ 急剧/ 下滑/ ,/ 因为/ MapReduce/ 程序/ 不仅/ 受/ 节点/ 数量/ 和/ 性能/ 的/ 影响/ ,/ 还/ 受到/ 额外/ 的/ 数据传输/ 开销/ 的/ 影响/ ./ 然后/ 算法/ 将会/ 选择/ 较/ 低/ 计算能力/ 的/ 节点/ ,/ 因为/ 它/ 不会/ 打破/ SLA/ 要求/ ,/ 还/ 能够/ 降低/ 能耗/ ./ 图/ 7/ 和/ 图/ 8/ 显示/ 在/ 不同/ 的/ SLA/ 要求/ 下/ ,/ 两种/ 不同/ 的/ 应用/ 能够/ 关闭/ 的/ 节点/ 数量/ ./ Grep/ 应用/ 响应/ 不得/ 超过/ 1200s/ 的/ 情况/ 下/ ,/ 能够/ 关闭/ 7/ 个/ 节点/ ,/ 机架/ 1/ 的/ 4/ 个/ 节点/ 、/ 机架/ 3/ 的/ 2/ 个/ 节点/ 和/ 机架/ 4/ 的/ 一个/ 节点/ ./ 随着/ SLA/ 要求/ 的/ 放松/ ,/ 将/ 有/ 更/ 多/ 的/ 节点/ 被/ 关闭/ ./ 在/ 不同/ 的/ 应用/ 下/ ,/ 关闭/ 的/ 节点/ 数量/ 有所不同/ ,/ 因为/ 节点/ 运行/ 不同/ 的/ 应用/ 所/ 表现/ 的/ 计算能力/ 不同/ ./ 实验/ 结果表明/ ,/ 算法/ 根据/ 不同/ 的/ SLA/ 要求/ 细粒度/ 地/ 选择/ 不同/ 类型/ 的/ 节点/ 关闭/ ./ 图/ 7Grep/ 程序/ ,/ 不同/ SLA/ 要求/ 下/ 关闭/ 节点/ 的/ 情况/ Page9/ 图/ 8Word/ -/ Count/ 程序/ ,/ 不同/ SLA/ 要求/ 下/ 关闭/ 节点/ 的/ 情况/ 图/ 9/ 显示/ 在/ 不同/ SLA/ 要求/ 下/ 的/ 能耗/ 和/ 响应/ 时间/ ./ 能耗/ 随着/ SLA/ 的/ 放松/ 呈/ 线性/ 趋势/ 下降/ ,/ 在/ 响应/ 时间/ 不/ 超过/ 1200s/ 的/ 情况/ 下/ ,/ Word/ -/ Count/ 程序/ 节省/ 了/ 20/ %/ 的/ 能耗/ ,/ 而/ 在/ 响应/ 时间/ 不/ 超过/ 1400s/ 的/ 情况/ 下/ ,/ 大约/ 节省/ 了/ 40/ %/ 的/ 能耗/ ./ 在/ SLA/ 放松/ 超过/ 一个/ 时间/ 点时/ ,/ 能耗/ 降低/ 稳定/ 在/ 50/ %/ 左右/ ,/ 这/ 是因为/ 在/ 集群/ 利用率/ 较/ 低/ 阶段/ 关闭/ 节点/ 是/ 为了/ 消除/ 机器/ 浪费/ 的/ 能耗/ ,/ 一旦/ 关闭/ 了/ 足够/ 多/ 的/ 节点/ ,/ 活跃/ 节点/ 的/ 利用率/ 已经/ 无法/ 提高/ 时/ ,/ 能耗/ 很难/ 再/ 降低/ ./ 响应/ 时间/ 随着/ 节点/ 关闭/ 数量/ 的/ 增多/ 而/ 快速增长/ ,/ 然而/ 在/ 启发式/ 策略/ 下/ 很少/ 超过/ SLA/ 要求/ ./ 实验/ 结果表明/ ,/ 启发式/ 算法/ 能够/ 大幅/ 降低/ 能耗/ ./ 本节/ 将/ 启发式/ 算法/ 和/ 以前/ 的/ 两个/ 工作/ 进行/ 比较/ ./ 一是/ “/ coveringsubset/ ”/ 方法/ ,/ 它/ 能够/ 关闭/ 大量/ 节点/ 降低/ 能耗/ ,/ 但是/ 忽略/ 了/ 性能/ 问题/ ./ 另/ 一个/ 是/ “/ All/ -/ inStrategy/ ”/ 策略/ ,/ 尽管/ 它/ 比/ “/ coveringsubset/ ”/ 方法/ 降低/ 更/ 多/ 的/ 能耗/ ,/ 然而/ 它/ 依然/ 没有/ 消除/ 程序运行/ 过程/ 中/ 节点/ 浪费/ 的/ 能耗/ ./ 这里/ 主要/ 比较/ 启发式/ 节点/ 关闭/ 策略/ 和/ “/ All/ -/ inStrategy/ ”/ 策略/ 的/ 效率/ ,/ 比较/ 以/ 一定/ 长度/ 的/ 时间/ 窗口/ 为准/ [/ 9/ ]/ ,/ 由/ 计算/ 时间/ 和/ 空闲/ 时间/ 组成/ ,/ 相应/ 地/ 能耗/ 由/ 节点/ 服务/ 时/ 的/ 能耗/ 和/ 没有/ 任务/ 时/ 维持/ 节点/ 活跃/ 的/ 能耗/ 组成/ ./ 如图/ 10/ 所示/ ,/ “/ All/ -/ inStrategy/ ”/ 策略/ 下/ 的/ 能耗/ 是/ 恒定/ 的/ ,/ 而/ 启发式/ 策略/ 下/ 的/ 能耗/ 随着/ 时间/ 窗口/ 的/ 增大/ 而/ 增长/ ,/ 开始/ 时/ 低于/ “/ All/ -/ inStrategy/ ”/ 的/ 能耗/ ,/ 之后/ 则/ 大于/ “/ All/ -/ inStrategy/ ”/ 的/ 能耗/ ./ 在/ 一段时间/ 内/ 的/ 能耗/ 由/ 功率/ 乘以/ 时间/ 计算/ 而/ 来/ ,/ 时间/ 窗口/ 较/ 短时/ ,/ 大部分/ 时间/ 用来/ 计算/ ,/ 在/ 关闭/ 节点/ 策略/ 下/ ,/ 减少/ 了/ 程序运行/ 过程/ 中/ 的/ 能耗/ ./ 而/ 随着/ 时间/ 窗口/ 的/ 增长/ ,/ 节点/ 空闲/ 时间/ 增长/ ,/ 尽管/ 关闭/ 了/ 部分/ 节点/ ,/ 但/ 活跃/ 的/ 节点/ 仍然/ 会/ 消耗/ 很大/ 能量/ ,/ 这时/ “/ All/ -/ inStrategy/ ”/ 策略/ 会/ 消除/ 这部分/ 能耗/ ,/ 因此/ 启发式/ 策略/ 反而/ 会/ 效率/ 较/ 低/ ./ 7/ 结语/ 本文/ 探讨/ 在/ 异构/ MapReduce/ 集群/ 中/ 实施/ 关闭/ 节点/ 的/ 策略/ 来/ 降低/ 能耗/ ,/ 提出/ 一种/ 面向/ SLA/ 的/ 能耗/ 管理/ 方法/ Seadown/ ./ 包括/ 三个/ 部分/ :/ 首先/ ,/ 提出/ 了/ 一种/ 混合/ 数据/ 副本/ 存储/ 方法/ ,/ 集成/ 了/ 顺序存储/ 策略/ 和/ 随机/ 存储/ 策略/ 的/ 优点/ ,/ 它/ 使得/ 在/ MapReduce/ 集群/ 中/ 能够/ 关闭/ 大量/ 节点/ ,/ 同时/ 兼顾/ 系统/ 的/ 容错性/ 能/ ,/ 保证/ 集群/ 正常/ 运转/ ./ 其次/ ,/ 提出/ 了/ 一种/ 基于/ 历史记录/ 的/ 响应/ 时间/ 预测/ 方法/ ,/ 能够/ 准确/ 地/ 预测/ 响应/ 时间/ ,/ 相对误差/ 大都/ 在/ 6/ %/ 以下/ ./ 最后/ ,/ 在/ 响应/ 时间/ 预测/ 的/ 基础/ 上/ ,/ 提出/ 一种/ 启发式/ 的/ 节点/ 关闭/ 算法/ ,/ 有效/ 地/ 解决/ 能耗/ 与/ 性能/ 优化/ 问题/ ./ 在/ 本文/ 提出/ 的/ 方法/ 中/ 还有/ 一些/ 问题/ 需要/ 进一步/ 研究/ ./ 本文/ 的/ 应用/ 局限于/ 以/ Map/ 任务/ 为主/ 的/ 单个/ MapReduce/ 应用/ ,/ 需要/ 扩展/ 到/ 多种类型/ 的/ 混合/ 应用/ ,/ 考虑/ 竞争/ 的/ 开销/ ,/ 完善/ 响应/ 时间/ 预测/ 机制/ ./ 探索/ 新/ 的/ 调度/ 策略/ ,/ 减少/ 关闭/ 节点/ 带来/ 的/ 数据传输/ 开销/ ./ 

