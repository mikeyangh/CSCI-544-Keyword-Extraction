Page1/ 软件/ 自/ 适应/ :/ 基于/ 控制/ 理论/ 的/ 方法/ 1/ )/ (/ 解放军理工大学/ 国防/ 工程学院/ 南京/ 210007/ )/ 2/ )/ (/ 计算机软件/ 新/ 技术/ 国家/ 重点/ 实验室/ (/ 南京大学/ )/ 南京/ 210093/ )/ 摘要/ 软件/ 自/ 适应/ 是/ 软件系统/ 为/ 应对/ 外部环境/ 、/ 用户/ 需求/ 和/ 系统/ 自身/ 的/ 频繁/ 变化/ 而/ 进行/ 自我/ 调整/ 的/ 一种/ 能力/ ,/ 是/ 近年来/ 软件工程/ 领域/ 研究/ 的/ 热点/ ./ 由于/ 基于/ “/ 感知/ -/ 决策/ -/ 调整/ ”/ 的/ 软件/ 自/ 适应/ 环/ 与/ 基于/ “/ 感知/ -/ 规划/ -/ 动作/ ”/ 的/ 控制/ 环/ 有着/ 天然/ 的/ 相似性/ ,/ 采用/ 控制/ 理论/ 作为/ 手段/ 来/ 研究/ 软件/ 自/ 适应/ 问题/ 已/ 成为/ 一种/ 重要/ 风范/ ./ 该文/ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 工作/ 进行/ 了/ 综述/ ./ 首先/ ,/ 阐释/ 并/ 定义/ 了/ 软件/ 自/ 适应/ 的/ 概念/ 内涵/ ;/ 其次/ ,/ 讨论/ 了/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 基本/ 思想/ 、/ 代表性/ 研究/ 工作/ ;/ 第三/ ,/ 在/ 给出/ 综述/ 方法/ 和/ 过程/ 的/ 基础/ 上/ ,/ 建立/ 了/ 综述/ 分类/ 框架/ ;/ 而后/ ,/ 结合/ 分类/ 框架/ 分别/ 从/ 控制工程/ 视角/ 和/ 软件工程/ 视角/ ,/ 即/ 控制结构/ 、/ 概念/ 框架/ 、/ 理论/ 基础/ 、/ 开发方法/ 、/ 评价/ 验证/ 等/ 方面/ 对/ 研究/ 现状/ 进行/ 了/ 详细/ 讨论/ 和/ 比较/ ./ 最后/ ,/ 分析/ 了/ 当前/ 研究所/ 存在/ 的/ 不足/ 并/ 展望/ 了/ 未来/ 的/ 研究/ 趋势/ ./ 关键词/ 软件/ 自/ 适应/ ;/ 自/ 适应/ 软件/ ;/ 控制/ 理论/ ;/ 反馈/ 控制/ 1/ 引言/ 软件/ 自身/ 是/ 应用/ 、/ 人/ 、/ 操作/ 域/ 和/ 活动/ 域/ 等/ 共同/ 构成/ 的/ 一个/ 模型/ [/ 1/ ]/ ,/ 是/ 对/ 客观/ 世界/ 问题/ 空间/ 与/ 解/ 空间/ 的/ 具体/ 描述/ ,/ 是/ 客观事物/ 的/ 一种/ 反映/ [/ 2/ ]/ ./ 因此/ ,/ 日益/ 复杂/ 而/ 多元/ 的/ 客观/ 世界/ 和/ 人/ 的/ 主观/ 世界/ 造就/ 了/ 软件系统/ 的/ 复杂性/ 与/ 变化/ 性/ ./ 在/ 现代/ 社会/ ,/ 以/ Internet/ 为/ 代表/ 的/ 网络化/ 、/ 分布式计算/ 系统/ 的/ 出现/ 和/ 普及/ 使/ 计算机软件/ 所/ 面临/ 的/ 运行/ 环境/ 开始/ 从/ 封闭/ 、/ 静态/ 、/ 可控/ 逐步/ 走向/ 开放/ 、/ 动态/ 、/ 难控/ [/ 3/ ]/ ,/ 使得/ 软件/ 在/ 运行/ 过程/ 中/ 常常/ 面临/ 着/ 来自/ 软件/ 内部/ 和/ 外部/ 的/ 诸多/ 变化/ 和/ 干扰/ ./ 如/ 在/ 民用/ 与/ 商用/ 领域/ ,/ 以/ 网构/ 软件/ [/ 3/ -/ 4/ ]/ 、/ 普适/ 计算/ 、/ 云/ 计算/ 、/ 物/ 联网/ 、/ CPS/ (/ CyberPhysicalSystems/ ,/ 信息/ 物理/ 融合/ 系统/ )/ 、/ ULS/ (/ Ultra/ -/ Large/ -/ ScaleSystems/ ,/ 超大规模/ 系统/ )/ 等/ 为/ 代表/ 的/ 新型/ 计算/ 模式/ 的/ 迅速/ 发展/ 正/ 深刻/ 地/ 影响/ 和/ 改变/ 着/ 软件/ 的/ 构造/ 形态/ ,/ 在/ 这些/ 计算/ 模式/ 下/ ,/ 软件系统/ 要/ 不断/ 适应/ 网络/ 、/ 位置/ 、/ 设备/ 、/ 资源/ 和/ 用户/ 需求/ 的/ 改变/ ./ 因此/ ,/ 对/ 环境/ 变化/ 和/ 用户/ 需求/ 变化/ 的/ 动态/ 演化/ 和/ 适应能力/ 已/ 成为/ 对/ 软件系统/ 的/ 必然/ 需求/ ,/ 即/ 要求/ 软件系统/ 具有/ 自/ 适应能力/ ,/ 以能/ 及时/ 消除/ 或/ 减轻/ 变化/ 所/ 带来/ 的/ 不利/ 影响/ ,/ 确保/ 持续/ 而/ 不间断/ 地/ 提供/ 服务/ ./ 软件/ 自/ 适应/ 的/ 研究/ 已/ 成为/ 当前/ 软件工程/ 领域/ 最为/ 活跃/ 的/ 研究/ 方向/ 之一/ ,/ 其是/ 一个/ 内涵/ 丰富/ 、/ 跨专业/ 的/ 研究/ 领域/ [/ 5/ ]/ ,/ 具有/ 固有/ 的/ 学科/ 交叉/ 特点/ [/ 6/ ]/ ./ 而/ Laddaga/ [/ 7/ ]/ 给出/ 了/ 3/ 类/ 软件/ 自/ 适应/ 设计/ 方式/ 的/ 比喻/ (/ designmetaphor/ )/ :/ 将/ 自/ 适应/ 软件/ 编程/ 实现/ 为/ 一个/ 动态/ 规划系统/ 、/ 将/ 自/ 适应/ 软件/ 编程/ 实现/ 为/ 一个/ 控制系统/ ,/ 将/ 自/ 适应/ 软件/ 编程/ 实现/ 为/ 一个/ 自/ 感知/ 系统/ ./ 近年来/ ,/ 采用/ 控制/ 理论/ 来/ 研究/ 软件/ 自/ 适应/ 问题/ 已/ 成为/ 当前/ 计算机领域/ 的/ 一种/ 重要/ 风范/ ./ 软件/ 自/ 适应/ 的/ 本质/ 是/ 基于/ “/ 感知/ (/ sense/ )/ -/ 决策/ (/ decide/ )/ -/ 调整/ (/ adjust/ )/ ”/ 的/ 执行/ 环/ ,/ 而/ 源于/ 控制/ 领域/ 的/ 控制/ 理论/ 所/ 讨论/ 的/ 主要/ 问题/ 是/ 系统/ 的/ 各个/ 不同/ 部分/ 之间/ 相互作用/ 的/ 性质/ ,/ 以及/ 整个/ 系统/ 总体/ 的/ 运动/ 状态/ [/ 8/ ]/ ,/ 其/ 关注/ 于/ 通过/ “/ 感知/ (/ sense/ )/ -/ 规划/ (/ plan/ )/ -/ 动作/ (/ act/ )/ ”/ 环来/ 与/ 环境/ 进行/ 不间断/ 地/ 交互/ ./ 可见/ 自/ 适应/ 环/ 与/ 控制/ 环/ 有着/ 天然/ 的/ 相似性/ ./ Kramer/ 等/ 人/ [/ 9/ ]/ 认为/ 为了/ 应对/ 自/ 适应/ 软件/ 的/ 复杂性/ 需要/ 采用/ 严格/ 的/ (/ rigorous/ )/ 方法/ 来/ 设计/ 、/ 构造/ 和/ 分析/ 软件/ 以/ 避免/ 不必要/ 的/ 缺陷/ ./ 而/ 形式化/ 的/ 控制/ 理论/ 能为/ 反馈系统/ 的/ 建模/ 、/ 分析/ 、/ 设计/ 和/ 评估/ 提供/ 严格/ 的/ 方法学/ [/ 10/ ]/ ./ 与/ adhoc/ 方法/ (/ 主要/ 依靠/ 费力/ 的/ 人工/ 设计/ // 整定/ // 测试/ 的/ 过程/ 迭代/ 方式/ )/ 相比/ ,/ 基于/ 控制/ 理论/ 的/ 方法/ 能/ 使/ 设计者/ 利用/ 已/ 成熟/ 的/ 、/ 分析/ 式/ (/ analytical/ )/ 的/ 方法/ 来/ 系统地/ 设计/ 自/ 适应/ 软件系统/ ,/ 以/ 在/ 不可/ 预测/ 的/ 环境/ 中/ 实现/ 期望/ 的/ 性能/ 确保/ (/ performanceguarantee/ )/ [/ 11/ ]/ ./ 同时/ ,/ 基于/ 控制/ 理论/ 的/ 方法/ 能/ 减少/ 自/ 适应/ 系统/ 的/ 设计/ 时间/ ,/ 能/ 通过/ 证明/ 的/ 方式/ 来/ 判定/ 设计/ 的/ 系统/ 是否/ 满足/ 性能/ 规格/ ,/ 而/ adhoc/ 的/ 方法/ 只能/ 依赖/ 重复/ 测试/ 、/ 猜测/ 和/ 经验/ 等/ 手段/ ,/ 从而/ 无法/ 满足/ 运行/ 时/ 性能/ 确保/ 要求/ [/ 11/ ]/ ./ 因此/ ,/ 将/ 控制/ 理论/ 应用/ 到/ 软件/ 自/ 适应/ 研究/ 领域/ 得到/ 了/ 许多/ 学者/ 的/ 重视/ 并/ 取得/ 了/ 较为/ 丰富/ 的/ 研究成果/ ./ 尽管/ Patikirikorala/ 等/ 人/ [/ 12/ ]/ 曾/ 对/ 自/ 适应/ 软件系统/ 中/ 基于/ 控制工程/ 的/ 方法/ 进行/ 过/ 简单/ 综述/ ,/ 但/ 该项/ 工作/ 仍/ 将/ 重点/ 放在/ 控制工程/ 这/ 一维/ ,/ 缺少/ 对/ 软件工程/ 所/ 关心/ 的/ 技术/ 问题/ (/ 如/ 软件/ 构造方法/ 、/ 支撑/ 工具/ 、/ 评价/ 验证/ 等/ )/ 的/ 总结/ 和/ 分析/ ./ 总之/ ,/ 目前/ 还/ 缺少/ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 系统性/ 综述/ ./ 本文/ 主要/ 从/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 这个/ 视角/ 来/ 综述/ 软件/ 自/ 适应/ 相关/ 的/ 原理/ 、/ 模型/ 、/ 方法/ 、/ 技术/ 、/ 工具/ 等/ ,/ 并/ 分析/ 现有/ 研究/ 面临/ 的/ 新/ 问题/ 、/ 展望未来/ 研究/ 趋势/ ./ 本文/ 第/ 2/ 节/ 讨论/ 软件/ 自/ 适应/ 的/ 概念/ 与/ 原理/ ,/ 并/ 简要/ 介绍/ 控制/ 理论/ 的/ 基础知识/ ;/ 第/ 3/ 节/ 讨论/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 基本/ 思想/ 和/ 代表性/ 研究/ 工作/ ;/ 第/ 4/ 节/ 给出/ 本文/ 采用/ 的/ 综述/ 方法/ 和/ 文献/ 综述/ 过程/ ;/ 第/ 5/ 节/ 定义/ 了/ 分类/ 框架/ 与/ 分类/ 标准/ ;/ 第/ 6/ 节/ 讨论/ 、/ 分析/ 和/ 比较/ 了/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 现状/ ;/ 第/ 7/ 节/ 分析/ 讨论/ 了/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究所/ 存在/ 的/ 不足/ ,/ 并/ 展望未来/ 研究/ 趋势/ ;/ 第/ 8/ 节/ 总结/ 全文/ ./ 2/ 软件/ 自/ 适应/ 及/ 控制/ 理论/ 概述/ 2.1/ 软件/ 自/ 适应/ 概念/ 2.1/ ./ 1/ 软件/ 自/ 适应/ 的/ 基本概念/ (/ 1/ )/ 自/ 适应/ ./ 自/ 适应/ 这一/ 概念/ 来源于/ 生物学/ ,/ 是/ 指/ 生物/ 变更/ 自己/ 的/ 习性/ 以/ 适应/ 新/ 环境/ 的/ 一种/ 特征/ [/ 13/ ]/ ./ 自/ 适应/ 所/ 带来/ 的/ 优良/ 系统/ 品质/ ,/ 使得/ 其/ 被/ 引入/ 到/ 诸多/ 学科/ 领域/ 来/ 构造/ 各类/ 自/ 适应/ 系统/ :/ 如自/ 适应/ 滤波/ 、/ 自/ 适应/ 巡航/ 、/ 自/ 适应控制/ [/ 13/ ]/ 等/ ./ 而/ 在/ 软件工程/ 领域/ ,/ 随着/ 软件系统/ 的/ 日趋/ 复杂/ 及其/ 面临/ 的/ 外部/ 因素/ (/ 环境/ 及/ 需求/ )/ 变化/ 日益频繁/ ,/ 需要/ 有/ 一种/ 机制/ 来/ 应对/ 这些/ 挑战/ ,/ 使/ 软件/ 具备/ 自/ 适应能力/ 从而/ 形成/ 自/ 适应/ 软件/ ,/ 这正/ 成为/ 人们/ 所/ 追求/ 的/ 一种/ 软件/ 形态/ 和/ 风范/ (/ paradigm/ )/ ./ 与/ “/ 软件/ 自/ 适应/ ”/ 概念/ 相似/ 的/ 另/ 一个/ 概念/ 是/ “/ 自/ Page3/ 适应/ 软件/ (/ self/ -/ adaptivesoftware/ )/ ”/ [/ 14/ ]/ ,/ 尽管/ Oreizy/ 等/ 人/ [/ 15/ ]/ 将/ 自/ 适应/ 软件系统/ 分为/ 自/ 适应/ 管理/ 和/ 演化/ 管理/ 两个/ 阶段/ ,/ 但/ 大部分/ 文献/ 都/ 对/ 这/ 两个/ 概念/ 不/ 作/ 区分/ ,/ 认为/ 二者/ 可以/ 交替/ 使用/ ./ 从/ 字面/ 来看/ ,/ 软件/ 自/ 适应/ 关注/ 的/ 是/ 自/ 适应能力/ ,/ 而/ 自/ 适应/ 软件/ 关注/ 的/ 是/ 软件/ 构造方法/ 和/ 软件/ 实体/ 本身/ ./ 由于/ 本文/ 重点/ 是/ 放在/ 软件/ 的/ 自/ 适应/ 机制/ 实现/ 方法/ 上/ ,/ 因此/ ,/ 会/ 更/ 多/ 地/ 使用/ 软件/ 自/ 适应/ 这一/ 概念/ ,/ 但/ 有时/ 也/ 会/ 不加区分/ 地/ 交替/ 使用/ ./ (/ 2/ )/ 软件/ 自/ 适应/ ./ 关于软件/ 自/ 适应/ ,/ 目前/ 尚未/ 有/ 统一/ 的/ 定义/ ./ 有的是/ 从/ 功能/ 和/ 性能/ 改进/ 的/ 角度/ 进行/ 定义/ [/ 14/ ]/ ,/ 还有/ 的/ 是从/ 应对/ 环境/ 变化/ 的/ 角度/ [/ 15/ -/ 16/ ]/ 进行/ 定义/ ./ 而/ 我们/ 认为/ ,/ 软件/ 自/ 适应/ 在/ 作为/ 软件系统/ 的/ 一个/ 能力/ 属性/ 的/ 同时/ ,/ 又/ 可/ 理解/ 为/ 是/ 一个/ 过程/ ,/ 即/ 软件/ 自/ 适应/ 具有/ 典型/ 的/ 动态性/ 和/ 目的性/ 特征/ ,/ 也就是说/ ,/ 软件/ 自/ 适应/ 是/ 一种/ 在/ 受到/ 环境/ 变化/ 的/ 扰动/ 下/ ,/ 软件系统/ 能/ 自我/ 调整/ 动态/ 地/ 逼近/ 自/ 适应/ 目标/ 的/ 能力/ ./ 本文/ 借鉴/ 控制/ 理论/ 的/ 思想/ 对/ 软件/ 自/ 适应/ 作出/ 如下/ 定义/ :/ 软件/ 自/ 适应/ 是/ 指/ 软件系统/ 在/ 受到/ 变化/ 的/ 干扰/ 时/ ,/ 为/ 避免/ 进入/ 失效/ 状态/ 而/ 在线/ 自我/ 调整/ 以能/ 动态/ 地/ 逼近/ 任务/ 目标/ 的/ 一种/ 过程/ ./ 这种/ 理解/ 可/ 形式化/ 地/ 刻画/ 为/ :/ 令/ u/ 为/ 软件系统/ 的/ 运行/ 状态/ ,/ 其是/ 系统/ 时间/ t/ 的/ 函数/ ;/ U/ 为/ 软件系统/ 可/ 接受/ 状态/ 空间/ (/ AcceptableStateSpace/ )/ ,/ 当/ u/ ∈/ U/ 时/ ,/ 软件/ 服务质量/ 仍/ 处于/ 用户/ 接受/ 范围/ 内/ ;/ F/ 为/ 软件系统/ 失效/ 状态/ 空间/ (/ FailureStateSpace/ )/ ,/ 当/ u/ ∈/ F/ 时/ ,/ 软件/ 关键/ 指标/ 被/ 破坏/ ,/ 无法/ 提供/ 可用/ 的/ 功能/ 和/ 性能/ ;/ C/ 为/ 软件系统/ 面临/ 的/ 所有/ 变化/ 集合/ ,/ A/ 为/ 自/ 适应/ 平衡/ 状态/ 集合/ (/ 此时/ 系统/ 性能/ 或/ 功能/ 已经/ 达到/ 用户/ 的/ 期望值/ 或/ 目标/ ,/ 系统/ 状态/ 不再/ 发生/ 大/ 的/ 变化/ )/ ,/ 假设/ 在/ t/ =/ t0/ 时/ ,/ 软件系统/ 状态/ 稳定/ 于/ A/ 区域/ 内/ ,/ 即/ u/ (/ t/ )/ ∈/ A/ ;/ 而/ 在/ t/ =/ t1/ (/ t1/ >/ t0/ )/ 时/ ,/ 外部环境/ 产生/ 变化/ δ/ ∈/ C/ ,/ 使/ 软件系统/ 运行/ 状态/ 偏离/ 了/ 平衡态/ ,/ 由/ 平衡/ 状态/ 空间/ 进入/ 可/ 接受/ 状态/ 空间/ ,/ 但/ 尚未/ 到达/ 失效/ 状态/ 空间/ ./ 即/ 此时/ ,/ 软件系统/ 在/ 自/ 适应/ 机制/ 作用/ 下/ ,/ 使得/ 其能/ 及时/ 感知/ 到/ 这种/ 状态/ 变化趋势/ ,/ 通过/ 调整/ 自身/ 行为/ ,/ 经过/ 一段时间/ Δ/ t/ ,/ 由/ 用户/ 可/ 接受/ 状态/ 空间/ 又/ 重新/ 回到/ 目标/ 区域/ ,/ 即/ 有/ 软件/ 自/ 适应/ 的/ 研究/ 还/ 与/ 其他/ 几个/ 领域/ 非常/ 相近/ ,/ 其中/ 的/ 典型/ 代表/ 是/ 自治/ 计算/ (/ autonomiccomputing/ )/ 和/ 自/ 管理/ (/ self/ -/ management/ )/ 系统/ [/ 17/ ]/ ./ 一般/ 认为/ ,/ 自/ 适应/ 软件/ 侧重于/ 软件系统/ 的/ 自/ 适应/ ,/ 而/ 自治/ 和/ 自/ 管理系统/ 更/ 关注/ 于/ 整个/ 计算/ 系统/ (/ 包括/ 硬件/ 、/ 网络/ 等/ )/ ./ 事实上/ ,/ 自/ 适应/ 软件系统/ 与/ 自治/ 计算/ 系统/ 采用/ 的/ 研究/ 方法/ 和/ 技术/ 很难/ 做出/ 区分/ ,/ 因此/ 许多/ 研究/ 人员/ 也/ 常常/ 对/ “/ 自/ 适应/ ”/ 、/ “/ 自治/ 计算/ ”/ 、/ “/ 自/ 管理/ ”/ 几个/ 说法/ 不加区分/ 的/ 互换/ 使用/ [/ 18/ ]/ ./ (/ 3/ )/ 软件/ 自/ 适应/ 环/ ./ 由/ 软件/ 自/ 适应/ 的/ 定义/ 可以/ 知道/ ,/ 要/ 完成/ 一个/ 基本/ 的/ 软件/ 自/ 适应/ 过程/ 至少/ 包括/ 3/ 个/ 核心/ 环节/ :/ 感知/ (/ sense/ )/ 、/ 评价/ (/ evaluate/ )/ 和/ 施动/ (/ act/ )/ ./ 感知/ 环节/ 用来/ 收集/ 环境/ 及/ 用户/ 需求/ 信息/ ,/ 捕捉/ 环境/ 及/ 需求/ 的/ 变化/ ;/ 评价/ 环节/ 基于/ 所/ 获取/ 的/ 变化/ 、/ 预定/ 的/ 目标/ 和/ 推理/ 评价/ 机制/ 得出/ 该/ 如何/ 调整/ 自己/ 才能/ 适应/ 这种/ 变化/ 的/ 结论/ (/ 例如/ ,/ 将/ 组件/ A/ 替换/ 为/ 组件/ B/ )/ ,/ 最后/ ,/ 施动/ 环节/ 将/ 评价/ 结果/ 施加/ 到/ 目标/ 软件系统/ 上/ ,/ 完成/ 自我/ 调整/ 过程/ ./ 上述/ 过程/ 构成/ 了/ 一个/ “/ 感知/ -/ 评价/ -/ 施动/ ”/ 的/ 自/ 适应/ 环/ (/ loop/ )/ ./ 对于/ 自/ 适应/ 环/ 的/ 理解/ 与/ 描述/ ,/ 较为/ 著名/ 的/ 是/ IBM/ 的/ MAPE/ -/ K/ 环/ [/ 19/ ]/ ,/ 其/ 将/ 自/ 适应/ 过程/ 分为/ 监视/ (/ Monitoring/ )/ 、/ 分析/ (/ Analyzing/ )/ 、/ 规划/ (/ Planning/ )/ 及/ 执行/ (/ Executing/ )/ 共/ 4/ 个/ 阶段/ 外加/ 一个/ 知识库/ (/ Knowledge/ -/ base/ )/ ./ 而/ Oreizy/ 等/ 人/ [/ 15/ ]/ 将/ 自/ 适应/ 环/ 概括/ 为/ 评估/ 与/ 监视/ (/ evaluateandmonitorobservations/ )/ 、/ 规划/ 改变/ (/ planchanges/ )/ 、/ 部署/ 变化/ 描述/ (/ deploychangedescrip/ -/ tions/ )/ 、/ 实施/ 变化/ 和/ 采集/ 观测/ 信息/ (/ enactchangesandcollectobservations/ )/ 几个/ 环节/ ./ 还有/ Dobson/ 等/ 人/ [/ 20/ ]/ 将/ 这种/ 自/ 适应/ 环/ 理解/ 为/ 采集/ (/ collect/ )/ 、/ 分析/ (/ analysis/ )/ 、/ 决策/ (/ decide/ )/ 及施动/ (/ act/ )/ 共/ 4/ 个/ 阶段/ ./ Salehie/ 等/ 人/ [/ 6/ ]/ 认为/ 软件/ 自/ 适应/ 环/ 包括/ 监视/ (/ moni/ -/ toring/ )/ 、/ 探测/ (/ detecting/ )/ 、/ 决策/ (/ deciding/ )/ 及施动/ (/ acting/ )/ 共/ 4/ 个/ 环节/ ./ 虽然/ 不同/ 研究/ 人员/ 对/ 自/ 适应/ 环/ 有着/ 不同/ 的/ 表述/ 方式/ ,/ 但/ 其/ 在/ 本质/ 上/ 都/ 是/ 相同/ 的/ :/ 首先/ 要/ 感知/ 变化/ ,/ 然后/ 进行/ 处理/ 和/ 分析/ 变化/ ,/ 最后/ 将/ 分析/ 结果/ 施加/ 到/ 软件/ 自身/ ./ 从/ 时间/ 维看/ ,/ 软件/ 自/ 适应/ 过程/ 是/ 一个/ 不断/ 反复/ 、/ 与/ 软件系统/ 运行/ 相生相/ 伴/ 的/ 循环/ 过程/ ./ (/ 4/ )/ 软件/ 自/ 适应/ 的/ 基本/ 设施/ ./ 为了/ 实现/ 软件/ 自/ 适应/ ,/ 需要/ 有/ 相应/ 的/ 软件/ 设施/ 作/ 支撑/ ,/ 既要/ 有/ 感知/ 和/ 识别/ 变化/ 的/ 感知器/ (/ sensor/ )/ 设施/ ,/ 还要/ 有/ 基于/ 变化/ 进行/ 决策/ 的/ 自/ 适应/ 器/ (/ adaptor/ )/ 设施/ 和/ 能/ 将/ 自/ 适应/ 决策/ 结果/ 施加/ 到/ 目标/ 软件系统/ 的/ 执行器/ (/ actuator/ )/ 设施/ ./ 不同/ 研究/ 人员/ 对/ 这些/ 软件/ 设施/ 有着/ 不同/ 的/ 命名/ ,/ 如/ IBM/ 的/ MAPE/ -/ K/ [/ 19/ ]/ 将/ 自/ 适应/ 逻辑/ 分为/ 感知器/ 、/ 自治/ 管理器/ (/ autonomicmanager/ )/ 和/ 效应器/ Page4/ (/ effector/ )/ ,/ 而/ Garlan/ 等/ 人/ [/ 21/ -/ 22/ ]/ 的/ Rainbow/ 将/ 其/ 称之为/ 探针/ (/ probe/ )/ 、/ 自/ 适应/ 管理器/ (/ adaptationmanager/ )/ 和/ 效应器/ (/ effector/ )/ ,/ 虽然/ 对/ 自/ 适应/ 设施/ 存在/ 着/ 命名/ 上/ 的/ 差异/ ,/ 但/ 其实质/ 功能/ 都/ 是/ 相同/ 的/ ,/ 都/ 是/ 为了/ 完成/ “/ 感知/ 变化/ 、/ 处理/ 和/ 分析/ 变化/ 、/ 将/ 分析/ 结果/ 施加/ 到/ 软件/ 自身/ ”/ 这一/ 基本/ 过程/ ./ 感知器/ 、/ 自/ 适应/ 器/ 和/ 执行器/ 构成/ 了/ 软件/ 的/ 自/ 适应/ 逻辑/ (/ self/ -/ adaptationlogic/ )/ ./ 而/ 与/ 自/ 适应/ 逻辑/ 相对/ 应/ 的/ 是/ 软件/ 功能/ 逻辑/ 或/ 应用逻辑/ (/ applicationlogic/ )/ ./ 自/ 适应/ 逻辑/ 封装/ 了/ 实现/ 软件/ 自/ 适应能力/ 的/ 机制/ 和/ 软件/ 设施/ ,/ 应用逻辑/ 实现/ 软件/ 正常/ 的/ 业务/ 功能/ ./ 受/ 控制/ 理论/ 思想/ 的/ 影响/ ,/ 应用逻辑/ 受控/ 于/ 自/ 适应/ 逻辑/ ,/ 有时/ 也/ 称/ 应用逻辑/ 为/ 目标软件/ [/ 22/ ]/ ./ 2.1/ ./ 2/ 软件/ 自/ 适应/ 的/ 相近/ 概念/ (/ 1/ )/ 自/ 适应/ 软件/ 与/ Agent/ ./ 拥有/ 自/ 配置/ 、/ 自/ 优化/ 、/ 自愈/ 和/ 自/ 保护/ 等/ 能力/ 的/ 自/ 适应/ 软件/ 与/ 来源于/ 知识/ 工程/ 领域/ 的/ agent/ [/ 23/ ]/ 有/ 一定/ 联系/ ./ Agent/ 是/ 指/ 驻留/ 在/ 环境/ 下/ 自主/ 地/ 执行/ 动作/ 并/ 与/ 其他/ Agent/ 进行/ 交互/ 合作/ 以/ 满足/ 设计/ 目标/ 的/ 行为/ 实体/ ,/ 驻留/ 性/ 、/ 自主性/ 和/ 社会性/ 是/ Agent/ 的/ 基本特征/ [/ 24/ ]/ ./ Agent/ 的/ 研究/ 源于/ 人工智能/ 领域/ ,/ 虽然/ 近年来/ 面向/ Agent/ 的/ 软件工程/ 研究/ 得到/ 重视/ ,/ 但/ Agent/ 并/ 没有/ 在/ 开放/ 复杂/ 系统/ 开发/ 方面/ 充分发挥/ 优势/ 和/ 潜力/ ,/ 其/ 主要/ 原因/ 之一/ 就是/ Agent/ 实现/ 阶段/ 仍/ 缺乏/ 有效/ 的/ 程序设计/ 理论/ 、/ 语言/ 和/ 支撑/ 平台/ [/ 24/ ]/ ,/ 即/ agent/ 在/ 兼容/ 现有/ 主流/ 软件技术/ 和/ 计算/ 平台/ 等/ 方面/ 仍/ 面临/ 不少/ 困难/ ./ 而/ 自/ 适应/ 软件/ 在/ 本质/ 上/ 植根于/ 主流/ 软件技术/ ,/ 能/ 包容/ 现有/ 主流/ 软件/ 方法/ 和/ 运行/ 平台/ ,/ 更/ 容易/ 走向/ 现实/ 应用/ ./ 但/ 随着/ 面向/ Agent/ 的/ 软件工程/ 研究/ 不断/ 走向/ 深入/ 、/ 自/ 适应/ 软件/ 的/ 智能/ 不断/ 增加/ ,/ Agent/ 与/ 自/ 适应/ 软件/ 之间/ 的/ 界限/ 将/ 变得/ 愈加/ 模糊/ ./ (/ 2/ )/ 自/ 适应/ 软件/ 与/ 控制软件/ (/ 自/ 适应/ 系统软件/ )/ ./ 控制软件/ [/ 25/ ]/ 是/ 与/ 自/ 适应/ 软件/ 在/ 概念/ 上/ 相近/ 的/ 一类/ 软件系统/ ./ 控制软件/ 是/ 控制系统/ 中/ 用来/ 执行/ 控制算法/ 的/ 软件/ ,/ 如图/ 1/ (/ a/ )/ 所示/ ,/ 其/ 通过/ 物理/ 传感器/ 和/ 执行机构/ 与/ 被控/ 的/ 物理/ 系统/ (/ 如/ 机械系统/ 、/ 电气系统/ )/ 进行/ 交互/ ,/ 使得/ 物理/ 系统/ 能/ 响应/ 外部环境/ 变化/ 和/ 图/ 2/ 反馈/ 控制系统/ 结构/ 扰动/ ,/ 从而/ 呈现/ 为/ 一个/ 自/ 适应/ 的/ 物理/ 系统/ ./ 从/ 这个/ 角度看/ ,/ 控制软件/ 也/ 可/ 称为/ 自/ 适应/ 系统软件/ ./ 自/ 适应/ 软件/ 与/ 控制软件/ 之间/ 存在/ 的/ 最/ 主要/ 区别/ 在于/ 它们/ 作用/ 和/ 控制/ 的/ 对象/ 不同/ :/ 自/ 适应/ 软件/ 的/ 作用/ 对象/ 是/ 软件/ 自身/ ,/ 强调/ 的/ 是/ 对/ 自身/ (/ 如/ 软件/ 状态/ 、/ 方法/ 调用/ 、/ 体系结构/ 等/ )/ 的/ 调整/ 和/ 修正/ ,/ 如图/ 1/ (/ b/ )/ 所示/ ;/ 而/ 控制软件/ 的/ 作用/ 对象/ 是/ 客观/ 世界/ 物理/ 系统/ ,/ 侧重/ 的/ 是/ 对/ 物理/ 系统/ 的/ 调节/ 和/ 改变/ ./ 2.2/ 控制/ 理论/ 基础/ 2.2/ ./ 1/ 控制/ 与/ 控制系统/ 控制/ 是/ 一种/ 面向/ 目标/ (/ goal/ -/ oriented/ )/ 的/ 动作/ (/ action/ )/ [/ 26/ ]/ ./ 与/ 某个/ 动作/ 相关联/ ,/ 需要/ 有/ 一个/ 对象/ (/ object/ )/ 来/ 承受/ 这个/ 动作/ ,/ 还/ 需要/ 一个/ 主体/ (/ subject/ )/ 来/ 执行/ 这个/ 动作/ ./ 这个/ 对象/ 称之为/ 被控/ 对象/ (/ controlledplant/ )/ ,/ 而/ 这个/ 主体/ 称之为/ 控制器/ (/ controller/ )/ ,/ 也/ 可以/ 理解/ 为/ 控制算法/ 的/ 执行器/ ./ 控制/ 已/ 成为/ 现实/ 世界/ 的/ 一种/ 基本/ 活动/ :/ 如/ 发电机组/ 控制/ 、/ 汽车/ 自动控制/ 、/ 航天器/ 飞行/ 姿态控制/ 、/ 网络流量/ 控制/ 等/ ./ 为了/ 实现/ 各种/ 复杂/ 的/ 控制/ 任务/ ,/ 需要/ 将/ 控制器/ 与/ 被控/ 对象/ 按照/ 一定/ 的/ 方式/ 连接起来/ ,/ 形成/ 一个/ 有机/ 整体/ ,/ 这/ 就/ 构成/ 了/ 控制系统/ ./ 反馈/ 或/ 闭环控制/ (/ feedbackorclosed/ -/ loopcontrol/ )/ 是/ 控制系统/ 最/ 基本/ 的/ 形式/ ,/ 其/ 核心/ 原理/ 是/ :/ 控制器/ 对/ 被控/ 对象/ 施加/ 的/ 作用/ ,/ 是/ 取自/ 被控/ 量/ 的/ 反馈/ 信息/ ,/ 用来/ 不断/ 修正/ 被控/ 量/ 与/ 控制目标/ 之间/ 的/ 偏差/ ,/ 从而/ 实现/ 对/ 被控/ 对象/ 进行/ 控制/ 的/ 能力/ [/ 26/ ]/ ./ 典型/ 的/ 反馈/ 控制系统/ 结构/ 如图/ 2/ 所示/ ./ Page5/ 反馈/ 控制系统/ 一般/ 由/ 控制器/ (/ Controller/ )/ 、/ 执行器/ (/ Actuator/ )/ 、/ 传感器/ (/ Sensor/ )/ 和/ 被控/ 对象/ 构成/ ./ 图/ 2/ 中/ ,/ y/ 为/ 被控/ 对象/ 的/ 输出/ ,/ 如/ 将/ 某/ 一/ Web/ 应用/ 系统/ MyWebApp/ 作为/ 被控/ 对象/ ,/ 其/ 服务质量/ 如/ 响应/ 时间/ 、/ 用户界面/ 显示/ 模式/ (/ 多媒体/ 显示/ 、/ 文本/ 显示/ )/ 等/ 都/ 可/ 根据/ 应用/ 场景/ 的/ 需要/ 作为/ 输出/ ;/ r/ 为/ 参考/ 输入/ 或/ 设定值/ (/ Setvalue/ )/ ,/ 指/ 期望/ 的/ 输出/ ./ 例如/ ,/ 用户/ 期望/ MyWebApp/ 系统/ 的/ 响应/ 时间/ 能/ 始终保持/ 在/ 3s/ 左右/ ,/ 则/ 可令/ r/ =/ 3/ ;/ e/ 为/ 控制/ 误差/ ,/ 表示/ 期望/ 的/ 系统/ 输出/ r/ 与/ 实际/ 测量/ 输出/ y/ 之间/ 的/ 差值/ ,/ 即/ e/ =/ r/ -/ y/ ;/ u/ 为/ 控制/ 输出/ ,/ 其为/ 控制器/ 根据/ 误差/ e/ 按照/ 一定/ 的/ 计算/ 规则/ (/ 控制算法/ )/ 进行/ 运算/ 所/ 得出/ 的/ 结果/ ./ u/ 通过/ 执行器/ 施加/ 到/ 被控/ 对象/ 上/ ,/ 使/ 系统/ 输出/ y/ 向/ 期望/ 输出/ r/ 逼近/ ./ 反馈/ 控制/ 过程/ 是/ 一个/ 动态/ 过程/ ,/ 其/ 最终/ 的/ 目标/ 是/ 让/ y/ 动态/ 逼近/ 或/ 等于/ r/ ,/ 即使/ 控制/ 误差/ e/ =/ 0/ ./ 与/ 反馈/ 控制/ 对应/ 的/ 是/ 前馈/ 控制/ (/ forwardcontrol/ )/ ,/ 也/ 称/ 开环/ 控制/ (/ open/ -/ loopedcontrol/ )/ ,/ 这种/ 控制/ 形式/ 不/ 需要/ 采用/ 系统/ 输出/ 来/ 调整/ 控制/ 输出/ ,/ 而是/ 直接/ 采用/ 参考/ 输入/ 来/ 决定/ 控制器/ 的/ 输出/ ./ 前馈/ 控制/ 虽然/ 结构/ 简单/ ,/ 但/ 无法/ 确保/ 系统/ 的/ 稳定性/ ,/ 抗干扰能力/ 差/ ,/ 因而/ 这种/ 控制/ 形式/ 很少/ 单独/ 在/ 现实/ 世界/ 中/ 被/ 应用/ ./ 设计/ 和/ 实现/ 一个/ 控制系统/ 必然/ 是/ 为了/ 达到/ 某种/ 目的/ ,/ 这种/ 目的/ 主要/ 表现/ 在/ 以下/ 3/ 个/ 方面/ [/ 27/ -/ 28/ ]/ :/ (/ 1/ )/ 调节/ 控制/ ./ 即/ 确保/ 系统/ 测量/ 输出/ 接近/ 或/ 等于/ 参考/ 输入/ ./ 如/ 通过/ 调整/ 服务器/ 池/ 的/ 大小/ 来/ 确保/ 系统对/ 用户/ 的/ 响应/ 时间/ 维持/ 在/ 3s/ ./ 调节/ 控制/ 的/ 关注点/ 在于/ 参考/ 输入/ ,/ 当/ 参考/ 输入/ 发生变化/ 时/ ,/ 系统/ 的/ 输出/ 也/ 要/ 发生变化/ ,/ 如果/ 参考/ 输入/ 变化/ 的/ 较为/ 频繁/ ,/ 则/ 这种/ 控制/ 方式/ 又/ 称为/ 跟踪/ 控制/ (/ trackingcontrol/ )/ ./ (/ 2/ )/ 抗干扰/ ./ 即/ 确保/ 施加/ 到/ 系统/ 上/ 的/ 扰动/ 不会/ 严重/ 影响/ 系统/ 的/ 输出/ ./ 如当/ 后台/ 服务器/ 在/ 执行/ 备份/ 任务/ (/ 可/ 认为/ 是/ 一种/ 干扰/ )/ 时/ ,/ 确保/ 系统/ 的/ Web/ 响应/ 时间/ 仍然/ 维持/ 在/ 3s/ ./ 这种/ 控制/ 方式/ 与/ 调节/ 控制/ 的/ 主要/ 区别/ 在于/ 其/ 重点/ 关注/ 的/ 是/ 扰动/ 输入/ 而/ 不是/ 参考/ 输入/ ./ (/ 3/ )/ 优化/ ./ 即/ 获得/ 系统/ 输出/ 的/ 最好/ 值/ ./ 如/ 通过/ 协调/ 相关/ 资源/ ,/ 使/ 系统对/ 用户/ 的/ 响应/ 时间/ 最小/ ./ 对于/ 同一个/ 被控/ 对象/ ,/ 采用/ 不同/ 的/ 控制器/ (/ 或/ 控制算法/ )/ 时/ 往往/ 会/ 导致/ 不同/ 的/ 控制/ 效果/ ,/ 在/ 控制/ 领域/ ,/ 衡量/ 一个/ 控制系统/ 设计/ 的/ 优劣/ 一般/ 采用/ 稳定性/ (/ stability/ )/ 、/ 准确性/ (/ accuracy/ )/ 、/ 调节/ 时间/ (/ settlingtime/ )/ 及超/ 调量/ (/ overshoot/ )/ 共/ 4/ 个/ 指标/ 来/ 进行/ 评价/ [/ 28/ ]/ ./ 稳定性/ 是/ 指/ 对于/ 任意/ 受限/ 的/ 输入/ ,/ 系统/ 的/ 输出/ 能够/ 保持/ 在/ 一定/ 范围/ 的/ 能力/ ;/ 准确性/ 是/ 指/ 在/ 系统/ 处于/ 稳定/ 状态/ 时/ ,/ 系统/ 输出/ 能/ 逼近/ 或/ 等于/ 参考/ 输入/ ;/ 调节/ 时间/ 是/ 指/ 系统/ 输出/ 从/ 初始值/ 到/ 逼近/ 稳态/ 值/ (/ steady/ -/ statevalue/ )/ 所/ 花费/ 的/ 时间/ ;/ 超调量/ 是/ 指/ 系统/ 输出/ 的/ 最大/ 偏移量/ 与/ 稳态/ 值之差/ ./ 从/ 上面/ 的/ 讨论/ 可以/ 看出/ ,/ 控制/ 的/ 本质/ 就是/ “/ 以变/ 制变/ ”/ ,/ 是/ 以/ 期望值/ 与/ 实际/ 值间/ 的/ 误差/ ,/ 依据/ 某/ 一种/ 计算/ 逻辑/ 规则/ ,/ 来/ 产生/ 控制/ 输出/ ,/ 从而/ 使/ 控制/ 对象/ 的/ 性能/ 趋向/ 期望值/ ./ 自/ 适应/ 的/ 本质/ 是/ “/ 以变/ 适变/ ”/ ,/ 是/ 通过/ 改变/ 自己/ 的/ 行为/ 来/ 适应/ 其/ 外部环境/ 的/ 变化/ ./ 自/ 适应/ 的/ 过程/ 就是/ 系统/ 实体/ 通过/ 控制/ 自己/ 的/ 行为/ ,/ 从而/ 适应/ 外部环境/ 变化/ 的/ 过程/ ./ 因此/ ,/ “/ 控制/ 理论/ ”/ 作为/ 处理/ 动态/ 系统/ 行为/ 的/ 理论/ ,/ 是/ 实现/ 动态/ 软件系统/ “/ 自/ 适应/ ”/ 的/ 一种/ 有效/ 工具/ ./ 2.2/ ./ 2/ 典型/ 控制/ 律/ 控制/ 理论/ 的/ 发展/ 经历/ 了/ 经典/ 控制/ 理论/ [/ 27/ ]/ 、/ 现代/ 控制/ 理论/ [/ 26/ ]/ 和/ 智能/ 控制/ 理论/ [/ 29/ ]/ 几个/ 阶段/ ./ 经典/ 控制/ 理论/ 主要/ 解决/ 单/ 输入/ 单/ 输出/ 问题/ ,/ 一般/ 采用/ 微分方程/ 、/ 传递函数/ 等/ 工具/ 分析/ 和/ 解决问题/ ./ 现代/ 控制/ 理论/ 不仅/ 关注/ 系统/ 的/ 输入输出/ ,/ 而且/ 更/ 关注/ 系统/ 内部/ 的/ 状态/ ,/ 采用/ 状态/ 空间/ 矩阵/ 来/ 描述/ 和/ 解决/ 多/ 输入/ 多/ 输出/ 问题/ ./ 智能/ 控制/ 理论/ 是/ 研究/ 与/ 模拟/ 人类/ 智能/ 活动/ 及其/ 控制/ 与/ 信息/ 传递/ 过程/ 的/ 规律/ ./ 控制/ 领域/ 典型/ 的/ 控制/ 律/ 包括/ 比例/ 积分/ 微分/ (/ Proportional/ -/ Integral/ -/ Derivative/ ,/ PID/ )/ 控制/ [/ 30/ ]/ 、/ 自/ 适应控制/ [/ 13/ ]/ 、/ 最优控制/ [/ 26/ ]/ 、/ 离散/ 事件/ 控制/ [/ 31/ ]/ 、/ 预测/ 控制/ [/ 32/ ]/ 、/ 智能/ 控制/ [/ 29/ ]/ 等/ ./ 限于/ 篇幅/ ,/ 本文/ 不再/ 对/ 其/ 技术细节/ 展开讨论/ ./ 3/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 基本/ 思想/ 与/ 代表性/ 工作/ 3.1/ 基本/ 思想/ 通过/ 上文/ 对/ 软件/ 自/ 适应/ 概念/ 的/ 分析/ 和/ 控制/ 理论/ 的/ 讨论/ 可以/ 看出/ ,/ 软件/ 自/ 适应/ 问题/ 可以/ 转化/ 为/ 控制/ 问题/ ;/ 同时/ ,/ 控制/ 理论/ 也/ 为/ 软件/ 自/ 适应/ 研究/ 提供/ 了/ 完备/ 的/ 理论/ 工具/ 支持/ ./ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 核心思想/ 是/ 将/ 软件系统/ 作为/ 被控/ 对象/ ,/ 将/ 用户/ 关心/ 的/ 软件/ 性能/ (/ 如/ QoS/ )/ 或/ 行为/ (/ 如/ UI/ 显示方式/ )/ 等/ 作为/ 系统/ 输出/ ,/ 依据/ 控制/ 领域/ 的/ 反馈/ 机制/ 和/ 控制/ 律/ 、/ 设计/ 合理/ 的/ 控制器/ ,/ 来/ 感知/ 软件/ 运行/ 状态/ 及其/ 环境/ 变化/ 、/ 按照/ 需求/ 约束/ 调控/ 软件系统/ 性能/ 和/ 行为/ ,/ 从而/ 达到/ 软件/ 能/ 自动/ 适应/ 需求/ 及/ 外部环境/ 变化/ 的/ 目的/ ./ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 一般/ 框架/ 可用/ 图/ 3/ 表示/ ./ Page6/ 图/ 3/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 一般/ 框架/ 与/ 反馈/ 控制系统/ 的/ 结构/ (/ 图/ 2/ )/ 类似/ ,/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 框架/ 主要/ 由/ 自/ 适应/ 控制器/ (/ adap/ -/ tationcontroller/ )/ 、/ 感知器/ 、/ 执行器/ 、/ 软件/ 被控/ 对象/ 系统/ (/ softwareplantsystem/ )/ 、/ 通讯/ 设施/ (/ communica/ -/ tionfacility/ )/ 等/ 实体/ 组成/ ,/ 自/ 适应/ 控制器/ 与/ 传感器/ 、/ 执行器/ 之间/ 依靠/ 通讯/ 设施/ 进行/ 数据交换/ ./ 与/ 控制系统/ 不同/ 的/ 是/ ,/ 图/ 3/ 所示/ 的/ 控制器/ 、/ 执行器/ 和/ 传感器/ 都/ 是/ 软件/ 实体/ 而/ 非/ 物理/ 实体/ ./ 感知器/ 用于/ 感知/ 来自/ 软件/ 及其/ 环境/ 的/ 变化/ ,/ 自/ 适应/ 控制器/ 基于/ 控制器/ 进行/ 决策/ ,/ 而/ 执行器/ 基于/ 决策/ 结果/ 调控/ 软件/ 的/ 状态/ 、/ 行为/ 或/ 结构/ ./ 从/ 自/ 适应/ 软件/ 的/ 组成/ 来看/ ,/ 自/ 适应/ 控制器/ 、/ 传感器/ 和/ 执行器/ 构成/ 了/ 自/ 适应/ 逻辑/ 部分/ ,/ 而/ 软件/ 对象/ 系统/ 构成/ 了/ 应用逻辑/ 部分/ (/ 又称/ 可/ 适应/ 软件系统/ ,/ adaptablesoftwaresystem/ )/ ./ 3.2/ 代表性/ 研究/ 工作/ 采用/ 控制/ 理论/ 的/ 方法/ 来/ 研究/ 软件/ 自/ 适应/ 问题/ 正/ 吸引/ 着/ 越来越/ 多/ 研究/ 人员/ 的/ 关注/ ./ 早期/ ,/ Shaw/ [/ 33/ ]/ 参照/ 控制系统/ 结构/ 提出/ 了/ 一种/ 软件开发/ 的/ 过程/ 控制/ 风范/ (/ process/ -/ controlparadigm/ )/ ,/ 其/ 对于/ 控制/ 理论/ 引入/ 到/ 软件工程/ 领域/ 起到/ 重要/ 推动/ 作用/ ./ 但/ 这种/ 方法/ 的/ 受控对象/ 仍然/ 是/ 物理/ 系统/ 而/ 非/ 软件系统/ ,/ 故/ 从/ 这/ 一/ 角度/ 来看/ ,/ 我们/ 难以/ 将/ 其/ 归结到/ 软件/ 自/ 适应/ 的/ 框架/ 下/ ./ 在/ 当前/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 领域/ ,/ 出现/ 了/ 以下/ 几类/ 有/ 广泛/ 影响/ 的/ 研究/ 工作/ :/ 基于/ 反馈/ 结构/ 的/ 软件/ 自/ 适应/ 、/ 软件/ 控制论/ (/ softwarecybernetics/ )/ 、/ 自/ 控制软件/ (/ self/ -/ controllingsoftware/ )/ 、/ 计算/ 系统/ 反馈/ 控制/ 、/ 软件/ 性能/ 反馈/ 控制/ 等/ (/ 如图/ 4/ )/ ./ (/ 1/ )/ 基于/ 反馈/ 结构/ 的/ 软件/ 自/ 适应/ ./ 该类/ 研究/ 方法/ 主要/ 借鉴/ 控制/ 理论/ 的/ 反馈/ 思想/ ,/ 将/ 软件/ 自/ 适应/ 逻辑/ 实现/ 为/ 闭环/ 结构/ 形式/ ,/ 来/ 保证/ 软件系统/ 能/ 动态/ 、/ 实时/ 地/ 应对/ 变化/ ,/ 但/ 其/ 自/ 适应/ 决策/ 机制/ 不/ 采用/ 标准/ 的/ 控制/ 理论/ ,/ 而/ 多/ 采用/ adhoc/ 的/ 算法/ ./ 该类/ 方法/ 的/ 典图/ 4/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 代表性/ 研究/ 工作/ 型/ 代表/ 工作/ 有/ Garlan/ 与/ Cheng/ 等/ 人/ 的/ Rainbow/ 框架/ [/ 21/ -/ 22/ ]/ ,/ IBM/ 的/ MAPE/ -/ K/ 模型/ [/ 17/ ]/ ,/ Kaiser/ 等/ 人/ 的/ KX/ 架构/ [/ 34/ -/ 36/ ]/ 等/ ./ 这类/ 研究/ 工作/ 代表/ 了/ 当前/ 一般性/ 的/ 软件/ 自/ 适应/ 方法/ ,/ 在/ 此/ 不再/ 展开讨论/ ./ (/ 2/ )/ 软件/ 控制论/ ./ 软件/ 控制论/ 是/ 研究/ 控制/ 理论/ (/ 工程/ )/ 与/ 软件工程/ 之间/ 相互作用/ (/ interplay/ )/ 的/ 一个/ 领域/ [/ 10/ ,/ 37/ -/ 38/ ]/ ./ 国内/ 学者/ 蔡/ 开元/ 和/ 国外/ 学者/ Cangussu/ 、/ DeCarlo/ 、/ Mathur/ 等/ 是/ 这/ 一/ 研究/ 分支/ 的/ 发起人/ 和/ 典型/ 代表/ ./ 软件/ 控制论/ 要/ 解决/ 的/ 基本/ 问题/ 是/ 何时/ (/ when/ )/ 、/ 如何/ (/ how/ )/ 处理软件/ 行为/ 、/ 软件/ 过程/ 或/ 软件系统/ 以使/ 之/ 适应/ 并/ 满足/ 环境/ 变化/ 条件/ 下/ 的/ 新旧/ 目标/ [/ 10/ ]/ ./ 目前/ 该/ 领域/ 的/ 主要/ 研究/ 方向/ 包括/ 软件/ 中/ 反馈/ 及/ 自/ 适应控制/ 机制/ 的/ 形式化/ 和/ 量化/ ,/ 控制/ 理论/ 的/ 自/ 适应/ 原理/ 在/ 软件/ 过程/ 及/ 系统/ 中/ 的/ 应用/ ,/ 软件工程/ 的/ 基本原理/ 和/ 理论/ 在/ 控制系统/ 中/ 的/ 应用/ ,/ 软件工程/ 理论/ 与/ 控制工程/ 理论/ 集成/ [/ 10/ ]/ ./ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 是/ 软件/ 控制论/ 研究/ 的/ 一种/ 重要/ 方面/ [/ 37/ -/ 38/ ]/ ./ 软件/ 控制论/ 在/ 国际/ 软件工程/ 领域/ 有着/ 较大/ 影响/ ,/ 在/ COMPSAC/ 国际/ 会议/ 下/ 设有/ IWSC/ (/ InternationalWorkshoponSoftwareCybernetics/ )/ ,/ 每年/ 举办/ 一次/ ./ Page7/ (/ 3/ )/ 自/ 控制软件/ ./ 这种/ 研究/ 分支/ 的/ 基本/ 思想/ 是/ 将/ 软件系统/ 视为/ 被控/ 对象/ ,/ 并/ 将/ 软件/ 行为/ 和/ 环境/ 建模/ 为/ 动态/ 系统/ ,/ 同时/ 通过/ 专门/ 的/ 控制器/ 来/ 改变/ 软件/ 被控/ 对象/ 的/ 输入/ 值/ ./ Kokar/ 等/ 人/ [/ 39/ ]/ 提出/ 了/ 基于/ 控制/ 理论/ 风范/ 的/ 自/ 控制软件/ 概念/ ,/ 其为/ 确定/ 和/ 设计/ 在/ 操作/ 运行/ 阶段/ 能够/ 控制/ 自身/ 的/ 软件/ 提供/ 了/ 技术/ 框架/ ./ 自/ 控制软件/ 模型/ 从/ 3/ 个/ 层次/ 支持/ 控制能力/ :/ 反馈/ 、/ 自/ 适应/ 和/ 重构/ (/ reconfiguration/ )/ [/ 39/ ]/ ./ 后来/ ,/ Kokar/ 等/ 人/ [/ 40/ ]/ 将/ 自/ 控制软件/ 概念/ 与/ 自/ 适应/ 软件/ 概念/ 链接/ 起来/ ,/ 并/ 采用/ 反馈/ 控制/ 理论/ 解决/ 软件系统/ 的/ QoS/ 确保/ 问题/ ;/ 而/ Fescioglu/ -/ Unver/ 与/ Kokar/ [/ 41/ ]/ 应用/ 自/ 控制软件/ 范型/ 实现/ 了/ Tuba/ 搜索算法/ 的/ 参数/ 自/ 调整/ ,/ 提高/ 了/ 搜索/ 效率/ ./ (/ 4/ )/ 计算/ 系统/ 反馈/ 控制/ ./ 该/ 研究/ 分支/ 的/ 基本/ 思想/ 是/ 采用/ 反馈/ 控制/ 理论/ 来/ 控制/ 和/ 协调/ 计算/ 系统/ 的/ 相关/ 计算/ 、/ 能源/ 等/ 资源/ ,/ 以/ 使/ 系统/ 服务/ 输出/ 达到/ 服务/ 级/ 目标/ (/ ServiceLevelObjective/ ,/ SLO/ )/ 要求/ ./ IBM/ 的/ Hellerstein/ 等/ 人/ [/ 28/ ]/ 和/ Diao/ 等/ 人/ [/ 42/ -/ 43/ ]/ 、/ HP/ 的/ Zhu/ 等/ 人/ [/ 44/ -/ 47/ ]/ 是/ 这/ 一/ 范型/ 研究/ 的/ 典型/ 代表/ ./ 如/ Diao/ 等/ 人/ [/ 42/ ]/ 设计/ 了/ 一种/ 多/ 输入/ 多/ 输出/ 反馈/ 控制器/ 缩短/ 了/ DB2UniversalDatabaseServer/ 在/ 不同/ 工作/ 负载/ (/ workload/ )/ 下/ 的/ 响应/ 时间/ ,/ 还/ 结合/ 反馈/ 控制/ 建模/ 技术/ 实现/ 了/ IBMLotusDominoServer/ 的/ SLO/ -/ 最大/ 用户/ 连接数/ 的/ 自动/ 调节/ 以/ 确保/ CPU/ 利用率/ 保持/ 在/ 期望/ 的/ 范围/ 内/ [/ 43/ ]/ ./ Padala/ 与/ Zhu/ 等/ 人/ [/ 45/ ]/ 利用/ 控制/ 理论/ 解决/ 了/ 数据中心/ 虚拟机/ 环境/ 中/ 在/ 应用程序/ 不同/ 层/ 服务/ 指标/ 确保/ 和/ 实现/ CPU/ 等/ 资源/ 高效/ 利用/ ./ (/ 5/ )/ 软件/ 服务/ 反馈/ 性能/ 控制/ ./ 这种/ 研究/ 分支/ 将/ 软件/ 服务/ 的/ 性能/ 确保/ 问题/ 映射/ 为/ 反馈/ 控制/ 问题/ ,/ 使用/ 控制/ 理论/ 的/ 方法/ 实现/ 软件/ QoS/ 确保/ ./ 美国/ 弗吉尼亚/ 大学/ 的/ Abdelzaher/ 等/ 人/ [/ 48/ -/ 49/ ]/ ,/ 华盛顿大学/ 的/ Lu/ 等/ 人/ [/ 50/ -/ 52/ ]/ 是/ 这/ 一/ 研究/ 分支/ 的/ 代表/ 人物/ ./ 如/ Abdelzaher/ 等/ 人/ [/ 48/ ]/ 采用/ 经典/ 反馈/ 控制/ 理论/ 来/ 实现/ Web/ 服务器/ 系统/ 在/ 负载/ 不可/ 预测/ 条件/ 下/ 的/ 过载/ 预测/ 、/ 性能/ 确保/ 和/ 服务/ 分化/ (/ differentiation/ )/ ./ 而/ Lu/ 等/ 人/ [/ 50/ ]/ 采用/ 反馈/ 控制/ 实现/ 实时/ 系统/ 在/ 开放/ 与/ 不可/ 预测/ 环境/ 下/ 的/ 自/ 适应/ ,/ 以/ 确保/ CPU/ 利用率/ 保持/ 在/ 期望/ 的/ 范围/ 内/ ./ Kreidl/ 与/ Frazier/ [/ 53/ ]/ 利用/ 反馈/ 控制/ 构建/ 软件/ 安全/ 自动/ 防卫/ 系统/ ,/ 提高/ 软件系统/ 的/ 生存性/ (/ survivability/ )/ ./ (/ 6/ )/ 基于/ 标准/ 控制/ 的/ 软件/ 自/ 适应/ 与/ 自/ 管理/ ./ 除了/ 上述/ 有/ 影响/ 的/ 几类/ 研究/ 工作/ 以外/ ,/ 还有/ 一部分/ 相对/ 分散/ 、/ 但/ 数量/ 可观/ 的/ 研究/ 人员/ 也/ 在/ 充分利用/ 标准/ 控制/ 理论/ 作为/ 工具/ 来/ 研究/ 解决/ 软件/ 自/ 适应/ 问题/ ,/ 实现/ 软件系统/ 的/ 自/ 适应/ 与/ 自/ 管理/ 能力/ ./ 这类/ 工作/ 不但/ 在/ 形式/ 上能/ 借鉴/ 控制系统/ 的/ 结构/ ,/ 并且/ 还/ 利用/ 控制/ 理论/ 作为/ 自/ 适应/ 环/ 的/ 决策/ 方法/ ,/ 以/ 来自/ 外部环境/ 及/ 需求/ 的/ 变化/ 为/ 驱动/ 触发/ 软件/ 状态/ 、/ 行为/ 或/ 结构/ 的/ 调整/ ./ 我们/ 将/ 这些/ 工作/ 统称/ 为/ 基于/ 标准/ 控制/ 的/ 软件/ 自/ 适应/ 与/ 自/ 管理/ ./ 例如/ ,/ Tziallas/ 等/ 人/ [/ 54/ ]/ 采用/ 监督/ 控制算法/ 结合/ 软件/ 构件/ 本体/ 建模/ 方法/ 构造/ 自/ 适应/ 软件/ ,/ 实现/ 为了/ 匹配/ 需求/ 目标/ 或/ 获取/ 更好/ 功能/ 和/ 性能/ 时/ 进行/ 自我/ 行为/ 和/ 结构/ 的/ 调整/ ./ Filieri/ 等/ 人/ [/ 55/ ]/ 采用/ 离散/ 时间/ 马尔可夫/ 链/ (/ DiscreteTimeMarkovChain/ ,/ DTMC/ )/ 进行/ 软件可靠性/ 建模/ ,/ 将/ 可靠性/ 转换/ 为/ 概率/ ,/ 当/ 软件/ 面临/ 环境/ 变化/ 和/ 干扰/ 时/ 通过/ 控制/ 理论/ 实现/ 软件/ 状态/ 迁移/ 或/ 替换/ ,/ 从而/ 确保/ 软件/ 在/ 运行/ 过程/ 中/ 自动/ 满足/ 可靠性/ 需求/ ./ Shen/ 等/ 人/ [/ 56/ ]/ 基于/ 开环/ 控制/ 、/ 反馈/ 控制/ 和/ 自/ 适应控制/ 等/ 思想/ 提出/ 了/ 3/ 种/ 软件/ 自/ 适应/ 模型/ ,/ 并/ 给出/ 了/ 这些/ 模型/ 的/ 具体/ 实现/ 框架/ ./ 上述/ 给出/ 的/ 几类/ 代表性/ 研究/ 工作/ 都/ 有/ 各自/ 的/ 研究/ 特色/ ,/ 软件/ 控制论/ 强调/ 控制工程/ 与/ 软件工程/ 之间/ 的/ 相互作用/ ,/ 其/ 研究/ 主题/ 既/ 涵盖/ 了/ 软件/ 自/ 适应/ ,/ 还/ 涉及/ 软件测试/ 、/ 软件/ 过程/ 等/ 内容/ ;/ 而/ 自/ 控制软件/ 、/ 计算/ 系统/ 反馈/ 控制/ 和/ 软件/ 服务/ 反馈/ 性能/ 控制/ 这/ 几种/ 范型/ 受/ 各自/ 研究/ 领域/ 的/ 限制/ ,/ 更/ 多/ 体现/ 在/ 软件/ 自/ 适应/ 的/ 调/ 参数/ 这/ 一维/ ./ 4/ 综述/ 方法/ 与/ 过程/ 为了/ 更为/ 深入/ 理解/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 现状/ ,/ 从中/ 挖掘/ 和/ 抽取/ 对/ 软件/ 自/ 适应/ 研究/ 人员/ 有/ 价值/ 的/ 知识/ 关注点/ ,/ 本文/ 在/ 研究/ 和/ 撰写/ 的/ 过程/ 中/ ,/ 借鉴/ 和/ 部分/ 地/ 遵循/ 了/ Kitchenham/ [/ 57/ ]/ 提出/ 的/ 系统性/ 文献/ 综述/ (/ SystematicLiteratureReview/ ,/ SLR/ )/ 方法/ ./ 该/ 方法/ 将/ 综述/ 过程/ 划分/ 为/ 3/ 个/ 阶段/ :/ 规划/ (/ planning/ )/ 、/ 实施/ (/ conducting/ )/ 和/ 报告/ (/ reporting/ )/ ./ 其中/ 规划/ 阶段/ 主要/ 完成/ 综述/ 问题/ 定义/ 、/ 确立/ 文献/ 筛选/ 标准/ 和/ 方法/ 等/ 任务/ ,/ 实施/ 阶段/ 主要/ 包括/ 文献检索/ 选择/ 与/ 分类/ 、/ 文献/ 数据/ 抽取/ 与/ 分析/ 等/ 内容/ ,/ 最后/ 在/ 报告/ 阶段/ 系统性/ 展示/ 综述/ 结果/ ./ 下面/ 主要/ 基于/ 这一/ 方法/ 展开讨论/ ./ 4.1/ 综述/ 问题/ 定义/ 定义/ (/ formulate/ )/ 综述/ 所/ 关心/ 的/ 问题/ (/ researchquestions/ )/ 是/ SLR/ 方法/ 的/ 首要/ 一步/ ./ 作为/ 软件/ 自/ 适应/ 的/ 研究/ 人员/ ,/ 面对/ 现有/ 基于/ 控制/ 理论/ 的/ 研究/ 工作/ ,/ 我们/ 会/ 自然/ 地/ 关注/ 如下/ 问题/ :/ (/ 1/ )/ RQ1/ ./ 对/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 工作/ 该/ 如何/ 进行/ 分类/ ?/ (/ 2/ )/ RQ2/ ./ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 的/ 发展/ 现状/ 是/ 什么/ ?/ Page8/ (/ 3/ )/ RQ3/ ./ 当前/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 工作/ 还/ 存在/ 的/ 哪些/ 不足/ ?/ 未来/ 发展趋势/ 是/ 什么/ ?/ 4.2/ 文献/ 筛选/ 4.2/ ./ 1/ 文献/ 收集/ 策略/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 涉及/ 到/ 控制工程/ 和/ 软件工程/ 两大/ 研究/ 领域/ ,/ 为此/ ,/ 其/ 文献检索/ 工作/ 是/ 一个/ 相对/ 复杂/ 的/ 过程/ ,/ 需要/ 综合/ 运用/ 多个/ 数据源/ 和/ 搜索引擎/ ./ 本文/ 选择/ 的/ 文献数据库/ 主要/ 包括/ IEEEXploreDigitalLibrary/ ,/ ACMDigitalLibrary/ ,/ ElsevierScienceDirect/ ,/ SpringerDigitalLibrary/ ,/ GoogleScholar/ ,/ 中国/ 知网/ 等/ ./ 所/ 采用/ 的/ 检索/ 关键词/ 主要/ 有/ “/ softwareself/ -/ adaptation/ (/ 软件/ 自/ 适应/ )/ ”/ 、/ “/ self/ -/ adaptivesoftware/ (/ 自/ 适应/ 软件/ )/ ”/ 、/ “/ controltheory/ (/ 控制/ 理论/ )/ ”/ 、/ “/ cybernetics/ (/ 控制论/ )/ ”/ 、/ “/ feed/ -/ backcontrol/ (/ 反馈/ 控制/ )/ ”/ 等/ ./ 另外/ ,/ 基于/ 我们/ 的/ 研究/ 经验/ ,/ 我们/ 还/ 精选/ 了/ 与/ 本文/ 主题/ 密切相关/ 的/ 若干/ 软件工程/ 与/ 控制工程/ 领域/ 的/ 会议/ 论文集/ 和/ 期刊/ (/ 如表/ 1/ 所示/ )/ 进行/ 了/ 深度/ 检索/ ./ 表/ 1/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 相关/ 会议/ 与/ 期刊/ InternationalSymposiumonSoftwareEngineeringforAdaptiveandSelf/ -/ ManagingSystemsInternationalConferenceonAutonomicComputingInternationalConferenceonSoftwareEngineeringInternationalWorkshoponSoftwareCyberneticsACMSIGSOFTInternationalSymposiumontheFoundationsofSoftwareEngineeringIEEEInternationalComputerSoftwareandApplicationsConferenceInternationalConferenceonQualitySoftwareReal/ -/ TimeandEmbeddedTechnologyandApplicationsSymposiumAsia/ -/ PacificSymposiumonInternetwareIEEEConferenceonDecisionandControlAmericanControlConferenceJournalofSystemsandSoftwareIEEETransactionsonSoftwareEngineeringIEEEControlSystemsIEEETransactionsonParallelandDistributedSystems/ 另外/ ,/ 本文/ 在/ 搜集/ 文献/ 时/ ,/ 还/ 采用/ 了/ “/ 滚雪球/ ”/ 的/ 方法/ ,/ 从/ 若干/ 综述/ 性/ 文献/ [/ 6/ ,/ 46/ -/ 47/ ]/ 的/ 引文/ 中/ 发现/ 和/ 收集/ 密切相关/ 的/ 研究/ 工作/ ,/ 来/ 最大/ 可能/ 地/ 扩大/ 覆盖范围/ ./ 4.2/ ./ 2/ 保留/ 淘汰/ 标准/ 为了/ 实现/ 对前/ 一/ 阶段/ 所/ 收集/ 文献/ 进行/ 筛选/ ,/ 本文/ 建立/ 了/ 如下/ 的/ 文献/ 保留/ 淘汰/ 标准/ :/ (/ 1/ )/ 文献/ 出版/ 的/ 时间跨度/ 为/ 1991/ ~/ 2015/ ;/ (/ 2/ )/ 文献/ 中自/ 适应/ 系统/ 的/ 控制/ 方法/ 属于/ 一般/ 控制/ 理论/ 的/ 研究/ 范围/ (/ 如/ 经典/ 控制/ 理论/ 、/ 现代/ 控制/ 理论/ 和/ 智能/ 控制/ 理论/ )/ ;/ (/ 3/ )/ 文献/ 中自/ 适应/ 系统/ 的/ 被控/ 对象/ 需/ 与/ 软件工程/ 密切相关/ (/ 如/ 软件应用/ 系统/ 、/ 中间件/ 、/ 支撑/ 软件开发/ 和/ 运行/ 的/ 过程/ 与/ 环境/ 资源/ 等/ )/ ;/ (/ 4/ )/ 文献/ 语言/ 为/ 英文/ 和/ 中文/ ,/ 其中/ 中文/ 文献/ 为/ 带有/ 英文/ 摘要/ 的/ 中文/ 核心/ 期刊/ ./ 按照/ 上述/ 标准/ ,/ 除了/ 基于/ 经典/ 控制/ 理论/ 和/ 基于/ 现代/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 文献/ 被/ 保留/ 下来/ 之外/ ,/ 基于/ 智能/ 控制/ 理论/ (/ 如/ 模糊控制/ 、/ 神经网络/ 控制/ )/ 的/ 软件/ 自/ 适应/ 文献/ 也/ 同时/ 被/ 包含/ 进来/ ./ 同样/ 地/ ,/ 基于/ 上述/ 标准/ ,/ 现有/ 大量/ 的/ 关于/ 采用/ 控制/ 理论/ 实现/ 网络/ 路由/ 控制/ 等/ 方面/ 的/ 文献/ 将/ 不/ 在/ 本文/ 考虑/ 的/ 范围/ 之内/ ./ 另外/ ,/ 现有/ 软件/ 自/ 适应/ 研究/ 工作/ 大都/ 基于/ 来自/ 控制/ 域/ 的/ 反馈/ 控制/ 思想/ 而/ 构建/ ,/ 因此/ ,/ 我们/ 为/ 使/ 下文/ 研究/ 工作/ 分类/ 具有/ 完整性/ ,/ 也/ 额外/ 选择/ 了/ 具有/ 明显/ 反馈/ 控制/ 特征/ 的/ 12/ 篇/ (/ 即/ 文献/ [/ 15/ ,/ 17/ ,/ 19/ ,/ 21/ -/ 22/ ,/ 34/ -/ 36/ ,/ 58/ -/ 61/ ]/ )/ 常规/ 软件/ 自/ 适应/ 文献/ 作为/ 讨论/ 和/ 比较/ 的/ 对象/ ./ 经过/ 上述/ 步骤/ ,/ 本文/ 共/ 收集/ 了/ 70/ 篇/ 符合/ 筛选/ 标准/ 的/ 代表性/ 文献/ ,/ 具体/ 见/ 附表/ 1.5/ 分类/ 框架/ 为了/ 回答/ 前节/ 提出/ 的/ 针对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 的/ 综述/ 问题/ RQ1/ ,/ 理清/ 该/ 领域/ 研究/ 的/ 现状/ 与/ 动态/ ,/ 本文/ 提出/ 如图/ 5/ 所示/ 的/ 文献分类/ 标准/ ./ 基/ Page9/ 于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 涉及/ 到/ 控制工程/ 和/ 软件工程/ 两个/ 领域/ ,/ 因此/ ,/ 本文/ 从/ 控制工程/ 和/ 软件工程/ 两个/ 视角/ 来/ 建立/ 分类/ 标准/ ./ 5.1/ 基于/ 控制工程/ 视角/ 的/ 分类/ 标准/ 从/ 控制工程/ 视角/ 来看/ ,/ 控制系统/ 及其/ 思想/ 方法/ 会以/ 何种/ 形式/ 被/ 借鉴/ 或/ 映射/ 到/ 软件/ 自/ 适应/ 系统/ 中是/ 关注/ 的/ 重要/ 问题/ 之一/ ./ 为了/ 便于/ 控制系统/ 结构/ 与/ 软件/ 自/ 适应/ 系统/ 在/ 结构/ 形式/ 上/ 的/ 比较/ ,/ 本文/ 按照/ 软件/ 自/ 适应/ 结构/ 与/ 反馈/ 控制系统/ 结构/ 间/ 的/ 对应/ 关系/ ,/ 基于/ 软件/ 自/ 适应/ 结构/ 小于/ 、/ 大于/ 或/ 等于/ 反馈/ 控制系统/ 结构/ 的/ 思路/ ,/ 将/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 工作/ 概括/ 为/ 3/ 种/ 类型/ :/ 简单/ 反馈/ 型/ 、/ 广义/ 控制/ 型/ 和/ 等效/ 映射/ 型/ ./ 这种/ 分类/ 思想/ 如图/ 6/ 所示/ ./ (/ 1/ )/ 简单/ 反馈/ 型/ (/ 或称/ “/ </ ”/ 型/ )/ ./ 这种/ 类型/ 的/ 软件/ 自/ 适应/ ,/ 如图/ 6/ ,/ 较为/ 单一/ 地/ 借鉴/ 了/ 控制系统/ 的/ 反馈/ 思想/ ,/ 只是/ 在结构上/ 采用/ 了/ 闭环/ 反馈/ 形式/ ,/ 而/ 其/ 结构/ 组成/ 和/ 自/ 适应/ 决策/ 机制/ 与/ 控制系统/ 的/ 组成/ 要素/ 、/ 控制策略/ 完全/ 不同/ ./ 相对/ 于/ 由/ 传感器/ 、/ 控制器/ 、/ 执行器/ 组成/ 的/ 标准/ 控制系统/ 而言/ ,/ 这/ 类/ 软件/ 自/ 适应/ 研究/ 由于/ 仅仅/ 借鉴/ 了/ 控制系统/ 中/ 的/ 反馈/ 结构/ ,/ 其他/ 的/ 控制器/ 、/ 传感器/ 等/ 概念/ 没有/ 直接/ 引入/ ,/ 故/ 其中/ 体现/ 的/ “/ 控制/ 成分/ ”/ 少于/ 标准/ 控制系统/ ,/ 所以/ 简单/ 反馈/ 型/ 又/ 可/ 称为/ “/ </ ”/ 型/ ./ 如/ 基于/ IBM/ 的/ MAPE/ -/ K/ 框架/ [/ 17/ ]/ 的/ 软件/ 自/ 适应/ 方法/ [/ 62/ ]/ ,/ 其/ 在结构上/ 由/ 监视器/ (/ Monitor/ )/ 、/ 分析器/ (/ Analyzer/ )/ 、/ 规划/ 器/ (/ Planner/ )/ 和/ 执行器/ (/ Executor/ )/ 及/ 知识库/ (/ Knowledge/ -/ base/ )/ 组成/ ,/ 在/ 自/ 适应/ 决策/ 算法/ 方面/ 多/ 采用/ ECA/ 规则/ [/ 22/ ,/ 63/ -/ 64/ ]/ ,/ 这/ 与/ 常图/ 6/ 基于/ 控制工程/ 视角/ 的/ 分类/ 思想/ 示意/ 规/ 控制系统/ 基于/ “/ 传感器/ -/ 控制器/ -/ 执行器/ ”/ 的/ 结构/ 和/ 基于/ 经典/ 控制/ 理论/ 或/ 现代/ 控制/ 理论/ 等/ 控制策略/ 有/ 明显/ 不同/ ./ 前文/ 提及/ 的/ 基于/ 反馈/ 结构/ 的/ 软件/ 自/ 适应/ 代表性/ 工作/ 可以/ 归结到/ 这一/ 类型/ 中来/ ./ 事实上/ ,/ 现今/ 多数/ 软件/ 自/ 适应/ 研究/ 工作/ [/ 17/ ,/ 21/ ,/ 65/ ]/ 都/ 可/ 划分/ 到/ 这/ 一/ 类别/ 中/ ./ (/ 2/ )/ 广义/ 控制/ 型/ (/ 或称/ “/ >/ ”/ 型/ )/ ./ 这种/ 类型/ 的/ 研究/ 工作/ ,/ 如图/ 6/ ,/ 其自/ 适应/ 的/ 时机不再/ 限于/ 单一/ 的/ 软件系统/ 运行/ 期/ ,/ 而是/ 将/ 其/ 扩展/ 到/ 一般/ 软件/ 过程/ ,/ 如/ 软件测试/ 过程/ [/ 38/ ]/ 、/ 软件/ 容错/ 过程/ [/ 66/ ]/ 等/ ,/ 实现/ 这些/ 过程/ 的/ 自动化/ 与/ 自/ 适应/ ./ 这类/ 软件/ 自/ 适应/ 的/ 被控/ 对象/ 已经/ 从/ 常规/ 的/ 运行/ 维护/ 期/ 的/ 软件/ 扩展/ 为/ 一般/ 软件/ 过程/ (/ 如/ 测试/ 、/ 容错/ )/ 中/ 的/ 软件/ ,/ 较/ 传统/ 控制系统/ 被控/ 对象/ 而言/ ,/ 其/ 内涵/ 更/ 丰富/ ,/ 因此/ 又/ 可/ 简称/ 为/ “/ >/ ”/ 型/ ./ 前文/ 提到/ 的/ 软件/ 控制论/ [/ 10/ ]/ 的/ 部分/ 研究/ 工作/ 可/ 归属于/ 这种/ 类型/ ./ 如/ 文献/ [/ 67/ ]/ 参照/ 自/ 适应控制/ 理论/ 的/ 思想/ 提出/ 自/ 适应/ 测试/ 的/ 概念/ ,/ 将/ 被/ 测试软件/ 作为/ 被控/ 对象/ ,/ 测试/ 策略/ 作为/ 控制器/ ,/ 在/ 测试/ 过程/ 中/ 能/ 根据/ 需要/ 自动/ 调整/ 测试/ 策略/ 、/ 从而/ 能/ 更加/ 有效/ 地/ 发现/ 和/ 剔除/ 软件/ 中/ 的/ 错误/ ./ (/ 3/ )/ 等效/ 映射/ 型/ (/ 或称/ “/ =/ ”/ 型/ )/ ./ 这种/ 类型/ 的/ 研究/ 工作/ ,/ 如图/ 6/ ,/ 采用/ 对/ 等/ 匹配/ 的/ 思想/ ,/ 将/ 软件/ 自/ 适应/ 环/ 等效/ 映射/ 为/ 控制/ 环/ ,/ 其/ 结构/ 形式/ 和/ 组成/ 要素/ 几乎/ 都/ 与/ 控制系统/ 相同/ ,/ 因此/ 等效/ 映射/ 型/ 可/ 简称/ 为/ “/ =/ ”/ 型/ ./ 根据/ 这一/ 划分/ 标准/ ,/ 3.2/ 节所/ 讨论/ 的/ 自/ 控制软件/ 、/ 计算机系统/ 反馈/ 控制/ 、/ 软件/ 服务/ 反馈/ 性能/ 控制/ 、/ 基于/ 标准/ 控制/ 的/ 软件/ 自/ 适应/ 与/ 自/ 管理/ 这/ 几类/ 代/ Page10/ 表/ 研究/ 工作/ 也/ 都/ 可/ 自然/ 地/ 归属于/ 等效/ 映射/ 型/ ./ 例如/ ,/ 文献/ [/ 43/ ]/ 直接/ 采用/ 标准/ 反馈/ 控制结构/ 和/ 经典/ PI/ 控制/ 理论/ 来/ 调控/ 计算资源/ 以/ 在/ 多变/ 工作/ 负载/ 环境/ 下/ 确保/ SLO/ 服务/ 级/ 目标/ 的/ 实现/ ./ 5.2/ 基于/ 软件工程/ 视角/ 的/ 分类/ 标准/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 归根/ 为/ 软件工程/ 领域/ 的/ 问题/ ./ 从/ 软件工程/ 的/ 角度/ 来/ 考察/ 当前/ 研究/ 工作/ 是/ 软件/ 自/ 适应/ 研究/ 和/ 开发人员/ 非常/ 关心/ 的/ 内容/ ./ 因此/ ,/ 本文/ 参照/ 一般/ 的/ 软件开发/ 过程/ ,/ 提出/ 概念/ 框架/ 、/ 理论/ 基础/ 、/ 开发方法/ 和/ 评价/ 分析/ 4/ 个/ 分类/ 标准/ ,/ 以/ 用来/ 分析/ 和/ 发现/ 现有/ 文献/ 中/ 蕴含/ 的/ 研究/ 规律/ ./ (/ 1/ )/ 概念/ 框架/ ./ 其/ 用于/ 描述/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 概念/ 内涵/ 、/ 结构/ 组成/ 和/ 运行机制/ ,/ 是/ 解决/ “/ What/ (/ 是/ 什么/ )/ ”/ 方面/ 的/ 问题/ ./ 通过/ 概念/ 框架/ ,/ 能/ 直观/ 建立/ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 软件/ 模型/ 的/ 理解/ ./ 具体/ 地/ ,/ 概念/ 框架/ 又/ 可/ 进一步/ 分解/ 为/ 结构/ 形式/ 、/ 调控/ 模式/ 和/ 输入输出/ 等/ 方面/ 进行/ 描述/ ./ ①/ 结构/ 形式/ 主要/ 用来/ 刻画/ 软件/ 自/ 适应/ 中自/ 适应/ 逻辑/ 与/ 基本/ 应用逻辑/ 之间/ 的/ 分布/ 关系/ ,/ 主要/ 包括/ 外置式/ 和/ 内嵌式/ 两种/ [/ 6/ ]/ ./ 外置式/ 自/ 适应/ 软件系统/ 由/ 自/ 适应/ 引擎/ 和/ 可/ 适应/ (/ adaptable/ )/ 软件/ 组成/ ,/ 二者/ 常/ 分布/ 于/ 不同/ 进程/ 中/ ,/ 外部/ 独立/ 的/ 自/ 适应/ 引擎/ 用来/ 管理/ 和/ 调控/ 可/ 适应/ 软件/ ;/ 而/ 在/ 内嵌式/ 自/ 适应/ 软件系统/ 中/ ,/ 自/ 适应/ 逻辑/ 内嵌/ 到/ 基本/ 应用逻辑/ 或/ 目标软件/ 中/ ,/ 二者/ 常常/ 共享/ 相同/ 的/ 计算资源/ ./ ②/ 调控/ 模式/ 是/ 指自/ 适应/ 逻辑/ 调整/ 基本/ 应用逻辑/ 的/ 方式/ ,/ 主要/ 包括/ 调/ 参数/ 、/ 调/ 行为/ 和/ 调/ 结构/ 3/ 种/ 方式/ ./ 调/ 参数/ 是/ 指/ 通过/ 改变/ 基本/ 应用逻辑/ (/ 目标软件/ )/ 的/ 参数/ 来/ 实现/ 自/ 适应/ 目标/ ;/ 调/ 行为/ 指/ 通过/ 改变/ 基本/ 应用逻辑/ 中/ 函数调用/ 或/ 方法/ 来/ 实现/ 自/ 适应/ ;/ 调/ 结构/ 通过/ 改变/ 基本/ 应用逻辑/ 内部/ 构件/ 的/ 连接/ 关系/ 或/ 直接/ 构件/ 替换/ 来/ 实现/ 自/ 适应/ ./ ③/ 输入输出/ 是/ 指/ 软件/ 自/ 适应/ 环所/ 采用/ 的/ 输入输出/ 变量/ 的/ 数量/ ./ 输入输出/ 变量/ 的/ 多少/ 能够/ 表征/ 自/ 适应/ 环/ 的/ 复杂程度/ ./ 常见/ 类型/ 有/ 单个/ 输入/ 变量/ 与/ 单个/ 输出/ 变量/ (/ SingleInputandSingleOutput/ ,/ SISO/ )/ 、/ 单/ 输入/ 变量/ 与/ 多个/ 输出/ 变量/ (/ SingleInputandMultipleOutputs/ ,/ SIMO/ )/ ,/ 多个/ 输入/ 变量/ 与/ 单个/ 输出/ 变量/ (/ MultipleInputandSingleOutputs/ ,/ MISO/ )/ 、/ 多个/ 输入/ 变量/ 与/ 多个/ 输出/ 变量/ (/ MultipleInputandMultipleOutputs/ ,/ MIMO/ )/ ./ (/ 2/ )/ 理论/ 基础/ ./ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 中/ ,/ 其/ 决策/ 和/ 建模/ 一般/ 都/ 建立/ 在/ 严格/ 的/ 数学/ 和/ 控制/ 理论/ 的/ 基础/ 上/ ./ 定义/ “/ 理论/ 基础/ ”/ 这一/ 分类/ 标准/ 的/ 目的/ 在于/ 理清/ 现有/ 研究/ 工作/ 中自/ 适应/ 决策/ 和/ 建模/ 机理/ ,/ 以为/ 研究/ 开发人员/ 提供/ 借鉴/ ./ 这一/ 分类/ 标准/ 实质/ 上/ 是/ 探究/ 软件/ 自/ 适应/ 关于/ “/ Why/ (/ 为什么/ )/ ”/ 方面/ 的/ 问题/ ,/ 其/ 可/ 进一步/ 地/ 分解/ 为/ 数学/ 工具/ 和/ 建模/ 方法/ 两个/ 子类/ ./ ①/ 数学/ 工具/ 是/ 控制/ 理论/ 进行/ 控制/ 决策/ 和/ 建模/ 的/ 手段/ ./ 总体而言/ ,/ 控制/ 理论/ 的/ 数学/ 工具/ 可/ 大体上/ 分为/ 经典/ 控制/ 理论/ 、/ 现代/ 控制/ 理论/ 和/ 智能/ 控制/ 理论/ 等/ 不同/ 控制/ 理论/ 工具/ ./ 这些/ 工具/ 一般/ 采用/ 不然/ 数学/ 语言/ 进行/ 表达/ ./ 如/ 经典/ 控制/ 理论/ 常/ 采用/ 微分方程/ ,/ 现代/ 控制/ 理论/ 常/ 采用/ 状态/ 空间/ 方程/ ,/ 而/ 智能/ 控制/ 理论/ 则/ 基于/ 模糊/ 逻辑/ 、/ 神经网络/ 等/ 智能算法/ ./ 而/ 在/ 软件工程/ 领域/ 中/ 常用/ 的/ 是/ 进程/ 代数/ 等/ 形式化/ 语言/ 以及/ 自动机/ 理论/ ./ ②/ 建模/ 方法/ 是/ 指/ 对/ 被控/ 对象/ (/ 目标/ 软件系统/ )/ 的/ 动态/ 特征/ 进行/ 建模/ 的/ 方法/ ,/ 建立/ 被控/ 软件/ 对象/ 的/ 合理/ 模型/ 是/ 实现/ 软件/ 自/ 适应/ 的/ 前提/ ./ 在/ 控制/ 理论/ 中/ ,/ 对/ 被控/ 对象/ 建模/ 主要/ 有/ 两种/ 方法/ :/ 第一性/ 原理/ (/ firstprinciple/ )/ 法/ (/ 白盒/ 法/ )/ 和/ 系统/ 辨识/ (/ systemidentifi/ -/ cation/ )/ 法/ (/ 黑盒/ 法/ )/ ./ 第一性/ 原理/ 法/ 利用/ 基本/ 的/ 物理/ 规律/ (/ 牛顿定律/ 、/ 热力学/ 定律/ 等/ )/ 分析/ 、/ 推理/ 来/ 建立/ 反映/ 系统/ 状态/ 和/ 行为/ 的/ 数学模型/ ;/ 而/ 黑盒/ 法则/ 是/ 基于/ 被控/ 对象/ 的/ 输入输出/ 数据/ 样本/ 对/ ,/ 借助/ 系统/ 辨识/ 理论/ 确立/ 被控/ 对象/ 的/ 近似/ 模型/ ./ (/ 3/ )/ 开发方法/ ./ 这一/ 分类/ 标准/ 旨在/ 从/ 软件开发/ 的/ 角度/ 来/ 认识/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 现状/ ,/ 其/ 有助于/ 弄清/ “/ How/ (/ 怎么/ 做/ )/ ”/ 方面/ 的/ 问题/ ./ 自然/ 地/ ,/ 开发方法/ 又/ 可分解/ 为/ 需求/ 分析/ 、/ 设计/ 实现/ 、/ 辅助工具/ 等/ 子/ 标准/ ./ ①/ 需求/ 分析/ 即/ 是/ 借助/ 专门/ 的/ 需求/ 分析/ 技术/ 方法/ 和/ 工具/ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 需求/ 进行/ 合理/ 描述/ 与/ 表达/ ,/ 或是/ 采用/ 控制/ 理论/ 的/ 思想/ 研究/ 解决/ 软件/ 自/ 适应/ 需求/ 建模/ 等/ 方面/ 的/ 问题/ ./ 例如/ ,/ Souza/ 等/ 人/ [/ 68/ ]/ 采用/ 经典/ PID/ 控制/ 的/ 比例/ 、/ 积分/ 、/ 微分/ 思想/ 建立/ 了/ 一套/ 独特/ 的/ 自/ 适应/ 需求/ 描述语言/ AwReqs/ ,/ 能够/ 在/ 系统/ 运行/ 时/ 即时/ 汇集/ 过去/ 状态/ 、/ 实时/ 感知/ 现在/ 状态/ 和/ 及时/ 预测/ 未来/ 状态/ 趋势/ ./ ②/ 设计/ 实现/ 即/ 是/ 指/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 设计/ 方法/ 和/ 实现/ 机制/ ./ 设计/ 方法/ 包括/ 基于/ UML/ 的/ 设计/ 与/ 建模/ 等/ ,/ 实现/ 机制/ 包括/ 程序结构/ 、/ 编程/ 模型/ 等/ 代码/ 层次/ 上/ 的/ 软件/ 构造方法/ ./ ③/ 辅助工具/ 是/ 指/ 用于/ 支撑/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 开发/ 的/ 自动化/ 、/ 可视化/ 软件/ 支撑/ 工具/ ,/ 其能/ 屏蔽/ 控制/ 理论/ 自身/ 的/ 复杂性/ ,/ 减轻/ 开发者/ 的/ 负担/ ,/ 提/ Page11/ 高/ 开发/ 效率/ ./ (/ 4/ )/ 评价/ 分析/ ./ 该/ 分类/ 标准/ 用于/ 总结/ 分析/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 效果/ 及其/ 运行/ 质量/ ,/ 也/ 即/ 是/ “/ V/ &/ V/ (/ Verification/ &/ Validation/ )/ ”/ 评价/ 问题/ ./ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 这/ 类/ 研究/ 工作/ 进行/ 评价/ 分析/ ,/ 其/ 可能/ 的/ 技术/ 途径/ 主要/ 包括/ 形式/ 证明/ 、/ 案例/ 实验/ 和/ 模拟/ 仿真/ :/ ①/ 形式/ 证明/ 是/ 指/ 通过/ 形式化/ 的/ 数学/ 工具/ 来/ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 系统/ 性质/ 、/ 性能/ 等/ 进行/ 严格/ 推理/ 与/ 证明/ ,/ 并/ 形成/ 评价/ 结论/ ./ 例如/ ,/ 可/ 采用/ 控制/ 理论/ 中/ 较为/ 完备/ 的/ 稳定性/ 分析方法/ [/ 28/ ]/ 对/ 自/ 适应/ 动态/ 过程/ 进行/ 评价/ ./ ②/ 案例/ 实验/ 是/ 指/ 基于/ 特定/ 场景/ 搭建/ 实验/ 系统对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 进行/ 评价/ 分析/ ./ ③/ 模拟/ 仿真/ 是/ 指/ 借助于/ 仿真/ 工具/ (/ 如/ Matlab/ )/ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 过程/ 控制算法/ 和/ 效果/ 进行/ 仿真/ 和/ 评估/ ./ 6/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 现状/ 分析/ 根据/ 前/ 文/ 定义/ 的/ 分类/ 标准/ ,/ 将/ 检索/ 到/ 的/ 研究/ 文献/ 进行/ 了/ 分类整理/ ,/ 具体/ 结果/ 如/ 附表/ 1/ 所示/ ./ 下面/ 分别/ 从/ 控制工程/ 视角/ (/ 包括/ 控制结构/ )/ 和/ 软件工程/ 视角/ (/ 包括/ 概念/ 框架/ 、/ 理论/ 基础/ 、/ 开发方法/ 和/ 评价/ 验证/ 等/ 侧面/ )/ 来/ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 现状/ 进行/ 分析/ 讨论/ ,/ 从而/ 来/ 回答/ RQ2/ 问题/ ./ 6.1/ 控制结构/ 分析/ 在/ 控制系统/ 的/ 设计/ 中/ ,/ 研究/ 和/ 确定/ 控制结构/ 是/ 其/ 重要/ 前提/ ./ 而/ 类似/ 地/ ,/ 控制结构/ 形式/ 同样/ 是/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 的/ 一个/ 重要环节/ ./ 前文/ 已/ 讨论/ ,/ 通过/ 与/ 标准/ 控制系统/ 对照/ ,/ 我们/ 将/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 控制结构/ 概括/ 为/ 简单/ 反馈/ 、/ 广义/ 控制/ 、/ 标准/ 映射/ 3/ 种/ 类型/ ./ 基于/ 附表/ 1/ 的/ 统计数据/ ,/ 现有/ 文献/ 采用/ 这/ 3/ 种/ 控制结构/ 类型/ 的/ 数量/ 对/ 比如/ 图/ 7/ 所示/ ./ 从图/ 7/ 我们/ 可以/ 直观/ 发现/ ,/ 在/ 3/ 种/ 类型/ 中/ ,/ 等效/ 映射/ 是/ 最/ 常用/ 的/ 一种/ 形式/ ,/ 所/ 占/ 比例/ 最高/ (/ 70/ 篇/ 中/ 有/ 46/ 篇/ )/ ./ 等效/ 映射/ 型/ 软件/ 自/ 适应/ 不但/ 在/ 形式/ 上/ 充分/ 借鉴/ 常规/ 控制系统/ 结构/ ,/ 而且/ 还/ 采用/ 了/ 标准/ 的/ 控制/ 理论/ 作为/ 自/ 适应/ 决策/ 运算/ 逻辑/ ./ 这种/ 类型/ 多用/ 在/ 软件系统/ 参数/ 调整/ 、/ 性能/ 和/ 资源/ 优化/ 方面/ ./ 例如/ ,/ Parekh/ 等/ 人/ [/ 69/ ]/ 采用/ 经典/ 积分控制/ 结构/ 和/ 方法/ 实现/ 对/ 软件系统/ 参数/ 的/ 调节/ ,/ 使/ 服务/ 级/ 目标/ 维持/ 在/ 规定/ 范围/ 内/ ./ 与/ 此/ 类似/ ,/ Diao/ 等/ 人/ [/ 43/ ]/ 将/ IBM/ 自治/ 计算/ 架构/ 映射/ 为/ 自动/ 控制系统/ 结构/ ,/ 采用/ 经典/ 控制算法/ 解决/ 服务器/ 负载/ 均衡/ 问题/ ./ Karlsson/ 等/ 人/ [/ 70/ ]/ 提出/ 一种/ 基于/ 自/ 适应控制/ 理论/ 的/ 数据/ 存储/ 自/ 适应/ 框架/ Triage/ ,/ 确保/ 动态/ 负载/ 条件/ 下/ 存储系统/ 的/ 性能/ 隔离/ (/ performanceisolation/ )/ 和/ 性能/ 差异化/ (/ performancedifferentiation/ )/ 的/ 质量/ 目标/ ./ 而/ Liu/ 等/ 人/ [/ 71/ ]/ 提出/ 了/ 基于/ 多/ 变量/ 最优控制/ 的/ 自/ 适应/ 框架/ ,/ 实现/ 共享资源/ 的/ 动态分配/ 以/ 满足/ 特定/ 级别/ 应用/ 的/ 服务/ 差异化/ ./ 广义/ 控制/ 型/ 软件/ 自/ 适应/ 在/ 检索/ 到/ 的/ 文献/ 中/ 也/ 占有/ 一定/ 比例/ (/ 70/ 篇/ 中/ 有/ 12/ 篇/ )/ ./ 这种/ 类型/ 的/ 研究/ 工作/ 将/ 控制/ 的/ 应用/ 范围/ 从/ 单纯/ 的/ 软件/ 性能/ 调整/ 泛化/ 到/ 软件/ 需求/ 、/ 测试/ 和/ 容错/ 等/ 问题/ 域/ ,/ 为/ 这些/ 问题/ 的/ 解决/ 提供/ 了/ 新颖/ 的/ 技术/ 途径/ ./ 例如/ ,/ Cai/ 等/ 人/ [/ 72/ ]/ 基于/ 自/ 适应控制/ 的/ 思想/ 提出/ 自/ 适应/ 测试/ 的/ 新/ 方法/ 来/ 灵活/ 地/ 进行/ 软件可靠性/ 评估/ ,/ 他们/ 还/ 将/ 软件/ 容错/ 问题/ 转换/ 为/ 一种/ 智能/ 监督控制/ 问题/ [/ 66/ ]/ ,/ 建立/ 了/ 一种/ 基于/ 控制/ 的/ 软件/ 容错/ 架构/ ./ 刘春/ 等/ 人/ [/ 73/ ]/ 基于/ 反馈/ 控制/ 思想/ 将/ 适应性/ 需求/ 的/ 识别/ 和/ 分析/ 转化/ 为/ 对/ 控制系统/ 反馈/ 回路/ 的/ 识别/ 和/ 分析/ ,/ 从而/ 能/ 合理/ 地/ 将/ 环境/ 变化/ 融入/ 适应性/ 需求/ 识别/ 分析/ 中/ ./ 简单/ 反馈/ 型/ 是/ 大多数/ 软件/ 自/ 适应/ 研究/ 工作/ 采用/ 的/ 架构/ 形式/ ,/ 其外/ 在/ 形态/ 借鉴/ 了/ 反馈/ 控制结构/ ,/ 但/ 其/ 核心/ 自/ 适应/ 策略/ 没有/ 采用/ 控制/ 理论/ 算法/ ./ 从/ 选取/ 的/ 12/ 篇/ 代表性/ 文献/ 来看/ ,/ 这/ 类/ 研究/ 工作/ 多/ 借助于/ 软件体系结构/ 、/ 构件/ 等/ 设施/ 来/ 构造/ 和/ 描述/ 具有/ 单层/ 及/ 多层/ 特征/ 的/ 自/ 适应/ 反馈/ 控制结构/ ./ 例如/ ,/ Kramer/ 与/ Magee/ [/ 9/ ]/ 认为/ 软件体系结构/ 能为/ 软件/ 自/ 管理/ 提供/ 泛化/ (/ Generality/ )/ 、/ 抽象/ 级别/ (/ Levelofabstract/ )/ 、/ 扩展/ 潜力/ (/ Potentialforscalability/ )/ 等/ 好处/ ,/ 并/ 提出/ 了/ 一种/ 包括/ 构件/ 控制/ (/ componentcontrol/ )/ 、/ 变化/ 管理/ (/ changemanagement/ )/ 和/ 目标/ 管理/ (/ goalmanage/ -/ ment/ )/ 的/ 软件/ 自/ 管理/ 三层/ 体系结构/ 模型/ (/ ThreeLayerArchitectureModel/ ,/ TLAM/ )/ ,/ 从而/ 使得/ 构件/ 根据/ 全/ Page12/ 局/ 架构/ 规约/ 来/ 调整/ 交互/ 行为/ 能/ 达到/ 系统/ 目标/ ./ 而/ Oreizy/ 等/ 人/ [/ 15/ ]/ 依照/ 大规模/ 自/ 适应/ (/ adaptation/ -/ in/ -/ the/ -/ large/ )/ 思想/ 提出/ 了/ 基于/ 软件体系结构/ 的/ 自/ 适应/ 软件/ 概念/ 框架/ ,/ 其/ 将/ 自/ 适应/ 分为/ 演化/ 管理/ 和/ 自/ 适应/ 管理/ 两个/ 层次/ ,/ 并/ 强调/ 了/ 自/ 适应/ 过程/ 维护/ 架构/ 模型/ 和/ 实际/ 可/ 执行/ 系统/ 之间/ 一致性/ 的/ 重要性/ ./ Garlan/ 等/ 人/ [/ 21/ -/ 22/ ]/ 提出/ 的/ Rainbow/ 自/ 适应/ 概念/ 框架/ 则/ 更加/ 显式/ 地/ 采用/ 了/ 软件体系结构/ 风格/ ,/ 包含/ 架构/ 评估器/ 、/ 自/ 适应/ 管理器/ 、/ 策略/ 执行器/ 、/ 模型/ 管理器/ 、/ 探针/ 、/ 效应器/ (/ effector/ )/ 等/ 核心/ 设施/ ,/ 这种/ 概念/ 框架/ 具有/ 根据/ 不同/ 应用/ 需求/ 进行/ 裁减/ 的/ 能力/ ./ 而/ Parekh/ 等/ 人/ [/ 36/ ]/ 则/ 提出/ 了/ 集中式/ 自/ 适应/ 框架/ KinesthesticseXtreme/ (/ KX/ )/ 来/ 专门/ 解决/ 遗留/ 软件系统/ 的/ 自/ 适应/ 问题/ ./ 6.2/ 概念/ 框架/ 分析/ 本文/ 从/ 结构/ 形式/ 、/ 调控/ 模式/ 、/ 输入输出/ 3/ 个/ 维度/ 来/ 刻画/ 和/ 分析/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 概念/ 框架/ ./ 6.2/ ./ 1/ 软件/ 自/ 适应/ 的/ 结构/ 形式/ 首先/ 从/ 结构/ 形式/ 这一/ 维度/ 来/ 进行/ 分析/ 讨论/ ./ 在/ 这/ 一/ 维度/ 上/ ,/ 外置式/ 和/ 内嵌式/ 是/ 搭建/ 软件/ 自/ 适应/ 结构/ 的/ 两种/ 主要/ 途径/ ./ 图/ 8/ 为/ 针对/ 附表/ 1/ 列出/ 的/ 研究/ 工作/ 所/ 采用/ 的/ 结构/ 形式/ 的/ 统计/ 与/ 对比/ 分析/ ./ 图/ 8/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 结构/ 形式/ 对比/ 不难看出/ ,/ 外置式/ 结构/ 是/ 最/ 普遍/ 的/ 结构/ 形式/ ,/ 占/ 到/ 了/ 70/ %/ 的/ 比重/ (/ 共有/ 49/ 篇/ 文献/ )/ ./ 外置式/ 软件/ 自/ 适应/ 结构/ 将/ 自/ 适应/ 逻辑/ 独立/ 于/ 应用逻辑/ 或/ 目标软件/ 图/ 9/ 软件/ 自/ 适应/ 的/ 结构/ 形式/ 分类/ 之外/ 运行/ ,/ 如图/ 9/ (/ a/ )/ ./ 这种/ 结构/ 下/ 的/ 软件/ 自/ 适应/ 逻辑/ 常以/ 大/ 粒度/ 的/ 构件/ 、/ 中间件/ 等/ 形式/ 存在/ ,/ 以/ 独立/ 的/ 外部/ 自/ 适应/ 引擎/ 的/ 方式/ 来/ 实现/ 应用/ 系统/ 自/ 适应/ ./ 例如/ ,/ Zhang/ 等/ 人/ [/ 74/ ]/ 提出/ 的/ ControlWare/ 框架/ 采用/ 中间件/ 封装/ 闭环控制/ 算法/ ,/ 实现/ 互联网/ QoS/ 性能/ 的/ 收敛性/ 确保/ (/ convergenceguarantees/ )/ ,/ 从而/ 为/ 软件/ 编程人员/ 屏蔽/ 了/ 控制/ 理论/ 的/ 复杂性/ ./ 而/ Rainbow/ [/ 21/ ]/ 框架/ 同样/ 采用/ 了/ 这种/ 外置式/ 结构/ ,/ 其/ 拥有/ 可/ 独立/ 运行/ 的/ 架构/ 层/ (/ architecturelayer/ )/ 管理/ 自/ 适应/ 逻辑/ ,/ 并/ 通过/ 转换/ 基础设施/ (/ translationinfrastructure/ )/ 实现/ 对/ 目标/ 系统/ (/ targetsystem/ )/ 的/ 调控/ ./ 类似/ 地/ Zanshin/ [/ 75/ ]/ 和/ KX/ [/ 36/ ]/ 等/ 研究/ 工作/ 则/ 借助/ 构件/ 来/ 搭建/ 外置式/ 反馈/ 控制结构/ ./ 外置式/ 自/ 适应/ 框架/ 具有/ 独立性/ 、/ 可维护性/ 好/ 的/ 特点/ ,/ 但/ 由于/ 自/ 适应/ 逻辑/ 需要/ 开辟/ 单独/ 的/ 运行/ 空间/ ,/ 要/ 考虑/ 与/ 目标软件/ 之间/ 的/ 跨/ 进程/ 、/ 跨/ 网络/ 访问/ 的/ 通信/ 设施/ 和/ 机制/ (/ 如/ ControlWare/ [/ 74/ ]/ 和/ Rainbow/ [/ 22/ ]/ )/ ,/ 因而/ 其/ 构造/ 和/ 实现/ 具有/ 一定/ 的/ 复杂性/ ./ 由图/ 8/ 可知/ ,/ 内嵌式/ 结构/ 在/ 当前/ 研究/ 工作/ 中/ 也/ 占有/ 相当/ 一部分/ 比例/ (/ 共有/ 17/ 篇/ 文献/ )/ ./ 在/ 内嵌式/ 结构/ 中/ ,/ 软件/ 自/ 适应/ 逻辑/ 内嵌/ 到/ 目标软件/ 之中/ ,/ 二者/ 常常/ 共享/ 同一/ 计算资源/ ,/ 共生/ 共存/ 于/ 相同/ 的/ 运行/ 空间/ ./ 综合/ 现有/ 工作/ 来看/ ,/ 这种/ 内嵌式/ 结构/ 又/ 可/ 进一步/ 地/ 分为/ 两种/ 形式/ :/ 内嵌/ 分离式/ (/ 图/ 9/ (/ b/ )/ )/ 和/ 内嵌/ 缠绕式/ (/ 图/ 9/ (/ c/ )/ )/ ./ 对于/ 内嵌/ 分离式/ 架构/ ,/ 虽然/ 自/ 适应/ 逻辑/ 和/ 应用逻辑/ 共享/ 同一/ 软件/ 计算/ 空间/ ,/ 但/ 从/ 程序代码/ 这一/ 层次/ 来看/ ,/ 自/ 适应/ 逻辑/ 代码/ 和/ 应用逻辑/ 代码/ 仍/ 是/ 分离/ 的/ ./ 如/ Yang/ 等/ 人/ [/ 76/ ]/ 的/ 研究/ 工作/ 采用/ 面向/ 方面/ 编程/ (/ AspectOrientedProgramming/ ,/ AOP/ )/ 思想/ 将/ 自/ 适应/ 逻辑/ 程序代码/ 模块化/ 织入/ 到/ 目标软件/ 代码/ 内部/ ,/ 并/ 在/ 内部/ 独立/ 于/ 应用逻辑/ 代码/ ./ 而/ Liu/ 等/ 人/ [/ 77/ ]/ 则/ 在/ 系统/ 内/ 引入/ 一个/ 基于/ 控制算法/ 的/ 自/ 适应/ 安全/ 模块/ 来/ 实现/ 安全性/ 与/ QoS/ 性能/ 间/ 的/ 平衡/ ./ 内嵌/ 分离式/ 结构/ ,/ 具有/ 结构/ 清晰/ ,/ 代码/ 维护/ 更新/ 方便/ 等/ 特点/ ;/ 而/ 内嵌/ 缠绕式/ 架构/ 中/ ,/ 自/ 适应/ 逻辑/ 与/ 应用逻辑/ 程序代码/ 交织/ 耦合/ 在/ 一起/ ,/ 传统/ 条件/ 表达式/ 的/ 实现/ 方/ Page13/ 式/ (/ 如/ 散布/ 在/ 程序/ 中/ 的/ “/ if/ -/ then/ -/ else/ ”/ 式/ 的/ 异常/ 处理程序/ )/ 等/ 便/ 属于/ 这种/ 架构/ ./ 总体而言/ ,/ 相比/ 外置式/ 结构/ ,/ 内嵌式/ 结构/ 可维护性/ 相对/ 较弱/ ,/ 但/ 由于/ 自/ 适应/ 逻辑/ 与/ 应用逻辑/ 共享/ 运行/ 空间/ 和/ 计算资源/ ,/ 所以/ 内嵌式/ 结构/ 的/ 构造/ 实现/ 相对/ 简单/ ,/ 是/ 一种/ 轻量级/ 的/ 方法/ ./ 6.2/ ./ 2/ 软件/ 自/ 适应/ 的/ 调控/ 模式/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 逻辑/ 一般/ 通过/ 调整/ 应用逻辑/ 的/ 参数/ 、/ 行为/ 或/ 结构/ 来/ 对/ 应用逻辑/ 施加影响/ ./ 现有/ 研究/ 文献/ 有/ 的/ 通过/ 单一/ 方式/ (/ 如/ 只/ 调整/ 参数/ )/ 来/ 改变/ 应用逻辑/ 状态/ ,/ 还有/ 采用/ 多种/ 方式/ (/ 如/ 既调/ 参数/ 又/ 调/ 结构/ )/ 综合/ 作用/ 来/ 调控/ 应用逻辑/ ./ 图/ 10/ 是/ 对/ 本文/ 70/ 篇/ 样本/ 文献/ 所/ 采用/ 的/ 调控/ 模式/ 的/ 综合/ 对比/ 分析/ ./ 从图/ 10/ 可以/ 看出/ ,/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 工作/ 大部分/ 都/ 采用/ 了/ 单一/ 的/ 调控/ 模式/ ,/ 也/ 有/ 一部分/ 工作/ 综合/ 采用/ 了/ 两种/ 或/ 三种/ 调控/ 模式/ ./ (/ 1/ )/ 单一/ 调控/ 模式/ 对于/ 单一/ 调控/ 模式/ 而言/ ,/ 调/ 参数/ 这种/ 模式/ 在/ 所有/ 调控/ 模式/ 中所/ 占/ 比例/ 最大/ (/ 共有/ 33/ 篇/ 文献/ )/ ,/ 其/ 主要/ 原因/ 在于/ 这种/ 模式/ 的/ 构造/ 和/ 实现/ 最为/ 简单/ ./ 这种/ 调控/ 方式/ 一般/ 通过/ 操控/ 和/ 改变/ 软件系统/ 内部/ 的/ 状态变量/ 来/ 影响/ 软件/ 性能/ ./ 例如/ ,/ Kusic/ 等/ 人/ [/ 78/ ]/ 通过/ 对/ 大型/ 数据中心/ 虚拟/ 服务器/ 环境/ 中/ 的/ 虚拟机/ 数量/ 、/ 运行/ 虚拟机/ 的/ 主机/ 数量/ 、/ CPU/ 资源/ 向/ 虚拟机/ 的/ 分配/ 量/ 等/ 参数/ 进行/ 综合/ 调控/ ,/ 来/ 实现/ 节电/ 的/ 目标/ ./ Kamra/ 等/ 人/ [/ 79/ ]/ 在/ 其/ Yaksha/ 框架/ 中/ 通过/ 调整/ 接受/ 概率/ (/ acceptanceprobability/ )/ 参数/ 来/ 确保/ 3/ 层/ 结构/ Web/ 站点/ 的/ 响应/ 时间/ ./ 但/ 总体而言/ ,/ 调/ 参数/ 这种/ 细粒度/ 的/ 调控/ 方式/ 由于/ 影响/ 作用/ 范围/ 小/ ,/ 因此/ 大多/ 常用/ 于/ 对/ 软件系统/ 的/ 资源/ 调度/ 、/ 性能/ 优化/ 、/ 运行/ 节能/ 等/ 非/ 功能性/ 指标/ 的/ 优化/ 方面/ ./ 调/ 行为/ 是/ 另外/ 一种/ 被/ 较/ 多/ 采用/ 的/ 调控/ 模式/ (/ 共有/ 9/ 篇/ 文献/ )/ ,/ 其/ 通过/ 改变/ 或/ 替换/ 软件系统/ 内部/ 的/ 方法/ 调用/ 来/ 影响/ 软件/ 的/ 运行/ 行为/ ,/ 因此/ 其/ 相对/ 于调/ 参数/ 这种/ 模式/ 而言/ ,/ 对/ 软件系统/ 影响/ 的/ 粒度/ 和/ 力度/ 都/ 更/ 大/ ./ 例如/ ,/ Kreidl/ 等/ 人/ [/ 53/ ]/ 在/ 自治/ 防护系统/ 研究/ (/ autonomicdefensesystem/ )/ 中/ 基于/ 反馈/ 控制/ 决策/ 结果/ 来/ 调用/ 相应/ 的/ 软件/ 方法/ 来/ 自动/ 执行/ 终止/ 进程/ (/ killprocess/ )/ 、/ 停止/ 主机/ (/ halthost/ )/ 等/ 防护/ 行为/ ,/ 提高/ 系统/ 在/ 网络/ 环境/ 下/ 自主/ 生存能力/ ./ Dawson/ 等/ 人/ [/ 61/ ]/ 利用/ 反射/ 技术/ (/ reflection/ )/ 并/ 通过/ 调用/ 反射/ API/ 函数/ 来/ 改变/ 软件/ 行为/ (/ 如/ 进行/ 系统/ 异常/ 处理/ 等/ )/ ./ 然而/ ,/ 随着/ 软件系统/ 日益/ 呈现/ 网构化/ 、/ 普适化/ 等/ 分布式/ 特征/ ,/ 其/ 对调/ 结构/ 这一/ 模式/ 的/ 需求/ 也/ 更加/ 强烈/ ./ 在/ 本文/ 所/ 检索/ 的/ 70/ 篇/ 文献/ 中/ ,/ 单纯/ 采用/ 调/ 结构/ 这/ 一种/ 模式/ 的/ 文献/ 有/ 12/ 篇/ ,/ 比/ 采用/ 调/ 行为/ 模式/ 的/ 文献/ 数量/ 要/ 多/ ./ 软件体系结构/ 、/ 构件/ 等/ 软件/ 设施/ 为/ 支撑/ 调/ 结构/ 模式/ 提供/ 了/ 高效/ 的/ 工具/ ./ 例如/ ,/ 在/ Peng/ 等/ 人/ [/ 80/ ]/ 的/ 研究/ 工作/ 中/ ,/ 为了/ 防止/ 性能指标/ 恶化/ ,/ 首先/ 采用/ PID/ 控制器/ 来/ 决策/ 生成/ 一个/ 软/ 目标/ ,/ 而后/ 依据/ 这/ 一个/ 软/ 目标/ 基于/ 推理/ 器来/ 动态/ 产生/ 能/ 实现/ 软/ 目标/ 的/ 系统配置/ ,/ 最后/ 根据/ 这个/ 配置/ 对/ 构件/ 化/ 软件系统/ 实现/ 重构/ ./ 同样/ 地/ ,/ Georgas/ 等/ 人/ [/ 63/ ]/ 采用/ 反馈/ 控制/ 调/ 结构/ 模式/ 和/ 软件体系结构/ 技术/ 使得/ 机器人/ 系统/ 具有/ 自/ 适应能力/ ./ (/ 2/ )/ 综合/ 调控/ 模式/ 综合/ 使用/ 调/ 参数/ 、/ 调/ 行为/ 和/ 调/ 结构/ 等/ 调控/ 模式/ 能够/ 使得/ 软件/ 具有/ 更强/ 的/ 自/ 适应能力/ ./ 首先/ 讨论/ 两种/ 调控/ 方式/ 相结合/ 的/ 研究/ 工作/ ./ 从图/ 10/ 可以/ 看出/ ,/ 调/ 参数/ 与/ 调/ 行为/ 、/ 调/ 行为/ 与/ 调/ 结构/ 是/ 两种/ 常用/ 的/ 结合/ 方式/ ,/ 且/ 调/ 行为/ 与/ 调/ 结构/ 相结合/ 的/ 方式/ 则/ 显得/ 更/ 多/ (/ 共有/ 8/ 篇/ 文献/ )/ ,/ 但/ 我们/ 在/ 70/ 篇/ 样本/ 文献/ 集/ 却/ 没有/ 发现/ 调/ 参数/ 与/ 调/ 结构/ 相结合/ 的/ 研究/ 工作/ (/ 这种/ 想象/ 背后/ 的/ 原因/ 我们/ 目前/ 无法/ 给出/ 合理/ 的/ 解释/ )/ ./ 从/ 现有/ 文献/ 来看/ ,/ 采用/ 调/ 参数/ 与/ 调/ 行为/ 相结合/ 的/ 方式/ 的/ 研究/ 工作/ 主要/ 关注/ 于/ 软件/ 非/ 功能属性/ 如/ 性能/ 的/ 调控/ 与/ 确保/ ./ 例如/ ,/ 在/ ControlWare/ 框架/ [/ 74/ ]/ 中/ ,/ 提供/ 了/ 多用途/ 执行器/ (/ multipurposeactuator/ )/ ,/ 既/ 能/ 分配/ 调整/ 资源/ (/ 调/ 参数/ )/ ,/ 亦可/ 输出/ (/ export/ )/ API/ 函数/ 供/ 应用程序/ 调用/ (/ 调/ 行为/ )/ ,/ 通过/ 这/ 两种/ 方式/ 的/ 综合/ 作用/ ,/ 来/ 实现/ 互联网服务/ 的/ 性能/ 确保/ ./ 另一方面/ ,/ 调/ 行为/ 与/ 调/ 结构/ 相结合/ 的/ 调控/ 方式/ 不但/ 关注/ 系统/ 的/ 非/ 功能属性/ 也/ 关注/ 系统/ 的/ 功能属性/ ./ 如/ Tziallas/ 等/ 人/ [/ 54/ ]/ 的/ 研究/ 工作/ 基于/ 监督/ 控制器/ 来/ 自动/ 胶合/ (/ gluing/ )/ 软件/ 构件/ (/ 调/ 结构/ )/ ,/ 替换/ 失效/ 构件/ ,/ 来/ 确保/ 软件/ 正常/ 功能/ 服务/ ,/ 同时/ 又/ 可/ 控制/ 构件/ 的/ 行为/ 进行/ Page14/ 处理/ 异常/ 错误/ 等/ ./ 再/ 如/ ,/ Bhat/ 等/ 人/ [/ 81/ ]/ 基于/ 受限/ 前向/ 控制器/ (/ limitedlook/ -/ aheadcontrol/ )/ 调整/ 系统/ 构件/ 的/ 复合/ (/ 调/ 结构/ )/ 与/ 交互/ (/ 调/ 行为/ )/ ,/ 既/ 能/ 优化/ 数据传输/ 开销/ (/ 非/ 功能属性/ )/ ,/ 还/ 能/ 防止/ 数据/ 丢失/ (/ 功能属性/ )/ ./ 还有/ 若干/ 研究/ 工作/ 能/ 同时/ 支持/ 这/ 3/ 种/ 调控/ 方式/ ./ 例如/ ,/ 在/ 我们/ 前期/ 的/ 基于/ 模糊控制/ 的/ 软件/ 自/ 适应/ 概念/ 框架/ [/ 76/ ]/ 和/ 面向/ 软件/ 模糊/ 自/ 适应/ 的/ UML/ 建模/ 扩展/ [/ 82/ ]/ 等/ 工作/ 中/ ,/ 都/ 可/ 同时/ 支持/ 调/ 参数/ 、/ 调/ 行为/ 和/ 调/ 结构/ 这/ 3/ 种/ 方式/ 的/ UML/ 建模/ 和/ 设计/ 等/ ,/ 为/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应能力/ 实现/ 提供/ 了/ 丰富/ 的/ 技术手段/ ./ 6.2/ ./ 3/ 软件/ 自/ 适应/ 的/ 输入输出/ 分析/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 一个/ 显著特点/ 是/ 所有/ 的/ 软件/ 自/ 适应/ 环都/ 有/ 显式/ 的/ 输入输出/ 变量/ ./ 输入/ 变量/ 一般/ 对应/ 着/ 反馈/ 控制/ 回路/ 的/ 感知/ 环节/ ,/ 而/ 输出/ 变量/ 常/ 对应/ 着/ 执行/ 环节/ ,/ 研究/ 与/ 确定/ 软件/ 自/ 适应/ 环/ 输入输出/ 的/ 是/ 软件/ 自/ 适应/ 环/ 的/ 构建/ 和/ 分析/ 的/ 前提/ ,/ 因此/ 其/ 也/ 是/ 表征/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 概念/ 框架/ 的/ 核心/ 要素/ 之一/ ./ 按照/ 输入输出/ 的/ 4/ 种/ 类型/ (/ SISO/ ,/ SIMO/ ,/ MISO/ 和/ MIMO/ )/ ,/ 对/ 附表/ 1/ 的/ 样本/ 研究/ 文献/ 进行/ 了/ 分类/ 统计/ ,/ 其/ 结果/ 如图/ 11/ 所示/ ./ 基于/ 统计/ 结果/ ,/ 我们/ 发现/ 采用/ 多/ 输入/ 多/ 输出/ (/ MIMO/ )/ 类型/ 的/ 研究/ 文献/ 数量/ 最/ 多/ (/ 共有/ 37/ 篇/ 文献/ )/ ,/ 其/ 根本原因/ 在于/ 随着/ 软件系统/ 面临/ 环境/ 、/ 需求/ 和/ 自身/ 结构/ 复杂性/ 的/ 不断/ 增加/ ,/ 对/ 软件/ 的/ 某/ 一/ 功能/ 或/ 性能指标/ 的/ 调控/ 或/ 寻优/ 涉及/ 的/ 因素/ 也/ 越来越/ 多/ ,/ 需要/ 多种/ 因素/ 综合/ 考虑/ 才能/ 确保/ 自/ 适应/ 效果/ ./ 比如/ ,/ 为/ 使/ 复杂/ 虚拟/ 数据中心/ 能/ 自动/ 应对/ 负载/ 突变/ 和/ 资源/ 消费/ 类型/ 的/ 变化/ ,/ Padala/ 等/ 人/ [/ 83/ ]/ 提出/ 基于/ MIMO/ 的/ AutoControl/ 框架/ ,/ 其/ 输入/ 为/ 资源/ 利用率/ 和/ 应用/ 性能/ 等/ 变量/ ,/ 输出/ 为/ CPU/ 和/ 磁盘/ 调度/ 等/ 变量/ ,/ 从而/ 确保/ 服务/ 级/ 目标/ (/ SLO/ )/ ./ 同样/ 地/ ,/ Chuang/ 等/ 人/ [/ 84/ ]/ 提出/ 支持/ MIMO/ 的/ 移动/ QoS/ 自/ 适应/ 管理/ 框架/ ,/ 以/ 网络带宽/ 、/ 出错率/ 等/ 变量/ 为/ 输入/ ,/ 以/ 网络/ 质量/ 、/ 出错/ 优先级/ 等/ 变量/ 为/ 输出/ ,/ 实现/ 移动/ 服务/ 在/ 复杂/ 移动/ 操控/ 环境/ 下/ 的/ 自/ 适应/ ./ 另一方面/ ,/ 单/ 输入/ 单/ 输出/ (/ SISO/ )/ 作为/ 一种/ 最/ 简单/ 有效/ 的/ 类型/ 也/ 为/ 不少/ 研究/ 工作/ 所/ 采用/ (/ 共有/ 18/ 篇/ 文献/ )/ ./ 基于/ SISO/ 的/ 软件/ 自/ 适应/ 方法/ 一般/ 在/ 某/ 一/ 软件/ 关键/ 运行/ 状态/ (/ 如/ CPU/ 利用率/ )/ 进行/ 感知/ 的/ 基础/ 上/ ,/ 实现/ 对/ 软件系统/ 中/ 的/ 某/ 一/ 关键环节/ (/ 如/ 属性/ 、/ 行为/ 或/ 结构/ )/ 进行/ 调控/ ./ 例如/ ,/ Fescioglu/ -/ Unver/ 等/ 人/ 通过/ 自动/ 修改/ 某一/ 搜索算法/ 的/ 参数/ 来/ 控制算法/ 的/ 搜索/ 强度/ (/ intensification/ )/ ,/ 使得/ 算法/ 具有/ 适应/ 不同/ 问题/ 结构/ 的/ 适应性/ ./ 而/ Wang/ 等/ 人/ [/ 85/ ]/ 基于/ CPU/ 获得/ 权/ (/ CPUentitilement/ )/ 作为/ 输入/ ,/ 实现/ 对/ 资源/ 分区/ 大小/ 的/ 自动/ 调整/ ./ 总体而言/ ,/ SISO/ 这种/ 类型/ 在/ 较/ 早期/ 相对/ 简单/ 的/ 软件系统/ 使用/ 较/ 多/ ./ 在/ 一些/ 场景/ 中/ ,/ 单入/ 多出/ (/ SIMO/ )/ 和/ 多入/ 单入/ (/ MISO/ )/ 这/ 两种/ 类型/ 也/ 得到/ 了/ 一定/ 程度/ 的/ 应用/ (/ SIMO/ 类型/ 有/ 2/ 篇/ ,/ MISO/ 有篇/ 3/ 文献/ )/ ./ 例如/ ,/ Zhu/ 等/ 研究/ 人员/ 在/ 文献/ [/ 47/ ]/ 中/ 给出/ 了/ 一个/ SIMO/ 的/ 输入输出/ 模型/ :/ 以/ 资源分配/ 量/ (/ allocation/ )/ 作为/ 单个/ 输入/ ,/ 以/ 应用软件/ 性能/ (/ 如/ 响应/ 时间/ 和/ 吞吐量/ )/ 和/ 资源/ 利用/ 量/ 作为/ 输出/ ,/ 这种/ 模型/ 能/ 较/ 好/ 地/ 应对/ 软件系统/ 工作/ 负载/ 的/ 变化/ ;/ 再/ 如/ ,/ Shen/ 等/ 人/ [/ 56/ ]/ 在/ PKUAS/ 平台/ 中/ 发现/ 吞吐量/ (/ throughout/ )/ 受制于/ 另外/ 3/ 个/ 因素/ 即/ 线程/ 数量/ 、/ 实例/ 数量/ 、/ 最大/ 连接数/ 的/ 影响/ ,/ 于是/ 建立/ 以/ 线程/ 数量/ 、/ 实例/ 数量/ 、/ 最大/ 连接数/ 作为/ 输入/ 、/ 吞吐量/ 作为/ 输出/ 的/ MISO/ 调控/ 模型/ ,/ 以/ 解决/ PKUAS/ 的/ 性能/ 优化/ 问题/ ./ SIMO/ 和/ MISO/ 尽管/ 在/ 现实/ 中/ 应用/ 较/ 少/ ,/ 但/ 其/ 仍/ 是/ SISO/ 和/ MIMO/ 两种/ 类型/ 的/ 有益/ 补充/ ./ 6.3/ 理论/ 基础/ 分析/ 本/ 小节/ 旨在/ 弄清/ 现有/ 主流/ 的/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 工作/ 是/ 采用/ 何种/ 控制/ 理论/ 工具/ 并/ 如何/ 进行/ 决策/ 和/ 建模/ 等/ 问题/ ./ 下面/ 分别/ 从/ 自/ 适应/ 决策/ 的/ 数学/ 工具/ 和/ 建模/ 方法/ 这/ 两个/ 方面/ 进行/ 分析/ 和/ 讨论/ ./ 6.3/ ./ 1/ 数学/ 工具/ 分析/ 经典/ 控制/ 、/ 现代/ 控制/ 和/ 智能/ 控制/ 构成/ 了/ 当前/ 控制/ 理论体系/ ./ 经典/ 控制/ 的/ 一般/ 描述语言/ 为/ 微分方程/ ,/ 现代/ 控制/ 理论/ 的/ 一般/ 描述语言/ 为/ 状态/ 空间/ 方程/ ,/ 而/ 智能/ 控制/ 常见/ 的/ 描述语言/ 为/ 模糊/ 逻辑/ 或/ 神经网络/ 等/ ./ 但/ 在/ 本文/ 收集/ 的/ 样本/ 文献/ 中/ ,/ 有/ 部分/ 文献/ 采用/ 了/ 基于/ 马尔可夫/ 链/ 的/ 随机/ 控制/ [/ 55/ ,/ 79/ ]/ ,/ 还有/ 的/ 采用/ 了/ 基/ Page15/ 于/ 自动机/ 的/ 监督控制/ [/ 84/ ,/ 86/ -/ 87/ ]/ ./ 为了/ 简便/ 起/ 见/ ,/ 在/ 借鉴/ 常规/ 控制/ 理论/ 分类/ 方法/ [/ 29/ ]/ 的/ 基础/ 上/ ,/ 我们/ 将/ 随机/ 控制/ 方法/ 归结到/ 现代/ 控制/ 理论/ ,/ 而/ 将/ 基于/ 自动机/ 的/ 离散/ 事件/ 控制/ 归结到/ 智能/ 控制/ 的/ 框架/ 中/ ./ 本文/ 对/ 附表/ 1/ 列出/ 的/ 70/ 篇/ 样本/ 文献/ 进行/ 较为/ 详细/ 的/ 统计/ 和/ 对比/ 分析/ ,/ 如图/ 12/ 所示/ ./ 从图/ 12/ 可以/ 容易/ 地/ 看出/ ,/ 经典/ 控制/ 理论/ 是/ 被/ 最/ 多/ 使用/ 的/ 一类/ 数学/ 工具/ (/ 共有/ 27/ 篇/ 文献/ )/ ./ 其/ 原因/ 在于/ 基于/ 微分方程/ 描述/ 的/ 经典/ 控制/ 理论/ (/ 如/ PID/ 控制/ 等/ )/ 较为简单/ ,/ 且/ 发展/ 得/ 已/ 较为/ 成熟/ ,/ 已/ 为/ 广大/ 软件工程/ 研究/ 人员/ 所/ 知晓/ ./ 例如/ ,/ 在/ Lu/ 等/ 人/ [/ 11/ ]/ 提出/ 的/ 基于/ 反馈/ 控制/ 的/ 自/ 适应/ 实时/ 调度/ 框架/ 中/ ,/ 采用/ 了/ 经典/ PID/ 控制/ 最为/ 简单/ 的/ P/ (/ 比例/ )/ 控制算法/ ,/ 具有/ 计算/ 效率/ 高等/ 优点/ ./ 而/ Lim/ 等/ 人/ [/ 88/ ]/ 在/ 研究/ 了/ 基于/ 自动控制/ 的/ 云/ 计算资源/ 自/ 适应/ 机制/ ,/ 采用/ 了/ PID/ 控制/ 的/ I/ (/ 积分/ )/ 控制算法/ ,/ 能/ 有效/ 消除/ 累积/ 误差/ ,/ 确保/ 了/ 计算资源/ 的/ 调度/ 精度/ ./ 但/ 值得/ 说明/ 的/ 是/ ,/ 经典/ 控制/ 理论/ 假设/ 被控/ 对象/ 是/ 线性/ 的/ ,/ 而/ 现实/ 世界/ 大多/ 软件系统/ 是/ 非线性/ 的/ ,/ 因此/ 对于/ 日益/ 复杂/ 、/ 非线性/ 特征/ 愈加/ 明显/ 的/ 软件系统/ ,/ 单纯/ 的/ 经典/ 控制/ 理论/ 工具/ 已经/ 难以/ 有效/ 解决/ 其自/ 适应/ 问题/ ./ 为了/ 应对/ 软件系统/ 复杂性/ 的/ 增加/ 所/ 带来/ 的/ 自/ 适应/ 决策/ 难度/ 大/ 的/ 挑战/ ./ 能够/ 模拟/ 人类/ 思维/ 方式/ 的/ 智能/ 控制/ 理论/ 开始/ 为/ 软件/ 自/ 适应/ 研究/ 人员/ 所/ 采用/ [/ 76/ ,/ 89/ -/ 90/ ]/ ./ 如图/ 12/ 所示/ ,/ 在/ 本文/ 界定/ 的/ 70/ 篇/ 文献/ 中/ ,/ 基于/ 智能/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 文献/ 数量/ (/ 共有/ 17/ 篇/ )/ 仅次于/ 经典/ 控制/ 理论/ ./ 应用/ 智能/ 控制/ 理论/ 作为/ 自/ 适应/ 决策/ 工具/ 的/ 最大/ 特点/ 在于/ 其/ 无需/ 建立/ 被控/ 软件系统/ 的/ 精确/ 数学模型/ ,/ 从而/ 能/ 在/ 较大/ 程度/ 上/ 屏蔽/ 软件系统/ 自身/ 的/ 复杂性/ ./ 例如/ ,/ 我们/ 前期/ 研究/ 的/ 软件/ 模糊/ 自/ 适应/ 框架/ [/ 76/ ]/ ,/ 采用/ 了/ 模糊控制/ 理论/ 作为/ 自/ 适应/ 决策/ 工具/ ,/ 通过/ 建立/ 近似/ 人类/ 思维/ 的/ 模糊/ 规则/ 来/ 描述/ 软件系统/ 的/ 行为/ 特性/ ,/ 简洁/ 直观/ ,/ 也/ 能/ 较为/ 容易/ 地被/ 自/ 适应/ 软件/ 开发者/ 所/ 理解/ 掌握/ ./ 类似/ 地/ ,/ 文献/ [/ 84/ ,/ 90/ ]/ 等/ 也/ 采用/ 了/ 模糊控制/ 理论/ 作为/ 自/ 适应/ 决策/ 工具/ ./ 另一方面/ ,/ 自动机/ 理论/ 也/ 是/ 支持/ 自/ 适应/ 决策/ 的/ 有效/ 工具/ ./ 如/ Phoha/ 等/ 人/ [/ 86/ ]/ 采用/ 确定/ 有限/ 状态/ 自动机/ 工具/ 构建/ 监督/ 控制器/ ,/ 有效/ 避免/ 了/ 在/ 自/ 适应/ 环/ 实现/ 时/ 对/ 被控/ 软件/ 做/ 结构性/ 修改/ ./ 但/ 自动机/ 理论/ 所/ 固有/ 的/ 状态/ 空间/ 爆炸/ 缺陷/ 仍/ 是/ 影响/ 其/ 应用/ 于/ 复杂/ 软件系统/ 自/ 适应/ 研究/ 的/ 主要/ 障碍/ ./ 现代/ 控制/ 理论/ 多/ 基于/ 状态/ 空间/ 方程/ 来/ 描述/ 自/ 适应/ 逻辑/ 和/ 被控/ 软件/ 对象/ ,/ 相对/ 基于/ 微分方程/ 的/ 经典/ 控制/ 理论/ 难以描述/ 系统/ 内部/ 中间/ 变量/ 而言/ ,/ 基于/ 状态/ 空间/ 方程/ 的/ 现代/ 控制/ 理论/ 能/ 同时/ 确定/ 系统/ 的/ 全部/ 内部/ 运行/ 状态/ ,/ 建立/ 的/ 模型/ 能/ 反映/ 系统/ 的/ 全部/ 独立/ 变量/ 的/ 变化/ ./ 作为/ 一种/ 相对/ 成熟/ 的/ 控制/ 理论/ ,/ 其/ 在/ 软件/ 自/ 适应/ 研究/ 中/ 得到/ 较大/ 范围/ 应用/ [/ 55/ ,/ 78/ ,/ 91/ -/ 92/ ]/ ./ 例如/ ,/ SMART/ 软件/ 自/ 适应/ 框架/ [/ 92/ ]/ 采用/ 标准/ 的/ 线性/ 时/ 不变/ (/ lineartimeinvariant/ )/ 状态/ 模型/ 来/ 预测/ 和/ 控制/ 软件系统/ 的/ 行为/ ./ Kusic/ 等/ 人/ [/ 78/ ]/ 采用/ 了/ 可/ 在/ 离散/ 域/ 高效/ 工作/ 的/ 有限/ 前向/ 控制/ (/ limitedlookaheadcontrol/ )/ 方法/ 作为/ 自/ 适应/ 决策/ 模型/ ,/ 提高/ 了/ 大型/ 虚拟/ 服务器/ 环境/ 资源/ 利用率/ 和/ 能源/ 效率/ ./ 从/ 另/ 一/ 角度看/ ,/ 软件系统/ 在/ 动态/ 开放/ 环境中运行/ 常/ 变现/ 为/ 不确定性/ 和/ 随机性/ ,/ 因此/ ,/ 一些/ 研究/ 人员/ 将/ 软件/ 自/ 适应/ 过程/ 映射/ 为/ 随机/ 过程/ ,/ 并/ 采用/ 基于/ 马尔可夫/ 链/ 的/ 随机/ 控制/ 理论/ 来/ 进行/ 软件/ 自/ 适应/ 决策/ 和/ 建模/ ./ 如/ Filieri/ 等/ 人/ [/ 55/ ]/ 采用/ 离散/ 时间/ 马尔可夫/ 链/ (/ DiscreteTimeMarkovChain/ )/ 来/ 表达/ 基于/ 特定/ 概率/ 的/ 失效/ 状态/ 的/ 迁移/ ,/ 建立/ 软件系统/ 控制/ 模型/ 来/ 以/ 持续/ 满足/ 多变/ 环境/ 下/ 的/ 软件/ 需求/ ./ 现代/ 控制/ 理论/ 在/ 软件/ 自/ 适应/ 中/ 应用/ 面临/ 的/ 主要/ 弱点/ 是/ 状态/ 空间/ 方程/ 的/ 计算/ 复杂性/ 和/ 难/ 理解/ 性/ ,/ 导致/ 缺乏/ 控制/ 理论/ 基础/ 的/ 自/ 适应/ 软件/ 开发者/ 常常/ 难以/ 理解/ 这/ 类/ 理论/ 和/ 方法/ ./ 6.3/ ./ 2/ 建模/ 方法/ 分析/ 在/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 中/ ,/ 被/ 调整/ 软件系统/ 也/ 常常/ 需要/ 建立/ 精确/ 的/ 数学模型/ ,/ 白盒/ 和/ 黑盒/ 作为/ 系统/ 建模/ 常用/ 的/ 方法/ ,/ 在/ 软件/ 自/ 适应/ 建模/ 中/ 得到/ 了/ 广泛应用/ ,/ 详见/ 附表/ 1/ ./ 白盒/ 法/ 从/ 软件系统/ 内在/ 的/ 结构/ 组成/ 和/ 运行/ 机理/ 出发/ ,/ 基于/ 第一性/ 原理/ 建立/ 软件系统/ 的/ 数学模型/ ;/ 而/ 黑盒/ 法从/ 软件系统/ 外/ 在/ 的/ 输入输出/ 和/ 表象/ 行为/ 出发/ ,/ 运用/ 系统/ 辨识/ 等/ 工具/ 建立/ 软件系统/ 的/ 数学模型/ ./ 图/ 13/ 是/ 对/ 附表/ 1/ 列出/ 的/ 文献/ 按照/ 黑盒/ 和/ 白盒/ 进行/ 统计/ 对比/ 的/ 结果/ ./ 从图/ 13/ 可以/ 看出/ ,/ 基于/ 黑盒/ 法/ 的/ 软件/ 自/ 适应/ 研究/ 文献/ 数量/ 明显/ 多于/ 白盒/ 法/ (/ 黑盒/ 法有/ 46/ 篇/ ,/ 白盒/ Page16/ 图/ 13/ 采用/ 黑盒/ 和/ 白盒/ 方法/ 的/ 文献/ 数量/ 对比/ 法有/ 14/ 篇/ )/ ,/ 占/ 绝大多数/ ./ 其/ 根本原因/ 在于/ 软件/ 作为/ 一种/ 特殊/ 而/ 复杂/ 的/ 非线性/ 系统/ ,/ 采用/ 第一性/ 原理/ 分析/ 和/ 建立/ 能够/ 反映/ 其内/ 在/ 运行/ 机理/ 的/ 白盒/ 数学模型/ 是/ 非常/ 困难/ 的/ ,/ 因此/ 黑盒/ 法/ 被/ 大量/ 采用/ ./ 控制/ 领域/ 的/ 系统/ 辨识/ 方法/ 是/ 对/ 软件系统/ 进行/ 黑盒/ 建模/ 的/ 基本/ 工具/ ./ 例如/ ,/ Padala/ 等/ 人/ [/ 45/ ]/ 首先/ 建立/ 实验/ 环境/ 获得/ 虚拟机/ 软件系统/ 的/ 输入/ 和/ 输出/ 数据/ 样本/ 集/ ,/ 而后/ 通过/ 系统/ 辨识/ 法/ 建立/ 系统/ 近似/ 模型/ ,/ 并/ 设计/ 了/ 自/ 适应/ 控制器/ ./ Lu/ 等/ 人/ [/ 51/ ]/ 在/ 研究/ 基于/ 反馈/ 控制/ 的/ 自/ 适应/ Web/ 服务器/ 架构/ 时/ ,/ 应用/ 最小/ 平方/ 估计/ (/ leastsquaresestimator/ )/ 方法/ 估算/ 出差/ 分/ 方程/ 的/ 参数值/ ,/ 从而/ 建立/ 被控/ 软件系统/ 模型/ ./ 类似/ 地/ ,/ 文献/ [/ 92/ ]/ 也/ 采用/ 最小/ 平方/ 系统/ 辨识/ 法/ 建立/ 软件系统/ 的/ 近似/ 模型/ ,/ 并/ 将/ 该/ 模型/ 作为/ 逆/ 模型/ 作为/ 控制器/ 来/ 预测/ 系统/ 可能/ 出现/ 的/ 资源/ 瓶颈/ ./ 黑盒/ 法/ 应用/ 于/ 软件系统/ 难以/ 直接/ 分析/ 和/ 建模/ 的/ 场景/ 中/ ,/ 但/ 黑盒/ 法所/ 建立/ 的/ 往往/ 只是/ 系统/ 的/ 近似/ 线性/ 模型/ ,/ 因此/ 当其/ 用于/ 对外部/ 扰动/ 频繁/ 、/ 内部/ 非线性/ 时变/ 特征/ 明显/ 等/ 系统/ 建模/ 时/ ,/ 所/ 建/ 模型/ 将/ 与/ 系统/ 真实/ 模型/ 偏差/ 较大/ ./ 白盒/ 法/ 在/ 软件/ 自/ 适应/ 建模/ 中/ 也/ 占有/ 一小部分/ 比例/ ./ 白盒/ 法/ 最/ 显著/ 的/ 优点/ 在于/ 其/ 能够/ 建立/ 反映/ 被控/ 软件/ 对象/ 内在/ 机理/ 的/ 精确/ 模型/ ,/ 其/ 适用/ 于/ 那些/ 相对/ 简单/ 和/ 运行/ 规律性/ 较/ 明显/ 的/ 软件系统/ ./ 例如/ ,/ Kreidl/ 等/ 人/ [/ 53/ ]/ 结合/ 自/ 防御/ 网络安全/ 系统/ 运行/ 特点/ ,/ 运用/ 部分/ 可/ 观测/ 马尔可夫/ 决策/ 过程/ (/ partially/ -/ ObservableMarkovDecisionProcess/ )/ 建立/ 了/ 系统/ 自/ 防御/ 控制/ 过程/ 模型/ ./ Kamra/ 等/ 人/ [/ 79/ ]/ 将/ Web/ 服务器/ 抽象/ 为/ 处理器/ 共享/ 队列/ (/ ProcessorSharingqueue/ )/ ,/ 并/ 采用/ 排队/ 论/ 等/ 工具/ 建立/ 系统/ 模型/ ,/ 使得/ 软件/ 自/ 适应/ PI/ 控制器/ 具有/ 自整定/ 能力/ ./ 软件工程/ 领域/ 的/ 形式语言/ 也/ 是/ 对/ 被控/ 软件/ 进行/ 白盒/ 建模/ 的/ 有效/ 工具/ ,/ 如/ Weyns/ 等/ 人/ [/ 59/ ]/ 建立/ 了/ 基于/ Z/ 语言/ 描述/ 的/ 软件/ 自/ 适应/ 模型/ FORMS/ ,/ Zhang/ 等/ 人/ [/ 60/ ]/ 综合/ 采用/ 线性/ 时态/ 逻辑/ (/ LTL/ )/ 和/ Petri/ 网来/ 对/ 软件系统/ 进行/ 建模/ 与/ 分析/ ./ 白盒/ 建模/ 法/ 的/ 一个/ 重要/ 缺陷/ 在于/ 其/ 需要/ 对/ 软件系统/ 内在/ 规律/ 有/ 清晰/ 、/ 详尽/ 的/ 认识/ 和/ 理解/ ,/ 这/ 无形中/ 加重/ 了/ 软件/ 开发者/ 的/ 负担/ ./ 随着/ 当前/ 软件系统/ 规模/ 不断/ 增大/ 、/ 复杂度/ 日益/ 增加/ ,/ 白盒/ 法/ 在/ 现实/ 世界/ 的/ 应用/ 将会/ 面临/ 更/ 多/ 挑战/ ./ 6.4/ 开发方法/ 分析/ 按照/ 5.2/ 节/ 提出/ 的/ 分类/ 标准/ ,/ 本文/ 提出/ 的/ 开发方法/ 这一/ 标准/ 主要/ 关注/ 需求/ 分析/ 、/ 设计/ 实现/ 、/ 辅助工具/ 这/ 3/ 个/ 方面/ ,/ 旨在/ 弄清/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 在/ 此/ 3/ 个/ 维度/ 上/ 的/ 现状/ ./ 对照/ 需求/ 分析/ 、/ 设计/ 实现/ 和/ 辅助工具/ 这/ 3/ 个/ 维度/ ,/ 我们/ 对/ 附表/ 1/ 列出/ 的/ 70/ 篇/ 文献/ 进行/ 了/ 分类/ 和/ 汇总/ ,/ 形成/ 图/ 14/ 所示/ 的/ 对比/ 图/ ./ 图/ 14/ 在/ 开发方法/ 3/ 个/ 维度/ 上/ 的/ 文献/ 数量/ 对比/ 从图/ 14/ 可以/ 看出/ ,/ 总体而言/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 在/ 开发方法/ 上/ 研究/ 的/ 还/ 缺乏/ 深入/ 性/ 和/ 系统性/ ./ 例如/ ,/ 在/ 70/ 篇/ 文献/ 中/ ,/ 虽然/ 关注/ 设计/ 实现/ 的/ 文献/ 数量/ 最/ 多/ ,/ 共有/ 33/ 篇/ 文献/ ,/ 但/ 仍/ 不到/ 总/ 数量/ 的/ 一半/ ./ 而/ 从/ 同一/ 平面/ 上/ 看/ ,/ 对/ 需求/ 分析/ 、/ 设计/ 实现/ 和/ 辅助工具/ 的/ 研究/ 也/ 不/ 均衡/ ,/ 参差不齐/ ,/ 系统性/ 不强/ ./ 6.4/ ./ 1/ 需求/ 方面/ 的/ 研究/ 现状/ 分析/ 从/ 需求/ 分析/ 这一/ 维度/ 来看/ ,/ 本文/ 试图/ 发现/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 特有/ 的/ 需求/ 分析方法/ ,/ 以及/ 寻找/ 能够/ 运用/ 控制/ 理论/ 改进/ 软件/ 自/ 适应/ 需求/ 分析/ 的/ 方法/ ./ 例如/ ,/ Angelopoulos/ 等/ 人/ [/ 75/ ]/ 在/ 提出/ 基于/ 控制/ 理论/ 的/ 自/ 适应/ 框架/ 中/ ,/ 首先/ 基于/ 分析/ 层级/ 过程/ (/ AnalyticHierarchyProcess/ ,/ AHP/ )/ 工具/ 建立/ 自/ 适应/ 需求/ 目标/ 模型/ ,/ 为/ 后续/ 基于/ 控制/ 理论/ 的/ 自/ 适应/ 机制/ 设计/ 奠定/ 了/ 基础/ ./ Han/ 等/ 人/ [/ 82/ ]/ 还/ 专门/ 开发/ 了/ 面向/ 软件/ 模糊/ 自/ 适应/ 的/ 需求/ 分析/ 与/ 建模/ UML/ 工具/ FuzzyCase/ ./ 而/ 在/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 需求/ 分析方法/ 的/ 改进/ 方面/ ,/ Souza/ 等/ 人/ [/ 68/ ]/ 采用/ 经典/ 控制/ 理/ Page17/ 论/ 的/ PID/ 控制/ 思想/ 建立/ 了/ 一套/ 独特/ 的/ 自/ 适应/ 需求/ 描述语言/ AwReqs/ ,/ 其/ 基于/ PID/ 控制/ 思想/ 被/ 分为/ 常规/ (/ Regular/ )/ 、/ 聚合/ (/ Aggregate/ )/ 、/ 趋势/ (/ Trend/ )/ 、/ 变化/ (/ Delta/ )/ 等/ 类型/ ,/ 其中/ 常规/ 型/ 需求/ 语言/ 模式/ 对应/ 于/ PID/ 的/ P/ (/ Proportional/ ,/ 比例/ )/ 部分/ ,/ 聚合/ 语言/ 模式/ 对应/ PID/ 中/ 的/ I/ (/ Integral/ ,/ 积分/ )/ ,/ 而/ 趋势/ 和/ 变化/ 语言/ 模式/ 对于/ PID/ 中/ 的/ D/ (/ Differential/ )/ 部分/ ./ 通过/ 巧妙/ 而/ 合理/ 利用/ PID/ 思想/ ,/ AwReqs/ 需求/ 描述语言/ 能够/ 在/ 系统/ 运行/ 时/ 即时/ 汇集/ 过去/ 状态/ 、/ 实时/ 感知/ 现在/ 状态/ 和/ 及时/ 预测/ 未来/ 状态/ 趋势/ ./ 国内/ 刘春/ 等/ 人/ [/ 73/ ]/ 也/ 提出/ 了/ 基于/ 反馈/ 控制/ 的/ 自/ 适应/ 需求/ 识别/ 与/ 分析方法/ ,/ 将/ 环境/ 作为/ 软件/ 的/ 控制/ 对象/ ,/ 通过/ 建立/ 环境/ 感知/ 反馈/ 回路/ 和/ 需求/ 感知/ 反馈/ 回路/ 来/ 分别/ 应对/ 已知/ 和/ 未知/ 的/ 环境/ 变化/ ./ 但/ 从/ 收集/ 的/ 文献/ 样本/ 来看/ ,/ 现有/ 工作/ 关于/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 需求/ 分析/ 方面/ 的/ 研究/ 还/ 很少/ (/ 只/ 发现/ 4/ 篇/ 相关/ 文献/ )/ ,/ 而且/ 还/ 不够/ 深入/ ./ 6.4/ ./ 2/ 设计/ 与/ 实现/ 方面/ 的/ 研究/ 现状/ 分析/ 从/ 设计/ 与/ 实现/ 这一/ 维度/ 看/ ,/ 已经/ 有/ 一定/ 数量/ 的/ 文献/ 开始/ 关注/ 软件/ 自/ 适应/ 的/ 设计/ 实现/ 问题/ ./ 其中/ ,/ 属于/ 前/ 文/ 划分/ 的/ 简单/ 反馈/ 型/ 这类/ 软件/ 自/ 适应/ 研究/ 文献/ 由于/ 直接/ 采用/ 了/ 软件工程/ 的/ 技术/ 方法/ ,/ 其/ 在/ 设计/ 和/ 实现/ 方面/ 的/ 研究/ 更为/ 完善/ 和/ 深入/ ,/ 而/ 反射/ 和/ AOP/ 则/ 是/ 其/ 最/ 经常/ 使用/ 的/ 两种/ 技术/ ./ 如/ Dawson/ 等/ 人/ [/ 61/ ]/ 采用/ 反射/ 技术/ 研究/ 了/ 自/ 适应/ 系统/ 监测/ 机制/ 的/ 实现/ 问题/ ,/ 给出/ 了/ 基于/ Java/ 反射/ 的/ 自/ 适应/ 观测器/ 实现/ 方法/ ./ Janik/ 和/ Zielinski/ [/ 93/ ]/ 提出/ 了/ 可/ 适应/ 面向/ 方面/ 编程/ 框架/ AAOP/ (/ AdaptableAOP/ )/ ,/ 并/ 利用/ 这一/ 框架/ 给出/ 了/ 基于/ 感知器/ (/ sensors/ )/ 、/ 效应器/ (/ effectors/ )/ 和/ 目标/ 方面/ (/ goalaspects/ )/ 的/ 自/ 适应/ 软件/ 实现/ 模型/ ./ 另一方面/ ,/ 等效/ 映射/ 型/ 这类/ 研究/ 工作/ 在/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 构造/ 机制/ 方面/ 已有/ 若干/ 有/ 意义/ 的/ 成果/ ,/ 主要/ 关注/ 自/ 适应/ 控制器/ 的/ 核心/ 实现/ ./ 例如/ ,/ Diao/ 等/ 人/ [/ 43/ ]/ 结合/ 具体/ 示例/ ,/ 部分/ 地/ 给出/ 了/ 一种/ 通过/ 限制/ 应用程序/ 的/ 执行/ 来/ 减少/ 性能/ 影响/ 的/ “/ 油门/ 调节/ ”/ 程序/ 参考模型/ ./ Abdelzaher/ 等/ 人/ [/ 48/ ]/ 给出/ 了/ 一种/ adhoc/ 的/ 实现/ 方法/ ,/ 将/ 性能/ 确保/ 自/ 适应/ 软件/ 实现/ 为/ 中间件/ 形式/ ,/ 并/ 将/ 关键/ 功能/ 行为/ 以/ API/ 接口/ 的/ 形式/ 供/ web/ 服务器软件/ 设施/ 等/ 调用/ ,/ 还/ 给出/ 了/ 负载/ 监视器/ 、/ 利用率/ 控制器/ 的/ 实现/ 方法/ ./ Zhang/ 等/ 人/ [/ 74/ ]/ 给出/ 了/ 较为/ 系统/ 的/ 基于/ ControlWare/ 的/ 自/ 适应/ QoS/ 开发/ 方法学/ ,/ 包括/ 基于/ 契约/ 描述语言/ (/ contractdescriptionlanguage/ )/ 的/ QoS/ 需求/ 规格/ 定义/ 、/ 基于/ 拓扑/ 描述语言/ 的/ (/ topologydescriptionlanguage/ )/ 的/ QoS/ 至/ 控制/ 环/ 的/ 映射/ 、/ 控制/ 环/ 组合/ 、/ 系统/ 辨识/ 、/ 控制器/ 配置/ 和/ 整定/ 等/ 关键环节/ ,/ 其是/ 我们/ 发现/ 的/ 在/ 设计/ 与/ 实现/ 方面/ 最为/ 完善/ 的/ 研究/ 工作/ ./ 但/ 总体而言/ ,/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 方法/ 在/ 设计/ 和/ 实现/ 层面/ 大多/ 为/ 针对/ 某一/ 具体/ 案例/ 或/ 问题/ 的/ 算法/ 设计/ 与/ 编程/ 等/ adhoc/ 方法/ ,/ 依然/ 在/ 通用化/ 的/ 程序设计/ 模型/ 和/ 软件/ 构造/ 实现/ 方法/ 缺乏/ 系统性/ 研究/ ./ 6.4/ ./ 3/ 支撑/ 工具/ 方面/ 的/ 研究/ 现状/ 分析/ 支撑/ 工具/ 能/ 辅助/ 软件/ 工程师/ 采用/ 控制/ 理论/ 方法/ 进行/ 软件/ 自/ 适应/ 自动化/ 或/ 半自动化/ 的/ 开发/ ,/ 从而/ 不/ 要求/ 软件/ 工程师/ 具有/ 较/ 深/ 的/ 控制/ 理论知识/ 背景/ ,/ 其能/ 减小/ 劳动强度/ ,/ 提高/ 开发/ 效率/ ./ 软件/ 自/ 适应/ 的/ 支撑/ 工具/ 是/ 对/ 自/ 适应/ 概念/ 框架/ 、/ 理论/ 基础/ 、/ 设计/ 与/ 实现/ 技术/ 等/ 进一步/ 向/ 软件/ 具体/ 实现/ 上/ 的/ 延伸/ ,/ 也就是说/ 其/ 常常/ 依附于/ 某/ 一种/ 软件/ 自/ 适应/ 的/ 概念/ 框架/ 和/ 设计/ 实现/ 技术/ ./ 就/ 现有/ 工作/ 而言/ ,/ 简单/ 反馈/ 型/ 这/ 一类/ 研究/ 工作/ 由于/ 植根于/ 软件工程/ 技术/ ,/ 所/ 提供/ 的/ 支撑/ 工具/ 也/ 最为/ 完善/ ,/ 但/ 由于/ 其/ 研究/ 内容/ 的/ 主体/ 已经/ 与/ 基于/ 控制/ 理论/ 的/ 方法/ 偏离/ 较/ 远/ ,/ 这里/ 仅/ 讨论/ 几种/ 代表性/ 支撑/ 工具/ ./ 如/ IBM/ 为了/ 支持/ MAPE/ -/ K/ 自治/ 计算/ 概念模型/ 的/ 开发/ ,/ 研制/ 了/ AutonomicComputingToolkit/ (/ ACT/ )/ ①/ ,/ 提供/ 了/ 控制台/ 和/ 工具/ 来/ 帮助/ 问题/ 诊断/ 和/ 工程化/ 开发/ 自治/ 计算/ 系统/ ./ Rainbow/ 框架/ 提供/ 了/ 集成化/ 的/ 开发/ 环境/ RAIDE/ [/ 22/ ]/ ,/ 包括/ 运行库/ 、/ Stitch/ 自/ 适应/ 语言/ 脚本/ 编辑/ 、/ 控制台/ 等/ 组件/ ,/ 具有/ 自/ 适应/ 逻辑/ 的/ 可视化/ 编辑/ 和/ 自动化/ 部署/ 等/ 能力/ ./ KX/ 自/ 适应/ 框架/ 也/ 提供/ 了/ 一套/ 成熟/ 的/ 工具包/ 来/ 支持/ 遗留/ 软件系统/ 的/ 自/ 适应能力/ 构建/ ,/ 包括/ Worklet/ [/ 65/ ]/ 等/ 构件/ ./ 而/ 在/ 等效/ 映射/ 型/ 等/ 研究/ 工作/ 中/ ,/ 部分/ 学者/ 提出/ 并/ 研制/ 了/ 实用性/ 强/ 的/ 支撑/ 工具/ ./ 如/ Diao/ 等/ 人/ [/ 43/ ]/ 提出/ 一种/ DTAC/ (/ DeployableTestbedforAutonomicComputing/ )/ 支撑/ 工具/ 以/ 减少/ 应用/ 控制/ 理论/ 到/ 计算/ 系统/ 中/ 的/ 障碍/ ,/ 提供/ 可/ 插拔/ 构件/ 和/ 工作/ 负载/ 模拟/ 等/ 设施/ ./ 而/ ControlWare/ [/ 74/ ]/ 是/ 功能完善/ 的/ 一种/ 软件/ 服务/ 自/ 适应/ 支撑/ 工具/ ,/ 其/ 提供/ 了/ 契约/ 描述语言/ CDL/ 、/ 拓扑/ 描述语言/ TDL/ 等/ 语言/ 设施/ ,/ 软件/ 工程师/ 能/ 容易/ 地/ 添加/ 自适应性/ 能/ 确保/ 能力/ 到/ 软件系统/ 中/ ,/ 而/ 不/ 需/ 具有/ 控制/ 工程师/ 的/ 背景/ ./ 经过/ Bhat/ 等/ 人/ [/ 81/ ]/ 扩展/ ①/ IBMdeveloperWorks/ ./ Autonomiccomputingtoolkit/ ./ http/ :/ // // Page18/ 的/ Accord/ 工具/ [/ 94/ ]/ 应该/ 提供/ 了/ 较为/ 完善/ 的/ 基于/ 有限/ 预测/ 控制/ 的/ 软件/ 自/ 适应/ 开发/ 功能/ 和/ 设施/ ./ 综上/ 而言/ ,/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 在/ 自动化/ 支撑/ 工具/ 方面/ 仍然/ 缺乏/ ,/ 特别/ 是/ 能/ 在/ 软件工程/ 实践/ 中/ 广泛应用/ 的/ 工具/ 更为/ 少见/ ,/ 难以/ 全面/ 地/ 满足/ 没有/ 控制/ 理论/ 背景/ 的/ 软件/ 工程师/ 的/ 需求/ ./ 6.5/ 评价/ 验证/ 方法/ 分析/ 如何/ 对/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 进行/ 合理/ 有效/ 的/ 评价/ 和/ 验证/ 也/ 是/ 本文/ 关注/ 的/ 重要/ 内容/ ./ 一般/ 地/ ,/ 形式/ 证明/ 、/ 案例/ 实验/ 和/ 模拟/ 仿真/ 是/ 进行/ 评价/ 验证/ 的/ 3/ 种/ 主要/ 方法/ ./ 我们/ 对/ 附表/ 1/ 列出/ 的/ 70/ 篇/ 文献/ 按照/ 这/ 3/ 种/ 方法/ 进行/ 了/ 梳理/ 和/ 归纳/ ,/ 采用/ 不同/ 评价/ 验证/ 方法/ 的/ 文献/ 数量/ 对/ 比如/ 图/ 15/ 所示/ ./ 图/ 15/ 采用/ 不同/ 评价/ 验证/ 方法/ 的/ 文献/ 数量/ 对比/ 结合/ 图/ 15/ 我们/ 可以/ 看出/ ,/ 案例/ 实验/ 是/ 基于/ 控制/ 理论/ 的/ 自/ 适应/ 研究/ 人员/ 最为/ 常用/ 的/ 一种/ 评价/ 方法/ (/ 共有/ 57/ 篇/ 文献/ )/ ./ 而/ 形式/ 证明/ 由于/ 其/ 理论/ 建模/ 和/ 证明/ 过程/ 的/ 复杂性/ 、/ 模拟/ 仿真/ 由于/ 其/ 缺乏/ 真实性/ 等/ ,/ 它们/ 通常/ 较少/ 为/ 研究/ 人员/ 所/ 使用/ (/ 采用/ 形式/ 证明/ 方法/ 的/ 文献/ 有/ 8/ 篇/ ,/ 采用/ 模拟/ 仿真/ 方法/ 的/ 文献/ 有/ 3/ 篇/ )/ ./ 但/ 无论是/ 案例/ 实验/ 还是/ 形式/ 证明/ 和/ 模拟/ 仿真/ ,/ 其实质/ 上/ 主要/ 是/ 基于/ 稳定性/ 等/ 反馈/ 控制系统/ 指标/ 来/ 开展/ 自/ 适应/ 系统/ 的/ 性能/ 评估/ 验证/ 等/ 研究/ 工作/ ./ 也就是说/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 工作/ 多/ 借用/ 控制/ 领域/ 的/ 如下/ 评价/ 指标/ 来/ 评估/ 软件/ 自/ 适应/ 动态/ 过程/ :/ 即/ 稳定性/ (/ Stability/ )/ 、/ 准确性/ (/ Accuracy/ )/ 或/ 稳态/ 误差/ (/ Steady/ -/ stateerror/ )/ 、/ 调整/ 时间/ (/ Settlingtime/ )/ 和/ 超/ 调量/ (/ Overshoot/ )/ ./ Hellerstein/ 和/ Diao/ 等/ 人/ [/ 28/ ,/ 43/ ]/ 将/ 这些/ 指标/ 统称/ 为/ SASO/ 指标/ ./ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 的/ 案例/ 实验/ 一般/ 结合/ 数据中心/ 、/ 虚拟/ 计算环境/ 等/ 运行/ 平台/ 开展/ 软件/ 反馈/ 控制/ 性能/ 的/ 评估/ ./ 如/ Diao/ 等/ 人/ [/ 42/ -/ 43/ ]/ 、/ Hellerstein/ 等/ 人/ [/ 28/ ]/ 主要/ 基于/ IBM/ 的/ DB2/ 等/ 数据管理/ 计算/ 平台/ 开展/ 实验/ ,/ 用于/ 评价/ 自/ 适应/ 系统/ 的/ 稳态/ 误差/ 、/ 调整/ 时间/ 等/ 指标/ ./ 而/ Zhu/ 等/ 人/ [/ 44/ ,/ 47/ ]/ 、/ Wang/ 等/ 人/ [/ 85/ ]/ 多/ 基于/ HP/ 的/ 虚拟/ 计算环境/ 开展/ 实验/ 来/ 验证/ 系统/ 的/ QoS/ 等/ 性能指标/ ./ Lu/ 等/ 人/ [/ 11/ ,/ 50/ -/ 52/ ]/ 、/ Wang/ 等/ 人/ [/ 95/ ]/ 、/ Abdelzaher/ 等/ 人/ [/ 49/ ]/ 等/ 多/ 基于/ 实时/ 系统资源/ 调度/ 环境/ 等/ 设计/ 实验/ ,/ 来/ 评价/ 验证/ QoS/ 性能/ 确保/ 指标/ ./ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 形式/ 证明/ 一般/ 采用/ 控制/ 理论/ 的/ 稳定性/ 判据/ 等/ 方法/ 来/ 证明/ 分析/ 软件/ 反馈/ 控制/ 回路/ 的/ 稳定性/ ./ 例如/ ,/ Lu/ 等/ 人/ [/ 51/ ]/ 在/ 其/ 提出/ 的/ EUCON/ 研究/ 框架/ 中/ ,/ 提出/ 了/ 一种/ 分析/ 自/ 适应/ 分布式/ 实时/ 嵌入式/ 系统/ 稳定性/ 的/ 通用/ 方法/ ,/ 并/ 认为/ 在/ 一个/ 稳定/ 的/ 分布式/ 实时/ 嵌入/ 系统/ 中/ ,/ 每个/ CPU/ 的/ 利用率/ 都/ 逼近/ 于/ 其/ 设定值/ (/ Setpoint/ )/ ./ Parekh/ 等/ 人/ [/ 69/ ]/ 运用/ 经典/ 控制/ 理论/ 的/ 根/ 轨迹/ 等/ 方法/ 分析/ 了/ IBM/ 的/ LotusNotesServer/ 系统/ 的/ 服务/ 级/ 目标/ 自/ 适应/ 确保/ 系统/ 的/ 动态/ 性能/ ,/ 并/ 能/ 预测/ 系统/ 在/ 动态/ 自/ 适应/ 响应/ 过程/ 中/ 由/ 控制器/ 所/ 衍生/ 的/ 震荡/ 现象/ 的/ 出现/ 与否/ ./ Li/ 等/ 人/ [/ 88/ ]/ 还/ 引入/ 自/ 适应/ 灵敏度/ (/ AdaptationAgility/ )/ 的/ 概念/ ,/ 用来/ 评价/ 自/ 适应/ 系统/ 逼近/ 或/ 达到目标/ 过程/ 中/ 快速/ 响应/ 变化/ 的/ 精确性/ 和/ 速度/ ./ 而/ 就/ 模拟/ 仿真/ 方法/ 而言/ ,/ 通过/ 对/ 现有/ 研究/ 文献/ 进行/ 分析/ 发现/ ,/ 其/ 很少/ 单独/ 使用/ ,/ 一般/ 与/ 案例/ 实验/ 或/ 形式/ 证明/ 等/ 方法/ 联合/ 使用/ ./ 例如/ ,/ Lu/ 等/ 人/ [/ 11/ ]/ 在/ 研究/ 实时/ 系统资源/ 自/ 适应/ 调度/ 时/ 首先/ 基于/ 稳定/ 判据/ 证明/ 了/ 控制器/ 的/ 稳定性/ ,/ 而后/ 通过/ 实时/ 仿真器/ FECSIM/ 对/ 多种/ 自/ 适应/ 调度/ 算法/ 进行/ 了/ 评估/ 分析/ ,/ 他们/ 还/ 在/ 文献/ [/ 50/ ]/ 中/ 基于/ Matlab/ 仿真/ 平台/ 分析/ 了/ 所/ 提出/ 的/ EUCON/ 控制算法/ 的/ 性能/ ./ 此外/ ,/ 我们/ 在/ 早期/ 的/ 研究/ 工作/ 中/ [/ 96/ ]/ ,/ 为了/ 验证/ 初步/ 设想/ ,/ 结合/ 运行/ 案例/ ,/ 也/ 采用/ 了/ Matlab/ 仿真/ 环境/ 对/ 基于/ 模糊控制/ 的/ 自/ 适应/ 算法/ 开展/ 了/ 仿真/ 实验/ ./ 总体/ 来说/ ,/ 尽管/ 现有/ 的/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 过程/ 评估/ 与/ 验证/ 已经/ 开展/ 大量/ 研究/ 工作/ ,/ 但/ 其/ 更/ 多/ 采用/ 了/ 线性/ 或/ 近似/ 线性/ 的/ 方法/ ,/ 其/ 对于/ 运行/ 于/ 动态/ 、/ 开放/ 、/ 多变/ 环境/ 下/ 的/ 更/ 多/ 呈现/ 为/ 非线性/ 特征/ 开始/ 暴露出/ 不足/ ./ 因此/ ,/ 如何/ 对/ 具有/ 非线性/ 的/ 软件/ 自/ 适应/ 动态/ 过程/ 进行/ 有效/ 评价/ 和/ 分析/ 仍/ 是/ 一个/ 尚未/ 被/ 很/ 好/ 解决/ 的/ 问题/ ./ 7/ 研究/ 存在/ 的/ 不足/ 与/ 未来/ 趋势/ 展望/ 本/ 节/ 主要/ 讨论/ 当前/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 存在/ 的/ 主要/ 不足/ ,/ 并/ 展望未来/ 发展趋势/ ,/ 以/ 回答/ RQ3/ 问题/ ./ Page197/ ./ 1/ 现有/ 研究/ 存在/ 的/ 不足/ 过去/ 20/ 多年/ 来/ ,/ 人们/ 围绕/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 概念/ 框架/ 、/ 理论/ 基础/ 、/ 开发方法/ 、/ 评价/ 分析/ 等/ 方面/ 开展/ 了/ 较为/ 有效/ 的/ 研究/ ,/ 并/ 使得/ 控制/ 理论/ 的/ 方法/ 正/ 逐步/ 为/ 软件工程/ 领域/ 所/ 接受/ ./ 但/ 基于/ 前文/ 对/ 研究/ 现状/ 的/ 调查/ 和/ 分析/ 来看/ ,/ 无论是/ 在/ 其/ 理论/ 和/ 技术/ 的/ 成熟性/ 还是/ 在/ 面向/ 现实/ 世界/ 工程/ 应用/ 等/ 方面/ ,/ 当前/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 与/ 实践/ 仍/ 面临/ 挑战/ ,/ 主要/ 表现/ 在/ 如下/ 几个/ 方面/ :/ (/ 1/ )/ 难以/ 建立/ 具有/ 非线性/ 特征/ 的/ 软件系统/ 精确/ 模型/ 软件系统/ 内部/ 的/ 运行/ 状态/ 和/ 作用/ 关系/ 是/ 非线性/ 的/ ,/ 这/ 使得/ 对/ 软件系统/ 的/ 状态/ 和/ 行为/ 难以/ 线性/ 地/ 精确/ 建模/ [/ 80/ ]/ ,/ 从而/ 为/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 带来/ 困难/ ./ 但/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 方法/ 多/ 假设/ 软件系统/ 为/ 线性系统/ ,/ 并/ 采用/ 经典/ 的/ 线性/ 控制/ 理论/ 如/ PID/ 等/ 来/ 研究/ [/ 11/ ,/ 43/ ,/ 50/ ]/ ,/ 显然/ 会/ 导致/ 研究/ 结果/ 与/ 真实/ 结果/ 存在/ 较大/ 偏差/ ./ 而/ 随着/ 软件系统/ 的/ 复杂性/ 日益/ 增加/ ,/ 非线性/ 特点/ 更加/ 明显/ ,/ 则/ 传统/ 线性/ 控制/ 理论/ 将/ 更加/ 难以/ 直接/ 应用/ 到/ 软件/ 自/ 适应/ 研究/ 中来/ ./ (/ 2/ )/ 过于/ 强调/ 控制策略/ 的/ 设计/ 现有/ 基于/ 控制/ 理论/ 的/ 方法/ 大多/ 简单/ 地/ 把/ 软件系统/ 当作/ 黑盒/ 处理/ (/ 前/ 文/ 统计/ 结果表明/ 黑盒/ 法占/ 77/ %/ )/ ,/ 过于/ 强调/ 对/ 控制/ 律/ 的/ 设计/ ,/ 缺乏/ 面向/ 软件工程/ 领域/ 的/ 软件/ 方法/ 和/ 软件工具/ 的/ 研究/ ./ 而/ 另一方面/ ,/ 软件/ 自/ 适应/ 的/ 开发者/ 多/ 来自/ 于/ 计算机/ 学科/ ,/ 对/ 控制/ 理论/ 知之甚少/ ,/ 因而/ ,/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 方法/ 极易/ 在/ 控制工程/ 和/ 软件工程/ 之间/ 形成/ 语义/ 和/ 知识/ 的/ 鸿沟/ ,/ 且/ 难以/ 为/ 软件工程/ 领域/ 所/ 理解/ 和/ 接受/ ./ (/ 3/ )/ 缺少/ 对/ 软件/ 自/ 适应/ 不确定性/ 的/ 处理/ 和/ 考虑/ 软件系统/ 运行/ 于/ 开放/ 、/ 动态/ 、/ 难控/ 的/ 环境/ 之下/ ,/ 从/ 软件/ 内部/ 看/ ,/ 当前/ 软件/ 自身/ 所/ 呈现/ 的/ 分布式/ 特点/ 增大/ 了/ 信息/ 更新/ 、/ 处理/ 、/ 发布/ 的/ 不确定性/ [/ 97/ ]/ ,/ 而/ 从/ 外部/ 看/ 软件/ 又/ 常/ 面对/ 突发/ 、/ 不/ 确定/ 的/ 需求/ ,/ 这/ 就/ 使得/ 软件/ 自/ 适应/ 过程/ 不可避免/ 地/ 存在/ 不确定性/ ./ 如何/ 有效/ 地/ 管理软件/ 自/ 适应/ 中/ 的/ 不确定性/ ,/ 已/ 成为/ 软件/ 自/ 适应/ 研究/ 中/ 的/ 重要/ 开放/ 问题/ 之一/ [/ 5/ ,/ 98/ -/ 104/ ]/ ./ Yang/ 等/ 人/ [/ 76/ ,/ 96/ ,/ 105/ ]/ 深入/ 论证/ 了/ 软件/ 自/ 适应/ 环中/ 的/ 不确定性/ 常常/ 表现/ 为/ 模糊性/ ,/ 如/ 环境/ 模糊性/ 、/ 需求/ 模糊性/ 和/ 内部/ 模糊性/ 等/ ./ 当前/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 大多/ 采用/ 经典/ 控制/ 理论/ 和/ 现代/ 控制/ 理论/ 等/ 线性/ 理论/ 来/ 应对/ 变化/ 和/ 进行/ 自/ 适应/ 决策/ ,/ 并/ 采用/ 第一/ 原理/ 或/ 系统/ 辨识/ 的/ 方法/ 来/ 试图/ 建立/ 软件系统/ 的/ 数学模型/ ./ 但/ 这些/ 方法/ 有效/ 使用/ 的/ 前提/ 是/ 软件系统/ 是/ 可知/ 可测/ 的/ (/ 如/ 第一/ 原理/ 法/ )/ 或/ 系统/ 中/ 不确定性/ 微不足道/ 、/ 可以/ 忽略/ (/ 如/ 系统/ 辨识/ 法/ )/ ,/ 因而/ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 难以/ 直接/ 而/ 有效/ 地/ 处理/ 自/ 适应/ 过程/ 中/ 存在/ 的/ 干扰/ 和/ 不确定性/ 及/ 模糊性/ ;/ 虽然/ 有/ 部分/ 工作/ 采用/ 了/ 模糊控制/ 理论/ (/ 如/ 文献/ [/ 90/ ,/ 106/ -/ 107/ ]/ )/ ,/ 但/ 其/ 不是/ 从/ 解决/ 自/ 适应/ 模糊性/ 问题/ 的/ 角度/ 出发/ 的/ ,/ 而是/ 将/ 其/ 作为/ 一种/ 易用/ 的/ 控制/ 手段/ ./ (/ 4/ )/ 缺少/ 有效/ 的/ 软件/ 方法学/ 研究/ 和/ 提炼/ 当前/ 大多/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 仍/ 单纯/ 地/ 将/ 软件系统/ 作为/ 受控对象/ ,/ 采用/ 的/ 是/ “/ 将/ 控制/ 理论/ 应用/ 到/ 软件工程/ 领域/ ”/ 的/ 研究/ 思路/ ,/ 缺少/ 有效/ 的/ 侧重/ 对/ 面向/ 软件/ 自/ 适应/ 的/ 基于/ 控制/ 理论/ 的/ 软件/ 方法/ 的/ 研究/ 和/ 提炼/ [/ 51/ ,/ 53/ ,/ 71/ -/ 72/ ,/ 79/ ]/ ,/ 从而/ 导致/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 难以/ 让/ 软件/ 工程师/ 理解/ 和/ 掌握/ ./ 因此/ ,/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 不能/ 仅仅/ 是/ 控制/ 理论/ 简单/ 地/ 在/ 软件工程/ 领域/ 的/ 应用/ ,/ 更要/ 注重/ 控制/ 理论/ 与/ 软件/ 方法/ 的/ 深度/ 融合/ ,/ 要/ 形成/ 软件开发/ 技术/ 和/ 支撑/ 工具/ ,/ 以利于/ 对/ 控制/ 理论/ 不是/ 很/ 精通/ 的/ 软件/ 工程师/ 能/ 较为/ 容易/ 地/ 掌握/ 这种/ 自/ 适应/ 软件开发/ 风范/ ./ 7.2/ 研究/ 展望/ 基于/ 上述/ 研究进展/ 和/ 研究/ 问题/ ,/ 本文/ 认为/ ,/ 未来/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 研究/ 与/ 应用/ 需要/ 重点/ 解决/ 以下/ 问题/ :/ ①/ 系统性/ 的/ 软件/ 方法学/ 问题/ ./ 现有/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 仍/ 将/ 研究/ 重点/ 放在/ 了/ 控制器/ 和/ 控制/ 律/ 的/ 设计/ 上/ ,/ 难以/ 满足/ 软件/ 工程师/ 的/ 开发/ 需求/ ,/ 需要/ 深入研究/ 面向/ 软件工程/ 领域/ 的/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 基础/ 模型/ 、/ 需求/ 分析方法/ 、/ 程序设计/ 技术/ 等/ ,/ 形成/ 基于/ 控制/ 理论/ 的/ 系统性/ 软件/ 方法学/ ;/ ②/ 软件/ 自/ 适应/ 过程/ 复杂性/ 和/ 不确定性/ 的/ 处理/ 及/ 驾驭/ 问题/ ./ 需要/ 研究/ 相应/ 的/ 软件/ 自/ 适应/ 过程/ 不确定性/ 处理/ 和/ 复杂性/ 管理/ 技术/ 和/ 方法/ ;/ ③/ 工程化/ 问题/ ./ 需要/ 研究/ 从/ 工程化/ 开发/ 的/ 角度/ 更多地/ 借鉴/ 软件工程/ 领域/ 的/ 原理/ 和/ 原则/ 以及/ 成功/ 的/ 经验/ ,/ 从而/ 为/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 大规模/ 应用/ 与/ 实践/ 提供/ 更为/ 友好/ 、/ 高效/ 的/ 支持/ ,/ 如/ 支撑/ 系统/ 、/ UML/ 建模/ 工具/ 等/ ./ 具体/ 而言/ ,/ 上述/ 问题/ 可/ 进一步/ 分解/ 为/ 如下/ 方面/ :/ (/ 1/ )/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 软件/ 模型/ 与/ 软件/ 方法/ ./ 一种/ 软件/ 范型/ 或/ 方法/ 只有/ 让/ 软件/ 开发者/ 所/ 能/ 轻易/ 地/ 理解/ 和/ 掌握/ 才能/ 具有/ 生命力/ ./ 当前/ 基于/ 控制/ 理/ Page20/ 论/ 的/ 软件/ 自/ 适应/ 方法/ 多/ 将/ 研究/ 重点/ 置于/ 控制/ 理论/ 这/ 一侧/ ,/ 缺少/ 面向/ 软件工程/ 领域/ 的/ “/ 软件/ 化/ ”/ 模型/ 与/ 方法/ ,/ 难以/ 让/ 缺少/ 控制/ 理论/ 背景/ 的/ 软件/ 开发者/ 所/ 理解/ 和/ 掌握/ ,/ 为/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 方法/ 进一步/ 实践/ 和/ 应用/ 造成/ 了/ 很大/ 障碍/ ./ 因此/ ,/ 需要/ 从/ 不同/ 层面/ 来/ 研究/ 基于/ 控制/ 理论/ 的/ 自/ 适应/ 方法/ 的/ “/ 软件/ 化/ ”/ 问题/ ./ 首先/ ,/ 从/ 软件/ 模型/ 层面/ 进行/ 研究/ ,/ 即/ 研究/ 控制/ 理论/ 作用/ 下/ 的/ 自/ 适应/ 软件系统/ 的/ 体系结构/ 、/ 内部/ 组成/ 、/ 各/ 要素/ 功能/ 、/ 它们/ 之间/ 的/ 相互作用/ 关系/ 等/ ;/ 其次/ ,/ 从/ 软件/ 方法/ 层面/ 进行/ 研究/ ,/ 即/ 研究/ 基于/ 控制/ 理论/ 的/ 自/ 适应/ 软件系统/ 构造方法/ 、/ 设计/ 技术/ 、/ 实现/ 机理/ 等/ ./ (/ 2/ )/ 软件/ 自/ 适应/ 动态/ 过程/ 分析/ 与/ 评价/ 前文/ 已/ 讨论/ ,/ 软件/ 自/ 适应/ 过程/ 是/ 不断/ 趋向/ 自/ 适应/ 目标/ 的/ 动态/ 过程/ ,/ 这一/ 动态/ 过程/ 可能/ 呈现出/ 收敛/ 、/ 振荡/ 和/ 发散/ 等/ 现象/ ./ 而/ 软件/ 自/ 适应/ 过程/ 中/ 的/ 状态/ 摆动/ (/ state/ -/ flapping/ )/ 可能/ 会/ 抵消/ 受控/ 软件/ 对象/ 的/ 优化/ 操作/ [/ 108/ ]/ ./ 目前/ 软件/ 自/ 适应/ 的/ 研究/ 工作/ 多/ 将/ 重点/ 放在/ 自/ 适应/ 系统/ 设计/ 与/ 构造/ 、/ 自/ 适应/ 推理/ 与/ 决策/ 等/ 方面/ ,/ 即/ 关注/ 于/ 自/ 适应/ 的/ “/ before/ ”/ 阶段/ (/ 即/ 如何/ 设计/ 和/ 构造/ 自/ 适应/ 软件系统/ )/ ,/ 而/ 缺少/ 对/ 自/ 适应/ 的/ “/ during/ ”/ 阶段/ (/ 即/ 自/ 适应/ 过程/ )/ 的/ 研究/ ./ 而/ Lemos/ 等/ 也/ 认为/ 应该/ 研究/ 自/ 适应/ 软件/ 运行/ 时/ V/ &/ V/ 验证/ (/ run/ -/ timeVerificationandValidation/ )/ 技术/ [/ 109/ ]/ ./ 尽管/ 有/ 一些/ 学者/ 引入/ 控制/ 理论/ 的/ 若干/ 指标/ ,/ 如/ 稳态/ 误差/ 、/ 稳定/ 时间/ 等/ ,/ 来/ 对/ 软件/ 自/ 适应/ 动态/ 过程/ 来/ 进行/ 分析/ 和/ 评估/ ,/ 但/ 缺乏/ 系统性/ ,/ 且/ 没有/ 考虑/ 到/ 软件系统/ 自身/ 的/ 特点/ ./ 因此/ ,/ 需要/ 借鉴/ 控制/ 理论/ 的/ 若干/ 思想/ ,/ 并/ 结合/ 软件系统/ 的/ 自身/ 特点/ ,/ 从/ 以下/ 几个/ 方面/ 来/ 研究/ 软件/ 自/ 适应/ 动态/ 过程/ 分析/ 与/ 评价/ 问题/ :/ 其一/ ,/ 研究/ 建立/ 符合/ 软件/ 特点/ 的/ 软件/ 自/ 适应/ 动态分析/ 与/ 评价/ 的/ 指标体系/ ;/ 其二/ ,/ 研究/ 软件/ 自/ 适应/ 动态分析/ 与/ 评价/ 技术/ ;/ 第三/ ,/ 研究/ 确保/ 软件/ 自/ 适应/ 动态/ 过程/ 收敛/ 或/ 稳定性/ 的/ 技术/ 与/ 方法/ ./ (/ 3/ )/ 应对/ 软件/ 自/ 适应/ 不确定性/ 与/ 模糊性/ 上节/ 已/ 讨论/ ,/ 如何/ 有效/ 地/ 管理/ 和/ 处理软件/ 自/ 适应/ 中/ 的/ 不确定性/ 和/ 模糊性/ ,/ 是/ 软件/ 自/ 适应/ 研究/ 中/ 的/ 重要/ 问题/ 之一/ ,/ 需要/ 对/ 这/ 一/ 问题/ 开展/ 深入研究/ ,/ 具体/ 为/ :/ 如何/ 表达/ 和/ 描述/ 软件/ 自/ 适应/ 中/ 的/ 不确定性/ 和/ 模糊性/ ,/ 如何/ 感知/ 含有/ 不确定性/ 和/ 模糊性/ 的/ 信息/ ,/ 如何/ 基于/ 不确定性/ 或/ 模糊性/ 的/ 信息/ 进行/ 自/ 适应/ 决策/ ,/ 如何/ 将/ 含有/ 不确定性/ 和/ 模糊性/ 的/ 推理/ 结论/ 作用/ 到/ 受控/ 的/ 软件系统/ 上/ 等/ ./ 笔者/ 借鉴/ 模糊控制/ 思想/ 在/ 应对/ 软件/ 自/ 适应/ 模糊性/ 等/ 方面/ 也/ 进行/ 了/ 初步/ 的/ 研究/ 和/ 探索/ [/ 76/ ,/ 96/ ,/ 105/ ]/ ./ (/ 4/ )/ 多环/ 协作/ 软件/ 自/ 适应/ 软件/ 自/ 适应/ 是/ 在/ “/ 感知/ -/ 评价/ -/ 施动/ ”/ 自/ 适应/ 环/ 驱动/ 下/ 的/ 一种/ 过程/ ./ 现有/ 很多/ 软件/ 自/ 适应/ 的/ 研究/ 工作/ 主要/ 采用/ 单一/ 集中式/ 的/ 自/ 适应/ 环/ (/ 如/ 文献/ [/ 15/ ,/ 19/ ,/ 21/ ,/ 39/ ,/ 43/ ]/ )/ 来/ 管理/ 软件系统/ ./ 但/ 随着/ 受控/ 软件系统/ 规模/ 不断/ 增大/ ,/ 单一/ 自/ 适应/ 环/ 已经/ 难以/ 满足/ 复杂/ 软件系统/ 的/ 管理/ 需求/ ,/ 开始/ 出现/ 了/ 多个/ 自/ 适应/ 环/ 共同/ 作用/ 下/ 的/ 软件/ 自/ 适应/ 研究/ (/ 如/ 文献/ [/ 58/ ,/ 75/ ,/ 101/ ,/ 110/ -/ 111/ ]/ )/ ./ 多个/ 自/ 适应/ 环/ 引入/ 到/ 软件系统/ 中/ 显然/ 增加/ 了/ 其/ 应对/ 多重/ 变化/ 的/ 能力/ ,/ 但/ 如何/ 让/ 多个/ 自/ 适应/ 环/ 进行/ 合理/ 的/ 组织/ 、/ 交互/ 并/ 有效/ 协作/ 、/ 协同/ 确保/ 系统/ 级/ 质量/ 目标/ 是/ 需要/ 解决/ 的/ 重要/ 问题/ [/ 109/ ]/ ./ 借鉴/ 控制/ 理论/ 的/ 集散/ 控制/ (/ 或/ 分层/ 递阶控制/ )/ 思想/ ,/ 可能/ 为/ 解决/ 多环/ 协作/ 提供/ 一种/ 途径/ ,/ 但/ 如何/ 面向/ 软件系统/ 设计/ 相应/ 的/ 协调控制/ 自/ 适应/ 环/ 、/ 局部/ 控制/ 自/ 适应/ 环/ 以及/ 这/ 两种/ 自/ 适应/ 环/ 之间/ 如何/ 进行/ 信息/ 共享/ 和/ 交互/ 等/ 问题/ 仍/ 需要/ 深入研究/ 解决/ ./ (/ 5/ )/ 人机/ 协同/ 软件/ 自/ 适应控制/ 理论/ 的/ 长期实践/ 经验/ 告诉/ 我们/ ,/ 一个/ 完全/ 没有/ 人/ 参与/ 的/ 自动/ 控制系统/ 是/ 不/ 现实/ 的/ ,/ 复杂/ 系统/ 的/ 控制/ 和/ 管理/ 需要/ 人工控制/ 方式/ 和/ 机器/ 自动控制/ 方式/ 的/ 协同/ 作用/ ./ 而/ 对于/ 开放/ 、/ 动态/ 、/ 多变/ 环境/ 下/ 的/ 软件系统/ 而言/ ,/ 实现/ 有人/ 干预/ 的/ 自/ 适应/ 即/ 人机/ 协同/ 软件/ 自/ 适应/ 应该/ 是/ 一种/ 较为/ 现实/ 的/ 解决方案/ ,/ 因此/ 研究/ 人/ 如何/ 与/ 软件/ 自/ 适应/ 逻辑/ 协同工作/ 从而/ 实现/ 高质/ 、/ 高效/ 的/ 自/ 适应能力/ 是/ 一个/ 非常/ 重要/ 的/ 问题/ ,/ 这一/ 问题/ 可分解/ 为/ 如下/ 方面/ :/ 在/ 什么/ 条件/ 下/ 需要/ 人来/ 控制/ 干预/ 、/ 什么/ 条件/ 下/ 需要/ 自/ 适应/ 环来/ 控制/ ?/ 人/ 和/ 自/ 适应/ 环/ 相互间/ 的/ 控制/ 作用/ 如何/ 无扰/ 切换/ ?/ 人工控制/ 和/ 自/ 适应/ 环控制/ 该/ 如何/ 进行/ 协同/ 、/ 协调/ ?/ 等等/ ./ (/ 6/ )/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 支撑/ 工具/ 软件工程/ 的/ 历史/ 经验/ 表明/ ,/ 一套/ 有效/ 的/ 软件/ 方法/ 和/ 技术/ 必须/ 要/ 有/ 相应/ 的/ 可视化/ 、/ 自动化/ 工具/ 作/ 支撑/ 才能/ 获得/ 广泛/ 的/ 应用/ ./ 较之/ 常规/ 软件开发/ 过程/ ,/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 开发/ 需要/ 一定/ 的/ 控制/ 理论知识/ ,/ 具有/ 一定/ 的/ 复杂性/ ,/ 这/ 对于/ 软件/ 开发人员/ 来说/ 仍然/ 是/ 一件/ 较为/ 困难/ 的/ 事/ ,/ 因而/ 需要/ 有/ 相应/ 的/ 软件/ 支撑/ 系统/ 来/ 支持/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 开发/ ,/ 减轻/ 软件/ 开发人员/ 负担/ ./ 这种/ 支撑/ 工具/ 应该/ 能/ 较/ 好地解决/ 如下/ 问题/ :/ 如何/ 有效/ 地/ 屏蔽/ 控制/ 理论/ 的/ 技术细节/ ,/ 让/ 软件/ 工程师/ 轻松/ 使用/ ?/ 如何/ 可视化/ 支持软件/ 自/ 适应/ 逻辑/ 的/ 编辑/ 和/ 测试/ ?/ 如何/ 能够/ 自动化/ 地/ 生成/ 自/ 适应/ 逻辑/ 的/ 可执行程序/ 代码/ 转化/ ?/ 等等/ ./ Page218/ 结论/ 随着/ 软件系统/ 的/ 日趋/ 复杂/ 及其/ 面临/ 的/ 外部/ 因素/ (/ 环境/ 及/ 需求/ )/ 变化/ 日益频繁/ ,/ 需要/ 有/ 一种/ 机制/ 来/ 应对/ 这些/ 挑战/ ,/ 让/ 软件/ 具备/ 自/ 适应能力/ 从而/ 形成/ 自/ 适应/ 软件/ 已/ 成为/ 软件工程/ 领域/ 的/ 研究/ 热点/ ./ 而/ 近年来/ ,/ 采用/ 控制/ 理论/ 来/ 研究/ 软件/ 自/ 适应/ 问题/ 已/ 成为/ 当前/ 研究/ 的/ 一种/ 重要/ 风范/ ./ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 核心思想/ 是/ 将/ 软件系统/ 作为/ 被控/ 对象/ ,/ 依据/ 控制/ 领域/ 的/ 反馈/ 机制/ 和/ 控制/ 律/ ,/ 来/ 感知/ 软件/ 运行/ 状态/ 及其/ 环境/ 变化/ 、/ 按照/ 需求/ 约束/ 调控/ 软件系统/ 性能/ 和/ 行为/ ./ 本文/ 讨论/ 了/ 软件/ 自/ 适应/ 的/ 基本概念/ ,/ 研究/ 分析/ 了/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 基本/ 思想/ ;/ 在/ 定义/ 了/ 综述/ 分类/ 框架/ 基础/ 上/ ,/ 讨论/ 分析/ 了/ 基于/ 控制/ 理论/ 的/ 软件/ 自/ 适应/ 的/ 研究/ 现状/ ;/ 最后/ ,/ 指出/ 了/ 当前/ 研究/ 存在/ 的/ 若干/ 不足/ ,/ 并/ 展望/ 了/ 未来/ 研究/ 趋势/ ./ 虽然/ 控制/ 理论/ 已/ 在/ 软件/ 自/ 适应/ 研究/ 中/ 得到/ 了/ 较为/ 广泛/ 的/ 应用/ 并/ 取得/ 了/ 明显/ 的/ 进展/ ,/ 但/ 在/ 研究/ 的/ 深入/ 性/ 、/ 系统性/ 等/ 方面/ 仍然/ 存在/ 很大/ 发展/ 空间/ ,/ 而/ 如何/ 把/ 控制工程/ 与/ 软件工程/ 二者之间/ 更为/ 合理/ 和/ 有效/ 地/ 融合/ 将/ 是/ 未来/ 研究/ 的/ 重要/ 方向/ ./ 致谢/ 感谢/ 南京大学/ 软件/ 新/ 技术/ 国家/ 重点/ 实验室/ 计算机软件/ 研究所/ 许畅/ 副教授/ 、/ 黄宇/ 副教授/ 在/ 本文/ 撰写/ 过程/ 中/ 给予/ 的/ 指导/ 与/ 帮助/ ,/ 感谢/ 审稿人/ 对/ 本文/ 提出/ 的/ 宝贵意见/ 和/ 建议/ !/ 

