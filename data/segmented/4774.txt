Page1/ 一种/ 改进/ 的/ 基于/ BSP/ 的/ 大图/ 计算/ 模型/ 赵翔/ 1/ )/ ,/ 2/ )/ 李博/ 1/ )/ 商海/ 川/ 3/ )/ 肖卫东/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 国防科学技术大学/ 信息系统/ 与/ 管理/ 学院/ 长沙/ 410073/ )/ 2/ )/ (/ 地球空间/ 信息技术/ 协同/ 创新/ 中心/ 武汉/ 430079/ )/ 3/ )/ (/ 东京大学/ 工业/ 科学/ 研究院/ 东京/ 日本/ 153/ -/ 8505/ )/ 摘要/ 伴随/ 大/ 数据/ 的/ 涌现/ ,/ 云/ 存储/ 和/ 计算技术/ 近年/ 得到/ 长足发展/ ./ 图/ 数据/ 是/ 一种/ 重要/ 而/ 普遍/ 的/ 大/ 数据/ ,/ 在/ 生物/ 信息学/ 、/ 社会/ 网络/ 、/ 化学/ 信息学/ 等/ 领域/ 都/ 有/ 众多/ 应用/ ./ 因此/ ,/ 大图/ 计算/ 作为/ 大/ 数据分析/ 应用/ 的/ 典型/ 代表/ ,/ 正/ 成为/ 云端/ 负载/ 的/ 重要/ 组成部分/ ./ 目前/ ,/ 高/ 可扩展性/ 的/ 图/ 计算/ 主要/ 依赖于/ 高性能/ 计算/ 解决方案/ ,/ 需要/ 进行/ 环状/ (/ 或/ 网状/ )/ 计算机网络/ 之上/ 的/ 高效/ 全/ 集合/ 通信/ ./ 然而/ ,/ 在/ 通用/ 计算/ 集群/ 和/ 云/ 计算/ 基础设施/ 上/ 实现/ 基于/ 环状/ 计算机网络/ 的/ 算法/ 时/ ,/ 低效/ 的/ 网络通信/ 将/ 导致/ 巨大/ 的/ 系统/ 延迟/ ./ 因此/ ,/ 这/ 就/ 要求/ 那些/ 基于/ 云端/ 的/ 大/ 数据/ 计算/ 平台/ 和/ 系统/ 具备/ 十分/ 良好/ 的/ 水平/ 可扩展性/ ./ 但是/ ,/ 大图/ 的/ 幂律/ 分布/ 和/ 缺乏/ 局部性/ 使得/ 设计/ 一套/ 高度/ 可/ 扩展/ 的/ 大图/ 计算/ 系统/ 变得/ 更具/ 挑战/ ./ 为此/ ,/ 文中/ 提出/ 了/ 一种/ 面向/ 通用/ 计算/ 集群/ 的/ 可/ 扩展/ 大图/ 计算/ 模型/ ./ 专注/ 于/ 水平/ 扩展/ 能力/ ,/ 设计/ 了/ 一种/ 新颖/ 的/ 基于/ 分离器/ -/ 合并/ 器/ BSP/ 的/ 图/ 计算方法/ ,/ 能够/ 提供/ 原生/ 的/ 负载平衡/ ,/ 仅/ 需/ 很/ 低/ 的/ 通信/ 开销/ ./ 从而/ ,/ 图/ 数据/ 规模/ 的/ 增大/ 可以/ 通过/ 增加/ 计算/ 节点/ 数量/ 得以/ 解决/ ./ 最后/ ,/ 在/ 一个/ 图/ 数据/ 通用/ 测试/ 集上/ ,/ 通过/ 大量/ 实验/ 验证/ 了/ 所/ 提/ 模型/ 和/ 方法/ 的/ 有效性/ 和/ 高效性/ ;/ 结果显示/ ,/ 相比/ 经典/ 的/ 以/ 顶点/ 为/ 中心/ 的/ BSP/ 大图/ 计算/ 模型/ 和/ 其他/ 主流/ 大图/ 计算/ 系统/ ,/ 所提/ 改进/ 的/ 基于/ BSP/ 的/ 大图/ 计算/ 模型/ 能够/ 提供/ 更好/ 的/ 水平/ 可扩展性/ ./ 关键词/ BSP/ 模型/ ;/ 大图/ ;/ 水平/ 扩展/ 能力/ ;/ 图/ 分割/ ;/ 通用/ 集群/ 1/ 引言/ 后/ 信息时代/ ,/ 数据/ 爆炸式/ 增长/ 使大/ 数据分析/ 应用/ 相关/ 的/ 研究/ 俨然/ 成为/ 业界/ 的/ 一个/ 关注/ 重点/ ,/ 期望/ 给/ 种类/ 繁多/ 的/ 海量/ 数据量/ 身/ 打造/ 专有/ 的/ 并行计算/ 平台/ 与/ 服务/ ./ 此类/ 计算/ 的/ 广泛应用/ 亦/ 改变/ 了/ 可/ 扩展/ 并行计算/ 研究/ 的/ 现状/ ./ 此前/ ,/ 大规模/ 计算/ 主要/ 依靠/ 高性能/ 计算/ (/ highperformancecomputing/ )/ 技术/ 实现/ 大规模/ 数据处理/ 与/ 分析/ ;/ 现在/ ,/ 业界/ 则/ 逐渐/ 将/ 目光/ 转向/ 了/ 性价比/ 更/ 高/ 的/ 大/ 数据/ 计算/ 平台/ ./ 大/ 数据/ 计算/ 平台/ 和/ 高性能/ 计算/ 平台/ 的/ 主要/ 区别/ 在于/ :/ (/ 1/ )/ 大/ 数据/ 计算/ 平台/ 依赖/ 通用/ 计算机/ 群/ (/ commoditycomputingcluster/ )/ 的/ 存储/ 和/ 计算/ 基础设施/ ;/ (/ 2/ )/ 云/ 计算/ 的/ 效用/ 模型/ 使得/ 计算资源/ 可以/ 由/ 用户/ 按/ 需/ 定义/ ./ 正是/ 因为/ 这两点/ 显著/ 区别/ ,/ 就/ 要求/ 那些/ 基于/ 云端/ 的/ 大/ 数据/ 计算/ 平台/ 和/ 系统/ 具备/ 良好/ 的/ 水平/ 扩展/ 能力/ ./ 作为/ 最/ 流行/ 的/ 数据/ 密集型/ 应用/ 之一/ ,/ 包括/ 社会/ 网络/ 在内/ 的/ 大图/ 计算/ 正/ 亟需/ 一套/ 高效/ 且/ 可/ 扩展/ 的/ 解决方案/ ./ 然而/ ,/ 目前/ 主流/ 的/ 大/ 数据/ 计算/ 框架/ MapReduce/ 以及/ 相关/ 技术/ (/ Pig/ 和/ Hive/ 等/ )/ 却/ 无法/ 很/ 好/ 地/ 胜任/ 大规模/ 图/ 数据/ 上/ 的/ 迭代/ 计算/ ./ 因此/ ,/ 若干/ 大图/ 并行计算/ 模型/ 应运而生/ ,/ 有/ 的/ 面向/ 大/ 数据/ 计算/ 平台/ ,/ 有/ 的/ 则/ 基于/ 高性能/ 计算技术/ [/ 1/ ]/ ./ 不同/ 的/ 计算/ 模型/ ,/ 意味着/ 不同/ 的/ 通信/ 网络/ 要求/ 以及/ 不同/ 的/ 图/ 划分/ 方法/ ./ 所谓/ 大图/ 计算/ 的/ 图/ 划分/ 任务/ ,/ 即将/ 大图/ G/ 的/ 顶点/ 和/ 边/ 分成/ 若干个/ 部分/ ,/ 分布式/ 存储/ 在/ 参与/ 大图/ 计算/ 的/ 工作者/ (/ workers/ )/ 上/ ./ 根据/ 图/ 划分/ 方法/ 的/ 不同/ ,/ 可/ 将/ 已有/ 大图/ 计算/ 模型/ 和/ 系统/ 分为/ 两类/ :/ (/ 1/ )/ 一维/ 划分/ ./ 根据/ 顶点/ 出边/ (/ out/ -/ goingedges/ )/ 对/ 顶点/ 进行/ 划分/ ,/ 主要/ 以/ Pregel/ [/ 2/ ]/ 为/ 代表/ ./ Pregel/ 是/ 一种/ 基于/ 以/ 顶点/ 为/ 中心/ (/ vertex/ -/ centric/ )/ 的/ BSP/ [/ 3/ ]/ (/ bulksynchronizationparallel/ )/ 模型/ 设计/ 的/ 大图/ 计算/ 框架/ ./ Pregel/ 计算/ 框架/ 的/ 主要/ 优势/ 在于/ 能够/ 衍生/ 一系列/ 简单/ 易用/ 的/ 编程/ 接口/ ,/ 降低/ 分布式/ 大图/ 算法/ 实现/ 所/ 需/ 的/ 人力/ 和/ 时间/ ,/ 毕竟/ 让/ 企业/ IT/ 部门/ 开发/ 优化/ 完善/ 的/ 原生/ 代码/ (/ nativecode/ )/ 是/ 不/ 现实/ 的/ ./ 但是/ ,/ 真实世界/ 的/ 图/ 多数/ 服从/ 幂律/ 分布/ [/ 4/ -/ 5/ ]/ ,/ 即/ 超过/ 80/ %/ 的/ 绝大多数/ 顶点/ 只有/ 少量/ 的/ 边/ ,/ 但/ 极少数/ 顶点/ 却/ 拥有/ 极多/ 的/ 边/ ./ 在/ 分布式/ 处理/ 这/ 类/ 网络/ 时/ ,/ 负责/ 高度/ 数/ 顶点/ 的/ 工作者/ 相比/ 其他/ 工作者/ 需要/ 消耗/ 更长/ 的/ 时间/ ,/ 进而/ 延长/ 了/ 系统/ 的/ 整体/ 响应/ 时间/ ./ 因此/ ,/ 基于/ 一维/ 划分/ 的/ 并行计算/ 模型/ 缺乏/ 面向/ 计算/ 节点/ 数量/ 的/ 良好/ 的/ 水平/ 扩展/ 能力/ ;/ 换言之/ ,/ 由于/ 处理/ 最高/ 度数/ 顶点/ 的/ 工作者/ 所/ 需/ 的/ 处理/ 时间/ 决定/ 了/ 系统/ 的/ 响应/ 时间/ ,/ 那么/ 增加/ 集群/ 中/ 的/ 计算/ 节点/ 的/ 数量/ 将/ 无法/ 进一步/ 降低/ 整个/ 系统/ 的/ 响应/ 时间/ ./ (/ 2/ )/ 二维/ 划分/ ./ 其中/ 每个/ 顶点/ 都/ 由/ 一组/ 计算/ 节点/ 进行/ 管理/ ./ 每/ 一步/ 在/ 同/ 一组/ 中/ 的/ 计算/ 节点/ 通过/ 相互/ 通信/ 对/ 接收/ 到/ 的/ 消息/ 进行/ 聚合/ ,/ 然后/ 通过/ 出边/ 向/ 其他/ 组/ 发送/ 消息/ ,/ 供下/ 一步/ 计算/ 使用/ ./ 同组/ 顶点/ 的/ 通信/ 由/ AllReduce/ 或/ AllGather/ 方法/ 实现/ [/ 6/ -/ 7/ ]/ ,/ 这/ 类/ 操作/ 在/ 提供/ 可扩展性/ 的/ 同时/ ,/ 通常/ 要求/ 特殊/ 的/ 高性能/ 计算环境/ ,/ 譬如/ 网状/ 计算机/ 通信/ 网络/ 等/ ./ Graph500/ 基准/ 测试/ ①/ 说明/ ,/ 基于/ 高性能/ 计算技术/ 的/ 并行算法/ 可以/ 水平/ 扩展/ 到/ 6/ 万余个/ 计算/ 节点/ ,/ 但/ 这类/ 方法/ 的/ 缺点/ 亦/ 显而易见/ —/ —/ —/ 巨大/ 的/ 网络通信/ 开销/ ./ 诸如/ AllReduce/ 和/ AllGather/ 等行/ // 列/ 集合/ 通信/ (/ collec/ -/ tivecommunication/ )/ 方法/ 的/ 高效/ 实现/ 是/ 保证/ 高性能/ 和/ 高/ 可扩展性/ 的/ 关键/ [/ 8/ -/ 9/ ]/ ,/ 而/ 它们/ 都/ 强烈/ 依赖于/ 高效/ 但/ 昂贵/ 的/ 集合/ 通信/ 操作/ ./ 此外/ ,/ 实现/ 基于/ 二维/ 划分/ 的/ 图/ 算法/ 需要/ 更/ 多/ 的/ 人力/ 和/ 时间/ ,/ 这/ 违背/ 了/ 大/ 数据/ 分/ ①/ Thegraph500list/ :/ http/ :/ // // www/ ./ graph500/ ./ org/ // Page3/ 析/ 应用/ 所/ 追求/ 的/ 简单/ 易用/ 的/ 理念/ ./ 方案/ ,/ 总结/ 如表/ 1/ 所示/ ./ 综上/ ,/ 当前/ 大图/ 计算/ 系统/ 可/ 采用/ 如下/ 3/ 种/ 实现/ 1D/ (/ Commodity/ )/ / 2D/ (/ Commodity/ )/ / 2D/ (/ HPC/ )/ (/ 1/ )/ 基于/ MapReduce/ 或/ 以/ 顶点/ 为/ 中心/ 的/ BSP/ 模型/ ,/ 譬如/ Hadoop/ 平台/ 上/ 的/ ApacheGiraph/ ①/ 和/ Spark/ 平台/ 上/ 的/ GraphX/ ②/ ./ 这种/ 方案/ 易于/ 实现/ ,/ 但/ 不能/ 很/ 好/ 地/ 处理/ 真实世界/ 中/ 服从/ 幂律/ 分布/ 的/ 大型/ 网络/ ;/ (/ 2/ )/ 基于/ 高性能/ 计算技术/ ./ 这种/ 方案/ 能够/ 提供/ 良好/ 的/ 系统/ 性能/ ,/ 但是/ 需要/ 配备/ 高级/ 通信/ 网络/ 的/ 昂贵/ HPC/ 集群/ ;/ (/ 3/ )/ 在/ 通用/ 计算/ 集群/ 上/ 实现/ 集合/ 通信/ 操作/ ,/ 如/ PowerGraph/ [/ 10/ ]/ ./ 这种/ 方案/ 可/ 在/ 小规模/ 集群/ 上/ 缓解/ 幂律/ 分布/ 带来/ 的/ 问题/ ,/ 但是/ 在/ 大规模/ 集群/ 上/ 集合/ 通信/ 的/ 开销/ 问题/ 依旧/ 严重/ ,/ 可能/ 急剧/ 降低/ 系统/ 处理/ 大型/ 网络/ 的/ 性能/ ./ 通过/ 上述/ 综合/ 与/ 分析/ ,/ 认为/ 面向/ 大规模/ 通用/ 计算/ 集群/ 的/ 大图/ 计算/ 模型/ 应/ 解决/ 至少/ 如下/ 3/ 个/ 方面/ 的/ 挑战/ :/ (/ 1/ )/ 幂律/ 分布/ ./ 在/ 处理/ 服从/ 幂律/ 分布图/ 时应/ 尽可能/ 保证/ 负载/ 均衡/ ;/ (/ 2/ )/ 通用/ 计算/ 基础设施/ ./ 不能/ 依赖于/ 昂贵/ 的/ 高级/ 通信/ 网络/ ;/ (/ 3/ )/ 水平/ 扩展/ 能力/ ./ 通过/ 增加/ 计算/ 节点/ 就/ 能/ 提升/ 系统/ 处理/ 更/ 大规模/ 图/ 的/ 能力/ ./ 然而/ ,/ 目前/ 暂无/ 可用/ 的/ 方法/ 能/ 同时/ 满足/ 上述/ 要求/ ./ 鉴于/ 此/ ,/ 文中/ 尝试/ 提出/ 一种/ 基于/ 分离器/ (/ separator/ )/ 和/ 组合/ 器/ (/ combiner/ )/ 的/ BSP/ 大图/ 计算/ 模型/ ,/ 基于/ 该/ 模型/ 设计/ 的/ 大图/ 计算方法/ 能够/ 同时/ 满足/ 上述/ 3/ 个/ 要求/ ./ 此外/ ,/ 该/ 模型/ 还/ 具备/ 下列/ 特点/ :/ (/ 1/ )/ 可/ 无缝/ 集成/ 到/ 包括/ ApacheHadoop/ 在内/ 的/ 所有/ 面向/ 通用/ 计算/ 集群/ 的/ 解决方案/ 中/ ;/ (/ 2/ )/ 处理/ 方法/ 考虑/ 了/ 各种/ 大图/ 计算/ 任务/ 的/ 通用性/ ;/ (/ 3/ )/ 针对/ 服从/ 幂律/ 分布/ 的/ 大型/ 网络/ 具有/ 良好/ 的/ (/ 4/ )/ 通过/ 非/ 集合/ 通信/ 进行/ 同步/ ,/ 降低/ 并发/ 网络/ (/ 5/ )/ 传承/ BSP/ 的/ 一对一/ 通信/ 模式/ ,/ 保证系统/ 的/ 可靠性/ 和/ 容错性/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 工作/ 和/ 背景/ 知识/ ;/ 第/ 3/ 节/ 提出/ 一种/ 改进/ 的/ 大图/ 计算/ 模型/ ,/ 介绍/ 其/ 划分/ 和/ 计算方法/ ;/ 第/ 4/ 节/ 简述/ 系统/ 实现/ ;/ 实验/ 结果/ 及/ 分析/ 在/ 第/ 5/ 通信/ 开销/ 的/ 影响/ ;/ 水平/ 扩展/ 能力/ ;/ 节中/ ;/ 结论/ 和/ 下/ 一步/ 工作/ 计划/ 则/ 放在/ 第/ 6/ 节/ ./ 2/ 相关/ 背景/ 为了/ 不失/ 通用性/ ,/ 文中/ 着重/ 讨论/ 简单/ 有向图/ ,/ 即无环/ 无/ 多重/ 边/ 的/ 有向图/ ./ 其中/ ,/ 顶点/ 可/ 具有/ 出边/ (/ out/ -/ goingedges/ )/ 和/ // 或入/ 边/ (/ in/ -/ comingedges/ )/ ,/ 一个/ 顶点/ 的/ 度数/ (/ 出/ 度/ )/ 等于/ 其出/ 边/ 的/ 数量/ ./ 给定/ 一个/ 顶点/ ,/ 与其/ 出边/ 相连/ 的/ 顶点/ 称为/ 该/ 顶点/ 的/ 外向/ 邻居/ 顶点/ ./ 本节/ 首先/ 简要/ 回顾/ 有关/ 一维/ 划分/ 和/ 二维/ 划分/ 上/ 的/ 大图/ 计算/ 方面/ 的/ 相关/ 工作/ ,/ 关于/ 大图/ 处理/ 系统/ 更加/ 详细/ 的/ 综述/ 和/ 横向/ 实验/ 评价/ ,/ 感兴趣/ 的/ 读者/ 可/ 参考文献/ [/ 11/ -/ 13/ ]/ ./ 它们/ 都/ 很/ 好/ 地/ 总结/ 了/ 当前/ 的/ 研究成果/ ,/ 是/ 了解/ 大图/ 计算/ 系统/ 的/ 重要/ 参考/ ./ 然后/ ,/ 介绍/ 以/ 顶点/ 为/ 中心/ 的/ BSP/ 模型/ ,/ 它/ 是/ 后续/ 章节/ 提出/ 和/ 改进/ 模型/ 的/ 基础/ ./ 2.1/ 一维/ 划分/ 一维/ 划分/ 是/ 分布式/ 环境/ 下/ 最/ 流行/ 的/ 图/ 划分/ 方法/ ./ 顶点/ 依据/ 其出/ 边/ 被/ 划分/ 到/ 不同/ 的/ 工作者/ 上/ ./ 例如/ ,/ 图/ 1/ (/ a/ )/ 和/ 1/ (/ b/ )/ 分别/ 描绘/ 了/ 一个/ 示例/ 图/ 及其/ 划分/ 和/ 对应/ 的/ 分布式/ 邻接/ 表/ ./ 在/ 此例/ 中/ ,/ 示例/ 图/ 的/ 顶点/ 被/ 划分/ 成/ 3/ 组/ :/ {/ “/ A/ ”/ ,/ “/ B/ ”/ ,/ “/ C/ ”/ }/ ,/ {/ “/ D/ ”/ ,/ “/ E/ ”/ ,/ “/ F/ ”/ }/ 和/ {/ “/ G/ ”/ ,/ “/ H/ ”/ ,/ “/ I/ ”/ }/ ③/ ./ ①/ ②/ ③/ Page4/ 基于/ 一维/ 图/ 划分/ 进行/ 并行/ 图/ 计算/ 的/ 并行/ BGL/ [/ 14/ ]/ 是/ 一个/ 面向/ 研究/ 开发/ 的/ 通用/ C++/ 库/ ,/ 它/ 在/ BoostGraphLibrary/ 之上/ 实现/ 了/ 一维/ 划分/ 方法/ ,/ 使用/ 消息传递/ 接口/ (/ MessageParsingInterface/ ,/ MPI/ )/ 在/ BSP/ 模型/ [/ 3/ ]/ 中/ 进行/ 通信/ ./ Pregel/ [/ 2/ ]/ 是/ 目前/ 最/ 流行/ 的/ 大规模/ 图/ 计算/ 框架/ ,/ 其/ 设计/ 严格/ 参照/ 了/ 以/ 顶点/ 为/ 中心/ (/ vertex/ -/ centric/ )/ 的/ BSP/ (/ VC/ -/ BSP/ )/ 模型/ ./ 在/ Pregel/ 中/ ,/ 主机/ 节点/ (/ master/ )/ 主要/ 用于/ 工作者/ (/ workers/ )/ 之间/ 的/ 协同/ ,/ 也/ 参与/ 聚合/ 器/ (/ aggregators/ )/ 的/ 运算/ ,/ 实现/ 全局/ 通信/ ./ GPS/ [/ 15/ ]/ 将/ 聚合/ 器/ 拓展/ 为/ 一个/ “/ 主机/ -/ 工作者/ ”/ 的/ 运算/ 机制/ ,/ 后/ 被/ ApacheGiraph/ 项目/ 采用/ ./ 在/ ApacheGiraph/ 设计/ 的/ API/ 中/ ,/ 主机/ 节点/ 的/ MasterCompute/ 类/ 具有/ compute/ (/ )/ 函数/ ,/ 用户/ 可以/ 通过/ 实例/ 化该/ 函数/ 来/ 读取/ 和/ 改变/ 在/ 上/ 一个/ 超步/ 中/ 聚合/ 器/ 的/ 值/ ;/ 此外/ ,/ 每个/ 聚合/ 器/ 都/ 被/ 分派/ 到/ 一个/ 工作者/ 上/ ,/ 这样/ 主机/ 不/ 需要/ 进行/ 任何/ 聚合/ 计算/ ./ 文献/ [/ 16/ ]/ 提出/ 监控/ 活动/ 子图/ 大小/ 的/ 策略/ ,/ 即/ 当/ 它/ 变得/ 足够/ 小时/ ,/ 将/ 其/ 发送到/ 主机/ 上/ ,/ 串行/ 执行/ 剩余/ 计算/ ;/ 此外/ ,/ 还/ 讨论/ 了/ 将/ 顶点/ 合并/ 为/ 超/ 顶点/ (/ supervertices/ )/ 、/ 按/ 需/ 清理/ 边/ 等/ 基于/ Pregel/ 计算/ 框架/ 的/ 图/ 算法/ 优化/ 技术/ ./ 归纳/ 来说/ ,/ 上述/ 系统/ 或/ 框架/ 均/ 采用/ 了/ “/ 顶点/ -/ 顶点/ ”/ 的/ 消息/ 通信/ 模式/ ,/ 即/ “/ 以/ 顶点/ 为/ 中心/ ”/ 来/ 考虑/ 消息/ 的/ 传递/ 和/ 数据/ 的/ 更新/ ./ 鉴于/ VC/ -/ BSP/ 模型/ 不/ 适合/ 需要/ 协同/ 的/ 图/ 数据/ 计算/ 应用/ (/ 如图/ 着色/ 等/ )/ ,/ 最近/ Giraphx/ [/ 17/ ]/ 提出/ 将/ 顶点/ 分成/ 内部/ 点/ 和/ 边界点/ 两类/ ,/ 并/ 对/ BSP/ 模型/ 改进/ 以/ 满足/ 前述/ 的/ 应用/ 需求/ ./ 这种/ 改进/ 包括/ 允许/ 直接/ 访问/ 工作者/ 上/ 的/ 内点/ ;/ 对于/ 边界点/ ,/ 采取/ 用餐/ 哲学家/ (/ dinningphilosophers/ )/ 和/ 令牌环/ (/ tokenring/ )/ 两种/ 协同/ 机制/ 实现/ 同步/ 等/ ./ 注意/ 到/ ,/ VC/ -/ BSP/ 模型/ 虽然/ 易于/ 实现/ ,/ 但/ 牺牲/ 了/ 顶点/ 访问/ 与其/ 在/ 同一个/ 工作者/ 上/ 的/ 其他/ 顶点/ 信息/ 的/ 灵活性/ ./ 因此/ ,/ 最近/ 的/ 研究/ ,/ 譬如/ Giraph/ ++/ [/ 18/ ]/ 和/ VB/ -/ Partitioner/ [/ 19/ ]/ 等/ ,/ 利用/ 同一/ 工作者/ 内部/ 信息/ 共享/ ,/ 提高/ 本地/ 工作者/ 内部/ 的/ 通信/ 效率/ ./ 这类/ 方法/ 的/ 主要/ 思想/ 是/ 将/ 同一个/ 工作者/ 上/ 的/ 顶点/ 的/ 计算/ 放在/ 一个/ compute/ (/ )/ 函数/ 中/ 进行/ ./ 通过/ 精心/ 算法/ 设计/ ,/ 这种/ 方法/ 可以/ 取得/ 一定/ 程度/ 的/ 性能/ 提升/ ,/ 但/ 编程/ 实现/ 相对/ 复杂/ ,/ 其/ 易用性/ 相比/ VC/ -/ BSP/ 模型/ 被/ 打/ 了/ 折扣/ ./ 幂律/ 图/ 在/ 现实/ 世界/ 中/ 十分/ 常见/ ./ 在/ 处理/ 幂律/ 图时/ ,/ 单个/ 工作者/ 中/ 的/ 高度/ 数/ 顶点/ 很/ 可能/ 导致系统/ 的/ 性能/ 瓶颈/ ./ 为此/ ,/ PowerGraph/ [/ 10/ ]/ (/ 及/ GraphLab/ [/ 20/ ]/ )/ 提出/ 用/ 随机化/ 的/ 边/ 划分/ 方法/ 来/ 平衡/ 工作量/ ./ 由于/ 每个/ 点/ 的/ 出边/ 存储/ 于/ 多个/ 工作者/ 上/ ,/ 同步操作/ 需要/ 聚合/ 在/ 不同/ 工作者/ 上/ 所有/ 顶点/ 的/ 值/ ./ 由于/ 聚合/ 操作/ 是/ 一个/ all/ -/ to/ -/ all/ 的/ 集合/ 通信/ ,/ 并且/ 聚合/ 器/ 的/ 规模/ 和/ 顶点/ 数是/ 成/ 比例/ 的/ ,/ 因此/ 这种/ 方法/ 针对/ 计算/ 节点/ 数量/ 的/ 水平/ 扩展/ 能力/ 是/ 十分/ 有限/ 的/ ./ 区别/ 于/ 经典/ BSP/ 的/ 同步/ 策略/ ,/ 最近/ GiraphUC/ [/ 21/ ]/ 提出/ 一种/ BAP/ (/ BarrierlessAsynchronousParallel/ )/ 同步/ 模型/ ,/ 减少/ 消息/ 滞后/ 和/ 全局/ 通信/ ,/ 提升/ 整体/ 性能/ ./ 此外/ ,/ 其他/ 采纳/ 异步/ 执行/ 的/ 并行/ 方案/ 的/ 研究/ 工作/ 还/ 包括/ 针对/ 动态图/ 的/ SpecGraph/ [/ 22/ ]/ 等/ ./ 另外/ ,/ 诸如/ 微软/ 的/ Trinity/ [/ 23/ ]/ 和/ Facebook/ 的/ TAO/ [/ 24/ ]/ 等/ 系统/ ,/ 与/ 上文/ 讨论/ 的/ 大图/ 计算/ 模型/ 和/ 框架/ 也/ 有/ 较大/ 不同/ ./ 它们/ 主要/ 服务/ 于/ 大规模/ 图/ 数据/ 上/ 的/ 在线/ 查询/ 任务/ ,/ 强调/ 低/ 读取/ 延迟/ (/ latency/ )/ 和/ 高/ 读取/ 可用性/ (/ availability/ )/ ./ 此类/ 查询/ 任务/ 与/ 高/ 吞吐量/ 的/ 离线/ 处理/ 有着/ 迥异/ 的/ 差别/ ,/ 因此/ 超出/ 了/ 本文/ 的/ 研究/ 讨论/ 范畴/ ./ 2.2/ 二维/ 划分/ 二维/ 划分/ 首次/ 是/ 在/ 文献/ [/ 7/ ]/ 中/ 提出/ ,/ 后/ 被/ 文献/ [/ 6/ ]/ 采用/ ./ 二维/ 划分/ 通常/ 建立/ 在/ 一个/ 网状/ 网络/ 之上/ ,/ 一组/ 顶点/ 的/ 出边/ 被/ 网状/ 网络/ 中/ 的/ 一行/ (/ row/ )/ 计算/ 节点/ 所/ 共有/ ./ 二维/ 划分/ 方案/ 通过/ 增加/ 通信/ 开销/ 来/ 解决/ 载入/ 平衡/ 和/ 可扩展性/ 的/ 问题/ ./ 譬如/ ,/ 经典/ 的/ 二维/ BFS/ 算法/ 需要/ 扩展/ (/ expand/ )/ 和/ 折叠/ (/ fold/ )/ 两个/ 步骤/ ,/ 其中/ 折叠/ 的/ 通信/ 开销/ 等于/ 一维/ 划分/ 上/ BFS/ 算法/ 的/ 总/ 通信/ 开销/ ,/ 扩张/ 的/ 通信/ 开销/ 则/ 是/ 为/ 载入/ 平衡/ 和/ 可扩展性/ 付出/ 的/ 额外/ 开销/ ./ 由于/ 缺乏/ 高性能/ 计算/ 网络/ 以及/ 关键/ 算法/ 操作/ 的/ 高性能/ 实现/ ,/ 在/ 通用/ 计算/ 集群/ 和/ 云/ 计算/ 基础设施/ 上/ 部署/ 这些/ 算法/ 会/ 引发/ 很/ 高/ 的/ 通信/ 代价/ ,/ 导致/ 很/ 低/ 的/ 时间/ 效率/ ./ 此外/ ,/ 实现/ 基于/ 二维/ 划分/ 的/ 图/ 算法/ 需要/ 很大/ 的/ 人力/ 成本/ ,/ 这/ 违背/ 大/ 数据分析/ 应用/ 关于/ 易用性/ 的/ 理念/ ./ 注意/ 到/ ,/ 在/ MapReduce/ 上/ 还有/ 一系列/ 关于/ 图/ 计算/ 的/ 研究/ (/ 如/ Pegasus/ [/ 25/ ]/ 等/ )/ ,/ 它们/ 依赖于/ Map/ 和/ Reduce/ 操作/ 进行/ 图/ 数据处理/ ./ 然而/ ,/ 已有/ 研究/ 通常/ 认为/ ,/ MapReduce/ 计算/ 框架/ 并/ 不/ 适合/ 处理/ 图/ 结构/ 数据/ [/ 23/ ]/ ,/ 强求/ 并发/ 性/ 可能/ 导致/ 非/ 最优/ 的/ 性能/ 及/ 易用性/ 方面/ 的/ 问题/ ./ 因此/ ,/ 基于/ MapReduce/ 方法/ 亦/ 不/ 属于/ 本文/ 的/ 探讨/ 范围/ ./ 2.3/ VC/ -/ BSP/ 模型/ BSP/ 模型/ 使用/ 超步/ (/ superstep/ )/ 的/ 概念/ 使/ 多个/ 并行/ 的/ 工作者/ 保持/ 同步/ ./ 一个/ 典型/ 的/ 超步/ 一般/ 由/ 3/ 个/ 部分/ 组成/ :/ (/ 1/ )/ 计算/ ./ 每个/ 工作者/ 执行/ 其管辖/ 顶点/ 上/ 的/ Page5/ 计算/ ;/ 居/ 顶点/ 发送/ 消息/ ;/ 作者/ 完成/ 计算/ 和/ 通信/ ./ (/ 2/ )/ 通信/ ./ 工作者/ 代表/ 其管辖/ 顶点/ 向/ 它们/ 的/ 邻/ (/ 3/ )/ 屏障/ (/ barrier/ )/ ./ 每个/ 工作者/ 等待/ 其他/ 所有/ 工/ 之后/ ,/ 算法/ 进入/ 下/ 一个/ 超步/ ./ 也就是说/ ,/ 一个/ 并行算法/ 通常/ 包含/ 了/ 一系列/ 依次/ 执行/ 的/ 超步/ ./ 参照/ 以/ 顶点/ 为/ 中心/ 的/ BSP/ 大图/ 计算/ 模型/ ,/ 图/ 2/ 展示/ 了/ 一个/ 基于/ 图/ 1/ (/ a/ )/ 划分/ 的/ BFS/ (/ BreadthFirstSearch/ )/ 算法/ 执行/ 过程/ ./ 假定/ BFS/ 算法/ 从根/ 顶点/ “/ C/ ”/ 开始/ 执行/ ,/ 其/ 取值/ 初始化/ 为/ 0/ ,/ 即/ 它/ 到/ 根/ 顶点/ 的/ 距离/ 为/ 0/ ;/ 剩余/ 顶点/ 取值/ 初始化/ 为/ 无穷大/ ./ 在/ 超步/ 1/ ,/ 管辖/ 顶点/ “/ C/ ”/ 的/ 工作者/ 发送/ 包含/ 距离/ 1/ 的/ 消息/ 给/ “/ C/ ”/ 的/ 所有/ 出边/ 指向/ 的/ 外向/ 邻居/ 顶点/ ./ 这些/ 收到/ “/ C/ ”/ 的/ 消息/ 的/ 顶点/ 更新/ 自身/ 取值/ 为/ 1/ ,/ 即/ 它/ 到/ 根/ 顶点/ 的/ 距离/ 是/ 1/ ./ 然后/ ,/ 它们/ 发送/ 包含/ 距离/ 2/ 的/ 消息/ 给/ 各自/ 的/ 外向/ 邻居/ 顶点/ ./ 依此/ 迭代/ ,/ 倘若/ 一个/ 顶点/ 收到/ 消息/ 值/ 小于/ 其/ 当前/ 值/ ,/ 它/ 就/ 更新/ 自身/ 取值/ ,/ 并/ 向/ 其/ 外向/ 邻居/ 顶点/ 发送/ 包含/ 自身/ 取值/ 加/ 1/ 的/ 消息/ ./ 直至/ 全局/ 都/ 没有/ 更新/ 时/ ,/ BFS/ 算法/ 停止/ 并/ 退出/ ./ 当前/ ,/ 绝大多数/ 图/ 计算/ 框架/ 都/ 采用/ 了/ VC/ -/ BSP/ 模型/ ./ 然而/ ,/ 真实世界/ 中/ 服从/ 幂律/ 分布/ 的/ 大型/ 网络/ 中/ ,/ 极少数/ 顶点/ 拥有/ 大量/ 的/ 边/ ./ 通过/ 上述/ BFS/ 算法/ 执行/ 过程/ 示例/ 可以/ 发现/ ,/ 在/ 分布式/ 处理/ 这/ 类/ 网络/ 时/ ,/ 按照/ VC/ -/ BSP/ 模型/ ,/ 负责/ 高度/ 数/ 顶点/ 的/ 工作者/ 通常/ 需要/ 执行/ 更/ 多/ 的/ 顶点/ 计算/ 任务/ ,/ 处理/ 更/ 多/ 的/ 接收/ 消息/ ./ 因此/ ,/ 相比/ 其他/ 工作者/ ,/ 它们/ 需要/ 消耗/ 更长/ 的/ 时间/ ,/ 极易/ 成为/ 整个/ 系统/ 的/ 瓶颈/ ./ 此外/ ,/ 其/ 网络通信/ 和/ 内存/ 方面/ 的/ 限制/ 将/ 直接/ 制约/ 系统/ 处理/ 更/ 大型/ 的/ 图/ (/ 参见/ 第/ 5/ 节/ 实验/ 结果/ )/ ./ 为/ 解决/ 上述/ 问题/ ,/ 下/ 一节/ 将/ 提出/ 一种/ 改进/ 的/ 基于/ BSP/ 的/ 大图/ 计算/ 模型/ ,/ 改善/ 系统/ 面向/ 真实/ 幂律/ 网络/ 的/ 处理/ 性能/ 和/ 水平/ 可/ 扩展/ 能力/ ./ 3SC/ -/ BSP/ 模型/ 本/ 节/ 提出/ 一种/ 改进/ 的/ 基于/ BSP/ 的/ SC/ -/ BSP/ 大图/ 计算/ 模型/ ,/ 它/ 采用/ 一种/ 新/ 的/ 图/ 划分/ 和/ 计算方法/ 来/ 解决/ 前/ 文/ 提出/ 的/ 幂律/ 分布/ 和/ 水平/ 可扩展性/ 问题/ ,/ 并/ 兼容/ 当前/ 主流/ 的/ 通用/ 计算/ 和/ 存储/ 基础设施/ ./ 具体地说/ ,/ 首先/ 提出/ 了/ 分离器/ (/ separator/ )/ 的/ 概念/ ,/ 分离器/ 是/ 面向/ 顶点/ 出边/ 子集/ 的/ 一种/ 容器/ (/ container/ )/ ,/ 图/ (/ 边/ )/ 的/ 划分/ 由/ 分离器/ 进行/ 控制/ ./ 然后/ ,/ 设计/ 了/ 一种/ 基于/ 分离器/ -/ 组合/ 器/ (/ separator/ -/ combiner/ )/ 的/ BSP/ 大图/ 计算/ 模型/ ,/ 简称/ SC/ -/ BSP/ 模型/ ,/ 进行/ 图/ 处理/ 计算/ ./ 注意/ 到/ ,/ SC/ -/ BSP/ 模型/ 和/ VC/ -/ BSP/ 模型/ 都/ 是/ 依赖/ BSP/ 的/ 大图/ 计算/ 模型/ ,/ 基于/ 这些/ 模型/ 可以/ 进一步/ 设计/ 实现/ 相应/ 的/ 计算/ 框架/ ./ 下面/ 介绍/ SC/ -/ BSP/ 模型/ 的/ 划分/ 和/ 计算方法/ 的/ 基本原理/ ,/ 实现/ 相关/ 的/ 细节/ 则/ 在/ 第/ 4/ 节中/ ./ 3.1/ 划分/ 顶点/ 首先/ 由/ 用户/ 定义/ 的/ 划分/ 函数/ 划分/ 到/ 各/ 工作者/ 上/ ,/ 默认/ 的/ 划分/ 函数/ 是/ hash/ (/ ID/ )/ 再/ 对/ N/ 取模/ ,/ 其中/ ID/ 是/ 顶点/ 的/ 标识符/ ,/ N/ 是/ 所/ 需/ 划分/ 的/ 数量/ ./ 边/ 的/ 划分/ 则/ 通过/ 一种/ 称作/ 分离器/ 的/ 容器/ (/ con/ -/ tainer/ )/ 实现/ ,/ 一个/ 分离器/ 容纳/ 了/ 某个/ 顶点/ 出边/ 的/ 一部分/ 出边/ (/ 子集/ )/ ./ 首先/ ,/ 设计/ 了/ 两种/ 类型/ 的/ 分离器/ 来/ 负责/ 顶点/ 的/ 出边/ :/ 前/ 分离器/ (/ pre/ -/ separator/ )/ 和/ 后/ 分离器/ (/ post/ -/ separator/ )/ ./ 一个/ 顶点/ 的/ 所有/ 出边/ 要么/ 被/ 前/ 分离器/ 管理/ ,/ 要么/ 由后/ 分离器/ 管理/ ,/ 且/ 只能/ 被/ 一种/ 分离器/ 管理/ ./ 然后/ ,/ 给出/ 了/ 一种/ 简单/ 的/ 基于/ 顶点/ 度数/ 的/ 选择/ 机制/ ,/ 即/ 给定/ 一个/ 分离器/ 选择/ 阈值/ ,/ 度数/ 高于/ 阈值/ 的/ 高度/ 数/ 顶点/ 由后/ 分离器/ 管理/ ,/ 度数/ 低于/ 阈值/ 的/ 低/ 度数/ 顶点/ 则/ 由/ 前/ 分离器/ 管理/ ./ 前/ 分离器/ 的/ 工作/ 原理/ 与/ 现有/ 一维/ 划分/ 方法/ 类似/ ,/ 将/ 消息/ 根据/ 出边/ (/ 和/ 消息传递/ 目的/ 顶点/ )/ 的/ 不同/ 进行/ 分组/ ./ 因此/ ,/ 前/ 分离器/ 存在/ 于/ 管辖/ 的/ 出边/ 对应/ 的/ 顶点/ 所在/ 的/ 工作者/ 内存/ 中/ ./ 相对而言/ ,/ 后/ 分离器/ 稍/ 复杂/ 一些/ ./ 假如/ 一个/ 顶点/ v/ 由后/ 分离器/ 管理/ ,/ 那么/ 后/ 分离器/ 就/ 会/ 出现/ 在/ 与其/ 相连/ 的/ 外向/ 邻居/ 顶点/ 所在/ 的/ 工作者/ 内存/ 中/ ./ 换句话说/ ,/ 至多/ 可以/ 有/ N/ 个/ 不同/ 的/ 后/ 分离器/ ,/ 分别/ 对应/ N/ 个/ 工作者/ ,/ 其中/ N/ 是/ 系统/ 中/ 的/ 工作者/ 数量/ ./ 每/ 一个/ 后/ 分离器/ 控制/ v/ 出边/ 的/ 一个/ 子集/ ,/ 同一个/ 后/ 分离器/ 控制/ 的/ 出边/ 均/ 指向/ 位于/ 同一个/ 工作者/ 上/ 的/ v/ 外向/ 邻居/ 顶点/ ,/ 该后/ 分离器/ 直接/ 位于/ 这些/ 外向/ 邻居/ 顶点/ 所在/ 的/ 工作者/ 上/ ./ 举个/ 例子/ ,/ 假如/ v/ 是/ 一个/ 由后/ 分离器/ Page6/ 负责/ 的/ 顶点/ ,/ 其出/ 边/ 集为/ {/ vu/ ,/ vw/ ,/ vx/ ,/ vy/ ,/ vz/ }/ ,/ 其中/ v/ 的/ 外向/ 邻居/ 顶点/ u/ 和/ w/ 位于/ 同一个/ 工作者/ 上/ ,/ x/ 、/ y/ 和/ z/ 位于/ 另/ 一个/ 工作者/ 上/ ,/ 那么/ 需要/ 设置/ 两个/ 后/ 分离器/ 分别/ 管理/ 出边/ 子集/ {/ vu/ ,/ vw/ }/ 和/ {/ vx/ ,/ vy/ ,/ vz/ }/ ,/ 这/ 两个/ 后/ 分离器/ 分别/ 位于/ u/ 和/ w/ 所在/ 的/ 工作者/ ,/ 以及/ x/ ,/ y/ 和/ z/ 所在/ 的/ 工作者/ 上/ ./ 因此/ ,/ 后/ 分离器/ 控制/ 的/ 出边/ 集合/ 之间/ 是/ 互不/ 重叠/ 的/ ,/ 且/ 一条/ 出边/ 只能/ 隶属于/ 一个/ 后/ 分离器/ ./ 考虑/ 图/ 3/ 展示/ 的/ 一张/ 有/ 向/ 带/ 权重/ 具体/ 网络/ ,/ 边/ 权重/ 标示/ 在/ 有/ 向/ 边上/ 的/ 尖括号/ 内/ ./ 首先/ ,/ 一个/ 用户/ 定义/ 的/ 哈希/ 函数/ 将/ 顶点/ 划分/ 为/ 两组/ :/ {/ “/ A/ ”/ ,/ “/ B/ ”/ ,/ “/ C/ ”/ }/ 和/ {/ “/ D/ ”/ ,/ “/ E/ ”/ ,/ “/ F/ ”/ }/ ./ 通过/ 评估/ 每个/ 顶点/ 的/ 度数/ 确定/ 其/ 分离器/ 的/ 类型/ ;/ 在/ 此例/ 中/ ,/ 假设/ 分离器/ 选择/ 阈值/ 为/ 3/ ,/ 那么/ ,/ 顶点/ “/ C/ ”/ 的/ 出度/ 是/ 4/ ,/ 应该/ 使用/ 后/ 分离器/ ,/ 而/ 剩余/ 其他/ 顶点/ 使用/ 前/ 分离器/ ./ 具体地说/ ,/ “/ C/ ”/ 由/ 两个/ 后/ 分离器/ 来/ 管控/ ,/ 一个/ 基于/ 出边/ 子集/ {/ “/ CA/ ”/ ,/ “/ CB/ ”/ }/ ,/ 另/ 一个/ 负责/ 出边/ 子集/ {/ “/ CD/ ”/ ,/ “/ CE/ ”/ }/ ./ 这种/ 分配/ 是/ 由/ 这些/ 出边/ 的/ 终点/ 及其/ 所在/ 的/ 工作者/ 所/ 决定/ 的/ ,/ “/ CA/ ”/ 和/ “/ CB/ ”/ 被/ 分配/ 到/ 同/ 一组/ ,/ 因为/ 这/ 两条/ 边/ 的/ 终点/ “/ A/ ”/ 和/ “/ B/ ”/ 之前/ 被/ 划分/ 给/ 同一个/ 工作者/ ;/ 基于/ 同种/ 原理/ ,/ “/ CD/ ”/ 和/ “/ CE/ ”/ 被/ 分配/ 到/ 另/ 一个/ 工作者/ 的/ 后/ 分离器/ 上/ ./ 3.2/ 计算方法/ 以/ 第/ 3.1/ 节/ 的/ 图/ 划分/ 为/ 基础/ ,/ 下面/ 设计/ 相应/ 的/ 计算方法/ ./ 所谓/ 组合/ 器/ (/ combiner/ )/ ,/ 是/ 一个/ 聚合/ (/ ag/ -/ gregation/ )/ 函数/ 的/ 实例/ ,/ 它/ 聚合/ 所有/ 发/ 向/ 同一个/ 顶点/ 的/ 消息/ ./ 下面/ 通过/ 在/ 图/ 3/ 的/ 示例/ 网络/ 上/ 运行/ 一个/ SSSP/ (/ SingleSourceShortestPath/ )/ 作业/ 来/ 解释/ 计算方法/ 的/ 工作/ 过程/ ./ SSSP/ 问题/ 在/ 网络/ 路由/ 选择/ 、/ 城市布局/ 设计/ 、/ 个人/ 旅程/ 规划/ 等/ 方面/ 均/ 有/ 众多/ 应用/ ,/ 是/ 一个/ 典型/ 的/ 大图/ 计算/ 问题/ ./ 假定/ SSSP/ 算法/ 从根/ 顶点/ “/ A/ ”/ 开始/ ./ 在/ 超步/ 1/ ,/ 根/ 顶点/ “/ A/ ”/ 的/ 值/ 被/ 初始化/ 为/ 0/ ,/ 并/ 发送/ 消息/ 给/ 它/ 的/ 外向/ 邻居/ “/ C/ ”/ ,/ “/ E/ ”/ 和/ “/ F/ ”/ ./ 通过/ 计算/ ,/ 这/ 3/ 个/ 邻居/ 顶点/ 将/ 它们/ 的/ 最/ 短距离/ 取值/ 分别/ 更新/ 为/ 1/ ,/ 2/ 和/ 1/ ./ 这里/ 跳过/ 超步/ 1/ 的/ 执行/ 细节/ ,/ 重点/ 阐述/ 超步/ 2/ 的/ 执行/ 过程/ ,/ 将/ 流程/ 图形化/ 如图/ 4/ 所示/ ./ 在/ 图/ 4/ 中/ ,/ 根据/ 最浅/ 灰色/ 矩形框/ 着色/ 显示/ ,/ 当前/ 系统/ 中有/ 2/ 个/ 工作者/ 分别/ 管辖/ 顶点/ 集/ {/ “/ A/ ”/ ,/ “/ B/ ”/ ,/ “/ C/ ”/ }/ 和/ {/ “/ D/ ”/ ,/ “/ E/ ”/ ,/ “/ F/ ”/ }/ ./ 在/ 超步/ 2/ 中/ ,/ 顶点/ “/ C/ ”/ ,/ “/ E/ ”/ 和/ “/ F/ ”/ 是/ SSSP/ 算法/ 的/ 前沿/ 顶点/ (/ frontvertices/ )/ ,/ 即/ SSSP/ 算法/ 当前/ 已经/ 扩展/ 到/ 这些/ 顶点/ ;/ 它们/ 的/ 最/ 短距离/ 取值/ 在/ 超步/ 1/ 中/ 刚刚/ 被/ 更新/ 了/ ./ 此时/ ,/ 低/ 度数/ 顶点/ “/ E/ ”/ 和/ “/ F/ ”/ 分别/ 由/ 两个/ 前/ 分离器/ 管控/ ,/ 而/ 高度/ 数/ 顶点/ “/ C/ ”/ 由/ 两个/ 后/ 分离器/ 管控/ ,/ 分别/ 负责/ 顶点/ “/ C/ ”/ 的/ 出边/ 子集/ {/ “/ CA/ ”/ ,/ “/ CB/ ”/ }/ 和/ {/ “/ CD/ ”/ ,/ “/ CE/ ”/ }/ ./ 具体地说/ ,/ 一个/ 超步/ 设计/ 包含/ 了/ 3/ 个/ 部分/ :/ 前/ 计算/ (/ pre/ -/ computation/ )/ 、/ 通信/ (/ communication/ )/ 和/ 后/ 计算/ (/ post/ -/ computation/ )/ ./ 在/ 超步/ 2/ 的/ 前/ 计算/ 部分/ ,/ 顶点/ “/ C/ ”/ 将/ 其值/ 1/ 广播/ 给/ 所有/ 工作者/ ,/ 因为/ 顶点/ “/ C/ ”/ 是/ 由/ 后/ 分离器/ 来/ 管控/ 的/ ./ 同时/ ,/ 顶点/ “/ E/ ”/ 和/ “/ F/ ”/ 调用/ 各自/ 的/ 前/ 分离器/ 执行/ edgeCompute/ (/ )/ 函数/ ./ 在/ SSSP/ 算法/ 中/ ,/ edgeCompute/ (/ )/ 函数/ 将/ 边/ 的/ 权重/ 与/ 顶点/ 当前/ 值/ 进行/ 求和/ ,/ 并/ 把/ 结果/ 发送给/ 这条/ 出边/ 对应/ 的/ 终/ Page7/ 点/ ./ 由于/ “/ ED/ ”/ 和/ “/ FD/ ”/ 具有/ 相同/ 的/ 终点/ “/ D/ ”/ ,/ 前/ 分离器/ 之后/ 调用/ 前/ 组合/ 器/ (/ pre/ -/ combiner/ )/ ,/ 对/ 上述/ 两个/ 消息/ 进行/ 组合/ 运算/ ./ 在/ SSSP/ 算法/ 中/ ,/ 此/ 功能/ 由/ MinValueCombiner/ 类/ 实现/ ,/ 由此/ 多个/ 消息/ 被/ 合并/ ,/ 仅/ 保留/ 最小值/ ./ 然后/ ,/ 在/ 超步/ 2/ 的/ 通信/ 部分/ ,/ 两个/ 工作者/ 之间/ 进行/ 4/ 个/ 消息/ 的/ 交换/ ./ 最后/ ,/ 在/ 超步/ 2/ 的/ 后/ 计算/ 部分/ ,/ 顶点/ “/ C/ ”/ 的/ 后/ 分离器/ 遍历/ 它/ 的/ 出边/ ,/ 通过/ 调用/ edgeCompute/ (/ )/ 函数/ 对边/ 的/ 权重/ 和/ 顶点/ 取值/ 求和/ ./ 后/ 分离器/ 产生/ 的/ 消息/ 依据/ 消息/ 的/ 目的/ 顶点/ 被/ 后/ 组合/ 器/ (/ post/ -/ combiner/ )/ 合并/ ./ 之后/ ,/ 将/ 合并/ 后/ 的/ 消息/ 发/ 向/ 目的/ 顶点/ ,/ 成为/ 下/ 一个/ 超步/ 的/ 输入/ ./ 在/ 超步/ 3/ 的/ 初始/ 时/ ,/ 顶点/ “/ B/ ”/ 和/ “/ D/ ”/ 的/ 最/ 短距离/ 取值/ 进行/ 了/ 更新/ ,/ 成为/ 新一轮/ SSSP/ 算法/ 扩展/ 的/ 前沿/ 顶点/ ./ 由/ 上述/ 计算/ 执行/ 流程/ 可以/ 看出/ ,/ 基于/ SC/ -/ BSP/ 模型/ 的/ 计算方法/ 使用/ 前/ 分离器/ 及前/ 组合/ 器/ 对/ 单个/ 工作者/ 内部/ 的/ 消息/ 进行/ 合并/ 计算/ ,/ 减少/ 了/ 工作者/ 之间/ 的/ 通信/ 开销/ ;/ 同时/ ,/ 利用/ 后/ 分离器/ 将/ 不同/ 目标/ 工作者/ 的/ 消息/ 均衡/ 地/ 分派/ 到/ 多个/ 工作者/ 上/ 处理/ ,/ 从而/ 优化/ 了/ 计算/ 负载/ 均衡/ ./ 相/ 比较而言/ ,/ 基于/ VC/ -/ BSP/ 模型/ 的/ 计算方法/ 则/ 无法/ 利用/ 前/ 、/ 后/ 分离器/ 等/ 对/ 消息/ 运算/ 进行/ 调度/ 配置/ ,/ 因此/ 在/ 均衡/ 计算/ 负载/ 方面/ 的/ 能力/ 相对/ 较弱/ ./ 文中/ 将/ 在/ 第/ 5/ 节/ 的/ 实验/ 与/ 分析/ 中/ 进一步/ 验证/ 上述/ 结论/ ./ SC/ -/ BSP/ 大图/ 计算/ 模型/ 中/ ,/ 选择/ 使用/ 前/ 分离器/ 或/ 后/ 分离器/ 的/ 顶点/ 度数/ 阈值/ 是/ 可/ 由/ 用户/ 指定/ 的/ ./ 目前/ 的/ 实验/ 结果/ 说明/ ,/ 该/ 阈值/ 取值/ 等于/ 系统/ 中/ 工作者/ 个数/ 时/ ,/ 对于/ 大多数/ 应用/ ,/ 系统/ 性能/ 达到/ 最优/ ;/ 换句话说/ ,/ 对于/ 大多数/ 应用/ ,/ 此/ 默认值/ 可以/ 最小化/ 系统/ 中/ 的/ 网络通信/ 规模/ ./ 注意/ 到/ ,/ 已有/ 相关/ 工作/ 曾/ 提出/ 利用/ 顶点/ 度数/ 对/ 算法/ 进行/ 优化/ 的/ 初步/ 想法/ [/ 26/ ]/ ,/ 但是/ 只是/ 针对/ 某一/ 特殊/ 问题/ 的/ 优化/ ;/ 相/ 比较而言/ ,/ 文中/ 所提/ 模型/ 和/ 方法/ 的/ 贡献/ 在于/ ,/ 系统地/ 提出/ 一套/ 基于/ 顶点/ 度数/ 的/ 大图/ 并行计算/ 方法/ ,/ 它/ 将/ 底层/ 负载/ 均衡/ 方面/ 的/ 设计/ 困难/ 和/ 复杂性/ 透明化/ ,/ 使/ 用户/ 可以/ 自主/ 便捷/ 地/ 研发/ 大图/ 数据/ 上/ 的/ 分析/ 应用/ ./ 4/ 实现/ 模型/ 的/ 最终目标/ 是/ 在/ 通用/ 计算/ 集群/ 上/ 实现/ 一个/ 易用/ 、/ 易/ 维护/ 且/ 具备/ 良好/ 水平/ 扩展/ 能力/ 的/ 系统/ ./ 鉴于/ 篇幅/ 限制/ ,/ 本文/ 略去/ 了/ 基于/ SC/ -/ BSP/ 模型/ 计算/ 框架/ 的/ 详细/ API/ 介绍/ ,/ 感兴趣/ 的/ 读者/ 可以/ 参阅/ 相关/ 的/ 设计/ 技术/ 报告/ ①/ ./ 这里/ 简要/ 讨论/ 如下/ 几个/ 方面/ 的/ 问题/ :/ (/ 1/ )/ 存储/ 和/ 索引/ ./ 网络结构/ 数据/ 存储/ 在/ 多个/ 工作者/ 的/ 分布式/ 内存/ 中/ ./ 用户/ 定义/ 的/ 划分/ 函数/ 将/ 顶点/ 划分/ 到/ 工作者/ 上后/ ,/ 分布式/ 内存/ 里/ 保存/ 了/ 前/ // 后/ 分离器/ 及/ 各自/ 对应/ 的/ B/ -/ 树/ 索引/ ./ 此外/ ,/ 还/ 支持/ 进阶/ 用户/ 对/ 一个/ 工作者/ 上/ 的/ 所有/ 顶点/ 和/ 前/ // 后/ 分离器/ 进行/ 遍历/ ,/ 进而/ 使/ 用户/ 可以/ 在/ 本/ 模型/ 的/ 框架/ 下/ 进一步/ 开发/ “/ 以图/ 为/ 中心/ (/ graph/ -/ centric/ )/ ”/ 的/ 算法/ [/ 18/ ]/ ./ (/ 2/ )/ 后/ 分离器/ ./ 后/ 分离器/ 有/ 两种/ 可用/ 的/ 实现/ 方案/ :/ ①/ 对/ 工作者/ 进行/ 索引/ ,/ 只有/ 度数/ 高/ 的/ 顶点/ 才/ 具备/ 后/ 分离器/ ,/ 可/ 将/ 分离器/ 类型/ 值/ SeparatorType/ 发送给/ 已经/ 被/ 索引/ 的/ 工作者/ ;/ ②/ 将/ 高度/ 数/ 顶点/ 的/ 分离器/ 类型/ 值/ 广播/ 给/ 所有/ 工作者/ ./ 考虑/ 到/ ,/ 当/ 系统/ 中/ 工作者/ 数量/ 增加/ 时/ ,/ 高度/ 数/ 顶点/ 的/ 出边/ 可能/ 分布/ 到/ 更/ 多/ 的/ 工作者/ 上/ ,/ 方案/ (/ 1/ )/ 中/ 的/ 索引/ 效率/ 就/ 会/ 随之/ 降低/ ./ 为/ 保持/ 代码/ 可读性/ 和/ 易维护性/ ,/ 目前/ 实现/ 的/ 系统/ 中/ 采用/ 了/ 第/ 2/ 种/ 方法/ ./ (/ 3/ )/ 更改/ 拓扑/ ./ 部分/ 图/ 挖掘/ 算法/ 可能/ 需要/ 在/ 算法/ 执行/ 过程/ 中/ 更改/ 图/ 的/ 拓扑/ 结构/ (/ graphmutation/ )/ ./ 目前/ ,/ 实现/ 的/ 系统/ 可以/ 支持/ 有限/ 的/ 在/ 线图/ 拓扑/ 更新/ 操作/ ./ 例如/ ,/ Vertex/ 类/ 支持/ setVertexValue/ (/ )/ ,/ add/ -/ Vertex/ (/ )/ ,/ removeVertex/ (/ )/ ,/ addEdge/ (/ )/ 和/ remov/ -/ eEdge/ (/ )/ 等/ 函数/ ,/ 用于/ 修改/ 顶点/ 和/ 边/ 信息/ ;/ 同时/ ,/ EdgeHandler/ 类中/ 提供/ setEdgeValue/ (/ )/ 等/ 函数/ ./ (/ 4/ )/ 永久/ 存储/ (/ persistentstorage/ )/ ./ 目前/ ,/ 只/ 在/ 输入/ 、/ 输出/ 及/ 检验/ 点/ (/ checkpoints/ )/ 处/ 访问/ 磁盘/ 等/ 永久/ 存储设备/ ./ 输入/ 和/ 输出/ 操作/ 均/ 支持/ 通用/ 的/ 和/ 特定/ 划分/ 的/ 图/ 格式/ :/ ①/ 通用/ 的/ 图/ 格式/ 可/ 由/ 用户/ 指定/ ,/ 目前/ 可用/ 的/ 选项/ 包括/ 邻接/ 表/ 、/ 边/ 列表/ 等/ ./ 当/ 通用/ 的/ 图/ 格式/ 作为/ 输入/ 时/ ,/ 需要/ 对边/ 随机抽样/ 来/ 评估/ 每个/ 顶点/ 的/ 度数/ ,/ 从而/ 决定/ 分离器/ 的/ 类型/ ./ 评估/ 之后/ ,/ 图/ 结构/ 被/ 载入/ 分布式/ 内存/ 中/ ,/ 并/ 迅速/ 在线/ 构建/ 基于/ 内存/ 的/ 索引/ ./ ②/ 特定/ 划分/ 的/ 图/ 格式/ 把/ 图/ 结构/ 组织/ 为/ 两/ 部分/ —/ —/ —/ 顶点/ 和/ 分离器/ ,/ 直接/ 把/ 分离器/ 写/ 到/ 其/ 所属/ 工作者/ 的/ 本地/ 磁盘/ 上/ ./ 这种/ 格式/ 也/ 可/ 用于/ 检验/ 点处/ ,/ 以/ 满足/ 容错/ 与/ 恢复/ 的/ 需要/ ./ (/ 5/ )/ 容错/ 与/ 恢复/ ./ 因为/ SC/ -/ BSP/ 模型/ 也/ 是/ 建立/ 在/ 经典/ BSP/ 之上/ ,/ 所以/ 容错/ 与/ 恢复/ 机制/ 都/ 与/ VC/ -/ BSP/ 模型/ 类似/ ,/ 即/ 基于/ 检验/ 点/ (/ checkpoints/ )/ 的/ 机制/ ./ 根据/ ①/ https/ :/ // // site/ ./ google/ ./ com/ // xzhaounsw/ // sc/ -/ bsp/ ./ pdfPage8/ 用户/ 设定/ 的/ 间隔/ 参数/ C/ ,/ 在/ 每/ 执行/ C/ 个/ 超步/ 之后/ 执行/ 检验/ 点/ 操作/ ./ 在/ 这些/ 检验/ 点处/ ,/ 修改/ 的/ 图/ 数据/ 和/ 缓存/ 的/ 消息/ 被/ 写/ 到/ 永久/ 文件系统/ 上/ ,/ 以备/ 失败/ 时/ 恢复/ 使用/ ./ 目前/ ,/ 永久/ 文件系统/ 采用/ 可/ 配置/ 副本/ 系数/ 的/ Hadoop/ 分布式文件系统/ (/ HadoopDistributedFileSystem/ ,/ HDFS/ )/ ,/ 即/ 文件/ 内容/ 被/ 复制到/ 多个/ 计算/ 节点/ 上/ 进行/ 冗余/ 存储/ ,/ 以/ 提高/ 系统/ 的/ 整体/ 可靠性/ 和/ 容错性/ ./ 5/ 实验/ 本/ 节/ 汇报/ 实验/ 过程/ 和/ 结果/ 分析/ ,/ 仿真/ 实验/ 主要/ 在/ 大型/ 幂律/ 网络/ 上/ 进行/ ./ 首先/ ,/ 开展/ 了/ 大量/ 的/ 实验/ 来/ 比较/ 与/ 评价/ SC/ -/ BSP/ 模型/ 与/ VC/ -/ BSP/ 模型/ 的/ 性能/ ./ 这里/ 以/ SSSP/ 算法/ 作业/ 为例/ 进行/ 重点/ 报告/ ./ 作为/ 一种/ 图/ 遍历/ (/ graphtraversal/ )/ 类/ 算法/ ,/ SSSP/ 算法/ 的/ 一个/ 重要/ 特征/ 是/ 网络通信/ 量/ 是/ 变化/ 的/ ,/ 即/ 消息/ 量/ 逐渐/ 增大/ ,/ 然后/ 达到/ 峰值/ ,/ 最后/ 随着/ 超步/ 数量/ 增加/ 而/ 减少/ ./ 因此/ ,/ SSSP/ 算法/ 是/ 用于/ 测试/ 系统/ 应对/ 动态变化/ 通行/ 量/ 的/ 极佳/ 算法/ ./ 其/ 算法/ 执行/ 过程/ 中/ ,/ 网络通信/ 量/ 逐步/ 由少/ 到/ 多/ ,/ 使得/ 系统/ 瓶颈/ 也/ 易于/ 被/ 发现/ ./ 然后/ ,/ 还/ 引入/ 了/ GraphLab/ [/ 20/ ]/ 系统/ 进行/ 了/ 横向/ 比较/ ,/ 评测/ 了/ 基于/ SC/ -/ BSP/ 模型/ 的/ 系统/ 与/ GraphLab/ 系统/ 在/ 同步/ 模式/ 执行/ PageRank/ 算法/ 方面/ 的/ 差异/ ./ PageRank/ 算法/ 是/ 一种/ 经典/ 的/ 网页/ 排序/ 算法/ ,/ 在/ 众多/ 大图/ 处理/ 系统/ 方面/ 的/ 论文/ 中/ 被/ 多次/ 论述/ 和/ 实现/ ,/ 便于/ 横向/ 比较/ 与/ 分析/ ./ 实验/ 使用/ 了/ 一个/ 包含/ 128/ 台/ 物理/ 机器/ 的/ 配置/ 的/ HDFS/ 集群/ ,/ 单台/ 机器/ 的/ 物理/ 配置/ 为/ 双核/ IntelXeonE55302/ ./ 4GHz/ 的/ 中央处理器/ ,/ 24GB/ 内存/ 和/ 4/ 个/ 500GB/ 固态/ 硬盘/ ./ 在/ 默认/ 参数设置/ 中/ ,/ 工作者/ 的/ 数量/ 固定/ 为/ 512/ ,/ 因此/ ,/ 单台/ 物理/ 机器运行/ 4/ 个/ SSSP/ 算法/ 实例/ ./ 采用/ 默认/ 配置/ 的/ 高性能/ 计算/ 测试/ 集/ Graph500/ ①/ ,/ 该/ 测试/ 集/ 采用/ 了/ 一个/ Kronecker/ 生成器/ [/ 27/ ]/ 产生/ 服从/ 幂律/ 分布/ 的/ 大型/ 网络/ ./ 当/ 生成/ 图/ 包含/ 10/ 亿个/ 顶点/ 时/ ,/ 其/ 最大/ 顶点/ 出/ 度/ 超过/ 5/ 亿/ ./ ApacheGiraph/ ②/ 是/ 一个/ 以/ Java/ 语言/ 开源/ 实现/ 的/ 基于/ VC/ -/ BSP/ 模型/ 的/ 大图/ 计算/ 系统/ ;/ 在/ 此基础/ 上/ ,/ 利用/ Hadoop/ 、/ Netty/ 和/ Giraph/ 以/ 内存/ 系统/ 的/ 形式/ ,/ 同样/ 采用/ Java/ 编程语言/ 实现/ 了/ 基于/ SC/ -/ BSP/ 模型/ 的/ 大图/ 计算/ 系统/ ./ 注意/ ,/ 实验/ 记录/ 的/ 是/ 基于/ SC/ -/ BSP/ 和/ VC/ -/ BSP/ 模型/ 而/ 实现/ 的/ 系统/ 的/ 性能/ ,/ 用以/ 比较/ 两种/ 图/ 计算/ 模型/ ;/ 但/ 为了/ 方便/ 论述/ ,/ 保持/ 行文/ 简洁/ ,/ 文中/ 用/ “/ SC/ -/ BSP/ ”/ 和/ “/ VC/ -/ BSP/ ”/ 分别/ 指代/ 基于/ 相应/ 大图/ 计算/ 模型/ 实现/ 的/ 系统/ ./ 5.1/ 水平/ 扩展/ 能力/ 首先/ ,/ 考察/ 基于/ 两种/ 模型/ 实现/ 的/ 系统/ 的/ 水平/ 扩展/ 能力/ ,/ 相关/ 实验/ 结果/ 展示/ 在/ 图/ 5/ 中/ ./ 所谓/ 良好/ 的/ 水平/ 扩展/ 能力/ ,/ 是/ 指/ 通过/ 往/ 系统/ 中/ 增加/ 工作者/ ,/ 即可/ 提升/ 系统/ 处理/ 更/ 大规模/ 网络/ 的/ 能力/ ./ 图/ 5/ 给出/ 了/ 3/ 种/ 不同/ 数量/ 工作者/ 的/ 设置/ ,/ 即/ SC/ -/ BSP/ 和/ VC/ -/ BSP/ 两种/ 系统/ 分别/ 在/ 32/ 、/ 128/ 和/ 512/ 个/ 工作者/ 上/ 能够/ 处理/ 网络/ 的/ 最/ 大规模/ (/ 以边/ 数计/ )/ ./ 初始化/ 时/ ,/ SC/ -/ BSP/ 和/ VC/ -/ BSP/ 均/ 分配/ 了/ 32/ 个/ 工作者/ ,/ 每个/ 工作者/ 拥有/ 4GB/ 内存/ ./ 利用/ 32/ 个/ 工作者/ ,/ SC/ -/ BSP/ 可以/ 处理/ 包含/ 高达/ 5/ 亿条/ 边/ 的/ 图/ ;/ 相比之下/ ,/ VC/ -/ BSP/ 只能/ 处理/ 包含/ 至多/ 1/ 亿条/ 边/ 的/ 网络/ ./ 换句话说/ ,/ 在/ 同等/ 规模/ 的/ 32/ ×/ 4GB/ 分布式/ 内存/ 中/ ,/ SC/ -/ BSP/ 相比/ VC/ -/ BSP/ 可以/ 处理/ 更/ 大规模/ 的/ 网络/ ,/ 这种/ 处理/ 规模/ 上/ 的/ 优势/ 正是/ 源自/ 于/ 其/ 原生/ 的/ 负载/ 均衡/ 技术/ ./ 当/ 最大/ 度数/ 的/ 顶点/ 发出/ 超过/ 顶点/ 总数/ 10/ %/ 的/ 边/ 时/ ,/ VC/ -/ BSP/ 由于/ 其以/ 顶点/ 为/ 中心/ 的/ 特性/ ,/ 需要/ 将/ 所有/ 边/ 保存/ 在/ 单个/ 工作者/ 的/ 内存/ 中/ ;/ 而/ SC/ -/ BSP/ 将/ 后/ 分离器/ 作为/ 边/ 的/ 容器/ ,/ 这样/ 最大/ 度数/ 顶点/ 的/ 出边/ 就/ 由/ 不同/ 工作者/ 上/ 的/ 后/ 分离器/ 分开/ 管理/ ,/ 减轻/ 了/ 最大/ 度数/ 顶点/ 所在/ 工作者/ 的/ 负载/ ,/ 达到/ 负载/ 均衡/ 的/ 目的/ ./ 然后/ ,/ 通过/ 增加/ 工作者/ 数量/ ,/ 检验/ 系统/ 是否/ 可以/ 处理/ 更大/ 的/ 图/ ./ 发现/ VC/ -/ BSP/ 由于/ 最大/ 度数/ 顶点/ 消耗/ 单个/ 工作者/ 的/ 过/ 多/ 内存/ ,/ 不能/ 处理/ 更大/ 的/ 图/ ;/ 因此/ ,/ 即便/ 增加/ 工作者/ 数量/ ,/ 单个/ 工作者/ 的/ 内存/ 限制/ 直接/ 制约/ 了/ VC/ -/ BSP/ 处理/ 更/ 大规模/ 网络/ 的/ 能力/ ./ 因而/ ,/ ①/ ②/ Page9VC/ -/ BSP/ 能够/ 处理/ 最大/ 图/ 规模/ 的/ 边数/ 未能/ 随着/ 系统/ 中/ 工作者/ 数量/ 的/ 增加/ 而/ 增加/ ./ 相/ 比较而言/ ,/ SC/ -/ BSP/ 在/ 增加/ 工作者/ 数量/ 后/ ,/ 即可/ 处理/ 更大/ 的/ 图/ ;/ 当/ 增加/ 到/ 512/ 个/ 工作者/ 时/ ,/ SC/ -/ BSP/ 能够/ 处理/ 包含/ 高达/ 21/ 亿条/ 边/ 的/ 大图/ ./ 5.2/ 响应/ 时间/ 接着/ ,/ 考察/ 系统/ 响应/ 时间/ ./ 实验/ 结果/ 汇报/ 的/ 时间/ 包括/ 载入/ 和/ 计算/ 过程/ 实际/ 消耗/ 的/ 时间/ (/ wall/ -/ clocktime/ )/ ./ 图/ 6/ 描绘/ 两种/ 系统/ 在/ 响应/ 时间/ 上/ 的/ 实验/ 结果/ ,/ 图/ 的/ 规模/ 以/ 包含/ 的/ 边/ 数来/ 衡量/ ./ 由于/ VC/ -/ BSP/ 不能/ 处理/ 包含/ 超过/ 1.3/ 亿条/ 边/ 的/ 图/ ,/ 因此/ 图/ 6/ 中/ 的/ 实验/ 结果/ 只/ 记录/ 到/ 1.3/ 亿条/ 边/ 为止/ 的/ 时间/ 性能/ ./ 在/ 实验/ 可/ 测量范围/ 之内/ ,/ 观察/ 到/ 两种/ 系统/ 均/ 展示/ 出/ 关于/ 边数/ 的/ 良好/ 的/ 响应/ 时间/ ,/ 并且/ SC/ -/ BSP/ 在/ 时间/ 性能/ 上/ 总是/ 优于/ VC/ -/ BSP/ ./ 5.3/ 通信/ 开销/ 然后/ ,/ 以/ 每个/ 工作者/ 产生/ 的/ 平均/ 消息/ 规模/ 来/ 度量/ 系统/ 的/ 通信/ 开销/ ./ 图/ 7/ 描述/ 了/ 两个/ 系统/ 在/ 不同/ 大小/ (/ 以边/ 数计/ )/ 网络/ 上/ 的/ 对比/ 结果/ ./ 结果显示/ ,/ 两者/ 通信/ 开销/ 方面/ 的/ 差距/ 可高达/ 40/ 倍/ ,/ 甚至/ 是/ 在/ 相对/ 较/ 小/ 的/ 图上/ 情况/ 也/ 类似/ ./ SC/ -/ BSP/ 模型/ 的/ 前/ 分离器/ 产生/ 的/ 消息/ 数量/ 与/ VC/ -/ BSP/ 模型/ 的/ 消息/ 数量/ 相当/ ;/ 但是/ ,/ 后/ 分离器/ 极大/ 地/ 减少/ 由/ 高度/ 数/ 顶点/ 产生/ 的/ 消息/ 数量/ ,/ 因为/ 此时/ SC/ -/ BSP/ 模型/ 只/ 需要/ 传输/ 分离器/ 的/ 类型/ 值/ ,/ 而且/ 同时/ 所有/ 通过/ 出边/ 发送/ 的/ 消息/ 都/ 会/ 被/ 后/ 分离器/ 在/ 同一个/ 本地/ 工作者/ 中/ 进行/ 处理/ ./ 在/ 服从/ 幂律/ 分布/ 的/ 网络/ 中/ ,/ 当/ 网络/ 规模/ 增大/ ,/ 更/ 多/ 的/ 边/ 将/ 会/ 连接/ 到/ 已有/ 的/ 高度/ 数/ 的/ 顶点/ 上/ ./ 在/ SC/ -/ BSP/ 模型/ 中/ ,/ 这些/ 增加/ 的/ 边/ 不会/ 产生/ 额外/ 的/ 消息/ ,/ 因此/ ,/ 它/ 和/ VC/ -/ BSP/ 模型/ 之间/ 在/ 通信/ 开销/ 方面/ 的/ 差距/ 随着/ 网络/ 规模/ 的/ 增加/ 而/ 急剧/ 变大/ ./ 另外/ 还/ 观察/ 到/ ,/ 在/ SC/ -/ BSP/ 模型/ 中/ ,/ 消息/ 数量/ 增加/ 的/ 趋势/ 总是/ 低于/ 线性/ 增长/ ./ 5.4/ 动态/ SC/ -/ BSP/ 当图/ 相对/ 较/ 小时/ ,/ 分配/ 大量/ 工作者/ 可能/ 引起/ 不必要/ 的/ 协同/ 开销/ ./ 为此/ ,/ 设计/ 了/ 一个/ 简单/ 的/ 动态/ 优化/ 策略/ 来/ 减少/ 这种/ 开销/ ,/ 即/ 依据/ 图/ 的/ 规模/ 决定/ 参与/ 计算/ 的/ 工作者/ 数量/ ./ 在/ 该组/ 实验/ 中/ ,/ 简单/ 将/ 图/ 规模/ 与/ 工作者/ 数量/ 之间/ 的/ 比值/ 设/ 为/ 每个/ 工作者/ 2/ 百万条/ 边/ ./ 因此/ ,/ 给/ 包含/ 3/ 千万条/ 边/ 的/ 图/ 分配/ 16/ 个/ 工作者/ ;/ 给/ 包含/ 10.7/ 亿条/ 边/ 的/ 图/ 分配/ 512/ 个/ 工作者/ ;/ 而/ 包含/ 21.4/ 亿条/ 边/ 的/ 图/ ,/ 仍然/ 分配/ 512/ 个/ 工作者/ (/ 最大/ 工作者/ 数量/ 的/ 限制/ )/ ./ 图/ 8/ 描述/ 了/ 响应/ 时间/ 随图/ 规模/ 变化/ 的/ 趋势/ ./ 实验/ 结果显示/ ,/ 在/ 相对/ 较/ 小/ 的/ 图上/ ,/ 动态/ SC/ -/ BSP/ 相比/ 基本/ 的/ SC/ -/ BSP/ 可以/ 减少/ 至多/ 3/ // 4/ 的/ 响应/ 时间/ ,/ 提高/ 了/ 系统/ 的/ 时间/ 性能/ ;/ 而/ 当图/ 的/ 规模/ 不断/ 增长/ 时/ ,/ 动态/ SC/ -/ BSP/ 策略/ 与/ SC/ -/ BSP/ 的/ 差别/ 逐渐/ 缩小/ ./ 其/ 原因/ 是/ 分配/ 大量/ 工作者/ 的/ “/ 不必要/ ”/ 开销/ 此时/ 成为/ 必须/ ,/ 并且/ 不/ 占/ 总体/ 时间/ 开销/ 的/ 主导地位/ ./ 因此/ ,/ 动态/ SC/ -/ BSP/ 策略/ 主要/ 是/ 为/ 较/ 小型/ 网络/ 而/ 设计/ 的/ ,/ 以/ 避免/ 不必要/ 的/ 工作者/ 协同/ 开销/ ;/ 在/ 大规模/ 网络/ 上/ 并不需要/ 使用/ 动态/ SC/ -/ BSP/ 策略/ 就/ 能/ 获得/ 令人满意/ 的/ 系统/ 性能/ ./ 5.5/ 分离器/ 选择/ 阈值/ 这/ 一组/ 实验/ 通过/ 设定/ 不同/ 的/ 分离器/ 选择/ 阈/ Page10/ 值/ —/ —/ —/ 决定/ 一个/ 顶点/ 是/ 由/ 前/ 分离器/ 还是/ 后/ 分离器/ 管控/ ,/ 考察/ 它/ 对/ 通信/ 开销/ 的/ 影响/ ./ 图/ 9/ 中/ 描绘/ 消息/ 规模/ 随/ 选择/ 阈值/ 变化/ 的/ 趋势/ ./ 实验/ 结果显示/ ,/ 当/ 阈值/ 等于/ 工作者/ 数量/ 时/ ,/ 系统/ 中/ 的/ 消息/ 规模/ 达到/ 最小/ ./ 因此/ ,/ 可/ 把/ 选择/ 阈值/ 等于/ 系统/ 工作者/ 数量/ 作为/ 默认设置/ ;/ 当然/ ,/ 用户/ 也/ 可以/ 根据/ 不同/ 算法/ 的/ 特性/ ,/ 尝试/ 其他/ 参数设置/ ,/ 以求/ 不同/ 的/ 运行/ 效能/ ./ 小结/ :/ 通过/ 上述/ 5/ 组/ 实验/ ,/ 表明/ 基于/ SC/ -/ BSP/ 模型/ 实现/ 的/ 系统/ 相比/ 基于/ VC/ -/ BSP/ 模型/ 实现/ 的/ 系统/ 具有/ 更好/ 的/ 水平/ 扩展/ 能力/ ,/ 可以/ 良好/ 地/ 处理/ 服从/ 幂律/ 分布/ 的/ 大图/ ./ 因此/ ,/ 认为/ SC/ -/ BSP/ 模型/ 相较/ 于/ VC/ -/ BCP/ 模型/ 更/ 适用/ 于/ 社交/ 网络/ 等/ 巨型/ 幂律/ 网络/ ./ 此外/ ,/ SC/ -/ BSP/ 模型/ 可以/ 实现/ 在/ 所有/ 类/ Pregel/ 系统/ (/ Pregel/ -/ likesystems/ )/ 之上/ ,/ 提升/ 系统/ 整体/ 性能/ ./ 诚然/ ,/ 和/ 所有/ 基于/ BSP/ 的/ 图/ 计算/ 模型/ 一样/ ,/ SC/ -/ BSP/ 模型/ 不能/ 自然/ 地/ 处理/ 基于/ 连接/ (/ join/ -/ based/ )/ 的/ 子/ 图/ 匹配/ 等/ 计算/ 任务/ ,/ 也/ 存在/ 不/ 支持/ 异步/ 执行/ 模式/ 方面/ 的/ 限制/ ./ 5.6/ 与/ GraphLab/ 的/ 对比/ 上述/ 实验/ 说明/ 在/ 服从/ 幂律/ 分布/ 的/ 大规模/ 网络/ 上/ ,/ 所提/ 的/ SC/ -/ BSP/ 模型/ 对/ VC/ -/ BSP/ 模型/ 的/ 优势/ 显著/ ./ 当前/ ,/ 还有/ 一系列/ 的/ 大图/ 计算/ 系统/ 并非/ 以/ VC/ -/ BSP/ 计算/ 模型/ 为/ 蓝本/ 而/ 设计/ ,/ 主要/ 代表性/ 产品/ 包括/ GraphLab/ 和/ GraphX/ 等/ ./ 其中/ ,/ GraphLab/ 的/ 系统/ 设计/ 基于/ GAS/ (/ Gather/ -/ Apply/ -/ Scatter/ )/ 计算/ 模型/ ,/ 可/ 执行/ 同步/ 和/ 异步/ 计算/ 两种/ 模式/ ./ GraphX/ 则/ 同时/ 支持/ Pregel/ 和/ GraphLab/ 两种/ 图/ 计算/ 虚拟/ 框架/ (/ abstraction/ )/ ,/ 其/ 主要/ 优势/ 在于/ 基于/ Spark/ 并行/ 平台/ 的/ 通用性/ ./ 已有/ 研究/ [/ 28/ ]/ 证明/ GraphX/ 在/ 图/ 计算/ 方面/ 的/ 性能/ 不及/ GraphLab/ ./ 因此/ ,/ 将/ 其/ 排除/ 在/ 实验/ 对比/ 行列/ 之外/ ./ 本节/ 着重/ 对比/ 以/ SC/ -/ BSP/ 模型/ 实现/ 的/ 系统/ 与/ 同步/ 执行/ 模式/ 下/ GraphLab/ 系统/ 在/ 运行/ PageRank/ 算法/ 上/ 的/ 差异/ ./ PageRank/ 算法/ 是/ Google/ 用于/ 网页/ 排序/ 的/ 一种/ 算法/ ,/ 其/ 基本/ 思想/ 是/ 越/ 重要/ 的/ 网页/ 会/ 被/ 更/ 多/ 的/ 其他/ 网页/ 所/ 连接/ ./ 实验/ 中/ 使用/ 了/ 和/ 以往/ 相同/ [/ 12/ ]/ 的/ 衰变/ 系数/ 0.85/ ,/ 其/ 意义/ 是/ 在/ 一个/ 给定/ 网络/ 顶点/ 上/ ,/ 一个/ 随机/ 游走/ 者/ 下/ 一步/ 可能/ 以/ 0.85/ 的/ 概率/ 前往/ 该/ 顶点/ 的/ 任一/ 外向/ 邻居/ 顶点/ ,/ 也/ 可能/ 以/ 0.15/ 的/ 概率/ 随机/ 跳转/ 到任/ 一/ 顶点/ ./ PageRank/ 算法/ 的/ 主要/ 特点/ 是/ ,/ 所有/ 顶点/ 在/ 算法/ 执行/ 过程/ 中/ 始终保持/ 激活/ (/ active/ )/ 状态/ —/ —/ —/ 区别/ 于/ 前述/ 的/ SSSP/ 算法/ ,/ 顶点/ 总是/ 申请/ 暂停/ (/ votetohalt/ )/ ,/ 直至/ 重新/ 接收/ 到/ 新/ 的/ 消息/ 才/ 重新/ 进入/ 激活状态/ ,/ 并且/ 消息传递/ 量/ 保持/ 相对/ 稳定/ ./ 因此/ ,/ 已有/ 大图/ 计算/ 模型/ 和/ 系统/ 的/ 研究/ 中/ 都/ 描述/ 和/ 实现/ 了/ PageRank/ 算法/ ./ 下面/ 的/ 实验/ 通过/ 执行/ PageRank/ 算法/ ,/ 揭示/ SC/ -/ BSP/ 和/ GraphLab/ 在/ 执行/ 顶点/ 保持/ 活跃/ 一类/ 算法/ 时/ 性能/ 上/ 的/ 特点/ ./ 首先/ 对比/ 了/ 两者/ 在/ 响应/ 时间/ 上/ 的/ 实验/ 结果/ ,/ 如图/ 10/ 所示/ ./ 观察/ 到/ ,/ PageRank/ 作为/ 一种/ 常规/ 易于/ 实现/ 的/ 算法/ ,/ 两个/ 系统对/ 这种/ 算法/ 的/ 执行/ 都/ 表现/ 出/ 良好/ 的/ 系统/ 响应/ 时间/ ./ 其中/ ,/ SC/ -/ BSP/ 在/ 所有/ 规模/ 的/ 图上/ 表现/ 均/ 优于/ GraphLab/ ,/ 而/ GraphLab/ 采用/ 的/ GAS/ 模型/ 也/ 同样/ 很/ 好/ 地/ 处理/ PageRank/ 这类/ 顶点/ 全部/ 活跃/ 的/ 算法/ ./ 当/ 在/ 边数/ 达到/ 2.14/ B/ 的/ 大规模/ 网络/ 上/ ,/ SC/ -/ BSP/ 所/ 需/ 的/ 相应/ 时间/ 为/ 4120s/ ,/ 而/ GraphLab/ 则/ 需要/ 将近/ 5000s/ 的/ 时间/ ;/ SC/ -/ BSP/ 能够/ 提供/ 接近/ 1.2/ 倍/ 的/ 性能/ 提升/ ./ 因此/ ,/ 可以/ 认为/ ,/ 在/ 同样/ 图/ 规模/ 处理/ 能力/ 的/ 情况/ 下/ ,/ SC/ -/ BSP/ 具备/ 更优/ 的/ 时间/ 效率/ ,/ 提供/ 更佳/ 的/ 用户/ 体验/ ./ 关于/ 通信/ 开销/ 方面/ ,/ 同样/ 可以/ 看到/ 两个/ 系统/ 都/ 有/ 较/ 低/ 的/ 网络通信/ 量/ ,/ 即/ 通信/ 开销/ ./ 图/ 11/ 描绘/ 了/ 两个/ 系统/ 对应/ 的/ 实验/ 结果/ ,/ 比较/ 结果表明/ ,/ 尤其/ 是/ 在/ 网络/ 较/ 小时/ ,/ 两者/ 的/ 通信/ 开销/ 方面/ 的/ 表现/ 旗鼓相当/ ,/ 规/ Page11/ 模上/ 差距/ 很小/ ./ 可以/ 看出/ GAS/ 模型/ 对于/ 系统/ 通信量/ 相对/ 稳定/ 的/ 算法/ 具有/ 良好/ 的/ 通信量/ 优化/ ,/ 而/ SC/ -/ BSP/ 模型/ 针对/ 消息传递/ 和/ 负载/ 均衡/ 方面/ 的/ 控制/ 则/ 更加/ 优秀/ ./ SC/ -/ BSP/ 在/ 所有/ 网络/ 规模/ 输入/ 上/ 都/ 优于/ 对手/ ,/ 它/ 和/ GraphLab/ 之间/ 的/ 差距/ 随着/ 网络/ 规模/ 的/ 增大/ 而/ 变得/ 更加/ 显著/ ,/ 当边数/ 规模/ 达到/ 2.14/ B/ 时/ 最大/ 可达/ 约/ 8.5/ MB/ ./ 注意/ 到/ ,/ SC/ -/ BSP/ 是/ 基于/ ApacheGiraph/ 开源/ 项目/ 实现/ 的/ ,/ 它/ 使用/ 的/ 是/ Java/ 编程语言/ ;/ 而/ GraphLab/ 的/ 开源/ 项目/ 是/ 采用/ C++/ 编程/ 实现/ 的/ ,/ 且/ 目前/ 暂无/ 开源/ 可用/ 的/ 基于/ Java/ 语言/ 实现/ 的/ GraphLab/ 系统/ ./ 因此/ ,/ 上述/ 性能/ 差异/ 也/ 可能/ 和/ 编程/ 实现/ 语言/ 本身/ 的/ 效率/ 差异/ 有/ 关系/ ,/ 暂时/ 无法/ 完全/ 归结到/ 大图/ 计算/ 模型/ 本身/ 上/ ./ 6/ 结论/ 和/ 进一步/ 工作/ 旨在/ 通用/ 计算/ 集群/ 和/ 云/ 计算/ 基础设施/ 上/ 进行/ 大规模/ 图/ 数据处理/ ,/ 本文/ 首先/ 分析/ 了/ 目前/ 大图/ 处理/ 系统/ 在/ 横向/ 可扩展性/ 方面/ 面临/ 的/ 技术/ 挑战/ ./ 为/ 应对/ 这些/ 困难/ ,/ 提出/ 了/ 一种/ 基于/ 分离器/ -/ 组合/ 器/ 的/ SC/ -/ BSP/ 大图/ 计算/ 模型/ ./ SC/ -/ BSP/ 模型/ 的/ 核心/ 是/ 在/ BSP/ 的/ 计算/ 框架/ 下/ 引入/ 分离器/ 和/ 组合/ 器/ 的/ 概念/ ,/ 对图/ 划分/ 的/ 边集/ 进行/ 合理/ 分配/ 和/ 管理/ ./ 然后/ ,/ 基于/ 所/ 设计/ 的/ 模型/ ,/ 讨论/ 了/ 一种/ 典型/ 大图/ 计算/ 作业/ SSSP/ 算法/ 的/ 设计/ 过程/ 和/ 实现/ 细节/ ./ 最后/ ,/ 通过/ 大量/ 大图/ 数据/ 上/ 的/ 实验/ ,/ 其/ 结果表明/ 所/ 提大图/ 计算/ 模型/ 的/ 性能/ 和/ 水平/ 扩展/ 能力/ 能够/ 满足/ 大规模/ 图/ 数据处理/ 的/ 需要/ ,/ 可/ 为/ 当前/ 众多/ 大型/ 网络图/ 数据分析/ 应用/ 提供/ 能力/ 支撑/ ./ 总的来说/ ,/ 相较/ 于/ 目前/ 流行/ 的/ 以/ 节点/ 为/ 中心/ 的/ VC/ -/ BSP/ 模型/ ,/ SC/ -/ BSP/ 大图/ 模型/ 的/ 主要/ 优势/ 在于/ ,/ 其/ 设计/ 理念/ 面向/ 服从/ 幂律/ 分布/ 的/ 真实世界/ 大型/ 网络/ ,/ 能/ 改善/ 大型/ 网络图/ 并行计算/ 任务/ 中/ 的/ 并行/ 化/ 水平/ 和/ 大图/ 处理/ 系统/ 的/ 水平/ 扩展/ 能力/ ;/ 其/ 良好/ 的/ 易用性/ 、/ 容错/ 与/ 恢复/ 以及/ 可移植性/ 使得/ 该/ 模型/ 可以/ 在/ 现有/ 配置/ 了/ ApacheHadoop/ 的/ 通用/ 计算/ 集群/ 上/ 进行/ 简单/ 的/ 配置/ 、/ 开发/ 和/ 使用/ ./ 目前/ 的/ 实验/ 结果显示/ ,/ 当/ 分离器/ 选择/ 阈值/ 等于/ 系统/ 中/ 工作者/ 个数/ 时/ ,/ 基于/ SC/ -/ BSP/ 模型/ 的/ 系统/ 性能/ 最优/ ./ 下/ 一步/ 工作/ 中/ ,/ 计划/ 开展/ 如下/ 几个/ 方面/ 的/ 探索/ 和/ 研究/ :/ 一方面/ ,/ 将/ 在/ 实验/ 系统/ 上/ 使用/ 其他/ 算法/ 作业/ ,/ 如/ HashMin/ 算法/ 、/ 星型/ 结构/ 模式匹配/ 算法/ 等/ ,/ 观察/ 系统/ 性能/ 特点/ ,/ 考察/ 多/ 阶段/ 算法/ 和/ 拓扑/ 结构/ 更新/ 等/ 方面/ 的/ 系统/ 表现/ ;/ 另一方面/ ,/ 计划/ 从/ 理论/ 上/ 分析/ 和/ 证明/ 所提/ 分离器/ 选择/ 策略/ 的/ 最优性/ ,/ 为/ 模型/ 提供/ 理论/ 保证/ ,/ 提高/ SC/ -/ BSP/ 模型/ 适用性/ ;/ 此外/ ,/ 还/ 可以/ 用同/ 一种/ 编程语言/ 实现/ 包括/ GraphLab/ 在内/ 的/ 大图/ 计算/ 系统/ ,/ 排除/ 编程语言/ 本身/ 效率/ 的/ 差异/ ,/ 以/ 发现/ 系统/ 本身/ 的/ 性能/ 差异/ ,/ 从而/ 追求/ 更佳/ 的/ 模型/ 和/ 系统/ 设计/ ./ 致谢/ 感谢/ 匿名/ 评审/ 和/ 编辑/ 对/ 本文/ 质量/ 的/ 改进/ 提供/ 了/ 大量/ 建设性/ 的/ 意见/ 帮助/ ./ 同时/ 感谢/ 相关/ 研究/ 项目/ 及/ 小组/ 对/ ApacheGiraph/ 和/ GraphLab/ 相关/ 实验/ 代码/ 的/ 开源/ !/ 

