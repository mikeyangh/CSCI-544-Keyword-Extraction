Page1/ 基于/ 轨迹/ 点/ 局部/ 异常/ 度/ 的/ 异常/ 点/ 检测/ 算法/ 刘良旭/ 1/ )/ 乐嘉锦/ 2/ )/ 乔少杰/ 3/ )/ 宋加涛/ 1/ )/ 1/ )/ (/ 宁波/ 工程学院/ 电子/ 与/ 信息/ 工程学院/ 浙江/ 宁波/ 315016/ )/ 2/ )/ (/ 东华大学/ 计算机科学/ 与/ 技术/ 学院/ 上海/ 200051/ )/ 3/ )/ (/ 西南/ 交通/ 大学/ 信息科学/ 与/ 技术/ 学院/ 成都/ 610031/ )/ 摘要/ 随着/ 大量/ 的/ 定位/ 数据/ 被/ 收集/ 在/ 应用服务器/ ,/ 如何/ 从/ 大量/ 定位/ 轨迹/ 数据挖掘/ 异常/ 信息/ 已/ 逐渐/ 成为/ 一个/ 令人/ 关注/ 的/ 研究课题/ ./ 针对/ 当前/ 流行/ 的/ 、/ 以/ 轨迹/ 片段/ 表示/ 局部/ 特征/ 的/ 异常/ 点/ 检测/ 算法/ 存在/ 的/ 问题/ ,/ 文中/ 提出/ 了/ 以/ 轨迹/ 点/ 表示/ 局部/ 特征/ 的/ 异常/ 点/ 检测/ 算法/ TraLOD/ ./ 该/ 算法/ 不仅/ 提出/ 了/ 将/ 每个/ 轨迹/ 点/ 赋予/ 一个/ 0/ ~/ 1/ 的/ 值来/ 表示/ 其/ 局部/ 异常/ 程度/ ,/ 而且/ 还/ 引入/ 了/ 相对/ 距离/ 来/ 计算/ 轨迹/ 片段/ 之间/ 的/ 不/ 匹配/ 性/ ./ 此外/ ,/ 针对/ 数据挖掘/ 算法/ 效率/ 低/ 的/ 缺点/ ,/ TraLOD/ 引入/ 了/ R/ -/ Tree/ 和/ 距离/ 特征/ 矩阵/ 来/ 提高/ 算法/ 效率/ ./ 性能/ 分析/ 和/ 实验/ 都/ 证明/ 了/ TraLOD/ 的/ 有效性/ ./ 关键词/ 轨迹/ 数据/ ;/ 异常/ 点/ 检测/ ;/ 局部/ 异常/ 度/ ;/ 距离/ 特征/ 矩阵/ ;/ R/ 树/ 索引/ 1/ 引言/ 随着/ GPS/ 定位/ 、/ 传感器/ 网络/ 和/ 无线通信/ 等/ 应用/ Page2/ 属性/ 组成/ ,/ 对象/ 之间/ 的/ 距离/ 一般/ 通常/ 以/ 各个/ 属性/ 差值/ 的/ 加权/ 和/ 表示/ [/ 1/ -/ 5/ ]/ ;/ 而/ 在/ 轨迹/ 数据/ 中/ ,/ 独立/ 对象/ 是/ 由/ 若干个/ 相互/ 联系/ 的/ 点/ 组成/ 的/ 轨迹/ ,/ 因此/ ,/ 现有/ 的/ 轨迹/ 数据/ 异常/ 点/ 检测/ 都/ 是/ 针对/ 异常/ 轨迹/ 的/ 检测/ ./ Knorr/ 等/ 人/ [/ 1/ ]/ 将/ 轨迹/ 转变成/ 一个/ 由/ 位置/ 、/ 方向/ 和/ 速度/ 等/ 3/ 个/ 独立/ 属性/ 组成/ 的/ 对象/ ./ 然后/ 运用/ 传统/ 距离/ 函数/ 计算/ 轨迹/ 间/ 距离/ 以/ 检测/ 异常/ 轨迹/ ./ 该/ 方法/ 的/ 优点/ 是/ 可以/ 利用/ 传统/ 的/ 异常/ 点/ 检测/ 算法/ ,/ 但/ 它/ 的/ 缺点/ 在于/ :/ 仅/ 比较/ 了/ 轨迹/ 的/ 整体/ 特性/ ,/ 而/ 忽略/ 了/ 其/ 局部/ 特征/ ./ 而/ 随着/ 轨迹/ 越来越/ 长/ ,/ 这种/ 方法/ 的/ 缺点/ 也/ 日益/ 明显/ ./ 为了/ 解决/ 这个/ 问题/ ,/ Li/ 等/ 人/ [/ 6/ ]/ 提出/ 了/ 基于/ motifs/ 的/ 异常/ 检测/ 算法/ ,/ 它/ 使用/ k/ -/ means/ 算法/ 从/ 滑动/ 窗口/ 中/ 收集/ k/ -/ 代表/ 模式/ (/ motif/ )/ ,/ 然后/ 使用/ 分类器/ 思想/ 来/ 检测/ 异常/ 轨迹/ ./ 其/ 缺点/ 在于/ :/ 实际/ 应用领域/ 很难/ 找到/ 标准/ 的/ 训练/ 数据/ 集/ ./ Lee/ 等/ 人/ [/ 7/ ]/ 提出/ 了/ TRAOD/ 算法/ ./ 该/ 算法/ 先/ 将/ 轨迹/ 划分/ 成/ 线段/ ,/ 以/ 线段/ 表示/ 轨迹/ 局部/ 特征/ (/ 本文/ 称之为/ 基本/ 比较/ 单元/ )/ ,/ 然后/ 使用/ 线段/ Hausdorf/ 距离/ 计算/ 每/ 两个/ 线段/ 之间/ 的/ 距离/ 以/ 表示/ 其间/ 的/ 不/ 匹配/ 性/ ,/ 从而/ 确定/ 异常/ 轨迹/ ./ 此外/ ,/ 为了/ 提高/ 算法/ 效率/ ,/ TRAOD/ 中/ 还/ 给出/ 了/ 一种/ 二/ 阶段/ 划分/ 方法/ 来/ 提高/ 算法/ 效率/ ,/ 即先/ 将/ 轨迹/ 划分/ 成/ 粗粒度/ 的/ 轨迹/ 片段/ ,/ 同时/ 用/ 轨迹/ 片段/ 的/ 起始/ 点/ 和/ 终点/ 的/ 连线/ 表示/ 其/ 局部/ 特征/ ,/ 寻找/ 异常/ 的/ 粗粒度/ 轨迹/ 片段/ ;/ 然后/ 再/ 将/ 异常/ 的/ 粗粒度/ 轨迹/ 片段/ 进行/ 线段/ 划分/ ,/ 寻找/ 其中/ 的/ 异常/ 线段/ ./ TRAOD/ 很/ 好地解决/ 了/ 长/ 轨迹/ 之间/ 不/ 匹配/ 性/ 的/ 计算/ ,/ 但/ 它/ 存在/ 以下/ 几个/ 问题/ :/ 首先/ ,/ 随着/ 轨迹/ 变得/ 越来越/ 长/ ,/ 线段/ 并/ 不能/ 有效/ 地/ 表示/ 轨迹/ 的/ 局部/ 特征/ ./ 例如/ ,/ 应用/ 1/ 中/ 的/ 两条/ 轨迹/ Tr1/ 和/ Tr2/ 尽管/ 拥有/ 不同/ 的/ 运动/ 特征/ ,/ 但/ 构成/ 其/ 的/ 线段/ 集合/ 却/ 极其/ 相似/ ;/ 其次/ ,/ TRAOD/ 使用/ 线段/ 的/ CPU/ 时间/ Hausdorff/ 距离/ 表示/ 两个/ 线段/ 之间/ 的/ 不/ 匹配/ 性/ ,/ 这/ 可能/ 使得/ 算法/ 存在/ 如/ 应用/ 2/ 那样/ 描述/ 的/ 问题/ ;/ 第三/ ,/ 二/ 阶段/ 划分/ 方法/ 的/ 局限性/ 在于/ 要求/ 粗粒度/ 轨迹/ 片段/ 内/ 每个/ 线段/ 的/ 方向/ 要/ 和/ 该/ 片段/ 的/ 开始/ 点/ 和/ 终止/ 点/ 连接/ 而成/ 的/ 线段/ 方向/ 基本/ 保持一致/ ./ 显然/ ,/ 对于/ 复杂/ 轨迹/ 来说/ ,/ 这个/ 条件/ 往往/ 很难/ 得到/ 满足/ ./ 应用/ 1/ ./ 给定/ 两条/ 轨迹/ Tr1/ =/ {/ l1/ ,/ l2/ ,/ l3/ ,/ l4/ ,/ l5/ ,/ l6/ ,/ l7/ ,/ l8/ }/ 和/ Tr2/ =/ {/ l2/ ,/ l4/ ,/ l1/ ,/ l5/ ,/ l7/ ,/ l6/ ,/ l3/ ,/ l8/ }/ ,/ 其中/ 构成/ Tr2/ 的/ li/ 表示/ 其/ 拥有/ 与/ Tr1/ 的/ li/ (/ 0/ </ i/ </ 9/ )/ 相同/ 的/ 长度/ 和/ 方向/ (/ 即/ 除了/ 位置/ 稍微/ 有点/ 不同/ 之外/ ,/ li/ 拥有/ 与/ li/ 相同/ 的/ 特征/ )/ (/ 如图/ 1/ 所示/ )/ ./ 从图/ 中/ 可以/ 看到/ ,/ 尽管/ 两条/ 轨迹/ 拥有/ 完全/ 不同/ 的/ 运动/ 特征/ ,/ 但/ 如果/ 用/ 线段/ 集合/ 来/ 表示/ 轨迹/ ,/ 却/ 发现/ 线段/ 集合/ 拥有/ 几乎/ 相同/ 的/ 运动/ 特征/ ,/ 这/ 显然/ 不是/ 我们/ 所/ 期望/ 的/ 结果/ ./ 因此/ ,/ 对于/ 更长/ 更/ 复杂/ 的/ 轨迹/ 来说/ ,/ 用/ 线段/ 表示/ 其/ 局部/ 特征/ 可能/ 会/ 产生/ 与/ 现实/ 完全/ 不同/ 的/ 实验/ 结果/ ./ 应用/ 2/ ./ 如图/ 1/ 所示/ ,/ 某个/ 邻域/ 内/ 3/ 条/ 轨迹/ Tr1/ ,/ Tr2/ 和/ Tr3/ ./ 从图/ 中/ 可以/ 发现/ ,/ Tr1/ 和/ Tr3/ 拥有/ 较/ 相似/ 的/ 运动/ 特征/ ./ 而/ Tr2/ 处在/ 离/ Tr1/ 更近/ 的/ 位置/ ./ 如果/ 采用/ TRAOD/ 中/ 的/ 线段/ Hausdorff/ 距离/ 那样/ 的/ 绝对/ 距离/ ,/ 就/ 会/ 得到/ Tr2/ 、/ Tr1/ 具有/ 更/ 高/ 的/ 相似/ 度/ ./ 这/ 显然/ 与/ 实际意义/ 不符/ ./ 针对/ 这些/ 问题/ ,/ 本文/ 提出/ 了/ 一种/ 通过/ 确定/ 每个/ 轨迹/ 点/ 的/ 局部/ 异常/ 程度/ 来/ 确定/ 轨迹/ 中/ 异常/ 的/ 新/ 算法/ —/ —/ —/ 基于/ 局部/ 异常/ 度/ 的/ 轨迹/ 异常/ 点/ 检测/ 算法/ (/ TrajectoryOutlierDetectionBasedonLocalOut/ -/ lierDegree/ ,/ TraLOD/ )/ ./ TraLOD/ 主要/ 创新/ 点/ 在于/ :/ (/ 1/ )/ 提出/ 了/ 局部/ 异常/ 度/ 的/ 概念/ ,/ 即/ 赋予/ 每个/ 轨迹/ 点/ 一个/ 0/ ~/ 1/ 的/ 值/ 以/ 表示/ 该点/ 相对/ 于/ 其/ 邻域/ 内/ 轨迹/ 点/ 的/ 异常/ 程度/ ;/ (/ 2/ )/ 引入/ 相对/ 距离/ 的/ 概念/ ./ 参照/ 基于/ 平移/ 的/ Hausdorff/ 距离/ 的/ 思想/ ,/ 定义/ 了/ 基于/ 相对/ 距离/ 的/ 轨迹/ 之间/ 的/ 距离/ 函数/ ,/ 并/ 在/ 此基础/ 上/ 定义/ 了/ 轨迹/ 点/ 的/ 局部/ 异常/ 度/ ;/ (/ 3/ )/ 提出/ 了/ 基于/ R/ -/ Tree/ 和/ 距离/ 特征函数/ 的/ 算法/ 优化/ 方法/ 以/ 提高/ 算法/ 效率/ ./ 2/ 距离/ 函数/ 和/ 局部/ 异常/ 度/ 的/ 定义/ 随着/ 定位/ 技术/ 和/ 用户/ 需求/ 的/ 日益/ 提高/ ,/ 数据挖掘/ 算法/ 所/ 面对/ 的/ 轨迹/ 数据/ 集/ 也/ 在/ 不断/ 地/ 发生变化/ ./ 一方面/ ,/ 每条/ 轨迹/ 的/ 时间/ 和/ 空间/ 区间/ 不断/ 变大/ ./ 例如/ ,/ 飓风/ 经过/ 海洋/ 、/ 陆地/ 、/ 岛屿/ 等/ 区域/ 时会/ 出现/ 不同/ 的/ 运动/ 规律/ ;/ 另一方面/ ,/ 用户/ 和/ 系统对/ 轨迹/ 的/ 精度/ 要求/ 也/ 在/ 不断/ 提高/ ./ 这些/ 都/ 会/ 导致/ 轨迹/ 变得/ 越来越/ 复/ Page3/ 杂/ ./ 针对/ 这种/ 现象/ ,/ 本文/ 引入/ 了/ 局部/ 异常/ 度/ 的/ 概念/ ./ 这里/ 的/ 局部/ 包含/ 两层/ 含义/ :/ 一是/ 每个/ 轨迹/ 点仅/ 和/ 同/ 一条/ 轨迹/ 上/ 的/ 若干个/ 轨迹/ 点有/ 关联/ ,/ 即/ 轨迹/ 间/ 的/ 比较/ 单位/ 是/ 若干个/ 相邻/ 的/ 轨迹/ 点/ 组成/ ;/ 二是/ 每个/ 轨迹/ 点/ 的/ 异常/ 程度/ 的/ 计算/ 仅/ 涉及/ 到/ 其/ 邻域/ 内/ 的/ 轨迹/ 点/ 构成/ 的/ 基本/ 比较/ 单元/ ,/ 即/ 基本/ 比较/ 单元/ 仅/ 和/ 其/ 邻域/ 范围/ 内/ 的/ 基本/ 比较/ 单元/ 相/ 比较/ ,/ 而/ 不是/ 整个/ 数据/ 空间/ ./ 而/ Lee/ 采用/ 线段/ 表示/ 轨迹/ 的/ 局部/ 特征/ ,/ 然后/ 根据/ MLHD/ 来/ 计算/ 轨迹/ 线段/ 之间/ 的/ 距离/ ,/ 但是/ 对于/ 复杂/ 轨迹/ ,/ 线段/ 很难/ 有效/ 表示/ 轨迹/ 的/ 局部/ 特征/ ./ 本文/ 采用/ 的/ 基本/ 比较/ 单元/ 是/ 长度/ 为/ k/ 的/ 轨迹/ 片段/ ./ 这/ 使得/ 两个/ 基本/ 比较/ 单元/ 就/ 变成/ 了/ 两个/ 点数/ 为/ k/ 的/ 点集/ ./ 单从/ 数据/ 构成/ 上/ 看/ ,/ 两个/ 基本/ 比较/ 单元/ 之间/ 的/ 距离/ 计算/ 类似/ 于/ 图像识别/ 中/ 的/ 距离/ 计算/ ,/ 但是/ 轨迹/ 数据/ 具有/ 一些/ 不同于/ 图像/ 数据/ 的/ 特征/ ./ 首先/ ,/ 轨迹/ 检测/ 算法/ 需要/ 检测/ 大量/ 的/ 基本/ 比较/ 单元/ 之间/ 的/ 距离/ ,/ Hausdorff/ 距离/ 的/ 计算/ 复杂度/ 太高/ ;/ 其次/ ,/ Hausdorff/ 距离/ 是/ 无序/ 的/ ,/ 这/ 符合/ 图像匹配/ 的/ 特征/ ,/ 然而/ 轨迹/ 点/ 是/ 有序/ 的/ ./ 最后/ ,/ 按照/ 轨迹/ 特征/ ,/ 基本/ 比较/ 单元/ 仅/ 与其/ 邻域/ 内/ 的/ 基本/ 比较/ 单元/ 相/ 比较/ ,/ 而/ 不是/ 整个/ 数据/ 空间/ ./ 接下来/ ,/ 我们/ 按照/ 基于/ 平移/ 的/ 最小/ Hausdorff/ 距离/ 的/ 思想/ ,/ 并/ 结合/ 轨迹/ 数据/ 的/ 特点/ 来/ 分析/ 轨迹/ 点/ 在/ 其/ 所在/ 基本/ 比较/ 单元/ 中/ 的/ 局部/ 异常/ 度/ ./ 假设/ 轨迹/ 数据/ 集/ S/ =/ {/ Si/ |/ 1/ / i/ / n/ }/ ,/ |/ Si/ |/ =/ mi/ ,/ 其中/ Si/ 表示/ 任一/ 轨迹/ ,/ n/ 表示/ 数据/ 集/ 包含/ 的/ 轨迹/ 数目/ ,/ mi/ 表示/ 轨迹/ Si/ 包含/ 的/ 轨迹/ 点/ 数目/ ./ Sip/ =/ {/ sip/ ,/ …/ ,/ si/ (/ p/ +/ k/ -/ 1/ )/ ,/ p/ +/ k/ -/ 1/ / mi/ }/ ,/ Sjq/ =/ {/ sjq/ ,/ …/ ,/ sj/ (/ q/ +/ k/ -/ 1/ )/ ,/ i/ ≠/ j/ ,/ p/ +/ k/ -/ 1/ / mj/ }/ 分别/ 表示/ 轨迹/ Si/ 和/ Sj/ 任一/ 基本/ 比较/ 单元/ ./ 首先/ ,/ 由于/ 轨迹/ 点/ 是/ 有序/ 的/ ,/ 且/ 基本/ 比较/ 单元/ 长度/ 相同/ ,/ 因此/ ,/ 我们/ 可以/ 将/ dist/ (/ si/ (/ p/ +/ t/ )/ ,/ sj/ (/ q/ +/ t/ )/ )/ (/ 1/ / t/ / k/ )/ 作为/ 轨迹/ 点/ si/ (/ p/ +/ t/ )/ 与/ 基本/ 比较/ 单元/ Sjq/ 的/ 距离/ ,/ 这/ 不仅/ 可/ 保证/ 每个/ 轨迹/ 点/ 有序/ 这个/ 特征/ ,/ 而且/ 其/ 平移/ 变量/ t/ 可以/ 用/ 其/ 所有/ 轨迹/ 点/ si/ (/ p/ +/ t/ )/ 到/ 其/ 对应点/ sj/ (/ q/ +/ t/ )/ 的/ 平均/ 差值/ t/ -/ =/ 1/ // k/ ∑/ k/ -/ 1/ 示/ ./ 因此/ ,/ 轨迹/ 点/ si/ (/ p/ +/ t/ )/ 在/ 基本/ 比较/ 单元/ Sip/ 与/ Sjq/ 的/ 异常/ 度/ LOk/ (/ Si/ (/ p/ +/ t/ )/ |/ Sip/ ,/ Sjq/ )/ 定义/ 如下/ :/ LOk/ (/ si/ (/ p/ +/ t/ )/ |/ Sip/ ,/ Sjq/ )/ =/ (/ dist/ (/ si/ (/ p/ +/ t/ )/ -/ sj/ (/ q/ +/ t/ )/ )/ -/ 1k/ ∑/ k/ -/ 1/ 其中/ ,/ dist/ (/ )/ 表示/ 一种/ 距离/ 函数/ ,/ 如/ L1/ ,/ L2/ …/ (/ 本文/ 采用/ L2/ )/ ./ 显然/ 这个/ 距离/ 是/ 基于/ 平移/ 的/ 最小/ Hausdorff/ 距离/ 的/ 简化/ ,/ 它/ 可以/ 消除/ 相似/ 轨迹/ 之间/ 的/ 公共/ 偏差/ ,/ 但/ 它/ 仍然/ 无法/ 检测/ 出/ 方向/ 相反/ 的/ 异常/ 轨迹/ ./ 为了/ 解决/ 这个/ 问题/ ,/ 下面/ 引入/ 了/ 邻域/ 点集/ 的/ 概念/ ./ 定义/ 1/ ./ 给定/ 一个/ 邻域/ 阈值/ ω/ ,/ 一个/ 轨迹/ 点/ sip/ ,/ 对于/ 任一/ 其它/ 轨迹/ 上/ 的/ 点/ sjq/ ,/ 如果/ (/ sip/ -/ sjq/ )/ / ω/ ,/ 那么/ sjq/ 包含/ 在/ sip/ 的/ ω/ -/ 邻域/ 点集/ ,/ 表示/ 为/ sjq/ ∈/ N/ ω/ (/ sip/ )/ ./ 定义/ 2/ ./ 对于/ 两个/ 基本/ 比较/ 单元/ Sip/ 和/ Sjq/ ,/ 如果/ Sjq/ 所有/ 轨迹/ 点/ 都/ 满足/ sj/ (/ q/ +/ t/ )/ ∈/ N/ ω/ (/ si/ (/ p/ +/ t/ )/ )/ (/ 1/ / t/ / k/ -/ 1/ )/ ,/ 那么/ 称/ Sip/ 和/ Sjq/ 是/ 相近/ 基本/ 比较/ 单元/ ,/ (/ Sip/ ,/ Sjq/ )/ 被/ 称为/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ ./ 按照/ 前面/ 的/ 分析/ ,/ 基本/ 比较/ 单元/ 只/ 和/ 其/ 邻域/ 范围/ 内/ 的/ 其它/ 基本/ 比较/ 单元/ 做/ 比较/ ,/ 因此/ ,/ 轨迹/ 点/ si/ (/ p/ +/ t/ )/ 在/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ sip/ 与/ sjq/ 的/ 局部/ 异常/ 值/ 定义/ 如下/ ./ 定义/ 3/ ./ 给定/ 不同/ 轨迹/ 的/ 两个/ 基本/ 比较/ 单元/ Sip/ 和/ Sjq/ ,/ Sip/ 的/ 轨迹/ 点/ sir/ 在/ 这个/ 相近/ 基本/ 比较/ 单元/ 对/ (/ Sip/ ,/ Sjq/ )/ 的/ 局部/ 异常/ 值/ LODk/ ,/ ω/ (/ Si/ (/ p/ +/ t/ )/ |/ Sip/ ,/ Sjq/ )/ 定义/ 如下/ ./ LODk/ ,/ ω/ (/ sir/ |/ Sip/ ,/ Sjq/ )/ =/ dist/ (/ sir/ -/ sj/ (/ q/ +/ r/ -/ p/ )/ )/ -/ 1k/ ∑/ k/ -/ 1/ 烄/ 烅/ 当/ Sip/ 和/ Sjq/ 相近/ 0/ ,/ 当/ Sip/ 和/ Sjq/ 烆/ 其中/ ,/ dist/ (/ )/ 表示/ 向量/ 的/ 距离/ 值/ ,/ 如/ L1/ ,/ L2/ ,/ …/ (/ 本文/ 采用/ L2/ )/ ./ 定义/ 3/ 给出/ 了/ 轨迹/ 点/ 在/ 其/ 所属/ 的/ 基本/ 比较/ 单元/ 与其/ 相近/ 的/ 基本/ 比较/ 单元/ 的/ 局部/ 异常/ 程度/ ,/ 如果/ 这/ 两个/ 基本/ 比较/ 单元/ 不是/ 相近/ 的/ ,/ 那么/ 该/ 轨迹/ 点/ 的/ 局部/ 异常/ 值/ 在/ 这/ 两个/ 基本/ 比较/ 单元/ 是/ 没有/ 意义/ 的/ (/ 定义/ 3/ 中用/ 0/ 代替/ 其值/ ,/ 然后/ 再/ 结合/ 定义/ 4/ 、/ 定义/ 5/ 实现/ 这个/ 思想/ )/ ./ 定义/ 4/ ./ 假设/ 轨迹/ 点/ sir/ 表示/ 轨迹/ Si/ 中/ 的/ 第/ r/ 个/ 轨迹/ 点/ ,/ Sip/ =/ {/ sip/ ,/ …/ ,/ si/ (/ p/ +/ k/ -/ 1/ )/ |/ max/ (/ 0/ ,/ r/ -/ k/ +/ 1/ )/ / p/ / r/ }/ 表示/ 包含/ 轨迹/ 点/ sir/ 的/ 任一/ 基本/ 比较/ 单元/ ,/ Sjq/ =/ {/ sjq/ ,/ …/ ,/ sj/ (/ q/ +/ k/ -/ 1/ )/ |/ j/ ≠/ i/ ,/ sj/ (/ q/ +/ t/ )/ ∈/ N/ ω/ (/ si/ (/ p/ +/ t/ )/ ,/ 0/ / t/ / k/ -/ 1/ }/ 表示/ 与/ Sip/ 相近/ 的/ 某/ 一/ 基本/ 比较/ 单元/ ,/ Nu/ 表示/ 与/ Sip/ 相近/ 的/ 基本/ 比较/ 单元/ Sjq/ 的/ 个数/ ./ 那么/ 轨迹/ 点/ sir/ 在/ 基本/ 比较/ 单元/ Sip/ 的/ 局部/ 异常/ 值为/ LODk/ ,/ ω/ (/ sir/ |/ Sip/ )/ =/ min/ (/ LODk/ ,/ ω/ (/ sir/ |/ Sip/ ,/ Sjq/ )/ )/ ,/ 当/ Nu/ ≠/ 0/ 烅/ 烄/ 0/ ,/ 烆/ 定义/ 5/ ./ 设/ sir/ 表示/ 轨迹/ Si/ 的/ 第/ r/ 个/ 轨迹/ 点/ ,/ Page4Sip/ =/ {/ sip/ ,/ …/ ,/ si/ (/ p/ +/ k/ -/ 1/ )/ |/ max/ (/ 0/ ,/ r/ -/ k/ +/ 1/ )/ / p/ / r/ }/ 表示/ 任一/ 包含/ 轨迹/ 点/ sir/ 的/ 基本/ 比较/ 单元/ ,/ Np/ 表示/ 与/ Sip/ 具有/ 相近/ 的/ 基本/ 比较/ 单元/ 的/ 轨迹/ 数目/ ./ 那么/ 轨迹/ 点/ sir/ 局部/ 异常/ 值为/ LODk/ ,/ ω/ ,/ λ/ (/ sir/ )/ =/ 烄/ p/ =/ max/ (/ 1/ ,/ r/ -/ k/ +/ 1/ )/ LODk/ ,/ ω/ (/ sir/ |/ Sip/ )/ // (/ Np/ ×/ max/ (/ 1/ ,/ r/ -/ k/ +/ 1/ )/ )/ ,/ 烅/ (/ Np/ ×/ ω/ +/ ∑/ r/ 烆/ ∑/ r/ 其中/ ,/ 相近/ 阈值/ λ/ 表示/ 与/ 轨迹/ 点/ 所在/ 的/ 基本/ 比较/ 单元/ 的/ 轨迹/ 数目/ ./ 按照/ 定义/ 4/ ,/ 当该/ 点/ 所在/ 的/ 基本/ 比较/ 单元/ 都/ 找/ 不到/ 一个/ 相近/ 的/ 基本/ 比价/ 单元/ 时/ ,/ 该/ 轨迹/ 点/ 的/ 局部/ 异常/ 值为/ ω/ ,/ 即/ 它/ 具有/ 最高/ 的/ 局部/ 异常/ 度/ ./ 由于/ 相近/ 的/ 两个/ 基本/ 比较/ 单元/ 的/ 任何/ 一对/ 轨迹/ 点/ 之间/ 的/ 距离/ 都/ 小于/ 邻域/ 阈值/ ω/ ./ 那么/ 轨迹/ 点/ 在/ 这个/ 相近/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 值/ 总是/ 满足/ LODk/ ,/ ω/ (/ Si/ (/ p/ +/ t/ )/ |/ Sip/ ,/ Sjq/ )/ / ω/ ,/ 因此/ ,/ 我们/ 可以/ 推出/ LODk/ ,/ ω/ (/ Sir/ )/ 的/ 取值/ 范围/ 为/ [/ 0/ ,/ ω/ ]/ ./ 当/ LODk/ ,/ ω/ (/ Sir/ )/ =/ ω/ 则/ 表示/ 该/ 轨迹/ 点/ 所在/ 基本/ 比较/ 单元/ 无/ 相近/ 的/ 基本/ 比较/ 单元/ 或是/ 该点/ 在/ 包含/ 该点/ 的/ 所有/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 值/ 都/ 为/ ω/ ;/ 当/ LODk/ ,/ ω/ (/ Sir/ )/ =/ 0/ 则/ 表示/ 该点/ 在/ 包含/ 其/ 的/ 所有/ 相近/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 值/ 都/ 为/ 0/ ,/ 即/ 对于/ 每个/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ ,/ 平移/ 之后/ 的/ 该点/ 与其/ 对应点/ 相/ 重合/ ./ 将/ 等式/ (/ 2/ )/ 进行/ 归一化/ 处理/ ,/ 就/ 可以/ 得到/ 归一化/ 的/ 局部/ 异常/ 度/ :/ LODk/ (/ sir/ |/ Sip/ ,/ Sjq/ )/ =/ (/ 1/ // ω/ )/ (/ dist/ (/ sir/ -/ sj/ (/ r/ +/ q/ -/ p/ )/ )/ -/ (/ 1/ // k/ )/ ∑/ k/ -/ 1/ 烄/ 烅/ 0/ ,/ 烆/ 轨迹/ 点/ 在/ 其/ 所在/ 基本/ 比较/ 单元/ 的/ 局部/ 异常/ 度/ :/ LODk/ (/ sir/ |/ Sip/ )/ =/ 1/ // Numin/ (/ LODk/ ,/ ω/ (/ sir/ |/ Sip/ ,/ Sjq/ )/ )/ ,/ 当/ Nu/ ≠/ 0/ 烅/ 烄/ 0/ ,/ 烆/ 轨迹/ 点/ 的/ 局部/ 异常/ 度为/ LODk/ ,/ λ/ (/ sir/ )/ =/ (/ 烄/ p/ =/ max/ (/ 1/ ,/ r/ -/ k/ +/ 1/ )/ LODk/ ,/ ω/ (/ sir/ |/ Sip/ (/ Np/ ×/ max/ (/ 1/ ,/ r/ -/ k/ +/ 1/ )/ )/ ,/ 烅/ (/ Np/ +/ ∑/ r/ 烆/ 3Naive/ 算法/ 假设/ 轨迹/ 数据/ 集/ S/ =/ {/ Si/ |/ 1/ / i/ / n/ }/ ,/ |/ Si/ |/ =/ mi/ 表示/ 每条/ 轨迹/ 的/ 长度/ ,/ Sip/ 为/ Si/ 的/ 任一/ 基本/ 比较/ 单元/ ,/ Sjq/ 为/ Sj/ 的/ 任一/ 基本/ 比较/ 单元/ ./ Naive/ 算法/ 就是/ 将/ 每条/ 轨迹/ 的/ 每个/ 基本/ 比较/ 单元/ 与/ 其它/ 轨迹/ 的/ 每个/ 基本/ 比较/ 单元/ 作/ 比较/ ,/ 计算/ 其/ 每个/ 轨迹/ 点/ 在/ 这/ 两个/ 基本/ 比较/ 单元/ 的/ 局部/ 异常/ 度/ ,/ 最后/ 求其/ 平均值/ 就是/ 该/ 轨迹/ 点/ 的/ 局部/ 异常/ 度/ ./ 图/ 2/ 给出/ Naive/ 算法/ 的/ 伪/ 代码/ ./ 实现/ 思想/ 就是/ 对/ 每条/ 目标/ 轨迹/ Si/ ,/ 逐一/ 计算/ Si/ 的/ 每个/ 基本/ 比较/ 单元/ 的/ 局部/ 异常/ 度/ (/ 即/ 与/ 其它/ 轨迹/ 的/ 基本/ 比较/ 单元/ 逐一/ 比较/ ,/ 数组/ outlier/ 用来/ 存放/ 目标/ 轨迹/ 每个/ 点/ 的/ 累计/ 局部/ 异常/ 度值/ 和/ 该/ 点/ 对/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 度/ 个数/ )/ (/ 第/ 2/ ~/ 8/ 行/ )/ ;/ 接着/ ,/ 根据/ outlier/ 和/ 定义/ 计算/ 轨迹/ 点/ 的/ 局部/ 异/ 长度/ (/ 第/ 9/ ~/ 14/ 行/ )/ ./ NaiveCompLOD/ (/ S/ ,/ k/ ,/ ω/ )/ 1/ ./ foreachtrajectorySido2/ ./ Initializearrayoutlier/ [/ mi/ ]/ 3/ ./ foreachtrajectorySj/ (/ i/ ≠/ j/ )/ do4/ ./ foreach/ (/ Sip/ ,/ Sjq/ )/ 5/ ./ ifSipisclosedtoSjqthen6/ ./ foreachpointsi/ (/ p/ +/ t/ )/ inSipdo7/ ./ outlier/ [/ p/ +/ t/ ]/ ./ val/ +/ =/ LODk/ (/ sir/ )/ |/ Sip/ ,/ Sjq/ )/ ;/ 8/ ./ outlier/ [/ p/ +/ t/ ]/ ./ num/ ++/ ;/ 9/ ./ foreachpointsitinSido10/ ./ ifoutlier/ [/ t/ ]/ ./ num/ !/ =/ 0then11/ ./ LODk/ (/ sit/ )/ =/ outlier/ [/ t/ ]/ ./ val/ // outlier/ [/ t/ ]/ ./ num/ ;/ 12/ ./ else13/ ./ LODk/ (/ sit/ )/ =/ 1/ ;/ 14/ ./ OutputLODToFile/ (/ sit/ ,/ LODk/ (/ sit/ )/ )/ 下面/ 以/ 距离/ 计算/ 为/ 主要/ 代价/ 分析/ 其/ 计算/ 复杂度/ ./ 对于/ 一条/ 轨迹/ Si/ ,/ 其所/ 包含/ 的/ 长度/ 为/ k/ 的/ 基本/ 比较/ 单元/ 数目/ 为/ mi/ -/ k/ +/ 1/ ,/ 那么/ 对于/ 两个/ 轨迹/ Si/ 和/ Sj/ ,/ 需要/ 比较/ 的/ 基本/ 比较/ 单元/ 次数/ 为/ (/ mi/ -/ k/ +/ 1/ )/ ·/ (/ mj/ -/ k/ +/ 1/ )/ ,/ 而/ 比较/ 两个/ 基本/ 比较/ 单元/ 的/ 计算/ 复杂度/ 为/ u/ (/ 1/ / u/ / k/ )/ ,/ 因此/ ,/ 对于/ 两个/ 轨迹/ Si/ 和/ Sj/ ,/ 用/ Naive/ 算法/ 检测/ 其/ 是否/ 全局/ 匹配/ 的/ 计算/ 复杂度/ cost/ (/ Si/ ,/ Sj/ )/ 为/ Page5cost/ (/ Si/ ,/ Sj/ )/ =/ (/ mi/ -/ k/ +/ 1/ )/ ×/ (/ mj/ -/ k/ +/ 1/ )/ ×/ u/ (/ 8/ )/ 轨迹/ 挖掘/ 的/ 数据量/ 通常/ 比较/ 大/ ,/ 我们/ 不/ 考虑/ 缓存/ 先前/ 计算/ 得到/ 的/ 距离/ ./ 因此/ ,/ Naive/ 算法/ 的/ 总/ 计算/ 复杂度/ 为/ cost/ (/ S/ )/ =/ ∑/ n/ 假设/ 每条/ 轨迹/ 长度/ 相同/ ,/ 即/ mi/ =/ m/ ,/ 那么/ 等式/ (/ 9/ )/ 转化/ 为/ cost/ (/ Si/ ,/ Sj/ )/ =/ n/ (/ n/ -/ 1/ )/ (/ m/ -/ k/ +/ 1/ )/ 2/ ×/ u/ (/ 10/ )/ 4/ 基于/ R/ -/ Tree/ 的/ 异常/ 轨迹/ 检测/ 算法/ 对于/ 数据量/ 及其/ 庞大/ 的/ 轨迹/ 数据/ 集/ 来说/ ,/ Naive/ 算法/ 的/ 计算/ 代价/ 是/ 昂贵/ 的/ ./ 在/ 传统/ 数据挖掘/ 领域/ ,/ 引入/ 索引/ 是/ 常用/ 的/ 算法/ 优化/ 方法/ ./ 但是/ ,/ 空间/ 索引/ 算法/ R/ -/ Tree/ 并/ 不/ 适合/ 用来/ 索引/ 时空/ 数据/ ./ 尽管/ 很多/ 研究者/ 提出/ 了/ 一些/ 有效/ 的/ 索引/ 结构/ (/ 如/ TPR/ / -/ Tree/ [/ 9/ ]/ ,/ LUR/ -/ Tree/ [/ 10/ ]/ )/ ,/ 但/ 当前/ 还/ 不/ 存在/ 一种/ 公认/ 有效/ 的/ 时空/ 数据/ 索引/ 结构/ ./ 因此/ ,/ 直接/ 对/ 时空/ 数据/ 建立/ 索引/ 并/ 不/ 可行/ ./ TRAOD/ [/ 6/ ]/ 引入/ 的/ 二/ 阶段/ 划分/ 尽管/ 加速/ 异常/ 轨迹/ 的/ 检测/ ,/ 但/ 这种/ 方法/ 的/ 局限性/ 在于/ 它/ 必须/ 保证/ 粗粒度/ 的/ 轨迹/ 片段/ 的/ 方向/ 与其/ 内部/ 的/ 细粒度/ 轨迹/ 片段/ 的/ 方向/ 保持一致/ ,/ 否则/ 算法/ 的/ 准确性/ 将/ 明显/ 下降/ ./ 但/ 这个/ 局限性/ 使得/ 二/ 阶段/ 划分/ 并/ 不/ 适合/ 在/ 复杂/ 轨迹/ 数据/ 集/ 使用/ ./ 此外/ ,/ 由于/ TraLOD/ 中/ 轨迹/ 片段/ 是/ 相互/ 重合/ 的/ ,/ 二/ 阶段/ 划分/ 方法/ 会/ 导致/ 某些/ 轨迹/ 片段/ 丢失/ ./ 由于/ 在/ TraLOD/ 中/ ,/ 每个/ 轨迹/ 点/ 的/ 局部/ 异常/ 度仅/ 取决于/ 同/ 一条/ 轨迹/ 的/ 相邻/ 轨迹/ 点/ 以及/ 其/ 对应/ 的/ 邻域/ 点集/ 内/ 的/ 轨迹/ 点相/ 比较/ ,/ 即仅/ 与/ 目标/ 轨迹/ 点/ 的/ 邻域/ 内/ 的/ 轨迹/ 相关/ ./ 而且/ ,/ 我们/ 并/ 不/ 考虑/ 轨迹/ 点/ 的/ 绝对/ 时间/ ,/ 即该/ 轨迹/ 数据/ 集/ 可以/ 看成/ 空间数据/ 集/ ./ 因此/ ,/ 除了/ 将/ 轨迹/ 数据/ 集/ 按照/ 轨迹/ 顺序/ 存放/ 之外/ ,/ TraLOD/ 框架/ 还/ 引入/ R/ -/ Tree/ 来/ 索引/ 所有/ 轨迹/ 点以/ 实现/ 快速/ 地/ 找出/ 所有/ 可能/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ ./ TraLOD/ 主要/ 实现/ 过程/ 分为/ 两个/ 阶段/ :/ 首先/ ,/ 算法/ 利用/ R/ -/ Tree/ 和/ 两条/ 轨迹/ 的/ 距离/ 特征/ 矩阵/ 找出/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ ,/ 然后/ 确定/ 其中/ 每个/ 轨迹/ 点/ 在/ 这个/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 度/ ./ 4.1/ 数据/ 存储/ 结构/ TraLOD/ 采用/ 的/ 数据结构/ 主要/ 由/ 三个/ 部分/ 构成/ :/ 存储/ 轨迹/ 点/ 的/ 数据文件/ 、/ 根据/ 轨迹/ 号/ 索引/ 所有/ 轨迹/ 点/ 的/ B/ +/ -/ Tree/ 和/ 按/ 空间/ 位置/ 索引/ 所有/ 轨迹/ 点/ 的/ R/ -/ Tree/ ./ 即/ 所有/ 轨迹/ 数据/ 按照/ 轨迹/ 编号/ 和/ 点/ 的/ 顺序/ 存放/ 在/ 一个/ 二进制/ 文件/ 中/ ./ 系统/ 在/ 轨迹/ 编号/ 和/ 点/ 序号/ 上/ 建立/ B/ +/ -/ Tree/ 索引/ ,/ 并/ 为了/ 实现/ 对/ R/ -/ Tree/ 的/ 支持/ ,/ 对/ 轨迹/ 点/ 的/ 经纬度/ 坐标/ 建立/ R/ -/ Tree/ 索引/ ./ 相对/ 于/ Naive/ 算法/ ,/ 这种/ 数据结构/ 多/ 了/ 一个/ R/ -/ tree/ 索引/ (/ 作为/ 空间数据/ 索引/ 技术/ 的/ 典型/ 算法/ ,/ R/ -/ Tree/ 通常/ 都/ 被/ 会/ 存储/ 轨迹/ 数据/ 的/ 数据库/ 支持/ )/ ./ 此外/ ,/ 由于/ R/ -/ tree/ 是/ 一个/ 以/ 矩形框/ 为/ 单元/ 的/ 索引/ 算法/ ,/ 而/ 轨迹/ 点/ 的/ ω/ -/ 邻域/ 区域/ 是/ 一个/ 圆形/ 区域/ ,/ 因此/ ,/ 进行/ R/ -/ tree/ 查询/ 时/ ,/ 必须/ 经过/ 一定/ 的/ 距离/ 计算/ 来/ 确定/ 轨迹/ 点/ 的/ 领域/ 点集/ ./ 4.2/ 距离/ 特征/ 矩阵/ 为了/ 方便/ 描述/ ,/ 在/ 描述/ TraLOD/ 实现/ 过程/ 之前/ ,/ 先/ 引入/ 距离/ 特征/ 矩阵/ 的/ 概念/ ./ 假设/ 给定/ 两条/ 轨迹/ A/ =/ {/ a1/ ,/ …/ ,/ an/ }/ 和/ B/ =/ {/ b1/ ,/ …/ ,/ bn/ }/ ,/ 那么/ A/ 、/ B/ 间/ 的/ 距离/ 特征函数/ 可以/ 用/ 一个/ 由/ 元素/ (/ ai/ ,/ bj/ )/ 组成/ 的/ 矩阵/ 来/ 表示/ ./ 对于/ 给定/ 阈值/ ω/ ,/ 将/ 矩阵/ 中/ dist/ (/ ai/ ,/ bj/ )/ >/ ω/ 的/ 元素/ 置成/ 0/ ,/ 那么/ ,/ 对于/ 大多数/ 复杂/ 轨迹/ 来说/ ,/ 它们/ 之间/ 的/ 距离/ 特征/ 矩阵/ 通常/ 都/ 是/ 稀疏/ 矩阵/ ./ 下面/ 给出/ 正/ 对角/ 序号/ 和/ 正/ 对角/ 相邻/ 的/ 概念/ ./ 定义/ 6/ ./ 矩阵/ 中/ 元素/ (/ ai/ ,/ bj/ )/ 的/ 正/ 对角/ 序号/ 是/ 其/ 行号/ 和/ 列/ 号/ 之/ 差/ ,/ 表示/ 为/ pssn/ (/ ai/ ,/ bj/ )/ =/ i/ -/ j/ ./ 定义/ 7/ ./ 假设/ 矩阵/ 的/ 两个/ 元素/ (/ ai/ ,/ bj/ )/ 和/ (/ ax/ ,/ by/ )/ 的/ 正/ 对角/ 序号/ 相同/ ,/ 如果/ 满足/ |/ i/ -/ x/ |/ =/ 1/ ,/ 那么/ 称/ (/ ai/ ,/ bj/ )/ 和/ (/ ax/ ,/ by/ )/ 是/ 正/ 对角/ 相邻/ ./ 按照/ 上面/ 的/ 定义/ ,/ 两个/ 相近/ 的/ 基本/ 比较/ 单元/ 其实/ 就是/ 这/ 两条/ 轨迹/ 构成/ 的/ 距离/ 特征/ 矩阵/ 中/ k/ 个/ 正/ 对角/ 相邻/ 的/ 非/ 0/ 元素/ ./ 4.3/ 算法/ 实现/ 按照/ 上/ 一节/ 的/ 分析/ ,/ 搜索/ 相近/ 的/ 基本/ 比较/ 单元/ 就/ 转变/ 为/ 搜索/ 目标/ 轨迹/ 与/ 其它/ 轨迹/ 的/ 距离/ 特征/ 矩阵/ 中/ 所有/ k/ 个/ 正/ 对角/ 相邻/ 的/ 非/ 0/ 元素/ ./ 因此/ ,/ TraLOD/ 的/ 实现/ 思想/ 如下/ (/ 伪/ 代码/ 如图/ 3/ 所示/ )/ :/ 首先/ ,/ 针对/ 每条/ 目标/ 轨迹/ ,/ 借助于/ R/ -/ tree/ 找出/ 该/ 轨迹/ 中/ 所有/ 轨迹/ 点/ 的/ 邻域/ 点集/ {/ (/ sip/ ,/ sjq/ )/ |/ dist/ (/ sip/ ,/ sjq/ )/ / ω/ }/ ,/ 将/ 其/ 放入/ 一个/ 按/ (/ 比较/ 轨迹/ Sj/ 编号/ ,/ 正/ 对角/ 序号/ ,/ 点/ 在/ 轨迹/ 中/ 位置/ )/ 排序/ 的/ 堆栈/ stackNeigh/ (/ 当该/ 堆栈/ 中/ 元素/ 过多时/ ,/ 部分/ 元素/ 会/ 保存/ 在/ 磁盘/ 文件/ )/ (/ 第/ 1/ 行/ ,/ 由/ 函数/ QueryRTree/ 实现/ )/ ./ 接着/ ,/ 由于/ 距离/ 特征/ 矩阵/ 中正/ 对角/ 相邻/ 的/ 元素/ 在/ 堆栈/ 中/ 的/ 存放/ 位置/ 肯定/ 是/ 相邻/ 的/ ,/ 所以/ ,/ 要/ 逐一/ 从/ 堆栈/ 中/ 取出/ 栈顶/ 元素/ ,/ 判断/ 其/ 和/ 之前/ 取出/ 的/ 元素/ 是否/ 处在/ 同一个/ 距离/ 特征/ 矩阵/ 、/ 是否是/ 正/ 对角/ 相邻/ ,/ 并作/ 相应/ 的/ 处理/ ,/ 计算/ 轨迹/ 点/ 在/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 度/ (/ 第/ 3/ ~/ 15/ 行/ )/ ;/ Page6/ 最后/ ,/ 按照/ 前面/ 计算/ 的/ 轨迹/ 点/ 在/ 相近/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 度/ 计算/ 每个/ 轨迹/ 点/ 的/ 局部/ 异常/ 度/ (/ 第/ 16/ ~/ 21/ 行/ )/ ./ ComputingLOD/ (/ k/ ,/ ω/ )/ 1/ ./ ForeachSi/ ,/ do2/ ./ Initializeoutlier/ ;/ 3/ ./ ComputingLODofOne/ (/ Si/ ,/ k/ ,/ ω/ )/ ;/ ComputingLODofOne/ (/ Si/ ,/ k/ ,/ ω/ )/ 1/ ./ stackNeigh/ =/ QueryRTree/ (/ Si/ ,/ ω/ )/ ;/ 2/ ./ cur/ _/ traj/ =/ -/ 1/ ,/ cur/ _/ pos/ =/ -/ 1/ ,/ cur/ _/ pssn/ =/ -/ MAXVAL/ ;/ 3/ ./ while/ (/ stackNeighisn/ ’/ tNULL/ )/ do4/ ./ curEn/ =/ stackNeigh/ ./ RevTop/ (/ )/ ;/ 5/ ./ If/ (/ curEn/ ./ traj/ !/ =/ cur/ _/ traj/ )/ or/ (/ curEn/ ./ pssn/ !/ =/ 6/ ./ if/ (/ CloseUnitSet/ ./ Size/ (/ )/ / k/ )/ then7/ ./ CompLODofSeg/ (/ CloseUnitSet/ ,/ outlier/ ,/ k/ ,/ ω/ )/ ;/ 8/ ./ if/ (/ curEn/ ./ traj/ !/ =/ cur/ _/ traj/ )/ then9/ ./ cur/ _/ traj/ =/ curEn/ ./ TrajID/ ;/ 10/ ./ cur/ _/ pssn/ =/ curEn/ ./ pssn/ ;/ 11/ ./ elseif/ (/ curEn/ ./ pssn/ !/ =/ cur/ _/ pssn/ )/ then12/ ./ cur/ _/ pssn/ =/ curEn/ ./ pssn/ ;/ 13/ ./ CloseUnitSet/ ./ Size/ (/ )/ =/ 0/ ;/ 14/ ./ CloseUnitSet/ ./ addEntry/ (/ curEn/ )/ ;/ 15/ ./ curPos/ =/ curEn/ ./ pos/ ;/ 16/ ./ foreachpointsirinoutlierdo17/ ./ if/ (/ outlier/ [/ r/ ]/ ./ num/ !/ =/ 0/ )/ 18/ ./ LOD/ (/ sir/ )/ =/ outlier/ [/ r/ ]/ ./ val/ // outlier/ [/ r/ ]/ ./ num/ ;/ 19/ ./ else20/ ./ LOD/ (/ sir/ )/ =/ 1/ ;/ 21/ ./ OutputLODToFile/ (/ sit/ ,/ LODk/ (/ sit/ )/ )/ ;/ CompLODofSeg/ (/ CloseUnitSet/ ,/ outlier/ ,/ k/ ,/ ω/ )/ 1/ ./ closeUnitArray/ =/ GetCloseUnit/ (/ CloseUnitSet/ ,/ k/ )/ ;/ 2/ ./ foreachentryCloseUnitinCloseUnitArraydo3/ ./ CompLODofUnit/ (/ CloseUnit/ ,/ outlier/ ,/ k/ ,/ ω/ )/ ;/ 算法/ 中/ ,/ 函数/ CompLODofSeg/ 用来/ 计算/ 其中/ 目标/ 轨迹/ 点/ 在/ 相近/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 值/ ,/ 其/ 包含/ 4/ 个/ 输入/ 参数/ :/ 相邻/ 元素/ 数组/ CloseUnitSet/ 用来/ 存放/ 正/ 对角/ 相邻/ 的/ 基本/ 比较/ 单元/ 对/ ;/ 两个/ 参数/ k/ ,/ ω/ ;/ 局部/ 异常/ 度/ 数组/ outlier/ ./ 该/ 函数/ 从/ CloseUnitSet/ 取出/ 相近/ 基本/ 比较/ 单元/ 对/ (/ 个数/ 为/ CloseUnitSet/ 数组/ 个数/ -/ k/ +/ 1/ ,/ 每个/ 相近/ 基本/ 比较/ 单元/ 对/ 对应/ k/ 个/ 正/ 对角/ 相邻/ 的/ 数组/ 元素/ )/ ;/ 然后/ 对/ 每个/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ ,/ 按照/ 等式/ (/ 5/ )/ 计算/ 每个/ 轨迹/ 点/ 在/ 该/ 基本/ 比较/ 单元/ 对/ 的/ 局部/ 异常/ 度/ ,/ 并/ 保存/ 其/ 的/ 最小/ 局部/ 异常/ 度值/ (/ 由/ 函数/ CompLODofUnit/ 实现/ )/ ./ 4.4/ 性能/ 分析/ 本节/ 将/ 以/ 轨迹/ 点/ 之间/ 的/ 距离/ 计算/ 作为/ 主要/ 代价/ 来/ 分析/ 算法/ 性能/ ./ 由于/ 在/ 搜索/ 过程/ 仅/ 有/ R/ -/ Tree/ 搜索/ 需要/ 距离/ 计算/ ,/ 因此/ 我们/ 仅/ 考虑/ R/ -/ Tree/ 搜索/ 和/ 计算/ 阶段/ 的/ 计算/ 代价/ ./ 各个/ 参数/ 说明/ 如表/ 1/ 所示/ ./ 假设/ 轨迹/ 数据/ 集/ S/ =/ {/ Si/ |/ 1/ / i/ / n/ }/ ,/ |/ Si/ |/ =/ mi/ 表示/ 每条/ 轨迹/ 的/ 长度/ ,/ 轨迹/ 数据/ 空间/ 的/ 整个/ 区域/ 为/ L/ ×/ L/ ,/ 且/ 轨迹/ 点/ 在/ 整个/ 数据/ 空间/ 均匀分布/ ,/ 则/ 轨迹/ Si/ 每个/ 点/ 的/ 单位/ 区域/ 内且/ 不/ 属于/ Si/ 的/ 轨迹/ 点/ 数目/ 为/ 变量名/ S/ ω/ -/ ERS/ ω/ -/ IRNtpiNi/ 单位/ 面积/ 中/ 包含/ 的/ 轨迹/ 点/ 数目/ (/ 不/ 包含/ 轨迹/ Si/ )/ Ntotal/ _/ point/ 总/ 的/ 轨迹/ 点/ 数目/ Ntotal/ _/ bcu/ 总/ 的/ 基本/ 比较/ 单元/ 对/ 数目/ 首先/ ,/ ω/ -/ 邻域/ 是/ 圆形/ 区域/ ,/ 而/ R/ -/ Tree/ 是/ 矩形/ 区域/ 搜索/ ,/ 因此/ ,/ 对于/ 每个/ 轨迹/ 点/ ,/ 算法/ 必须/ 检查/ 其/ ω/ -/ 圆形/ 邻域/ 的/ 内接/ 矩形/ 和/ 外接/ 矩形/ 之间/ 的/ 点/ 是否/ 处在/ ω/ -/ 邻域/ 之内/ ,/ 则/ 搜索/ Si/ 的/ 每/ 一/ 轨迹/ 点/ 的/ 计算/ 复杂度/ 为/ Ntpi/ =/ (/ S/ ω/ -/ ER/ -/ S/ ω/ -/ IR/ )/ // L2/ ×/ Ni/ =/ 2/ ω/ 2/ // L2/ ∑/ j/ ≠/ i/ ,/ j/ =/ 1/ …/ n/ 搜索/ R/ -/ Tree/ 的/ 计算/ 复杂度/ 为/ costq/ =/ Ntotal/ _/ point/ ×/ Ntpi/ =/ ∑/ n/ 其次/ ,/ 在/ 计算/ 阶段/ ,/ 由于/ 每个/ 非/ Si/ 的/ 轨迹/ 点/ 处在/ Si/ 的/ 某个/ 轨迹/ 点/ 的/ ω/ -/ 邻域/ 之内/ 的/ 概率/ 为/ π/ ω/ 2/ // L2/ ,/ Si/ 的/ 某个/ 基本/ 比较/ 单元/ Sip/ 存在/ 一条/ 相近/ 的/ 基本/ 比较/ 单元/ 的/ 概率/ 为/ (/ π/ ω/ 2/ // L2/ )/ k/ ./ 而/ 总/ 的/ 基本/ 比较/ 单元/ 对/ 的/ 数目/ 为/ Ntotal/ _/ bcu/ =/ ∑/ ncostc/ =/ Ntotal/ _/ bcu/ ×/ k/ ×/ (/ π/ ω/ 2/ // L2/ )/ k/ 计算/ 阶段/ 的/ 总/ 代价/ 为/ 根据/ 等式/ (/ 13/ )/ 和/ 等式/ (/ 15/ )/ ,/ 该/ 算法/ 总/ 的/ 计算/ 代价/ 为/ cost/ =/ costq/ +/ costc/ =/ ∑/ n/ 假设/ 每条/ 轨迹/ 的/ 长度/ 相同/ ,/ 即/ mi/ =/ m/ ,/ 又/ 由于/ ω/ / L/ ,/ 且/ k/ / 2/ ,/ 则/ 等式/ (/ 16/ )/ 可以/ 简化/ 为/ cost/ =/ n/ (/ n/ -/ 1/ )/ (/ m2/ )/ 2/ ω/ 2Page7n/ (/ n/ -/ 1/ )/ (/ m/ -/ k/ +/ 1/ )/ 2k/ (/ 槡/ π/ ω/ // L/ )/ 2k/ =/ n/ (/ n/ -/ 1/ )/ m2/ ω/ 2/ ≈/ 2n/ (/ n/ -/ 1/ )/ m2/ ω/ 2/ // L2/ 由于/ 复杂/ 轨迹/ 长度/ m/ / k/ ,/ 根据/ 等式/ (/ 10/ )/ 和/ 等式/ (/ 17/ )/ 得到/ TraLOD/ 和/ Naive/ 算法/ 的/ 性能/ 之/ 比/ 由于/ ω/ / L/ ,/ u/ ≈/ L/ ,/ 所以/ TraLOD/ 性能/ 要/ 大大/ 优于/ Naive/ 算法/ ,/ 下面/ 实验/ 也/ 证实/ 了/ 该/ 结果/ ./ 5/ 实验/ 结果/ 基于/ 本文/ 提出/ 的/ 轨迹/ 检测/ 算法/ ,/ 笔者/ 开发/ 出/ 异常/ 轨迹/ 检测/ 系统/ TrajDetector/ ./ 该/ 系统/ 的/ 开发/ 环境/ 是/ Visual/ C++/ 6.0/ ,/ 操作系统/ 为/ WindowsXP/ ./ 实验/ 硬件/ 环境/ 为/ :/ CPU/ 为/ Centrino22/ ./ 6GHz/ ,/ 内存/ 为/ 512GB/ ./ R/ -/ Tree/ 采用/ 的/ 是/ Beckmann/ [/ 11/ ]/ 提出/ 的/ R/ / -/ tree/ ①/ ./ 实验/ 数据/ 集/ 来自/ 真实/ 的/ 飓风/ 数据/ ②/ ,/ 该/ 数据/ 包括/ 飓风/ 的/ 经纬度/ 位置/ 信息/ 、/ 最大/ 中心/ 风力/ 、/ 中心/ 压力/ 等/ ,/ 本文/ 抽取/ 其中/ 的/ 经度/ 、/ 纬度/ 的/ 数据项/ 作为/ 实验/ 数据/ ./ 本文/ 采用/ 的/ 实验/ 数据/ 有/ 两个/ :/ (/ 1/ )/ 东/ 太平洋/ 飓风/ 数据/ 集/ ./ 该/ 数据/ 集/ 记载/ 了/ 1949/ 年/ 到/ 2006/ 年/ 的/ 东/ 太平洋/ 上/ 飓风/ 移动/ 数据/ ,/ 包括/ 35986/ 个点/ 组成/ 的/ 813/ 条/ 轨迹/ ;/ (/ 2/ )/ 西太平洋/ 飓风/ 数据/ 集/ ./ 该/ 数据/ 集/ 记载/ 了/ 1949/ 年/ 到/ 2008/ 年/ 的/ 西太平洋/ 上/ 飓风/ 留下/ 的/ 移动/ 轨迹/ ,/ 包括/ 17691/ 个点/ 组成/ 的/ 565/ 条/ 轨迹/ ./ 5.1/ 参数/ 影响/ TraLOD/ 涉及/ 到/ 3/ 个/ 参数/ :/ 邻域/ 阈值/ ω/ 、/ 基本/ 比较/ 单元/ 的/ 长度/ k/ 和/ 相近/ 阈值/ λ/ ./ 下面/ 我们/ 来/ 讨论/ 这图/ 4/ 不同/ ω/ (/ k/ 或/ λ/ )/ 值/ 的/ CPU/ 时间/ 3/ 个/ 参数/ 对/ 算法/ 性能/ 和/ 轨迹/ 点/ 的/ 局部/ 异常/ 度/ LOD/ 的/ 影响/ ./ 实验/ 数据/ 集/ 采用/ 东/ 太平洋/ 飓风/ 数据/ 集/ ./ 5.1/ ./ 1/ 参数/ 对/ 算法/ 性能/ 的/ 影响/ 邻域/ 阈值/ ω/ 、/ 基本/ 比较/ 单元/ 的/ 长度/ k/ 和/ 相近/ 阈值/ λ/ 对/ 算法/ 性能/ 的/ 影响/ 是/ 不同/ 的/ ./ 对/ 算法/ 性能/ 影响/ 最大/ 的/ 参数/ 是/ 邻域/ 阈值/ ω/ ./ 图/ 4/ 显示/ 了/ 随着/ ω/ ,/ k/ 或/ λ/ 的/ 变化/ (/ ω/ 从/ 1/ ~/ 10/ ,/ k/ 从/ 6/ ~/ 15/ ,/ λ/ 从/ 6/ ~/ 15/ )/ ,/ 算法/ 所/ 花费/ 的/ CPU/ 时间/ (/ 默认/ 参数值/ ω/ =/ 5/ ,/ k/ =/ 10/ ,/ λ/ =/ 10/ )/ ./ 从图/ 中/ 可以/ 看到/ ,/ 影响/ 最大/ 的/ 是/ 参数/ ω/ ,/ 因为/ 它/ 的/ 变化/ 会/ 直接/ 影响/ 轨迹/ 点/ 的/ 邻域/ 点/ 集中/ 的/ 点数/ ./ 当/ ω/ 等于/ 1/ 时/ ,/ 算法/ 的/ 执行/ 时间/ 极少/ (/ 仅/ 有/ 5s/ )/ ,/ 这/ 是因为/ 此时/ 每个/ 轨迹/ 点/ 的/ 邻域/ 点集/ 包含/ 的/ 点/ 都/ 很少/ ,/ 其/ 所在/ 基本/ 比较/ 单元/ 的/ 相近/ 基本/ 比较/ 单元/ 更/ 少/ ,/ 从而/ 导致/ 算法/ 的/ 执行/ 时间/ 大大降低/ ,/ 但/ 随着/ ω/ 的/ 增大/ ,/ 算法/ 的/ 执行/ 时间/ 快速/ 增大/ ,/ 当/ ω/ 等于/ 10/ 时/ ,/ 算法/ 的/ 执行/ 时间/ 已经/ 接近/ 1000s/ ./ 因为/ 它/ 要/ 检索/ 所有/ 可能/ 的/ 基本/ 比较/ 单元/ ./ 参数/ k/ 对/ 算法/ 性能/ 的/ 影响/ 就/ 比较/ 少/ ./ 图/ 4/ (/ a/ )/ 显示/ 了/ 改变/ 参数/ k/ 值/ (/ ω/ =/ 5/ ,/ k/ =/ 6/ ~/ 15/ ,/ λ/ =/ 10/ )/ 时/ ,/ 算法/ 执行/ 时间/ 的/ 变化/ 情况/ ./ 显然/ ,/ 随着/ k/ 的/ 增加/ ,/ 算法/ 的/ 执行/ 时间/ 稍微/ 有点/ 减少/ ,/ 这/ 是因为/ k/ 的/ 增大/ 会/ 导致/ 每个/ 轨迹/ 点/ 所在/ 基本/ 比较/ 单元/ 所/ 对应/ 的/ 相近/ 基本/ 比较/ 单元/ 会/ 减少/ ,/ 从而/ 导致/ 算法/ 的/ 计算/ 阶段/ 中/ 的/ 计算/ 时间/ 减少/ ./ 该值/ 变化/ 不大/ 的/ 原因/ 是/ :/ 如/ 算法/ 性能/ 分析/ 中/ 所述/ 的/ ,/ 算法/ 的/ 主要/ 计算/ 时间/ 主要/ 集中/ 在/ R/ -/ Tree/ 的/ 查找/ 阶段/ ./ 图/ 4/ (/ b/ )/ 同样/ 也/ 显示/ 了/ 随着/ 参数/ k/ 变化/ (/ 从/ 6/ ~/ 15/ ,/ ω/ =/ 5/ ,/ k/ =/ 10/ ,/ λ/ =/ 6/ ~/ 15/ )/ 算法/ 执行/ 时间/ 的/ 情况/ ./ 从图/ 中/ 可以/ 发现/ ,/ 参数/ λ/ 对/ 算法/ 性能/ 几乎/ 没有/ 影响/ ,/ 这/ 是因为/ λ/ 的/ 变化/ 只是/ 在/ 最后/ 计算/ LOD/ 值时/ 使用/ ,/ 它/ 对/ 算法/ 中/ 的/ R/ -/ Tree/ 搜索/ 和/ 计算/ 阶段/ 都/ 没有/ 任何/ 影响/ ./ ①/ ②/ Page85/ ./ 1.2/ 参数/ 对/ 局部/ 异常/ 度/ 的/ 影响/ 轨迹/ 点/ 的/ 局部/ 异常/ 度/ (/ LOD/ )/ 值会/ 随着/ 邻域/ 阈值/ ω/ 、/ 基本/ 比较/ 单元/ 的/ 长度/ k/ 和/ 相近/ 阈值/ λ/ 3/ 个/ 参数/ 的/ 变化/ 而/ 变化/ ./ 为了/ 比较/ 不同/ 参数/ 对/ LOD/ 值/ 的/ 影响/ ,/ 我们/ 从/ 数据/ 集中/ 随机/ 取/ 100/ 个/ 轨迹/ 点/ 进行/ 分析/ ./ 图/ 5/ 显示/ 了/ 不同/ ω/ 值时/ (/ ω/ =/ 3/ ,/ 5/ ,/ 7/ ,/ 10/ ,/ k/ =/ 10/ ,/ λ/ =/ 10/ )/ ,/ 100/ 个/ 随机/ 轨迹/ 点/ 的/ LOD/ 值/ 的/ 变化/ 情况/ ./ 从图/ 中/ 可以/ 看到/ ,/ 随着/ ω/ 值/ 的/ 增大/ ,/ 轨迹/ 点/ 的/ LOD/ 值/ 逐渐/ 减小/ ,/ 而且/ 其/ 趋势/ 是/ 越来越/ 慢/ ./ 其/ 原因/ 是/ :/ 随着/ ω/ 值/ 的/ 增大/ ,/ 越来越/ 多/ 的/ 轨迹/ 点/ 被/ 包含/ 在/ 该/ 点/ 的/ 邻域/ 点/ 集中/ ,/ 这/ 使得/ 相近/ 的/ 基本/ 比较/ 单元/ 对/ 逐渐/ 增加/ ,/ 当/ 拥有/ 相近/ 基本/ 比较/ 单元/ 的/ 轨迹/ 数目/ 少于/ λ/ 时/ (/ 由于/ 不足/ 的/ 局部/ 异常/ 度/ 是/ 由/ 1/ 代替/ )/ ,/ 局部/ 异常/ 度/ 迅速/ 减少/ ,/ 当其值/ 大于/ 等于/ λ/ 时/ ,/ 局部/ 异常/ 度/ 的/ 变化/ 开始/ 变小/ ./ 从图/ 中/ 也/ 可以/ 看到/ 大多数/ 轨迹/ 点/ 在/ ω/ =/ 7/ 和/ ω/ =/ 10/ 的/ 变化/ 很小/ ./ 图/ 6/ 显示/ 了/ 不同/ k/ 值时/ (/ ω/ =/ 5/ ,/ k/ =/ 5/ ,/ 7/ ,/ 10/ ,/ 15/ ,/ λ/ =/ 10/ )/ ,/ 100/ 个/ 随机/ 轨迹/ 点/ 的/ LOD/ 值/ 的/ 变化/ 情况/ ./ 尽管/ k/ 的/ 变化/ 对/ 算法/ 性能/ 影响/ 不/ 大/ ,/ 但/ 对/ LOD/ 的/ 值/ 影响/ 还是/ 挺大/ 的/ ./ 从图/ 中/ 可以/ 看到/ ,/ 随着/ k/ 值/ 的/ 增大/ ,/ 轨迹/ 点/ 的/ LOD/ 值/ 逐渐/ 增大/ ,/ 而且/ 其/ 趋势/ 是/ 越来越快/ ./ 其/ 原因/ 是/ :/ 由于/ ω/ 保持/ 不变/ ,/ 那么/ 每个/ 轨迹/ 点/ 的/ 邻域/ 点集/ 内/ 的/ 轨迹/ 点/ 数目/ 保持/ 不变/ ,/ 随着/ k/ 值/ 的/ 增大/ ,/ 要求/ 基本/ 比较/ 单元/ 的/ 长度/ 增加/ ,/ 这/ 导致/ 对应/ 的/ 相近/ 基本/ 比较/ 单元/ 减少/ ,/ 从而/ 使得/ LOD/ 值/ 慢慢/ 增大/ ./ 当/ 具有/ 相近/ 的/ 基本/ 比较/ 单元/ 的/ 轨迹/ 数/ 少于/ λ/ 时/ ,/ 由于/ 与/ ω/ 变化/ 时/ 同样/ 的/ 原因/ ,/ LOD/ 值/ 开始/ 快速/ 增大/ ./ 图中/ 显示/ :/ 当/ k/ =/ 15/ 时/ ,/ 轨迹/ 点/ 的/ LOD/ 值/ 都/ 开始/ 快速/ 向/ 1/ 靠近/ ./ 图/ 7/ 显示/ 了/ 不同/ λ/ 值时/ (/ ω/ =/ 5/ ,/ k/ =/ 10/ ,/ λ/ =/ 5/ ,/ 7/ ,/ 10/ ,/ 或/ 15/ )/ ,/ 100/ 个/ 随机/ 轨迹/ 点/ 的/ LOD/ 值/ 的/ 变化/ 情况/ ./ 从图/ 中/ 可以/ 看到/ ,/ λ/ 值/ 的/ 变化/ 对/ 大多数/ 轨迹/ 点/ 的/ LOD/ 值/ 没有/ 影响/ ,/ 只有/ 在/ 极个别/ 轨迹/ 点/ ,/ 其/ LOD/ 值会/ 随着/ λ/ 值/ 的/ 增大/ 而/ 逐渐/ 增大/ ./ 这/ 是因为/ λ/ 是/ 用来/ 限制/ 拥有/ 相近/ 基本/ 比较/ 单元/ 的/ 最少/ 轨迹/ 数/ ,/ 即/ 具有/ 与/ 轨迹/ 点/ 所在/ 基本/ 比较/ 单元/ 相近/ 的/ 基本/ 比较/ 单元/ 的/ 轨迹/ 数目/ ./ 当该/ 数目/ 大于/ 多于/ λ/ ,/ 按照/ 等式/ (/ 7/ )/ ,/ 其/ LOD/ 值/ 不会/ 变化/ ,/ 否则/ ,/ 其/ LOD/ 值会/ 随着/ λ/ 值/ 的/ 增大/ 而/ 增大/ ./ 综上所述/ ,/ 最/ 主要参数/ 是/ ω/ ,/ 它/ 不仅/ 明显/ 地/ 影响/ 算法/ 的/ 执行/ 时间/ ,/ 还会/ 明显/ 地/ 改变/ 轨迹/ 点/ LOD/ 值/ ,/ 参数/ ω/ 的/ 选择/ 尤为重要/ ./ 其次/ ,/ 参数/ k/ 对/ 算法/ 执行/ 性能/ 的/ 影响/ 并/ 不/ 明显/ ,/ 但/ 其/ 对/ 轨迹/ 点/ 的/ LOD/ 值/ 的/ 影响/ 相当/ 明显/ ./ 而/ 参数/ λ/ 对/ 算法/ 的/ 影响/ ,/ 不管/ 是/ 在/ 性能/ 还是/ 在/ LOD/ 值/ ,/ 几乎/ 可以/ 忽略/ (/ 仅当/ LOD/ 值/ 接近/ 边缘/ 值时/ ,/ 产生/ 影响/ )/ ./ 因此/ ,/ 对于/ 用户/ 来说/ ,/ 可以/ 根据/ 下面/ 的/ 方式/ 来/ 确定/ 3/ 个/ 参数/ :/ 首先/ 根据/ 应用/ 邻域/ 的/ 特点/ 确定/ ω/ 值/ ,/ 然后/ 再/ 设定/ 基本/ 比较/ 单元/ 的/ 长度/ 参数/ k/ ;/ 最后/ 根据/ 用户/ 对/ 稀疏/ 区域/ 轨迹/ 点/ 的/ 局部/ 异常/ 度/ 的/ 要求/ 来/ 设定/ 参数/ λ/ ./ 5.2/ 与/ TRAOD/ 的/ 对比/ 和/ 分析/ 由于/ TraLOD/ 的/ 距离/ 定义/ 与/ TROAD/ 有/ 较大/ 不同/ ,/ 两种/ 计算方法/ 的/ 计算/ 量/ 差别/ 也/ 很大/ ./ 因此/ ,/ 在/ 算法/ 性能/ 上/ 两者之间/ 不/ 具有/ 直接/ 的/ 可比性/ ./ 因此/ ,/ 本文/ 在/ 实验/ 最后/ 部分/ 仅/ 对/ TraLOD/ 与/ TRAOD/ 在/ 算法/ 效果/ 上/ 进行/ 简单/ 对比/ 和/ 分析/ ./ 图/ 8/ (/ a/ )/ 显示/ 了/ TraLOD/ 使用/ LOD/ =/ 0.7/ 检测/ 出来/ 的/ 轨迹/ 异常情况/ ,/ 粗线/ 表示/ 轨迹/ 的/ 异常/ 片段/ ./ 图/ 8/ (/ b/ )/ 显示/ 了/ 文献/ [/ 6/ ]/ 在/ 网上/ 提供/ 的/ 实验/ 结果/ (/ http/ :/ // // netfiles/ ./ uiuc/ ./ Page9edu/ // jaegil/ // www/ // icde08/ )/ ./ 浅色/ 线段/ 表示/ 正常/ 的/ 轨迹/ ,/ 粗线/ 表示/ 异常/ 的/ 轨迹/ 片段/ ./ 从/ 两个/ 图中/ 可以/ 发现/ ,/ TraLOD/ 不仅/ 可以/ 像/ TRAOD/ 算法/ 一样/ 挖掘出/ 那些/ 明显/ 偏离/ 大多数/ 轨迹/ 运动/ 规律/ 的/ 异常/ ,/ 而且/ 还/ 可以/ 挖掘出/ 那些/ 虽然/ 不/ 明显/ 偏离/ 但/ 具有/ 明显/ 异常/ 的/ (/ 如图/ 8/ 中/ 2/ #/ 异常/ 片段/ )/ 、/ 运动/ 规律/ 与其/ 局部/ 区域/ 相似/ 但/ 也/ 与/ 别的/ 区域/ 相似/ (/ 如图/ 8/ 中/ 1/ #/ 轨迹/ 片段/ )/ 图/ 8TraLOD/ 与/ TRAOD/ 的/ 实验/ 结果/ 对比/ 6/ 结束语/ 随着/ 物/ 联网/ 、/ 3G/ 技术/ 的/ 迅猛发展/ ,/ 对/ 轨迹/ 数据/ 进行/ 数据挖掘/ 日益/ 成为/ 人们/ 感兴趣/ 的/ 研究课题/ ./ 而/ 异常/ 点/ 检测/ 作为/ 数据挖掘/ 的/ 一个/ 重要/ 研究/ 方向/ ,/ 轨迹/ 数据挖掘/ 领域/ 同样/ 具有/ 很/ 重要/ 的/ 理论/ 和/ 实际意义/ ./ 为了/ 克服/ 当前/ 流行/ 的/ 、/ 以/ 轨迹/ 片段/ 表示/ 轨迹/ 局部/ 特征/ 所/ 存在/ 的/ 不足/ ,/ 本文/ 提出/ 了/ 以/ 轨迹/ 点/ 表示/ 轨迹/ 局部/ 特征/ 的/ 异常/ 轨迹/ 点/ 检测/ 算法/ ./ 该/ 算法/ 不仅/ 引入/ 局部/ 异常/ 度来/ 表示/ 轨迹/ 点/ 的/ 异常情况/ ,/ 而且/ 在/ 距离/ 函数/ 中/ 引入/ 了/ 相对/ 距离/ 的/ 思想/ ,/ 使得/ 距离/ 度量/ 更加/ 符合实际/ 意义/ ./ 另一方面/ ,/ 在/ 算法/ 效率/ 角度/ ,/ TraLOD/ 采用/ R/ -/ Tree/ 索引/ 和/ 局部/ 特征/ 矩阵/ (/ 由/ 两条/ 轨迹/ 的/ 每/ 对点/ 之间/ 距离/ 组成/ )/ 来/ 提高/ 算法/ 效率/ ./ 实验/ 和/ 性能/ 分析/ 都/ 证实/ 了/ TraLOD/ 不仅/ 具有/ 很/ 高/ 的/ 计算/ 效率/ ,/ 而且/ 按照/ LOD/ 值/ 检测/ 出来/ 的/ 异常/ 轨迹/ 片段/ 具有/ 很/ 高/ 的/ 理论/ 和/ 实际意义/ ./ 

