Page1VMSPY/ :/ 一种/ 自动化/ 的/ 虚拟机/ 客户机/ 系统/ 函数/ 截获/ 和/ 控制/ 方案/ 余劲/ 黄皓/ (/ 南京大学/ 软件/ 新/ 技术/ 国家/ 重点/ 实验室/ 南京/ 210093/ )/ (/ 南京大学/ 计算机科学/ 与/ 技术/ 系/ 南京/ 210093/ )/ 摘要/ 如何/ 有效/ 保证/ 云/ 平台/ 虚拟机/ 客户机/ 系统安全/ 运行/ 是/ 目前/ 的/ 热点/ 研究/ 问题/ ,/ 客户机/ 系统/ 函数/ 的/ 截获/ 和/ 控制/ 方法/ 是/ 实现/ 监控/ 客户机/ 系统/ 的/ 关键技术/ 之一/ ./ 已有/ 基于/ 操作系统/ 内核/ 接口/ 的/ 安全监控/ 方案/ 和/ 基于/ 虚拟化/ 技术/ 的/ 虚拟机/ 自省/ 方案/ 中/ 所/ 采用/ 的/ 函数/ 截获/ 和/ 控制/ 方法/ 虽能/ 满足/ 安全监控/ 的/ 需求/ ,/ 但/ 仍/ 存在/ 一些/ 缺陷/ :/ 函数/ 截获/ 动作/ 容易/ 被/ 旁路/ ;/ 系统/ 调用/ 截获/ 方式/ 单一/ 且/ 局限/ ,/ 无法/ 截获/ 客户机/ 应用程序/ 内部/ 函数/ ;/ 无法控制/ 函数/ 的/ 执行/ 流程/ ;/ 安全/ 机制/ 引入/ 较大/ 额外/ 性能/ 开销/ 等/ ./ 该文/ 提出/ 了/ 一种/ 基于/ 虚拟化/ 技术/ 的/ 自动化/ 客户机/ 系统/ 函数/ 截获/ 和/ 控制/ 方案/ VMSPY/ ./ 作者/ 在/ VMM/ 中/ 实现/ 模块/ 的/ 主要/ 功能/ ,/ 通过/ 反汇编/ 引擎/ 对/ 客户机/ 系统/ 代码/ 自动/ 分析/ ,/ 动态/ 生成/ 并/ 在/ 合适/ 位置/ 插入/ 经过/ 设计/ 的/ 特权/ 指令/ 序列/ ,/ 实现/ 对/ 客户机/ 操作系统/ 的/ 系统/ 调用/ 截获/ ,/ 在/ 不受/ 地址/ 随机化/ 技术/ 的/ 影响/ 下/ 对/ 应用程序/ 内部/ 函数/ 截获/ ;/ 在/ VMM/ 中/ 按/ 策略/ 自动/ 模拟/ 执行/ 被/ 截获/ 函数/ 的/ 代码/ 指令/ 序列/ ,/ 实现/ 对/ 客户机/ 系统/ 调用函数/ 和/ 应用程序/ 函数/ 的/ 执行/ 流程/ 控制/ ;/ 通过/ 内存/ 页/ 权限/ 机制/ 保护/ 在/ 客户机/ 系统/ 中/ 插入/ 的/ 特权/ 指令/ 序列/ ,/ 防止/ 客户机/ 系统对/ 监控/ 模块/ 的/ 影响/ ;/ 通过/ 一种/ 缓存/ 机制/ ,/ 尽可能/ 地/ 减少/ 额外/ 性能/ 开销/ ./ 关键词/ 虚拟化/ ;/ 函数/ 截获/ ;/ 安全监控/ ;/ 执行/ 流/ ;/ 云/ 计算/ ;/ XEN1/ 引言/ 近年来/ ,/ 随着/ 计算机网络/ 、/ 虚拟化/ 、/ 分布式计算/ 和/ 数据/ 存储/ 等/ 多种/ 技术/ 的/ 进步/ ,/ 云/ 计算/ 作为/ 多种/ 技术/ 混合/ 发展/ 的/ 产物/ 得到/ 飞速发展/ ,/ 越来越/ 多/ 的/ 企业/ 将/ 业务/ 部署/ 到/ 云/ 平台/ 上/ ./ 如何/ 有效/ 保证/ 云/ 平台/ 虚拟机/ 客户机/ 的/ 应用程序/ 安全/ 运行/ 是/ 目前/ 的/ 热点/ 研究/ 问题/ ./ 客户机/ 系统/ 函数/ 的/ 截获/ 和/ 控制/ 方法/ 是/ 实现/ 监控/ 客户机/ 系统/ 的/ 关键技术/ 之一/ ,/ 按/ 实现/ 方式/ 主要/ 分为/ 两类/ :/ 第一类/ 是/ 基于/ 操作系统/ 内核/ 接口/ 实现/ 的/ 强制/ 访问控制/ 、/ 系统/ 调用/ 跟踪/ 和/ 各种/ 应用层/ 沙盒/ 技术/ 等/ ./ 这类/ 方案/ 中/ 所/ 采用/ 的/ 系统/ 函数/ 截获/ 方法/ 虽然/ 能/ 满足/ 监控/ 功能/ 的/ 需求/ 且/ 部分/ 方案/ 性能/ 优秀/ ,/ 但/ 仍然/ 存在/ 如下/ 问题/ :/ (/ 1/ )/ 默认/ 操作系统/ 内核/ 是/ 安全/ 可信/ 的/ ,/ 系统/ 调用/ 截获/ 等/ 安全监控/ 功能/ 依赖于/ 操作系统/ 内核/ 提供/ 的/ 机制/ 实现/ ,/ 安全监控/ 功能/ 会/ 因为/ 操作系统/ 内核/ 安全漏洞/ 失效/ ;/ (/ 2/ )/ 部分/ 方案/ 需要/ 对/ 操作系统/ 代码/ 进行/ 修改/ ,/ 操作系统/ 的/ 兼容性/ 差/ ;/ 第二类/ 是/ 基于/ 虚拟化/ 技术/ 实现/ 的/ 虚拟机/ 自省/ 方案/ ,/ 这/ 类/ 方案/ 中/ 所/ 使用/ 的/ 系统/ 函数/ 截获/ 和/ 控制/ 方法/ 很/ 好/ 的/ 屏蔽/ 了/ 客户机/ 系统对/ 监控/ 模块/ 的/ 影响/ ,/ 但/ 仍/ 存在/ 如下/ 问题/ :/ (/ 1/ )/ 客户机/ 的/ 系统/ 调用/ 截获/ 方式/ 单一/ ,/ 无法/ 截获/ 客户机/ 应用程序/ 的/ 内部/ 函数/ ;/ 函数/ 的/ 执行/ 流程/ ;/ (/ 2/ )/ 无法控制/ 客户机/ 系统/ 调用/ 或/ 应用程序/ 内部/ (/ 3/ )/ 部分/ 方案/ 需要/ 在/ 新创建/ 虚拟/ 域/ 中/ 实现/ 安全监控/ 模块/ ,/ 对/ 被/ 截获/ 函数/ 进行/ 监控/ 和/ 分析/ ./ 客户机/ 系统/ 函数/ 截获/ 路径/ 较长/ ,/ 存在/ 多次/ 上下文/ 切换/ ,/ 引入/ 较大/ 的/ 额外/ 性能/ 开销/ ./ 本文/ 设计/ 并/ 实现/ 了/ 一种/ 自动化/ 的/ 虚拟机/ 客户机/ 系统/ 函数/ 截获/ 和/ 控制/ 方案/ VMSPY/ ,/ 主要/ 特点/ 如下/ :/ (/ 1/ )/ 在/ VMM/ 中/ 通过/ 反汇编/ 引擎/ 动态/ 对/ 客户机/ 操作系统/ 内核/ 或/ 应用/ 程序代码/ 进行/ 扫描/ 分析/ ,/ 自动/ 生成/ 一段/ 经过/ 设计/ 的/ 陷入/ 代码/ ,/ 自动/ 查找/ 合适/ 的/ 插入/ 位置/ 插入/ 陷入/ 代码/ ,/ 自动/ 分析/ 获得/ 被/ 截获/ 函数/ 的/ 参数/ ,/ 实现/ 对/ 任意/ 版本/ 客户机/ 操作系统/ 的/ 任意/ 系统/ 调用/ 的/ 截获/ ,/ 在/ 不受/ 地址/ 随机化/ 技术/ 的/ 影响/ 下/ 实现/ 对/ 应用程序/ 内部/ 函数/ 的/ 截获/ ./ (/ 2/ )/ 在/ VMM/ 中/ 按/ 策略/ 自动/ 生成/ 一段/ 经过/ 设计/ 的/ 客户机/ 系统/ 指令/ 序列/ ,/ 可/ 模拟/ 被/ 截获/ 函数/ 的/ 正常/ 执行/ 流程/ 和/ 异常/ 返回/ 执行/ 流程/ ,/ 实现/ 对/ 客户机/ 系统/ 调用函数/ 和/ 应用程序/ 函数/ 的/ 执行/ 流程/ 控制/ ./ (/ 3/ )/ 在/ 具有/ 最高/ 特权/ 级/ 的/ VMM/ 中/ 实现/ 安全监控/ 模块/ ,/ 并/ 通过/ 基于/ 内存/ 页/ 权限/ 机制/ 保护/ 在/ 客户机/ 系统/ 中/ 插入/ 的/ 陷入/ 代码/ ,/ 安全监控/ 模块/ 和/ 插入/ 代码/ 不/ 受/ 客户机/ 操作系统/ 内核/ 安全漏洞/ 的/ 影响/ ./ (/ 4/ )/ 利用/ 一种/ 缓存/ 机制/ ,/ 尽可能/ 地/ 减少/ 额外/ 性能/ 开销/ ./ 本文/ 将/ 在/ 第/ 2/ 节/ 详细/ 介绍/ 目前/ 相关/ 技术/ 的/ 研究/ 工作/ 现状/ ;/ 第/ 3/ 节/ 详细/ 说明/ 我们/ 方案/ 的/ 设计/ 思想/ 和/ 各/ 创新/ 点/ 的/ 核心/ 原理/ ;/ 第/ 4/ 节/ 介绍/ 我们/ 已/ 实现/ 的/ 原型/ 系统/ ;/ 第/ 5/ 节/ 阐述/ VMSPY/ 在/ 安全/ 和/ 性能/ 上/ 的/ 实验/ 评估/ ;/ 第/ 6/ 节/ 介绍/ 对/ 现有/ 系统/ 的/ 不足/ 和/ 对/ 未来/ 工作/ 的/ 展望/ ./ 2/ 相关/ 工作/ 基于/ 操作系统/ 内核/ 接口/ 或/ 函数/ 实现/ 的/ 安全监控/ Page3/ 方案/ ,/ 按/ 用途/ 分为/ 两类/ :/ 第一类/ 是/ 基于/ 操作系统/ 内核/ 接口/ 实现/ 的/ 强制/ 访问/ 控制系统/ ,/ 例如/ SELinux/ ①/ 等/ ./ 基于/ 操作系统/ 内核/ 接口/ 实现/ 的/ 应用程序/ 系统/ 调用/ 跟踪/ 模块/ ,/ 例如/ ptrace/ ②/ 和/ utrace/ ③/ 等/ ./ 第二类/ 是/ 基于/ 操作系统/ 内核/ 接口/ 和/ 内核/ 函数/ 实现/ 的/ 应用程序/ 沙盒/ ./ 例如/ :/ LXC/ ④/ 方案/ 利用/ 操作系统/ 提供/ 的/ 接口/ 构造/ 一个/ 类似/ “/ chroot/ ”/ 的/ 轻量级/ 虚拟化/ 的/ 程序执行/ 环境/ ,/ 可/ 控制/ 运行/ 其中/ 应用程序/ 对/ 操作系统/ 的/ 各种/ 资源/ 访问/ ,/ 并/ 达到/ 几乎/ 和/ 原生/ 程序/ 相同/ 的/ 性能/ ./ Bryan/ 等/ 人/ [/ 1/ ]/ 设计/ 的/ Vx32/ 方案/ 将/ 客户机/ 实例/ 放入/ 一个/ LDT/ ,/ 利用/ 另/ 一个/ 新建/ 的/ LDT/ 保护/ 客户机/ 实例/ ./ 运行/ 中/ 通过/ 段/ 异常/ 机制/ 触发/ 并/ 动态/ 翻译/ 重写/ 客户/ 实例/ 中/ 的/ 跳转/ 指令/ ,/ 限制/ 被/ 监控/ 客户/ 实例/ 代码/ 的/ 跳转/ 范围/ ./ Bennet/ 等/ 人/ [/ 2/ ]/ 设计/ 的/ NativeClient/ 方案/ 为/ 浏览器/ 插件/ 应用/ 进程/ 构建/ 一个/ 隔离/ 的/ 执行/ 环境/ ,/ 通过/ 模块/ 间/ 交互/ 接口/ 、/ 浏览器/ 交互/ 接口/ 和/ 系统/ 调用/ 抽象/ 接口/ 等/ 与/ 操作系统/ 交互/ ,/ 保证/ 网页/ 插件/ 应用/ 和/ 操作系统/ 之间/ 的/ 隔离/ ./ 它/ 内部/ 沙盒/ 采用/ 与/ Vx32/ 类似/ 的/ 思想/ 实现/ ,/ 外部/ 沙盒/ 通过/ ptrace/ 监控/ 被/ 监控/ 进程/ 的/ 操作系统/ 调用/ 执行/ 情况/ ./ Suman/ 等/ 人/ [/ 3/ ]/ 设计/ 的/ 沙盒/ 方案/ TxBox/ 利用/ 事物/ 机制/ 包装/ 进程/ 的/ 系统/ 调用/ ,/ 模拟系统/ 调用/ 的/ 结果/ ,/ 监控/ 系统/ 调用/ 执行/ 情况/ ,/ 当/ 发现/ 进程/ 异常/ 后/ 终止/ 进程/ 并/ 关闭/ 和/ 删除/ 进程/ 相关/ 资源/ ,/ 回滚/ 恢复/ 进程/ 初始状态/ ./ 上述/ 两类/ 方案/ 中/ 对系统/ 调用/ 或/ 应用程序/ 函数/ 的/ 截获/ 均/ 依赖于/ 操作系统/ 内核/ 提供/ 的/ 接口/ 或/ 函数/ ,/ 默认/ 操作系统/ 内核/ 是/ 安全/ 可信/ 的/ ,/ 因此/ 会/ 因为/ 操作系统/ 内核/ 的/ 漏洞/ 而/ 导致/ 安全监控/ 失效/ ./ 其中/ TxBox/ 方案/ 虽然/ 性能/ 较/ 好/ ,/ 但是/ 需要/ 对/ 客户机/ 操作系统/ 代码/ 进行/ 修改/ ,/ 兼容性/ 较差/ ./ 其中/ ptrace/ 方案/ 需要/ 通过/ 大量/ 用户/ 态/ 和/ 内核/ 态/ 之间/ 的/ 切换/ 来/ 实现/ 对/ 目标/ 进程/ 的/ 监控/ 事件/ 响应/ ,/ 引入/ 了/ 极大/ 的/ 额外/ 性能/ 开销/ ./ utrace/ 方案/ 利用/ 回调/ 函数/ 机制/ 和/ 统一/ 的/ 内核/ 函数/ 截获/ 处理/ 引擎/ 在/ 内核/ 中/ 重构/ 了/ ptrace/ 的/ 底层/ 功能/ 实现/ ,/ 已/ 获得/ 了/ 极大/ 的/ 性能/ 提升/ ,/ 对/ 单个/ 系统/ 调用/ 单次/ 截获/ 仅/ 有/ 0.16/ μ/ s/ 的/ 额外/ 性能/ 开销/ [/ 4/ ]/ ./ 式/ 可/ 分为/ 两类/ :/ 基于/ 虚拟化/ 技术/ 的/ 虚拟机/ 自省/ 方案/ ,/ 按/ 实现/ 方/ 第一类/ 在/ 新建/ 的/ 独立/ 的/ 虚拟/ 域/ 中/ 构建/ 客户机/ 系统监控/ 程序/ ,/ 例如/ :/ Suman/ 等/ 人/ [/ 3/ ]/ 提出/ 的/ 在/ 独立/ 虚拟/ 域/ 中/ 构建/ 的/ 客户机/ 指令/ 检测/ 系统/ 方案/ ,/ Tamberi/ 等/ 人/ [/ 5/ ]/ 提出/ 的/ 在/ 独立/ 虚拟/ 域/ 中/ 构建/ 监控/ 系统监控/ 并/ 保护/ 客户机/ 操作系统/ 用户/ 态/ 进程/ 的/ 方案/ PsyTrace/ ,/ Dolan/ -/ Gavitt/ 等/ 人/ [/ 6/ ]/ 提出/ 的/ 利用/ 动态/ 切片/ 技术/ 在/ 独立/ 虚拟/ 域/ 中/ 重构/ 客户机/ 操作系统/ 管理工具/ 的/ 方案/ Virtuoso/ ,/ Jones/ 等/ 人/ [/ 7/ ]/ 提出/ 的/ 在/ 独立/ 虚拟/ 域/ 中/ 构建/ 检测/ 客户机/ 操作系统/ 恶意/ 隐藏/ 进程/ 系统/ 方案/ Lycosid/ ,/ Srinivasan/ 等/ 人/ [/ 8/ ]/ 提出/ 的/ 将/ 客户机/ 操作系统/ 中/ 可疑/ 进程/ 动态/ 迁移/ 到/ 独立/ 的/ 虚拟/ 域/ 中/ ,/ 并/ 分析/ 其/ 行为/ 的/ 方案/ ProcessOut/ -/ Grafting/ ,/ Zou/ 等/ 人/ [/ 9/ ]/ 提出/ 的/ 在/ 独立/ 虚拟/ 域/ 中/ 构建/ 的/ 基于/ 事件/ 通知/ 的/ 客户机/ 监控/ 方案/ ,/ Wu/ 等/ 人/ [/ 10/ ]/ 提出/ 的/ 在/ 独立/ 虚拟/ 域/ 中/ 构建/ 基于/ 特权/ 指令/ 钩子/ 技术/ 的/ 客户机/ 系统监控/ 方案/ EagleEye/ ,/ Hizver/ 等/ 人/ [/ 11/ ]/ 提出/ 的/ 在/ 独立/ 虚拟/ 域/ 中/ 构建/ 的/ 基于/ 客户机/ 内存/ 扫描/ 技术/ 的/ 客户机/ 监控/ 系统/ 等/ ./ 上述/ 方案/ 需要/ 额外/ 构建/ 一个/ 独立/ 虚拟/ 域/ 作为/ 监控/ 程序/ 或/ 客户机/ 应用程序/ 副本/ 的/ 运行/ 环境/ ,/ 虽然/ 在/ 一定/ 程度/ 上/ 可/ 轻松/ 准确/ 的/ 重现/ 出/ 客户机/ 系统/ 中/ 被/ 截获/ 函数/ 的/ 执行/ 环境/ ,/ 获得/ 函数/ 执行/ 语义/ ./ 但/ 新创建/ 的/ 独立/ 虚拟/ 域/ 增加/ 了/ 额外/ 的/ 系统资源/ 开销/ ./ 对于/ 客户机/ 系统/ 中/ 每/ 一个/ 函数/ 的/ 截获/ 动作/ 都/ 需要/ 通过/ 事件/ 通道/ 或/ 自定义/ 内部/ 接口/ ,/ 经/ VMM/ 返回/ 到/ 新创建/ 的/ 虚拟/ 域/ 中/ 分析/ ,/ 客户机/ 系统/ 、/ 虚拟机/ 监控器/ VMM/ 和/ 新创建/ 虚拟/ 域/ 之间/ 存在/ 大量/ 上下文/ 切换/ ,/ 增加/ 了/ 系统/ 额外/ 的/ 性能/ 开销/ ./ 其中/ EagleEye/ 方案/ 所/ 采用/ 的/ 函数/ 截获/ 方法/ 与/ 本/ 方案/ 类似/ ,/ 但/ 本文/ 所述/ 方案/ 在/ 陷入/ 代码/ 自动化/ 生成/ 与/ 插入/ 、/ 被/ 截获/ 函数参数/ 分析/ 、/ 客户机/ 指令/ 模拟/ 、/ 客户机/ 函数/ 执行/ 流程/ 控制/ 等/ 几/ 方面/ 提出/ 更/ 灵活/ 的/ 思想/ ,/ 本文/ 所述/ 方案/ 在/ VMM/ 中/ 实现/ 主要/ 的/ 安全/ 功能/ ./ 第二类/ 在/ VMM/ 中/ 构建/ 客户机/ 系统监控/ 程序/ ,/ 例如/ :/ Monirul/ 等/ 人/ [/ 12/ ]/ 提出/ 的/ 通过/ 客户机/ 系统/ 中/ 构建/ 监控/ 模块/ 监控/ 客户机/ 系统/ ,/ 再/ 在/ VMM/ 中/ 构建/ 保护/ 模块/ 保护/ 客户机/ 系统/ 中/ 的/ 监控/ 模块/ 的/ 双层/ 监控/ 方案/ SIM/ ,/ Xiong/ 等/ 人/ [/ 13/ ]/ 提出/ 的/ 在/ VMM/ 中/ 构建/ 客户机/ 操作系统/ 的/ 系统/ 调用/ 的/ 监控/ 方案/ ,/ Li/ 等/ 人/ [/ 14/ ]/ 提出/ 的/ 利用/ 在/ 客户机/ 操作系统/ 内核/ 中/ 构建/ 信息/ 获取/ 模块/ 获取/ 客户机/ 系统/ 运行/ 语义/ ,/ 在/ VMM/ 中/ 构建/ 监控/ 模块/ 监控/ 客户机/ 操作系统/ 系统/ 调用/ 和/ 寄存器/ 的/ 双层/ ①/ ②/ ③/ ④/ Page4/ 监控/ 方案/ VMInsight/ ,/ Dinaburg/ 等/ 人/ [/ 15/ ]/ 提出/ 的/ 在/ VMM/ 中/ 构建/ 对/ 客户机/ 操作系统/ 的/ 系统/ 调用/ 、/ 上下文/ 切换/ 和/ 内存/ 访问/ 的/ 监控/ 方案/ Ether/ 等/ ./ 其中/ 文献/ [/ 12/ ,/ 14/ ]/ 中/ 的/ 方案/ 需要/ 在/ 客户机/ 系统/ 内核/ 中/ 增加/ 额外/ 的/ 代码/ 来/ 实现/ 对/ 客户机/ 系统/ 函数/ 的/ 截获/ 和/ 客户机/ 当前/ 执行/ 上下文/ 信息/ 的/ 获取/ ,/ 黑客/ 可以/ 通过/ 分析/ 等/ 方法/ 对/ 监控/ 模块/ 进行/ 针对性/ 的/ 破坏/ 使/ 安全监控/ 失效/ ./ 其中/ 文献/ [/ 12/ -/ 13/ ,/ 15/ ]/ 中/ 的/ 方案/ 通过/ 设置/ SYSENTER/ _/ EIP/ _/ MSR/ 中/ 的/ 异常/ 值/ 触发/ vmexit/ 实现/ 对系统/ 调用/ 的/ 截获/ ,/ 此类/ 方法/ 对/ 通过/ int80/ 或/ 其他/ 触发/ 机制/ 实现/ 的/ 系统/ 调用/ 无法/ 兼容/ ./ 并且/ 上述/ 所有/ 的/ 方案/ 都/ 无法/ 实现/ 对/ 任意/ 版本/ 客户机/ 操作系统/ 的/ 任意/ 系统/ 调用/ 或/ 应用程序/ 内部/ 函数/ 的/ 截获/ ,/ 也/ 无法/ 实现/ 对/ 被/ 监控/ 函数/ 执行/ 流程/ 的/ 控制/ ./ 3/ 系统/ 设计/ 3.1/ 函数/ 截获/ 及/ 执行/ 流程/ 控制/ 硬件/ 虚拟化/ 技术/ 将/ 传统/ 操作系统/ 的/ 特权/ 级/ ring0/ 到/ ring3/ 又/ 划分/ 为/ root/ 和/ non/ -/ root/ 两个/ 级别/ ,/ 当/ 客户机/ 系统/ 执行/ 一些/ 敏感/ 指令/ 或/ 虚拟化/ 相关/ 指令/ 时/ ,/ 会/ 触发/ non/ -/ root/ 到/ root/ 的/ 切换/ ./ 通常/ 在/ root/ 级别/ 中/ 运行/ VMM/ ,/ 在/ non/ -/ root/ 级别/ 中/ 运行/ 客户机/ 系统/ ./ 从/ 安全监控/ 的/ 角度/ 来看/ ,/ 硬件/ 虚拟化/ 技术/ 为/ 我们/ 提供/ 了/ 一个/ 隔离/ 且/ 安全/ 的/ 监控/ 代码运行/ 环境/ ,/ 如果/ 我们/ 能/ 在/ VMM/ 中/ 实现/ 对/ 客户机/ 系统/ 函数/ 的/ 截获/ 和/ 控制/ ,/ 将/ 最大化/ 的/ 屏蔽/ 客户机/ 操作系统/ 对/ 截获/ 和/ 控制/ 功能/ 的/ 影响/ ./ 如何/ 让/ 客户机/ 操作系统/ 或/ 应用程序/ 的/ 函数/ 执行/ 时/ 陷入/ 到/ VMM/ 中是/ 需要/ 解决/ 的/ 首要任务/ ./ 以/ Intel/ 的/ VT/ -/ x/ [/ 16/ ]/ 技术/ 为例/ ,/ 其/ 提供/ 了/ VMCS/ 结构/ 用于/ 保存/ 客户机/ 操作系统/ 和/ VMM/ 切换/ 时/ 的/ 上下文/ 信息/ ,/ 以及/ 虚拟化/ 相关/ 的/ 配置/ 信息/ ./ 其/ 定义/ 了/ CPUID/ 、/ GETSEC/ 、/ INVD/ 、/ XSETBV/ 和/ VMLUNCH/ 等/ 指令/ 执行/ 为/ 无条件/ 事件/ ,/ VMCS/ 中/ 配置/ 的/ I/ // O/ 访问/ 、/ 中断/ 、/ MSR/ 寄存器/ 访问/ 等/ 为/ 有/ 条件/ 事件/ ./ 当/ 无条件/ 事件/ 和/ 有/ 条件/ 事件/ 发生/ 时/ ,/ 客户机/ 系统/ 会/ 触发/ VMexit/ 陷入/ 到/ VMM/ 中/ ./ 经过/ 分析/ 我们/ 可以/ 在/ 应用程序/ 或/ 操作系统/ 函数/ 代码/ 中/ 任意/ 位置/ 插入/ 特定/ 的/ 敏感/ 指令/ ,/ 使得/ 客户机/ 应用程序/ 或/ 操作系统/ 内核/ 按照/ 我们/ 的/ 需要/ 触发/ VMexit/ 陷入/ 到/ VMM/ 中/ ./ Vt/ -/ x/ 定义/ 的/ 敏感/ 指令/ 都/ 有/ 具体/ 的/ 功能/ ,/ 我们/ 选择/ 的/ 敏感/ 指令/ 必须/ 在/ 内核/ 态/ 和/ 用户/ 态均/ 能/ 被/ 调用/ ,/ 其/ 原有/ 功能/ 必须/ 相对/ 简单/ 和/ 独立/ ./ 我们/ 最终/ 选择/ cpuid/ 作为/ 陷入/ 动作/ 触发/ 的/ 敏感/ 指令/ ,/ 陷入/ 机制/ 如图/ 1/ 所示/ ./ cpuid/ 原本/ 的/ 功能/ 是/ 为了/ 获取/ cpu/ 信息/ 而/ 设计/ 的/ 指令/ ,/ 输入/ 参数/ 保存/ 在/ eax/ 寄存器/ 中/ ,/ 输出/ 参数/ 保存/ 在/ ebx/ 、/ ecx/ 和/ edx/ 中/ ./ 我们/ 在/ eax/ 中/ 填充/ 特殊/ 的/ 自定义/ 传入/ 参数/ 来/ 区别/ 正常/ 的/ cpuid/ 事件处理/ 、/ 截获/ 函数/ 的/ cpuid/ 事件处理/ 以及/ 被/ 截获/ 函数/ 类型信息/ ,/ 并且/ 在/ VMM/ 中原/ 有/ cpuid/ 指令/ 处理/ 代码/ 流程/ 中/ 增加/ 相应/ 的/ 处理/ 代码/ ./ 例如/ :/ 在/ eax/ 中/ 存入/ 54321/ 代表/ 截获/ 系统/ 调用/ sys/ _/ open/ 函数/ 的/ 事件/ 发生/ ./ 按照/ 上面/ 的/ 要求/ 陷入/ 代码/ 需要/ “/ mov54321/ ,/ %/ eax/ ”/ 和/ “/ cpuid/ ”/ 两条/ 语句/ 总共/ 7/ 个/ 字节/ 大小/ ./ 如果/ 在/ 插入/ 陷入/ 代码/ 位置/ 的/ 函数/ 代码执行/ 上下文/ 中/ eax/ 的/ 值/ 是/ 有/ 意义/ 的/ ,/ 即/ eax/ 的/ 值会/ 被/ 后续/ 代码/ 使用/ ,/ 我们/ 还/ 需要/ 在/ 陷入/ 代码/ 中/ 增加/ 保存/ 当前/ eax/ 值/ 的/ 语句/ ./ 为/ 满足/ 这个/ 要求/ 我们/ 又/ 需要/ 从/ ebx/ 、/ ecx/ 或/ edx/ 寄存器/ 中/ 选择/ 一个/ 在/ 当前/ 客户机/ 函数/ 执行/ 上下文/ 中/ 无/ 意义/ 的/ 寄存器/ 来/ 临时/ 保存/ 当前/ 的/ eax/ 值/ ./ 在/ 陷入/ VMM/ 执行/ 完/ 控制/ 功能/ 后/ 增加/ 恢复/ eax/ 原有/ 值/ 的/ 处理/ 代码/ ./ 例如/ :/ edx/ 中/ 的/ 值/ 在/ 当前/ 的/ 函数/ 代码/ 上下文/ 中/ 没有/ 意义/ ,/ 我们/ 选择/ edx/ 作为/ 缓存/ 寄存器/ 临时/ 保存/ eax/ 的/ 值/ ,/ 陷入/ 代码/ 扩展/ 为/ “/ mov/ ,/ %/ eax/ ,/ %/ edx/ ”/ 、/ “/ mov54321/ ,/ %/ eax/ ”/ 和/ “/ cupid/ ”/ 3/ 条/ 语句/ 总共/ 9/ 个/ 字节/ 大小/ ./ 如果/ 函数/ 代码/ 中/ 没有/ 符合/ 7/ 个/ 字节/ 或/ 9/ 个/ 字节/ 大小/ 的/ 陷入/ 代码/ 插入/ 位置/ ,/ 我们/ 通过/ 在/ 陷入/ 代码/ 中/ 增加/ nop/ 指令/ 来/ 调整/ 陷入/ 代码/ 的/ 大小/ ,/ 陷入/ 代码/ 的/ 汇编/ 代码/ 和/ 机器码/ 对照/ 如表/ 1/ 所示/ ./ Page523/ 序号/ 汇编/ 代码/ 1mov54321/ ,/ %/ eaxcpuidmov/ %/ edx/ ,/ %/ eaxmov54321/ ,/ %/ eaxcpuidnopmov/ %/ edx/ ,/ %/ eaxmov54321/ ,/ %/ eaxcpuid/ 我们/ 通过/ 在/ VMM/ 中/ 移植/ 并/ 修改/ 了/ 开源/ 的/ udis86/ ①/ 反汇编/ 引擎/ 实现/ 自动化/ 客户机/ 代码/ 分析/ 功能/ ./ 反汇编/ 引擎/ 扫描/ 并/ 完成/ 对/ 指令/ 前缀/ 、/ 指令/ 、/ 操作数/ 等/ 的/ 识别/ ./ 完成/ 基本/ 指令/ 识别/ 以后/ ,/ 我们/ 的/ 分析/ 代码/ 对/ 被/ 识别/ 指令/ 语句/ 进行/ 进一步/ 的/ 分析/ ,/ 完成/ 自动/ 生成/ 陷入/ 代码/ 、/ 查找/ 合适/ 插入/ 位置/ 和/ 插入/ 陷入/ 代码/ 等/ 功能/ ./ 算法/ 的/ 基本/ 判断/ 条件/ 判断/ 过程/ 中/ ,/ 我们/ 宏观/ 上/ 认为/ 从/ 函数/ 入口/ 开始/ 到/ 被/ 陷入/ 代码/ 覆盖/ 的/ 客户机/ 代码/ 结束/ 为止/ 的/ 范围/ 里/ ,/ 如果/ 出现/ 对/ eax/ ~/ edx/ 寄存器/ 的/ 引用/ 行为/ ,/ 那么/ eax/ ~/ edx/ 就是/ 有/ 意义/ 的/ ./ 具体/ 根据/ 不同/ 指令/ 的/ 特点/ ,/ 通过/ 如下/ 两条/ 简单/ 规则/ 区别/ 一些/ 细节/ :/ (/ 1/ )/ 在/ 被/ 陷入/ 代码/ 覆盖/ 的/ 客户机/ 代码/ 指令/ 语句/ 范围/ 里/ ,/ 除/ pop/ 指令/ 以外/ 所有/ 只有/ 一个/ 操作数/ 图/ 2eax/ ~/ edx/ 是否/ 有/ 意义/ 判断/ 算法/ 流程/ 指令/ 的/ 操作数/ 、/ 逻辑/ 判断/ 指令/ 的/ 两个/ 操作数/ 和/ 其他/ 所有/ 两个/ 操作数/ 指令/ 的/ 源/ 操作数/ 中/ 出现/ eax/ ~/ edx/ 寄存器/ ,/ 则/ eax/ ~/ edx/ 有/ 意义/ ;/ (/ 2/ )/ 在/ 从/ 函数/ 入口/ 地址/ 到/ 陷入/ 代码/ 插入/ 之前/ 的/ 客户机/ 代码/ 指令/ 语句/ 范围/ 里/ ,/ pop/ 指令/ 的/ 操作数/ 和/ 除/ 逻辑/ 判断/ 指令/ 以外/ 所有/ 有/ 两个/ 操作数/ 指令/ 的/ 目的/ 操作数/ 出现/ eax/ ~/ edx/ 寄存器/ ,/ 则/ eax/ ~/ edx/ 有/ 意义/ ./ 此/ 算法/ 目前/ 相对/ 简陋/ ,/ 仅/ 在/ 本/ 论文/ 方案/ 的/ 实验/ 上/ 可用/ ,/ 有待/ 后期/ 完善/ ,/ 算法/ 流程/ 如图/ 2/ 所示/ ./ 我们/ 事先/ 在/ VMM/ 中/ 的/ 监控/ 程序/ 中/ 准备/ 好/ 如下/ 18/ 种/ 构成/ 陷入/ 代码/ 基本/ 指令/ 语句/ 的/ 机器码/ :/ (/ 1/ )/ mov54321/ ,/ %/ eax/ ;/ (/ 2/ )/ mov54322/ ,/ %/ eax/ ;/ (/ 3/ )/ mov54323/ ,/ %/ eax/ ;/ (/ 4/ )/ mov54324/ ,/ %/ eax/ ;/ (/ 5/ )/ mov54325/ ,/ %/ eax/ ;/ (/ 6/ )/ mov54326/ ,/ %/ eax/ ;/ (/ 7/ )/ mov54327/ ,/ %/ eax/ ;/ (/ 8/ )/ mov54328/ ,/ %/ eax/ ;/ (/ 9/ )/ mov54329/ ,/ %/ eax/ ;/ (/ 10/ )/ mov54330/ ,/ %/ eax/ ;/ (/ 11/ )/ mov54331/ ,/ %/ eax/ ;/ (/ 12/ )/ mov54332/ ,/ %/ eax/ ;/ (/ 13/ )/ mov54333/ ,/ %/ eax/ ;/ (/ 14/ )/ mov/ %/ ebx/ ,/ %/ eax/ ;/ (/ 15/ )/ mov/ %/ ecx/ ,/ %/ eax/ ;/ (/ 16/ )/ mov/ %/ edx/ ,/ %/ eax/ ;/ (/ 17/ )/ cpuid/ ;/ (/ 18/ )/ nop/ ./ 算法/ 按/ 需求/ 组合/ 出/ 陷入/ 代码/ ./ 构建/ 陷入/ 代码/ 和/ 查找/ 陷入/ 代码/ 位置/ 的/ 基本/ 算法/ 判断/ 条件/ 是/ :/ (/ 1/ )/ 被/ 覆盖/ 的/ 客户机/ 指令/ 语句/ VMM/ 能够/ 模拟/ ;/ (/ 2/ )/ 客户机/ 被/ 截获/ ①/ Udis86/ ./ http/ :/ // // sourceforge/ ./ net/ // projects/ // udis86/ // ,/ 2015/ ,/ Page6/ 函数/ 代码/ 中/ 存在/ 大小/ 最小/ 为/ 7/ 个/ 字节/ 或/ 9/ 个/ 字节/ 的/ 多条/ 完整/ 的/ 指令/ 语句/ ;/ (/ 3/ )/ 若/ 当前/ 客户机/ 从/ 函数/ 入口/ 地址/ 开始/ 扫描/ ,/ 存在/ 7/ 个/ 字节/ 大小/ 指令/ 语句/ 中/ ,/ eax/ 的/ 值/ 是/ 无/ 意义/ 的/ ,/ 按照/ 7/ 个/ 字节/ 构建/ 陷入/ 代码/ ,/ 插入/ 位置/ 是/ 当前/ 扫描/ 结束/ 位置/ ;/ (/ 4/ )/ 若/ 当前/ 客户机/ 从/ 函数/ 入口/ 地址/ 开始/ 7/ 个/ 字节/ 范围/ 内/ 执行/ 指令/ 上下文/ 中/ ,/ eax/ 的/ 值/ 是/ 有/ 意义/ 的/ ,/ 从/ 函数/ 入口/ 地址/ 开始/ 以/ 9/ 个/ 字节/ 为/ 最小/ 单位/ 扫描/ ,/ 确保/ ebx/ 、/ ecx/ 和/ edx/ 中有/ 一个/ 是/ 无/ 意义/ 的/ ,/ 并/ 按照/ 9/ 个/ 字节/ 或者/ 更/ 多/ 字节/ 构建/ 陷入/ 代码/ ,/ 超过/ 9/ 个/ 字节/ 的/ 部分/ 用/ nop/ 指令/ 填充/ ,/ 插入/ 位置/ 是/ 当前/ 扫描/ 结束/ 位置/ ;/ (/ 5/ )/ 若/ 当前/ 指令/ 上下文/ 中/ eax/ ~/ edx/ 均/ 有/ 意义/ ,/ 则/ 从/ 当前/ 位置/ 按照/ 算法/ 判断/ 条件/ 开始/ 一次/ 新/ 的/ 扫描/ ,/ 直到/ 找到/ 合适/ 的/ 插入/ 位置/ 为止/ ./ 扫描/ 过程/ 中/ 我们/ 通过/ 一个/ 数据结构/ 数组/ 记录/ 被/ 陷入/ 代码/ 覆盖/ 的/ 客户机/ 指令/ 语句/ 块/ ,/ 待/ 陷入/ VMM/ 以后/ 识别/ 并/ 模拟/ 客户机/ 指令/ 时/ 使用/ ./ 在/ 算法/ 基本/ 判断/ 条件/ 执行/ 之前/ ,/ 我们/ 给/ 算法/ 增加/ 了/ 一系列/ 可/ 自定义/ 的/ 额外/ 判断/ 条件/ ,/ 用于/ 处理/ 特别/ 的/ 情况/ ,/ 例如/ :/ 希望/ 将/ 陷入/ 代码/ 插入/ 到/ 某个/ 内核/ 函数调用/ 以后/ 的/ 位置/ ,/ 即/ 从/ 函数/ 入口/ 地址/ 偏移/ 一段距离/ 以后/ 再/ 开始/ 基本/ 算法/ 条件/ 分析判断/ ./ 我们/ 通过/ 查找/ 客户机/ 代码/ 中/ 内核/ 函数/ 对应/ 的/ call/ 指令/ 语句/ 调用/ 位置/ ,/ 并/ 从/ 下/ 一条/ 指令/ 语句/ 开始/ 进行/ 基本/ 条件/ 判断/ 分析/ 的/ 方法/ 实现/ ,/ 算法/ 流程/ 如图/ 3/ 所示/ ./ 函数/ 被/ 拦截/ 并/ 陷入/ 到/ VMM/ 中/ 执行/ 完/ 控制/ 功能/ 以后/ ,/ 为/ 保证/ 当/ 从/ VMM/ 切换/ 回/ 客户机/ 以后/ 应用程序/ 能/ 继续/ 正常/ 运行/ ,/ 我们/ 需要/ 在/ VMM/ 中/ 模拟/ 执行/ 被/ 陷入/ 代码/ 覆盖/ 的/ 原有/ 函数/ 指令/ 语句/ ./ 在/ 陷入/ VMM/ 后/ 通过/ 硬件/ 提供/ 的/ VMCS/ 结构/ (/ 以/ intel/ 平台/ 为例/ )/ 获得/ vm/ -/ exit/ 事件/ 发生/ 前/ 的/ 客户机/ 寄存器/ 信息/ ,/ 并/ 在/ VMM/ 中/ 模拟/ 执行/ 被/ 覆盖/ 的/ 函数/ 代码/ 并/ 填充/ VMCS/ 结构/ 中受/ 影响/ 的/ 寄存器/ ,/ 最后/ 返回/ 客户机/ 系统/ ,/ 完成/ 整个/ 模拟/ 执行/ 的/ 过程/ ./ 能/ 模拟/ 的/ 指令/ 类型/ 越/ 多/ ,/ 我们/ 就/ 越/ 容易/ 找到/ 合适/ 的/ 陷入/ 代码/ 插入/ 位置/ ./ 由于/ x86/ 的/ 指令系统/ 复杂/ 且/ 指令/ 类型/ 众多/ ,/ 我们/ 这里/ 仅/ 实现/ 12/ 类/ 在/ VMM/ 中/ 相对/ 容易/ 实现/ 模拟/ 且/ 在/ 客户机/ 系统/ 代码/ 函数/ 中/ 常见/ 的/ 主要/ 指令/ 语句/ ./ 经过/ 分析/ 利用/ 模拟/ 这/ 12/ 类/ 指令/ 语句/ 的/ 组合/ ,/ 我们/ 已经/ 可以/ 在/ 客户机/ 系统/ 的/ 系统/ 调用/ 或/ 内部/ 函数/ 中/ 找到/ 合适/ 的/ 陷入/ 代码/ 插入/ 位置/ ,/ 表/ 2/ 详细/ 介绍/ 了/ 这/ 几种/ 类型/ 语句/ 和/ 与其/ 匹配/ 的/ 在/ VMM/ 中/ 模拟/ 执行/ 的/ 等价/ 操作/ ./ 对于/ 表中/ 未/ 列出/ 的/ 多媒体/ 指令/ 、/ 涉及/ IO/ 操作/ 的/ 指令/ 的/ 模拟/ 相对/ 困难/ ,/ 但/ 在/ 经过/ 仔细分析/ 和/ 设计/ 后/ 理论/ 上/ 都/ 可以/ 在/ VMM/ 中/ 实现/ 模拟/ ,/ 未来/ 我们/ 将/ 完善/ 这部分/ 工作/ ./ 序号/ 1/ 客户机/ 系统/ 函数/ mov/ %/ eax/ ,/ %/ ebx/ (/ mov/ 指令/ 的/ 变种/ 指令/ movsb/ 、/ movsw/ 等/ 的/ 模拟/ 类似/ )/ 2cmp/ %/ eax/ ,/ %/ ebx3and/ %/ eax/ ,/ %/ ebx/ (/ xor/ 等/ 逻辑/ 计算/ 指令/ 的/ 模拟/ 类似/ )/ sub0x8/ ,/ %/ esp/ (/ add/ 等/ 算术/ 指令/ 语句/ 4/ 操作/ 类似/ )/ 5jmp0x12345678/ (/ ja/ ,/ jbe/ ,/ jz/ 等/ 变种/ 指令/ 的/ 模拟/ 类似/ ,/ 仅/ 需/ 在/ 执行/ 前/ 加上/ 对/ sf/ ,/ zf/ 或/ of/ 等/ 标志/ 位/ 的/ 判断/ )/ 6mov/ %/ eax/ ,/ 0x123456787push/ %/ ebp8pop/ %/ ebp9lds/ (/ 0x12345678/ )/ ,/ %/ eax/ (/ les/ 指令/ 的/ 模拟/ 类似/ ,/ 只是/ 其中/ 地址/ +/ 4/ 所存/ 的/ 值/ 赋/ 给/ es/ )/ 10lea/ (/ 0x12345678/ )/ ,/ %/ eaxcall0x12345678/ (/ callreg/ 等/ 语句/ 的/ 模/ 11/ 拟/ 采用/ 类似/ 步骤/ )/ 12retPage7/ 图/ 3/ 陷入/ 代码/ 自动/ 生成/ 及/ 插入/ 位置/ 扫描/ 算法/ 流程/ 在/ VMM/ 中/ 除了/ 可以/ 模拟/ 被/ 覆盖/ 的/ 函数/ 指令/ 正常/ 执行/ 流程/ 以外/ ,/ 我们/ 还/ 可以/ 通过/ 构建/ 并/ 模拟/ 执行/ 其他/ 指令/ 序列/ 的/ 方式/ 改变/ 客户机/ 系统/ 函数/ 的/ 原有/ 执行/ 流程/ ./ 例如/ :/ 查找/ 被/ 截获/ 函数调用/ ret/ 指令/ 地址/ 0x12345678/ ,/ 在/ VMM/ 中/ 模拟/ 执行/ “/ jmp0x12345678/ ”/ 实现/ 被/ 截获/ 函数/ 的/ 直接/ 返回/ ,/ 或者/ 构造/ eax/ 寄存器/ 的/ 值/ ,/ 直接/ 在/ VMM/ 中/ 模拟/ 执行/ ret/ 指令/ ,/ 实现/ 自定义/ 的/ 被/ 截获/ 函数/ 异常/ 返回/ ./ 甚至/ 可以/ 通过/ 详细分析/ 和/ 巧妙/ 设计/ ,/ 使/ 拦截/ 函数/ 执行/ 其他/ 高级/ 功能/ 以后/ 再/ 返回/ 等/ 动作/ ./ 如何/ 准确/ 获得/ 被/ 截获/ 函数/ 在/ 客户机/ 系统/ 中/ 当前/ 的/ 执行/ 语义/ 是/ 实现/ 高级/ 监控/ 功能/ 的/ 基础/ ./ 函数/ 的/ 执行/ 语义/ 简单/ 来说/ 概括/ 为/ 3/ 点/ :/ (/ 1/ )/ 函数/ 执行/ 了/ 什么/ 功能/ ;/ (/ 2/ )/ 函数/ 的/ 调用者/ 是/ 谁/ ;/ (/ 3/ )/ 函数/ 的/ 传入/ 参数/ 是/ 什么/ ./ 函数/ 执行/ 的/ 功能/ 可/ 通过/ 函数/ 名/ 或/ 分析/ 代码/ 事先/ 确认/ ./ 函数/ 的/ 调用者/ 一般/ 都/ 是/ 指/ 具体/ 的/ 进程/ ./ 在/ VMM/ 中/ 通过/ 硬件/ 提供/ 的/ VMCS/ 结构/ ,/ 可/ 获得/ 函数/ 被/ 截获/ 时/ 客户机/ 系统/ 所有/ 寄存器/ 的/ 值/ ,/ 并/ 可/ 访问/ 客/ Page8/ 户/ 机系统/ 所有/ 的/ 地址/ 空间/ ./ 通过/ 放在/ 内核/ 栈中/ 的/ thread/ _/ info/ 结构/ 得到/ task/ _/ struct/ 结构/ ,/ 通过/ task/ _/ struct/ 结构/ 获得/ 进程/ 号/ 、/ 进程/ 名/ 等/ 所有/ 调用者/ 的/ 信息/ ./ 函数/ 的/ 传入/ 参数/ 数量/ 通过/ 对/ 函数/ 代码/ 分析/ 事先/ 确认/ ./ 函数/ 的/ 传递/ 方法/ 一般/ 是/ 通过/ 寄存器/ 传递/ 、/ 约定/ 存储单元/ 传递/ 、/ 利用/ CALL/ 后续/ 区域/ 传递/ 和/ 堆栈/ 传递/ 4/ 种/ 传递/ 方法/ ,/ 其中/ 第/ 1/ 种/ 和/ 第/ 4/ 种/ 是/ 最/ 常用/ 的/ 方法/ ,/ 本/ 方案/ 暂时/ 只/ 对/ 这/ 两种/ 方法/ 进行/ 说明/ ./ 函数/ 通过/ 寄存器/ 传递/ 参数/ 所/ 使用/ 寄存器/ 一般/ 是从/ eax/ 开始/ 到/ edx/ 结束/ ,/ 通常/ 的/ 函数/ 入口处/ 会/ 有/ 一个/ 或/ 连续/ 的/ 几个/ push/ 指令/ ,/ 保存/ ebp/ 、/ edi/ 和/ esi/ 的/ 值/ ,/ 后面/ 紧接着/ 一个/ 或/ 几个/ mov/ 指令/ ,/ 如果/ mov/ 指令/ 的/ 源/ 操作数/ 是/ eax/ ~/ edx/ 寄存器/ ,/ 那么/ 可/ 确认/ 寄存器/ 内/ 存储/ 的/ 是/ 通过/ 寄存器/ 传递/ 进来/ 的/ 参数/ ./ 向/ 后/ 扫描/ 会/ 出现/ 一句/ sub/ 指令/ 操作/ esp/ ,/ 这句/ 是/ 为了/ 给/ 函数/ 本地/ 局部变量/ 预留/ 空间/ ,/ 再/ 向/ 后/ 扫描/ 如果/ 发现/ 有/ mov/ 指令/ 并且/ 源/ 操作数/ 是/ 对/ esp/ 加上/ 一个/ 偏移/ ,/ 例如/ :/ 0x10/ (/ esp/ )/ ,/ 则/ 可/ 确认/ 此/ 动作/ 是/ 将/ 栈/ 上/ 存储/ 的/ 函数/ 参数传递/ 给/ 寄存器/ ./ 上述/ 规则/ 只是/ 按照/ 通常/ 的/ 规律/ 总结/ 的/ ,/ 可/ 完成/ 对/ 目前/ 方案/ 中/ 已/ 实现/ 截获/ 的/ 系统/ 调用/ 或/ 函数/ 的/ 参数/ 获取/ ,/ 并/ 没/ 包含/ 所有/ 的/ 情况/ ,/ 完备/ 的/ 判断/ 条件/ 将/ 在/ 未来/ 的/ 工作/ 中/ 完成/ ./ 在/ 本/ 方案/ 中/ 由/ 反汇编/ 引擎/ 在/ 生成/ 并/ 插入/ 陷入/ 代码/ 阶段/ 自动/ 完成/ 函数参数/ 地址/ 的/ 获取/ 和/ 保存/ ,/ 待/ 被/ 截获/ 函数/ 陷入/ VMM/ 后/ ,/ 通过/ 之前/ 保存/ 的/ 地址/ 直接/ 获得/ 传入/ 参数/ ,/ 详细/ 流程/ 如图/ 4/ 所示/ ./ 3.2/ 系统/ 调用/ 截获/ 和/ 控制/ 按照/ 前面/ 章节/ 介绍/ 的/ 方法/ ,/ 结合/ 具体/ 的/ 操作系统/ 实现/ ,/ 我们/ 实现/ 了/ 对系统/ 调用函数/ 的/ 截获/ 和/ 控制/ ,/ 此种/ 方案/ 不/ 受/ 客户机/ 操作系统/ 版本/ 影响/ ,/ 可/ 对/ 任意/ 系统/ 调用/ 截获/ 和/ 控制/ ./ 以/ Linux/ 系统/ 中/ 的/ open/ 系统/ 调用/ 为例/ ,/ 我们/ 尝试/ 拦截/ open/ 系统/ 调用/ 对应/ 的/ do/ _/ sys/ _/ open/ 内核/ 函数/ ,/ 主要/ 有/ 4/ 个/ 关键问题/ 需要/ 解决/ :/ (/ 1/ )/ 获得/ 内核/ 函数/ 的/ 虚拟地址/ ./ 现代/ Linux/ 操作系统/ 中/ ,/ 内核/ 代码/ 是/ 被/ 映射/ 到/ 高端/ 地址/ 区域/ 并/ 常驻/ 内存/ 的/ ,/ 我们/ 可/ 通过/ etc/ 目录/ 下/ 的/ System/ ./ map/ 文件/ 或者/ proc/ 目录/ 下/ 的/ kallsyms/ 文件/ 中/ 查找/ ,/ 或者/ 编写/ 模块/ 通过/ kallsyms/ _/ look/ _/ up/ 函数/ 查找/ 到/ 需要/ 截获/ 的/ 内核/ 函数/ 的/ 地址/ ./ (/ 2/ )/ 找到/ 合适/ 的/ 陷入/ 代码/ 插入/ 位置/ ./ 通过/ VMM/ 中/ 的/ 反汇编/ 引擎/ 对/ 客户机/ 内核/ 反汇编/ 得到/ 汇编/ 代码/ ,/ 反汇编/ 引擎/ 自动/ 扫描/ 代码/ 找到/ 安装/ 陷入/ 代码/ 的/ 合适/ 位置/ ./ 在/ do/ _/ sys/ _/ open/ 函数/ 代码/ 中/ ,/ 反汇编/ 引擎/ 算法/ 选择/ 从/ 函数/ 入口/ 开始/ 偏移/ 10/ 个/ 字节/ 的/ 位置/ ,/ 选择/ 这里/ 作为/ 陷入/ 代码/ 的/ 插入/ 位置/ 的/ 原因/ 除了/ 前面/ 所/ 介绍/ 的/ 扫描/ 算法/ 基本/ 判断/ 条件/ 以外/ ,/ 又/ 加入/ 了/ 一个/ 附加条件/ ,/ 即/ 从/ 第一个/ call/ 指令/ 后/ 作为/ 扫描/ 的/ 起点/ ./ 增加/ 这个/ 条件/ 是/ 为了/ 找/ 在/ do/ _/ sys/ _/ open/ 函数/ 中/ 调用/ 的/ getname/ 内核/ 函数/ 位置/ ,/ 把/ 陷入/ 代码/ 插入/ 到/ getname/ 调用/ 后面/ ./ 这样/ 做/ 的/ 目的/ 是/ 内核/ 函数/ getname/ 把/ do/ _/ sys/ _/ open/ 函数/ 传入/ 的/ 文件名/ 参数/ 从/ 用户/ 态/ 拷贝到/ 内核/ 地址/ 空间/ ,/ 我们/ 在/ VMM/ 中/ 获取/ 系统/ 调用/ 参数/ 时/ ,/ 无需/ 再/ 模拟/ 客户机/ 系统/ 执行/ 拷贝/ 动作/ ./ (/ 3/ )/ 获得/ 函数/ 传入/ 参数信息/ ./ 反汇编/ 引擎/ 通过/ 对/ 客户机/ 代码/ 分析/ ,/ 记录/ 函数参数/ 传入/ 方式/ 和/ 存储/ 参数/ 的/ 寄存器/ 名称/ 或栈/ 偏移/ ./ (/ 4/ )/ 插入/ 陷入/ 代码/ ./ 在/ 客户机/ 操作系统/ 初始化/ 阶段/ 或/ 运行/ 阶段/ ,/ 通过/ VMM/ 中/ 的/ 处理/ 代码/ 直接/ 修改/ 客户机/ 系统/ 内存/ 中/ 指定/ 地址/ 区间/ 的/ 内容/ ,/ 插入/ 陷入/ 代码/ ./ (/ 5/ )/ 获取/ 被/ 监控/ 系统/ 调用/ 的/ 运行/ 上下文/ 信息/ ./ 在/ VMM/ 中/ 我们/ 通过/ 对/ esp/ 的/ 后/ 12/ 位/ (/ 启用/ 4K/ 大小/ 内核/ 栈/ )/ 或者/ 13/ 位/ (/ 启用/ 8K/ 大小/ 内核/ 栈/ )/ 清零/ 的/ 方式/ 找到/ 应用程序/ 内核/ 栈中/ thread/ _/ info/ 结构/ 的/ 指针/ ,/ 根据/ 偏移量/ 找到/ 指向/ task/ _/ struct/ 结构/ 的/ task/ 指/ Page9/ 针/ ,/ 再/ 根据/ 结构/ 中/ 各/ 成员/ 的/ 偏移量/ 得到/ 进程/ 名/ 、/ 进程/ 号/ 等/ 信息/ ,/ 通过/ 之前/ 记录/ 的/ 寄存器/ 名/ 或/ 栈/ 偏移/ 获得/ 函数/ 传入/ 参数/ ./ 总体/ 来说/ 系统/ 调用/ 的/ 监控/ 流程/ 分为/ 陷入/ 代码/ 的/ 安装/ 和/ 运行/ 时/ 监控/ 两个/ 部分/ ,/ 详细/ 完整/ 的/ 整体/ 流程/ 如图/ 5/ 所示/ ./ 图/ 5/ 系统/ 调用/ 陷入/ 代码/ 安装/ 及/ 运行/ 时/ 被/ 截获/ 和/ 控制/ 流程/ 3.3/ 应用程序/ 函数/ 截获/ 和/ 控制/ 结合/ 前面/ 章节/ 介绍/ 方法/ ,/ 结合/ 具体/ 的/ 应用程序/ 实现/ ,/ 我们/ 实现/ 了/ 对/ 应用程序/ 调用/ 的/ 内部/ 函数/ 的/ 截获/ 和/ 控制/ 方案/ ,/ 此种/ 方案/ 将/ 不受/ 地址/ 随机化/ 技术/ 的/ 影响/ ,/ 可/ 对/ 任意/ 应用程序/ 的/ 任意/ 函数/ 截获/ 和/ 控制/ ./ 以/ linux/ 系统/ 为例/ ,/ 要/ 完成/ 对/ 应用程序/ 函数/ 的/ 监控/ ,/ 有/ 4/ 个/ 关键问题/ 需要/ 解决/ :/ (/ 1/ )/ 判断/ 当前/ 加载/ 的/ 进程/ 是否是/ 我们/ 监控/ 的/ 进程/ ./ 程序/ 加载/ 阶段/ 通过/ 上/ 一节/ 介绍/ 的/ 方法/ 对/ exec/ 系统/ 调用/ 进行/ 监控/ ,/ 通过/ 其/ 第一个/ 参数/ 得到/ 当前/ 加载/ 的/ 进程/ 名称/ ,/ 确定/ 当前/ 加载/ 的/ 进程/ 是否是/ 我们/ 期望/ 监控/ 的/ 进程/ ./ (/ 2/ )/ 获得/ 被/ 监控/ 应用程序/ 函数/ 的/ 映射/ 地址/ ./ 应用程序/ 是/ elf/ 格式/ 的/ ,/ 在/ load/ _/ elf/ _/ binary/ 函数/ 执行/ 流程/ 中/ 调用/ 的/ 内核/ 函数/ elf/ _/ map/ 函数/ 完成/ 应用程序/ 的/ 代码段/ 和/ 数据/ 段/ 到/ 虚拟内存/ 的/ 文件/ 映射/ ,/ start/ _/ thread/ 函数/ 实现/ 启动/ 进程/ ./ 一般/ 情况/ 下/ 通过/ 对/ 应用程序/ 反汇编/ 获取/ 被/ 监控/ 内部/ 函数/ 的/ 虚拟地址/ 和/ 函数/ 的/ 名称/ ./ 如果/ 客户机/ 系统/ 启用/ 应用程序/ 地址/ 随机化/ (/ ALSR/ )/ 特性/ ,/ 每次/ 加载/ 时/ 应用程序/ 基址/ 、/ 共享/ 库/ 基址/ 、/ 代码段/ 、/ 数据/ 段/ 、/ 栈/ 、/ 堆/ 等/ 的/ 映射/ 地址/ 会/ 改变/ ,/ 在/ 这种/ 情况/ 下/ 需要/ 通过/ 额外/ 的/ 两个/ 步骤/ 来/ 获得/ 其/ 内部/ 函数/ 经过/ 随机化/ 后/ 的/ 准确/ 内存地址/ :/ ①/ 通过/ 反汇编/ 引擎/ 分析/ 应用程序/ ,/ 计算/ 出/ 被/ 监控/ 函数/ 在/ 代码段/ 中/ 的/ 偏移/ ;/ ②/ 通过/ 上/ 一节/ 介绍/ 的/ 方法/ ,/ 在/ load/ _/ elf/ _/ binary/ 函数/ 执行/ 路径/ 中/ 调用/ 完/ elf/ _/ map/ 的/ 位置/ 上/ 设置/ 陷入/ 代码/ ,/ 陷入/ VMM/ 通过/ elf/ _/ map/ 的/ 返回值/ 获取/ 进程/ 随机化/ 后/ 的/ 映射/ 地址/ ./ (/ 3/ )/ 插入/ 陷入/ 代码/ ./ 由于/ 操作系统/ 是/ 通过/ 缺页/ 的/ 形式/ 来/ 为/ 应用程序/ 分配/ 实际/ 的/ 物理/ 内存/ 的/ ,/ 所以/ 我们/ 需要/ 等/ 应用/ 程序运行/ 以后/ ,/ 在/ 操作系统/ 为/ 其/ 实际/ 分配/ 物理/ 页/ 并/ 写入/ 代码段/ 内容/ 以后/ ,/ 在/ 应用程序/ 进程/ 对应/ 的/ 内存/ 中/ 插入/ 陷入/ 代码/ ./ 在/ 启用/ 内存/ 虚拟化/ 技术/ 的/ 系统/ 中/ ,/ 以/ 影子/ 页表/ 为例/ ,/ 最终/ 的/ 物理/ 页/ 创建/ 会/ 通过/ 在/ VMM/ 中/ 的/ 影子/ 缺页/ 处理函数/ 完成/ ,/ 通过/ 在/ 影子/ 缺页/ 处理函数/ sh/ _/ page/ _/ fault/ 中/ 增加/ 相关/ 处理/ 代码/ ,/ 来/ 捕捉/ 实际/ 物理/ 页/ 分配/ 和/ 写入/ 代码段/ 内容/ 这个/ 时机/ ,/ 并/ 通过/ 反汇编/ 引擎/ 生成/ 并/ 插入/ 陷入/ 代码/ ./ (/ 4/ )/ 获得/ 函数/ 传入/ 参数信息/ ./ 反汇编/ 引擎/ 通过/ 对/ 客户机/ 代码/ 分析/ ,/ 记录/ 函数参数/ 传入/ 方式/ 和/ 存储/ 参数/ 的/ 寄存器/ 名称/ 或栈/ 偏移/ ./ (/ 5/ )/ 获取/ 被/ 监控/ 应用程序/ 函数/ 的/ 运行/ 上下文/ 信息/ ./ 当/ 应用程序/ 被/ 陷入/ 代码/ 陷入/ 到/ VMM/ 中/ 以后/ ,/ 通过/ 之前/ 记录/ 的/ 寄存器/ 名/ 或/ 栈/ 偏移/ 获得/ 函数/ 传入/ 参数/ ./ 总的来说/ ,/ 应用程序/ 函数/ 的/ 监控/ 分为/ :/ 应用程序/ 陷入/ 代码/ 安装/ 和/ 运行/ 时/ 监控/ 两个/ 部分/ ,/ 详细/ 流程/ 如图/ 6/ (/ a/ )/ 和/ 图/ 6/ (/ b/ )/ 所示/ ./ 3.4/ 关键/ 数据保护/ 我们/ 的/ 监控/ 模块/ 主要/ 由/ 在/ 虚拟机/ 管理系统/ 中/ 的/ 静态/ 策略/ 和/ 策略/ 配置/ 工具/ 、/ VMM/ 中/ 的/ 监控/ 模块/ 主体/ 代码/ 和/ 插入/ 在/ 客户机/ 系统/ 中/ 的/ 陷入/ 代码/ 三/ 部分/ 组成/ ./ 我们/ 默认/ VMM/ 和/ 虚拟机/ 管理系统/ 是/ 安全/ 的/ ,/ Page10/ 图/ 6/ 应用程序/ 函数/ 陷入/ 代码/ 安装/ 及/ 运行/ 时/ 被/ 截获/ 控制/ 流程/ 本/ 方案/ 将/ 无法/ 抵御/ 利用/ VMM/ 或/ 虚拟机/ 管理系统/ 漏洞/ 对/ 平台/ 攻击/ 的/ 场景/ ,/ 在/ 今后/ 的/ 工作/ 中/ 计划/ 完善/ 这部分/ 工作/ ./ 下面/ 以/ intel/ 的/ cpu/ 、/ xen/ 虚拟化/ 平台/ 和/ 影子/ 页表/ 内存/ 虚拟化/ 技术/ 为例/ 说明/ 对/ 这/ 三/ 部分/ 的/ 保护/ 方案/ ./ 构建/ 的/ 监控/ 模块/ 的/ 主体/ 代码/ 是/ 属于/ VMM/ 的/ 一部分/ ,/ 对/ 上层/ 客户机/ 系统/ 来说/ 是/ 不/ 可见/ 的/ ,/ 唯一/ 与/ 客户机/ 系统/ 交互/ 的/ 接口/ 是/ 由/ cpu/ 硬件/ 控制/ 的/ vm/ _/ exit/ 和/ vm/ _/ entry/ 动作/ ,/ 因此/ 在/ 客户机/ 系统/ 中/ 的/ 恶意程序/ 很难/ 直接/ 破坏/ 和/ 影响/ 监控/ 模块/ 的/ 主体/ 代码/ ./ 在/ 客户机/ 操作系统/ 内核/ 或/ 应用/ 程序代码/ 段/ 插入/ 的/ 陷入/ 代码/ 是/ 监控/ 模块/ 能够/ 正常/ 工作/ 的/ 关键/ ./ 修改/ 代码段/ 的/ 动作/ 是/ 在/ VMM/ 中/ 完成/ 的/ ,/ 客户机/ 系统/ 中/ 的/ 恶意程序/ 很难/ 直接/ 破坏/ 或/ 影响/ 这个/ 流程/ ./ 陷入/ 代码/ 被/ 安装/ 在/ 应用程序/ 进程/ 的/ 代码段/ 或/ 内核/ 代码段/ ,/ 这个/ 区域/ 客户机/ 操作系统/ 默认设置/ 为/ 只读/ ,/ 一旦/ 客户机/ 系统/ 中/ 的/ 恶意程序/ 尝试/ 修改/ 这些/ 页/ 将/ 会/ 触发/ 影子/ 缺页/ 并/ 通过/ vm/ _/ exit/ 陷入/ VMM/ ,/ 我们/ 在/ VMM/ 中/ 的/ 影子/ 缺页/ 处理函数/ 中/ 增加/ 一些/ 处理/ 代码/ ,/ 实现/ 捕捉/ 并/ 禁止/ 这种/ 修改/ 陷入/ 代码/ 的/ 动作/ ,/ 保护/ 我们/ 插入/ 的/ 陷入/ 代码/ 不/ 被/ 客户机/ 系统/ 中/ 的/ 恶意程序/ 破坏/ ./ 即使/ 恶意软件/ 发现/ 陷入/ 代码/ 插入/ 客户机/ 系统/ 的/ 位/ Page11/ 置/ ,/ 它/ 也/ 无法/ 轻易/ 旁路/ 我们/ 的/ 监控/ ./ 监控/ 模块/ 的/ 策略/ 配置/ 工具/ 和/ 静态/ 策略/ 放置/ 在/ 虚拟机/ 管理系统/ 中/ ,/ 通常/ 在/ 客户机/ 系统启动/ 时/ 策略/ 就/ 已/ 配置/ 好/ ,/ 在/ 运行/ 过程/ 中/ 可以/ 通过/ 策略管理/ 接口/ 进行/ 修改/ ,/ 管理/ 接口/ 对/ 客户机/ 系统/ 也/ 是/ 透明/ 的/ ,/ 客户机/ 系统/ 中/ 的/ 恶意程序/ 无法/ 直接/ 干预/ 这个/ 动作/ ,/ 整体/ 关键/ 数据保护/ 架构/ 如图/ 7/ 所示/ ./ 3.5/ 性能/ 优化/ 外/ 性能/ 开销/ 主要/ 包括/ 两个/ 方面/ :/ 经过/ 分析/ ,/ 本/ 方案/ 中/ 因为/ 安全监控/ 而/ 引入/ 的/ 额/ (/ 1/ )/ 我们/ 对/ 客户机/ 操作系统/ 内核/ 和/ 应用/ 程序代码/ 段/ 设置/ 了/ 许多/ 的/ 陷入/ 点/ ,/ 每/ 一次/ 陷入/ 和/ 恢复/ 将会/ 发生/ 一次/ 客户机/ 系统/ 和/ VMM/ 之间/ 的/ 上下文/ 切换/ ;/ (/ 2/ )/ 在/ VMM/ 中/ 需要/ 模拟/ 执行/ 被/ 陷入/ 代码/ 覆盖/ 的/ 指令/ 语句/ ./ 针对/ 第一点/ ,/ 监控/ 程序/ 自身/ 隔离/ 的/ 核心思想/ 是/ 将/ 程序/ 主体/ 放在/ VMM/ 中/ ,/ 我们/ 无法/ 避免/ 因/ 上下文/ 切换/ 带来/ 的/ 额外/ 性能/ 开销/ ./ 针对/ 第二点/ ,/ 在/ VMM/ 中/ 模拟/ 执行/ 函数/ 指令/ 语句/ 时/ ,/ 主要/ 产生/ 的/ 性能/ 损失/ 是/ 部分/ 模拟/ 执行/ 的/ 指令/ 语句/ 需要/ 通过/ 内存/ 虚拟化/ 机制/ 对/ 客户机/ 内存地址/ 进行/ 额外/ 的/ 寻址/ 处理/ ./ 以/ Xen/ 系统/ 下/ 的/ 影子/ 页表/ 技术/ 为例/ ,/ 影子/ 页表/ 保存/ 客户机/ 虚拟地址/ (/ gva/ )/ 到/ 主机/ 物理地址/ (/ hpa/ )/ 的/ 映射/ ,/ p2m/ 表来/ 保存/ 客户机/ 物理地址/ (/ gpa/ )/ 到/ 主机/ 物理地址/ (/ hpa/ )/ 的/ 映射/ 关系/ ,/ 并/ 通过/ 对/ 影子/ 缺页/ 的/ 方式/ 完成/ 客户机/ 页表/ 和/ 影子/ 页表/ 间/ 的/ 同步/ ./ 我们/ 在/ VMM/ 中/ 对/ 客户机/ 内存地址/ 的/ 寻址/ 处理/ 一般/ 要/ 经过/ 如下/ 几个/ 步骤/ :/ 户机页/ 框号/ ;/ (/ 1/ )/ 通过/ 影子/ 页表/ 逐层/ 遍历/ 客户机/ 页表/ 获得/ 客/ (/ 2/ )/ 通过/ p2m/ 表/ 找到/ 客户机/ 页/ 框号/ 对应/ 的/ 物理/ 页/ ;/ (/ 3/ )/ 将/ 物理/ 页/ 映射/ 到/ VMM/ 的/ 空间/ ;/ (/ 4/ )/ 对/ 映射/ 好/ 的/ 地址/ 进行/ 操作/ ;/ (/ 5/ )/ 解除/ 物理/ 页/ 的/ 映射/ ./ 如果/ 需要/ 对/ 客户机/ 系统/ 的/ 一个/ 大块/ 内存/ 区域/ 进行/ 读写操作/ ,/ 需要/ 以/ 物理/ 页/ 为/ 单位/ ,/ 重复/ 上述/ 过程/ ./ 经过/ 分析/ 发现/ ,/ 在/ 客户机/ 系统/ 运行/ 时/ ,/ 每当/ 被/ 插入/ 陷入/ 代码/ 的/ 函数/ 执行/ 时/ ,/ 会/ 不停/ 地/ 陷入/ 到/ VMM/ 中/ 的/ 监控/ 模块/ 被/ 我们/ 监控/ ./ 如果/ 模拟/ 执行/ 的/ 指令/ 中有/ 需要/ 对/ 客户机/ 系统/ 内存地址/ 做/ 寻址/ 操作/ 的/ 动作/ ,/ 每次/ 陷入/ 总是/ 做/ 重复/ 的/ 寻址/ 操作/ ./ 我们/ 通过/ 一种/ 缓存/ 机制/ 来/ 降低/ 这部分/ 性能/ 损失/ ,/ 在/ 第一次/ 陷入/ VMM/ 时/ 做/ 客户机/ 地址/ 内存地址/ 寻址/ 处理/ 步骤/ 中/ 的/ 第/ (/ 1/ )/ ,/ (/ 2/ )/ ,/ (/ 3/ )/ 步/ ,/ 并/ 将/ 映射/ 完成/ 的/ 结果/ 保存/ 到/ 缓存/ 中/ ,/ 等/ 后续/ 陷入/ VMM/ 需要/ 对/ 同一个/ 客户机/ 内存地址/ 做/ 寻址/ 操作/ 时/ ,/ 直接/ 使用/ 之前/ 缓存/ 的/ 结果/ 执行/ 第/ (/ 4/ )/ 步/ ,/ 跳过/ 前面/ 的/ 3/ 个/ 步骤/ ,/ 通过/ 减少/ 对/ 相同/ 客户机/ 虚拟地址/ 做/ 重复/ 寻址/ 处理/ 的/ 方式/ 达到/ 性能/ 优化/ 的/ 目的/ ./ 最后/ 在/ 清理/ 监控/ 策略/ 的/ 时候/ 执行/ 第/ (/ 5/ )/ 步/ ,/ 删除/ 缓存/ 中/ 的/ 映射/ 关系/ ./ 整体/ 流程/ 如图/ 8/ (/ a/ )/ 和/ 图/ 8/ (/ b/ )/ 所示/ ./ 4/ 系统/ 实现/ 我们/ 在/ Ubuntu12/ ./ 04LTS64/ 位/ 版本/ 操作系统/ 平台/ 上/ 结合/ xen/ -/ 4.3/ ./ 1/ 虚拟机/ 平台/ 软件系统/ 实现/ 了/ 我们/ 的/ 原型/ 系统/ ,/ 客户机/ 操作系统/ 为/ CentOS5/ ./ 8/ ./ 目前/ 的/ 原型/ 系统/ 实现/ 了/ 对/ 自己/ 编写/ 的/ 用户/ 态/ 程序/ test/ _/ open/ 调用/ 的/ openC/ 库函数/ 以及/ 客户机/ 系统/ 的/ sys/ _/ open/ 、/ sys/ _/ close/ 、/ sys/ _/ read/ 、/ sys/ _/ write/ 、/ sys/ _/ link/ 、/ sys/ _/ unlink/ 、/ sys/ _/ rename/ 、/ sys/ _/ lseek/ 、/ sys/ _/ mkdir/ 和/ sys/ _/ rmdir/ 文件系统/ 相关/ 系统/ 调用/ 的/ 截获/ 和/ 执行/ 流程/ 控制/ ./ 同时/ 通过/ 内存/ 页/ 的/ 权限/ 机制/ 结合/ VMM/ 中/ 的/ 监控/ 模块/ 对/ 陷入/ 代码/ 进行/ 保护/ ./ 系统/ 分为/ 静态/ 策略/ 文件/ 、/ 管理/ 配置/ 工具/ 、/ 策略/ 解析/ 模块/ 和/ 监控/ 模块/ ./ 监控/ 模块/ 中/ 的/ 反汇编/ 引擎/ 通过/ 移植/ 和/ 修改/ udis86/ 实现/ ,/ 管理/ 配置/ 工具/ 以/ 控制台/ 形式/ 运行/ 于/ domain0/ 的/ 用户/ 态/ ,/ 它/ 将/ 用户/ 配置/ 的/ xml/ 格式/ 的/ 策略/ 文件/ 初步/ 解析/ 后/ 通过/ ioctl/ 传递/ 给/ 运行/ 在/ domain0/ 内核/ 态/ 的/ 策略/ 解析/ 模块/ ,/ 策略/ 解析/ 模块/ 通过/ hypercall/ 将/ 策略/ 传递/ 给/ VMM/ 中/ 的/ 监控/ 模块/ ./ 策略/ 监控/ 模块/ 对/ 策略/ 进行/ 进一步/ 解析/ ,/ 并/ 完成/ 策略/ 的/ 配置/ 和/ 监控/ 环境/ 的/ 准备/ 工作/ ,/ 监控/ 模块/ 收到/ 上层/ Page12/ 图/ 8/ 客户机/ 虚拟地址/ 寻址/ 优化/ 前后/ 流程/ 对比/ 配置/ 的/ 策略/ 后/ ,/ 通过/ 反汇编/ 引擎/ 自动/ 生成/ 并/ 插入/ 陷入/ 代码/ ,/ 然后/ 等待/ 函数/ 被/ 调用/ 时/ 陷入/ VMM/ 执行/ 控制/ 功能/ ./ 整体/ 系统/ 架构图/ 如图/ 9/ 所示/ ./ 5/ 系统/ 实验/ 5.1/ 实验/ 环境/ 我们/ 的/ 实验/ 环境/ 由/ 物理/ 主机/ 、/ 经过/ 修改/ 的/ xen/ 系统/ 、/ linux/ 客户机/ 系统/ 和/ 监控/ 工具软件/ 组成/ ./ 物理/ 主机/ 配置/ 为/ 2.2/ GHzIntelCoreTMi7/ -/ 2720QM8/ 核/ 处理器/ ,/ 8GB/ 内存/ ,/ 1TB/ 硬盘/ ,/ 软件系统/ 是/ 基于/ xen/ -/ 4.3/ ./ 1/ 修改/ 的/ 虚拟机/ 监控器/ ./ 特权/ 虚拟/ 域/ Domain0/ 的/ 配置/ 为/ 2.2/ Gx8CPU/ 和/ 8GB/ 内存/ ,/ 运行/ 的/ 软件系统/ 是/ 内核/ 版本/ 为/ Linux3/ ./ 8.0/ -/ 29/ -/ generic/ 的/ 64/ 位/ ubuntu/ 操作系统/ ./ DomainU/ 的/ 配置/ 为/ 2.2/ Gx1CPU/ 和/ 512MB/ 内存/ ,/ 运行/ 的/ 软件系统/ 是/ 内核/ 版本/ 为/ Linux2/ ./ 6.32/ ./ 1/ 的/ 32/ 位/ CentOS5/ ./ 8/ 操作系统/ ./ 我们/ 监控/ 程序/ 的/ 管理/ 配置/ 工具/ 运行/ 在/ Domain0/ 的/ 用户/ 态/ ,/ 策略/ 解析/ 模块/ 运行/ 在/ Domian0/ 的/ 内核/ 中/ ,/ 监控/ 模块/ 整合/ 在/ xen/ 的/ VMM/ 中/ ./ 5.2/ 功能/ 实验/ 我们/ 分别/ 对/ 我们/ 编写/ 的/ 应用程序/ test/ _/ open/ 中/ 的/ 用户/ 态函数/ open/ 和/ 内核/ 系统/ 调用/ sys/ _/ open/ 、/ sys/ _/ close/ 、/ sys/ _/ read/ 、/ sys/ _/ write/ 、/ sys/ _/ link/ 、/ sys/ _/ unlink/ 、/ sys/ _/ rename/ 、/ sys/ _/ lseek/ 、/ sys/ _/ mkdir/ 和/ sys/ _/ rmdir/ 等/ 系统/ 调用/ 设置/ 了/ 监控点/ ,/ 实时/ 截获/ 其/ 执行/ 情况/ ./ test/ _/ open/ 的/ 功能/ 是/ 计算/ 调用/ 一次/ open/ 等/ 函数/ 所/ 需要/ 的/ 时间/ 并/ 将/ 结果/ 打印/ 在/ 屏幕/ 上/ ./ 我们/ 通过/ 策略/ 设置/ 禁止/ C/ 库函数/ open/ 和/ 系统/ 调用/ sys/ _/ open/ 正常/ 返回/ ,/ 如图/ 10/ (/ a/ )/ 所示/ ,/ test/ _/ open/ 程序/ 正常/ 执行/ 时会/ 打印/ 出/ 统计/ 时间/ 的/ 信息/ ,/ 然后/ 进入/ while/ 循环/ 等待/ 退出/ ./ 如图/ 10/ (/ b/ )/ 所示/ 如果/ 策略/ 设/ 为/ 禁止/ 执行/ open/ 时/ ,/ test/ _/ open/ 程序/ 的/ 用户/ 态/ open/ 函数/ 被/ 监控/ 模块/ 控/ Page13/ 制/ ,/ 直接/ 跳转/ 到/ 程序/ 末尾/ 的/ while/ 循环/ 中/ ,/ 不/ 执行/ 中间/ 的/ 过程/ ,/ 因此/ 没有/ 打印/ 统计/ 信息/ ./ 如图/ 10/ (/ c/ )/ 所示/ ,/ test/ _/ open/ 通过/ 系统/ 调用/ 执行/ 的/ 内核/ 函数/ sys/ _/ open/ 被/ 监控/ 模块/ 控制/ ,/ 跳转/ 到/ sys/ _/ open/ 返回/ 的/ 位置/ 并/ 返回/ 错误/ 值/ ,/ 使得/ 用户/ 态/ 的/ open/ 函数/ 显示/ 无法/ 打开/ 指定/ 文件/ ./ 图/ 10test/ _/ open/ 测试程序/ 正常/ 运行/ 和/ 函数/ 被/ 截获/ 后/ 运行/ 效果/ 如图/ 11/ (/ a/ )/ 所示/ ,/ xen/ 打印/ 了/ 我们/ 在/ 应用程序/ test/ _/ open/ 执行/ 过程/ 中/ ,/ xen/ 中/ 反汇编/ 引擎/ 自动/ 生成/ 并/ 插入/ 陷入/ 代码/ 的/ 流程/ ./ 如图/ 11/ (/ b/ )/ 所示/ ,/ xen/ 打印/ 了/ 截获/ 并/ 控制/ 用户/ 态/ open/ 函数/ 的/ 流程/ ./ 如图/ 11/ (/ c/ )/ 所示/ ,/ xen/ 打印/ 了/ 我们/ 在/ 应用程序/ test/ _/ open/ 执行/ 过程/ 中/ ,/ 截获/ 并/ 控制系统/ 调用/ open/ 函数/ 的/ 流程/ ./ 如图/ 11/ (/ d/ )/ 所示/ ,/ 我们/ 设置/ 允许/ 文件系统/ 相关/ 系统/ 调用/ 被/ 调用/ ,/ xen/ 打印/ 了/ 截获/ 并/ 控制/ 客户机/ 文件系统/ 图/ 11/ 自动/ 插入/ 陷入/ 代码/ 及/ 函数/ 被/ 监控/ 运行/ 效果/ Page14/ 相关/ 系统/ 调用/ 的/ 流程/ ./ 如图/ 12/ (/ a/ )/ 所示/ ,/ 正常/ 情况/ 下/ test/ _/ open/ 的/ 代码段/ 加载/ 到/ 0x0804800/ ./ 如图/ 12/ (/ b/ )/ 所示/ ,/ 我们/ 在/ 编译/ test/ _/ open/ 时/ 加上/ -/ fPIE/ -/ pie/ 选项/ ①/ ,/ 开启/ 应用程序/ 地址/ 随机化/ 功能/ 后/ ,/ 每次/ 启动/ 应用程序/ 时/ ,/ 程序代码/ 段/ 将/ 会/ 被/ 映射/ 到/ 不同/ 的/ 虚拟地址/ ./ 图/ 12test/ _/ open/ 测试程序/ 启用/ 地址/ 随机化/ 后/ 前后/ 内存/ 布局/ 在/ 开启/ 地址/ 随机化/ 功能/ 后/ ,/ 我们/ 依然/ 可以/ 成功/ 劫持/ test/ _/ open/ 中/ 的/ 用户/ 态/ open/ 函数/ 并/ 跳转/ 到/ 程序/ 末尾/ 的/ while/ 循环/ 中/ ,/ 不/ 执行/ 中间/ 的/ 过程/ ,/ 效果/ 和/ 图/ 7/ (/ b/ )/ 一样/ ./ 如图/ 13/ 所示/ ,/ xen/ 打印/ 了/ 我们/ 在/ 开启/ 地图/ 13/ 启用/ 地址/ 随机化/ 后/ test/ _/ open/ 的/ 用户/ 态/ open/ 址/ 随机化/ 后/ ,/ 监控/ test/ _/ open/ 的/ 用户/ 态/ open/ 函数/ 的/ 流程/ ./ 5.3/ 安全/ 实验/ 我们/ 的/ 监控/ 主体/ 代码/ 在/ VMM/ 中/ 实现/ ,/ 即使/ 黑客/ 已经/ 获得/ 了/ 客户机/ 系统/ 的/ 控制权/ 也/ 无法/ 直接/ 对/ 监控/ 功能/ 主体/ 代码/ 进行/ 破坏/ ./ 黑客/ 唯一/ 有/ 可能/ 破坏/ 的/ 是/ 我们/ 插入/ 客户机/ 系统/ 中/ 的/ 陷入/ 代码/ ,/ 因此/ 我们/ 的/ 安全/ 实验/ 主要/ 证明/ 当/ 黑客/ 获得/ 客户机/ 系统/ 控制权/ 后/ ,/ 无法/ 破坏/ 在/ 客户机/ 系统/ 中/ 插入/ 的/ 陷入/ 代码/ ./ 如图/ 14/ 所示/ ,/ 我们/ 有/ 针对性/ 的/ 编写/ 了/ rootkit/ 并/ 装载/ 到/ 客户机/ 系统/ 的/ 内核/ 中/ ,/ 该/ rootkit/ 会/ 尝试/ 修改/ 我们/ 在/ 客户机/ 系统/ 内核/ 代码段/ 中/ 插入/ 的/ 陷入/ 代码/ 序列/ ./ VMM/ 捕捉/ 并/ 禁止/ 了/ rootkit/ 这个/ 修改/ 行为/ ,/ 在/ 客户机/ 系统/ 中/ 的/ rootkit/ 无法/ 破坏/ 陷入/ 代码/ ,/ 无法/ 旁路/ 我们/ 的/ 监控/ 功能/ ./ 5.4/ 性能/ 实验/ 第/ 1/ 个/ 实验/ 我们/ 通过/ 在/ 客户机/ 系统/ 用户/ 态/ 运行/ 一个/ 自己/ 编写/ 的/ 程序/ test/ _/ open/ ,/ 该/ 程序/ 会/ 调用/ open/ 等/ 函数/ 并/ 计算/ 出/ 调用函数/ 的/ 总/ 时间/ ./ test/ _/ open/ 在/ 客户机/ 原生/ 系统/ 、/ VMSPY/ 开启/ 监控/ 客户机/ open/ 系统/ 调用/ 关闭/ 性能/ 优化/ 、/ VMSPY/ 同时/ 开启/ 监控/ 客户机/ open/ 系统/ 调用/ 和/ 性能/ 优化/ 、/ VMSPY/ 开启/ 监控/ test/ _/ open/ 的/ C/ 库函数/ open/ 关闭/ 性能/ 优化/ 和/ VMSPY/ 同时/ 开启/ 监控/ test/ _/ open/ 的/ C/ 库函数/ open/ 和/ 性能/ 优化/ 5/ 种/ 场景/ 下/ 测量/ 单次/ 调用/ open/ 的/ 额外/ 负载/ ./ 如图/ 15/ 所示/ ,/ test/ _/ open/ 调用/ 1/ 次/ open/ ,/ 监控/ open/ 系统/ 调用/ 时/ ,/ VMSPY/ 开启/ 性能/ 优化/ 的/ 总/ 时间/ 比/ 不/ 开启/ 性能/ 优化/ 缩短/ 了/ 4191ns/ ,/ 性能/ 提高/ 了/ 40/ %/ (/ 场景/ 3/ 和/ 场景/ 2/ 相比/ )/ ./ VMSPY/ 开启/ 性能/ 优化/ 情况/ 下/ 和/ 原生/ 系统/ 相比/ 多用/ 了/ 3515ns/ ,/ 性能/ 损失/ 大约/ 为/ 35/ %/ (/ 场景/ 3/ 和/ 场景/ 1/ 相比/ )/ ./ VMSPY/ 监控/ open/ 用户/ 态函数/ 时/ 开启/ 性能/ 优化/ 监控/ 用户/ 态/ open/ 函数/ 的/ 总/ 时间/ 比/ 不/ 开启/ 性能/ 优化/ 优化/ 缩短/ 了/ 2585ns/ ,/ 性/ ①/ Position/ -/ Independent/ -/ Executable/ ./ https/ :/ // // gcc/ ./ gnu/ ./ org/ // online/ -/ Page15/ 能/ 提升/ 了/ 26/ %/ (/ 场景/ 5/ 和/ 场景/ 4/ 相比/ )/ ./ VMSPY/ 开启/ 性能/ 优化/ 情况/ 下/ 和/ 原生/ 系统/ 相比/ 多用/ 了/ 384ns/ ,/ 性能/ 损失/ 为/ 3/ %/ (/ 场景/ 5/ 和/ 场景/ 1/ 相比/ )/ ./ 第/ 2/ 个/ 实验/ 我们/ 设置/ VMSPY/ 和/ 基于/ utrace/ 实现/ 的/ 标准/ linux/ 监控/ 软件/ systemtap/ ①/ 对/ 客户机/ 系统/ 所有/ 进程/ 的/ sys/ _/ open/ 、/ sys/ _/ close/ 、/ sys/ _/ read/ 、/ sys/ _/ write/ 、/ sys/ _/ link/ 、/ sys/ _/ unlink/ 、/ sys/ _/ rename/ 、/ sys/ _/ lseek/ 、/ sys/ _/ mkdir/ 和/ sys/ _/ rmdir/ 文件系统/ 相关/ 系统/ 调/ 监控/ ./ 在/ 客户机/ 原生/ 系统/ 、/ VMSPY/ 开启/ 监控/ 关闭/ 性能/ 优化/ 、/ VMSPY/ 同时/ 开启/ 监控/ 和/ 性能/ 优化/ 、/ systemtap/ 开启/ 监控/ 4/ 种/ 场景/ 下/ ,/ 执行/ dd/ 、/ 编译/ 内核/ 和/ 执行/ unixbench/ 这/ 3/ 个/ 应用/ ,/ 分别/ 测试/ IO/ 性能/ 、/ 随机/ 调用/ 系统/ 调用/ 性能/ 和/ 系统/ 调用/ 负载/ 性能/ ./ 如图/ 16/ (/ a/ )/ 所示/ ,/ 在/ 4/ 种/ 场景/ 下/ 分别/ 执行/ timeddif/ =/ // dev/ // hdaof/ =/ // testbs/ =/ 4kcount/ =/ 100000/ 命令/ ,/ 计录/ 读写/ 4K/ 内容/ 100000/ 次/ 的/ 总/ 时间/ ./ VMSPY/ 开启/ 性能/ 优化/ 比/ 不/ 开启/ 性能/ 优化/ 缩短/ 了/ 2.6/ s/ ,/ 性能/ 提高/ 了/ 16/ %/ (/ 场景/ 3/ 和/ 场景/ 2/ 相比/ )/ ./ VMSPY/ 开启/ 性能/ 优化/ 比/ 原生/ 系统/ 多用/ 了/ 5s/ ,/ 性能/ 损失/ 63/ %/ (/ 场景/ 3/ 和/ 场景/ 1/ 相比/ )/ ./ systemtap/ 开启/ 监控/ 比/ 原生/ 系统/ 多用/ 了/ 0.2/ s/ ,/ 性能/ 损失/ 为/ 2/ %/ (/ 场景/ 4/ 和/ 场景/ 1/ 相比/ )/ ./ 可见/ 我们/ 的/ 性能/ 优化/ 是/ 有/ 效果/ 的/ 但是/ 和/ systemtap/ 相比/ 还/ 存在/ 差距/ ./ 如图/ 16/ (/ b/ )/ 所示/ ,/ 在/ 4/ 种/ 场景/ 下/ 执行/ “/ timemakebzImage/ ”/ 命令/ ,/ 计算/ 客户机/ 编译/ 内核/ 的/ 总/ 时间/ ./ VMSPY/ 开启/ 性能/ 优化/ 比/ 不/ 开启/ 性能/ 优化/ 缩短/ 了/ 10s/ ,/ 性能/ 提高/ 了/ 2.8/ %/ (/ 场景/ 3/ 和/ 场景/ 2/ 相比/ )/ ./ VMSPY/ 开启/ 性能/ 优化/ 比/ 原生/ 系统/ 多用/ 了/ 37s/ ,/ 性能/ 损失/ 11/ %/ (/ 场景/ 3/ 和/ 场景/ 1/ 相比/ )/ ./ systemtap/ 开启/ 监控/ 比/ 原生/ 系统/ 多用/ 了/ 17s/ ,/ 性能/ 损失/ 为/ 2.2/ %/ (/ 场景/ 4/ 和/ 场景/ 1/ 相比/ )/ ./ 可见/ 我们/ 的/ 性能/ 优化/ 是/ 有/ 图/ 16IO/ 读写/ 、/ 编译/ 内核/ 及/ Unixbench/ 的/ 性能/ 测试/ 效果/ 的/ ,/ 追平/ 了/ systemtap/ 的/ 性能/ ./ 如图/ 16/ (/ c/ )/ 所示/ ,/ 在/ 4/ 种/ 场景/ 下/ 运行/ unix/ -/ bench/ ,/ 我们/ 截取/ 其中/ SystemCallOverhead/ 的/ 测试/ 结果/ ,/ unixbench/ 执行/ 的/ 测试/ 内容/ 是/ 在/ 10s/ 内/ 执行/ 7/ 个/ 样本/ ,/ 每个/ 样本/ 不停/ 地/ 调用/ getpid/ 系统/ 调用/ ,/ 最终/ 统计/ 在/ 1s/ 内/ 调用/ 系统/ 调用/ 的/ 次数/ ./ VMSPY/ 开启/ 性能/ 优化/ 比/ 不/ 开启/ 性能/ 优化/ 每秒/ 增加/ 了/ 16899/ 次/ 调用/ ,/ 性能/ 提高/ 了/ 3.5/ %/ (/ 场景/ 3/ 和/ 场景/ 2/ 相比/ )/ ./ ①/ Systemtap/ ./ https/ :/ // // sourceware/ ./ org/ // systemtap/ // ,/ 2015/ ,/ 8/ ,/ Page16VMSPY/ 开启/ 性能/ 优化/ 比/ 原生/ 系统/ 每秒/ 少/ 453867/ 次/ 调用/ ,/ 性能/ 损失/ 48/ %/ (/ 场景/ 3/ 和/ 场景/ 1/ 相比/ )/ ./ systemtap/ 开启/ 监控/ 比/ 原生/ 系统/ 每秒/ 少/ 了/ 311650/ 次/ 调用/ ,/ 性能/ 损失/ 为/ 33/ %/ (/ 场景/ 4/ 和/ 场景/ 1/ 相比/ )/ ./ 可见/ 我们/ 的/ 性能/ 优化/ 是/ 有/ 效果/ 的/ 但是/ 和/ systemtap/ 相比/ 还/ 存在/ 差距/ ./ 6/ 结束语/ 本文/ 提出/ 了/ 一种/ 自动化/ 的/ 虚拟机/ 客户机/ 系统/ 函数/ 截获/ 和/ 控制/ 方案/ VMSPY/ ./ 将/ 其/ 应用/ 到/ 基于/ 虚拟化/ 技术/ 的/ 云/ 计算/ 平台/ 上/ 可/ 在/ 一定/ 程度/ 上/ 解决/ 传统/ 监控/ 方案/ 带来/ 的/ 安全性/ 、/ 兼容性/ 和/ 性能/ 问题/ ,/ 解决/ 基于/ 虚拟化/ 自省/ 技术/ 方案/ 的/ 函数/ 截获/ 不/ 灵活/ 、/ 额外/ 资源/ 和/ 性能/ 开销/ 高/ 的/ 问题/ ./ 方案/ 中/ 所/ 采用/ 的/ 函数/ 截获/ 和/ 控制/ 方法/ 仅/ 实现/ 了/ 针对/ 文件系统/ 相关/ 系统/ 调用/ 的/ 截获/ 和/ 控制/ ,/ 经过/ 进一步/ 的/ 工作/ 可/ 快速/ 实现/ 针对/ 进程/ 间通信/ 、/ 网络通信/ 和/ 内存/ 访问/ 等/ 其他/ 系统/ 调用/ 的/ 截获/ 和/ 控制/ ./ 方案/ 中/ 基于/ 反汇编/ 引擎/ 实现/ 的/ 自动/ 指令/ 识别/ 和/ 模拟/ 功能/ 还/ 不能/ 识别/ 和/ 模拟/ 所有/ 的/ 客户机/ 指令/ ,/ 需要/ 经过/ 更/ 多/ 的/ 研发/ 工作/ 后/ 才/ 可/ 支持/ ./ 方案/ 中/ 主体/ 功能/ 工作/ 在/ VMM/ 中/ ,/ 依然/ 存在/ 准确/ 获取/ 客户机/ 系统/ 的/ 语义/ 问题/ ,/ 如果/ 需要/ 实现/ 复杂/ 的/ 监控/ 功能/ 还有/ 很多/ 的/ 工作/ 要/ 做/ ./ 在/ 性能/ 方面/ 我们/ 虽然/ 通过/ 缓存/ 机制/ 提升/ 了/ 部分/ 性能/ ,/ 但是/ 目前/ 的/ 架构/ 仍然/ 会/ 因为/ 陷入/ 点/ 的/ 增加/ ,/ 导致/ 性能/ 额外/ 开销/ 呈/ 线性/ 递增/ ,/ 并且/ 与/ systemtap/ 等/ 监控/ 软件/ 相比/ 还/ 存在/ 性能/ 差距/ ./ 未来/ 将/ 考虑/ 按/ 监控/ 对象/ 和/ 监控/ 类型/ 统一/ 处理/ 陷入/ 行为/ ,/ 尽可能/ 地/ 减少/ 陷入/ 次数/ ,/ 以/ 获得/ 更好/ 的/ 性能/ ./ 方案/ 中/ 默认/ 虚拟机/ 管理系统/ 和/ VMM/ 是/ 安全/ 的/ ,/ 未来/ 将/ 继续/ 研究/ 针对/ 这/ 两/ 部分/ 攻击/ 的/ 内容/ ,/ 提高/ 方案/ 的/ 整体/ 安全性/ ./ 目前/ 的/ 监控/ 程序/ 是/ 基于/ xen/ 虚拟化/ 平台/ 和/ linux/ 客户机/ 操作系统/ ,/ 仅/ 实现/ 原理/ 性功能/ 验证/ 的/ 原形/ 系统/ ,/ 未来/ 可/ 按照/ 需求/ 重新/ 设计/ 开发/ 出/ 适用/ 于/ 多种不同/ 操作系统/ 和/ 不同/ 虚拟化/ 平台/ ,/ 具备/ 更/ 多/ 复杂/ 安全/ 功能/ 的/ 实用化/ 监控/ 系统/ ./ 致谢/ 本文/ 作者/ 感谢/ 所有/ 的/ 审稿/ 者/ !/ 

