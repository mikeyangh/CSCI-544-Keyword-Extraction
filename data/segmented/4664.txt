Page1NoC/ 中/ 相邻/ 虚/ 通道/ 循环/ 共享/ 的/ VOQ/ 容错/ 路由器/ 设计/ 梁/ 华国/ 2/ )/ 1/ )/ (/ 合肥工业大学/ 计算机/ 与/ 信息/ 学院/ 合肥/ 230009/ )/ 2/ )/ (/ 合肥工业大学/ 电子/ 科学/ 与/ 应用/ 物理/ 学院/ 合肥/ 230009/ )/ 摘要/ 集成电路/ 的/ 不断/ 发展/ 使得/ 片上/ 系统/ 遇到/ 了/ 不可逾越/ 的/ 瓶颈/ 问题/ ,/ 片上/ 网络/ 因/ 其/ 具有/ 良好/ 的/ 可扩展性/ 、/ 较/ 高/ 的/ 通信/ 效率/ 和/ 可靠性/ 等/ 优势/ 成为/ 了/ 一种/ 新型/ 的/ 互连/ 架构/ ,/ 被/ 研究者/ 们/ 广泛/ 研究/ ./ 路由器/ 是/ 片/ 上/ 网络/ 中/ 的/ 关键部件/ ,/ 主要/ 负责/ 数据包/ 的/ 存储转发/ ,/ 影响/ 着/ 网络/ 的/ 整体/ 性能/ ,/ 故对/ 路由器/ 的/ 容错/ 设计/ 显得/ 尤为重要/ ./ 而/ 路由器/ 中/ 缓冲区/ 所/ 占/ 的/ 面积/ 较大/ ,/ 且/ 常见/ 的/ 缓冲区/ 容错/ 方案/ 都/ 可能/ 会/ 产生/ 头/ 阻塞/ 问题/ ,/ 因此/ 需要/ 设计/ 一种/ 容错/ 路由器/ 架构/ ,/ 既/ 可以/ 解决/ 头/ 阻塞/ 问题/ ,/ 又/ 能/ 实现/ 缓冲区/ 容错/ ./ 该文/ 提出/ 一种/ 相邻/ 虚/ 通道/ 循环/ 共享/ 的/ VOQ/ 容错/ 路由器/ 设计/ ,/ 可以/ 有效/ 地/ 容忍/ 虚/ 通道/ 故障/ ,/ 在/ 网络/ 拥塞/ 时能/ 最大/ 程度/ 的/ 保证/ 缓冲区/ 的/ 利用率/ ,/ 且/ 在/ 路由器/ 内部/ 虚/ 通道/ 均/ 故障/ 时/ 依旧/ 可以/ 保证/ 整个/ 网络/ 的/ 连通性/ ./ 在/ 基准/ VOQ/ 路由器/ 的/ 基础/ 上/ ,/ 该文/ 通过/ 增加/ 多个/ 多路/ 选择器/ 和/ 数据/ 分配器/ 来/ 实现/ 相邻/ 虚/ 通道/ 的/ 共享/ ,/ 增加/ 旁路/ 总线/ 来/ 保证/ 即使/ 输入/ 端口/ 内部/ 虚/ 通道/ 均/ 故障/ ,/ 路由器/ 依旧/ 可用/ ./ 当/ 数据包/ 所要/ 发往/ 的/ 虚/ 通道/ 故障/ 或者/ 拥塞/ 时/ ,/ 通过/ 借用/ 相邻/ 虚/ 通道/ 或/ 旁路/ 来/ 实现/ 数据包/ 的/ 存储转发/ ,/ 达到/ 了/ 容错/ 的/ 目的/ ,/ 提升/ 网络/ 性能/ ./ 同时/ ,/ 该文/ 设计/ 了/ 一种/ 基于/ 双向/ 队列/ 的/ FIFO/ 控制器/ ,/ 通过/ 两套/ 读写/ 指针/ 实现/ 对/ 借用/ 虚/ 通道/ 数据包/ 和/ 非/ 借用/ 虚/ 通道/ 数据包/ 的/ 读写操作/ ./ 双向/ 队列/ 的/ 设计/ ,/ 保证/ 了/ 数据包/ 在/ 输出/ 时/ 依旧/ 持有/ VOQ/ 特性/ ,/ 这是/ 绝大多数/ 的/ 缓冲区/ 容错/ 方案/ 所/ 没有/ 的/ ./ 实验/ 结果表明/ ,/ 在/ 无故障/ 发生/ 时/ ,/ 该文/ 方案/ 较/ VOQ/ 路由器/ 和/ multipleVOQ/ 路由器/ 而言/ 平均/ 延时/ 有所/ 降低/ ,/ 吞吐/ 率/ 有所提高/ ;/ 在/ 故障/ 发生/ 时/ ,/ 该文/ 方案/ 的/ 相邻/ VC/ 因为/ 可以/ 借用/ ,/ 故较/ VOQ/ 路由器/ 和/ multipleVOQ/ 路由器/ ,/ 平均/ 延时/ 分别/ 降低/ 了/ 32.3/ %/ 和/ 23.3/ %/ ,/ 吞吐/ 率/ 也/ 有所提高/ ./ 该文/ 方案/ 没有/ 增加/ 额外/ 的/ FIFO/ 开销/ ,/ 硬件/ 开销/ 上/ 因为/ 双向/ 队列/ 和/ BIST/ 检测/ 模块/ 的/ 设计/ 较/ 参考文献/ 方案/ 有所增加/ ,/ 但是/ 相对/ 于/ 其/ 达到/ 的/ 性能/ 而言/ ,/ 这种/ 硬件/ 开销/ 的/ 略微/ 增加/ 是/ 可以/ 接受/ 的/ ./ 在/ 网络/ 出现/ 虚/ 通道/ 故障/ 或/ 拥塞/ 时/ ,/ 该文/ 方案/ 的/ 设计/ 维持/ 了/ VOQ/ 特性/ 不变/ ,/ 保证/ 了/ 整个/ 网络/ 的/ 连通性/ ,/ 达到/ 了/ 较/ 高/ 的/ 可靠性/ ,/ 系统/ 整体/ 性能/ 较优/ ./ 关键词/ 片上/ 网络/ ;/ 容错/ 路由器/ ;/ VOQ/ ;/ 虚/ 通道/ 共享/ ;/ 双向/ 队列/ 1/ 引言/ 随着/ 集成电路/ 工艺/ 的/ 不断/ 发展/ 、/ 晶体管/ 特征/ 尺寸/ 的/ 不断/ 缩小/ ,/ 单个/ 芯片/ 上/ 可/ 集成/ 的/ 核/ 数目/ 越来越/ 多/ ,/ 传统/ 的/ 基于/ 总线/ 架构/ 的/ 片/ 上/ 系统/ (/ SystemonChip/ ,/ SoC/ )/ 出现/ 了/ 可扩展性/ 低/ 、/ 通讯/ 效率/ 差/ 等/ 问题/ [/ 1/ -/ 5/ ]/ ./ 为了/ 更/ 有效/ 地/ 实现/ 核间/ 的/ 通信/ ,/ 研究者/ 们/ 提出/ 了/ 片/ 上/ 网络/ (/ NetworkonChip/ ,/ NoC/ )/ 的/ 概念/ [/ 6/ -/ 8/ ]/ ./ 一个/ 典型/ 的/ NoC/ 系统/ 由/ 处理单元/ 、/ 网络资源/ 接口/ 、/ 路由器/ 和/ 通道/ 组成/ ./ NoC/ 中/ 的/ 所有/ 链路/ 都/ 可以/ 同时/ 进行/ 数据传输/ ,/ 较/ 传统/ 的/ 通信/ 架构/ 而言/ ,/ 达到/ 了/ 较/ 高/ 的/ 并行性/ [/ 9/ ]/ ./ 在/ NoC/ 的/ 组成/ 中/ ,/ 路由器/ 扮演着/ 通信/ 资源/ 的/ 角色/ ,/ 负责/ 数据包/ 的/ 存储/ 和/ 转发/ [/ 10/ ]/ ./ 对于/ 一个/ 拓扑/ 和/ 带宽/ 都/ 确定/ 的/ 网络/ 来说/ ,/ NoC/ 路由器/ 的/ 设计/ 很大/ 程度/ 上/ 影响/ 着/ 网络/ 的/ 延时/ 和/ 整体/ 性能/ [/ 11/ ]/ ./ 由于/ 制造/ 缺陷/ 、/ 电路/ 老化/ 、/ 工艺/ 不稳定性/ 和/ 电子/ 迁移/ 等/ 原因/ ,/ 路由器/ 中/ 元件/ 会/ 出现/ 永久性/ 故障/ [/ 12/ ]/ ./ 文献/ [/ 13/ ]/ 指出/ ,/ 路由器/ 中/ 故障/ 分布/ 与/ 元件/ 面积/ 成正比/ 关系/ ,/ 含/ 晶体管/ 越多/ 的/ 元件/ ,/ 越/ 容易/ 出现/ 故障/ ./ 其/ 实验/ 表明/ ,/ 在/ 45nm/ 工艺/ 下/ ,/ 如果/ FIFO/ 大小/ 为/ 32/ -/ flit/ ,/ 那么/ FIFO/ 面积/ 占/ Page3/ 路由器/ 总面积/ 的/ 94/ %/ ./ 如果/ FIFO/ 大小/ 为/ 8/ -/ flit/ ,/ 则/ 占/ 80/ %/ ./ 以上/ 数据/ 充分说明/ ,/ 在/ 路由器/ 面积/ 中/ FIFO/ 面积/ 占/ 很大/ 比重/ ,/ 因此/ FIFO/ 模块/ 比较/ 容易/ 出现/ 故障/ ,/ 故对/ 路由器/ FIFO/ 的/ 容错/ 显得/ 尤为重要/ ./ 面对/ 上述/ 问题/ ,/ 国内外/ 研究者/ 们/ 展开/ 了/ 深入研究/ ./ 对于/ NoC/ 中/ 路由器/ 的/ FIFO/ 故障/ ,/ 主要/ 有/ 两类/ 解决办法/ :/ (/ 1/ )/ 对/ 数据包/ 进行/ 重/ 路由/ ,/ 使/ 其/ 绕过/ 故障/ 路由器/ 来/ 实现/ 容错/ ./ 如/ 文献/ [/ 14/ ]/ 设计/ 了/ 一种/ 容错/ 路由/ 算法/ ,/ 它/ 通过/ 对/ 路由器/ 的/ 重构/ 来/ 达到/ 容忍/ 任意/ 数量/ 、/ 任意/ 分布/ 的/ 路由器/ 故障/ 以及/ 链路/ 故障/ ,/ 并且/ 不/ 需要/ 增加/ 额外/ 的/ 路由表/ 和/ 虚/ 通道/ (/ VirtualChannel/ ,/ VC/ )/ ,/ 但是/ 故障/ 节点/ 中/ 元件/ 即使/ 没有/ 故障/ 也/ 不能/ 被/ 使用/ ,/ 造成/ 了/ 资源/ 浪费/ ./ 文献/ [/ 15/ ]/ 提出/ 了/ 一种/ 基于/ 强化/ 学习/ 的/ 片/ 上/ 网络/ 容错/ 偏转/ 路由器/ ,/ 它/ 在/ 发送/ 数据包/ 的/ 同时/ ,/ 采用/ 强化/ 学习/ 的/ 方法/ 对/ 路由表/ 进行/ 重/ 配置/ 以/ 实现/ 路由/ 的/ 容错/ ,/ 但是/ 在/ 每个/ 路由器/ 内部/ 都/ 需要/ 维持/ 一个/ 路由表/ ;/ (/ 2/ )/ 通过/ 改进/ 路由器/ 架构/ 来/ 实现/ FIFO/ 容错/ ./ 如/ 文献/ [/ 16/ ]/ 提出/ 了/ 部分/ 输入/ 端口/ VC/ 借用/ 的/ 容错/ 路由器/ 架构/ ,/ 实现/ 了/ FIFO/ 容错/ 且/ 一定/ 程度/ 上/ 平衡/ 了/ 网络/ 负载/ ,/ 但/ 其/ 实现/ 方式/ 和/ 控制/ 逻辑/ 较为/ 复杂/ ,/ 在/ 不同/ 的/ 网络流量/ 下/ 需要/ 借用/ 的/ VC/ 输入/ 端口/ 不/ 一样/ ./ 文献/ [/ 17/ ]/ 提出/ ViChaR/ (/ dynamicVirtualChannelRegulator/ )/ 架构/ ,/ 将/ 输入/ 端口/ 内部/ 的/ 缓冲区/ 进行/ 共享/ ./ 这种/ 共享/ 方式/ 使得/ 端口/ 内部/ VC/ 的/ 数目/ 和/ 深度/ 都/ 有/ 了/ 较大/ 的/ 可变性/ ,/ 其/ FIFO/ 的/ 资源/ 利用率/ 较/ 传统/ NoC/ 路由器/ 要/ 高/ ,/ 但是/ 其/ 需要/ 庞大/ 的/ VC/ 记录表/ 和/ 复杂/ 的/ 硬件/ 来/ 实现/ ./ 文献/ [/ 18/ ]/ 提出/ 将/ 输入/ 端口/ 内部/ 的/ 缓冲区/ 进行/ 共享/ ,/ 不同/ 的/ 是/ 该/ 方案/ 的/ VC/ 数目/ 有/ 一定/ 的/ 限制/ ./ 因此/ 其/ 实现/ 较/ ViChaR/ 而言/ 较为简单/ ,/ 但是/ 每个/ 输入/ 端口/ 处/ 依旧/ 需要/ 维持/ 一张/ 关于/ VC/ 状态/ 的/ 记录表/ ./ 文献/ [/ 19/ ]/ 将/ 缓冲区/ 划分/ 成/ 共享/ 缓冲区/ 和/ 私有/ 缓冲区/ ,/ 将/ VC/ 数目/ 限制/ 为/ 4/ 个/ ./ 该/ 方案/ 通过/ 对/ 缓冲区/ 的/ 预/ 存取/ 操作/ 降低/ 了/ 数据包/ 的/ 读写/ 延时/ ,/ 但是/ 数据包/ 如果/ 不/ 经过/ 旁路/ 会/ 被/ 存储/ 两次/ ,/ 缓冲区/ 的/ 利用率/ 较/ 低/ ./ 文献/ [/ 20/ ]/ 所提/ 方案/ 中/ 的/ 缓冲区/ 也/ 是/ 使用/ 分布式/ 方式/ 放置/ 在/ 路由器/ 中/ ,/ 每个/ 输入/ 端口/ 处/ 依旧/ 是/ 独立/ 的/ VC/ 缓冲区/ ,/ 但是/ 增加/ 了/ 一组/ 中间/ 存储器/ ,/ 其/ 交叉开关/ 部分/ 设计/ 较为/ 复杂/ ,/ 需要/ 两个/ 交叉开关/ ./ 文献/ [/ 21/ ]/ 没有/ 采用/ 缓冲区/ 共享/ 的/ 方式/ 来/ 处理/ FIFO/ 故障/ 问题/ ,/ 而是/ 将/ 链路/ 、/ 缓冲区/ 等/ 模块/ 均/ 细化/ 为/ 4/ 个/ 小/ 模块/ ,/ 使/ 故障/ 定位/ 在/ 具体/ 的/ 小/ 模块/ 中/ ,/ 通过/ 对/ 故障/ 模块/ 的/ 重定向/ 来/ 实现/ 容错/ ,/ 这是/ 一种/ 时间/ 冗余/ 的/ 容错/ 方案/ ./ 以上/ 所述/ 的/ 容错/ 路由/ 算法/ 的/ 设计/ 和/ 路由器/ 架构/ 的/ 设计/ 都/ 较/ 好/ 的/ 解决/ 了/ FIFO/ 的/ 故障/ 问题/ ./ 但是/ ,/ 很多/ 的/ 设计方案/ 在/ 输入/ 端口/ 处均/ 没有/ 为/ 发往/ 不同/ 输出/ 端口/ 的/ 数据包/ 设置/ 特定/ 的/ 存储单元/ ,/ 这/ 可能/ 会/ 导致/ 头/ 阻塞/ 问题/ [/ 22/ ]/ ./ 头/ 阻塞/ 是/ 指/ 位于/ 同一个/ VC/ 的/ 多个/ 数据包/ 中/ 的/ 第一个/ 数据包/ ,/ 因/ 得不到/ 交叉开关/ 授权/ 而/ 被/ 阻塞/ ,/ 使/ 其/ 后面/ 的/ 所有/ 数据包/ ,/ 因要/ 等待/ 第一个/ 数据包/ 传输/ 而/ 不得不/ 被/ 阻塞/ 的/ 现象/ ./ 只要/ VC/ 数目/ 有/ 一定/ 的/ 限制/ ,/ 不/ 等于/ buffer/ 槽/ 的/ 总数/ ,/ 大多数/ 的/ 可/ 共享/ 输入/ 缓存/ 的/ 路由器/ 架构/ 都/ 可能/ 会/ 产生/ 头/ 阻塞/ 问题/ ./ 文献/ [/ 16/ ]/ 所提/ 的/ ViChaR/ 架构/ 可以/ 较/ 好/ 的/ 处理/ 头/ 阻塞/ 问题/ ,/ 但是/ 其/ 开销/ 太/ 大/ ,/ 需要/ 庞大/ 的/ VC/ 控制/ 表和较/ 多/ 的/ 硬件/ 逻辑设计/ ./ 为/ 解决/ 头/ 阻塞/ 问题/ ,/ 研究者/ 们/ 提出/ 了/ VOQ/ (/ VirtualOutputQueue/ )/ 机制/ [/ 23/ ]/ ,/ 使得/ 从/ 每个/ 输入/ 端口/ 到/ 不同/ 的/ 输出/ 端口/ 都/ 有/ 一个/ VC/ 单元/ ./ 同时/ ,/ 考虑/ 到/ FIFO/ 的/ 故障/ 问题/ ,/ 设计/ 一种/ 基于/ VOQ/ 的/ 可/ 解决/ FIFO/ 故障/ 的/ 容错/ 方案/ 显得/ 尤为重要/ ./ 文献/ [/ 24/ ]/ 基于/ VOQ/ 机制/ 提出/ 了/ multipleVOQ/ 路由器/ ,/ 将/ 原有/ 的/ 4/ 个/ VC/ 变成/ 8/ 个/ VC/ ,/ 使得/ 每个/ 输出/ 端口/ 有/ 2/ 个/ VC/ 与/ 之/ 对应/ ./ 这种/ 架构/ 在/ 发生/ 故障/ 或/ 网络流量/ 不/ 均衡/ 时/ ,/ 端口/ 对应/ 的/ FIFO/ 容量/ 较/ 小/ ,/ 不能/ 利用/ 其他/ 空闲/ FIFO/ 存储/ 数据/ ./ 文献/ [/ 25/ ]/ 探究/ 了/ FVADA/ (/ FixedVCAssign/ -/ mentwithDynamicAllocation/ )/ VC/ 分配机制/ ,/ 通过/ 动态/ 的/ VC/ 分配/ 达到/ FIFO/ 的/ 高/ 利用率/ ,/ 在/ 实现/ FIFO/ 容错/ 的/ 同时/ 也/ 解决/ 了/ FIFO/ 拥塞/ 问题/ ,/ 但/ 当/ 网络流量/ 较大/ 时/ 仍然/ 会/ 有头/ 阻塞/ 问题/ 产生/ ./ 本文/ 针对/ 路由器/ 中/ 的/ FIFO/ 故障/ 问题/ ,/ 提出/ 了/ 一种/ 对/ VOQ/ 路由器/ 的/ 改进/ 架构/ —/ —/ —/ 相邻/ 虚/ 通道/ 循环/ 共享/ (/ VirtualchannelLoopSharing/ ,/ VLS/ )/ 路由器/ ./ 这种/ 路由器/ 在/ 保持/ VOQ/ 特性/ 不变/ 的/ 基础/ 上/ ,/ 通过/ 结合/ 循环/ 共享/ 相邻/ VC/ 和/ 旁路/ 机制/ 来/ 进行/ 容错/ ,/ 同时/ 有效/ 地/ 缓解/ 了/ 网络/ 的/ 拥塞/ 现象/ ./ 当发往/ 特定/ 输出/ 端口/ 的/ 数据包/ 所/ 对应/ 的/ FIFO/ 故障/ 时/ ,/ 数据包/ 可/ 借用/ 相邻/ VC/ 的/ buffer/ 槽/ 存储/ 或/ 绕过/ 故障/ FIFO/ 以/ 实现/ 容错/ ./ 此外/ ,/ 当所/ 申请/ 的/ FIFO/ 拥塞/ 时/ ,/ 数据包/ 也/ 可/ 使用/ 相邻/ VC/ 存储/ ,/ 充分/ 地/ 利用/ 了/ 相邻/ VC/ 的/ 空闲/ buffer/ 槽/ ,/ 较/ 好/ 地/ 提升/ 了/ 网络/ 的/ 整体/ 性能/ ./ 为/ 保证/ VOQ/ 特性/ ,/ 我们/ 设计/ 出/ 了/ 一种/ 基于/ 双向/ 队列/ 的/ FIFO/ 控制器/ ,/ 通过/ 控制/ 两套/ 读写/ 指针/ 实现/ 对/ 借用/ VC/ 数据包/ 和/ 非/ 借用/ VC/ 数据包/ 的/ 读写操作/ ./ 2/ 头/ 阻塞/ 和/ 基准/ 的/ VOQ/ 路由器/ 如图/ 1/ 所示/ ,/ 传统/ 的/ NoC/ 路由器/ [/ 26/ ]/ 由/ 以下/ 部/ Page4/ 分/ 组成/ :/ 5/ 个/ 输入/ 端口/ (/ E/ 、/ S/ 、/ W/ 、/ N/ 、/ L/ )/ 、/ 路由/ 计算/ 模块/ 、/ 虚/ 通道/ 分配器/ 、/ 交叉开关/ 分配器/ 、/ 5/ 个/ 输出/ 端口/ (/ E/ 、/ S/ 、/ W/ 、/ N/ 、/ L/ )/ 和/ 一个/ 5/ ×/ 5/ 的/ 交叉开关/ (/ crossbar/ )/ 图/ 2/ 传统/ 的/ NoC/ 路由器/ 和/ 基准/ 的/ VOQ/ 路由器/ VOQ/ 路由器/ 的/ 特定/ VC/ 映射/ 特定/ 输出/ 端口/ 的/ 特性/ ,/ 虽然/ 较/ 传统/ NoC/ 路由器/ 简化/ 了/ 虚/ 通道/ 分配/ 和/ 交叉开关/ 分配/ 操作/ ,/ 但是/ 当/ 某个/ VC/ 故障/ 时/ 却/ 无法/ 完成/ 从/ 输入/ 端口/ 到/ 某个/ 输出/ 端口/ 的/ 数据传输/ ./ 以图/ 2/ 为例/ ,/ 若图/ 2/ (/ a/ )/ 中/ 任意/ 一个/ VC/ 发生/ 故障/ ,/ 数据包/ 均/ 可以/ 发/ 往/ 其他/ 3/ 个/ VC/ 来/ 实现/ 存储转发/ ./ 而图/ 2/ (/ b/ )/ 中/ 的/ VC/ 发生/ 故障/ 时/ ,/ 数据包/ 无法/ 发送至/ 该/ 故障/ VC/ 对应/ 的/ 输出/ 端口/ ./ 因此/ ,/ 对/ VOQ/ 路由器/ 的/ 容错/ 模块/ ./ 每个/ 输入/ 端口/ 有/ 多个/ VC/ ,/ 数据包/ 从/ 输入/ 端口/ 进入/ 路由器/ 后/ ,/ 会/ 经过/ 路由/ 计算/ 、/ 虚/ 通道/ 分配/ 、/ 交叉开关/ 分配/ 、/ 交叉开关/ 传输/ 、/ 链路/ 传输/ 5/ 个/ 阶段/ 的/ 流水/ ,/ 完成/ 数据包/ 的/ 存储转发/ ./ VOQ/ 路由器/ 是/ 在/ 传统/ 的/ NoC/ 路由器/ 基础/ 上/ 改进/ 的/ ,/ 简化/ 了/ 虚/ 通道/ 分配/ 和/ 交叉开关/ 分配/ 的/ 操作/ ./ 传统/ NoC/ 路由器/ 在/ 网络/ 负载/ 大/ 的/ 情况/ 下/ 很/ 容易/ 发生/ 头/ 阻塞/ 问题/ ./ 头/ 阻塞/ 将会/ 增加/ 网络通信/ 延时/ 从而/ 进一步/ 增大/ 网络/ 拥塞/ 状态/ ,/ 如图/ 2/ (/ a/ )/ 所示/ ,/ 以/ E/ 输入/ 端口/ 为例/ ,/ 它/ 有/ 4/ 个/ VC/ (/ VC/ -/ 0/ 、/ VC/ -/ 1/ 、/ VC/ -/ 2/ 、/ VC/ -/ 3/ )/ ./ 我们/ 假定/ 数据包/ A/ 、/ B/ 、/ C/ 分别/ 发/ 往/ 输出/ 端口/ S/ 、/ W/ 、/ N/ ,/ 数据包/ D/ 和/ 数据包/ E/ 均/ 发往/ 输出/ 端口/ L/ ./ 在/ 传统/ 的/ NoC/ 中/ ,/ 数据包/ E/ 进入/ 输入/ 端口/ 后/ 会/ 随机/ 选择/ 一个/ VC/ ,/ 图中/ 随机/ 选择/ 的/ 是/ VC/ _/ 0/ ./ 此时/ ,/ 若/ 发往/ 输出/ 端口/ S/ 的/ 路径/ 遇到/ 阻塞/ ,/ 这/ 将/ 导致/ 数据包/ A/ 停留/ 在/ VC/ -/ 0/ 中/ 迟迟/ 不能/ 转发/ ,/ 使得/ VC/ -/ 0/ 中/ 的/ 后续/ 数据包/ E/ 也/ 无法/ 发送/ ,/ 形成/ 头/ 阻塞/ 问题/ ./ 文献/ [/ 23/ ]/ 提出/ 了/ 能/ 有效/ 解决/ 头/ 阻塞/ 问题/ 的/ VOQ/ 机制/ ./ VOQ/ 机制/ 主要/ 思想/ 就是/ 把/ 输入/ 端口/ 中/ VC/ 分别/ 映射/ 到/ 不同/ 的/ 输出/ 端口/ ,/ 这样/ 一个/ VC/ 中/ 只/ 存有/ 发/ 往/ 同一个/ 输出/ 端口/ 中/ 的/ 数据/ ,/ 如图/ 2/ (/ b/ )/ 所示/ ,/ 其中/ VC/ -/ S/ 、/ VC/ -/ W/ 、/ VC/ -/ N/ 、/ VC/ -/ L/ 只能/ 存储/ 发往/ S/ 、/ W/ 、/ N/ 和/ L/ 输出/ 端口/ 的/ 数据/ ,/ 从根本上/ 避免/ 了/ 头/ 阻塞/ 的/ 发生/ ./ 很/ 有/ 必要/ 的/ ./ 此外/ ,/ VOQ/ 机制/ 不适/ 用于/ mesh/ 拓扑/ 中/ 的/ 不/ 均衡/ 通信/ ./ 以/ E/ 输入/ 端口/ 为例/ ,/ 若/ 在/ 某/ 一段时间/ 内/ 由/ E/ 输入/ 端口/ 发往/ S/ 输出/ 端口/ 的/ 数据包/ 数目/ 明显/ 多于/ 发往/ W/ 、/ N/ 和/ L/ 输出/ 端口/ 的/ 数据包/ ,/ VOQ/ 路由器/ 就/ 会/ 出现/ VC/ -/ S/ 满/ ,/ 但/ VC/ -/ W/ 、/ VC/ -/ N/ 和/ VC/ -/ L/ 有/ 空闲/ 的/ 状态/ ./ 鉴于/ 此/ ,/ 针对/ VOQ/ 路由器/ 可能/ 发生/ 的/ 拥塞/ 现象/ ,/ 合理/ 地/ 利用/ 空闲/ VC/ 来/ 缓解/ 拥塞/ 是/ 研究/ 的/ 另/ 一个/ 重点/ ./ Page53VLS/ 路由器/ 架构/ 及其/ 容错/ 原理/ 3.1/ 故障/ 及/ 拥塞/ 分析/ 以/ E/ 输入/ 端口/ 为例/ ,/ VC/ -/ S/ 、/ VC/ -/ W/ 、/ VC/ -/ N/ 、/ VC/ -/ L/ 分别/ 表示/ 存放/ 发/ 往/ 输出/ 端口/ S/ 、/ W/ 、/ N/ 、/ L/ 的/ 数据包/ 的/ VC/ ./ 图/ 3/ (/ a/ )/ 所示/ 的/ 是/ 每个/ VC/ 均/ 能/ 正常/ 工作/ 的/ 情况/ ,/ 此时/ 没有/ 故障/ 和/ 拥塞/ 的/ 发生/ ,/ 无需/ 借用/ 相邻/ VC/ ./ 如果/ VC/ -/ S/ 出现/ 拥塞/ ,/ 如图/ 3/ (/ b/ )/ 所示/ ,/ 由/ E/ 输入/ 端口/ 发往/ S/ 输出/ 端口/ 的/ 数据包/ 只能/ 被/ 缓存/ 在/ 上级/ 路由器/ 中/ ,/ 会/ 造成/ 上级/ 路由器/ 的/ 拥塞/ ,/ 增大/ 网络延时/ ,/ 降低/ 吞吐/ 率/ ./ 因此/ ,/ 充分利用/ 可用/ 资源/ 来/ 缓解/ 网络/ 拥塞/ 现象/ 是/ 非常/ 有/ 必要/ 的/ ./ 若/ 输入/ 端口/ 中/ 某个/ VC/ 出现/ 故障/ ,/ 如图/ 3/ (/ c/ )/ 所示/ ,/ VC/ -/ S/ 发生/ 故障/ ,/ 则/ 在/ 特定/ 输入/ 端口/ 对应/ 特定/ 输出/ 的/ VOQ/ 路由器/ 中/ ,/ 由/ E/ 输入/ 端口/ 发往/ S/ 输出/ 端口/ 的/ 数据包/ 无法/ 正常/ 传输/ ./ 如果/ 没有/ 相应/ 的/ 容错/ 措施/ ,/ 会/ 使/ 网络/ 的/ 性能/ 越来越/ 差/ ,/ 因此/ 在/ 设计/ VOQ/ 路由器/ 时/ 必须/ 考虑/ VC/ 故障/ 问题/ ./ 3.2/ VLS/ 路由器/ 架构/ 由于/ VOQ/ 路由器/ 架构/ 在/ 实际/ 应用/ 过程/ 中/ 可能/ 出现/ 网络流量/ 不/ 均衡/ 问题/ 以及/ 发生/ 因为/ 某个/ FIFO/ 故障/ 而/ 导致/ 的/ 发往/ 特定/ 输出/ 端口/ 的/ 数据包/ 无法/ 正常/ 传输/ 的/ 情况/ ,/ 故/ 本文/ 提出/ 了/ 在/ 输入/ 端口/ 内部/ 共享/ 相邻/ VC/ 存储/ 数据包/ 的/ 方法/ ,/ 以/ 实现/ 端口/ 内部/ 相邻/ 虚/ 通道/ 循环/ 共享/ 的/ VLS/ 路由器/ 设计/ ./ VLS/ 路由器/ 如图/ 4/ 所示/ ,/ 主要/ 由/ 5/ 个/ 输入输出/ 端口/ 、/ 路由/ 计算/ 模块/ 、/ 虚/ 通道/ 分配/ 模块/ 、/ 交叉开关/ 分配/ 模块/ 和/ 旁路/ 控制器/ 组成/ ./ 其中/ ,/ 路由/ 计算/ 模块/ 采用/ 的/ 是/ 前/ 向/ 路由/ 技术/ ,/ 数据包/ 从/ 输入/ 端口/ 进入/ 后/ 会/ 同步进行/ 路由/ 计算/ 和/ 虚/ 通道/ 分配/ 操作/ ,/ 此时/ 路由/ 计算/ 的/ 结果/ 是/ 数据包/ 在/ 进入/ 下级/ 路由器/ 后/ 需要/ 发往/ 的/ 输出/ 端口/ ./ 这种/ 前向/ 路由/ 技术/ 使得/ 数据包/ 在/ 路由器/ 中/ 的/ 传输/ 变成/ 4/ 阶段/ 的/ 流水/ ,/ 一定/ 程度/ 上/ 减少/ 了/ 数据包/ 在/ 网络/ 中/ 传输/ 的/ 延时/ ./ 由于/ 本文/ 架构/ 是/ 在/ VOQ/ 路由器/ 架构/ 上/ 进行/ 改进/ 的/ ,/ 故/ 仍然/ 保持/ VOQ/ 架构/ 关于/ 特定/ VC/ 映射/ 特定/ 输出/ 端口/ 的/ 性质/ ,/ 较/ 传统/ NoC/ 路由器/ 而言/ ,/ 简化/ 了/ 虚/ 通道/ 分配/ 和/ 交叉开关/ 分配/ 操作/ ,/ 防止/ 了/ 头/ 阻塞/ 的/ 发生/ ./ 数据包/ 在/ 进入/ 输入/ 端口/ 后/ ,/ 会/ 经过/ VC/ 选择器/ 、/ 双向/ FIFO/ 控制器/ 和/ 输出/ 选择器/ 阶段/ ,/ 接受/ 交叉开关/ 的/ 仲裁/ ,/ 图/ 5/ 所示/ 的/ 即/ 为/ E/ 输入/ 端口/ 的/ 控制/ 逻辑/ ./ 由于/ 本文/ 所/ 提到/ 的/ FIFO/ 故障/ 指/ 的/ 是/ 永久/ 故障/ ,/ 故/ 可以/ 通过/ BIST/ 检测/ 进行/ 测试/ ./ 在/ 工作/ 模式/ 之前/ ,/ 系统/ 首先/ 工作/ 在/ 测试/ 模式/ ,/ 启动/ BIST/ 检测/ 机制/ ,/ 对/ 路由器/ 中/ 的/ FIFO/ 进行/ 故障/ 检测/ ./ 测试/ 结束/ 后/ ,/ 将/ FIFO/ 的/ 故障/ 信息/ 传送/ 给/ VC/ 选择器/ 模块/ ,/ 根据/ 相应/ 的/ 故障/ 信息/ 判断/ 是否/ 借用/ 相邻/ 的/ VC/ ./ VC/ 选择器/ ./ 数据包/ 会/ 有/ 一个/ VCID/ 域/ 和/ 一个/ BVC/ 域/ ,/ VCID/ 域里/ 的/ 信息/ 表示/ 数据包/ 会/ 发往/ 哪个/ VC/ ,/ BVC/ 域/ 表示/ 数据包/ 是否/ 有/ 借用/ VC/ ,/ 若/ 借用/ ,/ 则/ BVC/ 域/ 的/ 值/ 为/ 1/ ,/ 若/ 没有/ 借用/ ,/ 则/ 值/ 为/ 0/ ./ 此/ 模块/ 析取/ 数据包/ 的/ VCID/ 域/ 信息/ ,/ 接收/ 来自/ BIST/ 测试/ 模块/ 发送/ 的/ FIFO/ 的/ 故障/ 信息/ ,/ 以及/ 双向/ FIFO/ 控制器/ 的/ 满/ 信息/ ,/ 判断/ 是否/ 共享/ 相邻/ VC/ ,/ 以/ 分配/ 合适/ 的/ VC/ 给/ 到来/ 的/ 数据包/ ./ 双向/ FIFO/ 控制器/ ./ 由于/ 同一/ VC/ 的/ FIFO/ 中/ 可能/ 会/ 存有/ 发/ 往/ 两个/ 输出/ 端口/ 的/ 数据包/ ,/ 故/ 需要/ 双向/ FIFO/ 控制器/ 来/ 实现/ 两种/ 数据包/ 的/ 读写/ 过程/ ./ 为了/ 保证/ 改进/ 后/ 的/ 路由器/ 依旧/ 保持/ VOQ/ 的/ 特性/ ,/ 我们/ 对/ FIFO/ 的/ 控制/ 逻辑/ 做出/ 改变/ ,/ 设定/ 两套/ 读写/ 指针/ ./ 两种/ 数据包/ 分别/ 从/ FIFO/ 的/ 两端/ 开始/ 进行/ 读写操作/ ,/ 对/ 借用/ VC/ 的/ 数据包/ 的/ 操作/ 采用/ 指针/ 控制器/ 1/ 来/ 控制/ ,/ 非/ 借用/ VC/ 的/ 数据包/ 的/ 操作/ 采用/ 指针/ 控制器/ 2/ 来/ 控制/ ./ 输出/ 选择器/ ./ 为了/ 保证/ 交叉开关/ 操作/ 的/ 简洁性/ ,/ 输出/ 选择器/ 模块/ 接收/ 来自/ 双向/ FIFO/ 控制器/ 的/ 空/ 信息/ ,/ 通过/ 判断/ FIFO/ 中/ 的/ 数据/ 来/ 实现/ 对/ 发往/ 同一/ 输出/ 端口/ 的/ 数据包/ 的/ 仲裁/ 选择/ ./ 输出/ 选择器/ 模块/ 内部/ Page6/ 图/ 4VLS/ 路由器/ 架构图/ 5E/ 输入/ 端口/ 有/ 一个/ 计数器/ ,/ 用于/ 计算/ 数据包/ 输出/ 仲裁/ 时/ 连续/ 选择/ 同一个/ VC/ 的/ 次数/ ./ 为/ 避免/ 饥饿/ 的/ 发生/ ,/ 当/ 计数器/ 大于/ 某一/ 特定/ 值时/ 选择/ 另/ 一条/ VC/ 输出/ 数据包/ ,/ 同时/ 将/ 计数器/ 复位/ 至/ 0/ ,/ 重新/ 开始/ 计数/ ./ 以/ E/ 输入/ 端口/ 发往/ S/ 输出/ 端口/ 的/ 仲裁/ 为例/ ,/ 该/ 仲裁/ 通过/ 判断/ VC/ -/ S/ 中非/ 借用/ 的/ FIFO/ 和/ VC/ -/ W/ 中/ 借用/ 的/ FIFO/ 即/ VC/ -/ W/ (/ S/ )/ 是否/ 有/ 数据/ 来/ 做出/ 决策/ ,/ 0/ 表示/ 无/ 数据包/ ,/ 1/ 表示/ 有/ 数据包/ ,/ 其/ 仲裁/ 决策/ 如表/ 1/ 所示/ ./ X/ 表示/ 维持/ 上/ 周期/ 决策/ 结果/ ./ Page7/ 表/ 1E/ 输入/ 端口/ 中/ S/ 输出/ 的/ 数据包/ 仲裁/ 选择/ VC/ -/ S/ 由表/ 1/ 可以/ 看出/ ,/ 本文/ 优先/ 传输/ 借用/ VC/ 中/ 的/ FIFO/ 的/ 数据包/ ,/ 这样/ 的/ 优点/ 是/ 尽可能/ 的/ 减少/ 因/ 借用/ 导致/ 的/ 正常/ 数据包/ 传输/ 的/ 关键/ 路径/ 延迟/ 的/ 增大/ ./ 旁路/ 控制器/ ./ 若/ BIST/ 发送/ 的/ 故障/ 信息/ 显示/ 数据包/ 要/ 存储/ 的/ VC/ 及其/ 相邻/ VC/ 均/ 故障/ 时/ ,/ 可/ 通过/ VC/ 选择器/ 模块/ 选择/ 旁路/ 总线/ 来/ 绕过/ 故障/ VC/ ,/ 从/ 相对/ 应/ 的/ 输出/ 端口/ 进行/ 输出/ ./ 当/ 旁路/ 控制器/ 有/ 多个/ 旁路/ 请求/ 时/ ,/ 选择/ 最先/ 到来/ 的/ 数据包/ 输出/ ./ 3.3/ 双向/ FIFO/ 控制器/ 本文/ 的/ FIFO/ 模块/ 要/ 存储/ 借用/ VC/ 的/ 数据包/ 和/ 非/ 借用/ VC/ 的/ 数据包/ ,/ 因此/ 其/ 与/ 控制/ 逻辑/ 较/ 传统/ 路由器/ 的/ FIFO/ 有所不同/ ./ 当/ 网络/ 中/ 出现/ VC/ 故障/ 或/ 拥塞/ 时/ ,/ 双向/ FIFO/ 控制器/ 的/ 设计/ 在/ 本文/ 的/ 容错/ 方案/ 中/ 必不可少/ ,/ 故对/ 其/ 做出/ 详细/ 的/ 说明/ ./ 图/ 6/ 显示/ 了/ 双向/ FIFO/ 控制器/ 的/ 主要/ 构成/ 部件/ ,/ 双向/ FIFO/ 控制器/ 主要/ 由/ 2/ 个/ 指针/ 控制器/ 和/ 1/ 个/ 比较/ 器/ 组成/ ./ 每个/ 指针/ 控制器/ 控制/ 一组/ 读写/ 指针/ ,/ 其中/ 指针/ 控制器/ 1/ 控制/ 的/ 是/ 借用/ VC/ 的/ 数据包/ 的/ 读写操作/ ,/ 指针/ 控制器/ 2/ 控制/ 的/ 非/ 借用/ VC/ 的/ 数据包/ 的/ 读写操作/ ./ 两组/ 读写/ 指针/ 的/ 时钟/ 信号/ 不/ 同时/ 有效/ ,/ 同一/ 时刻/ 只能/ 允许/ 一组/ 数据/ 的/ 读写/ ./ 比较/ 器/ 根据/ 两组/ 读写/ 指针/ 的/ 位置/ 来/ 判断/ FIFO/ 的/ 状态/ ,/ 判定/ 满和空/ 信号/ 是否/ 有效/ ./ 我们/ 用/ a2/ 指代/ 写/ 指针/ 2/ 的/ 值/ ,/ 用/ a1/ 指代/ 写/ 指针/ 1/ 的/ 值/ ,/ 用/ b2/ 指代/ 读/ 指针/ 2/ 的/ 值/ ,/ 用/ b1/ 指代/ 读/ 指针/ 1/ 的/ 值/ ,/ 假设/ FIFO/ 共有/ n/ 个/ buffer/ 槽/ ,/ 则/ 判定/ 条件/ 如下/ :/ (/ 1/ )/ b2/ -/ a2/ =/ 1/ ,/ 则/ 非/ 借用/ FIFO/ 满/ ./ (/ 2/ )/ b1/ -/ a1/ =/ 1/ ,/ 则/ 借用/ FIFO/ 满/ ./ (/ 3/ )/ a2/ =/ b2/ ,/ 则/ 非/ 借用/ FIFO/ 空/ ./ (/ 4/ )/ a1/ =/ b1/ ,/ 则/ 借用/ FIFO/ 空/ ./ 3.4/ VLS/ 路由器/ 容错/ 方案/ 由于/ 路由器/ 中/ FIFO/ 面积/ 所/ 占/ 比重/ 较大/ ,/ 且/ 在/ FIFO/ 故障/ 和/ 拥塞/ 情况/ 下会/ 严重/ 影响/ 网络/ 性能/ ./ 因此/ ,/ 对/ VOQ/ 路由器/ 的/ 容错/ 和/ 平衡/ 负载/ 的/ 研究/ 显得/ 尤为重要/ ./ 本文/ 提出/ 的/ VLS/ 路由器/ 通过/ 借用/ 相邻/ VC/ 来/ 存储/ 数据包/ ,/ 在/ 保证/ VOQ/ 特性/ 不变/ 的/ 同时/ 有效/ 地/ 容忍/ 了/ VC/ 故障/ ./ 当/ 端口/ 内部/ 中/ 出现/ 不同/ 情况/ 的/ 故障/ 时/ ,/ 本文/ 的/ 容错/ 方案/ 如下/ :/ (/ 1/ )/ 单/ VC/ 故障/ ./ 即/ VOQ/ 路由器/ 中/ 输入/ 端口/ 内部/ 某个/ VC/ 出现/ 故障/ ,/ 我们/ 以/ E/ 输入/ 端口/ 的/ VC/ -/ S/ 为例/ ./ 当/ E/ 输入/ 端口/ 有/ 发往/ 输出/ 端口/ S/ 的/ 数据包/ A/ 请求/ 到来/ 时/ ,/ VC/ 选择器/ 会/ 接收/ 到/ BIST/ 发送/ 的/ VC/ -/ S/ 的/ 故障/ 信息/ 和/ 双向/ FIFO/ 控制器发送/ 的/ 满/ 信息/ ,/ 判断/ 是否/ 共享/ VC/ -/ W/ 给/ 数据包/ A/ ./ 若/ VC/ -/ W/ 的/ 满/ 信号/ 无效/ ,/ 此时/ VC/ -/ W/ 没有/ 拥塞/ ,/ 更改/ 数据包/ A/ 的/ VCID/ 域值/ 为/ VC/ -/ W/ ,/ 同时/ 置/ 数据包/ 的/ BVC/ 域/ 为/ 1/ ./ 指针/ 控制器/ 1/ 将/ 数据包/ 存储/ 在/ VC/ -/ W/ 中/ ./ 若/ VC/ -/ W/ 拥塞/ ,/ 则/ 更改/ 数据包/ A/ 的/ VCID/ 域值/ 为/ VC/ -/ W/ ,/ 置/ BVC/ 域值/ 为/ 1/ ,/ 等/ VC/ -/ W/ 有/ 空闲/ buffer/ 槽/ 后/ ,/ 将/ 数据包/ A/ 存储/ 至/ VC/ -/ W/ 中/ ./ (/ 2/ )/ 多/ VC/ 故障/ ./ 即/ VOQ/ 路由器/ 中/ 输入/ 端口/ 内有/ 多个/ VC/ 出现/ 故障/ 的/ 情况/ ,/ 我们/ 将/ 其/ 细化/ 为/ 多个/ 单/ VC/ 故障/ 来/ 解决问题/ ./ 针对/ 每个/ 单/ VC/ 故障/ ,/ 首先/ 查看/ 其/ 相邻/ VC/ 是否/ 故障/ ,/ 若/ 故障/ 则/ 通过/ 旁路/ 总线/ 绕过/ 故障/ VC/ ,/ 若/ 无故障/ 则/ 可以/ 借用/ 相邻/ VC/ 实现/ 容错/ ./ 综上所述/ ,/ 本文/ 方案/ 所/ 设计/ 的/ 路由器/ 有着/ 一定/ 的/ 容错/ 能力/ ./ 当/ VLS/ 路由器/ 内部/ 发生/ 不同/ 数目/ 的/ VC/ 故障/ 时/ ,/ 该/ 路由器/ 性能/ 有/ 可能/ 不/ 受/ 故障/ 影响/ ,/ 与/ 无故障/ 时/ 等同/ ./ 如图/ 7/ 所示/ ,/ 在/ 不同/ 的/ VC/ 故障/ 数时/ ,/ 路由器/ 性能/ 不变/ 的/ 概率/ ./ 其中/ ,/ 每个/ 输入/ 端口/ 内部/ 有/ 4/ 个/ VC/ ,/ 每个/ 路由器/ 有/ 5/ 个/ 输入/ 端口/ ,/ 路由器/ 内部/ 共有/ 20/ 个/ VC/ ./ 从图/ 中/ 可以/ 看出/ ,/ 当/ 路由器/ 中/ 出现/ 8/ 个/ VC/ 故障/ ,/ 即/ 故障率/ 为/ 40/ %/ 时/ ,/ 路由器/ 性能/ 不变/ 的/ 概率/ 为/ 23.4/ %/ ./ 由此/ 可以/ 看出/ ,/ 本文/ 方案/ 的/ Page8/ 容错/ 能力/ 较/ 好/ ,/ 对/ 网络/ 的/ 延迟/ 没有/ 带来/ 较大/ 的/ 影响/ ./ 同时/ ,/ 旁路/ 总线/ 的/ 使用/ ,/ 保证/ 了/ 路由器/ 中/ 出现/ 不同/ VC/ 故障率/ 时/ ,/ 路由器/ 依旧/ 可以/ 正常/ 运行/ ,/ 网络/ 连通性/ 较/ 好/ ,/ 无/ 节点/ 损失/ ./ 4/ 实验/ 结果/ 和/ 分析/ 本文/ 采用/ 在/ Booksim/ [/ 27/ ]/ 基础/ 上/ 进行/ 扩展/ 的/ 仿真器/ 作为/ 本文/ 的/ 实验/ 平台/ ,/ 搭建/ 的/ 拓扑/ 结构/ 为/ 4/ ×/ 4/ 的/ Mesh/ 结构/ ./ 针对/ 不同/ 的/ VOQ/ 路由器/ 设计方案/ ,/ 在/ 性能/ 和/ 面积/ 上/ 进行/ 比较/ ./ 方案/ 1/ 为/ 基准/ 的/ VOQ/ 路由器/ 设计/ ,/ 方案/ 2/ 是/ 文献/ [/ 24/ ]/ 提出/ 的/ multipleVOQ/ 路由器/ ,/ 方案/ 3/ 为/ 本文/ 提出/ 的/ VLS/ 路由器/ ./ FIFO/ 的/ 大小/ 为/ 32/ 个/ flits/ ,/ 每个/ 路由器/ 均/ 有/ 5/ 个/ 输入输出/ 端口/ ./ 方案/ 1/ 和/ 方案/ 3/ 中/ 每个/ FIFO/ 有/ 4/ 个/ VC/ ,/ 每个/ VC/ 大小/ 为/ 8/ 个/ flits/ ./ 方案/ 2/ 中/ 每个/ FIFO/ 有/ 8/ 个/ VC/ ,/ 每个/ VC/ 大小/ 为/ 4/ 个/ flits/ ./ 4.1/ 性能/ 比较/ 本文/ 实验/ 采用/ 维序/ 路由/ 机制/ ,/ 通过/ 在/ 网络/ 中/ 设定/ 不同/ 的/ VC/ 故障/ 数/ ,/ 故障/ 发生/ 位置/ 相同/ ,/ 来/ 分别/ 比较/ 延时/ 和/ 吞吐/ 率/ ./ 延时/ 是/ 数据包/ 从/ 进入/ 网络/ ,/ 到/ 尾部/ 离开/ 网络/ 的/ 时间/ 的/ 差/ 的/ 平均值/ ./ 吞吐/ 率/ 反映/ 了/ 单位/ 时间/ 内/ 网络/ 接收/ 或/ 发送/ 的/ 消息/ 量/ ./ 实验/ 的/ 通信/ 模式/ 为/ 均匀/ 模式/ 和/ 热点/ 模式/ ,/ 采样/ 周期/ 为/ 1000/ ./ 图/ 8/ 和/ 图/ 9/ 所示/ 的/ 是/ 在/ 均匀/ 模式/ 和/ 热点/ 模式/ 下/ ,/ 当/ 故障/ 数为/ 0/ 时/ ,/ 3/ 种/ 方案/ 在/ 不同/ 注入/ 率下/ 的/ 延时/ 和/ 吞吐/ 率/ 的/ 比较/ ./ 从图/ 中/ 我们/ 可以/ 看出/ ,/ 在/ 注入/ 率/ 很小/ 的/ 时候/ ,/ 3/ 条/ 曲线/ 几乎/ 重合/ ./ 随着/ 注入/ 率/ 的/ 不断/ 增大/ ,/ 3/ 种/ 方案/ 的/ 延时/ 越来越/ 大/ ,/ 但/ 本文/ 方案/ 的/ 增长/ 趋势/ 较为/ 缓慢/ ./ 方案/ 1/ 和/ 方案/ 2/ 在/ 无故障/ 数/ 的/ 情况/ 下/ ,/ 其/ 延时/ 和/ 吞吐/ 率/ 几乎/ 一样/ ,/ 这/ 是因为/ 针对/ 某一/ 特定/ 输出/ 端口/ 都/ 只有/ 8flits/ 的/ buffer/ 槽/ 用于/ 存储/ 数据包/ ./ 本文/ 方案/ 在/ 注入/ 率较/ 小时/ ,/ 曲线/ 与/ 方案/ 1/ 的/ 接近/ ,/ 因为/ 此时/ 网络/ 没有/ 达到/ 饱和/ ,/ 不/ 需要/ 考虑/ 单个/ Page9VC/ 不够/ 用/ 的/ 问题/ ./ 但/ 当/ 注入/ 率/ 继续/ 增大/ 时/ ,/ 本文/ 方案/ 就/ 有/ 一定/ 的/ 优势/ ,/ 通过/ 借用/ ,/ 可以/ 增加/ 网络/ 的/ 吞吐量/ ,/ 减小/ 延时/ ./ 在/ 均匀/ 模式/ 下/ ,/ 当/ 注入/ 率为/ 0.6/ flits/ // (/ cycle/ ×/ node/ )/ 时/ ,/ 与/ 方案/ 2/ 相/ 比较/ ,/ 本文/ 方案/ 的/ 延时/ 减少/ 了/ 21.1/ %/ ,/ 吞吐/ 率/ 增多/ 了/ 19.7/ %/ ./ 在/ 热点/ 模式/ 下/ ,/ 当/ 注入/ 率为/ 0.6/ flits/ // (/ cycle/ ×/ node/ )/ 时/ ,/ 本文/ 方案/ 比/ 方案/ 2/ 的/ 延时/ 减少/ 了/ 30.3/ %/ ,/ 吞吐/ 率/ 增多/ 了/ 29.4/ %/ ./ 随着/ 注入/ 率/ 的/ 不断/ 增大/ ,/ 热点/ 模式/ 较/ 均匀/ 模式/ 更/ 容易/ 产生/ 拥塞/ 现象/ ,/ 而/ 本文/ 方案/ 可以/ 缓解/ 网络/ 拥塞/ 问题/ ,/ 故/ 本文/ 方案/ 在/ 热点/ 模式/ 下/ 的/ 性能/ 要/ 优于/ 均匀/ 模式/ ./ 图/ 10/ 和/ 图/ 11/ 显示/ 了/ 在/ 均匀/ 模式/ 和/ 热点/ 模式/ 下/ ,/ 当/ 故障/ 数为/ 4/ 时/ ,/ 3/ 种/ 方案/ 延时/ 和/ 吞吐/ 率/ 的/ 比较/ ./ 随着/ 注入/ 率/ 的/ 不断/ 增大/ ,/ 本文/ 方案/ 在/ 延时/ 上/ 的/ 增长速度/ 明显/ 小于/ 其他/ 两种/ 方案/ ./ 随着/ 注入/ 率/ 的/ 不断/ 增大/ ,/ 延时/ 急剧/ 增大/ ,/ 网络/ 达到/ 饱和状态/ ./ 方案/ 1/ 的/ 延时/ 最大/ ,/ 因为/ 它/ 没有/ 考虑/ 到/ 容错/ 问题/ ./ 而/ 在/ 方案/ 2/ 中/ 每个/ 特定/ 输出/ 端口/ 对应/ 2/ 个/ VC/ ,/ 在/ 某个/ VC/ 故障/ 时/ 利用/ 另/ 一个/ VC/ 来/ 存储/ 数据包/ ,/ 具有/ 一定/ 的/ 容错/ 能力/ ,/ 故/ 性能/ 优于/ 方案/ 1/ ./ 本文/ 方案/ 中/ 可以/ 共享/ 相邻/ VC/ ,/ 通过/ 相邻/ VC/ 的/ 借用/ 实现/ 容错/ ,/ 其/ VC/ 的/ 容量/ 大于/ 方案/ 2/ 中/ VC/ 的/ 容量/ ,/ 故/ 注入/ 率越/ 大/ ,/ 吞吐/ 率越/ 高/ ,/ 性能/ 较前/ 两种/ 方案/ 越好/ ./ 在/ 均匀/ 模式/ 下/ ,/ 当/ 注入/ 率为/ 0.4/ flits/ // (/ cycle/ ×/ node/ )/ 时/ ,/ 本文/ 方案/ 比/ 方案/ 2/ 延时/ 降低/ 了/ 30.4/ %/ ,/ 吞吐/ 率/ 升高/ 了/ 23.3/ %/ ./ 在/ 热点/ 模式/ 下/ ,/ 同样/ 的/ 注入/ 率时/ ,/ 与/ 方案/ 2/ 相比/ ,/ 本文/ 方案/ 延时/ 降低/ 了/ 36.3/ %/ ,/ 吞吐/ 率/ 升高/ 了/ 31.9/ %/ ./ 随着/ 注入/ 率/ 不断/ 增大/ ,/ 本文/ 方案/ 在/ 热点/ 模式/ 下/ 的/ 性能/ 要/ 优于/ 均匀/ 模式/ ,/ 因为/ 热点/ 模式/ 下/ 所有/ 数据包/ 都/ 发往/ 热点/ ,/ 较/ 均匀/ 模式/ 更/ 容易/ 产生/ 拥塞/ ./ 图/ 12/ 是/ 在/ 均匀/ 模式/ 和/ 热点/ 模式/ 下/ ,/ 当/ 注入/ 率为/ 0.4/ flits/ // (/ cycle/ ×/ node/ )/ 时/ ,/ 3/ 种/ 方案/ 在/ 不同/ 的/ 故障/ 数下/ 的/ 延时/ 比较/ ./ 在/ 相同/ 的/ 注入/ 率下/ ,/ 随着/ 故障/ 数/ 的/ 增多/ ,/ 数据包/ 的/ 延时/ 增大/ ./ 从图/ 中/ 可以/ 看出/ ,/ 方案/ 2/ 的/ 延时/ 要/ 优于/ 方案/ 1/ ,/ 本文/ 方案/ 的/ 延时/ 是/ 3/ 种/ 方案/ 中/ 最低/ 的/ ./ 如当/ 故障/ 数为/ 6/ 时/ ,/ 均匀/ 模式/ 下/ 本文/ 的/ 延时/ 较/ 方案/ 1/ 和/ 方案/ 2/ 分别/ 降低/ 了/ 39.5/ %/ 和/ 31.6/ %/ ,/ 热点/ 模式/ 下/ 本文/ 方案/ 的/ 延时/ 比/ 方案/ 1/ 和/ 方案/ 2/ 分别/ 降低/ 了/ 50.8/ %/ 和/ 38.9/ %/ ./ 这/ 是因为/ 本文/ 提出/ 的/ 路由器/ 能够/ 有效/ 地/ 解决/ VC/ 故障/ 问题/ ,/ 并且/ 较/ 好/ 地/ 缓解/ 网络/ 拥塞/ ./ Page104/ ./ 2/ 硬件/ 开销/ 本文/ 使用/ XilinxISE14/ ./ 6/ 实验/ 工具/ ,/ 在/ XilinxVirtex/ -/ 5XC5VFX70T/ 环境/ 下/ 进行/ 3/ 种/ 方案/ 路由器/ 的/ 硬件/ 仿真/ 实验/ ,/ 通过/ Verilog/ -/ HDL/ 语言/ 描述/ 相关/ 硬件/ 逻辑/ ,/ 并/ 结合/ 使用/ ModelSim10/ ./ 2c/ 进行/ 功能/ 和/ 结构/ 仿真/ ./ 方案/ 1/ 为/ 基准/ 的/ VOQ/ 路由器/ 设计/ ,/ 方案/ 2/ 是/ 文献/ [/ 24/ ]/ 提出/ 的/ multipleVOQ/ 路由器/ ,/ 方案/ 3/ 为/ 本文/ 提出/ 的/ VLS/ 路由器/ ./ 这/ 3/ 种/ 方案/ 的/ 缓冲区/ 大小/ 是/ 一致/ 的/ ,/ 实验/ 仿真/ 结果/ 如表/ 2/ 所示/ ./ 从中/ 我们/ 可以/ 看出/ ,/ 本文/ 所/ 提出/ 的/ VLS/ 路由器/ 的/ 硬件/ 开销/ 大于/ 方案/ 1/ 和/ 方案/ 2/ ./ 方案/ 2/ 的/ 硬件/ 开销/ 大于/ 方案/ 1/ 的/ 原因/ 在于/ ,/ 输入/ 端口/ 内部/ 有/ 两个/ VC/ 可以/ 映射/ 到/ 特定/ 的/ 输出/ 端口/ ,/ 其/ 控制/ 逻辑/ 较为/ 复杂/ ,/ 同时/ 需要/ 建立/ VC/ 存取控制/ 表/ ./ 本文/ 方案/ 是/ 在/ 方案/ 1/ 的/ 基础/ 上/ 进行/ 改进/ ,/ 增加/ 了/ VC/ 选择器/ 、/ 双向/ FIFO/ 控制器/ 等/ 控制/ 模块/ ,/ 同时/ 还有/ BIST/ 检测/ 模块/ ,/ 因此/ 硬件/ 开销/ 比/ 方案/ 1/ 大/ ./ 本文/ 方案/ 比/ 方案/ 2/ 要略/ 大/ ,/ 因为/ 方案/ 2/ 的/ 交叉开关/ 控制/ 逻辑/ 变得复杂/ ,/ 而/ 交叉开关/ 在/ 路由器/ 中/ 面积/ 所/ 占/ 比重/ 较大/ ./ 本文/ 方案/ 的/ Slices/ 、/ LUTs/ 和/ Flips/ -/ Flops/ 较/ MultipleVOQ/ 路由器/ 分别/ 增加/ 了/ 15.1/ %/ 、/ 14.7/ %/ 和/ 9.1/ %/ ./ VOQ/ 路由器/ 5MultipleVOQ/ 路由器/ VLS/ 路由器/ 55/ 总结/ 随着/ 集成电路/ 产业/ 的/ 不断/ 发展/ ,/ 可靠性/ 成为/ 我们/ 研究/ 的/ 重点/ ./ 本文/ 所/ 提出/ 的/ 路由器/ 通过/ 端口/ 内/ 相邻/ VC/ 的/ 借用/ ,/ 实现/ 相邻/ VC/ 的/ 循环/ 共享/ ,/ 有/ 以下几点/ 贡献/ :/ (/ 1/ )/ 若/ 端口/ 内部/ 的/ VC/ 出现/ 故障/ 或/ 拥塞/ ,/ 将/ 数据包/ 传入/ 其/ 相邻/ VC/ ,/ 共享/ 相邻/ VC/ 的/ buffer/ 槽/ 存储/ 数据/ ,/ 实现/ 了/ 对/ 故障/ VC/ 的/ 容错/ ,/ 一定/ 程度/ 上/ 缓解/ 了/ 网络/ 拥塞/ 问题/ ;/ (/ 2/ )/ 通过/ 利用/ 端口/ 的/ 相邻/ VC/ 来/ 存储/ 数据包/ ,/ 没有/ 增加/ 额外/ 的/ FIFO/ ,/ 且/ 循环/ 共享/ 的/ 方式/ 保证/ 了/ 每个/ VC/ 都/ 可以/ 借用/ 和/ 被/ 借用/ ;/ (/ 3/ )/ 设计/ 了/ 一种/ 有/ 两套/ 读写/ 指针/ 的/ FIFO/ 控制器/ ,/ 在/ 共享/ 相邻/ VC/ 的/ 同时/ ,/ 保证/ 了/ VOQ/ 的/ 特性/ 没有/ 改变/ ./ 实验/ 表明/ ,/ 本文/ 所/ 提出/ 的/ 基于/ VOQ/ 机制/ 的/ VLS/ 路由器/ 具有/ 容错/ 能力/ ,/ 适应/ 于/ 不同/ 网络流量/ ,/ 大幅度提高/ 了/ 网络/ 的/ 性能/ ./ 

