Page1IPv6/ 环境/ 下/ 隧道/ 流量/ 解析/ 安全性/ 增强/ 技术/ 崔宇/ 张宏莉/ 田志宏方滨兴/ (/ 哈尔滨工业大学/ 计算机网络/ 与/ 信息安全/ 技术/ 研究/ 中心/ 哈尔滨/ 150001/ )/ 摘要/ 隧道/ 是/ IPv4/ 向/ IPv6/ 过渡/ 的/ 主要/ 方式/ 之一/ ,/ 它/ 通过/ 附加/ 外层/ 包头/ 方式/ 解决/ 了/ IPv4/ 或/ IPv6/ 孤岛/ 的/ 通信/ 问题/ ./ 文中/ 对/ 隧道/ 流量/ 进行/ 了/ 分析/ ,/ 指出/ 其/ 具有/ 层次/ 和/ 类型/ 不确定性/ ,/ 提出/ 了/ 广义/ 隧道/ 的/ 概念/ ./ 研究/ 了/ 网络协议/ 解析/ 设备/ 上/ 传统/ 双栈/ 对/ 广义/ 隧道/ 的/ 解析/ 过程/ ,/ 指出/ 恶意/ 隧道/ 流量/ 会/ 引发/ 隧道/ 干扰/ 和/ 多层/ 分片/ 攻击/ 两类/ 安全/ 问题/ ,/ 并/ 提出/ 隧道/ 流/ 标记/ 和/ 后移/ 重组/ 两个/ 关键技术/ 予以/ 解决/ ./ 实验/ 表明/ :/ 隧道/ 流/ 标记/ 代价/ 较/ 小/ ,/ 每层/ 至多/ 增加/ 1/ %/ 的/ 计算/ 时间/ ,/ 而/ 后移/ 重组/ 平均/ 每层/ 减少/ 7.5/ %/ 的/ 计算/ 时间/ ,/ 增强/ 了/ 应对/ 恶意/ 隧道/ 流量/ 的/ 能力/ ./ 关键词/ IPv6/ ;/ 隧道/ ;/ 安全/ ;/ 双栈/ ;/ 分片/ 重组/ 1/ 引言/ 于/ IPv4/ 具有/ 更大/ 的/ 地址/ 范围/ 、/ 自动/ 配置/ 、/ 增强/ 的/ 安全性/ 等/ 优势/ ./ 近几年/ ,/ 随着/ IPv6/ 技术/ 的/ 发展/ 与/ 成熟/ ,/ IPv4/ 向/ IPv6/ 的/ 过渡/ 逐步/ 加快/ ,/ 网络/ 中/ IPv4/ 、/ IPv6IPv6/ 为/ 解决/ IPv4/ 地址/ 空间/ 不足/ 而/ 提出/ ,/ 相对/ 共存/ 的/ 现象/ 也/ 愈加/ 明显/ ,/ 出现/ 了/ 众多/ 的/ IPv6/ 局域/ Page2/ 网/ ./ 而/ 随着/ ISP/ 逐步/ 普及/ 纯/ IPv6/ 接入/ ,/ IPv6/ 局域网/ 最终/ 将/ 与/ ISP/ 网络连接/ 成为/ IPv6Internet/ ,/ 从而/ 完成/ 网络/ 迁移/ ./ IPv6Internet/ 限于/ 许多/ 问题/ 发展缓慢/ ,/ 因此/ 共存/ 现象/ 将/ 持续/ 相当/ 一段时间/ ./ 为了/ 在/ IPv6Internet/ 普及/ 前使/ IPv6/ 局域网/ 能够/ 在/ 基于/ IPv4/ 的/ 互联网/ 上/ 通信/ ,/ 研究者/ 们/ 提出/ 了/ IPv6/ 隧道/ 的/ 概念/ ./ 其/ 基本/ 方法/ 是/ 将/ IPv6/ 数据包/ 在/ IPv6/ 局域网/ 边缘/ 处/ 附加/ 外层/ 包头/ 使/ 其/ 可/ 通过/ IPv4/ 互联网/ 路由/ 到/ 目的/ IPv6/ 局域网/ ,/ 之后/ 在/ 目的/ 边缘/ 处/ 去除/ 附加/ 包头/ ,/ 使/ 原始/ IPv6/ 数据包/ 在/ 目的/ IPv6/ 网络/ 中/ 继续/ 路由/ ./ 目前/ 较为/ 典型/ 的/ IPv6/ 隧道/ 包括/ 公网/ 环境/ 下/ 的/ 6to4/ 、/ ISATAP/ 和/ 支持/ NAT/ 的/ Teredo/ [/ 1/ ]/ 等/ ./ IPv6/ 网络/ 的/ 普及/ 和/ 隧道/ 的/ 广泛/ 使用/ 引入/ 了/ 许多/ 新/ 的/ 安全/ 问题/ ,/ 成为/ 研究/ 热点/ 之一/ ./ 国内外/ 现有/ 针对/ IPv6/ 安全/ 的/ 研究/ 主要/ 集中/ 在/ 协议/ 、/ 地址/ 分配/ 、/ 隧道/ 、/ 路由/ 和/ 无线/ 等/ 方面/ ./ 其中/ 对/ 隧道/ 安全/ 的/ 研究/ 主要/ 集中/ 在/ 隧道/ 边界/ 路由器/ 上/ ,/ 目的/ 是/ 防止/ 非法/ 流量/ 和/ 恶意/ 攻击/ 进出/ 隧道/ ./ 如/ 文献/ [/ 2/ ]/ 列举/ 了/ 6to4/ 隧道/ 中/ 存在/ 的/ 安全/ 问题/ 和/ 部署/ 过程/ 中/ 的/ 注意事项/ ./ 文献/ [/ 3/ ]/ 对/ 多种/ 常用/ 隧道/ 边界/ 的/ 共有/ 和/ 特有/ 安全/ 问题/ 进行/ 了/ 分析/ 并/ 给出/ 了/ 隧道/ 边界/ 路由器/ 安全/ 配置/ 方案/ ./ 文献/ [/ 4/ ]/ 针对/ Teredo/ 隧道/ 提出/ 了/ 防止/ 伪造/ 数据包/ 进入/ 隧道/ 内部/ 、/ 攻击/ 内部/ 节点/ 的/ 防御/ 策略/ ./ 关于/ 隧道/ 流量/ 对/ 网络协议/ 解析/ 设备/ 协议/ 栈/ 安全/ 影响/ 的/ 研究/ 较少/ ./ 隧道/ 分片/ 是/ 隧道/ 安全/ 的/ 另/ 一个/ 重要/ 方面/ ./ 由于/ 隧道/ 包含/ 多层/ IP/ 包头/ ,/ 必然/ 会/ 存在/ 多层/ 分片/ 的/ 可能/ ,/ 增加/ 了/ 处理/ 风险/ 和/ 复杂度/ ./ 有/ 大量/ 相关/ 工作/ 研究/ 了/ 单层/ 分片/ 对/ 协议/ 栈/ 的/ 攻击/ 及其/ 防御/ 方法/ ,/ 如/ 文献/ [/ 5/ ]/ 讨论/ 了/ 分片/ 攻击/ 对/ IDS/ 的/ 影响/ ,/ 文献/ [/ 6/ ]/ 提出/ 了/ 路由器/ 的/ 防御/ 策略/ ./ 对于/ 多层/ 分片/ ,/ 文献/ [/ 7/ ]/ 分析/ 了/ 外层/ 、/ 内层/ 分片/ 两种/ 模式/ 对/ 隧道/ 边界/ 性能/ 的/ 影响/ ./ LiuXin/ 等/ 人/ ①/ 给出/ 了/ 6over4/ 隧道/ 中/ 外层/ 分片/ 对/ 隧道/ 边界/ 吞吐/ 率/ 的/ 影响/ ,/ 同时/ 也/ 分析/ 了/ PMTU/ 使用/ 中/ 的/ 安全/ 问题/ ./ 文献/ [/ 8/ ]/ 对/ PMTU/ 机制/ 进行/ 了/ 扩展/ ,/ 优化/ 了/ 分片/ 数据传输/ 效率/ ./ 文献/ [/ 9/ ]/ 讨论/ 了/ 隧道/ 边界/ 在/ 两层/ 分片/ 情况/ 下/ 分片/ 长度/ 引发/ 的/ 安全/ 问题/ ./ 多层/ 分片/ 也/ 会/ 影响/ 网络协议/ 解析/ 设备/ 的/ 安全/ ,/ 但/ 对此/ 尚无/ 相关/ 研究/ ./ IPv6/ 流量/ 中/ 隧道/ 流量/ 比重/ 较大/ ,/ 文献/ [/ 10/ ]/ 指出/ CESNET2/ 网络/ 中纯/ IPv6/ 流量/ 仅为/ 隧道/ 流量/ 的/ 31.8/ %/ ./ 文献/ [/ 11/ ]/ 指出/ BitTorrent/ 网络/ 中/ ,/ IPv6/ 节点/ 中约/ 85/ %/ 为/ 隧道/ 地址/ ./ 并且/ ,/ 根据/ 我们/ 的/ 测量/ ,/ 国内/ 部分/ 主干/ IPv6/ 路由器/ 上/ ,/ 仅/ 6to4/ 隧道/ 流量/ 已/ 超过/ 整个/ IPv6/ 流量/ 的/ 49/ %/ ./ 隧道/ 流量/ 含有/ 多层/ 包头/ ,/ 必然/ 会/ 增加/ 协议/ 栈/ 的/ 处理/ 时间/ 和/ 复杂度/ ,/ 这/ 对于/ 需要/ 进行/ 深度/ 包/ 检测/ 等/ 工作/ 的/ 网络协议/ 解析/ 设备/ 影响/ 较大/ ,/ 可能/ 会/ 大量/ 降低/ 其上/ 协议/ 栈/ 的/ 分析/ 能力/ ./ 同时/ ,/ 恶意/ 攻击者/ 还/ 可/ 通过/ 构造/ 特殊/ 的/ 隧道/ 数据包/ 扰乱/ 隧道/ 数据/ 的/ 还原/ 和/ 分片/ 数据/ 的/ 重组/ 过程/ ,/ 干扰/ 协议/ 栈/ 的/ 运行/ ,/ 增加/ 设备/ 的/ 处理/ 开销/ ,/ 给/ 防火墙/ 、/ 入侵/ 检测/ 、/ 流量/ 统计/ 等/ 网络/ 检测/ 设备/ 带来/ 极大/ 的/ 安全/ 威胁/ ./ 为此/ ,/ 本文/ 详细分析/ 了/ 隧道/ 特点/ 以及/ 检测/ 设备/ 协议/ 栈/ 在/ 处理/ 隧道/ 流量/ 时/ 产生/ 的/ 安全/ 问题/ 及/ 可能/ 的/ 攻击方式/ ,/ 并/ 针对/ 其中/ 的/ 数据/ 干扰/ 和/ 恶意/ 分片/ 问题/ 提出/ 了/ 相应/ 的/ 解决方案/ ./ 本文/ 第/ 2/ 节/ 分析/ 隧道/ 流/ 特点/ 和/ 解析/ 过程/ 的/ 安全/ 问题/ ;/ 第/ 3/ 节/ 提出/ 隧道/ 流/ 标记技术/ 以/ 解决/ 干扰/ 问题/ ;/ 第/ 4/ 节/ 提出/ 后移/ 重组/ 技术/ 以/ 降低/ 多层/ 分片/ 攻击/ 的/ 影响/ ;/ 第/ 5/ 节/ 通过/ 实验/ 获取/ 两种/ 技术/ 对/ 检测/ 设备/ 协议/ 栈/ 性能/ 的/ 影响/ ;/ 第/ 6/ 节/ 总结/ 全文/ ./ 2/ 隧道/ 流/ 特点/ 及/ 解析/ 安全性/ 分析/ 6to4/ 、/ ISATAP/ 和/ Teredo/ 隧道/ 使用/ 普遍/ ,/ 可/ 称为/ 标准/ 隧道/ ,/ 均/ 含/ 两层/ IP/ 包头/ :/ 外层/ IPv4/ 、/ 内层/ IPv6/ ./ 用/ “/ in/ ”/ 表示/ 两层/ 包头/ 的/ 包含/ 关系/ ,/ 如/ 6to4/ 、/ ISATAP/ 隧道/ 可/ 表示/ 为/ 6in4/ ,/ 代表/ IPv6/ 数据包/ 封装/ 在/ IPv4/ 中/ ./ Teredo/ 采用/ UDP/ 封装/ ,/ 表示/ 为/ 6inUDPin4/ 的/ 形式/ ./ 非标准/ 隧道/ 与/ 标准/ 隧道/ 相对/ ,/ 用于/ 表述/ 与/ 标准/ 隧道/ 相异/ 的/ 隧道/ 类型/ ./ 真实/ 网络/ 中/ ,/ 非标准/ 隧道/ 是/ 广泛/ 存在/ 的/ ./ 某一/ 骨干/ 路由器/ 的/ 流量/ 检测/ 结果表明/ ,/ 封装/ 在/ IPv6/ 中/ 的/ 6to4/ 包/ (/ 6in4in6/ )/ 和/ 非标准/ 端口/ 的/ Teredo/ 包/ (/ 6inUDPin4in6/ )/ 有/ 一定/ 的/ 出现/ 频率/ ./ 同时/ ,/ 我们/ 利用/ 国内外/ 的/ 两台/ 服务器/ 搭建/ 了/ 实验/ 环境/ 验证/ 多层/ 隧道/ 的/ 可能性/ ,/ 如图/ 1/ 所示/ ./ 其中/ 主机/ A/ (/ ClientA/ )/ 有纯/ IPv6/ 连接/ ,/ 主机/ B/ (/ ClientB/ )/ 有纯/ IPv4/ 连接/ ./ 为了/ 使/ 两/ 主机/ 可以/ 建立/ 连接/ ,/ 我们/ 在/ 主机/ B/ 的/ 物理/ 网卡/ 上/ 配置/ 了/ 6to4/ 隧道/ ,/ 使/ 其/ 可以/ 与/ 纯/ IPv6/ 主机/ A/ 建立/ 连接/ (/ 6to4relay/ 是/ 路由/ 决定/ 的/ ,/ 由/ ISP/ 免费/ 提供/ )/ ,/ 形成/ 了/ L2/ 层/ 的/ 虚拟/ 连接/ ./ 为了/ 试验/ 多层/ 隧道/ 在/ 网络/ 中/ 传输/ 的/ 可/ 性能/ ,/ 我们/ 在/ 主机/ A/ 的/ 物理/ 网卡/ 上/ 增加/ 4in6/ 的/ 虚拟/ 网卡/ ,/ 同时/ 在/ 主机/ B/ 的/ 6to4/ 虚拟/ 网卡/ 上/ 建立/ 对应/ 的/ 4in6/ 虚拟/ 网卡/ ,/ 如/ L3/ 层/ 所示/ ,/ 此时/ 两/ 主机/ 可/ 通过/ 虚拟/ IPv4/ 进行/ 连接/ ./ 更进一步/ ,/ 在/ 两/ ①/ PacketFragmentationinIPv6overIPv4Tunnels/ [/ EB/ // OL/ ]/ ./ Page3/ 主机/ 的/ 4in6/ 网卡/ 上/ 配置/ 对应/ 的/ 虚拟/ 网卡/ ,/ 比如/ 6in4/ 或/ 4in4/ ,/ 两/ 主机/ 依旧/ 可以/ 建立/ 连接/ ./ 该/ 实验/ 表明/ ,/ 自图/ 1/ 多层/ 隧道/ 实例/ 由此/ ,/ 我们/ 认为/ 隧道/ 具有/ 层次/ 和/ 类型/ 不确定性/ ,/ 并/ 提出/ 广义/ 隧道/ :/ 包含/ 两个/ 或者/ 两个/ 以上/ 网络层/ 包头/ 的/ 隧道/ ,/ 每层/ 网络层/ 包头/ 为/ IPv4/ 或/ IPv6/ ./ 广义/ 隧道/ 扩大/ 了/ 隧道/ 范围/ ,/ 不仅/ 包含/ 6to4/ 等/ 典型/ 隧道/ ,/ 还/ 涵盖/ 如/ 6in4in4in6/ 等/ 非标准/ 隧道/ ,/ 使用/ UDP/ 、/ GRE/ 封装/ 的/ 隧道/ 含有/ 至少/ 两层/ IP/ 包头/ 也/ 为/ 广义/ 隧道/ ./ 隧道/ 层次/ 和/ 类型/ 不确定性/ 会/ 增加/ 系统/ 处理/ 复杂度/ ./ 典型/ 的/ 双栈/ 在/ IPv4/ 基础/ 上/ 主要/ 针对/ 纯/ IPv6/ 流量/ 进行/ 了/ 扩展/ ,/ 缺少/ 隧道/ 流量/ 解析/ 的/ 状态/ 维护/ 和/ 安全策略/ ,/ 更/ 无法/ 有效/ 解析/ 广义/ 隧道/ ./ 为了/ 有效/ 支持/ 广义/ 隧道/ 的/ 解析/ ,/ 协议/ 栈应/ 具有/ 图/ 2/ 所示/ 框架/ ./ 图/ 2/ 中/ ,/ 过程/ ①/ ~/ ④/ 分别/ 代表/ 4in4/ 、/ 6in6/ 、/ 6in4/ 和/ 4in6/ 关系/ ,/ 过程/ ⑤/ 表示/ 6inUDP/ (/ 暂/ 省略/ GRE/ 等/ 隧道/ )/ ./ 标准/ 隧道/ 如/ 6to4/ 、/ Teredo/ 只/ 需/ 执行/ 过程/ ③/ 、/ ⑤/ 一次/ 即可/ ./ 而/ 广义/ 隧道/ 数据包/ 需/ 多次/ 进出/ Layer3/ 层/ ,/ 如/ 6in4in6/ 需/ 经过/ 过程/ ④/ 和/ 过程/ ③/ 才能/ 完成/ 网络层/ 的/ 解析/ ./ 网络层/ 的/ 多次/ 解析/ 会/ 引发/ 隧道/ 干扰/ 和/ 多层/ 分片/ 攻击/ 两类/ 安全/ 问题/ ,/ 下面/ 两节/ 对/ 其/ 进行/ 了/ 详细/ 的/ 分析/ ./ 2.1/ 隧道/ 干扰/ 隧道/ 干扰/ 是/ 指/ 在/ 隧道/ 路径/ 上/ ,/ 某一/ 检测/ 设备/ 进行/ 协议/ 还原/ 时/ ,/ 不同/ 隧道/ 的/ 数据包/ 被/ 混淆/ 为/ 同一个/ 流/ 进行/ 处理/ 而/ 导致/ 的/ 数据/ 混乱/ ./ 图/ 3/ 给出/ 了/ 隧道/ 干扰/ 的/ 一个/ 实例/ ,/ 其中/ CD/ 、/ EF/ 组成/ 两个/ 4in6/ 隧道/ ,/ 分别/ 为/ AB/ 、/ PQ/ 提供/ IPv4/ 私网/ 连接/ ./ 若/ A/ 向/ B/ 且/ P/ 向/ Q/ 发送/ 数据包/ ,/ 则/ M/ 设备/ 检测/ 到/ 数据包/ 的/ 内层/ IP/ 包头/ 就/ 会/ 一致/ ./ 在/ M/ 设备/ 只/ 存储/ 最/ 内层/ 信息/ 的/ 情况/ 行/ 配置/ 的/ 多层/ 隧道/ 流量/ 可以/ 在/ 网络/ 中/ 传输/ ,/ 构成/ 多层/ 隧道/ 流量/ ./ 下/ 必然/ 会/ 出现/ 数据/ 混淆/ 现象/ ,/ 影响/ 正常/ 分析/ ./ 正常/ 情况/ 下/ ,/ 上述/ 干扰/ 情况/ 发生/ 的/ 概率/ 不会/ 很/ 高/ ./ 但/ 由于/ 隧道/ 的/ 不确定性/ ,/ 可能/ 出现/ 纯/ IPv4/ // IPv6/ 与/ 二层/ 隧道/ 、/ 多层/ 隧道/ 以及/ 二层/ 隧道/ 和/ 多层/ 隧道/ 间/ 的/ 干扰/ 情况/ ,/ 从而/ 增大/ 干扰/ 概率/ ./ 更为严重/ 的/ 是/ ,/ 这一/ 特点/ 可/ 被/ 攻击者/ 利用/ 构造/ 特殊/ 数据包/ 对/ 检测/ 设备/ 的/ 数据/ 还原/ 过程/ 进行/ 攻击/ ./ 以图/ 4/ 所示/ 为例/ ,/ C/ 、/ F/ 节点/ 含有/ 正常/ 的/ IPv6/ 连接/ ,/ 为了/ 干扰/ M/ 的/ 检测/ ,/ 可以/ 发送/ 外层/ 地址/ 为/ C/ 、/ D/ 的/ 隧道/ 数据包/ ./ 该/ 数据包/ 会/ 被/ M/ 认为/ 属于/ C/ 、/ F/ 流/ ,/ 因此/ 会/ 混淆/ C/ 、/ F/ 间/ 的/ 数据/ ,/ 但/ 这些/ 数据包/ 却/ 被/ 转发/ 到/ D/ ,/ 并/ 不/ 影响/ F/ 点/ 的/ 数据/ 接收/ (/ 目的/ 是/ 使/ 混淆/ 包/ 通过/ M/ ,/ 由于/ 地址/ 层次性/ ,/ 可选/ 与/ F/ 相近/ 的/ IPv6/ 地址/ ,/ 不/ 关心/ D/ 是否/ 实际/ 存在/ )/ ./ 通过/ 类似/ 的/ 方式/ 即可/ 任意/ 地去/ 混淆/ M/ 可见/ 的/ C/ 、/ F/ 间/ 的/ 数据/ ,/ 且/ 与/ 重叠/ 分片/ 等/ 已知/ 攻击/ 方法/ 联合/ 使用/ 则/ 可/ 加强/ 干扰/ 的/ 效果/ ./ Page4/ 隧道/ 干扰/ 对/ 检测/ 设备/ (/ M/ )/ 有/ 3/ 个/ 层面/ 的/ 影响/ :/ 首先/ 是/ 网络层/ 分片/ 重组/ ,/ 若/ 隧道/ A/ 第/ i/ 层/ 与/ 隧道/ B/ 第/ j/ 层/ 相同/ 、/ 分片/ ID/ 等/ 一致/ ,/ 则/ 两个/ 流在/ 该层/ 将/ 被/ 放在/ 同一/ 等待/ 队列/ 中/ ,/ 从而/ 导致/ 数据/ 混淆/ ;/ 其次/ 是/ 传输层/ ,/ 相同/ 的/ 源/ 和/ 目的/ 端口/ 会/ 混乱/ 传输层/ 数据/ ;/ 最后/ 是/ 应用层/ ,/ 因/ 传输层/ 混乱/ 而/ 混乱/ ./ 可见/ ,/ 隧道/ 干扰/ 引发/ 了/ 检测/ 设备/ 协议/ 栈/ 严重/ 的/ 安全隐患/ ,/ 而/ 产生/ 这种/ 安全/ 问题/ 的/ 根源/ 在于/ 传统/ 双栈/ 在/ 处理/ 隧道/ 流量/ 时/ 只是/ 简单/ 的/ 剥去/ 隧道/ 的/ 外层/ 包头/ ,/ 将/ 最/ 内层/ 包头/ 和/ 非/ 隧道/ 数据包/ 同等对待/ ./ 当/ 两个/ 隧道/ 数据包/ 最/ 内层/ 相同/ ,/ 或/ 隧道/ 最/ 内层/ 包头/ 与非/ 隧道/ 包/ 相同/ 时/ ,/ 就/ 可能/ 出现/ 干扰/ 情况/ ./ 相关/ 的/ 一些/ 协议/ 还原/ 工具/ 和/ 网络/ 防火墙/ 也/ 没有/ 针对/ 隧道/ 流/ 进行/ 特殊/ 的/ 处理/ ./ 如/ 将/ UDP/ 数据/ 分为/ 两个/ IPv4/ 分片/ ,/ 并/ 在/ 第/ 2/ 片外/ 附加/ 任意/ IPv6/ 包头/ 形成/ 4in6/ 隧道/ 包/ ,/ 使用/ Wireshark/ (/ 1.6/ ./ 1/ )/ 进行/ 分析/ ,/ 发现/ 其/ 对/ 两个/ 分片/ 进行/ 了/ 重组/ ,/ 未能/ 正确/ 识别/ 隧道/ 数据包/ ./ 对于/ 已知/ 主机/ 或/ 路由器/ 而言/ ,/ 其上/ 正常/ 流量/ 和/ 隧道/ 流量/ 由/ 路由表/ 进行/ 区分/ ,/ 而/ 检测/ 设备/ 不/ 可能/ 含有/ 相应/ 路由表/ ,/ 因此/ 必须/ 采用/ 对流/ 进行/ 标记/ 的/ 方法/ 区分/ 不同/ 隧道/ ./ 为此/ 本文/ 提出/ 了/ 隧道/ 流/ 标记技术/ ,/ 在/ 第/ 3/ 节中/ 详细/ 介绍/ ./ 2.2/ 多层/ 分片/ 攻击/ 现有/ 操作系统/ 和/ 网络设备/ 协议/ 栈中/ ,/ IPv4/ 基本/ 重组/ 框架/ 如图/ 5/ 所示/ ,/ 其中/ ipq/ 中/ 包含/ 四元组/ 信息/ ,/ 用于/ 分组/ 不同/ 分片/ ,/ frag/ 记录/ 了/ 同一个/ IP/ 分片/ 流中/ 各/ 分片/ 的/ 偏移/ 和/ 长度/ 以/ 保证/ IP/ 数据包/ 完整/ ./ 每个/ IP/ 分片/ 首先/ 通过/ Hash/ 找到/ 对应/ 的/ ipq/ 链/ ,/ 之后/ 比较/ 四元组/ 定位/ ipq/ ,/ 再/ 查找/ frag/ 链表/ 确定/ 位置/ ,/ 数据/ 完整/ 后/ 进行/ 重组/ ./ IPv6/ 重组/ 算法/ 和/ IPv4/ 基本一致/ ,/ 只/ 在/ Hash/ 算法/ 和/ ipq/ 四元组/ 比较/ 的/ 时候/ 略有不同/ ,/ 因此/ IPv6/ 仍会/ 面对/ IPv4/ 中/ 分片/ 重叠/ 等/ 安全/ 问题/ [/ 12/ ]/ ./ 对于/ 多层/ 分片/ ,/ 数据包/ 需要/ 逐层/ 重组/ ,/ 即/ 首先/ 重组/ 最/ 外层/ 分片/ ,/ 之后/ 重组/ 第/ 2/ 层/ ,/ 逐步/ 向/ 内/ 直到/ 传输层/ ./ 毫无疑问/ ,/ 多层/ 分片/ 的/ 重组/ 必然/ 会/ 增加/ 协议/ 栈/ 网络层/ 解析/ 的/ 负载/ ,/ 体现/ 在/ 以下/ 几/ 方面/ :/ (/ 1/ )/ 同等/ 流量/ 下/ 数据包/ 增多/ ./ 若/ 传输层/ 数据/ 等/ 长/ ,/ 当/ 外层/ MTU/ 为/ 内层/ 1/ // 4/ 时/ ,/ 内层/ 包/ 可能/ 被/ 分为/ 5/ 个/ 部分/ (/ 需要/ 增加/ 包头/ )/ ,/ 数据包/ 数目/ 变为/ 内层/ 的/ 图/ 6/ 多层/ 分片/ 重组/ 攻击/ 举例/ 5/ 倍/ ,/ 必然/ 导致系统/ 中断/ 和/ 其它/ 系统/ 调用/ 次数/ 的/ 增加/ ,/ 降低/ 系统/ 的/ 处理速度/ ./ (/ 2/ )/ 小包/ 数量/ 增加/ ./ 多层/ 分片/ 中/ ,/ 若/ 外层/ 隧道/ MTU/ 小于/ 内层/ ,/ 则/ 每层/ 封装/ 时均/ 需/ 将/ 内层/ 大包/ 拆成/ 多个/ 小包/ ./ 因此/ 会/ 产生/ 较/ 多/ 分片/ ,/ 对/ 内存/ 控制/ 有/ 一定/ 压力/ ./ (/ 3/ )/ 需要/ 对/ 每层/ 的/ 包头/ 信息/ 进行/ 维护/ ./ 否则/ 若/ 只是/ 剥去/ 而/ 不/ 保留/ 包头/ 信息/ ,/ 会/ 引起/ 内层/ 分片/ 重组/ 的/ 混乱/ ./ (/ 4/ )/ 每次/ 分片/ 重组/ 均/ 需要/ 进行/ 多次/ 内存/ 申请/ 、/ 拷贝/ 和/ 释放/ 等/ 操作步骤/ ,/ 处理/ 时间/ 延长/ ./ 以上/ 4/ 个/ 方面/ 中/ ,/ 第/ (/ 1/ )/ 点/ 可/ 通过/ 零/ 拷贝/ 等/ 方式/ 减少/ 中断/ 和/ 系统/ 调用/ 的/ 频率/ ./ 文献/ [/ 13/ ]/ 中/ ,/ 表/ 1/ 列出/ 了/ 传统/ 与/ 零/ 拷贝/ 方式/ 在/ 不同/ 包长/ 下/ PPS/ 和/ 吞吐/ 率/ 的/ 比较/ 结果/ ,/ 指出/ 零/ 拷贝/ 方式/ 在/ 各种/ 长度/ 下均/ 有/ 更好/ 的/ 性能/ ;/ 第/ (/ 2/ )/ 点/ 可以/ 根据/ 一些/ 优化/ 的/ 内存/ 分片/ 管理/ 算法/ 来/ 进行/ 优化/ ;/ 第/ (/ 3/ )/ 点/ 在/ 2.1/ 节中/ 已经/ 提到/ ;/ 第/ (/ 4/ )/ 点/ 可/ 被/ 恶意/ 流量/ 利用/ 进行/ 攻击/ ,/ 也/ 是/ 本节/ 所/ 研究/ 的/ 重点/ ./ 下面/ 给出/ 一个/ 利用/ 恶意/ 多层/ 分片/ 对/ 协议/ 栈/ 进行/ 攻击/ 的/ 实例/ ,/ 如图/ 6/ 所示/ ./ IPv4/ 和/ IPv6/ 均/ 抽象/ 为/ IP/ 协议/ ,/ F1/ ~/ F4/ 是/ 四层/ 分片/ 包/ 的/ IP/ 层/ 包头/ ,/ I1/ ~/ I4/ 表示/ 不/ 带有/ 分片/ 或者/ 重组/ 后/ 的/ IP/ 头/ ./ Data0/ 表示/ 第一个/ 分片/ 携带/ 的/ 数据/ ,/ D1/ ~/ D4/ 表示/ F1/ ~/ F4/ 层/ 用于/ 进行/ 重组/ 的/ 数据/ ,/ Data0/ 较大/ ,/ 而/ D1/ ~/ D4/ 较/ 小/ ./ 传统/ 协议/ 栈中/ ,/ 当/ 处于/ 状态/ A/ 时/ ,/ 协议/ 栈/ 收到/ Data0/ 并/ 将/ 其/ 首次/ 插入/ 重组/ 队列/ ,/ 此时/ F1D1/ 到来/ ,/ 使/ 最/ 外层/ 进入/ 第一次/ 重组/ 过程/ ,/ 之后/ 进入状态/ B/ ./ 随后/ I1F2D2/ 、/ I1I2F3D3/ 和/ I1I2I3F4D4/ 的/ 到来/ 分别/ 促/ Page5/ 使/ 状态/ 从/ B/ 到/ C/ 到/ D/ 最终/ 到/ E/ 的/ 迁移/ ./ 状态/ 的/ 每次/ 迁移/ 均会/ 进行/ 一次/ 分片/ 重组/ ,/ 因此/ 若/ 数据/ 包含/ 有/ k/ 层/ 分片/ ,/ 重组/ 的/ 次数/ 即为/ k/ 次/ ./ 其中/ 的/ 安全/ 问题/ 在于/ ,/ 攻击者/ 可/ 先/ 发送/ 一个/ Data0/ 较大/ 的/ 分片/ 包/ ,/ 而后/ 发送/ D1/ ~/ D4/ 较/ 小/ 的/ 分片/ 包/ ,/ 协议/ 栈为/ 重组/ 多层/ 分片/ 必须/ 循环/ 多次/ 的/ 进行/ 缓冲区/ 的/ 开辟/ 、/ 数据/ 的/ 拷贝/ 和/ 缓冲区/ 的/ 释放/ 等/ 操作/ ,/ 极大/ 地/ 增加/ 了/ 计算/ 开销/ ,/ 降低/ 了/ 处理速度/ ./ D1/ ~/ D4/ 的/ 数据量/ 很小/ ,/ 可/ 忽略不计/ ,/ 因此/ 若/ 攻击者/ 使用/ 10Mbps/ 的/ 带宽/ 进行/ 攻击/ ,/ k/ 层/ 分片/ 则/ 产生/ 了/ k/ ×/ 10Mbps/ 的/ 攻击/ 流量/ ./ 同/ IPv6/ 选项/ 包头/ 一样/ ,/ 隧道/ 的/ 层数/ 只/ 限于/ 路径/ MTU/ (/ PMTU/ )/ ,/ 因此/ 可/ 认为/ 层数/ 范围/ 为/ PMTU1280/ ,/ 则/ 隧道/ 至少/ 可/ 含有/ 30/ 层/ IP/ 包头/ ,/ 具有/ 很强/ 的/ 放大/ 作用/ ./ 若/ 配合/ 已知/ 的/ 其它/ 攻击方式/ ,/ 攻击/ 种类/ 将/ 更加/ 复杂/ ,/ 影响/ 难以估计/ ./ 为此/ 本文/ 提出/ 了/ 后移/ 重组/ 技术/ 以/ 减轻/ 多层/ 分片/ 对/ 协议/ 栈/ 的/ 影响/ ./ 这里/ 存在/ 一个/ 假设/ ,/ 即/ 所有/ 包头/ 信息/ 均/ 在/ 第/ 1/ 个/ 分片/ 中/ ./ 对于/ 第/ 1/ 个/ 分片/ 未/ 含有/ 所有/ 包头/ 的/ 情况/ ,/ 检测/ 设备/ 均会/ 将/ 其/ 归/ 为/ 不/ 正常/ 的/ 数据流/ 并/ 加以/ 关注/ ./ 如/ 文献/ [/ 14/ ]/ 以/ TCP/ 解析/ 为例/ ,/ 指出/ 当/ 数据/ 长度/ 小于/ 某一/ 特定/ 值时/ 即/ 需要/ 对流/ 进行/ 跟踪/ 和/ 分析/ ./ 这种/ 情况/ 比较复杂/ ,/ 为了/ 简化/ 说明/ ,/ 本文/ 假设/ 所有/ 包头/ 信息/ 均/ 在/ 第/ 1/ 个/ 分片/ 中/ ./ 3/ 隧道/ 流/ 标记/ 为/ 避免/ 隧道/ 间/ 、/ 隧道/ 与非/ 隧道/ 间/ 的/ 数据/ 干扰/ 和/ 恶意/ 攻击/ ,/ 协议/ 栈/ 需要/ 存储/ 隧道/ 包各层/ 包头/ 信息/ ,/ 通过/ 逐层/ 比较/ ,/ 可/ 正确/ 分组/ 各种/ 流量/ ./ 然而/ ,/ 对/ 隧道/ 的/ 每层/ 包头/ 均/ 进行/ 记录/ 会/ 有/ 以下/ 两个/ 问题/ :/ 首先/ 是/ 内存/ 开销/ ,/ 由于/ 网络/ 检测/ 设备/ 不能/ 预测/ 一条/ 隧道/ 中/ 包头/ 的/ 个数/ ,/ 也/ 不能/ 预测/ 每层/ 包头/ 的/ 类型/ ,/ 因此/ 须/ 动态分配/ 和/ 释放/ 内存/ ./ 同时/ 若/ 每层/ 包头/ 的/ 有效/ 信息/ 全/ 被/ 记录/ 则/ 会/ 占用/ 大量/ 的/ 内存/ ;/ 其次/ ,/ 在/ 处理/ 每层/ 包头/ 时均/ 需/ 比较/ 包头/ 内/ 所有/ 信息/ ,/ 会/ 增加/ 大量/ 的/ 系统/ 开销/ ./ 因此/ ,/ 本文/ 提出/ 了/ 隧道/ 流/ 标记技术/ ,/ 使用/ Hash/ 算法/ 逐层/ 计算/ 每层/ 包头/ 的/ 累积/ Hash/ 值/ ,/ 并/ 与/ 隧道/ 层/ 信息/ 组成/ 该/ 隧道/ 的/ 隧道/ 流/ 标记/ ./ 隧道/ 流/ 标记/ 中/ ,/ Hash/ 算法/ 有/ 如下/ 几点/ 考虑/ :/ (/ 1/ )/ 高效性/ ./ 网络设备/ 的/ 实时性/ 和/ 高/ 吞吐/ 率/ 要求/ Hash/ 函数/ 必须/ 快速/ 高效/ ./ 本文/ 在/ 设计/ 算法/ 时/ 借鉴/ 了/ 文献/ [/ 15/ ]/ 提出/ 的/ 循环/ 移位/ 和/ 异或/ 相结合/ 的/ Hash/ 算法/ ,/ 其/ 在/ 处理/ 网络/ 流/ 时/ 速度/ 较优/ ,/ 并且/ 循环/ 位移/ 3/ ,/ 4/ ,/ 6/ 个/ 比特/ 的/ Hash/ 函数/ 生成/ 的/ 伪/ 随机/ 序列/ 随机/ 测度/ 值/ 较大/ ./ (/ 2/ )/ 安全性/ ./ 两个/ k/ 层/ 隧道/ 中/ ,/ 若/ 第/ k/ 层/ 一样/ ,/ 且/ 前/ k/ -/ 1/ 层/ 的/ 累积/ Hash/ 值/ 和/ 隧道/ 层/ 信息/ 一致/ ,/ 则/ 产生/ 了/ 冲突/ ./ 因此/ ,/ Hash/ 函数/ 应/ 能/ 对抗/ 冲突/ 碰撞/ ,/ 以/ 在/ 最大/ 程度/ 上/ 防止/ 可能/ 或者/ 恶意/ 的/ 干扰/ ./ (/ 3/ )/ 层次性/ ./ 包含/ 两点/ :/ 首先/ 是/ 隧道/ 层次性/ ,/ 当/ 一个/ 数据/ 包含/ 有/ 多个/ 包头/ 时/ ,/ 外层/ 包头/ 的/ 有效性/ 要/ 高于/ 内层/ 包头/ ,/ 尤以/ 最/ 外层/ 包头/ 有效性/ 最高/ ./ 这/ 是因为/ 越/ 外层/ 包头/ 含有/ 的/ 广域/ 路由/ 信息/ 越强/ 越难/ 伪造/ ,/ 越/ 内层/ 包头/ 含有/ 的/ 局域/ 路由/ 信息/ 越强/ 越易/ 伪造/ ,/ 因此/ 在/ 进行/ Hash/ 时应/ 突出/ 外层/ 尤其/ 是/ 最/ 外层/ 信息/ ./ 同时/ 隧道/ 层次性/ 应该/ 有/ 累积/ 特点/ ,/ 即后/ 一层/ 的/ 流/ 标记/ 是/ 由/ 本层/ 信息/ 和/ 外层/ 累积/ 流/ 标记/ 共同/ 标记/ ./ 其次/ 是/ IP地址/ 层次性/ ,/ 地址/ 高位/ 的/ 广域/ 路由/ 信息/ 较强/ 不易/ 伪造/ ,/ 而/ 低位/ 地址/ 局域/ 性较/ 强易/ 伪造/ ,/ 且/ 高位/ 地址/ 的/ 伪造/ 引起/ 路由/ 失效/ 的/ 可能性/ 较大/ ,/ 因此/ 高位/ 地址/ 应当/ 具有/ 较大/ 的/ 权重/ ./ (/ 4/ )/ 唯一性/ ./ 对/ 某/ 一层/ 包头/ 信息/ 进行/ 标记/ 需要/ 取/ 包头/ 中/ 不变/ 的/ 信息/ 使得/ 每次/ 标记/ 的/ 结果/ 一致/ ./ 包头/ 中源/ 和/ 目的/ IP/ (/ SIP/ 、/ DIP/ )/ 不变/ ,/ 作为/ 输入/ ./ 对于/ IPv4/ 而言/ ,/ 地址/ 长度/ 32/ 位/ ,/ 源/ 和/ 目的/ 地址/ 高/ 16/ 位用/ s1/ ,/ d1/ 表示/ ,/ 低/ 16/ 位用/ s2/ ,/ d2/ 表示/ ./ 根据/ 之前/ 分析/ ,/ 高/ 16/ 位/ 的/ 权重/ 应/ 大于/ 低/ 16/ 位/ ,/ 因此/ Hash/ 值高/ 16/ 位/ 由/ s1/ 和/ d1/ 构成/ ,/ 而/ 低/ 16/ 位/ 由/ s1/ ,/ s2/ ,/ d1/ ,/ d2/ 共同/ 构成/ ,/ 并且/ 根据/ 文献/ [/ 15/ ]/ 提供/ 的/ 方法/ 给出/ IPv4/ 包头/ 的/ Hash/ 公式/ (/ F1/ )/ ,/ Hash/ 值为/ 32/ 位/ ./ 在/ IPv6/ 中/ ,/ 地址/ 长度/ 128/ 位/ ,/ 高/ 64/ 位为/ 网络地址/ ,/ 低/ 64/ 位为/ 子网/ 地址/ ./ 与/ IPv4/ 不同/ ,/ IPv6/ 网络地址/ 是/ 严格/ 地/ 按照/ 层次/ 划分/ 的/ ,/ 因此/ 越是/ 伪造/ 高位/ 地址/ 数据包/ 被/ 丢弃/ 的/ 概率/ 越大/ ./ 对/ IPv6/ 地址/ ,/ 仿照/ IPv4/ 的/ 分割/ 、/ 异或/ 和/ 循环/ 移位/ 方法/ ,/ 使用/ 64/ 位/ 分割/ ,/ 公式/ 如/ (/ F2/ )/ 所示/ ./ Page6/ 式/ (/ F1/ )/ 、/ (/ F2/ )/ 用于/ 生成/ 每层/ 32/ 位/ 的/ Hash/ 值/ ./ 隧道/ 流/ 标记/ 用/ 64/ 位/ ufid/ 表示/ ,/ 其中/ 高/ 32/ 位/ 用于/ 存放/ 最/ 外层/ 标记/ ,/ 低/ 32/ 位/ 用于/ 进行/ 累积/ 流/ 标记/ ,/ 从而/ 体现/ 隧道/ 层次性/ ;/ 隧道/ 层/ 信息/ 用/ 16/ 位/ layer/ _/ info/ 表示/ ,/ 高/ 4/ 位/ 存放/ 层数/ ,/ 低/ 12/ 位/ 存放/ 每层/ 类型/ (/ 0/ 表示/ IPv4/ 、/ 1/ 表示/ IPv6/ )/ ,/ 因此/ 最/ 多/ 支持/ 12/ 层/ 隧道/ ./ 隧道/ 流/ 标记/ 如/ 算法/ 1/ ,/ 其中/ F/ 代表/ 公式/ (/ F1/ )/ 或/ (/ F2/ )/ ./ 算法/ 1/ ./ 隧道/ 流/ 标记/ 算法/ ./ 输入/ :/ 接收/ 的/ 数据包/ 输出/ :/ 隧道/ 流/ 标记/ 值/ 1/ ./ procedureComufid/ (/ Packet/ ×/ p/ )/ 2/ ./ lnum/ ←/ layer/ _/ info/ / 12/ ;/ 3/ ./ hash/ ←/ F/ (/ p/ )/ ;/ 4/ ./ iflnum/ =/ 0then5/ ./ ufid/ ←/ (/ hash/ / 32/ |/ hash/ )/ ;/ 6/ ./ else7/ ./ ufid/ ←/ ufid/ / hash/ ;/ 8/ ./ endif9/ ./ layer/ _/ info/ ←/ layer/ _/ info/ +/ 1/ / 12/ ;/ 10/ ./ ifpisIPv6then11/ ./ layer/ _/ info/ ←/ layerinfo/ |/ 1/ / lnum/ ;/ 12/ ./ endif13/ ./ endprocedure/ 协议/ 栈/ 在/ 处理/ 隧道/ 某层/ 包头/ 时/ ,/ 会/ 计算/ 累积/ ufid/ 和/ layer/ _/ info/ 值/ ,/ 以/ 区分/ 最/ 外层/ 到/ 本层/ 包头/ 的/ 不同/ 隧道/ 流/ ./ 假设/ 隧道/ 层数/ 为/ k/ ,/ 当前/ 处于/ 第/ p/ 层/ (/ 1/ </ p/ </ k/ )/ ,/ 则/ 累积/ ufid/ 和/ layer/ _/ info/ 会/ 避免/ 隧道/ 第/ 1/ ~/ p/ 层/ 干扰/ 的/ 出现/ ,/ 当/ p/ =/ k/ 时/ ,/ 即可/ 认为/ 隧道/ 每层/ 均/ 不会/ 出现/ 干扰/ ,/ 从而/ 保证/ 隧道/ 的/ 安全性/ ./ 隧道/ 流/ 标记/ 在/ 实际/ 环境/ 中/ 还/ 需/ 考虑/ 以下/ 4/ 方面/ 的/ 情况/ :/ (/ 1/ )/ 需要/ 处理/ 非/ IP/ 头/ 的/ 隧道/ ,/ 如/ Teredo/ 中/ 的/ UDP/ 包头/ 也/ 需要/ 进行/ 隧道/ 流/ 标记/ ;/ (/ 2/ )/ 需要/ 替换/ 路由/ 选项/ 中/ 的/ 最终/ 目的/ IP/ ;/ (/ 3/ )/ IPv6/ 中/ 的/ 流/ 标记/ (/ FlowLabel/ )/ 等/ 未/ 明确/ 字段/ 会/ 产生/ 未知/ 影响/ ,/ 也/ 需/ 进行/ 特殊/ 处理/ ;/ (/ 4/ )/ 对于/ 自身/ 维护/ 流表/ 的/ 上层/ 应用/ 也/ 需/ 存储/ 隧道/ 流/ 标记/ 信息/ ,/ 避免出现/ 同/ 协议/ 栈/ 一样/ 的/ 干扰/ ./ 4/ 后移/ 重组/ 为/ 降低/ 多层/ 分片/ 攻击/ 对/ 协议/ 栈/ 的/ 影响/ ,/ 本文/ 提出/ 了/ 后移/ 重组/ 技术/ ./ 由图/ 5/ 可知/ ,/ 当/ IP/ 包/ 完整/ 时/ ,/ 协议/ 栈/ 就/ 将/ ipq/ 下/ 所有/ frag/ 重/ 组成/ 原始/ IP/ 包/ ,/ 释放/ ipq/ 和/ frag/ 链/ ,/ 而后/ 处理/ 重组/ 后/ 的/ 数据包/ ./ 此时/ 若下/ 一层/ 仍为/ 分片/ ,/ 则/ 需/ 按/ 内层/ 分片/ 信息/ 将/ 重组/ 后/ 的/ 数据包/ 插入/ 到/ 新/ ipq/ 中/ 等待/ 重组/ ./ 容易/ 发现/ ,/ frag/ 链均/ 由/ offset/ 、/ end/ 和/ len/ 控制/ ,/ 所以/ 多个/ 连续/ 的/ 小/ frag/ 和/ 一个/ 合并/ 的/ 大/ frag/ 均/ 可/ 代表/ 同一/ 数据/ ./ 因此/ ,/ 若下/ 一层/ 仍/ 是/ 分片/ ,/ 本层/ 就/ 可不/ 进行/ 重组/ ,/ 只/ 将/ 本/ ipq/ 中/ frag/ 链转移/ 到/ 下/ 一层/ ipq/ 中/ ,/ 释放/ 本/ ipq/ ,/ 这/ 与/ 放入/ 合并/ 后/ frag/ 的/ 结果/ 相同/ ,/ 但/ 却/ 减少/ 了/ 多次/ frag/ 释放/ 、/ 一次/ 重组/ 缓冲区/ 申请/ 和/ 一次/ 重组/ 数据/ 的/ 拷贝/ ./ 若/ 可/ 将/ 第/ 1/ 层/ 重组/ 中/ 的/ frag/ 链/ 挪到/ 第/ 2/ 层/ 的/ ipq/ 下/ ,/ 则/ 也/ 可/ 将/ 第/ 2/ 层中/ 的/ frag/ 链/ 挪到/ 第/ 3/ 层下/ ,/ 直到/ 挪到/ 最/ 内层/ 的/ ipq/ 中/ 再/ 进行/ 重组/ ,/ 从而/ 避免/ 对/ frag/ 的/ 多次/ 操作/ ,/ 减少/ 程序/ 的/ 执行/ 时间/ ,/ 这/ 就是/ 后移/ 重组/ 的/ 基本/ 思想/ ./ 图/ 7/ 所示/ 为/ 两层/ 分片/ 的/ 后移/ 重组/ 策略/ ./ 其中/ UFID/ 为/ 累积/ 隧道/ 流/ 标识/ ,/ LI/ 表示/ 隧道/ 层/ 信息/ ./ (/ a/ )/ 过程/ 涉及/ 最/ 外层/ 两个/ 数据包/ ,/ 其/ 通过/ 与/ F1/ 相关/ 的/ UFID/ 、/ LI/ 、/ id/ 、/ sip/ 、/ dip/ 和/ np/ 定位/ ipq1/ ,/ Data0/ 形成/ frag0/ ,/ D1/ 形成/ frag1/ ./ 假设/ Data0/ 、/ D1/ 可/ 组成/ 完整/ IP/ 报文/ ,/ 则/ 传统/ 协议/ 栈会/ 重组/ 该/ 分片/ ,/ 形成/ 过程/ (/ b/ )/ 中/ 的/ 虚线/ frag0/ +/ frag1/ 的/ 形式/ ./ 而/ 在/ 后移/ 重组/ 中/ ,/ 当/ 步骤/ A/ 形成/ 完整/ 数据包/ 后/ ,/ 要/ 进行/ 下/ 一层/ 检查/ ,/ 若下/ 一层/ 也/ 为/ 分片/ 数据/ ,/ 则/ 进入/ 过程/ (/ b/ )/ ./ 需要/ 注意/ 一点/ ,/ F1/ 、/ F2/ 之间/ 可能/ 存在/ 未/ 分片/ 的/ 包头/ Fx/ ,/ 需/ 正常/ 解析/ Fx/ 后/ 继续/ 向/ 内/ 查找/ ./ 过程/ (/ b/ )/ 中/ ,/ 数据包/ 并未/ 进行/ 重组/ ,/ 而是/ 根据/ 内部/ 包头/ F2/ 定位/ ipq2/ 后/ 将/ frag0/ 和/ frag1/ 移入/ ipq2/ 的/ frag/ 队列/ 中/ ,/ 仅/ 进行/ 了/ 一次/ 比较/ 和/ 指针/ 操作/ ,/ 因此/ 节省/ 了/ 大量/ 的/ 计算/ 时间/ ./ 过程/ (/ c/ )/ 表示/ 当/ 与/ F2/ 相关/ 的/ 其它/ 分片/ 到达/ ipq2/ 后/ 可能/ 出现/ 的/ 情况/ ./ 由于/ frag0/ 与/ frag1/ 可以/ 组成/ 一个/ 完整/ 段/ ,/ 因此/ D2/ 的/ 位置/ 只能/ 在/ 其/ 两侧/ ,/ 右侧/ 如实/ 线/ 部分/ ,/ 左侧/ 如点/ 划线/ 部分/ ./ Page7/ 后移/ 重组/ 算法/ 如/ 算法/ 2/ 、/ 3/ 所示/ ,/ 其/ 忽略/ 了/ 协议/ 的/ 具体/ 实现/ 细节/ 和/ 如/ Teredo/ 等/ UDP/ 、/ GRE/ 隧道/ 的/ 特殊/ 处理/ ./ 隧道/ 数据包/ 的/ 每层/ 包头/ 均/ 需/ 进行/ 隧道/ 流/ 标记/ 的/ 计算/ ,/ 因此/ ufid/ 和/ layer/ _/ info/ 在/ 分片/ 处理/ (/ frag/ _/ reassemble/ 函数/ )/ 前/ 已/ 计算/ 完毕/ ./ 算法/ 2/ ./ 分片/ 数据/ 基本/ 处理/ 流程/ ./ 输入/ :/ 接收/ 的/ 数据包/ 输出/ :/ 重组/ 数据包/ 或/ 后移/ 队列/ 1/ ./ procedurefrag/ _/ reassemble/ (/ Packet/ ×/ p/ )/ 2/ ./ hashn/ ←/ hash/ (/ p/ )/ ;/ 3/ ./ ipq/ ←/ findipqofpinHashTable/ [/ hashn/ ]/ ;/ 4/ ./ if/ !/ ipqthen5/ ./ createipq/ &/ fillinfo/ ;/ 6/ ./ ipq/ ./ UFID/ ←/ ufid/ ;/ 7/ ./ ipq/ ./ LI/ ←/ layer/ _/ info/ ;/ 8/ ./ endif9/ ./ insertpintofragmentsofipq/ ;/ 10/ ./ ifipqiscompletethen11/ ./ ifdelay/ _/ resem/ (/ ipq/ )/ then12/ ./ reassembleipqasusual/ ;/ 13/ ./ endif14/ ./ endif15/ ./ endprocedure/ 算法/ 3/ ./ 后移/ 重组/ 核心/ 算法/ ./ 输入/ :/ 待/ 后移/ frag/ 队列/ 输出/ :/ 后移/ 之后/ 的/ frag/ 队列/ 1/ ./ proceduredelay/ _/ reassem/ (/ ipq/ )/ 2/ ./ packet/ ←/ firstfraginipq/ ;/ 3/ ./ next/ _/ header/ ←/ nextIPheaderinpacket/ ;/ 4/ ./ whilenext/ _/ header/ !/ =/ UDP/ // TCPdo5/ ./ Comufid/ (/ packet/ )/ ;/ 6/ ./ ifnext/ _/ header/ ./ fragthen7/ ./ break/ ;/ 8/ ./ endif9/ ./ next/ _/ header/ ←/ nextIPheader/ ;/ 10/ ./ endwhile11/ ./ ifnext/ _/ header/ =/ UDP/ // TCPthen12/ ./ return113/ ./ endif14/ ./ hashn/ ←/ hash/ (/ next/ _/ header/ )/ 15/ ./ ipq/ _/ new/ ←/ find/ // Createipq/ _/ newofnext/ _/ headerin16/ ./ ipq/ _/ new/ ./ UFID/ ←/ ufid/ ;/ 17/ ./ ipq/ _/ new/ ./ LI/ ←/ layer/ _/ info/ ;/ 18/ ./ movefragsfromipqtoipq/ _/ new/ ;/ 19/ ./ freeipq/ ;/ 20/ ./ return021/ ./ endprocedure/ 后移/ 重组/ 挪动/ 外层/ frag/ 到/ 内层/ 会/ 产生/ 3/ 个/ 影响/ :/ (/ 1/ )/ IP/ 分片/ 增多/ 会/ 增加/ 内存/ 碎片/ 数量/ ,/ 可能/ 会/ 降低/ 整体/ 性能/ ./ 但/ 目前/ 大部分/ IDS/ // IPS/ 系统/ 均/ 含有/ 内存/ 管理/ ,/ 因此/ IP/ 分片/ 增多/ 不会/ 明显降低/ 系统/ 性能/ ;/ (/ 2/ )/ 外层/ frag/ 挪动/ 到/ 内层/ 虽然/ 会/ 减少/ 分片/ 重组/ 的/ 次数/ ,/ 但会/ 增加/ 内层/ 分片/ 包头/ 的/ 平均/ 比较/ 次数/ ./ 假设/ 原始数据/ 被/ 分成/ t/ 个/ 分片/ ,/ 其中/ 1/ ~/ m/ 号/ 分片/ 进行/ 最/ 外层/ 重组/ ,/ m/ +/ 1/ ~/ t/ 号/ 分片/ 分别/ 组成/ 每个/ 内层/ 包头/ ,/ 所有/ 数据包/ 顺序/ 到达/ (/ 相当于/ 图/ 6/ 中/ 最/ 外层/ 数据包/ 由/ m/ 个/ 分片/ 组成/ ,/ 后续/ 每层/ 1/ 个/ 分片/ 包/ )/ ./ 因此/ ,/ 对于/ 原始/ 的/ 逐层/ 重组/ 方式/ ,/ 总分/ 片/ 比较/ 次数/ 为/ m/ (/ m/ +/ 1/ )/ (/ t/ -/ m/ )/ (/ m/ +/ 1/ +/ t/ )/ 数为/ (/ t/ (/ 1/ +/ t/ )/ )/ 减少/ t/ -/ m/ 次/ 分片/ 重组/ ./ 两者/ 单位/ 不同/ 无法/ 直接/ 比较/ ,/ 因此/ 我们/ 在/ 实验/ (/ 图/ 10/ 所示/ )/ 中/ 对/ 该/ 影响/ 进行/ 了/ 测试/ ,/ 结果表明/ 比较/ 次数/ 的/ 增加/ 虽然/ 会/ 降低/ 每层/ 分片/ 的/ 比较/ 速度/ ,/ 但/ 与/ 多次/ 重组/ 过程/ 相比/ ,/ 比较/ 次数/ 增加/ 的/ 代价/ 可以/ 忽略/ ;/ (/ 3/ )/ 在/ 分片/ 攻击/ 方面/ ,/ 后移/ 重组/ 只是/ 增加/ 了/ 内层/ 分片/ 个数/ ,/ 因此/ 并/ 不会/ 减轻/ 超大/ 数据/ 、/ 重叠/ 分片/ 、/ 分片/ 空洞/ 等/ 攻击/ 的/ 威胁/ ./ 同时/ ,/ 若/ 后移/ 重组/ 后/ 产生/ 了/ 大量/ 分片/ ,/ 则/ 极/ 有/ 可能/ 被/ 认为/ 是/ 一种/ 攻击/ 而/ 进行/ 异常/ 处理/ ,/ 因此/ 这种/ 攻击/ 不会/ 对系统/ 造成/ 更深/ 的/ 影响/ ./ 5/ 实验/ 与/ 性能/ 分析/ 本节/ 对/ 隧道/ 流/ 标记/ 和/ 后移/ 重组/ 两个/ 关键技术/ 进行/ 了/ 测试/ ,/ 评估/ 其/ 性能/ 开销/ ,/ 论证/ 可行性/ ./ 隧道/ 流/ 标记/ 中/ ,/ 对/ 每个/ 数据包/ 的/ 每个/ 网络层/ 包头/ 进行/ 标记/ ,/ 必然/ 会/ 增加/ 协议/ 栈/ 的/ 计算/ 量/ 和/ 处理/ 时间/ ,/ 由于/ 算法/ 1/ 的/ 时间/ 复杂度/ 为/ O/ (/ 1/ )/ ,/ 因此/ k/ 层/ 隧道/ 具有/ O/ (/ k/ )/ 的/ 时间/ 复杂度/ ,/ 时间/ 增量/ 正比/ 于/ 隧道/ 层数/ ,/ 线性/ 增加/ ./ 内存/ 方面/ ,/ 由于/ 并/ 没有/ 复杂/ 的/ 数据结构/ ,/ 只/ 增加/ 了/ ufid/ 和/ layer/ _/ info/ 两个/ 变量/ ,/ 基本/ 不会/ 增加/ 内存/ ./ 后移/ 重组/ 中/ ,/ 若/ k/ 层/ 隧道/ 中有/ p/ 层/ 分片/ ,/ 则/ 仍/ 需/ 处理/ k/ 层/ 包头/ ,/ 但/ 分片/ 重组/ 的/ 次数/ 减少/ p/ -/ 1/ 次/ ,/ 因此/ 从/ 分片/ 重组/ 的/ 角度/ 而言/ ,/ 时间/ 复杂度/ 由/ O/ (/ p/ )/ 降低/ 为/ O/ (/ 1/ )/ ,/ 大量/ 降低/ 了/ 内存/ 操作/ 次数/ 、/ 效果/ 明显/ ./ 内存/ 占用/ 上/ ,/ 由于/ 每个/ ipq/ 存储/ 了/ 本层/ 的/ 累积/ ufid/ 和/ layer/ _/ info/ ,/ 因此/ 每个/ ipq/ 会/ 增加/ 10B/ 的/ 空间/ ,/ 总/ 增加量/ 与/ ipq/ 总数/ 呈/ 线性关系/ ,/ 而/ ipq/ 总数/ 有限/ ,/ 所以/ 内存/ 占/ 用量/ 增加/ 有限/ ./ Page8/ 由/ 上述/ 分析/ 可知/ ,/ 两者/ 对/ 内存/ 的/ 影响/ 较/ 小/ ,/ 因此/ 本章/ 的/ 测试/ 将/ 以/ 时间/ 为/ 标准/ 评估/ 两者/ 对/ 协议/ 栈/ 性能/ 的/ 影响/ ./ 实验/ 平台/ 为/ 一台/ 8/ 核/ 2.6/ GHz/ 主频/ ,/ 16GB/ 内存/ 的/ 服务器/ ./ 采用/ 共享内存/ 的/ 方法/ ,/ 预处理/ 程序/ 将/ 实验/ 用/ 数据包/ 写入/ 共享内存/ ,/ 而后/ 启动/ 协议/ 解析/ 程序/ 进行/ 协议/ 还原/ ./ 后移/ 重组/ 以/ 隧道/ 流/ 标记/ 为/ 基础/ ,/ 因此/ 实验/ 分为/ 两个/ 阶段/ ,/ 首先/ 测试/ 隧道/ 流/ 标记/ 对/ 协议/ 栈/ 的/ 影响/ ,/ 之后/ 测试/ 后移/ 重组/ 性能/ ./ 隧道/ 流/ 标记/ 采用/ 表/ 1/ 中/ 的/ 隧道/ 种类/ 进行/ 测试/ ./ 第/ 1/ 列/ 表示/ 隧道/ 层数/ ,/ 第/ 2/ 列/ 表示/ 含有/ 的/ 包头/ 种类/ ,/ 由于/ 每层/ 包头/ 可能/ 是/ IPv4/ 或/ IPv6/ ,/ 因此/ k/ 层/ 包头/ 含有/ 2k/ 种/ 类型/ ./ 第/ 3/ 列中/ 4/ // 6/ 表示/ 包头/ 为/ IPv4/ 或/ IPv6/ ,/ 44/ 表示/ 两层/ IPv4/ 包头/ ,/ 46/ 表示/ 外层/ 为/ IPv4/ 包头/ 内层/ 为/ IPv6/ 包头/ ,/ 以此类推/ ./ 层数/ 种类/ 1234164444/ // 4446/ // …/ // 6664/ // 666653244444/ // 44446/ // …/ // 66664/ // 66666/ 测试/ 中/ ,/ 每次/ 生成/ 106/ 个/ UDP/ 隧道/ 包/ ,/ 源/ 和/ 目的/ IP/ 随机/ 生成/ ,/ 每种/ 类型/ 测试/ 10/ 次/ ,/ 还原/ 流程/ 在/ 处理/ UDP/ 包头/ 后/ 终止/ ,/ 取/ 时间/ 最小值/ ./ 图/ 8/ 所示/ 为/ 实验/ 中纯/ v4/ 和/ 纯/ v6/ 隧道/ 采用/ 和/ 未/ 采用/ 隧道/ 流/ 标记/ 算法/ 产生/ 的/ 时间/ 差值/ ,/ 隧道/ 类别/ 为/ 4/ ~/ 44444/ 和/ 6/ ~/ 66666/ ./ 时间/ 增加量/ 表示/ 隧道/ 流/ 标记/ 增加/ 的/ 计算/ 时间/ ,/ 如/ 66/ 对应/ 17.0/ 表示/ 6in6/ 隧道/ 流/ 标记/ 增加/ 了/ 17.0/ ms/ 的/ 处理/ 时间/ ./ 可以/ 看出/ ,/ 由于/ IPv6/ 计算公式/ 复杂/ ,/ IPv6/ 比/ IPv4/ 增加/ 了/ 更/ 多/ 的/ 时间/ ./ 曲线/ 形态/ 表明/ ,/ 无论是/ IPv4/ 还是/ IPv6/ 均/ 呈现/ 线性/ 增加/ 的/ 趋势/ ,/ 因此/ 可/ 认为/ 隧道/ 流/ 标记/ 算法/ 增加/ 的/ 时间/ 与/ 隧道/ 层数/ 成正比/ ./ 表/ 2/ 所示/ 为/ 实验/ 中/ 1/ ~/ 3/ 层/ 隧道/ 上/ 隧道/ 流/ 标记/ 算法/ 时间/ 增加/ 的/ 比例/ ./ 相对/ 于/ 未/ 使用/ 情况/ ,/ 隧道/ 流/ 标记/ 平均/ 每层/ IPv4/ 增加/ 0.5/ %/ 左右/ 的/ 计算/ 时间/ ,/ IPv6/ 增加/ 1/ %/ ./ 表中/ 数据/ 存在/ 一定/ 的/ 波动/ ,/ 尤其/ 是/ 遇到/ IPv4/ 、/ IPv6/ 转换/ 的/ 情况/ ,/ 时间/ 线性/ 特点/ 不/ 明显/ ./ 但/ 整体/ 上/ ,/ 对于/ 1/ ~/ 3/ 层/ 隧道/ ,/ 平均/ 每层/ 最大/ 增加/ 1.32/ %/ 的/ 计算/ 时间/ ,/ 因此/ 对/ 协议/ 栈/ 的/ 整体/ 性能/ 影响/ 较/ 小/ ./ 层数/ 类型/ 增加/ 的/ 比例/ // %/ 每层/ 增加/ 的/ 比例/ // %/ 1423/ 对于/ 后移/ 重组/ ,/ 按图/ 6/ 所示/ 多层/ 分片/ 攻击/ 实例/ ,/ 分/ 1/ ~/ 5/ 层/ 进行/ 了/ 测试/ ./ 每次/ 测试/ 使用/ 106/ 个/ UDP/ 数据包/ ,/ 每个/ UDP/ 包被/ 拆/ 分为/ 较大/ 包/ Data0/ 和/ k/ 个/ 较/ 小包/ D1/ ~/ Dk/ ,/ k/ 为/ 隧道/ 层数/ ,/ 数据包/ 总数/ 为/ 106/ ×/ (/ 1/ +/ k/ )/ 个/ ./ IP/ 、/ ID/ 随机/ 生成/ ,/ 5/ 次/ 实验/ 种类/ 与/ 数据包/ 数目/ 如表/ 3/ 所示/ ./ 44/ // 66444/ // 6664444/ // 666644444/ // 666666/ 测试/ 结果/ 如图/ 9/ 所示/ ,/ 其中/ 4/ 条/ 曲线/ 分别/ 代表/ IPv4/ 、/ IPv6/ 情况/ 下/ 使用/ (/ v4rr/ // v6rr/ )/ 和/ 未/ 使用/ (/ v4ori/ // v6ori/ )/ 后移/ 重组/ 的/ 时间/ 曲线/ ,/ 左/ 上/ 数字/ 表示/ 两种/ 方式/ 与/ 原始/ 比例/ ./ 在/ 单层/ 包头/ 时/ ,/ 由于/ 后移/ 重组/ 未/ 发生/ 且/ 增加/ 了/ 隧道/ 流/ 标记/ 以及/ 相关/ 判断/ 步骤/ ,/ 计算/ 时间/ 有所增加/ ./ Page9/ 从/ 两层/ 隧道/ 开始/ ,/ 由于/ 进行/ 了/ 实质/ 的/ 后移/ 重组/ ,/ v4rr/ // v6rr/ 的/ 时间/ 曲线/ 有/ 了/ 明显/ 的/ 降低/ ,/ 44/ // 66/ 隧道/ 仅/ 一次/ 后移/ 重组/ 便/ 减少/ 了/ 17/ %/ 左右/ 的/ 计算/ 时间/ ,/ 优化/ 效果/ 非常明显/ ./ 而/ 随着/ 隧道/ 层数/ 的/ 增加/ ,/ 时间/ 节省/ 比例/ 逐渐/ 加大/ ,/ 如/ 5/ 层/ 隧道/ 中/ 4/ 次/ 后移/ 重组/ 减少/ 的/ 时间/ 比例/ 达到/ 30/ %/ ./ 通过/ 计算/ 可知/ ,/ IPv4/ 平均/ 每层/ 减少/ 了/ 7.5/ %/ 的/ 计算/ 时间/ ,/ 而/ IPv6/ 平均/ 每层/ 减少/ 了/ 7.3/ %/ ./ 从/ 曲线/ 趋势/ 可以/ 看出/ ,/ 随着/ 隧道/ 层数/ 的/ 增多/ ,/ 未/ 使用/ 后移/ 重组/ 的/ 两条/ 曲线/ v4ori/ 、/ v6ori/ 斜率/ 逐渐/ 加大/ (/ 不断/ 地/ 进行/ 重组/ 会/ 引发/ 一定/ 的/ 累积/ 效应/ )/ ,/ 而/ 使用/ 后移/ 重组/ 的/ 两条/ 曲线/ v4rr/ 、/ v6rr/ 的/ 斜率/ 保持稳定/ ./ 两者/ 斜率/ 差值/ 的/ 增大/ 将/ 使得/ 后者/ 与/ 前者/ 的/ 比例/ 逐渐/ 减小/ ,/ 节省/ 更/ 多/ 的/ 计算/ 时间/ ./ 实验/ 中/ ,/ 后移/ 重组/ 的/ 最/ 内层/ 分片/ 数目/ 最大/ 为/ 6/ ,/ 无法/ 体现/ 分片/ 较/ 多/ 引发/ 的/ 比较/ 次数/ 增加/ 对/ 重组/ 性能/ 的/ 影响/ ,/ 因此/ 我们/ 将/ 图/ 9/ 所示/ 实验/ 中/ 最/ 外层/ 数据包/ 分成/ 了/ 10/ 份/ (/ 前/ 9/ 个/ 分片/ 预先/ 写入/ ,/ 避免/ 最/ 外层/ 10/ 份/ 数据/ 引起/ 数据包/ 的/ 大量/ 增加/ )/ ,/ 以/ 增加/ 内层/ 包头/ 的/ 比较/ 次数/ ,/ 其它/ 参数/ 一致/ ,/ 图/ 10/ 为/ 比较/ 结果/ ./ 可以/ 看出/ ,/ 在/ 比较/ 次数/ 较/ 多/ 的/ 情况/ 下/ ,/ 后移/ 重组/ 消耗/ 的/ 时间/ 比例/ 与/ 上/ 一/ 实验/ 相比/ 最多/ 有/ 约/ 5/ %/ 左右/ 的/ 升高/ ./ 虽然/ 增加/ 了/ 分片/ 比较/ 次数/ ,/ 但/ 由于/ 减少/ 了/ 1/ ~/ 4/ 次/ 重组/ 过程/ ,/ 与/ 逐层/ 重组/ 方式/ 相比/ 仍/ 具有/ 较大/ 性能/ 优势/ ./ 综上/ 实验/ 表明/ ,/ 隧道/ 流/ 标记/ 增加/ 了/ 微量/ 的/ 系统/ 处理/ 时间/ (/ 每层/ v4/ 为/ 0.5/ %/ 、/ v6/ 为/ 1/ %/ 左右/ )/ ,/ 在/ 解决/ 隧道/ 干扰/ 的/ 基础/ 上/ 付出/ 了/ 很小/ 的/ 代价/ ;/ 而/ 后移/ 重组/ 平均/ 每层/ 减少/ 了/ 7.5/ %/ 左右/ 的/ 计算/ 时间/ ,/ 且/ 层数/ 越/ 多/ 性能/ 提升/ 效果/ 越/ 明显/ ./ 同时/ ,/ 内层/ 分片/ 的/ 增多/ 对/ 重组/ 效率/ 影响/ 也/ 较/ 小/ ./ 6/ 结论/ IPv4/ 向/ IPv6/ 的/ 过渡/ 产生/ 了/ 很多/ 问题/ ,/ 其中/ 多种多样/ 的/ 隧道/ 技术/ 严重/ 影响/ 了/ 检测/ 设备/ 协议/ 栈/ 的/ 正常/ 工作/ ./ 本文/ 指出/ 隧道/ 具有/ 层次/ 和/ 类型/ 不确定性/ ,/ 提出/ 的/ 广义/ 隧道/ 有效/ 地/ 涵盖/ 了/ 各种/ 隧道/ 类型/ ./ 在/ 检测/ 设备/ 对/ 广义/ 隧道/ 的/ 解析/ 中/ ,/ 隧道/ 干扰/ 是/ 必须/ 解决/ 的/ 问题/ ./ 本文/ 提出/ 的/ 隧道/ 流/ 标记技术/ 在/ 代价/ 极小/ 的/ 条件/ 下/ 降低/ 了/ 隧道/ 干扰/ 的/ 可能性/ ,/ 同时/ 提出/ 了/ 后移/ 重组/ 技术/ 以/ 减轻/ 多层/ 分片/ 攻击/ 对/ 协议/ 栈/ 的/ 影响/ ,/ 降低/ 利用/ 该/ 方式/ 进行/ 攻击/ 的/ 可能性/ ./ 实验/ 表明/ 隧道/ 流/ 标记/ 对/ 整体/ 性能/ 影响/ 较/ 小/ ,/ 而/ 后移/ 重组/ 有效/ 地/ 降低/ 了/ 多层/ 分片/ 的/ 重组/ 时间/ ,/ 增强/ 了/ 系统/ 的/ 安全性/ ./ 本文/ 中/ 部分/ 内容/ 仍/ 需/ 进一步/ 研究/ ./ 首先/ ,/ 对于/ 隧道/ 流/ 标记/ Hash/ 算法/ 的/ 冲突/ 问题/ ,/ 文中/ 并/ 没有/ 进行/ 理论/ 的/ 分析/ ,/ 对/ Hash/ 安全性/ 也/ 没有/ 给出/ 详细/ 说明/ ,/ 可/ 从/ 文献/ [/ 15/ ]/ 获取/ 深入/ 信息/ ;/ 其次/ ,/ 隧道/ 流/ 标记/ 在/ 实际/ 运用/ 中/ 还/ 需/ 考虑/ 非/ IP/ 包头/ 的/ 标记/ ,/ 以及/ 与/ 上层/ 应用/ 接口/ 等/ 问题/ ;/ 再次/ ,/ 后移/ 重组/ 中/ 假设/ 第一个/ 多层/ 分片/ 足够/ 长/ ,/ 包含/ 所有/ 分片/ 信息/ ,/ 对于/ 第一个/ 分片/ 数据包/ 未/ 包含/ 所有/ 信息/ 的/ 情况/ 没有/ 做出/ 具体/ 的/ 讨论/ ;/ 最后/ ,/ 若/ 隧道/ 环境/ 下/ 存在/ 翻译/ 技术/ ,/ 虽然/ 检测/ 设备/ 可能/ 收到/ 翻译/ 前/ 或/ 翻译/ 后/ 的/ 数据包/ ,/ 但/ 对于/ 每个/ 数据流/ 而言/ ,/ 由于/ 翻译/ 位置/ 固定/ ,/ 每个/ IP/ 包头/ 必然/ 相同/ ,/ 因此/ 理论/ 上不受/ 影响/ ,/ 需要/ 相关/ 实验/ 进一步/ 证实/ ./ 致谢/ 审稿/ 老师/ 给出/ 的/ 评语/ 和/ 修改意见/ 对/ 完善/ 本文/ 起/ 了/ 很大/ 帮助/ ,/ 在/ 此/ 表示感谢/ !/ 

