Page1/ 高性能/ 网包/ 分类/ 理论/ 与/ 算法/ 综述/ 亓亚/ ?/ 1/ )/ ,/ 2/ )/ 李军/ 2/ )/ ,/ 3/ )/ 1/ )/ (/ 清华大学/ 自动化系/ 北京/ 100084/ )/ 2/ )/ (/ 清华大学/ 信息技术/ 研究院/ 北京/ 100084/ )/ 3/ )/ (/ 清华/ 信息科学/ 与/ 技术/ 国家/ 实验室/ (/ 筹/ )/ 北京/ 100084/ )/ 摘要/ 随着/ IP/ 网络/ 架构/ 的/ 不断/ 演进/ 以及/ 网络/ 业务/ 和/ 安全/ 需求/ 的/ 不断/ 增长/ ,/ 高性能/ 网包/ 分类/ 在/ 下一代/ 交换机/ 、/ 路由器/ 、/ 防火墙/ 等/ 网络/ 基础/ 设备/ 中/ 有着/ 越来越/ 广/ 的/ 应用/ ./ 网包/ 分类/ 算法/ 作为/ 高性能/ 网包/ 分类/ 的/ 核心技术/ ,/ 具有/ 重要/ 的/ 研究/ 价值/ 和/ 实践/ 意义/ ./ 文中/ 从/ 理论/ 分析/ 和/ 算法/ 设计/ 两/ 方面/ 介绍/ 了/ 高性能/ 网包/ 分类/ 的/ 最新/ 研究成果/ ./ 在/ 理论/ 分析/ 层面/ ,/ 依据/ 计算/ 几何/ 理论/ 对/ 网包/ 分类/ 问题/ 的/ 数学/ 解法/ 及/ 复杂度/ 进行/ 了/ 归纳/ ,/ 总结/ 了/ 网包/ 分类/ 算法/ 的/ 理论依据/ 及/ 性能/ 评价/ 方法/ ./ 在/ 算法/ 设计/ 层面/ ,/ 对/ 具有/ 影响力/ 的/ 网包/ 分类/ 算法/ 按照/ 不同/ 的/ 研究/ 方向/ 进行/ 了/ 归类/ 和/ 介绍/ ,/ 并/ 结合/ 自身/ 研究成果/ 对/ 不同/ 类别/ 的/ 算法/ 设计/ 思路/ 行/ 了/ 深入分析/ ./ 作者/ 在/ 多/ 核/ 网络/ 处理器/ 平台/ 以及/ FPGA/ 平台/ 上/ 实现/ 了/ 几类/ 具有/ 代表性/ 的/ 网包/ 分类/ 算法/ ,/ 并/ 通过/ 真实/ 的/ 网络流量/ 测试/ 比较/ 了/ 不同/ 类型/ 算法/ 在/ 不同/ 系统/ 平台/ 上/ 的/ 实际/ 性能/ ./ 最后/ ,/ 作者/ 总结/ 并/ 展望/ 了/ 高性能/ 网包/ 分类/ 的/ 下/ 一步/ 发展/ 方向/ ./ 关键词/ 网包/ 分类/ ;/ 计算/ 几何/ ;/ 算法/ ;/ 评测/ ;/ 多核/ ;/ FPGA1/ 引言/ 随着/ 互联网/ 架构/ 的/ 不断/ 演进/ 以及/ 互联网/ 应用/ 的/ 不断涌现/ ,/ 基于/ 单一/ IP地址/ 域/ 的/ 传统/ 路由/ 技术/ 已经/ 不能/ 满足/ 日益增长/ 的/ 网络/ 业务/ 和/ 网络安全/ 需求/ ./ 由于/ 网包/ 分类/ (/ packetclassification/ )/ 能够/ 依据/ 多域/ 网包/ 包头/ (/ packetheader/ )/ 信息/ 对/ 网络流量/ 进行/ 细粒度/ 的/ 分类/ ,/ 该/ 技术/ 已/ 在/ 路由器/ 、/ 安全/ 网关/ 及/ 流量/ 控制系统/ 等/ 各类/ 网络设备/ 中/ 得到/ 了/ 广泛应用/ [/ 1/ -/ 4/ ]/ ./ 与此同时/ ,/ 随着/ 业务/ 感知/ 网络/ 、/ 数据中心/ 网络/ 以及/ 软件/ 定义/ 网络/ 等/ 前沿/ 网络/ 技术/ 的/ 发展/ ,/ 高性能/ 网包/ 分类/ 技术/ 已/ 成为/ 下一代/ 互联网/ 发展/ 和/ 演进/ 中/ 的/ 研究/ 热点/ [/ 5/ -/ 8/ ]/ ./ 图/ 1/ 描述/ 了/ 一个/ 典型/ 的/ 基于/ IPv4/ 五元/ 组/ (/ 5/ -/ tuple/ )/ 的/ 网包/ 分类/ 系统/ ./ 该/ 五元/ 组/ 包括/ 网包/ 包头/ 中/ 的/ 源/ // 目表/ 1/ 网包/ 分类/ 规则/ 示例/ 0/ ~/ 655350/ ~/ 65535/ 规则/ 目标/ IP地址/ r110/ ./ 0.8/ ./ 28/ // 3264.10/ ./ 8.20/ // 32800/ ~/ 65535r210/ ./ 0.8/ ./ 28/ // 320.0/ ./ 0.0/ // 00/ ~/ 65535r310/ ./ 0.0/ ./ 0/ // 16202.11/ ./ 0.15/ // 320/ ~/ 655350/ ~/ 65535r410/ ./ 0.0/ ./ 0/ // 160.0/ ./ 0.0/ // 00/ ~/ 655350/ ~/ 65535r510/ ./ 1.3/ ./ 20/ // 320.0/ ./ 0.0/ // 0r610/ ./ 1.3/ ./ 0/ // 240.0/ ./ 0.0/ // 0r70/ ./ 0.0/ ./ 0/ // 00.0/ ./ 0.0/ // 0/ 高性能/ 网包/ 分类/ 算法/ 作为/ 网包/ 分类/ 设备/ 的/ 核心技术/ ,/ 一直/ 受到/ 学术界/ 和/ 工业界/ 的/ 广泛/ 关注/ ./ 自/ 20/ 世纪/ 90/ 年代/ 以来/ ,/ 网包/ 分类/ 算法/ 的/ 研究成果/ 层出不穷/ ./ 然而/ ,/ 相关/ 研究/ 的/ 总结/ 工作/ 却/ 仅/ 现于/ 21/ 世纪/ 初/ 的/ 若干/ 综述/ 性/ 文章/ [/ 9/ -/ 12/ ]/ ./ 其后/ 近十年/ 间/ 的/ 优秀/ 研究成果/ 则/ 缺乏/ 系统/ 的/ 归纳/ 和/ 分析/ ./ 为了/ 进一步/ 推动/ 高性能/ 网包/ 分类/ 算法/ 的/ 研究/ 和/ 发展/ ,/ 本文/ 从/ 理论/ 分析/ 、/ 算法/ 优化/ 和/ 系统/ 实现/ 3/ 个/ 层面/ ,/ 结合/ 自身/ 的/ 研究成果/ ,/ 对/ 近年来/ 的/ 高性能/ 网包/ 分类/ 算法/ 进行/ 了/ 全面/ 的/ 分析/ 和/ 总结/ ./ 本文/ 主要/ 贡献/ 包括/ :/ (/ 1/ )/ 总结/ 网包/ 分类/ 算法/ 的/ 理论依据/ :/ 理论依据/ 对于/ 高性能/ 网包/ 分类/ 算法/ 的/ 设计/ 具有/ 指导性/ 作用/ ./ 本文/ 依据/ 计算/ 几何/ 理论/ 对/ 网包/ 分类/ 问题/ 的/ 数学/ 解法/ 及/ 复杂度/ 进行/ 了/ 归纳/ ,/ 总结/ 了/ 网包/ 分类/ 算法/ 的/ 理论依据/ 及/ 性能/ 评价/ 方法/ ./ (/ 2/ )/ 归类/ 并/ 分析/ 现有/ 网包/ 分类/ 算法/ :/ 高性能/ 网包/ 分类/ 技术/ 的/ 核心/ 在于/ 软硬件/ 算法/ 的/ 优化/ 设计/ ./ 本文/ 对/ 具有/ 影响力/ 的/ 网包/ 分类/ 算法/ 按照/ 空间/ 分解/ 、/ 规则/ 分组/ 及/ 硬件/ 设计/ 等/ 不同/ 的/ 研究/ 方向/ 进行/ 了/ 归类/ ,/ 并/ 结合/ 自身/ 研究成果/ 对/ 不同/ 类别/ 的/ 算法/ 设计/ 方法/ 进/ 的/ IP地址/ 域/ (/ 各/ 32bit/ )/ 、/ 源/ // 目的/ 传输层/ 端口/ 域/ (/ 各/ 16bit/ )/ 以及/ 传输层/ 协议/ 域/ (/ 8bit/ )/ ./ 网包/ 分类/ 规则/ (/ 如表/ 1/ 例/ )/ 存储/ 于/ 网包/ 分类/ 系统/ 中/ ./ 网包/ 分类/ 引擎/ 根据/ 输入/ 网包/ 的/ 五元/ 组/ 信息/ 与/ 分类/ 规则/ 进行/ 匹配/ ./ 网包/ 分类/ 系统/ 将/ 依据/ 匹配/ 规则/ 的/ 决策/ (/ action/ )/ 对/ 输入/ 网包/ 进行/ 相应/ 的/ 处理/ ,/ 例如/ 接受/ 转发/ (/ ACCEPT/ )/ 、/ 拒绝/ 转发/ (/ DENY/ )/ 、/ 重置/ 连接/ (/ RESET/ )/ 或/ 丢弃/ 网包/ (/ DROP/ )/ ./ 6110/ ~/ 6112UDP11ACCEPT/ 行/ 了/ 深入/ 的/ 比较/ 和/ 分析/ ./ (/ 3/ )/ 测试/ 高性能/ 网包/ 分类/ 算法/ 性能/ :/ 高性能/ 网包/ 分类/ 算法/ 的/ 实际/ 性能/ 需要/ 在/ 真实/ 系统/ 上/ 进行/ 验证/ ./ 本文/ 在/ 多/ 核/ 网络/ 处理器/ 平台/ 以及/ FPGA/ 硬件平台/ 上/ 实现/ 了/ 几类/ 具有/ 代表性/ 的/ 网包/ 分类/ 算法/ ,/ 并/ 通过/ 真实/ 的/ 网络流量/ 测试/ 比较/ 了/ 不同/ 类型/ 算法/ 在/ 不同/ 系统/ 平台/ 上/ 的/ 实际/ 性能/ ./ 实验/ 中/ 所用/ 的/ 测试方法/ 、/ 测试数据/ 以及/ 自行/ 开发/ 的/ 算法/ 源代码/ 将/ 对外/ 公开/ ,/ 以/ 推进/ 高性能/ 网包/ 分类/ 算法/ 及其/ 相关/ 研究/ 的/ 进一步/ 发展/ ./ 本文/ 第/ 2/ 节/ 介绍/ 网包/ 分类/ 算法/ 的/ 理论依据/ 及/ 复杂度/ 分析/ ;/ 第/ 3/ 节/ 归纳/ 和/ 比较/ 近年来/ 主流/ 网包/ 分类/ 算法/ 的/ 优化/ 方法/ ;/ 第/ 4/ 节/ 考察/ 典型/ 网包/ 分类/ 算法/ 实现/ 于/ 不同/ 网络/ 处理/ 平台/ 下/ 的/ 真实性/ 能/ ;/ 第/ 5/ 节/ 总结/ 全文/ ,/ 并/ 展望/ 下/ 一步/ 的/ 研究/ 工作/ ./ 2/ 网包/ 分类/ 算法/ 的/ 理论依据/ 本/ 节/ 首先/ 通过/ 数学/ 定义/ ,/ 将/ 网包/ 分类/ 问题/ 归结为/ 计算/ 几何/ 领域/ 中/ 的/ 点/ 定位问题/ ;/ 然后/ 介绍/ 和/ 分析/ 点/ 定位问题/ 的/ 多类/ 数学/ 解法/ 及其/ 理论/ 复杂度/ ;/ 最后/ ,/ Page3/ 结合/ 真实/ 网包/ 分类/ 规则/ 的/ 统计/ 特性/ 总结/ 网包/ 分类/ 算法/ 性能/ 的/ 评估/ 标准/ ./ 2.1/ 网包/ 分类/ 问题/ 的/ 数学/ 描述/ 网包/ 分类/ 问题/ 本质/ 上/ 是/ 多域/ 空间/ 中/ 的/ 点/ 定位问题/ (/ pointlocationproblem/ )/ [/ 13/ -/ 14/ ]/ ./ 为了/ 便于/ 复杂度/ 分析/ ,/ 首先/ 介绍/ 网包/ 分类/ 问题/ 中/ 3/ 个/ 基本概念/ :/ 网包/ 、/ 搜索/ 空间/ 及/ 分类/ 规则/ :/ 网包/ p/ (/ Packet/ )/ ./ 网包/ p/ 包含/ d/ 个域/ 的/ 网包/ 包头/ ./ 网包/ 包头/ 的/ 各个/ 域/ 分别/ 表示/ 为/ p/ [/ 1/ ]/ ,/ p/ [/ 2/ ]/ ,/ …/ ,/ p/ [/ d/ ]/ ,/ 其中/ 每个/ 域/ 的/ 取值/ 都/ 是/ 特定/ 长度/ 的/ 比特/ 串/ ./ 例如/ 32/ 比特/ 的/ IPv4/ 网络层/ IP地址/ ,/ 16/ 比特/ 的/ 传输层/ 端口号/ 等/ ./ 搜索/ 空间/ S/ (/ SearchSpace/ )/ ./ 网包/ p/ 在/ d/ 维空间/ 所有/ 可能/ 的/ 取值/ 构成/ 搜索/ 空间/ S/ ./ S/ 的/ 各个/ 维度/ 值域/ 不同/ ,/ 对于/ IPv4/ 五元/ 组网/ 包/ 分类/ 问题/ ,/ S/ =/ [/ 0/ ,/ 232/ -/ 1/ ]/ ×/ [/ 0/ ,/ 232/ -/ 1/ ]/ ×/ [/ 0/ ,/ 216/ -/ 1/ ]/ ×/ [/ 0/ ,/ 216/ -/ 1/ ]/ ×/ [/ 0/ ,/ 28/ -/ 1/ ]/ ./ 分类/ 规则/ r/ (/ Rule/ )/ ./ 每个/ 分类/ 规则/ 包含/ 3/ 个/ 部分/ :/ 各域/ 范围/ 表示/ (/ rangeexpression/ )/ r/ [/ 1/ ]/ ,/ r/ [/ 2/ ]/ ,/ …/ ,/ r/ [/ d/ ]/ 、/ 规则/ 优先级/ (/ priority/ )/ r/ ./ pri/ 和/ 规则/ 决策/ (/ action/ )/ r/ ./ act/ ./ 若/ 网包/ p/ 与/ 规则/ r/ 匹配/ (/ match/ )/ ,/ 则/ / 1/ / i/ / d/ ,/ p/ [/ i/ ]/ ∈/ r/ [/ i/ ]/ ./ 对于/ 包含/ n/ 个/ 规则/ 的/ 规则/ 集合/ R/ =/ {/ r1/ ,/ r2/ ,/ …/ ,/ rn/ }/ ,/ p/ 可能/ 与/ 其中/ 多个/ 规则/ 匹配/ ①/ ./ 基于/ 上述/ 定义/ ,/ 分类/ 规则/ r/ 对应/ 于/ 搜索/ 空间/ S/ 中/ 的/ 一个/ 超/ 长方体/ (/ hyper/ -/ rectangle/ )/ ,/ 而/ 网包/ p/ 则/ 对应/ 于/ S/ 中/ 的/ 一个点/ ./ 当/ p/ 落入/ r/ 所/ 表示/ 的/ 超/ 长方体/ 中/ 时/ ,/ p/ 即/ 与/ r/ 匹配/ ./ 为了/ 便于/ 理解/ ,/ 图/ 2/ 给出/ 了/ 一个二维/ (/ d/ =/ 2/ )/ 网包/ 分类/ 问题/ 的/ 示例/ ./ 其中/ 搜索/ 空间/ S/ =/ [/ 0/ ,/ 3/ ]/ X/ ×/ [/ 0/ ,/ 3/ ]/ Y/ ,/ 网包/ p/ 的/ 点/ 坐标/ 为/ (/ p/ [/ x/ ]/ =/ 3/ ,/ p/ [/ y/ ]/ =/ 3/ )/ ,/ 规则/ 集合/ R/ =/ {/ r1/ ,/ r2/ ,/ …/ ,/ r5/ }/ 如表/ 2/ 所示/ ./ 由于/ p/ 落入/ r4/ 和/ r5/ 对应/ 的/ 矩形/ (/ 2/ 维超/ 长方体/ )/ 中/ ,/ 因此/ p/ 与/ r4/ 和/ r5/ 匹配/ ./ 若/ 考虑/ 匹配/ 优先级/ ,/ 则/ 由于/ r4/ 的/ 优先级/ 高于/ r5/ ,/ 网包/ 分类/ 系统/ 执行/ r4/ ./ act/ (/ DENY/ )/ ./ 规则/ X/ 域/ Y/ 域/ 优先级/ 决策/ r1/ [/ 00/ ,/ 01/ ]/ [/ 00/ ,/ 00/ ]/ 1DENYr2/ [/ 00/ ,/ 01/ ]/ [/ 00/ ,/ 11/ ]/ 2ACCEPTr3/ [/ 10/ ,/ 10/ ]/ [/ 00/ ,/ 11/ ]/ 3ACCEPTr4/ [/ 11/ ,/ 11/ ]/ [/ 11/ ,/ 11/ ]/ 4DENYr5/ [/ 11/ ,/ 11/ ]/ [/ 00/ ,/ 11/ ]/ 5ACCEPT2/ ./ 2/ 网包/ 分类/ 问题/ 的/ 数学/ 解法/ 对于/ 空间/ 点/ 定位问题/ ,/ 线性/ 查找/ (/ linearsearch/ )/ 是/ 最/ 简单/ 的/ 解法/ ./ 通过/ 将/ 输入/ 网包/ p/ 与/ 所有/ 规则/ 逐一/ 匹配/ ,/ 即可/ 得到/ 所有/ 匹配/ 规则/ ./ 对于/ d/ 维空间/ 的/ n/ 个/ 规则/ ,/ 线性/ 查找/ 的/ 时间/ 复杂度/ 为/ Θ/ (/ d/ ×/ n/ )/ ,/ 空间/ 复杂度/ 为/ Θ/ (/ n/ )/ ./ 由于/ 查找时间/ 随/ 规则/ 增加/ 而/ 呈/ 线性/ 增长/ ,/ 线性/ 查找/ 仅/ 适用/ 于/ 小规模/ 的/ 规则/ 集合/ ./ 在/ 计算/ 几何/ 领域/ ,/ 多域/ 空间/ 点/ 定位问题/ 存在/ 多种/ 数学/ 解法/ ./ 每种/ 解法/ 具有/ 不同/ 的/ 时间/ 和/ 空间/ 复杂度/ ,/ 下面/ 将/ 分别/ 进行/ 介绍/ ./ 2.2/ ./ 1/ 规则/ 投影/ 区间/ 查找/ 算法/ 规则/ 投影/ 区间/ 查找/ 算法/ (/ 下文/ 简称/ 区间/ 查找/ 算法/ )/ 源自/ Overmars/ 等/ 人/ 提出/ 的/ 高维/ 区域/ 树/ (/ Hierar/ -/ chicalsegmentTree/ ,/ 本文/ 简称/ 为/ H/ -/ Tree/ )/ 算法/ [/ 13/ -/ 14/ ]/ ./ 算法/ 1/ ./ H/ -/ Tree/ 算法/ ./ 当/ d/ =/ 1/ 时/ ,/ 由于/ n/ 个/ 规则/ 的/ 端点/ (/ endpoint/ )/ 在/ 一/ 维空间/ 中/ 最/ 多/ 构成/ 2n/ +/ 1/ 个/ 连续/ 区间/ (/ segment/ )/ ,/ 因此/ 可以/ 构建/ 一个/ 空间/ 复杂度/ 为/ Θ/ (/ n/ )/ 的/ 平衡/ 二分/ 查找/ 树/ (/ balancedbinarysearchtree/ )/ 来/ 进行/ 查找/ ,/ 查找时间/ 为/ Θ/ (/ logn/ )/ ./ 当/ d/ >/ 1/ 时/ ,/ 首先/ 依据/ 规则/ 集合/ 在/ 第/ d/ 维/ 的/ 投影/ 区间/ 构造/ 平衡/ 二分/ 查找/ 树/ Td/ ./ 树/ 的/ 每/ 一个/ 节点/ v/ 对应/ 一个/ 区间/ Iv/ ,/ 其中/ Iv/ 表示/ v/ 的/ 所有/ 子/ 节点/ 构成/ 的/ 连续/ 区间/ ./ 对于/ 满足/ (/ 1/ )/ 在/ d/ 维上/ 的/ 投影/ 区间/ 完全/ 包含/ Iv/ ;/ (/ 2/ )/ 在/ d/ 维上/ 的/ 投影/ 区间/ 不/ 完全/ 包含/ v/ 的/ 父/ 节点/ v/ 对应/ 的/ 区间/ Iv/ ;/ 的/ 规则/ 子集/ Rv/ ,/ 用/ 同样/ 的/ 方式/ 在/ 另外/ d/ -/ 1/ 个/ 维度/ 上/ 依次/ 构造/ 平衡/ 二分/ 查找/ 树/ Tv/ ,/ d/ -/ 1/ ,/ 直到/ 最后/ 一个/ 维度/ 即可/ ./ H/ -/ Tree/ 算法/ 结合/ Chazelle/ 等/ 人/ [/ 15/ ]/ 提出/ 的/ 分散/ 叠层/ (/ fractionalcascading/ )/ 技术/ ,/ 能够/ 以/ Θ/ (/ logd/ -/ 1n/ )/ 的/ 时间/ 复杂度/ 和/ Θ/ (/ n/ ×/ logd/ -/ 1n/ )/ 的/ 空间/ 复杂度/ 解决/ 点/ 定位问题/ [/ 13/ ]/ ./ 虽然/ H/ -/ Tree/ 具有/ 良好/ 的/ 空间/ 复杂度/ ,/ 但/ 时间/ 复杂度/ 依然/ 过高/ (/ 优于/ 线性/ 查找/ 算法/ )/ ./ 下面/ 介绍/ 降低/ 时间/ 复杂度/ 的/ Set/ -/ pruningSegmentTree/ (/ 本文/ 简称/ 为/ S/ -/ Tree/ )/ 算法/ [/ 16/ -/ 17/ ]/ ./ ①/ 对于/ 防火墙/ 等/ 应用/ ,/ 通常/ 执行/ 匹配/ 规则/ 中/ 优先级/ 最高/ 的/ 那/ Page4/ 算法/ 2/ ./ S/ -/ Tree/ 算法/ ./ 当/ d/ =/ 1/ 时/ ,/ S/ -/ Tree/ 和/ H/ -/ Tree/ 算法/ 相同/ ./ 由于/ n/ 个/ 规则/ 的/ 端点/ (/ endpoint/ )/ 在/ 一/ 维空间/ 中/ 最/ 多/ 构成/ 2n/ +/ 1/ 个/ 连续/ 区间/ ,/ 因此/ 可以/ 构建/ 一个/ 空间/ 复杂度/ 为/ Θ/ (/ n/ )/ 的/ 平衡/ 二分/ 查找/ 树来/ 进行/ 查找/ ,/ 查找时间/ 为/ Θ/ (/ logn/ )/ ./ 当/ d/ >/ 1/ 时/ ,/ S/ -/ Tree/ 采用/ 规则/ 复制/ 的/ 方法/ 避免/ 回溯/ 查找/ ./ 首先/ 依据/ 规则/ 集合/ 在/ 第/ d/ 维/ 的/ 投影/ 区间/ 构造/ 平衡/ 二分/ 查找/ 树/ Td/ ./ Td/ 的/ 每/ 一个/ 叶/ 节点/ v/ 对应/ 一个/ 区间/ Iv/ ,/ 其中/ Iv/ 不/ 包含/ 任何/ 子/ 区间/ ./ 对于/ 规则/ 子集/ Rv/ =/ {/ ri/ |/ ri/ ∩/ Iv/ ≠/ / ,/ 1/ / i/ / n/ }/ ,/ 依次/ 为/ 其/ 构造/ 子树/ Tv/ ,/ d/ -/ 1/ 即可/ ./ 与/ H/ -/ Tree/ 相比/ ,/ S/ -/ Tree/ 的/ 时间/ 复杂度/ 降低/ 到/ 了/ Θ/ (/ d/ ×/ logn/ )/ ,/ 但/ 依据/ 定理/ 1/ ,/ S/ -/ Tree/ 的/ 空间/ 复杂度/ 将/ 增至/ Θ/ (/ nd/ )/ ./ 定理/ 1/ ./ d/ 域/ 空间/ 中/ 的/ n/ 个/ 规则/ 至多/ 可/ 构成/ (/ 2n/ +/ 1/ )/ d/ 个/ 相互/ 不/ 重叠/ 的/ 超/ 长方体/ ./ 证明/ ./ 首先/ 证明/ d/ =/ 1/ 时/ 命题/ 成立/ ./ 一/ 维空间/ 中/ 的/ 规则/ 退化/ 为/ 线段/ ,/ 即/ 数轴/ 上/ 的/ 一个/ 区间/ ./ 当/ n/ =/ 1/ 时/ ,/ 一个/ 规则/ 构成/ 一个/ 区间/ ,/ 命题/ 成立/ ./ 假设/ k/ (/ k/ / 1/ )/ 个/ 规则/ 可/ 构成/ 2k/ +/ 1/ 个/ 相互/ 不/ 重叠/ 的/ 区间/ ./ 那么/ 当/ n/ =/ k/ +/ 1/ 时/ ,/ 第/ k/ +/ 1/ 个/ 规则/ 的/ 两个/ 端点/ 最/ 多/ 落入/ 2k/ +/ 1/ 个/ 不/ 重叠/ 的/ 区间/ 中/ 的/ 两个/ 不同/ 的/ 区间/ 中/ ,/ 并/ 将/ 这/ 两个/ 区间/ 划分/ 为/ 四个/ 区间/ ,/ 因此/ 最/ 多/ 增加/ 两个/ 不/ 重叠/ 区间/ ./ 又/ 由/ 2k/ +/ 1/ +/ 2/ =/ 2/ (/ k/ +/ 1/ )/ +/ 1/ ,/ 所以/ 命题/ 对于/ n/ =/ k/ +/ 1/ 亦/ 成立/ ,/ 即/ 一维/ 情况/ 下/ 命题/ 成立/ ./ 多域/ 情况/ 下/ ,/ 即当/ d/ >/ 1/ 时/ ,/ 由于/ 每个/ 域/ 上/ 最/ 多/ 有/ 2n/ +/ 1/ 个/ 不/ 重叠/ 区间/ ,/ 经过/ 交叉/ 相乘/ ,/ d/ 个域/ 上/ 最/ 多/ 出现/ (/ 2n/ +/ 1/ )/ d/ 个/ 不/ 重叠/ 的/ 超/ 立方体/ ,/ 由此/ 命题/ 得证/ ./ 2.2/ ./ 2/ 网包/ 搜索/ 空间/ 分解/ 算法/ 与/ 区间/ 查找/ 算法/ 不同/ ,/ 网包/ 搜索/ 空间/ 分解/ 算法/ (/ 下文/ 简称/ 空间/ 分解/ 算法/ )/ 通过/ 对/ 空间/ 的/ 均匀/ 切分/ 构建/ 网包/ 分类/ 的/ 数据结构/ ./ 空间/ 分解/ 算法/ 源于/ 路由/ 查找/ 算法/ ,/ 通常/ 使用/ trie/ 结构/ 对/ 空间/ 进行/ 逐级/ 等/ 分/ ./ 这里/ 首先/ 讨论/ 规则/ 均/ 为/ 最长/ 前缀/ 匹配/ 的/ 情况/ ,/ 后面/ 会/ 讨论/ 一般/ 情况/ ./ 下面/ 首先/ 介绍/ 基于/ HierarchicalTrie/ (/ 本文/ 简称/ H/ -/ Trie/ )/ 的/ 空间/ 分解/ 算法/ [/ 13/ ]/ ./ 算法/ 3/ ./ H/ -/ Trie/ 算法/ ./ 当/ d/ =/ 1/ 时/ ,/ 构建/ 一个/ W/ 深度/ 的/ trie/ 结构/ ,/ 每/ 一个/ 规则/ 均/ 存储/ 于/ tire/ 的/ 一个/ 节点/ 上/ ,/ 此/ trie/ 结构/ 空间/ 复杂度/ 为/ Θ/ (/ n/ ×/ W/ )/ ,/ 时间/ 复杂度/ 为/ Θ/ (/ W/ )/ ./ 当/ d/ >/ 1/ 时/ ,/ 首先/ 用/ {/ r1/ [/ d/ ]/ ,/ r2/ [/ d/ ]/ ,/ …/ ,/ rn/ [/ d/ ]/ }/ 构造/ trie/ 结构/ Td/ ./ 然后/ 为/ 每/ 一个/ 不同/ 的/ 前缀/ Pi/ (/ Td/ 中/ 不同/ 的/ 节点/ )/ 所/ 对应/ 的/ 规则/ 子集/ Ri/ 构建/ d/ -/ 1/ 维度/ 上/ trie/ 结构/ Ti/ ,/ d/ -/ 1/ ./ 依次/ 类推/ ,/ 直到/ 第一个/ 维度/ 即可/ ./ H/ -/ Trie/ 在/ 搜索/ 过程/ 中/ 需要/ 回溯/ 查找/ (/ backtrackingsearch/ )/ ,/ 因此/ 时间/ 复杂度/ 为/ Θ/ (/ Wd/ )/ ./ 由于/ H/ -/ Trie/ 中/ 规则/ 集合/ 只/ 存储/ 一次/ ,/ 因此/ 算法/ 的/ 空间/ 复杂度/ 为/ Θ/ (/ n/ ×/ W/ )/ ./ 注意/ ,/ 此时/ 的/ 空间/ 复杂度/ 只/ 对应/ 前缀/ 匹配/ 的/ 规则/ ,/ 而/ 本文/ 讨论/ 的/ 网包/ 分类/ 问题/ 是/ 基于/ 范围/ 匹配/ 的/ ,/ 因此/ 这里/ 讨论/ 范围/ 到/ 前缀/ 转换/ 问题/ (/ range/ -/ to/ -/ prefix/ )/ ./ 首先/ 给出/ 定理/ 2/ ./ 多/ 2/ (/ W/ -/ 1/ )/ 个/ 前缀/ 表示/ [/ 18/ ]/ ./ 定理/ 2/ ./ 一个/ [/ 0/ ,/ 2W/ ]/ 区间/ 中/ 的/ 范围/ 可以/ 用/ 至/ 证明/ ./ 给出/ 存在/ 性/ 证明/ ./ 首先/ 考虑/ 当/ 范围/ 为/ [/ 0/ ,/ b/ ]/ 时/ 至多/ 需要/ 多少/ 个/ 前缀/ 表示/ ./ 当/ 范围/ 为/ [/ 0/ ,/ b/ ]/ ,/ 其中/ 2W/ -/ 1/ </ b/ / 2W/ -/ 1/ 时/ ,/ 首先/ 记录/ 表示/ 区间/ [/ 0/ ,/ 2W/ -/ 1/ )/ 的/ 前缀/ P0/ ,/ 然后/ 将/ 区间/ [/ 2W/ -/ 1/ ,/ 2W/ ]/ 等/ 分/ ,/ 生成/ 两个/ 新/ 区间/ [/ 2W/ -/ 1/ ,/ 2W/ -/ 1/ +/ 2W/ -/ 2/ )/ 和/ [/ 2W/ -/ 1/ +/ 2W/ -/ 2/ ,/ 2W/ ]/ ,/ 则/ b/ 必然/ 落入/ 两个/ 区间/ 中/ 的/ 一个/ ,/ 如果/ 2W/ -/ 1/ +/ 2W/ -/ 2/ </ b/ / 2W/ ,/ 则/ 记录/ 表示/ 区间/ [/ 2W/ -/ 1/ ,/ 2W/ -/ 1/ +/ 2W/ -/ 2/ )/ 的/ 前缀/ P1/ ;/ 依次/ 不断/ 等/ 分/ b/ 所在/ 子/ 区间/ ,/ 并/ 当/ b/ 落入/ 右半/ 区间/ 时/ 记录/ 左半/ 区间/ 的/ 前缀/ Pi/ ;/ 经过/ 至多/ W/ -/ 1/ 次/ 等/ 分/ ,/ 区间/ [/ 2W/ -/ 1/ ,/ 2W/ ]/ 将/ 不可/ 再/ 分/ ,/ 由于/ 整个/ 过程/ 中/ 最/ 多/ 记录/ 下/ W/ 个/ 前缀/ (/ W/ -/ 1/ 次/ 等/ 分/ 得到/ 的/ 前缀/ 和/ P0/ )/ ,/ 而/ 这些/ 前缀/ 恰好/ 可以/ 表达/ 范围/ [/ 0/ ,/ b/ ]/ ./ 因此/ ,/ 范围/ [/ 0/ ,/ b/ ]/ 需要/ 至多/ W/ 个/ 前缀/ 表示/ ./ 再/ 考虑/ [/ 0/ ,/ 2W/ ]/ 空间/ 中/ 的/ 范围/ [/ a/ ,/ b/ ]/ ,/ 通过/ 将/ [/ 0/ ,/ 2W/ ]/ 二等/ 分/ ,/ 范围/ [/ a/ ,/ b/ ]/ 最多/ 被/ 分为/ 两个/ 范围/ ,/ 并且/ 这样/ 的/ 两个/ 范围/ 通过/ 平移/ 和/ 镜像/ ,/ 都/ 可以/ 等价/ 的/ 转化/ 为/ [/ 0/ ,/ 2W/ -/ 1/ ]/ 空间/ 中以/ 0/ 为/ 起点/ 的/ 范围/ ./ 根据/ 上面/ 的/ 证明/ ,/ 这/ 两个/ 范围/ 都/ 可以/ 用/ 至多/ W/ -/ 1/ 个/ 前缀/ 表示/ ,/ 因此/ 范围/ [/ a/ ,/ b/ ]/ 可用/ 至多/ 2/ (/ W/ -/ 1/ )/ 个/ 范围/ 表示/ ./ 根据/ 定理/ 2/ 可知/ ,/ 一个/ 范围/ 匹配/ 的/ 规则/ 在/ d/ 个域/ 上/ 最/ 多/ 可以/ 转换/ 为/ (/ 2/ (/ W/ -/ 1/ )/ )/ d/ 个/ 前缀/ 匹配/ 的/ 规则/ ./ 因此/ ,/ 对于/ 范围/ 匹配/ ,/ H/ -/ Trie/ 的/ 空间/ 复杂度/ 为/ Θ/ (/ n/ ×/ Wd/ )/ ./ 当/ d/ >/ 1/ 时/ ,/ 最后/ 两个/ 维度/ 的/ 查找/ 可以/ 使用/ Srinivasan/ 等/ 人/ [/ 18/ ]/ 提出/ 的/ Grid/ -/ of/ -/ Trie/ 结构/ 进一步/ 减少/ 查找时间/ ./ 此时/ H/ -/ Trie/ 的/ 时间/ 和/ 空间/ 复杂度/ 可以/ 改进/ 为/ Θ/ (/ Wd/ -/ 1/ )/ 及/ Θ/ (/ n/ ×/ Wd/ -/ 1/ )/ ./ 由于/ H/ -/ Trie/ 的/ 时间/ 复杂/ 度过/ 高/ ,/ 可/ 使用/ Set/ -/ pruningTrie/ (/ 本文/ 简称/ S/ -/ Trie/ )/ 算法/ ,/ 通过/ 规则/ 复制/ 来/ 降低/ 时间/ 复杂度/ [/ 9/ ]/ ./ Page5/ 算法/ 4/ ./ S/ -/ Trie/ 算法/ ./ 当/ d/ =/ 1/ 时/ ,/ S/ -/ Trie/ 算法/ 与/ H/ -/ Trie/ 相同/ ./ 构建/ 一个/ W/ 深度/ 的/ trie/ 结构/ ,/ 每/ 一个/ 规则/ 均/ 存储/ 于/ tire/ 的/ 一个/ 节点/ 上/ ,/ 此/ trie/ 结构/ 空间/ 复杂度/ 为/ Θ/ (/ n/ ×/ W/ )/ ,/ 时间/ 复杂度/ 为/ Θ/ (/ W/ )/ ./ 当/ d/ >/ 1/ 时/ ,/ 首先/ 对/ {/ r1/ [/ d/ ]/ ,/ r2/ [/ d/ ]/ ,/ …/ ,/ rn/ [/ d/ ]/ }/ 构造/ trie/ 结构/ Td/ ./ 然后/ 对于/ 每/ 一个/ 叶/ 节点/ v/ ,/ 将/ 包含/ v/ 代表/ 的/ 前缀/ Pv/ 的/ 所有/ 规则/ 子集/ Rv/ 构建/ d/ -/ 1/ 维度/ 上/ trie/ 结构/ Tv/ ,/ d/ -/ 1/ ./ 依次/ 类推/ ,/ 直到/ 第一个/ 维度/ 即可/ ./ 由于/ S/ -/ Trie/ 的/ 查找/ 过程/ 不/ 需要/ 回溯/ ,/ 因此/ 时间/ 复杂度/ 为/ Θ/ (/ d/ ×/ W/ )/ ,/ 空间/ 复杂度/ 为/ Θ/ (/ nd/ ×/ dW/ )/ ./ 由此可见/ ,/ H/ -/ Trie/ 和/ S/ -/ Trie/ 分别/ 是/ 对/ 空间/ 和/ 时间/ 性能/ 的/ 折中/ ,/ 但/ 两者/ 的/ 时间/ 性能/ 在/ n/ 较大/ 时均/ 优于/ 线性/ 查找/ 算法/ ./ 2.2/ ./ 3/ 数学/ 解法/ 总结/ 多域/ 点/ 定位问题/ 的/ 各类/ 数学/ 解法/ 总结/ 于表/ 3/ ./ 这些/ 数学/ 解法/ 为/ 网包/ 分类/ 算法/ 设计/ 提供/ 了/ 理论依据/ ./ 从/ 该表/ 可知/ ,/ 允许/ 回溯/ 查找/ 的/ 算法/ 具有/ 较/ 好/ 的/ 空间/ 特性/ ,/ 而/ 允许/ 规则/ 复制/ 的/ 算法/ 则/ 具有/ 较/ 快/ 的/ 查找/ 速率/ ./ 由于/ 查找/ 速率/ 决定/ 网包/ 分类/ 系统/ 的/ 吞吐/ 率/ ,/ 因此/ 典型/ 的/ 网包/ 分类/ 算法/ 大多/ 采用/ 了/ 允许/ 规则/ 复制/ 的/ 方法/ ./ 关于/ 查找/ 的/ 策略/ ,/ 区间/ 查找/ 算法/ 和/ 空间/ 分解/ 算法/ 均/ 有/ 各自/ 的/ 优势/ ,/ 并/ 广泛/ 用于/ 不同/ 的/ 网包/ 分类/ 算法/ ./ 空间/ 分解/ 算法/ 虽然/ 不/ 需要/ 存储/ 规则/ 投影/ 点/ ,/ 并/ 可/ 利用/ 多/ 比特/ trie/ 进一步/ 加快/ 查找/ 速率/ ,/ 但是/ 需要/ 考虑/ 范围/ 到/ 前缀/ 匹配/ ,/ 因此/ 最坏/ 情况/ 下/ 存储空间/ 为/ 投影/ 区间/ 二分法/ 的/ Θ/ (/ Wd/ )/ 倍/ (/ 参见/ 定理/ 2/ )/ ./ 关于/ 网包/ 分类/ 算法/ 时间/ 和/ 空间/ 性能/ 折中/ 的/ 进一步/ 分析/ 可以/ 参阅/ 文献/ [/ 19/ ]/ ./ 维度/ 复杂度/ d/ =/ 1/ 时间/ Θ/ (/ W/ )/ Θ/ (/ logn/ )/ Θ/ (/ W/ )/ Θ/ (/ logn/ )/ 空间/ Θ/ (/ n/ ×/ W/ )/ Θ/ (/ n/ ×/ logn/ )/ Θ/ (/ n/ ×/ W/ )/ Θ/ (/ n/ ×/ logn/ )/ d/ >/ 1/ 时间/ Θ/ (/ Wd/ -/ 1/ )/ Θ/ (/ logd/ -/ 1n/ )/ Θ/ (/ d/ ×/ W/ )/ Θ/ (/ d/ ×/ logn/ )/ 空间/ Θ/ (/ n/ ×/ Wd/ -/ 1/ )/ Θ/ (/ n/ ×/ logd/ -/ 1n/ )/ Θ/ (/ nd/ ×/ dW/ )/ Θ/ (/ nd/ ×/ dlogn/ )/ 2.3/ 网包/ 分类/ 算法/ 的/ 评价/ 方法/ 由/ 上述/ 算法/ 分析/ 可知/ ,/ 网包/ 分类/ 问题/ 的/ 各类/ 数学/ 解法/ 均/ 具有/ 较/ 高/ 的/ 时间/ 或/ 空间/ 复杂度/ ,/ 即/ 在/ 最坏/ 情况/ 下/ 无法/ 同时/ 满足/ 查找/ 速率/ 和/ 存储空间/ 的/ 两/ 方面/ 要求/ ./ 幸运/ 的/ 是/ ,/ 在/ 实际/ 的/ 网络应用/ 中网/ 包/ 分类/ 问题/ 往往/ 不会/ 达到/ 理论/ 上/ 的/ 最坏/ 情况/ [/ 20/ ]/ ./ 当前/ 的/ 网包/ 分类/ 算法/ 设计/ 大多/ 通过/ 引入/ 规则/ 集合/ 的/ 特征/ 来/ 提高/ 分类/ 速率/ 、/ 降低/ 内存/ 使用/ ./ Gupta/ 等/ 人/ [/ 20/ ]/ 通过/ 对/ 大量/ 实际/ 的/ (/ real/ -/ life/ )/ 规则/ 集合/ 的/ 研究/ ,/ 总结/ 并/ 归纳/ 出/ 一系列/ 规则/ 集合/ 特征/ :/ (/ 1/ )/ 实际/ 规则/ 集合/ 中/ 规则/ 数目/ 不会/ 太/ 多/ ,/ 一般/ 从/ 几十条/ 规则/ 到/ 数千条/ 规则/ ./ 规则/ 数目/ 不/ 多/ 可能/ 是/ 由于/ 网络应用/ 本身/ 规模/ 的/ 限制/ ,/ 也/ 可能/ 是/ 基于/ 当前/ 路由器/ 处理/ 能力/ 的/ 考虑/ ./ (/ 2/ )/ 规则/ 在/ 协议/ 域/ 通常/ 只有/ 很少/ 的/ 几个/ 取值/ ./ 绝大多数/ 规则/ 集合/ 中/ 只/ 出现/ TCP/ 和/ UDP/ 两种/ 传输层/ 协议/ ./ 个别/ 规则/ 集合/ 中/ 可能/ 涉及/ ICMP/ 、/ IGMP/ 和/ GRE/ 等/ 协议/ ./ (/ 3/ )/ 传输层/ 端口号/ 域/ 取值/ 范围/ 很广/ ,/ 采用/ 范围/ 前缀/ 转换/ 很/ 可能/ 是/ 非常/ 低效/ 的/ ./ (/ 4/ )/ 与/ 同一个/ 网包/ 匹配/ 的/ 规则/ 通常/ 少于/ 5/ 个/ ,/ 最/ 多/ 出现/ 过/ 10/ 个/ ①/ ./ 上/ 具有/ 相同/ 的/ 设置/ ./ (/ 5/ )/ 同一/ 规则/ 集合/ 中/ 的/ 多个/ 规则/ 往往/ 在/ 某些/ 域/ (/ 6/ )/ 规则/ 集合/ 中/ 所有/ 规则/ 在/ 单一/ 域/ 的/ 不同/ 取值/ 的/ 个数/ 通常/ 远/ 小于/ 规则/ 个数/ ./ (/ 7/ )/ 规则/ 集合/ 出现/ 的/ 重叠/ 个数/ 远远/ 小于/ 理论/ 上界/ ./ 另外/ ,/ 对于/ 不同/ 应用/ 下/ 的/ 规则/ 集合/ ,/ 也/ 会/ 出现/ 各自/ 不同/ 的/ 统计/ 特性/ ./ 例如/ 在/ WUSTL/ (/ 华盛顿大学/ 圣路易斯/ 分校/ )/ 公开/ 数据/ 集中/ ,/ 核心/ 路由器/ 上/ 的/ 访问控制/ 规则/ (/ ACL/ )/ 、/ 防火墙/ 的/ 安全策略/ (/ FW/ )/ 以及/ Linux/ 网关/ 的/ iptables/ 规则/ (/ IPC/ )/ 就/ 有/ 相当/ 大/ 的/ 差异/ [/ 21/ ]/ ./ Qi/ 等/ 人/ [/ 17/ ]/ 通过/ 统计/ 这些/ 规则/ 集合/ 中/ 各个/ 维度/ 上/ 的/ 投影/ 区间/ 个数/ 说明/ 了/ 网包/ 分类/ 问题/ 的/ 实际/ 复杂性/ ./ 从表/ 4/ 中/ 的/ 统计/ 结果/ 可以/ 看出/ :/ (/ 1/ )/ 同一/ 类型/ 规则/ 集合/ 在/ 不同/ 维度/ 上/ 的/ 统计/ 特性/ 不同/ ./ 复杂度/ ./ (/ 2/ )/ 不同/ 种类/ 的/ 规则/ 集合/ 的/ 统计/ 特性/ 不同/ ./ (/ 3/ )/ 所有/ 规则/ 集合/ 的/ 实际/ 复杂度/ 均/ 远/ 小于/ 理论/ 解决/ 多域/ 网包/ 分类/ 问题/ 需要/ 设计/ 高效/ 的/ 分类/ 算法/ ./ 一般来说/ ,/ 评价/ 一个/ 算法/ 的/ 好坏/ ,/ 需要/ 从/ 3/ 个/ 方面/ 进行/ 综合/ 考虑/ :/ (/ 1/ )/ 分类/ 速率/ ./ 网包/ 分类/ 系统/ 通常/ 需要/ 满足/ 线速/ (/ wire/ -/ speed/ )/ 处理速度/ ./ 对于/ 实际/ 的/ 网包/ 分类/ 系统/ ,/ 通常/ 使用/ 系统/ 吞吐/ 率/ (/ throughput/ )/ 来/ 评价/ 分类/ 速率/ ./ 例如/ 要/ 满足/ 100Gbps/ 的/ 网络带宽/ ,/ 网包/ 分类/ 系统/ 需要/ 每秒钟/ 处理/ 150M/ 个/ 64/ 字节/ 的/ 网包/ ./ 在/ 算/ ①/ 此处/ 结论/ 结合/ 本文/ 实验/ 进行/ 了/ 部分/ 修正/ ./ Gupta/ 等/ 人/ 在/ 文/ Page6/ 表/ 4/ 网包/ 分类/ 规则/ 复杂性/ 比较/ 目标/ 端口/ 域/ 非/ 重叠/ 区间/ 实际/ 值/ 规则/ 集/ / 规则/ 数各域/ 非/ 重叠/ 区/ FW1/ -/ 10092185FW1/ -/ 1K7911583FW1/ -/ 10K93111862313901ACL1/ -/ 10098197ACL1/ -/ 1K9161833ACL1/ -/ 10K960319207IPC1/ -/ 10099199IPC1/ -/ 1K9381877IPC1/ -/ 10K903718075/ 注/ :/ / ACL1/ 、/ FW1/ 、/ IPC1/ 分别/ 为/ 3/ 类/ 不同/ 的/ 规则/ 集合/ ,/ ACL1/ -/ 1K/ 表示/ 包含/ 约/ 1000/ 条/ 规则/ 的/ ACL/ 规则/ 集合/ [/ 21/ ]/ ./ 法/ 分类/ 速率/ 的/ 评价/ 中/ ,/ 考虑/ 到/ 处理单元/ (/ CPU/ )/ 的/ 计算速度/ 比/ 外围/ 存储设备/ (/ DRAM/ )/ 的/ 访问速度/ 快得多/ ,/ 因此/ 当/ 计算/ 量/ 大小/ 在/ 可/ 接受/ 的/ 范围/ 内时/ ,/ 通常/ 使用/ 内存/ 访问/ 次数/ (/ memoryaccesstimes/ )/ 来/ 评价/ 一个/ 算法/ 的/ 分类/ 速率/ ./ (/ 2/ )/ 内存/ 使用/ ./ 网包/ 分类/ 算法/ 的/ 内存/ 使用/ 不仅仅/ 指/ 存放/ 规则/ 集合/ 本身/ 所/ 占用/ 的/ 存储空间/ ,/ 还/ 包括/ 算法/ 建立/ 的/ 用于/ 查找/ 的/ 数据结构/ 存储空间/ ./ 考虑/ 到/ 网包/ 分类/ 系统/ 的/ 内存空间/ 有限/ ,/ 网包/ 分类/ 算法/ 应/ 尽可能/ 压缩/ 其/ 数据结构/ 以/ 支持/ 更/ 多/ 的/ 分类/ 规则/ ./ 另外/ ,/ 有时候/ 还/ 必须/ 考虑/ 算法/ 预处理/ 过程/ 中/ 的/ 内存/ 使用/ ./ 例如/ 在/ 递归/ 生成/ 多级/ trie/ 的/ 数据结构/ 过程/ 中/ ,/ 有时/ 需要/ 大型/ 的/ 堆栈/ 支持/ ./ 如果/ 系统/ 无法/ 满足/ 此/ 内存/ 需求/ ,/ 那么/ 即使/ 最终/ 数据结构/ 较/ 小/ 也/ 无法/ 实现/ ./ (/ 3/ )/ 预处理/ 时间/ ./ 由于/ 网包/ 分类/ 规则/ 并非/ 固定/ 不变/ ,/ 网包/ 分类/ 算法/ 需要/ 依据/ 规则/ 更新/ 生成/ 新/ 的/ 数据结构/ ./ 本文/ 讨论/ 的/ 算法/ 的/ 预处理/ 时间/ 指/ 依据/ 新/ 的/ 规则/ 集合/ 重新/ 生成/ 网包/ 分类/ 数据结构/ 的/ 全部/ 时间/ ./ 从/ 算法/ 设计/ 的/ 角度/ 来看/ ,/ 目前/ 的/ 大多数/ 算法/ 都/ 比较/ 重视/ 分类/ 速率/ 和/ 内存/ 使用/ 两/ 方面/ 的/ 性能/ ,/ 与/ 之/ 对应/ 的/ 是/ 算法/ 的/ 时间/ 性能/ 和/ 空间/ 性能/ ./ 两个/ 因素/ 在/ 算法/ 设计/ 中/ 往往/ 互相制约/ ,/ 通常/ 在/ 满足/ 某一方面/ 性能/ 的/ 情况/ 下/ ,/ 尽可能/ 优化/ 另一方面/ 的/ 性能/ ./ 从/ 算法/ 实现/ 的/ 角度/ 来看/ ,/ 网包/ 分类/ 算法/ 必须/ 要/ 兼顾/ 多种/ 系统/ 平台/ 的/ 硬件/ 约束/ ,/ 能够/ 自/ 适应/ 部署/ 于/ 各类/ 平台/ 并/ 最大/ 程度/ 利用/ 系统资源/ 以/ 满足/ 网包/ 分类/ 设备/ 的/ 性能需求/ ./ 因此/ ,/ 对于/ 一个/ 出色/ 的/ 网包/ 分类/ 算法/ 其/ 性能/ 并/ 不仅仅/ 体现/ 在/ 理论/ 分析/ 中/ ,/ 还/ 必须/ 考虑/ 到/ 算法/ 实现/ 、/ 运行/ 环境/ 、/ 软硬件/ 平台/ 和/ 特殊/ 需求/ 等/ 多种/ 问题/ ./ 只有/ 这样/ 的/ 算法/ 才/ 真正/ 具有/ 研究/ 意义/ 和/ 现实/ 的/ 价值/ ./ 2.4/ 小结/ 本/ 节/ 总结/ 了/ 网包/ 分类/ 算法/ 的/ 理论依据/ ,/ 并/ 结合实际/ 规则/ 分析/ 给出/ 了/ 算法/ 评价/ 的/ 常用/ 方法/ ./ 从/ 计算/ 48757770165181267894/ 几何/ 中/ 的/ 复杂度/ 分析表明/ ,/ 不/ 存在/ 某种/ 通用/ 的/ 算法/ 适用/ 于/ 所有/ 的/ 多域/ 网包/ 分类/ 问题/ ./ H/ -/ Trie/ 和/ H/ -/ Tree/ 算法/ 具有/ 较/ 好/ 的/ 空间/ 特性/ ,/ 但/ 需要/ 耗时/ 的/ 回溯/ 查找/ ;/ S/ -/ Trie/ 和/ S/ -/ Tree/ 算法/ 通过/ 规则/ 复制/ 大幅/ 降低/ 了/ 搜索/ 时间/ ,/ 但/ 代价/ 是/ 指数/ 级/ 的/ 内存/ 增长/ ./ 幸运/ 的/ 是/ 在/ 实际/ 应用/ 中/ 极少/ 会/ 遇到/ 理论/ 中/ 的/ 最坏/ 的/ 情况/ ./ 实际/ 应用/ 中/ 的/ 网包/ 分类/ 问题/ 往往/ 具有/ 各类/ 结构/ 和/ 统计/ 特性/ ./ 将/ 这些/ 特性/ 应用/ 到/ 网包/ 分类/ 算法/ 的/ 设计/ 中/ 去/ ,/ 通常/ 可以/ 得到/ “/ 足够/ 快/ ”/ 的/ 分类/ 速率/ ,/ 同时/ 满足/ “/ 足够/ 少/ ”/ 的/ 内存/ 使用/ ./ “/ 足够/ 快/ ”/ 和/ “/ 足够/ 少/ ”/ 在/ 这里/ 表明/ 了/ 一种/ 权衡/ (/ tradeoff/ )/ 的/ 思想/ ,/ 是/ 算法/ 时间/ 性能/ 和/ 空间/ 性能/ 的/ 折中/ ./ 算法/ 设计/ 的/ 最终目标/ 就是/ 在/ 理论依据/ 之上/ ,/ 充分/ 挖掘/ 规则/ 特性/ 并/ 考虑/ 系统/ 约束/ ,/ 寻求/ 最优/ 的/ 权衡/ ./ 3/ 网包/ 分类/ 算法/ 自/ 20/ 世纪/ 90/ 年代/ 末/ 至今/ ,/ 网包/ 分类/ 问题/ 的/ 相关/ 研究/ 不断/ 发展/ ,/ 出现/ 了/ 一大批/ 优秀/ 的/ 网包/ 分类/ 算法/ ./ 本节/ 依据/ 网包/ 分类/ 算法/ 的/ 研究/ 方向/ ,/ 按照/ 空间/ 分解/ 、/ 规则/ 分组/ 和/ 硬件/ 设计/ 3/ 个/ 方向/ ,/ 对/ 常见/ 的/ 网包/ 分类/ 算法/ 进行/ 归类/ 和/ 介绍/ ./ 与此同时/ ,/ 我们/ 结合/ 自身/ 的/ 研究成果/ ,/ 对/ 各类/ 网包/ 分类/ 算法/ 的/ 研究/ 思路/ 进行/ 了/ 深入/ 的/ 分析/ 和/ 比较/ ./ 3.1/ 空间/ 分解/ 算法/ 空间/ 分解/ 是/ 一种/ 分而治之/ 的/ 策略/ ./ 使用/ 空间/ 分解/ 的/ 网包/ 分类/ 算法/ 将/ 原始/ 搜索/ 空间/ S/ 分解/ 为/ m/ 个子/ 空间/ ,/ 且/ 满足/ 如下/ 约束/ :/ 每个/ 子/ 空间/ 对应/ 的/ 规则/ 子集合/ 满足/ Page7/ 由此可见/ ,/ 经过/ 空间/ 分解/ 后/ ,/ 落入/ 每个/ 子/ 空间/ 的/ 网包/ 具有/ 唯一/ 的/ 规则/ 子集/ 与/ 之/ 匹配/ ./ 因此/ 只要/ 确定/ 子/ 空间/ 归属/ 即可/ 完成/ 网包/ 分类/ ./ 由/ 第/ 2/ 节/ 理论/ 分析/ 可知/ ,/ 空间/ 分解/ 的/ 数学/ 解法/ 分为/ 搜索/ 空间/ 二分法/ 和/ 投影/ 区间/ 二分法/ 两大类/ ./ 现有/ 绝大多数/ 网包/ 分类/ 算法/ 均/ 可/ 归结为/ 上述/ 方法/ 的/ 拓展/ ./ 下面/ 我们/ 以/ 搜索/ 空间/ 均分/ 和/ 投影/ 区间/ 分解/ 为/ 线索/ ,/ 分别/ 介绍/ 不同/ 算法/ 的/ 设计/ 思想/ 和/ 优化/ 方法/ ./ 3.1/ ./ 1/ 搜索/ 空间/ 均分/ 算法/ 搜索/ 空间/ 均分/ 算法/ 主要/ 包括/ 基于/ Trie/ 结构/ 的/ 各类/ 网包/ 分类/ 算法/ ,/ 如/ 文献/ [/ 22/ -/ 33/ ]/ ./ 该类/ 算法/ 的/ 基本思路/ 是/ :/ 通过/ 对/ 搜索/ 空间/ 及其/ 子/ 空间/ 进行/ 迭代/ 的/ 均匀/ 切分/ (/ cut/ )/ ,/ 将/ 原始/ 搜索/ 空间/ 愈分/ 愈细/ ,/ 直到/ 落入/ 每个/ 子/ 空间/ 中/ 的/ 所有/ 网包/ 都/ 有/ 唯一/ 的/ 规则/ 子集/ 与/ 之/ 匹配/ ./ 基于/ 搜索/ 空间/ 分解/ 的/ 算法/ 通常/ 使用/ 拓展/ 的/ S/ -/ Trie/ 结构/ ,/ 即将/ 单/ 比特/ S/ -/ Trie/ 拓展/ 为/ 可变/ 宽/ 的/ 多/ 比特/ S/ -/ Trie/ (/ variable/ -/ stridemulti/ -/ bitSet/ -/ pruningTrie/ )/ ./ 该/ 结构/ 的/ 根/ 节点/ (/ rootnode/ )/ 对/ 原始/ 搜索/ 空间/ 进行/ 第/ 1/ 级/ 均匀/ 切分/ ;/ 第/ l/ 级/ 的/ 内部/ 节点/ (/ internalnode/ )/ 对/ 原始/ 空间/ 进行/ 第/ 2/ 级/ 均匀/ 切分/ ./ 每/ 一个/ 叶/ 节点/ (/ leafnode/ )/ 包含/ 与/ 该子/ 空间/ 所有/ 点/ 都/ 匹配/ 的/ 规则/ 子集/ ./ 该类/ 算法/ 的/ 特点/ 是/ 每级/ 切分/ 满足/ 该类/ 算法/ 的/ 理论/ 复杂度/ 与/ S/ -/ Trie/ 相同/ ,/ 实际/ 时间/ 性能/ 由树/ 深度/ (/ depth/ )/ 决定/ ,/ 实际/ 空间/ 性能/ 则/ 取决于/ 节点/ 数目/ 和/ 节点/ 大小/ ./ 因此/ ,/ 基于/ 搜索/ 空间/ 均分/ 的/ 网包/ 分类/ 算法/ 主要/ 在/ 如何/ 提高/ 搜索/ 空间/ 分解/ 效率/ 上/ 进行/ 探索/ 和/ 研究/ ./ Gupta/ 等/ 人/ [/ 22/ ]/ 提出/ 的/ HiCuts/ (/ HierarchicalIntelligentCuttings/ )/ 是/ 最早/ 使用/ 启发式/ 算法/ 来/ 提高/ 搜索/ 空间/ 分解/ 效率/ 的/ 网包/ 分类/ 算法/ ./ HiCuts/ 利用/ 基于/ 多/ 比特/ Trie/ 的/ 决策树/ (/ decisiontree/ )/ 结构/ 对/ 搜索/ 空间/ 进行/ 多级/ 均匀/ 切分/ ./ 在/ 决策树/ 的/ 每/ 一个/ 内部/ 节点/ ,/ HiCuts/ 使用/ 可/ 分离/ 判别函数/ 选取/ 当前/ 最优/ 的/ 切分/ 维度/ ,/ 并/ 使用/ 内存空间/ 约束/ 函数/ 确定/ 当前/ 空间/ 的/ 切分/ 次数/ ./ 若/ 当前/ 子/ 空间/ 所/ 包含/ 的/ 规则/ 个数/ 小于/ 指定/ 阈值/ (/ binth/ )/ ,/ HiCuts/ 算法/ 生成/ 一个/ 叶/ 节点/ ,/ 并/ 将/ 所/ 含/ 规则/ 存储/ 在/ 叶/ 节点/ 中/ 进行/ 线性/ 查找/ ./ Singh/ 等/ 人/ 提出/ 的/ HyperCuts/ 算法/ 将/ HiCuts/ 算法/ 中/ 的/ 单域/ 空间/ 切分/ 拓展/ 到/ 多域/ 中/ 去/ ,/ 在/ 每个/ 内部/ 节点/ 从/ 多个/ 维度/ 上/ 对/ 当前/ 搜索/ 空间/ 进行/ 划分/ [/ 29/ ]/ ./ 由于/ 多域/ 切分/ 以/ 指数/ 级别/ 提高/ 了/ 每个/ 节点/ 的/ 空间/ 分解/ 次数/ ,/ 因此/ HyperCuts/ 算法/ 构建/ 的/ 决策树/ 深度/ 大大减少/ ,/ 从而/ 有效/ 提高/ 了/ 算法/ 的/ 时间/ 性能/ ./ 近年来/ 的/ 研究/ 指出/ ,/ 将/ HiCuts/ 和/ HyperCuts/ 直接/ 用于/ 真实/ 网包/ 分类/ 系统/ 中/ 存在/ 诸多/ 缺陷/ [/ 24/ ]/ ./ 首先/ ,/ 由于/ 启发式/ 算法/ 每级/ 切分/ 次数/ 不同/ ,/ 导致/ 决策树/ 深度/ 不/ 确定/ ,/ 进而/ 使得/ 系统/ 吞吐/ 率/ 无法/ 保障/ ./ 其次/ ,/ 由于/ 每个/ 内部/ 节点/ 都/ 使用/ 指针/ 数组/ 或/ 指针/ 矩阵/ 连接子/ 节点/ ,/ 在/ 切分/ 次数/ 增长/ 的/ 情况/ 下/ ,/ 指针/ 结构/ 的/ 存储空间/ 随之/ 增长/ ./ 在/ 真实/ 系统/ 中/ ,/ 过高/ 的/ 内存/ 需求/ 将/ 导致/ 网包/ 分类/ 算法/ 难以/ 利用/ 有限/ 的/ 高速/ 内存/ 资源/ 实现/ 快速/ 的/ 网包/ 分类/ ./ 此外/ ,/ 由于/ HiCuts/ 和/ HyperCuts/ 每个/ 节点/ 的/ 大小/ 不/ 一致/ ,/ 使得/ 查找/ 过程/ 中/ 每次/ 访存/ (/ memoryaccess/ )/ 所/ 读取/ 的/ 字节数/ 以及/ 相应/ 的/ 节点/ 处理过程/ 不/ 一致/ ./ 这种/ 不/ 一致/ 使/ 内存/ 分配/ 单元/ 变得复杂/ ,/ 并/ 降低/ 硬件/ 处理单元/ 的/ 效率/ ./ 为/ 解决/ 这些/ 问题/ ,/ 学术界/ 提出/ 了/ 一系列/ 新/ 的/ 改进/ 算法/ [/ 24/ -/ 25/ ,/ 31/ ]/ ./ 本文/ 以/ AggreCuts/ [/ 25/ ]/ 算法/ 为例/ ,/ 具体/ 说明/ 提高/ 算法/ 性能/ 的/ 一般/ 思路/ ./ AggreCuts/ 的/ 核心思想/ 是/ 利用/ BITMAP/ (/ 比特/ 串/ )/ 来/ 压缩/ HiCuts/ 算法/ 中/ 的/ 指针/ 数组/ ,/ 从而/ 有效/ 提高/ 空间/ 分解/ 效率/ ./ 如图/ 3/ 所示/ ,/ 当前/ 搜索/ 空间/ 被切/ 分为/ 16/ 个子/ 空间/ ./ 由于/ 第/ 1/ ~/ 2/ 个子/ 空间/ 包含/ 相同/ 规则/ 子集/ {/ r0/ ,/ r1/ }/ ,/ 按照/ HiCuts/ 算法/ ,/ 为/ 这/ 2/ 个子/ 空间/ 生成/ 一个/ 新/ 的/ 子/ 节点/ (/ 存储/ 地址/ 为/ A0/ )/ ,/ 并/ 使用/ 2/ 个/ 指针/ 建立/ 2/ 个子/ 空间/ 到/ 该子/ 节点/ 的/ 映射/ 关系/ ./ 同理/ ,/ 第/ 3/ ~/ 8/ 个子/ 空间/ (/ 包含/ {/ r0/ }/ )/ 生成/ 第/ 2/ 个子/ 节点/ (/ 地址/ A1/ )/ ,/ 第/ 9/ ~/ 16/ 个子/ 空间/ (/ 包含/ {/ r0/ ,/ r2/ }/ )/ 生成/ 第/ 3/ 个子/ 节点/ ./ HiCuts/ 算法/ 使用/ 包含/ 16/ 个/ 指针/ 的/ 指针/ 数组/ 建立/ 16/ 个子/ 空间/ 到/ 3/ 个子/ 节点/ 的/ 映射/ 关系/ ./ 考虑/ 到/ 实际/ 应用/ 中/ 指针/ 数组/ 的/ 冗余/ 性/ ,/ AggreCuts/ 使用/ 16/ 比特/ 的/ BITMAP/ 对图/ 3/ 中/ 的/ 16/ 个/ 指针/ 进行/ 了/ 压缩/ ./ BITMAP/ 的/ 设置/ 为/ :/ 第/ 1/ 个/ 比特/ 为/ 1/ ;/ 若/ 第/ i/ (/ i/ >/ 1/ )/ 个/ 指针/ 跟/ 第/ i/ -/ 1/ 个/ 不同/ ,/ 则/ 该/ 比特/ 为/ 1/ ,/ 否则/ 为/ 0/ ./ 与/ BITMAP/ 相对/ 应/ 的/ 是/ 一个/ 压缩/ 指针/ 数组/ ,/ 该/ 数组/ 中/ 顺序存储/ BITMAP/ 中/ 1/ 位置/ 所/ 对应/ 的/ 指针/ (/ 即/ 原始/ 指针/ 数组/ 中/ 所有/ 与/ 前/ 一/ 指针/ 不/ 相同/ 的/ 指针/ )/ ./ 在/ 查找/ 过程/ 中/ ,/ 落入/ 第/ j/ 个子/ 空间/ 的/ 网包/ ,/ 只/ 需要/ 以/ BITMAP/ 中前/ j/ 个/ 比特/ 相加/ 的/ 和/ 为/ 索引/ 读取/ Page8/ 压缩/ 指针/ 数组/ 中/ 的/ 相应/ 指针/ 即可/ ./ AggreCuts/ 的/ 时间/ 和/ 空间/ 性能/ 见图/ 4/ 和/ 图/ 5/ ./ 由图/ 4/ 可知/ ,/ AggreCuts/ 的/ 决策树/ 深度/ (/ 与/ 内存/ 访问/ 次数/ 呈/ 线性关系/ )/ 不到/ HiCuts/ 的/ 1/ // 5/ ,/ 而且/ 不随/ 规则/ 个数/ 增加/ 而/ 变化/ ./ 由图/ 5/ 可知/ ,/ AggreCuts/ 比/ HiCuts/ 减少/ 了/ 1/ ~/ 2/ 个/ 数量级/ 的/ 内存/ 使用/ ./ AggreCuts/ 的/ 局限性/ 在于/ 需要/ 进行/ BITMAP/ 运算/ ./ 但/ 随着/ 处理器/ 技术/ 的/ 发展/ ,/ 高性能/ 多核/ 网络/ 处理器/ (/ 如/ IntelIXP2800CaviumOCTEON3860/ )/ 均/ 提供/ 高效/ 的/ 硬件/ BITM/ -/ AP/ 运算/ 指令/ ,/ 因此/ AggreCuts/ 可以/ 在/ 大多数/ 高性能/ 网络/ 处理/ 平台/ 上/ 得到/ 广泛应用/ ./ 3.1/ ./ 2/ 投影/ 区间/ 分解/ 算法/ 投影/ 区间/ 分解/ 算法/ 包括/ 文献/ [/ 16/ ,/ 18/ ,/ 20/ ]/ 、/ 文献/ [/ 17/ ]/ 和/ 文献/ [/ 34/ -/ 37/ ]/ ./ 该类/ 算法/ 的/ 基本思路/ 是/ :/ 将/ 网包/ 分类/ 规则/ 投影/ 在/ 各个/ 域/ 上/ ,/ 每个/ 域/ 上/ 相邻/ 的/ 两个/ 投影/ 点/ 构成/ 一个/ 投影/ 区间/ ./ 分类/ 过程/ 中/ 首先/ 确定/ 网包/ 在/ 各个/ 域/ 上/ 属于/ 哪个/ 投影/ 区间/ (/ 子/ 空间/ )/ ,/ 然后/ 再/ 通过/ 子/ 空间/ 求交/ 的/ 方法/ 完成/ 最终/ 匹配/ ./ 该类/ 算法/ 的/ 特点/ 是/ 每级/ 切分/ 尽可能/ 满足/ 子/ 空间/ 的/ 规则/ 数/ 相等/ :/ 依据/ 第/ 2/ 节/ 理论/ 分析/ ,/ 基于/ 规则/ 投影/ 区间/ 分解/ 的/ 算法/ 的/ 对应/ 于点/ 定位/ 中/ 的/ S/ -/ Tree/ 算法/ ,/ 两者/ 具有/ 相同/ 理论/ 复杂度/ ./ 实际/ 应用/ 中/ ,/ 投影/ 区间/ 分解/ 算法/ 对/ S/ -/ Tree/ 算法/ 进行/ 了/ 拓展/ ./ 一方面/ 利用/ 启发式/ 方法/ 改进/ 区间/ 查找/ 的/ 数据结构/ 提高/ 分类/ 速率/ ,/ 另一方面/ 利用/ 规则/ 冗余/ 特性/ 通过/ 迭代/ 求交/ 降低/ 内存/ 使用/ ./ 最早/ 的/ 基于/ 投影/ 区间/ 分解/ 的/ 算法/ 是/ Srinivasan/ 等/ 人/ 提出/ 的/ Cross/ -/ Producting/ 算法/ [/ 16/ ]/ ./ 该/ 算法/ 采用/ 最长/ 前缀/ 匹配/ 进行/ 各域/ 上/ 的/ 投影/ 区间/ 查找/ ,/ 并/ 使用/ 一个/ d/ 维的表/ 结构/ (/ cross/ -/ productingtable/ )/ 完成/ 空间/ 求交/ ./ 由于/ 最长/ 前缀/ 匹配/ 查找/ 效率/ 较/ 二分/ 查找/ 低/ (/ Θ/ (/ W/ )/ 对比/ Θ/ (/ logn/ )/ )/ ,/ 且/ 单一/ 的/ d/ 维求/ 交表/ 无法/ 消除/ 空间/ 冗余/ ,/ 该/ 算法/ 仅/ 适用/ 于/ 较/ 小/ 的/ 规则/ 集合/ [/ 9/ ]/ ./ Gupta/ 等/ 人/ [/ 20/ ]/ 提出/ 的/ RFC/ (/ RecursiveFlowClassi/ -/ fication/ )/ 算法/ 利用/ 数组/ 结构/ 存储/ 各域/ 的/ 投影/ 区间/ ,/ 将/ 每个/ 维度/ 上/ Θ/ (/ W/ )/ 的/ 最长/ 前缀/ 查找时间/ 提高/ 为/ Θ/ (/ 1/ )/ (/ 代价/ 是/ 每个/ 域/ 的/ 存储空间/ 变为/ Θ/ (/ 2W/ )/ )/ ./ RFC/ 同时/ 采用/ 多级/ 求交表/ 进行/ 迭代/ 求交/ ,/ 一定/ 程度/ 减少/ 了/ 内存/ 的/ 占用/ ./ Xu/ 等/ 人/ [/ 35/ ]/ 提出/ 的/ HSM/ (/ HierarchicalSpaceMapping/ )/ 算法/ 采用/ 了/ 单域/ 上/ 的/ 多分/ 查找/ 改善/ RFC/ 算法/ 的/ 数组/ 存储/ 问题/ ,/ 并/ 提供/ 支持/ IPv6/ 的/ 128/ 位/ 地址/ 查找/ ./ 虽然/ RFC/ 和/ HSM/ 算法/ 在/ 实际/ 网包/ 分类/ 系统/ 中/ 得到/ 了/ 应用/ ,/ 但/ 对于/ 大规模/ 的/ 数据/ 规则/ 集合/ 其/ 空间/ 性能/ 并/ 不/ 理想/ ./ 基于/ 投影/ 区间/ 分解/ 的/ 最新/ 研究/ 成/ 通过/ 启发式/ 维度/ 选择/ 和/ 迭代/ 二分/ 查找/ 等/ 方法/ ,/ 有效/ 提高/ 了/ 算法/ 的/ 空间/ 性能/ [/ 16/ -/ 17/ ,/ 36/ ]/ ./ 下面/ 以/ HyperSplit/ 算法/ 为例/ ,/ 介绍/ 投影/ 区间/ 分解/ 算法/ 的/ 研究/ 思路/ ./ HyperSplit/ 使用/ 启发式/ 算法/ 构建/ S/ -/ Tree/ ./ 在/ 生成/ 每个/ 内部/ 节点/ 的/ 过程/ 中/ ,/ HyperSplit/ 依据/ 当前/ 规则/ 集合/ (/ 而/ 非/ 分类/ 规则/ 全集/ )/ 在/ 各个/ 维度/ 上/ 的/ 投影/ 点/ 分布/ 情况/ 选择/ 最具/ 可分离性/ 的/ 维度/ ,/ 然后/ 用/ 平行/ 于/ 坐标轴/ 的/ 超平面/ 将/ 当前/ 维度/ 上/ 的/ 投影/ 区间/ 二分/ ./ 其中/ 维度/ 选择/ 依据/ 为/ 其中/ mi/ 为/ 第/ i/ 维度/ 的/ 区间/ 个数/ ./ 多级/ 内部/ 节点/ 对/ 投影/ 区间/ 的/ 不断/ 二分/ ,/ 直到/ 当前/ 子/ 空间/ 为/ 某个/ 规则/ 子集/ 完全/ 包含/ ,/ 此时/ 生成/ 叶/ 节点/ ./ 图/ 6/ 和/ 图/ 7/ 比较/ 了/ HSM/ 和/ HyperSplit/ 两种/ 算法/ 的/ 不同/ 分解/ 策略/ ./ 可以/ 看出/ ,/ HSM/ 算法/ 将/ 当/ 搜索/ 空间/ 分解/ 为/ 9/ 个子/ 空间/ ,/ 而/ HyperSplit/ 算法/ 仅/ 分解/ 5/ 个子/ 空间/ ./ 从/ 搜索/ 过程/ 来看/ ,/ HSM/ 算法/ 需要/ 最多/ 4/ 次/ 二分/ 查找/ ,/ 而/ HyperSplit/ 算法/ 只/ 需要/ 3/ 次/ ./ HyperSplit/ 算法/ 的/ 时空/ 性能/ 由图/ 8/ 和/ 图/ 9/ 给出/ ./ 由图/ 中/ 数据/ 可知/ ,/ 对于/ 不同/ 的/ 规则/ 集合/ ,/ HyperSplit/ 算法/ 的/ 内存/ 访问/ 次数/ 比/ HSM/ 算法/ 平均/ 少/ 30/ %/ ,/ 内存/ 使用/ 则/ 减少/ 1/ ~/ 2/ 个/ 数量级/ ./ 依据/ 文献/ [/ 17/ ,/ 38/ ]/ ,/ HyperSplit/ 算法/ 在/ 多/ 核/ 网络/ 处理器/ 和/ FPGA/ 硬件平台/ 上/ 分别/ 达到/ 了/ 10Gbps/ 和/ 100Gbps/ 吞吐/ 率/ ./ Page93/ ./ 2/ 规则/ 分组/ 优化/ 算法/ 由/ 复杂度/ 分析/ 可知/ ,/ 随着/ 规模/ 集合/ 的/ 不断/ 增长/ ,/ 基于/ 空间/ 分解/ 的/ 算法/ 的/ 内存/ 需求/ 呈/ 指数/ 级/ 增加/ ./ 近年来/ 学术界/ 提出/ 了/ 一系列/ 基于/ 规则/ 分组/ 的/ 网包/ 分类/ 算法/ [/ 24/ ,/ 39/ -/ 42/ ]/ ,/ 有效/ 降低/ 了/ 现有/ 算法/ 的/ 存储空间/ 需求/ ./ 规则/ 分组/ 算法/ 将/ 规则/ 集合/ 按照/ 一定/ 的/ 启发/ 信息/ 分为/ 若干/ 规则/ 子集/ ,/ 然后/ 对/ 每个/ 规则/ 子集/ 进行/ 逐一/ 或/ 并行/ 查找/ ./ 规则/ 分组/ 算法/ 是/ 另/ 一种/ 分而治之/ 的/ 策略/ ./ 此类/ 算法/ 将/ 原始/ 规则/ 集合/ 预先/ 划分/ 为/ m/ 个/ 规则/ 子集/ ,/ 即/ 规则/ 分组/ 算法/ 通常/ 与/ 上/ 一/ 小节/ 介绍/ 的/ 空间/ 分解/ 算法/ 相结合/ ,/ 即/ 首先/ 进行/ 规则/ 分组/ ,/ 然后/ 对/ 每个/ 规则/ 子集/ 使用/ 空间/ 分解/ 算法/ 进行/ 查找/ ./ 下面/ ,/ 我们/ 分别/ 介绍/ 基于/ 结构/ 特性/ 和/ 组合/ 优化/ 的/ 两类/ 主流/ 的/ 规则/ 分组/ 算法/ ./ 3.2/ ./ 1/ 基于/ 结构/ 特性/ 的/ 分组/ 算法/ 基于/ 规则/ 结构/ 特性/ 的/ 分组/ 算法/ 依据/ 规则/ 的/ 结构/ 特性/ 将/ 规则/ 全集/ 分为/ 若干/ 子集/ ,/ 使得/ 同一/ 子集/ 内/ 的/ 规则/ 具有/ 良好/ 的/ 可分离性/ (/ separablility/ )/ [/ 24/ ]/ ,/ 从而/ 降低/ 整体/ 的/ 存储/ 需求/ ./ 由于/ 结构/ 特性/ 法/ 需要/ 对/ 多个/ 子集/ 进行/ 逐一/ 或/ 并行/ 查找/ ,/ 如何/ 在/ 保证/ 任意/ 子集/ 具备/ 良好/ 可分离性/ 的/ 前提/ 下/ 控制/ 规则/ 子集/ 的/ 个数/ ,/ 成为/ 当前/ 研究/ 的/ 重点/ ./ 基于/ 结构/ 特性/ 的/ 规则/ 分组/ 算法/ 最具/ 代表性/ 的/ 是/ Vamanan/ 等/ 人/ [/ 24/ ]/ 提出/ 的/ EffiCuts/ ./ 作者/ 在/ 论文/ 中/ 指出/ ,/ HiCuts/ 和/ HyperCuts/ 算法/ 中/ 大量/ 的/ 内存/ 消耗/ 的/ 主要/ 原因/ 之一/ 便是/ 用/ 单一/ 的/ 决策树/ 处理/ 相互/ 重叠/ 且/ 结构/ 各异/ 的/ 规则/ 全集/ ./ 为此/ ,/ EffiCuts/ 算法/ 的/ 第一步/ 便是/ 基于/ 结构/ 特性/ 的/ 规则/ 分组/ ./ 其/ 分组/ 依据/ 为/ 规则/ 在/ 各个/ 维度/ 上/ 投影/ 区间/ 的/ 取值/ 范围/ ./ 若/ 一个/ 规则/ 在/ 某个/ 域/ 上/ 的/ 投影/ 区间/ 大于/ 某一/ 阈值/ (/ largenessfraction/ )/ ,/ 则/ 认为/ 该/ 规则/ 的/ 投影/ 区间/ 在/ 该域/ 上/ 是/ “/ 大/ ”/ 的/ ;/ 反之/ 则/ 为/ “/ 小/ ”/ ./ 根据/ 每/ 一个/ 规则/ 在/ 各域/ 上/ 的/ 结构/ 特性/ ,/ EffiCuts/ 将/ 原始/ 规则/ 集合/ 划分/ 为/ 26/ 个/ (/ 对于/ IPv4/ 的/ 五元/ 组/ 规则/ )/ 规则/ 子集/ ,/ 其中/ 任一/ 子集/ 均/ 满足/ 作者/ 定义/ 的/ 可分离性/ 要求/ ./ 规则/ 分组/ 完成/ 后/ ,/ EffiCuts/ 使用/ HyperCuts/ 算法/ 对/ 每个/ 规则/ 子集/ 进行/ 分类/ 查找/ ./ 为了/ 控制/ 规则/ 子集/ 的/ 个数/ ,/ EffiCuts/ 算法/ 还/ 使用/ 了/ 选择性/ 树/ 合并/ (/ selectivetreemerging/ )/ 的/ 策略/ ,/ 将/ 规则/ 简单/ 的/ 和/ 规模较/ 小/ 的/ 子集/ 进行/ 了/ 选择性/ 的/ 合并/ ,/ 最终/ 生成/ 5/ ~/ 6/ 个/ 规则/ 子集/ ./ 作者/ 通过/ 实验/ 证实/ ,/ 在/ 内存/ 访问/ 次数/ 相同/ 的/ 情况/ 下/ ,/ EffiCuts/ 比/ HyperCuts/ 减少/ 57/ 倍/ 的/ 内存/ 使用/ ./ 3.2/ ./ 2/ 基于/ 组合/ 优化/ 的/ 分组/ 算法/ 从/ 优化/ 的/ 角度/ 来看/ ,/ 规则/ 分组/ 是/ 一个/ 带/ 约束/ 的/ 组合/ 优化/ 问题/ (/ combinatorialoptimization/ )/ ./ 其/ 约束/ 为/ 子集/ 个数/ ,/ 而/ 优化/ 目标/ 则/ 为/ 整体/ 内存空间/ ./ 由于/ 规则/ 特性/ 法是/ 确定性/ 的/ 方法/ ,/ 因此/ 通常/ 只能/ 得到/ 这个/ 优化/ 问题/ 的/ 局部/ 最优/ 解/ ./ 对于/ 一般/ 的/ 组合/ 优化/ 问题/ ,/ 随机/ 搜索/ 方法/ 如/ 模拟退火/ 、/ 禁忌/ 搜索/ 、/ 遗传算法/ 等/ 能够/ 得到/ 全局/ 最优/ 解/ ./ Page10/ 基于/ 组合/ 优化/ 法/ 的/ 最新/ 研究成果/ 为/ Fong/ 等/ 人/ [/ 42/ ]/ 提出/ 的/ ParaSplit/ 算法/ ./ 该/ 算法/ 使用/ 模拟退火/ 进行/ 优化/ ,/ 在/ 确定/ 规则/ 子集/ 个数/ 的/ 约束/ 下/ 搜索/ 最优/ 的/ 规则/ 分组/ ./ ParaSplit/ 算法/ 的/ 目标/ 函数/ 为/ 各个/ 子集/ 在/ HyperSplit/ 算法/ 下/ 的/ 内存/ 使用/ 总和/ ./ 模拟退火/ 过程/ 的/ 初始/ 解为/ 通过/ 对/ 规则/ 全集/ 随机/ 分组/ 获取/ ./ 搜索/ 过程/ 中/ ,/ 每/ 一个/ 新解/ 都/ 由/ 通过/ 随机/ 增减/ 或/ 交换/ 任意/ 两个/ 子集/ 间/ 的/ 规则/ 获取/ ./ 新解/ 是否/ 被/ 接受/ 依据/ Metropolis/ 准则/ ./ 若/ 目标/ 函数/ 差/ (/ 总/ 内存/ 增量/ )/ :/ 则/ 接受/ ,/ 否则/ 以/ 概率/ 接受/ ,/ 其中/ T/ 为/ 退火/ 温度/ ./ ParaSplit/ 通过/ 选择/ 合理/ 的/ 初始/ 温度/ ,/ 使得/ 算法/ 能/ 在/ 有限/ 的/ 迭代/ 次数/ 内/ 满足/ 收敛/ 条件/ ./ 若/ 使用/ 结构/ 特性/ 法/ 求取/ 初始/ 解/ ,/ ParaSplit/ 能够/ 以/ 更/ 快/ 速度/ 的/ 收敛/ ./ 从图/ 10/ 可以/ 看出/ ,/ ParaSplit/ 的/ 内存/ 使用/ 比/ HyperSplit/ 少/ 1/ ~/ 3/ 个/ 数量级/ ./ 3.3/ 本节/ 总结/ 基于/ 计算/ 几何/ 的/ 空间/ 分解/ 算法/ 是/ 网包/ 分类/ 问题/ 的/ 研究/ 基础/ ./ 采用/ 不同/ 的/ 空间/ 分解/ 方法/ 可以/ 获取/ 不同/ 的/ 时间/ 和/ 空间/ 性能/ 折中/ (/ time/ -/ spacetradeoff/ )/ ,/ 以/ 满足/ 各类/ 网包/ 分类/ 应用/ 的/ 需求/ ./ 空间/ 分解/ 算法/ 结合/ 启发式/ 方法/ ,/ 可以/ 利用/ 真实/ 规则/ 集合/ 的/ 冗余/ 性/ 进一步提高/ 分类/ 速率/ ,/ 降低/ 内存/ 使用/ ./ 在/ 算法/ 优化/ 的/ 研究/ 中/ ,/ 规则/ 分组/ 算法/ 采用/ 分而治之/ 的/ 策略/ 通过/ 对/ 复杂/ 规则/ 集合/ 的/ 分解/ 提高/ 处理/ 效率/ ./ 除本节/ 介绍/ 的/ 网包/ 分类/ 算法/ 之外/ ,/ 还有/ 基于/ Hash/ 方法/ [/ 43/ -/ 48/ ]/ 和/ 基于/ TernaryCAM/ 的/ 网包/ 分类/ 算法/ [/ 49/ -/ 56/ ]/ ./ 这些/ 方法/ 通常/ 需要/ 专用/ 的/ 硬件/ (/ 如/ ASIC/ )/ 或/ 存储设备/ (/ TCAM/ )/ 来/ 实现/ ,/ 而/ 本文/ 重点/ 讨论/ 基于/ 可编程/ 的/ 多/ 核/ 系统/ 和/ FPGA/ 平台/ 的/ 网包/ 分类/ 算法/ ,/ 因此/ 这里/ 不再/ 详述/ ./ 4/ 网包/ 分类/ 系统/ 实现/ 与/ 测试/ 现有/ 的/ 网包/ 分类/ 研究/ ,/ 大多/ 集中/ 于/ 网包/ 分类/ 算法/ 的/ 设计/ 及其/ 软件/ 仿真/ 实验/ ,/ 仅/ 有/ 少量/ 的/ 并/ 不/ 全面/ 的/ 真实/ 系统/ 评测/ [/ 57/ -/ 61/ ]/ ./ 为了/ 客观/ 真实/ 地/ 反映/ 网包/ 分类/ 系统/ 的/ 性能/ ,/ 我们/ 将/ 第/ 3/ 节中/ 介绍/ 的/ 一系列/ 网包/ 分类/ 算法/ 实现/ 于/ 高性能/ 多核/ 处理器/ 平台/ 及/ FPGA/ 硬件/ 仿真/ 平台/ 上/ ,/ 并/ 利用/ 大量/ 真实/ 规则/ 进行/ 了/ 全面/ 测试/ ./ 4.1/ 基于/ 多核/ 平台/ 的/ 网包/ 分类/ 系统/ 测试/ 采用/ CaviumOCTEON3860/ 多核/ 处理器/ ./ 该/ 处理器/ 包含/ 16/ 个/ 运行/ 在/ 500MHz/ 的/ MIPS/ 核心/ ,/ 8/ 个/ 千兆/ RGMII/ 的/ 网络接口/ ./ 存储体系/ 包括/ 32K/ 字节/ 的/ 每核/ 独享/ L1/ 缓存/ ,/ 1M/ 字节/ 的/ 共享/ L2/ 缓存/ 以及/ 2G/ 字节/ 的/ DDR2/ 主存/ ./ 在/ 开发/ 编程/ 工作/ 中/ ,/ 我们/ 使用/ 了/ 基于/ CaviumSDKversion1/ ./ 5/ 的/ SimpleExecutive/ 模式/ 以/ 保证/ 最大/ 程度/ 的/ 发挥/ 处理器/ 性能/ ./ 基于/ OCTEON3860/ 多核/ 处理器/ 平台/ 的/ 测试/ 结果/ 见图/ 11/ 和/ 图/ 12/ ./ 我们/ 实现/ 了/ HiCuts/ 、/ HSM/ 和/ HyperSplit3/ 种/ 算法/ ./ 从图/ 11/ 的/ 测试/ 可以/ 看出/ ,/ 随着/ 处理器/ 核心/ 数/ 的/ 增加/ ,/ 3/ 种/ 算法/ 的/ 吞吐/ 率/ 增长/ 都/ 接近/ 线性/ ./ 当/ 使用/ 全部/ 16/ 个/ 核/ 的/ 时候/ ,/ HyperSplit/ 算法/ 达到/ 了/ 6.4/ Gbps/ 吞吐/ 率/ (/ 测试/ 使用/ 64/ 字节/ 网包/ )/ ,/ 其/ 性能/ 是/ HSM/ 的/ 2/ 倍/ ,/ HiCuts/ 的/ 4/ 倍/ ./ 图/ 12/ 是/ 开启/ 全部/ 16/ 个/ 核/ 的/ 情况/ 下/ ,/ 不同/ 大小/ 网包/ 的/ 吞吐/ 测试/ 结果/ ./ 由图/ 可见/ ,/ HyperSplit/ 算法/ 在/ 网/ 包包/ 长大/ 于/ 或/ 等于/ 128/ 字节/ 时/ ,/ 即可/ 达到/ 100/ %/ 线速/ (/ 8Gbps/ )/ ,/ 而/ HSM/ 和/ HiCuts/ 分别/ 在/ 256/ 字节/ 和/ 1024/ 字节/ 才/ 达到/ 线速/ 处理/ ./ 由此可见/ ,/ HyperSplit/ 算法/ 可以/ 在/ 多/ 核/ 系统/ 平台/ 上/ 得到/ 高效/ 实现/ ,/ 提供/ 接近/ 线速/ 的/ 网包/ 处理/ 能力/ ./ 相比/ HiCuts/ 算法/ ,/ HyperSplit/ 算法/ 的/ 优势/ 主要/ 在于/ 处理/ 每个/ 网包/ 的/ 内存/ 访问/ 次数/ 少/ ,/ 因此/ 处理速度/ 快/ ./ 相比/ HSM/ 算法/ ,/ HyperSplit/ 算法/ 的/ 优势/ 在于/ 内存/ 使用/ 少/ ,/ 使得/ 多核/ 系统/ 的/ 缓存/ 能够/ 得到/ 充分利用/ ,/ 从而/ 降低/ 每次/ 访存/ 的/ 延迟/ ,/ 最终/ 提高/ 了/ 整体/ 处理速度/ ./ 图/ 11/ 网包/ 分类/ 算法/ 在/ 多/ 核/ 处理器/ 上/ 的/ 性能/ (/ 64/ 字节/ 网包/ )/ Page11/ 图/ 12/ 网包/ 分类/ 算法/ 在/ 多/ 核/ 处理器/ 上/ 的/ 性能/ (/ 16/ 核/ )/ 4.2/ 基于/ FPGA/ 平台/ 的/ 网包/ 分类/ 系统/ 参考/ 已有/ 的/ 基于/ FPGA/ 的/ 网包/ 分类/ 算法/ 实现/ [/ 62/ -/ 68/ ]/ ,/ 在/ 测试/ 中/ 我们/ 使用/ 了/ XilinxVirtex/ -/ 6/ (/ mod/ -/ el/ :/ XC6VSX475T/ )/ 芯片/ ./ 该/ 芯片/ 的/ 计算资源/ 为/ 37440/ 可编程/ 逻辑/ 单元/ (/ configurablelogicblocks/ )/ ./ 包含/ 7640K/ 比特/ 分布式/ 存储单元/ (/ DistributedRAM/ )/ 以及/ 38304K/ 比特/ 块/ 存储单元/ (/ BlockRAMs/ )/ ./ 所有/ 实验/ 结果/ 使用/ Xillinx/ 的/ ISE/ 仿真/ 平台/ 获取/ ./ 从表/ 5/ 的/ 数据/ 比较/ 可以/ 看出/ ,/ FPGA/ -/ Split/ 算法/ 在/ 单一/ FPGA/ 平台/ 上/ 可以/ 达到/ 142Gbps/ 的/ 吞吐/ 率/ (/ 测试/ 使用/ 64/ 字节/ 网包/ )/ ./ FPGA/ 的/ 最高/ 可用/ 时钟/ 频率/ 会/ 随着/ 分类/ 规则/ 个数/ 增加/ 而/ 降低/ ./ 这是/ 由于/ 规则/ 数/ 增多/ 导致/ 内存/ 使用/ 增多/ ,/ 从而/ 增加/ 了/ FPGA/ 内部/ 互联/ 的/ 复杂性/ ,/ 进而/ 导致/ 电路/ 延迟/ 增加/ 及时/ 钟/ 频率/ 下降/ ./ 从/ 逻辑/ 和/ 存储单元/ 使用率/ 上/ 可见/ ,/ 当前/ 商用/ FPGA/ 芯片/ 已经/ 可以/ 支持/ 大规模/ 高性能/ 的/ 网包/ 分类/ 实现/ ./ 规则/ 个数/ 100139.1142444/ // 3744010/ // 5161000134.0137602/ // 3744018/ // 51610000115.4118747/ // 37440103/ // 516/ 表/ 6/ 比较/ 了/ 多种/ 算法/ 在/ 不同/ 平台/ 上/ 的/ 进行/ 64/ 字节/ 网包/ 分类/ 的/ 吞吐/ 率/ ./ 由/ 该表/ 可知/ ,/ 基于/ 多核/ 处理器/ 的/ 网包/ 分类/ 可以/ 达到/ 10Gbps/ 吞吐/ 率/ ,/ 而/ 基于/ FPGA/ 的/ 硬件/ 实现/ 可以/ 达到/ 100Gbps/ 或/ 更/ 高/ 的/ 性能/ ./ 不同/ 的/ 处理器/ 平台/ 适用/ 于/ 不同/ 的/ 网络应用/ ,/ 其/ 开发/ 难度/ 、/ 系统/ 功耗/ 、/ 可/ 拓展/ 性/ 也/ 各有不同/ ./ 多核/ 平台/ 可以/ 有效/ 用于/ 多/ 业务/ 的/ 处理/ ,/ 如/ 包含/ 网包/ 分类/ 功能/ 的/ 安全/ 网关/ 实现/ 等/ ./ 硬件/ 系统/ 则/ 更/ 适用/ 于/ 高性能/ 网络/ 交换/ 设备/ ,/ 为/ 其/ 提供/ 100Gbps/ 以上/ 的/ 网包/ 分类/ 功能/ ./ 基于/ FPGA/ 的/ FPGA/ -/ Split/ 算法/ 基于/ OCTEON3860/ 的/ HyperSplit/ 算法/ 基于/ IXP2850/ 的/ AggreCuts/ 算法/ 5/ 结论/ 和/ 展望/ 本文/ 从/ 理论/ 分析/ 、/ 算法/ 设计/ 和/ 系统/ 实现/ 三/ 方面/ 介绍/ 和/ 分析/ 了/ 近年来/ 高性能/ 网包/ 分类/ 算法/ 的/ 研究成果/ ./ 首先/ 利用/ 计算/ 几何/ 领域/ 中/ 的/ 相关/ 数学方法/ ,/ 阐明/ 了/ 网包/ 分类/ 问题/ 的/ 理论/ 方法/ 及/ 复杂度/ 分析/ ,/ 指出/ 不同/ 类型/ 的/ 网包/ 分类/ 算法/ 普遍/ 遵循/ 的/ 理论依据/ ./ 接下来/ ,/ 对/ 具有/ 影响力/ 的/ 网包/ 分类/ 算法/ 按照/ 不同/ 的/ 研究/ 方向/ 进行/ 了/ 归类/ ,/ 同时/ 结合/ 自身/ 研究成果/ 对/ 不同/ 类别/ 算法/ 的/ 设计/ 思路/ 行/ 了/ 深入分析/ ./ 最后/ ,/ 将/ 几类/ 具有/ 代表性/ 的/ 网包/ 分类/ 算法/ 分别/ 实现/ 于/ 多/ 核/ 网络/ 处理器/ 平台/ 以及/ FPGA/ 硬件平台/ 上/ ,/ 并/ 通过/ 实际/ 测试/ 比较/ 了/ 不同/ 类型/ 算法/ 在/ 不同/ 系统/ 平台/ 上/ 的/ 真实性/ 能/ ./ 总而言之/ ,/ 理论/ 分析/ 为/ 网包/ 分类/ 算法/ 研究/ 指明/ 了/ 方向/ ./ 但/ 数学方法/ 的/ 复杂度/ 并/ 不能/ 代表/ 实际/ 应用/ 的/ 情况/ ./ 因此/ 在/ 算法/ 设计/ 中/ ,/ 往往/ 利用/ 启发式/ 方法/ 、/ 数据结构/ 压缩/ 方法/ 、/ 并行处理/ 方法/ 来/ 消除/ 规则/ 冗余/ ,/ 提高/ 分类/ 速率/ ./ 此外/ ,/ 不同/ 的/ 网包/ 分类/ 算法/ 实现/ 于/ 不同/ 的/ 软硬件/ 平台/ 时/ ,/ 需要/ 依据/ 平台/ 的/ 计算/ 、/ 存储/ 、/ 总线/ 等/ 特性/ 进行/ 优化/ ,/ 否则/ 无法/ 有效/ 利用/ 系统资源/ 以/ 获取/ 最优/ 的/ 网包/ 分类/ 性能/ ./ 随着/ 云/ 计算/ 数据中心/ 、/ 移动/ 互联网/ 、/ 大规模/ 物/ 联网/ 等/ 新兴/ 网络/ 的/ 出现/ ,/ 网包/ 分类/ 算法/ 的/ 研究/ 将/ 面临/ 新/ 的/ 挑战/ ./ 首先/ 是/ 性能/ 的/ 需求/ ,/ 支持/ 百万/ 规则/ 的/ 具备/ T/ 比特/ 吞吐/ 率/ 的/ 网包/ 分类/ 算法/ 将/ 成为/ 研究/ 热点/ ,/ 这/ 类/ 算法/ 可以/ 满足/ 未来/ 骨干/ 网络/ 和/ 数据中心/ 网络/ 的/ 带宽/ ./ 其次/ 是/ 业务/ 的/ 需求/ ,/ 具备/ 网络/ 业务/ 识别/ 能力/ 的/ 应用层/ 网包/ 分类/ 算法/ 将/ 有/ 重要/ 研究/ 价值/ ,/ 这/ 类/ 算法/ 将/ 为/ 网络/ 融合/ 提供/ 多/ 业务/ 的/ 管控/ 机制/ 及/ 服务质量/ 保证/ ./ 最后/ ,/ 网包/ 分类/ 算法/ 的/ 芯片/ 化/ 研究/ 也/ 具有/ 重要/ 意义/ ,/ 具备/ 高速/ 网包/ 分类/ 功能/ 的/ 网络/ 处理器/ 将/ 有力/ 推动/ 下一代/ 互联网/ 设备/ 的/ 发展/ ./ 

