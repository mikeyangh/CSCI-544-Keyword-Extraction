Page1/ 最多/ 叶子/ 生成/ 树/ 问题/ 的/ 核化/ 算法/ 高文宇/ (/ 广东/ 商学院/ 信息/ 学院/ 广州/ 510320/ )/ 摘要/ 对/ 算法/ 领域/ 的/ 最/ 多/ 叶子/ 生成/ 树/ 问题/ 进行/ 了/ 深入研究/ ,/ 提出/ 了/ 对/ 简单/ 连通/ 图/ 2/ 度/ 节点/ 的/ 化简/ 规则/ ,/ 并/ 证明/ 了/ 不/ 含/ 2/ 度/ 节点/ 的/ 图/ 的/ 生成/ 树/ 的/ 叶子/ 节点/ 数/ 的/ 下限/ 为/ (/ N/ +/ 6/ )/ // 4/ ,/ 给出/ 了/ 构造/ 这样/ 一棵/ 生成/ 树/ 的/ 构造性/ 方法/ ./ 基于/ 上述/ 化简/ 规则/ 和/ 所/ 证明/ 的/ 结论/ ,/ 给出/ 了/ 最/ 多/ 叶子/ 生成/ 树/ 问题/ 的/ 核化/ 算法/ ,/ 该/ 核化/ 算法/ 可以/ 在/ O/ (/ n2/ )/ 时间/ 内/ 得到/ 一个/ 4k/ -/ 6/ 大小/ 的/ 线性/ 核/ ./ 对于/ 这样/ 一个/ 较/ 小/ 的/ 核/ ,/ 将/ 大大提高/ 相关/ 的/ 参数/ 算法/ 和/ 近似算法/ 的/ 性能/ ./ 关键词/ 最/ 多/ 叶子/ 生成/ 树/ ;/ 核化/ ;/ 参数/ 算法/ 1/ 引言/ 最多/ 的/ 叶子/ 节点/ ./ 从/ 最优化/ 问题/ 的/ 角度/ 来说/ ,/ MLST/ 与/ 另/ 一个/ 著名/ 的/ 图/ 问题/ “/ 最小/ 连通/ 支配/ 集/ ”/ 问题/ (/ MinimumConnectedDominatingSet/ ,/ MCDS/ )/ 是/ 等价/ 的/ ./ 即/ 若/ 在/ 给定/ 图/ G/ 中/ 找到/ 有/ 最/ 多/ 叶子/ 的/ 生成/ 树/ ,/ 则/ 该/ 生成/ 树中/ 的/ 非/ 叶子/ 节点/ 就/ 构成/ 一个/ 最小/ 连通/ 支配/ 集/ ,/ 反之/ 亦/ 成立/ ./ 但是/ 从/ NP/ 完全/ 理论/ 的/ 角度/ ,/ 即/ 如果/ 我们/ 考虑/ 该/ 问题/ 的/ “/ 判定/ 问题/ ”/ 版本/ ,/ 则/ 这/ 两个/ 问题/ 并非/ 是/ 等价/ 的/ ,/ 而是/ 构成/ 一对/ 对偶/ 问题/ [/ 3/ ]/ ,/ 这/ 对/ 对偶/ 问题/ 解决/ 的/ 方法/ 和/ 难度/ 自然/ 也/ 不/ 一样/ ./ 2/ 相关/ 研究/ 2.1/ MLST/ 问题/ 早期/ 的/ 理论/ 研究/ 对于/ MLST/ 问题/ ,/ 早期/ Lovasz/ 、/ Payan/ 和/ Storer/ [/ 4/ -/ 5/ ]/ 等/ 人/ 研究/ 了/ 一个/ 变形/ 问题/ ,/ 即/ 节点/ 度为/ 3/ 的/ n/ 个节/ Page2/ 点/ 构成/ 的/ 连通/ 图/ ,/ 其/ 生成/ 树/ 的/ 叶子/ 数/ 至少/ 可以/ 达到/ 多少/ ./ 随后/ ,/ 在/ 文献/ [/ 6/ -/ 7/ ]/ 中/ 都/ 独立/ 地/ 证明/ 了/ 节点/ 度/ 至少/ 为/ 3/ 的/ n/ 个/ 节点/ 构成/ 的/ 连通/ 图/ ,/ 其/ 生成/ 树/ 的/ 叶子/ 数/ 至少/ 可以/ 达到/ n/ // 4/ +/ 2.20/ 世纪/ 80/ 年代/ 以来/ ,/ 图子式/ (/ GraphMinor/ )/ 理论/ [/ 8/ ]/ 的/ 发展/ 对/ 算法/ 研究/ 带来/ 了/ 新/ 的/ 思路/ ./ 在/ 文献/ [/ 9/ ]/ 中/ Fellows/ 等/ 人/ 利用/ 图子式/ 理论/ 对/ 若干/ 组合/ 优化/ 问题/ 进行/ 了/ 研究/ ,/ 其中/ 借助/ 图子式/ 理论/ 对/ MLST/ 问题/ 也/ 给出/ 了/ 一个/ 极富/ 创见/ 的/ 解/ ./ 给定/ 一个/ 图集/ F/ ,/ F/ 中/ 的/ 图/ 没有/ 哪/ 一个/ 图/ 具有/ 一棵/ 生成/ 树/ ,/ 使得/ 该/ 生成/ 树有/ 大于/ 等于/ k/ 个/ 叶子/ 节点/ ./ 显然/ ,/ 图集/ F/ 中任/ 意图/ 的/ 子式/ 也/ 不会/ 有/ 叶子/ 节点/ 数/ 大于/ 等于/ k/ 的/ 生成/ 树/ ,/ 这种/ 特性/ 我们/ 称之为/ 图集/ F/ 关于/ 子/ 式/ 运算/ 封闭/ ./ 那么/ 根据/ 图子式/ 定理/ ,/ 图集/ F/ 的/ 障碍/ 集/ (/ obstructions/ )/ 是/ 有限/ 的/ ,/ 而且/ 可以/ 在/ 多项式/ 时间/ 内/ 识别/ 出/ 这些/ 障碍/ 集/ ,/ 因此/ MLST/ 问题/ 可以/ 在/ 多项式/ 时间/ 内/ 求解/ ./ 但/ 遗憾/ 的/ 是/ ,/ 目前/ 很多/ 利用/ 图子式/ 理论/ 进行/ 的/ 研究/ 主要/ 是/ 证明/ 了/ 解决问题/ 的/ 时间/ 复杂度/ 上限/ ,/ 其/ 方法/ 是非/ 构造性/ 的/ 理论/ 证明/ ,/ 即/ 可以/ 证明/ 这个/ 多项式/ 时间/ 的/ 算法/ 是/ 存在/ 的/ ,/ 但/ 我们/ 并不知道/ 这个/ 算法/ 的/ 任何/ 细节/ ,/ 也就是说/ ,/ 我们/ 需要/ 去/ 寻找/ 一个/ 可行/ 的/ 构造性/ 算法/ ,/ 而且/ 子/ 式/ 包含/ 判定/ 算法/ 中/ 包含/ 着/ 极大/ 的/ 常数/ 项/ ,/ 也/ 使得/ 这/ 类/ 算法/ 在/ 实际/ 应用/ 中/ 存在/ 问题/ ./ 2.2/ MLST/ 问题/ 的/ 近似算法/ 对于/ MLST/ 问题/ 研究/ 的/ 另/ 一个/ 途径/ 是/ 寻找/ 有效/ 的/ 近似算法/ ./ 其中/ 最/ 重要/ 的/ 进展/ 之一/ 是/ Lu/ 在/ 文献/ [/ 10/ ]/ 中/ 提出/ 的/ 一个/ 3/ -/ 近似算法/ ./ 在/ 该文/ 中/ ,/ 给出/ 了/ 一个/ 贪婪/ 算法/ ,/ 首先/ 在/ 给定/ 的/ 图/ G/ 中/ 构造/ 出/ 一个/ 最大/ 的/ 多叶/ 森林/ (/ maximallyleafyforest/ )/ F/ ,/ 然后/ 通过/ 向/ F/ 中/ 添加/ 一些/ 边来/ 连通/ F/ 中/ 的/ 子树/ ,/ 从而/ 最终/ 得到/ 图/ G/ 的/ 一棵/ 生成/ 树/ ./ 文中/ 证明/ 了/ 通过/ 最大/ 多叶/ 森林/ 构造/ 出来/ 的/ 生成/ 树/ 的/ 叶子/ 节点/ 数/ 至少/ 是/ 图/ G/ 的/ 任意/ 生成/ 树/ 的/ 叶子/ 节点/ 数/ 的/ 1/ // 3/ ,/ 因此/ 该/ 贪婪/ 算法/ 是/ 一个/ 3/ -/ 近似算法/ ./ 在/ 一些/ 特殊/ 图中/ ,/ 近似算法/ 取得/ 了/ 更好/ 的/ 结果/ ,/ 文献/ [/ 11/ ]/ 中/ 得到/ 了/ 立方体/ 图中/ MLST/ 问题/ 的/ 3/ // 2/ -/ 近似算法/ ./ 2.3/ 参数/ 算法/ 在/ 解决/ MLST/ 相关/ 问题/ 中/ 的/ 进展/ 对于/ 一些/ 组合/ 优化/ 问题/ ,/ 参数/ 理论/ 是/ 一个/ 很/ 好/ 的/ 解决方案/ ./ 经过/ 近年来/ 的/ 一些/ 研究/ ,/ 参数/ 算法/ 在/ 很多/ 与/ MLST/ 问题/ 相关/ 的/ 问题/ 上/ 都/ 取得/ 了/ 很/ 好/ 的/ 成果/ ,/ 如/ 平面图/ 的/ 支配/ 集/ 问题/ 等/ ./ 参数/ 理论/ 的/ 研究/ 最初/ 来源于/ 观察/ 到/ 很多/ 计算/ 问题/ 都/ 与/ 一个/ 取值/ 范围/ 很小/ 的/ 重要/ 参数/ 相/ 联系/ ,/ 利用/ 参数/ 的/ 性质/ 可以/ 在/ 一定/ 程度/ 上/ 加速/ 计算/ ./ 应用/ 参数/ 理论/ 来/ 求解/ NP/ 难/ 问题/ 时/ ,/ 首先/ 要/ 将/ 该/ 问题/ 转化/ 为/ 参数/ 化/ 问题/ ./ 参数/ 化/ 问题/ Q/ 是/ 一个/ 用/ 二元/ 组/ (/ x/ ,/ k/ )/ 表示/ 的/ 判定/ 问题/ ,/ 其中/ x/ 代表/ 一个/ 具体/ 的/ 问题/ ,/ k/ 是/ 一个/ 非负/ 整数/ ,/ 称为/ 参数/ ./ 然后/ 应用/ 参数/ 理论/ 的/ 算法/ 技术/ 对/ 参数/ 化/ 问题/ Q/ 加以/ 求解/ ./ 若/ 我们/ 能够/ 设计/ 一种/ 参数/ 化/ 求解/ 算法/ ,/ 其/ 时间/ 复杂度/ 形如/ O/ (/ f/ (/ k/ )/ |/ x/ |/ c/ )/ ,/ 则/ 我们/ 把/ 该/ 问题/ Q/ 称为/ 固定/ 参数/ 可解/ 的/ 问题/ (/ FixedParameterTractable/ ,/ FPT/ )/ ,/ 简称/ FPT/ 问题/ ./ FPT/ 算法/ 设计/ 技术/ 的/ 研究/ 一直/ 是/ 参数/ 理论/ 中/ 的/ 研究/ 热点/ ./ 核化/ (/ kernelization/ )/ 是/ 设计/ FPT/ 算法/ 的/ 主要/ 技术/ 之一/ ./ 参数/ 理论/ 中/ 的/ 一个/ 最/ 重要/ 的/ 定理/ 就是/ :/ 一个/ 参数/ 化/ 问题/ 是/ FPT/ 问题/ 当且/ 仅/ 当该/ 问题/ 是/ 可/ 核化/ 的/ ./ 因此/ ,/ 在/ 参数/ 算法/ 设计/ 中/ ,/ 核化/ 技术/ 应用/ 最为/ 广泛/ ./ 核化/ 是/ 指/ 如果/ 存在/ 一个/ 多项式/ 时间/ 算法/ K/ 和/ 一个/ 递归函数/ g/ ,/ 使得/ 对于/ 参数/ 问题/ Q/ 的/ 任意/ 一个/ 实例/ (/ x/ ,/ k/ )/ ,/ 应用/ 算法/ K/ 将/ Q/ 转化/ 为/ 一个/ 新/ 实例/ (/ x/ ,/ k/ )/ ,/ 使得/ |/ x/ |/ / g/ (/ k/ )/ 和/ k/ / k/ ,/ 并/ 满足/ 当且/ 仅/ 当/ (/ x/ ,/ k/ )/ 是/ 参数/ 问题/ Q/ 的/ 一个/ 真实/ 例/ ,/ (/ x/ ,/ k/ )/ 也/ 是/ Q/ 的/ 一个/ 真实/ 例/ ,/ 则/ 我们/ 说/ 参数/ 问题/ Q/ 是/ 可/ 核化/ 的/ ,/ 算法/ K/ 称为/ 核化/ 算法/ ,/ 新/ 实例/ (/ x/ ,/ k/ )/ 称为/ 核心/ 化后/ 的/ 问题/ 核/ ./ 核化/ 后/ 问题/ 规模/ 极大/ 地/ 降低/ ./ 核/ 的/ 大小/ 可能/ 是/ 参数/ k/ 的/ 线性/ 式/ (/ 线性/ 核/ )/ ,/ 也/ 可能/ 是/ 参数/ k/ 的/ 多项式/ (/ 多项式/ 核/ )/ ,/ 甚至/ 是/ 参数/ k/ 的/ 非/ 多项式/ ./ 事实上/ ,/ 一个/ 规模/ 极大/ 降低/ 的/ 核/ 不仅/ 可以/ 用于/ 设计/ 参数/ 算法/ ,/ 也/ 可/ 用于/ 近似算法/ 的/ 设计/ ./ 因此/ 核化/ 算法/ 一直/ 是/ 参数/ 理论/ 研究/ 的/ 一个/ 热点/ 领域/ ./ 对于/ MLST/ 问题/ 的/ 参数/ 算法/ 研究/ ,/ 文献/ [/ 12/ ]/ 提出/ 了/ 一种/ 分支/ 算法/ 能用/ O/ (/ 4kpoly/ (/ n/ )/ )/ 时间/ 解决/ 该/ 问题/ ,/ 文献/ [/ 13/ ]/ 则/ 借助于/ MLST/ 问题/ 的/ 对偶/ 问题/ 即/ 连通/ 支配/ 集/ 问题/ 的/ 一些/ 研究成果/ ,/ 提出/ 了/ 一个/ 时间/ 复杂度/ 为/ O/ (/ 1.8966/ n/ )/ 的/ 算法/ ./ MLST/ 问题/ 的/ 一个/ 变形/ 就是/ 求/ 有向图/ 中/ 的/ 多/ 叶子/ 生成/ 树/ (/ DirectedMaximumLeafSpanningOut/ -/ Tree/ )/ ,/ 由于/ 有向图/ 中弧/ 的/ 单向性/ ,/ 使得/ 用于/ 无向/ 图/ MLST/ 问题/ 的/ 一些/ 方法/ 如图子式/ 理论/ 和/ 文献/ [/ 4/ -/ 7/ ]/ 中/ 的/ 方法/ 都/ 无法/ 直接/ 应用/ 于/ 有向图/ 中/ 变形/ 问题/ 的/ 求解/ ./ 文献/ [/ 14/ ]/ 给出/ 了/ 有向图/ 多/ 叶子/ 生成/ 树/ 问题/ 的/ 一个/ 时间/ 复杂度/ 为/ 2O/ (/ klogk/ )/ ·/ nO/ (/ 1/ )/ 的/ 参数/ 算法/ ,/ 这/ 也/ 证明/ 了/ 该/ 问题/ 也/ 是/ 属于/ FPT/ 类/ 的/ ./ 文献/ [/ 15/ ]/ 进一步/ 研究/ 了/ 有向图/ 的/ 多/ 叶子/ 生成/ 树/ 问题/ ,/ 得到/ 了/ 一个/ 该/ 问题/ 的/ 平方/ 核/ ,/ 文献/ [/ 16/ ]/ 则/ 研究/ 了/ 有/ 向/ 无/ 环图/ 中/ 的/ 多/ 叶子/ 生成/ 树/ 问题/ ,/ 其/ 结论/ 是/ ,/ 若/ 限定/ 在/ 有/ 向/ 无/ Page3/ 环图/ 中/ ,/ 则/ 该/ 问题/ 存在/ 大小/ 为/ 6.6/ (/ k/ +/ 2/ )/ 的/ 线性/ 核/ ./ 对于/ 与/ MLST/ 问题/ 密切相关/ 的/ 支配/ 集/ 问题/ 的/ 核化/ 算法/ 研究/ ,/ 近年来/ 也/ 取得/ 了/ 重要/ 的/ 进展/ ./ 如前所述/ ,/ 连通/ 支配/ 集/ 问题/ 和/ MLST/ 问题/ 构成/ 一对/ 对偶/ 问题/ ,/ 但是/ 它们/ 的/ 解决办法/ 和/ 难度/ 都/ 是/ 不/ 一样/ 的/ ./ 早期/ 的/ 研究/ 表明/ ,/ 参数/ 化/ 支配/ 集/ 问题/ 是/ 一个/ W/ [/ 2/ ]/ 完全/ 问题/ [/ 17/ ]/ ,/ 因此/ 它/ 不是/ FPT/ 可解/ 的/ ./ 但是/ 将/ 参数/ 化/ 支配/ 集/ 问题/ 限定/ 在/ 平面图/ 这样/ 一个/ 背景/ 下/ (/ 也就是说/ 要/ 判定/ 在/ 一个/ 平面图/ 中/ 是否/ 存在/ 大小/ 为/ k/ 的/ 支配/ 集/ )/ ,/ 则/ 平面图/ 支配/ 集/ 问题/ 可以/ 在/ O/ (/ c/ 槡/ k/ ·/ n/ )/ 时间/ 求解/ ,/ 其中/ c/ / 4/ 槡/ 634/ [/ 18/ ]/ ,/ 随后/ ,/ 常数/ c/ 的/ 上界/ 又/ 被/ 优化/ 到/ 227/ [/ 19/ ]/ 以及/ 215.13/ [/ 20/ ]/ ./ 最近/ 的/ 研究/ 表明/ ,/ 在/ 平面图/ 上/ 求解/ 支配/ 集/ ,/ 通过/ 两个/ 图/ 归约/ 和/ 预处理/ 技术/ ,/ 可以/ 得到/ 一个/ 不/ 超过/ 335k/ 大小/ 的/ 核/ [/ 21/ ]/ ,/ 这个/ 线性/ 核/ 完全/ 独立/ 于/ 原始/ 图/ 的/ 规模/ ./ 随后/ ,/ Chen/ [/ 3/ ]/ 设计/ 的/ 核化/ 算法/ 将/ 平面图/ 支配/ 集/ 问题/ 的/ 核/ 进一步/ 降低/ 到/ 67k/ ./ 由于/ k/ 相对/ n/ 通常/ 是/ 很小/ 的/ 数/ ,/ 问题/ 的/ 规模/ 就/ 从/ n/ 降低/ 到/ k/ 的/ 线性/ 函数/ ,/ 这/ 也/ 就/ 大大降低/ 了/ 问题/ 的/ 规模/ ./ 因此/ 参数/ 算法/ 技术/ 在/ 一些/ 问题/ 的/ 求解/ 上/ 是/ 极其/ 有益/ 的/ ./ 3/ 最多/ 叶子/ 生成/ 树/ 问题/ 的/ 核化/ 算法/ 对于/ MLST/ 问题/ 的/ 核化/ ,/ 我们/ 所/ 做/ 的/ 工作/ 如下/ :/ (/ 1/ )/ 首先/ 设计/ 了/ 一些/ 化简/ 规则/ 对/ 给定/ 的/ 图/ 中/ 的/ 2/ 度/ 节点/ 进行/ 化简/ ,/ 消/ 去/ 原图/ 中/ 的/ 2/ 度/ 节点/ ,/ 并且/ 化简/ 后/ 的/ 图/ 和/ 原图/ 在/ 求解/ MLST/ 问题/ 上/ 是/ 等价/ 的/ ./ (/ 2/ )/ 化简/ 后/ 的/ 图/ 中/ 只/ 存在/ 1/ 度/ 节点/ 和度/ 大于/ 等于/ 3/ 的/ 节点/ ./ 我们/ 证明/ 了/ 在/ 这种/ 图中/ ,/ 其/ 生成/ 树/ 的/ 叶子/ 节点/ 数/ 至少/ 可以/ 达到/ (/ N/ +/ 6/ )/ // 4/ (/ 其中/ N/ 为/ 化简/ 后/ 的/ 图/ 的/ 节点/ 数/ )/ ,/ 并/ 给出/ 构造/ 这样/ 的/ 生成/ 树/ 的/ 构造性/ 方法/ ./ (/ 3/ )/ 对于/ MLST/ 问题/ ,/ 若/ k/ / (/ N/ +/ 6/ )/ // 4/ ,/ 则/ 回答/ “/ 是/ ”/ ,/ 即/ 原图/ 中/ 存在/ 一棵/ 生成/ 树/ ,/ 其/ 叶子/ 节点/ 至少/ 有/ k/ 个/ ;/ 若/ k/ >/ (/ N/ +/ 6/ )/ // 4/ ,/ 则/ N/ </ 4k/ -/ 6/ ,/ 即/ 化简/ 后/ 的/ 图/ 的/ 节点/ 数/ 小于/ 4k/ -/ 6/ ,/ 这是/ 一个/ 与/ 原图/ 的/ 节点/ 规模/ 无关/ 的/ 线性/ 核/ ./ 3.1/ 基本概念/ 需/ 满足/ 以下/ 条件/ :/ 下面/ 对/ 相关/ 问题/ 给出/ 详细/ 的/ 描述/ ./ 定义/ 1/ ./ 图/ G/ =/ (/ V/ ,/ E/ )/ 称为/ 简单/ 连通/ 无向/ 图/ ,/ (/ 1/ )/ G/ 为/ 无自/ 回路/ 的/ 、/ 连通/ 的/ 无/ 向/ 图/ ./ (/ 2/ )/ G/ 中/ 任意/ 两个/ 节点/ 之间/ 至多/ 有/ 一条/ 边/ ./ 定义/ 2/ ./ 图/ G/ 中/ 节点/ u/ 和/ 节点/ v/ 之间/ 存在/ 一条/ 边/ ,/ 则/ 称/ 节点/ u/ 与/ 节点/ v/ 相邻/ ./ 定义/ 3/ (/ d/ 度/ 节点/ )/ ./ 图/ G/ =/ (/ V/ ,/ E/ )/ 中/ 的/ 任意/ 节点/ u/ ,/ 称/ u/ 在/ 图/ 中/ 的/ 相邻/ 节点/ 的/ 个数/ 为/ 节点/ u/ 的/ 度/ ,/ 记为/ D/ (/ u/ )/ ./ 假设/ D/ (/ u/ )/ =/ d/ ,/ 则/ 将/ 节点/ u/ 称为/ d/ 度/ 节点/ ./ 定义/ 4/ (/ MLST/ 问题/ )/ ./ 给定/ 简单/ 连通/ 无向/ 图/ G/ =/ (/ V/ ,/ E/ )/ 以及/ 非负/ 整数/ k/ ,/ 问图/ G/ 中/ 是否/ 包含/ 一棵/ 生成/ 树/ T/ ,/ 使得/ 生成/ 树/ T/ 中度/ 为/ 1/ 的/ 节点/ (/ 即/ 叶子/ 节点/ )/ 总数/ 至少/ 为/ k/ ./ 定义/ 5/ (/ 边/ 的/ 收缩/ )/ ./ 图/ G/ 中/ ,/ 端点/ 为/ u/ 和/ v/ 的/ 边/ e/ 的/ 收缩/ ,/ 就是/ 用/ 一个/ 新/ 顶点/ w/ 代替/ u/ 和/ v/ 并且/ 与/ 新/ 顶点/ w/ 关联/ 的/ 边/ 包括/ 除/ e/ 之外/ 的/ 所有/ 与/ u/ 和/ v/ 关联/ 的/ 边/ (/ 参见/ 图/ 1/ )/ ./ 定义/ 6/ (/ 2/ 度/ 节点/ 的/ 压缩/ )/ ./ 图/ G/ 中/ ,/ 若/ 存在/ 一个/ 2/ 度/ 节点/ x/ ,/ 则/ 对/ 该/ 2/ 度/ 节点/ 的/ 压缩/ 就是/ 删除/ 该/ 2/ 度/ 节点/ 及其/ 相邻/ 的/ 两条/ 边/ ,/ 然后/ 将/ 该/ 2/ 度点/ 原来/ 的/ 两个/ 相邻/ 节点/ 用/ 一条/ 边/ 连接起来/ (/ 参见/ 图/ 2/ )/ ./ 3.22/ 度/ 节点/ 的/ 化简/ 规则/ 通过/ 对/ 简单/ 连通/ 无向/ 图中/ 2/ 度/ 节点/ 的/ 研究/ ,/ 我们/ 可以/ 得到/ 如下/ 的/ 一些/ 化简/ 规则/ ./ (/ 1/ )/ 若/ 2/ 度/ 节点/ 的/ 其中/ 一个/ 相邻/ 节点/ 的/ 度/ 为/ 1/ ,/ 则/ 该/ 2/ 度/ 节点/ 可以/ 被/ 压缩/ ,/ 该/ 2/ 度/ 节点/ 被/ 压缩/ 后/ 的/ 图/ 与/ 原图/ 在/ 求解/ MLST/ 问题/ 上/ 是/ 等价/ 的/ ,/ 即/ 原图/ 中若/ 存在/ 叶子/ 数/ 至少/ 为/ k/ 的/ 生成/ 树/ ,/ 则/ 化简/ 后/ 的/ 图/ 中/ 亦/ 存在/ ;/ 若/ 原图/ 中/ 不/ 存在/ ,/ 则/ 化简/ 后/ 的/ 图/ 中/ 也/ 不/ 存在/ ./ 这种/ 情况/ 是/ 显然/ 的/ ,/ 因为/ 图中/ 的/ 1/ 度/ 节点/ 必定/ 是/ 最终/ 生成/ 树中/ 的/ 叶子/ 节点/ ,/ 因此/ 与/ 1/ 度/ 节点/ 相邻/ 的/ 2/ 度/ 节点/ 必定/ 不是/ 最终/ 生成/ 树/ 的/ 叶子/ 节点/ ,/ 因此/ 可/ Page4/ 以/ 被/ 压缩/ ./ 被/ 压缩/ ,/ 压缩/ 后见/ 图/ 3/ (/ b/ )/ ./ 图/ 3/ (/ a/ )/ 中/ 的/ 节点/ x/ 就是/ 这种/ 情况/ ,/ 节点/ x/ 可以/ (/ 2/ )/ 若/ 2/ 度/ 节点/ 的/ 两个/ 相邻/ 节点/ 都/ 是/ 2/ 度/ 节点/ ,/ 则/ 该/ 二度/ 节点/ 也/ 可以/ 被/ 压缩/ ,/ 压缩/ 后/ 的/ 图/ 与/ 原图/ 在/ 求解/ MLST/ 问题/ 上/ 是/ 等价/ 的/ ./ 图/ 4/ (/ a/ )/ 中/ 的/ 节点/ x/ 就是/ 这种/ 情况/ ,/ 节点/ x/ 可以/ 被/ 压缩/ ,/ 压缩/ 后见/ 图/ 4/ (/ b/ )/ ./ 如图/ 4/ (/ a/ )/ ,/ 在/ 这种/ 情况/ 中/ ,/ p/ -/ u/ -/ x/ -/ v/ -/ q/ 这条/ 路径/ 在/ 最终/ 的/ 生成/ 树中/ 可能/ 被/ 断开/ ,/ 断开/ 后/ 符合/ 情况/ (/ 1/ )/ ,/ 其中/ 一个/ 节点/ 可/ 被/ 压缩/ ;/ 若/ p/ -/ u/ -/ x/ -/ v/ -/ q/ 这条/ 路径/ 在/ 最终/ 的/ 生成/ 树中/ 没有/ 被/ 断开/ ,/ 则/ 节点/ x/ 也/ 不是/ 叶子/ 节点/ ;/ 因此/ x/ 被/ 压缩/ 后/ 的/ 图/ 与/ 原图/ 在/ 求解/ MLST/ 问题/ 上/ 是/ 等价/ 的/ ./ (/ 3/ )/ 若/ 2/ 度/ 节点/ 的/ 两个/ 相邻/ 节点/ 中/ ,/ 其中/ 一个/ 相邻/ 节点/ 的/ 度/ 为/ 2/ ,/ 另/ 一个/ 相邻/ 节点/ 的/ 度/ 大于/ 等于/ 3/ ./ 事实上/ 这/ 就是/ 两个/ 2/ 度/ 节点/ 相邻/ ,/ 然后/ 它们/ 分别/ 再/ 与/ 一个/ 大于/ 等于/ 3/ 度/ 的/ 节点/ 相邻/ ./ 图/ 5/ (/ a/ )/ 中/ 的/ 节点/ u/ 、/ v/ 都/ 属于/ 这种/ 情况/ ,/ 因此/ 我们/ 将/ u/ 、/ v/ 合并/ 在/ 一起/ 考虑/ ./ 若/ 这/ 两个/ 相邻/ 的/ 2/ 度/ 节点/ u/ 、/ v/ 各自/ 的/ 另/ 一个/ 相邻/ 节点/ p/ 、/ q/ 之间/ 除/ 路径/ p/ -/ u/ -/ v/ -/ q/ 之外/ 再/ 无/ 别的/ 连通/ 路径/ ,/ 则/ 2/ 度/ 节点/ u/ 、/ v/ 可以/ 被/ 压缩/ ,/ 压缩/ 后见/ 图/ 5/ (/ b/ )/ ./ 若/ 这/ 两个/ 相邻/ 的/ 2/ 度/ 节点/ u/ 、/ v/ 各自/ 的/ 另/ 一个/ 相邻/ 节点/ p/ 、/ q/ 之间/ 除/ 路径/ p/ -/ u/ -/ v/ -/ q/ 之外/ 还有/ 别的/ 连通/ 路径/ ,/ 示意图/ 见图/ 5/ (/ c/ )/ ,/ 则/ 2/ 度/ 节点/ u/ 、/ v/ 之间/ 的/ 边/ 可以/ 断开/ ,/ 因为/ 断开/ 此边/ 可以/ 获得/ 两个/ 叶子/ 节点/ ,/ 断开/ 后/ 的/ 情况/ 见图/ 5/ (/ d/ )/ ./ (/ 4/ )/ 若/ 2/ 度/ 节点/ 的/ 两个/ 相邻/ 节点/ 的/ 度/ 都/ 大于/ 等于/ 3/ ./ 图/ 6/ (/ a/ )/ 中/ 的/ 节点/ u/ 就/ 属于/ 这种/ 情况/ ./ 若/ 这个/ 2/ 度/ 节点/ u/ 的/ 两个/ 相邻/ 节点/ p/ 、/ q/ 之间/ 除/ 路径/ p/ -/ u/ -/ q/ 之外/ 再/ 无/ 别的/ 连通/ 路径/ ,/ 则/ 2/ 度/ 节点/ u/ 可以/ 被/ 压缩/ ,/ 压缩/ 后见/ 图/ 6/ (/ b/ )/ ./ 若/ 这个/ 2/ 度/ 节点/ u/ 的/ 两个/ 相邻/ 节点/ p/ 、/ q/ 之间/ 除/ 路径/ p/ -/ u/ -/ q/ 之外/ 还有/ 别的/ 连通/ 路径/ ,/ 见图/ 6/ (/ c/ )/ ,/ 则/ 可以/ 断开/ 2/ 度/ 节点/ u/ 和/ 它/ 的/ 任意/ 一个/ 相邻/ 点/ 之间/ 的/ 边/ ,/ 因为/ 断开/ 此边/ 可以/ 获得/ 一个/ 叶子/ 节点/ ,/ 断开/ 后/ 的/ 情况/ 见图/ 6/ (/ d/ )/ ./ 但是/ ,/ 在/ 此/ 情况/ 下/ ,/ 可能/ 会/ 产生/ 新/ 的/ 2/ 度/ 节点/ ./ 即/ 断开/ 边后/ ,/ 原/ 2/ 度/ 节点/ 变成/ 了/ 1/ 度/ 节点/ ,/ 而原/ 2/ 度/ 节点/ u/ 的/ 邻点/ 可能/ 由于/ 度减/ 1/ 从而/ 变成/ 一个/ 新/ 的/ 2/ 度/ 节点/ ./ 所以/ 在/ 断开/ 边后/ 应立即/ 检查/ 相关/ 节点/ ,/ 若该/ 节点/ 的/ 度/ 仍然/ 大于/ 等于/ 3/ ,/ 则/ 继续/ ;/ 若/ 断开/ 边后/ ,/ 度/ 由/ 3/ 减为/ 2/ ,/ 则/ 立即/ 运用/ 前面/ 的/ 规则/ 处理/ 这个/ 新/ 产生/ 的/ 2/ 度/ 节点/ ./ 有/ 了/ 前面/ 4/ 条/ 化简/ 规则/ ,/ 可以/ 给出/ 核化/ 算法/ 如/ 3.3/ 核化/ 算法/ 及/ 复杂性/ 分析/ 下/ (/ 包括/ 步/ 1/ ~/ 3/ )/ :/ 1/ ./ 依次/ 访问/ 图/ G/ 中/ 的/ 所有/ 节点/ ,/ 对图/ 中/ 的/ 2/ 度/ 节点/ 应用/ 第/ (/ 1/ )/ 和/ 第/ (/ 2/ )/ 条/ 化简/ 规则/ ,/ 得到/ 图/ G/ ./ 则/ 图/ G/ 中/ 剩余/ 的/ 2/ 度/ 节点/ 只/ 可能/ 是/ 规则/ (/ 3/ )/ 和/ 规则/ (/ 4/ )/ 中/ 所述/ 情况/ ./ 对于/ n/ 个节/ Page5/ 点/ 的/ 图/ 执行/ 此/ 步骤/ 所用/ 时间/ 为/ O/ (/ n/ )/ ./ 2/ ./ 依次/ 访问/ 图/ G/ 中/ 所有/ 节点/ ,/ 对图/ G/ 中/ 符合/ 规则/ (/ 3/ )/ 所/ 描述/ 的/ 2/ 度/ 节点/ 运用/ 化简/ 规则/ 化简/ ,/ 得到/ 图/ G/ ./ 则/ 图/ G/ 中/ 剩余/ 的/ 2/ 度/ 节点/ 只/ 可能/ 是/ 规则/ (/ 4/ )/ 中/ 所述/ 的/ 情况/ ./ 对于/ n/ 个/ 节点/ 的/ 图/ 执行/ 此/ 步骤/ 所用/ 时间/ 为/ O/ (/ n2/ )/ ./ 因为/ 对/ 每/ 对/ 符合/ 规则/ (/ 3/ )/ 的/ 2/ 度/ 节点/ 进行/ 化简/ 时/ 需要/ 判断/ 一对/ 节点/ 间/ 是否/ 存在/ 另/ 一条/ 连通/ 路径/ ,/ 使用/ 深度/ 优先/ 算法/ 需要/ O/ (/ n/ )/ 时间/ ,/ 因此/ 总共/ 的/ 时间/ 为/ O/ (/ n2/ )/ ./ 3/ ./ 对图/ G/ 运用/ 化简/ 规则/ (/ 4/ )/ 化简/ ,/ 得到/ 图/ G/ / ,/ 则/ 图/ G/ / 中/ 不再/ 存在/ 2/ 度/ 节点/ ,/ 只/ 剩下/ 1/ 度/ 节点/ 和度/ 大于/ 等于/ 3/ 的/ 节点/ ./ 对于/ n/ 个/ 节点/ 的/ 图/ 执行/ 此/ 步骤/ 所用/ 时间/ 为/ O/ (/ n2/ )/ ./ 理由/ 同上/ ./ 因此/ ,/ 全部/ 执行/ 完步/ 1/ ~/ 3/ 所需/ 时间/ 为/ O/ (/ n2/ )/ ./ 3.4/ 无/ 2/ 度/ 节点/ 图/ 的/ 核化/ 对/ 一/ 简单/ 连通/ 无向/ 图/ G/ ,/ 若/ 采用/ 3.3/ 节中/ 给出/ 的/ 核化/ 算法/ 对/ 2/ 度/ 节点/ 进行/ 化简/ ,/ 在/ 化简/ 后/ 的/ 图/ 中/ 就/ 不再/ 有/ 2/ 度/ 节点/ ./ 对于/ 一个/ 不/ 存在/ 2/ 度/ 节点/ 的/ 简单/ 连通/ 无向/ 图/ ,/ 定义/ 7/ (/ 扩展/ 节点/ x/ )/ ./ 向树/ T/ 中/ 增加/ d/ (/ x/ )/ 条边/ ,/ 也/ 就是/ 增加/ x/ 与/ x/ 在/ G/ -/ T/ 中/ 的/ 邻居/ 之间/ 的/ 边/ ./ 那么/ 通过/ 一系列/ 的/ 点/ 扩展/ 操作/ 就/ 可以/ 将/ 树/ T/ 从/ 一棵/ 小树/ 扩展/ 成为/ 图/ G/ 的/ 一棵/ 完整/ 的/ 包含/ 图/ G/ 全部/ 节点/ 的/ 生成/ 树/ ./ 我们/ 将/ 当前/ 的/ 生成/ 树/ T/ 中/ 的/ d/ (/ x/ )/ =/ 0/ 的/ 叶子/ 节点/ x/ 称为/ “/ 死/ 叶子/ ”/ ,/ 因为/ 这些/ “/ 死/ 叶子/ ”/ 不能/ 再/ 进行/ 点/ 扩展/ 操作/ ,/ 从而/ 在/ 构造/ T/ 的/ 过程/ 中/ 产生/ 的/ “/ 死/ 叶子/ ”/ 一定/ 是/ 最终/ 的/ 生成/ 树中/ 的/ 叶子/ 节点/ ./ 另外/ 用/ m/ 有/ 如下/ 定理/ 成立/ ./ 定理/ 1/ ./ N/ 个/ 节点/ 的/ 简单/ 连通/ 无向/ 图/ G/ ,/ 若图/ G/ 不含/ 2/ 度/ 节点/ ,/ 则/ 其/ 必有/ 一棵/ 生成/ 树/ ,/ 使得/ 该/ 生成/ 树/ 的/ 叶子/ 节点/ (/ 度为/ 1/ 的/ 节点/ )/ 至少/ 为/ N/ +/ 6/ 证明/ ./ 为了/ 证明/ 上述/ 定理/ ,/ 我们/ 引入/ 一个/ 构造性/ 的/ 算法/ ,/ 在/ 任意/ 的/ 不/ 含/ 2/ 度/ 节点/ 的/ 图/ G/ 中/ 都/ 能/ 构造/ 出/ 一棵/ 生成/ 树/ ,/ 使得/ 该/ 生成/ 树/ 的/ 叶子/ 节点/ 数/ 至少/ 为/ N/ +/ 64/ ,/ 从而/ 证明/ 该/ 结论/ ./ 在/ 构造/ 图/ G/ 的/ 生成/ 树/ 的/ 过程/ 中/ ,/ 我们/ 用/ T/ 表示/ 当前/ 已/ 被/ 构造/ 出/ 的/ 包含/ n/ 个/ 节点/ ,/ l/ 个/ 叶子/ 节点/ 的/ 树/ ./ 若/ x/ 是/ T/ 的/ 一个/ 叶子/ 节点/ ,/ 则/ 我们/ 用/ d/ (/ x/ )/ 表示/ x/ 在/ G/ -/ T/ 中/ 的/ 度/ ,/ 即/ d/ (/ x/ )/ 等于/ x/ 在/ G/ -/ T/ 中/ 的/ 邻点/ 个数/ ./ 我们/ 定义/ “/ 扩展/ 节点/ x/ ”/ 操作/ 如下/ ,/ 并/ 简称/ 为/ “/ 点/ 扩展/ ”/ ./ 表示/ 当前/ 树/ T/ 中/ 的/ “/ 死/ 叶子/ ”/ 数目/ ./ 用/ Δ/ n/ ,/ Δ/ l/ ,/ Δ/ m/ 分别/ 表示/ 当前/ 树/ T/ 执行/ 一次/ 点/ 扩展/ 操作/ 后/ 所/ 带来/ 的/ 相应/ 的/ n/ ,/ l/ ,/ m/ 的/ 增量/ ./ 如果/ 一个点/ 扩展/ 序列/ 对树/ T/ 的/ 影响/ 满足/ “/ 累加/ 不等式/ ”/ 3/ Δ/ l/ +/ Δ/ m/ / Δ/ n/ ,/ 则/ 称之为/ “/ 合法/ ”/ 的/ 点/ 扩展/ 序列/ ./ 我们/ 从/ 一棵/ 初始/ 树/ T/ 开始/ ,/ 通过/ 执行/ 一系列/ “/ 合法/ ”/ 的/ 点/ 扩展/ 序列/ 将/ T/ 逐步/ 扩展/ 成为/ 图/ G/ 的/ 生成/ 树/ ./ 构造/ 树/ T/ 的/ 过程/ :/ (/ 1/ )/ 若不含/ 2/ 度/ 节点/ 的/ 图/ G/ 中/ 只有/ 1/ 度/ 节点/ ,/ 则/ 是/ 图/ 7/ (/ a/ )/ 所示/ 情况/ ,/ 定理/ 1/ 显然/ 成立/ ./ (/ 2/ )/ 若不含/ 2/ 度/ 节点/ 的/ 图/ G/ 中有/ 一个/ 度/ 大于/ 等于/ 4/ 的/ 节点/ ,/ 则/ 可以/ 找出/ 一棵/ 如图/ 7/ (/ b/ )/ 所示/ 的/ 初始/ 子树/ ./ (/ 3/ )/ 若图/ G/ 中/ 都/ 是/ 3/ 度/ 节点/ 和/ 1/ 度/ 节点/ ,/ 而且/ 图/ G/ 中/ 每/ 一条/ 不/ 与/ 1/ 度/ 节点/ 关联/ 的/ 边/ 都/ 是/ 图/ 中/ 某个/ 三角形/ 的/ 一条/ 边/ ,/ 则/ 图/ G/ 是/ 图/ 7/ (/ c/ )/ 、/ 图/ 7/ (/ d/ )/ 和/ 图/ 7/ (/ e/ )/ 所示/ 情况/ ,/ 这/ 3/ 种/ 情况/ 下/ ,/ 定理/ 1/ 显然/ 都/ 成立/ ./ (/ 4/ )/ 若图/ G/ 中/ 都/ 是/ 3/ 度/ 节点/ 和/ 1/ 度/ 节点/ ,/ 而且/ 图/ G/ 中/ 至少/ 存在/ 一条/ 不/ 与/ 1/ 度/ 节点/ 关联/ 的/ 边/ ,/ 该条/ 边/ 不是/ 图中/ 任何/ 一个/ 三角形/ 的/ 一条/ 边/ ,/ 则/ 可以/ 找出/ 一棵/ 如图/ 7/ (/ f/ )/ 所示/ 的/ 初始/ 子树/ ./ 若/ T/ 通过/ 一系列/ 的/ “/ 合法/ ”/ 的/ 点/ 扩展/ 操作/ 最终/ 变成/ 了/ 图/ G/ 的/ 一棵/ 包含/ L/ 个/ 叶子/ 节点/ 的/ 生成/ 树/ ./ 那么/ 在/ 树/ T/ 的/ 生长/ 过程/ 中/ 所/ 产生/ 的/ 叶子/ 节点/ 最终/ 都/ 变成/ 了/ “/ 死/ 叶子/ ”/ 节点/ (/ 因为/ 最终/ 的/ 生成/ 树中/ 的/ 叶子/ 节点/ 都/ 是/ “/ 死/ 叶子/ ”/ ,/ 即/ 都/ 无法/ 再/ 进行/ 点/ 扩展/ 操作/ )/ ./ 由于/ 所有/ 的/ 点/ 扩展/ 操作/ 都/ 是/ “/ 合法/ ”/ 的/ ,/ 即/ 满足/ 前面/ 定义/ 的/ “/ 累加/ 不等式/ ”/ ./ 假设/ 共/ 进行/ 了/ i/ 次点/ 扩展/ 操作/ ,/ 则/ 每/ 一次/ 的/ 点/ 扩展/ 操作/ 满足/ 的/ “/ 累加/ 不等式/ ”/ Page6/ 如下/ :/ 将/ 上述/ i/ 个/ 不等式/ 累加/ 起来/ 得/ 3/ (/ Δ/ l1/ +/ Δ/ l2/ +/ …/ +/ Δ/ li/ )/ +/ (/ Δ/ m1/ +/ Δ/ m2/ +/ …/ +/ Δ/ mi/ )/ / (/ Δ/ n1/ +/ Δ/ n2/ +/ …/ Δ/ ni/ )/ 因为/ :/ 初始/ 生成/ 树/ 的/ 叶子/ 数/ +/ Δ/ l1/ +/ Δ/ l2/ +/ …/ +/ Δ/ li/ =/ 最终/ 生成/ 树/ 的/ 叶子/ 数/ =/ L/ Δ/ m1/ +/ Δ/ m2/ +/ …/ +/ Δ/ mi/ / L/ ,/ 因为/ 初始/ 生成/ 树/ 可能/ 包含/ “/ 死/ 叶子/ ”/ Δ/ n1/ +/ Δ/ n2/ +/ …/ +/ Δ/ n/ =/ N/ -/ 初始/ 生成/ 树/ 的/ 节点/ 数将式/ (/ 2/ )/ ~/ (/ 4/ )/ 代入/ 式/ (/ 1/ )/ 有/ 若/ 初始/ 子树/ 是/ 图/ 7/ (/ b/ )/ 所示/ 情况/ ,/ 则/ 3/ (/ L/ -/ D/ )/ +/ L/ / N/ -/ D/ -/ 1/ ,/ 其中/ D/ 是/ 一个/ 大于/ 等于/ 4/ 的/ 常数/ ,/ 即/ D/ 是/ 图/ 7/ (/ b/ )/ 所示/ 的/ 初始/ 子树/ 中/ 的/ 叶子/ 节点/ 数目/ ./ 化简/ 即得/ 4L/ / N/ +/ 2D/ -/ 1/ / N/ +/ 7/ ,/ 即/ L/ / N/ +/ 7/ 若/ 初始/ 子树/ 是/ 图/ 7/ (/ f/ )/ 所示/ 情况/ ,/ 则/ 3/ (/ L/ -/ 4/ )/ +/ L/ / N/ -/ 6/ ,/ 化简/ 即/ L/ / N/ +/ 6/ 下面/ 我们/ 就/ 给出/ 一系列/ “/ 合法/ ”/ 的/ 点/ 扩展/ 操作/ ,/ 使得/ 仅/ 通过/ 这些/ 操作/ 就/ 可以/ 完成/ 图/ G/ 的/ 生成/ 树/ 的/ 构建/ ./ 因此/ ,/ 根据/ 前面/ 的/ 证明/ ,/ 通过/ 这些/ “/ 合法/ ”/ 的/ 操作/ 得到/ 的/ 生成/ 树/ 的/ 叶子/ 节点/ 数/ 满足/ L/ / N/ +/ 6/ “/ 合法/ ”/ 的/ 点/ 扩展/ 操作/ :/ O1/ ./ 对/ 当前/ 的/ 树/ T/ 中/ 的/ 某个/ 叶子/ 节点/ x/ ,/ 若/ d/ (/ x/ )/ / 2/ ,/ 则/ 在/ 节点/ x/ 进行/ 的/ 点/ 扩展/ 操作/ 满足/ Δ/ l/ =/ Δ/ n/ -/ 1/ ,/ Δ/ m/ / 0/ ,/ 显然/ 在/ 此/ 条件/ 下/ ,/ 3/ Δ/ l/ +/ Δ/ m/ / Δ/ n/ 成立/ ,/ 因此/ 该/ 操作/ “/ 合法/ ”/ ./ 参见/ 图/ 8/ (/ a/ )/ ./ O2/ ./ 对/ 当前/ 的/ 树/ T/ 中/ 所有/ 的/ 满足/ d/ (/ x/ )/ / 1/ 的/ 节点/ x/ ,/ 图/ G/ 中/ 一定/ 有/ 某个/ 不/ 属于/ 树/ T/ 的/ 节点/ ,/ 若该/ 节点/ x/ 有/ 至少/ 两个/ 邻点/ 在/ 树/ T/ 中/ ,/ 则/ 对/ 该/ 节点/ 的/ 其中/ 一个/ 邻点/ 进行/ 点/ 扩展/ 操作/ 会/ 增加/ 至少/ 一个/ “/ 死/ 叶子/ ”/ (/ 也/ 就是/ 另/ 一个/ 邻点会/ 变成/ “/ 死/ 叶子/ ”/ )/ ./ 因此/ 这样/ 的/ 点/ 扩展/ 操作/ 会/ 导致/ Δ/ l/ =/ 0/ ,/ Δ/ m/ / 1/ ,/ Δ/ n/ =/ 1/ ,/ 显然/ 在/ 此/ 条件/ 下/ ,/ 3/ Δ/ l/ +/ Δ/ m/ / Δ/ n/ 成立/ ,/ 因此/ 该/ 操作/ “/ 合法/ ”/ ./ 参见/ 图/ 8/ (/ b/ )/ ./ O3/ ./ 对/ 当前/ 的/ 树/ T/ 中/ 所有/ 的/ 满足/ d/ (/ x/ )/ / 1/ 的/ 节点/ x/ ,/ 图/ G/ 中/ 一定/ 有/ 某个/ 不/ 属于/ 树/ T/ 的/ 节点/ ,/ 若/ y/ 是/ x/ 在/ 树/ T/ 之外/ 的/ 唯一/ 邻点/ ,/ 且/ y/ 在/ 图/ G/ 中/ 的/ 度/ 不/ 为/ 1/ ,/ 即/ 至少/ 为/ 3/ ,/ 则/ y/ 至少/ 有/ 两个/ 不/ 属于/ 树/ T/ 的/ 邻点/ ,/ 则/ 先/ 在/ x/ 进行/ 点/ 扩展/ ,/ 紧接着/ 在/ y/ 进行/ 点/ 扩展/ 会/ 导致/ Δ/ l/ =/ Δ/ n/ -/ 2/ / 1/ ,/ Δ/ m/ / 0/ ,/ 显然/ 在/ 此/ 条件/ 下/ ,/ 3/ Δ/ l/ +/ Δ/ m/ / Δ/ n/ 成立/ ,/ 因此/ 该/ 操作/ “/ 合法/ ”/ ./ 参见/ 图/ 8/ (/ c/ )/ ./ O4/ ./ 对/ 当前/ 的/ 树/ T/ 中/ 所有/ 的/ 满足/ d/ (/ x/ )/ / 1/ 的/ 节点/ x/ ,/ 图/ G/ 中/ 一定/ 有/ 某个/ 不/ 属于/ 树/ T/ 的/ 节点/ ,/ 若/ y/ 是/ x/ 在/ 树/ T/ 之外/ 的/ 唯一/ 邻点/ ,/ 且/ y/ 在/ 图/ G/ 中/ 的/ 度/ 等于/ 1/ ,/ 则/ 在/ x/ 进行/ 点/ 扩展/ ,/ y/ 就/ 成为/ 一个/ 新/ 的/ “/ 死/ 叶子/ ”/ ,/ 这种/ 扩展/ 会/ 导致/ Δ/ l/ =/ 0/ ,/ Δ/ m/ =/ 1/ ,/ Δ/ n/ =/ 1/ ,/ 显然/ 在/ 此/ 条件/ 下/ ,/ 3/ Δ/ l/ +/ Δ/ m/ / Δ/ n/ 成立/ ,/ 因此/ 该/ 操作/ “/ 合法/ ”/ ./ 参见/ 图/ 8/ (/ d/ )/ ./ 因为/ 在/ 图/ G/ 中/ ,/ 节点/ 的/ 度/ 要么/ 为/ 1/ ,/ 要么/ 大于/ 等于/ 3/ ./ 度为/ 1/ 的/ 节点/ 只能/ 是/ 在/ 别的/ 节点/ 执行/ 点/ 扩展/ 时/ 被/ 加入/ 到/ 树/ T/ ,/ 而且/ 一旦/ 被/ 加入/ 马上/ 就/ 变成/ 了/ “/ 死/ 叶子/ ”/ (/ 规则/ O4/ )/ ./ 而度/ 大于/ 等于/ 3/ 的/ 节点/ 要么/ 有/ 至少/ 两个/ 邻点/ 在/ T/ 中/ ,/ 要么/ 至少/ 有/ 两个/ 邻点/ 在/ T/ 之外/ ,/ 则/ 规则/ O1/ 或/ O2/ 或/ O3/ 必占/ 其一/ ./ 所以/ 通过/ 规则/ O1/ ~/ O4/ 可以/ 从/ 初始/ 生成/ 树/ 构建/ 出图/ G/ 最终/ 的/ 生成/ 树/ ,/ 而/ 每/ 一步/ 都/ 是/ 满足/ 不等式/ 3/ Δ/ l/ +/ Δ/ m/ / Δ/ n/ 的/ “/ 合法/ ”/ 操作/ ./ 所以/ 最终/ 的/ 生成/ 树/ 的/ 叶子/ 节点/ 数/ 满足/ L/ / N/ +/ 6/ 事实上/ ,/ 定理/ 1/ 给出/ 的/ 下限/ 是/ 一个/ 严格/ 的/ (/ 最好/ 的/ )/ 下限/ (/ tightbound/ )/ ./ 也就是说/ ,/ 在/ 不/ 存在/ 2/ 度/ 节点/ 的/ 图/ 中/ ,/ 其/ 生成/ 树/ 的/ 最大/ 叶子/ 节点/ 数/ 至少/ 可以/ 达到/ N/ +/ 64/ ,/ 但是/ 该/ 下限/ 无法/ 再/ 被/ 改进/ ./ 事实上/ ,/ 图/ 9/ (/ a/ )/ 就是/ 一个/ 达到/ 该/ 下限/ 的/ 图/ ./ 在/ 该/ 图/ 中仅/ 存在/ 1/ 度/ 节点/ 和/ 3/ 度/ 节点/ ,/ 该图/ 的/ 具有/ 最/ 多/ 叶子/ 的/ 一棵/ 生成/ 树见/ 图/ 9/ (/ b/ )/ ./ 因此/ 最大/ 叶子/ 节点/ 数/ L/ =/ 5/ ,/ 图/ 的/ 节点/ 数/ N/ =/ 14/ ,/ 所以/ L/ =/ 5/ =/ N/ +/ 6Page7/ 找出/ 一棵/ 生成/ 树使/ 其/ 叶子/ 节点/ 数/ 大于/ N/ +/ 6/ 所以/ ,/ 根据/ 定理/ 1/ ,/ 我们/ 可以/ 得到/ 简化/ 后/ 包含/ 1/ 度/ 节点/ 和/ 大于/ 等于/ 3/ 度/ 节点/ 的/ 图/ 的/ 叶子/ 节点/ 数/ 的/ 一个/ 下限/ ./ 因此/ ,/ 对于/ MLST/ 问题/ 我们/ 有/ 如下/ 的/ 核化/ 定理/ ./ 定理/ 2/ ./ 对于/ 在/ 任意/ 简单/ 连通/ 无向/ 图/ G/ 上/ 求解/ MLST/ 问题/ ,/ 应用/ 3.3/ 节中/ 的/ 核化/ 算法/ ,/ 可以/ 得到/ 一个/ 4k/ -/ 6/ 大小/ 的/ 核/ ./ 证明/ ./ (/ 1/ )/ 执行/ 3.3/ 节/ 的/ 核化/ 算法/ ,/ 可以/ 将/ 图/ G/ 化简/ 为/ 不/ 含/ 2/ 度/ 节点/ 的/ 图/ G/ ,/ 设图/ G/ 中/ 的/ 节点/ 数为/ N/ 个/ ./ (/ 2/ )/ 根据/ 定理/ 1/ ,/ N/ 个/ 节点/ 且/ 不/ 含/ 2/ 度/ 节点/ 的/ 图/ ,/ 则/ 其/ 必有/ 一棵/ 生成/ 树/ ,/ 使得/ 该/ 生成/ 树/ 的/ 叶子/ 节点/ 数/ 至少/ 为/ N/ +/ 6/ 题/ ,/ 若/ 化简/ 后/ 的/ 图/ G/ 的/ 节点/ 数/ N/ 满足/ k/ / N/ +/ 6/ 回答/ “/ 是/ ”/ ,/ 即/ 原图/ G/ 中/ 存在/ 一棵/ 生成/ 树/ ,/ 其/ 叶子/ 节点/ 至少/ 有/ k/ 个/ ./ 若/ k/ >/ N/ +/ 6/ 节点/ 数/ 小于/ 4k/ -/ 6/ ,/ 这是/ 一个/ 与/ 原图/ 的/ 节点/ 规模/ 无关/ 的/ 线性/ 核/ ./ 因此/ 我们/ 可以/ 在/ 节点/ 数/ 小于/ 4k/ -/ 6/ 的/ 图/ G/ 中来/ 求解/ MLST/ 问题/ ./ 4/ 结束语/ 最/ 多/ 叶子/ 生成/ 树/ 问题/ 是/ NP/ 完全/ 理论/ 中/ 的/ 一个/ 经典/ 问题/ ,/ 其/ 在/ 网络/ 设计/ 和/ 电路/ 布线/ 中/ 都/ 有着/ 重要/ 的/ 应用/ 背景/ ./ 我们/ 通过/ 深入研究/ ,/ 设计/ 了/ 有效/ 的/ 化简/ (/ 核化/ )/ 算法/ ,/ 并/ 证明/ 了/ 化简/ 后/ 的/ 图/ 是/ 一个/ 不/ 超过/ 4k/ -/ 6/ 大小/ 的/ 线性/ 核/ ./ 核化/ 算法/ 也/ 是/ 参数/ 理论/ 研究/ 的/ 一个/ 热点/ 领域/ ,/ 有效/ 的/ 核化/ 算法/ 能/ 极大/ 地/ 降低/ 原始/ 问题/ 的/ 规模/ ,/ 从而/ 在/ 一些/ 应用/ 场合/ 能/ 大大降低/ 问题/ 求解/ 的/ 复杂度/ ./ 如/ 我们/ 设计/ 的/ 核化/ 算法/ ,/ 在/ 得到/ 4k/ -/ 6/ 大小/ 的/ 线性/ 核/ 之后/ ,/ 利用/ 这个/ 与/ 原/ 问题/ 无关/ 的/ 线性/ 核/ 不仅/ 可以/ 设计/ 参数/ 算法/ 求解/ ,/ 也/ 可以/ 设计/ 近似算法/ 求解/ ,/ 算法/ 的/ 复杂度/ 仅/ 与/ 参数/ k/ 有关/ ,/ 而/ 与/ 原始/ 问题/ 的/ 规模/ 无关/ ./ 

