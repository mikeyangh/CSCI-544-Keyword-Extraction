Page1/ 覆盖/ 网络/ 中/ 一种/ 公平/ 负载/ 均衡/ QoS/ 路由/ 算法/ 曹/ 雪松/ 1/ )/ ,/ 2/ )/ 胡瑞敏/ 1/ )/ 王朝/ 萍/ 1/ )/ 1/ )/ (/ 武汉大学/ 计算机/ 学院/ 武汉/ 430072/ )/ 2/ )/ (/ 中国/ 通信/ 服务/ 集团/ 天讯瑞达/ 通信/ 技术/ 有限公司/ 广州/ 510623/ )/ 摘要/ 覆盖/ 网络/ 通过/ 选择/ 资源/ 消耗/ 代价/ 较/ 低/ 的/ 应用层/ 服务/ 路径/ 实现/ 分布式/ 网络应用/ 的/ 负载/ 均衡/ ,/ 但/ 传统/ 方法/ 未/ 考虑/ 局部/ 负载/ 较/ 重/ 链路/ 中/ 存在/ 的/ 资源/ 瓶颈/ 问题/ ,/ 导致系统/ 吞吐量/ 的/ 下降/ ./ 针对/ 该/ 问题/ 提出/ 一种/ 公平/ 负载/ 均衡/ QoS/ 路由/ 算法/ ,/ 该/ 方法/ 引入/ 表征/ 路径/ 瓶颈/ 程度/ 的/ 资源/ 公平/ 指数/ ,/ 依据/ 代价/ 模型/ 建立/ 新/ 的/ 负载/ 均衡/ 效用函数/ ,/ 并/ 采用/ 自/ 适应/ 的/ 系统/ 负荷/ 状态/ 加权/ 方法/ 修正/ QoS/ 约束/ 项/ 权重/ ./ 实验/ 证明/ 该/ 算法/ 相对/ 传统/ 算法/ 性能/ 更优/ ,/ 有效/ 提高/ 了/ 服务/ 成功率/ ,/ 并/ 降低/ 了/ 负载/ 分布/ 的/ 波动/ 程度/ ./ 关键词/ 覆盖/ 网络/ ;/ QoS/ 路由/ ;/ 负载/ 均衡/ ;/ 分布式系统/ 1/ 引言/ 覆盖/ 网络/ [/ 1/ ]/ (/ overlaynetwork/ )/ 又称/ 重叠/ 网络/ ,/ 是/ 指/ 通过/ 在/ 基础/ 网络/ 的/ 关键/ 位置/ 上/ 设立/ 智能/ 的/ 节点/ ,/ 以/ 单播/ 路由/ 方式/ 连接起来/ 构成/ 的/ 虚拟/ 应用层/ 网络/ ,/ 这种/ 网络/ 位于/ 用户/ 终端/ 与/ 物理/ 网络/ 之间/ ,/ 可以/ 用于/ 实现/ 特定/ 的/ 应用/ ./ 相对/ 于/ 底层/ 基础/ 网络/ 而言/ ,/ 覆盖/ 网络层/ 能够/ 监测/ 底层/ 网络/ 上/ 的/ 路由/ 走向/ 、/ 传输/ 延时/ 、/ 流量/ 分布/ 、/ 拥塞/ 状况/ 以及/ 异常/ 故障/ 等/ 状态/ 信息/ ./ 覆盖/ 网络层/ 一方面/ 依靠/ 覆盖/ 节点/ (/ overlaynode/ )/ 相互交换/ 这些/ 信息/ ,/ 另一方面/ 基于/ 这些/ 信息/ 实施/ 智能/ 的/ 控/ Page2/ 制/ 和/ 管理手段/ ,/ 如/ 路由/ 探测/ 选择/ 、/ 流量/ 控制/ 以及/ 内容/ 检索/ 、/ 分类/ 和/ 管理/ 等等/ ./ 覆盖/ 网络/ 的/ 优点/ 在于/ 不/ 改变/ 基础/ 网络/ 架构/ 而/ 有效/ 提高/ 分布式/ 网络应用/ 的/ 服务质量/ (/ QualityofService/ ,/ QoS/ )/ ./ 覆盖/ 网络/ QoS/ 路由/ 是/ 覆盖/ 网络/ 技术/ 的/ 重要/ 研究/ 方向/ ./ 由于/ 传统/ 的/ TCP/ // IP/ 网络/ 只能/ 提供/ 尽力而为/ 的/ 服务/ 模式/ ,/ 不能/ 有效/ 保障/ 分布式应用/ 的/ 传输/ 质量/ ,/ 而/ 在/ 应用层/ 上/ 重新/ 构建/ 可靠/ 的/ 覆盖/ 路由/ 网络/ ,/ 就/ 可以/ 提供/ QoS/ 保障/ 的/ 传输/ 控制/ 机制/ ,/ 这种/ 技术/ 被/ 称为/ 覆盖/ 网络/ 的/ QoS/ 路由/ [/ 2/ ]/ ./ 在/ 这种/ 体系结构/ 中/ ,/ 覆盖/ 网络/ 是/ 由/ 应用层/ 的/ 服务器/ 主机/ 节点/ 构成/ ,/ 这些/ 节点/ 不仅/ 能够/ 传递/ 和/ 转发/ 数据流/ ,/ 而且/ 还/ 具有/ 特殊/ 的/ 计算能力/ 和/ 存储/ 能力/ ,/ 通过/ 互相/ 协作/ 实现/ 复杂/ 的/ 服务/ 组合/ ./ 因此/ 覆盖/ 网络/ 能够/ 使用/ 路由/ 选择/ 方法/ 有效/ 解决/ 分布式应用/ 的/ 资源/ 调度/ 问题/ [/ 3/ ]/ ./ 负载/ 均衡/ 的/ 资源/ 调度/ 是/ 分布式系统/ 应用/ 研究/ 中/ 的/ 关键问题/ ,/ 因为/ 网络/ 环境/ 的/ 差异性/ ,/ 不同/ 区域/ 业务/ 吞吐量/ 的/ 波动/ 以及/ 不合理/ 的/ 资源分配/ 策略/ 都/ 会/ 导致/ 网络/ 负载/ 的/ 不/ 均衡/ ,/ 进而/ 引起/ 网络/ 出现/ 拥塞/ 现象/ ,/ 降低/ 系统/ 的/ 整体/ 吞吐量/ ,/ 目前/ 该/ 问题/ 在/ IP/ 网络/ 上/ 仍/ 没有/ 很/ 好/ 的/ 解决办法/ ./ 而/ 覆盖/ 网络/ QoS/ 路由/ 技术/ 可以/ 提供/ 基于/ 应用层/ 部署/ 负载/ 均衡/ 资源/ 调度/ 策略/ 的/ 方法/ ,/ 有助于/ 分布式系统/ 实现/ 公平/ 的/ 资源分配/ ,/ 因此/ 成为/ 了/ 当前/ 的/ 研究/ 热点/ ./ 经典/ 的/ 覆盖/ 网络/ 负载/ 均衡/ QoS/ 路由/ 算法/ 主要/ 有/ QUEST/ [/ 4/ ]/ 、/ PBLCP/ [/ 5/ ]/ 、/ RBLCP/ [/ 6/ ]/ 等/ ,/ 这些/ 算法/ 的/ 基本原理/ 均/ 是/ 推导/ 表征/ 覆盖/ 网络/ 传输/ 、/ 计算资源/ 的/ 消耗/ 代价/ 和/ 的/ 启发式/ 效用函数/ ,/ 基于/ 最短/ 路径/ 算法/ 搜索/ 最优/ 负载/ 均衡/ 服务/ 路径/ ,/ 有利于/ 选出/ 整体/ 资源/ 消耗/ 较/ 低/ 的/ 路径/ ./ 然而/ 该类/ 方法/ 仍/ 存在/ 一个/ 问题/ :/ 未/ 考虑/ 局部/ 负载/ 较重/ 的/ 链路/ 引发/ 的/ 资源/ 瓶颈/ 问题/ ,/ 这种/ 瓶颈/ 仍会/ 导致系统/ 发生/ 拥塞/ ,/ 严重/ 时会/ 降低/ 系统/ 吞吐量/ 和/ 负载/ 均衡/ 程度/ ./ 针对/ 该类/ 问题/ ,/ 本文/ 重点/ 研究/ 了/ 路径/ 瓶颈/ 程度/ 的/ 计算方法/ ,/ 并/ 将/ 其/ 引入/ 传统/ 路由/ 模型/ ,/ 提出/ 一种/ 更加/ 公平/ 的/ 负载/ 均衡/ 覆盖/ 路由/ 算法/ ,/ 实验/ 证明/ 该/ 算法/ 能够/ 进一步提高/ 网络系统/ 的/ 吞吐量/ 及/ 负载/ 均衡/ 程度/ ./ 本文/ 第/ 2/ 节/ 介绍/ 覆盖/ 网络/ QoS/ 路由/ 技术/ 相关/ 的/ 国内外/ 研究/ 现状/ ;/ 第/ 3/ 节/ 通过/ 原/ 理性分析/ 和/ 实验/ 结果/ 验证/ 资源/ 瓶颈/ 问题/ 及其/ 影响/ ;/ 第/ 4/ 节/ 针对/ 该/ 问题/ 提出/ 解决方案/ ,/ 详细/ 阐述/ 本文/ 核心/ 算法/ ;/ 第/ 5/ 节/ 给出/ 仿真/ 实验/ 的/ 结果/ 及/ 分析/ ;/ 最后/ 第/ 6/ 节/ 阐述/ 本文/ 的/ 研究/ 结论/ ./ 2/ 相关/ 研究/ 现状/ 覆盖/ 网络/ 负载/ 均衡/ QoS/ 路由/ 的/ 目标/ [/ 3/ ,/ 7/ ]/ 就是/ 要/ 在/ 覆盖/ 网络/ 中/ 找到/ 一条/ 合适/ 的/ 服务/ 组合/ 路径/ ,/ 其/ 接入/ 业务/ 所/ 花费/ 的/ 资源/ 代价/ 相对/ 较/ 小/ ,/ 并且/ 能够/ 充分/ 地/ 利用/ 系统/ 的/ “/ 空闲/ ”/ 资源/ ,/ 这样/ 在/ 不断/ 接入/ 用户/ 请求/ 的/ 过程/ 中/ ,/ 负载/ 就/ 能/ 均衡/ 分布/ 在/ 网络空间/ 内部/ ,/ 从而/ 使/ 网络资源/ 的/ 利用率/ 达到/ 最大/ ./ 覆盖/ 网络/ 中/ 的/ 资源类型/ 可以/ 抽象/ 为/ 两类/ :/ 传输/ 资源/ 和/ 计算资源/ ,/ 一般/ 可用/ 链路/ 的/ 传输/ 带宽/ (/ BR/ )/ 和/ 节点/ 的/ 计算能力/ (/ CR/ )/ 表示/ ,/ 目前/ 的/ 负载/ 均衡/ QoS/ 路由/ 算法/ 都/ 是/ 以/ 优化/ 这/ 两类/ 资源/ 的/ 分布/ 为/ 目标/ ,/ 求解/ 最优/ 的/ QoS/ 服务/ 路径/ ./ QUEST/ [/ 4/ ]/ 是/ 较/ 早/ 提出/ 的/ 多/ QoS/ 优化/ 目标/ 覆盖/ 路由/ 算法/ ,/ 它/ 证明/ 该类/ 问题/ 属于/ NP/ -/ Complete/ 问题/ ./ 该/ 算法/ 首先/ 定义/ 了/ 多/ QoS/ 目标/ 优化/ 的/ 代价/ 函数/ ,/ 根据/ 问题/ 目标/ 的/ 侧重/ 程度/ 可/ 对/ 代价/ 函数/ 进行/ 加权/ 调节/ ,/ 然后/ 以/ 最/ 短/ 路径/ Dijkstra/ 算法/ [/ 8/ ]/ 求解/ 最优/ 路由/ 结果/ ./ QUEST/ 针对/ 负载/ 均衡/ 目标/ 优化/ 采用/ 了/ 两种/ QoS/ 度量/ 约束/ 项/ :/ (/ 1/ )/ 链路/ li/ ,/ j/ =/ (/ Si/ ,/ Sj/ )/ 的/ 带宽/ 消耗率/ fB/ (/ li/ ,/ j/ ,/ Bt/ )/ ,/ Bt/ 为/ 服务/ 请求/ 的/ 带宽/ 资源/ 需求/ 约束/ ;/ (/ 2/ )/ 节点/ Sj/ 的/ 计算资源/ 的/ 消耗率/ fc/ (/ li/ ,/ j/ ,/ Ct/ )/ ,/ Ct/ 为/ 服务/ 请求/ 的/ 计算资源/ 需求/ 约束/ ;/ 设/ CRj/ 和/ BRi/ ,/ j/ 为/ 节点/ j/ 和/ 链路/ li/ ,/ j/ 的/ 可用/ 资源/ ,/ 得到/ 链路/ 启发式/ 代价/ 函数/ C/ (/ li/ ,/ j/ )/ 为耗/ 代价/ 函数/ Cost/ (/ P/ )/ 定义/ 为/ 路径/ P/ 的/ 代价/ 通过/ 链路/ 代价/ 和/ 计算/ ,/ 其/ 总体/ 消/ Cost/ (/ P/ )/ =/ ∑/ lij/ ∈/ P2005/ 年/ Li/ 等/ 人/ [/ 5/ ]/ 提出/ 了/ 一种/ 基于/ 传输/ 资源/ 和/ 计算资源/ 残余/ 比例/ 的/ 负载/ 均衡/ 路由/ 算法/ PBSP/ (/ Pro/ -/ portionalBandwidthShortestPath/ )/ ,/ 比/ QUEST/ 能/ 更加/ 精确/ 表征/ 资源/ 利用/ 程度/ ,/ 算法/ 改用/ 了/ 节点/ 和/ 链路/ 的/ 残余/ 可用/ 资源/ 的/ 比例/ 作为/ 选择权/ 值/ ,/ 并/ 通过/ 乘法/ 混合/ 度量/ 生成/ 代价/ 函数/ ,/ 路径/ 的/ 代价/ 仍/ 通过/ 所有/ 链路/ 的/ 代价/ 和/ 计算/ ,/ 其/ 代价/ 函数/ Cost/ (/ P/ )/ 如下/ :/ 2007/ 年应/ 必娣/ 等/ 人/ [/ 6/ ]/ 在/ PBSP/ 的/ 基础/ 上/ 又/ 提出/ 了/ 一种/ 改进/ 的/ 路由/ 算法/ RBLCP/ ./ 该/ 算法/ 引入/ 了/ 全局/ 服务/ 资源/ 分布/ 的/ 约束/ 因子/ ,/ 可以/ 基于/ 整体/ 资源/ 分布/ 状况/ 动态/ 对/ 带宽/ 和/ 计算资源/ 代价/ 函数/ 加权/ ,/ 这样/ 算法/ 能够/ 根据/ 两类/ 资源/ 的/ 瓶颈/ 情况/ 作自/ 适应/ 的/ 负载/ Page3/ 均衡/ (/ α/ 值为/ 权重/ 因子/ )/ ,/ 其/ 代价/ 函数/ Cost/ (/ P/ )/ 如下/ :/ Cost/ (/ P/ )/ =/ ∑/ lij/ ∈/ P3/ 问题/ 分析/ 由/ 第/ 2/ 节/ 研究/ 现状/ 可知/ ,/ 传统/ 的/ 覆盖/ 路由/ 算法/ 采用/ 了/ 表征/ 资源/ 消耗/ 代价/ 的/ 变换/ 函数/ 作为/ 负载/ 均衡/ 启发式/ 效用函数/ ,/ 这些/ 方法/ 能够/ 尽量/ 选出/ 整体/ 资源/ 饱和度/ [/ 9/ ]/ (/ 实际/ 承受/ 负载/ 与/ 最大/ 承受/ 负载/ 比值/ )/ 较/ 低/ 的/ 空闲/ 服务/ 路径/ ,/ 但/ 仍然/ 存在/ 一定/ 的/ 非/ 公平性/ ,/ 这/ 主要/ 是因为/ 它们/ 没有/ 考虑/ 局部/ 负载/ 较/ 重/ 链路/ 的/ 资源/ 瓶颈/ 问题/ ./ 服务/ 路径/ 是/ 由/ 多/ 段/ 覆盖/ 链路/ 组成/ ,/ 链路/ 和/ 节点/ 的/ 能力/ 也/ 会/ 存在/ 不/ 均衡/ 的/ 情况/ ,/ 虽然/ 叠加/ 的/ 总体/ 消耗/ 代价/ 低/ ,/ 但是/ 单端/ 链路/ 或/ 节点/ 的/ 资源/ 消耗率/ 仍然/ 可能/ 较/ 高/ ,/ 因而/ 其/ 出现/ 拥塞/ 的/ 概率/ 也/ 会/ 相对/ 较/ 高/ ,/ 一旦/ 出现异常/ 不但/ 会/ 影响/ 到/ 运行/ 期内/ 的/ 服务/ 会话/ ,/ 而且/ 可能/ 导致/ 局部/ 网络/ 瘫痪/ ,/ 反而/ 降低/ 系统/ 吞吐量/ ./ 实验/ 1/ 的/ 数据/ 表明/ 传统/ 覆盖/ 路由/ 算法/ 在/ 高/ 业务/ 流量/ 下/ 仍/ 存在/ 较/ 严重/ 的/ 资源/ 拥塞/ 现象/ ./ 实验/ 1/ ./ 基于/ NS2/ 平台/ [/ 10/ ]/ 模拟/ 大规模/ 持续/ 流式/ 服务/ 请求/ 接入/ 覆盖/ 网络系统/ 的/ 场景/ ,/ 具体/ 实验/ 方法/ 参见/ 第/ 5/ 节/ ./ 实验/ 统计/ 了/ 在/ 不断/ 递增/ 的/ 业务/ 负荷量/ (/ 20/ ~/ 200unit/ // s/ )/ 情况/ 下/ 通过/ PBSP/ 、/ RBLCP/ 两种/ 路由/ 算法/ 调度/ 服务/ 所/ 产生/ 的/ 节点/ 吞吐量/ 分布/ 情况/ ./ 图/ 1/ (/ a/ )/ 、/ (/ b/ )/ 描述/ 了/ 当/ 业务/ 总量/ 达到/ 100unit/ // s/ 时/ 所有/ 物理/ 节点/ 的/ 吞吐/ 流量/ ./ 结果表明/ 当/ 并发/ 业务/ 流量/ 较大/ 的/ 时候/ ,/ 资源/ 分布/ 不/ 均衡/ 的/ 状况/ 趋于/ 明显/ ,/ 并/ 出现/ 了/ 若干/ 可能/ 会/ 导致/ 局部/ 网络/ 拥塞/ 的/ 流量/ 峰顶/ 节点/ ./ 图/ 2/ 描述/ 了/ 业务量/ 不断/ 上升/ 过程/ 时/ 的/ 服务/ 请求/ 接收/ 成功率/ ,/ 结果表明/ 当/ 系统/ 业务量/ 不断/ 上升/ 直至/ 超负荷/ 情况/ 下/ ,/ 服务/ 成功率/ 也/ 随之/ 陡降/ (/ 80unit/ // s/ 时/ 出现/ 过载/ 点/ )/ 这种/ 现象/ 证明/ 了/ 网络/ 拥塞/ 造成/ 的/ 资源/ 瓶颈/ 问题/ 会/ 严重/ 降低/ 系统/ 的/ 服务/ 吞吐量/ ./ 4/ 公平/ 负载/ 均衡/ QoS/ 路由/ 算法/ 由/ 第/ 3/ 节/ 理论/ 分析/ 和/ 实验/ 验证/ 可知/ ,/ 传统/ 算法/ 存在/ 无法/ 排除/ 局部/ 路径/ 瓶颈/ 的/ 问题/ ,/ 针对/ 该/ 问题/ 本文/ 提出/ 一种/ 公平/ 负载/ 均衡/ QoS/ 路由/ 算法/ F/ -/ LBQAR/ (/ Fair/ -/ LoadBalanceQoSAwareRouting/ )/ ,/ 在/ 路由/ 模型/ 中/ 引入/ 路径/ 资源/ 瓶颈/ 程度/ 约束/ 因子/ ,/ 尽量避免/ 选择/ 瓶颈/ 链路/ ,/ 能够/ 在/ 一定/ 程度/ 上/ 降低/ 网络/ 拥塞/ 的/ 出现/ 概率/ ./ 本节/ 给出/ 具体/ 算法/ 的/ 技术/ 路线/ ./ 4.1/ 服务/ 资源/ 消耗/ 的/ 代价/ 模型/ 传统/ 算法/ 通过/ 求取/ 链路/ 的/ 资源/ 消耗率/ 总和/ 计算/ 服务/ 资源/ 消耗/ 代价/ ,/ F/ -/ LBQAR/ 仍/ 采用/ 类似/ 的/ 模型/ ,/ 所/ 不同/ 的/ 是/ 本/ 算法/ 用/ 路径/ 的/ 消耗/ 代价/ 权值/ 代替/ 链路/ 的/ 消耗/ 代价/ 权值/ ,/ 这种/ 方法/ 分开/ 考虑/ 传输/ 资源/ 和/ 计算资源/ 的/ 约束/ 因子/ ,/ 更/ 符合/ 代价/ 特征/ 量/ 的/ 物理/ 意义/ ,/ 并/ 有利于/ 针对/ 不同/ 资源/ QoS/ 需求/ 做/ 独立/ 的/ 加权/ ./ 本节/ 首先/ 定义/ 针对/ 路径/ 路径/ 接入/ 服务/ 后/ 的/ 资源/ 消耗/ 代价/ 权值/ 的/ 计算/ 模型/ ,/ 该/ 模型/ 分为/ 两/ 部分/ :/ 一是/ 传输服务/ 代价/ :/ 以/ 链路/ 流量/ 消耗率/ 的/ 总和/ 表示/ ;/ 二是/ 计算/ 服务/ 代价/ :/ 以/ 节点/ 计算能力/ 消耗率/ 的/ 总和/ 表示/ ,/ 代价/ 函数/ 定义/ 如下/ ./ 定义/ 1/ ./ 路径/ 传输/ 资源/ 消耗/ 代价/ 函数/ ./ 设某/ 到达/ 业务/ 请求/ T/ ,/ 其/ 传输/ 资源/ 的/ QoS/ 需求/ 为/ Bt/ ,/ 假定/ 覆盖/ 网络系统/ 能够/ 提供/ 服务/ 路径/ P/ 接受/ Page4/ 业务/ T/ 的/ 服务/ 请求/ ,/ 则/ T/ 对/ P/ 的/ 传输/ 资源/ 消耗/ 代价/ Δ/ B/ (/ P/ )/ 为/ Δ/ B/ (/ P/ )/ =/ Bt/ // BR0/ ,/ 1/ +/ λ/ 1Bt/ // BR1/ ,/ 2/ +/ BRi/ ,/ j/ 为/ 路径/ P/ 上/ 每/ 跳/ 链路/ lij/ 的/ 可用/ 带宽/ 资源/ 存量/ ,/ λ/ 1/ ,/ …/ ,/ λ/ i/ 为/ 路径/ P/ 每一/ 跳/ 节点/ i/ 对/ 流量/ 的/ 影响/ 系数/ (/ 节点/ 输出/ 流量/ Bout/ =/ λ/ ×/ Bin/ ,/ λ/ 0/ =/ 1/ )/ ,/ tp/ 为/ 当前/ 路径/ 跳数/ ./ 定义/ 2/ ./ 路径/ 计算资源/ 消耗/ 代价/ 函数/ ./ 设某/ 到达/ 业务/ 请求/ T/ ,/ 其/ 计算资源/ 的/ QoS/ 需求/ 为/ Ct/ ,/ 假定/ 覆盖/ 网络系统/ 能够/ 提供/ 服务/ 路径/ P/ 接受/ 业务/ T/ 的/ 服务/ 请求/ ,/ 则/ T/ 对/ P/ 的/ 传输/ 资源/ 消耗/ 代价/ Δ/ C/ (/ P/ )/ 为/ Δ/ C/ (/ P/ )/ =/ Ct/ // CR0/ +/ Ct/ // CR1/ +/ Ct/ // CR2/ +/ …/ +/ Ct/ // CRtpCR0/ ,/ CR1/ ,/ …/ ,/ CRtp/ 为/ 路径/ P/ 上/ 每/ 跳/ 节点/ i/ (/ 包括/ 源/ 节点/ 和/ 目的/ 节点/ )/ 的/ 可用/ 计算资源/ 存量/ ,/ tp/ 为/ 当前/ 路径/ 跳数/ ./ 由/ 以上/ 定义/ 可知/ ,/ Δ/ B/ (/ P/ )/ 和/ Δ/ C/ (/ P/ )/ 两个/ 代价/ 约束/ 项是/ 相互/ 独立/ 的/ 参数/ 因子/ ,/ 因此/ 可/ 通过/ 加法/ 混合/ 度量/ 求取/ 路径/ 的/ 整体/ 代价/ 函数/ ,/ 如下/ 定义/ ./ 定义/ 3/ ./ 路径/ 资源/ 消耗/ 代价/ 函数/ 将式/ (/ 6/ )/ 和/ (/ 7/ )/ 代入/ 式/ (/ 5/ )/ 得式/ (/ 8/ )/ Cost/ (/ P/ )/ =/ Bt/ ·/ ∑/ tp4/ ./ 2/ 服务/ 资源/ 利用率/ 公平/ 指数/ 为了/ 降低/ 服务/ 路径/ 的/ 瓶颈/ 程度/ ,/ 本文/ 引入/ 了/ 一种/ 基于/ 服务/ 资源/ 利用率/ 公平/ 指数/ 的/ 权值/ 约束/ 路由/ 方法/ ,/ 该/ 方法/ 通过/ 计算/ 服务/ 路径/ 中/ 所有/ 链路/ 和/ 节点/ 的/ 资源/ 利用率/ 的/ 公平性/ 来/ 衡量/ 路径/ 中/ 是否/ 存在/ 瓶颈/ ./ 假设/ 存在/ 序列/ x1/ ,/ x2/ ,/ …/ ,/ xn/ ,/ 则/ 衡量/ 序列/ 均衡/ 度/ 的/ 公平/ 指数函数/ f/ (/ x/ )/ 的/ 定义/ [/ 11/ ]/ 如下/ :/ f/ (/ x/ )/ =/ (/ x1/ +/ x2/ +/ …/ +/ xn/ )/ 2/ 从/ 原理/ 上/ 分析/ 可知/ ,/ 公平/ 指数值/ f/ (/ x/ )/ 当/ x1/ =/ x2/ =/ …/ =/ xn/ 时/ f/ (/ x/ )/ 取/ 最大/ 为/ 1/ ,/ 而/ 如果/ 序列/ Ai/ 间/ 的/ 差值/ 波动/ 越高/ ,/ 则/ 其值/ 越/ 小/ ,/ 无限/ 趋近/ 于/ 0/ ,/ 因此/ f/ (/ x/ )/ 的/ 值域/ 为/ (/ 0/ ,/ 1/ ]/ ./ 如果/ 采用/ 数值/ 序列/ 的/ 均/ 方差/ 计算/ 均衡/ 度/ ,/ 则/ 情况/ 正好/ 相反/ ,/ 取值/ 越大则/ 波动/ 越高/ ,/ 值域/ 范围/ 为/ [/ 0/ ,/ 1/ )/ ,/ 但是/ 其值/ 有/ 可能/ 出现/ 为/ 0/ 的/ 情况/ ,/ 这种/ 情况/ 并/ 不利于/ 作/ 除法/ 系数/ ,/ 所以/ 采用/ 公平/ 指数/ 计算/ 均衡/ 度/ 的/ 方式/ 更/ 理想/ ./ 由/ 以上/ 定义/ 可知/ ,/ 可以/ 通过/ 计算/ 服务/ 路径/ 上/ 所有/ 节点/ 和/ 链路/ 的/ 资源/ 利用率/ 公平/ 指数/ 评价/ 路径/ 的/ 负载/ 均衡/ 程度/ ./ 假设/ 采用/ 资源/ 饱和度/ [/ 9/ ]/ 表征/ 利用率/ ,/ 则/ 如果/ 路径/ 上/ 部分/ 链路/ 和/ 节点/ 的/ 饱和/ 程度较高/ (/ 表明/ 链路/ 和/ 节点/ 的/ 负荷/ 较大/ )/ ,/ 会/ 造成/ 该/ 指数值/ 偏/ 大/ ,/ 如果/ 饱和/ 程度/ 越/ 均衡/ 的话/ ,/ 则/ 该/ 指数值/ 就/ 越/ 小/ (/ 但/ 高负荷/ 下/ 也/ 是/ 如此/ )/ ./ 因此/ 将/ 该/ 指数/ 作为/ 最短/ 路径/ 权值/ 的/ 正则/ 约束/ 项/ ,/ 可/ 减少/ 出现/ 瓶颈/ 的/ 概率/ ,/ 具体/ 计算方法/ 如下/ ./ 定义/ 4/ ./ 路径/ 传输/ 资源/ 的/ 利用率/ 公平/ 指数/ ./ 设某/ 到达/ 业务/ 请求/ T/ ,/ 其/ 传输/ 资源/ 的/ QoS/ 需求/ 为/ Bt/ ,/ 假定/ 覆盖/ 网络系统/ 能够/ 提供/ 服务/ 路径/ P/ 接受/ 业务/ T/ 的/ 服务/ 请求/ ,/ 则/ P/ 接入/ T/ 后/ 的/ 传输/ 资源/ 公平/ 指数/ fB/ (/ P/ )/ 计算/ 如下/ :/ fB/ (/ P/ )/ =/ ∑/ tpB/ (/ li/ ,/ i/ +/ 1/ )/ 为/ 路径/ P/ 上/ 链路/ li/ ,/ i/ +/ 1/ 接入/ 请求/ 后/ 的/ 传输/ 资源/ 负荷/ 饱和度/ 函数/ ,/ BRi/ ,/ i/ +/ 1/ 为/ 路径/ P/ 上/ 链路/ li/ ,/ i/ +/ 1/ 的/ 可用/ 带宽/ 资源/ 存量/ ,/ BRtotalli/ ,/ i/ +/ 1/ 的/ 可用/ 带宽/ 资源/ 总量/ ,/ tp/ 为/ 当前/ 路径/ 跳数/ ./ 该/ 指数/ 与/ 链路/ 的/ 传输/ 负荷/ 波动/ 成反比/ 线性关系/ ,/ 当/ 波动/ 程度/ 越高时/ ,/ 指数/ 取值/ 也/ 会/ 越/ 小/ ,/ 表明/ 路径/ 中/ 存在/ 瓶颈/ 链路/ 的/ 概率/ 越大/ ./ 定义/ 5/ ./ 路径/ 计算资源/ 的/ 利用率/ 公平/ 指数/ ./ 设某/ 到达/ 业务/ 请求/ T/ ,/ 其/ 传输/ 资源/ 的/ QoS/ 需求/ 为/ Ct/ ,/ 假定/ 覆盖/ 网络系统/ 能够/ 提供/ 服务/ 路径/ P/ 接受/ 业务/ T/ 的/ 服务/ 请求/ ,/ 则/ P/ 接入/ T/ 后/ 的/ 计算资源/ 公平/ 指数/ fc/ (/ P/ )/ 计算/ 如下/ :/ fc/ (/ P/ )/ =/ ∑/ tpC/ (/ ni/ )/ 为/ 路径/ P/ 上/ 每/ 跳/ 节点/ C/ (/ ni/ )/ (/ 包含/ 源/ 节点/ 和/ 目的/ 节点/ )/ 的/ 计算资源/ 饱和度/ 函数/ ,/ CRi/ 为/ 节点/ ni/ 的/ 可用/ 带宽/ 资源/ 存量/ ,/ CRtotalPage5/ 总量/ ./ 该/ 指数/ 与/ 节点/ 的/ 计算/ 负荷/ 波动/ 成反比/ 线性关系/ ,/ 当/ 波动/ 程度/ 越高/ ,/ 指数/ 取值/ 也/ 会/ 越/ 小/ ,/ 表明/ 路径/ 中/ 存在/ 瓶颈/ 节点/ 的/ 概率/ 越大/ ./ 单纯/ 使用/ 该/ 指数/ 作/ 路径/ 选择/ 只能/ 选出/ 均衡/ 度高/ 的/ 路径/ ,/ 但/ 无法/ 降低/ 路径/ 的/ 整体/ 消耗/ 代价/ ,/ 因此/ 将式/ (/ 11/ )/ 、/ (/ 13/ )/ 引入/ 式/ (/ 7/ )/ ,/ 在/ 服务/ 代价/ 模型/ 的/ 基础/ 上/ 加入/ 瓶颈/ 约束/ 因子/ ,/ 通过/ 乘性/ 混合/ 度量/ 计算/ 服务/ 路径/ 的/ 负载/ 均衡/ 度/ ,/ 这样/ 就/ 能够/ 获得/ 瓶颈/ 概率/ 小且/ 资源/ 消耗/ 少/ 的/ 服务/ 路径/ ,/ 负载/ 均衡/ 效用函数/ 的/ 计算方法/ 如下/ ./ 定义/ 6/ ./ 服务/ 路径/ 的/ 资源/ 负载/ 均衡/ 效用函数/ 4.3/ 基于/ 负荷/ 加权/ 的/ 负载/ 均衡/ 启发式/ 函数/ 式/ (/ 14/ )/ 描述/ 了/ 服务/ 请求/ 接入/ 后/ 对系统/ 及/ 服务/ 路径/ 负载/ 均衡/ 状态/ 的/ 影响/ 情况/ ,/ 因此/ 根据/ 影响/ 程度/ 的/ 轻重/ 就/ 可/ 决定/ 路由/ 的/ 选择/ ./ 分析/ 该/ 公式/ 可知/ ,/ Δ/ B/ (/ P/ )/ // fB/ (/ P/ )/ 因子/ 对/ 提高/ 传输/ 资源/ 的/ 负载/ 均衡/ 程度/ 有利/ ,/ 而/ Δ/ C/ (/ P/ )/ // fC/ (/ P/ )/ 因子/ 对/ 提高/ 计算资源/ 的/ 负载/ 均衡/ 程度/ 有利/ ,/ 两者/ 影响/ 权重/ 完全/ 相等/ ./ 而/ 在/ 实际/ 情况/ 中/ ,/ 覆盖/ 网络/ 在/ 特定/ 运行/ 周期/ 内/ 不同/ 类型/ 资源/ 的/ 负荷/ 状态/ 和/ 瓶颈/ 程度/ 往往/ 并不相同/ ./ 显然/ ,/ 如果/ 某类/ 资源/ 的/ 瓶颈/ 情况/ 或者/ 负载/ 更重/ ,/ 应当/ 更/ 倾向/ 于/ 优化/ 该类/ 资源/ 的/ 分配/ ,/ 因此/ 本文/ 考虑/ 采用/ 系统/ 负荷/ 分布/ 状况/ 对/ 两类/ 因子/ 进行/ 加权/ 处理/ ,/ 修正/ 模型/ 的/ 精度/ ./ 4.3/ ./ 1/ 系统/ 负荷/ 状况/ 评价/ 方法/ 考虑/ 到/ F/ -/ LBQAR/ 算法/ 的/ 目标/ 是/ 降低/ 系统资源/ 饱和度/ 的/ 波动/ ,/ 尽量/ 提高/ 整个/ 网络/ 的/ 负载/ 分布/ 的/ 均衡性/ ,/ 因此/ 本文/ 采用/ 了/ 基于/ 全局/ 资源/ 公平/ 指数/ 的/ 加权/ 方法/ ,/ 通过/ 计算/ 系统/ 总体/ 传输/ 和/ 计算/ 服务/ 资源/ 的/ 波动/ 程度/ 来/ 得到/ 权重/ 值/ ./ 式/ (/ 15/ )/ 、/ (/ 16/ )/ 可/ 计算/ 出/ 全局/ 计算资源/ 饱和度/ 的/ 公平/ 指数/ Gc/ 和/ 传输/ 资源/ 饱和度/ 的/ 公平/ 指数/ Gb/ ,/ 这/ 两个/ QoS/ 指标/ 能够/ 对/ 当前/ 系统/ 的/ 负载/ 均衡/ 程度/ 进行/ 量化/ 评价/ :/ 其中/ C/ (/ ni/ )/ =/ (/ CRtotal/ 其中/ B/ (/ lj/ )/ =/ (/ BRtotalk/ 和/ m/ 分别/ 是/ 图/ G/ 的/ 节点/ 数/ 和/ 链路/ 数/ ,/ Gc/ 和/ Gb/ 能够/ 表征/ 当前/ 资源/ 饱和度/ 的/ 波动/ 程度/ ,/ 两个/ QoS/ 参数/ 越大/ ,/ 则/ 表明/ 接入/ 服务/ 后/ 系统/ 的/ 资源/ 平均/ 饱和/ 程度/ 越/ 均衡/ ,/ 瓶颈/ 程度/ 越轻/ ,/ 而/ 反之/ 两个/ QoS/ 参数/ 越小/ ,/ 则/ 表明/ 接入/ 服务/ 后/ 系统/ 的/ 资源/ 平均/ 饱和/ 程度/ 越/ 不/ 均衡/ ,/ 瓶颈/ 程度/ 越/ 严重/ ,/ 注意/ Gc/ 和/ Gb/ 的/ 值域/ 为/ (/ 0/ ,/ 1/ ]/ ./ 4.3/ ./ 2/ 加权/ 负载/ 均衡/ 启发式/ 函数/ 本/ 节/ 基于/ Gc/ 和/ Gb/ 的/ 比例/ 关系/ 设计/ 负载/ 均衡/ 的/ 权重/ 因子/ 的/ 计算方法/ ,/ 设定/ α/ 为/ 计算资源/ 负载/ 均衡/ 的/ 加权/ 判决/ 因子/ ,/ β/ 为/ 传输/ 资源/ 负载/ 均衡/ 的/ 加权/ 判决/ 因子/ ,/ 则/ α/ ,/ β/ 的/ 计算公式/ 如下/ :/ 由于/ Gc/ 和/ Gb/ 值越/ 大/ 表明/ 资源/ 分布/ 越/ 均衡/ ,/ 那么/ 权重/ 应/ 倾向/ 于值/ 越/ 小/ 的/ 那/ 一/ 类型/ 资源/ ,/ 因此/ 实际上/ 式/ (/ 17/ )/ 和/ (/ 18/ )/ 采用/ 的/ 是/ 反比例/ 计算/ ./ 新/ 定义/ 负载/ 均衡/ 效用函数/ 为/ w/ (/ P/ )/ =/ β/ ×/ Δ/ B/ (/ P/ )/ 基于/ 式/ (/ 17/ )/ 和/ (/ 18/ )/ 对式/ (/ 19/ )/ 进行/ 线性/ 加权/ ,/ 重由/ 以上/ 定义/ 可知/ ,/ w/ (/ P/ )/ 值越/ 小则/ 路径/ 负载/ 均衡/ 程度/ 越高/ ./ 4.4/ F/ -/ LBQAR/ 算法/ 流程/ 本节/ 将/ 描述/ F/ -/ LBQAR/ 算法/ 的/ 具体/ 流程/ ,/ 算法/ 中将/ 采用/ Dijkstra/ 算法/ [/ 8/ ]/ 搜索/ 最短/ 路径/ ,/ 算法/ 采用/ 了/ 邻接矩阵/ 方法/ ,/ 因此/ 其/ 计算/ 复杂度/ 为/ O/ (/ n2/ )/ ,/ 与/ QUEST/ 、/ PBSP/ 及/ RBLCP/ 相同/ ,/ 具体步骤/ 如下/ ./ F/ -/ LBQAR/ 算法/ ./ 公平/ 负载/ 均衡/ QoS/ 路由/ 算法/ ./ 输入/ :/ 业务/ 请求/ T/ ,/ 传输/ 资源/ 的/ QoS/ 需求/ 为/ Bt/ ,/ 计算/ 资/ 输出/ :/ 从/ G/ 找到/ 一条/ 从/ 节点/ K/ 到/ 节点/ M/ 的/ 单播/ 服务/ 1/ ./ 根据/ T/ 的/ 资源/ QoS/ 约束/ ,/ 剪除/ G/ 所有/ 无法/ 满足/ Bt/ 和/ Ct/ 的/ 节点/ 与/ 链路/ ,/ 获取/ 备选/ 网络/ G/ ,/ 如果/ 目标/ 节点/ K/ 、/ M/ / G/ ,/ 则/ 算法/ 结束/ ,/ 拒绝/ 业务/ T/ ;/ 2/ ./ 基于/ Dijkstra/ 算法/ 开始/ 最短/ 路径/ 搜索/ ;/ 3/ ./ 初始化/ K/ 到/ 所有/ 节点/ 对间/ 的/ 代价/ 及/ 路由/ 信息/ ,/ 设/ / t/ ∈/ G/ ,/ 有/ DISTANCE/ [/ t/ ]/ =/ ,/ ROUTE/ [/ t/ ]/ =/ -/ 1/ ,/ DISTANCE/ [/ ]/ 是/ 距离/ 矩阵/ 表/ ,/ ROUTE/ 是/ K/ 节点/ 路由表/ ;/ 4/ ./ 设定/ 根/ 节点/ ROOT/ =/ K/ ,/ 搜索/ 节点/ SN/ =/ K/ ,/ 备选/ 搜索/ 集合/ B/ _/ SERARCH/ =/ {/ G/ -/ K/ }/ ,/ 开始/ 最短/ 路径/ 迭代/ 搜索/ ;/ 5/ ./ 设定/ NB/ 为/ SN/ 的/ 邻居/ 节点/ 集合/ ,/ 则/ 有/ / 节点/ S/ ∈/ NB/ ,/ / 链路/ SN/ →/ S/ ,/ 且/ / 路径/ PATH/ (/ ROOT/ ,/ S/ )/ ;/ 6/ ./ 逐次/ 计算/ ROOT/ 至/ NB/ 中/ 节点/ 的/ 路径/ PATH/ 的/ 传输/ 资源/ 和/ 计算资源/ 代价/ 权值/ Δ/ B/ (/ P/ )/ 和/ Δ/ C/ (/ P/ )/ ;/ 7/ ./ 逐次/ 计算/ ROOT/ 至/ NB/ 中/ 节点/ 的/ 路径/ PATH/ 的/ 传输/ 资源/ 和/ 计算资源/ 公平/ 指数/ fB/ (/ P/ )/ 和/ fc/ (/ P/ )/ ;/ 8/ ./ 计算/ G/ 的/ 全局/ 公平/ 指数/ Gc/ 、/ Gb/ 及/ 加权/ 系数/ α/ 和/ β/ ;/ 9/ ./ 逐次/ 计算/ ROOT/ 到/ 所有/ S/ ∈/ NB/ 路径/ 的/ 负载/ 均衡/ 权/ Page6/ 值/ w/ (/ P/ )/ ,/ 如果/ w/ (/ P/ )/ </ DISTANCE/ [/ S/ ]/ ,/ 则/ 更新/ 距离/ 矩阵/ DISTANCE/ [/ S/ ]/ =/ w/ (/ P/ )/ 及/ 路由表/ ROUTE/ [/ S/ ]/ =/ SN/ ;/ 10/ ./ 如果/ / N/ ∈/ B/ _/ SEARCH/ ,/ DISTANCE/ [/ N/ ]/ ≠/ ,/ 且/ 为/ 目前/ 到/ ROOT/ 的/ 最小/ 距离/ 值/ ,/ 则/ 取/ SN/ =/ N/ ,/ B/ _/ SERARCH/ =/ B/ _/ SERARCH/ -/ N/ ,/ 并/ 跳转/ 到步/ 5/ ,/ 否则/ 到步/ 11/ ;/ 11/ ./ 如果/ DISTANCE/ [/ M/ ]/ =/ ,/ 则/ 搜索/ 失败/ ,/ 拒绝/ 业务/ T/ ;/ 12/ ./ 如果/ DISTANCE/ [/ M/ ]/ ≠/ ,/ 则/ 接受/ 业务/ T/ ,/ 并/ 根据/ ROTUE/ [/ ]/ 回溯/ 建立/ K/ →/ M/ 的/ 服务/ 路径/ ./ 5/ 仿真/ 实验/ 分析/ 5.1/ 实验/ 环境/ 本文/ 通过/ NS2/ [/ 10/ ]/ 仿真/ 工具/ 模拟/ 覆盖/ 网络系统/ 的/ 资源/ 调度/ 场景/ ,/ 验证/ F/ -/ LBQAR/ 算法/ 与/ 传统/ 算法/ 间/ 的/ 性能/ 差异/ ./ 仿真/ 方法/ 采用/ NS2/ 平台/ 生成/ 模拟/ 的/ 物理/ 拓扑/ ,/ 然后/ 在/ 此/ 拓扑/ 基础/ 上/ 通过/ 节点/ 间/ 建立/ 逻辑/ 的/ 应用/ 连接/ 构建/ 覆盖/ 网络空间/ ,/ 最后/ 部署/ 应用层/ 路由/ 协议/ 实现/ 相关/ 的/ 算法/ ,/ 具体步骤/ 分为/ 两步/ :/ (/ 1/ )/ 覆盖/ 空间/ 与/ 物理/ 拓扑/ 间/ 的/ 虚/ 映射/ ./ 首先/ 构建/ 一组/ 三元/ 向量/ 犌/ =/ {/ OverlayGraph/ ,/ OverlayNode/ ,/ OverlayLink/ }/ 描述/ 覆盖/ 网络空间/ 的/ 3/ 种/ 实体/ 对象/ ,/ 对应/ 分别/ 为/ 覆盖/ 拓扑/ 对象/ 、/ 覆盖/ 节点/ 对象/ 及/ 覆盖/ 链路/ 对象/ ,/ 并且/ 通过/ 继承/ NS2/ 中/ 的/ NSObject/ 对象/ ,/ 使/ 这些/ 元素/ 能够/ 在/ TCL/ 实例/ 化/ ;/ 然后/ 建立/ NS2/ 中/ 的/ 物理/ 拓扑/ 空间/ 与/ 覆盖/ 对象/ 间/ 的/ 映射/ 关系/ ,/ 由/ 主动/ 选出/ 的/ 物理/ 节点/ 一一对应/ 生成/ 若干/ OverlayNode/ 对象/ ,/ 并/ 根据/ 底层/ 路由表/ 采用/ 邻近/ 领接法/ [/ 12/ ]/ (/ 即使/ 得/ 两个/ 覆盖/ 节点/ 间/ 的/ 覆盖/ 链路/ 不/ 存在/ 其它/ 覆盖/ 节点/ )/ 构建/ 出/ 覆盖/ 网络拓扑/ ,/ 生成/ 相应/ 的/ OverlayLink/ 对象/ ;/ 最后/ 通过/ OverlayNode/ 和/ OverlayLink/ 组合/ 形成/ 覆盖/ 拓扑/ 对象/ OverlayGraph/ ./ (/ 2/ )/ 实时/ Agent/ 监测/ ./ 生成/ 覆盖/ 网络/ 后/ ,/ 仍/ 需要/ 采用/ 端到/ 端的/ 测量方法/ [/ 13/ -/ 14/ ]/ 获取/ 覆盖/ 网络/ 中/ 的/ 各种/ 网络/ 性能参数/ ,/ 首先/ 继承/ NS2/ 中/ 的/ Agent/ 对象/ 生成/ OverlayAgent/ 对象/ ,/ 该/ 对象/ 可/ 放置/ 在/ 任一/ Overlay/ -/ Node/ 上/ ,/ 并/ 通过/ 向/ 邻近/ 的/ 节点/ 发送/ 探测/ 包来/ 评估/ 和/ 交换/ OverlayLink/ 和/ OverlayNode/ 的/ 性能/ ,/ 比如/ 传输/ 延时/ 、/ 路径/ 可用/ 带宽/ 等/ ,/ 所有/ 实时/ 性能/ 数据/ 和/ 通信/ 连接/ 信息/ 可以/ 存放/ 在/ OverlayGraph/ 的/ 性能/ 数据库/ 中/ ,/ 根据/ 这些/ 信息/ OverlayGraph/ 对象/ 可以/ 实时/ 计算/ 出/ 全局/ 路由表/ ./ 对于/ 业务/ 通信/ 的/ 模拟/ 则/ 改进/ 了/ NS2/ 的/ 流量/ 发生/ 机制/ ./ 本文/ 设计/ 了/ OverlayTraffic/ 对象/ 可以/ 依照/ OverlayGraph/ 中/ 的/ 路由表/ 建立/ 多个/ OverlayNode/ 节点/ 对间/ 的/ 流/ Application/ (/ NS2/ 中/ 的/ Application/ 对象/ )/ 形成/ 应用层/ 连接/ 式/ 的/ 服务/ 路径/ ,/ 并且/ 基于/ 服务/ 路径/ 对象/ OverlayPath/ 存储/ 已/ 建立/ 的/ 路由/ 信息/ ,/ 随时/ 进行/ 路径/ 的/ 拆除/ 、/ 中断/ 、/ 更新/ 等/ 操作/ ./ 5.2/ 仿真/ 实验/ 结果/ 分析/ 本/ 实验/ 共/ 分成/ 两组/ :/ 衡量/ 算法/ 在/ 网络/ 规模/ 和/ 业务量/ 增长/ 的/ 情况/ 下/ 对系统/ 吞吐量/ 的/ 影响/ (/ 5.2/ ./ 1/ 节/ 实验/ 2/ )/ ;/ 衡量/ 算法/ 在/ 业务量/ 增长/ 的/ 情况/ 下/ 对系统/ 负载/ 波动/ 程度/ 的/ 影响/ (/ 5.2/ ./ 2/ 节/ 实验/ 3/ )/ ./ 5.2/ ./ 1/ 服务/ 成功率/ 及/ 吞吐量/ 测试/ 实验/ 2/ ./ 模拟/ 海量/ QoS/ 服务/ 请求/ 不断/ 到达/ 的/ 场景/ ,/ 通过/ 服务/ 成功率/ 和/ 吞吐量/ 等/ QoS/ 指标/ 验证/ 不同/ 的/ 负载/ 均衡/ 覆盖/ 路由/ 算法/ 对系统/ 吞吐量/ 的/ 影响/ ./ 实验/ 环境/ 基于/ GT/ -/ ITM/ [/ 15/ ]/ 分别/ 生成/ 4/ 种/ 随机/ 分布/ 物理/ 网络/ ,/ 网络/ 大小/ 分别/ 为/ 50/ 个/ 节点/ (/ scale/ =/ 100/ ×/ 100/ )/ 、/ 100/ 个/ 节点/ (/ scale/ =/ 100/ ×/ 100/ )/ 、/ 150/ 个/ 节点/ (/ scale/ =/ 100/ ×/ 100/ )/ 、/ 200/ 个/ 节点/ (/ scale/ =/ 100/ ×/ 100/ )/ ;/ 节点/ 间/ 存在/ 一条/ 双向/ 链路/ 为/ 0.02/ 概率/ ,/ 每条/ 链路/ 的/ 带宽/ 为/ 2Mbps/ ,/ 延时/ 为/ 200/ ~/ 1000ms/ ;/ 选择/ 30/ %/ 的/ 物理/ 节点/ 为/ 覆盖/ 节点/ ,/ 每个/ 节点/ 最大/ 计算能力/ 为/ 20unit/ // s/ ;/ 通过/ OverlayTraffic/ 模拟/ 到达/ 率为/ 20/ ~/ 400unit/ // s/ 的/ CBR/ 业务/ 流/ ,/ 平均/ 流量/ 为/ 300kbps/ ,/ 分别/ 测试/ QUEST/ 、/ PBSP/ 、/ RBLCP/ 及/ F/ -/ LBQAR/ 算法/ 的/ QoS/ 服务/ 成功率/ (/ Qos/ -/ ServiceSuccessRate/ ,/ QSSR/ )/ [/ 5/ ]/ :/ 实验/ 采用/ 了度/ 稀疏/ 的/ 物理/ 网络/ (/ 0.02/ 概率/ )/ 构建/ 覆盖/ 网络/ ,/ 因此/ 受限/ 的/ 网络资源/ 导致/ 拥塞/ 较易/ 出现/ ,/ 从图/ 3/ 的/ 数据/ 中/ 明显/ 观察/ 到/ 系统/ 逐渐/ 过载/ ,/ 成功率/ 逐渐/ 下降/ 的/ 过程/ ./ 分析/ 实验/ 结果/ 可知/ ,/ 随着/ 业务/ 流量/ 的/ 不断/ 增长/ ,/ 资源/ 调度/ 的/ QoS/ 服务/ 成功率/ 也/ 在/ 不断/ 下降/ ,/ 这/ 表明/ 网络/ 出现/ 拥塞/ 而/ 过载/ ./ 由于/ 通常/ 网络/ 承载/ 负荷/ 的/ 能力/ 随着/ 网络/ 规模/ 的/ 增长/ 而/ 提高/ ,/ 因此/ 图/ 3/ (/ a/ )/ 中/ 的/ 50/ 个/ 节点/ 网络/ 过载/ 点/ 出现/ 较/ 早/ ,/ 在/ 80unit/ // s/ 负荷/ 左右/ ,/ 而图/ 3/ (/ d/ )/ 中/ 的/ 过载/ 点则/ 出现/ 较晚/ ,/ 在/ 260unit/ // s/ 负荷/ 左右/ ./ 从/ 该/ 实验/ 结果/ 可以/ 看出/ ,/ 无论/ 在/ 哪种/ 拓扑/ 下/ ,/ 相对/ 于/ 传统/ 算法/ ,/ F/ -/ LBQAR/ 算法/ 能够/ 在/ 系统/ 过载/ 的/ 情况/ 下/ QSSR/ 提高/ 了/ 1/ %/ ~/ 5/ %/ 左右/ ,/ 特别/ 对/ 小规模/ 的/ 网络/ 更加/ 明显/ ,/ 最高/ 能/ 提高/ 5/ %/ 左右/ 的/ 成功率/ (/ 图/ 3/ (/ a/ )/ ,/ 120/ ~/ 200unit/ // s/ )/ ,/ 该/ 结果/ 说明/ F/ -/ LBQAR/ 算法/ 比/ 传统/ 算法/ 更能/ 适应/ 恶劣/ 的/ 网络/ 环境/ ,/ 有利于/ 提高/ 网络系统/ 的/ 吞吐量/ ./ 图/ 4/ 的/ 实验/ 结果/ 描述/ 了/ 在/ 100/ 个/ 节点/ 大小/ 的/ 网络/ 平面/ 上/ ,/ 当/ 系统/ 负荷/ 达到/ 100unit/ // s/ 业务量/ 时/ ,/ 执行/ 各类/ 算法/ 所/ 构成/ 的/ 网络/ 节点/ 流量/ 分布/ 情况/ ,/ 可以/ 看出/ 每种/ 算法/ 仍会/ 产生/ 出现/ 拥塞/ 的/ 节点/ (/ 流量/ 值较/ Page7/ 图/ 3/ 不同/ 拓扑/ 下/ QSSR/ 测试/ 实验/ 结果/ 图/ 4/ 网络/ size/ =/ 100/ 、/ 100unit/ // s/ 下/ 各/ 算法/ 节点/ 吞吐量/ 分布/ 情况/ 高/ 的/ 节点/ 数/ )/ ,/ 但/ 执行/ F/ -/ LBQAR/ 算法/ 后/ ,/ 拥塞/ 节点/ 相对/ 少于/ 其它/ 算法/ ,/ 负载/ 能够/ 被/ 更加/ 均衡/ 地/ 分布/ 在/ 网络/ 平面/ 上/ ./ 表/ 1/ 统计/ 了/ 该/ 情况/ 下/ 的/ 流量/ 峰值/ 节点/ 数目/ 的/ 分布/ 情况/ ,/ 分析/ 可知/ 在/ 这种/ 实验/ 环境/ 下/ ,/ QUEST/ 算法/ 和/ PBSP/ 算法/ 出现/ [/ 5000kpbs/ ,/ 4000kpbs/ ]/ 、/ [/ 4000kbps/ ,/ 3000kbps/ ]/ 及/ [/ 3000kbps/ ,/ 2000kbps/ ]/ 流量/ 区间/ 上/ 的/ 高负荷/ 节点/ 概率/ 要/ 远高于/ RBLCP/ 及/ F/ -/ LBQAR/ ,/ 而/ RBLCP/ 算法/ 产生/ 的/ 在/ [/ 4000kbps/ ,/ 3000kbps/ ]/ 区间/ 内/ 的/ 峰值/ 节点/ 数目/ 略高于/ F/ -/ LBQAR/ ,/ 但/ [/ 2000kbps/ ,/ 1000kbps/ ]/ 区间/ 内/ 节点/ 数目/ 要/ 远高于/ F/ -/ LBQAR/ ,/ 而/ F/ -/ LBQAR/ 算法/ 的/ 峰值/ 节点/ 则/ 主要/ 集中/ 在/ [/ 1000kbps/ ,/ 0kbps/ ]/ 部分/ ,/ 这/ 说明/ F/ -/ LBQAR/ 能够/ 将/ 负载/ 更加/ 均衡/ 分布/ ,/ 即/ 提高/ 了/ 网络资源/ 的/ 利用率/ ,/ 又/ 同时/ 降低/ 了/ 拥塞/ 节点/ 的/ 数量/ ./ Page8/ 吞吐量/ 范围/ [/ 5000kpbs/ ,/ 4000kpbs/ ]/ 3300/ [/ 4000kpbs/ ,/ 3000kpbs/ ]/ 3154/ [/ 3000kpbs/ ,/ 2000kpbs/ ]/ 151244/ [/ 2000kpbs/ ,/ 1000kpbs/ ]/ 34364740/ [/ 1000kpbs/ ,/ 0kpbs/ ]/ 454844525.2/ ./ 2/ 负载/ 均衡/ 波动/ 程度/ 测试/ 实验/ 3/ ./ 模拟/ 海量/ QoS/ 服务/ 请求/ 不断/ 到达/ 的/ 场景/ ,/ 测试/ 系统/ 链路/ 和/ 节点/ 资源/ 饱和度/ 的/ 波动/ 情况/ ,/ 以/ 验证/ 不同/ 的/ 覆盖/ 路由/ 算法/ 的/ 负载/ 均衡/ 能力/ ./ 实验/ 通过/ 链路/ 的/ 传输/ 负荷/ (/ 饱和度/ )/ 和/ 节点/ 的/ 计算/ 负荷/ (/ 饱和度/ )/ 的/ 波动/ 率/ 的/ 方差/ (/ ResidualLinkCapacityDeviation/ ,/ RLCD/ )/ 、/ (/ ResidualNodeCapacityDeviation/ ,/ RNCD/ )/ [/ 5/ -/ 6/ ]/ 两个/ QoS/ 指标/ 衡量/ 算法/ 对于/ 系统/ 的/ 总体/ 负载/ 均衡/ 程度/ 的/ 影响/ ,/ 定义/ 如下/ :/ 图/ 5/ 负载/ 均衡/ 波动/ 率/ 测试/ 实验/ —/ —/ —/ 100/ 点/ 计算资源/ 瓶颈/ 网络图/ 6/ 负载/ 均衡/ 波动/ 率/ 测试/ 实验/ —/ —/ —/ 100/ 点/ 传输/ 资源/ 瓶颈/ 网络/ C/ (/ ni/ )/ ,/ B/ (/ lj/ )/ 为/ 网络/ 中/ 物理/ 节点/ 和/ 链路/ 的/ 资源/ 饱和度/ 函数/ ,/ 珚/ C/ ,/ 珚/ B/ 为/ 系统/ 两类/ 资源/ 的/ 平均/ 饱和度/ ,/ k/ 和/ m/ 分别/ 是/ 节点/ 和/ 链路/ 总数/ ./ 实验/ 首先/ 基于/ GT/ -/ ITM/ 分别/ 生成/ 2/ 种/ 随机/ 分布/ 物理/ 网络/ ,/ 网络/ 大小/ 均/ 为/ 100/ 节点/ ;/ 一种/ 网络/ 中/ 节点/ 间/ 存在/ 一条/ 双向/ 链路/ 为/ 0.1/ 概率/ (/ scale/ =/ 10/ ×/ 10/ )/ ,/ 每条/ 链路/ 的/ 带宽/ 为/ 2Mbps/ ,/ 随机/ 设定/ 30/ %/ 的/ 物理/ 节点/ 为/ 覆盖/ 节点/ ,/ 每个/ 节点/ 最大/ 计算能力/ 为/ 20unit/ // s/ ,/ 该/ 网络/ 属于/ 计算资源/ 相对/ 稀疏/ 的/ 网络拓扑/ ;/ 另/ 一种/ 网络/ 节点/ 间/ 存在/ 一条/ 双向/ 链路/ 为/ 0.02/ 概率/ (/ scale/ =/ 100/ ×/ 100/ )/ ,/ 每条/ 链路/ 的/ 带宽/ 为/ 1Mbps/ ,/ 随机/ 设定/ 30/ %/ 的/ 物理/ 节点/ 为/ 覆盖/ 节点/ ,/ 每个/ 节点/ 最大/ 计算能力/ 为/ 40unit/ // s/ ,/ 该/ 网络/ 属于/ 传输/ 资源/ 相对/ 稀疏/ 的/ 网络拓扑/ ;/ 通过/ OverlayTraffic/ 模拟/ 到达/ 率为/ 0/ ~/ 250unit/ // s/ 的/ CBR/ 业务/ 流/ ,/ 平均/ 流量/ 为/ 300kbps/ ,/ 分别/ 测试/ QUEST/ 、/ PBSP/ 、/ RBLCP/ 及/ F/ -/ LBQAR/ 算法/ 在/ 不同/ 拓扑/ 及/ 负荷量/ 情况/ 下/ 的/ RNCD/ 与/ RLCD/ ,/ 实验/ 结果/ 如图/ 5/ 、/ 图/ 6/ 所示/ ./ 从图/ 5/ 、/ 图/ 6/ 的/ 实验/ 结果/ 可以/ 观察/ 到/ ,/ 随着/ 负荷量/ 上升/ ,/ 所有/ 资源/ 饱和度/ 的/ 波动/ 率/ 也/ 会/ 呈上升/ 趋势/ ,/ Page9/ 这/ 说明/ 负载/ 会/ 增大/ 系统/ 不/ 均衡/ 程度/ ./ 而/ 当/ 拥塞/ 过载/ 发生/ 以后/ ,/ 波动/ 率/ 反而/ 会/ 有所/ 下降/ ,/ 这/ 是因为/ 过载/ 的/ 服务/ 节点/ 和/ 链路/ 会/ 拒绝/ 新/ 的/ 请求/ ,/ 导致/ 负荷/ 自然/ 分布/ 到/ 空闲/ 的/ 资源/ 上/ ./ 图/ 5/ 描述/ 了/ 计算资源/ 相对/ 稀疏/ 网络/ 上/ 各种/ 算法/ 的/ 均衡/ 情况/ ,/ 可以/ 看出/ 该/ 网络/ 上/ 高负荷/ 情况/ 下/ 计算资源/ 出现/ 明显/ 拥塞/ (/ 超过/ 140unit/ // s/ )/ ,/ 而/ 传输/ 资源/ 波动/ 仍/ 处在/ 上升/ 过程/ ,/ 说明/ 传输/ 资源/ 仍/ 未/ 饱和/ ./ 但图/ 5/ 结果/ 说明/ 在/ 这种/ 计算资源/ 相对/ 稀缺/ 的/ 网络/ 环境/ 下/ ,/ 相对/ 传统/ 算法/ ,/ F/ -/ LBQAR/ 算法/ 能够/ 在/ 系统/ 过载/ 的/ 情况/ 下/ 降低/ 3/ %/ ~/ 8/ %/ 左右/ 的/ RNCD/ ,/ 而/ RLCD/ 值/ 与/ 其它/ 算法/ 基本/ 保持/ 在/ 同一/ 水平/ ./ 图/ 6/ 结果/ 与/ 图/ 5/ 相/ 类似/ ,/ 但/ 由于/ 节点/ 拥塞/ 会/ 对/ 多条/ 链路/ 造成/ 影响/ ,/ 因此/ 传输/ 拥塞/ (/ 图/ 6/ (/ b/ )/ )/ 不如/ 计算/ 拥塞/ (/ 图/ 5/ (/ a/ )/ )/ 明显/ ,/ 然而/ 其/ 结果/ 仍然/ 表明/ F/ -/ LBQAR/ 算法/ 仍/ 能够/ 在/ 系统/ 过载/ 的/ 情况/ 下/ 降低/ 2/ %/ ~/ 6/ %/ 左右/ 的/ RLCD/ (/ 超过/ 160unit/ // s/ )/ ,/ 而/ RNCD/ 与/ 其它/ 算法/ 基本/ 保持/ 在/ 同一/ 水平/ ./ 分析/ 两种/ 实验/ 数据/ 结果/ 可以/ 得出结论/ :/ F/ -/ LBQAR/ 相对/ 传统/ 算法/ 具有/ 更好/ 地/ 资源/ 均衡/ 分配/ 能力/ ,/ 特别/ 是/ 有利于/ 优化/ 系统/ 紧缺/ 资源/ 的/ 分布/ 状况/ ,/ 在/ 高负荷/ 业务/ 环境/ 及/ 同样/ 的/ 吞吐/ 流量/ 下/ 能够/ 降低/ 2/ %/ ~/ 8/ %/ 左右/ 的/ 资源/ 饱和度/ 波动/ 率/ (/ RLCD/ 、/ RNCD/ )/ ./ 6/ 总结/ 基于/ 覆盖/ 网络/ 环境/ 解决/ 分布式应用/ 的/ 负载/ 均衡/ QoS/ 路由/ 是/ 一个/ 非常/ 重要/ 的/ 研究/ 方向/ ,/ 而/ 传统/ 的/ 覆盖/ 网络/ QoS/ 路由/ 算法/ 未/ 考虑/ 资源/ 瓶颈/ 对/ 路由/ 选择/ 的/ 影响/ ,/ 容易/ 造成/ 系统/ 的/ 局部/ 拥塞/ ,/ 本文/ 提出/ 一种/ 公平/ 负载/ 均衡/ QoS/ 覆盖/ 路由/ 算法/ F/ -/ LBQAR/ ,/ 能够/ 降低/ 资源/ 瓶颈/ 引起/ 的/ 网络/ 拥塞/ 概率/ ,/ 提高/ QoS/ 服务/ 成功率/ 和/ 系统/ 吞吐量/ ./ 该/ 方法/ 相对/ 传统/ 算法/ 具有/ 两个/ 创新/ 之/ 处/ :/ (/ 1/ )/ 在/ 路由/ 模型/ 中/ 引入/ 了/ 路径/ 服务/ 资源/ 利用率/ 的/ 公平/ 指数/ ,/ 依据/ 资源/ 消耗/ 代价/ 模型/ 推导/ 负载/ 均衡/ 启发式/ 函数/ ,/ 有利于/ 选出/ 阻塞/ 概率/ 较/ 小/ 的/ 服务/ 路径/ ,/ 且/ 总体/ 代价/ 仍能/ 保持/ 相对/ 较/ 低水平/ ;/ (/ 2/ )/ 基于/ 全局/ 系统资源/ 的/ 瓶颈/ 程度/ 计算/ 路由/ 约束/ 项/ 的/ 权重/ 因子/ ,/ 有利于/ 瓶颈/ 资源/ 自/ 适应/ 的/ 优化/ 分布/ ./ 实验/ 结果/ 证明/ 相对/ 传统/ 算法/ ,/ F/ -/ LBQAR/ 算法/ 在/ 高负荷/ 情况/ 下能/ 提高/ 1/ %/ ~/ 5/ %/ 服务/ 成功率/ (/ QSSR/ )/ ,/ 降低/ 2/ %/ ~/ 8/ %/ 负载/ 波动/ (/ RNCD/ ,/ RLCD/ )/ ,/ 该/ 研究成果/ 将/ 有助于/ 分布式系统/ 开发/ 高性能/ 的/ 资源/ 服务/ 调度/ 策略/ ./ F/ -/ LBQAR/ 算法/ 目前/ 仅/ 考虑/ 了/ 覆盖/ 网络/ 端到/ 端的/ 单播/ 服务/ 路由/ ,/ 尚未/ 涉及/ 覆盖/ 组播/ 路由/ 的/ 负载/ 均衡/ 问题/ ,/ 本文/ 未来/ 研究/ 工作/ 重点/ 将/ 考虑/ 覆盖/ 组播/ 路由/ 情况/ 下/ 优化/ 资源/ 分布/ ,/ 同时/ 考虑/ 节点/ 度/ 、/ 组播/ 树/ 延迟/ 等/ 更/ 多/ QoS/ 参数/ 的/ 约束/ ./ 

