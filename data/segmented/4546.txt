Page1BDSim/ :/ 面向/ 大/ 数据/ 应用/ 的/ 组件/ 化高/ 可配/ 并行/ 模拟/ 框架/ 1/ )/ (/ 中国科学院计算技术研究所/ 计算机/ 体系结构/ 国家/ 重点/ 实验室/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 大学/ 北京/ 100049/ )/ 3/ )/ (/ 华为技术有限公司/ 中央研究院/ 北京/ 100085/ )/ 4/ )/ (/ 高效能/ 服务器/ 和/ 存储技术/ 国家/ 重点/ 实验室/ 北京/ 100085/ )/ 5/ )/ (/ 数学/ 工程/ 与/ 先进/ 计算/ 国家/ 重点/ 实验室/ 江苏/ 无锡/ 214125/ )/ 摘要/ 大规模/ 并行/ 模拟/ 是/ 研究/ 大/ 数据/ 体系结构/ 的/ 重要/ 方法/ ,/ 对大/ 数据/ 应用/ 及众/ 核/ 体系结构/ 的/ 发展/ 有着/ 不可/ 替代/ 的/ 推动/ 作用/ ./ 然而/ ,/ 目前/ 的/ 模拟/ 技术/ 不能/ 满足/ 大/ 数据/ 体系结构/ 研究/ 的/ 需求/ ,/ 主要/ 体现/ 在/ 模拟/ 速度慢/ 、/ 配置/ 过程/ 复杂/ 以及/ 可扩展性/ 差/ 等/ 方面/ ./ 为了/ 解决/ 此/ 问题/ ,/ 评估/ 面向/ 大/ 数据/ 应用/ 的/ 高通量/ 众核/ 体系结构/ 的/ 性能/ 与/ 功耗/ ,/ 该文/ 提出/ 了/ 面向/ 大/ 数据/ 应用/ 的/ 并行/ 模拟/ 框架/ —/ —/ —/ BDSim/ ./ 该/ 框架/ 基于/ 组件/ 化/ 思想/ ,/ 将/ 功能/ 组件/ 与/ 框架/ 服务/ 单元/ 组成/ 并行/ 功能/ 单元/ ,/ 并/ 可/ 根据/ 负载/ 情况/ ,/ 自由/ 配置/ 组件/ 与/ 框架/ 服务/ 单元/ 之间/ 的/ 映射/ 关系/ ./ 为了/ 提高/ 组件/ 之间/ 的/ 通信/ 和/ 同步/ 效率/ ,/ 该文/ 提出/ 了/ 一种/ 非/ 阻塞/ 无锁/ 通信/ 优化/ 方法/ ,/ 和/ 一种/ CMB/ 保守/ 同步/ 算法/ 的/ 优化/ 算法/ —/ —/ —/ NMTRT/ -/ CMB/ 同步/ 算法/ ./ 模拟/ 不同/ 并发/ 规模/ 的/ 基于/ 2D/ -/ Mesh/ 网络/ 的/ 众核/ 系统/ 的/ 实验/ 结果表明/ ,/ 与/ 基于/ 锁/ 的/ 并行/ 通信/ 方法/ 相比/ ,/ 框架/ 采用/ 的/ 非/ 阻塞/ 无锁/ 通信/ 优化/ 方法/ 可以/ 提高/ 并行/ 模拟/ 速度/ 约/ 10/ %/ ,/ 该/ 算法/ 与/ CMB/ 同步/ 算法/ 相比/ ,/ NMTRT/ -/ CMB/ 同步/ 算法/ 可以/ 减少/ 空/ 消息/ 数量/ 达/ 90/ %/ 以上/ ./ 关键词/ 组件/ 化/ 并行/ 模拟/ 框架/ ;/ 并行/ 离散/ 事件/ 模拟/ ;/ 非/ 阻塞/ 无锁/ 通信/ ;/ CMB/ 算法/ ;/ 高可配/ ;/ 大/ 数据/ 1/ 引言/ 随着/ 网络/ 购物/ 、/ 物/ 联网/ 、/ 舆情/ 监测/ 等/ 应用/ 的/ 迅速/ 发展/ ,/ 数据中心/ 需要/ 处理/ 的/ 数据量/ 呈/ 爆炸式/ 增长/ ./ 面对/ 快速增长/ 的/ 数据/ 规模/ ,/ 面向/ 传统/ 应用/ 的/ 处理器/ 体系结构/ 在/ 处理速度/ 、/ 功耗/ 以及/ 数据/ 带宽/ 等/ 方面/ 都/ 表现/ 出/ 了/ 不足/ 与/ 缺陷/ ./ 大/ 数据处理/ 不同于/ 用于/ 科学计算/ 的/ 超级计算机/ ,/ 不是/ 追求/ 尽量/ 缩短/ 单个/ 任务/ 的/ 计算/ 时间/ ,/ 而是/ 在/ 允许/ 的/ 时间/ 范围/ 内/ 处理/ 尽可能/ 多/ 的/ 任务/ (/ 数据/ 或/ 线程/ )/ [/ 1/ -/ 2/ ]/ ./ 因此/ ,/ 现有/ 的/ 众核/ 结构/ 已/ 不能/ 满足/ 实际/ 需要/ ,/ 体系结构/ 需要/ 重大/ 变革/ [/ 3/ ]/ ./ 近年来/ ,/ 为了/ 满足/ 大/ 数据/ 应用/ 的/ 实际/ 需求/ ,/ 众核/ 体系结构/ 的/ 研究/ 在/ 学术界/ 和/ 工业界/ 都/ 得到/ 了/ 一定/ 的/ 发展/ ./ 针对/ 众核/ 处理器/ 性能/ 、/ 功耗/ 、/ 温度/ 等/ 方面/ 的/ 改善/ 也/ 成为/ 当前/ 的/ 研究/ 热点/ [/ 4/ -/ 10/ ]/ ./ 然而/ ,/ 目前/ 的/ 模拟/ 技术/ ,/ 显然/ 已/ 不能/ 满足/ 针对/ 大/ 数据处理/ 的/ 大规模/ 众核/ 处理器/ 的/ 模拟/ 要求/ ,/ 限制/ 了/ 众核/ 体系结构/ 的/ 进一步/ 发展/ ,/ 主要/ 体现/ 在/ 模拟/ 速度慢/ 、/ 配置/ 过程/ 复杂/ 、/ 可扩展性/ 差/ 等/ 方面/ ./ 通常/ ,/ 一款/ 模拟器/ 的/ 开发/ 需要/ 权衡/ 以下/ 4/ 个/ 方面/ :/ 精度/ 、/ 速度/ 、/ 可扩展性/ 以及/ 可/ 配置/ 性/ ./ 随着/ 众核/ 体系结构/ 各/ 功能/ 部件/ 数量/ 与/ 实现/ 复杂度/ 的/ 增加/ ,/ 传统/ 串行/ 模拟器/ 因为/ 速度/ 的/ 原因/ 已经/ 严重/ 不/ 适于/ 大规模/ 众核/ 处理器/ 的/ 模拟/ ,/ 成为/ 限制/ 模拟器/ 发展/ 的/ 主要/ 因素/ ./ 例如/ ,/ 目前/ 常用/ 的/ 串行/ 模拟器/ GEM5/ [/ 11/ ]/ 、/ MARSS/ [/ 12/ ]/ ,/ 模拟/ 速度/ 大约/ 在/ 200KIPS/ 左右/ ./ 基于/ 此/ 速度/ ,/ 模拟/ 一个/ 真实/ 物理/ 核/ 的/ 一秒钟/ 大约/ 需要/ 几个/ 小时/ ,/ 模拟/ 一千个/ 核/ 的/ 一秒钟/ ,/ 几乎/ 需要/ 一年/ 的/ 时间/ ./ 而/ 与/ 串行/ 模拟器/ 相对/ 的/ 并行/ 模拟器/ 能/ 并发模拟/ 功能/ 部件/ 执行/ 状态/ ,/ 显著/ 提高/ 模拟/ 速度/ ,/ 被/ 广泛/ 用于/ 众核/ 体系结构/ 的/ 模拟/ ./ 然而/ ,/ 大规模/ 并行/ 模拟器/ 的/ 开发/ 面临/ 诸多/ 挑战/ ./ 首先/ ,/ 被/ 模拟/ 结构复杂/ ./ 随着/ 体系结构/ 不断/ 发展/ ,/ 不仅/ 模拟系统/ 内/ 模块/ 的/ 数量/ 逐渐/ 增加/ ,/ 模块/ 的/ 功能/ 也/ 更加/ 复杂/ ,/ 导致/ 模拟器/ 开发/ 任务量/ 大/ 、/ 周期长/ ./ 其次/ ,/ 模拟器/ 并行/ 困难/ ./ 由于/ 模拟器/ 系统/ 是/ 紧/ 耦合/ 设计/ ,/ 导致/ 并行/ 过程/ 中/ 任务/ 难以/ 划分/ 、/ 并行/ 单元/ 难以/ 管理/ 、/ 同步控制/ 难以实现/ ,/ 此外/ 并行/ 模拟/ 过程/ 中/ 的/ 消息/ 通信/ 也/ 成为/ 制约/ 性能/ 提升/ 的/ 重要/ 因素/ ./ 最后/ ,/ 系统/ 构造/ 过程/ 复杂/ ./ 不同/ 的/ 配置/ 形成/ 的/ 不同/ 的/ 体系结构/ (/ 包括/ :/ 网络拓扑/ 、/ 存储/ 层次/ 、/ 一致性/ 协议/ 等/ )/ 导致/ 目标/ 系统/ 性能/ 迥异/ ,/ 因而/ 大规模/ 模拟/ 带来/ 了/ 配置/ 上/ 的/ 沉重负担/ ./ 所以/ ,/ 灵活/ 的/ 配置/ 功能/ 对/ 体系结构/ 研究/ 是/ 至关重要/ 的/ ./ 在/ 对/ 大规模/ 并行/ 模拟系统/ 的/ 强烈/ 需求/ 下/ ,/ 学术界/ 与/ 工业界/ 涌现出/ 大量/ 的/ 并行/ 模拟器/ ./ 比较/ 有/ 代表性/ 的/ 研究/ 工作/ 有/ Simics/ [/ 13/ ]/ 、/ Graphite/ [/ 14/ ]/ 、/ SimFlex/ [/ 15/ ]/ 、/ SST/ ①/ 、/ Hornet/ [/ 16/ ]/ 、/ SlackSim/ [/ 17/ ]/ 、/ ZSim/ [/ 18/ ]/ 等等/ ./ 但是/ 这些/ 模拟器/ 研发/ 初期/ 便/ 以/ 不同/ 的/ 侧重点/ 为/ 目标/ ,/ 导致/ 其/ 并/ 不能/ 完全/ 满足/ 高通量/ 众核/ 处理器/ 的/ 模拟/ 需/ ①/ RodriguesAF/ ./ Thestructuralsimulationtoolkit/ ,/ http/ :/ // // Page3/ 求/ ,/ 例如/ Simics/ 拥有/ 极其丰富/ 的/ 模拟/ 组件/ 用于/ 搭建/ 系统/ 模型/ ,/ 在/ 学术/ 和/ 工业界/ 都/ 得到/ 了/ 广泛/ 的/ 应用/ ,/ 但/ 对/ 基于/ 共享/ 访存/ 的/ 多/ 核/ 模拟系统/ 并/ 没有/ 得到/ 很/ 好/ 的/ 支持/ ;/ SST/ 采用/ 模块化/ 搭建/ 方法/ ,/ 具有/ 较/ 好/ 的/ 可/ 配置/ 和/ 扩展性/ ,/ 但是/ Barrie/ 同步/ 方法/ 导致/ 其/ 速度/ 不尽人意/ ;/ ZSim/ 则/ 采用/ 不同/ 的/ 加速/ 方法/ 来/ 提高/ 模拟/ 速度/ ,/ 但/ 专用性/ 太强/ ,/ 灵活性/ 和/ 可扩展性/ 较差/ ./ 由此可见/ ,/ 现存/ 的/ 并行/ 模拟器/ 在/ 模拟/ 速度/ 、/ 灵活性/ 、/ 可扩展性/ 及/ 对/ 大规模/ 并发模拟/ 等/ 方面/ 的/ 支持/ 上均/ 不能/ 满足/ 其/ 要求/ ./ 针对/ 目前/ 的/ 现状/ ,/ 为了/ 找到/ 高效/ 的/ 解决方案/ ,/ 本文/ 提出/ 了/ 支持/ 大规模/ 并行/ 系统模拟/ 的/ 并行/ 模拟/ 框架/ —/ —/ —/ BDSim/ ./ 该/ 模拟/ 框架/ 基于/ 组件/ 化/ 思想/ ,/ 将/ 功能模块/ 抽象/ 成功/ 能/ 组件/ ,/ 以/ 动态链接库/ 的/ 形式/ 存在/ 和/ 加载/ ,/ 增强/ 了/ 模拟/ 的/ 灵活性/ 和/ 模块/ 的/ 复用/ 性/ ./ 模拟/ 框架/ 采用/ 高效/ 的/ 通信/ 方式/ 和/ 同步/ 算法/ ,/ 提高/ 了/ 执行/ 效率/ ./ 同时/ 支持/ 高可配/ 设计模式/ ,/ 提供/ 文件/ 和/ 图形化/ 两种/ 配置/ 方法/ ,/ 降低/ 了/ 配置/ 的/ 复杂性/ ,/ 提高/ 了/ 框架/ 的/ 易用性/ ./ 实验/ 分析/ 和/ 应用/ 举例/ 表明/ ,/ BDSim/ 并行/ 模拟/ 框架/ 能够/ 很/ 好/ 地/ 支持/ 大规模/ 并发/ 系统/ 的/ 模拟/ ,/ 适用/ 于/ 大/ 数据处理/ 的/ 众核/ 处理器/ 体系结构/ 的/ 研究/ ./ 本文/ 的/ 主要/ 贡献/ 如下/ :/ (/ 1/ )/ 基于/ 组件/ 化/ 思想/ ./ 所有/ 功能模块/ 以/ 组件/ 库/ 的/ 方式/ 加载/ 至/ 模拟/ 框架/ 中/ ,/ 已/ 开发/ 的/ 组件/ 以/ 资源库/ 的/ 形式/ 存在/ ./ 提出/ 了/ FS/ (/ FrameworkService/ )/ 概念/ ,/ 作为/ 组件/ 运行/ 的/ 代理/ ,/ 是/ 并行/ 的/ 最小/ 单位/ ./ (/ 2/ )/ 实现/ 高效/ 的/ 非/ 阻塞/ 无锁/ 通信/ 方法/ ./ 加快/ 消息/ 的/ 处理速度/ ,/ 提高/ 整体/ 框架/ 的/ 执行/ 效率/ ./ (/ 3/ )/ 实现/ 高效/ 的/ NMTRT/ -/ CMB/ (/ 基于/ 空/ 消息/ 时间/ 戳/ 请求/ 标志/ 位/ )/ 同步/ 算法/ ,/ 同时/ 支持/ 粒度/ 可调/ 的/ 松散/ 同步/ 算法/ ./ BDSim/ 提供/ 两种/ 同步/ 算法/ ,/ 一种/ 是/ 基于/ CMB/ (/ Chandy/ -/ Misra/ -/ Bryant/ )/ 同步/ 算法/ [/ 19/ ]/ 的/ 改进/ 算法/ :/ NMTRT/ -/ CMB/ 同步/ 算法/ ./ 另/ 一种/ 是/ 粒度/ 可调/ 的/ 松散/ 同步/ ./ (/ 4/ )/ 支持/ 高可配/ 设计模式/ ./ BDSim/ 提供/ 两种/ 配置/ 方式/ :/ 一种/ 是/ 通过/ 配置文件/ ,/ 另/ 一种/ 是/ 通过/ 图形化/ 操作界面/ ./ 本文/ 第/ 2/ 节/ 描述/ 相关/ 工作/ 及/ 研究/ 动机/ ;/ BDSim/ 模拟/ 框架/ 的/ 实现/ 细节/ 及/ 各种/ 算法/ 应用/ 将/ 在/ 第/ 3/ 节/ 讨论/ ,/ 包括/ 基础/ 框架/ 、/ 端口/ 、/ 组件/ 和/ FS/ 等/ 模块/ 的/ 实现/ 及/ 非/ 阻塞/ 无锁/ 通信/ 方法/ 和/ NMTRT/ -/ CMB/ 同步/ 算法/ ;/ 实验/ 和/ 结果/ 分析/ 将会/ 在/ 第/ 4/ 节/ 给出/ ;/ 第/ 5/ 节/ 通过/ 应用/ 举例/ ,/ 描述/ 如何/ 使用/ BDSim/ 搭建/ 高效/ 的/ 大/ 数据/ 模拟/ 评估/ 模型/ ;/ 最后/ 对/ 论文/ 进行/ 总结/ 及/ 阐述/ 未来/ 的/ 研究/ 方向/ ./ 2/ 相关/ 工作/ 和/ 研究/ 动机/ 随着/ 众核/ 体系结构/ 规模/ 日益/ 庞大/ ,/ 大规模/ 并行/ 体系结构/ 的/ 模拟/ 变成/ 巨大/ 的/ 挑战/ ./ 目前/ ,/ 大多数/ 模拟器/ 都/ 是/ 串行/ 执行/ ./ 串行/ 模拟器/ 用/ 一个/ 主机/ 线程/ 来/ 模拟/ 整个/ 目标/ 系统/ ,/ 当/ 目标/ 系统/ 的/ 核数/ 增加/ 时/ ,/ 分配/ 给/ 单个/ 核/ 的/ 模拟/ 性能/ 就/ 会/ 下降/ ./ 目前/ 已经/ 有/ 许多/ 方法/ 被/ 用来/ 加速/ 模拟/ ,/ 包括/ 并行/ 模拟/ 、/ 直接/ 执行/ [/ 20/ ]/ 、/ FPGA/ 加速/ [/ 21/ ]/ 等等/ ./ 下面/ 简要/ 介绍/ 几款/ 支持/ 大规模/ 体系结构/ 模拟/ 的/ 模拟器/ 及其/ 关键技术/ ./ ZSim/ [/ 18/ ]/ ,/ 是/ MIT/ 和/ 斯坦福大学/ 推出/ 的/ 一款/ 千核级/ 并行/ 模拟器/ ,/ 目标/ 是/ 解决/ 众核/ 并行/ 模拟/ 的/ 速度/ 问题/ ./ ZSim/ 通过/ 使用/ 基于/ 指令/ 驱动/ 的/ 时序模拟/ 配合/ 二进制/ 翻译/ 机制/ 实现/ 单核/ 模拟/ 组件/ 加速/ ./ 在/ 并行/ 加速/ 方面/ ,/ 提出/ 了/ Bound/ -/ Weave/ 执行/ 算法/ ,/ 将/ 模拟/ 分成/ Bound/ 和/ Weave/ 两个/ 阶段/ ./ Bound/ 阶段/ 首先/ 进行/ 一定/ 时间/ 的/ 功能/ 模拟/ ,/ 同时/ 记录/ 必要/ 的/ 访存序/ ./ Weave/ 阶段/ 根据/ 之前/ 记录/ 的/ 访存序/ 驱动/ 并行/ 模拟/ ,/ 输出/ 时序/ 统计/ 信息/ ,/ 极大/ 地/ 加快/ 了/ 模拟/ 速度/ ./ 虽然/ 对于/ 众核/ 模拟/ 能够/ 达到/ 很/ 高/ 的/ 速度/ ,/ 但是/ 对于/ 其他/ 功能模块/ 的/ 模拟/ ,/ 例如/ 网络/ 、/ 存储/ 等/ 模块/ ,/ 并/ 不是/ 其/ 研究/ 重点/ ./ 同时/ 不/ 支持/ 组件/ 化/ ,/ 不/ 能够/ 灵活/ 配置/ 并行度/ ,/ 限制/ 了/ 其/ 使用/ 范围/ ./ MARSS/ [/ 12/ ]/ ,/ 是/ 一款/ 结合/ 了/ QEMU/ 和/ PTLsim/ 的/ 支持/ 多核/ 模拟/ 的/ 全/ 系统模拟/ 平台/ ./ MARSS/ 具有/ QMEU/ 的/ 全/ 系统/ 支持/ 功能/ 及/ 二进制/ 翻译/ 加速/ 功能/ ,/ 也/ 具有/ PTLsim/ 精确/ 的/ 乱序/ 核/ 模拟/ 功能/ ./ 同时/ 也/ 提供/ 详细/ 的/ 性能/ 统计分析/ 功能/ 和/ 配置/ 功能/ ./ 不足之处/ 是/ MARSS/ 模拟/ 平台/ 是/ 基于/ X86/ 指令集/ 的/ 全/ 系统模拟/ ,/ 且/ 可扩展性/ 比较/ 差/ ,/ 严重/ 影响/ 了/ 二次开发/ ,/ 且/ 对于/ 大/ 数据/ 众核/ 模拟/ 并/ 不能/ 提供/ 很/ 好/ 的/ 支持/ ./ Asim/ [/ 22/ ]/ ,/ 是/ Intel/ 研发/ 的/ 一款/ 针对/ 复杂/ 计算机系统/ 的/ 模块化/ 模拟/ 框架/ ./ Asim/ 通过/ 模块化/ 和/ 重用/ 性/ 解决/ 模拟/ 的/ 复杂性/ ./ 通过/ 模块化/ 的/ 实现/ 方法/ ,/ 可以/ 将/ 复杂/ 的/ 性能/ 模拟/ 分解成/ 离散/ 的/ 单/ 模块/ ,/ 简化/ 了/ 实现/ 的/ 复杂性/ ./ 模块/ 的/ 可/ 重用/ 性/ 可以/ 将/ 已经/ 验证/ 的/ 模块/ 重新/ 用于/ 新/ 环境/ 中/ ,/ 既保证/ 了/ 模块/ 的/ 可靠性/ ,/ 也/ 加速/ 了/ 模拟/ 模型/ 的/ 实现/ 过程/ ,/ 提高/ 了/ 开发/ 效率/ ./ 然而/ ,/ Asim/ 的/ 最大/ 缺陷/ 在于/ 其/ 模拟/ 的/ 非/ 并行/ 化/ ,/ 这/ 对于/ 大/ 数据/ 的/ 模拟/ 需求/ 来说/ 是/ 难以/ 回避/ 的/ 问题/ ./ SST/ 是/ 一款/ 开源/ 、/ 模块化/ 且/ 支持/ 并行执行/ 的/ 模拟/ 框架/ ./ 模块/ 主要/ 包括/ 处理器/ 、/ 储存器/ 及/ 一些/ 网络/ 模型/ ./ SST/ 已经/ 广泛应用/ 于/ HPC/ 系统/ 的/ 模拟/ ./ 它/ 采用/ Page4/ 了/ 模块化/ 的/ 搭建/ 方法/ ,/ 允许/ 目标/ 系统/ 使用/ 已经/ 存在/ 的/ 组件/ 来/ 组装/ 实现/ ./ 在/ 并行/ 模拟/ 方面/ ,/ 使用/ Barrie/ 的/ 方法/ 进行/ 同步操作/ ./ 然而/ ,/ 此种/ 同步/ 方法/ 会/ 降低/ 模拟/ 的/ 速度/ ./ Manifold/ ①/ ,/ 是/ 一项/ 开源/ 软件工程/ ,/ 旨在/ 为/ 多/ 核/ 体系/ 架构/ 提供/ 建模/ 和/ 模拟/ 的/ 可扩展性/ 基础/ 框架/ ./ 方法/ 是/ 通过/ 使用/ 成熟/ 的/ 并行/ 离散/ 事件/ 模拟/ (/ PDES/ )/ 算法/ 及/ 并行/ 时间/ 步进/ 技术/ 实现/ 粗粒度/ 的/ 并行/ 模拟/ 以/ 获取/ 模拟/ 的/ 可扩展性/ ./ Manifold/ 对于/ 并行/ 模拟/ 具有/ 很/ 好/ 的/ 支持/ ,/ 但是/ 并/ 不/ 支持/ 松散/ 同步/ 机制/ ,/ 影响/ 模拟/ 的/ 速度/ ./ SIMFLEX/ [/ 15/ ]/ ,/ 是/ 一款/ 基于/ 组件/ 设计/ 思想/ 的/ 模拟/ 框架/ ,/ 具备/ 精确/ 的/ 采样/ 统计/ 功能/ ,/ 支持/ 复杂/ 模型/ 开发/ ,/ 能够/ 确保/ 在/ 快速/ 模拟/ 过程/ 中/ 获取/ 到/ 具有/ 代表性/ 的/ 统计数据/ ./ SIMFLEX/ 的/ 创新/ 之/ 处/ 在于/ 它/ 将/ 独特/ 的/ 编译/ 时/ 方法/ 应用/ 于/ 组件/ 链接/ 过程/ ,/ 能够/ 运行/ 不/ 经/ 修改/ 的/ 商业/ 负载/ ,/ 且/ 能/ 获取/ 到/ 精确/ 的/ 模拟/ 数据/ ./ 但/ 缺点/ 是/ SIMFLEX/ 不/ 支持/ 并行/ 模拟/ 机制/ ./ Simics/ [/ 13/ ]/ ,/ 是/ 一款/ 商用/ 模拟/ 框架/ ,/ 拥有/ 丰富/ 的/ 模拟/ 组件/ ,/ 在/ 学术/ 和/ 工业界/ 都/ 得到/ 了/ 广泛/ 的/ 使用/ ./ 处理器/ 、/ 存储器/ 、/ 系统/ 控制器/ 、/ 各种/ 总线/ 和/ 网络结构/ 等/ 目标/ 系统/ 都/ 可以/ 模拟/ 实现/ ./ 同时/ 提供方便/ 的/ 软件测试/ 和/ 调试/ 环境/ ,/ 也/ 支持/ 回滚/ 调试/ 和/ 执行/ ./ 为了/ 提高/ 模拟/ 速度/ ,/ Simics/ 推出/ 了/ SimicsAccelerator/ 加速器/ [/ 24/ ]/ ./ 它/ 能/ 充分/ 地/ 利用/ 多核/ 宿主机/ 来/ 提高/ 目标/ 系统/ 的/ 模拟/ 速度/ ./ 然而/ ,/ 大规模/ 并发/ 系统/ 及/ 共享/ 访存式/ 多核/ 系统/ 并/ 没有/ 得到/ 很/ 好/ 的/ 支持/ ./ 除此之外/ ,/ 还有/ 众多/ 针对/ 大规模/ 体系结构/ 的/ 模拟/ 模型/ ,/ 例如/ BGLsim/ [/ 25/ ]/ 、/ BigSim/ [/ 26/ ]/ 、/ Hornet/ [/ 16/ ]/ 、/ Parti/ -/ tionSim/ [/ 23/ ]/ 、/ SlackSim/ [/ 17/ ]/ 、/ SimHPC/ [/ 27/ ]/ 、/ WWT/ [/ 28/ ]/ 等/ 并行/ 模拟器/ ./ 在/ 众多/ 模拟/ 加速/ 技术/ 中/ ,/ 并行/ 模拟/ 因为/ 能够/ 利用/ 目标/ 结构/ 天然/ 的/ 并行/ 特征/ ,/ 能/ 在/ 低成本/ CMP/ 计算机/ 上/ 实现/ ,/ 成为/ 一种/ 常用/ 的/ 有效/ 加速/ 技术/ ./ 但是/ ,/ 针对/ 大/ 数据处理/ 的/ 众核/ 模拟系统/ 需/ 达到/ 千核/ 万线/ 程/ 量级/ ./ 以上/ 各/ 模拟器/ 在/ 模拟/ 规模/ 一旦/ 达到/ 千核/ 万线/ 程/ 量级/ 时/ ,/ 在/ 速度/ 、/ 灵活性/ 、/ 易用性/ 、/ 可扩展性/ 等/ 方面/ 会/ 暴露出/ 各种/ 缺点/ ,/ 并/ 不能/ 很/ 好/ 地/ 满足/ 需求/ ./ 另一方面/ ,/ 传统/ 的/ 体系结构/ 已经/ 不能/ 满足/ 大/ 数据/ 高通量/ 的/ 需求/ ./ Ferdman/ 等/ 人/ [/ 3/ ]/ 在/ 当前/ 流行/ 的/ 处理器/ 硬件/ 上/ 针对/ 规模化/ 大/ 数据/ 应用/ 做/ 了/ 大量/ 的/ 实验/ ./ 结果表明/ ,/ 在/ 传统/ 的/ 处理器/ 架构/ 中/ 表现出色/ 的/ 核/ 内乱/ 序/ 、/ 指令/ 级/ 并行/ 、/ 层级/ Cache/ 、/ 访存/ 预取/ 等/ 结构设计/ 在/ 大/ 数据/ 应用/ 下/ 表现/ 平平/ ,/ 甚至/ 成为/ 影响/ 性能/ 的/ 瓶颈/ 问题/ ./ 因此/ ,/ 亟需/ 一款/ 灵活/ 、/ 易用/ 、/ 高可配/ 、/ 高效率/ 的/ 并行/ 模拟器/ ,/ 以/ 解决/ 大/ 数据处理/ 结构/ 研究/ 和/ 制造/ 的/ 模拟/ 需求/ ./ 考虑/ 到/ 以上/ 各/ 模拟器/ 的/ 优势/ 和/ 缺点/ 以及/ 针对/ 大/ 数据/ 应用/ 的/ 模拟/ 特点/ ,/ 本文/ 提出/ 了/ 一种/ 基于/ 组件/ 化/ 的/ 面向/ 大/ 数据/ 应用/ 模拟/ 的/ 并行/ 模拟/ 框架/ BDSim/ ./ BDSim/ 采用/ 离散/ 并行/ 事件/ 模拟/ 机制/ ,/ 首次/ 提出/ 了/ FS/ (/ FrameworkService/ )/ 概念/ ,/ 支持/ 灵活/ 的/ 并行/ 粒度/ 调节/ ./ 使用/ 优化/ 的/ 非/ 阻塞/ 无锁/ 通信/ 方式/ ,/ 提高/ 了/ 模拟/ 速度/ ./ 并/ 支持/ NMTRT/ -/ CMB/ 同步/ 算法/ 和/ 松散/ 粒度/ 同步/ 算法/ ./ 在/ 配置/ 方面/ ,/ BDSim/ 提供/ 了/ 方便/ 灵活/ 的/ 配置/ 方法/ ,/ 相对/ 于/ 其他/ 模拟器/ ,/ 在/ 高通量/ 众核/ 系统/ 建模/ 过程/ 中/ ,/ 极大/ 地/ 减少/ 了/ 使用/ 的/ 复杂度/ ,/ 减轻/ 了/ 研究/ 人员/ 的/ 负担/ ./ 3BDSim/ 结构/ 与/ 特点/ 本节/ 从/ 组件/ 化/ 、/ 通信/ 、/ 同步/ 及/ 配置/ 等/ 方面/ 对/ BDSim/ 实现/ 结构/ 及/ 特点/ 进行/ 详细描述/ ./ 3.1/ 组件/ 化/ 框架/ 3.1/ ./ 1/ 相关/ 概念/ PDES/ (/ ParallelDiscreteEventSimulation/ )/ ./ 并行/ 离散/ 事件/ 模拟/ ./ PDES/ 根据/ 事件/ 和/ 时间/ 戳/ 驱动/ 模拟/ 执行/ ,/ 相对/ 于/ 传统/ 的/ 系统/ 时间/ 驱动/ 方法/ ,/ PDES/ 具有/ 较/ 高/ 的/ 执行/ 效率/ [/ 29/ ]/ ./ 图/ 1/ 展示/ 了/ SDES/ (/ 串行/ 离散/ 事件/ 模拟/ )/ 和/ PDES/ 之间/ 的/ 关系/ ./ 可以/ 看出/ ,/ SDES/ 可以/ 由/ 一个/ 或/ 多个/ 逻辑/ 功能/ 单元/ 构成/ ,/ 而/ 多个/ SDES/ 按照/ 时间轴/ 同时/ 运行/ 构成/ PDES/ ./ (/ 1/ )/ 组件/ 逻辑/ 功能/ 单元/ ./ 使用者/ 在/ BDSim/ 提供/ 的/ 接口协议/ 之下/ 定义/ 的/ 为/ 实现/ 特定/ 功能/ 的/ 模块/ 单元/ ,/ 以/ 动态/ 连接/ 库/ 的/ 形式/ 存在/ ,/ 可/ 根据/ 配置/ ,/ 动态/ 加载/ 至/ BDSim/ 模拟/ 框架/ 上/ ./ (/ 2/ )/ 端口/ 组件/ 属性/ 之一/ ,/ 消息/ 通信/ 处理单元/ ./ 端口/ 的/ 数量/ 是/ 由/ 与其/ 相联/ 的/ 其他/ 组件/ 的/ 个数/ 决定/ ./ 当/ 目标/ 模型/ ①/ ManifoldProject/ ./ http/ :/ // // manifold/ ./ gatech/ ./ edu/ ./ 2011Page5/ 拓扑/ 结构/ 确定/ 后/ ,/ 端口/ 会/ 得到/ 一个/ 全局/ 编址/ ./ 端口地址/ 会/ 插入/ 到/ 消息/ 中/ ,/ 用于/ 路由/ 和/ 寻址/ ./ (/ 3/ )/ FS/ (/ FrameworkService/ )/ 框架/ 服务/ 单元/ ,/ 并行执行/ 的/ 基本/ 单元/ ./ 所有/ 功能/ 组件/ 必须/ 挂载/ 到/ FS/ 之上/ ./ FS/ 相当于/ 组件/ 代理/ ,/ 处理/ 拓扑/ 、/ 通信/ 、/ 同步/ 等/ 关键问题/ ./ 通过/ 使用/ FS/ ,/ 一方面/ 可以/ 将/ 用户/ 从/ 繁杂/ 的/ 并行/ 同步/ 和/ 通信/ 处理/ 中/ 解脱/ 出来/ ,/ 交由/ FS/ 处理/ ,/ 用户/ 只/ 关注/ 于/ 组件/ 的/ 功能/ 实现/ ;/ 另一方面/ ,/ FS/ 的/ 使用/ 使得/ 模拟/ 框架/ 高度/ 模块化/ ,/ 这/ 使得/ 大规模/ 数据处理/ 并行/ 模拟/ 成为/ 现实/ ./ 3.1/ ./ 2/ 框架/ 架构/ BDSim/ 框架结构/ 如图/ 2/ 所示/ ./ 最底层/ 是/ 多/ 核/ 宿主机/ ./ 之上/ 的/ 模拟/ 服务/ 层/ 是/ 框架/ 的/ 主体/ 部分/ ,/ 由/ FS/ 组成/ ,/ 实现/ 整个/ 模拟/ 框架/ 的/ 同步/ 和/ 通信/ 等/ 功能/ ,/ 为/ 上层/ 的/ 各种/ 组件/ 运行/ 提供/ 支持/ ./ 模拟/ 层/ 即/ 按照/ 模拟/ 需求/ 实现/ 的/ 各/ 功能/ 组件/ ,/ 所有/ 组件/ 的/ 功能/ 之/ 和/ 构成/ 了/ 整个/ 目标/ 系统/ 的/ 模拟/ 功能/ ./ 最上层/ 是/ 应用层/ ,/ 具体/ 实现目标/ 二进制/ 程序/ 的/ 加载/ 和/ 用户/ 控制/ 的/ 响应/ ./ BDSim/ 将/ 框架/ 拆/ 分成/ 离散/ 的/ FS/ 单元/ ,/ 与/ 功能/ 组件/ 绑定/ 在/ 一起/ ./ 每个/ FS/ 和/ 与其/ 绑定/ 在/ 一起/ 的/ 组件/ 运行/ 在/ 一个/ 线程/ 之上/ ./ 通过/ 这种/ 方式/ ,/ 一方面/ 可以/ 方便/ 地/ 实现/ 并行/ 粒度/ 调节/ ;/ 另一方面/ 为/ 组件/ 开发/ 提供/ 了/ 良好/ 的/ 模块化/ 基础/ ./ 图/ 4/ 通信/ 结构/ 示意/ 3.2/ BDSim/ 通信/ 在/ BDSim/ 模拟/ 框架/ 中/ ,/ 拓扑/ 关系/ 由/ 组件/ 端口/ 的/ 互连/ 确定/ ,/ 消息/ 的/ 收发/ 由/ FS/ 处理/ ./ 类似/ TCP/ // IP/ 协议/ ,/ 组件/ 间/ 的/ 通信/ 划分/ 成/ 3/ 层/ 结构/ ,/ 层/ 与/ 层/ 之间/ 消息/ 的/ 传递/ 是/ 透明/ 的/ ,/ 每/ 一层/ 负责/ 完成/ 自己/ 所在/ 层/ 的/ 任务/ ,/ 消息/ 依次/ 按照/ 层次/ 之间/ 的/ 协议/ 分别/ 进行/ 处理/ ./ 通信协议/ 栈如图/ 3/ 所示/ ,/ 组件/ 间/ 同步/ 和/ 通信/ 功能/ 在/ BDSim/ 层中/ 实现/ ,/ 用于/ 维护/ 各/ 并行/ 单元/ 之间/ 的/ 同步/ 关系/ 及/ 消息传递/ 和/ 处理/ ./ 组件/ 之间/ 进行/ 通信/ 时/ ,/ 发送/ 方将/ 消息/ 打包/ ,/ 利用/ 模拟/ 框架/ 提供/ 的/ 通信接口/ 将/ 消息/ 送往/ 发送/ 方/ 组件/ 所在/ 的/ FS/ ./ FS/ 收到/ 消息/ 之后/ ,/ 根据/ 源/ 端口/ 通过/ 查找/ 拓扑/ 表/ 找出/ 目的/ 端口/ ,/ 由/ 目的/ 端口号/ 获得/ 目的/ 端口/ 所在/ 组件/ 的/ 全局/ 编号/ ,/ 根据/ 组件/ 的/ 全局/ 编号/ ,/ 进而/ 可以/ 得到/ 组件/ 所在/ FS/ 的/ 全局/ 编号/ ,/ 将/ 消息/ 和/ 目的/ 端口号/ 打包/ 之后/ ,/ 发/ 往/ 通信/ 层/ ;/ 通信/ 层/ 根据/ FS/ 的/ 编号/ 将/ 消息/ 发/ 往/ 目的/ FS/ ./ 最后/ ,/ 目的/ FS/ 根据/ 目的/ 端口号/ 判断/ 出/ 消息/ 的/ 目的/ 组件/ ,/ 将/ 消息/ 发/ 往/ 目的/ 组件/ 端口/ ./ 在/ BDSim/ 中/ ,/ 每个/ FS/ 拥有/ 一个/ 输入/ 队列/ ,/ 一个/ 输出/ 队列/ ./ FS/ 提供/ Port/ _/ out/ 接口/ 给/ 组件/ ,/ 组件/ 可以/ 使用/ 此/ 接口/ 将/ 发出/ 消息/ 传至/ FS/ 的/ 输出/ 队列/ ./ 组件/ 需要/ 提供/ Port/ _/ in/ 接口/ 给/ FS/ ,/ FS/ 可以/ 通过/ 此/ 接口/ 将/ 消息/ 发给/ 相应/ 的/ 目的/ 组件/ ,/ 如图/ 4/ ./ 通过/ 这种/ 消息/ 处理/ 方式/ ,/ 可以/ 实现/ 不同/ 组件/ 之间/ 的/ 消息传递/ ./ Page6/ 在/ 并行/ 环境/ 中/ ,/ 消息/ 是/ 线程/ // 进程/ 间/ 数据/ 和/ 控制/ 信号/ 传递/ 的/ 基本/ 方式/ ./ 消息/ 的/ 传递/ 和/ 处理/ 会/ 占用/ 很多/ 资源/ ,/ 执行/ 过程/ 中/ 大量/ 的/ 消息传递/ 会/ 严重/ 影响/ 模拟/ 速度/ ./ 在/ BDSim/ 中/ ,/ 组件/ 间/ 的/ 通信/ 是/ 靠/ 消息/ 的/ 传递/ 来/ 完成/ ,/ 通信/ 开销/ 有时/ 会/ 占/ 到/ 系统/ 运行/ 时/ 资源/ 占用/ 的/ 一半左右/ ,/ 所以/ 通信/ 效率/ 的/ 高低/ 对于/ 模拟/ 框架/ 的/ 性能/ 有着/ 非常/ 大/ 的/ 影响/ ./ 例如/ ,/ 一个/ Core/ 组件/ 和/ Memory/ 组件/ 通过/ 三级/ 总线/ 互连/ ,/ 两者之间/ 的/ 通信/ 消息/ 包/ 需要/ 经过/ 4/ 跳/ 才能/ 到达/ 目标/ 组件/ ./ 理想/ 情况/ 下/ ,/ 4/ 跳/ 至少/ 需要/ 4/ 个/ Cycle/ 的/ 延迟/ ./ 通常/ 情况/ 下/ ,/ 由于/ 路由/ 阻塞/ 等/ 原因/ ,/ 一个/ 消息/ 包所/ 消耗/ 的/ 时间/ 往往/ 大于/ 4/ 跳/ ./ 而/ 消息传递/ 的/ 长/ 延迟/ 会/ 严重/ 影响/ 模拟器/ 的/ 性能/ ,/ 所以/ ,/ 优化/ 通信/ 和/ 降低/ 消息/ 数量/ 对/ 模拟/ 框架/ 的/ 性能/ 也/ 具有/ 重要/ 的/ 意义/ ./ 3.2/ ./ 1/ 非/ 阻塞/ 无锁/ 消息/ 通信/ 消息传递/ 方式/ 分为/ 两类/ :/ 阻塞/ 和/ 非/ 阻塞/ ./ 阻塞/ 算法/ 允许/ 缓慢/ 或/ 延迟/ 的/ 处理单元/ 阻止/ 更快/ 的/ 处理单元/ 完成/ 操作/ ,/ 从而/ 无限期/ 地/ 共享/ 数据结构/ ./ 对于/ 非/ 阻塞/ 算法/ ,/ 如果/ 有/ 一个/ 或者/ 多个/ 处理单元/ 将要/ 操作/ 共享/ 数据结构/ ,/ 可以/ 保证/ 操作/ 在/ 有限/ 的/ 时间/ 或者/ 步骤/ 内/ 完成/ ./ 在/ 同步/ 的/ 多处理器/ 系统/ 中/ ,/ 当/ 处理单元/ 被/ 阻塞/ 在/ 不/ 合适/ 的/ 地方/ ,/ 将会/ 严重/ 影响/ 系统/ 性能/ ./ 因此/ ,/ BDSim/ 采用/ 非/ 阻塞/ 消息传递/ 方式/ ./ 另一方面/ ,/ BDSim/ 采用/ 共享/ 存储/ 通信/ 方式/ ,/ 消息/ 以/ 先进先出/ 队列/ 的/ 形式/ 被/ 存储/ 和/ 访问/ ./ 对/ 共享/ 队列/ 进行/ 并行/ 访问/ 时/ ,/ 需/ 加锁/ 以/ 保证/ 访问/ 的/ 正确性/ ./ 对于/ 共享/ 先进先出/ 队列/ 的/ 锁/ 避免/ 算法/ 已经/ 有/ 了/ 非常/ 多/ 的/ 研究/ ./ Hwang/ 和/ Briggs/ [/ 30/ ]/ 提出/ 了/ 一种/ 基于/ Compare/ _/ and/ _/ swap/ 指令/ 的/ 锁/ 避免/ 算法/ ./ 在/ 这些/ 算法/ 中/ 通常/ 忽略/ 了/ 空/ 队列/ 的/ 处理/ 、/ 队列/ 中/ 只有/ 一个/ 元素/ 时/ 的/ 情况/ ,/ 以及/ 当/ 插入/ 队列/ 与/ 删除/ 队列/ 同时/ 发生/ 时/ 的/ 情况/ ./ Lamport/ [/ 31/ ]/ 指出/ 利用/ 单读/ 单写/ 队列/ 可以/ 实现/ 无锁/ 算法/ ./ 3.2/ ./ 2BDSim/ 通信/ 算法/ BDSim/ 模拟/ 框架/ 中/ 组件/ 间/ 的/ 通信/ 主要/ 是/ 由/ FS/ 代理/ 完成/ ,/ FS/ 内部/ 串行/ 执行/ ,/ FS/ 之间/ 并行执行/ ./ BDSim/ 模拟/ 框架/ 中/ FS/ 的/ 个数/ 相对/ 较/ 少/ ,/ 所以/ 可以/ 在/ 每/ 一个/ FS/ 中/ ,/ 为/ 每/ 对/ 通信/ 的/ FS/ 建立/ 一个/ 缓冲/ 队列/ ,/ FS/ 之间/ 的/ 通信/ 对于/ 共享/ 缓冲/ 队列/ 的/ 操作/ 则/ 转变/ 为/ 单读/ 单写/ 队列/ ./ 根据/ Lamport/ 理论/ [/ 31/ ]/ ,/ 可以/ 实现/ 非/ 阻塞/ 无锁/ 的/ 操作/ ./ 由于/ 与/ 每个/ FS/ 相连/ 的/ 其他/ FS/ 的/ 个数/ 不/ 确定/ ,/ 为了/ 减少/ 通信/ 中/ 发送/ 端/ 查找/ 通信/ 队列/ 的/ 开销/ ,/ 根据/ FS/ 的/ 个数/ 为/ 每/ 一个/ FS/ 建立/ 对应/ 数目/ 的/ 通信/ 队列/ ,/ 发送/ 端/ 在/ 发送/ 消息/ 时/ ,/ 只/ 需/ 根据/ 自身/ FS/ 的/ 编号/ ,/ 将/ 消息/ 插入/ 到/ 与/ 此/ 编号/ 对应/ 的/ 通信/ 队列/ 的/ 末尾/ 即可/ ./ 但是/ ,/ 模拟/ 框架/ 针对/ 的/ 是/ 大规模/ 众核/ 系统/ 的/ 模拟/ ,/ 当/ 模拟/ 目标/ 规模/ 达到/ 一定/ 的/ 程度/ ,/ FS/ 及/ FS/ 之间/ 的/ 通信/ 连接/ 数量/ 急剧/ 增加/ ,/ 会/ 造成/ 空间/ 的/ 浪费/ ./ 为了/ 减少/ 冗余/ 队列/ 的/ 开销/ ,/ 提高/ 通信/ 队列/ 的/ 空间/ 利用率/ ,/ FS/ 中/ 的/ 通信/ 队列/ 采用/ 动态/ 生成/ 机制/ ,/ 即/ FSi/ 与/ FSj/ 首次/ 通信/ 时/ 动态/ 建立/ 两者之间/ 的/ 通信/ 队列/ Qij/ ./ 因为/ 不同/ 负载/ 和/ 拓扑/ 结构/ 下/ ,/ 通信/ 数量/ 会/ 有/ 变化/ ,/ 所以/ ,/ 当前/ BDSim/ 对/ 通信/ 队列/ 长度/ 不/ 做/ 限制/ ./ 且/ 消息/ 的/ 传递/ 只是/ 事件/ 消息/ 内容/ 指针/ 和/ 路由/ 信息/ 的/ 传递/ ,/ 并/ 不/ 传输/ 真正/ 的/ 内容/ ,/ 这/ 在/ 一定/ 程度/ 上/ 减轻/ 了/ 存储空间/ 的/ 开销/ ./ 通信/ 队列/ 内存/ 开销/ 实验/ 及/ 分析/ 结果/ 见/ 第/ 5/ 节/ 性能/ 评估/ 举例/ ./ 当/ 插入/ 一个/ 节点/ 时/ ,/ 按/ 节点/ 携带/ 时间/ 戳/ 大小/ 搜索/ 队列/ ,/ 选择/ 插入/ 点/ 并/ 执行/ 插入/ 操作/ ,/ tail/ 指针/ 更新/ 指向/ 队尾/ 节点/ ./ 当/ 删除/ 一个/ 节点/ 时/ ,/ 将/ head/ 指针/ 所指/ 的/ 下/ 一个/ 节点/ 返回/ ,/ 然后/ head/ 指针/ 后移/ 即可/ ./ 将/ head/ 和/ tail/ 指针/ 指向/ 空/ 节点/ ,/ 且/ tail/ 指针/ 并/ 不/ 设置/ 为/ 最后/ 一个/ 节点/ ,/ 这种/ 方法/ 可以/ 将/ 对/ head/ 和/ tail/ 指针/ 的/ 修改/ 分别/ 限制/ 在/ Dequeue/ 和/ Enqueue/ 操作/ 中/ ./ 具体/ 的/ 队列/ 数据结构/ 及/ 算法/ 操作步骤/ 如/ 算法/ 1/ ./ 算法/ 1/ ./ 单读/ 单写/ 消息/ 队列/ 插入/ // 删除/ 算法/ ./ 队列/ 插入/ 操作/ :/ 输入/ :/ 待/ 插入/ 消息/ 节点/ 输出/ :/ 插入/ 成功/ 队列/ 步骤/ :/ (/ 1/ )/ 搜索/ FS/ 中/ 与/ 此/ 连接/ 端口/ 相对/ 应/ 的/ 消息/ 队列/ ;/ (/ 2/ )/ 创建/ 节点/ ,/ 将/ 待/ 插入/ 消息/ 内容/ 赋值/ 给/ 新/ 节点/ ;/ (/ 3/ )/ 按/ 时间/ 戳/ 大小/ ,/ 搜索/ 队列/ 中待/ 插入/ 点/ ,/ 将/ 节点/ 队列/ 删除/ 操作/ :/ 输入/ :/ 待/ 删除/ 队列/ 输出/ :/ 删除/ 成功/ 队列/ 步骤/ :/ (/ 1/ )/ 若队/ 头/ 指针/ 不/ 等于/ 队尾/ 指针/ ,/ 返回/ 队头/ 指针/ 指/ (/ 2/ )/ 否则/ ,/ 返回/ NULL/ ;/ 对于/ 将/ 消息/ 节点/ 插入/ 队列/ 的/ 操作/ ,/ 为/ 队列/ 遍历/ 操作/ ,/ 算法/ 时间/ 复杂度/ 为/ O/ (/ n/ )/ ./ 对于/ 删除/ 队列/ 消息/ 节点/ 的/ 操作/ ,/ 为/ 一次/ 判断/ 及/ 指针/ 赋值/ 操作/ ,/ 算法/ 时间/ 复杂度/ 为/ O/ (/ 1/ )/ ./ 3.2/ ./ 3BDSim/ 通信/ 扩展/ (/ 1/ )/ 直接/ 通信/ BDSim/ 在/ 提供/ 消息/ 通信/ 的/ 同时/ ,/ 也/ 提供/ 了/ 直接/ 通信/ 方式/ —/ —/ —/ Callback/ 函数/ (/ 回调/ 函数/ )/ ./ 组件/ 可以/ Page7/ 直接/ 调用/ 其他/ 组件/ 在/ 框架/ 中/ 注册/ 的/ 回调/ 函数/ 来/ 实现/ 信息/ 传递/ ./ 直接/ 通信/ 方式/ 可以/ 对/ 并/ 不/ 关心/ 的/ 功能模块/ 实现/ 加速/ ,/ 提高/ 模拟/ 效率/ ,/ 也/ 为/ 紧/ 耦合/ 的/ 组件/ 实现/ 提供/ 了/ 灵活/ 的/ 外部/ 调用/ 接口/ ,/ 方便使用/ ./ 同时/ 也/ 可以/ 作为/ 辅助/ 调试/ 接口/ ,/ 加速/ 模拟器/ 的/ 调试/ ./ (/ 2/ )/ 进程/ 通信/ 并行/ 模拟/ 是/ 利用/ 多核/ 平台/ 提高/ 模拟器/ 速度/ 的/ 有效/ 手段/ ,/ 随着/ 模拟/ 的/ 处理器/ 核数/ 的/ 增加/ ,/ 利用/ 多/ 进程/ 、/ 多机/ 模拟/ 是/ 提高/ 模拟/ 速度/ 的/ 有效/ 方法/ ./ BDSim/ 在/ 向/ 多/ 进程/ 、/ 多机/ 方向/ 扩展/ 时/ ,/ 主要/ 解决/ 的/ 问题/ 是/ 保证/ 组件/ 间/ 的/ 消息/ 能够/ 正确/ 传递/ 至/ 目的/ 地址/ ./ 为了/ 实现/ 多/ 进程/ 、/ 多机/ 之间/ 的/ 消息传递/ ,/ 在/ BDSim/ 模拟/ 框架/ 中/ 增加/ 单独/ 的/ 消息/ 处理单元/ —/ —/ —/ CP/ (/ CommunicationProcess/ )/ ,/ 专门/ 处理/ 进程/ 间/ 消息/ 收发/ ./ 扩展/ 通信/ 结构/ 如图/ 5/ 所示/ ./ 处于/ 同一/ 进程/ 中/ 的/ FS/ 利用/ 共享内存/ 的/ 方式/ 进行/ 通信/ ,/ 不同/ 进程/ 间/ 的/ FS/ 利用/ 消息传递/ 的/ 方式/ 进行/ 通信/ ./ CP/ 作为/ 逻辑/ 处理单元/ 与/ 其他/ 模拟/ 模块/ 一样/ 参与/ 调度/ ,/ 执行/ 到/ CP/ 模块/ 时/ ,/ 将/ 本/ 进程/ 需要/ 发送/ 的/ 消息/ 统一/ 发送/ 出去/ ,/ 同时/ 将/ 发往/ 本/ 进程/ 的/ 消息/ 统一/ 接收/ 回来/ ./ 对于/ 本/ 进程/ 内部/ 线程/ 间/ 的/ 通信/ ,/ 只是/ 完成/ 消息/ 指针/ 的/ 传递/ ,/ 不同/ 进程/ 间/ 的/ 通信/ 才/ 需要/ 消息/ 的/ 拷贝/ ./ 3.3/ BDSim/ 同步/ 在/ 并行/ 模拟/ 中/ ,/ 同步/ 策略/ 是/ 模拟/ 速度/ 的/ 主要/ 制约/ 因素/ ./ 不同/ 的/ 同步/ 策略/ 会/ 带来/ 模拟/ 性能/ 上/ 的/ 巨大/ 差异/ ./ 同步/ 问题/ 的/ 本质/ 是/ 在/ 不同/ 逻辑/ 单元/ 之间/ 高效/ 地/ 维护/ 实体/ 间/ 的/ 因果关系/ ,/ 根据/ 是否/ 严格/ 按/ 时间/ 戳/ 顺序/ 来/ 处理事件/ 可以/ 把/ PDES/ 同步/ 分为/ 两种/ :/ 保守/ 同步/ 和/ 乐观/ 同步/ ./ 由于/ 乐观/ 同步/ 允许/ 事件/ 乱序执行/ ,/ 通过/ 回滚来/ 达到/ 正确性/ ,/ 系统/ 需要/ 提供/ 保存/ 和/ 恢复/ 机制/ ,/ 这/ 带来/ 整个/ 系统/ 的/ 计算资源/ 和/ 网络资源/ 的/ 巨大/ 开销/ ./ 因此/ ,/ BDSim/ 采用/ 保守/ 同步/ 算法/ ,/ 并/ 在/ 此基础/ 上/ 提出/ 了/ NMTRT/ -/ CMB/ (/ 基于/ CMB/ 的/ 空/ 消息/ 时间/ 戳/ 请求/ 标志/ 位/ )/ 同步/ 算法/ ./ 此/ 算法/ 通过/ 减少/ 同步/ 过程/ 中空/ 消息/ 的/ 数量/ ,/ 提高/ 同步/ 速度/ ,/ 进而/ 提高/ 模拟/ 框架/ 的/ 整体/ 执行/ 效率/ ./ 3.3/ ./ 1/ 传统/ 保守/ 同步/ 算法/ 的/ 不足/ 传统/ 保守/ 算法/ 基本/ 思想/ 为/ 逻辑/ 处理/ (/ LP/ )/ 单元/ 之间/ 的/ 消息/ 按非/ 递减/ 的/ 顺序/ 发送/ ,/ 消息/ 接收者/ 为/ 每/ 一个/ 连接/ 维护/ 一个/ 队列/ 来/ 保存/ 收到/ 的/ 消息/ ./ 每个/ 队列/ 都/ 有/ 一个/ 时间/ 戳/ ,/ 为/ 队列/ 中/ 时间/ 戳/ 最小/ 的/ 消息/ 的/ 时间/ 戳/ ,/ 通过/ 最小/ 时间/ 戳/ 的/ 不断/ 增长/ ,/ 整个/ 系统/ 得以/ 向前/ 推进/ ./ 但是/ 传统/ 同步/ 算法/ 在/ 大规模/ 并行/ 模拟系统/ 中/ 存在/ 着/ 同步/ 开销/ 大/ 的/ 缺点/ ./ 例如/ ,/ CMB/ 算法/ 是/ 经典/ 的/ 保守/ 同步/ 算法/ ,/ 在/ CMB/ 算法/ 中/ ,/ 当/ 3/ 个/ LP/ 之间/ 有/ 消息/ 同步/ 时/ ,/ 可能/ 会因/ 互相/ 等待/ 对方/ 消息/ 而/ 发生/ 死锁/ 现象/ ./ 在/ 死锁/ 处理/ 方面/ ,/ CMB/ 算法/ 是/ 通过/ 发送/ 空/ 消息/ 的/ 方法/ 解决/ ./ 当/ LPi/ 向/ LPj/ 发送/ 消息/ 时/ ,/ 需要/ 同时/ 向/ 其他/ 相连/ LP/ 发送/ 同样/ 时间/ 戳/ 的/ 空/ 消息/ ./ 空/ 消息/ 不/ 携带/ 有用/ 信息/ ,/ 只/ 包含/ 时间/ 戳/ ./ 时间/ 戳/ 给出/ 了/ 本/ LP/ 以后/ 发出/ 的/ 消息/ 的/ 时间/ 戳/ 的/ 最小值/ ,/ 在/ 收到/ 一个/ 空/ 消息/ 之后/ ,/ 接收端/ 可以/ 将/ 与/ 连接/ 上/ 的/ 时间/ 戳/ 更新/ 至/ 这个/ 时刻/ ,/ 从而/ 使得/ 该/ LP/ 可以/ 重新/ 选择/ 时间/ 戳/ 最小/ 的/ 队列/ ,/ 避免/ 死锁/ 的/ 发生/ ./ CMB/ 算法/ 是/ 通过/ 空/ 消息/ 来/ 达到/ 时间/ 推进/ 的/ 目的/ ,/ 但是/ 当/ 系统/ 中/ 存在/ 众多/ 组件/ 的/ 时候/ ,/ 每/ 一个/ 组件/ 中/ 的/ 所有/ 端口/ 通道/ 都/ 维护/ 一个/ 接收/ 队列/ ,/ 那么/ 接收/ 队列/ 将会/ 非常/ 多/ ,/ 相应/ 的/ 空/ 消息/ 数量/ 会变/ 的/ 非常/ 巨大/ ,/ 这会/ 消耗/ 大量/ 的/ 系统资源/ ,/ 严重/ 影响/ 模拟/ 的/ 速度/ ./ 3.3/ ./ 2NMTRT/ -/ CMB/ 同步/ 算法/ 在/ BDSim/ 模拟/ 框架/ 中/ ,/ 对于/ 处在/ 同一个/ FS/ 中/ 的/ 组件/ ,/ 可以/ 近似/ 认为/ 它们/ 的/ 局部/ 时钟/ 一致/ ,/ 组件/ 时钟/ 以/ FS/ 时钟/ 为准/ ./ 将/ FS/ 及/ FS/ 上/ 的/ 组件/ 作为/ 一个/ 整体/ 看作/ 一个/ 逻辑/ 处理单元/ ,/ 只/ 需为/ 与其/ 相连/ 的/ FS/ 维护/ 队列/ 保存/ 接收/ 到/ 的/ 消息/ 即可/ ./ 基于/ 此/ ,/ 本文/ 提出/ 了/ NMTRT/ -/ CMB/ 同步/ 算法/ ./ 在/ BDSim/ 模拟/ 框架/ 中/ ,/ 处于/ 同一个/ FS/ 中/ 的/ 组件/ 由于/ 处理/ 消息/ 的/ 能力/ 不同/ ,/ 所/ 产生/ 的/ 延迟/ 也/ 会/ 不同/ ./ 因此/ ,/ 在/ NMTRT/ -/ CMB/ 算法/ 中/ ,/ 为了/ 实现/ 消息/ 按非/ 递减/ 的/ 顺序/ 发送/ ,/ FS/ 中需/ 维护/ 一个/ 发送/ 队列/ ,/ 消息/ 按/ 发送/ 时间/ 在/ 发送/ 队列/ 中/ 有序/ 排列/ ./ FS/ 在/ 发送/ 消息/ 时/ ,/ 如果/ 消息/ 的/ 时间/ 戳/ 小于/ 等于/ FS/ 的/ 局部/ 时钟/ 则/ 将/ 此/ 消息/ 发送/ 出去/ ,/ 如图/ 6/ 所示/ ./ FS/ 从/ 维护/ 的/ 通信/ 队列/ 中/ 选取/ 时间/ 戳/ 最小/ 的/ 队列/ ,/ 如果/ 队/ 列为/ 空/ ,/ 则/ 向/ 与/ 此/ 相连/ 的/ 所有/ FS/ 发送/ 空/ 消息/ 且/ 将/ 时钟/ 请求/ 标志/ 位置/ 位/ ./ 对于/ 收到/ 的/ 空/ 消息/ ,/ 如果/ 时钟/ 请求/ 标志/ 位/ 被/ 置位/ ,/ 则/ 向/ 与/ 此/ 相连/ 的/ 所有/ 其他/ FS/ 发送/ 空/ 消息/ ;/ 如果/ 时钟/ 请求/ 标志/ 位/ 没有/ 被/ 置位/ ,/ 则/ FS/ 只是/ 更/ Page8/ 新/ 对应/ 的/ 接收/ 队列/ 时钟/ ,/ 释放/ 空/ 消息/ ./ NMTRT/ -/ CMB/ 算法/ 步骤/ 为/ :/ (/ 1/ )/ 找出/ 所有/ 队列/ 中/ 时钟/ 值/ 最小/ 的/ 队列/ ;/ (/ 2/ )/ 如果/ 该/ 队列/ 中有/ 消息/ ,/ 如果/ 是/ 普通/ 消息/ 则/ 取出/ 处理/ 转步/ (/ 1/ )/ ,/ 如果/ 是/ 空/ 消息/ 且/ 时钟/ 请求/ 标志/ 位置/ 位/ ,/ 则/ 向/ 与/ 此/ 相连/ 的/ FS/ 发送/ 空/ 消息/ ,/ 如果/ 时钟/ 请求/ 标志/ 位/ 没有/ 置位/ ,/ 那么/ 只/ 更新/ 队列/ 时间/ 戳/ ,/ 转步/ (/ 1/ )/ ;/ (/ 3/ )/ 如果/ 该/ 队列/ 中/ 没有/ 消息/ ,/ 则/ 阻塞/ 等待/ 直到/ 这个/ 连接/ 上/ 有/ 一个/ 新/ 的/ 消息/ 来临/ ,/ 同时/ 向/ 与/ 此/ 队列/ 连接/ 的/ FS/ 发送/ 时钟/ 请求/ 消息/ ;/ (/ 4/ )/ 新/ 的/ 消息/ 将/ 该/ 队列/ 的/ 时间/ 戳/ 更新/ ,/ 转步/ (/ 1/ )/ ./ 对于/ 算法/ 复杂度/ ,/ 假设/ 某个/ FS/ 上/ 存在/ n/ 个/ 通信/ 队列/ ,/ 每个/ 通信/ 队列/ 平均/ 有/ m/ 个/ 消息/ 节点/ ./ 在/ NMTRT/ -/ CMB/ 算法/ 中/ ,/ 存在/ 一次/ 队列/ 遍历/ ,/ 时间/ 复杂度/ 为/ O/ (/ n/ )/ ;/ 对于/ 时间/ 戳/ 最小/ 队列/ ,/ 存在/ 一次/ 判断/ 操作/ ,/ 时间/ 复杂度/ 为/ O/ (/ 1/ )/ ./ 所以/ NMTRT/ -/ CMB/ 算法/ 的/ 时间/ 复杂度/ 为/ O/ (/ n/ )/ ./ 相比/ CMB/ 算法/ ,/ NMTRT/ -/ CMB/ 算法/ 中空/ 消息/ 数量/ 明显/ 下降/ ,/ 性能/ 得到/ 了/ 明显/ 的/ 提高/ ./ 后续/ 实验/ 表明/ ,/ 优化/ 后/ 带来/ 的/ 模拟/ 精度/ 损耗/ 非常/ 小/ ,/ 可/ 忽略/ ./ 3.4/ 高可配/ BDSim/ 模拟/ 框架/ 是/ 基于/ 组件/ 思想/ 开发/ 的/ ,/ 这/ 使得/ 高可配/ 成为/ 可能/ ./ 然而/ ,/ 虽然/ 高可配/ 能够/ 带来/ 模拟/ 模型/ 构建/ 的/ 灵活性/ ,/ 但是/ 也/ 带来/ 了/ 沉重/ 的/ 配置/ 负担/ ./ 使用者/ 需要/ 按照/ 拓扑/ 结构/ 实现/ 所有/ 模块/ 的/ 通信/ 连接/ ./ 当/ 模拟/ 组件/ 达到/ 上千/ 规模/ 时/ ,/ 配置/ 操作/ 变成/ 了/ 几乎/ 不可/ 完成/ 的/ 任务/ ./ 为了/ 减轻/ 使用者/ 的/ 配置/ 负担/ ,/ BDSim/ 提供/ 了/ 两种/ 不同/ 的/ 配置/ 方法/ :/ 文件/ 配置/ 和/ 图形化/ 配置/ ./ 3.4/ ./ 1/ 文件/ 配置文件/ 配置/ 意味着/ 用/ 文件/ 的/ 方式/ 描述/ 拓扑/ 结构/ ,/ 配置/ 内容/ 包括/ :/ 目标/ 模型/ 有/ 几种/ 组件/ ,/ 每种/ 组件/ 的/ 个数/ ,/ 每个/ 组件/ 端口/ 和/ 其他/ 端口/ 互连/ 信息/ 等/ ./ 以/ Router/ 组件/ 为例/ ,/ 首先/ 声明/ Router/ 组件/ 对象/ ,/ 定义/ 初始化/ 函数/ ,/ 定义/ Callback/ 函数/ 等/ ./ 然后/ 描述/ 组件/ 的/ 端口/ 属性/ ,/ 支持/ 2D/ -/ Mesh/ 结构/ 的/ 路由器/ 需要/ 5/ 个/ 端口/ :/ 4/ 个/ 方向/ 端口/ 和/ 1/ 个/ 与/ Core/ 组件/ 连接/ 的/ 端口/ ./ 之后/ 是/ 调试/ 命令/ 注册/ ,/ 将/ 组件/ 支持/ 的/ 用户/ 命令/ 注册/ 至/ 框架/ 中/ ,/ 运行/ 时/ 通过/ 框架/ 来/ 识别/ 和/ 执行/ ./ 最后/ 是/ 初始化/ 一些/ 参数/ ,/ 如/ 路由/ 的/ 坐标/ 信息/ 等/ ,/ 配置/ 格式/ 如图/ 7/ ./ 在/ 实现/ 单个/ 组件/ 配置/ 后/ 是/ 对/ 整个/ 拓扑/ 结构/ 的/ 配置/ ./ 图/ 8/ (/ a/ )/ 、/ (/ b/ )/ 分别/ 是/ 相关/ 两个/ 配置文件/ :/ Topology/ 和/ Parameter/ ./ Topology/ 文件/ 描述/ 了/ 整个/ 模拟/ 目标/ 系统/ 的/ 拓扑/ 结构/ ,/ 以/ 端口/ 之间/ 的/ 连接/ 方式/ 描述/ ./ Parameter/ 文件/ 记录/ 着/ 组件/ 的/ 初始化/ 参数/ ,/ 示例/ 中/ 主要/ 描述/ 每个/ Router/ 的/ 坐标/ ./ Page93/ ./ 4.2/ 图形化/ 配置文件/ 配置/ 需要/ 使用/ 文件/ 描述语言/ 编写/ 配置文件/ ,/ 繁琐/ 且/ 容易/ 出错/ ./ 为此/ ,/ BDSim/ 提供/ 给/ 使用者/ 更为/ 便捷/ 的/ 配置/ 方式/ —/ —/ —/ 图形化/ 配置/ ./ 组件/ 库中/ 已有/ 的/ 组件/ 和/ 新/ 添加/ 的/ 组件/ 会/ 以图/ 标的/ 方式/ 展示/ 给/ 用户/ ,/ 同时/ 提供/ 组件/ 的/ 各个/ 属性/ 信息/ 供/ 使用者/ 查看/ ./ 使用者/ 只/ 需要/ 将/ 需要/ 的/ 组件/ 拖拽/ 至/ 工作/ 区/ ,/ 然后/ 将/ 需要/ 互连/ 的/ 端口/ 通过/ 引线/ 连通/ 即可/ 完成/ 模拟系统/ 的/ 配置/ ,/ 方便快捷/ ./ 3.4/ ./ 3/ 配置/ 流程/ BDSim/ 配置/ 流程/ 如图/ 9/ 所示/ ./ 首次/ 配置/ 时/ ,/ 在/ 拓扑/ 结构/ 和/ 组件/ 种类/ 及/ 数量/ 确定/ 之后/ ,/ 通过/ 图形化/ 操作界面/ 或/ 编写/ 文件/ 描述符/ 的/ 方法/ 生成/ 目标/ 系统/ 的/ 配置文件/ ./ 框架/ 对/ 配置文件/ 进行/ 解析/ ,/ 生成/ 二进制/ 配置/ 数据库/ ./ 在/ 之后/ 的/ 运行/ 中/ ,/ 可以/ 直接/ 使用/ 此/ 配置/ 数据库/ ,/ 无需/ 再次/ 解析/ 生成/ ./ 如若/ 修改/ 已/ 生成/ 二进制/ 配置文件/ ,/ 则/ 选择/ 启动/ 后/ 重新配置/ ./ 整个/ 配置/ 数据库/ 以/ 树形/ 结构/ 存储/ ,/ 如图/ 10/ 所示/ ,/ 先/ 根据/ 配置/ 形成/ 相应/ 数量/ 的/ FS/ ,/ FS/ 是/ 并行/ 的/ 最小/ 单元/ ./ 然后/ 将/ 每个/ 功能/ 组件/ 挂载/ 到/ 相应/ FS/ 之上/ ,/ 一个/ FS/ 可以/ 挂载/ 多个/ 功能/ 组件/ ,/ 同一个/ FS/ 之上/ 的/ 功能/ 组件/ 之间/ 串行/ 执行/ ./ 最后/ 是/ 端口配置/ ./ 配置/ 完成/ 后/ ,/ 相当于/ 完成/ 了/ 拓扑/ 结构/ 的/ 初始化/ ./ 使用/ 树形/ 结构/ ,/ 可以/ 快速/ 定位/ 模块/ 的/ 位置/ ,/ 实现/ 不同/ 组件/ 之间/ 的/ 通信/ ./ 通过/ 这种/ 配置/ 方式/ ,/ 使用者/ 可以/ 按照/ 自己/ 的/ 需求/ ,/ 任意/ 配置/ 并行/ 模拟/ 的/ 粒度/ ,/ 方便快捷/ 地/ 构建/ 目标/ 模型/ ./ 4/ 实验/ 及/ 分析/ 本/ 部分/ 首先/ 介绍/ 实验/ 环境/ 及/ 实验/ 模型/ ,/ 之后/ 对/ BDSim/ 框架/ 中/ 的/ 非/ 阻塞/ 无锁/ 通信/ 和/ NMTRT/ -/ CMB/ 同步/ 算法/ 进行/ 测试/ 和/ 分析/ ,/ 最后/ 测试/ 和/ 分析/ BDSim/ 框架/ 的/ 并行/ 模拟/ 性能/ ./ 4.1/ 实验/ 环境/ 实验/ 基于/ Intel/ 多核/ 处理器/ 平台/ ,/ 实验/ 环境/ 及/ 参数/ 配置/ 如表/ 1/ 所示/ ./ 操作系统/ 编译器/ CPUL1CacheL2CacheLLC4/ ./ 2/ 实验/ 模型/ 本/ 实验/ 选择/ 基于/ 4/ ×/ 4/ 的/ Mesh/ 片上/ 网络结构/ 的/ 众核/ 结构/ 作为/ 模拟/ 模型/ ,/ 配置/ VCore/ 、/ Memory/ 、/ Router/ 三种/ 组件/ ./ 通过/ 并发模拟/ VCore/ 、/ Memory/ 之间/ 的/ 数据传输/ ,/ 控制/ 网络/ 消息/ 流量/ 大小/ ,/ 可以/ 达到/ 充分/ 测试/ 的/ 目的/ ./ VCore/ 为/ 虚拟/ 核/ 组件/ ,/ 使用/ Trace/ 生成/ 访存/ 消息/ ./ Router/ 为片/ 上路/ 由/ 组件/ ,/ 根据/ X/ -/ Y/ 静态/ 路由/ 算法/ 向/ 相邻/ 的/ 4/ 个/ 方向/ 传递/ 消息/ ./ 考虑/ 到/ Router/ 可能/ 会/ 有/ 消息/ 发/ 往/ 自己/ (/ 连接/ VCore/ 的/ 情况/ )/ ,/ 所以/ 为/ Router/ 保留/ 了/ 发往/ 自己/ 的/ 端口/ ./ 每个/ Router/ 组件/ 有/ 10/ 个/ 端口/ ,/ 端口/ 的/ 编号/ 顺序/ 为/ 上/ 、/ 下/ 、/ 右/ 、/ 左/ ,/ 最后/ 是/ 连接/ VCore/ 的/ 端口/ ./ 图/ 11/ 为/ 由/ 16/ 个/ Router/ 组件/ 组成/ 的/ 4/ ×/ 42D/ -/ Mesh/ 网络拓扑/ 结构图/ ./ Page10Router/ 的/ 拓扑/ 位置/ 以/ 坐标/ 的/ 形式/ 标记/ ,/ 坐标轴/ 以/ 左上角/ 为/ 原点/ ,/ 横坐标/ 方向/ 水平/ 向/ 右/ 递增/ ,/ 纵坐标/ 方向/ 垂直/ 向下/ 递增/ ./ 消息/ 由/ VCore/ 根据/ Trace/ 生成/ 并/ 发送至/ Mesh/ 网络/ 中/ ,/ 通过/ 控制/ Cycle/ 内/ 注入/ 消息/ 数量/ 来/ 控制/ 网络流量/ ./ 测试程序/ 如表/ 2/ 所示/ ./ 12packets/ // cycle/ 和/ 110packets/ // cycle/ 是/ 根据/ 测试程序/ 发送/ 包/ 的/ 总数/ 以及/ 测试/ 程序运行/ 后/ 的/ 总/ Cycle/ 数/ 计算/ 得到/ ,/ 分别/ 代表/ 不同/ 程度/ 的/ 流量/ 大小/ ./ 测试程序/ Router/ _/ SmallRouter/ _/ Big4/ ./ 3/ 实验/ 结果/ 及/ 分析/ 4.3/ ./ 1/ 非/ 阻塞/ 无锁/ 通信/ 性能/ 测试/ 非/ 阻塞/ 无锁/ 队列/ 与/ 阻塞/ 有锁/ 队列/ 相比/ ,/ 对于/ 共享/ 队列/ 的/ 访问/ 不/ 需要/ 加锁/ ./ 因而/ ,/ 共享/ 队列/ 的/ 访问/ 竞争/ 越/ 激烈/ ,/ 非/ 阻塞/ 无锁/ 队列/ 的/ 优势/ 会越/ 明显/ ./ 利用/ 通信量/ 比较/ 小/ 的/ 测试用例/ Router/ _/ Small/ 分别/ 测试/ 阻塞/ 有锁/ 和/ 非/ 阻塞/ 无锁/ 两种/ 情况/ 下/ 所用/ 时间/ ,/ 测试/ 结果/ 如表/ 3/ 所示/ ./ 当/ 线程/ 数/ 比较/ 少且/ 通信量/ 较/ 小时/ ,/ 对/ 共享/ 队列/ 的/ 访问/ 竞争/ 程度/ 相对/ 较/ 小/ ,/ 非/ 阻塞/ 无锁/ 与/ 阻塞/ 有锁/ 两种/ 实现/ 方式/ 所用/ 的/ 时间/ 相差/ 不大/ ./ 当/ 线程/ 数/ 比较/ 多时/ ,/ 对于/ 同一个/ FS/ 中/ 的/ 共享/ 队列/ 的/ 访问/ 竞争/ 程度/ 变/ 大/ ,/ 在/ 阻塞/ 有锁/ 的/ 情况/ 下/ ,/ 线程/ 阻塞/ 等待/ 的/ 时间/ 将会/ 变大/ ./ 非/ 阻塞/ 无锁/ 通信/ 相对/ 于/ 阻塞/ 有锁/ 通信/ 效率/ 提高/ 的/ 比例/ 如图/ 12/ 所示/ ./ 当/ 线程/ 数为/ 16/ 时/ ,/ 效率/ 的/ 提高/ 约/ 为/ 7.5/ %/ ./ 利用/ 通信量/ 比较/ 大/ 的/ 测试用例/ Router/ _/ big/ 分别/ 测试/ 阻塞/ 有锁/ 和/ 非/ 阻塞/ 无锁/ 两种/ 情况/ 下/ 测试用例/ 所用/ 时间/ ,/ 结果/ 如表/ 4/ 所示/ ./ 线程/ 数越/ 多/ 共享/ 队列/ 的/ 竞争/ 越大/ ,/ 所以/ ,/ 随着/ 线程/ 数/ 的/ 增加/ ,/ 非/ 阻塞/ 无/ 锁相/ 对于/ 阻塞/ 有锁/ 的/ 效率/ 的/ 提高/ 会/ 越来越/ 明显/ ./ 图/ 13/ 展示/ 了/ 在/ Router/ _/ Big/ 测试用例/ 下/ ,/ 非/ 阻塞/ 无锁/ 通信/ 相对/ 于/ 阻塞/ 有锁/ 通信/ 的/ 效率/ 的/ 提高/ 比/ ./ 当/ 线程/ 数为/ 16/ 时/ ,/ 效率/ 提高/ 10/ %/ 左右/ ./ 图/ 12Router/ _/ Small/ 测试程序/ 下非/ 阻塞/ 无锁/ 队列/ 图/ 13Router/ _/ Big/ 测试程序/ 下非/ 阻塞/ 无锁/ 队列/ 线程/ 数目/ 阻塞/ 有锁/ 124816/ 线程/ 数目/ 阻塞/ 有锁/ 124816Page114/ ./ 3.2/ NMTRT/ -/ CMB/ 算法/ 性能/ 测试/ 实验/ 以/ 4/ 线程/ 为例/ ,/ 测试/ 在/ NMTRT/ -/ CMB/ 算法/ 下/ ,/ 空/ 消息/ 的/ 发送量/ 的/ 减少/ 比/ 以及/ 性能/ 损耗/ ./ 如表/ 5/ 所示/ ,/ 随着/ 每个/ FS/ 绑定/ 组件/ 数/ 的/ 增加/ ,/ 在/ 优化/ 前/ 需要/ 同步/ 的/ 逻辑/ 处理单元/ 的/ 数目/ 随之/ 增加/ ,/ 因而/ 用于/ 同步/ 的/ 空/ 消息/ 的/ 数量/ 也/ 不断/ 增加/ ./ 优化/ 后/ ,/ 随着/ 组件/ 数/ 的/ 增加/ ,/ 空/ 消息/ 的/ 发送量/ 明显/ 地/ 减少/ ,/ 变化趋势/ 如图/ 14/ 所示/ ./ 表/ 5CMB/ 与/ NMTRT/ -/ CMB/ 算法/ 空/ 消息/ 数量/ 对比/ 组件/ 数/ 124/ 衡量/ 并行/ 效果/ 的/ 另/ 一个/ 重要/ 标准/ 是/ 精度/ 损耗/ ./ NMTRT/ -/ CMB/ 算法/ 将/ 处在/ 同一个/ FS/ 中/ 的/ 组件/ 近似/ 认为/ 它们/ 的/ 局部/ 时钟/ 一致/ ,/ 势必会/ 对/ 精度/ 产生/ 一定/ 的/ 影响/ ./ 本/ 实验/ 对/ 精度/ 损耗/ 也/ 做/ 了/ 充分/ 地/ 评估/ ,/ 分别/ 利用/ 通信量/ 比较/ 小/ 和/ 通信量/ 比较/ 大时/ 的/ 测试用例/ 测试/ 优化/ 后/ 相对/ 于/ 传统/ CMB/ 算法/ 的/ 精度/ 损耗/ ./ 实验/ 表明/ ,/ 在/ 两种/ 测试用例/ 情况/ 下/ 精度/ 的/ 损耗/ 都/ 是/ 非常/ 小/ 的/ ./ 结果/ 如表/ 6/ 和/ 图/ 15/ 所示/ ./ 即便/ 是/ 损耗/ 比较/ 大/ 的/ Router/ _/ Small/ 测试用例/ ,/ 精度/ 的/ 损耗/ 最大/ 也/ 只有/ 0.7/ %/ 左右/ ./ 线程/ 数较/ 少时/ ,/ 逻辑/ 处理单元/ 的/ 时钟/ 推进/ 可以/ 依靠/ 收到/ 的/ 普通/ 消息/ ,/ 此时/ 最后/ 程序运行/ 的/ cycle/ 数/ 跟/ 逻辑/ 处理单元/ 的/ 延迟/ 有/ 一定/ 的/ 关系/ ./ 而/ 线程/ 数较/ 多时/ 逻辑/ 处理单元/ 时钟/ 的/ 推进/ 会/ 依靠/ 收到/ 的/ 空/ 消息/ ,/ 测试/ 程序运行/ 的/ cycle/ 数/ 跟/ 同步/ 用到/ 的/ Lookhead/ 和/ 逻辑/ 处理单元/ 的/ 延迟/ 都/ 有/ 一定/ 的/ 关系/ ,/ 在/ Router/ 测试用例/ 中/ Lookhead/ 比/ 逻辑/ 处理单元/ 的/ 延迟/ 要/ 小/ ,/ 所以/ 线程/ 数多/ 时/ 精度/ 损耗/ 反而/ 较/ 小/ ./ 表/ 6/ 不同/ 线程/ 下/ NMTRT/ -/ CMB/ 算法/ 精度/ 损耗/ 线程/ 数/ 164.4/ 模拟/ 性能/ 测试/ 和/ 分析/ 模拟器/ 的/ 减速比/ 是/ 评价/ 模拟/ 性能/ 的/ 重要/ 指标/ ,/ 它/ 是/ 同一/ 工作/ 负载/ 在/ 模拟器/ 中/ 执行/ 时间/ 与/ 真实/ 系统/ 中/ 执行/ 时间/ 的/ 比值/ ,/ 能够/ 较/ 好/ 地/ 反映/ 模拟/ 行为/ 的/ 开销/ ,/ 该值/ 越/ 小/ 说明/ 模拟器/ 性能/ 越高/ ./ 实验/ 搭建/ 了/ 基于/ 32/ ×/ 32Mesh/ 片上/ 网络结构/ 的/ 1024/ 核/ 的/ 众核/ 模型/ 目标/ 系统/ ./ 该/ 模拟系统/ 包括/ 4/ 种/ 时钟/ 精确/ 模拟/ 组件/ :/ Core/ 、/ Memory/ 、/ Router/ 及/ Cache/ ./ Core/ 组件/ 是/ 基于/ ARMv6/ 指令集/ 的/ ARM11/ ①/ 处理器/ 为/ 原型/ ,/ 支持/ 8/ 级/ 流水/ 、/ 乱序执行/ 、/ 分支/ 预测/ 等/ 功能/ ./ Memory/ 组件/ 支持/ 程序/ 加载/ ,/ 多种/ 宽度/ 数据/ 读取/ ,/ 虚实/ 地址/ 转换/ 等/ 功能/ ./ Cache/ 组件/ 支持/ 多级/ cache/ 配置/ ,/ 支持/ 映射/ 方式/ 、/ 替换算法/ 、/ 行/ 大小/ 等/ 参数/ 配置/ ./ Router/ 组件/ 采用/ 虚/ 通道/ 和/ 虫/ 洞/ 路由/ 交换/ 技术/ ,/ 支持/ 关键/ 数据包/ 大小/ 、/ 延迟/ 、/ 链路/ 宽度/ 可配/ 及/ 性能/ 统计/ 输出/ 等/ 功能/ ./ 功耗/ 、/ 时延/ 、/ 面积/ 等/ 工艺/ 参数/ 采用/ 基于/ Godson/ -/ T/ 众核/ 处理器/ [/ 32/ ]/ 的/ 配置/ ./ 实验/ 选取/ 了/ 搜索引擎/ (/ pin/ _/ search560/ )/ 、/ 字符/ 统计/ (/ wholeWC/ )/ 、/ 大/ 数据/ 排序/ (/ wholeTS/ )/ 三个/ 典型/ 的/ 大/ 数据/ 应用程序/ 作为/ 基准/ 测试程序/ ./ 模拟/ 目标/ 系统/ 在/ 单线程/ 配置/ 下/ 的/ 测试/ 结果/ 如表/ 7/ 所示/ ./ 测试程序/ pin/ _/ search560/ 搜索引擎/ 程序/ wholeWCwholeTS/ 由表/ 7/ 可/ 计算/ 出/ ,/ BDSim/ 模拟/ 框架/ 在/ 单线程/ 下/ 平均/ 模拟/ 速度/ 为/ 722.82/ KIPS/ ./ ARM11/ 系列/ 处理器/ 频率/ 在/ 350MHz/ 到/ 1GHz/ 之间/ ,/ 本文/ 取/ 800MHz/ 为/ 计算/ 标准/ ./ 流水线/ 采用/ 单/ 发射/ ,/ 因此/ IPC/ 理论/ 最大/ ①/ http/ :/ // // www/ ./ arm/ ./ com/ // zh/ // products/ // processors/ // classic/ // Page12/ 值为/ 1/ ./ 计算/ 可/ 得/ ,/ BDSim/ 模拟/ 减速比/ 低于/ 1107/ ./ 目前/ 常用/ 的/ 模拟器/ GEM5/ [/ 11/ ]/ 、/ MARSS/ [/ 12/ ]/ 时钟/ 精确/ 级/ 模拟/ 速度/ 在/ 200KIPS/ 左右/ (/ X86/ 指令集/ )/ ,/ 且/ X86/ 处理器/ ①/ 频率/ 通常/ 在/ 2GHz/ 左右/ ,/ 所以/ 模拟/ 减速比/ 远大于/ 1107/ ./ 并行/ 模拟器/ Graphite/ [/ 14/ ]/ 在/ 千核/ 单线程/ 配置/ 下/ 的/ 模拟/ 减速比/ 为/ 1751/ (/ X86/ 指令集/ ,/ SPLASH/ 测试程序/ )/ ,/ 也/ 远大于/ BDSim/ 模拟/ 减速比/ ./ 本/ 实验/ 中/ ,/ 千核/ 模拟/ 目标/ 系统/ 包括/ 1024/ 个/ Core/ ,/ 1024/ 个/ Cache/ ,/ 1024/ 个/ Router/ 构成/ 的/ 32/ ×/ 32Mesh/ 片上/ 网络/ 以及/ 4/ 个/ Memory/ ./ 整个/ 系统/ 规模/ 非常/ 庞大/ ,/ 其/ 在/ 多线程/ 下/ 的/ 模拟/ 加速/ 比如/ 图/ 16/ 所示/ ,/ 当千核/ 系统/ 运行/ 在/ 8/ 线程/ 时有/ 超过/ 2/ 倍/ 的/ 加速/ 比/ ./ 图/ 17/ 所示/ 为/ 各/ 模块/ 在/ 整个/ 运行/ 过程/ 中所/ 占/ 运行/ 时间/ 百分比/ ./ 从图/ 中/ 可以/ 看出/ Memory/ 组件/ 和/ Mesh/ 组件/ 所/ 占/ 时间/ 之/ 和/ 超过/ 了/ 整体/ 运行/ 时间/ 的/ 一半/ ,/ 这/ 是因为/ Router/ 组件/ 之间/ 以及/ Router/ 和/ Memory/ 之间/ 高度/ 耦合/ ,/ 它们/ 需要/ 对千核/ 发出/ 的/ 访存/ 和/ 通信/ 事件/ 进行/ 处理/ ,/ 降低/ 了/ 模拟系统/ 的/ 可/ 并行度/ ./ 框架/ (/ Framework/ )/ 只/ 占/ 整个/ 系统/ 10/ %/ 左右/ 的/ 开销/ ./ 这/ 说明/ ,/ 通过/ 优化/ Memory/ 和/ Mesh/ 组件/ ,/ 提高/ 组件/ 的/ 并行性/ ,/ 整个/ 模拟系统/ 会/ 取得/ 更/ 明显/ 的/ 加速/ 比/ ./ 图/ 17/ 千核/ 模拟系统/ 各/ 组件/ 运行/ 时间/ 比/ (/ 8/ 线程/ )/ 5/ 大/ 数据/ 性能/ 评估/ 举例/ 随着/ 大/ 数据/ 的/ 兴起/ ,/ “/ 存储/ 墙/ ”/ 的/ 问题/ 越来越/ 严重/ ,/ 对于/ 如何/ 提高/ 访存/ 带宽/ ,/ 实时处理/ 高通量/ 的/ 数据/ 成为/ 学术界/ 和/ 工业界/ 研究/ 的/ 热点/ ./ 本/ 实验/ 目的/ 是/ 评估/ 访存/ 请求/ 收集/ 表/ (/ MemoryAccessCollectingTable/ ,/ MACT/ )/ 在/ 大/ 数据/ 应用/ 体系结构/ 中/ 对/ 访存/ 的/ 性能/ 影响/ ,/ 举例说明/ BDSim/ 模拟/ 框架/ 如何/ 在/ 大/ 数据处理/ 模拟/ 方面/ 发挥作用/ ./ MACT/ 通过/ 结合/ 消息/ 式/ 内存/ 机制/ ,/ 收集/ 离散/ 的/ 访存/ 请求/ 并/ 进行/ 批量/ 处理/ ./ 提高/ 了/ 访存/ 带宽/ 的/ 有效/ 利用率/ ,/ 同时/ 也/ 提高/ 了/ 执行/ 效率/ ./ 并/ 通过/ 时间/ 窗口/ 机制/ ,/ 确保/ 访存/ 请求/ 在/ 最晚/ 期限/ 之前/ 发送/ 出去/ ,/ 保证/ 任务/ 的/ 实时性/ ./ 如图/ 18/ 所示/ ,/ MACT/ 结构/ 内置/ 两个/ 表/ Rmact/ 和/ Wmact/ ,/ 分别/ 用于/ 读/ // 写/ 记录/ ./ 表是/ 一个/ 队列/ ,/ 由/ 一个/ 数组/ 和/ 头尾/ 指针/ 构成/ ./ 队列/ 每一项/ 包含/ 标志/ 读/ // 写/ 记录/ 的/ Bitmap/ 、/ 需要/ 结算/ 的/ 时间/ Deadline/ 以及/ 该项/ 的/ 基址/ Baseaddr/ ./ 其中/ Bitmap/ 中共/ 有/ 1024/ 位/ ,/ 每/ 一位/ 代表/ 了/ 一个/ 字节/ 地址/ 的/ 读/ // 写/ 情况/ ./ 当/ 接收/ 到/ 一条/ 访存/ 请求/ 时/ ,/ MACT/ 行为/ 如下/ :/ (/ 1/ )/ 读数据/ ./ 清除/ Rmact/ 中/ 相关/ 表项/ ,/ 并/ 将/ 表中/ Bitmap/ 为/ 1/ 的/ 地址/ 的/ 数据/ 发送给/ 总线/ ;/ (/ 2/ )/ 写/ 数据/ ./ 直接/ 返回/ ACK/ ;/ (/ 3/ )/ 读/ // 写/ 地址/ ./ 将/ 该/ 地址/ 插入/ 到/ Rmact/ // Wmact/ 中/ ,/ 如果/ 现有/ 表项/ 中/ 存在/ 该/ 地址/ 的/ 基址/ 记录/ ,/ 则/ 在/ 此/ 表项/ 的/ Bitmap/ 中将/ 对应/ Bit/ 位置/ 1/ 并/ 记录/ 消息/ 内容/ ,/ 如/ 有/ 重复/ 置/ 1/ 的/ 情况/ 则/ 同样/ 需要/ 记录/ 多个/ 消息/ 内容/ ,/ 最后/ 返回/ ACK/ ./ 如/ 表项/ 中/ 不/ 存在/ 该/ 地址/ 的/ 基址/ 记录/ ,/ 且表/ 已满/ ,/ 则/ 向/ 总线/ 发送/ NACK/ 消息/ ,/ 若/ 不满/ 则/ 增加/ 一项/ 基址/ 与/ 该/ 地址/ 基址/ 一致/ 的/ 一项/ ,/ 用/ 当前/ 周期/ 加上/ 固定/ 延时/ (/ 实验/ 中/ 设置/ 为/ 16cycles/ )/ 作为/ 此新项/ 的/ Deadline/ ,/ 并/ 发送/ ACK/ 消息/ ./ ①/ http/ :/ // // ark/ ./ intel/ ./ com/ // Page135/ ./ 1/ 组件/ 模拟/ 模型/ 包括/ :/ XBAR/ 、/ VCore/ 、/ MCU/ 三类/ 组件/ ,/ 如图/ 19/ ./ XBAR/ 即为/ Crossbar/ 总线/ ,/ 本例/ 中/ 使用/ XBAR/ 组件/ 搭建/ 三级/ 总线/ ./ VCore/ 代表/ 虚拟/ 核/ ,/ 因本/ 实验/ 主要/ 研究/ 访存/ 性能/ ,/ 所以/ 无需/ 模拟/ 完整/ 的/ 核图/ 19/ 多级/ 总线/ 拓扑/ 结构/ 5.2/ 拓扑/ 结构/ 本例/ 中/ ,/ 以/ 128/ 核/ 的/ 众核/ 结构/ 作为/ 实验/ 对象/ ,/ 目标/ 模型/ 如图/ 19/ 所示/ ./ 每/ 8/ 个/ 核/ 连接/ 到/ 一个/ 三级/ 总线/ ,/ 形成/ CoreGroup/ ./ 每个/ 二级/ 总线/ 挂载/ 4/ 个/ 三级/ 总线/ ,/ 4/ 个/ 二级/ 总线/ 连接/ 到/ 一级/ 总线/ ,/ 形成/ 128/ 核/ 的/ 多级/ 总线/ 互连/ 结构/ ./ 4/ 个/ MCU/ 分别/ 挂载/ 到/ 4/ 个二内/ 结构/ ,/ 可以/ 降低/ 模拟/ 的/ 复杂度/ ./ VCore/ 组件/ 需要/ 实例/ 化/ 两类/ :/ 带/ MACT/ 结构/ 的/ 和/ 不带/ MACT/ 结构/ 的/ ./ MCU/ 为/ 存储/ 控制/ 单元/ ./ 实验/ Benchmarks/ 为/ 大/ 数据测试/ 程序/ 的/ 访存/ Trace/ ,/ 虚拟/ 核/ 解析/ Trace/ 并/ 在/ 一定/ 的/ 时序/ 控制/ 下/ 发出/ 相应/ 的/ 访存/ 事件/ ./ 级/ 总线/ 之上/ ./ 5.3/ 测试环境/ 及/ 结果/ 分析/ 具体/ 测试环境/ 如表/ 1/ 所示/ ./ 实验/ 从/ 整体/ 执行/ 时间/ 、/ 单/ 消息/ 平均/ 延迟/ 、/ 访存/ 带宽/ 比/ 、/ 访存/ 请求/ 个数/ 4/ 个/ 维度/ 比较/ 了/ 大/ 数据/ 应用程序/ 在/ 传统/ 结构/ 和/ 包含/ MACT/ 结构/ 的/ 模拟/ 目标/ 系统/ 上/ 的/ 执行/ 效率/ ./ 本次/ 实/ Page14/ 验以/ 搜索引擎/ 程序/ (/ pin/ _/ search560/ )/ 、/ 字符/ 统计/ 程序/ (/ wholeWC/ )/ 及大/ 数据/ 排序程序/ (/ wholeTS/ )/ 3/ 个/ 大/ 数据/ 应用/ 生成/ 的/ 访存/ Trace/ 作为/ 基准/ 测试程序/ ./ Trace/ 大小/ 分别/ 为/ 280MB/ 、/ 1.3/ GB/ 以及/ 1.9/ GB/ ./ 实验/ 统计数据/ 如表/ 8/ ~/ 表/ 10/ 及图/ 20/ 所示/ ./ pin/ _/ search5601916290816/ ./ 589992660.3456968546624557/ wholeWC7087732318/ ./ 645202550.41129548629151523/ wholeTS50296552117/ ./ 252168390.07740316138931121/ pin/ _/ search560834359529/ ./ 049421880.4915484274101281/ wholeWC3013482051/ ./ 273534510.62042895918696515/ wholeTS49410478568/ ./ 154647030.06060114629943316/ pin/ _/ search560wholeWCwholeTSaverage/ 图/ 20MACT/ 结构/ 相对/ 于/ 传统/ 结构/ 性能/ 对比/ 统计/ 实验/ 结果表明/ :/ 通过/ MACT/ 对/ 访存/ 请求/ 的/ 收集/ 和/ 批量/ 处理/ ,/ 访存/ 数量/ 减少/ 约/ 49/ %/ ,/ 访存/ 带宽/ 提高/ 约/ 24/ %/ ,/ 平均/ 执行/ 速度/ 提高/ 约/ 89/ %/ ./ 详细分析/ 如下/ :/ (/ 1/ )/ 应用程序/ 整体/ 执行/ 时间/ 下降/ ./ 增加/ MACT/ 硬件/ 机制/ 后/ ,/ pin/ _/ search560/ 、/ wholeWC/ 、/ wholeTS/ 三个/ 应用程序/ 分别/ 获得/ 了/ 2.30/ 、/ 2.35/ 、/ 1.02/ 倍/ 的/ 加速/ 比/ ./ 加速/ 比/ 的/ 来源/ 主要/ 有/ 两个/ 方面/ :/ ①/ 传统/ 内存/ 控制器/ 带宽/ 利用率/ 较/ 低/ ,/ 通过/ MACT/ 对/ 访存/ 请求/ 的/ 收集/ 可以/ 有效/ 提高/ 带宽/ 的/ 利用率/ ,/ 提高/ 执行/ 效率/ ;/ ②/ 通过/ 收集/ 和/ 批量/ 处理/ ,/ 减少/ 了/ 发往/ 网络/ 中/ 的/ 访存/ 消息/ 包/ 数量/ ,/ 降低/ 了/ 网络/ 拥塞/ 度/ ./ 其中/ ,/ wholeTS/ 应用程序/ 的/ 加速/ 效果/ 不/ 明显/ ,/ 加速/ 比/ 只有/ 1.02/ 左右/ ./ 主要/ 原因/ 是/ 其/ 访存/ 操作/ 不够/ 密集/ ,/ 吞吐量/ 较/ 低/ ,/ 导致/ MACT/ 对/ 访存/ 请求/ 的/ 收集/ 效果/ 不/ 明显/ ,/ 从而/ 对/ 执行/ 时间/ 的/ 影响/ 也/ 非常/ 有限/ ;/ (/ 2/ )/ 消息/ 从/ 访存/ 部件/ 到/ 内存/ 控制器/ 的/ 平均/ 延迟/ 上升/ ./ 由于/ 核/ 发出/ 的/ 访存/ 消息/ 统一/ 在/ MACT/ 中/ 收集/ 并/ 等待/ 一定/ Cycles/ 才/ 被/ 发送至/ 片上/ 网络/ ,/ 所以/ 延迟/ 会/ 相应/ 增大/ ./ 但是/ 由于/ 处理器/ 在/ 发出/ 访存/ 请求/ 时/ 设置/ 访存裕度/ 值/ ,/ 并且/ MACT/ 中/ 采用/ 时间/ 窗口/ 机制/ ,/ 所以/ 仍能/ 保证/ 访存/ 请求/ 质量/ ;/ (/ 3/ )/ 访存/ 带宽/ 比/ 提高/ ./ 对于/ pin/ _/ search560/ 和/ WordCount/ 应用/ 来说/ ,/ 有效/ 带宽/ 都/ 有/ 不同/ 程度/ 的/ 提高/ ,/ 分别/ 为/ 1.42/ 和/ 1.51/ 倍/ ./ 但/ 对于/ wholeTS/ 应用程序/ 来说/ ,/ 虽然/ 执行/ 时间/ 和/ 访存/ 请求/ 消息/ 包/ 数目/ 都/ 有所/ 降低/ ,/ 但是/ 它们/ 之间/ 的/ 比值/ ,/ 即/ 访存/ 带宽/ 比/ (/ 个/ // Cycle/ )/ 反而/ 降低/ 了/ 22/ %/ ./ 这/ 主要/ 是因为/ wholeTS/ 应用程序/ 访存/ 密度/ 低/ ,/ 访存/ 压力/ 小所/ 造成/ ;/ (/ 4/ )/ 访存/ 请求/ 数量/ 降低/ ./ 使用/ MACT/ 硬件/ 机制/ 后/ ,/ pin/ _/ search560/ 、/ wholeWC/ 、/ wholeTS/ 三个/ 应用程序/ 分别/ 获得/ 了/ 1.62/ 、/ 1.56/ 、/ 1.30/ 倍/ 的/ 访存/ 数量/ 减少/ 比/ ./ 这/ 是因为/ 很大/ 一部分/ 的/ 离散/ 访存/ 请求/ 被/ 收集/ 和/ 批量/ 处理/ ,/ 所以/ 在/ 数据通路/ 上/ 看到/ 的/ 效果/ 是/ 访存/ 请求/ 消息/ 包/ 数量/ 有/ 了/ 明显/ 的/ 降低/ ./ 可见/ ,/ MACT/ 结构/ 可以/ 通过/ 对/ 访存/ 事件/ 的/ 收集/ 和/ 批量/ 处理/ ,/ 有效/ 减少/ 网络/ 拥塞/ ,/ 增加/ 带宽/ 利用率/ ,/ 缩短/ 执行/ 时间/ ,/ 相对/ 于/ 传统/ 结构/ 具有/ 更强/ 的/ 性能/ ./ 关于/ 运行/ 过程/ 中/ 存储空间/ 的/ 消耗/ ,/ 图/ 21/ 展示/ 了/ 运行/ 时/ 消息/ 队列/ 长度/ 统计/ 结果/ ./ 可知/ ,/ 最大/ 队列/ 长度/ 不会/ 超过/ 360/ ,/ 单/ 消息/ 大小/ 为/ 固定/ 32B/ ./ 在/ 图/ 19/ 的/ 配置/ 下/ ,/ 128/ 核/ 与/ 三级/ XBAR/ 互连/ ,/ 共/ 128/ 对/ 队列/ ./ 二/ 三级/ XBAR/ 互连/ 共/ 16/ 对/ 队列/ ,/ 一/ 二级/ XBAR/ 互连/ 共/ 4/ 对/ 队列/ ./ MCU/ 与/ XBAR/ 互连/ 共/ 4/ 对/ 队列/ ./ 整个/ 配置/ 共需/ 2/ ×/ (/ 128/ +/ 16/ +/ 4/ +/ 4/ )/ =/ 304/ 个/ 队列/ ./ 最大/ 所/ 需/ 内存/ 304/ ×/ 32B/ ×/ 360/ ≈/ 3.34/ MB/ 大小/ ./ 可知/ ,/ 即使/ 千核/ 量级/ 配置/ 下/ ,/ 当前/ 通用/ 处理器/ 也/ 完全/ 可以/ 承受/ ./ Page15/ 综上所述/ ,/ 实验/ 以/ 评估/ MACT/ 结构/ 在/ 大/ 数据处理/ 体系结构/ 中/ 的/ 作用/ 为例/ ,/ 验证/ 了/ BDSim/ 框架/ 的/ 有效性/ ./ 通过/ 实验/ 过程/ 和/ 结论/ 可以/ 看出/ ,/ BDSim/ 适用/ 于/ 构建/ 大规模/ 众核/ 体系结构/ 模拟/ 平台/ ,/ 能够/ 在/ 大/ 数据处理/ 研究/ 过程/ 中/ 发挥/ 重要/ 的/ 评估/ 作用/ ./ 6/ 结论/ 大规模/ 并行/ 模拟/ 已经/ 成为/ 大/ 数据/ 体系结构/ 研究/ 的/ 主要/ 方法/ ./ 但/ 目前/ 的/ 模拟/ 技术/ 却/ 不能/ 满足/ 大/ 数据/ 体系结构/ 研究/ 的/ 需求/ ,/ 主要/ 体现/ 在/ 模拟/ 速度慢/ 、/ 配置/ 过程/ 复杂/ 、/ 可扩展性/ 差/ 等/ 方面/ ./ 针对/ 此/ ,/ 本文/ 提出/ 了/ BDSim/ 并行/ 模拟/ 框架/ ,/ 支持/ 大规模/ 并发模拟/ ./ 该/ 并行/ 模拟/ 框架/ 具有/ 以下/ 优势/ :/ 首先/ ,/ 模拟/ 框架/ 基于/ 离散/ 组件/ 化/ 开发/ 模式/ ,/ 功能模块/ 以/ 组件/ 形式/ 加载/ 到/ 模拟/ 框架/ 中/ 运行/ ,/ 提高/ 了/ 模型/ 开发/ 的/ 自由性/ 及/ 组件/ 的/ 复用/ 性/ ./ 其次/ ,/ 使用/ 高效/ 的/ 非/ 阻塞/ 无锁/ 消息/ 通信/ 机制/ ,/ 加快/ 了/ 消息/ 处理速度/ ,/ 16/ 线程/ 配置/ 下/ ,/ 执行/ 效率/ 提高/ 约/ 10/ %/ 左右/ ./ 再次/ ,/ 提出/ 基于/ CMB/ 的/ NMTRT/ -/ CMB/ 同步/ 算法/ ,/ 4/ 线程/ 16/ 组件/ 配置/ 下/ ,/ 减少/ 控制/ 消息/ 数量/ 90/ %/ 以上/ ./ 实验/ 表明/ ,/ 模拟/ 框架/ 模拟/ 减速比/ 小于/ 1107/ ,/ 远/ 低于/ 常用/ 众核/ 模拟器/ ./ 在/ 3076/ 个/ 模拟/ 组件/ 规模/ 下/ ,/ 8/ 线程/ 运行/ 具有/ 2.3/ 倍/ 的/ 加速/ 比/ ./ 同时/ ,/ 为了/ 满足/ 不同/ 的/ 同步/ 需求/ ,/ 模拟/ 框架/ 也/ 支持/ 粗粒度/ 同步/ 方法/ ,/ 使用者/ 可以/ 随意/ 配置/ 同步/ 粒度/ 以/ 满足/ 对/ 模拟/ 速度/ 的/ 需求/ ./ 最后/ ,/ 模拟/ 框架/ 提供/ 了/ 灵活/ 方便/ 的/ 配置/ 方法/ ,/ 文件/ 或/ 图形化/ 配置/ 方法/ ,/ 提高/ 了/ 框架/ 的/ 易用性/ ./ 实验/ 分析/ 和/ 评估/ 举例/ 表明/ ,/ BDSim/ 并行/ 模拟/ 框架/ 以/ 其/ 灵活/ 方便/ 的/ 搭建/ 方式/ 和/ 快速/ 精确/ 的/ 执行/ 过程/ ,/ 符合/ 大规模/ 并行/ 系统/ 的/ 模拟/ 需求/ ,/ 适用/ 于/ 大/ 数据处理/ 体系结构/ 的/ 评估/ 和/ 研发/ ./ 7/ 未来/ 工作/ 为了/ 提高/ 模拟/ 框架/ 的/ 速度/ 、/ 精确度/ 和/ 易用性/ ,/ 未来/ 研究/ 工作/ 主要/ 集中/ 在/ 3/ 个/ 方面/ ./ 首先/ ,/ 提高/ 模拟/ 框架/ 的/ 模拟/ 速度/ ./ 模拟/ 速度/ 一直/ 是/ 困扰/ 软件/ 模拟/ 发展/ 的/ 难题/ ./ 针对/ 大规模/ 数据处理/ 体系结构/ 的/ 模拟/ ,/ 更/ 需要/ 速度/ 的/ 保证/ ./ 围绕/ 此/ 问题/ ,/ 加速/ 工作/ 主要/ 从/ 两个/ 方面/ 展开/ :/ 从/ 框架/ 角度/ ,/ 通过/ 进一步/ 优化/ 通信/ 和/ 同步/ 算法/ ,/ 提高/ 框架/ 的/ 执行/ 效率/ ;/ 从/ 组件/ 角度/ ,/ 通过/ 使用/ 动态/ 二进制/ 翻译/ 机制/ 、/ 指令/ TraceCache/ 以及/ 采样/ 等/ 技术/ 加速/ 组件/ 的/ 执行/ 速度/ ./ 其次/ ,/ 提高/ 模拟/ 框架/ 的/ 精确度/ ./ 模拟/ 精确度/ 越高/ 就/ 会/ 使/ 模拟/ 行为/ 和/ 结果/ 更/ 接近/ 于/ 真实/ 硬件/ ,/ 能够/ 更加/ 准确/ 地/ 指导/ 体系结构/ 的/ 研究/ ./ 目前/ ,/ BDSim/ 的/ 功耗/ 、/ 时延/ 、/ 面积/ 等/ 工艺/ 参数/ 采用/ 基于/ Godson/ -/ T/ 众核/ 处理器/ [/ 32/ ]/ 的/ 配置/ ./ 并且/ ,/ 以/ BDSim/ 模拟/ 框架/ 为/ 基础/ ,/ 千核级/ 处理器/ 的/ RTL/ (/ RegisterTransferLevel/ ,/ 寄存器/ 传输/ 级/ )/ 仿真/ 模型/ 的/ 搭建/ 工作/ 正在/ 开展/ ./ 之后/ ,/ 框架/ 中/ 的/ 功耗/ 、/ 时延/ 、/ 面积/ 等/ 工艺/ 参数信息/ 会/ 与/ RTL/ 模型/ 进行/ 对比/ 调试/ ,/ 逐步/ 调优/ BDSim/ 模拟/ 框架/ 的/ 精确度/ ./ 最后/ ,/ 开发/ 完善/ 的/ 组件/ 库/ ./ 组件/ 库使/ 已/ 存在/ 的/ 组件/ 被/ 无限/ 次/ 重复使用/ 成为/ 可能/ ./ 因此/ ,/ 需要/ 继续/ 开发/ 不同/ 功能/ 的/ 组件/ 或是/ 整合/ 现有/ 的/ 功能/ 准确/ 、/ 使用/ 度广/ 的/ 组件/ 添加/ 至/ 组件/ 库/ ,/ 降低/ 并行/ 模拟器/ 开发/ 的/ 复杂性/ ,/ 形成/ 一个/ 功能丰富/ 的/ 模拟/ 开发/ 平台/ ,/ 方便/ 研发/ 人员/ 快速/ 搭建/ 目标/ 模型/ ./ 

