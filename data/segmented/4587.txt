Page1BOD/ :/ 一种/ 高效/ 的/ 分布式/ 离群/ 点/ 检测/ 算法/ 王习/ 特申德荣/ 白梅/ 聂铁铮寇/ 月/ 于/ 戈/ (/ 东北大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110004/ )/ 摘要/ 离群/ 点/ 检测/ 是/ 数据管理/ 领域/ 中/ 的/ 热点问题/ 之一/ ,/ 在/ 许多/ 方面/ 都/ 有着/ 广泛应用/ ,/ 如/ 信用卡/ 诈骗/ 、/ 网络/ 入侵/ 检测/ 、/ 环境监测/ 等/ ./ 目前/ 现有/ 的/ 离群/ 点/ 检测/ 算法/ 大多/ 针对/ 集中式/ 的/ 处理/ 环境/ ./ 但/ 随着/ 数据/ 规模/ 的/ 不断/ 增长/ ,/ 传统/ 的/ 集中式/ 算法/ 处理/ 效率/ 受限/ ,/ 无法/ 满足用户/ 日益增长/ 的/ 需求/ ./ 针对/ 上述/ 问题/ ,/ 文中/ 提出/ 了/ 一种/ 新型/ 的/ 分布式/ 离群/ 点/ 检测/ 算法/ ./ 首先/ ,/ 在/ 数据/ 存储/ 阶段/ (/ 即/ 预处理/ )/ ,/ 提出/ 了/ BDSP/ (/ BalanceDrivenSpatialPartitioning/ )/ 数据/ 划分算法/ ./ 该/ 算法/ 可以/ 有效/ 地/ 均衡/ 每个/ 计算/ 节点/ 的/ 工作/ 负载/ ,/ 并/ 实现/ 良好/ 的/ 过滤/ 效果/ ./ 此外/ ,/ 为/ 划分/ 所/ 得到/ 的/ 每个/ 块/ 设计/ 了/ 一种/ 全新/ 的/ 编码方式/ ,/ 可以/ 快速/ 地/ 确定/ 块/ 与/ 块/ 之间/ 的/ 相邻/ 关系/ ,/ 降低/ 网络/ 开销/ ./ 基于/ BDSP/ 算法/ ,/ 提出/ 了/ BOD/ (/ BDSP/ -/ basedOutlierDetection/ )/ 分布式/ 离群/ 点/ 检测/ 算法/ ./ 该/ 算法/ 包括/ 2/ 个/ 步骤/ :/ 在/ 每个/ 计算/ 节点/ 本地/ ,/ 利用/ R/ 树/ 索引/ 进行/ 批量/ 过滤/ ,/ 快速/ 地/ 计算/ 离群/ 点/ 并/ 得到/ 本地/ 候选/ 集/ ;/ 利用/ BDSP/ 中/ 提供/ 的/ 块/ 编码/ 确定/ 需要/ 相互/ 通信/ 的/ 节点/ ,/ 使用/ 少量/ 的/ 网络/ 开销/ 得到/ 最终/ 结果/ ./ 最后/ ,/ 通过/ 大量/ 实验/ 验证/ 了/ 文中/ 所/ 提出/ 的/ BDSP/ 和/ BOD/ 算法/ 的/ 有效性/ ./ 实验/ 结果表明/ ,/ 相对/ 于/ 现有/ 算法/ ,/ 文中/ 算法/ 可以/ 显著/ 地/ 提高/ 计算/ 效率/ 并/ 大幅/ 降低/ 网络/ 开销/ ./ 关键词/ 离群/ 点/ 检测/ ;/ 分布式计算/ ;/ 大/ 数据/ ;/ 数据/ 划分/ ;/ 数据管理/ ;/ 大规模/ 数据/ 1/ 引言/ 离群/ 点/ 检测/ 是/ 数据管理/ 中/ 的/ 热点问题/ 之一/ [/ 1/ ]/ ,/ 在/ 许多/ 领域/ 都/ 有着/ 广泛/ 的/ 应用/ ,/ 如/ 信用卡/ 诈骗/ 、/ 网络/ 入侵/ 检测/ 等/ ./ 在/ 早期/ 文献/ [/ 2/ ]/ 中/ ,/ 离群/ 点/ 被/ 描述/ 为/ :/ 在/ 一个/ 数据/ 集中/ ,/ 若/ 某个/ 数据/ 点/ 与/ 其他/ 数据/ 点/ 的/ 差距/ 非常/ 大/ 以至于/ 被/ 怀疑/ 是/ 通过/ 其他/ 机制/ 生成/ 出来/ 的/ ,/ 那么/ 该/ 数据/ 点/ 就/ 被/ 认为/ 是/ 离群/ 点/ ./ 至今/ ,/ 研究者/ 们/ 已经/ 提出/ 了/ 多种不同/ 的/ 离群/ 点/ 定义/ 标准/ ./ 其中/ ,/ 本文/ 主要/ 研究/ 基于/ 距离/ 的/ 离群/ 点/ ,/ 该/ 定义/ 由/ Knorr/ 等/ 人/ [/ 3/ ]/ 于/ 1998/ 年/ 提出/ ,/ 是/ 一种/ 被/ 广泛/ 认可/ 的/ 离群/ 点/ 定义/ 标准/ ./ 具体/ 地/ ,/ 对于/ 给定/ 的/ 两个/ 参数/ k/ 和/ r/ ,/ 那么/ 基于/ 距离/ 的/ 离群/ 点/ 可以/ 被/ 定义/ 为/ :/ 对于/ 数据/ 集中/ 任意/ 数据/ 点/ p/ ,/ 若/ 与/ p/ 的/ 距离/ 不/ 大于/ r/ 的/ 点/ 的/ 数目/ 少于/ k/ 个/ ,/ 那么/ p/ 为/ 离群/ 点/ ./ 目前/ ,/ 学者/ 们/ 已经/ 提出/ 了/ 许多/ 优秀/ 的/ 离群/ 点/ 检测/ 算法/ ./ 但是/ 绝大多数/ 算法/ 都/ 是/ 针对/ 集中式/ 环境/ 设计/ 的/ ./ 面对/ 数据量/ 的/ 不断/ 增加/ ,/ 这些/ 集中式/ 算法/ 的/ 处理/ 效率/ 有限/ ,/ 在/ 很多/ 情况/ 下/ 不能/ 满足用户/ 的/ 需求/ ./ 例如/ 在/ 电子商务/ 中/ ,/ 将/ 用户/ 的/ 交易/ 信息/ 看作/ 整体/ 数据/ 集/ ,/ 那么/ 通过/ 检测/ 离群/ 点/ (/ 即/ 查找/ 那些/ 与/ 用户/ 日常/ 交易/ 习惯/ 不符/ 的/ 异常/ 交易/ 记录/ )/ ,/ 可以/ 帮助/ 发现/ 用户/ 账户/ 盗窃/ ,/ 进而/ 避免/ 财产损失/ ./ 但/ 目前/ 许多/ 大型/ 的/ 电子商务/ 网站/ ,/ 每天/ 都/ 会/ 产生/ 极其/ 大量/ 的/ 交易/ 记录/ ,/ 若/ 使用/ 集中式/ 算法/ 对/ 这些/ 数据/ 进行/ 离群/ 点/ 检测/ ,/ 可能/ 需要/ 花费/ 数/ 小时/ 的/ 时间/ ./ 计算结果/ 的/ 时效性/ 无法/ 得到/ 保证/ ,/ 也/ 就/ 无法/ 及时/ 地/ 避免/ 用户/ 财产损失/ ./ 在/ 这种/ 情况/ 下/ ,/ 设计/ 一种/ 高效/ 的/ 分布式/ 离群/ 点/ 检测/ 算法/ 变得/ 十分必要/ ./ 本文/ 主要/ 针对/ 基于/ 距离/ 的/ 离群/ 点/ ,/ 提出/ 一种/ 新型/ 的/ 分布式计算/ 方法/ ./ 目前/ 在/ 分布式/ 环境/ 中/ 离群/ 点/ 检测/ 的/ 相关/ 研究/ 主要/ 有/ 文献/ [/ 4/ -/ 6/ ]/ ./ 其中/ 文献/ [/ 5/ -/ 6/ ]/ 采用/ 了/ top/ -/ n/ 离群/ 点/ 的/ 定义/ ①/ ./ 这种/ 定义/ 的/ 不足之处/ 在于/ :/ 对于/ 每个/ 数据/ 点/ p/ ,/ 只/ 关心/ 与其/ 最近/ 邻/ 的/ k/ 个/ 数据/ 点/ ,/ 而/ 忽视/ 了/ 其他/ 与/ p/ 临近/ 的/ 数据/ 点/ 提供/ 的/ 信息/ ./ 此外/ ,/ 这种/ 定义/ 需要/ 大量/ 全局/ 信息/ 才/ 能够/ 计算/ 出/ 最终/ 结果/ ,/ 网络/ 开销/ 较大/ ,/ 不/ 适合/ 分布式/ 环境/ ./ 文献/ [/ 4/ ]/ 所/ 研究/ 的/ 问题/ 与/ 本文/ 相同/ ,/ 但/ 所/ 提出/ 的/ PENL/ 算法/ 没有/ 对/ 数据/ 进行/ 有效/ 地/ 划分/ ,/ 对于/ 数据/ 集中/ 任意/ 一个/ 数据/ 点/ p/ ,/ 在/ 最坏/ 情况/ 下/ ,/ 必须/ 与/ 其他/ 所有/ 数据/ 点/ 计算/ 距离/ ,/ 才能/ 得到/ 最终/ 结果/ ./ 因此/ 当/ 数据/ 规模/ 较大/ 时/ ,/ PENL/ 算法/ 需要/ 大量/ 的/ 网络/ 开销/ ,/ 也/ 无法/ 保证/ 良好/ 的/ 执行/ 效率/ ./ 1.1/ 难点/ 与/ 挑战/ 可以/ 看出/ ,/ 分布式/ 离群/ 点/ 检测/ 是/ 十分/ 有/ 意义/ 的/ ./ 但/ 由于/ 问题/ 的/ 固有/ 难度/ 较大/ ,/ 目前/ 并未/ 出现/ 较为/ 完善/ 的/ 计算方法/ ./ 本文/ 所/ 面临/ 的/ 主要/ 问题/ 总结/ 如下/ :/ (/ 1/ )/ 如何/ 进行/ 有效/ 地/ 数据/ 划分/ ./ 显然/ 地/ ,/ 给定/ 一/ ①/ 给定/ 参数/ k/ 、/ n/ ,/ 数据/ 点/ p/ 的/ 得/ 分为/ p/ 和/ 它/ 最近/ 邻/ 的/ k/ 个点/ Page3/ 个/ 数据/ 集/ P/ (/ 所/ 包含/ 的/ 数据/ 点/ 个数/ 为/ |/ P/ |/ )/ 和/ 一个/ 具有/ N/ 个/ 节点/ 的/ 集群/ ,/ 在/ 离群/ 点/ 检测/ 开始/ 之前/ ,/ 对/ 数据/ 进行/ 有效/ 地/ 划分/ (/ 即/ 预处理/ )/ ,/ 可以/ 显著/ 地/ 提高/ 计算/ 效率/ ./ 一般/ 地/ ,/ 良好/ 的/ 数据/ 划分/ 应/ 考虑/ 如下/ 2/ 个/ 方面/ :/ 首先/ ,/ 使/ 每个/ 节点/ 所/ 获得/ 的/ 数据量/ 大致/ 均匀/ ,/ 保证/ 较/ 好/ 的/ 并行性/ ;/ 另外/ ,/ 使/ 绝大部分/ 计算/ 可以/ 在/ 每个/ 节点/ 本地/ 进行/ ,/ 不/ 需要/ 进行/ 大量/ 的/ 通信/ ,/ 降低/ 网络/ 开销/ ./ 目前/ 常见/ 的/ 数据/ 划分/ 方式/ 主要/ 有/ 包括/ 2/ 类/ :/ 即/ 基于/ 数据量/ 的/ 划分/ 和/ 基于/ 空间/ 的/ 划分/ ./ 但/ 这/ 2/ 种/ 划分/ 方式/ 都/ 存在/ 明显/ 的/ 不足/ ,/ 无法/ 满足/ 上述/ 要求/ ./ 例/ 1/ 给出/ 了/ 详细/ 的/ 描述/ ./ 例/ 1/ ./ 给定/ 包含/ 4/ 个/ 节点/ n1/ 、/ n2/ 、/ n3/ 、/ n4/ 的/ 集群/ ,/ 和/ 一个/ 包含/ 40/ 个/ 2/ 维/ 数据/ 点/ 的/ 数据/ 集/ P/ ./ 若/ 将/ 各/ 数据/ 点/ 映射/ 到/ 一个二维/ 空间/ 内/ ,/ 其/ 具体/ 结果/ 如图/ 1/ 所示/ ./ 已知/ 一个/ 基于/ 距离/ 的/ 离群/ 点/ 查询/ ,/ 其中/ 半径/ r/ =/ 0.2/ ,/ 阈值/ k/ =/ 4/ ./ 为/ 快速/ 地/ 计算/ 数据/ 集/ P/ 的/ 离群/ 点/ ,/ 可/ 将/ P/ 划分/ 为/ 4/ 个/ 子集/ 并/ 分配/ 给/ 4/ 台/ 计算机/ 分布式/ 处理/ ./ 第/ 1/ 种/ 常见/ 的/ 划分/ 方式/ 为/ 基于/ 数据量/ 的/ 划分/ ./ 即/ 随机/ 地为/ 每个/ 节点/ 分配/ |/ P/ |/ // N/ 个/ 数据/ 点/ ,/ 以/ 保证/ 每个/ 节点/ 上/ 的/ 工作量/ 大致/ 均衡/ ./ 依据/ 这种/ 划分/ 策略/ ,/ 每个/ 节点/ 获得/ 40/ // 4/ =/ 10/ 个/ 数据/ 点/ ./ 具体/ 的/ 分配/ 结果/ 如图/ 1/ 所示/ (/ 每个/ 节点/ 上/ 的/ 数据/ 点以/ 同/ 一种/ 图案/ 进行/ 标识/ ,/ 如/ 节点/ n1/ 上/ 的/ 数据/ 点/ 标识/ 为/ 三角形/ 状/ )/ ./ 容易/ 发现/ ,/ 这种/ 分配/ 方式/ 忽略/ 了/ 数据/ 点/ 之间/ 的/ 空间/ 位置/ 关系/ ,/ 无法/ 进行/ 较/ 好/ 的/ 本地/ 过滤/ ,/ 造成/ 大量/ 网络/ 开销/ ./ 如/ 在/ 图/ 1/ 中/ ,/ 在/ 节点/ n1/ 上/ ,/ 当/ 进行/ 本地/ 局部/ 计算/ 时/ ,/ 发现/ 与/ p1/ 距离/ 不/ 大于/ r/ 的/ 数据/ 点/ 只有/ p2/ ,/ 因此/ p1/ 为/ n1/ 的/ 局部/ 离群/ 点/ ./ 但/ 此时/ 却/ 无法/ 很/ 好/ 地/ 判定/ p1/ 是否/ 为/ 数据/ 集/ P/ 中/ 的/ 离群/ 点/ (/ 即/ 最终/ 结果/ )/ ,/ 因为/ 在/ 其他/ 计算机/ 上/ ,/ 很/ 可能/ 存在/ 与/ p1/ 的/ 距离/ 不/ 大于/ r/ 的/ 数据/ 点/ (/ 如/ p3/ 、/ p4/ 等/ )/ ./ 这样/ ,/ 在/ 最坏/ 情况/ 下/ ,/ 节点/ n1/ 需要/ 与/ 所有/ 其他/ 节点/ 进行/ 通信/ ,/ 从而/ 造成/ 了/ 大量/ 的/ 网络/ 开销/ ,/ 降低/ 了/ 查询/ 效率/ ./ 第/ 2/ 种/ 常见/ 的/ 划分/ 方式/ 为/ 基于/ 空间/ 的/ 划分/ 方式/ (/ 如/ 网格/ 划分/ )/ ./ 即将/ 一段/ 连续/ 空间/ 划分/ 为/ 一个/ 块/ ,/ 同/ 一块/ 内/ 的/ 数据/ 点/ 被/ 划分/ 在/ 一起/ ./ 例如/ 在/ 图/ 1/ 中/ ,/ 可/ 将/ 每维/ 平均/ 切/ 分为/ 2/ 段/ ,/ 共/ 得到/ 4/ 个块/ b1/ 、/ b2/ 、/ b3/ 、/ b4/ ,/ 每个/ 块/ 被/ 分配/ 给/ 一个/ 节点/ ./ 这种/ 切分/ 方式/ 可以/ 实现/ 更好/ 的/ 过滤/ 效果/ ./ 如块/ b1/ 中/ 的/ 点/ p5/ ,/ 该点/ 在/ 本地/ 被/ 判定/ 为/ 离群/ 点/ ,/ 同时/ 也/ 容易/ 地/ 发现/ ,/ 与/ p5/ 距离/ 不/ 大于/ r/ 的/ 数据/ 点/ 一定/ 在/ 块/ b1/ 内/ ,/ 那么/ p5/ 必然/ 是/ 全局/ 的/ 离群/ 点/ ./ 而/ 对于/ p6/ ,/ 发现/ 与其/ 距离/ 不/ 大于/ r/ 的/ 数据/ 点/ 只/ 可能/ 在/ 块/ b2/ 、/ b3/ 内/ ,/ 因此/ 只/ 需要/ 与/ b3/ 进行/ 网络通信/ 就/ 可以/ 确定/ p6/ 是否/ 为/ 最终/ 结果/ ./ 可见/ 此种/ 划分/ 方式/ 节省/ 了/ 大量/ 的/ 网络/ 开销/ 进而/ 提高/ 计算/ 效率/ ./ 但是/ ,/ 这种/ 划分/ 容易/ 造成/ 数据分布/ 不/ 均匀/ ,/ 使/ 各/ 节点/ 的/ 负载/ 不够/ 均衡/ ./ 如图/ 1/ 所示/ ,/ 块/ b3/ 、/ b4/ 内/ 包括/ 了/ 大量/ 的/ 数据/ 点/ ,/ 而块/ b1/ 、/ b2/ 仅/ 包括/ 少量/ 数据/ 点/ ./ 因此/ 这种/ 划分/ 方式/ 也/ 存在/ 一定/ 弊端/ ,/ 不/ 适合/ 于/ 分布式计算/ ./ (/ 2/ )/ 如何/ 在/ 分布式/ 环境/ 下/ 高效/ 地/ 计算/ 离群/ 点/ ./ 在/ 数据/ 划分/ 后/ ,/ 就/ 需要/ 分布式/ 地/ 计算/ 离群/ 点/ ./ 宏观/ 地/ ,/ 计算/ 过程/ 可以/ 分解/ 为/ 2/ 个/ 部分/ :/ ①/ 在/ 每个/ 节点/ 本地/ 进行/ 局部/ 计算/ ,/ 得到/ 一些/ 可能/ 成为/ 最终/ 结果/ 的/ 数据/ 点/ (/ 即候/ 选集/ )/ ;/ ②/ 通过/ 网络通信/ ,/ 从/ 候选/ 集中/ 确定/ 最终/ 结果/ ./ 相应/ 地/ ,/ 分布式/ 离群/ 点/ 计算/ 也/ 包括/ 2/ 个/ 具体/ 问题/ :/ 首先/ ,/ 在/ 步骤/ 1/ 中/ ,/ 如何/ 快速/ 并/ 准确/ 地/ 获取/ 候选/ 集/ ;/ 此外/ ,/ 在/ 步骤/ 2/ 中/ ,/ 如何/ 有效/ 地/ 降低/ 网络/ 开销/ ,/ 以/ 提高/ 算法/ 的/ 整体/ 性能/ ./ 1.2/ 主要/ 贡献/ 本文/ 主要/ 针对/ 分布式/ 离群/ 点/ 检测/ 问题/ ,/ 提出/ 了/ 一种/ 新型/ 的/ 数据/ 划分/ 策略/ 以及/ 相应/ 的/ 查询处理/ 算法/ ./ 具体/ 地/ ,/ 本文/ 贡献/ 点/ 总结/ 如下/ :/ (/ 1/ )/ 提出/ 了/ 一种/ 新型/ 的/ 基于/ 空间/ 的/ 数据/ 划分/ 方法/ :/ BDSP/ (/ BalanceDrivenSpatialPartitioning/ )/ 算法/ ./ 该/ 算法/ 继承/ 了/ 传统/ 空间/ 划分/ 的/ 优势/ ,/ 具备/ 良好/ 的/ 过滤/ 效果/ ./ 同时/ ,/ 还/ 可以/ 平均化/ 每个/ 节点/ 上/ 的/ 工作/ 负载/ ,/ 提高/ 并行性/ ./ 此外/ ,/ 为/ 划分/ 所/ 得到/ 的/ 块/ 设计/ 了/ 一种/ 全新/ 的/ 编码方式/ ,/ 可以/ 快速/ 地/ 确定/ 块/ 与/ 块/ 之间/ 的/ 相邻/ 关系/ ,/ 降低/ 网络/ 开销/ ./ (/ 2/ )/ 基于/ BDSP/ 算法/ ,/ 提出/ 了/ 一种/ 分布式/ 离群/ 点/ 检测/ 算法/ :/ BOD/ (/ BDSP/ -/ basedOutlierDetection/ )/ 算/ Page4/ 法/ ,/ 该/ 算法/ 分为/ 2/ 部分/ :/ ①/ 首先/ 在/ 每个/ 计算/ 节点/ 本地/ ,/ 设计/ 了/ 一种/ 新型/ 的/ 基于/ R/ 树/ 的/ 局部/ 离群/ 点/ 检测/ 算法/ ,/ 可以/ 快速/ 地/ 计算/ 出/ 本地/ 离群/ 点/ 并/ 得到/ 候选/ 集/ ;/ ②/ 利用/ 块/ 的/ 编码/ 迅速/ 地/ 确定/ 需要/ 相互/ 通信/ 的/ 节点/ ,/ 最终/ 使用/ 少量/ 的/ 网络资源/ 计算/ 得出/ 最终/ 结果/ ./ (/ 3/ )/ 分别/ 使用/ 真实/ 数据/ 集/ 和/ 人工合成/ 数据/ 集/ 进行/ 实验/ ,/ 验证/ 了/ 本文/ 所/ 提出/ 的/ BDSP/ 和/ BOD/ 算法/ 的/ 有效性/ ./ 本文/ 第/ 2/ 节/ 概述/ 离群/ 点/ 检测/ 的/ 相关/ 工作/ ;/ 第/ 3/ 节对/ 分布式/ 离群/ 点/ 检测/ 进行/ 形式化/ 描述/ ;/ 第/ 4/ 节/ 详细描述/ BDSP/ 数据/ 划分算法/ ,/ 第/ 5/ 节/ 描述/ BOD/ 算法/ 的/ 具体/ 过程/ ;/ 第/ 6/ 节/ 给出/ 实验/ 结果/ 与/ 分析/ ;/ 第/ 7/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 相关/ 工作/ 本/ 节/ 主要/ 对/ 离群/ 点/ 检测/ 的/ 相关/ 研究/ 进行/ 概述/ ./ 在/ 2.1/ 节中/ ,/ 主要/ 总结/ 了/ 对/ 离群/ 点/ 的/ 各类/ 定义/ 标准/ ,/ 并/ 概述/ 了/ 传统/ 集中式/ 环境/ 中/ 相关/ 的/ 查询处理/ 算法/ ./ 在/ 2.2/ 节中/ ,/ 主要/ 总结/ 了/ 分布式/ 离群/ 点/ 检测/ 的/ 相关/ 算法/ ./ 2.1/ 集中式/ 离群/ 点/ 检测/ 离群/ 点/ 最早/ 是/ 在/ 文献/ [/ 2/ ]/ 中/ 提出/ 的/ ./ 在/ 之后/ 数十年/ 的/ 研究/ 中/ ,/ 不同/ 的/ 学者/ 给出/ 不同/ 的/ 具体/ 定义/ ./ 早期/ 出现/ 的/ 是/ 基于/ 统计/ 的/ 集群/ 点/ 定义/ 标准/ [/ 7/ ]/ ./ 此类/ 定义/ 对/ 数据/ 集/ 假设/ 一种/ 分布/ (/ 或/ 概率模型/ )/ ,/ 那些/ 明显/ 不/ 符合/ 假设/ 分布/ (/ 或/ 概率模型/ )/ 的/ 数据/ 被/ 认为/ 是/ 离群/ 点/ ./ 此类/ 定义/ 标准/ 不适/ 用于/ 高维/ 数据/ ,/ 因为/ 对于/ 高维/ 数据/ ,/ 建立/ 一个/ 优秀/ 的/ 分布/ 模型/ 是/ 非常/ 困难/ 的/ ./ 为了/ 克服/ 上述/ 问题/ ,/ 出现/ 基于/ 距离/ 的/ 离群/ 点/ 定义/ 标准/ ,/ 如/ 文献/ [/ 3/ ,/ 8/ ]/ 等/ ,/ 以及/ 基于/ 密度/ 的/ 定义/ 标准/ ,/ 如/ 文献/ [/ 9/ ]/ 等/ ./ 这些/ 定义/ 并/ 不/ 对/ 数据分布/ 进行/ 预先/ 假设/ ,/ 因此/ 具有/ 良好/ 的/ 实用性/ ./ 基于/ 距离/ 的/ 离群/ 点/ 是/ 目前/ 被/ 广泛/ 认可/ 的/ 定义/ 标准/ ,/ 也/ 出现/ 了/ 许多/ 相关/ 的/ 离群/ 点/ 检测/ 算法/ ./ 其中/ Knorr/ 等/ 人/ [/ 3/ ]/ 提出/ 的/ NL/ 算法/ 是/ 一种/ 基于/ 距离/ 的/ 离群/ 点/ 检测/ 的/ 基准/ 算法/ ./ 该/ 算法/ 不/ 使用/ 索引/ 机制/ ,/ 需要/ 计算/ 数据/ 集中/ 任意/ 两个/ 数据/ 点/ 之间/ 的/ 距离/ ./ Bay/ 等/ 人/ [/ 10/ ]/ 提出/ 了/ ORCA/ 算法/ ,/ 该/ 算法/ 在/ 离群/ 点/ 检测/ 算法/ 开始/ 之前/ 随机化/ 数据/ 集/ ,/ 可以/ 快速/ 地/ 过滤/ 掉/ 非/ 离群/ 点/ ./ Angiulli/ 等/ 人/ [/ 11/ ]/ 提出/ 的/ DOLPHIN/ 算法/ 通过/ 将/ 一部分/ 数据/ 保存/ 在/ 内存/ 中/ ,/ 只/ 需要/ 2/ 次/ 扫描/ 数据/ 集/ 就/ 可以/ 得到/ 所有/ 的/ 离群/ 点/ ./ 此外/ ,/ 还有/ 一些/ 算法/ 致力于/ 通过/ 索引/ 机制/ 来/ 改善/ 查询/ 效率/ ,/ 如/ R/ 树/ [/ 12/ ]/ 、/ M/ 树/ [/ 13/ ]/ 等/ ./ 如/ 文献/ [/ 8/ ]/ 提出/ 了/ IBACO/ 算法/ ,/ 该/ 算法/ 使用/ R/ / 树/ 进行/ 范围/ 查找/ ,/ 可以/ 快速/ 地/ 计算/ 离群/ 点/ ./ 目前/ 还/ 出现/ 了/ 许多/ 针对/ 特定/ 应用/ 背景/ 的/ 离群/ 点/ 检测/ 算法/ ,/ 如/ 数据流/ 上/ 的/ 离群/ 点/ 检测/ [/ 14/ ]/ ,/ 不/ 确定/ 数据/ 的/ 离群/ 点/ 检测/ [/ 15/ ]/ 等/ ./ 2.2/ 分布式/ 离群/ 点/ 检测/ 当/ 数据量/ 较大/ 时/ ,/ 集中式/ 算法/ 运行/ 时间/ 变/ 长/ ,/ 降低/ 了/ 计算结果/ 的/ 时效性/ ./ 因此/ ,/ 一些/ 学者/ 开始/ 使用/ 分布式/ 算法/ 并行/ 地/ 计算/ 离群/ 点/ ,/ 以/ 提高/ 计算/ 效率/ ./ 相关/ 的/ 研究/ 总结/ 如下/ ./ Otey/ 等/ 人/ [/ 16/ ]/ 提出/ 了/ 一种/ 针对/ 混合/ 属性数据/ 集/ 的/ 离群/ 点/ 定义方法/ ,/ 并/ 针对/ 这种/ 离群/ 点/ 定义/ ,/ 提出/ 了/ 分布式计算/ 方法/ ./ 该/ 算法/ 包括/ 2/ 个/ 计算/ 过程/ ,/ 在/ 第/ 1/ 次/ 计算/ 结束/ 后/ ,/ 集群/ 各/ 节点/ 需要/ 进行/ 同步/ 并/ 构建/ 全局/ 模式/ 用于/ 后续/ 计算/ ./ 此外/ ,/ 还/ 出现/ 了/ 一些/ 基于/ MapReduce/ 的/ 并行/ 离群/ 点/ 检测/ 算法/ ,/ 如/ 文献/ [/ 17/ -/ 18/ ]/ 等/ ./ 但/ 以上/ 的/ 算法/ 不适/ 用于/ 基于/ 距离/ 的/ 离群/ 点/ 定义/ ./ 文献/ [/ 5/ -/ 6/ ]/ 采用/ top/ -/ n/ 离群/ 点/ 定义/ ./ 这种/ 定义/ 存在/ 一定/ 的/ 不足/ ,/ 且/ 不/ 适合/ 分布式/ 环境/ (/ 具体/ 原因/ 已/ 在/ 第/ 1/ 节中/ 陈述/ )/ ./ 与/ 本文/ 所/ 研究/ 问题/ 最为/ 接近/ 的/ 工作/ 有/ 文献/ [/ 4/ ]/ ,/ 该文/ 主要/ 基于/ Knorr/ 等/ 人/ 所/ 提出/ 的/ NL/ 算法/ 提出/ 了/ 并行/ 化/ 的/ PENL/ 算法/ ./ 但/ 算法/ 没有/ 使用/ 索引/ 机制/ ,/ 必须/ 对/ 数据/ 集/ 进行/ 多次/ 遍历/ ,/ 具有/ 较/ 高/ 的/ 磁盘/ I/ // O/ 代价/ ./ 此外/ ,/ PENL/ 算法/ 采用/ 了/ 基于/ 数据量/ 的/ 数据/ 划分/ 方法/ ,/ 在/ 分布式计算/ 时/ 需要/ 进行/ 大量/ 的/ 网络/ 传输/ ./ 总之/ ,/ 目前/ 现有/ 的/ 分布式/ 离群/ 点/ 检测/ 方法/ 存在/ 诸多/ 不足/ ,/ 无法/ 保证/ 良好/ 的/ 计算/ 效率/ ./ 3/ 问题/ 描述/ 本文/ 主要/ 研究/ 在/ 分布式/ 环境/ 下/ ,/ 如何/ 并行/ 地/ 计算/ 出/ 数据/ 集内/ 所有/ 的/ 基于/ 距离/ 的/ 离群/ 点/ ./ 下面/ ,/ 首先/ 形式化/ 的/ 给出/ 基于/ 距离/ 的/ 离群/ 点/ 定义/ ;/ 其次/ ,/ 简要/ 描述/ 算法/ 在/ 分布式/ 环境/ 下/ 的/ 处理/ 框架/ ./ 表/ 1/ 列出/ 了/ 本文/ 使用/ 的/ 主要/ 符号/ ./ 符号/ kpnb3/ ./ 1/ 基于/ 距离/ 的/ 离群/ 点/ 定义/ 一般/ 地/ ,/ 给定/ 一个/ 具有/ d/ 维/ 属性/ 的/ 数据/ 集/ P/ ,/ 记/ Page5/ 数据/ 集内/ 的/ 数据/ 点/ 个数/ 为/ |/ P/ |/ ./ 对于/ P/ 内/ 任一/ 数据/ 点/ p/ ,/ p/ 包括/ d/ 个/ 可/ 度量/ 的/ 属性/ 值/ ,/ 记作/ p/ =/ 〈/ p/ [/ 0/ ]/ ,/ p/ [/ 1/ ]/ ,/ …/ ,/ p/ [/ d/ -/ 1/ ]/ 〉/ (/ 为/ 方便/ 描述/ ,/ 后/ 文中/ 认为/ 数据/ 点/ 的/ 各维/ 属性/ 值均/ 不/ 小于/ 0/ )/ ./ 那么/ 点/ p1/ 、/ p2/ 之间/ 的/ 距离/ 为/ dist/ (/ p1/ ,/ p2/ )/ =/ ∑/ i/ ∈/ [/ 0/ ,/ d/ -/ 1/ ]/ 定义/ 1/ ./ 邻居/ ./ 给定/ 一个/ 用户/ 定义/ 的/ 参数/ r/ ,/ 对于/ 两个/ 数据/ 点/ pi/ 、/ pj/ ,/ 若/ pi/ 与/ pj/ 之间/ 的/ 距离/ 不/ 大于/ r/ ,/ 那么/ 称/ pi/ (/ pj/ )/ 为/ 的/ pj/ (/ pi/ )/ 邻居/ ./ 本文/ 记数/ 据点/ pi/ 的/ 邻居/ 数目/ 为/ nn/ (/ pi/ ,/ r/ )/ ./ 定义/ 2/ ./ 基于/ 距离/ 的/ 离群/ 点/ ./ 给定/ 距离/ 阈值/ r/ 和/ 一个/ 正整数/ k/ ,/ 对于/ 数据/ 集/ P/ 中/ 数据/ 点/ pi/ ,/ 如果/ 满足/ nn/ (/ pi/ ,/ r/ )/ </ k/ ,/ 那么/ pi/ 为/ 离群/ 点/ ./ 3.2/ 处理/ 框架/ 本文/ 主要/ 针对/ 常见/ 的/ 分布式/ 环境/ ,/ 即/ 集群/ 包含/ 固定/ 个数/ 的/ 计算/ 节点/ N/ =/ {/ n1/ ,/ n2/ ,/ …/ ,/ n/ |/ N/ |/ }/ (/ |/ N/ |/ 为/ 节点/ 个数/ )/ ,/ 每个/ 节点/ 都/ 存储/ 数据/ 集/ P/ 的/ 一个/ 子集/ ,/ 并/ 包含/ 一个/ 查询处理/ 引擎/ ,/ 用于/ 接收/ 查询/ 和/ 查看/ 结果/ ./ 节点/ 之间/ 可以/ 相互/ 通信/ ./ 分布式/ 环境/ 下/ 的/ 离群/ 点/ 检测/ 问题/ 可以/ 被/ 描述/ 为/ :/ 对于/ 一个/ 给定/ 参数/ r/ 、/ k/ 的/ 查询/ ,/ 通过/ 充分利用/ 集群/ 中/ 各/ 节点/ 的/ 计算能力/ ,/ 快速/ 地/ 返回/ 数据/ 集/ P/ 中/ 所有/ 的/ 离群/ 点/ ./ 图/ 2/ 描述/ 了/ 查询处理/ 的/ 总体/ 框架/ ./ 如图/ 2/ 所示/ ,/ 每个/ 计算/ 节点/ 具有/ 一个/ 查询处理/ 引擎/ ,/ 并/ 存储/ 着/ 数据/ 集/ |/ P/ |/ 的/ 一个/ 子集/ ./ 数据/ 集/ 的/ 划分/ 使用/ BDSP/ 算法/ ,/ 将/ 在/ 第/ 4/ 节中/ 具体/ 介绍/ ./ 当某/ 一/ 计算/ 节点/ n1/ 接收/ 到/ 一个/ 查询/ q/ 时/ ,/ n1/ 将/ 查询/ 发放/ 给/ 集群/ 中/ 的/ 全部/ 节点/ ;/ 接下来/ ,/ 每个/ 节点/ 在/ 本地/ 进行/ 局部/ 计算/ ,/ 得到/ 本地/ 候选/ 集/ ;/ 然后/ ,/ 通过/ 少量/ 的/ 全局/ 通信/ ,/ 确定/ 最终/ 结果/ ,/ 并/ 将/ 其/ 汇总/ 到/ n1/ 上供/ 用户/ 查看/ ./ 4/ 数据/ 划分/ 在/ 离群/ 点/ 检测/ 之前/ ,/ 进行/ 有效/ 地/ 划分/ ,/ 可以/ 显著/ 地/ 提高/ 计算/ 效率/ ./ 本文/ 提出/ 的/ BDSP/ 是/ 一种/ 新型/ 的/ 空间/ 划分/ 方法/ ,/ 该/ 算法/ 继承/ 了/ 传统/ 空间/ 划分/ 良好/ 的/ 过滤/ 能力/ ,/ 并/ 具有/ 较/ 高/ 的/ 分布/ 均衡性/ ./ 算法/ 大体/ 包括/ 2/ 个/ 步骤/ :/ 首先/ 将/ 数据/ 集切/ 分成/ 多个/ 不/ 等/ 大/ 的/ 块/ ,/ 同时/ 为/ 每个/ 块/ 分配/ 唯一/ 的/ 二进制/ 编码/ ,/ 用于/ 快速/ 地/ 判定/ 块/ 之间/ 的/ 相邻/ 关系/ (/ 4.1/ 节/ )/ ;/ 接下来/ 按照/ 一定/ 的/ 规则/ 将/ 得到/ 的/ 块/ 分配/ 给/ 集群/ 中/ 的/ 各/ 节点/ ,/ 使/ 每个/ 节点/ 所/ 得到/ 的/ 数据/ 点/ 个数/ 大致相同/ (/ 4.2/ 节/ )/ ./ 4.1/ 块/ 的/ 切分/ 本/ 小节/ 主要/ 包括/ 两/ 部分/ 内容/ :/ 首先/ 介绍/ 切分/ 算法/ 的/ 具体/ 细节/ ;/ 接下来/ 阐述/ 块/ 编码/ 的/ 详细/ 方法/ ./ 4.1/ ./ 1/ 切分/ 算法/ 在/ 介绍/ 切分/ 算法/ 之前/ ,/ 首先/ 介绍/ 该/ 算法/ 的/ 2/ 个/ 主要/ 输入/ 参数/ :/ (/ 1/ )/ 块/ (/ block/ )/ ./ 即/ 所/ 需要/ 切分/ 的/ 空间/ 区域/ ./ 对于/ d/ 维空间/ 内/ 的/ 一个/ 块/ b/ ,/ 可以/ 使用/ 块/ 的/ 下界/ 点/ b/ ./ min/ 、/ 上界点/ b/ ./ max/ 表示/ ,/ 记/ b/ =/ [/ b/ ./ min/ ,/ b/ ./ max/ ]/ ./ 其中/ 对于/ 任意/ 属于/ 块/ b/ 的/ 数据/ 点/ p/ ,/ 满足/ / i/ ∈/ [/ 0/ ,/ d/ -/ 1/ ]/ ,/ b/ ./ min/ [/ i/ ]/ </ p/ [/ i/ ]/ / b/ ./ max/ [/ i/ ]/ ./ 例如/ 在/ 图/ 3/ 中/ ,/ 块/ b6/ 的/ 下界/ 点/ b6/ ./ min/ =/ 〈/ 0.5/ ,/ 0.25/ 〉/ ,/ 上界点/ b6/ ./ max/ =/ 〈/ 0.75/ ,/ 0.5/ 〉/ ,/ 则/ b6/ 可以/ 表示/ 为/ [/ 〈/ 0.5/ ,/ 0.25/ 〉/ ,/ 〈/ 0.75/ ,/ 0.5/ 〉/ ]/ ./ 在/ 切分/ 算法/ 中/ ,/ 最初/ 被/ 切分/ 的/ 块/ 为/ 数据/ 集/ P/ 对应/ 的/ 全域/ (/ 如/ 在/ 图/ 3/ 中/ ,/ 全域/ 为/ [/ 〈/ 0/ ,/ 0/ 〉/ ,/ 〈/ 1/ ,/ 1/ 〉/ ]/ )/ ./ Page6/ (/ 2/ )/ 切分/ 维度/ ./ 取值/ 范围/ 为/ [/ 0/ ,/ d/ -/ 1/ ]/ 整型/ 变量/ ,/ 用于/ 标识/ 将/ 被/ 切分/ 的/ 维度/ ./ 在/ 切分/ 算法/ 中/ ,/ 最初/ 的/ 切分/ 维度/ 为/ 0/ ./ 总体/ 上/ ,/ 切分/ 算法/ 是/ 一个/ 递归/ 调用/ 的/ 过程/ ./ 首先/ ,/ 对于/ 当前/ 块/ b/ (/ 对应/ 的/ 维度/ 为/ i/ )/ ,/ 切分/ 算法/ 首先/ 选择/ b/ 在/ 第/ i/ 维上/ 的/ 中值/ mid/ =/ (/ b/ ./ min/ [/ i/ ]/ +/ b/ ./ max/ [/ i/ ]/ )/ // 2/ ./ 沿着/ 第/ i/ 维/ 的/ 方向/ ,/ 以中值/ mid/ 为/ 分割线/ ,/ 将/ b/ 分成/ 2/ 个/ 等/ 大/ 的/ 子块/ bleft/ 、/ bright/ (/ 为/ 方便/ 描述/ ,/ 后文称/ 第/ i/ 维值/ 小于/ mid/ 的/ 子块/ 称为/ 左侧/ 子块/ ,/ 称/ 大于/ mid/ 的/ 为/ 右侧/ 子块/ )/ ./ 其中/ bleft/ 的/ 下界/ 点/ bleft/ ./ min/ 与/ b/ 的/ 下界/ 点/ b/ ./ min/ 相同/ ,/ bleft/ 的/ 上界点/ 的/ 第/ i/ 维值/ bleft/ ./ max/ [/ i/ ]/ =/ mid/ ,/ / j/ ∈/ [/ 0/ ,/ d/ -/ 1/ ]/ 且/ j/ ≠/ i/ ,/ bleft/ ./ max/ [/ j/ ]/ =/ b/ ./ max/ [/ j/ ]/ ./ 相应/ 地/ ,/ bright/ ./ max/ =/ b/ ./ max/ ,/ bright/ ./ min/ [/ i/ ]/ =/ mid/ ,/ / j/ ∈/ [/ 0/ ,/ d/ -/ 1/ ]/ 且/ j/ ≠/ i/ ,/ bright/ ./ min/ [/ j/ ]/ =/ b/ ./ min/ [/ j/ ]/ ./ 接下来/ ,/ 对于/ 得到/ 的/ 两个/ 子块/ bleft/ ,/ bright/ 中/ 的/ 任/ 一块/ ,/ 若该/ 块/ 中/ 的/ 数据/ 点/ 个数/ 少于/ |/ P/ |/ // N/ ,/ 那么/ 切分/ 终止/ ,/ 否则/ ,/ 需要/ 对/ 该/ 块/ 进一步/ 切分/ ,/ 所/ 对应/ 的/ 切分/ 维度/ 变为/ (/ i/ +/ 1/ )/ modd/ ,/ 切分/ 方法/ 同上/ ./ 算法/ 1/ 描述/ 了/ 切分/ 的/ 具体/ 过程/ ./ 算法/ 1/ ./ split/ (/ blockb/ ,/ dimensioni/ )/ ./ 1/ ./ 取/ b/ 在/ 第/ i/ 维上/ 的/ 中值/ mid/ =/ (/ b/ ./ min/ [/ i/ ]/ +/ b/ ./ max/ [/ i/ ]/ )/ // 2/ ;/ 2/ ./ 沿着/ 第/ i/ 维/ 的/ 方向/ ,/ 以值/ mid/ 为/ 分割线/ ,/ 将块/ b/ 切分/ 3/ ./ IF/ 块/ bleft/ 内/ 的/ 数据/ 点/ 个数/ 多于/ |/ P/ |/ // NTHEN4/ ./ 递归/ 调用/ split/ (/ bleft/ ,/ (/ i/ +/ 1/ )/ modd/ )/ ;/ 5/ ./ ELSE6/ ./ 输出/ bleft/ 作为/ 最终/ 结果/ ;/ 7/ ./ ENDIF8/ ./ IF/ 块/ bright/ 内/ 的/ 数据/ 点/ 个数/ 多于/ |/ P/ |/ // NTHEN9/ ./ 递归/ 调用/ split/ (/ bright/ ,/ (/ i/ +/ 1/ )/ modd/ )/ ;/ 10/ ./ ELSE11/ ./ 输出/ bright/ 作为/ 最终/ 结果/ ;/ 12/ ./ ENDIF/ 例/ 2/ ./ 如图/ 3/ 所示/ ,/ 分布/ 在/ 二维/ 空间/ [/ 〈/ 0/ ,/ 0/ 〉/ ,/ 〈/ 1/ ,/ 1/ 〉/ ]/ 内/ 的/ 数据/ 集/ P/ 的/ 规模/ |/ P/ |/ =/ 60/ ,/ 集群/ 共/ 包括/ 6/ 个/ 节点/ ,/ |/ P/ |/ // N/ =/ 10/ ./ 首先/ 对于/ 全域/ ,/ 沿着/ 第/ 0/ 维/ 方向/ ,/ 以中点/ 0.5/ 为/ 分割线/ ,/ 将/ 其切/ 分成/ 2/ 个子/ 块/ ,/ 左侧/ 为/ [/ 〈/ 0/ ,/ 0/ 〉/ ,/ 〈/ 0.5/ ,/ 1/ 〉/ ]/ ,/ 右侧/ 为/ [/ 〈/ 0.5/ ,/ 0/ 〉/ ,/ 〈/ 1/ ,/ 1/ 〉/ ]/ ./ 进一步/ 考虑/ 左侧/ 子块/ [/ 〈/ 0/ ,/ 0/ 〉/ ,/ 〈/ 0.5/ ,/ 1/ 〉/ ]/ ,/ 发现/ 其/ 内部/ 包含/ 超过/ 10/ 个/ 数据/ 点/ ,/ 因此/ 需要/ 进一步/ 将/ 该/ 块/ 沿着/ 第/ 1/ 维/ 方向/ 进行/ 切分/ ,/ 得到/ 块/ b1/ ,/ b2/ ./ 此时/ b1/ ,/ b2/ 内/ 的/ 数据/ 点/ 个数/ 均/ 小于/ 10/ 个/ ,/ 左侧/ 的/ 切分/ 终止/ ./ 接下来/ 以/ 相同/ 方法/ 对/ 右侧/ 子块/ 进行/ 切分/ ,/ 最终/ 得到/ b1/ ,/ b2/ ,/ …/ ,/ b9/ 共/ 9/ 个子/ 块/ ,/ 每个/ 子块/ 内/ 都/ 包含/ 不/ 超过/ 10/ 个/ 数据/ 点/ ./ 切分/ 算法/ 中/ ,/ 当/ 某个/ 块/ 中/ 的/ 数据/ 点/ 个数/ 少于/ |/ P/ |/ // N/ (/ 即/ 平均/ 每个/ 节点/ 应该/ 存储/ 的/ 数据/ 点/ 个数/ )/ 时/ ,/ 就/ 不再/ 继续/ 切分/ 该块/ ,/ 因此/ 大多数/ 情况/ 下/ ,/ 最终/ 得到/ 的/ 块/ 的/ 数目/ 只/ 略大于/ N/ ./ 同时/ 也/ 可以/ 看出/ ,/ 当/ 数据/ 集/ 规模/ 给/ 定时/ ,/ 算法/ 的/ 终止/ 条件/ 只/ 与/ 计算/ 节点/ 数目/ N/ 有关/ ,/ 而/ 与/ 数据/ 维度/ d/ 无关/ ,/ 因此/ 切分/ 算法/ 对/ 数据/ 维度/ 的/ 变化/ 并/ 不/ 敏感/ ./ 4.1/ ./ 2/ 块/ 的/ 编码/ 在/ 计算/ 离群/ 点/ 的/ 过程/ 中/ ,/ 相邻/ 的/ 块/ 之间/ 需要/ 进行/ 网络通信/ 才能/ 确定/ 最终/ 结果/ ./ 如/ 在/ 图/ 1/ 中/ ,/ 块/ b3/ 中/ 可能/ 存在/ 数据/ 点/ p6/ 的/ 邻居/ ./ 为/ 确定/ p6/ 是否/ 为/ 离群/ 点/ ,/ b2/ 就/ 需要/ 与/ 相邻/ 块/ b3/ 进行/ 通信/ ./ 但/ 实际上/ ,/ 经过/ 切分/ 之后/ ,/ 难以/ 保留/ 块/ 与/ 块/ 之间/ 的/ 空间/ 关系/ ,/ 尤其/ 是/ 当/ 数据/ 维度/ 较/ 高/ 或/ 切分/ 次数/ 较多时/ ,/ 确定/ 块/ 与/ 块/ 的/ 相邻/ 关系/ 变得/ 十分复杂/ ./ 为/ 解决/ 上述/ 问题/ ,/ 提出/ 了/ 一种/ 新型/ 的/ 块/ 编码方式/ ,/ 规则/ 如下/ ./ 在/ 初始化/ 时/ ,/ 指定/ 全域/ 的/ 编码/ 为/ “/ ”/ ./ 接下来/ ,/ 在/ 每/ 一次/ 切分/ 过程/ 中/ ,/ 记/ 被/ 切分/ 的/ 块/ b/ 的/ 编码/ 为/ b/ ./ code/ ,/ 并记/ b/ 被切/ 分成/ 的/ 左侧/ 子块/ 为/ bleft/ ,/ 右侧/ 子块/ 为/ bright/ ./ 那么/ bleft/ 对应/ 的/ 编码/ 为/ bleft/ ./ code/ =/ b/ ./ code/ +/ “/ 0/ ”/ ,/ 记为/ b/ ./ code/ 的/ 左/ 孩子/ ./ 相应/ 地/ ,/ bright/ 的/ 编码/ bright/ ./ code/ =/ b/ ./ code/ +/ “/ 1/ ”/ ,/ 为/ b/ ./ code/ 的/ 右/ 孩子/ ./ 当/ 切分/ 算法/ 结束/ 后/ ,/ 编码/ 过程/ 构成/ 了/ 一颗/ 二叉/ 编码/ 树/ ./ 树/ 的/ 每个/ 非/ 叶子/ 节点/ 都/ 与/ 某/ 一/ 维度/ 的/ 切分/ 相对/ 应/ ,/ 叶子/ 节点/ 为/ 切分/ 算法/ 最终/ 得到/ 的/ 块/ ./ 图/ 4/ 展示/ 了/ 与/ 图/ 3/ 切分/ 过程/ 对应/ 的/ 编码/ 树/ ./ 其中/ 根节值/ 为/ 空/ ,/ 与/ 0/ 维/ 的/ 切分/ 相对/ 应/ ./ 对/ 0/ 维/ 的/ 切分/ 中/ 产生/ 的/ 左侧/ 子块/ [/ 〈/ 0/ ,/ 0/ 〉/ ,/ 〈/ 0.5/ ,/ 1/ 〉/ ]/ 编码/ 为/ “/ 0/ ”/ ./ 对/ 该子/ 块/ 的/ 1/ 维/ 进一步/ 切分/ ,/ 得到/ 的/ 左侧/ 子块/ b1/ 的/ 编码/ 为/ “/ 0/ ”/ +/ “/ 0/ ”/ =/ “/ 00/ ”/ ,/ 右侧/ 子块/ b2/ 的/ 编码/ 为/ “/ 01/ ”/ ./ 利用/ 上述/ 编码方式/ ,/ 可以/ 快速/ 地/ 确定/ 块/ 与/ 块/ 之间/ 的/ 相邻/ 关系/ ,/ 极大地提高/ 分布式计算/ 的/ 效率/ ./ 在/ 介绍/ 具体/ 细节/ 之前/ ,/ 还/ 需要/ 引入/ 虚/ 划分/ 的/ 概念/ ./ Page7/ 对于/ 某个/ 块/ b/ ,/ 假设/ 全域/ 以/ b/ 为/ 粒度/ 进行/ 划分/ ,/ 并/ 按照/ 相同/ 的/ 方式/ 进行/ 编码/ ,/ 最终/ 可以/ 得到/ 若干/ 与/ b/ 等/ 大且/ 整齐/ 排列/ 的/ 块/ ./ 由于/ 这次/ 划分/ 并未/ 实际/ 执行/ ,/ 故称/ 其/ 为/ 虚/ 划分/ ,/ 得到/ 的/ 块/ 称为/ 虚块/ (/ 相应/ 地/ ,/ 可以/ 称/ 真实/ 切分/ 得到/ 的/ 块/ 为/ 实块/ )/ ./ 例如/ 在/ 图/ 3/ 中/ ,/ 若/ 以块/ b6/ 为/ 粒度/ 进行/ 划分/ ,/ 可以/ 得到/ 整齐/ 排列/ 的/ 16/ 个/ 虚块/ ,/ 图/ 5/ 展示/ 了/ 虚/ 划分/ 的/ 结果/ 以及/ 部分/ 虚块/ 对应/ 的/ 编码/ ./ 那么/ ,/ 对于/ 给定/ 的/ 块/ b/ ,/ 确定/ 块/ 相邻/ 关系/ 的/ 方法/ 可以/ 被/ 概括/ 为/ 2/ 个/ 步骤/ :/ 首先/ ,/ 通过/ 合理/ 的/ 编码/ 转化/ ,/ 找到/ 与/ b/ 相邻/ 的/ 虚块/ ;/ 其次/ ,/ 利用/ 相邻/ 虚块/ 提供/ 的/ 信息/ ,/ 找到/ 与/ b/ 相邻/ 的/ 实块/ ./ 具体/ 过程/ 如下/ :/ 步骤/ 1/ ./ 对于/ 块/ b/ 的/ 编码/ b/ ./ code/ ,/ 容易/ 发现/ b/ ./ code/ 的/ 每/ 一位/ 字符/ 都/ 与/ 某/ 一/ 维度/ 的/ 切分/ 对应/ ./ 那么/ 从/ b/ ./ code/ 的/ 左侧/ 起/ ,/ 依次/ 抽取/ 与/ 第/ i/ 维/ 对应/ 的/ 字符/ ,/ 将/ 得到/ 的/ 字符/ 合并/ 为/ 一个/ 新/ 的/ 字符串/ ,/ 称为/ b/ 的/ i/ 维/ 编码/ ,/ 记为/ sub/ (/ b/ ./ code/ ,/ i/ )/ ./ 注意/ :/ 给定/ 编码/ b/ ./ code/ ,/ 可以/ 求得/ b/ 的/ 各维/ 编码/ ;/ 相应/ 地/ ,/ 给定/ b/ 的/ 各维/ 编码/ ,/ 亦可/ 容易/ 地/ 还原/ b/ ./ code/ ./ 例如/ 在/ 图/ 4/ 中/ ,/ 块/ b6/ 的/ 编码/ 为/ 1001/ ,/ 与/ 第/ 0/ 维/ 对应/ 的/ 字符/ 依次/ 为/ “/ 1/ ”/ 、/ “/ 0/ ”/ ,/ 那么/ b/ 的/ 0/ 维/ 编码/ 为/ “/ 10/ ”/ ,/ 即/ 十进制/ 2/ ./ 类似/ 地/ ,/ 其/ 1/ 维/ 编码/ 的/ 十进制/ 表示/ 形式/ 为/ 1/ ./ 容易/ 发现/ ,/ 若以/ b/ 为/ 粒度/ 进行/ 虚/ 划分/ ,/ 则/ b/ 的/ 每/ 一维/ 编码/ 即/ 代表/ 了/ 虚/ 划分/ 中/ b/ 在/ 该/ 维度/ 上/ 的/ 次序/ (/ 从/ 0/ 开始/ 计数/ )/ ,/ 利用/ 这一/ 特性/ 可以/ 容易/ 地/ 找到/ 相邻/ 虚块/ ./ 例如/ 在/ 图/ 5/ 中/ ,/ 以块/ b6/ 为/ 粒度/ 进行/ 虚/ 划分/ ,/ 此时/ ,/ 块/ b6/ 的/ 0/ 维/ 编码/ 为/ 2/ ,/ 则/ 其/ 在/ 0/ 维/ 方向/ 位于/ 第/ 3/ 块/ ./ 类似/ 地/ ,/ b6/ 在/ 1/ 维/ 方向/ 上/ 位于/ 第/ 2/ 块/ ./ 因此/ ,/ 其/ 相邻/ 虚块/ 的/ 0/ 维/ 编码/ 必然/ 为/ 1/ 、/ 2/ 、/ 3/ ,/ 1/ 维/ 编码/ 必然/ 为/ 0/ 、/ 1/ 、/ 2/ ./ 步骤/ 2/ ./ 容易/ 发现/ ,/ 在/ 步骤/ 1/ 中/ 得到/ 的/ 相邻/ 虚块/ 与/ 算法/ 1/ 中/ 输出/ 的/ 真实/ 块/ 只/ 存在/ 3/ 种/ 位置/ 关系/ ,/ 即/ 包含/ 、/ 被/ 包含/ 、/ 相等/ (/ 不/ 存在/ 相互/ 交叠/ 的/ 情况/ )/ ./ 通过/ 对/ 不同/ 位置/ 关系/ 的/ 仔细分析/ ,/ 可以/ 最终/ 得到/ b/ 的/ 所有/ 相邻/ 块/ ,/ 具体方法/ 如下/ :/ (/ 1/ )/ 相等/ ./ 对/ b/ 的/ 一个/ 相邻/ 虚块/ bvir/ ,/ 取其/ 编码/ bvir/ ./ code/ ,/ 并/ 以/ bvir/ ./ code/ 为/ 关键字/ 查找/ 编码/ 树/ ,/ 如果/ 发现/ 某个/ 叶子/ 节点/ 对应/ 的/ 编码/ 与/ bvir/ ./ code/ 相同/ ,/ 记该/ 叶子/ 节点/ 对应/ 的/ 块/ 为/ beq/ ,/ 那么/ bvir/ 与/ beq/ 相等/ ,/ beq/ 必/ 与/ b/ 相邻/ ./ 例如/ :/ 对于/ 图/ 5/ 中/ 编码/ 为/ 1000/ 并/ 与/ b6/ 相邻/ 的/ 虚块/ ,/ 经过/ 查找/ 图/ 4/ 中/ 的/ 编码/ 树/ ,/ 得到/ 叶子/ 节点/ b5/ ./ 那么/ 可以/ 判定/ 该虚块/ 与/ b5/ 相等/ ,/ b6/ 与/ b5/ 相邻/ ./ (/ 2/ )/ 被/ 包含/ ./ 以/ bvir/ ./ code/ 为/ 关键字/ 查找/ 编码/ 树/ ,/ 如果/ 直至/ 检索/ 到/ 某个/ 叶子/ 节点/ (/ 记/ 对应/ 的/ 块/ 为/ bcon/ )/ ,/ 仍然/ 未/ 得到/ 与/ bvir/ ./ code/ 相同/ 的/ 编码/ ,/ 那么/ bvir/ 被/ bcon/ 包含/ ,/ bcon/ 必/ 与/ b/ 相邻/ ./ 例如/ :/ 对于/ 图/ 5/ 中/ 编码/ 为/ 0011/ 并/ 与/ b6/ 相邻/ 的/ 虚块/ ,/ 查找/ 图/ 4/ 中/ 的/ 编码/ 树/ ,/ 当/ 检索/ 到/ 叶子/ 节点/ b1/ 时/ 仍/ 未/ 得到/ 相同/ 编码/ ./ 那么/ 该虚块/ 被/ b1/ 包含/ ,/ b1/ 必/ 与/ b5/ 相邻/ ./ (/ 3/ )/ 包含/ ./ 如果/ 检索/ 到/ 某个/ 非/ 叶子/ 节点/ ,/ 其/ 对应/ 的/ 编码/ 与/ bvir/ ./ code/ 完全相同/ ,/ 那么/ bvir/ 包含/ 该/ 节点/ 的/ 所有/ 子/ 节点/ 对应/ 的/ 块/ ,/ 而/ 其中/ 只有/ 一部分/ 块/ 与/ b/ 相邻/ ./ 此时/ ,/ 按照/ 如下/ 方法/ 搜索/ 以该/ 节点/ 为根/ 的/ 子树/ :/ 对于/ 检索/ 到/ 的/ 任一/ 节点/ γ/ ,/ 取/ γ/ 对应/ 的/ 维度/ i/ ,/ 如果/ sub/ (/ bvir/ ./ code/ ,/ i/ )/ >/ sub/ (/ b/ ./ code/ ,/ i/ )/ ,/ 那么/ 继续/ 检索/ γ/ 的/ 左/ 孩子/ ;/ 如果/ sub/ (/ bvir/ ./ code/ ,/ i/ )/ </ sub/ (/ b/ ./ code/ ,/ i/ )/ ,/ 那么/ 继续/ 检索/ γ/ 的/ 右/ 孩子/ ;/ 如果/ sub/ (/ bvir/ ./ code/ ,/ i/ )/ =/ sub/ (/ b/ ./ code/ ,/ i/ )/ ,/ 那么/ γ/ 的/ 两个/ 孩子/ 都/ 需要/ 进行/ 检索/ ./ 例如/ 图/ 5/ 中/ 编码/ 为/ 1110/ 并/ 与/ b6/ 相邻/ 的/ 虚块/ ,/ 发现/ 其/ 与/ 图/ 4/ 中/ 编码/ 树/ 的/ 非/ 叶子/ 节点/ 对应/ ,/ 则/ 需要/ 检索/ 以该/ 节点/ 为根/ 的/ 子树/ ./ 发现/ 该/ 节点/ 与/ 0/ 维/ 对应/ ,/ 其/ 0/ 维/ 编码/ 为/ “/ 11/ ”/ ,/ 大于/ 块/ b6/ 的/ 0/ 维/ 编码/ ,/ 那么/ 继续/ 检索/ 该/ 节点/ 的/ 左/ 孩子/ b8/ ./ 发现/ b8/ 已经/ 为/ 叶子/ 节点/ ,/ 则/ 检索/ 终止/ ,/ b8/ 与/ b/ 相邻/ ./ 利用/ 上述/ 方法/ 可以/ 快速/ 地/ 找到/ 块/ b/ 的/ 所有/ 相邻/ 块/ ,/ b/ 仅/ 需要/ 与其/ 相邻/ 的/ 块/ 进行/ 网络通信/ 即可/ 计算/ 最终/ 结果/ ./ 假设/ P/ 内/ 数据/ 点成/ 随机/ 分布/ ,/ 设/ 每个/ 维度/ 被切/ 分成/ 了/ ε/ 段/ ,/ 那么/ 最终/ 全域/ 被切/ 分成/ ε/ d/ 个块/ ./ 若/ 使用/ 块/ 编码/ 找到/ 相邻/ 块/ ,/ 那么/ b/ 只/ 需要/ 与/ 3d/ -/ 1/ 个块/ 进行/ 通信/ ./ 而/ 如果/ 不/ 使用/ 该/ 方法/ ,/ 在/ 最坏/ 情况/ 下/ ,/ b/ 需要/ 与/ ε/ d/ -/ 1/ 个块/ 进行/ 通信/ (/ ε/ 远大于/ 3/ )/ ./ 可见/ ,/ 块/ 编码/ 可以/ 大大的/ 降低/ 网络/ 开销/ ./ 编码/ 树/ 虽然/ 是/ 一颗/ 非/ 平衡/ 二叉树/ ,/ 但/ 在/ 实际/ 应用/ 中/ 并/ 不会/ 对/ 查找/ 效率/ 产生/ 太/ 大/ 影响/ ./ 这/ 主要/ 是/ 因/ Page8/ 为/ 在/ 切分/ 算法/ 中/ ,/ 每/ 进行/ d/ 次/ 切分/ ,/ 就/ 会/ 将/ 原块切/ 分为/ 2d/ 个子/ 块/ ,/ 子块/ 的/ 每/ 一维/ 长度/ 为/ 原块/ 的/ 1/ // 2/ ./ 当/ 在/ 进行/ 了/ h/ ·/ d/ 次/ 切分/ 之后/ ,/ 得到/ 的/ 最小/ 块/ 的/ 每/ 一维/ 长度/ 为/ 1/ // 2h/ ,/ 那么/ 该块/ 内/ 任意/ 两点/ 的/ 距离/ 的/ 最大值/ 仅/ 为/ 槡/ d/ // 2h/ ./ 容易/ 发现/ ,/ 若/ 槡/ d/ // 2h/ / r/ ,/ 则/ 该/ 块/ 内/ 任意/ 点/ 都/ 是/ 其他/ 点/ 的/ 邻居/ ,/ 此时/ 继续/ 切分/ 已经/ 没有/ 意义/ ./ 也就是说/ ,/ 最差/ 情况/ 下/ ,/ 当/ h/ / 分/ 结束/ ,/ 此时/ 编码/ 树高为/ 1/ 预见/ ,/ 在/ 通常/ 情况/ 下/ 该值/ 并不大/ ./ 例如/ :/ 对于/ 一个/ 3/ 维/ 数据/ 集/ ,/ 查询/ 半径/ r/ 设为/ 0.01/ ./ 在/ 最差/ 情况/ 下/ ,/ 编码/ 树仅/ 为/ 24/ 层高/ 的/ 2/ 叉/ 树/ ,/ 那么/ 叶子/ 节点/ 的/ 编码/ 长度/ 不/ 超过/ 3/ 字节/ ,/ 查询/ 效率/ 可以/ 得到/ 保证/ ./ 4.2/ 块/ 的/ 分配/ 当/ 切分/ 算法/ 结束/ 之后/ ,/ 记/ 最终/ 得到/ 的/ 块/ 的/ 集合/ 为/ B/ =/ {/ b1/ ,/ b2/ ,/ …/ ,/ b/ |/ B/ |/ }/ ,/ 显然/ 块/ 的/ 数目/ |/ B/ |/ / |/ N/ |/ ./ 接下来/ ,/ 需要/ 将/ |/ B/ |/ 个块/ 分配/ 给/ 集群/ 中/ 的/ |/ N/ |/ 个/ 节点/ ./ 分配/ 算法/ 主要/ 考虑/ 了/ 2/ 个/ 方面/ :/ 首先/ 使/ 每个/ 节点/ 所/ 存储/ 的/ 数据/ 点/ 数目/ 大致相同/ ,/ 均衡/ 各/ 节点/ 的/ 负载/ ;/ 其次/ ,/ 尽量/ 将/ 相邻/ 块/ 分配/ 到/ 同一个/ 节点/ 上/ ,/ 以/ 进一步/ 降低/ 网络/ 开销/ ./ 具体/ 的/ 分配/ 算法/ 如/ 算法/ 2/ 所示/ ./ 算法/ 2/ ./ allocate/ _/ blocks/ _/ to/ _/ nodes/ (/ )/ ./ 输入/ :/ 块/ 集合/ B/ =/ {/ b1/ ,/ b2/ ,/ …/ ,/ b/ |/ B/ |/ }/ ,/ 输出/ :/ 将/ 每/ 一个/ 块/ 分配/ 给/ 集群/ 中/ 的/ 节点/ 1/ ./ 将/ B/ 中/ 各块/ 按照/ 块/ 内/ 包含/ 数据/ 点/ 个数/ 降序/ 排序/ ;/ 2/ ./ 从/ B/ 中/ 取出/ 前/ |/ N/ |/ 个块/ ,/ 将/ 它们/ 分别/ 分配/ 给/ N/ 中/ 的/ 3/ ./ WHILEB/ 中/ 仍然/ 存在/ 未/ 被/ 分配/ 的/ 块/ DO4/ ./ 取出/ B/ 中/ 的/ 第一个/ 块/ b/ ;/ 5/ ./ 初始化/ 集合/ Ntemp/ 为空/ ;/ 6/ ./ λ/ ←/ 集群/ 中/ 各/ 计算/ 节点/ 包含/ 的/ 数据/ 点/ 个数/ 的/ 均值/ ;/ 7/ ./ FOR/ 集群/ 中/ 的/ 每/ 一个/ 计算/ 节点/ niDO8/ ./ IFni/ 包含/ 的/ 数据/ 点/ 个数/ 不/ 大于/ λ/ THEN9/ ./ 10/ ./ ENDIF11/ ./ ENDFOR12/ ./ 将/ Ntemp/ 中/ 的/ 计算/ 节点/ 按/ 包含/ 数据/ 点/ 个数/ 升序/ 排序/ ;/ 13/ ./ 顺序/ 遍历/ Ntemp/ ,/ 选择/ 包含/ 与/ b/ 相邻/ 块/ 最/ 多/ 的/ 节点/ n/ ;/ 14/ ./ 将/ b/ 分配/ 给/ 节点/ n/ ;/ 15/ ./ ENDWHILE/ 例如/ :/ 在/ 图/ 3/ 中/ ,/ 需要/ 将/ 数据/ 集/ P/ 存储/ 在/ 具有/ 6/ 个/ 节点/ 的/ 集群/ 中/ (/ 记作/ N/ =/ {/ n1/ ,/ n2/ ,/ n3/ ,/ n4/ ,/ n5/ ,/ n6/ }/ )/ ./ 经过/ 切分/ 算法/ ,/ P/ 被/ 分割/ 成/ 9/ 个块/ ,/ 将/ 他们/ 按照/ 数据/ 点/ 个数/ 降序/ 排序/ ,/ 得到/ 序列/ b2/ ,/ b3/ ,/ b7/ ,/ b1/ ,/ b6/ ,/ b5/ ,/ b9/ ,/ b8/ ,/ b4/ ./ 首先/ 将/ 前/ 6/ 个块/ 依次/ 分配/ 给/ 集群/ 中/ 的/ 各个/ 节点/ ./ 接下来/ ,/ 当/ 分配/ b9/ 时/ ,/ 集群/ 中/ 各/ 节点/ 包含/ 的/ 数据/ 点/ 个数/ 的/ 均值/ λ/ =/ (/ 9/ +/ 8/ +/ 8/ +/ 7/ +/ 7/ +/ 6/ )/ // 6/ =/ 7.5/ ,/ 节点/ n4/ 、/ n5/ 、/ n6/ 满足要求/ ./ 将/ 这些/ 节点/ 按照/ 数据/ 点/ 个数/ 排序/ 得到/ n6/ 、/ n4/ 、/ n5/ ./ 发现/ b9/ 不/ 与/ 这/ 3/ 个/ 节点/ 所/ 包含/ 的/ 任何/ 块/ 相邻/ ,/ 那么/ 将/ b9/ 分配/ 给/ 第一个/ 节点/ n6/ ./ 类似/ 地/ ,/ 将/ b8/ 分配/ 给/ n5/ ,/ b4/ 分配/ 给/ n4/ ./ 表/ 2/ 描述/ 了/ 分配/ 的/ 最终/ 结果/ ./ 节点/ 通过/ BDSP/ 算法/ 的/ 切分/ 和/ 分配/ 两个/ 过程/ ,/ 可以/ 将/ 数据/ 集/ P/ 进行/ 有效/ 地/ 分配/ ./ 该/ 算法/ 首先/ 继承/ 了/ 传统/ 空间/ 划分/ 方法/ 过滤/ 能力/ 强/ 的/ 优点/ ,/ 可以/ 极大/ 地/ 减少/ 网络/ 开销/ ;/ 此外/ 也/ 可以/ 保证/ 集群/ 中/ 各/ 节点/ 获得/ 的/ 数据/ 点/ 数目/ 大致相同/ ,/ 均衡/ 了/ 各/ 节点/ 的/ 工作/ 负载/ ./ 定理/ 1/ 展示/ 了/ BDSP/ 算法/ 的/ 具体/ 优势/ ./ 定理/ 1/ ./ 使用/ BDSP/ 算法/ ,/ 对于/ 集群/ 中/ 任一/ 节点/ n/ ,/ 其/ 获得/ 的/ 数据/ 点/ 数目/ 小于/ 2/ |/ P/ |/ // |/ N/ |/ ./ 证明/ ./ 假设/ 对于/ 第/ i/ 次/ 分配/ 结束/ 时/ ,/ 集群/ 满足/ 定理/ 1/ ./ 那么/ 对于/ 第/ i/ +/ 1/ 次/ 分配/ ,/ 若记/ 此次/ 需要/ 分配/ 的/ 块/ 为/ b/ ,/ 显然/ ,/ b/ 所/ 包含/ 的/ 数据/ 点/ 个数/ |/ b/ |/ / |/ P/ |/ // |/ N/ |/ ./ 记第/ i/ +/ 1/ 次/ 分配/ 最终/ 选择/ 的/ 计算/ 节点/ 为/ n/ (/ 算法/ 2/ 第/ 13/ 行/ )/ ,/ 由于/ 此时/ 集群/ 中/ 各/ 计算/ 节点/ 包含/ 的/ 数据/ 点/ 个数/ 的/ 均值/ λ/ 必/ 小于/ |/ P/ |/ // |/ N/ |/ ,/ 所以/ n/ 中/ 包含/ 的/ 数据/ 点/ 个数/ 亦/ 小于/ |/ P/ |/ // |/ N/ |/ ./ 那么/ ,/ 将/ b/ 分配/ 给/ n/ 后/ ,/ 集群/ 中/ 的/ 节点/ 仍然/ 满足/ 定理/ 1/ ./ 此外/ ,/ 易证/ 在/ 第一次/ 分配/ 时/ 集群/ 满足/ 定理/ 1.5/ BOD/ 算法/ 描述/ 本/ 节/ 主要/ 描述/ 了/ BOD/ 算法/ 的/ 具体/ 细节/ ./ 该/ 算法/ 包括/ 2/ 部分/ :/ (/ 1/ )/ 局部/ 部分/ ./ 即/ 在/ 每个/ 节点/ 本地/ 利用/ R/ 树/ 索引/ 进行/ 批量/ 过滤/ ,/ 使用/ 少量/ 的/ 磁盘/ IO/ 快速/ 地/ 确定/ 最终/ 结果/ 的/ 候选/ 集/ ;/ (/ 2/ )/ 全局/ 部分/ ./ 即/ 利用/ 4.1/ ./ 2/ 节中/ 的/ 块/ 编码/ 快速/ 地/ 确定/ 需要/ 相互/ 通信/ 的/ 块/ ,/ 利用/ 少量/ 的/ 网络通信/ 从/ 候选/ 集中/ 确定/ 最终/ 结果/ ./ 5.1/ BOD/ 算法/ -/ 局部/ 本/ 小节/ 主要/ 阐述/ BOD/ 算法/ 中/ 的/ 局部/ 离群/ 点/ 计算方法/ ./ 在/ 现有/ 的/ 基于/ 索引/ 的/ 集中式/ 离群/ 点/ 检测/ 算法/ 中/ ,/ 对于/ 每/ 一个/ 数据/ 点/ ,/ 都/ 需要/ 对/ 索引/ 进行/ 范围/ 查找/ ,/ 这种/ 查询处理/ 方式/ 需要/ 消耗/ 大量/ 的/ 磁盘/ IO/ ,/ 并/ Page9/ 不适/ 用于/ 大规模/ 数据/ ./ 为此/ ,/ 本文/ 提出/ 了/ 一种/ 新型/ 的/ 基于/ R/ 树/ 的/ 局部/ 离群/ 点/ 检测/ 算法/ ./ 该/ 算法/ 首先/ 利用/ R/ 树结构/ 对/ 数据/ 点/ 进行/ 批量/ 过滤/ ,/ 极大/ 地/ 减少/ 了/ 需要/ 进行/ 范围/ 查找/ 的/ 数据/ 点/ 数目/ ;/ 之后/ ,/ 以/ 批量/ 查询/ 的/ 方式/ 代替/ 了/ 传统/ 的/ 逐个/ 查询/ ,/ 显著/ 地/ 减少/ 了/ IO/ 次数/ ,/ 从而/ 提高/ 了/ 计算/ 效率/ ./ 在/ 详细描述/ 本文/ 算法/ 之前/ ,/ 首先/ 对/ R/ 树/ 索引/ 进行/ 简单/ 概述/ ./ 5.1/ ./ 1R/ 树/ 索引/ 概述/ R/ 树是/ 一种/ 树形/ 的/ 多维/ 空间/ 索引/ 结构/ ./ 它/ 的/ 每个/ 节点/ 对应/ 空间/ 内/ 的/ 一个/ 最小/ 外界/ 矩形/ (/ MinimumBoundingRectangle/ ,/ MBR/ )/ ./ 每个/ MBRm/ 可以/ 使用/ 其/ 下界/ 点/ m/ ./ min/ 和/ 上界点/ m/ ./ max/ 来/ 表示/ ,/ 记作/ m/ =/ [/ m/ ./ min/ ,/ m/ ./ max/ ]/ ,/ 记/ R/ 树/ 节点/ e/ 对应/ 的/ MBR/ 为/ e/ ./ MBR/ ./ 对于/ 一个/ 给定/ 的/ 阈值/ t/ ,/ 限定/ 每个/ 节点/ 包含/ 的/ 对象/ 数目/ 在/ [/ t/ ,/ 2t/ ]/ 范围/ 内/ ./ 树/ 的/ 叶子/ 节点/ 对应/ 的/ MBR/ 是/ 所/ 包含/ 数据/ 点/ 的/ 最小/ 矩形/ ,/ 非/ 叶子/ 节点/ 对应/ 的/ MBR/ 是/ 它/ 所有/ 孩子/ 节点/ MBR/ 的/ 外包/ 矩形/ ./ 图/ 6/ 描述/ 了/ 2/ 维空间/ 内/ 一个/ 块/ bm/ =/ [/ 〈/ 0.25/ ,/ 0.25/ 〉/ ,/ 〈/ 0.5/ ,/ 0.5/ 〉/ ]/ 对应/ 的/ R/ 树/ 索引/ ,/ 阈值/ t/ =/ 2/ ,/ 每个/ 节点/ 可/ 包含/ 2/ ~/ 4/ 个/ 对象/ ./ e6/ 是/ 一个/ 叶子/ 节点/ ,/ 包含/ p11/ 、/ p12/ 、/ p13/ 和/ p14/ 这/ 4/ 个点/ ,/ 它/ 对应/ 的/ MBR/ 可以/ 表示/ 为/ e6/ ./ mbr/ =/ [/ 〈/ 0.3125/ ,/ 0.475/ 〉/ ,/ 〈/ 0.3375/ ,/ 0.4875/ 〉/ ]/ ./ e2/ 是/ 一个/ 非/ 叶子/ 节点/ ,/ 包含/ e4/ 和/ e5/ 两个/ 孩子/ 节点/ ,/ 它/ 对应/ 的/ MBR/ 为/ e2/ ./ mbr/ =/ [/ 〈/ 0.3875/ ,/ 0.29/ 〉/ ,/ 〈/ 0.475/ ,/ 0.44/ 〉/ ]/ ./ 5.1/ ./ 2/ 局部/ 查询/ 算法/ 描述/ 算法/ 首先/ 利用/ R/ 树结构/ 对/ 数据/ 点/ 进行/ 批量/ 过滤/ ,/ 具体/ 的/ 过滤/ 方法/ 如下/ ./ 定理/ 2/ ./ 对于/ R/ 树中/ 的/ 任一/ 节点/ e/ ,/ 如果/ e/ ./ MBR/ 满足/ :/ 最大/ 对角线/ 长度/ 不/ 大于/ 查询/ 半径/ r/ ,/ 且/ MBR/ 内/ 的/ 数据/ 点/ 个数/ 不/ 小于/ k/ ,/ 那么/ 该/ MBR/ 内/ 的/ 所有/ 数据/ 点均/ 不是/ 离群/ 点/ ./ 证明/ ./ 若/ 最大/ 对角线/ 长度/ 不/ 大于/ 查询/ 半径/ r/ ,/ 则/ MBR/ 内/ 所有/ 数据/ 点/ 的/ 相互/ 距离/ 都/ 不/ 大于/ r/ ,/ 又/ 有/ 数据/ 点/ 个数/ 不/ 小于/ k/ ,/ 则/ 根据/ 离群/ 点/ 定义/ ,/ MBR/ 内/ 所有/ 点/ 都/ 不是/ 离群/ 点/ ./ 对/ R/ 树/ 进行/ 遍历/ ,/ 所有/ 满足/ 定理/ 2/ 的/ MBR/ 中/ 的/ 数据/ 点/ 一定/ 不是/ 离群/ 点/ ,/ 可以/ 被/ 安全/ 地/ 过滤/ 掉/ ./ 例如/ 在/ 图/ 6/ 中/ ,/ 给定/ 离群/ 点/ 查询/ r/ =/ 0.05/ ,/ k/ =/ 4/ ,/ MBRe5/ 、/ e6/ 、/ e8/ 均/ 符合/ 定理/ 2/ ,/ 可/ 被/ 直接/ 排除/ ./ 而/ e4/ 、/ e7/ 内/ 可能/ 存在/ 离群/ 点/ ,/ 需要/ 保留/ ./ 接下来/ ,/ 对于/ 剩下/ 的/ MBR/ ,/ 主要/ 以/ 批量/ 查询/ 的/ 方式/ 确定/ 局部/ 离群/ 点/ ./ 为/ 提高/ 查询/ 效率/ ,/ 主要/ 利用/ 下面/ 2/ 个/ 剪枝/ 策略/ 缩小/ 搜索/ 空间/ ./ 定义/ 3/ ./ MBR/ 的/ 最小/ 距离/ [/ 8/ ]/ ./ 给定/ 两个/ MBR/ ,/ m1/ 、/ m2/ ,/ 两个/ MBR/ 的/ 最小/ 距离/ 为/ min/ _/ dist/ (/ m1/ ,/ m2/ )/ =/ ∑/ i/ ∈/ [/ 0/ ,/ d/ -/ 1/ ]/ 槡/ x/ [/ i/ ]/ =/ m2/ ./ min/ [/ i/ ]/ -/ m1/ ./ max/ [/ i/ ]/ ,/ m2/ ./ min/ [/ i/ ]/ >/ m1/ ./ max/ [/ i/ ]/ 烄/ m1/ ./ min/ [/ i/ ]/ -/ m2/ ./ max/ [/ i/ ]/ ,/ m1/ ./ min/ [/ i/ ]/ >/ m2/ ./ max/ [/ i/ ]/ 烅/ 0/ ,/ 烆/ 显然/ 地/ ,/ 给定/ MBRm1/ 中/ 的/ 任意/ 一个/ 数据/ 点/ p1/ 和/ m2/ 中/ 的/ 任意/ 一个/ 数据/ 点/ p2/ ,/ p1/ 与/ p2/ 的/ 距离/ 必然/ 不/ 小于/ m1/ 与/ m2/ 的/ 最小/ 距离/ ,/ 即/ dist/ (/ p1/ ,/ p2/ )/ / min/ _/ dist/ (/ m1/ ,/ m2/ )/ ./ 因此/ ,/ 得到/ 第/ 1/ 个/ 过滤/ 条件/ ./ 定理/ 3/ ./ 对于/ 两个/ MBRm1/ 、/ m2/ ,/ 如果/ min/ _/ dist/ (/ m1/ ,/ m2/ )/ >/ R/ ,/ 那么/ 对于/ m1/ 中/ 的/ 任意/ 数据/ 点/ p1/ ,/ m2/ 中/ 必然/ 不/ 存在/ p1/ 的/ 邻居/ (/ 反之亦然/ )/ ./ 证明/ ./ 根据/ 定义/ 1/ 和/ 3/ ,/ 本/ 定理/ 可得证/ ./ 证毕/ ./ 定义/ 4/ ./ MBR/ 的/ 最大/ 距离/ [/ 8/ ]/ ./ 给定/ 两个/ MBR/ ,/ m1/ 、/ m2/ ,/ 两个/ MBR/ 的/ 最大/ 距离/ 为/ max/ _/ dist/ (/ m1/ ,/ m2/ )/ =/ ∑/ i/ ∈/ [/ 0/ ,/ d/ -/ 1/ ]/ m1/ ./ min/ |/ ,/ |/ m1/ ./ max/ -/ m2/ ./ min/ |/ }/ ./ 槡/ 类似/ 地/ ,/ 给定/ MBRm1/ 中/ 的/ 任意/ 一个/ 数据/ 点/ p1/ 和/ m2/ 中/ 的/ 任意/ 一个/ 数据/ 点/ p2/ ,/ dist/ (/ p1/ ,/ p2/ )/ / max/ _/ dist/ (/ m1/ ,/ m2/ )/ ./ 因此/ ,/ 得到/ 第/ 2/ 个/ 过滤/ 条件/ ./ 定理/ 4/ ./ 对于/ 两个/ MBRm1/ 、/ m2/ ,/ 如果/ max/ _/ dist/ (/ m1/ ,/ m2/ )/ / R/ ,/ 那么/ 对于/ m1/ 中/ 的/ 任意/ 数据/ 点/ p1/ ,/ m2/ 中/ 所有/ 数据/ 点/ 必然/ 是/ p1/ 的/ 邻居/ (/ 反之亦然/ )/ ./ 证明/ ./ 根据/ 定义/ 1/ 和/ 3/ ,/ 本/ 定理/ 可得证/ ./ 证毕/ ./ 根据上述/ 2/ 个/ 过滤/ 策略/ ,/ 进行/ 以/ R/ 树叶子/ 节点/ MBR/ 为/ 粒度/ ,/ R/ 为/ 半径/ 的/ 范围/ 搜索/ ,/ 可以/ 得到/ 所有/ Page10/ 的/ 局部/ 离群/ 点/ ./ 具体/ 过程/ 如/ 算法/ 3/ 所示/ ./ 算法/ 3/ ./ local/ _/ outlier/ _/ detection/ (/ )/ ./ 输入/ :/ 本地/ 存储/ 的/ 所有/ 数据/ 点/ ;/ 对应/ 的/ R/ 树/ 索引/ 输出/ :/ 所有/ 的/ 局部/ 离群/ 点/ 1/ ./ 初始化/ 集合/ E/ 为空/ ,/ 堆/ H/ 为空/ ;/ 2/ ./ 遍历/ R/ 树/ ,/ 所有/ 不/ 满足/ 定理/ 2/ 的/ 叶子/ 节点/ 加入/ E/ 中/ ;/ 3/ ./ FORE/ 中/ 的/ 每/ 一个/ 叶子/ 节点/ eDO4/ ./ 集合/ Pe/ ←/ 读取/ e/ ./ MBR/ 内/ 的/ 所有/ 数据/ 点/ ;/ 5/ ./ FORPe/ 中/ 的/ 每/ 一个/ 数据/ 点/ pDO6/ ./ nn/ (/ p/ ,/ r/ )/ ←/ 计算/ Pe/ 中以/ r/ 为/ 半径/ p/ 的/ 邻居/ 数目/ ;/ 7/ ./ IFnn/ (/ p/ ,/ R/ )/ / kTHEN8/ ./ 从/ Pe/ 移除/ p/ ;/ 9/ ./ ENDIF10/ ./ ENDFOR11/ ./ IFPe/ 不为/ 空/ THEN12/ ./ R/ 树根/ 节点/ 的/ 孩子/ 节点/ 加入/ 到/ H/ 中/ ;/ 13/ ./ WHILEH/ 不为/ 空/ DO14/ ./ 取/ H/ 首/ 元素/ h/ ;/ 15/ ./ IFmin/ _/ dist/ (/ e/ ./ MBR/ ,/ h/ ./ MBR/ )/ >/ rTHEN/ // // 定理/ 316/ ./ continue/ ;/ 17/ ./ ELSEIFmax/ _/ dist/ (/ e/ ./ MBR/ ,/ h/ ./ MBR/ )/ / rTHEN18/ ./ num/ ←/ h/ ./ MNR/ 内/ 的/ 数据/ 点/ 个数/ ;/ 19/ ./ FORPe/ 中/ 的/ 每/ 一个/ 数据/ 点/ pDO20/ ./ nn/ (/ p/ ,/ r/ )/ +/ =/ num/ ;/ 21/ ./ IFnn/ (/ p/ ,/ R/ )/ / kTHEN22/ ./ 23.24/ ./ ENDFOR25/ ./ ELSEIFh/ 为/ 叶子/ 节点/ THEN26/ ./ FORPe/ 中/ 的/ 每/ 一个/ 数据/ 点/ pDO27/ ./ 28/ ./ IFnn/ (/ p/ ,/ R/ )/ / kTHEN29/ ./ 30.31/ ./ ENDFOR32/ ./ ELSE33/ ./ h/ 的/ 孩子/ 节点/ 加入/ H/ 中/ ;/ 34/ ./ ENDIF35/ ./ ENDWHILE36/ ./ ENDIF37/ ./ Pe/ 中/ 剩余/ 的/ 数据/ 点为/ 局部/ 离群/ 点/ ,/ 输出/ ;/ 38/ ./ ENDFOR/ 例/ 3/ ./ 在/ 图/ 6/ 中/ ,/ 首先/ 通过/ 定理/ 2/ 进行/ 过滤/ ,/ 判定/ 可能/ 存在/ 离群/ 点/ 的/ MBR/ 有/ e4/ 、/ e7/ ./ 对于/ e7/ ,/ 通过/ 检索/ R/ 树/ ,/ 发现/ e8/ 与/ e7/ 的/ 最小/ 距离/ 大于/ r/ ,/ 因此/ e8/ 内/ 不/ 存在/ e7/ 内/ 数据/ 点/ 的/ 邻居/ ./ 同时/ 发现/ e6/ 与/ e7/ 的/ 最大/ 距离/ 小于/ r/ ,/ 因此/ e6/ 内/ 的/ 数据/ 点均/ 为/ e7/ 内/ 数据/ 点/ 的/ 邻居/ ./ 因此/ 可以/ 将/ e7/ 内/ 每个/ 数据/ 点/ 的/ 邻居/ 数目/ 加/ 4/ ./ 至此/ ,/ 可以/ 断定/ e7/ 内/ 不/ 存在/ 离群/ 点/ ./ 对于/ e4/ 亦/ 采用/ 类似/ 地/ 查找/ 方法/ ,/ 最终/ 得到/ 离群/ 点为/ p16/ 、/ p17/ ./ 记在/ 块/ b/ 中/ 的/ 局部/ 离群/ 点/ 集合/ 为/ Ob/ ,/ 正如/ 在/ 第/ 1/ 节中/ 提到/ 的/ ,/ 局部/ 离群/ 点/ 不/ 一定/ 是/ 全局/ 离群/ 点/ ,/ 需要/ 与/ 其他/ 块/ 进行/ 通信/ 才能/ 确定/ 最终/ 结果/ ./ 但/ 由于/ 本文/ 采用/ 了/ BDSP/ 划分/ 方式/ ,/ 可以/ 在/ 本地/ 提前/ 确定/ 一部分/ 结果/ ,/ 减少/ 数据传输/ 量/ ./ 具体/ 地/ :/ 定理/ 5/ ./ 对于/ 块/ b/ 中/ 的/ 任意/ 局部/ 离群/ 点/ p/ ,/ 如果/ / i/ ∈/ [/ 0/ ,/ d/ -/ 1/ ]/ ,/ p/ [/ i/ ]/ -/ b/ ./ min/ [/ i/ ]/ >/ r/ 且/ b/ ./ max/ [/ i/ ]/ -/ p/ [/ i/ ]/ / r/ ,/ 那么/ p/ 必为/ 全局/ 离群/ 点/ ./ 证明/ ./ 由于/ / i/ ∈/ [/ 0/ ,/ d/ -/ 1/ ]/ ,/ p/ [/ i/ ]/ -/ b/ ./ min/ [/ i/ ]/ >/ r/ 且/ b/ ./ max/ [/ i/ ]/ -/ p/ [/ i/ ]/ / r/ ,/ 那么/ p/ 的/ 所有/ 邻居/ 必然/ 都/ 存储/ 在/ 块/ b/ 内/ ./ 因此/ 对于/ 全集/ P/ ,/ p/ 的/ 邻居/ 数目/ 仍然/ 不/ 大于/ k/ ,/ 因此/ p/ 是/ 全局/ 离群/ 点/ ./ 在/ 块/ b/ 中/ ,/ 对于/ 局部/ 离群/ 点/ 集合/ Ob/ 中/ 任一/ 数据/ 点/ p/ ,/ 如果/ p/ 满足/ 定理/ 5/ ,/ 那么/ 该点/ 必为/ 全局/ 离群/ 点/ ,/ 可/ 直接/ 作为/ 最终/ 结果/ 输出/ ./ 如果/ p/ 不/ 满足/ 定理/ 5/ ,/ 那么/ 称之为/ 非/ 确定/ 离群/ 点/ ,/ 并/ 记块/ b/ 中/ 的/ 所有/ 非/ 确定/ 离群/ 点/ 集合/ 为/ Ob/ ./ 显然/ 地/ ,/ Ob/ 中/ 的/ 任一/ 数据/ 点/ p/ ,/ 在/ 与/ b/ 相邻/ 的/ 其他/ 块/ 中/ ,/ 可能/ 存在/ p/ 的/ 邻居/ ,/ 需要/ 进一步/ 与/ 其他/ 块/ 进行/ 网络通信/ ,/ 才能/ 最终/ 确定/ p/ 是否/ 为/ 全局/ 离群/ 点/ ./ 因此/ 集合/ Ob/ 作为/ 最终/ 结果/ 的/ 候选/ 集/ ,/ 需要/ 暂时/ 保存/ ./ 例如/ 在/ 图/ 6/ 中/ ,/ 根据/ 定理/ 5/ 进行/ 计算/ ,/ p17/ 为/ 全局/ 离群/ 点/ ,/ 直接/ 输出/ ./ 而/ p16/ 为/ 非/ 确定/ 集群/ 点/ ,/ 需要/ 进一步/ 的/ 网络通信/ 才/ 能够/ 判定/ ,/ 具体/ 计算方法/ 在/ 5.2/ 节中/ 给出/ ./ 5.2/ BOD/ 算法/ -/ 全局/ 如/ 5.1/ 节/ 所述/ ,/ 如果/ 块/ b/ 中/ 存在/ 非/ 确定/ 离群/ 点/ ,/ 则/ b/ 需要/ 与其/ 相邻/ 的/ 块/ 进行/ 网络通信/ ./ 对于/ 任意/ 块/ b/ ,/ 根据/ 4.1/ ./ 2/ 节中/ 提供/ 的/ 方法/ ,/ 计算/ 得到/ 其/ 相邻/ 块/ 的/ 集合/ neig/ (/ b/ )/ ./ 一般/ 情况/ 下/ ,/ 对于/ b/ 中/ 的/ 某个/ 非/ 确定/ 离群/ 点/ p/ ,/ 也/ 仅/ 需要/ 与/ neig/ (/ b/ )/ 中/ 一部分/ 块/ 进行/ 通信/ ,/ 就/ 可以/ 确定/ p/ 是否/ 为/ 最终/ 结果/ ./ 为了/ 准确/ 地/ 选择/ 通信/ 块/ ,/ 首先/ 给出/ 如下/ 定义/ ./ 定义/ 5/ ./ 点/ 与/ 块/ 的/ 最小/ 距离/ [/ 8/ ]/ ./ 给定/ 数据/ 点/ p/ 和/ 块/ b/ ,/ 那么/ p/ 与/ b/ 的/ 最小/ 距离/ min/ _/ dist/ (/ p/ ,/ b/ )/ =/ (/ z/ [/ i/ ]/ )/ 槡/ ∑/ i/ ∈/ [/ 0/ ,/ d/ )/ z/ [/ i/ ]/ =/ Page11/ 显然/ 地/ ,/ 对于/ neig/ (/ b/ )/ 中/ 的/ 某个/ 块/ b/ ,/ 依次/ 判断/ b/ 中/ 的/ 每/ 一非/ 确定/ 离群/ 点/ p/ ,/ 若/ 满足/ min/ _/ dist/ (/ p/ ,/ b/ )/ / r/ ,/ 说明/ b/ 中/ 可能/ 存在/ p/ 的/ 邻居/ ,/ 则/ 将/ p/ 加入/ 到/ 集合/ sendb/ →/ b/ 中/ ./ 最终/ 将/ sendb/ →/ b/ 中/ 的/ 所有/ 点/ 发送到/ 块/ b/ 所在/ 的/ 节点/ ./ 在/ 块/ b/ 中/ ,/ 对于/ 收到/ 的/ sendb/ →/ b/ 中/ 的/ 每/ 一个/ 数据/ 点/ p/ ,/ 对/ R/ 树/ 索引/ 进行/ 以/ p/ 为/ 查询/ 点/ ,/ r/ 为/ 半径/ 的/ 范围/ 查找/ ,/ 得到/ 在/ 块/ b/ 中/ p/ 的/ 邻居/ 数目/ 并/ 将/ 该值/ 返回/ 给/ 块/ b/ ./ 最终/ ,/ 得到/ 块/ b/ 中/ 每个/ 非/ 确定/ 离群/ 点/ 的/ 全局/ 邻居/ 数目/ ,/ 进而/ 输出/ 最终/ 结果/ ./ 算法/ 4/ 展示/ 了/ 具体/ 计算/ 过程/ ./ 算法/ 4/ ./ outlier/ _/ judgement/ (/ )/ ./ 输入/ :/ 块/ b/ 中/ 的/ 非/ 确定/ 离群/ 点/ 集合/ 集合/ Ob/ 输出/ :/ Ob/ 中/ 的/ 全局/ 离群/ 点/ 1/ ./ FOR/ 集合/ neig/ (/ b/ )/ 中/ 的/ 每/ 一个/ 块/ bDO2/ ./ 初始化/ 集合/ sendb/ →/ b/ ;/ 3/ ./ FOROb/ 中/ 的/ 每/ 一个/ 数据/ 点/ pDO4/ ./ IFmin/ _/ dist/ (/ p/ ,/ b/ )/ / rTHEN5/ ./ sendb/ →/ b/ ←/ p/ ;/ 6/ ./ ENDIF7/ ./ ENDFOR8/ ./ 将/ sendb/ →/ b/ 发送到/ b/ 所在/ 节点/ ;/ 9/ ./ ENDFOR10/ ./ FOROb/ 中/ 每个/ 数据/ 点/ pDO11/ ./ 根据/ 各块/ 返回/ 的/ 结果/ ,/ 计算/ p/ 的/ 全局/ 邻居/ 数目/ 12/ ./ IFnn/ (/ p/ ,/ r/ )/ </ kTHEN13/ ./ 将/ p/ 作为/ 全局/ 离群/ 点/ 输出/ ;/ 14/ ./ ENDIF15/ ./ ENDFORBOD/ 算法/ 复杂度/ 分析/ :/ 在/ 算法/ 3/ 中/ (/ BOD/ 算法/ -/ 局部/ )/ ,/ 对于/ 一个/ 包含/ s/ 个/ 数据/ 点/ 的/ 块/ ,/ 首先/ 遍历/ R/ 树/ 索引/ 的/ 叶子/ 节点/ ,/ 对/ 数据/ 点/ 进行/ 批量/ 过滤/ ,/ 复杂度/ 为/ O/ (/ l/ )/ (/ l/ 为/ R/ 树叶子/ 节点/ 个数/ )/ ./ 记/ 过滤/ 后/ 剩余/ 数据/ 点/ 个数/ 为/ s/ ./ 对于/ 每/ 一个/ 剩余/ 的/ 数据/ 点/ ,/ 都/ 需要/ 利用/ R/ 树/ 索引/ 找到/ 它/ 的/ 本地/ 邻居/ ,/ 以/ 确定/ 其/ 是否/ 为/ 非/ 确定/ 离群/ 点/ ./ 该/ 过程/ 复杂度/ 下界/ 为/ Ω/ (/ k/ ·/ d/ ·/ s/ ·/ log/ (/ s/ )/ )/ ,/ 最差/ 情况/ 的/ 复杂度/ 为/ O/ (/ k/ ·/ d/ ·/ s/ ·/ s/ )/ ./ 在/ 算法/ 4/ 中/ (/ BOD/ 算法/ -/ 全局/ )/ ,/ 记块/ 内/ 的/ 非/ 确定/ 离群/ 点/ 数目/ 为/ s/ / ./ 每个/ 非/ 确定/ 离群/ 点/ 都/ 需要/ 在/ 其他/ 块/ 内/ 进行/ 最多/ k/ 次/ 查找/ (/ 找到/ k/ 个/ 邻居/ )/ ./ 因此/ ,/ 算法/ 4/ 的/ 复杂度/ 下界/ 为/ Ω/ (/ k/ ·/ d/ ·/ s/ / ·/ log/ (/ s/ )/ )/ ,/ 最差/ 情况/ 的/ 复杂度/ 为/ O/ (/ k/ ·/ d/ ·/ s/ / ·/ s/ )/ ./ 例/ 4/ ./ 图/ 6/ 描述/ 了/ 块/ bm/ 内/ 的/ 数据/ 点/ 分布/ 情况/ ,/ 经过/ 计算/ 得到/ 非/ 确定/ 离群/ 点/ p16/ ./ 块/ bm/ 在/ 全域/ 内/ 的/ 空间/ 位置/ 如图/ 7/ 所示/ ,/ 其/ 相邻/ 块/ 为/ b1/ 、/ b2/ 、/ b3/ 、/ b4/ 、/ b5/ 、/ b6/ ./ 通过/ 使用/ 定义/ 5/ ,/ 发现/ 只有/ 块/ b5/ 内/ 可能/ 存在/ p16/ 的/ 邻居/ ,/ 因此/ 将/ p16/ 发送给/ 块/ b5/ 所在/ 节点/ ./ 接下来/ ,/ 对块/ b5/ 的/ R/ 树/ 索引/ 进行/ 以/ p16/ 为/ 查询/ 点/ ,/ r/ 为/ 半径/ 的/ 范围/ 查找/ ,/ 得到/ 2/ 个/ 邻居/ pi/ 、/ pj/ ,/ 则/ 向/ bm/ 返回/ 数字/ 2/ ./ 在/ bm/ 本地/ p16/ 的/ 邻居/ 数目/ 为/ 0/ ,/ 因此/ p16/ 在/ 全局/ 的/ 邻居/ 数目/ 为/ 2/ ,/ 小于/ k/ ,/ 则/ 可以/ 确定/ p16/ 为/ 离群/ 点/ ./ 6/ 实验/ 分析/ 6.1/ 真实/ 数据/ 的/ 测试/ 结果/ 本/ 小节/ 主要/ 使用/ 真实/ 数据/ 集来/ 测试/ 本文/ 提出/ 的/ BOD/ 算法/ 性能/ ./ 实验/ 中/ 使用/ 的/ 集群/ 包括/ 4/ 个/ 节点/ ,/ 每个/ 节点/ 的/ 配置/ 为/ IntelCorei321003/ ./ 1GHzCPU/ ,/ 8GB/ 内存/ ,/ 500GB/ 硬盘/ ,/ 操作系统/ 为/ RedHatLinux6/ ./ 1/ ./ 算法/ 采用/ JAVA/ 语言/ 编写/ ,/ JDK/ 版本/ 为/ 1.7/ ./ 0/ ./ 数据/ 集为/ UCI/ 提供/ 的/ 森林/ 覆盖/ 数据/ (/ 链接/ 地址/ :/ http/ :/ // // archive/ ./ ics/ ./ uci/ ./ edu/ // ml/ // )/ ,/ 共/ 包括/ 581012/ 条/ 数据/ ,/ 每条/ 数据/ 包括/ 10/ 维可/ 度量/ 属性/ ,/ 每维/ 属性/ 值/ 被/ 映射/ 在/ 0/ ~/ 100/ 的/ 范围/ 内/ ./ 实验/ 中/ 的/ 对比/ 算法/ 为/ PENL/ 算法/ [/ 4/ ]/ ,/ 主要/ 的/ 衡量标准/ 为/ 查询处理/ 时间/ 和/ 通信量/ (/ 以/ 网络/ 间/ 传输/ 的/ 数据/ 点/ 个数/ 来/ 度量/ )/ ./ 实验/ 中/ 并未/ 测量/ 2/ 个/ 算法/ 的/ 预处理/ 时间/ (/ 数据/ 划分/ ,/ 索引/ 的/ 建立/ )/ ,/ 主要/ 是因为/ 对于/ 一个/ 的/ 数据/ 集/ ,/ 预处理/ 只/ 需要/ 进行/ 一次/ ,/ 之后/ 对于/ 不同/ 的/ 查询/ 都/ 可以/ 重复使用/ ,/ 因此/ 这部分/ 的/ 时间/ 消耗/ 不/ 需要/ 计算/ ./ 表/ 3/ 描述/ 了/ 相关/ 的/ 实验/ 结果/ ./ 行号/ 1k/ =/ 5/ ,/ r/ =/ 1322624132k/ =/ 5/ ,/ r/ =/ 1421723053k/ =/ 5/ ,/ r/ =/ 1520422594k/ =/ 7/ ,/ r/ =/ 1521923125k/ =/ 9/ ,/ r/ =/ 152302395Page12/ 如表/ 3/ 所示/ ,/ 由于/ 本文/ 提出/ 的/ BOD/ 算法/ 采用/ 了/ BDSP/ 数据/ 划分算法/ 和/ 良好/ 的/ 索引/ 策略/ ,/ 可以/ 在/ 较/ 短时间/ 内/ 完成/ 离群/ 点/ 检测/ 任务/ ./ 在/ 网络通信/ 方面/ ,/ BOD/ 算法/ 仅仅/ 需要/ 传输/ 局部/ 的/ 非/ 确定/ 离群/ 点/ ,/ 大大/ 地/ 节省/ 了/ 网络/ 开销/ ./ 相比之下/ ,/ PENL/ 算法/ 采用/ 了/ 基于/ 数据量/ 的/ 划分/ 方法/ 和/ 较为简单/ 的/ Nested/ -/ Loop/ 算法/ ,/ 对于/ 任一/ 计算/ 节点/ 上/ 存储/ 的/ 数据/ 集/ ,/ 都/ 需要/ 与/ 所有/ 其他/ 节点/ 上/ 的/ 数据/ 集/ 进行/ 比较/ 才能/ 确定/ 最终/ 结果/ ,/ 需要/ 将/ 整个/ 数据/ 集在/ 网络/ 中/ 传输/ 多次/ ,/ 网络/ 开销/ 巨大/ ,/ 处理速度/ 也/ 较为/ 缓慢/ ./ 另一方面/ ,/ 通过/ 对比/ 表/ 3/ 中/ 1/ ~/ 3/ 行/ 的/ 实验/ 结果/ ,/ 容易/ 发现/ ,/ 随着/ 查询/ 半径/ r/ 的/ 增大/ ,/ 数据/ 集中/ 的/ 离群/ 点/ 个数/ 逐渐/ 减少/ ,/ BOD/ 算法/ 的/ 处理/ 时间/ 和/ 通信量/ 都/ 随之/ 轻微/ 减少/ ./ PENL/ 算法/ 在/ 处理/ 时间/ 方面/ 与/ BOD/ 算法/ 趋势/ 相同/ ,/ 但/ 通信量/ 维持/ 不变/ ./ 这/ 主要/ 是因为/ PENL/ 算法/ 需要/ 将/ 所有/ 计算/ 节点/ 上/ 的/ 数据/ 集/ 进行/ 两/ 两/ 比较/ ,/ 网络/ 传输/ 量/ 与/ 计算/ 节点/ 数目/ 和/ 数据/ 集/ 规模/ 有关/ ,/ 与/ 查询/ 无关/ ./ 通过/ 对比/ 3/ ~/ 5/ 行/ 发现/ ,/ 随着/ 查询/ 阈值/ k/ 的/ 增大/ ,/ 离群/ 点/ 个数/ 增多/ ,/ 导致/ BOD/ 算法/ 的/ 处理/ 时间/ 和/ 通信量/ 都/ 随之/ 轻微/ 增加/ ./ 但/ 无论/ 参数/ 如何/ 变化/ ,/ BOD/ 算法/ 相对/ 于/ PENL/ 算法/ 一直/ 保持/ 明显/ 优势/ ./ 6.2/ 人工合成/ 数据/ 的/ 测试/ 结果/ 由于/ 真实/ 数据/ 集/ 规模/ 有限/ ,/ 且/ 无法/ 变化/ 数据/ 维度/ 等/ 参数/ ,/ 因此/ 本/ 小节/ 使用/ 人工合成/ 数据/ 进一步/ 地/ 对/ 算法/ 性能/ 进行/ 测试/ ./ 在/ 6.2/ ./ 1/ 节中/ ,/ 首先/ 验证/ 了/ 本文/ 提出/ 的/ BOD/ 算法/ -/ 局部/ 部分/ (/ 即/ 算法/ 3/ )/ 在/ 集中式/ 环境/ 下/ 计算/ 离群/ 点/ 的/ 性能/ ,/ 并/ 与/ 传统/ 集中式/ 的/ 离群/ 点/ 检测/ 算法/ [/ 3/ ]/ 进行/ 对比/ ./ 接下来/ 在/ 6.2/ ./ 2/ 节中/ ,/ 在/ 分布式/ 环境/ 下/ 对比/ 了/ BOD/ 算法/ 与/ PENL/ 算法/ 的/ 性能/ ./ 所/ 使用/ 的/ 合成/ 数据/ 集为/ 聚簇/ 分布/ 数据/ ,/ 各维/ 的/ 取值/ 范围/ 为/ 0/ ~/ 10000/ ./ 具体/ 生成/ 方法/ 如下/ :/ 对于/ 包含/ 图/ 8/ 集中式/ 算法/ 中/ k/ 的/ 影响/ 在/ 图/ 9/ 中/ 分别/ 使用/ 维度/ 为/ 3/ 、/ 5/ 的/ 数据/ 集/ ,/ 测试/ 了/ r/ 值/ 对于/ 两种/ 算法/ 的/ 查询处理/ 时间/ 以及/ 访问/ R/ 树/ 节点/ 的/ 次数/ 的/ 影响/ ,/ 数据/ 集/ 规模/ 为/ 5/ ×/ 106/ ./ 在/ 图/ 9/ α/ 个/ 数据/ 点/ 的/ 数据/ 集/ ,/ 随机/ 生成/ α/ // 1000/ 个/ 聚/ 簇点/ ,/ 每个/ 聚簇/ 内/ 平均/ 包含/ 1000/ 个/ 数据/ 点/ ./ 在/ 每个/ 聚簇/ 内/ ,/ 数据/ 点以/ 聚/ 簇点/ 为/ 中心/ 呈/ 高斯分布/ ./ 实验/ 相关/ 变量/ 的/ 默认值/ 和/ 变化/ 范围/ 如表/ 4/ 所示/ ./ 参数/ 集群/ 规模/ 数据量/ 数据/ 维度/ 6.2/ ./ 1/ 集中式/ 算法/ 性能/ 对比/ 在/ 传统/ 的/ 基于/ R/ 树/ 索引/ 的/ 集中式/ 离群/ 点/ 检测/ 算法/ [/ 3/ ]/ 中/ (/ 实验/ 中/ 简称/ TRAD/ )/ ,/ 对于/ 每/ 一个/ 数据/ 点/ p/ 都/ 需要/ 对/ 索引/ 进行/ 以/ r/ 为/ 半径/ 的/ 范围/ 查询/ ,/ 造成/ 对/ R/ 树/ 节点/ 的/ 频繁/ 访问/ ,/ 导致/ 大量/ 的/ 磁盘/ IO/ ./ 而/ 在/ 本文/ 的/ 算法/ 3/ 中/ (/ 实验/ 中/ 简称/ LOD/ )/ ,/ 首先/ 通过/ 批量/ 过滤/ ,/ 大幅/ 减少/ 了/ 需要/ 进行/ 范围/ 查找/ 的/ 数据/ 点/ 数目/ ./ 然后/ 以/ 批量/ 查询/ 的/ 方式/ 代替/ 了/ 传统/ 的/ 逐个/ 查询/ ,/ 显著/ 地/ 降低/ 了/ 磁盘/ IO/ 次数/ 并/ 提高/ 了/ 算法/ 性能/ ./ 本/ 小节/ 针对/ 集中式/ 环境/ ,/ 详细/ 对比/ 了/ 本文/ 算法/ LOD/ 与/ 传统/ 算法/ TRAD/ 的/ 性能/ ./ 在/ 图/ 8/ 中/ ,/ 分别/ 使用/ 规模/ 为/ 2.5/ ×/ 106/ 、/ 5/ ×/ 106/ 的/ 数据/ 集/ ,/ 测试/ 了/ k/ 值/ 对于/ 两种/ 算法/ 的/ 查询处理/ 时间/ 以及/ 访问/ R/ 树/ 节点/ 的/ 次数/ 的/ 影响/ ./ 在/ 图/ 8/ (/ a/ )/ 中/ ,/ 随着/ k/ 的/ 增大/ ,/ 离群/ 点/ 数目/ 增多/ ,/ 两种/ 算法/ 的/ 处理/ 时间/ 都/ 随之/ 增加/ ,/ 但/ LOD/ 的/ 处理速度/ 明显/ 优于/ TRAD/ 算法/ ./ 此外/ ,/ 当/ 数据/ 集/ 规模/ 增大/ 时/ ,/ 两种/ 算法/ 的/ 处理/ 时间/ 也/ 都/ 随之/ 增加/ ./ 在/ 图/ 8/ (/ b/ )/ 中/ ,/ 随着/ k/ 的/ 增加/ ,/ 两种/ 算法/ 访问/ R/ 树/ 节点/ 的/ 数目/ 都/ 随之/ 增加/ ./ 但是/ LOD/ 采用/ 批量/ 处理/ 的/ 方式/ ,/ 相对/ 于/ TRAD/ 大幅/ 减少/ 了/ R/ 树/ 节点/ 的/ 访问/ 次数/ ,/ 这/ 也/ 是/ 本文/ 算法/ 处理速度/ 更快/ 的/ 主要/ 原因/ ./ (/ a/ )/ 中/ ,/ 随着/ r/ 的/ 增大/ ,/ 对/ R/ 树/ 进行/ 检索/ 时/ 的/ 搜索/ 范围/ 变/ 大/ ,/ 因此/ TRAD/ 的/ 处理/ 时间/ 轻微/ 增加/ ./ 而/ 对于/ LOD/ 算法/ ,/ 由于/ r/ 值/ 增加/ ,/ 同时/ 导致/ 了/ 使用/ 定理/ 2Page13/ 过滤/ 掉/ 的/ MBR/ 数目/ 更/ 多/ ,/ 因此/ 需要/ 进行/ 范围/ 查找/ 的/ 数据/ 点/ 个数/ 减少/ ,/ 因此/ 整体/ 的/ 处理/ 时间/ 无/ 明显/ 变化/ ./ 此外/ ,/ 当/ 维度/ 增大/ 时/ ,/ 两种/ 算法/ 的/ 处理/ 时间/ 也/ 都/ 随之/ 增加/ ./ 在/ 图/ 9/ (/ b/ )/ 中/ ,/ 随着/ r/ 的/ 增加/ ,/ LOD/ 图/ 9/ 集中式/ 算法/ 中/ r/ 的/ 影响/ 6.2/ ./ 2/ 分布式/ 算法/ 性能/ 对比/ 本/ 小节/ 主要/ 在/ 分布式/ 环境/ 下/ 对比/ 了/ BOD/ 算法/ 与/ PENL/ 算法/ 的/ 性能/ ./ 图/ 10/ 描述/ 了/ 集群/ 规模/ 对/ 算法/ 性能/ 的/ 影响/ ./ 可以/ 看出/ 随着/ 集群/ 规模/ 的/ 扩大/ ,/ 集群/ 的/ 计算能力/ 提高/ ,/ BOD/ 和/ PENL/ 算法/ 的/ 处理/ 时间/ 都/ 随之/ 减少/ ,/ 说明/ 两种/ 算法/ 都/ 具有/ 良好/ 的/ 性能/ 加速/ 比/ ./ 另外/ 在/ 图/ 10/ (/ b/ )/ ,/ 节点/ 个数/ 的/ 增加/ 也/ 导致/ 了/ 局部/ 不/ 确定/ 离群/ 点/ 增多/ ,/ 因此/ BOD/ 算法/ 的/ 通信量/ 轻微/ 增加/ ./ 而/ 对于/ PENL/ 算法/ ,/ 更/ 多/ 的/ 计算/ 节点/ 意味着/ 每图/ 10/ 集群/ 规模/ 的/ 影响/ 图/ 11/ 数据量/ 的/ 影响/ 在/ 图/ 12/ (/ a/ )/ 中/ ,/ 测试/ 了/ 数据/ 维度/ 对/ 处理/ 时间/ 的/ 影响/ ./ 随着/ 维度/ 的/ 增加/ ,/ 计算/ 两点/ 距离/ 、/ 索引/ 查找/ 等/ 操作/ 都/ 更加/ 耗时/ ,/ 因此/ BOD/ 和/ PENL/ 算法/ 的/ 处理/ 时间/ 都/ 明显增加/ ./ 通过观察/ 图/ 12/ (/ b/ )/ 发现/ ,/ BOD/ 算/ 访问/ 的/ R/ 树/ 节点/ 数目/ 无/ 明显/ 变化/ ,/ TRAD/ 的/ 访问/ 节点/ 数目/ 增加/ ,/ 所/ 反映/ 的/ 趋势/ 与/ 图/ 9/ (/ a/ )/ 相同/ ./ 当/ 变化/ 数据/ 维度/ 时/ ,/ 两种/ 算法/ 访问/ 节点/ 的/ 数目/ 无/ 明显/ 变化/ ./ 个/ 计算/ 节点/ 本地/ 存储/ 的/ 数据/ 更/ 少/ ,/ 因此/ 网络/ 传输/ 量/ 也/ 随之/ 轻微/ 增加/ ./ 图/ 11/ 描述/ 了/ 数据量/ 对/ 算法/ 性能/ 的/ 影响/ ./ 随着/ 数据量/ 的/ 增加/ ,/ BOD/ 和/ PENL/ 算法/ 都/ 需要/ 消耗/ 更/ 多/ 的/ 系统/ 时间/ ,/ 也/ 会/ 产生/ 更/ 多/ 的/ 网络/ 开销/ ./ 但/ 通过/ 对比/ 容易/ 发现/ ,/ BOD/ 算法/ 的/ 处理/ 时间/ 明显/ 低于/ PENL/ 算法/ ,/ 且/ 增长/ 得/ 较为/ 缓慢/ ./ 而/ PENL/ 算法/ 的/ 处理/ 时间/ 的/ 增长/ 趋势/ 明显/ 较快/ ./ 这/ 也/ 进一步/ 说明/ 了/ 在/ 处理/ 大规模/ 数据/ 时/ BOD/ 算法/ 的/ 优势/ ./ 法/ 的/ 通信量/ 对/ 数据/ 维度/ 的/ 变化/ 并/ 不/ 敏感/ ,/ 变化/ 十分/ 轻微/ ./ PENL/ 算法/ 的/ 通信量/ 仅/ 与/ 计算/ 节点/ 数目/ 和/ 数据/ 集/ 规模/ 有关/ ,/ 因此/ 当/ 变化/ 维度/ 时/ ,/ 传输/ 量/ 不变/ ./ 当/ 变化/ k/ ,/ r/ 值时/ 亦然/ (/ 图/ 13/ (/ b/ )/ 和/ 图/ 14/ (/ b/ )/ )/ ,/ 具体/ 原因/ Page14/ 已/ 在/ 6.1/ 节中/ 阐述/ ./ 容易/ 发现/ ,/ 与/ 许多/ 相关/ 研究/ [/ 3/ ,/ 8/ ]/ 类似/ ,/ 本文/ 的/ BOD/ 算法/ 性能/ 受/ 维度/ 影响/ 较为/ 明显/ ,/ 存在/ 一定/ 的/ 局限性/ ./ 因此/ 算法/ 较为/ 适合/ 处理/ 多维/ 数据/ (/ 维度/ 一般/ 不/ 超过/ 10/ )/ ,/ 但/ 无法/ 很/ 好/ 地面/ 对/ 高维/ 数据/ (/ 几十/ 维/ 甚至/ 上百/ 维/ )/ ./ 这/ 主要/ 是因为/ 算法/ 使用/ 了/ R/ 树/ 索引/ 结构/ ,/ 当/ 维度/ 较/ 高时/ ,/ MBR/ 之间/ 重叠/ 部分/ 增多/ ,/ 导致/ 查询/ 效率/ 明显降低/ ./ 实际上/ ,/ 在/ 处理/ 高维/ 数据/ 时/ ,/ 绝/ 大部/ 图/ 12/ 维度/ 的/ 影响/ 图/ 13/ 分布式/ 算法/ 中/ k/ 的/ 影响/ 图/ 14/ 分布式/ 算法/ 中/ r/ 的/ 影响/ 图/ 15/ 分布式/ 算法/ 中/ r/ 、/ k/ 的/ 综合/ 影响/ 分/ 空间/ 索引/ 的/ 存储空间/ 都/ 很/ 庞大/ ,/ 查询/ 效率/ 也/ 不是/ 很/ 理想/ ,/ 可以/ 考虑/ 在/ 预处理/ 阶段/ 使用/ 文献/ [/ 19/ ]/ 中/ 提供/ 的/ 方法/ 将/ 数据/ 降维/ ,/ 以/ 提高/ 计算/ 效率/ ./ 接下来/ ,/ 图/ 13/ ~/ 图/ 15/ 测试/ 了/ 不同/ 查询/ 参数/ 对/ 算法/ 性能/ 的/ 影响/ ./ 在/ 处理/ 时间/ 方面/ :/ 随着/ 阈值/ k/ 的/ 增加/ ,/ 更/ 多/ 的/ 数据/ 点/ 成为/ 离群/ 点/ ,/ 因此/ 两种/ 算法/ 的/ 处理/ 时间/ 也/ 随之/ 增加/ ./ 随着/ 半径/ r/ 的/ 增加/ ,/ 更少/ 的/ 数据/ 点/ 成为/ 离群/ 点/ ,/ 处理/ 时间/ 轻微/ 减少/ ./ 在/ 传输/ 量/ 方面/ :/ Page15PENL/ 算法/ 的/ 传输/ 量/ 并/ 不受/ k/ ,/ r/ 值/ 的/ 影响/ ./ 对于/ BOD/ 算法/ ,/ k/ 的/ 增加/ 会/ 导致/ 更/ 多/ 的/ 非/ 确定/ 离群/ 点/ ,/ 因此/ 传输/ 量/ 增加/ ,/ 而/ 半径/ r/ 的/ 增加/ 会/ 降低/ 非/ 确定/ 离群/ 点/ 的/ 数目/ ,/ 因此/ 传输/ 量/ 轻微/ 减少/ ./ 通过/ 上述/ 多种不同/ 的/ 实验/ 测试/ ,/ 验证/ 了/ 本文/ 的/ 提出/ 的/ BOD/ 算法/ 的/ 优秀/ 性能/ ./ BOD/ 算法/ 与/ 现有/ 的/ PENL/ 算法/ 相比/ ,/ 具有/ 明显/ 优势/ ./ 7/ 结论/ 本文/ 研究/ 了/ 分布式/ 环境/ 下/ 的/ 离群/ 点/ 检测/ 问题/ ./ 首先/ ,/ 提出/ 了/ 一种/ 新型/ 的/ 基于/ 空间/ 的/ 数据/ 划分算法/ :/ BDSP/ ./ 该/ 算法/ 可以/ 平均化/ 每个/ 节点/ 上/ 的/ 工作/ 负载/ 并/ 具备/ 良好/ 的/ 过滤/ 效果/ ./ 然后/ ,/ 为/ BSDP/ 划分/ 得到/ 的/ 块/ 设计/ 了/ 一种/ 全新/ 的/ 块/ 编码/ 规则/ ,/ 利用/ 该/ 规则/ 可以/ 快速/ 地/ 确定/ 块/ 与/ 块/ 之间/ 的/ 相邻/ 关系/ ,/ 节省/ 网络/ 开销/ ./ 接着/ ,/ 基于/ BDSP/ 划分算法/ ,/ 提出/ 了/ BOD/ 算法/ ,/ 该/ 算法/ 包括/ 2/ 个/ 步骤/ :/ 在/ 每个/ 计算/ 节点/ 本地/ ,/ 该/ 算法/ 使用/ R/ 树/ 索引/ 进行/ 批量/ 过滤/ ,/ 快速/ 地/ 计算/ 出/ 本地/ 离群/ 点/ 并/ 得到/ 候选/ 集/ ;/ 进一步/ 地/ ,/ 使用/ BDSP/ 中/ 提供/ 的/ 块/ 编码/ 规则/ ,/ 确定/ 需要/ 通信/ 的/ 相邻/ 块/ ,/ 并/ 计算/ 出/ 最终/ 结果/ ./ 最后/ 通过/ 大量/ 实验/ 说明/ 了/ 本文/ 所/ 提出/ 的/ BDSP/ 和/ BOD/ 算法/ 的/ 正确性/ 和/ 有效性/ ./ 

