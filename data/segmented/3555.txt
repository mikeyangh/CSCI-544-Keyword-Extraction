Page1/ 一种/ 基于/ 执行力/ 模型/ 的/ 服务平台/ 自主/ 控制/ 方法/ 顾军/ 1/ )/ ,/ 2/ )/ 罗军舟/ 1/ )/ 曹玖新/ 1/ )/ 李伟/ 1/ )/ 1/ )/ (/ 东南大学/ 计算机科学/ 与/ 工程学院/ 南京/ 211189/ )/ 2/ )/ (/ 中国矿业大学/ 计算机科学/ 与/ 技术/ 学院/ 江苏/ 徐州/ 221116/ )/ 摘要/ 开放/ 的/ 分布式服务/ 平台/ 倾向/ 于/ 涵盖/ 更/ 丰富/ 的/ 管理/ 功能/ ,/ 支持/ 更强/ 的/ 分散/ 交互性/ ,/ 从而/ 导致/ 软件/ 管理/ 和/ 维护/ 的/ 难度/ 和/ 成本/ 问题/ 日益突出/ ./ 为此/ ,/ 引入/ 一种/ 自/ 管理/ 的/ 服务平台/ 体系结构/ 参考模型/ ,/ 以/ 构件/ 作为/ 功能/ 实现/ 载体/ ,/ 服务/ 作为/ 功能/ 组织/ 手段/ ,/ 交互/ 作为/ 功能/ 扩展/ 方式/ ./ 提出/ 了/ 一种/ 基于/ 分层/ 反馈/ 的/ 自主/ 控制/ 架构/ ,/ 以/ 服务/ 构件/ 及/ 相互之间/ 的/ 交互/ 关系/ 为/ 控制/ 对象/ ,/ 执行力/ 模型/ 为/ 决策/ 基础/ ./ 在/ 管理/ 服务/ 的/ 可用性/ 和/ 性能/ 建模/ 中/ 运用/ 了/ 马尔可夫/ 过程/ 、/ 随机/ Petri/ 网/ 和/ 排队/ 网/ 模型/ 理论/ ,/ 并/ 考虑/ 了/ 链路/ 和/ 节点/ 的/ 失效/ 修复/ 机制/ ./ 仿真/ 结果表明/ ,/ 基于/ 排队/ Petri/ 网/ 的/ 执行力/ 模型/ 能够/ 反映/ 失效率/ 和/ 修复/ 时间/ 对/ 服务平台/ 性能/ 和/ 可用性/ 的/ 影响/ ,/ 并/ 验证/ 了/ 自主/ 控制/ 方法/ 对/ 提高/ 服务平台/ 有效性/ 的/ 积极/ 作用/ ./ 关键词/ 服务平台/ ;/ 自主/ 控制/ ;/ 执行力/ ;/ 服务/ 构件/ ;/ 交互/ ;/ 排队/ Petri/ 网/ 1/ 引言/ 在/ 面向/ 服务/ 的/ 分布式系统/ 架构/ 中/ ,/ 服务/ 以/ 可/ 共享/ 与/ 可/ 集成/ 的/ 资源/ 为/ 基础/ 来/ 构建/ ,/ 通常/ 表现/ 为/ 一个/ 独立/ 的/ 业务/ 功能/ ./ 相比/ 于/ 对象/ 、/ 构件/ 等/ 早期/ 形式/ ,/ 服务/ 具有/ 更大/ 的/ 粒度/ 、/ 更强/ 的/ 独立性/ 和/ 更/ 松散/ 的/ 耦合/ 性/ ,/ 从而/ 为/ 形成/ 灵活/ 、/ 动态/ 的/ 服务/ 组合/ 带来/ 了/ 方便/ [/ 1/ ]/ ./ 由/ 全球/ 网格/ 论坛/ GGF/ 提出/ 的/ 开放/ 网格/ 服务/ 架构/ OGSA/ (/ OpenGridServicesArchitecture/ )/ [/ 2/ ]/ 采用/ 服务/ 作为/ 资源/ 封装/ 和/ 互操作/ 的/ 统一/ 形式/ ,/ 通过/ 定义/ 基于/ OGSI/ // WSRF/ 的/ 标准/ 框架/ 协议/ 实现/ 面向/ 服务/ 的/ 开放/ 网格/ 系统/ ./ 在/ 这样/ 的/ 系统/ 中/ ,/ 高层/ 商业/ 目标/ 、/ 内部/ 组织/ 规模/ 和/ 外部/ 运行/ 环境/ 均会/ 不断/ 变化/ ,/ 因此/ 客观/ 上/ 要求/ 面向/ 服务/ 的/ 系统/ 平台/ 具有/ 动态/ 适应能力/ ,/ 能够/ 感知/ 环境/ 和/ 用户/ 需求/ 的/ 变化/ ,/ 并/ 根据/ 这些/ 变化/ 调整/ 自身/ 的/ 结构/ 和/ 行为/ ,/ 以/ 实现/ 特定/ 的/ 目标/ ,/ 包括/ 资源/ 的/ 动态/ 配置/ 、/ 服务/ 的/ 动态/ 合成/ 、/ 系统/ 参数/ 的/ 动态/ 校正/ 、/ 软硬件/ 故障/ 的/ 动态/ 修复/ 等/ ./ 如果/ 单靠/ IT/ 专家/ 和/ 技术人员/ 依据/ 系统/ 状态/ 和/ 高层/ 的/ 管理策略/ 直接/ 对系统/ 进行/ 干预/ 和/ 处理/ ,/ 不但/ 反应/ 慢/ 、/ 效率/ 低/ ,/ 而且/ 成本/ 也/ 高/ [/ 3/ ]/ ./ 如何/ 使/ 服务平台/ 能够/ 根据/ 管理者/ 的/ 要求/ 实现/ 自我管理/ 已经/ 成为/ 亟待解决/ 的/ 重要/ 问题/ 之一/ [/ 4/ ]/ ./ 在/ 本文/ 的/ 前期工作/ 中/ ,/ 面向/ 服务/ 的/ 网格/ 平台/ 被/ 看作/ 是/ 应用/ 管理/ 、/ 执行/ 管理/ 、/ 安全/ 管理/ 、/ 资源管理/ 、/ 数据管理/ 、/ 信息/ 服务/ 等/ 多种/ 管理/ 功能/ 软件/ 实体/ 的/ 集合/ ,/ 它们/ 之间/ 通过/ 分布式/ 的/ 交互/ 和/ 协作/ 共同完成/ 全局/ 的/ 管理/ 任务/ 和/ 目标/ [/ 5/ ]/ ./ 所有/ 管理/ 功能/ 都/ 设计/ 成/ 服务/ 构件/ (/ servicecomponent/ )/ 形式/ ,/ 以/ 构件/ 作为/ 功能/ 实现/ 载体/ ,/ 以/ 服务/ 作为/ 功能/ 组织/ 手段/ ,/ 随同/ 实现/ 服务/ 的/ 构件/ 一起/ 部署/ ./ 服务/ 构件/ 可以/ 是/ 多/ 种子/ 服务/ 构件/ 的/ 组合体/ ,/ 支持/ 需求/ 驱动/ 的/ 服务/ 构件/ 的/ 选择/ 、/ 匹配/ 、/ 组装/ 和/ 协同/ ,/ 从而/ 为/ 管理者/ 和/ 使用者/ 提供/ 高效/ 、/ 灵活/ 的/ 管理/ 服务/ 定制/ 功能/ ./ 这样/ 的/ 设计/ 提升/ 了/ 服务平台/ 的/ 可管理性/ ,/ 包括/ 状态/ 可/ 观测/ 和/ 状态/ 可/ 调整/ ,/ 前者/ 支持/ 监测/ 度量/ ,/ 后者/ 支持/ 控制/ 执行/ ./ 然而/ ,/ 究竟/ 采用/ 什么/ 方法/ 对/ 服务平台/ 的/ 自/ 管理/ 行为/ 进行/ 控制/ 需要/ 进一步/ 研究/ ./ 文献/ [/ 3/ ]/ 将/ 现有/ 的/ 自/ 管理/ 技术/ 方法/ 归纳/ 为/ 两种/ 基本/ 类型/ :/ 知识/ 模型/ 方法/ 和/ 数学模型/ 方法/ ./ 知识/ 模型/ 方法/ 运用/ 人工智能/ 或/ 知识/ 工程/ 的/ 方法/ 和/ 技术/ 所/ 建立/ 的/ 知识/ 模型/ ,/ 在/ 知识库/ 中/ 建立/ 状态/ 判定/ 、/ 策略/ 和/ 问题/ 求解/ 等/ 3/ 类/ 知识/ ,/ 通过/ 基于/ 知识/ 分析/ 和/ 逻辑推理/ 进行/ 决策/ ./ 该/ 方法/ 只能/ 进行/ 定性分析/ 和/ 逻辑推理/ ,/ 不/ 适合/ 那些/ 需要/ 定量/ 描述/ 系统/ 的/ 有关/ 过程/ 和/ 特性/ 的/ 场合/ ,/ 如/ 对系统/ 响应速度/ 、/ 吞吐量/ 、/ CPU/ 和/ 存储器/ 的/ 利用率/ 等/ 系统/ 性能/ 的/ 管理/ ./ 数学模型/ 方法/ 一般/ 运用/ 控制论/ 或/ 运筹学/ 的/ 理论/ 和/ 方法/ 来/ 建立/ ,/ 能够/ 依据/ 不断/ 改变/ 的/ 资源/ 和/ 环境/ 状态/ 自主/ 决定/ 系统/ 参数/ 的/ 调整/ ,/ 使得/ 系统/ 性能/ 保持/ 在/ 期望/ 的/ 范围/ 内/ ./ 对于/ 网格/ 计算/ 和/ 云/ 计算/ 这种/ 大规模/ 、/ 跨多/ 管理/ 域/ 的/ 虚拟/ 计算环境/ ,/ 资源/ 故障/ 和/ 构件/ 失效/ 的/ 情况/ 相当/ 普遍/ ,/ 需要/ 综合/ 考虑/ 系统/ 的/ 可用性/ 和/ 性能/ ,/ 即/ 执行力/ (/ performability/ )/ [/ 6/ ]/ ./ 执行力/ 可以/ 看作/ 是/ 对系统/ 在/ 给定/ 时间/ 间隔/ 内/ 获得/ 和/ 维护/ 满意/ 的/ 性能/ 级别/ 能力/ 的/ 量化/ ,/ 在/ 此/ 过程/ 中/ 需要/ 考虑/ 系统结构/ 和/ 环境/ 的/ 改变/ ./ 以/ 执行力/ 模型/ 作为/ 自主/ 控制/ 的/ 决策/ 基础/ ,/ 有助于/ 把握/ 服务平台/ 的/ 内部结构/ 和/ 外部环境/ 的/ 不/ 确定/ 特性/ ,/ 并/ 保持/ 服务平台/ 运行/ 的/ 高性能/ ./ 因此/ ,/ 本文/ 以/ 面向/ Internet/ 的/ 开放/ 、/ 动态/ 、/ 难控/ 的/ 网络/ 环境/ 为/ 基本/ 驱动力/ ,/ 以/ 实现/ 服务平台/ 软件维护/ 和/ 管理/ 的/ 自主性/ 为/ 目标/ ,/ 研究/ 一种/ 基于/ 执行力/ 模型/ 的/ 服务平台/ 自主/ 控制/ 方法/ ./ 该/ 方法/ 能够/ 有效/ 降低/ 服务平台/ 中间件/ 的/ 复杂性/ ,/ 主要/ 体现/ 在/ 以下/ 三/ 方面/ :/ (/ 1/ )/ 软件/ 实体/ 的/ 服务化/ 和/ 构件/ 化/ 提升/ 了/ 中间件/ 的/ 轻量化/ 水平/ ;/ (/ 2/ )/ 自主/ 控制/ 实现/ 框架/ 的/ 建立/ 使得/ 中间件/ 能够/ 按照/ 管理/ 需求/ 和/ 运行/ 环境/ 的/ 变化/ 进行/ 动态/ 调整/ 和/ 演化/ ,/ 使/ 系统/ 具有/ 尽可能/ 高/ 的/ 用户/ 满意度/ ;/ (/ 3/ )/ 综合/ 考虑/ 可用性/ 和/ 性能/ 的/ 执行力/ 模型/ 有利于/ 全面/ 预测/ 和/ 评估/ 中间件/ 的/ 执行/ 状态/ ,/ 提高/ 触发/ 自主/ 控制/ 机制/ 实施/ 的/ 准确度/ 和/ 时效性/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 工作/ ;/ 第/ 3/ 节/ 提出/ 一种/ 自/ 管理/ 的/ 服务平台/ 体系结构/ 参考模型/ ,/ 介绍/ 服务/ 构件/ 的/ 交互/ 关系/ ;/ 第/ 4/ 节/ 阐述/ 基于/ 执行力/ 模型/ 的/ 服务平台/ 自主/ 控制/ 方法/ ,/ 介绍/ 基于/ 分层/ 反馈/ 控制/ 的/ 实现/ 框架/ ,/ 重点/ 研究/ 服务/ 构件/ 和/ 管理/ 服务/ 的/ 执行力/ 建模/ 方法/ ;/ 第/ 5/ 节/ 给出/ 实验/ 和/ 数据分析/ ;/ 第/ 6/ 节/ 总结/ 全文/ 并/ 展望/ 下/ 一步/ 的/ 工作/ ./ 2/ 相关/ 工作/ 自主/ 计算/ 由/ IBM/ 公司/ 在/ 2001/ 年/ 发起/ [/ 7/ ]/ ,/ 旨在/ Page3/ 参照/ 自主/ 神经系统/ 的/ 自我调节/ 机制/ ,/ 以/ 现有/ 理论/ 和/ 技术/ 为/ 基础/ 构建/ 自主/ 计算/ 系统/ ,/ 使得/ 信息系统/ 整体/ 上/ 实现/ 自我管理/ ./ Kephart/ 等/ 人/ [/ 8/ ]/ 于/ 2003/ 年/ 提出/ MAPE/ (/ 监视/ -/ 分析/ -/ 规划/ -/ 执行/ )/ 控制/ 环/ 机制/ ,/ 在/ 2004/ 年/ 提出/ 由/ 动作/ 策略/ 、/ 目标/ 策略/ 和/ 效用函数/ 策略/ 组成/ 的/ 统一/ 框架/ [/ 9/ ]/ ;/ Kephart/ [/ 10/ ]/ 还/ 以/ 效用函数/ 策略/ 作为/ 反映/ 高层/ 目标/ 的/ 手段/ ,/ 建立/ 了/ 一种/ 用于/ 原型/ 数据中心/ 的/ 资源/ 自主/ 管理/ 和/ 分配/ 模型/ ./ Hinchey/ 等/ 人/ [/ 11/ ]/ 在/ 自主/ 计算/ 的/ 基础/ 上/ 提出/ 了/ 自我/ 管理软件/ 的/ 概念/ ,/ 提供/ 了/ 一个/ 软件开发/ 和/ 演化/ 的/ 整体观/ ,/ 有望/ 把/ 系统/ 的/ 自动化/ 、/ 自治/ 和/ 可靠性/ 带到/ 一个/ 新/ 的/ 水平/ ./ 自主/ 计算/ 思想/ 已经/ 在/ 学术/ 和/ 工业界/ 得到/ 了/ 广泛应用/ ./ 文献/ [/ 12/ ]/ 在/ 面向/ 网格/ 的/ ASSIST/ 编程/ 环境/ 中/ 实现/ 了/ 一个/ 具有/ QoS/ 控制能力/ 的/ 自主/ 应用/ 管理者/ 原型/ ;/ 文献/ [/ 13/ ]/ 提出/ 通过/ 对/ 网格/ 构件/ 模型/ (/ GridComponentModel/ )/ 的/ 行为/ 骨架/ (/ BehaviouralSkele/ -/ tons/ )/ 实现/ 网格/ 构件/ 的/ 自主/ 管理/ ;/ AutoMate/ 项目/ 针对/ 网格/ 环境/ 中/ 存在/ 的/ 复杂性/ 、/ 动态性/ 、/ 异构/ 性/ 和/ 不确定性/ 等/ 挑战/ ,/ 给出/ 了/ 一种/ 自主/ 系统/ 的/ 概念模型/ 和/ 实现/ 体系/ ,/ 开发/ 了/ 一个/ 能够/ 根据/ 高级/ 任务/ 的/ 目标/ 和/ 约束/ 动态/ 使用/ 基本/ 网格/ 服务/ 的/ 自主/ 组合/ 引擎/ [/ 14/ -/ 15/ ]/ ;/ AutoGrid/ 项目/ [/ 16/ ]/ 致力于/ 在/ Integrade/ 网格/ 基础设施/ 之上/ 增加/ 自/ 管理/ 能力/ ,/ 减少/ 人/ 对/ 系统配置/ 和/ 管理/ 的/ 干涉/ ;/ 文献/ [/ 17/ ]/ 将/ 构件/ 模型/ 与/ 结构化/ 覆盖网/ (/ structuredoverlaynetworks/ )/ 相结合/ ,/ 提供/ 大规模/ 分布式应用/ 的/ 自/ 管理/ 能力/ ;/ 文献/ [/ 18/ ]/ 提出/ 网格/ 单元/ (/ gridunit/ )/ 概念/ ,/ 通过/ 代理/ 技术/ 构建/ 自/ 管理/ 框架/ ./ OptimalGrid/ 项目/ 研究/ 如何/ 简化/ 大规模/ 平行/ 网格/ 应用/ 的/ 创建/ 和/ 管理/ [/ 19/ ]/ ./ 文献/ [/ 20/ ]/ 提出/ 把/ 自主/ 计算/ 、/ 网格/ 计算/ 和/ 虚拟化/ 技术/ 结合/ 起来/ ,/ 建立/ 自主/ 的/ 商务网/ 格/ 的/ 思想/ ./ 这些/ 研究/ 虽然/ 提高/ 了/ 网格/ 系统/ 面向/ 应用/ 的/ 自/ 管理/ 能力/ ,/ 但/ 并/ 没有/ 考虑/ 网格/ 中间件/ 本身/ 的/ 可管理性/ 和/ 可/ 重用/ 性/ 问题/ ,/ 易/ 导致/ 更/ 高/ 的/ 系统/ 复杂性/ ./ 研究/ 人员/ 在/ 系统/ 的/ 可/ 运行/ 性/ 建模/ 和/ 分析/ 方面/ 已经/ 开展/ 了/ 许多/ 工作/ [/ 21/ ]/ ./ 分析/ 性/ 数学模型/ 可/ 分为/ 确定/ 模型/ 和/ 随机/ 模型/ 等/ [/ 22/ ]/ ./ 排队模型/ 是/ 一种/ 确定性/ 的/ 数学模型/ ,/ 是/ 很/ 好/ 的/ 网络/ 建模/ 工具/ ./ 随机/ 模型/ 是/ 以/ 随机/ 过程/ 为/ 基础/ ,/ 主要/ 包括/ 马尔可夫/ 回报/ 模型/ 、/ 随机/ 进程/ 代数/ 以及/ 随机/ Petri/ 网等/ ,/ 这些/ 基于/ 状态/ 的/ 随机/ 方法/ 更/ 容易/ 对系统/ 状态/ 进行/ 全面/ 有效/ 的/ 描述/ ,/ 精确/ 刻画/ 系统/ 随机/ 行为/ 以及/ 组成/ 部件/ 之间/ 的/ 相互/ 关系/ ,/ 便于/ 计算/ 各种/ 分析/ 指标/ ./ Ranami/ 和/ Trivedi/ 等/ 人/ [/ 23/ -/ 24/ ]/ 经过/ 对/ CORBA/ 事件/ 服务/ 和/ 通知/ 服务/ 的/ 性能/ 分析/ ,/ 给出/ 了/ 分布/ 消息/ 服务/ 的/ 一种/ 可/ 运行/ 性/ 建模/ 框架/ [/ 25/ ]/ ,/ 进一步/ 研究/ 了/ 对/ 实时/ 系统/ 响应/ 时间/ 分布/ 建模/ 的/ 技术/ [/ 26/ ]/ ./ 刘/ 显明/ 等/ 人/ [/ 27/ ]/ 考虑/ 了/ 网格/ 环境/ 和/ 监控/ 信息/ 的/ 特点/ ,/ 使用/ 随机/ Petri/ 网/ 建立/ 网格/ 监控/ 体系结构/ 的/ 可/ 运行/ 性/ 模型/ ,/ 并/ 讨论/ 了/ 系统/ 可用性/ 、/ 响应/ 时间/ 分布/ 、/ 事件/ 丢失/ 概率/ 、/ 公平性/ 等/ 问题/ ./ Das/ 等/ 人/ [/ 28/ -/ 29/ ]/ 使用/ 分层/ 排队/ 网对/ 多层/ 服务/ 系统/ 的/ 可/ 运行/ 性/ 进行/ 了/ 建模/ ,/ 并/ 给出/ 了/ 基于/ 马尔可夫/ 链/ 的/ 分析方法/ ./ Qu/ 等/ 人/ [/ 30/ ]/ 采用/ 随机/ 回报/ 网/ (/ StochasticRewardNets/ ,/ SRN/ )/ 对/ 计算/ 网格/ 的/ 分层/ 资源/ 调度/ 算法/ 的/ 可/ 运行/ 性/ 进行/ 了/ 评价/ ./ 基于/ SOA/ 的/ 分布式系统/ 采用/ 松/ 耦合/ 和/ 重组/ 装/ 的/ 开发/ 模式/ ,/ 随着/ 组合/ 服务/ 的/ 规模/ 增大/ ,/ 基于/ 随机/ 回报/ 网/ 的/ 可/ 运行/ 性/ 模型/ 越来越/ 复杂/ ./ Kogekar/ 等/ 人/ [/ 31/ ]/ 针对/ 这个/ 问题/ ,/ 提出/ 了/ 一种/ 模型/ 驱动/ 的/ 通用/ 框架/ ,/ 实现/ 多个/ SRN/ 模型/ 自动化/ 综合/ 和/ 仿真/ ./ Bernardi/ 等/ 人/ [/ 32/ ]/ 对/ 基于/ 概率模型/ 的/ 可信赖/ 评价/ 方法/ 进行/ 了/ 研究/ ,/ 并/ 给出/ 了/ 利用/ 随机/ Petri/ 对/ 复杂/ 系统/ 进行/ 建模/ 和/ 评价/ 的/ 方法/ ./ 林闯/ 等/ 人/ [/ 33/ ]/ 研究/ 了/ 随机/ Petri/ 网对/ 网络系统/ 可信赖/ 性/ 建模/ 分析/ 的/ 方法/ 和/ 步骤/ ,/ 着重/ 研究/ 了/ 随机/ Petri/ 网/ 描述/ 系统/ 的/ 服务/ 失效/ 模型/ 和/ 容错/ 模型/ ,/ 并/ 给出/ 了/ 网络/ 可信赖/ 性/ 分析/ 中/ 主要/ 指标/ 的/ 计算方法/ ./ 为了/ 更加/ 有效/ 地/ 对/ 管理/ 服务/ 特性/ 进行/ 定量分析/ ,/ 特别/ 是/ 对/ 动态性/ 的/ 描述/ ,/ 需要/ 在/ 上述/ 研究/ 的/ 基础/ 上/ 建立/ 相应/ 的/ 数学模型/ 用于/ 定量/ 描述/ 服务/ 构件/ 的/ 有关/ 动态/ 和/ 静态/ 过程/ ./ 服务平台/ 的/ 管理/ 行为/ 具有/ 随机性/ ,/ 并/ 满足/ 马尔可夫/ 特性/ ,/ 可以/ 用/ 排队/ 论/ 建立/ 性能/ 模型/ ./ 排队/ Petri/ 网/ (/ QueueingPetriNets/ ,/ QPN/ )/ [/ 34/ -/ 35/ ]/ 继承/ 和/ 发展/ 了/ 排队/ 网/ 和/ 随机/ Petri/ 网/ 的/ 优点/ ,/ 可/ 用于/ 描述/ 服务/ 管理/ 的/ 动态/ 行为/ 、/ 性能指标/ 和/ 可用性/ ,/ 因此/ 我们/ 采用/ 分层/ 排队/ Petri/ 网对/ 服务平台/ 执行力/ 进行/ 建模/ 和/ 评价/ ./ 3/ 自/ 管理/ 的/ 服务平台/ 参考模型/ 分布式服务/ 平台/ 不仅/ 要/ 管理网络/ 、/ 设备/ 、/ 数据/ 、/ 任务/ 、/ 用户/ 等/ 多种/ 对象/ ,/ 还要/ 综合/ 考虑/ QoS/ 、/ 安全/ 、/ 性能/ 、/ 可靠/ 、/ 可信/ 等/ 指标/ 对/ 管理/ 行为/ 的/ 约束/ ,/ 所以/ 其/ 软件/ 构成/ 将会/ 很/ 丰富/ ,/ 实现/ 起来/ 也/ 很/ 复杂/ ./ 特别/ 是/ 随着/ 服务平台/ 开发/ 、/ 部署/ 、/ 运行/ 和/ 维护/ 的/ 外部环境/ 逐渐/ 从/ 封闭/ 、/ 静态/ 、/ 可控/ 走向/ 开放/ 、/ 动态/ 、/ 难控/ ,/ 不能/ 再/ 假设/ 平台/ 中/ 各个/ 部分/ 都/ 遵从/ 统一/ 的/ 设计/ 和/ 管理/ ,/ 也/ 不能/ 完全/ 精确/ 地/ 预先确定/ 软件/ 的/ 结构/ 组成/ 和/ 各个/ 部分/ 的/ 行为/ ,/ 更/ 无法/ 界定/ 软件/ 部件/ 与/ 外部环境/ 的/ 边界/ ,/ 因此/ 服务平台/ 软件/ 的/ 网络化/ 和/ 构件/ 化/ 成为/ 新/ 的/ 发展趋势/ [/ 36/ ]/ ./ 首先/ 定义/ 相关/ 概念/ 如下/ ./ Page4mf1/ ∩/ mf2/ …/ mfn/ -/ 1/ ∩/ mfn/ =/ 0/ ./ 定义/ 1/ ./ 管理/ 功能/ 集合/ MFset/ =/ ∪/ n/ 定义/ 2/ ./ 管理/ 功能/ 子集/ MFsubset/ =/ ∏/ l/ 管理/ 功能/ 子集/ 是/ 功能/ 集合/ MFset/ 的/ 一个/ 子集合/ ,/ 同时/ 这些/ 子/ 功能/ 之间/ 又/ 有/ 一定/ 的/ 逻辑关系/ ,/ 而/ 不是/ 简单/ 的/ 联合/ ./ 定义/ 3/ ./ 管理/ 服务/ MSset/ =/ ∪/ m/ 理子/ 服务/ 的/ 集合/ ./ 一个/ 管理/ 子/ 服务/ MSi/ 总是/ 与/ 一个/ 管理/ 功能/ 子集/ 相对/ 应/ ,/ 是/ 管理/ 功能/ 的/ 抽象/ 表示/ ,/ 也/ 可/ 看作/ 是/ 面向/ 应用/ 的/ 管理/ 功能/ 的/ 逻辑/ 实现/ ./ 定义/ 4/ ./ 服务/ 资源/ 集合/ SRset/ =/ ∪/ m/ 支持/ 服务/ 执行/ 的/ 资源/ 总和/ ,/ 包括/ 虚拟/ 资源/ 和/ 物理/ 资源/ ./ 定义/ 5/ ./ 服务/ 构件/ 子集/ SCset/ =/ ∏/ l/ 构件/ 子集/ 是/ 服务/ 资源/ 集合/ SCset/ 的/ 一个/ 子集合/ ,/ 与/ 功能/ 子集/ 一样/ ,/ 这些/ 子/ 服务/ 构件之间/ 有/ 一定/ 的/ 组合/ 和/ 协作关系/ ./ 本文/ 提出/ 的/ 自/ 管理/ 的/ 服务平台/ 体系结构/ 参考模型/ 是/ 一个/ 用以/ 指导/ 建立/ 具体/ 分布式应用/ 系统/ 的/ 抽象/ 框架/ (/ 如图/ 1/ 所示/ )/ ,/ 描述/ 了/ 平台/ 中间件/ 的/ 环境/ 设施/ 以及/ 其中/ 的/ 部件/ 和/ 部件/ 之间/ 的/ 关系/ ,/ 但/ 不/ 直接/ 受/ 任何/ 具体/ 标准/ 、/ 技术/ 或/ 其它/ 实现/ 细节/ 的/ 约束/ ./ 际/ 的/ 软硬件/ 资源/ 集合/ ./ 参考模型/ 自下而上/ 分为/ 5/ 层/ :/ (/ 1/ )/ 物理/ 资源/ 层/ (/ physicalresourcelayer/ )/ 是/ 实/ (/ 2/ )/ 虚拟/ 资源/ 层/ (/ virtualresourcelayer/ )/ 是/ 对物/ (/ 3/ )/ 服务/ 构件/ 层/ (/ servicecomponentlayer/ )/ 是/ 完理/ 资源/ 的/ 服务化/ 封装/ 和/ 描述/ ./ 成特定/ 管理/ 功能/ 的/ 服务/ 构件/ 集合/ ,/ 提供/ 实现/ 服务/ 所/ 需要/ 的/ 各种/ 环境/ 和/ 构件/ ,/ 负责/ 用/ 细粒度/ 的/ 构件实现/ 粗粒度/ 的/ 服务/ ./ 一个/ 服务/ 构件/ (/ SC/ )/ 实现/ 一种/ 管理/ 功能/ ,/ 通常/ 没有/ 明确/ 的/ 业务/ 目标/ ./ 服务/ 构件/ 的/ 粒度/ 有/ 大小/ 之分/ ,/ 功能/ 有/ 强弱/ 之判/ ,/ 层次/ 有/ 高低/ 之别/ ./ 由于/ 环境/ 的/ 动态性/ 和/ 管理/ 的/ 分散性/ ,/ 服务/ 构件/ 需要/ 在/ 不同/ 的/ 时刻/ 实施/ 不同/ 的/ 协同/ 行为/ ./ 若干/ 服务/ 构件/ 可以/ 在/ 构件/ 管理/ 引擎/ (/ componentmanagementengine/ )/ 的/ 作用/ 下/ 协作/ 完成/ 更大/ 的/ 功能/ ./ 服务/ 构件/ 组合/ (/ servicecomponentcomposite/ )/ 以上/ 层/ 的/ 管理/ 服务/ 目标/ 为/ 操作/ 指导/ ,/ 可以/ 实现/ 跨/ 节点/ 的/ 构件/ 交互/ ,/ 是/ 保证/ 在/ 不同/ 抽象层次/ 上/ 对/ 中间件/ 进行/ 描述/ 、/ 分析/ 和/ 验证/ 的/ 基础/ ,/ 也/ 是/ 实现/ 管理/ 服务/ 定制/ 的/ 基础/ ./ 自主/ 构件/ 管理者/ (/ autonomiccomponentmanager/ )/ 负责/ 对/ 执行/ 状态/ 的/ 服务/ 构件/ 提供/ 自/ 管理机制/ ,/ 能够/ 在/ 运行/ 过程/ 中/ 对外部/ 环境/ 和/ 应用/ 需求/ 的/ 变化/ 做出/ 适当/ 反应/ ,/ 从而/ 将/ 系统/ 提供/ 的/ 服务/ 的/ 功能/ 或/ 性能/ 维持/ 在/ 一个/ 令人满意/ 的/ 水平/ 上/ ./ (/ 4/ )/ 管理/ 服务/ 层/ (/ managementservicelayer/ )/ 包含/ 了/ 面向/ 应用/ 的/ 各种/ 管理/ 功能/ 的/ 服务/ 实例/ ./ 管理/ 服务/ 的/ 功能设计/ 不是/ 固定/ 的/ ,/ 可以/ 根据/ 管理/ 需求/ 动态/ 扩展/ ,/ 如/ 附加/ 服务/ (/ pluggableservice/ )/ ./ 服务/ 管理/ 引擎/ (/ servicemanagementengine/ )/ 负责/ 服务/ 发现/ 、/ 服务/ 组合/ 、/ 服务/ 协同/ 等/ 工作/ ./ 自主/ 服务/ 管理者/ (/ auto/ -/ nomicservicemanager/ )/ 负责/ 实现/ 管理/ 服务/ 的/ 自/ 管理/ ,/ 包括/ 服务/ 的/ 监控/ 、/ 分析/ 、/ 规划/ 和/ 执行/ 等/ ./ (/ 5/ )/ 应用层/ (/ applicationlayer/ )/ 对外/ 提供/ 与/ 用户/ 交互/ 的/ 接口/ ,/ 获取/ 用户/ 的/ 管理/ 需求/ (/ 如/ 计算/ 密集型/ 、/ 数据/ 密集型/ 、/ 业务流程/ 型/ 等/ )/ 和/ 服务质量/ 要求/ ,/ 制定/ 或/ 调整/ 管理/ 功能/ 的/ 部署/ 规划/ 和/ 执行/ 策略/ ./ 为/ 适应/ 大规模/ 网络/ 环境/ 而/ 采取/ 的/ 分布式/ 管理模式/ 使得/ 服务/ 构件/ 的/ 数量/ 快速/ 扩张/ ,/ 增加/ 了/ 管理/ 和/ 维护/ 的/ 难度/ 和/ 成本/ ./ 研究/ 表明/ ,/ 引起/ 系统/ 复杂/ 行为/ 的/ 主要/ 原因/ 不是/ 元件/ 的/ 数量/ 而是/ 元件/ 之间/ 的/ 交互/ ,/ 只要/ 能/ 保持/ 系统/ 元件/ 之间/ 交互/ 的/ 基本/ 性质/ ,/ 那么/ 即使/ 对系统/ 加以/ 简化/ ,/ 系统/ 的/ 基本/ 特性/ 也/ 不会/ 改变/ [/ 37/ ]/ ./ 因此/ ,/ 本文/ 提出/ 的/ 自/ 管理/ 服务平台/ 采用/ 基于/ 交互/ 研究/ 服务/ 构件/ 的/ 组织/ 模式/ ./ 不同/ 的/ 交互/ 关系/ 和/ 交互/ 方法/ 将会/ 对/ 整体/ 的/ 管理/ 服务/ 的/ 性能/ 、/ 可靠性/ 、/ 可信性/ 等/ 产生/ 重大/ 影响/ ./ 在/ 管理/ 需求/ 和/ 策略/ 指导/ 下/ ,/ 分散/ 在/ 不同/ 节点/ 上/ 的/ 服务/ 构件/ 可能/ 存在/ 的/ 交互/ 关系/ [/ 38/ ]/ 如下/ ./ 定义/ 6/ ./ 假设/ 有/ 服务/ 构件/ SCi/ 和/ SCj/ ,/ 如果/ SCi/ 执行/ 完毕/ 后/ ,/ SCj/ 接着/ 开始/ 执行/ ,/ 那么/ 称之为/ 顺序/ 方式/ (/ sequencestyle/ )/ ,/ 记作/ SCi/ ;/ SCj/ ./ Page5/ 定义/ 7/ ./ 假设/ 有/ 服务/ 构件/ SCi/ ,/ 如果/ SCi/ 重复/ 执行/ 若干次/ ,/ 那么/ 称之为/ 重复/ 方式/ (/ iterativestyle/ )/ ,/ 记/ 作/ μ/ SCi/ ./ 定义/ 8/ ./ 假设/ 有/ 服务/ 构件/ SCi/ 和/ SCj/ ,/ 如果/ SCi/ 和/ SCj/ 相互/ 独立/ 执行/ ,/ 那么/ 称之为/ 并发/ 方式/ (/ con/ -/ currentstyle/ )/ ,/ 记作/ SCi/ ‖/ SCj/ ./ 定义/ 9/ ./ 假设/ 有/ 服务/ 构件/ SCi/ 和/ SCj/ ,/ 如果/ SCi/ 和/ SCj/ 并行执行/ 以/ 提供/ 相同/ 的/ 管理/ 服务/ 功能/ ,/ 那么/ 称之为/ 容错/ 方式/ (/ fault/ -/ tolerantstyle/ )/ ,/ 记作/ SCi/ |/ SCj/ ./ 从/ 可用性/ 和/ 性能/ 角度/ 考察/ 服务/ 构件/ 的/ 交互/ 关系/ ,/ sequence/ 和/ concurrency/ 两种/ 方式/ 下/ 服务/ 构件/ 的/ 执行力/ 相互/ 制约/ ,/ iterative/ 方式/ 可以/ 看作/ k/ 个/ 服务/ 构件/ 按照/ sequence/ 方式/ 连续/ 工作/ ,/ 而/ fault/ -/ toler/ -/ ant/ 方式/ 的/ 服务/ 构件/ 独立/ 工作/ 、/ 择优选用/ ,/ 相互之间/ 没有/ 直接/ 影响/ ./ 4/ 基于/ 执行力/ 模型/ 的/ 自主/ 控制/ 方法/ 4.1/ 分层/ 的/ 反馈/ 控制/ 架构/ 服务平台/ 自主/ 控制/ 方法/ 以/ 反馈/ 控制/ 为/ 基础/ ,/ 主要/ 的/ 系统/ 构造/ 任务/ 包括/ :/ 分析/ 服务平台/ 体系结构/ 并/ 把/ 它/ 建模/ 为/ 一个/ 反馈/ 控制系统/ ;/ 以/ 服务/ 构件/ 、/ 管理/ 服务/ 以及/ 相互之间/ 的/ 交互/ 关系/ 作为/ 控制/ 对象/ ;/ 通过/ 对/ 控制/ 对象/ 的/ 描述/ 和/ 建模/ ,/ 把/ 执行力/ 控制/ 问题/ 映射/ 为/ 一个/ 系统/ 的/ 控制/ 循环/ ;/ 选择/ 适当/ 的/ 传感器/ 来/ 动态/ 监控/ 当前/ 系统/ 运行/ 状态/ ,/ 及时/ 预测/ 和/ 定位/ 可能/ 存在/ 的/ 失效/ 或/ 缺陷/ 环节/ ;/ 指导/ 效应器/ 根据/ 一定/ 的/ 策略/ 和/ 规则/ 实现/ 系统/ 行为/ 的/ 自/ 适应/ 调整/ ./ 本文/ 提出/ 的/ 基于/ 分层/ 反馈/ 的/ 自主/ 控制/ 实现/ 架构/ 如图/ 2/ 所示/ ,/ 下层/ 负责/ 面向/ 服务/ 构件/ 的/ 局部/ 控制/ ,/ 上层/ 控制/ 面向/ 应用/ 的/ 全局/ 管理/ 服务/ ./ 全局/ 控制器/ 所/ 使用/ 的/ 系统/ 模型/ 是/ 抽象/ 模型/ ,/ 它/ 包含/ 与/ 全局/ 目标/ 相关/ 的/ 信息/ ,/ 如/ 用于/ 刻画/ 服务/ 构件之间/ 的/ 交互/ 细节/ 的/ 局部变量/ ./ 全局/ 控制器/ 管理/ 服务平台/ 的/ 宏观/ 特性/ ,/ 它/ 通过/ 命令/ 的/ 方式/ 对/ 每个/ 局部/ 控制器/ 施加/ 操作/ 约束/ ./ 每个/ 局部/ 控制器/ 则/ 基于/ 操作/ 约束/ 优化/ 本地/ 的/ 管理/ 服务/ 性能/ ./ 构件/ 控制器/ (/ componentcontroller/ )/ 表示/ 为/ 三元组/ :/ CC/ =/ (/ CM/ ,/ CMB/ ,/ CD/ )/ ./ 式/ 中/ ,/ CM/ 是/ 构件/ 的/ 分析/ 性/ 模型/ (/ CModel/ )/ ,/ 负责/ 建模/ 结果/ 的/ 表示/ 和/ 存放/ ;/ CMB/ 是/ 模型/ 生成器/ (/ CModelBuilder/ )/ ,/ 负责/ 定量/ 描述/ 系统/ 的/ 有关/ 过程/ 和/ 特性/ ,/ 如/ 对系统/ 响应速度/ 、/ 吞吐量/ 、/ CPU/ 和/ 存储器/ 的/ 利用率/ 、/ 失效率/ 等/ 性能/ 度量/ 的/ 管理/ ,/ 对/ 系统可靠性/ 、/ 可用性/ 和/ 安全性/ 的/ 评估/ 等/ ;/ CD/ 是/ 决策/ 部件/ (/ CDecision/ )/ ,/ 实现/ 服务/ 构件/ 状态/ 偏离/ 期望/ 目标/ 时/ 的/ 自/ 适应/ 功能/ ./ 服务/ 控制器/ (/ servicecon/ -/ troller/ )/ 的/ 组成/ 与/ 构件/ 控制器/ 基本一致/ ,/ 可以/ 表示/ 为/ 三元组/ :/ SCon/ =/ (/ SM/ ,/ SMB/ ,/ SD/ )/ ./ 不同/ 的/ 是/ 服务/ 的/ 分析/ 性/ 模型/ (/ SModel/ )/ 是/ 由/ 下层/ 服务/ 构件/ 的/ 分析模型/ 通过/ 组合/ 计算/ 得到/ ,/ 反映/ 了/ 全局/ 的/ 执行/ 状态/ ./ 服务/ 控制器/ 部件/ 在/ 一定/ 的/ 外部/ 指导/ 支持/ 下/ 运行/ ,/ 常见/ 的/ 外部/ 指导/ 有/ :/ SLAs/ 是/ 用户/ 提交/ 的/ QoS/ 需求/ ,/ 策略/ (/ policy/ )/ 是/ 表征/ 高层/ 管理/ 目标/ 的/ 任何/ 形式化/ 规范/ ,/ 用于/ 驱动/ 和/ 约束/ 构件/ 和/ 服务/ 的/ 行为/ ./ 自主/ 服务/ 构件/ (/ autonomicservicecomponent/ )/ 是/ 自主/ 控制/ 对象/ ,/ 具有/ 监控/ 、/ 决策/ 和/ 控制/ 3/ 种/ 功能/ ,/ 可以/ 实现/ 自我/ 觉察/ 和/ 外部环境/ 感知/ ,/ 其/ 形式化/ 模型/ 见/ 文献/ [/ 5/ ]/ ./ 自主/ 服务/ 构件/ 的/ 种类/ 和/ 数目/ 取决于/ 实际/ 应用/ 对/ 服务平台/ 管理/ 功能/ 的/ 需求/ 类型/ 和/ 应用/ 请求/ 的/ 规模/ ,/ 反映/ 在/ 软件开发/ 环节/ 上/ 就是/ 不同/ 功能/ 的/ 软件/ 实体/ 的/ 参数/ 接口/ 、/ 内部/ 逻辑/ 和/ 调用/ 关系/ 不/ 一样/ ./ 但是/ 从/ 软件维护/ 与/ 管理/ 的/ 角度/ ,/ 可以/ 把/ 分布式/ 中间件/ 平台/ 软件/ 抽象/ 为/ 一组/ 分布/ 于/ Internet/ 环境/ 下/ 各个/ 节点/ 的/ 、/ 具有/ 主体化/ 特征/ 的/ 软件/ 实体/ ,/ 以及/ 一组/ 用于/ 支撑/ 这些/ 软件/ 实体/ 以/ 各种/ 交互方式/ 进行/ 协同/ 的/ 连接子/ ,/ 即/ 服务/ 构件/ ./ 因此/ ,/ 本文/ 只/ 考虑/ 服务/ 构件/ 对外/ 表现/ 的/ 管理/ 功能/ 的/ 差异/ ,/ 不/ 考虑/ 服务/ 构件/ 内部/ 的/ 实现/ 细节/ ./ 由于/ 服务平台/ 管理工作/ 是/ 开放/ 、/ 动态/ 和/ 应用/ 驱动/ 的/ ,/ 服务/ 构件/ 的/ 组织/ 不/ 拘束/ 于/ 某个/ 固定/ 形式/ ,/ 应用/ 需求/ 、/ 管理/ 目标/ 和/ 策略/ 的/ 不同/ 决定/ 了/ 服务/ 构件/ 组成/ 和/ 执行/ 序列/ 的/ 差异/ ./ 对/ 这些/ 服务/ 构件/ 的/ 管理/ 主要/ 体现/ 在/ 服务/ 构件/ 负责/ 哪些/ 管理/ 功能/ ,/ 服务/ 构件/ 在/ 节点/ 上/ 如何/ 分布/ ,/ 服务/ 构件之间/ 的/ 交互/ 关系/ 是/ 怎样/ 的/ ,/ 即/ 通过/ 不同/ 管理/ 方案/ 的/ 设计/ ,/ 选择/ 服务/ 构件/ 的/ 数量/ 、/ 实现/ 流程/ 和/ 路径/ ,/ 对/ 不同/ 的/ 组合/ 方案/ 的/ 性能/ 和/ 可靠性/ 进行/ 预测/ 和/ 评估/ ,/ 从而/ 为/ 不同/ 的/ 对象/ 管理/ 目标/ 选择/ 一个/ 较优/ 的/ 管理/ 方案/ ./ 服务平台/ 自主/ 控制/ 的/ 目标/ 可以/ 定义/ 为/ 当/ 预测/ 到/ Page6/ 管理/ 服务/ 在/ 执行/ 过程/ 中/ 可能/ 违背/ 期望/ 的/ 约束/ 指标/ 时/ ,/ 服务/ 控制器/ (/ SCon/ )/ 选择/ 合理/ 的/ 策略/ 调整/ 管理/ 服务/ 中/ 服务/ 构件/ 的/ 工作/ 和/ 组织/ 方式/ ./ 为此/ ,/ 首先/ 要/ 明确/ 自主/ 控制/ 对象/ ,/ 给出/ 关于/ 管理/ 服务/ 的/ 类型/ 、/ 强度/ 、/ 服务质量/ 等/ 的/ 描述/ ,/ 定义/ 需要/ 的/ 服务/ 构件/ 的/ 类型/ 、/ 数量/ 、/ 性能参数/ 、/ 可用性/ 指标/ 、/ 可靠性/ 度量/ 、/ 执行/ 依赖/ 关系/ 序列/ 等/ ,/ 形成/ 方案/ 文件/ ;/ 然后/ 建立/ 控制/ 对象/ 的/ 执行力/ 模型/ ,/ 通过/ 模型/ 的/ 仿真/ 数据分析/ 可以/ 预先判断/ 局部/ 服务/ 构件/ 和/ 整体/ 管理/ 服务/ 的/ 特点/ ,/ 如/ 平均/ 服务/ 时间/ 、/ 可用性/ 程度/ 等/ ;/ 最后/ 参照/ 分析/ 结果/ 和/ 决策依据/ 做出/ 判断/ ,/ 完成/ 下/ 一步/ 工作/ ./ 4.2/ 执行/ 力度/ 量/ 根据/ 分布式计算/ 环境/ 的/ 动态性/ 和/ 虚拟化/ 特征/ ,/ 服务平台/ 执行力/ 取决于/ 资源/ 执行力/ 、/ 构件/ 执行力/ 和/ 服务/ 执行力/ [/ 39/ ]/ ./ 资源/ 执行力/ 是/ 对/ 构件/ 运行/ 环境/ 的/ 抽象/ 和/ 量化/ ./ 资源/ 的/ 虚拟化/ 使得/ 资源/ 执行力/ 的/ 测量/ 变得/ 更加/ 复杂/ ,/ 需要/ 解决/ 资源/ 的/ 动态性/ 和/ 非/ 专注/ 性/ 的/ 问题/ ./ 构件/ 执行力/ 描述/ 构件/ 自身/ 的/ 性能/ 属性/ 和/ 可用性/ 度量/ ,/ 构件/ 开发者/ 需要/ 将/ 构件/ 的/ 这些/ 属性/ 和/ 度量/ 加入/ 到/ 构件/ 的/ 描述/ 中/ ./ 构件/ 的/ 性能/ 需要/ 和/ 实际/ 的/ 运行/ 环境/ 兼容/ ,/ 在/ 特定/ 环境/ 下/ 进行/ 实例/ 化/ ,/ 并/ 监控/ 构件/ 的/ 可靠性/ 和/ 有效性/ ./ 服务/ 执行力/ 针对/ 特定/ 应用/ 域/ 中/ 系统/ 完成/ 某次/ 行为/ 所/ 需/ 构件/ 以及/ 构件之间/ 的/ 交互/ ,/ 它/ 可以/ 从/ 系统/ 设计/ 的/ 用/ 例图/ 和/ 时序/ 图中/ 得到/ ./ 构件之间/ 通过/ 接口/ 进行/ 交互/ ,/ 会/ 触发/ 多种/ 执行/ 行为/ 的/ 发生/ ./ 由此可见/ ,/ 资源/ 执行力/ 对外/ 表现/ 为/ 构件/ 功能/ 的/ 运行/ ,/ 服务/ 执行力/ 对外/ 表现/ 为/ 构件/ 行为/ 的/ 变迁/ ./ 服务/ 构件/ 可能/ 同时/ 服务/ 于/ 多个/ 管理/ 服务/ 域/ ,/ 同一个/ 服务/ 构件/ 在/ 不同/ 的/ 运行/ 过程/ 中/ 可能/ 产生/ 各种/ 反映/ 服务/ 构件/ 当前/ 状态/ 的/ 数据/ (/ 事件/ )/ ,/ 包括/ 各种/ 日志/ 事件/ 和/ 实时/ 事件/ ,/ 如/ 服务/ 的/ 操作/ 状态/ 、/ 性能/ 状态/ 、/ 失效/ 征兆/ 和/ 异常/ 事件/ 等/ [/ 40/ ]/ ./ 讨论/ 之前/ ,/ 假定/ 所有/ 服务/ 构件/ 都/ 是/ 第三方/ 构件/ ,/ 它们/ 的/ 细节/ 处理/ 被/ 排除/ 在外/ ,/ 并且/ 服务/ 构件/ 在/ 相应/ 的/ 资源/ 上/ 能够/ 运行/ ./ 执行/ 力度/ 量/ 的/ 最/ 普通/ 形式/ 就是/ 系统/ 各/ 属性/ 的/ 加权/ 和/ ,/ 每个/ 属性/ 表征/ 了/ 对象/ 的/ 特性/ ./ 执行力/ 函数/ 的/ 一种/ 格式/ 为/ 其中/ :/ V/ 是/ 属性/ i/ 的/ 相对/ 重要性/ 的/ 加权/ 条件/ 变量/ ;/ xi/ 是/ 属性/ i/ 的/ 值/ ./ 通常/ ,/ 对/ 归一化/ 的/ fPerS/ 来说/ ,/ ∑/ n/ 但是/ ,/ 要/ 确定/ 不同/ 属性/ 的/ 权值/ 往往/ 非常/ 困难/ ,/ 而且/ 不同/ 属性/ 在/ 不同/ 交互/ 关系/ 下/ 的/ 计算/ 方式/ 也/ 是/ 不同/ 的/ ./ 例如/ 在/ 顺序/ 方式/ 下/ ,/ 响应/ 时间/ (/ responsetime/ )/ 和/ 延迟/ (/ delay/ )/ 具有/ 叠加/ 性/ ,/ 失效/ 概率/ (/ failureproba/ -/ bility/ )/ 和/ 修复/ 概率/ (/ recoveryprobability/ )/ 具有/ 连乘/ 性/ ,/ 失效/ 速率/ (/ failurerate/ )/ 和/ 修复/ 速率/ (/ recoveryrate/ )/ 是/ 独立/ 分布/ 的/ ./ 因此/ 很难/ 直接/ 用来/ 计算/ 服务/ 构件/ 执行力/ ./ 此外/ ,/ 在/ 实际/ 的/ 服务平台/ 中/ ,/ 管理/ 服务/ 的/ 处理/ 能力/ 往往/ 受到/ 服务/ 构件/ 数量/ 、/ 服务/ 请求/ 规模/ 、/ 管理/ 强度/ 、/ 资源/ 能力/ 和/ 外来/ 干扰/ 等/ 的/ 影响/ ,/ 参数/ 改变/ 具有/ 一定/ 的/ 随机性/ 和/ 不确定性/ ,/ 需要/ 动态/ 修正/ 计算结果/ ,/ 增加/ 了/ 计算/ 复杂性/ ./ 因此/ ,/ 本文/ 认为/ 服务平台/ 执行力/ 模型/ 是从/ 用户/ 的/ 角度/ 反映/ 服务/ 构件/ 完成/ 管理/ 任务/ 的/ 执行/ 能力/ ,/ 一般/ 由/ 可用性/ 模型/ 、/ 性能/ 模型/ 和/ 结合/ 方法/ 三/ 部分/ 组成/ ./ 其中/ ,/ 可用性/ 模型/ 描述/ 了/ 管理/ 任务/ 被/ 服务平台/ 成功/ 完成/ 的/ 概率/ ,/ 不但/ 考虑/ 到/ 服务/ 构件/ 软硬件/ 和/ 连接/ 环节/ 的/ 失效/ 对/ 可靠性/ 的/ 影响/ ,/ 而且/ 关注/ 失效/ 可/ 修复/ 情况/ 下/ 系统/ 服务/ 可用性/ 的/ 统一/ 表达/ ./ 性能/ 模型/ 描述/ 了/ 不同/ 的/ 管理/ 服务/ 构件/ 执行/ 序列/ 的/ 执行/ 效率/ ,/ 需要/ 考虑/ 响应/ 时间/ 、/ 延迟/ 、/ 吞吐量/ 、/ 丢失/ 率/ 等/ 属性/ ./ 可用性/ 模型/ 与/ 性能/ 模型/ 的/ 结合/ 主要/ 表现/ 为/ 引入/ 失效/ 修复/ 机制/ 后/ 对/ 性能/ 属性/ 参数/ 的/ 影响/ ./ 4.3/ 可用性/ 模型/ 网络/ 环境/ 的/ 开放/ 、/ 动态/ 和/ 分布/ 性/ 特征/ 导致/ 资源/ 故障/ 和/ 构件/ 失效/ 的/ 情况/ 相当/ 普遍/ ./ 为了/ 更好/ 地/ 描述/ 失效/ 对/ 服务平台/ 可用性/ 的/ 影响/ ,/ 对/ 节点/ 、/ 链路/ 以及/ 服务/ 构件/ 软件/ 的/ 失效/ 情况/ 做/ 如下/ 的/ 基本/ 假设/ :/ (/ 1/ )/ 链路/ 是/ 节点/ 之间/ 的/ 虚拟/ 链路/ ,/ 不/ 考虑/ 具体/ 的/ 链路/ 拓扑/ 结构/ ;/ (/ 2/ )/ 服务平台/ 中/ 节点/ 、/ 链路/ 和/ 各/ 服务/ 构件之间/ 相互/ 独立/ ,/ 它们/ 的/ 失效/ 是/ 统计/ 独立/ 的/ ;/ (/ 3/ )/ 运行/ 服务/ 构件/ 的/ 节点/ 在/ 获得/ 管理/ 任务/ 后/ 立即/ 执行/ ,/ 并且/ 其/ 无/ 失效/ 执行/ 时间/ 服从/ 指数分布/ ;/ (/ 4/ )/ 服务/ 构件之间/ 在/ 交换/ 信息/ 期间/ ,/ 链路/ 无/ 失效/ 工作/ 的/ 时间/ 服从/ 指数分布/ ;/ (/ 5/ )/ 需要/ 较长时间/ 和/ 占用/ 较/ 多/ 计算机/ 资源/ 的/ “/ 大/ 任务/ ”/ ,/ 其/ 节点/ 可靠性/ 随着/ 时间/ 的/ 增加/ 而/ 呈/ 指数/ 衰减/ [/ 41/ ]/ ./ 令/ 管理/ 服务/ 的/ 总/ 复杂度/ 为/ C/ ,/ 由/ m/ 个/ 相互/ 独立/ 的/ 管理/ 服务/ 构件/ 组成/ ,/ 其中/ 第/ i/ 个/ 服务/ 构件/ SCi/ (/ i/ =/ 1/ ,/ 2/ ,/ …/ ,/ m/ )/ 的/ 复杂度/ 为/ ci/ ./ 由于/ 服务/ 构件之间/ 的/ 独立性/ ,/ C/ 可以/ 表示/ 为/ 各/ 服务/ 构件/ 的/ 复杂度/ 之/ 和/ ,/ 即/ 服务平台/ 根据/ 网络资源/ 的/ 分布/ 情况/ ,/ 将/ 服务/ 构件/ SCi/ 分配/ 到/ 节点/ Nk/ 来/ 执行/ ./ 如果/ 节点/ Nk/ 的/ CPU/ 处理速度/ 为/ spk/ ,/ 那么/ 在/ 不/ 发生/ 失效/ 的/ 情况/ 下/ ,/ 服务/ 构/ Page7/ 件/ Si/ 在/ 节点/ Nk/ 的/ 执行/ 时间/ 为/ 软件/ 出现/ 错误/ 是/ 不可避免/ 的/ ,/ 由/ 软件/ 错误/ 导致/ 的/ 软件/ 失效/ 也/ 是/ 不可避免/ 的/ [/ 42/ ]/ ./ 为了/ 更好/ 地/ 描述/ 软件可靠性/ 对/ 服务/ 构件/ 的/ 影响/ ,/ 假设/ 执行/ 服务/ 构件/ SCi/ 所/ 调用/ 程序/ 的/ 失效率/ 为/ λ/ p/ (/ i/ )/ ,/ 运行/ 服务/ 构件/ 的/ 节点/ 的/ 失效率/ 为/ λ/ n/ (/ k/ )/ ,/ 那么/ 服务/ 构件/ 执行/ 时/ 不/ 发生/ 失效/ 的/ 概率/ 为/ Rki/ (/ i/ )/ =/ e/ -/ λ/ p/ (/ i/ )/ ·/ τ/ kie/ -/ λ/ n/ (/ k/ )/ ·/ τ/ ki/ =/ e/ -/ λ/ p/ (/ i/ )/ +/ λ/ n/ (/ k/ )/ 网络通信/ 环境/ 和/ 服务/ 构件/ 的/ 交互方式/ 是/ 服务/ 构件/ 行为/ 变迁/ 必须/ 要/ 考虑/ 的/ 影响/ 因素/ ./ 假设/ 通信/ 链路/ 带宽/ 为/ B/ ,/ 链路/ 失效率/ 为/ λ/ L/ ,/ 服务/ 构件/ SC/ 交互/ 的/ 总/ 次数/ 为/ K/ ,/ 按照/ C/ // S/ 方式/ 调用/ 构件/ 后/ 第/ i/ 次/ 传输/ 的/ 数据/ 为/ Di/ ,/ 按照/ 移动/ 代理/ 方式/ 调用/ 构件/ 需要/ 传输/ 的/ 数据/ 为/ Dr/ ,/ 移动/ 代理/ 迁移/ 过程/ 中/ 需要/ 传输/ 的/ 数据/ 为/ Dm/ ./ 那么/ ,/ 服务/ 构件之间/ 通信/ 时/ 不/ 发生/ 失效/ 的/ 概率/ 为/ C/ // S/ 方式/ 下/ 移动/ 代理/ 方式/ 下/ 基于/ 上述/ 分析/ ,/ 加之/ 节点/ 失效/ 和/ 链路/ 失效/ 具有/ 独立性/ ,/ 那么/ 服务/ 构件/ SCi/ 能/ 成功/ 地/ 通过/ 网络/ 获取数据/ 并/ 被/ 节点/ Nk/ 执行/ 完成/ 的/ 概率/ 为/ 在/ 实际/ 的/ 服务平台/ 中/ ,/ 服务/ 构件/ SCi/ 的/ 执行/ 往往/ 因为/ 所在/ 节点/ Nk/ 发生/ 失效/ 而/ 被迫/ 终止/ ./ 为此/ ,/ 引入/ 节点/ 失效/ 修复/ 机制/ ,/ 即当/ 节点/ 发生/ 用户/ 误操作/ 、/ CPU/ 资源/ 短时/ 衰竭/ 、/ 网络/ 瞬时/ 堵塞/ 或/ 短期/ 中断/ 等/ 可/ 修复/ 故障/ 时/ ,/ 节点/ 自动/ 运行/ 失效恢复/ 程序/ ,/ 修复/ 已/ 停止/ 的/ 服务/ 构件/ 执行程序/ ,/ 这样/ 就/ 可以/ 有效/ 解决/ 管理/ 服务/ 遇到/ 失效/ 而/ 终止/ 的/ 问题/ ./ 当然/ ,/ 失效/ 修复/ 具有/ 一定/ 的/ 概率/ ,/ 即/ 失效/ 可以/ 修复/ ,/ 修复/ 后/ 节点/ Nk/ 从/ 失效/ 断点/ 继续执行/ 管理/ 服务/ 构件/ ,/ 直到/ 遇到/ 不可/ 修复/ 的/ 失效/ 或者/ 服务/ 构件/ SCi/ 执行/ 完毕/ ./ 反之/ ,/ 失效/ 不可/ 修复/ ,/ SCi/ 被迫/ 终止/ ,/ 在/ 该/ 节点/ 的/ 管理/ 任务/ 执行/ 宣告/ 失败/ ./ 如果/ 运行/ 服务/ 构件/ 的/ 节点/ 之间/ 只有/ 一条/ 通信/ 链路/ ,/ 那么/ 在/ 服务/ 构件/ 交换/ 信息/ 期间/ 通信/ 链路/ 发生/ 了/ 失效/ ,/ 服务/ 构件/ 的/ 执行/ 将/ 失败/ ,/ 管理/ 任务/ 也/ 随之/ 被/ 终止/ ./ 服务/ 构件/ 的/ 失效/ 行为/ 可以/ 通过/ 连续/ 时间/ 马尔可夫/ 链/ (/ ContinuousTimeMarkovChain/ ,/ CTMC/ )/ 加以/ 描述/ [/ 25/ ]/ ,/ 如图/ 3/ (/ a/ )/ 所示/ ./ 其中/ ,/ UP/ 代表/ 服务/ 构件/ 运行/ 正常/ ,/ PF/ 代表/ 服务/ 构件/ 程序/ 失效/ ,/ 失效率/ 为/ λ/ p/ ,/ 修复/ 率为/ γ/ p/ ,/ NF/ 代表/ 服务/ 构件/ 节点/ 失效/ ,/ 失效率/ 为/ λ/ n/ ,/ 修复/ 率为/ γ/ n/ ,/ 成功/ 修复/ 的/ 概率/ 为/ 常数/ cp/ ./ 因此/ ,/ 服务/ 构件/ SCi/ 的/ 稳定/ 状态/ 概率/ 计算/ 如下/ :/ π/ UP/ =/ 1/ +/ λ/ p/ γ/ p/ +/ 1/ 烄/ π/ CF/ =/ λ/ p/ γ/ p/ π/ UP/ ,/ 烅/ π/ NF/ =/ 1/ 烆/ 服务/ 构件/ SCi/ 可用性/ 为/ ASCi/ =/ π/ UP/ ./ 图/ 3/ (/ a/ )/ 的/ 两/ 状态/ 等价/ 可用性/ 模型/ 如图/ 3/ (/ b/ )/ 所示/ ,/ 1/ 表示/ 服务/ 构件/ 运行/ 正常/ (/ up/ )/ ,/ 0/ 表示/ 服务/ 构件/ 运行/ 失效/ (/ down/ )/ ./ 令/ 等价/ 的/ 失效率/ 和/ 修复/ 率/ 分别/ 表示/ 为/ λ/ eq/ 和/ γ/ eq/ ,/ 那么/ 可用性/ 表示/ 为/ 不同/ 交互方式/ 下/ 服务/ 构件/ 的/ 可用性/ 描述/ 如下/ :/ ①/ 顺序/ 方式/ 服务平台/ 中/ 的/ 服务/ 构件/ SC1/ 和/ SC2/ 之间/ 通过/ 链路/ L/ 通信/ 实现/ 交互/ 与/ 协作/ ,/ 那么/ 它们/ 的/ 可用性/ 模型/ 可/ 表示/ 为/ 一个/ 8/ 状态/ 的/ 连续/ 时间/ 马尔可夫/ 链/ ,/ 如图/ 4/ 所示/ ./ 分别/ 以上/ 标/ (/ SC1/ )/ ,/ (/ SC2/ )/ 和/ (/ L/ )/ 标识/ 交互/ 的/ 两个/ 服务/ 构件/ 和/ 链路/ 的/ 失效率/ 和/ 修复/ 率/ ,/ 每个/ 状态/ 表示/ Page8/ 一个/ 三元组/ (/ SC1/ ,/ L/ ,/ SC2/ )/ ,/ 那么/ 顺序/ 执行/ 方式/ 下/ 的/ 可用性/ 为/ ASC1/ ;/ SC2/ (/ 即/ 所有/ 状态/ 的/ 稳定/ 状态/ 概率/ )/ 见表/ 1/ ./ 状态/ 111011101110001010100000/ ②/ 重复/ 方式/ 假设/ 服务/ 构件/ SC1/ 重复/ 运行/ μ/ 次后/ 进入/ 下/ 一个/ 服务/ 构件/ 执行/ 状态/ ,/ 那么/ 循环/ 方式/ 下/ 的/ 可用性/ A/ μ/ SC1/ 为/ ③/ 并发/ 方式/ 假设/ SC1/ 和/ SC2/ 各自/ 独立/ 运行/ 后/ 进入/ 同一个/ 服务/ 构件/ 的/ 执行/ 状态/ ,/ 它们/ 的/ 可用性/ 模型/ 可/ 表示/ 为/ 一个/ 4/ 状态/ 的/ 连续/ 时间/ 马尔可夫/ 链/ ,/ 如图/ 5/ 所示/ ./ 那么/ 并发/ 方式/ 下/ 的/ 可用性/ ASC1/ ‖/ SC2/ (/ 即/ 所有/ 状态/ 的/ 稳定/ 状态/ 概率/ )/ 见表/ 2/ ./ ④/ 容错/ 方式/ 假设/ SC1/ 和/ SC2/ 同时/ 运行/ 提供/ 相同/ 的/ 服务/ 管理/ 功能/ ,/ 其中/ 一个/ 完成/ 后/ 进入/ 下/ 一个/ 服务/ 构件/ 的/ 执行/ 状态/ ,/ 那么/ 容错/ 方式/ 下/ 的/ 可用性/ ASC1/ |/ SC2/ 为/ ASC1SC2/ =/ 1/ -/ (/ 1/ -/ ASC1/ )/ (/ 1/ -/ ASC2/ )/ (/ 11/ )/ 在/ 上述/ 研究/ 的/ 基础/ 上/ ,/ 只要/ 能够/ 明确/ 管理/ 服务/ 中/ 的/ 服务/ 构件/ 数量/ 、/ 执行/ 序列图/ 和/ 相关/ 参数/ ,/ 就/ 可以/ 从/ 理论/ 上/ 对/ 基于/ 服务/ 构件/ 的/ 分布式/ 管理/ 服务/ 的/ 可用性/ 进行/ 分析/ 和/ 计算/ ./ 4.4/ 执行力/ 模型/ 4.4/ ./ 1/ 建模/ 服务/ 构件/ 执行力/ 服务平台/ 中/ 的/ 服务/ 构件/ 具有/ 分布/ 性/ ,/ 因此/ 通信/ 环节/ 是/ 必须/ 要/ 考虑/ 的/ 环节/ ./ 本文/ 将/ 服务/ 构件/ 看作/ 是/ 链路/ 模型/ 和/ 节点/ 模型/ 的/ 结合/ ,/ 并/ 满足/ 以下/ 假设/ :/ (/ 1/ )/ 所有/ 失效/ 都/ 是/ 可/ 修复/ 的/ ;/ (/ 2/ )/ 链路/ 和/ 节点/ 的/ 失效/ 是/ 统计/ 独立/ 的/ ./ 由于/ 网络资源/ 的/ 共享性/ ,/ 管理/ 节点/ 上/ 往往/ 运行/ 着/ 除/ 管理/ 服务/ 外/ 的/ 其它/ 任务/ ,/ 这些/ 额外/ 的/ 负载/ 也/ 会/ 影响/ 管理/ 服务/ 的/ 响应/ 时间/ ./ 因此/ ,/ 每个/ 服务/ 构件/ 包括/ 4/ 类/ 队列/ ,/ 分别/ 建模/ 通信/ 链路/ (/ LP/ )/ 、/ 修复/ 环节/ (/ LR/ ,/ NR/ )/ ,/ 服务/ 节点/ (/ NP/ )/ 和/ 外部/ 负载/ (/ EW/ )/ ./ 每类/ 队列/ 刻画/ 了/ 待处理/ 对象/ 的/ 序列/ 关系/ 和/ 性能/ 特征/ ./ 在/ 可用性/ 建模/ 中/ 引入/ 节点/ 失效/ 修复/ 机制/ 后/ ,/ 服务/ 构件/ 的/ 生命周期/ 分为/ 有效/ 执行/ 和/ 失效/ 修复/ 2/ 个/ 阶段/ ./ 以/ 通信/ 链路/ 为例/ ,/ 在/ 有效/ 执行/ 阶段/ ,/ 通信/ 任务/ 持续/ 进入/ 队列/ LP/ ,/ 完成/ 后/ 进入/ 节点/ 处理/ 环节/ ;/ 在/ 失效/ 修复/ 阶段/ ,/ 新/ 的/ 通信/ 任务/ 不再/ 被/ 接受/ ,/ 已经/ 接受/ 和/ 正在/ 运行/ 的/ 任务/ 将会/ 终止/ ,/ 链路/ 修复/ 后/ 由/ 零/ 负载/ 开始/ 接受/ 新/ 通信/ 任务/ ,/ 因此/ 通信/ 链路/ 的/ 有效/ 吞吐量/ 和/ 利用率/ 将/ 下降/ ,/ 平均/ 响应/ 时间/ 将/ 延长/ ./ 基于/ 排队/ Petri/ 网/ (/ QPN/ )/ 的/ 服务/ 构件/ 链路/ 模型/ 如图/ 6/ 所示/ ./ 白色/ 方框/ 表示/ 时间/ 变迁/ (/ timedtransi/ -/ tion/ )/ ,/ 黑色/ 方框图/ 代表/ 瞬时/ 变迁/ (/ immediatetransi/ -/ tion/ )/ ./ 圆圈/ 表示/ 普通/ 库所/ (/ ordinaryplace/ )/ ,/ 带有/ 竖线/ 的/ 圆圈/ 表示/ 队列/ 库所/ (/ queueingplace/ )/ ./ 托肯/ (/ token/ )/ m/ 代表/ 管理/ 任务/ ,/ 包括/ 在/ 可用/ 状态/ 下/ 执行/ 的/ 通信/ 任务/ l/ 和/ 发生/ 失效/ 的/ 通信/ 任务/ lf/ ./ 标识/ 作用/ 的/ 托肯/ a/ 代表/ 通信/ 链路/ 的/ 状态/ (/ 1/ =/ 有效/ ,/ 0/ =/ 无效/ )/ ,/ r/ 代表/ 修复/ 环节/ 的/ 完成/ 情况/ (/ 1/ =/ 完成/ ,/ 0/ =/ 进行/ 中/ )/ ;/ 控制/ 作用/ 的/ 托肯/ f1/ 和/ f2/ 分别/ 用于/ 决定/ 变迁/ lt7/ 和/ lt8/ 是否/ 可以/ 触发/ (/ 0/ =/ 禁止/ ,/ 1/ =/ 允许/ )/ ./ 图/ 6/ 中/ 的/ 变迁/ 和/ 库/ 所/ 描述/ 如下/ ./ (/ 1/ )/ 库所库/ 所/ Input/ 和/ Output/ 分别/ 表示/ 服务/ 构件/ 的/ 管/ LS/ 表示/ 进入/ 的/ 管理/ 任务/ 被/ 链路/ 接受/ ;/ L1/ 用来/ 接受/ 按照/ 一定/ 的/ 失效/ 概率/ 发生/ 后/ 形成/ 理/ 任务/ 输入/ 和/ 输出/ ;/ 的/ 任务/ 序列/ ;/ Page9LE/ 用来/ 限制/ 链路/ 资源/ LP/ 在/ 有效/ 和/ 失效/ 修复/ 两个/ 阶段/ 的/ 使用/ 是/ 互斥/ 和/ 独占/ 的/ ,/ 其/ 内部/ 托肯/ 包括/ a/ 和/ r/ ,/ 取值/ 在/ 0/ 和/ 1/ 之间/ 切换/ ;/ 复/ 阶段/ ;/ LR/ 表示/ 管理/ 任务/ 遇到/ 链路/ 失效/ 后/ 进入/ 失效/ 修/ LP/ 是/ 多类/ 队列/ 库所/ ,/ 表示/ 通信/ 链路/ 对/ 信息/ 传输/ 的/ 处理/ ,/ 包含/ 一个/ G/ // M/ // 1/ // FCFS/ 队列/ ;/ L2/ 用来/ 接受/ LP/ 完成/ 的/ 通信/ 任务/ l/ ,/ 链路/ 有效/ 时/ l/ 直接/ 转移/ 到/ Output/ 库所中/ ,/ 失效/ 时/ 记录/ 任务/ l/ 的/ 数目/ 后/ 用来/ 抵消/ 链路/ 修复/ 后/ 新/ 接受/ 的/ 等量/ 任务/ ,/ 以便/ 模拟/ 修复/ 后/ 的/ 链路/ 从/ 零/ 负载/ 开始运行/ 的/ 效果/ ;/ 任务/ 时/ 数目/ 增加/ ,/ 任务/ 通信/ 完成/ 后/ 数目/ 减少/ ;/ 理/ 环节/ ;/ LC1/ 记录/ 链路/ 有效/ 时/ 进入/ 的/ 任务/ 数目/ ,/ 接受/ 新/ LC2/ 刻画/ 了/ 链路/ 修复/ 后/ 用来/ 抵消/ 新/ 进入/ 链路/ 通信/ 任务/ 的/ 数目/ ,/ 在/ 数值/ 上/ 等于/ 失效/ 时刻/ 已经/ 接受/ 但/ 被迫/ 中断/ 的/ 任务/ 数目/ num1/ 和/ 修复/ 期间/ LP/ 完成/ 的/ 任务/ 数目/ num2/ 的/ 差/ (/ num1/ -/ num2/ )/ ;/ 变迁/ lt7/ 和/ lt8/ 的/ 触发/ ./ LF/ 用来/ 标识/ 链路/ 是否/ 处于/ 失效/ 状态/ 以便/ 控制/ (/ 2/ )/ 变迁/ 瞬时/ 变迁/ st/ 表示/ 管理/ 任务/ 进入/ 到/ 服务/ 构件/ 链路/ ;/ 瞬时/ 变迁/ lt1/ 表示/ 管理/ 任务/ 按/ 两种/ 可能/ 方式/ 完成/ 通信/ ,/ 一种/ 是/ 链路/ 有效/ 情况/ 下/ 直接/ 进入/ 链路/ 队列/ ,/ 一种/ 是/ 失效/ 修复/ 后/ 再/ 进入/ 链路/ 队列/ ,/ 不同/ 方式/ 的/ 选择/ 由式/ (/ 5/ )/ 和/ (/ 6/ )/ 计算/ 的/ 链路/ 失效/ 概率/ φ/ L/ 决定/ ;/ 瞬时/ 变迁/ lt2/ 实现/ 两种/ 触发/ 模式/ ,/ 完成/ 的/ 工作/ 包括/ 接受/ 有效/ 任务/ 进入/ 链路/ LP/ ,/ 链路/ 修复/ 后用/ LC2/ 中/ 记录/ 的/ 任务/ 数目/ 抵消/ 新/ 接受/ 的/ 等量/ 任务/ ;/ 瞬时/ 变迁/ lt3/ 完成/ 管理/ 任务/ 的/ 数据通信/ 操作/ ;/ 瞬时/ 变迁/ lt4/ 将/ 完成/ 的/ 管理/ 任务/ 送到/ 下/ 一个/ 处/ 瞬时/ 变迁/ lt5/ 表示/ 失效/ 任务/ 进入/ 链路/ 修复/ 阶段/ ,/ 时间/ 变迁/ lt6/ 表示/ 链路/ 经历/ 一个/ 失效/ 修复过程/ ,/ 瞬时/ 变迁/ lt7/ 将/ 链路/ 失效/ 时刻/ 已经/ 接受/ 但/ 被迫/ 并/ 设置/ 控制/ 用/ 的/ 托肯/ f1/ 和/ f2/ 为/ 1/ ;/ lt6/ 的/ 时间延迟/ 服从/ γ/ L/ 的/ 指数分布/ ;/ 中断/ 的/ 任务/ 数目/ 转移/ 到/ LC2/ 中/ ;/ 数目/ 抵消/ 转移/ 到/ LC2/ 中/ ./ 基于/ 排队/ Petri/ 网/ 的/ 服务/ 构件/ 节点/ 模型/ 在/ 链路/ 模型/ 的/ 基础/ 上/ 增加/ 了/ 对外部/ 负载/ 的/ 描述/ ,/ 如图/ 7/ 所示/ ./ 托肯/ m/ 代表/ 管理/ 任务/ ,/ 包括/ 在/ 可用/ 状态/ 下/ 执行/ 的/ 节点/ 任务/ n/ 和/ 发生/ 失效/ 的/ 节点/ 任务/ nf/ ,/ w/ 代表/ 管理/ 任务/ 之外/ 的/ 工作/ 负载/ ./ 托肯/ a/ 代表/ 处理/ 节点/ 的/ 状/ 瞬时/ 变迁/ lt8/ 用/ 链路/ 失效/ 期间/ LP/ 完成/ 的/ 任务/ 态/ (/ 1/ =/ 有效/ ,/ 0/ =/ 无效/ )/ ,/ r/ 代表/ 修复/ 环节/ 的/ 完成/ 情况/ (/ 1/ =/ 完成/ ,/ 0/ =/ 进行/ 中/ )/ ,/ f/ 代表/ 进入/ 的/ 节点/ 是否/ 有效/ (/ 0/ =/ 有效/ ,/ 1/ =/ 失效/ )/ ,/ ew/ 控制/ 外部/ 负载/ 的/ 产生/ (/ 0/ =/ 禁止/ ,/ 1/ =/ 允许/ )/ ./ 与/ 链路/ 模型/ 相比/ ,/ 主要/ 的/ 区别/ 如下/ :/ NP/ 是/ 多类/ 队列/ 库所/ ,/ 表示/ 服务/ 节点/ 对/ 管理/ 任务/ 的/ 执行/ ,/ 包含/ 一个/ G/ // M/ // m/ // PS/ 队列/ ;/ EW/ 是/ 队列/ 库所/ ,/ 产生/ 管理/ 任务/ 之外/ 的/ 工作/ 负载/ ,/ 包含/ 一个/ G/ // M/ // // IS/ 队列/ ;/ 瞬时/ 变迁/ nt1/ 表示/ 管理/ 任务/ 在/ 数据交换/ 成功/ 后以/ 两种/ 可能/ 方式/ 进入/ 到/ 节点/ 处理/ 队列/ 中/ 执行/ :/ 一种/ 是/ 直接/ 处理/ ,/ 一种/ 是/ 节点/ 失效/ 修复/ 后/ 再/ 由/ 节点/ 处理/ ,/ 不同/ 方式/ 的/ 选择/ 由式/ (/ 4/ )/ 计算/ 的/ 服务/ 构件/ 节点/ 的/ 失效/ 概率/ φ/ ki/ 决定/ ;/ 时间/ 变迁/ nt6/ 表示/ 节点/ 经历/ 一个/ 失效/ 修复过程/ ,/ nt6/ 的/ 时间延迟/ 服从/ (/ γ/ p/ +/ γ/ n/ )/ 的/ 指数分布/ ;/ 瞬时/ 变迁/ nt9/ 在/ 托肯/ ew/ 的/ 控制/ 下/ 产生/ 额外/ 工作/ 负载/ 进入/ 到/ 服务/ 构件/ 节点/ 中/ ./ 4.4/ ./ 2/ 建模/ 管理/ 服务/ 执行力/ 服务平台/ 管理/ 服务/ 的/ 组合/ 是/ 应用/ 驱动/ 的/ ,/ 服务/ 构件/ 组成/ 和/ 执行/ 序列/ 由/ 应用/ 需求/ 、/ 管理/ 目标/ 和/ 自/ 管理策略/ 决定/ ./ 为此/ ,/ 构造/ 一个/ 应用/ 场景/ 来/ 说明/ 管理/ 服务/ 的/ 执行/ 过程/ ,/ 如图/ 8/ 所示/ ./ 具体/ 为/ :/ (/ 1/ )/ 用户/ 管理/ 服务/ 构件/ (/ Usc/ )/ 处理/ 用户/ 的/ 访问控制/ ;/ (/ 2/ )/ 调用/ 应用/ 管理/ 服务/ 构件/ (/ Asc/ )/ 完成/ 用户/ 应用/ 请求/ 的/ 预处理/ ;/ (/ 3/ )/ 调用/ 资源管理/ 服务/ 构件/ (/ Rsc/ )/ 完成/ 资源分配/ 和/ 任务调度/ ,/ 由于/ 需要/ 进行/ 协商/ ,/ 所以/ 可能/ 需要/ 重复/ 多次/ 运行/ Rsc/ 构件/ ,/ 假设/ 为/ k/ 次/ ;/ (/ 4/ )/ 调用/ 两个/ 执行/ 管理/ 服务/ 构件/ (/ Esc/ )/ 进行/ 并发/ 任务/ 的/ 处理/ ;/ (/ 5/ )/ 将/ 处理结果/ 传送/ 给/ Usc/ 构件/ ,/ 然后/ 按照/ 用户/ 需求/ 显示/ 给/ 用户/ ./ 该/ 执行/ 过程/ 可以/ 形式化/ 表示/ 为/ “/ Usc/ ;/ Asc/ ;/ (/ η/ Rsc/ )/ ;/ (/ Esc1/ ‖/ Esc2/ )/ ;/ Usc/ ”/ ./ Page10/ 该/ 应用/ 场景/ 对应/ 的/ 排队/ Petri/ 网/ 模型/ 如图/ 9/ 所示/ ./ 队列/ 库所/ Q/ 表示/ 用户/ 请求/ 队列/ ,/ 库所/ U/ 表示/ 请求/ 任务/ 等待/ 被/ 链路/ 接受/ ,/ 库所/ Pi/ 表示/ 管理/ 任务/ t/ 完成/ 上/ 一个/ 阶段/ 的/ 工作/ 后/ 等待/ 进入/ 下一阶段/ 处理/ ./ 图/ 9/ 管理/ 服务/ 示例/ 的/ QPN/ 表示/ 通过/ Petri/ 网/ 的/ 变迁/ 触发/ 机制/ 的/ 设计/ 可以/ 描述/ 服务/ 构件之间/ 多种/ 交互/ 关系/ ,/ 瞬时/ 变迁/ sti/ ,/ iti/ 和/ cti/ 分别/ 为/ 顺序/ 、/ 重复/ 和/ 并发/ 方式/ 下/ 的/ 过程/ 变迁/ ./ 图/ 9/ 中/ 变迁/ 的/ 设计/ 如表/ 3/ 所示/ ,/ 符号/ “/ A/ {/ x/ }/ →/ B/ {/ y/ }/ ”/ 表示/ 模型/ 中/ 变迁/ 的/ 触发/ 模式/ (/ firingmode/ )/ ,/ 托肯/ “/ x/ ”/ 在/ 一次/ 变迁/ 中由库/ 所/ A/ 迁出/ 后以/ “/ y/ ”/ 的/ 形式/ 存放/ 在/ 库/ 所/ B/ 中/ ./ 符号/ “/ A/ {/ x/ }/ →/ {/ }/ ”/ 表示/ “/ x/ ”/ 在/ 变迁/ 中由库/ 所/ A/ 迁出/ 后/ 不/ 留在/ 任何/ 库所中/ ,/ 而是/ 被/ 销毁/ (/ destroy/ )/ ./ ut1/ ,/ ut2st1/ ,/ st2/ ,/ st3/ ,/ st4/ ,/ st5/ ,/ st6/ ,/ 1/ :/ In/ {/ t/ }/ →/ Out/ {/ t/ }/ st7st8st9it1it2lt3it4it5ct1ct2/ ,/ ct3/ ,/ ct4/ ,/ ct5/ ,/ ct6/ ,/ ct71/ :/ In/ {/ t/ }/ →/ Out/ {/ t/ }/ ct85/ 实验/ 与/ 分析/ 5.1/ 参数/ 配置/ 本文/ 采用/ QPME1/ ./ 01/ 软件包/ [/ 43/ -/ 44/ ]/ 计算/ 稳态/ 时/ 加粗/ 的/ 带线/ 圆圈/ Li/ 和/ Ni/ 分别/ 表示/ 链路/ 和/ 节点/ 的/ 排队/ Petri/ 网/ ./ 所有/ 被/ 调用/ 的/ 服务/ 构件/ 可能/ 分布/ 在/ 多个/ 硬件资源/ 上/ ,/ 服务/ 构件/ 的/ 处理/ 能力/ 依赖于/ 处理器/ 个数/ ./ 模型/ 中/ 每个/ 库所/ 的/ 吞吐量/ 、/ 平均/ 逗留/ 时间/ 以及/ 平均/ 标识/ 的/ 数量/ ,/ 预测/ 服务/ 构件/ 和/ 管理/ 服务/ 的/ 平均/ 响应/ 时间/ 和/ 利用率/ ./ 服务/ 请求/ 的/ 发生/ 时间/ 一般/ 可设/ 为/ 随机变量/ ,/ 运行/ 服务/ 构件/ 的/ 节点/ 队列/ 根据/ 服务/ 管理/ 请求/ 的/ 到达/ 先后/ 确定/ 对象/ 的/ 处理/ 序列/ ,/ 服务/ 策略/ 是/ 预先确定/ 的/ ,/ 信源/ 分布/ 也/ 是/ 事先/ 确定/ 的/ ./ 由于/ QPME/ 现有/ 版本/ 还/ 不/ 支持/ 时间/ 变迁/ 的/ 直接/ 使用/ ,/ 本文/ 的/ 仿真/ 实验/ 采用/ 瞬时/ 变迁/ 和/ 队列/ 库所/ 组合/ 等价/ 替换/ 时间/ 变迁/ lt6/ 和/ nt6/ ,/ 完成/ 的/ 服务/ 构件/ QPN/ 模型/ 如图/ 10/ 所示/ ./ 新/ 增加/ 的/ 队列/ 库所/ Q/ 模拟/ 稳定/ 的/ 管理/ 任务/ 产生/ 源/ ,/ LR/ 表示/ 通信/ 链路/ 失效/ 后/ 等待/ 失效/ 修复/ 处理/ ,/ NR/ 表示/ 节点/ 软硬件/ 失效/ 后/ 管理/ 任务/ 等待/ 失效/ 修复/ 处理/ ,/ 库所/ Link/ 、/ Node/ 和/ SC/ 分别/ 用来/ 跟踪/ 和/ 描述/ 链路/ 、/ 节点/ 软硬件/ 和/ 服务/ 构件/ 的/ 总体/ 执行/ 状况/ ./ 由于/ 服务/ 管理/ 请求/ 的/ 到来/ 服从/ 泊松/ 分布/ ,/ 服务/ 请求/ 的/ 处理/ 时间/ 、/ 失效/ 修复/ 时间/ 服从/ 指数分布/ ,/ 所以/ 库所/ 属性/ 如表/ 4/ 所示/ ./ 图/ 10/ 中/ 变迁/ 的/ 设计/ 如表/ 5/ 所示/ ,/ 对于/ lt1/ 和/ nt1/ 这样/ 的/ 变迁/ 属于/ 自由选择/ 冲突/ 模型/ ,/ 选择/ 哪/ 一个/ 变迁/ 模式/ 实施/ 并/ 不/ 依赖于/ 库所中/ 的/ 标识/ ,/ 而/ 取决于/ 变迁/ 模式/ 的/ 触发/ 权值/ (/ firingweight/ )/ ./ 令/ 变迁/ lt1/ 的/ 变迁/ 模式/ 的/ 触发/ 权值/ 分别/ 为/ w/ (/ 1/ )/ 和/ w/ (/ 2/ )/ ,/ 且/ w/ (/ 2/ )/ =/ 1/ ,/ 那么/ φ/ L/ =/ w/ (/ 2/ )/ 失效/ 概率/ φ/ L/ 成/ 近似/ 倒数/ 关系/ ./ 同理/ ,/ 可以/ 求得/ 变迁/ st1/ 的/ 变迁/ 模式/ 的/ 触发/ 权值/ ./ 变迁/ lt3/ 和/ nt3/ 的/ 设计/ 将/ 有效/ 和/ 失效/ 管理/ 任务/ 区别对待/ ,/ 有效/ 任务/ 进入/ 到/ 后续/ 环节/ (/ mode1/ )/ ,/ 无效/ 任务/ 转化/ 为/ 一定/ 的/ 负载/ (/ mode2/ )/ ./ Page11/ 图/ 10/ 服务/ 构件/ 的/ QPN/ 模型库/ 所托肯/ 初始值/ 队列/ 类型/ 离队/ 规则/ 参数/ p1Q/ {/ m/ }/ {/ 1/ }/ G/ // M/ // // ISNormal0/ ./ 0001LS/ ,/ NS/ {/ m/ }/ {/ 0/ }/ naFIFOLE/ ,/ NE/ {/ a/ ,/ r/ }/ {/ 1/ ,/ 1/ }/ naNormalLF/ ,/ NF/ {/ f1/ ,/ f2/ }/ {/ 0/ ,/ 0/ }/ naNormalLC1/ ,/ LC2/ ,/ NC1/ ,/ NC2L1/ {/ l/ ,/ lf/ }/ {/ 0/ ,/ 0/ }/ naFIFOL2/ {/ l/ }/ {/ 0/ }/ naFIFOLP/ {/ l/ }/ {/ 0/ }/ G/ // M/ // 1/ // FCFSNormal0/ ./ 005LR/ {/ lf/ }/ {/ 0/ }/ G/ // M/ // // ISNormal0/ ./ 0001N1/ {/ n/ ,/ nf/ }/ {/ 0/ ,/ 0/ }/ naFIFON2/ {/ n/ }/ {/ 0/ }/ naFIFONP/ {/ n/ ,/ w/ }/ {/ 0/ ,/ 0/ }/ G/ // M/ // 2/ // PSNormal/ {/ 0.0001/ ,/ 0.0001/ }/ NR/ {/ nf/ }/ {/ 0/ }/ G/ // M/ // // ISNormal0/ ./ 00001EW/ {/ w/ }/ {/ 1/ }/ G/ // M/ // // ISNormal0/ ./ 000005Link/ ,/ Node/ ,/ SC/ {/ m/ }/ {/ 0/ }/ naNormal/ 变迁/ st1/ :/ Q/ {/ m/ }/ →/ Link/ {/ m/ }/ +/ SC/ {/ m/ }/ +/ LS/ {/ m/ }/ +/ Q/ {/ m/ }/ lt11/ :/ LS/ {/ m/ }/ →/ L1/ {/ l/ }/ 2/ :/ LS/ {/ m/ }/ →/ L1/ {/ lf/ }/ lt21/ :/ L1/ {/ l/ }/ +/ LE/ {/ a/ }/ →/ LP/ {/ l/ }/ +/ LE/ {/ a/ }/ +/ LC1/ {/ c/ }/ 2/ :/ L1/ {/ l/ }/ +/ LE/ {/ a/ }/ +/ LC2/ {/ c/ }/ →/ LE/ {/ a/ }/ +/ LC1/ {/ c/ }/ lt31/ :/ LP/ {/ l/ }/ →/ L2/ {/ l/ }/ lt41/ :/ L2/ {/ l/ }/ +/ LE/ {/ r/ }/ +/ LC1/ {/ c/ }/ +/ Link/ {/ m/ }/ →/ lt51/ :/ L1/ {/ lf/ }/ +/ LE/ {/ a/ }/ +/ LE/ {/ r/ }/ →/ LR/ {/ lf/ }/ +/ LF/ {/ f1/ }/ +/ LF/ {/ f2/ }/ lt61/ :/ LR/ {/ lf/ }/ +/ LF/ {/ f1/ }/ +/ LF/ {/ f2/ }/ →/ LE/ {/ a/ }/ +/ LE/ {/ r/ }/ lt71/ :/ LC1/ {/ c/ }/ +/ LF/ {/ f1/ }/ →/ LC2/ {/ c/ }/ +/ LF/ {/ f1/ }/ lt81/ :/ LC2/ {/ c/ }/ +/ LF/ {/ f2/ }/ +/ L2/ {/ l/ }/ →/ LF/ {/ f2/ }/ nt11/ :/ NS/ {/ m/ }/ →/ N1/ {/ n/ }/ 2/ :/ NS/ {/ m/ }/ →/ N1/ {/ nf/ }/ nt21/ :/ N1/ {/ n/ }/ +/ NE/ {/ a/ }/ →/ NP/ {/ n/ }/ +/ NE/ {/ a/ }/ +/ NC1/ {/ c/ }/ 2/ :/ N1/ {/ n/ }/ +/ NE/ {/ a/ }/ +/ NC2/ {/ c/ }/ →/ NE/ {/ a/ }/ +/ NC1/ {/ c/ }/ nt31/ :/ NP/ {/ n/ }/ →/ Q/ {/ m/ }/ +/ N2/ {/ n/ }/ 2/ :/ EW/ {/ w/ }/ →/ {/ }/ nt41/ :/ N2/ {/ n/ }/ +/ SC/ {/ m/ }/ +/ Node/ {/ m/ }/ +/ NC1/ {/ c/ }/ +/ NE/ {/ r/ }/ →/ NE/ {/ r/ }/ nt51/ :/ N1/ {/ nf/ }/ +/ NE/ {/ a/ }/ +/ NE/ {/ r/ }/ +/ NE/ {/ ew/ }/ →/ nt61/ :/ NF/ {/ f1/ }/ +/ NF/ {/ f2/ }/ +/ NR/ {/ nf/ }/ →/ nt71/ :/ NC1/ {/ c/ }/ +/ NF/ {/ f1/ }/ →/ NC2/ {/ c/ }/ +/ NF/ {/ f1/ }/ nt71/ :/ NC2/ {/ c/ }/ +/ NF/ {/ f2/ }/ +/ N2/ {/ n/ }/ →/ NF/ {/ f2/ }/ nt81/ :/ EW/ {/ w/ }/ +/ NE/ {/ ew/ }/ →/ NE/ {/ ew/ }/ +/ NP/ {/ w/ }/ +/ EW/ {/ w/ }/ 5.2/ 数据分析/ 5.2/ ./ 1/ 失效率/ 和/ 修复/ 时间/ 的/ 影响/ 本文/ 分/ 两个/ 场景/ 讨论/ ./ 场景/ 1/ ./ 初始/ 时/ ,/ 变迁/ lt1/ 和/ st1/ 的/ w/ (/ 1/ )/ 都/ 取值/ 100000/ ,/ w/ (/ 2/ )/ 都/ 取值/ 1/ ,/ 表/ 4/ 中/ 其它/ 变迁/ 及/ 变迁/ 模式/ 的/ 触发/ 权值/ 也/ 设置/ 为/ 1/ ,/ 库所/ 的/ 队列/ 类型/ 和/ 参数/ p1/ 见表/ 3/ ,/ 然后/ 假设/ 其它/ 参数/ 不变/ ,/ 只有/ 链路/ 失效/ 概率/ φ/ L/ 即/ 变迁/ lt1/ 的/ w/ (/ 1/ )/ 发生变化/ ./ 场景/ 2/ ./ 初始/ 时/ ,/ 变迁/ lt1/ :/ w/ (/ 1/ )/ =/ 100000/ ,/ 变迁/ st1/ :/ w/ (/ 1/ )/ =/ 1000/ ,/ w/ (/ 2/ )/ 取值/ 1/ ,/ NR/ :/ p1/ =/ 0.00001/ ,/ 然后/ 假设/ 其它/ 参数/ 不变/ ,/ 只有/ 节点/ 失效/ 修复/ 时间/ (/ 即库/ 所/ NR/ 的/ 参数/ p1/ )/ 发生变化/ ./ 仿真/ 结果/ 见表/ 6/ ,/ 置信区间/ 为/ 95/ %/ ,/ 性能/ 属性/ 包括/ 稳态/ 时/ 的/ 到达/ 率/ (/ Ai/ )/ 、/ 负载量/ (/ Xi/ )/ 、/ 利用率/ (/ Ui/ )/ 和/ 平均/ 响应/ 时间/ (/ τ/ i/ )/ ./ 场景/ 1/ 中/ ,/ 在/ 稳定/ 任务/ 源/ (/ AQ/ )/ 的/ 驱动/ 下/ ,/ 随着/ w/ (/ 1/ )/ 由/ 100000/ 减小/ 到/ 1000/ ,/ 链路/ 失效率/ 依次/ 增加/ ,/ 导致/ 链路/ 失效/ 修复/ 环节/ (/ LR/ )/ 的/ 到达/ 率/ (/ ALR/ )/ 、/ 负载量/ (/ XLR/ )/ 和/ 利用率/ (/ ULR/ )/ 逐渐/ 增加/ ,/ 而/ 通信/ 环节/ (/ LP/ )/ 的/ 任务/ 到达/ 率/ (/ ALP/ )/ 、/ 负载量/ (/ XLP/ )/ 和/ 利用率/ (/ ULP/ )/ 下降/ ,/ 有效/ 任务/ 的/ 吞吐量/ 减少/ ,/ 越来越/ 多/ 的/ 任务/ (/ XLC2/ )/ 由于/ 失效/ 在/ 运行/ 期间/ 被/ 中断/ ./ 日益频繁/ 的/ 失效/ 扩大/ 了/ 修复/ 环节/ 的/ 时间延迟/ 对/ 链路/ 的/ 影响/ ,/ 使得/ 管理/ 任务/ 在/ 链路/ (/ Link/ )/ 中/ 的/ 平均/ 逗留/ 时间/ (/ τ/ Link/ )/ 变/ 长/ ,/ 单位/ 时间/ 内/ 逗留/ 在/ 链路/ 中/ 的/ 任务/ 数量/ (/ XLink/ )/ 快速/ 上升/ ,/ 进一步/ 影响/ 了/ 服务/ 构件/ 的/ 整体/ 性能/ ,/ 负载量/ (/ XSC/ )/ 和/ 平均/ 响应/ 时间/ (/ τ/ SC/ )/ 都/ 被迫/ 增加/ ./ 场景/ 2/ 中/ ,/ 链路/ 和/ 节点/ 的/ 失效率/ 保持/ 不变/ ,/ 保证/ 了/ 节点/ 的/ 任务/ 到达/ 率/ (/ ANS/ )/ 的/ 稳定/ ./ 随着/ 修复/ 环节/ (/ NR/ )/ 的/ 参数/ p1/ 由/ 0.00001/ 增大/ 为/ 0.001/ ,/ 节点/ 失效/ 修复/ 的/ 时间/ (/ τ/ NR/ )/ 逐渐/ 变/ 少/ ,/ 一方面/ 使得/ 节点/ 修复/ 环节/ (/ NR/ )/ 的/ 处理/ 能力/ 增强/ ,/ 负载量/ (/ XNR/ )/ 降低/ ,/ 另一方面/ 又/ 导致/ 节点/ 的/ 有效/ 运行/ 时间/ 相对/ 增加/ ,/ 有/ Page12/ 效/ 任务/ 到达/ 率/ (/ ANP/ (/ n/ )/ )/ 提高/ ,/ 节点/ 处理/ 能力/ (/ XNode/ )/ 增强/ ,/ 有效/ 任务/ 负载量/ (/ XNP/ (/ n/ )/ )/ 和/ 额外/ 负载/ (/ XNP/ (/ w/ )/ )/ 下降/ ./ NC2/ 刻画/ 了/ 节点/ 修复/ 后/ 抵消/ 新/ 进入/ 的/ 任务/ 的/ 数目/ ,/ 在/ 数值/ 上/ 等于/ 失效/ 时刻/ 逗留/ 在/ NP/ 中/ 的/ 任务/ 数目/ num1/ 和/ 修复/ 期间/ NP/ 完成/ 的/ 任务/ 数表/ 6/ 仿真/ 结果/ 比较/ lt1/ :/ w/ (/ 1/ )/ 10000010000AQ9/ ./ 9981E/ -/ 59.9878/ E/ -/ 59.9875/ E/ -/ 5ANS9/ ./ 9933E/ -/ 51.0011/ E/ -/ 41.0014/ E/ -/ 4ALR5/ ./ 0000E/ -/ 108.5001/ E/ -/ 91.0030/ E/ -/ 7ANR9/ ./ 6101E/ -/ 81.02201/ E/ -/ 79.4801/ E/ -/ 8XLR3/ ./ 8968E/ -/ 69.5544/ E/ -/ 50.001005/ XNR0/ ./ 0096820.0010299/ ./ 8402E/ -/ 5ULR3/ ./ 8968E/ -/ 69.5544/ E/ -/ 50.001005/ τ/ NR100754/ ./ 889110077.73771037/ ./ 9824ALP9/ ./ 9980E/ -/ 59.9869/ E/ -/ 59.9775/ E/ -/ 5ANP/ (/ n/ )/ 9.981461/ E/ -/ 59.992573/ E/ -/ 59.992582/ E/ -/ 5XLP0/ ./ 020410.020390/ ./ 02038XNP/ (/ n/ )/ 1.47071/ ./ 38141.3697/ ULP0/ ./ 020010.019990/ ./ 01996XNP/ (/ w/ )/ 0.072670/ ./ 069250.06917/ XLC10/ ./ 020410.020390/ ./ 02038XNC11/ ./ 46851.37931/ ./ 3673ULC10/ ./ 020010.019990/ ./ 01996UNC10/ ./ 6686990.6713920/ ./ 670217XLC2ULC2XLink1/ ./ 605139.7711488/ ./ 5048XNode1253/ ./ 13741152.14191151/ ./ 2348/ τ/ Link16047/ ./ 5035398055.23184891007/ ./ 2996/ τ/ Node1/ ./ 25396E71/ ./ 150867E71/ ./ 1497E7XSC15/ ./ 601650.5698497/ ./ 5156XSC1258/ ./ 55661160.93291155/ ./ 2123/ τ/ SC156044/ ./ 7427506098.99154981225/ ./ 7033/ τ/ SC1/ ./ 2594E71/ ./ 15963E71/ ./ 1537E75/ ./ 2.2/ 自主性/ 的/ 作用/ 在/ 图/ 10/ 建模/ 的/ 基础/ 上/ ,/ 赋予/ 服务/ 构件/ 一定/ 的/ 自/ 适应能力/ ,/ 即/ 能够/ 及时发现/ 任务/ 失效/ 并/ 立即/ 重新/ 调度/ 管理/ 任务/ 的/ 执行/ ,/ 那么/ 得到/ 扩展/ 的/ 服务/ 构件/ QPN/ 模型/ 如图/ 11/ 所示/ ,/ 新增/ 的/ 库/ 所/ LC3/ 和/ NC3/ 分别/ 用来/ 记录/ 链路/ 和/ 节点/ 失效/ 时刻/ 已经/ 接受/ 但/ 被迫/ 中断/ 的/ 任务/ 数目/ ./ 变迁/ 模式/ 的/ 改变/ 如表/ 7/ 所示/ ./ 变迁/ lt1/ 和/ st1/ 的/ w/ (/ 1/ )/ 都/ 取值/ 1000/ ,/ w/ (/ 2/ )/ 都/ 取值/ 1/ ,/ 表/ 5/ 中/ 其它/ 变迁/ 及/ 变迁/ 模式/ 的/ 触发/ 权值/ 也/ 设置/ 为/ 1/ ,/ 库所/ 的/ 队列/ 类型/ 和/ 参数/ p1/ 见表/ 4/ ,/ 两个/ 模型/ 的/ 度量/ 结果/ 对比/ 见表/ 8/ ./ 在/ 相同/ 的/ 初始/ 配置/ 条件/ 下/ ,/ 引入/ 图/ 11/ 扩展/ 的/ 服务/ 构件/ QPN/ 模型/ 目/ num2/ 的/ 差/ (/ num1/ -/ num2/ )/ ./ 修复/ 时间/ 的/ 缩短/ 使得/ num2/ 的/ 值/ 减少/ ,/ 因此/ NC2/ 的/ 负载量/ (/ XNC2/ )/ 和/ 利用率/ (/ UNC2/ )/ 都/ 提高/ 了/ ./ 对于/ 节点/ 来讲/ ,/ 节点/ 处理/ 能力/ (/ XNode/ )/ 的/ 提高/ 减少/ 了/ 任务/ 完成/ 时间/ (/ τ/ Node/ )/ ,/ 进而/ 影响/ 到/ 服务/ 构件/ 的/ 整体/ 性能/ (/ XSC/ ,/ τ/ SC/ )/ ./ NR/ :/ p10/ ./ 000010.0001/ 自/ 适应/ 失效/ 重/ 调度/ 机制/ 后/ ,/ 链路/ 、/ 节点/ 和/ 服务/ 构件/ 的/ 到达/ 率/ 下降/ ,/ 负载量/ (/ Xi/ )/ 、/ 利用率/ (/ Ui/ )/ 和/ 平均/ 响应/ 时间/ (/ τ/ i/ )/ 优化/ 明显/ ./ 变迁/ lt51/ :/ L1/ {/ lf/ }/ +/ LE/ {/ a/ }/ +/ LE/ {/ r/ }/ →/ lt71/ :/ LC1/ {/ c/ }/ +/ LF/ {/ f1/ }/ →/ LC2/ {/ c/ }/ +/ LF/ {/ f1/ }/ +/ LC3/ {/ c/ }/ lt91/ :/ LC3/ {/ c/ }/ →/ LS/ {/ m/ }/ nt52/ :/ N1/ {/ nf/ }/ +/ NE/ {/ a/ }/ +/ NE/ {/ r/ }/ +/ NE/ {/ ew/ }/ →/ nt71/ :/ NC1/ {/ c/ }/ +/ NF/ {/ f1/ }/ →/ NC2/ {/ c/ }/ +/ NF/ {/ f1/ }/ +/ NC3/ {/ c/ }/ nt101/ :/ NC3/ {/ c/ }/ →/ NS/ {/ m/ }/ Page13/ 表/ 8/ 度量/ 结果/ 对比度/ 量/ 模型/ 1ALink1/ ./ 0014E/ -/ 49.9998/ E/ -/ 5ANode1/ ./ 00036E/ -/ 49.9998/ E/ -/ 5ASC1/ ./ 001434E/ -/ 49.999808/ E/ -/ 5XLink527/ ./ 29740.02235/ XNode1347/ ./ 03431.6544/ XSC1874/ ./ 33171.67678/ ULink0/ ./ 9999450.020951/ UNode0/ ./ 9998650.680174/ USC0/ ./ 9999870.687062/ τ/ Link5265147/ ./ 3879223.4963/ τ/ Node1/ ./ 3466E716544/ ./ 5983/ τ/ SC1/ ./ 87165E716768/ ./ 09496/ 况下/ 的/ 性能/ 与/ 可用性/ 进行/ 分析/ ./ 为此/ ,/ 在/ 图/ 9/ 管理/ 服由/ 结果/ 可知/ ,/ 要/ 想/ 获得/ 满意/ 的/ 性能/ ,/ 一方面/ 必须/ 降低/ 服务/ 构件/ 在/ 链路/ 和/ 节点/ 软硬件/ 方面/ 的/ 失效率/ ,/ 务/ 示例/ 的/ 基础/ 上/ 对/ 应用服务/ 构件/ Asc/ 进行/ 冗余/ 处理/ ,/ 对应/ 的/ 执行力/ 模型/ 如图/ 12/ 所示/ ./ 减少/ 发生/ 故障/ 的/ 可能/ ;/ 另一方面/ ,/ 必须/ 缩短/ 修复/ 时间/ ,/ 提高/ 服务/ 构件/ 的/ 失效/ 修复/ 能力/ ./ 除了/ 服务/ 构件/ 自/ 增加/ 的/ 变迁/ 触发/ 模式/ 如表/ 9/ 所示/ ./ 身/ 的/ 优化/ ,/ 加强/ 对/ 失效/ 发生/ 的/ 实时/ 监控/ 和/ 自主/ 处理/ 能力/ 显得/ 更加/ 重要/ ./ 5.2/ ./ 3/ 容错/ 的/ 作用/ 提高/ 可靠性/ 的/ 主要/ 方法/ 是/ 冗余/ ,/ 包括/ 设备/ 冗余/ 、/ 信息冗余/ 、/ 时间/ 冗余/ 等/ ./ 设备/ 冗余/ 包括/ 硬件/ 冗余/ 和/ 软件/ 冗余/ ./ 本文/ 的/ 执行力/ 模型/ 能够/ 对/ 服务/ 构件/ 冗余/ 情图/ 12/ 冗余/ 处理/ 后/ 管理/ 服务/ 示例/ 的/ QPN/ 表示/ 实验/ 结果表明/ ,/ 经过/ 冗余/ 处理/ 后/ 管理/ 服务/ 的/ 可靠性/ 和/ 性能/ 都/ 有所提高/ ,/ 其/ 变化趋势/ 和/ 理论/ 分析/ 是/ 一致/ 的/ ./ 此外/ ,/ 提出/ 的/ 执行力/ 建模/ 方法/ 也/ 能/ 很/ 好/ 地/ 反映/ 服务/ 构件/ 组成/ 和/ 交互方式/ 对/ 管理/ 服务/ 运行/ 效果/ 的/ 影响/ ./ 6/ 结论/ 和/ 下/ 一步/ 工作/ 随着/ 信息技术/ 的/ 迅猛发展/ ,/ 大规模/ 、/ 开放/ 、/ 异构/ 、/ 动态/ 的/ 信息/ 服务/ 系统/ 不断涌现/ ,/ 如/ 网格/ 计算/ 、/ 云/ 计算/ ft2/ ,/ ft3/ ,/ ft4/ ,/ ft51/ :/ In/ {/ t/ }/ →/ Out/ {/ t/ }/ 变迁/ ft11/ :/ P1/ {/ t/ }/ →/ L21/ {/ t/ }/ +/ L22/ {/ t/ }/ +/ P21/ {/ n/ }/ ft61/ :/ P21/ {/ n/ }/ +/ P22/ {/ t/ }/ →/ P2/ {/ t/ }/ +/ P24/ {/ b/ }/ ft71/ :/ P21/ {/ n/ }/ +/ P23/ {/ t/ }/ →/ P2/ {/ t/ }/ +/ P25/ {/ b/ }/ ft81/ :/ P24/ {/ b/ }/ +/ P23/ {/ t/ }/ →/ {/ }/ ft91/ :/ P25/ {/ b/ }/ +/ P22/ {/ t/ }/ →/ {/ }/ 和/ 普适/ 计算/ 等/ ./ 这些/ 系统/ 越来越/ 倾向/ 于/ 构建/ 面向/ 服务/ 的/ 计算/ 和/ 资源管理/ 平台/ ,/ 实现/ 功能/ 软件/ 实体/ 的/ 敏捷/ 部署/ ,/ 并/ 能/ 根据/ 环境/ 变化/ 和/ 用户/ 需求/ 对/ 服务平台/ 进行/ 自我管理/ ./ 但是/ 从/ 已有/ 的/ 研究成果/ [/ 3/ ]/ 看/ ,/ 自我管理/ 还/ 未/ 形成/ 系统/ 的/ 、/ 成熟/ 的/ 理论体系/ ,/ 所/ 涉及/ 到/ 的/ 技术/ 问题/ 也/ 是/ 多方面/ 多层次/ 的/ ,/ 还/ 需要/ 更/ 深入/ 的/ 研究/ ./ 本文/ 提出/ 的/ 自/ 管理/ 服务平台/ 参考模型/ 以/ 构件/ 和/ 服务/ 作为/ 基本/ 组成/ 方式/ ,/ 将/ 构件/ 的/ 紧/ 耦合/ 和/ 服务/ 的/ 松/ 耦合/ 结合/ 起来/ ,/ 以/ 构件/ 的/ 形式/ 实现/ 功能/ ,/ 以/ 服务/ 的/ 形式/ 实现/ 交互/ ,/ 形成/ 可/ 伸缩/ 的/ 自动化/ 中间件/ 管理/ 模/ Page14/ 式/ ./ 通过/ 设计/ 基于/ 分层/ 反馈/ 的/ 自主/ 控制/ 框架/ 提高/ 了/ 服务平台/ 自/ 管理/ 的/ 可扩展性/ 和/ 灵活性/ ,/ 能够/ 保证/ 各个/ 组成/ 部件/ 能够/ 有机/ 地/ 结合/ 起来/ 形成/ 高效/ 、/ 有序/ 的/ 虚拟/ 计算环境/ ./ 针对/ 面向/ Internet/ 的/ 服务平台/ 中/ 资源/ 故障/ 和/ 构件/ 失效/ 多发/ 的/ 情况/ ,/ 以/ 综合/ 考虑/ 了/ 可用性/ 和/ 性能/ 的/ 执行力/ 模型/ 作为/ 自主/ 控制/ 的/ 决策/ 基础/ ,/ 有助于/ 把握/ 服务平台/ 的/ 内部结构/ 和/ 外部环境/ 的/ 不/ 确定/ 特性/ ,/ 并/ 保持/ 服务平台/ 运行/ 的/ 高性能/ ./ 服务平台/ 执行力/ 模型/ 既/ 涉及/ 到/ 软硬件/ 自身/ 的/ 运行/ 状态/ ,/ 也/ 受制于/ 多个/ 服务/ 构件/ 的/ 交互/ 关系/ 和/ 组织/ 结构/ 的/ 选择/ ./ 执行力/ 建模/ 过程/ 中/ 运用/ 了/ 马尔可夫/ 过程/ 、/ 随机/ Petri/ 网/ 和/ 排队/ 论/ ,/ 有利于/ 对/ 服务平台/ 的/ 非/ 功能/ 特性/ 进行/ 定性/ 和/ 定量分析/ ./ 仿真/ 结果表明/ 基于/ 排队/ Petri/ 网/ 的/ 执行力/ 模型/ 能够/ 反映/ 失效率/ 和/ 修复/ 能力/ 对/ 性能/ 和/ 可用性/ 的/ 影响/ ,/ 并/ 验证/ 了/ 自主/ 控制/ 方法/ 对/ 提高/ 管理/ 服务/ 执行力/ 的/ 积极/ 作用/ ./ 为了/ 更好/ 地/ 说明/ 所/ 提出/ 方法/ 的/ 可行性/ ,/ 我们/ 在/ 已经/ 完成/ 的/ 国家/ “/ 十一五/ ”/ 科技/ 支撑/ 计划/ 项目/ 子课题/ “/ 数字/ 教育资源/ 集成/ 与/ 共享/ ”/ 的/ 系统/ 成果/ 基础/ 上/ 研制/ 了/ 相关/ 原型/ 系统/ ./ 数字/ 教育资源/ 集成/ 与/ 共享/ 系统/ 平台/ 采用/ 基于/ 构件/ 和/ 面向/ 服务/ 的/ 思想/ ,/ 选择/ IBMRational/ 进行/ 服务/ 构件/ 和/ 业务/ 服务/ 的/ 设计/ 、/ 开发/ 和/ 封装/ ,/ 并/ 采用/ WebSphere/ 进行/ 服务平台/ 的/ 部署/ ./ 服务/ 架构/ 采用/ 对内/ 和/ 对外/ 两级/ 分布式/ 结构/ ,/ 其中/ 内部/ 服务/ 包括/ 副本/ 管理/ 服务/ 、/ 目录/ 管理/ 服务/ 、/ 存储/ 调度/ 服务/ 与/ 传输/ 控制/ 服务/ ,/ 对外/ 服务/ 包括/ 资源/ 标准化/ 服务/ 、/ 资源/ 注册/ 服务/ 、/ 统计分析/ 服务/ 、/ 资源/ 访问/ 服务/ 、/ 资源管理/ 服务/ 以及/ 信息检索/ 服务/ ./ 原型/ 系统/ 的/ 设计/ 思路/ 是/ 利用/ 所/ 提出/ 的/ 方法/ 对/ 该/ 系统/ 平台/ 的/ 执行力/ 进行/ 建模/ ,/ 并/ 通过/ 在线/ 仿真/ 工具/ QPME/ 对/ 所/ 部属/ 服务/ 的/ 执行力/ 进行/ 预测/ 与/ 评估/ ,/ 然后/ 结合/ 服务/ 构件/ 的/ 配置/ 、/ 诊断/ 、/ 修复/ 和/ 重/ 配置/ 技术/ ,/ 实现/ 系统/ 平台/ 的/ 自主/ 控制/ ./ 已经/ 完成/ 的/ 工作/ 表明/ 所/ 提出/ 的/ 方法/ 能够/ 有效/ 提高/ 系统/ 平台/ 的/ 自/ 管理/ 能力/ ,/ 但/ 限于/ 篇幅/ ,/ 具体/ 细节/ 将/ 另文/ 阐述/ ./ 在/ 下/ 一步/ 的/ 工作/ 中/ ,/ 我们/ 将/ 针对/ 服务平台/ 的/ 功能性/ 和/ 非/ 功能性/ 需求/ ,/ 设计/ 合适/ 的/ 自主/ 控制策略/ ,/ 探讨/ 服务/ 构件/ 的/ 性能/ 和/ 可用性/ 监控/ 技术/ ,/ 并/ 在/ 此基础/ 上/ 对/ 原型/ 系统/ 进行/ 扩展/ ,/ 进一步/ 验证/ 其/ 有效性/ 并/ 进行/ 改进/ ./ 致谢/ 衷心感谢/ SamuelKounev/ 博士/ 提供/ 的/ 排队/ Petri/ 网/ 仿真/ 软件/ QPME1/ ./ 01/ 对/ 本文/ 研究/ 工作/ 的/ 帮助/ !/ 

