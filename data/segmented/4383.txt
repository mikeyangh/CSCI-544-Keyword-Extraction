Page1QoS/ 保证/ 的/ 数据中心/ 动态/ 资源/ 供应/ 方法/ 李青/ 1/ )/ ,/ 2/ )/ ,/ 3/ )/ 李勇/ 1/ )/ ,/ 2/ )/ ,/ 3/ )/ 涂/ 碧波/ 2/ )/ 孟丹/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 中国科学院计算技术研究所/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 信息工程/ 研究所/ 北京/ 100093/ )/ 3/ )/ (/ 中国科学院/ 大学/ 北京/ 100049/ )/ 摘要/ 在/ 满足/ 应用/ QoS/ 的/ 前提/ 下/ ,/ 提高/ 系统/ 的/ 资源/ 利用率/ ,/ 是/ 数据中心/ 资源管理/ 的/ 一个/ 难点/ ,/ 原因/ 在于/ 应用/ 的/ 资源/ 消耗/ 是/ 动态变化/ 的/ ./ 为了/ 保证/ 应用/ 的/ QoS/ ,/ 需要/ 实时/ 预测/ 应用/ 的/ 资源/ 需求/ ,/ 并/ 以此/ 为/ 基础/ 动态/ 按/ 需/ 供应/ 资源/ ./ 已有/ 的/ 资源/ 预测/ 算法/ 可以/ 分为/ 两类/ :/ 一类/ 需要/ 与/ 应用/ 进行/ 实时/ 交互/ 以/ 监测/ 负载/ 和/ 性能/ ,/ 预测/ 精度高/ ,/ 但/ 扩展性/ 差/ ;/ 另一类/ 只/ 需要/ 在/ 外部/ 监测/ 应用/ 的/ 资源/ 消耗/ ,/ 扩展性/ 好/ ,/ 但是/ 现有/ 算法/ 的/ 预测/ 精度/ 较/ 低/ ./ 该文/ 针对/ 第二类/ 方法/ 的/ 不足/ ,/ 结合/ 全局/ 及/ 局部/ 的/ 资源/ 消耗/ 变化趋势/ 来/ 改进/ 已有/ 的/ 预测/ 算法/ ./ 实验/ 证明/ 改进/ 后/ 的/ 预测/ 精确度/ 可以/ 达到/ 95/ %/ 以上/ ./ 资源/ 需求/ 的/ 动态变化/ 会/ 导致/ 节点/ 资源/ 无法/ 满足/ 所有/ 应用/ 的/ QoS/ ,/ 常用/ 的/ 解决/ 方法/ 是/ 采用/ 虚拟机/ 迁移/ 进行/ 负载平衡/ ,/ 但是/ 迁移/ 虚拟/ 机会/ 带来/ 相当/ 大/ 的/ 额外/ 资源/ 消耗/ ./ 该文/ 提出/ 了/ 一种/ 作业/ 资源/ 匹配/ 算法/ ,/ 对/ 数据中心/ 所有/ 作业/ 进行/ 布局/ ,/ 使/ 不同/ 优先级/ 、/ 不同/ 资源/ 需求/ 及/ 变化规律/ 的/ 作业/ 在/ 节点/ 上/ 混合/ 部署/ ,/ 不仅/ 极大/ 地/ 降低/ 了/ 发生/ 节点/ 资源/ 紧缺/ 的/ 频度/ ,/ 而且/ 实验/ 证明/ ,/ 该/ 算法/ 在/ 相同/ 的/ 资源/ 需求/ 下/ ,/ 还/ 能/ 提高/ 应用/ 的/ 性能/ ./ 关键词/ 数据中心/ ;/ 混合/ 部署/ ;/ 虚拟化/ ;/ 作业/ 资源/ 匹配/ 算法/ ;/ 资源/ 预测/ 算法/ ;/ 云/ 计算/ ;/ 大/ 数据/ 1/ 引言/ 近年来/ 互联网/ 业务/ 蓬勃发展/ ,/ 业务/ 类型/ 越来越/ 多/ ,/ 应用/ 的/ 资源/ 需求/ 呈现出/ 多样化/ 特征/ :/ CPU/ 密集/ 、/ I/ // O/ 密集/ 、/ 网络/ 密集/ 等/ ./ 并且/ ,/ 应用/ 的/ 资源/ 需求/ 还/ 随着/ 时间/ 动态变化/ ,/ 尤其/ 是/ 在线/ 网络应用/ ./ 如图/ 1/ 所示/ 为/ 某/ 互联网/ 公司/ 一台/ 运行/ 某/ 在线/ 游戏/ 的/ 4/ 核/ 节点/ 连续/ 24/ 小时/ CPU/ 负载/ 的/ 变化/ 情况/ ,/ 波峰/ 时/ 的/ 资源/ 消耗/ 为/ 波谷/ 时/ 的/ 数倍/ ./ 为了/ 节省/ 软硬件/ 成本/ ,/ 提高/ 系统资源/ 利用率/ ,/ 数据中心/ 需要/ 合理/ 地/ 调度/ 各类/ 作业/ 并/ 为/ 其/ 分配资源/ ,/ 使得/ 系统资源/ 有序/ 复用/ ,/ 达到/ 负载平衡/ ./ 然而/ ,/ 应用/ 对/ 资源/ 需求/ 的/ 多样性/ 和/ 动态性/ 给/ 资源管理/ 带来/ 了/ 挑战/ :/ 既/ 要/ 满足/ 各个/ 应用/ 的/ 服务质量/ (/ QoS/ )/ ,/ 又/ 要/ 提高/ 系统/ 的/ 资源/ 利用率/ ./ 应对/ 这个/ 挑战/ 的/ 难点/ 之一/ 是/ 如何/ 准确/ 实时/ 地/ 预测/ 应用/ 的/ 资源/ 需求/ ,/ 从而/ 动态/ 地为/ 应用/ 供应/ 资源/ ./ 目前/ 已有/ 的/ 预测/ 技术/ 根据/ 输入/ 可以/ 分为/ 两类/ :/ 一类/ 是/ 根据/ 应用/ 当前/ 的/ 负载/ 、/ 性能/ 和/ 资源/ 消耗/ 来/ 预测/ 下/ 一个/ 时间/ 周期/ 的/ 资源/ 需求/ ,/ 由于/ 应用/ 的/ 性能指标/ 和/ 负载/ 的/ 类型/ 具有/ 多样性/ ,/ 这/ 类/ 方法/ 需要/ 为/ 每种/ 应用/ 设计/ 不同/ 的/ 监控/ 模块/ ,/ 而且/ 要/ 与/ 应用/ 进行/ 交互/ 以/ 获得/ 应用/ 的/ 当前/ 性能/ 及/ 负载/ ./ 因而/ ,/ 这/ 类/ 方法/ 的/ 一个/ 显著/ 不足/ 就是/ 通用性/ 和/ 扩展性/ 差/ ./ 另一类/ 仅仅/ 依据/ 外围/ 监测/ 的/ 资源/ 消耗/ 来/ 预测/ ,/ 已有/ 预测/ 机制/ 有/ :/ 线性/ 增加/ 、/ 指数/ 下降/ ,/ 大幅/ 增加/ 、/ 小幅/ 下降/ ,/ 服务/ 分级/ 等/ ,/ 这/ 类/ 方法/ 的/ 优点/ 是/ 简单/ 实用/ ,/ 不足/ 是/ 预测/ 机制/ 太/ 简单/ 导致/ 预测/ 精度/ 不高/ ./ 本文/ 针对/ 第二类/ 方法/ 的/ 不足/ ,/ 结合/ 全局/ 及/ 局部/ 的/ 资源/ 消耗/ 变化趋势/ 进行/ 改进/ ./ 应对/ 这个/ 挑战/ 的/ 难点/ 之二/ 是/ 如何/ 有效/ 地/ 动态/ 供应/ 资源/ ./ 数据中心/ 资源管理/ 的/ 目的/ 是/ 整合/ 服务/ 、/ 平衡/ 负载/ 、/ 充分利用/ 资源/ ,/ 不仅/ 需要/ 提高/ 单台/ 节点/ 的/ 资源/ 利用率/ ,/ 还/ 需要/ 平衡/ 整个/ 数据中心/ 的/ 负载/ ./ 资源/ 需求/ 的/ 动态变化/ 会/ 导致/ 节点/ 资源/ 无法/ 满足/ 所有/ 应用/ 的/ QoS/ ,/ 造成/ 节点/ 负载/ 不/ 均衡/ ./ 常用/ 的/ 解决/ 方法/ 是/ 通过/ 虚拟机/ 迁移/ ,/ 将/ 应用/ 迁移/ 到/ 其它/ 负载/ 较/ 低/ 的/ 节点/ 上/ ./ 但是/ ,/ 迁移/ 虚拟/ 机会/ 带来/ 相当/ 大/ 的/ 额外/ 资源/ 消耗/ ,/ 尤其/ 是/ 网络资源/ ,/ 而且/ 在/ 迁移/ 的/ 过程/ 中/ ,/ 应用/ 的/ 性能/ 也/ 会/ 受到/ 影响/ ./ 虚拟化/ 是/ 数据中心/ 服务/ 整合/ 的/ 使/ 能/ 技术/ ,/ 依据/ 实现/ 机制/ 可以/ 分为/ 两类/ :/ 一类/ 是/ 以/ XEN/ [/ 1/ ]/ 为/ 代表/ 的/ Hypervisor/ 类/ 虚拟化/ 技术/ ,/ 另一类/ 是/ 以/ 容器/ (/ LinuxContainer/ ①/ )/ 为/ 代表/ 的/ 操作系统/ 级/ 虚拟化/ 技术/ ./ Hypervisor/ 类/ 虚拟化/ 技术/ 由于/ 较强/ 的/ 安全/ 隔离/ 性/ 被/ 广泛应用/ 在/ 公有/ 云/ 等/ 很多/ 场景/ ./ 由于/ 更/ 多/ 的/ 互联网/ 数据中心/ 主要/ 支撑/ 公司/ 内部/ 业务/ ,/ 是/ 一个/ 私有/ 云/ 环境/ ,/ 不仅/ 要求/ 一定/ 的/ 安全/ 隔离/ 性/ ,/ 还/ 追求/ 优异/ 的/ 性能/ [/ 2/ ]/ ./ 所以/ 本文/ 所述/ 的/ 资源管理/ 技术/ 使用/ 容器/ 作为/ 资源管理/ 的/ 基本/ 单位/ ,/ 采用/ 两层/ 资源管理/ 框架/ :/ 全局/ 资源管理/ 器/ 和/ 局部/ 资源管理/ 器/ ./ 全局/ 资源管理/ 器/ 在/ 作业/ 下发/ 的/ 时候/ ,/ 对/ 数据中心/ 所有/ 作业/ 进行/ 布局/ ,/ 使/ 不同/ 优先级/ 、/ 不同/ 资源/ 需求/ 及/ 变化规律/ 的/ 作业/ 在/ 节点/ 上/ 混合/ 部署/ ,/ 确保/ 数据中心/ 运行/ 时/ 的/ 各类/ 负载平衡/ ,/ 减少/ 节点/ 负载/ 过重/ 发生/ 的/ 频度/ ;/ 局部/ 资源管理/ 器是/ 各个/ 节点/ 的/ 本地/ 资源管理/ 器/ ,/ 根据/ 资源/ 需求预测/ 结果/ ,/ 动态/ 调整/ 本/ 节点/ 上/ 应用/ 的/ 资源配置/ ,/ 优先/ 保证/ 高/ 优先级/ 应用/ 的/ 服务质量/ ./ 本文/ 的/ 贡献/ 有/ :/ (/ 1/ )/ 实现/ 了/ 一种/ 以/ 容器/ 作为/ 资/ ①/ LinuxContainer/ ./ http/ :/ // // lxc/ ./ sourceforge/ ./ net/ // Page3/ 源/ 管理/ 单位/ 的/ 数据中心/ 弹性/ 资源管理/ 框架/ ,/ 能/ 满足/ 互联网/ 应用/ 的/ 多种/ 资源/ 需求/ ;/ (/ 2/ )/ 提出/ 了/ 一种/ 作业/ 资源/ 匹配/ 算法/ ,/ 混合/ 部署/ 具有/ 不同/ 优先级/ 、/ 不同/ 类型/ 资源/ 需求/ 的/ 作业/ ,/ 平衡/ 数据中心/ 节点/ 间/ 的/ 负载/ ;/ (/ 3/ )/ 提出/ 了/ 一种/ 改进型/ 的/ 资源/ 预测/ 算法/ ,/ 通用性/ 强/ ,/ 准确度/ 高/ ;/ (/ 4/ )/ 基于/ 上述/ 预测/ 算法/ 的/ 动态/ 资源/ 供应/ 方法/ 保证/ 了/ 高/ 优先级/ 在线/ 网络应用/ 的/ 服务质量/ ./ 2/ 相关/ 研究/ 资源管理/ 的/ 单位/ 有/ 3/ 类/ :/ 以/ Hadoop/ ①/ 为/ 代表/ 的/ 槽/ (/ Slot/ )/ 管理/ 方式/ ,/ 以/ EC2/ ②/ 为/ 代表/ 的/ Hypervisor/ 虚拟机/ 管理/ 方式/ ,/ 以/ Yarn/ ③/ 为/ 代表/ 的/ 操作系统/ 级/ 虚拟化/ 管理/ 方式/ (/ 容器/ )/ ,/ 表/ 1/ 描述/ 了/ 这/ 3/ 种/ 资源管理/ 单位/ 的/ 各种/ 特性/ ./ 槽/ 管理/ 方式/ 的/ 优点/ 是/ 简单/ ,/ 缺点/ 是/ 槽/ 一旦/ 创建/ ,/ 资源配置/ 就/ 不再/ 更改/ ,/ 会/ 导致/ 某些/ 节点/ 上/ 存在/ 资源/ 浪费/ 或/ 某些/ 应用/ 的/ 资源/ 需求/ 得不到/ 满足/ ./ Hypervisor/ 类/ 虚拟机/ 管理/ 方式/ 的/ 优点/ 是/ 隔离/ 性好/ ,/ 不足/ 是/ 存在/ 额外/ 的/ 性能/ 开销/ ,/ 由于/ 在/ 虚拟/ 环境中运行/ ,/ 应用程序/ 的/ 性能/ 会/ 受到/ 影响/ ,/ 虚拟机/ 的/ 部署/ 、/ 启动/ 、/ 销毁/ 也/ 需要/ 开销/ ,/ 运行/ 时间/ 短/ 的/ 任务/ 相对/ 付出/ 的/ 额外/ 开销/ 就/ 更/ 大/ ./ 操作系统/ 级/ 虚拟机/ 的/ 安全/ 隔离/ 性比/ Hypervisor/ 类/ 虚拟机/ 要/ 差/ 一些/ ,/ 但是/ 对/ 应用/ 的/ 性能/ 影响/ 要/ 小得多/ ,/ 适用/ 于/ 对/ 安全/ 隔离/ 要求/ 不是/ 很/ 高/ 但是/ 对/ 性能/ 要求/ 比较/ 高/ 的/ 场景/ ./ 隔离/ 性好/ 性能/ 开销/ 较/ 高/ 管理/ 难度/ 较/ 高/ 动态/ 配置/ 可以/ 在线/ 迁移/ 可以/ 适合/ 场景/ 公有/ 云/ 资源/ 需求预测/ 的/ 精确度/ 是/ 影响/ 应用/ QoS/ 的/ 一个/ 关键因素/ ./ 已有/ 的/ 预测/ 算法/ 可以/ 分为/ 4/ 个小类/ [/ 3/ ]/ :/ 基于/ 启发式/ 的/ 预测/ 算法/ [/ 4/ -/ 5/ ]/ ,/ 基于/ 机器/ 学习/ 的/ 预测/ 算法/ [/ 6/ -/ 7/ ]/ ,/ 基于/ 控制/ 理论/ 的/ 预测/ 算法/ [/ 8/ -/ 9/ ]/ ,/ 基于/ 效用函数/ 的/ 预测/ 算法/ [/ 10/ -/ 12/ ]/ ./ 基于/ 启发式/ 的/ 预测/ 算法/ :/ 在线/ 监测/ 虚拟机/ 的/ 资源/ 使用/ 情况/ ,/ 以此/ 为/ 基础/ 调整/ 虚拟机/ 的/ 资源配置/ ./ 资源/ 消耗/ 达到/ 一个/ 上限/ 阈值/ 时/ ,/ 增加/ 资源/ ,/ 达到/ 一个/ 下限/ 阈值/ 时/ ,/ 回收/ 部分/ 资源/ ./ 这类/ 方法/ 的/ 优点/ 是/ 完全/ 不用/ 了解/ 应用/ 的/ 特性/ ,/ 通用性/ 强/ ;/ 缺点/ 是/ 预测/ 方法/ 不够/ 灵活/ ,/ 精确度/ 不高/ ./ 基于/ 机器/ 学习/ 的/ 预测/ 算法/ :/ 离线/ 或/ 在线/ 自/ 学习/ 应用/ 的/ 资源/ 消耗/ 、/ 负载/ 变化/ 和/ 性能/ 之间/ 的/ 关系/ ,/ 找到/ 在/ 每个/ 不同/ 的/ 负载/ 点下/ ,/ 使/ 应用/ 的/ 性能/ 达到/ 最优/ 所/ 需要/ 的/ 资源/ ,/ 并/ 记录下来/ ./ 实际/ 在线/ 运行/ 时/ 根据/ 实时/ 监测/ 到/ 的/ 负载/ 情况/ 和/ 性能指标/ 与/ 记录/ 中/ 的/ 值/ 进行/ 比较/ ,/ 调整/ 资源/ 的/ 配置/ ./ 这类/ 方法/ 的/ 优点/ 是/ 不/ 需要/ 建立/ 复杂/ 的/ 输入输出/ 模型/ ,/ 能/ 使/ 应用/ 的/ 性能/ 达到/ 最优/ ./ 缺点/ 是/ 需要/ 一段时间/ 的/ 学习/ ,/ 只能/ 做到/ 大概/ 匹配/ ./ 基于/ 控制/ 理论/ 的/ 预测/ 算法/ :/ 建立/ 输入输出/ 模型/ ,/ 以/ 当前/ 虚拟机/ 的/ 资源/ 利用率/ 以及/ 应用/ 的/ 当前/ 性能/ 为/ 输入/ ,/ 得出/ 下/ 一个/ 时刻/ 应该/ 给/ 虚拟机/ 分配/ 的/ 资源/ ./ 这类/ 方法/ 适用/ 于/ 单一/ 输入/ 单一/ 输出/ 的/ 情况/ ,/ 在/ 有/ 多个/ 输入/ 或者/ 多个/ 输出/ 的/ 情况/ 下/ ,/ 很难/ 描述/ 它们/ 之间/ 的/ 关系/ ./ 基于/ 效用函数/ 的/ 预测/ 方法/ :/ 建立/ 资源配置/ 和/ 应用/ 性能指标/ 之间/ 的/ 映射/ 关系/ ./ 文献/ [/ 12/ ]/ 中/ 的/ 效用函数/ 描述/ 了/ 网页/ 服务/ 的/ 响应/ 时间/ 与/ 服务器/ 数量/ 之间/ 的/ 映射/ 关系/ ./ 表/ 2/ 总结/ 了/ 这/ 四种/ 算法/ 的/ 特性/ ./ 本文/ 采用/ 启发式/ 的/ 资源/ 预测/ 算法/ ,/ 根据/ 资源/ 的/ 使用/ 情况/ ,/ 结合/ 历史数据/ 和/ 用户/ 给出/ 的/ 波峰/ 波谷/ 的/ 变化/ 周期/ 及/ 幅度/ ,/ 预测/ 下/ 一个/ 时间/ 周期/ 的/ 资源/ 需求/ ,/ 比/ 已有/ 的/ 此类/ 预测/ 方法/ 更/ 灵活/ 、/ 更/ 精确/ ./ 需要/ 监控/ 应用/ 负载/ 否是/ 是/ 是/ 需要/ 监控/ 应用性/ 能否/ 是/ 是/ 是/ 需要/ 获取/ 资源/ 状况/ 是否/ 是否/ 可扩展性/ 好差/ 差差/ 预测/ 精确度/ 低/ 高高/ 高/ 关于/ 数据中心/ 资源管理/ ,/ 已有/ 大量/ 的/ 相关/ 研究/ ./ 文献/ [/ 13/ -/ 14/ ]/ 专注/ 于/ 如何/ 为/ 虚拟机/ 动态分配/ 资源/ 以/ 满足/ 应用/ 的/ 服务/ 需求/ ./ 文献/ [/ 15/ -/ 17/ ]/ 专注/ 于/ 如何/ 迁移/ 虚拟机/ 以/ 提高/ 整个/ 数据中心/ 的/ 资源/ 利用率/ 或/ 节省/ 功耗/ ./ 文献/ [/ 18/ -/ 20/ ]/ 研究/ 动态/ 资源分配/ 以/ 节省/ 功耗/ ./ 文献/ [/ 21/ ]/ 研究/ 虚拟机/ 和/ 物理/ 机/ 的/ 映射/ 关系/ 以/ 达到/ 效用/ 最大化/ 的/ 目的/ ./ 文献/ [/ 22/ ]/ 主要/ 针对/ Web/ 应用/ 研究/ 虚拟机/ 与/ 物理/ 节点/ 之间/ 的/ 映射/ 策略/ ,/ 以/ 减少/ 虚拟机/ 迁移/ 的/ 次数/ ./ 文献/ [/ 23/ ]/ 关注/ 数据中心/ 虚拟机/ 资源/ 的/ 各种/ 静态/ 配置/ 方案/ 以/ 保证/ 资源分配/ 的/ 公平性/ 或/ 提高/ 资源/ 利用率/ ./ 文献/ [/ 7/ ,/ 23/ ]/ 提出/ 了/ 两层/ 的/ 资源管理/ 框架/ ,/ 本地/ 资源管理/ 器/ 检测/ 资源/ 需求/ ,/ 汇报/ 给/ 全局/ 资源/ 管/ ①/ ②/ ③/ Page4/ 理器/ ,/ 全局/ 资源管理/ 器/ 从/ 整个/ 数据中心/ 的/ 角度/ 来/ 计算/ 每个/ 虚拟机/ 可以/ 获得/ 的/ 资源/ ./ 其中/ 文献/ [/ 7/ ]/ 的/ 全局/ 资源管理/ 器/ 的/ 计算/ 原则/ 是/ 系统/ 获得/ 最大/ 的/ 收益/ (/ 出租/ 相同/ 的/ 资源/ ,/ 获得/ 最大/ 的/ 利润/ )/ ./ 文献/ [/ 23/ ]/ 的/ 全局/ 资源管理/ 器/ 的/ 计算/ 原则/ 是/ 取得/ 最优/ 的/ 应用/ 性能/ ./ 本文/ 也/ 采用/ 两层/ 的/ 资源管理/ 框架/ :/ 全局/ 资源管理/ 器/ 在/ 下发/ 作业/ 时/ ,/ 结合/ 作业/ 的/ 优先级/ 、/ 资源/ 需求/ 以及/ 资源/ 消耗/ 变化规律/ 等/ 属性/ 特征/ 和/ 数据中心/ 资源/ 负载/ 的/ 分布/ 状况/ ,/ 为/ 作业/ 选择/ 合适/ 的/ 节点/ ,/ 混合/ 部署/ 作业/ ,/ 以/ 减少/ 同类/ 资源/ 竞争/ ,/ 避免/ 节点/ 负载/ 过重/ ,/ 实现/ 无需/ 进行/ 虚拟机/ 迁移/ 就/ 能/ 达到/ 数据中心/ 负载平衡/ 的/ 目的/ ;/ 局部/ 资源管理/ 器/ 动态/ 预测/ 各个/ 应用/ 的/ 资源/ 需求/ ,/ 调整/ 节点/ 上/ 各个/ 容器/ 的/ 资源配置/ ,/ 保证/ 高/ 优先级/ 应用/ 的/ 服务质量/ ./ 3/ 基于/ LinuxContainer/ 的/ 资源管理/ 框架/ 基于/ 容器/ 的/ 资源管理/ 系统/ 架构/ 如图/ 2/ 所示/ ./ 用户/ 通过/ 客户端/ 提交/ 作业/ ./ 中央/ 管理器/ 是/ 系统/ 的/ 核心/ ,/ 包含/ 作业/ 调度/ 器/ 和/ 全局/ 资源管理/ 器/ 两个/ 组件/ ,/ 主要职责/ 是/ 为/ 作业/ 寻找/ 合适/ 的/ 执行/ 节点/ ./ 为了/ 增强/ 可靠性/ ,/ 一个/ 数据中心/ 至少/ 配置/ 两个/ 中央/ 管理器/ ,/ 通过/ ZooKeeper/ ①/ 的/ 领导者/ (/ Leader/ )/ 选举/ 保证/ 只有/ 一个/ 处于/ 活跃/ 状态/ ./ 系统/ 中/ 除了/ 中央/ 管理器/ 以及/ 运行/ Zookeeper/ 的/ 节点/ 以外/ ,/ 其余/ 所有/ 节点/ 都/ 是/ 执行/ 节点/ ./ 每台/ 执行/ 节点/ 上/ 都/ 运行/ 一个/ 局部/ 资源管理/ 器/ ,/ 接收/ 中央/ 管理器/ 下发/ 的/ 任务/ (/ 一个/ 作业/ 包含/ 若干个/ 任务/ )/ ,/ 并/ 为/ 每个/ 任务/ 创建/ 一台/ 轻量级/ 的/ 虚拟机/ (/ LinuxContainer/ )/ ./ 数据中心/ 中/ 的/ 所有/ 节点/ 共享/ 一个/ 分布式文件系统/ ./ 用户/ 通过/ 浏览器/ 可以/ 查询/ 作业/ 调度/ 器中/ 的/ 作业/ 所处/ 的/ 状态/ (/ 等待/ 下发/ 、/ 已/ 下发/ 、/ 正在/ 执行/ 、/ 执行/ 出错/ )/ 、/ 各个/ 节点/ 的/ 资源/ 使用/ 状况/ 及/ 节点/ 上/ 运行/ 的/ 作业/ 信息/ ./ 作业/ 调度/ 器/ 接收/ 用户/ 提交/ 的/ 作业/ ,/ 按照/ 优先级/ 排序/ ,/ 每次/ 选择/ 优先级/ 最高/ 的/ 作业/ ,/ 向/ 全局/ 资源管理/ 器/ 申请/ 资源/ ./ 全局/ 资源管理/ 器/ 返回/ 符合/ 需求/ 的/ 最优/ N/ (/ N/ 小于/ 或/ 等于/ 作业/ 的/ 任务/ 数/ )/ 台/ 节点/ ./ 如果/ N/ 等于/ 任务/ 数/ ,/ 则/ 将/ 作业/ 下发/ 到/ 这/ N/ 台/ 节点/ 上/ ./ 但是/ 如果/ N/ 小于/ 作业/ 的/ 任务/ 数/ ,/ 若/ 作业/ 支持/ 批量/ 下发/ ,/ 则/ 先/ 下发/ 一部分/ 任务/ 到/ 符合要求/ 的/ 节点/ 上/ ,/ 若/ 不/ 支持/ ,/ 选择/ 下/ 一个/ 作业/ ./ 全局/ 资源管理/ 器有/ 3/ 个/ 功能/ :/ 监控/ 收集/ 所有/ 节点/ 的/ 剩余/ 资源/ 以及/ 节点/ 上/ 运行/ 的/ 作业/ 信息/ ;/ 接收/ 作业/ 调度/ 器/ 的/ 资源/ 请求/ ,/ 通过/ 作业/ 资源/ 匹配/ 算法/ 为/ 作业/ 寻找/ 符合要求/ 的/ 最优/ N/ 台/ 节点/ ;/ 协助/ 局部/ 资源管理/ 器/ 处理/ 执行/ 节点/ 资源/ 紧缺/ 的/ 情况/ ./ 本/ 系统/ 采用/ 数组/ 存储/ 节点/ 上/ 的/ 剩余/ 资源/ 和/ 作业/ (/ 在/ 等待/ 和/ 正在/ 执行/ 的/ 所有/ 作业/ )/ 信息/ ,/ 数组/ 中/ 的/ 每一项/ 代表/ 了/ 一台/ 物理/ 节点/ ./ 采用/ 数组/ 存储/ 信息/ ,/ 不/ 需要/ 使用/ 锁/ ,/ 多个/ 线程/ 可以/ 同时/ 接收/ 多台/ 节点/ 的/ 上报/ 信息/ ./ 有/ 了/ 每台/ 节点/ 的/ 可用/ 剩余/ 资源/ 和/ 其/ 上/ 运行/ 的/ 作业/ 信息/ ,/ 全局/ 资源管理/ 器/ 就/ 可以/ 使用/ 作业/ 资源/ 匹配/ 算法/ ,/ 寻找/ 满足/ 作业/ 资源/ 需求/ 的/ 节点/ ./ 然后/ 对/ 所有/ 符合/ 需求/ 的/ 节点/ 按照/ 一定/ 的/ 规则/ 进行/ 排序/ ,/ 选择/ 最优/ 的/ N/ 台/ 节点/ ./ 全局/ 资源管理/ 器/ 的/ 另/ 一个/ 职责/ 是/ 协助/ 局部/ 资源管理/ 器/ 处理/ 执行/ 节点/ 资源/ 紧缺/ 的/ 问题/ ./ 接收/ 到/ 局部/ 资源管理/ 器/ 上报/ 的/ 节点/ 资源/ 紧缺/ 的/ 请求/ 后/ ,/ 寻找/ 拥有/ 足够/ 剩余/ 资源/ 的/ 节点/ 为/ 应用/ 增加/ 实例/ 或/ 迁移/ 虚拟机/ (/ 寻找/ 方式/ 与/ 作业/ 首次/ 下发/ 时/ 一致/ )/ ./ 当/ 系统/ 负载/ 达到/ 一个/ 警戒/ 值时/ ,/ 中央/ 管理器/ 将/ 拒绝/ 接收/ 新/ 的/ 作业/ ./ 运行/ 在/ 执行/ 节点/ 上/ 的/ 局部/ 资源管理/ 器/ 包含/ 两个/ 功能/ 部件/ :/ 一个/ 负责/ 创建/ 虚拟机/ ,/ 并/ 在/ 这个/ 虚拟机/ 环境/ 中/ 启动/ 执行/ 任务/ ;/ 另/ 一个/ 负责/ 监控/ 各个/ 虚拟机/ 的/ 资源/ 使用/ 状况/ 以及/ 本/ 节点/ 的/ 剩余/ 可用/ 资源/ ,/ 将/ 信息/ 周期性/ 上报/ 给/ 全局/ 资源管理/ 器/ ,/ 并/ 预测/ 各个/ 任务/ 在/ 下/ 一个/ 时间/ 周期/ 所/ 需/ 的/ 资源/ ,/ 以此/ 为/ 基础/ 更改/ 虚拟机/ 的/ 资源配置/ ./ 若/ 结点/ 的/ 剩余/ 资源/ 无法/ 满足/ 预测值/ ,/ 则/ 剥夺/ 低优先级/ 应用/ 的/ 资源/ 或者/ 向/ 全局/ 资源管理/ 器/ 求助/ ./ 本/ 系统/ 还/ 提供/ 命令行/ 查询/ 接口/ 、/ 前台/ 页面/ 展示/ 以及/ 告警信息/ ,/ 以便/ 管理员/ 或/ 相关/ 负责人/ 可以/ 实时/ ①/ http/ :/ // // zookeeper/ ./ apache/ ./ org/ // Page5/ 获取数据/ 中心/ 的/ 资源/ 使用/ 状况/ 、/ 作业/ 分布/ 和/ 执行/ 情况/ ,/ 在/ 必要/ 时/ 干预/ 调整/ 资源分配/ 和/ 作业/ 分布/ ./ 4/ 作业/ 资源/ 匹配/ 算法/ 作业/ 资源/ 匹配/ 算法/ 的/ 作用/ 是/ 为/ 作业/ 寻找/ 合适/ 的/ 执行/ 节点/ ,/ 各个/ 作业/ 具有/ 不同/ 的/ 资源/ 需求/ 特征/ ,/ 所以/ 匹配/ 算法/ 将/ 直接/ 影响/ 作业/ 的/ 分布/ 、/ 应用/ 的/ QoS/ 和/ 系统/ 的/ 资源/ 利用率/ ./ 数据中心/ 或云/ 计算/ 中/ ,/ 当/ 节点/ 的/ 资源/ 无法/ 满足/ 所有/ 应用/ 的/ 需求/ 时/ ,/ 一般/ 都/ 通过/ 迁移/ 虚拟机/ 来/ 调整/ 资源/ 和/ 平衡/ 负载/ ./ 但是/ 虚拟机/ 迁移/ 不但/ 占用/ 网络资源/ ,/ 而且/ 因为/ 需要/ 停机/ 从而/ 也/ 会/ 影响/ 应用/ 的/ 性能/ ./ 作业/ 资源/ 匹配/ 算法/ 可以/ 使/ 作业/ 的/ 分布/ 更/ 合理/ ,/ 大幅/ 降低/ 虚拟机/ 迁移/ 的/ 次数/ ./ 为了/ 合理/ 地/ 部署/ 作业/ ,/ 系统/ 需要/ 知道/ 作业/ 的/ 一些/ 特性/ ./ 用户/ 在/ 向/ 中央/ 管理器/ 提交/ 作业/ 时需/ 告知/ 作业/ 的/ 资源/ 需求/ (/ 可/ 根据/ 测试/ 或/ 经验/ 分析/ 得出/ )/ ,/ 包括/ CPU/ 核/ 的/ 个数/ 、/ 内存/ 的/ 大小/ 、/ 网络带宽/ 、/ 磁盘/ 带宽/ (/ 网络/ 与/ 磁盘/ 带宽/ 用高/ 、/ 低/ 以及/ 无/ 3/ 个/ 等级/ 来/ 表示/ )/ 以及/ 作业/ 的/ 优先级/ ,/ 是/ 在线/ 作业/ 还是/ 离线/ 作业/ 等/ 特/ Resource/ _/ Requirements/ (/ CPU/ =/ =/ 1/ 核/ )/ &&/ (/ Memory/ =/ =/ 1GB/ )/ 表/ 3/ 作业/ 的/ 资源/ 需求/ 及/ 特征/ 属性/ Input/ _/ Files/ (/ 可/ 选/ )/ Dynamic/ _/ RealloctionCandidate/ _/ IP/ (/ 可/ 选/ )/ 作业/ 资源/ 匹配/ 算法/ 由/ 两/ 部分/ 组成/ :/ (/ 1/ )/ 寻找/ 符合/ 作业/ 资源/ 需求/ 的/ 所有/ 节点/ ;/ (/ 2/ )/ 从/ 所有/ 符合要求/ 的/ 节点/ 中/ ,/ 按照/ 排序/ 规则/ 选出/ 最佳/ 的/ N/ 台/ 节点/ (/ N/ 为/ 作业/ 中/ 任务/ 的/ 数量/ )/ ./ 全局/ 资源管理/ 器/ 根据/ 用户/ 指定/ 的/ 资源/ 需求/ (/ CPU/ 和/ 内存/ 的/ 数量/ ,/ 网络带宽/ 和/ 磁盘/ 带宽/ 在/ 排序/ 规则/ 中/ 用/ )/ 去/ 寻找/ 符合/ 需求/ 的/ 所有/ 节点/ ./ 如表/ 3/ 所示/ 作业/ 的/ 资源/ 需求/ 为/ (/ Memory/ =/ =/ 1GB/ )/ &&/ (/ CPU/ =/ =/ 1/ 核/ )/ ,/ 所有/ 在/ 将来/ 一段时间/ 内/ (/ 作业/ 的/ Last/ _/ Time/ )/ ,/ 空闲/ 内存/ 大于/ 或/ 等于/ 1GB/ 并且/ 空闲/ 核/ 的/ 个数/ 大于/ 征/ 属性/ ,/ 如表/ 3/ 所示/ ./ 资源管理/ 器/ 依据/ 这些/ 属性/ 来/ 为/ 作业/ 寻找/ 合适/ 的/ 节点/ ./ 有些/ 属性/ 是/ 必填/ 的/ ,/ 如果/ 不填/ ,/ 客户端/ 会/ 报错/ ,/ 例如/ 可执行文件/ 的/ 名字/ 、/ 可执行文件/ 所在/ 的/ 位置/ 、/ 一个/ 作业/ 有/ 多少/ 个/ 任务/ ./ 还有/ 一些/ 属性/ 用户/ 如果/ 不填/ ,/ 系统/ 会/ 给/ 一个/ 默认值/ ,/ 如/ 作业/ 的/ 资源/ 需求/ (/ 默认/ 给/ 一个/ 最低/ 的/ 资源/ 值/ :/ CPU/ 为/ 一个/ 处理器/ 核/ 的/ 20/ %/ 、/ 内存/ 为/ 50MB/ 、/ 网络/ I/ // O/ 和/ 磁盘/ I/ // O/ 为/ 无/ )/ 、/ 作业/ 所属/ 的/ 部门/ (/ 一个/ 被/ 命名/ 为/ “/ default/ ”/ 的/ 部门/ )/ 、/ 作业/ 的/ 优先级/ (/ 默认/ 为/ 低/ )/ 、/ 是否/ 允许/ 系统/ 动态/ 调整/ 资源分配/ (/ 默认/ 为/ 是/ )/ 、/ 作业/ 大概/ 需要/ 运行/ 多长时间/ (/ 默认/ 为/ 常驻/ 型/ 的/ 作业/ )/ 、/ 作业/ 的/ 资源/ 变化/ 特征/ (/ 波峰/ 波谷/ 变化/ 的/ 周期/ ,/ 默认/ 不会/ 变化/ )/ 、/ 是/ 在线/ 服务/ 作业/ 还是/ 离线/ 作业/ (/ 默认/ 为/ 离线/ )/ ./ 还有/ 一些/ 是/ 属性/ 可选/ 的/ (/ 有/ 就/ 填/ ,/ 没有/ 就/ 不用/ 填/ )/ ,/ 例如/ 执行程序/ 时/ 的/ 参数/ 、/ 文件/ 在/ 分布式文件系统/ 中/ 的/ 位置/ (/ 如果/ 用户/ 需要/ 有/ 额外/ 输入/ 的/ 文件/ )/ 、/ 节点/ 的/ 网络/ IP地址/ (/ 如果/ 用户/ 要求/ 作业/ 下发/ 到/ 特点/ 的/ 节点/ 上/ )/ ./ 有/ 了/ 这些/ 必填/ 的/ 和/ 可选/ 的/ 属性/ 信息/ ,/ 全局/ 资源管理/ 器/ 下发/ 作业/ 时/ 就/ 可以/ 采取/ 一些/ 策略/ 来/ 控制/ 作业/ 的/ 布局/ ./ 或/ 等于/ 1/ 的/ 节点均/ 符合/ 需求/ ./ 由于/ 应用/ 的/ 资源/ 需求/ 动态变化/ ,/ 特别/ 是/ 在线/ 网络应用/ ,/ 因此/ 难以/ 估算/ 一台/ 节点/ 在/ 将来/ 一段时间/ 内/ 的/ 最低/ 剩余/ 资源/ ./ 局部/ 资源管理/ 器/ 依据/ 用户/ 指定/ 的/ 资源/ 需求/ 变化/ 情况/ (/ 如表/ 3/ 中/ 的/ CPU/ _/ Period/ )/ 以及/ 作业/ 资源/ 消耗/ 的/ 历史数据/ 来/ 估算/ 本/ 节点/ 在/ 将来/ 24h/ 内/ 消耗/ 的/ 资源量/ ,/ 并/ 以表/ 4/ 所示/ 的/ 格式/ 周期性/ 上报/ 给/ 全局/ 资源管理/ 器/ ,/ 全局/ 资源管理/ 器/ 根据/ 这些/ 信息/ 就/ 可以/ 找出/ 所有/ 符合/ 资源/ 需求/ 的/ 节点/ (/ 通过/ 排序/ 算法/ 后/ 返回/ 的/ 节点/ )/ ./ 如果/ 符合要求/ 的/ 节点/ 数/ 小于/ 任务/ 的/ 数量/ (/ Task/ _/ NumPage6/ 的/ 值/ )/ ,/ 并且/ 所有/ 任务/ 必须/ 作为/ 一个/ 整体/ 一次性/ 下发/ ,/ 那么/ 向/ 作业/ 管理器/ 报告/ 本次/ 匹配/ 失败/ ,/ 若/ 支持/ 部分/ 下发/ ,/ 则/ 先/ 下发/ 一部分/ 任务/ (/ 等于/ 符合要求/ 的/ 节点/ 数/ )/ ./ 表/ 4/ 节点/ 上报/ 的/ 资源/ 资源/ 属性/ 属性/ 值/ 的/ 表达方式/ CPU/ {/ S1/ ,/ E1/ ,/ V1/ ,/ …/ ,/ Memory/ {/ S1/ ,/ E1/ ,/ V1/ ,/ …/ ,/ 作业/ 资源/ 匹配/ 算法/ 好坏/ 的/ 关键在于/ 排序/ 规则/ ,/ 好/ 的/ 排序/ 规则/ 能够/ 满足/ 所有/ 作业/ 的/ QoS/ ,/ 同时/ 平衡/ 数据中心/ 的/ 负载/ 、/ 提高/ 资源/ 利用率/ ./ 本文/ 提出/ 的/ 排序/ 算法/ 依据/ 以下/ 5/ 项/ 原则/ 对/ 所有/ 符合/ 需求/ 的/ 节点/ 进行/ 排序/ :/ (/ 1/ )/ 高/ 优先级/ 作业/ 和/ 低优先级/ 作业/ 部署/ 在/ 同一/ 台/ 节点/ 上/ ,/ 在/ 资源/ 紧张/ 时/ 可以/ 剥夺/ 低优先级/ 作业/ 的/ 资源/ ,/ 以/ 满足/ 高/ 优先级/ 作业/ 的/ 需求/ ./ (/ 2/ )/ 不同/ 密集型/ (/ CPU/ 密集/ 、/ 网络/ 密集/ 、/ IO/ 密集/ )/ 的/ 作业/ 部署/ 在/ 同一/ 台/ 节点/ 上/ ,/ 避免/ 竞争/ 同一/ 类型/ 的/ 资源/ ,/ 影响/ 性能/ ./ (/ 3/ )/ 优先/ 选取/ 存放/ 了/ 作业/ 所/ 需/ 数据文件/ 的/ 节点/ (/ 数据/ 本地性/ )/ ./ (/ 4/ )/ 负载/ 动态变化/ 且/ 变化/ 特征/ 相似/ 的/ 作业/ 不要/ 部署/ 在/ 同一/ 台/ 节点/ 上/ ,/ 避免/ 无法/ 满足/ 作业/ 处于/ 波峰/ 时/ 的/ 资源/ 需求/ ./ 上/ ,/ 减少/ 资源/ 抢占/ 时/ 的/ 复杂度/ (/ 同/ 部门/ 优先/ )/ ./ Rank/ =/ w1/ ×/ P/ _/ C/ +/ w2/ ×/ T/ _/ C/ +/ w3/ ×/ D/ _/ L/ +/ 其中/ P/ _/ C/ 、/ T/ _/ C/ 、/ D/ _/ L/ 、/ W/ _/ C/ 、/ S/ _/ D/ 的/ 值/ 都/ 只有/ 0/ 、/ 1/ 两个/ 取值/ ,/ 分别/ 对应/ 上述/ 5/ 项/ 排序/ 原则/ ,/ w1/ 至/ w5/ 表示/ 这/ 5/ 项/ 原则/ 在/ 排序/ 时/ 所/ 占/ 的/ 比重/ :/ P/ _/ C/ (/ priority/ _/ compatible/ ,/ 优先级/ 兼容/ )/ :/ 1/ 表示/ 在/ 一台/ 节点/ 上/ 高/ 优先级/ 作业/ 的/ 数量/ 没有/ 超出/ 阈值/ ,/ 超出/ 则/ 为/ 0/ ,/ 阈值/ 为/ 节点/ 数/ 与/ 高/ 优先级/ 作业/ 数/ 的/ 比值/ ./ 例如/ ,/ 如果/ 待/ 下发/ 作业/ 为/ 高/ 优先级/ ,/ 若该/ 节点/ 上/ 已有/ 的/ 高/ 优先级/ 作业/ 的/ 数量/ 加上/ 1/ 没有/ 超过/ 阈值/ 则/ P/ _/ C/ 值为/ 1/ ,/ 超过/ 了/ 则/ 为/ 0/ ;/ 如果/ 待/ 下发/ 的/ 作业/ 为/ 低优先级/ ,/ P/ _/ C/ 值为/ 1/ ./ T/ _/ C/ (/ type/ _/ compatible/ ,/ 密集型/ 兼容/ )/ :/ 1/ 表示/ 一台/ 节点/ 上/ 的/ 作业/ 具有/ 不同/ 的/ 密集型/ ,/ 0/ 则/ 相反/ ./ 例如/ ,/ 如果/ 作业/ 对/ 网络带宽/ 的/ 需求/ 为/ 高/ ,/ 而/ 节点/ 上/ 已经/ 有/ 作业/ 的/ 网络带宽/ 需求/ 也/ 为/ 高/ ,/ 那么/ T/ _/ C/ 的/ 值/ 就/ 为/ (/ 5/ )/ 同一个/ 部门/ 的/ 作业/ 尽量/ 部署/ 在/ 一台/ 节点/ 由此/ 得出/ 以下/ 计算/ 优先级/ 的/ 表达式/ :/ 0/ ,/ 如果/ 没有/ 冲突/ ,/ 则/ 为/ 1/ ./ D/ _/ L/ (/ data/ _/ locality/ ,/ 数据/ 本地性/ )/ :/ 主要/ 针对/ 数据/ 密集型/ 作业/ ,/ 如果/ 作业/ 需要/ 的/ 数据文件/ 存储/ 在/ 该/ 节点/ 上/ ,/ 则/ 为/ 1/ ,/ 否则/ 为/ 0/ ./ 对于/ 不/ 需要/ 拉取/ 大量/ 数据/ 的/ 计算/ 密集型/ 作业/ 和/ 网络/ 密集型/ 作业/ ,/ 这/ 一项/ 均/ 为/ 1/ ./ W/ _/ C/ (/ workload/ _/ compatible/ ,/ 负载/ 波动性/ 兼容/ )/ :/ 如果/ 波动/ 周期/ 不/ 冲突/ 则/ 为/ 1/ ,/ 否则/ 为/ 0/ ./ 例如/ 游戏/ 的/ 高峰/ 在/ 晚上/ ,/ 而/ 新闻/ 的/ 高峰/ 在/ 白天/ ,/ 那么/ 如果/ 这/ 两个/ 应用/ 运行/ 在/ 一台/ 节点/ 上/ ,/ W/ _/ C/ 的/ 值/ 为/ 1/ ,/ 而/ 如果/ 两个/ 游戏/ 运行/ 在/ 一台/ 节点/ 上/ ,/ 则/ W/ _/ C/ 的/ 值/ 为/ 0/ ./ S/ _/ D/ (/ same/ _/ department/ ,/ 同一个/ 部门/ )/ :/ 表示/ 如果/ 节点/ 上/ 存在/ 与/ 待/ 下发/ 作业/ 属于/ 同一个/ 部门/ 的/ 作业/ ,/ 则/ 为/ 1/ ,/ 否则/ 为/ 0/ ./ 将/ 同一个/ 部门/ 的/ 作业/ 放在/ 一个/ 节点/ 上/ ,/ 是/ 为了/ 剥夺/ 资源/ 时/ 尽量/ 不/ 影响/ 其余/ 部门/ 的/ 作业/ ./ 对于/ 在线/ 网络应用/ ,/ 数据/ 本地性/ 永远/ 成立/ ,/ 作业/ 密集/ 类型/ 兼容/ 比/ 波动性/ 兼容/ 及/ 同一个/ 部门/ 更/ 重要/ ,/ 而/ 波动性/ 兼容/ 又/ 比/ 同一个/ 部门/ 更/ 重要/ ,/ 所以/ w5/ 的/ 值/ 最小/ ,/ 赋为/ 1/ ,/ w2/ 的/ 值/ 为/ 2/ ,/ w4/ 要/ 大于/ 3/ (/ 1/ +/ 2/ )/ ,/ 为/ 4/ ./ 对于/ 离线/ 作业/ ,/ 因为/ 资源/ 消耗/ 平稳/ ,/ 所以/ 波动/ 兼容/ 永远/ 成立/ ,/ 与/ 在线/ 作业/ 一样/ ,/ 可以/ 得出/ w3/ 的/ 值/ 为/ 2/ ,/ 因为/ 需要/ 保证/ 高/ 优先级/ 在线/ 服务/ 作业/ 的/ QoS/ ,/ 所以/ w1/ 要/ 大于/ 9/ (/ 4/ +/ 2/ +/ 2/ +/ 1/ )/ ,/ 为/ 10/ ./ 若/ Rank/ 值/ 小于/ 8/ ,/ 则/ 表示/ 优先级/ 不/ 兼容/ ,/ 同时/ 波动性/ 与/ 密集/ 类型/ 也/ 不/ 兼容/ ,/ 必然/ 会/ 出现/ 在/ 高峰期/ 竞争/ 同一/ 类型/ 的/ 资源/ ,/ 所以/ 作业/ 不能/ 下发/ 到/ 这台/ 节点/ 上/ ./ 作业/ 资源/ 匹配/ 算法/ 的/ 伪/ 代码/ 表示/ 如下/ ./ P/ _/ C/ =/ 0/ ;/ T/ _/ C/ =/ 1/ ;/ D/ _/ L/ =/ 0/ ;/ W/ _/ C/ =/ 1/ ;/ S/ _/ D/ =/ 0/ ;/ IF/ (/ task/ -/ >/ priority/ =/ =/ “/ high/ ”/ )/ high/ _/ priority/ =/ 1/ ;/ node/ =/ c/ _/ node/ ;/ // // c/ _/ node/ 为/ CPU/ 和/ 内存/ 符合要求/ 的/ 节/ WHILE/ (/ node/ !/ =/ NULL/ )/ {/ // / 目前/ 一台/ 节点/ 上/ 高/ 优先级/ 作业/ 的/ 数量/ 不/ 超过/ 2/ / // IF/ (/ high/ _/ priority/ +/ node/ -/ >/ num/ _/ high/ _/ task/ </ =/ 2/ )/ Page7/ // / 只要/ 有/ 一项/ 属性/ 有/ 冲突/ ,/ T/ _/ C/ 值/ 就/ 为/ 0/ / // IF/ (/ (/ task/ -/ >/ network/ _/ io/ =/ =/ “/ high/ ”/ node/ -/ >/ // / 作业/ 依赖/ 的/ 数据文件/ 在/ 该/ 节点/ 上/ ,/ 则/ D/ _/ L/ 为/ 1/ / // IF/ (/ task/ -/ >/ file/ _/ ip/ =/ =/ node/ -/ >/ ip/ )/ D/ _/ L/ =/ 1/ ;/ // / 如果/ 作业/ 的/ 所有/ 波动/ 周期/ 都/ 与/ 节点/ 上/ 已有/ 作业/ 的/ IF/ (/ task/ -/ >/ num/ _/ cpu/ _/ period/ !/ =/ 0node/ -/ >/ FOR/ (/ INTi/ =/ 0/ ;/ i/ </ task/ -/ >/ num/ _/ cpu/ _/ period/ ;/ IF/ (/ load/ _/ uncompatible/ (/ task/ -/ >/ cpu/ _/ period/ [/ i/ ]/ ,/ W/ _/ C/ =/ 0/ ;/ }/ }/ // / 部门/ 用位/ 来/ 表示/ / // IF/ (/ task/ -/ >/ departmentnode/ -/ >/ departments/ =/ =/ 1/ )/ S/ _/ D/ =/ 1/ ;/ node/ -/ >/ score/ =/ P/ _/ C/ / 10/ +/ T/ _/ C/ / 4/ +/ D/ _/ L/ / 2/ +/ W/ _/ C/ / IF/ (/ node/ -/ >/ score/ >/ =/ 8/ )/ v/ _/ node/ ./ push/ _/ back/ (/ node/ )/ ;/ // // 最终/ 符合要求/ 的/ 节点/ node/ =/ node/ -/ >/ next/ ;/ }/ // // WHILE/ // / 将/ 得分/ 大于/ 或/ 等于/ 8/ 的/ 节点/ 按/ 得分/ 高低/ 排序/ ,/ 得分/ Qsort/ (/ v/ _/ node/ ,/ v/ _/ node/ ./ size/ (/ )/ ,/ compare/ (/ )/ )/ ;/ 作业/ 资源/ 匹配/ 算法/ 在/ 为/ 作业/ 寻找/ 符合/ 资源/ 需求/ 的/ 节点/ 时/ ,/ 计算/ 的/ 是/ 节点/ 在/ 将来/ 一段时间/ 的/ 最低/ 可用/ 资源/ ,/ 在/ 理论/ 上/ 满足/ 了/ 节点/ 上/ 所有/ 应用/ 的/ 资源/ 需求/ ./ 而/ 排序/ 算法/ 又/ 使/ 同一/ 台/ 节点/ 上/ 的/ 作业/ 具有/ 不同/ 的/ 优先级/ 和/ 不同/ 的/ 密集/ 类型/ ,/ 所以/ 即使/ 用户/ 提供/ 的/ 资源/ 需求/ 有/ 误差/ 而/ 使/ 节点/ 的/ 资源/ 无法/ 同时/ 保证/ 所有/ 应用/ 的/ QoS/ ,/ 也/ 可以/ 通过/ 为/ 支持/ 动态/ 扩容/ 的/ 应用/ 在/ 别的/ 节点/ 增加/ 实例/ 来/ 分担/ 压力/ ,/ 或/ 剥夺/ 低优先级/ 应用/ 的/ 资源/ ,/ 保证/ 高/ 优先级/ 应用/ 的/ QoS/ ,/ 减少/ 虚拟机/ 迁移/ 的/ 次数/ ./ 5/ 基于/ 预测/ 算法/ 的/ 资源/ 动态/ 供应/ 如图/ 3/ 所示/ ,/ 一台/ 物理/ 节点/ 上/ 同时/ 运行/ 若干/ 台/ 虚拟机/ 及/ 本地/ 资源管理/ 器/ ,/ 每台/ 虚拟机/ 中/ 运行/ 的/ 应用程序/ 拥有/ 不同/ 的/ 优先级/ 、/ 不同/ 的/ 资源/ 需求/ 、/ 不同/ 的/ 负载/ 变化/ 特征/ ./ 对/ 每个/ 应用/ ,/ 本地/ 资源管理/ 器/ 周期性地/ 读取/ 各个/ 虚拟机/ 当前/ 的/ CPU/ 使用/ 状况/ 和/ 内存/ 使用/ 状况/ ,/ 然后/ 根据/ 各个/ 应用/ 资源/ 消耗/ 的/ 周期/ 波动性/ 来/ 估算/ 它们/ 在/ 下/ 一个/ 时间/ 周期/ 的/ 资源/ 需求/ ,/ 并/ 更改/ 资源配置/ ./ 图/ 4/ 是/ WorldCup98/ ①/ 网络服务/ 中/ 第/ 55/ 天/ 和/ 第/ 57/ 天在/ 连续/ 24h/ 内/ ,/ 接收/ 到/ 的/ 访问/ 请求/ 量/ ,/ 为/ 便于/ 描述/ 和/ 测试/ ,/ 以/ 10min/ 的/ 访问量/ 压缩/ 到/ 1s/ 的/ 比例/ ,/ 将/ 一天/ 24h/ 压缩/ 到/ 144s/ ./ 若/ 静态/ 配置/ 资源/ ,/ 以波/ 峰值/ ,/ 一天/ 中有/ 一半/ 以上/ 的/ 时间/ 浪费/ 了/ 大半/ 的/ 资源/ ./ 若/ 不/ 以波/ 峰值/ 分配/ ,/ 不能/ 满足/ 波峰/ 时/ 的/ 资源/ 需求/ ./ 所以/ 实时/ 预测/ 应用/ 的/ 资源/ 需求/ ,/ 并/ 以此/ 为/ 基础/ 动态/ 调整/ 资源配置/ 是/ 必要/ 的/ ./ 除/ 启发式/ 预测/ 算法/ 以外/ 的/ 3/ 种/ 预测/ 算法/ 由于/ 扩展性/ 差/ ,/ 不/ 适合/ 我们/ 的/ 场景/ ./ 启发式/ 预测/ 算法/ 中/ 的/ AIMD/ [/ 6/ ]/ 无法/ 应对/ 访问量/ 的/ 突发性/ 增长/ ,/ MISD/ [/ 7/ ]/ 能/ 解决/ 这个/ 问题/ ,/ 但是/ 存在/ 3/ 点/ 不足/ :/ (/ 1/ )/ 预测/ 规则/ 太/ 简单/ ./ MISD/ 根据/ 经验/ 设置/ 一个/ 资源/ 值/ (/ Wiggle/ -/ Room/ )/ ,/ 若/ 资源/ 消耗/ 接近/ 配置/ ,/ 将/ Wiggle/ -/ Room/ 翻/ 一倍/ ,/ 下/ 一个/ 时间/ 周期/ 的/ 资源配置/ 更/ 改为/ 当前/ 配置/ 加上/ 新/ 的/ Wiggle/ -/ Room/ ./ 若/ 资源配置/ 与/ 消耗/ 的/ 差值/ 大于/ 一个/ 阈值/ ,/ Wiggle/ -/ Room/ 等于/ (/ 1/ -/ α/ )/ ×/ Wiggle/ -/ Room/ (/ α/ 为/ 一个/ 小于/ 1/ 的/ 值/ ,/ 如/ 0.2/ )/ ,/ 下/ 一个/ 时间/ 周期/ 的/ 资源配置/ 为/ 当前/ 的/ 资源配置/ 减去/ α/ ×/ Wiggle/ -/ Room/ ./ 如果/ 某/ 一次/ 资源配置/ 与/ 消耗/ 的/ 差值/ 不/ 符合/ 更改/ 配置/ 的/ 要求/ ,/ 而/ 资源/ 消耗/ 又/ 处在/ 上升/ 阶段/ ,/ 那么/ 下/ 一个/ 时间/ 周期/ 的/ 资源配置/ 就/ 无法/ 满足/ 需求/ ;/ (/ 2/ )/ Wiggle/ -/ Room/ 增长/ 的/ 幅度/ 太/ 大/ (/ 指数/ 级/ )/ ,/ 使得/ 资源配置/ 的/ 波动/ 幅度/ 太/ 大/ ;/ (/ 3/ )/ 没有/ 将/ 资源/ 的/ 预测/ ①/ http/ :/ // // ita/ ./ ee/ ./ lbl/ ./ gov/ // html/ // contrib/ // WorldCup/ ./ htmlPage8/ 值/ 和/ 分配/ 值/ 分开/ ,/ 各种/ 资源/ 的/ 特性/ 是/ 不/ 一样/ 的/ ,/ 例如/ CPU/ ,/ 如果/ 需要/ 占用/ 一个/ 处理器/ 核/ 80/ %/ 的/ 资源/ ,/ 实际上/ 至少/ 分配/ 85/ %/ 的/ 资源/ 应用/ 的/ 性能/ 才/ 不会/ 受/ 影响/ ./ 本文/ 针对/ MISD/ 的/ 这/ 3/ 点/ 不足/ ,/ 分别/ 做/ 了/ 改进/ :/ 预测/ 时/ 结合/ 资源/ 消耗/ 的/ 变化趋势/ ,/ 而/ 不是/ 只/ 依据/ 当前/ 的/ 资源配置/ 与/ 消耗/ 的/ 差值/ ;/ Wiggle/ -/ Room/ 改为/ 连续/ 两次/ 资源/ 消耗/ 的/ 差值/ ;/ 分离/ 预测值/ 与/ 分配/ 值/ ./ 称/ 改进/ 后/ 的/ MISD/ 算法/ 为/ AMISD/ (/ Advanced/ -/ MISD/ )/ 预测/ 算法/ ,/ 由/ 以下/ 几个/ 表达式/ 组成/ :/ R/ _/ P/ 表示/ 预测值/ ,/ R/ _/ U/ 表示/ 当前/ 的/ 消耗/ 值/ ,/ R/ _/ U/ _/ L/ 表示/ 上/ 一个/ 时间/ 周期/ 的/ 资源/ 消耗/ 值/ ,/ R/ _/ A/ 表示/ 下/ 一个/ 时间/ 周期/ 要/ 分配/ 的/ 值/ ,/ R/ _/ X/ 表示/ 某个/ 不/ 确定/ 的/ 值/ (/ 以/ 保证/ R/ _/ A/ 与/ R/ _/ P/ 的/ 差距/ 在/ 5/ %/ 到/ 10/ %/ 之间/ )/ ./ 系数/ β/ 、/ γ/ 的/ 值/ 是/ 当前/ 资源/ 消耗/ 变化/ 对下/ 一个/ 时间段/ 资源分配/ 值/ 的/ 影响/ 因子/ ./ 当/ 资源/ 消耗/ 上升时/ ,/ 用式/ (/ 2/ )/ 计算/ R/ _/ P/ 值/ ;/ 当/ 资源/ 消耗/ 下降时/ ,/ 用式/ (/ 3/ )/ 计算/ R/ _/ P/ 值/ ./ 影响/ 因子/ β/ 、/ γ/ 的/ 取值/ 要/ 与/ 资源配置/ 大幅/ 增加/ 小幅/ 减小/ 的/ 思想/ 吻合/ ./ 本文/ 经过/ 反复/ 试验/ 总结/ 得出/ :/ 应用/ 负载/ 处于/ 波谷/ 时/ ,/ β/ 的/ 取值/ 为/ 1/ ;/ 处于/ 波峰/ 时/ ,/ β/ 的/ 取值/ 为/ 2/ ;/ γ/ 的/ 取值/ 始终/ 为/ 0.2/ ;/ 此时/ AMISD/ 算法/ 的/ 预测/ 精度/ 最为/ 理想/ ./ 资源/ 消耗/ 上升时/ ,/ 若/ 应用/ 负载/ 处于/ 波谷/ 阶段/ ,/ 如图/ 4/ 中/ 的/ 第/ 1/ 秒/ 到/ 第/ 90/ 秒/ ,/ 资源/ 消耗/ 的/ 波动/ 幅度/ 不/ 大/ ,/ 资源/ 增加/ 幅度/ 也/ 不/ 需/ 很大/ ,/ 则/ 用/ β/ =/ 1/ 来/ 预测/ 下/ 一个/ 阶段/ 的/ 消耗/ 值/ ./ 相反/ ,/ 若/ 处于/ 波峰/ 阶段/ ,/ 如图/ 4/ 中/ 的/ 第/ 90/ 秒/ 到/ 第/ 130/ 秒/ ,/ 存在/ 访问量/ 突发/ 大幅/ 增加/ 的/ 情况/ ,/ 资源/ 消耗/ 的/ 波动/ 幅度/ 大/ ,/ 则/ 用/ β/ =/ 2/ 来/ 预测/ ,/ 以/ 应对/ 资源/ 消耗/ 的/ 突发性/ 增加/ ./ 资源/ 消耗/ 下降时/ ,/ 如果/ 分配/ 值/ 与/ 消耗/ 值/ 的/ 差距/ 达到/ 了/ 一个/ 阈值/ ,/ 如/ 30/ %/ ,/ 则/ 使用/ 式/ (/ 3/ )/ 预测/ 下/ 一个/ 时间/ 周期/ 的/ 资源/ 消耗/ 值/ ./ 资源配置/ 的/ 下调/ 幅度/ 很小/ ,/ 因为/ 下/ 一个/ 时间/ 周期/ 的/ 访问量/ 可能/ 会/ 回升/ ./ 最后/ 均/ 使用/ 式/ (/ 4/ )/ 计算/ 对应/ 的/ 资源配置/ 值/ ,/ 使/ R/ _/ A/ 与/ R/ _/ P/ 的/ 差值/ 在/ 5/ %/ 到/ 10/ %/ 之间/ ,/ 如果/ 现在/ 的/ 配置/ 值/ 与/ 预测值/ 的/ 差/ 在/ 5/ %/ 到/ 10/ %/ 之间/ ,/ 则/ 不用/ 更改/ 配置/ 值/ ,/ 以/ 减少/ 更改/ 配置/ 的/ 次数/ ./ 基于/ AMISD/ 预测/ 算法/ 的/ 本地/ 资源/ 动态/ 供应/ 流程/ 如图/ 5/ 所示/ ./ 预测出/ 一个/ 任务/ 在/ 下/ 一个/ 时间/ 周期/ 的/ 资源配置/ 值后/ ,/ 若/ 节点/ 上/ 的/ 剩余/ 资源/ 无法/ 满足/ 需求/ ,/ 则/ 查看/ 本/ 节点/ 上/ 正在/ 运行/ 的/ 作业/ 是否/ 支持/ 扩容/ ./ 若有/ ,/ 则/ 请求/ 全局/ 资源管理/ 器/ 寻找/ 合适/ 的/ 节点/ (/ 遵循/ 作业/ 初次/ 下发/ 时/ 的/ 寻找/ 规则/ )/ 启动/ 一个/ 支持/ 扩容/ 的/ 作业/ 的/ 实例/ 映像/ ,/ 以/ 分担/ 负载/ 压力/ ./ 若/ 无/ ,/ 则/ 剥夺/ 低优先级/ 应用/ 的/ 部分/ 资源/ (/ 剥夺/ 剩余/ 运行/ 时间/ 最长/ 的/ 作业/ 的/ 资源/ ,/ 最/ 多/ 可以/ 剥夺/ 到/ 该/ 作业/ 只/ 剩/ 最低/ 资源/ 配额/ ,/ 如果/ 不够/ 则/ 继续/ 剥夺/ 下/ 一个/ 应用/ ,/ 直到/ 没有/ 资源/ 可以/ 剥夺/ 为止/ )/ ./ 若/ 没有/ 优先级/ 比其/ 更/ 低/ 的/ 应用/ 或/ 剥夺/ 低优先级/ 的/ 资源/ 仍/ 无法/ 满足/ 需求/ ,/ 连续/ 出现/ 3/ 次后/ (/ 次数/ 可以/ 配置/ ,/ 高/ 优先级/ 作业/ 和/ 低优先级/ 作业/ 可以/ 配置/ 不同/ 的/ 值/ )/ ,/ 再/ 一次/ 向/ 全局/ 资源管理/ 器/ 上报/ ,/ 以/ 迁移/ 出/ 部分/ 虚拟机/ ./ 如果/ 无法/ 找到/ 合适/ 的/ 节点/ 用来/ 扩容/ 或/ 迁移/ 虚拟机/ ,/ 则/ 向/ 管理员/ 等/ 相关/ 负责人/ 发出/ 告警信息/ ./ 全局/ 资源管理/ 器/ 在/ 为/ 作业/ 选择/ 执行/ 节点/ 时/ 遵循/ 的/ 5/ 项/ 原则/ ,/ 保证/ 了/ 一台/ 节点/ 上/ 最/ 多/ 只有/ 两个/ 高/ 优先级/ 的/ 在线/ 网络应用/ ./ 而/ 除/ 在线/ 网络应用/ 以外/ ,/ 大多数/ 应用/ 的/ 资源/ 消耗/ 平稳/ ,/ 所以/ 需要/ 调整/ 资源配置/ 的/ 应用/ 不/ 多/ ,/ 减轻/ 了/ 局部/ 资源管理/ 器/ 的/ 负担/ ./ 作业/ 资源/ 匹配/ 算法/ 为/ 作业/ 选择/ 的/ 是/ 在/ 正常/ 情况/ 下/ 资源/ 足够/ 的/ 节点/ ,/ 发生/ 本地/ 资源/ 紧缺/ 的/ 概率/ 很/ 低/ ,/ 减轻/ 了/ 全局/ 资源管理/ 器/ 的/ 负担/ ./ 本地/ 资源/ 紧缺/ 大多/ 由/ 网络应用/ 引起/ ,/ 而/ 网络应用/ 可以/ 通过/ LVS/ ①/ 启动/ 实例/ 进行/ 扩容/ ,/ 即使/ 找/ 不到/ 合适/ 的/ 节点/ ,/ 也/ 可以/ 通过/ 剥夺/ 低优先级/ 应用/ 的/ 资源/ 来/ 满足/ 高/ 优先级/ 应用/ 的/ 需求/ ,/ 所以/ 需要/ 迁移/ 虚拟机/ 的/ 概率/ 很/ 低/ ./ 6/ 实验/ 评价/ 本/ 节/ 通过/ 两个/ 实验/ 验证/ 结合/ 作业/ 资源/ 匹配/ 算法/ ①/ http/ :/ // // www/ ./ linuxvirtualserver/ ./ org/ // Page9/ 和/ 资源/ 预测/ 算法/ ,/ 能/ 在/ 保证/ 应用/ QoS/ (/ 尤其/ 是/ 高/ 优先级/ 应用/ )/ 的/ 前提/ 下/ 提高/ 数据中心/ 的/ 资源/ 利用率/ ./ 6.1/ 实验/ 平台/ 和/ 应用/ 负载/ 本/ 实验/ 的/ 硬件平台/ ,/ 是/ 由/ 6/ 台/ 相同/ 服务器/ 组成/ 的/ 机群/ ./ 其中/ ,/ 1/ 台/ 节点/ 作为/ 中央/ 管理器/ ,/ 其它/ 的/ 节点/ 作为/ 任务/ 执行/ 节点/ ./ 每台/ 服务器/ 配置/ 英特尔/ 4/ 核/ 处理器/ ,/ 主频/ 为/ 2.53/ GHz/ ,/ 4GB/ 物理/ 内存/ ./ 本文/ 使用/ 的/ 应用/ 负载/ 如下/ :/ (/ 1/ )/ WorldCup98/ ,/ 一个/ 真实/ 的/ trace/ ,/ 记录/ 每个/ 客户/ 请求/ 的/ 访问/ 时间/ ,/ 客户端/ 使用/ Httperf/ ①/ 向/ 服务器发送/ Http/ 请求/ ,/ 每秒钟/ 发送/ 请求/ 的/ 数量/ 遵循/ WorldCup98/ 的/ 记录/ ,/ 服务端/ 使用/ ApacheWeb/ ②/ ,/ ApacheWeb/ 为/ 在线/ 网页/ 服务/ ,/ 高/ 优先级/ ./ (/ 2/ )/ TPC/ -/ W/ ③/ ,/ 模拟/ 在线/ 购书/ 系统/ ,/ 实验/ 时/ 客户端/ 启动/ 500/ 个/ 模拟/ 用户/ ,/ 服务端/ 用/ Tomcat/ ④/ ./ 该/ 应用/ 也/ 为/ 在线/ 网络应用/ ,/ 高/ 优先级/ ./ (/ 3/ )/ Memcache/ ⑤/ ,/ 内存/ 数据库/ ,/ 内存/ 密集型/ 应用/ ,/ 无/ 磁盘/ 需求/ ./ (/ 4/ )/ 计算/ Pi/ 的/ 值/ ,/ 计算/ 密集型/ 应用/ ./ (/ 5/ )/ Mencode/ ⑥/ ,/ 视频/ 编码/ 软件/ ,/ 计算/ 密集型/ 应用/ ./ (/ 6/ )/ Gzip/ ⑦/ ,/ 文件/ 压缩/ ,/ 磁盘/ IO/ 与/ CPU/ 密集型/ 的/ 应用/ ,/ 突出/ 的/ 特点/ 是/ 磁盘/ IO/ 的/ 需求量/ 特别/ 大/ ./ (/ 7/ )/ Log/ _/ Analysis/ ,/ 日志/ 分析/ ,/ 分析/ WorldCup98/ 的/ trace/ ,/ 统计/ 服务器/ 在/ 1s/ 内/ 处理/ 的/ 请求/ 数/ ./ 6.2/ 作业/ 资源/ 匹配/ 算法/ 效果/ 评价/ 首先/ 评价/ 作业/ 资源/ 匹配/ 算法/ 对/ 资源/ 利用率/ 及/ 应表/ 5/ 各个/ 应用/ 的/ 资源/ 需求/ ApacheWeb/ 高/ TPC/ -/ WMemcache/ 低/ GzipMencode/ 高/ PiLog/ _/ A/ 图/ 7/ 展示/ 了/ 各个/ 任务/ 独占/ 一台/ 节点/ 以及/ 与/ 别的/ 任务/ 共享/ 一台/ 节点/ 时/ 的/ 执行/ 性能/ ./ 从图/ 中/ 可以/ 清晰/ 的/ 看出/ ,/ TPC/ -/ W/ 不宜/ 与/ ApacheWeb/ 或/ Gzip/ 运行/ 在/ 一台/ 节点/ 上/ ,/ Memcache/ 不宜/ 跟/ ApacheWeb/ 或/ TPC/ -/ W/ 在/ 一起/ 运行/ 等等/ ./ 依据/ 图/ 6/ 与/ 图/ 7/ 展示/ 的/ 结果/ ,/ 表/ 6/ 中/ 每/ 一大/ 列/ 左边/ 的/ 小列/ 描述/ 了/ 每/ 两个/ 作业/ 是否/ 适合/ 运行/ 在/ 一台/ 节点/ 上/ ./ 根据/ 式/ (/ 1/ )/ 来/ 评价/ 两个/ 作业/ 是否/ 适合/ 运行/ 在/ 一台/ 节点/ 上/ ./ 评价/ 的/ 结果/ 在/ 表/ 6/ 中/ 每/ 一大/ 列/ 右边/ 的/ 小列/ 中/ ,/ 除了/ Mencode/ 、/ Gzip/ 作为/ 行/ ,/ Memcache/ 作为/ 用/ 性能/ 的/ 影响/ ./ 为/ 作业/ 选择/ 节点/ 的/ 方法/ 有/ 3/ 种/ :/ (/ 1/ )/ 随机/ 选择/ 若干个/ 节点/ ,/ 优势/ 是/ 简单/ ;/ (/ 2/ )/ 尽量/ 将/ 作业/ 集中/ 在/ 部分/ 节点/ 上/ ,/ 目的/ 是/ 提高/ 资源/ 利用率/ 、/ 节省/ 功耗/ ;/ (/ 3/ )/ 尽量/ 将/ 作业/ 分散开来/ ,/ 目的/ 是/ 为了/ 充分利用/ 系统/ 的/ 资源/ ,/ 保证/ 作业/ 的/ QoS/ ./ 表/ 5/ 给出/ 了/ 各个/ 应用/ 的/ 资源/ 需求/ 以及/ 优先级/ ,/ 对/ 在线/ 网络应用/ 还/ 给出/ 了/ 负载/ 波动/ 周期/ ./ 图/ 6/ 展示/ 了/ 在/ 各种/ 情况/ 下/ Http/ 请求/ 的/ 响应/ 时间/ ./ 从图/ 中/ 可以/ 看出/ 当/ ApacheWeb/ 独占/ 一台/ 节点/ ,/ 或者/ 分别/ 与/ Memcahe/ 、/ TPC/ -/ W/ 、/ Mencode/ &/ Log/ &/ Pi/ 运行/ 在/ 一台/ 节点/ 上/ ,/ 在/ 负载/ 较轻时/ ,/ 客户端/ 请求/ 的/ 响应/ 时间/ 均/ 在/ 1ms/ 左右/ ./ 但是/ 当/ ApacheWeb/ 与/ Gzip/ 运行/ 在/ 同一/ 台/ 节点/ 上时/ ,/ Http/ 请求/ 的/ 响应/ 时间/ 频繁/ 的/ 超过/ 100ms/ ,/ 这/ 是因为/ Gzip/ 对/ 磁盘/ I/ // O/ 的/ 需求量/ 特别/ 大/ ,/ 影响/ ApacheWeb/ 读取/ 文件/ 的/ 速度/ ,/ 所以/ ApacheWeb/ 服务/ 不宜/ 与/ Gzip/ 应用/ 运行/ 在/ 一台/ 节点/ 上/ ./ 内存/ 列/ 的/ 时候/ ,/ Mencode/ 的/ 实验/ 测试/ 性能/ 与/ 式/ (/ 1/ )/ 评价/ 的/ 结果/ 不/ 相符/ 以外/ (/ 受/ cache/ 命中率/ 的/ 影响/ ./ 对/ 用户/ 来说/ ,/ cache/ 对/ 应用/ 性能/ 的/ 影响/ 很难/ 估计/ ,/ 所以/ 暂时/ 忽略/ 这一/ 影响/ )/ ,/ 其余/ 都/ 是/ 相符/ 的/ ,/ 分值/ 越高/ 表明/ 越/ 适合/ 运行/ 在/ 一台/ 节点/ 上/ ./ ①/ ②/ ③/ ④/ ⑤/ ⑥/ ⑦/ Page10/ 表/ 6/ 作业/ 两/ 两/ 组合/ ApacheWebTPC/ -/ WMemcacheGzipMencodePiApacheWebTomcat/ ×/ 3Memcache/ ×/ 15/ √/ 15Gzip/ √/ 15/ √/ 15/ ×/ 19Mencode/ √/ 15/ √/ 19/ ×/ 19/ ×/ 15Pi/ √/ 19/ √/ 19/ √/ 19/ √/ 19/ √/ 19Log/ _/ A/ √/ 15/ √/ 19/ √/ 19/ ×/ 15/ √/ 15/ √/ 19/ 作业/ 下发/ 时若/ 遵循/ 作业/ 资源/ 匹配/ 算法/ ,/ 则/ 不论/ 作业/ 到达/ 的/ 先后顺序/ ,/ 均/ 可以/ 保证/ 不/ 适宜/ 运行/ 在/ 一起/ 的/ 作业/ 不会/ 被/ 下发/ 到/ 一台/ 节点/ 上/ ./ 若/ 采用/ 分散/ 或/ 随机/ 策略/ 来/ 下发/ 作业/ ,/ 作业/ 的/ 分布/ 状况/ 与/ 作业/ 的/ 提交/ 顺序/ 及/ 数据中心/ 的/ 节点/ 数量/ 有关/ ./ 如果/ 采用/ 集中/ 策略/ ,/ 作业/ 的/ 分布/ 状况/ 只/ 与/ 作业/ 的/ 提交/ 顺序/ 有关/ ./ 在/ 这/ 3/ 种/ 策略/ 下/ ,/ 任何/ 两个/ 作业/ 都/ 有/ 可能/ 被/ 部署/ 在/ 同一/ 台/ 节点/ 上/ ./ 将/ 作业/ 集中/ 起来/ 需要/ √/ 19/ √/ 19/ √/ 19/ √/ 19/ 的/ 节点/ 数量/ 能/ 达到/ 最少/ ,/ 但/ 不能/ 保证/ 性能/ ,/ 将/ 作业/ 尽量/ 分散开来/ ,/ 虽然/ 能/ 保证/ 性能/ ,/ 但是/ 使用/ 了/ 大量/ 的/ 节点/ ,/ 资源/ 利用率/ 低/ ./ 在/ 本/ 实验/ 中/ ,/ 我们/ 的/ 算法/ 在/ 最坏/ 情况/ 下会/ 比/ 集中/ 下发/ 策略/ 多/ 占用/ 一台/ 节点/ ,/ 但/ 能/ 保证/ 各个/ 应用/ 的/ 性能/ ,/ 尤其/ 是/ 高/ 优先级/ 的/ 应用/ ./ 6.3/ 资源/ 预测/ 算法/ 精确度/ 评价/ 资源/ 消耗/ 具有/ 明显/ 波动性/ 的/ 典型/ 应用/ 是/ 在线/ 网络应用/ ./ 本/ 实验/ 选择/ WorldCup98/ 中/ 具有/ 代表性/ 的/ 两天/ 作为/ 客户/ 负载/ :/ WC/ -/ 55/ 与/ WC/ -/ 57/ ./ WC/ -/ 55/ 是/ 访问量/ 较大/ 的/ 代表/ 、/ WC/ -/ 57/ 是/ 访问量/ 较/ 小/ 的/ 代表/ ,/ 虽然/ 它们/ 的/ 访问量/ 不同/ ,/ 但是/ 波动/ 周期/ 相同/ ./ 通过/ 预测/ CPU/ 消耗/ 来/ 比较/ MISD/ 与/ AMISD/ 的/ 预测/ 精度/ ./ 为了/ 更好/ 的/ 说明/ 问题/ ,/ 将/ ApacheWeb/ 应用/ 的/ 所有/ 线程/ 绑定/ 在/ 一个/ 处理器/ 核上/ ./ 图/ 8/ 和/ 图/ 9/ 分别/ 表示/ 在/ 以/ 最大/ 静态/ 值/ 配置/ 资源/ (/ 独占/ 一个/ 核/ )/ 、/ AMISD/ 及/ MISD/ 预测/ 算法/ 动态/ 配置/ 资源/ ,/ WC/ -/ 55/ 和/ WC/ -/ 57/ 作为/ 客户端/ 负载/ 时/ 的/ 响应/ 时间/ ./ 在/ 负载/ 较轻时/ ,/ MISD/ (/ 其中/ 第/ 2/ 个/ 参数/ 为/ 0.4/ )/ 预测/ 算法/ 和/ AMISD/ 预测/ 算法/ ,/ 都/ 能/ 达到/ 与/ 静态/ 最大/ 配置/ 时/ 几乎/ 一样/ 的/ 客户/ 响应/ 时间/ ,/ 但是/ 在/ 负载/ 较/ 重时/ ,/ AMISD/ 的/ 响应/ 时间/ 明显/ 低于/ MISD/ ./ Page11/ 以/ MISD/ 算法/ 动态/ 配置/ 资源/ ,/ 当/ WC/ -/ 55/ 作为/ 客户端/ 负载/ 时/ ,/ 在/ 117s/ 的/ 时候/ ,/ 响应/ 时间/ 出现/ 了/ 一个/ 毛刺/ ,/ 当/ WC/ -/ 57/ 作为/ 客户端/ 负载/ 时/ ,/ 在/ 99s/ 和/ 138s/ 的/ 时候/ 出现/ 了/ 两个/ 毛刺/ ,/ 如图/ 9/ 所示/ ./ 这是/ 由于/ MISD/ 预测/ 算法/ 的/ 第/ 1/ 个/ 不足/ 导致/ 的/ :/ MISD/ 根据/ 消耗/ 与/ 配置/ 的/ 差值/ 大小/ 决定/ 是否/ 更改/ 下/ 一个/ 阶段/ 的/ 配置/ ./ 可能/ 出现/ 在/ 上升/ 阶段/ 时/ ,/ 由于/ 某/ 一次/ 的/ 上升幅度/ 不是/ 很大/ ,/ 而/ 没有/ 达到/ 更改/ 配置/ 的/ 条件/ ,/ 导致/ 资源配置/ 无法/ 满足/ 下/ 一个/ 时间/ 周期/ 的/ 资源/ 需求/ ,/ 从而/ 出现/ 毛刺/ ./ AMISD/ 改进/ 了/ 这个/ 不足/ 点/ ,/ 避免/ 了/ 出现/ 毛刺/ 的/ 情况/ ./ 将/ CPU/ 分成/ 1000/ 份/ ,/ 图/ 10/ 与/ 图/ 11/ 分别/ 描述/ 了/ 当/ WC/ -/ 55/ 与/ WC/ -/ 57/ 作为/ 负载/ 时/ ,/ AMISD/ 的/ 资源/ 预测值/ 和/ 实际/ 消耗/ 值/ ,/ 图/ 12/ 描述/ 了/ 预测值/ 与/ 实际/ 消耗/ 的/ 差/ ./ 图/ 13/ 与/ 图/ 14/ 分别/ 描述/ 了/ 当/ WC/ -/ 55/ 与/ WC/ -/ 57/ 作为/ 负载/ 时/ ,/ MISD/ 的/ 资源/ 预测值/ 和/ 消耗/ 值/ ,/ 图/ 15/ 描述/ 了/ 预测值/ 与/ 实际/ 消耗/ 的/ 差/ ./ 在/ 图/ 12/ 中/ ,/ 除了/ 资源/ 消耗/ 突然/ 从/ 上升/ 阶段/ 转为/ 下降/ 及/ 从/ 下降/ 阶段/ 转为/ 上升/ ,/ 且/ 变化/ 幅度/ 较大/ 时/ ,/ 预测值/ 与/ 消耗/ 的/ 差/ 大于/ 50/ 、/ 小于/ -/ 50/ 以外/ ,/ 其余/ 均/ 在/ -/ 50/ 到/ 50/ 以内/ ,/ 所以/ AMISD/ 的/ 预测/ 精度/ 可以/ 达到/ 95/ %/ 以上/ ./ 在/ 图/ 15/ 中/ ,/ 除了/ 资源/ 消耗/ 趋势/ 突然/ 发生变化/ 以外/ ,/ 资源/ 的/ 预测值/ 与/ 消耗/ 的/ 差/ 几乎/ 都/ 在/ 50/ 到/ 100/ 之间/ ,/ 比/ AMISD/ 的/ 预测/ 精度/ 低/ 5/ %/ ./ 对比/ 图/ 10/ 与/ 图/ 12/ 及图/ 11/ 与/ 图/ 13/ ,/ 可以/ 看出/ AMISD/ 修改/ 资源配置/ 的/ 次数/ 也/ 远/ 小于/ MISD/ ./ 7/ 结束语/ 互联网/ 应用/ 呈现/ 资源/ 需求/ 多样化/ 和/ 动态化/ 的/ 特征/ ,/ 为了/ 保证/ 应用/ 的/ 服务质量/ 和/ 数据中心/ 负载平衡/ ,/ 本文/ 提出/ 并/ 实现/ 了/ QoS/ 保证/ 的/ 数据中心/ 动态/ 资源/ 供应/ 方法/ :/ 资源/ 匹配/ 算法/ 将/ 不同/ 优先级/ 、/ 不同/ 资源/ 需求/ 、/ 不同/ 负载/ 变化规律/ 的/ 作业/ 进行/ 混合/ 部署/ ;/ 基于/ 改/ Page12/ 进型/ 预测/ 算法/ 的/ 本地/ 资源/ 供应/ 方法/ 为/ 应用/ 按/ 需/ 动态/ 供应/ 资源/ ./ 实验/ 证明/ ,/ 作业/ 资源/ 匹配/ 算法/ 使/ 应用/ 的/ 服务质量/ 接近/ 作业/ 分散/ 下发/ 时/ 的/ 水平/ ,/ 资源/ 利用率/ 接近/ 作业/ 集中/ 下发/ 时/ 的/ 效果/ ./ 资源/ 预测/ 算法/ 的/ 精确度/ 能/ 达到/ 95/ %/ ,/ 基于/ 该/ 算法/ 的/ 动态/ 资源/ 供应/ 方法/ 既保证/ 了/ 高/ 优先级/ 在线/ 网络应用/ 的/ 服务质量/ ,/ 也/ 提高/ 了/ 单台/ 节点/ 的/ 资源/ 利用率/ ,/ 使/ 一台/ 节点/ 上/ 可以/ 运行/ 更/ 多/ 的/ 作业/ ./ 在/ 应用/ 多样化/ 的/ 数据中心/ ,/ 分布式文件系统/ 中/ 的/ 数据分布/ 影响/ 应用/ 的/ 资源分配/ 效果/ ,/ 特别/ 是/ 数据/ 密集型/ 应用/ ./ 下/ 一步/ ,/ 我们/ 将/ 研究/ 动态/ 资源/ 供应/ 方法/ 与/ 数据分布/ 策略/ 之间/ 的/ 关系/ ./ 致谢/ 本文/ 的/ 工作/ 是/ 在/ 腾讯/ 公司/ 研究院/ 的/ 资助/ 下/ 与/ 腾讯/ 公司/ 基础架构/ 部/ 共同开发/ 完成/ 的/ ,/ 在/ 此/ 感谢/ 腾讯/ 公司/ 资源管理/ 系统/ 研发/ 小组/ 的/ 陈军/ 、/ 罗韩梅/ 、/ 林恬/ 、/ 窦芊/ 、/ 李博/ 、/ 赵森/ 、/ 严俊明/ 、/ 彭亮/ 等/ !/ 

