Page1/ 一个/ 通用/ 最优/ 的/ 动态/ 网络/ 构建/ 框架/ 袁野/ 1/ )/ ,/ 2/ )/ 王国/ 仁/ 1/ )/ ,/ 2/ )/ 郭得科/ 3/ )/ 1/ )/ (/ 东北大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110004/ )/ 2/ )/ (/ 医学影像/ 计算/ 教育部/ 重点/ 实验室/ (/ 东北大学/ )/ 沈阳/ 110004/ )/ 3/ )/ (/ 国防科学技术大学/ 信息/ 与/ 管理/ 学院/ 信息系统/ 工程/ 国家/ 重点/ 实验室/ 长沙/ 410073/ )/ 摘要/ 覆盖/ 网络/ 的/ 拓扑/ 特性/ 对/ P2P/ 系统/ 的/ 性能/ 至关重要/ ./ 现有/ 的/ 覆盖/ 网络/ 大多/ 基于/ 静态/ 互联网络/ ,/ 因为/ 互联网络/ 在/ 静态/ 环境/ 下/ 表现/ 出/ 良好/ 的/ 拓扑/ 特性/ ./ Moore/ 下界/ 给出/ 这些/ 静态/ 网络/ 的/ 直径/ 和/ 结点/ 度数/ 的/ 最佳/ 折中/ 理论值/ ,/ 但/ 由于/ 动态变化/ 的/ 网络/ ,/ Moore/ 下界/ 不/ 适合/ 现存/ P2P/ 系统/ ./ 为此/ ,/ 该文/ 根据/ 现有/ P2P/ 系统/ 的/ 特点/ ,/ 给出/ 在/ 高度/ 动态/ 环境/ 下新/ 的/ 网络/ 直径/ 和/ 路由/ 平均/ 距离/ 的/ 下界/ ./ 现有/ 系统/ 的/ 路由/ 性能/ 不能/ 超越/ 此/ 下界/ ,/ 因为/ 它们/ 不能/ 很/ 好/ 地/ 适应/ 高度/ 动态/ 的/ 网络/ —/ —/ —/ 这一/ P2P/ 系统/ 最/ 重要/ 的/ 特点/ ./ 另外/ 已/ 被/ 提出/ 的/ 覆盖/ 网络/ 都/ 针对/ 其/ 相应/ 静态/ 结构/ 有/ 不同/ 的/ 维护/ 机制/ ,/ 并/ 没有/ 统一/ 的/ 构建/ 方法/ ./ 为/ 解决/ 上述/ 问题/ ,/ 该文/ 提出/ 了/ 动态/ Trie/ 树结构/ 这一/ 通用/ 框架/ ,/ 任何/ 静态/ 互联网络/ 都/ 可以/ 基于/ 该/ 框架/ 构造/ 出新/ 的/ P2P/ 系统/ ,/ 同时/ 此/ 通用/ 框架/ 又/ 包含/ 了/ 一系列/ 最优/ 的/ 设计/ 策略/ ./ 根据/ 该/ 构造方法/ ,/ 文章/ 采用/ deBruijn/ 和/ Butterfly/ 图/ 构建/ 出/ 两个/ 新/ P2P/ 系统/ ,/ 并且/ 它们/ 的/ 性能/ 可以/ 超越/ 文中/ 给出/ 的/ 下界/ ./ 经/ 少许/ 修改/ ,/ 构建/ deBruijn/ 和/ Butterfly/ 的/ 方法/ 也/ 可/ 应用/ 到/ 其它/ 互联网络/ 如/ Hypercube/ 、/ Kautz/ 、/ Shuffle/ -/ exchange/ 和/ CCC/ 等/ ./ 关键词/ P2P/ ;/ 互联网络/ ;/ 下界/ ;/ 动态/ 网络/ ;/ 路由/ 1/ 引言/ 随着/ P2P/ 系统/ 大量/ 的/ 涌现/ ,/ 它/ 已经/ 成为/ 继/ In/ -/ ternet/ 网/ 之后/ 信息系统/ 的/ 又/ 一/ 主要/ 基础架构/ ./ 在/ Napster/ 和/ Gnutella/ 等/ [/ 1/ ]/ 集中式/ 和/ 无/ 结构/ P2P/ 网络/ 出现/ 之后/ ,/ 为/ 取得/ 更好/ 的/ 可扩展性/ 、/ 查询/ 准确性/ 和/ 高效/ 的/ 路由/ ,/ 大量/ 基于/ 分布式/ Hash/ 表/ (/ DHT/ )/ 的/ 结构化/ 网络/ 相继/ 出现/ [/ 2/ -/ 4/ ]/ ./ 两个/ 最/ 重要/ 的/ 参数/ 决定/ 了/ 结构化/ P2P/ 网络/ 的/ 性能/ 和/ 质量/ :/ (/ 1/ )/ 结点/ 度数/ :/ 结点/ 路由表/ 的/ 大小/ ./ (/ 2/ )/ 网络/ 直径/ :/ 一个/ 查询/ 在/ 网络/ 里/ 执行/ 的/ 最长/ 路由/ 跳数/ (/ hop/ )/ ./ 早期/ 的/ 结构化/ 网络/ 如/ 基于/ Hypercube/ 的/ Chord/ [/ 3/ ]/ 和/ Pastry/ [/ 4/ ]/ ,/ 它们/ 的/ 网络/ 直径/ 和/ 结点/ 度数/ 都/ 随着/ 结点/ 数目/ (/ n/ )/ 的/ 增加/ 而/ 以/ 对数比例/ 增长/ ./ 这些/ 系统/ 在/ 发布/ 和/ 查询/ 资源/ 时需/ 执行/ logn/ 跳数/ ,/ 它们/ 通常/ 具有/ 较大/ 的/ 维护/ 代价/ 和/ 较差/ 的/ 扩展性/ ./ 为/ 解决/ 上述/ 问题/ ,/ 一些/ 基于/ 常数/ 度/ 互联网络/ 的/ P2P/ 系统/ 被/ 提出/ ,/ 例如/ 基于/ Butterfly/ 的/ Viceroy/ [/ 5/ ]/ 和/ Ulysses/ [/ 6/ ]/ ;/ 基于/ CCC/ 的/ Cycloid/ [/ 7/ ]/ ;/ 基于/ d/ 维度/ Torus/ 的/ CAN/ [/ 2/ ]/ ;/ 基于/ debruijn/ 的/ D2B/ [/ 8/ ]/ 、/ Koorde/ [/ 9/ ]/ 和/ ODRI/ [/ 10/ ]/ ;/ 基于/ Kautz/ 的/ FissionE/ [/ 11/ ]/ 和/ Moore/ [/ 12/ ]/ ./ 这些/ 网络/ 的/ 直径/ 在/ 结点/ 度数/ 不变/ 的/ 情况/ 下/ 随/ 网络/ 规模/ 以/ 对数比例/ 变化/ ,/ 表现/ 出/ 良好/ 的/ 可扩展性/ ./ Moore/ 下界/ 给出/ 任何/ 静态/ 图/ 的/ 结点/ 度数/ 和/ 直径/ 的/ 最佳/ 折中/ 理论值/ ./ 但/ 由于/ P2P/ 系统/ 的/ 动态/ 特性/ ,/ Moore/ 下界/ 不能/ 很/ 好/ 地/ 给予/ P2P/ 网络理论/ 指引/ ./ deBruijn/ 和/ Kautz/ 图是/ 直径/ 最/ 接近/ Moore/ 下界/ 的/ 互联网络/ 结构/ ,/ 但/ 基于/ 它们/ 的/ P2P/ 系统/ ,/ 如/ D2B/ 、/ Koorde/ 和/ FissionE/ 的/ 直径/ 远大于/ Moore/ 下界/ ./ 其它/ 一些/ 系统/ 如/ Pastry/ 、/ Viceroy/ 和/ Cycloid/ 也/ 远/ 比/ 它们/ 相应/ 的/ 静态/ 网络/ 性能/ 差得多/ ./ 主要/ 原因/ 在于/ 现有/ 系统/ 不能/ 很/ 好/ 地/ 适应/ 动态/ 环境/ ,/ 这些/ 网络/ 通常/ 只有/ 在/ 它们/ 的/ 直径/ 和/ 结点/ 度数/ 决定/ 的/ 网络/ 规模/ 下/ ,/ 才能/ 表现/ 出/ 良好/ 性能/ ,/ 但/ 这/ 对/ 动态/ 的/ P2P/ 系统/ 是/ 不/ 实际/ 的/ ./ 因此/ 本文/ 根据/ P2P/ 网络/ 动态/ 的/ 特性/ ,/ 为/ 现有/ 系统/ 计算/ 出新/ 的/ 网络/ 直径/ 和/ 查询/ 平均/ 距离/ 的/ 下界/ ./ Kademlia/ [/ 13/ ]/ 系统/ 使用/ XOR/ 技术/ 来/ 解决/ 动态/ 问题/ ,/ 但/ 它/ 只/ 在/ Pastry/ 系统/ 上/ 实现/ 了/ 该/ 方法/ ,/ 并且/ 系统/ 具有/ 较/ 高/ 的/ 维护/ 代价/ ./ Zhang/ 等/ 人/ [/ 14/ ]/ 用/ DistributedLineGraphs/ 技术/ 来/ 解决/ 任何/ 常数/ 度/ 拓扑/ 的/ 动态/ 构造/ 问题/ ,/ 但/ 该/ 方法/ 实际/ 只/ 适用/ 于/ Kautz/ 和/ deBruijn/ ,/ 并/ 不适/ 用于/ Butterfly/ 、/ CCC/ 和/ Hypercube/ 等/ 结构/ ./ 为了/ 支持/ 任何/ 互联/ 结构/ 的/ 动态/ 构造/ ,/ 本文/ 提出/ 了/ 一/ 通用/ 构建/ 框架/ -/ 基于/ 动态/ Trie/ 树/ 的/ 构造/ 模型/ ,/ 基于/ 该/ 框架/ ,/ 任何/ 静态/ 拓扑/ 都/ 可以/ 构造/ 出/ P2P/ 系统/ ,/ 并且/ 这些/ 系统/ 的/ 直径/ 和/ 平均/ 距离/ 可以/ 超越/ 本文/ 给出/ 的/ 下界/ ./ 同时/ 该/ 构造方法/ 也/ 包含/ 了/ 一系列/ 最优设计/ 来/ 优化/ 系统/ 的/ 性能/ ./ 2/ 相关/ 工作/ Moore/ 下界/ 是/ 任何/ 图/ 直径/ 的/ 下界/ ,/ 它/ 的/ 理论值/ 由/ 文献/ [/ 15/ ]/ 给出/ :/ dm/ / logk/ (/ n/ (/ k/ -/ 1/ )/ +/ 1/ )/ -/ 1/ ./ 另/ 一个/ 衡量/ 网络/ 路由/ 效率/ 的/ 参数/ 是/ 图/ 的/ 平均/ 距离/ ,/ 任何/ k/ -/ 正则/ 图/ 的/ 平均/ 距离/ 下界/ 是/ [/ 16/ ]/ :/ davg/ / dm/ -/ k/ (/ kdm/ -/ 1/ )/ 一个/ 度数/ 和/ 直径/ 为/ d/ 和/ k/ 的/ deBruijn/ 图/ [/ 8/ ]/ 含有/ dk/ 个/ 结点/ ,/ 其中/ 边/ 的/ 连接/ 规则/ 是从/ 结点/ u/ =/ x1x2/ …/ xk/ 到/ 结点/ v/ =/ x2/ …/ xkxk/ +/ 1/ 连接/ 一条/ 有/ 向/ 边/ ./ 包含/ kdk/ 个/ 结点/ 的/ Butterfly/ 结构/ 也/ 是/ 有向图/ ,/ 其中/ 它/ 的/ 直径/ 和/ 结点/ 度数/ 分别/ 是/ 2k/ -/ 1/ 和/ d/ ./ 当/ i/ ≠/ k/ -/ 1/ 时/ ,/ 有/ 向/ 边/ 从/ 结点/ (/ x0x1/ …/ xk/ -/ 1/ ;/ i/ )/ 连接/ 到/ 标识/ 为/ (/ x0/ …/ xi/ ,/ y/ ,/ xi/ +/ 2/ …/ xk/ -/ 1/ ;/ i/ +/ 1/ )/ 的/ 结点/ ,/ 否则/ 连接/ 到/ 结点/ (/ y/ ,/ x1/ …/ xk/ -/ 1/ ;/ 0/ )/ ./ 图/ 1/ 和/ 图/ 2/ 分别/ 给出/ deBruijn/ 和/ Butterfly/ 结构/ 示例/ ./ Page3/ 图/ 2/ 结点/ 度数/ 为/ 2/ 直径/ 为/ 5/ 的/ Butterfly/ 图/ 基于/ deBruijn/ 图/ 的/ 系统/ 如/ D2B/ [/ 8/ ]/ 和/ Koorde/ [/ 9/ ]/ ,/ 基于/ Butterfly/ 的/ 系统/ 如/ Viceroy/ [/ 5/ ]/ 和/ Ulysses/ [/ 6/ ]/ 都/ 给出/ 解决/ 动态/ 网络/ 问题/ 的/ 方法/ ,/ 但/ 同时/ 也/ 带来/ 了/ 网络拓扑/ 变形/ 、/ 维护/ 代价/ 高昂/ 和/ 结点/ 度数/ 分布/ 倾斜/ 等/ 问题/ ,/ 这些/ 变化/ 都/ 会/ 严重/ 影响/ 网络/ 的/ 性能/ ./ 本文/ 将/ 给出/ 解决/ 动态/ 环境/ 问题/ 的/ 通用/ 方法/ ,/ 同时/ 将/ 额外/ 的/ 代价/ 降到/ 最低/ ,/ 以/ 保证系统/ 高效/ 的/ 运行/ ./ 3/ 动态/ 网络/ 路由/ 延迟/ 下界/ 众所周知/ ,/ Moore/ 下界/ 给出/ 任何/ 图/ 的/ 直径/ 下界/ ,/ 但/ 它/ 只/ 适合/ 描述/ 静态/ 拓扑/ ./ 对于/ 动态/ 网络/ ,/ 它/ 的/ 值/ 太小/ ,/ 不/ 适合/ 描述/ P2P/ 网络/ ./ 因此/ 本/ 节/ 给出/ 在/ 动态/ 环境/ 下/ ,/ 现有/ P2P/ 网络/ 查询/ 延迟/ 的/ 下界/ ./ 为/ 计算/ 新/ 下界/ ,/ 考虑/ 一颗/ d/ 叉/ Trie/ 树/ ,/ 它/ 也/ 可/ 被/ 看作/ 路由/ 树/ ./ 对于/ 静态/ 网络/ ,/ 从/ 树根/ 开始/ 在/ h/ 跳内/ ,/ 最多/ 可达/ n/ -/ 1/ 个/ 结点/ ,/ 因此/ 满足/ d/ +/ d2/ +/ …/ +/ dh/ / n/ -/ 1/ ,/ 从此/ 式/ 便/ 可/ 推出/ Moore/ 下界/ ./ 但/ 在/ 动态/ 网络/ 里/ ,/ 第/ i/ 跳/ (/ 1/ / i/ / h/ )/ 最多/ 可达/ 结点/ 不/ 一定/ 是/ di/ 了/ ,/ 也/ 可/ 看成/ 路由/ 树/ 的/ 每层/ 不再/ 是/ 满叉/ 的/ ./ 为了/ 模拟/ 动态/ 网络/ ,/ 考虑/ 一个/ 标识符/ 前缀/ 为/ x/ 的/ 结点/ 随机/ 地/ 加入/ 和/ 离开/ Trie/ 树/ ./ 加入/ 时/ 从/ 根/ 结点/ 开始/ ,/ 从/ d/ 个/ 孩子/ 中/ 找到/ 一个/ 与/ x/ 向前/ 最/ 匹配/ 的/ 结点/ ,/ 并/ 路由/ 到/ 该/ 结点/ ;/ 接下去/ 每/ 一层/ 都/ 按照/ 此/ 规则/ 路由/ ,/ 直到/ 该/ 结点/ 路由/ 到/ 一个/ 叶子/ 结点/ ,/ 此/ 叶子/ 结点/ 和/ x/ 具有/ 最长/ 的/ 公共/ 前缀/ ;/ 最后/ 该/ 结点/ 成为/ 此/ 叶子/ 结点/ 的/ 孩子/ ,/ 加入/ 到/ Trie/ 树中/ ./ 随机/ 离开/ 的/ 过程/ 和/ 加入/ 的/ 过程/ 恰好相反/ ./ 这个/ 动态/ 过程/ 是/ 目前/ DHT/ 的/ 工作/ 方式/ ,/ 因此/ 可以/ 用来/ 模拟/ 动态/ 网络/ ./ 对/ 网络/ 直径/ 的/ 下界/ ,/ 我们/ 有/ 如下/ 定理/ ./ 定理/ 1/ ./ 在/ 概率/ 1/ -/ o/ (/ 1/ )/ 的/ 保证/ 下/ ,/ 动态/ 网络/ 的/ 直径/ 下界/ (/ dmax/ )/ 由/ 如下/ 等式/ 给出/ 证明/ ./ dmax/ 可/ 看作/ 上述/ Trie/ 树/ 的/ 最大/ 高度/ ,/ 因此/ 只/ 需/ 计算/ 此/ 高度/ ./ 为此/ ,/ 需/ 考虑/ 结点/ 离开/ 的/ 过程/ ./ 这个/ 过程/ 等同于/ 从/ 最大/ 高度/ 开始/ 一层层/ 地/ 砍掉/ 叶子/ 结点/ ,/ 这个/ 过程/ 与/ PatriciaTrie/ 树结构/ 的/ 构造/ 十分/ 类似/ ,/ 因为/ PatriciaTrie/ 树可/ 看成/ 是/ 删除/ 所有/ 普通/ Trie/ 树中/ 只有/ 一个/ 孩子/ 的/ 中间/ 结点/ 后/ 得到/ 的/ 结构/ ./ 从/ 文献/ [/ 17/ ]/ 可以/ 得到/ 在/ 概率/ 1/ -/ o/ (/ 1/ )/ 的/ 保证/ 下/ ,/ 随机/ PatriciaTrie/ 树/ 的/ 高度/ 收敛/ 于/ logdn/ +/ dlogd/ 槡/ n/ -/ 1.5/ ./ 因此/ 得到/ 式/ (/ 1/ )/ 给出/ 的/ 下界/ ./ 证毕/ ./ 网络/ 直径/ 只是/ 查询/ 在/ 最坏/ 情况/ 下/ 的/ 路由/ 跳数/ ,/ 而/ 查询/ 平均/ 距离/ 更能/ 衡量/ 一个/ 网络/ 的/ 路由/ 性能/ ./ 因此/ 下面/ 将/ 给出/ 动态/ 网络/ 的/ 平均/ 查询/ 距离/ 的/ 下界/ ./ 设/ h/ 表示/ d/ 叉/ Trie/ 树/ 的/ 最小/ 深度/ ./ Trie/ 树/ 由/ 两/ 部分/ 构成/ ,/ 一部分/ 是从/ 根/ 结点/ 到/ h/ 层/ ,/ 另/ 一部分/ 是/ 由/ h/ +/ 1/ 层到/ dmax/ 层/ 的/ 结点/ 组成/ ./ 很/ 明显/ 第/ 1/ 部分/ 是/ 一颗/ 叉/ 数为/ d/ 的/ 满叉树/ ./ 同时/ 设/ dx/ 表示/ 从/ 根节/ 结点/ 到/ 树/ 任意/ 结点/ 的/ 距离/ ,/ 接下来/ 讨论/ dx/ 对树/ 两/ 部分/ 的/ 概率分布/ 情况/ ./ 为/ 计算/ 第/ 1/ 部分/ 的/ 分布/ 情况/ ,/ 我们/ 定义/ 一序列/ 随机变量/ Ai/ ,/ i/ / 0/ ./ 其中/ 当树/ 的/ 第/ i/ 层/ 是/ 满/ 的/ ,/ 有/ Ai/ =/ 1/ ,/ 否则/ Ai/ =/ 0/ ./ 一层/ 是/ 满/ 的/ 表示/ 该层/ 的/ 结点/ 都/ 存在/ ,/ 并且/ 不是/ 叶子/ 结点/ ./ 注意/ 到/ 对/ i/ / h/ ,/ 如果/ 有/ Ai/ =/ 1/ ,/ 那么/ 对/ 所有/ k/ </ i/ ,/ 可/ 推出/ Ak/ =/ 1/ ./ 因此/ 当/ dx/ 至少/ 是/ k/ +/ 1/ 时/ ,/ 所有/ 的/ 0/ ~/ k/ 层/ 都/ 需/ 是/ 满/ 的/ ,/ 并且/ 满足/ 从式/ (/ 2/ )/ 可/ 推出/ :/ P/ (/ dx/ / k/ +/ 1/ )/ =/ P/ (/ dx/ / k/ )/ P/ (/ Ak/ |/ Ak/ -/ 1/ )/ (/ 3/ )/ 其中/ P/ (/ dx/ / 0/ )/ =/ 1/ 并且/ P/ (/ Ak/ |/ Ak/ -/ 1/ )/ 是/ 条件/ 概率/ ,/ 表示/ 如果/ 第/ k/ 层满/ ,/ 那么/ 前/ 0/ ,/ …/ ,/ k/ -/ 1/ 层/ 都/ 得/ 是/ 满/ 的/ ,/ 因此/ 有/ 对于/ 树/ 的/ 第/ 1/ 部分/ ,/ 有/ 如下/ 定理/ ./ 引理/ 1/ ./ 在/ 概率/ 1/ -/ o/ (/ 1/ )/ 的/ 保证/ 下/ ,/ dx/ 的/ 分布/ 是/ exp/ -/ dkexp1/ 证明/ ./ 首先/ 树/ 的/ 第/ 1/ 部分/ 是/ h/ 层/ 的/ 满叉树/ ,/ 并且/ 该/ 满叉树/ 包括/ n/ (/ d/ -/ 1/ )/ +/ 1n/ (/ d/ -/ 1/ )/ +/ 1/ -/ dd/ (/ d/ -/ 1/ )/ 个/ 非/ 叶子/ 结点/ ./ 其次/ 假设/ 对于/ 0/ ~/ k/ -/ 1/ 层/ 都/ 是/ 满/ 的/ ,/ 那么/ 就/ 有/ dk/ -/ 1/ 到/ 0/ ,/ …/ ,/ k/ -/ 1/ 层/ ,/ 并且/ 还/ 剩余/ n/ (/ d/ -/ 1/ )/ +/ 1/ -/ dd/ -/ 1/ =/ n/ (/ d/ -/ 1/ )/ +/ 1/ -/ dk/ +/ 1dk/ -/ 1Page4/ 入/ ./ 在/ 前/ k/ -/ 1/ 层/ 已经/ 被/ 加满/ 后/ ,/ 第/ k/ 层/ 每个/ 位置/ 被/ 新/ 结点/ 加入/ 的/ 概率/ 是/ d/ -/ k/ ./ 这样/ 我们/ 的/ 问题/ 就/ 等同于/ 把/ u/ =/ n/ (/ d/ -/ 1/ )/ +/ 1/ -/ dk/ +/ 1/ 到/ m/ =/ dk/ 个/ 盒子/ 里/ ,/ 要求/ 每个/ 盒子/ 至少/ 一个/ 球/ 的/ 概率/ 是/ 多少/ ./ 这个/ 问题/ 有/ 很/ 多种/ 解法/ ,/ 其中/ 文献/ [/ 18/ ]/ 把/ 它/ 看做/ 是/ 经典/ 的/ 优惠券/ 收集/ 问题/ ,/ 下面/ 将/ 用到/ 其中/ 的/ 结果/ ./ 定义/ Z/ (/ u/ )/ 是/ 在/ u/ 个球/ 被/ 放到/ m/ 个/ 盒子/ 后/ 剩下/ 的/ 非/ 空盒子/ 个数/ ,/ 因此/ 有/ P/ (/ Ak/ |/ Ak/ -/ 1/ )/ =/ P/ (/ Z/ (/ u/ )/ =/ m/ )/ ./ 由/ 文献/ [/ 18/ ]/ 知/ ,/ P/ (/ Z/ (/ u/ )/ =/ m/ )/ =/ ∑/ (/ -/ 1j/ )/ (/ m/ // j/ )/ 1/ -/ j/ (/ )/ m/ 因/ u/ 很大/ ,/ 所以/ (/ 1/ -/ j/ // m/ )/ u/ 近似/ 等于/ e/ -/ uj/ // m/ ,/ 因此/ 式/ (/ 5/ )/ 可/ 写成/ P/ (/ Z/ (/ u/ )/ =/ m/ )/ ≈/ ∑/ (/ -/ 1j/ )/ (/ m/ // j/ )/ e/ -/ uj/ // m/ =/ 1/ -/ e/ -/ u/ // m/ 对于/ P2P/ 系统/ ,/ 我们/ 对/ 较大/ 的/ m/ =/ o/ (/ logdn/ )/ 更/ 感兴趣/ ,/ 因此/ 上式/ 又/ 可/ 写成/ P/ (/ Z/ (/ u/ )/ =/ m/ )/ ≈/ e/ -/ me/ -/ u/ // m/ =/ 因此/ 从式/ (/ 3/ )/ ~/ 式/ (/ 7/ )/ 得/ P/ (/ dx/ / k/ +/ 1/ )/ =/ P/ (/ dx/ / k/ )/ P/ (/ Ak/ |/ Ak/ -/ 1/ )/ ≈/ 从/ 引理/ 1/ 知/ ,/ 在/ 概率/ 1/ -/ n/ -/ ε/ (/ ε/ / 1/ )/ 的/ 保证/ 下有/ h/ =/ max/ (/ dx/ )/ =/ logdn/ -/ logd/ (/ (/ 1/ +/ ε/ )/ logn/ -/ o/ (/ loglogn/ )/ )/ (/ 8/ )/ 对于/ dx/ 到/ 树/ 第/ 2/ 部分/ 的/ 分布/ 可以/ 从/ 文献/ [/ 17/ ]/ 引理/ 2/ ./ 在/ 概率/ 1/ -/ o/ (/ 1/ )/ 的/ 保证/ 下/ ,/ dx/ 对/ PA/ -/ 得到/ ,/ 因此/ 有/ 如下/ 引理/ ./ TRICIATrie/ 树/ 的/ 分布/ 是/ 其中/ ε/ =/ nd/ -/ k/ (/ 0/ </ ε/ </ 1/ )/ ,/ 并且/ 从/ dx/ 到/ 树/ 两/ 部分/ 的/ 分布/ ,/ 有/ 如下/ 定理/ ./ 定理/ 2/ ./ 在/ 概率/ 1/ -/ n/ -/ ε/ (/ ε/ / 1/ )/ 的/ 保证/ 下/ ,/ 动态/ 证明/ ./ 由/ 上述/ 结论/ 可/ 得/ ,/ 网络/ 查询/ 平均/ 距离/ 的/ 下界/ 是/ logdn/ +/ logdn/ // 槡/ d/ ./ E/ (/ dx/ )/ =/ ∑/ hk/ ·/ exp/ -/ dkexp1/ ∑/ h/ ∑/ dmaxk/ ·/ 1/ +/ d/ ε/ Φ/ (/ ε/ )/ +/ ε/ d/ Φ/ (/ ε/ k/ =/ 0k/ =/ h/ +/ 1logdn/ +/ logdn/ 槡/ d/ ./ 4/ 动态/ 网络/ 通用/ 构建/ 框架/ 任何/ 互联网络/ 具有/ 良好/ 的/ 拓扑/ 特性/ 的/ 条件/ 是/ 当且/ 仅/ 当/ 它/ 的/ 所有/ 结点/ 都/ 存在/ 并且/ 稳定/ ,/ 例如/ deBrui/ -/ jn/ 和/ Butterfly/ 结构/ 要/ 具有/ 优良/ 的/ 拓扑/ 特性/ 需有/ dk/ 和/ dkk/ 个/ 结点/ ./ 但/ 这种/ 要求/ 对以/ 互联网络/ 为/ 基础/ 的/ 动态/ P2P/ 系统/ 是/ 不/ 现实/ 的/ ,/ 为此/ 本文/ 提出/ 了/ “/ 动态/ 多叉/ Trie/ 树/ ”/ 来/ 构建/ P2P/ 系统/ ,/ 使/ 其/ 有/ 良好/ 的/ 拓扑/ 特性/ ./ 4.1/ 动态/ 多叉/ Trie/ 树/ 定义/ 1/ ./ 动态/ d/ 叉/ Trie/ 树结构/ 是/ 一颗/ 深度/ 为/ k/ 的/ 树/ ,/ 每个/ 结点/ 至多/ 有/ d/ 个/ 孩子/ 结点/ ./ 每个/ 结点/ 和/ 其/ 出边/ 都/ 被/ 赋予/ 唯一/ 的/ 标识符/ ,/ 结点/ 的/ 标识符/ 是从/ 根/ 结点/ 到/ 其/ 自/ 身边/ 标识符/ 的/ 叠加/ ,/ 并且/ 边/ 和/ 结点/ 的/ 标识符/ 满足/ 如下/ 规则/ :/ (/ 1/ )/ 根/ 结点/ 的/ 出边/ 被/ 标识/ 为/ xi1/ =/ i/ (/ 0/ / i/ / d/ -/ 1/ )/ ,/ 它/ 的/ 第/ i/ 个/ 孩子/ 结点/ 也/ 被/ 赋予/ 标识符/ xi1/ =/ i/ ,/ 并且/ 孩子/ 结点/ 从/ 左/ 至/ 右/ 地/ 排列/ ,/ 根/ 结点/ 不/ 包括/ 任何/ 标识符/ ./ (/ 2/ )/ 结点/ x1/ 的/ 出边/ 标识/ 为/ xi2/ =/ i/ (/ 0/ / i/ / d/ -/ 1/ )/ ,/ 它/ 的/ 第/ i/ 个/ 孩子/ 结点/ 被/ 标识/ 为/ x1xi2/ ,/ 并且/ 从/ 左/ 至/ 右/ 排序/ ./ (/ 3/ )/ 结点/ x1x2/ …/ xk/ -/ 1/ 的/ 出边/ 标识/ 为/ xik/ =/ i/ (/ 0/ / i/ / d/ -/ 1/ )/ ,/ 孩子/ 结点/ 标识/ 为/ x1x2/ …/ xk/ -/ 1xk/ ,/ 并且/ 从/ 左/ 至/ 右/ 排序/ ./ (/ 4/ )/ 每个/ 结点/ 同时/ 也/ 指向/ 其/ 父亲/ ,/ 并且/ 同层/ 的/ 结点/ 构成/ 一个/ 环/ 结构/ ./ 在/ 动态/ 环境/ 下/ ,/ Trie/ 树/ 可能/ 是/ 不/ 平衡/ 的/ ./ 平衡/ Tire/ 树/ 被/ 定义/ 为/ 所有/ 的/ 叶子/ 结点/ 都/ 在/ 同/ 一层/ ,/ 当/ 叶子/ 结点/ 都/ 存在/ 时/ ,/ 树/ 被/ 称为/ 完全/ Trie/ 树/ ./ 图/ 3/ 给出/ 一颗/ 高度/ 为/ 3/ 的/ 完全/ Trie/ 树/ ,/ 当/ 结点/ 011/ 失效/ ,/ 树/ 变成/ 不/ 完全/ 的/ ,/ 但是/ 平衡/ 的/ ./ 如果/ 结点/ 010/ 和/ 011/ 都/ 失效/ ,/ Tire/ 树/ 变成/ 不/ 平衡/ 树/ ./ 从/ Tire/ 树/ 定义/ 可知/ ,/ 同层/ 结点/ 构成/ 环/ 结构/ ,/ 此环/ 称之为/ Trie/ 环/ ./ 因此/ 每个/ 结点/ 需/ 连接/ 其/ 前驱/ 和/ 后/ Page5/ 继/ 结点/ 以/ 构成/ 环/ ./ 定义/ 2/ ./ 动态/ Trie/ 树一/ 结点/ 的/ 前驱/ 是/ 以/ 顺时针/ 方向/ 沿/ Trie/ 环/ 第一个/ 存在/ 的/ 结点/ ,/ 同理/ 它/ 的/ 后继/ 结点/ 是/ 以/ 逆时针/ 方向/ 沿/ Trie/ 环/ 第一个/ 存活/ 的/ 结点/ ./ 从/ 定义/ 2/ 看出/ ,/ 一个/ 结点/ 的/ 前驱/ 和/ 后继/ 可能/ 不是/ 在/ 标识符/ 空间/ 中/ 的/ 邻居/ ,/ 因为/ 动态/ 网络/ 不能/ 保证/ 所有/ 邻居/ 结点/ 都/ 存活/ ./ 下面/ 给出/ 结点/ x1x2/ …/ xk/ 确定/ 其/ 前驱/ 的/ 算法/ ./ 算法/ 1/ ./ Predecessor/ (/ x1x2/ …/ xk/ )/ ./ 1/ ./ 结点/ x1x2/ …/ xk/ 沿/ 向上/ 路径/ 发送/ “/ 确定/ 前驱/ ”/ 消息/ ,/ 该/ 消息/ 直到/ 发送到/ x1x2/ …/ xk/ ,/ 某个/ 祖先/ x1x2/ …/ xi/ 已经/ 有/ 前驱/ 并且/ 该/ 祖先/ 不是/ 其父/ 的/ 第/ 1/ 个/ 孩子/ 为止/ ./ 本节/ 给出/ 最优/ P2P/ 网络/ 的/ 构建/ 方法/ ,/ 使/ 网络/ 在/ 2/ ./ 结点/ x1x2/ …/ xi/ 将/ 消息/ 转发给/ 其/ 前驱/ 结点/ ,/ 接着/ 该/ 消息/ 一直/ 沿着/ 最后/ 一个/ 向下/ 链接/ 被/ 转发/ ,/ 直到/ 结点/ x1x2/ …/ xk/ 所在/ 的/ 层/ ,/ 并/ 把/ 该/ 结点/ 作为/ x1x2/ …/ xk/ 的/ 前驱/ ./ 该/ 算法/ 的/ 效率/ 由/ 如下/ 定理/ 给出/ ./ 定理/ 3/ ./ 在/ 概率/ 1/ -/ o/ (/ 1/ )/ 的/ 保证/ 下/ ,/ 算法/ 1/ 的/ 代价/ 最多/ 是/ dlogd/ 槡/ n/ +/ 0.5/ +/ logd/ (/ (/ 1/ +/ ε/ )/ logn/ -/ o/ (/ loglogn/ )/ )/ ./ 算法/ 1/ 给出/ 确定/ 结点/ 前驱/ 的/ 步骤/ ,/ 同理/ 也/ 可以/ 确定/ 结点/ 的/ 后继/ Successor/ (/ x/ )/ ./ 4.2/ 静态/ 网络/ 到/ Trie/ 树/ 的/ 映射/ 动态/ 环境/ 下/ 保持/ 静态/ 互联网络/ 的/ 拓扑/ 特性/ ./ 4.2/ ./ 1/ 最优/ 拓扑/ 构建/ 规则/ 欲/ 保持/ 静态/ 互联网络/ 的/ 拓扑/ 特性/ ,/ 主要/ 需/ 解决/ P2P/ 网络/ 动态变化/ 问题/ ./ 为此/ 本/ 节/ 给出/ 基于/ Trie/ 树/ 的/ 方法/ 可/ 使/ 任何/ 类型/ 的/ 互联网络/ 结构/ 都/ 能/ 被/ 构建/ 成/ 高效/ 的/ 覆盖/ 网络/ ./ 对/ 任意/ d/ -/ ary/ 互联网络/ 的/ 一个/ 结点/ x/ =/ x1x2/ …/ xk/ ,/ σ/ i/ (/ x/ )/ (/ 1/ / i/ / d/ )/ ,/ 表示/ 结点/ x/ 的/ 一个/ 邻居/ ,/ 则/ 基于/ 动态/ d/ 叉/ Trie/ 树/ 的/ 构建/ 规则/ 如下/ :/ (/ 1/ )/ 如果/ 结点/ σ/ i/ (/ x/ )/ 存在/ 于/ 覆盖/ 网络/ ,/ 那么/ 它/ 是/ 结点/ x/ 的/ 第/ i/ 个/ 邻居/ ./ (/ 2/ )/ 否则/ ,/ 如果/ 结点/ σ/ i/ (/ x/ )/ 和/ 它/ Trie/ 树中/ 前驱/ 结点/ Predecessor/ (/ x/ )/ 的/ 标识符/ 有/ 共同/ 长度/ 为/ k/ -/ 1/ 的/ 前缀/ ,/ 那么/ 结点/ Predecessor/ (/ x/ )/ 是/ 结点/ x/ 的/ 第/ i/ 个/ 邻居/ ,/ 并且/ Predecessor/ (/ x/ )/ 保留/ 标识符/ σ/ i/ (/ x/ )/ 以/ 代替/ 结点/ σ/ i/ (/ x/ )/ ./ (/ 3/ )/ 否则/ ,/ 如果/ 结点/ σ/ i/ (/ x/ )/ 和/ 它/ Trie/ 树中/ 后继/ 结点/ Successor/ (/ x/ )/ 的/ 标识符/ 有/ 共同/ 长度/ 为/ k/ -/ 1/ 的/ 前缀/ ,/ 那么/ Successor/ (/ x/ )/ 是/ 结点/ x/ 的/ 第/ i/ 个/ 邻居/ ,/ 并且/ Successor/ (/ x/ )/ 保留/ 标识符/ σ/ i/ (/ x/ )/ 以/ 代替/ 结点/ σ/ i/ (/ x/ )/ ./ (/ 4/ )/ 否则/ 最/ 年轻/ 存活/ 的/ σ/ i/ (/ x/ )/ 祖先/ 结点/ 作为/ 结点/ x/ 的/ 第/ i/ 个/ 邻居/ ,/ 并且/ 该/ 祖先/ 保留/ 标识符/ σ/ i/ (/ x/ )/ ./ 该/ 构建/ 规则/ 可/ 保证/ 互联网络/ 结点/ 在/ 动态/ 环境/ 下/ 一定/ 能/ 按/ 其/ 规则/ 连接/ 到/ 它/ 的/ 邻居/ σ/ i/ (/ x/ )/ ,/ 并且/ 保证/ 在/ σ/ i/ (/ x/ )/ 不/ 存在/ 时/ ,/ 替代/ 结点/ 和/ σ/ i/ (/ x/ )/ 的/ 标识符/ 具有/ 最大/ 匹配/ ,/ 以/ 保证/ 路由/ 算法/ 以/ 最小/ 代价/ 完成/ 动态/ 路由/ (/ 路由/ 算法/ 将/ 在/ 后面/ 介绍/ )/ ./ 例如/ 将/ deBruijn/ 图/ 嵌入/ 到/ 图/ 3/ 所示/ 的/ 树/ 中/ ,/ 按/ 规则/ 结点/ 010/ 连接/ 100/ 和/ 101/ ,/ 如果/ 结点/ 100/ 失效/ ,/ 010/ 将/ 连接/ 到/ 101/ ./ 如果/ 结点/ 100/ 和/ 101/ 都/ 失效/ ,/ 其父/ 结点/ 10/ 替代/ 它们/ 作为/ 010/ 的/ 邻居/ ./ 从/ 该/ 构建/ 规则/ 很/ 容易/ 得到/ 如下/ 定理/ ./ 定理/ 4/ ./ 设/ 一个/ 基于/ 上述/ 构建/ 规则/ 的/ P2P/ 系统/ 的/ 中间/ 结点/ 和/ 叶子/ 结点/ 分别/ 为/ x/ 和/ y/ ,/ 可/ 得/ 如下/ 结论/ :/ (/ 1/ )/ 当/ Trie/ 树/ 平衡/ 时/ ,/ 结点/ x/ 和/ y/ 分别/ 有/ 2d/ +/ 3/ 和/ d/ +/ 3/ 个/ 邻居/ ./ (/ 2/ )/ 当/ Trie/ 树/ 不/ 平衡/ 时/ ,/ 结点/ x/ 和/ y/ 分别/ 至少/ 有/ 2d/ +/ 1/ 和/ d/ +/ 1/ 个/ 邻居/ ./ 在/ 设计/ 实际/ 系统/ 时/ ,/ 通常/ 选取/ 较大/ 的/ 参数/ d/ 来/ 保证系统/ 有/ 高效/ 的/ 路由/ 和/ 较/ 好/ 的/ 连通性/ ,/ 但/ 同时/ 也/ 增加/ 了/ 系统维护/ 代价/ ,/ 反之亦然/ ./ 因此/ 参数/ d/ 对系统/ 性能/ 有/ 很大/ 影响/ ,/ 选取/ 一个/ 最佳/ 的/ 参数值/ 是/ 一个/ 折中/ 问题/ ./ P2P/ 系统/ 执行/ 的/ 操作/ 主要/ 包括/ 查询/ 和/ 更新/ ,/ 因此/ 可以/ 基于/ 它们/ 的/ 操作/ 代价/ 计算/ 出/ 系统/ 总/ 的/ 代价/ ./ 设/ 查询/ 操作/ 所/ 占/ 比例/ 为/ λ/ (/ 0/ / λ/ / 1/ )/ ,/ 更新/ 操作/ 比例/ 为/ 1/ -/ λ/ ,/ 则/ 总/ 代价/ 为/ C/ =/ λ/ A/ +/ (/ 1/ -/ λ/ )/ B/ ,/ 其中/ A/ 为/ 查询/ 代价/ ,/ B/ 为/ 更新/ 代价/ ./ 它们/ 的/ 值/ 可/ 分别/ 近似/ 为/ logdn/ 和/ d/ ,/ 因此/ 有/ 总/ 代价/ ,/ 对/ 该式/ 求导/ 得/ 很/ 容易/ 利用/ 牛顿/ 迭代/ 计算方法/ 求得/ 满足/ 方程/ (/ 10/ )/ 中/ d/ 的/ 数值/ 解/ ./ 4.2/ ./ 2/ 最优/ 资源/ 放置/ 策略/ 资源/ 放置/ 策略/ 对/ P2P/ 系统/ 至关重要/ ,/ 因为/ 它/ 直接/ 影响/ 动态/ 路由/ 的/ 效率/ 和/ 正确性/ ./ 现有/ 的/ 策略/ 在/ 网络/ 高度/ 震荡/ 时/ 并/ 不能/ 同时/ 满足/ 上述/ 两个/ 特性/ ./ 本节/ 将/ 给出/ 基于/ Trie/ 树/ 的/ 资源/ 放置/ 策略/ ,/ 它/ 能/ 保证/ 在/ 大量/ 结点/ 失效/ 时/ ,/ 接管/ 其/ 资源/ 的/ 结点/ 标识符/ 和/ 该/ 资源/ 有/ 最大/ 匹配/ ,/ 以/ 保证/ 路由/ 的/ 正确/ 和/ 高效/ ./ 设一/ 资源/ 为/ x/ =/ x1x2/ …/ xk/ …/ ,/ 它/ 是/ 根据/ 某种/ Hash/ 算法/ 得到/ 的/ ,/ 其/ 标识符/ 通常/ 比/ 它/ 所在/ 结点/ 标识符/ 要长/ ./ 则/ 放置/ 规则/ 如下/ :/ (/ 1/ )/ 如果/ 结点/ x/ =/ x1x2/ …/ xk/ 存活/ 于/ P2P/ 网络/ ,/ 则/ 结点/ x/ 存储资源/ x/ ./ Page6/ (/ 2/ )/ 否则/ ,/ 如果/ 结点/ x/ 和/ 其/ 前驱/ Predecessor/ (/ x/ )/ 在/ Trie/ 树上/ 有/ 共同/ 的/ 父亲/ ,/ 则/ 结点/ Predecessor/ (/ x/ )/ 存储资源/ x/ ./ (/ 3/ )/ 否则/ ,/ 如果/ 结点/ x/ 和/ 其/ 后继/ Successor/ (/ x/ )/ 在/ Trie/ 树上/ 有/ 共同/ 的/ 父亲/ ,/ 则/ 结点/ Successor/ (/ x/ )/ 存储资源/ x/ ./ (/ 4/ )/ 否则/ 最/ 年轻/ 的/ x/ 存活/ 祖先/ 结点/ 存储资源/ x/ ./ 根据/ 构造/ 和/ 放置/ 策略/ 可/ 看出/ ,/ 系统/ 结点/ 和/ 动态/ Trie/ 树/ 结点/ 是/ 一一对应/ 的/ ,/ 所有/ 资源/ 都/ 放置/ 在/ 树叶子/ 结点/ 上/ ,/ 中间/ 结点/ 只/ 作为/ 路由/ 结点/ ./ 此/ 策略/ 和/ 以往/ 的/ 方法/ 不同/ (/ 如/ 文献/ [/ 19/ ]/ )/ ,/ 它们/ 都/ 是/ 把/ 虚拟/ 树/ 结点/ 以/ 组为/ 单位/ 或/ 以/ 树枝/ 为/ 一个/ 整体/ 将/ 虚拟/ 树/ 影射/ 成/ 覆盖/ 网络/ ./ 这样/ 会/ 使/ 结点/ 度数/ 增大/ 一个/ 对数/ 数量级/ ,/ 从而/ 破坏/ 了/ 互联网络/ 的/ 基本/ 特性/ ,/ 例如/ deBruijn/ 结点/ 的/ 常数/ 度/ ,/ 而/ 本文/ 的/ 方法/ 最大/ 限度/ 地/ 保持/ 了/ 原有/ 结构/ 的/ 特征/ ./ 另外/ 叶子/ 的/ 数量/ 几乎/ 是/ 中间/ 结点/ 数目/ 的/ (/ d/ -/ 1/ )/ 倍/ ,/ 因此/ 叶子/ 结点/ 足够/ 容纳/ 系统/ 发布/ 的/ 资源/ ./ 如图/ 3/ 所示/ ,/ 资源/ 100/ …/ 存储/ 在/ 结点/ 100/ ,/ 如果/ 100/ 失效/ ,/ 资源/ 100/ …/ 存储/ 在/ 结点/ 101/ ;/ 如果/ 结点/ 100/ 和/ 101/ 都/ 失效/ ,/ 资源/ 发布/ 到/ 它们/ 父亲/ 结点/ 10/ 上/ ./ 传统/ P2P/ 系统/ 都/ 是/ 把/ 所有/ 资源/ 发布/ 到/ 网络/ 中/ ,/ 这样/ 会/ 带来/ 大量/ 维护/ 代价/ ,/ 但/ 减少/ 发布/ 的/ 资源/ 会/ 使/ 某些/ 查询/ 失效/ ,/ 为此/ 本文/ 接下来/ 给出/ 一个/ 最优/ 的/ 折中/ 方案/ ./ 设/ G/ 表示/ 一/ 结点/ pi/ 存储/ 的/ 所有/ 资源/ 的/ 数量/ ,/ 设/ aj/ 表示/ 第/ j/ 个/ 资源/ 所/ 占/ 空间/ 大小/ (/ 以/ 字节/ 为/ 单位/ )/ ./ 这里/ 假设/ 对/ 资源/ j/ 的/ 成功/ 查询/ 概率/ qj/ 已知/ ,/ 并/ 有/ q1/ +/ q2/ +/ …/ qG/ =/ 1/ ./ 设/ yj/ 是/ 布尔/ 变量/ ,/ 当/ 结点/ pi/ 存储资源/ j/ 时/ ,/ yj/ =/ 1/ ,/ 否则/ yj/ =/ 0/ ./ 因此/ 结点/ pi/ 被/ 成功/ 查询/ 的/ 概率/ 为/ P2P/ 系统对/ 资源/ 的/ 维护/ 代价/ 主要/ 包括/ 数据/ 更新/ 代价/ 和/ 检查/ 代价/ ,/ 检查/ 代价/ 主要/ 查看/ 资源/ 是否/ 和/ 本地/ 数据/ 一致/ ,/ 并且/ 查看/ 资源/ 是否/ 由于/ 网络/ 的/ 变化/ 而/ 丢失/ ./ 假设/ 检查/ 消息/ 平均/ 每/ T/ 秒/ 发送到/ 结点/ pi/ ,/ 则/ 检查/ 代价/ 可以/ 近似/ 为/ 假设/ 每秒/ 有/ f/ 个/ 资源/ 插入/ 到/ 结点/ Pi/ (/ 或/ 删除/ )/ ./ 此/ 更新/ 操作/ 大约/ 消耗/ Crefresh/ =/ flogdn/ 代价/ ./ 综上/ 系统/ 总/ 的/ 代价/ 为/ 另外/ 结点/ 所/ 存/ 资源/ 的/ 量/ 需/ 满足/ 其/ 存储/ 能力/ ,/ 变量/ yj/ 还/ 需/ 满足/ 其中/ S/ 是/ 结点/ Pi/ 的/ 最大/ 存储容量/ ./ 对/ 结点/ Pi/ 应该/ 最大化/ 其/ 成功/ 查询/ 概率/ ,/ 最小化/ 网络/ 维护/ 代价/ ,/ 因此/ 最优/ 资源/ 存储/ 策略/ 是/ 多/ 目标/ 优化/ 问题/ ./ 根据/ 实际/ P2P/ 系统/ 的/ 特点/ ,/ 可以/ 建立/ 如下/ 一个/ 目标/ 函数/ 来/ 求解/ ,/ 其中/ λ/ 表示/ 查询/ 操作/ 所/ 占/ 比例/ ,/ (/ 1/ -/ λ/ )/ 是/ 维护/ 操作/ 比例/ ./ 可/ 通过/ 求式/ (/ 13/ )/ 的/ 最大值/ 来/ 确定/ 最优/ 策略/ ,/ 由式/ (/ 11/ )/ 、/ 式/ (/ 13/ )/ 得/ Cvirual/ =/ λ/ logdn/ ∑/ G/ 上述/ 分析/ 可/ 得/ 规划/ 函数/ ,/ 本文/ 用/ 动态/ 规划/ 来/ 求解/ 式/ (/ 14/ )/ 的/ 最优/ 值/ ,/ 结合/ c1/ / j/ / G/ ,/ 0/ </ i/ / S/ (/ j/ ,/ i/ )/ {/ =/ maxC/ (/ j/ -/ 1/ ,/ i/ -/ aj/ )/ +/ 我们/ 设计/ 一个/ 递归/ 程序/ 来/ 计算/ 规划/ 函数/ ,/ 在/ 程序执行/ 过程/ 中/ ,/ 把/ 变量/ yj/ 的/ 取值/ 记录下来/ ,/ 从而/ 得出/ 最优/ 资源/ 存储/ 策略/ ./ 系统/ 中/ 任何/ 结点/ 都/ 可以/ 在/ 本地/ 完成/ 该/ 最优化/ 求解/ ,/ 不需/ 增加/ 网络/ 代价/ ./ 4.3/ 特例/ 研究/ 前面/ 已/ 给出/ 基于/ 互联网络/ 的/ 通用/ P2P/ 系统/ 构建/ 方法/ ,/ 本节/ 将/ 以/ deBruijn/ 和/ Butterfly/ 结构/ 为例/ 基于/ 上述/ 方法/ 构造/ 出/ DPhoenix/ 和/ BPhoenix/ 两个/ 新/ P2P/ 系统/ ,/ 因为/ deBruijn/ 代表/ 了/ 单/ 协议/ 的/ 互联网络/ 如/ Kautz/ 、/ Hypercube/ 和/ Shuffleexchange/ 等/ ,/ But/ -/ terfly/ 可用/ 来/ 代表/ 混合/ 互联网络/ 结构/ 如/ CCC/ 等/ ./ 4.2/ 节/ 给出/ 的/ 网络拓扑/ 构造/ 规则/ 是/ 整个/ 框架/ 的/ 核心/ ,/ 该/ 方法/ 可/ 直接/ 应用/ 于/ deBruijn/ 图/ ./ 对/ Butter/ -/ fly/ 结构/ (/ 相关/ 工作/ 介绍/ 了/ Butterfly/ 结构/ )/ ,/ 系统/ 包含/ 若干/ 棵/ Trie/ 树/ ,/ 第/ i/ 棵/ 树/ 的/ 结点/ x/ =/ (/ x0x1/ …/ xk/ -/ 1/ ;/ i/ )/ 把/ 第/ i/ +/ 1/ 棵/ 树上/ 结点/ σ/ i/ (/ x/ )/ =/ (/ x0x1/ …/ xi/ ,/ y/ ,/ xi/ +/ 2/ …/ xk/ -/ 1/ ;/ i/ +/ 1/ )/ 作为/ 其/ 邻居/ ./ 由于/ P2P/ 系统/ 结点/ 数目/ 的/ 动态性/ ,/ 第/ i/ +/ 1/ 棵/ 树/ 可能/ 为空/ ,/ 此时/ 结点/ x/ 作为/ 该树/ 的/ 树根/ ./ 最优/ 参数/ d/ 的/ 选取/ 对/ DPhoenix/ 和/ BPhoenix/ 的/ 拓扑/ 性能/ 很/ 重要/ ,/ 此/ 方法/ 可以/ 不/ 经/ 任何/ 修改/ 地/ 应用/ 到/ deBruijn/ 和/ Butterfly/ 结构/ 上/ ./ 同样/ ,/ 最优/ 资源/ 放置/ 策略/ 也/ 可/ 被/ DPhoenix/ 和/ BPhoenix/ 系统/ 直接/ 采纳/ ./ 通过/ 两/ 系统/ 的/ 构造/ 可/ 看出/ 本文/ 的/ 方法/ 具有/ 通/ Page7/ 用性/ ,/ 构造/ deBruijn/ 和/ Butterfly/ 的/ 方法/ 可/ 应用/ 到/ 其它/ 互联网络/ 结构/ ./ 5/ 系统/ 的/ 动态/ 操作/ P2P/ 系统/ 是/ 高度/ 动态/ 的/ 网络/ ,/ 结点/ 频繁/ 地/ 加入/ 、/ 离开/ 和/ 失败/ ./ 这些/ 动作/ 对/ 网络拓扑/ 有/ 很大/ 影响/ ,/ 从而/ 影响/ 路由/ ./ 因此/ 对/ 这些/ 动作/ 需/ 健壮/ 的/ 处理/ 方法/ ,/ 本节/ 将/ 给出/ 基于/ 动态/ Trie/ 树/ 系统/ 的/ 动态/ 操作/ 处理/ 算法/ ./ 5.1/ 结点/ 加入/ 欲/ 保证/ 路由/ 算法/ 的/ 正确性/ ,/ 结点/ 必须/ 加入/ 到/ 正确/ 的/ 位置/ ,/ 及时/ 更新/ 路由表/ 入口/ 项/ ./ 同时/ 也/ 需以/ 较/ 低/ 代价/ 降低/ Trie/ 树/ 的/ 倾斜度/ 以/ 平衡/ 系统/ 的/ 负载/ ./ 为/ 满足/ 上述/ 需求/ ,/ 本文/ 给出/ 算法/ 3/ ./ 的/ 邻居/ 可以/ 根据/ 其父/ 结点/ 的/ 路由表/ 快速/ 定位/ ./ 算法/ 2/ ./ Join/ (/ Peerx/ =/ x0x1/ …/ xk/ )/ ./ 1/ ./ 加入/ 结点/ 首先/ 通过/ Hash/ 函数/ 获得/ 标识符/ x/ ,/ 之后/ 路由/ 到/ 其/ 标识符/ 所在/ 的/ 位置/ ./ 如果/ 该/ 位置/ 有/ 结点/ x/ (/ 没有/ 设/ 其父/ 结点/ 为/ x/ )/ 查看/ 其/ 邻居/ σ/ i/ (/ x/ )/ 是否/ 至少/ 包含/ 两个/ 标识符/ ,/ 则/ 结点/ x/ 路由/ 到/ 位置/ σ/ i/ (/ x/ )/ ./ 重复/ 此/ 过程/ (/ x/ =/ σ/ i/ (/ x/ )/ )/ 直到/ 结点/ x/ 的/ 邻居/ σ/ i/ (/ x/ )/ 只/ 包含/ 一个/ 标识符/ ,/ 那么/ 结点/ 分享/ x/ 一个/ 标识符/ 并/ 最后/ 加入/ 到/ 该/ 标识符/ 所在位置/ ./ 2/ ./ 结点/ 按/ 拓扑/ 构造/ 规则/ 连接/ 其/ 邻居/ ,/ 其中/ 它/ 互联网络/ 新/ 加入/ 结点/ 总是/ 能/ 选择/ Trie/ 树/ 低层/ 空缺/ 位置/ 加入/ ,/ 因为/ 构造/ 规则/ 使/ 存活/ 结点/ 接管/ 失败者/ 时/ 保存/ 它们/ 的/ 标识符/ 代替/ 它们/ ,/ 这些/ 多余/ 的/ 标识符/ 揭示/ 出/ 系统/ 的/ 空缺/ ,/ 也/ 标识/ 出树/ 的/ 不/ 平衡/ 信息/ ,/ 加入/ 结点/ 一直/ 沿/ 这些/ 连接/ 找到/ 最低/ 层/ 的/ 空缺/ 位置/ 加入/ ,/ 从而/ 降低/ 树/ 的/ 不平衡性/ ./ 例如/ 在/ 图/ 3/ 中/ (/ 假设/ 结点/ 100/ 和/ 101/ 失败/ ,/ 结点/ 010/ 连接/ 到/ 10/ )/ ,/ 新/ 结点/ 0101/ 欲/ 成为/ 010/ 的/ 孩子/ ,/ 发现/ 它/ 的/ 邻居/ 10/ 存储/ 了/ 其它/ 的/ 标识符/ ,/ 则/ 它/ 会/ 选择/ 100/ 或/ 101/ 的/ 位置/ 加入/ 替代/ 它们/ ./ 算法/ 步/ 2/ 根据/ 其父/ 结点/ 快速/ 定位/ 互联网络/ 邻居/ 是/ 有/ 如下/ 定理/ 保证/ 的/ ./ 定理/ 5/ ./ 对于/ 结点/ x/ 和/ 它/ 的/ d/ 个/ 互联网络/ 邻居/ σ/ i/ (/ x/ )/ ,/ 结点/ x/ 后代/ 的/ 互联网络/ 邻居/ 也/ 是/ 结点/ σ/ i/ (/ x/ )/ 的/ 后代/ ./ 虽然/ 加入/ 过程/ 是/ 一个/ 迭代/ 过程/ ,/ 但/ 代价/ 也/ 是/ 较/ 低/ 的/ 并/ 由/ 定理/ 5/ 给出/ ./ 算法/ 消耗/ 的/ 代价/ 至多是/ 定理/ 6/ ./ 在/ 概率/ 1/ -/ o/ (/ 1/ )/ 的/ 保证/ 下/ ,/ 结点/ 加入/ 5.2/ 结点/ 离开/ 高效/ 快速/ 处理/ 结点/ 离开/ 的/ 方法/ 可/ 保证/ 网络拓扑/ 持久/ 的/ 连通性/ ./ 如果/ 叶子/ 结点/ 离开/ 系统/ ,/ 它/ 可以/ 随时/ 离开/ ,/ 其/ 保存/ 的/ 资源/ 根据/ 资源/ 放置/ 规则/ 重新分配/ 给/ 其/ 邻居/ ,/ 这个/ 过程/ 并/ 不/ 影响/ 系统/ 的/ 拓扑/ 形状/ ./ 但树/ 的/ 中间/ 结点/ 欲/ 离开/ ,/ 此/ 动作/ 会/ 给/ 拓扑/ 带来/ 较大/ 改变/ ,/ 算法/ 4/ 给出/ 高效/ 处理/ 方法/ ./ 对于/ 有/ 向/ 互联网络/ ,/ 设/ (/ σ/ i/ (/ x/ )/ )/ -/ 1/ 表示/ 结点/ x/ 的/ 入边/ ,/ 对/ 无/ 向/ 网络/ 有/ (/ σ/ i/ (/ x/ )/ )/ -/ 1/ =/ σ/ i/ (/ x/ )/ ./ 算法/ 3/ ./ Departure/ (/ Peerx/ )/ ./ 1/ ./ 结点/ x/ 发送/ “/ 替代/ ”/ 消息/ 给/ 它/ 的/ 一个/ 后代/ 叶子/ 结点/ ./ 如果/ 该/ 后代/ 结点/ u/ 至少/ 包含/ 两个/ 标识符/ ,/ 则/ u/ 将/ 消息/ 转发给/ 其/ 邻居/ (/ σ/ i/ (/ u/ )/ )/ -/ 1/ ,/ 重复/ 此/ 过程/ (/ u/ =/ (/ σ/ i/ (/ u/ )/ )/ -/ 1/ )/ 直到/ 结点/ u/ 只/ 包含/ 一个/ 标识符/ ./ 最后/ 结点/ u/ 被/ 用来/ 代替/ 结点/ x/ ./ 由表/ 更新/ x/ 的/ d/ 个/ (/ σ/ i/ (/ x/ )/ )/ -/ 1/ 邻居/ ./ 2/ ./ 更新/ 结点/ xTrie/ 树上/ 邻居/ ,/ 并且/ 根据/ 结点/ x/ 父亲/ 路步/ 1/ 也/ 像/ 加入/ 算法/ 一样/ 降低/ 树/ 的/ 不/ 平衡/ ,/ “/ 替代/ ”/ 消息/ 会/ 选择/ 一个/ 高层/ 叶子/ 结点/ 来/ 接替/ 低层/ 离开/ 的/ 中间/ 结点/ ./ 同时/ 在步/ 2/ 中/ ,/ 也/ 可以/ 利用/ 定理/ 4/ 给出/ 的/ 性质/ 快速/ 更新/ 互联网络/ 邻居/ ./ 下面/ 定理/ 给出/ 此/ 算法/ 的/ 代价/ ./ 定理/ 7/ ./ 在/ 概率/ 1/ -/ o/ (/ 1/ )/ 的/ 保证/ 下/ ,/ 结点/ x/ 离开/ 的/ 代价/ 至多是/ logdn/ +/ dlogd/ 槡/ n/ -/ 1.5/ -/ Length/ (/ x/ )/ ./ P2P/ 网络/ 经常/ 也/ 有/ 结点/ 失败/ ,/ 本文/ 也/ 按/ 传统/ 的/ 方法/ 让/ 结点/ 周期/ 地/ 查看/ 其/ 邻居/ 是否/ 失效/ ,/ 一旦/ 发现/ 就/ 按/ 离开/ 结点/ 处理/ ./ 这里/ 不再/ 单独/ 给出/ 结点/ 失败/ 的/ 处理/ 算法/ ./ 5.3/ 负载平衡/ 从/ 前面/ 介绍/ 的/ 方法/ 可/ 看出/ 用/ 基于/ Trie/ 树/ 构建/ 的/ P2P/ 系统/ 有/ 很多/ 优良/ 特性/ ,/ 但/ 动态/ 的/ 网络/ 会/ 造成/ 树/ 的/ 不/ 平衡/ 从而/ 影响/ 系统/ 性能/ ./ 为此/ 本/ 节/ 给出/ 动态/ Tire/ 树/ 的/ 负载平衡/ 算法/ ,/ 本文/ 以/ DPhoenix/ 系统/ 为例/ 展示/ 负载平衡/ 算法/ ./ 如图/ 4/ 所示/ ,/ 根据/ 构造/ 规则/ 子树/ e/ 的/ 所有/ 结点/ 都/ 会/ 找到/ 替代/ 它们/ 不/ 存在/ 邻居/ 的/ 结点/ ,/ 由/ 定理/ 4/ 知/ ,/ 这些/ 结点/ 都/ 会/ 连接/ 到/ 结点/ c/ ,/ 当/ 结点/ c/ 过载/ 时/ ,/ 它/ 激发/ 负载平衡/ 算法/ ./ 如同/ 结点/ 加入/ 和/ 离开/ 算法/ 所述/ ,/ 指向/ c/ 的/ 连接/ 揭示/ 了/ 不/ 平衡/ 信息/ ,/ 结点/ c/ 就是/ 利用/ 这/ Page8/ 个/ 信息/ 来/ 执行/ 负载平衡/ 算法/ ,/ 此时/ c/ 存储/ 了/ 子树/ e/ 所有/ 信息/ ./ 算法/ 包含/ 两步/ ,/ 第一步/ 采用/ 类似/ AVL/ 树/ 旋转/ 的/ 方法/ 处理/ 不/ 平衡/ ./ 首先/ 结点/ c/ 对子/ 树/ e/ 的/ 所有/ 结点/ 按中序/ 遍历/ 排序/ 得/ m/ ,/ l/ ,/ k/ ,/ j/ ,/ h/ ,/ e/ ,/ i/ ./ 之后/ c/ 开始/ 按此/ 顺序/ 旋转/ 子树/ ,/ 结点/ m/ 替代/ l/ ;/ l/ 替代/ k/ ;/ k/ 替代/ j/ 等等/ ,/ 最后/ 结点/ e/ 变成/ i/ 的/ 一个/ 孩子/ ,/ 如图/ 5/ (/ a/ )/ 所示/ ./ 用/ 同样/ 的/ 中序/ 遍历/ 对/ 该/ 结构/ 旋转/ 得到/ 如图/ 5/ (/ b/ )/ 所示/ 结果/ ./ 最后/ 子树/ 变成/ 平衡/ 树/ ,/ 图/ 5/ (/ c/ )/ 给出/ 得到/ 的/ 平衡/ 树/ ./ 步/ 2/ 是/ 自/ 底向上/ 地/ 把/ 平衡/ 子树/ j/ 的/ 结点/ 移给子/ 树/ c/ ,/ 做/ 为/ 其/ 后代/ 结点/ ,/ 直到/ 两颗/ 树/ 的/ 叶子/ 结点/ 在/ 整个/ Trie/ 树/ 的/ 同/ 一层/ 为止/ ./ 这个/ 过程/ 是/ 结点/ m/ ,/ k/ 成为/ c/ 的/ 孩子/ ;/ 结点/ h/ ,/ i/ 成为/ m/ 的/ 孩子/ ,/ 最后/ 的/ 结果/ 由图/ 6/ 给出/ ./ 在/ 算法/ 执行/ 过程/ 中/ ,/ 数据/ 移动/ 代价/ 较/ 低/ ,/ 因为/ 采用/ 的/ 旋转/ 方法/ 充分利用/ 了/ 系统/ 拓扑/ 的/ 特性/ ./ 对/ 参与/ 的/ 结点/ 需要/ 花费/ o/ (/ logn/ )/ 代价/ 去路/ 由/ 和/ 更新/ 路由表/ ,/ 但此/ 代价/ 是/ 可以/ 接受/ 的/ ./ 由/ 算法/ 的/ 步骤/ 可/ 看出/ ,/ 执行/ 过程/ 中/ 不/ 需要/ 全局/ 信息/ ,/ 也/ 不/ 需要/ 整个/ 系统/ 都/ 参与/ ,/ 只是/ 某个/ 结点/ 过载/ 时/ ,/ 它/ 自己/ 发起/ 算法/ 并/ 在/ 整个/ 过程/ 中/ 控制/ 所有/ 参与/ 结点/ ,/ 同时/ 该/ 算法/ 并/ 不/ 很大/ 程度/ 地/ 改变/ 系统/ 拓扑/ ./ 以上/ 这些/ 特性/ 对/ 高度/ 动态/ 环境/ 下/ 的/ 树结构/ 是/ 很/ 必要/ 的/ ./ 5.4/ 路由/ 算法/ P2P/ 系统/ 里/ 的/ 消息/ 包括/ 3/ 类/ :/ (/ 1/ )/ 发布/ 或/ 查找/ 资源/ 的/ 消息/ ./ (/ 2/ )/ 维护/ 网络拓扑/ 的/ 消息/ ./ (/ 3/ )/ 两/ 结点/ 之间/ 的/ 路由/ 消息/ ./ 为了/ 正确/ 并/ 高效/ 地/ 路由/ 上述/ 3/ 种/ 消息/ ,/ Trie/ 树/ 的/ 每个/ 结点/ 需/ 按/ 本文/ 给出/ 的/ 拓扑/ 规则/ 保持/ 连接/ ./ 但/ 由于/ P2P/ 网络/ 的/ 动态性/ 和/ 网络/ 维护/ 的/ 延迟/ ,/ 拓扑/ 不能/ 始终/ 按/ 规则/ 保持/ 连接/ ,/ 这/ 就/ 要求/ 路由/ 算法/ 具有/ 容错/ 特性/ ./ 为/ 满足/ 上述/ 需求/ ,/ 结合/ 拓扑/ 构造/ 和/ 资源/ 放置/ 的/ 特点/ ,/ 本文/ 设计/ 了/ 算法/ 5/ 用来/ 支持/ 高效/ 容错/ 的/ 路由/ 算法/ ./ 其中/ x/ 表示/ 请求/ 结点/ 或/ 当前/ 结点/ ,/ y/ 是/ 终点/ 或/ 资源/ 标识符/ ./ case1/ :/ Length/ (/ x/ )/ =/ Length/ (/ y/ )/ or/ (/ yisaresourceandxis/ 算法/ 4/ ./ Route/ (/ x/ ,/ y/ )/ ./ if/ (/ x/ =/ y/ )/ thenreturnavailable/ ./ elseifComprefix/ (/ x/ ,/ Successor/ (/ x/ )/ )/ =/ k/ -/ 1andSuc/ -/ cessor/ (/ x/ )/ islessthanyinthering/ ,/ thenForwardthemessagetopeerSuccessor/ (/ x/ )/ ./ elseifComprefix/ (/ x/ ,/ Predecessor/ (/ x/ )/ )/ =/ k/ -/ 1andelsePeerxforwardsmessagetoitsneighbor/ σ/ i/ (/ x/ )/ amongalltheneighbors/ ./ case2/ :/ Length/ (/ x/ )/ </ Length/ (/ y/ )/ or/ (/ yisaresourceandxisif/ (/ xcontainsy/ )/ thenreturnavailable/ ./ elseif/ (/ Peerxhasatleastonechild/ )/ ,/ thenForwardthemessagetoitschildzwhichhasthelargestvalueelsePeerxforwardsmessagetoitsneighbor/ σ/ i/ (/ x/ )/ amongalltheneighbors/ ./ case3/ :/ Length/ (/ x/ )/ >/ Length/ (/ y/ )/ if/ (/ xhasalinktoitsparent/ )/ thenPeerxforwardselsePeerxforwardsmessagetoitsneighbor/ σ/ i/ (/ x/ )/ amongalltheneighbors/ ./ 对/ 资源/ 的/ 查询/ 该/ 算法/ 主要/ 包括/ 两步/ ,/ 首先/ 消息/ 从/ 请求/ 结点/ 路由/ 到/ 同/ 一层/ 结点/ ,/ 该/ 结点/ 的/ 标识符/ 是/ 资源/ y/ 的/ 前缀/ ,/ 其次/ 查询/ 消息/ 沿/ 向下/ 路径/ 路由/ 到/ 叶子/ 结点/ 去/ 查找/ 资源/ y/ ./ 例如/ 对/ DPhoenix/ 系统/ ,/ 如图/ 3/ 所示/ ,/ 结点/ 00/ 欲/ 查获/ 资源/ 111/ …/ ,/ 查询/ 被/ 沿/ 路径/ 00/ -/ 01/ -/ 11/ 转发/ ,/ 接着/ 路由/ 到/ 叶子/ 结点/ 111/ ./ 算法/ 支持/ Page9/ 的/ 资源/ 查询/ 和/ 任意/ 结点/ 间/ 的/ 路由/ 操作/ 都/ 有/ 一/ 共同/ 特点/ :/ 消息/ 可以/ 像/ 在/ 静态/ 互联网络/ 里/ 路由/ 一样/ ,/ 不必/ 考虑/ 网络拓扑/ 的/ 变化/ ./ 因为/ 拓扑/ 构造方法/ 保证/ 一定/ 会/ 有/ 结点/ 替代/ 失效/ 或/ 离开/ 者/ 并/ 保存/ 其/ 标识符/ ,/ 同时/ 资源/ 放置/ 策略/ 也/ 是/ 按/ 构造方法/ 的/ 规则/ 处理/ 资源/ 的/ ./ 这样/ 就/ 保证/ 了/ 路由/ 的/ 正确性/ ,/ 同时/ 前面/ 的/ 一系列/ 最优/ 策略/ 保证/ 了/ 路由/ 的/ 高效性/ ,/ 定理/ 7/ 给出/ 了/ 量化/ 的/ 路由/ 效率/ ./ 定理/ 8/ ./ 动态/ 环境/ 下/ ,/ 以/ 概率/ 1/ -/ o/ (/ 1/ )/ 为/ 保证/ ,/ 系统/ DPhoenix/ 和/ BPhoenix/ 的/ 最坏/ 路由/ 延迟/ (/ 网络/ 直径/ )/ 分别/ 是/ logdn/ 和/ 2logdn/ -/ 1.6/ 性能/ 分析/ 文本/ 给出/ 的/ 所有/ 算法/ 都/ 在/ 我们/ 开发/ 的/ P2P/ 模拟器/ 上/ 实现/ 了/ ,/ 该/ 模拟器/ 和/ 算法/ 代码/ 都/ 用/ C++/ 编写/ ,/ 实验/ 的/ 运行/ 环境/ 是/ 奔腾/ IV3/ ./ 0GHzCPU/ ,/ 2GB/ 内存/ ./ 我们/ 在/ 模拟器/ 上/ 实现/ 了/ DPhoenix/ 和/ BPhoe/ -/ nix/ 系统/ ,/ 作为/ 比较/ ,/ 基于/ deBruijn/ 的/ Koorde/ 系统/ 和/ 基于/ Butterfly/ 的/ Viceroy/ 系统/ 也/ 被/ 在/ 模拟器/ 上/ 实现/ ./ 为/ 公平/ 比较/ ,/ 对/ d/ -/ ary/ 的/ deBruijn/ 和/ Butterfly/ 的/ d/ 值取/ 4/ ,/ 这样/ 所有/ 系统/ 结点/ 度数/ 都/ 相同/ ,/ 同时/ 每组/ 实验/ 网络/ 包含/ 256/ 至/ 1/ 百万/ 个/ 结点/ ,/ 所有/ 查询/ 在/ 网络/ 里/ 被/ 随机/ 且/ 均匀/ 地/ 激发/ ./ 本文/ 所有/ 实验/ 都/ 是/ 在/ 上述/ 条件/ 下/ 进行/ 的/ ./ 6.1/ 动态/ 网络/ 路由/ 效率/ 本/ 节/ 给出/ 两组/ 实验/ 以/ 检验/ 网络/ 在/ 动态/ 环境/ 下/ 的/ 最大/ 和/ 平均/ 路由/ 延迟/ ./ 在/ 第/ 1/ 组/ 实验/ 中/ ,/ 为/ 模拟/ 动态/ 网络/ ,/ 结点/ 总数/ 大约/ 10/ %/ 的/ 结点/ 被/ 设置/ 成/ 加入/ 和/ 离开/ 网络/ ./ 最大/ 路由/ 跳数/ 和/ 平均/ 路由/ 跳数/ 在/ 此/ 条件/ 下/ 被/ 记录/ ,/ 同时/ 第/ 2/ 节/ 给出/ 的/ 最大/ 查询/ 延迟/ 理论/ 下界/ (/ dia/ -/ bound/ )/ 和/ 平均/ 延迟/ 下界/ (/ avg/ -/ bound/ )/ 也/ 在/ 结果/ 中/ 给出/ ,/ 用来/ 和/ 实际/ 系统/ 的/ 结果/ 作以/ 比较/ ./ 图/ 7/ 给出/ 第一组/ 实验/ 结果/ ,/ 图/ 7/ (/ a/ )/ 给出/ 最大/ 延迟/ ,/ 平均/ 查询/ 效率/ 由图/ 7/ (/ b/ )/ 给出/ ./ 从/ 结果/ 看出/ ,/ DPhoenix/ 的/ 最大/ 和/ 平均/ 延迟/ 超越/ 了/ 下界/ ,/ 而/ BPhoenix/ 的/ 效率/ 略大于/ 理论/ 下界/ ,/ 因为/ 其内/ 嵌/ 结构/ Butterfly/ 不像/ DPhoenix/ 的/ deBruijn/ 有/ 最优/ 直径/ ./ 同时/ DPhoenix/ 和/ BPhoenix/ 的/ 查询/ 效率/ 远高于/ Koorde/ 和/ Vice/ -/ roy/ ,/ 并且/ 它们/ 的/ 跳数/ 也/ 少于/ 理论/ 下界/ ./ 此/ 结果/ 验证/ 了/ 本文/ 给出/ 的/ 理论/ 下界/ 对/ 现有/ P2P/ 系统/ 的/ 有效性/ ,/ 而/ 基于/ Trie/ 树/ 构造/ 的/ 系统/ 可以/ 超越/ 下界/ ,/ 因为/ 它们/ 能够/ 更好/ 地/ 适应/ 动态/ 环境/ ./ 第/ 2/ 组/ 实验/ 中/ ,/ 每个/ 网络/ 起初/ 有/ 64K/ 个/ 结点/ ,/ 后/ 允许/ 一定/ 数目/ 结点/ 离开/ ,/ 同时/ 设置/ 相同/ 数目/ 的/ 结点/ 加入/ ,/ 从而/ 网络/ 总结/ 点数/ 几乎/ 不变/ ./ 图/ 8/ 给出/ 此/ 环境/ 下/ 各/ 系统/ 的/ 路由/ 跳数/ ./ 从图/ 中/ 看出/ 不论是/ 最坏情/ Page10/ 况下/ 还是/ 平均/ 情况/ 下/ ,/ DPhoenix/ 和/ BPhoenix/ 系统/ 跳数/ 的/ 波动/ 都/ 好/ 于/ Koorde/ 和/ Viceory/ ./ 此/ 结果/ 说明/ 本文/ 的/ 构建/ 方法/ 能/ 使/ P2P/ 系统/ 很/ 好/ 地/ 适应/ 结点/ 频繁/ 的/ 加入/ 和/ 退出/ ,/ 而/ 现有/ 系统/ 的/ 查询/ 性能/ 在/ 网络/ 震荡/ 时受/ 较大/ 影响/ ./ 6.2/ 系统/ 最优化/ 本/ 节/ 给出/ 对/ DPhoenix/ 和/ BPhoenix/ 两/ 系统/ 应用/ 最优化/ 设计/ 后/ 的/ 性能/ 评测/ 结果/ ./ 对/ 最优/ 资源/ 放置/ 策略/ ,/ 本/ 实验/ 假设/ 每/ 结点/ 最大/ 负载/ 是/ 102/ +/ x/ ,/ x/ 是/ 和/ 结点/ 数目/ 相关/ 的/ 整数/ ,/ 测试/ 时/ 分别/ 取/ x/ =/ 0/ ,/ …/ ,/ 12/ ./ 系统/ 查询/ 和/ 更新/ 操作/ 比例/ 被/ 设置/ 成/ 60/ %/ 和/ 40/ %/ ./ 根据/ 这些/ 实验/ 条件/ ,/ 我们/ 可/ 得/ 优化/ 资源/ 放置/ 策略/ 和/ 拓扑/ 构造/ 策略/ 后/ 的/ 网络/ 代价/ ,/ 其中/ 图/ 9/ 给出/ 每个/ 结点/ 平均/ 消耗/ 的/ 路由/ 代价/ ./ 该/ 结果表明/ 在/ 网络/ 规模/ 扩展/ 的/ 同时/ ,/ 优化/ 后/ 的/ 系统/ OPT/ -/ DPhoenix/ 和/ OPT/ -/ BPhoenix/ 比原/ 系统/ 的/ 路由/ 显著/ 变小/ ./ 但/ 系统维护/ 代价/ 的/ 实验/ 结果/ (/ 如图/ 10/ 所示/ )/ 刚好/ 和/ 路由/ 代价/ 相反/ ,/ 基于/ 最优设计/ 的/ 网络/ 代价/ 比非/ 优化/ 的/ 网络/ 要略/ 高些/ ./ 因为/ ,/ 正如/ 在/ 最优化/ 设计/ 方法/ 中/ 指出/ 的/ ,/ 不论是/ 最优/ 放置/ 策略/ 还是/ 最优/ 拓扑/ 构建/ 策略/ 都/ 是/ 一个/ 最优/ 折中/ 设计/ 问题/ ./ 6.3/ 负载平衡/ 通常/ 希望/ P2P/ 系统/ 的/ 资源/ 平均/ 地/ 分布/ 到/ 每个/ 结点/ 上/ ,/ 这样/ 可以/ 使/ 结点/ 收到/ 其它/ 结点/ 均衡/ 的/ 访问/ ,/ 以至于/ 系统/ 总/ 的/ 访问/ 代价/ 和/ 存储/ 代价/ 由/ 每个/ 结点/ 均匀/ 地来/ 承担/ ./ 本文/ 采用/ 结点/ 所/ 存/ 资源/ 数量/ 等于/ 平衡/ 负载/ 的/ 数目/ 占/ 总结/ 点数/ 的/ 百分比/ 来/ 衡量/ 系统/ 平衡/ 负载/ 的/ 能力/ ,/ 其中/ 允许/ 5/ %/ 的/ 误差/ ,/ 例如/ 平均/ 负载/ 是/ 每/ 结点/ 100/ 个/ 资源/ ,/ 那么/ 存储/ 95/ ~/ 105/ 个/ 资源/ 的/ 结点/ 也/ 被/ 计算/ 在/ 比例/ 中/ ./ 实验/ 中/ ,/ 每/ 系统/ 有/ 10000/ 个/ 结点/ ,/ 系统资源/ 数是/ 105/ 至/ 106/ 并/ 以/ 105/ 的/ 数量/ 递增/ ./ 如图/ 11/ 展示/ 的/ 结果/ ,/ 随/ 资源/ 数目/ 的/ 递增/ ,/ 结点/ 所/ 占/ 比例/ 下降/ ./ 同时/ 该/ 结果/ 也/ 显示/ 出/ ,/ 由于/ 负载平衡/ 算法/ 的/ 作用/ ,/ DPhoenix/ 和/ BPhoenix/ 的/ 曲线/ 比/ 其它/ 网络/ 更/ 稳定/ ,/ 而且/ 比例/ 也/ 是/ 高于/ 其它/ 网络/ 的/ ./ 反而/ 由于/ Viceroy/ 和/ Koorde/ 没有/ 有效/ 的/ 负载平衡/ 算法/ ,/ 网络资源/ 分配/ 的/ 很/ 不/ 平均/ ./ 图/ 12/ 给出/ 应用/ 本文/ 的/ 负载平衡/ 方法/ 后/ ,/ DPhoenix/ 和/ BPhoenix/ 系统/ 所/ 产生/ 的/ 平均/ 网络/ 代价/ ./ 从图/ 中/ 看出/ ,/ 产生/ 的/ 消息/ 数目/ 略/ 多一些/ ,/ 但/ 这个/ 代价/ 是/ 可/ 接受/ 的/ ,/ 因为/ 负载平衡/ 算法/ 只/ 作用/ 于/ Trie/ 树/ 的/ 一小部分/ ./ 6.4/ 容错性/ 测试/ 容错性/ 时/ ,/ 4000/ 个/ 查询/ 被/ 均匀/ 地/ 在/ 含有/ 10000/ 个/ 结点/ 的/ 网络/ 里/ 激发/ ,/ 每个/ 结点/ 以/ 0.1/ ~/ 0.3/ 的/ 概率/ 失效/ ./ 图/ 13/ 给出/ 此/ 条件/ 下/ 各/ 系统/ 的/ 成功/ 查询/ Page11/ 比例/ ./ 从图/ 中易/ 看出/ ,/ 在/ 相同/ 失效/ 概率/ 的/ 情况/ 下/ ,/ DPhoenix/ 和/ BPhoenix/ 的/ 成功/ 查询/ 百分比/ 远高于/ 其它/ 系统/ 并/ 变化/ 稳定/ ,/ 因为/ 在/ 本文/ 给出/ 的/ 构建/ 方法/ 中/ ,/ 每/ 环节/ 都/ 考虑/ 了/ 容错/ 设计/ ,/ 并且/ 都/ 是/ 相互/ 对应/ 的/ ./ 其中/ BPhoenix/ 要/ 比/ DPhoenix/ 的/ 鲁棒性/ 差些/ ,/ 因为/ 消息/ 要/ 在/ 不同/ Trie/ 树间/ 路由/ 会/ 增加/ 查询/ 失败/ 的/ 概率/ ./ 尽管/ Viceory/ ,/ Koorde/ 和/ DPhoenix/ ,/ BPhoenix/ 是/ 基于/ 相同/ 互联网络/ 结构/ 的/ ,/ 但/ 它们/ 遭遇/ 到/ 更/ 多/ 的/ 失败/ ,/ 主要/ 原因/ 是/ 它们/ 的/ 路由/ 协议/ 只是/ 不断/ 地/ 选择/ 离/ 目标/ 最近/ 的/ 邻居/ 转发/ 消息/ ,/ 不/ 允许/ 沿/ 其它/ 路径/ 路由/ ./ 7/ 结束语/ 本文/ 首先/ 对/ 现有/ P2P/ 系统/ 给出/ 动态/ 环境/ 下/ 网络/ 直径/ 和/ 平均/ 距离/ 的/ 理论/ 下界/ ./ 其次/ 提出/ 基于/ 动态/ Trie/ 树/ 的/ 通用/ 构建/ 框架/ ,/ 任何/ 静态/ 互联网络/ 基于/ 此/ 框架/ 都/ 可/ 被/ 构建/ 成/ P2P/ 系统/ ,/ 并/ 使/ 系统/ 在/ 动态/ 环境/ 下/ 保持/ 静态/ 网络/ 的/ 优点/ ,/ 同时/ 对系统/ 的/ 参数/ 给出/ 最优化/ 设计/ ./ deBruijn/ 和/ Butterfly/ 作为/ 互联网络/ 的/ 代表/ 用/ 通用/ 方法/ 构建/ 出/ DPhoenix/ 和/ BPhoenix/ 两个/ P2P/ 系统/ ,/ 两/ 系统/ 拥有/ 的/ 拓扑/ 维护/ 算法/ 和/ 路由/ 算法/ 保证/ 了/ 资源/ 的/ 平均/ 分布/ 、/ 健壮/ 的/ 网络/ 和/ 高效/ 的/ 路由/ ./ 实验/ 验证/ 了/ 本文/ 的/ 设计/ ,/ DPhoenix/ 和/ BPhoenix/ 路由/ 效率/ 渐进/ 地/ 接近/ 其/ 相应/ 的/ 互联网络/ ,/ 并/ 不/ 受到/ 理论/ 下界/ 的/ 限制/ ./ 将来/ ,/ 我们/ 将/ 开发/ 出/ DPhoenix/ 原型/ 系统/ ,/ 并/ 在/ 其/ 上/ 构建/ 大规模/ 分布式应用/ ./ 

