Page1BitTorrent/ 假块/ 污染/ 攻击/ 的/ 对抗/ 方法/ 研究/ 史建焘/ 1/ )/ 张宏莉/ 1/ )/ 方滨兴/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 哈尔滨工业大学/ 计算机网络/ 信息安全/ 研究/ 中心/ 哈尔滨/ 150001/ )/ 2/ )/ (/ 中国科学院计算技术研究所/ 信息安全/ 研究/ 中心/ 北京/ 100190/ )/ 摘要/ 作为/ 当前/ 最为/ 流行/ 的/ P2P/ 文件共享/ 系统/ ,/ BitTorrent/ 容易/ 受到/ 假块/ 污染/ 攻击/ 的/ 威胁/ ./ 文中/ 剖析/ 了/ 假块/ 污染/ 攻击/ 的/ 攻击/ 原理/ ,/ 通过/ 建立/ 简化/ 的/ 系统/ 随机/ 模型/ 得出/ 了/ 攻击/ 效果/ 所/ 能/ 达到/ 的/ 理论/ 上限/ ,/ 分析/ 了/ 影响/ 攻击/ 效果/ 的/ 主要/ 因素/ ,/ 并/ 通过/ 仿真/ 实验/ 和/ 广域网/ 实验/ 进行/ 了/ 攻击/ 可行性/ 的/ 验证/ ,/ 比较/ 了/ 在/ 不同/ 攻击/ 条件/ 下/ 的/ 攻击/ 效果/ ./ 最后/ 给出/ 了/ 针对/ 块/ 污染/ 攻击/ 的/ 对抗/ 方法/ ,/ 通过/ 基于/ 双/ Hash/ 值/ 的/ SmartHash/ 算法/ 来/ 改进/ BitTorrent/ 的/ 内容/ 完整性/ 校验/ 协议/ ,/ 仿真/ 实验/ 表明/ 该/ 方法/ 在/ 对抗/ 块/ 污染/ 攻击/ 时/ 是/ 可行/ 和/ 有效/ 的/ ./ 关键词/ 网络安全/ ;/ 对等网/ ;/ BitTorrent/ ;/ 块/ 污染/ ;/ 随机/ 模型/ 1/ 引言/ P2P/ 文件共享/ 系统/ 之一/ ./ 其/ 匿名性/ 、/ 开放性/ 以及/ 节点/ 之间/ 的/ 松/ 耦合/ 性/ 赢得/ 了/ 越来越/ 多用户/ 的/ 青睐/ ./ 然而/ 也/ 正是/ 这些/ 特性/ 使/ BT/ 面临/ 着/ 严峻/ 的/ 安全/ 风险/ ./ 网/ BT/ (/ BitTorrent/ )/ 是/ 当今/ 互联网/ 上/ 最为/ 流行/ 的/ 络/ 中/ 的/ 一些/ 恶意/ 节点/ 可以/ 通过/ BT/ 平台/ 在/ 互联网/ 上/ Page2/ 恣意/ 篡改/ 真实/ 内容/ 、/ 滥用/ 网络资源/ 、/ 破环/ BT/ 系统/ 的/ 可用性/ ./ BT/ 文件/ 的/ 共享/ 和/ 下载/ 过程/ 可以/ 分成/ 种子/ 文件/ 的/ 搜索/ 、/ 节点/ 选择/ 、/ 块/ 选择/ 以及/ 数据传输/ 四个/ 阶段/ ,/ 各个/ 阶段/ 都/ 会/ 受到/ 恶意/ 攻击/ 的/ 威胁/ ,/ 本文/ 研究/ 的/ 文件/ 假块/ 污染/ 攻击/ 发生/ 在/ 数据传输/ 阶段/ ./ 假块/ 污染/ 攻击/ 的/ 攻击者/ 伪造/ 大量/ 虚假/ 客户端/ 加入/ 到/ 共享/ 网络/ 中/ ,/ 接受/ 其它/ 节点/ 下载/ 请求/ 后/ 会/ 提供/ 虚假/ 的/ 数据/ 上传/ ./ 这样/ 下载/ 节点/ 会/ 由于/ 校验/ 失败/ 丢弃/ 下载/ 到/ 的/ 分块/ ,/ 并/ 重新/ 下载/ ./ 攻击者/ 通过/ 提高/ 被/ 其它/ 节点/ 请求/ 的/ 几率/ 来/ 达到/ 占用/ 其它/ 节点/ 的/ 下载/ 带宽/ 、/ 减低/ 其/ 下载速度/ 的/ 目的/ ./ 对/ BitTorrent/ 以及/ 其它/ P2P/ 文件共享/ 软件/ 的/ 设计者/ 来说/ ,/ 了解/ 系统/ 的/ 协议/ 安全性/ 漏洞/ 和/ 分析/ 各种/ 可能/ 的/ 攻击行为/ ,/ 可以/ 更好/ 地/ 帮助/ 他们/ 采取有效/ 的/ 防范/ 和/ 应对/ 方法/ ,/ 设计/ 出/ 更为/ 健壮/ 的/ 文件共享/ 网络/ ./ 本文/ 首先/ 介绍/ 相关/ 的/ 研究/ 工作/ 和/ 背景/ 知识/ ,/ 然后/ 通过/ 建模/ 和/ 仿真/ 的/ 方法/ 定量/ 地/ 分析/ 块/ 污染/ 攻击/ 过程/ ,/ 分析/ 块/ 污染/ 攻击/ 损害/ 的/ 理论/ 上限/ ./ 在/ 此基础/ 上/ ,/ 本文/ 提出/ 一个/ 能够/ 从根本上/ 有效/ 遏制/ 文件/ 块/ 污染/ 攻击/ 的/ SmartHash/ 方法/ ,/ 并/ 通过/ 实验/ 验证/ 了/ 该/ 方法/ 的/ 有效性/ ./ 2/ 相关/ 研究/ 工作/ 以及/ 背景/ 知识/ 2.1/ 相关/ 研究/ 工作/ 近些年来/ 随着/ 基于/ P2P/ 技术/ 的/ 文件共享/ 系统/ 被/ 越来越/ 广泛/ 的/ 应用/ ,/ P2P/ 文件共享/ 系统/ 的/ 安全性/ 已经/ 受到/ 国内外/ 学者/ 以及/ 工程/ 技术人员/ 的/ 重视/ ./ Wallach/ [/ 1/ ]/ 最早/ 给出/ 了/ 在/ P2P/ 路由/ 协议/ 方式/ 下/ 独有/ 的/ 一系列/ 安全性/ 问题/ ,/ 指出/ 了/ P2P/ 对/ 互联网/ 的/ 安全/ 研究/ 工作/ 是/ 一个/ 全新/ 的/ 挑战/ ./ P2P/ 系统/ 可以/ 作为/ 攻击者/ 进行/ 大规模/ 攻击/ 的/ 有效/ 工具/ ,/ Zhou/ 等/ 人/ [/ 2/ ]/ 提出/ 了/ P2P/ 蠕虫/ 的/ 概念/ ,/ 指出/ 由于/ 本地/ 路由表/ 的/ 存在/ ,/ 蠕虫/ 在/ 覆盖网/ 拓扑/ 上会/ 更/ 有效/ 地/ 扩散/ ./ 夏春/ 和/ 等/ 人/ [/ 3/ ]/ 给出/ 了/ 结构化/ 对等网/ 中/ 的/ P2P/ 蠕虫/ 传播/ 模型/ ,/ 通过/ 仿真/ 验证/ 了/ P2P/ 系统/ 下/ 蠕虫/ 强大/ 的/ 感染/ 能力/ ./ Naoumov/ 等/ 人/ [/ 4/ ]/ 指出/ 由于/ P2P/ 系统/ 中/ 大量/ 活跃/ 节点/ 的/ 存在/ ,/ 容易/ 被/ 攻击者/ 利用/ ,/ 发起/ DDos/ 攻击/ ,/ 并/ 给出/ 了/ 索引/ 污染/ 和/ 路由表/ 污染/ 两种/ 制造/ 攻击/ 流量/ 的/ 方式/ ./ 此外/ ,/ 由于/ P2P/ 系统/ 的/ 匿名性/ 和/ 开放性/ 的/ 特点/ ,/ 使/ 其/ 服务/ 本身/ 同样/ 面临/ 着/ 严重/ 的/ 安全/ 威胁/ ./ Douceur/ [/ 5/ ]/ 首先/ 提出/ 了/ 在/ 没有/ 中心/ 认证/ 机制/ 的/ P2P/ 匿名/ 系统/ 中/ 不/ 可能/ 完全/ 防御/ 女巫/ 攻击/ (/ Sybilattacks/ )/ ./ Liang/ 等/ 人/ [/ 6/ -/ 7/ ]/ 指出/ P2P/ 系统/ 中/ 存在/ 严重/ 的/ 文件/ 污染/ 问题/ ,/ 并/ 通过/ 测量/ 的/ 方法/ 给出/ 了/ Kazza/ 网络/ 中/ 的/ 文件/ 污染/ 程度/ ,/ 进行/ 了/ 详细/ 的/ 统计/ 和/ 分析/ ./ Urdaneta/ 等/ 人/ [/ 8/ ]/ 对/ DHT/ 领域/ 的/ 安全性/ 研究/ 给出/ 了/ 综述/ ,/ 内容/ 包括/ Sybil/ 攻击/ 、/ Eclipse/ 攻击/ [/ 9/ ]/ 以及/ 路由/ 和/ 存储/ 攻击/ ./ 对于/ 当前/ 最为/ 流行/ 的/ P2P/ 文件共享/ 软件/ 中/ BT/ 安全性/ 近些年/ 也/ 有/ 不少/ 的/ 研究/ 工作/ ,/ Defrawy/ 等/ 人/ [/ 10/ ]/ 讨论/ 了/ 利用/ BT/ 部署/ DDos/ 攻击/ 的/ 安全隐患/ ./ Konrath/ 等/ 人/ [/ 11/ ]/ 提出/ BT/ 系统/ 中/ 存在/ Sybil/ 攻击/ 、/ 块/ 谎称/ 攻击/ 以及/ Eclipse/ 攻击/ 的/ 可能性/ ,/ 但/ 并/ 没有/ 给出/ 实际/ 测量/ 数据/ ./ Dhungel/ 等/ 人/ 先后/ 研究/ 了/ 针对/ Leechers/ 节点/ [/ 12/ ]/ 和/ Seeds/ 节点/ [/ 13/ ]/ 攻击/ 的/ 可能/ 方法/ 并/ 给出/ 黑盒/ 测试数据/ ,/ 文中/ 也/ 提到/ 了/ 块/ 污染/ 攻击/ ,/ 作者/ 通过/ 实际/ 测量/ 认为/ ,/ 块/ 污染/ 攻击/ 只能/ 延迟/ 50/ %/ 左右/ 的/ 下载/ 时间/ ,/ 没有/ 超过/ 用户/ 的/ 容忍度/ ./ Liogkas/ 等/ 人/ [/ 14/ ]/ 分析/ 了/ 块/ 污染/ 攻击/ 对/ 网络/ 造成/ 的/ 危害/ ,/ 并/ 在/ 可控/ 环境/ 中/ 进行/ 了/ 实验/ ,/ 但/ 没有/ 给出/ 实际/ 延迟/ 效果/ ./ 针对/ 块/ 污染/ 攻击/ 的/ 对抗/ 策略/ 目前/ 主要/ 有/ 黑名单/ 方法/ [/ 12/ ]/ ,/ Barcellos/ 等/ 人/ [/ 15/ ]/ 提出/ 的/ 信誉/ 系统/ 的/ 方法/ 以及/ Dhungel/ 等/ 人/ [/ 16/ ]/ 提出/ 的/ 启发式/ 识别方法/ ,/ 这些/ 方法/ 都/ 是/ 采用/ 被动/ 的/ 防御/ 手段/ ,/ 并/ 不能/ 从/ 协议/ 的/ 角度/ 根本性/ 的/ 解决/ 块/ 污染/ 攻击/ 的/ 危险/ ,/ 而且/ 方法/ 可行性/ 有限/ ./ 本文/ 则/ 系统地/ 分析/ 了/ 块/ 污染/ 攻击/ 的/ 原理/ ,/ 验证/ 了/ 攻击/ 可行性/ ,/ 并/ 提出/ 了/ 基于/ 双/ Hash/ 值/ 的/ SmartHash/ 对抗/ 策略/ ./ 2.2/ 背景/ 知识/ 2.2/ ./ 1BitTorrent/ 协议/ BitTorrent/ 是/ 基于/ P2P/ 架构/ 的/ 内容/ 分发/ 协议/ ①/ ,/ 不同于/ 其它/ 的/ P2P/ 协议/ ,/ BitTorrent/ 并不需要/ 所有/ 的/ 节点/ 参与/ 并/ 构建/ 成/ 一个/ 大/ 的/ 网络/ ,/ 来/ 提供/ 搜索/ 、/ 共享/ 和/ 传输/ 文件/ 的/ 服务/ ,/ 而是/ 基于/ 不同/ 的/ 共享/ 文件/ ,/ 由/ 下载/ 该/ 文件/ 的/ 节点/ 按照/ BitTorrent/ 协议/ 组织/ 成/ 一个/ 独立/ 的/ 覆盖/ 网络/ ,/ 实现/ 协作/ 下载/ ./ 也就是说/ ,/ BitTorrent/ 系统/ 本身/ 并/ 不/ 提供/ 搜索/ 功能/ ,/ 它/ 的/ 目标/ 只是/ 快速/ 、/ 高效/ 地/ 把/ 文件/ 分/ 发给/ 参与/ 节点/ ./ 以下/ 是/ BitTorrent/ 协议/ 中/ 重要/ 的/ 名词/ 定义/ 和/ 算法/ 介绍/ :/ (/ 1/ )/ 种子/ 节点/ (/ Seed/ )/ ./ Seed/ 节点/ 是/ 指/ 在/ 一个/ P2P/ 共享/ 下载/ 网络/ 中/ ,/ 拥有/ 完整/ 文件/ 拷贝/ 的/ 节点/ ./ 这类/ 节点/ 只/ 提供/ 上传/ 服务/ ,/ 而/ 没有/ 下载/ 请求/ ./ (/ 2/ )/ 下载/ 节点/ (/ Leecher/ )/ ./ 共享/ 网络/ 中/ 相对/ 于/ Seed/ 节点/ 的/ 是/ Leecher/ 节点/ ,/ 它/ 只/ 拥有/ 部分/ 的/ 文件/ 拷贝/ ,/ 在/ 提供/ 这部分/ 拷贝/ 的/ 同时/ ,/ 还会/ 向/ 其它/ 节点/ 请求/ 自己/ 缺少/ 的/ 那/ 部分/ 文件/ ./ 共享/ 同一个/ 文件/ 的/ Seed/ 和/ Leecher/ 节点/ 就/ 构成/ 了/ 一个/ 基于/ 该/ 文件/ 的/ ①/ CohenB/ ./ Bep3/ :/ Thebittorrentprotocolspecification/ [/ Online/ ]/ ./ http/ :/ // // www/ ./ bittorrent/ ./ org/ // beps/ // bep/ _/ 0003/ ./ htmlPage3/ 共享/ 网络/ ./ (/ 3/ )/ 跟踪/ 服务器/ (/ Tracker/ )/ ./ Tracker/ 是/ 一个/ 中心/ 服务器/ ,/ 负责/ 跟踪/ 系统/ 中/ 所有/ 的/ 参与/ 节点/ ,/ 收集/ 和/ 统计/ 节点/ 状态/ ,/ 帮助/ 参与/ 节点/ 互相/ 发现/ ,/ 维护/ 共享/ 网络/ 中/ 文件/ 的/ 下载/ ./ 一个/ Tracker/ 服务器/ 可以/ 同时/ 维护/ 和/ 管理/ 多个/ 文件共享/ 网络/ ./ (/ 4/ )/ 种子/ 文件/ (/ Torrentfile/ )/ ./ BitTorrent/ 是/ 通过/ 一个/ 扩展/ 名为/ ./ torrent/ 的/ 种子/ 文件/ 进行/ 下载/ 部署/ 的/ ,/ 它/ 由/ 文件/ 最初/ 发布者/ 创建/ ,/ 发布/ 到/ 互联网/ 上/ ,/ 供/ 感兴趣/ 的/ 用户/ 下载/ ./ 种子/ 文件/ 记录/ 了/ Tracker/ 的/ 地址/ ,/ 以及/ 每个/ 文件/ 分块/ 的/ 校验/ 值/ ./ (/ 5/ )/ 分块/ 机制/ ./ BitTorrent/ 像/ 其它/ 文件共享/ 软件/ 一样/ 对/ 文件/ 进行/ 了/ 分块/ ,/ 分块/ 是/ 最小/ 的/ 文件共享/ 单位/ ,/ 每个/ Leecher/ 在/ 下载/ 完/ 一个/ 完整/ 的/ 分块/ 后/ 才/ 会/ 进行/ 完整性/ 校验/ ,/ 正确/ 后/ 才/ 通知/ 其它/ 节点/ 自己/ 拥有/ 这部分/ 数据/ ./ 为了/ 加快/ 文件传输/ 的/ 并行性/ ,/ 每个/ 分块/ 还会/ 分成/ 几个/ 分片/ ,/ 分片/ 是/ 最小/ 的/ 文件传输/ 单位/ ,/ 数据/ 请求者/ 每次/ 向/ 数据/ 提供者/ 请求/ 一个/ 分片/ 的/ 数据/ ./ (/ 6/ )/ 块/ 选择/ 机制/ ./ 为了/ 保证/ 共享/ 网络/ 的/ 健壮性/ ,/ 延长/ 一个/ 共享/ 网络/ 的/ 生命周期/ ,/ BitTorrent/ 通过/ 局部/ 最少/ 块/ 优先/ (/ rarest/ -/ first/ )/ 策略/ 在/ 节点/ 间/ 交换/ 数据/ ./ 下载/ 节点/ 根据/ 自己/ 周围/ 的/ 邻居/ 节点/ 拥有/ 块/ 的/ 信息/ ,/ 选择/ 拥有/ 节点/ 最少/ 的/ 分块/ 优先/ 下载/ ,/ 从而/ 维护/ 局部/ 的/ 数据/ 块/ 相对/ 平衡/ ./ (/ 7/ )/ 节点/ 选择/ 机制/ ./ 它/ 是/ 对/ 用户/ 行为/ 的/ 激励机制/ ./ 服务/ 提供/ 节点/ 在/ 收到/ 上传/ 请求/ 后/ 会/ 通过/ Choking/ // Unchoking/ 机制/ 决定/ 是否/ 对/ 文件/ 请求/ 节点/ 提供/ 上传/ 服务/ ,/ 可以/ 拒绝服务/ (/ Choking/ )/ 或者/ 允许/ 服务/ (/ Unchoking/ )/ ./ 该/ 机制/ 决定/ 了/ 两个/ 相连/ 的/ 节点/ 是否/ 共享/ 彼此/ 的/ 资源/ ./ Choking/ // Unchoking/ 机制/ 的/ 核心/ 是/ Tit/ -/ for/ -/ Tat/ ①/ 算法/ ,/ 上传/ 节点/ 会/ 优先选择/ 最近/ 对/ 网络共享/ 大/ 的/ 节点/ 提供/ 服务/ ,/ 该/ 机制/ 的/ 目的/ 就是/ 防止/ 一些/ 自私/ 节点/ 在/ 网络/ 中/ 只/ 索取/ 而/ 无/ 贡献/ 的/ 行为/ ./ 2.2/ ./ 2/ 假块/ 污染/ 攻击/ 假块/ 污染/ 攻击/ (/ Fakeblockattack/ )/ 是/ 在/ 文件/ 交换/ 过程/ 中/ 针对/ 分块/ 机制/ 的/ 一种/ 攻击方式/ ,/ 攻击者/ 的/ 目的/ 是/ 减缓/ 整个/ 共享/ 网络/ 的/ 下载速度/ ./ 根据/ 分块/ 机制/ ,/ 在/ Bittorrent/ 协议/ 中/ ,/ 客户端/ 每/ 下载/ 完/ 一个/ 分块/ (/ 一般/ 256KB/ )/ ,/ 都/ 会/ 对/ 这个/ 块/ 用/ SHA1/ 算法/ 计算/ 其/ Hash/ 值/ ,/ 并/ 同/ 种子/ 文件/ 中/ 对应/ 块/ 的/ Hash/ 值/ 进行/ 比/ 对/ ,/ 如果/ 两个/ 值/ 不/ 相同/ 的话/ ,/ 客户端/ 会/ 丢弃/ 这个/ 分块/ 的/ 数据/ ,/ 并/ 重新/ 下载/ 这/ 一分/ 块/ ./ 而/ 客户端/ 在/ 请求/ 下载/ 的/ 时候/ 选择/ 的/ 最小/ 传输/ 单位/ 又/ 是/ 一个/ 分片/ (/ 一般/ 为/ 16KB/ )/ ,/ 如果/ 在/ 一个/ 块/ 中/ 有/ 任何/ 一个/ 分片/ 是/ 错误/ 的/ ,/ 整个/ 分块/ 就/ 会/ 校验/ 失败/ ,/ 由于/ 不能/ 校验/ 出/ 具体/ 是/ 哪/ 一分/ 片/ 是/ 错误/ 的/ ,/ 下载/ 客户端/ 会/ 丢弃/ 整个/ 分块/ ./ 针对/ 分块/ 和校验/ 机制/ 的/ 这/ 一/ 过程/ ,/ 攻击者/ 可以/ 伪造/ 成/ 合法/ 客户端/ 加入/ 到/ 要/ 攻击/ 的/ 共享/ 网络/ 中/ ,/ 发布/ 自己/ 拥有/ 所有/ 分块/ 的/ 信息/ ,/ 以/ 诱使/ 正常/ 的/ Leecher/ 节点/ 来/ 请求/ 数据/ ./ 在/ 接到/ 上传/ 请求/ 后/ ,/ 攻击者/ 发送/ 伪造/ 的/ 分片/ 数据/ 给/ 请求/ 节点/ ./ 请求/ 节点/ 在/ 该/ 分片/ 所在/ 的/ 分块/ 全部/ 下载/ 完成/ 后/ ,/ 进行/ SHA1/ 校验/ 的/ 结果/ 一定/ 会/ 失败/ ,/ 请求/ 节点/ 会/ 丢弃/ 整个/ 分块/ 并/ 选择/ 新/ 的/ 节点/ 重新/ 下载/ ,/ 这样/ 就/ 减缓/ 了/ 用户/ 下载/ 的/ 速度/ ./ 由于/ 一个/ 分块/ 的/ 数据/ 可能/ 从/ 不同/ 的/ 节点/ 获得/ ,/ 这些/ 节点/ 既/ 可能/ 是/ 真实/ 节点/ 也/ 可能/ 是/ 伪造/ 的/ 恶意/ 节点/ ,/ 在/ 理想/ 的/ 情况/ 下/ ,/ 如果/ 用户/ 下载/ 完成/ 的/ 每/ 一个/ 块/ 中/ 都/ 有/ 恶意/ 节点/ 提供/ 的/ 至少/ 一个/ 分片/ ,/ 那么/ 这个/ 用户/ 将/ 永远/ 无法/ 下载/ 到/ 整个/ 文件/ ./ 3/ 块/ 污染/ 攻击/ 的/ 随机/ 模型/ 为了/ 定量/ 地/ 分析/ 块/ 污染/ 攻击/ 对/ BitTorrent/ 下载/ 节点/ 以及/ 共享/ 网络/ 的/ 影响/ ,/ 本文/ 通过/ 一个/ 对/ 网络/ 环境/ 和/ 节点/ 行为/ 进行/ 抽象/ 的/ 随机/ 模型/ 展开/ 研究/ ./ 模型/ 不/ 考虑/ 具体/ 网络/ 架构/ 以及/ 网络/ 中/ 的/ 异构/ 性对/ 攻击/ 的/ 影响/ ,/ 因此/ 我们/ 假设/ 网络/ 中/ 所有/ 节点/ 都/ 具有/ 相同/ 的/ 带宽/ 和/ 处理/ 能力/ ,/ 任何/ 两个/ 节点/ 之间/ 进行/ 通信/ 的/ 客观条件/ 都/ 相同/ ./ 另外/ ,/ 在/ 节点/ 行为/ 方面/ ,/ 假设/ 节点/ 的/ 到达/ 满足/ 泊松/ 分布/ ,/ 节点/ 的/ 离开/ 率/ 只/ 和/ 节点/ 的/ 下载速度/ 有关/ ,/ 当/ 一个/ 节点/ 完成/ 下载/ 后/ 会/ 立刻/ 离开/ 网络/ ,/ 网络/ 中/ 的/ 种子/ 节点/ 数/ 保持/ 恒定/ ./ 虽然/ 这些/ 假设/ 从/ 一个/ BitTorrent/ 网络/ 的/ 整个/ 生命周期/ 来看/ 并/ 不/ 完全/ 准确/ [/ 17/ ]/ ,/ 但是/ 由于/ 本文/ 所/ 研究/ 的/ 数学模型/ 只/ 针对/ 某一/ 特定/ 时间/ 区间/ ,/ 网络/ 长期/ 的/ 动态性/ 可以/ 通过/ 调整/ 模型/ 参数/ 来/ 处理/ ./ 当/ 共享/ 网络/ 的/ 节点/ 数/ 保持稳定/ 时/ ,/ 我们/ 称/ 共享/ 网络/ 处于/ 平衡/ 状态/ ,/ 本文/ 的/ 数学模型/ 只/ 研究/ 块/ 污染/ 攻击/ 对/ 平衡/ 状态/ 下/ 共享/ 网络/ 的/ 影响/ ./ 为了/ 便于/ 形式化/ 描述/ ,/ 首先/ 定义/ 以下/ 变量/ :/ 设/ 模型/ 中/ 节点/ 规模/ 为/ N/ ,/ BitTorrent/ 网络/ 中/ 所有/ 节点/ 共享/ 给定/ 的/ 文件/ F/ ,/ F/ 被/ 分割/ 成/ M/ 个/ 大小/ 为/ s/ 的/ 分块/ ,/ 分块/ 是/ 最小/ 的/ 文件/ 完整性/ 校验/ 单位/ ,/ Fi/ 表示/ 文件/ 的/ 第/ i/ 个/ 分块/ ,/ F/ =/ F1/ ∪/ F2/ ∪/ …/ ∪/ FM/ ,/ Fi/ ∩/ Fj/ =/ / fori/ ≠/ j/ ;/ 每个/ 分块/ 又/ 被/ 分成/ c/ 个/ 更/ 小/ 的/ 分片/ ,/ 分片/ 是/ 文件传输/ 过程/ 中/ 最小/ 的/ 传输/ 单位/ ./ 在/ t/ 时刻/ ,/ 网络/ 中/ 包括/ 种子/ 节点/ 和/ 下载/ 节点/ 的/ 节点/ 总数/ 为/ N/ (/ t/ )/ ,/ 节/ ①/ CohenB/ ./ IncentivesbuildrobustnessinBitTorrent/ [/ Online/ ]/ ./ http/ :/ // // www/ ./ bittorrent/ ./ org/ // bittorrentecon/ ./ pdfPage4/ 点/ 到达/ 率/ 满足/ 强度/ 为/ λ/ 的/ 泊松/ 分布/ ./ 所有/ 节点/ 的/ 上传/ 带宽/ 为/ Bu/ ,/ 下载/ 带宽/ 为/ Bd/ ,/ 网络/ 中/ 的/ 下载/ 源/ 足够/ 每个/ 节点/ 达到/ 自己/ 的/ 下载/ 带宽/ ,/ 当/ 一个/ 下载/ 节点/ 下载/ 完/ F/ 所有/ 的/ 分块/ 后/ 会/ 立刻/ 离开/ 网络/ ./ 在/ 网络/ 达到/ 平衡/ 状态/ 后/ ,/ 总/ 上传/ 带宽/ 为/ Bmal/ 的/ Nmal/ 个/ 恶意/ 节点/ 开始/ 对/ 共享/ 网络/ 进行/ 块/ 污染/ 攻击/ ,/ 攻击/ 节点/ 声称/ 自己/ 拥有/ 所有/ 的/ M/ 个/ 分块/ ,/ 并/ 接受/ 任何/ 节点/ 的/ 下载/ 请求/ ,/ 假设/ 攻击/ 带宽/ 足够/ 满足/ 节点/ 请求/ ./ 表/ 1/ 详细/ 归纳/ 了/ 数学模型/ 中/ 用到/ 的/ 符号/ 及其/ 含义/ ./ 块数/ 符号/ F/ 共享/ 文件/ M/ 共享/ 文件/ F/ 拥有/ 的/ 分/ Fi/ 文件/ 的/ 第/ i/ 个/ 分块/ T/ 攻击/ 环境/ 下/ 文件/ F/ 的/ s/ 分块/ 大小/ c/ 分块/ 中/ 的/ 分片/ 数/ ncomplete/ (/ t/ )/ t/ 时刻/ ,/ 瞬时/ 节点/ 完成/ 数/ N/ (/ t/ )/ t/ 时刻/ ,/ 网络/ 中/ 的/ 节点/ 珡/ N/ 平衡/ 状态/ 下/ ,/ 网络/ 中/ 的/ λ/ 节点/ 到达/ 率/ 的/ 泊松/ 分布/ Bu/ 每个/ 节点/ 的/ 上传/ 带宽/ bmalBd/ 每个/ 节点/ 的/ 下载/ 带宽/ bpolluted/ 节点/ 总数/ 总数/ 强度/ 平衡/ 状态/ 时/ ,/ 拥有/ 分片/ i/ 的/ 节点/ 数/ x/ -/ iBmal/ 恶意/ 节点/ 的/ 总/ 上传/ 带宽/ Popt/ 选择/ 到/ 恶意/ 节点/ 的/ 概率/ 3.1/ 攻击/ 效果/ 的/ 衡量/ 指标/ 本文/ 从单/ 节点/ 和/ 共享/ 网络/ 两个/ 角度/ 给出/ 了/ 块/ 污染/ 攻击/ 的/ 评判/ 指标/ ./ 其中/ 对于/ 单/ 结点/ 的/ 污染/ 可以/ 用/ 下载/ 延迟/ 比/ 来/ 衡量/ ./ 根据/ 随机/ 模型/ 的/ 假设/ 前提/ ,/ 网络/ 中/ 所有/ 节点/ 具有/ 相同/ 的/ 下载/ 延迟/ 比/ ./ 对/ 共享/ 网络/ 的/ 污染/ 采用/ 瞬时/ 节点/ 完成/ 数来/ 衡量/ ./ 定义/ 1/ ./ 下载/ 延迟/ 比/ ./ Rdelay/ =/ T/ // T/ ,/ 其中/ T/ 表示/ 共享/ 网络/ 不/ 受/ 攻击/ 时/ ,/ 单/ 节点/ 完成/ 下载/ 所/ 需/ 时间/ ;/ T/ 表示/ 相同/ 条件/ 下/ ,/ 受/ 攻击/ 的/ 网络/ 中/ 节点/ 完成/ 下载/ 所/ 需/ 时间/ ./ 节点/ 的/ 下载/ 延迟/ 比越/ 大则/ 表明/ 块/ 污染/ 攻击/ 的/ 危害/ 越大/ ,/ Rdelay/ 趋近/ 无穷大/ 时则/ 代表/ 正常/ 节点/ 已经/ 无法/ 下载/ 到/ 完整/ 的/ 共享/ 文件/ ./ 对于/ 整个/ 共享/ 网络/ 我们/ 通过/ 瞬时/ 节点/ 完成率/ 来/ 评价/ ./ 定义/ 2/ ./ 瞬时/ 节点/ 完成/ 数/ ./ ncomplete/ (/ t/ )/ ,/ 表示/ t/ 时刻/ 完成/ 下载/ 的/ 节点/ 数/ ,/ N/ (/ t/ )/ 为/ t/ 时刻/ 网络/ 中/ 的/ 节点/ 总数/ ,/ bd/ (/ t/ )/ 表示/ t/ 时刻/ ,/ 网络/ 中/ 所有/ 节点/ 能/ 达到/ 的/ 平均/ 下载/ 带宽/ ./ 当/ 网络/ 达到/ 平衡/ 状态/ 后/ ,/ 瞬时/ 节点/ 完成/ 数/ ncomplete/ (/ t/ )/ =/ N/ (/ t/ )/ ·/ (/ bd/ (/ t/ )/ // M/ ·/ s/ )/ ./ 相同/ 网络/ 环境/ 下/ ,/ 节点/ 瞬时/ 完成/ 数越/ 小/ ,/ 表示/ 网络/ 受/ 攻击/ 的/ 影响/ 越大/ ./ 该/ 指标/ 实际/ 反映/ 了/ 整个/ 网络/ 的/ 带宽/ 资源/ 受/ 污染/ 的/ 程度/ ./ 3.2/ 攻击/ 效果/ 的/ 建模/ 分析/ 下面/ 我们/ 通过/ 随机/ 模型/ 来/ 定量/ 计算/ 两个/ 评价/ 指标/ ,/ 给出/ 攻击/ 效果/ 的/ 理论/ 上限/ 并/ 讨论/ 影响/ 攻击/ 达到最佳/ 效果/ 的/ 因素/ ,/ 首先/ 给出/ 两个/ 定义/ ./ 定义/ 3/ ./ 块/ 内/ 并行度/ ./ 如果/ 节点/ 下载/ 到/ 的/ 每个/ 分块/ 都/ 是从/ ω/ 个源/ 节点/ 获得/ 的/ ,/ 就/ 称/ ω/ 为块/ 内/ 并行度/ ./ 定义/ 4/ ./ 污染/ 带宽/ 扩散系数/ ./ 将/ 每个/ 节点/ 从/ 恶意/ 节点/ 处/ 获得/ 的/ 带宽/ 记为/ bmal/ ,/ 由于/ 校验/ 失败/ 而/ 丢弃/ 的/ 数据/ 所/ 占/ 的/ 下载/ 带宽/ 为/ bpolluted/ ;/ 则/ 称/ μ/ =/ bpolluted/ // bmal/ 为/ 污染/ 带宽/ 扩散系数/ ./ 下面/ 是/ 随机/ 模型/ 中/ 重要/ 的/ 推导/ 公式/ :/ (/ 1/ )/ 无/ 攻击/ 网络/ 中/ 节点/ 下载/ 时间/ T/ 满足/ 式/ (/ 1/ )/ ,/ M/ ·/ s/ 表示/ 共享/ 文件/ 的/ 大小/ ./ (/ 2/ )/ 稳定/ 状态/ 下/ 节点/ 总数/ 珡/ N/ 满足/ 式/ (/ 2/ )/ ,/ 由于/ t/ 时刻/ 网络/ 中/ 的/ 节点/ 数为/ dN/ (/ t/ )/ =/ λ/ dt/ -/ bdM/ ·/ s/ ·/ Ndt/ ,/ 当/ 网络/ 达到/ 稳定/ 状态/ 时/ ,/ 有/ dN/ (/ t/ )/ // dt/ =/ 0/ ,/ 并/ 由式/ (/ 1/ )/ 代入/ 可/ 得/ 可以/ 看出/ 式/ (/ 2/ )/ 所/ 表示/ 的/ 含义/ 符合/ Little/ ’/ slaw/ [/ 18/ ]/ ./ (/ 3/ )/ 平衡/ 状态/ 下/ 拥有/ 每个/ 分块/ 的/ 节点/ 数/ 满足/ 这是/ 由于/ 稳定/ 状态/ 下/ ,/ 网络/ 中/ 处在/ 不同/ 完成度/ 的/ 节点/ 数/ 基本/ 相等/ ,/ 网络/ 中/ 总/ 的/ 分块/ 数为/ ∑/ sBT/ 的/ 块/ 选择/ 策略/ 可以/ 使/ 网络/ 中/ 各个/ 分块/ 都/ 近似/ 平均/ 分布/ ,/ 从而/ 可以/ 得到/ 式/ (/ 3/ )/ ./ (/ 4/ )/ 完全/ 从/ 恶意/ 节点/ 下载/ 的/ 块/ 所/ 占/ 带宽/ 满足/ 式/ (/ 4/ )/ ,/ 下载/ 节点/ 每次/ 节点/ 选择/ 时/ ,/ 选择/ 到/ 恶意/ 节点/ 的/ 概率/ 为/ pmal/ =/ Nmal/ 点/ 下载/ 的/ 概率/ 为/ Pmal/ =/ (/ pmal/ )/ ω/ =/ Nmal/ 全从/ 恶意/ 节点/ 下载/ 的/ 块/ 所/ 占/ 带宽/ 为/ (/ 5/ )/ 完全/ 从/ 良性/ 节点/ 下载/ 的/ 块/ 所/ 占/ 带宽/ 满足/ 式/ (/ 5/ )/ ,/ 下载/ 节点/ 每次/ 节点/ 选择/ 时/ ,/ 选择/ 到/ 良性/ 下载/ Page5/ 点/ 下载/ 的/ 概率/ 为/ Popt/ =/ (/ popt/ )/ ω/ =/ 珡/ N/ // 2/ 全从/ 良性/ 节点/ 下载/ 的/ 块/ 所/ 占用/ 的/ 带宽/ 为/ (/ 6/ )/ 污染/ 带宽/ 扩散系数/ 和/ 块/ 内/ 并行度/ 之间/ 的/ 关系/ 满足/ (/ 7/ )/ 下载/ 延迟/ 比/ 满足/ :/ Rdelay/ =/ T/ (/ 8/ )/ 瞬时/ 节点/ 完成/ 数/ 满足/ ncomplete/ (/ t/ )/ =/ N/ (/ t/ )/ ·/ (/ bopt/ // M/ ·/ s/ )/ 式/ (/ 7/ )/ 、/ 式/ (/ 8/ )/ 得到/ 的/ 是/ 攻击者/ 能/ 达到/ 的/ 攻击/ 效果/ 的/ 上限/ ,/ 要求/ 攻击/ 节点/ 的/ 带宽/ 满足/ 其它/ 节点/ 的/ 下载/ 请求/ ./ 由式/ (/ 5/ )/ 可以/ 得到/ ,/ 不/ 完全/ 从/ 良性/ 节点/ 下载/ 的/ 分块/ 所/ 占/ 的/ 下载/ 带宽/ 应为/ 1/ -/ bmal/ ./ 攻击/ 节点/ 总/ 带宽/ 分配/ 到/ 每个/ 下载/ 节点/ 上/ 应为/ Bmal/ // N/ (/ t/ )/ ./ 根据/ 块/ 校验/ 机制/ ,/ 在/ 节点/ 选择/ 时/ ,/ 负责/ 同一个/ 数据/ 块/ 请求/ 的/ 节点/ 中/ 只要/ 有/ 一个/ 节点/ 是/ 攻击/ 节点/ ,/ 攻击/ 就/ 能/ 达到最佳/ 效果/ ,/ 这个/ 最小/ 的/ 带宽/ 要求/ 即/ (/ 1/ -/ bmal/ )/ // ω/ ./ 因此/ 攻击/ 达到最佳/ 效果/ 应/ 满足/ 式/ (/ 9/ )/ 的/ 条件/ ./ 当/ 攻击者/ 的/ 带宽/ 不能/ 达到/ 这一/ 条件/ 时/ ,/ 攻击/ 的/ 效果/ 要/ 低于/ 式/ (/ 7/ )/ 和/ 式/ (/ 8/ )/ 的/ 结果/ ./ 从/ 上面/ 的/ 分析/ 可以/ 得到/ 影响/ 块/ 污染/ 攻击/ 效果/ 的/ 因素/ 主要/ 有/ :/ (/ 1/ )/ 文件/ 的/ 热度/ ./ 从式/ (/ 9/ )/ 可以/ 看出/ 节点/ 总数/ N/ 越大/ 对/ 攻击者/ 的/ 带宽/ 要求/ 越高/ ./ 由式/ (/ 2/ )/ 可知/ 珡/ N/ 的/ 值/ 和/ 节点/ 到达/ 率/ 的/ 泊松/ 强度/ λ/ 成正比/ ,/ 而/ λ/ 直接/ 反映/ 了/ 文件/ 受/ 关注/ 的/ 程度/ ./ 因此/ ,/ 同等条件/ 下越/ 热/ 的/ 文件/ 达到/ 攻击/ 效果/ 上限/ 的/ 难度/ 越大/ ./ (/ 2/ )/ 块/ 内/ 并行度/ ./ 这/ 主要/ 和/ 客户端/ 的/ 实现/ 有关/ ,/ 块/ 内/ 并行度/ 越大/ 攻击者/ 越/ 容易/ 达到/ 式/ (/ 9/ )/ 的/ 带宽/ 要求/ ,/ 而且/ 也/ 越/ 容易/ 达到/ 比较/ 大/ 的/ 下载/ 延迟/ 比/ ./ (/ 3/ )/ 攻击者/ 的/ 带宽/ ./ 攻击者/ 的/ 带宽/ 越大/ ,/ 攻击/ 效果/ 越好/ ./ 当/ 攻击者/ 的/ 带宽/ 达到/ 所有/ Leecher/ 节点/ 下载/ 带宽/ 总和/ 时/ ,/ 攻击/ 必然/ 能够/ 达到/ 攻击/ 效果/ 上限/ ./ (/ 4/ )/ 攻击/ 节点/ 数/ ./ 由式/ (/ 7/ )/ 看出/ ,/ 攻击/ 节点/ 数越/ 多/ ,/ 下载/ 延迟/ 比越/ 大/ ,/ 攻击/ 效果/ 越/ 好/ ,/ 但/ 同时/ 也/ 越/ 难/ 达到/ 式/ (/ 9/ )/ 的/ 条件/ ./ 攻击/ 节点/ 数过/ 大时/ ,/ 每个/ 节点/ 的/ 带宽/ 会/ 很/ 低/ ,/ BT/ 客户端/ 会/ 尽量/ 优先选择/ 传输速度/ 快/ 的/ 上传/ 节点/ ./ 因此/ 当/ 攻击者/ 的/ 带宽/ 有限/ 、/ 块/ 内/ 并行度/ 不高时/ ,/ 攻击/ 节点/ 数/ 的/ 选择/ 很/ 关键/ ./ (/ 5/ )/ 污染/ 带宽/ 扩散系数/ ./ 污染/ 带宽/ 系数/ 越高/ ,/ 攻击/ 效果/ 越好/ ./ 因此/ ,/ 块/ 内/ 并行度/ 不高时/ ,/ 在/ 保证/ 恶意/ 节点/ 上传/ 带宽/ 满足/ 下载/ 节点/ 的/ 块/ 选择/ 策略/ 时/ ,/ 可以/ 通过/ 技术手段/ 降低/ 恶意/ 节点/ 在/ 每个/ 分块/ 的/ 上传/ 量/ ,/ 提高/ 污染/ 带宽/ 扩散系数/ ./ (/ 6/ )/ Leecher/ 节点/ 的/ 带宽/ ./ 由于/ 大多数/ BT/ 客户端/ 在/ 处理/ 节点/ 请求/ 时/ 都/ 采用/ 了/ 基于/ Tit/ -/ for/ -/ Tat/ 策略/ 的/ 激励机制/ ,/ Leecher/ 节点/ 发到/ 良性/ 节点/ 的/ 下载/ 请求/ 有/ 可能/ 被/ 拒绝/ ,/ Legout/ [/ 19/ ]/ 测量/ 结果/ 发现/ 每个/ Leecher/ 节点/ 更/ 多/ 的/ 是从/ 和/ 其/ 自身/ 带宽/ 能力/ 相近/ 的/ 节点/ 处/ 获得/ 服务/ ./ 攻击/ 节点/ 会/ 尽量/ 满足/ 所有/ 节点/ 的/ 请求/ ,/ 因此/ 块/ 污染/ 攻击/ 对于/ 那些/ 和/ 大多数/ 节点/ 带宽/ 能力/ 和/ 物理/ 位置/ 差距/ 很大/ 的/ 节点/ 会/ 更/ 有效/ ./ 从/ 以上/ 分析/ 可以/ 看出/ ,/ 要/ 从/ 协议/ 角度/ 对抗/ 假块/ 污染/ 攻击/ ,/ 一种/ 方法/ 是/ 降低/ 块/ 内/ 并行度/ ,/ 让/ 节点/ 尽量/ 从/ 一个/ 下载/ 源/ 下载/ 一个/ 完整/ 的/ 分块/ ,/ 另/ 一种/ 方法/ 是/ 消除/ 污染/ 带宽/ 扩散系数/ ./ 本文/ 所/ 采用/ 的/ 方法/ 是/ 保持/ 高/ 的/ 块/ 内/ 并行度/ ,/ 通过/ 引入/ 一个/ 新/ 的/ Hash/ 校验/ 值/ 完全/ 消除/ 污染/ 带宽/ 的/ 扩散/ ,/ 从而/ 准确/ 识别/ 出/ 错误/ 数据/ 片/ 的/ 位置/ ,/ 消除/ 块/ 污染/ 攻击/ 的/ 威胁/ ./ 3.3/ 仿真/ 实验/ 前面/ 通过/ 一个/ 简化/ 的/ BT/ 网络/ 的/ 随机/ 模型/ 从/ 理论/ 上/ 分析/ 了/ 块/ 污染/ 攻击/ 的/ 攻击能力/ ,/ 为了/ 验证/ 前面/ 得到/ 的/ 结论/ ,/ 本/ 节/ 通过/ 仿真/ 实验/ 模拟/ 了/ BT/ 共享/ 网络/ 和/ 块/ 污染/ 攻击/ ,/ 并/ 对/ 得到/ 的/ 结果/ 进行/ 了/ 分析/ ./ 模拟实验/ 是/ 基于/ NS2/ 实现/ 的/ 仿真/ 平台/ ,/ 在/ 平台/ 上/ 根据/ 标准/ BT/ 协议/ 实现/ 了/ 网络/ 模拟/ ./ 并/ 通过/ inet/ 工具/ 生成/ 了/ 10000/ 个/ 节点/ ,/ 包括/ 5000/ 个/ 叶子/ 节点/ 的/ 随机/ 拓扑图/ ./ 选择/ 文件/ 的/ 大小/ 是/ 300MB/ ,/ 分成/ 256KB/ 的/ 分块/ ,/ 每个/ 分块/ 又/ 分成/ 16KB/ 的/ 分片/ ,/ 网络/ 中有/ 一个/ Tracker/ 服务器/ ,/ 5/ 个/ 种子/ 节点/ ./ 种子/ 节点/ 保持/ 一直/ 在线/ ,/ 正常/ 节点/ 在/ 下载/ 完后/ 就/ 会/ 下线/ ,/ 攻击/ 节点/ 当/ 网络/ 中/ 第一个/ 节点/ 下载/ 完成/ 后/ 开始/ 攻击/ ./ 以下/ 是/ 多组/ 仿真/ 结果/ ./ 实验/ 1/ ./ 参数设置/ 为/ 节点/ 到达/ 率/ λ/ =/ 0.2/ ,/ 节点/ 带宽/ 为/ 200Kbps/ ,/ 攻击/ 节点/ 带宽/ 200Kbps/ ./ 分别/ 对块/ 内/ 并行度/ ω/ =/ 1/ ,/ ω/ =/ 3/ 和/ ω/ =/ 16/ 时/ 调整/ 攻击/ 节点/ 数/ ,/ 得到/ 每/ 100s/ 的/ 完成/ 节点/ 数/ ./ 实验/ 结果/ 如图/ 1/ ~/ 图/ 3/ ./ Page6/ 由于/ 攻击/ 节点/ 带宽/ 能够/ 满足/ 式/ (/ 9/ )/ ,/ 所以/ 块/ 污染/ 攻击/ 的/ 效果/ 都/ 接近/ 理论/ 上限/ ./ 单位/ 时间/ 节点/ 完成/ 数随/ 攻击/ 节点/ 的/ 增加/ 而/ 减少/ ./ ω/ =/ 1/ 的/ 情况/ 下/ ,/ 当/ 攻击/ 节点/ 数/ 和/ 网络/ 内/ 节点/ 总数/ 相当/ 时/ ,/ 攻击/ 效果/ 不/ 明显/ ;/ 而/ 当/ 攻击/ 节点/ 数为/ 超过/ 网络/ 内/ 节点/ 数/ 的/ 2/ 倍/ 时/ ,/ 单位/ 时间/ 节点/ 完成/ 数会/ 大量/ 减少/ ./ 但是/ 随着/ 新/ 的/ 节点/ 不断/ 加入/ 网络/ ,/ 网络/ 内/ 正常/ 节点/ 总数/ 不断/ 增加/ ,/ 攻击/ 节点/ 攻击能力/ 开始/ 下降/ ./ 由/ 实验/ 1/ ,/ 块/ 内/ 并行度/ 会/ 放大/ 攻击/ 节点/ 的/ 攻击能力/ ,/ 如图/ 2/ ,/ 当块/ 内/ 并行度/ 为/ 3/ 时/ ,/ 只/ 需要/ 600/ 个/ 攻击/ 节点/ 就/ 几乎/ 可以/ 让/ 网络/ 内/ 所有/ 节点/ 不能/ 完成/ 下载/ ./ 而/ 当块/ 内/ 并行度/ 为/ 16/ 时/ (/ 如图/ 3/ )/ ,/ 300/ 个/ 攻击/ 节点/ 就/ 可以/ 让/ 网络/ 内/ 所有/ 节点/ 不能/ 完成/ 下载/ ./ 采样/ 节点/ 受/ 攻击/ 的/ 影响/ ,/ 下载速度/ 大幅度/ 下降/ ,/ 实验/ 中/ 的/ 文件/ 在/ 没有/ 攻击/ 时/ ,/ 下载/ 时间/ 为/ 1500s/ ./ 当/ 攻击/ 节点/ 数为/ 300/ ,/ 同/ 网络/ 内/ 节点/ 总数/ 相当/ 时/ ,/ 可以/ 达到/ 2/ 到/ 3/ 倍/ 的/ 延迟/ ;/ 当/ 攻击/ 节点/ 数是/ 网络/ 内/ 节点/ 数/ 的/ 2/ 倍/ 时/ 可以/ 达到/ 4/ 到/ 5/ 倍/ 的/ 延迟/ ,/ 当/ 攻击/ 节点/ 数为/ 1000/ 时/ 可以/ 达到/ 7/ 倍/ 以上/ 的/ 延迟/ ./ 接近/ 式/ (/ 7/ )/ 的/ 理论/ 上限/ ./ 由图/ 4/ 中/ 曲线/ 斜率/ 的/ 变化/ 可以/ 看出/ ,/ 攻击/ 效果/ 会/ 随着/ 网络/ 内/ 节点/ 的/ 增加/ 有所/ 下降/ ./ 实验/ 2/ ./ 节点/ 到达/ 率/ λ/ =/ 0.4/ ,/ ω/ =/ 1/ ,/ 节点/ 带宽/ 为/ 200Kbps/ ,/ 保持/ 攻击/ 节点/ 总/ 带宽/ 为/ 60Mbps/ ,/ 攻击/ 节点/ 数为/ 300/ 、/ 600/ 以及/ 1000/ 时/ ,/ 记录/ 一个/ 采样/ 节点/ 每/ 50s/ 的/ 下载/ 完成/ 量/ ./ 实验/ 结果/ 如图/ 5/ ./ 实验/ 2/ 是/ 在/ 攻击/ 节点/ 的/ 带宽/ 能力/ 有限/ 时测/ 得/ 的/ 攻击/ 效果/ ,/ 当/ 节点/ 数为/ 300/ 时/ ,/ 攻击者/ 的/ 带宽/ 还/ 能/ 满足/ 式/ (/ 9/ )/ 的/ 条件/ ,/ 攻击/ 效果/ 接近/ 理论/ 上限/ ./ 当/ 攻击/ 节点/ 数为/ 600/ 时/ ,/ 只/ 在/ 攻击/ 的/ 初期/ 能/ 满足/ 式/ (/ 9/ )/ 的/ 条件/ ,/ 随着/ 网络/ 内/ 节点/ 数/ 的/ 增加/ ,/ 攻击/ 效果/ 开始/ 下降/ ./ 而/ 当/ 节点/ 数为/ 1000/ 时/ ,/ 由于/ 不能/ 满足/ 式/ (/ 9/ )/ 的/ 条件/ ,/ 攻击/ 效果/ 远远/ 没有/ 达到/ 理论/ 上限/ ,/ 甚至/ 在/ 开始/ 阶段/ 还/ 不如/ 600/ 个/ 攻击/ 节点/ 达到/ 的/ 效果/ ./ 可见/ 当/ 攻击者/ 攻击/ 带宽/ 不/ 充足/ 时/ ,/ 过度/ 增加/ 攻击/ 节点/ 数/ 并/ 不能/ 达到/ 理想/ 效果/ ./ 通过/ 仿真/ 实验/ 可以/ 验证/ 块/ 污染/ 攻击/ 对/ P2P/ 共享/ 网络/ 的/ 安全/ 有着/ 严重/ 的/ 威胁/ ,/ 攻击/ 效果/ 基本/ 符合/ Page7/ 随机/ 模型/ 中式/ (/ 7/ )/ 、/ 式/ (/ 8/ )/ 的/ 结论/ ./ 为了/ 充分/ 验证/ 块/ 污染/ 攻击/ 的/ 可行性/ 和/ 有效性/ ,/ 我们/ 还/ 在/ 广域网/ 中/ 进行/ 了/ 攻击/ 验证/ 实验/ ,/ 通过/ 使用/ 了/ 24/ 台/ 服务器/ ,/ 40Mbps/ 左右/ 的/ 出口/ 带宽/ 进行/ 攻击/ 验证/ ./ 实验/ 表明/ 采用/ 降低/ 块/ 内/ 并行度/ 方法/ 的/ 比特/ 彗星/ 的/ 客户端/ 文件/ 下载/ 延迟/ 可以/ 达到/ 7/ 倍/ 以上/ ,/ 增加/ 攻击/ 节点/ 数/ 可以/ 增加/ 延迟时间/ ,/ 最/ 多/ 可以/ 达到/ 30/ 倍/ 左右/ 的/ 延迟/ ./ 没有/ 采用/ 降低/ 块/ 内/ 并行度/ ,/ 只/ 采用/ 黑名单/ 手段/ 识别/ 恶意/ 节点/ 的/ 比特精灵/ 客户端/ ,/ 攻击/ 效果/ 要/ 更为/ 明显/ ,/ 客户端/ 在/ 2/ 个/ 多/ 小时/ 里/ 没有/ 下载/ 到/ 任何/ 数据/ 广域网/ 攻击/ 验证/ 结果/ 都/ 远远/ 大于/ Dhungel/ 等/ 人/ [/ 12/ ]/ 在/ 黑盒/ 分析测试/ 得到/ 的/ 50/ %/ 左右/ 延迟/ 效果/ ./ 4/ 块/ 污染/ 攻击/ 的/ 对抗/ 方法/ 当前/ 大多数/ 客户端/ 对抗/ 污染/ 攻击/ 的/ 方法/ 就是/ 降低/ 块/ 内/ 并行度/ 并/ 使用/ 黑名单/ 的/ 方法/ ,/ 比如/ 在/ 广域网/ 攻击/ 验证/ 中/ 用到/ 的/ 比特精灵/ 和/ 比特/ 彗星/ ./ 但是/ 通过/ 实验/ 可以/ 看出/ 这些/ 方法/ 对抗/ 攻击/ 的/ 实际效果/ 并/ 不好/ ./ 这/ 是因为/ 在/ 下载/ 过程/ 中/ 由于/ 节点/ 的/ 频繁/ 上下/ 线/ ,/ 很难/ 保证/ 只/ 从/ 一个/ 节点/ 下载/ 到/ 完整/ 的/ 块/ ,/ 黑名单/ 方法/ 也/ 很/ 难/ 定位/ 到/ 准确/ 的/ 攻击者/ ./ 即便/ 能够/ 定位/ ,/ 攻击者/ 也/ 可以/ 通过/ 使用/ IP/ 池/ ,/ 策略性/ 的/ 更换/ IP/ 绕开/ 黑名单/ ./ 而/ 文献/ [/ 15/ -/ 16/ ]/ 提出/ 的/ 方法/ 在/ 实际/ 应用/ 上/ ,/ 可行性/ 不/ 强/ ,/ 本文/ 从/ 协议/ 角度/ 分析/ 块/ 污染/ 攻击/ 的/ 行为/ 特点/ ,/ 提出/ 了/ 基于/ 改进/ 块/ 校验/ 协议/ 的/ 对抗/ 方法/ ,/ 并/ 通过/ 仿真/ 实验/ 证明/ 该/ 方法/ 可以/ 基本上/ 消除/ 块/ 污染/ 攻击/ 的/ 威胁/ ./ 4.1/ 基于/ 改进/ 块/ 校验/ 协议/ 的/ 对抗/ 方法/ 块/ 污染/ 攻击/ 能够/ 成功/ 的/ 原因/ 在于/ ,/ 数据/ 的/ 最小/ 下载/ 单位/ (/ 片/ )/ 和/ 最小/ 校验/ 单位/ (/ 块/ )/ 不/ 相等/ ,/ 通过/ 块/ 校验/ 无法/ 定位/ 到/ 错误/ 分片/ ./ 本文/ 提出/ 的/ SmartHash/ 算法/ 在/ 不/ 破坏/ 原有/ 协议/ 的/ 前提/ 下/ ,/ 完善/ 了/ 校验/ 过程/ ,/ 在/ 种子/ 文件/ 中/ 采用/ 双/ Hash/ 值/ ,/ 在/ 传统/ 的/ 块/ Hash/ 校验/ 失败/ 时/ ,/ 用/ 新/ 增加/ 的/ Hash/ 值/ 对/ 错误/ 分片/ 进行/ 识别/ ,/ 保证/ 下载/ 节点/ 能够/ 准确/ 定位/ 到/ 被/ 破坏/ 的/ 分片/ 位置/ ,/ 并/ 选择/ 能/ 提供/ 正确/ 分片/ 的/ 节点/ 下载/ ,/ 避免/ 了/ 不必要/ 的/ 带宽/ 损失/ ./ SmartHash/ 算法/ 要求/ 文件/ 发布/ 节点/ 计算/ 分块/ 中/ 每个/ 分片/ 的/ Hash/ 值/ ,/ 构成/ 分片/ Hash/ 集合/ :/ PieceHashSet/ =/ {/ Hash/ (/ piece1/ )/ ,/ Hash/ (/ piece2/ )/ ,/ …/ ,/ Hash/ (/ piecec/ )/ }/ ,/ 然后/ 再/ 通过/ Hash/ 函数/ 得到/ 整个/ 分片/ Hash/ 集合/ 的/ 散列值/ SmartHash/ =/ Hash/ (/ 〈/ PieceHashSet/ 〉/ )/ ./ 在/ 发布/ 的/ 种子/ 文件/ 中/ 每个/ 分块/ 除了/ 原有/ 的/ 块/ Hash/ 外/ 还要/ 加入/ 这个/ 新/ 的/ SmartHash/ 值/ ./ 算法/ 描述/ 如下/ ./ 算法/ 1/ ./ SmartHash/ 块/ 校验/ 算法/ ./ 输入/ :/ 分块/ i/ 的/ BlockHashi/ ,/ SmartHashi/ 输出/ :/ 文件/ 分块/ iBlocki/ // // 如果/ 失败/ Blocki/ =/ Null1/ ./ 为/ 每个/ 分片/ 选择/ 不同/ 的/ 下载/ 源/ ,/ 构建/ 分块/ i/ 的/ 源节/ 2/ ./ Blocki/ =/ Null/ ;/ 3/ ./ 分别/ 向/ PeerSeti/ 中/ 的/ 每个/ 节点/ 请求/ 一个/ 分片/ 的/ 数据/ ;/ 4/ ./ 接收/ 到/ 的/ 数据/ 构成/ 分片/ 集合/ :/ 5/ ./ IfHash/ (/ PieceDataSeti/ )/ =/ BlockHashithen6/ ./ Blocki/ =/ PieceDataSeti/ ;/ 7/ ./ else8/ ./ 初始化/ 数据/ 修复/ 源/ 节点/ 集/ RepairPeerSet/ =/ / ;/ 9/ ./ 构造/ 接收/ 到/ 的/ 数据/ 分片/ 的/ Hash/ 值/ 集合/ 10/ ./ fork/ =/ 1tocdo11/ ./ 向/ peerk/ 请求/ 分块/ i/ 的/ 所有/ 分片/ 的/ Hash/ 值/ 集合/ 12/ ./ ifHash/ (/ PieceHashSetik/ )/ =/ SmartHashithen13/ ./ RepairPeerSet/ =/ RepairPeerSet/ +/ peerk/ ;/ 14/ ./ 获得/ 正确/ 片/ Hash/ 集合/ RealPieceHashSet/ ;/ 15/ ./ else/ 将/ peerk/ 加入/ 黑名单/ ;/ 16/ ./ endif17/ ./ endfor18/ ./ 比较/ RevPieceHashSet/ 和/ RealPieceHashSet/ 得到/ 19/ ./ 向/ 修复/ 节点/ 集/ RepairPeerSet/ 请求/ FakePieceDataSet20/ ./ 获得/ 修复/ 数据/ 集合/ RepairPieceDataSet/ ;/ 21/ ./ PieceDataSeti/ =/ PieceDataSeti/ -/ FakePieceDataSet/ +/ 22/ ./ IfHash/ (/ PieceDataSeti/ )/ =/ BlockHashthen23/ ./ Blocki/ =/ PieceDataSeti/ ;/ 24/ ./ elsegoto1/ ;/ 25/ ./ endif26/ ./ endif27/ ./ returnBlockiSmartHash/ 算法/ 在/ 没有/ 恶意/ 攻击/ 时/ 不会/ 有/ 额外/ 的/ 处理/ ,/ 在/ 节点/ 请求/ 过程/ 中/ 尽量/ 达到/ 最大/ 的/ 块/ 内/ 并行度/ ,/ 以便/ 块/ 污染/ 发生/ 时/ ,/ 保证/ 块/ 内/ 有/ 来自/ 良性/ 节/ Page8/ 点/ 的/ 分片/ ,/ 从而/ 确保/ 能/ 获得/ 正确/ 的/ PieceHashSet/ ./ 下面/ 通过/ 仿真/ 实验/ 验证/ SmartHash/ 算法/ 的/ 有效性/ ./ 4.2/ SmartHash/ 算法/ 的/ 仿真/ 实验/ 仿真/ 实验/ 采用/ 3.3/ 节/ 的/ 仿真/ 环境/ ,/ 因为/ 在/ 无/ 攻击/ 的/ 情况/ 下/ SmashHash/ 算法/ 并/ 没有/ 额外/ 处理/ ,/ 因此/ 实验/ 只/ 研究/ 在/ 有/ 污染/ 攻击/ 的/ 环境/ 下/ ,/ 同/ 传统/ 的/ BitTorrent/ 协议/ 的/ 抗/ 攻击性/ 对比/ ./ 仿真/ 实验/ 中/ 共享/ 文件/ 的/ 大小/ 为/ 100MB/ ,/ 种子/ 节点/ 为/ 5/ 个/ ,/ 节点/ 到达/ 率/ 的/ 泊松/ 分布/ 强度/ λ/ =/ 0.4/ ,/ 所有/ 节点/ 带宽/ 都/ 为/ 200Kbps/ ,/ 两组/ 对比/ 协议/ 的/ 块/ 内/ 并行度/ ω/ 分别/ 为/ 1/ 和/ 16/ ,/ 攻击/ 节点/ 都/ 为/ 500/ 个/ ./ 实验/ 从/ 系统/ 处于/ 稳定/ 状态/ 开始/ ,/ 记录/ 一个/ 新/ 加入/ 的/ 指定/ 节点/ 每/ 10/ 秒钟/ 的/ 下载/ 完成/ 量/ ,/ 实验/ 结果/ 如图/ 6/ 、/ 图/ 7/ 所示/ ./ 实验/ 分别/ 验证/ 了/ 没有/ 黑名单/ 的/ 和/ 有/ 辅助/ 黑名单/ 的/ SmartHash/ 算法/ 对抗/ 块/ 污染/ 攻击/ 的/ 能力/ ./ 由图/ 6/ 给出/ 的/ 结论/ ,/ 没有/ 使用/ 黑名单/ 的/ SmartHash/ 算法/ 下载/ 时间/ 不到/ 990s/ ,/ 和/ 理论/ 下载/ 时间/ 相比/ 延迟时间/ 不到/ 一倍/ ./ 而/ 在/ SmartHash/ 算法/ 的/ 基础/ 上/ 加入/ 辅助/ 黑名单/ 时/ 下载/ 时间/ 只有/ 不到/ 560s/ ,/ 仅仅/ 比/ 理论/ 下载/ 时间延迟/ 10/ %/ 左右/ ./ 而/ 基于/ 不同/ 具体/ 实现/ 的/ 传统/ BT/ 协议/ ,/ 则/ 受块/ 污染/ 攻击/ 的/ 影响/ 很大/ ./ 不/ 加入/ 任何/ 防御机制/ ,/ 块/ 污染/ 攻击/ 对/ 完全/ 随机/ 选择/ 每个/ 分片/ 的/ 下载/ 源/ 的/ 实现/ (/ ω/ =/ 16/ )/ 威胁/ 最大/ ,/ 在/ 模拟实验/ 测试/ 时间/ 内/ 用户/ 只/ 下载/ 完成/ 4.4/ %/ 的/ 数据/ ./ 即便/ 是/ 采用/ 了/ 从/ 一个/ 节点/ 下载/ 分块/ 中/ 所有/ 分片/ 的/ 策略/ (/ ω/ =/ 1/ )/ ,/ 在/ 1000s/ 内/ 用户/ 也/ 只/ 下载/ 完成/ 25.1/ %/ 的/ 数据/ ./ 通过/ 图/ 7/ 得到/ 的/ 整个/ 网络/ 所有/ 节点/ 的/ 下载/ 情况/ ,/ 可以/ 看出/ 使用/ SmartHash/ 算法/ 的/ 两组/ 数据/ 节点/ 完成率/ 都/ 在/ 每百/ 秒/ 30/ 个/ 以上/ ,/ 在/ 用户/ 可以/ 接受/ 的/ 时间/ 内/ 大多数/ 节点/ 都/ 能/ 完成/ 下载/ ./ 采用/ 块/ 内/ 并行度/ 为/ 1/ 下载/ 策略/ 一组/ 数据/ ,/ 每百/ 秒/ 只有/ 10/ 个/ 左右/ 的/ 下载/ 完成/ 节点/ ,/ 实验/ 结束/ 时有/ 接近/ 70/ %/ 的/ 节点/ 不能/ 完成/ 下载/ ./ 而块/ 内/ 并行度/ 为/ 16/ 的/ BT/ 下载/ 网络/ ,/ 几乎/ 没有/ 节点/ 能够/ 完成/ 下载/ ./ 可见/ SmartHash/ 算法/ 对块/ 污染/ 攻击/ 的/ 对抗/ 效果/ 非常明显/ ,/ 攻击/ 对/ 结合/ 黑名单/ 的/ Smart/ -/ Hash/ 算法/ 作用/ 非常/ 小/ ,/ 即便/ 是/ 攻击者/ 采用/ 动态/ IP/ 池等/ 策略/ 来/ 屏蔽/ 黑名单/ ,/ SmartHash/ 算法/ 也/ 能/ 将/ 下载/ 延迟时间/ 控制/ 在/ 1/ 倍/ 以内/ ,/ 使/ 用户/ 在/ 可容忍/ 的/ 时间/ 内/ 完成/ 下载/ ./ 在/ 额外/ 消耗/ 上/ ,/ 由于/ 采用/ 了/ 双/ Hash/ 值/ ,/ 使得/ 种子/ 文件/ 增加/ 了/ 接近/ 一倍/ 的/ 大小/ ,/ 但/ 由于/ 种子/ 文件/ 本身/ 很小/ ,/ 对于/ 当前/ 网络/ 条件/ 下/ 的/ 用户/ 来说/ 完全/ 可以/ 接受/ ./ 由于/ 要/ 向/ 一个/ 块/ 内/ 所有/ 节点/ 询问/ 片/ Hash/ 列表/ ,/ 如果/ Hash/ 值为/ 128/ 位/ ,/ 最坏/ 16/ 个/ 节点/ 的/ 情况/ 下/ 额外/ 流量/ 消耗/ 为/ 16/ ×/ 16/ ×/ 128/ // 8/ =/ 32KB/ ,/ 仅/ 占/ 污染/ 数据/ 的/ 1/ // 64/ 左右/ ,/ 流量/ 代价/ 也/ 可以/ 接受/ ./ 此外/ ,/ 基于/ SmartHash/ 算法/ 的/ 对抗/ 方法/ 需要/ 所有/ 参与/ 的/ 客户端/ 软件/ 进行/ 升级/ ,/ 推出/ 新/ 的/ 版本/ ,/ 这/ 对于/ 客户端/ 版本/ 更新/ 频繁/ 的/ P2P/ 软件/ 而言/ ,/ 也/ 是/ 可行/ 的/ ./ 5/ 结束语/ 块/ 污染/ 攻击/ 是/ 针对/ BT/ 等/ P2P/ 共享/ 系统/ 在/ 文件传输/ 阶段/ 实施/ 的/ 攻击方式/ ,/ 可以/ 导致用户/ 下载速度/ 严重/ 下降/ ,/ 直接/ 影响/ BT/ 系统/ 的/ 可用性/ ,/ 对/ BT/ 系统/ 的/ 安全性/ 造成/ 了/ 严重/ 的/ 威胁/ ./ 本文/ 通过/ 系统/ 的/ 建模/ 分析/ 和/ 仿真/ 实验/ 给出/ 了/ 块/ 污染/ 攻击/ 的/ 威胁/ 所/ 能/ 达到/ 的/ 理论/ 上限/ ,/ 并/ 通过/ 广域网/ 实验/ 分析/ 了/ 攻击/ 的/ 危害性/ ./ 最后/ 给出/ 了/ 对抗/ 块/ 污染/ 攻击/ 的/ 有效/ 方法/ ,/ 并/ 验证/ 了/ 其/ 有效性/ 和/ 可行性/ ./ 进一步/ 的/ 工作/ 可以/ 引入/ 信任/ 评价/ 以及/ 节点/ 协作/ 等/ 机制/ 提高/ P2P/ 系统/ 的/ 安全性/ ./ 

