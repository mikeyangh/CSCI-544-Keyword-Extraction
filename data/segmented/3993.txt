Page1/ 一种/ 基于/ 程序/ 变异/ 的/ 软件/ 错误/ 定位/ 技术/ 贺韬/ 1/ )/ ,/ 2/ )/ 王欣明/ 3/ )/ 周晓聪/ 1/ )/ 李文军/ 3/ )/ 张震宇/ 4/ )/ 张成志/ 2/ )/ 1/ )/ (/ 中山大学/ 信息科学/ 与/ 技术/ 学院/ 广州/ 510275/ )/ 2/ )/ (/ 香港科技大学/ 计算机科学/ 及/ 工程学系/ 香港/ )/ 3/ )/ (/ 中山大学/ 软件/ 学院/ 广州/ 510275/ )/ 4/ )/ (/ 中国科学院/ 软件/ 研究所/ 北京/ 100190/ )/ 摘要/ 发现/ 软件/ 不能/ 正常/ 运行/ 后/ ,/ 如何/ 定位/ 错误代码/ 在/ 程序/ 中/ 的/ 位置/ 是/ 软件开发/ 一个/ 众所周知/ 的/ 难点/ ./ 最近/ 许多/ 软件/ 自动/ 调试/ 技术/ 通过/ 分析/ 成功/ 和/ 失败/ 测试用例/ 的/ 覆盖/ 信息/ 辅助/ 程序员/ 定位/ 错误代码/ ,/ 但/ 这些/ 技术/ 的/ 准确率/ 会/ 受到/ 偶然性/ 成功/ 测试用例/ 的/ 影响/ ./ 偶然性/ 成功/ 测试用例/ 执行/ 了/ 错误代码/ ,/ 但/ 却/ 没有/ 引发/ 失败/ 的/ 测试/ 结果/ ./ 研究/ 表明/ 这种/ 测试用例/ 在/ 实际/ 测试/ 中/ 广泛/ 存在/ ,/ 而/ 它们/ 的/ 存在/ 会/ 显著/ 降低/ 错误/ 定位/ 的/ 准确率/ ./ 针对/ 此/ 问题/ ,/ 文中/ 提出/ 一种/ 称为/ Muffler/ 的/ 技术/ ./ Muffler/ 使用/ 程序/ 变异/ 分析/ 来/ 修正/ 错误代码/ 定位/ 结果/ ,/ 以/ 提高/ 定位/ 的/ 准确率/ ./ 文中/ 利用/ 8/ 个/ 在/ 错误代码/ 定位/ 研究/ 领域/ 广泛/ 使用/ 的/ 基准/ 程序验证/ 了/ Muffler/ 的/ 有效性/ ./ 实验/ 结果表明/ ,/ 与/ 传统/ 错误代码/ 定位/ 技术/ 相比/ ,/ Muffler/ 能/ 减少/ 程序员/ 50.26/ %/ 的/ 错误/ 定位/ 代价/ ./ 关键词/ 软件/ 调试/ ;/ 错误/ 定位/ ;/ 程序/ 变异/ 分析/ ;/ 软件工程/ 1/ 引言/ 最近/ 许多/ 软件/ 自动/ 调试/ 技术/ 通过/ 分析/ 成功/ 和/ 失败/ 测试用例/ 的/ 覆盖/ 信息/ 辅助/ 程序员/ 定位/ 错误代码/ ,/ 例如/ Jaccard/ [/ 1/ ]/ 、/ Tarantula/ [/ 2/ ]/ 、/ Ochiai/ [/ 3/ ]/ 和/ χ/ Debug/ [/ 4/ ]/ 等/ ./ 这些/ 技术/ 统称/ 为/ 基于/ 覆盖/ 信息/ 的/ 错误代码/ 定位/ (/ Coverage/ -/ BasedFaultLocalization/ ,/ CBFL/ [/ 5/ ]/ )/ 技术/ ./ CBFL/ 技术/ 通常/ 从/ 成功/ 和/ 失败/ 测试用例/ 的/ 运行/ 中/ 收集/ 程序代码/ 的/ 覆盖/ 信息/ (/ 分析/ 代码/ 的/ 粒度/ 可/ 有/ 不同/ 选择/ ,/ 如/ 语句/ [/ 1/ -/ 4/ ,/ 6/ -/ 7/ ]/ 、/ 分支/ [/ 8/ -/ 9/ ]/ 或/ 函数/ 等/ )/ ,/ 然后/ 根据/ 这些/ 覆盖/ 信息/ ,/ 为/ 每段/ 代码/ 计算错误/ 疑似/ 度/ ,/ 也/ 即/ 程序代码/ 的/ 覆盖/ 信息/ 与/ 失败/ 运行/ 结果/ 的/ 关联度/ ./ 直观/ 地说/ ,/ 一段/ 代码/ 如果/ 经常/ 被/ 失败/ 用例/ 覆盖/ ,/ 但/ 却/ 很少/ 被/ 成功/ 用例/ 覆盖/ ,/ 则/ 这段/ 代码/ 的/ 错误/ 疑似/ 度/ 就/ 很大/ ./ 程序员/ 可/ 按照/ 错误/ 疑似/ 度/ 由/ 高/ 至/ 低/ 的/ 顺序/ 检查/ 程序代码/ 以/ 找到/ 错误/ 位置/ ./ 尽管/ CBFL/ 技术/ 取得/ 了/ 初步/ 成功/ [/ 7/ ,/ 10/ -/ 11/ ]/ ,/ 但/ 其/ 准确率/ 仍/ 受到/ 许多/ 负面/ 因素/ 影响/ ./ 已有/ 研究/ [/ 10/ ,/ 12/ ]/ 指出/ ,/ 偶然性/ 成功/ 测试用例/ (/ CoincidentalCorrectness/ )/ 是/ 最/ 重要/ 的/ 负面/ 因素/ 之一/ ./ 偶然性/ 成功/ 测试用例/ 指/ 的/ 是/ 这样/ 的/ 成功/ 测试用例/ :/ 它/ 覆盖/ 了/ 程序/ 的/ 错误代码/ ,/ 但/ 却/ 未/ 引发/ 失败/ 的/ 运行/ 结果/ [/ 13/ ]/ ./ 偶然性/ 成功/ 测试用例/ 的/ 出现/ 会/ 显著/ 影响/ CBFL/ 技术/ 的/ 准确率/ ,/ 因为/ 它们/ 的/ 出现/ 降低/ 了/ 错误代码/ 和/ 失败/ 运行/ 结果/ 的/ 关联度/ ./ 同时/ 研究/ [/ 5/ ,/ 14/ -/ 15/ ]/ 指出/ ,/ 偶然性/ 成功/ 在/ 实际/ 测试/ 中/ 广泛/ 存在/ ./ 因此/ 降低/ 偶然性/ 成功/ 测试用例/ 对/ 提高/ CBFL/ 技术/ 的/ 准确率/ 很/ 有/ 意义/ ./ 然而/ 降低/ 偶然性/ 成功/ 测试用例/ 的/ 负面影响/ 是/ 一个/ 很/ 困难/ 的/ 问题/ ,/ 因为/ 很难/ 准确/ 区分/ 哪些/ 成功/ 测试用例/ 是/ 偶然性/ 成功/ 用例/ ,/ 除非/ 已经/ 知道/ 程序/ 错误代码/ 的/ 位置/ ,/ 但/ 这/ 正是/ 调试/ 的/ 目标/ ./ 目前/ 仅/ 有/ 少量/ 工作/ 尝试/ 解决/ 此/ 问题/ ./ Wang/ 等/ 人/ [/ 15/ ]/ 提出/ 一种/ 使用/ 上下文/ 模式/ 来/ 提炼/ 覆盖/ 信息/ ./ 他们/ 假设/ 程序员/ 预先/ 知道/ 程序/ 的/ 错误/ 类型/ 并/ 通过/ 这些/ 错误/ 类型/ 的/ 模式/ 来/ 排除/ 偶然性/ 成功/ 用例/ 引入/ 的/ 错误代码/ 覆盖/ ./ 但/ 在/ 实际/ 开发/ 中/ ,/ 该/ 假设/ 不/ 一定/ 成立/ ./ Masri/ 等/ 人/ [/ 16/ ]/ 提出/ 一种/ 区分/ 偶然性/ 成功/ 测试用例/ 的/ 启发式/ 方法/ ./ 但/ 该/ 方法/ 并/ 不/ 十分/ 准确/ ,/ 实验/ 结果表明/ 该/ 方法/ 会/ 产生/ 超过/ 41.3/ %/ 的/ 错判/ 率/ ,/ 以致/ 对/ 提高/ 错误代码/ 定位/ 技术/ 准确率/ 没有/ 明显/ 的/ 帮助/ ./ 针对/ 已有/ 工作/ 的/ 不足/ ,/ 本文/ 提出/ 一种/ 新/ 的/ 思路/ ,/ 不/ 需要/ 程序员/ 预先判断/ 程序/ 的/ 错误/ 类型/ ,/ 也/ 不/ 需要/ 区分/ 哪些/ 成功/ 测试用例/ 是/ 偶然性/ 成功/ 测试用例/ ./ 我们/ 的/ 核心/ 想法/ 是/ 利用/ 程序/ 变异/ 分析/ (/ MutationAnalysis/ )/ 降低/ 偶然性/ 成功/ 测试用例/ 的/ 影响/ ./ 该/ 想法/ 基于/ 这样/ 的/ 观察/ :/ 对于/ 一个/ 成功/ 测试用例/ ,/ 假如/ 变异/ 程序/ 的/ 错误代码/ 后/ 再/ 执行/ 它/ (/ 即/ 把/ 原来/ 的/ 代码/ 替换/ 为/ 另/ 一段/ 不同/ 的/ 代码/ )/ ,/ 那么/ 不管/ 它/ 是否是/ 偶然性/ 成功/ 测试用例/ ,/ 测试/ 结果/ 趋向于/ 不变/ ,/ 因为/ 这/ 只是/ 将/ 一个/ 错误/ 改为/ 另/ 一个/ 错误/ ,/ 并/ 没有/ 增加/ 程序/ 的/ 错误/ 数/ ;/ 然而/ ,/ 若/ 变异/ 程序/ 的/ 正确/ 代码/ ,/ 那么/ 这个/ 用例/ 的/ 测试/ 结果/ 很/ 可能/ 就/ 从/ 成功/ 变为/ 失败/ ,/ 因为/ 这时/ 程序/ 多/ 了/ 一个/ 额外/ 错误/ ,/ 也/ 就/ 增加/ 了/ 出错/ 的/ 概率/ ./ 根据/ 这种/ 观察/ ,/ 我们/ 认为/ 不同/ 代码段/ 变异/ 后/ 引发/ 的/ 由/ 成功/ 变为/ 失败/ 的/ 测试用例/ 数/ 提供/ 了/ 新/ 的/ 错误/ 定位/ 线索/ ./ 相比/ 于/ 代码/ 覆盖/ ,/ 这种/ 线索/ 较少/ 受/ 偶然性/ 成功/ 测试用例/ 的/ 影响/ ,/ 用/ 它/ 修正/ 代码/ 覆盖/ 所/ 推导/ 出/ 的/ 结果/ ,/ 可/ 减少/ 偶然性/ 成功/ 测试用例/ 的/ 负面影响/ ,/ 从而/ 更/ 准确/ 地/ 评估/ 代码/ 的/ 错误/ 疑似/ 度/ ,/ 提高/ 错误/ 定位/ 的/ 准确率/ ./ 我们/ 开发/ 了/ 一套/ 称为/ Muffler/ 的/ 软件/ 实现/ 了/ 上述/ 想法/ ,/ 应用/ 在/ 错误/ 定位/ 研究/ 中/ 广泛/ 使用/ 的/ Siemens/ 基准/ 程序/ 集/ [/ 14/ ]/ 的/ 7/ 个/ 程序/ 共/ 123/ 个/ 错误/ 程序/ 版本/ 上/ ,/ 并/ 与/ 多个/ CBFL/ 技术/ 进行/ 了/ 实验/ 比较/ ./ 实验/ 结果表明/ ,/ 与/ 目前/ 最好/ 的/ CBFL/ 技术/ 相比/ ,/ Muffler/ 把/ 平均/ 代码/ 检查/ 率/ 从/ 19.34/ %/ 降到/ 9.62/ %/ ,/ 减少/ 比例/ 为/ 50.26/ %/ (/ =/ 100/ %/ -/ (/ 9.62/ %/ // 19.34/ %/ )/ )/ ./ 我们/ 还/ 使用/ 了/ 一个/ 实际/ 应用程序/ space/ 及其/ 真实/ 错误/ 版本/ ,/ 展示/ Muffler/ 在/ 实际/ 应用/ 中/ 的/ 有效性/ ./ 本文/ 的/ 主要/ 贡献/ 有/ 两/ 方面/ :/ (/ 1/ )/ 提出/ 一种/ 利用/ 程序/ 变异/ 分析/ 提高/ 错误/ 定位/ 准确率/ 的/ 方法/ ;/ (/ 2/ )/ 报告/ 了/ 一组/ 实验/ 及其/ 结果/ ,/ 说明/ 本文/ 的/ 方法/ 比/ 现有/ CBFL/ 技术/ 能/ 更/ 准确/ 地/ 定位/ 程序/ 的/ 错误代码/ ./ 本文/ 第/ 2/ 节/ 简述/ 现有/ 错误/ 定位/ 技术/ 和/ 程序/ 变异/ 技术/ ;/ 第/ 3/ 节在/ 使用/ 完整/ 例子/ 说明/ 本文/ 方法/ 基本/ 思想/ 的/ 基础/ 上/ ,/ 给出/ Muffler/ 系统/ 的/ 总体/ 工作/ 流程/ 和/ 在/ 变异/ 分析/ 方面/ 的/ 设计/ 要点/ ;/ 第/ 4/ 节/ 给出/ 验证/ Muffler/ 系统/ 有效性/ 的/ 比较/ 实验/ 及其/ 结果/ ;/ 第/ 5/ 节/ 总结/ 全文/ 并/ 展望/ 下/ 一步/ 工作/ ./ 2/ 研究/ 背景/ 近年来/ 出现/ 了/ 许多/ CBFL/ 技术/ ,/ 例如/ Tarantula/ [/ 2/ ]/ 、/ Ochiai/ [/ 3/ ]/ 、/ χ/ Debug/ [/ 4/ ]/ 和/ Naish/ [/ 17/ ]/ 等/ ./ CBFL/ 技术/ 的/ 核心/ 部分/ 是/ 根据/ 程序代码/ 的/ 覆盖/ 信息/ 和/ 测试/ 结果/ 计算/ 程序代码/ 错误/ 疑似/ 度/ 的/ 公式/ ./ 代码/ 覆盖/ 信息/ 的/ 分析/ 粒度/ 可以/ 是/ 语句/ 、/ 分支/ 或/ 函数/ 等/ ,/ 但/ 多数/ CBFL/ 技术/ 针对/ 程序/ 语句/ 进行/ 分析/ ./ Naish/ 等/ 最近/ 的/ 研究/ [/ 17/ ]/ 表/ Page3/ 明/ ,/ 他们/ 提出/ 的/ 公式/ 比/ 30/ 多种/ 现有/ 公式/ 能/ 更/ 准确/ 地/ 定位/ 程序/ 错误/ ./ 其/ 公式/ 的/ 定义/ 如下/ :/ SuspNaish/ (/ Si/ )/ =/ Failed/ (/ Si/ )/ ×/ (/ TotalPassed/ +/ 1/ )/ -/ Passed/ (/ Si/ )/ (/ 1/ )/ 其中/ ,/ SuspNaish/ (/ Si/ )/ 是/ 语句/ Si/ 的/ 错误/ 疑似/ 度/ ,/ Failed/ (/ Si/ )/ 和/ Passed/ (/ Si/ )/ 分别/ 是/ 覆盖/ 语句/ Si/ 的/ 失败/ 和/ 成功/ 测试用例/ 数/ ,/ TotalPassed/ 是/ 成功/ 测试用例/ 总数/ ./ 由于/ 大部分/ CBFL/ 技术/ 仅/ 在/ 疑似/ 度/ 计算公式/ 上/ 不同/ ,/ 本文/ 以/ 4/ 种/ 知名/ 的/ CBFL/ 技术/ ,/ 即/ Tarantula/ 、/ Ochiai/ 、/ χ/ Debug/ 和/ Naish/ ,/ 作为/ 代表/ 进行/ 分析/ 比较/ ,/ 更/ 多/ 技术/ 可/ 参阅/ 文献/ [/ 17/ ]/ ./ 程序/ 变异/ 测试/ 与/ 分析/ (/ ProgramMutationTes/ -/ tingandAnalysis/ )/ 是/ 由/ Hamlet/ [/ 18/ ]/ 和/ DeMillo/ 等/ 人/ [/ 19/ ]/ 提出/ 的/ 一种/ 基于/ 错误/ 植入/ 的/ 软件测试/ 技术/ ./ 这种/ 技术/ 主要/ 用于/ 衡量/ 测试用例/ 集/ 发现错误/ 的/ 有效性/ ./ 变异/ 测试通过/ 在/ 程序/ 中/ 逐个/ 引入/ 符合/ 语法/ 的/ 变化/ ,/ 把/ 原始/ 程序/ 变异/ 成/ 若干/ 变异/ 程序/ ,/ 以/ 检验/ 测试用例/ 集/ 的/ 错误/ 检测/ 能力/ ./ 本文/ 主要/ 利用/ 变异/ 测试/ 技术/ 的/ 错误/ 植入/ 能力/ ,/ 在/ 指定/ 程序/ 语句/ 上/ 产生/ 符合/ 语法/ 的/ 程序/ 错误/ ,/ 并/ 利用/ 随之/ 带来/ 的/ 测试/ 结果/ 变化/ 预测/ 该/ 程序/ 语句/ 存在/ 错误/ 的/ 可能性/ ./ 程序/ 变异/ 测试/ 与/ 分析/ 在/ 原始/ 程序/ 上/ 应用/ 变异/ 算子/ (/ MutationOperator/ )/ 以/ 植入/ 错误/ ./ 根据/ 变异/ 对象/ 的/ 类型/ ,/ 变异/ 算子/ 可/ 分为/ 语句/ 、/ 运算符/ 、/ 变量/ 、/ 常量/ 等/ 类型/ [/ 20/ ]/ ;/ 根据/ 变异/ 的/ 行为/ ,/ 可/ 分为/ 替换/ 、/ 插入/ 、/ 删除/ 3/ 种/ 类型/ ./ 若/ 原始/ 程序/ 和/ 变异/ 程序/ 之间/ 只/ 应用/ 了/ 一次/ 变异/ 算子/ ,/ 则/ 称为/ 一阶/ 变异/ ;/ 若/ 应用/ 了/ 多次/ 则/ 称为/ 高阶/ 变异/ ./ 为/ 设计/ 简明/ 与/ 更/ 清晰/ 的/ 分析/ ,/ 本文/ 仅/ 使用/ 一阶/ 变异/ ./ Papadakis/ 和/ Traon/ 在/ 文献/ [/ 21/ ]/ 中/ ,/ 尝试/ 利用/ 程序/ 变异/ 提高/ 错误/ 定位/ 的/ 准确率/ ./ 其/ 方法/ 是/ 对于/ 程序/ 中/ 的/ 每/ 一个/ 可/ 执行/ 语句/ S/ 应用/ 不同/ 变异/ 算子/ 生成/ 若干/ 变异/ 程序/ ,/ 然后/ 对/ 每个/ 变异/ 程序运行/ CBFL/ 算出/ 一个/ S/ 的/ 错误/ 疑似/ 度/ ,/ 最后/ 把/ 其中/ 的/ 最大值/ 作为/ S/ 的/ 最终/ 错误/ 疑似/ 度/ ./ 该/ 研究/ 在/ Siemens/ 程序/ 集上/ 进行/ 了/ 实验/ ,/ 比较/ 了/ 不同/ 程序/ 以及/ 不同/ 规模/ 测试/ 集上/ 的/ 结果/ ,/ 说明/ 了/ 其/ 方法/ 在/ 不同/ 场景/ 下/ 的/ 有效性/ ./ 不过/ ,/ 文章/ 并/ 没有/ 解释/ 为何/ 从/ 不同/ 变异/ 程序/ 中/ 得到/ 的/ 最大/ 疑似/ 度赋/ 给/ 各个/ 语句/ 后/ 会/ 具有/ 可比性/ ,/ 也/ 并未/ 深入探讨/ 其/ 方法/ 起/ 作用/ 的/ 原因/ ./ 本文/ 提出/ 的/ Muffler/ 技术/ 根据/ 语句/ 变异/ 前后/ 测试/ 结果/ 的/ 变化/ ,/ 尝试/ 去/ 解决/ 现有/ CBFL/ 技术/ 的/ 主要/ 缺陷/ —/ —/ —/ 偶然性/ 成功/ 的/ 测试用例/ ,/ 不仅/ 提高/ 了/ 现有/ CBFL/ 技术/ 的/ 准确率/ ,/ 也/ 因此/ 解释/ 了/ 其/ 作用/ 的/ 内部/ 机理/ ./ 3/ 基于/ 变异/ 分析/ 的/ 错误/ 定位/ 技术/ 这/ 一节/ 首先/ 结合/ 一个/ 例子/ 详细/ 说明/ 基于/ 变异/ 分析/ 的/ 错误/ 定位/ 技术/ 的/ 基本/ 思想/ ,/ 然后/ 给出/ Muffler/ 系统/ 的/ 设计/ 与/ 实现/ ,/ 并/ 重点/ 说明/ Muffler/ 系统/ 针对/ 错误/ 定位/ 的/ 要求/ 对/ 程序/ 变异/ 所/ 做/ 的/ 优化/ ./ 3.1/ 基本/ 思想/ 图/ 1/ 给出/ 了/ 各种/ 错误/ 定位/ 技术/ (/ 包括/ 本文/ 提出/ 的/ 技术/ )/ 对/ Schedule/ 程序/ 的/ v2/ 版本/ 中/ 一个/ 程序/ 片段/ 所有/ 语句/ 错误/ 疑似/ 度/ 的/ 计算/ ,/ 以/ 说明/ CBFL/ 技术/ 的/ 应用/ 和/ 本文/ 提出/ 的/ 方法/ 的/ 基本/ 思想/ ./ 图/ 1/ 第一/ 部分/ 给出/ 了/ 该/ 程序/ 片段/ ,/ 注意/ 语句/ S2/ 和/ S3/ 上/ 有/ 一个/ 错误/ ,/ 导致/ 错误/ 的/ 队列/ 下标/ n/ ./ 但/ 错误/ 的/ n/ 值/ 不/ 总是/ 会/ 触发/ 导致/ 错误/ 的/ 程序/ 输出/ ,/ 产生/ 失败/ 的/ 测试/ 结果/ ./ 实际上/ ,/ 执行/ 语句/ S2/ 和/ S3/ 的/ 1592/ 个/ 测试用例/ 中/ ,/ 只有/ 210/ 个/ 失败/ 测试用例/ ,/ 其余/ 1382/ 个/ 测试用例/ 均/ 为/ 偶然性/ 成功/ ./ 图/ 1/ 第一/ 部分/ 也/ 给出/ 了/ 成功/ 和/ 失败/ 测试用例/ 总数/ 及/ 覆盖/ 每条/ 语句/ 的/ 成功/ 和/ 失败/ 测试用例/ 数/ ,/ 例如/ 2440/ 个/ 成功/ 测试用例/ 有/ 1798/ 个/ 覆盖/ S1/ ,/ 而/ 210/ 个/ 失败/ 测试用例/ 都/ 覆盖/ S1/ ./ 图/ 1/ 第二/ 部分/ 给出/ 了/ Tarantula/ 、/ Ochiai/ 、/ χ/ Debug/ 和/ Naish/ 的/ 语句/ 错误/ 疑似/ 度/ 计算结果/ ,/ 其中/ susp/ 列是/ 每个/ 语句/ 的/ 错误/ 疑似/ 度/ ,/ r/ 列是/ 每个/ 语句/ 按/ 错误/ 疑似/ 度/ 由/ 高/ 至/ 低/ 排序/ 的/ 排名/ ./ 错误/ 语句/ 的/ 排名/ 一定/ 程度/ 上/ 度量/ 了/ 程序员/ 定位/ 到/ 这个/ 错误/ 需要/ 的/ 代价/ [/ 22/ ]/ ./ 从图/ 1/ 我们/ 可/ 看出/ ,/ 这些/ CBFL/ 技术/ 都/ 需要/ 检查/ 88/ %/ 的/ 语句/ 才能/ 定位/ 到/ 错误/ 语句/ S2/ 和/ S3/ ,/ 因为/ 若/ 按照/ 错误/ 疑似/ 度/ 从/ 高到/ 低/ 的/ 顺序/ 检查/ 语句/ ,/ 除/ S1/ 外/ 其它/ 语句/ 都/ 需要/ 检查/ ,/ 也/ 即/ 检查/ 语句/ 的/ 总数/ 占/ 总/ 语句/ 数/ 的/ 88/ %/ (/ ≈/ 7/ // 8/ )/ ./ 从此/ 例可/ 看到/ 高/ 偶然性/ 成功/ 测试用例/ 率/ (/ 此例/ 是/ 1382/ // 2440/ =/ 56.6/ %/ )/ 对/ CBFL/ 技术/ 准确率/ 存在/ 着/ 负面影响/ ./ 图/ 1/ 第三/ 、/ 四/ 部分/ 给出/ 了/ 本文/ 提出/ 的/ 在/ 程序/ 变异/ 分析/ 基础/ 上/ 的/ 语句/ 错误/ 疑似/ 度/ 的/ 计算/ ./ 图/ 1/ 第三/ 部分/ 给出/ 该/ 程序/ 片段/ 每条/ 语句/ 的/ 变异/ 示例/ 及其/ 影响/ ./ 该/ 程序/ 片段/ 中有/ 8/ 条/ 语句/ S1/ ~/ S8/ ,/ 分别/ 变异/ 这/ 8/ 条/ 语句/ ,/ 每条/ 语句/ 产生/ 5/ 个/ 变异/ 程序/ ,/ 总共/ 产生/ 5/ ×/ 8/ =/ 40/ 个/ 变异/ 程序/ ,/ 对/ 40/ 个/ 变异/ 程序/ 重新/ 运行/ 原先/ 的/ 测试用例/ ,/ 得到/ 原本/ 成功/ 而/ 变异/ 后/ 失败/ 的/ 测试用例/ 数/ ,/ 如图/ 1/ 第三/ 部分/ 的/ “/ Changep/ →/ f/ (/ MSi/ ,/ j/ )/ ”/ 所示/ ./ 例如/ ,/ 将/ 语句/ S1/ 中/ 的/ 变量/ “/ block/ _/ queue/ ”/ 加上/ 逻辑/ 非/ “/ !/ ”/ 得到/ 对/ 应该/ 语句/ 的/ 第/ 1/ 个/ 变异/ 程序/ MS1/ ,/ 1/ ,/ 对应/ 地有/ Changep/ →/ f/ (/ MS1/ ,/ 1/ )/ =/ 1644/ 个/ 原先/ 成功/ 的/ Page4/ 测试用例/ 在/ MS1/ ,/ 1/ 上/ 运行/ 变为/ 失败/ 测试用例/ ./ 又/ 例如/ ,/ Changep/ →/ f/ (/ MS3/ ,/ 2/ )/ =/ 1116/ 表示/ 有/ 1116/ 个/ 原先/ 成功/ 的/ 测试用例/ 在/ 语句/ S3/ 的/ 第/ 2/ 个/ 变异/ 程序/ MS3/ ,/ 2/ 上/ 运行/ 变为/ 失败/ 测试用例/ ./ 注意/ ,/ 图/ 1/ 第三/ 部分/ 变异/ 示例/ 仅/ 给出/ 了/ 每条/ 语句/ 的/ 一个/ 变异/ ,/ 其它/ 4/ 个/ 变异/ 受/ 篇幅/ 所/ 限/ 没有/ 一一/ 列出/ ./ 图/ 1/ 第四/ 部分/ “/ Impact/ ”/ 列/ 统计/ 了/ 变异/ 每条/ 语句/ 后/ 成功/ 测试用例/ 变化/ 的/ 平均数/ ,/ 我们/ 将/ 其/ 定义/ 为/ 对应/ 语句/ Si/ 的/ 变异/ 影响/ Impact/ (/ Si/ )/ :/ 图/ 1/ 各种/ 错误/ 定位/ 技术/ 对/ “/ schedule/ ”/ 程序/ 的/ 错误/ 版本/ v2/ 的/ 一个/ 程序/ 片段/ 的/ 错误/ 疑似/ 度/ 计算/ 根据/ 这种/ 观察/ ,/ 我们/ 认为/ 在/ 计算/ 疑似/ 度/ 的/ 时候/ 引入/ 变异/ 影响/ 可/ 提升/ CBFL/ 技术/ 的/ 准确性/ ./ 为此/ ,/ 我们/ 在/ Naish/ 错误/ 疑似/ 度/ 计算/ 式/ (/ 1/ )/ 的/ 基础/ 上/ 加入/ 变异/ 影响/ ,/ 得到/ 如下/ 计算公式/ :/ SuspMuffler/ (/ Si/ )/ =/ SuspNaish/ (/ Si/ )/ -/ Impact/ (/ Si/ )/ (/ 3/ )/ 式/ (/ 3/ )/ 是/ 我们/ 开发/ 的/ Muffler/ 软件/ 目前/ 采用/ 的/ 公式/ ./ 实际上/ ,/ 也/ 可/ 将/ 变异/ 影响/ 用于/ 其它/ CBFL/ 技术/ 的/ 计算公式/ ./ 图/ 1/ 第四/ 部分/ 的/ Susp/ 列/ 给出/ 了/ 例子/ 程序/ 片段/ ,/ 每条/ 语句/ 用式/ (/ 3/ )/ 计算/ 出/ 的/ 错误/ 疑似/ 度/ ,/ 而/ r/ 列/ 给出/ 了/ 对应/ 的/ 排名/ ./ 按照/ 该/ 排名/ ,/ 只/ 检查/ 25/ %/ 的/ 语句/ 即可/ 定位/ 到/ 错误/ 语句/ S2/ 和/ S3/ ,/ 比/ 前述/ CBFL/ 技术/ 88/ %/ 的/ 错误/ 定位/ 代价/ 有/ 显著/ 提高/ ./ 3.2/ Muffler/ 系统/ 设计/ 我们/ 设计/ 并/ 实现/ 了/ 名为/ Muffler/ 的/ 原型/ 系统/ ./ 该/ 系统/ 可以/ 自动/ 地/ 生成/ 变异/ 程序/ 、/ 嵌入/ 监控/ 代码/ 、/ 运/ 其中/ m/ 是/ 每条/ 语句/ 的/ 变异/ 个数/ ,/ 在/ 这里/ 的/ 例子/ 中/ m/ =/ 5/ ./ 过去/ 的/ 研究/ [/ 23/ ]/ 与/ 我们/ 的/ 初步/ 实验/ 显示/ ,/ m/ =/ 5/ 的/ 抽样/ 已经/ 能/ 得到/ 接近/ 全部/ 变异/ 程序/ 的/ 结果/ ./ 可以/ 看到/ 错误/ 语句/ S2/ 和/ S3/ 的/ 变异/ 影响/ 比/ 其它/ 语句/ 低/ ,/ 这/ 印证/ 了/ 前面/ 所说/ 的/ 基本/ 观察/ :/ 变异/ 错误/ 的/ 程序/ 语句/ 更/ 趋向于/ 保持/ 成功/ 测试用例/ 的/ 测试/ 结果/ ,/ 而/ 变异/ 正确/ 的/ 程序/ 语句/ 则/ 更/ 趋向于/ 改变/ 成功/ 测试用例/ 的/ 测试/ 结果/ ./ 行/ 测试用例/ 并/ 收集/ 覆盖/ 信息/ ./ Muffler/ 利用/ 变异/ 影响/ 计算/ 每个/ 可/ 执行/ 语句/ 的/ 疑似/ 度/ ,/ 给出/ 疑似/ 度/ 由/ 高/ 至/ 低/ 的/ 语句/ 排序/ 列表/ ./ 图/ 2/ 给出/ 了/ Muffler/ 原型/ 系统/ 的/ 数据流/ 图/ ./ 类似/ 其它/ 错误/ 定位/ 工具/ ,/ Muffler/ 接收/ 错误/ 程序/ 和/ 对应/ 的/ 测试用例/ 集/ 为/ 输入/ ,/ 最终/ 输出/ 帮助/ 定位/ 错误/ 的/ 疑似/ 语句/ 排序/ 列表/ ./ Muffler/ 的/ 工作/ 流程/ 如下/ :/ (/ 1/ )/ 给定/ 一个/ 错误/ 程序/ 和/ 相应/ 的/ 测试用例/ 集/ ,/ Muffler/ 首先/ 运行/ 测试用例/ ,/ 并/ 收集/ 覆盖/ 信息/ 和/ 测试/ 结果/ ;/ (/ 2/ )/ 基于/ 减少/ 变异/ 语句/ 数目/ 、/ 提高/ 运行/ 效率/ 的/ 考虑/ ,/ Muffler/ 选出/ 覆盖/ 最/ 多/ 失败/ 用例/ 的/ 语句/ 作为/ 变异/ 候选/ 语句/ ;/ (/ 3/ )/ 对/ 每个/ 变异/ 候选/ 语句/ ,/ Muffler/ 逐个/ 应用/ 变异/ 算子/ 以/ 生成/ 所有/ 可能/ 的/ 变异/ 程序/ ,/ 然后/ 从中/ 随机/ 选择/ 固定/ 数量/ 的/ 一部分/ 来/ 衡量/ 该/ 语句/ 的/ 变异/ 影响/ ;/ (/ 4/ )/ MufflerPage5/ 在/ 测试用例/ 集上/ 运行/ 每个/ 被/ 选择/ 的/ 变异/ 程序/ ,/ 收集/ 测试/ 结果/ 的/ 变化/ ,/ 计算/ 每个/ 语句/ 的/ 变异/ 影响/ ;/ (/ 5/ )/ Muffler/ 基于/ 变异/ 影响/ 和/ 原始/ 程序/ 的/ 覆盖/ 信息/ ,/ 计算/ 每个/ 语句/ 的/ 错误/ 疑似/ 度/ ./ 3.3/ Muffler/ 系统/ 中/ 变异/ 分析/ 的/ 优化/ 针对/ 错误/ 定位/ 的/ 需要/ ,/ Muffler/ 系统对/ 需要/ 变异/ 的/ 语句/ 数/ 进行/ 了/ 控制/ ,/ 并/ 对/ 初步/ 变异/ 后/ 的/ 程序/ 进行/ 抽样/ 以/ 减少/ 需要/ 运行/ 测试用例/ 的/ 变异/ 程序/ 数/ 从而/ 提高/ 整个/ 系统/ 的/ 效率/ ./ 我们/ 的/ 研究/ 目标/ 是/ 要/ 提升/ CBFL/ 技术/ 的/ 准确率/ ,/ 因此/ 只/ 对/ 那些/ 错误/ 疑似/ 度排/ 在/ 错误/ 语句/ 之上/ 的/ 正确/ 语句/ 感兴趣/ ,/ 而/ 没有/ 必要/ 考虑/ 程序/ 中/ 所有/ 的/ 可/ 执行/ 语句/ ./ 例如/ ,/ 对于/ 没有/ 被/ 任何/ 失败/ 用例/ 覆盖/ 的/ 语句/ ,/ 并/ 没有/ 必要/ 做/ 变异/ 分析/ ,/ 因为/ 它们/ 不/ 可能/ 是/ 错误/ 语句/ ./ CBFL/ 技术/ 对/ 这些/ 语句/ 也/ 总是/ 赋予/ 最低/ 的/ 错误/ 疑似/ 度/ ./ 目前/ ,/ Muffler/ 系统/ 的/ 筛选/ 策略/ 是/ 选出/ 被/ 超过/ K/ 个/ 失败/ 测试用例/ 覆盖/ 的/ 语句/ 进行/ 变异/ 分析/ ;/ K/ 可以/ 由/ 程序员/ 根据/ 触发/ 失败/ 用例/ 的/ 错误/ 个数/ 指定/ ./ 若/ 程序员/ 明确/ 知道/ 所有/ 失败/ 用例/ 由/ 同一个/ 程序/ 错误/ 触发/ ,/ 例如/ 在/ 本文/ 的/ 实验/ 中/ ,/ K/ 就/ 可以/ 取/ 失败/ 用例/ 总数/ TotalFailed/ ./ 此/ 策略/ 可/ 显著/ 减少/ 做/ 变异/ 分析/ 的/ 语句/ 数/ ,/ 从而/ 提高/ 整个/ Muffler/ 系统/ 的/ 效率/ ./ 根据/ 一条/ 语句/ 中/ 语法/ 单元/ 的/ 不同/ ,/ 可用/ 的/ 变异/ 算子/ 也/ 不同/ ,/ 产生/ 的/ 变异/ 程序/ 数目/ 也/ 不同/ ./ 为/ 统一/ 变异/ 每条/ 语句/ 生成/ 的/ 变异/ 程序/ 数/ ,/ Muffler/ 使用/ 由/ Acree/ [/ 6/ ]/ 和/ Budd/ [/ 24/ ]/ 提出/ 的/ 变异/ 程序/ 抽样/ 技术/ ./ 变异/ 程序/ 抽样/ 技术/ 首先/ 会/ 生成/ 所有/ 可能/ 的/ 变异/ 程序/ ,/ 然后/ 随机/ 选出/ x/ %/ 的/ 变异/ 程序运行/ ./ Mathur/ 和/ Wong/ 的/ 研究/ [/ 23/ ]/ 指出/ ,/ 测试/ 时/ 使用/ 10/ %/ 的/ 抽样/ 率/ 已经/ 能/ 得到/ 和/ 使用/ 全部/ 变异/ 程序/ 接近/ 的/ 结果/ ./ 初步/ 的/ 实验/ 也/ 表明/ ,/ 此/ 结论/ 对于/ 程序调试/ 同样/ 有效/ ;/ 并且/ 基于/ 选择/ 变异/ 技术/ [/ 25/ ]/ ,/ 仅/ 使用/ 全部/ 变异/ 算子/ 的/ 一个/ 有效/ 子集/ ,/ 实验/ 结果/ 比/ 使用/ 全部/ 变异/ 算子/ 的/ 结果/ 略差/ ,/ 我们/ 发现/ 这是/ 由于/ 对于/ 部分/ 错误/ 语句/ 无法/ 生成/ 对应/ 的/ 变异/ 程序/ ./ 因此/ ,/ Muffler/ 中/ 对/ 每个/ 可/ 执行/ 语句/ 应用/ 所有/ 变异/ 算子/ ,/ 随机/ 选出/ m/ =/ 5/ 个/ (/ 抽样/ 率/ 约等于/ 10/ %/ )/ 变异/ 程序/ 进行/ 实验/ ./ 4Muffler/ 系统/ 的/ 实验/ 评估/ 本/ 节/ 报告/ Muffler/ 与/ CBFL/ 技术/ 的/ 4/ 个/ 代表/ (/ Tarantula/ [/ 2/ ]/ 、/ Ochiai/ [/ 3/ ]/ 、/ χ/ Debug/ [/ 4/ ]/ 和/ Naish/ [/ 17/ ]/ )/ 的/ 实验/ 比较/ 结果/ ./ 这里/ 首先/ 给出/ 用于/ 实验/ 的/ 目标程序/ 和/ 实验/ 环境/ ,/ 然后/ 给出/ 实验/ 结果/ 及/ 相应/ 的/ 分析/ ,/ 并/ 讨论/ 了/ Muffler/ 系统/ 的/ 时间/ 效率/ ,/ 最后/ 给出/ 在/ 一个/ 实际/ 应用程序/ 和/ 真实/ 错误/ 上/ 对/ Muffler/ 系统/ 的/ 实用性/ 和/ 准确性/ 所/ 做/ 的/ 进一步/ 验证/ ./ 4.1/ 实验/ 目标程序/ 与/ 实验/ 环境/ 我们/ 使用/ Siemens/ 程序/ 集/ 的/ 7/ 个/ 程序/ ,/ 分别/ 是/ tcas/ ,/ tot/ _/ info/ ,/ schedule/ ,/ schedule2/ ,/ print/ _/ tokens/ ,/ print/ _/ tokens2/ 和/ replace/ ./ 同时/ 还/ 使用/ 真实/ 的/ 程序/ space/ 观察/ Muffler/ 方法/ 在/ 真实/ 错误/ 上/ 的/ 有效性/ ./ 之前/ 的/ 错误/ 定位/ 研究/ [/ 5/ ,/ 7/ ,/ 22/ ,/ 26/ -/ 27/ ]/ 也/ 使用/ 这些/ 程序/ 进行/ 实验/ 比较/ 与/ 分析/ ./ 所有/ 程序/ 及其/ 错误/ 版本/ 均/ 从/ 软件/ 基础设施/ 库/ 的/ 网站/ [/ 28/ ]/ 下载/ ./ 表/ 1/ 列出/ 了/ 这些/ 程序/ 的/ 基本/ 情况/ ./ 程序/ 集/ 版本/ 数可/ 执行/ 语句/ 数/ 测试用例/ 数/ LOCtcas4163/ ~/ 671608133/ ~/ 137tot/ _/ info23122/ ~/ 1231052272/ ~/ 273schedule9149/ ~/ 1522650290/ ~/ 294schedule210127/ ~/ 1292710261/ ~/ 263print/ _/ tokens7189/ ~/ 1904130341/ ~/ 343print/ _/ tokens210199/ ~/ 2004115350/ ~/ 355replace32240/ ~/ 2455542508/ ~/ 515space383633/ ~/ 3647135855882/ ~/ 5904Page6Siemens/ 程序/ 集/ 总共/ 包含/ 132/ 个/ 错误/ 程序/ 版本/ ,/ 但/ 我们/ 排除/ 了/ 其中/ 9/ 个/ 版本/ :/ 程序/ replace/ 的/ 版本/ v27/ 和/ 程序/ schedule2/ 的/ 版本/ v9/ 因为/ 没有/ 失败/ 测试用例/ 而/ 被/ 排除/ ;/ 程序/ schedule/ 的/ 版本/ v1/ 、/ v5/ 、/ v6/ 和/ v9/ ,/ 程序/ print/ _/ tokens2/ 的/ 版本/ v10/ ,/ 程序/ replace/ 的/ 版本/ v19/ 和/ v27/ 因为/ 失败/ 用例/ 发生/ 了/ 段/ 错误/ (/ SegmentationFault/ )/ 未能/ 收集/ 到/ 完整/ 的/ 覆盖/ 信息/ 而/ 被/ 排除/ ./ 最终/ 我们/ 使用/ 123/ 个/ 错误/ 版本/ 进行/ 实验/ ./ 对于/ 变异/ 程序运行/ 测试用例/ 时/ 发生/ 的/ 段/ 错误/ ,/ 我们/ 将/ 该/ 测试用例/ 标记/ 为/ 失败/ ./ 我们/ 的/ 实验/ 环境/ 是/ 一台/ 配置/ 2.93/ GHzIntelCorei3CPU/ 和/ 4GB/ 物理/ 内存/ 的/ 计算机/ ;/ 操作系统/ 是/ Ubuntu10/ ./ 04.2/ LTS/ ,/ 使用/ 2.6/ ./ 32/ -/ 29/ -/ generic/ 版本/ 的/ Linux/ 内核/ ./ 我们/ 使用/ Python2/ ./ 6.5/ 编写/ Muffler/ 系统/ 的/ 核心/ 代码/ ,/ 调用/ gcc4/ ./ 4.3/ 和/ gcov4/ ./ 4.3/ 编译程序/ 和/ 收集/ 覆盖/ 信息/ ./ 我们/ 利用/ Proteum/ [/ 29/ ]/ 提供/ 的/ 所有/ 变异/ 算子/ 生成/ 变异/ 程序/ 并/ 使用/ 变异/ 程序/ 抽样/ 技术/ 筛选/ 出/ m/ =/ 5/ 个/ 变异/ 程序/ 作为/ 代表/ ./ 4.2/ 实验/ 结果/ 与/ 分析/ Naish/ 等/ 人/ 观察/ 到/ Naish/ 公式/ 在/ 现有/ 的/ CBFL/ 疑似/ 度/ 计算公式/ 中/ 最为/ 有效/ [/ 17/ ]/ ./ 为/ 简化/ 本文/ ,/ 我们/ 仅/ 比较/ Muffler/ 和/ 近期/ 引用/ 较多且/ 最为/ 有效/ 的/ 4/ 种/ 方法/ :/ Tarantula/ 、/ Ochiai/ 、/ χ/ Debug/ 和/ Naish/ ./ 图/ 3/ 给出/ 了/ Muffler/ 和/ 这些/ CBFL/ 技术/ 的/ 全面/ 比较/ ./ 图/ 3/ 描述/ 了/ 在/ 123/ 个/ 错误/ 版本/ 中/ ,/ 有/ 多少/ 比例/ 的/ 错误/ 版本/ 可/ 在/ 检查/ 低于/ 某个/ 比例/ 的/ 代码/ 后/ 即/ 检查/ 到/ 程序/ 错误/ ./ 纵坐标/ 是/ 错误/ 版本/ 的/ 比例/ ,/ 横坐标/ 是/ 按/ 错误/ 疑似/ 度/ 从/ 高/ 至/ 低/ 检查/ 语句/ 的/ 比例/ ./ 从图/ 3/ 可/ 看到/ ,/ 检查/ 1/ %/ 的/ 语句/ ,/ Naish/ 技术/ 可/ 找到/ 17.07/ %/ 程序/ 版本/ 的/ 错误/ ,/ 而/ Muffler/ 技术/ 可/ 找到/ 28.46/ %/ 程序/ 版本/ 的/ 错误/ ;/ 当/ 检查/ 的/ 语句/ 数/ 增至/ 5/ %/ 时/ ,/ Naish/ 技术/ 可/ 找到/ 47.15/ %/ 程序/ 版本/ 的/ 错误/ ,/ 而/ Muffler/ 技术/ 可/ 找到/ 60.16/ %/ 程序/ 版本/ 的/ 错误/ ./ 总览/ 图/ 3/ 中/ 全部/ [/ 0/ %/ ,/ 100/ %/ ]/ 的/ 代码/ 检查/ 区域/ ,/ 可/ 看到/ ,/ Muffler/ 总比/ Naish/ 能/ 定位/ 到/ 更/ 多/ 错误/ ,/ 并且/ 在/ 超过/ 60/ %/ 语句/ 被/ 检查/ 前/ ,/ 定位/ 到/ 所有/ 错误/ ./ 表/ 2/ 给出/ 了/ 在/ 某个/ 代码/ 检查/ 比例/ 下/ ,/ 各/ 技术/ 能/ 定位/ 到/ 的/ 错误/ 数/ ./ 例如/ 对于/ Muffler/ 系统/ ,/ 检查/ 不/ 多于/ 1/ %/ 的/ 代码/ ,/ 可/ 找到/ 35/ 个/ 错误/ 版本/ 的/ 错误/ ./ 表/ 2/ 各/ 技术/ 在/ 给定/ 代码/ 检查/ 比例/ 时/ 可/ 定位/ 的/ 错误/ 数/ 代码/ 检查/ 比/ // %/ TarantulaOchiai/ χ/ DebugNaishMuffler1141819213553848565874105463686885155765808094206067848499307988919211040929898991175098991011021216099103105106123701011071171191238011412212212312390123123122123123100123123123123123/ 从表/ 2/ 和/ 图/ 3/ 可/ 看出/ ,/ Muffler/ 方法/ 结合/ 了/ 覆盖/ 信息/ 和/ 变异/ 影响/ 两种/ 信息/ 的/ 优势/ ,/ 在/ 每个/ 代码/ 检查/ 量/ 下/ ,/ 都/ 比/ 现有/ 的/ 错误/ 定位/ 技术/ 能/ 更/ 准确/ 和/ 有效/ 地/ 定位/ 错误/ ./ 表/ 3/ 进一步/ 概括/ 了/ 各/ 技术/ 有效性/ 统计数据/ ./ 以/ Muffler/ 为例/ ,/ 在/ 找到/ 错误/ 前/ ,/ 程序员/ 最少/ 需要/ 检查/ 0/ %/ 的/ 程序/ 语句/ ,/ 最/ 多/ 需要/ 检查/ 55.38/ %/ 的/ 程序/ 语句/ ;/ 检查/ 语句/ 比例/ 的/ 中位数/ 和/ 平均值/ 分别/ 为/ 3.25/ %/ 和/ 9.62/ %/ ,/ 标准差/ 为/ 13.22/ %/ ./ Min0/ ./ 000.000/ ./ 000.000/ ./ 00Max87/ ./ 8984.2593/ ./ 8578.4655/ ./ 38Median20/ ./ 339.527/ ./ 697.323/ ./ 25Mean27/ ./ 6823.6220/ ./ 0419.349/ ./ 62Stdev28/ ./ 2926.3624/ ./ 6123.8613/ ./ 22/ 从表/ 3/ 可/ 看到/ ,/ 在/ 5/ 种/ 技术/ 中/ ,/ Muffler/ 总能/ 在/ 语句/ 检查/ 比例/ 的/ 最小值/ (/ Min/ )/ 、/ 最大值/ (/ Max/ )/ 、/ 中位数/ (/ Median/ )/ 和/ 平均数/ (/ Mean/ )/ 上/ 有/ 最好/ 的/ 结果/ ,/ 且/ Muffler/ 有/ 更/ 低/ 的/ 标准差/ (/ Stdev/ )/ ,/ 这/ 意味着/ 此/ 技术/ 的/ 表现/ 将会/ 更加/ 稳定/ ./ 总的来说/ ,/ Muffler/ 技术/ 相比/ 现有/ 最好/ 的/ Naish/ 技术/ 平均/ 减少/ 50.26/ %/ (/ =/ 100/ %/ -/ (/ 9.62/ %/ // 19.34/ %/ )/ )/ 的/ 代码/ 检查/ 量/ ./ 注意/ 到/ MufflerPage7/ 技术/ 和/ Naish/ 技术/ 的/ 唯一/ 区别/ 在于/ Muffler/ 技术/ 额外/ 考虑/ 了/ 变异/ 影响/ 这一/ 因素/ ,/ 因此/ 实验/ 结果/ 明确/ 地/ 支持/ 了/ 我们/ 的/ 结论/ ,/ 即/ 使用/ 变异/ 影响/ 修正/ CBFL/ 技术/ 的/ 结果/ 可以/ 提高/ 错误/ 定位/ 的/ 准确率/ ./ 4.3/ Muffler/ 系统/ 的/ 时间/ 效率/ 分析/ 上述/ 实验/ 说明/ 通过/ 结合/ 程序/ 覆盖/ 信息/ 和/ 变异/ 影响/ ,/ Muffler/ 技术/ 能比/ 现有/ CBFL/ 技术/ 更/ 有效/ 地/ 定位/ 错误/ ./ 但/ 同时/ Muffler/ 也/ 带来/ 额外/ 的/ 时间/ 开销/ ,/ 因为/ 它/ 需要/ 在/ 测试用例/ 集上/ 运行/ 大量/ 变异/ 程序/ 以/ 收集/ 语句/ 的/ 变异/ 影响/ ./ 若/ 程序/ 包含/ w/ 个/ 可/ 执行/ 语句/ ,/ 变异/ 每个/ 语句/ 产生/ m/ 个/ 变异/ 程序/ ,/ 对应/ 的/ 测试/ 集/ 包含/ n/ 个/ 测试用例/ ,/ 则/ 总共/ 可能/ 需要/ 运行/ n/ +/ w/ ×/ m/ ×/ n/ 次/ 程序/ ./ 我们/ 通过/ 控制/ 被/ 变异/ 语句/ 的/ 数目/ (/ 减少/ w/ )/ 和/ 变异/ 程序/ 抽样/ (/ 减少/ m/ )/ 来/ 降低/ Muffler/ 方法/ 的/ 时间/ 开销/ ./ 在/ 实际/ 应用/ 中/ ,/ 用户/ 可以/ 调节/ 这/ 两个/ 参数/ 在/ 准确率/ 和/ 时间/ 开销/ 之间/ 做出/ 权衡/ ./ 表/ 4/ 给出/ 了/ Muffler/ 技术/ 和/ CBFL/ 技术/ 在/ 每个/ 目标程序/ 上/ 的/ 平均/ 时间/ 开销/ ./ 其中/ 统计/ 的/ 时间/ 主要/ 包含/ 了/ 嵌入/ 监控/ 代码/ 、/ 执行/ 测试用例/ 和/ 收集/ 覆盖/ 信息/ 的/ 时间/ 开销/ ./ 可/ 看到/ ,/ 相对/ 于/ CBFL/ 技术/ ,/ Muffler/ 平均/ 需要/ 花费/ 近/ 62.59/ 倍/ 的/ 时间/ ./ 表/ 4CBFL/ 和/ Muffler/ 在/ 每个/ 目标程序/ 上/ 的/ 时间/ 开销/ 目标程序/ tot/ _/ infoscheduleschedule2print/ _/ tokensprint/ _/ tokens2replaceAverage/ 表/ 5/ 给出/ 了/ Muffler/ 在/ 时间/ 开销/ 方面/ 更/ 详细/ 的/ 信息/ ,/ 包括/ 被/ 变异/ 的/ 可/ 执行/ 语句/ 数/ 、/ 总共/ 的/ 可/ 执行/ 语句/ 数/ 、/ 生成/ 的/ 变异/ 程序/ 数/ 和/ 在/ 测试用例/ 集上/ 执行/ 每个/ 变异/ 程序/ 的/ 时间/ 开销/ ./ 例如/ 程序/ tcas/ 每个/ 错误/ 版本/ ,/ 平均/ 有/ 40.15/ 个/ 可/ 执行/ 语句/ 被/ Muffler/ 变异/ ,/ 平均/ 每个/ 错误/ 版本/ 有/ 65.10/ 可/ 执行/ 语句/ ,/ 平均/ 生成/ 了/ 199.90/ 个/ 变异/ 程序/ ,/ 在/ 测试用例/ 集上/ 运行/ 每个/ 变异/ 程序/ 需要/ 4.26/ s/ ./ 目标程序/ 变异/ 语句/ 数/ 语句/ 总数/ 变异/ 程序/ 数/ 运行/ 时间/ // stcas40/ ./ 1565.10199/ ./ 904.26/ tot/ _/ info39/ ./ 57122.96191/ ./ 872.92/ schedule80/ ./ 60150.20351/ ./ 607.59/ schedule275/ ./ 33127.56327/ ./ 785.32/ print/ _/ tokens67/ ./ 43189.86260/ ./ 299.49/ print/ _/ tokens286/ ./ 67199.44398/ ./ 6712.54/ replace71/ ./ 14242.86305/ ./ 9313.30/ Average56/ ./ 52142.79256/ ./ 907.92/ 可以/ 看到/ ,/ 即使/ 在/ 采用/ 了/ 变异/ 语句/ 数量/ 控制/ 和/ 变异/ 程序/ 抽样/ 这/ 两个/ 策略/ 后/ ,/ Muffler/ 系统/ 仍然/ 需要/ 比较/ 多/ 的/ 时间/ 开销/ ./ 作为/ 提高/ 错误/ 定位/ 效率/ 的/ 代价/ ,/ 这些/ 时间/ 开销/ 主要/ 花费/ 在/ 执行/ 变异/ 程序/ 上/ ./ 作为/ 一个/ 未来/ 的/ 研究/ 方向/ ,/ 我们/ 会/ 尝试/ 引入/ 一些/ 更进一步/ 的/ 策略/ 提高/ 系统/ 的/ 时间/ 效率/ ,/ 例如/ 忽略/ 变异/ 前未/ 覆盖/ 待/ 变异/ 语句/ 的/ 测试用例/ 以及/ 并行/ 化/ 执行/ 变异/ 程序/ 等/ ./ 4.4/ Muffler/ 系统/ 有效性/ 在/ 真实/ 错误/ 上/ 的/ 验证/ 我们/ 进一步/ 利用/ 真实世界/ 中/ 的/ space/ 程序验证/ Muffler/ 技术/ 的/ 有效性/ ./ 表/ 2/ 也/ 给出/ 了/ space/ 程序/ 的/ 基本/ 信息/ ./ space/ 程序/ 提供/ 了/ 1000/ 个/ 测试用例/ 集/ ,/ 每个/ 测试用例/ 集/ 包含/ 约/ 150/ 个/ 测试用例/ ./ 我们/ 随机/ 选择/ 了/ 一个/ 包含/ 153/ 个/ 测试用例/ 的/ 测试用例/ 集/ ,/ 并/ 选择/ 了/ 10/ 个/ 错误/ 程序/ 版本/ ,/ 代表/ 不同/ 的/ 偶然性/ 成功/ 测试用例/ 比例/ ,/ 以/ 模拟/ 真实/ 的/ 程序调试/ 环境/ ./ 表/ 6/ 给出/ 了/ 不同/ 偶然性/ 成功/ 测试用例/ 比例/ 的/ 错误/ 版本/ 的/ 结果/ ./ 此表/ 的/ “/ CC/ %/ ”/ 列/ 表示/ 偶然性/ 成功/ 的/ 测试用例/ 占/ 总/ 的/ 成功/ 测试用例/ 的/ 比例/ ./ “/ 代码/ 检查/ 行/ 数/ ”/ 表示/ 在/ 遇到/ 错误/ 前/ 需要/ 检查/ 的/ 代码/ 行/ 数/ ,/ 分别/ 列出/ 了/ Naish/ 和/ Muffler/ 两种/ 方法/ 的/ 结果/ ./ 例如/ ,/ 版本/ “/ v6/ ”/ 的/ 成功/ 测试用例/ 中有/ 6.92/ %/ 的/ 偶然性/ 成功/ 测试用例/ ,/ 在/ 遇到/ 错误/ 语句/ 前/ ,/ Naish/ 技术/ 需要/ 检查/ 40/ 条/ 语句/ ,/ 而/ Muffler/ 技术/ 仅/ 需/ 检查/ 7/ 条/ 语句/ ,/ 代码/ 检查/ 代价/ 减少/ 量/ 为/ 82.5/ %/ =/ 100/ %/ -/ (/ 7/ // 40/ )/ ./ 错误/ 版本/ CC/ // %/ v5v20v21v10v11v6v9v1730/ ./ 92v2848/ ./ 57v2999/ ./ 32/ 从/ 真实/ 错误/ 上/ 的/ 结果/ 可/ 看到/ ,/ 相比/ Naish/ 技术/ ,/ Muffler/ 总是/ 检查/ 较少/ 的/ 代码/ 就/ 可以/ 查/ 到/ 程序/ 的/ 错误/ ./ 同时/ 也/ 可/ 看到/ 即使/ Naish/ 技术/ 已经/ 取得/ 了/ 不错/ 的/ 效果/ 时/ ,/ 即/ 检查/ 语句/ 数/ 低于/ 50/ 时/ ,/ Muffler/ 可以/ 把/ 检查/ 语句/ 数目/ 进一步/ 降低/ 到/ 更/ 符合实际/ 调试/ 的/ 级别/ ,/ 即/ 检查/ 少于/ 10/ 行/ 或者/ 20/ 行/ 语句/ ./ 且/ 当/ 偶然性/ 成功/ 比例/ 较/ 高时/ ,/ 检查/ 代码/ 的/ 减少/ 量/ 更加/ 显著/ ,/ 这/ 说明/ 程序/ 变异/ 分析/ 对于/ 降低/ 偶然性/ 成功/ 测试用例/ 的/ 负面/ Page8/ 影响/ 确实/ 有/ 显著/ 作用/ ./ 5/ 结论/ 与/ 展望/ 基于/ 代码/ 覆盖/ 信息/ 的/ 错误/ 定位/ 技术/ (/ CBFL/ )/ 分析/ 成功/ 和/ 失败/ 测试用例/ 的/ 覆盖/ 信息/ 以/ 辅助/ 程序员/ 定位/ 错误代码/ ./ 在/ 实际/ 环境/ 中/ 常见/ 的/ 偶然性/ 成功/ 测试用例/ 会/ 显著/ 降低/ CBFL/ 技术/ 的/ 准确率/ ./ 本文/ 提出/ 了/ 一种/ 结合/ 程序/ 变异/ 分析/ 和/ 覆盖/ 信息/ 的/ 错误/ 定位/ 方法/ 来/ 解决/ 这个/ 问题/ ./ 此/ 方法/ 避开/ 了/ 之前/ 方法/ 的/ 各种/ 局限性/ ,/ 如/ 需要/ 程序员/ 了解/ 程序/ 中/ 的/ 错误/ 类型/ 等/ ,/ 因此/ 具有/ 更/ 广泛/ 的/ 应用/ ./ 我们/ 实现/ 了/ 一个/ 原型/ 错误/ 定位系统/ Muffler/ ,/ 在/ 7/ 个/ 程序/ 的/ 123/ 个/ 错误/ 版本/ 上将/ Muffler/ 技术/ 和/ 现有/ 的/ 4/ 个/ 代表性/ CBFL/ 技术/ 进行/ 了/ 比较/ ./ 结果显示/ ,/ Muffler/ 技术/ 显著/ 减少/ 了/ 定位/ 到/ 程序/ 错误/ 的/ 平均/ 代码/ 检查/ 量/ ./ 实际/ 环境/ 中/ space/ 程序/ 的/ 真实/ 错误/ 也/ 进一步/ 验证/ 了/ Muffler/ 的/ 有效性/ ./ 在/ 未来/ 工作/ 中/ ,/ 我们/ 计划/ 将/ 本文/ 方法/ 推广/ 到/ 多个/ 程序/ 错误/ 的/ 定位/ ,/ 并/ 考察/ 不同/ 变异/ 算子/ 对于/ 错误/ 定位/ 是否/ 有/ 不同/ 影响/ ,/ 研究/ 如何/ 减少/ 变异/ 语句/ 与/ 变异/ 程序/ 数以/ 进一步提高/ Muffler/ 的/ 效率/ ./ 

