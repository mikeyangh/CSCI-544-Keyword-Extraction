Page1/ 基于/ 分布式/ 数据流/ 的/ 大/ 数据/ 分类/ 模型/ 和/ 算法/ 毛/ 国君/ 胡/ 殿军/ 谢松燕/ (/ 中央财经/ 大学/ 信息/ 学院/ 北京/ 100086/ )/ 摘要/ 大/ 数据/ 是/ 需求/ 驱动/ 的/ 概念/ ./ 随着/ 数据库系统/ 的/ 普及/ 和/ 因特网/ 服务/ 的/ 扩张/ ,/ 企业/ 或者/ 个人/ 可用/ 的/ 数据/ 正在/ 膨胀/ ,/ 已有/ 的/ 技术/ 很难/ 满足/ 大/ 数据/ 时代/ 的/ 数据分析/ 需求/ ,/ 因此/ 需要/ 探索/ 新/ 的/ 理论/ 和/ 方法/ 来/ 支撑/ 大/ 数据/ 的/ 应用/ ./ 虽然/ 大/ 数据/ 的/ 4V/ 属性/ 已经/ 被/ 广泛/ 讨论/ ,/ 但是/ 它们/ 大多/ 描述/ 的/ 仍然/ 是/ 大/ 数据/ 的/ 表象/ ,/ 所以/ 很难/ 从中/ 抽象/ 出/ 统一/ 的/ 数据格式/ ,/ 因而/ 进一步/ 寻找/ 可/ 用于/ 数据/ 格式化/ 的/ 技术/ 特征/ 是/ 必要/ 的/ ./ 面向/ 于/ 以/ 分布式/ 和/ 流动性/ 为/ 主要/ 技术/ 特征/ 的/ 大/ 数据/ 应用/ 需求/ ,/ 文中/ 以/ 分布式/ 数据流/ 为/ 数据/ 表达/ 载体/ ,/ 在/ 此基础/ 上/ 设计/ 对应/ 的/ 大/ 数据/ 分类/ 模型/ 和/ 挖掘/ 算子/ ./ 同时/ 针对/ 大/ 数据/ 的/ 分类/ 挖掘/ 需要/ 解决/ 的/ 关键问题/ 来/ 构建/ 关键步骤/ 对应/ 的/ 算法/ ./ 理论/ 上/ 证明/ 了/ 文中/ 给出/ 的/ 微簇/ 合并/ 技术/ 和/ 样本/ 数据/ 重构/ 方法/ 的/ 合理性/ ./ 实验/ 表明/ :/ 文中/ 提出/ 的/ 基于/ 分布式/ 数据流/ 的/ 大/ 数据/ 的/ 分类/ 模型/ 及/ 算法/ 不仅/ 能/ 大幅度/ 地/ 减少/ 网络/ 节点/ 间/ 的/ 通讯/ 代价/ ,/ 而且/ 可以/ 获得/ 平均/ 10/ %/ 左右/ 的/ 全局/ 挖掘/ 精度/ 的/ 提升/ (/ 对比/ 已有/ 的/ 典型/ 算法/ DS/ -/ means/ )/ ;/ 虽然/ 时间/ 花费/ 略高于/ DS/ -/ means/ ,/ 但是/ 两者/ 在/ 不同/ 的/ 数据/ 容量/ 测试/ 下/ 相差/ 很小/ 、/ 且/ 时间/ 攀升/ 趋势/ 相当/ ./ 关键词/ 大/ 数据/ ;/ 数据挖掘/ ;/ 分布式/ 数据流/ ;/ 微簇/ ;/ 集成/ 分类/ 1/ 引言/ 大/ 数据/ (/ bigdata/ )/ 概念/ 最早/ 是/ 在/ 20/ 世纪/ 80/ 年代/ 提出/ 的/ ,/ 来自/ 于/ 《/ Nature/ 》/ 2008/ 年/ 推出/ 的/ 大/ 数据/ 专刊/ ,/ 其/ 强大/ 的/ 应用/ 需求/ 使/ 之/ 成为/ 近年/ 研究/ 和/ 应用/ 的/ 焦点/ ./ 特别/ 是/ ,/ 大/ 数据/ 潜在/ 的/ 应用/ 前景/ 已经/ 被/ 许多/ 国家/ 的/ 政府/ 关注/ ,/ 国家/ 政府/ 成为/ 大/ 数据/ 技术/ 的/ 重要/ 推动者/ ./ 例如/ :/ 2012/ 年/ ,/ 美国政府/ 已经/ 联合/ 6/ 个/ 部门/ 宣布/ 了/ 2/ 亿美元/ 的/ “/ 大/ 数据/ 研究/ 与/ 发展/ 计划/ ”/ ;/ 2015/ 年/ 9/ 月/ ,/ 中国/ 国务院/ 也/ 印发/ 了/ “/ 促进/ 大/ 数据/ 发展/ 行动/ 纲要/ ”/ ./ 迄今为止/ ,/ 至少/ 有/ 35/ 个/ 国家/ 出台/ 了/ 相关/ 的/ 政策/ 或/ 文件/ 来/ 支持/ 大/ 数据/ 的/ 发展/ ./ 然而/ ,/ 虽然/ 大/ 数据/ 的/ 应用/ 价值/ 及/ 前景/ 已经/ 得到/ 国家/ 层面/ 、/ 学者/ 及/ 商界/ 的/ 广泛/ 认可/ ,/ 但是/ 大/ 数据/ 作为/ 新生事物/ ,/ 面对/ 的/ 技术/ 问题/ 仍然/ 很多/ ,/ 许多/ 的/ 理论/ 和/ 方法/ 也/ 亟待解决/ ,/ 研究/ 远远/ 落后/ 于/ 应用/ 的/ 需求/ ./ 从/ 研究/ 角度看/ ,/ 目前/ 出现/ 的/ 大/ 数据/ 概念/ 可以/ 大致/ 归纳/ 为/ 如下/ 几个/ 流派/ :/ (/ 1/ )/ 数据/ 论/ ./ 强调/ 大/ 数据/ 的/ 核心/ 是/ 超大规模/ 的/ 数据/ 集/ ./ 典型/ 观点/ 来自/ 于/ 麦肯锡/ 报告/ :/ “/ 大/ 数据/ 指/ 的/ 是/ 大小/ 超出/ 常规/ 的/ 数据库/ 工具/ 来/ 获取/ 、/ 存储/ 、/ 管理/ 和/ 分析/ 能力/ 的/ 数据/ 集/ [/ 1/ ]/ ”/ ;/ (/ 2/ )/ 方法论/ ./ 强调/ 大/ 数据/ 的/ 核心/ 是/ 寻找/ 新/ 的/ 分析方法/ ./ 典型/ 观点/ 来自/ 于/ 维克托/ 的/ 《/ 大/ 数据/ 时代/ 》/ 著作/ :/ “/ 大/ 数据/ 指/ 不用/ 随机/ 分析法/ (/ 抽样调查/ )/ 这样/ 的/ 捷径/ ,/ 而/ 采用/ 所有/ 数据处理/ 的/ 方法/ [/ 2/ ]/ ”/ ;/ (/ 3/ )/ 环境/ 论/ ./ 强调/ 大/ 数据/ 必须/ 结合/ 相应/ 的/ 应用领域/ 或者/ 应用环境/ 才/ 有/ 意义/ ./ 如/ 目前/ 广泛/ 讨论/ 的/ 社交/ 大/ 数据/ [/ 3/ ]/ 、/ 科学/ 大/ 数据/ [/ 4/ ]/ 等/ ;/ (/ 4/ )/ 特征/ 论/ ./ 强调/ 大/ 数据/ 应该/ 具有/ 独特/ 的/ 属性/ ./ 如/ 国际数据公司/ (/ IDC/ )/ 认为/ 大/ 数据/ 有/ 4/ 个/ 主要/ 特征/ ,/ 即/ 4V/ 属性/ [/ 5/ ]/ :/ 数据/ 规模/ 大/ (/ Volume/ )/ 、/ 数据/ 聚集/ 快/ (/ Velocity/ )/ 、/ 数据类型/ 多/ (/ Variety/ )/ 、/ 数据/ 价值/ 大/ (/ Value/ )/ ./ 这些/ 研究/ 从/ 不同/ 视角/ 解释/ 了/ 大/ 数据/ 概念/ 的/ 内涵/ 和/ 外延/ ./ 特别/ 是/ 4V/ 属性/ 集中/ 概括/ 了/ 它/ 的/ 主要/ 特征/ ./ 然而/ ,/ 不容/ 忽略/ 的/ 事实/ 是/ 目前/ 大/ 数据/ 仍/ 处于/ 概念/ 探索/ 的/ 初级/ 研究/ 阶段/ ,/ 特别/ 是/ 基础性/ 研究/ 远远/ 落后/ 于/ 大/ 数据/ 概念/ 的/ 应用/ ./ 我们/ 通过/ 中国/ 知网/ ,/ 使用/ “/ 大/ 数据/ ”/ 作为/ 关键词/ 能/ 检索/ 出/ 30/ 多万/ 篇文章/ ,/ 但是/ 在/ 限定/ 计算机/ 或者/ 自动化/ 相关/ 期刊/ 下/ ,/ 只有/ 6/ 万/ 多篇/ ./ 就是/ 这/ 1/ // 5/ 不到/ 的/ 文献/ 绝大多数/ 都/ 是/ 综述/ 类/ 的/ ,/ 专门/ 涉及/ 大/ 数据挖掘/ 的/ 基础理论/ 和/ 方法/ 的/ 文献/ 很少/ ./ 这种/ “/ 边/ 研究/ 边/ 应用/ ”/ 的/ 现状/ 应该/ 引起/ 计算机/ 及其/ 相关/ 学科/ 研究/ 人员/ 的/ 重视/ ,/ 当然/ 也/ 为/ 其/ 提供/ 了/ 广阔/ 的/ 研究/ 空间/ ./ 事实上/ ,/ 大/ 数据/ 的/ 4V/ 属性/ 给出/ 的/ 是/ 大/ 数据/ 的/ 表象/ 特征/ ,/ 很难/ 进行/ 形式化/ 研究/ ./ 因此/ ,/ 结合/ 应用/ 特点/ 找到/ 更/ 利于/ 形式化/ 抽象/ 的/ 技术/ 特征/ 可能/ 是/ 大/ 数据/ 技术/ 研究/ 的/ 一个/ 很/ 好/ 的/ 突破口/ ./ 例如/ ,/ 社交/ 大/ 数据/ 一般/ 是/ 指/ 来自/ 于/ 大型/ 网站/ 的/ 网页/ 数据/ ,/ 这样/ 的/ 数据/ 不像/ 数据库/ 中/ 数据表/ 那样/ 具有/ 单一/ 的/ 数据结构/ ,/ 而是/ 由/ 结构化/ 、/ 半/ 结构化/ 及/ 非/ 结构化/ 数据/ 混合/ 构成/ 的/ ,/ 因此/ 数据结构/ 的/ 多样性/ 可能/ 成为/ 社交/ 大/ 数据/ 的/ 主要/ 技术/ 特征/ 之一/ [/ 2/ ,/ 5/ ]/ ./ 再/ 如/ ,/ 许多/ 科学/ 大/ 数据/ 具有/ 很/ 高/ 维度/ 的/ 表达形式/ ,/ 表现/ 出/ 显著/ 的/ 高维/ 性/ 特征/ [/ 4/ ]/ ./ 类似/ 地/ ,/ 图像/ 、/ 声音/ 、/ 视频/ 等/ 多媒体/ 应用/ 产生/ 的/ 大/ 数据/ 也/ 是/ 典型/ 的/ 高维/ 数据/ ./ 还有/ ,/ 在/ 一个/ 网络/ 监控/ 系统/ 中/ 收集/ 的/ 网络流量/ (/ networktraffic/ )/ 大/ 数据/ ,/ 总是/ 随着/ 时间/ 在/ 不断/ 增长/ 的/ ,/ 而且/ 数据/ 隐藏/ 的/ 知识/ 模式/ 也/ 是/ 在/ 动态/ 流动/ 中/ 演化/ 的/ ,/ 所以/ 这类/ 大/ 数据/ 就/ 表现/ 出/ 典型/ 的/ 流式/ 数据/ 特征/ [/ 6/ ]/ ./ 类似/ 地/ ,/ 电子商务/ 网站/ 采集/ 的/ 交易/ 大/ 数据/ 也/ 是/ 典型/ 的/ 流式/ 数据/ ./ 这样/ ,/ 既然/ 从大/ 数据/ 的/ 4V/ 属性/ 出发/ 很难/ 进行/ 数据/ 的/ 抽象/ 表达/ ,/ 那么/ 根据/ 应用/ 特点/ 来/ 寻找/ 某类/ 大/ 数据/ 的/ 技术/ 特征/ 、/ 进而/ 进行/ 形式化/ 研究/ 就是/ 一条/ 可行/ 的/ 技术/ 路径/ ./ 以/ 著名/ 的/ 电子商务/ 网站/ eBay/ 为例/ [/ 1/ ]/ ./ 它/ 每天/ 要/ 处理/ TB/ 级/ 的/ 数据/ 流量/ ,/ 是/ 典型/ 的/ 大规模/ 数据/ ./ 支持/ 这种/ 大规模/ 数据处理/ 的/ 硬件/ 环境/ 则/ 是/ 几百台/ 的/ 数据/ 服务器/ ./ 硬件/ 的/ 分布/ 性/ 决定/ 了/ 数据/ 收集/ 是/ 分布式/ 的/ ./ 此外/ ,/ 每台/ 数据/ 服务器/ 上/ 处理/ 的/ 数据/ 都/ 是/ 按照/ 交易/ 时间/ 来/ 收集/ 的/ ,/ 所以/ 大/ 数据/ 的/ 快速/ 集聚/ 属性/ 对应/ 着/ 技术/ 上/ 的/ 数据/ 流动性/ ./ 同时/ ,/ 如果/ 我们/ 只/ 关心/ 交易/ 数据/ 的话/ ,/ 那么/ 这类/ 大/ 数据/ 的/ 数据结构/ 是/ 规范/ 而/ 简单/ 的/ ./ 所以/ ,/ 像/ eBay/ 这样/ 的/ 电子商务/ 网站/ 上/ 收集/ 的/ 大/ 数据/ 的/ 主要/ 技术/ 特征/ 就/ 可以/ 归纳/ 为/ 分布/ 性/ 和/ 流动性/ ,/ 因而/ 我们/ 可以/ 针对/ 分布式/ 和/ 流动性/ 为/ 技术/ 特征/ 的/ 大/ 数据/ 来/ 进行/ 相关/ 的/ 挖掘/ 方法/ 研究/ ,/ 且/ 具有/ 很/ 好/ 的/ 理论/ 和/ 应用/ 价值/ ./ 从/ 概念/ 演化/ 角度/ 上/ 说/ ,/ 本文/ 关注/ 的/ 这类/ 大/ 数据/ 是/ 目前/ 已经/ 出现/ 的/ “/ 流式/ 大/ 数据/ ”/ [/ 6/ ]/ 及/ “/ 分布式/ 大/ 数据/ ”/ [/ 7/ ]/ 等/ 概念/ 的/ 自然/ 延伸/ ./ 从/ 应用/ 价值/ 上/ 说/ ,/ 抽象/ 出/ 的/ 分布式/ 和/ 流动性/ 的/ 技术/ 特征/ 在/ 许多/ 大/ 数据/ 的/ 应用环境/ 中/ 存在/ ./ 除了/ 上面/ 提到/ 的/ 电子商务/ 网站/ 的/ 交易/ 大/ 数据/ 外/ ,/ 分布式/ 和/ 流动性/ 的/ 大/ 数据/ 环境/ 也/ 可能/ 发生/ 在/ 网络流量/ 监控/ 、/ 传感器/ 网络/ 以及/ 股票交易/ 、/ 银行业务/ 、/ 商品销售/ 等/ 交易系统/ 中/ ./ 本文/ 重点/ 聚焦/ 在/ 具有/ 典型/ 的/ 分布式/ 和/ 流动性/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 分类/ 挖掘/ 问题/ 上/ ./ 相比/ 传统/ 的/ 分类/ 挖掘/ 技术/ ,/ 这类/ 大/ 数据/ 的/ 分类/ 挖掘/ 隐含/ 着/ 许多/ 挑/ Page3/ 战性/ 的/ 问题/ ./ 首先/ ,/ 传统/ 的/ 分类/ 挖掘/ 方法/ 以/ 单一/ 学习/ 样本/ 集/ 为/ 基础/ ,/ 而/ 大/ 数据/ 的/ 分布式/ 收集/ 特性/ 决定/ 分类/ 学习/ 需要/ 分布式/ 进行/ ,/ 因而/ 对应/ 的/ 分布式/ 学习策略/ 和/ 方法/ 需要/ 研究/ ;/ 其次/ ,/ 动态/ 流动/ 的/ 流式/ 大/ 数据/ 和/ 传统/ 数据库/ 存储/ 的/ 静态数据/ 有/ 显著/ 的/ 不同/ ,/ 不/ 可能/ 一次性/ 将/ 所有/ 数据/ 存储/ 起来/ 再/ 进行/ 离线/ 式/ 的/ 挖掘/ ,/ 必须/ 探索/ 在线/ 实时/ 的/ 收集/ 技术/ 和/ 随/ 时间/ 变化/ 的/ 增量/ 式/ 的/ 挖掘/ 方法/ ;/ 最后/ ,/ 传统/ 的/ 分类/ 挖掘/ 技术/ 对/ 学习/ 样本/ 集/ 要求/ 较/ 高/ ,/ 而/ 分布式/ 、/ 流式/ 大/ 数据/ 的/ 分类/ 挖掘/ 需要/ 多/ 节点/ 、/ 多/ 步骤/ 协同/ 处理/ ,/ 很难/ 保证/ 学习/ 样本/ 集/ 的/ 纯度/ ,/ 所以/ 必须/ 针对/ 这类/ 大/ 数据/ 的/ 挖掘/ 特点/ 来/ 探索/ 鲁棒性/ 能/ 好/ 的/ 分类/ 技术/ ./ 因此/ ,/ 面向/ 于/ 这类/ 分布式/ 的/ 数据/ 收集/ 和/ 随/ 时间/ 的/ 数据流/ 式/ 聚集/ 的/ 大/ 数据/ 中/ 的/ 分类/ 挖掘/ 问题/ ,/ 需要/ 集成化/ 的/ 技术/ 和/ 创新性/ 的/ 理论/ 和/ 方法/ 来/ 解决/ ./ 大/ 数据/ 的/ 分类/ 挖掘/ 系统/ 是/ 一个多/ 步骤/ 协作/ 工作/ 的/ 系统/ ./ 既有/ 节点/ 级/ 的/ 局部/ 分析/ 处理/ 、/ 又/ 有/ 全局性/ 的/ 模式/ 发现/ ,/ 而且/ 不同/ 的/ 阶段/ 所/ 要/ 解决问题/ 的/ 侧重点/ 也/ 不同/ ./ 例如/ :/ 面对/ 潜在/ 的/ 快速/ 流动/ 、/ 随/ 时间/ 不断/ 集聚/ 的/ 流式/ 大/ 数据/ ,/ 局部/ 节点/ 处理/ 应该/ 更/ 强调/ 处理/ 的/ 实时性/ 和/ 高效性/ ./ 而/ 全局/ 的/ 分类/ 模式/ 挖掘/ 最/ 主要/ 的/ 任务/ 就是/ 构造/ 可以/ 全局/ 共享/ 的/ 分类器/ ,/ 所以/ 更/ 应该/ 注重/ 模式/ 的/ 预测/ 能力/ 和/ 抗干扰性/ 等/ ./ 因此/ ,/ 应该/ 根据/ 不同/ 的/ 挖掘/ 阶段/ 需求/ 来/ 研究/ 对应/ 的/ 理论/ 和/ 方法/ ,/ 形成/ 技术/ 集成化/ 、/ 方法/ 系统化/ 的/ 解决方案/ ./ 毋庸讳言/ ,/ 目前/ 在/ 大/ 数据/ 或者/ 分布式/ 数据流/ (/ distributeddatastream/ )/ 挖掘/ 研究/ 上/ 还是/ 以/ 单一/ 技术/ 为主/ (/ 如/ 单独/ 使用/ 基于/ 距离/ 的/ 分类/ 模型/ [/ 8/ ]/ 、/ 基于/ 频度/ 挖掘/ 的/ 方法/ [/ 9/ -/ 10/ ]/ )/ ,/ 对于/ 整体/ 的/ 解决/ 方法/ 研究/ 还/ 不够/ ./ 简言之/ ,/ 本文/ 将/ 重点/ 关注/ 具有/ 分布式/ 和/ 流动性/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 分类/ 挖掘/ 问题/ ,/ 针对/ 主要/ 阶段/ 的/ 技术/ 需求/ 来/ 探索/ 有效/ 的/ 解决/ 策略/ ,/ 通过/ 研究/ 对应/ 的/ 方法/ 、/ 并/ 集成/ 它们/ 形成/ 一个/ 系统化/ 的/ 解决/ 框架/ ./ 主要/ 工作/ 归纳/ 为/ :/ 借助于/ 分布式/ 数据流/ 的/ 数据/ 形态/ 来/ 刻画/ 这类/ 以/ 分布式/ 和/ 流动性/ 为/ 主要/ 技术/ 特征/ 的/ 大/ 数据/ ;/ 在/ 此基础/ 上/ 设计/ 一个/ 适合/ 于/ 这类/ 大/ 数据/ 的/ 分类/ 挖掘/ 模型/ ;/ 针对/ 模型/ 中/ 的/ 主要/ 挖掘/ 算子/ 进行/ 算法/ 设计/ ,/ 并/ 在/ 理论/ 和/ 实验/ 上/ 评估/ 这些/ 算法/ 的/ 有效性/ ./ 2/ 相关/ 工作/ 流式/ 大/ 数据/ 的/ 挖掘/ 已经/ 得到/ 广泛/ 关注/ ,/ 其中/ 作为/ 基础性/ 的/ 数据流/ 挖掘/ (/ datastreammining/ )/ 已经/ 成为/ 数据挖掘/ 研究/ 中/ 的/ 一个/ 活跃/ 分支/ ./ 数据流/ 挖掘/ 成果/ 最多/ 的/ 是/ 单数据流/ 挖掘/ 方法/ ,/ 其中/ 增量/ 式/ 挖掘/ 被/ 广泛/ 关注/ [/ 11/ ]/ ,/ 成为/ 动态/ 挖掘/ 随/ 时间/ 流动/ 的/ 流式/ 数据/ 的/ 有效/ 方法/ ./ 滑动/ 窗口/ (/ slidingwindow/ )/ 被/ 认为/ 是/ 解决/ 数据流/ 中/ 动态/ 知识/ 发现/ 问题/ 的/ 基本/ 技术/ 之一/ ,/ 它/ 使得/ 潜在/ 无限/ 数据流/ 中/ 的/ 知识/ 发现/ 问题/ 能够/ 通过/ 有限/ 容量/ 的/ 数据/ 窗口/ 的/ 叠加/ 处理/ 来/ 解决/ [/ 12/ -/ 13/ ]/ ./ 经过/ 十余年/ 的/ 研究/ ,/ (/ 单/ )/ 数据流/ 挖掘/ 已经/ 积累/ 了/ 许多/ 丰富/ 的/ 研究成果/ ,/ 它们/ 构成/ 了/ 本文/ 研究/ 工作/ 最/ 基本/ 的/ 理论/ 和/ 技术/ 基础/ ./ 为了/ 高效/ 地/ 解决/ 数据流/ 挖掘/ 问题/ ,/ 数据流/ 的/ 分布式/ 挖掘/ 研究/ 出现/ ./ 2007/ 年/ ,/ Parthasarathy/ 等/ 人/ [/ 14/ ]/ 给出/ 了/ 数据流/ 的/ 分布式/ 挖掘/ 需要/ 面对/ 的/ 主要/ 问题/ 及/ 对策/ ,/ 是/ 较/ 早/ 地/ 、/ 比较/ 全面/ 地/ 介绍/ 数据流/ 的/ 分布式/ 挖掘/ 技术/ 的/ 文献/ 之一/ ./ 他们/ 的/ 一个/ 重要/ 观点/ 是/ :/ 有效/ 地/ 利用/ 有限/ 的/ 计算机/ 处理/ 资源/ 来/ 解决/ 潜在/ 无限/ 数据/ 的/ 知识/ 发现/ 问题/ ,/ 必须/ 寻找/ 到/ 一个/ 代价/ 与/ 精度/ 平衡/ 的/ 分布式/ (/ 而/ 不是/ 集中式/ )/ 解决方案/ ./ Bhaduri/ 等/ 人/ [/ 15/ ]/ 则/ 从/ 性能/ 优化/ 的/ 角度/ 说明/ 了/ 数据流/ 的/ 分布式/ 挖掘/ 需要/ 综合/ 考虑/ 分布式计算/ 、/ 内存/ 缓冲/ 及/ 节点/ 交互/ 代价/ 等/ 问题/ ./ 他们/ 也/ 设计/ 了/ 一个/ 层次/ 式/ 的/ 数据流/ 的/ 挖掘/ 构架/ ,/ 即/ 挖掘/ 系统/ 有/ 若干/ 局部/ 节点/ 和/ 1/ 个/ 中心/ 节点/ 构成/ ,/ 通过/ 局部/ 节点/ 的/ 并行/ 挖掘/ 形成/ 初级/ 模式/ 、/ 中心/ 节点/ 再/ 生成/ 全局性/ 的/ 知识/ 模式/ ./ 这些/ 研究/ ,/ 特别/ 是/ 代价/ 与/ 精度/ 平衡/ 的/ 挖掘/ 思想/ ,/ 也/ 是/ 本文/ 挖掘/ 模型/ 设计/ 时/ 需要/ 重点/ 考虑/ 的/ 问题/ ./ 当然/ ,/ 数据流/ 的/ 分布式/ 挖掘/ 关注/ 的/ 主要/ 还是/ 如何/ 利用/ 分布式/ 并行/ 技术/ 来/ 解决/ 大容量/ 的/ (/ 单/ )/ 数据流/ 的/ 知识/ 发现/ 问题/ ./ 事实上/ ,/ 随着/ 基于/ 网络/ 的/ 计算机/ 应用/ 系统/ 的/ 普及/ 和/ 壮大/ ,/ 多/ 节点/ 独立/ 数据/ 集聚/ 但/ 逻辑/ 上/ 关联/ 的/ 多数据流/ 成为/ 另/ 一/ 重要/ 的/ 数据/ 形态/ ,/ 即/ 分布式/ 数据流/ ./ 诚然/ ,/ 目前/ 关于/ 分布式/ 数据流/ 挖掘/ 的/ 大多数/ 文献/ 还/ 主要/ 集中/ 在/ 关键/ 科学/ 问题/ 及/ 解决/ 对策/ 的/ 研究/ 上/ ,/ 但是/ 随着/ 科学/ 问题/ 越来越/ 清晰/ ,/ 近年/ 也/ 出现/ 了/ 一些/ 相关/ 的/ 挖掘/ 构架/ 及/ 方法/ 的/ 讨论/ ./ 2012/ 年/ ,/ Guerrieri/ 等/ 人/ [/ 8/ ]/ 提出/ 了/ 一个/ 分布式/ 数据流/ 的/ 挖掘/ 算法/ DS/ -/ means/ ./ 它/ 的/ 挖掘/ 工作/ 分成/ 局部/ 聚类/ 、/ 模式/ 传输/ 和/ 全局/ 聚类/ 等/ 3/ 个/ 关键步骤/ ,/ 是/ 典型/ 的/ 层次/ 式/ 的/ 分布式/ 数据流/ 挖掘/ 构架/ ./ 在/ DS/ -/ means/ 的/ 局部/ 及/ 全局/ 聚类/ 中/ 都/ 使用/ 了/ 典型/ 的/ 无/ 监督/ 学习/ 算法/ k/ -/ means/ ./ 但是/ ,/ 为了/ 适应/ 不同/ 节点/ 、/ 不同/ 时间段/ 上/ 不同/ 数据流/ 的/ 容量/ 波动/ 情况/ ,/ 在/ 全局/ 节点/ 聚类/ 之前/ 先/ 根据/ 局部/ 节点/ 的/ 聚类/ 结果/ 来/ 动态/ 地/ 调整/ 全局/ 类簇/ 的/ 数目/ ./ 2014/ 年/ ,/ Anceaume/ 等/ 人/ [/ 16/ ]/ 设计/ 了/ 多数据流/ 的/ 分布式/ 数据/ 评估/ 算法/ AnKLe/ ,/ 很/ 好地解决/ 了/ 多/ 节点/ 并行/ Page4/ 检测/ 数据分布/ 变化/ 的/ 问题/ ./ 2014/ 年/ ,/ Cesario/ 等/ 人/ [/ 9/ ]/ 则/ 面向/ 于/ 分布式/ 数据流/ 的/ 频繁/ 项目/ 集/ 挖掘/ 问题/ 构建/ 了/ 一个/ 分布式/ 多/ 节点/ 的/ 挖掘/ 构架/ ,/ 并/ 设计/ 了/ 对应/ 算法/ 来/ 实现/ 该/ 构架/ 的/ 关键/ 操作/ ./ 本文/ 工作/ 借鉴/ 了/ 这些/ 分布式/ 数据流/ 的/ 挖掘/ 构架/ 和/ 方法/ ./ 简言之/ ,/ 分布式/ 数据流/ 挖掘/ 是/ 数据挖掘/ 及其/ 数据流/ 挖掘/ 技术/ 研究/ 的/ 自然/ 延伸/ 和/ 发展/ ,/ 目前/ 的/ 研究/ 主要/ 以/ 算法/ 设计/ 为主/ ./ 然而/ ,/ 面对/ 日益增长/ 的/ 大/ 数据/ 需求/ ,/ 系统化/ 地/ 研究/ 大/ 数据/ 的/ 挖掘/ 构架/ 及其/ 相关/ 构架/ 下/ 的/ 核心/ 挖掘/ 模型/ 及/ 算法/ 成为/ 一个/ 必须/ 面对/ 的/ 问题/ ./ 从/ 这个/ 意义/ 上/ 讲/ ,/ 分布式/ 数据流/ 可以/ 为/ 许多/ 应用环境/ 的/ 大/ 数据/ 提供/ 一种/ 数据组织/ 的/ 理想/ 模型/ ,/ 而/ 分布式/ 数据流/ 的/ 挖掘/ 算法/ 可以/ 作为/ 解决/ 大/ 数据挖掘/ 的/ 核心技术/ 之一/ 来/ 使用/ ./ 事实上/ ,/ 随着/ 大/ 数据/ 概念/ 的/ 日益/ 升温/ ,/ 一些/ 学者/ 或者/ 研究/ 机构/ 也/ 开始/ 尝试性/ 探索/ 大/ 数据/ 中/ 的/ 知识/ 挖掘/ 问题/ ./ 2012/ 年/ ,/ Luo/ 等/ 人/ [/ 7/ ]/ 认为/ 大/ 数据/ 的/ 挖掘/ 需要/ 在/ 不同/ 处理/ 阶段/ 研究/ 不同/ 的/ 算法/ ,/ 并且/ 针对/ 一些/ 关键步骤/ 设计/ 了/ 相应/ 的/ 算法/ ./ 2013/ 年/ ,/ Wu/ 等/ 人/ [/ 17/ ]/ 从/ 数据挖掘/ 观点/ 讨论/ 了/ 大/ 数据分析/ 问题/ ,/ 并且/ 基于/ 数据/ 驱动/ 策略/ 探讨/ 了/ 大/ 数据挖掘/ 中/ 的/ 核心/ 问题/ ,/ 并/ 设计/ 了/ 一种/ 大/ 数据挖掘/ 的/ 体系/ 构架/ 和/ 核心/ 模型/ ./ 2014/ 年/ ,/ 孙/ 大为/ 等/ 人/ [/ 6/ ]/ 认为/ 大/ 数据/ 有/ 批量/ 和/ 流式/ 处理/ 两种/ 数据/ 形态/ ,/ 并/ 对/ 大/ 数据流/ 式/ 计算/ 中/ 的/ 关键技术/ 进行/ 了/ 较为/ 系统地/ 分析/ ./ 大/ 数据挖掘/ 也/ 是/ 一个/ 代价/ 与/ 精度/ 的/ 平衡/ 优化/ 问题/ ,/ 其中/ 在/ 合理/ 的/ 通讯/ 代价/ 下/ 提升/ 分布式/ 挖掘/ 的/ 精度/ 是/ 关键/ 的/ 科学/ 问题/ 之一/ ./ 减少/ 通讯/ 代价/ 的/ 主要/ 策略/ 是/ 节点/ 间/ 共享/ 统计数据/ (/ 而/ 不是/ 实时/ 传输/ 原始数据/ )/ [/ 7/ ,/ 17/ ]/ ./ 2008/ 年/ ,/ Masud/ 等/ 人/ [/ 18/ ]/ 提出/ 了/ 一种/ 在/ 数据流/ 中/ 挖掘/ 微簇/ (/ micro/ -/ cluster/ )/ 模式/ 的/ 思想/ ,/ 即/ 在/ 对/ 一个/ 数据流/ 执行/ 聚类/ 算法/ 后/ 抽取/ 每个/ 簇/ 的/ 点数/ 、/ 均值/ 等/ 统计/ 值/ 形成/ 所谓/ 的/ 微簇/ 模式/ ./ 2011/ 年/ ,/ Kranen/ 等/ 人/ 则/ 将/ 微簇/ 类似/ 的/ 数据/ 统计/ 信息/ 设计/ 成/ 一种/ ClusTree/ 的/ 树结构/ ,/ 随着/ 时间/ 增长/ 来/ 维护/ 它/ [/ 19/ ]/ ./ 以上/ 两个/ 工作/ 都/ 是/ 面向/ 于/ 单数据流/ 挖掘/ 的/ ./ 一个/ 直接/ 面向/ 于/ 分布式/ 数据流/ 挖掘/ 的/ 相关/ 方法/ 来自/ 于/ Wang/ 等/ 人/ [/ 10/ ]/ 2011/ 年/ 的/ 工作/ ./ 它们/ 设计/ 了/ 一个/ 分布式/ 数据流/ 的/ 频繁/ 项目/ 集/ 挖掘/ 框架/ ,/ 并/ 通过/ 维护/ 数据/ 概要/ (/ datasynopsis/ )/ 来/ 实现/ 节点/ 间/ 的/ 信息/ 交流/ ,/ 其中/ 的/ 数据/ 概要/ 模式/ 和/ 本文/ 讨论/ 的/ 微簇/ 模式/ 的/ 思想/ 是/ 一致/ 的/ ./ 由于/ 微簇/ 挖掘/ 生成/ 的/ 是/ 数据/ 的/ 统计/ 概要/ ,/ 所以/ 对于/ 分布式/ 数据流/ 分类/ 挖掘/ 来说/ ,/ 它/ 可能/ 是/ 局部/ 模式/ 挖掘/ 的/ 理想/ 解决/ 方法/ 之一/ ./ 这/ 是因为/ 传输/ 微簇/ 模式/ 能/ 有效/ 地/ 减少/ 节点/ 间/ 的/ 数据通讯/ 代价/ (/ 相比/ 原始数据/ )/ 、/ 进而/ 能/ 有效/ 地/ 避免/ 有限/ 的/ 网络带宽/ 可能/ 造成/ 的/ 通讯/ 瓶颈/ 问题/ ./ 微簇/ 挖掘/ 及其/ 相关/ 技术/ 是/ 本文/ 局部/ 模式/ 挖掘/ 方法/ 的/ 主要/ 技术/ 支撑/ ./ 虽然/ 微簇/ 挖掘/ 在/ 局部/ 节点/ 是/ 有效/ 的/ ,/ 但是/ 由于/ 微簇/ 模式/ 缺乏/ 足够/ 的/ 预测/ 能力/ ,/ 即/ 对/ 未知/ 数据/ 的/ 分类/ 能力/ ,/ 所以/ 作为/ 全局/ 模式/ 是/ 不/ 合适/ 的/ ./ 事实上/ ,/ 在/ 分布式/ 数据流/ 分类/ 挖掘/ 中/ ,/ 虽然/ 数据/ 是/ 在/ 局部/ 节点/ 分散/ 收集/ 的/ ,/ 但是/ 分散/ 在/ 局部/ 节点/ 的/ 数据流/ 是/ 相互/ 关联/ 的/ ,/ 所以/ 发现/ 全局/ 分类器/ 以/ 用于/ 多/ 节点/ 共享/ 和/ 预测/ 是/ 分布式/ 、/ 流式/ 大/ 数据/ 的/ 分类/ 挖掘/ 的/ 主要/ 任务/ 之一/ ./ 此外/ ,/ 由于/ 分布式/ 挖掘/ 要/ 经过/ 局部/ 模式/ 挖掘/ 和/ 数据传输/ 才能/ 进行/ 全局/ 模式/ 挖掘/ ,/ 所以/ 多/ 步骤/ 的/ 处理/ 可能/ 导致/ 数据/ 质量/ 的/ 下降/ ,/ 因此/ 全局/ 模式/ 的/ 选择/ 和/ 设计/ 也/ 必须/ 考虑/ 抗噪/ 性能/ ./ 基于/ 以上/ 两点/ ,/ 考虑/ 到/ 集成/ 学习/ 技术/ 具有/ 很/ 高/ 的/ 预测/ 能力/ 和/ 更好/ 的/ 鲁棒性/ 能/ [/ 20/ ]/ ,/ 所以/ 本文/ 将/ 借鉴/ 已有/ 的/ 集成/ 学习/ 技术/ ,/ 研究/ 适合/ 于/ 分布式/ 、/ 流式/ 大/ 数据/ 的/ 分类/ 挖掘/ 需求/ 的/ 集成/ 分类/ 方法/ ./ 集成/ 分类/ 技术/ 的/ 研究/ 相对/ 比较/ 成熟/ ,/ 可以/ 借鉴/ 的/ 成果/ 也/ 较/ 多/ [/ 20/ -/ 21/ ]/ ./ 3/ 大/ 数据/ 的/ 分类/ 模型/ 给定/ 训练/ 数据/ 集/ T/ 和/ 类/ 标识/ 集合/ C/ ,/ 分类/ 学习/ 就/ 是从/ T/ 中/ 学习/ 出/ 一个/ 分类器/ ,/ 而/ 分类/ 算法/ 则/ 是/ 构建/ 这种/ 分类器/ 的/ 过程/ 描述/ ./ 然而/ ,/ 流式/ 大/ 数据/ 中/ 的/ 分类/ 学习/ 的/ 训练/ 数据/ 集是/ 随/ 时间/ 动态/ 收集/ 的/ ,/ 所以/ 分类器/ 的/ 学习/ 必然/ 是/ 一个/ 动态/ 的/ 演化过程/ ./ 此外/ ,/ 传统/ 机器/ 学习/ 的/ 分类/ 算法/ 强调/ 挑选出/ 的/ 训练/ 集/ 的/ 质量/ ,/ 而且/ 认为/ 完整/ 的/ 分类/ 学习/ 需要/ 通过/ 正例/ 集/ 和/ 负例/ 集来/ 学习/ ./ 即使/ 是/ 在/ 数据流/ 或者/ 分布式/ 数据流/ 的/ 相关/ 研究/ 中/ ,/ 也/ 不乏/ 关于/ 基于/ 抽样/ 技术/ 或者/ 基于/ 负例/ 学习/ 方法/ 的/ 研究/ [/ 22/ ]/ ./ 然而/ ,/ 在/ 大/ 数据/ 的/ 概念/ 下/ ,/ 数据/ 抽样/ 和/ 负例/ 生成/ 技术/ 都/ 不/ 被/ 推荐/ [/ 2/ ]/ ./ 事实上/ ,/ 面对/ 庞大/ 而/ 快速/ 流动/ 的/ 大/ 数据/ ,/ 挑选/ 高质量/ 的/ 训练样本/ 数据/ 集是/ 不/ 现实/ 的/ ,/ 同时/ 实时/ 地/ 构造/ 出/ 合适/ 的/ 负例/ 样本/ 集/ 也/ 是/ 困难/ 的/ ./ 大/ 数据/ 的/ 挖掘/ 首先/ 要/ 解决/ 被/ 分析/ 数据/ 的/ 形式化/ 表达/ 问题/ ./ 如前所述/ ,/ 泛泛而谈/ 的/ 大/ 数据/ 概念/ 隐含/ 着/ 形态各异/ 的/ 数据格式/ ,/ 很难/ 统一/ 地/ 进行/ 规范化/ 描述/ ./ 然而/ ,/ 如果/ 只/ 关心/ 这/ 类/ 具有/ 统一/ 逻辑/ 视图/ 的/ 、/ 多/ 节点/ 分布式/ 采集/ 的/ 、/ 随/ 时间/ 流动/ 增长/ 的/ 数据/ 形态/ ,/ 那么/ 这类/ 大/ 数据/ 可以/ 借助于/ 已有/ 的/ (/ 同构/ )/ 分布式/ 数据流/ 的/ 概念/ 来/ 完成/ 数据/ 的/ 格式化/ 抽象/ [/ 8/ ,/ 15/ ]/ ,/ 形成/ 可/ 用于/ 分/ Page5/ 析/ 的/ 规范化/ 数据/ 形态/ ./ 定义/ 1/ (/ 分布式/ 数据流/ )/ ./ 给定/ :/ 时间/ 序列/ T/ =/ 〈/ t1/ ,/ t2/ ,/ …/ ,/ ti/ ,/ …/ 〉/ ,/ 数据/ 维度/ d/ 和/ 节点/ 数/ n/ ./ 一个/ 分布式/ 数据流/ 被/ 定义/ 为/ :/ S/ =/ {/ S1/ ,/ S2/ ,/ …/ ,/ Sn/ }/ ,/ 其中/ 每个/ Sk/ (/ k/ =/ 1/ ,/ 2/ ,/ …/ ,/ n/ )/ 是/ 一个/ 单数据流/ ,/ 是/ 在/ T/ 上/ 采集/ 的/ 多维/ 数据/ 元组/ 序列/ Sk/ =/ 〈/ r1/ ,/ r2/ ,/ …/ ,/ ri/ ,/ …/ 〉/ ,/ ri/ =/ (/ r1i/ ,/ …/ ,/ rdi/ ,/ r2/ 对于/ 以/ 分布式/ 和/ 流动性/ 为/ 主要/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 分类/ 挖掘/ 而言/ ,/ 定义/ 1/ 中/ 界定/ 的/ 数据/ 形态/ 可以/ 作为/ 训练样本/ 的/ 收集/ 模型/ 来/ 使用/ ./ 例如/ ,/ 在/ 诸如/ 网络流量/ 监测/ 、/ 电子商务/ 交易/ 等/ 系统/ 中/ ,/ 可以/ 使用/ 这样/ 的/ 数据模型/ 来/ 收集/ 对应/ 的/ 训练/ 数据/ ./ 事实上/ ,/ 随着/ 收集/ 时间/ 点/ 的/ 增长/ ,/ 训练/ 用/ 的/ 样本/ 数据/ 在/ 不断/ 地/ 集聚/ ,/ 当然/ 隐藏/ 的/ 知识/ 模式/ 也/ 在/ 发生变化/ ./ 因此/ ,/ 流动性/ 大/ 数据/ 的/ 分类/ 挖掘/ 目标/ 之一/ 就是/ 随着/ 时间/ 变化/ 来/ 及时/ 更新/ 分类器/ ./ 然而/ ,/ 如果/ 采用/ 点到点/ 的/ 模式/ 挖掘/ 策略/ 的话/ ,/ 即/ 在/ 每个/ 收集/ 点/ 都/ 进行/ 分类器/ 更新/ ,/ 虽然/ 实时性/ 很/ 好/ ,/ 但是/ 对于/ 快速/ 流动/ 的/ 流式/ 大/ 数据/ 来说/ 是/ 不/ 现实/ 的/ ./ 因此/ ,/ 本文/ 将/ 探索/ 块/ 到/ 块/ 的/ 模式/ 挖掘/ 策略/ ,/ 即以/ 数据/ 块/ 为/ 单位/ 来/ 进行/ 分类器/ 的/ 更新/ ./ 这样/ ,/ 我们/ 就/ 需要/ 改进/ 传统/ 的/ 滑动/ 窗口/ 技术/ ./ 定义/ 2/ 给出/ 的/ 历史/ 窗口/ 概念/ 可以/ 帮助/ 解决/ 这个/ 问题/ ./ 定义/ 2/ (/ 历史/ 窗口/ )/ ./ 给定/ :/ 时间/ 序列/ T/ =/ 〈/ t1/ ,/ t2/ ,/ …/ ,/ ti/ ,/ …/ 〉/ 和/ 它/ 上/ 的/ 一个/ 数据流/ S/ =/ 〈/ r1/ ,/ r2/ ,/ …/ ,/ ri/ ,/ …/ 〉/ ./ 设/ ti/ ,/ tk/ ∈/ T/ ,/ i/ </ k/ ,/ 则/ Hk/ =/ [/ ti/ ,/ tk/ )/ 被/ 称为/ S/ 在/ k/ 上/ 的/ 历史/ 窗口/ ,/ k/ 被/ 称为/ 一个/ 挖掘/ 点/ ,/ 同时/ 在/ Hk/ 内/ 收集/ 的/ 数据/ chunkk/ =/ 〈/ ri/ ,/ ri/ +/ 1/ ,/ …/ ,/ rk/ -/ 1/ 〉/ 则/ 被/ 称为/ 该/ 历史/ 窗口/ 的/ 数据/ 块/ ./ 对于/ 一个/ 分布式/ 数据流/ 来说/ ,/ 约定/ 所有/ 的/ 节点/ 都/ 使用/ 相同/ 的/ 挖掘/ 点/ 序列/ ,/ 而且/ 在/ 任意/ 一个/ 挖掘/ 点/ k/ 上/ ,/ 所有/ 的/ 局部/ 节点/ 都/ 使用/ 相同/ 的/ 历史/ 窗口/ ./ 对/ 每个/ 局部/ 节点/ 来说/ ,/ 它们/ 的/ 主要/ 任务/ 就是/ 挖掘/ 局部/ 模式/ ,/ 所以/ 局部/ 模式/ 的/ 表达/ 是/ 首先/ 要/ 解决/ 的/ 问题/ ./ 面向/ 于/ 分布式/ 、/ 流式/ 大/ 数据/ 的/ 层次/ 式/ 挖掘/ 构架/ [/ 8/ -/ 9/ ]/ ,/ 局部/ 节点/ 需要/ 实时/ 地/ 维护/ 自己/ 的/ 局部/ 模式/ 、/ 并/ 将/ 它们/ 传递/ 到/ 中心/ 节点/ ,/ 因此/ 数据传输/ 量/ 与/ 局部/ 模式/ 的/ 表达形式/ 有/ 直接/ 的/ 关系/ ./ 当然/ 是/ 表达/ 越/ 紧凑/ 越好/ ./ 同时/ ,/ 由于/ 局部/ 模式/ 最终/ 要/ 用于/ 全局/ 模式/ 的/ 学习/ ,/ 所以/ 我们/ 在/ 选择/ 局部/ 模式/ 表达形式/ 时/ 也/ 需要/ 考虑/ 它/ 的/ 可/ 恢复性/ ,/ 即/ 利用/ 它/ 恢复/ 全局/ 学习/ 样本/ 数据/ 的/ 能力/ ./ 基于/ 这些/ 考虑/ ,/ 本文/ 在/ 借鉴/ 了/ 已有/ 的/ 微簇/ (/ micro/ -/ cluster/ )/ 挖掘/ 研究成果/ 的/ 基础/ 上/ ,/ 根据/ 大/ 数据/ 的/ 分布式/ 和/ 流动性/ 的/ 技术/ 特点/ 及其/ 分类/ 挖掘/ 的/ 需求/ ,/ 设计/ 了/ 定义/ 3/ 的/ 微簇/ 结构/ ./ 与/ 已有/ 的/ 相关/ 研究/ 相比/ [/ 18/ ]/ ,/ 定义/ 3/ 通过/ 增加/ 平方和/ 等/ 统计/ 变量/ 来/ 提高/ 微簇/ 的/ 表达能力/ 和/ 微簇/ 之间/ 操作/ 的/ 方便性/ ,/ 同时/ 也/ 根据/ 后面/ 分类/ 算法/ 的/ 需要/ 增加/ 了/ 类/ 标识/ 项/ ./ 定义/ 3/ (/ 微簇/ )/ ./ 设/ d/ 维/ 的/ 数据/ 集/ X/ =/ {/ x1/ ,/ x2/ ,/ …/ ,/ xn/ }/ ,/ 其中/ xi/ =/ (/ x1/ 微簇/ 结构/ 由/ 一个/ 5/ 元组/ M/ =/ 〈/ n/ ,/ c/ ,/ s/ ,/ d/ ,/ f/ 〉/ 定义/ :/ (/ 1/ )/ M/ ./ n/ :/ 数据/ 个数/ (/ 本例/ 就是/ n/ )/ ./ (/ 2/ )/ M/ ./ c/ :/ 中心点/ 或/ 称为/ 均值/ ,/ 即/ (/ 3/ )/ M/ ./ s/ :/ 平方和/ 统计/ (/ 为/ 防止/ 溢出/ 被/ 开方/ )/ ,/ 即/ (/ 4/ )/ M/ ./ d/ :/ 方差/ 统计/ 值/ ,/ 即/ M/ ./ dj/ =/ ∑/ n/ (/ 5/ )/ M/ ./ f/ :/ 数据/ 集/ 的/ 类/ 标识/ ./ 定义/ 3/ 的/ 微簇/ 结构/ 能够/ 满足/ 分布式/ 、/ 流式/ 大/ 数据/ 的/ 局部/ 模式/ 的/ 紧凑型/ 和/ 可/ 恢复性/ 要求/ ./ 这/ 是因为/ 一个/ 微簇/ 对应/ 的/ 是/ 一个/ 原始数据/ 簇/ 的/ 统计/ 信息/ ,/ 因而/ 要/ 比/ 原始数据/ 容量/ 小得多/ ,/ 而且/ 合适/ 的/ 统计/ 信息/ 要/ 比/ 更/ 抽象/ 的/ 分类器/ (/ 如/ C4/ ./ 5/ 等/ )/ 更/ 有利于/ 全局/ 学习/ 数据/ 样本/ 点/ 的/ 恢复/ ./ 值得注意/ 地是/ ,/ 微簇/ 作为/ 全局/ 模式/ 是/ 不/ 合适/ 的/ ./ 事实上/ ,/ 分布式/ 、/ 流式/ 大/ 数据/ 的/ 全局/ 模式/ 应该/ 是/ 对/ 分布/ 在/ 多个/ 节点/ 的/ 局部/ 流动/ 数据/ 的/ 共性/ 归纳/ ,/ 而且/ 主要/ 任务/ 是/ 能够/ 对/ 流动/ 的/ 未知/ 类别/ 的/ 数据/ 进行/ 分类/ 预测/ ,/ 为/ 分布式/ 的/ 多/ 节点/ 的/ 流式/ 数据/ 提供/ 共享/ 的/ 预测/ 模型/ ./ 很/ 显然/ ,/ 微簇/ 模式/ 不/ 具备/ 这样/ 的/ 预测/ 能力/ ./ 因此/ ,/ 作为/ 最终/ 的/ 知识/ 模式/ ,/ 全局/ 模式/ 需要/ 预测/ 能力/ 更强/ 的/ 知识/ 模式/ 形式/ ./ 集成/ 分类器/ 具备/ 这些/ 优势/ ,/ 因此/ 本文/ 将/ 研究/ 对应/ 的/ 集成/ 分类器/ 方法/ 来/ 实现/ 分布式/ 流式/ 大/ 数据/ 的/ 全局/ 模式/ 挖掘/ ./ 简言之/ ,/ 面对/ 复杂/ 的/ 分布式/ 、/ 流式/ 大/ 数据/ 分类/ 问题/ ,/ 本文/ 将/ 研究/ 、/ 改进/ 、/ 集成/ 多种/ 技术/ 方法/ ,/ 其中/ 包括/ 上面/ 提到/ 的/ 块/ 到/ 块/ 的/ 增量/ 式/ 更新/ 策略/ 、/ 局部/ 的/ 微簇/ 挖掘/ 方法/ 和/ 全局/ 的/ 集成/ 学习/ 技术/ 等/ ./ 图/ 1/ 给出/ 了/ 一个/ 从/ 原始数据/ 流/ 到/ 局部/ 模式/ 再/ 到/ 全局/ 模式/ 的/ 增量/ 式/ 的/ 挖掘/ 过程/ 示意/ ./ 在/ 图/ 1/ 中/ ,/ 包含/ 3/ 个/ 局部/ 节点/ 和/ 1/ 个/ 中心/ 节点/ ,/ 通过/ 网络/ 形成/ 一个/ 层次/ 式/ 的/ 大/ 数据挖掘/ 构架/ ./ 局部/ 节点/ 主要/ 负责/ 本/ 节点/ 的/ 流式/ 数据/ 的/ 收集/ 和/ 局部/ 挖掘/ 、/ 中心/ 节点/ 则/ 负责/ 全局/ 模式/ 的/ 挖掘/ ./ 给定/ 一个/ 挖掘/ Page6/ 时间/ 点/ t/ ,/ 分类/ 挖掘/ 的/ 任务/ 就是/ 利用/ t/ 时刻/ 的/ 时间/ 窗口/ 来/ 将/ 局部/ 的/ 微簇/ 模式/ 和/ 全局/ 的/ 集成/ 分类器/ 更新/ 到/ t/ 时刻/ 的/ (/ 当前/ )/ 状态/ ./ 对/ 独立/ 的/ 阶段/ :/ 如图/ 1/ 所示/ ,/ 一个/ 大/ 数据/ 的/ 分类/ 挖掘/ 有/ 3/ 个/ 相/ (/ 1/ )/ 局部/ 挖掘/ ,/ 即/ 在/ 每个/ 局部/ 节点/ 依据/ 定义/ 1/ 的/ 数据模型/ 来/ 收集/ 当前/ 数据/ 块/ chunkt/ ,/ 然后/ 利用/ chunkt/ 对/ 上/ 一个/ 挖掘/ 点/ 所/ 维护/ 的/ 局部/ 微簇/ 模式/ 进行/ 增量/ 式/ 更新/ 、/ 形成/ 新/ 的/ (/ 当前/ )/ 微簇/ 模式/ ./ 更新/ 完成/ 后/ 就/ 通过/ 网络/ 把/ 它/ 传送/ 到/ 中心/ 节点/ ./ (/ 2/ )/ 模式/ 传输/ ,/ 即当/ 一个/ 局部/ 节点/ 的/ 微簇/ 模式/ (/ 3/ )/ 全局/ 挖掘/ ,/ 即当/ 所有/ 局部/ 节点/ 的/ 当前/ 微簇/ 模式/ 都/ 被/ 成功/ 地/ 送到/ 中心/ 节点/ 后/ ,/ 中心/ 节点/ 就/ 进行/ 全局/ 集成/ 分类器/ 的/ 学习/ ,/ 将/ 全局/ 模式/ 更新/ 到/ 当前/ 状态/ ./ 大/ 数据/ 的/ 分类/ 挖掘/ 模型/ ./ 基于/ 上面/ 的/ 定义/ 和/ 分析/ ,/ 定义/ 4/ 给出/ 了/ 对应/ 的/ 定义/ 4/ (/ 大/ 数据/ 分类/ 模型/ )/ ./ 具有/ 分布式/ 和/ 流动性/ 为/ 主要/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 分类/ 模型/ 定义/ 为/ M/ =/ 〈/ T/ ,/ D/ ,/ O/ ,/ P/ 〉/ ,/ 其中/ :/ T/ =/ 〈/ t1/ ,/ t2/ ,/ …/ 〉/ 是/ 收集/ 数据/ 的/ 时间/ 点/ 序列/ ;/ D/ =/ {/ S1/ ,/ S2/ ,/ …/ ,/ Sn/ }/ 是/ 依据/ T/ 在/ 局部/ 节点/ 上/ 收集/ 的/ n/ 条/ 局部/ 数据流/ 组成/ 的/ 分布式/ 数据流/ ,/ 是/ 数据挖掘/ 的/ 数据源/ ;/ O/ 是/ 对/ D/ 的/ 操作/ 算/ 子集/ ,/ 需要/ 相应/ 的/ 算法/ 来/ 实现/ ;/ P/ 是/ 全局/ 分类器/ ,/ 是/ 学习/ 的/ 最终/ 结果/ ./ 给定/ 挖掘/ 点/ t/ ∈/ T/ ,/ 具有/ 分布式/ 和/ 流动性/ 为/ 主要/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 分类/ 模型/ 通过/ 如下/ 的/ 操作/ 来/ 层次/ 式/ 构造/ :/ (/ 1/ )/ 局部/ 挖掘/ 器/ ,/ 包含/ 如下/ 操作/ :/ ①/ chunk/ -/ maker/ :/ D/ →/ {/ chunk1/ ,/ chunk2/ ,/ …/ ,/ chunkt/ ,/ …/ }/ ./ 按照/ 预先/ 设定/ 的/ 挖掘/ 点来/ 收集/ 窗口/ 数据/ ,/ chunkt/ 被/ 称为/ 当前/ 数据/ 块/ ./ ②/ micro/ -/ cluster/ -/ abstractor/ :/ chunkt/ →/ {/ m1/ ,/ m2/ ,/ …/ ,/ mk/ }/ ./ 负责/ 从/ 当前/ 数据/ 块/ 中/ 挖掘出/ 微簇集/ {/ m1/ ,/ m2/ ,/ …/ ,/ mk/ }/ ./ ③/ micro/ -/ cluster/ -/ maintainer/ :/ {/ Mt/ -/ 1/ ;/ m1/ ,/ m2/ ,/ …/ ,/ mk/ }/ →/ Mt/ ./ 利用/ 当前/ 的/ 微簇/ 集来/ 增量/ 式/ 更新/ 上/ 个/ 挖掘/ 点/ 存储/ 的/ 微/ 簇集/ Mt/ -/ 1/ ,/ 得到/ 当前/ 挖掘/ 点/ 的/ 微/ 簇集/ Mt/ ./ 转换成/ 全局/ 学习/ 样本/ 集/ St/ ./ (/ 2/ )/ 全局/ 挖掘/ 器/ ,/ 包含/ 如下/ 操作/ :/ ①/ micro/ -/ cluster/ -/ pool/ :/ {/ Mt/ }/ →/ pool/ ./ 在/ 中心/ 节点/ ,/ 设置/ 内存/ 缓冲/ 池/ pool/ 以/ 收集/ 所有/ 局部/ 节点/ 发送/ 来/ 的/ 局部/ 微簇集/ ./ ②/ sample/ -/ remaker/ :/ {/ Mt/ }/ →/ St/ ./ 将/ 当前/ 微簇集/ ③/ ensemble/ -/ updater/ :/ {/ Et/ -/ 1/ ;/ St/ }/ →/ Et/ ./ 利用/ 样本/ 集/ St/ 来/ 增量/ 式/ 更新/ 上/ 个/ 挖掘/ 点/ 的/ 全局/ 集成/ 分类器/ Et/ -/ 1/ ,/ 得到/ 当前/ 集成/ 分类器/ Et/ ./ 定义/ 4/ 的/ 模型/ 系统化/ 地/ 界定/ 了/ 具有/ 分布式/ 和/ 流动性/ 为/ 主要/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 分类/ 挖掘/ 系统/ 的/ 主要/ 功能/ 需求/ 及/ 需要/ 探索/ 的/ 主要/ 挖掘/ 操作/ 算子/ ./ (/ 1/ )/ 在/ 局部/ 挖掘/ 器中/ ,/ 基本/ 的/ 操作/ 算子/ 包括/ 当前/ 数据/ 块/ 的/ 获取/ 、/ 局部/ 微簇/ 模式/ 挖掘/ 以及/ 局部/ 微簇/ 模式/ 的/ 更新/ 维护/ 等/ 操作/ ./ 即/ :/ 按照/ 块/ 到/ 块/ 的/ 挖掘/ 技术/ ,/ 通过/ 调用/ 局部/ 挖掘/ 器/ ,/ 在/ 一个/ 新/ 数据/ 块/ 到达/ 后/ ,/ 可以/ 实现/ 局部/ 微簇/ 模式/ 的/ 增量/ 式/ 更新/ ./ (/ 2/ )/ 在/ 全局/ 挖掘/ 器中/ ,/ 基本/ 的/ 操作/ 算子/ 涉及/ 到/ 局部/ 微簇/ 模式/ 的/ (/ 缓冲/ )/ 存储/ 、/ 全局/ 训练样本/ 数据/ 的/ 生成/ (/ 恢复/ )/ 以及/ 全局/ 集成/ 分类器/ 的/ 更新/ 维护/ 等/ 操作/ ./ 即/ 通过/ 集成/ 学习/ 技术/ ,/ 当/ 一个/ 历史/ 窗口/ 的/ 所有/ 节点/ 的/ 局部/ 模式/ 到达/ 中心/ 节点/ 后/ ,/ 通过/ 触发/ 全局/ 挖掘/ 器/ 可以/ 实现/ 全局/ 模式/ 的/ 增量/ 式/ 更新/ ./ 当然/ ,/ 在/ 定义/ 4/ 模型/ 中/ 的/ 挖掘/ 操作/ 算子/ 需要/ 通过/ 设计/ 对应/ 的/ 算法/ 来/ 实现/ ,/ 并且/ 它们/ 构成/ 了/ 分布式/ 、/ 流式/ 大/ 数据/ 分类/ 挖掘/ 目标/ 对应/ 的/ 核心/ 算法/ ,/ 因此/ 本文/ 接下来/ 的/ 主要/ 工作/ 就是/ 设计/ 和/ 分析/ 这些/ 核心/ 算法/ ./ 4/ 算法/ 设计/ 和/ 分析/ 本节/ 将/ 对/ 定义/ 4/ 分类/ 挖掘/ 模型/ 中/ 的/ 关键/ 操作/ 算/ Page7/ 子/ 进行/ 算法/ 设计/ ./ 主要/ 的/ 算法/ 包括/ :/ 在/ 局部/ 节点/ 中/ 的/ 微簇/ 抽取/ 和/ 增量/ 式微/ 簇/ 维护/ 算法/ ;/ 在/ 中心/ 节点/ 中/ 的/ 学习/ 样本/ 数据/ 重构/ 和/ 集成/ 分类/ 算法/ ./ 4.1/ 局部/ 节点/ 的/ 微簇/ 抽取/ 算法/ 当/ 一个/ 局部/ 节点/ 的/ 当前/ 数据/ 块/ 被/ 收集/ 完成/ 后/ ,/ 接下来/ 的/ 工作/ 就是/ 对/ 其/ 进行/ 微簇/ 挖掘/ ./ 首先/ ,/ 要/ 对/ 当前/ 数据/ 块/ 进行/ 类簇/ 划分/ ./ 考虑/ 到/ 大/ 数据/ 的/ 分类/ 挖掘/ 特点/ ,/ 可能/ 存在/ 类/ 标识/ 不全/ 的/ 情况/ ,/ 所以/ 使用/ 经典/ 的/ 无/ 监督/ 学习/ 算法/ k/ -/ means/ 进行/ 聚类/ ./ 然后/ ,/ 对/ 聚类/ 得到/ 的/ 每个/ 簇/ 进行/ 微簇/ 抽取/ ./ 这个/ 工作/ 主要/ 是/ 依据/ 定义/ 3/ 描述/ 的/ 微簇/ 结构/ 对/ 每个/ 类簇/ 的/ 数据/ 进行/ 对应/ 的/ 统计/ 值/ 抽取/ ./ 算法/ 1/ 给出/ 了/ 在/ 局部/ 节点/ 中/ 抽取/ 微簇/ 模式/ 的/ 过程/ 描述/ ./ 算法/ 1/ ./ micro/ -/ cluster/ -/ abstractor/ ./ 输入/ :/ 当前/ 挖掘/ 时间/ 点/ t/ ;/ 在/ t/ 时刻/ 获得/ 的/ 数据/ 块/ D/ ;/ 数/ 输出/ :/ 在/ t/ 时刻/ 的/ 微簇/ 集合/ M1/ ./ divideDintokclustersCbyAlgorithmk/ -/ means/ ;/ 2/ ./ FOReachp/ ∈/ C3/ ./ p/ ./ n/ ←/ |/ p/ |/ ;/ 4/ ./ FORi/ =/ 1tod5/ ./ p/ ./ ci/ ←/ ∑/ q/ ∈/ p6/ ./ p/ ./ si/ ←/ ∑/ q/ ∈/ p7/ ./ p/ ./ di/ ←/ ∑/ q/ ∈/ p8/ ./ ENDFOR9/ ./ p/ ./ c/ ←/ (/ p/ ./ c1/ ,/ p/ ./ c2/ ,/ …/ ,/ p/ ./ cd/ )/ ;/ 10/ ./ p/ ./ s/ ←/ (/ p/ ./ s1/ ,/ p/ ./ s2/ ,/ …/ ,/ p/ ./ sd/ )/ ;/ 11/ ./ p/ ./ d/ ←/ (/ p/ ./ d1/ ,/ p/ ./ d2/ ,/ …/ ,/ p/ ./ dd/ )/ ;/ 12/ ./ flagp/ ./ fwiththemostlabelininstancesofp/ ;/ 13/ ./ integratep/ ./ n/ ,/ p/ ./ c/ ,/ p/ ./ s/ ,/ p/ ./ dandp/ ./ fintomicro/ -/ 14/ ./ M/ ←/ M/ ∪/ {/ m/ }/ ;/ 15/ ./ ENDFOR16/ ./ returnM/ ./ 算法/ 1/ 中/ 的/ 步骤/ 1/ 是/ 使用/ k/ -/ means/ 进行/ 聚类/ ,/ 其/ 时间/ 复杂度/ 为/ o/ (/ l/ ×/ m/ )/ ,/ 其中/ l/ 和/ m/ 是/ 寻找/ 最优/ 划分/ 簇/ 的/ 迭代/ 次数/ 和/ 被/ 挖掘/ 的/ 数据/ 点/ 大小/ [/ 8/ ]/ ./ 步骤/ 2/ ~/ 15/ 是/ 实现/ 微簇/ 模式/ 的/ 构建/ ,/ 它/ 的/ 时间/ 复杂度/ 是/ O/ (/ k/ ×/ n/ )/ ,/ 其中/ k/ 和/ n/ 分别/ 是/ k/ -/ means/ 挖掘出/ 的/ 类/ 簇/ 数目/ 和/ 每个/ 簇中/ 数据/ 点/ 的/ 平均/ 大小/ ./ 很/ 显然/ ,/ 上面/ 的/ m/ =/ k/ ×/ n/ ,/ 所以/ 算法/ 1/ 的/ 时间/ 复杂度/ 由/ k/ -/ means/ 算法/ 的/ 时间/ 复杂度/ 决定/ ./ 此外/ ,/ 算法/ 1/ 的/ 内存空间/ 占用/ 情况/ 是/ :/ 除了/ k/ -/ means/ 执行/ 所/ 必须/ 的/ 内存空间/ 外/ ,/ 算法/ 1/ 的/ 主要/ 额外/ 空间/ 是/ 为/ k/ 个/ 簇/ 对应/ 的/ 微簇/ 统计/ 信息/ 提供/ 内存/ 的/ 数据结构/ ./ 按照/ 定义/ 3/ ,/ 每个/ 微簇/ 结构/ 只/ 需要/ 5/ 个/ 数值/ 级别/ 的/ 存储空间/ ./ 因此/ ,/ 相对/ 于/ 传统/ 的/ 聚类/ 算法/ k/ -/ means/ ,/ 算法/ 1/ 只有/ 很少/ 的/ 额外/ 时间/ 花费/ 和/ 空间/ 消耗/ ./ 4.2/ 局部/ 节点/ 的/ 增量/ 式微/ 簇/ 维护/ 算法/ 随着/ 挖掘/ 时间/ 点/ 的/ 变化/ ,/ 一个/ 局部/ 节点/ 维护/ 的/ 微簇/ 集合/ 需要/ 及时/ 更新/ 来/ 适应/ 数据/ 的/ 变化/ ./ 依据/ 图/ 1/ 所示/ 的/ 增量/ 式/ 方法/ ,/ 局部/ 节点/ 的/ 微簇/ 维护/ 意味着/ :/ 利用/ 当前/ 数据/ 块/ 获得/ 的/ 微簇/ 集合/ M/ / ,/ 对/ 上次/ 挖掘/ 点/ 维护/ 的/ 微簇/ 集合/ M/ 进行/ 增量/ 式/ 更新/ ./ 值得注意/ 的/ 是/ ,/ 作为/ 局部/ 节点/ 的/ 局部/ 模式/ ,/ 一个/ 节点/ 上/ 维护/ 的/ 微簇/ 模式/ 中/ 的/ 微簇/ 数目/ 必须/ 适当/ 加以控制/ ,/ 不能/ 随着/ 时间/ 的/ 增长/ 无/ 限制/ 地/ 膨胀/ ./ 这/ 可以/ 通过/ 设置/ 一个/ 阈值/ 参数/ L/ 来/ 加以控制/ ./ 当/ 增量/ 式/ 更新/ 导致/ 微簇/ 数目/ 超过/ L/ 时/ ,/ 就/ 需要/ 进行/ 微簇/ 合并/ ./ 因此/ ,/ 两个/ 微簇/ 的/ 合并/ 操作/ 应该/ 作为/ 一个/ 基本操作/ 来/ 加以/ 研究/ ,/ 其中/ 一个/ 重要/ 的/ 问题/ 就是/ 如何/ 在/ 一个/ 微簇/ 集合/ 中/ 寻找/ 两个/ 最佳/ 的/ 微簇/ 进行/ 合并/ ./ 考虑/ 分布式/ 大/ 数据/ 的/ 特点/ ,/ 我们/ 采用/ “/ 方差/ 和/ 最小/ ”/ 作为/ 寻找/ 最佳/ 合并/ 簇/ 的/ 标准/ ./ 即/ :/ 给定/ 一个/ 微簇/ 集合/ M/ ,/ 被/ 选择/ 的/ 用于/ 合并/ 的/ 两个/ 微簇/ m1/ 和/ m2/ 需要/ 满足/ min/ ∑/ d/ 其中/ :/ / ./ di/ 是/ 一个/ 微簇/ 的/ 方差/ 的/ 第/ i/ 个/ 维度/ 值/ ;/ unite/ (/ m1/ ,/ m2/ )/ 代表/ m1/ 和/ m2/ 合并/ 后/ 的/ 微簇/ ./ 由于/ 微簇/ 并/ 不是/ 直接/ 保存/ 数据/ 点/ ,/ 所以/ 合并/ 后/ 的/ 微簇/ 模式/ 不能/ 通过/ 定义/ 3/ 直接/ 获得/ ./ 唯一/ 的/ 方法/ 就/ 是从/ 两个/ 待/ 合并/ 的/ 微簇/ 推导/ 出/ 合并/ 后/ 的/ 微簇/ 的/ 统计/ 值/ ./ 定义/ 5/ 给出/ 了/ 对应/ 的/ 计算方法/ ./ 定义/ 5/ (/ 微簇/ 的/ 合并/ 操作/ )/ ./ 给定/ 两个/ d/ 维/ 的/ 微簇/ m1/ 和/ m2/ ,/ 假如/ 它们/ 有/ 共同/ 的/ 类/ 标识/ ,/ 那么/ 它们/ 可以/ 通过/ 一个/ 被/ 称为/ 合并/ 的/ 运算/ unite/ (/ m1/ ,/ m2/ )/ 合并/ 成/ 一个/ 新/ 的/ 微簇/ ,/ 记为/ m3/ =/ unite/ (/ m1/ ,/ m2/ )/ ,/ 则/ m3/ 的/ 统计/ 值/ 计算/ 如下/ :/ m3/ ./ n/ ←/ m1/ ./ n/ +/ m2/ ./ nm3/ ./ ci/ ←/ m1/ ./ n/ ×/ m1/ ./ ci/ +/ m2/ ./ n/ ×/ m2/ ./ cim3/ ./ si/ ←/ (/ m1/ ./ si/ ×/ m1/ ./ si/ +/ m2/ ./ si/ ×/ m2/ ./ sim3/ ./ di/ ←/ m1/ ./ si/ ×/ m1/ ./ si/ +/ m2/ ./ si/ ×/ m2/ ./ siPage8/ 定理/ 1/ ./ 设/ m3/ =/ unite/ (/ m1/ ,/ m2/ )/ ,/ 则/ 微簇/ m3/ 的/ 统计/ 值/ 可以/ 通过/ 定义/ 5/ 的/ 式/ (/ 5/ )/ ~/ (/ 9/ )/ 计算/ 出/ ,/ 且/ 计算结果/ 正确/ 反映/ 合并/ 前/ 的/ 数据分布/ ./ 证明/ ./ 不失/ 一般性/ ,/ 假设/ m1/ 和/ m2/ 是/ 一维/ 的/ ,/ 且/ 对应/ 的/ 原始数据/ 集/ 分别/ 为/ c1/ =/ {/ x1/ ,/ x2/ ,/ …/ ,/ xp/ }/ 和/ c2/ =/ {/ y1/ ,/ y2/ ,/ …/ ,/ yq/ }/ (/ 因为/ 是/ 一维/ 就/ 不再/ 标识/ 维度/ )/ ./ 设/ m3/ =/ unite/ (/ m1/ ,/ m2/ )/ ,/ 则/ m3/ 对应/ 的/ 簇/ 的/ 原始数据/ 集为/ c1/ ∪/ c2/ =/ {/ x1/ ,/ x2/ ,/ …/ ,/ xp/ ,/ y1/ ,/ y2/ ,/ …/ ,/ yq/ }/ ./ 根据/ 定义/ 3/ 中微/ 簇/ 的/ 点数/ 计算/ ,/ 有/ 所以/ 定义/ 5/ 的/ (/ 5/ )/ 成立/ ./ 根据/ 定义/ 3/ 中微/ 簇/ 中心点/ 的/ 计算方法/ ,/ 有/ m3/ ./ c/ =/ (/ x1/ +/ …/ +/ xp/ +/ y1/ +/ …/ +/ yq/ )/ // (/ p/ +/ q/ )/ m1/ ./ c/ =/ (/ x1/ +/ x2/ +/ …/ +/ xp/ )/ // m1/ ./ n/ ,/ m2/ ./ c/ =/ (/ y1/ +/ y2/ +/ …/ +/ yq/ )/ // m2/ ./ n/ (/ 12/ )/ m3/ ./ c/ =/ (/ m1/ ./ c/ ×/ m1/ ./ n/ +/ m2/ ./ c/ ×/ m2/ ./ n/ )/ // m3/ ./ n/ (/ 13/ )/ 根据/ 定义/ 3/ 中微/ 簇/ 的/ 平方和/ 统计/ 值/ 计算/ ,/ 有/ 应用/ 式/ (/ 12/ )/ 到式/ (/ 11/ )/ ,/ 得到/ 所以/ 定义/ 5/ 的/ 式/ (/ 6/ )/ 成立/ ./ 应用/ 式/ (/ 15/ )/ 到式/ (/ 14/ )/ ,/ 得到/ 根据/ 定义/ 3/ 中微/ 簇/ 的/ 方差/ 统计/ 值/ 计算/ ,/ 有/ 所以/ 定义/ 5/ 的/ 式/ (/ 7/ )/ 成立/ ./ m3/ ./ d/ =/ ∑/ p/ =/ ∑/ pm3/ ./ c2/ 应用/ 式/ (/ 15/ )/ 、/ (/ 12/ )/ 和/ 式/ (/ 10/ )/ 到式/ (/ 17/ )/ ,/ 得到/ m3/ ./ d/ =/ m1/ ./ s/ ×/ m1/ ./ s/ +/ m2/ ./ s/ ×/ m2/ ./ s/ 所以/ 定义/ 5/ 的/ 式/ (/ 8/ )/ 成立/ ./ 最后/ ,/ 显然/ 有/ 由/ 上面/ 的/ 式/ (/ 10/ )/ 、/ (/ 13/ )/ 、/ (/ 16/ )/ 、/ (/ 18/ )/ 和/ 式/ (/ 19/ )/ 知道/ ,/ 在/ 一维/ 情况/ 下/ 定理/ 1/ 是/ 正确/ 的/ ./ 多维/ 情况/ 只/ 需要/ 按/ 每个/ 维度/ 计算/ 即可/ ./ 定理/ 1/ 确保/ 了/ 定义/ 5/ 的/ 微簇/ 合并/ 方法/ 是/ 正确/ 的/ ./ 这样/ ,/ 当/ 维护/ 的/ 微簇/ 模式/ 超过/ 限定/ 的/ 数目/ 时/ ,/ 就/ 可以/ 通过/ 重复/ 执行/ 两个/ 微簇/ 的/ 合并/ 操作/ 来/ 减少/ 微簇/ 的/ 数目/ ./ 算法/ 2/ 给出/ 了/ 在/ 一个/ 局部/ 节点/ 上/ 进行/ 微簇/ 的/ 增量/ 式/ 维护/ 的/ 基本/ 过程/ ./ 算法/ 2/ ./ micro/ -/ cluster/ -/ maintainer/ ./ 输入/ :/ 当前/ 挖掘/ 时间/ 点/ t/ ;/ 从/ 当前/ 块/ 抽取/ 的/ 微簇/ 集合/ 输出/ :/ t/ 时刻/ 更新/ 的/ 微/ 簇集/ M1/ ./ M/ ←/ M/ / ∪/ M/ ;/ 2/ ./ LM/ ←/ |/ M/ |/ ;/ 3/ ./ WHILELM/ >/ LDO4/ ./ b/ ←/ thelargestnumberofmachine/ ;/ 5/ ./ FOReachm1/ ∈/ M6/ ./ FOReachm2/ ∈/ M7/ ./ IF/ ∑/ d8/ ./ s1/ ←/ m1/ ;/ s2/ ←/ m2/ ;/ 9/ ./ b/ ←/ ∑/ d10/ ./ ENDIF11/ ./ ENDFOR12/ ./ ENDFOR13/ ./ p/ ←/ unite/ (/ s1/ ,/ s2/ )/ ;/ 14/ ./ M/ ←/ M/ ∪/ {/ p/ }/ ;/ M/ ←/ M/ -/ {/ s1/ }/ -/ {/ s2/ }/ ;/ 15/ ./ LM/ ←/ LM/ -/ 1/ ;/ 16/ ./ ENDDO17/ ./ returnM/ ./ 算法/ 2/ 的/ 时间/ 花费/ 取决于/ 微簇/ 的/ 合并/ 次数/ ./ 很/ 显然/ ,/ 由于/ 基于/ k/ -/ means/ 的/ 微簇/ 抽取/ 算法/ 将/ 从/ 当前/ 数据/ 块/ 中/ 产生/ k/ 个/ 微簇/ ,/ 所以/ 算法/ 2/ 最多/ 执行/ k/ 次微/ 簇/ 的/ unite/ 操作/ ./ 但是/ ,/ 为了/ 寻找/ 这/ k/ 次/ 合并/ 的/ 微簇/ ,/ 需要/ 按照/ 式/ (/ 4/ )/ 进行/ 测试/ ./ 每次/ 测试/ 的/ 微簇/ 集合/ 的/ 容量/ 和/ L/ 相当/ ,/ 且/ 在/ 一个/ L/ 大小/ 的/ 集合/ 中/ 进行/ 两/ 两/ 测试/ 的/ 时间/ 复杂度/ 是/ O/ (/ L2/ )/ ./ 因此/ ,/ 算法/ 2/ 的/ 总/ 的/ 时间/ 复杂度/ 是/ O/ (/ k/ ×/ L2/ )/ ./ 考虑/ 到/ k/ 和/ L/ 都/ 可以/ 控制/ 在/ 合理/ 范围/ 内/ ,/ 因此/ 算法/ 2/ 的/ 时间/ 效率/ 可以/ 得到/ 保证/ ./ 此外/ ,/ 算法/ 2/ 的/ 主要/ 内存/ 占用/ 是/ k/ +/ L/ 个/ 微簇/ 对应/ 的/ 数据结构/ ,/ 所以/ 算法/ 2/ 也/ 不会/ 产生/ 过大/ 的/ 内存/ 消耗/ ./ 4.3/ 中心/ 节点/ 的/ 样本/ 重构/ 算法/ 依据/ 图/ 1/ 的/ 挖掘/ 流程/ ,/ 在/ 一个/ 挖掘/ 点上/ ,/ 当/ 一个/ Page9/ 局部/ 节点/ 的/ 微簇/ 模式/ 被/ 更新/ 完成/ 后/ ,/ 就/ 会/ 把/ 它/ 通过/ 网络/ 传输/ 到/ 中心/ 节点/ ./ 当/ 所有/ 的/ 局部/ 节点/ 的/ 当前/ 微簇/ 模式/ 都/ 被/ 传送/ 到/ 中心/ 节点/ 的/ 缓冲/ 池后/ ,/ 中心/ 节点/ 就/ 会/ 启动/ 全局/ 模式/ 挖掘/ 工作/ ./ 按照/ 定义/ 4/ 给出/ 的/ 模型/ ,/ 为了/ 提高/ 全局/ 模式/ 的/ 预测/ 能力/ 和/ 抗干扰性/ ,/ 我们/ 使用/ 集成/ 分类器/ 作为/ 全局/ 模式/ ./ 这样/ ,/ 一个/ 具有/ 挑战性/ 的/ 问题/ 就/ 被/ 提出/ :/ 微簇/ 模式/ 不/ 可能/ 直接/ 作为/ 学习/ 样本/ 被/ 使用/ ,/ 那么/ 如何/ 在/ 中心/ 节点/ 获得/ 集成/ 学习/ 所/ 需/ 的/ 训练样本/ 集/ 就/ 成为/ 一个/ 关键问题/ ./ 一个/ 可行/ 的/ 方法/ 就是/ 利用/ 局部/ 节点/ 传送/ 过来/ 的/ 微簇/ 模式/ 来/ 重新/ 构造/ 全局/ 学习/ 样本/ ./ 算法/ 的/ 伪/ 代码/ ./ 算法/ 3/ 给出/ 了/ 生成/ 全局/ 训练样本/ 数据/ 集/ 的/ 对应/ 算法/ 3/ ./ Sample/ -/ remaker/ ./ 输入/ :/ 当前/ 挖掘/ 时间/ 点/ t/ ;/ t/ 时刻/ 从/ 所有/ 局部/ 节点/ 传送/ 来/ 输出/ :/ t/ 时刻/ 重构/ 的/ 样本/ 数据/ 集/ S1/ ./ FOReachm/ ∈/ M2/ ./ n/ ←/ m/ ./ n/ ;/ 3/ ./ FORi/ =/ 1ton4/ ./ FORj/ =/ 1tod5/ ./ r/ ←/ rand/ (/ -/ 1.1/ )/ ;/ 生成/ (/ -/ 1/ ,/ 1/ )/ 中/ 的/ 随机数/ ;/ 6/ ./ l/ ←/ 3/ ×/ n/ ×/ m/ ./ dj/ // 槡/ 2/ ;/ 7/ ./ xj/ ←/ m/ ./ cj/ +/ l/ ×/ r/ ;/ 8/ ./ ENDFOR9/ ./ x/ ←/ (/ x1/ ,/ x2/ ,/ …/ ,/ xd/ )/ ;/ 合成/ 多维/ 数据/ 点/ x/ ;/ 10/ ./ flagxwithm/ ./ f/ ;/ 11/ ./ insertxintoS/ ;/ 12/ ./ EDNFOR13/ ./ ENDFOR14/ ./ returnS/ ./ 很/ 显然/ ,/ 算法/ 3/ 的/ 时间/ 复杂度/ (/ 不/ 考虑/ 数据/ 维度/ )/ 是/ O/ (/ n/ )/ ,/ 其中/ n/ 是/ 恢复/ 的/ 样本/ 数目/ ./ 内存/ 消耗/ 也/ 主要/ 是/ n/ 个/ 样本/ 数据/ 所/ 需/ 的/ 空间/ ./ 理论/ 上/ 说/ ,/ 重构/ 的/ 训练样本/ 集/ 和/ 原始数据/ 集/ 必须/ 是/ 等价/ 的/ ,/ 至少/ 应该/ 保持/ 重要/ 的/ 统计/ 参数值/ ./ 定理/ 2/ 从/ 理论/ 上/ 保证/ 了/ 这点/ ,/ 因此/ 算法/ 3/ 采用/ 的/ 数据恢复/ 方法/ 是/ 合理/ 的/ ./ 定理/ 2/ ./ 假如/ 分布式/ 数据流/ 中/ 的/ 数据/ 满足/ 正态分布/ ,/ 则/ 对于/ 每个/ 微簇/ 来说/ ,/ 算法/ 3/ 重新/ 构造/ 的/ 数据/ 集/ 与/ 原始/ 的/ 微簇/ 的/ 均值/ 和/ 方差/ 统计/ 值/ 是/ 等价/ 的/ ./ 证明/ ./ 不失/ 一般性/ ,/ 假设/ 数据/ 是/ 一维/ 的/ ,/ 处理/ 的/ 微簇/ 集合/ M/ 只有/ 一个/ 微簇/ m/ ,/ m/ 对应/ 的/ 均值/ 和/ 方差/ 分别/ 是/ μ/ 和/ σ/ ;/ 对/ m/ 实施/ 算法/ 3/ 后/ 得到/ 了/ 样本/ 集/ X/ =/ {/ x1/ ,/ x2/ ,/ …/ ,/ xn/ }/ ./ 根据/ 微簇/ 的/ 均值/ 定义/ ,/ 计算/ X/ 的/ 中心点/ Xc/ :/ 根据/ 算法/ 3/ ,/ X/ 的/ 点/ 产生/ 如下/ :/ / xi/ ∈/ X/ ,/ xi/ ←/ μ/ +/ 3n/ σ/ // 槡/ 2/ ×/ rand/ (/ -/ 1/ ,/ 1/ )/ (/ 21/ )/ 代入/ 式/ (/ 21/ )/ 到式/ (/ 20/ )/ ,/ 有/ Xc/ =/ 1/ // n/ ×/ ∑/ n/ =/ μ/ +/ 1/ // n/ ×/ 3n/ σ/ // 槡/ 2/ ×/ ∑/ n/ 因为/ 正态分布/ 下/ ,/ ∑/ rand/ (/ -/ 1/ ,/ 1/ )/ ~/ ∫/ 10/ ,/ 所以/ 根据/ 式/ (/ 22/ )/ ,/ 有/ 另外/ ,/ 根据/ 定义/ 3/ 的/ 方差/ 定义/ ,/ X/ 的/ 方差/ Xd/ 为/ 代入/ 式/ (/ 21/ )/ 到/ (/ 24/ )/ ,/ 得到/ Xd/ =/ 1/ // n/ ×/ ∑/ n/ =/ 1/ // n/ ×/ ∑/ n/ 根据/ 式/ (/ 23/ )/ 的/ Xc/ ~/ μ/ ,/ 式/ (/ 25/ )/ 和/ 下面/ 式子/ 等价/ :/ 因为/ ∑/ rand/ (/ -/ 1/ ,/ 1/ )/ 2/ ~/ ∫/ 1/ 上面/ 式/ (/ 23/ )/ 和/ 式/ (/ 27/ )/ 说明/ 在/ 1/ 个/ 微簇/ 和/ 1/ 维/ 数据/ 空间/ 的/ 情况/ 下/ ,/ 定理/ 2/ 成立/ ./ 当/ 多个/ 微簇/ 或者/ 多维/ 数据/ 时/ ,/ 只/ 需要/ 对/ 每个/ 微簇/ 或者/ 每个/ 维度/ 使用/ 上面/ 方法/ 进行/ 推理/ ./ 4.4/ 中心/ 节点/ 的/ 集成/ 分类器/ 更新/ 算法/ 集成/ 分类器/ 的/ 构造/ 首先/ 需要/ 选择/ 一个/ 基础/ (/ 弱/ )/ 分类器/ ./ 本文/ 选用/ C4/ ./ 5/ ,/ 它/ 是/ 经典/ 的/ 高效/ 数据/ 分类/ 算法/ [/ 21/ ]/ ,/ 特别/ 是/ 由于/ 它/ 良好/ 的/ 剪枝/ 和/ 优化/ 机制/ 能/ 很/ 好/ 地/ 适应/ 大/ 数据/ 的/ 处理/ ./ 此外/ ,/ 集成/ 分类器/ 的/ 更新/ 策略/ 也/ 是/ 一个/ 重要/ 的/ 问题/ ./ 目前/ 流行/ 的/ 集成/ 分类器/ 大多/ 都/ 是/ 基于/ BoostingPage10/ 和/ Bagging/ 模型/ 的/ [/ 21/ ]/ ./ 基于/ Boosting/ 的/ 模型/ 需要/ 不断/ 学习/ 与/ 更新/ 样本/ 数据/ 和/ 弱/ 分类器/ 的/ 权重/ ,/ 对于/ 大/ 数据/ 来说/ 不仅/ 计算/ 太/ 复杂/ 、/ 而且/ 对于/ 像/ C4/ ./ 5/ 这样/ 的/ 决策树/ 模型/ 来说/ 也/ 缺乏/ 足够/ 的/ 稳定性/ [/ 20/ ]/ ./ 基于/ Bagging/ 的/ 模型/ 随机/ 选取/ 每个/ 弱/ 分类器/ 的/ 训练样本/ ,/ 对弱/ 分类/ 模型/ 要求/ 不高/ ,/ 但/ 它/ 的/ 收敛/ 速度/ 要/ 比/ 基于/ Boosting/ 模型/ 差/ ./ 考虑/ 分布式/ 、/ 流式/ 大/ 数据/ 的/ 特点/ ,/ 特别/ 是/ 对/ 全局/ 模式/ 的/ 高/ 归纳/ 性及/ 抗干扰性/ 的/ 要求/ ,/ 我们/ 将/ 借鉴/ Boosting/ 和/ Bagging/ 技术/ ,/ 力求/ 集成/ 两者/ 的/ 技术/ 优势/ 来/ 设计/ 本文/ 的/ 全局/ 集成/ 分类器/ ./ 本文/ 集成/ 学习策略/ 可以/ 简单/ 地/ 归纳/ 为/ 学习/ 样本/ 的/ 淘汰/ 策略/ ./ 主要/ 思想/ 是/ :/ 给定/ 一个/ 集成/ 分类器/ E/ =/ {/ e/ }/ ,/ 当/ 一个/ 学习/ 样本/ s/ 在/ 一个/ 弱/ 分类器/ 中/ 被/ 正确/ 预测/ 时/ ,/ 就/ 及时/ 将/ s/ 淘汰/ 掉/ 、/ 不再/ 用/ 它/ 作为/ 其他/ 的/ 弱/ 分类器/ 的/ 训练样本/ ./ 这样/ 做/ 的/ 目的/ 是/ 为了/ 尽可能/ 地/ 保证/ 弱/ 分类器/ 之间/ 的/ 差异/ 以/ 提高/ 对/ 样本/ 的/ 覆盖度/ ,/ 同时/ 也/ 提高/ 了/ 集成/ 分类器/ 的/ 学习/ 效率/ ./ 算法/ 4/ 给出/ 了/ 中心/ 节点/ 学习/ 集成/ 分类器/ 的/ 过程/ 描述/ ./ 算法/ 4/ ./ ensemble/ -/ updater/ ./ 输入/ :/ 当前/ 挖掘/ 时间/ 点/ t/ ;/ 训练样本/ 集/ S/ ;/ 在/ 上/ 个/ 挖掘/ 点/ 输出/ :/ t/ 时刻/ 更新/ 的/ 集成/ 分类器/ E1/ ./ p/ ←/ |/ S/ |/ // Q/ ;/ 设定/ 弱/ 分类器/ 的/ 样本数/ 2/ ./ FOReache/ ∈/ E3/ ./ e/ ./ error/ ←/ 0/ ;/ 4/ ./ FORs/ ∈/ S5/ ./ f/ ←/ e/ (/ s/ )/ ;/ 使用/ 弱/ 分类器/ e/ 进行/ 预测/ 6/ ./ IFf/ =/ s/ ./ fTHENdeletesfromS7/ ./ ELSEe/ ./ error/ ←/ e/ ./ error/ +/ 1/ ;/ 8/ ./ ENDFOR9/ ./ IFS/ =/ / THENbreak10/ ./ ELSE11/ ./ K/ ←/ randomlyselectpsamplesfromS/ ;/ 12/ ./ e/ / ←/ C4/ ./ 5/ (/ K/ )/ ;/ 学习/ 一个/ 新/ 分类器/ 13/ ./ E/ ←/ E/ ∪/ {/ e/ / }/ ;/ 14/ ./ ENDIF15/ ./ IF/ |/ E/ |/ >/ QTHEN16/ ./ c/ ←/ ethatsatisfiesmax/ {/ e/ ./ error/ |/ e/ ∈/ E/ }/ 17/ ./ E/ ←/ E/ -/ {/ c/ }/ ;/ 超过/ 上界时/ 删除/ 最差/ 的/ 弱/ 分类器/ 18/ ./ ENDIF19/ ./ ENDFOR20/ ./ returnE/ ./ 算法/ 4/ 在/ 每个/ 挖掘/ 时间/ 点/ 更新/ 全局/ 集成/ 分类器/ ./ 依据/ 增量/ 式/ 更新/ 的/ 策略/ ,/ 针对/ 每个/ 弱/ 分类器/ ,/ 做/ 了/ 如下/ 3/ 个/ 工作/ :/ (/ 1/ )/ 步骤/ 3/ ~/ 8/ 对/ 所有/ 的/ 训练样本/ 针对/ 一个/ 弱/ 分类器/ 进行/ 测试/ ,/ 对于/ 测试/ 正确/ 的/ 样本/ 进行/ 淘汰/ (/ 即/ 不用/ 它们/ 产生/ 新/ 的/ 弱/ 分类器/ )/ ./ 假设/ 整个/ 训练样本/ 集有/ n/ 个/ 数据/ 点/ ,/ 则/ 其/ 时间/ 花费/ 和/ n/ 成正比/ ./ (/ 2/ )/ 步骤/ 9/ ~/ 14/ 利用/ 未/ 被/ 淘汰/ 的/ 样本/ 数据/ (/ 随机/ 选取/ )/ 进行/ 新/ 的/ C4/ ./ 5/ 分类器/ 学习/ ./ 假设/ C4/ ./ 5/ 的/ 平均/ 学习/ 时间/ 是/ c/ 的话/ ,/ 那么/ 步骤/ 9/ ~/ 14/ 的/ 时间/ 花费/ 和/ c/ 相当/ ./ (/ 3/ )/ 步骤/ 15/ ~/ 18/ 完成/ 一个/ 弱/ 分类器/ 的/ 裁剪/ (/ 在/ 弱/ 分类器/ 数目/ 超过/ 设定/ 的/ 阈值/ 时/ )/ ,/ 这/ 需要/ 在/ 被/ 观察/ 的/ 集成/ 分类器/ 中/ 对/ 每个/ 弱/ 分类器/ 的/ 错误/ 情况/ 进行/ 比较/ ,/ 需要/ 测试/ 的/ 次数/ 和/ Q/ 相当/ ,/ 其中/ Q/ 是/ 集成/ 分类器/ 中弱/ 分类器/ 数目/ 的/ 上/ 限值/ ./ 根据/ 算法/ 4/ ,/ 上面/ 的/ 3/ 个/ 工作/ 需要/ 对/ 每个/ 弱/ 分类器/ 进行/ ,/ 而弱/ 分类器/ 的/ 数目/ 由/ Q/ 值/ 决定/ ,/ 所以/ 整个/ 算法/ 4/ 的/ 时间/ 复杂度/ 是/ Max/ {/ O/ (/ Q/ ×/ n/ )/ ,/ O/ (/ Q/ ×/ c/ )/ ,/ O/ (/ Q2/ )/ }/ ./ 一般地说/ ,/ Q/ 是/ 远/ 小于/ n/ 和/ c/ ,/ 因此/ 算法/ 4/ 的/ 执行/ 时间/ 主要/ 取决于/ 训练/ 数据/ 的/ 规模/ 和/ C4/ ./ 5/ 算法/ 的/ 训练/ 学习/ 时间/ ./ 算法/ 4/ 的/ 内存/ 消耗/ 主要/ 是/ 集成/ 分类器/ 中/ 所有/ C4/ ./ 5/ 对应/ 的/ 数据结构/ ,/ 与/ 集成/ 分类器/ 的/ 弱/ 分类器/ 数目/ 有关/ ./ 5/ 实验/ 与/ 分析/ 为了/ 评估/ 本文/ 模型/ 和/ 算法/ 的/ 有效性/ ,/ 我们/ 使用/ 公共数据/ 集/ KDD/ (/ CUP/ )/ 99/ ①/ 来/ 构建/ 对应/ 的/ 大/ 数据挖掘/ 的/ 训练/ 和/ 测试数据/ ./ KDD99/ 的/ 原始数据/ 来自/ 于/ MIT/ 林肯/ 实验室/ 收集/ 的/ 美国空军/ 模拟网/ 的/ 流量/ 监控/ 数据/ ,/ 后来/ 被/ 哥伦比亚大学/ 等/ 整理/ 成/ 规范/ 的/ 公共数据/ 集/ ./ KDD99/ 数据/ 集是/ 网络连接/ 记录/ 的/ 时间/ 序列/ 数据/ ,/ 所以/ 被/ 认为/ 是/ 研究/ 流式/ 的/ 网络流量/ 数据分析/ 及/ 入侵/ 检测/ 模式/ 评价/ 的/ 标尺/ 数据/ 集/ (/ benchmark/ )/ ./ 同时/ ,/ 由于/ 它/ 的/ 训练/ 数据/ 部分/ 已经/ 被/ 很/ 好/ 地/ 标注/ ,/ 而且/ 网络流量/ 及/ 入侵/ 检测/ 分析/ 的/ 主要/ 手段/ 是/ 分类/ 挖掘/ ,/ 因此/ 也/ 被/ 用来/ 评估/ 数据流/ 中/ 的/ 分类/ 算法/ ./ KDD99/ 的/ 整个/ 训练/ 数据/ 有/ 5000000/ 多个/ 网络连接/ 记录/ ,/ 有/ 41/ 个/ 学习/ 的/ 条件/ 属性/ ,/ 包含/ 正常/ (/ normal/ )/ 或/ 攻击/ (/ attack/ )/ 两大类/ ,/ 后者/ 又/ 被/ 分级/ 成/ 4/ 个/ 二级/ 类别/ ./ 考虑/ 到/ 本文/ 主要/ 是/ 进行/ 分类/ 挖掘/ (/ 而/ 不是/ 专门/ 的/ 入侵/ 检测/ )/ 实验/ ,/ 因此/ 本文/ 的/ 实验/ 不再/ 对/ 4/ 个/ 二级/ 类别/ 做/ ①/ KDDCup1999Data/ (/ KDDCup99/ )/ ./ http/ :/ // // kdd/ ./ ics/ ./ uci/ ./ Page11/ 进一步/ 划分/ 和/ 区分/ ./ 为了/ 模拟/ 分布式/ 、/ 流式/ 大/ 数据/ ,/ 我们/ 编制/ 了/ 一个/ 数据流/ 生成/ 的/ 软件工具/ stream/ -/ producer/ ./ 它/ 通过/ 对/ KDD99/ 数据/ 集/ 的/ I/ // O/ 操作/ 来/ 模拟/ 流动/ 数据/ 的/ 在线/ 到达/ 情况/ ./ stream/ -/ producer/ 主要/ 通过/ 数据/ 收集/ 时间/ 间隔/ 和/ 数据/ 流速/ 两个/ 参数/ 来/ 控制/ 数据流/ ./ 本文/ 实验/ 的/ 设置/ 为/ :/ 数据/ 收集/ 时间/ 间隔/ 是/ 1/ // 2000s/ ;/ 流速/ 范围/ 1000/ ~/ 2000/ 记录/ // s/ ./ 设置/ 不同/ 的/ 数据/ 流速/ 是/ 为了/ 更好/ 地/ 模拟/ 数据/ 的/ 随机/ 流动/ 情况/ ,/ 所以/ 实验/ 是/ 针对/ 不同/ 的/ 时间段/ 内/ 收集/ 的/ 数据/ 容量/ 可能/ 不同/ 的/ 实际/ 情况/ 设计/ 的/ ./ 本文/ 实验/ 基于/ 3/ 个/ 局部/ 节点/ 和/ 1/ 个/ 中心/ 节点/ 的/ 分布式/ 数据流/ 应用环境/ ,/ 使用/ 4/ 台/ Intel/ 酷睿/ i7/ 、/ 内存/ 2GB/ 的/ 计算机/ 构成/ 对应/ 的/ 硬件/ 单元/ ./ 利用/ Hadoop/ 的/ HDFS/ 分布式文件系统/ ,/ 将/ KDD99/ 数据/ 集/ 分布/ 存储/ 在/ 3/ 个/ 局部/ 节点/ 中/ ,/ 中心/ 节点/ 作为/ Master/ 节点/ ,/ 负责/ 对应/ 的/ 文件目录/ 信息/ 的/ 维护/ ./ 在/ 每个/ 局部/ 节点/ 上/ ,/ stream/ -/ producer/ 工具/ 被/ 部署/ ,/ 来/ 模拟/ 数据流/ 的/ 产生/ 过程/ 以/ 形成/ 窗口/ 数据/ ./ 算法/ 1/ ~/ 4/ 主要/ 采用/ Hadoop/ 的/ MapReduce/ 编程/ 方法/ 来/ 实现/ ./ 例如/ ,/ 就/ 局部/ 微簇/ 的/ 抽取/ (/ 算法/ 1/ )/ 而言/ ,/ Map/ (/ )/ 函数/ 的/ 键值/ 对/ 被/ 设计/ 成/ 〈/ 数据/ 元组/ ,/ 簇号/ 〉/ ,/ 完成/ 数据/ 块/ 的/ k/ -/ means/ 聚类/ 映射/ 操作/ ,/ 而/ 对应/ 的/ 一次/ Reduce/ (/ )/ 函数/ 的/ 调用/ 则/ 完成/ 一个/ 数据/ 簇/ (/ 相同/ 簇号/ )/ 的/ 统计/ 计算/ ,/ 即微/ 簇/ 模式/ 抽取/ ./ 按照/ 定义/ 4/ 模型/ 和/ 图/ 1/ 的/ 流程/ ,/ 局部/ 挖掘/ 器/ 的/ 核心/ 处理/ 是/ 基于/ 算法/ 1/ 和/ 2/ 的/ ,/ 全局/ 挖掘/ 器/ 的/ 核心/ 处理/ 是/ 基于/ 算法/ 3/ 和/ 4/ 的/ ./ 因此/ ,/ 在/ 每个/ 局部/ 节点/ ,/ 需要/ 以/ 算法/ 1/ 和/ 2/ 为/ 核心/ 形成/ 完整/ 的/ 局部/ 挖掘/ 器/ ,/ 在/ 中心/ 节点/ 以/ 算法/ 3/ 和/ 4/ 为/ 骨干/ 形成/ 完整/ 的/ 全局/ 挖掘/ 器/ ./ 实验/ 中/ 通过/ 增加/ “/ 本文/ 算法/ 的/ 连接/ 程序模块/ ”/ ,/ 实现/ 了/ 完善/ 的/ 局部/ 挖掘/ 器/ 和/ 全局/ 挖掘/ 器/ 功能/ ./ 例如/ ,/ 就/ 局部/ 挖掘/ 器/ 而言/ ,/ 通过/ 算法/ 1/ 对应/ 的/ Reduce/ 函数/ 的/ 调用/ 可以/ 得到/ 所有/ 数据/ 簇/ 对应/ 的/ 微簇/ 集合/ ,/ 所以/ 在/ 微簇/ 合并/ 操作/ (/ 算法/ 2/ 的/ 核心/ 操作/ )/ 的/ 实现/ 中/ ,/ 我们/ 设计/ 的/ Map/ (/ )/ 键值/ 对/ 是/ 〈/ (/ 簇号/ 1/ ,/ 簇号/ 2/ )/ ,/ 方差/ 和/ 〉/ ,/ 调用/ 它/ 来/ 完成/ 一个/ 微簇集/ 的/ 方差/ 和/ 映射/ ,/ 其中/ 输入/ 的/ 簇/ 号/ 1/ 和/ 2/ 都/ 来自/ 于/ 算法/ 1/ 中/ Reduce/ 的/ 输出/ 结果/ ./ 对应/ 的/ 微簇/ 合并/ 中/ 的/ Reduce/ (/ )/ 的/ 功能/ 则/ 是/ 寻找/ 最小/ 方差/ 和/ 、/ 并/ 将/ 最小/ 方差/ 和/ 的/ 两个/ 微簇/ 合并/ 起来/ 以/ 实现/ 对应/ 的/ 微簇/ 合并/ 功能/ ./ 类似/ 的/ ,/ 全局/ 挖掘/ 器/ 也/ 通过/ 这样/ 的/ 编程/ 方式/ 加以/ 实现/ ./ 就/ 局部/ 挖掘/ 器/ 和/ 全局/ 挖掘/ 器/ 的/ 连接/ 问题/ 而言/ ,/ 本文/ 实验/ 是/ 通过/ 中心/ 节点/ 的/ 存储/ 缓冲值/ 的/ 变化/ 来/ 触发/ 的/ ,/ 即当/ 3/ 个/ 局部/ 节点/ 的/ 局部/ 微簇/ 模式/ 全部/ 到达/ 中心/ 节点/ 时/ 就/ 触发/ 全局/ 分类器/ 开始/ 工作/ ./ 正如/ 定义/ 4/ 模型/ 所/ 刻画/ 的/ 那样/ ,/ 以/ 分布式/ 和/ 流动性/ 为/ 主要/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 分类/ 挖掘/ 是/ 在/ 多个/ 节点/ 、/ 由/ 多个/ 步骤/ 来/ 协作/ 完成/ 的/ ,/ 以/ 全局/ 分类器/ 为/ 最终/ 的/ 挖掘/ 成果/ ,/ 因此/ 全局/ 分类器/ 的/ 精度/ 决定/ 一个/ 方案/ 的/ 整体/ 挖掘/ 精度/ ./ 但是/ ,/ 一个/ 分布式系统/ 的/ 挖掘/ 时间/ 和/ 内存/ 消耗/ 总是/ 被/ 分散/ 在/ 多个/ 节点/ 上/ ,/ 因此/ 依据/ 定义/ 4/ 模型/ ,/ 局部/ 挖掘/ 器/ 和/ 全局/ 挖掘/ 器/ 都/ 有/ 对应/ 的/ 时空/ 效率/ 评估/ 问题/ ./ 当然/ ,/ 全局/ 的/ 性能/ 评估/ 是/ 最/ 重要/ 的/ ,/ 所以/ 以下/ 的/ 实验/ 主要/ 是/ 针对/ 全局/ 分类器/ 的/ 性能/ 进行/ 评价/ ./ 本文/ 方法/ 简称/ 为/ BDS/ -/ ensemble/ ,/ 使用/ 的/ 主要/ 控制参数/ 有/ H/ -/ size/ 、/ unlab/ %/ 和/ E/ -/ no/ ,/ 它们/ 分别/ 代表/ 时间/ 窗口/ 大小/ 、/ 未/ 标签/ 的/ 样本/ 比例/ 和/ 集成/ 分类器/ 的/ 弱/ 分类器/ 数目/ ./ 对比/ 算法/ 是/ DS/ -/ means/ [/ 8/ ]/ ,/ 其中/ DS/ -/ means/ 的/ 类/ 簇/ 数目/ 是/ 根据/ 数据/ 容量/ 动态/ 产生/ 的/ (/ 按照/ 原始/ 论文/ 方法/ )/ ./ 在/ 本文/ 实验/ 中/ ,/ DS/ -/ means/ 产生/ 的/ 类/ 簇/ 数目/ 在/ 30/ ~/ 100/ 的/ 范围/ 内/ ./ 之所以/ 选择/ DS/ -/ means/ 作为/ 对比/ 算法/ ,/ 主要/ 是/ 考虑/ 它/ 和/ 本文/ 方法/ 都/ 是/ 基于/ 局部/ 节点/ 和/ 中心/ 节点/ 构成/ 的/ 层次/ 式/ 挖掘/ 构架/ 的/ ,/ 因此/ 具有/ 可比性/ ./ 实验/ 1/ (/ 不同/ 历史/ 窗口/ 下/ 的/ 精度/ 测试/ )/ ./ 当/ 固定/ 其他/ 控制参数/ 时/ ,/ 按照/ 定义/ 4/ 模型/ 及/ 相关/ 的/ 算法/ 1/ ~/ 4/ ,/ 在/ 1000s/ 内/ 的/ 训练/ 数据流/ 中/ ,/ 使用/ 本文/ 方法/ BDS/ -/ ensemble/ 和/ 对比/ 算法/ DS/ -/ means/ 生成/ 对应/ 的/ 全局/ 分类器/ ./ 然后/ ,/ 利用/ KDD99/ 中/ 的/ 测试数据/ 集来/ 进行/ 精度/ 测试/ ./ 图/ 2/ 给出/ 了/ 随着/ 历史/ 窗口/ 长度/ 增加/ 时/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 的/ 错误率/ 对应/ 变化/ ./ 图/ 2/ 表明/ ,/ BDS/ -/ ensemble/ 的/ 错误率/ 明显/ 小于/ DS/ -/ means/ (/ 平均/ 优于/ 10/ %/ 左右/ )/ ./ 因为/ 历史/ 窗口/ 变/ 长/ 意味着/ 收集/ 的/ 数据/ 块/ 变大/ ,/ 所以/ 在/ 1000s/ 处理/ 的/ 窗口/ 数目/ 变/ 少/ ,/ 因而/ 挖掘/ 精度/ 应该/ 被/ 期望/ 变高/ ./ 图/ 2/ 说明/ ,/ 当/ 历史/ 窗口/ 增大/ 时/ BDS/ -/ ensemble/ 的/ 精度/ 在/ Page12/ 逐步/ 提升/ ,/ 而/ DS/ -/ means/ 则/ 表现/ 出/ 波动/ ./ 当然/ ,/ 设置/ 窗口/ 的/ 目的/ 就是/ 为了/ 利用/ 有限/ 的/ 计算机/ 资源/ (/ 内存/ 、/ CPU/ 等/ )/ 来/ 解决/ 潜在/ 无限/ 的/ 大/ 数据/ 问题/ ,/ 所以/ 也/ 不/ 可能/ 通过/ 无/ 限度/ 地/ 增加/ 窗口/ 长度/ 来/ 换取/ 分类/ 精度/ ./ 另外/ 从图/ 2/ 中/ 也/ 可以/ 看出/ ,/ 相比/ DS/ -/ means/ ,/ BDS/ -/ ensemble/ 的/ 稳定性/ 要/ 好/ ./ 就/ 图/ 2/ 而言/ :/ 当/ 窗口/ 长度/ 达到/ 30s/ 时/ ,/ BDS/ -/ ensemble/ 的/ 错误率/ 已经/ 下降/ 到/ 10/ %/ 左右/ ,/ 当/ 再/ 加大/ 窗口/ 长度/ 时/ ,/ 错误率/ 的/ 下降/ 幅度/ 明显/ 收窄/ ./ 这种/ 稳定性/ 使得/ 代价/ 与/ 精度/ 的/ 优化/ 的/ 分布式/ 流式/ 解决方案/ 成为/ 可能/ ./ 实验/ 2/ (/ 不同/ 的/ 集成/ 分类器/ 设置/ 下/ 的/ 分类/ 精度/ 测试/ )/ ./ 固定/ H/ -/ size/ =/ 30/ 和/ unlab/ %/ =/ 25/ %/ ,/ 在/ 1000s/ 内/ ,/ 每/ 增加/ 100s/ 执行/ 1/ 次/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 来/ 生成/ 全局/ 分类器/ ,/ 然后/ 进行/ 错误率/ 测试/ ./ 本/ 实验/ 的/ 目的/ 是/ 测试/ 集成/ 分类器/ 中/ 的/ 弱/ 分类器/ 数目/ 对/ 挖掘/ 精度/ 的/ 影响/ ,/ 图/ 3/ 给出/ 了/ 不同/ 的/ 弱/ 分类器/ 数目/ 下/ 的/ BDS/ -/ ensemble/ 的/ 错误率/ 随着/ 训练/ 时间/ 增加/ 时/ 的/ 变化/ 情况/ (/ 对比/ 算法/ 是/ DS/ -/ means/ )/ ./ 此外/ ,/ 为了/ 更/ 清楚/ 地/ 看到/ 两种/ 方法/ 的/ 差别/ ,/ 图/ 4/ 把/ E/ -/ no/ =/ 20/ 时/ 的/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 的/ 错误率/ 用/ 折线图/ 形式/ 展示/ 出来/ ./ 从图/ 3/ 中/ 可以/ 看出/ :/ 当/ E/ -/ no/ =/ 5/ 时/ ,/ BDS/ -/ ensemble/ 的/ 分类/ 精度/ 并/ 不是/ 很/ 好/ ;/ 在/ E/ -/ no/ =/ 10/ 时/ 已经/ 有/ 很大/ 改善/ ;/ 当/ E/ -/ no/ =/ 15/ 和/ E/ -/ no/ =/ 20/ 时/ ,/ BDS/ -/ 图/ 3/ 流动/ 数据/ 在/ 不同/ 的/ 集成/ 分类/ 设置/ 下/ 的/ 错误率/ 变化/ ensemble/ 的/ 分类/ 精度/ 随着/ 训练/ 时间/ 的/ 增加/ 在/ 稳步/ 提升/ ,/ 当/ 训练/ 了/ 1000s/ 后/ ,/ 其/ 分类/ 精度/ 已经/ 达到/ 90/ %/ 左右/ ./ 相比而言/ ,/ DS/ -/ means/ 则/ 不/ 稳定/ ,/ 而且/ 分类/ 精度/ 明显/ 要/ 比/ 本文/ 方法/ 要/ 差/ ./ 从图/ 4/ 中/ 可以/ 清楚/ 看到/ :/ 当/ 集成/ 分类器/ 维持/ 一定/ 大小/ 的/ 弱/ 分类器/ 数目/ 时/ (/ 如/ 实验/ 中/ 的/ E/ -/ no/ =/ 20/ )/ ,/ BDS/ -/ ensemble/ 会/ 随着/ 训练/ 时间/ 的/ 增加/ 分类/ 精度/ 逐步/ 提升/ ,/ 而且/ 逐步/ 稳定/ 在/ 一定/ 的/ 精度/ 范围/ 内/ ./ 相/ 比较而言/ ,/ DS/ -/ means/ 则/ 存在/ 一定/ 的/ 波动/ ./ 实验/ 3/ (/ 执行/ 时间/ 和/ 内存空间/ 测试/ )/ ./ 固定/ unlab/ %/ =/ 25/ %/ 和/ E/ -/ no/ =/ 20/ ,/ 通过/ 设置/ 不同/ 的/ 历史/ 窗口/ 长度/ ,/ 跟踪/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 执行/ 时/ 在/ 中心/ 节点/ 的/ 时间/ 花费/ 和/ 空间/ 消耗/ ./ 因为/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 都/ 需要/ 依次/ 经过/ 局部/ 节点/ 和/ 中心/ 节点/ 挖掘/ 来/ 进行/ ,/ 在/ 相应/ 节点/ 上/ 都/ 有/ 对应/ 的/ CPU/ 时间/ 占用/ 和/ 内存空间/ 消费/ ,/ 因此/ 本/ 实验/ 只/ 跟踪/ 了/ 中心/ 节点/ 的/ 时间/ 和/ 空间/ 消耗/ ./ 就/ 中心/ 节点/ 而言/ ,/ 它们/ 的/ 时间/ 和/ 空间/ 消耗/ 主要/ 花费/ 在/ 全局/ 模式/ 的/ 更新/ 上/ ./ 图/ 5/ 给出/ 了/ 在/ 中心/ 节点/ 中/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 学习/ 全局/ 分类器/ 的/ 时间/ 花费/ 比较/ ,/ 而图/ 6/ 则/ 给出/ 了/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 学习/ 全局/ 分类器/ 的/ 内存/ 消耗/ 情况/ ./ 从图/ 5/ 中/ 可以/ 看出/ ,/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 随着/ 历史/ 窗口/ 的/ 时间/ 增长/ ,/ 一次/ 增量/ 式/ 更新/ 的/ 时间/ 图/ 5/ 时间/ 窗口/ 长度/ 增加/ 时/ 执行/ 时间/ 的/ 变化/ 情况/ 图/ 6/ 时间/ 窗口/ 长度/ 增加/ 时/ 内存空间/ 的/ 变化/ 情况/ Page13/ 花费/ 都/ 会/ 增加/ ./ 这/ 是因为/ 历史/ 窗口/ 增长/ 使得/ CPU/ 的/ 窗口/ 计算/ 时间/ 增加/ ./ 同时/ ,/ 虽然/ BDS/ -/ ensemble/ 比/ DS/ -/ means/ 略/ 高/ ,/ 但是/ 两者/ 的/ 攀升/ 幅度/ 相当/ ./ 这/ 主要/ 是因为/ BDS/ -/ ensemble/ 使用/ 的/ 集成/ 学习/ 方法/ 需要/ 多次/ 调用/ C4/ ./ 5/ 算法/ ./ 但是/ ,/ 按照/ 算法/ 4/ 的/ 设计/ ,/ 每次/ 调用/ C4/ ./ 5/ 算法/ 时/ 不是/ 使用/ 全部/ 的/ 训练样本/ 、/ 而是/ 随机/ 选取/ 部分/ 样本/ ,/ 所以/ BDS/ -/ ensemble/ 的/ 执行/ 时间/ 并/ 没有/ 比/ DS/ -/ means/ 有/ 特别/ 明显/ 地/ 提升/ ./ 图/ 6/ 中/ 说明/ ,/ BDS/ -/ ensemble/ 和/ DS/ -/ means/ 的/ 内存/ 消耗/ 相差/ 不大/ ./ 同样/ 是/ 由于/ BDS/ -/ ensemble/ 在/ 调用/ C4/ ./ 5/ 算法/ 时/ 使用/ 地是/ 部分/ 训练样本/ ,/ 所以/ 内存/ 消耗/ 要/ 稍微/ 少于/ DS/ -/ means/ ./ 综合/ 实验/ 1/ 、/ 2/ 和/ 3/ ,/ 面对/ 复杂/ 的/ 大/ 数据/ 应用/ ,/ 本文/ 方法/ 能够/ 通过/ 较/ 小/ 时间/ 代价/ 的/ 增加/ 获得/ 较大/ 挖掘/ 精度/ 的/ 提升/ ,/ 进而/ 在/ 精度/ 与/ 代价/ 的/ 平衡/ 上/ 获得/ 了/ 一个/ 较/ 优化/ 的/ 解决/ 方法/ ./ 6/ 优势/ 和/ 局限性/ 讨论/ 本文/ 针对/ 大/ 数据/ 4V/ 属性/ 难以/ 进行/ 形式化/ 研究/ 的/ 问题/ ,/ 分析/ 了/ 大/ 数据/ 隐藏/ 的/ 技术/ 属性/ ./ 从/ 概念/ 上/ 讲/ ,/ 不同/ 技术/ 属性/ 及其/ 组合/ 能/ 演变/ 出/ 特定/ 类型/ 的/ 大/ 数据/ 形态/ ./ 聚焦/ 在/ 大/ 数据/ 的/ 分布式/ 和/ 流动性/ 的/ 技术/ 特征/ 上/ ,/ 本文/ 研究/ 了/ 这类/ 大/ 数据/ 的/ 知识/ 挖掘/ 问题/ ,/ 并且/ 可以/ 契合/ 电子商务/ 业务/ 、/ 股票交易/ 等/ 大/ 数据/ 的/ 应用/ 需求/ ./ 本文/ 模型/ 和/ 方法/ 的/ 优势/ 首先/ 表现/ 在/ 合理/ 的/ 网络通讯/ 代价/ 上/ ./ 大/ 数据/ 的/ 分布式/ 挖掘/ 必须/ 面对/ 代价/ 与/ 精度/ 的/ 平衡/ 问题/ ,/ 再/ 高精度/ 的/ 方法/ 如果/ 存在/ 无法/ 承受/ 的/ 代价/ (/ 包含/ 网络/ 传输/ 量/ )/ 都/ 是/ 不/ 可行/ 的/ ./ 本文/ 方法/ 的/ 优势/ 也/ 体现/ 在/ 方法/ 和/ 技术/ 的/ 集成/ 上/ ./ 大/ 数据/ 中/ 分布式/ 挖掘/ 问题/ 应该/ 建立/ 在/ 多/ 节点/ 、/ 多/ 步骤/ 协同工作/ 基础/ 上/ ,/ 而/ 不同/ 数据挖掘/ 方法/ 在/ 不同/ 挖掘/ 步骤/ 中/ 的/ 有效性/ 和/ 局限性/ 是/ 客观存在/ 的/ ,/ 因此/ 针对/ 不同/ 步骤/ 或者/ 阶段/ 来/ 寻找/ 和/ 实施/ 对应/ 的/ 挖掘/ 技术/ 是/ 本文/ 解决问题/ 的/ 基本/ 理念/ 之一/ ./ 本文/ 在/ 局部/ 节点/ 采用/ 微簇/ 挖掘/ 技术/ 、/ 在/ 全局/ 节点/ 利用/ 集成/ 学习/ 方法/ 、/ 针对/ 大/ 数据/ 特点/ 来/ 研究/ 和/ 使用/ 块/ 到/ 块/ 的/ 增量/ 式/ 挖掘/ 手段/ 等/ ,/ 都/ 体现/ 了/ 这种/ 理念/ 的/ 运用/ ./ 对应/ 的/ 实验/ 也/ 验证/ 了/ 这种/ 集成化/ 的/ 解决方案/ 的/ 有效性/ 和/ 科学性/ ./ 当然/ ,/ 本文/ 模型/ 和/ 方法/ 也/ 存在/ 应用/ 的/ 局限性/ ./ 主要/ 表现/ 在/ 两个/ 方面/ :/ (/ 1/ )/ 本文/ 探讨/ 的/ 只是/ 大/ 数据/ 中/ 的/ 一类/ 数据/ 形态/ ,/ 并/ 不能/ 完全/ 适应/ 所有/ 的/ 大/ 数据/ 应用/ ./ 例如/ :/ 对于/ 像/ 大型/ 电子商务/ 网站/ 的/ 交易/ 大/ 数据/ 而言/ ,/ 本文/ 模型/ 和/ 方法/ 可以/ 提供/ 一种/ 可行/ 的/ 解决方案/ ;/ 但是/ 对于/ 像/ 门户网站/ 这样/ 具有/ 数据类型/ 多样化/ 的/ 大/ 数据/ 而言/ ,/ 基于/ 本文/ 定义/ 1/ 的/ 数据/ 形态/ 就/ 无法/ 形成/ 规格化/ 的/ 数据/ 描述/ ,/ 因而/ 本文/ 的/ 模型/ 和/ 方法/ 就/ 不能/ 完全/ 解决/ 这/ 类/ 问题/ ;/ (/ 2/ )/ 本文/ 探讨/ 的/ 全局/ 样本/ 恢复/ 算法/ 是/ 以/ 数据/ 的/ 正态分布/ 为/ 前提/ 的/ ,/ 对于/ 数据分布/ 极其/ 不/ 规范/ 的/ 情况/ ,/ 算法/ 的/ 精度/ 可能/ 会/ 下降/ ./ 7/ 总结/ 大/ 数据/ 概念/ 在/ 强大/ 的/ 应用/ 需求/ 下/ 被/ 提出/ ,/ 而且/ 随着/ 云/ 计算/ 等/ 软硬件/ 基础设施/ 的/ 发展/ ,/ 使得/ 大/ 数据/ 的/ 分析/ 成为/ 可能/ ./ 然而/ ,/ 大/ 数据/ 的/ 研究/ 和/ 应用/ 仍然/ 处于/ 起步/ 阶段/ ,/ 有/ 许多/ 挑战性/ 的/ 问题/ 需要/ 逐步/ 解决/ ./ 特别/ 是/ ,/ 在/ 理论/ 和/ 方法/ 上/ 的/ 需求/ 越来越/ 迫切/ ./ 本文/ 从大/ 数据/ 的/ 分布式/ 和/ 流动性/ 这些/ 技术/ 特征/ 出发/ ,/ 在/ 挖掘/ 模型/ 及/ 关键/ 算法/ 等/ 方面/ 进行/ 了/ 系统化/ 地/ 研究/ 和/ 设计/ ./ 本文/ 首先/ 从大/ 数据/ 的/ 应用/ 需求/ 入手/ ,/ 分析/ 了/ 具有/ 分布式/ 和/ 流动性/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 应用/ 范围/ 和/ 潜在/ 的/ 应用/ 价值/ ./ 然后/ ,/ 借助于/ 分布式/ 数据流/ 概念/ 刻画/ 了/ 这类/ 大/ 数据/ 的/ 抽象/ 数据模型/ ,/ 并/ 在/ 此基础/ 上/ 设计/ 了/ 一个/ 大/ 数据/ 的/ 分类/ 模型/ ./ 最后/ ,/ 对于/ 模型/ 中/ 关键/ 操作/ 对应/ 的/ 算法/ 进行/ 了/ 设计/ ./ 本文/ 对应/ 的/ 研究/ ,/ 突出/ 体现/ 了/ 利用/ 技术/ 的/ 集成化/ 来/ 系统化/ 地/ 解决/ 大/ 数据挖掘/ 问题/ 的/ 主要/ 思想/ ,/ 在/ 分布式/ 的/ 微簇/ 挖掘/ 、/ 块/ 到/ 块/ 的/ 增量/ 式/ 学习/ 以及/ 基于/ 淘汰/ 策略/ 的/ 集成/ 分类器/ 学习/ 等/ 理论/ 和/ 方法/ 上/ 进行/ 了/ 创新性/ 的/ 工作/ ./ 本文/ 对应/ 的/ 大/ 数据/ 的/ 分类/ 挖掘/ 构架/ 及其/ 系列/ 算法/ ,/ 不仅/ 可以/ 全方位/ 地/ 改善/ 以/ 分布式/ 和/ 流动性/ 为/ 主要/ 技术/ 特征/ 的/ 大/ 数据/ 的/ 分类/ 挖掘/ 效果/ ,/ 而且/ 在/ 分布式计算/ 、/ 内存/ 占用/ 及/ 节点/ 间/ 的/ 网络通讯/ 代价/ 的/ 平衡/ 问题/ 上/ 可以/ 获得/ 了/ 一个/ 优化/ 的/ 结果/ ./ 进一步/ 的/ 工作/ 包括/ :/ 针对/ 非正/ 态化/ 的/ 数据分布/ 情况/ ,/ 研究/ 基于/ 密度估计/ 等/ 的/ 样本/ 重构/ 方法/ ;/ 寻找/ 非/ 样本/ 重构/ 技术/ 的/ 全局/ 模式/ 挖掘/ 方法/ ;/ 针对/ 大/ 数据/ 的/ 其他/ 需求/ ,/ 研究/ 分类/ 以外/ 的/ 挖掘/ 问题/ ,/ 如/ 关联/ 规则/ 、/ 概念/ 归纳/ 等/ ;/ 针对/ 大/ 数据/ 的/ 其他/ 技术/ 特征/ ,/ 如/ 高维/ 性/ 、/ 数据/ 半/ 结构化/ 等/ ,/ 开展/ 相应/ 的/ 理论/ 、/ 模型/ 和/ 算法/ 研究/ ./ 

