Page1/ 面向/ 批量/ 插入/ 优化/ 的/ 并行/ 存储/ 引擎/ MTPower/ 陈虎/ 1/ )/ 唐海/ 浩/ 2/ )/ 廖江苗/ 1/ )/ 彭江峰/ 2/ )/ 1/ )/ (/ 华南理工大学/ 软件/ 学院/ 广州/ 510006/ )/ 2/ )/ (/ 华南理工大学/ 计算机科学/ 与/ 工程学院/ 广州/ 510006/ )/ 摘要/ 针对/ 多核/ 处理器/ 的/ 特点/ ,/ 文章/ 提出/ 了/ 一个/ 符合/ MySQL/ 接口标准/ 的/ 并行/ 存储/ 引擎/ MTPower/ ./ 该/ 存储/ 引擎/ 着重/ 利用/ 多核/ 处理器/ 的/ 并行计算/ 能力/ 提升/ 批量/ 插入/ 过程/ 中/ 的/ 索引/ 产生/ 过程/ ,/ 主要/ 包含/ 存储/ 引擎/ 接口/ 、/ 并行/ 批量/ 线性/ Hash/ 索引/ 、/ 并行/ 批量/ B/ +/ 树/ 插入/ 、/ 支持/ 并行/ 访问/ 的/ 磁盘/ 存储/ 缓冲/ 等/ 部分/ ./ 测试/ 结果表明/ ,/ 在/ 批量/ 插入/ 记录/ 且/ 需要/ 创建/ Hash/ 和/ B/ +/ 树/ 索引/ 时/ ,/ MTPower/ 的/ 性能比/ 经典/ 的/ 单线程/ 存储/ 引擎/ MyISAM/ 最高/ 可以/ 提高/ 6.1/ 倍/ 和/ 4.8/ 倍/ ;/ 在/ 系统/ 中线/ 程/ 总数/ 略大于/ 处理器/ 核数/ 时/ ,/ MTPower/ 可以/ 达到最佳/ 性能/ ;/ 在/ 处理器/ 核/ 的/ 数量/ 增加/ 时/ ,/ MTPower/ 的/ 性能/ 也/ 能/ 随之/ 提高/ ./ 关键词/ 并行/ 数据库/ ;/ Hash/ 并行/ 索引/ ;/ B/ +/ 树/ 并行/ 索引/ ;/ 磁盘/ 缓冲/ ;/ 多核/ 处理器/ 1/ 引言/ 随着/ 多核/ 时代/ 的/ 来临/ ,/ 如何/ 充分利用/ 多核/ 处理/ Page2/ 解析/ 、/ 优化/ 与/ 执行/ 等/ ;/ 存储/ 引擎/ 负责/ 数据/ 存储/ 、/ 索引/ 管理/ 、/ 锁/ 、/ 事务管理/ 、/ 恢复/ 等/ ./ MySQL/ 的/ 数据库管理员/ 可以/ 选择/ 最/ 接近/ 自身/ 应用/ 特点/ 的/ 存储/ 引擎/ ,/ 或者/ 定制/ 专用/ 存储/ 引擎/ ,/ 以/ 在/ 特定/ 需求/ 下/ 尽可能/ 达到最佳/ 性能/ ./ 本文/ 提出/ 的/ 存储/ 引擎/ MTPower/ 是/ 一种/ 针对/ 多核/ 处理器/ 平台/ 上/ 大批量/ 数据/ 插入/ 优化/ 的/ MySQL/ 存储/ 引擎/ ./ MTPower/ 基于/ 能/ 进行/ 自动/ 负载/ 均衡/ 的/ MSI/ 并行/ 编程/ 模型/ [/ 3/ ]/ 开发/ ,/ 支持/ Hash/ 索引/ 和/ B/ +/ 树/ 索引/ 的/ 并行/ 更新/ ,/ 包含/ 能/ 支持/ 多个/ 线程/ 并行/ 访问/ 的/ 磁盘/ 缓冲/ 和/ 内存/ 缓冲/ ,/ 可以/ 在/ 多/ 核/ 处理器/ 平台/ 上/ 有效/ 开发/ 记录/ 批量/ 插入/ 过程/ 中/ 的/ 并行性/ ./ 本文/ 第/ 2/ 节对/ MySQL/ 常用/ 的/ 存储/ 引擎/ 进行/ 性能/ 分析/ ,/ 找出/ 其/ 不足之处/ ;/ 第/ 3/ 节/ 介绍/ 并行/ 存储/ 引擎/ MTPower/ 的/ 总体/ 结构/ ;/ 第/ 4/ 节/ 和/ 第/ 5/ 节/ 分别/ 介绍/ 针对/ 多核/ 处理器/ 系统/ 的/ 批量/ 并行/ 线性/ Hash/ 和/ B/ +/ 树/ 索引/ 更新/ 算法/ ;/ 第/ 6/ 节/ 介绍/ 支持/ 并行/ 访问/ 的/ 磁盘/ 缓冲区/ ;/ 第/ 7/ 节/ 给出/ 并行/ 存储/ 引擎/ 的/ 性能/ 测试/ 结果/ 与/ 分析/ ;/ 最后/ 一节/ 为/ 总结/ ./ 2/ 常见/ 存储/ 引擎/ 性能/ 分析/ MySQL/ 有/ MyISAM/ 、/ InnoDB/ 、/ Merge/ 、/ Heap/ 、/ Falcon/ 等/ 多个/ 常用/ 的/ 存储/ 引擎/ ./ 本节/ 将/ 测试/ 和/ 分析/ MyISAM/ 和/ Falcon/ 存储/ 引擎/ 的/ 主要/ 性能/ ./ 其中/ ,/ MyISAM/ 为/ 单线程/ 的/ 存储/ 引擎/ ,/ 是/ 当前/ MySQL/ 应用/ 最为/ 广泛/ 的/ 存储/ 引擎/ ;/ Falcon/ 为/ 多线程/ 的/ 存储/ 引擎/ ,/ 包含/ 4/ 个/ 工作/ 线程/ [/ 4/ -/ 5/ ]/ ,/ 可以/ 更/ 有效/ 发挥/ 多核/ 处理器/ 的/ 性能/ 优势/ ./ 系统/ 测试/ 的/ 平台/ 如表/ 1/ 所示/ ./ 测试工具/ 采用/ MySQL/ 自带/ 的/ bench/ 套件/ ,/ 包含/ 了/ 9/ 个/ 测试/ ,/ 可以/ 测试/ 表/ 的/ 修改/ 、/ 插入/ 、/ 查询/ 、/ 创建/ 和/ 事务/ 等/ 方面/ 的/ 性能/ ./ 图/ 1/ 给出/ 了/ Falcon/ 引擎/ 和/ MyISAM/ 引擎/ 在/ 4/ 核/ 和/ 8/ 核/ 平台/ 上/ 相对/ 单核/ PC/ 的/ 加速/ 比/ ./ 单核/ PCIntelCeleronL116KB4/ 核/ 服务器/ XeonE51108/ 核/ 服务器/ XeonE5310/ 从图/ 1/ 可以/ 看出/ ,/ Falcon/ 存储/ 引擎/ 在/ 4/ 核/ 处理器/ 上/ 的/ 加速/ 效果/ 明显/ ,/ 但是/ 8/ 核/ 处理器/ 上/ 的/ 速度/ 与/ 4/ 核/ 相当/ ./ 这是/ 由于/ Falcon/ 引擎/ 内部/ 固定/ 使用/ 4/ 个/ 线程/ ,/ 当/ 处理器/ 核数/ 超过/ 4/ 时/ ,/ 无法/ 发挥/ 更/ 多处理器/ 的/ 能力/ ./ MyISAM/ 是/ 单线程/ 存储/ 引擎/ ,/ 所以/ 在/ 4/ 核/ 与/ 8/ 核/ 处理器/ 上/ 的/ 性能/ 没有/ 显著/ 提升/ ,/ 实验/ 中/ 的/ 少许/ 性能/ 提升/ 得益于/ 多核/ 系统/ 的/ Cache/ 容量/ 比/ 单核/ 系统/ 要/ 大/ ./ 图/ 1Falcon/ 与/ MyISAM/ 在/ 4/ 核/ 与/ 8/ 核/ 处理器/ 上/ 的/ 加速/ 比/ 对比/ 为了/ 进一步/ 研究/ 批量/ 插入/ 过程/ 中/ 索引/ 数目/ 对/ 性能/ 的/ 影响/ ,/ 我们/ 使用/ KCachegrind/ 性能/ 分析/ 工具/ 测试/ 不同/ 索引/ 数目/ 下/ 插入/ 1/ 千万条/ 记录/ 时/ ,/ MyISAM/ 存储/ 引擎/ 中/ 负责/ 记录/ 与/ 索引/ 数据/ 插入/ 的/ write/ _/ row/ 函数/ 执行/ 时间/ 占/ 总/ 时间/ 的/ 比例/ ,/ 如图/ 2/ 所示/ ./ 可以/ 看出/ ,/ 在/ 没有/ 索引/ 的/ 情况/ 下/ 插入/ 1/ 千万条/ Page3/ 记录/ ,/ write/ _/ row/ 的/ 执行/ 时间/ 只/ 占/ 总/ 执行/ 时间/ 的/ 3.5/ %/ ,/ 但是/ 有/ 4/ 个/ Hash/ 索引/ 时/ ,/ write/ _/ row/ 的/ 执行/ 时间/ 比/ 增加/ 到/ 82/ %/ ,/ 可见/ 更新/ 索引/ 对/ 批量/ 插入/ 数据/ 的/ 性能/ 具有/ 重要/ 的/ 影响/ ./ 从/ 上述/ 实验/ 结果/ ,/ 可以/ 发现/ :/ (/ 1/ )/ Falcon/ 存储/ 引擎/ 的/ 线程/ 数目/ 固定/ ,/ 导致/ 在/ 4/ 核/ 与/ 8/ 核/ 处理器/ 上/ 性能/ 相差无几/ ,/ 可扩展性/ 有限/ ;/ (/ 2/ )/ MyISAM/ 是/ 单线程/ 存储/ 引擎/ ,/ 处理器/ 核数/ 的/ 增加/ 并/ 不能/ 带来/ 性能/ 提升/ ;/ (/ 3/ )/ MyISAM/ 中/ 更新/ 索引/ 是/ 批量/ 记录/ 插入/ 过程/ 的/ 主要/ 性能/ 瓶颈/ ./ 本文/ 提出/ 的/ 多/ 核/ 存储/ 引擎/ MTPower/ 正是/ 针对/ MySQL/ 已有/ 存储/ 引擎/ 的/ 缺点/ ,/ 着重/ 提升/ 批量/ 记录/ 插入/ 的/ 索引/ 产生/ 性能/ ,/ 同时/ 提升/ 系统/ 的/ 可/ 扩展/ 能力/ ./ 3MTPower/ 总体/ 结构/ MTPower/ 存储/ 引擎/ 采用/ 并行/ 编程/ 模型/ MSI/ 多线程/ 调度/ 接口/ [/ 3/ -/ 4/ ]/ 作为/ 系统/ 的/ 基础/ ./ MSI/ 模型/ 以/ 任务/ 池/ 作为/ 系统/ 基本/ 部件/ ,/ 由/ 内部/ 线程/ 调度/ 器/ 根据/ 各个/ 任务/ 池/ 的/ 负载/ 情况/ 动态分配/ 执行/ 线程/ ./ MSI/ 中/ 的/ 任务/ 池/ 可以/ 根据/ 任务/ 之间/ 的/ 依赖/ 关系/ 连接成/ 流水线/ 或/ 其它/ 结构/ ./ MTPower/ 存储/ 引擎/ 内部结构/ 如图/ 3/ 所示/ ./ 其/ 外部/ 接口/ 为/ MySQL/ 的/ 标准/ 存储/ 引擎/ 接口/ ,/ 内部/ 包含/ :/ 支持/ 并行/ 分配/ 和/ 释放/ 的/ 多线程/ 内存/ 管理器/ ;/ 支持/ 多线程/ 并行/ 访问/ 的/ 磁盘/ 缓冲区/ ;/ 支持/ 批量/ 索引/ 并行/ 更新/ 的/ 任务/ 池/ ./ 在/ MTPower/ 中/ ,/ 插入/ 记录/ 的/ 过程/ 采用/ 基于/ MSI/ 任务/ 池/ 的/ 方法/ ,/ 其/ 主要/ 流程/ 包括/ :/ (/ 1/ )/ 从/ 存储/ 引擎/ 接口/ 接收/ MySQL/ 的/ SQL/ 层/ 传递/ 过来/ 要/ 插入/ 的/ 记录/ 数据/ ,/ 分析/ 出/ 记录/ 中/ 的/ 索引/ 字/ 段/ 数据/ ,/ 从/ 内存/ 管理器/ 申请/ 内存/ 块/ 保存/ 需要/ 索引/ 字段/ 的/ 数据/ ,/ 并/ 将/ 内存地址/ 写/ 进/ 批量/ 索引/ 任务/ 池/ ,/ 最后/ 将/ 整条/ 记录/ 写入/ 磁盘/ 缓冲区/ ;/ (/ 2/ )/ 在/ 批量/ 索引/ 任务/ 池/ 的/ 记录/ 达到/ 了/ 一定/ 数量/ 后/ ,/ 采用/ 并行/ 方式/ 更新/ Hash/ 索引/ 或/ B/ +/ 树/ 索引/ ,/ 并/ 将/ 结果/ 保存/ 到/ 多线程/ 磁盘/ 缓冲区/ ./ 上述/ 索引/ 更新过程/ 异步/ 于/ SQL/ 层/ 的/ 记录/ 插入/ 过程/ ,/ 使得/ SQL/ 层/ 的/ 记录/ 插入/ 操作/ 非常简单/ ,/ 从而/ 有效/ 提高/ 了/ 其/ 插入/ 记录/ 的/ 速度/ ,/ 并/ 使得/ SQL/ 层/ 和/ 索引/ 更新过程/ 可以/ 在/ 多/ 核/ 处理器/ 平台/ 上/ 并行执行/ ./ 4/ 批量/ 并行/ 线性/ Hash/ 索引/ 线性/ Hash/ 索引/ [/ 5/ ]/ 是/ 一种/ 动态/ Hash/ 方法/ ,/ 其/ Hash/ 表/ 可以/ 随着/ 记录/ 项/ 的/ 插入/ 或/ 删除/ 而/ 扩张/ 或/ 收缩/ ,/ 而且/ 随着/ Hash/ 表/ 的/ 桶/ 数目/ 变化/ ,/ Hash/ 函数/ 也/ 随之/ 改变/ ,/ 这种/ 动态/ 处理/ 方法/ 不仅/ 解决/ 了/ 空间/ 利用率/ 问题/ ,/ 而且/ 有效/ 地/ 降低/ 了/ 地址/ 冲突/ ./ 并发/ 的/ 线性/ Hash/ 操作/ 由/ Ellis/ 在/ 1987/ 年/ 提出/ [/ 6/ ]/ ,/ 其/ 目的/ 是/ 为了/ 增强/ 线性/ Hash/ 的/ 并发/ 访问/ 操作/ ./ Garcia/ -/ Monlina/ 等/ 研究/ 了/ 内存/ 数据库/ 中/ Hash/ 表/ 的/ 访问/ 操作/ 等/ 问题/ [/ 7/ ]/ ./ 本文/ 在/ 原有/ 串行/ 线性/ Hash/ 索引/ 更新/ 算法/ 的/ 基础/ 上/ 提出/ 了/ 并行/ 化/ 的/ 批量/ Hash/ 索引/ 更新/ 算法/ ./ 其/ 主要/ 特点/ 是/ :/ 不/ 立刻/ 将/ 单个/ 索引/ 记录/ 插入/ 到/ Hash/ 表中/ ,/ 而/ 在/ 内存/ 中/ 保留/ 这些/ 记录/ 直到/ 达到/ 一定/ 数量/ 再/ 进行/ 批量/ 并行/ 插入/ ./ 假定/ T/ 为/ 一次/ 批量/ 插入/ 的/ 记录/ 总数/ ,/ K/ 为/ 分裂/ 桶/ 的/ 阈值/ ,/ b/ 为/ 桶/ 的/ 容量/ ,/ B/ 为/ 当前/ 桶/ 的/ 总数/ ,/ 那么/ 对于/ T/ 条/ 记录/ 的/ 插入/ 应该/ 增加/ 的/ 桶/ 数目/ 为/ BT/ =/ T/ // (/ K/ ×/ b/ )/ ./ 根据/ 当前/ 待/ 分裂/ 桶/ 的/ 位置/ P0/ ,/ 有/ 两种/ 情况/ ,/ 如图/ 4/ 所示/ ./ 情况/ 1/ ./ 此时/ P0/ +/ BT/ </ 2N/ ,/ 相应/ 算法/ 如下/ ./ (/ 1/ )/ 使用/ 一个/ 线程/ 分裂/ 第/ P0/ 号/ 桶/ 到/ 第/ P0/ +/ BT/ -/ 1/ 号/ 桶/ ,/ 其中/ P0/ +/ i/ 号/ 桶/ 的/ 元素/ 分裂/ 到/ P0/ +/ iPage4/ 号/ 桶/ 和/ B/ +/ i/ 号/ 桶/ (/ i/ =/ 0/ ,/ …/ ,/ BT/ -/ 1/ )/ ;/ 的/ 第/ 0/ 号/ 桶/ 到/ 第/ B/ +/ BT/ -/ 1/ 号/ 桶/ ./ (/ 2/ )/ P0/ =/ P0/ +/ BT/ ;/ (/ 3/ )/ 所有/ 线程/ 并行/ 地/ 将/ T/ 条/ 记录/ 插入/ Hash/ 表/ 情况/ 2/ ./ 此时/ P0/ +/ BT/ / 2N/ ,/ 相应/ 算法/ 如下/ ./ (/ 1/ )/ 使用/ Hash/ 函数/ HN/ +/ 1/ 分裂/ P0/ 到/ 2N/ -/ 1/ 号/ 桶/ ,/ 使用/ Hash/ 函数/ HN/ +/ 2/ 分裂/ 第/ 0/ 号/ 到/ 第/ (/ (/ P0/ +/ BT/ )/ mod2N/ )/ -/ 1/ 号/ 桶/ ;/ (/ 2/ )/ P0/ =/ (/ P0/ +/ BT/ )/ mod2N/ ;/ (/ 3/ )/ 所有/ 线程/ 并行/ 地/ 将/ T/ 条/ 记录/ 使用/ Hash/ 函数/ HN/ +/ 1/ 插入/ Hash/ 表/ 的/ 第/ 0/ 号/ 桶/ 到/ 第/ 2N/ +/ 1/ +/ (/ (/ P0/ +/ BT/ )/ mod2N/ )/ -/ 1/ 号/ 桶/ ./ Hash/ 函数/ 由式/ (/ 1/ )/ [/ 5/ ]/ 给出/ ,/ 其中/ M/ 为/ 初始/ 桶/ 数目/ :/ HN/ (/ Key/ )/ =/ Keymod/ (/ 2NM/ )/ (/ Keymod2N/ / P/ )/ 在/ T/ 个/ 记录/ 并行/ 插入/ 过程/ 中/ ,/ 通过/ 磁盘/ 缓冲区/ 的/ 锁/ 避免/ 插入/ 相同/ 的/ 桶/ 时而/ 产生/ 的/ 互斥/ 问题/ ./ 批量/ 并行/ Hash/ 更新/ 算法/ 相比/ 传统/ 串行/ 算法/ 有/ 如下/ 优势/ :/ (/ 1/ )/ 预/ 分裂/ 算法/ 减少/ 很多/ 冗余/ 的/ 分裂/ 操作/ ./ 在/ 串行/ 插入/ 过程/ 中/ ,/ 记录/ r/ 的/ 初始/ 位置/ 是/ 第/ b/ 号/ 桶/ ./ 桶/ b/ 分裂/ 后/ ,/ r/ 可能/ 要/ 转/ 放到/ b/ +/ M/ 号/ 桶/ 中/ ;/ 同理/ ,/ b/ +/ M/ 号/ 桶/ 分裂/ 后/ ,/ 记录/ r/ 可能/ 又/ 要/ 转/ 放到/ b/ +/ 2M/ 号/ 桶/ 中/ ./ 以此类推/ ,/ 经过/ i/ 次/ 分裂/ 之后/ ,/ 记录/ r/ 可能/ 最终/ 是/ 放入/ b/ +/ iM/ 号/ 桶/ 中/ ./ 在/ 批量/ 插入/ 算法/ 中/ ,/ 记录/ r/ 可以/ 一次性/ 定位/ 到/ 第/ b/ +/ iM/ 号/ 桶/ 中/ ;/ (/ 2/ )/ 多线程/ 并行/ 插入/ 记录/ 可以/ 充分利用/ 多核/ 处理器/ 的/ 并行计算/ 能力/ ./ 5/ 批量/ 并行/ B/ +/ 树/ 插入/ B/ +/ 树是/ 一种/ 适用/ 于/ 磁盘/ 数据库系统/ 的/ 索引/ 机制/ ./ B/ +/ 树/ 的/ 每个/ 结点/ 有/ 多/ 棵子/ 树/ ,/ 形状/ 宽/ 而/ 浅/ ,/ 从而/ 只/ 需较/ 少/ 次数/ 的/ 磁盘/ I/ // O/ 就/ 可以/ 找到/ 目标/ 数据/ [/ 8/ ]/ ./ 但是/ B/ +/ 有/ 一个/ 缺点/ :/ 并发/ 度低/ ./ 因此/ ,/ Lehman/ 和/ Yao/ 提出/ 了/ 一种/ B/ +/ 树/ 的/ 变形/ —/ —/ —/ Blink/ 树结构/ ,/ 它/ 具有/ 极高/ 的/ 同步操作/ 性能/ [/ 9/ ]/ ./ 由于/ Blink/ 树/ 也/ 是/ B/ +/ 树/ 的/ 一种/ ,/ 为/ 方便/ 起/ 见/ ,/ 本文/ 把/ Blink/ 树/ 也/ 称为/ B/ +/ 树/ ./ 当前/ ,/ 人们/ 对/ B/ +/ 树/ 索引/ 的/ 并行/ 化/ 操作/ 也/ 作/ 了/ 相关/ 研究/ ./ Taniar/ 和/ Rahayu/ 研究/ 了/ B/ +/ 树/ 在/ 分布式系统/ 上/ 的/ 索引/ 处理/ 模式/ [/ 10/ ]/ ,/ 主要/ 关注/ 在/ 索引/ 的/ 划分/ 和/ 存储/ 方面/ ./ Jaluta/ 等/ 研究/ 了/ 平衡/ Blink/ 树下/ 的/ 并发/ 控制/ 方面/ [/ 11/ ]/ ,/ 其/ 侧重点/ 主要/ 在/ 索引/ 的/ 恢复/ 操作/ 和/ 事务处理/ ./ 丁华/ 等/ 对/ 海量/ 数据/ 的/ 索引/ 构建/ 方法/ 进行/ 了/ 研究/ [/ 12/ ]/ ,/ 其/ 主要/ 特点/ 是/ 自/ 底向上/ 构建/ B/ +/ 树/ ,/ 该/ 方法/ 有效/ 提升/ 了/ 数据库/ 索引/ 的/ 建立/ 效率/ ./ 本文/ 在/ Blink/ 树/ 的/ 算法/ 基础/ 上/ 实现/ 了/ 基于/ 任务/ 池/ 的/ 并行/ Blink/ 树/ 的/ 并行/ 批量/ 插入/ ./ 通常/ 构建/ 索引/ 树/ 的/ 方法/ 是从/ 空树/ 开始/ ,/ 使用/ 标准/ 的/ 插入/ 算法/ [/ 13/ ]/ 为/ 每条/ 数据/ 记录/ 插入/ 索引/ 项/ ./ 这种/ 方法/ 一次/ 只能/ 插入/ 一个/ 索引/ 项/ ,/ 每次/ 都/ 需要/ 从根/ 开始/ ,/ 一直/ 查找/ 到/ 合适/ 的/ 叶子/ 页/ 进行/ 插入/ ,/ 处理/ 海量/ 数据/ 的/ 效率/ 很/ 低/ ./ 本文/ 提出/ 的/ 批量/ 插入/ 算法/ 的/ 基本/ 思想/ 是/ :/ 先/ 将/ 待/ 插入/ 索引/ 记录/ 预/ 排序/ ,/ 从根/ 结点/ 开始/ 用根/ 结点/ 的/ key/ 将/ 预/ 排序/ 的/ 结果/ “/ 分割/ ”/ 成/ 多个/ 子/ 序列/ ,/ 并/ 把/ 各子/ 序列/ 插入/ 对应/ 的/ 内/ 结点/ ,/ 层层/ 分割/ ,/ 直至/ 叶/ 结点/ ./ 这样/ 就/ 通过/ 根/ 结点/ 中/ 的/ 关键字/ 把/ 待/ 插入/ 的/ 已排/ 好序/ 的/ 索引/ 记录/ 分割/ 为/ 多个/ 子/ 序列/ ./ 每个/ 子/ 序列/ 的/ 插入/ 过程/ 就是/ 一个/ 独立/ 的/ 任务/ 并/ 由/ B/ +/ 树/ 任务/ 池中/ 的/ 线程/ 并行/ 读取/ 和/ 执行/ ,/ 如图/ 5/ 所示/ ./ X/ +/ Y/ +/ 1/ ,/ (/ 其它/ 结点/ 在/ B/ +/ 树/ 的/ 存储/ 结构/ 中/ ,/ 每个/ 结点/ 由/ 一个/ 4KB/ 大小/ 磁盘/ 页面/ 存储/ ,/ 其中/ 每页/ 可以/ 存储/ 的/ 最大/ 索引/ 项数/ 为/ r/ ./ 在线/ 程对/ 当前/ 结点/ 插入/ 长度/ 为/ Y/ 的/ 子/ 序列/ 时/ 采用/ 以下/ 算法/ ./ (/ 1/ )/ 若/ 当前/ 结点/ 的/ 页面/ 中/ 不/ 包括/ 高键/ (/ 每个/ 结点/ 的/ 最小/ 上/ 界/ )/ 的/ 索引/ 项数/ 为/ X/ ,/ 则/ {/ W/ =/ X/ +/ Y/ ,/ (/ 当前/ 结点/ 为/ 一层/ 的/ 最/ 右边/ 结点/ )/ (/ 2/ )/ 若/ W/ / r/ ,/ 则/ 直接/ 将/ 新/ 的/ 索引/ 项/ 插入/ 到/ 当前/ 结点/ 的/ 页面/ 中/ ,/ 算法/ 结束/ ;/ (/ 3/ )/ 若/ W/ >/ r/ ,/ 求得/ 分裂/ 后/ 的/ 页面/ 数/ K/ =/ W/ -/ 1/ (/ 4/ )/ 从/ 磁盘/ 缓冲/ 中/ 分配/ K/ -/ 1/ 个/ 新/ 缓冲/ 页/ ;/ (/ 5/ )/ 将/ 当前/ 结点/ 的/ 项/ 和/ 待/ 插入/ 的/ 子/ 序列/ 重新/ (/ 6/ )/ 将/ 有序/ 序列/ 分配/ 到/ K/ -/ 1/ 个/ 新/ 缓冲/ 页/ 和/ 原有/ 的/ 缓冲/ 页/ 中/ ,/ 并/ 将/ 这些/ 页/ 指针/ 和/ 每页/ 高/ 键值/ 上传/ 至父/ 结点/ ;/ 排序/ ;/ (/ 7/ )/ 若父/ 结点/ 需要/ 分裂/ ,/ 采用/ 此/ 算法/ 继续/ 递归/ 分裂/ ,/ 直至/ 不需/ 分裂/ 为止/ ./ Page5/ 在/ 初次/ 建树/ 时/ ,/ 也/ 采用/ 了/ 批量/ 插入/ 的/ 方法/ ,/ 即/ 对/ 初次/ 插入/ 的/ N/ 个/ 记录/ 进行/ 排序/ ,/ 然后/ 将/ 其/ 直接/ 划分/ 到/ L/ 个叶/ 结点/ 中/ ,/ 其中/ 可/ 根据/ 预先/ 设定/ 的/ 填充/ 因子/ α/ (/ 0/ </ α/ </ 1/ )/ 来/ 确定/ 叶/ 结点/ 的/ 个数/ :/ L/ =/ N/ // α/ r/ ./ 由于/ 初次/ 建树/ 过程/ 中/ 无/ 结点/ 分裂/ ,/ 提高/ 了/ 建库/ 效率/ ,/ 且/ 可/ 通过/ 填充/ 因子/ 调整/ 存储空间/ 利用率/ ,/ 可/ 为/ 后续/ 插入/ 数据/ 预留/ 了/ 空间/ ,/ 减少/ 分裂/ 次数/ ,/ 提高/ 插入/ 效率/ ./ 6/ 磁盘/ 缓冲/ 管理/ 磁盘/ 缓冲/ 的/ 目的/ 是/ 尽可能/ 地/ 将/ 重要/ 的/ 数据/ 保留/ 在/ 内存/ 中/ ,/ 以/ 减少/ 对/ 磁盘/ 的/ 访问/ ./ MTPower/ 中/ 磁盘/ 缓冲/ 的/ 最大/ 特点/ 是/ 能够/ 支持/ 多线程/ 的/ 并发/ 访问/ ,/ 尽量减少/ 多核/ 环境/ 下/ 线程/ 访问/ 的/ 冲突/ ,/ 以/ 发挥/ 多核/ 处理器/ 的/ 性能/ ,/ 其/ 总体/ 结构/ 如图/ 6/ 所示/ ./ 其中/ 主要/ 包括/ :/ (/ 1/ )/ 提供/ 外部/ 访问/ 接口/ 、/ 管理/ 磁盘/ 块/ 的/ 磁盘/ 缓冲区/ ;/ (/ 2/ )/ 支持/ 并行/ 内存/ 分配/ 、/ 回收/ 的/ 内存/ 管理器/ ;/ (/ 3/ )/ 保存/ 磁盘/ 缓冲区/ I/ // O/ 请求/ 的/ I/ // O/ 任务/ 池/ ;/ (/ 4/ )/ 文件/ 句柄/ 管理器/ ./ 磁盘/ 缓冲/ 的/ 主要/ 功能/ 是/ 完成/ 用户/ 线程/ 的/ 磁盘/ 块/ 读写操作/ 请求/ ./ 在/ 此/ 过程/ 中/ ,/ 将/ 首先/ 检查/ 该/ 数据/ 块/ 在/ 磁盘/ 缓冲/ 中/ 是否/ 存在/ ,/ 如果/ 已/ 存在/ 则/ 直接/ 返回/ 给/ 用户/ 线程/ ./ 如果/ 不/ 在/ 磁盘/ 缓冲区/ 内/ ,/ 磁盘/ 缓冲区/ 向/ I/ // O/ 任务/ 池/ 写入/ 一个/ 对应/ 的/ 数据/ 块/ 读/ 请求/ ./ 在/ I/ // O/ 线程/ 返回/ 有效/ 磁盘/ 块/ 前/ ,/ 用户/ 线程/ 等待/ 请求/ 的/ 完成/ ./ 与/ I/ // O/ 任务/ 池/ 相关/ 的/ I/ // O/ 线程/ 有/ 两个/ 主要/ 作用/ :/ 处理/ I/ // O/ 任务/ 池/ 的/ 读写/ 请求/ ;/ 定时/ 扫描/ 磁盘/ 缓冲区/ 的/ 脏/ 数据/ 块/ 并/ 把/ 它们/ 以/ 任务/ 的/ 形式/ 写入/ I/ // O/ 任务/ 池/ ,/ 然后/ 再/ 处理/ I/ // O/ 任务/ 池/ 的/ 请求/ ./ 文件/ 句柄/ 管理器/ 的/ 作用/ 是/ 管理/ 已经/ 打开/ 的/ 文件/ 句柄/ ./ 当/ 磁盘/ 缓冲/ 打开/ 文件/ 的/ 数量/ 达到/ 一定/ 上限/ 时/ ,/ 为了/ 防止/ 系统/ 溢出/ [/ 4/ ]/ ,/ 由/ 文件/ 管理器/ 根据/ 先入/ 先出/ 的/ 策略/ 关闭/ 最早/ 打开/ 的/ 文件/ 句柄/ ./ 磁盘/ 缓冲区/ 的/ 内部结构/ 如图/ 7/ 所示/ ,/ 通过/ 文件名/ 和/ 文件/ 中/ 偏移量/ 的/ 散列值/ 来/ 查找/ 相应/ 的/ 内存/ 块/ ./ 此外/ ,/ 缓冲/ 中/ 所有/ 内存/ 块/ 的/ 运行/ 时刻/ 信息/ 都/ 以/ 数组/ 形式/ 存储/ 在/ Headtable/ 表中/ ,/ 其/ 数据结构/ 如图/ 8/ 所示/ ./ 内存/ 块/ 数据/ 的/ 状态/ 有/ 4/ 种/ :/ DIRTY/ 、/ CLEAN/ 、/ DISK/ _/ AND/ _/ DIRTY/ 与/ DISK/ ./ 其中/ ,/ DIRTY/ 代表/ 内存/ 块/ 的/ 数据/ 修改/ 过/ ;/ CLEAN/ 代表/ 内存/ 块/ 的/ 数据/ 没有/ 修改/ 过/ ;/ DISK/ 代表/ 内存/ 块/ 的/ 数据/ 正在/ 写回/ 磁盘/ ;/ DISK/ _/ AND/ _/ DIRTY/ 代表/ 内存/ 块/ 的/ 数据/ 在/ 写/ 回/ 磁盘/ 的/ 过程/ 中/ 又/ 被/ 用户/ 线程/ 修改/ 过/ ./ 状态/ 转换/ 如图/ 9/ 所示/ ./ 数据/ ;/ 对应/ 转换/ 的/ 含义/ 包括/ :/ 转换/ 1/ ./ 对/ 内存/ 块/ 进行/ 写/ 操作/ ,/ 修改/ 内存/ 块/ 的/ 转换/ 2/ ./ 对脏/ 内存/ 块/ 写/ 回/ 磁盘/ ,/ 脏/ 内存/ 块/ 正/ 处于/ 等待/ I/ // O/ 线程/ 写回/ 磁盘/ 或者/ I/ // O/ 线程/ 正在/ 将/ 其/ 写/ 回/ 磁盘/ ,/ 保存/ 在/ I/ // O/ 任务/ 池中/ ;/ 转换/ 3/ ./ 脏/ 内存/ 块/ 成功/ 写回/ 磁盘/ ,/ 并且/ 在/ 写/ 回/ 的/ Page6/ 过程/ 中/ 没有/ 再次/ 被/ 修改/ ;/ 线程/ 重新/ 修改/ ;/ 转换/ 4/ ./ 脏/ 内存/ 块/ 在/ 写/ 回/ 磁盘/ 的/ 过程/ 中/ 被/ 用户/ 转换/ 5/ ./ 脏/ 内存/ 块/ 写/ 回/ 磁盘/ 后/ ,/ 因为/ 写回/ 过程/ 中/ 数据/ 再次/ 被/ 用户/ 线程/ 修改/ ,/ 所以/ 依然/ 标示/ 为脏/ 内存/ 块/ ./ 由于/ 内存/ 头/ 数据结构/ 的/ 成员/ 都/ 用位/ 表示/ ,/ 使得/ 每个/ 内存/ 头/ 只/ 占/ 2/ 个/ 字节/ ,/ 整个/ 内存/ 头/ 数组/ 仅/ 占用/ 20KB/ (/ 在/ 40MB/ 缓冲容量/ 下/ ,/ 每个/ 内存/ 块/ 大小/ 为/ 4KB/ )/ ,/ 小于/ 一般/ 系统/ L1Cache/ 的/ 容量/ ./ 因此/ 在/ 寻找/ 可/ 替换/ 内存/ 块/ 时/ ,/ 可以/ 大大提高/ Cache/ 命中率/ ,/ 提高/ 运行/ 速度/ ./ 磁盘/ 缓冲区/ 采用/ 了/ LFU/ (/ 最/ 不/ 常用/ 使用/ 法/ )/ 置换/ 策略/ ./ 当/ 需要/ 空闲/ 内存/ 块/ 时/ ,/ 将/ 替换/ 内存/ 块头/ 中/ bh/ _/ total/ _/ use/ 字段/ 最小/ 者/ (/ 访问/ 次数/ 最少/ )/ 的/ 内存/ 块/ ./ 脏/ 内存/ 块/ 的/ 替换/ 时机/ 有/ 3/ 个/ :/ (/ 1/ )/ 当/ 用户/ 线程/ 向/ 磁盘/ 缓冲区/ 申请/ 空闲/ 内存/ 块/ ,/ 而/ 磁盘/ 缓冲区/ 里/ 没有/ 干净/ 的/ 内存/ 块/ 时/ ,/ 激发/ 脏/ 内存/ 块/ 的/ 置换/ 过程/ ;/ 置换/ ;/ (/ 2/ )/ I/ // O/ 线程/ 定时/ 激发/ 磁盘/ 缓冲区/ 的/ 脏/ 内存/ 块/ (/ 3/ )/ 关闭/ 磁盘/ 缓冲区/ 时/ ,/ 磁盘/ 缓冲区/ 会/ 把/ 所有/ 脏/ 内存/ 块/ 写/ 回/ 磁盘/ ./ 7/ 实验/ 结果/ 与/ 分析/ 对/ MTPower/ 的/ 性能/ 测试/ 分别/ 在/ 4/ 核/ 服务器/ 与/ 8/ 核多核/ 服务器上进行/ ,/ 其/ 配置/ 如表/ 1/ 所示/ ./ 图/ 10/ 和表/ 2/ 分别/ 为/ 测试/ 所/ 使用/ 的/ 数据表/ 和/ 不同/ 记录/ 数量/ 和/ 文件大小/ ./ 我们/ 选用/ 最/ 常用/ 的/ 单线程/ 非/ 事务/ 存储/ 引擎/ MyISAM/ 作为/ MTPower/ 的/ 性能/ 比较/ 对象/ ./ 实验/ 的/ 主要/ 目标/ 包括/ :/ (/ 1/ )/ 分析/ 数据量/ 、/ 磁盘/ 缓冲容量/ 、/ 线程/ 数对/ MTPower/ 性能/ 的/ 影响/ ,/ 提供/ 系统/ 参数/ CREATETABLEt1/ (/ col/ _/ aINTNOTNULL/ ,/ 优化/ 方案/ ;/ (/ 2/ )/ 与/ MyISAM/ 进行/ 性能/ 对比/ ;/ (/ 3/ )/ 评价/ 处理器/ 核数/ 增加/ 时/ ,/ MTPower/ 的/ 可/ 扩展/ 能力/ ./ 数据量/ 和/ 存储/ 缓冲容量/ 对/ MTPower/ 的/ 性能/ 影响/ 在/ 此/ 实验/ 中/ ,/ 磁盘/ 缓冲/ 块/ 大小/ 固定/ 为/ 4KB/ ,/ 容量/ 分别/ 设置/ 为/ 4MB/ 、/ 8MB/ 、/ 20MB/ 和/ 40MB/ ./ 插入/ 的/ 记录/ 数如表/ 2/ 所示/ ./ 图/ 11/ 给出/ 了/ 在/ 创建/ 一个/ Hash/ 索引/ (/ 其中/ 6/ 个/ Hash/ 更新/ 线程/ ,/ 367/ 个/ 初始/ 桶/ 数/ ,/ 分裂/ 因子/ 为/ 0.75/ )/ 情况/ 下/ ,/ MTPower/ 与/ MyISAM/ 在/ 8/ 核/ 服务器/ 上/ 的/ 性能/ 对比/ ./ 由图/ 11/ 可以/ 看出/ ,/ 在/ 插入/ 记录/ 数较/ 小/ (/ 50/ 万/ )/ 和/ 缓冲容量/ 较/ 小/ 的/ 情况/ 下/ (/ 4MB/ 或/ 8MB/ )/ ,/ MTPower/ 的/ 性能/ 和/ MyISAM/ 相近/ ./ 但是/ ,/ 当/ 磁盘/ 缓冲区/ 容量/ 较大/ 时/ (/ 20MB/ 或/ 40MB/ )/ ,/ MTPower/ 的/ 性能/ 得到/ 了/ 较大/ 的/ 提升/ ./ 缓冲容量/ 越大/ ,/ 插入/ 记录/ 的/ 数据量/ 越大/ ,/ MTPower/ 性能/ 提升/ 越/ 明显/ ./ 相比/ MyISAM/ ,/ 其/ 最大/ 加速/ 比/ 可以/ 达到/ 6.18/ ./ 这/ 是因为/ 缓冲容量/ 越大/ ,/ 不仅/ 能够/ 减少/ 磁盘/ 的/ I/ // O/ 次数/ ,/ 还/ 能够/ 更好/ 地/ 发挥/ 并行/ 批量/ 索引/ 的/ 插入/ 优势/ ./ 在/ 后续/ 的/ 实验/ 中/ ,/ 我们/ 都/ 设置/ 磁盘/ 缓冲容量/ 为/ 40MB/ ./ 线程/ 数对/ MTPower/ 的/ 性能/ 影响/ 在/ 使用/ MTPower/ 存储/ 引擎/ 的/ MySQLServer/ 系统/ 中/ 包括/ 了/ MySQLServer/ 主线/ 程/ 、/ 连接线/ 程/ 、/ MSI/ 调度/ 器/ 线程/ 、/ I/ // O/ 线程/ 等/ 4/ 个/ 固定/ 线程/ 以及/ N/ 个/ 并行/ 索引/ 插入/ 的/ 线程/ ,/ 即/ 系统/ 的/ 总线/ 程数/ 为/ N/ +/ 4/ ./ 在/ 4/ 个/ 固定/ 线程/ 中/ ,/ MySQLServer/ 主线/ 程/ 处于/ 睡眠/ 状态/ 等待/ 新/ 的/ 连接/ 进来/ 唤醒/ ,/ I/ // O/ 线程/ 只有/ I/ // O/ 任务/ 池有/ 任务/ 或者/ 定时/ 扫描/ 磁盘/ 缓冲区/ 脏/ 内存/ 块/ 才/ 处于/ 运行/ 状态/ ,/ MSI/ 调度/ 器/ 线程/ 也/ 是/ 定时/ 唤醒/ ./ 图/ 12/ 和/ 图/ 13/ 分别/ 给出/ 了/ 4/ 核/ 与/ 8/ 核/ 服务器/ 上/ 不同/ 线性/ Hash/ 索引/ 插入/ 线程/ 数对/ MTPower/ 存储/ 引擎/ 的/ 性能/ 影响/ ,/ 图/ 14/ 给出/ 了/ 8/ 核/ 服务器/ 上/ 不同/ B/ +/ 树/ 索引/ 插入/ 线程/ 数对/ MTPower/ 的/ 影响/ 以及/ 其/ 与/ MyISAM/ 的/ 性能/ 比较/ ./ Page7/ 图/ 124/ 核/ 服务器/ 上/ 不同/ 线程/ 数/ 的/ 性能/ 影响/ (/ Hash/ 索引/ )/ 图/ 138/ 核/ 服务器/ 上/ 不同/ 线程/ 数/ 的/ 性能/ 影响/ (/ Hash/ 索引/ )/ 图/ 148/ 核/ 服务器/ 上/ 不同/ 线程/ 数/ 的/ 性能/ 影响/ (/ B/ +/ 树/ 索引/ )/ 从/ 上述/ 3/ 个/ 图/ 中/ 可以/ 看出/ ,/ 在/ 4/ 核/ 服务器/ 上/ 2/ 个/ 索引/ 插入/ 线程/ 的/ 性能/ 最好/ ,/ 在/ 8/ 核/ 服务器/ 上/ 4/ 或/ 6/ 个/ 索引/ 插入/ 线程/ 的/ 性能/ 最好/ ./ 考虑/ 到/ 系统/ 中/ 4/ 个/ 固定/ 线程/ (/ 其中/ 有/ 3/ 个/ 为/ 不/ 活跃/ 线程/ ,/ 1/ 个/ 为/ 活跃/ 线程/ )/ ,/ 可以/ 得到/ 并行/ 索引/ 线程/ 数/ 的/ 优化/ 配置/ 方案/ :/ 在/ 总/ 的/ 线程/ 数/ 略大于/ 处理器/ 的/ 核数/ 时/ ,/ MTPower/ 的/ 性能/ 最优/ ./ 总线/ 程数/ 过/ 小/ ,/ 不能/ 为/ 多个/ 核/ 提供/ 足够/ 的/ 计算/ 负载/ ;/ 总线/ 程数/ 过/ 多/ ,/ 则/ 会/ 因为/ 过多/ 的/ 线程/ 切换/ 开销/ 导致/ 性能/ 反而/ 下降/ ./ 此外/ ,/ 从图/ 14/ 中/ 也/ 可以/ 看出/ ,/ MTPower/ 在/ B/ +/ 树/ 索引/ 方面/ 的/ 性能/ 也/ 较/ MyISAM/ 有/ 较大/ 提高/ ,/ 在/ 大/ 数据量/ 情况/ 下/ ,/ 加速/ 比/ 最大/ 可以/ 达到/ 4.8/ 倍/ ./ 扩展性/ 测试/ 图/ 15/ 给出/ 了/ 最佳/ 参数设置/ 时/ ,/ MTPower/ 在/ 4/ 核/ 和/ 8/ 核/ 服务器/ 上/ Hash/ 索引/ 的/ 性能/ 对比/ ./ 4/ 核/ 和/ 8/ 核/ 服务器/ 上/ 的/ 索引/ 插入/ 线程/ 数/ 分别/ 为/ 2/ 个/ 和/ 6/ 个/ ./ 图/ 15/ 在/ 4/ 核/ 和/ 8/ 核/ 服务器/ 上/ 的/ 性能/ 对比/ (/ Hash/ 索引/ )/ 从图/ 15/ 可以/ 看出/ ,/ 在/ 插入/ 相同/ 数据量/ 时/ ,/ 8/ 核/ 处理器/ 的/ 性能/ 要/ 比/ 4/ 核/ 处理器/ 的/ 性能/ 高/ ,/ 而且/ 随着/ 数据量/ 的/ 增加/ ,/ 性能/ 提升/ 更为/ 显著/ ./ 在/ 200/ 万条/ 记录/ 数量/ 情况/ 下/ ,/ MTPower/ 在/ 8/ 核/ 服务器/ 上/ 的/ 性能/ 提升/ 了/ 约/ 12/ %/ ,/ 具有/ 一定/ 的/ 可/ 扩展/ 能力/ ./ 我们/ 还/ 在/ 4/ 核/ 服务器/ 平台/ 上/ 比较/ 了/ 4/ 线程/ 存储/ 引擎/ Falcon/ 和/ MTPower/ 在/ 插入/ 200/ 万条/ 记录/ ,/ 创建/ 一个/ B/ +/ 树/ 索引/ (/ Falcon/ 不/ 支持/ Hash/ 索引/ )/ 的/ 性能/ ,/ 其中/ Falcon/ 的/ 插入/ 时间/ 为/ 203s/ ,/ MTPower/ 为/ 225s/ ,/ 两者/ 基本/ 相当/ ./ 8/ 结语/ 作为/ 当今/ 最为/ 流行/ 的/ 开源/ 数据库/ 之一/ ,/ MySQL/ 采用/ 了/ 插件/ 式/ 存储/ 引擎/ 架构/ ./ 但/ MySQL/ 已有/ 的/ 存储/ 引擎/ 大部分/ 只是/ 以/ 单线程/ 的/ 方式/ 处理/ 数据/ ,/ 不能/ 充分利用/ 多核/ 处理器/ 计算能力/ ./ 本文/ 实现/ 了/ 一个/ 符合/ MySQL/ 存储/ 引擎/ 接口/ 规范/ ,/ 支持/ 多核/ 处理器/ 并行计算/ 的/ 存储/ 引擎/ MTPower/ ./ 该/ 存储/ 引擎/ 总体/ 结构/ 基于/ 多线程/ 动态/ 调度/ 机制/ ,/ 支持/ Hash/ 索引/ 和/ B/ +/ 树/ 索引/ 的/ 并行/ 批量/ 插入/ ,/ 同时/ 包含/ 了/ 磁盘/ 缓冲/ ,/ 以/ 减少/ 系统/ I/ // O/ 开销/ ./ 测试/ 结果表明/ ,/ 与/ 经典/ 单线程/ 存储/ 引擎/ MyISAM/ 相比/ ,/ MTPower/ 在/ 包含/ 单个/ Hash/ 索引/ 和/ B/ +/ 树/ 索引/ 的/ 批量/ 插入/ 时/ ,/ 性能/ 最高/ 可以/ 提高/ 6/ 倍/ 和/ 4.8/ 倍/ ./ 同时/ ,/ 通过/ 实验/ 也/ 找到/ 了/ 最佳/ 线程/ 数/ 的/ 配置/ 方案/ :/ 系统/ 中/ 的/ 线程/ 总数/ 应/ 略大于/ 处理器/ 核数/ ./ 此外/ ,/ 通过/ 对/ MTPower/ 在/ 4/ 核/ 和/ 8/ 核/ 服务器/ 上/ 的/ 性能/ 对比/ ,/ 说明/ 其/ 具有/ 一定/ 的/ 可/ 扩展/ 能力/ ./ 当然/ MTPower/ 也/ 有/ 一些/ 缺陷/ ,/ 例如/ 可扩展性/ 还/ 不够/ 强/ 、/ 尚/ 不/ 支持/ 并行/ 的/ 查询/ 等/ ,/ 这些/ 将/ 是/ 进一步/ 的/ 研究/ 目标/ ./ 

