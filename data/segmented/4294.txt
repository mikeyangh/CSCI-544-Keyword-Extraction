Page1/ 计算/ 模式/ 的/ 统一/ 研究/ 沈绪/ 榜/ 孙璐/ (/ 西安/ 微电子/ 技术/ 研究所/ 西安/ 710065/ )/ 摘要/ 现在/ 的/ 支持/ TLP/ 、/ DLP/ 和/ OLP3/ 种/ 计算/ 模式/ 的/ 系统/ 芯片/ // 阵列/ 芯片/ 是/ 不/ 统一/ 的/ ,/ 没有/ 自然/ 反映/ 时空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ 的/ 特点/ ,/ 带来/ 了/ 计算机/ 应用/ 、/ 设计/ 和/ 制造/ 的/ 多样性/ 与/ 复杂性/ ./ 因此/ ,/ 该文/ 从/ 时空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ 的/ 特点/ 出发/ ,/ 提出/ 了/ 计算/ 模式/ 的/ 编程语言/ 和/ 体系结构/ 的/ 统一/ 研究/ ./ 关键词/ 计算/ 模式/ ;/ 时空/ 计算/ ;/ 阵列/ 数据/ ;/ 阵列/ 语句/ 1/ 引言/ 芯片/ 技术/ 问世/ 之后/ ,/ 计算机/ 的/ 设计/ 工作/ 越来越/ 多地/ 转移/ 到/ 了/ 芯片/ 上/ ./ 1971/ 年/ Intel/ 公司/ 的/ TedHoff/ (/ 特德/ ·/ 霍夫/ )/ 工程师/ 发明/ 了/ 世界/ 上/ 第一颗/ 微处理器/ 芯片/ Intel4004/ [/ 1/ ]/ ./ 微处理器/ 将/ 计算机/ 的/ ISA/ (/ InstructionSetArchitecture/ )/ 设计/ 工作/ 转移/ 到/ 了/ 指甲/ 大小/ 的/ 芯片/ 上/ ,/ 这/ 是/ 继/ 晶体管/ 之后/ 计算机/ 小型化/ 的/ 又/ 一个/ 新/ 的/ 转折点/ ./ 1987/ 年/ 人们/ 提出/ 了/ 系统/ 芯片/ (/ SystemonChip/ ,/ SoC/ )/ 的/ 概念/ ,/ 要/ 将/ 计算机/ 的/ 系统/ 设计/ 工作/ 也/ 转移/ 到/ 小小的/ 芯片/ 上来/ ,/ 从单/ 处理器/ 的/ 计算/ 模式/ 发展/ 出/ 了/ TLP/ (/ ThreadLevelParallel/ ,/ 线程/ 级/ 并行/ )/ 、/ DLP/ (/ DataLevelParallel/ ,/ 数据/ 级/ 并行/ )/ 以及/ OLP/ (/ OperationLevelParallel/ ,/ 操作/ 级/ 并行/ )/ 3/ 种/ 计算/ 模式/ ./ 这/ 几种/ 计算/ 模式/ 的/ 芯片/ 实现/ 是/ 不/ 统一/ 的/ ,/ 如图/ 1/ 所示/ ./ 按照/ 牛顿/ 物理学/ ,/ 人们/ 可/ 感知/ 的/ 3/ 维空间/ 中/ 的/ 事物/ 是/ 随/ 1/ 维/ 的/ 时间/ 而/ 演变/ 的/ [/ 2/ ]/ ;/ 而/ 按照/ 爱因斯坦/ 的/ 狭义/ 相对论/ ,/ 时间/ 和/ 空间/ 并/ 不是/ 有所/ 分别/ 的/ 两件/ 东西/ ,/ 两者/ 合成/ 4/ 维/ 的/ 时空/ (/ Space/ -/ time/ )/ 时间/ 是/ 第/ 4/ 个/ 维度/ ./ 狭义/ 相对论/ 是/ 4/ 维/ 时空/ 的/ 数学/ 框架/ ,/ 和/ 牛顿/ 物理学/ 本质/ 上/ 是/ 相同/ 的/ ./ 因此/ ,/ 可以/ 认为/ 人们/ 可/ 感知/ 的/ 客观/ 世界/ 的/ 一切/ 事物/ 是/ 在/ 4/ 维时/ 空中/ 演变/ 的/ ./ 计算机/ 是/ 用来/ 对/ 事物/ 演变/ 的/ 数据/ 完成/ 时空/ 计算/ 的/ ,/ 计算/ 模式/ 的/ 实现/ 应该/ 自然/ 反映/ 时空/ 计算/ 的/ 概念/ ./ 数学家/ 发明/ 的/ 计算机/ 以/ 描述/ 客观/ 世界/ 的/ 数学/ 语言/ 为/ 基础/ ./ 数学/ 是/ 无穷/ (/ Infinite/ )/ 的/ 科学/ ,/ 它/ 研究/ 数和形/ ,/ 计/ Page2/ 算机/ 就是/ 以/ 无穷的/ 存储空间/ (/ 图灵/ 抽象机/ 的/ 无穷/ 长/ 的/ 带/ 和/ 冯/ ·/ 诺依曼/ 计算机/ 的/ 输入输出/ 体系结构/ )/ 和/ 无止境/ 提高/ 计算能力/ (/ 也/ 就是/ 提高/ 处理器/ 的/ 计算/ 频率/ ,/ 以及/ 增加/ 处理器/ 的/ 复杂度/ )/ 来/ 支持/ 数学/ 上/ 的/ “/ 无穷/ ”/ ./ 数和形/ 的/ 研究/ 不仅/ 有/ 细粒度/ 的/ 标量/ 计算/ ,/ 还有/ 操作/ 粗粒度/ 和/ 数据/ 粗粒度/ 的/ 阵列/ 计算/ ./ 正如/ 美国科学院/ 调查/ 委员会/ 所下/ 的/ 结论/ :/ “/ 高科技/ 本质/ 上/ 是/ 数学/ 技术/ ”/ ./ 本文/ 从/ 时空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ 的/ 特点/ 出发/ ,/ 提出/ 了/ 计算/ 模式/ 实现/ 的/ 统一/ 研究/ ,/ 使/ 计算机/ 同时/ 具有/ 细粒度/ 标量/ 计算/ 和/ 粗粒度/ 阵列/ 计算/ 的/ 能力/ ./ 第/ 2/ 节是/ 计算/ 模式/ 的/ 实现/ 分析/ ;/ 第/ 3/ 节/ 研究/ 了/ 计算/ 模式/ 的/ 实现/ 统一/ ;/ 最后/ 是/ 结束语/ ./ 2/ 计算/ 模式/ 的/ 实现/ 分析/ 按照/ 冯/ ·/ 诺依曼/ 体系结构/ 的/ Flynn/ 分类/ [/ 3/ ]/ ,/ 图/ 1/ (/ a/ )/ 的/ 单/ 处理器/ 计算机/ 以单/ 指令流/ 单数据流/ 的/ SISD/ (/ SingleInstructionSingleData/ )/ 体系结构/ 为/ 基础/ ,/ 主要/ 用来/ 实现/ 细粒度/ 的/ 标量/ 数据/ 操作/ ,/ 以下/ 就/ 简称/ 为/ 标量/ 计算机/ (/ ScalarComputer/ )/ ./ 描述/ 事物/ 演变/ 的/ 数据/ 以点/ 为/ 单位/ ,/ 存放/ 在/ 1/ 维/ 存储器/ 中/ ./ 标量/ 计算机/ 是/ “/ 从点/ 开始/ ,/ 从点/ 到/ 线/ ,/ 从线/ 到面/ ”/ 再/ “/ 分层/ 处理/ ”/ 完成/ 事物/ 演变/ 数据/ 的/ 时空/ 计算/ ,/ 是/ 一种/ (/ 时间/ )/ 1/ 维/ 的/ 计算机/ ./ 数据/ 粗粒度/ 的/ 计算/ 和/ 操作/ 粗粒度/ 的/ 计算/ 在/ 标量/ 计算机/ 上/ ,/ 是/ 依次/ 对/ 相邻/ 点/ 的/ 数据/ 、/ 相邻/ 线/ 的/ 数据/ 以及/ 相邻/ 面/ 的/ 数据/ 进行/ 顺序/ 计算/ 来/ 完成/ 的/ ./ 正如/ 文献/ [/ 4/ ]/ 中/ 所说/ 的/ ,/ 因为/ 顺序/ 计算/ 有/ 一个/ 通用/ 的/ 计算/ 模型/ —/ —/ —/ 冯/ ·/ 诺依曼/ 体系结构/ ,/ 所以/ 顺序/ 计算/ 没有/ 多核/ 计算/ 的/ 那些/ 缺点/ ,/ 是/ 一种/ 确定性/ 的/ 计算/ 模式/ ./ 标量/ 计算机/ 的/ 编程语言/ 和/ 机器语言/ 都/ 以/ 标量/ 数据/ 为/ 基础/ ,/ 分别/ 用来/ 描述/ 和/ 实现/ 标量/ 操作/ ,/ 它们/ 的/ 操作/ 类型/ 和/ 数据类型/ 基本上/ 一一对应/ ,/ 软件/ 和/ 硬件/ 之间/ 无/ 间隙/ (/ Gap/ )/ ,/ 程序设计/ 是/ 一种/ 确定/ 而/ 可/ 预测/ 的/ 过程/ ,/ 能/ 从/ 算法/ 解决问题/ 的/ 方式/ 中/ 直觉/ 地/ 产生/ 出来/ ./ 这种/ 确定性/ 的/ 计算/ 模式/ 促进/ 了/ 软件/ 工业/ 的/ 繁荣/ ,/ 已/ 被/ 成功/ 使用/ 了/ 60/ 多年/ [/ 4/ ]/ ./ 按照/ 摩尔/ 预言/ ,/ 计算机/ 随/ 微电子/ 技术/ 制造/ 能力/ 的/ 提高/ 而/ 演变/ ./ 现在/ 的/ 微电子/ 制造/ 技术/ 已经/ 可以/ 研制/ 2/ 维/ 的/ 实现/ 粗粒度/ 计算/ 的/ 处理器/ ./ 例如/ ,/ Intel/ 公司/ 80/ 个/ 处理/ 元/ 的/ TeraScaleProcessor/ 计划/ 的/ 系统/ 芯片/ [/ 5/ ]/ ,/ 如图/ 2/ 所示/ ./ 处理器/ 中/ 处理/ 元/ 之间/ 的/ 互连/ 关系/ ,/ 有/ 时间/ 1/ 维/ 访问/ 存储器/ 的/ 互连/ ,/ 还有/ 空间/ 2/ 维/ 访问/ 相邻/ 处理/ 元/ 的/ 东南西北/ (/ NEWS/ )/ 互连/ ,/ 如图/ 2/ (/ b/ )/ 所示/ ./ 这种/ 处理器/ 可以/ 对/ 阵列/ 数据/ (/ ArrayData/ )/ 中/ 的/ 各点/ 同时/ 进行/ 计算/ ,/ 即/ 可以/ 用来/ 实现/ 数据/ 粗粒度/ 的/ 计算/ 和/ 操作/ 粗粒度/ 的/ 计算/ ,/ 以下/ 就/ 简称/ 为/ 阵列/ 处理器/ (/ ArrayProcessor/ )/ ./ 从/ 数学/ 语言/ 的/ 细粒度/ 的/ 标量/ 计算/ 和/ 粗粒度/ 的/ 阵列/ 计算/ 特点/ 来看/ 处理器/ 发展/ 的/ 必然结果/ 是/ 阵列/ 处理器/ ./ 在/ 1987/ 年/ 休斯/ 公司/ 研制/ 的/ 3/ 维/ 计算机/ 的/ 影响/ 下/ ,/ 1997/ 年/ 西安/ 微电子/ 技术/ 研究所/ 研制/ 了/ 有/ 64/ 个/ 定点/ 16/ 位/ 字长/ 的/ 处理/ 元/ (/ 核/ )/ 的/ 系统/ 芯片/ (/ 与/ 图/ 2/ 中/ 一样/ ,/ 处理/ 元/ 之间/ 采用/ 了/ NEWS/ 互连/ 技术/ )/ ;/ 并/ 采用/ 64/ 个/ 系统/ 芯片/ ,/ 研制/ 了/ 有/ 4096/ 个/ 处理/ 元/ 的/ 阵列/ 处理器/ ./ 在/ 此基础/ 上/ 作者/ 编著/ 了/ 《/ MPP/ 嵌入式/ 计算机技术/ 》/ 一书/ [/ 6/ ]/ ./ 现在/ 思考/ 起来/ 有/ 两个/ 很/ 不够/ 的/ 方面/ :/ (/ 1/ )/ 没有/ 像/ 物理学家/ 那样/ ,/ 明确/ 4/ 维/ 时空/ 计算/ (/ Space/ -/ TimeComputing/ )/ 的/ 概念/ ;/ (/ 2/ )/ 没有/ 像/ 数学/ 语言/ 那样/ ,/ 明确/ 数据/ 粗粒度/ 计算/ 和/ 操作/ 粗粒度/ 计算/ 的/ 特点/ ./ 前述/ 3/ 种/ 计算/ 模式/ 的/ 实现/ ,/ 没有/ 自然/ 反映/ 时/ Page3/ 空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ 的/ 特点/ ,/ 遭遇/ 了/ 计算/ 扩展/ 限制/ 问题/ 和/ 能源/ 使用/ 问题/ ./ 2.1/ TLP/ 计算/ 模式/ 的/ 分析/ 从图/ 1/ (/ b/ )/ TLP/ 计算/ 模式/ 的/ 概念图/ 可以/ 看出/ ,/ 每个/ 线程/ 都/ 以/ 标量/ 计算机/ 的/ 计算/ 模式/ 为/ 基础/ ,/ 在/ 每个/ 标量/ 处理器/ 核/ (/ CPU/ )/ 上/ 同时/ 执行/ 以/ 提高/ 计算能力/ 的/ ./ 这/ 实际上/ 是/ 一种/ 仅/ 执行/ 标量/ 计算/ 的/ 多/ 核/ 芯片/ ,/ 是/ 一种/ 单/ 指令流/ 多线程/ 流/ 的/ SIMT/ (/ SingleInstructionMultipleThread/ )/ 执行/ ./ 核/ 之间/ 没有/ 直接/ 的/ 互连/ 关系/ ,/ 通过/ 共享存储器/ 通信/ ,/ 没有/ 自然/ 反映/ 应用/ 场景/ 的/ 时空/ 计算/ 概念/ ./ 将/ 大型/ 实验/ 的/ 模拟/ 和/ 仿真/ 等/ 高性能/ 计算/ 任务/ 分成/ 多个/ 线程/ 安排/ 在/ 每个/ 核上/ 完成/ 计算/ ,/ 虽然/ 线程/ 可以/ 同时/ 开始/ 执行/ 计算/ ,/ 但/ 不/ 一定/ 能/ 同时/ 完成/ 计算/ ./ 其中/ ,/ 存在/ 如何/ 同步/ (/ 同时/ 完成/ )/ 的/ 问题/ ;/ 由于/ 线程/ 之间/ 可能/ 存在/ 数据/ 相关/ ,/ 不能/ 独立/ 地/ 执行/ ,/ 有/ 互斥/ (/ 数据/ 依赖/ )/ 的/ 问题/ ./ 正如/ 文献/ [/ 4/ ]/ 中/ 所说/ ,/ 多核/ 程序设计/ 是/ 一种/ 内在/ 不确定性/ 的/ 过程/ (/ NondeterministicProcess/ )/ ./ 现在/ 通过/ 编译器/ 的/ 编译/ 尽可能/ 地使/ 核/ 的/ 线程/ 相互/ 独立/ 互不/ 干扰/ ,/ 并/ 通过/ 操作系统/ 的/ 调度/ 尽量/ 使/ 线程/ 之间/ 充分/ 协调/ ./ 不难看出/ ,/ 同步/ 和/ 互斥/ 问题/ 将/ 随着/ 线程/ 个数/ 的/ 上升/ 越来越/ 严重/ ,/ 限制/ 了/ 可扩展性/ (/ Scalability/ )/ ./ 允许/ 不确定性/ 又/ 是/ 多/ 核/ 程序实现/ 高性能/ 与/ 可/ 扩展/ (/ Scalable/ )/ 的/ 关键/ ,/ 即/ 允许/ 多核/ 程序/ 的/ 不确定性/ 行为/ 是/ 可控/ 的/ ./ 但是/ ,/ 只有/ 在/ 必要/ 时才/ 采用/ ./ 因为/ 多核/ 程序设计/ 要求/ 彻底/ 了解/ 多核/ 计算机/ 的/ 所有/ 细节/ ,/ 例如/ 核/ 的/ 数目/ 、/ 主存储器/ 的/ 布局/ 以及/ Cache/ 存储器/ 的/ 层次/ 等/ ,/ 才能/ 使/ 程序/ 的/ 逻辑/ 结构/ 与/ 计算机/ 的/ 物理/ 结构/ 相匹配/ ./ 有效/ 的/ 匹配/ 才能/ 提高/ 性能/ ,/ 实现/ 所/ 希望/ 的/ 可扩展性/ ./ 为了/ 编写/ 安全/ 有效/ 的/ 多/ 核/ 应用程序/ ,/ 需要/ 有/ 复杂/ 的/ 开发/ 和/ 调试/ 工具/ 以及/ 新/ 的/ 程序设计/ 技巧/ 和/ 不同/ 的/ 解题/ 思考/ 方式/ ./ 因为/ 多核/ 程序/ 源代码/ 中/ 所/ 看到/ 的/ 并/ 不是/ 优化/ 后/ 所/ 得到/ 的/ ,/ 不/ 可能/ 从/ 源代码/ 来/ 检查/ ./ 例如/ ,/ 像/ 无序/ 执行/ 的/ 转移预测/ 和/ 指令/ 重排/ 这样/ 的/ 主动/ 优化/ 过程/ ,/ 经常/ 是/ 很/ 难/ 检测/ 的/ 竞争/ 条件/ 的/ 主要/ 原因/ ./ 多核/ 程序/ 检测/ 的/ 复杂性/ ,/ 是/ 由/ 程序/ 的/ 多线程/ 执行/ 问题/ 的/ 隐藏/ 性/ 和/ 不确定性/ 时序/ 引起/ 的/ ,/ 寻找/ 不可/ 预测/ 的/ 临时/ 故障/ 就/ 像/ 在/ 草堆/ 中/ 寻找/ 一根/ 针/ 一样/ 困难/ ./ 标量/ 计算机/ 的/ 程序员/ 不用/ 处理/ 逻辑/ 结构/ 和/ 基本/ 物理/ 核/ 之间/ 的/ 关系/ 、/ 线程/ 的/ 通信/ 和/ 同步/ 、/ TLP/ 环境/ 中/ 的/ 性能/ 测试/ 、/ 负载/ 不/ 平衡/ 的/ 来源/ ,/ 以及/ 程序/ 中/ 的/ 数据/ 和/ 控制/ 依赖性/ 、/ 死锁/ 、/ 矛盾/ 和/ 竞争/ 条件/ 等/ 繁琐/ 的/ 事情/ ./ 多核/ 程序设计/ 应该/ 像/ 标量/ 计算机/ 的/ 顺序程序/ 设计/ 一样/ 简单/ 直观/ ,/ 具有/ 确定性/ ./ 2.2/ DLP/ 计算/ 模式/ 的/ 分析/ 按照/ 冯/ ·/ 诺依曼/ 体系结构/ 的/ Flynn/ 分类/ ,/ DLP/ 计算/ 模式/ 应该/ 以单/ 指令流/ 多数据流/ 的/ SIMD/ 体系结构/ 为/ 基础/ ,/ 从/ 标量/ 数据/ 的/ 操作/ 上升/ 到/ 阵列/ 数据/ 的/ 操作/ ,/ 以/ 实现/ 数据/ 粗粒度/ 的/ 高效/ 计算/ ./ 它/ 主要/ 用/ 在/ 视觉/ 传感器/ 的/ 图像/ 阵列/ 数据处理/ 任务/ 中/ ,/ 有/ 7/ 种/ 应用/ 场景/ ,/ 即/ 有点/ 操作/ 的/ 计算/ 、/ 局部/ 邻域/ 操作/ 的/ 计算/ 、/ 递归/ 邻域/ 操作/ 的/ 计算/ 、/ 几何/ 操作/ 的/ 计算/ 、/ 整体/ 操作/ 的/ 计算/ 、/ 统计/ 操作/ 的/ 计算/ 和/ 目标/ 操作/ 的/ 计算/ [/ 7/ ]/ ./ 早/ 在/ 1987/ 年/ ,/ 为了/ 实现/ 航空航天/ 图像处理/ 计算机/ 的/ 小型化/ ,/ 美国/ 休斯/ 公司/ 就/ 研制/ 了/ 32/ ×/ 32/ 个/ 处理/ 元/ 的/ 系统/ 芯片/ [/ 6/ ]/ ,/ 构成/ 了/ 一个/ 有/ 1024/ 个/ 处理/ 元/ 的/ 阵列/ 计算机/ ,/ 能/ 高效/ 完成/ 图像/ 阵列/ 数据/ 的/ 7/ 种/ 处理/ 任务/ 的/ 计算/ ./ 例如/ ,/ 假定/ 两个/ 3/ ×/ 3/ 的/ 阵列/ 数据/ 及其/ 矩阵/ 乘法/ 结果/ 的/ 3/ ×/ 3/ 的/ 阵列/ 数据/ (/ 如图/ 3/ (/ a/ )/ 所示/ )/ 存储/ 在/ 分开/ 的/ 3/ 个/ 寄存器/ 阵列/ 中/ ./ 在/ 阵列/ 计算机/ 中/ ,/ 第/ 1/ 次/ 计算/ 过程/ (/ 如图/ 3/ (/ b/ )/ 所示/ )/ 首先/ 进行/ 几何变换/ ,/ 完成/ 阵列/ 数据/ (/ 被/ 乘/ 矩阵/ )/ 第/ 1/ 列/ 数据/ [/ 147/ ]/ T/ 的/ 列/ 播送/ ,/ 产生/ 1/ 个/ 新/ 的/ 阵列/ 数据/ (/ 被/ 乘/ 矩阵/ )/ ,/ 然后/ 完成/ 阵列/ 数据/ (/ 乘/ 矩阵/ )/ 的/ 第/ 1/ 行/ 数据/ [/ ABC/ ]/ 的/ 行/ 播送/ ,/ 产生/ 一个/ 新/ 的/ 阵列/ 数据/ (/ 乘/ 矩阵/ )/ ./ 再/ 对/ 这/ 两个/ 新/ 的/ 阵列/ 数据/ 完成/ MATLAB/ 语言/ 中/ 所说/ 的/ 阵列/ 乘法/ 运算/ ,/ 就/ 得到/ 了/ 乘积/ 中/ 第/ 1/ 项/ 的/ 部分/ 结果/ ./ 其中/ ,/ 行/ Page4/ 播送/ 和/ 列/ 播送/ 以及/ 点对点/ 的/ 阵列/ 乘法/ 运算/ ,/ 直接/ 在/ 阵列/ 处理器/ 上/ 完成/ ,/ 反映/ 了/ 时空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ (/ 几何变换/ )/ 的/ 特点/ ./ 类似/ 的/ ,/ 第/ 2/ 次/ 计算/ (/ 过程/ 如图/ 3/ (/ c/ )/ 所示/ )/ 首先/ 完成/ 被/ 乘/ 矩阵/ 的/ 第/ 2/ 列/ 数据/ 的/ 列/ 播送/ ,/ 产生/ 一个/ 新/ 的/ 被/ 乘/ 矩阵/ ,/ 然后/ 完成/ 乘/ 矩阵/ 第/ 2/ 行/ 数据/ 的/ 行/ 播送/ ,/ 产生/ 一个/ 新/ 的/ 乘/ 矩阵/ ,/ 再/ 对/ 这/ 两个/ 新/ 矩阵/ 和/ 上/ 一次/ 的/ 运算/ 结果/ 完成/ DLP/ 的/ 阵列/ 乘加/ 运算/ ,/ 得到/ 乘积/ 中/ 第/ 1/ 项/ 和/ 第/ 2/ 项/ 之/ 和/ 的/ 部分/ 结果/ ./ 以此类推/ ,/ 如图/ 3/ (/ d/ )/ 所示/ ,/ 完成/ 第/ 3/ 次/ DLP/ 计算/ ,/ 就/ 得到/ 了/ 3/ ×/ 3/ 的/ 矩阵/ 乘法/ 结果/ ./ 不难看出/ ,/ 参照/ 3/ ×/ 3/ 矩阵/ 乘法/ 的/ 例子/ ,/ 采用/ MATLAB/ 语/ 1A/ +/ 2D/ +/ 3G1B/ +/ 2E/ +/ 3H1C/ +/ 2F/ +/ 3K4A/ +/ 5D/ +/ 6G4B/ +/ 5E/ +/ 6H4C/ +/ 5F/ +/ 6K7A/ +/ 8D/ +/ 9G7B/ +/ 8E/ +/ 9H7C/ +/ 8F/ +/ 9/ 图/ 3/ 休斯/ 公司/ 阵列/ 计算机/ 上/ 3/ ×/ 3/ 矩阵/ 乘法/ 的/ 计算/ 过程/ floata/ [/ n/ ]/ [/ n/ ]/ ,/ b/ [/ n/ ]/ [/ n/ ]/ ,/ c/ [/ n/ ]/ [/ n/ ]/ ,/ d/ [/ n/ ]/ [/ n/ ]/ ,/ e/ [/ n/ ]/ [/ n/ ]/ ;/ inti/ ,/ n/ ;/ i/ =/ 1/ ;/ c/ [/ n/ ]/ [/ n/ ]/ =/ (/ broadcast/ )/ 0/ ;/ FOR/ (/ i/ </ =/ n/ )/ {/ d/ [/ n/ ]/ [/ n/ ]/ =/ (/ broadcast/ )/ a/ [/ :/ ,/ i/ ]/ ;/ // // 播送/ 第/ i/ 列/ e/ [/ n/ ]/ [/ n/ ]/ =/ (/ broadcast/ )/ b/ [/ i/ ,/ :/ ]/ ;/ // // 播送/ 第/ i/ 行/ c/ [/ n/ ]/ [/ n/ ]/ =/ c/ [/ n/ ]/ [/ n/ ]/ +/ d/ [/ n/ ]/ [/ n/ ]/ / e/ [/ n/ ]/ [/ n/ ]/ ;/ // // 阵列/ 乘加/ 操作/ i/ =/ i/ +/ 1/ ;/ }/ 实际/ 应用/ 表明/ ,/ 现在/ 的/ DLP/ 计算/ 模式/ 的/ GPU/ 系统/ 芯片/ (/ 例如/ 索尼/ 、/ 东芝/ 和/ IBM/ 公司/ 联合开发/ 的/ 总线/ 互连/ 的/ Cell/ 芯片/ )/ ,/ 比图/ 1/ (/ b/ )/ 中/ 的/ 多/ 核/ 芯片/ 的/ 效率高/ 得/ 多/ [/ 8/ ]/ ,/ 已/ 应用/ 在/ 超级计算机/ 中/ ./ 特别/ 是/ GPGPU/ 系统/ 芯片/ ,/ 效率/ 能比/ 仅/ 执行/ 标量/ 计算/ 的/ 多/ 核/ 芯片/ 提高/ 100/ 倍/ 以上/ ,/ 同时/ 能耗/ 更/ 小/ [/ 9/ ]/ ./ 因此/ ,/ 2010/ 年/ 11/ 月/ TOP500/ 强/ 的/ 前/ 10/ 台/ 最高/ 性能/ 的/ 计算机/ 中/ ,/ 有/ 8/ 台/ 都/ 采用/ 了/ GPGPU/ 加速器/ [/ 10/ ]/ ./ 针对/ 未来/ 应用/ 的/ Nvidia/ 公司/ 的/ Echelon/ 系统/ 芯片/ ,/ 是/ 按/ 2017/ 年/ 的/ 10nm/ 工艺/ 、/ 峰值/ 性能/ 言中/ 的/ 阵列/ 数据表示/ 方法/ ,/ 就/ 可以/ 设计/ 出/ c/ [/ n/ ]/ [/ n/ ]/ =/ a/ [/ n/ ]/ [/ n/ ]/ ./ / b/ [/ n/ ]/ [/ n/ ]/ 矩阵/ 乘法/ 的/ 计算/ 程序/ (/ 如图/ 4/ 所示/ )/ ./ 从/ 矩阵/ 乘法/ 的/ 计算/ 程序/ 不难看出/ ,/ DLP/ 计算/ 模式/ 由/ 阵列/ 计算机/ 实现/ ,/ 阵列/ 数据/ 粗粒度/ 操作/ 的/ 编程/ 模型/ ,/ 不仅/ 与/ 标量/ 数据/ 细粒度/ 操作/ 的/ 编程/ 模型/ 一样/ (/ 是/ 一种/ 确定/ 而/ 可以/ 预测/ 的/ 过程/ )/ ,/ 而且/ 由于/ 数据/ 粗粒度/ 的/ 阵列/ 操作/ 能/ 将/ 标量/ 数据/ 的/ 矩阵/ 乘法/ 计算/ 的/ 3/ 次/ 循环/ 减少/ 到/ 1/ 次/ 循环/ ,/ 编程/ 更/ 简单/ ;/ 计算/ 时间/ 只/ 与/ 矩阵/ 的/ 阶数/ n/ 成/ 比例/ ,/ 计算/ 效率高/ ./ 而/ 标量/ 数据/ 程序/ 的/ 矩阵/ 乘法/ 计算/ 时间/ 与/ n3/ 成/ 比例/ ,/ 计算/ 效率/ 低/ ./ 烌/ 烄/ =/ 烆/ 烎/ C16Tflops/ // s/ 、/ 存储/ 带宽/ 1.6/ terabytes/ // s/ 、/ 芯片/ 功耗/ 小于/ 150W/ 来/ 设计/ 的/ [/ 10/ ]/ ./ Nvidia/ 公司/ 认为/ 到/ 那时/ ,/ GPU/ 不再/ 是/ CPU/ 的/ 外带/ 加速器/ ,/ 相反/ 地/ ,/ CPU/ 与/ GPU/ 将/ 集成/ 在/ 统一/ 存储器/ 体系结构/ 的/ 同一/ 芯片/ 上/ ./ 因此/ ,/ 它/ 和/ DLP/ 计算/ 模式/ 的/ 阵列/ 计算机/ 实现/ 相比/ ,/ 有/ 两点/ 不同/ :/ (/ 1/ )/ Echelon/ 系统/ 芯片/ 是/ 一种/ 通用/ 的/ 细粒度/ 并行计算/ 系统/ ,/ 它/ 采用/ NoC/ (/ NetworkonChip/ )/ 互连/ ,/ 和/ Cell/ 系统/ 芯片/ 一样/ ,/ 也/ 是/ DLP/ 计算/ 模式/ 的/ 一种/ SIMT/ 执行/ ,/ 没有/ 自然/ 反映/ 时空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ 的/ 特点/ ./ 在/ 图像/ 阵列/ 数据处理/ 的/ 7/ 种/ 计算/ 任务/ 中/ ,/ 除了/ 点/ 操作/ 的/ 计算/ 任务/ 之外/ ,/ 其它/ 操作/ 的/ 计算/ 任务/ 都/ 存在/ 同步/ 和/ 互斥/ 的/ 问题/ ./ 例如/ ,/ 在/ Echelon/ 系统/ 芯片/ 上/ 实现/ n/ ×/ n/ 矩阵/ 乘法/ 时/ ,/ 因为/ 不能/ 像/ 在/ 阵列/ 计算机/ 上/ 实现/ 那样/ ,/ 直接/ 完成/ 几何变换/ 的/ 播送/ 操作/ ,/ 以及/ 对/ 整个/ 阵列/ 数据/ 点对点/ 的/ 阵列/ 乘法/ 操作/ ,/ 不能/ 获得/ O/ (/ n/ )/ 的/ 计算/ 效率/ ,/ 而且/ 程序设计/ 复杂/ ;/ (/ 2/ )/ 在/ Echelon/ 系统/ 芯片/ 上/ ,/ 有/ 256/ 个/ TOC/ (/ Throughput/ -/ OptimizedCores/ )/ 和/ 8/ 个/ LOC/ (/ Latency/ -/ OptimizedCores/ )/ ,/ 分别/ 用来/ 完成/ GPU/ 和/ CPU/ 的/ Page5/ 功能/ ./ 由于/ 系统/ 芯片/ TOC/ 和/ LOC/ 的/ 数目/ 比例/ 固定/ ,/ 不随/ 不同/ 的/ 计算/ 任务/ 而/ 变化/ ,/ 因此/ 会/ 出现/ 比例/ 分配/ (/ ExactBalance/ )/ 不/ 平衡/ 问题/ ./ 正如/ 文献/ [/ 10/ ]/ 中/ 所说/ 的/ “/ TheexactbalancebetweenLOCsandTOCsisanopenresearchquestion/ ”/ ./ 在/ 阵列/ 计算机/ 上/ ,/ 阵列/ 处理器/ 的/ 处理/ 元/ 之间/ 的/ 互连/ 直接/ 反映/ 时空/ 计算/ 的/ 概念/ ,/ 用/ 阵列/ 处理器/ 就/ 能/ 统一/ 完成/ 所有/ 计算/ 模式/ 的/ 计算/ ,/ 没有/ Echelon/ 系统/ 芯片/ 中/ TOC/ (/ GPU/ )/ 与/ LOC/ (/ CPU/ )/ 之间/ 的/ 比例/ 分配/ 问题/ ./ 2.3/ OLP/ 计算/ 模式/ 的/ 分析/ 1985/ 年/ ,/ XILINX/ 公司/ 推出/ 了/ 全球/ 第一款/ FPGA/ 产品/ XC2064/ [/ 11/ ]/ ,/ 该/ 产品/ 由/ 8/ ×/ 8/ 个/ 可/ 重构/ 逻辑/ 块/ (/ ConfigurableLogicBlock/ ,/ CLB/ )/ 组成/ ,/ 用户/ 可以/ 根据/ 算法/ 的/ 需要/ 通过/ 逻辑设计/ 定义/ 可/ 重构/ 逻辑/ 块/ 的/ 功能/ ,/ 再/ 将/ 这些/ 逻辑/ 块/ 连接起来/ ,/ 实现/ OLP/ 计算/ 模式/ 的/ 操作/ 粗粒度/ 计算/ ./ XILINX/ 公司/ 将/ 这种/ 芯片/ 称为/ 现场/ 可编程/ 门阵列/ (/ Field/ -/ ProgrammableGateArray/ ,/ FPGA/ )/ 芯片/ ./ FPGA/ 芯片/ 通过/ 阵列/ 结构/ 对/ 单数据流/ // 多数据流/ 完成/ 时空/ 计算/ ,/ 如图/ 1/ (/ d/ )/ 所示/ ./ 与/ 完成/ 操作/ 粗粒度/ 的/ ASIC/ 阵列/ 芯片/ 的/ 电路设计/ 相比/ ,/ FPGA/ 阵列/ 芯片/ 有/ 可/ 反复/ 使用/ 、/ 流片/ 次数/ 少/ 、/ 研发/ 周期短/ 、/ 能够/ 高效/ 实现/ 多种/ 算法/ 计算/ 的/ 特点/ ,/ 被/ 广泛应用/ 于/ 仿真/ 计算/ 和/ 嵌入式/ 计算/ 中/ ./ 因此/ ,/ 随着/ 半导体/ 工艺/ 的/ 发展/ ,/ 从/ 最初/ 的/ 不/ 超过/ 1000/ 门/ 的/ 2/ μ/ m/ 工艺/ 的/ 芯片/ ,/ 到/ 2006/ 年/ 达到/ 了/ 千万/ 门/ 的/ 65nm/ 工艺/ 的/ 芯片/ ,/ 现在/ 28nm/ 工艺/ 的/ FPGA/ 阵列/ 芯片/ 已经/ 作为/ 一种/ 应用/ 平台/ ,/ 集成/ 处理器/ 、/ 存储器/ 、/ IP/ 核等/ 用于/ 高性能/ 计算/ [/ 12/ ]/ ./ 实际/ 应用/ 表明/ ,/ FPGA/ 阵列/ 芯片/ 的/ 计算/ 效率/ ,/ 比图/ 1/ (/ b/ )/ 中/ 的/ 多/ 核众/ 核/ 的/ CPU/ 系统/ 芯片/ 的/ 效率高/ 得/ 多/ [/ 13/ ]/ ./ 在/ 此/ ,/ 以/ 四阶/ 滤波器/ 的/ 公式/ y/ (/ n/ )/ =/ a3x/ (/ n/ -/ 3/ )/ +/ a2x/ (/ n/ -/ 2/ )/ +/ a1x/ (/ n/ -/ 1/ )/ +/ a0x/ (/ n/ )/ 为例/ ,/ 来/ 说明/ OLP/ 计算/ 模式/ 实现/ 操作/ 粗粒度/ 计算/ 的/ 优越性/ ./ 领域专家/ 实现/ 了/ 滤波器/ 的/ 优化/ 算法/ 之一/ (/ 如图/ 5/ 所示/ )/ ,/ 四阶/ 滤波器/ 可/ 由/ 8/ 个/ 处理/ 元来/ 完成/ ./ 上面/ 的/ 4/ 个/ 处理/ 元/ 完成/ 乘法/ 操作/ ,/ 下面/ 的/ 4/ 个/ 处理/ 元/ 完成/ 加法/ 和/ 寄存/ 缓冲/ 操作/ ./ 滤波器/ 计算/ 的/ 过程/ 是/ :/ 乘法/ 操作/ 执行/ 的/ 结果/ yi/ (/ i/ =/ 0/ ,/ 1/ ,/ 2/ ,/ 3/ )/ 作为/ 下面/ 4/ 个/ 加法器/ 的/ 操作数/ ./ 4/ 个/ 加法/ 操作/ 按/ 流水线/ 方式/ 完成/ ,/ 即前/ 一个/ 加法/ 操作/ 执行/ 的/ 结果/ 经/ 寄存器/ r1/ 缓冲/ 后/ 作为/ 后/ 一个/ 加法/ 操作/ 的/ 操作数/ ./ 因此/ ,/ 最后/ 寄存器/ r1/ 的/ 输出/ 就/ 正好/ 是/ 所求/ 的/ 结果/ y/ (/ n/ )/ ./ 不难看出/ ,/ 由于/ FPGA/ 阵列/ 芯片/ 的/ 大小/ 是/ 可/ 扩展/ 的/ ,/ 不论/ 滤波器/ 的/ 阶数/ n/ 有/ 多/ 大/ ,/ OLP/ 计算/ 模式/ 的/ 滤波器/ 计算/ 都/ 只/ 需用/ 一次/ 乘法/ 操作/ 和/ 一次/ 加法/ 操作/ 的/ 时间/ 完成/ ,/ 计算/ 效率/ 很/ 高/ ./ 如果/ 用图/ 1/ (/ b/ )/ 中/ TLP/ 计算/ 模式/ 的/ CPU/ 系统/ 芯片/ 实现/ ,/ 不仅/ 程序设计/ 复杂/ ,/ 而且/ 是/ 绝对/ 达/ 不到/ FPGA/ 的/ 计算/ 效率/ 的/ ./ OLP/ 计算/ 模式/ 采用/ ASIC/ // FPGA/ 阵列/ 芯片/ 实现/ ,/ 自然/ 反映/ 了/ 操作/ 粗粒度/ 时空/ 计算/ 的/ 概念/ ./ 但是/ ,/ 算法/ 要/ 通过/ 电路设计/ // 逻辑设计/ 映射/ 到/ ASIC/ // FPGA/ 阵列/ 芯片/ 上/ ./ OLP/ 计算/ 模式/ 的/ 硬件/ 设计/ 语言/ 的/ 电路设计/ // 逻辑设计/ ,/ 比/ TLP/ 和/ DLP/ 计算/ 模式/ 的/ 软件设计/ 语言/ 的/ 程序设计/ 的/ 抽象层次/ 低/ ,/ 灵活性/ 差/ ,/ 始终/ 被/ 限制/ 着/ ASIC/ // FPGA/ 阵列/ 芯片/ 的/ 应用/ 范围/ ./ 3/ 计算/ 模式/ 的/ 实现/ 统一/ 综上所述/ ,/ 现在/ 的/ TLP/ 、/ DLP/ 和/ OLP3/ 种/ 计算/ 模式/ 的/ 系统/ 芯片/ // 阵列/ 芯片/ 是/ 不/ 统一/ 的/ ./ 因此/ ,/ 由/ 2/ 种/ 甚至/ 3/ 种/ 芯片/ 组成/ 的/ 超级计算机/ 是/ 异构/ 的/ ./ 为了/ 解决/ 编程/ 的/ 不/ 统一性/ 问题/ ,/ 早/ 在/ 2008/ 年/ ,/ Apple/ 公司/ 就/ 向/ Khronos/ 集团/ 提出/ 基于/ C语言/ 的/ OpenCL/ (/ OpenComputingLanguage/ ,/ 开放/ 运算/ 语言/ )/ 标准/ ,/ 设计/ 人员/ 可以/ 通过/ 所/ 熟悉/ 的/ C语言/ ,/ 开发/ 跨平台/ 代码/ (/ 从/ CPU/ 到/ GPU/ ,/ 现在/ 已/ 扩展/ 到/ 了/ FPGA/ [/ 14/ ]/ )/ ./ Xilinx/ 公司/ 在/ 2011/ 年/ 3/ 月/ 推出/ 的/ Zynq/ -/ 7000EPP/ 可/ 扩展/ 处理/ 平台/ ,/ 是/ 一种/ 在/ FPGA/ 阵列/ 芯片/ 上集/ 处理器/ 、/ DSP/ 、/ 存储器/ 、/ 总线/ 、/ IP/ 核等/ 为/ 一体/ 的/ “/ AllProgrammable/ ”/ 平台/ [/ 15/ ]/ ./ 虽然/ OpenCL/ 标准/ 和/ “/ AllProgrammable/ ”/ 平台/ 都/ 提供/ 了/ 统一/ 的/ 编程/ 环境/ ,/ 满足/ 了/ 用/ 软件设计/ 语言/ 实现/ CPU/ 、/ GPU/ 、/ DSP/ 、/ FPGA/ 等/ 的/ 编程/ 要求/ ./ 但是/ 不可避免/ 地/ 带来/ 了/ 编译器/ 和/ 编译/ 方法/ 的/ 复杂性/ 以及/ 编译/ 效率/ 低/ 、/ 存取/ 开销/ 和/ 时间/ 开销/ 大/ 等/ 众多/ 复杂/ 的/ 软件开发/ 问题/ ./ 因此/ ,/ 本文/ 从/ 时空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ 的/ 特点/ 出发/ ,/ 提出/ 了/ 计算/ 模式/ 实现/ 的/ 统一/ 研究/ ./ 统一/ 研究/ 最/ 基本/ 的/ 挑战/ 是/ 计算机/ 的/ 可编程/ 性/ 和/ 能效/ ,/ 研究/ 的/ 主要/ 内容/ 是/ 编程语言/ 和/ 体系结构/ Page6/ 的/ 统一/ ./ 编程语言/ 的/ 统一/ 首先/ 是/ 用/ 阵列/ 处理器/ 实现/ ASIC/ // FPGA/ 阵列/ 芯片/ 的/ 功能/ ,/ 将/ OLP/ 计算/ 模式/ 的/ 硬件/ 设计/ 语言/ 统一/ 为/ 软件设计/ 语言/ ,/ 然后/ 是/ 标量/ 计算/ 和/ 阵列/ 计算/ 语言/ 的/ 统一/ ./ 计算机/ 的/ 体系结构/ (/ Architecture/ )/ 一词/ 是/ 1960/ 年代/ 初期/ 由/ IBMSystem/ // 360/ 系列机/ 的/ 设计者/ 们/ 提出/ 的/ [/ 16/ ]/ ./ 体系结构/ 的/ 统一/ 首先/ 是/ 如何/ 定义/ 外/ 体系结构/ (/ exo/ -/ Architec/ -/ ture/ )/ 的/ 计算机/ 功能/ ,/ 即/ 如何/ 定义/ 软件/ 与/ 具体/ 机器/ 之间/ 接口/ 的/ 指令/ 集合/ ,/ 其次/ 是/ 内/ 体系结构/ (/ endo/ -/ Architecture/ )/ 的/ 计算机/ 内部/ 组织/ 方面/ 的/ 设计/ ./ 3.1/ 编程语言/ 的/ 统一/ 因为/ 指令流/ 包括/ 了/ “/ 操作/ 流/ ”/ 和/ 地址码/ 控制/ 的/ “/ 数据流/ ”/ ,/ 所以/ 能/ 用来/ 完成/ 阵列/ 处理器/ 的/ 处理/ 元/ 之间/ 的/ 互连/ (/ 如图/ 2/ 所示/ )/ ,/ 通过/ 指令/ 就/ 可以/ 对/ 阵列/ 处理器/ 处理/ 元/ 之间/ 的/ 数据/ 进行/ 空间/ 访问/ ./ 以多/ 指令流/ 单数据流/ MISD/ (/ MultipleInstructionSingleData/ )/ 和/ 多/ 指令流/ 多数据流/ MIMD/ (/ MultipleInstructionMultipleData/ )/ 的/ 体系结构/ ,/ 设计/ 相应/ 的/ 阵列/ 语句/ (/ ArrayStatement/ )/ // 阵列/ 指令/ (/ ArrayInstruction/ )/ ,/ 就/ 可以/ 用/ 软件程序/ 语言/ ,/ 在/ 阵列/ 计算机/ 上/ 实现/ OLP/ 计算/ 模式/ 的/ 操作/ 粗粒度/ 计算/ ./ 允许/ 领域专家/ 不/ 需要/ 了解/ 具体/ 芯片/ 的/ 复杂性/ ,/ 采用/ 算法/ 级/ 的/ 强有力/ 的/ 抽象/ ,/ 从/ 数学公式/ 就/ 能/ 得到/ FPGA/ 阵列/ 芯片/ 的/ 操作/ 粗粒度/ 计算/ 过程/ ./ 例如/ ,/ 从/ 滤波器/ 公式/ 到/ 图/ 5/ 中/ 所示/ FPGA/ 阵列/ 芯片/ 的/ 计算/ 过程/ ,/ 可以/ 用/ 阵列/ 语句/ 表示/ 出来/ (/ 如图/ 6/ (/ a/ )/ 所示/ )/ ./ 图/ 6/ (/ a/ )/ 中/ 第/ 1/ 行/ 的/ 4/ 条/ 语句/ 表示/ 图/ 5/ 中/ 第/ 1/ 行/ 的/ 常量/ a3/ ,/ a2/ ,/ a1/ ,/ a0/ ,/ 分别/ 与/ 4/ 个/ 乘法/ 处理/ 元/ 北面/ 输入/ 的/ 数据/ x/ (/ n/ )/ 相乘/ ,/ 结果/ 传向/ 南面/ 的/ 4/ 个/ 加法/ 处理/ 元/ ;/ 第/ 2/ 行/ 的/ 4/ 条/ 语句/ ,/ 表示/ 图/ 5/ 中/ 第/ 2/ 行/ 的/ 加法/ 处理/ 元/ 西面/ 和/ 北面/ 输入/ 的/ 数据/ ,/ 将/ 作为/ 加法/ 处理/ 元/ 的/ 操作数/ ,/ 相加/ 结果/ 给/ 寄存器/ r1/ 后/ ,/ 再/ 将/ r1/ 的/ 值/ 传送/ 给/ 该/ 寄存器/ 东边/ 的/ 加法/ 处理/ 元/ ,/ 最后/ 东边/ 的/ 寄存器/ 的/ 输出/ 就是/ 计算/ 的/ 结果/ ./ 在/ 阵列/ 计算机/ 中/ ,/ 组成/ 阵列/ 语句/ 的/ 标量/ 语句/ 可以/ 一一对应/ 地/ 替换成/ 标量/ 指令/ ,/ 而/ 成为/ 阵列/ 指令/ ,/ 即/ 阵列/ 语句/ 可以/ 用/ 阵列/ 指令/ 表示/ (/ 如图/ 6/ (/ b/ )/ 所示/ )/ ./ 不难看出/ ,/ 通过/ 阵列/ 计算机/ ,/ 采用/ 阵列/ 语句/ 的/ 程序设计/ 语言/ 实现/ OLP/ (/ OperationLevelParallel/ )/ 计算/ 模式/ 的/ 操作/ 粗粒度/ 计算/ 时/ ,/ 将/ 具有/ FPGA/ 阵列/ 芯片/ 硬件/ 描述语言/ 同样/ 的/ 计算/ 高效性/ ./ 为/ 叙述/ 简单/ 起/ 见/ ,/ 我们/ 将/ 通过/ 阵列/ 数据/ 和/ 阵列/ 语句/ 实现/ 粗粒度/ 计算/ 的/ 语言/ 叫做/ 阵列/ 语言/ (/ ArrayLanguage/ )/ ,/ 简称/ A/ 语言/ ./ 图/ 6/ 滤波器/ 的/ 多/ 操作/ 计算/ 的/ 阵列/ 语句/ // 指令/ 表示/ 从/ 数据/ 、/ 操作/ 、/ 语句/ 和/ 顺序/ 描述/ 4/ 个/ 方面/ 可以/ 看出/ ,/ 从/ 标量/ 操作/ 语言/ 上升/ 到/ 阵列/ 操作/ 语言/ 的/ 统一/ 设计/ ,/ 是/ 能/ 在/ 标量/ 操作/ 语言/ (/ 例如/ C语言/ 和/ MATLAB/ 语言/ )/ 的/ 基础/ 上/ 完成/ 的/ ./ 四是/ 顺序/ 描述/ ,/ 包括/ 阵列/ 数据/ 和/ 阵列/ 语句/ 的/ 顺序/ 描述/ ./ 阵列/ 数据/ 的/ 顺序/ 描述/ 可以/ 与/ MATLAB/ 或/ C语言/ 的/ 顺序/ 描述/ 相同/ 并/ 统一/ ./ 由于/ 阵列/ 语句/ 是/ 由/ 标量/ 语句/ 组成/ 的/ ,/ 其/ 操作符/ 与/ 标量/ 操作/ 的/ 操作符/ 相/ 首先/ ,/ 数据/ 要/ 对应/ 于/ 数学/ 语言/ 中/ 的/ 标量/ 数据/ 和/ 矩阵/ 数据/ ./ C语言/ 中/ ,/ 除了/ 标量/ 数据/ 之外/ ,/ 还有/ 叫做/ 数组/ (/ DataArray/ ,/ 数据/ 阵列/ )/ 的/ 数据/ ,/ 数组/ 是/ 由/ 同一/ 类型/ 的/ 标量/ 数据/ 元素/ 组成/ 的/ 有序/ 集合/ ./ 因此/ ,/ 数组/ 的/ 数据类型/ 就是/ 其/ 标量/ 数据/ 元素/ 的/ 数据类型/ ./ 也就是说/ ,/ 数组/ 的/ 数据类型/ 表示/ 与/ 标量/ 数据/ 的/ 类型/ 表示/ 是/ 相同/ 且/ 统一/ 的/ ./ C语言/ 中/ 的/ 数组/ 实际上/ 就是/ MATLAB/ 语言/ 中/ 的/ ArrayData/ (/ 阵列/ 数据/ )/ ,/ 只是/ 名称/ 不同/ 而已/ ./ 在/ MATLAB/ 语言/ 中/ ,/ 标量/ 数据/ 和/ 向量/ 数据/ 作为/ 阵列/ 数据/ 的/ 特例/ 表示/ [/ 17/ ]/ ./ 阵列/ 语言/ A/ 的/ 阵列/ 数据/ 采用/ 了/ 与/ MATLAB/ 语言/ 同样/ 的/ 表示/ 方法/ ./ 其次/ 是/ 操作/ ,/ 阵列/ 数据/ 的/ 操作/ 是/ 对/ 标量/ 数据/ 元素/ 的/ 操作/ ./ 因此/ ,/ 操作符/ 的/ 类型/ 及/ 表示/ 符号/ 均/ 可以/ 与/ C语言/ 中/ 的/ 相同/ 并/ 统一/ ./ 虽然/ 阵列/ 处理器/ 早已/ 问世/ ,/ 但/ C语言/ 中/ 没有/ 定义/ 对/ 数组/ 的/ 操作/ ,/ 只能/ 通过/ 标量/ 操作/ 完成/ 对/ 数组/ 的/ 计算/ ./ 在/ MATLAB/ 语言/ 中/ ,/ 与/ 数学/ 中/ 的/ 矩阵/ 加减法/ 操作/ 相对/ 应/ ,/ 定义/ 了/ 加减乘除/ 的/ 阵列/ 操作/ ,/ 正好/ 用来/ 描述/ 阵列/ 处理器/ 上/ 的/ 阵列/ 指令/ ./ 阵列/ 语言/ A/ 定义/ 了/ MATLAB/ 语言/ 中/ 那样/ 的/ 阵列/ 操作/ ,/ 补充/ 了/ 支持/ 实现/ 几何变换/ 的/ 播送/ (/ Broadcast/ )/ 等/ 3/ 个/ 操作符/ ./ 三是/ 语句/ ,/ 阵列/ 语言/ 包括/ 控制/ 语句/ 和/ 阵列/ 语句/ ./ 由于/ 控制/ 语句/ 是/ 时间/ 一维/ 的/ ,/ 从图/ 4/ 中/ 矩阵/ 乘法/ 的/ 程序/ 中/ 就/ 可以/ 看出/ ,/ 阵列/ 语言/ A/ 的/ 控制/ 语句/ 可以/ 与/ 标量/ 操作/ 语言/ (/ 例如/ C语言/ )/ 的/ 控制/ 语句/ 相同/ 并/ 统一/ ./ 由于/ 阵列/ 语句/ 由/ 不同/ 标量/ 语句/ 元素/ (/ StatementElement/ )/ 组成/ ,/ 标量/ 语句/ 的/ 设计/ 可以/ 与/ C语言/ 的/ 标量/ 语句/ 的/ 设计/ 相同/ 并/ 统一/ ./ Page7/ 同/ ,/ 对/ 阵列/ 语句/ 的/ 顺序/ 描述/ 可以/ 像/ C语言/ 的/ DataArray/ 那样/ ,/ 采用/ 先行/ 后列/ ,/ 并/ 从/ 第一行/ 开始/ 顺序/ 描述/ 的/ 程序设计/ 方法/ ./ 例如/ ,/ 图/ 6/ (/ a/ )/ 中/ 的/ 阵列/ 语句/ 就/ 可以/ 用/ 标量/ 语句/ 顺序/ 描述/ 出来/ ,/ 如图/ 7/ 所示/ ./ 这样一来/ ,/ 阵列/ 语言/ A/ 与/ 现在/ 的/ 并行/ 编程语言/ 不同/ ,/ 不/ 需要/ 使用/ Parallel/ 等/ 术语/ 来/ 说明/ 并行性/ ./ 与/ 标量/ 操作/ 语言/ 一样/ ,/ 保留/ 了/ 顺序程序/ 设计/ 的/ 简单/ 性/ ./ floatfilter/ [/ 2/ ]/ [/ 4/ ]/ =/ {/ s/ [/ 1/ ,/ 1/ ]/ :/ ds/ =/ a3/ / dn/ ;/ // // y3/ =/ a3/ / x/ (/ n/ )/ s/ [/ 1/ ,/ 2/ ]/ :/ ds/ =/ a2/ / dn/ ;/ s/ [/ 1/ ,/ 3/ ]/ :/ ds/ =/ a1/ / dn/ ;/ s/ [/ 1/ ,/ 4/ ]/ :/ ds/ =/ a0/ / dn/ ;/ ;/ s/ [/ 2/ ,/ 1/ ]/ :/ rl/ =/ dw/ +/ dn/ ,/ de/ =/ rl/ ;/ // // de/ =/ r1/ =/ 0/ +/ y3s/ [/ 2/ ,/ 2/ ]/ :/ rl/ =/ dw/ +/ dn/ ,/ de/ =/ rl/ ;/ // // de/ =/ r1/ =/ y3/ +/ y2s/ [/ 2/ ,/ 3/ ]/ :/ rl/ =/ dw/ +/ dn/ ,/ de/ =/ rl/ ;/ // // de/ =/ r1/ =/ y3/ +/ y2/ +/ y1s/ [/ 2/ ,/ 4/ ]/ :/ rl/ =/ dw/ +/ dn/ ,/ de/ =/ rl/ ;/ ;/ // // de/ =/ r1/ =/ y3/ +/ y2/ +/ y1/ +/ y0/ }/ 语句/ 位置/ 阵列/ 语句/ 中/ 的/ 标量/ 语句/ 的/ 顺序/ 表示/ 说明/ 综上所述/ ,/ 因为/ 当/ 标量/ 处理器/ 上升/ 到/ 阵列/ 处理器/ 时/ ,/ 需要/ 以/ 时空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ 的/ 特点/ 为/ 基础/ ,/ 将/ 细粒度/ 的/ 标量/ 操作/ 语言/ 上升/ 到/ 粗粒度/ 的/ 阵列/ 操作/ 语言/ ./ 实际上/ ,/ 阵列/ 语言/ A/ 与/ 标量/ 操作/ 语言/ 是/ 统一/ 的/ ,/ 基本上/ 就是/ 在/ 标量/ 操作/ 语言/ 基础/ 上/ (/ 例如/ C语言/ )/ ,/ 增加/ 了/ 阵列/ 数据/ 的/ 操作/ ,/ 以及/ 支持/ 几何变换/ 的/ 操作/ ./ 从/ 应用/ 上/ 不仅/ 具有/ C语言/ 和/ MATLAB/ 语言/ 的/ 功能/ ,/ 并/ 如图/ 4/ 中/ 所示/ ,/ 具有/ 直接/ 编写/ 粗粒度/ 计算/ 程序/ 的/ 简单/ 性/ ./ 3.2/ 体系结构/ 的/ 统一/ 采用/ 阵列/ 处理器/ 就/ 可以/ 研制/ 时空/ 3/ 维/ (/ 时间/ 1/ 维/ +/ 空间/ 2/ 维/ )/ 的/ 阵列/ 计算机/ (/ ArrayComputer/ )/ ,/ 能/ “/ 从面/ 开始/ ,/ 分层/ 处理/ ”/ 事物/ 演变/ 的/ 数据/ ,/ 使/ 采用/ 数据/ Cache/ 或/ 指令/ Cache/ 实现/ 的/ 数据/ 和/ 程序/ 的/ 局部性/ 统一/ ,/ 直接/ 地/ 转移/ 到/ 阵列/ 处理器/ 支持/ 的/ DLP/ 计算/ 模式/ 的/ 数据/ 粗粒度/ 的/ 高效/ 计算/ 和/ OLP/ 计算/ 模式/ 的/ 操作/ 粗粒度/ 的/ 高效/ 计算/ 上/ ./ 阵列/ 计算机/ 将/ 由/ 单指令/ 存储器/ 、/ 阵列/ 处理器/ 和/ 阵列/ 数据/ // 指令/ 存储器/ (/ ArrayData/ // InstructionMemory/ )/ 组成/ ,/ 如图/ 8/ 所示/ ,/ 可用/ 来/ 实现/ 所有/ 计算/ 模式/ 的/ 粗粒度/ 时空/ 计算/ ./ 如/ 3.1/ 节/ 所述/ ,/ 阵列/ 处理器/ 的/ 机器语言/ (/ 外/ 体系结构/ )/ 与/ 阵列/ 语言/ A/ 的/ 操作/ 类型/ 和/ 数据类型/ 基本上/ 是/ 一一对应/ 的/ ,/ 是/ 统一/ 的/ ./ 阵列/ 语言/ 程序/ 中/ 顺序/ 表示/ 的/ 阵列/ 数据/ 和/ 阵列/ 语句/ 、/ 机器语言/ 的/ 阵列/ 数据/ 和/ 阵列/ 指令/ 的/ 阵列/ 表示/ ,/ 也/ 只是/ 通过/ 映射器/ 将/ 其/ 存放/ 到/ 阵列/ 数据/ // 指令/ 存储器/ 单元/ 中/ 时/ 完成/ 的/ ,/ 没有/ 复杂/ 的/ 所谓/ 串行/ 到/ 并行/ 那样/ 的/ 编译/ 过程/ ./ 阵列/ 数据/ 和/ 阵列/ 指令/ 是/ 分别/ 在/ 操作/ 指令/ 和/ 调用/ 指令/ 的/ 控制/ 下/ 执行/ 的/ ./ 从/ 时间/ 上/ 来看/ ,/ 操作/ 指令/ // 调用/ 指令/ 一条/ 接/ 一条/ 地/ 顺序/ 执行/ ;/ 从/ 空间/ 上/ 来看/ ,/ 阵列/ 数据/ // 指令/ 存储器/ 中/ 的/ 阵列/ 数据/ // 阵列/ 指令/ 在/ 单指令/ 的/ 控制/ 下/ ,/ 完成/ 数据/ // 操作/ 粗粒度/ 计算/ ,/ 自然/ 反映/ 了/ 时空/ 计算/ 的/ 概念/ ./ 1980/ 年代/ ,/ 人们/ 形成/ 了/ 系统/ 芯片/ 的/ 概念/ ,/ 将/ 计算机系统/ 的/ 设计/ 也/ 转移/ 到/ 芯片/ 设计/ 上来/ ,/ 拓宽/ 了/ 计算机/ 体系结构/ 的/ 设计/ 思路/ ./ 从/ 1966/ 年/ Flynn/ 对/ 冯/ ·/ 诺依曼/ 体系结构/ 的/ 4/ 种/ 分类/ 中/ 可以/ 看出/ ,/ SISD/ 是/ 支持/ 细粒度/ 的/ 标量/ 计算/ 的/ ,/ SIMD/ 是/ 支持/ 数据/ 粗粒度/ 的/ 阵列/ 计算/ 的/ ,/ MISD/ 和/ MIMD/ 是/ 支持/ 操作/ 粗粒度/ 的/ 阵列/ 计算/ 的/ ./ 体系结构/ 的/ 统一/ 以/ 冯/ ·/ 诺依曼/ 体系结构/ 的/ Flynn/ 分类/ 为/ 基础/ ,/ 使/ 前述/ 3/ 种/ 计算/ 模式/ 能/ 在/ 一种/ 体系结构/ 的/ 系统/ 芯片/ 上/ 实现/ ,/ 而/ 不是/ 分别/ 在/ CPU/ 、/ GPU/ 和/ ASIC/ // FPGA3/ 种/ 芯片/ 上/ 实现/ ./ DLP/ 计算/ 模式/ 的/ 系统/ 芯片/ 体系结构/ 主要/ 体现/ 在/ 系统/ 芯片/ 中/ 的/ 处理器/ 核/ 及其/ 互连/ 的/ 设计/ 上/ ./ 因为/ 系统/ 芯片/ 中/ 的/ 处理器/ 核/ 往往/ 比/ 标量/ 处理器/ 简单/ ,/ 可/ 叫做/ 瘦核/ (/ Thin/ -/ Core/ )/ ./ 一种/ 极端/ 的/ 情况/ 是/ 叫做/ 位核/ (/ Bit/ -/ core/ )/ 的/ 1/ 位/ 处理器/ 核/ ./ 例如/ 最早/ 的/ MPP/ (/ MassivelyParallelProcessors/ )/ 计算机/ ,/ 就是/ 叫做/ CM/ -/ 1/ 的/ 连接/ 机/ (/ ConnectionMachine/ )/ ./ 它/ 由/ 4096/ 个/ 芯片/ 组成/ ,/ 每个/ 芯片/ 上/ 有/ 16/ 个位/ 核/ ,/ 以/ 人脑/ 结构/ 为/ 模型/ 设计/ [/ 18/ ]/ ./ 人脑/ 模拟/ 和/ 人工智能/ 是/ 计算机/ 的/ 重要/ 研究/ 内容/ ./ 为/ 验证/ 一种/ 治疗/ 大脑/ 疾病/ 的/ 药物/ ,/ 要/ 进行/ 大量/ 的/ 动物/ 实验/ 和/ 人类/ 实验/ ,/ 至少/ 需要/ 15/ 年/ ./ 现在/ 用/ 浮点/ 64/ 位/ 的/ 超级计算机/ 来/ 模拟/ 人类/ 大脑/ [/ 19/ ]/ ,/ 可以/ 解决/ 实验/ 时间/ 问题/ ./ 在/ 人工智能/ 的/ 研究/ 方面/ ,/ 打败/ 顶尖/ 人类/ 选手/ ,/ 获得/ Jeopardy/ !/ (/ 危险/ !/ )/ 智力/ 竞答/ 节目/ 冠军/ 的/ 也/ 是/ 超级计算机/ ,/ 即/ IBM/ 研制/ 的/ Watson/ (/ 沃森/ )/ ./ 处理器/ 核/ 的/ 字长/ ,/ 就/ 像/ 处理器/ 一样/ ,/ 是/ 随/ 应用领域/ 的/ 需要/ 而定/ 的/ ,/ 可以/ 是/ 16/ 位/ 、/ 32/ 位/ 或/ 64/ 位/ ./ 不仅如此/ ,/ 对于/ 无理数/ π/ 的/ 近似计算/ ,/ 2011/ 年/ 7/ 月/ 日本东京大学/ 的/ 金田康/ 正/ 和/ 高桥/ 大介用/ 超大型/ 计算/ Page8/ 机/ 运算/ 37/ 小时/ 将/ π/ 计算/ 到/ 了/ 515.369/ 亿位/ ,/ 这/ 大概/ 是/ 迄今为止/ 的/ 最高/ 近似计算/ 纪录/ ./ 在/ 本世纪内/ ,/ π/ 的/ 近似计算/ 位数/ 有望/ 突破/ 1000/ 亿位/ ./ 所以/ ,/ 计算机/ 还有/ 无限/ 字长/ 的/ 计算能力/ ./ 处理器/ 核/ 之间/ 的/ 互连/ 是/ 多种多样/ 的/ ./ 一种/ 极端/ 复杂/ 的/ 互连/ 情况/ ,/ 就是/ 以/ 人脑/ 结构/ 为/ 模型/ 的/ CM/ -/ 1/ 连接/ 机/ ./ 它/ 采用/ 了/ 12D/ 超/ 立方体/ 的/ 互连/ 网络/ ,/ 将/ 65536/ 个位/ 核/ 连接起来/ ,/ 任何/ 两个/ 位核/ 之间/ 的/ 通信/ 需要/ 12/ 次/ 或/ 少于/ 12/ 次/ 的/ 转接/ ./ 这种/ 互连/ 设计/ ,/ 与/ 现在/ 的/ DLP/ 计算/ 模式/ 的/ 系统/ 芯片/ 的/ 互连/ 设计/ ,/ 都/ 没有/ 自然/ 反映/ 时空/ 计算/ 的/ 概念/ ./ DLP/ 计算/ 模式/ 的/ 程序设计/ 是/ 一种/ 不/ 确定/ 的/ 过程/ ./ 而/ 阵列/ 处理器/ 中/ 处理/ 元/ 之间/ 的/ 互连/ 关系/ ,/ 以及/ 与/ 阵列/ 存储器/ 之间/ 的/ 互连/ 关系/ ,/ 是/ 自然/ 反映/ 应用/ 场景/ 的/ 时空/ 计算/ 概念/ ,/ 按照/ 粗粒度/ 计算/ 的/ 编程/ 确定性/ 设计/ 的/ ./ 为了/ 解决/ 应用/ 场景/ 的/ 多样性/ 问题/ ,/ 在/ 标量/ (/ 单/ 处理器/ )/ 计算机/ 中/ ,/ 可以/ 有/ User/ 、/ SP/ (/ SubProgram/ )/ 、/ IRQ/ (/ InterruptReQuest/ )/ 以及/ Supervisor/ 等/ 4/ 种/ 管理模式/ ./ DLP/ 计算/ 模式/ 的/ 系统/ 芯片/ 采用/ 阵列/ 处理器/ 的/ 体系结构/ 实现/ ./ 类似/ 的/ ,/ 阵列/ 计算机/ 也/ 可以/ 随/ 应用/ 的/ 不同/ ,/ 通过/ 管理模式/ 的/ 不同/ ,/ 将/ 阵列/ 处理器/ 分成/ 小/ 的/ 阵列/ ,/ 以/ 实现/ 现在/ 的/ GPU/ 系统/ 芯片/ 的/ SIMT/ 计算/ ./ ASIC/ // FPGA/ 阵列/ 芯片/ 的/ 应用/ 实践证明/ ,/ OLP/ 计算/ 模式/ 的/ 操作/ 粗粒度/ 的/ 阵列/ 计算/ 是/ 提高/ 时空/ 计算/ 效率/ 的/ 有效途径/ ./ 根据/ 算法/ 特点/ ,/ 在/ ASIC/ // FPGA/ 阵列/ 芯片/ 中/ ,/ 每个/ 处理单元/ 通过/ 电路设计/ // 逻辑设计/ 生成/ 多/ 操作/ 的/ 互连/ 关系/ ./ 由于/ 阵列/ 处理器/ 中/ 的/ 处理器/ 核是/ 相互/ 邻接/ 的/ ,/ 而/ 不是/ 像/ 现有/ 的/ 处理器/ 中/ 那样/ ,/ 指令/ 的/ 地址码/ 只/ 对/ 寄存器/ // 存储器/ 中/ 的/ 数据/ 进行/ 访问/ ./ 阵列/ 处理器/ 中/ 的/ 指令/ 具有/ 邻接/ 寻址/ 模式/ ,/ 指令/ 中/ 操作数/ 的/ 地址码/ 不仅/ 可以/ 对/ 寄存器/ // 存储器/ 中/ 的/ 数据/ 进行/ 访问/ ,/ 也/ 可以/ 对/ 相邻/ 处理器/ 核中/ 的/ 数据/ 进行/ 访问/ ,/ 实现/ 了/ FPGA/ 阵列/ 芯片/ 中多/ 操作/ 形成/ 的/ 运算/ 单元/ 之间/ 数据/ 的/ 流动/ ./ 因此/ ,/ 可以/ 用/ 阵列/ 处理器/ 芯片/ 等效/ 地/ 替代/ ASIC/ // FPGA/ 阵列/ 芯片/ ,/ 实现/ OLP/ 计算/ 模式/ 的/ 阵列/ 芯片/ 体系结构/ 的/ 统一/ ./ 从/ 数学/ 语言/ 中/ 可以/ 看出/ ,/ DLP/ 和/ OLP/ 是/ 两种/ 互补/ 的/ 计算/ 模式/ ./ 为了/ 解决/ TLP/ 计算/ 模式/ CPU/ 系统/ 芯片/ 体系结构/ 不/ 统一/ 的/ 问题/ ,/ 可以/ 将/ TLP/ 计算/ 模式/ 的/ 线程/ 改为/ DLP/ 或/ OLP/ 计算/ 模式/ 的/ 线程/ ,/ 也/ 就是/ 将/ 以/ SISD/ 体系结构/ 为/ 基础/ 的/ 数据/ 细粒度/ 计算/ 改为/ 以/ SIMD/ 体系结构/ 为/ 基础/ 的/ 数据/ 粗粒度/ 计算/ 或/ 以/ MI/ (/ SD/ +/ MD/ )/ 体系结构/ 为/ 基础/ 的/ 操作/ 粗粒度/ 计算/ ./ 这样一来/ ,/ TLP/ 计算/ 模式/ 的/ 线程/ 就/ 可以/ 在/ 操作/ 指令/ 或/ 调用/ 指令/ 的/ 控制/ 下/ ,/ 统一/ 在/ 阵列/ 计算机/ 上/ 执行/ ,/ 而且/ 不会/ 有多核/ SIMT/ 执行/ 的/ 同步/ 和/ 互斥/ 问题/ ,/ 也/ 不会/ 有/ 多种/ 结构/ 的/ 处理/ 芯片/ 的/ 比例/ 分配/ 和/ 数据传输/ 问题/ ,/ 以及/ 由此/ 引起/ 的/ 编程/ 不确定性/ 和/ 复杂性/ 问题/ ./ 这使/ TLP/ 与/ DLP/ 和/ OLP/ 计算/ 模式/ 的/ 程序设计/ 变为/ 一种/ 确定/ 而/ 可/ 预测/ 的/ 过程/ ./ 4/ 结束语/ 综上所述/ ,/ 计算/ 模式/ 的/ 统一/ 研究/ ,/ 就是/ 开发/ 全新/ 的/ 编程语言/ 和/ 计算/ 架构/ ,/ 解决/ 现有/ 计算/ 架构/ 遭遇/ 的/ 计算/ 扩展/ 限制/ 问题/ 和/ 能源/ 使用/ 问题/ ./ 分别/ 由/ CPU/ 和/ GPU/ 系统/ 芯片/ 以及/ ASIC/ // FPGA/ 阵列/ 芯片/ 支持/ 的/ TLP/ 、/ DLP/ 和/ OLP/ 计算/ 模式/ 的/ 编程语言/ 和/ 计算/ 架构/ 是/ 不/ 统一/ 的/ ,/ 带来/ 了/ 多/ 核/ 程序/ 的/ 同步/ 和/ 互斥/ 问题/ ,/ 以及/ 多种/ 结构/ 的/ 芯片/ 比例/ 分配/ 和/ 数据传输/ 问题/ ,/ 有碍于/ 解决/ 可扩展性/ 限制/ 问题/ 和/ 能耗/ 问题/ ./ 本文/ 从/ 时空/ 计算/ 的/ 概念/ 和/ 数学/ 语言/ 的/ 特点/ 出发/ ,/ 提出/ 以/ 阵列/ 数据/ 和/ 阵列/ 语句/ 为/ 基础/ 的/ 阵列/ 语言/ ,/ 它/ 保留/ 了/ 标量/ 操作/ 语言/ 的/ 特点/ ,/ 继承/ 了/ 顺序程序/ 设计/ 的/ 习惯/ ,/ 统一/ 了/ 现有/ 3/ 种/ 计算/ 模式/ 的/ 编程语言/ ./ 以/ 处理/ 元/ 及其/ 邻接/ 互连/ 为/ 基础/ 的/ 阵列/ 处理器/ 统一/ 了/ 现有/ 3/ 种/ 计算/ 模式/ 的/ 计算/ 架构/ ,/ 实现/ 了/ 时空/ 计算/ 的/ 概念/ ./ 以/ 阵列/ 数据/ 和/ 阵列/ 指令/ 为/ 基础/ 的/ 阵列/ 计算机/ 解决/ 了/ 传统/ 计算/ 架构/ 面临/ 的/ 计算/ 扩展/ 限制/ 问题/ ./ 如/ 前言/ 中/ 所述/ ,/ 不断/ 提高/ 计算能力/ 是/ 计算机/ 用来/ 支持/ 数学/ 上/ 的/ “/ 无穷/ ”/ 的/ 途径/ 之一/ ./ 由/ 十几万/ 枚/ 芯片/ 组成/ 的/ 千万/ 亿次/ 超级计算机/ 的/ 功耗/ 就/ 已/ 达到/ 2MW/ 左右/ ,/ 机房/ 面积/ 比/ 庞然大物/ 的/ 电子管/ 计算机/ 的/ 机房/ 面积/ 还/ 大/ 10/ 倍/ (/ 约/ 700/ 平米/ )/ ./ 有/ 专家/ 认为/ ,/ 2017/ 年/ 可能/ 实现/ 的/ Eflops/ 超级计算机/ 的/ 核心/ 处理器/ 的/ 数量/ 大概/ 在/ 1000/ 万到/ 1/ 亿枚/ 之间/ ./ 正如/ 文献/ [/ 10/ ]/ 中/ 所说/ ,/ 若/ 将/ Eflops/ 超级计算机/ 的/ 功耗/ 限制/ 为/ 20MW/ 的话/ ,/ 每个/ 浮点运算/ 的/ 能耗/ 只能/ 为/ 20pJ/ (/ 2/ ×/ 10/ -/ 11/ 焦耳/ )/ ./ 而/ 现在/ 的/ CPU/ 芯片/ 能耗/ 较/ 高/ ,/ 例如/ IntelWestmere/ 每个/ 浮点运算/ 的/ 能耗/ 为/ 1.7/ nJ/ (/ 1.7/ ×/ 10/ -/ 9/ 焦耳/ )/ ;/ FermiGPU/ 芯片/ 的/ 每个/ 浮点运算/ 的/ 能耗/ 大约/ 为/ 225pJ/ ./ 与/ 20pJ/ 的/ 能耗/ 相比/ ,/ 现在/ 的/ CPU/ 和/ GPU/ 浮点运算/ 的/ 能耗/ 分别/ 为/ 其/ 85/ 倍/ 和/ 11/ 倍/ ,/ 能耗/ 问题/ 突出/ ./ 计算机/ 的/ 能耗/ 是/ 由/ 芯片/ 的/ 能耗/ 和/ 芯片/ 之间/ 互连/ 线/ 的/ 能耗/ 组成/ 的/ ./ 有人/ 预测/ 2023/ 年/ ~/ 2062/ 年/ 之间/ ,/ Page9/ 新型/ 芯片/ 和/ 纳米技术/ 将/ 使/ 超级计算机/ 的/ 体积/ 缩小/ 到/ 一块/ 方糖/ 那么/ 大/ ,/ 没有/ 各种/ 电缆/ ,/ 也/ 不/ 需要/ 散热/ [/ 20/ ]/ ./ 为了/ 实现/ 航空航天/ 图像处理/ 计算机/ 的/ 小型化/ ,/ 早/ 在/ 1987/ 年/ ,/ 休斯/ 公司/ 就/ 开发/ 了/ 圆片级/ 的/ 硅/ 直通/ (/ ThroughSiliconVia/ ,/ TSV/ )/ 技术/ ./ 现在/ ,/ IBM/ 公司/ 针对/ 超级计算机/ 的/ 能源/ 使用/ 问题/ ,/ 也/ 研发/ 了/ TSV/ 技术/ ,/ 使/ 芯片/ 之间/ 的/ 距离/ 只有/ 几微米/ ./ 而/ 粗粒度/ 的/ 阵列/ 计算机/ 的/ 规则性/ 适合/ TSV/ 技术/ ,/ 通过/ 消除/ 平面/ 封装/ 的/ mm/ 级/ 长线/ 互连/ ,/ 实现/ μ/ m/ 级/ 垂直/ 堆叠/ ,/ 可以/ 使/ 阵列/ 处理器/ 和/ 阵列/ 存储器/ 之间/ 的/ 距离/ 减少/ 至少/ 1000/ 倍/ ,/ 这能/ 加速/ 数据/ 的/ 传输/ 并/ 减少/ 传输/ 功耗/ ./ 致谢/ 专家/ 对/ 本文/ 的/ 修改/ 提出/ 了/ 宝贵意见/ ,/ 在/ 此/ 表示感谢/ !/ 

