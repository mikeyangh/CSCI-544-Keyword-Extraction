Page1/ 可编程/ 虚拟/ 路由器/ 关键技术/ 与/ 原型/ 系统/ 罗腊/ 咏/ 1/ )/ ,/ 2/ )/ 贺鹏/ 1/ )/ ,/ 2/ )/ 关/ 洪涛/ 1/ )/ 李振宇/ 1/ )/ 谢高岗/ 1/ )/ 1/ )/ (/ 中国科学院计算技术研究所/ 网络/ 技术/ 研究/ 中心/ 北京/ 100190/ )/ 2/ )/ (/ 中国科学院/ 大学/ 北京/ 100049/ )/ 摘要/ 未来/ 网络/ 创新/ 试验/ 床/ 和/ 数据中心/ 网络/ 迫切需要/ 具有/ 虚拟化/ 和/ 可编程/ 能力/ 的/ 路由器/ 设备/ 的/ 支持/ ,/ 可编程/ 虚拟/ 路由器/ 是/ 构建/ 未来/ 网络/ 试验/ 床/ 和/ 数据中心/ 网络/ 的/ 核心/ 设备/ ,/ 逐渐/ 成为/ 研究/ 热点/ ./ 然而/ ,/ 可编程/ 虚拟/ 路由器/ 在/ 设计/ 与/ 实现/ 中/ 面临/ 一系列/ 挑战/ ,/ 其/ 关键技术/ 和/ 原型/ 系统/ 研究/ 对于/ 可编程/ 虚拟/ 路由器/ 研制/ 具有/ 十分/ 重要/ 的/ 意义/ ./ 文中/ 从/ 未来/ 网络/ 试验/ 床/ 和/ 数据中心/ 网络/ 的/ 需求/ 出发/ ,/ 分析/ 了/ 可编程/ 虚拟/ 路由器/ 的/ 特性/ 要求/ ,/ 归纳/ 了/ 可编程/ 虚拟/ 路由器/ 在/ 虚拟化/ 、/ 可编程/ 性/ 和/ 高性能/ 数据/ 包转发/ 等/ 方面/ 存在/ 的/ 技术/ 挑战/ ,/ 并/ 分类/ 讨论/ 了/ 相关/ 关键技术/ 研究进展/ ./ 论文/ 最后/ 评价/ 和/ 比较/ 了/ 国内外/ 设计/ 实现/ 的/ 可编程/ 虚拟/ 路由器/ 原型/ 系统/ ,/ 并/ 讨论/ 了/ 可编程/ 虚拟/ 路由器/ 中/ 有待/ 进一步/ 解决/ 的/ 问题/ ./ 关键词/ 路由器/ ;/ 虚拟化/ ;/ 可编程/ 性/ ;/ 性能/ ;/ 下一代/ 互联网/ 1/ 引言/ 现有/ 的/ TCP/ // IP/ 网络体系结构/ 在/ 可扩展性/ 、/ 移动性/ 、/ 安全/ 可控性/ 等/ 方面/ 面临/ 诸多/ 挑战/ [/ 1/ ]/ ,/ 未来/ 网络/ 研究/ 旨在/ 设计/ 全新/ 的/ 网络体系结构/ 和/ 新/ 的/ 网络协议/ 以/ 应对/ 上述/ 挑战/ ./ 未来/ 网络/ 研究/ 需要/ 大规模/ 试验/ 床/ 的/ 支撑/ ,/ 而/ 可编程/ 虚拟/ 路由器/ 是/ 构建/ 未来/ 网络/ 试验/ 床/ 的/ 关键设备/ ./ 可编程/ 虚拟/ 路由器/ 是/ 指/ 支持/ 可编程/ 和/ 虚拟化/ 两个/ 特性/ 的/ 新型/ 路由器/ ,/ 可编程/ 性/ 允许/ 用户/ 自定义/ 数据包/ 处理/ 方法/ ,/ 而/ 虚拟化/ 支持/ 多个/ 路由器/ 实例/ 并行/ 运行/ 在/ 同一个/ 物理/ 路由器/ 平台/ 之上/ ./ 为/ 满足/ 试验/ 床/ 的/ 需求/ ,/ 可编程/ 虚拟/ 路由器/ 需要/ 向/ 用户/ 提供/ 灵活/ 的/ 可编程/ 能力/ ,/ 允许/ 用户/ 自定义/ 数据包/ 格式/ 与/ 处理过程/ ,/ 从而/ 支持/ 新/ 协议/ 的/ 试验/ 和/ 部署/ ./ 在/ 此基础/ 之上/ ,/ 路由器/ 平台/ 还/ 需要/ 支持/ 虚拟化/ ,/ 从而/ 使/ 多个/ 用户/ 试验/ 可以/ 并行/ 隔离/ 运行/ ./ 在/ 数据中心/ 网络/ 中/ ,/ 多样化/ 的/ 应用/ 需求/ (/ 如高/ 可靠/ 、/ 低/ 延迟/ 、/ 高/ 吞吐/ 等/ )/ 要求/ 网络设备/ 支持/ 差异化/ 的/ 数据/ 包转发/ 方法/ (/ 多路径/ 路由/ 、/ 最短/ 路径/ 路由/ 等/ )/ [/ 2/ ]/ ./ 可编程/ 虚拟/ 路由器/ 支持/ 灵活/ 可编程/ ,/ 可以/ 根据/ 不同/ 应用/ 的/ 需求/ ,/ 对/ 数据/ 包转发/ 方式/ (/ 如/ 查找/ 关键字/ 、/ 查找/ 方法/ 等/ )/ 进行/ 灵活/ 修改/ ./ 此外/ ,/ 大型/ 数据中心/ 是/ 海量/ 服务器/ 的/ 互联/ ,/ 通过/ 虚拟机/ 和/ 物理/ 机/ 的/ 形式/ 提供/ 各种/ 不同/ 的/ 服务/ ./ 由于/ 不同/ 服务/ 之间/ 存在/ 隐私/ 控制/ 、/ 流量/ 隔离/ 等/ 需求/ ,/ 因此/ 需要/ 数据中心/ 网络/ 提供/ 良好/ 的/ 虚拟化/ 机制/ ,/ 使/ 提供/ 不同/ 服务/ 的/ 业务/ 子网/ 相互/ 隔离/ 和/ 独立/ ,/ 能/ 动态/ 共享/ 数据中心/ 网络/ 中/ 的/ 服务器资源/ ./ 求/ ,/ 可编程/ 虚拟/ 路由器/ 需要/ 具备/ 以下/ 特性/ ./ (/ 1/ )/ 虚拟化/ ./ 在/ 一台/ 路由器/ 物理/ 设备/ 上/ 同时/ 运行/ 多个/ 虚拟/ 路由器/ 实例/ ./ 每个/ 虚拟/ 路由器/ 实例/ 可以/ 运行/ 不同/ 的/ 协议/ ,/ 路由器/ 实例/ 之间/ 在/ 功能/ 、/ 性能/ 和/ 故障/ 方面/ 相互/ 隔离/ ,/ 互不/ 干扰/ ,/ 从而/ 支持/ 现有/ 网络/ 业务/ 与/ 未来/ 网络/ 试验/ 和/ 部署/ 的/ 并行/ 运行/ ./ (/ 2/ )/ 可编程/ ./ 路由器/ 体系结构/ 一般/ 分为/ 数据/ 平面/ 和/ 控制/ 平面/ 两/ 部分/ ./ 其中/ ,/ 数据/ 平面/ 主要/ 负责/ 数据包/ 查找/ 和/ 转发/ 操作/ ,/ 控制/ 平面/ 运行/ 路由/ 协议/ (/ 以/ 实现/ 路由/ 信息/ 交换/ )/ 和/ 转/ 发表/ 生成/ ./ 在/ 新型/ 路由器/ 中/ 支持/ 可编程/ 特性/ ,/ 需要/ 提供/ 从/ 数据/ 平面/ 到/ 控制/ 平面/ 的/ 多层次/ 可编程/ 接口/ ,/ 支持/ 新/ 转发/ 算法/ 和/ 新路/ 由/ 协议/ ,/ 适应/ 未来/ 网络/ (/ IP/ 和/ 非/ IP/ 网络/ )/ 创新/ 的/ 快速/ 试验/ 与/ 部署/ ./ 为了/ 满足/ 未来/ 网络/ 试验/ 床/ 和/ 数据中心/ 网络/ 需/ (/ 3/ )/ 高性能/ ./ 基于/ 有限/ 的/ 物理/ 资源/ ,/ 虚拟/ 路由器/ 实例/ 需要/ 达到/ 与/ 商用/ 路由器/ 可/ 比拟/ 的/ 吞吐量/ 和/ 时延/ 等/ 性能指标/ ,/ 使/ 虚拟/ 网络/ 中/ 数据/ 包转发/ 性能/ 接近/ 真实/ 物理/ 网络/ ./ 在/ 以上/ 特性/ 中/ ,/ 可编程/ 和/ 虚拟化/ 是/ 松/ 耦合/ 关系/ ./ 可编程/ 是/ 为了/ 支持/ 自定义/ 的/ 数据包/ 处理/ ,/ 从而/ 支持/ 新/ 协议/ 和/ 新/ 业务/ 的/ 试验/ 与/ 部署/ ;/ 而/ 虚拟化/ 的/ 目的/ 是/ 在/ 此基础/ 之上/ 支持/ 多个/ 不同/ 路由器/ 实例/ 共存/ ,/ 从而/ 支持/ 多个/ 不同/ 用户/ 试验/ 和/ 网络/ 业务/ 的/ 并行/ 隔离/ 运行/ ./ 不过/ ,/ 可编程/ 和/ 虚拟化/ 会/ 增加/ 系统/ 开销/ ,/ 给/ 路由器/ 性能/ 带来/ 一定/ 的/ 影响/ (/ 例如/ ,/ I/ // O/ 虚拟化/ 可能/ 导致/ I/ // O/ 性能/ 下降/ )/ ,/ 因此/ 需要/ 在/ 支持/ 虚拟化/ 和/ 可编程/ 特性/ 的/ 同时/ ,/ 支持/ 高性能/ 数据包/ 处理/ ./ 传统/ 的/ 商业/ 路由器/ 具有/ 很/ 好/ 的/ 数据包/ 处理/ 性能/ ,/ 但是/ 不/ 支持/ 虚拟化/ 技术/ ,/ 或/ 只/ 支持/ 少数/ 同构/ 的/ IP/ 虚拟/ 路由器/ 实例/ ,/ 难以/ 提供/ 不同/ 网络/ 试验/ 之间/ 的/ 隔离/ 以及/ 试验/ 用户/ 与/ 正常/ 网络/ 用户/ 之间/ 的/ 隔离/ ;/ 此外/ ,/ 商业/ 路由器/ 的/ 半封闭/ 特性/ ,/ 导致/ 其/ 提供/ 的/ 编程/ 和/ 配置/ 接口/ 有限/ ,/ 难以/ 满足/ 新型/ 网络体系结构/ 和/ 新/ 协议/ 试验/ 和/ 部署/ 的/ 需求/ ./ OpenFlow/ [/ 3/ ]/ 在/ 数据/ 平面/ 没有/ 提供/ 虚拟化/ 支持/ ,/ 且/ 基于/ 多元/ 组/ 的/ 规则/ 匹配/ 方式/ ,/ 难以/ 满足/ 非/ IP/ 数据包/ 对/ 可编程/ 性/ 的/ 需求/ ./ 尽管/ 可/ 重构/ 路由器/ 和/ 可编程/ 路由器/ 能够/ 提供/ 可编程/ 特性/ ,/ 支持/ 自定义/ 的/ 数据包/ 处理/ ,/ 然而/ 由于/ 不/ 支持/ 虚拟化/ 特性/ ,/ 无法/ 使/ 多个/ 用户/ 共享/ 同一个/ 物理/ 路由器/ 资源/ ,/ 即/ 难以/ 支持/ 多个/ 用户/ 试验/ 的/ 并行/ 隔离/ 运行/ 以及/ 现有/ 网络/ 业务/ 与/ 未来/ 网络/ 试验/ 与/ 部署/ 的/ 共存/ ./ 因此/ ,/ 同时/ 支持/ 虚拟化/ 、/ 可编程/ 和/ 高性能/ 特性/ 的/ 新型/ 路由器/ 能够/ 更好/ 地/ 满足/ 未来/ 网络/ 试验/ 床/ 和/ 数据中心/ 网络/ 的/ 需求/ ./ 2/ 技术/ 挑战/ 可编程/ 虚拟/ 路由器/ 的/ 逻辑/ 架构/ 如图/ 1/ 所示/ ./ 在/ 一个/ 物理/ 路由器/ 平台/ 之上/ ,/ 实现/ 一个/ 资源/ 虚拟化/ 层/ ,/ 对/ 硬件资源/ 进行/ 虚拟化/ 和/ 管理/ ./ 在/ 虚拟化/ 层/ 之上/ ,/ 同/ Page3/ 时/ 运行/ 多个/ 虚拟/ 路由器/ 实例/ ,/ 每个/ 虚拟/ 路由器/ 实例/ 可以/ 运行/ 不同/ 的/ 协议/ ./ 在/ 设计/ 与/ 实现/ 上/ ,/ 可编程/ 虚拟/ 路由器/ 在/ 虚拟化/ 、/ 可编程/ 性/ 和/ 数据/ 包转发/ 性能/ 等/ 方面/ ,/ 存在/ 着/ 诸多/ 技术/ 挑战/ ,/ 如图/ 2/ 所示/ ./ (/ 1/ )/ 虚拟化/ 问题/ ./ 在/ 可编程/ 虚拟/ 路由器/ 中/ ,/ 虚拟化/ 引入/ 两个/ 方面/ 的/ 挑战/ :/ 资源分配/ 与/ 隔离/ 问题/ 以及/ 可扩展性/ 问题/ ./ 在/ 一个/ 虚拟/ 路由器/ 平台/ 中/ ,/ 多个/ 虚拟/ 路由器/ 实例/ 共享/ 网络带宽/ 、/ CPU/ 和/ 存储器/ 等/ 物理/ 资源/ ./ 资源分配/ 的/ 基本/ 要求/ 是/ 满足/ 各个/ 虚拟/ 路由器/ 实例/ 的/ 应用/ 需求/ ./ 在/ 此/ 前提/ 下/ ,/ 需要/ 尽可能/ 公平/ 地/ 分配/ 物理/ 资源/ ,/ 避免/ 若干/ 虚拟/ 路由器/ 实例/ 过度/ 消耗/ 资源/ 导致/ 资源/ 浪费/ 等/ 问题/ ./ 此外/ ,/ 不同/ 虚拟/ 路由器/ 实例/ 在/ 共享资源/ 的/ 前提/ 下/ ,/ 还/ 需要/ 相互/ 隔离/ ,/ 避免/ 单个/ 路由器/ 实例/ 的/ 故障/ 影响/ 其它/ 路由器/ 实例/ 的/ 正常/ 工作/ ./ 然而/ ,/ 资源分配/ 与/ 隔离/ 会/ 导致/ 严重/ 的/ 性能/ 问题/ ,/ 在/ 合理/ 分配资源/ 与/ 保证/ 虚拟/ 路由器/ 实例/ 之间/ 隔离/ 性/ 的/ 前提/ 下/ ,/ 如何/ 尽可能/ 降低/ 虚拟化/ 对/ 性能/ 的/ 影响/ ,/ 也/ 是/ 资源分配/ 与/ 隔离/ 机制/ 的/ 重要/ 挑战/ ./ 在/ 可编程/ 虚拟/ 路由器/ 中/ ,/ 多个/ 虚拟/ 路由器/ 实例/ 同时/ 运行/ ,/ 每个/ 路由器/ 实例/ 拥有/ 一个/ 转发/ 引擎/ ./ 随着/ 应用/ 需求/ 的/ 不断/ 增加/ 和/ 网络/ 规模/ 的/ 扩大/ ,/ 虚拟/ 路由器/ 实例/ 个数/ 不断/ 增加/ ,/ 从而/ 导致/ 转发/ 引擎/ 数量/ 不断/ 增加/ ./ 一方面/ ,/ 转发/ 引擎/ 中/ 的/ 包头/ 协议/ 解析/ 和/ 数据包/ 修改/ 等/ 计算/ 部件/ ,/ 对/ 计算资源/ (/ 如/ CPU/ 资源/ 、/ FPGA/ 中/ 的/ 寄存器/ 和/ 逻辑/ 资源/ )/ 的/ 需求/ ,/ 随着/ 虚拟/ 路由器/ 实例/ 个数/ 的/ 增加/ 而/ 迅速/ 增长/ ;/ 另一方面/ ,/ 转发/ 引擎/ 中/ 的/ 转/ 发表/ (/ ForwardingInfor/ -/ mationBase/ ,/ FIB/ )/ 等/ 存储/ 部件/ ,/ 对/ 存储资源/ (/ 如/ TCAM/ 、/ SRAM/ 和/ DRAM/ 等/ 存储器/ )/ 的/ 需求/ ,/ 也/ 随着/ 虚拟/ 路由器/ 实例/ 个数/ 增加/ 而/ 线性/ 增长/ ./ 如何/ 在/ 计算/ 和/ 存储资源/ 有限/ 的/ 情况/ 下/ ,/ 支持/ 尽可能/ 多/ 的/ 转发/ 引擎/ ,/ 从而/ 支持/ 尽可能/ 多/ 的/ 虚拟/ 路由器/ 实例/ ,/ 是/ 可编程/ 虚拟/ 路由器/ 中/ 面临/ 的/ 可扩展性/ 挑战/ ./ (/ 2/ )/ 可编程/ 性/ 问题/ ./ 该/ 问题/ 主要/ 体现/ 在/ 四个/ 方面/ :/ 可编程/ 接口/ 、/ 可编程/ 系统/ 架构/ 、/ 可编程/ 灵活/ 度/ 和/ 可编程/ 难易度/ ./ 可编程/ 接口/ 要/ 定义/ 良好/ 的/ 开发/ 接口/ ,/ 使/ 用户/ 专注/ 于/ 业务/ 功能/ 开发/ ,/ 而/ 不用/ 关心/ 底层/ 的/ 具体/ 实现/ 方式/ ;/ 可编程/ 系统/ 架构/ 要/ 抽象/ 数据包/ 处理/ 的/ 基本/ 单元/ ,/ 并/ 定义/ 功能/ 单元/ 之间/ 的/ 统一/ 接口/ ,/ 通过/ 对/ 已有/ 功能/ 单元/ 的/ 选择/ 组合/ ,/ 实现/ 用户/ 自定义/ 的/ 数据包/ 处理/ 流程/ ./ 如何/ 设计/ 可编程/ 架构/ ,/ 并/ 保证系统/ 实现/ 性能/ 不/ 受/ 影响/ ,/ 是/ 可编程/ 系统/ 架构/ 面临/ 的/ 挑战/ ;/ 此外/ ,/ 在/ 可编程/ 系统/ 架构/ 中/ ,/ 增强/ 单个/ 功能/ 单元/ (/ 如/ 包头/ 解析/ 单元/ )/ 的/ 可编程/ 灵活/ 度/ ,/ 可以/ 进一步提高/ 系统/ 的/ 编程/ 灵活性/ ,/ 满足用户/ 自定义/ 数据包/ 处理/ 需求/ ,/ 尽量避免/ 用户/ 重新/ 开发新/ 的/ 功能/ 单元/ ./ 然而/ ,/ 功能/ 单元/ 的/ 可编程/ 灵活/ 度/ 与/ 实现/ 复杂度/ 之间/ 存在/ 矛盾/ ,/ 是/ 功能/ 单元/ 可编程/ 灵活/ 度/ 面临/ 的/ 主要/ 挑战/ ;/ 最后/ ,/ 当/ 需要/ 用户/ 重新/ 开发新/ 功能/ 单元/ 时/ ,/ 如何/ 提供/ 高效/ 的/ 编程/ 方法/ ,/ 以/ 降低/ 用户/ 编程/ 难度/ ,/ 缩短/ 用户/ 开发/ 时间/ ,/ 构成/ 了/ 可编程/ 难易度/ 的/ 挑战/ ./ (/ 3/ )/ 数据/ 包转发/ 性能/ 问题/ ./ 在/ 虚拟/ 路由器/ 中/ ,/ 数据/ 包转发/ 性能/ 主要/ 受到/ I/ // O/ 虚拟化/ 性能/ 、/ 驱动/ 和/ 内核/ 级/ 的/ 数据包/ 收发/ 机制/ 的/ 效率/ 以及/ 数据包/ 查找/ 算法/ 性能/ 的/ 影响/ ./ 多个/ 虚拟/ 路由器/ 实例/ 的/ 虚拟/ 网络接口/ 共享/ 物理/ 网络接口/ ,/ 需要/ I/ // O/ 虚拟化/ 技术/ 的/ 支持/ ./ 然而/ I/ // O/ 虚拟化/ 技术/ 由于/ 需要/ 负责/ 虚拟/ 接口/ 和/ 物理/ 接口/ 之间/ 的/ 数据包/ 分发/ ,/ 增加/ 了/ 系统/ I/ // O/ 开销/ ,/ 降低/ 了/ 数据/ 包转发/ 性能/ ./ 此外/ ,/ 路由器/ 实例/ 中/ 驱动/ 和/ 内核/ 级/ 的/ 数据包/ 收发/ 机制/ 的/ 效率/ ,/ 也/ 直接/ 影响/ 着/ 数据包/ 采集/ 和/ 发送/ 性能/ ./ 在/ 传统/ 路由器/ 中/ ,/ IP/ 查找/ 和/ 包/ 分类/ 等/ 查找/ 匹配/ 操作/ 是/ 实现/ 数据包/ 快速/ 转发/ 的/ 瓶颈/ ./ 在/ 虚拟/ 路由器/ 环境/ 下/ ,/ 上述/ 瓶颈/ 依然/ 存在/ ,/ 而且/ 由于/ 可能/ 承载/ 非/ IP/ 协议/ ,/ 数据包/ 查找/ 匹配/ 问题/ 较/ 传统/ 的/ IP/ 查找/ 和/ 五元/ 组包/ 分类/ 问题/ 更为/ 复杂/ ,/ 面临/ 更为严重/ 的/ 挑战/ ./ 为了/ 解决/ 可编程/ 虚拟/ 路由器/ 中/ 的/ 上述/ 关键技术/ 挑战/ ,/ 研究/ 人员/ 从/ 虚拟化/ 带来/ 的/ 资源分配/ 与/ 隔离/ 问题/ 以及/ 可扩展性/ 问题/ 、/ 可编程/ 性/ 问题/ 和/ 转发/ 性能/ 问题/ 等/ 方面/ 展开/ 研究/ ./ 3/ 关键技术/ 研究进展/ 3.1/ 虚拟化/ 为了/ 实现/ 路由器/ 虚拟化/ ,/ 需要/ 重点/ 研究/ 解决/ 资源分配/ 与/ 隔离/ 、/ 计算/ 和/ 存储资源/ 可扩展性/ 等/ 问题/ ./ Page43/ ./ 1.1/ 资源分配/ 与/ 隔离/ 目前/ ,/ 可编程/ 虚拟/ 路由器/ 中/ 的/ 资源分配/ 与/ 隔离/ 通常/ 采用/ 传统/ 的/ 服务器/ 虚拟化/ 技术/ 实现/ ,/ 例如/ ,/ vRouter/ [/ 4/ ]/ 使用/ OpenVZ/ 和/ Xen/ 实现/ 资源分配/ 与/ 隔离/ ,/ SwitchBlade/ [/ 5/ ]/ 中/ 使用/ OpenVZ/ 虚拟化/ 技术/ ,/ 而/ PEARL/ [/ 6/ ]/ 中/ 使用/ LXC/ 虚拟化/ 技术/ ./ 已有/ 研究/ [/ 7/ -/ 8/ ]/ 对/ 服务器/ 虚拟化/ 技术/ 进行/ 了/ 较为/ 全面/ 的/ 综述/ ,/ 本文/ 按照/ 虚拟/ 层次/ 的/ 不同/ ,/ 将/ 虚拟化/ 技术/ 分为/ 三类/ ,/ 并/ 进行/ 简要/ 分析/ 和/ 总结/ ./ (/ 1/ )/ 全/ 虚拟化/ ./ 该/ 技术/ 在/ 操作系统/ 和/ 底层/ 硬件/ 之间/ 使用/ 一个/ 软件/ 中间层/ Hypervisor/ (/ 虚拟机/ 管理程序/ )/ 管理/ 底层/ 硬件资源/ ,/ 使得/ 硬件资源/ 能够/ 被/ 上层/ 多个/ 客户/ 操作系统/ 共享/ 访问/ ./ 当/ 客户/ 操作系统/ 执行/ 某项/ 指令/ 时/ ,/ Hypervisor/ 将/ 接管/ 该段/ 代码/ ,/ 并/ 执行/ 对应/ 的/ 操作/ ./ 由于/ 在/ 全/ 虚拟化/ 技术/ 中/ ,/ 客户/ 操作系统/ 不能/ 对/ 底层/ 硬件/ 进行/ 任何/ 直接/ 控制/ ,/ 而/ 必须/ 通过/ Hypervisor/ 进行/ 代理/ ,/ 使得/ I/ // O/ 性能/ 会/ 受到/ 一定/ 影响/ ./ 全/ 虚拟化/ 技术/ 可以/ 支持/ 不同/ 的/ 操作系统/ ,/ 但是/ 不能/ 模拟/ 不同/ 硬件平台/ ./ 全/ 虚拟化/ 技术/ 的/ 代表/ 软件/ 为/ VMware/ 、/ KVM/ 等/ ./ 近年来/ 一些/ 新/ 的/ X86/ 系列/ 的/ CPU/ 在/ 指令/ 级别/ 上/ 支持/ 全/ 虚拟化/ ,/ 使得/ 全/ 虚拟化/ 环境/ 下/ 的/ 操作系统/ 能/ 达到/ 原生/ 级别/ 的/ 运行/ 速度/ ./ (/ 2/ )/ 半/ 虚拟化/ ./ 该/ 技术/ 同样/ 采用/ 软件/ 中间层/ 来/ 隔离/ 底层/ 硬件/ 和/ 操作系统/ ,/ 不同/ 的/ 是/ ,/ 它/ 试图/ 修改/ 操作系统/ 代码/ ,/ 让/ 客户/ 操作系统/ 本身/ 知道/ 自己/ 运行/ 在/ 一个/ 虚拟化/ 平台/ 上/ ./ 该/ 技术/ 能够/ 显著/ 提升/ 虚拟化/ 技术/ 的/ I/ // O/ 性能/ ./ 例如/ ,/ 当/ 网卡/ 收到/ 一个/ 数据包/ 时/ ,/ 在/ 采用/ 全/ 虚拟化/ 的/ 情况/ 下/ ,/ Hypervisor/ 必须/ 要/ 模拟/ 硬件/ 中断/ ,/ 然后/ 将/ 数据包/ 传输/ 到/ 某个/ 操作系统/ 上/ ./ 而/ 由于/ 在/ 半/ 虚拟化/ 技术/ 中/ ,/ 操作系统/ 本身/ 就/ 知道/ 自己/ 运行/ 在/ 一个/ 虚拟化/ 平台/ 上/ ,/ 底层/ 的/ Hypervisor/ 可以/ 使用/ 一定/ 方式/ ,/ 批量/ 地/ 将/ 数据包/ 传输/ 给/ 该/ 操作系统/ ,/ 而/ 不/ 需要/ 模拟/ 硬件/ 中断/ ./ 由于/ 半/ 虚拟化/ 技术/ 需要/ 对/ 操作系统/ 代码/ 进行/ 修改/ ,/ 使得/ 该项/ 技术/ 不能/ 应用/ 于/ 非/ 开源/ 的/ 商业/ 操作系统/ ,/ 如/ Windows/ ./ 半/ 虚拟化/ 技术/ 代表/ 软件/ 为/ Xen/ 等/ ./ (/ 3/ )/ 操作系统/ 级/ 虚拟化/ ./ 操作系统/ 级/ 虚拟化/ 技术/ 和/ 以上/ 所有/ 虚拟化/ 都/ 不/ 相同/ ,/ 它/ 更/ 类似/ 于/ UNIX/ 的/ Jail/ 系统/ 调用/ ./ 它/ 利用/ 操作系统/ 所/ 提供/ 一些/ 机制/ (/ 如/ Linux/ 中/ 命名/ 空间/ )/ ,/ 将/ 一组/ 进程/ 放入/ 到/ “/ 容器/ ”/ (/ container/ )/ 中/ ,/ 与/ 主/ 操作系统/ 的/ 进程/ 隔离/ 开来/ ,/ 并/ 使用/ 这些/ 机制/ 限制/ 这/ 一组/ 进程/ 的/ CPU/ 占用率/ 和/ 内存/ 使用/ 情况/ ,/ 从而/ 达到/ 虚拟化/ 技术/ 中/ 资源/ 的/ 隔离/ 与/ 分配/ 的/ 目的/ ./ 这类/ 虚拟化/ 技术/ 只能/ 运行/ 在/ 特定/ 的/ 操作系统/ 上/ (/ 几乎/ 都/ 是/ Linux/ )/ ./ 所有/ 的/ “/ 虚拟机/ ”/ (/ 在/ 该/ 技术/ 中/ ,/ 称为/ Server/ )/ 都/ 共享/ 一个/ 内核/ ./ 该/ 虚拟化/ 技术/ 的/ 代表/ 软件/ 为/ OpenVZ/ 、/ Linux/ -/ VServer/ 、/ LXC/ 等/ ./ 操作系统/ 级别/ 虚拟化/ 所/ 带来/ 的/ 开销/ 非常/ 小/ ,/ 但是/ 主要/ 缺点/ 也/ 很/ 明显/ ,/ 使用/ 该/ 虚拟化/ 技术/ ,/ 不能/ 运行/ 多个/ 异构/ 的/ 操作系统/ ./ 3.1/ ./ 2/ 资源/ 可扩展性/ 可编程/ 虚拟/ 路由器/ 中/ 的/ 可扩展性/ 研究/ ,/ 主要/ 考虑/ 在/ 资源/ 受限/ 的/ 情况/ 下/ ,/ 如何/ 支持/ 多种/ 新型/ 网络协议/ 对/ 数据包/ 处理/ 的/ 不同/ 需求/ 以及/ 支持/ 尽可能/ 多/ 的/ 虚拟/ 路由器/ 实例/ 同时/ 运行/ (/ 即/ 支持/ 尽可能/ 多/ 的/ 网络协议/ 与/ 业务/ 试验/ 与/ 部署/ 的/ 并行/ 运行/ )/ ./ 为了/ 提高/ 可扩展性/ ,/ 研究/ 人员/ 提出/ 了/ 统一/ 的/ 数据/ 平面/ 抽象/ ,/ 以/ 一个/ 统一/ 的/ 数据/ 平面/ 抽象/ 支持/ 不同/ 新型/ 网络协议/ 对/ 数据包/ 处理/ 的/ 特殊/ 需求/ ;/ 在/ 此基础/ 之上/ ,/ 进一步/ 研究/ 多个/ 数据/ 平面/ 共存/ 带来/ 的/ 可扩展性/ 问题/ ,/ 提出/ 了/ 数据/ 平面/ 模块/ 共享/ 、/ 转/ 发表/ 合并/ 、/ 软硬件/ 虚拟/ 数据/ 平面/ 迁移/ 等/ 方法/ ./ 3.1/ ./ 2.1/ 统一/ 的/ 数据/ 平面/ 抽象/ OpenFlow/ [/ 3/ ]/ 为/ TCP/ // IP/ 协议/ 数据/ 包转发/ 提供/ 了/ 一个/ 统一/ 的/ 数据/ 平面/ 抽象/ ./ OpenFlow/ 将/ 数据/ 平面/ 抽象/ 为/ 规则/ 抽取/ 、/ 查找/ 匹配/ 和/ 动作/ 执行/ 三个/ 部分/ ./ 首先/ 抽取/ 数据包/ 头部/ 的/ 若干/ 重要/ 域/ (/ 如/ 十元/ 组/ )/ 作为/ 查找/ 匹配/ 的/ 关键字/ ,/ 然后/ 对/ 关键字/ 中/ 的/ 域/ 进行/ 精确/ 匹配/ 或/ 通配符/ 匹配/ ./ 最后/ 根据/ 匹配/ 结果/ 对/ 数据包/ 进行/ 转发/ 、/ 丢弃/ 或/ 修改/ 等/ 操作/ ./ OpenFlow/ 的/ 统一/ 数据/ 平面/ 能够/ 满足/ TCP/ // IP/ 体系/ 中/ 各种/ 不同/ 协议/ 的/ 需求/ ,/ 然而/ OpenFlow/ 的/ 数据/ 平面/ 抽象/ 没有/ 考虑/ 对/ 全新/ 网络协议/ 的/ 支持/ ,/ 难以/ 满足/ 新型/ 网络协议/ 特殊/ 的/ 数据包/ 处理/ 需求/ ./ 为了/ 解决/ 这一/ 问题/ ,/ LabelCast/ [/ 9/ ]/ 提出/ 了/ 一种/ 普适/ 的/ 数据/ 平面/ 抽象/ ,/ 包括/ Label/ 表/ 和/ Cast/ 表两/ 部分/ ./ LabelCast/ 将/ 网络/ 地址映射/ 为定/ 长/ 标签/ ,/ 通过/ Label/ 表/ 实现/ 无/ 状态/ 的/ 快速/ 标签/ 查找/ 转发/ ,/ 基于/ Cast/ 表对/ 服务器/ 计算/ 和/ 存储资源/ 进行/ 描述/ ,/ 支持/ 复杂/ 的/ 网络协议/ 语义/ 和/ 带/ 状态/ 的/ 深度/ 报文/ 处理/ 服务/ ./ 因此/ ,/ LabelCast/ 不仅仅/ 支持/ 现有/ 路由器/ 中/ 常见/ 的/ 基于/ 规则/ 的/ 转发/ 方式/ ,/ 还/ 支持/ 新型/ 网络/ 转发/ 服务/ ,/ 如/ NDN/ ①/ (/ NamedDataNetworking/ )/ 中/ 基于/ 名字/ 的/ 转发/ ./ 即/ LabelCast/ 以/ 一个/ 统一/ 的/ 数据/ 平面/ 抽象/ ,/ 支持/ 多种不同/ 网络协议/ 的/ 数据包/ 处理/ 需求/ ,/ 提高/ 了/ 数据/ 平面/ 的/ 可扩展性/ ./ ①/ NamedDataNetworking/ (/ NDN/ )/ ./ http/ :/ // // www/ ./ named/ -/ data/ ./ Page53/ ./ 1.2/ ./ 2/ 数据/ 平面/ 模块/ 共享/ Anwer/ 等/ 人/ [/ 10/ ]/ 通过/ 分析/ 虚拟/ 路由器/ 数据/ 平面/ 的/ 基本/ 功能模块/ 特性/ ,/ 将/ 数据包/ 处理/ 模块/ 划分/ 为/ 可/ 共享/ 模块/ 和/ 不可/ 共享/ 模块/ ./ 其中/ ,/ 可/ 共享/ 模块/ 是/ 指/ 无/ 状态/ 模块/ ,/ 不/ 需要/ 维护/ 跟/ 虚拟/ 路由器/ 实例/ 相关/ 的/ 任何/ 状态/ 信息/ ,/ 因此/ 可以/ 在/ 不同/ 虚拟/ 路由器/ 数据/ 平面/ 之间/ 共享/ ,/ 如/ 数据包/ 头部/ 解析/ 、/ 校验/ 和/ 计算/ 、/ TTL/ 减/ 一等/ 单元/ ./ 不可/ 共享/ 模块/ 是/ 指带/ 状态/ 的/ 模块/ ,/ 需要/ 维护/ 跟/ 特定/ 虚拟/ 路由器/ 实例/ 相关/ 的/ 信息/ ,/ 如转/ 发表/ 模块/ ./ 根据上述/ 分析/ ,/ Anwer/ 等/ 人/ 基于/ 可编程/ 硬件/ FPGA/ 设计/ 了/ 虚拟/ 路由器/ 数据/ 平面/ ,/ 通过/ 在/ 各个/ 数据/ 平面/ 之间/ 共享/ 模块/ ,/ 有效/ 提高/ 硬件资源/ 利用率/ ./ 试验/ 结果表明/ ,/ 在/ 一块/ NetFPGA/ [/ 11/ ]/ 数据包/ 处理/ 卡上/ ,/ 可以/ 实现/ 8/ 个/ 虚拟/ 路由器/ 数据/ 平面/ ./ 与/ 独立/ 实现/ 8/ 个/ 虚拟/ 路由器/ 数据/ 平面/ 相比/ ,/ 节省/ 约/ 75/ %/ ~/ 79/ %/ 的/ 逻辑/ 资源/ ./ 上述/ 方法/ 通过/ 共享/ 不同/ 虚拟/ 路由器/ 数据/ 平面/ 之间/ 的/ 计算资源/ ,/ 在/ 一定/ 程度/ 上/ 提高/ 了/ 虚拟/ 路由器/ 数据/ 平面/ 的/ 可扩展性/ ./ 然而/ ,/ 由于/ 转/ 发表/ 资源/ 并/ 没有/ 在/ 虚拟/ 路由器/ 实例/ 之间/ 共享/ ,/ 总/ 的/ 转/ 发表/ 大小/ 随着/ 虚拟/ 路由器/ 实例/ 个数/ 的/ 增加/ 而/ 线性/ 增长/ ./ 当/ 虚拟/ 路由器/ 实例/ 个数/ 为/ 8/ 时/ ,/ 占用/ 了/ FPGA/ 片内/ 87/ %/ 的/ 存储资源/ ./ 因此/ ,/ 有限/ 的/ 物理/ 存储资源/ ,/ 进一步/ 限制/ 其/ 支持/ 的/ 虚拟/ 路由器/ 实例/ 个数/ 继续/ 增加/ ./ 3.1/ ./ 2.3/ 转/ 发表/ 合并/ 虽然/ 不同/ 虚拟/ 路由器/ 实例/ 的/ 转/ 发表/ 各不相同/ ,/ 无法/ 直接/ 共享/ 和/ 复用/ ./ 然而/ ,/ 通过/ 挖掘/ 不同/ 虚拟/ 路由器/ 实例/ 转/ 发表/ 之间/ 的/ 相似性/ ,/ 可以/ 实现/ 多个/ 转/ 发表/ 的/ 合并/ ,/ 从而/ 有效/ 降低/ 多个/ 转/ 发表/ 对/ 存储资源/ 的/ 需求/ ,/ 进一步提高/ 可编程/ 虚拟/ 路由器/ 的/ 可扩展性/ ./ 转/ 发表/ 的/ 存储器/ 类型/ 不同/ ,/ 其/ 数据结构/ 和/ 合并/ 算法/ 有/ 很大/ 区别/ ./ 根据/ 转/ 发表/ 存储/ 使用/ 的/ 物理/ 存储器/ 类型/ ,/ 可以/ 将/ 转/ 发表/ 合并/ 方法/ 分为/ 基于/ SRAM/ 和/ 基于/ TCAM/ 的/ 合并/ 方法/ ./ 在/ 基于/ SRAM/ (/ 或/ DRAM/ )/ 的/ 转/ 发表/ 查找/ 方法/ 中/ ,/ 常用/ 的/ 一种/ 数据结构/ 为/ Trie/ 树/ [/ 12/ ]/ ./ Fu/ 等/ 人/ [/ 13/ ]/ 首次/ 提出/ 了/ 将/ 多个/ 虚拟/ 路由器/ 实例/ 的/ 转/ 发表/ 合并/ 压缩/ 到/ 一个/ Trie/ 树/ 的/ 方法/ ,/ 即/ TrieOverlap/ 方法/ ./ 在/ TrieOverlap/ 方法/ 中/ ,/ 通过/ 挖掘/ 不同/ 转/ 发表/ 中/ 前缀/ 之间/ 的/ 相似性/ (/ 其/ 对应/ 的/ Trie/ 树/ 也/ 是/ 相似/ 的/ )/ ,/ 将/ 多个/ 转/ 发表/ 合并/ 成/ 一个/ Trie/ 树/ 进行/ 存储/ ./ 图/ 3/ 所示/ 为/ 使用/ TrieOverlap/ 方法/ ,/ 将/ 图/ 中/ 两个/ 转/ 发表/ FIB1/ 和/ FIB2/ 合并/ 成/ 一个/ Trie/ 树/ ./ 与/ 多个/ Trie/ 树/ 单独/ 隔离/ 存储/ 相比/ ,/ 该/ 方法/ 有效/ 降低/ 了/ 合并/ 后/ Trie/ 树/ 的/ 节点/ 个数/ ,/ 从而/ 节省/ 存储空间/ ./ 然而/ ,/ 在/ 合并/ 后/ 的/ Trie/ 树中/ ,/ 每个/ 节点/ 中/ 存储/ 的/ 下/ 一/ 跳/ 指针/ 个数/ 跟/ 虚拟/ 路由器/ 实例/ 个数/ 相同/ (/ 如图/ 3/ 所示/ ,/ 每个/ Trie/ 树/ 节点/ 中要/ 存储/ 两个/ 下/ 一/ 跳/ 指针/ )/ ,/ 因此/ ,/ 当/ 虚拟/ 路由器/ 实例/ 个数/ 不断/ 增加/ 时/ ,/ 节点/ 所/ 占/ 存储空间/ 太/ 大/ ,/ 这会/ 导致/ 两个/ 问题/ :/ (/ 1/ )/ 访问/ 每个/ 节点/ 需要/ 多次/ 访存/ 操作/ ,/ 增加/ 了/ 每次/ IP/ 查找/ 所/ 需/ 的/ 总访存/ 次数/ ,/ 从而/ 降低/ 了/ 查找/ 速度/ ;/ (/ 2/ )/ 过大/ 的/ 节点/ 会/ 导致/ 合并/ 后/ 的/ Trie/ 树/ 存储空间/ 需求/ 较大/ ,/ 难以/ 在/ 空间/ 较/ 小/ 的/ 高速/ 存储器/ 中/ 进行/ 存储/ ./ 为了/ 解决/ 节点/ 太/ 大/ 这个/ 问题/ ,/ TrieOverlap/ 方法/ 使用/ 叶/ 推/ 技术/ [/ 14/ ]/ ,/ 将/ 中间/ 节点/ 存储/ 的/ 所有/ 下/ 一/ 跳/ 指针/ 推至/ 叶子/ 节点/ ,/ 从而/ 中间/ 节点/ 不/ 需要/ 存储/ 下/ 一/ 跳/ 信息/ ./ 使用/ 叶/ 推/ 技术/ 后/ ,/ TrieOverlap/ 方法/ 中/ Trie/ 树/ 节点/ 大小/ 显著/ 降低/ ./ 然而/ ,/ 叶/ 推/ 技术/ 会/ 导致/ 增量/ 更新/ 困难/ ./ 为了/ 避免/ 这一/ 问题/ ,/ Luo/ 等/ 人/ [/ 15/ ]/ 在/ 合并/ 后/ 的/ Trie/ 树/ 节点/ 中/ 引入/ 前缀/ 位/ 图/ ,/ 使/ 节点/ 和/ 下/ 一/ 跳/ 信息/ 分离/ ./ 每/ 增加/ 一个/ 虚拟/ 路由器/ 实例/ ,/ Trie/ 树/ 节点/ 大小/ 只/ 增加/ 1/ 比特/ ,/ 有效/ 提高/ 了/ 节点/ 大小/ 的/ 可扩展性/ ;/ 在/ Trie/ 树/ 合并/ 的/ 过程/ 中/ ,/ 避免/ 了/ 叶/ 推/ 技术/ 的/ 使用/ ,/ 从而/ 在/ 增加/ 可扩展性/ 的/ 同时/ ,/ 支持/ 快速/ 的/ 增量/ 更新/ ./ 当/ 不同/ FIB/ 的/ 前缀/ 相似/ 度/ 很/ 高时/ ,/ TrieOverlap/ 方法/ 的/ 压缩/ 效果/ 很/ 好/ ./ 然而/ ,/ 虚拟/ 路由器/ 中/ 多个/ 转/ 发表/ 的/ 前缀/ 相似/ 度/ 不/ 一定/ 很/ 高/ ,/ 此时/ 仅仅/ 使用/ TrieOverlap/ 方法/ ,/ 可能/ 无法/ 取得/ 明显/ 的/ 压缩/ 效果/ ./ 为了/ 将/ 前缀/ 不/ 相似/ 的/ 多个/ FIB/ 对应/ 的/ Trie/ 树/ 转换/ 为/ 相似/ Trie/ 树/ ,/ Song/ 等/ 人/ [/ 16/ ]/ 提出/ 了/ 一种/ TrieBraiding/ 机制/ ,/ 通过/ 在/ Trie/ 树/ 节点/ 中/ 增加/ 一个/ 分支/ 比特/ ,/ 允许/ Trie/ 树/ 每个/ 节点/ 的/ 左/ 、/ 右/ 孩子/ 互换/ 位置/ ,/ 从而/ 将/ 不/ 相似/ 的/ Trie/ 树/ 调整/ 到/ 相似/ Trie/ 树/ ,/ 以/ 方便使用/ TrieOverlap/ 方法/ 进行/ 合并/ 压缩/ ./ Ganegedara/ 等/ 人/ [/ 17/ ]/ 发现/ ,/ 在/ VPN/ 路由器/ 中/ ,/ 其/ FIB/ 前缀/ 中/ 由于/ 存在/ 不同/ 的/ 公共/ 前缀/ ,/ 即使/ 使用/ TrieBraiding/ 机制/ 也/ 很/ 难/ 将/ 其/ 对应/ 的/ Trie/ 树/ 转换/ 为/ 相似/ 的/ Trie/ 树/ ,/ 因此/ ,/ 提出/ 了/ 一种/ Multiroot/ 方法/ ,/ 允许/ 从/ Trie/ 树/ 的/ 某/ Page6/ 个/ 中间/ 节点/ 开始/ 合并/ ,/ 从而/ 最大/ 程度/ 上/ 利用/ 子树/ 的/ 相似性/ ./ 基于/ TCAM/ 实现/ FIB/ 存储/ 的/ 基本思路/ 是/ 将/ 前缀/ 逐条/ 存储/ 在/ TCAM/ 中/ ,/ 将/ 前缀/ 对应/ 的/ 下/ 一/ 跳/ 信息/ 存储/ 在/ 附属/ 的/ SRAM/ 中/ ./ 如果/ 每个/ 虚拟/ 路由器/ 实例/ 的/ 转/ 发表/ 单独/ 存储/ ,/ TCAM/ 存储空间/ 需求/ 随/ 虚拟/ 路由器/ 实例/ 个数/ (/ FIB/ 个数/ )/ 的/ 增加/ 而/ 线性/ 增长/ ,/ 有限/ 的/ TCAM/ 存储空间/ 中/ 难以/ 支持/ 大量/ 的/ 虚拟/ 路由器/ 实例/ 的/ FIB/ ./ 为了/ 解决/ 这一/ 问题/ ,/ Luo/ 等/ 人/ [/ 18/ ]/ 通过/ 挖掘/ 不同/ FIB/ 前缀/ 之间/ 的/ 相似性/ ,/ 在/ TCAM/ 中/ 存储/ 共享/ 前缀/ ,/ 从而/ 降低/ TCAM/ 存储空间/ 需求/ ./ 多个/ 转/ 发表/ 在/ TCAM/ 中/ 共享/ 前缀/ 的/ 基本/ 数据结构/ 如图/ 4/ 所示/ ./ 如果/ 属于/ 不同/ FIB/ 的/ 某条/ 前缀/ 相同/ (/ 下/ 一/ 跳/ 不必/ 相同/ )/ ,/ 可以/ 将/ 其/ 合并/ 成/ 一条/ 前缀/ ,/ 该/ 前缀/ 对应/ 的/ 所有/ 下/ 一/ 跳/ 信息/ 顺序存储/ 在/ SRAM/ 中/ ./ 例如/ ,/ 分/ 属于/ 两个/ FIB/ 的/ 条目/ 〈/ P/ ,/ NH1/ 〉/ 和/ 〈/ P/ ,/ NH2/ 〉/ 通过/ 共享/ 前缀/ ,/ 可/ 合并/ 成/ 一个/ 条目/ 〈/ P/ ,/ [/ NH1/ ,/ NH2/ ]/ 〉/ ./ 图/ 4/ 基于/ TCAM/ 的/ 转/ 发表/ 合并/ 数据结构/ [/ 18/ ]/ 基于/ 上述/ 数据结构/ ,/ 属于/ 不同/ 虚拟/ 路由器/ 实例/ 的/ 转/ 发表/ 可以/ 合并/ 在/ 一起/ ,/ 从而/ 显著/ 降低/ TCAM/ 存储空间/ 的/ 需求/ ./ 然而/ ,/ 上述/ 合并/ 方法/ 可能/ 导致/ 不/ 正确/ 的/ IP/ 查找/ 结果/ ./ 为了/ 避免/ 转/ 发表/ 合并/ 带来/ 的/ 不/ 正确/ 查找/ 的/ 问题/ ,/ Luo/ 等/ 人/ 提出/ 了/ 两种/ 基于/ TCAM/ 的/ FIB/ 合并/ 方法/ :/ FIBCompletion/ 和/ FIBSplitting/ ./ FIBCompletion/ 将/ 所有/ 的/ 转/ 发表/ 前缀/ 合并/ 在/ 一个/ TCAM/ 中/ ,/ 并/ 使用/ 正确/ 的/ 下/ 一/ 跳/ 结果/ 填充/ 所有/ 无效/ 的/ 下/ 一/ 跳/ ./ 该/ 方法/ 具有/ 最好/ 的/ 可扩展性/ ,/ 然而/ 其/ 最坏/ 情况/ 下/ 的/ 更新/ 开销/ 较大/ ;/ FIBSplitting/ 将/ 转/ 发表/ 中/ 不/ 相交/ 的/ 叶子/ 前缀/ 合并/ 在/ 一个/ TCAM/ 中/ ,/ 将/ 其余/ 前缀/ 以/ 隔离/ 存储/ 的/ 方式/ 存储/ 在/ 另/ 一个/ TCAM/ 中/ ./ 该/ 方法/ 也/ 能/ 保持/ 较/ 好/ 的/ 可扩展性/ ,/ 同时/ 保证/ 较/ 小/ 的/ 更新/ 开销/ 上界/ ./ 与/ 传统/ 的/ 隔离/ 存储/ 方式/ 相比/ ,/ 上述/ 两种/ 方法/ 能够/ 有效/ 降低/ 多转/ 发表/ 对/ 存储空间/ 的/ 需求/ ./ 存储/ 14/ 个/ 核心/ 路由器/ 的/ 转/ 发表/ 时/ ,/ TCAM/ 存储空间/ 需求/ 分别/ 降低/ 了/ 92/ %/ 和/ 82/ %/ ./ 3.1/ ./ 2.4/ 软硬件/ 虚拟/ 数据/ 平面/ 迁移/ 高效/ 的/ 处理/ 模块/ 共享/ 和/ 转/ 发表/ 合并/ ,/ 可以/ 分别/ 提高/ 计算资源/ 和/ 存储资源/ 的/ 利用率/ ,/ 从而/ 提高/ 硬件/ 虚拟/ 数据/ 平面/ 的/ 可扩展性/ ./ 然而/ ,/ 高速/ 硬件资源/ 有限/ 是/ 目前/ 存在/ 的/ 客观事实/ ,/ 仅仅/ 依靠/ 提高/ 硬件资源/ 利用率/ ,/ 难以/ 从根本上/ 解决/ 可扩展性/ 问题/ ./ 要/ 想/ 支持/ 更/ 多/ 的/ 虚拟/ 路由器/ 实例/ 个数/ ,/ 必须/ 借助于/ 可扩展性/ 很/ 好/ 的/ 软件/ 虚拟/ 数据/ 平面/ ./ Unnikrishnan/ 等/ 人/ [/ 19/ ]/ 提出/ 以/ 软件/ 虚拟/ 路由器/ 和/ 硬件/ 虚拟/ 路由器/ 相结合/ 的/ 方式/ 进一步提高/ 可扩展性/ ./ 少数/ 的/ 、/ 高/ 吞吐/ 的/ 虚拟/ 路由器/ 数据/ 平面/ 在/ NetFPGA/ 中/ 实现/ ,/ 其它/ 大量/ 的/ 、/ 低/ 吞吐/ 的/ 虚拟/ 路由器/ 数据/ 平面/ 在/ 服务器/ OpenVZ/ 中/ 实现/ ./ 硬件/ 数据/ 平面/ 和/ 软件/ 数据/ 平面/ 支持/ 相同/ 的/ 用户/ 定义/ 的/ 接口/ ,/ 以/ 保证数据/ 平面/ 的/ 位置/ (/ 在/ FPGA/ 硬件/ 中/ 还是/ 服务器软件/ 中/ )/ 对/ 用户/ 来讲/ 是/ 透明/ 的/ ./ 虚拟/ 路由器/ 数据/ 平面/ 可以/ 在/ 软件/ 和/ 硬件/ 中/ 进行/ 动态/ 迁移/ ,/ 以/ 满足/ 动态变化/ 的/ 应用/ 需求/ ./ 虚拟/ 路由器/ 数据/ 平面/ 从/ 硬件/ 往/ 软件/ 迁移/ 的/ 过程/ 十分/ 简单/ ./ 首先/ ,/ 在/ 服务器/ 中/ 新创建/ 一个/ OpenVZ/ 虚拟机/ 实例/ ,/ 并/ 在/ 其中/ 运行/ Click/ [/ 20/ ]/ 软件/ 路由器/ ,/ 配置/ Click/ 使得/ 数据/ 包转发/ 处理过程/ 与/ 待/ 迁移/ 的/ 硬件/ 数据/ 平面/ 的/ 处理/ 流程/ 完全相同/ ;/ 其次/ ,/ 将/ 待/ 迁移/ 的/ 硬件/ 数据/ 平面/ 中/ 的/ 转/ 发表/ ,/ 完整/ 地/ 拷贝到/ 刚刚/ 运行/ 的/ 软件/ 路由器/ 中/ ;/ 最后/ ,/ 改变/ 数据包/ 分发/ 模块/ 的/ 配置/ ,/ 将/ 发送至/ 该/ 硬件/ 数据/ 平面/ 的/ 数据包/ 重定向/ 到/ 软件/ 路由器/ 中/ ./ 数据/ 平面/ 从/ 软件/ 往/ 硬件/ 迁移/ 有/ 一些/ 限制/ ./ 如果/ 软件/ 虚拟/ 路由器/ 实例/ 和/ 硬件/ 虚拟/ 路由器/ 实例/ 的/ 转发/ 机制/ 完全相同/ ,/ 拷贝/ 转/ 发表/ 可以/ 实现/ 软件/ 虚拟/ 路由器/ 实例/ 往/ 硬件/ 的/ 迁移/ ./ 如果/ 软件/ 虚拟/ 路由器/ 实例/ 中/ 的/ 转发/ 机制/ ,/ 在/ 硬件/ 数据/ 平面/ 中/ 并/ 不/ 支持/ ,/ 简单/ 的/ 转/ 发表/ 拷贝/ 无法/ 满足/ 迁移/ 的/ 需求/ ,/ 需要/ 对/ 硬件/ 数据/ 平面/ 的/ 逻辑/ 功能/ 进行/ 修改/ ,/ 才能/ 满足/ 这种/ 迁移/ 需求/ ./ 因此/ ,/ Unnikrishnan/ 等/ 人/ [/ 19/ ]/ 提出/ 使用/ 在线/ 动态/ 可/ 重构/ 的/ 方法/ 解决/ 这一/ 问题/ ./ 当/ 硬件/ 数据/ 平面/ 需要/ 进行/ 显著/ 修改/ 才能/ 满足/ 迁移/ 要求/ 时/ ,/ 通过/ 以下/ 步骤/ 实现/ 动态/ 迁移/ ./ 首先/ ,/ 将/ 所有/ 的/ 硬件/ 虚拟/ 数据/ 平面/ 迁移/ 到/ 软件/ 中/ ,/ 并/ 将/ 发往/ 这些/ 硬件/ 数据/ 平面/ 的/ 流量/ 重定向/ 到/ 相应/ 的/ 软件/ 路由器/ 中/ ;/ 其次/ ,/ 对/ 整个/ FPGA/ 进行/ 重新/ 编程/ ,/ 在/ 硬件/ 数据/ 平面/ 中/ 实现/ 新/ 的/ 数据/ 包转发/ 机制/ ;/ 最后/ ,/ 将/ 待/ 迁移/ 的/ 软件/ 路由器/ 实例/ 中/ 的/ 转/ 发表/ 拷贝到/ 相应/ 的/ 硬件/ 数据/ 平面/ 中/ ,/ 并/ 配置/ 数据包/ 分发/ 模块/ ,/ 使/ 流量/ 重新/ 定向/ 至/ 硬件/ 虚拟/ 路由器/ 中/ ./ 软硬件/ 虚拟/ 路由器/ 相结合/ 的/ 方式/ ,/ 可以/ 很/ 好地解决/ 虚拟/ 路由器/ 实例/ 的/ 可扩展性/ 问题/ ./ 然而/ ,/ 上述/ 方法/ 中/ ,/ 软件/ 路由器/ 往/ 硬件/ 迁移/ 时/ 可能/ 存在/ 较大/ 开销/ ./ Page7/ 当/ 一个/ 软件/ 路由器/ 向/ 硬件/ 迁移/ 时/ ,/ 如果/ 硬件/ 中/ 所有/ 的/ 虚拟/ 数据/ 平面/ 均/ 无法/ 实现/ 该软件/ 路由器/ 所/ 需/ 的/ 转发/ 机制/ ,/ 所有/ 的/ 硬件/ 虚拟/ 数据/ 平面/ 都/ 必须/ 迁移/ 到/ 软件/ 中/ ,/ 然后/ 将/ 整个/ FPGA/ 进行/ 重新/ 编程/ ,/ 最后/ 将/ 对应/ 的/ 虚拟/ 路由器/ 实例/ 迁移/ 回/ 硬件/ ./ 试验/ 结果表明/ ,/ 当/ 硬件/ 中/ 只有/ 一个/ 虚拟/ 数据/ 平面/ 时/ ,/ 上述/ 迁移/ 过程/ 需要/ 超过/ 10s/ 的/ 时间/ ./ 在/ 这/ 段时间/ 里/ ,/ 网络/ 数据包/ 不能/ 在/ FPGA/ 硬件/ 中/ 进行/ 转发/ ./ 为了/ 降低/ 迁移/ 时间/ ,/ Yin/ 等/ 人/ [/ 21/ ]/ 提出/ 将/ 每个/ 硬件/ 虚拟/ 数据/ 平面/ 的/ 转发/ 逻辑/ 和/ 转/ 发表/ 划分/ 为/ 一个/ 局部/ 可/ 重构/ 区域/ ./ 当/ 硬件/ 数据/ 平面/ 的/ 转发/ 机制/ 需要/ 修改/ 时/ ,/ 不/ 需要/ 对/ 整个/ FPGA/ 进行/ 重新/ 编程/ ,/ 只/ 需/ 利用/ Xilinx/ 公司/ FPGA/ 提供/ 的/ 局部/ 动态/ 可/ 重构/ 特性/ ,/ 对/ 其中/ 某/ 一个/ 局部/ 可/ 重构/ 区域/ 进行/ 动态/ 编程/ ,/ 从而/ 显著/ 降低/ 了/ 迁移/ 时间/ ,/ 同时/ 也/ 不/ 需要/ 在/ 迁移/ 过程/ 中/ 停止/ 整个/ FPGA/ 硬件/ 数据/ 平面/ 的/ 数据/ 包转发/ 操作/ ./ 试验/ 结果表明/ ,/ 与/ 整个/ FPGA/ 完全/ 重新/ 编程/ 的/ 迁移/ 方法/ 相比/ ,/ 该/ 方法/ 能/ 将/ 迁移/ 速度/ 提高/ 近/ 20/ 倍/ ./ 表/ 1/ 总结/ 了/ 虚拟化/ 问题/ 研究进展/ ./ 路由器/ 虚拟/ 表/ 1/ 虚拟化/ 问题/ 研究进展/ 主要/ 思想/ 现/ 处理/ 模块/ 共享/ 发表/ 的/ 合并/ 资源分配/ 与/ 隔离/ 统一/ 的/ 数据/ 平面/ 抽象/ 为/ 多种/ 网络协议/ 的/ 数据包/ 处理/ 提/ 数据/ 平面/ 模块/ 共享/ 降低/ 多个/ 数据/ 平面/ 共存/ 时/ 的/ 计算/ 转/ 发表/ 合并/ 软硬件/ 虚拟/ 数据/ 平面/ 迁移/ 使用/ 软件/ 数据/ 平面/ 的/ 可扩展性/ ,/ 3.2/ 可编程/ 性/ 软件系统/ 和/ 可编程/ 硬件/ 系统/ (/ 如/ FPGA/ )/ 本身/ 具备/ 可编程/ 性/ ,/ 可以/ 满足/ 自定义/ 数据包/ 处理/ 的/ 需求/ ./ 然而/ ,/ 在/ 虚拟/ 路由器/ 中/ 研究/ 可编程/ 性/ 的/ 目的/ ,/ 是/ 为了/ 提出/ 更/ 简单/ 的/ 编程/ 机制/ ,/ 从而/ 降低/ 用户/ 编程/ 的/ 难度/ ;/ 提出/ 更/ 快速/ 的/ 编程/ 机制/ ,/ 从而/ 缩短/ 原型/ 系统/ 设计/ 、/ 试验/ 与/ 部署/ 的/ 时间/ ./ 为了/ 实现/ 这一/ 目标/ ,/ 研究/ 人员/ 设计/ 了/ 开放/ 的/ 可编程/ 接口/ ,/ 模块化/ 的/ 流水线/ 架构/ 和/ 灵活/ 的/ 可编程/ 模块/ ,/ 实现/ 了/ 易于/ 使用/ 的/ 网络/ 数据包/ 处理/ 编译器/ ./ 3.2/ ./ 1/ 开放/ 的/ 可编程/ 接口/ OpenFlow/ 协议/ [/ 22/ ]/ 定义/ 了/ 开放/ 的/ 可编程/ 接口/ ,/ 允许/ 用户/ 通过/ 软件/ 自/ 定义数据/ 包转发/ 操作/ ,/ 而/ 不用/ 关心/ 底层/ 交换机/ 的/ 具体/ 实现/ 方式/ ./ OpenFlow/ 的/ 可编程/ 接口/ 由/ 一组/ 预先/ 定义/ 的/ 消息/ (/ 控制器/ -/ 交换机/ 消化/ 带来/ 资源分配/ 与/ 隔离/ 、/ 资源/ 可扩展性/ 等/ 问题/ ./ 其中/ ,/ 资源分配/ 与/ 隔离/ 机制/ 目前/ 通常/ 采用/ 成熟/ 的/ 服务器/ 虚拟化/ 技术/ 实现/ ,/ 在/ 隔离/ 性/ 与/ 转发/ 性能/ 之间/ 存在/ 矛盾/ ./ 资源/ 可扩展性/ 问题/ 主要/ 来源于/ 计算/ 和/ 存储资源/ 的/ 稀缺性/ 与/ 虚拟/ 路由器/ 实例/ 个数/ 不断/ 增长/ 的/ 应用/ 需求/ 之间/ 的/ 矛盾/ ./ 研究/ 人员/ 提出/ 统一/ 的/ 数据/ 平面/ 抽象/ 以/ 支持/ 多种不同/ 网络协议/ 的/ 数据包/ 处理/ ,/ 扩展/ 数据/ 平面/ 的/ 普适性/ ./ 在/ 多个/ 数据/ 平面/ 共存/ 时/ ,/ 通过/ 共享/ 和/ 复用/ 多个/ 虚拟/ 路由器/ 的/ 数据包/ 处理/ 模块/ ,/ 合并/ 多个/ 虚拟/ 路由器/ 的/ 转/ 发表/ 等/ 方法/ ,/ 有效/ 提高/ 了/ 硬件资源/ 的/ 利用率/ ,/ 从而/ 改善/ 了/ 硬件/ 虚拟/ 数据/ 平面/ 的/ 可扩展性/ ./ 然而/ ,/ 即使/ 硬件资源/ 利用率/ 很/ 高/ ,/ 其/ 支持/ 的/ 硬件/ 虚拟/ 数据/ 平面/ 个数/ 仍然/ 比较/ 少/ ./ 为了/ 进一步提高/ 可扩展性/ ,/ 研究/ 人员/ 提出/ 了/ 使用/ 软件/ 虚拟/ 路由器/ 与/ 硬件/ 虚拟/ 路由器/ 相结合/ 的/ 方式/ ,/ 在/ 硬件/ 中/ 实现/ 少量/ 高性能/ 的/ 路由器/ 实例/ ,/ 在/ 软件/ 中/ 实现/ 大量/ 低/ 吞吐/ 、/ 高/ 灵活性/ 的/ 路由器/ 实例/ ./ 同时/ ,/ 支持/ 软硬件/ 路由器/ 实例/ 的/ 动态/ 迁移/ ,/ 并/ 使用/ 局部/ 动态/ 可/ 重构/ 技术/ 降低/ 迁移开销/ ,/ 从而/ 满足/ 动态变化/ 的/ 应用/ 需求/ ./ 息/ 、/ 异步/ 消息/ 和/ 对称/ 消息/ )/ 以及/ 这些/ 消息/ 的/ 数据结构/ 组成/ ./ 通过/ 这些/ 消息/ 实现/ OpenFlow/ 交换机/ 和/ 控制器/ 之间/ 的/ 指令/ 和/ 状态/ 信息/ 交互/ ./ 该/ 可编程/ 接口/ 对/ 现有/ TCP/ // IP/ 网络协议/ 的/ 查找/ 转发/ 操作/ 支持/ 较/ 好/ ,/ 然而/ ,/ 没有/ 提供/ 对/ 复杂/ 的/ 带/ 状态/ 的/ 深度/ 数据包/ 处理/ 的/ 支持/ ./ LabelCast/ [/ 9/ ]/ 中/ 定义/ 了/ 基本/ 的/ 服务/ 原语/ (/ 缓冲区/ 原语/ 、/ 线程/ 原语/ 和/ 注册/ 原语/ )/ ,/ 作为/ 用户/ 自定义/ 服务/ 开发/ 的/ 编程/ 接口/ ./ 扩展/ 的/ LabelCast/ 资源/ 容器/ 提供/ 了/ 用户/ 编程/ 的/ 环境/ ,/ 提供/ 了/ 服务/ 运行/ 所/ 需/ 的/ 各种/ 资源/ ./ 用户/ 通过/ 使用/ 缓冲区/ 原语/ 和/ 线程/ 原语/ 分别/ 实现/ 对/ 存储/ 和/ 计算资源/ 的/ 管理/ ,/ 使用/ 注册/ 原语/ (/ 即/ 开放/ 的/ 服务/ 注册/ 接口/ )/ 对/ 自定义/ 服务/ 进行/ 动态/ 加载/ ./ 由于/ LabelCast/ 定义/ 的/ 服务/ 支持/ 协议/ 语义/ 和/ 状态/ 相关/ 的/ 深度/ 数据包/ 处理/ ,/ 该/ 编程/ 接口/ 可以/ 方便/ 扩展/ 支持/ 新型/ 网络协议/ ./ Page83/ ./ 2.2/ 模块化/ 的/ 流水线/ 架构/ 模块化/ 的/ 流水线/ 架构/ ,/ 主要/ 是/ 为了/ 解决/ 可编程/ 系统/ 的/ 架构/ 问题/ ./ 模块化/ 的/ 可编程/ 思想/ 是/ ,/ 将/ 路由器/ 中/ 数据包/ 处理/ 的/ 基本/ 单元/ 模块化/ ,/ 通过/ 对/ 这些/ 基本/ 模块/ 进行/ 选择/ 和/ 组合/ ,/ 实现/ 自定义/ 的/ 数据包/ 处理/ 流水线/ ./ 基于/ 上述/ 模块化/ 的/ 思想/ ,/ Morris/ 等/ 人/ [/ 20/ ]/ 提出/ 了/ 模块化/ 的/ 路由器/ 数据/ 平面/ Click/ ,/ 支持/ 用户/ 自定义/ 的/ 数据包/ 查找/ 和/ 转发/ 处理/ ;/ Handley/ 等/ 人/ [/ 23/ ]/ 提出/ 了/ 模块化/ 的/ 路由器/ 控制/ 平面/ XORP/ ,/ 支持/ 用户/ 自定义/ 的/ 路由/ 计算/ 和/ 路由/ 管理/ 等/ 功能/ ./ 因此/ ,/ 使用/ Click/ 和/ XORP/ 相结合/ ,/ 可以/ 实现/ 模块化/ 的/ 路由器/ ./ 当前/ 主流/ 的/ Linux/ 操作系统/ 通过/ 一定/ 调节/ 和/ 配置/ 也/ 能够/ 实现/ 与/ Click/ 相同/ 的/ 路由器/ 数据/ 平面/ 功能/ ./ 然而/ ,/ Click/ 数据/ 平面/ 并/ 没有/ 考虑/ 对/ 虚拟化/ 的/ 支持/ ./ 此外/ ,/ 纯/ 软件/ 实现/ 方式/ 导致/ 其/ 数据包/ 查找/ 和/ 转发/ 的/ 性能/ 较差/ ./ 为了/ 解决/ 这些/ 问题/ ,/ Anwer/ 等/ 人/ [/ 5/ ]/ 基于/ NetFPGA/ 硬件/ 实现/ 了/ 模块化/ 的/ 虚拟/ 路由器/ SwitchBlade/ ./ 在/ 数据/ 平面/ 中/ ,/ SwitchBlade/ 采用/ 模块化/ 的/ 流水线/ 架构/ ,/ 基于/ FPGA/ 实现/ 多个/ 相互/ 隔离/ 的/ 虚拟/ 数据/ 平面/ ,/ 同时/ 兼顾/ 了/ 良好/ 的/ 可编程/ 性/ 和/ 很/ 高/ 的/ 转发/ 性能/ ;/ 在/ 控制/ 平面/ 中/ ,/ 基于/ OpenVZ/ 提供/ 虚拟化/ 环境/ ,/ 在/ 每个/ 虚拟机/ 中/ 运行/ Quagga/ ①/ 作为/ 路由/ 软件/ ./ 在/ 上述/ 模块化/ 的/ 路由器/ 结构/ 中/ ,/ 可编程/ 性/ 的/ 强弱/ 取决于/ 预先/ 实现/ 的/ 基本/ 模块/ (/ 基本/ 处理单元/ )/ 功能/ 是否/ 完备/ ,/ 能否/ 灵活/ 支持/ 模块/ 间/ 的/ 自由选择/ 组合/ ./ 然而/ ,/ 一个/ 系统/ 中/ 预先/ 实现/ 的/ 基本/ 模块/ 有限/ ./ 进一步提高/ 可编程/ 性有/ 两种/ 基本/ 的/ 思路/ :/ 一种/ 思路/ 是/ 实现/ 灵活/ 的/ 可编程/ 模块/ ,/ 增强/ 单个/ 基本/ 模块/ 的/ 灵活性/ ;/ 另/ 一种/ 思路/ 是/ 降低/ 基本/ 模块/ 的/ 开发/ 难度/ ,/ 以/ 方便/ 用户/ 快速/ 实现/ 自定义/ 模块/ ./ 3.2/ ./ 3/ 灵活/ 的/ 可编程/ 模块/ 在/ 模块化/ 的/ 流水线/ 架构/ 基础/ 之上/ ,/ 增强/ 每个/ 基本/ 模块/ 的/ 灵活/ 度/ 可以/ 进一步提高/ 可编程/ 性/ ./ 例如/ ,/ 在/ 包头/ 协议/ 解析/ 模块/ ,/ 如果/ 只/ 实现/ 基本/ 的/ IPv4/ 和/ IPv6/ 协议/ 解析/ 和/ 目的/ IP地址/ 抽取/ 功能/ ,/ 其/ 灵活性/ 非常/ 有限/ ,/ 只能/ 适用/ 于/ IP/ 查找/ 操作/ ;/ 如果/ 该/ 模块/ 能够/ 支持/ 自定义/ 偏移/ 、/ 自定义/ 长度/ 的/ 多域/ 关键字/ 抽取/ ,/ 则/ 可以/ 适应/ MAC/ 地址/ 查找/ 、/ IP/ 查找/ 、/ 五元/ 组/ 匹配/ 等/ 多种/ 查找/ 操作/ 的/ 包头/ 提取/ ./ 对于/ 传统/ 的/ TCP/ // IP/ 协议/ ,/ OpenFlow/ [/ 3/ ]/ 提出/ 了/ 非常灵活/ 的/ 可编程/ 模块/ ./ OpenFlow/ 将/ 数据包/ 的/ 处理/ 抽象/ 为/ 包头/ 解析/ 、/ 关键字/ 匹配/ 和/ 动作/ 执行/ 三个/ 模块/ ./ 在/ 包头/ 解析/ 模块/ ,/ 提取/ 数据包/ 的/ 十元/ 组/ 作为/ 查找/ 关键字/ ./ 在/ 关键字/ 匹配/ 模块/ ,/ 支持/ 基于/ 十元/ 组/ 的/ 通配符/ 匹配/ 和/ 精确/ 匹配/ ./ 在/ 动作/ 执行/ 模块/ ,/ 定义/ 和/ 实现/ 了/ 路由器/ 中/ 常用/ 的/ 数据包/ 执行/ 动作/ ./ 上述/ 灵活/ 的/ 可编程/ 模块/ ,/ 可以/ 很/ 好/ 地/ 满足/ 目前/ TCP/ // IP/ 路由器/ 中/ 常见/ 的/ 各种/ 数据包/ 处理/ 需求/ ./ 然而/ ,/ OpenFlow/ 基于/ 预先/ 定义/ 的/ 十元/ 组/ 的/ 匹配/ 方法/ 仍然/ 有/ 其/ 编程/ 的/ 局限性/ ./ 首先/ ,/ 关键字/ 的/ 提取/ 受到/ 预先/ 定义/ 的/ 十元/ 组/ 的/ 限制/ ./ 如果/ 用户/ 的/ 新/ 协议/ 使用/ 数据/ 包头/ 的/ 其它/ 域/ (/ 不/ 在/ 十元/ 组/ 定义/ 的/ 范围/ 之内/ )/ ,/ OpenFlow/ 将/ 不能/ 很/ 好/ 地/ 对/ 这种/ 协议/ 进行/ 支持/ ./ 为了/ 弥补/ 这一/ 缺陷/ ,/ OpenFlow/ 定义/ 的/ 关键字/ 越来越/ 长/ ,/ 从/ 最初/ 的/ 10/ 元组/ 扩展/ 到/ 36/ 元组/ ;/ 其次/ ,/ OpenFlow/ 中/ 元组/ 的/ 定义/ 是/ 基于/ 标准/ 的/ TCP/ // IP/ 协议/ ,/ 其/ 可编程/ 范围/ 局限/ 在/ TCP/ // IP/ 体系/ 范围/ 之内/ ./ 对于/ 非/ IP/ 查找/ ,/ 如/ NDN/ 查找/ 等/ ,/ OpenFlow/ 预定/ 义/ 的/ 多元/ 组/ 无法/ 满足/ 需求/ ./ CAFE/ [/ 24/ ]/ 和/ SwitchBlade/ [/ 5/ ]/ 在/ 其/ 包头/ 解析/ 模块/ 中/ ,/ 设计/ 了/ 任意/ 比特/ 抽取/ 器/ ,/ 其/ 最终/ 目的/ 就是/ 支持/ 数据包/ 头部/ 任意/ 比特/ 域/ 的/ 自由组合/ ,/ 从而/ 支持/ 用户/ 自定义/ 的/ 查找/ 关键字/ 提取/ 方式/ ,/ 支持/ 新/ 的/ 协议/ 类型/ ./ 这种/ 包头/ 解析/ 模块/ 的/ 灵活性/ 越强/ ,/ 其/ 可编程/ 性越/ 好/ ,/ 对/ 新/ 协议/ 的/ 支持/ 就/ 越/ 好/ ./ 然而/ ,/ 其/ 复杂程度/ 也/ 越/ 高/ ./ 复杂/ 的/ 抽取/ 过程/ 给/ 包头/ 解析/ 带来/ 了/ 性能/ 方面/ 的/ 挑战/ ./ 为了/ 实现/ 高性能/ 的/ 、/ 灵活/ 的/ 包头/ 解析/ 模块/ ,/ Attig/ 等/ 人/ [/ 25/ ]/ 基于/ FPGA/ 设计/ 了/ 400Gbps/ (/ Gigabitpersecond/ ,/ 千兆比特/ 每秒/ )/ 包头/ 解析/ 流水线/ ,/ 将/ 每/ 一个/ 头部/ 的/ 解析映射/ 到/ 流水线/ 中/ 的/ 一个/ 流水/ 级/ ,/ 在/ 流水/ 级/ 中/ 通过/ 用户/ 配置/ 的/ 微码/ ,/ 实现/ 灵活/ 的/ 自定义/ 多域/ 抽取/ ./ 3.2/ ./ 4/ 数据包/ 处理/ 编译器/ 如果/ 通过/ 基本/ 模块/ 的/ 自由选择/ 组合/ 以及/ 可编程/ 模块/ 的/ 灵活/ 配置/ ,/ 仍然/ 无法/ 满足用户/ 的/ 新/ 协议/ 对/ 数据包/ 处理/ 的/ 需求/ ,/ 就/ 需要/ 用户/ 自己/ 编写/ 相应/ 的/ 数据包/ 处理单元/ ,/ 然后/ 以/ 插件/ 的/ 方式/ ,/ 插入/ 到/ 模块化/ 的/ 流水线/ 架构/ 中/ ,/ 或者/ 替换/ 已有/ 模块/ ./ 对于/ 软件/ 数据包/ 处理/ 模块/ 来讲/ ,/ 统一/ 的/ 、/ 友好/ 的/ 编程/ 接口/ 可以/ 方便/ 用户/ 的/ 编程/ 过程/ ;/ 然而/ ,/ 对于/ 硬件/ 可编程/ 模块/ ,/ 即使/ 具备/ 定义/ 良好/ 的/ 模块接口/ ,/ 用户/ 自己/ 编程/ 也/ 会/ 遇到/ 较大/ 的/ 困难/ ,/ 因为/ 涉及/ 到/ 硬件/ 编程语言/ VHDL/ // Verilog/ 的/ 学习/ 使用/ 以及/ 对/ 硬件/ 底层/ 细节/ 的/ 了解/ 和/ 认识/ ./ 为了/ 简化/ 用户/ 编程/ 难度/ ,/ 尤其/ 是/ 对/ 硬件/ 模块/ 的/ 编程/ 难度/ ,/ 研究/ 人员/ 设计/ 了/ 网络/ 数据包/ 处理/ 编译器/ ,/ 可以/ 让/ 用户/ 使用/ 自己/ 熟悉/ 的/ 高级/ 语言/ ,/ 如/ C/ // C++/ 或/ 脚本语言/ ,/ 编写/ 数据包/ 处理/ 功能/ ,/ 然后/ 通过/ 编译器/ 将/ 其/ 转换/ 为/ 对应/ 的/ 硬件/ 模块/ 实现/ ./ Unnikrishnan/ 等/ ①/ Thequaggaroutingsuite/ ./ http/ :/ // // www/ ./ nongnu/ ./ org/ // quagga/ // Page9/ 人/ [/ 26/ ]/ 针对/ 基于/ FPGA/ 的/ 模块化/ 虚拟/ 路由器/ 数据/ 平面/ ,/ 设计/ Click/ 风格/ 的/ 数据包/ 处理/ 编译器/ ReClick/ ,/ 以/ 降低/ 硬件/ 模块/ 编程/ 的/ 难度/ ./ 如果/ 用户/ 熟悉/ Click/ 的/ 编程/ 方式/ ,/ 将会/ 十分/ 容易/ 地/ 使用/ ReClick/ 进行/ 硬件/ 数据包/ 处理/ ./ 在/ Attig/ 等/ 人/ [/ 25/ ]/ 设计/ 的/ 包头/ 解析/ 流水线/ 中/ ,/ 也/ 同时/ 设计/ 了/ 数据包/ 头部/ 解析/ 语言/ (/ PacketParsingLanguage/ ,/ PPL/ )/ ,/ 以类/ C++/ 的/ 风格/ 定义/ 了/ 每个/ 头部/ 的/ 格式/ 和/ 处理/ 规则/ ,/ 方便/ 用户/ 对/ 新/ 协议/ 包头/ 解析/ 的/ 自定义/ 处理/ ./ 表/ 2/ 总结/ 了/ 虚拟/ 路由器/ 中/ 可编程/ 性/ 问题/ 的/ 研究进展/ ./ 研究/ 人员/ 设计/ 了/ 开放/ 的/ 可编程/ 接口/ ,/ 以/ 简化/ 用户/ 编程/ 难度/ ,/ 使/ 用户/ 不用/ 关心/ 底层/ 的/ 具体/ 实现/ 方式/ ;/ 提出/ 模块化/ 的/ 数据包/ 处理/ 架构/ ,/ 设计/ 实现/ 了/ 常见/ 数表/ 2/ 可编程/ 性/ 问题/ 研究进展/ 开放/ 的/ 可编程/ 接口/ 提出/ 开放/ 的/ 、/ 统一/ 的/ 编程/ 接口/ ,/ 模块化/ 的/ 流水线/ 架构/ 提出/ 可编程/ 的/ 数据包/ 处理/ 系统/ 灵活/ 的/ 可编程/ 模块/ 增强/ 包/ 处理/ 架构/ 中/ 单个/ 模块/ 的/ 数据包/ 处理/ 编译器/ 降低/ 模块/ 或/ 插件/ 的/ 编程/ 难度/ 当/ 重新/ 编程/ 无法/ 避免/ 时/ ,/ 设计/ 高级/ 语言/ 单/ 配置/ 满足/ 更/ 多/ 的/ 处理/ 需求/ 3.3/ 转发/ 性能/ 在/ 可编程/ 虚拟/ 路由器/ 中/ ,/ I/ // O/ 虚拟化/ 带来/ 的/ 开销/ ,/ 数据包/ 收发/ 机制/ 的/ 效率/ 以及/ 数据包/ 查找/ 匹配/ 操作/ 的/ 性能/ ,/ 成为/ 限制/ 虚拟/ 路由器/ 转发/ 性能/ 的/ 重要/ 因素/ ./ 为了/ 提高/ 转发/ 性能/ ,/ 工业界/ 和/ 学术界/ 提出/ 大量/ 的/ 虚拟/ I/ // O/ 加速/ 技术/ ,/ 优化/ 驱动/ 和/ 内核/ 级/ 的/ 数据包/ 收发/ 机制/ ,/ 并/ 加速/ 查找/ 匹配/ 操作/ 的/ 性能/ ./ 3.3/ ./ 1I/ // O/ 虚拟化/ 加速/ 技术/ 在/ 可编程/ 虚拟/ 路由器/ 中/ ,/ 每个/ 虚拟/ 路由器/ 实例/ 都/ 有/ 自己/ 的/ 虚拟/ 网络接口/ ,/ 不同/ 路由器/ 实例/ 之间/ 的/ 虚拟/ 接口/ 逻辑/ 上/ 相互/ 隔离/ ,/ 物理/ 上/ 共享/ 实际/ 的/ 网络接口/ ,/ 如图/ 5/ 所示/ ./ 为了/ 实现/ 虚拟/ 网络接口/ 的/ 抽象/ ,/ 虚拟机/ 管理程序/ 需要/ 负责/ 完成/ 物理/ 网络接口/ 与/ 各个/ 虚拟/ 网络接口/ 之间/ 的/ 数据包/ 分发/ ,/ 参与/ 各个/ 虚拟/ 路由器/ 实例/ 的/ 每/ 一次/ I/ // O/ 操作/ ./ 因此/ ,/ 虚拟机/ 管理程序/ 中/ 的/ 数据包/ 分发/ 工作/ 成为/ I/ // O/ 虚拟化/ 带来/ 的/ 瓶颈/ ./ Russell/ 等/ 人/ [/ 27/ ]/ 给/ Linux/ 操作系统/ 中/ 的/ 各种/ 虚拟化/ 软件设计/ 了/ 一套/ 标准化/ 的/ 半/ 虚拟/ I/ // O/ 接口/ Virtio/ ./ 半/ 虚拟化/ I/ // O/ 能够/ 让/ 客户/ 操作系统/ 意识/ 到/ 自身/ 运行/ 在/ 虚拟化/ 环境/ 中/ ,/ 并/ 在/ 这个/ 基础/ 上/ 采用/ 一定/ 的/ 优化/ 措施/ ,/ 提升/ 了/ 客户/ 操作系统/ 的/ I/ // O/ 性能/ ./ 目前/ ,/ KVM/ 虚拟化/ 技术支持/ Virtio/ ./ 据包/ 处理/ 流程/ 中/ 的/ 大部分/ 模块/ ,/ 并/ 提供/ 统一/ 的/ 、/ 友好/ 的/ 接口/ ./ 用户/ 对/ 已有/ 模块/ 进行/ 复用/ 和/ 组合/ ,/ 以/ 满足/ 大部分/ 常见/ 的/ 数据包/ 处理/ 需求/ ,/ 有/ 特殊/ 需求/ 的/ 用户/ 也/ 只/ 需/ 将/ 精力/ 集中/ 于/ 新/ 协议/ 特定/ 的/ 数据包/ 处理/ 功能/ 上/ ,/ 然后/ 以/ 插件/ 的/ 方式/ ,/ 将/ 自定义/ 的/ 模块/ 插入/ 到/ 包/ 处理/ 流水线/ 架构/ 中/ ;/ 在/ 模块化/ 的/ 架构/ 中/ ,/ 提高/ 每个/ 重要/ 模块/ ,/ 尤其/ 是/ 包头/ 解析/ 模块/ 的/ 灵活性/ ,/ 整体/ 架构/ 对/ 新/ 协议/ 的/ 适应性/ 就/ 越强/ ,/ 就/ 越/ 能/ 降低/ 用户/ 开发新/ 系统/ 的/ 工作量/ ,/ 避免/ 大量/ 的/ 重新/ 开发/ 工作/ ;/ 在/ 用户/ 开发/ 实现/ 无法/ 避免/ 的/ 情况/ 下/ ,/ 通过/ 研究/ 设计/ 网络/ 数据包/ 处理/ 编译器/ ,/ 提供/ 给/ 用户/ 熟悉/ 的/ 高层/ 编程语言/ 接口/ ,/ 降低/ 用户/ 编程/ 的/ 难度/ 和/ 门槛/ ,/ 从而/ 实现/ 用户/ 自定义/ 协议/ 的/ 快速/ 编程/ ./ 主要/ 思想/ 尽管/ 半/ 虚拟化/ I/ // O/ 技术/ 能够/ 提升/ 客户/ 操作系统/ 的/ I/ // O/ 性能/ ,/ 但/ 仍然/ 存在/ 上下文/ 开销/ 过/ 高等/ 问题/ ./ 解决问题/ 的/ 关键在于/ 取消/ 虚拟机/ 管理程序/ 的/ 代理/ ,/ 让/ 客户/ 操作系统/ 能够/ 直接/ 访问/ 到/ 物理/ 设备/ ./ 具体说来/ ,/ 直接/ 访问/ 物理/ 设备/ 可以/ 划分/ 为/ 两个/ 问题/ :/ (/ 1/ )/ 对/ 客户/ 操作系统/ 的/ 设备/ 缓冲区/ 直接/ DMA/ (/ DirectMemoryAccess/ )/ 访问/ ./ (/ 2/ )/ 中断/ 重/ 映射/ ./ IntelVT/ -/ d/ 技术/ ①/ (/ IntelVirtualizationTechnologyforDirectedI/ // O/ )/ 解决/ 了/ 以上/ 两个/ 问题/ ,/ 提供/ 了/ 数据/ 由/ 底层/ 硬件/ 到客/ ①/ IntelVT/ -/ d/ ./ http/ :/ // // software/ ./ intel/ ./ com/ // en/ -/ us/ // articles/ // in/ -/ tel/ -/ virtualization/ -/ technology/ -/ for/ -/ directed/ -/ io/ -/ vt/ -/ d/ -/ enhancing/ -/ intel/ -/ platforms/ -/ for/ -/ efficient/ -/ virtualization/ -/ of/ -/ io/ -/ devicesPage10/ 户/ 操作系统/ 的/ 直接/ 通路/ ./ SR/ -/ IOV/ ①/ (/ Single/ -/ RootI/ // OVirtualization/ )/ 提供/ 了/ 将/ 单个/ PCI/ 设备/ 虚拟/ 成/ 多个/ 设备/ 的/ 方法/ ./ SR/ -/ IOV/ 为/ 每个/ 虚拟机/ 提供/ 独立/ 内存空间/ 、/ 中断/ 和/ DMA/ 流/ ./ SR/ -/ IOV/ 架构/ 的/ 设计/ 允许/ 一个/ I/ // O/ 设备/ 支持/ 多个/ 虚拟/ 功能/ ,/ 从而/ 提供/ 了/ 一种/ 不/ 需要/ 软件/ 模拟/ 就/ 可以/ 共享/ I/ // O/ 设备/ 和/ I/ // O/ 端口/ 的/ 物理/ 功能/ 的/ 方法/ ./ 此外/ ,/ Xen/ 开发人员/ 开发/ 的/ PCIPassthrough/ ②/ 技术支持/ 直接/ 访问/ PCI/ 设备/ ,/ 使得/ 客户/ 操作系统/ 能/ 越过/ 虚拟机/ 管理程序/ 访问/ 设备/ ,/ 从而/ 获得/ 接近/ 原生/ Linux/ 环境/ 下/ 的/ I/ // O/ 性能/ ./ 3.3/ ./ 2/ 数据包/ 收发/ 机制/ 优化/ I/ // O/ 虚拟化/ 加速/ 技术/ 降低/ 了/ 虚拟化/ 引入/ 的/ 额外/ I/ // O/ 开销/ ./ 在/ 此基础/ 上/ ,/ 数据包/ 收发/ 机制/ 的/ 优化/ 能够/ 进一步提高/ 数据包/ 的/ 转发/ 性能/ ./ 传统/ 的/ I/ // O/ 中断/ 方式/ 具有/ 响应速度/ 快/ 、/ 延迟/ 低等/ 优点/ ,/ 然而/ 当/ 数据包/ 速率/ 过高时/ ,/ 频繁/ 的/ 中断/ 处理/ 会/ 显著/ 增加/ 软件/ 负担/ ./ RouteBricks/ [/ 28/ ]/ 使用/ 轮询/ 方式/ 代替/ 传统/ 硬件/ 的/ 中断/ 方式/ ,/ 极大/ 提高/ 了/ 通用/ 硬件/ 的/ 64/ 字节/ 小/ 包转发/ 性能/ ;/ 采用/ 批处理/ 的/ 方式/ ,/ 每次/ 总线/ 事务/ (/ bustransaction/ )/ 都/ 传递/ 多个/ 数据包/ 的/ 地址/ ,/ 充分利用/ 了/ PCIE/ 的/ 总线/ 带宽/ ;/ 利用/ 网卡/ 的/ 多/ 队列/ 特性/ ,/ 将/ 不同/ 队列/ 与/ 不同/ 核/ 进行/ 绑定/ ,/ 极大/ 地/ 提升/ 了/ 数据处理/ 的/ 并行性/ ./ 使用/ 以上/ 三种/ 手段/ ,/ 可以/ 使得/ 单台/ 服务器/ 的/ 64/ 字节/ 小/ 包转发/ 性能/ 达到/ 9.7/ Gbps/ ./ PacketShader/ [/ 29/ ]/ 对/ Linux/ 的/ 内核/ 协议/ 栈/ 进行/ 了/ 优化/ ,/ 将/ 内核/ 中/ sk/ _/ buff/ 结构/ 体由/ 原来/ 的/ 208/ 字节/ 减少/ 为/ 8/ 字节/ ,/ 采用/ 批处理/ 的/ 方式/ ,/ 极大/ 地/ 提升/ 了/ 数据包/ 处理/ 性能/ ./ 试验/ 表明/ ,/ 仅/ 采用/ 这种/ 优化/ 手段/ ,/ 可以/ 将/ 数据包/ 吞吐量/ 提升/ 到/ 10.5/ Gbps/ ,/ 性能/ 提升/ 13.5/ 倍/ ./ PacketShader/ 同时/ 也/ 利用/ 了/ 多/ 核多/ 队列/ 的/ 特性/ ,/ 并且/ 考虑/ 到/ 其/ 采用/ 的/ 架构/ 为/ NUMA/ (/ 非/ 一致性/ 内存/ 访问/ )/ ,/ 针对/ 数据包/ 的/ 分发/ 均衡性/ 和/ 提升/ 数据/ 局部性/ 做/ 了/ 精心/ 优化/ ,/ 使/ 其/ 整体/ 转发/ 性能/ 达到/ 40Gbps/ ./ 表/ 3/ 转发/ 性能/ 问题/ 研究进展/ Virtio/ ,/ IntelVT/ -/ d/ ,/ SR/ -/ IOV/ ,/ PCI/ 典型/ 方案/ I/ // O/ 虚拟化/ 加速/ 降低/ 虚拟化/ I/ // O/ 接口/ 带来/ 的/ 数据包/ 收发/ 机制/ 优化/ 提高/ 数据包/ 接收/ 和/ 发送/ 的/ 性能/ RouteBricks/ ,/ PacketShader/ 等/ 除了/ 软件/ 收发/ 机制/ 优化/ ,/ 还/ 需/ 进一步/ 优化/ 硬件/ 数据包/ 查找/ 算法/ 优化/ 提高/ 数据包/ 查找/ 匹配/ 的/ 速度/ 各种/ 典型/ 的/ IP/ 查找/ 算法/ 和/ 面向/ NDN/ 协议/ 的/ 非/ IP/ 查找/ 算法/ 4/ 原型/ 系统/ 研究进展/ 可编程/ 虚拟/ 路由器/ 原型/ 系统/ 的/ 设计/ 可追溯/ 到/ PlanetLab/ ./ Peterson/ 等/ 人/ [/ 33/ ]/ 于/ 2003/ 年/ 规划/ 了/ 3.3/ ./ 3/ 查找/ 算法/ 优化/ 数据包/ 查找/ 操作/ 一直/ 都/ 是/ 软件/ 虚拟/ 路由器/ 设计/ 中/ 的/ 一个/ 主要/ 的/ 性能/ 瓶颈/ ./ 文献/ [/ 12/ ,/ 30/ ]/ 对/ 传统/ 的/ IP/ 查找/ 算法/ 进行/ 了/ 全面/ 综述/ ,/ 本文/ 中/ 就/ 不再/ 对/ 传统/ 的/ IP/ 查找/ 算法/ 进行/ 描述/ ./ 传统/ 的/ IP/ 查找/ 算法/ 也/ 能够/ 应用/ 于/ 可编程/ 虚拟/ 路由器/ 中/ ,/ 用于/ 实现/ 快速/ 的/ IP/ 查找/ ./ 然而/ ,/ 可编程/ 虚拟/ 路由器/ 不仅仅/ 需要/ 支持/ 快速/ 的/ IP/ 查找/ ,/ 还/ 需要/ 对非/ IP/ 协议/ 进行/ 支持/ ,/ 如/ 支持/ NDN/ 协议/ 中/ 的/ 基于/ 内容/ 名字/ 的/ 查找/ 等/ ./ NDN/ 中/ 的/ 内容/ 名字/ 具有/ 类似/ HTTPURL/ 的/ 层次结构/ ./ 与/ 传统/ 的/ IP地址/ 相比/ ,/ NDN/ 数据/ 名字/ 长度/ 不定/ 长/ ,/ 且/ 无/ 上界/ ,/ 导致/ 线速/ 最长/ 名字/ 前缀/ 匹配/ 成为/ NDN/ 查找/ 中/ 一个/ 重要/ 的/ 挑战/ ./ 为了/ 解决/ 这一/ 问题/ ,/ Wang/ 等/ 人/ [/ 31/ ]/ 提出/ 了/ 高效/ 的/ 名字/ 子串/ 编码方法/ ,/ 并/ 应用/ 改进/ 的/ 状态/ 转移/ 数组/ 加速/ 最长/ 名字/ 前缀/ 匹配/ ./ Yuan/ 等/ 人/ [/ 32/ ]/ 评估/ 了/ NDN/ 的/ 原型/ 系统/ 实现/ CCNx/ ,/ 分析/ 了/ 其/ 转发/ 平面/ 的/ 性能/ 瓶颈/ ,/ 并/ 找到/ 影响/ NDN/ 转发/ 性能/ 的/ 三个/ 主要/ 问题/ :/ 支持/ 快速/ 更新/ 的/ 精确/ 字符串/ 匹配/ 问题/ ,/ 基于/ 变长/ 和/ 无/ 上界/ 名字/ 的/ 最长/ 前缀/ 匹配/ 问题/ 以及/ 大规模/ 流表/ 维护/ 问题/ ./ 针对/ 这些/ 问题/ ,/ 提出/ 了/ 五大/ 设计/ 原则/ ,/ 用于/ 指导/ 性能/ 可/ 扩展/ 的/ NDN/ 转发/ 引擎/ 设计/ ./ 表/ 3/ 对/ 可编程/ 虚拟/ 路由器/ 中/ 转发/ 性能/ 问题/ 的/ 研究/ 进行/ 了/ 总结/ ./ 其中/ ,/ I/ // O/ 虚拟化/ 的/ 性能/ 开销/ 是/ 虚拟化/ 技术/ 的/ 引入/ 带来/ 的/ 特殊/ 问题/ ,/ 已经/ 得到/ 学术界/ 和/ 工业界/ 的/ 广泛/ 关注/ ,/ 部分/ 虚拟/ I/ // O/ 性能/ 加速/ 技术/ ,/ 如/ IntelVT/ -/ d/ 技术/ 、/ SR/ -/ IOV/ 技术/ 等/ ,/ 已/ 广泛应用/ 于/ 服务器/ 和/ 网卡/ 产品/ 中/ ;/ 传统/ 的/ 数据包/ 收发/ 机制/ 以及/ IP/ 查找/ 操作/ ,/ 在/ 虚拟化/ 环境/ 下/ 依然/ 成为/ 性能/ 瓶颈/ ,/ 一直/ 以来/ 都/ 受到/ 学术界/ 的/ 持续/ 关注/ ;/ 非/ IP/ 环境/ ,/ 尤其/ 是/ NDN/ 体系结构/ 下/ 的/ 路由/ 查找/ 问题/ ,/ 随着/ 新型/ 体系结构/ 研究/ 的/ 深入/ ,/ 也/ 逐渐/ 得到/ 人们/ 的/ 重视/ ,/ 成为/ 一个/ 新/ 的/ 重要/ 研究/ 方向/ ./ PlanetLab/ 的/ 设计/ 蓝图/ ,/ 并/ 首次/ 提出/ 了/ “/ 网络/ 分片/ ”/ (/ slice/ -/ ability/ )/ 的/ 设计/ 思想/ ./ 随后/ ,/ Bavier/ 等/ 人/ [/ 34/ ]/ 详/ ①/ ②/ Page11/ 细/ 介绍/ 了/ PlanetLab/ 的/ 设计/ 原则/ 和/ 实现/ 细节/ ,/ 其中/ 一个/ 重要/ 的/ 设计/ 原则/ 就是/ “/ 不同/ 的/ 服务/ 使用/ 不同/ 的/ 网络/ 分片/ ”/ ./ PlanetLab/ 的/ “/ 分片/ ”/ 思想/ 能够/ 为/ 不同/ 的/ 服务/ 提供/ 异构/ 的/ 运行/ 网络/ ,/ 能够/ 给/ 新/ 的/ 网络/ 架构/ 和/ 协议/ 的/ 设计/ 提供/ 一个/ 良好/ 的/ 试验/ 平台/ ./ Anderson/ 等/ 人/ [/ 35/ ]/ 首次/ 提出/ 了/ 利用/ PlanetLab/ 打破/ 现有/ 互联网/ 发展/ 僵局/ ,/ 提出/ 以/ “/ 虚拟化/ ”/ 作为/ 网络/ “/ 细腰/ ”/ 来/ 支持/ 多种不同/ 网络/ 架构/ 并行/ 发展/ 的/ 思想/ ./ Turner/ 等/ 人/ [/ 36/ ]/ 提出/ ,/ 作为/ 网络/ 互联/ 的/ 基本/ 设备/ ,/ 路由器/ 需要/ 支持/ 虚拟化/ 的/ 功能/ ,/ 实现/ “/ 分片/ ”/ 设计/ 的/ 思想/ ./ PlanetLab/ 结点/ 是/ 一台/ 运行/ 虚拟化/ 软件/ 的/ 服务器/ ,/ 为/ 用户/ 提供/ 独立/ 的/ 虚拟机/ 进行/ 编程/ ,/ 保证/ 了/ 不同/ 试验/ 之间/ 良好/ 的/ 隔离/ ,/ 也/ 提供/ 了/ 较/ 好/ 的/ 可编程/ 性/ ./ 然而/ ,/ 纯/ 软件/ 实现/ 导致/ 其/ 转发/ 性能/ 不如/ 商业/ 路由器/ ./ Egi/ 等/ 人/ [/ 4/ ]/ 提出/ 了/ vRouter/ ,/ 在/ x86/ 多核/ 处理器/ 平台/ 上/ 采用/ 虚拟机/ Xen/ 和/ OpenVZ/ ,/ 实现/ 数据/ 平面/ 软件/ Click/ ,/ 通过/ 对/ 数据包/ 收发/ 机制/ 进行/ 优化/ ,/ 使/ 一台/ 通用/ 服务器/ 的/ 转发/ 性能/ 达到/ 了/ 7Mpps/ (/ Millionpacketspersecond/ ,/ 百万/ 数据包/ 每秒/ )/ ./ 受访/ 存/ 延迟/ 的/ 限制/ ,/ 其/ 转发/ 性能/ 难以/ 进一步/ 提升/ ./ Anwer/ 等/ 人/ [/ 5/ ]/ 设计/ 了/ 一套/ 基于/ FPGA/ 的/ 可编程/ 虚拟/ 路由器/ 框架/ Switch/ -/ Blade/ ,/ 利用/ 硬件/ 流水线/ 架构/ 解/ 耦包/ 处理/ 中/ 的/ 各个/ 模块/ ,/ 方便/ 用户/ 自定义/ 数据包/ 处理/ 模块/ ,/ 并/ “/ 插入/ ”/ 到/ 流水线/ 中/ ,/ 以/ 提高/ 数据/ 平面/ 的/ 可编程/ 性/ ,/ 加速/ 新/ 协议/ 的/ 试验/ 和/ 部署/ ./ SwitchBlade/ 基于/ NetFPGA/ 硬件/ 实现/ ,/ 其/ 转发/ 性能/ 远高于/ Linux/ 内核/ 的/ 原始数据/ 包转发/ 性能/ ./ 然而/ 受/ NetFPGA/ 资源/ 的/ 限制/ ,/ 该/ 原型/ 系统/ 可扩展性/ 较差/ ,/ 只/ 能够/ 同时/ 支持/ 4/ 个/ 不同/ 的/ 硬件/ 虚拟/ 数据/ 平面/ ./ Lu/ 等/ 人/ [/ 37/ ]/ 采用/ Switch/ 芯片/ 和/ 普通/ Server/ 相结合/ ,/ 设计/ 了/ 针对/ 数据中心/ 网络应用/ 的/ 高性能/ 可编程/ 路由器/ ServerSwitch/ ./ 通过/ Switch/ 芯片/ 本身/ 提供/ 的/ 可编程/ 性/ ,/ 满足/ 数据中心/ 网络/ 中/ 新/ 业务/ 的/ 可编程/ 需求/ ;/ 通过/ 普通/ Server/ 提供/ 的/ 丰富/ 计算/ 和/ 存储资源/ ,/ 在/ 网络/ 节点/ 中/ 提供/ 复杂/ 数据包/ 处理/ (/ in/ -/ networkpacketprocessing/ )/ 能力/ ./ 国内/ 关于/ 可编程/ 虚拟/ 路由器/ 的/ 研究/ 主要/ 包括/ 中国科学院计算技术研究所/ 的/ PEARL/ [/ 6/ ]/ 、/ 国防科学技术大学/ 提出/ 的/ NetMagic/ ①/ 、/ 清华大学/ 提出/ 的/ OpenRouter/ [/ 38/ ]/ 和/ TUNIE/ [/ 39/ ]/ ./ PEARL/ 是/ 基于/ FPGA/ 加速/ 板卡/ 和/ 通用/ 服务器/ 的/ 虚拟/ 路由器/ ,/ 采用/ 多核/ 处理器/ 和/ 专用/ 数据包/ 处理/ 卡/ 相结合/ 的/ 方式/ 来/ 构建/ 可编程/ 虚拟/ 路由器/ ./ 专用/ 数据包/ 处理/ 卡/ 内嵌/ TCAM/ 和/ SRAM/ 存储器/ ,/ 可/ 实现/ 线速/ 路由/ 查找/ 和/ 转发/ 等/ 功能/ ,/ 而/ 高性能/ 多核/ 处理器/ 用于/ 路由/ 管理/ ,/ 利用/ 操作系统/ 级/ 虚拟机/ LXC/ 实现/ 控制/ 平面/ 虚拟化/ ./ 因此/ ,/ PEARL/ 不仅/ 支持/ 虚拟化/ 和/ 灵活/ 可编程/ ,/ 还/ 具有/ 良好/ 的/ 转发/ 性能/ ./ 受/ 4/ 个/ 千兆/ 物理/ 网络接口/ 带宽/ 的/ 限制/ ,/ PEARL/ 原型/ 系统/ 实现/ 了/ 4Gbps/ 的/ 转发/ 性能/ ,/ 提高/ 物理/ 接口/ 数量/ 和/ 带宽/ 可以/ 显著/ 提高/ 其/ 转发/ 性能/ ./ 国防科学技术大学/ 提出/ 的/ NetMagic/ 是/ 支持/ 新/ 服务/ 和/ 协议/ 部署/ 的/ FPGA/ 加速/ 板卡/ ,/ 提供/ 良好/ 的/ 用户/ 接口/ 方便/ 试验/ 人员/ 进行/ 快速/ 新/ 服务/ 和/ 新/ 协议/ 的/ 部署/ 开发/ ./ NetMagic/ 将/ 数据包/ 查找/ 转发/ 操作/ 和/ 协议/ 处/ 理解/ 耦/ ,/ 并/ 规范化/ 两者之间/ 的/ 接口/ ,/ 达到/ 新/ 协议/ 快速/ 设计/ 的/ 目的/ ./ NetMagic/ 硬件/ 主要/ 关注/ 可/ 重构/ 的/ 模块化/ 设计/ 以/ 方便/ 用户/ 编程/ ,/ 未/ 提及/ 对/ 硬件/ 数据/ 平面/ 虚拟化/ 的/ 支持/ ./ OpenRouter/ 是/ 清华大学/ 提出/ 的/ 针对/ OpenFlow/ 的/ 扩展/ 方案/ ./ OpenRouter/ 主要/ 从/ 三个/ 方面/ 对/ OpenFlow/ 网络/ 框架/ 进行/ 扩展/ :/ 控制/ 层面/ 、/ OpenFlow/ 协议/ 和/ OpenFlow/ 流表/ ./ 在/ 控制/ 层面/ 上/ ,/ OpenRouter/ 保留/ 了/ 分布式/ 路由/ 协议/ ,/ 让/ 底层/ 的/ 路由/ 设备/ 继续/ 运行/ OSPF/ 协议/ ;/ 在/ OpenFlow/ 协议/ 方面/ ,/ 提出/ 了/ 三个/ TLV/ 扩展/ :/ 网络/ 状态/ TLV/ 、/ 网络/ 配置/ TLV/ 和/ 流表/ TLV/ 扩展/ ;/ 在/ OpenFlow/ 流表上/ ,/ 提出/ 最大化/ 利用/ 交换机/ 的/ 转/ 发表/ 、/ ACL/ 控制/ 列表/ 、/ Net/ -/ Flow/ 的/ 功能/ ,/ 实现/ 了/ 增强/ 的/ OpenFlow/ 交换机/ ./ 然而/ ,/ 受/ OpenFlow/ 协议/ 本身/ 的/ 限制/ ,/ OpenRouter/ 仍然/ 难以/ 支持/ 全新/ 网络协议/ (/ 非/ TCP/ // IP/ 协议/ )/ 的/ 特殊/ 数据包/ 处理/ 需求/ ./ 清华大学/ 实现/ 了/ 支持/ 虚拟化/ 的/ 网络/ 创新/ 试验/ 平台/ TUNIE/ ./ 系统/ 采用/ 高性能/ 多核/ 处理器/ 灵活/ 包/ 处理/ 与/ 可编程/ 硬件/ 高性能/ 转发/ 相/ 融合/ 的/ 方式/ ,/ 具有/ 资源/ 灵活/ 可/ 切片/ 、/ 系统/ 深度/ 可编程/ 、/ 配置/ 灵活/ 多样化/ 和/ 系统/ 可/ 扩展/ 等/ 特征/ 与/ 优势/ ./ 表/ 4/ 综合/ 比较/ 了/ 上述/ 可编程/ 虚拟/ 路由器/ 原型/ 系统/ 研究进展/ ./ 基于/ 通用/ 服务器/ 平台/ 实现/ 的/ 可编程/ 虚拟/ 路由器/ 原型/ (/ 如/ PlanetLab/ 和/ vRouter/ )/ 具有/ 很/ 好/ 的/ 隔离/ 性/ 、/ 可扩展性/ 和/ 可编程/ 性/ ,/ 但/ 其/ 转发/ 性能/ 较差/ ;/ 基于/ 可编程/ 硬件/ FPGA/ 实现/ 的/ 可编程/ 虚拟/ 路由器/ (/ 如/ SwitchBlade/ 、/ PEARL/ 、/ NetMagic/ 、/ TUNIE/ )/ 具有/ 很/ 好/ 的/ 转发/ 性能/ ./ 然而/ 受/ FPGA/ 硬件资源/ 以及/ 编程/ 灵活/ 度/ 的/ 限制/ ,/ 其/ 可扩展性/ 和/ 可编程/ 性/ 有待/ 进一步提高/ ;/ 基于/ ASIC/ 芯片/ (/ 如/ Switch/ )/ 设计/ 的/ 可编程/ 虚拟/ 路由器/ (/ 如/ ServerSwitch/ 和/ OpenRouter/ )/ 具有/ 比/ FPGA/ 平台/ 更/ 高/ 的/ 转发/ 性能/ ,/ 然而/ 其/ 可编程/ 灵活性/ 和/ 功能/ 的/ 可扩展性/ 非常/ 有限/ ./ 总体/ 来讲/ ,/ 单一/ 硬件平台/ 难以/ 同时/ 满足/ 可编程/ 虚拟/ 路由器/ 中/ 虚拟化/ (/ 资/ ①/ NetMagic/ ./ http/ :/ // // www/ ./ netmagic/ ./ org/ // Page12/ 源/ 隔离/ 性/ 和/ 可扩展性/ )/ 、/ 可编程/ 性/ 和/ 高性能/ 三大/ 特性/ 需求/ ,/ 异构/ 的/ 硬件平台/ 逐渐/ 得到/ 广泛/ 关注/ (/ 如/ Server/ 和/ FPGA/ 相结合/ 、/ Server/ 和/ Switch/ 相结合/ )/ ./ 如何/ 在/ 原型/ 系统/ 实现/ 平台/ 资源分配/ 与/ 隔离/ 可扩展性/ 表/ 4/ 可编程/ 虚拟/ 路由器/ 原型/ 系统/ 研究进展/ PlanetLabServervRouterServerSwitchBladeServer/ ,/ NetFPGA/ 虚拟/ 硬件/ 数据/ ServerSwitchServer/ ,/ Switch/ 未/ 提及/ 虚拟化/ PEARLServer/ ,/ FPGA/ ,/ NetMagicFPGA/ ,/ OpenRouterCommercialRouter/ 未/ 提及/ 数据/ 平/ TUNIEServer/ ,/ NetFPGA/ ,/ 受/ 硬件资源/ 限制/ ,/ 虚拟/ 数据/ 平/ 使用/ CPU/ 作为/ 协处理器/ ,/ 扩展/ 使用/ 软件/ 数据/ 平面/ 弥补/ 硬件/ 数/ 使用/ 外部/ 控制器/ (/ 服务器/ )/ 扩展/ 支持/ 带/ 状态/ 的/ 复杂/ 数据包/ 处理/ 扩展/ OpenFlow/ 以/ 支持/ 更多协/ 使用/ Click/ 软件/ 数据/ 平面/ 可以/ 弥补/ FPGA/ 虚拟/ 数据/ 平面/ 数量/ 5/ 未来/ 研究/ 方向/ 虽然/ 目前/ 学术界/ 对/ 可编程/ 虚拟/ 路由器/ 的/ 研究/ 已/ 取得/ 一定/ 的/ 成果/ ,/ 但是/ ,/ 可编程/ 虚拟/ 路由器/ 功能/ 需求/ 复杂/ ,/ 仍然/ 有/ 以下/ 问题/ 值得/ 进一步/ 研究/ :/ (/ 1/ )/ 转/ 发表/ 特征/ 研究/ ./ 高效/ 的/ 查找/ 转发/ 算法/ 依赖于/ 对/ 转/ 发表/ 特性/ 的/ 充分/ 挖掘/ ,/ 已有/ 研究/ 通过/ 挖掘/ 转/ 发表/ 相似性/ 等/ 特征/ 解决/ 虚拟/ 路由器/ 的/ 存储空间/ 可扩展性/ 问题/ ,/ 通过/ 挖掘/ 路由/ 更新/ 规律/ 提出/ 快速/ 增量/ 更新/ 算法/ ./ 然而/ ,/ 随着/ 应用/ 场景/ 的/ 改变/ ,/ 未来/ 虚拟/ 路由器/ 的/ 转/ 发表/ 特征/ (/ 如/ 相似性/ 、/ 路由/ 更新/ 模式/ 等/ )/ 可能/ 发生变化/ ./ 因此/ ,/ 需要/ 进一步/ 研究/ 虚拟/ 路由器/ 转/ 发表/ 特征/ 及其/ 变化规律/ ,/ 为/ 设计/ 高效/ 的/ 转/ 发表/ 查找/ 算法/ 奠定/ 基础/ ./ (/ 2/ )/ 高性能/ 数据包/ 处理/ 算法/ ./ 可编程/ 虚拟/ 路由器/ 涉及/ 的/ 不仅仅/ 是/ 传统/ 路由器/ 中/ 的/ 查找/ 转发/ 操作/ ,/ 还/ 包括/ 更/ 复杂/ 的/ 网络/ 中/ 数据包/ 处理/ 功能/ ,/ 如/ NDN/ 还/ 要求/ 网络设备/ 提供/ 内容/ 缓存/ 相关/ 的/ 存储/ 和/ 计算/ 功能/ ./ 然而/ ,/ 目前/ 关于/ 虚拟/ 路由器/ 数据包/ 处理/ 的/ 研究/ ,/ 主要/ 集中/ 在/ 查找/ 转发/ 算法/ ./ 因此/ ,/ 需要/ 结合/ 新型/ 网络体系结构/ 和/ 新/ 协议/ 的/ 需求/ ,/ 研究/ 可编程/ 虚拟/ 路由器/ 中/ 的/ 高性能/ 网络/ 数据包/ 处理/ 算法/ ,/ 在/ 保证/ 高速/ 查找/ 转发/ 的/ 前提/ 下/ ,/ 满足/ 新/ 协议/ 和/ 体系结构/ 对/ 数据包/ 计算/ 和/ 存储/ 处理/ 的/ 特殊/ 需求/ ./ 异构/ 平台/ 上/ 充分发挥/ 各种/ 硬件平台/ 的/ 优势/ 以/ 弥补/ 对方/ 的/ 不足/ ,/ 设计/ 灵活/ 高性能/ 的/ 可编程/ 虚拟/ 路由器/ 原型/ 系统/ ,/ 仍然/ 值得/ 进一步/ 研究/ ./ (/ 3/ )/ 异构/ 平台/ 的/ 资源/ 虚拟化/ 问题/ ./ 不同/ 硬件平台/ 具有/ 不同/ 优势/ ,/ 如/ FPGA/ 适合/ 于/ 简单/ 、/ 高性能/ 计算/ ,/ TCAM/ 支持/ 高速/ 查找/ ,/ 而多核/ 处理器/ 具有/ 灵活性/ 强/ ,/ 支持/ 复杂/ 计算/ 处理/ 等/ 特点/ ./ 在/ 可编程/ 虚拟/ 路由器/ 中/ ,/ 为了/ 更好/ 地/ 满足/ 不同/ 网络应用/ 的/ 性能需求/ ,/ 硬件平台/ 趋于/ 异构化/ ./ 然而/ ,/ 对于/ 用户/ 来讲/ ,/ 简单/ 一致/ 的/ 编程/ 模型/ 更加/ 友好/ ./ 因此/ ,/ 需要/ 在/ 异构/ 的/ 硬件平台/ 之上/ ,/ 研究/ 资源/ 虚拟化/ 方法/ ,/ 向/ 用户/ 提供/ 一致/ 的/ 编程/ 模型/ ,/ 以/ 简化/ 用户/ 编程/ 的/ 难度/ ./ (/ 4/ )/ 数据包/ 处理/ 原子/ 操作/ ./ 允许/ 用户/ 直接/ 编程/ 可以/ 支持/ 用户/ 实现/ 新/ 的/ 数据包/ 处理/ 功能/ ./ 但是/ ,/ 如果/ 能够/ 将/ 数据包/ 处理/ 的/ 流程/ 抽象/ 为/ 若干/ 原子/ 操作/ 的/ 自由组合/ ,/ 将/ 有效/ 提高/ 用户/ 编程/ 的/ 效率/ ./ 例如/ ,/ Click/ [/ 20/ ]/ 中/ 定义/ 了/ IP/ 数据包/ 处理/ 的/ 一系列/ 基本操作/ ,/ 通过/ 对/ 基本操作/ 模块/ 的/ 自由组合/ 可以/ 实现/ 常见/ 的/ IP/ 数据包/ 处理/ 功能/ ./ 但是/ Click/ 不/ 支持/ 虚拟化/ ,/ 也/ 不/ 支持/ 非/ IP/ 数据包/ 处理/ ./ 研究/ 可编程/ 虚拟/ 路由器/ 中/ 数据包/ 处理/ 的/ 原子/ 操作/ ,/ 并/ 保证/ 原子/ 操作/ 集合/ 的/ 完备/ 性/ ,/ 将/ 为/ 可编程/ 特性/ 提供/ 一种/ 全新/ 的/ 实现/ 方式/ ,/ 显著/ 提高/ 用户/ 编程/ 的/ 效率/ ./ (/ 5/ )/ 可编程/ 虚拟/ 路由器/ 的/ 安全/ 问题/ ./ 可编程/ 虚拟/ 路由器/ 的/ 灵活/ 可编程/ 特性/ 可以/ 方便/ 用户/ 自定义/ 数据包/ 处理/ 功能/ ,/ 但是/ 也/ 会/ 因此/ 带来/ 一系列/ 安全隐患/ ./ 例如/ ,/ 恶意代码/ 的/ 植入/ 或者/ 蓄意/ 的/ 攻击/ 可能/ 导致/ 整个/ 可编程/ 虚拟/ 路由器/ 平台/ 无法/ 正常/ 工作/ ,/ 甚至/ 影响/ Page13/ 网络/ 的/ 正常/ 运行/ ;/ 用户/ 的/ 路由/ 规则/ 和/ 安全策略/ 有/ 可能/ 被/ 同一个/ 路由器/ 平台/ 上/ 的/ 其他/ 用户/ 窃取/ ./ 因此/ ,/ 需要/ 研究/ 用户/ 编程/ 的/ 安全检查/ 机制/ ,/ 防止/ 恶意/ 攻击/ 或者/ 误操作/ 导致/ 的/ 路由器/ 系统/ 崩溃/ ;/ 也/ 需要/ 研究/ 不同/ 用户/ 之间/ 的/ 数据保护/ 与/ 隔离/ 机制/ ,/ 防止/ 未/ 授权/ 用户/ 非法/ 获取/ 其他/ 用户/ 信息/ ./ (/ 6/ )/ 可编程/ 虚拟/ 路由器/ 体系结构/ ./ 可编程/ 虚拟/ 路由器/ 需要/ 支持/ 虚拟化/ 、/ 可编程/ 和/ 高性能/ 三个/ 特性/ ./ 灵活/ 可编程/ 与/ 高性能/ 之间/ 存在/ 矛盾/ :/ 纯/ 软件/ 的/ 数据包/ 处理/ 易于/ 提供/ 灵活/ 可编程/ 性/ ,/ 但是/ 数据包/ 处理/ 性能/ 较差/ ;/ 硬件/ 数据包/ 处理/ 可以/ 保证/ 高性能/ ,/ 但是/ 可编程/ 灵活性/ 差/ ./ 虚拟化/ 与/ 高性能/ 之间/ 也/ 存在/ 矛盾/ :/ 虚拟化/ 的/ 层次/ 越高/ (/ 如全/ 虚拟化/ 技术/ )/ ,/ 隔离/ 性越/ 强/ ,/ 但/ 性能/ 越差/ ./ 因此/ ,/ 可编程/ 和/ 虚拟化/ 的/ 结合/ 会/ 给/ 数据包/ 处理/ 性能/ 带来/ 严重/ 挑战/ ./ 在/ 可编程/ 虚拟/ 路由器/ 体系结构/ 设计/ 时/ ,/ 需要/ 根据/ 不同/ 应用/ 场景/ 的/ 需求/ ,/ 研究/ 数据/ 平面/ 和/ 控制/ 平面/ 的/ 实现/ 平台/ 划分/ 、/ 可编程/ 和/ 虚拟化/ 特性/ 的/ 支持/ 层次/ 划分/ 等/ 问题/ ,/ 从而/ 在/ 虚拟化/ 、/ 可编程/ 和/ 高性能/ 三个/ 特性/ 之间/ 进行/ 折衷/ ./ 6/ 总结/ 未来/ 网络体系结构/ 的/ 研究/ 、/ 新型/ 协议/ 和/ 业务/ 的/ 试验/ 与/ 部署/ ,/ 迫切需要/ 支持/ 可编程/ 和/ 虚拟化/ 的/ 试验/ 床/ ,/ 可编程/ 虚拟/ 路由器/ 是/ 搭建/ 未来/ 网络/ 试验/ 床/ 的/ 核心/ 设备/ ./ 本文/ 分析/ 了/ 可编程/ 虚拟/ 路由器/ 的/ 应用/ 背景/ 和/ 特性/ 需求/ ,/ 讨论/ 了/ 可编程/ 虚拟/ 路由器/ 关键技术/ 和/ 挑战/ ,/ 并/ 详细/ 介绍/ 了/ 其/ 关键技术/ 和/ 原型/ 系统/ 研究进展/ ./ 最后/ ,/ 展望/ 了/ 未来/ 研究/ 方向/ ./ 从/ 路由器/ 本身/ 的/ 发展/ 来看/ ,/ 可编程/ 虚拟/ 路由器/ 内部结构/ 和/ 关键技术/ 的/ 研究/ 将会/ 持续/ 下去/ ,/ 最终/ 的/ 设计/ 目标/ 是/ 实现/ 与/ 现有/ 商用/ 路由器/ 性能/ 相媲美/ 的/ 支持/ 成百上千/ 个/ 虚拟/ 路由器/ 实例/ 的/ 细粒度/ 的/ 可编程/ 虚拟/ 路由器/ ./ 从/ 可编程/ 虚拟/ 路由器/ 的/ 应用/ 场景/ 来看/ ,/ 它/ 将/ 从/ 试验/ 平台/ 应用/ 扩展/ 到/ 数据中心/ 网络/ 乃至/ 企业/ 或者/ 服务提供商/ 内部/ 网络/ ./ 在/ 这些/ 应用/ 场景/ 中/ ,/ 将会/ 涌现出/ 更/ 多/ 值得/ 研究/ 的/ 问题/ ,/ 比如/ 虚拟/ 网络拓扑/ 映射/ 以及/ 网络设备/ 的/ 集中控制/ 和/ 编程/ 等/ ./ 

