Page1SimHPC/ :/ 一种/ 基于/ 执行/ 驱动/ 的/ 大规模/ 并行/ 系统/ 模拟器/ 刘轶/ 1/ )/ 支予/ 哲/ 1/ )/ 张昕/ 2/ )/ 李鹤/ 2/ )/ 焦林/ 2/ )/ 张鹏/ 2/ )/ 苏/ 阳明/ 1/ )/ 倪泽辉/ 1/ )/ 钱德沛/ 1/ )/ 1/ )/ (/ 北京航空航天大学/ 中/ 德/ 联合/ 软件/ 研究所/ 北京/ 100191/ )/ 2/ )/ (/ 西安交通大学/ 计算机系/ 西安/ 710049/ )/ 摘要/ 模拟实验/ 方法/ 对/ 高性能/ 计算机系统/ 的/ 性能/ 评价/ 和/ 优化/ 设计/ 有着/ 重要/ 的/ 意义/ ,/ 然而/ 由于/ 目标/ 系统/ 规模/ 庞大/ ,/ 传统/ 的/ 体系结构/ 模拟器/ 难以/ 满足/ 模拟/ 性能/ 方面/ 的/ 要求/ ./ 文中/ 提出/ 了/ 一种/ 专门/ 用于/ 高性能/ 计算/ 系统/ 的/ 模拟器/ —/ —/ —/ SimHPC/ ,/ 该/ 模拟器/ 采用/ 执行/ 驱动/ 的/ 全/ 系统模拟/ 方法/ ,/ 支持/ 操作系统/ 和/ 应用程序/ 的/ 模拟/ 运行/ ./ 通过/ 采用/ 与/ 目标/ 系统/ 同构/ 的/ 节点/ 作为/ 宿主/ 节点/ 以及/ 并行/ 模拟/ 的/ 方法/ ,/ 使得/ 模拟/ 性能/ 相比/ 传统/ 的/ 体系结构/ 模拟器/ 大幅提高/ ,/ 与/ 现有/ 的/ 几种/ 大规模/ 并行/ 系统/ 模拟器/ 相比/ ,/ SimHPC/ 在/ 通用性/ 和/ 模拟/ 性能/ 方面/ 也/ 具有/ 一定/ 的/ 优势/ ./ 关键词/ 模拟器/ ;/ 高性能/ 计算/ ;/ 并行/ 系统/ ;/ 执行/ 驱动/ ;/ 性能/ 评价/ 1/ 引言/ 高性能/ 计算/ 系统/ 以/ 超高/ 的/ 计算/ 性能/ 和/ 数据处理/ 能力/ 广泛应用/ 于/ 气象/ 、/ 航空航天/ 、/ 材料科学/ 、/ 新药/ 研制/ 等/ 国民经济/ 各个领域/ ,/ 已/ 成为/ 体现/ 一个/ 国家/ 综合/ 实力/ 的/ 象征/ ./ 高性能/ 计算机/ 结构复杂/ 、/ 规模/ 庞大/ 且/ 造价/ 高昂/ ,/ 其/ 实际/ 性能/ 受到/ 处理器/ 、/ 节点/ 结构/ 、/ 互连/ 网络/ 等/ 多方面/ 因素/ 的/ 影响/ ,/ 在/ 系统/ 设计阶段/ ,/ 通过/ 模拟实验/ 的/ 方法/ 对系统/ 方案/ 及其/ 各种/ 参数/ 进行/ 性能/ 评价/ ,/ 对于/ 优化/ 和/ 改进/ 系统/ 设计/ 有着/ 重要/ 的/ 意义/ ./ 然而/ 由于/ 高性能/ 计算机系统/ 规模/ 庞大/ ,/ 传统/ 的/ 体系结构/ 模拟器/ 难以/ 满足/ 模拟/ 性能/ 方面/ 的/ 要求/ ./ 本文/ 提出/ 了/ 一种/ 专门/ 用于/ 高性能/ 计算/ 系统/ 的/ 模拟器/ —/ —/ —/ SimHPC/ ,/ 该/ 模拟器/ 采用/ 执行/ 驱动/ 的/ 全/ 系统模拟/ 方法/ ,/ 支持/ 操作系统/ 和/ 应用程序/ 的/ 模拟/ 运行/ ./ 通过/ 采用/ 与/ 目标/ 系统/ 同构/ 的/ 节点/ 作为/ 宿主/ 节点/ 以及/ 并行/ 模拟/ 的/ 方法/ ,/ 模拟/ 性能/ 相比/ 传统/ 的/ 体系结构/ 模拟器/ 大幅提高/ ,/ 与/ 现有/ 的/ 几种/ 大规模/ 并行/ 系统/ 模拟器/ 相比/ ,/ SimHPC/ 在/ 通用性/ 和/ 模拟/ 性能/ 方面/ 也/ 具有/ 一定/ 的/ 优势/ ./ 本文/ 首先/ 讨论/ 模拟器/ 的/ 设计/ 思路/ ,/ 提出/ 保证/ 模拟/ 性能/ 的/ 方法/ ,/ 之后/ 分析/ 基于/ 同构/ 节点/ 的/ 执行/ 驱动/ 模拟/ 实现/ 方法/ 、/ 应用/ 进程/ 时间轴/ 模型/ 和/ 建立/ 方法/ 以及/ 互连/ 网络/ 和/ 存储系统/ 模拟/ 方法/ ,/ 在/ 此基础/ 上/ ,/ 给出/ 了/ 模拟器/ 的/ 系统结构/ ,/ 最后/ 对系统/ 的/ 模拟/ 精度/ 和/ 性能/ 进行/ 测试/ ,/ 给出/ 针对/ 不同/ 规模/ 目标/ 系统/ 的/ 模拟实验/ 结果/ 并/ 进行/ 分析/ 讨论/ ./ 2/ 设计/ 思路/ 2.1/ 模拟/ 方法/ 选择/ 目前/ 的/ 体系结构/ 模拟/ 方法/ 主要/ 有/ 踪迹/ 驱动/ (/ trace/ -/ driven/ )/ 、/ 执行/ 驱动/ (/ execution/ -/ driven/ )/ 和/ 数学/ 建模/ 分析/ 等/ ./ 踪迹/ 驱动/ 模拟/ 方法/ 首先/ 获取/ 程序/ 的/ 访存/ 地址/ 序列/ 、/ 执行/ 指令/ 序列/ 等/ 执行/ 踪迹/ 数据/ ,/ 将/ 其/ 作为/ 模拟器/ 的/ 输入/ ,/ 通过/ 模拟/ 目标/ 系统/ 的/ 功能/ 和/ 行为/ ,/ 获取/ 程序/ 在/ 目标/ 系统/ 中/ 的/ 性能/ 数据/ ,/ 此种/ 方法/ 常用/ 于/ cache/ 等/ 部件/ 级/ 模拟/ ;/ 数学/ 建模/ 分析方法/ 则/ 通过/ 数学模型/ 描述/ 目标/ 系统/ 特征/ ,/ 通过/ 变换/ 参数/ 获取/ 性能/ 数据/ ,/ 此种/ 方法/ 较为简单/ ,/ 但/ 误差/ 往往/ 较大/ ;/ 执行/ 驱动/ 模拟/ 方法/ 则/ 是/ 建立/ 目标/ 系统/ 的/ 功能/ 和/ 性能/ 模型/ ,/ 并/ 通过/ 应用程序/ 的/ 执行/ 获取/ 性能/ 数据/ ,/ 此种/ 方法/ 可以/ 模拟/ 应用程序/ 在/ 目标/ 系统/ 中/ 的/ 执行/ ,/ 获得/ 的/ 性能/ 数据/ 相对误差/ 较/ 小/ ,/ 且/ 可用/ 做/ 前期/ 的/ 软件开发/ 调试/ 平台/ ,/ 在/ 体系结构/ 模拟/ 中/ 占有/ 重要/ 地位/ ./ 由于/ 执行/ 驱动/ 模拟/ 方法/ 可以/ 模拟程序/ 在/ 目标/ 系统/ 中/ 的/ 实际/ 执行/ ,/ 近年来/ 进一步/ 发展/ 出全/ 系统模拟/ (/ full/ -/ systemsimulation/ )/ ,/ 它/ 能够/ 模拟/ 操作系统/ 和/ 应用程序/ 在/ 目标/ 系统/ 中/ 的/ 执行/ ./ 评价/ 高性能/ 计算机/ 的/ 最/ 重要/ 指标/ 是/ 其/ 综合/ 应用/ 性能/ ,/ 通常/ 量化/ 为/ 以/ Linpack/ 为/ 代表/ 的/ 基准/ 测试程序/ 性能/ ,/ 这/ 也/ 是/ 设计阶段/ 人们/ 最/ 关心/ 的/ 指标/ 之一/ ./ 因此/ ,/ 面向/ 高性能/ 计算机/ 的/ 模拟器/ 需/ 采用/ 执行/ 驱动/ 模拟/ 方法/ ,/ 并且/ 支持/ 全/ 系统模拟/ ,/ 以/ 实现/ Linpack/ 等/ 应用程序/ 在/ 目标/ 系统/ 中/ 的/ 模拟/ 执行/ ./ 2.2/ 保证/ 模拟/ 性能/ 的/ 方法/ 由于/ 执行/ 驱动/ 需要/ 模拟程序/ 在/ 目标/ 系统/ 中/ 的/ 实际/ 执行/ ,/ 而/ 高性能/ 计算机系统/ 规模/ 庞大/ ,/ 因此/ 模拟/ 性能/ 成为/ 模拟器/ 设计/ 的/ 最大/ 挑战/ ./ 在/ 传统/ 的/ 体系结构/ 模拟器/ 中/ ,/ 需要/ 进行/ 目标/ 处理器/ 内部/ 各种/ 部件/ 及/ 指令系统/ 的/ 建模/ ,/ 导致/ 程序/ 的/ 模拟/ 执行/ 效率/ 低下/ ,/ 无法/ 满足/ 规模/ 庞大/ 的/ 高性能/ 计算/ 系统/ 的/ 模拟/ 需要/ ./ 采用/ 以下/ 两种/ 措施/ :/ 为了/ 大幅/ 提升/ 模拟/ 性能/ ,/ SimHPC/ 的/ 系统/ 设计/ 首先/ ,/ 采用/ 与/ 目标/ 系统/ 同构/ 的/ 处理/ 节点/ 作为/ 模拟器/ 宿主/ 节点/ ./ 高性能/ 计算机/ 通常/ 采用/ 商用/ 处理器/ 甚至/ 商用/ 主板/ ,/ 因此/ ,/ 可以/ 采用/ 相同/ 的/ 处理器/ 和/ 处理/ 节点/ 作为/ 模拟器/ 的/ 宿主机/ 平台/ ./ 采用/ 这一/ 方法/ 后/ ,/ 由于/ 宿主机/ 和/ 目标/ 机/ 的/ 处理器/ 和/ 节点/ 结构/ 相同/ ,/ 同一/ 机器/ 代码/ 序列/ 的/ 执行/ 时间/ 也/ 一致/ ,/ 因此/ 可以/ 避免/ 在/ 模拟器/ 中/ 进行/ 处理器/ 内部/ 各种/ 部件/ 和/ 指令系统/ 的/ 建模/ ,/ 一方面/ 大幅提高/ 了/ 程序/ 模拟/ 执行/ 的/ 性能/ ,/ 另一方面/ 也/ 大大简化/ 了/ 模拟器/ 设计/ ./ Page3/ 其次/ ,/ 采用/ 多机/ 并行/ 的/ 方式/ 模拟/ 高性能/ 计算/ 系统/ ,/ 即/ 采用/ 小规模/ 的/ 并行/ 宿主机/ 模拟/ 更/ 大规模/ 的/ 目标/ 机/ ./ 这一/ 方法/ 使得/ 模拟系统/ 可/ 根据/ 要/ 模拟/ 的/ 目标/ 系统/ 规模/ 调整/ 宿主机/ 节点/ 个数/ ,/ 使得/ 大规模/ 并行/ 系统/ 的/ 模拟/ 成为/ 可能/ ./ 3/ 模拟器/ 关键问题/ 分析/ 3.1/ 基于/ 同构/ 节点/ 的/ 执行/ 驱动/ 模拟/ 方法/ 模拟器/ 的/ 重要/ 目标/ 之一/ 是/ 尽可能/ 准确/ 地/ 模拟出/ 应用程序/ 在/ 目标/ 系统/ 中/ 的/ 执行/ 时间/ ./ 这一/ 执行/ 时间/ 的/ 模拟/ 方法/ 分析/ 如下/ ./ 在/ 目标/ 系统/ 中/ ,/ 应用/ 进程/ 在/ 操作系统/ 调度/ 下/ 运行/ ,/ 其/ 执行/ 时间/ 的/ 构成/ 如式/ (/ 1/ )/ 所示/ ./ 其中/ Trun/ 为/ 该/ 进程/ 在/ 处理器/ 上/ 实际/ 执行/ 的/ 时间/ ;/ TIO/ 为/ 执行/ I/ // O/ 操作/ 的/ 阻塞/ 等待时间/ ;/ Tready/ 为/ 按/ 时间/ 片/ 轮转/ 调度/ 时/ 在/ 就绪/ 队列/ 中/ 的/ 等待时间/ ./ 由于/ 宿主机/ 系统/ 采用/ 与/ 目标/ 机/ 同构/ 的/ 节点/ ,/ 因此/ 同一/ 机器/ 代码/ 序列/ 在/ 宿主机/ 和/ 目标/ 机中/ 的/ 执行/ 时间/ 相等/ ,/ 即/ 同一/ 应用/ 进程/ 在/ 宿主机/ 和/ 目标/ 机中/ 的/ Trun/ 相等/ ;/ 而/ 由于/ 宿主机/ 和/ 目标/ 机/ 的/ 互连/ 网络/ 及/ 外存/ 系统/ 不同/ ,/ I/ // O/ 阻塞/ 时间/ TIO/ 需/ 通过/ 对/ 互连/ 网络/ 和/ 外存/ 系统/ 的/ 建模/ 模拟/ 得到/ ;/ 至于/ 就绪/ 等待时间/ Tready/ ,/ 由于/ 宿主机/ 规模/ 远/ 小于/ 目标/ 机/ ,/ 一个/ 宿主机/ 节点/ 运行/ 的/ 应用/ 进程/ 个数/ 要/ 比/ 目标/ 机/ 节点/ 多得多/ ,/ 因此/ 应用/ 进程/ 在/ 目标/ 机中/ 的/ 就绪/ 等待时间/ Tready/ 需要/ 根据/ 目标/ 机/ 节点/ 进程/ 个数/ 、/ 操作系统/ 调度/ 策略/ 和/ 进程/ 执行/ 步调/ 重新/ 计算/ ./ 基于/ 以上/ 分析/ ,/ 为了/ 较为/ 准确/ 地/ 模拟出/ 应用/ 进程/ 在/ 目标/ 系统/ 中/ 的/ 执行/ 时间/ ,/ 并/ 获取/ 通信/ 、/ I/ // O/ 等/ 重要/ 事件/ 信息/ ,/ 模拟器/ 需要/ 完成/ 的/ 核心/ 工作/ 如下/ :/ (/ 1/ )/ 事件/ 捕获/ ./ 捕获/ 应用/ 进程/ 执行/ 过程/ 中/ 的/ 重要/ 事件/ ,/ 包括/ 进程/ 调度/ 、/ 通信/ 操作/ 、/ 文件/ 访问/ 操作/ 等/ ./ 通过/ 捕获/ 进程/ 调度/ 事件/ ,/ 可以/ 计算/ 出/ 应用/ 进程/ 的/ 实际/ 执行/ 时间/ Trun/ ;/ 而/ 捕获/ 通信/ 和/ 文件/ 访问/ 事件/ 后/ ,/ 可以/ 通过/ 互连/ 网络/ 和/ 外存/ 模拟/ 模块/ 计算/ 获得/ I/ // O/ 阻塞/ 时间/ TIO/ ./ (/ 2/ )/ 互连/ 网络/ 及/ 外存/ 系统模拟/ ./ 在/ 高性能/ 计算机/ 中/ ,/ 节点/ 间/ 的/ 消息/ 通过/ 互连/ 网络/ 传输/ ,/ 因此/ 互连/ 网络/ 是/ 影响/ 高性能/ 计算/ 系统/ 性能/ 的/ 重要/ 因素/ ,/ 通过/ 对/ 互连/ 网络/ 和/ 外存/ 系统/ 的/ 数学/ 建模/ 和/ 模拟/ ,/ 可以/ 在/ 每/ 一次/ 通信/ 和/ 文件/ 访问/ 事件/ 发生/ 时/ ,/ 计算/ 出/ 消息传递/ 以及/ 文件/ 读/ // 写/ 操作/ 的/ 时间延迟/ ,/ 进而/ 计算/ 出/ 应用/ 进程/ 在/ 目标/ 系统/ 中/ 的/ 阻塞/ 时间/ TIO/ ./ (/ 3/ )/ 建立/ 应用/ 进程/ 时间轴/ ./ 由于/ 宿主机/ 节点/ 中/ 的/ 进程/ 个数/ 远大于/ 目标/ 机/ ,/ 且/ 两个/ 系统/ 中/ 的/ I/ // O/ 操作/ 时延/ 也/ 不/ 相同/ ./ 为了/ 准确/ 刻画/ 应用/ 进程/ 在/ 目标/ 系统/ 中/ 的/ 执行/ 步调/ ,/ 需要/ 为/ 每个/ 应用/ 进程/ 建立/ 其/ 在/ 目标/ 系统/ 中/ 的/ 运行/ 时间轴/ ,/ 以/ 明确/ 各种/ 事件/ 在/ 目标/ 系统/ 中/ 的/ 发生/ 时刻/ ,/ 进而/ 计算/ 出/ 应用/ 进程/ 的/ 就绪/ 等待时间/ Tready/ ./ 3.2/ 节对/ 进程/ 时间轴/ 的/ 建立/ 方法/ 进行/ 较为/ 深入/ 的/ 介绍/ ./ 3.2/ 应用/ 进程/ 时间轴/ 本/ 系统/ 使用/ 时间轴/ 记录/ 和/ 描述/ 应用/ 进程/ 的/ 动态/ 执行/ 轨迹/ ./ 应用/ 进程/ 时间轴/ 包含/ 了/ 改变/ 该/ 进程/ 状态/ 的/ 各种/ 事件/ 及其/ 发生/ 时刻/ 的/ 信息/ ,/ 定义/ 如下/ :/ 设/ 应用/ 进程/ 集合/ P/ =/ {/ p0/ ,/ p1/ ,/ …/ ,/ pn/ -/ 1/ }/ ,/ 其中/ 应用/ 进程/ pi/ (/ i/ =/ 0/ ,/ 1/ ,/ …/ ,/ n/ -/ 1/ )/ 的/ 时间轴/ 由该/ 进程/ 的/ 事件/ 记录/ 序列/ 构成/ Ai/ =/ {/ Ei0/ ,/ Ei1/ ,/ …/ ,/ Eim/ -/ 1/ }/ ,/ 该/ 序列/ 中/ 每个/ 事件/ 记录/ 对应/ 一个二元/ 组/ ,/ 包含/ 事件/ 及其/ 发生/ 时刻/ ,/ 即/ 事件/ 记录/ Eij/ =/ 〈/ eij/ ,/ tij/ 〉/ (/ i/ =/ 0/ ,/ 1/ ,/ …/ ,/ n/ -/ 1/ ;/ j/ =/ 0/ ,/ 1/ ,/ …/ ,/ m/ -/ 1/ )/ ./ 事件/ 记录/ 在/ 时间轴/ 集合/ 中/ 按/ 发生/ 时间/ 顺序/ 先后/ 排列/ ,/ 即/ 时间轴/ Ai/ 上/ 存在/ 时间/ 偏序/ 关系/ ./ 在/ 宿主机/ 系统/ 中/ ,/ 通过/ 应用程序/ 执行/ 时/ 进行/ 事件/ 捕获/ ,/ 可以/ 得到/ 每/ 一个/ 应用/ 进程/ 在/ 宿主机/ 上/ 的/ 时间轴/ HAi/ ,/ 模拟器/ 需要/ 根据/ 宿主机/ 时间轴/ 、/ 应用/ 进程/ 在/ 目标/ 系统/ 中/ 的/ 分配/ 信息/ 以及/ 进程/ 调度/ 策略/ 建立/ 应用/ 进程/ 在/ 目标/ 机中/ 的/ 时间轴/ TAi/ ./ 一个/ 程序/ 的/ 多个/ 应用/ 进程/ 之间/ 需要/ 相互/ 通信/ 和/ 同步/ ,/ 这会/ 影响/ 进程/ 的/ 执行/ 步调/ ,/ 因此/ 要/ 建立/ 一个/ 进程/ 在/ 目标/ 机上/ 的/ 时间轴/ ,/ 不但/ 要/ 参照/ 宿主机/ 上该/ 进程/ 的/ 时间轴/ ,/ 还要/ 参照/ 其它/ 相关/ 进程/ 的/ 时间轴/ ,/ 以/ 计算/ 进程/ 间/ 的/ 通信/ 等待时间/ ./ 在/ 建立/ 时间轴/ 的/ 过程/ 中/ ,/ 模拟器/ 按/ 捕获/ 时间/ 顺序/ 逐个/ 处理/ 捕获/ 到/ 的/ 所有/ 进程/ 事件/ ,/ 根据/ 事件/ 类型/ 、/ 宿主机/ 发生/ 时刻/ 以及/ 相关/ 模拟/ 模块/ 的/ 返回值/ 计算/ 并/ 推进/ 各/ 进程/ 时间轴/ ./ 为了/ 记录/ 时间轴/ 推进/ 的/ 当前/ 位置/ ,/ 为/ 每个/ 应用/ 进程/ pi/ 维护/ 一个/ 逻辑/ 时钟/ CLKi/ (/ 初始值/ 为/ 0/ )/ ,/ 随着/ 各/ 事件/ 在/ 目标/ 机中/ 的/ 发生/ 时刻/ 逐个/ 被/ 确定/ ,/ CLKi/ 的/ 值/ 也/ 逐步/ 递增/ ./ 另外/ ,/ 为了/ 实现/ 进程/ 间/ 消息/ 发送/ 和/ 接收/ 事件/ 的/ 匹配/ ,/ 为/ 每个/ 进程/ 维护/ 一个/ 通信/ 事件/ 缓冲/ 队列/ ./ 对/ 各种类型/ 的/ 事件/ 进行/ 处理/ 并/ 推进/ 进程/ 时间轴/ 的/ 方法/ 见表/ 1/ ./ Page4/ 事件/ 类别/ 进程/ 调度/ 通信/ 表/ 1/ 进程/ 事件处理/ 方法/ (/ 设/ 事件/ 记录/ 为/ Eij/ )/ 推进/ 时间轴/ :/ 进程/ 逻辑/ 时钟/ CLKi/ ←/ CLKi/ +/ R/ ;/ 推进/ 时间轴/ :/ 进程/ 逻辑/ 时钟/ CLKi/ ←/ CLKi/ +/ (/ tij/ -/ tsi/ )/ 推进/ 时间轴/ :/ 进程/ 逻辑/ 时钟/ CLKi/ ←/ CLKi/ +/ (/ tij/ -/ tsi/ )/ if/ (/ 本/ 消息/ 目的/ 进程/ pk/ 没有/ 匹配/ 的/ 接收/ 操作/ 事件/ )/ then/ 将/ 事件/ 暂时/ 放入/ 缓冲/ 队列/ ,/ 待/ 匹配/ 后处理/ ;/ 调用/ 互连/ 网络/ 模拟/ 得出/ 消息传递/ 时延/ D/ ;/ 累计/ 进程/ 执行/ 时间/ :/ Truni/ ←/ Truni/ +/ (/ tij/ -/ tsi/ )/ 推进/ 源/ 进程/ 时间轴/ :/ CLKi/ ←/ CLKi/ +/ (/ tij/ -/ tsi/ )/ 记录/ 源/ 进程/ 的/ 状态/ 开始/ 时间/ :/ tsi/ ←/ tij/ 目的/ 进程/ 时间轴/ 与源/ 进程同步/ :/ CLKk/ ←/ CLKi/ 其它/ 进程/ 间通信/ 处理/ 流程/ 与/ MPI/ 发送/ // 接收/ 消息/ 类似/ ,/ 但/ 无需/ 通过/ 互连/ 网络/ 模拟/ 消息传递/ 时延/ 文件/ 访问/ 读/ // 写/ 文件/ 注/ 1/ :/ 关于/ MPI/ 消息传递/ 事件/ ,/ 为/ 简化/ 讨论/ ,/ 只/ 给出/ MPI/ 标准/ 模式/ 的/ 处理/ 方法/ ,/ 其它/ 模式/ 类同/ ;/ 注/ 2/ :/ 处理/ 通信/ 或/ 文件/ 访问/ 事件/ 时/ ,/ 根据/ 互连/ 网络/ 或/ 存储/ 模拟/ 得出/ 时延/ D/ ,/ 仅当/ 后续/ 该/ 进程/ 被/ 阻塞/ 时/ ,/ 该值/ 才/ 被/ 计入/ I/ // O/ 阻塞/ 时间/ ,/ 这/ 主要/ 是/ 考虑/ 到/ 进程/ 可能/ 采用/ 非/ 阻塞/ 方式/ 的/ 消息传递/ 和/ 异步/ 文件/ 访问/ ./ 图/ 1/ 给出/ 了/ 3/ 个/ 应用/ 进程/ 时间轴/ 的/ 简单/ 示例/ ./ 在/ 宿主机/ 上/ 模拟/ 运行/ 时/ ,/ 进程/ 0/ 和/ 进程/ 1/ 运行/ 在/ 同一/ 处理器/ (/ 核/ )/ 上/ ,/ 而/ 在/ 目标/ 机中/ ,/ 3/ 个/ 进程/ 各自/ 独占/ 一个/ 处理器/ (/ 核/ )/ ./ 图/ 1/ (/ a/ )/ 为/ 在/ 宿主机/ 上/ 模拟/ 运行/ 时/ ,/ 通过/ 事件/ 捕获/ 得到/ 的/ 宿主机/ 时间轴/ ,/ 其中/ 进程/ 0/ 向/ 进程/ 1/ 发送/ 了/ 一条/ MPI/ 消息/ ,/ 并/ 进行/ 了/ 1/ 次/ 文件/ 图/ 1/ 应用/ 进程/ 时间轴/ 示例/ 该/ 进程/ 在/ 目标/ 机中/ 时间轴/ 计算方法/ 访问/ ,/ 进程/ 1/ 则/ 从/ 进程/ 0/ 接收/ 了/ 消息/ ,/ 并/ 向/ 进程/ 2/ 发送/ 了/ 一条/ 消息/ ;/ 图/ 1/ (/ b/ )/ 为/ 根据/ 宿主机/ 时间轴/ 建立/ 的/ 应用/ 进程/ 在/ 目标/ 机上/ 的/ 时间轴/ ,/ 由于/ 在/ 目标/ 机中/ 每个/ 进程/ 各自/ 独占/ 处理器/ ,/ 不再/ 像/ 宿主机/ 那样/ 多/ 进程/ 在/ 一个/ 处理器/ 上/ 分时/ 交替/ 运行/ ,/ 因此/ 应用/ 进程/ 的/ 目标/ 机/ 时间轴/ 与/ 宿主机/ 时间轴/ 相比/ 有/ 较大/ 差异/ ./ Page53/ ./ 3/ 互连/ 网络/ 与/ 存储系统/ 模拟/ 互连/ 网络/ 与/ 存储系统/ 模拟/ 的/ 作用/ 是/ ,/ 针对/ 系统/ 捕获/ 到/ 的/ 消息传递/ 和/ 文件/ 访问/ 事件/ ,/ 计算/ 得出/ 相应/ 操作/ 的/ 时间/ 开销/ 长度/ ,/ 为/ 建立/ 应用/ 进程/ 时间轴/ 提供/ 依据/ ./ (/ 1/ )/ 互连/ 网络/ 建模/ 与/ 模拟系统/ 在/ 已有/ 的/ 互连/ 网络/ 数学模型/ 基础/ 上/ ,/ 针对/ 近年来/ 高性能/ 计算/ 领域/ 应用/ 较/ 多/ 的/ Infiniband/ (/ IB/ )/ 技术/ 建立/ 了/ IB/ 交换机/ 、/ 节点/ 、/ 路径/ 和/ 网络延时/ 模型/ 以及/ Fat/ -/ tree/ 、/ 2D/ // 3D/ -/ mesh/ 和/ 2D/ // 3D/ -/ Torus/ 互连/ 网络/ 模型/ ./ 数据包/ 的/ 网络延时/ 包括/ 在/ 每个/ 节点/ 上/ 的/ 交换机/ 处理/ 时间/ Tproc/ (/ nodei/ )/ 和/ 交换机/ 排队/ 等待时间/ Twait/ (/ nodei/ )/ ,/ 还/ 包括/ 在/ 各个/ 信道/ 上/ 的/ 传输/ 时间/ Ttrans/ (/ c/ )/ ,/ c/ ∈/ path/ =/ {/ inj/ ,/ c1/ ,/ c2/ ,/ …/ ,/ cn/ -/ 1/ ,/ ej/ }/ ,/ 包括/ 包头/ 传输/ 时间/ Th/ (/ c/ )/ 和/ 数据/ 载荷/ 的/ 传输/ 时间/ Td/ (/ c/ )/ ./ 在/ 虚切通/ 交换/ 方式/ 下/ ,/ 每/ 发生/ 一次/ 切通/ ,/ 数据包/ 的/ 延时/ 便/ 小于/ 存储转发/ 交换/ 方式/ 下/ 的/ 延时/ ,/ 两者之间/ 的/ 差值/ 为/ Td/ (/ c/ )/ +/ Twait/ (/ nodei/ )/ ./ 基于/ 以上/ 的/ 路径/ 模型/ ,/ 长度/ 为/ L/ 的/ 数据包/ (/ 包头/ 长度/ 所/ 占/ 比例/ 为/ α/ )/ 从源/ 端/ 到/ 目的/ 端/ 经历/ 的/ 跳/ 数为/ h/ ,/ 即/ 经过/ n/ =/ h/ +/ 1/ 个/ 节点/ ,/ 将/ IB/ 信道/ 的/ 带宽/ 标记/ 为/ W/ ,/ 则/ 该/ 包/ 的/ 网络延时/ 为/ latency/ =/ [/ n/ ×/ Tproc/ (/ Nodei/ )/ +/ ∑/ nc/ ×/ ∑/ j/ ∈/ CT/ 其中/ ,/ CT/ 表示/ 发生/ 切通/ 的/ 节点/ 的/ 编号/ 集合/ ,/ 交换机/ 上/ 的/ 处理/ 时间/ 近似/ 为/ 一个/ 常数/ τ/ ,/ 故有/ Tproc/ (/ nodei/ )/ =/ τ/ ./ 另外/ ,/ 由于/ 各个/ IB/ 信道/ 的/ 带宽/ 相等/ ,/ 故包/ 在/ 各个/ 信道/ 上/ 的/ 传输/ 时间/ 相等/ ,/ 均/ 为/ Ttrans/ (/ c/ )/ =/ L/ 将式/ (/ 3/ )/ 代入/ 式/ (/ 2/ )/ ,/ 有/ latency/ =/ n/ ×/ τ/ +/ ∑/ n/ 假设/ 互连/ 网络/ 中/ 数据包/ 流呈泊/ 松/ 分布/ ,/ 应用/ 排队/ 论/ ,/ 得出/ 所有/ 源/ 和/ 目的/ 相同/ 的/ 数据包/ 的/ 平均/ 网络/ 时延/ 为/ Li/ ,/ j/ =/ n/ ×/ τ/ +/ ∑/ n/ =/ n/ ×/ τ/ +/ ∑/ n/ (/ 1/ -/ α/ )/ ×/ L/ 其中/ ,/ μ/ 为/ 排队/ 系统/ 中/ 服务台/ 的/ 平均/ 服务/ 速率/ ,/ 此处/ 与/ 信道/ 平均/ 包/ 传输速率/ 相等/ ;/ λ/ ci/ 为/ 信道/ 上/ 的/ 数据包/ 到达/ 率/ ;/ ρ/ ci/ 为/ 信道/ 的/ 服务/ 率/ ρ/ ci/ =/ λ/ ci/ // μ/ ./ 由式/ (/ 5/ )/ 可以/ 得知/ ,/ 对于/ 一个/ 源/ 、/ 目的/ 和/ 长度/ 确定/ 的/ 数据包/ ,/ 其/ 在/ 规则/ 拓扑/ 且/ 使用/ 虚切/ 通流/ 控制/ 机制/ 的/ 互连/ 网络/ 上/ 的/ 延时/ 由/ 信道/ 带宽/ 、/ 跳数/ 、/ 每条/ 信道/ 上/ 的/ 数据包/ 到达/ 率/ 等/ 参数/ 决定/ ./ 因此/ ,/ 对于/ Fat/ -/ tree/ 、/ 2D/ // 3D/ -/ mesh/ 等/ 不同/ 拓扑/ 结构/ 和/ 路由/ 算法/ 的/ 互连/ 网络/ ,/ 只/ 需/ 推导/ 出/ 数据包/ 的/ 跳数/ 和/ 其/ 路径/ 中/ 每条/ 信道/ 上/ 的/ 数据包/ 到达/ 率/ λ/ ci/ ,/ 即可/ 得出/ 该/ 数据包/ 的/ 网络延时/ ./ (/ 2/ )/ 存储系统/ 建模/ 与/ 模拟/ 高性能/ 计算机/ 通常/ 设置/ 一定/ 数量/ 的/ 专用/ 存储/ 节点/ ,/ 并/ 采用/ 并行/ 文件系统/ ,/ 其/ 文件/ 访问/ 时延/ 除了/ 与/ 设备/ 参数/ 相关/ 外/ ,/ 还/ 与/ 节点/ 操作系统/ 中/ 的/ 文件/ 管理/ 和/ 存储/ 节点/ 中/ 的/ 管理/ 调度/ 机制/ 、/ 多级/ 的/ 文件/ 缓冲/ 管理/ 、/ 文件/ 访问/ 历史/ 等/ 密切相关/ ,/ 对/ 其/ 进行/ 精确/ 的/ 数学/ 建模/ 有/ 很大/ 难度/ ./ 因此/ ,/ 系统/ 采用/ 了/ 功能/ 模拟/ 和/ 数学/ 建模/ 相结合/ 的/ 方法/ ,/ 通过/ 对/ 文件/ 预取/ 和/ 缓冲/ 管理/ 进行/ 功能/ 模拟/ ,/ 区分/ 出/ 缓冲/ 命中/ 和/ 不/ 命中/ 这/ 两类/ 处理/ 流程/ 完全/ 不同/ 且/ 性能/ 差异/ 较大/ 的/ 文件/ 访问/ 请求/ ,/ 对/ 需要/ 访问/ 磁盘阵列/ 的/ 请求/ ,/ 结合/ 数学/ 建模/ 和/ 目标/ 设备/ 平均/ 访问/ 时间/ 等/ 参数/ ,/ 计算/ 其/ 访问/ 时延/ ./ 对/ 计算/ 节点/ 内/ 缓冲/ 未/ 命中/ 的/ 文件/ 访问/ 请求/ ,/ 其时/ 延/ 模型/ 为/ Tstorage/ -/ system/ =/ Testablish/ -/ connection/ +/ Tsend/ -/ request/ +/ 其中/ ,/ Testablish/ -/ connection/ 表示/ 计算/ 节点/ 发送/ 通用/ 服务/ 管理/ 数据包/ 与/ 存储/ 节点/ 建立/ 连接/ 所用/ 的/ 时间/ ,/ 主要/ 为/ 互连/ 网络/ 的/ 延时/ ;/ Tsend/ -/ request/ 表示/ 处理/ 节点/ 发送/ 读写/ 请求/ 至/ 存储/ 节点/ 的/ 时间/ ,/ 即/ 读写/ 请求/ 的/ 网络延时/ ;/ Treturn/ 为/ 返回/ 信息/ 的/ 网络延时/ ,/ 返回/ 信息/ 包括/ 完成/ 状态/ ,/ 所/ 读数据/ 等/ ;/ Tstorage/ -/ node/ 为/ 读写/ 请求/ 在/ 存储/ 节点/ 上/ 花费/ 的/ 时间/ ,/ 即/ 对/ 存储/ 节点/ 的/ 访问/ 时延/ ./ 由/ 上/ 可知/ ,/ 式/ (/ 6/ )/ 中除/ Tstorage/ -/ node/ 外/ ,/ 其余/ 时间/ 均/ 可/ 通过/ 调用/ 互连/ 网络/ 模拟/ 模块/ 获得/ ./ 对/ 存储/ 节点/ 内/ 缓冲/ 未/ 命中/ 的/ 文件/ 访问/ 请求/ ,/ 根据/ 文件/ 访问/ 数据量/ 和/ 目/ Page6/ 标/ 系统/ 磁盘阵列/ 平均/ 读/ // 写/ 时延/ 计算/ 其/ 访问/ 时延/ ./ 4/ 模拟器/ 系统/ 结构图/ 2/ 为/ 模拟器/ 运行/ 示意图/ ,/ 如前所述/ ,/ 系统/ 采用/ 图/ 2/ 模拟器/ 运行/ 示意图/ 模拟器/ 的/ 组成/ 结构/ 如图/ 3/ 所示/ ./ 系统/ 由/ 内核模块/ 、/ 运行/ 控制/ 模块/ 、/ 事件/ 分析/ 处理/ 模块/ 、/ 互连/ 网络/ 与/ 存储系统/ 模拟/ 模块/ 构成/ ./ 其中/ 内核模块/ 运行/ 在/ 每个/ 宿主机/ 节点/ 操作系统/ 的/ 内核/ 空间/ ,/ 负责/ 在/ 应用/ 进程/ 运行/ 过程/ 中/ 捕获/ 进程/ 调度/ 、/ 通信/ 操作/ 、/ 文件/ 访问/ 操作/ 等/ 事件/ ,/ 并/ 将/ 其/ 传输/ 给/ 事件/ 分析/ 处理/ 模块/ ;/ 运行/ 控制/ 模块/ 负责/ 整个/ 模拟系统/ 的/ 运行/ 控制/ ,/ 它/ 是/ 用户/ 与/ 模拟系统/ 进行/ 交互/ 的/ 接口/ ,/ 提供/ 参数/ 配置/ 、/ 启动/ 、/ 停止/ 图/ 3/ 模拟器/ 系统结构/ 系统对/ 事件/ 采取/ 分布式/ 捕获/ 、/ 集中式/ 处理/ 的/ 方式/ ,/ 这/ 是因为/ 应用/ 进程/ 时间轴/ 的/ 建立/ 需要/ 对/ 所有/ 进程/ 的/ 事件/ 进行/ 协同/ 处理/ ,/ 无法/ 在/ 各/ 宿主机/ 节点/ 上/ 独立/ 完成/ ,/ 因此/ 系统/ 设置/ 专门/ 的/ 模拟/ 控制/ 和/ 事件处理/ 节点/ ,/ 运行/ 除/ 内核模块/ 之外/ 的/ 事件/ 分析/ 处理/ 、/ 互连/ 网络/ 和/ 存储系统/ 模拟/ 以及/ 运行/ 控制/ 模块/ ./ 5/ 评价/ 与/ 分析/ 5.1/ 实验/ 环境/ 与/ 实验/ 方法/ 系统/ 的/ 测试/ 评价/ 包含/ 两/ 部分/ ,/ 首先/ 是/ 模拟/ 精度/ 并行/ 模拟/ 方式/ ,/ 使用/ 多个/ 与/ 目标/ 机/ 同构/ 的/ 宿主机/ 节点/ 作为/ 模拟/ 平台/ ,/ 通过/ 目标/ 应用/ 进程/ 的/ 分配/ 和/ 映射/ ,/ 在/ 宿主机/ 上/ 模拟/ 应用程序/ 在/ 大规模/ 目标/ 机上/ 的/ 运行/ ./ 多个/ 宿主机/ 节点/ 之间/ 通过/ 网络/ 互连/ ,/ 网络/ 类型/ 与/ 目标/ 系统/ 可以/ 不同/ ./ 等/ 控制/ 命令/ ,/ 并/ 在/ 模拟/ 结束/ 后/ 向/ 用户/ 返回/ 模拟/ 结果/ ;/ 事件/ 分析/ 处理/ 模块/ 对/ 内核模块/ 捕获/ 的/ 各种/ 事件/ 数据/ 进行/ 收集/ 、/ 处理/ ,/ 并/ 通过/ 分析/ 处理/ 建立/ 各/ 应用/ 进程/ 在/ 目标/ 系统/ 中/ 的/ 时间轴/ ,/ 最终/ 获得/ 应用程序/ 在/ 目标/ 系统/ 的/ 执行/ 信息/ ;/ 互连/ 网络/ 和/ 存储系统/ 模拟/ 模块/ 分别/ 实现目标/ 系统/ 中/ 互连/ 网络/ 和/ 存储系统/ 的/ 建模/ ,/ 这/ 两个/ 模块/ 由/ 事件/ 分析/ 处理/ 模块/ 调用/ ,/ 根据/ 目标/ 系统/ 的/ 配置/ 参数/ ,/ 计算/ 节点/ 间/ 消息传递/ 时延/ 和/ 文件/ 访问/ 时延/ ./ 和/ 模拟/ 性能/ 的/ 测试/ ,/ 在/ 此基础/ 上/ ,/ 对/ 不同/ 规模/ 的/ 目标/ 并行/ 系统/ 进行/ 模拟实验/ ./ 成/ ,/ 其硬/ 软件/ 参数/ 配置/ 如表/ 2/ ./ 测试/ 使用/ 的/ 宿主机/ 由/ 4/ 台/ 双路/ 刀片/ 服务器/ 构/ 项目/ 刀片/ 型号/ 及/ 配置/ 节点/ 间/ 互连/ 操作系统/ RedhatEnterpriseLinux5/ ./ 0/ ,/ 内核/ 版本/ :/ 2.6/ ./ 18/ 测试/ 用/ 程序/ LinpackHPL/ +/ MPICH2/ +/ GOTOBLASPage75/ ./ 2/ 模拟/ 精度/ 与/ 性能/ 测试/ 为了/ 测试/ 系统/ 的/ 模拟/ 精度/ ,/ 在/ 模拟器/ 中/ 对/ 较/ 小规模/ 的/ 目标/ 系统/ (/ 节点/ 个数/ 1/ ~/ 32/ )/ 进行/ 模拟实验/ ,/ 获取/ 目标/ 系统/ 的/ Linpack/ 性能/ 数据/ ,/ 并/ 将/ 其/ 与/ 真实/ 物理/ 系统/ 中/ 获取/ 的/ 数据/ 进行/ 对比/ ,/ 得到/ 模拟/ 误差/ 如表/ 3/ 所示/ ./ 目标/ 节点/ 个数/ 124128.8188273/ ./ 09516522.98824768/ ./ 08632988.637/ 从表/ 3/ 可以/ 看出/ ,/ 模拟器/ 得到/ 的/ 性能/ 数据/ 与/ 真实/ 系统/ 相比/ 的/ 误差/ 比例/ 随/ 节点/ 个数/ 增加/ 有/ 增大/ 趋势/ ,/ 但/ 在/ 16/ 节点/ 后/ 趋于稳定/ ,/ 这/ 主要/ 是/ 由于/ 模拟实验/ 在/ 4/ 个/ 节点/ 的/ 宿主机/ 上/ 进行/ ,/ 每个/ 宿主/ 节点/ 上/ 的/ 进程/ 个数/ 可能/ 多于/ 目标/ 系统/ ,/ 而/ 模拟器/ 忽略/ 了/ 进程/ 间/ cache/ 共享/ 对/ 性能/ 的/ 影响/ ,/ 因此/ 当/ 目标/ 节点/ 个数/ 大于/ 8/ 时/ ,/ 模拟器/ 得到/ 的/ 性能/ 值比/ 真实/ 数据/ 偏小/ ,/ 这/ 也/ 是/ 模拟器/ 今后/ 的/ 改进/ 方向/ 之一/ ./ 总体而言/ ,/ 目标/ 系统/ 达到/ 一定/ 规模/ 后/ 模拟/ 误差/ 比例/ 趋于稳定/ ,/ 且/ 保持/ 在/ 9/ %/ 左右/ ./ 模拟器/ 的/ 减速比/ (/ slowdown/ )/ 是/ 评价/ 模拟/ 性能/ 的/ 重要/ 指标/ ,/ 它/ 是/ 同一/ 工作/ 负载/ 在/ 模拟器/ 中/ 执行/ 时间/ 与/ 真实/ 系统/ 中/ 执行/ 时间/ 的/ 比值/ ,/ 能够/ 较/ 好/ 地/ 反映/ 模拟/ 行为/ 的/ 开销/ ,/ 该值/ 越/ 小/ ,/ 说明/ 模拟器/ 性能/ 越高/ ./ 本/ 系统/ 减速比/ 的/ 测试/ 仍然/ 采用/ Linpack/ 程序/ 作为/ 工作/ 负载/ ,/ 针对/ 不同/ 规模/ 的/ 目标/ 系统/ 测量/ Linpack/ 程序/ 模拟/ 执行/ 时间/ (/ 含/ 模拟器/ 数据分析/ 处理/ 时间/ )/ ,/ 然后/ 在/ 不/ 启动/ 模拟器/ 的/ 情况/ 下/ ,/ 在/ 4/ 节点/ 宿主机/ 上/ 测量/ 相同/ 个数/ Linpack/ 进程/ 的/ 执行/ 时间/ ,/ 将/ 两者/ 相比/ 得到/ 减速/ 比如/ 图/ 4/ 所示/ ./ 从图/ 4/ 可以/ 看出/ ,/ 随着/ 节点/ 规模/ 的/ 增大/ ,/ 减速比/ 从/ 十几倍/ 到/ 一百多/ 倍/ 逐渐/ 升高/ ./ 与/ 之/ 相比/ ,/ 通用/ 的/ 体系结构/ 模拟器/ 减速比/ 一般/ 在/ 千倍/ 以上/ 甚至/ 上万倍/ ;/ 与/ 同类/ 的/ 大规模/ 并行/ 系统/ 模拟器/ 相比/ ,/ 本/ 系统/ 的/ 性能/ 也/ 表现/ 较优/ ,/ 例如/ ,/ BGLsim/ [/ 1/ ]/ 使用/ 4/ 节点/ 模拟/ 1024/ 节点/ 时/ 减速比/ 最小/ 为/ 220/ ,/ 而本/ 系统/ 为/ 126.9/ ./ 5.3/ 目标/ 系统/ 模拟实验/ 在/ 如前所述/ 的/ 宿主机/ 平台/ 上/ 对/ 不同/ 系统/ 规模/ 和/ 不同/ 互连/ 网络结构/ 的/ 目标/ 系统/ 进行/ 了/ 模拟实验/ ,/ 并/ 获取/ 系统/ 的/ Linpack/ 性能/ 及/ 通信/ 行为/ 等/ 数据/ ./ 实验/ 中/ 目标/ 机/ 节点/ 个数/ 32/ ~/ 1024/ ,/ 互连/ 网络拓扑/ 分别/ 选用/ 基于/ Infiniband/ 的/ fat/ -/ tree/ 、/ 3D/ -/ mesh/ 和/ 3D/ -/ Torus/ ,/ Infiniband/ 带宽/ 为/ 20Gbps/ ;/ Linpack/ 任务/ 规模/ N/ =/ 30000/ ,/ NB/ 分块/ 为/ 168/ ,/ 应用程序/ 及/ 所用/ 程序库/ 均/ 未/ 做/ 专门/ 优化/ ./ 图/ 5/ 和/ 图/ 6/ 分别/ 给出/ 了/ 不同/ 系统/ 规模/ 下/ Linpack/ 性能/ 及其/ 增长/ 情况/ ./ 图/ 53/ 种/ 互连/ 网络拓扑/ 下/ Linpack/ 峰值/ 性能/ 图/ 6Fat/ -/ tree/ 互连/ 拓扑/ 下/ Linpack/ 程序/ 性能/ 及/ 增长/ 比例/ 从图/ 5/ 可以/ 看出/ ,/ 3/ 种/ 互连/ 拓扑/ 下/ 的/ Linpack/ 性能/ 由高到/ 低/ 依次/ 为/ Fat/ -/ tree/ 、/ 3D/ -/ Torus/ 、/ 3D/ -/ mesh/ ,/ 这/ 主要/ 是因为/ 相对/ 于/ mesh/ // torus/ 结构/ ,/ fat/ -/ tree/ 网络/ 具有/ 更/ 小/ 的/ 网络/ 直径/ 和/ 平均/ 距离/ ,/ 因此/ 平均/ 通信/ 时延/ 相对/ 较/ 小/ ./ 当然/ ,/ 随着/ 系统/ 规模/ 增大/ ,/ 构建/ fat/ -/ tree/ 网络/ 需要/ 的/ 交换机/ 及/ 光纤/ 数量/ 也/ 比/ torus/ // Page8mesh/ 结构/ 多得多/ ./ 从图/ 6/ 可以/ 看出/ ,/ Linpack/ 性能/ 并/ 没有/ 随/ 节点/ 个数/ 成倍增长/ ,/ 而是/ 增长幅度/ 越来越/ 小/ ,/ 例如/ ,/ 节点/ 个数/ 由/ 32/ 增加/ 到/ 64/ 时/ ,/ Linpack/ 性能/ 基本/ 都/ 能/ 同步/ 获得/ 100/ %/ 的/ 增长率/ ,/ 但/ 当/ 节点/ 个数/ 由/ 512/ 增长/ 到/ 1024/ 时/ ,/ 仅/ 获得/ 47.9/ %/ 的/ 性能/ 增长/ ./ 主要/ 原因/ 是/ 随着/ 节点/ 数量/ 增加/ ,/ 互连/ 网络/ 规模/ 增大/ 导致/ 通信/ 延迟/ 越来越/ 大/ ,/ 进而/ 影响/ 到/ 程序/ 性能/ ./ 由此/ 可以/ 看出/ ,/ 在/ 大规模/ 并行/ 系统/ 中/ ,/ 如何/ 提高/ 应用程序/ 的/ 并行/ 效率/ ,/ 尽量/ 降低/ 不必要/ 的/ 网络通信/ 开销/ ,/ 是/ 非常/ 重要/ 的/ 环节/ ./ 6/ 相关/ 工作/ 在/ 计算机/ 体系结构/ 的/ 研究/ 中/ ,/ 实验/ 工具/ 多/ 采用/ 通用/ 的/ 体系结构/ 模拟器/ ,/ 典型/ 的/ 有/ 较/ 早期/ 的/ SimpleScalar/ [/ 2/ ]/ 和/ SimOS/ [/ 3/ ]/ 以及/ 近年来/ 应用/ 较/ 多/ 的/ Simics/ [/ 4/ ]/ 、/ GEMS/ [/ 5/ ]/ 、/ M5/ [/ 6/ ]/ 等/ ./ 这些/ 系统/ 一般/ 支持/ 执行/ 驱动/ 模拟/ 方式/ ,/ 多数/ 支持/ 全/ 系统模拟/ ,/ 在/ 体系结构/ 建模/ 方面/ ,/ 支持/ 处理器/ 微/ 体系结构/ 和/ 内存/ 系统/ 的/ 细粒度/ 建模/ 和/ 模拟/ ,/ 如/ 处理器/ 内/ 的/ 流水线/ 、/ Cache/ 访问/ 等/ ./ 这些/ 功能/ 可以/ 为/ 新型/ 处理器/ 结构/ 和/ 内存/ 系统/ 的/ 研究/ 提供/ 很/ 好/ 的/ 支持/ ,/ 但/ 这种/ 细粒度/ 的/ 建模/ 和/ 模拟/ 也/ 大大降低/ 了/ 模拟/ 性能/ ,/ 因此/ 通用/ 的/ 体系结构/ 模拟器/ 通常/ 用于/ 处理器/ 个数/ 较少/ 的/ 系统/ 的/ 模拟/ ,/ 而/ 难以/ 满足/ 大规模/ 并行/ 系统/ 的/ 模拟/ 需求/ ./ 有鉴于此/ ,/ 近年来/ 也/ 出现/ 了/ 一些/ 专门/ 针对/ 大规模/ 并行/ 系统/ 的/ 模拟器/ ,/ 典型/ 的/ 有/ BigSim/ [/ 7/ ]/ 、/ BGL/ -/ Sim/ [/ 1/ ]/ 、/ MPI/ -/ SIM/ [/ 8/ ]/ 、/ Hypersim/ [/ 9/ ]/ 等/ ./ BigSim/ 由/ 美国/ 伊利诺/ 依/ 州立大学/ 香槟/ 分校/ (/ UIUC/ )/ 开发/ ,/ 能/ 通过/ 执行/ 真实/ 应用/ 来/ 预测/ 高性能/ 计算机/ 的/ 性能/ ,/ 并且/ 支持/ 较为/ 精细/ 的/ 网络/ 性能/ 模拟/ ,/ 然而/ 该/ 系统/ 依赖于/ UIUC/ 的/ CHARM/ ++/ [/ 10/ ]/ 并行/ 编程/ 和/ 运行/ 环境/ ,/ 这/ 在/ 一定/ 程度/ 上/ 限制/ 了/ 它/ 的/ 使用/ 范围/ ;/ BGLsim/ 是/ IBM/ 公司/ 为/ BlueGene/ // L/ 系统/ 专门/ 开发/ 的/ 模拟器/ ,/ 该/ 系统/ 可/ 模拟/ BlueGene/ // L/ 几乎/ 所有/ 的/ 硬件/ 特性/ ,/ 且/ 可/ 模拟/ 运行/ MPI/ 应用程序/ ,/ 其/ 主要/ 局限性/ 是/ 目标/ 机/ 限定/ 于/ BlueGene/ // L/ 体系结构/ 和/ PowerPC/ 处理器/ ;/ MPI/ -/ SIM/ 是/ 一个/ MPI/ 程序库/ ,/ 可/ 用于/ 测试/ 和/ 预测/ MPI/ 并行程序/ 在/ 各种/ 体系结构/ 下/ 的/ 性能/ 表现/ ,/ 可/ 设定/ 的/ 目标/ 系统/ 参数/ 包括/ 处理器/ 个数/ 和/ 通信/ 延迟/ ,/ 但/ 不/ 支持/ 互连/ 网络/ 及/ 外设/ 的/ 建模/ 和/ 模拟/ ;/ Hypersim/ 由/ 中国科学院计算技术研究所/ 设计/ ,/ 专门/ 用于/ 模拟/ 其超/ 并行/ 体系结构/ (/ HPP/ )/ ,/ 该/ 系统/ 改进/ 了/ 传统/ 体系结构/ 模拟器/ 按/ 时钟/ 逐步推进/ 的/ 模拟/ 方式/ ,/ 采用/ N/ 步/ 推进/ 的/ 超步/ 执行/ ,/ 以此/ 提高/ 模拟/ 效率/ ,/ 但/ 由于/ 需要/ 支持/ 节点/ 内/ 的/ 部件/ 级/ 建模/ ,/ 其/ 模拟/ 性能/ 依然/ 受限/ ./ 与/ 已有/ 的/ 大规模/ 并行/ 系统/ 模拟器/ 相比/ ,/ 本文/ 工作/ 所/ 采用/ 的/ 基于/ 与/ 目标/ 系统/ 同构/ 节点/ 进行/ 模拟/ 的/ 方法/ 与/ MPI/ -/ SIM/ 类似/ ,/ 但/ MPI/ -/ SIM/ 不/ 支持/ 互连/ 网络/ 和/ I/ // O/ 的/ 建模/ 和/ 模拟/ ,/ 而/ 互连/ 网络/ 是/ 影响/ 大规模/ 并行/ 系统/ 性能/ 的/ 重要/ 因素/ ,/ 历来/ 受到/ 设计/ 人员/ 高度重视/ ;/ 在/ 并行/ 模拟/ 的/ 时间/ 同步/ 方法/ 上/ ,/ 已有/ 模拟器/ 大多/ 沿用/ 传统/ 体系结构/ 模拟器/ 中/ 所/ 使用/ 的/ 方法/ ,/ 即/ 各/ 进程/ (/ 节点/ )/ 维护/ 各自/ 的/ 逻辑/ 时钟/ ,/ 并/ 通过/ 复杂/ 的/ 同步/ 机制/ 确定/ 事件/ 的/ 先后顺序/ ,/ 某些/ 策略/ 在/ 发生/ 误判/ 时/ 还/ 需/ 进行/ 回滚/ ,/ 这/ 可能/ 会/ 大大降低/ 并行/ 模拟/ 的/ 效率/ ,/ 与/ 这些/ 方法/ 相比/ ,/ 本文/ 针对/ 大规模/ 并行/ 系统模拟/ 中/ 所/ 关注/ 事件/ 的/ 特点/ ,/ 采用/ 了/ 执行/ 中/ 捕获/ 事件/ ,/ 执行/ 后/ 重建/ 时间轴/ 的/ 串行/ 时间/ 同步/ 方法/ ,/ 可/ 在/ 保证/ 正确性/ 的/ 前提/ 下/ 使/ 进程/ 全速/ 运行/ ,/ 模拟/ 效率/ 更高/ ;/ 另外/ ,/ 本文/ 提出/ 的/ SimHPC/ 不/ 局限于/ 某种/ 硬件/ 体系结构/ 或/ 软件/ 编程/ 运行/ 环境/ ,/ 具有/ 更好/ 的/ 适用性/ ./ 7/ 结论/ 和/ 未来/ 的/ 工作/ 模拟实验/ 方法/ 对于/ 高性能/ 计算机系统/ 的/ 研究/ 和/ 设计/ 具有/ 重要/ 的/ 意义/ ,/ 然而/ 由于/ 目标/ 系统/ 规模/ 庞大/ ,/ 传统/ 的/ 体系结构/ 模拟器/ 难以/ 在/ 模拟/ 性能/ 方面/ 满足要求/ ./ 本文/ 提出/ 的/ 专门/ 用于/ 大规模/ 并行/ 系统模拟/ 的/ 模拟器/ —/ —/ —/ SimHPC/ ,/ 采用/ 执行/ 驱动/ 的/ 全/ 系统模拟/ 方法/ ,/ 支持/ 操作系统/ 和/ 包括/ Linpack/ 在内/ 的/ 应用程序/ 的/ 模拟/ 运行/ ./ SimHPC/ 通过/ 采用/ 与/ 目标/ 系统/ 同构/ 的/ 节点/ 作为/ 宿主/ 节点/ ,/ 以及/ 并行/ 模拟/ 的/ 方法/ ,/ 使得/ 模拟/ 性能/ 相比/ 传统/ 的/ 体系结构/ 模拟器/ 大幅提高/ ,/ 与/ 现有/ 的/ 几种/ 大规模/ 并行/ 系统/ 模拟器/ 相比/ ,/ SimHPC/ 在/ 通用性/ 和/ 模拟/ 性能/ 方面/ 也/ 具有/ 一定/ 的/ 优势/ ./ 为/ 保证/ 模拟/ 性能/ ,/ 目前/ SimHPC/ 要求/ 宿主/ 节点/ 与/ 目标/ 节点/ 同构/ ./ 今后/ 的/ 努力/ 方向/ 是/ ,/ 在/ 满足/ 高性能/ 计算机系统/ 模拟/ 性能/ 的/ 前提/ 下/ ,/ 使/ 系统/ 能够/ 模拟/ 与/ 宿主/ 节点/ 不同/ 结构/ 甚至/ 不同/ 种类/ 处理器/ 的/ 目标/ 系统/ ,/ 目前/ 系统/ 正在/ 研究/ 和/ 实验/ 基于/ 性能/ 比例/ 因子/ 和/ 基于/ 性能/ 计数器/ 的/ 异种/ 处理器/ 及/ 节点/ 模拟/ 方法/ ;/ 另外/ ,/ 需/ 考虑/ 宿主/ 节点/ 中多/ 进程/ 共享/ cache/ 带来/ 的/ 性能/ 影响/ ,/ 以/ 进一步提高/ 模拟/ 精度/ ./ 

