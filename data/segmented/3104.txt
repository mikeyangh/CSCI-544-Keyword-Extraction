Page1/ 基于/ 分层/ 象限/ 空间/ 的/ P2P/ 超级/ 节点/ 拓扑/ 构造/ 冯劲潇/ 陈贵海/ 谢俊元/ (/ 南京大学/ 计算机软件/ 新/ 技术/ 国家/ 重点/ 实验室/ 南京/ 210093/ )/ 摘要/ 现有/ 的/ P2P/ 超级/ 节点/ 拓扑/ 分为/ 非/ 结构化/ 超级/ 节点/ 拓扑/ 和/ 结构化/ 超级/ 节点/ 拓扑/ ,/ 前者/ 支持/ 模糊/ 查询/ ,/ 鲁棒性/ 好/ ,/ 但/ 路由/ 效率/ 低/ ,/ 查询/ 结果/ 具有/ 不确定性/ ,/ 后者/ 支持/ 数据/ 定位/ ,/ 路由/ 效率高/ ,/ 负载/ 均衡性/ 好/ ,/ 但/ 不/ 支持/ 模糊/ 查询/ ,/ 也/ 不/ 适应/ 高度/ 动态/ 环境/ ./ 文中/ 将/ 两种/ 超级/ 节点/ 拓扑/ 结构/ 的/ 优点/ 结合/ 起来/ ,/ 提出/ 一种/ 基于/ 分层/ 象限/ 空间/ 的/ 新型/ 超级/ 节点/ 拓扑/ Quad/ ./ 它/ 在/ 路由/ 方面/ 同时/ 支持/ 数据/ 定位/ 和/ 模糊/ 查询/ ,/ 并/ 解决/ 了/ 结构化/ 超级/ 节点/ 拓扑/ 对/ 动态性/ 支持/ 差/ 的/ 问题/ ./ 分析/ 和/ 模拟/ 结果表明/ :/ 和/ 现有/ 的/ 超级/ 节点/ 拓扑/ 相比/ ,/ Quad/ 数据/ 定位/ 在/ 常数/ 度数/ 下/ 达到/ O/ (/ logN/ )/ 定位/ 性能/ ,/ 并/ 在/ 路由/ 效率/ 和/ 路由/ 状态/ 数上/ 获得/ 更好/ 的/ 权衡/ ./ 在/ 动态/ 环境/ 中/ ,/ Quad/ 能/ 更/ 有效/ 地/ 处理/ 超级/ 节点/ 失效/ ;/ 在/ 性能/ 上/ ,/ 它/ 具有/ 更少/ 的/ 拓扑/ 构建/ 和/ 失效/ 修复/ 成本/ 并/ 具有/ 良好/ 的/ 负载/ 均衡性/ ./ 关键词/ 对/ 等/ 网络/ ;/ 超级/ 节点/ 拓扑/ ;/ 分层/ 象限/ 空间/ ;/ 负载/ 均衡/ 1/ 引言/ 经过/ 近几年/ 的/ 发展/ ,/ P2P/ 网络/ 已/ 成为/ 互联网/ 最/ Page2/ 础/ 架构/ ,/ 对/ 互联网/ 应用/ 和/ 分布式/ 研究/ 产生/ 深远影响/ ./ P2P/ 网络/ 是/ 在/ 底层/ TCP/ // IP/ 网络/ 基础/ 上/ 构成/ 的/ 应用层/ 覆盖/ 网络/ ./ P2P/ 拓扑/ 结构/ 目前/ 主要/ 包括/ 非/ 结构化/ 和/ 结构化/ 两种/ 类型/ ./ 在/ 非/ 结构化/ 拓扑/ 中/ ,/ Peer/ 节点/ 间/ 无/ 严格/ 组织/ ,/ 资源/ 存放/ 在/ 节点/ 本地/ ,/ 路由/ 传递/ 具有/ 随意性/ ,/ 其/ 优点/ 是/ 系统/ 鲁棒性/ 好/ ,/ 节点/ 失效/ 影响/ 小/ ,/ 缺点/ 在于/ 查找/ 时/ 需要/ 通过/ 泛洪/ 或/ 随机/ 游走/ 等/ 盲目/ 查找/ 方式/ 进行/ ,/ 消息/ 流量/ 大/ 或/ 查询/ 效率/ 较/ 低/ ./ 为/ 改进/ 非/ 结构化/ 系统/ 的/ 路由/ 效率/ ,/ 研究/ 人员/ 提出/ 基于/ 分布式/ Hash/ 表/ (/ DHT/ )/ 的/ 结构化/ 系统/ ,/ 这/ 类/ 系统/ 采用/ 一致性/ Hash/ 函数/ 将/ 节点/ 标识/ (/ 如/ IP地址/ )/ 和/ 资源/ 标识/ (/ 如/ 文件名/ )/ 分别/ 映射/ 为/ 节点/ ID/ 标识/ 和/ 资源/ ID/ 标识/ ,/ 资源/ 信息/ 统一/ 存放/ 在/ 节点/ ID/ 标识/ 与/ 该/ 资源/ ID/ 标识/ 最/ 相近/ 的/ 节点/ 上/ (/ 资源/ 信息/ 可以/ 是/ 资源/ 本身/ 内容/ ,/ 也/ 可以/ 是/ 资源/ 位置/ 信息/ ,/ 相关/ 节点/ 为/ 资源/ 信息/ 建立/ 索引/ 表/ ,/ 所以/ 本文/ 用/ 资源/ 索引/ 来/ 简化/ 表示/ 节点/ 存放/ 的/ 资源/ 信息/ )/ ./ 与非/ 结构化/ 拓扑/ 相比/ ,/ DHT/ 机制/ 保证系统/ 能/ 在/ O/ (/ logN/ )/ 上限/ 内/ 查找/ 到/ 指定/ 的/ 资源/ 索引/ ,/ 路由/ 效率/ 有/ 了/ 很大/ 改善/ ./ 但/ 结构化/ 拓扑/ 也/ 带来/ 两个/ 新/ 的/ 问题/ :/ 一是/ 不/ 适应/ 高度/ 动态/ 环境/ ,/ 原因/ 是/ 结构化/ 系统/ 具有/ 严格/ 的/ 拓扑/ ,/ 资源/ 索引/ 要/ 发布/ 到/ 与/ 节点/ ID/ 标识/ 最/ 相近/ 的/ 节点/ 上/ ,/ 一旦/ 节点/ 失效/ ,/ 储存/ 在/ 该/ 节点/ 的/ 资源/ 索引/ 需要/ 转移/ 或/ 重新/ 发布/ ./ 另外/ ,/ 路由表/ 中/ 往往/ 包含/ O/ (/ logN/ )/ 个/ 邻居/ 节点/ ,/ 这些/ 邻居/ 节点/ 关系/ 紧密/ ,/ 节点/ 一旦/ 失效/ 会/ 产生/ 很/ 高/ 的/ 拓扑/ 修复/ 费用/ ;/ 另/ 一个/ 问题/ 是/ 结构化/ 系统/ 支持/ 数据/ 定位/ 但/ 不/ 支持/ 模糊/ 查询/ ,/ 这/ 是因为/ 不同/ 的/ 资源/ 标识/ 产生/ 不同/ 的/ ID/ 标识/ ./ 鉴于/ 上述/ 不足/ ,/ 研究/ 人员/ 利用/ 超级/ 节点/ 结构/ 对非/ 结构化/ 和/ 结构化/ 拓扑/ 进行/ 改进/ ,/ 称之为/ 非/ 结构化/ 超级/ 节点/ 拓扑/ 和/ 结构化/ 超级/ 节点/ 拓扑/ ./ 目前/ 的/ 超级/ 节点/ 结构/ 虽然/ 在/ 这/ 两种/ 拓扑/ 中/ 有效/ 利用/ 了/ 节点/ 异构/ 性/ ,/ 但/ 仍然/ 没有/ 解决/ 非/ 结构化/ 拓扑/ 路由/ 效率/ 不高/ 以及/ 结构化/ 拓扑/ 对/ 动态性/ 和/ 模糊/ 查询/ 支持/ 差/ 等/ 问题/ ./ 事实上/ ,/ 这/ 两类/ 结构/ 具有/ 互补性/ ,/ 非/ 结构化/ 超级/ 节点/ 拓扑/ 支持/ 模糊/ 查询/ 、/ 对/ 动态/ 环境/ 支持/ 好/ ,/ 而/ 结构化/ 超级/ 节点/ 拓扑/ 路由/ 效率高/ ,/ 良好/ 的/ 拓扑/ 结构/ 需要/ 同时/ 具备/ 两种/ 结构/ 的/ 优点/ ./ 本文/ 提出/ 一种/ 新颖/ 的/ 分层/ 象限/ 空间/ (/ Hierarc/ -/ hicalQuadrantSpace/ )/ 结构/ ,/ 并/ 在/ 该/ 结构/ 上/ 建立/ 了/ 一种/ 新型/ 超级/ 节点/ 拓扑/ ,/ 称为/ Quad/ ,/ 它/ 将/ 非/ 结构化/ 和/ 结构化/ 两种/ 超级/ 节点/ 拓扑/ 优点/ 结合/ 起来/ ,/ 在/ 路由/ 方面/ 同时/ 支持/ 模糊/ 查询/ 和/ 数据/ 定位/ ,/ 并/ 解决/ 了/ 结构化/ 超级/ 节点/ 拓扑/ 对/ 动态性/ 支持/ 差/ 的/ 问题/ ./ 分析/ 和/ 模拟/ 结果表明/ :/ 与/ 现有/ 超级/ 节点/ 拓扑/ 相比/ ,/ Quad/ 数据/ 定位/ 在/ 空间/ (/ 常数/ 度数/ )/ 和/ 时间/ (/ O/ (/ logN/ )/ 定位/ 性能/ )/ 上/ 获得/ 更好/ 权衡/ ;/ 在/ 动态/ 适应性/ 方面/ ,/ Quad/ 能/ 更好/ 地/ 降低/ 超级/ 节点/ 失效/ 对/ 拓扑/ 产生/ 的/ 影响/ ./ 在/ 性能/ 上/ ,/ Quad/ 具有/ 更/ 小/ 的/ 拓扑/ 构造/ 和/ 失效/ 修复/ 成本/ 并/ 具有/ 良好/ 的/ 负载/ 均衡性/ ./ 第/ 2/ 节/ 介绍/ P2P/ 拓扑/ 构造/ 相关/ 工作/ ;/ 第/ 3/ 节是/ Quad/ 网络/ 模型/ 定义/ ;/ 第/ 4/ 节/ 描述/ Quad/ 对/ 模糊/ 查询/ 和/ 数据/ 定位/ 两种/ 路由/ 方式/ 支持/ ;/ 第/ 5/ 节/ 介绍/ Quad/ 拓扑/ 自/ 组织/ 、/ 负载/ 均衡/ 和/ 容错/ 机制/ ;/ 第/ 6/ 节/ 分析/ 比较/ Quad/ 和/ 结构化/ 超级/ 节点/ 拓扑/ 在/ 查找/ 路径/ 长度/ 、/ 路由/ 状态/ 数/ 、/ 失效/ 修复/ 成本/ 以及/ 负载/ 均衡/ 方面/ 的/ 差别/ ,/ 提出/ Quad/ 路由/ 改进/ 思路/ ;/ 第/ 7/ 节/ 通过/ 模拟程序/ 比较/ Quad/ 和/ 非/ 结构化/ 超级/ 节点/ 网络/ 在/ 拓扑/ 构造/ 、/ 失效/ 修复/ 等/ 方面/ 的/ 成本/ 差异/ ;/ 第/ 8/ 节/ 给出/ 结束语/ ./ 2/ 相关/ 工作/ P2P/ 拓扑/ 结构/ 按/ 分布式/ 特征/ 分为/ 4/ 类/ :/ 集中/ 索引/ 式/ 拓扑/ 、/ 完全/ 分布式/ 非/ 结构化/ 拓扑/ 、/ 完全/ 分布式/ 结构化/ 拓扑/ 和/ 超级/ 节点/ 拓扑/ ,/ 相关/ 研究/ 工作/ 如下/ :/ (/ 1/ )/ 集中/ 索引/ 式/ 拓扑/ 和/ 完全/ 分布式/ 非/ 结构化/ 拓扑/ ./ 最早/ 的/ P2P/ 应用/ Napster/ ①/ 采用/ 集中/ 索引/ 式/ 拓扑/ ,/ 这种/ 拓扑/ 结构/ 将/ 所有/ 节点/ 的/ 资源/ 索引/ 存放/ 在/ 中心/ 服务器/ ,/ 查询/ 通过/ 中心/ 服务器进行/ ,/ 该/ 结构/ 虽然/ 简单/ ,/ 但是/ 具有/ 单点/ 失效/ 和/ 扩展性/ 差/ 等/ 缺点/ ./ 在/ Napster/ 出现/ 不久/ ,/ 完全/ 分布式/ 非/ 结构化/ 拓扑/ 就/ 出现/ 了/ ,/ 典型/ 应用/ 包括/ Gnutella0/ ./ 4/ 版/ ②/ 和/ Freenet/ [/ 1/ ]/ 等/ ./ 在/ 这类/ 结构/ 中/ ,/ 对/ 等/ 节点/ 将/ 资源/ 索引/ 存放/ 在/ 本地/ ,/ 查找/ 主要/ 采用/ 洪泛/ 和/ 随机/ 游走/ 两种/ 方式/ ,/ 但/ 前者/ 产生/ 很大/ 的/ 网络流量/ ,/ 后者/ 查找/ 路径/ 长/ ,/ 效率/ 偏低/ ./ 针对/ 完全/ 分布式/ 非/ 结构化/ 拓扑/ 的/ 改进/ 主要/ 是/ 提高/ 查询/ 效率/ ,/ 如/ 基于/ BloomFilter/ 技术/ 的/ 概率/ 搜索/ 小组/ 算法/ [/ 2/ ]/ 等/ ./ 但/ 总体/ 来说/ ,/ 查询/ 仍然/ 是/ 随机/ 的/ ,/ 查询/ 结果/ 也/ 是/ 不/ 确定/ 的/ ./ (/ 2/ )/ 完全/ 分布式/ 结构化/ 拓扑/ ./ 在/ 基于/ DHT/ 的/ 完全/ 分布式/ 拓扑/ 中/ ,/ 资源/ 索引/ 的/ 存放/ 具有/ 严格/ 的/ 限制/ ,/ 节点/ 和/ 资源/ 标识/ 都/ 通过/ 一致性/ Hash/ 函数/ 映射/ 为/ 数字/ ID/ 标识/ ,/ 资源/ 索引/ 存放/ 在/ 节点/ ID/ 标识/ 与/ 该/ 资源/ ID/ 标识/ 最/ 相近/ 的/ 节点/ 上/ ,/ 典型/ 的/ DHT/ 系统/ 包括/ Chord/ [/ 3/ ]/ 、/ CAN/ [/ 4/ ]/ 、/ Pastry/ [/ 5/ ]/ 、/ Tapestry/ [/ 6/ ]/ 、/ Kademlia/ [/ 7/ ]/ 等/ ./ 在/ 完全/ 分布式/ 结构化/ 系统/ 中/ ,/ 查询/ 在/ O/ (/ logN/ )/ ①/ ②/ limewire/ ./ com/ // developer/ // gnutella/ _/ protocol/ _/ 0.4/ ./ pdfPage3/ 上限/ 内/ 可以/ 完成/ ,/ 可扩展性/ 较/ 好/ ,/ 不足之处/ 在于/ DHT/ 机制/ 只/ 支持/ 精确/ 查询/ ,/ 不/ 适应/ 动态性/ 很强/ 的/ P2P/ 网络/ ,/ 限制/ 了/ 这种/ 结构/ 在/ 文件共享/ 等/ 领域/ 的/ 应用/ ./ 一类/ 常数/ 度数/ 的/ 结构化/ 系统/ ,/ 如/ Viceroy/ [/ 8/ ]/ 、/ Koorde/ [/ 9/ ]/ 、/ Cycloid/ [/ 10/ ]/ 等/ 对/ 结构化/ 系统/ 进行/ 了/ 改进/ ./ 在/ 常数/ 度数/ 结构/ 中/ ,/ 路由/ 状态/ 数是/ 固定/ 的/ ,/ 不随/ 网络/ 节点/ 规模/ 增大/ 而/ 变化/ ,/ 因而/ 可以/ 减少/ 拓扑/ 维护/ 成本/ ,/ 但/ 这些/ 系统/ 并/ 不能/ 解决/ 结构化/ 拓扑/ 对/ 动态性/ 和/ 模糊/ 查询/ 支持/ 差/ 的/ 问题/ ./ 文献/ [/ 11/ ]/ 提出/ 一种/ 混合式/ 结构/ ,/ 即/ 在/ 非/ 结构化/ 拓扑/ 上/ 建立/ 查找/ 覆盖网/ ,/ 在/ 结构化/ 拓扑/ 上/ 建立/ 索引/ 覆盖网/ ,/ 该/ 结构/ 采用/ 单层/ 结构/ ,/ 不/ 具备/ 超级/ 节点/ 拓扑/ 性能/ 高/ 、/ 稳定性/ 好/ 等/ 优点/ ,/ 在/ 动态性/ 强/ 的/ P2P/ 环境/ 下/ 也/ 面临/ 结构化/ 索引/ 维护/ 成本/ 过高/ 的/ 问题/ ./ (/ 3/ )/ 超级/ 节点/ 拓扑/ ./ 超级/ 节点/ 拓扑/ 按/ 超级/ 节点/ 层/ 是否/ 支持/ DHT/ 路由/ 分为/ 非/ 结构化/ 超级/ 节点/ 拓扑/ 和/ 结构化/ 超级/ 节点/ 拓扑/ ./ 前者/ 包括/ Gnutella0/ ./ 6/ 版/ ①/ 、/ Fasttrack/ ②/ 协议/ 等/ ,/ 系统/ 分为/ 两层/ ,/ 上层/ 由/ 能力/ 较强/ 的/ 节点/ 组成/ ,/ 称为/ 超级/ 节点/ ,/ 下层/ 是/ 普通/ 节点/ ,/ 普通/ 节点/ 不/ 参与/ 系统/ 的/ 路由/ ,/ 查询/ 通过/ 超级/ 节点/ 进行/ ./ 由于/ 减少/ 了/ 参与/ 路由/ 的/ 节点/ 数/ ,/ 这/ 类/ 超级/ 节点/ 结构/ 比/ 传统/ 的/ 非/ 结构化/ 拓扑/ 具有/ 更好/ 的/ 查询/ 性能/ ,/ 但/ 路由/ 长度/ 和/ 查询/ 结果/ 仍/ 具有/ 不确定性/ ./ 后/ 一类/ 超级/ 节点/ 结构/ 在/ 超级/ 节点/ 层/ 支持/ DHT/ 机制/ ,/ 叶/ 节点/ 间/ 可以/ 采用/ DHT/ ,/ 如/ 文献/ [/ 12/ ]/ ,/ 也/ 可不/ 采用/ DHT/ ,/ 而是/ 直接/ 连/ 到/ 超级/ 节点/ ,/ 叶/ 节点/ 通过/ 超级/ 节点/ 发布/ 和/ 查询/ 内容/ ,/ 如/ IS/ -/ P2P/ [/ 13/ ]/ 模型/ ./ 在/ 结构化/ 超级/ 节点/ 拓扑/ 中/ ,/ 由/ 超级/ 节点/ 构成/ 的/ 路由/ 层/ 比/ 由/ 完全/ 分布式/ 结构化/ 拓扑/ 中/ 所有/ 节点/ 构成/ 的/ 路由/ 层/ 更加/ 稳定/ ./ 同时/ ,/ 由于/ 参与/ 路由/ 的/ 超级/ 节点/ 数量/ 只/ 占/ 全部/ 节点/ 的/ 一部分/ ,/ 因而/ 查找/ 路径/ 长度/ 更/ 短/ ./ 不足之处/ 在于/ 超级/ 节点/ 一旦/ 失效/ 带来/ 的/ 影响/ 更大/ ,/ 不仅/ 需要/ 修复/ 拓扑/ ,/ 结构化/ 资源/ 索引/ 也/ 需要/ 重新/ 发布/ 或/ 进行/ 转移/ ,/ 该/ 结构/ 也/ 不/ 支持/ 模糊/ 查询/ ./ 与/ 现有/ 超级/ 节点/ 拓扑/ 不同/ ,/ 本文/ 提出/ 一种/ 新颖/ 的/ 基于/ 分层/ 象限/ 空间/ 的/ P2P/ 超级/ 节点/ 拓扑/ Quad/ ,/ 它/ 将/ 非/ 结构化/ 和/ 结构化/ 两种/ 超级/ 节点/ 拓扑/ 优点/ 结合/ 起来/ ,/ 其/ 具体/ 特征/ 如下/ :/ (/ 1/ )/ 将/ 分层/ 象限/ 空间/ 运用/ 于/ 超级/ 节点/ 拓扑/ 构造/ ./ 象限/ 空间/ 的/ 每个/ 位置/ 都/ 有/ 唯一/ 的/ 数字/ 标识/ ,/ 称为/ 位置/ 标识/ ,/ 超级/ 节点/ 在/ 拓扑/ 中/ 的/ 位置/ 不再/ 由/ 节点/ ID/ 标识/ 决定/ ,/ 而是/ 由/ 位置/ 标识/ 确定/ ./ 这样/ ,/ Quad/ 既/ 可以/ 实现/ 在/ 超级/ 节点/ 层/ 按/ 资源/ ID/ 进行/ 定位/ ,/ 又/ 可以/ 避免/ 超级/ 节点/ 失效/ 给/ 拓扑/ 带来/ 很大/ 影响/ ,/ 因为/ 新/ 的/ 替换/ 超级/ 节点/ 与/ 失效/ 超级/ 节点/ 具有/ 相同/ 的/ 位置/ 标识/ ,/ 拓扑/ 易于/ 修复/ ./ 另外/ 分层/ 象限/ 空间/ 使/ 超级/ 节点/ 拓扑/ 具有/ 常数/ 度数/ 特点/ ,/ 维护/ 成本低/ ./ (/ 2/ )/ 支持/ 模糊/ 查询/ 和/ 数据/ 定位/ 两种/ 路由/ 方式/ ./ 分层/ 象限/ 空间/ 类似/ 于/ 树形/ 结构/ ,/ 支持/ 广度/ 优先/ (/ BFS/ )/ 和/ 深度/ 优先/ (/ DFS/ )/ 遍历/ ,/ 另外/ 分层/ 象限/ 空间/ 本身/ 又/ 是/ 一个/ 数值/ 空间/ ,/ 所以/ Quad/ 既/ 可以/ 支持/ 泛洪/ 和/ 随机/ 游走/ 等/ 模糊/ 查询方法/ ,/ 又/ 可以/ 按/ 资源/ ID/ 进行/ 数据/ 定位/ ./ (/ 3/ )/ 拓扑/ 具有/ 良好/ 的/ 负载/ 均衡性/ 和/ 容错/ 机制/ ./ Quad/ 具有/ 自/ 适应/ 的/ 调整/ 、/ 分裂/ 与/ 合并/ 等/ 负载/ 均衡/ 机制/ ,/ 超级/ 节点/ 可以/ 向/ 不同/ 层次/ 的/ 多个/ 邻居/ 超级/ 节点/ 转移/ 负载/ ./ 在/ 容错性/ 方面/ ,/ Quad/ 具有/ 周期性/ 检测/ 和/ 冗余/ 路径/ 两种/ 方法/ ,/ 在/ 动态性/ 强/ 的/ 环境/ 中/ 具有/ 容错/ 能力/ ./ 3Quad/ 网络/ 模型/ 定义/ 定义/ 1/ ./ 象限/ 空间/ 是/ 一种/ 二维/ 平面/ 空间/ ,/ 以/ 原点/ 为/ 基准/ ,/ 横轴/ 和/ 纵轴/ 将/ 平面/ 划分/ 成/ 4/ 个/ 象限/ ,/ 从/ 原点/ 的/ 右/ 轴/ 开始/ ,/ 象限/ 空间/ 按/ 逆时针/ 方向/ 分为/ 一/ 、/ 二/ 、/ 三/ 和/ 四/ 象限/ ./ 定义/ 2/ ./ 分层/ 象限/ 空间/ 是/ 象限/ 空间/ 的/ 扩展/ ,/ 象限/ 空间/ 的/ 每个/ 象限/ 可/ 继续/ 划分/ 为/ 4/ 个子/ 象限/ ,/ 逐层/ 划分/ ,/ 就/ 形成/ 分层/ 象限/ 空间/ ./ 分层/ 象限/ 空间/ 思想/ 借鉴/ 了/ 树形/ 结构/ 的/ 层次/ 概念/ ,/ 但是/ 两者/ 并不相同/ ./ 与/ 树形/ 结构/ 相比/ ,/ 分层/ 象限/ 空间/ 在/ 拓扑/ 构造/ 上/ 具有/ 两点/ 优势/ :/ 首先/ ,/ 象限/ 空间/ 比/ 树形/ 结构/ 具有/ 更/ 直观/ 的/ 方向/ 标识/ 能力/ ,/ 无论是/ 按序/ 构造/ 还是/ 随机/ 构造/ 每个/ 象限/ 位置/ 方向/ 都/ 非常/ 清晰/ ;/ 其次/ ,/ 在/ 树形/ 结构/ 中/ ,/ 上/ 下层/ 节点/ 之间/ 是/ 一对/ 多/ 关系/ ,/ 标准/ 的/ 树形/ 结构/ 中/ 节点/ 没有/ 同层/ 邻居/ ./ 而/ 在/ 分层/ 象限/ 空间/ 中/ ,/ 上/ 下层/ 节点/ 之间/ 包含/ 一对/ 多/ 和/ 多/ 对/ 多/ 两种/ 关系/ ,/ 节点/ 有/ 同层/ 邻居/ ,/ 因而/ 分层/ 象限/ 空间/ 比/ 树形/ 结构/ 更/ 易于/ 实现/ 负载/ 均衡/ 和/ 容错/ ./ Quad/ 系统/ 中/ 超级/ 节点/ 按/ 分层/ 象限/ 空间/ 进行/ 组织/ ,/ 如图/ 1/ 所示/ ./ 象限/ 中心点/ A0/ 有/ A1/ 、/ A12/ 、/ A2/ 、/ A23/ 、/ A3/ 、/ A34/ 、/ A4/ 和/ A418/ 个/ 邻居/ ,/ 每个/ 邻居/ 节点/ 包含/ 一个/ 方向/ ,/ 按/ 逆时针/ 顺序/ 分别/ 表示/ 为/ 二进制/ 形式/ 的/ (/ 000/ ,/ 001/ ,/ 010/ ,/ 011/ ,/ 100/ ,/ 101/ ,/ 110/ ,/ 111/ )/ 或/ 八进制/ 形式/ 的/ 0/ ~/ 7/ ./ 第/ 1/ 层/ 包含/ A0/ 、/ A1/ 、/ A2/ 、/ A3/ 、/ A45/ 个/ 超级/ 节点/ ,/ ①/ ②/ forge/ ./ net/ // src/ // rfc/ -/ 0/ _/ 6/ -/ draft/ ./ htmlPage4/ 它们/ 互为/ 同层/ 邻居/ ,/ A0/ 包含/ A12/ 、/ A23/ 、/ A34/ 、/ A414/ 个/ 位于/ 第/ 2/ 层/ 的/ 下层/ 邻居/ ,/ 第一/ 象限/ 的/ A1/ 包含/ B1/ 、/ B2/ 、/ B3/ 、/ B4/ 、/ A125/ 个/ 位于/ 第/ 2/ 层/ 的/ 下层/ 邻居/ ,/ 其余/ 3/ 个/ 象限/ 类似/ ./ 在/ Quad/ 象限/ 空间/ 中/ ,/ 每个/ 位置/ 的/ 标图/ 1Quad/ 超级/ 节点/ 结构/ 定义/ 3/ ./ 超级/ 节点/ 定义/ 为/ 七元/ 组/ S/ =/ (/ I/ ,/ PI/ ,/ C/ ,/ D/ ,/ R/ ,/ L/ ,/ Y/ )/ ,/ I/ 是/ 超级/ 节点/ ID/ 标识/ ,/ PI/ 为/ 超级/ 节点/ 位置/ 标识/ ,/ 当/ 超级/ 节点/ 离开/ 时/ ,/ 该/ 标识/ 分配/ 给/ 处于/ 相同/ 位置/ 的/ 新/ 超级/ 节点/ 使用/ ./ C/ 表示/ 节点/ 容量/ ,/ D/ 为/ 节点/ 当前/ 负载/ ,/ R/ 为/ 节点/ 路由表/ ,/ L/ 表示/ 该/ 节点/ 所/ 处/ 层次/ ,/ 从/ 上层/ 到/ 下层/ 层次/ 值/ 依次/ 增加/ ./ Y/ 为/ 节点/ 类型/ ,/ 超级/ 节点/ 分为/ 两种/ 类型/ ,/ 象限/ 横轴/ 和/ 纵轴/ 的/ 交点/ 称为/ 中心/ 超级/ 节点/ CSP/ (/ CenterSuper/ -/ Peer/ )/ ,/ 横轴/ 和/ 纵轴/ 的/ 4/ 个/ 端点/ 构成/ 4/ 个端/ 超级/ 节点/ BSP/ (/ BoundarySuper/ -/ Peer/ )/ ./ 定义/ 4/ ./ 叶/ 节点/ 定义/ 为/ 四元组/ F/ =/ (/ I/ ,/ C/ ,/ Y/ ,/ S/ )/ ,/ I/ 为叶/ 节点/ ID/ 标识/ ,/ C/ 表示/ 节点/ 容量/ ,/ Y/ 为叶/ 节点/ 类型/ ,/ 叶/ 节点/ 分为/ 两类/ :/ 一类/ 是/ 普通/ 叶/ 节点/ ,/ 另一类/ 是/ 候选/ 超级/ 节点/ ./ 每个/ 叶/ 节点/ 通过/ 一个/ 超级/ 节点/ 加入/ 到/ 网络/ 中/ ,/ 超级/ 节点/ 按照/ 能力/ 和/ 在线/ 时间/ 等/ 综合/ 因素/ 动态/ 从/ 普通/ 叶/ 节点/ 中/ 选拔/ 最/ 优秀/ 的/ 叶/ 节点/ 作为/ 候选/ 超级/ 节点/ ,/ 候选/ 超级/ 节点/ 对父/ 超级/ 节点/ 路由表/ 和/ 资源/ 索引/ 进行/ 备份/ ,/ 并/ 定期/ 和/ 超级/ 节点/ 交换/ 信息/ ,/ 以便/ 在/ 超级/ 节点/ 失效/ 时能/ 接替/ 其/ 位置/ ./ S/ 表示/ 超级/ 节点/ ,/ 是/ 叶/ 节点/ 的/ 网络/ 接入点/ ./ 识值/ 是/ 唯一/ 的/ ,/ 由/ A0/ (/ 不/ 包含/ A0/ )/ 到/ 该/ 节点/ 路径/ 包含/ 的/ 节点/ 方向/ 构成/ ,/ 如/ A12/ 位置/ 标识/ 为/ 001/ ,/ B1/ 位置/ 标识/ 为/ 001000/ ,/ A0/ 可以/ 设/ 为/ 一个/ 特定/ 的/ 标识/ 并/ 在/ 系统/ 中/ 作为/ 一个/ 特例/ 进行/ 处理/ ./ 定义/ 5/ ./ 超级/ 节点/ S/ 的/ 路由表/ 定义/ 为/ 二元/ 组/ R/ =/ (/ NR/ ,/ QR/ )/ ,/ NR/ 是/ 邻居/ 路由表/ ,/ 记录/ 超级/ 节点/ 与/ 同层/ 、/ 下层/ 和/ 上层/ 邻居/ 超级/ 节点/ 之间/ 的/ 路由/ 关系/ ./ QR/ 是/ 象限/ 路由表/ ,/ 支持/ 顶层/ 象限/ 不/ 相同/ 的/ 超级/ 节点/ 之间/ 定位/ ./ 定义/ 6/ ./ 超级/ 节点/ S/ 的/ 邻居/ 路由表/ 定义/ 为/ 三元组/ NR/ =/ (/ SNR/ ,/ CNR/ ,/ PNR/ )/ ,/ SNR/ 是/ 同层/ 超级/ 节点/ 邻居/ 路由表/ ,/ 其/ 表项/ 由/ 同一/ 层次/ 的/ CSP/ 和/ BSP/ 构成/ ;/ CNR/ 是/ 下层/ 超级/ 节点/ 邻居/ 路由表/ ,/ 表项/ 由/ 下层/ 中心/ 超级/ 节点/ (/ CCSP/ )/ 和/ 下层/ 端/ 超级/ 节点/ (/ CBSP/ )/ 构成/ ;/ PNR/ 是/ 上层/ 超级/ 节点/ 邻居/ 路由表/ ,/ 表项/ 包含/ 上层/ 中心/ 超级/ 节点/ (/ PCSP/ )/ 和/ 上层/ 端/ 超级/ 节点/ (/ PBSP/ )/ 两种/ 类型/ ./ 以图/ 1/ 为例/ ,/ 中心/ 超级/ 节点/ A12/ 的/ 邻居/ 路由表/ 为/ SNR/ (/ B1/ ,/ B2/ ,/ B3/ ,/ B4/ )/ ,/ CNR/ (/ B12/ ,/ B23/ ,/ B34/ )/ ,/ PNR/ (/ A0/ ,/ A1/ )/ ./ 端/ 超级/ 节点/ B1/ 的/ 路由表/ 为/ SNR/ (/ A12/ ,/ B2/ ,/ B3/ ,/ B4/ )/ ,/ CNR/ (/ C1/ ,/ C2/ ,/ C3/ ,/ C4/ ,/ B12/ )/ ,/ PNR/ (/ A1/ )/ ./ 在/ Quad/ 中/ ,/ 超级/ 节点/ 邻居/ 路由表/ 中/ 节点/ 数/ 上限/ 为/ 10/ ,/ 不随/ 网络/ 规模/ 增大/ 而/ 同步/ 变化/ ./ NR/ 中用/ 索引/ 0/ ~/ 9/ 标识/ 10/ 项/ 邻居/ 节点/ 信息/ ,/ Page5/ 如表/ 1/ 所示/ ./ CSP/ 用/ 索引/ (/ 0/ ,/ 2/ ,/ 4/ ,/ 6/ )/ 标识/ 同层/ 的/ BSP/ ,/ BSP/ 用/ 索引/ (/ 0/ ,/ 2/ ,/ 4/ ,/ 6/ )/ 标识/ CSP/ 和/ 其它/ 3/ 个/ BSP/ ,/ 其中/ 该/ BSP/ 节点/ 自身/ 方向/ 对应/ 的/ 索引/ 用来/ 存储/ CSP/ ;/ CSP/ 的/ CNR/ 为/ 4/ 个/ 象限/ 的/ 子/ 中心/ 超级/ 节点/ (/ CCSP/ )/ ,/ 索引/ 为/ (/ 1/ ,/ 3/ ,/ 5/ ,/ 7/ )/ ,/ BSP/ 的/ CNR/ 为/ 对应/ 象限/ 的/ 4/ 个子/ 端/ 超级/ 节点/ (/ CBSP/ )/ 和子/ 中心/ 超级/ 节点/ ,/ 用/ 索引/ (/ 1/ ,/ 3/ ,/ 5/ ,/ 7/ ,/ 8/ )/ 表示/ ;/ CSP/ 的/ PNR/ 包含/ PCSP/ 和/ PBSP/ ,/ 用/ 路由/ 索引/ 8/ 和/ 9/ 表示/ ,/ BSP/ 的/ PNR/ 只/ 包含/ PBSP/ ,/ 用/ 路由/ 索引/ 9/ 表示/ ./ 容易/ 看出/ ,/ CSP/ 的/ 4/ 个/ 同层/ BSP/ 和/ 4/ 个/ 下层/ CCSP/ 的/ 索引/ 号/ 与/ 这些/ 节点/ 的/ 方向/ 是/ 一致/ 的/ ,/ 所以/ 超级/ 节点/ 的/ 位置/ 标识/ (/ PI/ )/ 由/ 距离/ 其/ 最近/ 的/ CSP/ 位置/ 标识/ 加/ 节点/ 自身/ 所/ 包含/ 的/ 方向/ 构成/ ./ 超级/ 节点/ SNRCNRPNRCSP0/ ,/ 2/ ,/ 4/ ,/ 61/ ,/ 3/ ,/ 5/ ,/ 78/ ,/ 9BSP0/ ,/ 2/ ,/ 4/ ,/ 61/ ,/ 3/ ,/ 5/ ,/ 7/ ,/ 89/ 定义/ 7/ ./ 超级/ 节点/ S/ 的/ 象限/ 路由表/ 定义/ 为/ 数组/ QR/ =/ QRA/ [/ i/ ]/ ,/ 0/ / i/ </ 3/ ,/ 其中/ 每/ 一个/ 数组/ 项/ 表示/ 为/ 三元组/ QRAi/ =/ (/ Qi/ ,/ S1/ ,/ S2/ )/ ,/ 满足/ :/ (/ 1/ )/ shl/ (/ PIs/ ,/ Qi/ )/ =/ 0/ ;/ (/ 2/ )/ (/ Ls1/ </ Ls2/ )/ ∧/ (/ Ls2/ / Ls/ )/ ./ 其中/ ,/ 0/ / Qi/ </ 4/ ,/ 标识/ 4/ 个/ 顶层/ 象限/ ./ shl/ 判断/ 超级/ 节点/ S/ 的/ 位置/ 标识/ 与/ Qi/ 匹配/ 象限/ 的/ 长度/ ./ 方法/ 是/ 取/ S/ 位置/ 标识/ 中/ 第/ 1/ 组/ 3/ 个/ 二进制位/ 的/ 前/ 二位/ 值/ 和/ Qi/ 进行/ 比较/ ,/ 0/ 表示/ 不/ 相等/ ./ 条件/ (/ 1/ )/ 表明/ Qi/ 是/ 与/ S/ 顶层/ 象限/ 不/ 相同/ 的/ 其它/ 3/ 个/ 象限/ ,/ 条件/ (/ 2/ )/ 表示/ 每个/ 象限/ 路由表/ 表项/ 最多为/ 两个/ 超级/ 节点/ (/ 可以/ 为空/ )/ ,/ 这/ 两个/ 超级/ 节点/ 处于/ 不同/ 层/ 并且/ 其/ 层次/ 都/ 不/ 超过/ S/ 的/ 层次/ ./ 因为/ 顶层/ 象限/ 只有/ 4/ 个/ ,/ 所以/ 超级/ 节点/ 象限/ 路由表/ (/ QR/ )/ 表项/ 只/ 需/ 记录/ 属于/ 其它/ 3/ 个/ 顶层/ 象限/ (/ 包括/ 顶层/ 象限/ 的/ 下层/ 象限/ )/ 内/ 的/ 超级/ 节点/ 即可/ ,/ 由于/ 每个/ 顶层/ 象限/ 内/ 的/ 表项/ 最/ 多/ 包含/ 两个/ 节点/ ,/ 所以/ 象限/ 路由表/ 最/ 多/ 包含/ 6/ 项/ ./ Quad/ 对于/ 象限/ 路由表/ 的/ 节点/ 要求/ 并/ 不/ 严格/ ,/ 因为/ 只/ 需要/ 知道/ 特定/ 象限/ 的/ 一个/ 节点/ 就/ 可以/ 定位/ 到/ 该/ 象限/ ,/ 取/ 不同/ 层/ 并且/ 层次/ 与/ 本/ 节点/ 相近/ 的/ 两个/ 节点/ 是/ 为了/ 降低/ 超级/ 节点/ 之间/ 路由/ 项/ 的/ 重复/ 率/ ./ 另外/ ,/ 将/ 每个/ 象限/ 的/ 路由表/ 项数/ 设为/ 2/ 是/ 为了/ 增加/ 系统/ 的/ 容错性/ ./ Quad/ 路由表/ 的/ 最优/ 值/ 设计/ 可以/ 根据/ 具体/ 应用/ 在/ 路由/ 性能/ 和/ 维护/ 代价/ 之间/ 进行/ 权衡/ ,/ 增加/ 路由表/ 项会/ 缩短/ 路由/ 长度/ ,/ 但会/ 增加/ 系统维护/ 开销/ ./ 定义/ 8/ ./ Quad/ 网络/ 模型/ 定义/ 为/ 四元组/ M/ =/ (/ T/ ,/ V/ ,/ E/ ,/ X/ )/ ,/ 如图/ 2/ 所示/ ./ T/ 表示/ 拓扑/ 逻辑/ 结构/ ,/ Quad/ 采用/ 两层/ 拓扑/ 结构/ ,/ 从/ 逻辑/ 上/ 分为/ 超级/ 节点/ 层/ 和/ 叶/ 节点/ 层/ ./ V/ 为/ 节点/ 集/ ,/ 由/ 超级/ 节点/ 和/ 叶/ 节点/ 组成/ ,/ 超级/ 节点/ 是/ 拓扑/ 的/ 核心/ ,/ 担负/ 着/ 系统/ 的/ 路由/ 任务/ ,/ 并/ 负责/ 为叶/ 节点/ 建立/ 和/ 发布/ 索引/ ,/ 叶/ 节点/ 通过/ 超级/ 节点/ 进行/ 查询/ ./ E/ 为/ 拓扑/ 路由/ 关系/ ,/ 由/ 所有/ 超级/ 节点/ 路由表/ 构成/ 的/ 连通/ 关系/ 组成/ ./ X/ 为/ 资源/ 索引/ ,/ 包含/ 非/ 结构化/ 和/ 结构化/ 索引/ 两个/ 部分/ ./ 定理/ 1/ ./ 在/ 完全/ Quad/ 系统/ 中/ ,/ 超级/ 节点/ 层/ 的/ 最大/ 层次/ 为/ log43N/ 证明/ ./ 在/ 完全/ Quad/ 系统/ 中/ ,/ 超级/ 节点/ 在/ 各/ 象限/ 均匀分布/ 并且/ 各层/ 象限/ 空间/ 位置/ 均/ 已/ 被/ 分配/ ./ 在/ 这种/ 情况/ 下/ ,/ 超级/ 节点/ 层/ 的/ 第/ 1/ 层/ 包括/ 1/ 个/ 中心/ 超级/ 节点/ 和/ 4/ 个端/ 超级/ 节点/ ,/ 即/ 5/ 个/ 超级/ 节点/ ,/ 第/ 2/ 层/ 每个/ 子/ 象限/ 包括/ 5/ 个/ 超级/ 节点/ ,/ 依次/ 类推/ ,/ 每层/ 超级/ 节点/ 数/ 可以/ 表示/ 为/ 4i/ -/ 1/ ×/ 5/ ,/ i/ 为/ 超级/ 节点/ 所在/ 层次/ ./ 设/ 超级/ 节点/ 总数/ 为/ N/ ,/ 超级/ 节点/ 最大/ 层次/ 为/ ML/ ,/ 则/ N/ 用/ 公式/ 表示/ 为/ N/ =/ ∑/ ML/ =/ 5/ +/ 4/ ×/ 5/ +/ 42/ ×/ 5/ +/ 43/ ×/ 5/ +/ …/ +/ 4ML/ -/ 1/ ×/ 5/ =/ 5/ ×/ 1/ -/ 4ML/ 对式/ (/ 1/ )/ 进行/ 移项/ 变换/ ,/ 得/ 4Quad/ 路由/ Quad/ 路由/ 包括/ 非/ 结构化/ 和/ 结构化/ 两种/ 方式/ ./ 在/ 非/ 结构化/ 路由/ 中/ ,/ Quad/ 支持/ 泛洪/ 和/ 随机/ 游走/ 等/ 模糊/ 查找/ 方法/ ./ 对于/ 泛洪/ 方式/ 来说/ ,/ 由于/ 它/ 采用/ 分层/ 结构/ ,/ 可以/ 消除/ Gnutella/ 协议/ 中/ 存在/ 的/ 消息/ 重复/ 问/ Page6/ 题/ ./ 在/ 随机/ 游走/ 查找/ 方法/ 上/ ,/ Quad/ 可以/ 采用/ BloomFilter/ [/ 14/ ]/ 方式/ 建立/ 压缩/ 索引/ 并/ 在/ 一定/ 层次/ 内/ 共享/ ,/ 能够/ 减少/ 消息传递/ 到/ 底层/ 时/ 的/ 回溯/ 成本/ 并/ 缩短/ 查找/ 路径/ 长度/ ./ 另外/ ,/ 由于/ Quad/ 同时/ 支持/ 超级/ 节点/ 结构/ 和/ 结构化/ 特性/ ,/ 它/ 可以/ 将/ 具有/ 相似/ 主题/ 资源/ 的/ 节点/ 更好/ 地/ 聚集/ 在/ 一起/ ./ 在/ 结构化/ 路由/ 方面/ ,/ Quad/ 将/ 资源/ 标识/ (/ 如/ 文件名称/ )/ 通过/ 一致性/ Hash/ 函数/ (/ 如/ SHA/ -/ 1/ 等/ 散列/ 算法/ )/ 映射/ 为/ 资源/ ID/ 标识/ ./ 它/ 和/ 节点/ 的/ 位置/ 标识/ 都/ 是/ 数字/ ID/ 标识/ ,/ 资源/ 通过/ ID/ 标识/ 发布/ 到/ 分层/ 象限/ 空间/ 内/ 的/ 超级/ 节点/ ,/ 其中/ 节点/ 位置/ 标识/ 与/ 资源/ ID/ 标识/ 匹配/ 象限/ 最长/ 的/ 超级/ 节点/ 存放/ 该/ 资源/ 索引/ ./ 在/ 查找/ 时/ 超级/ 节点/ 通过/ 查询/ 路由表/ 来/ 逐步/ 实现/ 定位/ ./ 当/ 超级/ 节点/ (/ 设为/ S/ )/ 接到/ 叶/ 节点/ 资源/ 发布/ 或/ 查询/ 请求/ 后/ ,/ 首先/ 判断/ 自身/ 的/ 位置/ 标识/ 与/ 资源/ ID/ 标识/ (/ 设为/ K/ )/ 是否/ 属于/ 同一/ 顶层/ 象限/ ,/ 如果/ 不是/ ,/ 则/ 通过/ 象限/ 路由表/ 将/ 请求/ 传递/ 给与/ K/ 顶层/ 象限/ 相同/ 且/ 象限/ 序列/ 匹配/ 最长/ 的/ 超级/ 节点/ ./ 如果/ 属于/ 同一/ 顶层/ 象限/ ,/ 则/ 先/ 定位/ 到/ 位置/ 标识/ 与/ K/ 象限/ 序列/ 最长/ 交集/ 所/ 对应/ 的/ 超级/ 节点/ ,/ 再/ 从/ 该/ 节点/ 按照/ 邻居/ 路由表/ 逐层/ 向下/ 定位/ 到/ 目标/ 超级/ 节点/ ./ 如果/ S/ 是/ 图/ 1/ 中/ 象限/ 中心点/ A0/ ,/ 则/ 直接/ 向/ 下层/ 定位/ ,/ 在/ 路由/ 中/ 属于/ 特例/ ./ 因为/ 其它/ 超级/ 节点/ 的/ 象限/ 路由表/ 中均/ 不/ 含/ A0/ ,/ 所以/ 只有/ A0/ 的/ 叶/ 节点/ 发布/ 或/ 查询/ 资源/ 时才/ 会/ 出现/ S/ 为/ A0/ 的/ 情况/ ,/ 为/ 节省/ 篇幅/ 文中/ 不再/ 考虑/ 该/ 特例/ ./ Quad/ 具体/ 路由/ 过程/ 见/ 算法/ 1/ ,/ 为/ 叙述/ 方便/ ,/ 这里/ 先/ 定义/ 算法/ 中/ 用到/ 的/ 缩略语/ ,/ 如表/ 2/ 所示/ ./ 符号/ shl/ (/ PIs/ ,/ K/ )/ S/ 位置/ 标识/ 与/ K/ 象限/ 序列/ 匹配/ 长度/ DksFWD/ (/ S/ ,/ n/ )/ 同一/ 顶层/ 象限/ 内/ ,/ 向上/ 定位/ 到/ S/ 位置/ 标识/ 与/ KGN/ (/ S/ ,/ g/ )/ 取/ S/ 邻居/ 路由表/ 中/ g/ 值/ 索引/ 的/ 超级/ 节点/ GKGlK/ 表示/ GK/ 中/ 的/ 第/ l/ 个/ 分组/ Ls/ 超级/ 节点/ S/ 的/ 层次/ 象限/ 序列/ 表示/ 数字/ ID/ 标识/ (/ 如/ 位置/ 标识/ 和/ 资源/ ID/ 标识/ )/ 中/ 包含/ 的/ 有序/ 象限/ 组/ ./ 将/ ID/ 标识/ 按/ 3/ 个/ 二进制位/ 为/ 一组/ 进行/ 划分/ ,/ 每/ 一组/ 包含/ 1/ 个/ 象限/ ,/ 用前/ 两个/ 二进制位/ 计算/ 象限/ 值/ ./ 例如/ 对于/ 标识/ (/ 001101010/ )/ ,/ 所/ 划分/ 的/ 3/ 个/ 二进制位/ 组为/ (/ 001/ ,/ 101/ ,/ 010/ )/ ,/ 对应/ 的/ 象限/ 序列/ 为/ (/ 021/ )/ ./ 表/ 2/ 中/ shl/ 含义/ 与/ 定义/ 7/ 中/ shl/ 相同/ ,/ 用来/ 判断/ 位置/ 标识/ 和/ K/ 象限/ 序列/ 匹配/ 长度/ ./ Ls/ 值/ 可以/ 通过/ 位置/ 标识/ 计算/ 得出/ ,/ 方法/ 如下/ :/ 首先/ 将/ 节点/ 位置/ 标识/ 按/ 3/ 个/ 二进制位/ 为/ 一组/ 进行/ 划分/ ,/ 计算/ 分成/ 的/ 组数/ ,/ 在/ 此基础/ 上/ ,/ 如果/ 位置/ 标识/ 的/ 末位/ 为/ 1/ ,/ 说明/ 该/ 节点/ 为/ CSP/ ,/ 层次/ 加/ 1/ ./ 如果/ 末尾/ 为/ 0/ ,/ 则/ 节点/ 为/ BSP/ ,/ 层次/ 不再/ 加/ 1/ ./ 以图/ 1/ 中/ B12/ (/ 001001/ )/ 和/ B1/ (/ 001000/ )/ 为例/ ,/ 由于/ B12/ 位置/ 标识/ 划分/ 为/ 2/ 组/ ,/ 并且/ 末位/ 为/ 1/ ,/ 表明/ B12/ 位于/ 第/ 3/ 层/ ,/ 而/ B1/ 位置/ 标识/ 划分/ 为/ 2/ 组/ ,/ 并且/ 末位/ 为/ 0/ ,/ 所以/ B1/ 位于/ 第/ 2/ 层/ ./ 算法/ 1/ ./ ProcedureRouting/ (/ S/ ,/ K/ )/ ./ 1/ ./ l/ =/ shl/ (/ PIs/ ,/ K/ )/ ;/ // // 计算/ 象限/ 序列/ 匹配/ 长度/ 2/ ./ if/ (/ l/ =/ =/ 0/ )/ {/ // // 值为/ 0/ ,/ 表明/ 不/ 在/ 同一/ 顶层/ 象限/ 3/ ./ S/ =/ Dks/ ;/ l/ =/ shl/ (/ PIs/ ,/ K/ )/ ;/ }/ 4/ ./ if/ (/ S/ ∈/ CSP/ )/ {/ // // S/ 是/ 中心/ 超级/ 节点/ CSP5/ ./ S/ =/ FWD/ (/ S/ ,/ Ls/ -/ l/ -/ 1/ )/ ;/ }/ 6/ ./ else/ {/ 7/ ./ S/ =/ FWD/ (/ S/ ,/ Ls/ -/ l/ )/ ;/ }/ // // 从/ BSP/ 传递/ 时多/ 一/ 跳/ 8/ ./ while/ (/ l/ </ GK/ )/ {/ 9/ ./ if/ (/ (/ S1/ =/ GN/ (/ S/ ,/ Gl/ +/ 110/ ./ S/ =/ S1/ ;/ l/ ++/ ;/ }/ 11/ ./ elseif/ (/ (/ S2/ =/ GN/ (/ S/ ,/ Gl/ +/ 1K0/ )/ )/ !/ =/ null/ )/ {/ 12/ ./ Target/ =/ S2/ ;/ Break/ ;/ }/ 13/ ./ else/ {/ // // 下层/ CSP/ 和/ 同层/ BSP/ 都/ 不/ 存在/ 14/ ./ Target/ =/ S/ ;/ Break/ ;/ }/ // // 目标/ 节点/ 为/ S/ 自身/ 15/ ./ }/ 定理/ 2/ ./ 在/ 完全/ Quad/ 系统/ 中/ ,/ 从/ 任意/ 一个/ 超级/ 节点/ 珚/ S/ 出发/ ,/ 按照/ 资源/ ID/ 标识/ (/ 设为/ K/ )/ 定位/ 到/ 目标/ 节点/ 的/ 最大/ 路径/ 长度/ RLmax/ 为/ Ls/ -/ 2l/ +/ ML/ +/ 1/ ,/ 平均/ 路径/ 长度/ RLavg/ 为/ 3MLS/ 层次/ ,/ l/ 为/ shl/ (/ PIs/ ,/ K/ )/ ,/ 表示/ S/ 位置/ 标识/ 与/ K/ 象限/ 序列/ 匹配/ 长度/ ,/ ML/ 为式/ (/ 2/ )/ 值/ log43N/ 证明/ ./ 在/ Quad/ 中/ ,/ 按照/ Routing/ 算法/ ,/ 从/ 任一/ 超级/ 节点/ 出发/ 到达/ 目标/ 节点/ 最/ 多/ 经历/ 3/ 个/ 阶段/ :/ Page7/ 位置/ 标识/ 与/ K/ 不/ 在/ 同一/ 顶层/ 象限/ 内时/ ,/ 珚/ S/ 从/ 象限/ 路由表/ 中/ 查找/ 位置/ 标识/ 与/ K/ 位于/ 同一/ 顶层/ 象限/ 且/ 象限/ 序列/ 匹配/ 最长/ 的/ 超级/ 节点/ S/ ,/ 并/ 将/ 请求/ 传递/ 给/ S/ ,/ 路径/ 长度/ H/ 为/ 1/ 跳/ (/ H/ 是/ 指/ 在/ 象限/ 转移/ 时/ 路由/ 中/ 的/ 跳数/ ,/ 1/ 跳/ 表示/ 路由/ 过程/ 中/ 从/ 一个/ 节点/ 到/ 下/ 一个/ 节点/ 的/ 一次/ 转移/ )/ ;/ 如果/ 在/ 同一/ 顶层/ 象限/ 内/ ,/ S/ 与/ 珚/ S/ 相同/ ,/ 不需/ 进行/ 转移/ ./ 显然/ 象限/ 转移/ 概率/ 为/ 3/ // 4/ ,/ 象限/ 转移/ 阶段/ 平均/ 路径/ 长度/ 为/ 3/ // 4/ ./ (/ 2/ )/ 上升/ 阶段/ ./ Routing/ 算法/ 步/ 4/ ~/ 7/ ,/ 在/ 同一/ 顶层/ 象限/ 内/ 从/ S/ 向上/ 定位/ 到/ 位置/ 标识/ 与/ K/ 象限/ 序列/ 最长/ 交集/ 所/ 对应/ 的/ CSP/ ./ 上升/ 阶段/ 最大/ 长度/ 为/ Ls/ -/ l/ ./ 节点/ S/ 可能/ 是/ 发起/ 查询/ 的/ 超级/ 节点/ 珚/ S/ ,/ 也/ 可能/ 是/ 珚/ S/ 通过/ 象限/ 路由表/ 查找/ 到/ 的/ 新/ 节点/ ,/ Ls/ 在/ 各层/ 的/ 概率/ p/ 是/ 相等/ 的/ ,/ 概率/ 为/ 1/ 在/ 完全/ Quad/ 拓扑/ 的/ 同一/ 顶层/ 象限/ 内/ ,/ S/ 与/ 目标/ 节点/ 的/ 位置/ 标识/ 象限/ 序列/ 在/ 第/ 1/ 层/ 匹配/ 的/ 概率/ 为/ 1/ ,/ 在/ 第/ 2/ 层/ 匹配/ 的/ 概率/ 为/ 1/ // 4/ ,/ 因为/ 第/ 2/ 层/ 包含/ 4/ 个子/ 象限/ ,/ 在/ 第/ 3/ 层/ 匹配/ 的/ 概率/ 为/ 1/ // 16/ ,/ 依次/ 类推/ ,/ l/ 的/ 平均值/ Al/ 表示/ 为/ ∑/ ALs/ 中/ ,/ 目标/ 节点/ 通常/ 在/ 最大/ 层/ ,/ 因此/ 只/ 需/ 比较/ 到/ Ls/ 即可/ ,/ 其/ 平均值/ ALs/ 为/ (/ ML/ +/ 1/ )/ Al/ =/ 1/ +/ 1/ 式/ (/ 4/ )/ 中/ ,/ 当/ ALs/ / 2/ 时/ ,/ 1/ // 4ALs/ 较/ 小/ ;/ 当/ ALs/ =/ 1/ 时/ ,/ ML/ =/ 1/ ,/ 整个/ 系统/ 只有/ 一层/ ,/ 属于/ 特例/ ,/ 最/ 多只/ 需/ 1/ 跳/ 就/ 可以/ 直接/ 定位/ 到/ 目标/ 节点/ ./ 在/ 上升/ 阶段/ ,/ 从/ CSP/ 向上/ 传递/ 时比/ BSP/ 要少/ 一/ 跳/ ./ 由于/ 在/ 完全/ Quad/ 系统/ 的/ 一个/ 象限/ 中同层/ CSP/ 和/ BSP/ 比例/ 为/ 14/ ,/ 节点/ 是/ CSP/ 的/ 概率/ 为/ 1/ // 5/ ,/ 因而/ 上升/ 阶段/ 平均/ 路径/ 长度/ 为/ ALs/ -/ Al/ -/ 1/ // 5/ ./ (/ 3/ )/ 下降/ 阶段/ ./ Routing/ 算法/ 步/ 8/ ~/ 15/ ,/ 从/ 象限/ 序列/ 最长/ 交集/ 对应/ 的/ CSP/ 定位/ 到/ 目标/ 节点/ ,/ 因为/ 存储资源/ 索引/ 的/ 超级/ 节点/ 层次/ 不/ 超过/ 分层/ 象限/ 空间/ 最大/ 层/ ML/ ,/ 所以/ 下降/ 阶段/ 最大/ 路径/ 长度/ 为/ ML/ -/ l/ ./ 最大/ 路径/ 长度/ RLmax/ 为/ RLmax/ =/ H/ +/ (/ Ls/ -/ l/ )/ +/ (/ ML/ -/ l/ )/ =/ Ls/ -/ 2l/ +/ ML/ +/ 1/ 平均/ 路径/ 长度/ RLavg/ 为/ RLavg/ =/ 3/ // 4/ +/ (/ ALs/ -/ Al/ -/ 1/ // 5/ )/ +/ (/ ML/ -/ Al/ )/ 5/ 自/ 组织/ 、/ 负载/ 均衡/ 与/ 容错/ P2P/ 网络/ 具有/ 很/ 高/ 的/ 动态性/ ,/ 大量/ 节点/ 可能/ 随时/ 加入/ 和/ 退出/ 系统/ ,/ 因而/ P2P/ 网络拓扑/ 需要/ 具有/ 良好/ 的/ 自/ 组织性/ 来/ 处理/ 节点/ 加入/ 和/ 离开/ ,/ 并/ 通过/ 调整/ 、/ 分裂/ 以及/ 合并/ 机制/ 来/ 保持/ 超级/ 节点/ 间/ 的/ 负载/ 均衡/ ,/ 同时/ 拓扑/ 还/ 需要/ 具有/ 容错/ 能力/ ./ 5.1/ 节点/ 加入/ 新叶/ 节点/ F/ 加入/ P2P/ 网络/ ,/ 需要/ 知道/ 网络/ 中/ 已经/ 存在/ 的/ 任意/ 一个/ 超级/ 节点/ S/ ,/ 当/ F/ 与/ S/ 成功/ 建立/ 连接/ 之后/ ,/ F/ 将/ 共享资源/ 索引/ 传递/ 给/ 超级/ 节点/ S/ ,/ S/ 将/ 其/ 加进/ 本地/ 非/ 结构化/ 索引/ 库/ ,/ 并/ 通过/ 结构化/ 路由/ 发布/ 到/ 相关/ 超级/ 节点/ ./ 如果/ S/ 接受/ F/ 加入/ 后/ 负载/ 超出/ 其/ 能力/ 限制/ ,/ 就/ 需要/ 进行/ 拓扑/ 调整/ 和/ 分裂/ ./ 5.1/ ./ 1/ 加入/ 调整/ 过程/ 超级/ 节点/ 在/ 其/ 能力/ 范围/ 内/ 接受/ 叶/ 节点/ 加入/ ,/ 设/ 超级/ 节点/ Si/ 的/ 容量/ 为/ Ci/ ,/ 当前/ 负载/ 为/ Di/ ,/ 则/ Si/ 负载/ 率为/ DiCi/ 负载/ 与/ 容量/ 之/ 比/ 的/ 上限/ 要求/ ,/ 超级/ 节点/ 负载/ 率/ 大于/ 该值/ 后/ ,/ 必须/ 将/ 一部分/ 负载/ 转移/ 给/ 其它/ 超级/ 节点/ ,/ β/ u/ 为/ 调整/ 上限/ 率/ ,/ 当/ 超级/ 节点/ 的/ 负载/ 与/ 容量/ 之/ 比/ 小于/ 该值/ 时/ 才/ 可以/ 接受/ 其它/ 超级/ 节点/ 转移/ 负载/ ./ β/ u/ 保证/ 了/ 接受/ 转移/ 的/ 超级/ 节点/ 拥有/ 一定/ 的/ 空闲/ 容量/ ,/ 防止/ 超级/ 节点/ 接受/ 其它/ 超级/ 节点/ 的/ 叶/ 节点/ 后/ 负载/ 率/ 接近/ α/ u/ ./ 进行/ 调整/ 时/ ,/ 负载/ 率/ 大于/ α/ u/ 的/ 超级/ 节点/ Si/ 首先/ 检查/ 同层/ 超级/ 节点/ ,/ 按/ 下列/ 情况/ 进行/ 不同/ 的/ 处理/ ,/ 为/ 清晰/ 起/ 见/ ,/ 我们/ 给出/ 图/ 3/ 做/ 辅助/ 说明/ ./ (/ 1/ )/ Si/ 不/ 存在/ 同层/ 超级/ 节点/ ,/ 则/ Si/ 检查/ 是否/ 存在/ 上层/ 超级/ 节点/ Sp/ 满足/ 负载/ Dp/ </ β/ uCp/ ,/ 如果/ 有/ ,/ 则/ Si/ 向/ Sp/ 转移/ DiCp/ -/ DpCiCi/ +/ Cp/ 尽可能/ 保持/ 相同/ 的/ 负载/ 率/ ,/ 表示/ 向下/ 取整/ ./ 如果/ Si/ 无/ 上层/ 超级/ 节点/ 或/ 上层/ 超级/ 节点/ 负载/ Dp/ / β/ uCp/ ,/ 则/ 对/ Si/ 进行/ 分裂/ ./ 例如/ 图/ 3/ 中/ 第一/ 顶层/ 象限/ 内/ 超级/ Page8/ 节点/ B12/ 过载/ 时/ ,/ 先/ 检查/ 是否/ 存在/ 同层/ 邻居/ 超级/ 节点/ ,/ 当/ 没有/ 同层/ 邻居/ 节点/ 时/ ,/ 按照/ Quad/ 逐层/ 构造/ 规则/ ,/ 也/ 不会/ 有/ 下层/ 节点/ ,/ 因而/ B12/ 只有/ 检查/ 上层/ 超级/ 节点/ A12/ 和/ B1/ ,/ 为了/ 降低/ 负载/ 转移/ 对/ 拓扑/ 产生/ 的/ 影响/ ,/ B12/ 只/ 检查/ 自己/ 的/ 直接/ 上层/ 超级/ 节点/ ,/ 不再/ 向上/ 递归/ 传递/ ./ 如果/ A12/ 和/ B1/ 中负载/ 最轻/ 的/ 节点/ 负载/ 率/ 小于/ β/ u/ ,/ 则/ B12/ 向/ 其/ 转移/ 负载/ ,/ 如果/ 不/ 满足/ 转移/ 条件/ ,/ 则/ 对/ B12/ 进行/ 分裂/ ,/ 产生/ 新/ 的/ 超级/ 节点/ ./ (/ 2/ )/ Si/ 存在/ 同层/ 超级/ 节点/ ,/ 并且/ 其中/ 负载/ 最小/ 的/ Sj/ 满足/ 负载/ Dj/ </ β/ uCj/ ,/ 则/ Si/ 向/ Sj/ 转移/ DiCj/ -/ DjCiCi/ +/ Cj/ 个/ 节点/ ./ 如图/ 3/ 中/ 第二/ 顶层/ 象限/ 内/ 的/ 超级/ 节点/ C1/ 过载/ 时/ ,/ 检查/ 同层/ 超级/ 节点/ 邻居/ A23/ 、/ C2/ 和/ C3/ ,/ 如果/ 负载/ 最轻/ 的/ 节点/ 负载/ 率/ 小于/ β/ u/ ,/ 则/ C1/ 向/ 其/ 转移/ 负载/ ./ (/ 3/ )/ Si/ 存在/ 同层/ 超级/ 节点/ ,/ 并且/ 其中/ 负载/ 最小/ 的/ 节点/ Sj/ 负载/ Dj/ / β/ uCj/ ,/ 不能/ 进行/ 转移/ ,/ 则/ 检查/ 上层/ 邻居/ ,/ 如果/ 其/ 负载/ 率/ 低于/ 调整/ 上限/ 率/ β/ u/ ,/ 则/ 向/ 其/ 转移/ 相应/ 的/ 负载/ ,/ 如果/ 上层/ 邻居/ 不/ 满足/ 转移/ 条件/ ,/ Si/ 检查/ 下层/ 邻居/ ,/ 按照/ 下列/ 情况/ 进行/ 相应/ 处理/ :/ ①/ Si/ 无/ 下层/ 超级/ 节点/ ,/ 则/ 对/ Si/ 进行/ 分裂/ ./ 例如/ 图/ 3/ 第二/ 顶层/ 象限/ 内/ 的/ 超级/ 节点/ C2/ 过载/ 时/ ,/ 其同层/ 邻居/ A23/ 、/ C1/ 和/ C3/ 和/ 上层/ 邻居/ A2/ 负载/ 率均/ 不/ 小于/ β/ u/ ,/ 不/ 满足/ 调整/ 条件/ 并且/ 由于/ C2/ 无/ 下层/ 超级/ 节点/ ,/ 所以/ 对/ 其/ 进行/ 分裂/ ./ ②/ Si/ 存在/ 下层/ 超级/ 节点/ ,/ 并且/ 其中/ 负载/ 最小/ 的/ 超级/ 节点/ Sk/ 满足/ Dk/ </ β/ uCk/ ,/ 则/ Si/ 向/ Sk/ 转移/ DiCk/ -/ DkCiCi/ +/ Ck/ 载/ ,/ 其同层/ 邻居/ A34/ 、/ D1/ 、/ D3/ 和/ D4/ 和/ 上层/ 邻居/ A4/ 负载/ 率/ 不/ 小于/ β/ u/ ,/ 不/ 满足/ 调整/ 条件/ ,/ 但/ 下层/ 邻居/ D23/ 负载/ 率/ 小于/ β/ u/ ,/ 则/ D2/ 向/ D23/ 转移/ 负载/ ./ ③/ Si/ 存在/ 下层/ 超级/ 节点/ ,/ 并且/ 其中/ 负载/ 最小/ 的/ 超级/ 节点/ Sk/ 负载/ Dk/ / β/ uCk/ ,/ 则/ Si/ 向/ Sk/ 发送/ 调整/ 消息/ ,/ Sk/ 递归/ 执行/ 步/ (/ 3/ )/ ,/ 如果/ Sk/ 仍然/ 不能/ 完成/ 调整/ ,/ 则/ 需要/ 继续/ 向/ 下层/ 传递/ ,/ 直到/ 调整/ 结束/ ./ 如图/ 3/ 中/ 第四/ 顶层/ 象限/ 内/ 的/ A4/ 过载/ ,/ 同层/ A0/ 、/ A1/ 、/ A2/ 、/ A3/ 负载/ 率均/ 不/ 小于/ β/ u/ ,/ 则/ A4/ 检查/ 下层/ 超级/ 节点/ A41/ 、/ E1/ 、/ E2/ 、/ E3/ 、/ E4/ ,/ 如果/ 其中/ 负载/ 率/ 最轻/ 的/ 节点/ 比如/ E2/ 负载/ 率/ 不/ 小于/ β/ u/ ,/ 则/ A4/ 将/ 转移/ 请求/ 发送给/ E2/ 、/ E2/ 执行/ 步/ (/ 3/ )/ ,/ 递归/ 进行/ 调整/ ./ 5.1/ ./ 2/ 分裂/ 过程/ 在/ 节点/ 不断/ 加入/ 的/ 过程/ 中/ ,/ Quad/ 拓扑/ 会自/ 适应/ 的/ 进行/ 调整/ ,/ 新/ 的/ 超级/ 节点/ 会/ 随着/ 分裂/ 不断/ 增加/ ./ 图/ 4/ 显示/ 了/ 二层/ Quad/ 拓扑/ 的/ 动态/ 分裂/ 过程/ ,/ 为/ 清晰/ 起/ 见/ ,/ (/ c/ )/ 、/ (/ d/ )/ 、/ (/ e/ )/ 中心/ 超级/ 节点/ 的/ 叶/ 节点/ 被/ 省略/ ./ 在/ 分裂/ 过程/ 中/ ,/ 系统/ 中/ 的/ 第/ 1/ 个/ 节点/ 自动/ 成为/ 超级/ 节点/ ,/ 该/ 超级/ 节点/ 在/ 其/ 能力/ 范围/ 内/ 接受/ 叶/ 节点/ 加入/ ,/ 如图/ 4/ (/ a/ )/ 所示/ ,/ 当叶/ 节点/ 数/ 超出/ 其/ 能力/ 限制/ 并且/ 无法/ 通过/ 调整/ 转移/ 给/ 其它/ 超级/ 节点/ 时/ ,/ 超级/ 节点/ 向/ 第一/ 象限/ 的/ 0/ 方向/ 分裂/ 出/ 一个/ 新/ 超级/ 节点/ ,/ 如图/ 4/ (/ b/ )/ 所示/ ,/ 在/ 随后/ 的/ 分裂/ 过程/ 中/ ,/ 超级/ 节点/ 在/ 其它/ 未/ 分配/ 的/ (/ 2/ ,/ 4/ ,/ 6/ )/ 3/ 个/ 方向/ 继续/ 分裂/ 新/ 超级/ 节点/ ,/ 如图/ 4/ (/ c/ )/ ./ 当/ 一层/ 的/ 方向/ 分配/ 完后/ ,/ 超级/ 节点/ 向/ 下层/ 方向/ 分裂/ ,/ 如图/ 4/ (/ d/ )/ ./ 由于/ 超级/ 节点/ 在/ 分裂/ 之前/ ,/ 会先/ 在/ 同层/ 超级/ 节点/ 进行/ 调整/ ,/ 所以/ 只有/ 在/ 同层/ 象限/ 都/ 满/ 的/ 情况/ 下/ 才/ 向/ 下层/ 分裂/ ,/ 不会/ 出现/ 4/ 个/ 同层/ 象限/ 邻居/ 还有/ 位置/ 空间/ 的/ 情况/ 向/ 下层/ 分裂/ ./ 另外/ ,/ 通过/ 向/ 上层/ 超级/ 节点/ 调整/ 负载/ ,/ 一个/ 象限/ 的/ 负载/ 会/ 间接/ 转移/ 到/ 上层/ 其它/ 象限/ ./ 二层/ Quad/ 拓扑/ 最终/ 分裂/ 后/ 的/ 情况/ 如图/ 4/ (/ e/ )/ 所示/ ./ Page9/ 如下/ :/ 设/ 需要/ 分裂/ 的/ 超级/ 节点/ 为/ Si/ ,/ 具体/ 分裂/ 步骤/ (/ 1/ )/ 确定/ 分裂/ 方向/ ./ 超级/ 节点/ 分裂/ 方向/ 遵循/ 层次/ 优先/ 、/ 象限/ 顺序/ 优先/ 原则/ ./ 节点/ 首先/ 判断/ 邻居/ 路由表/ 中同层/ (/ 0/ ,/ 2/ ,/ 4/ ,/ 6/ )/ 4/ 个/ 方向/ 中/ 是否/ 有/ 未/ 分配/ 的/ 索引/ ,/ 如果/ 有/ ,/ 则/ 选择/ 标号/ 最低/ 的/ 方向/ ./ 如果/ 同层/ 4/ 个/ 方向/ 已满/ ,/ 则/ 从/ 下层/ 超级/ 节点/ 确定/ 方向/ ,/ 其/ 方向/ 确定/ 规则/ 是/ :/ 如果/ Si/ 是/ CSP/ ,/ 则/ 分别/ 按/ 4/ 个/ 象限/ 子/ 中心/ 超级/ 节点/ (/ CCSP/ )/ 索引/ 顺序/ 中未/ 分配/ 的/ 方向/ 确定/ 分裂/ 方向/ ,/ 对应/ 邻居/ 路由表/ 索引/ (/ 1/ ,/ 3/ ,/ 5/ ,/ 7/ )/ ,/ 如果/ Si/ 是/ BSP/ ,/ 则/ 以/ Si/ 对应/ 的/ 下层/ CCSP/ 以及/ CCSP/ 的/ 同层/ (/ 0/ ,/ 2/ ,/ 4/ ,/ 6/ )/ 方向/ 为序/ 确定/ 分裂/ 方向/ ,/ 分别/ 对应/ Si/ 的/ 邻居/ 路由表/ 索引/ (/ 8/ ,/ 1/ ,/ 3/ ,/ 5/ ,/ 7/ )/ ./ (/ 2/ )/ 选择/ 新/ 超级/ 节点/ Sj/ ./ Sj/ 从/ Si/ 的/ 候选/ 超级/ 节点/ 产生/ ,/ 候选/ 超级/ 节点/ 是/ 叶/ 节点/ 中/ 最/ 优秀/ 的/ 节点/ ./ 新/ 超级/ 节点/ 的/ 位置/ 标识/ 由/ 距离/ 其/ 最近/ 的/ CSP/ 位置/ 标识/ 加/ 分裂/ 方向/ 构成/ ./ 新/ 超级/ 节点/ Sj/ ./ (/ 3/ )/ 叶/ 节点/ 转移/ ./ Si/ 转移/ DiCjCi/ +/ Cj/ (/ 4/ )/ 路由表/ 和/ 索引/ 处理/ ./ 按照/ 分裂/ 方向/ ,/ Si/ 和/ Sj/ 分别/ 添加/ 邻居/ 路由表/ 索引/ ./ Sj/ 象限/ 路由表/ 先/ 从/ Si/ 复制/ ,/ Sj/ 再/ 通过/ 这些/ 节点/ 获得/ 层次/ 更为/ 接近/ 的/ 超级/ 节点/ ./ 在/ 索引/ 处理/ 上/ ,/ Si/ 把/ 与/ Sj/ 象限/ 序列/ 相匹配/ 的/ 结构化/ 倒排/ 索引/ 表表/ 项/ 转移/ 给/ Sj/ ./ 转移/ 时/ 遵循/ 同层/ CSP/ 或/ BSP/ 转移/ 给/ 同层/ BSP/ ,/ 上层/ BSP/ 转移/ 给/ 下层/ CSP/ 原则/ ./ 非/ 结构化/ 资源/ 索引/ 不/ 进行/ 转移/ ,/ 由/ 相关/ 超级/ 节点/ 从叶/ 节点/ 中/ 重新/ 创建/ ./ 5.2/ 节点/ 退出/ 节点/ 可能/ 因为/ 多种/ 原因/ 离开/ P2P/ 网络/ ,/ 比如/ 节点/ 选择/ 主动/ 离开/ 或/ 因为/ 网络故障/ 被动/ 离开/ ./ 主动/ 离开/ 情况/ 下/ ,/ 节点/ 可以/ 通知/ 其它/ 节点/ 完成/ 相应/ 拓扑/ 调整/ ,/ 被动/ 离开/ 时/ ,/ 其/ 邻居/ 节点/ 通过/ 定期/ 心跳/ 函数/ 才/ 可以/ 检测/ 到/ ,/ 处理/ 成本增加/ 并/ 具有/ 滞后性/ ,/ 但/ 两者/ 处理/ 方式/ 比较/ 类似/ ,/ 为/ 简化/ 起/ 见/ ,/ 本文/ 对/ 这/ 两种/ 情况/ 不/ 做/ 进一步/ 区分/ ./ 节点/ 分为/ 超级/ 节点/ 和/ 叶/ 节点/ ,/ 其/ 退出/ 对/ 拓扑/ 有/ 不同/ 影响/ ./ 超级/ 节点/ 退出/ 会/ 对/ 路由/ 产生/ 影响/ ,/ 因而/ 需要/ 修复/ 拓扑/ ,/ 方法/ 是/ 由/ 候选/ 超级/ 节点/ 替代/ 退出/ 的/ 超级/ 节点/ ./ 候选/ 超级/ 节点/ 位置/ 标识/ 设/ 为/ 退出/ 超级/ 节点/ 的/ 位置/ 标识/ ,/ 并/ 与其/ 邻居/ 路由表/ 和/ 象限/ 路由表/ 中/ 的/ 超级/ 节点/ 建立/ 连接/ ,/ 然后/ 候选/ 超级/ 节点/ 接受/ 退出/ 超级/ 节点/ 的/ 叶/ 节点/ 作为/ 子/ 节点/ 并/ 从中/ 选择/ 新/ 候选/ 超级/ 节点/ ./ 叶/ 节点/ 退出/ 时/ ,/ 超级/ 节点/ 需要/ 将/ 其/ 从/ 本地/ 非/ 结构化/ 索引/ 中/ 删除/ ,/ 叶/ 节点/ 的/ 结构化/ 索引/ 不/ 作/ 处理/ ,/ 因为/ 超级/ 节点/ 会/ 定期/ 对/ 倒排/ 索引/ 表中/ 的/ 叶/ 节点/ 发/ PING/ 消息/ ,/ 如果/ 没有/ 收到/ PONG/ 消息/ ,/ 会/ 将/ 未/ 响应/ 节点/ 的/ 索引/ 项/ 从/ 倒排/ 索引/ 表中/ 删除/ ./ 设/ α/ b/ 为/ 负载/ 下限/ 率/ ,/ 即当/ 超级/ 节点/ 负载/ 与/ 容量/ 之/ 比/ 低于/ 该/ 比率/ 时/ ,/ 超级/ 节点/ 必须/ 从/ 其它/ 超级/ 节点/ 移进/ 一部分/ 负载/ ;/ β/ b/ 为/ 调整/ 下限/ 率/ ,/ 即/ 超级/ 节点/ 的/ 负载/ 与/ 容量/ 之/ 比/ 不/ 低于/ 该值/ 时/ 才/ 可以/ 向/ 其它/ 超级/ 节点/ 转移/ 负载/ ./ 当叶/ 节点/ 退出/ 使父/ 超级/ 节点/ 负载/ 率/ 小于/ 负载/ 下限/ 率/ α/ b/ 时/ ,/ 触发/ 退出/ 调整/ 和/ 合并/ 行为/ ./ 5.2/ ./ 1/ 退出/ 调整/ 过程/ 退出/ 调整/ 与/ 加入/ 调整/ 过程/ 类似/ ,/ 负载/ 低于/ α/ b/ 的/ 超级/ 节点/ Si/ 检查/ 同层/ 超级/ 节点/ ,/ 按/ 下列/ 情况/ 进行/ 不同/ 的/ 处理/ :/ (/ 1/ )/ Si/ 不/ 存在/ 同层/ 超级/ 节点/ ,/ 则/ 检查/ Si/ 是否/ 存在/ 上层/ 超级/ 节点/ Sp/ 满足/ 负载/ Dp/ / β/ bCp/ ,/ 如果/ 存在/ ,/ 则/ Sp/ 向/ Si/ 转移/ DpCi/ -/ DiCpCi/ +/ Cp/ 层/ 超级/ 节点/ 或/ 上层/ 超级/ 节点/ 负载/ Dp/ </ β/ bCp/ ,/ 则/ 由/ Si/ 发起/ 合并/ 过程/ ./ (/ 2/ )/ Si/ 存在/ 同层/ 超级/ 节点/ ,/ 并且/ 其中/ 负载/ 最大/ 的/ Sj/ 满足/ 负载/ Dj/ / β/ bCj/ ,/ 则/ Sj/ 向/ Si/ 转移/ DjCi/ -/ DiCjCi/ +/ Cj/ 个/ 节点/ ./ (/ 3/ )/ Si/ 存在/ 同层/ 超级/ 节点/ ,/ 并且/ 其中/ 负载/ 最大/ 的/ 超级/ 节点/ Sj/ 负载/ Dj/ </ β/ bCj/ ,/ 不/ 满足/ 转移/ 条件/ ,/ 则/ 继续/ 检查/ 上层/ 邻居/ ,/ 如果/ 其中/ 负载/ 最大/ 的/ 上层/ 超级/ 节点/ 负载/ 率/ 不/ 低于/ 调整/ 下限/ 率/ β/ b/ ,/ 则/ 向/ Si/ 转移/ 相应/ 的/ 负载/ ,/ 如果/ 上层/ 邻居/ 不/ 满足/ 转移/ 条件/ ,/ 则/ Si/ 需要/ 进一步/ 检查/ 下层/ 超级/ 节点/ ,/ 按照/ 下列/ 情况/ 进行/ 相应/ 的/ 处理/ ./ ①/ Si/ 无/ 下层/ 超级/ 节点/ ,/ 则/ 对/ Si/ 进行/ 合并/ 操作/ ./ ②/ Si/ 存在/ 下层/ 超级/ 节点/ ,/ 并且/ 其中/ 负载/ 最大/ 的/ Sj/ 满足/ Dj/ / β/ bCj/ ,/ 则/ Sj/ 向/ Si/ 转移/ DjCi/ -/ DiCjCi/ +/ Cj/ 节点/ ./ ③/ Si/ 存在/ 下层/ 超级/ 节点/ ,/ 并且/ 其中/ 负载/ 最大/ 的/ 超级/ 节点/ Sk/ 负载/ Dk/ </ β/ bCk/ ,/ 则/ Si/ 向/ Sk/ 发出/ 调整/ 消息/ ,/ Sk/ 递归/ 执行/ 步/ (/ 3/ )/ ,/ 如果/ Sk/ 不能/ 在/ 本层/ 完成/ 调整/ ,/ 需/ 继续/ 向/ 下层/ 传递/ ,/ 直到/ 调整/ 结束/ ./ 5.2/ ./ 2/ 超级/ 节点/ 合并/ 当/ 超级/ 节点/ 自身/ 的/ 负载/ 无法/ 通过/ 调整/ 满足/ 最低/ 限制/ 要求/ 时/ ,/ 需要/ 进行/ 合并/ ./ 超级/ 节点/ 合并/ 过程/ 与/ 分/ Page10/ 裂/ 过程/ 大体/ 相反/ ./ 在/ 合并/ 方向/ 上/ ,/ 遵循/ 同层/ BSP/ 向/ 同层/ CSP/ 合并/ ,/ 下层/ CSP/ 向/ 上层/ BSP/ 合并/ 规则/ ./ 超级/ 节点/ 需要/ 调整/ 路由表/ 中/ 与/ 被/ 合并/ 超级/ 节点/ 对应/ 的/ 表项/ ./ 在/ 叶/ 节点/ 转移/ 上/ ,/ 被/ 合并/ 超级/ 节点/ 和/ 其/ 包含/ 的/ 叶/ 节点/ 一起/ 转移/ 给/ 发起/ 合并/ 的/ 超级/ 节点/ ./ 在/ 索引/ 处理/ 上/ ,/ 被/ 合并/ 节点/ 的/ 倒排/ 索引/ 表/ 转移/ 给/ 合并/ 方向/ 的/ 超级/ 节点/ ./ 非/ 结构化/ 索引/ 部分/ 由/ 合并/ 后/ 的/ 超级/ 节点/ 从叶/ 节点/ 中/ 重新/ 创建/ ./ 5.3/ 拓扑/ 容错/ 机制/ P2P/ 网络/ 工作/ 在/ 一个/ 具有/ 高度/ 动态性/ 和/ 成员/ 不/ 可靠/ 的/ 环境/ 下/ ,/ 因而/ P2P/ 系统/ 必须/ 具备/ 有效/ 的/ 容错/ 机制/ 来/ 保证/ 超级/ 节点/ 失效/ 后/ ,/ 网络/ 仍然/ 能够/ 正常/ 运行/ ./ Quad/ 具有/ 周期性/ 检测/ 和/ 冗余/ 路径/ 两种/ 容错/ 方法/ ,/ 候选/ 超级/ 节点/ 会/ 定期/ 检测/ 父/ 超级/ 节点/ 是否/ 处于/ 正常/ 状态/ ,/ 如果/ 其/ 失效/ ,/ 候选/ 超级/ 节点/ 会/ 很快/ 接替/ 失效/ 的/ 超级/ 节点/ 来/ 修复/ 拓扑/ ./ 在/ 修复/ 期间/ ,/ Quad/ 通过/ 冗余/ 路径/ 保证/ 其它/ 超级/ 节点/ 之间/ 的/ 正常/ 路由/ ./ 从/ 同层/ 超级/ 节点/ 来看/ ,/ 每个/ 超级/ 节点/ 都/ 包含/ 同层/ 其它/ 邻居/ 超级/ 节点/ 信息/ ,/ CSP/ 或/ BSP/ 失效/ 不/ 影响/ 其它/ 超级/ 节点/ 之间/ 的/ 互连/ ./ 从/ 上/ 下层/ 超级/ 节点/ 来看/ ,/ 邻居/ 超级/ 节点/ 间/ 的/ 路径/ 具有/ 冗余/ 设计/ ,/ 每/ 一对/ 上/ 下层/ 超级/ 节点/ 间/ 都/ 有/ 两条/ 以上/ 路径/ ,/ 如图/ 5/ 所示/ ./ 图/ 5/ 显示/ 了/ 一个/ 象限/ 的/ 两层/ 超级/ 节点/ 之间/ 关系/ 图/ ,/ 其中/ 超级/ 节点/ A/ 和/ B/ 是/ 第/ 1/ 层/ CSP/ 和/ BSP/ ,/ C/ 是/ A/ 和/ B/ 的/ 下层/ 中心/ 超级/ 节点/ (/ CCSP/ )/ ,/ D/ 是/ B/ 的/ 下层/ 端/ 超级/ 节点/ (/ CBSP/ )/ ,/ 可以/ 看出/ ,/ 图中/ 任意/ 两个/ 节点/ 间/ 都/ 有/ 两条/ 以上/ 路径/ ,/ 如/ A/ 可以/ 通过/ B/ 到达/ D/ ,/ 也/ 可以/ 通过/ C/ 到达/ D/ ,/ 图中/ 任何/ 一个/ 超级/ 节点/ 或/ 一条/ 路径/ 失效/ 都/ 不/ 影响/ 其它/ 超级/ 节点/ 之间/ 的/ 连通性/ ./ 当/ B/ 和/ C/ 同时/ 失效/ 时/ ,/ 只要/ 有/ 一个/ 候选/ 超级/ 节/ 系统/ IS/ -/ ChordIS/ -/ CANIS/ -/ PastryB/ :/ ID/ 进制/ ,/ |/ L/ |/ :/ 叶集/ 大小/ ,/ |/ M/ |/ 邻居/ 集/ 大小/ logBN/ (/ B/ -/ 1/ )/ ·/ logBN/ +/ |/ L/ |/ +/ |/ M/ |/ B/ ·/ logBNIS/ -/ TapestryQuadlog2Nd4/ ·/ N1/ // d/ 表/ 3Quad/ 和/ 结构化/ 超级/ 节点/ 系统/ 比较/ logBN3ML2/ -/ 9760/ 点/ 修复/ 完成/ ,/ A/ 和/ D/ 之间/ 就/ 可以/ 进行/ 路由/ ./ 如果/ 一个/ 象限/ 的/ 所有/ 超级/ 节点/ 如/ C/ 和/ D/ 都/ 失效/ ,/ 失效节点/ 的/ 候选/ 超级/ 节点/ 可以/ 通过/ 预先/ 备份/ 的/ 邻居/ 路由表/ 找到/ 上/ 下层/ 超级/ 节点/ 并/ 修复/ 拓扑/ ./ 如果/ 同一/ 象限/ 相邻/ 两层/ 所有/ 超级/ 节点/ 同时/ 失效/ ,/ 失效/ 超级/ 节点/ 的/ 候选/ 超级/ 节点/ 可以/ 通过/ 象限/ 路由表/ 向/ 其它/ 象限/ 的/ 超级/ 节点/ 进行/ 查询/ ,/ 获得/ 修复/ 拓扑/ 所/ 需/ 的/ 本/ 象限/ 其它/ 各层/ 超级/ 节点/ 信息/ ,/ 避免/ 网络/ 被/ 分割/ ./ 6/ 分析/ 6.1/ 与/ 结构化/ 超级/ 节点/ 的/ 拓扑/ 比较/ 由于/ IS/ -/ P2P/ 网络/ 模型/ [/ 13/ ]/ 在/ 超级/ 节点/ 层/ 采用/ 了/ 典型/ 的/ 结构化/ 系统/ ,/ 我们/ 将/ Quad/ 与/ IS/ -/ P2P/ 模型/ 中/ 提出/ 的/ 4/ 个/ 系统/ 进行/ 比较/ ,/ 比较/ 包括/ 3/ 个/ 方面/ :/ (/ 1/ )/ 查找/ 路径/ 长度/ ./ 定义/ 了/ 从/ 任意/ 一个/ 超级/ 节点/ 出发/ ,/ 到达/ 目标/ 节点/ 的/ 跳数/ ;/ (/ 2/ )/ 路由/ 状态/ 数/ ./ 路由/ 状态/ 数/ 反映/ 了/ 超级/ 节点/ 路由表/ 以及/ 相关/ 集合/ 中/ 的/ 节点/ 数量/ ,/ 路由/ 状态/ 数越/ 大/ ,/ 拓扑/ 维护费用/ 就/ 越/ 高/ ./ 一般来说/ ,/ 结构化/ 系统/ 的/ 查找/ 路径/ 长度/ 和/ 路由/ 状态/ 数/ 之间/ 存在/ 一个/ 渐近曲线/ 关系/ ,/ 路由/ 状态/ 数越/ 大/ ,/ 查找/ 路径/ 越短/ ,/ 反之亦然/ ;/ (/ 3/ )/ 节点/ 加入/ 或/ 离开/ 产生/ 的/ 最大/ 拓扑/ 修复/ 成本/ ./ 我们/ 取/ 两者/ 中/ 的/ 最大值/ 作为/ 比较/ 参数/ ./ Quad/ 和/ IS/ -/ P2P/ 模型/ 中/ 4/ 个/ 结构化/ 系统/ 比较/ 结果/ 如表/ 3/ 所示/ ./ 在/ 5/ 种/ 结构/ 的/ 超级/ 节点/ 层/ ,/ IS/ -/ Chord/ 采用/ 了/ 带/ 弦/ 环/ 结构/ ,/ IS/ -/ CAN/ 为/ 多维/ 空间结构/ ,/ IS/ -/ Pastry/ 、/ IS/ -/ Tapestry/ 是/ 超/ 立方体/ 结构/ ,/ Quad/ 采用/ 分层/ 象限/ 空间结构/ ./ 从/ 查找/ 路径/ 长度/ 来看/ ,/ 5/ 个/ 系统/ 的/ 路由/ 时间/ 复杂度/ 均/ 为/ O/ (/ logN/ )/ ./ 表/ 4/ 显示/ 了/ 5/ 个/ 系统/ 的/ 查找/ 路径/ 长度/ 和/ 路由/ 状态/ 数在/ 不同/ 超级/ 节点/ 规模/ 下/ 的/ 计算结果/ ./ 由于/ Quad/ 采用/ 了/ 八进制/ ,/ 为了/ 保证/ 维数/ 或/ 进制/ 的/ 一致/ ,/ 我们/ 除/ IS/ -/ Chord/ 仍/ 采用/ 经典/ 的/ 二阶/ 外/ ,/ IS/ -/ CAN/ 采用/ 三维/ ,/ IS/ -/ Pastry/ 和/ IS/ -/ Tapestry/ 取/ 八进制/ 作为/ 参数/ ,/ 另外/ ,/ IS/ -/ Pastry/ 的/ |/ L/ |/ 和/ |/ M/ |/ 值取/ B/ 作为/ 参数/ ./ Page11/ 表/ 4Quad/ 和/ 结构化/ 超级/ 节点/ 系统/ 在/ 不同/ 超级/ 节点/ 规模/ 下/ 数据/ 值/ 比较/ 系统/ 超级/ 节点/ 为/ 1000/ 个/ 时/ 的/ 数值/ IS/ -/ Chord1010IS/ -/ CAN7/ ./ 56IS/ -/ Pastry3/ ./ 339.3/ IS/ -/ Tapestry3/ ./ 326.6/ Quad/ 从/ 查找/ 路径/ 长度/ 来看/ ,/ IS/ -/ Pastry/ 和/ IS/ -/ Tapes/ -/ try/ 最短/ ,/ Quad/ 次之/ ,/ 然后/ 是/ IS/ -/ Chord/ 和/ IS/ -/ CAN/ ./ 从/ 查找/ 路径/ 长度/ 增长/ 趋势/ 来看/ ,/ 随着/ 超级/ 节点/ 规模/ 增大/ ,/ IS/ -/ Pastry/ 和/ IS/ -/ Tapestry/ 的/ 查找/ 路径/ 长度/ 增幅/ 仍然/ 最小/ ,/ Quad/ 和/ IS/ -/ Chord/ 均/ 保持/ 平缓/ 的/ 增长/ ,/ IS/ -/ CAN/ 在/ 这方面/ 最差/ ,/ 因为/ 当/ 超级/ 节点/ 规模/ 增加/ 时/ ,/ IS/ -/ CAN/ 查找/ 路径/ 长度/ 增长幅度/ 远大于/ 其它/ 4/ 个/ 系统/ ./ 从/ 路由/ 状态/ 数/ 来看/ ,/ IS/ -/ Pastry/ 和/ IS/ -/ Tapestry/ 最大/ ./ IS/ -/ Chord/ 在/ 超级/ 节点/ 规模较/ 小时/ ,/ 路由/ 状态/ 数要/ 比/ Quad/ 小/ 一些/ ,/ 但是/ 随着/ 超级/ 节点/ 规模/ 增加/ ,/ 该值/ 会/ 逐渐/ 增加/ 并/ 超过/ Quad/ ./ IS/ -/ CAN/ 和/ Quad/ 的/ 路由/ 状态/ 数/ 具有/ Viceroy/ 、/ Koorde/ 和/ Cycloid/ 等/ 常数/ 度数/ 结构化/ 系统/ 的/ 优点/ ,/ 在/ 不同/ 网络/ 规模/ 下/ 都/ 能/ 保持/ 不变/ ,/ 具有/ 较/ 好/ 的/ 可扩展性/ ./ 从/ 数值/ 上/ 看/ ,/ IS/ -/ CAN/ 的/ 路由/ 状态/ 数比/ Quad/ 要/ 小/ ,/ 但/ 代价/ 是/ 随着/ 超级/ 节点/ 规模/ 增大/ ,/ 查找/ 路径/ 长度/ 增长/ 过快/ ./ 从/ 超级/ 节点/ 加入/ 或/ 离开/ 产生/ 的/ 最大/ 拓扑/ 修复/ 成本/ 来看/ ,/ IS/ -/ Chord/ 最高/ ,/ 为/ 路由/ 状态/ 数/ 的/ 平方/ ./ 在/ IS/ -/ Pastry/ 和/ IS/ -/ Tapestry/ 中/ ,/ 因为/ 超级/ 节点/ 加入/ 时要/ 构建/ 路由表/ 并且/ 两者/ 的/ 路由表/ 状态/ 数都/ 较大/ ,/ 所以/ 构造/ 成本/ 要/ 高于/ Quad/ 和/ IS/ -/ CAN/ ,/ 此外/ ,/ IS/ -/ Chord/ 、/ IS/ -/ Pastry/ 和/ IS/ -/ Tapestry/ 的/ 拓扑/ 修复/ 成本/ 都/ 随/ 超级/ 节点/ 规模/ 增加/ 而/ 增大/ ./ 相比之下/ ,/ Quad/ 和/ IS/ -/ CAN/ 中/ 超级/ 节点/ 加入/ 或/ 离开/ 对/ 拓扑/ 影响/ 小/ ,/ 两者/ 的/ 修复/ 成本/ 与/ 路由/ 状态/ 数/ 相一致/ ,/ 均/ 为/ 常/ 数值/ ,/ 能/ 较/ 好/ 适应/ 拓扑/ 的/ 动态性/ ./ 在/ 结构化/ 超级/ 节点/ 拓扑/ 中/ ,/ 超级/ 节点/ 失效/ 不仅/ 会/ 影响/ 路由表/ ,/ 而且/ 会/ 影响/ 其/ 代理/ 的/ 叶/ 节点/ 和/ 存储/ 结构化/ 资源/ 的/ 倒排/ 索引/ 表/ ./ 在/ Quad/ 中/ ,/ 由于/ 超级/ 节点/ 在/ 拓扑/ 中/ 的/ 位置/ 是/ 由/ 其/ 位置/ 标识/ 决定/ 的/ ,/ 独立/ 于/ ID/ 标识/ ,/ 并且/ 位置/ 标识/ 可以/ 赋给/ 从/ 其叶/ 节点/ 中/ 选出/ 的/ 候选/ 超级/ 节点/ ,/ 所以/ 候选/ 超级/ 节点/ 可以/ 自然/ 替代/ 失效/ 的/ 超级/ 节点/ ,/ 其它/ 叶/ 节点/ 只/ 需/ 将/ 候选/ 超级/ 节点/ 作为/ 父/ 超级/ 节点/ 即可/ ,/ 不/ 需要/ 寻找/ 新/ 超级/ 节点/ 加入/ ./ 此外/ ,/ 通过/ 在/ 候选/ 超级/ 节点/ 预先/ 备份/ 超级/ 节点/ 的/ 倒排/ 索引/ 表/ ,/ 超级/ 节点/ 失效/ 后/ 原有/ 的/ 结构化/ 资源/ 索引/ 不/ 受/ 影响/ ./ 而/ 在/ IS/ -/ Chord/ 、/ IS/ -/ CAN/ 、/ IS/ -/ Pastry/ 和/ 超级/ 节点/ 为/ 100000/ 个/ 时/ 的/ 数值/ 路径/ 长度/ 状态/ 数/ 34.8610/ ./ 316IS/ -/ Tapestry4/ 个/ 结构化/ 超级/ 节点/ 系统/ 中/ ,/ 超级/ 节点/ 只有/ ID/ 标识/ ,/ 没有/ 位置/ 标识/ ,/ 因为/ 不同/ ID/ 标识/ 的/ 超级/ 节点/ 在/ 拓扑/ 中/ 的/ 位置/ 不/ 一样/ ,/ 因而/ 即使/ 采用/ 候选/ 超级/ 节点/ 替代/ 机制/ 解决/ 叶/ 节点/ 重新/ 连接/ 问题/ ,/ 失效/ 超级/ 节点/ 的/ 结构化/ 倒排/ 索引/ 表/ 也/ 不能/ 直接/ 转移/ 给/ 候选/ 超级/ 节点/ ,/ 该表/ 要么/ 通过/ 候选/ 超级/ 节点/ 转移/ 到/ 与/ 失效/ 超级/ 节点/ 标识/ 相近/ 的/ 超级/ 节点/ ,/ 要么/ 事先/ 将/ 倒排/ 索引/ 表/ 备份/ 到/ 标识/ 相近/ 的/ 超级/ 节点/ ,/ 或者/ 系统/ 采用/ 多个/ Hash/ 函数/ 进行/ 映射/ 以/ 实现/ 冗余/ 备份/ ,/ 但/ 无论/ 上述/ 哪/ 种/ 方法/ ,/ 都/ 会/ 带来/ 额外/ 的/ 路由/ 和/ 存储/ 成本/ ,/ 相比之下/ ,/ Quad/ 中/ 超级/ 节点/ 失效/ 产生/ 的/ 资源/ 索引/ 修复/ 成本/ 是/ 最小/ 的/ ./ 通过/ 上述/ 分析/ ,/ Quad/ 与/ 结构化/ 超级/ 节点/ 拓扑/ 相比/ 具有/ 以下/ 特征/ :/ (/ 1/ )/ Quad/ 在/ 查找/ 路径/ 长度/ 和/ 路由/ 状态/ 数上/ 保持/ 了/ 更好/ 的/ 均衡性/ ./ (/ 2/ )/ Quad/ 具有/ 常数/ 度数/ 结构化/ 系统/ 的/ 特征/ ,/ 在/ 每个/ 超级/ 节点/ 维护/ 固定/ 路由表/ 项数/ 的/ 同时/ ,/ 仍然/ 能/ 达到/ O/ (/ logN/ )/ 跳/ 的/ 定位/ 效率/ ./ (/ 3/ )/ Quad/ 在/ 超级/ 节点/ 失效/ 修复/ 成本/ 方面/ 具有/ 优势/ ,/ 只/ 需较/ 低/ 的/ 修复/ 成本/ 就/ 能/ 快速/ 恢复/ 拓扑/ ,/ 并且/ 不/ 影响/ 倒排/ 索引/ 表/ ,/ 能/ 更好/ 地/ 适应/ 动态/ 环境/ ./ 6.2/ Quad/ 拓扑/ 结构/ 的/ 负载/ 均衡性/ 结构化/ 超级/ 节点/ 拓扑/ 的/ 负载/ 均衡/ 机制/ 与/ 单层/ 的/ 结构化/ 拓扑/ 具有/ 很大/ 的/ 不同/ ./ 在/ 单层/ 结构化/ 拓扑/ 中/ ,/ 一致性/ Hash/ 函数/ 保证/ 了/ 映射/ 后/ 的/ ID/ 标识/ 具有/ 良好/ 的/ 均衡性/ ,/ 在/ 此基础/ 上/ 构建/ 的/ 拓扑/ 也/ 是/ 均衡/ 的/ ,/ 但是/ 在/ 结构化/ 超级/ 节点/ 拓扑/ 中/ ,/ 每个/ 超级/ 节点/ 都/ 要/ 代理/ 一定/ 数量/ 的/ 叶/ 节点/ ,/ 由于/ 叶/ 节点/ 加入/ 和/ 退出/ 具有/ 随机性/ ,/ 因此/ 即使/ ID/ 标识/ 是/ 均衡/ 分布/ 的/ ,/ 各个/ 超级/ 节点/ 的/ 负载/ 也/ 不能/ 自动/ 实现/ 均衡/ ,/ 而/ 不/ 平衡/ 的/ 拓扑/ 会/ 带来/ 路由/ 效率/ 低下/ ,/ 系统/ 容易/ 形成/ 热点/ 等/ 诸多/ 不足/ ./ Quad/ 在/ 负载/ 均衡/ 方面/ 具有/ 自/ 适应/ 的/ 调整/ 、/ 分裂/ 与/ 合并/ 机制/ ,/ 与/ IS/ -/ Chord/ 、/ IS/ -/ CAN/ 、/ IS/ -/ Pastry/ 和/ IS/ -/ Tapestry/ 相比/ ,/ Quad/ 除了/ 可以/ 向/ 同层/ 邻居/ 超级/ 节点/ (/ 类似/ 于/ IS/ -/ CAN/ 相邻/ 区域/ 的/ 超级/ 节点/ )/ 调整/ 负载/ ,/ 还/ 可以/ 向上/ 下层/ 超级/ 节点/ (/ 类似/ 于/ IS/ -/ Chord/ 、/ Page12IS/ -/ Pastry/ 和/ IS/ -/ Tapestry/ 的/ 前驱/ 与/ 后继/ 超级/ 节点/ )/ 转移/ 叶/ 节点/ ./ 在/ 调整/ 顺序/ 上/ ,/ 先是/ 在/ 同层/ 超级/ 节点/ 之间/ 进行/ 调整/ ,/ 保证/ 了/ 同一/ 层次/ 的/ 各个/ 象限/ 保持/ 均衡/ ./ 而/ 上/ 下层/ 超级/ 节点/ 间/ 的/ 负载/ 调整/ 能/ 使/ 下层/ 区域/ 的/ 负载/ 逐步/ 转移/ 到/ 上层/ 其它/ 区域/ ./ 另外/ ,/ 在/ 向/ 上层/ 超级/ 节点/ 调整/ 的/ 时候/ ,/ 只/ 考虑/ 直接/ 上层/ 超级/ 节点/ ,/ 而/ 不是/ 递归/ 向上/ ,/ 使/ 一次/ 调整/ 不会/ 对象/ 限/ 其它/ 区域/ 产生/ 大/ 的/ 影响/ ./ 在/ 分裂/ 与/ 合并/ 方面/ ,/ 因为/ Quad/ 中新/ 超级/ 节点/ 在/ 拓扑/ 中/ 的/ 位置/ 标识/ (/ PI/ )/ 与其/ 分裂/ 或/ 合并/ 方向/ 相对/ 应/ ,/ 分裂/ 与/ 合并/ 只/ 在/ 本/ 区域/ 进行/ ,/ 不/ 影响/ 其它/ 区域/ ,/ Quad/ 这种/ 特性/ 也/ 降低/ 了/ 其/ 物理/ 网络拓扑/ 和/ 覆盖网/ (/ Overlay/ )/ 不/ 匹配/ 问题/ ,/ 因为/ 节点/ 总是/ 就近/ 进行/ 处理/ ./ 而/ 在/ IS/ -/ Chord/ 、/ IS/ -/ CAN/ 、/ IS/ -/ Pastry/ 和/ IS/ -/ Tapestry/ 中/ ,/ ID/ 标识/ 决定/ 了/ 超级/ 节点/ 在/ 拓扑/ 结构/ 中/ 的/ 位置/ ,/ 如果/ 新/ 产生/ 的/ 超级/ 节点/ ID/ 标识/ 对应/ 于/ 其它/ 拓扑/ 位置/ ,/ 或者/ 超级/ 节点/ 不能/ 和/ 相邻/ 区域/ 的/ 超级/ 节点/ 合并/ 时/ ,/ 分裂/ 与/ 合并/ 就要/ 跨/ 区域/ 进行/ ,/ 对/ 拓扑/ 影响/ 较大/ ./ 通过/ 以上/ 分析/ ,/ Quad/ 在/ 负载/ 均衡/ 方面/ 具有/ 以下/ 特点/ :/ (/ 1/ )/ 超级/ 节点/ 数量/ 能够/ 随/ 系统/ 中/ 节点/ 数量/ 的/ 增加/ 或/ 减少/ 作自/ 适应/ 的/ 增减/ ./ (/ 2/ )/ 即使/ 大量/ 节点/ 向/ 少数/ 超级/ 节点/ 请求/ 加入/ ,/ Quad/ 也/ 能够/ 将/ 这些/ 节点/ 均衡/ 的/ 调整/ 到/ 不同/ 层次/ 的/ 不同/ 象限/ 区域/ ./ (/ 3/ )/ 调整/ 、/ 分裂/ 与/ 合并/ 机制/ 不会/ 引起/ 拓扑/ “/ 雪崩/ 效应/ ”/ ,/ 即/ 少量/ 拓扑/ 调整/ 不会/ 引起/ 很大/ 的/ 拓扑/ 变化/ ./ 6.3/ Quad/ 结构化/ 路由/ 性能/ 的/ 改进/ Quad/ 结构化/ 路由/ 分为/ 象限/ 转移/ 、/ 上升/ 和/ 下降/ 3/ 个/ 阶段/ ,/ 通过/ 对/ 路由表/ 进行/ 调整/ ,/ 并/ 利用/ 缓存/ 就/ 可以/ 有效/ 改进/ 其/ 路由/ 性能/ ,/ 以下/ 是/ 两种/ 改进/ Quad/ 路由/ 性能/ 的/ 方法/ :/ (/ 1/ )/ 利用/ 顶层/ 象限/ 内同层/ 超级/ 节点/ “/ 短链/ ”/ ,/ 减小/ 上升/ 阶段/ 的/ 长度/ ./ 在/ Quad/ 中/ ,/ 象限/ 路由表/ 只能/ 解决/ 不同/ 顶层/ 象限/ 之间/ 的/ 超级/ 节点/ 定位/ ,/ 不能/ 实现/ 同一/ 顶层/ 象限/ 内/ 的/ 不同/ 子/ 象限/ 同层/ 超级/ 节点/ 定位/ ,/ 我们/ 称/ 前者/ 为/ “/ 长链/ ”/ ,/ 后者/ 为/ “/ 短链/ ”/ ./ 在/ 式/ (/ 4/ )/ 中/ ,/ 我们/ 证明/ 了/ “/ 长链/ ”/ 可以/ 使/ 象限/ 序列/ 匹配/ 平均值/ 达到/ 4/ // 3/ ,/ 因而/ 很多/ 查询/ 需要/ 上升/ 到/ 接近/ 第/ 2/ 层/ 才能/ 向下/ 定位/ ,/ 不仅/ 增加/ 了/ 路由/ 长度/ ,/ 也/ 会/ 增加/ 这些/ 节点/ 的/ 压力/ ./ 通过/ 在/ 路由表/ 中/ 增加/ “/ 短链/ ”/ 可以/ 有效/ 解决/ 这个/ 问题/ ./ 在/ Quad/ 一个/ 顶层/ 象限/ 内/ ,/ 第/ 2/ 层/ 包括/ 最多/ 5/ 个/ 超级/ 节点/ ,/ 这些/ 节点/ 利用/ 邻居/ 路由表/ 可以/ 完成/ 互相/ 定位/ ,/ 其/ 作用/ 相当于/ “/ 短链/ ”/ ./ 在/ 一个/ 顶层/ 象限/ 内/ 的/ 第/ 3/ 层/ 最/ 多/ 包括/ 20/ 个/ 超级/ 节点/ ,/ 分/ 属于/ 4/ 个/ 不同/ 的/ 第/ 2/ 层子/ 象限/ ,/ 所以/ 第/ 3/ 层/ 一个/ 象限/ 内/ 的/ 超级/ 节点/ 只/ 需要/ 3/ 个/ “/ 短链/ ”/ 节点/ 就/ 可以/ 定位/ 到/ 其它/ 3/ 个/ 属于/ 不同/ 第/ 2/ 层子/ 象限/ 的/ 第/ 3/ 层/ 象限/ ,/ 在/ 这些/ 第/ 3/ 层/ 象限/ 中/ ,/ “/ 短链/ ”/ 节点/ 通过/ 邻居/ 路由表/ 可以/ 找到/ 和/ 资源/ ID/ 象限/ 序列/ 匹配/ 长度/ 为/ 3/ 的/ 超级/ 节点/ ./ 同理/ ,/ 在/ 一个/ 顶层/ 象限/ 内/ 的/ 第/ 4/ 层/ 最/ 多/ 包含/ 80/ 个/ 超级/ 节点/ ,/ 属于/ 16/ 个/ 第/ 3/ 层子/ 象限/ ,/ 第/ 4/ 层/ 的/ 超级/ 节点/ 只/ 需要/ 12/ 个/ “/ 短链/ ”/ 节点/ 就/ 可以/ 定位/ 到/ 属于/ 其它/ 12/ 个/ 第/ 3/ 个/ 象限/ 的/ 第/ 4/ 层/ 超级/ 节点/ (/ 其它/ 3/ 个/ 第/ 3/ 层/ 象限/ 的/ 第/ 4/ 层子/ 象限/ 可/ 直接/ 利用/ 邻居/ 路由表/ 定位/ )/ ,/ 这些/ “/ 短链/ ”/ 节点/ 通过/ 邻居/ 路由表/ 可以/ 找到/ 和/ 资源/ ID/ 象限/ 序列/ 匹配/ 长度/ 为/ 4/ 的/ 超级/ 节点/ ./ 因此/ 我们/ 只/ 需/ 在/ 第/ 3/ 层/ 超级/ 节点/ 设置/ 3/ 个/ “/ 短链/ ”/ 节点/ ,/ 在/ 第/ 4/ 层/ 超级/ 节点/ 设置/ 12/ 个/ “/ 短链/ ”/ 节点/ (/ 其它/ 层/ 不/ 需设/ “/ 短链/ ”/ )/ 就/ 可以/ 显著/ 提高/ 路由/ 效率/ ,/ 并/ 减小/ 上层/ 节点/ 压力/ ,/ 因为/ 象限/ 序列/ 匹配/ 值/ l/ 会/ 对/ 路由/ 长度/ 产生/ 2l/ 影响/ ,/ 并且/ Quad/ 拓扑/ 第/ 4/ 层/ 最/ 多/ 可/ 包含/ 320/ 个/ 超级/ 节点/ ,/ 平均/ 路由/ 压力/ 不大/ ./ 如果/ 只/ 设置/ 第/ 3/ 层/ 超级/ 节点/ 的/ 3/ 个/ “/ 短链/ ”/ ,/ 则/ 不/ 需/ 增加/ Quad/ 路由表/ 数量/ ,/ 只/ 需/ 将/ 象限/ 路由表/ 数组/ 项中/ 的/ 一个/ 节点/ 变成/ “/ 短链/ ”/ (/ 需要/ 增加/ “/ 短链/ ”/ 节点/ 象限/ 标识/ )/ ./ 此时/ ,/ 上升/ 阶段/ 最/ 多只/ 需要/ 上升/ 到/ 第/ 3/ 层/ 即可/ ,/ 不仅/ 缩短/ 了/ 上升/ 阶段/ 长度/ ,/ 而且/ 第/ 2/ 层/ 只/ 需承担/ 很小/ 的/ 路由/ 任务/ ./ 而/ 在/ Quad/ 拓扑/ 的/ 第/ 3/ 层/ ,/ 超级/ 节点/ 数量/ 最多/ 可达/ 80/ 个/ ,/ 也/ 可以/ 有效/ 缓解/ 超级/ 节点/ 路由/ 压力/ ./ (/ 2/ )/ 利用/ 结构化/ 索引/ 缓存/ ,/ 减小/ 下降/ 阶段/ 的/ 长度/ ./ 在/ Quad/ 中/ ,/ 随着/ 各层/ 超级/ 节点/ 的/ 不断/ 分裂/ ,/ 结构化/ 索引/ 不断/ 被/ 转移/ 到/ 更/ 低层/ 的/ 超级/ 节点/ ./ 所以/ 在/ 路由/ 下降/ 阶段/ 总是/ 要/ 到达/ 最低/ 层/ 才/ 可以/ 定位/ 到/ 存放/ 结构化/ 索引/ 的/ 目标/ 节点/ ./ 如果/ 在/ 结构化/ 索引/ 向下/ 转移/ 过程/ 中/ ,/ 上层/ 超级/ 节点/ 缓存/ 一定/ 数量/ 的/ 结构化/ 索引/ 副本/ ,/ 则/ 定位/ 过程/ 不/ 一定/ 要/ 下降/ 到/ 最低/ 层/ 超级/ 节点/ ,/ 在/ 下降/ 阶段/ 的/ 过程/ 中/ 就/ 有/ 可能/ 通过/ 倒排/ 索引/ 表/ 副本/ 查找/ 到/ 资源/ 信息/ ./ 7/ 模拟/ 验证/ 因为/ 非/ 结构化/ 超级/ 节点/ 拓扑/ 在/ 拓扑/ 构造/ 和/ 失效/ 修复/ 等/ 方面/ 比/ 结构化/ 超级/ 节点/ 拓扑/ 更具/ 成本/ 优势/ ,/ 所以/ 本文/ 将/ Quad/ 和/ 其中/ 较优/ 的/ 非/ 结构化/ 超级/ 节点/ 拓扑/ 进行/ 比较/ ./ 我们/ 在/ PeerSim/ ①/ 基础/ 上用/ Java/ 分别/ 实现/ 了/ Quad/ 和/ 类似/ 于/ Gnutella0/ ./ 6/ 版/ 的/ 两层/ 非/ 结构化/ 超级/ 节点/ 拓扑/ (/ 简称/ 为/ Gnu/ )/ 模拟程序/ ,/ 比较/ ①/ PeerSimSimulator/ ./ http/ :/ // // peersim/ ./ sourceforge/ ./ net/ // Page13/ 内容/ 包括/ 拓扑/ 构造/ 成本/ 、/ 调整/ 和/ 分裂/ 数/ 、/ 失效/ 修复/ 成本/ 3/ 个/ 方面/ ,/ 另外/ 我们/ 也/ 模拟/ 验证/ 了/ Quad/ 负载/ 均衡/ 特征/ ./ 模拟/ 中/ 两种/ 协议/ 的/ 节点/ 构造/ 方式/ 、/ 随机/ 函数/ 都/ 保持一致/ ,/ 节点/ 容量/ 服从/ Power/ -/ Law/ 规则/ ,/ 分布/ 指数/ 为/ 2.2/ ,/ 具体/ 参数/ 如表/ 5/ 所示/ ./ 参数/ NFCD/ α/ u/ β/ u/ α/ b/ β/ b/ 产生/ 的/ 消息/ 数/ ./ 生/ 的/ 消息/ 数/ ./ 7.1/ 拓扑/ 构造/ 成本/ 在/ Quad/ 拓扑/ 构造/ 中/ ,/ 节点/ 之间/ 的/ 交互/ 通过/ 消息传递/ 来/ 实现/ ,/ 我们/ 用/ 传递/ 的/ 消息/ 数来/ 表示/ 拓扑/ 构造/ 成本/ ,/ 具体/ 包含/ 以下/ 3/ 类/ :/ 的/ 消息/ 数/ ./ (/ 1/ )/ 请求/ 成本/ ,/ 节点/ 向/ 其它/ 节点/ 请求/ 加入/ 产生/ (/ 2/ )/ 接受/ 成本/ ,/ 节点/ 响应/ 其它/ 节点/ 的/ 加入/ 请求/ (/ 3/ )/ 移动/ 成本/ ,/ 叶/ 节点/ 在/ 超级/ 节点/ 之间/ 移动/ 产/ 由于/ 请求/ 成本/ 和/ 接受/ 成本/ 是/ 相对/ 应/ 的/ ,/ 因此/ 我们/ 在/ 模拟/ 中/ 只/ 考虑/ 接受/ 成本/ 和/ 移动/ 成本/ ./ Quad/ 和/ Gnu/ 拓扑/ 构造/ 产生/ 的/ 消息/ 成本/ 如图/ 6/ 和/ 图/ 7/ 所示/ ./ 图/ 6/ 比较/ 了/ 不同/ 规模/ 新/ 节点/ 加入/ 网络/ 时/ 产生/ 的/ 总/ 接受/ 成本/ 和/ 总/ 移动/ 成本/ ,/ 可以/ 看出/ Quad/ 在/ 这/ 两个/ 方面/ 均/ 低于/ Gnu/ ./ 例如/ 当/ 20000/ 个/ 新/ 节点/ 加入/ 时/ ,/ Quad/ 总/ 接受/ 成本/ 是/ 45145/ ,/ 总/ 移动/ 成本/ 是/ 25146/ ,/ 而/ Gnu/ 的/ 总/ 接受/ 和/ 总/ 移动/ 成本/ 分别/ 为/ 49742/ 和/ 29743/ ;/ 当/ 40000/ 个/ 新/ 节点/ 加入/ 时/ ,/ Quad/ 总/ 接受/ 成本/ 是/ 80734/ 而/ Gnu/ 是/ 94243/ ,/ 总/ 移动/ 成本/ 方面/ Quad/ 是/ 45735/ ,/ 小于/ Gnu/ 的/ 成本/ 54244/ ./ 图/ 7/ 比较/ 了/ 单个/ 节点/ 产生/ 的/ 最大/ 移动/ 成本/ 和/ 接受/ 成本/ ./ Quad/ 中/ 单个/ 节点/ 最大/ 移动/ 成本/ 在/ 不同/ 网络/ 规模/ 下/ 的/ 平均值/ 要/ 比/ Gnu/ 低/ 1.5/ 个/ 消息/ 数/ ./ 在/ 单个/ 节点/ 最大/ 接受/ 成本/ 方面/ ,/ Quad/ 要/ 明显/ 优于/ Gnu/ ,/ 如/ 40000/ 新/ 节点/ 加入/ 时/ ,/ 前者/ 成本/ 值为/ 592/ ,/ 后者/ 为/ 807/ ,/ 这/ 表明/ 和/ Gnu/ 相比/ ,/ Quad/ 中/ 节点/ 成为/ 热点/ 的/ 可能性/ 要/ 小/ 一些/ ./ 7.2/ 调整/ 与/ 分裂/ 数/ 为了/ 保证/ 超级/ 节点/ 之间/ 的/ 负载/ 均衡/ ,/ 超级/ 节点/ 会/ 通过/ 调整/ 和/ 分裂/ 转移/ 自身/ 负载/ ,/ 调整/ 是/ 在/ 超级/ 节点/ 间/ 转移/ 叶/ 节点/ 负载/ ,/ 会/ 增加/ 超级/ 节点/ 的/ 消息/ 处理/ 成本/ 并/ 影响/ 其/ 本地/ 非/ 结构化/ 资源/ 索引/ ,/ 而/ 分裂/ 会/ 产生/ 新/ 的/ 超级/ 节点/ ,/ 影响/ 超级/ 节点/ 路由表/ 和/ 资源/ 索引/ ,/ 因而/ 在/ 保证/ 拓扑/ 均衡/ 基础/ 上/ 减少/ 调整/ 和/ 分裂/ 数/ 有利于/ 降低/ 系统/ 负载/ ./ 图/ 8/ 对/ Quad/ 和/ Gnu/ 拓扑/ 调整/ 和/ 分裂/ 情况/ 进行/ 了/ 比较/ ,/ 从图/ 中/ 可以/ 看出/ ,/ Quad/ 和/ Gnu/ 在/ 分裂/ 次数/ 上/ 非常/ 接近/ ,/ 超级/ 节点/ 数占/ 总/ 节点/ 数/ 比例/ 均/ 保持/ 在/ 1.6/ %/ ~/ 1.8/ %/ 之间/ ./ 在/ 调整/ 次数/ 上/ ,/ Quad/ 比/ Gnu/ 要/ 低/ 很多/ ,/ 例如/ 当/ 加入/ 节点/ 数为/ 20000/ 时/ ,/ Quad/ 和/ Gnu/ 的/ 调整/ 数/ 分别/ 为/ 2502/ 和/ 7333/ ,/ 当/ 加入/ 节点/ 数为/ 40000/ 时/ ,/ Quad/ 和/ Gnu/ 的/ 调整/ 数为/ 5309/ 和/ 17223/ ,/ Quad/ 调整/ 次数/ 只/ 占/ Gnu/ 的/ 三分之一/ 左右/ ./ 这/ 表明/ ,/ 在/ 保持/ 拓扑/ 负载/ 均衡/ 上/ ,/ Quad/ 不/ 需要/ 进行/ 频繁/ 的/ 叶/ 节点/ 转移/ ./ Page147/ ./ 3/ 失效/ 修复/ 成本/ 由于/ P2P/ 网络/ 具有/ 高度/ 动态性/ ,/ 能否/ 有效/ 处理/ 节点/ 失效/ 对系统/ 性能/ 有/ 重要/ 影响/ ./ 图/ 9/ 和/ 图/ 10/ 显示/ 了/ 网络/ 规模/ 为/ 40000/ 时/ ,/ 超级/ 节点/ 和/ 叶/ 节点/ 在/ 不同/ 失效/ 比例/ 下/ 的/ 修复/ 成本/ ./ 图/ 9/ 显示/ 了/ 超级/ 节点/ 失效/ 情况/ ,/ 可以/ 看出/ ,/ Quad/ 在/ 不同/ 失效/ 比例/ 下/ 的/ 修复/ 成本/ 要远/ 小于/ Gnu/ ,/ 比如/ 当/ 超级/ 节点/ 失效/ 比率/ 为/ 30/ %/ 时/ ,/ Quad/ 和/ Gnu/ 修复/ 成本/ 分别/ 为/ 13119/ 和/ 40209/ ,/ 当/ 失效/ 比率/ 为/ 80/ %/ ,/ Quad/ 修复/ 成本/ 为/ 35077/ ,/ 而/ Gnu/ 修复/ 成本/ 多达/ 108999/ ,/ Quad/ 的/ 修复/ 成本/ 只/ 占/ Gnu/ 的/ 32/ %/ 左右/ ,/ 表明/ Quad/ 中/ 超级/ 节点/ 失效/ 对/ 拓扑/ 影响/ 较/ 小/ ./ 当叶/ 节点/ 失效/ 或/ 退出/ 使/ 超级/ 节点/ 负载/ 小于/ 负载/ 下限/ 率/ α/ b/ 时/ ,/ 会/ 引起/ 超级/ 节点/ 之间/ 的/ 调整/ 和/ 合并/ ./ 图/ 10/ 显示/ 不同/ 叶/ 节点/ 失效/ 比例/ 下/ 的/ 调整/ 和/ 合并/ 成本/ ./ 可以/ 看出/ ,/ 当/ 失效/ 比例/ 较/ 低时/ ,/ Quad/ 和/ Gnu/ 拓扑/ 修复/ 成本/ 大体/ 接近/ ,/ 但/ 当/ 失效/ 比例/ 持续/ 增加/ 时/ ,/ Gnu/ 失效/ 修复/ 成本/ 要/ 明显/ 超过/ Quad/ ,/ 例如/ 当叶/ 节点/ 失效/ 比例/ 为/ 60/ %/ 时/ ,/ Quad/ 和/ Gnu/ 的/ 失效/ 修复/ 成本/ 分别/ 为/ 834/ 和/ 1442/ ,/ 当叶/ 节点/ 失效/ 比例/ 为/ 80/ %/ 时/ ,/ 两者/ 的/ 修复/ 成本/ 分别/ 为/ 5434/ 和/ 6890/ ./ 这/ 表明/ Quad/ 虽然/ 具有/ 结构化/ 特征/ ,/ 但/ 在/ 处理/ 节点/ 失效/ 方面/ 仍/ 要/ 优于/ Gnu/ ./ 7.4/ 负载/ 均衡/ 在/ Quad/ 拓扑/ 中/ ,/ 当/ 超级/ 节点/ 过载/ 时/ ,/ 能/ 将/ 叶/ 节点/ 转移/ 给/ 负载/ 较轻/ 的/ 超级/ 节点/ ,/ 负载/ 过/ 低时/ ,/ 也/ 能/ 从/ 其它/ 超级/ 节点/ 移进/ 叶/ 节点/ ./ 通过/ 分裂/ 、/ 调整/ 和/ 合并/ 机制/ ,/ 各个/ 层次/ 和/ 各个/ 象限/ 的/ 超级/ 节点/ 负载/ 能/ 保持/ 相对/ 均衡/ ./ 图/ 11/ 显示/ 了/ Quad/ 在/ 不同/ 网络/ 规模/ 下/ 各个/ 层次/ 超级/ 节点/ 负载/ 情况/ ./ 由图/ 可知/ ,/ 各层/ 的/ 超级/ 节点/ 负载/ 率/ 在/ 0.5/ 到/ 0.88/ 之间/ ,/ 其中/ 1/ 层到/ 3/ 层/ 的/ 负载/ 比率/ 非常/ 接近/ ,/ 都/ 在/ 0.8/ 左右/ ,/ 4/ 层/ 在/ 0.75/ 左右/ ,/ 5/ 层/ 的/ 超级/ 节点/ 负载/ 率/ 维持/ 在/ 0.65/ 左右/ ,/ 6/ 层/ 由于/ 在/ 最低/ 层/ ,/ 超级/ 节点/ 比/ 其它/ 层/ 多一些/ 空闲/ 空间/ ,/ 超级/ 节点/ 负载/ 率为/ 0.51/ ./ 此外/ ,/ 在/ 不同/ 的/ 网络/ 规模/ 下/ ,/ 各层/ 负载/ 比率/ 变化/ 不/ 大/ ,/ 体现/ 了/ Quad/ 拓扑/ 具有/ 良好/ 的/ 负载/ 均衡性/ ./ 图/ 12/ 比较/ 了/ Quad/ 拓扑/ 在/ 不同/ 象限/ 的/ 超级/ 节点/ 负载/ 情况/ ,/ 数据/ 表明/ 4/ 个/ 象限/ 的/ 超级/ 节点/ 负载/ 率/ 差距/ 保持/ 在/ 10/ %/ 之内/ ,/ 如/ 网络/ 规模/ 在/ 20000/ 时/ ,/ 4/ 个/ 象限/ 的/ 超级/ 节点/ 负载/ 率/ 差别/ 不到/ 3.2/ %/ ,/ 同时/ 各个/ 象限/ 超级/ 节点/ 负载/ 比率/ 在/ 不同/ 网络/ 规模/ 下/ 也/ 保持/ 了/ 较/ 好/ 的/ 稳定性/ ,/ 差异/ 在/ 5/ %/ 之内/ ./ 8/ 结束语/ 本文/ 实现/ 了/ 一种/ 新型/ 超级/ 节点/ 拓扑/ Quad/ ,/ 其/ 创新/ 点/ 在于/ :/ (/ 1/ )/ 将/ 分层/ 象限/ 空间/ 应用/ 于/ P2P/ 超级/ 节/ Page15/ 点/ 拓扑/ 构造/ ,/ 在/ 保持/ 常数/ 度数/ 下/ 达到/ O/ (/ logN/ )/ 定位/ 性能/ ,/ 并/ 在/ 定位/ 时间/ 和/ 路由表/ 状态/ 空间/ 方面/ 获得/ 更好/ 的/ 权衡/ ./ (/ 2/ )/ 解决/ 了/ 结构化/ 超级/ 节点/ 拓扑/ 对/ 动态性/ 支持/ 不好/ 的/ 缺点/ ,/ 通过/ 位置/ 标识/ 降低/ 了/ 超级/ 节点/ 失效/ 带来/ 的/ 影响/ ./ (/ 3/ )/ 同时/ 支持/ 数据/ 定位/ 和/ 模糊/ 查询/ ./ (/ 4/ )/ 拓扑/ 具有/ 良好/ 的/ 容错/ 和/ 负载/ 均衡/ 机制/ ,/ 并/ 具有/ 较/ 低/ 的/ 构造/ 和/ 维护/ 成本/ ,/ 提高/ 了/ 应用/ 性能/ ./ 目前/ 在/ P2P/ 应用/ 方面/ ,/ 结构化/ 系统/ 因为/ 不/ 适应/ 高度/ 动态/ 环境/ 和/ 不/ 支持/ 模糊/ 查询/ 而/ 难以/ 大规模/ 部署/ 于/ 广域网/ 环境/ ./ Quad/ 通过/ 上述/ 改进/ ,/ 能够/ 更好/ 地/ 推动/ 超级/ 节点/ 结构/ 在/ P2P/ 文件共享/ 及/ 流媒体/ 等/ 领域/ 的/ 应用/ ./ 在/ 下/ 一步/ 工作/ 中/ ,/ 我们/ 将/ 继续/ 改善/ Quad/ 在/ 安全/ 和/ 路由/ 等/ 方面/ 性能/ ,/ 并/ 提高/ 其/ 语义/ 聚类/ 能力/ ,/ 使/ Quad/ 具有/ 更好/ 的/ 实用性/ ./ 

