Page1/ 面向/ SaaS/ 应用/ 基于/ 键值/ 对/ 模式/ 的/ 多/ 租户/ 索引/ 研究/ 孔兰菊/ 李庆忠史/ 玉良/ 王学/ (/ 山东大学/ 计算机/ 学院/ 济南/ 250101/ )/ 摘要/ 面向/ SaaS/ 应用/ 的/ 多/ 租户/ 数据库/ 为/ 满足/ 租户/ 的/ 数据/ 隔离/ 和/ 按/ 需/ 定制/ 的/ 需求/ ,/ 需要/ 提供/ 支持/ 隔离/ 和/ 易于/ 定制/ 的/ 数据/ 存储/ 机制/ 及/ 索引/ 机制/ ./ 基于/ 键值/ 对/ 存储/ 方式/ ,/ 提出/ 元/ 数据/ 驱动/ 的/ 映射/ 表/ 索引/ 模型/ ,/ 该/ 模型/ 根据/ 租户/ 定制/ 需求/ ,/ 为/ 租户/ 业务/ 数据/ 形成/ 各自/ 的/ 索引/ 元/ 数据/ ,/ 通过/ 元/ 数据/ 驱动/ 实现/ 了/ 索引/ 数据/ 的/ 隔离/ 及/ 定制/ 效果/ ;/ 给出/ 索引/ 的/ 维护/ 策略/ ,/ 根据/ 租户/ 数据/ 访问/ 请求/ 进行/ 索引/ 切片/ ,/ 以/ 逐渐/ 细化/ 的/ 索引/ 切片/ 作为/ 数据/ 访问/ 的/ 基本/ 单位/ ,/ 快速/ 返回/ 租户/ 结果/ 集/ ./ 实验/ 结果表明/ ,/ 该/ 方案/ 在/ 数据/ 访问/ 分布/ 均衡/ 的/ 情况/ 下/ ,/ 使/ 索引/ 维护/ 及/ 数据/ 访问/ 具有/ 较/ 好/ 的/ 总体/ 性能/ ./ 关键词/ 多/ 租户/ ;/ 索引/ ;/ 键值/ 对/ ;/ SaaS/ ;/ 结构化/ 数据/ 1/ 引言/ 在/ 面向/ SaaS/ [/ 1/ -/ 2/ ]/ 的/ 应用/ 中/ ,/ 多/ 租户/ 数据库/ 需要/ 提供/ 租户/ 之间/ 的/ 数据/ 隔离/ 及/ 按/ 需/ 定制/ 功能/ ,/ 同时/ ,/ 还要/ 在/ 性能/ 上/ 让/ 用户/ 有/ 比较/ 好/ 的/ 体验/ ./ 这/ 对/ 数据/ 的/ 存/ Page2/ 了/ 稀疏/ 表/ 模式/ 下/ 的/ 数据/ 透视/ 表/ 索引/ 以及/ 云/ 数据管理/ 基于/ HBase/ 存储/ 的/ 多维/ 索引/ 等/ ./ 稀疏/ 表/ 方式/ 在/ 支持/ 租户/ 定制/ 方面/ 受/ DBMS/ 的/ 限制/ ,/ 而/ HBase/ 存储/ 主要/ 面向/ 非/ 结构化/ 数据处理/ ./ 本文/ 的/ 研究/ 背景/ 为/ CRM/ 、/ HR/ 等/ 系统/ ,/ 以/ 结构化/ 数据/ 为主/ ./ 综合/ 国内外/ 研究成果/ ,/ 本文/ 采取/ 了/ 键值/ 对/ 模式/ 的/ 存储/ 方式/ ,/ 该/ 存储/ 方式/ 能/ 完美/ 地/ 支持/ 租户/ 定制/ 及/ 数据/ 隔离/ ,/ 并且/ 非常适合/ 于/ 描述/ 结构化/ 数据/ ,/ 面对/ 成千上万/ 的/ 租户/ ,/ 如何/ 实现/ 索引/ 的/ 定制/ 及/ 索引/ 数据/ 的/ 隔离/ 存储/ 都/ 成/ 了/ 需要/ 解决/ 的/ 问题/ ./ 在/ 现阶段/ ,/ 面向/ SaaS/ 应用/ 的/ 多/ 租户/ 数据管理/ 已经/ 成为/ 国内外/ 研究/ 的/ 热点/ ./ 文献/ [/ 1/ -/ 2/ ]/ 针对/ 数据/ 安全性/ 、/ 数据/ 可扩展性/ 等/ 方面/ 提出/ 并/ 分析/ 了/ 一些/ 设计模式/ ;/ 文献/ [/ 3/ ]/ 提出/ 了/ SaaS/ 应用/ 的/ 体系/ 架构/ ,/ 然后/ 提出/ 了/ 基于/ SaaS/ 模式/ 的/ 企业/ 公共服务/ 平台/ 的/ 3/ 个/ 紧密/ 相连/ 的/ 模型/ —/ —/ —/ 多用户/ 数据模型/ 、/ 元/ 数据管理/ 模型/ 和/ 安全/ 服务/ 模型/ ;/ 文献/ [/ 4/ ]/ 探讨/ 了/ 数据仓库/ 应用/ 在/ 云/ 数据/ 中/ 改进/ 索引/ 模式/ 以/ 减少/ 无效/ 处理/ 时间/ ,/ 提高/ 命中率/ ;/ 文献/ [/ 5/ ]/ 探讨/ 了/ 多/ 租户/ 数据/ 层/ 如何/ 支持/ 多/ 租户/ 服务/ 计算/ ;/ 文献/ [/ 6/ ]/ 提出/ 了/ 折叠/ 表/ 方式/ ,/ 并/ 对/ 各种/ 数据管理/ 方式/ 得出/ 了/ 较/ 详细/ 的/ 性能/ 数据/ 文献/ ;/ 文献/ [/ 7/ ]/ 采用/ 了/ 预定/ 义字段/ 机制/ 支持/ 扩展/ ,/ 在/ 查询/ 方面/ 提出/ 了/ 元/ 数据/ 驱动/ 、/ 外部/ 搜索引擎/ 、/ 次优/ 搜索/ 机制/ 等/ 理念/ ;/ 文献/ [/ 8/ ]/ 提出/ 了/ 如何/ 使用/ XML/ 来/ 支持/ 数据/ 定制/ 及/ 驱动/ ECA/ 模型/ ;/ 文献/ [/ 9/ ]/ 更是/ 在/ 2009/ 年/ 的/ SIGMOD/ 上/ 讨论/ 了/ 目前/ 主要/ 的/ 集中/ 多/ 租户/ 数据管理/ 方式/ ,/ 包括/ 稀疏/ 表/ 、/ 扩展/ 表/ 、/ XML/ 、/ 键值/ 对/ 等/ ./ 该/ 文献/ 经过/ 全面/ 地/ 论证/ 和/ 分析/ 后/ 认为/ ,/ 理想/ 的/ 多/ 租户/ 数据库/ 尚未/ 出现/ ,/ 还有/ 很多/ 的/ 问题/ 需要/ 研究/ ,/ 本文/ 主要/ 探讨/ 了/ 索引/ 方面/ 的/ 关键技术/ ./ 传统/ 的/ 索引/ 方式/ ,/ 在/ 多/ 租户/ 数据库/ 模式/ 下/ ,/ 可以/ 按照/ objectID/ 、/ columnNAME/ 及/ value/ 建立/ 复合/ 索引/ ,/ 针对/ key/ _/ search/ 这种/ 模式/ ,/ 可以/ 迅速/ 定位/ 到/ 某些/ 属性/ ,/ 并且/ 重/ 组成/ 一个/ 元组/ ;/ 对于/ key/ _/ search/ 的/ 范围/ 查询/ ,/ 通过/ key/ 定位/ 到/ 某个/ 元组/ ,/ 它/ 需要/ 大量/ 的/ 连接/ 才能/ 反回/ 结果/ 集/ ,/ 存在/ 性能/ 问题/ ;/ 对于/ 复合/ 索引/ 里边/ 的/ 次/ 关键字/ 的/ 查询/ ,/ 如果/ 想/ 快速/ 查询/ ,/ 就/ 必须/ 再次/ 创建/ 复合/ 索引/ ,/ 但/ 存储空间/ 巨大/ ,/ 否则/ 查询/ 性能/ 严重不足/ ./ Column/ _/ store/ [/ 10/ -/ 13/ ]/ 是/ 面向/ 数据仓库/ 的/ ,/ 基本上/ 是/ 以读/ 为主/ 的/ 应用/ ./ 数据仓库/ 有着/ 特殊/ 的/ 背景/ ,/ 它/ 由/ 维度/ 和/ 事实/ 构成/ ,/ 维度/ 通常/ 数量/ 有限/ ,/ 维度/ 的/ 组合/ 虽然/ 多/ ,/ 但是/ 最终/ 形成/ 的/ 方体/ 为/ 稀疏/ 型/ 的/ ./ 在/ 这种/ 前提/ 下/ ,/ monetDB/ 数据库/ 中/ 提出/ 了/ cracking/ [/ 14/ -/ 15/ ]/ 的/ 策略/ ,/ 在/ 查询/ 的/ 时候/ ,/ 建立/ 查询/ 列/ 的/ 副本/ ,/ 并/ 按照/ avl/ 树/ 的/ 思想/ 基于/ 每次/ 查询/ 动态/ 调整/ 元组/ 顺序/ ,/ 这是/ 查询/ 驱动/ 的/ 思想/ ./ 对于/ 以/ 事务处理/ 为主/ 的/ 多/ 租户/ 应用/ ,/ 每次/ 更新/ 都/ 要/ 及时/ 地/ 反应/ 出来/ ,/ 这种/ 查询/ 驱动/ 的/ 方式/ 存在/ 着/ 明显/ 的/ 缺陷/ ./ 本文/ 更多地/ 关注/ 了/ 数据库/ 更新/ 时/ 的/ 索引/ 维护/ 策略/ ./ Hbase/ [/ 16/ ]/ 是/ 一个/ 类似/ Bigtable/ 的/ 分布式/ 数据库/ ,/ 大部分/ 特性/ 和/ Bigtable/ 一样/ ,/ 是/ 一个/ 稀疏/ 的/ 、/ 长期/ 存储/ 的/ 、/ 多维度/ 的/ 、/ 排序/ 的/ 映射/ 表/ ./ 这/ 张表/ 的/ 索引/ 是/ 行/ 关键字/ 、/ 列/ 关键字/ 和/ 时间/ 戳/ ./ 每个/ 值/ 是/ 一个/ 不/ 解释/ 的/ 字符/ 数组/ ,/ 数据/ 都/ 是/ 字符串/ ,/ 不/ 支持/ 数据类型/ ./ 同一个/ 关系/ 里面/ 的/ 每/ 一行/ 数据/ 都/ 可以/ 有/ 截然不同/ 的/ 属性/ ,/ 为/ 动态/ 定制/ 属性/ 提供/ 了/ 一种/ 手段/ ./ Hbase/ 存在/ 的/ 问题/ 有/ 两点/ ,/ 首先/ Hbase/ 不是/ 多/ 租户/ 的/ ,/ 没有/ 提供/ 隔离/ 机制/ ;/ 其次/ ,/ Hbase/ 面向/ 的/ 是非/ 结构化/ 数据/ ,/ 每个/ 值/ 是/ 一个/ 不/ 解释/ 的/ 字符/ 数组/ ,/ 擅长于/ 关键字/ 搜索/ ,/ 它/ 不/ 可能/ 提供/ 基于/ 某个/ 属性/ 组/ 的/ 索引/ ,/ 而/ 结构化/ 数据/ 事务处理/ 需要/ 确切/ 的/ 解释/ 每个/ 属性/ 的/ 含义/ 并/ 对/ 其/ 进行/ 维护/ ./ 本文/ 更多地/ 讨论/ 了/ 结构化/ 数据/ 的/ 索引/ 机制/ ./ 稀疏/ 表/ 方式/ 建立/ 了/ 数据/ 透视/ 表/ 作为/ 索引/ ,/ 比较/ 有/ 代表性/ 的/ Salesforce/ 就/ 采取/ 了/ 这种/ 方式/ ./ 这种/ 索引/ 方式/ 解决/ 了/ 索引/ 列/ 数据/ 对象/ 同质/ 的/ 问题/ ,/ 但是/ 他/ 并/ 没有/ 深入探讨/ 透视/ 表与/ 稀疏/ 表/ 的/ 数据/ 同步/ 问题/ ,/ 也/ 无法/ 解决/ 透视/ 表/ 数量/ 暴涨/ 的/ 问题/ ./ 本文/ 基于/ 键值/ 对/ 存储/ 模式/ ,/ 分析/ 了/ 现有/ 索引/ 的/ 局限性/ ,/ 结合/ 稀疏/ 表/ 模式/ 下/ 数据/ 透视/ 表/ 的/ 思想/ ,/ 引入/ 了/ 数据/ 映射/ 表/ 索引/ 机制/ 及/ 切片/ 策略/ ,/ 提出/ 了/ 一种/ 用于/ 多/ 租户/ 数据库/ 的/ 面向/ 结构化/ 数据/ 的/ 映射/ 表/ 索引/ 结构/ 及/ 索引/ 维护/ 策略/ ./ 该/ 索引/ 结构/ 能/ 有效/ 地/ 支持/ 多/ 租户/ 定制/ 及/ 隔离/ 特征/ ,/ 并/ 能/ 提供/ 较/ 好/ 的/ 访问/ 性能/ ./ 本文/ 第/ 2/ 节/ 给出/ 键值/ 对/ 传统/ 索引/ 机制/ 在/ SaaS/ 应用/ 的/ 问题/ 分析/ ,/ 介绍/ 基于/ 键值/ 对/ 模式/ 的/ 多/ 租户/ 映射/ 表/ 索引/ 模型/ ;/ 第/ 3/ 节/ 讨论/ 索引/ 更新/ 策略/ ;/ 第/ 4/ 节/ 给出/ 上述/ 算法/ 的/ 实验/ 验证/ ;/ 第/ 5/ 节/ 给出/ 相关/ 工作/ ;/ 第/ 6/ 节/ 给出/ 本文/ 的/ 结论/ 与/ 展望/ ./ 2/ 基于/ 键值/ 对/ 模式/ 的/ 多/ 租户/ 索引/ 模型/ 2.1/ 键值/ 对/ 模式/ 介绍/ 在/ SaaS/ 模式/ 下/ ,/ 数据库/ 不但/ 要/ 提供/ 极高/ 的/ 性能/ ,/ 还要/ 支持/ 租户/ 隔离/ 而且/ 富于/ 扩展性/ ./ 多/ 租户/ 数据库/ 要/ 根据/ 环境/ 的/ 不同/ ,/ 比如/ 不同/ 的/ 租户/ 、/ 不同/ 的/ 工作/ 流程/ 、/ 不同/ 的/ 服务水平/ 协议/ 等/ 提供/ 易变性/ ./ 结合/ 国内/ Page3/ 外/ 研究/ 现状/ ,/ 本文/ 选择/ 了/ 键值/ 对/ 存储/ 方式/ 来/ 存储/ 业务/ 数据/ ./ 键值/ 对/ 方式/ 能/ 提供/ 较/ 好/ 的/ 易变性/ ,/ 在/ 键值/ 对/ 方式/ 下/ ,/ 每个/ 属性/ 都/ 存储/ 在/ 一个/ 长而窄/ 的/ 关系/ 里/ (/ 如图/ 1/ )/ ./ 租户/ 根据/ 自己/ 业务/ 的/ 需要/ ,/ 自由/ 定制/ 所/ 需/ 数据项/ ,/ 租户/ 的/ 定制/ 信息/ 被/ 保存/ 在/ 元/ 数据/ (/ Metadata/ )/ 里/ ./ 租户/ 定制/ 的/ 数据项/ 经过/ 逻辑/ 层/ 与/ 存储/ 层/ 模式/ 映射/ 后/ ,/ 被/ 统一/ 保存/ 在/ 数据/ 关系/ 里/ (/ DataTable/ )/ ./ 对应/ 于/ 租户/ 数据/ 可以/ 建立/ 传统/ 的/ 索引/ (/ Index/ )/ ,/ 如/ B/ +/ 树/ ,/ 以/ 方便/ 数据/ 存取/ ./ 如表/ 1/ 所示/ ,/ 租户/ 从/ 逻辑/ 层/ 看到/ 的/ 仍然/ 是/ 传统/ 关系/ 模式/ 的/ 表格/ ,/ 但是/ 在/ 实际/ 的/ 键值/ 对/ 存储/ 模式/ 里/ ,/ 基于/ 元/ 数据/ 信息/ ,/ 该/ 关系/ 通过/ 模式/ 映射/ 机制/ 被/ 透明/ 地/ 转换/ 到/ DataTable/ (/ 表/ 2/ )/ 中/ ./ RowIDABCD1234TenantIDTableIDRowIDColumnIDValue001R1A5001R1B2001R1C/ 张三/ 001R1D2008001R2A1001R2B3/ …/ 002R1B15/ …/ 在/ 键值/ 对/ 存储/ 下/ ,/ 可以/ 为/ 业务/ 数据/ 建立/ 全局/ 索引/ ,/ 如/ (/ TenantID/ ,/ TableID/ ,/ ColumnID/ ,/ Value/ )/ ./ 当/ 存取/ 单个/ 属性/ 时/ ,/ 根据/ 索引/ 能/ 直接/ 进行/ 操作/ ./ 当/ 用户/ 试图/ 根据/ 属性/ a/ 访问/ b/ 时/ ,/ 数据库/ 中/ 就/ 没有/ 合适/ 的/ 索引/ 可以/ 使用/ ,/ 只能/ 进行/ 顺序/ 扫描/ ./ 在/ 键值/ 对/ 存储/ 模式/ 下/ ,/ 即便/ 建立/ 多/ 租户/ 模式/ 下/ 常用/ 的/ 数据/ 透视/ 表/ 索引/ ,/ 也/ 必须/ 要/ 进行/ 多个/ 分支/ 的/ 查找/ ,/ 才能/ 同时/ 存取/ 属性/ a/ 和/ b/ ./ 在/ 键值/ 对/ 存储/ 下/ ,/ 也/ 可以/ 为/ 每个/ 租户/ 建立/ 数据/ 分区/ 以/ 支持/ 数据/ 隔离/ ,/ 同时/ 按/ 分区/ 建立/ 局部/ 索引/ 实现/ 索引/ 数据/ 隔离/ ./ 分区/ 机制/ 能/ 有效/ 地/ 支持/ 隔离/ ,/ 但/ 并/ 没有/ 提供/ 对/ 多/ 租户/ 特征/ 的/ 支持/ ,/ 每/ 增加/ 一个/ 租户/ 都/ 要/ 显式/ 地/ 执行/ 分区表/ 定义/ 及/ 索引/ 定义/ ,/ 受/ 数据库/ 模式/ 动态/ 改变/ 及/ 分区表/ 数目/ 上限/ 的/ 限制/ ,/ 无法/ 满足/ 多/ 租户/ 数据管理/ 的/ 需求/ ./ 根据/ 以上/ 分析/ 可以/ 看出/ ,/ 直接/ 把/ 传统/ 索引/ 应用/ 于/ 键值/ 对/ 模式/ 的/ 多/ 租户/ 数据库/ 面临/ 着/ 许多/ 问题/ ,/ 概括/ 起来/ 主要/ 有/ 以下/ 几个/ 方面/ :/ (/ 1/ )/ 传统/ 索引/ 是/ 在/ 关系/ 的/ 某个/ 属性/ 组上/ 建立/ 的/ 索引/ ,/ 该/ 索引/ 键值/ 所/ 包含/ 的/ 数据/ 对象/ 应该/ 是/ 同一/ 类型/ 的/ 数据/ ,/ 这/ 不/ 符合/ 基于/ 元/ 数据/ 的/ 键值/ 对/ 存储/ 模式/ 的/ 特点/ ./ 键值/ 对/ 存储/ 模式/ 利用/ 元/ 数据/ 存储/ 租户/ 的/ 数据/ 模式/ 信息/ ,/ 而/ 所有/ 的/ 业务/ 数据/ 都/ 被/ 存在/ 一个/ 纵向/ 生长/ 的/ 关系/ 里/ ,/ 它/ 的/ 数据类型/ 是/ 通用/ 的/ 数据类型/ ,/ 互相/ 之间/ 实质/ 上/ 拥有/ 不同/ 的/ 数据类型/ ,/ 不/ 具有/ 可比性/ ./ 同时/ ,/ 由于/ 关系/ 里/ 只有/ 一个/ 通用/ 属性/ ,/ 也/ 将/ 无法/ 自然/ 地/ 支持/ 多个/ 属性/ 的/ 联合/ 索引/ ./ (/ 2/ )/ 现存/ 索引/ 缺乏/ 对/ 多/ 租户/ 标识/ 的/ 直接/ 支持/ ,/ 而此/ 标识/ 是/ 数据/ 对象/ 是否/ 显示/ 的/ 决定/ 因子/ ./ 虽然/ 可以/ 通过/ 把/ 多/ 租户/ 标识/ 直接/ 包含/ 到/ 索引/ 的/ 键值/ 里/ 去/ ,/ 但/ 这种/ 大/ 重复/ 量/ 的/ 标识/ 信息/ 势必会/ 增大/ 索引/ 的/ 空间/ 需求/ ,/ 并且/ 也/ 无法/ 自然/ 地/ 支持/ 租户/ 之间/ 索引/ 隔离/ 存储/ 的/ 需求/ ./ 综上所述/ ,/ 目前/ 索引/ 只能/ 用于/ 多/ 租户/ 数据库/ 中/ 按键/ 值/ 存取/ 某个/ 元组/ 的/ 情况/ ,/ 无法/ 直接/ 支持/ 租户/ 隔离/ 、/ 租户/ 模式/ 不同/ 、/ 租户/ 按照/ 范围/ 进行/ 存取/ 的/ 情况/ ./ 本文/ 提出/ 了/ 键值/ 对/ 模式/ 下/ 的/ 多/ 租户/ 索引/ 模型/ ./ 2.2/ 基于/ 键值/ 对/ 模式/ 的/ 多/ 租户/ 索引/ 模型/ 本文/ 对/ 键值/ 对/ 模式/ 的/ 多/ 租户/ 数据库/ 进行/ 了/ 扩展/ ,/ 增加/ 了/ 基于/ 元/ 数据/ 的/ 映射/ 表/ 索引/ 机制/ (/ 如图/ 2/ 虚线/ 框内/ )/ ,/ 索引/ 模型/ 包含/ 索引/ 元/ 数据/ 和/ 索引/ 数据/ ,/ 索引/ 元/ 数据/ 保存/ 在/ MappingColumn/ 及/ MappingSet/ 中/ ,/ 索引/ 数据/ 保存/ 在/ MappingIndex/ 及/ Mapping/ -/ Pending/ 中/ ./ 索引/ 元/ 数据/ 根据/ 定制/ 可/ 纵向/ 生长/ ,/ 不会/ 受限于/ 租户/ 属性/ 的/ 数目/ ;/ 索引/ 数据/ 由元/ 数据/ 驱动/ ,/ 同/ Page4/ 样可/ 纵向/ 生长/ ,/ 不会/ 受限于/ 租户/ 业务/ 数据量/ 的/ 影响/ ./ 本文/ 映射/ 表/ 索引/ 存储/ 于/ 系统/ 缓存/ (/ Cache/ )/ 中/ ,/ 并/ 没有/ 图/ 2/ 扩展/ 后/ 的/ 多/ 租户/ 数据库/ 模型/ 下边/ 给出/ 本/ 模型/ 相关/ 的/ 定义/ :/ 定义/ 1/ ./ Metadata/ ./ 表示/ 元/ 数据/ ,/ 用于/ 保存/ 各/ 租户/ 的/ 数据/ 模式/ ,/ 本/ 模型/ 中/ 用/ 关系/ 表/ Tables/ 、/ Columns/ 、/ MappingColumn/ 、/ MappingSet/ 存储/ ./ 元/ 数据/ 为/ 模式/ 映射/ 提供/ 支持/ ,/ 本文/ 基于/ 元/ 数据/ 把/ 用户/ 请求/ 透明/ 地/ 转换/ 为/ 键值/ 对/ 模式/ 下/ 的/ 操作/ ./ Tables/ 存储/ 关系/ 定义/ ,/ Columns/ 存储/ 关系/ 的/ 属性/ 定义/ ,/ MappingColumn/ 存储/ 所有/ 的/ 索引/ 列/ 及其/ 渐进式/ 的/ 索引/ 更新过程/ ,/ MappingSet/ 存储/ 与/ 索引/ 列/ 相关/ 的/ 映射/ 定义/ ./ 本/ 方案/ 中以/ 顺序存储/ 的/ 切片/ 点/ 列表/ (/ Pivots/ )/ 来/ 表示/ 索引/ 更新过程/ ,/ 用/ CurrentPivot/ 表示/ 某个/ 映射/ 当前/ 的/ 切片/ 点/ ,/ 在/ 本/ 模型/ 中/ 一般/ 是/ 数据/ 访问/ 请求/ 的/ 参数/ ./ Metadata/ =/ {/ Tables/ ,/ Columns/ ,/ MappingColumn/ ,/ MappingSet/ }/ ,/ Tables/ =/ (/ TenantID/ ,/ TableID/ ,/ Tablename/ )/ ,/ Columns/ =/ (/ TenantID/ ,/ TableID/ ,/ ColumnID/ ,/ ColumnName/ ,/ DataType/ ,/ Length/ ,/ Nullable/ )/ ,/ (/ TenantID/ ,/ TableID/ ,/ Column1/ ,/ Pivots/ )/ ,/ Column1/ ,/ Column2/ ,/ CurrentPivot/ )/ ,/ MappingColumn/ =/ MappingSet/ =/ (/ TenantID/ ,/ MappingID/ ,/ TableID/ ,/ Pivots/ =/ {/ Value/ |/ Value/ ∈/ Π/ Column1/ (/ σ/ TenantID/ =/ 直接/ 实现/ 于/ 关系数据库/ 的/ 底层/ ./ currentTenant/ ∧/ TableID/ =/ currentTable/ (/ R/ )/ )/ }/ ./ 定义/ 2/ ./ DataTable/ ./ 表示/ 数据表/ ,/ 以/ 键值/ 对/ 方式/ 存储/ 租户/ 业务/ 数据/ ,/ 本/ 模型/ 中/ 用/ 关系/ 表/ DataTable/ 来/ 存储/ ./ DataTable/ =/ (/ TenantID/ ,/ TableID/ ,/ ColumnName/ ,/ Value/ )/ ./ 定义/ 3/ ./ MappingIndex/ ./ 表示/ 映射/ 表/ 索引/ ,/ 用来/ 存储/ 索引/ 列/ A/ 与/ B/ 的/ 关系/ ,/ 本/ 模型/ 中该/ 索引/ 存储/ 在/ 缓存/ 中/ ./ MappingIndex/ =/ (/ TenantID/ ,/ MappingID/ ,/ Column1/ ,/ Column2/ )/ ./ 映射/ 表/ 索引/ 在/ 缓存/ 中/ 的/ 实际/ 存储/ 如下/ :/ MappingIndex/ (/ A/ ,/ B/ )/ =/ {/ node/ }/ node/ =/ (/ P0/ ,/ (/ K1/ ,/ V1/ ,/ P1/ )/ ,/ …/ ,/ (/ Km/ ,/ Vm/ ,/ Pm/ )/ )/ 0/ </ i/ </ m/ +/ 1/ ,/ (/ Ki/ ,/ Vi/ )/ ∈/ Π/ A/ ,/ B/ (/ σ/ TenantID/ =/ currentTenant/ ∧/ / pi/ =/ node/ ./ 在/ 第一次/ 执行/ 映射/ 表/ 索引/ 更新/ 时/ ,/ 需要/ 花费/ 时间/ 和/ 资源/ 来/ 为此/ 做/ 准备/ ,/ 为/ 减少/ 准备/ 时间/ ,/ 本文/ 采取/ 了/ 渐进式/ 更新/ 映射/ 表/ 的/ 方式/ ,/ 为了/ 记录/ 每次/ 更新/ 所/ 产生/ 的/ 索引/ 切片/ (/ 参见/ 定义/ 6/ )/ ,/ 本/ 模型/ 通过/ MappingColumn/ 记录/ 某一/ 属性/ 的/ 切片/ 列表/ ,/ 并/ 通过/ MappingSet/ 里/ 的/ CurrentPivot/ 记录/ 了/ 某/ 一映/ Page5/ 定义/ 4/ ./ MappingPending/ ./ 表示/ 索引/ 缓冲区/ ,/ 用来/ 缓存/ 待/ 插入/ 的/ 索引/ 列/ A/ 与/ B/ 的/ 关系/ ,/ 等/ 该/ 数据/ 需要/ 被/ 访问/ 的/ 时候/ ,/ 合并/ 到/ MappingIndex/ 中/ ./ MappingPending/ =/ (/ TenantID/ ,/ MappingID/ ,/ Column1/ ,/ Column2/ )/ ./ 为/ 提高/ 更新/ 速度/ ,/ 索引/ 缓冲区/ 只有/ 追加/ 操作/ ,/ 不/ 考虑/ 有序性/ ./ 定义/ 5/ ./ MappingSet/ (/ A/ )/ ./ 表示/ MappingSet/ 的/ 关于/ 属性/ A/ 的/ 一个/ 子集/ ,/ 表示/ 的/ 是/ 当前/ 租户/ 当前/ 应用/ 建立/ 在/ A/ 上/ 的/ 索引/ ,/ 描述/ 了/ 索引/ 列/ A/ 和/ 其他/ 列/ 的/ 两/ 两/ 关系/ ./ MappingSet/ (/ A/ )/ =/ {/ MappingIndex/ (/ A/ ,/ X/ )/ |/ X/ ∈/ Π/ columnName/ (/ σ/ TenantID/ =/ currentTenant/ ∧/ TableID/ =/ currentTable/ (/ columns/ )/ )/ }/ ./ MappingSet/ (/ A/ )/ 的/ 缓存/ 需求/ 取决于/ 所属/ Table/ 的/ 列/ 的/ 数目/ ,/ 即/ |/ MappingSet/ (/ A/ )/ |/ =/ count/ (/ column/ )/ ,/ 这/ 将/ 是/ 一个/ 很大/ 的/ 代价/ ./ 出于/ 上述/ 考虑/ ,/ 本文/ 的/ MappingColumn/ (/ A/ )/ 在/ 租户/ 定制/ 索引/ 的/ 时候/ 建立/ ,/ 但是/ 具体/ 包含/ 的/ MappingSet/ (/ A/ ,/ X/ )/ 则/ 根据/ 具体/ 的/ 查询/ 驱动/ 建立/ ,/ 这样/ 对于/ 一些/ 不/ 经常/ 用/ 的/ 数据/ 就/ 不会/ 过早地/ 占用/ 资源/ ./ 射/ 的/ 最新/ 切片/ 点/ ./ 定义/ 6/ ./ Slice/ ./ 切片/ ,/ 是/ MappingIndex/ 的/ 一个/ 子集/ ,/ 表示/ 的/ 是/ 当前/ 租户/ 当前/ 应用/ 根据/ 租户/ 请求/ 进行/ 分片/ 后/ 形成/ 的/ 映射/ 集合/ ./ 3/ 基于/ 键值/ 对/ 模式/ 的/ 多/ 租户/ 索引/ 维护/ 策略/ 租户/ 定制/ 索引/ 时/ ,/ 系统/ 把/ 索引/ 结构/ 映射/ 到/ 索引/ 元/ 数据/ 中/ ./ 基于/ 索引/ 元/ 数据/ 的/ 映射/ ,/ 索引/ 数据共享/ 地/ 存储/ 在/ 一个/ 索引/ 表中/ ,/ 首先/ 屏蔽/ 了/ 多/ 租户/ 索引/ 模式/ 的/ 差异/ ,/ 其次/ 有效/ 地/ 解决/ 了/ 传统/ 数据/ 透视/ 表/ 数目/ 过多/ 导致/ 性能/ 下降/ 的/ 问题/ ,/ 最后/ 能/ 解决/ 索引/ 数据/ 中/ 标识/ 性/ 信息/ (/ 如/ TableID/ ,/ ColumnID/ )/ 重复/ 存储/ 的/ 问题/ ,/ 节约/ 了/ 索引/ 数据/ 存储空间/ ./ 访问/ 数据/ 时/ ,/ 根据/ 访问/ 参数/ 对/ 索引/ 数据/ 进行/ 切片/ ,/ 同一个/ 切片/ 内部/ 的/ 数据/ 含义/ 一致/ ,/ 解决/ 了/ 传统/ 索引/ 中/ 索引/ 难以/ 理解/ 及/ 按/ 租户/ 标识/ 进行/ 过滤/ 的/ 问题/ ./ 关键/ 过程/ 1/ ./ CreateTable/ ./ 用于/ 在/ 多/ 租户/ 数据库/ 中/ 创建/ 表/ ,/ 本/ 模型/ 中/ 把/ 命令/ 转化/ 为/ 针对/ 元/ 数据/ 的/ 操作/ ./ insertintotables/ (/ TenantID/ ,/ TableID/ ,/ Tablename/ )/ insertintocolumns/ (/ TenantID/ ,/ TableID/ ,/ ColumnName/ ,/ DataType/ ,/ Length/ ,/ Null/ )/ 关键/ 过程/ 2/ ./ CreateIndex/ ./ 表示/ 在/ 多/ 租户/ 数据库/ 中/ 创建/ 映射/ 表/ 索引/ ,/ 需要/ 根据/ 租户/ 对/ table/ 的/ 元/ 数据/ 描述/ ,/ 来/ 创建/ 各自/ 的/ 索引/ ./ createindexidxontablex/ (/ A/ )/ →/ createMappingColumn/ (/ A/ )/ ;/ →/ insertintoMappingColumn/ (/ (/ TenantID/ ,/ TableID/ ,/ 循环/ 插入/ 产生/ 多个/ MappingID/ :/ insertintoMappingSet/ (/ TenantID/ ,/ MappingID/ ,/ 对于/ 表/ 2/ 中/ 的/ 数据/ ,/ 假设/ 租户/ 001/ 定制/ A/ 为/ 索引/ 列/ ,/ 租户/ 002/ 定制/ B/ 为/ 索引/ 列/ ,/ 则/ 当前/ 模型/ 中/ 实际/ 存储/ 中/ 应该/ 只有/ MappingColumn/ 插入/ 了/ 索引/ 信息/ ,/ MappingSet/ 和/ MappingIndex/ 都/ 会/ 到/ 真正/ 使用/ 的/ 时候/ 才/ 会/ 插入/ 信息/ ./ 如表/ 3/ 所示/ ./ TenantIDTableIDColumnIDPivots0010023/ ./ 1/ 映射/ 表/ 索引/ 维护/ 策略/ 在/ 事务性/ 的/ SaaS/ 应用/ 中/ ,/ 业务/ 数据/ 持久/ 化/ 操作/ 频繁/ ,/ 如果/ 没有/ 好/ 的/ 索引/ 更新/ 策略/ ,/ 在/ 实时性/ 要求/ 较/ 高/ 的/ 业务/ 管理系统/ 里/ 是/ 不/ 可行/ 的/ ,/ 本文/ 提出/ 了/ 按/ 需/ 更新/ 映射/ 表/ 索引/ 的/ 策略/ ./ 业务/ 数据/ 更新/ 时/ ,/ 只/ 需要/ 更新/ 映射/ 表/ 索引/ 缓冲区/ ;/ 业务/ 数据/ 查询/ 时/ ,/ 首先/ 根据/ 元/ 数据/ 进行/ 切片/ 对齐/ ,/ 然后/ 检查/ 索引/ 缓冲区/ 是否/ 有/ 缓存数据/ 需要/ 合并/ ,/ 再/ 按照/ 索引/ 进行/ 查询/ ,/ 并/ 返回/ 结果/ ./ 基于/ 第/ 3/ 节/ 的/ 形式化/ 定义/ ,/ 本文/ 设计/ 了/ 如下/ 的/ 索引/ 按/ 需/ 更新/ 算法/ 及/ 相应/ 的/ 查询/ 算法/ ./ 算法/ 1/ ./ 数据/ 更新/ 算法/ ./ 输入/ :/ insertintoR/ (/ A/ ,/ B/ ,/ C/ )/ Values/ (/ v1/ ,/ v2/ ,/ v3/ )/ 输出/ :/ null1/ ./ 获取/ 当前/ TenantID/ ;/ 2/ ./ 更新/ 数据库/ 中/ 的/ 业务/ 数据/ ;/ 3/ ./ 根据/ TenantID/ 和/ ColumnID/ 获取/ MappingColumn/ 中/ 对应/ 的/ 索引/ 列/ ;/ for/ 每/ 一个/ 索引/ 列/ (/ ColumnID/ )/ 查找/ MappingIndex/ 及其/ MappingPending/ ;/ 对/ MappingPending/ 追加/ 上/ 对应/ column1/ 、/ Page6next/ 该/ 算法/ 只/ 对/ 已经/ 创建/ 映射/ 表/ 索引/ 的/ 关系/ 进行/ 处理/ ,/ 如果/ 插入/ 时/ 尚未/ 建立/ 索引/ ,/ 则/ 会/ 在/ 首次/ 查询/ 的/ 时候/ 生成/ 索引/ 数据/ ./ 2.1/ 若/ 无/ ,/ 认为/ 无/ 索引/ ,/ 返回/ createMappingSet/ (/ A/ ,/ B/ )/ 算法/ 2/ ./ 数据/ 查询/ 算法/ ./ 输入/ :/ selectBfromRwherev1/ </ A/ </ v2/ 输出/ :/ 符合条件/ 的/ B/ 的/ 集合/ 1/ ./ 获取/ 当前/ TenantID/ ;/ 2/ ./ 根据/ TenantID/ 获取/ MappingColumn/ (/ A/ )/ 3/ ./ ifMappingSet/ (/ A/ ,/ B/ )/ =/ null/ ,/ then4/ ./ 检查/ MappingIndex/ (/ A/ ,/ B/ )/ ,/ 根据/ MappingColumn/ (/ A/ )/ 5/ ./ 检查/ MappingPending/ (/ A/ ,/ B/ )/ ,/ 若有/ ,/ 则/ 调用/ 算法/ 3/ ;/ 6/ ./ 检查/ MappingColumn/ (/ A/ )/ ,/ 看/ 是否/ 存在/ v1/ ,/ v2/ 的/ 切/ if/ 不/ 存在/ v1thenendifif/ 不/ 存在/ v2thenendif7/ ./ 返回/ 位于/ v1/ ,/ v2/ 之间/ 的/ B/ 的/ 值/ ./ 该/ 算法/ 以/ 切片/ 为/ 数据/ 访问/ 的/ 基本/ 单位/ ,/ 能/ 直接/ 定位/ 到/ 要/ 访问/ 的/ 1/ ~/ 2/ 个/ 切片/ ,/ 在/ 进行/ 一定/ 次数/ 的/ 切片/ 后/ ,/ 能/ 有效/ 地/ 提高/ 访问/ 性能/ ./ 算法/ 3/ ./ 索引/ 合并/ 算法/ ./ 输入/ :/ MappingIndex/ (/ A/ ,/ B/ )/ ,/ MappingPending/ (/ A/ ,/ B/ )/ 输出/ :/ 合并/ 以后/ 的/ MappingIndex/ (/ A/ ,/ B/ )/ 1/ ./ 遍历/ MappingIndex/ 的/ 所有/ slice/ ,/ 2/ ./ 若/ 属于/ ,/ 直接/ 将/ 该项/ 插入/ 到/ 该/ slice/ 第一个/ 位置/ ,/ 结束/ ;/ 3/ ./ 若/ 不/ 属于/ ,/ 再/ 判断/ 前面/ 的/ slice/ ,/ 3.2/ 映射/ 表/ 索引/ 算法/ 分析/ 4/ ./ 删除/ 缓冲区/ 里/ 的/ MappingPending/ (/ A/ ,/ B/ )/ 本文/ 提出/ 的/ 算法/ 是/ 正确/ 而/ 完备/ 的/ ./ 证明/ 如下/ :/ 中有/ 记录/ ;/ 会/ 进入/ 索引/ 中/ ;/ (/ 1/ )/ 对于/ 任意/ 索引/ 列/ x/ ,/ 必然/ 在/ MappingCoulmn/ (/ 2/ )/ 数据库/ 更新/ 时/ 更新/ 的/ 数据/ 在/ 被/ 查询/ 时/ 一定/ 若/ 更新/ 时/ 就/ 已经/ 存在/ 映射/ (/ x/ ,/ y/ )/ ,/ 则/ 所/ 更新/ 数据/ 会/ 保存/ 到/ 索引/ 缓冲区/ 中/ ,/ 当/ (/ x/ ,/ y/ )/ 被/ 访问/ 时/ ,/ 算法/ 2/ 会/ 合并/ 索引/ 缓冲区/ 到/ MappingIndex/ 中/ ./ 若/ 还/ 不/ 存在/ 映射/ (/ x/ ,/ y/ )/ ,/ 则/ 当/ x/ ,/ y/ 被/ 查询/ 的/ 时候/ ,/ 算法/ 2/ 会/ 根据/ DataTable/ 创建/ x/ ,/ y/ 的/ 映射/ 关系/ ,/ 并/ 根据/ MappingColumn/ 里/ 的/ 切片/ 列表/ 补齐/ 切片/ 工作/ ,/ 从而/ 存在/ 于/ MappingIndex/ 中/ ./ (/ 3/ )/ 在/ 查询/ 时/ ,/ 由于/ 各/ 映射/ 表在/ 查询/ 之前/ 都/ 进行/ 了/ 切片/ 对齐/ 工作/ ,/ 如/ 要/ 返回/ 多个/ 属性/ ,/ 直接/ 根据/ 切片/ 进行/ 选择/ 以后/ 的/ 连串/ 即/ 为/ 结果/ ;/ (/ 4/ )/ 在/ 查询/ 时/ ,/ 如果/ 要/ 根据/ 多个/ 条件/ 进行/ 查询/ ,/ 可以/ 在/ 连串/ 中/ 依次/ 进行/ 过滤/ ,/ 而/ 不/ 需要/ 进行/ 其它/ 分支/ 的/ 查找/ ./ 综上所述/ ,/ 本/ 算法/ 是/ 正确/ 而/ 完备/ 的/ ./ 3.3/ 映射/ 表/ 索引/ 算法/ 执行/ 结果/ 对于/ 表/ 3/ 中/ 建立/ 的/ 索引/ ,/ 一种/ 可能/ 的/ 查询/ 序列/ 为/ A/ >/ 2/ ,/ A/ >/ 6/ 索引/ 切片/ 序列/ 为/ 2/ 、/ 6/ ,/ 结果/ 如表/ 4/ 所示/ ,/ MappingColumn/ 中/ 的/ pivots/ 也/ 变为/ 2/ 、/ 6/ ,/ 此时/ 的/ 缓存/ 中/ ,/ 可以/ 很/ 方便/ 地/ 返回/ AB/ 的/ 值/ ,/ 而/ 无需/ 进行/ 多/ 分支/ 查找/ ./ 在/ 访问/ 到/ AC/ 的/ 数据/ 时/ ,/ 会/ 按/ 需/ 建立/ AC/ 的/ 映射/ 关系/ ,/ 适应/ 了/ 多/ 租户/ 数据/ 模式/ 差异/ 及/ 工作/ 流程/ 差异/ 的/ 需求/ ./ TenantIDTableIDColumnIDPivots001002TenantIDTableIDMappingIDColumn1Column2CurrentPivot001RM01AB6TenantIDMappingIDColumn1Column2001M01001M01001M01001M01TenantIDMappingIDColumn1Column2001M01001M01001M01001M01Page74/ 实验/ 结果/ 与/ 分析/ 本文/ 建立/ 了/ 采用/ 键值/ 对/ 共享/ 模式/ 存储/ 的/ 原型/ 系统/ 来/ 验证/ 映射/ 表/ 索引/ 机制/ ./ 本文/ 中/ 基于/ 关系数据库/ ,/ 封装/ 了/ 一层/ 元/ 数据/ 驱动/ 的/ 数据/ 引擎/ ,/ 实现/ SQL/ 重写/ 和/ 映射/ 表/ 索引/ 的/ 维护/ 工作/ ./ 本文/ 的/ 实验/ 环境/ 如下/ :/ 数据库/ 服务器/ :/ HP/ 服务器/ ,/ CPU/ 为/ 4/ ×/ 2.26/ ,/ 应用服务器/ :/ 联想/ ,/ CPU/ 为/ 2/ ×/ 2.26/ ,/ 内存/ 为/ 客户机/ :/ 联想/ ,/ CPU/ 为/ 2/ ×/ 2.26/ ,/ 内存/ 为/ 2GB/ ,/ 内存/ 为/ 4GB/ ,/ 硬盘/ 为/ 500GB/ ./ 8GB/ ,/ 硬盘/ 为/ 500GB/ ./ 硬盘/ 为/ 100GB/ ./ 为了/ 更好/ 地/ 对比/ 商业/ 数据库/ 和/ 实验室/ 系统/ 的/ 区别/ ,/ 本文/ 基于/ ORACLE/ 和/ MYSQL/ 分别/ 做/ 了/ 实验/ ./ 数据库/ 版本/ ORACLE10/ ./ 2.1/ ./ 1/ (/ 图/ 1/ ~/ 图/ 6/ )/ ,/ MYSQL5/ ./ 1.47/ (/ 图/ 7/ )/ ./ 视图/ 层/ 每个/ 关系/ 模式/ 具有/ 50/ 个/ 属性/ ,/ 且/ 指定/ 其/ 第一个/ 属性/ 为/ 索引/ 属性/ ./ 录/ ,/ DataTable/ 上/ 有/ 主码/ 索引/ ./ DataTable/ 中/ 每个/ 租户/ 平均/ 拥有/ 90000/ 条记/ 本文/ 从/ 以下/ 几个/ 方面/ 作/ 了/ 实验/ 验证/ :/ (/ 1/ )/ 固定/ 并发/ 租户/ 数目/ ,/ 比较/ 无/ 映射/ 表/ 方式/ 、/ 映射/ 表/ 索引/ 方式/ 的/ 修改/ 、/ 修改/ 后/ 查询/ 的/ 性能/ ./ (/ a/ )/ 由/ 100/ 个/ 租户/ 共同/ 发起/ insert/ 和/ delete/ ,/ 每个/ 租户/ 发起/ 100/ 次/ 修改/ ,/ 参数/ 均匀/ 变换/ ,/ 以/ 保证/ 能/ 均匀/ 地/ 访问/ 各/ 切片/ ./ 例句/ 如下/ :/ insertintoR/ (/ A/ ,/ B/ ,/ C/ )/ Values/ (/ 4.5/ ,/ 30/ )/ ;/ insertintoR/ (/ A/ ,/ B/ ,/ C/ )/ Values/ (/ 1800.200/ ,/ 1500/ )/ ;/ insertintoR/ (/ A/ ,/ B/ ,/ C/ )/ Values/ (/ 2500.100/ ,/ 500/ )/ ./ 实验/ 效果/ (/ 图/ 3/ )/ 表明/ 按/ 需/ 更新/ 和/ 即时/ 更新/ 比/ 普通/ 更新/ 的/ 情况/ 要/ 稍微/ 差/ 一些/ ,/ 但/ 按/ 需/ 更新/ 比/ 即时/ 更新/ 要/ 好/ ,/ 这是/ 符合/ 实验/ 情况/ 的/ ,/ 并且/ 也/ 是/ 可以/ 接受/ 的/ ./ 即时/ 更新/ 索引/ 方式/ 和/ 按/ 需/ 更新/ 索引/ 方式/ ,/ 除了/ 更新/ 数据/ 还要/ 更新/ 映射/ 表/ ,/ 在/ 原有/ 代价/ 基础/ 上/ ,/ 增加/ 了/ 映射/ 表/ 索引/ 的/ 维护/ 代价/ ,/ 分别/ 是/ 100ms/ 和/ 50ms/ 左右/ ./ 而/ 在/ 普通/ 更新/ 的/ 方式/ 下/ ,/ 无需/ 维护/ 映射/ 表/ 索引/ ,/ 也/ 就/ 没有/ 额外/ 的/ 维护/ 代价/ ,/ 因此/ 维护/ 代价/ 仅/ 包含/ 插入/ 数据/ 的/ 时间/ 及/ 建立/ 主码/ 的/ 时间/ ,/ 一般/ 是/ 25ms/ 左右/ ./ 相应/ 在/ 图/ 4/ 中/ ,/ 能/ 清晰/ 地/ 看出/ 其/ 查询/ 代价/ 一般/ 在/ 80ms/ 左右/ ./ 在/ 应用/ 中/ 的/ 读/ 操作/ 通常/ 远远/ 大于/ 写/ 操作/ ,/ 因此/ 本文/ 认为/ 在/ 此/ 耗费/ 的/ 代价/ 是/ 可以/ 接受/ 的/ ./ (/ b/ )/ 由/ 100/ 个/ 租户/ 共同/ 发起/ 查询/ ,/ 每个/ 租户/ 发起/ 100/ 次/ 查询/ ,/ 查询/ 参数/ 在/ 业务/ 数据/ 的/ 最小值/ 和/ 最大值/ 之间/ 均匀/ 变换/ ,/ 比较/ 更新/ 后/ 对/ 查询/ 的/ 影响/ ./ 实验/ 效果/ (/ 图/ 4/ )/ 表明/ 在/ 查询/ 时/ 按/ 需/ 更新/ 索引/ 方式/ 和/ 即时/ 更新/ 索引/ 方式/ 都/ 要/ 优于/ 普通/ 索引/ 方式/ ,/ 按/ 需/ 方式/ 与/ 即时/ 方式/ 差别/ 不是/ 很大/ ./ 普通/ 查询/ 则/ 因为/ 无法/ 实现/ 隔离/ 的/ 问题/ ,/ 查询/ 代价/ 远高于/ 本文/ 所/ 提出/ 的/ 算法/ ./ 按/ 需/ 方式/ 间断/ 出现/ 的/ 几个/ 较/ 高/ 代价/ 是因为/ 索引/ 合并/ ./ 索引/ 缓冲区/ 中/ 的/ 数据/ 在/ 被/ 访问/ 的/ 时候/ ,/ 要/ 合并/ 到/ 索引/ 切片/ 中/ ,/ 这/ 需要/ 一些/ 额外/ 代价/ ,/ 即时/ 更新/ 方式/ 是/ 在/ 维护/ 数据/ 的/ 时候/ 同步进行/ 的/ (/ 参见/ 图/ 3/ )/ ./ 从/ 实验/ 方案/ 及/ 效果/ 来/ 分析/ ,/ 这/ 正好/ 体现/ 了/ 索引/ 缓冲/ 的/ 优势/ ,/ 它/ 把/ 每次/ 更新/ 操作/ 转化成/ 批量/ 操作/ ,/ 降低/ 了/ 维护/ 代价/ ./ 根据/ 以上/ 实验/ ,/ 可以/ 看出/ 使用/ 映射/ 表/ 索引/ 方式/ 可以/ 提供/ 较/ 好/ 的/ 性能/ ,/ 为了/ 更好/ 地/ 判定/ 租户/ 数目/ 对本/ 维护/ 策略/ 的/ 影响/ ,/ 本文/ 模拟/ 了/ 并发/ 租户/ 数量/ 变化/ 的/ 情况/ ./ (/ 2/ )/ 固定/ 按/ 需/ 更新/ 映射/ 表/ 方式/ ,/ 比较/ 不同/ 数量/ 的/ 租户/ 并发/ 执行/ 的/ 性能/ ./ 由/ 不同/ 数量/ 的/ 租户/ 并行/ 各种/ 业务/ ,/ 每个/ 租户/ 发起/ 100/ 次/ 查询/ 和/ 修改/ ,/ 查询/ 参数/ 在/ 业务/ 数据/ 的/ 最小值/ 和/ 最大值/ 之间/ 均匀/ 变换/ ,/ 更新/ 参数/ 任意/ 均匀/ 变化/ ./ 查询/ 和/ 更新/ 交替/ 执行/ ./ 图/ 5/ 和/ 图/ 6/ 分别/ 为/ ORACLE/ 和/ MYSQL/ 的/ 实/ Page8/ 验/ 效果/ ,/ 总体/ 趋势/ 一致/ ,/ 在/ 性能/ 上/ 稍/ 有/ 差异/ ,/ 此/ 差异/ 是/ 由于/ 访问/ 参数/ 随机/ 分布/ 造成/ 的/ ,/ 与/ 数据库/ 及/ 数据/ 引擎/ 没有/ 关系/ ./ 实验/ 效果/ 表明/ :/ (/ 1/ )/ 本/ 方案/ 和/ 基于/ 的/ 数据库/ 没有/ 关系/ ,/ 具有/ 较/ 好/ 的/ 迁移性/ ./ 这/ 是因为/ 本/ 方案/ 并/ 没有/ 直接/ 在/ 数据库/ 中/ 建立/ 映射/ 表/ ,/ 而是/ 建立/ 在/ 缓存/ 中/ ,/ 不/ 依赖于/ 数据库/ 本身/ 的/ 能力/ ./ (/ 2/ )/ 多/ 租户/ 数据库/ 所/ 支持/ 的/ 租户/ 数量/ 只受/ 服务器/ 缓存/ 的/ 限制/ ,/ 在/ 缓存/ 允许/ 范围/ 内/ ,/ 租户/ 性能/ 不/ 受/ 并发/ 租户/ 数量/ 影响/ 限制/ ;/ 在/ 超过/ 单机/ 缓存/ 负荷/ 以后/ ,/ 需要/ 寻求/ 集群/ 或者/ 云/ 等/ 新/ 的/ 存储/ 方式/ ./ 综上所述/ ,/ 本/ 方案/ 所/ 提出/ 的/ 模型/ ,/ 实验/ 效果/ 理想/ ,/ 较/ 好/ 的/ 解决/ 了/ SaaS/ 应用/ 索引/ 的/ 隔离/ 及/ 定制/ 问题/ ./ 5/ 总结/ 与/ 展望/ 本文/ 基于/ 键值/ 对/ 模式/ 的/ 多/ 租户/ 数据库/ 存储/ 机制/ ,/ 在/ ORACLE/ 数据库/ 中/ 引入/ 了/ 映射/ 表来/ 充当/ 索引/ 以及/ 元组/ 重构/ 的/ 基础/ ,/ 同时/ 提出/ 了/ 映射/ 表/ 的/ 维护/ 策略/ 来/ 降低/ 映射/ 表/ 的/ 维护/ 代价/ ,/ 能/ 有效/ 地/ 提高/ 访问/ 性能/ ./ 本文/ 根据/ 租户/ 信息/ 创建/ 共享/ 模式/ 的/ 映射/ 表/ 索引/ ,/ 然后/ 根据/ 各自/ 的/ 数据/ 访问/ 请求/ ,/ 由/ 数据/ 引擎/ 筛选/ 索引/ 切片/ ,/ 渐进式/ 地/ 对/ 索引/ 进行/ 更新/ ,/ 获取/ 较/ 高/ 的/ 性能/ ./ 本文/ 论证/ 了/ 该/ 索引/ 方式/ 的/ 正确性/ 、/ 完备/ 性/ 、/ 存储/ 需求/ 、/ 维护/ 代价/ 及/ 可/ 获取/ 的/ 性能/ 的/ 提高/ ,/ 并/ 以/ 实验/ 证明/ 了/ 本文/ 思想/ 的/ 正确性/ ./ 在/ 实验/ 中/ ,/ 本文/ 从/ 租户/ 角度/ 、/ 查询/ 次数/ 、/ 数据量/ 等/ 多方面/ 对比/ 了/ 各种/ 方案/ 的/ 查询/ 及/ 维护/ 代价/ ,/ 可以/ 看出/ 本/ 方案/ 具有/ 较/ 好/ 的/ 使用/ 效果/ ./ 映射/ 表/ 索引/ 还有/ 尚未/ 解决/ 的/ 问题/ ,/ 比如/ 随/ 租户/ 、/ 索引/ 个数/ 、/ 属性/ 数目/ 增长/ 的/ 空间/ 需求/ ,/ 对于/ 索引/ 查准率/ 和/ 查全率/ 更/ 严格/ 的/ 论证/ ,/ 数据/ 引擎/ 和/ 关系数据库/ 的/ 中间/ 交互/ 环节/ 的/ 进一步/ 优化/ ,/ 还有/ 很多/ 的/ 研究/ 工作/ 要/ 做/ ./ 在/ 今后/ 的/ 研究/ 中/ ,/ 将/ 做/ 以下/ 几个/ 方面/ 的/ 工作/ :/ (/ 1/ )/ 进一步/ 论证/ 映射/ 表/ 索引/ 的/ 查准率/ 和/ 查全率/ ;/ (/ 2/ )/ 研究/ 通过/ 索引/ 进行/ 关系/ 重构/ 的/ 问题/ ;/ (/ 3/ )/ 研究/ 关系/ 中/ 属性/ 较/ 多/ 时候/ 的/ 索引/ 引用/ 技术/ 以/ 进一步提高/ 索引/ 性能/ ./ 

