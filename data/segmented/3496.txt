Page1/ 程序执行/ 的/ 精确/ 重现/ 技术/ 及其/ 在/ 体系结构/ 模拟/ 中/ 的/ 应用/ 赵天磊/ 唐遇星/ 徐炜遐付/ 桂涛/ 齐树波/ 贾小敏/ 张/ 民选/ (/ 国防科学技术大学/ 计算机/ 学院/ 长沙/ 410073/ )/ 摘要/ 近年来/ 有/ 研究/ 提出/ 利用/ 动态/ 二进制/ 翻译/ 技术/ (/ DynamicBinaryTranslation/ ,/ DBT/ )/ 加速/ 程序/ 代表性/ 模拟/ 点/ 的/ 提取/ ,/ 然而/ 这些/ 研究/ 并未/ 考虑/ DBT/ 方法/ 对/ 模拟/ 结果/ 准确度/ 的/ 影响/ ./ 实验/ 发现/ ,/ 对于/ 某些/ 程序/ ,/ DBT/ 加速/ 方法/ 会/ 带来/ 将近/ 20/ %/ 的/ 误差/ ./ 经/ 分析/ ,/ 误差/ 的/ 根源/ 在于/ 程序/ 在/ DBT/ 执行/ 和/ 模拟/ 执行/ 时/ 执行/ 踪迹/ 有/ 巨大/ 差异/ ,/ 即/ 程序执行/ 踪迹/ 的/ 不可/ 重现/ 性/ ./ 本文/ 系统地/ 分析/ 了/ 引起/ 程序执行/ 踪迹/ 不可/ 重现/ 的/ 原因/ ,/ 提出/ 了/ 解决/ 方法/ ./ 实验/ 证实/ ,/ 利用/ 文中/ 提出/ 的/ 方法/ ,/ 可以/ 在/ 不/ 影响/ 性能/ 的/ 情况/ 下/ ,/ 实现/ 程序执行/ 踪迹/ 的/ 精确/ 重现/ ,/ 从而/ 保证/ DBT/ 方法/ 与/ 传统/ 模拟/ 方法/ 具有/ 完全相同/ 的/ 精确度/ ./ 关键词/ 应用程序/ 行为/ 分析/ ;/ 模拟/ 误差/ ;/ 可/ 重现/ 模拟/ ;/ 执行/ 踪迹/ ;/ 二进制/ 翻译/ ;/ SimPoint/ ;/ BBVProfile1/ 引言/ 周期/ 精确/ 的/ 性能/ 模拟/ 是/ 微处理器/ 体系结构/ 研究/ 的/ 一种/ 重要/ 方法/ [/ 1/ ]/ ,/ 然而/ 模拟器/ 的/ 运行/ 速度/ 非常/ 慢/ ,/ 功能/ 模拟/ 的/ 速度/ 通常/ 只有/ 10MIPS/ 左右/ ,/ 性能/ 模拟/ 的/ 速度/ 只有/ 几百/ KIPS/ [/ 2/ ]/ ./ 为了/ 提高/ 模拟/ 速度/ ,/ 研究/ 人员/ 提出/ 了/ SimPoint/ 方法/ 来/ 提取/ 程序/ 的/ 代表性/ 模/ Page2/ 拟点/ ,/ 只/ 需/ 对/ 提取/ 的/ 代表性/ 模拟/ 点/ 进行/ 详细/ 模拟/ 就/ 可以/ 获取/ 程序/ 的/ 精确/ 性能参数/ [/ 1/ ,/ 3/ -/ 4/ ]/ ./ 然而/ 在/ 这种/ 模拟/ 方法/ 中/ ,/ 生成/ SimPoint/ 所/ 需/ 的/ BBV/ (/ BasicBlockVector/ )/ Profile/ 需要/ 利用/ 功能/ 模拟器/ 将/ 测试程序/ 预先/ 完整/ 执行/ 一遍/ ./ 由于/ 功能/ 模拟/ 的/ 速度/ 非常/ 慢/ ,/ BBVProfile/ 的/ 提取/ 成/ 了/ 一个/ 新/ 的/ 性能/ 瓶颈/ ./ 近年来/ 有/ 研究者/ 提出/ 利用/ 动态/ 二进制/ 翻译/ (/ DynamicBinaryTranslation/ ,/ DBT/ )/ [/ 5/ -/ 6/ ]/ 技术/ 提取/ 应用程序/ 的/ BBVProfile/ [/ 7/ -/ 9/ ]/ ./ 这种/ 方法/ 可以/ 大大/ 加速/ 代表性/ 模拟/ 点/ 的/ 提取/ ,/ 减少/ 整个/ 模拟/ 过程/ 所/ 需/ 的/ 时间/ ,/ 但/ 现有/ 研究/ 都/ 没有/ 评估/ 其/ 对/ 模拟/ 结果/ 准确性/ 的/ 影响/ ./ 本文/ 的/ 主要/ 工作/ 有/ 两项/ ./ 第一项/ 是/ 评估/ 了/ DBT/ 方法/ 对/ 模拟/ 结果/ 准确度/ 的/ 影响/ ./ 通过/ 实验/ 发现/ DBT/ 方法/ 会/ 较为/ 严重/ 的/ 损害/ 模拟/ 结果/ 的/ 准确度/ ,/ 对/ 部分/ 测试程序/ 会/ 带来/ 近/ 20/ %/ 的/ 模拟/ 误差/ ./ 经/ 分析/ ,/ 这种/ 误差/ 的/ 根源/ 是/ 程序/ 在/ DBT/ 执行/ 和/ 模拟/ 执行/ 时/ 指令/ 踪迹/ 有/ 巨大/ 差异/ ,/ 即/ 模拟/ 时/ 无法/ 精确/ 重现/ DBT/ 执行/ 时/ 程序/ 的/ 执行/ 踪迹/ ./ 进一步/ 分析/ 发现/ ,/ 程序/ 的/ 执行/ 踪迹/ 差异/ 是/ 由/ 不同/ 环境/ 中/ 实验/ 设置/ 上/ 的/ 细微/ 差异/ 引起/ 的/ ./ 这/ 与/ 文献/ [/ 10/ ]/ 的/ 结论/ 类似/ ./ 文献/ [/ 10/ ]/ 分析/ 了/ 体系/ 领域/ 研究/ 中/ 的/ 测量/ 偏倚/ 问题/ ,/ 指出/ 设置/ 实验/ 环境/ 时/ ,/ 看似/ 无关/ 的/ 细微/ 差异/ 都/ 会/ 对/ 实验/ 结果/ 产生/ 重大/ 影响/ ,/ 甚至/ 会/ 改变/ 实验/ 的/ 结论/ ./ 然而/ 该/ 文献/ 并/ 没有/ 系统/ 的/ 分析/ 哪些因素/ 可能/ 会/ 对/ 实验/ 结果/ 造成/ 较大/ 影响/ ./ 本文/ 的/ 第二项/ 工作/ 是/ 提高/ DBT/ 方法/ 的/ 准确度/ ./ 本文/ 首先/ 提出/ 了/ 一个/ 进程/ 执行/ 踪迹/ 模型/ ,/ 根据/ 此/ 模型/ ,/ 从/ 进程/ 初始状态/ 和/ 状态/ 更新过程/ 两/ 方面/ 入手/ ,/ 给出/ 了/ 一种/ 系统/ 方法/ 来/ 确定/ 所有/ 可能/ 影响/ 程序/ 行为/ 的/ 环境因素/ ./ 然后/ 针对/ 每种/ 影响/ 因素/ ,/ 分别/ 提出/ 了/ 相应/ 的/ 方法/ 来/ 消除/ 其/ 对/ 执行/ 踪迹/ 的/ 影响/ ./ 实验/ 结果/ 证实/ ,/ 文中/ 提出/ 的/ 方法/ 可以/ 有效/ 地/ 消除/ 程序/ 在/ 不同/ 执行/ 环境/ 下/ 的/ 指令/ 踪迹/ 差异/ ,/ 实现/ 程序执行/ 踪迹/ 的/ 精确/ 重现/ ,/ 从而/ 保证/ DBT/ 方法/ 与/ 传统/ 模拟/ 方法/ 具有/ 完全相同/ 的/ 准确性/ ./ 本文/ 提出/ 的/ 方法/ 也/ 可/ 用于/ 程序/ 调错/ 等/ 需要/ 精确/ 重现/ 程序执行/ 踪迹/ 的/ 应用领域/ ,/ 或/ 用于/ 消除/ 文献/ [/ 10/ ]/ 中/ 提出/ 的/ 测量/ 偏倚/ 问题/ ./ 本文/ 第/ 2/ 节/ 阐述/ 现有/ 方法/ 中/ 存在/ 的/ 问题/ ,/ 分析/ 了/ DBT/ 方法/ 对/ 模拟/ 结果/ 准确性/ 的/ 影响/ 及其/ 内在/ 原因/ ;/ 第/ 3/ 节/ 提出/ 解决问题/ 的/ 方法/ ,/ 首先/ 提出/ 了/ 一个/ 进程/ 执行/ 踪迹/ 模型/ ,/ 然后/ 确定/ 了/ 影响/ 进程/ 执行/ 踪迹/ 的/ 可能/ 因素/ 及其/ 规避/ 方法/ ;/ 第/ 4/ 节/ 评估所/ 提出/ 的/ 方法/ ;/ 第/ 5/ 节/ 总结/ 全文/ ./ 2DBT/ 方法/ 对/ 模拟/ 准确度/ 的/ 影响/ 2.1/ 基于/ DBT/ 加速/ 的/ 模拟/ 流程/ 基于/ DBT/ 加速/ 的/ 微处理器/ 体系结构/ 性能/ 模拟/ 是/ 利用/ DBT/ 技术/ 代替/ 功能/ 模拟器/ (/ ISASimulator/ )/ 来/ 收集/ SimPoint/ 方法/ 所/ 需/ 的/ BBVProfile/ ,/ 是/ 对/ SimPoint/ 方法/ 的/ 加速/ ./ 其/ 流程/ 如图/ 1/ 所示/ ,/ 可以/ 分为/ 3/ 步/ :/ 1/ ./ 利用/ 基于/ 功能/ 模拟器/ 或/ 基于/ DBT/ 技术/ 的/ BBVProfiler/ 将/ 测试程序/ 完整/ 执行/ 一遍/ ,/ 在/ 执行/ 过程/ 中/ 收集/ 测试程序/ 的/ BBVProfile/ ./ BBVProfile/ 是/ 对/ 程序执行/ 过程/ 的/ 一种/ 表示/ ,/ 记录/ 了/ 每个/ 时间/ 片段/ 内/ 程序/ 所/ 执行/ 的/ 基本块/ 集合/ ;/ 2/ ./ 利用/ SimPoint/ 工具/ 对/ 收集/ 的/ BBVProfile/ 进行/ 分析/ ,/ 提取/ 出/ 一些/ 执行/ 片段/ ./ 这些/ 提取/ 出/ 的/ 执行/ 片段/ 代表/ 了/ 程序/ 整个/ 执行/ 过程/ 的/ 行为/ 特征/ ,/ 称为/ 代表性/ 模拟/ 点/ ;/ 3/ ./ 利用/ 性能/ 模拟器/ (/ PerformanceSimulator/ )/ 对/ 测试程序/ 进行/ 模拟/ ,/ 模拟/ 的/ 过程/ 中/ 只/ 对/ 代表性/ 模拟/ 点/ 进行/ 详细/ 的/ 性能/ 模拟/ ,/ 其它/ 部分/ 使用/ 功能/ 模拟/ 快速/ 跳过/ ./ 这/ 一步/ 的/ 关键/ 是/ 准确/ 地/ 定位/ 到/ 第/ 2/ 步中/ 所/ 识别/ 出/ 的/ 代表性/ 模拟/ 点/ ./ 图/ 1/ 利用/ 动态/ 二进制/ 翻译/ 技术/ 和/ SimPoint/ 技术/ 加速/ 的/ 模拟/ 流程/ ./ 代表性/ 模拟/ 点/ 在/ 模拟/ 执行/ 过程/ 中/ 的/ 准确/ 定位/ 对/ 模拟/ 结果/ 的/ 准确性/ 有/ 重要/ 影响/ 收集/ BBVProfile/ 时/ 需要/ 将/ 测试程序/ 预先/ 完整/ 执行/ 一遍/ ./ 传统/ 上/ BBVProfile/ 收集/ 是/ 利用/ 功能/ 模拟器/ 实现/ 的/ ,/ 然而/ 功能/ 模拟器/ 的/ 速度/ 非常/ 慢/ ,/ 是/ 整个/ 模拟/ 过程/ 的/ 一个/ 重要/ 瓶颈/ ./ 对于/ 像/ SPEC2006/ 这样/ 的/ 现代/ 测试程序/ 集/ ,/ 如果/ 使用/ 功能/ 模拟器/ 完整/ 执行/ 的话/ ,/ 将/ 需要/ 数月/ 时间/ ./ 基于/ DBT/ 的/ BBVProfiler/ 速度/ 可以/ 达到/ 功能/ 模拟器/ 的/ 10/ 倍/ 左右/ [/ 11/ ]/ ,/ 因此/ 可以/ 大大缩短/ 收集/ BBVProfile/ 所/ 需/ 的/ 时间/ ./ 从图/ 1/ 中/ 可以/ 看出/ ,/ 在/ DBT/ 加速/ 的/ 模拟/ 流程/ Page3/ 中/ ,/ 测试程序/ 一共/ 被/ 执行/ 了/ 两次/ ./ 第/ 1/ 次/ 是/ 在/ 基于/ DBT/ 的/ BBVProfiler/ 中/ 执行/ 的/ ,/ 用于/ 收集/ BBVProfile/ ./ 第/ 2/ 次/ 是/ 在/ 性能/ 模拟器/ 上/ 执行/ 的/ ,/ 用于/ 得到/ 程序/ 的/ 性能参数/ 或/ 行为/ 特征/ ./ 在/ 第/ 2/ 次/ 执行/ 过程/ 中/ ,/ 需要/ 准确/ 定位/ 到/ 由/ 第/ 1/ 次/ 执行/ 提取/ 出/ 的/ 代表性/ 模拟/ 点/ ./ 因此/ ,/ 这种/ DBT/ 加速/ 的/ 模拟/ 流程/ 隐含/ 了/ 一个/ 前提/ ,/ 即/ 程序/ 在/ 两次/ 执行/ 时/ 具有/ 相同/ 或/ 非常/ 接近/ 的/ 执行/ 踪迹/ ./ 这个/ 前提/ 成立/ 与否/ 对/ 模拟/ 结果/ 的/ 准确性/ 具有/ 重要/ 影响/ ./ 代表性/ 模拟/ 点/ 是/ 根据/ 程序/ 第/ 1/ 次/ 执行/ 时/ 的/ 行为/ 特征提取/ 出来/ 的/ ./ 如果/ 两次/ 执行/ 时/ 的/ 行为/ 不同/ ,/ 模拟/ 点/ 就/ 不能/ 代表/ 程序/ 在/ 第/ 2/ 次/ 执行/ 时/ 的/ 行为/ 特征/ ./ 因此/ 利用/ 这些/ 模拟/ 点/ 得出/ 的/ 模拟/ 结果/ 就/ 不能/ 准确/ 反映/ 第/ 2/ 次/ 执行/ 时/ 的/ 性能/ 特性/ ./ 反过来/ ,/ 由于/ 模拟/ 结果/ 得/ 自/ 程序/ 的/ 第/ 2/ 次/ 执行/ ,/ 所以/ 也/ 不能/ 准确/ 反映/ 第/ 1/ 次/ 执行/ 时/ 的/ 性能/ 特性/ ./ 要/ 对/ 代表性/ 模拟/ 点/ 进行/ 详细/ 模拟/ ,/ 就/ 必须/ 能够/ 在/ 第/ 2/ 次/ 模拟/ 执行/ 时/ 准确/ 定位/ 这些/ 模拟/ 点/ ./ 如果/ 程序/ 两次/ 执行/ 时/ 的/ 执行/ 踪迹/ 有/ 较大/ 差异/ 的话/ ,/ 就/ 难以/ 在/ 模拟/ 时/ 准确/ 的/ 定位/ 到/ 模拟/ 点/ ,/ 从而/ 导致/ 模拟/ 结果/ 误差/ ./ 虽然/ 这个/ 前提/ 对/ 模拟/ 结果/ 的/ 准确性/ 有/ 非常/ 大/ 的/ 影响/ ,/ 然而/ 现有/ 研究/ 都/ 没有/ 对此/ 前提/ 的/ 有效性/ 进行/ 验证/ ./ 本文/ 通过/ 实验/ 发现/ ,/ 对于/ 很多/ 程序/ ,/ 基于/ DBT/ 的/ 执行/ 和/ 基于/ 模拟器/ 的/ 执行/ 会/ 有/ 较大/ 的/ 执行/ 踪迹/ 差异/ ,/ 且/ 这种/ 执行/ 踪迹/ 差异/ 会/ 对/ 模拟/ 结果/ 的/ 准确性/ 造成/ 较大/ 影响/ ./ 因此/ 在/ 使用/ DBT/ 加速/ 时/ 必须/ 设法/ 消除/ 程序/ 两次/ 执行/ 时/ 的/ 执行/ 踪迹/ 差异/ ./ 2.2/ 模拟/ 点/ 的/ 定位/ 方法/ 定位/ 模拟/ 点/ 的/ 方法/ 有/ 两种/ ,/ 第/ 1/ 种/ 基于/ 指令/ 计数/ ,/ 即/ 利用/ 程序/ 从/ 启动/ 至/ 到达/ 模拟/ 点/ 之间/ 所/ 提交/ 的/ 指令/ 总数/ 定位/ 模拟/ 点/ ,/ 记/ 这种/ 方法/ 为/ icount/ 定位/ 方法/ ./ 这种/ 方法/ 要求/ 程序/ 在/ 两次/ 执行/ 中/ 的/ 指令/ 总数/ 差异/ 不能/ 太/ 大/ ,/ 必须/ 远/ 小于/ 模拟/ 点/ 的/ 大小/ (/ 模拟/ 点/ 大小/ 一般/ 处于/ 10M/ ~/ 100M/ 条/ 指令/ 之间/ [/ 3/ -/ 4/ ,/ 12/ ]/ )/ ./ 否则/ 就/ 会/ 导致/ 基于/ 指令/ 计数/ 的/ 方法/ 在/ 定位/ 模拟/ 点时/ 出现/ 很大/ 的/ 偏差/ ,/ 从而/ 影响/ 模拟/ 结果/ 的/ 准确性/ ./ 第/ 2/ 种/ 方法/ 利用/ 模拟/ 点/ 边界/ 指令/ 的/ PC/ 以及/ 该/ 指令/ 的/ 执行/ 次数/ 这/ 两个/ 信息/ 来/ 确定/ 模拟/ 点/ ,/ 记/ 这种/ 方法/ 为/ marker/ 定位/ 方法/ ./ 这种/ 方法/ 亦/ 要求/ 程序/ 在/ 两次/ 执行/ 间/ 的/ 指令/ 踪迹/ 不能/ 相差太大/ ./ 若/ 模拟/ 点/ 边界/ 指令/ 的/ 执行/ 次数/ 在/ 两次/ 执行/ 间/ 有/ 较大/ 差异/ 的话/ ,/ 就/ 会/ 导致/ 模拟/ 点/ 定位/ 出现/ 偏差/ ./ 尤为/ 严重/ 的/ 是/ 若/ 第/ 2/ 次/ 执行/ 时/ 相应/ 边界/ 指令/ 没有/ 被/ 执行/ 或/ 执行/ 次数/ 不够/ ,/ 就/ 会/ 导致/ 无法/ 定位/ 模拟/ 点/ ./ 另外/ ,/ 由于/ 事先/ 并不知道/ 模拟/ 点/ 边界/ 指令/ 的/ PC/ ,/ 所以/ 这种/ 方法/ 事实上/ 要求/ 在/ BBVProfiling/ 过程/ 中/ 对/ 所有/ 指令/ 的/ 执行/ 次数/ 都/ 进行/ 统计/ ./ 这会/ 给/ 基于/ DBT/ 的/ BBVProfiler/ 带来/ 超过/ 30/ %/ 的/ 性能/ 下降/ [/ 11/ ]/ ,/ 从而/ 部分/ 抵消/ 了/ DBT/ 方法/ 的/ 加速/ 效果/ ./ 2.3/ DBT/ 方法/ 对/ 模拟/ 结果/ 准确度/ 的/ 影响/ 为了/ 评估/ DBT/ 方法/ 对/ 模拟/ 结果/ 准确度/ 的/ 影响/ ,/ 本文/ 利用/ Simics/ [/ 13/ ]/ 模拟器/ 和/ 基于/ DBT/ 的/ BBVProfile/ 提取/ 工具/ ,/ QPoint/ [/ 9/ ]/ ,/ 分别/ 执行/ 了/ SPEC2006/ 测试程序/ ,/ 并/ 对/ 提取/ 的/ 模拟/ 点/ 进行/ 了/ 模拟/ ./ 本节/ 给出/ 了/ DBT/ 方法/ 和/ 功能/ 模拟/ 方法/ 在/ 得到/ 的/ 指令/ 总数/ 、/ 整体/ 性能参数/ 和/ 程序/ 行为/ 特征/ 等/ 方面/ 的/ 差异/ ./ 表/ 1/ 给出/ 了/ 所有/ SPEC2006/ 测试程序/ ①/ 在/ QPoint/ 上/ 和/ 模拟器/ Simics/ 上/ 分别/ 执行/ 时/ 的/ 动态/ 指令/ 总数/ ./ 从表中/ 可以/ 看出/ ,/ 有/ 将近/ 1/ // 3/ (/ 9/ // 28/ )/ 的/ 测试程序/ 在/ 两次/ 执行/ 间/ 的/ 指令/ 总数/ 相差/ 超过/ 100M/ 条/ 指令/ ,/ 超过/ 40/ %/ (/ 12/ // 28/ )/ 的/ 测试程序/ 在/ 两次/ 执行/ 间/ 的/ 指令/ 总数/ 差异/ 超过/ 10M/ ./ 由于/ 典型/ 的/ 模拟/ 点/ 大小/ 为/ 10M/ ~/ 100M/ 条/ 指令/ ,/ 因此/ 这种/ 程度/ 的/ 指令/ 偏差/ 会/ 导致/ 表/ 1SPEC2006/ 测试程序/ 在/ 基于/ DBT/ 的/ BBVProfiling/ 测试程序/ 400/ ./ perlbench762816940717763456297927639357210401/ ./ bzip25351108320145351108343612347403/ ./ gcc410/ ./ bwaves41091878032494109188163883360634416/ ./ gamess447701576326044770157713878127429/ ./ mcf439350891791439351002443110652433/ ./ milc11626983804271162829752454131372027434/ ./ zeusmp231570051034723157005175207173435/ ./ gromacs17543074796691754307606233126564436/ ./ cactusADM369237450369436923767180402214346437/ ./ leslie3d25998259318302599826865604933774444/ ./ namd38002392487633800239368396119633445/ ./ gobmk6881026779756881026807662791447/ ./ dealII2069387009051206930602481180984240450/ ./ soplex448971126111449160697736189571625453/ ./ povray10236539688391023652972016996823454/ ./ calculix82535211556668253934643401413487735456/ ./ hmmer118488349884711848851346291635782458/ ./ sjeng295476064300129547606451362135459/ ./ GemsFDTD2106760402142210678841421028012068462/ ./ libquantum3340142177868334017030767028129802464/ ./ h264ref3828699889503828699832005750465/ ./ tonto37591894464703758683629473505816997470/ ./ lbm1678909037991167890908413846147471/ ./ omnetpp631607032909631402465700204567209473/ ./ astar8822326810828822326821771095482/ ./ sphinx335398537338513540026244521172510670483/ ./ xalancbmk130979808998113060951541353702935846/ ①/ 481/ ./ wrf/ 执行/ 过程/ 中/ 出错/ ,/ 因此/ 本文/ 没有/ 测试/ 此/ 程序/ Page4icount/ 定位/ 方法/ 无法/ 准确/ 定位/ 代表性/ 模拟/ 点/ ;/ 同时/ 指令/ 总数/ 的/ 差异/ 也/ 反映/ 了/ 程序执行/ 踪迹/ 上/ 的/ 差异/ ,/ 因此/ marker/ 定位/ 方法/ 也/ 很/ 可能/ 失效/ ./ 为了/ 评估/ 这些/ 指令/ 偏差/ 对/ 模拟/ 结果/ 的/ 影响/ ,/ 本文/ 分别/ 对/ QPoint/ 和/ Simics/ 提取/ 出/ 的/ 代表性/ 模拟/ 点/ 进行/ 了/ 详细/ 的/ 性能/ 模拟/ ./ 对/ Simics/ 生成/ 的/ 模拟/ 点/ 使用/ icount/ 方法/ 定位/ ,/ 对/ QPoint/ 生成/ 的/ 模拟/ 点/ 在/ 模拟/ 时/ 分别/ 使用/ 了/ icount/ 方法/ 和/ marker/ 方法/ 进行/ 定图/ 2/ 对于/ 几个/ 指令/ 数/ 差异/ 较大/ 的/ SPEC2006/ 测试程序/ ,/ DBT/ 方法/ 和/ 功能/ 模拟/ 方法/ 在/ 得到/ 的/ L1Cache/ 失效率/ 、/ MKPI/ ,/ L2Cache/ 失效率/ 、/ MPKI/ 参数/ 上/ 的/ 绝对值/ 和/ 相对误差/ ./ DBT/ 方法/ 使用/ 了/ icount/ 和/ marker/ 两种/ 不同/ 的/ 模拟/ 点/ 定位/ 方法/ 位/ ./ 由于/ 模拟/ 全部/ SPEC2006/ 测试程序/ 所/ 需/ 的/ 时间/ 过长/ ,/ 本文/ 选取/ 了/ 总/ 指令/ 数/ 误差/ 大于/ 100M/ 、/ 且/ 运行/ 时间/ 相对/ 较/ 短/ 的/ 6/ 个/ 测试程序/ :/ 400/ ./ perlbench/ ,/ 403/ ./ gcc/ ,/ 433/ ./ milc/ ,/ 450/ ./ soplex/ ,/ 471/ ./ omnetpp/ ,/ 483/ ./ xalancbmk/ ./ 用于/ 比较/ 的/ 参数/ 共有/ 4/ 个/ ,/ 分别/ 是/ L1Cache/ 和/ L2Cache/ 的/ 失效率/ 和/ MPKI/ (/ MissesPerKiloInstructions/ )/ ./ 图/ 2/ 给出/ 了/ 6/ 个/ 测试程序/ 在/ 分别/ 利用/ QPoint/ 和/ Simics/ 提取/ 出/ 的/ 模拟/ 点时/ 得到/ 的/ Page5L1Cache/ 失效率/ 、/ MPKI/ ,/ L2Cache/ 失效率/ 以及/ MPKI/ 的/ 模拟/ 结果/ 及/ 相对误差/ ./ 其中/ icount/ 标记/ 的/ 是/ 利用/ icount/ 方法/ 定位/ QPoint/ 提取/ 的/ 模拟/ 点/ 得到/ 的/ 模拟/ 结果/ ;/ marker/ 标记/ 的/ 是/ 利用/ marker/ 方法/ 定位/ QPoint/ 提取/ 的/ 模拟/ 点/ 得到/ 的/ 模拟/ 结果/ ;/ correct/ 标记/ 的/ 是/ 由/ Simics/ 提取/ 的/ 模拟/ 点/ 所/ 对应/ 的/ 模拟/ 结果/ ./ 从/ 实验/ 结果/ 可以/ 看出/ ,/ 不管/ 是/ 采用/ icount/ 定位/ 方法/ 还是/ marker/ 定位/ 方法/ ,/ 相对/ 于/ 功能/ 模拟器/ 提取/ 的/ 模拟/ 点/ ,/ 由/ DBT/ 方法/ 提取/ 的/ 模拟/ 点/ 得到/ 的/ 模拟/ 结果/ 都/ 有/ 较大/ 的/ 偏差/ ./ 使用/ icount/ 定位/ 方法/ 时/ ,/ 对/ L1/ 失效率/ 、/ L1MPKI/ 、/ L2/ 失效率/ 、/ L2MPKI/ 四个/ 指标/ ,/ QPoint/ 相对/ 于/ Simics/ 的/ 平均/ 相对误差/ 分别/ 为/ 17/ %/ 、/ 17/ %/ 、/ 18/ %/ 、/ 24/ %/ ;/ 使用/ marker/ 定位/ 方法/ 时/ ,/ 平均/ 相对误差/ 分别/ 为/ 2.45/ x/ 、/ 2.66/ x/ 、/ 13/ %/ 、/ 2.01/ x/ ./ SimPoint/ 方法/ 提取/ 的/ 代表性/ 模拟/ 点/ 不仅/ 可/ 用于/ 分析程序/ 的/ 整体/ 性能参数/ ,/ 还/ 可以/ 用于/ 分析程序/ 的/ 典型/ 行为/ 特征/ ./ 代表性/ 模拟/ 点/ 反映/ 了/ 程序执行/ 过程/ 中/ 的/ 主导/ 执行/ 阶段/ ,/ 程序/ 在/ 这些/ 执行/ 阶段/ 的/ 行为/ (/ a/ )/ 403/ ./ gcc/ 图/ 3/ 两个/ 测试程序/ 403/ ./ gcc/ 和/ 450/ ./ soplex/ 在/ 不同/ 的/ 模拟/ 方法/ 下/ 所/ 得到/ 的/ L2CacheMRC/ 曲线/ ./ 每条/ 曲线/ 表示/ 一个/ 模/ (/ b/ )/ 450/ ./ soplex3/ 提高/ DBT/ 方法/ 的/ 准确度/ 根据/ 第/ 2/ 节/ 的/ 分析/ ,/ 导致/ DBT/ 方法/ 有/ 较大/ 误差/ 的/ 根本原因/ 是/ 代表性/ 模拟/ 点/ 的/ 定位/ 偏差/ ./ 不管/ 是/ icount/ 定位/ 方法/ 还是/ marker/ 定位/ 方法/ ,/ 其/ 模拟/ 点定/ 就/ 代表/ 了/ 程序/ 的/ 典型/ 行为/ 特征/ ./ 因此/ ,/ 模拟/ 点/ 的/ 定位/ 误差/ 不光会/ 造成/ 程序/ 性能参数/ 的/ 估计/ 误差/ ,/ 还会/ 导致/ 程序/ 典型/ 行为/ 特征分析/ 上/ 出现/ 重大/ 偏差/ ./ 本文/ 评估/ 了/ 403/ ./ gcc/ 和/ 450/ ./ soplex/ 两个/ 程序/ 在/ 各/ 代表性/ 模拟/ 点处/ 的/ L2MRC/ (/ MissRatioCurve/ )/ 特性/ ,/ 即当/ Cache/ 容量/ 增加/ 时/ 失效率/ 的/ 变化/ 曲线/ ./ L2MRC/ 反映/ 了/ 程序/ 的/ L2/ 行为/ 特性/ ,/ 程序/ 在/ 所有/ 代表性/ 模拟/ 点处/ 的/ MRC/ 曲线/ 就/ 反映/ 了/ 程序/ 的/ 典型/ L2/ 行为/ 特性/ ./ 3/ 个/ 模拟/ 点/ 集合/ ,/ icount/ ,/ marker/ 和/ correct/ 分别/ 代表/ 不同/ 方法/ 获取/ 的/ 模拟/ 点/ ./ icount/ 表示/ 用/ icount/ 定位/ 方法/ 得到/ 的/ 模拟/ 点/ 集合/ ,/ marker/ 表示/ 用/ marker/ 定位/ 方法/ 得到/ 的/ 模拟/ 点/ 集合/ ,/ correct/ 表示/ 用/ 功能/ 模拟/ 得到/ 的/ 模拟/ 点/ 集合/ ./ 图/ 3/ 给出/ 了/ 403/ ./ gcc/ 和/ 450/ ./ soplex/ 程序/ 在/ 所有/ 模拟/ 点/ 集合/ 的/ L2MRC/ 曲线/ ./ 从/ 其中/ 可以/ 看出/ ,/ 不管/ 是/ icount/ 定位/ 方法/ 还是/ marker/ 定位/ 方法/ ,/ 在/ 提取/ 程序/ 的/ 典型/ 行为/ 特征/ 时/ ,/ 都/ 存在/ 丢失/ 正确/ 特征/ 和/ 多出/ 错误/ 特征/ 的/ 问题/ ./ 位/ 精度/ 都/ 取决于/ 程序/ 在/ 基于/ DBT/ 的/ BBVProfiling/ 执行/ 时/ 和/ 模拟/ 执行/ 时/ 指令/ 踪迹/ 的/ 差异/ 程度/ ./ 因此/ 提高/ DBT/ 方法/ 准确度/ 的/ 关键/ 是/ 保证/ 程序/ 在/ 两次/ 执行/ 时/ 具有/ 完全相同/ 或/ 相近/ 的/ 指令/ 踪迹/ ./ 本节/ 对/ 进程/ 的/ 执行/ 过程/ 进行/ 分析/ ,/ 以/ 确定/ 所有/ 可能/ 影响/ 进程/ 执行/ 踪迹/ 的/ 因素/ ,/ 并/ 提出/ 相应/ 的/ 规避/ 方法/ ./ Page63/ ./ 1/ 影响/ 程序执行/ 踪迹/ 的/ 可能/ 因素/ 理想/ 情况/ 下/ ,/ 对于/ 相同/ 的/ 程序/ 和/ 相同/ 的/ 输入/ ,/ 在/ 基于/ DBT/ 的/ BBVProfiler/ 和/ 功能/ 模拟器/ 两种/ 环境/ 下/ 执行/ 时/ ,/ 指令/ 踪迹/ 应该/ 是/ 相同/ 的/ ./ 然而/ 实验/ 显示/ ,/ 程序/ 的/ 指令/ 踪迹/ 在/ 两种/ 环境/ 下/ 有/ 较大/ 差异/ ,/ 表现/ 为/ 总/ 提交/ 指令/ 数上/ 的/ 巨大/ 差异/ ,/ 见表/ 1/ ./ 为了/ 分析/ 进程/ 执行/ 踪迹/ 偏差/ 的/ 来源/ ,/ 下面/ 对/ 进程/ 的/ 执行/ 过程/ 进行/ 深入分析/ ./ 程序/ 的/ 执行/ 踪迹/ 取决于/ 执行/ 过程/ 中/ 分支/ 指令/ 的/ 取向/ ,/ 而/ 分支/ 指令/ 的/ 取向/ 又/ 决定/ 于/ 分支/ 指令/ 执行/ 时/ 进程/ 的/ 状态/ ,/ 因此/ 程序/ 的/ 执行/ 踪迹/ 最终/ 取决于/ 进程/ 的/ 状态/ 变迁/ ./ 一个/ 程序/ 的/ 执行/ 过程/ 是/ 按照/ 程序/ 中/ 的/ 指令/ 对/ 进程/ 的/ 状态/ 进行/ 更新/ 的/ 过程/ ,/ 可以/ 表示/ 为式/ (/ 1/ )/ 所示/ 的/ 一个/ 序列/ ./ 其中/ Sk/ 表示/ 进程/ 的/ 状态/ ,/ S0/ 表示/ 进程/ 被/ 创建/ 后/ 的/ 初始状态/ ;/ Ik/ 表示/ 进程/ 所/ 执行/ 的/ 指令/ 序列/ ./ 指令/ 是/ 对/ 进程/ 状态/ 的/ 更新/ ,/ 可以/ 表示/ 成/ 一个/ 映射/ I/ :/ S/ ×/ E/ →/ S/ ,/ 其中/ E/ 表示/ 进程/ 的/ 执行/ 环境/ ,/ 比如/ 系统/ 时间/ 、/ 处理器/ 速度/ 、/ 操作系统/ 版本/ 等/ ./ 由于/ 某些/ 指令/ 的/ 行为/ 受/ 执行/ 环境/ 的/ 影响/ ,/ 因此/ 指令/ 的/ 语义/ 中/ 必须/ 包含/ 环境/ 部分/ ./ 对于/ 行为/ 不/ 受/ 执行/ 环境影响/ 的/ 指令/ ,/ 可以/ 简单/ 地/ 表示/ 为/ I/ :/ S/ →/ S/ ./ 进程/ 的/ 状态/ 可以/ 分为/ 两类/ ,/ 局部/ 状态/ 和/ 全局/ 状态/ ./ 局部/ 状态/ 指/ 可见/ 范围/ 很小/ 或/ 生存/ 时间/ 很/ 短/ 的/ 状态/ ,/ 比如/ 临时/ 变量/ 、/ ABI/ (/ ApplicationBinaryInterface/ )/ 中/ 定义/ 的/ Scratch/ 寄存器/ 等/ ./ 全局/ 状态/ 指/ 可见/ 范围/ 很大/ 、/ 生存/ 时间/ 很长/ 的/ 状态/ ,/ 比如/ 全局变量/ 、/ 程序/ 的/ 内存/ 分配器/ 状态/ 、/ PC/ // SP/ 等/ 起/ 控制/ 作用/ 的/ 寄存器/ 等/ ./ 局部/ 状态/ 由于/ 时空/ 作用/ 范围/ 很小/ ,/ 通常/ 不会/ 对/ 程序/ 的/ 执行/ 踪迹/ 造成/ 大/ 的/ 影响/ ,/ 而/ 全局/ 状态/ 则/ 会/ 持续/ 的/ 影响/ 程序/ 的/ 执行/ 踪迹/ ,/ 因此/ 可能/ 会/ 有/ 较大/ 影响/ ./ 虽然/ 从/ 理论/ 上/ 说/ ,/ 只要/ 进程/ 的/ 全局/ 状态/ 在/ 两次/ 执行/ 间/ 保持一致/ ,/ 就/ 可以/ 保证/ 进程/ 的/ 执行/ 踪迹/ 基本一致/ ./ 然而/ 在/ 实际/ 模拟/ 过程/ 中/ ,/ 区分/ 进程/ 的/ 局部/ 状态/ 和/ 全局/ 状态/ 是/ 一件/ 非常/ 困难/ 的/ 事情/ ,/ 并且/ 有些/ 情况/ 下/ 局部/ 状态/ 也/ 会/ 影响/ 到/ 全局/ 状态/ ./ 因此/ 本文/ 采用/ 了/ 一种/ 较为/ 保守/ 的/ 方法/ ,/ 即/ 要求/ 进程/ 在/ 两次/ 执行/ 过程/ 中/ 的/ 所有/ 状态/ 都/ 保持一致/ ,/ 以/ 保证/ 进程/ 的/ 执行/ 踪迹/ 完全相同/ ./ 由式/ (/ 1/ )/ 可以/ 看出/ ,/ 如果/ 进程/ 在/ 两次/ 执行/ 时/ 的/ 初始状态/ 相同/ ,/ 并且/ 执行/ 过程/ 中/ 每条/ 指令/ 对/ 进程/ 状态/ 的/ 更新/ 相同/ ,/ 就/ 可以/ 保证/ 进程/ 的/ 状态/ 始终保持/ 一致/ ./ 本节/ 从/ 进程/ 初始状态/ 和/ 状态/ 更新过程/ 两个/ 方面/ ,/ 分析/ 了/ 同一个/ 程序/ 分别/ 在/ QPoint/ 和/ Simics/ 两种/ 环境/ 下/ 执行/ 时/ ,/ 有/ 哪些因素/ 可能/ 会/ 导致/ 进程/ 状态/ 出现/ 差异/ 以及/ 这些/ 状态/ 差异/ 如何/ 影响/ 进程/ 的/ 指令/ 踪迹/ ,/ 并/ 提出/ 了/ 避免/ 产生/ 这些/ 差异/ 的/ 方法/ ./ 3.2/ 进程/ 初始状态/ 进程/ 的/ 初始状态/ 是/ 由/ 执行/ 环境/ 的/ 应用程序/ 加载/ 器/ (/ loader/ )/ 设定/ 的/ ,/ 可以/ 分为/ 寄存器/ 初始状态/ 和/ 内存/ 初始状态/ 两/ 部分/ ./ 真实/ 的/ 操作系统/ 环境/ 中/ ,/ 加载/ 器/ 位于/ 操作系统/ 内核/ 中/ ./ 在/ 用户/ 级/ 模拟器/ 和/ 二进制/ 翻译器/ 中/ ,/ 由于/ 没有/ 操作系统/ ,/ 所以/ 一般/ 都/ 会/ 实现/ 一个/ 自有/ 的/ 加载/ 器/ ./ QPoint/ 是/ 一个/ 用户/ 级/ 的/ 二进制/ 翻译器/ ,/ 因此/ 加载/ 程序/ 时/ 使用/ 的/ 是/ 自有/ 的/ 加载/ 器/ ./ 而/ Simics/ 是/ 一个/ 全/ 系统/ 模拟器/ ,/ 上面/ 运行/ 有/ 一个/ 完整/ 的/ 操作系统/ ,/ 因此/ 使用/ 的/ 是/ 操作系统/ 内核/ 的/ 加载/ 器/ ./ 本节/ 以/ QPoint/ 和/ Linux/ 内核/ 为例/ ,/ 分析/ 了/ SPARC/ 体系结构/ 下/ 不同/ 加载/ 器/ 对/ 进程/ 初始状态/ 的/ 影响/ 以及/ 这些/ 差异/ 对/ 进程/ 执行/ 踪迹/ 的/ 影响/ ./ 3.2/ ./ 1/ 寄存器/ 初始状态/ 根据/ SPARCABI/ 规范/ [/ 14/ ]/ ,/ 进程/ 被/ 创建/ 之后/ ,/ PC/ 寄存器/ 指向/ 进程/ 的/ 入口/ 地址/ ,/ SP/ 寄存器/ 指向/ 栈顶/ ,/ 其它/ 寄存器/ 中是/ 预定/ 义/ 的/ 常量/ ./ 因为/ 可执行程序/ 是/ 不可/ 重/ 定位/ 的/ ,/ 在/ 任何/ 执行/ 环境/ 中/ 都/ 会/ 被/ 加载/ 到/ 固定/ 地址/ ,/ 因此/ 程序/ 的/ 入口/ 地址/ 是/ 固定/ 的/ ,/ 即/ PC/ 寄存器/ 初值/ 没有/ 差异/ ./ 然而/ ,/ QPoint/ 和/ Simics/ 两个/ 环境/ 中/ ,/ 进程/ 的/ SP/ 寄存器/ 初值/ 并不相同/ ./ 有/ 两个/ 原因/ ,/ 第/ 1/ 个/ 原因/ 是/ 堆栈/ 区域/ 的/ 位置/ 不同/ ./ 因为/ SPARCABI/ 中/ 没有/ 规定/ 堆栈/ 区域/ 的/ 位置/ ,/ 所以/ 不同/ 的/ 加载/ 器/ 可能/ 分配/ 不同/ 的/ 存储/ 区域/ 作为/ 堆栈/ 区/ ./ 为了/ 提高/ 安全性/ ,/ Linux/ 内核/ 会/ 对/ 堆栈/ 区域/ 的/ 位置/ 进行/ 随机化/ 处理/ ,/ 导致/ 程序/ 每次/ 运行/ 时/ ,/ 堆栈/ 的/ 位置/ 都/ 不/ 相同/ ./ 第/ 2/ 个/ 原因/ 是/ 堆栈/ 中/ 存储/ 的/ 初始/ 数据量/ 不同/ ,/ 因此/ 即使/ 堆栈/ 区域/ 的/ 位置/ 相同/ ,/ SP/ 寄存器/ 的/ 初值/ 也/ 可能/ 不同/ ./ SP/ 寄存器/ 值/ 的/ 差异/ 会/ 影响/ 所有/ 在/ 堆栈/ 中/ 分配/ 的/ 对象/ 的/ 地址/ ,/ 有些/ 程序/ 会/ 使用/ 对象/ 的/ 地址/ 参与/ 计算/ ,/ 甚至/ 利用/ 计算结果/ 控制程序/ 的/ 执行/ 流程/ ./ 因此/ ,/ SP/ 寄存器/ 的/ 差异/ 会/ 导致/ 进程/ 的/ 执行/ 踪迹/ 出现/ 差异/ ./ 消除/ SP/ 寄存器/ 初值/ 差异/ 的/ 办法/ 包括/ 两点/ :/ 第一/ 是/ 禁用/ Linux/ 内核/ 的/ 地址/ 空间/ 随机化/ 机制/ ①/ ,/ 保证/ 每次/ 运行/ 时/ 堆栈/ 起始/ 位置/ 固定/ ./ 第二/ 是/ 修改/ ①/ 可以/ 通过/ 向/ // proc/ // sys/ // kernel/ // randomize/ _/ va/ _/ space/ 文件/ 写/ Page7QPoint/ 所/ 创建/ 的/ 堆栈/ 区域/ 的/ 位置/ ,/ 保证/ 与/ Linux/ 内核/ 所/ 分配/ 的/ 堆栈/ 位置/ 相同/ ./ 通过/ 这/ 两个/ 方法/ ,/ 就/ 可以/ 保证/ SP/ 寄存器/ 的/ 初值/ 相同/ ,/ 从而/ 保证/ 两种/ 执行/ 环境/ 下/ 进程/ 的/ 寄存器/ 初始状态/ 完全相同/ ./ 3.2/ ./ 2/ 内存/ 初始状态/ Linux/ 系统/ 中/ ,/ 一个/ 进程/ 的/ 内存/ 映像/ 如图/ 4/ 所示/ ./ 由于/ 可执行程序/ 是/ 不可/ 重/ 定位/ 的/ ,/ 所以/ ./ text/ // ./ data/ // ./ bss/ // heap/ 段/ 的/ 位置/ 和/ 内容/ 都/ 是/ 固定/ 的/ ./ 由于/ 使用/ 的/ 是/ 静态/ 链接/ 的/ 程序/ ,/ 所以/ mmap/ 区域/ 初始/ 内容/ 为空/ ./ 因此/ 内存/ 初始状态/ 中/ 可能/ 存在/ 差异/ 的/ 只有/ 栈/ 区域/ ./ 栈/ 区域/ 的/ 内容/ 包括/ 程序执行/ 时/ 的/ 命令行/ 、/ 环境变量/ 、/ 加载/ 器所/ 设置/ 的/ 辅助/ 向量/ 表等/ 参数/ ./ 这些/ 参数/ 的/ 差异/ 会/ 在/ 两个/ 方面/ 引起/ 进程/ 执行/ 流程/ 的/ 差异/ ./ 一方面/ ,/ 会/ 直接/ 影响/ 到/ 读取/ 这些/ 参数/ 的/ 函数/ 的/ 执行/ 踪迹/ ,/ 比如/ 环境变量/ 的/ 个数/ 和/ 顺序/ 会/ 影响/ getenv/ 库函数/ 的/ 指令/ 踪迹/ ,/ 而/ 辅助/ 向量/ 的/ 个数/ 和/ 顺序/ 会/ 影响/ C/ 运行库/ 在/ 初始化/ 过程/ 中/ 的/ 行为/ ./ 另一方面/ ,/ 这些/ 参数/ 的/ 不同/ 会/ 引起/ SP/ 寄存器/ 初值/ 的/ 差异/ ,/ 继而/ 影响/ 堆栈/ 中/ 分配/ 的/ 对象/ 的/ 地址/ ,/ 最终/ 影响/ 程序/ 的/ 执行/ 踪迹/ ./ 通过/ 将/ 堆栈/ 区/ 的/ 初始/ 内容/ 设置/ 为/ 完全相同/ ,/ 就/ 可以/ 消除/ 内存/ 初始状态/ 的/ 差异/ ,/ 方法/ 是/ 在/ 配置/ 运行/ 环境/ 时/ ,/ 进行/ 如下/ 的/ 设置/ :/ (/ 1/ )/ 保证/ 程序运行/ 环境/ 中/ 环境变量/ 的/ 个数/ 、/ 取值/ 和/ 排列/ 次序/ 相同/ ;/ (/ 2/ )/ 修改/ QPoint/ 中/ 的/ 加载/ 器/ ,/ 使/ 之/ 提供/ 与/ Linux/ 内核/ 完全相同/ 的/ 辅助/ 向量/ 表/ ;/ (/ 3/ )/ 运行/ 程序/ 时/ 使用/ 完全相同/ 的/ 命令行/ ,/ 这/ 意味着/ 不能/ 在/ 测试程序/ 的/ 命令行/ 上/ 调用/ QPoint/ ,/ 而/ 必须/ 使用/ 操作系统/ 的/ binfmt/ _/ misc/ 机制/ 来/ 自动/ 调用/ QPoint/ ./ 3.3/ 状态/ 更新过程/ 即使/ 两个/ 进程/ 的/ 初始状态/ 完全相同/ ,/ 其/ 执行/ 踪迹/ 也/ 可能/ 因所/ 执行/ 的/ 指令/ 而/ 产生/ 差异/ ./ 可以/ 将/ 进程/ 所/ 执行/ 的/ 指令/ 分为/ 两类/ ./ 一类/ 指令/ 在/ 每次/ 执行/ 时/ 对/ 进程/ 状态/ 的/ 更新/ 都/ 是/ 确定/ 的/ ,/ 不/ 依赖于/ 进程/ 的/ 外部/ 执行/ 环境/ ,/ 用户/ 级/ 指令/ 集中/ 的/ 大部分/ 指令/ 都/ 属于/ 此类/ ./ 另一类/ 指令/ 对/ 进程/ 状态/ 的/ 更新/ 依赖于/ 进程/ 的/ 外部/ 执行/ 环境/ ./ 此类/ 指令/ 主要/ 用于/ 申请/ 资源/ 或/ 与/ 外界/ 交互/ ,/ 包括/ 系统/ 调用/ 指令/ 、/ 引发/ 异常/ 的/ 指令/ 、/ 访问/ 外设/ 的/ 指令/ 、/ 访问/ 硬件/ 计数器/ 的/ 指令/ 等/ ./ 因为/ 第/ 1/ 类/ 指令/ 对/ 进程/ 状态/ 的/ 更新/ 是/ 确定/ 的/ ,/ 因此/ 不会/ 给/ 程序/ 的/ 执行/ 踪迹/ 带来/ 差异/ ./ 第/ 2/ 类/ 指令/ 执行/ 时会/ 受到/ 外部环境/ 的/ 影响/ ,/ 因此/ 在/ 不同/ 的/ 执行/ 环境/ 下/ ,/ 可能/ 会/ 对/ 程序/ 的/ 执行/ 踪迹/ 有/ 不同/ 的/ 影响/ ./ 本/ 小节/ 详细分析/ 了/ 影响/ 第/ 2/ 类/ 指令/ 的/ 外部环境/ 因素/ ,/ 并/ 提出/ 了/ 避免/ 这些/ 因素/ 影响/ 的/ 方法/ ./ 3.3/ ./ 1/ 操作系统/ 内核/ 的/ 影响/ 对于/ 运行/ 在/ QPoint/ 上/ 的/ 进程/ 来说/ ,/ QPoint/ 虚拟/ 了/ 一个/ 操作系统/ 内核/ ,/ 用于/ 处理/ 进程/ 的/ 所有/ 系统/ 调用/ 请求/ 和/ 触发/ 的/ 异常/ 事件/ ./ 而/ 对/ 运行/ 在/ Simics/ 上/ 的/ 进程/ 来说/ ,/ 其/ 系统/ 调用/ 请求/ 和/ 异常/ 事件/ 是/ 由/ 真实/ 的/ Linux/ 内核/ 处理/ 的/ ./ QPoint/ 虚拟/ 出/ 的/ 内核/ 和/ 真实/ Linux/ 内核/ 之间/ 的/ 行为/ 差异/ 会/ 导致/ 在/ 两个/ 环境/ 下/ 执行/ 的/ 进程/ 的/ 状态/ 出现/ 差异/ ./ 虚拟地址/ 空间布局/ ./ Linux/ 系统/ 中/ ,/ 进程/ 请求/ 的/ 大块/ 动态内存/ 都/ 被/ 分配/ 在/ mmap/ 空间/ ,/ 如果/ mmap/ 地址/ 空间布局/ 不同/ 的话/ ,/ 进程/ 中/ 很多/ 动态/ 对象/ 的/ 地址/ 就/ 会/ 存在/ 差异/ ./ 对于/ 使用/ 对象/ 的/ 地址/ 参与/ 计算/ 、/ 并/ 利用/ 计算结果/ 控制程序/ 执行/ 流程/ 的/ 应用程序/ 来说/ ,/ 这种/ 对象/ 地址/ 的/ 差异/ 可能/ 会/ 引起/ 执行/ 踪迹/ 上/ 的/ 巨大/ 差异/ ./ 另外/ ,/ 由于/ 虚拟地址/ 空间布局/ 是/ 一个/ 全局/ 状态/ ,/ 会/ 影响/ 后续/ 的/ 整个/ 执行/ 过程/ ,/ 因此/ 消除/ 虚拟地址/ 空间布局/ 差异/ 对/ 保证/ 执行/ 踪迹/ 的/ 一致性/ 具有/ 重要/ 意义/ ./ 的/ 差异/ 可能/ 由/ 两个/ 因素/ 引起/ :/ QPoint/ 和/ Simics/ 中/ 进程/ 虚拟地址/ 空间布局/ 上/ (/ 1/ )/ QPoint/ 和/ Linux/ 内核/ 中/ 实现/ 的/ mmap/ 空间/ 分配/ 算法/ 不同/ ./ QPoint/ 中/ 从/ 低/ 地址/ 向/ 高/ 地址/ 进行/ 空间/ 分配/ ,/ 而/ Linux/ 内核/ 从/ 高/ 地址/ 向/ 低/ 地址/ 进行/ 空间/ 分配/ ./ (/ 2/ )/ Linux/ 内核/ 中/ 不仅/ 对栈/ 区域/ 进行/ 随机化/ 处理/ ,/ 也/ 会/ 对/ mmap/ 区域/ 进行/ 随机化/ 处理/ ,/ 因此/ 每次/ 执行/ 时/ mmap/ 空间/ 的/ 起始/ 地址/ 会/ 有/ 一个/ 随机/ 的/ 偏移/ ,/ 进而/ 导致/ 进程/ 的/ 虚拟地址/ 空间布局/ 在/ 每次/ 运行/ 时/ 都/ 不/ 相同/ ./ 针对/ 以上/ 两点/ ,/ 分别/ 采用/ 如下/ 方法/ 就/ 可以/ 保证/ QPoint/ 和/ Simics/ 中/ 进程/ 的/ 虚拟地址/ 空间布局/ 完全一致/ ./ (/ 1/ )/ 修改/ QPoint/ 中/ 的/ mmap/ 空间/ 分配/ 算法/ ,/ Page8/ 采用/ 自顶向下/ 的/ 方法/ 来/ 分配/ mmap/ 空间/ ;/ (/ 2/ )/ 禁用/ Linux/ 内核/ 的/ 虚拟地址/ 空间/ 随机化/ 机制/ ,/ 方法/ 与/ 禁用/ 栈/ 区域/ 随机化/ 相同/ ./ I/ // O/ 缓冲/ 块/ 大小/ ./ 库函数/ 在/ 进行/ 文件/ I/ // O/ 时会/ 对/ I/ // O/ 数据/ 进行/ 缓冲/ ,/ 只有/ 当/ 一个/ 缓冲/ 块/ 被/ 写/ 满/ 或/ 读完/ 之后/ ,/ 才/ 会/ 进行/ 真正/ 的/ 磁盘/ I/ // O/ ./ I/ // O/ 缓冲/ 块/ 的/ 大小/ 是/ 与/ 执行/ 环境/ 相关/ 的/ ./ 如果/ 不同/ 执行/ 环境/ 下/ 的/ 缓冲/ 块/ 大小/ 不同/ ,/ 一方面/ 会/ 引起/ 库函数/ 中/ I/ // O/ 缓冲/ 部分/ 的/ 执行/ 流程/ 差异/ ;/ 另一方面/ ,/ 由于/ 缓冲/ 块/ 是从/ 系统/ 堆/ 内存/ 中/ 分配/ 的/ ,/ 不同/ 的/ 块/ 大小/ 会/ 导致/ 堆/ 内存/ 分配/ 算法/ 的/ 状态/ 差异/ ./ 堆/ 内存/ 状态/ 是/ 一个/ 全局/ 状态/ ,/ 因此/ 这种/ 差异/ 会/ 影响/ 到/ 后续/ 的/ 所有/ 堆/ 内存/ 分配/ 释放/ 操作/ 中/ ,/ 导致/ 指令/ 踪迹/ 出现/ 巨大/ 差异/ ./ 在/ QPoint/ 环境/ 中/ ,/ 进程/ 的/ I/ // O/ 缓冲/ 块/ 大小/ 是/ 由/ QPoint/ 设定/ 的/ ./ 而/ Simics/ 环境/ 中/ ,/ 进程/ 的/ I/ // O/ 缓冲/ 块/ 大小/ 是/ 由/ Linux/ 内核/ 设定/ 的/ ,/ 这/ 两者/ 可能/ 存在/ 差异/ ./ 消除/ I/ // O/ 缓冲/ 块/ 大小/ 差异/ 的/ 方法/ 是/ 修改/ QPoint/ 中/ 的/ Stat/ 系统/ 调用/ 模拟/ 机制/ ,/ 使/ 其/ 返回/ 与/ Linux/ 内核/ 相同/ 的/ I/ // O/ 缓冲/ 块/ 大小/ ./ 可读/ 的/ 进程/ 信息/ ./ 一些/ 可读/ 的/ 进程/ 信息/ 比如/ 进程/ ID/ 、/ 用户/ ID/ 等/ ,/ 是/ 依赖于/ 进程/ 的/ 执行/ 环境/ 的/ ./ 如果/ 进程/ 的/ 行为/ 受/ 这些/ 信息/ 影响/ ,/ 就/ 会/ 导致/ 不同/ 环境/ 下/ 指令/ 踪迹/ 的/ 差异/ ./ 在/ 设置/ 实验/ 环境/ 时/ ,/ 通过/ 在/ 不同/ 的/ 执行/ 环境/ 中/ 使用/ 相同/ 的/ 用户/ ID/ ,/ 可以/ 消除/ 用户/ ID/ 的/ 差异/ ./ 通过/ 在/ QPoint/ 中/ 截获/ getpid/ 等/ 获取/ 进程/ 信息/ 的/ 系统/ 调用/ ,/ 可以/ 保证/ 在/ 不同/ 的/ 执行/ 环境/ 下/ 具有/ 一致/ 的/ 进程/ 信息/ ./ 3.3/ ./ 2/ 寄存器/ 窗口/ 溢出/ 的/ 影响/ SPARC/ 体系结构/ 中/ 的/ 寄存器/ 窗口/ 机制/ 会/ 引起/ 进程/ 指令/ 踪迹/ 的/ 内在/ 不确定性/ ./ SPARCABI/ 中/ 规定/ 操作系统/ 内核/ 和/ 用户/ 进程/ 共享/ 寄存器/ 窗口/ 资源/ ./ 如果/ 在/ 系统/ 调用/ 或/ 异常/ 事件/ 的/ 处理过程/ 中/ 发生/ 寄存器/ 窗口/ 溢出/ ,/ 溢出/ 的/ 寄存器/ 窗口/ 就/ 会/ 被/ 保存/ 到/ 进程/ 的/ 用户/ 堆栈/ 中/ ./ 这会/ 导致/ 进程/ 堆栈/ 的/ 内容/ 发生意外/ 的/ 改变/ ,/ 是/ 系统/ 调用/ 或/ 异常/ 指令/ 的/ 副作用/ ./ 在/ QPoint/ 中/ ,/ 由于/ OS/ 是/ 虚拟/ 出来/ 的/ ,/ 不/ 和/ 用户/ 进程/ 共享/ 寄存器/ 资源/ ,/ 因此/ 虚拟/ OS/ 中/ 不会/ 将/ 寄存器/ 窗口/ 溢出/ 到/ 用户/ 进程/ 的/ 堆栈/ ,/ 也/ 就/ 不会/ 引起/ 进程/ 用户/ 堆栈/ 的/ 状态/ 改变/ ./ 因此/ ,/ 处理/ 完/ 系统/ 调用/ 或/ 异常/ 事件/ 后/ ,/ QPoint/ 和/ Simics/ 中/ 进程/ 的/ 堆栈/ 状态/ 可能/ 存在/ 差异/ ./ 某些/ 程序/ 的/ 执行/ 流程/ 会/ 受到/ 用户/ 堆栈/ 的/ 这种/ 状态/ 差异/ 的/ 影响/ ,/ 从而/ 导致/ 进程/ 指令/ 踪迹/ 的/ 差异/ ./ 由于/ 并/ 不是/ 每次/ 进入/ 内核/ 都/ 会/ 改变/ 进程/ 用户/ 堆栈/ 的/ 内容/ ,/ 而是/ 取决于/ 进入/ 内核/ 之后/ 是否/ 发生/ 了/ 寄存器/ 窗口/ 溢出/ ,/ 因此/ 这种/ 情况/ 无法/ 被/ 准确/ 识别/ ,/ 没有/ 一种/ 简单/ 的/ 办法/ 避免/ 内核/ 代码/ 中/ 的/ 寄存器/ 窗口/ 溢出/ 对/ 进程/ 指令/ 踪迹/ 的/ 影响/ ./ 3.3/ ./ 3/ 系统/ 时间/ 的/ 影响/ 大部分/ 使用/ 了/ 系统/ 时间/ 的/ 程序/ 的/ 执行/ 流程/ 都/ 会/ 受/ 系统/ 当前/ 时间/ 的/ 影响/ ./ 因此/ 如果/ 不同/ 运行/ 环境/ 中/ 的/ 系统/ 时间/ 不同/ 的话/ ,/ 就/ 会/ 导致/ 此类/ 程序/ 的/ 指令/ 踪迹/ 出现/ 变化/ ./ 即使/ 一个/ 程序/ 的/ 计算/ 逻辑/ 没有/ 明显/ 地/ 依赖于/ 系统/ 时间/ ,/ 但是/ 只要/ 程序/ 试图/ 获取/ 系统/ 时间/ ,/ 就/ 可能/ 引起/ 指令/ 踪迹/ 的/ 变动/ ./ 原因/ 是/ 由于/ 系统/ 中/ 通常/ 只/ 维护/ 一个/ 秒/ 时间/ 和/ 微秒/ 时间/ ,/ 获取/ 其它/ 形式/ 的/ 时间/ 时/ 就/ 必须/ 进行/ 转换/ ./ 转换/ 过程/ 的/ 指令/ 踪迹/ 受/ 3/ 个/ 因素/ 的/ 影响/ :/ (/ 1/ )/ 系统/ 当前/ 日期/ ./ 转换/ 秒/ 时间/ 到/ 日期/ 时有/ 一个/ 循环/ 相减/ 的/ 过程/ ,/ 如果/ 系统/ 日期/ 不同/ ,/ 循环/ 次数/ 就/ 会/ 不同/ ;/ (/ 2/ )/ 系统/ 时/ 区/ 设置/ ./ 不同/ 的/ 时区/ 可能/ 会/ 引起/ 日期/ 的/ 不同/ ,/ 此外/ 是否/ 支持/ 夏令时/ 等/ 也/ 会/ 影响/ 转换/ 过程/ 的/ 指令/ 踪迹/ ;/ (/ 3/ )/ 是否/ 需要/ 将/ 时间/ 转换成/ 字符串/ ./ 将/ 时间/ 转换成/ 字符串/ 的/ 时候/ ,/ 有/ 一个/ 将/ 整数/ 转换成/ 字符串/ 的/ 操作/ ,/ 这个/ 操作/ 的/ 指令/ 踪迹/ 依赖于/ 整数/ 的/ 数量级/ ./ 由于/ 时间/ 中/ 的/ 微秒/ 、/ 秒/ 部分/ 都/ 很/ 容易/ 在/ 两次/ 运行/ 中/ 出现/ 数量级/ 上/ 的/ 差异/ ,/ 所以/ 转换/ 时间/ 到/ 字符串/ 的/ 时候/ 很/ 容易/ 出现/ 指令/ 踪迹/ 的/ 差异/ ./ 通过/ 在/ 不同/ 的/ 执行/ 环境/ 下/ 设置/ 相同/ 的/ 时区/ ,/ 并且/ 在/ 运行/ 程序/ 时/ 设置/ 相同/ 的/ 系统/ 时间/ ,/ 可以/ 消除/ 上述/ 前/ 两点/ 因素/ 的/ 影响/ ./ 但是/ 由于/ 第/ 3/ 个/ 因素/ 依赖于/ 进程/ 时间/ 在/ 微秒/ 级/ 上/ 的/ 精确/ 匹配/ ,/ 除非/ 在/ 第/ 1/ 次/ 执行/ 的/ 时候/ 记录/ 所有/ 时间/ 相关/ 系统/ 调用/ 的/ 返回值/ ,/ 下/ 一次/ 执行/ 的/ 时候/ 重/ 放/ ,/ 否则/ 无法/ 保证/ 两次/ 执行/ 的/ 指令/ 踪迹/ 完全相同/ ./ 此外/ ,/ 有些/ 程序/ 的/ 行为/ 受/ 程序执行/ 速度/ 的/ 影响/ ,/ 比如/ “/ 每隔/ 固定/ 时间/ 间隔/ 进行/ 一次/ 处理/ ”/ 这/ 类/ 行为/ ./ 对于/ 这样/ 的/ 程序/ ,/ 即使/ 在/ 同一个/ 平台/ 上/ 运行/ 多次/ ,/ 也/ 无法/ 保证/ 它/ 每次/ 的/ 执行/ 踪迹/ 都/ 是/ 相同/ 的/ ,/ 在/ 不同/ 的/ 平台/ 上/ 就/ 更/ 无法/ 保证/ 了/ ./ 3.3/ ./ 4/ 其它/ 环境因素/ 进程/ 的/ 运行/ 目录/ ./ 有些/ 程序/ 的/ 执行/ 踪迹/ 会/ 受到/ 进程/ 当前目录/ 的/ 影响/ ./ 比如/ 使用/ getcwd/ 系统/ 调用/ 获取/ 当前目录/ ,/ 然后/ 利用/ 当前目录/ 构造/ 数据文件/ 的/ 完整/ 路径/ ,/ 并且/ 在/ 堆/ 中/ 为/ 其/ 分配/ 存储空间/ ./ 因此/ 当前/ 运行/ 目录/ 的/ 不同/ 会/ 引起/ 堆/ 状态/ 的/ 差异/ ,/ 堆/ 状态/ 的/ 差异/ 继而/ 导致/ 后续/ 所有/ 堆/ 内存/ 分配/ 操作/ 的/ 指令/ 踪迹/ 都/ 受/ Page9/ 到/ 影响/ ./ 文件系统/ 状态/ ./ 有些/ 程序/ 的/ 指令/ 踪迹/ 会/ 受到/ 文件系统/ 的/ 当前/ 状态/ 的/ 影响/ ./ 比如/ 一些/ Fortran/ 程序/ 在/ 创建/ 输出/ 文件/ 之前/ 会/ 检测/ 该/ 文件/ 是否/ 已经/ 存在/ ,/ 如果/ 已经/ 存在/ 的话/ 就/ 先/ 将/ 其/ 删除/ ./ 也/ 有/ 一些/ 程序/ 会/ 扫描/ 当前/ 运行/ 目录/ 下/ 的/ 所有/ 文件/ ./ 对于/ 这/ 类/ 程序/ ,/ 如果/ 当前/ 运行/ 目录/ 下/ 的/ 文件/ 不同/ 的话/ ,/ 就/ 会/ 导致/ 进程/ 指令/ 踪迹/ 的/ 差异/ ./ 外部/ 事件/ ./ 有些/ 程序/ 的/ 行为/ 依赖于/ 程序/ 接收/ 到/ 的/ I/ // O/ 事件/ ,/ 如果/ 两次/ 执行/ 时/ I/ // O/ 事件/ 到达/ 的/ 顺序/ 不同/ ,/ 或者/ 每次/ 到达/ 的/ 数据量/ 不同/ ,/ 也/ 会/ 导致/ 程序/ 指令/ 踪迹/ 的/ 差异/ ./ 比如/ 使用/ 类似/ select/ 等/ 机制/ 等待/ I/ // O/ 事件/ 的/ 程序/ 就是/ 这种/ 类型/ ./ 因为/ 这/ 类/ 程序/ 的/ 内在/ 行为/ 依赖于/ 外部/ 随机因素/ ,/ 所以/ 无法/ 保证/ 两次/ 执行/ 的/ 指令/ 踪迹/ 匹配/ ./ 随机数/ ./ 有些/ 程序/ 中/ 会/ 使用/ 到/ 随机数/ ./ 如果/ 程序/ 中/ 使用/ 的/ 是/ 伪/ 随机数/ ,/ 只要/ 随机数/ 种子/ 相同/ ,/ 就/ 可以/ 保证/ 随机数/ 序列/ 相同/ ./ 但是/ 有些/ 程序/ 使用/ 一些/ 不确定性/ 的/ 数据/ 作为/ 随机数/ 种子/ ,/ 比如/ 当前/ 时间/ 、/ 系统/ 中断/ 事件/ (/ urandom/ )/ 等/ ,/ 对于/ 这/ 类/ 程序/ ,/ 很难/ 在/ 两次/ 运行/ 中/ 重现/ 随机数/ 序列/ ,/ 也/ 就/ 无法/ 保证/ 指令/ 踪迹/ 的/ 一致性/ ./ 4/ 评估/ 为了/ 验证/ 第/ 3/ 节中/ 提出/ 的/ 避免/ 执行/ 踪迹/ 差异/ 的/ 几种/ 方法/ 的/ 有效性/ ,/ 本文/ 将/ 提出/ 的/ 各种/ 方法/ 分别/ 应用/ 到/ QPoint/ 上/ ,/ 然后/ 运行/ 了/ SPEC2006/ 中/ 的/ 所有/ 测试程序/ ,/ 并/ 与/ 这些/ 程序/ 在/ Simics/ 模拟器/ 上/ 执行/ 时/ 的/ 总/ 提交/ 指令/ 数/ 进行/ 了/ 比较/ ,/ 结果/ 如表/ 2/ 所示/ ./ 表/ 2/ 中/ 的/ Δ/ 0/ 表示/ 未/ 采用/ 本文/ 中/ 方法/ 时/ 的/ 总/ 提交/ 指令/ 数/ 偏差/ ,/ Δ/ 1/ 表示/ 消除/ 进程/ 的/ 初始状态/ 差异/ 后/ 的/ 指令/ 偏差/ ,/ Δ/ 2/ 表示/ 消除/ 进程/ 的/ 初始状态/ 差异/ 和/ 操作系统/ 内核/ 影响/ 之后/ 的/ 指令/ 偏差/ ,/ Δ/ 3/ 表示/ 使用/ 本文/ 中/ 提出/ 的/ 全部/ 方法/ 之后/ 的/ 指令/ 偏差/ ./ 可以/ 看出/ ,/ 应用/ 了/ 本文/ 中/ 提出/ 的/ 方法/ 之后/ ,/ 对于/ 28/ 个/ 测试程序/ 中/ 的/ 23/ 个/ ,/ 在/ QPoint/ 上/ 执行/ 与/ 在/ Simics/ 模拟器/ 中/ 执行/ 时/ 得到/ 的/ 总/ 提交/ 指令/ 数/ 完全相同/ ,/ 另外/ 的/ 5/ 个/ 只有/ 细微/ 的/ 指令/ 总数/ 差异/ ./ 相对/ 于/ 10M/ ~/ 100M/ 的/ 模拟/ 点/ 大小/ ,/ 这种/ 量级/ 的/ 差异/ 对/ 模拟/ 点/ 定位/ 带来/ 的/ 影响/ 可以/ 忽略不计/ ./ 表/ 2/ 中/ 的/ 实验/ 结果/ 说明/ ,/ 对于/ 影响/ 指令/ 踪迹/ 的/ 大部分/ 因素/ ,/ 都/ 可以/ 利用/ 本文/ 中/ 提出/ 的/ 方法/ 消除/ 其/ 影响/ ./ 但是/ 也/ 有/ 一些/ 因素/ 的/ 影响/ 是/ 无法/ 避免/ 的/ ,/ 比如/ 表/ 2/ 应用/ 了/ 消除/ 程序/ 指令/ 踪迹/ 差异/ 的/ 方法/ 后/ ,/ 测试程序/ Δ/ 0/ Δ/ 1/ Δ/ 2/ Δ/ 3400/ ./ perlbench639357210669785193332608790401/ ./ bzip2403/ ./ gcc971956566841796416222930410/ ./ bwaves360634353459140416/ ./ gamess429/ ./ mcf433/ ./ milc131372027134305964195434/ ./ zeusmp435/ ./ gromacs126564562235920783436/ ./ cactusADM22143462220001140437/ ./ leslie3d9337742777321439912444/ ./ namd445/ ./ gobmk447/ ./ dealII809842401853802140450/ ./ soplex189571625178225830140453/ ./ povray99682317184711064920454/ ./ calculix4134877354131909219240456/ ./ hmmer1635782163348616334860458/ ./ sjeng459/ ./ GemsFDTD2801206827877521140462/ ./ libquantum2812980214140464/ ./ h264ref465/ ./ tonto505816997821760286402477578345470/ ./ lbm471/ ./ omnetpp20456720917195171959174473/ ./ astar482/ ./ sphinx31725106702852052852050483/ ./ xalancbmk3702935846116332811633300/ 运行/ 速度/ 依赖/ 、/ 外部/ 事件/ 依赖/ 等/ ./ 体系结构/ 的/ 某些/ 特性/ 也/ 可能/ 会/ 引起/ 一些/ 不确定性/ ,/ 比如/ SPARC/ 平台/ 上/ 的/ 寄存器/ 窗口/ 溢出/ 机制/ ./ 受/ 这些/ 因素/ 影响/ 的/ 程序/ ,/ 其内/ 在/ 特性/ 本身/ 就是/ 不/ 确定/ 的/ ,/ 即使/ 在/ 完全相同/ 的/ 环境/ 中/ 连续/ 运行/ 两次/ 也/ 可能/ 出现/ 执行/ 踪迹/ 的/ 差异/ ./ 但是/ 这些/ 因素/ 往往/ 只/ 影响/ 程序/ 的/ 局部/ 状态/ ,/ 不会/ 导致/ 执行/ 踪迹/ 出现/ 较大/ 的/ 差异/ ./ 对于/ 表/ 2/ 中/ 指令/ 总数/ 存在/ 差异/ 的/ 5/ 个/ 测试程序/ ,/ 经/ 分析/ 后/ 确认/ 都/ 是/ 由/ 这些/ 不可/ 消除/ 因素/ 引起/ 的/ ./ 其中/ 433/ ./ milc/ 和/ 471/ ./ omnetpp/ 测试程序/ 的/ 总/ 指令/ 数/ 差异/ 是/ 由/ SPARC/ 体系结构/ 的/ 寄存器/ 窗口/ 溢出/ 机制/ 引起/ 的/ ;/ 435/ ./ gromacs/ ,/ 437/ ./ leslie3d/ 和/ 465/ ./ tonto/ 测试程序/ 的/ 总/ 指令/ 数/ 差异/ 是/ 由/ 时间/ 日期/ 因素/ 引起/ 的/ ./ 从表/ 2/ 可以/ 看出/ ,/ 应用/ 了/ 本文/ 中/ 提出/ 的/ 所有/ 方法/ 之后/ ,/ 大部分/ 程序/ 在/ 基于/ DBT/ 的/ BBVProfiling/ 执行/ 和/ 模拟/ 执行/ 时/ 的/ 指令/ 踪迹/ 完全相同/ ./ 当/ 程序/ 两次/ 执行/ 间/ 的/ 指令/ 踪迹/ 完全相同/ 的/ 时候/ ,/ 两种/ 方式/ 下/ 得到/ 的/ BBVProfile/ 就/ 完全相同/ ,/ 从而/ 提取/ 出/ 的/ 代表性/ 模拟/ 点/ 也/ 将/ 完全相同/ ./ 另一方面/ ,/ 由于/ 执行/ 踪迹/ 完全相同/ ,/ 模拟/ 时/ 的/ 模拟/ 点/ 定位/ 也/ 不会/ 有/ 任何/ 偏差/ ./ 因此/ ,/ 应用/ 了/ 本文/ 中/ 提出/ 的/ 方法/ 之后/ ,/ 基于/ DBT/ 加/ Page10/ 速/ 的/ 模拟/ 流程/ 能够/ 得到/ 与/ 基于/ 功能/ 模拟/ 的/ 模拟/ 流程/ 完全相同/ 的/ 模拟/ 精度/ ./ 5/ 结论/ 本文/ 发现/ ,/ DBT/ 加速/ 的/ 模拟/ 方法/ 会/ 带来/ 较大/ 的/ 模拟/ 误差/ ./ 误差/ 产生/ 的/ 根源/ 在于/ 应用程序/ 在/ 模拟/ 执行/ 时/ 无法/ 精确/ 重现/ DBT/ 执行/ 时/ 的/ 指令/ 踪迹/ ,/ 从而/ 导致/ 模拟/ 点/ 定位/ 出现/ 偏差/ ./ 本文/ 提出/ 了/ 一个/ 程序执行/ 踪迹/ 模型/ ,/ 以此/ 为/ 基础/ 分析/ 了/ 引起/ 程序/ 指令/ 踪迹/ 不可/ 重现/ 的/ 可能/ 因素/ ,/ 并/ 给出/ 了/ 避免/ 其/ 影响/ 的/ 方法/ ./ 实验/ 结果显示/ ,/ 提出/ 的/ 方法/ 可以/ 保证/ 程序执行/ 过程/ 的/ 精确/ 重现/ ,/ 从而/ 消除/ DBT/ 加速/ 带来/ 的/ 模拟/ 结果/ 误差/ ./ 文中/ 提出/ 的/ 方法/ 也/ 可以/ 用于/ 程序/ 调错/ 等/ 需要/ 精确/ 重现/ 程序执行/ 踪迹/ 的/ 应用领域/ 中/ ./ 

