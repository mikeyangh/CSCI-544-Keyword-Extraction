Page1/ 云/ 计算环境/ 下/ 的/ 大规模/ 图/ 数据处理/ 技术/ 于戈谷/ 峪/ 鲍玉斌/ 王志刚/ (/ 东北大学/ 信息科学/ 与/ 工程学院/ 沈阳/ 110819/ )/ (/ 医学影像/ 计算/ 教育部/ 重点/ 实验室/ (/ 东北大学/ )/ 沈阳/ 110819/ )/ 摘要/ 随着/ 社交/ 网络分析/ 、/ 语义/ Web/ 分析/ 、/ 生物/ 信息/ 网络分析/ 等/ 新兴/ 应用/ 的/ 快速增长/ ,/ 对/ 亿万个/ 顶点/ 级别/ 大规模/ 图/ 的/ 处理/ 能力/ 的/ 需求/ 愈加/ 迫切/ ,/ 这是/ 当前/ 高性能/ 计算/ 领域/ 的/ 研究/ 和/ 开发/ 热点/ ./ 文中/ 结合/ 云/ 计算/ 的/ 特点/ ,/ 从图/ 数据管理/ 与/ 图/ 数据处理/ 机制/ 两个/ 方面/ ,/ 综述/ 了/ 云/ 计算环境/ 下/ 进行/ 大规模/ 图/ 数据处理/ 的/ 关键问题/ ,/ 包括/ 图/ 数据/ 的/ 存储/ 方式/ 、/ 图/ 索引/ 结构/ 、/ 图/ 分割/ 策略/ 、/ 图/ 计算/ 模型/ 、/ 消息/ 通信/ 机制/ 、/ 容错/ 管理/ 、/ 可伸缩性/ 、/ 图/ 查询处理/ 等/ ./ 全面/ 总结/ 了/ 当前/ 的/ 研究/ 现状/ 和/ 进展/ ,/ 详细分析/ 了/ 存在/ 的/ 挑战性/ 问题/ ,/ 并/ 深入探讨/ 了/ 未来/ 的/ 研究/ 方向/ ./ 关键词/ 图/ 处理/ ;/ 云/ 计算/ ;/ 数据管理/ ;/ 分布式计算/ 1/ 引言/ 图是/ 计算机科学/ 中/ 最/ 常用/ 的/ 一类/ 抽象/ 数据/ 结/ Page2/ 路径/ 的/ 预测/ 、/ 科技/ 文献/ 的/ 引用/ 关系/ 等/ ;/ 新兴/ 应用/ 如/ 社交/ 网络分析/ 、/ 语义/ Web/ 分析/ 、/ 生物/ 信息/ 网络分析/ 等/ ./ 虽然/ 图/ 的/ 应用/ 和/ 处理/ 技术/ 已经/ 发展/ 了/ 很/ 长时间/ ,/ 理论/ 也/ 日趋完善/ ,/ 但是/ 随着/ 信息化/ 时代/ 的/ 到来/ ,/ 各种/ 信息/ 以/ 爆炸/ 模式/ 增长/ ,/ 导致/ 图/ 的/ 规模/ 日益/ 增大/ ,/ 如何/ 对/ 大规模/ 图/ 进行/ 高效/ 处理/ ,/ 成为/ 一个/ 新/ 的/ 挑战/ ./ 1.1/ 大规模/ 图/ 数据处理/ 问题/ 以/ 互联网/ 和/ 社交/ 网络/ 为例/ ,/ 近/ 十几年来/ ,/ 随着/ 互联网/ 的/ 普及/ 和/ Web2/ ./ 0/ 技术/ 的/ 推动/ ,/ 网页/ 数量/ 增长/ 迅猛/ ,/ 据/ CNNIC/ 统计/ ,/ 2010/ 年/ 中国/ 网页/ 规模/ 达到/ 600/ 亿/ ,/ 年增长率/ 78.6/ %/ ,/ 而/ 基于/ 互联网/ 的/ 社交/ 网络/ 也/ 后来居上/ ,/ 如/ 全球/ 最大/ 的/ 社交/ 网络/ Facebook/ ,/ 已有/ 约/ 7/ 亿/ 用户/ ,/ 国内/ 如/ QQ/ 空间/ 、/ 人人/ 网等/ ,/ 发展/ 也/ 异常/ 迅猛/ ./ 真实世界/ 中/ 实体/ 规模/ 的/ 扩张/ ,/ 导致/ 对应/ 的/ 图/ 数据/ 规模/ 迅速/ 增长/ ,/ 动辄/ 有/ 数十亿/ 个/ 顶点/ 和/ 上/ 万亿/ 条边/ ./ 本文/ 所指/ 的/ 大规模/ 强调/ 的/ 就是/ 单个/ 图/ 的/ 大规模/ 性/ ,/ 通常/ 包含/ 10/ 亿个/ 以上/ 顶点/ ./ 面对/ 这样/ 大规模/ 的/ 图/ ,/ 对/ 海量/ 数据处理/ 技术/ 提出/ 了/ 巨大/ 挑战/ ./ 以/ 搜索引擎/ 中/ 常用/ 的/ PageRank/ 计算/ [/ 1/ ]/ 为例/ ,/ 一个/ 网页/ 的/ PageRank/ 得分/ 根据/ 网页/ 之间/ 相互/ 的/ 超链接/ 关系/ 计算/ 而/ 得到/ ./ 将/ 网页/ 用图/ 顶点/ 表示/ ,/ 网页/ 之间/ 的/ 链接/ 关系/ 用/ 有/ 向/ 边/ 表示/ ,/ 按/ 邻接/ 表/ 形式/ 存储/ 100/ 亿个/ 图/ 顶点/ 和/ 600/ 亿条/ 边/ ,/ 假设/ 每个/ 顶点/ 及/ 出度/ 边/ 的/ 存储空间/ 占/ 100/ 字节/ ,/ 那么/ 整个/ 图/ 的/ 存储空间/ 将/ 超过/ 1TB/ ./ 如此/ 大规模/ 的/ 图/ ,/ 对/ 其/ 存储/ 、/ 更新/ 、/ 查找/ 等/ 处理/ 的/ 时间/ 开销/ 和/ 空间/ 开销/ 远远/ 超出/ 了/ 传统/ 集中式/ 图/ 数据管理/ 的/ 承受能力/ ./ 针对/ 大规模/ 图/ 数据/ 的/ 高效/ 管理/ ,/ 如/ 存储/ 、/ 索引/ 、/ 更新/ 、/ 查找/ 等/ ,/ 已经/ 成为/ 急需解决/ 的/ 问题/ ./ 1.2/ 采用/ 云/ 计算环境/ 处理/ 大规模/ 图/ 的/ 优势/ 云/ 计算/ 是/ 网格/ 计算/ 、/ 分布式计算/ 、/ 并行计算/ 、/ 效用/ 计算/ 、/ 网络/ 存储/ 、/ 虚拟化/ 等/ 先进/ 计算机技术/ 和/ 网络/ 技术/ 发展/ 融合/ 的/ 产物/ ,/ 具有/ 普遍/ 适用性/ ./ 云/ 计算技术/ 的/ 发展/ ,/ 一直/ 与/ 大规模/ 数据处理/ 密切相关/ ./ 因此/ ,/ 依靠/ 云/ 计算环境/ 对/ 大规模/ 图/ 数据/ 进行/ 高效/ 处理/ ,/ 是/ 一个/ 非常/ 有/ 发展潜力/ 的/ 方向/ ,/ 其/ 主要/ 优势/ 表现/ 在/ :/ (/ 1/ )/ 海量/ 的/ 图/ 数据/ 存储/ 和/ 维护/ 能力/ ./ 大规模/ 图/ 的/ 数据量/ 可/ 达/ 几百/ GB/ 甚至/ PB/ 级别/ ,/ 难以/ 在/ 传统/ 文件系统/ 或/ 数据库/ 中/ 存储/ ,/ 而云/ 计算环境/ 提供/ 分布式/ 存储/ 模式/ ,/ 可以/ 汇聚/ 成百上千/ 普通/ 计算机/ 的/ 存储/ 能力/ 和/ 计算能力/ ,/ 提供/ 高容量/ 的/ 存储/ 服务/ ,/ 完全/ 能够/ 存放/ 和/ 处理/ 大规模/ 的/ 图/ 数据/ ./ 云/ 计算环境/ 下/ 的/ 并发/ 控制/ 、/ 一致性/ 维护/ 、/ 数据备份/ 和/ 可靠性/ 等/ 控制策略/ ,/ 可以/ 为/ 大规模/ 图/ 数据/ 的/ 维护/ 提供/ 保障/ ./ (/ 2/ )/ 强大/ 的/ 分布式/ 并行处理/ 能力/ ./ 利用/ 云/ 计算/ 分布/ 平行/ 处理/ 的/ 特点/ ,/ 可以/ 将/ 一个/ 大图/ 分割/ 成/ 若干/ 子图/ ,/ 把/ 针对/ 一个/ 大图/ 的/ 处理/ 分割/ 为/ 若干/ 针对/ 子图/ 的/ 处理/ 任务/ ./ 云/ 计算/ 分布式/ 并行/ 运算/ 能力/ ,/ 能够/ 显著/ 提高/ 对/ 大规模/ 图/ 的/ 处理/ 能力/ ./ (/ 3/ )/ 良好/ 的/ 可伸缩性/ 和/ 灵活性/ ./ 从/ 技术/ 角度/ 和/ 经济/ 角度/ 讲/ ,/ 云/ 计算环境/ 具有/ 良好/ 的/ 可伸缩性/ 和/ 灵活性/ ,/ 非常适合/ 处理/ 数据量/ 弹性/ 变化/ 的/ 大规模/ 图/ 问题/ ./ 云/ 计算环境/ 通常/ 由/ 廉价/ 的/ 普通/ 计算机/ 构成/ ./ 随着/ 图/ 数据/ 规模/ 的/ 不断/ 增大/ ,/ 可以/ 向云中/ 动态/ 添加/ 节点/ 来/ 扩展/ 存储容量/ 和/ 计算资源/ ,/ 而/ 无需/ 传统/ 并行机/ 模式/ 的/ 巨大/ 投资/ ./ 1.3/ 关键技术/ 挑战/ 虽然/ 云/ 计算环境/ 对于/ 大规模/ 图/ 数据/ 的/ 管理/ 有/ 诸多/ 优势/ ,/ 但是/ 由于/ 云/ 计算/ 只是/ 一个/ 通用/ 的/ 处理/ 框架/ ,/ 而且/ 其/ 本身/ 也/ 正/ 处于/ 发展/ 阶段/ ,/ 如何/ 在/ 云/ 计算环境/ 下/ 进行/ 大规模/ 图/ 数据处理/ ,/ 仍/ 有/ 很多/ 关键/ 技术难题/ 需要/ 解决/ ./ 图/ 计算/ 及其/ 分布式/ 并行处理/ 通常/ 涉及/ 复杂/ 的/ 处理过程/ ,/ 需要/ 大量/ 的/ 迭代/ 和/ 数据通信/ ,/ 针对/ 联机/ 事务处理/ 等/ 应用/ 的/ 传统/ 技术/ 很难/ 直接/ 应用/ 到/ 图/ 数据处理/ 中/ ./ 云/ 计算环境/ 下/ 的/ 大规模/ 图/ 处理/ 主要/ 面临/ 两大/ 挑战/ :/ (/ 1/ )/ 图/ 计算/ 的/ 强/ 耦合/ 性/ ./ 在/ 一个/ 图中/ ,/ 数据/ 之间/ 都/ 是/ 相互/ 关联/ 的/ ,/ 图/ 的/ 计算/ 也/ 是/ 相互/ 关联/ 的/ ./ 图/ 计算/ 的/ 并行算法/ 中/ 对/ 内存/ 的/ 访问/ 表现/ 出/ 很/ 低/ 的/ 局部性/ [/ 2/ ]/ ./ 对于/ 几乎/ 每/ 一个/ 顶点/ 之间/ 都/ 是/ 连通/ 的/ 图/ 来讲/ ,/ 难以/ 分割/ 成/ 若干/ 完全/ 独立/ 的/ 子/ 图以/ 进行/ 独立/ 的/ 并行处理/ ./ 并且/ ,/ “/ 水桶/ 效应/ ”/ 问题/ 加剧/ ,/ 即先/ 完成/ 的/ 任务/ 需要/ 等待/ 后/ 完成/ 的/ 任务/ ,/ 处理速度/ 最慢/ 的/ 任务/ ,/ 将/ 成为/ 整个/ 系统/ 的/ 效率/ 制约/ 瓶颈/ ./ 为了/ 提高/ 执行/ 效率/ ,/ 需要/ 采取/ 多种/ 优化/ 技术/ ./ 首先/ ,/ 在/ 预处理/ 阶段/ ,/ 进行/ 合适/ 的/ 图/ 分割/ 时/ ,/ 尽可能/ 地/ 降低/ 子图/ 之间/ 的/ 耦合/ 性/ ;/ 其次/ ,/ 在/ 执行/ 阶段/ ,/ 应/ 选取/ 合适/ 的/ 图/ 计算/ 模型/ ,/ 避免/ 迭代/ 过程/ 中/ 反复/ 启动/ 任务/ 和/ 读写/ 磁盘/ ,/ 降低/ 任务调度/ 开销/ 和/ IO/ 开销/ ;/ 应/ 充分利用/ 迭代/ 过程/ 中/ 的/ 收敛/ 特性/ 进行/ 查询/ 优化/ ,/ 同时/ 进行/ 有效/ 的/ 同步控制/ 和/ 消息/ 通信/ 优化/ ,/ 减少/ 通信/ 开销/ ,/ 以/ 达到/ 降低/ 水桶/ 效应/ 的/ 目的/ ./ (/ 2/ )/ 云/ 计算/ 节点/ 的/ 低/ 可靠性/ ./ 大规模/ 图/ 处理/ ,/ 需要/ 相对/ 较长/ 的/ 时间/ 来/ 完成/ 计算/ 任务/ ,/ 如/ PageRank/ 计算/ 需要/ 约/ 30/ 次/ 迭代/ 处理/ ,/ 消耗/ 大量/ 的/ 时间/ 和/ 资源/ ./ 而云/ 计算/ 节点/ 通常/ 是/ 由/ 普通/ 的/ 计算机/ 组成/ ,/ 在/ 这种/ 长时间/ 的/ 处理过程/ 中/ ,/ 个别/ 节点/ 出现/ 故障/ 是/ 难免/ 的/ ./ 这时/ ,/ 不能/ 简单/ 地/ 重新/ 计算/ ,/ 而/ 应该/ 从/ 断点/ 或者/ 某个/ 合适/ 的/ 位置/ 接续/ 执行/ ./ 否则/ ,/ 将/ 造成/ 很大/ 的/ 浪/ Page3/ 费/ ,/ 甚至/ 一些/ 大型/ 的/ 图/ 计算/ 根本/ 就/ 不能/ 完成/ ./ 另一方面/ ,/ 由于/ 图/ 计算/ 并行/ 子/ 任务/ 之间/ 的/ 强/ 耦合/ 性/ ,/ 一个/ 子/ 任务/ 的/ 失败/ 可能/ 导致/ 其它/ 子/ 任务/ 的/ 失败/ ,/ 这/ 又/ 增加/ 了/ 恢复/ 处理/ 的/ 复杂性/ ./ 因此/ ,/ 需要/ 考虑/ 有效/ 的/ 容错/ 管理机制/ ,/ 减少/ 大规模/ 图/ 处理过程/ 中/ 的/ 故障/ 恢复/ 开销/ ,/ 尽量避免/ 重复/ 计算/ ,/ 提高/ 大规模/ 图/ 处理/ 的/ 运算/ 效率/ 和/ 稳定性/ ./ 为了/ 解决/ 云/ 计算环境/ 下/ 的/ 大规模/ 图/ 处理/ 问题/ ,/ 可/ 从/ 图/ 数据管理/ 和/ 图/ 处理/ 机制/ 两/ 方面/ 加以/ 考虑/ ./ 在/ 图/ 数据管理/ 上/ ,/ 需要/ 解决/ 图/ 数据/ 的/ 分割/ 、/ 图/ 数据/ 的/ 存储/ 、/ 图/ 数据/ 索引/ 的/ 建立/ 、/ 图/ 查询处理/ 等/ 问题/ ;/ 在/ 图/ 处理/ 机制/ 上/ ,/ 需要/ 解决/ 处理过程/ 中/ 图/ 计算/ 模型/ 选取/ 、/ 同步控制/ 、/ 消息/ 通信/ 、/ 容错/ 管理/ 和/ 可伸缩性/ 等/ 问题/ ./ 本文/ 将/ 针对/ 上述/ 内容/ ,/ 结合/ 云/ 计算/ 的/ 优势/ 和/ 存在/ 的/ 挑战/ ,/ 综述/ 云/ 计算环境/ 下/ 的/ 大规模/ 图/ 处理/ 现有/ 技术/ 的/ 进展/ 、/ 解决方案/ 以及/ 今后/ 的/ 发展趋势/ 和/ 研究/ 方向/ ./ 2/ 图/ 数据模型/ 与/ 存储管理/ 图/ 数据/ 的/ 逻辑/ 表达形式/ 和/ 物理/ 存储/ 结构/ 是/ 实现/ 图/ 处理/ 的/ 基础/ ./ 本节/ 首先/ 介绍/ 图/ 数据模型/ ,/ 然后/ ,/ 介绍/ 图/ 的/ 存储管理/ 以及/ 为了/ 提高/ 查找/ 效率/ 而/ 为/ 图/ 数据/ 建立/ 的/ 索引/ 结构/ ./ 2.1/ 图/ 数据模型/ 作为/ 数学/ 的/ 一个/ 重要/ 分支/ ,/ 图论/ 以图/ 作为/ 研究/ 对象/ ,/ 在/ 简单/ 图/ 的/ 基础/ 上/ 衍生/ 出超/ 图/ 理论/ 、/ 极图/ 理论/ 、/ 拓扑图/ 论/ 等/ ,/ 使图/ 可以/ 从/ 多方面/ 表达/ 现实/ 世界/ ./ 当前/ 大规模/ 图/ 数据管理/ ,/ 采用/ 的/ 数据模型/ 有/ 多种/ ,/ 按照/ 图中/ 节点/ 的/ 复杂程度/ 分为/ 简单/ 节点/ 图/ 模型/ 和/ 复杂/ 节点/ 图/ 模型/ [/ 3/ ]/ ;/ 按照/ 一条/ 边/ 可以/ 连接/ 的/ 顶点/ 数目/ 分为/ 简单/ 图/ 模型/ 和/ 超图/ 模型/ ./ 不论是/ 简单/ 图/ 模型/ 、/ 超图/ 模型/ 、/ 简单/ 节点/ 模型/ 还是/ 复杂/ 节点/ 模型/ ,/ 它们/ 的/ 顶点/ 和/ 边/ 都/ 可以/ 带有/ 属性/ ./ 下面/ 介绍/ 简单/ 图/ 模型/ 和/ 超图/ 模型/ ,/ 其它/ 模型/ 请/ 参考文献/ [/ 4/ ]/ ./ (/ 1/ )/ 简单/ 图/ 模型/ ./ 这里/ 所说/ 的/ 简单/ 图/ ,/ 并/ 不是/ 图论/ 中/ 的/ 简单/ 图/ ,/ 是/ 相对/ 于/ 超图/ 而言/ 的/ ./ 简单/ 图中/ ,/ 一条/ 边/ 只能/ 连接/ 两个/ 顶点/ 允许/ 存在/ 环路/ ./ 简单/ 图/ 的/ 存储/ 和/ 处理/ 都/ 比较/ 容易/ ,/ 对于/ 一般/ 的/ 应用/ ,/ 简单/ 图/ 的/ 表达能力/ 完全/ 可以/ 胜任/ ,/ 如/ PageRank/ 计算/ 、/ 最短/ 路径/ 查询/ 等/ ./ Pregel/ 、/ Hama/ 等/ 系统/ 均/ 采用/ 简单/ 图/ 模型/ 来/ 组织/ 存储/ 和/ 处理/ 大规模/ 图/ 数据/ [/ 5/ -/ 6/ ]/ ./ (/ 2/ )/ 超图/ 模型/ ./ 一条/ 边/ 可以/ 连接/ 任意/ 数目/ 的/ 图/ 顶点/ ./ 此/ 模型/ 中图/ 的/ 边/ 称为/ 超边/ ./ 基于/ 这种/ 特点/ ,/ 超图/ 比/ 上述/ 简单/ 图/ 的/ 适用性/ 更强/ ,/ 保留/ 的/ 信息/ 更/ 多/ ./ 例如/ ,/ 以图/ 顶点/ 代表/ 文章/ ,/ 每条/ 边/ 代表/ 两个/ 顶点/ (/ 文章/ )/ 享有/ 同一个/ 作者/ ./ 现有/ 3/ 篇文章/ V1/ (/ 作者/ A/ 、/ B/ )/ 、/ V2/ (/ 作者/ A/ 、/ C/ )/ 、/ V3/ (/ 作者/ A/ 、/ D/ )/ ,/ 3/ 篇文章/ 的/ 作者/ 都/ 有/ A/ ./ 图/ 1/ (/ a/ )/ 表示/ 了/ 简单/ 图/ 存储/ 模式/ ,/ 3/ 条/ 独立/ 的/ 边/ e1/ ,/ e2/ ,/ e3/ =/ {/ v1/ ,/ v2/ }/ ,/ {/ v1/ ,/ v3/ }/ ,/ {/ v2/ ,/ v3/ }/ ,/ 无法/ 直接/ 保留/ 作者/ A/ 同时/ 是/ 3/ 篇文章/ V1/ 、/ V2/ 、/ V3/ 的/ 作者/ 这一/ 信息/ ./ 图/ 1/ (/ b/ )/ 代表/ 了/ 超图/ 存储/ 模式/ ,/ 超边/ e1/ =/ {/ v1/ ,/ v2/ ,/ v3/ }/ 直接/ 保留/ 了/ A/ 是/ 3/ 篇文章/ V1/ 、/ V2/ 、/ V3/ 的/ 作者/ 这一/ 信息/ ./ 对于/ 具有/ 复杂/ 联系/ 的/ 应用/ ,/ 可以/ 使用/ 超图/ 模型/ 建模/ ,/ 例如/ 社交/ 网络/ 、/ 生物/ 信息网络/ 等/ ./ Trinity/ 等/ 图/ 数据库系统/ 支持/ 超图/ 模型/ 来/ 管理/ 大规模/ 图/ 数据/ [/ 7/ ]/ ./ 2.2/ 图/ 数据/ 的/ 存储/ 方式/ 在/ 目前/ 的/ 大规模/ 图/ 数据管理/ 应用/ 中/ ,/ 主要/ 采用/ 简单/ 图/ 和/ 超图/ 两种/ 数据模型/ ,/ 二者/ 的/ 组织/ 存储/ 格式/ 略有不同/ ./ 这/ 两种/ 模型/ 都/ 可以/ 处理/ 有向图/ 和/ 无/ 向/ 图/ ,/ 默认/ 情况/ 是/ 有向图/ ,/ 而/ 无/ 向/ 图/ 中/ 的/ 边/ 可以/ 看作/ 是/ 两条/ 有/ 向/ 边/ ,/ 即/ 有向图/ 的/ 一种/ ./ 在/ 之后/ 的/ 讨论/ 中/ 不再/ 强调/ 图中边/ 的/ 方向/ ./ 简单/ 图/ 模型/ 的/ 常用/ 存储/ 结构/ 包括/ 邻接矩阵/ 、/ 邻接/ 表/ 、/ 十字/ 链表/ 和/ 邻接/ 多重/ 表等/ 多种/ 方式/ ./ 从/ 大规模/ 图/ 处理/ 的/ 应用/ 需求/ 和/ 维护/ 的/ 复杂程度/ 考虑/ ,/ 邻接矩阵/ 和/ 邻接/ 表是/ 最/ 常用/ 的/ 两种/ 结构/ ./ 采用/ 邻接矩阵/ 表示/ 图/ 的/ 拓扑/ 结构/ ,/ 直观/ 简洁/ ,/ 便于/ 快速/ 查找/ 顶点/ 之间/ 的/ 关系/ ,/ 但是/ 邻接矩阵/ 的/ 存储/ 代价/ 高昂/ ,/ 对于/ 大规模/ 图/ 数据/ ,/ 这个/ 问题/ 尤为/ 严重/ ./ GBASE/ 系统/ 以/ 邻接矩阵/ 的/ 形式/ 组织/ 存储/ 图/ ,/ 考虑/ 到/ 邻接矩阵/ 的/ 存储/ 开销/ ,/ GBASE/ 对/ 矩阵/ 进行/ 了/ 聚簇/ 分割/ ,/ 尽量/ 将/ 矩阵/ 中/ 的/ 非零值/ 集中/ 存储/ 并/ 采用/ Zip/ 技术/ 压缩/ 编码/ ,/ 减少/ 矩阵/ 的/ 存储/ 代价/ [/ 8/ ]/ ./ 与/ 邻接矩阵/ 相比/ ,/ 邻接/ 表/ 的/ 应用/ 范围/ 更加/ 广泛/ ./ 像/ PageRank/ 计算/ 、/ 最短/ 路径/ 计算/ 等/ 应用/ ,/ 并不需要/ 频繁/ 查找/ 两个/ 图/ 顶点/ 之间/ 的/ 连通性/ ,/ 邻接/ 表/ 完全/ 可以/ 满足/ 计算/ 需求/ ./ 邻接/ 表/ 的/ 存储/ 开销/ 小/ ,/ 逻辑/ 简单/ ,/ 便于/ 分割/ 处理/ ,/ 是/ 一种/ 比较/ 理想/ 的/ 图/ 组织/ 方式/ ,/ Pregel/ 、/ Hama/ 和/ HaLoop/ 等/ 系统/ 均/ 采用/ 邻接/ 表/ 的/ 形式/ 组织/ 图/ 数据/ [/ 5/ -/ 6/ ,/ 9/ ]/ ./ 超图/ 模型/ 的/ 组织/ 方式/ 主要/ 使用/ 关系/ 矩阵/ [/ 10/ ]/ ./ 从/ 形式/ 上/ 讲/ ,/ 关系/ 矩阵/ 和/ 邻接/ Page4/ 矩阵/ 较为/ 相似/ ,/ 但是/ 矩阵/ 的/ 行和列/ 分别/ 表示/ 图/ 顶点/ 编号/ 和/ 超边/ 的/ 编号/ ./ 大规模/ 的/ 图/ 数据/ 存储/ 需要/ 依赖/ 云/ 计算环境/ 的/ 分布式/ 存储系统/ ./ 云/ 计算环境/ 的/ 存储系统/ 分为/ 两种/ :/ 一种/ 是/ 以/ GFS/ [/ 11/ ]/ 、/ HDFS/ [/ 12/ ]/ 为/ 代表/ 的/ 分布式文件系统/ ,/ 对于/ 邻接矩阵/ 、/ 邻接/ 表等/ 结构/ ,/ 可以/ 直接/ 存放/ ;/ 另/ 一种/ 是/ 以/ BigTable/ [/ 13/ ]/ 、/ Hbase/ [/ 12/ ]/ 为/ 代表/ 的/ NoSQL/ (/ NotOnlySQL/ )/ 分布式/ 数据库/ ./ NoSQL/ 数据库/ 采用/ 的/ 数据模型/ 主要/ 有/ 文档/ 存储/ (/ DocumentStore/ )/ 模型/ 、/ 列族/ 存储/ (/ ColumnFami/ -/ lyStore/ )/ 模型/ 、/ Key/ -/ Value/ 存储/ 模型/ 、/ 图/ 存储/ 模型/ 等/ 几大类/ [/ 14/ ]/ ./ 文档/ 存储/ 模型/ 在/ 存储/ 格式/ 方面/ 十分/ 灵活/ ,/ 比较/ 适合/ 存储系统/ 日志/ 等/ 非/ 结构化/ 数据/ ,/ CouchDB/ 和/ MongoDB/ 是/ 采用/ 这种/ 存储/ 模型/ 的/ 典型/ 系统/ [/ 15/ -/ 16/ ]/ ./ 但是/ ,/ 文档/ 存储/ 模型/ 不太/ 适合/ 以/ 邻接矩阵/ 或/ 邻接/ 表/ 组织/ 的/ 图/ 数据/ ./ 此外/ ,/ 文档/ 存储/ 模型/ 为/ 支持/ 灵活性/ 所/ 导致/ 的/ 处理/ 效率/ 的/ 降低/ 也/ 会/ 成为/ 大规模/ 图/ 数据管理/ 的/ 性能/ 瓶颈/ ./ 列族/ 存储/ 模型/ 比较/ 适合/ 对/ 某/ 一列/ 进行/ 随机/ 查询处理/ ,/ 但是/ 对于/ 穷举/ 式/ 遍历/ ,/ 反而/ 不如/ 传统/ 的/ 面向/ 行/ 的/ 存储/ 模式/ ./ 采用/ 该/ 存储/ 模型/ 的/ 典型/ 系统/ 有/ BigTable/ 、/ Hbase/ 、/ Cassandra/ 等/ [/ 2/ ,/ 13/ ,/ 17/ ]/ ./ 图/ 存储/ 模型/ 的/ 相关/ 研究/ 目前/ 还/ 不/ 完善/ ,/ 只有/ 少数/ 分布式/ 图/ 数据库/ ,/ 如/ Neo4j/ [/ 18/ ]/ 等/ 采用/ 这种/ 模型/ 存储/ 图/ 数据/ ./ 与/ 上述/ 3/ 种/ 存储/ 模型/ 相比/ ,/ Key/ -/ Value/ 存储/ 模型/ 较为/ 适合/ 存储/ 大规模/ 图/ 数据/ ./ Key/ -/ Value/ 存储/ 模型/ 的/ 存储/ 模式/ 简单/ ,/ 支持/ 海量/ 数据/ 存储/ 和/ 高/ 并发/ 查询/ 操作/ ,/ 非常适合/ 通过/ 主键/ 进行/ 查询/ 或/ 遍历/ ,/ 但/ 对/ 复杂/ 的/ 条件/ 查询/ 支持/ 度不佳/ ./ 采用/ 该/ 模型/ 的/ 典型/ 系统/ 有/ Dynamo/ 和/ SimpleDB/ [/ 19/ -/ 20/ ]/ ./ 从图/ 处理/ 的/ 角度/ 出发/ ,/ 像/ PageRank/ 计算/ 等/ ,/ 并不需要/ 复杂/ 查询/ ,/ Key/ -/ Value/ 模型/ 完全/ 可以/ 胜任/ ./ 若图/ 数据/ 采用/ 邻接/ 表/ 组织/ ,/ 可以/ 将/ 图/ 的/ 源/ 顶点/ 作为/ Key/ ,/ 将源/ 顶点/ 值/ 、/ 出边/ 及边/ 信息/ 作为/ Value/ ./ 文献/ [/ 21/ ]/ 结合/ 语义/ Web/ 和/ 传统/ 的/ Key/ -/ Value/ 存储/ 模型/ ,/ 提出/ Key/ -/ Key/ -/ Value/ 存储/ 模型/ ./ 以/ 社交/ 网络/ 为例/ ,/ Key/ -/ Key/ -/ Value/ 模型/ 将/ Alice/ 和/ Bob/ 之间/ 的/ 好友/ 关系/ 组织/ 为/ 一个/ 三元组/ 〈/ Alice/ ,/ Bob/ ,/ FriendShip/ 〉/ ./ 该/ 模型/ 存储/ 的/ 信息/ 比/ 传统/ 的/ Key/ -/ Value/ 模型/ 更加/ 丰富/ ,/ 可以/ 据此/ 进行/ 数据/ 迁移/ 和/ 合并/ ,/ 以/ 提高/ 空间/ 局部性/ ,/ 使得/ 在/ 查询处理/ 时能/ 减少/ 远程/ 读取数据/ 的/ 次数/ ,/ 因而/ 可以/ 提高/ 数据/ 读取/ 效率/ ./ 此外/ ,/ 对于/ 分布式/ 图/ 数据库/ ,/ 当图/ 数据/ 更新/ 时/ ,/ 需要/ 提供/ 事务/ 功能/ ,/ 解决/ 在/ 分布式/ 环境/ 下/ 的/ 一致性/ 控制/ 问题/ ./ HyperGraphDB/ 和/ Trinity/ 等/ 人/ 都/ 宣称/ 自己/ 支持/ 事务/ 机制/ 和/ 一致性/ 控制/ [/ 7/ ,/ 22/ ]/ ./ 如果/ 图/ 数据/ 存储/ 在/ HDFS/ 类型/ 的/ 分布式文件系统/ 上/ ,/ 因其/ 不/ 支持/ 更新/ 和/ 随机/ 插入/ 操作/ [/ 12/ ]/ ,/ 也/ 就/ 不/ 存在/ 一致性/ 维护/ 问题/ ./ 上面/ 讨论/ 了/ NoSQL/ 数据库/ 的/ 4/ 种/ 主要/ 存储/ 模型/ ./ 文献/ [/ 23/ ]/ 从/ 管理/ 数据/ 的/ 规模/ 和/ 模型/ 的/ 复杂性/ 两个/ 维度/ 比较/ 了/ 这/ 4/ 种/ 基本/ 存储/ 模型/ ,/ 见图/ 2/ ./ 图/ 2NoSQL/ 数据库/ 的/ 4/ 种/ 主要/ 存储/ 模型/ 的/ 比较/ 从图/ 2/ 可以/ 看出/ Key/ -/ Value/ 存储/ 的/ 复杂性/ 最低/ ,/ 存储/ 数据/ 的/ 规模/ 可以/ 很/ 高/ ,/ 而/ 基于/ 图/ 存储/ 模型/ 的/ 图/ 数据库/ 的/ 复杂性/ 最高/ ,/ 且/ 存储/ 图/ 数据/ 的/ 规模较/ 低/ ,/ 不过/ 也/ 可以/ 管理/ 10/ 亿个/ 以上/ 的/ 顶点/ 及其/ 对应/ 的/ 边/ ./ 2.3/ 图/ 数据/ 的/ 索引/ 结构/ 索引/ 是/ 传统/ 关系数据库/ 中/ 的/ 关键技术/ ,/ 包括/ B/ +/ 树/ 索引/ 、/ Hash/ 索引/ 、/ 位/ 图/ 索引/ 等/ ,/ 技术/ 较为/ 成熟/ ,/ 可以/ 提高/ 数据/ 查询处理/ 效率/ ,/ 尤其/ 是/ 在/ 查询/ 结果/ 的/ 数据量/ 远/ 小于/ 原始数据/ 的/ 情况/ 下/ ./ 对于/ 一个/ 大规模/ 图/ ,/ 云/ 计算/ 的/ 分布式/ 并行处理/ 机制/ ,/ 可以/ 根据/ 查询/ 条件/ 遍历/ 所有/ 的/ 子/ 图/ 数据/ ,/ 如果/ 查询/ 结果/ 的/ 数据量/ 较大/ ,/ 这种/ 处理/ 方式/ 的/ 性能/ 是/ 比较/ 好/ 的/ ,/ 但是/ 如果/ 查询/ 结果/ 的/ 数量/ 很小/ ,/ 则/ 会/ 访问/ 很多/ 无用/ 的/ 数据/ ,/ 造成/ 计算资源/ 的/ 浪费/ 和/ 查询/ 效率/ 的/ 低下/ ,/ 而/ 通过/ 建立/ 合适/ 的/ 索引/ ,/ 可以/ 有效/ 解决/ 这一/ 问题/ ./ 在/ 云/ 计算环境/ 下/ ,/ 大规模/ 图/ 的/ 原始数据/ 保留/ 在/ 分布式/ 存储系统/ 上/ ,/ 建立/ 的/ 索引/ 也/ 必然/ 是/ 分布式/ 的/ ./ 如果/ 图/ 的/ 原始数据/ 规模/ 很大/ ,/ 那么/ 它/ 的/ 索引/ 文件/ 也/ 会/ 很大/ ./ 另外/ ,/ 分布式/ 环境/ 和/ 数据/ 更新/ 的/ 延迟/ ,/ 也/ 加剧/ 了/ 索引/ 维护/ 的/ 难度/ ./ 因此/ ,/ 云/ 计算环境/ 下/ 的/ 图/ 数据/ 的/ 索引/ ,/ 无论是/ 存储/ 还是/ 维护/ 都/ 是/ 十分/ 棘手/ 的/ 问题/ ./ 从/ 使用/ 目的/ 和/ 实际效果/ 的/ 角度/ ,/ 索引/ 可/ 分为/ 两大类/ :/ 一种/ 是/ 为/ 支持/ 普通/ 查询/ 而/ 在/ 云/ 计算环境/ 下/ 建立/ 索引/ ,/ 有助于/ 提高/ 数据/ 查找/ 效率/ ,/ 主要/ 在/ 分布式/ 图/ 数据库/ 中/ 使用/ ;/ 另/ 一种/ 是/ 为/ 加快/ 计算/ 处理/ 而/ 建立/ 的/ 索引/ ,/ 主要/ 在/ 图/ 的/ 计算/ 处理/ 应用/ 中/ 使用/ ,/ 如/ 最/ 短/ 路径/ 计算/ 、/ PageRank/ 计算/ 、/ 聚类分析/ 等/ ./ 目前/ 用于/ 云/ 计算环境/ 下/ 的/ 索引/ 技术/ ,/ 很少/ 有/ 专/ Page5/ 门/ 针对/ 图/ 数据/ 的/ ./ 但是/ ,/ 这些/ 索引/ 技术/ 大都/ 是/ 可以/ 被/ 图/ 数据/ 存储/ 所/ 利用/ ./ 目前/ 的/ 云/ 环境/ 下/ 用于/ 数据管理/ 的/ 索引/ 结构/ 可以/ 分为/ 适用/ 于/ P2P/ 网络结构/ 的/ 索引/ [/ 24/ -/ 26/ ]/ 以及/ 适用/ 于/ Shared/ -/ nothing/ 集群/ 结构/ 的/ 索引/ [/ 27/ -/ 28/ ]/ ./ 文献/ [/ 24/ ]/ 针对/ 云/ 计算环境/ 下/ 的/ 大规模/ 数据/ 查询处理/ ,/ 提出/ 了/ 二级/ 索引/ 技术/ CG/ -/ index/ ./ 它/ 首先/ 在/ 每/ 一个/ 数据/ 分片/ 上/ 建立/ 本地/ B/ +/ tree/ 形成/ 索引/ 分片/ ,/ 然后/ 将/ 计算/ 节点/ 组织/ 成/ Overlay/ 结构/ ,/ 接下来/ 基于/ Overlay/ 的/ 路由/ 协议/ 把/ 各个/ 计算/ 节点/ 上/ B/ +/ tree/ 分片/ 发布/ 到/ Overlay/ 上/ ,/ 建立/ 全局/ 索引/ CG/ -/ index/ ./ 这种/ 索引/ 具有/ 自适应性/ 和/ 可扩展性/ ./ 文献/ [/ 25/ ]/ 建立/ 了/ 多维/ 索引/ 机制/ RT/ -/ CAN/ ,/ 集成/ CAN/ 协议/ 和/ R/ 树/ 的/ 特点/ ,/ 在/ 云/ 计算环境/ 下/ 提供/ 高效/ 查询/ 服务/ ./ 文献/ [/ 26/ ]/ 也/ 针对/ P2P/ 环境/ ,/ 在/ 分布式/ KD/ -/ tree/ 基础/ 上/ 提出/ 多维/ 索引/ MIDAS/ ,/ 用以/ 支持/ 多维/ 查询/ 、/ 范围/ 查询/ 和/ k/ 最近/ 邻/ 查询/ 等/ 应用/ ./ 文献/ [/ 27/ ]/ 提出/ 了/ 一个/ 通用/ 的/ 、/ 灵活/ 的/ 、/ 容错/ 的/ 、/ 且/ 可/ 扩展/ 的/ 分布式/ B/ -/ tree/ 索引/ 结构/ ./ 文献/ [/ 28/ ]/ 将/ R/ -/ tree/ 和/ KD/ -/ tree/ 结合/ 起来/ 组织/ 数据/ 记录/ ,/ 提出/ 了/ 用于/ 云/ 数据管理/ 的/ 多维/ 索引/ EMINC/ ,/ 可以/ 提供/ 快速/ 的/ 查询处理/ 和/ 有效/ 的/ 索引/ 维护/ ./ 云/ 计算环境/ 下/ 的/ 通用/ 索引/ 机制/ ,/ 没有/ 考虑/ 图/ 结构/ 的/ 特点/ ,/ 在/ 图/ 查询处理/ 方面/ ,/ 效果/ 不/ 明显/ ./ 而/ 分布式/ 图/ 数据库/ ,/ 无论是/ 数据/ 存储/ 还是/ 索引/ 结构/ ,/ 都/ 针对/ 图/ 数据/ 进行/ 了/ 优化/ ./ Neo4j/ 的/ 索引/ 分为/ 两类/ [/ 18/ ]/ :/ 数据库/ 本身/ 就是/ 一个/ 树形/ 结构/ 的/ 索引/ ,/ 可/ 用于/ 提高/ 查询/ 效率/ ,/ 此外/ ,/ 还/ 可以/ 使用/ 独立/ 的/ Lucene/ 索引/ ,/ 提供/ 全文索引/ 和/ 索引/ 命中率/ 排序功能/ ./ Neo4j/ 可以/ 对图/ 顶点/ 和/ 边/ 分别/ 建立/ 索引/ ,/ 通过/ 对/ 索引/ 的/ 缓存/ ,/ 可/ 进一步/ 加快/ 查找/ 速度/ ./ 索引/ 的/ 维护/ 操作/ (/ 如/ 删除/ 、/ 更新/ )/ 则/ 必须/ 在/ 事务/ 管理机制/ 下/ 进行/ ./ 对于/ 更新/ ,/ 必须/ 先/ 删除/ 旧/ 的/ 索引/ 值/ ,/ 然后/ 才能/ 添加/ 新/ 索引/ 值/ ,/ 代价/ 较/ 高/ ./ InfiniteGraph/ [/ 29/ ]/ 与/ Neo4j/ 类似/ ,/ 也/ 提供/ 内/ 建/ 索引/ 和/ Lucene/ 索引/ ./ 在/ HyperGraphDB/ 的/ 两层/ 存储/ 架构/ [/ 22/ ]/ 中/ ,/ 索引/ 是/ 存储/ 层/ 必备/ 的/ 组成部分/ ,/ 一个/ Key/ 可/ 对应/ 多个/ 已/ 排序/ 的/ Value/ ,/ 并/ 支持/ Value/ 共享/ ;/ 在/ 模型/ 层/ ,/ Key/ 采用/ UUID/ 编号/ 并/ 排序/ ,/ 在/ Key/ 上/ 建立/ 索引/ ./ 索引/ 文件/ 以/ B/ -/ tree/ 格式/ 存储/ 并/ 具有/ 缓存/ 功能/ ,/ 可以/ 为/ 查询/ 等/ 操作/ 提供/ 持久/ 化/ 的/ 元/ 数据/ 信息/ ./ Trinity/ 数据库/ 提供/ Trie/ 树/ 和/ Hash/ 两种/ 索引/ 结构/ 来/ 访问/ 图/ 顶点/ 、/ 边/ 的/ 名字/ 以及/ 相关/ 的/ 其它/ 信息/ ,/ 可/ 减少/ 有/ 公共/ 前缀/ 的/ 字符串/ 的/ 匹配/ 次数/ [/ 7/ ]/ ./ 支持/ 图/ 计算/ 处理/ 的/ 索引/ ,/ 主要/ 是/ 在/ 云/ 计算/ 平台/ 中/ 体现/ ./ 文献/ [/ 30/ ]/ 针对/ Hadoop/ 系统/ 中/ 的/ Shuffle/ 过程/ 和/ Reduce/ 过程/ 进行/ 了/ 改进/ ,/ 采用/ 动态/ 增量/ 式/ Hash/ 索引/ 和/ 缓存/ 技术/ 降低/ Shuffle/ 过程/ 的/ 磁盘/ IO/ 代价/ ,/ 提高/ CPU/ 利用率/ ./ HaLoop/ 则/ 对/ Map/ 任务/ 的/ 输入/ 、/ Reduce/ 任务/ 的/ 输入/ 和/ 输出/ 进行/ 缓存/ 并/ 建立/ 索引/ ,/ 在/ 一定/ 程度/ 上/ 提高/ 了/ Hadoop/ 迭代/ 处理/ 的/ 效率/ [/ 9/ ]/ ./ 文献/ [/ 31/ ]/ 针对/ MapReduce/ 的/ 连接/ 操作/ ,/ 提出/ Trojan/ 索引/ 技术/ ,/ 通过/ 对/ 分片/ 信息/ 和/ Key/ 值/ 的/ 重新/ 构造/ ,/ 建立/ 索引/ ,/ 使/ 需要/ 连接/ 的/ 数据/ 位于/ 同一个/ 分片/ 上/ ,/ 减少/ 连接/ 操作/ 的/ 网络通信/ 量/ ./ 由于/ MapReduce/ 模型/ 是/ 一个/ 通用/ 计算/ 模型/ ,/ Hadoop/ 处理/ 平台/ 的/ 索引/ 也/ 是/ 通用性/ 的/ ,/ 对于/ 大规模/ 图/ 的/ 迭代/ 处理/ 的/ 针对性/ 并/ 不强/ ./ 3/ 图/ 数据/ 的/ 分割/ 策略/ 在/ 云/ 计算环境/ 下/ ,/ 对于/ 一个/ 大规模/ 图/ 的/ 处理/ ,/ 必须/ 进行/ 分布式/ 并行处理/ ./ 由于/ 图/ 数据/ 本身/ 固有/ 的/ 连通性/ 和/ 图/ 计算/ 表现/ 出强/ 耦合/ 性/ 的/ 特点/ ,/ 为了/ 实现/ 高效/ 的/ 并行处理/ ,/ 尽可能/ 降低/ 分布式/ 处理/ 的/ 各子/ 图/ 之间/ 的/ 耦合度/ 是/ 非常/ 重要/ 的/ ./ 有效/ 的/ 图/ 分割/ 就是/ 实现/ 解/ 耦/ 的/ 重要/ 手段/ ./ 这/ 首先/ 要/ 将/ 一个/ 逻辑/ 上/ 完整/ 的/ 大图/ 分割/ 成/ 若干/ 部分/ ,/ 分别/ 放置/ 到/ 分布式/ 存储系统/ 的/ 各/ 工作/ 节点/ 上/ ./ 其后/ 对图/ 的/ 处理/ ,/ 就是/ 针对/ 已经/ 分布式/ 存放/ 的/ 每/ 一个/ 子图/ ,/ 启动/ 一个/ 计算/ 任务/ ,/ 进行/ 相同/ 的/ 处理/ 操作/ ,/ 当/ 所有/ 子图/ 处理/ 结束/ ,/ 则/ 完成/ 整个/ 大图/ 的/ 一次/ 处理/ 了/ ./ 3.1/ 图/ 分割/ 原则/ 虽然/ 并行处理/ 可以/ 提高效率/ ,/ 但是/ 由于/ 子图/ 之间/ 的/ 连通性/ ,/ 在/ 任务/ 执行/ 过程/ 中/ 或/ 执行/ 结束/ 时/ ,/ 各/ 任务/ 之间/ 需要/ 进行/ 消息/ 通信/ ,/ 这个/ 通信/ 处理/ 的/ 代价/ 很大/ ,/ 是/ 制约/ 图/ 处理/ 效率/ 的/ 瓶颈/ ./ 如果/ 在/ 大图/ 存储/ 或/ 处理/ 之前/ ,/ 利用/ 良好/ 的/ 图/ 分割/ 算法/ ,/ 将/ 一个/ 大图/ 分割/ 成/ 若干个/ 适当/ 大小/ 的/ 子/ 图/ ,/ 且子/ 图/ 内部/ 具有/ 较/ 高/ 的/ 连通性/ ,/ 而子/ 图/ 之间/ 的/ 连通性/ 较/ 低/ ,/ 那么/ 相当/ 一部分/ 消息/ 就/ 不/ 需要/ 通过/ 网络/ 跨/ 节点/ 传输/ ,/ 而是/ 直接/ 本地/ 处理/ ,/ 可以/ 极大/ 地/ 减少/ 通信/ 代价/ ,/ 提高/ 整个/ 系统/ 的/ 运行/ 效率/ ./ 在/ 云/ 计算环境/ 下/ ,/ 实现/ 大图/ 分割/ 并/ 取得/ 较/ 好/ 的/ 分割/ 效果/ ,/ 是/ 一项/ 挑战性/ 很大/ 的/ 工作/ ./ 将/ 一个/ 大图/ 分割/ 为/ 若干/ 子图/ ,/ 有/ 两个/ 主要/ 原则/ :/ 一是/ 提高/ 子图/ 内部/ 的/ 连通性/ ,/ 降低/ 子图/ 之间/ 的/ 连通性/ ,/ 这种/ 特点/ 尤其/ 适合/ 云/ 计算/ 的/ 分布式/ 并行处理/ 机制/ ;/ 二是/ 考虑/ 子图/ 规模/ 的/ 均衡性/ ,/ 尽量/ 保证/ 各子/ 图/ 的/ 数据/ 规模/ 均衡/ ,/ 不要/ 出现/ 较大/ 的/ 偏斜/ ,/ 从/ 数据/ 规模/ 方面/ 防止/ 各/ 并行任务/ 的/ 执行/ 时间/ 相差/ 过大/ ,/ 降低/ 任务/ 同步控制/ 过程/ 中/ “/ 水/ Page6/ 桶/ 效应/ ”/ 的/ 影响/ ./ 当然/ ,/ 大图/ 分割/ 的/ 时间/ 复杂度/ 必须/ 控制/ 在/ 可以/ 忍受/ 的/ 范围/ 内/ ./ 图/ 3/ 对比/ 了/ 3/ 种/ 不同/ 的/ 图/ 分割/ 效果/ ,/ 如果/ 单纯/ 考虑/ 子图/ 的/ 数据/ 均衡/ 或子/ 图/ 之间/ 的/ 连通性/ ,/ 其/ 效果/ 均/ 不/ 理想/ ,/ 只有/ 同时/ 考虑/ 着/ 两个/ 因素/ ,/ 才能/ 显著/ 提高/ 分布/ 并行/ 式/ 处理/ 效率/ ./ 3.2/ 单/ 指标/ 分割/ 技术/ 如果/ 只/ 考虑/ 数据/ 负载/ 均衡/ 这一/ 单项/ 指标/ ,/ 最/ 简单/ 的/ 图/ 分割/ 技术/ ,/ 就是/ Hash/ 方式/ ,/ 即/ 在/ 设定/ 了/ 分片/ 数目/ 之后/ ,/ 对图/ 顶点/ ID/ 进行/ Hash/ ,/ 将/ 数据/ 划分/ 成/ 给定/ 数目/ 的/ 分片/ ./ 这种/ 分割/ 方法/ 效率/ 很/ 高/ ,/ 时间/ 复杂度/ 为/ O/ (/ n/ )/ ,/ 可以/ 在/ 图/ 数据/ 的/ 载入/ 过程/ 中/ 或/ 图/ 处理/ 之前/ 完成/ 分片/ 操作/ ./ 在/ 一定/ 条件/ 下/ ,/ 设计/ 良好/ 的/ Hash/ 方式/ 可以/ 避免/ 数据偏斜/ ,/ 使/ 各子/ 图/ 的/ 数据/ 规模/ 接近/ 相同/ ./ 但是/ Hash/ 方式/ 没有/ 考虑/ 图/ 数据/ 的/ 局部性/ ,/ 甚至/ 连/ 原始数据/ 的/ 局部性/ 也/ 无法/ 得到/ 保留/ ./ Hash/ 方式/ 虽然/ 在/ 云/ 计算环境/ 下/ 容易/ 实现/ ,/ 但是/ ,/ 负责/ 各子/ 图/ 处理/ 的/ 任务/ 之间/ 消息/ 通信/ 频繁/ ,/ 会/ 造成/ 较大/ 的/ 网络通信/ 开销/ ./ 如果/ 只/ 考虑/ 子图/ 内敛/ 性/ 这/ 一/ 单项/ 指标/ ,/ 即/ 增大/ 子图/ 内部/ 的/ 关联性/ ,/ 降低/ 子图/ 之间/ 的/ 关联性/ ,/ 可/ 采用/ 聚类/ 技术/ ,/ 效果/ 十分/ 明显/ ./ 关于/ 在/ 云/ 计算环境/ 下/ 实现/ 分布式/ 聚类/ 的/ 方法/ ,/ 在/ Apache/ 开源/ 项目/ Mahout/ 中有/ 详细/ 介绍/ [/ 32/ ]/ ./ 但是/ ,/ 聚类/ 操作/ 一般/ 都/ 是/ 一个/ 迭代/ 处理/ 的/ 过程/ ,/ 时间/ 开销/ 不容忽视/ ./ 另外/ ,/ 聚类/ 技术/ 一般/ 不/ 考虑/ 各聚/ 簇/ 之间/ 的/ 数据/ 规模/ 偏斜/ 问题/ ,/ 很/ 可能/ 导致/ 分割/ 后/ 的/ 各子/ 图/ 的/ 数据/ 规模/ 相差/ 较大/ ,/ 增大/ 了/ 图/ 处理过程/ 中/ 的/ “/ 水桶/ 效应/ ”/ ./ 在/ 改善/ 子图/ 分割/ 的/ 时间/ 复杂度/ 方面/ ,/ Yahoo/ 研究院/ 发现/ ,/ 即便/ 图/ 数据/ 的/ 原始/ 规模/ 很大/ ,/ 最终/ 得到/ 的/ 聚簇/ 仍然/ 要/ 小得多/ [/ 33/ ]/ ./ 基于/ 这一/ 发现/ ,/ Yahoo/ 研究院/ 开发/ 出/ “/ LocalPartition/ ”/ 算法/ [/ 34/ ]/ ,/ 该/ 算法/ 的/ 运行/ 时间/ 与/ 最终/ 输出/ 结果/ 的/ 聚簇/ 大小/ 成正比/ ,/ 而/ 与/ 图/ 的/ 原始/ 输入/ 数据/ 规模/ 无关/ ,/ 从而/ 可以/ 对/ 更/ 大规模/ 的/ 图/ 进行/ 分割/ 处理/ ./ 此外/ ,/ 还有/ 很多/ 研究者/ 从/ 其它/ 方面/ 对/ 分布式/ 环境/ 下/ 的/ 图/ 分割/ 技术/ 进行/ 了/ 探索/ ./ 文献/ [/ 35/ ]/ 采用/ 随机/ 森林/ (/ SF/ )/ 方法/ ,/ 进行/ 图/ 分割/ ./ 文献/ [/ 36/ ]/ 提出/ 了/ 确定性/ 和/ 非/ 确定性/ 的/ 分布式/ 图/ 分割/ 算法/ Sync/ _/ Part/ 、/ Fast/ _/ Part/ 和/ Elect/ _/ Part/ ./ 文献/ [/ 37/ ]/ 在/ 使用/ Hadoop/ 进行/ 图/ 的/ 迭代/ 处理/ 时/ ,/ 通过/ 设置/ Partitioner/ 函数/ 来/ 不断/ 调整/ 图/ 的/ 分布/ ./ 将/ 一个/ Reduce/ 任务/ 处理/ 的/ 图/ 数据/ 视为/ 一个/ 子图/ ,/ 通过/ Map/ 阶段/ 和/ Reduce/ 阶段/ 的/ Shuffle/ 处理/ ,/ 使/ 连通性/ 较强/ 的/ 图/ 顶点/ 分布/ 到/ 同一个/ Reduce/ 任务/ 并/ 作为/ 输出/ 结果/ 存储/ 为/ 一个/ 单独/ 的/ 文件/ ,/ 在/ 下/ 一个/ Map/ 阶段/ 中/ 加以/ 利用/ ,/ 以/ 减少/ 通信量/ ./ 以/ PageRank/ 应用/ 为例/ ,/ 可以/ 针对/ 顶点/ URL/ 的/ 内容/ ,/ 设计/ Hash/ 函数/ ,/ 使得/ 关联/ 较大/ 的/ 图/ 顶点/ 能够/ 分配/ 到/ 同一个/ Reduce/ 任务/ 中/ ./ 后/ 两种/ 方法/ 虽然/ 实现/ 了/ 子/ 图/ 之间/ 的/ 有效/ 解/ 耦/ ,/ 但/ 由于/ 子图/ 的/ 个数/ 不/ 确定/ 和/ 大小/ 不/ 均匀/ ,/ 导致/ 并行处理/ 的/ 负载/ 不/ 平衡/ ./ 3.3/ 多/ 指标/ 分割/ 技术/ 同时/ 考虑/ 子图/ 数据/ 规模/ 均衡/ 和子/ 图/ 内敛/ 性/ 等/ 多项/ 指标/ ,/ 也/ 有/ 很多/ 研究者/ 进行/ 了/ 尝试/ ./ 文献/ [/ 38/ ]/ 针对/ 分布式/ P2P/ 网络/ ,/ 提出/ 了/ 一种/ 基于/ 图/ 顶点/ 度/ 序列/ 和/ 广度/ 优先/ 搜索/ 的/ k/ -/ 图/ 分割/ 技术/ ,/ 能够/ 将/ 一个/ 大型/ P2P/ 网络/ 分割/ 成/ k/ 个子/ 网络/ 并且/ 能够/ 做到/ 各子/ 网络/ 的/ 任务/ 负载/ 均衡/ ./ 文献/ [/ 39/ ]/ 通过/ 3/ 步/ 处理/ 来/ 实现/ 大规模/ 图/ 的/ 分割/ :/ (/ 1/ )/ 建立/ 带/ 权重/ 的/ 深度/ 优先/ 搜索/ 树/ ;/ (/ 2/ )/ 将/ 大图/ 分割/ 成/ 若干个/ 均衡/ 的/ 子/ 图/ ;/ (/ 3/ )/ 迭代/ 处理/ ,/ 尽量减少/ 子图/ 之间/ 的/ 关联/ ./ GBASE/ 系统/ [/ 8/ ]/ 利用/ 现有/ 的/ METIS/ 、/ Disco/ 等/ 划分算法/ ,/ 对/ 存储/ 图/ 数据/ 的/ 邻接矩阵/ 进行/ 聚类/ ,/ 将行/ 和/ 列/ 重新/ 排序/ ,/ 把/ 一个/ 大/ 矩阵/ 聚集/ 为/ 多个/ 均匀/ 区域/ ,/ 形成/ 分块/ ,/ 保证/ 块/ 内/ 的/ 子/ 图/ 联系/ 紧密/ ,/ 块间/ 联系/ 松散/ ,/ 将/ 若干个/ 块/ 作为/ 一个/ 网格/ ,/ 分给/ 一个/ 任务/ 进行/ 处理/ ,/ 在/ 一定/ 程度/ 上/ 解决/ 了/ 数据/ 均衡/ 问题/ ./ Kernighan/ -/ Lin/ 算法/ [/ 40/ ]/ 既/ 考虑/ 了/ 聚类/ 技术/ 的/ 特点/ ,/ 同时/ 又/ 可以/ 保证/ 分割/ 后/ 的/ 子/ 图/ 在/ 数据/ 规模/ 上/ 的/ 均衡性/ ,/ 主要/ 用于/ 网络/ 节点/ 的/ 分割/ ./ 其/ 主要/ 思想/ 是/ 首先/ 将/ 一个/ 网络图/ 分割/ 成/ 两个/ 大小/ 相等/ 的/ 顶点/ 集合/ A/ 和/ B/ ,/ 在/ 集合/ A/ 和/ B/ 中/ 的/ 顶点/ ,/ 除了/ 和/ 本/ 集合/ 内/ 的/ 顶点/ 有/ 边/ 连接/ 外/ ,/ 还/ 可能/ 和/ 另外/ 一个/ 集合/ 内/ 的/ 顶点/ 有/ 边/ 连接/ ./ 对于/ 后者/ ,/ 用/ T/ 表示/ 所有/ 这种/ 连接/ 边/ 的/ 权重/ 之/ 和/ ,/ 作为/ 衡量/ 集合/ A/ 和/ B/ 之间/ 连通性/ 的/ 指标/ ./ K/ -/ L/ 算法/ 在/ 执行/ 过程/ 中/ ,/ 不断/ 调整/ 集合/ A/ 和/ B/ 内/ 的/ 顶点/ ,/ 直到/ T/ 值/ 最小/ ./ 但是/ ,/ K/ -/ L/ 算法/ 的/ 时间/ 复杂/ 度过/ 高/ ,/ 是/ O/ (/ n2logn/ )/ ,/ 其中/ n/ 是/ 图/ 顶点/ 的/ 数量/ ,/ 随着/ 图/ 顶点/ 数据/ 规模/ 的/ 增大/ ,/ 将/ 超出/ 目前/ 的/ 计算/ 处理/ 能力/ ./ 为/ 降低/ 时间/ 复杂度/ ./ 文献/ [/ 41/ ]/ 提出/ 基于/ Quick/ _/ Cut/ 技术/ 的/ K/ -/ L/ 算法/ ,/ 利用/ “/ 邻居/ 搜索/ ”/ 的/ 特点/ ,/ 避免/ 了/ 不必要/ 图/ 顶点/ 的/ 遍历/ ,/ 达到/ 时间/ 复杂度/ 为/ O/ (/ max/ (/ ed/ ,/ elogn/ )/ )/ ,/ 其中/ ,/ e/ 是/ 边/ 的/ 数量/ ,/ d/ 是/ 图/ 顶点/ 的/ 最大/ 出度值/ ./ Page7/ 此外/ ,/ Horton/ 系统/ [/ 42/ ]/ 中/ 提出/ ,/ 对于/ 需要/ 长期/ 存储/ 的/ 图/ 数据/ ,/ 采用/ 静态/ 处理/ 和/ 动态/ 处理/ 相结合/ 的/ 技术/ 实现/ 图/ 分割/ ./ 在/ 图/ 数据/ 载入/ 分布式/ 存储系统/ 的/ 过程/ 中/ ,/ 采用/ 静态/ 处理/ 方法/ ,/ 使用/ “/ EvolvingSets/ ”/ 技术/ [/ 43/ ]/ ,/ 将/ 大图/ 分割/ 存储/ ./ 新/ 的/ 图/ 数据/ 加入/ 或/ 更新/ 时/ ,/ 采用/ 动态/ 方法/ ,/ 使用/ 基于/ 消息/ 通信/ 的/ Affinityprop/ -/ agation/ 算法/ [/ 44/ ]/ 对/ 已有/ 的/ 子/ 图/ 进行/ 增量/ 式/ 分割/ 和/ 维护/ ./ 这种/ 分割/ 技术/ 既/ 能/ 降低/ 子图/ 计算/ 之间/ 的/ 耦合/ 性/ ,/ 又/ 能/ 保证/ 负载平衡/ ./ 4/ 图/ 计算/ 模型/ 与/ 典型/ 系统结构/ 本/ 节/ 介绍/ 典型/ 的/ 云/ 计算环境/ 下/ 大规模/ 图/ 数据处理/ 的/ 计算/ 模型/ 和/ 一些/ 典型/ 的/ 图/ 处理/ 系统/ ./ 计算/ 模型/ 决定/ 了/ 分布式/ 并行执行/ 方式/ ,/ 是/ 进行/ 解/ 耦/ 处理/ 和/ 提高/ 可靠性/ 的/ 基础/ ./ 4.1/ MapReduce/ 模型/ 和/ BSP/ 模型/ 在/ 云/ 计算环境/ 中/ ,/ 最/ 广泛/ 使用/ 的/ 就是/ MapRe/ -/ duce/ 模型/ [/ 45/ ]/ ./ 一个/ 并行处理/ 作业/ 由/ 多个/ map/ 任务/ 和/ 多个/ reduce/ 任务/ 组成/ ./ 作业/ 的/ 执行/ 分为/ Map/ 阶段/ 和/ Reduce/ 阶段/ ./ 在/ Map/ 阶段/ ,/ 每个/ map/ 任务/ 对/ 分配/ 给/ 它/ 的/ 数据/ (/ 通常/ 是/ 本地/ 的/ 数据/ )/ 进行/ 计算/ ,/ 然后/ 按照/ map/ 的/ 输出/ key/ 值/ 将/ 结果/ 数据/ 映射/ 到/ 对应/ 的/ reduce/ 任务/ 中/ ;/ 在/ Reduce/ 阶段/ ,/ 每个/ reduce/ 任务/ 对/ 接收/ 到/ 的/ 数据/ 做/ 进一步/ 聚集/ 处理/ ,/ 得到/ 输出/ 结果/ ./ 数据/ 通常/ 保存/ 在/ 分布式文件系统/ 中/ ,/ 如/ HDFS/ ./ BSP/ (/ BulkSynchronousParallelmodel/ )/ 模型/ 是/ 2010/ 年/ 图灵奖/ 得主/ Valiant/ 在/ 1990/ 年/ 提出/ 来/ 的/ 一种/ 基于/ 消息/ 通信/ 的/ 并行执行/ 模型/ [/ 46/ ]/ ./ 一个/ BSP/ 作业/ 由/ 若干个/ 顺序/ 执行/ 的/ 超步/ (/ superstep/ )/ 组成/ :/ S1/ ,/ S2/ ,/ …/ ,/ Sn/ ,/ 对应/ 于/ n/ 次/ 迭代/ 处理/ ./ 并行任务/ 按照/ 超步/ 组织/ ,/ 在/ 超步/ Si/ 内/ ,/ 各/ 任务/ 异步/ 接受/ 来自/ Si/ -/ 1/ 的/ 消息/ ,/ 执行/ 本地/ 计算/ 并/ 发送/ 消息/ 给/ 下/ 一个/ 超步/ Si/ +/ 1/ ./ 在/ 超步/ 之间/ ,/ 通过/ 显式/ 地/ 同步控制/ ,/ 确保/ 所有/ 任务/ 均/ 已/ 完成/ 超步/ Si/ 的/ 工作/ ./ 这种/ 同步/ 方式/ 可/ 避免/ 死锁/ 和/ 数据/ 竞争/ 问题/ ./ 在/ 云/ 环境/ 下/ 实现/ 大规模/ 图/ 的/ 处理/ ,/ 主要/ 采用/ 这/ 两种/ 模型/ ,/ 下面/ 将/ 对比/ 它们/ 在/ 图/ 处理/ 方面/ 的/ 特点/ ./ 在/ 执行/ 机制/ 方面/ ,/ MapReduce/ 是/ 一个/ 数据流/ 模型/ ,/ 每个/ 任务/ 只是/ 对/ 输入/ 数据/ 进行/ 处理/ ,/ 产生/ 的/ 输出/ 数据/ 作为/ 另/ 一个/ 任务/ 的/ 输入/ 数据/ ,/ 并行任务/ 之间/ 独立/ 地/ 进行/ ,/ 串行/ 任务/ 之间/ 以/ 磁盘/ 和/ 数据/ 复制/ 作为/ 交换/ 介质/ 和/ 接口/ ./ 而/ BSP/ 是/ 一个/ 状态/ 模型/ ,/ 各个/ 子/ 任务/ 在/ 本地/ 的/ 子/ 图/ 数据/ 上/ 进行/ 计算/ 、/ 通信/ 、/ 修改/ 图/ 的/ 状态/ 等/ 操作/ ./ 并行任务/ 之间/ 通过/ 消息/ 通信/ 交流/ 中间/ 计算结果/ ,/ 不/ 需要/ 像/ MapReduce/ 那样/ 对/ 全体/ 数据/ 进行/ 复制/ ./ 在/ 迭代/ 处理/ 方面/ ,/ MapReduce/ 模型/ 理论/ 上/ 需要/ 连续/ 启动/ 若干/ 作业/ 才/ 可以/ 完成/ 图/ 的/ 迭代/ 处理/ ,/ 相邻/ 作业/ 之间/ 通过/ 分布式文件系统/ 交换/ 全部/ 数据/ ./ BSP/ 模型/ 仅/ 需/ 启动/ 一个/ 作业/ ,/ 利用/ 多个/ 超步/ 就/ 可以/ 完成/ 迭代/ 处理/ ,/ 两次/ 迭代/ 之间/ 通过/ 消息传递/ 中间/ 计算结果/ ./ 由于/ 减少/ 了/ 作业/ 启动/ 、/ 调度/ 开销/ 和/ 磁盘/ 存取/ 开销/ ,/ BSP/ 模型/ 的/ 迭代/ 执行/ 效率/ 较/ 高/ ./ 在/ 数据/ 分割/ 方面/ ,/ 基于/ BSP/ 的/ 图/ 处理/ 模型/ ,/ 需要/ 对/ 加载/ 后/ 的/ 图/ 数据/ 进行/ 一次/ 再/ 分布/ 的/ 过程/ ,/ 以/ 确定/ 消息/ 通信/ 时/ 的/ 路由/ 地址/ ./ 例如/ ,/ 各/ 任务/ 并行/ 加载/ 数据/ 过程/ 中/ ,/ 根据/ 一定/ 的/ 映射/ 策略/ ,/ 将/ 读入/ 的/ 数据/ 重新/ 分发/ 到/ 对应/ 的/ 计算/ 任务/ 上/ (/ 通常/ 是/ 存放/ 在/ 内存/ 中/ )/ ,/ 既有/ 磁盘/ IO/ 又/ 有/ 网络通信/ ,/ 开销/ 很大/ ./ 但是/ 一个/ BSP/ 作业/ 仅/ 需/ 一次/ 数据/ 分割/ ,/ 在/ 之后/ 的/ 迭代/ 计算/ 过程/ 中/ 除了/ 消息/ 通信/ 之外/ ,/ 不再/ 需要/ 进行/ 数据/ 的/ 迁移/ ./ 而/ 基于/ MapReduce/ 的/ 图/ 处理/ 模型/ ,/ 一般/ 情况/ 下/ ,/ 不/ 需要/ 专门/ 的/ 数据/ 分割/ 处理/ ./ 但是/ Map/ 阶段/ 和/ Reduce/ 阶段/ 存在/ 中间/ 结果/ 的/ Shuffle/ 过程/ ,/ 增加/ 了/ 磁盘/ IO/ 和/ 网络通信/ 开销/ ./ MapReduce/ 模型/ 的/ 商业化/ 应用/ 已经/ 开始/ 推广/ ,/ 其/ 良好/ 的/ 可伸缩性/ 和/ 容错/ 管理/ 能力/ 受到/ 了/ 业界/ 推崇/ ,/ 在/ 大规模/ 数据处理/ 方面/ 的/ 表现/ 也/ 值得称赞/ ./ 但是/ 作为/ 通用/ 计算/ 模型/ ,/ 在/ 图/ 处理/ 方面/ ,/ 连续/ 的/ 作业/ 调度/ 和/ 任务分配/ ,/ 代价/ 较/ 高/ ,/ 对于/ 图/ 拓扑/ 结构/ 信息/ 的/ 反复/ 磁盘/ 读取/ ,/ 尤其/ 是从/ 分布式文件系统/ 上/ 读取/ ,/ 也/ 增大/ 了/ IO/ 开销/ ./ 此外/ ,/ 在/ 迭代/ 处理/ 方面/ ,/ 需要/ 用户/ 编程/ 控制/ ,/ 较为/ 繁琐/ ./ 相对而言/ ,/ BSP/ 模型/ 是/ 一个/ 比较/ 适合/ 迭代/ 处理/ 的/ 计算/ 模型/ ,/ 为/ 用户/ 提供/ 了/ 简单/ 易用/ 的/ 编程/ 接口/ ,/ Googel/ 的/ Pregel/ [/ 5/ ]/ 、/ Yahoo/ !/ 的/ Giraph/ [/ 47/ ]/ 和/ 开源/ 的/ Hama/ 系统/ [/ 6/ ]/ ,/ 都/ 是/ 基于/ BSP/ 模型/ 开发/ 的/ ./ 从/ 原理/ 上/ 讲/ ,/ BSP/ 模型/ 避免/ 了/ MapReduce/ 模型/ 在/ 多次/ 迭代/ 时/ 的/ 数据/ 反复/ 迁移/ 和/ 作业/ 连续/ 调度/ ,/ 其/ 特有/ 的/ 超步/ 和/ 全局/ 同步/ 机制/ ,/ 使/ 迭代/ 处理/ 的/ 控制/ 更加/ 灵活/ ,/ 在/ 大规模/ 图/ 处理/ 方面/ 很/ 有/ 开发/ 前景/ ./ 但/ 目前/ 上述/ 系统/ 还/ 处于/ 研究/ 开发阶段/ ,/ 所/ 处理/ 的/ 数据/ 放置/ 于/ 内存/ ,/ 未/ 考虑/ 索引/ 问题/ ,/ 数据处理/ 规模/ 也/ 受到/ 极大/ 的/ 制约/ ,/ 需要/ 进一步/ 开发/ 基于/ 磁盘/ 的/ 系统/ 并/ 对/ I/ // O/ 操作/ 进行/ 优化/ ./ 此外/ ,/ BSP/ 模型/ 中/ 各/ 任务/ 之间/ 的/ 消息/ 通信/ 也/ 是/ 难以/ 消除/ 的/ 效率/ 瓶颈/ ,/ 而/ 在/ 容错/ 管理/ 等/ 方面/ ,/ 尚无/ 完善/ 的/ 理论/ 和/ 方法/ ./ Page84/ ./ 2/ 典型/ 系统结构/ 目前/ ,/ 关于/ 云/ 计算环境/ 下/ 的/ 大规模/ 图/ 数据/ 管理系统/ ,/ 大致/ 可以/ 分为/ 3/ 类/ :/ 基于/ MapReduce/ 模型/ 的/ 分布式/ 并行处理/ 系统/ 、/ 基于/ BSP/ 模型/ 的/ 分布式/ 并行处理/ 系统/ 和/ 分布式/ 图/ 数据库系统/ ./ 基于/ MapReduce/ 模型/ 的/ 分布式/ 并行处理/ 系统/ ,/ 大部分/ 是/ 通用/ 处理/ 平台/ ,/ 如/ Hadoop/ 以及/ 改进/ 版本/ HOP/ 系统/ [/ 48/ ]/ ,/ 可以/ 应用/ 于/ 各种/ 大规模/ 数据处理/ ,/ 为了/ 适应需要/ 多次/ 迭代/ 的/ 图/ 处理/ 应用/ ,/ 很多/ 研究者/ 对/ Hadoop/ 原有/ 处理/ 平台/ 进行/ 了/ 优化/ 改进/ ,/ 如/ HaLoop/ 、/ Twister/ 、/ Prlter/ [/ 9/ ,/ 49/ -/ 50/ ]/ ,/ HaLoop/ 使用/ 缓存/ 、/ 索引/ 技术/ 来/ 减少/ 不必要/ 的/ 磁盘/ IO/ ,/ 改进/ 原有/ 的/ 任务调度/ 模块/ 使/ 连续/ 作业/ 的/ 调度/ 和/ 迭代/ 条件/ 的/ 控制/ 变得/ 较为/ 容易/ ,/ 具备/ 一定/ 的/ 实用价值/ ./ Twister/ 系统对/ Hadoop/ 进行/ 了/ 较大/ 的/ 改动/ ,/ 全部/ 处理/ 数据/ 驻留/ 内存/ ,/ 采用/ 第/ 3/ 方/ 消息/ 通信/ 机制/ ,/ 使用/ 任务/ 池来/ 避免/ 多次/ 作业/ 调度/ ./ 但是/ 驻留/ 内存/ 的/ 限制/ 使/ 其/ 难以/ 实用/ ,/ 目前/ 只是/ 供/ 研究/ 使用/ ./ Prlter/ 是/ 在/ Hadoop/ 和/ HOP/ 基础/ 上/ 开发/ 的/ ,/ 支持/ 带/ 优先级/ 的/ 迭代/ 计算/ ,/ 可以/ 确保/ 迭代/ 处理/ 的/ 快速/ 收敛/ ,/ 尤其/ 适合/ 在线/ 查询/ ,/ 如/ top/ -/ k/ 查询/ ./ 基于/ BSP/ 模型/ 的/ 分布式/ 并行处理/ 系统/ ,/ 最/ 著名/ 的/ 就是/ Google/ 提出/ 的/ Pregel/ 平台/ ./ Pregel/ 对于/ 图/ 的/ 分割/ 、/ 计算/ 处理/ 、/ 消息/ 通信/ 优化/ 、/ 同步控制/ 和/ 容错/ 管理/ 都/ 提出/ 了/ 可行/ 的/ 解决方案/ ,/ 是/ 目前/ 较为/ 完善/ 的/ 专门/ 针对/ 大规模/ 图/ 处理/ 应用/ 的/ 系统/ [/ 5/ ]/ ./ Hadoop/ 的/ 开发商/ Yahoo/ !/ 提出/ 了/ 开源/ 项目/ Giraph/ ./ Giraph/ 可以/ 视为/ 在/ Hadoop/ 平台/ 上/ 运行/ 的/ 一个/ 大规模/ 图/ 算法/ 库/ ,/ 在/ 原有/ MapReduce/ 模型/ 基础/ 上/ ,/ 只/ 启动/ map/ 任务/ ,/ 在/ map/ 任务/ 里面/ 参考/ Pregel/ 的/ 设计/ ,/ 嵌套/ 了/ BSP/ 模型/ ,/ 实现/ 多次/ 循环/ 迭代/ ,/ 以/ 支持/ 大规模/ 图/ 处理/ 应用/ [/ 47/ ]/ ./ 开源/ 项目/ Hama/ 同/ Pregel/ 一样/ ,/ 也/ 是/ 一个/ 独立/ 的/ 分布式/ 并行处理/ 系统/ ,/ 适合/ 需要/ 多次/ 迭代/ 的/ 图/ 处理/ ./ 但是/ Hama/ 目前/ 很/ 不/ 完善/ ,/ 尚无/ 可/ 稳定/ 运行/ 的/ 发布/ 版本/ [/ 6/ ]/ ./ 无论是/ MapReduce/ 模型/ 还是/ BSP/ 模型/ ,/ 上述/ 提及/ 的/ 处理/ 平台/ 都/ 是/ 分布式/ 并行处理/ 系统/ ,/ 它们/ 的/ 优势/ 是/ 完成/ 复杂/ 的/ 图/ 处理/ 任务/ ,/ 如/ PageRank/ 计算/ 、/ 最短/ 路径/ 查询/ 、/ 社交/ 网络分析/ 和/ 图/ 挖掘/ 等/ ,/ 但是/ 对于/ 图/ 数据/ 的/ 一般性/ 存储/ 、/ 更新/ 维护/ 等/ ,/ 则/ 不如/ 分布式/ 图/ 数据库系统/ ./ 分布式/ 图/ 数据库系统/ 集/ 数据/ 存储/ 、/ 维护/ 、/ 查询/ 于/ 一体/ ,/ 继承/ 了/ 传统/ 数据库/ 的/ 事务/ 、/ 一致性/ 控制/ 等/ 特点/ ,/ 有/ 的/ 甚至/ 支持/ 较为/ 复杂/ 的/ 管理/ ./ HyperGraphDB/ 是/ 一种/ 基于/ Key/ -/ Value/ 模型/ 的/ 分布式/ P2P/ 数据库/ ,/ 采用/ 超图/ 作为/ 数据模型/ ,/ 利用/ UUID/ 技术/ 在/ 分布式/ 环境/ 下/ 实现/ Key/ 编号/ 的/ 唯一/ ,/ 支持/ 海量/ 图/ 数据/ 的/ 高速/ 存储/ ;/ 在/ 查询/ 方面/ ,/ 依靠/ 索引/ 的/ 帮助/ 支持/ 快速/ 图/ 遍历/ 和/ 集合/ 查询/ ,/ 而/ 基于/ SPARQL/ 语言/ 的/ 模式/ 查询/ 正在/ 开发/ 中/ [/ 22/ ]/ ./ Trinity/ 是/ 微软/ 研究院/ 开发/ 的/ 基于/ 内存/ 的/ 分布式/ 图/ 数据库系统/ ,/ 该/ 系统/ 采用/ 超图/ 作为/ 数据模型/ ,/ 支持/ 满足/ ACI/ 特性/ 的/ 事务/ 机制/ 、/ 一致性/ 控制/ 和/ 索引/ ,/ 能/ 满足/ 高/ 并发/ 查询/ 请求/ ./ Trinity/ 提供/ 良好/ 的/ 图/ 分割/ 算法/ ,/ 以/ 减少/ 查询/ 时/ 的/ 网络/ 延迟/ ,/ 支持/ 同步/ 、/ 异步/ 两种/ 模式/ 的/ 批处理/ 计算/ [/ 7/ ]/ ./ 其它/ 著名/ 的/ 分布式/ 图/ 数据库系统/ 还有/ Neo4j/ 和/ Infinite/ -/ Graph/ 等/ [/ 18/ -/ 29/ ]/ ./ 此外/ ,/ 也/ 有/ 很多/ 研究/ 团队/ 开发/ 了/ 自己/ 独特/ 的/ 图/ 处理/ 平台/ 和/ 图/ 管理系统/ ./ 如/ 微软/ 针对/ 云/ 计算环境/ 开发/ 的/ Dryad/ 、/ DryadLINQ/ 分布式/ 执行/ 引擎/ [/ 51/ -/ 52/ ]/ ,/ 提供/ 完善/ 的/ 输入输出/ 、/ 任务调度/ 、/ 容错/ 管理机制/ ,/ 支持/ SQL/ 查询/ ;/ Orleans/ 处理/ 平台/ [/ 53/ ]/ 支持/ 异步/ 消息/ 通信/ 和/ 索引/ ,/ 采用/ 新/ 的/ 消息/ 机制/ ,/ 避免/ RPC/ 通信/ 的/ 应答/ 阻塞/ ,/ 采用/ 随机/ 分配/ 方法/ 实现/ 负载/ 均衡/ ,/ 支持/ 任务/ 迁移/ ;/ Horton/ [/ 42/ ]/ 则/ 支持/ 对/ 大规模/ 图/ 的/ 在线/ 查询/ 优化/ ./ GBASE/ 系统/ 是/ 一个/ 可/ 伸缩/ 的/ 通用/ 图/ 数据/ 管理系统/ ,/ 具有/ 完整/ 的/ 图/ 数据/ 分块/ 、/ 压缩/ 、/ 索引/ 和/ 存储/ 机制/ 以及/ 一系列/ 能够/ 支撑/ 复杂/ 图/ 挖掘/ 应用/ 的/ 原语/ 操作/ ./ GBASE/ 底层/ 采用/ 邻接矩阵/ 存储/ 图/ 数据/ ,/ 所有/ 的/ 图/ 处理/ 操作/ 最终/ 都/ 转化/ 为/ Hadoop/ 作业/ 执行/ [/ 8/ ]/ ./ 5/ 图/ 数据处理/ 的/ 执行/ 机制/ 本/ 节/ 介绍/ 实现/ 云/ 计算环境/ 下/ 大规模/ 图/ 数据处理/ 的/ 基本/ 执行/ 机制/ ,/ 包括/ 消息/ 通信/ 、/ 同步控制/ 、/ 容错/ 管理/ ,/ 并/ 讨论/ 可伸缩性/ 问题/ ./ 其中/ 消息/ 通信/ 和/ 同步控制/ 是/ 针对/ 图/ 计算/ 强/ 耦合/ 性/ 进行/ 优化/ 处理/ 的/ 重要/ 内容/ ,/ 容错/ 管理/ 旨在/ 解决/ 可靠性/ 方面/ 的/ 挑战/ ,/ 可伸缩性/ 是/ 云/ 计算/ 灵活性/ 的/ 重要/ 体现/ ./ 5.1/ 消息/ 通信/ 在/ 图/ 处理/ 应用/ 中/ ,/ 每/ 一个/ 图/ 顶点/ 都/ 需要/ 向/ 邻居/ 节点/ 发送/ 消息/ 或/ 从/ 邻居/ 节点/ 接收/ 消息/ ,/ 而图/ 的/ 边/ ,/ 可以/ 理解/ 为/ 消息/ 收发/ 的/ 通道/ ./ 对于/ 一般/ 的/ 图/ 而言/ ,/ 边/ 的/ 数目/ 要/ 远大于/ 图/ 顶点/ 的/ 数目/ ./ 当/ 一个/ 图/ 的/ 顶点/ 数/ 达到/ 百亿/ 级别/ 后/ ,/ 边/ 的/ 数据/ 规模/ 更为/ 巨大/ ,/ 如此/ 大规模/ 的/ 消息/ 通信/ ,/ 如果/ 处理不当/ ,/ 很/ 容易/ 成为/ 整个/ 图/ 处理过程/ 的/ 瓶颈/ ./ 图/ 处理/ 的/ 消息/ ,/ 主要/ 产生/ 在/ 图/ 顶点/ 的/ 计算/ 过程/ 中/ ./ 但是/ 消息/ 发送/ 方式/ ,/ 则/ 可以/ 根据/ 不同/ 的/ 通信/ 策略/ Page9/ 分为/ 异步/ 式/ 和/ 集中式/ ./ 对于/ 异步/ 式/ 通信/ ,/ 图/ 顶点/ 的/ 计算/ 处理/ 与/ 消息/ 通信/ 并发/ 执行/ ,/ 在/ 计算/ 过程/ 中/ 就/ 可以/ 发送/ 消息/ ,/ 将/ 大规模/ 消息/ 的/ 发送/ 分散/ 在/ 不同/ 的/ 时间段/ ,/ 避免/ 瞬时/ 网络通信/ 阻塞/ ,/ 但是/ 接收端/ 需要/ 额外/ 空间/ ,/ 存储/ 临时/ 接收/ 到/ 的/ 消息/ ,/ 相当于/ 用/ 空间/ 换取/ 时间/ ./ 目前/ ,/ Pregel/ 、/ HOP/ 系统/ 等/ 采用/ 异步/ 通信/ 方式/ [/ 5/ ,/ 48/ ]/ ./ 对于/ 集中式/ 通信/ ,/ 图/ 顶点/ 的/ 计算/ 处理/ 与/ 消息/ 通信/ 串行/ 进行/ ,/ 在/ 计算/ 完毕/ 后/ ,/ 统一/ 发送/ 消息/ ,/ 控制/ 和/ 实现/ 方式/ 简单/ ,/ 可/ 在/ 发送/ 端/ 对/ 消息/ 进行/ 最大/ 程度/ 优化/ ,/ 但/ 容易/ 造成/ 瞬间/ 的/ 网络通信/ 阻塞/ 以及/ 增加/ 发送/ 端的/ 消息/ 存储/ 开销/ ./ 鉴于/ 大规模/ 图/ 数据处理/ 过程/ 中/ 的/ 网络通信/ 瓶颈/ ,/ 需要/ 对/ 通信/ 次数/ 和/ 通信/ 的/ 数据量/ 加以/ 优化/ 控制/ 以/ 降低/ 耦合/ 代价/ ./ 利用/ 图/ 分割/ ,/ 可以/ 降低/ 子图/ 之间/ 的/ 连通性/ ,/ 使/ 大部分/ 消息/ 的/ 目的/ 图/ 顶点/ 均/ 位于/ 同一个/ 任务/ 的/ 处理/ 范围/ 中/ ,/ 将/ 网络通信/ 变为/ 本地/ 通信/ ,/ 从根本上/ 减少/ 任务/ 之间/ 的/ 消息/ 发送/ ;/ 针对/ 具体/ 应用/ ,/ 采用/ 消息/ 合并/ 机制/ ,/ 也/ 可以/ 减少/ 网络通信/ 量/ 和/ 存储量/ ,/ 如/ Pregel/ [/ 5/ ]/ 和/ Hadoop/ 系统/ [/ 12/ ]/ ;/ 此外/ ,/ 通过/ 消息/ 缓存/ 和/ 批量/ 发送/ 机制/ ,/ 可以/ 减少/ 网络通信/ 的/ 次数/ ,/ 降低/ 通信/ 链接/ 的/ 维护/ 开销/ ./ 至于/ 消息/ 通信/ 的/ 实现/ 方式/ ,/ Hadoop/ 、/ Hama/ 和/ Giraph/ 等/ 采用/ 基于/ Http/ 协议/ 的/ RPC/ 通信/ 机制/ [/ 6/ ,/ 12/ ,/ 47/ ]/ ./ 作为/ Hadoop/ 的/ 改进/ 版本/ ,/ Twister/ 系统/ 直接/ 使用/ 第/ 3/ 方/ 消息/ 通信/ 管理/ 插件/ 来/ 完成/ 通信/ 控制/ ,/ Twister/ 系统/ 目前/ 支持/ NaradaB/ -/ roking/ 和/ ActiveMQ/ 等/ 基于/ 发布/ —/ 订阅/ 架构/ 的/ 通信/ 插件/ [/ 49/ ]/ ./ 5.2/ 同步控制/ 同步控制/ 是/ 所有/ 分布式计算/ 处理/ 框架/ 都/ 必须/ 面对/ 的/ 问题/ ,/ 只不过/ 有/ 的/ 框架/ 显式/ 地/ 提供/ 同步控制/ ,/ 如/ 采用/ BSP/ 模型/ 的/ Pregel/ 系统/ 、/ Hama/ 系统/ [/ 5/ -/ 6/ ]/ ;/ 有/ 的/ 处理/ 框架/ 提供/ 隐式/ 的/ 同步/ 过程/ ,/ 如/ 采用/ MapReduce/ 模型/ 的/ Hadoop/ 系统/ ,/ 在/ Map/ 阶段/ 和/ Reduce/ 阶段/ 存在/ 隐式/ 的/ 同步控制/ ./ 如果/ 使用/ MapReduce/ 模型/ 进行/ 大规模/ 图/ 迭代/ 处理/ ,/ 相邻/ 作业/ 之间/ 也/ 存在/ 同步控制/ 的/ 过程/ ./ 在/ 需要/ 多次/ 迭代/ 的/ 图/ 处理/ 应用/ 中/ ,/ 同步控制/ 还/ 应该/ 提供/ 图/ 中间状态/ 信息/ 统计/ 查询/ 功能/ 和/ 收敛/ 条件/ 判断/ 功能/ ./ 同步控制/ 的/ 优化/ 可以/ 减少/ 图/ 计算/ 强/ 耦合/ 性/ 带来/ 的/ 影响/ ./ 目前/ ,/ 同步控制/ 的/ 设计方案/ 有/ 两种/ :/ 主从/ 式/ 控制/ 和/ 分散式/ 协同/ 控制/ ./ 前者/ 由/ 主控/ 节点/ 统一/ 协调/ 各/ 任务/ 的/ 同步/ ,/ 完成/ 收敛/ 条件/ 判断/ 以及/ 中间状态/ 信息/ 统计/ 查询/ 功能/ ,/ 便于/ 集中管理/ ,/ 结构/ 清晰/ ,/ 可维护性/ 好/ ,/ 不/ 容易/ 产生/ 死锁/ ./ 但是/ 当/ 数据量/ 较大/ 、/ 任务/ 数量/ 很多/ 时/ ,/ 主控/ 节点/ 会/ 成为/ 处理/ 瓶颈/ ,/ 多/ 作业/ 并发/ 运行/ 以及/ 图/ 处理/ 应用/ 的/ 多次/ 迭代/ ,/ 更/ 加剧/ 了/ 这种/ 瓶颈/ 效应/ ./ 后者/ 的/ 同步/ 过程/ 由/ 各/ 任务/ 自己/ 协调/ ,/ 无/ 主控/ 节点/ ,/ 避免/ 了/ 单点/ 处理/ 瓶颈/ ,/ 可伸缩性/ 很/ 好/ ./ 但是/ 不/ 便于/ 集中管理/ ,/ 一旦/ 各/ 任务/ 开始运行/ ,/ 就/ 难以/ 在/ 迭代/ 过程/ 中/ 加以/ 人工控制/ ,/ 灵活性/ 差/ ./ 在/ 同步控制/ 中/ ,/ 由于/ 任务/ 处理速度/ 不/ 一致/ ,/ 当/ 各/ 任务/ 负责/ 处理/ 的/ 数据/ 规模/ 或/ 数据/ 内部/ 的/ 复杂程度/ 不/ 同时/ ,/ 会/ 导致/ 任务/ 处理速度/ 相差/ 很大/ ,/ 因此/ 造成/ 了/ 水桶/ 效应/ ./ 为/ 降低/ 水桶/ 效应/ ,/ Hadoop/ 系统/ 采用/ “/ 任务/ 推测/ 式/ 执行/ 方式/ ”/ [/ 12/ ]/ ,/ 希望/ “/ 纠正/ ”/ 执行/ 缓慢/ 的/ 任务/ ,/ 降低/ Map/ 阶段/ 和/ Reduce/ 阶段/ 的/ 水桶/ 效应/ ./ 文献/ [/ 30/ ]/ 提出/ 动态/ 增量/ Hash/ 技术/ 来/ 弱化/ Map/ 阶段/ 和/ Reduce/ 阶段/ 之间/ 的/ 同步/ ,/ 实现/ 计算/ 过程/ 的/ 部分/ 重叠/ ,/ 减少/ Reduce/ 任务/ 等待时间/ ./ 另外/ ,/ 在/ 图/ 处理/ 应用/ 中/ ,/ 传统/ Hadoop/ 平台/ 难以解决/ 相邻/ 作业/ 之间/ 的/ 水桶/ 效应/ ,/ HOP/ 系统/ 的/ “/ pipeline/ ”/ 技术/ ,/ 可以/ 在/ 一定/ 程度/ 上/ 缓解/ 该/ 问题/ [/ 48/ ]/ ./ 5.3/ 容错/ 管理/ 对于/ 一个/ 大规模/ 图/ 的/ 处理/ ,/ 任务/ 的/ 执行/ 时间/ 会/ 很长/ ./ 而云/ 计算/ 平台/ 通常/ 由/ 普通/ 廉价/ 计算机/ 构成/ ,/ 故障率/ 很/ 高/ ,/ 在/ 大规模/ 图/ 处理过程/ 中/ ,/ 出现/ 不可/ 预知/ 的/ 故障/ 导致/ 作业/ 无法/ 继续/ 运行/ ,/ 是/ 十分/ 常见/ 的/ 现象/ ./ 对于/ 图/ 处理/ 这种/ 需要/ 多次/ 迭代/ 的/ 应用/ ,/ 如果/ 每次/ 作业/ 失败/ ,/ 都/ 重新启动/ ,/ 会/ 导致/ 昂贵/ 的/ 重复/ 处理/ 代价/ ,/ 甚至/ 作业/ 根本无法/ 正常/ 结束/ ./ 在/ 云/ 计算/ 领域/ ,/ 当前/ 容错/ 管理/ 的/ 主流/ 设计/ 思想/ 是/ 通过/ 硬盘/ 读写/ 和/ 冗余/ 备份/ 来/ 提供/ 保障/ ./ 容错/ 管理/ 需要/ 考虑/ 的/ 内容/ 主要/ 包括/ :/ 冗余/ 备份/ 的/ 写入/ 时机/ 、/ 冗余/ 备份/ 的/ 存放/ 位置/ 、/ 故障/ 侦测/ 、/ 故障/ 恢复/ 等/ ./ 其中/ 故障/ 的/ 侦测/ ,/ 目前/ 均/ 是/ 采用/ “/ 心跳/ ”/ 报告/ 的/ 方法/ 完成/ ./ 针对/ 图/ 处理/ 一般/ 是/ 多次/ 迭代/ 的/ 特点/ ,/ 备份/ 的/ 写入/ 时机/ 应该/ 在/ 两次/ 相邻/ 迭代/ 之间/ ,/ 但/ 这/ 又/ 提出/ 了/ 备份/ 生成/ 频率/ 的/ 问题/ :/ 迭代/ 多少/ 次/ 进行/ 一次/ 备份/ 是/ 合适/ 的/ ./ 较/ 高/ 的/ 备份/ 频率/ 会/ 导致/ 作业/ 运行/ 速度/ 缓慢/ ,/ 较/ 低/ 的/ 备份/ 频率/ 又/ 会/ 导致/ 故障/ 恢复/ 时/ 重复/ 处理/ 的/ 代价/ 增高/ ./ 目前/ 对于/ 这个/ 问题/ ,/ 并/ 没有/ 定论/ ./ 一种/ 可能/ 的/ 解决方案/ 是/ 统计/ 特定/ 云/ 计算/ 节点/ 的/ 故障率/ ,/ 根据/ 不同/ 图/ 处理/ 作业/ 的/ 迭代/ 步数/ 来/ 动态/ 设定/ 备份/ 频率/ ./ 借鉴/ HOP/ 的/ 容错/ 思想/ [/ 48/ ]/ ,/ 可以/ 在/ 一个/ map/ 任务/ 的/ 中间/ 增加/ 备份/ 同时/ 记录/ 原始数据/ 的/ 处理/ 偏移量/ ,/ 当/ 故障/ 发生/ 后/ ,/ 重启/ 的/ map/ 任务/ 直接/ 从/ 偏移量/ 处/ 开始/ 计算/ ./ 也/ 可以/ 在/ 一次/ 图/ 处理/ 迭代/ 过程/ 中/ ,/ 设置/ Page10/ 中间/ 备份/ 并/ 记录/ 处理/ 偏移量/ ,/ 这/ 可以/ 减少/ 故障/ 恢复/ 时/ 的/ 重复/ 处理/ ,/ 提高/ 恢复/ 效率/ ,/ 但是/ 增大/ 了/ 备份/ 生成/ 频率/ 和/ 磁盘/ 开销/ ,/ 也/ 增大/ 了/ 容错/ 管理/ 的/ 复杂度/ ./ 故障/ 恢复/ 时/ ,/ 如果/ 各/ 并行任务/ 之间/ 完全/ 独立/ ,/ 则/ 重启/ 故障/ 任务/ 即可/ ,/ Hadoop/ 系统/ 就/ 采用/ 这种/ 恢复/ 策略/ [/ 12/ ]/ ./ 在/ 图/ 处理过程/ 中/ ,/ 可以/ 直接/ 利用/ Hadoop/ 系统/ 自身/ 的/ 容错/ 机制/ ,/ 但是/ 由于/ Hadoop/ 的/ 容错/ 是/ 以/ MapReduce/ 作业/ 为/ 单位/ ,/ 而/ 一个/ 迭代/ 的/ 图/ 处理/ 作业/ 一般/ 需要/ 多个/ MapReduce/ 作业/ ,/ 多个/ MapReduce/ 作业/ 间/ 的/ 容错/ 管理/ 就/ 不是/ Hadoop/ 所能/ 解决/ 的/ 了/ ,/ 需要/ 用户/ 自己/ 编码/ 实现/ ,/ 较为/ 繁琐/ ./ 如果/ 各/ 并行任务/ 之间/ 耦合度/ 很/ 高/ ,/ 如/ 基于/ BSP/ 模型/ 开发/ 的/ Pregel/ 系统/ ,/ 就/ 需要/ 使/ 所有/ 任务/ 回归/ 到/ 同一个/ 检查点/ ./ 作为/ 改进/ ,/ Pregel/ 提出/ “/ 检查点/ 加/ 消息/ 记录/ ”/ 的/ 容错/ 管理/ 方案/ [/ 5/ ]/ ,/ 将/ 图/ 顶点/ 状态/ 备份/ 后/ ,/ 还/ 需要/ 将/ 每个/ 超步/ 内/ 各/ 任务/ 间/ 收发/ 的/ 消息/ 写入/ 磁盘/ ./ 在/ 故障/ 发生/ 时/ ,/ 仅/ 需/ 恢复/ 故障/ 任务/ ,/ 不必/ 全部/ 回滚/ ,/ 减少/ 因/ 任务/ 耦合度/ 过高/ 导致/ 的/ 高昂/ 的/ 恢复/ 代价/ ,/ 但是/ 对/ 消息/ 的/ 记录/ 增大/ 了/ 磁盘/ 存储/ 开销/ ,/ 在/ 一定/ 程度/ 上/ 也/ 影响/ 了/ 作业/ 的/ 正常/ 运行/ 效率/ ./ 5.4/ 可伸缩性/ 云/ 计算环境/ 下/ 的/ 可伸缩性/ ,/ 应该/ 从/ 两个/ 方面/ 考虑/ :/ 硬件/ 方面/ ,/ 即/ 动态/ 添加/ 、/ 删除/ 节点/ 来/ 实现/ 云/ 平台/ 处理/ 能力/ 的/ 伸缩性/ ;/ 软件/ 方面/ ,/ 系统/ 处理/ 框架/ 应该/ 尽量避免/ 单点/ 处理/ 瓶颈/ ./ 从/ 硬件/ 方面/ 考虑/ ,/ 应该/ 允许/ 在/ 运行/ 期间/ ,/ 动态/ 添加/ 物理/ 机器/ 以/ 扩充/ 整个/ 云/ 计算/ 平台/ 的/ 可用/ 资源/ ./ 云/ 计算/ 平台/ 可用/ 资源/ 的/ 伸缩性/ ,/ 一方面/ 是/ 指新/ 提交/ 的/ 作业/ 可以/ 利用/ 新/ 添加/ 的/ 资源/ ,/ 其/ 实现/ 比较/ 容易/ ,/ 不同/ 云/ 计算/ 系统/ 的/ 实现/ 方式/ 较为/ 统一/ ,/ 都/ 是/ 通过/ 注册/ 方式/ 将/ 新/ 机器/ 添加/ 到/ 可用/ 工作/ 节点/ 集合/ ;/ 另一方面/ 也/ 包括/ 正在/ 运行/ 的/ 作业/ 可以/ 利用/ 新/ 添加/ 的/ 资源/ ,/ 不同/ 的/ 处理/ 框架/ 对/ 其/ 实现/ 方式/ 是/ 不同/ 的/ ,/ 而且/ 对于/ 大规模/ 图/ 处理/ 应用/ ,/ 更有意义/ ./ 假设/ 目前/ 正在/ 运行/ 一个/ 大规模/ 图/ 处理/ 作业/ ,/ 由于/ 云/ 平台/ 处理/ 资源/ 的/ 限制/ 导致/ 运行/ 缓慢/ ,/ 此时/ 考虑/ 动态/ 添加/ 一批/ 工作/ 节点/ ,/ 如果/ 正在/ 运行/ 的/ 作业/ 能够/ 利用/ 新/ 添加/ 的/ 计算资源/ ,/ 就/ 可以/ 加快/ 处理速度/ ./ Hadoop/ 系统/ 中/ ,/ 由于/ 任务/ 之间/ 是/ 完全/ 独立/ 的/ ,/ 通过/ “/ 任务/ 推测/ 式/ 执行/ ”/ 技术/ [/ 12/ ]/ ,/ 可以/ 轻松/ 利用/ 新/ 加入/ 资源/ ./ 但是/ 新/ 启动/ 的/ 任务/ 必须/ 从头开始/ 运行/ ,/ 除非/ 原/ 任务/ 所在/ 的/ 物理/ 机器/ 负载/ 很/ 重/ 导致/ 运行/ 速度/ 极其/ 缓慢/ ,/ 否则/ 新/ 启动/ 任务/ 的/ 完成/ 时间/ 通常/ 晚于/ 正在/ 运行/ 的/ 任务/ ./ 因而/ ,/ 导致/ 这种/ 任务/ 的/ “/ 推测/ 式/ 执行/ ”/ ,/ 在/ 很多/ 情况/ 下/ 是/ 一种/ 资源/ 的/ 浪费/ ,/ 并/ 不/ 适用/ ./ Pregel/ 系统/ 和/ Hama/ 系统/ 目前/ 还/ 不/ 支持/ 正在/ 处理/ 的/ 作业/ 可以/ 利用/ 新/ 添加/ 的/ 计算资源/ ./ 由于/ BSP/ 模型/ 以超步/ 实现/ 大规模/ 图/ 数据/ 的/ 迭代/ 处理/ ,/ 每个/ 超步/ 中/ ,/ 各/ 任务/ 耦合度/ 很/ 高/ ,/ 所以/ 不能/ 像/ MapReduce/ 模型/ 那样/ ,/ 通过/ “/ 任务/ 推测/ 式/ 执行/ ”/ 来/ 利用/ 新/ 资源/ ./ 对此/ ,/ 一种/ 可能/ 的/ 方案/ 是/ “/ 任务/ 迁移/ ”/ ,/ 通过/ 计算/ 任务/ 的/ 迁移/ 代价/ ,/ 决定/ 是否/ 将/ 导致/ 整个/ 作业处理/ 缓慢/ 的/ 任务/ 迁移/ 到/ 新/ 工作/ 节点/ 上/ 运行/ ./ 从/ 数据/ 存储/ 能力/ 方面/ 考虑/ ,/ 基于/ BSP/ 模型/ 的/ 图/ 处理/ 框架/ ,/ 具有/ 较/ 高/ 的/ 内存/ 资源/ 要求/ ,/ 最/ 理想/ 方法/ 是/ 将/ 所有/ 的/ 图/ 数据/ 都/ 驻留/ 在/ 内存/ 中/ ,/ 这样/ 不/ 需要/ 进行/ 内外/ 存/ 交换/ ,/ 否则/ 计算速度/ 将/ 显著/ 下降/ ./ 但/ 这/ 提高/ 了/ 对/ 硬件/ 配置/ 的/ 要求/ ,/ 在/ 一定/ 程度/ 上/ 也/ 制约/ 了/ 数据处理/ 的/ 规模/ ./ 基于/ MapReduce/ 的/ 图/ 数据处理系统/ ,/ 只要/ 计算/ 的/ 中间/ 结果/ 能够/ 存储/ 在/ 磁盘/ 上/ ,/ 系统/ 就/ 可以/ 运行/ ,/ 而/ 对/ 节点/ 的/ 配置/ 没有/ 过高/ 的/ 要求/ ./ 从/ 理论/ 上/ 讲/ ,/ 云/ 计算环境/ 的/ 伸缩/ 能力/ 应该/ 是/ 没有/ 上限/ 的/ ,/ 即/ 加入/ 的/ 物理/ 机器/ 越/ 多/ ,/ 平台/ 中/ 可用/ 资源/ 越/ 多/ ,/ 处理/ 性能/ 越好/ ./ 但是/ ,/ 从/ 实际/ 来看/ ,/ 并/ 不是/ 这样/ 的/ ./ 以/ Hadoop/ 为例/ ,/ Yahoo/ 发现/ ,/ 当/ 计算/ 节点/ 的/ 规模/ 达到/ 4000/ 台时/ ,/ Hadoop/ 系统/ 遭遇/ 到/ 伸缩性/ 壁垒/ [/ 54/ ]/ ,/ 新/ 加入/ 的/ 计算资源/ 不能/ 被/ 云/ 平台/ 充分利用/ ./ 造成/ 这种/ 问题/ 的/ 根源/ ,/ 是/ 由于/ 目前/ 的/ 云/ 计算环境/ 主要/ 依赖于/ 主从/ 式/ 控制/ 模式/ ,/ 存在/ 单点/ 处理/ 瓶颈/ ,/ 当/ 整个/ 云/ 平台/ 规模/ 过大/ ,/ 主控/ 节点/ 的/ 处理/ 能力/ 成为/ 提高/ 系统/ 性能/ 的/ 制约/ 瓶颈/ ./ 6/ 图/ 查询处理/ 图/ 数据管理/ 的/ 最终/ 目的/ 是/ 支持/ 查询处理/ ,/ 这里/ 的/ 查询/ 是/ 指/ 广义/ 的/ 查询/ ,/ 既/ 包括/ 简单/ 的/ 查询/ ,/ 如/ 好友/ 关系/ 查询/ ,/ 也/ 包括/ 复杂/ 的/ 图/ 计算/ 和/ 图/ 挖掘/ ,/ 如/ Pag/ -/ eRank/ 计算/ 、/ 社交/ 网络分析/ 等/ ./ 从/ 查询/ 语义/ 的/ 角度/ 考虑/ ,/ 将/ 大规模/ 图/ 查询/ 分为/ 两大类/ :/ 一类/ 是/ 基本/ 的/ 图/ 查询/ 计算/ ,/ 如/ 特定/ 图/ 顶点/ 或边/ 的/ 查询/ 、/ 好友/ 关系/ 查询/ 等/ ;/ 另一类/ 是/ 复杂/ 查询/ 计算/ 与/ 图/ 挖掘/ ,/ 如/ RWR/ (/ RandomWalkwithRestart/ )/ 计算/ 、/ 子图/ 挖掘/ 等/ ./ 对于/ 一个/ 大规模/ 图/ ,/ 由于/ 数据/ 的/ 海量/ 性/ ,/ 必须/ 考虑/ 查询处理/ 的/ 效率/ ,/ 采用/ 云/ 计算环境/ 作为/ 处理/ 平台/ ,/ 就是/ 希望/ 利用/ 分布式/ 并行处理/ 机制/ 提高效率/ ./ 此外/ ,/ 还/ 可以/ 根据/ 不同/ 类型/ 的/ 查询/ ,/ 设计/ 有/ 针对性/ 的/ 查询/ 优化/ 策略/ ,/ 本节/ 将/ 围绕/ 查询/ 语义/ ,/ 着重/ 介绍/ 两类/ 图/ 查询处理/ 的/ 研究进展/ ./ Page116/ ./ 1/ 基本/ 的/ 图/ 查询/ 计算/ 图/ 的/ 简单/ 查询/ ,/ 一般/ 不/ 需要/ 多次/ 迭代/ ,/ 用户/ 可以/ 对/ 大规模/ 图/ 进行/ 查找/ ,/ 查询/ 自己/ 感兴趣/ 的/ 信息/ ./ 查找/ 过程/ 中/ ,/ 对于/ 某些/ 应用/ ,/ 通过/ 建立/ 合适/ 的/ 索引/ 、/ 调整/ 查询/ 顺序/ 和/ 查询/ 复用/ 等/ 技术/ ,/ 可以/ 避免/ 对/ 整个/ 图/ 顶点/ 的/ 遍历/ ,/ 有效/ 提高/ 查找/ 效率/ ./ 从/ 所/ 处理/ 的/ 查询/ 请求/ 和/ 优化/ 技术/ 方面/ 考虑/ ,/ 此类/ 图/ 查询/ 类似/ 于/ 普通/ 的/ 数据库/ 查询/ ./ 传统/ 集中式/ 数据库系统/ ,/ 不仅/ 为/ 用户/ 提供/ 了/ 良好/ 的/ SQL/ 查询语言/ 接口/ ,/ 还/ 通过/ 索引/ 组织/ 和/ 查询/ 优化/ ,/ 提供/ 高效/ 的/ 查询/ 服务/ ./ 云/ 计算环境/ 下/ ,/ 对于/ 大规模/ 图/ 的/ 简单/ 查询/ ,/ 在/ 考虑/ 分布式/ 环境/ 和/ 图/ 结构/ 特点/ 的/ 同时/ ,/ 也/ 应该/ 尽量/ 提供/ 类似/ 的/ 功能/ ./ 这里/ 简单/ 介绍/ Horton/ [/ 42/ ]/ 和/ HyperGraphDB/ [/ 22/ ]/ ./ Horton/ 是/ 微软/ 正在/ 设计/ 的/ 一款/ 专门/ 针对/ 大规模/ 图/ 数据/ 提供/ 高效/ 在线/ 查询/ 服务/ 的/ 系统/ ./ Horton/ 为/ 减少/ 查询/ 时/ 的/ 网络通信/ 代价/ ,/ 对图/ 数据/ 进行/ 专门/ 分割/ ,/ 以/ 提高/ 局部性/ ./ 从/ 查询语言/ 和/ 处理/ 机制/ 方面/ ,/ Horton/ 将/ 用户/ 的/ 具体/ 查询/ 请求/ 分解/ 为/ 若干/ 原语/ ,/ 采用/ 有限/ 自动机/ 方法/ ,/ 确定/ 底层/ 的/ 广度/ 优先/ 搜索/ 的/ 执行/ 顺序/ ./ 至于/ 查询/ 优化/ 方面/ ,/ 在/ 具体/ 应用/ 中/ ,/ 如/ 好友/ 关系/ 和/ 照片/ 关注/ 关系/ ,/ 研究/ 发现/ ,/ 以/ 不同/ 的/ 顺序/ 执行/ 有限/ 自动机/ ,/ 查询/ 代价/ 图/ 4Horton/ 系统/ 查询处理/ 示意图/ 关于/ 图/ 应用/ 中/ 的/ 基本/ 计算/ ,/ Pregel/ 、/ Giraph/ 和/ Hama/ 等/ 系统/ 或图/ 算法/ 库/ ,/ 有/ 较大/ 的/ 发展前景/ ,/ 它们/ 均/ 具备/ 一定/ 的/ 通用性/ ./ 目前/ ,/ 基于/ Pregel/ 和/ Giraph/ 图/ 计算/ 处理/ ,/ 需要/ 用户/ 重写/ 系统/ 提供/ 的/ 图/ 顶点/ 基类/ 相差/ 很大/ ./ 如图/ 4/ 所示/ 的/ 查询/ ,/ 如果/ 按照/ 图中边/ 的/ 序号/ 进行/ 广度/ 优先/ 搜索/ ,/ 则/ 方案/ 1/ 的/ 代价/ (/ 即/ 处理/ 步骤/ 数/ )/ 为/ 8/ ,/ 而/ 方案/ 2/ 的/ 代价/ 为/ 4/ ,/ 优于/ 方案/ 1/ ./ Horton/ 采用/ 基于/ 图/ 顶点/ 出/ 度/ 统计/ 信息/ 的/ 预处理/ 优化/ 技术/ ,/ 能够/ 以较/ 低/ 的/ 预处理/ 代价/ 获得/ 较优/ 的/ 自动机/ 执行/ 顺序/ ./ 在/ 高/ 并发/ 环境/ 下/ ,/ Horton/ 还/ 可以/ 复用/ 不同/ 查询/ 请求/ 的/ 原语/ ./ 此外/ ,/ Horton/ 可以/ 根据/ 查询/ 的/ 历史/ 统计/ 信息/ ,/ 在/ 常用/ 查询/ 顶点/ 之间/ 建立/ “/ 衍生/ 边/ ”/ 并/ 持久/ 化/ 存储/ ,/ 以/ 空间/ 换/ 时间/ ,/ 可以/ 减少/ 后续/ 查询/ 过程/ 中/ 图/ 顶点/ 的/ 遍历/ 开销/ ./ 如图/ 4/ 所示/ ,/ 对/ 李四/ 朋友/ 关注/ 的/ 照片/ 建立/ “/ 衍生/ 边/ ”/ ,/ 在/ 方案/ 3/ 中/ ,/ 可以/ 直接/ 定位/ 找到/ 查询/ 结果/ ,/ 代价/ 比/ 方案/ 2/ 更优/ ./ HypergraphDB/ 是/ 一个/ 分布式/ 图/ 数据库系统/ ,/ 支持/ 超图/ 模型/ ,/ 底层/ 以/ Key/ -/ Value/ 格式/ 存储/ ,/ 可以/ 建立/ B/ -/ tree/ 索引/ ,/ 为/ 用户/ 提供/ 查询/ 原语/ 接口/ 以/ 表达/ 具体/ 的/ 查询/ 请求/ ,/ 如图/ 顶点/ 和/ 边/ 条件/ 限定/ 查询/ 、/ 比较/ 操作/ 、/ 连接/ 操作/ 等/ ,/ 可以/ 通过/ 广度/ 优先/ 搜索/ 或/ 深度/ 优先/ 搜索/ 返回/ 符合条件/ 的/ 信息/ 集合/ ./ 总体/ 来看/ ,/ 图/ 数据库/ 所/ 支持/ 的/ 查询处理/ 都/ 比较简单/ ,/ 无法/ 完成/ 类似/ 最短/ 路径/ 计算/ 等/ 基本/ 图/ 计算/ 功能/ (/ 但/ 微软/ 的/ Trinity/ 系统集成/ 了/ 图/ 数据库/ 和/ 图/ 处理/ 平台/ 功能/ ,/ 可以/ 完成/ 高级/ 图/ 处理/ 应用/ [/ 7/ ]/ )/ ./ 来/ 表达/ 自己/ 的/ 查询处理/ 请求/ ./ 对于/ 具体/ 的/ 图/ 计算/ 应用/ ,/ 可以/ 进行/ 针对性/ 的/ 优化/ ,/ 获得/ 较/ 好/ 的/ 性能指标/ ./ 以/ 最/ 短/ 路径/ 计算/ 为例/ ,/ 可以/ 利用/ 预计/ 算/ 的/ 索引/ 来/ 加快/ 响应/ 时间/ ,/ 如/ 文献/ [/ 55/ ]/ 提出/ 的/ HEPV/ 和/ 文献/ [/ 56/ ]/ Page12/ 提出/ 的/ HiTi/ 就/ 可以/ 视为/ 多级/ 索引/ ,/ 文献/ [/ 57/ ]/ 则/ 提出/ 使用/ 2/ -/ HOP/ 索引/ 为/ 每个/ 顶点/ 分配/ 两个/ 顶点/ 标签/ 集合/ ,/ 通过/ 标签/ 集合/ 的/ 交集/ 来/ 实现/ 两个/ 图/ 顶点/ 之间/ 的/ 最/ 短/ 路径/ 查询/ ./ 文献/ [/ 58/ ]/ 对云/ 计算环境/ 下/ ,/ 基于/ 邻居/ 隐私/ 保护/ 的/ 最/ 短/ 路径/ 计算/ 问题/ ,/ 提出/ 了/ 采用/ 贪心/ 算法/ 将/ 原始/ 大图/ 分为/ 本地/ 存储/ 的/ 连接/ 图/ Gl/ 和/ 位于/ 云端/ 的/ 外/ 包图/ 集合/ G0/ (/ outsourcedgraphs/ )/ ,/ 以/ 1/ -/ neighborhood/ -/ d/ -/ radius/ 模型/ 保证/ 邻居/ 隐私/ ,/ 通过/ Gl/ 和/ G0/ 联合/ 对外/ 提供/ 最短/ 路径/ 查询/ 服务/ ./ 6.2/ 复杂/ 查询/ 与/ 图/ 挖掘/ 相比/ 于/ 基本/ 图/ 计算/ ,/ 复杂/ 图/ 计算/ 与/ 挖掘/ 属于/ 高级/ 图/ 处理/ 应用/ ,/ 如/ 模式匹配/ 、/ RWR/ 计算/ 等/ ./ Pregel/ 系统/ 给出/ 了/ 对于/ BipartiteMatching/ 和/ Semi/ -/ Clustering/ 算法/ 的/ BSP/ 模型/ 实现/ 方式/ [/ 5/ ]/ ./ PEGASUS/ 算法/ 库/ 提供/ 了/ 大量/ 基于/ Hadoop/ 的/ 图/ 挖掘/ 算法/ [/ 59/ ]/ ./ PEGASUS/ 系统/ 使用/ GIM/ -/ V/ (/ GeneralizedIterativeMatrix/ -/ Vectormultiplication/ )/ 原语/ 算子/ ,/ 将/ 图/ 挖掘/ 的/ 迭代/ 处理过程/ 转换/ 为/ 图/ 邻接矩阵/ 的/ 迭代/ 相乘/ ./ 以大图/ 中/ 连通/ 域/ 查找/ 为例/ ,/ PEGASUS/ 提出/ 了/ 一个/ 新/ 算法/ HCC/ :/ 对于/ 图中/ 的/ 每/ 一个/ 顶点/ vi/ ,/ 都/ 维护/ 一个/ 分组/ id/ ,/ 即/ chi/ ,/ 它/ 是/ 在/ h/ 跳内/ 能够/ 到达/ vi/ 的/ 最小/ 顶点/ id/ ./ 初始/ 时/ ,/ vi/ 的/ chi/ 被/ 设为/ 它/ 自己/ 的/ 顶点/ id/ ,/ 即/ c0i/ =/ i/ ./ 在/ 每次/ 迭代/ 过程/ 中/ ,/ 每个/ 顶点/ 都/ 将/ 它/ 自己/ 的/ chi/ 发送给/ 它/ 的/ 邻居/ ./ 然后/ ,/ 顶点/ vi/ 的/ 下/ 一步/ 的/ 分组/ id/ ,/ 即/ ch/ +/ 1i/ ,/ 就/ 被/ 设为/ 它/ 当前/ 分组/ id/ 与/ 它/ 接收/ 到/ 的/ 所有/ 邻居/ 发送/ 来/ 的/ 分组/ id/ 中/ 的/ 最小值/ ./ 而/ 最/ 关键/ 的/ 一步/ 就是/ ,/ 这种/ 在/ 邻居/ 之间/ 的/ 通信/ 过程/ 可以/ 用/ GIM/ -/ V/ 的/ 形式/ 来/ 表达/ :/ ch/ +/ 1i/ =/ M/ ×/ Gch/ ./ 通过/ 反复/ 迭代/ 这个/ 过程/ ,/ 在/ 一个/ 分组/ 中/ 的/ 顶点/ 的/ 分组/ id/ 值/ 就/ 会/ 收敛/ 顶点/ id/ 值/ ./ 迭代/ 地/ 进行/ 这种/ 乘法/ ,/ 直到/ 分组/ id/ 收敛/ ./ 由于/ 实际/ 应用/ 中/ 的/ 图/ 一般/ 具有/ 较/ 小/ 的/ 直径/ ,/ 因此/ ,/ HCC/ 算法/ 通常/ 可以/ 较少/ 的/ 迭代/ 次数/ 结束/ ./ 目前/ 比较/ 通用/ 的/ 图/ 查询处理/ 系统/ ,/ 主要/ 包括/ 基于/ BSP/ 模型/ 的/ Pregel/ 和/ 基于/ Hadoop/ 的/ GBASE/ ./ Pregel/ 对于/ 最短/ 路径/ 计算/ 、/ PageRank/ 计算/ 、/ 聚类/ 等/ 操作/ 都/ 可以/ 支持/ ./ 但是/ ,/ Pregel/ 仅/ 支持/ 稀疏/ 图/ ,/ 且/ 全部/ 数据/ 驻留/ 内存/ ,/ 需要/ 进一步/ 的/ 改进/ 以/ 支持/ 更/ 复杂/ 的/ 应用/ ./ 在/ PEGASUS/ 算法/ 库/ 基础/ 上/ 开发/ 的/ GBASE/ 是/ 一个/ 功能/ 比较/ 强大/ 的/ 图/ 数据/ 管理系统/ ,/ 所/ 支持/ 的/ 查询处理/ 也/ 比较/ 全/ ,/ 将/ 所有/ 的/ 大图/ 查询/ 分为/ 两类/ :/ 全局/ 查询/ (/ globalquery/ )/ 和/ 定向/ 查询/ (/ targe/ -/ tedquery/ )/ ./ 前者/ 需要/ 遍历/ 整个/ 图/ 结构/ ,/ 如/ PEGA/ -/ SUS/ 算法/ 库中/ 包含/ 的/ RWR/ 、/ 连通/ 域/ 查询/ 等/ 应用/ ./ 后者/ 仅/ 需要/ 访问/ 图/ 的/ 一部分/ ,/ 例如/ GBASE/ 目前/ 支持/ neighborhoods/ 、/ inducedsubgraphs/ 、/ egonets/ 、/ K/ -/ core/ 和/ cross/ -/ edges/ 等/ 多种不同/ 的/ 定向/ 查询/ ./ GBASE/ 以/ 邻接矩阵/ 存储/ 图/ 数据/ ,/ 将/ 所有/ 的/ 查询处理/ 转化/ 为/ 矩阵/ 迭代/ 操作/ ,/ 底层/ 计算/ 由/ Hadoop/ 完成/ ./ 当然/ 对于/ 大规模/ 图/ ,/ 邻接矩阵/ 过大/ 的/ 存储/ 开销/ 和/ 分割/ 存放/ 的/ 复杂性/ ,/ 对于/ 某些/ 以图/ 顶点/ 为/ 核心/ 的/ 应用/ ,/ 如/ PageR/ -/ ank/ 计算/ 而言/ ,/ 是/ 有些/ 得不偿失/ 的/ ./ 从/ 大规模/ 图/ 应用/ 的/ 角度看/ ,/ 目前/ 各种/ 图/ 处理/ 系统/ ,/ 尚/ 不能/ 很/ 好/ 地/ 支持/ 子图/ 挖掘/ 、/ 图/ 模式匹配/ 等/ 功能/ ./ 在/ 图/ 的/ 模式匹配/ 查询/ 方面/ ,/ 针对/ RDF/ 开发/ 的/ SPARQL/ ,/ 可以/ 完成/ TriplePattern/ 、/ OptionalPat/ -/ tern/ 等/ 查询/ [/ 60/ ]/ ,/ 具有/ 很/ 高/ 的/ 参考价值/ ,/ Hypergraph/ -/ DB/ 正/ 计划/ 采用/ 该/ 语言/ 实现/ 对/ 超图/ 的/ 模式/ 查询/ [/ 22/ ]/ ./ 6.3/ 图/ 查询处理/ 的/ 实现/ 模式/ 虽然/ 图/ 查询处理/ 的/ 种类/ 很多/ ,/ 但/ 在/ 云/ 计算/ 的/ 分布式/ 环境/ 下/ ,/ 支持/ 图/ 查询处理/ 的/ 底层/ 图/ 遍历/ 操作/ 主要/ 有/ 两种/ 驱动/ 模式/ :/ 一种/ 是/ 以图/ 顶点/ 驱动/ 的/ 主动/ 遍历/ 模式/ ;/ 另/ 一种/ 是/ 以/ 消息/ 驱动/ 的/ 被动/ 遍历/ 模式/ ./ 这/ 两种/ 遍历/ 模式/ 仅/ 是/ 驱动/ 不同/ ,/ 但是/ 遍历/ 操作/ 的/ 对象/ 仍为/ 图/ 顶点/ ,/ 即/ 处理/ 操作/ 的/ 核心/ 始终/ 是/ 图/ 顶点/ ./ 在/ 云/ 计算环境/ 下/ ,/ 以图/ 顶点/ 驱动/ 的/ 主动/ 遍历/ 计算/ 模式/ ,/ 需要/ 每个/ 任务/ 在/ 计算/ 时/ ,/ 主动/ 遍历/ 其所/ 负责/ 的/ 全部/ 图/ 顶点/ ,/ 对于/ 每/ 一个/ 图/ 顶点/ ,/ 进行/ 计算/ 处理/ 和/ 消息/ 收发/ ./ 这种/ 处理/ 模式/ 适用性/ 强/ ,/ 可以/ 支持/ 所有/ 的/ 图/ 应用/ 场景/ ,/ Hama/ 系统/ 就/ 采用/ 这种/ 遍历/ 模式/ ./ 但是/ 对于/ 某些/ 特定/ 的/ 应用/ ,/ 可能/ 造成/ 资源/ 浪费/ ./ 以/ PageRank/ 计算/ 为例/ ,/ 图/ 顶点/ 状态/ 的/ 更新/ 依赖于/ 消息/ 的/ 接收/ ,/ 即/ 只有/ 邻居/ 顶点/ 所/ 存储/ 的/ PageRank/ 值/ 发生变化/ 时/ ,/ 其/ 出度/ 顶点/ 的/ PageRank/ 值才/ 可能/ 变化/ ./ 如果/ 某/ 顶点/ 没有/ 接收/ 的/ 消息/ ,/ 那么/ 它/ 的/ 值/ 就/ 不会/ 更新/ ,/ 也/ 不会/ 对/ 其/ 邻居/ 发送/ 消息/ ,/ 此时/ 可以/ 将/ 该/ 顶点/ 视为/ 达到/ 稳定/ 状态/ ,/ 如果/ 所有/ 图/ 顶点/ 均/ 达到/ 稳定/ 状态/ ,/ 那么/ PageRank/ 的/ 计算/ 任务/ 就/ 完成/ 了/ ./ 由于/ PageRank/ 计算/ 是/ 一个/ 收敛/ 算法/ ,/ 随着/ 迭代/ 处理/ 的/ 进行/ ,/ 越来越/ 多/ 的/ 图/ 顶点/ 将/ 达到/ 稳定/ 状态/ ,/ 消息/ 发送量/ 越来越少/ ./ 如果/ 以图/ 顶点/ 为/ 驱动/ ,/ 相当/ 一部分/ 图/ 顶点/ 的/ 遍历/ 和/ 处理/ 是/ 没有/ 实际意义/ 的/ ./ 作为/ 改进/ ,/ 在/ 以/ 消息/ 驱动/ 的/ 被动/ 遍历/ 模式/ 中/ ,/ 各/ 任务/ 仅/ 需/ 对/ 有/ 消息/ 需要/ 处理/ 的/ 图/ 顶点/ ,/ 进行/ 遍历/ 计算/ ./ 这样/ ,/ 对于/ PageRank/ 这种/ 具有/ 收敛性/ 的/ 大规模/ 图/ 迭代/ 处理/ 应用/ ,/ 可以/ 有效/ 减少/ 不必要/ 的/ 顶点/ 调用/ 处理/ 开销/ ./ Pregel/ 系统/ 采用/ 的/ 遍历/ 模式/ 介于/ 两者之间/ ,/ 通过/ “/ 投票/ ”/ 机制/ ,/ 图/ 顶点/ 可以/ 将/ 自己/ 置于/ 非/ 活跃/ 状态/ ,/ 除非/ 该/ 顶点/ 接收/ 到/ 新/ 的/ 消息/ ,/ 否则/ 不会/ 在/ 后续/ 的/ 迭/ Page13/ 代/ 处理/ 中/ 被/ 计算/ ./ 但是/ 各/ 任务/ 仍/ 需要/ 遍历/ 图/ 顶点/ 来/ 检查/ 图/ 顶点/ 是否/ 处于/ 活跃/ 状态/ ./ Pregel/ 的/ 优化/ 之/ 处/ 在于/ ,/ 对于/ 非/ 活跃/ 状态/ 的/ 图/ 顶点/ ,/ 不需/ 调用/ 处理函数/ ,/ 节省/ 了/ 处理/ 函数调用/ 的/ 开销/ ./ 7/ 结束语/ 综上所述/ ,/ 在/ 云/ 计算环境/ 下/ 进行/ 大规模/ 图/ 数据/ 的/ 处理/ ,/ 涉及/ 到/ 图/ 算法/ 以及/ 云/ 计算/ 领域/ 的/ 多个/ 方面/ ./ 目前/ 的/ 研究/ 重点/ 主要/ 集中/ 在/ 以下/ 5/ 个/ 方面/ :/ (/ 1/ )/ 大规模/ 图/ 分割/ ./ 云/ 计算环境/ 下/ 的/ 大图/ 分割/ ,/ 需要/ 提高/ 子图/ 内部/ 的/ 连通性/ ,/ 降低/ 子图/ 之间/ 的/ 连通性/ ,/ 维持/ 子图/ 之间/ 数据/ 规模/ 和/ 图/ 拓扑/ 结构/ 的/ 均衡性/ ,/ 同时/ 应该/ 有/ 较/ 小/ 的/ 时间/ 复杂度/ ./ 良好/ 的/ 图/ 分割/ 算法/ ,/ 是/ 在/ 云/ 计算环境/ 下/ 降低/ 图/ 并行计算/ 强/ 耦合/ 性/ 的/ 基础/ ,/ 但是/ 目前/ 的/ 图/ 分割/ 技术/ ,/ 难以/ 在/ 连通性/ 、/ 均衡性/ 和/ 时间/ 复杂度/ 等/ 方面/ 同时/ 达到/ 较/ 好/ 的/ 性能/ ./ (/ 2/ )/ 大规模/ 图/ 索引/ 结构/ ./ 大规模/ 图/ 的/ 数据管理/ ,/ 虽然/ 依靠/ 云/ 计算环境/ 的/ 分布式/ 并行处理/ 机制/ ,/ 可以/ 提高效率/ ,/ 但是/ 索引/ 的/ 加入/ ,/ 无疑/ 将/ 使/ 管理效率/ 有/ 一个/ 大幅度/ 的/ 提升/ ./ 目前/ 关于/ 分布式/ 图/ 数据/ 的/ 索引/ 机制/ ,/ 已经/ 有/ 成型/ 的/ 产品/ ,/ 但是/ 仍/ 处在/ 不断/ 探索/ 和/ 研究/ 过程/ 中/ ./ 而/ 针对/ 图/ 处理/ 的/ 索引/ ,/ 只有/ 部分/ 图/ 处理/ 进行/ 了/ 云/ 计算环境/ 下/ 的/ 索引/ 研究/ ,/ 如/ 最/ 短/ 路径/ 计算/ 等/ ,/ 相当/ 一部分/ 图/ 处理/ 方法/ 尚未/ 考虑/ 索引/ 机制/ ./ (/ 3/ )/ 查询处理/ 与/ 磁盘/ 存储/ ./ 在/ 云/ 计算环境/ 下/ 的/ 大规模/ 图/ 查询处理/ ,/ 正/ 处于/ 开发阶段/ ,/ 还有/ 很大/ 的/ 性能/ 提升/ 空间/ ,/ 而且/ 像子/ 图/ 挖掘/ 、/ 图/ 模式匹配/ 查询/ 等/ 复杂/ 应用/ ,/ 尚/ 没有/ 得到/ 很/ 好/ 的/ 解决方案/ ./ 此外/ ,/ 基于/ BSP/ 模型/ Pregel/ 、/ Hama/ 和/ Giraph/ 等/ 大规模/ 图/ 处理/ 系统/ ,/ 目前/ 均/ 基于/ 内存/ ,/ 限制/ 了/ 数据处理/ 规模/ ,/ 将/ 硬盘/ 存储/ 融入/ BSP/ 模型/ 并/ 对/ 磁盘/ IO/ 进行/ 有/ 针对性/ 的/ 优化/ ,/ 是/ 急需解决/ 的/ 问题/ ./ (/ 4/ )/ 消息/ 通信/ 优化/ ./ 在/ 云/ 计算环境/ 下/ 进行/ 大规模/ 图/ 处理/ 时/ ,/ 制约/ 系统/ 效率/ 的/ 重要/ 瓶颈/ 就是/ 消息/ 通信/ ,/ 特别/ 是/ 由于/ 存在/ 任务/ 间/ 的/ 耦合/ 性/ ,/ 大量/ 的/ 网络通信/ 使云/ 计算/ 的/ 效率/ 大打折扣/ ./ Google/ 、/ Yahoo/ 、/ 微软/ 等/ 开发/ 机构/ 对于/ 网络通信/ 的/ 优化/ 都/ 进行/ 了/ 探索/ 并/ 取得/ 了/ 一定/ 的/ 效果/ ,/ 但/ 目前/ 仍/ 只是/ 缓解/ 而/ 没有/ 从根本上/ 解决/ 瓶颈/ 问题/ ./ 对图/ 处理/ 应用/ ,/ 结合/ 图/ 分割/ 技术/ 以及/ 图/ 数据结构/ 的/ 特点/ ,/ 若能/ 进一步/ 降低/ 网络通信/ 开销/ ,/ 甚至/ 解决/ 瓶颈/ 问题/ ,/ 会/ 极大地提高/ 大规模/ 图/ 处理/ 效率/ ./ (/ 5/ )/ 容错/ 管理/ ./ 虽然/ 云/ 计算/ 系统/ 本身/ 拥有/ 较为/ 完备/ 的/ 容错/ 管理机制/ ,/ 但是/ 针对/ 需要/ 多次/ 迭代/ 、/ 运行/ 时间/ 过长/ 的/ 大规模/ 图/ 处理/ 而言/ ,/ 故障/ 恢复/ 的/ 代价/ 仍然/ 十分/ 昂贵/ ./ 而且/ ,/ 冗余/ 备份/ 与/ 系统/ 处理/ 效率/ 之间/ 的/ 矛盾/ ,/ 没有/ 得到/ 明确/ 的/ 解决/ ./ 

