Page1/ 非对称/ 多核/ 处理器/ 上/ 的/ 操作系统/ 集成/ 调度/ 陈锐忠/ 齐德昱/ 林伟伟/ 李剑/ (/ 华南理工大学/ 计算机系统/ 研究所/ 广州/ 510006/ )/ 摘要/ 相对/ 于/ 对称/ 多核/ 处理器/ ,/ 非对称/ 多核/ 处理器/ 具有/ 更/ 高/ 的/ 效能/ ,/ 将/ 成为/ 未来/ 并行/ 操作系统/ 中/ 的/ 主流/ 体系结构/ ./ 对于/ 非对称/ 多核/ 处理器/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 问题/ ,/ 现有/ 的/ 研究/ 假设/ 所有/ 核心/ 频率/ 恒定/ ,/ 缺乏/ 理论/ 分析/ ,/ 也/ 没有/ 考虑/ 算法/ 的/ 效能/ 和/ 通用性/ ./ 针对/ 该/ 问题/ ,/ 该文/ 首先/ 建立/ 非线性/ 规划/ 模型/ ,/ 分析/ 得出/ 全面/ 考虑/ 并行任务/ 同步/ 特性/ 、/ 核心/ 非/ 对称性/ 以及/ 核心/ 负载/ 的/ 调度/ 原则/ ./ 然后/ ,/ 基于/ 调度/ 原则/ 提出/ 一个/ 集成/ 调度/ 算法/ ,/ 该/ 算法/ 通过/ 集成/ 线程/ 调度/ 和/ 动态/ 电压/ 频率/ 调整/ 来/ 提高/ 效能/ ,/ 并/ 通过/ 参数/ 调整机制/ 实现/ 了/ 算法/ 的/ 通用性/ ./ 提出/ 的/ 算法/ 是/ 第一个/ 在/ 非对称/ 多核/ 处理器/ 上/ 结合/ 线程/ 调度/ 和/ 动态/ 电压/ 频率/ 调整/ 的/ 调度/ 算法/ ./ 实际/ 平台/ 上/ 的/ 实验/ 表明/ :/ 该/ 算法/ 可/ 适用/ 于/ 多种/ 环境/ ,/ 且/ 效能/ 比/ 其他/ 同类/ 算法/ 高/ 24/ %/ ~/ 50/ %/ ./ 关键词/ 绿色/ 计算/ ;/ 非对称/ 多核/ 处理器/ ;/ 操作系统/ 调度/ ;/ 并行/ 任务调度/ ;/ 动态/ 电压/ 频率/ 调整/ ;/ 负载/ 均衡/ 1/ 引言/ IT/ 行业/ 作为/ 全球/ 增长/ 最快/ 的/ 行业/ 之一/ ,/ 其/ 能耗/ 也/ 随着/ 行业/ 的/ 增长/ 而/ 不断/ 增长/ ./ 文献/ [/ 1/ ]/ 指出/ :/ 2008/ 年/ IT/ 设备/ 总共/ 消耗/ 8680/ 亿度/ 电/ ,/ 占/ 全球/ 总/ 耗电量/ 的/ 5.3/ %/ ;/ 按照/ 目前/ 的/ 增长/ 趋势/ ,/ 到/ 2025/ 年/ ,/ IT/ 行业/ 平均/ 能耗/ 会/ 达到/ 2006/ 年/ 的/ 5/ 倍/ ./ 能耗/ 问题/ 已/ 成为/ 信息系统/ 持续/ 发展/ 的/ 重大/ 障碍/ ./ 如何/ 提高/ 计算机/ 的/ 效能/ ,/ 实现/ 绿色/ 计算/ ,/ 是/ 当今/ 的/ 一个/ 研究/ 热点/ ./ 随着/ 芯片/ 集成/ 规模/ 极限/ 的/ 逼近/ 以及/ 能耗/ 和/ 成本/ 等/ 因素/ ,/ 多核/ 处理器/ 逐渐/ 占据/ 了/ 市场/ [/ 2/ ]/ ./ 相对/ 于/ 对称/ 多核/ 处理器/ (/ SymmetricMulti/ -/ coreProcessor/ ,/ SMP/ )/ ,/ 单一/ 指令集/ 非对称/ 多核/ 处理器/ (/ AsymmetricSingle/ -/ ISAMulti/ -/ coreProcessors/ ,/ AMP/ )/ 具有/ 更/ 高/ 的/ 效能/ ,/ 更/ 符合/ 绿色/ 计算/ 的/ 要求/ ,/ 将/ 成为/ 未来/ 的/ 主流/ [/ 3/ -/ 4/ ]/ ./ 现有/ 操作系统/ 调度/ 器/ 从/ 单核/ 处理器/ 发展/ 而/ 来/ ,/ 并/ 为/ SMP/ 做/ 了/ 相应/ 扩展/ ,/ 不能/ 发挥/ AMP/ 的/ 效能/ 优势/ ./ 这为/ 操作系统/ 调度/ 带来/ 了/ 新/ 的/ 机遇/ 和/ 挑战/ ./ 随着/ 多/ 核技术/ 的/ 发展/ ,/ 并行程序/ 日益/ 普及/ [/ 2/ ,/ 5/ ]/ ./ 由于/ AMP/ 上/ 每个/ 核心/ 支持/ 同一/ 指令集/ 结构/ ,/ 任务/ 可以/ 在/ 不同/ 核心/ 上/ 正确/ 执行/ ;/ 而/ 由于/ 核心/ 间/ 的/ 性能/ 异构/ 性/ ,/ 并行度/ 不同/ 的/ 任务/ 在/ 不同/ 核心/ 上/ 的/ 执行/ 效率/ 却是/ 不同/ 的/ ./ 如何/ 利用/ 并行任务/ 的/ 同步/ 特性/ 和/ AMP/ 的/ 非/ 对称性/ ,/ 实现/ 高效能/ 的/ 操作系统/ 调度/ ,/ 是/ 该/ 形势/ 下/ 的/ 一个/ 关键问题/ ./ 近年来/ 有/ 一些/ 研究/ 关注/ 这一/ 问题/ ,/ 但/ 都/ 假设/ 所有/ 核心/ 频率/ 恒定/ ,/ 没有/ 建模/ 分析/ 影响/ 调度/ 的/ 各个/ 因素/ ,/ 也/ 没有/ 考虑/ 算法/ 的/ 效能/ 和/ 通用性/ ,/ 不能/ 很/ 好地解决/ 该/ 问题/ ./ 其中/ :/ 文献/ [/ 6/ ]/ 没有/ 考虑/ 任务/ 的/ 同步/ 特性/ ;/ 文献/ [/ 7/ ]/ 需要/ 频繁/ 地/ 迁移/ 任务/ ,/ 从而/ 带来/ 巨大/ 开销/ ;/ 文献/ [/ 8/ ]/ 假设/ 系统/ 运行/ 的/ 线程/ 总数/ 不/ 大于/ 核心/ 总数/ ,/ 但/ 现实/ 中/ 这/ 一/ 假设/ 往往/ 难以/ 满足/ ./ 因此/ ,/ 本文/ 以/ 效能/ 和/ 通用性/ 为/ 目标/ ,/ 为/ AMP/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 问题/ 建立/ 了/ 非线性/ 规划/ 模型/ ,/ 分析/ 了/ 任务/ 的/ 同步/ 特性/ 和/ 核心/ 的/ 非/ 对称性/ ,/ 得出/ 调度/ 应/ 遵循/ 4/ 个/ 原则/ :/ (/ 1/ )/ 同一/ 任务/ 的/ 各个/ 线程/ 在/ 同类/ 核心/ 上/ 运行/ ,/ 但/ 不/ 在/ 同一个/ 核心/ 上/ 运行/ ./ (/ 2/ )/ 各/ 核心/ 负载/ 均衡/ ./ (/ 3/ )/ 协同/ 调度/ 同一/ 任务/ 的/ 各个/ 线程/ ./ (/ 4/ )/ 使/ 参与/ 协同/ 调度/ 的/ 各个/ 核心/ 频率/ 相等/ ./ 在/ 此基础/ 上/ ,/ 本文/ 提出/ 一个/ 集成/ 调度/ 算法/ ,/ 其/ 特点/ 如下/ :/ (/ 1/ )/ 集成/ 线程/ 调度/ 和/ 核心/ 动态/ 电压/ 频率/ 调整/ (/ DynamicVoltageandFrequencyScaling/ ,/ DVFS/ )/ ,/ 保证/ 4/ 个/ 调度/ 原则/ ,/ 提高/ 系统/ 效能/ ./ (/ 2/ )/ 提供/ 参数/ 调整机制/ ,/ 以/ 适应/ 多种/ 机器配置/ ./ (/ 3/ )/ 通过/ 状态/ 监控/ 机制/ 和/ 任务/ 集合/ 分解/ 降低/ 调度/ 开销/ ./ 据/ 我们/ 所知/ ,/ 还/ 没有/ 研究/ 对/ 该/ 问题/ 进行/ 建模/ 分析/ ,/ 本文/ 是/ 第一个/ 在/ AMP/ 上/ 结合/ 线程/ 调度/ 和/ DVFS/ 的/ 算法/ ./ 本文/ 在/ Linux2/ ./ 6.27/ 和/ 多种/ 配置/ 的/ AMDOpteron2384/ 上/ 对/ 算法/ 的/ 效能/ 、/ 通用性/ 和/ 开销/ 进行/ 比较/ 分析/ ,/ 实验/ 证明/ 了/ 该/ 算法/ 的/ 有效性/ ./ 本文/ 第/ 2/ 节对/ 问题/ 进行/ 描述/ 和/ 建模/ 分析/ ,/ 给出/ 调度/ 的/ 目标/ 和/ 原则/ ;/ 第/ 3/ 节/ 详细描述/ 集成/ 调度/ 算法/ ;/ 第/ 4/ 节对/ 所/ 提出/ 的/ 算法/ 进行/ 实验/ 和/ 比较/ 分析/ ;/ 第/ 5/ 节/ 介绍/ 相关/ 研究/ ;/ 最后/ 是/ 总结/ 以及/ 对/ 未来/ 工作/ 的/ 展望/ ./ 2/ 问题/ 描述/ 与/ 建模/ 2.1/ 问题/ 描述/ 题/ ,/ 关注/ 的/ 目标/ 如下/ :/ 本文/ 研究/ AMP/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 问/ 效能/ :/ 最小化/ 系统/ 的/ EDP/ (/ EnergyDelayProd/ -/ uct/ )/ [/ 9/ ]/ ./ EDP/ 是/ 系统/ 的/ 能耗/ 与/ 执行/ 效率/ 之/ 比/ ,/ EDP/ 越低/ ,/ 系统/ 效能/ 越高/ ./ 通用性/ :/ 适用/ 于/ 核心/ 性能/ 差异/ 程度/ 不同/ 的/ AMP/ 平台/ ./ 下面/ 通过/ 一个/ 简单/ 的/ 例子/ 来/ 说明/ 该/ 问题/ ./ 示例/ 中/ 的/ AMP/ 包含/ 8/ 个/ 核心/ (/ 如图/ 1/ ,/ 图/ 2/ )/ :/ Core1/ ~/ Core3/ 是/ 快/ 核心/ ,/ Core4/ ~/ Core8/ 是/ 慢/ 核心/ ,/ 快/ 核心/ 的/ 计算能力/ 是/ 慢/ 核心/ 的/ 2/ 倍/ ./ 该/ 平台/ 上/ 运行/ 4/ 个/ 任务/ (/ P0/ ,/ P1/ ,/ P2/ 和/ P3/ )/ ,/ 每个/ 任务/ 包含/ 2/ 个/ 线程/ :/ T1/ 和/ Page3T2/ 属于/ P0/ ,/ T3/ 和/ T4/ 属于/ P1/ ,/ T5/ 和/ T6/ 属于/ P2/ ,/ T7/ 和/ T8/ 属于/ P3/ ./ 每个/ 线程/ 优先级/ 相等/ ,/ 属于/ 同一/ 任务/ 的/ 2/ 个/ 线程/ 每隔/ 2/ 个/ 单位/ 时间/ 就要/ 同步/ 一次/ ,/ 然后/ 继续/ 运行/ ./ 文献/ [/ 7/ ]/ 表明/ :/ 由于/ parallel/ -/ for/ 、/ fork/ -/ join/ 等/ 结构/ 在/ 并行/ 编程/ 中/ 的/ 广泛/ 使用/ ,/ 并且/ 程序员/ 倾向/ 于/ 平衡/ 各个/ 并行/ 线程/ 的/ 负载/ ,/ 同一/ 任务/ 的/ 各个/ 线程/ 计算/ 量/ 趋向于/ 相等/ ./ 图/ 1/ 给出/ 一个/ 现有/ 操作系统/ 中/ 的/ 线程/ 调度/ 示例/ ./ 现有/ 操作系统/ 调度/ 器/ 没有/ 考虑/ 核心/ 的/ 非/ 对称性/ ,/ 将/ 线程/ 随机/ 映射/ 到/ 低/ 负载/ 的/ 核心/ 上/ ,/ 这/ 不/ 符合/ 绿色/ 计算/ 的/ 要求/ :/ 当/ 属于/ 同一/ 任务/ 的/ 几个/ 线程/ 分配/ 到/ 性能/ 不同/ 的/ 核心/ 上/ 执行/ 时/ ,/ 将/ 导致/ 快/ 核心/ 上/ 的/ 线程/ 等待/ 慢/ 核心/ 上/ 的/ 线程/ 同步/ 的/ 情况/ ,/ 此时/ 快/ 核心/ 仍/ 在/ 消耗/ 能量/ ,/ 从而/ 降低/ 效能/ (/ 如图/ 2/ 中/ T1/ 和/ T2/ 同/ 属于/ P0/ ,/ 却/ 分别/ 映射/ 到/ 异类/ 核心/ Core1/ 和/ Core4/ 上/ ,/ 导致/ 等待/ ;/ P1/ 和/ P2/ 亦然/ )/ ./ 图/ 2/ 给出/ 了/ 理想/ 的/ 操作系统/ 调度/ 示例/ ./ (/ 1/ )/ 它/ 将/ 属于/ 同一/ 任务/ 的/ 线程/ 调度/ 到/ 类型/ 相同/ 的/ 核心/ 上/ 运行/ ,/ 从而/ 避免/ 了/ 线程/ 空等/ 的/ 情况/ ,/ 并/ 将/ 节省下来/ 的/ CPU/ 时间/ 用于/ 调度/ 其他/ 线程/ (/ 如图/ 2/ 中/ 的/ Tx/ )/ ,/ 从而/ 提高/ 了/ 效能/ ./ (/ 2/ )/ 当/ 无法/ 保证/ 同一/ 任务/ 的/ 所有/ 线程/ 在/ 同类/ 核心/ 上/ 执行/ 时/ ,/ 它/ 将/ 运行/ 这些/ 线程/ 的/ 快/ 核心/ 频率/ 降低/ 到/ 与/ 慢/ 核心/ 相等/ (/ 如图/ 2/ 中/ 的/ Core3/ )/ ,/ 在/ 不/ 影响/ 任务/ 完成/ 时间/ 的/ 情况/ 下/ 降低/ 了/ 能耗/ ./ 本文/ 提出/ 的/ 调度/ 算法/ 实现/ 了/ 这种/ 调度/ ./ 下/ 一节/ 将/ 对/ AMP/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 问题/ 进行/ 建模/ 分析/ ./ 2.2/ 调度/ 模型/ 我们/ 可以/ 为/ AMP/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 问题/ 建立/ 非线性/ 规划/ 模型/ :/ 设/ T/ =/ T1/ ,/ T2/ ,/ …/ ,/ T/ {/ n/ 个/ 线程/ 的/ 任务/ ,/ 所有/ 线程/ 每隔/ 一定/ 时间/ 间隔/ 需/ 进行/ 同步/ ,/ 线程/ Ti/ 可/ 根据/ 同步/ 间隔/ 分为/ Ni/ 个/ 阶段/ T1i/ ,/ T2i/ ,/ …/ ,/ TNi/ {/ 操作/ ,/ Tki/ / c/ 表示/ Tki/ 计算/ 操作/ 的/ 工作量/ ,/ Tki/ / st/ 表示/ Tki/ 同步操作/ 所/ 需/ 的/ 时间/ ./ 根据/ 文献/ [/ 7/ ]/ ,/ 本文/ 假设/ 同一/ 任务/ 的/ 各个/ 线程/ 具有/ 相等/ 的/ 计算/ 量/ ./ C/ =/ C1/ ,/ C2/ ,/ …/ ,/ C/ {/ 个/ 核心/ 的/ 单位/ 时间/ 计算能力/ 为/ Ci/ ./ 为了/ 避免/ 频繁/ 上下文/ 切换/ 带来/ 的/ 巨大/ 开销/ ,/ 我们/ 假设/ 式/ (/ 1/ )/ 成立/ :/ 一个/ 任务/ 包含/ 的/ 线程/ 数/ ,/ 不/ 大于/ 物理/ 核心/ 总数/ ./ T/ 的/ 调度/ 可/ 抽象/ 为/ 一个/ 时空/ 映射/ M/ =/ (/ s/ ,/ t/ )/ ,/ 其中/ s/ 是/ 一个/ 空间/ 映射/ ,/ 表示/ 将/ T/ 的/ 各个/ 阶段/ 映射/ 到/ 核心/ 上/ ;/ t/ 是/ 一个/ 时间/ 映射/ ,/ 表示/ 将/ T/ 的/ 各个/ 阶段/ 映射/ 到/ 核心/ 的/ 时间/ 片上/ ./ 设/ t/ (/ Tmk/ )/ 表示/ Tmk/ 的/ 开始/ 时间/ ,/ 即/ Tmk/ 分配/ 到/ 的/ 时间/ 片/ ,/ 由/ 任务/ 执行/ 的/ 时序/ 关系/ ,/ 只有/ 所有/ 前驱/ 阶段/ 都/ 完成/ 了/ ,/ 一个/ 新/ 阶段/ 才能/ 开始/ ,/ 即式/ (/ 2/ )/ 成立/ ,/ 其中/ Tmk/ / cTmk/ 的/ 核心/ 的/ 性能/ Ci/ 相关/ ./ TimeM/ (/ T/ )/ 表示/ 映射/ M/ 下/ T/ 的/ 完成/ 时间/ ,/ 它/ 等于/ T/ 最后/ 阶段/ 中/ 运行/ 最慢/ 线程/ 的/ 完成/ 时间/ ,/ 满足/ 式/ (/ 3/ )/ ./ EDPM/ (/ T/ )/ 定义/ 为/ 系统/ 的/ 能耗/ 与/ 执行/ 效率/ 之/ 比/ [/ 9/ ]/ ,/ 即式/ (/ 4/ )/ ,/ 其中/ Energy/ _/ Con/ -/ sumed/ 表示/ 系统/ 的/ 总/ 能耗/ ,/ Instructions/ _/ per/ _/ Second/ 表示/ 单位/ 时间/ 执行/ 的/ 指令/ 数/ ,/ Averge/ _/ Power/ 表示/ 系统/ 的/ 平均功率/ ,/ Total/ _/ Instructions/ (/ T/ )/ 表示/ 任务/ T/ 指令/ 总数/ ./ 因此/ 我们/ 可得/ 该/ 问题/ 的/ 非线性/ 规划/ 模型/ 如下/ :/ MinimizeEDPM/ (/ T/ )/ 但/ 在/ 现实/ 中/ 由于/ 缺乏/ Tmi/ / c/ 和/ Tmi/ / st/ 的/ 先验/ 知识/ ,/ 加上/ 求解/ 该/ 问题/ 带来/ 的/ 开销/ ,/ 无法/ 求得/ 该/ 问题/ 的/ 最优/ 解/ ./ 因此/ 我们/ 采用/ 启发式/ 算法/ 来求/ 问题/ 的/ 近/ 优解/ ./ 由于/ 式/ (/ 4/ )/ 中/ 的/ Total/ _/ Instructions/ (/ T/ )/ 是/ 定值/ ,/ 故/ 最小化/ EDPM/ (/ T/ )/ 等价/ 于/ 最小化/ Averge/ _/ Power/ 和/ TimeM/ (/ T/ )/ ./ Averge/ _/ Power/ 可/ 通过/ DVFS/ 技术/ [/ 10/ ]/ 动态/ 调节/ ,/ 文献/ [/ 4/ ]/ 预测/ 未来/ 的/ AMP/ 将/ 由/ 少量/ 复杂/ s/ / t/ / T/ / C/ 烄/ maxkt/ (/ Tmk/ )/ +/ Tmk/ / cfor0/ </ k/ ,/ l/ </ Tandm/ </ nTimeM/ (/ T/ )/ =/ maxkt/ (/ TNkk/ )/ +/ TNkk/ / c/ 烅/ EDPM/ (/ T/ )/ =/ Energy/ _/ Consumed/ =/ Averge/ _/ Power/ ×/ Time2M/ (/ T/ )/ 烆/ Page4/ 核心/ (/ 快/ 核心/ )/ 和/ 大量/ 简单/ 核心/ (/ 慢/ 核心/ )/ 组成/ ,/ 而/ 出于/ 成本/ 、/ 芯片/ 面积/ 等/ 方面/ 的/ 考虑/ ,/ 简单/ 核心/ 很/ 可能/ 不/ 具备/ DVFS/ 功能/ ./ 故/ 本文/ 假设/ 简单/ 核心/ 的/ 功率/ 固定/ ,/ Averge/ _/ Power/ 的/ 变化/ 来源于/ 复杂/ 核心/ 功率/ 的/ 变化/ (/ 通过/ DVFS/ )/ ./ 下面/ 我们/ 研究/ 在/ 操作系统/ 中/ 通过/ 线程/ 调度/ 和/ 快/ 核心/ 的/ DVFS/ 来/ 降低/ EDPM/ (/ T/ )/ ./ 由式/ (/ 2/ )/ ,/ (/ 3/ )/ 可/ 推出/ 等式/ (/ 5/ )/ ./ TimeM/ (/ T/ )/ =/ ∑/ p/ 其中/ p/ 是/ 任务/ T/ 的/ 阶段/ 数目/ ,/ 由/ T/ 本身/ 属性/ 决定/ ,/ 无法/ 通过/ 调度/ 优化/ ./ 结合/ 式/ (/ 4/ )/ ,/ 可见/ AMP/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 应/ 遵循/ 的/ 原则/ 如下/ :/ (/ 1/ )/ 同一/ 任务/ 的/ 各个/ 线程/ 在/ 同类/ 核心/ 上/ 运行/ ,/ 但/ 不/ 在/ 同一个/ 核心/ 上/ 运行/ ./ 同类/ 核心/ 指/ 性能/ 相等/ 的/ 核心/ ./ 由式/ (/ 2/ )/ ,/ (/ 3/ )/ 和/ 等式/ (/ 5/ )/ 可知/ 任务/ 完成/ 时间/ 取决于/ 运行/ 最慢/ 的/ 线程/ ,/ 如果/ 将/ 同一/ 任务/ 的/ 各个/ 线程/ 放到/ 性能/ 不同/ 类/ 的/ 核心/ 上/ 运行/ ,/ 即/ Tmk/ / c/ 核心/ 上/ 的/ 线程/ 同步/ 的/ 情况/ (/ 如图/ 1/ 的/ 示例/ )/ ./ 而/ 当/ 同一/ 任务/ 的/ 各个/ 线程/ 放在/ 同一/ 核心/ 上/ 运行/ 时/ ,/ 任务/ 变成/ 串行/ 执行/ ,/ 完成/ 时间/ TimeM/ (/ T/ )/ =/ ∑/ pk/ / {/ Tjk/ / cCi/ +/ Tj/ 该/ 原则/ ./ (/ 2/ )/ 各/ 核心/ 负载/ 均衡/ ./ 由式/ (/ 2/ )/ 可知/ 任务/ 每一/ 阶段/ 的/ 完成/ 时间/ 取决于/ 运行/ 最慢/ 的/ 线程/ ./ 当/ 负载/ 不/ 均衡/ 时/ ,/ 轻/ 负载/ 核心/ 将/ 空转/ ,/ 而重/ 负载/ 核心/ 的/ 调度/ 周期/ 将/ 延长/ ,/ 这/ 降低/ 了/ 系统/ 的/ 效能/ ,/ 并/ 使本/ 阶段/ 的/ Tmk/ / st/ 和/ 下一阶段/ 的/ t/ (/ Tm/ +/ 1k/ )/ 增大/ ,/ 进一步/ 增加/ 了/ 运行/ 最慢/ 的/ 线程/ 的/ 完成/ 时间/ ./ 因此/ 各/ 核心/ 应/ 保持/ 负载/ 均衡/ ./ (/ 3/ )/ 协同/ 调度/ 同一/ 任务/ 的/ 各个/ 线程/ ./ 协同/ 调度/ (/ co/ -/ schedule/ )/ 指/ 保证/ 属于/ 同一/ 任务/ 的/ 所有/ 线程/ 同时/ 运行/ ;/ 独立/ 调度/ 指/ 调度/ 时/ 把/ 线程/ 看成/ 一个/ 独立/ 实体/ 单独/ 运行/ ,/ 不/ 考虑/ 该/ 任务/ 的/ 其他/ 线程/ ./ 协同/ 调度/ 在/ 减少/ 线程/ 同步/ 时间/ 的/ 同时/ ,/ 将/ 带来/ 优先级/ 反转/ 、/ 处理器/ 碎片/ 等/ 问题/ [/ 11/ ]/ ,/ 增加/ 开销/ ./ 同一/ 任务/ 的/ 各个/ 线程/ 计算/ 量/ 接近/ [/ 7/ ]/ ,/ 并且/ 同步/ 较/ 多/ ,/ 需要/ 协同/ 调度/ 来/ 减少/ Tmk/ / st/ ./ 串行/ 任务/ 可/ 看成/ 是/ 单线程/ 任务/ ,/ 此时/ 协同/ 调度/ 等同于/ 独立/ 调度/ ./ 该/ 原则/ 在/ 减少/ 同步/ 时间/ 的/ 同时/ ,/ 使/ 没/ 参与/ 协同/ 调度/ 的/ 核心/ 可/ 运行/ 其他/ 任务/ ,/ 这/ 避免/ 了/ 协同/ 调度/ 的/ 碎片/ 问题/ [/ 11/ ]/ ,/ 提高/ 了/ 系统/ 效能/ ./ (/ 4/ )/ 使/ 参与/ 协同/ 调度/ 的/ 各个/ 核心/ 频率/ 相等/ ./ 随着/ 多/ 核技术/ 的/ 发展/ ,/ 并行程序/ 日益/ 普及/ [/ 2/ ,/ 5/ ]/ ,/ 由于/ 系统/ 包括/ 少量/ 快/ 核心/ 和/ 大量/ 慢/ 核心/ [/ 4/ ]/ ,/ 容易/ 出现/ 多数/ 任务/ 的/ 线程/ 数/ 超过/ 快/ 核心/ 个数/ 的/ 情况/ ,/ 此时/ 原则/ (/ 1/ )/ 和/ (/ 2/ )/ 将/ 无法/ 兼顾/ ,/ 这/ 无法/ 通过/ 纯粹/ 的/ 线程/ 调度/ 来/ 解决/ ./ 由式/ (/ 2/ )/ 可知/ 任务/ 每一/ 阶段/ 的/ 完成/ 时间/ 取决于/ 运行/ 最慢/ 的/ 线程/ ./ 因此/ 当/ 异类/ 核心/ 同时/ 参与/ 协同/ 调度/ 时/ ,/ 我们/ 通过/ DVFS/ 将/ 快/ 核心/ 频率/ 降低/ 到/ 与/ 慢/ 核心/ 相等/ ,/ 以/ 避免/ 快/ 核心/ 线程/ 的/ 等待/ ,/ 在/ 保证/ TimeM/ (/ T/ )/ 不变/ 的/ 同时/ 降低/ Averge/ _/ Power/ ,/ 从而/ 降低/ EDPM/ (/ T/ )/ ./ 3/ 集成/ 调度/ 算法/ 文献/ [/ 4/ ]/ 表明/ :/ 由/ 少量/ 快/ 核心/ 和/ 大量/ 慢/ 核心/ 组成/ 的/ AMP/ 具有/ 很/ 好/ 的/ 效能/ ./ 因此/ 本文/ 假设/ AMP/ 上/ 有/ 两类/ 核心/ :/ 少量/ 快/ 核心/ 和/ 大量/ 慢/ 核心/ ./ 如何/ 推广/ 到/ n/ 种/ 核心/ 是/ 我们/ 下/ 一步/ 研究/ 的/ 内容/ ./ 该/ 算法/ 由/ 4/ 个/ 模块/ 组成/ :/ 状态/ 监控/ 机制/ 、/ 重/ 调度/ 、/ 负载/ 均衡/ 、/ 任务/ 执行/ ,/ 执行/ 模型/ 如图/ 3/ 所示/ ./ 其中/ 状态/ 监控/ 机制/ 观察/ 每个/ 任务/ 的/ 线程/ 数/ ,/ 当/ 任务/ 线程/ 数/ 发生变化/ 时/ ,/ 调用/ 负载/ 均衡/ 模块/ ;/ 当/ 某个/ 任务/ 的/ 类型/ (/ 详见/ 3.1/ 节/ )/ 发生变化/ 时/ ,/ 调用/ 重/ 调度/ 模块/ 调整/ 各个/ 核心/ 的/ 任务/ 队列/ ./ 任务/ 执行/ 模块/ 则/ 负责/ 同步/ 执行/ 同一/ 任务/ 的/ 所有/ 线程/ ./ 3.1/ 状态/ 监控/ 机制/ 在/ 运行/ 过程/ 中/ ,/ 任务/ 的/ 线程/ 数将/ 动态变化/ [/ 7/ -/ 8/ ]/ ./ 本文/ 根据/ 任务/ 当前/ 运行/ 的/ 线程/ 数/ 把/ 它们/ 分成/ 3/ 类/ ,/ 定义/ 如下/ :/ FCT/ =/ P/ |/ TLP/ (/ P/ )/ / N/ (/ FCSCT/ =/ P/ |/ N/ (/ FC/ )/ </ TLP/ (/ P/ )/ / N/ (/ SCACT/ =/ P/ |/ TLP/ (/ P/ )/ >/ N/ (/ SCPage5/ 其中/ :/ P/ 表示/ 一个/ 任务/ ,/ TLP/ (/ P/ )/ 表示/ P/ 当前/ 运行/ 的/ 线程/ 数/ ;/ N/ (/ S/ )/ 表示/ 核心/ 集合/ S/ 包含/ 的/ 核心/ 数目/ ;/ FC/ 表示/ 快/ 核心/ 集合/ ;/ SC/ 表示/ 慢/ 核心/ 集合/ ./ 根据/ 调度/ 原则/ 1/ )/ 、/ 2/ )/ 和/ 3/ )/ ,/ 属于/ FCT/ 的/ 任务/ 可以/ 把/ 所有/ 线程/ 映射/ 到/ 快/ 核心/ 上/ ,/ 因此/ 适合/ 在/ 快/ 核心/ 上/ 运行/ ;/ 属于/ SCT/ 的/ 任务/ 线程/ 数/ 介于/ 快/ 核心/ 数目/ 和/ 慢/ 核心/ 数目/ 之间/ ,/ 没法/ 把/ 所有/ 线程/ 映射/ 到/ 快/ 核心/ 上/ ,/ 只好/ 映射/ 到/ 慢/ 核心/ 上/ ;/ 属于/ ACT/ 的/ 任务/ 线程/ 数/ 较大/ ,/ 只能/ 同时/ 映射/ 到/ 快/ 核心/ 和/ 慢/ 核心/ 上/ ,/ 因此/ 可/ 在/ 低/ 负载/ 的/ 核心/ (/ 快/ 核心/ 和/ 慢/ 核心/ 都/ 可以/ )/ 上/ 运行/ ./ 任务/ 迁移/ 需要/ 一定/ 的/ 开销/ [/ 6/ ]/ ,/ 应/ 尽量避免/ ./ 状态/ 监控/ 机制/ 是/ 控制/ 任务/ 迁移/ 的/ 有效/ 手段/ ,/ 它/ 在线/ 监测/ 各个/ 任务/ 当前/ 包含/ 的/ 可/ 运行/ 线程/ 数/ ,/ 当/ 任务/ 线程/ 数/ 发生变化/ 时/ ,/ 它/ 调用/ 负载/ 均衡/ 模块/ 调整/ 核心/ 的/ 运行/ 队列/ ;/ 当/ 任务/ 的/ 线程/ 数/ 变化/ 触发/ 了/ 类型/ 变化/ 时/ (/ 例如/ 从/ FCT/ 变成/ SCT/ )/ ,/ 它/ 调用/ 重/ 调度/ 模块/ 对/ 该/ 任务/ 的/ 线程/ 进行/ 重新/ 映射/ ./ 算法/ 伪/ 代码/ 描述/ 如下/ ./ 算法/ 1/ ./ 状态/ 监控/ 机制/ ./ 输入/ :/ 任务/ P/ 输出/ :/ 无/ if/ (/ 任务/ P/ 的/ 线程/ 数/ 发生变化/ )/ {/ if/ (/ PreType/ (/ P/ )/ !/ =/ Type/ (/ P/ )/ )/ {/ // // P/ 的/ 类型/ 发生变化/ }/ else/ {/ }/ }/ 3.2/ 负载/ 均衡/ 对于/ 调度/ 原则/ 2/ )/ ,/ 由于/ 同类/ 核心/ 属于/ 对称/ 多核/ 处理器/ ,/ 可/ 使用/ 现有/ 操作系统/ 的/ 负载/ 均衡/ 算法/ ,/ 只/ 需要/ 加上/ 调度/ 原则/ 1/ )/ 作为/ 限制/ ;/ 本文/ 主要/ 关注/ 异类/ 核心/ 间/ 的/ 负载/ 均衡/ ./ 为了/ 实现/ 非对称/ 多核/ 处理器/ 上/ 的/ 负载/ 均衡/ —/ —/ —/ 核心/ 的/ 负载/ 与其/ 计算能力/ 成正比/ [/ 6/ ]/ ,/ 本文/ 定义/ SF/ (/ Ci/ )/ 为/ 核心/ Ci/ 的/ 比例/ 系数/ (/ ScaledFactor/ ,/ SF/ )/ ,/ 即/ 核心/ Ci/ 当前/ 频率/ 与/ 平台/ 最低/ 核心/ 频率/ 之比/ ./ 设/ Load/ (/ Cj/ )/ 表示/ 核心/ Cj/ 的/ 负载/ (/ 在/ Linux/ 中/ 可/ 直接/ 读取/ 队列/ 的/ 成员/ 变量/ load/ 得到/ )/ ,/ 核心/ 集合/ S/ 的/ 平均/ 负载/ AvgLoad/ (/ S/ )/ 定义/ 如式/ (/ 7/ )/ ./ 当式/ (/ 8/ )/ 成立/ 时/ ,/ 调度/ 原则/ 2/ )/ 成立/ ./ 其中/ α/ 用于/ 调整/ 负载/ 均衡/ ,/ α/ 趋向于/ 0/ 时/ ,/ 算法/ 对/ 负载/ 均衡/ 要求/ 严格/ ;/ α/ 趋向于/ 1/ 时/ ,/ 算法/ 可/ 容许/ 负载/ 不/ 均衡/ ./ AvgLoad/ (/ S/ )/ =/ AvgLoad/ (/ FC/ )/ ∈/ (/ 1/ -/ α/ )/ ×/ AvgLoad/ (/ SC/ )/ ,/ 1/ 负载/ 均衡/ 模块/ 主要/ 在/ 核心/ 负载/ 发生变化/ 时/ 调用/ ,/ 基本/ 思想/ 是/ 通过/ 快/ 、/ 慢/ 核心/ 间/ 的/ 线程/ 迁移/ 使式/ (/ 8/ )/ 成立/ ./ 为了/ 提高效率/ ,/ 算法/ 对/ 任务/ 集合/ 进行/ 分解/ —/ —/ —/ 为/ 每种/ 类型/ 的/ 核心/ S/ (/ 本文/ 为/ FC/ 和/ SC/ )/ 维护/ 3/ 个/ 任务/ 集合/ :/ set1/ (/ S/ )/ ,/ set2/ (/ S/ )/ 和/ set3/ (/ S/ )/ ./ set2/ (/ FC/ )/ =/ set2/ (/ SC/ )/ ,/ 存放/ 属于/ ACT/ 的/ 任务/ ./ set1/ (/ S/ )/ 存放/ 有/ 线程/ 在/ 核心/ 集合/ S/ 上/ 运行/ 的/ SCT/ 类/ 的/ 任务/ ,/ set3/ (/ S/ )/ 存放/ 有/ 线程/ 在/ 核心/ 集合/ S/ 上/ 运行/ 的/ FCT/ 类/ 的/ 任务/ ./ 当快/ 核心/ 负载/ 过高时/ ,/ 算法/ 按/ set1/ (/ FC/ )/ →/ set2/ (/ FC/ )/ →/ set3/ (/ FC/ )/ 的/ 次序/ 选择/ 任务/ 迁移/ 到/ 慢/ 核心/ 上/ ;/ 当慢/ 核心/ 负载/ 过高时/ ,/ 算法/ 按/ set3/ (/ SC/ )/ →/ set2/ (/ SC/ )/ →/ set1/ (/ SC/ )/ 的/ 次序/ 选择/ 任务/ 迁移/ 到/ 快/ 核心/ 上/ ./ 算法/ 伪/ 代码/ 描述/ 如下/ ./ 算法/ 2/ ./ 负载/ 均衡/ ./ 输入/ :/ 无/ 输出/ :/ 无/ if/ (/ AvgLoad/ (/ FC/ )/ >/ AvgLoad/ (/ SC/ )/ // (/ 1/ -/ α/ )/ )/ {/ while/ (/ AvgLoad/ (/ FC/ )/ >/ AvgLoad/ (/ SC/ )/ // (/ 1/ -/ α/ )/ )/ {/ // // 快/ 核心/ 负载/ 过高/ }/ }/ elseif/ (/ AvgLoad/ (/ FC/ )/ </ AvgLoad/ (/ SC/ )/ / (/ 1/ -/ α/ )/ )/ {/ // // 慢/ 核心/ 负载/ 过高/ while/ (/ AvgLoad/ (/ FC/ )/ </ AvgLoad/ (/ SC/ )/ / (/ 1/ -/ α/ )/ )/ {/ Page6/ }/ }/ 3.3/ 重/ 调度/ 根据/ 调度/ 原则/ 1/ )/ 和/ 2/ )/ ,/ 重/ 调度/ 模块/ 的/ 基本/ 思想/ 是/ 在/ 兼顾/ 负载/ 均衡/ 的/ 情况/ 下/ ,/ 将/ 属于/ FCT/ 的/ 任务/ 的/ 各个/ 线程/ 映射/ 到/ 快/ 核心/ 上/ ,/ 将/ 属于/ SCT/ 的/ 任务/ 的/ 各个/ 线程/ 映射/ 到/ 慢/ 核心/ 上/ ,/ 将/ 属于/ ACT/ 的/ 任务/ 的/ 各个/ 线程/ 映射/ 到/ 低/ 负载/ 的/ 核心/ 上/ ./ 算法/ 伪/ 代码/ 描述/ 如下/ ./ 算法/ 3/ ./ 重/ 调度/ ./ 输入/ :/ 任务/ P/ 输出/ :/ 无/ 将/ P/ 的/ 线程/ 移出/ 各/ 核心/ 的/ 运行/ 队列/ ,/ 并/ 更新/ AvgLoad/ (/ FC/ )/ if/ (/ Type/ (/ P/ )/ =/ FCT/ )/ {/ AC/ =/ FC/ 中/ TLP/ (/ P/ )/ 个/ 负载/ 最轻/ 的/ 核心/ ;/ }/ elseif/ (/ Type/ (/ P/ )/ =/ SCT/ )/ {/ AC/ =/ SC/ 中/ TLP/ (/ P/ )/ 个/ 负载/ 最轻/ 的/ 核心/ ;/ }/ else/ {/ AC/ =/ 所有/ 核心/ 中/ TLP/ (/ P/ )/ 个/ 负载/ 最轻/ 的/ 核心/ ;/ }/ 将/ P/ 包含/ 的/ 可/ 运行/ 线程/ 分别/ 映射/ 到/ AC/ 的/ 每个/ 核心/ 上/ ;/ 更新/ AvgLoad/ (/ FC/ )/ 和/ AvgLoad/ (/ SC/ )/ ;/ balance/ (/ )/ ;/ // // 负载/ 均衡/ 3.4/ 任务/ 执行/ 我们/ 将/ 参与/ 协同/ 调度/ 的/ 核心/ 分成/ 发起者/ 和/ 协作者/ ./ 设/ CT/ (/ Ci/ )/ 表示/ 核心/ Ci/ 正在/ 运行/ 的/ 线程/ ,/ 算法/ 操作/ 如下/ :/ 若/ CT/ (/ Ci/ )/ 属于/ 一个/ 多线程/ 程序/ ,/ Ci/ 成为/ 发起者/ ,/ 发送/ 核心/ 间/ 中断/ 到/ 其他/ 核心/ ,/ 收到/ 中断/ 的/ 核心/ (/ 成为/ 协作者/ )/ 将/ 执行/ 与/ CT/ (/ Ci/ )/ 同属/ 一个/ 任务/ 的/ 其他/ 线程/ ;/ 否则/ CT/ (/ Ci/ )/ 单独/ 运行/ ./ 根据/ 调度/ 原则/ 4/ )/ ,/ 当快/ 、/ 慢/ 核心/ 同时/ 参与/ 协同/ 调度/ 时/ ,/ 算法/ 将/ 快/ 核心/ 频率/ 降低/ 到/ 与/ 慢/ 核心/ 相等/ ./ 当/ TLP/ (/ CT/ (/ Ci/ )/ )/ 小于/ 核心/ 总数/ 时/ ,/ 没/ 参与/ 协同/ 调度/ 的/ 核心/ 可/ 运行/ 其他/ 任务/ ,/ 这/ 避免/ 了/ 协同/ 调度/ 的/ 碎片/ 问题/ [/ 11/ ]/ ,/ 提高/ 了/ 系统/ 效能/ ./ 算法/ 伪/ 代码/ 描述/ 如下/ ./ 算法/ 4/ ./ 协同/ 调度/ 的/ 发起者/ 及/ 独立/ 调度/ ./ 输入/ :/ 核心/ Ci/ 输出/ :/ 无/ if/ (/ CT/ (/ Ci/ )/ 属于/ 多线程/ 程序/ )/ {/ if/ (/ Ci/ ∈/ FC/ )/ {/ // // 根据/ 调度/ 原则/ 4/ )/ 调整/ 核心/ 频率/ if/ (/ Type/ (/ CT/ (/ Ci/ )/ )/ !/ =/ FCT/ )/ {/ }/ Threads/ =/ 与/ CT/ (/ Ci/ )/ 同属/ 一个/ 任务/ 的/ 线程/ 集合/ ;/ cores/ =/ Threads/ 所在/ 的/ 核心/ 集合/ ;/ for/ (/ cores/ 中/ 的/ 每个/ 核心/ C/ )/ {/ // // 发送/ 核心/ 间/ 中断/ 到/ cores/ ,/ 以/ 同步/ 执行/ Threads/ ;/ }/ }/ else/ {/ CT/ (/ Ci/ )/ 在/ Ci/ 上/ 执行/ ;/ }/ 算法/ 5/ ./ 协作者/ ./ 输入/ :/ 核心/ C/ ,/ 线程/ 集/ Threads/ 输出/ :/ 无/ T/ =/ C/ 上/ 属于/ Threads/ 的/ 线程/ ;/ if/ (/ C/ ∈/ FC/ )/ {/ // // 根据/ 调度/ 原则/ 4/ )/ 调整/ 核心/ 频率/ if/ (/ Type/ (/ T/ )/ !/ =/ FCT/ )/ {/ }/ elseif/ (/ C/ 频率/ 与/ 慢/ 核心/ 相等/ )/ {/ }/ }/ 在/ C/ 上/ 执行/ T/ ;/ 3.5/ 参数/ 调整机制/ 如前所述/ ,/ AMP/ 上/ 的/ 操作系统/ 调度/ 需要/ 综合/ 考虑/ 核心/ 性能/ 、/ 核心/ 负载/ 、/ 任务/ 并行性/ 等/ 因素/ ,/ 其中/ 核心/ 性能/ 和/ 负载/ 在/ 不同/ 架构/ 的/ 处理器/ 上/ 优先级/ 不同/ ./ 为了/ 使/ 算法/ 在/ 各种/ 核心/ 性能/ 差异/ 程度/ 不同/ 的/ 平台/ 上/ 都/ 获得/ 高效能/ ,/ 需/ 提供/ 优先级/ 调整/ 的/ 机制/ ./ 算法/ 提供/ 了/ 参数/ α/ 用于/ 调整/ 优先级/ (/ 见式/ (/ 8/ )/ )/ ./ 参数/ 应/ 根据/ 实际/ 情况/ 设置/ ,/ 比如/ 对于/ 核心/ 性能/ 差异/ 很大/ 的/ AMP/ ,/ 核心/ 性能/ 优先级/ 较/ 高/ ,/ α/ 应/ 取/ 接近/ 1/ 的/ 数/ ;/ 对于/ 核心/ 性能/ 差异/ 较/ 小/ 的/ AMP/ ,/ α/ 应/ 取/ 接近/ 0/ 的/ 数/ ,/ 以/ 通过/ 负载/ 均衡/ 提高/ 效能/ ./ 3.6/ 算法/ 运行/ 开销/ 设/ M/ 表示/ 任务/ 总数/ ,/ N/ 表示/ 核心/ 总数/ ,/ 算法/ 需要/ 为/ 每类/ 核心/ 维护/ 任务/ 集合/ ,/ 空间/ 复杂度/ 为/ O/ (/ M/ )/ ./ 算法/ 的/ 时间/ 开销/ 主要/ 来自/ 以下/ 3/ 个/ 方面/ :/ (/ 1/ )/ 负载/ 均衡/ ./ 该/ 模块/ 时间/ 复杂度/ 为/ O/ (/ MN/ )/ ,/ 但/ 现实/ 中/ 基本/ 只/ 需要/ 迁移/ 一两个/ 任务/ 即可/ 实现/ 负载/ 均衡/ ,/ 并且/ 任务/ 集合/ 分解/ 提高/ 了/ 线程/ 迁移/ 效率/ ,/ 因此/ 该/ 模块/ 的/ 平均/ 时间/ 复杂度/ 接近/ O/ (/ N/ )/ ./ (/ 2/ )/ 重/ 调度/ ./ 该/ 模块/ 时间/ 复杂度/ 为/ O/ (/ N/ )/ ./ (/ 3/ )/ 任务/ 执行/ ./ 协同/ 调度/ 在/ 减少/ 线程/ 同步/ 时间/ 的/ 同时/ ,/ 将/ 带来/ 额外/ 的/ 上下文/ 切换/ ./ 不过/ 算法/ 采用/ 了/ 协同/ 调度/ 和/ 独立/ 调度/ 相结合/ 的/ 方法/ ,/ 使/ 没/ 参加/ 协同/ 调度/ 的/ 核心/ 可以/ 运行/ 其他/ 任务/ ,/ 这/ 避免/ 了/ 碎片/ 问题/ ./ 此外/ ,/ 状态/ 监控/ 机制/ 有效/ 避免/ 了/ 不必要/ 的/ 负载/ 均衡/ 和/ 重/ 调度/ ,/ 特别/ 是/ 重/ 调度/ 只/ 在/ 任务/ 类型/ 发生变化/ 时/ 使用/ ,/ 因此/ 算法/ 的/ 开销/ 并不大/ ./ 这/ 将/ 在/ 4.2/ ./ 2/ 节/ 的/ 实验/ 中/ 得到/ 进一步/ 验证/ ./ Page74/ 实验/ 与/ 分析/ 4.1/ 实验/ 平台/ 与/ 方法/ 本章/ 将/ 集成/ 调度/ 算法/ (/ IntegratedAlgorithm/ ,/ IA/ )/ 与/ Agebased/ [/ 7/ ]/ 、/ PA/ [/ 8/ ]/ 、/ FF/ [/ 6/ ]/ 和/ Linux/ 自带/ 的/ 调度/ 器/ [/ 12/ ]/ (/ CompletelyFairScheduler/ ,/ CFS/ )/ 进行/ 比较/ ./ 其中/ CFS/ 没有/ 对/ 处理器/ 的/ 非/ 对称性/ 做/ 处理/ ./ 本文/ 采用/ Linux2/ ./ 6.27/ 来/ 实现/ 和/ 运行/ 上述/ 各个/ 算法/ ./ 本文/ 的/ 实验/ 平台/ 是/ 一台/ 2/ 路/ AMDOpteron2384/ 服务器/ ./ AMDOpteron2384/ 是/ 对称/ 多核/ 处理器/ ,/ 包含/ 4/ 个/ 2.7/ GHz/ 的/ 核心/ ./ 本文/ 用/ Linux/ 提供/ 的/ cpufreqgovernors/ 调整/ 各个/ 核心/ 的/ 频率/ ,/ 以/ 体现/ 非/ 对称性/ ./ 本文/ 使用/ 了/ 3/ 种/ 配置/ ,/ 如表/ 1/ 所示/ ./ 其中/ Conf1/ 和/ Conf2/ 是/ AMP/ ,/ 用于/ 测试/ 算法/ 的/ 效能/ 、/ 通用性/ 和/ 参数/ 灵敏度/ ;/ Conf3/ 是/ SMP/ ,/ 用于/ 测试/ 算法/ 的/ 开销/ ./ α/ 的/ 取值/ 结合/ 测试/ 平台/ 配置/ 和/ 经验/ 确定/ ,/ α/ 取/ 其它/ 值时/ 算法/ 的/ 表现/ 详见/ 4.2/ ./ 3/ 节/ ./ 测试程序/ 选自/ PARSEC/ [/ 13/ ]/ ./ 由于/ 测试/ 平台/ 包含/ 2/ 个/ 快/ 核心/ 和/ 6/ 个慢/ 核心/ ,/ 为了/ 更加/ 全面/ 地/ 比较/ 各个/ 算法/ 在/ 不同/ 平台/ 配置/ 下/ 的/ 效能/ ,/ 我们/ 设计/ 了/ 多种类型/ 的/ 并行程序/ 组成/ 的/ 测试程序/ 集/ ,/ 如表/ 2/ 所示/ ./ 为了/ 使/ 负载/ 均衡/ 机制/ 生效/ ,/ 我们/ 使/ 每个/ 程序/ 集/ 的/ 线程/ 总数/ 大于/ 平台/ 的/ 核心/ 总数/ ./ 测试程序/ 后/ 括号/ 中/ 的/ 数字/ n/ 表示/ 该/ 程序/ 包含/ n/ 个/ 线程/ ./ 根据/ 研究/ 文献/ [/ 6/ ,/ 8/ ]/ 的/ 实验/ 方法/ ,/ 我们/ 把/ 每个/ 程序/ 集在/ 每个/ 调度/ 算法/ 下/ 分别/ 运行/ 3/ 次/ ,/ 取/ 相应/ 指标/ 的/ 平均值/ 作为/ 度量/ ;/ 实验/ 中/ 我们/ 发现/ 每次/ 运行/ 结果/ 差异/ 不/ 大/ ,/ 每个/ 算法/ 都/ 体现/ 较/ 好/ 的/ 稳定性/ ,/ 因此/ 我们/ 没有/ 对/ 稳定性/ 进行/ 单独/ 分析/ ./ 平台/ α/ Conf10/ ./ 32/ 个/ 核心/ 运行/ 在/ 2.7/ GHz/ 下/ ,/ Conf20/ ./ 12/ 个/ 核心/ 运行/ 在/ 2.7/ GHz/ 下/ ,/ Conf308/ 个/ 核心/ 都/ 运行/ 在/ 2.7/ GHz/ 下/ ./ 程序/ 集/ W1canneal/ (/ 2/ )/ ,/ freqmine/ (/ 2/ )/ ,/ blackscholes/ (/ 6/ )/ ,/ dedup/ (/ 8/ )/ W2x264/ (/ 2/ )/ ,/ bodytrack/ (/ 3/ )/ ,/ blackscholes/ (/ 5/ )/ ,/ dedup/ (/ 8/ )/ W3fulidanimate/ (/ 4/ )/ ,/ facesim/ (/ 6/ )/ ,/ swaptions/ (/ 8/ )/ W4canneal/ (/ 2/ )/ ,/ fulidanimate/ (/ 3/ )/ ,/ streamcluster/ (/ 6/ )/ ,/ ferret/ (/ 7/ )/ W5freqmine/ (/ 2/ )/ ,/ blackscholes/ (/ 8/ )/ ,/ swaptions/ (/ 8/ )/ 4.2/ 实验/ 结果/ 与/ 分析/ 4.2/ ./ 1/ 效能/ 与/ 通用性/ 分析/ 每个/ 程序/ 集在/ 不同/ 算法/ 上/ 的/ EDP/ 比较/ 如图/ 4/ 、/ 图/ 5/ 所示/ ./ 为了/ 便于/ 比较/ 实验/ 结果/ ,/ 本文/ 以/ CFS/ 的/ EDP/ 为/ 基准/ 对/ 数据/ 进行/ 归一化/ 处理/ ,/ 小于/ 1/ 表示/ EDP/ 小于/ CFS/ ,/ 否则/ 反之/ ./ 图/ 4/ 给出/ 了/ Conf1/ 配置/ 下/ 各/ 算法/ 的/ 相对/ EDP/ 比较/ ./ 由于/ 快/ 、/ 慢/ 核心/ 的/ 频率/ 相差近/ 1/ 倍/ ,/ 核心/ 性能/ 差异/ 对/ 效能/ 影响/ 较大/ ,/ 核心/ 负载/ 次之/ ,/ 我们/ 设定/ α/ =/ 0.3/ ./ 结果显示/ ,/ IA/ 的/ EDP/ 比/ CFS/ 低/ 43/ %/ ~/ 50/ %/ ,/ 也/ 比/ Agebased/ 低/ 24/ %/ ~/ 31/ %/ ;/ EDP/ 上/ Agebased/ 比/ CFS/ 低/ 22/ %/ ~/ 34/ %/ ,/ PA/ 比/ CFS/ 低/ 17/ %/ ~/ 26/ %/ ,/ FF/ 比/ CFS/ 低/ 17/ %/ ~/ 23/ %/ ./ 图/ 5/ 给出/ 了/ Conf2/ 配置/ 下/ 各/ 算法/ 的/ 相对/ EDP/ 比较/ ./ 由于/ 快/ 、/ 慢/ 核心/ 的/ 频率/ 相差/ 0.7/ GHz/ ,/ 核心/ 负载/ 对/ 效能/ 的/ 影响/ 大于/ Conf1/ ,/ 我们/ 设定/ α/ =/ 0.1/ ./ 结果显示/ ,/ IA/ 的/ EDP/ 比/ CFS/ 低/ 43/ %/ ~/ 48/ %/ ,/ 也/ 比/ Agebased/ 低/ 27/ %/ ~/ 33/ %/ ;/ 相对/ 于/ CFS/ ,/ Agebased/ 能/ 把/ EDP/ 降低/ 16/ %/ ~/ 23/ %/ ,/ PA/ 能/ 降低/ 10/ %/ ~/ 17/ %/ ,/ FF/ 能/ 降低/ 10/ %/ ~/ 16/ %/ ./ 相对/ 于/ 没有/ 针对/ AMP/ 特性/ 做/ 处理/ 的/ CFS/ ,/ IA/ 、/ Page8PA/ 、/ Agebased/ 、/ FF/ 的/ 效能/ 都/ 有/ 不同/ 程度/ 的/ 提高/ ./ 这/ 说明/ 高效能/ 的/ 操作系统/ 调度/ 必须/ 利用/ 核心/ 的/ 特性/ ./ 各/ 算法/ 按/ 效能/ 从/ 高到/ 低/ 排序/ 为/ :/ IA/ ,/ Agebased/ ,/ PA/ ,/ FF/ ,/ CFS/ ./ 其中/ Agebased/ 需要/ 频繁/ 地/ 把/ 进度/ 最慢/ 的/ 线程/ 迁移/ 到/ 快/ 核心/ 上/ ,/ 当/ 处理/ 存储/ 密集型/ 任务/ (/ 如/ W4/ )/ 时/ ,/ 将/ 带来/ 巨大/ 的/ 开销/ ,/ 使/ 其/ 效能/ 低于/ PA/ ./ 相对/ 于/ 其他/ 算法/ ,/ IA/ 在/ 每个/ 程序/ 集上/ 都/ 有/ 明显/ 的/ 效能/ 优势/ ,/ 这/ 是因为/ 它/ 保证/ 了/ 4/ 个/ 调度/ 原则/ ,/ 综合/ 考虑/ 核心/ 非/ 对称性/ 、/ 核心/ 负载/ 和/ 任务/ 同步/ 特性/ 进行/ 线程/ 映射/ 和/ 核心/ 频率/ 调整/ ./ 当/ 核心/ 性能/ 差异/ 减小/ (/ 如/ Conf2/ )/ 时/ ,/ PA/ 、/ Agebased/ 、/ FF/ 相对/ 于/ CFS/ 的/ 效能/ 优势/ 有所/ 下降/ ,/ 而/ IA/ 仍/ 保持/ 着/ 43/ %/ ~/ 48/ %/ 的/ EDP/ 降幅/ ./ 这/ 得益于/ IA/ 的/ 参数/ 调整机制/ ,/ 使/ 其能/ 根据/ 不同/ 环境/ 调节/ 核心/ 性能/ 差异/ 和/ 负载/ 的/ 优先级/ ,/ 从而/ 在/ 每个/ 环境/ 下/ 都/ 有效/ 能/ 提高/ ./ 这/ 说明/ 了/ IA/ 的/ 通用性/ ./ 4.2/ ./ 2/ 开销/ 分析/ 该/ 实验/ 运行/ 在/ Conf3/ 平台/ 上/ ./ Conf3/ 是/ SMP/ ,/ 我们/ 使/ 各个/ 算法/ 假设/ 仍/ 在/ 有/ 2/ 个/ 快/ 核心/ 和/ 6/ 个慢/ 核心/ 的/ 平台/ 上/ 运行/ ,/ 以此/ 来/ 分析/ 各个/ AMP/ 上/ 的/ 调度/ 算法/ 相对/ 于/ CFS/ 带来/ 的/ 额外/ 开销/ ./ 测试程序/ 在/ 每个/ 调度/ 算法/ 下/ 分别/ 运行/ 3/ 次/ ,/ 取/ 完成/ 时间/ 的/ 平均值/ 作图/ 6Conf3/ 上/ 各/ 程序/ 的/ 相对/ 完成/ 时间/ 4.2/ ./ 3/ 参数/ 灵敏度/ 分析/ 该/ 实验/ 分析/ α/ 的/ 取值/ 对/ IA/ 效能/ 的/ 影响/ ./ 图/ 7/ ,/ 8/ 分别/ 给出/ Conf1/ 和/ Conf2/ 配置/ 下/ 各/ 程序/ 集/ 实际/ EDP/ 随/ α/ 取值/ 的/ 变化/ ./ 可见/ Conf1/ 配置/ 下/ IA/ 在/ α/ =/ 0.3/ 时/ 取得/ 最优/ 效能/ ,/ Conf2/ 配置/ 下/ IA/ 在/ α/ =/ 0.1/ 时/ 取得/ 最优/ 效能/ ./ 不同/ 平台/ 上/ ,/ 核心/ 性能/ 和/ 负载/ 的/ 优先级/ 不同/ ,/ 要/ 取得/ 好/ 的/ 效能/ 需要/ 平衡/ 两者/ ;/ 在/ Conf1/ (/ Conf2/ )/ 平台/ 上/ ,/ α/ =/ 0.3/ (/ 0.1/ )/ 正好/ 平衡/ 了/ 这/ 两个/ 因素/ ./ 如图/ 7/ 、/ 8/ 所示/ ,/ 当/ α/ 取值/ 过大/ 或/ 过/ 小时/ ,/ 效能/ 都/ 会/ 降低/ ./ 由此可见/ ,/ IA/ 提供/ 的/ 参数/ 调整机制/ 有效/ 提高/ 了/ 算法/ 的/ 通用性/ 和/ 灵活性/ ./ 为/ 度量/ ./ 当/ 其中/ 某个/ 程序/ 提前完成/ 时/ ,/ 我们/ 让/ 其/ 重新/ 运行/ ,/ 以/ 保持/ 测试环境/ 的/ 稳定性/ ./ 为了/ 便于/ 比较/ 实验/ 结果/ ,/ 本文/ 以/ CFS/ 的/ 完成/ 时间/ 为/ 基准/ 对/ 数据/ 进行/ 归一化/ 处理/ ,/ 超过/ 1/ 表示/ 算法/ 的/ 开销/ ./ 实验/ 结果/ 如图/ 6/ 所示/ ,/ 包括/ 每个/ 程序/ 的/ 相对/ 完成/ 时间/ 以及/ 每个/ 测试/ 集/ 的/ 平均/ 相对/ 完成/ 时间/ (/ 图/ 6/ 中/ 的/ geo/ -/ mean/ 列/ )/ ./ 各/ 算法/ 按/ 完成/ 时间/ 从小到大/ 排序/ 为/ :/ IA/ ,/ CFS/ ,/ FF/ ,/ PA/ ,/ Agebased/ ./ 其中/ IA/ 的/ 开销/ 很小/ ,/ 因为/ 状态/ 监控/ 机制/ 有效/ 限制/ 了/ 线程/ 迁移/ ,/ 任务/ 集合/ 分解/ 提高/ 了/ 线程/ 迁移/ 效率/ ,/ 并且/ 协同/ 调度/ 带来/ 的/ 收益/ 大于/ 其/ 开销/ —/ —/ —/ 即使/ 在/ SMP/ 上/ ,/ 完成/ 时间/ 相对/ 于/ CFS/ 的/ 降幅/ 可/ 达到/ 17/ %/ ./ Agebased/ 、/ PA/ 和/ FF/ 没有/ 协同/ 调度/ ,/ 因此/ 在/ SMP/ 上/ 完成/ 时间/ 都/ 大于/ CFS/ ./ FF/ 的/ 开销/ 主要/ 来源于/ 当快/ 核心/ 空闲/ 时/ ,/ 将/ 线程/ 从慢/ 核心/ 迁移/ 到/ 快/ 核心/ 上/ ,/ 在/ 各/ 核心/ 负载/ 均衡/ 的/ 情况/ 下/ ,/ 这种/ 迁移/ 并不多/ ,/ 因此/ 开销/ 略大于/ CFS/ ./ PA/ 则/ 由/ 任务/ 线程/ 数/ 的/ 改变/ 触发/ 任务/ 迁移/ ,/ 开销/ 处于/ FF/ 和/ Agebased/ 之间/ ./ 由于/ Agebased/ 需要/ 频繁/ 地/ 将/ 剩余时间/ 最长/ 的/ 线程/ 迁移/ 到/ 快/ 核心/ 上/ 运行/ ,/ 它/ 的/ 开销/ 最大/ ,/ 特别/ 是/ 对于/ 存储/ 密集型/ 任务/ (/ 如/ W4/ )/ ./ 这/ 验证/ 了/ 3.6/ 节/ 的/ 算法/ 开销/ 分析/ ,/ 也/ 进一步/ 解释/ 了/ 各/ 算法/ 在/ 4.2/ ./ 1/ 节中/ 的/ 效能/ 表现/ ./ Page94/ ./ 3/ 实验/ 小结/ 基于/ 以上/ 实验/ ,/ 我们/ 可以/ 得出/ 以下/ 结论/ :/ (/ 1/ )/ 效能/ ./ 相对/ 于/ 其他/ 调度/ 算法/ ,/ 集成/ 调度/ 算法/ 具有/ 明显/ 的/ 优势/ ,/ 能/ 把/ 系统/ 的/ EDP/ 降低/ 24/ %/ ~/ 50/ %/ ./ (/ 2/ )/ 通用性/ ./ 当/ 核心/ 性能/ 差异/ 减小/ 时/ ,/ 其他/ AMP/ 上/ 的/ 调度/ 算法/ 的/ 效能/ 优势/ 有所/ 下降/ ,/ 而/ 集成/ 调度/ 算法/ 仍/ 保持/ 着/ 43/ %/ ~/ 48/ %/ 的/ EDP/ 降幅/ ,/ 这/ 说明/ 该/ 算法/ 具有/ 很/ 好/ 的/ 通用性/ ./ (/ 3/ )/ 开销/ ./ 集成/ 调度/ 算法/ 的/ 开销/ 优于/ 其它/ 算法/ ,/ 而/ 协同/ 调度/ 的/ 开销/ 远/ 小于/ 其/ 收益/ ,/ 即使/ 在/ SMP/ 上/ 仍/ 有/ 良好/ 的/ 性能/ 表现/ ./ 5/ 相关/ 工作/ 对于/ 操作系统/ 调度/ 问题/ ,/ 之前/ 的/ 研究/ 主要/ 集中/ 于/ SMP/ ,/ 这/ 类/ 平台/ 上/ 的/ 调度/ 算法/ 主要/ 是/ 处理/ 公平性/ 、/ 负载/ 均衡/ [/ 14/ ]/ 等/ ,/ 没有/ 对/ AMP/ 的/ 非/ 对称性/ 做/ 处理/ ,/ 无法/ 发挥/ 其/ 优势/ ./ 对于/ AMP/ 上/ 的/ 调度/ 问题/ ,/ 之前/ 的/ 方法/ [/ 15/ -/ 16/ ]/ 都/ 依赖于/ 任务/ 执行/ 时间/ 等/ 参数/ 已知/ ,/ 但/ 在/ 操作系统/ 中/ 这些/ 参数/ 无法/ 直接/ 获得/ ./ 因此/ ,/ 这些/ 方法/ 无法/ 解决/ 操作系统/ 调度/ 问题/ ./ 本文/ 讨论/ 的/ AMP/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 问题/ ,/ 近年来/ 也/ 有/ 一些/ 研究/ 工作/ ./ 其中/ 文献/ [/ 6/ ]/ 在/ 保证/ 核心/ 负载/ 与其/ 计算能力/ 成正比/ 的/ 同时/ ,/ 优先/ 使用/ 快/ 核心/ ,/ 并/ 对/ NUMA/ 节点/ 间/ 的/ 线程/ 迁移/ 做/ 限制/ ./ 该/ 方法/ 利用/ 了/ AMP/ 的/ 特性/ ,/ 但/ 没有/ 考虑/ 并行任务/ 的/ 同步/ 特性/ ,/ 从而/ 影响/ 效能/ ./ 文献/ [/ 7/ ]/ 假设/ 同一/ 任务/ 的/ 所有/ 线程/ 运行/ 时间/ 相等/ ,/ 把/ 剩余时间/ 长/ 的/ 线程/ 优先/ 调度/ 到/ 快/ 核心/ 上/ 运行/ ./ 该/ 方法/ 利用/ 了/ AMP/ 的/ 非/ 对称性/ 和/ 并行任务/ 的/ 同步/ 特性/ ,/ 但/ 容易/ 造成/ 频繁/ 的/ 线程/ 迁移/ ,/ 从而/ 带来/ 巨大/ 开销/ ./ 而/ 本文/ 的/ 状态/ 监控/ 机制/ 和/ 任务/ 集合/ 分解/ 有效/ 控制/ 了/ 调度/ 开销/ ./ 跟/ 本文/ 比较/ 相关/ 的/ 是/ 文献/ [/ 8/ ]/ ,/ 其/ 提出/ 的/ PA/ 算法/ 按照/ 线程/ 级/ 并行度/ 将/ 任务/ 分成/ 3/ 类/ :/ MP/ 为/ 并行度/ 不/ 大于/ 快/ 核心/ 数目/ 的/ 任务/ ;/ HP/ 为/ 并行度/ 大于/ 快/ 核心/ 数目/ 的/ 任务/ ;/ SP/ 为/ HP/ 类/ 任务/ 的/ 串行/ 阶段/ ./ 任务/ 按/ 使用/ 快/ 核心/ 的/ 优先级/ 从/ 高/ 到底/ 排列/ 为/ :/ SP/ ,/ MP/ ,/ HP/ ./ 该/ 算法/ 利用/ 了/ AMP/ 和/ 并行任务/ 的/ 特性/ ,/ 开销/ 也/ 比较/ 小/ ./ 但/ 本文/ 和/ PA/ 算法/ 存在/ 以下/ 不同/ :/ (/ 1/ )/ PA/ 假设/ 系统/ 运行/ 的/ 线程/ 总数/ 不/ 大于/ 核心/ 总数/ ;/ 本文/ 则/ 假设/ 一个/ 任务/ 的/ 线程/ 总数/ 不/ 大于/ 核心/ 总数/ ,/ 这/ 大大/ 放宽/ 了/ PA/ 的/ 限制/ ./ (/ 2/ )/ PA/ 没有/ 同步/ 执行/ 同一/ 任务/ 的/ 线程/ ,/ 这/ 将/ 导致/ 线程/ 间/ 的/ 互相/ 等待/ ;/ 本文/ 则/ 协同/ 调度/ 同一/ 任务/ 的/ 所有/ 线程/ ./ 并且/ 文献/ [/ 6/ -/ 8/ ]/ 都/ 是/ 针对/ 系统/ 性能/ ,/ 假设/ 所有/ 核心/ 频率/ 固定/ ,/ 没有/ 考虑/ 算法/ 的/ 通用性/ ,/ 也/ 没有/ 对/ AMP/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 问题/ 进行/ 建模/ 分析/ ./ 本文/ 以/ 效能/ 和/ 通用性/ 为/ 目标/ 为/ 该/ 问题/ 建立/ 了/ 非线性/ 规划/ 模型/ ,/ 结合/ 线程/ 调度/ 和/ DVFS/ 有效/ 降低/ 了/ 系统/ 的/ EDP/ ./ 另外/ ,/ 有/ 一些/ 研究/ 从/ 不同于/ 本文/ 的/ 角度/ 研究/ AMP/ 上/ 的/ 操作系统/ 调度/ 问题/ ,/ 文献/ [/ 17/ ]/ 将/ 计算/ 密集型/ 的/ 任务调度/ 到/ 快/ 核心/ 上/ 运行/ ,/ 将/ 存储/ 密集型/ 的/ 任务调度/ 到/ 慢/ 核心/ 上/ 运行/ ./ 这些/ 方法/ 针对/ 串行/ 任务/ ,/ 没有/ 考虑/ 并行任务/ 的/ 特性/ ;/ 而/ 随着/ 多/ 核技术/ 的/ 发展/ ,/ 并行程序/ 日益/ 普及/ [/ 2/ ,/ 5/ ]/ ,/ 并行任务/ 的/ 特性/ 是/ 操作系统/ 调度/ 必须/ 考虑/ 的/ ./ 本文/ 的/ 方法/ 和/ 这些/ 研究/ 并/ 不/ 冲突/ ,/ 可以/ 互相/ 结合/ ,/ 文献/ [/ 18/ ]/ 朝/ 这个/ 方向/ 做/ 了/ 尝试/ ,/ 这/ 也/ 是/ 我们/ 下/ 一步/ 研究/ 的/ 内容/ ./ 6/ 结论/ 与/ 展望/ 本文/ 对/ AMP/ 上/ 操作系统/ 的/ 并行/ 任务调度/ 问题/ 进行/ 研究/ ,/ 建立/ 了/ 非线性/ 规划/ 模型/ ,/ 分析/ 得出/ 4/ 个/ 调度/ 原则/ ,/ 并/ 基于/ 调度/ 原则/ 提出/ 了/ 集成/ 调度/ 算法/ ./ 据/ 我们/ 所知/ ,/ 本文/ 是/ 第一个/ 对/ 该/ 问题/ 进行/ 建模/ 分析/ 的/ 研究/ ,/ 提出/ 的/ 算法/ 是/ 第一个/ 在/ AMP/ 上/ 结合/ 线程/ 调度/ 和/ DVFS/ 的/ 调度/ 算法/ ./ 实际/ 平台/ 上/ 全面/ 的/ 对比/ 实验/ 表明/ :/ 集成/ 调度/ 算法/ 的/ 效能/ 、/ 通用性/ 和/ 开销/ 都/ 优于/ 其它/ 同类/ 算法/ ./ 集成/ 调度/ 算法/ 的/ 效能/ 优势/ 来源于/ 它/ 综合利用/ 了/ 核心/ 非/ 对称性/ 、/ 核心/ 负载/ 和/ 任务/ 同步/ 特性/ 以及/ 对/ 线程/ 调度/ 和/ DVFS/ 的/ 有效/ 集成/ ,/ 这/ 也/ 验证/ 了/ 调度/ 原则/ 的/ 有效性/ ;/ 通用性/ 来源于/ 参数/ 调整机制/ ,/ 它/ 可/ 灵活/ 调节/ 核心/ 负载/ 和/ 非/ 对称性/ 的/ 优先级/ ,/ 从而/ 适/ Page10/ 用于/ 核心/ 性能/ 差异/ 不同/ 的/ 多种/ 机器配置/ ;/ 开销/ 优势/ 是因为/ 状态/ 监控/ 机制/ 控制/ 了/ 线程/ 迁移/ ,/ 任务/ 集合/ 分解/ 提高/ 了/ 迁移/ 效率/ ,/ 并且/ 协同/ 调度/ 带来/ 的/ 收益/ 大于/ 其/ 开销/ ./ 如何/ 控制系统/ 温度/ ,/ 以/ 降低/ 制冷/ 设备/ 的/ 能耗/ ,/ 也/ 是/ 绿色/ 计算/ 的/ 一个/ 关键问题/ ./ 研究/ 操作系统/ 调度/ 对/ AMP/ 温度/ 的/ 影响/ ,/ 将/ 是/ 我们/ 下/ 一步/ 的/ 工作/ 重点/ ./ 

