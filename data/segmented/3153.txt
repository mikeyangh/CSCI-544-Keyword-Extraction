Page1/ 多核/ 处理器/ 环境/ 下/ 内存/ 数据库/ 索引/ 性能/ 分析/ 郭超/ 李坤/ 王永炎/ 刘胜航/ 王宏安/ (/ 中国科学院/ 软件/ 研究所/ 北京/ 100190/ )/ 摘要/ 从/ 20/ 世纪/ 80/ 年代/ 内存/ 数据库/ 出现/ 时/ 的/ T/ 树到/ 21/ 世纪/ 初/ 出现/ 的/ 缓存/ 感知/ 的/ CSS/ 、/ CSB/ +/ 树/ 等/ ,/ 都/ 适应/ 了/ 当时/ 的/ 硬件/ 发展趋势/ ,/ 具有/ 一定/ 的/ 性能/ 优势/ ./ 随着/ 计算机硬件/ 技术/ 的/ 进一步/ 发展/ ,/ 尤其/ 是/ 多/ 核技术/ 的/ 应用/ 与/ 推广/ ,/ 新/ 的/ 多/ 核/ 处理器/ 在/ 提高/ 索引/ 性能/ 的/ 同时/ 又/ 给/ 内存/ 索引/ 结构/ 提出/ 了/ 新/ 的/ 挑战/ ./ 文中/ 对/ B/ +/ 树/ 、/ T/ 树/ 、/ CSS/ 树/ 、/ CSB/ +/ 树/ 等/ 几个/ 经典/ 的/ 内存/ 索引/ 结构/ 在/ 多/ 核/ 处理器/ 环境/ 下/ 的/ 性能/ 进行/ 了/ 全面/ 的/ 实验/ 测试/ ,/ 对/ 其/ 在/ 多/ 核/ 处理器/ 环境/ 下/ 不同/ 数据/ 输入/ 、/ 不同/ 节点/ 大小/ 等/ 多种/ 情况/ 下/ 的/ 性能/ 构成/ 与/ 差异/ 进行/ 了/ 比较/ 和/ 分析/ ,/ 总结/ 了/ 在/ 多/ 核/ 处理器/ 中/ 影响/ 索引/ 性能/ 的/ 关键因素/ ,/ 为/ 内存/ 索引/ 结构/ 的/ 进一步/ 改进/ 奠定/ 了/ 坚实/ 的/ 基础/ ./ 关键词/ 内存/ 索引/ 结构/ ;/ 多核/ 处理器/ ;/ 缓存/ 感知/ 1/ 引言/ 随着/ 技术/ 的/ 发展/ ,/ 内存容量/ 越来越/ 大/ ,/ 内存/ 的/ 价格/ 也/ 越来越低/ ./ 将/ 数据库/ 处理/ 一个/ 事务所/ 需要/ 的/ 数据/ ,/ 甚至/ 将/ 整个/ 数据库/ 中/ 的/ 数据/ 放入/ 内存/ 成为/ 了/ 可/ Page2/ 因素/ 也/ 由/ 传统/ 关系数据库/ 中/ 的/ 磁盘/ 访问/ 转变/ 为/ 计算/ 时间/ 以及/ 内存/ 访问/ 的/ 延迟/ 上/ ./ 内存/ 数据库/ 和/ 传统/ 数据库/ 的/ 这/ 一/ 重要/ 的/ 差别/ ,/ 为/ 内存/ 数据库/ 在/ 数据组织/ 、/ 索引/ 构建/ 等/ 方面/ 提出/ 了/ 新/ 的/ 要求/ ./ 索引/ 是/ 影响/ 数据库/ 性能/ 的/ 一个/ 重要/ 的/ 因素/ ./ 为了/ 适应/ 内存/ 数据库/ 的/ 特点/ ,/ 除了/ 传统/ 关系数据库/ 中/ 广泛/ 使用/ 的/ B/ // B/ +/ 树/ 被/ 继续/ 沿用/ 于/ 内存/ 数据库/ 中外/ ,/ 从/ 20/ 世纪/ 80/ 年代/ 开始/ ,/ 研究者/ 为/ 改进/ 内存/ 数据库/ 的/ 索引/ 结构/ 进行/ 了/ 大量/ 的/ 工作/ ./ 其中/ ,/ 影响/ 较大/ 的/ 有/ 80/ 年代/ 适应/ 内存/ 数据库/ 而/ 提出/ 的/ T/ 树/ [/ 2/ ]/ 以及/ 基于/ 缓存/ 敏感/ 进行/ 改进/ 的/ CSS/ [/ 3/ ]/ 树/ 、/ CSB/ +/ 树/ [/ 4/ ]/ 等/ ./ 为了/ 进一步/ 改进/ CPU/ 的/ 性能/ ,/ 越来越/ 多/ 的/ 新/ 的/ 技术/ 被/ 应用/ 于/ 现代/ CPU/ 中/ ,/ 如/ SMT/ (/ Simultane/ -/ ousMultithreading/ )/ 和/ 多/ 核技术/ [/ 5/ ]/ ./ 探知/ 原有/ 内存/ 数据库/ 索引/ 结构/ 在/ 应用/ 新/ 技术/ 的/ 多/ 核/ 处理器/ 中/ 的/ 性能/ 表现/ ,/ 了解/ 影响/ 索引/ 结构/ 性能/ 的/ 重要/ 因素/ ,/ 对/ 改进/ 索引/ 结构/ ,/ 提高/ 内存/ 数据库/ 的/ 整体/ 性能/ ,/ 具有/ 重要/ 的/ 参考价值/ 和/ 指导意义/ ./ 本文/ 选取/ 了/ B/ +/ 树/ 、/ T/ 树/ 、/ CSB/ +/ 树/ 、/ CSS/ 树/ 等/ 几种/ 应用/ 比较/ 广泛/ 的/ 数据库/ 索引/ 结构/ ,/ 针对/ 多核/ 处理器/ 环境/ ,/ 通过/ 实验/ 分析/ 了/ 它们/ 在/ 不同/ 的/ 数据/ 输入/ 、/ 不同/ 的/ 节点/ 大小/ 等/ 多种/ 情况/ 下/ 的/ 主要/ 性能指标/ ,/ 并/ 与其/ 在/ 单核/ 处理器/ 环境/ 下/ 的/ 性能/ 进行/ 比较/ 分析/ ,/ 为/ 进一步/ 改进/ 索引/ 结构/ ,/ 提出/ 适合/ 多核/ 处理器/ 的/ 内存/ 数据库/ 索引/ ,/ 提高/ 内存/ 数据库/ 在/ 多/ 核/ 处理器/ 环境/ 下/ 的/ 查询/ 和/ 更新/ 性能/ 打下/ 坚实基础/ ./ 本文/ 第/ 2/ 节为/ 相关/ 研究/ ,/ 主要/ 介绍/ 随/ 硬件/ 发展/ 内存/ 数据库/ 索引/ 结构/ 的/ 发展/ 过程/ ;/ 第/ 3/ 节/ ,/ 分析/ 在/ 程序运行/ 过程/ 中/ ,/ 主要/ 的/ 时间/ 消耗/ ;/ 第/ 4/ 节为/ 主要/ 的/ 实验设计/ ;/ 第/ 5/ 节为/ 具体/ 的/ 实验/ 内容/ 以及/ 实验/ 结果/ 的/ 比较/ 分析/ ;/ 第/ 6/ 节为/ 全文/ 的/ 总结/ 以及/ 未来/ 工作/ 的/ 安排/ ./ 2/ 相关/ 研究/ 从/ 20/ 世纪/ 80/ 年代/ 提出/ 内存/ 数据库/ 概念/ 以来/ ,/ 为/ 适应/ 内存/ 数据库/ 以及/ 硬件/ 环境/ 的/ 特点/ ,/ 除了/ 传统/ 的/ B/ // B/ +/ 树/ 被/ 继续/ 使用/ 在/ 内存/ 数据库/ 中/ 之外/ ,/ 研究者/ 在/ 提高/ 内存/ 数据库/ 索引/ 性能/ 方面/ 进行/ 了/ 大量/ 的/ 研究/ 工作/ ,/ 各种各样/ 的/ 内存/ 索引/ 及/ 改进/ 方案/ 被/ 提出/ ./ T/ 树是/ 20/ 世纪/ 80/ 年代/ 提出/ 的/ 面向/ 内存/ 数据库/ 的/ 索引/ 结构/ ./ 它/ 继承/ 了/ AVL/ 树/ 的/ 二叉/ 平衡/ 结构/ 和/ B/ +/ 树/ 节点/ 包含/ 多个/ 关键字/ 的/ 特征/ ,/ 因此/ 具有/ 二叉树/ 收敛/ 快/ 、/ 多/ 关键字/ 降低/ 树高/ 的/ 特点/ ,/ 查询/ 过程/ 中/ 执行/ 的/ 指令/ 数较/ 少/ ,/ 在/ 当时/ 的/ 硬件/ 环境/ 下/ ,/ 查询/ 性能/ 较/ 好/ ./ 在/ T/ 树/ 和/ B/ +/ 树/ 的/ 基础/ 上/ ,/ 研究者/ 进行/ 了/ 一系列/ 的/ 改进/ ,/ 如/ 基于/ 压缩/ 关键字/ ,/ 提高/ 节点/ 利用率/ 而/ 改进/ 的/ pk/ -/ T/ 树/ [/ 6/ ]/ 和/ pk/ -/ B/ 树/ [/ 6/ ]/ ,/ 结合/ hash/ 结构/ 和/ B/ +/ 树结构/ 的/ BD/ 树/ [/ 7/ ]/ 等/ ,/ 都/ 在/ 一定/ 程度/ 上/ 改进/ 了/ 索引/ 性能/ ./ 随着/ CPU/ 技术/ 的/ 进一步/ 发展/ ,/ CPU/ 的/ 处理速度/ 和/ 内存/ 访问速度/ 之间/ 的/ 差距/ 也/ 越来越/ 大/ ,/ 内存/ 访问/ 的/ 时间延迟/ ,/ 从/ 1980/ 年/ 的/ 不到/ 10/ 个/ 时钟/ 周期/ ,/ 增长/ 到/ 2010/ 年/ 的/ 近/ 1000/ 个/ 时钟/ 周期/ ,/ CPUcache/ 的/ 缺失/ 成为/ 影响/ 数据库/ 索引/ 性能/ 一个/ 不可/ 忽略/ 的/ 因素/ ./ 研究/ 表明/ ,/ 超过/ 50/ %/ 的/ 数据库/ 处理/ 时间/ 浪费/ 在/ 内存/ 访问/ 的/ 时间延迟/ 上/ [/ 9/ ]/ ,/ 即/ CPUcache/ 缺失/ 带来/ 的/ 时间/ 消耗/ ./ 研究者/ 发现/ ,/ 在/ 新/ 的/ CPU/ 环境/ 中/ ,/ B/ // B/ +/ 树/ 由于/ 较/ 好/ 的/ 缓存/ 感知/ (/ cacheconscious/ )/ 特性/ ,/ 表现/ 出/ 良好/ 的/ 查询/ 和/ 更新/ 性能/ ,/ 索引/ 性能/ 甚至/ 好于/ T/ 树/ [/ 3/ ]/ ./ 针对/ 这一/ 趋势/ ,/ 一些/ 新/ 的/ 基于/ 缓存/ 感知/ 的/ 索引/ 被/ 提出/ ,/ 其中/ 影响/ 较大/ 的/ 有/ 基于/ B/ +/ 树/ 、/ T/ 树/ 和/ 缓存/ 感知/ 思想/ 进行/ 改进/ 的/ CSS/ 树/ 、/ CSB/ +/ 树/ 和/ CST/ 树/ [/ 10/ ]/ ./ CSS/ 树/ (/ CacheSensitiveTree/ )/ 是/ RaoJun/ 等于/ 1998/ 年/ 提出/ 的/ 针对/ 缓存/ 优化/ 的/ 树/ 索引/ 结构/ ./ CSS/ 树用/ 一个/ 数组/ 来/ 保存/ 树结构/ ,/ 每个/ 节点/ 的/ 大小/ 和/ 二级缓存/ 块/ (/ L2cacheline/ )/ 的/ 大小/ 保持一致/ ./ 查询/ 时/ ,/ 通过/ 计算/ 数组/ 下标/ 找到/ 子/ 节点/ 所在/ 的/ 位置/ ./ CSS/ 树/ 避免/ 了/ 指针/ 的/ 空间/ 开销/ ,/ 节点/ 利用率/ 高/ ;/ 节点/ 的/ 大小/ 和/ 二级缓存/ 块/ 的/ 大小/ 一致/ ,/ 减少/ 了/ 节点/ 内部/ 查找/ 的/ 缓存/ 缺失/ ;/ 用/ 连续/ 数组/ 存储/ 索引/ 结构/ ,/ 减少/ 了/ TLB/ 缺失/ ./ 在/ 查询/ 方面/ ,/ CSS/ 树/ 具有/ 很/ 好/ 的/ 性能/ ./ 但是/ ,/ CSS/ 树/ 的/ 更新/ 操作/ 需要/ 重新/ 构建/ 整个/ 索引/ 结构/ ,/ 因而/ 不适/ 用于/ 更新/ 比较/ 频繁/ 的/ 应用/ 场景/ ./ 沿袭/ 了/ CSS/ 树/ 缓存/ 感知/ (/ cacheconscious/ )/ 的/ 思想/ ,/ RaoJun/ 等/ 人/ 在/ B/ +/ 树/ 的/ 基础/ 上/ 提出/ 了/ CSB/ +/ 树/ ./ CSB/ +/ 树对/ B/ +/ 树/ 做/ 了/ 两/ 方面/ 的/ 改进/ :/ (/ 1/ )/ CSB/ +/ 树/ 的/ 节点/ 大小/ 和/ 二级缓存/ 块/ 的/ 大小/ 保持一致/ ;/ (/ 2/ )/ CSB/ +/ 树中/ ,/ 每个/ 内部/ 节点/ 对应/ 的/ 子/ 节点/ 都/ 存放/ 在/ 连续/ 区域/ 中/ ./ 通过/ 这/ 两/ 方面/ 提高/ CSB/ +/ 树/ 的/ 缓存/ 命中/ (/ cachehit/ )/ 率/ 和/ 减小/ TLB/ 的/ 缺失/ 率/ ./ 在/ 查询/ 方面/ ,/ CSB/ +/ 树较/ B/ +/ 树有/ 更好/ 的/ 性能/ ./ 和/ CSS/ 树/ 相比/ ,/ CSB/ +/ 树/ 又/ 具备/ 增量/ 更新/ 的/ 能力/ ./ 但是/ ,/ 由于/ CSB/ +/ 树/ 的/ 内部/ 节点/ 的/ 子/ 节点/ 存放/ 在/ 连续/ 区域/ 中/ ,/ 在/ 更新过程/ 中/ ,/ 需要/ 进行/ 大量/ 的/ 节点/ 复制/ 操作/ ,/ 更新/ 性能/ 较差/ ./ 2007/ 年/ ,/ 基于/ 缓存/ 感知/ 的/ 思想/ ,/ LeeIg/ -/ Hoon/ 等/ 人/ 在/ T/ 树/ 的/ 基础/ 上/ 提出/ CST/ 树/ ,/ 也/ 具有/ 一定/ 的/ 性能/ 优势/ ./ 处理器/ 频率/ 的/ 大小/ 是/ 评测/ CPU/ 性能/ 最/ 重要/ 的/ Page3/ 指标/ ./ 在/ 过去/ 的/ 几十年/ 内/ ,/ 处理器/ 设计者/ 也/ 一直/ 致力于/ 提高/ 处理器/ 频率/ 的/ 工作/ ./ 从/ 1993/ ~/ 2003/ 年/ 期间/ ,/ CPU/ 的/ 频率/ 以/ 每/ 18/ 个/ 月/ 或/ 2/ 年/ 翻一番/ 的/ 速度/ 增长/ ,/ 当/ 频率/ 增长/ 到/ 4GHz/ ,/ 单核/ CPU/ 的/ 频率/ 达到/ 了/ 一个/ 极限/ [/ 11/ ]/ ./ 继续/ 提高/ 处理器/ 频率/ 将/ 导致/ 功耗/ 和/ 热量/ 以/ 指数/ 级别/ 增长/ ,/ 带来/ 的/ 影响/ 弊远/ 大于利/ ./ 多/ 核技术/ (/ ChipMultiprocessorsCMP/ )/ 有效/ 地/ 解决/ 了/ 单核/ 处理器/ 性能/ 提高/ 和/ 功耗/ 增长/ 的/ 矛盾/ ./ 多/ 核技术/ 就是/ 将/ 多个/ CPU/ 内核/ 集成/ 到/ 同/ 一块/ 芯片/ 中/ ,/ 通过/ 多个/ 频率/ 较/ 低/ 的/ 核/ 的/ 并行/ 合作/ ,/ 达到/ 较/ 高/ 的/ 处理/ 效率/ ,/ 有效/ 地/ 解决/ 了/ 功耗/ 的/ 问题/ ./ 在/ 单核/ 处理器/ 中/ ,/ 往往/ 通过/ SMT/ 机制/ 来/ 并行处理/ 多个/ 线程/ :/ 当/ 一个/ 线程/ 处于/ 等待/ 状态/ 时/ ,/ 处理器/ 处理/ 另外/ 的/ 线程/ ,/ 以/ 降低/ 线程/ 延迟/ 给/ 处理器/ 带来/ 的/ 影响/ ,/ 从而/ 提高/ 处理器/ 利用率/ ,/ 实现/ 多个/ 线程/ 并行处理/ ./ 多核/ 处理器/ 比/ 单核/ 处理器/ 有/ 更/ 强/ 的/ 并行/ 能力/ ./ 在/ 多/ 核/ 处理器/ 中/ ,/ 处理器/ 的/ 每个/ 核/ 能够/ 同时/ 并/ 独立/ 处理/ 任务/ ,/ 核/ 与/ 核/ 之间/ ,/ 是/ 真正/ 的/ 并行/ 关系/ ;/ 在/ 核/ 的/ 内部/ ,/ SMT/ 机制/ 能/ 进一步提高/ 整个/ 处理器/ 的/ 并行处理/ 能力/ ./ 在/ 多/ 核/ 处理器/ 中/ ,/ 核/ 与/ 核/ 之间/ 需要/ 进行/ 通信/ ,/ 共享/ cache/ 是/ 主流/ 的/ 通信/ 机制/ 之一/ ./ 一般/ 的/ ,/ 对于/ 含有/ 两层/ cache/ 的/ 多/ 核/ 处理器/ ,/ 每/ 一个/ 核有/ 独立/ 的/ L1cache/ ,/ 共享/ L2cache/ (/ 如图/ 1/ )/ ,/ 并/ 通过/ 连接/ 核心/ 的/ 总线/ 进行/ 通信/ ./ 多个/ 核/ 之间/ 对/ 共享/ 的/ L2cache/ 存在/ 的/ 竞争/ 关系/ ,/ 影响/ 处理器/ 的/ 性能/ ./ 多核/ 处理器/ 的/ 新/ 特性/ 给/ 开发人员/ 带来/ 了/ 新/ 的/ 挑战/ ,/ 如何/ 充分利用/ 多核/ 处理器/ 的/ 并行/ 特性/ ,/ 规避/ 资源/ 竞争/ 的/ 影响/ ,/ 尽可能/ 地/ 提高/ 每个/ 核/ 的/ 利用率/ 是/ 软件/ 开发人员/ 面临/ 的/ 一个/ 重要/ 难题/ ./ AilamakiAnastassia/ 等/ 人/ 在/ 文献/ [/ 9/ ]/ 中/ 从/ 理论/ 和/ 实验/ 两/ 方面/ ,/ 分析/ 了/ 单核/ 处理器/ 中/ 影响/ 索引/ 结构/ 性能/ 的/ 主要/ 因素/ ;/ KimKyunghwa/ 等/ 人/ 在/ 文献/ [/ 15/ ]/ 中/ 又/ 从/ 整体/ 时间/ 和/ L2/ 缓存/ 缺失/ 方面/ 比较/ 了/ B/ +/ 树/ 、/ CSB/ +/ 树/ 等/ 几种/ 主要/ 的/ 内存/ 数据库/ 索引/ 在/ 多/ 核/ 处理器/ 中/ 的/ 性能/ 表现/ ,/ 但/ 缺少/ 对/ TLB/ 缺失/ 、/ L1/ 缓存/ 缺失/ 等/ 其它/ 影响/ 索引/ 性能指标/ 的/ 测试/ 及/ 对/ 实验/ 结果/ 的/ 全面/ 分析/ ./ 3/ 程序执行/ 时间/ 消耗/ 分析/ 索引/ 结构/ 的/ 操作/ 一般/ 分为/ 3/ 种/ :/ 查询/ 、/ 更新/ 和/ 删除/ ./ 假设/ 总/ 时间/ 用/ T/ 表示/ ,/ 有效/ 指令/ 执行/ 时间/ 用/ TI/ 表示/ ,/ 存储介质/ 访问/ 时间延迟/ 用/ TM/ 表示/ ,/ 分支/ 预测/ 错误/ 延迟/ 用/ Tmisp/ 表示/ ,/ 其它/ 资源/ 访问/ 延迟/ 用/ Tother/ 表示/ ,/ 这/ 几个/ 时间延迟/ 的/ 重合/ 部分/ 用/ Toverlap/ 表示/ ,/ 我们/ 可以/ 得到/ 索引/ 操作/ 的/ 总/ 时间/ 公式/ 如下/ :/ 3.1/ 指令/ 有效/ 执行/ 时间/ 指令/ 有效/ 执行/ 时间/ 指/ CPU/ 在/ 执行/ 指令/ 时/ 耗费/ 的/ 时间/ ,/ 是/ 程序执行/ 时间/ 最/ 主要/ 的/ 部分/ ./ 不同/ 的/ 索引/ 结构/ 的/ 差异/ 关键在于/ 执行/ 的/ 指令/ 不同/ ./ 指令/ 的/ 有效/ 执行/ 时间/ 和/ 指令/ 数/ I/ 以及/ 每条/ 指令/ 执行/ 的/ 时间/ 相关/ ,/ 用/ CPI/ 来/ 表示/ 平均/ 的/ 指令/ 执行/ 时钟/ 周期/ 数/ ,/ 则/ 有/ 在/ 树结构/ 的/ 索引/ 中/ ,/ 查询/ 过程/ 的/ 指令/ 主要/ 由/ 遍历/ 树/ 过程/ 执行/ 的/ 指令/ 和/ 节点/ 内部/ 查找/ 的/ 指令/ 构成/ ./ 更新/ 和/ 删除/ 操作/ 除了/ 遍历/ 树/ 和/ 节点/ 内部/ 搜索/ 比较/ 的/ 指令/ 之外/ ,/ 还/ 包括/ 了/ 对/ 要/ 更新/ 或/ 删除/ 的/ 节点/ 的/ 更新/ 或/ 删除/ 操作/ 指令/ 以及/ 由此/ 引起/ 的/ 可能/ 的/ 数据/ 复制/ 和/ 树/ 的/ 调整/ 转置/ 等/ 指令/ ./ 3.2/ 存储介质/ 访问/ 时延/ 影响/ 性能/ 的/ 存储介质/ 主要/ 有/ 3/ 种/ :/ CPU/ 缓存/ (/ CPUcache/ )/ 、/ 快表/ (/ TranslationLook/ -/ asideBufferTLB/ )/ 以及/ 内存/ ./ 一般/ 的/ CPU/ 缓存/ 分为/ 两级/ :/ L1cache/ 和/ L2cache/ ,/ 部分/ 处理器/ 还有/ L3cache/ ,/ 由于/ 实验/ 中/ 用到/ 的/ 处理器/ 均/ 无/ L3cache/ ,/ 因此/ 本文/ 仅/ 讨论/ 包含/ L1/ 和/ L2/ 两级/ 缓存/ 的/ 情况/ ./ CPU/ 缓存/ 是/ 为了/ 缩短/ CPU/ 处理速度/ 和/ 内存/ 访问速度/ 之间/ 的/ 差异/ 而/ 设计/ 的/ ./ CPU/ 获取/ 指令/ 或/ 数据/ 时/ ,/ 先/ 从/ L1cache/ 获取/ ,/ 如果/ L1cache/ 中/ 没有/ 要/ 获取/ 的/ 内容/ (/ L1cachemiss/ )/ ,/ 则/ 从/ L2cache/ 获取/ ,/ 如果/ L2cache/ 包含/ 要/ 获取/ 的/ 内容/ ,/ 则/ 取得/ 该/ 内容/ 并/ 缓存/ 至/ L1cache/ ,/ 否则/ 从/ 内存/ 中/ 获取/ 需要/ 的/ 内容/ (/ L2cachemiss/ )/ ./ 一般/ 的/ ,/ CPU/ 从/ L1cache/ 获取数据/ 需要/ 几个/ 时钟/ 周期/ ,/ 从/ L2cache/ 获取数据/ 需要/ 几十个/ 时钟/ 周期/ ,/ 而/ 从/ 内存/ 获取/ 内容/ 则/ 需要/ 上/ 百个/ 甚至/ 上/ 千个/ 时钟/ 周期/ ./ CPU/ 执行/ 指令/ 的/ 过程/ 中/ ,/ 获取数据/ 的/ 过程/ 就是/ CPU/ 等待/ 的/ 过程/ ./ 尽管/ outoforderex/ -/ ecution/ 技术/ [/ 9/ ]/ 能够/ 减少/ 少量/ 的/ 存储/ 访问/ 延迟/ ,/ 但是/ ,/ 在/ 树结构/ 的/ 索引/ 中/ ,/ 这种/ 减少/ 几乎/ 可以/ 忽略不计/ ./ L1cache/ 和/ L2cache/ 缺失/ 仍/ 是/ 影响/ 索引/ 性能/ 的/ Page4/ 重要/ 因素/ ,/ 如何/ 尽可能/ 地/ 减小/ L1/ 和/ L2cache/ 的/ 缺失/ 率/ ,/ 是/ 数据库/ 索引/ 研究/ 的/ 一个/ 重要/ 方向/ ./ 快表是/ 页表/ 内容/ 的/ 缓存/ ./ CPU/ 要/ 先/ 根据/ 逻辑/ 地址/ 在/ 页表/ 中/ 查找/ 到/ 对应/ 的/ 物理地址/ ,/ 再/ 根据/ 物理地址/ 获取/ 需要/ 的/ 数据/ 或/ 指令/ ./ 为/ 减少/ 地址映射/ 过程/ 中/ 的/ 访问/ 延迟/ ,/ 部分/ 页表/ 内容/ 被/ 缓存/ 于/ 快表中/ ./ 进行/ 地址映射/ 时/ ,/ 先/ 查找/ 快表/ ,/ 如果/ 要/ 查找/ 的/ 地址/ 项/ 不/ 在/ 快表中/ ,/ 再/ 查找/ 页表/ ,/ 并/ 将/ 找到/ 的/ 页表/ 项/ 存入/ 快表/ ./ 快表/ 分为/ 指令/ 地址/ 快表/ 和/ 数据/ 地址/ 快表/ ./ 综上/ 可知/ ,/ 存储介质/ 的/ 访问/ 时延/ 有/ 如下/ 公式/ :/ TM/ =/ NhitL1/ ×/ latencyL1/ +/ NmissL1/ ×/ latencyL2/ +/ 其中/ ,/ NhitL1/ 表示/ 一级/ 缓存/ 的/ 命中/ 次数/ ,/ latencyL1/ 表示/ 访问/ 一级/ 缓存/ 的/ 延迟/ ,/ NmissL1/ 表示/ 一级/ 缓存/ 的/ 缺失/ 次数/ ,/ latencyL2/ 表示/ 访问/ 二级缓存/ 的/ 延迟/ ,/ NmissL2/ 表示/ 二级缓存/ 的/ 缺失/ 次数/ ,/ latencyM/ 表示/ 访问/ 内存/ 的/ 延迟/ ,/ NhitTLB/ 表示/ TLB/ 命中/ 次数/ ,/ NmissTLB/ 表示/ TLB/ 的/ 缺失/ 次数/ ,/ latencyTLB/ 表示/ 访问/ TLB/ 的/ 延迟/ ./ 其中/ ,/ 一级/ 缓存/ 缺失/ 的/ 延迟/ ,/ 二级缓存/ 缺失/ 延迟/ 和/ 数据/ 地址/ 快表/ 的/ 缺失/ 延迟/ 是/ 访问/ 存储介质/ 时间延迟/ 的/ 主要/ 部分/ ,/ 本文/ 的/ 实验/ 也/ 主要/ 关注/ 这/ 三个/ 部分/ ./ 在/ 文章/ 接下来/ 的/ 部分/ 中/ ,/ TLB/ 均/ 指/ 数据/ 地址/ 快表/ ./ 3.3/ 分支/ 预测/ 错误/ 延迟/ CPU/ 在/ 处理/ 分支/ 指令/ 的/ 时候/ ,/ 总是/ 先/ 预测/ 一个/ 分支/ 并/ 开始/ 执行/ ,/ 当/ 分支/ 条件/ 判断/ 完成/ 之后/ ,/ 再/ 判断/ 分支/ 预测/ 是否/ 正确/ ,/ 如果/ 正确/ 则/ 继续执行/ 分支/ ,/ 否则/ ,/ 将/ 结束/ 预测/ 分支/ 的/ 执行/ 并/ 回滚/ 已经/ 完成/ 的/ 操作/ ./ 分支/ 预测/ 能够/ 有效/ 地/ 提高/ 流水线/ 的/ 吞吐量/ ,/ 但是/ 如果/ 分支/ 预测/ 错误/ (/ branchmispredictions/ )/ 频率/ 过高/ ,/ 将/ 影响/ 算法/ 的/ 整体/ 性能/ ./ 在/ 数据库/ 索引/ 的/ 查询/ 、/ 更新过程/ 中/ ,/ 节点/ 分支/ 的/ 选择/ 、/ 节点/ 内部/ 的/ 比较/ 操作/ 将/ 产生/ 大量/ 的/ 分支/ 指令/ ,/ 分支/ 预测/ 错误/ 延迟/ 成为/ 影响/ 索引/ 性能/ 不可/ 忽视/ 的/ 重要/ 因素/ ./ 在/ 实验/ 中/ ,/ 我们/ 主要/ 从/ 执行/ 时间/ 、/ L1/ 和/ L2/ 缓存/ 缺失/ 、/ TLB/ 的/ 缺失/ 及/ 分支/ 预测/ 错误/ 数目/ 等/ 方面/ 比表/ 1/ 实验/ 机器/ 指标/ cycleL2cacheL2cacheline/ // B/ 处理器/ 速度/ // 机器/ A2/ ./ 33432KBx4/ 机器/ B3/ ./ 4216KBx2/ 机器/ C2/ ./ 418KB/ 较/ 不同/ 索引/ 结构/ 在/ 不同/ 的/ 处理器/ 环境/ 以及/ 不同/ 的/ 数据/ 输入/ 、/ 不同/ 的/ 节点/ 大小/ 等/ 多种/ 情况/ 下/ 的/ 性能/ 差异/ ./ 4/ 实验设计/ 4.1/ 实验/ 的/ 软件/ 环境/ 如下/ 的/ 实验/ :/ 本文/ 选取/ 了/ B/ +/ 树/ 、/ T/ 树/ 、/ CSS/ 树/ 、/ CSB/ +/ 树/ 进行/ (/ 1/ )/ 比较/ 这/ 4/ 种/ 索引/ 在/ 多/ 核/ 环境/ 下/ 的/ 性能/ 表现/ ,/ 测试/ 内容/ 包括/ 整体/ 的/ 执行/ 时间/ 、/ 缓存/ 缺失/ 、/ 分支/ 预测/ 错误/ 等/ 指标/ ,/ 并/ 分析/ 产生/ 性能/ 差异/ 的/ 原因/ ;/ (/ 2/ )/ 比较/ 多核/ 环境/ 下/ ,/ 同一/ 索引/ 结构/ 在/ 线性/ 数据/ 和/ 随机/ 数据/ 等/ 不同/ 的/ 数据/ 输入/ 情况/ 下/ ,/ 查询/ 和/ 更新/ 的/ 不同/ 表现/ ,/ 分析/ 数据/ 特点/ 给/ 索引/ 性能/ 带来/ 的/ 影响/ ;/ (/ 3/ )/ 比较/ 多核/ 环境/ 下/ ,/ 同一/ 索引/ 结构/ 在/ 相同/ 硬件/ 条件/ 下/ 随/ 节点/ 大小/ 变化/ 产生/ 的/ 性能/ 差异/ ,/ 分析/ 节点/ 大小/ 给/ 索引/ 性能/ 带来/ 的/ 影响/ ;/ (/ 4/ )/ 比较/ 相同/ 条件/ 下/ 同一/ 索引/ 结构/ 在/ 不同/ 机器/ 中/ 的/ 表现/ ,/ 分析/ 不同/ 处理器/ 指标/ ,/ 如/ 缓存/ 大小/ 等/ 对/ 索引/ 性能/ 的/ 影响/ ,/ 分析/ 多/ 核技术/ 对/ 索引/ 性能/ 的/ 影响/ ./ 实验/ 中/ ,/ B/ +/ 树/ 、/ CSS/ 树/ 、/ CSB/ +/ 树/ 选择/ RaoJun/ 等/ 人/ 在/ 文献/ [/ 4/ ]/ 中/ 使用/ 的/ 版本/ ,/ T/ 树/ 选择/ FastDB/ 中/ T/ 树/ 的/ 实现/ ./ 由于/ 选取/ 的/ CSB/ +/ 树/ 实现/ 的/ 删除/ 操作/ 为/ lazydelete/ ,/ 删除/ 的/ 过程/ 和/ 查询/ 的/ 过程/ 基本一致/ ,/ 故/ 本文/ 的/ 实验/ 均/ 只/ 比较/ 更新/ 和/ 查询/ 操作/ 的/ 性能/ ./ 每/ 部分/ 实验/ 均/ 进行/ 10000000/ 次/ ,/ 将/ 测得/ 的/ 数据/ 取/ 平均值/ 作为/ 每次/ 操作/ 的/ 指标/ 进行/ 比较/ 分析/ ./ 实验/ 系统/ 为/ Windows2003Standard/ ,/ 各项/ 指标/ 通过/ IntelVTunePerformanceAnalysis9/ ./ 0/ 采集/ ./ 4.2/ 实验/ 的/ 硬件/ 环境/ 实验/ 选取/ 3/ 台/ 处理器/ 不同/ 的/ 机器/ ,/ 型号/ 分别/ 为/ Intel/ ?/ CoreTM2QuadCPU/ 、/ Intel/ ?/ Pentium/ ?/ DCPU/ 、/ Intel/ ?/ Pentium/ ?/ 4CPU/ ,/ 用/ A/ 、/ B/ 、/ C/ 表示/ 这/ 3/ 台/ 机器/ ,/ 通过/ SisoftwareSandra2010/ ./ SP1d/ 和/ RightMarkMemoryAnalyzerV3/ ./ 8/ 测得/ 硬件/ 指标/ 如表/ 1/ 所示/ ./ 指标/ Page55/ 实验/ 结果/ 分析/ 5.14/ 种/ 索引/ 结构/ 的/ 性能/ 比较/ 这/ 一部分/ 实验/ 比较/ 在/ 多/ 核/ 环境/ 下/ ,/ 4/ 种/ 索引/ 结构/ 的/ 性能/ 表现/ ./ 实验/ 分成/ 查询/ 和/ 更新/ 两个/ 部分/ ,/ 由于/ CSS/ 树是/ 静态/ 索引/ 结构/ ,/ 所以/ 在/ 更新/ 操作/ 的/ 比较/ 中/ ,/ 我们/ 仅/ 比较/ B/ +/ 树/ 、/ CSB/ +/ 树/ 以及/ T/ 树/ 的/ 性能/ 差异/ ./ 复/ 的/ 随机数/ ./ 更新/ 操作/ :/ 从空/ 结构/ 开始/ ,/ 插入/ 10000000/ 不重/ 查询/ 操作/ :/ 构建/ 包含/ 10000000/ 个/ 关键字/ (/ key/ )/ 图/ 2/ 机器/ B/ 查询/ 时间/ 比较/ 图/ 3/ 机器/ B/ 更新/ 时间/ 比较/ 从图/ 2/ (/ a/ )/ 中/ 可以/ 看到/ ,/ 在/ 多/ 核/ 环境/ 中/ ,/ TLB/ 以及/ L1/ 、/ L2/ 缓存/ 缺失/ 带来/ 的/ 时间延迟/ 在/ 整体/ 的/ 时间/ 中/ 仍/ 占/ 很大/ 比重/ ,/ 以/ B/ +/ 树为例/ ,/ 平均/ 每次/ 查询/ 中/ ,/ TLB/ 缺失/ 带来/ 的/ 时间延迟/ 约/ 为/ 1038/ 个/ 时钟/ 周期/ ,/ 约/ 占/ 整体/ 时间/ 的/ 1/ // 3/ ;/ L1cache/ 缺失/ 带来/ 的/ 时间延迟/ 约/ 为/ 566/ 个/ 时钟/ 周期/ ,/ 约/ 占/ 整体/ 时间/ 的/ 1/ // 6/ ;/ 由于/ 机器/ B/ 有/ 较大/ 的/ 二级缓存/ ,/ 因此/ L2cachemiss/ 带来/ 的/ 时间延迟/ 相对/ 较少/ ./ 由/ 分支/ 预测/ 错误/ 及/ 缓存/ 缺失/ 带来/ 的/ 时间延迟/ ,/ 占/ 整体/ 时间/ 的/ 1/ // 3/ ~/ 1/ // 2/ 左右/ ./ 从图/ 2/ 中/ 可以/ 知道/ ,/ 在/ 查询/ 方面/ ,/ CSS/ 树/ 的/ 性能/ 是/ 最好/ 的/ ./ 这/ 是因为/ CSS/ 树/ 树结构/ 的/ 连续/ 存储/ 提高/ 了/ TLB/ 的/ 命中率/ 和/ 缓存/ 命中率/ ,/ 因此/ ,/ 在/ 各项/ 指标/ 上/ ,/ CSS/ 都/ 有着/ 比较突出/ 的/ 优势/ ./ CSB/ +/ 树/ 采用/ 连续/ 的/ 树结构/ ,/ 进行/ 10000000/ 次/ 查询/ 操作/ ,/ 查询/ 的/ 关键字/ 随机/ 生成/ ./ 以/ 时钟/ 周期/ 为/ 单位/ ,/ 可以/ 得到/ 图/ 2/ 、/ 图/ 3/ 所示/ 机器/ B/ 的/ 实验/ 结果/ ./ (/ a/ )/ 表示/ 平均/ 每次/ 查询/ 或/ 更新/ 时间/ 构成/ ,/ 其中/ clockticks/ 表示/ 处理器/ 两个/ 核/ 执行/ 指令/ 花费/ 的/ 总/ 时钟/ 周期/ ;/ L1cachemiss/ 表示/ 总/ 的/ L1/ 缓存/ 缺失/ 的/ 延迟/ ;/ L2cachemiss/ 表示/ 总/ 的/ L2/ 缓存/ 缺失/ 延迟/ ;/ TLBmiss/ 表示/ 总/ 的/ TLB/ 缺失/ 延迟/ ;/ branchmisprediction/ 表示/ 总/ 的/ 分支/ 预测/ 错误/ 延迟/ ,/ 我们/ 假设/ 每次/ 分支/ 预测/ 错误/ 需/ 花费/ 10/ 个/ 时钟/ 周期/ 来/ 处理/ ./ (/ b/ )/ 表示/ 每个/ 核/ 分别/ 的/ 处理/ 时间/ ./ 的/ 区域/ 来/ 存储/ 节点/ 的/ 子/ 节点/ ,/ TLB/ 缺失/ 比/ B/ +/ 树少/ ;/ 同时/ 减少/ 了/ 指针/ 的/ 使用/ ,/ 提高/ 了/ 节点/ 的/ 利用率/ ,/ 在/ 查询/ 过程/ 中/ ,/ CSB/ +/ 树/ 访问/ 的/ 内存/ 页/ 较/ 少/ ,/ 产生/ L1/ 、/ L2/ 缺失/ 概率/ 也/ 相应/ 较/ 小/ ;/ 而/ T/ 树/ 的/ TLB/ 以及/ L1/ 、/ L2/ 缓存/ 缺失/ 最/ 多/ ,/ 体现/ 出/ 最差/ 的/ 性能/ ./ 图/ 3/ 是/ 以/ 时钟/ 周期/ 为/ 单位/ 的/ 平均/ 每次/ 更新/ 的/ 时间/ 构成/ ./ 从图/ 3/ 中/ 可以/ 看到/ ,/ 在/ 索引/ 结构/ 的/ 更新/ 操作/ 中/ ,/ 存储介质/ 的/ 访问/ 延迟/ 对/ 索引/ 性能/ 影响/ 很大/ ,/ L2cache/ 缺失/ 的/ 影响/ 也/ 更为/ 明显/ ./ 这/ 是因为/ 在/ 更新/ 操作过程/ 中/ ,/ 需要/ 进行/ 大量/ 的/ 节点/ 分裂/ (/ 如/ B/ +/ 树/ ,/ CSB/ +/ 树/ )/ ,/ 或者/ 节点/ 的/ 旋转/ 调整/ (/ 如/ T/ 树/ )/ ,/ 这些/ 操作/ 带来/ 大量/ 的/ 内存/ 的/ 分配/ 和/ 释放/ ,/ 更新过程/ 访问/ 的/ 内存/ 页/ 比较/ 多/ ,/ 产生/ 更/ 多/ 的/ TLB/ 及/ L1/ 、/ L2/ 缓存/ Page6/ 缺失/ ./ 对于/ CSB/ +/ 树/ 而言/ ,/ 由于/ 将/ 所有/ 的/ 节点/ 的/ 子/ 节点/ 都/ 存放/ 在/ 连续/ 区域/ ,/ 在/ 节点/ 分裂/ 的/ 时候/ ,/ 较/ B/ +/ 树/ 需要/ 更/ 多/ 的/ 内存/ 复制/ 的/ 操作/ ,/ 所以/ CSB/ +/ 树/ 更新过程/ 的/ 指令/ 执行/ 时间/ 及/ 内存/ 访问/ 次数/ 都/ 比/ B/ +/ 树多/ ,/ 产生/ 的/ 缓存/ 缺失/ 和/ TLB/ 缺失/ 的/ 也/ 比较/ 多/ ./ 从本节/ 实验/ 可以/ 看到/ ,/ 当/ L2cache/ 达到/ 2Mx2/ 大/ 小时/ ,/ L2cache/ 缺失/ 对/ 索引/ 查询/ 性能/ 的/ 影响/ 很小/ ;/ 而/ 无论是/ 在/ 查询/ 还是/ 更新/ 操作/ ,/ 索引/ TLB/ 缺失/ 和/ L1cache/ 缺失/ 对/ 索引/ 性能/ 的/ 影响/ 都/ 很大/ ,/ 因此/ ,/ 对/ 索引/ 性能/ 的/ 改进/ 应/ 更/ 注意/ 考虑/ 减少/ TLB/ 和/ L1cache/ 的/ 缺失/ ,/ 尤其/ 要/ 减小/ TLB/ 缺失/ 带来/ 的/ 时间延迟/ ./ 5.2/ 不同/ 输入/ 对/ 索引/ 性能/ 的/ 影响/ 这部分/ 的/ 实验/ 主要/ 考察/ 在/ 多/ 核/ 环境/ 中/ ,/ 不同/ 的/ 数据/ 输入/ 特征/ 给/ 索引/ 结构/ 性能/ 带来/ 的/ 影响/ ./ 实验/ 也/ 分为/ 查询/ 操作/ 和/ 更新/ 操作/ 两/ 部分/ ./ 查询/ 操作/ :/ 构建/ 包含/ 10000000/ 个/ 关键字/ 的/ 树结构/ ,/ 查询/ 的/ 数据/ 有/ 3/ 种/ :/ ①/ 线性/ 数据/ ./ 数据/ 按照/ 1/ ~/ 10000000/ 顺序/ 查询/ ;/ ②/ 随机/ 数据/ ./ 随机/ 生成/ 10000000/ 个/ 10000000/ 以内/ 的/ 随机/ 数据/ 进行/ 查询/ ;/ ③/ 按/ 概率/ 生成/ 数据/ ./ 概率/ 参考文献/ [/ 4/ ]/ 中/ 所用/ 的/ 概率函数/ ,/ Ni/ =/ i1/ ./ 3/ 更新/ 操作/ :/ 更新/ 的/ 数据类型/ 分为/ 随机/ 不/ 重复/ 的/ 数据/ 和/ 连续/ 的/ 线性/ 数据/ 两种/ ./ 两种/ 数据/ 都/ 为/ 10000000/ 条/ ,/ 从空/ 的/ 树结构/ 开始/ 更新/ ./ 图/ 4/ 和/ 图/ 5/ 分别/ 表示/ 机器/ B/ 中/ 平均/ 每次/ 查询/ 和/ 更新/ 所有/ 核/ 总/ 的/ 相关/ 指标值/ ./ 其中/ ,/ (/ a/ )/ 表示/ 总/ 的/ 时钟/ 周期/ ,/ (/ b/ )/ 表示/ 总/ 的/ 缓存/ 缺失/ (/ 包括/ L1cache/ 、/ L2cache/ 、/ TLB/ 之/ 和/ )/ 带来/ 的/ 时间延迟/ (/ 以/ 时钟/ 周期/ 为/ 单位/ )/ ,/ (/ c/ )/ 表示/ 分支/ 预测/ 错误/ 数目/ ./ 从图/ 4/ 的/ 3/ 个/ 图/ 可以/ 看到/ ,/ 线性/ 数据/ 和/ 以/ 概率/ 产生/ 的/ 数据/ 由于/ 相邻/ 两个/ 查询/ 关键字/ 比较/ 接近/ 甚至/ 重合/ ,/ 查询/ 过程/ 中/ 遍历/ 的/ 路径/ 的/ 重合/ 度/ 比较/ 高/ ,/ 访问/ 相同/ 节点/ 的/ 概率/ 也/ 相应/ 增高/ ,/ 因此/ 具有/ 较/ 高/ 缓存/ 命中率/ ;/ 临近/ 的/ 查询/ 关键字/ 值/ 比较/ 接近/ ,/ 选择/ 同样/ 分支/ 的/ 概率/ 也/ 大大/ 增高/ ,/ 分支/ 预测/ 正确率/ 也/ 随之/ 提高/ ./ 由此可见/ ,/ 在/ 批量/ 查询/ 中/ ,/ 处理/ 顺序/ 的/ 或/ 数据/ 重合/ 度/ 较/ 高/ 的/ 数据/ 时/ ,/ 索引/ 的/ 整体/ 性能/ 要/ 比/ 处理/ 随机/ 数据/ 好/ ./ 在/ 大部分/ 情况/ 下/ ,/ 由于/ 概率/ 产生/ 的/ 数据/ 重合/ 度/ 比较/ 高/ ,/ 产生/ 的/ 缓存/ 命中率/ 和/ 分支/ 预测/ 正确率/ 都/ 较/ 线性/ 数据/ 高/ ,/ 索引/ 具备/ 有/ 更好/ 的/ 性能/ ./ 从图/ 5/ 可以/ 看到/ ,/ 由于/ 更新过程/ 中树/ 的/ 遍历/ 操作/ 在/ 整体/ 操作/ 中/ 占/ 很大/ 比重/ ,/ 线性/ 数据/ 的/ 更新/ ,/ 较/ 随机/ 数据/ 的/ 更新/ ,/ 临近/ 更新/ 遍历/ 树/ 过程/ 中/ 访问/ 相同/ 节/ Page7/ 点/ 的/ 概率/ 增大/ ,/ 因此/ 在/ 缓存/ 命中/ 等/ 指标/ 上/ 性能/ 优势/ 都/ 较/ 突出/ ,/ 具有/ 更好/ 的/ 整体/ 性能/ ./ 从本/ 实验/ 可以/ 知道/ ,/ 在/ 批量/ 查询/ 或者/ 更新/ 的/ 时候/ ,/ 对/ 关键字/ 进行/ 排序/ ,/ 是/ 提高/ 整体/ 处理/ 性能/ 的/ 一个/ 较为简单/ 而/ 有效/ 的/ 方法/ ./ 这种/ 方法/ 同样/ 适用/ 于/ 单核/ 处理器/ 的/ 机器/ C/ 和/ 四核/ 处理器/ 的/ 机器/ A/ 中/ ./ 5.3/ 节点/ 大小/ 对/ 索引/ 性能/ 的/ 影响/ 从/ 文献/ [/ 8/ ]/ 中/ 可以/ 知道/ ,/ 在/ 单核/ 环境/ 中/ ,/ 索引/ 性能/ 随着/ 节点/ 的/ 增大/ 而/ 提高/ ;/ 本/ 节/ 实验/ ,/ 我们/ 将/ 比较/ 分析/ 在/ 多/ 核/ 环境/ 中/ ,/ B/ +/ 树/ 、/ CSB/ +/ 树/ 、/ T/ 树/ 随着/ 节点/ 大小/ 的/ 变化/ ,/ 查询/ 和/ 更新/ 性能/ 的/ 变化趋势/ ./ 查询/ 操作/ :/ 构建/ 包含/ 10000000/ 个/ 关键字/ 的/ 树结构/ ,/ 进行/ 10000000/ 次/ 查询/ ,/ 查询/ 关键字/ 随机/ 生成/ ,/ 图/ 6/ 不同/ 节点/ 大小/ 的/ 查询/ 性能/ 比较/ 从图/ 6/ (/ b/ )/ 、/ (/ c/ )/ 中/ 可以/ 看到/ ,/ 随着/ 节点/ 的/ 增大/ ,/ 3/ 种/ 索引/ 结构/ 的/ L1/ 缓存/ 和/ L2/ 缓存/ 缺失/ 延迟/ 都/ 随之/ 减少/ ./ 这/ 是因为/ 当/ 节点/ 增大/ 时/ ,/ 每个/ 节点/ 能/ 存放/ 的/ 关键字/ 的/ 数目/ 增大/ ,/ 节点/ 被/ 重复/ 选择/ 的/ 概率/ 增大/ ;/ 同时/ 节点/ 增大/ ,/ 树高/ 减小/ ,/ 查询/ 遍历/ 树/ 的/ 过程/ 中/ 访问/ 节点/ 的/ 数目/ 也/ 减少/ ,/ 尽管/ 随着/ 节点/ 增大/ 访问/ 每个/ 节点/ 所/ 所有/ 查询/ 操作/ 使用/ 统一/ 的/ 实验/ 数据/ ./ 更新/ 操作/ :/ 更新/ 10000000/ 个/ 不/ 相等/ 的/ 随机/ 关键字/ ,/ 所有/ 更新/ 操作/ 使用/ 统一/ 的/ 实验/ 数据/ ./ 节点/ 的/ 大小/ 从/ 64bytes/ 开始/ ,/ 每次/ 增加/ 32bytes/ ,/ 直至/ 1024bytes/ ,/ 由于/ 机器/ A/ 和/ 机器/ B/ 中/ 的/ 实验/ 结果/ 基本一致/ ,/ 故仅/ 选择/ 机器/ B/ 的/ 结果/ 进行/ 分析/ ./ 图/ 6/ 、/ 图/ 7/ 分别/ 表示/ 在/ 查询/ 和/ 更新/ 操作/ 中/ 随着/ 节点/ 大小/ 变化/ 指标/ 发生/ 的/ 变化/ ./ (/ a/ )/ 表示/ 每个/ 查询/ 或/ 更新/ 操作/ 所有/ 核/ 花费/ 的/ 总/ 时钟/ 周期/ 变化/ 情况/ ,/ (/ b/ )/ 表示/ 每个/ 查询/ 或/ 更新/ 操作/ 总/ 的/ L1/ 缓存/ 缺失/ 延迟/ ,/ (/ c/ )/ 表示/ 总/ 的/ L2/ 缓存/ 缺失/ 变化/ ,/ (/ d/ )/ 表示/ 总/ 的/ TLB/ 缺失/ 延迟/ 的/ 变化/ 情况/ ,/ (/ e/ )/ 表示/ 总/ 的/ 分支/ 预测/ 指令/ 错误/ 数/ 变化/ 情况/ ,/ 延迟/ 均/ 以/ 时钟/ 周期/ 为/ 单位/ ./ 产生/ 的/ 缓存/ 缺失/ 率/ 可能/ 提高/ ,/ 但/ 当树/ 高及/ 每个/ 节点/ 关键字/ 数目/ 增多/ 带来/ 节点/ 重复/ 访问/ 的/ 影响/ 更大时/ ,/ L1/ 缓存/ 和/ L2/ 缓存/ 的/ 命中率/ 就/ 会/ 随之/ 增大/ ./ 当/ 节点/ 较/ 小时/ ,/ 同样/ 规模/ 关键字/ 索引/ 结构/ 的/ 节点/ 数目/ 比较/ 多/ ./ 由于/ 节点/ 的/ 内存/ 是/ 动态分配/ 的/ ,/ 所以/ 节点/ 占用/ 内存/ 页/ 的/ 数目/ 也/ 相应/ 较/ 多/ ,/ 查询/ 操作/ 要/ 访问/ 的/ Page8/ 图/ 7/ 不同/ 节点/ 大小/ 的/ 更新/ 性能/ 比较/ 内存/ 页/ 也/ 相应/ 增多/ ,/ 当/ 节点/ 增大/ 时/ ,/ 访问/ 的/ 内存/ 页/ 的/ 数目/ 减小/ ,/ 产生/ TLB/ 缺失/ 的/ 概率/ 也/ 就/ 相应/ 的/ 比较/ 小/ ./ 如图/ 6/ (/ d/ )/ 所示/ ,/ 随着/ 节点/ 的/ 增大/ ,/ TLB/ 缺失/ 减小/ ./ 从图/ 6/ (/ e/ )/ 中/ 可以/ 看到/ ,/ 随着/ 节点/ 增大/ ,/ 树高/ 减小/ ,/ 查询/ 过程/ 中/ 产生/ 的/ 分支/ 指令/ 相应/ 的/ 减少/ ,/ 分支/ 预测/ 错误/ 的/ 概率/ 也/ 随之/ 减小/ ./ B/ +/ 树/ 和/ T/ 树/ 的/ 更新过程/ 主要/ 是/ 树/ 的/ 遍历/ 查找/ 过程/ ,/ 因此/ 如图/ 7/ 中/ (/ b/ )/ ~/ (/ e/ )/ 所示/ ,/ 在/ L1/ 、/ L2/ 缓存/ 缺失/ 延迟/ 、/ TLB/ 缺失/ 延迟/ 以及/ 分支/ 预测/ 错误/ 方面/ ,/ B/ +/ 树/ 和/ T/ 树/ 的/ 查询/ 和/ 更新/ 所/ 表现/ 出来/ 的/ 趋势/ 基本一致/ ,/ 更新/ 操作/ 的/ 整体/ 性能/ 也/ 随着/ 节点/ 的/ 增大/ 有所提高/ ;/ 节点/ 的/ 增大/ ,/ 也/ 给/ B/ +/ 树/ 的/ 分裂/ 过程/ 以及/ T/ 树/ 的/ 旋转/ 过程/ 带来不利/ 的/ 影响/ ,/ 节点/ 越大/ ,/ 分裂/ 和/ 旋转/ 过程/ 中/ 需要/ 复制/ 的/ 数据/ 越/ 多/ ,/ 因此/ 在/ 更新/ 的/ 操作/ 中/ ,/ 节点/ 的/ 增大/ 带来/ 的/ 性能/ 优化/ 不/ 甚/ 明显/ ./ 从图/ 7/ (/ b/ )/ 、/ (/ c/ )/ 可以/ 看到/ ,/ CSB/ +/ 树/ 的/ L1/ 和/ L2/ 缓存/ 缺失/ 随着/ 节点/ 的/ 增大/ 而/ 增多/ ,/ 这/ 是因为/ ,/ CSB/ +/ 树/ 更新/ 时/ 可能/ 的/ 节点/ 分裂/ 操作/ ,/ 需/ 进行/ 大量/ 的/ 节点/ 复制/ 操作/ ,/ 访问/ 较/ 多/ 的/ 内存/ 页/ ./ 节点/ 越大/ ,/ 复制/ 的/ 内容/ 越/ 多/ ,/ 访问/ 的/ 内存/ 页/ 也/ 就/ 越/ 多/ ,/ 由此/ 带来/ 的/ L1/ 、/ L2/ 缓存/ 缺失/ 也/ 就/ 越/ 多/ ./ 从图/ 7/ (/ d/ )/ 中/ 可以/ 看到/ ,/ 当/ 节点/ 小于/ 某个/ 值时/ ,/ 节点/ 增大/ 没有/ 增加/ 内部/ 查找/ 时/ 内存/ 页/ 的/ 访问/ 数/ ,/ 但/ 随着/ 节点/ 增大/ ,/ 树/ 的/ 高度/ 减小/ ,/ 因此/ 更新/ 时/ 遍历/ 树/ 的/ 过程/ 中/ 访问/ 的/ 总/ 的/ 内存/ 页/ 数目/ 减少/ ,/ TLB/ 缺失/ 随之/ 减小/ ;/ 随着/ 节点/ 继续/ 增大/ ,/ 节点/ 内部/ 查找/ 及/ 节点/ 复制/ 所/ 访问/ 的/ 内存/ 页/ 增多/ ,/ 超过/ 了/ 树高/ 减小/ 带来/ 的/ 好处/ ,/ TLB/ 缺失/ 就/ 随之/ 增大/ ./ 当/ 复制/ 操作/ 成为/ 影响/ 索引/ 性能/ 的/ 最/ 主要/ 因素/ 时/ ,/ 索引/ 性能/ 降低/ ./ 如图/ 7/ (/ a/ )/ 所示/ ,/ CSB/ +/ 树/ 的/ 更新/ 性能/ 随着/ 节点/ 的/ 增大/ 而/ 变差/ ./ 综合/ 图/ 6/ 、/ 图/ 7/ 的/ (/ b/ )/ ~/ (/ e/ )/ 可以/ 知道/ ,/ 随着/ 节点/ 的/ 增大/ ,/ B/ +/ 树/ 和/ T/ 树/ 节点/ 查询/ 和/ 更新过程/ 中/ 所/ 产生/ 的/ L1/ 、/ L2/ 缓存/ 缺失/ 、/ TLB/ 缺失/ 、/ 分支/ 预测/ 错误/ 都/ 相应/ 的/ 减少/ ,/ 查询/ 的/ 整体/ 性能/ 随之/ 提高/ ./ 但是/ ,/ 随着/ 节点/ 不断/ 增大/ ,/ 节点/ 的/ 利用率/ 逐渐/ 降低/ ,/ 节点/ 大小/ 的/ 增大/ 带来/ 有利/ 影响/ (/ 包括/ 树高/ 减小/ 和/ 节点/ 被/ 重复/ 选择/ 的/ 概率/ 增大/ )/ 和/ 不利/ 影响/ (/ 访问/ 单个/ 节点/ 产生/ 更/ 多/ 的/ 缓存/ 缺失/ )/ 差距/ 越来越/ 小/ ,/ L1/ 、/ L2/ 缓存/ 缺失/ 和/ 快表/ Page9/ 缺失/ 的/ 减小/ 趋于/ 平缓/ ;/ 而且/ 随着/ 节点/ 增大/ ,/ 每个/ 节点/ 的/ 关键字/ 增多/ ,/ 节点/ 内部/ 二分/ 查找/ 的/ 时间/ 消耗/ 也/ 越来越/ 多/ ,/ 整体/ 性能/ 提高/ 也/ 趋于/ 平缓/ ./ 此外/ ,/ 节点/ 增大/ ,/ 节点/ 利用率/ 降低/ ,/ 构建/ 树所/ 耗用/ 的/ 内存/ 也/ 逐渐/ 增加/ ,/ 节点/ 大小/ 的/ 选择/ ,/ 应该/ 综合/ 考虑/ 性能/ 提高/ 的/ 速率/ 和/ 节点/ 的/ 利用率/ ./ 从/ 实验/ 可以/ 看到/ ,/ 在/ 节点/ 大小/ 是/ 二级缓存/ 块/ 大小/ 1/ ~/ 3/ 倍/ 时/ ,/ 索引/ 查询/ 和/ 更新/ 性能/ 提高/ 最快/ ./ 多核/ 环境/ 中/ 索引/ 性能/ 随/ 节点/ 大小/ 变化/ 的/ 趋势/ 和/ 单核/ 环境/ 基本一致/ ./ 从/ 5.1/ ~/ 5.3/ 节/ 的/ 实验/ 中/ ,/ 我们/ 可以/ 看到/ ,/ 在/ 多/ 核/ 环境/ 中/ ,/ 传统/ 的/ 内存/ 数据库/ 索引/ 之间/ 性能/ 对比/ 及/ 同一/ 索引/ 在/ 不同/ 的/ 数据/ 输入/ 和/ 节点/ 大小/ 等/ 情况/ 下/ 的/ 性能/ 变化/ ,/ 表现/ 出/ 和/ 单核/ 基本一致/ 的/ 结果/ ./ 这/ 是因为/ ,/ 现有/ 的/ 索引/ 的/ 查询/ 和/ 更新/ 操作/ ,/ 均/ 是/ 单线程/ 操作/ ,/ 多核/ 处理器/ 环境/ 中/ ,/ 操作系统/ 在/ 执行/ 指令/ 时/ ,/ 能够/ 根据/ 核/ 的/ 负载/ 情况/ ,/ 选择/ 合适/ 的/ 核来/ 执行/ ./ 从/ 5.1/ 节/ 的/ 实验/ 中/ ,/ 我们/ 看到/ ,/ 指令/ 是/ 被/ 分发/ 到/ 不同/ 的/ 核中/ 进行/ 处理/ 的/ ,/ 多核/ 协作/ 提高/ 了/ 索引/ 操作/ 线程/ 的/ 指令/ 被/ 选择/ 的/ 概率/ ,/ 一定/ 程度/ 上/ 减少/ 了/ 线程/ 执行/ 的/ 时间跨度/ ./ 但是/ ,/ 除了/ 和/ 单核/ 处理器/ 一样/ 由/ outoforderexecution/ 技术/ 带来/ 少量/ 的/ 指令/ 并行/ 以外/ ,/ 同一个/ 操作/ 线程/ 中/ 的/ 不同/ 阶段/ 的/ 指令/ 是/ 串行/ 执行/ 的/ ,/ 因而/ 在/ 多/ 核/ 处理器/ 中/ 表现/ 出/ 和/ 单核/ 处理器/ 基本一致/ 的/ 趋势/ 和/ 现象/ ./ 为了/ 充分利用/ 多核/ 处理器/ 的/ 并发/ 能力/ ,/ 需要/ 对/ 原有/ 的/ 索引/ 进行/ 并发/ 改进/ ,/ 改进/ 可以/ 从/ 以下/ 几个/ 方面/ 入手/ :/ (/ 1/ )/ 改进/ 索引/ 结构/ ,/ 将/ 单路/ 查询/ 转为/ 多路/ 查询/ ,/ 每/ 一路/ 查询/ 用/ 独立/ 的/ 线程/ 处理/ ;/ (/ 2/ )/ 分解/ 每个/ 查询/ 或/ 更新/ 任务/ ,/ 如/ 并行处理/ 二分/ 查找/ 过程/ 等/ ;/ (/ 3/ )/ 对于/ 批量/ 查找/ 或者/ 更新/ 的/ 任务/ ,/ 将/ 任务/ 分组/ ,/ 并行处理/ 每个/ 任务/ 组/ ./ 图/ 8/ 不同/ 处理器/ B/ +/ 树/ 的/ 查询/ 性能/ 比较/ 这/ 一部分/ 实验/ ,/ 比较/ 不同/ 的/ 硬件/ 环境/ 下/ 索引/ 结/ 5.4/ 不同/ 硬件/ 环境/ 对/ 索引/ 结构/ 性能/ 的/ 影响/ 构/ 的/ 性能/ 差异/ ./ 实验/ 分为/ 查询/ 和/ 更新/ 两种/ 操作/ ./ 查询/ 操作/ :/ 构建/ 包含/ 10000000/ 个/ 关键字/ 的/ 索引/ 并/ 进行/ 10000000/ 次/ 查询/ ,/ 查询/ 关键字/ 随机/ 生成/ ;/ 更新/ 操作/ :/ 从空/ 结构/ 开始/ ,/ 更新/ 10000000/ 个/ 不/ 重复/ 的/ 随机数/ ./ 由于/ 未/ 进行/ 并发/ 改进/ 的/ 索引/ 在/ 多/ 核/ 处理器/ 中/ 指令/ 的/ 执行/ 基本/ 是/ 串行/ 的/ ,/ 指令/ 执行/ 的/ 速度/ 主要/ 和/ 处理器/ 频率/ 相关/ 而/ 与/ 多/ 核/ 的/ 特性/ 基本/ 无关/ ,/ 因此/ ,/ 在/ 这个/ 实验/ 中/ ,/ 我们/ 仅/ 比较/ CSB/ +/ 树/ 、/ B/ +/ 树/ 、/ T/ 树/ 每次/ 查询/ 和/ 更新/ 的/ L1/ 、/ L2/ 缓存/ 缺失/ 次数/ 、/ TLB/ 缺失/ 次数/ 、/ 分支/ 预测/ 错误/ 数目/ 4/ 种/ 指标/ ./ 机器/ A/ 的/ TLBentries/ 是/ 机器/ B/ 和/ C/ 的/ 4/ 倍/ ,/ 为了/ 更/ 直观/ 的/ 比较/ ,/ 将/ 机器/ A/ 实际/ 测得/ 的/ TLB/ 缺失/ 数/ 乘以/ 4/ 作为/ 实验/ 结果/ ./ 不同/ 索引/ 的/ 对比/ 结果/ 基本一致/ ,/ 鉴于/ 篇幅/ 限制/ ,/ 仅/ 选取/ B/ +/ 树/ 的/ 结果/ 进行/ 分析/ ./ 在/ 多/ 核/ 系统/ 中/ ,/ 不同/ 的/ 核/ 拥有/ 独立/ 的/ L1/ 缓存/ ,/ L1/ 缓存/ 的/ 缺失/ 主要/ 和/ 缓存/ 的/ 大小/ 以及/ 访问/ 的/ 内存大小/ 有关/ ,/ 当/ 访问/ 内存/ 基本一致/ 时/ ,/ 核/ 对应/ 的/ L1/ 缓存/ 越大/ ,/ 产生/ 的/ L1/ 缓存/ 缺失/ 越小/ ./ 如图/ 8/ 、/ 图/ 9/ 中/ (/ a/ )/ 所示/ ,/ 机器/ A/ 产生/ 的/ 总/ 的/ L1/ 缓存/ 缺失/ 小于/ 机器/ B/ ,/ 机器/ C/ 的/ L1/ 缓存/ 最小/ ,/ 产生/ 的/ L1/ 缓存/ 缺失/ 最大/ ./ 多核/ 处理器/ 不同/ 的/ 核/ 共享/ L2/ 缓存/ ,/ 不同/ 的/ 核对/ L2/ 缓存/ 的/ 访问/ 存在/ 竞争/ 关系/ ,/ 当核/ 越多时/ ,/ 对/ 共享/ cache/ 的/ 访问/ 竞争/ 越大/ ,/ 可能/ 产生/ 的/ 缓存/ 缺失/ 也/ 越/ 多/ ./ 如图/ 8/ 、/ 图/ 9/ 的/ (/ b/ )/ 所示/ ,/ 在/ L2/ 缓存/ 大小/ 一致/ 的/ 情况/ 下/ ,/ 四核/ 的/ 机器/ A/ 产生/ 的/ 总/ 的/ L2/ 缓存/ 缺失/ 比/ 双核/ 的/ 机器/ B/ 大/ ./ L2/ 缓存/ 的/ 缺失/ 率/ 和/ 缓存/ 大小/ 密切相关/ ,/ L2/ 缓存/ 越大/ ,/ L2/ 缓存/ 缺失/ 越/ 少/ ,/ 因此/ ,/ 机器/ C/ 产生/ 的/ 缓存/ 缺失/ 远大于/ 机器/ A/ 和/ 机器/ B/ ./ Page10/ 图/ 9/ 不同/ 处理器/ B/ +/ 树/ 的/ 更新/ 性能/ 比较/ TLB/ 缺失/ 和/ 内存/ 访问/ 次序/ 和/ TLB/ 的/ 大小/ 等/ 因素/ 相关/ ./ 多核/ 环境/ 提高/ 了/ 处理器/ 的/ 并行/ 能力/ ,/ 增加/ 了/ 处理器/ 能够/ 同时/ 处理/ 的/ 线程/ 数/ ,/ 不同/ 核/ 不同/ 线程/ 访问/ 内存/ 次序/ 不尽相同/ ,/ 多核/ 加强/ 了/ 处理器/ 不同/ 核/ 不同/ 线程/ 对/ TLB/ 的/ 使用/ 竞争/ ./ 一般/ 的/ ,/ 如图/ 8/ 、/ 图/ 9/ 的/ (/ c/ )/ 所示/ ,/ 核越/ 多/ ,/ 并行/ 能力/ 越强/ ,/ TLB/ 的/ 使用/ 竞争/ 越大/ ,/ TLB/ 缺失/ 越多/ ./ 从图/ 8/ 、/ 图/ 9/ 的/ (/ e/ )/ 我们/ 可以/ 知道/ ,/ 多核/ 环境/ 中/ ,/ 由于/ 执行/ 线程/ 指令/ 的/ 核/ 不是/ 固定/ 的/ ,/ 在/ 大部分/ 情况/ 下/ ,/ 多核/ 提高/ 了/ 分支/ 预测/ 指令/ 错误/ 产生/ 的/ 概率/ ./ 在/ 多/ 核/ 环境/ 中/ ,/ 我们/ 在/ 改进/ 索引/ 结构/ ,/ 增强/ 索引/ 操作/ 的/ 并发/ 性/ ,/ 充分利用/ 多核/ 处理器/ 的/ 并行处理/ 能力/ ,/ 提高/ 每个/ 核/ 的/ 利用率/ 的/ 同时/ ,/ 还/ 应当/ 尽可能/ 地/ 减少/ 甚至/ 避免/ 多核/ 并行处理/ 导致/ 的/ L2/ 缓存/ 和/ TLB/ 竞争/ 所/ 带来/ 的/ 额外/ 的/ 时间延迟/ ,/ 这样/ 才能/ 充分/ 提高/ 索引/ 的/ 性能/ ./ 6/ 总结/ 本文/ 通过/ 不同/ 的/ 实验/ ,/ 比较/ 分析/ 了/ 多/ 核/ 环境/ 中/ ,/ B/ +/ 树/ 、/ CSB/ +/ 树/ 、/ CSS/ 树/ 、/ T/ 树/ 等/ 主要/ 的/ 内存/ 数据库/ 索引/ 结构/ 的/ 性能/ 差异/ ,/ 实验/ 内容/ 主要/ 包括/ 在/ 多/ 核/ 环境/ 中/ 索引/ 更新/ 和/ 查询/ 的/ 时间/ 构成/ 、/ 索引/ 结构/ 在/ 不同/ 的/ 数据/ 输入/ 、/ 节点/ 大小/ 、/ 硬件/ 环境/ 中/ 的/ 性能/ 差异/ ./ 从/ 实验/ 结果/ 中/ 可以/ 得到/ 如下/ 结论/ :/ (/ 1/ )/ 在/ 多/ 核/ 环境/ 下/ ,/ 存储介质/ 的/ 访问/ 延迟/ 和/ 分支/ 预测/ 错误/ 的/ 延迟/ 在/ 索引/ 的/ 查询/ 和/ 更新/ 所/ 消耗/ 时间/ 中/ 仍/ 占有/ 较大/ 的/ 比重/ ,/ 有效/ 地/ 减少/ 这些/ 延迟/ ,/ 对/ 提高/ 索引/ 的/ 整体/ 性能/ 有着/ 重要/ 的/ 作用/ ./ 当/ L2/ 缓存/ 达到/ 2M/ ×/ 2/ 甚至/ 更大/ 的/ 时候/ ,/ L2/ 缺失/ 产生/ 的/ 影响/ 变小/ ,/ 查询/ 的/ 优化/ 应该/ 由/ 原来/ 的/ 减小/ L2/ 缓存/ 缺失/ 转向/ 减小/ TLB/ 和/ L1/ 缓存/ 缺失/ ./ (/ 2/ )/ 一般/ 的/ ,/ 对于/ 树结构/ 的/ 索引/ ,/ 节点/ 的/ 增大/ 是/ 一个/ 简单/ 有效/ 的/ 提高/ 查询/ 性能/ 的/ 方法/ ,/ 但/ 随着/ 节点/ 的/ 不断/ 增大/ ,/ 整体/ 性能/ 提高/ 的/ 增长率/ 越来越/ 小/ ,/ 最后/ 趋于/ 平缓/ ./ 在/ 节点/ 大小/ 是/ 二级缓存/ 块/ 大小/ 的/ 1/ ~/ 3/ 倍/ 时/ ,/ 索引/ 性能/ 提高/ 最快/ ./ 由于/ CSB/ +/ 树/ 更新/ 操作/ 中/ 节点/ 的/ 分裂/ ,/ 要/ 进行/ 大量/ 的/ 内存/ 复制/ 操作/ ,/ 节点/ 的/ 增大/ 反而/ 降低/ 了/ 更新/ 性能/ ./ (/ 3/ )/ 在/ 批量/ 操作/ 中/ ,/ 对/ 数据/ 进行/ 排序/ 是/ 提高/ 整体/ 性能/ 的/ 简单/ 而/ 有效/ 的/ 方法/ ./ (/ 4/ )/ 在/ 多/ 核/ 环境/ 中/ ,/ 增强/ 索引/ 操作/ 的/ 并发/ 性是/ 利用/ 多核/ 处理器/ 特性/ 提高/ 索引/ 性能/ 的/ 重要/ 手段/ ./ 主要/ 可以/ 从/ 改进/ 索引/ 结构/ 、/ 分解/ 单个/ 查询/ 或/ 更新/ 任务/ 、/ 将/ 批量/ 查询/ 或者/ 更新/ 任务/ 分组/ 等/ 方面/ 入手/ ./ (/ 5/ )/ 在/ 提高/ 索引/ 并发/ 性/ 的/ 同时/ ,/ 还要/ 注意/ 多核/ 多线程/ 引起/ 的/ 二级缓存/ 和/ TLB/ 等/ 资源/ 的/ 竞争/ ,/ 尽可能/ 避免/ 多核/ 并发/ 处理/ 带来/ 的/ 额外/ 的/ 时间延迟/ ,/ 这/ 也/ 是/ 在/ 多/ 核/ 环境/ 中/ 提高/ 索引/ 性能/ 的/ 一个/ 突破点/ 和/ 难点/ ./ 在/ 将来/ 的/ 工作/ 中/ ,/ 我们/ 将/ 进一步/ 分析/ 在/ 多/ 核/ 环境/ 中/ 影响/ 索引/ 结构/ 性能/ 的/ 因素/ ,/ 尤其/ 是/ 要/ 分析/ 并行处理/ 时/ 影响/ 索引/ 性能/ 的/ 因素/ ,/ 并/ 在/ 此基础/ 上/ 改进/ 索引/ 结构/ ,/ 将/ 索引/ 结构/ 上/ 的/ 操作/ 并行/ 化/ ,/ 提高/ 每个/ 核/ 的/ 利用率/ ,/ 并/ 尽量减少/ 并发/ 访问/ L2/ 和/ TLB/ 引起/ 的/ 冲突/ ,/ 以/ 适应/ 新/ 的/ 多/ 核/ 处理器/ 的/ 发展/ ./ 

