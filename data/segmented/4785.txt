Page1/ 云/ 环境/ 下/ 基于/ 统计/ 监测/ 的/ 分布式/ 软件系统/ 故障/ 检测/ 技术/ 研究/ 王焘/ 张文博/ 徐继伟/ 魏峻/ 钟华/ (/ 中国科学院/ 软件/ 研究所/ 北京/ 100190/ )/ 摘要/ 越来越/ 多/ 的/ 分布式/ 软件系统/ 部署/ 在/ 公有/ 云/ 计算/ 平台/ ,/ 通过/ 互联网/ 向外/ 提供/ 服务/ ./ 云/ 计算环境/ 的/ 复杂性/ 、/ 动态性/ 和/ 开放性/ 使得/ 分布式/ 软件系统/ 更/ 易于/ 出现/ 故障/ ,/ 造成/ 服务/ 失效/ ,/ 从而/ 影响/ 大量/ 用户/ 正常/ 使用/ ,/ 甚至/ 造成/ 巨大/ 经济损失/ ./ 故障/ 检测/ 技术/ 旨在/ 自动/ 及时/ 的/ 检测/ 系统故障/ 的/ 发生/ ,/ 以/ 避免/ 或/ 减少/ 服务/ 失效/ 所/ 带来/ 的/ 损失/ ,/ 是/ 保障/ 分布式/ 软件系统/ 性能/ 与/ 可靠性/ 的/ 关键技术/ 之一/ ./ 云/ 计算环境/ 对/ 该/ 技术/ 带来/ 了/ 新/ 的/ 挑战/ ,/ 该文/ 首先/ 分析/ 了/ 这些/ 挑战/ ./ 基于/ 统计/ 监测/ 的/ 故障/ 检测/ 技术/ 在线/ 搜集/ 监测数据/ 构建/ 统计/ 模型/ ,/ 并/ 基于/ 该/ 模型/ 对系统/ 运行/ 状态/ 进行/ 分析/ 与/ 预测/ ,/ 具有/ 实时/ 监测/ 分析/ 、/ 自动化/ 检测/ 、/ 无需/ 领域/ 知识/ 等/ 优势/ ,/ 能够/ 满足/ 云/ 环境/ 的/ 需要/ ,/ 因此/ 引起/ 了/ 学术界/ 和/ 工业界/ 的/ 广泛/ 关注/ ./ 该文/ 提出/ 了/ 面向/ 云/ 计算环境/ 的/ 基于/ 统计/ 监测/ 的/ 分布式/ 软件系统/ 故障/ 管理/ 参考/ 框架/ ,/ 包括/ 分布式/ 监测/ 、/ 监测/ 数据处理/ 、/ 故障/ 检测/ 、/ 故障诊断/ 以及/ 故障/ 处理/ 等/ 模块/ ;/ 将/ 已有/ 工作/ 分成/ 基于/ 规则/ 、/ 度量/ 分析/ 、/ 日志/ 分析/ 和/ 行为/ 分析/ 等/ 四大/ 类/ ,/ 逐类/ 介绍/ 其/ 实现/ 原理/ ,/ 并/ 对比/ 分析/ 各类/ 的/ 优缺点/ ;/ 针对/ 当前/ 云/ 计算环境/ 的/ 特点/ ,/ 从/ 在线/ 自动检测/ 、/ 运行/ 环境/ 感知/ 和/ 组件/ 交互/ 分析/ 等/ 3/ 个/ 方面/ 展望/ 了/ 未来/ 的/ 研究/ 方向/ ./ 关键词/ 云/ 计算/ ;/ 软件/ 监测/ ;/ 分布式/ 软件系统/ ;/ 软件/ 故障/ 检测/ ;/ 性能/ 异常/ 检测/ ;/ 统计/ 监测/ 1/ 引言/ 当前/ 分布式应用/ 的/ 不断/ 发展/ 给/ 人们/ 带来/ 了/ 巨大/ 便利/ ,/ 电子邮件/ 、/ 电子商务/ 、/ 网上银行/ 等/ 已经/ 成为/ 人们/ 日常/ 工作/ 和/ 生活/ 中/ 不可或缺/ 的/ 一部分/ ,/ 而/ 这些/ 应用/ 通常/ 依托/ 云/ 计算/ 平台/ ,/ 部署/ 成/ 分布式/ 软件系统/ 以/ 提供/ 在线/ 服务/ [/ 1/ ]/ ./ 然而/ 应用/ 的/ 多样性/ 以及/ 部署/ 环境/ 的/ 动态性/ 使得/ 分布式/ 软件系统/ 时常/ 出现/ 故障/ ,/ 从而/ 无法/ 正常/ 对外/ 提供/ 服务/ ,/ 甚至/ 造成/ 商业/ 方面/ 的/ 巨大/ 经济损失/ ./ 例如/ 2008/ 年/ 10/ 月/ GoogleGmail/ 账户/ 服务/ 失效/ 长达/ 24h/ ,/ 导致/ 大量/ 用户/ 不能/ 访问/ 自己/ 部署/ 的/ 云/ 应用/ ;/ 2009/ 年/ 8/ 月/ Paypal/ 系统/ 出现/ 故障/ 导致/ 服务/ 中断/ 一个/ 小时/ ,/ 在/ 处理/ 顾客/ 交易/ 方面/ 造成/ 高达/ 720/ 万美元/ 的/ 经济损失/ ①/ ;/ 2011/ 年/ 4/ 月/ AmazonEC2/ 服务/ 中断/ 持续/ 了/ 100/ 多个/ 小时/ ,/ 导致/ 美国/ 东部/ 地区/ 依托/ 其/ 服务/ 的/ 上/ 千家/ 公司/ 无法/ 对外/ 提供/ 服务/ ②/ ./ TellmeNetworks/ 报告/ 指出/ ,/ 分布式/ 软件系统/ 失效恢复/ 时间/ 的/ 75/ %/ 用/ 在/ 检测/ 故障/ ,/ 18/ %/ 用/ 在/ 诊断/ 故障/ [/ 2/ ]/ ,/ 早期/ 检测/ 故障/ 能够/ 缓解/ 或/ 阻止/ 65/ %/ 的/ 失效/ 发生/ [/ 3/ ]/ ./ 因此/ 及时/ 检测/ 故障/ ,/ 并/ 准确/ 诊断/ 问题/ 原因/ ,/ 是/ 确保/ 分布式/ 软件系统/ 提供/ 高效/ 和/ 可靠/ 服务/ 的/ 关键/ ./ 分布式/ 软件系统/ 故障/ 是/ 由/ 运行/ 时/ 复杂/ 原因/ 所/ 造成/ 的/ (/ 如/ 资源/ 竞争/ 、/ 配置/ 错误/ 、/ 软件缺陷/ 、/ 硬件/ 失效/ )/ ,/ 具有/ 不确定性/ ,/ 难以/ 重现/ (/ 如/ 并发/ 处理/ 造成/ 的/ 死锁/ 、/ 错误/ 状态/ 的/ 传递/ )/ [/ 4/ -/ 5/ ]/ ./ 这类/ 故障/ 占/ 到/ 了/ 软件/ 故障/ 的/ 15/ %/ ~/ 80/ %/ [/ 6/ ]/ ,/ 但/ 无法/ 在/ 软件开发/ 和/ 测试/ 过程/ 中/ 完全/ 发现/ 并/ 消除/ ,/ 同时/ 系统管理员/ 难以/ 人工/ 跟踪/ 系统/ 运行/ 状态/ 并/ 及时发现/ 问题/ ./ 因而/ 故障/ 检测/ 技术/ 被/ 广泛应用/ ,/ 以/ 在线/ 监测/ 系统/ 运行/ ,/ 自动/ 及时/ 检测/ 故障/ 的/ 发生/ ,/ 以/ 避免/ 或/ 减少/ 服务/ 失效/ 所/ 带来/ 的/ 损失/ ./ 技术/ 面临/ 的/ 挑战/ 主要/ 体现/ 在/ 以下/ 几个/ 方面/ :/ 在/ 云/ 计算环境/ 下/ ,/ 分布式/ 软件系统/ 的/ 故障/ 检测/ (/ 1/ )/ 自动化/ 分析/ ./ 云/ 计算环境/ 下/ 的/ 分布式/ 软件系统/ 通常/ 由/ 成百上千/ 个/ 节点/ 构成/ ,/ 同时/ 又/ 分为/ 众多/ 层次/ ,/ 面对/ 如此/ 规模/ 巨大/ 的/ 系统/ ,/ 系统管理员/ 无法/ 根据/ 经验/ 人工/ 分析/ 系统/ 所/ 出现/ 的/ 问题/ ./ (/ 2/ )/ 问题/ 组件/ 定位/ ./ 分布式/ 软件系统/ 通常/ 由/ 众多/ 组件/ 构成/ ,/ 分布/ 在/ 不同/ 节点/ ,/ 调用/ 各种/ 服务/ ,/ 组件/ 间/ 交互/ 关系/ 复杂/ 、/ 关联度/ 高/ ,/ 难以/ 准确/ 定位/ 引起/ 系统故障/ 的/ 故障/ 组件/ ./ (/ 3/ )/ 领域/ 知识/ 缺少/ ./ 租户/ 部署/ 在/ 云/ 计算/ 平台/ 的/ 应用/ 通常/ 对/ 平台/ 提供者/ 和/ 管理者/ 是/ 透明/ 的/ ,/ 这/ 就/ 使得/ 系统/ 运维/ 人员/ 通过/ 设计/ 文档/ 或/ 代码/ 注入/ 获取/ 应用/ 结构/ ,/ 进而/ 建模/ 分析/ 变得/ 困难/ ./ (/ 4/ )/ 在线/ 检测/ ./ 许多/ 软件系统/ 的/ 故障/ 经常/ 是/ 在/ 大规模/ 运行/ 过程/ 中/ 表现/ 出来/ 的/ ,/ 而/ 系统/ 运维/ 人员/ 难以/ 在/ 离线/ 环境/ 下/ 重现/ 产品/ 运行/ 中/ 所/ 出现/ 的/ 问题/ ,/ 以/ 跟踪/ 定位问题/ 原因/ ./ (/ 5/ )/ 环境/ 适应性/ ./ 执行/ 环境/ 在/ 应用/ 运行/ 过程/ 中/ 会/ 发生/ 动态变化/ (/ 如/ 外部/ 负载/ 波动/ 、/ 应用/ 在/ 多/ 主机/ 迁移/ 、/ 虚拟机/ 资源/ 动态/ 调整/ )/ ,/ 应用/ 也/ 会/ 随之/ 表现/ 出/ 与/ 环境/ 相应/ 的/ 行为/ ,/ 难以/ 采用/ 离线/ 建立/ 的/ 模型/ 对系统/ 状态/ 进行/ 准确/ 刻画/ ./ 为了/ 应对/ 以上/ 挑战/ ,/ 近年来/ ,/ 统计/ 监测/ 方法/ 引起/ 了/ 工业界/ 和/ 学术界/ 的/ 关注/ ,/ 被/ 广泛应用/ 在/ 故障/ 检测/ 技术/ 方面/ ,/ 获得/ 了/ 较/ 多/ 研究成果/ ./ 统计/ 监测/ 方法/ 是/ 基于/ 在线/ 搜集/ 的/ 监测数据/ 构建/ 概率/ 统计/ 模型/ ,/ 运用/ 模型/ 对系统/ 运行/ 状态/ 进行/ 预测/ 与/ 分析/ [/ 7/ ]/ ./ 将/ 统计/ 监测/ 应用/ 于/ 故障/ 检测/ 具有/ 以下/ 优势/ :/ (/ 1/ )/ 无需/ 领域/ 知识/ 对系统/ 行为/ 和/ 故障/ 特征/ 进行/ ①/ ②/ Page3/ 事先/ 刻画/ ,/ 具有/ 较广/ 的/ 适用范围/ ./ (/ 2/ )/ 实时/ 监测/ 和/ 在线/ 分析/ 系统/ 行为/ ,/ 能够/ 有效/ (/ 3/ )/ 自动化/ 分析/ 系统/ 状态/ ,/ 能够/ 简化/ 系统管理/ 监测/ 到/ 难以/ 在/ 测试环境/ 下/ 获取/ 的/ 系统/ 行为/ ./ 操作/ ,/ 更好/ 应对/ 规模/ 巨大/ 、/ 复杂性/ 高/ 的/ 系统/ ./ 本文/ 面向/ 云/ 计算环境/ 下/ 提供/ 在线/ 服务/ 的/ 分布式/ 软件系统/ ,/ 首先/ 提出/ 了/ 基于/ 统计/ 监测/ 的/ 分布式/ 软件系统/ 故障/ 管理/ 参考/ 框架/ ./ 然后/ ,/ 对/ 已有/ 方法/ 进行/ 分类/ ,/ 介绍/ 了/ 各类/ 代表性/ 的/ 工作/ ,/ 并/ 分析/ 各类/ 方法/ 所/ 存在/ 的/ 问题/ ./ 最后/ ,/ 对/ 未来/ 的/ 研究/ 方向/ 提出/ 了/ 建议/ ./ 2/ 故障/ 管理/ 参考/ 框架/ 基于/ 统计/ 监测/ 的/ 方法/ 根据/ 系统/ 历史/ 监测数据/ 制定/ 报警/ 规则/ ,/ 或/ 建立/ 统计/ 模型/ 作为/ 基准/ ./ 这类/ 方法/ 通常/ 需要/ 满足/ 假设/ :/ 系统/ 在/ 大多数/ 情况/ 下/ 能够/ 正常/ 运行/ ,/ 而/ 在/ 特定/ 环境/ 下/ 触发/ 故障/ ./ 例如/ 某个/ 请求/ 引发/ 未经/ 测试/ 的/ 内存/ 泄露/ ,/ 在/ 某种/ 访问/ 序列/ 下/ 并发/ 线程/ 竞争/ 共享资源/ 造成/ 死锁/ ,/ 或是/ 动态/ 迁移/ 到/ 相同/ 主机/ 的/ 多个/ 应用/ 产生/ 资源/ 竞争/ 等/ ./ 基于/ 统计/ 监测/ 的/ 故障/ 检测/ 方法/ 通常/ 分为/ 监测/ 、/ 建模/ 和/ 检测/ 三个/ 阶段/ ./ (/ 1/ )/ 在/ 监测/ 阶段/ ./ 利用/ 监测/ 工具/ 搜集/ 各层次/ 的/ (/ 2/ )/ 在/ 建模/ 阶段/ ./ 在/ 系统/ 正常/ 运行/ 情况/ 下/ ,/ 建立/ (/ 3/ )/ 在/ 检测/ 阶段/ ./ 将/ 当前/ 运行/ 状态/ 与/ 建立/ 的/ 模型/ 进行/ 比较/ ,/ 当/ 监测/ 状态/ 与/ 模型/ 偏离/ 则/ 检测/ 为/ 系统故障/ ./ 系统/ 运行/ 状态/ 的/ 概率/ 统计/ 模型/ ./ 监测数据/ ./ 图/ 1/ 故障/ 管理/ 参考/ 框架/ 基于/ 统计/ 监测/ 的/ 故障/ 管理系统/ 通常/ 在线/ 搜集/ 各/ 节点/ 的/ 监测数据/ ,/ 进而/ 自动化/ 分析/ 以/ 提前/ 预测/ 、/ 及时/ 检测/ 并/ 准确/ 诊断/ 故障/ ,/ 最后/ 针对/ 问题/ 原因/ 作出/ 相应/ 处理/ ./ 基于/ 以上/ 分析/ ,/ 本文/ 提出/ 了/ 故障/ 管理/ 参考/ 框架/ ,/ 如图/ 1/ 所示/ ,/ 由/ 五个/ 核心/ 模块/ 构成/ ,/ 包括/ 分布式/ 监测/ 、/ 监测数据/ 管理/ 、/ 故障/ 检测/ 、/ 故障诊断/ 及/ 故障/ 处理/ 等/ ,/ 基本功能/ 如下/ :/ (/ 1/ )/ 分布式/ 监测/ ./ 用于/ 搜集/ 分布式/ 软件系统/ 运行/ 时/ 各/ 节点/ 的/ 监测/ 信息/ ./ 每个/ 服务器/ 节点/ 上/ 都/ 需要/ 部署/ 一个/ 监测/ 代理/ ,/ 从/ 物理/ 主机/ 、/ 虚拟机/ 、/ 中间件/ 以及/ 应用/ 等/ 多个/ 层次/ 分别/ 搜集/ 监测数据/ ,/ 而后/ 将/ 获取/ 的/ 监测数据/ 通过/ 网络/ 传输/ 给/ 监测数据/ 管理/ 模块/ ./ 监测/ 对象/ 主要/ 包括/ 以下/ 几个/ 层次/ :/ ①/ 基础设施/ 层/ ./ 各/ 物理/ 设备/ 的/ 资源/ 使用/ 信息/ (/ 如/ CPU/ 利用率/ 、/ 内存/ 占用率/ 、/ 磁盘/ 读写/ 率/ 、/ 网络/ 链接/ 数据/ 传输速率/ )/ ;/ ②/ 操作系统/ 层/ ./ 各/ 虚拟机/ 的/ 资源/ 使用/ 信息/ (/ 如/ 虚拟机/ 内存/ 占用/ )/ ,/ 尤其/ 是/ 共享/ 敏感/ 资源/ (/ 如/ 多级/ 缓存/ )/ ;/ 列/ 、/ 数据库/ 连接池/ )/ ;/ ③/ 中间件/ 层/ ./ 各种/ 逻辑/ 资源/ 信息/ (/ 如/ 线程/ 、/ 队/ ④/ 应用层/ ./ 应用/ 相关/ 信息/ (/ 如/ 响应/ 时间/ 、/ 吞吐量/ 、/ 用户/ 访问/ 模式/ 、/ 应用/ 组件/ 交互/ 行为/ )/ ./ (/ 2/ )/ 监测数据/ 管理/ ./ 用于/ 预处理/ 监测数据/ ./ 根据/ 故障/ 预测/ 、/ 检测/ 和/ 诊断/ 方法/ 的/ 需要/ 提取/ 监测数据/ ,/ 对/ 数据/ 进行/ 清洗/ (/ 填补/ 遗漏/ 和/ 平滑/ 噪声/ )/ 、/ 集成/ (/ 多/ 节点/ 监测数据/ 合并/ )/ 和/ 转换/ (/ 规格化/ 数据/ )/ ./ 对/ 历史数据/ 进行/ 处理/ 并/ 存储/ ,/ 用以/ 建立/ 统计/ 模型/ ,/ 并/ 基于/ 在线/ 数据/ Page4/ 更新/ 模型/ ./ (/ 3/ )/ 故障/ 检测/ ./ 用于/ 根据/ 监测数据/ 预测/ 系统/ 出现/ 故障/ 的/ 可能性/ ,/ 并/ 分析/ 系统/ 当前/ 运行/ 状态/ ./ 在/ 启动/ 阶段/ ,/ 根据/ 监测数据/ 建立/ 系统/ 状态/ 模型/ ;/ 在/ 运行/ 过程/ 中/ ,/ 根据/ 运行/ 环境/ 变化/ (/ 如/ 负载/ 波动/ 、/ 资源/ 调整/ 以及/ 更新/ 升级/ )/ ,/ 对模型/ 进行/ 动态/ 更新/ ;/ 同时/ 根据/ 模型/ 在线/ 预测/ 并/ 检测/ 系统/ 运行/ 状态/ 是否/ 异常/ ./ 当/ 预测/ 或/ 检测/ 到/ 异常/ 状态/ 时/ ,/ 将/ 报警/ 信息/ 汇报/ 给/ 故障诊断/ 模块/ 以/ 做/ 进一步/ 分析/ ./ (/ 4/ )/ 故障诊断/ ./ 用于/ 对/ 问题/ 进行/ 分析/ 以/ 定位/ 原因/ ./ 从/ 资源/ 角度/ 考虑/ ,/ 通过/ 分析/ 各/ 资源/ 使用/ 状况/ 和/ 变化趋势/ 以/ 定位/ 异常/ 系统/ 度量/ ./ 将/ 问题/ 原因/ 汇报/ 给/ 故障/ 管理/ 模块/ ,/ 以便/ 对/ 可能/ 出现/ 或者/ 即将/ 发生/ 的/ 故障/ 进行/ 主动/ 响应/ ./ 图/ 2/ 故障/ 检测/ 方法/ 分类/ 基于/ 规则/ 的/ 方法/ 根据/ 历史/ 故障/ 所/ 表现/ 的/ 现象/ 来/ 定义/ 故障/ 出现/ 时/ 可辨/ 别的/ 特征/ ,/ 而后/ 将/ 观察/ 到/ 的/ 现象/ 与/ 已/ 定义/ 的/ 故障/ 特征/ 进行/ 匹配/ ./ 当/ 匹配/ 成功/ 则/ 检测/ 为/ 有/ 故障/ ,/ 发出/ 警报/ ;/ 否则/ 认为/ 系统/ 运行/ 正常/ ./ 另一方面/ ,/ 基于/ 异常/ 检测/ 的/ 方法/ 为/ 目标/ 系统/ 建立/ 模型/ 作为/ 基准/ ,/ 将/ 系统/ 行为/ 与/ 基准/ 进行/ 对比/ ./ 根据/ 对系统/ 内部结构/ 的/ 了解/ 程度/ 以及/ 监测/ 分析/ 对象/ 的/ 不同/ ,/ 基于/ 异常/ 检测/ 的/ 方法/ 可以/ 分为/ 黑盒/ 、/ 灰盒/ 和/ 白盒/ ./ (/ 1/ )/ 黑盒/ 方法/ ./ 典型/ 的/ 是/ 基于/ 度量/ 分析/ 的/ 方法/ ,/ 不/ 需要/ 了解/ 系统/ 内部结构/ ,/ 通过/ 调用/ 操作系统/ 提供/ 的/ 接口/ 搜集/ 监测数据/ 进行/ 分析/ ./ (/ 2/ )/ 灰盒/ 方法/ ./ 典型/ 的/ 是/ 基于/ 日志/ 分析/ 的/ 方法/ ,/ 通过/ 分析/ 日志/ 信息/ 可以/ 了解/ 一部分/ 系统/ 执行/ 路径/ ./ (/ 3/ )/ 白盒/ 方法/ ./ 典型/ 的/ 是/ 基于/ 行为/ 分析/ 的/ 方法/ ,/ 通过/ 代码/ 注入/ 等/ 方式/ 搜集/ 各/ 组件/ 行为/ ./ 本节/ 将/ 对/ 各类/ 方法/ 的/ 原理/ 以及/ 具有/ 代表性/ 的/ 工/ (/ 5/ )/ 故障/ 处理/ ./ 用于/ 针对/ 特定/ 问题/ 做/ 相应/ 处理/ ./ 例如/ 在/ 云/ 计算环境/ 下/ ,/ 通过/ 动态/ 调整/ 虚拟机/ 分配/ 的/ 资源/ 、/ 虚拟机/ 在线/ 迁移/ 和/ 虚拟机/ 镜像/ 克隆/ 等/ 技术/ 实现/ 自动/ 调整/ 、/ 获取/ 、/ 释放/ 资源/ ,/ 以/ 达到/ 资源/ 按需分配/ ,/ 保障/ 服务质量/ 的/ 效果/ ./ 再/ 如/ 对于/ 基于/ 组件/ 的/ 软件系统/ ,/ 利用/ 组件/ 重启/ 机制/ 进行/ 软件/ 恢复/ ./ 故障/ 管理/ 包括/ 数据/ 采集/ 与/ 预处理/ 、/ 故障/ 预测/ 与/ 检测/ 、/ 故障诊断/ 、/ 故障/ 恢复/ (/ 或/ 故障/ 规避/ )/ 等/ ,/ 本文/ 在/ 故障/ 管理/ 参考/ 框架/ 下/ 对/ 故障/ 检测/ 技术/ 进行/ 综述/ ./ 3/ 故障/ 检测/ 方法/ 故障/ 检测/ 方法/ 通常/ 可以/ 分为/ 基于/ 规则/ 和/ 异常/ 检测/ 等/ 两类/ ,/ 方法/ 分类/ 如图/ 2/ 所示/ ./ 作/ 进行/ 介绍/ ./ 由于/ 分布式/ 软件系统/ 所/ 提供/ 服务/ 的/ 性能/ 直接/ 影响/ 着/ 用户/ 体验/ ,/ 关乎/ 着/ 企业/ 的/ 经济效益/ ,/ 一些/ 工作/ 关注/ 于/ 系统/ 的/ 性能/ 表现/ ./ 同时/ 近年来/ 众多/ 工作/ 针对/ 虚拟化/ 云/ 计算环境/ 的/ 特点/ 展开/ 研究/ ./ 性能/ 异常/ 检测/ 和/ 面向/ 云/ 环境/ 的/ 故障/ 检测/ 通常/ 基于/ 异常/ 检测/ 方法/ 展开/ 研究/ ,/ 本节/ 也/ 将/ 进行/ 介绍/ ./ 最后/ ,/ 本/ 节/ 针对/ 第/ 1/ 节/ 分析/ 的/ 云/ 计算环境/ 对/ 分布式/ 软件系统/ 提出/ 的/ 挑战/ ,/ 对/ 各类/ 方法/ 的/ 优缺点/ 进行/ 对比/ 分析/ ./ 3.1/ 基于/ 规则/ 的/ 方法/ 基于/ 规则/ 的/ 故障/ 检测/ 方法/ 描述/ 一系列/ 规则/ ,/ 当/ 监测数据/ 与/ 其中/ 任何/ 规则/ 匹配/ 成功/ 时/ ,/ 则/ 检测/ 为/ 某种/ 故障/ ,/ 并/ 执行/ 相应/ 动作/ ./ 3.1/ ./ 1/ 基于/ 阈值/ 的/ 方法/ 基于/ 阈值/ 的/ 方法/ 是/ 一种/ 简单/ 的/ 基于/ 规则/ 的/ 方/ Page5/ 法/ ,/ 其/ 事先/ 设置/ 各/ 度量/ 的/ 阈值/ ,/ 当/ 监测/ 的/ 度量/ 值/ 超出/ 阈值/ ,/ 故障/ 检测/ 系统/ 则/ 根据/ 规则/ 自动/ 向/ 管理员/ 发出/ 警报/ ./ 例如/ :/ 规则/ 1/ ./ IF80/ %/ / CPU/ _/ Util/ ./ </ 95/ %/ ThenAlert/ =/ YellowandSendEmailtoOperator/ 表示/ :/ 当/ 目标/ 系统/ 节点/ 的/ CPU/ 利用率/ 大于/ 80/ %/ 且/ 小于/ 95/ %/ 时/ ,/ 为/ 黄色/ 警报/ ,/ 故障/ 检测/ 系统/ 向/ 管理员/ 发送/ Email/ 报警/ ./ 规则/ 2/ ./ IFCPU/ _/ Util/ ./ / 95/ %/ ThenAlert/ =/ RedandSendEmail/ &/ SMtoOperator/ 表示/ :/ 当/ 目标/ 系统/ 节点/ 的/ CPU/ 利用率/ 大于/ 95/ %/ 时/ ,/ 则/ 为/ 红色警报/ ,/ 故障/ 检测/ 系统/ 向/ 管理员/ 同时/ 发送/ Email/ 和/ 短信/ 报警/ ./ 这种/ 方法/ 简单/ 易用/ ,/ 在/ 工业/ 产品/ 中/ 被/ 广泛/ 采用/ (/ 如/ IBMTivoli/ ,/ HPOpenView/ ,/ EMCSmarts/ )/ ,/ 但/ 分布式/ 软件系统/ 监测/ 度量/ 数量/ 众多/ ,/ 人工/ 为/ 每个/ 度量/ 设置/ 合理/ 的/ 阈值/ 需要/ 领域/ 知识/ ,/ 难度/ 较大/ ./ 3.1/ ./ 2/ 基于/ 签名/ 的/ 方法/ 基于/ 签名/ 的/ 方法/ 事先/ 将/ 故障/ 发生/ 时/ 的/ 特征/ 定义/ 为/ 签名/ ,/ 在/ 运行/ 过程中将/ 监测/ 到/ 的/ 系统/ 状态/ 与/ 已知/ 故障/ 签名/ 进行/ 匹配/ ,/ 如果/ 匹配/ 成功/ ,/ 则/ 检测/ 为/ 与/ 签名/ 表/ 2/ 应用层/ 签名/ 与/ 故障/ 的/ 对应/ 关系/ 故障/ 类型/ 签名/ 文献/ [/ 9/ ]/ 利用/ 历史/ 经验/ 建立/ 知识库/ 来/ 记录/ 以往/ 故障/ 信息/ (/ 包括/ 故障/ 原因/ 、/ 故障/ 症状/ 、/ 失效恢复/ 策略/ )/ ,/ 每次/ 检测/ 故障/ ,/ 在/ 故障/ 数据库/ 中/ 查找/ 症状/ 相似/ 的/ 故障/ 实例/ ./ 作者/ 利用/ 网络图/ 来/ 定义/ 故障/ 签名/ ,/ 图中/ 节点/ 为/ 属性/ ,/ 链接/ 为/ 属性/ 间/ 的/ 关联性/ ./ 故障/ 发生/ 时/ ,/ 属性/ 间/ 的/ 关联性/ 打破/ ,/ 记录/ 此时/ 的/ 网络图/ 作为/ 故障/ 签名/ ,/ 当/ 故障/ 再次发生/ 时/ ,/ 提取/ 相似/ 网络图/ 以/ 分析/ 问题/ ./ 3.1/ ./ 3/ 基于/ 决策树/ 的/ 方法/ 决策树/ 是/ 一种/ 预测/ 模型/ ,/ 可以/ 用来/ 表示/ 系统/ 各/ 属性/ 与/ 最终/ 状态/ 之间/ 的/ 映射/ 关系/ ./ 树中/ 每个/ 节点/ 代表/ 某个/ 属性/ ,/ 从根/ 节点/ 到/ 叶子/ 节点/ 经历/ 的/ 路径/ 可/ 抽取/ 为/ 一条/ 规则/ ,/ 表示/ 在/ 某种/ 情况/ 下/ 系统/ 出现/ 故障/ 的/ 概率/ ./ Pinpoint/ [/ 10/ ]/ 在/ 检测/ 到/ 可能/ 出现/ 故障/ 的/ 请求/ 后/ ,/ 记录/ 每个/ 组件/ 的/ 特征/ ,/ 而后/ 利用/ ID3/ 算法/ 来/ 学习/ 决策树/ ./ 这些/ 特征/ 对应/ 于/ Pinpoint/ 搜集/ 到/ 的/ 路径/ 信息/ 相对/ 应/ 的/ 故障/ ./ FlowDiff/ 框架/ [/ 8/ ]/ 面向/ 数据中心/ ,/ 对系统/ 各层次/ 进行/ 监测/ ,/ 从/ 框架/ 、/ 应用/ 和/ 操作/ 等/ 几个/ 层次/ 分别/ 定义/ 了/ 故障/ 签名/ :/ 框架/ 签名/ 获取/ 网络/ 物理/ 拓扑/ 结构/ ,/ 应用/ 到/ 服务器/ 的/ 映射/ 关系/ 以及/ 基准/ 性能参数/ (/ 如/ 网络/ 链接/ 利用率/ 和/ 端/ 到/ 端的/ 延迟/ )/ ;/ 应用/ 签名/ 获取/ 每个/ 应用/ 的/ 行为/ (/ 如/ 响应/ 时间/ 和/ 吞吐量/ )/ 以及/ 应用/ 间/ 的/ 交互/ 行为/ ;/ 操作/ 签名/ 获取/ 用户/ 或/ 应用/ 所/ 进行/ 的/ 操作/ (/ 如/ 迁移/ 虚拟机/ 和/ 添加/ 服务器/ )/ ./ FlowDiff/ 将/ 当前/ 数据中心/ 的/ 状态/ 与/ 过去/ 已知/ 健康/ 状态/ 进行/ 比较/ ,/ 获取/ 产生/ 的/ 偏差/ 签名/ ,/ 将/ 这些/ 偏差/ 签名/ 集合/ 与/ 已/ 定义/ 的/ 故障/ 特征/ 进行/ 匹配/ 以/ 分析/ 问题/ ./ 例如/ 作者/ 在/ 应用层/ 定义/ 了/ 5/ 个/ 签名/ 如表/ 1/ 所示/ ,/ 并且/ 定义/ 了/ 12/ 种/ 签名/ 组合/ 所/ 对应/ 的/ 故障/ 类型/ 如表/ 2/ 所示/ ./ 名称/ 连接/ 图/ CG/ ,/ ConnectivityGraph/ 节点/ 间通信/ 关系/ 流/ 统计/ FS/ ,/ FlowStatistics/ 流/ 传输数据/ 的/ 数量/ 以及/ 持/ 组件/ 交互/ CI/ ,/ ComponentInteraction/ 每个/ 节点/ 进/ // 出边/ 流/ 的/ 数量/ 延迟/ 分布/ DD/ ,/ DelayDistribution/ 节点/ 间/ 的/ 传输/ 延迟/ 偏相关/ PC/ ,/ PartialCorrelation/ 流/ 之间/ 的/ 关联/ 强度/ 交换机/ 配置/ CGPCCIFSDD/ (/ 如/ 集群/ 主机/ 的/ IP地址/ 和/ EJB/ 组件/ 名/ )/ ./ 一旦/ 建立/ 决策树/ ,/ 从/ 树根/ 到/ 叶子/ 节点/ 形成/ 执行/ 路径/ ,/ 这样/ 就/ 可以/ 将/ 决策树/ 转换/ 为/ 规则/ 集合/ ,/ 利用/ 这些/ 规则/ 进行/ 故障/ 检测/ ./ 3.2/ 基于/ 度量/ 分析/ 的/ 方法/ 基于/ 系统/ 度量/ 分析/ 的/ 方法/ 并不需要/ 已知/ 系统/ 内部结构/ 及/ 请求/ 处理/ 流程/ ,/ 而/ 只是/ 利用/ 操作系统/ 提供/ 的/ 接口/ 即可/ 搜集/ 监测数据/ ,/ 以/ 分析/ 度量/ 值/ 的/ 变化/ 或/ 建立/ 度量/ 间/ 的/ 关联/ 模型/ ./ 这类/ 方法/ 无需/ 对系统/ 进行/ 代码/ 注入/ ,/ 监测/ 开销/ 较/ 小/ ,/ 且/ 适用范围/ 较广/ ./ 该/ 方法/ 需要/ 满足/ 以下/ 假设/ :/ 系统故障/ 的/ 触发/ 能够/ 反映/ 到/ 可/ 监测/ 度量/ ./ 例如/ 内存/ 泄露/ 会/ 反应/ 到/ 内存/ 分配/ 数量/ 持续/ 增加/ ,/ 自旋/ 锁/ 造成/ 一段时间/ 内线/ 程/ 陷入/ 循环/ 等待/ 或/ 死循环/ 占用/ CPU/ 资源/ ./ 3.2/ ./ 1/ 基于/ 多/ 度量/ 值/ 分析/ 的/ 方法/ 基于/ 多/ 度量/ 值/ 分析/ 的/ 方法/ 分析/ 搜集/ 到/ 的/ 多个/ 度/ Page6/ 量值/ 信息/ ./ Aniketos/ [/ 11/ ]/ 利用/ 计算/ 几何学/ 方法/ 来/ 检测/ 系统故障/ ,/ 同样/ 分为/ 训练/ 和/ 检测/ 两个/ 阶段/ ./ 在/ 训练/ 阶段/ ,/ 搜集/ 系统/ 正常/ 运行/ 时/ 多维度/ 监测数据/ ,/ 每个/ 时刻/ 的/ 监测数据/ 作为/ 一个点/ ,/ 来/ 建立/ 几何/ 闭包/ 以/ 表示/ 系统/ 的/ 正常/ 运行/ 状态/ 空间/ ./ 在/ 检测/ 阶段/ ,/ 如果/ 运行/ 时/ 搜集/ 的/ 监测数据/ 不/ 能够/ 包含/ 在/ 计算/ 几何/ 闭包/ 之内/ ,/ 则/ 检测/ 系统/ 处于/ 异常/ 状态/ ./ 文献/ [/ 5/ ]/ 利用/ 信息熵/ 的/ 方法/ 进行/ 故障/ 检测/ ,/ 分为/ 以下/ 3/ 个/ 步骤/ :/ (/ 1/ )/ 对/ 度量/ 进行/ 分组/ ./ 在/ 无故障/ 发生/ 的/ 系统/ 操作/ 期间/ ,/ 周期性/ 的/ 从/ 目标/ 系统/ 搜集/ 度量/ ,/ 利用/ 归一化/ 互信息/ (/ NormalizedMutualInformation/ ,/ NMI/ )/ 来/ 测量/ 任意/ 两个/ 度量/ 的/ 相似性/ ./ 进而/ 获得/ 相似/ 度/ 矩阵/ ,/ 应用/ 分层/ 聚类/ (/ HierarchicalAgglomerativeClustering/ ,/ HAC/ )/ 将/ 相关联/ 的/ 度量/ 划分/ 为/ 簇/ ,/ 簇间/ 距离/ 为/ 两个/ 簇中/ 元素/ 间/ 的/ 最大/ 距离/ ./ 将/ 每个/ 度量/ 作为/ 单一/ 簇/ ,/ 而后/ 依次/ 合并/ 距离/ 最近/ 的/ 簇/ ,/ 直到/ 两个/ 簇间/ 距离/ 超出/ 预定/ 阈值/ ,/ 或是/ 所有/ 度量/ 属于/ 同一个/ 阈值/ ,/ 则/ 完成/ 聚类/ 过程/ ./ (/ 2/ )/ 计算/ 每个/ 簇/ 的/ 熵/ 值/ ./ 熵/ 用来/ 衡量/ 簇/ 的/ 不确定性/ ,/ 由于/ 同一/ 簇内/ 的/ 度量/ 是/ 强/ 相关/ 的/ ,/ 那么/ 在/ 给定/ 时间/ 内/ ,/ 相同/ 簇内/ 度量/ 值间/ 的/ 不确定性/ 要/ 低于/ 不/ 相关/ 度量/ 的/ 不确定性/ ,/ 而且/ 应/ 保持稳定/ ./ 所以/ 熵/ 可以/ 作为/ 簇/ 的/ 特征/ 来/ 表现/ 簇中/ 多/ 度量/ 的/ 当前/ 状态/ ,/ 而/ 不必/ 考虑/ 度量/ 的/ 实际/ 值/ ./ (/ 3/ )/ 利用/ 簇/ 熵/ 进行/ 故障/ 检测/ ./ 相同/ 簇/ 在/ 不同/ 时间/ 的/ 熵/ 具有/ 可比性/ ,/ 较大/ 的/ 波动/ 意味着/ 度量/ 间/ 关联/ 强度/ 变化/ ,/ 因此/ 可以/ 通过/ 监测/ 各簇/ 熵/ 的/ 变化/ 来/ 检测/ 故障/ 的/ 发生/ ./ 作者/ 对于/ 每个/ 簇/ 建立/ 两个/ 滑动/ 窗口/ ,/ 一个/ 为/ 最近/ 的/ n/ 个/ 熵/ ,/ 另/ 一个/ 为/ 先前/ 的/ 检验/ 窗口/ ./ 利用/ 非/ 参数/ 化/ 的/ WilcoxonRank/ -/ Sum/ 方法/ 来/ 检验/ 两个/ 窗口/ 的/ 采样/ 集合/ 是否/ 符合/ 同/ 分布/ ,/ 以/ 监测/ 熵/ 是否/ 发生/ 了/ 较大/ 的/ 变化/ ,/ 从而/ 检测/ 故障/ 的/ 发生/ ./ 以上/ 的/ 方法/ 适用/ 于/ 运行/ 环境/ 稳定/ 的/ 情况/ ,/ 环境/ 的/ 变化/ 会/ 引起/ 所/ 建立/ 模型/ 的/ 改变/ ,/ 从而/ 造成/ 检测/ 结果/ 的/ 不/ 准确/ ./ 针对/ 此/ 问题/ ,/ 我们/ 此前/ 的/ 工作/ [/ 12/ ]/ 面向/ 采用/ 多层/ 架构/ 的/ Web/ 系统/ ,/ 通过/ 实验/ 结果/ 分析/ 发现/ 负载/ 的/ 变化/ (/ 包括/ 并发/ 数量/ 和/ 访问/ 序列/ )/ 会/ 造成/ 系统/ 度量/ 值/ 的/ 变化/ 以及/ 关联/ 模型/ 的/ 改变/ ./ 进而/ 根据/ Web/ 应用/ 的/ 负载/ 波动/ 呈现出/ 周期性/ 的/ 特点/ ,/ 提出/ 了/ 一种/ 负载/ 感知/ 的/ 故障/ 检测/ 方法/ ./ 如图/ 3/ 所示/ ,/ 我们/ 首先/ 引入/ 了/ 负载/ 向量/ 对/ 动态/ 负载/ 进行/ 刻画/ ,/ 而后/ 提出/ 一种/ 在线/ 增量/ 式/ 聚类/ 方法/ 对/ 负载/ 模式/ 进行/ 训练/ 与/ 识别/ ./ 在/ 此基础/ 上/ ,/ 在/ 一定/ 负载/ 模式/ 下/ 利用/ 局部/ 离群/ 因数/ (/ LocalOutlierFactor/ ,/ LOF/ )/ 来/ 表示/ 系统/ 运行/ 状态/ ,/ 通过/ 监测/ LOF/ 值/ 的/ 变化/ 来/ 监测/ 系统/ 健康状况/ 以/ 检测/ 故障/ ./ 由于/ 考虑/ 到/ 了/ 负载/ 对/ 故障/ 检测/ 造成/ 的/ 影响/ 能够/ 有效/ 提高/ 检测/ 的/ 准确性/ ./ 3.2/ ./ 2/ 基于/ 度量/ 关联/ 模型/ 的/ 方法/ 基于/ 度量/ 关联/ 模型/ 的/ 方法/ 建立/ 度量/ 间/ 的/ 关联/ 关系/ ,/ 通过/ 监测/ 关联性/ 的/ 变化/ 来/ 分析/ 系统/ 运行/ 状态/ ./ 该类/ 方法/ 基于/ 假设/ :/ 正常/ 运行/ 的/ 软件系统/ 的/ 监测/ 度量/ 间/ 呈现/ 长期/ 稳定/ 的/ 关联性/ ./ 例如/ 对于/ 多层/ 架构/ 的/ Web/ 应用/ ,/ 前端/ Web/ 服务器/ HTTP/ 请求/ 的/ 激增/ ,/ 通常/ 会/ 引起/ 后/ 端/ 数据库/ 服务器/ SQL/ 请求/ 的/ 激增/ ,/ 那么/ HTTP/ 请求/ 和/ SQL/ 请求/ 之间/ 显然/ 存在/ 着/ 关联性/ ./ 这类/ 工作/ 主要/ 包括/ 以下/ 几个/ 阶段/ :/ 搜集/ 系统/ 运行/ 时/ 的/ 监测/ 度量/ ,/ 根据/ 应用/ 需要/ 选择/ 特定/ 类型/ 的/ 统计/ 模型/ ,/ 计算/ 参数/ 得到/ 模型/ ,/ 利用/ 新/ 的/ 监测数据/ 检验/ 得到/ 的/ 模型/ ./ 建立/ 的/ 模型/ 可以/ 分为/ 线性/ 和/ 非线性/ 回归/ 两类/ :/ (/ 1/ )/ 线性/ 回归/ 模型/ 由于/ 线性关系/ 在/ 现实/ 系统/ 中/ 普遍存在/ ,/ 较为简单/ 且/ 时间/ 复杂度/ 低/ ,/ 许多/ 工作/ 利用/ 其/ 建立/ 系统/ 度量/ 间/ 的/ 关联性/ ./ 文献/ [/ 13/ ]/ 为/ 感兴趣/ 的/ 度量/ 创建/ 多个/ 线性/ 回归/ 模型/ ,/ 利用/ 最小/ 二乘/ 回归/ 来/ 对/ 各/ 变量/ 的/ 参数/ 进行/ 估算/ ,/ 如下/ 式/ 所示/ :/ 其中/ ,/ y/ 为/ 关注/ 度量/ 的/ 预测值/ ,/ xi/ 为/ 已知/ 各/ 度量/ 实际/ 值/ ,/ bi/ 为/ 参数/ ./ 作者/ 只是/ 关注/ 于/ 建立/ 度量/ 间/ 的/ 线性/ 关联/ 模型/ 以/ 帮助/ 理解/ 系统/ ,/ 而/ 未/ 提及/ 如何/ 进行/ 系统故障/ 检测/ ./ 文献/ [/ 14/ ]/ 尝试/ 利用/ 简单/ 线性/ 回归/ (/ SimpleLinearRegression/ ,/ SLR/ )/ 和/ 鲁棒/ 线性/ 回归/ (/ RobustLinearRegression/ ,/ RLR/ )/ 模型/ ,/ 在/ 足够/ 长/ 的/ 周期/ 内/ 搜集/ 各/ 度量/ 的/ 监测数据/ ,/ 利用/ 关联/ 检验/ 来/ 发现/ 具有/ 关联/ 关系/ 的/ 度量/ ,/ 以/ 建模/ 度量/ 间/ 的/ 稳定/ 关联性/ ,/ 进而/ 采用/ 交叉/ 验证/ 检验/ 模型/ 的/ 有效性/ ./ 建立/ 关联性/ 模型/ 可以/ 采用/ 增量/ 式/ 方式/ ,/ 在/ 上/ 个/ 监测/ 周期/ 的/ 基础/ 上/ 逐步/ 增加/ 监测/ 度量/ ,/ 直到/ 达到/ 定义/ 的/ 最大/ 度量/ 数量/ 或者/ 诊断/ 结果/ 不会/ 改变/ ./ 当/ 监测/ 所有/ 度量/ 的/ 开销/ 较/ 高时/ ,/ 则/ 可以/ 采用/ 增量/ 式/ ;/ 当/ 监测/ 开销/ 可以/ 接受/ 时则/ 对/ 所有/ 度量/ 都/ 进行/ 考虑/ ./ Page7/ (/ 2/ )/ 非线性/ 回归/ 模型/ Jiang/ 等/ 人/ [/ 4/ ]/ 关注/ 于/ 存在/ 稳定/ 关联/ 关系/ 的/ 度量/ 对/ ,/ 利用/ 自/ 回归/ (/ Auto/ -/ regressiveRegressionwitheXogenousinput/ ,/ ARX/ )/ 来/ 建模/ 度量/ 间/ 的/ 关联性/ ,/ 如下/ 式/ 所示/ :/ y/ (/ t/ )/ +/ a1y/ (/ t/ -/ 1/ )/ +/ …/ +/ any/ (/ t/ -/ n/ )/ =/ b0x/ (/ t/ -/ k/ )/ +/ …/ +/ bm/ (/ t/ -/ k/ -/ m/ )/ (/ 2/ )/ 其中/ ,/ n/ ,/ m/ ,/ k/ 是/ 模型/ 的/ 阶数/ ,/ 决定/ 了/ 此前/ 多少/ 步骤/ 影响/ 当前/ 步骤/ 的/ 结果/ ./ 作者/ 通过/ 监测/ 度量/ 间/ 的/ 关联性/ 变化/ 来/ 分析/ 系统/ 运行/ 状态/ ,/ 当/ 多个/ 关联性/ 出现/ 较大/ 波动/ ,/ 则/ 认为/ 系统/ 出现/ 故障/ ./ 与/ 简单/ 线性/ 回归/ 模型/ 相比/ ,/ ARX/ 模型/ 能够/ 考虑/ 此前/ 多个/ 运行/ 状态/ ,/ 并且/ 具有/ 动态/ 更新/ 的/ 特点/ ./ 但是/ 建立/ ARX/ 模型/ 的/ 时间/ 复杂度/ 较/ 高/ ,/ 为/ 发现/ 度量/ 对间/ 存在/ 关联性/ 的/ 时间/ 复杂度/ O/ (/ n2/ )/ 乘以/ 模型/ 建立/ 的/ 开销/ (/ n/ 为/ 度量/ 数量/ )/ ./ 因此/ 作者/ 讨论/ 两个/ 算法/ 以/ 加快/ 发现/ 度量/ 关联性/ :/ 第一个/ 算法/ ,/ 将/ 相关/ 的/ 度量/ 划分/ 为/ 若干/ 簇/ ,/ 搜索/ 每个/ 簇中/ 的/ 稳定/ 关联性/ ;/ 第二个/ 算法/ ,/ 利用/ 度量/ 关联/ 的/ 传递性/ 优化/ 模型/ 的/ 学习/ 过程/ [/ 15/ ]/ ./ 该/ 方法/ 效果/ 很大/ 程度/ 上/ 取决于/ 建立/ ARX/ 模型/ 的/ 参数/ 设定/ ,/ 但/ 设置/ 合理/ 的/ 参数/ 较为/ 困难/ ./ 如果/ 阶数/ 范围/ 设定/ 过/ 小/ ,/ 则/ 不能/ 获得/ 合理/ 的/ 模型/ ./ 相反/ 如果/ 阶数/ 范围/ 设定/ 过大/ ,/ 则/ 出现/ 过度/ 拟合/ ,/ 计算/ 复杂度/ 将/ 成倍增加/ ./ 作者/ 对/ 这些/ 参数/ 设定/ 了/ 范围/ (/ 0/ / n/ ,/ m/ ,/ k/ / 2/ )/ 而/ 不是/ 固定/ 的/ 数字/ ,/ 以/ 学习/ 多个/ 候选/ 模型/ ,/ 根据/ 实验/ 结果/ 来/ 选择/ 一个/ 合适/ 的/ 模型/ ./ 文献/ [/ 16/ ]/ 比较/ 五种/ 回归/ 模型/ ,/ 包括/ SLR/ 、/ 转换/ 数据/ 的/ 简单/ 线性/ 回归/ (/ SLRusingTransformedData/ ,/ SLRT/ )/ 、/ 平滑/ 数据/ 的/ 简单/ 线性/ 回归/ (/ SLRusingSmoothedData/ ,/ SLRS/ )/ 、/ ARX/ 和/ 局部/ 加权/ 回归/ (/ LocallyWeightedRegression/ ,/ LWR/ )/ ./ 其中/ ,/ SLRT/ 尝试/ 通过/ 对/ 线性/ 模型/ 进行/ 数据/ 变换/ ,/ 引入/ 非线性/ 关系/ ,/ 具有/ 以下/ 形式/ :/ 其中/ ,/ T/ (/ x/ )/ 为/ x/ 的/ 非线性/ 转换/ ,/ y/ (/ x/ )/ 为/ y/ (/ x/ )/ 经过/ 转换/ 后/ 的/ 表示/ ,/ b0/ 和/ b1/ 为/ 参数/ ./ 找到/ 合适/ 的/ 非线性/ 转换方法/ 相当/ 重要/ ,/ 作者/ 尝试/ 一些/ 简单/ 的/ 函数/ 形式/ 来/ 描述/ 多种/ 非线性/ 关系/ ,/ 如/ T/ (/ x/ )/ =/ log/ (/ 1/ +/ x/ )/ ,/ 其/ 逆转/ 形式/ T/ (/ x/ )/ =/ (/ x/ +/ 1/ )/ -/ 1/ ,/ 平方根/ 形式/ T/ (/ x/ )/ =/ x0/ ./ 5/ ./ 该/ 方法/ 包括/ 建立/ 模型/ 、/ 检验/ 模型/ 和/ 检测/ 故障/ 等/ 三个/ 阶段/ ./ 在/ 建模/ 阶段/ ,/ 搜集/ 监测数据/ 对/ 度量/ 对/ 进行/ 建模/ ,/ 利用系数/ R2/ (/ coefficientofdetermination/ )/ 来/ 辨别/ 关联/ 模型/ 的/ 适合/ 程度/ ,/ 选择/ 具有/ 较/ 高/ R2/ 的/ 模型/ ./ 在/ 检验/ 阶段/ ,/ 进行/ 更/ 多/ 的/ 实验/ ,/ 搜集/ 更/ 多/ 的/ 监测数据/ ,/ 检验/ 模型/ 是否/ 能够/ 解释/ 这些/ 采样/ ,/ 若能/ 成功/ 解释/ 则/ 认为/ 建立/ 的/ 模型/ 是/ 稳定/ 的/ ./ 在/ 检测/ 阶段/ ,/ 计算/ 当前/ 监测数据/ 与/ 目标/ 模型/ 的/ 偏差/ ,/ 当其/ 超出/ 预先/ 定义/ 的/ 阈值/ ,/ 则/ 认为/ 与/ 已知/ 模型/ 相冲突/ ./ 从/ 系统/ 总体/ 进行/ 考虑/ ,/ 对/ 所有/ 建立/ 的/ 模型/ 都/ 进行/ 检查/ ,/ 以/ 检测/ 发现/ 了/ 多少/ 异常/ ./ 当/ 所有/ 模型/ 中/ 很大/ 比例/ 都/ 报告/ 异常/ ,/ 就/ 怀疑/ 系统/ 出现/ 了/ 故障/ ./ 与/ 某个/ 度量/ 相关/ 的/ 模型/ 发生冲突/ 的/ 越/ 多/ ,/ 这个/ 度量/ 的/ 异常/ 分数/ 也/ 就/ 越/ 高/ ,/ 对/ 这些/ 分数/ 进行/ 排序/ ,/ 而后/ 提取/ 这个/ 度量/ 所属/ 的/ 组件/ ./ 然而/ 这种/ 方法/ 的/ 有效性/ 取决于/ 众多/ 阈值/ 的/ 设定/ ,/ 包括/ R2/ 、/ 偏离/ 程度/ 以及/ 冲突/ 模型/ 占/ 总/ 模型/ 的/ 比例/ 等/ ./ 这些/ 阈值/ 通常/ 难于/ 事先/ 确定/ ,/ 并且/ 不同/ 的/ 应用/ 通常/ 会/ 有/ 不同/ 的/ 阈值/ ./ Peerwatch/ 面向/ 虚拟化/ 数据中心/ ,/ 引入/ 典型/ 关联/ 分析/ (/ CanonicalCorrelationAnalysis/ ,/ CCA/ )/ 来/ 建模/ 部署/ 在/ 不同/ 虚拟机/ 上/ 的/ ,/ 相同/ 应用/ 的/ 多个/ 实例/ 间/ 的/ 关联性/ ,/ 用以/ 检查/ 每个/ 应用/ 实例/ 的/ 状态/ [/ 17/ ]/ ./ 在/ 操作过程/ 中/ ,/ 如果/ 一些/ 关联性/ 发生/ 较/ 大幅度/ 的/ 下降/ ,/ Peerwatch/ 认为/ 系统/ 处于/ 故障/ 状态/ ,/ 并且/ 发出/ 警报/ ./ 与/ 其他/ 众多/ 实例/ 的/ 关联性/ 发生/ 改变/ 的/ 实例/ ,/ 则/ 检测/ 为/ 故障/ 实例/ ./ 文献/ [/ 18/ ]/ 观察/ 到/ 某些/ 度量/ 的/ 监测数据/ 点/ 紧密/ 围绕/ 着/ 中心点/ ,/ 因此/ 采用/ 高斯/ 混合/ 模型/ (/ GaussianMixtureModel/ ,/ GMM/ )/ 来/ 建模/ 度量/ 间/ 的/ 关联性/ ./ 这些/ 方法/ 虽然/ 具有/ 一定/ 故障/ 检测/ 能力/ ,/ 然而/ 在/ 实践/ 当中/ 面临/ 着/ 很多/ 问题/ ./ 很多/ 方法/ 仅/ 能够/ 建模/ 度量/ 关联/ 中/ 的/ 一些/ 特定/ 形式/ ./ 例如/ SLRT/ 通常/ 只是/ 涉及/ 到/ 一些/ 特殊/ 的/ 数据/ 转换/ 形式/ (/ 如/ 逆转/ 、/ 平方/ 函数/ )/ ./ 另外/ 这些/ 方法/ 的/ 有效性/ 很大/ 程度/ 上/ 取决于/ 关键/ 参数/ 的/ 设定/ ,/ 例如/ GMM/ 要求/ 设定/ 适当/ 的/ 聚类/ 数量/ ,/ LWR/ 要求/ 选择/ 合适/ 的/ 平滑/ 参数/ ./ 同时/ 这些/ 模型/ 对于/ 不同/ 类型/ 的/ 应用/ ,/ 在/ 不同/ 场景/ 都/ 需要/ 配置/ 不同/ 的/ 参数/ ./ 此外/ 建立/ 这些/ 模型/ (/ 如/ GMM/ 、/ LWR/ )/ 会/ 具有/ 较/ 高/ 的/ 时间/ 复杂度/ ./ 例如/ 训练/ GMM/ 模型/ 通常/ 需要/ 期望/ 最大化/ 算法/ ,/ 其/ 开销/ 是/ O/ (/ sck/ )/ ,/ 其中/ ,/ c/ 是/ 聚类/ 数量/ ,/ s/ 是/ 用于/ 学习/ 的/ 采样/ 大小/ ,/ k/ 是/ 收敛/ 所/ 需要/ 递归/ 的/ 次数/ ./ 再/ 如/ LWR/ 模型/ 中/ ,/ 需要/ 找到/ 最近/ 邻居/ 以/ 适应/ 局部/ 回归/ ,/ 其/ 开销/ 为/ O/ (/ slog/ (/ s/ )/ )/ ./ 对于/ 复杂/ 系统/ ,/ 大量/ 的/ 监测数据/ 需要/ 在线/ 分析/ ,/ 这种/ 方法/ 的/ 使用/ 会/ 产生/ 较/ 高/ 的/ 开销/ ./ 3.2/ ./ 3/ 异常/ 度量/ 检测/ 方法/ 异常/ 度量/ 检测/ 就是/ 根据/ 监测数据/ 来/ 检测/ 出现异常/ 的/ 系统/ 度量/ ./ 常见/ 的/ 方法/ 包括/ 基于/ 贝叶斯/ 网/ 、/ 基于/ Page8/ 特征选择/ 、/ 基于/ 相似/ 度/ 和/ 基于/ 数理统计/ 的/ 方法/ 等等/ ,/ 下边/ 分别/ 进行/ 介绍/ ./ (/ 1/ )/ 基于/ 贝叶斯/ 网/ 的/ 方法/ 贝叶斯/ 网/ (/ BayesianNetwork/ )/ 是/ 一种/ 有向图/ 结构/ ,/ 是/ 人工智能/ 、/ 概率/ 理论/ 、/ 图论/ 、/ 决策/ 理论/ 相结合/ 的/ 产物/ ./ 它/ 利用/ 网络结构/ 的/ 有向图/ 表达/ 各/ 要素/ 之间/ 的/ 关联/ 关系/ 及/ 影响/ 程度/ ,/ 图中/ 节点/ 表示/ 信息/ 要素/ ,/ 有/ 向/ 边/ 表示/ 各/ 信息/ 要素/ 之间/ 的/ 关联/ 关系/ ,/ 用/ 条件/ 概率/ 表/ 表达/ 各/ 信息/ 要素/ 之间/ 的/ 影响/ 程度/ ./ 基于/ 贝叶斯/ 网/ 的/ 故障/ 检测/ 技术/ 目的/ 在于/ 在/ 故障/ 表现/ 和/ 系统/ 度量/ 之间/ 建立/ 基于/ 概率/ 的/ 因果关系/ ./ 通过/ 学习/ 故障/ 出现/ 的/ 先验概率/ 来/ 对/ 贝叶斯/ 网络/ 进行/ 训练/ ./ 诊断/ 时/ 根据/ 先验概率/ 求解/ 故障/ 现象/ 下/ 各种/ 系统/ 度量/ 的/ 后验/ 概率/ ./ 贝叶斯/ 网/ 采用/ 图形化/ 的/ 网络结构/ 直观/ 表达/ 变量/ 的/ 联合/ 概率分布/ ,/ 同时/ 能够/ 计算/ 各/ 特征/ 造成/ 故障/ 的/ 概率/ ./ 文献/ [/ 19/ -/ 20/ ]/ 定义/ 系统/ SLA/ 状态/ 为/ S/ =/ {/ S/ +/ ,/ S/ -/ }/ ,/ 其中/ ,/ S/ +/ 为/ SLA/ 符合/ ,/ S/ -/ 为/ SLA/ 冲突/ ;/ 度量/ 值/ 向量/ 为/ 犕/ =/ [/ m0/ ,/ m1/ ,/ …/ ,/ mn/ ]/ ,/ 其中/ ,/ mi/ 为/ 第/ i/ 个/ 度量/ 值/ ./ 那么/ ,/ 每个/ 度量/ mi/ 对/ SLA/ 冲突/ 的/ 影响/ 可以/ 量化/ 为/ 概率模型/ Prob/ (/ mi/ |/ S/ -/ )/ ,/ 概率/ 越高/ ,/ 则/ 该/ 度量/ mi/ 引起/ 故障/ 的/ 可能性/ 也/ 就/ 越/ 高/ ./ (/ 2/ )/ 基于/ 数理统计/ 的/ 方法/ 基于/ 数理统计/ 的/ 方法/ 基于/ 基本/ 假设/ :/ 正常/ 数据/ 实例/ 发生/ 在/ 随机/ 模型/ 概率/ 较/ 高/ 的/ 区域/ ,/ 而/ 故障/ 实例/ 发生/ 在/ 概率/ 较/ 低/ 的/ 区域/ ./ 该/ 技术/ 引入/ 统计/ 模型/ 以/ 符合/ 已有/ 数据/ ,/ 并/ 使用/ 某种/ 统计/ 推断/ 检验/ (/ StatisticalInferenceTest/ )/ 来/ 判断/ 监测数据/ 是否/ 符合/ 该/ 模型/ ,/ 图/ 4/ 基于/ 特征选择/ 的/ 可疑/ 度量/ 定位/ 将/ 那些/ 符合/ 度/ 较/ 低/ 的/ 监测数据/ 判定/ 为/ 故障/ ./ 例如/ χ/ 2/ 检验/ 是/ 较为/ 常见/ 的/ 假设检验/ 方法/ ,/ 用来/ 判定/ 两个/ 组件/ 监测数据/ 集/ 是否/ 符合/ 同/ 分布/ ,/ 若/ 不/ 符合/ ,/ 该/ 组件/ 则/ 检测/ 为/ 故障/ [/ 10/ ,/ 21/ ]/ ./ 我们/ 此前/ 的/ 工作/ [/ 22/ ]/ 基于/ 在/ 相同/ 负载/ 模式/ 下/ ,/ 度量/ 遵循/ 稳定/ 分布/ 的/ 假设/ ,/ 利用/ 学生/ T/ 检验/ 的/ 方法/ ,/ 计算/ 各/ 度量/ 与/ 正常/ 运行/ 状态/ 下/ 搜集/ 监测数据/ 的/ 符合/ 程度/ 以/ 检测/ 可疑/ 度量/ ./ 我们/ 观察/ 到/ 在/ 正常/ 状态/ 下/ ,/ 单位/ 负载/ 组件/ 的/ 资源/ 占用/ 保持稳定/ ,/ 但/ 当/ 出现/ 性能/ 异常/ ,/ 资源/ 占用/ 将会/ 出现/ 较大/ 波动/ [/ 23/ ]/ ./ 因此/ ,/ 我们/ 利用/ XmR/ 控制/ 图来/ 监测/ 各/ 组件/ 资源/ 利用/ 是否/ 稳定/ ,/ 由此/ 来/ 检测/ 出现/ 性能/ 异常/ 的/ 组件/ ./ 同时/ 我们/ 在/ [/ 24/ ]/ 中/ 应用/ EWMA/ 来/ 检测/ 负载/ 与/ 资源/ 和/ 性能/ 关联系数/ 的/ 异常/ 波动/ ./ 该类/ 方法/ 具有/ 较/ 小/ 的/ 计算/ 复杂度/ ,/ 适应/ 于/ 在线/ 检测/ 的/ 场景/ ./ (/ 3/ )/ 基于/ 特征选择/ 的/ 方法/ 我们/ 观察/ 到/ ,/ 系统故障/ 的/ 发生/ 通常/ 是/ 由于/ 某种/ 系统资源/ 使用/ 异常/ 引起/ 的/ ,/ 而/ 该/ 资源/ 问题/ 通常/ 会/ 表现/ 为/ 相应/ 的/ 度量/ 发生/ 巨大/ 波动/ ./ 根据/ 此/ 观察/ 结果/ ,/ 我们/ 此前/ 的/ 工作/ [/ 24/ ]/ 提出/ 基于/ 特征选择/ 的/ 可疑/ 度量/ 检测/ 方法/ ./ 将/ 检测/ 到/ 故障/ 发生/ 前后/ 搜集/ 到/ 的/ 数据/ 实例/ 标记/ 为/ 正例/ 和/ 反例/ ,/ 而后/ 选择/ 变化/ 较大/ 的/ 度量/ 作为/ 与/ 故障/ 相关/ 的/ 可疑/ 度量/ ./ 该/ 问题/ 可/ 抽象/ 为/ 特征选择/ 问题/ ,/ 以/ 获得/ 故障/ 发生/ 前后/ 分布/ 发生/ 较大/ 变化/ 的/ 系统/ 度量/ ,/ 并/ 量化/ 度量/ 异常/ 程度/ 以/ 检测/ 异常/ 资源/ ./ 如图/ 4/ 所示/ ,/ 在/ 检测/ 到/ 异常/ 发生/ 前/ 的/ 监测/ 实例/ 标记/ 为/ True/ ,/ 异常/ 发生/ 后/ 的/ 监测/ 实例/ 标记/ 为/ False/ ,/ 则/ 各度/ Page9/ 量/ 异常/ 程度/ 集合/ S/ 为/ S/ =/ F/ (/ P/ ,/ N/ )/ ,/ 其中/ ,/ P/ 为/ 标记/ 为/ True/ 的/ 监测数据/ 实例/ 集合/ ;/ N/ 为/ 标记/ 为/ False/ 的/ 监测数据/ 实例/ 集合/ ;/ F/ 为/ 特征选择/ 方法/ ./ (/ 4/ )/ 基于/ 相似/ 度/ 的/ 方法/ 基于/ 相似/ 度/ 的/ 方法/ 检测/ 故障/ 节点/ (/ 或/ 可疑/ 度量/ )/ ,/ 通过观察/ ,/ 当/ 某个/ 节点/ 发生/ 故障/ ,/ 或/ 某个/ 度量/ 出现异常/ 时/ ,/ 则/ 与其/ 关联/ 的/ 多个/ 模型/ 都/ 可能/ 发生冲突/ ;/ 对于/ 未/ 发生/ 故障/ 的/ 节点/ (/ 或/ 度量/ )/ ,/ 可能/ 只会/ 有/ 少量/ 与/ 之/ 关联/ 的/ 模型/ 发生冲突/ ./ 这类/ 方法/ 通常/ 使用/ Jaccard/ 系数/ (/ Jaccardcoefficient/ )/ 来/ 量化/ 节点/ (/ 或/ 度量/ )/ 与/ 故障/ 的/ 相关性/ ./ 假设/ 系统/ 中/ 存在/ n/ 个子/ 节点/ (/ 或/ 度量/ )/ ,/ 任意/ 两个/ 节点/ (/ 或/ 度量/ )/ 间/ 都/ 存在/ 关联/ 模型/ ,/ 那么/ ,/ 系统/ 中共/ 有个/ L/ =/ 0.5/ ×/ n/ ×/ (/ n/ -/ 1/ )/ 个/ 关联/ 模型/ ./ 模型/ 冲突/ 向量/ 为/ 犜/ b/ ,/ 它/ 有/ L/ 个/ 分量/ ,/ 代表/ L/ 个/ 节点/ 对/ ,/ 发生/ 模型/ 冲突/ 的/ 分量/ 为/ 1/ ,/ 否则/ 为/ 0/ ./ 每个/ 节点/ 对应/ 一个/ 向量/ 犜/ i/ (/ 1/ / i/ / n/ )/ ,/ 它/ 有/ L/ 个/ 分量/ ,/ 当该/ 节点/ 包含/ 在/ 第/ i/ 个/ 节点/ 对/ 中/ ,/ 该/ 节点/ 第/ i/ 个/ 分量/ 置/ 为/ 1/ ,/ 否则/ 置/ 为/ 0/ ./ 节点/ 对/ 阈值/ 违反/ (/ 犜/ b/ )/ T1T2T3T4123456/ 如表/ 3/ 所示/ ,/ 以/ 四个/ 节点/ (/ 六个/ 节点/ 对/ )/ 为例/ ,/ 计算/ 节点/ Jaccard/ 系数/ 的/ 公式/ 如下/ :/ Jaccard/ 系数/ 越大/ ,/ 则/ 相应/ 节点/ 是/ 故障/ 节点/ 的/ 可能性/ 越大/ ,/ 将/ 所有/ 节点/ 按/ Jaccard/ 系数/ 从大到/ 小/ 排序/ ./ 表/ 3/ 中/ 的/ 四个/ 节点/ 的/ Jaccard/ 系数/ 分别/ 为/ 0.2/ ,/ 1.0/ ,/ 0.2/ 及/ 0.2/ ,/ 则/ 节点/ 2/ 更/ 可能/ 是/ 故障/ 节点/ ./ Jaccard/ 系数/ 被/ 广泛应用/ 在/ 基于/ 度量/ 关联/ 的/ 方法/ 中以/ 检测/ 可疑/ 度量/ [/ 16/ ,/ 18/ ]/ ./ 文献/ [/ 5/ ]/ 将/ 组件/ 的/ 重要性/ 引入/ 到/ 故障/ 组件/ 检测/ 当中/ ,/ 假定/ 组件/ 的/ 依赖/ 关系/ 可以/ 通过/ 源代码/ 、/ 设计/ 文档/ 或/ 执行/ 路径/ 获得/ ,/ 那么/ 计算/ 组件/ 的/ 重要性/ 时/ 需要/ 同时/ 考虑/ 与/ 之/ 交互/ 的/ 其他/ 组件/ ,/ 并/ 对/ 其/ 进行/ 动态/ 调整/ ./ 作者/ 将/ 组件/ 的/ 重要性/ 定义/ 为/ 被/ 调用/ 的/ 可能性/ ,/ 将/ 计算/ 组件/ 重要性/ 的/ 问题/ 抽象/ 为/ 计算/ Internet/ 上/ Web/ 页面/ 访问/ 可能性/ 的/ 问题/ ./ PageRank/ 是/ 经典/ 的/ 计算/ 页面/ 访问/ 可能性/ 的/ 算法/ ,/ 因而/ 作者/ 引入/ PageRank/ 算法/ 来/ 计算/ 组件/ 的/ 重要性/ ./ PageRank/ 通过/ 将/ 浏览/ Web/ 页面/ 的/ 行为/ 建模/ 为/ 一个/ 随机/ 过程/ ,/ 并且/ 使用/ 静态/ 概率分布/ 作为/ 流行/ 度/ 的/ 测量/ ./ 作者/ 将/ 组件/ 对应/ 于/ 页面/ ,/ 组件/ 依赖/ 对应/ 于/ 页面/ 索引/ ,/ 组件/ 调用/ 对应/ 于/ 状态/ 转移/ ./ 同时/ ,/ 作者/ 考虑/ 到/ 流行/ 组件/ 应该/ 具有/ 更/ 高/ 的/ 权重/ ,/ 通过/ 评估/ 组件/ 的/ 流行/ 程度/ 来/ 调整/ 组件/ 的/ 异常/ 分数/ ./ 3.3/ 基于/ 日志/ 分析/ 的/ 方法/ 当前/ 复杂/ 分布式/ 软件系统/ 中/ ,/ 大量/ 日志/ 能够/ 通过/ 相对/ 简单/ 的/ 机制/ 搜集/ ,/ 这些/ 从/ 不同/ 层次/ 搜集/ 的/ 日志/ 对于/ 故障/ 检测/ 具有/ 较/ 高/ 的/ 价值/ ./ 然而/ 在/ 实际/ 系统/ 中/ ,/ 这些/ 日志/ 信息/ 并未/ 得到/ 充分利用/ ,/ 本/ 节/ 首先/ 介绍/ 日志/ 的/ 搜集/ 与/ 解析/ ,/ 而后/ 讨论/ 通过/ 挖掘/ 日志/ 信息/ 来/ 检测/ 故障/ 的/ 相关/ 工作/ ./ 传统/ 日志/ 信息/ 是/ 通过/ 标准/ 的/ 打印/ 语句/ 输出/ 的/ (/ 如/ C语言/ 中/ 的/ printf/ 、/ C++/ 语言/ 中/ 的/ cout/ 流/ )/ ./ 许多/ 高级/ 的/ 日志/ 框架/ (/ 如/ log4j/ ①/ 、/ SLF4j/ )/ 旨在/ 提高/ 日志/ 的/ 产生/ 方式/ ,/ 支持/ 柔性/ (/ 即/ 运行/ 时/ 可/ 配置/ )/ 的/ 日志/ 形式/ ,/ 能够/ 提升/ 日志/ 输出/ 的/ I/ // O/ 性能/ ,/ 并且/ 提供/ 了/ 多种/ 存储/ 方式/ ./ 这些/ 工具/ 的/ 部署/ 减少/ 了/ 程序/ 中/ 搜集/ 日志/ 的/ 操作/ ,/ 极大/ 提高/ 了/ 大规模/ 系统/ 中/ 日志/ 的/ 可管理性/ ./ 程序员/ 使用/ 这些/ 框架/ 可以/ 方便/ 的/ 产生/ 日志/ ,/ 并且/ 得到/ 更/ 多/ 信息/ (/ 如/ 时间/ 戳/ 和/ 与/ 每个/ 消息/ 相关/ 的/ 线程/ ID/ )/ ./ 当前/ 实际/ 系统/ 中/ ,/ 日志/ 通常/ 利用/ Syslog/ ②/ 来/ 搜集/ ,/ 由于/ Syslog/ 的/ 日志/ 信息/ 通过/ 远程/ 过程/ 调用/ (/ RemoteProcedureCall/ ,/ RPC/ )/ 发送到/ Syslog/ 服务器/ ,/ 因此/ ,/ 难以/ 应用/ 在/ 大规模/ 集群/ 系统/ ./ 文献/ [/ 25/ ]/ 实现/ 了/ 一个/ 分布式/ 日志/ 搜集/ 系统/ ,/ 在/ Hadoop/ 文件系统/ ③/ 存储/ 日志/ 文件夹/ ,/ 这种/ 设计/ 不/ 只/ 对/ 日志/ 文件夹/ 提供/ 可靠性/ 保障/ ,/ 而且/ Map/ -/ Reduce/ 编程/ 模式/ 使得/ 访问/ 与/ 处理/ 日志/ 文件/ 更为/ 有效/ ./ 日志/ 搜集/ 工具/ 在实践中/ 被/ 普遍/ 应用/ ,/ 但/ 分析/ 工具/ 的/ 缺乏/ 使得/ 大量/ 文本/ 日志/ 未/ 得到/ 充分利用/ ./ 已有/ 工作/ 大都/ 基于/ 能够/ 准确/ 检测/ 消息/ 类型/ 的/ 假设/ ,/ 例如/ 文献/ [/ 26/ -/ 27/ ]/ 手动/ 为/ SNMP/ 数据/ 标识/ 类型/ ,/ 但/ 消息/ 类型/ 会/ 多达/ 成千上万/ [/ 28/ ]/ ,/ 使得/ 这种/ 方式/ 难以/ 实施/ ./ 也/ 有/ 工作/ 利用/ 数据挖掘/ 技术/ (/ 如/ 频繁/ 项集/ )/ 来/ 找到/ 频繁/ 出现/ 的/ 字符串/ 及其/ 所在/ 的/ 位置/ 以/ 检测/ 消息/ 类型/ ./ 文献/ [/ 29/ ]/ 利用/ 聚类/ 和/ 模式/ 为/ 日志/ 抽取/ 消息/ 模板/ ./ IPLoM/ [/ 30/ -/ 31/ ]/ 递归/ 采用/ 优化/ 方法/ 来/ 检测/ 相似/ 日志/ 信/ logging/ ./ apache/ ./ org/ // log4j/ ,/ 2002/ ①/ ②/ ③/ tectureanddesign/ ./ Available/ :/ http/ :/ // // hadoop/ ./ apache/ ./ org/ ,/ Page10/ 息/ 中/ 不同/ 的/ 部分/ ,/ 以/ 决定/ 消息/ 类型/ ./ 这种/ 方法/ 对于/ 日志/ 中/ 频繁/ 出现/ 的/ 消息/ 类型/ 具有/ 较/ 好/ 的/ 效果/ ,/ 但/ 不/ 能够/ 应对/ 运行/ 时/ 偶尔/ 出现/ 的/ 消息/ 类型/ ./ 基于/ 模式匹配/ 的/ 方法/ (/ 如/ Logsurfer/ [/ 32/ ]/ 、/ Swatch/ [/ 33/ ]/ 和/ OSSEC/ ①/ )/ 是/ 最/ 常用/ 的/ 日志/ 分析方法/ ,/ 操作/ 人员/ 需要/ 指定/ 正则表达式/ 以/ 从/ 日志/ 中/ 提取/ 文本/ 模式/ ,/ 而后/ 对/ 抽取/ 的/ 模式/ 进行/ 简单/ 的/ 分类/ 聚集/ ./ 此类/ 系统/ 存在/ 的/ 主要/ 问题/ 是/ 这些/ 模式/ 通常/ 难以获得/ 和/ 维护/ ,/ 大多数/ 模式/ 并/ 不能/ 反映/ 真实/ 问题/ ,/ 或者/ 会/ 产生/ 太多/ 的/ 警报/ ,/ 误报率/ 较/ 高/ [/ 34/ ]/ ./ 此类/ 系统/ 和/ 传统/ 的/ 脚本/ 在/ 本质/ 上/ 并/ 无差别/ ,/ 它们/ 将/ 日志/ 建模/ 成为/ 英文单词/ 集合/ ,/ 只/ 考虑/ 日志/ 的/ 文本属性/ ,/ 但/ 单词/ 语义/ 并/ 不/ 能够/ 全面/ 表现/ 系统/ 问题/ ./ 文献/ [/ 35/ ]/ 首先/ 对系统/ 源码/ 进行/ 分析/ ,/ 从/ 源代码/ 中/ 获得/ 日志/ 模版/ ,/ 以/ 〈/ name/ ,/ type/ 〉/ 形式/ 展现/ 变量/ 列表/ 和/ 消息/ 类型/ ,/ 将/ 这些/ 模版/ 与/ 日志/ 消息/ 相匹配/ ,/ 从而/ 将/ 日志/ 消息/ 从/ 非/ 结构化/ 文本/ 转换/ 为/ 结构化/ 数据/ ./ 通过/ 选择/ 变量/ 将/ 日志/ 消息/ 分组/ ,/ 从中/ 抽取/ 信息/ 构建/ 特征向量/ ./ 相同/ 组/ 的/ 日志/ 消息/ 是/ 强/ 关联/ 的/ ,/ 特征/ 之间/ 存在/ 着/ 关联性/ ,/ 偏离/ 关联/ 模式/ 的/ 为/ 异常/ 向量/ ./ 作者/ 利用/ PCA/ 对/ 特征向量/ 进行/ 异常/ 检测/ ,/ 将/ 特征向量/ 标识/ 为/ 正常/ 和/ 异常/ ,/ 同时/ 为了/ 更好/ 理解/ 异常/ 检测/ 结果/ ,/ 利用/ 决策树/ 来/ 可视化/ 结果/ ./ 基于/ 时序/ 分析/ 的/ 方法/ ,/ 建模/ 日志/ 序列/ (/ 如隐式/ 马尔科夫/ 模型/ [/ 28/ ]/ )/ ,/ 建立/ 时间/ 与/ 失效/ 之间/ 的/ 关联性/ ,/ 以/ 检测/ 与/ 系统/ 失效/ 相关/ 的/ 消息/ ./ 然而/ 这种/ 方法/ 仅/ 将/ 日志/ 作为/ 单一/ 的/ 时间/ 序列/ ,/ 在/ 产生/ 相互/ 交叉/ 日志/ 的/ 大规模/ 集群/ 系统/ 中/ ,/ 模型/ 将会/ 变得/ 过于/ 复杂/ ,/ 并且/ 相互/ 交叉/ 的/ 日志/ 使得/ 参数/ 难于/ 调整/ ,/ 不会/ 有/ 很/ 好/ 的/ 表现/ ./ 文献/ [/ 31/ ]/ 从/ 日志/ 流中/ 抽象/ 出/ 有限/ 状态机/ (/ FiniteStateMachine/ ,/ FSM/ )/ ,/ 每个/ 消息/ 类型/ 抽象/ 成为/ 一种/ 状态/ ,/ 所/ 期望/ 的/ 消息/ 状态/ 序列/ 由/ FSM/ 捕获/ ,/ 当/ 日志/ 序列/ 不/ 符合/ FSM/ 则/ 检测/ 为/ 故障/ ./ 3.4/ 基于/ 行为/ 分析/ 的/ 方法/ 基于/ 系统/ 行为/ 分析/ 的/ 方法/ ,/ 通过/ 监测/ 框架/ (/ 如/ X/ -/ trace/ [/ 36/ ]/ )/ 对/ 中间件/ 进行/ 注入/ ,/ 以/ 跟踪/ 组件/ 交互/ 行为/ 和/ 请求/ 处理/ 路径/ ,/ 基于/ 此/ 对系统/ 行为/ 进行/ 建模/ ./ 该/ 方法/ 需要/ 了解/ 系统/ 内部/ 执行/ 流/ 信息/ (/ 如/ 数据流/ 和/ 控制流/ )/ ,/ 某些/ 系统/ 信息/ 可以/ 在/ 设计/ 文档/ 、/ 源代码/ 或/ 配置/ 源文件/ 中/ 分析/ 得到/ ./ 但/ 大多数/ 情况/ 下/ ,/ 系统/ 对于/ 管理员/ 是/ 透明/ 的/ ,/ 这时/ ,/ 只/ 能够/ 利用/ 面向/ 方面/ 编程/ (/ AspectOrientedProgramming/ ,/ AOP/ )/ [/ 37/ ]/ 等/ 方法/ 进行/ 代码/ 注入/ ,/ 以/ 搜集/ 运行/ 时/ 的/ 系统/ 行为/ ./ 该/ 方法/ 根据/ 关注点/ 的/ 不同/ 分为/ 面向/ 组件/ 交互/ 行为/ 和/ 面向/ 请求/ 执行/ 路径/ 的/ 方法/ ./ 前者/ 关注/ 于/ 基于/ 组件/ 的/ 系统/ 中/ 组件/ 之间/ 的/ 交互/ 行为/ ,/ 后者/ 则/ 面向/ “/ 请求/ -/ 响应/ ”/ 交互/ 型/ 系统/ (/ 如/ 电子商务/ 应用/ )/ 的/ 请求/ 处理/ 路径/ ./ 这种/ 方法/ 与/ 系统/ 或/ 应用/ 特点/ 相关/ ,/ 能够/ 发现/ 应用层/ 故障/ ,/ 但/ 应用/ 场景/ 和/ 用户/ 访问/ 模式/ 的/ 变化/ 会/ 导致/ 组件/ 交互/ 行为/ 和/ 请求/ 处理/ 执行/ 路径/ 的/ 改变/ ,/ 因此/ ,/ 这种/ 方法/ 不/ 适应/ 负载/ 模式/ 或/ 部署/ 环境/ 动态变化/ 的/ 情况/ ./ 3.4/ ./ 1/ 面向/ 组件/ 交互/ 行为/ 面向/ 组件/ 交互/ 行为/ 的/ 故障/ 检测/ 方法/ 关注/ 于/ 单个/ 组件/ 与/ 其他/ 组件/ 的/ 交互/ 行为/ ,/ 当/ 交互/ 行为/ 发生/ 了/ 改变/ ,/ 则/ 表明/ 该/ 组件/ 的/ 状态/ 发生/ 了/ 变化/ ./ Pinpoint/ 将/ 组件/ 实例/ 间/ 调用/ 频率/ 作为/ 检验/ 的/ 参考/ 分布/ ,/ 当/ 组件/ 实际/ 行为/ 与/ 参考/ 分布/ 不符/ ,/ 则/ 表明/ 组件/ 发生/ 故障/ ./ 组件/ 交互/ 行为/ 建模/ 为/ 其中/ ,/ 当前/ 组件/ 与/ 组件/ j/ 的/ 实际/ 调用/ 频率/ 为/ Nj/ ,/ 期望/ 调用/ 频率/ 为/ wj/ ,/ 与/ 当前/ 组件/ 交互/ 的/ 组件/ 数量/ 为/ k/ ./ 该/ 模型/ 为/ 符合/ 自由度/ 为/ (/ k/ -/ 1/ )/ 的/ χ/ 2/ 分布/ ,/ 利用/ 其/ 检验/ 当前/ 行为/ 与/ 参考模型/ 的/ 偏差/ ./ Q/ 是/ 组件/ 当前/ 行为/ 与/ 期望/ 行为/ 符合/ 相同/ 潜在/ 分布/ 的/ 程度/ ,/ Q/ 值越/ 高则/ 监测/ 状态/ 与/ 正常/ 状态/ 分布/ 的/ 偏差/ 也/ 就/ 越/ 大/ ./ 计算/ 置信度/ 为/ α/ 的/ 阈值/ ,/ 将/ Q/ 与/ 阈值/ 进行/ 比较/ ,/ 以此/ 来/ 检验/ 组件/ 是否/ 出现/ 故障/ ./ Pinpoint/ 从/ 系统/ 内部/ 组件/ 的/ 角度/ 考虑/ ,/ 而/ 文献/ [/ 21/ ]/ 则/ 关注/ 于/ 用户/ 访问/ 行为/ 的/ 变化/ ./ 通过/ 分析/ HTTP/ 访问/ 日志/ 来/ 分析/ 用户/ 行为/ ,/ 其/ 改变/ 是/ 站点/ 失效/ 的/ 表现/ ./ 该/ 方法/ 基于/ 假设/ ,/ 在/ 正常/ 条件/ 下/ ,/ 不同/ 时间/ 间隔/ 搜集/ 到/ 的/ 各/ 页面/ 点击/ 次数/ 应该/ 符合/ 相同/ 分布/ ./ 通过/ 系统/ 监测/ ,/ 可以/ 获得/ 两个/ 数据/ 集合/ A/ =/ {/ a1/ ,/ a2/ ,/ …/ ,/ an/ }/ 和/ B/ =/ {/ b1/ ,/ b2/ ,/ …/ ,/ bn/ }/ ,/ 其中/ ,/ A/ 和/ B/ 为/ 不同/ 时间段/ 各/ 组件/ 点击率/ 的/ 集合/ ,/ ai/ 和/ bi/ 分别/ 为/ 组件/ i/ 在/ 不同/ 时刻/ 的/ 调用/ 频率/ :/ 对于/ 每个/ ai/ 和/ bi/ ,/ 计算/ 期望值/ :/ i/ =/ siSa/ // (/ Sa/ +/ Sb/ )/ ,/ EBEA/ χ/ 2/ =/ ∑/ n/ 则/ 可以/ 用/ 自由度/ 为/ (/ n/ -/ 1/ )/ 的/ χ/ 2/ 分布/ 来/ 检验/ 两个/ 向量/ 是否/ 符合/ 相同/ 潜在/ 分布/ ./ 以上/ 的/ 工作/ 单纯/ 从/ 组件/ 交互/ 行为/ 考虑/ ,/ 而/ 组件/ ①/ OSSEC/ ./ OSSECManual/ ./ Available/ :/ http/ :/ // // www/ ./ ossec/ ./ Page11/ 间/ 的/ 交互/ 行为/ 会/ 引起/ 各/ 组件/ 资源/ 使用/ 的/ 变化/ ./ 对此/ ,/ 我们/ 此前/ 的/ 工作/ [/ 38/ ]/ 面向/ 基于/ 组件/ 的/ 软件/ ,/ 通过/ 分析/ 组件/ 间/ 的/ 服务/ 调用/ ,/ 来/ 监测/ 各/ 组件/ 资源/ 使用/ ,/ 提出/ 了/ 一种/ 基于/ 线程/ 染色/ 的/ 组件/ 资源/ 监测技术/ ./ 由于/ 线程/ 是/ 物理/ 资源/ 消耗/ 的/ 实体/ ,/ 线程/ 的/ 执行/ 会/ 占用/ CPU/ 时间/ ,/ 而/ 线程/ 创建对象/ 会/ 占用/ 内存空间/ ./ 同时/ 组件/ 的/ 交互/ 会/ 造成/ 线程/ 在/ 组件/ 间/ 的/ 转移/ ,/ 而/ 组件/ 的/ 交互/ 通常/ 分为/ 静态方法/ 调用/ 和/ 动态/ 服务/ 交互/ 两种/ ,/ 我们/ 利用/ AOP/ 对/ 方法/ 或/ 服务/ 进行/ 接口/ 注入/ ,/ 在线/ 监测/ 线程/ 在/ 组件/ 间/ 的/ 转移/ 和/ 执行/ ./ 进而/ 将/ 系统资源/ 的/ 使用/ 划分/ 到/ 组件/ 粒度/ ,/ 通过/ 分析/ 各/ 组件/ 资源/ 使用/ 的/ 波动/ 情况/ 检测/ 问题/ 组件/ ./ 3.4/ ./ 2/ 面向/ 请求/ 执行/ 路径/ 面向/ 请求/ 执行/ 路径/ 的/ 故障/ 检测/ 方法/ 关注/ 于/ “/ 请求/ -/ 响应/ ”/ 交互式/ 系统/ 处理/ 请求/ 的/ 执行/ 路径/ ./ CloudDiag/ 利用/ 代码/ 注入/ 的/ 方法/ 监测/ 各/ 方法/ 的/ 请求/ HostHost12012/ -/ 01/ -/ 0116/ :/ 31/ :/ 31690272169/ 表/ 4/ 方法/ 执行/ 时间/ 统计表/ 表/ 5/ 方法/ 调用/ 关系/ 统计表/ RequestIDPinpoint/ 将/ 执行/ 路径/ 集合/ 建模/ 为/ 概率/ 上下文/ 无关/ 文法/ (/ ProbabilisticContext/ -/ FreeGrammar/ ,/ PCFG/ )/ ,/ 语法/ 符号/ 表示/ 提供/ 服务/ 组件/ ,/ 语法/ 规则/ 表示/ 请求/ 在/ 组件/ 间/ 的/ 转移/ 概率/ ,/ 当/ 实际/ 监测/ 与/ 模型/ 定义/ 的/ 转移/ 概率/ 出现/ 的/ 偏差/ 大于/ 定义/ 的/ 阈值/ ,/ 即/ 认为/ 请求/ 处理/ 路径/ 上/ 出现/ 的/ 故障/ [/ 10/ ]/ ./ Magpie/ 合并/ 日志/ 信息/ ,/ 而后/ 采用/ 事件/ 字符串/ 来/ 表示/ 序列化/ 请求/ 事件/ ,/ 以/ 跟踪/ 请求/ 的/ 执行/ 路径/ ,/ 并/ 使用/ 资源/ 使用/ 信息/ 对/ 其/ 进行/ 标注/ [/ 40/ ]/ ./ 利用/ 标准化/ 的/ Euclidean/ 距离/ 来/ 表示/ 资源/ 使用/ 间/ 的/ 距离/ ,/ 将/ 请求/ 事件/ 字符串/ 划分/ 为/ 簇/ ,/ 当/ 事件/ 字符串/ 不/ 符合/ 其所/ 对应/ 的/ 簇则/ 检测/ 为/ 故障/ ./ 为了/ 识别/ 事件/ 序列/ ,/ 将/ 系统/ 运行/ 状态/ 建模/ 为/ 概率/ 状态机/ ,/ 每个/ 状态/ 间/ 的/ 转换/ 抽象/ 为/ 一个/ 事件/ ,/ 并/ 具有/ 一定/ 的/ 概率/ ./ Spectroscope/ 跟踪/ 组件/ 内部/ 或者/ 跨/ 组件/ 的/ 请求/ 流/ ,/ 辨别/ 请求/ 流/ 的/ 处理/ 时间/ 变化/ ,/ 通过/ 比较/ 系统/ 的/ 不同/ 版本/ ,/ 或/ 不同/ 时间段/ 请求/ 流/ 的/ 执行/ 处理/ 时间/ 进行/ 故障/ 检测/ [/ 41/ ]/ ./ 该/ 方法/ 能够/ 检测/ 由于/ 系统/ 变化/ (/ 如/ 代码/ 、/ 配置/ )/ 所/ 造成/ 的/ 性能/ 问题/ ,/ 但/ 负载/ 在/ 不同/ 时间段/ 发生/ 巨大变化/ 造成/ 资源/ 竞争/ ,/ 所/ 带来/ 的/ 性能/ 问题/ 就/ 难以/ 准确/ 定位/ ./ 响应/ 时间/ 以及/ 方法/ 的/ 调用/ 关系/ [/ 39/ ]/ ./ 监测/ 数据格式/ 如表/ 4/ 和表/ 5/ 所示/ ,/ 从中/ 可以/ 获取/ :/ (/ 1/ )/ 请求/ 处理/ 时间/ :/ 获取/ 相同/ 主机/ (/ Host/ )/ ,/ 相同/ 请求/ (/ RequestID/ )/ ,/ 标识/ 为/ Flag/ =/ Start/ // End/ 的/ 记录/ ,/ 计算/ Timestamp/ 的/ 差值/ ;/ (/ 2/ )/ 请求/ 调用/ 树/ :/ 属于/ 同一个/ 请求/ (/ RequestID/ )/ 的/ 监测数据/ 分为/ 相同/ 组/ ,/ 每/ 类/ 请求/ 根据/ CallerMID/ 和/ CalleeMID/ 建立/ 调用/ 树/ ./ 同类/ 请求/ 具有/ 相同/ 的/ 调用/ 树/ ,/ 延迟/ 相近/ ,/ 当/ 延迟/ 的/ 变化/ 系数/ 超出/ 阈值/ ,/ 则/ 检测/ 为/ 请求/ 异常/ ./ 对于/ 每个/ 异常/ 分类/ ,/ 建立/ m/ ×/ n/ 矩阵/ 犕/ ,/ m/ 为/ 调用/ 树/ 的/ 请求/ 数量/ ,/ n/ 为/ 调用/ 树中/ 被/ 调用/ 方法/ 的/ 数量/ ,/ Mij/ 表示/ 第/ i/ 个/ 请求/ 调用/ 第/ j/ 个/ 方法/ 的/ 执行/ 时间/ ,/ 犕/ (/ j/ )/ 为/ 第/ j/ 个/ 方法/ 的/ 执行/ 时间/ 向量/ ./ CloudDiag/ 将/ 辨别/ 分类/ 中/ 的/ 异常/ 方法/ 调用/ 的/ 问题/ 抽象/ 为/ ,/ 检测/ 矩阵/ 中/ 噪音/ 数据/ 的/ 过程/ ,/ 利用/ 鲁棒主/ 成分/ 分析方法/ (/ RobustPrincipleComponentAnalysis/ ,/ RPCA/ )/ 检测/ 异常/ 方法/ 调用/ ./ 1693.5/ 面向/ 特定/ 问题/ 的/ 故障/ 检测/ 性能/ 异常/ 检测/ 与/ 云/ 环境/ 下/ 的/ 故障/ 检测/ 是/ 近年来/ 尤其/ 受/ 关注/ 的/ 问题/ ,/ 通常/ 采用/ 以上/ 基于/ 度量/ 、/ 日志/ 和/ 行为/ 分析方法/ 中/ 的/ 一种/ 或/ 结合/ 几种/ 方法/ 来/ 解决/ 性能/ 和/ 云/ 环境/ 下/ 所/ 面对/ 的/ 问题/ ,/ 本节/ 将/ 对/ 这/ 两类/ 特定/ 问题/ 进行/ 分析/ ./ 3.5/ ./ 1/ 性能/ 异常/ 检测/ 分布式/ 软件系统/ 的/ 性能/ 问题/ 往往/ 会/ 影响/ 用户/ 体验/ ,/ 甚至/ 导致/ 客户/ 流失/ 、/ 收益/ 受损/ 等/ 严重后果/ ,/ 因此/ ,/ 面向/ 性能/ 表现/ 的/ 异常/ 检测/ 方法/ 近年来/ 得到/ 了/ 较/ 多/ 的/ 关注/ ./ 通常/ 采用/ 的/ 方法/ 是/ 建立/ 性能/ 模型/ ,/ 以/ 预测/ 系统/ 或/ 其/ 组件/ 的/ 一些/ 性能/ 属性/ ,/ 包括/ 资源/ (/ 如/ CPU/ 和/ 内存/ )/ 利用率/ 、/ 响应/ 时间/ 、/ 吞吐量/ 等/ ./ 性能/ 模型/ 能够/ 应用/ 在/ 能力/ 规划/ 和/ 资源/ 供给/ 等/ 方面/ ,/ 同样/ 可以/ 用于/ 检测/ 系统/ 性能/ 故障/ [/ 42/ ]/ ./ 在/ 已知/ 系统/ 内部结构/ 的/ 情况/ 下/ ,/ 可以/ 建立/ 软件体系结构/ ,/ 基于/ 此/ 分析/ 系统/ 性能/ ,/ 例如/ 程序/ 的/ 执行/ 时间/ 是/ 累加/ 所有/ 其/ 调用/ 的/ 函数/ 所/ 花费/ 时间/ 的/ 总和/ ./ 这类/ 研究/ 大多/ 面向/ 某个/ 具体/ 领域/ ,/ 例如/ 文献/ [/ 43/ ]/ 面向/ 数据流/ 处理/ ,/ 文献/ [/ 44/ ]/ 面向/ 多/ 组件/ 集群/ 系统/ ,/ 文献/ [/ 45/ ]/ 面向/ I/ // O/ 系统/ ./ 这种/ 方法/ 直观/ ,/ 易于/ 理解/ ,/ 但/ 建立/ 性/ Page12/ 能/ 模型/ 需要/ 知道/ 底层/ 细节/ (/ 如/ 资源/ 消耗/ 、/ 内部/ 算法/ 和/ 相关/ 参数/ )/ ,/ 而/ 这样/ 的/ 信息/ 通常/ 难以获得/ ./ 同时/ 人工/ 手动/ 建立/ 复杂/ 系统/ 的/ 分析模型/ 需要/ 花费/ 较/ 多/ 时间/ 且/ 操作/ 复杂/ ./ 另一类/ 方法/ 利用/ 数学模型/ 对/ 请求/ 处理过程/ 进行/ 建模/ ,/ 对于/ 多用户/ 系统/ ,/ 最/ 常见/ 的/ 是/ 队列/ 模型/ ./ 队列/ 模型/ 将/ 系统/ 抽象/ 为/ 多个/ 互相/ 连接/ 的/ 队列/ 集合/ ,/ 一个/ 服务/ 或/ 资源/ 关联/ 一个/ 队列/ ,/ 等待/ 服务/ 的/ 请求/ 在/ 队列/ 中/ 排列/ ./ 队列/ 模型/ 考虑/ 到/ 了/ 目标/ 系统/ 在/ 不同/ 层次/ 上/ 的/ 特点/ ,/ 可以/ 用来/ 建模/ 各种/ 元素/ (/ 如/ 磁盘/ 、/ CPU/ 等/ )/ [/ 46/ ]/ ./ 服务器软件/ (/ 如/ Web/ 服务器/ )/ 是/ 相当/ 常见/ 的/ 队列/ 模型/ 的/ 建模/ 对象/ [/ 47/ ]/ ./ 文献/ [/ 48/ ]/ 利用/ 队列/ 模型/ 建模/ 多层/ 应用/ ,/ 同时/ 考虑/ 到/ 了/ 用户/ 会话/ 、/ 各层间/ 的/ 缓存/ 等/ 影响/ 性能/ 的/ 要素/ ./ 文献/ [/ 49/ ]/ 考虑/ 到/ 了/ 负载/ 变化/ 对/ 性能/ 的/ 影响/ ,/ 关注/ 于/ 各/ 组件/ 处理/ 时间/ 的/ 波动/ ,/ 利用/ 异常/ 签名/ 衡量/ 波动/ 的/ 严重/ 程度/ 以/ 检测/ 故障/ 组件/ ./ 这些/ 模型/ 可以/ 用来/ 调整/ 配置/ 参数/ (/ 如/ 最大/ 进程/ 、/ 连接/ 数量/ )/ 以/ 最大化/ 性能/ ,/ 或/ 提供/ 一定/ 层次/ 的/ 服务质量/ 保障/ ./ 然而/ 性能/ 模型/ 只是/ 考虑/ 到/ 了/ 系统/ 所/ 监测/ 的/ 特定/ 部分/ 的/ 性能/ ,/ 并且/ 评估/ 模型/ 参数/ 困难/ (/ 如/ 服务/ 时间/ )/ ./ 基于/ 统计/ 的/ 方法/ 近年来/ 尤其/ 受到/ 关注/ ./ 文献/ [/ 19/ ]/ 建立/ 分析/ 引擎/ 处理/ 从/ 标准/ 操作系统/ 接口/ 搜集/ 到/ 系统/ 层/ 监测数据/ ./ 由于/ 特定/ 度量/ 与/ 特定/ 的/ 组件/ 、/ 资源/ 、/ 进程/ 和/ 时间/ 相关/ ,/ 引入/ 分类器/ 可以/ 辨别/ 与/ SLA/ 冲突/ 相关/ 的/ 度量/ 集合/ ./ 系统/ SLA/ 状态/ 描述/ 为/ S/ =/ {/ S/ +/ ,/ S/ -/ }/ ,/ 其中/ ,/ S/ +/ 为/ SLA/ 符合/ ,/ S/ -/ 为/ SLA/ 冲突/ ;/ 度量/ 值/ 向量/ 为/ 犕/ =/ [/ m0/ ,/ m1/ ,/ …/ ,/ mn/ ]/ ,/ 其中/ ,/ mi/ 为/ 第/ i/ 个/ 度量/ 值/ ./ 作者/ 将/ 性能/ 异常/ 检测/ 抽象/ 为/ 模式/ 分类/ 问题/ ,/ 通过/ 引入/ 分类/ 函数/ F/ 实现/ 犕/ 到/ S/ 的/ 映射/ ,/ 分类器/ 的/ 输入/ 为/ 犕/ 而/ 输出/ 为/ S/ ./ 训练/ 过程/ 是/ 监督/ 式/ 学习/ ,/ 训练/ 集是/ 观察/ 到/ 的/ 日志/ 〈/ 犕/ ,/ S/ 〉/ 集合/ ,/ 利用/ F/ 可以/ 判断/ 在/ 给定/ 的/ 度量/ 值/ 条件/ 下/ ,/ SLA/ 是否/ 会/ 出现/ 冲突/ ./ 模型/ 可以/ 表示/ 为/ 在/ 给定/ 的/ 观察/ 度量/ 值下/ 的/ 条件/ 概率分布/ Prob/ (/ S/ |/ 犕/ )/ ,/ 利用/ 分类器/ 来/ 评估/ 是否/ P/ (/ S/ +/ |/ 犕/ )/ >/ Prob/ (/ S/ -/ |/ 犕/ )/ ./ 作者/ 选择/ Bayesian/ 网络/ 作为/ 分类器/ ,/ 优势/ 在于/ 可以/ 利用/ 模型/ 来/ 辨别/ 度量/ 向量/ 中/ 影响/ 分类器/ 选择/ 的/ 特定/ 度量/ ./ 与/ 神经网络/ 和/ 支持/ 向量/ 机/ 相比/ ,/ 贝叶斯/ 网络/ 具有/ 较/ 好/ 的/ 可/ 理解/ 性/ ./ 而/ 与/ 决策树/ 相比/ ,/ 贝叶斯/ 网络/ 可以/ 将/ 专家/ 知识/ 加入/ 到/ 模型/ 中/ ,/ 例如/ 用户/ 可以/ 指定/ 度量/ 间/ 的/ 关联性/ ./ 由于/ 训练/ 数据/ 噪音/ ,/ Bayesian/ 网络/ 会/ 出现/ 数据/ 的/ 过度/ 拟合/ 从而/ 影响/ 准确性/ ,/ 作者/ 选择/ 度量/ 子集/ 将/ TAN/ (/ TreeAugmentNaiveBayesianNetwork/ )/ 作为/ 分类器/ ./ 负载/ 的/ 波动/ 以及/ 部署/ 环境/ 的/ 改变/ ,/ 会/ 造成/ 系统/ 度量/ 发生/ 较大/ 波动/ ,/ 从而/ 导致/ 模型/ 改变/ ,/ 使得/ 预测/ 结果/ 不/ 准确/ ./ 针对/ 该/ 问题/ ,/ 文献/ [/ 20/ ]/ 综合/ 多个/ 模型/ ,/ 以/ 适应环境/ 的/ 变化/ ./ 在/ 系统/ 运行/ 过程/ 中/ ,/ 当/ 已有/ 模型/ 并/ 不能/ 捕捉/ 系统/ 行为/ 时/ ,/ 则/ 引入/ 新/ 的/ 模型/ 以/ 加强/ 总体/ 效果/ ./ 作者/ 利用/ 特征/ 选取/ 的/ 方法/ 选择/ 与/ 建模/ 最/ 相关/ 的/ 度量/ ,/ 具有/ 两/ 方面/ 优势/ ,/ 首先/ ,/ 抛弃/ 了/ 与/ SLA/ 没有/ 影响/ 的/ 度量/ ,/ 使得/ 操作/ 人员/ 关注/ 于/ 一小部分/ 的/ 度量/ ;/ 另外/ ,/ 减少/ 了/ 需要/ 推断/ 模型/ 的/ 数据/ 采样/ 数量/ ./ 方法/ 利用/ 滑动/ 窗口/ 搜集/ 一段时间/ 内/ 的/ 监测数据/ 作为/ 训练/ 数据/ ,/ 基于/ 此/ 建立/ TAN/ 模型/ ,/ 采用/ 交叉/ 验证/ 的/ 方法/ 评估/ 模型/ 的/ 平衡/ 精度/ (/ BalanceAccuracy/ ,/ BA/ )/ :/ 如果/ 当前/ 模型/ 比/ 已有/ 模型/ 都/ 有/ 显著/ 提高/ ,/ 则/ 加入/ 新/ 的/ 模型/ ,/ 否则/ 抛弃/ 当前/ 模型/ ./ 这种/ 方法/ 是/ 在/ 系统/ 处于/ 正常/ 状态/ 的/ 前提/ 下/ ,/ 预测/ 性能/ 是否/ 会/ 发生/ SLA/ 冲突/ ./ 文献/ [/ 49/ ]/ 基于/ 各/ 组件/ 的/ 服务/ 时间/ 对于/ 不同/ 负载/ 相对/ 稳定/ 的/ 假设/ ,/ 建立/ 组件/ 服务/ 时间/ 与/ 系统/ CPU/ 时间/ 的/ 线性/ 回归/ 模型/ ,/ 以/ 估算/ 各/ 组件/ 的/ 服务/ 时间/ ,/ 服务/ 时间/ 波动/ 较大/ 的/ 组件/ 则/ 检测/ 为/ 性能/ 异常/ 组件/ ./ 该/ 方法/ 只/ 关注/ CPU/ 利用率/ ,/ 而/ 事实上/ 系统/ 中/ 具有/ 众多/ 的/ 度量/ 需要/ 考虑/ ,/ 因而/ ,/ 其/ 异常/ 检测/ 能力/ 有限/ ./ 也/ 有/ 工作/ 利用/ AOP/ 监测/ 事务/ 响应/ 时间/ ,/ 利用/ Pearson/ 系数/ 和/ DTW/ 算法/ 建立/ 事务/ 数量/ 与/ 响应/ 时间/ 的/ 关联性/ ,/ 并/ 对/ 其/ 进行/ 适应性/ 更新/ ,/ 最后/ 利用/ 方差分析/ 检测/ 引起/ 性能/ 异常/ 的/ 组件/ [/ 50/ ]/ ./ 这种/ 方法/ 仅能/ 分析/ 单个/ 事务/ 与/ 单个/ 性能参数/ ,/ 而/ 实际/ 应用/ 往往/ 是/ 多个/ 事务/ 的/ 混合/ ,/ 而且/ 需要/ 关注/ 多个/ 性能/ 属性/ ;/ 同时/ 利用/ AOP/ 监测/ 事务/ 与/ 方法/ 的/ 响应/ 时间/ 会/ 带来/ 较大/ 的/ 开销/ ,/ 且/ 监测/ 的/ 准确性/ 受限于/ 操作系统/ 提供/ 的/ 接口/ ./ 以上/ 方法/ 通常/ 需要/ 分析/ 应用/ 的/ 处理/ 逻辑/ 以/ 选择/ 监测/ 注入/ 点/ ,/ 其/ 实际/ 应用/ 具有/ 较大/ 的/ 局限性/ ./ 我们/ 此前/ 的/ 工作/ [/ 51/ ]/ 提出/ 一种/ 基于/ 关联/ 分析/ 的/ Web/ 应用/ 性能/ 异常/ 检测/ 方法/ ./ 该/ 方法/ 在/ 运行/ 过程/ 中/ 动态/ 搜集/ 负载/ 与/ 性能/ 信息/ ,/ 利用/ 核/ 典型/ 关联/ 分析/ (/ KernelCorre/ -/ lationAnalysis/ ,/ KCCA/ )/ 的/ 方法/ 自动/ 建立/ 起/ 负载/ 与/ 性能/ 的/ 关联/ 模型/ ,/ 以/ 刻画/ 二者/ 在/ 正常/ 状态/ 下/ 的/ 关联性/ ./ 而后/ ,/ 根据/ 关联系数/ 动态/ 构造/ 并/ 更新/ X/ -/ mR/ 控制/ 图/ ,/ 通过/ 监测/ 关联系数/ 的/ 变化检测/ 性能/ 故障/ 发生/ ./ 该/ 方法/ 具有/ 无需/ 领域/ 知识/ 对系统/ 进行/ 建模/ ,/ 能够/ 同时/ 考察/ 多个/ 性能/ 属性/ 的/ 优势/ ./ 3.5/ ./ 2/ 云/ 环境/ 下/ 的/ 故障/ 检测/ 软件可靠性/ 技术/ 可以/ 分为/ 故障/ 避免/ 、/ 故障/ 移除/ 、/ Page13/ 故障/ 容忍/ 和/ 故障/ 预测/ 等/ 四个/ 方面/ ./ 故障/ 避免/ 是/ 在/ 开发阶段/ 就/ 考虑/ 到/ 故障/ 发生/ 的/ 可能性/ ,/ 进行/ 避错/ 操作/ ;/ 故障/ 移除/ 是/ 系统/ 在/ 运行/ 过程/ 中/ 发生/ 故障/ 后/ 消除/ 出现/ 的/ 问题/ ;/ 故障/ 容忍/ 是/ 系统/ 在/ 运行/ 过程/ 中/ 发生/ 故障/ 的/ 时候/ 依然/ 能够/ 提供/ 服务/ ;/ 故障/ 预测/ 是/ 及早/ 分析/ 预测出/ 系统/ 可能/ 出现/ 的/ 故障/ [/ 52/ ]/ ./ 分布式/ 特别/ 是/ 云/ 计算环境/ 对系统/ 的/ 可靠性/ 有/ 更/ 高/ 要求/ ,/ 通常/ 采用/ 故障/ 容忍/ 技术/ ./ 故障/ 容忍/ 可以/ 分为/ 主动/ 和/ 被动/ 副本/ 策略/ ./ 主动/ 策略/ 并行/ 调用/ 不同/ 的/ 副/ 本来/ 处理/ 相同/ 的/ 请求/ ,/ 采用/ 首先/ 返回/ 的/ 响应/ 作为/ 最终/ 结果/ ,/ 从而/ 能够/ 获得/ 较/ 高/ 的/ 性能/ ./ 而/ 被动/ 策略/ 采用/ 主要/ 服务/ 来/ 处理/ 请求/ ,/ 当其/ 失效/ 时/ 调用/ 另外/ 的/ 可选/ 副本/ 服务/ ,/ 可以/ 分为/ 以下/ 三种/ 策略/ :/ (/ 1/ )/ 重试/ ./ 当/ 原始/ 服务/ 调用/ 失败/ 则/ 重复/ 调用/ 几次/ ;/ (/ 2/ )/ 恢复/ 块/ ./ 按照/ 设定/ 的/ 顺序/ 执行/ 多个/ 副本/ ;/ (/ 3/ )/ N/ 版本/ 编程/ ./ 编写/ 多个/ 实现/ 相同/ 功能/ 的/ 软件/ 副本/ 通过/ 投票/ 方式/ 决定/ 服务/ 调用/ 结果/ [/ 53/ ]/ ./ 这些/ 策略/ 各有利弊/ ,/ 静态/ 同构/ 的/ 策略/ 不/ 能够/ 适应/ 动态/ 的/ 互联网/ 环境/ ,/ 文献/ [/ 54/ ]/ 提出/ 了/ 动态/ 的/ 故障/ 容忍/ 策略/ 以/ 适应/ 运行/ 环境/ 的/ 变化/ ./ 本文/ 研究/ 的/ 故障/ 检测/ 是/ 故障/ 容忍/ 的/ 前提/ ,/ 检测/ 到/ 故障/ 后/ 才/ 能够/ 采用/ 相应/ 的/ 故障/ 容忍/ 技术/ 来/ 处理/ 故障/ ./ 面向/ 虚拟化/ 云/ 计算环境/ ,/ 文献/ [/ 55/ ]/ 结合/ 异常/ 预测/ 技术/ 提出/ 一种/ 性能/ 异常/ 预防/ 系统/ ./ 该/ 系统/ 根据/ 历史数据/ 建立/ Markov/ 模型/ 以/ 预测/ 每个/ 属性/ 值/ 以及/ TAN/ (/ Tree/ -/ AugmentedNaiveBayes/ )/ 模型/ 以/ 检测/ 可疑/ 度量/ 值/ ./ 文献/ [/ 56/ ]/ 面向/ 云/ 计算环境/ 下/ 由/ 多/ 组件/ 构成/ 的/ 分布式系统/ ,/ 首先/ 定义/ 组件/ 的/ 依赖/ 关系/ ,/ 而后/ 分析/ 异常/ 传播/ 模式/ 以/ 分析/ 各/ 组件/ 的/ 异常/ 程度/ ./ 文献/ [/ 57/ ]/ 提出/ 一种/ 端到/ 端的/ 云/ 计算/ 系统故障/ 管理/ 框架/ ,/ 整合/ 了/ 反馈/ 控制/ 机制/ 以/ 实现/ 云/ 计算/ 系统故障/ 的/ 自动化/ 处理/ ./ 文献/ [/ 58/ ]/ 面向/ 云/ 环境/ 下/ 的/ 应用/ 性能/ 异常/ ,/ 辨别/ 最/ 能够/ 反应/ 应用/ 性能/ 的/ 度量/ ,/ 通过/ 检测/ 这些/ 度量/ 的/ 异常/ 改变/ 点以/ 改进/ 已有/ 方法/ ./ 以上/ 方法/ 多/ 是/ 针对/ 虚拟化/ 环境/ ,/ 从/ 底层/ 物理/ 资源/ 的/ 利用/ 角度/ 对系统/ 状态/ 进行/ 分析/ ,/ 难以/ 检测/ 到/ 具体/ 问题/ 组件/ ./ 我们/ 此前/ 的/ 工作/ [/ 59/ ]/ 针对/ 云/ 应用/ 运行/ 环境/ 的/ 动态性/ 、/ 类型/ 的/ 多样性/ 和/ 系统结构/ 的/ 复杂性/ ,/ 提出/ 一种/ 云/ 应用/ 故障/ 检测/ 框架/ ,/ 将/ 外部/ 负载/ 变化/ 、/ 应用/ 性能/ 表现/ 以及/ 虚拟/ 物理/ 资源/ 利用/ 等/ 因素/ 引入/ 到/ 故障/ 检测/ 模型/ ,/ 建立/ 外部/ 负载/ 与/ 内部/ 资源/ 利用/ 和/ 性能/ 表现/ 的/ 关联性/ ,/ 通过/ 跟踪/ 关联系数/ 变化检测/ 系统故障/ ,/ 通过/ 分析/ 资源/ 使用/ 变化/ 定位系统/ 故障/ ./ 3.6/ 对比/ 分析/ 基于/ 规则/ 的/ 方法/ 由于/ 事先/ 已知/ 故障/ 及其/ 表现/ ,/ 具有/ 较/ 高/ 的/ 准确性/ 和/ 及时性/ ./ 然而/ 当/ 故障/ 此前/ 未曾/ 出现/ ,/ 或者/ 故障/ 表现/ 难以/ 刻画/ 为/ 规则/ ,/ 基于/ 规则/ 的/ 方法/ 就/ 不/ 能够/ 识别/ ,/ 因此/ ,/ 该/ 方法/ 虽然/ 查准率/ 高/ ,/ 但/ 查全率/ 却/ 较/ 低/ ./ 同时/ 云/ 环境/ 下/ 应用/ 类型/ 多样/ 、/ 系统/ 层次/ 众多/ ,/ 大量/ 度量/ 需要/ 监测/ 分析/ ,/ 系统管理员/ 难以/ 根据/ 经验/ 人工/ 制定/ 规则/ ./ 基于/ 度量/ 分析/ 的/ 方法/ ,/ 不/ 需要/ 了解/ 系统/ 内部结构/ ,/ 通过/ 调用/ 操作系统/ 提供/ 的/ 接口/ 搜集/ 监测数据/ ,/ 适用范围/ 广/ ./ 其/ 优势/ 在于/ ,/ 无需/ 事先/ 知道/ 故障/ 类型/ 并/ 描述/ 其/ 特征/ ./ 然而/ 由于/ 网络/ 环境/ 的/ 动态性/ 与/ 复杂性/ ,/ 建立/ 具有/ 鲁棒性/ 和/ 普适性/ 的/ 基准/ 相当/ 困难/ ,/ 基于/ 异常/ 检测/ 的/ 方法/ 通常/ 具有/ 较/ 高/ 的/ 误报率/ ./ 同时/ 难以/ 在/ 代码/ 层/ 细粒度/ 检测/ 问题/ ./ 基于/ 行为/ 分析/ 的/ 方法/ ,/ 通过/ 代码/ 注入/ 等/ 方式/ 搜集/ 各/ 组件/ 行为/ ,/ 能够/ 将/ 故障/ 定位/ 到/ 组件/ 或/ 代码/ 片段/ ,/ 但/ 需要/ 了解/ 应用/ 的/ 内部结构/ ,/ 且/ 细粒度/ 监测/ 开销/ 较/ 高/ ./ 同时/ 由于/ 不同/ 的/ 应用/ 的/ 处理/ 逻辑/ 不同/ ,/ 需要/ 注入/ 不同/ 的/ 监测点/ ,/ 适应性/ 较差/ ./ 基于/ 日志/ 分析/ 的/ 方法/ ,/ 通过/ 分析/ 日志/ 信息/ 可以/ 了解/ 一部分/ 系统/ 执行/ 路径/ ,/ 故障/ 检测/ 的/ 准确性/ 取决于/ 日志/ 记录/ 的/ 数量/ 和/ 位置/ ./ 同时/ 由于/ 需要/ 搜集/ 大量/ 的/ 日志/ 文件/ ,/ 从中/ 抽取/ 固定/ 的/ 模式/ ,/ 难以/ 满足/ 在线/ 故障/ 检测/ 的/ 需求/ ./ 如表/ 6/ 所示/ ,/ 本文/ 根据/ 在/ 第/ 1/ 节/ 提出/ 的/ 云/ 计算环境/ 下/ ,/ 分布式/ 软件系统/ 故障/ 检测/ 技术/ 面临/ 的/ 在/ 自动化/ 分析/ 、/ 问题/ 组件/ 定位/ 、/ 领域/ 知识/ 要求/ 、/ 在线/ 检测/ 和/ 适应环境/ 能力/ 等/ 五个/ 方面/ 的/ 技术/ 挑战/ ,/ 对/ 基于/ 规则/ 、/ 度量/ 、/ 行为/ 和/ 日志/ 等/ 四类/ 方法/ 的/ 优缺点/ 进行/ 了/ 归纳/ 总结/ ./ 其中/ ,/ A/ 表示/ 完全/ 满足/ 该/ 方面/ 的/ 要求/ ,/ C/ 表示/ 完全/ 不能/ 满足/ ,/ B/ 表示/ 界于/ A/ 和/ C/ 之间/ 部分/ 满足/ ./ 规则/ CACAC/ 度量/ ACAAB/ 行为/ BACAC/ 日志/ BBBCB4/ 未来/ 工作/ 展望/ 云/ 计算环境/ 巨大/ 的/ 部署/ 规模/ 、/ 复杂/ 的/ 拓扑/ 结构/ 、/ 动态/ 的/ 负载/ 变化/ 以及/ 多样/ 的/ 应用/ 类型/ 给/ 故障/ 检测/ 带来/ 了/ 新/ 的/ 问题/ ./ 本节/ 针对/ 第/ 1/ 节/ 分析/ 的/ 云/ 计算环境/ 对/ 分布式/ 软件系统/ 提出/ 的/ 挑战/ ,/ 给出/ 了/ 进一步/ 的/ 研究/ 方向/ :/ Page14/ (/ 1/ )/ 自动化/ 在线/ 故障/ 检测/ ./ 云/ 计算/ 系统/ 通常/ 部署/ 在/ 大规模/ 数据中心/ ,/ 成千上万/ 的/ 节点/ 以及/ 众多/ 层次/ (/ 如/ 网络层/ 、/ 硬件/ 层/ 、/ 虚拟机/ 层/ 、/ 操作系统/ 层/ 、/ 中间件/ 层/ 、/ 应用软件/ 层/ )/ 的/ 大量/ 度量/ 需要/ 分析/ ./ 特别/ 是/ ,/ 白盒/ 和/ 灰盒/ 技术/ 需要/ 注入/ 应用/ 或/ 底层/ 中间件/ 平台/ ,/ 具有/ 较大/ 计算/ 、/ 内存/ 、/ 网络/ 等/ 开销/ ,/ 难以/ 满足/ 不/ 影响/ 系统/ 运行/ 、/ 快速/ 故障/ 报警/ 的/ 在线/ 检测/ 需求/ ./ 那么/ ,/ 如何/ 以较/ 小/ 的/ 计算/ 开销/ ,/ 快速/ 分析/ 如此/ 大规模/ 的/ 数据/ 成为/ 挑战/ ./ 减少/ 在线/ 故障/ 检测/ 开销/ 可以/ 从/ 数据分析/ 对象/ 、/ 数据分析/ 频率/ 、/ 局部/ 与/ 全局/ 分析/ 相结合/ 等/ 三个/ 方面/ 考虑/ ./ 首先/ 选择/ 具有/ 代表性/ 的/ 度量/ 进行/ 分析/ ,/ 推断/ 另外/ 的/ 度量/ 值/ ;/ 而后/ 分析/ 系统/ 运行/ 状态/ ,/ 预测/ 故障/ 发生/ 的/ 可能性/ ,/ 据此/ 动态/ 调整/ 数据分析/ 频率/ ;/ 最后/ 先/ 在/ 本地/ 节点/ 进行/ 初步/ 分析/ ,/ 检测/ 简单/ 的/ 故障/ ,/ 如需/ 进一步/ 分析/ 再/ 汇总/ 各/ 节点/ 信息/ ,/ 基于/ 全局/ 关联/ 的/ 方法/ 分析/ 系统/ 状态/ ./ (/ 2/ )/ 运行/ 环境/ 感知/ 的/ 故障/ 检测/ ./ 云/ 计算/ 平台/ 是/ 多/ 承租/ 的/ ,/ 多个/ 虚拟机/ 部署/ 于/ 相同/ 物理/ 主机/ ./ 由于/ 虚拟化/ 技术/ 对于/ 缓存/ 、/ 磁盘/ 、/ 网络资源/ 隔离/ 的/ 局限性/ ,/ 应用/ 的/ 性能/ 会/ 受到/ 与其/ 共存/ 于/ 同一/ 物理/ 主机/ 的/ 其他/ 应用/ 的/ 影响/ ./ 故障/ 检测/ 技术/ 如何/ 考虑/ 多/ 应用/ 共享/ 敏感/ 资源/ 因素/ 造成/ 的/ 性能/ 异常/ 成为/ 挑战/ ./ 可以/ 通过/ 仿真/ 的/ 方式/ 模拟/ 应用/ 间/ 的/ 性能/ 干扰/ ,/ 据此/ 分析/ 能够/ 反映/ 性能/ 干扰/ 的/ 关键/ 度量/ ,/ 通过/ 监测/ 这些/ 度量/ 就/ 可以/ 分析/ 性能/ 干扰/ 造成/ 性能/ 衰减/ ./ 另外/ ,/ 云/ 计算/ 系统/ 处于/ 高度/ 动态/ 的/ 运行/ 环境/ 当中/ ./ 云/ 计算/ 系统/ 需要/ 根据/ 负载/ 动态变化/ ,/ 通过/ 虚拟机/ 资源/ 调整/ 、/ 虚拟机/ 迁移/ 和/ 虚拟机/ 克隆/ 等/ 技术/ 按/ 需/ 自动/ 获取/ 和/ 释放/ 资源/ ./ 部署/ 环境/ 的/ 频繁/ 改变/ 使得/ 问题/ 定位/ 需要/ 利用/ 加强/ 学习/ 等/ 机器/ 学习/ 方法/ 在线/ 学习/ 和/ 演化/ 状态/ 模型/ ,/ 利用/ 模式匹配/ 的/ 方法/ 动态/ 选择/ 模型/ ,/ 在/ 特定/ 模型/ 下/ 进行/ 故障/ 检测/ ,/ 以/ 适应/ 不断/ 变化/ 的/ 运行/ 环境/ ./ (/ 3/ )/ 面向/ 组件/ 交互/ 行为/ 的/ 故障/ 检测/ ./ 云/ 计算/ 系统/ 由/ 众多/ 组件/ 构成/ ,/ 分布/ 在/ 不同/ 节点/ ,/ 调用/ 各种/ 服务/ ,/ 组件/ 间/ 交互/ 关系/ 复杂/ ,/ 组件/ 关联度/ 高/ ./ 复杂/ 的/ 交互/ 行为/ 使得/ 组件/ 相互影响/ ,/ 故障/ 在/ 组件/ 间/ 快速/ 传播/ ,/ 某个/ 组件/ 的/ 故障/ 往往/ 会/ 造成/ 多个/ 组件/ 出现异常/ ,/ 准确/ 定位/ 故障/ 组件/ 值得/ 深入研究/ ./ 定位/ 故障/ 组件/ ,/ 首先/ 需要/ 监测/ 各/ 组件/ 间/ 的/ 调用/ 关系/ ,/ 并且/ 引入/ 时间/ 因素/ 来/ 建立/ 故障/ 传播/ 模型/ ./ 另外/ ,/ 云/ 计算/ 平台/ 上/ 部署/ 的/ 应用/ 通常/ 对/ 平台/ 提供者/ 和/ 管理者/ 是/ 透明/ 的/ ,/ 这/ 就/ 使得/ 通过/ 设计/ 文档/ 或/ 代码/ 注入/ 对/ 应用/ 的/ 软件体系结构/ 进行/ 建模/ 分析/ 变得/ 困难/ ./ 而/ 黑盒/ 方法/ 只/ 能够/ 粗粒度/ 分析/ 异常/ 的/ 系统/ 度量/ ,/ 不能/ 定位/ 到/ 故障/ 组件/ ,/ 这/ 给/ 细粒度/ (/ 软件/ 组件/ 或/ 代码段/ )/ 故障/ 检测/ 带来/ 了/ 挑战/ ./ 可以/ 分析/ 跟踪/ 内核/ Trace/ ,/ 这样/ 无需/ 对/ 源码/ 进行/ 修改/ ,/ 具有/ 较/ 小/ 开销/ ,/ 进而/ 结合/ 和/ 扩展/ 异常/ 检测/ 方法/ ,/ 可以/ 细粒度/ 的/ 检测/ 故障/ 组件/ ./ 5/ 总结/ 故障/ 检测/ 技术/ 成为/ 保障/ 分布式/ 软件系统/ 性能/ 与/ 可靠性/ 的/ 关键/ 之一/ ,/ 近年来/ 引起/ 了/ 工业界/ 和/ 学术界/ 广泛/ 关注/ ,/ 出现/ 了/ 较/ 多/ 研究成果/ 并/ 得到/ 了/ 应用/ ./ 本文/ 分析/ 了/ 云/ 环境/ 下/ 面临/ 的/ 技术/ 挑战/ ,/ 提出/ 了/ 基于/ 统计/ 监测/ 的/ 分布式/ 软件系统/ 故障/ 管理/ 参考/ 框架/ ,/ 为/ 此类/ 系统/ 的/ 研究/ 、/ 设计/ 与/ 实现/ 提供/ 了/ 参考/ 借鉴/ ./ 然后/ ,/ 对/ 故障/ 检测/ 的/ 方法/ 进行/ 分类/ ,/ 介绍/ 了/ 各类/ 方法/ 中有/ 代表性/ 的/ 工作/ ,/ 并/ 对比/ 分析/ 各类/ 方法/ 的/ 优缺点/ ./ 最后/ ,/ 针对/ 当前/ 云/ 计算环境/ 的/ 特点/ ,/ 分析/ 该/ 技术/ 所/ 面临/ 的/ 问题/ 与/ 今后/ 可能/ 的/ 研究/ 方向/ ./ 

