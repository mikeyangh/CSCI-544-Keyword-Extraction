Page1/ 基于/ 节点/ 预测/ 的/ 直接/ Cache/ 一致性/ 协议/ 张骏/ 1/ )/ 田泽/ 1/ )/ 梅魁志/ 2/ )/ 赵季/ 中/ 2/ )/ 1/ )/ (/ 中国/ 航空工业/ 集团公司/ 西安/ 航空/ 计算技术/ 研究所/ 西安/ 710068/ )/ 2/ )/ (/ 西安交通大学/ 电子/ 与/ 信息/ 工程学院/ 西安/ 710049/ )/ 摘要/ 处理器/ 性能/ 的/ 提升/ 依赖于/ 对/ 存储系统/ 性能/ 的/ 挖掘/ ./ 随着/ 片上/ 集成/ 内核/ 数量/ 的/ 不断/ 增大/ 和/ 特征/ 尺寸/ 的/ 持续/ 缩小/ ,/ 延迟/ 、/ 存储/ 可/ 扩展/ 的/ Cache/ 一致性/ 协议/ 已经/ 成为/ 提升/ 访存/ 效率/ 的/ 关键性/ 因素/ ./ 文中/ 提出/ 一种/ 基于/ 节点/ 预测/ 的/ 直接/ Cache/ 一致性/ 协议/ -/ NPP/ 协议/ ,/ 研究/ 一致性/ 交互/ 延迟/ 隐藏/ 和/ 目录/ 存储/ 开销/ 减少/ 技术/ ./ 针对/ 读/ 、/ 写/ 缺失/ 中/ 存在/ 的/ 间接性/ 问题/ 和/ 现有/ 解决方案/ 破坏/ 已有/ 数据/ 局部性/ 、/ 无法/ 获得/ 最近/ 数据/ 副本/ 等/ 问题/ ,/ 分别/ 提出/ 节点/ 挂/ 起/ 技术/ 和/ 直接/ 写/ 缺失/ 处理/ 技术/ ,/ 有效/ 隐藏/ 了/ 目录/ 访问/ 延迟/ ./ 为了/ 实现/ 准确/ 的/ 节点/ 预测/ ,/ 作者/ 还/ 提出/ 基于/ “/ 签名/ ”/ 回收/ 的/ 历史/ 信息/ 更新/ 算法/ ,/ 避免/ 了/ 冗余/ 更新/ 和/ 不/ 完整/ 更新/ ./ 使用/ SPLASH/ -/ 2/ 测试程序/ 集/ ,/ 在/ 基于/ 2DMESHNoC/ 互联/ 的/ 64/ 核/ CMP/ 下/ ,/ 相对/ 于全/ 映射/ 目录/ 协议/ ,/ NPP/ 协议/ 的/ 平均/ 执行/ 时间/ 降幅/ 为/ 21.78/ %/ ~/ 31.11/ %/ ;/ 平均/ 读/ 缺失/ 延迟/ 降低/ 14.22/ %/ ~/ 18.9/ %/ ;/ 平均/ 写/ 缺失/ 延迟/ 降低/ 17.89/ %/ ~/ 21.13/ %/ ./ 而/ 获得/ 上述/ 性能/ 提升/ 的/ 代价/ 是/ 网络流量/ 平均/ 增加/ 6.62/ %/ ~/ 7.28/ %/ ./ 关键词/ 单芯片/ 多处理器/ (/ CMP/ )/ ;/ 预测/ ;/ 一致性/ 协议/ ;/ 目录/ ;/ 可/ 扩展/ 1/ 引言/ 良好/ 的/ 可扩展性/ 和/ 对/ 芯片/ 面积/ 的/ 高效/ 利用/ 促使/ CMP/ 处理器/ (/ ChipMulti/ -/ Processor/ )/ 被/ 广泛/ 使用/ ./ 然而/ ,/ 芯片/ 上/ 连线/ 的/ 电气/ 特性/ 不/ 可能/ 与/ 半导体/ 工艺/ 等/ 比例/ 缩放/ ,/ 线/ 延迟/ 问题/ 已经/ 成为/ 未来/ CMP/ 设计/ 的/ 重要/ 限制/ 因素/ [/ 1/ -/ 2/ ]/ ./ 研究者/ 提出/ 延迟/ 非/ 一致/ 的/ Cache/ 访问/ (/ Non/ -/ UniformCacheAccess/ ,/ NUCA/ )/ [/ 3/ -/ 5/ ]/ 结构/ 来/ 减轻/ 线/ 延迟/ 对/ 访问/ 片上/ 末级/ Cache/ 延迟/ 的/ 负面影响/ ./ NUCA/ 结构/ 旨在/ 减少/ 片上/ 末级/ Cache/ 的/ 平均/ 数据/ 访问/ 延迟/ ;/ 而片/ 上/ 每/ 内核/ 私有/ 的/ L1Cache/ 间/ 在/ 进行/ 一致性/ 交互/ 时/ ,/ 消息/ 和/ 数据传输/ 效率/ 以及/ Cache/ 一致性/ 协议/ [/ 6/ -/ 7/ ]/ 的/ 可扩展性/ 同样/ 受到/ 长线/ 延迟/ 影响/ ,/ 本文/ 着重/ 研究/ 片上/ 多核/ 结构/ 下/ 的/ 低/ 延迟/ 、/ 低/ 存储/ 开销/ 的/ 可/ 扩展/ Cache/ 一致性/ 协议/ ./ Cache/ 一致性/ 协议/ 是/ CMP/ 处理器/ 正确/ 运行/ 的/ 保证/ ,/ 考虑/ 到/ 扩展性/ 问题/ ,/ 相对/ 于/ 总线/ 监听/ 协议/ 来说/ ,/ 基于/ 目录/ 的/ Cache/ 一致性/ 协议/ 是/ 大规模/ CMP/ 更/ 合适/ 的/ 选择/ [/ 8/ -/ 9/ ]/ ./ 目录/ 能够/ 跟踪/ 全局/ 的/ 一致性/ 状态/ 和/ L2Cache/ 中/ 数据/ 所有/ 共享/ 者/ 的/ 标识/ ./ 缺失/ 内核/ 将/ 通过/ 网络/ 把/ 消息/ 发送到/ 相应/ 目录/ 内核/ 中/ 进行/ 处理/ ./ 然而/ ,/ 不断/ 提升/ 的/ 线/ 延迟/ 和/ 多个/ 内核/ 间/ 复杂/ 的/ 一致性/ 交互/ 直接/ 导致/ 了/ 访存/ 延迟/ 的/ 提升/ ./ 如何/ 为/ 深亚/ 微米/ 工艺/ 下/ 的/ 多/ 核/ 处理器/ 设计/ 高效/ 、/ 可/ 扩展/ 的/ Cache/ 一致性/ 协议/ 已经/ 成为/ 体系结构/ 领域/ 研究/ 的/ 重要/ 内容/ ./ 为了/ 降低/ 一致性/ 交互/ 延迟/ ,/ 一种/ 直接/ 的/ 方法/ 是/ 减少/ 一致性/ 交互/ 步骤/ [/ 10/ -/ 11/ ]/ ./ 通常/ 基于/ 历史/ 信息/ 预测/ 来/ 直接/ 获取/ 或者/ 作废/ 数据/ ,/ 需要/ 额外/ 片上/ 空间/ 来/ 存储/ 历史/ 信息/ ,/ 且/ 预测/ 准确性/ 不高/ ,/ 在/ 预测/ 错误/ 时所/ 增加/ 的/ 额外/ 延迟/ 可能/ 比/ 原先/ 的/ 一致性/ 交互/ 延迟/ 还/ 大/ ./ 另/ 一种/ 有效/ 方案/ 是/ 使/ 一致性/ 交互/ 局部/ 化/ [/ 12/ -/ 17/ ]/ ./ 这类/ 方法/ 通过/ 构建/ 多层/ 目录/ 、/ 内核/ 分/ 区域/ 管理/ 和/ 目录/ 压缩/ 等/ 策略/ 来/ 减少/ 一致性/ 消息/ 延伸/ 的/ 距离/ ,/ 使/ 一致性/ 交互/ 尽可能/ 在/ 小/ 范围/ 内/ 完成/ ,/ 从而/ 减少/ 延迟/ ./ 但/ 存在/ 目录/ 信息/ 重复/ 存储/ 、/ 存储空间/ 利用率/ 低/ 、/ 多层/ 目录/ 间/ 交互/ 延迟/ 大/ 等/ 问题/ ./ 有时/ 目标/ 数据/ 就/ 在/ 请求/ 内核/ 附近/ ,/ 但/ 仍/ 需/ 访问/ 远程/ 高层/ 目录/ 获得/ 共享/ 信息/ ./ 本文/ 提出/ 一种/ 基于/ 节点/ 预测/ 的/ 直接/ Cache/ 一致性/ 协议/ NPP/ (/ NodePredictingProtocol/ )/ ,/ 具有/ 以下/ 创新/ :/ (/ 1/ )/ 将/ 所有/ 内核/ 划分/ 为/ 并列/ 关系/ 的/ 多个/ 节点/ ,/ 每个/ 节点/ 包含/ 2n/ 个/ 内核/ ./ 采用/ 全局/ 和/ 节点/ 两层/ 目录/ ,/ 全局/ 目录/ 以/ 粗/ 向量/ 方式/ 跟踪/ 所有/ 节点/ ,/ 节点/ 目录/ 以位/ 向量/ 方式/ 跟踪/ 节点/ 内/ 的/ 内核/ ./ 与/ 直接/ 预测/ 有效/ 数据/ 所在/ 内核/ 的/ 方案/ [/ 10/ -/ 11/ ]/ 不同/ ,/ NPP/ 通过/ 增加/ 节点/ 预测/ CacheNPC/ (/ NodePredictingCache/ )/ 在/ 发生/ 读/ 、/ 写/ 缺失/ 时/ 预测/ 与/ 读/ 缺失/ 内核/ 最近/ 的/ 有效/ 数据/ 节点/ 和/ 需要/ 作废/ 的/ 数据/ 副本/ 节点/ ./ 由于/ 不是/ 以/ 内核/ ,/ 而是/ 以/ 节点/ 为/ 单位/ 进行/ 预测/ ,/ 同样/ 内核/ 数量/ 情况/ 下/ 预测/ 有效/ 数据/ 位置/ 的/ 历史/ 信息/ 所/ 占用/ 的/ 存储空间/ 显著/ 减少/ ;/ (/ 2/ )/ 为了/ 能够/ 保证/ 预测/ 最近/ 有效/ 数据/ 节点/ 的/ 准确性/ 和/ 有效性/ ,/ 我们/ 分别/ 提出/ 了/ 基于/ 签名/ 回收/ 机制/ 的/ 读/ 缺失/ 和/ 写/ 操作/ NPC/ 更新/ 机制/ ,/ 进一步/ 减少/ 由于/ 预测/ 错误/ 或/ 不/ 准确/ 造成/ 的/ 额外/ 延迟/ ;/ (/ 3/ )/ NPP/ 协议/ 在/ 具备/ 使/ 一致性/ 交互/ 局部/ 化/ 能力/ 的/ 同时/ ,/ 还/ 能够/ 避免/ 有效/ 数据/ 存在/ 于/ 请求/ 内核/ 附近/ 但/ 不/ 在/ 同一/ 目录/ 层次/ 情况/ 下/ 的/ 远程/ 高层/ 目录/ 访问/ ;/ (/ 4/ )/ 与/ 省略/ 目录/ 访问/ 步骤/ 的/ 方案/ [/ 10/ -/ 11/ ]/ 不同/ ,/ 我们/ 提出/ 节点/ 挂/ 起/ 技术/ 将/ 读/ 缺失/ 处理/ 中/ 更新/ 目录/ 步骤/ 推迟/ 到/ 请求/ 内核/ 得到/ 数据/ 以后/ 进行/ ,/ 将/ 读/ 缺失/ 一致性/ 交互/ 的/ 关键/ 路径/ 长度/ 缩短/ 为/ 2/ -/ hops/ ,/ 而且/ 用/ 较/ 小/ 的/ 改动/ 保证/ 了/ 协议/ 的/ 简单/ 性/ ;/ (/ 5/ )/ 提出/ 直接/ 写/ 缺失/ 处理/ 技术/ 来/ 隐藏/ 写/ 缺失/ 目录/ 访问/ 延迟/ ,/ 当写/ 缺失/ 数据/ 处于/ M/ 、/ E/ 状态/ ,/ 且/ 预测/ 信息/ 正确/ 时/ ,/ 能/ 将/ 写/ 缺失/ 一致性/ 交互/ 过程/ 缩短/ 为/ 2/ -/ hops/ ./ 本文/ 第/ 2/ 、/ 3/ 节/ 分别/ 说明/ 相关/ 研究/ 和/ 动机/ ;/ 第/ 4/ 节/ 介绍/ 基于/ 节点/ 预测/ 的/ 直接/ Cache/ 一致性/ 协议/ (/ NPP/ )/ ;/ 第/ 5/ 节/ 介绍/ 节点/ 预测/ Cache/ (/ NPC/ )/ 的/ 更新/ 方法/ ;/ 第/ 6/ 节对/ NPP/ 协议/ 的/ 可扩展性/ 进行/ 分析/ ;/ 第/ 7/ 节/ 介绍/ 实验/ 平台/ 和/ 模拟/ 结果/ ,/ 描述/ 仿真/ 过程/ 并/ 分析/ 仿真/ 结果/ ;/ 第/ 8/ 节是/ 本文/ 结论/ ./ 2/ 相关/ 研究/ 随着/ 芯片/ 上/ 集成/ 的/ 内核/ 数量/ 不断/ 增加/ ,/ NUCAPage3/ 缓解/ 片上/ 末级/ Cache/ 访问/ 延迟/ 的/ 作用/ 愈发/ 明显/ ,/ 一致性/ 协议/ 的/ 可扩展性/ 也/ 显得/ 越发/ 重要/ ,/ 研究/ 人员/ 已经/ 从/ 多个/ 角度/ 进行/ 了/ 研究/ ./ 在/ NUCA/ 方面/ ,/ 文献/ [/ 3/ ]/ 提出/ 非/ 一致性/ Cache/ 架构/ (/ NUCA/ )/ 来/ 解决/ 片上/ 连线/ 延迟/ 问题/ ,/ NUCA/ 将片/ 上/ 末级/ Cache/ 划分/ 为/ 多个/ 较/ 小/ 的/ CacheBanks/ ,/ 允许/ 处理器/ 内核/ 访问/ 临近/ 的/ CacheBank/ 时/ 相对/ 于/ 较/ 远/ 的/ 那些/ Banks/ 获得/ 较/ 小/ 的/ 延迟/ ,/ 从而/ 达到/ 减轻/ 末级/ Cache/ 内/ 部长/ 连线/ 延迟/ 的/ 影响/ ./ 对于/ NUCA/ 结构/ 的/ CMP/ 来说/ ,/ 一个/ 重要/ 的/ 问题/ 是/ 如何/ 确定/ 数据/ 块/ 在/ NUCA/ 空间/ 中/ 合理/ 的/ 放置/ 位置/ ./ 文献/ [/ 18/ ]/ 提出/ 了/ 动态/ NUCA/ (/ D/ -/ NUCA/ )/ ,/ 允许/ 数据/ 被/ 映射/ 到/ NUCA/ 空间/ 中/ 的/ 多个/ Banks/ 上/ ,/ 然后/ 根据/ 程序/ 行为/ 将/ 数据/ 动态/ 的/ 迁移/ 到/ 距离/ 访问/ 内核/ 较近/ 的/ Banks/ 中/ ,/ 从而/ 降低/ 延迟/ ./ 为了/ 避免/ 在/ 多个/ NUCABanks/ 间/ 迁移/ 数据/ 时/ 的/ “/ 乒乓/ ”/ 问题/ ,/ 文献/ [/ 9/ ,/ 19/ ]/ 先/ 将/ 目标/ 数据/ 的/ 使用/ 情况/ 以及/ 处理器/ 对/ 它/ 的/ 共享/ 情况/ 等/ 参数/ 进行/ 综合/ 考虑/ ,/ 然后/ 通过/ 计算/ 得到/ 目标/ 数据/ 的/ 优化/ 放置/ 位置/ ./ 除/ D/ -/ NUCA/ 外/ ,/ 文献/ [/ 8/ ,/ 20/ ]/ 提出/ 了/ S/ -/ NUCA/ ,/ S/ -/ NUCA/ 通过/ 操作系统/ 或者/ 选择性/ 数据/ 复制/ 等/ 手段/ 在/ 避免/ 数据/ 迁移/ 的/ 同时/ 解决/ 数据/ 放置/ 问题/ ,/ 从而/ 有效/ 地/ 减少/ 了/ “/ 乒乓/ ”/ 问题/ ,/ 但/ 代价/ 是/ 显著/ 增加/ 了/ 设计/ 复杂度/ ./ 文献/ [/ 21/ ]/ 提出/ 了/ 协作/ Cache/ 方案/ ,/ 结合/ 了/ 私有/ 和/ 共享/ Cache/ 的/ 优势/ ,/ 在/ 程序运行/ 过程中将/ 本地/ 活跃/ 数据/ 聚集/ 到/ 私有/ Cache/ ,/ 而/ 全局/ 活跃/ 数据/ 在/ 被/ 识别/ 后/ 存储/ 在/ 集合/ Cache/ 中/ ,/ 不但/ 能/ 减少/ 片上/ 数据/ 访问/ 延迟/ ,/ 还/ 能/ 减少/ 片/ 外访/ 存/ 的/ 数量/ ./ 文献/ [/ 22/ ]/ 提出/ 了/ NUcache/ 的/ 末级/ Cache/ 组织/ 结构/ ,/ 根据/ Cache/ 中/ 数据/ 的/ 使用/ 情况/ 及其/ 所/ 对应/ 的/ PC/ 在/ 逻辑/ 上/ 按路组/ 方式/ 将/ Cache/ 分为/ 两个/ 部分/ ,/ 访问/ 时/ 采用/ 不同/ 的/ 方式/ 和/ 策略/ ,/ 研究/ 证明/ 该/ 方案/ 能够/ 将/ 性能/ 提升/ 9.6/ %/ ~/ 33/ %/ ./ 在/ 多处理机/ 结构/ 下/ ,/ 为/ 使/ 一致性/ 交互/ 局部/ 化/ 和/ 减少/ 目录/ 存储/ 开销/ ,/ 文献/ [/ 23/ ]/ 首次/ 提出/ 了/ 层次化/ 的/ 多处理机/ 结构/ ,/ 通过/ 将/ 连接/ 多个/ Cache/ 的/ 共享/ 总线/ 构建/ 为/ 树形/ 来/ 使/ 一致性/ 交互/ 局部/ 化/ ./ SCI/ [/ 24/ ]/ 、/ STP/ [/ 25/ ]/ 、/ LimitLESS/ [/ 26/ ]/ 、/ SCI/ 树/ 扩展/ [/ 27/ -/ 28/ ]/ 和/ 基于/ 锁/ 一致性/ 协议/ [/ 29/ ]/ 等/ 虽然/ 具有/ 良好/ 的/ 可扩展性/ ,/ 但/ 代价/ 却是/ 牺牲/ 读/ 缺失/ 或/ 写/ 缺失/ 时/ 一致性/ 交互/ 的/ 性能/ ./ 文献/ [/ 30/ ]/ 提出/ 了/ 基于/ 片上/ 网络拓扑/ 结构/ 的/ Cache/ 一致性/ 协议/ ,/ 这种/ 协议/ 不/ 从/ 目录/ 内核/ 返回/ 数据/ ,/ 而是/ 通过/ 目录/ 内核/ 将/ 请求/ 转发/ 至/ 距离/ 请求/ 内核/ 最近/ 的/ 目标/ 数据/ 副本/ 内核/ ,/ 使/ 之/ 响应/ 请求/ 并/ 发送数据/ ./ 这种/ 机制/ 最小化/ 了/ 数据/ 在/ 连线/ 上/ 的/ 传输/ 距离/ ,/ 能/ 使/ 网络/ 链路/ 功耗/ 减少/ 9.3/ %/ ;/ 并且/ 通过/ 减少/ 链路/ 拥塞/ 加快/ 通信/ 速度/ ,/ 使/ 整体/ 性能/ 提升/ 1.4/ %/ ./ 该/ 协议/ 虽然/ 能/ 提供/ 距离/ 最近/ 的/ 数据/ 副本/ ,/ 有效/ 降低功耗/ ,/ 但/ 仍/ 需要/ 先/ 访问/ 目录/ ,/ 间接/ 事件/ 仍然/ 存在/ ,/ 一致性/ 交互/ 延迟/ 难以/ 降低/ ./ 在/ 片/ 上/ 多/ 核/ 结构/ 下/ ,/ 文献/ [/ 13/ ,/ 16/ ]/ 提出/ 了/ 一种/ 两级/ 目录/ 方案/ ,/ 第/ 1/ 级/ 目录/ 采用/ 小/ 的/ 全/ 映射/ 方案/ ,/ 第/ 2/ 级/ 目录/ 采用/ 压缩/ 方式/ 来/ 减少/ 目录/ 的/ 存储/ 开销/ ./ 文献/ [/ 17/ ]/ 提出/ 一种/ 3/ 层/ 目录/ 组织/ 结构/ ,/ 包括/ 片上/ 的/ 目录/ Cache/ 和/ 主存/ 中/ 的/ 压缩/ 目录/ 结构/ ./ 文献/ [/ 14/ ]/ 提出/ 面向/ NoC/ 的/ 层次化/ 簇/ Cache/ 一致性/ 协议/ ,/ 构建/ 了/ 双层/ 树结构/ 目录/ 来/ 实现/ 一致性/ 交互/ 局部/ 化/ ./ 文献/ [/ 31/ ]/ 提出/ 了/ 虚拟/ 树/ 协议/ (/ VTC/ )/ ./ VTC/ 使用/ 粗粒度/ 协议/ 跟踪/ 技术/ ,/ 一片/ 存储器/ 区域/ 的/ 共享/ 者/ 通过/ 一个/ 虚拟/ 树/ 进行/ 连接/ ./ 由于/ 虚拟/ 树/ 的/ 共享/ 根/ 用作/ 访问/ 的/ 排序/ 点/ ,/ 并且/ 根/ 节点/ 也/ 是/ 这片/ 存储/ 区域/ 的/ 一个/ 共享/ 者/ ,/ 对于/ 一些/ 缺失/ 来说/ ,/ 就/ 可以/ 避免/ 发生/ 间接/ 事件/ ,/ 减少/ 一致性/ 交互/ 延迟/ ,/ 但/ 需要/ 对/ 路由器/ 及其/ 算法/ 进行/ 重新/ 设计/ ./ 文献/ [/ 12/ ,/ 15/ ]/ 提出/ 层次化/ Cache/ 目录/ 协议/ ./ 通过/ 对/ 内核/ 做/ 逻辑/ 上/ 的/ 区域/ 划分/ ,/ 构建/ 了/ 相互间/ 有/ 包含/ 关系/ 的/ 多层/ 目录/ 结构/ ,/ 允许/ 从/ 底层/ 目录/ 到/ 高层/ 目录/ 逐步/ 扩大/ 一致性/ 交互/ 的/ 延伸/ 范围/ ,/ 尽量/ 使/ 一致性/ 交互/ 局部/ 化/ ,/ 从而/ 达到/ 降低/ 延迟/ 的/ 目的/ ./ 本文/ 提出/ 的/ NPP/ 协议/ 目录/ 层次/ 少/ ,/ 对/ 目录/ 空间/ 使用/ 效率高/ ,/ 没有/ 多层/ 目录/ 间/ 的/ 复杂/ 共享/ 信息/ 交互/ ./ 为了/ 减少/ 一致性/ 交互/ 延迟/ ,/ 文献/ [/ 10/ ]/ 提出/ Writer/ 一致性/ 协议/ ,/ 该/ 协议/ 的/ 创新/ 在于/ 使用/ 基于/ 预测/ 的/ 透明/ 读/ 操作/ ,/ 能够/ 使/ 一部分/ 读/ 操作/ 在/ 获得/ 数据/ 后/ 不/ 在/ 目录/ 中/ 保留/ “/ 踪迹/ ”/ ,/ 而是/ 在/ 同步操作/ 时自/ 作废/ ,/ 后续/ 写/ 操作/ 不用/ 作废/ 这些/ 透明/ 读数据/ ./ 这/ 降低/ 了/ 一致性/ 状态/ 转换/ 频率/ (/ E/ 或/ M/ →/ S/ )/ ,/ 简化/ 了/ 写/ 操作/ 一致性/ 交互/ 过程/ ./ 文献/ [/ 11/ ]/ 提出/ DiCo/ -/ CMP/ 一致性/ 协议/ ,/ 通过/ 将/ 目录/ 信息/ 集成/ 在/ 数据/ 拥有者/ 内核/ 中/ ,/ DiCo/ -/ CMP/ 能/ 直接/ 将/ 请求/ 发送到/ 数据/ 的/ 拥有者/ ,/ 而/ 不是/ 先/ 发送到/ 目录/ 内核/ ,/ 再/ 转发/ 到/ 数据/ 拥有者/ ,/ 避免/ 了/ 间接/ 数据/ 访问/ ./ 相对/ 于/ 普通/ 目录/ 协议/ ,/ DiCo/ -/ CMP/ 能够/ 使访存/ 延迟/ 平均/ 减少/ 6/ %/ 左右/ ./ 本文/ 提出/ 的/ NPP/ 协议/ 不但/ 能/ 直接/ 提供数据/ ,/ 而且/ 能/ 提供/ 距离/ 请求/ 内核/ 最近/ 的/ 有效/ 数据/ ./ 另外/ ,/ NPP/ 以/ 节点/ 为/ 单位/ 进行/ 预测/ ,/ 同样/ 内核/ 数量/ 情况/ 下/ ,/ NPP/ 协议/ 的/ 每个/ 预测/ 指针/ 宽度/ 更/ 小/ ./ Page4/ 与/ 以上/ 研究/ 相比/ ,/ 本文/ 提出/ 的/ NPP/ 协议/ 不/ 依赖/ 软件/ 支持/ ,/ 改动/ 小/ ,/ 一致性/ 交互/ 延迟/ 和/ 目录/ 存储/ 开销/ 可扩展性/ 好/ ./ 另外/ ,/ NPP/ 协议/ 不/ 满足/ 于/ 直接/ 获取/ 正确/ 数据/ 副本/ ,/ 而是/ 精确/ 的/ 直接/ 获取/ 最近/ 的/ 正确/ 副本/ ,/ 使得/ 误/ 预测/ 导致/ 的/ 额外/ 延迟/ 大大减少/ ./ 3/ 研究/ 动机/ 一致性/ 交互/ 延迟/ 和/ 目录/ 存储/ 开销/ 不随/ 内核/ 数量/ 增加/ 而/ 快速增长/ 是/ 可/ 扩展/ Cache/ 一致性/ 协议/ 的/ 特征/ ,/ 也/ 是/ 本文/ 研究/ 的/ 出发点/ ./ 3.1/ 减少/ 一致性/ 交互/ 延迟/ (/ 1/ )/ 读/ 缺失/ 延迟/ 通过/ 研究/ 已有/ 的/ 基于/ 目录/ 的/ Cache/ 一致性/ 协图/ 1/ 读/ 缺失/ 一致性/ 交互/ 过程/ 多核/ 处理器/ 出现/ 片上/ 存储器/ 数据/ 不/ 一致/ 的/ 根源/ 是/ 多个/ 内核/ 可能/ 对/ 同一/ 地址/ 的/ 数据/ 进行/ 写/ 操作/ ./ 假设/ 没有/ 对/ 同一/ 地址/ 数据/ 的/ 写/ 操作/ ,/ 则/ 在/ 同步/ 机制/ 下/ 无论/ 哪个/ 内核/ 读/ ,/ 或者/ 什么/ 时刻/ 读/ 都/ 不会/ 产生/ 不/ 一致/ 现象/ ./ 写/ 操作/ 导致/ 来自/ 不同/ 内核/ 的/ 共享/ 读/ 操作/ 都/ 必须/ 在/ 目录/ 中/ 留下/ “/ 踪迹/ ”/ ,/ 以便/ 当写/ 操作/ 到来/ 时/ 对/ 这些/ 副本/ 进行/ 作废/ ./ 换句话说/ ,/ 只要/ 能够/ 正确/ 的/ 对/ 副本/ 进行/ 作废/ ,/ 以/ 何种/ 方式/ 留下/ “/ 踪迹/ ”/ 可以/ 有/ 不同/ 的/ 实现/ 方案/ ./ 通过/ 研究/ 发现/ ,/ “/ 踪迹/ ”/ 的/ 保留/ 方式/ 可以/ 成为/ 隐藏/ 目录/ 访问/ 延迟/ 的/ 有效/ 手段/ ./ 如/ 文献/ [/ 10/ ]/ 提出/ 的/ 透明/ 读/ 的/ 方案/ ./ 读/ 操作/ 不写/ 目录/ 标志/ 位/ ,/ 而是/ 在/ 同步/ 事件/ 后/ 将/ 数据/ 自行/ 作废/ ,/ 这样/ 就/ 不用/ 发送/ 作废/ 消息/ ,/ 但/ 需要/ 新/ 的/ 软件/ 模型/ ,/ 并会/ 破坏/ 已经/ 建立/ 的/ 数据/ 局部性/ ./ 文献/ [/ 11/ ]/ 提出/ 将/ 目录/ 和/ 数据/ 拥有者/ 内核/ 集成/ 在/ 一起/ ,/ 访问/ 目录/ 和/ 访问/ 数据/ 同时/ 进行/ ,/ 省去/ 了/ 专门/ 访问/ 目录/ 的/ 步骤/ ,/ 但/ 集成/ 目录/ 的/ 数据/ 拥有者/ 内核/ 位置/ 固定/ ,/ 虽然/ 能够/ 通过/ 预测/ 直接/ 获得/ 数据/ ,/ 但是/ 无法/ 获得/ 距离/ 议/ ,/ 我们/ 发现/ 发生/ 读/ 缺失/ 内核/ 需要/ 访问/ 目录/ 内核/ 来/ 间接/ 得到/ 一致性/ 信息/ ,/ 如图/ 1/ (/ a/ )/ 、/ (/ b/ )/ 中/ 的/ 第/ 1/ 个/ 步骤/ ,/ 这/ 将/ 增加/ Cache/ 读/ 缺失/ 延迟/ ./ 更/ 重要/ 的/ 是/ ,/ 在/ 较为/ 常用/ 的/ 瓦片/ 式/ CMP/ 结构/ [/ 32/ ]/ 下/ ,/ 这种/ 间接性/ 将/ 导致/ 更/ 多/ 的/ Cache/ 缺失/ ./ 原因/ 是/ 目录/ 信息/ 通常/ 是/ 通过/ 物理/ 地址映射/ 关系/ 分布/ 在/ 这些/ 瓦片/ 式/ 的/ 内核/ 中/ [/ 33/ ]/ ,/ 而/ 不/ 考虑/ 内核/ 可能/ 访问/ 任何/ 一个/ 数据/ 块/ ,/ 因此/ 需要/ 访问/ 远程/ Cache/ 的/ 可能性/ 大大增加/ ./ 间接性/ 的/ 读/ 操作/ 将/ 在/ 以下/ 两/ 方面/ 对/ 性能/ 产生/ 负面影响/ ./ 首先/ ,/ 相对/ 于/ 写/ 操作/ 来说/ ,/ 读/ 操作/ 的/ 效率/ 能够/ 在/ 更/ 大程度/ 上/ 影响/ 系统/ 的/ 整体/ 性能/ ./ 其次/ ,/ 在/ 多个/ 请求/ 同时/ 访问/ 目录/ 的/ 情况/ 下/ ,/ 目录/ 访问/ 会/ 发生/ 拥塞/ ,/ 多个/ 读/ 操作/ 不得不/ 被/ 排队/ 依次/ 响应/ ,/ 从而/ 增加/ 了/ 读/ 缺失/ 的/ 平均/ 访存/ 延迟/ ./ 请求/ 内核/ 最近/ 的/ 副本/ ,/ 读/ 缺失/ 延迟/ 仍/ 有/ 降低/ 空间/ ./ 可见/ ,/ 如何/ 隐藏/ 目录/ 访问/ 延迟/ 已经/ 成为/ 阻碍/ Cache/ 一致性/ 协议/ 性能/ 提升/ 的/ 瓶颈/ ./ 如果/ 读/ 缺失/ 时/ 能够/ 省略/ 目录/ 访问/ 步骤/ ,/ 或者/ 将/ 访问/ 目录/ 步骤/ 推迟/ 到/ 请求/ 内核/ 获得/ 数据/ 之后/ ,/ 那么/ 就/ 能/ 直接/ 减少/ 读/ 缺失/ 延迟/ 的/ 关键/ 路径/ 长度/ ./ 本文/ 提出/ 使用/ 节点/ 预测/ 技术/ 和/ 节点/ 挂/ 起/ 技术/ 将/ 更新/ 目录/ 步骤/ 推迟/ 到/ 读/ 缺失/ 内核/ 得到/ 数据/ 以后/ 进行/ ,/ 详见/ 4.5/ 节/ ./ (/ 2/ )/ 写/ 缺失/ 延迟/ 与/ 读/ 缺失/ 存在/ 的/ 间接性/ 类似/ ,/ 普通/ 基于/ 目录/ 的/ Cache/ 一致性/ 协议/ 在/ 处理/ 写/ 缺失/ 时/ 也/ 存在/ 间接性/ ./ 当/ 一个/ 内核/ 发生/ 了/ 写/ 缺失/ ,/ 首先/ 要/ 访问/ 目录/ 内核/ 来/ 获得/ 数据/ 副本/ 的/ 位置/ 和/ 数量/ ,/ 然后/ 由/ 目录/ 通知/ 相关/ 内核/ 作废/ 数据/ 副本/ (/ M/ 状态/ 需写/ 回/ )/ ,/ 最后/ 进行/ 写/ 操作/ ,/ 这一/ 过程/ 通常/ 需要/ 3/ -/ hops/ 或/ 4/ -/ hops/ ,/ 如图/ 2/ ./ 显然/ ,/ 在/ 大规模/ CMP/ 中/ ,/ 去除/ 这种/ 间接性/ 将/ 显著/ 降低/ 写/ 缺失/ 延迟/ ./ Page5/ 图/ 2/ 写/ 缺失/ 一致性/ 交互/ 过程/ 3.2/ 减少/ 存储/ 开销/ 一致性/ 协议/ 的/ 相关/ 存储/ 开销/ 直接/ 关系/ 到/ 该/ 协议/ 的/ 性能/ 和/ 可/ 实现/ 性/ ./ 从/ 已有/ 的/ 研究/ 来看/ ,/ 要/ 实现/ 直接/ 数据/ 访问/ 、/ 避免/ 间接/ 事件/ ,/ 基于/ 历史/ 信息/ 预测/ 的/ 直接/ 数据/ 访问/ 是/ 较为/ 有效/ 的/ 方法/ ./ 但/ 存储/ 历史/ 信息/ 需要/ 片上/ 存储空间/ ,/ 如何/ 使用/ 相对/ 小/ 的/ 历史/ 信息/ 存储空间/ 实现/ 精确/ 预测/ ,/ 进而/ 减少/ 误/ 预测/ 带来/ 的/ 额外/ 延迟/ 是/ 本文/ 研究/ 的/ 出发点/ 之一/ ./ 文献/ [/ 11/ ]/ 为了/ 实现/ 直接/ 数据/ 访问/ ,/ 为/ 每个/ 内核/ 增加/ 了/ L1C/ $/ 和/ L2C/ $/ 用于/ 预测/ 目标/ 数据/ 的/ 内核/ 位置/ ,/ 每个/ 条目/ 由/ Tag/ 和/ 一个/ 预测/ 指针/ 构成/ ./ 对/ 一个/ N/ 内核/ 的/ CMP/ 来说/ ,/ 预测/ 指针/ 为/ logN2/ 位/ ./ 假设/ 一个/ 节点/ 包含/ 2n/ 个/ 内核/ ,/ 如果/ 以/ 节点/ 为/ 单位/ 进行/ 粗粒度/ 预测/ ,/ 首先/ 预测/ 目标/ 数据/ 所在/ 的/ 范围/ (/ 节点/ )/ ,/ 然后/ 在/ 节点/ 内部/ 快速/ 定位/ 数据/ 所在/ 的/ 内核/ 位置/ ,/ 将/ 有/ 以下/ 优势/ :/ (/ 1/ )/ 减少/ 存储/ 开销/ ./ 由于/ 节点/ 数为/ N/ 即/ 每个/ 预测/ 指针/ 节省/ n/ 位/ ;/ (/ 2/ )/ 减少/ 网络流量/ ./ 发生/ 在/ 节点/ 内部/ 的/ 局部/ 化/ 一致性/ 交互/ 不会/ 影响/ 到/ 其它/ 节点/ 预测/ 信息/ 的/ 正确性/ ,/ 因此/ 由/ 预测/ 信息/ 更新/ 导致/ 的/ 网络/ 消息/ 数量/ 也/ 将/ 减少/ ;/ (/ 3/ )/ 由于/ 节点/ 中/ 内核/ 数量/ 相对/ 较/ 少/ ,/ 访问/ 节点/ 内/ 目录/ 的/ 延迟/ 较/ 小/ ,/ 不会/ 对/ 性能/ 造成/ 影响/ ./ 本文/ 提出/ 的/ 两级/ 目录/ 结构/ 是/ 实现/ 以/ 节点/ 为/ 单位/ 进行/ 粗粒度/ 预测/ 的/ 基础/ ./ 4/ 基于/ 节点/ 预测/ 的/ 直接/ Cache/ 一致性/ 协议/ 4.1/ 基准/ CMP/ 结构/ 片上/ 网络/ (/ NetworkonChip/ ,/ NoC/ )/ [/ 32/ ]/ 已经/ 成为/ CMP/ 处理器/ 广泛/ 使用/ 的/ 内核/ 互联/ 方式/ ,/ NoC/ 以/ 阵列/ 的/ 方式/ 将/ 多个/ 同一/ 尺寸/ 内核/ 连接起来/ ./ 本文/ 基于/ 2DMESHNoC/ 互连/ 和/ MESI/ 状态/ 转换/ 协议/ 进行/ 研究/ ,/ 所有/ 内核/ 私有/ L1Cache/ ,/ 共享/ L2Cache/ 和/ 主存/ ./ 共享/ L2Cache/ 被/ 分为/ 多个/ 片段/ 以/ S/ -/ NUCA/ 的/ 方式/ 分布/ 在/ 所有/ 内核/ 中/ ,/ 整个/ L2Cache/ 在/ 物理/ 上/ 分布/ 放置/ ./ 相对/ 私有/ L2Cache/ 来说/ ,/ 共享/ Cache/ 能够/ 使/ 每个/ 内核/ 使用/ 更/ 大容量/ 的/ L2Cache/ ,/ 并且/ 能够/ 避免/ 在/ 私有/ Cache/ 中/ 复制/ 同一个/ Cache/ 行/ 的/ 多个/ 副本/ ./ 片上/ 两级/ Cache/ 间/ 采用/ Inclusive/ 模式/ ./ 因此/ ,/ 目录/ 用来/ 维护/ 一个/ 共享/ 的/ L2Cache/ 与/ 多个/ 私有/ L1Cache/ 之间/ 的/ 数据/ 一致性/ ./ 目录/ 跟踪/ 每个/ L1Cache/ 数据/ 块/ 的/ 状态/ ,/ 同时/ ,/ 目录/ 和/ 关联/ 的/ 一致性/ 控制器/ 也/ 与/ 它们/ 控制/ 的/ L2Cache/ 片段/ 在/ 片/ 上/ 分布/ 放置/ ,/ 如图/ 3.4/ ./ 2/ 节点/ 的/ 划分/ 在/ NPP/ 协议/ 中/ ,/ 片上/ 所有/ 内核/ 被/ 划分/ 为/ 多个/ 节点/ ,/ 每个/ 节点/ 包含/ 2n/ 个/ 内核/ ,/ 假设/ 片上/ 有/ N/ 个/ 内核/ (/ N/ 为/ 2n/ 的/ 整数倍/ )/ ,/ 则/ 该/ 处理器/ 包含/ N/ 个/ 内核/ 构成/ 2DMESH/ 阵列/ ./ 一个/ 节点/ 内/ 的/ 2n/ 个/ 内核/ 使用/ n/ 位/ 二进制/ 数/ 进行/ 节点/ 内/ 编码/ 索引/ ,/ 如/ n/ =/ 2/ 时/ ,/ 节点/ 内/ 的/ 4/ 个/ 内核/ 分别/ 编码/ 为/ 00/ 、/ 01/ 、/ 10/ 、/ 11/ ./ 多个/ 节点/ 间/ 是/ 同一/ 层次/ 并列/ 关系/ ./ 后文均/ 以/ n/ =/ 2/ ,/ 即/ 每/ 节点/ 包含/ 4/ 个/ 内核/ 来/ 进行/ 说明/ ,/ 如图/ 4/ ./ Page64/ ./ 3/ 目录/ 的/ 组织/ 结构/ 全局/ 目录/ 和/ 节点/ 目录/ ./ 图/ 5/ 说明/ 了/ NPP/ 协议/ 的/ 两级/ 目录/ 结构/ ,/ 分别/ 是/ (/ 1/ )/ 全局/ 目录/ 全局/ 目录/ 以/ 粗/ 向量/ [/ 34/ ]/ 的/ 方式/ 跟踪/ 数据/ 所在/ 节点/ ./ 由于/ 数据/ 地址/ 以/ 静态/ 的/ 方式/ 映射/ 到/ 所有/ L2Cache/ 片段/ ,/ 属于/ S/ -/ NUCA/ 结构/ ,/ 因此/ 全局/ 目录/ 只/ 负责/ 跟踪/ 其/ 对应/ L2Cache/ 片段/ 中/ 数据/ 副本/ ./ 在/ 内核/ 数量/ 一定/ 的/ 情况/ 下/ ,/ 全局/ 目录/ 大小/ 与/ 节点/ 规模/ 成反比/ ./ (/ 2/ )/ 节点/ 目录/ 由于/ 节点/ 规模/ 相对/ 较/ 小/ ,/ 节点/ 目录/ 采用/ 全/ 映射/ 位/ 向量/ 目录/ ,/ 负责/ 在/ 节点/ 内/ 跟踪/ 数据/ 副本/ 所在/ 的/ 内核/ 位置/ ./ 相对/ 于/ 文献/ [/ 14/ ]/ ,/ 考虑/ 到/ 目录/ 访问/ 拥塞/ 问图/ 5NPP/ 协议/ 的/ 目录/ 组织/ 结构/ 题/ ,/ NPP/ 协议/ 没有/ 将/ 节点/ 目录/ 集成/ 在/ 一个/ 固定/ 的/ 内核/ 中/ ,/ 而是/ 提出/ 共享/ 信息/ 分布/ 存储/ ./ 将/ 节点/ 目录/ 分成/ 多个/ 片段/ ,/ 每个/ 内核/ 存储/ 一个/ 目录/ 片段/ ,/ 简称/ 为/ NDS/ (/ NodeDirectorySlice/ )/ ,/ 按照/ 数据/ 地址/ 末段/ 与/ 节点/ 中/ 内核/ 编码/ 相对/ 应/ 的/ 方式/ 将/ 节点/ 内/ 的/ 数据共享/ 信息/ 分布/ 到/ 所有/ 节点/ 中/ 内核/ 的/ 目录/ 片段/ 上/ ./ 假设/ 节点/ 规模/ 为/ 2n/ ,/ 由于/ 一个/ 内核/ 的/ 目录/ 要/ 存储/ 来自/ 2n/ 个/ 内核/ 的/ 共享/ 信息/ ,/ 如果/ 2n/ 个/ 内核/ L1Cache/ 中/ 所有/ 数据/ 的/ 末/ n/ 位/ 地址/ 均/ 相同/ ,/ 则/ 对应/ 编码/ 内核/ 的/ NDS/ 就/ 会/ 发生/ 溢出/ ./ 避免/ 溢出/ 的/ 一个/ 方法/ 是/ 将/ 内核/ 中/ 节点/ 目录/ 的/ 大小/ 变为/ 原先/ 的/ 2n/ 倍/ ,/ 但会/ 造成/ 目录/ 空间/ 的/ 巨大/ 浪费/ ./ NPP/ 协议/ 提出/ 节点/ 目录/ 两步/ 访问/ 方案/ ,/ 访问/ 节点/ 目录/ 时/ 第/ 1/ 步/ 首先/ 根据/ 数据/ 地址/ 的/ 末/ n/ 位/ 访问/ 对应/ 编码/ 内核/ 的/ NDS/ ,/ 如果/ 数据/ 确实/ 存在/ 于/ 该/ 节点/ 中/ ,/ 那么/ 绝大多数/ 访问/ 将/ 在/ 该/ 目录/ 中/ 命中/ ./ 如果/ 在/ 该/ NDS/ 没有/ 命中/ ,/ 则/ 第/ 2/ 步/ 同时/ 访问/ 剩余/ 的/ 2n/ -/ 1/ 个/ NDS/ ,/ 如果/ 仍然/ 不/ 命中/ ,/ 说明/ 该/ 数据/ 在/ 该/ 节点/ 中/ 不/ 存在/ ./ 举例来说/ ,/ 假设/ 节点/ 包含/ 4/ 个/ 内核/ ,/ 即/ n/ =/ 2/ ./ 使用/ 2/ 位/ 二进制/ 数对/ 节点/ 中/ 内核/ 进行/ 编码/ ,/ 分别/ 是/ 00/ 、/ 01/ 、/ 10/ 、/ 11/ ,/ 共享/ 数据/ 地址/ 末/ 两位/ 为/ 11/ 的/ 数据/ 首先/ 将/ 其/ 共享/ 信息/ 存储/ 在/ 编码/ 为/ 11/ 内核/ 的/ NDS/ 中/ ./ 如果/ 该/ 内核/ 的/ NDS/ 已满/ ,/ 再/ 写入/ 其它/ 3/ 个/ 内核/ 的/ NDS/ 中/ ,/ 其它/ 数据/ 以此类推/ ./ 访问/ 节点/ 目录/ 时/ 首先/ 根据/ 数据/ 地址/ 的/ 末/ 两位/ 访问/ 对应/ 编码/ 内核/ 的/ NDS/ ,/ 如果/ 不/ 命中/ 再/ 访问/ 其它/ 3/ 个/ 内核/ 的/ NDS/ ./ Page7/ 节点/ 目录/ 是/ 对/ 全局/ 目录/ 的/ 细化/ ,/ 能够/ 将/ 部分/ 节点/ 内读/ 缺失/ 与/ 其它/ 节点/ 隔离开/ ,/ 同时/ 避免/ 了/ 普通/ 粗/ 向量/ 方案/ 在/ 写/ 操作/ 时/ 可能/ 引起/ 的/ 不必要/ 作废/ 消息/ ./ 节点/ 目录/ 的/ 信息/ 分布/ 存储/ 、/ 两步/ 访问/ 方案/ 在/ 不/ 增加/ 目录/ 大小/ 的/ 前提/ 下/ 实现/ 了/ 节点/ 内/ 共享/ 信息/ 的/ 分类/ 分布/ 存储/ ./ 第/ 1/ 步/ 访问/ 较/ 小/ 的/ NDS/ 能够/ 以较/ 小/ 的/ 访问/ 延迟/ 使/ 绝大多数/ 目录/ 访问/ 命中/ ,/ 第/ 2/ 步/ 并行/ 访问/ 其它/ 内核/ NDS/ 的/ 延迟/ 与/ 第/ 1/ 步/ 相同/ ,/ 且/ 需要/ 进行/ 第/ 2/ 步/ 访问/ 的/ 几率/ 很小/ ,/ 不会/ 对/ 性能/ 造成/ 影响/ ./ 4.4/ NPC/ 和/ SHCNPP/ 协议/ 对/ 基准/ 内核/ 结构/ 作/ 了/ 改动/ ./ 为了/ 实现/ 在/ 内核/ 发生/ 读/ 缺失/ 时/ 能够/ 预测/ 距离/ 最近/ 的/ 有效/ 数据/ 副本/ 节点/ ,/ 记录/ 历史/ 信息/ 是/ 必要/ 的/ ,/ 加入/ 了/ 节点/ 预测/ CacheNPC/ (/ NodePredictingCache/ )/ ./ 另外/ ,/ 为了/ 能/ 精确/ 更新/ 历史/ 信息/ ,/ 还/ 加入/ 了/ 节点/ 共享/ 历史/ 信息/ CacheSHC/ (/ SharingHistoryCache/ )/ ,/ 如图/ 6/ ./ (/ 1/ )/ CNPNPC/ 条目/ 中除/ Tag/ 外/ 还/ 保存/ 了/ 最近/ 节点/ 指针/ CNP/ (/ ClosestNodePointer/ )/ ,/ 该/ 指针/ 指向/ 距离/ 请求/ 内核/ 节点/ 最近/ 的/ 有效/ 目标/ 数据/ 副本/ 节点/ ./ 发生/ 读/ 、/ 写/ 缺失/ 时/ ,/ 内核/ 根据/ NPC/ 中/ 存储/ 的/ CNP/ 信息/ 就/ 能够/ 直接/ 进行/ 访问/ ,/ 而/ 不/ 需要/ 访问/ 目录/ ./ 与/ 节点/ 目录/ 类似/ ,/ 每个/ 内核/ 的/ NPC/ 只/ 存储/ 地址/ 末/ n/ 位/ 与/ 该/ 内核/ n/ 位/ 节点/ 内/ 二进制/ 编码/ 相同/ 的/ 数据/ 的/ 预测/ 信息/ ,/ 也就是说/ 发生/ 读/ 、/ 写/ 缺失/ 的/ 内核/ 需要/ 根据/ 缺失/ 数据/ 的/ 地址/ 末/ n/ 位来/ 访问/ 该/ 数据/ CNP/ 预测/ 信息/ 所在/ 的/ NPC/ ./ (/ 2/ )/ SHVCNP/ 的/ 有效性/ 和/ 准确性/ 需要/ 更新/ 算法/ 来/ 保证/ ,/ 为了/ 保证/ 更新/ 算法/ 的/ 精确性/ ,/ SHC/ 中/ 保存/ 了/ 共享/ 历史/ 向量/ SHV/ (/ SharingHistoryVector/ )/ ,/ 用来/ 保证/ 更新/ 时/ 只/ 对/ 那些/ 曾经/ 缓存数据/ 副本/ 的/ 节点/ 发出/ 更新/ 请求/ ,/ 避免/ 造成/ 网络/ 拥塞/ 和/ 不/ 完整/ 更新/ ./ NPP/ 协议/ 的/ 更新/ 算法/ 在/ 第/ 5/ 节中/ 讨论/ ./ NPC/ 和/ SHC/ 均/ 为/ 保存/ 历史/ 信息/ 的/ Cache/ 部件/ ,/ 所/ 存/ 历史/ 信息/ 被/ 访问/ 的/ 频率/ 越高/ ,/ 降低/ 一致性/ 交互/ 延迟/ 的/ 效果/ 越/ 明显/ ,/ 因此/ NPC/ 和/ SHC/ 均/ 使用/ PLRU/ 策略/ 对/ 其中/ 最近/ 最少/ 被/ 访问/ 的/ 进行/ 替换/ ./ 4.5/ NPP/ 协议/ 描述/ 以下/ 只/ 讨论/ Cache/ 中/ 存在/ 被/ 请求/ 数据/ 副本/ 的/ 情况/ ,/ Cache/ 中/ 不/ 存在/ 被/ 请求/ 数据/ 副本/ 时/ 需要/ 访问/ 主存/ 获得/ 数据/ ./ 另外/ ,/ NPP/ 协议/ 不/ 对/ MESI/ 协议/ 的/ 状态/ 迁移/ 图/ 做/ 改动/ ,/ 只/ 讨论/ 对/ 读/ 、/ 写/ 缺失/ 一致性/ 交互/ 过程/ 的/ 优化/ ./ 表/ 1/ 是/ 文中/ 缩略语/ 的/ 含义/ ./ 简称/ CNPClosestNodePointerDWPDirectWrite/ -/ MissProcessing/ 直接/ 写/ 缺失/ 处理/ GDVGlobalDirectoryVector/ 全局/ 目录/ 向量/ LWPLastWriterPointerNPPNodePredictingProtocol/ 节点/ 预测/ 协议/ NPCNodePredictingCacheNDSNodeDirectorySliceNHPNodeHangingPointerSHCSharingHistoryCacheSHVSharingHistoryVector/ 共享/ 历史/ 向量/ SCUSignatureCollectionupdating/ 签名/ 回收/ 更新/ 4.5/ ./ 1/ 读/ 缺失/ NPP/ 协议/ 的/ 主要/ 目的/ 之一/ 是/ 在读/ 缺失/ 时/ 快速/ 得到/ 有效/ 数据/ 副本/ ./ 通过/ 两级/ 目录/ 和/ 精确/ 更新/ 的/ NPC/ 支撑/ ,/ NPP/ 协议/ 实现/ 了/ 基于/ 节点/ 的/ 预测/ ;/ 而/ 通过/ 节点/ 挂/ 起/ 技术/ ,/ NPP/ 协议/ 则/ 实现/ 了/ 2/ -/ hops/ 直接/ 数据/ 访问/ ./ 本文/ 提出/ 一种/ 简单/ 的/ 读/ 缺失/ 目录/ 访问/ 延迟/ 隐藏/ 技术/ —/ —/ —/ 节点/ 挂/ 起/ 技术/ ,/ 为/ 每个/ 节点/ 目录/ 片段/ (/ NDS/ )/ 增加/ 一个/ 节点/ 挂/ 起/ 指针/ NHP/ (/ NodeHangingPointer/ )/ ,/ 如图/ 7/ (/ a/ )/ ,/ 设/ 节点/ A/ 中/ 某/ 内核/ 缓存/ 了/ 节点/ B/ 请求/ 的/ 数据/ D/ 副本/ ,/ 当/ 节点/ A/ 收到/ 来自/ 节点/ B/ 的/ 数据/ 请求/ 时/ ,/ 则/ 将/ 对应/ NDS/ 关联/ 的/ NHP/ 指向/ 节点/ B/ (/ 挂/ 起/ 节点/ B/ )/ ,/ 然后/ 向/ 节点/ B/ 发送数据/ D/ 的/ 同时/ 也/ 向/ 全局/ 目录/ 发送/ 目录/ 更新/ 请求/ ,/ 全局/ 目录/ 收到/ 请求/ 并/ 加入/ 节点/ B/ 信息/ 后/ 返回/ 一个/ 确认/ 消息/ ,/ 节点/ A/ 收到/ 该/ 确认/ 消息/ 后/ 清除/ 对应/ NHP/ 指针/ ,/ 节点/ 挂/ 起/ 过程/ 结束/ ./ 节点/ 挂/ 起/ 只/ 针对/ 来自/ 读/ 缺失/ 节点/ 的/ 数据/ 请求/ ,/ 对于/ 来自/ 全局/ 目录/ 的/ 请求/ 不予/ 挂起/ ./ 该/ 方案/ 用/ 较/ 小/ 的/ 代价/ 隐藏/ 了/ 目录/ 访问/ 延迟/ ,/ 能/ 同时/ 发送数据/ 和/ 更新/ 全局/ 目录/ ,/ 实现/ 了/ 2/ -/ hops/ 直接/ 数据/ 访问/ ./ 节点/ 挂/ 起/ 技术/ 的/ 核心/ 是/ 全局/ 目录/ 加入/ 读/ 缺失/ 节点/ 信息/ 前/ 在/ 数据/ 提供/ 节点/ A/ 中/ 临时/ 保留/ 读/ 缺失/ 节点/ 的/ “/ 踪迹/ ”/ ,/ 该/ “/ 踪迹/ ”/ 的/ 存在/ 是/ 节点/ A/ 发送/ 请求/ 数据/ 的/ 前提条件/ ./ Page8/ 如图/ 8/ ,/ 在/ NPP/ 协议/ 中/ ,/ 发生/ 读/ 缺失/ 的/ 节点/ B/ 内核/ 根据/ 缺失/ 数据/ 地址/ 按照/ 两步/ 目录/ 访问/ 方案/ 访问/ 图/ 7/ 节点/ 挂/ 起/ 技术/ 示意图/ 节点/ B/ 目录/ ,/ 如果/ 在/ 节点/ 目录/ 命中/ ,/ 则/ 访问/ 节点/ B/ 中/ 内核/ ,/ 并/ 更新/ 节点/ 目录/ ;/ 如果/ 节点/ 目录/ 不/ 命中/ ,/ 则/ 查找/ 节点/ B/ 内/ 对应/ NPC/ 的/ 预测/ 信息/ ,/ 如果/ NPC/ 不/ 命中/ ,/ 则/ 按照/ 3/ -/ hops/ 读/ 操作/ 流程/ 访问/ 全局/ 目录/ ,/ 由/ 全局/ 目录/ 通知/ 缓存/ 有效/ 数据/ 副本/ 的/ 节点/ 向/ 请求/ 内核/ 发送数据/ ,/ 请求/ 内核/ 收到/ 数据/ 后/ 根据/ 数据/ 地址/ 更新/ 相应/ 的/ NDS/ ,/ 同时/ 全局/ 目录/ 加入/ 节点/ B/ 共享/ 信息/ ./ 如果/ NPC/ 命中/ ,/ 则/ 根据/ CNP/ 向/ 预测/ 节点/ A/ 发出/ 读数据/ 请求/ ./ 节点/ A/ 按照/ 两步/ 目录/ 访问/ 方案/ 访问/ 节点/ 内/ 目录/ ,/ 如果/ 不/ 命中/ 则/ 节点/ A/ 将/ 该/ 请求/ 转发/ 至该/ 请求/ 数据/ 的/ 全局/ 目录/ ,/ 剩余/ 流程/ 与/ 3/ -/ hops/ 读/ 操作/ 相同/ ;/ 如果/ 在/ 节点/ A/ 内/ 目录/ 命中/ ,/ 则/ 按照/ 图/ 7/ 的/ 节点/ 挂/ 起/ 流程/ 进行/ 处理/ ./ 4.5/ ./ 2/ 写/ 缺失/ 在/ NPP/ 协议/ 中/ ,/ 每/ 内核/ 的/ NPC/ 中/ 存储/ 了/ 部分/ 数据/ 的/ 节点/ 预测/ 信息/ CNP/ ,/ 这为/ 写/ 缺失/ 时/ 直接/ 访问/ 数据/ 副本/ 提供/ 了/ 支撑/ ./ 本文/ 提出/ 一种/ 简单/ 的/ 写/ 缺失/ 目录/ 访问/ 延迟/ 隐藏/ 技术/ —/ —/ —/ 直接/ 写/ 缺失/ 处理/ 技术/ DWP/ (/ DirectWrite/ -/ MissProcessing/ )/ ./ 利用/ CNP/ 来/ 预测/ 有效/ 数据/ 副本/ 所在/ 的/ 节点/ ,/ 当/ 数据/ 处于/ M/ 、/ E/ 状态/ ,/ NPC/ 命中/ ,/ 且/ 对应/ CNP/ 预测/ 正确/ 时/ ,/ 能/ 将/ 写/ 缺失/ 一致性/ 交互/ 过程/ 缩短/ 为/ 2/ -/ hops/ ./ 当/ NPC/ 不/ 命中/ 时/ ,/ 按照/ 3/ -/ hops/ 流程/ 处理/ ./ 而/ 对/ 处于/ S/ 状态/ 的/ 写/ 缺失/ 数据/ 仍/ 维持/ 4/ -/ hops/ 交互/ ,/ 只是/ 交互/ 过程/ 稍/ 有/ 不同/ ./ 对/ 处于/ I/ 状态/ 的/ 写/ 缺失/ 数据/ 将/ 从/ 下/ 一级/ 存储器/ 先/ 读入/ 数据/ ,/ 再/ 进行/ 修改/ ./ 在/ 写/ 命中/ 的/ 情况/ 下/ ,/ 仍/ 需/ Page9/ 访问/ 全局/ 目录/ 将/ 其它/ 副本/ 作废/ ./ 假设/ 写/ 缺失/ 数据/ D/ 处于/ M/ 或/ E/ 状态/ ,/ 则/ 片/ 上/ 只/ 存在/ 唯一/ 的/ 数据/ 副本/ ,/ 这时/ 当写/ 缺失/ 内核/ 所在/ 节点/ 的/ NPC/ 命中/ 且/ 对应/ CNP/ 预测/ 正确/ 时/ ,/ 写/ 缺失/ 内核/ 就/ 根据/ 该/ CNP/ 可以/ 直接/ 将/ 该/ 唯一/ 的/ 数据/ D/ 副本/ 作废/ ,/ 从而/ 降低/ 了/ 全局/ 目录/ 访问/ 延迟/ ./ 而/ 当/ 缺失/ 数据/ D/ 处于/ S/ 状态/ 时/ ,/ 即使/ NPC/ 命中/ 且/ CNP/ 正确/ 也/ 只能/ 预测/ 一个/ 节点/ ,/ 当/ 其它/ 节点/ 也/ 共享/ 数据/ D/ 时/ ,/ 在/ 不/ 访问/ 全局/ 目图/ 9DWP/ 对/ M/ 、/ E/ 状态/ 写/ 缺失/ 数据/ 的/ 直接/ 处理/ 流程图/ 10DWP/ 对/ S/ 状态/ 写/ 缺失/ 数据/ 的/ 4/ -/ hops/ 处理/ 流程/ 对于/ 状态/ 为/ M/ 或/ E/ 的/ 写/ 缺失/ 数据/ ,/ 写/ 缺失/ 内核/ 同时/ 发出/ 两个/ 访问/ 请求/ ,/ 发/ 往/ 全局/ 目录/ 的/ 请求/ 查询/ 到/ 数据/ D/ 状态/ 为/ M/ 或/ E/ 后/ ,/ 全局/ 目录/ 忽略/ 该/ 请求/ ,/ 如图/ 9/ 中/ 的/ 1a/ 消息/ ./ 根据/ CNP/ 预测/ 发出/ 的/ 请求/ 在/ 录/ 的/ 情况/ 下仅/ 依靠/ CNP/ 无法/ 将/ 其它/ 节点/ 中/ 的/ 数据/ D/ 副本/ 作/ 废掉/ ,/ 因此/ DWP/ 对/ 处于/ S/ 状态/ 的/ 写/ 缺失/ 数据/ 无效/ ,/ 依然/ 需要/ 访问/ 全局/ 目录/ 来/ 进行/ 4/ -/ hops/ 交互/ ,/ 如图/ 2/ (/ c/ )/ ./ 一个/ 问题/ 是/ 发生/ 写/ 缺失/ 的/ 内核/ 访问/ 全局/ 目录/ 前/ 并/ 不/ 清楚/ 该/ 数据/ 的/ 当前/ 状态/ ,/ 那么/ 到底/ 该/ 根据/ CNP/ 进行/ 预测/ 访问/ (/ M/ 、/ E/ )/ 还是/ 直接/ 访问/ 全局/ 目录/ (/ S/ )/ ?/ DWP/ 的/ 解决方案/ 是/ 向/ CNP/ 预测/ 节点/ 和/ 全局/ 目录/ 同时/ 发送/ 访问/ 请求/ ,/ 如图/ 9/ 和/ 图/ 10/ 所示/ ./ 预测/ 正确/ 的/ 情况/ 下/ 将/ 直接/ 作/ 废掉/ 处于/ M/ 或/ E/ 状态/ 的/ 唯一/ 数据/ D/ 副本/ ,/ 实现/ 了/ 2/ -/ hops/ 写/ 缺失/ 一致性/ 交互/ ;/ 而/ 在/ 预测/ 错误/ 的/ 情况/ 下/ 请求/ 将/ 被/ 错误/ 预测/ 节点/ 转发/ 到/ 全局/ 目录/ 进行/ 处理/ ,/ 整个/ 过程/ 为/ 4/ -/ hops/ 交/ Page10/ 互/ ,/ 错误/ 预测/ 代价/ 为/ 1/ -/ hops/ ./ 对于/ 状态/ 为/ S/ 的/ 写/ 缺失/ 数据/ ,/ 写/ 缺失/ 内核/ 也/ 同时/ 发出/ 两个/ 访问/ 请求/ ,/ 发/ 往/ 全局/ 目录/ 的/ 请求/ 查询/ 到/ 数据/ D/ 的/ 状态/ 为/ S/ 后/ ,/ 继续/ 按照/ 4/ -/ hops/ 交互/ 流程/ 处理/ ./ 而/ 发往/ CNP/ 预测/ 节点/ 的/ 请求/ 在/ 预测/ 正确/ 的/ 情况/ 下/ 将/ 查询/ 到/ 数据/ D/ 的/ 状态/ 为/ S/ ,/ 此后/ 该/ 数据/ D/ 共享/ 节点/ 将/ 忽略/ 该/ 请求/ ,/ 如图/ 10/ (/ a/ )/ 中/ 1b/ 消息/ ./ 在/ CNP/ 预测/ 错误/ 的/ 情况/ 下/ ,/ 请求/ 将/ 被/ 错误/ 预测/ 节点/ 转发/ 到/ 全局/ 目录/ ,/ 而/ 全局/ 目录/ 将/ 忽略/ 该/ 转发/ 的/ 请求/ ,/ 如图/ 10/ (/ b/ )/ 中/ 2c/ 消息/ ./ 4.5/ ./ 3/ 替换/ NPP/ 协议/ 的/ 双层/ 目录/ 结构/ 可以/ 将/ 部分/ 替换/ 操作/ 的/ 影响/ 范围/ 限制/ 在/ 单个/ 节点/ 内/ ,/ 不但/ 减少/ 了/ 消息/ 传播/ 的/ 距离/ 、/ 缓解/ 片上/ 网络/ 拥塞/ ,/ 还/ 增加/ 了/ 替换/ 操作/ 的/ 效率/ ./ 根据/ 替换/ 数据/ 的/ 一致性/ 状态/ ,/ 替换/ 过程/ 也/ 不同/ ./ (/ 1/ )/ M/ 或/ E/ 状态/ 当/ 被/ 替换/ 的/ 数据/ 处于/ M/ 或/ E/ 状态/ 时/ ,/ 片上/ 只/ 存在/ 唯一/ 数据/ 副本/ ,/ 这时/ 需要/ 先/ 发送/ 消息/ 剔除/ 该/ 数据/ 所在/ 节点/ 目录/ 中/ 的/ 内核/ 信息/ 和/ 全局/ 目录/ 中/ 对应/ 的/ 节点/ 信息/ ,/ 收到/ 确认/ 消息/ 后/ 进行/ 替换/ 操作/ ./ 另外/ ,/ M/ 状态/ 数据/ 替换/ 前/ 还/ 需要/ 写回/ 主存/ ./ (/ 2/ )/ S/ 状态/ 替换/ S/ 状态/ 的/ 数据/ 时/ 根据/ 节点/ 中/ 被/ 替换/ 数据/ 图/ 11/ 过时/ 、/ 不/ 准确/ 历史/ 信息/ 的/ 产生/ 过程/ NPC/ 通过/ CNP/ 来/ 指明/ 距离/ 当前/ 发生/ 缺失/ 内核/ 最近/ 的/ 有效/ 数据/ 副本/ 所在/ 的/ 节点/ ./ 假设/ NPC/ 中/ 的/ 指针/ 是/ 静态/ 的/ ,/ 而/ 随着/ 程序/ 的/ 运行/ ,/ 数据/ 副本/ 的/ 数量/ 及其/ 在/ 多个/ 内核/ 上/ 的/ 分布/ 位置/ 会/ 发生变化/ ,/ 如上所述/ ,/ NPC/ 中/ 的/ CNP/ 信息/ 可能/ 是/ 过时/ 的/ 、/ 不/ 准确/ 的/ ,/ 正确性/ 无法/ 得到/ 保证/ ./ 因此/ ,/ 动态/ 精确/ 更新/ NPC/ 中/ 的/ CNP/ 信息/ 是/ NPP/ 协议/ 有效性/ 的/ 关键/ ./ 5.2/ 基于/ 签名/ 回收/ 的/ NPC/ 更新/ 为了/ 能/ 精确/ 的/ 更新/ NPC/ 中/ 的/ CNP/ 信息/ 需要/ 解/ 的/ 副本/ 数量/ 分为/ 两种/ 情况/ :/ ①/ 所在/ 的/ 节点/ 中/ 只/ 存在/ 唯一/ 副本/ ,/ 替换/ 过程/ 与/ E/ 状态/ 类似/ ;/ ②/ 所在/ 的/ 节点/ 中/ 存在/ 多个/ 副本/ ./ 只/ 需要/ 通知/ 节点/ 目录/ 剔除/ 发生/ 替换/ 操作/ 的/ 内核/ 信息/ 后/ 进行/ 替换/ ,/ 而/ 无需/ 通知/ 全局/ 目录/ ./ 在/ 这种/ 情况/ 下/ ,/ 交互/ 只/ 发生/ 在/ 节点/ 内部/ ,/ 短距离/ 的/ 消息/ 传输/ 增加/ 了/ 替换/ 操作/ 效率/ ./ 替换/ 操作/ 可能/ 引起/ NPC/ 预测/ 访问/ 的/ 扑空/ ,/ 该类/ 扑空/ 均/ 按照/ NPC/ 预测/ 错误处理/ ,/ 以便/ 减少/ 可能/ 造成/ 的/ 网络/ 拥塞/ ./ 5NPC/ 更新/ 算法/ 5.1/ 精确/ 更新/ NPC/ 的/ 目的/ 实现/ 直接/ 数据/ 访问/ 的/ 基本/ 条件/ 是/ 请求/ 内核/ 能够/ 准确/ 预测/ 数据/ 副本/ 所在/ 的/ 位置/ ./ 一种/ 基于/ 局部性/ 原理/ 的/ 实现/ 方案/ 是/ 在/ 发生/ 写/ 缺失/ 时/ ,/ 被/ 作废/ 的/ 数据/ 副本/ 所在/ 内核/ 记录/ 写/ 操作/ 内核/ 的/ 标识/ 作为/ 历史/ 信息/ ,/ 我们/ 称其为/ Writer/ -/ Recording/ 算法/ ./ 则/ 在/ 下次/ 写/ 缺失/ 到来/ 前/ ,/ 这些/ 被/ 作废/ 内核/ 能够/ 准确/ 的/ 预测/ 有效/ 数据/ 副本/ 所在/ 的/ 内核/ ./ 但/ 这种/ 方法/ 存储/ 的/ 历史/ 信息/ 可能/ 是/ 过时/ 的/ 和/ 不/ 准确/ 的/ ./ 在/ 基于/ 图/ 3/ 的/ CMP/ 结构/ 下/ ,/ 以/ 对/ 数据/ Data/ _/ A/ 的/ 读写/ 序列/ 为例/ ,/ 图/ 11/ 说明/ 了/ 上述/ 缺陷/ ./ 决/ 以下/ 两个/ 问题/ ./ 5.2/ ./ 1/ 签名/ 回收/ 由于/ NPP/ 协议/ 以/ 节点/ 为/ 单位/ 进行/ 预测/ 访问/ ,/ 该/ “/ 签名/ ”/ 信息/ 是/ 指/ 那些/ 拥有/ 数据/ 副本/ 的/ 节点/ 在/ 全局/ 目录/ 中/ 留下/ 的/ 共享/ 标志/ 信息/ ./ 对于/ 数据/ D/ ,/ 无论/ 节点/ 中/ 的/ D/ 副本/ 处于/ M/ 、/ E/ 或/ S/ 状态/ ,/ 只要/ 是/ 有效/ 副本/ 都/ 需要/ 在/ 全局/ 目录/ 中/ 进行/ “/ 签名/ ”/ 形成/ 共享/ 信息/ ,/ 已/ 形成/ 的/ “/ 签名/ ”/ 信息/ 随着/ 数据/ D/ 发生/ 写/ 缺失/ 会/ 被/ 作/ 废掉/ 成为/ 历史/ 共享/ 信息/ SHV/ ,/ 而/ 写/ 缺失/ 节点/ 在/ 全局/ 目/ Page11/ 录/ “/ 签名/ ”/ 形成/ 新/ 的/ 共享/ 信息/ ./ 本文/ 提出/ 基于/ 签名/ 回收/ 的/ NPC/ 更新/ 算法/ SCU/ (/ SignatureCollectionUpdating/ )/ 对/ CNP/ 信息/ 进行/ 精确/ 更新/ ./ 图/ 12/ (/ a/ )/ 说明/ 了/ “/ 签名/ ”/ 信息/ 随/ 数据/ 副本/ 一致性/ 状态/ 迁移/ 的/ 流向/ ./ 写/ 操作/ (/ 包括/ 缺失/ 和/ 命中/ )/ 发生/ 时/ ,/ 当前目录/ 中/ 的/ “/ 签名/ ”/ 信息/ 将/ 由/ 写/ 操作/ 节点/ 图/ 12/ “/ 签名/ ”/ 与/ SHV/ 信息/ 的/ 流向/ 与/ 变化/ 5.2/ ./ 2NPC/ 精确/ 更新/ 算法/ (/ 1/ )/ 更新/ 时/ 的/ CNP/ 与/ SHV/ 当/ 一个/ 数据/ D/ 副本/ 存在/ 于/ 某/ 节点/ 的/ L1Cache/ 中时/ ,/ 该/ 节点/ 对应/ 的/ NPC/ 中/ 无需/ 保存/ 该/ 数据/ 的/ CNP/ 信息/ ,/ 因为/ 其/ 本身/ 就是/ 该/ 有效/ 数据/ 的/ 最近/ 节点/ ,/ 只有/ 当该/ 节点/ 中/ 所有/ 数据/ D/ 副本/ 都/ 被/ 作/ 废掉/ (/ 替换/ 操作/ 不/ 分配/ CNP/ )/ 时才/ 在/ NPC/ 中为/ 数据/ D/ 分配/ CNP/ 指针/ ,/ 这样/ 能/ 提升/ NPC/ 空间/ 的/ 利用率/ ./ 对/ 数据/ D/ 来说/ ,/ 其/ 对应/ SHV/ 信息/ 在/ 数据/ D/ 发生/ 第一个/ 写/ 缺失/ 时/ 首次/ 出现/ ,/ 并/ 随后/ 续写/ 缺失/ 节点/ 传递/ ./ 当/ 发生/ 替换/ 操作/ ,/ 并且/ 被/ 替换/ 数据/ 与其/ 对应/ SHV/ 信息/ 位于/ 同一/ 内核/ 时/ ,/ SHV/ 信息/ 也/ 从/ SHC/ 中/ 被/ 替换/ ./ 我们/ 修改/ 了/ PLRU/ 替换算法/ ,/ 优先/ 替换/ 那些/ 没有/ 在/ SHC/ 中/ 缓存/ 对应/ SHV/ 信息/ 的/ 数据/ ./ (/ 2/ )/ 基于/ 写/ 操作/ 的/ 更新/ 由于/ 写/ 操作/ 命中/ 和/ 缺失/ 时/ NPC/ 更新/ 流程/ 相同/ ,/ 这里/ 只/ 说明/ 写/ 缺失/ 时/ 的/ 更新过程/ ./ 当/ 数据/ D/ 处于/ M/ 状态/ 时/ ,/ OldWriter/ 节点/ (/ 上/ 一个/ 写/ 操作/ 节点/ )/ 在/ 收到/ NewWriter/ 节点/ (/ 当前/ 写/ 缺失/ 节点/ )/ 的/ 请求/ 后/ ,/ 作废/ 自身/ 数据/ D/ 副本/ 并/ 在/ 本/ 节点/ 对应/ NPC/ 中/ 分配/ 空间/ ,/ 将/ CNP/ 指向/ NewWriter/ 节点/ ,/ 接着/ 根据/ 节点/ 对应/ SHC/ 中/ 的/ SHV/ 信息/ 更新/ 历史/ 共享/ 节点/ ,/ 将/ 它们/ 的/ 数据/ DCNP/ 信息/ 更新/ 为/ 回收/ ,/ 并/ 与/ 之前/ 的/ SHV/ 信息/ (/ 如果/ 有/ 的话/ )/ 进行/ 叠加/ 产生/ 新/ 的/ SHV/ 信息/ ./ 该/ SHV/ 信息/ 在/ 后续/ 写/ 操作/ 节点/ 间/ 继续/ 进行/ 叠加/ 传递/ ,/ 从而/ 实现/ 历史/ 信息/ 的/ 保存/ ,/ 如图/ 12/ (/ b/ )/ ./ 另外/ ,/ 替换/ 操作/ 也/ 会/ 改变/ 共享/ 信息/ 的/ 内容/ ,/ 但/ 文章/ 认为/ 发生/ 替换/ 的/ 节点/ 重用/ 该/ 数据/ 的/ 可能性/ 不/ 强/ ,/ 对/ 其/ 历史/ 信息/ 不予/ 保存/ ./ NewWriter/ 节点/ ,/ 最后/ 将/ SHV/ 信息/ 传递/ 给/ New/ -/ Writer/ 节点/ ./ 而/ NewWriter/ 节点/ 将/ 收到/ 来自/ 全局/ 目录/ 的/ 数据/ D/ 当前/ 共享/ 信息/ GDV/ (/ GlobalDirectoryVector/ )/ 和/ 来自/ OldWriter/ 节点/ 的/ SHV/ 信息/ ,/ New/ -/ Writer/ 节点/ 将/ 这/ 两者/ 做/ “/ OR/ ”/ 操作/ ,/ 将/ 结果/ 作为/ 新/ 的/ SHV/ 存储/ 在/ 节点/ SHC/ 中/ ./ 如图/ 13/ (/ a/ )/ 、/ (/ b/ )/ ./ 当/ 数据/ D/ 处于/ S/ 状态/ 时/ ,/ NPC/ 的/ 更新/ 流程/ 与/ M/ 状态/ 时/ 类似/ ./ 不同/ 的/ 是/ ,/ 在/ 有/ 多个/ S/ 状态/ 节点/ 时/ ,/ 需要/ 这些/ S/ 状态/ 节点/ 同时/ 访问/ 自身/ 的/ SHC/ ,/ 并/ 从/ 发生/ 命中/ 的/ OldWriter/ 节点/ 中/ 取出/ SHV/ 送往/ New/ -/ Writer/ 节点/ ,/ 如图/ 13/ (/ c/ )/ ;/ 如果/ 所有/ S/ 状态/ 节点/ 的/ SHC/ 均/ 未/ 命中/ ,/ 说明/ OldWriter/ 节点/ 中/ 所有/ 数据/ D/ 副本/ 和/ 对应/ SHV/ 已经/ 被/ 替换/ 出/ L1Cache/ 和/ SHC/ ,/ 这时/ 则/ 不用/ 向/ NewWriter/ 节点/ 发送/ SHV/ ,/ 而/ New/ -/ Writer/ 节点/ 直接/ 将/ 收到/ 的/ GDV/ 作为/ 新/ 的/ SHV/ 信息/ ./ 另外/ ,/ S/ 状态/ 时/ 如果/ CNP/ 预测/ 错误/ ,/ 由/ 错误/ 节点/ 转发/ 的/ 请求/ 不会/ 被/ 全局/ 目录/ 响应/ ,/ 因此/ NPC/ 更新/ 流程/ 与/ CNP/ 预测/ 正确/ 时/ 相同/ ./ 当/ 数据/ D/ 处于/ E/ 状态/ 时/ ,/ 数据/ D/ 的/ SHV/ 信息/ 没有/ 生成/ ,/ 如果/ 这时/ 发生/ 数据/ D/ 写/ 操作/ ,/ 缓存数据/ D/ 唯一/ 副本/ 的/ 节点/ 收到/ NewWriter/ 节点/ 的/ 请求/ 后/ 不用/ 进行/ 历史/ 共享/ 节点/ 的/ NPC/ 更新/ ,/ 也/ 不用/ 进行/ 自身/ SHV/ 信息/ 的/ 传递/ ./ 只/ 需/ 作废/ 自身/ 数据/ D/ 副本/ 并/ Page12/ 图/ 13M/ 、/ S/ 状态/ 数据/ 基于/ 写/ 缺失/ 的/ NPC/ 更新/ 在/ 本/ 节点/ 对应/ NPC/ 中/ 分配/ 空间/ ,/ 将/ CNP/ 指向/ New/ -/ Writer/ 节点/ 即可/ ./ 而/ NewWriter/ 节点/ 只会/ 收到/ 来自/ 数据/ D/ 全局/ 目录/ 的/ GDV/ 信息/ ,/ 并/ 直接/ 将/ 其/ 作为/ 新/ 的/ SHV/ 信息/ ./ (/ 3/ )/ 基于/ 读/ 缺失/ 的/ 更新/ 当/ 发生/ 读/ 缺失/ 时/ ,/ 新/ 出现/ 的/ 数据共享/ 节点/ 将/ 缩短/ 部分/ 历史/ 共享/ 节点/ 与/ 有效/ 数据/ 副本/ 节点/ 的/ 最小/ 距离/ ,/ 而/ 另/ 一部分/ 则/ 保持/ 不变/ ./ SCU/ 只/ 对/ s/ 况/ 数据/ 从下/ 一级/ 存储器/ 中取/ 入/ ,/ SHV/ 信息/ 还/ 未/ 生成/ ,/ 无须/ 更新/ NPC/ ;/ 第二种/ 情况/ 中当/ 数据/ 由片/ 上/ 处于/ E/ 状态/ 节点/ 提供/ 时/ ,/ SHV/ 信息/ 不/ 存在/ ,/ 也/ 无须/ 更新/ NPC/ ./ 而/ 当/ 数据/ 由片/ 上/ 处于/ M/ 或/ S/ 状态/ (/ 该/ S/ 状态/ 由/ M/ 状态/ ,/ 而/ 非/ E/ 状态/ 转换/ 而/ 来/ )/ 节点/ 提供/ 时/ ,/ SHV/ 信息/ 已经/ 存在/ ,/ 故/ SCU/ 只/ 对/ 该/ 情况/ 下/ 发生/ 的/ 读/ 缺失/ 进行/ Page13NPC/ 更新/ ./ 当/ 数据/ 处于/ S/ 态/ ,/ 并且/ 该/ S/ 态/ 是从/ M/ 态/ 转换/ 而/ 来时/ ,/ 存有/ SHV/ 信息/ 的/ OldWriter/ 节点/ 已经/ “/ 淹没/ ”/ 在/ 多个/ S/ 态/ 节点/ 中/ ,/ 导致/ 无法/ 定位/ SHV/ 信息/ 的/ 位图/ 14/ 基于/ 读/ 缺失/ 的/ NPC/ 更新/ 算法/ 根据/ 4.5/ 节/ 提出/ 的/ 基于/ 节点/ 挂/ 起/ 的/ 读/ 缺失/ 一致性/ 交互/ 流程/ ,/ 当读/ 缺失/ 节点/ NPC/ 命中/ 时/ ,/ 全局/ 目录/ 向/ 数据/ 提供/ 节点/ 发出/ 目录/ 更新/ 确认/ 消息/ 的/ 同时/ 也/ 将/ GDV/ 信息/ 发送到/ LWP/ 指向/ 的/ OldWriter/ 节点/ ,/ 在/ 那里/ 将/ 进行/ 两次/ 过滤/ 操作/ ./ 第/ 1/ 次/ 过滤/ 先用/ GDV/ 与/ SHV/ 信息/ 进行/ “/ AND/ ”/ 操作/ ,/ 再/ 将/ 结果/ 与/ SHV/ 信息/ 进行/ “/ XOR/ ”/ 操作/ ,/ 过滤/ 掉/ 当前/ 已经/ 缓存数据/ 副本/ 置/ ./ SCU/ 更新/ 算法/ 为/ 全局/ 目录/ 增加/ 一个/ LWP/ (/ LastWriterPointer/ )/ 指针/ 来/ 跟踪/ OldWriter/ 节点/ ,/ 如图/ 14/ (/ a/ )/ ./ LWP/ 指针/ 在/ 每次/ 发生/ 写/ 操作/ 时/ 被/ 更新/ 一次/ ,/ 始终/ 指向/ 最后/ 发生/ 写/ 操作/ 的/ 节点/ ./ 的/ 历史/ 共享/ 节点/ ./ 第/ 2/ 次/ 过滤/ 对/ SHV/ 指向/ 的/ 历史/ 共享/ 节点/ 与/ 数据/ 提供/ 节点/ 和/ 读/ 缺失/ 节点/ 之间/ 的/ 距离/ 进行/ 计算/ ,/ 过滤/ 掉/ 所有/ 与/ 读/ 缺失/ 节点/ 间/ 距离/ 大于/ 与/ 数据/ 提供/ 节点/ 间/ 距离/ 的/ 历史/ 共享/ 节点/ ./ 节点/ 间/ 距离/ 的/ 计算方法/ 如下/ :/ 对于/ 一个/ 有/ 2n/ ×/ 2n/ 个/ 节点/ 的/ 2DMESHCMP/ 来说/ ,/ 需要/ 2n/ 位/ 二进制/ 数对/ 节点/ 进行/ 编码/ ./ 编码/ 的/ 高/ n/ 位/ 指明/ 节点/ 位于/ 哪/ 一行/ ,/ 低/ n/ 位指/ Page14/ 明/ 节点/ 位于/ 哪/ 一列/ ./ 设/ 节点/ A/ 和/ B/ 的/ 编码/ 分别/ 为/ a2n/ -/ 1a2n/ -/ 2/ …/ a1a0/ 和/ b2n/ -/ 1b2n/ -/ 2/ …/ b1b0/ ,/ 则/ 节点/ A/ 与/ B/ 之间/ 的/ 距离/ 为/ |/ b2n/ -/ 1b2n/ -/ 2/ …/ bn/ -/ a2n/ -/ 1a2n/ -/ 2/ …/ an/ |/ +/ |/ bn/ -/ 1bn/ -/ 2/ …/ b0/ -/ an/ -/ 1an/ -/ 2/ …/ a0/ |/ ./ 这/ 两次/ 过滤/ 操作/ 可/ 并行/ 进行/ ,/ 最后/ 将/ 两次/ 过滤/ 的/ 结果/ 进行/ “/ AND/ ”/ 操作/ 生成/ 最终/ 需要/ 更新/ 的/ 历史/ 共享/ 节点/ 信息/ ,/ 如图/ 14/ (/ a/ )/ ./ OldWriter/ 节点/ 根据/ 该/ 最终/ SHV/ 进行/ NPC/ 的/ 更新/ ./ 更新/ 时/ OldWriter/ 节点/ 将/ 读/ 缺失/ 节点/ 编码/ 发送到/ 需要/ 更新/ 的/ 历史/ 共享/ 节点/ 中/ ,/ 这些/ 节点/ 收到/ 后/ 与/ 自身/ NPC/ 中/ 存储/ 的/ CNP/ 节点/ 编码/ 做/ 距离/ 比较/ ./ 如果/ 读/ 缺失/ 节点/ 与/ 历史/ 共享/ 节点/ 间/ 的/ 距离/ 小于/ CNP/ 节点/ 与/ 历史/ 共享/ 节点/ 间/ 的/ 距离/ ,/ 则/ 用/ 读/ 缺失/ 节点/ 编码/ 更新/ 历史/ 共享/ 节点/ NPC/ 中/ 存储/ 的/ CNP/ 指针/ ,/ 否则/ ,/ 保持/ 原/ CNP/ 内容/ 不变/ ./ 如图/ 14/ (/ b/ )/ 中/ ,/ 假设/ S/ 状态/ 节点/ S1/ 是/ 距离/ 读/ 缺失/ 节点/ R/ 最近/ 的/ 有效/ 数据/ 节点/ ,/ 则/ 所有/ 深色/ 区域/ 节点/ 与/ R/ 节点/ 的/ 距离/ 均/ 小于/ 与/ S1/ 节点/ 的/ 距离/ ,/ 所有/ 位于/ 深色/ 区域/ 且/ 未/ 缓存/ 读/ 缺失/ 数据/ 副本/ 的/ HS/ 节点/ 都/ 应/ 更新/ 其/ NPC/ 信息/ ,/ 如/ HS3/ (/ CNP/ =/ S2/ )/ 、/ HS4/ (/ CNP/ =/ S1/ )/ 和/ HS5/ (/ CNP/ =/ S1/ )/ ./ 更新/ 时/ 发现/ HS3/ 虽然/ 位于/ 深色/ 区域/ ,/ 但/ HS3/ 与其/ 存储/ 的/ CNP/ 指向/ 的/ S2/ 节点/ 间/ 距离/ 仍/ 小于/ HS3/ 与/ R/ 间/ 的/ 距离/ ,/ 故/ 保持/ HS3/ 节点/ 原先/ 存储/ 的/ CNP/ 不变/ ./ 图/ 15/ 全/ 映射/ 目录/ 协议/ 和/ NPP/ 协议/ 的/ 读/ 缺失/ 一致性/ 交互/ 对比/ 当读/ 缺失/ 节点/ NPC/ 不/ 命中/ 或/ 命中/ 但/ 预测/ 错误/ 时/ ,/ 全局/ 目录/ 响应/ 请求/ 并/ 通知/ 距离/ 读/ 缺失/ 节点/ 最近/ 的/ 有效/ 数据/ 副本/ 节点/ 发送数据/ ./ 数据/ 发送/ 节点/ 向/ 全局/ 目录/ 返回/ 确认/ 消息/ 后/ ,/ 全局/ 目录/ 根据/ LWP/ 向/ OldWriter/ 节点/ 发送/ GDV/ ,/ 并/ 开始/ 与/ NPC/ 命中/ 相同/ 的/ 更新过程/ ./ 如果/ LWP/ 指向/ 的/ OldWriter/ 节点/ 中读/ 缺失/ 数据/ 副本/ 和/ 对应/ SHV/ 信息/ 已经/ 被/ 替换/ 出去/ ,/ 则/ 本次/ NPC/ 更新/ 终止/ ./ 如果/ LWP/ 为空/ ,/ 当前/ 读/ 缺失/ 数据/ 处于/ S/ 状态/ ,/ 这/ 说明/ 该/ S/ 是/ 由/ E/ 状态/ 转换/ 而/ 来/ ,/ SHV/ 信息/ 不/ 存在/ ,/ 本次/ NPC/ 更新/ 终止/ ./ 6NPP/ 协议/ 可扩展性/ 分析/ 6.1/ 对读/ 缺失/ 一致性/ 交互/ 延迟/ 的/ 影响/ 通常/ 所说/ 的/ 3/ -/ hops/ 或者/ 4/ -/ hops/ 读/ 实际/ 是/ 指/ 完成/ 一个/ 共享/ 读/ 操作/ 需要/ 3/ 或者/ 4/ 个/ 步骤/ ,/ 并/ 不是/ 途经/ 3/ 或/ 4/ 个/ 内核/ 间/ 距离/ 的/ 长度/ ./ 1/ -/ hop/ 的/ 具体/ 物理/ 长度/ 是/ 多少/ 需要/ 视/ 目录/ 内核/ 、/ 请求/ 内核/ 和/ 数据共享/ 内核/ 的/ 网络/ 相对/ 拓扑/ 关系/ 和/ 片/ 上/ 的/ 物理/ 距离/ 而定/ ,/ 如对/ 一个/ 基于/ 4/ ×/ 42DMESH/ 互联/ 的/ 16/ 内核/ 处理器/ 来说/ ,/ 假设/ 相邻/ 两/ 内核/ 间/ 的/ 物理/ 距离/ 为/ 1/ ,/ 则/ 1/ -/ hop/ 所/ 代表/ 的/ 实际/ 距离/ 从/ 1/ 到/ 6/ 均/ 有/ 可能/ ./ 假设/ 两/ 相邻/ 内核/ 间/ 距离/ 长度/ 为/ 1/ ,/ 则/ 图/ 15/ (/ a/ )/ Page15/ 中/ ,/ 基于/ 全/ 映射/ 目录/ 的/ 3/ -/ hops/ 读/ 缺失/ 处理/ 时/ 关键/ 路径/ 长度/ 为/ 16/ ,/ 而图/ 15/ (/ b/ )/ 中/ NPP/ 协议/ 处理/ 相同/ 的/ 读/ 缺失/ 时/ 关键/ 路径/ 长度/ 为/ 6/ ./ 另外/ ,/ 在/ 节点/ 已经/ 缓存数据/ 副本/ 的/ 情况/ 下/ ,/ 双层/ 目录/ 结构/ 能够/ 将/ 节点/ 内读/ 缺失/ 和/ 替换/ 操作/ 的/ 一致性/ 交互/ 限制/ 在/ 本/ 节点/ 内/ ,/ 无需/ 访问/ 远程/ 全局/ 目录/ ,/ 从而/ 降低/ 访存/ 延迟/ ./ 可见/ 本文/ 提出/ 的/ 基于/ 节点/ 挂/ 起/ 的/ 读/ 缺失/ 处理/ 不但/ 能/ 将/ 共享/ 读/ 操作步骤/ 减少/ 为/ 2/ -/ hops/ ,/ 而且/ 能/ 有效/ 减少/ 一致性/ 交互/ 关键/ 路径/ 延迟/ ,/ 具有/ 良好/ 的/ 延迟/ 可扩展性/ ./ 6.2/ 对/ 写作/ 废/ 延迟/ 的/ 影响/ NPP/ 协议/ 能够/ 在/ CNP/ 预测/ 正确/ 的/ 情况/ 下/ 直接/ 作/ 废掉/ 处于/ M/ 和/ E/ 状态/ 的/ 写/ 缺失/ 数据/ 副本/ ,/ 完全/ 隐藏/ 了/ 目录/ 访问/ 延迟/ ,/ 提升/ 了/ 写/ 缺失/ 一致性/ 处理/ 延迟/ ./ 另外/ ,/ 虽然/ DWP/ 对/ S/ 状态/ 数据/ 写/ 操作/ 的/ 处理过程/ 做/ 了/ 些许/ 改动/ ,/ 但/ 仍/ 属于/ 4/ -/ hops/ 一致性/ 交互/ ,/ 没有/ 增加/ 额外/ 延迟/ ./ 由于/ NPP/ 协议/ 采用/ 两层/ 目录/ ,/ 当/ 发生/ 写/ 操作/ 需要/ 进行/ 作废/ 操作/ 时/ ,/ 粗/ 向量/ 全局/ 目录/ 只/ 需/ 将/ 作废/ 请求/ 发/ 至/ 缓存数据/ 副本/ 的/ 节点/ 即可/ ,/ 每个/ 收到/ 作废/ 消息/ 的/ 节点/ 则/ 根据/ 节点/ 内/ 目录/ 并行/ 作废/ 节点/ 内/ 可能/ 存在/ 的/ 多个/ 数据/ 副本/ ,/ 这/ 不但/ 减少/ 了/ 作废/ 消息/ 在/ 片/ 上/ 连线/ 传播/ 的/ 距离/ ,/ 还/ 增加/ 了/ 作废/ 操作/ 的/ 效率/ ./ 6.3/ 存储/ 开销/ 为了/ 隐藏/ 目录/ 访问/ 延迟/ 、/ 实现/ 直接/ 的/ 读/ 缺失/ 和/ 写/ 缺失/ 一致性/ 交互/ ,/ NPP/ 协议/ 增加/ 了/ 必要/ 的/ 存储/ 部件/ 来/ 跟踪/ 历史/ 信息/ ./ NPP/ 协议/ 的/ 存储/ 开销/ 包括/ 以下/ 几个/ 方面/ :/ (/ 1/ )/ 双层/ 目录/ 双层/ 目录/ 中/ ,/ 全局/ 目录/ 负责/ 跟踪/ 节点/ 缓存数据/ 副本/ 的/ 情况/ ,/ 当/ 处理器/ 内核/ 数量/ 固定/ 时/ ,/ 全局/ 目录/ 大小/ 与/ 节点/ 规模/ 成反比/ ./ 节点/ 内/ 目录/ 采用/ 全/ 映射/ 方式/ (/ 4/ )/ SHCSHC/ 用来/ 保存/ 节点/ 的/ 共享/ 历史/ ./ SHV/ 的/ 宽度/ 与/ 全局/ 目录/ 条/ 目的/ 宽度/ 相同/ ,/ 与/ 处理器/ 的/ 节点/ 数量/ 成正比/ ./ 对于/ 23/ ×/ 23/ 内核/ 、/ 节点/ 规模/ 22/ 内核/ 的/ CMP/ 来说/ ,/ SHV/ 的/ 宽度/ 为/ 16bits/ ./ 由于/ 实际/ 应用程序/ 中读/ 操作/ 数量/ 通常/ 是/ 写/ 操作/ 数量/ 的/ 几倍/ 至/ 十几倍/ ,/ 因此/ 本文/ 设计/ 的/ SHC/ 容量/ 也/ 少于/ NPC/ 容量/ ./ 表/ 2/ 统计/ 了/ 在/ 表/ 3/ 参数/ 配置/ 下/ NPP/ 协议/ 和/ 普通/ 全/ 映射/ 目录/ 协议/ 的/ 存储/ 开销/ 情况/ ./ 假设/ 使用/ 40/ 位/ 物理地址/ ,/ 根据/ 表/ 3/ 中/ 私有/ L1Cache/ 和/ 每/ 内核/ L2CacheSlice/ 的/ 具体/ 配置/ 参数/ ,/ 可以/ 得到/ 这/ 两个/ Cache/ 需要/ 的/ 存储空间/ 大小/ ./ 其中/ Tag/ 宽度/ =/ 物理地址/ 宽度/ -/ Cache/ 索引/ 宽度/ -/ 块/ 内/ 偏移/ 宽度/ ,/ Cache/ 索引/ 宽度/ =/ Cache/ 容量/ // (/ 块/ 大小/ ×/ 组/ 相联/ 度/ )/ ,/ 块/ 内/ 偏移/ 宽度/ =/ Log/ 块/ 大小/ 表/ 264/ 核/ CMP/ 每/ 内核/ 一致性/ 协议/ 的/ 存储/ 开销/ 数据/ Cache/ 全/ 映射/ 目录/ DiCo/ -/ CMP/ (/ Base/ )/ NPP/ (/ 节点/ 规模/ 4/ )/ 25bitstag/ +/ 64bytes8bytes8bytes8bytes29bitstag/ +/ 4bits30bitstag/ +/ 4bits32bitstag/ +/ 2bytes/ 在/ 64/ 内核/ 的/ CMP/ 中/ ,/ 假设/ 使用/ 扁平/ 全/ 映射/ 目录/ 方案/ ,/ 对/ 一个/ 共享/ 数据/ 来说/ ,/ 每个/ 内核/ 中/ 的/ L2/ 跟踪/ 节点/ 中/ 内核/ 缓存/ 的/ 数据/ 副本/ ,/ 因此/ 节点/ 内/ 目录/ 的/ 大小/ 与/ 节点/ 规模/ 成正比/ ./ 对于/ 23/ ×/ 23/ 内核/ 、/ 节点/ 规模/ 22/ 内核/ 的/ CMP/ 来说/ ,/ 全局/ 目录/ 的/ 每/ 一个/ 条目/ 需要/ 16bits/ 空间/ 来/ 跟踪/ 16/ 个/ 节点/ ./ 而/ 节点/ 内/ 目录/ 的/ 每/ 一个/ 条目/ 需要/ 4bits/ 来/ 跟踪/ 节点/ 中/ 的/ 4/ 个/ 节点/ ./ (/ 2/ )/ LWPLWP/ 的/ 作用/ 是/ 在/ 基于/ 写/ 操作/ 的/ NPC/ 更新过程/ 中/ 指明/ OldWriter/ 节点/ ./ 考虑/ 到/ 所有/ 节点/ 中/ 缓存/ 的/ 数据/ 均/ 有/ 可能/ 经历/ M/ →/ S/ 的/ 状态/ 转换/ 以及/ NPC/ 更新/ 算法/ 的/ 精确性/ 和/ 性能/ ,/ 我们/ 为/ 全局/ 目录/ 的/ 每/ 一个/ 条目/ 都/ 增加/ 一个/ LWP/ 指针/ ./ 对/ 一个/ 有/ 16/ 个/ 节点/ 的/ CMP/ 来说/ ,/ LWP/ 的/ 宽度/ 为/ log16/ (/ 3/ )/ NPCNPC/ 中/ 存储/ 的/ CNP/ 在/ 发生/ 读/ 缺失/ 时/ 用来/ 指明/ 距离/ 最近/ 的/ 数据/ 副本/ 节点/ ./ CNP/ 的/ 宽度/ 与/ 处理器/ 节点/ 的/ 数量/ 有关/ ,/ 与/ LWP/ 类似/ ,/ 对/ 一个/ 有/ 16/ 个/ 节点/ 的/ CMP/ 来说/ ,/ CNP/ 的/ 宽度/ 同为/ log16CacheSlice/ 中/ 的/ 目录/ 需要/ 跟踪/ 包括/ 自身/ 在内/ 的/ 64/ 个/ 内核/ 的/ 数据共享/ 状况/ ,/ 跟踪/ 每个/ 内核/ 需要/ Page161bit/ ,/ 则/ 64/ 个/ 内核/ 需要/ 64bits/ ,/ 即/ 8bytes/ ./ 因此/ ,/ DiCo/ -/ CMP/ 方案/ 每/ 内核/ 中/ L1D/ -/ Cache/ 和/ L2CacheSlice/ 目录/ 各/ 需要/ 8bytes/ ,/ 而/ DiCo/ -/ CMP/ 中/ 的/ L1/ 和/ L2/ 一致性/ Cache/ 除了/ 标签/ 外/ ,/ 还/ 需要/ 跟踪/ O/ 状态/ 数据/ 所处/ 的/ 内核/ ,/ 跟踪/ 64/ 个/ 内核/ 需要/ 6bits/ 指针/ ./ 对于/ NPP/ 协议/ 来说/ ,/ 在/ 表/ 2/ 所列/ 具体情况/ 下/ ,/ 由于/ 将/ 4/ 个/ 内核/ 分为/ 一个/ 节点/ ,/ 64/ 个/ 内核/ 共/ 分为/ 16/ 组/ ,/ L2CacheSlice/ 中/ 的/ 目录/ 需要/ 跟踪/ 包括/ 自身/ 在内/ 的/ 16/ 个/ 节点/ ,/ 每个/ 节点/ 需要/ 1bit/ ,/ 16/ 个/ 节点/ 共/ 需要/ 16bits/ ,/ 即/ 2bytes/ ./ 另外/ ,/ 为了/ 能够/ 跟踪/ 最后/ 写/ 节点/ ,/ 还/ 需要/ 为/ L2CacheSlice/ 中/ 目录/ 的/ 每个/ 条目/ 增加/ 一个/ 4bits/ 的/ LWP/ ,/ 能够/ 跟踪/ 16/ 个/ 节点/ ./ 对于/ 节点/ 目录/ ,/ NPC/ 和/ SHC/ 来说/ ,/ 由于/ 采用/ 直接/ 映射/ 方式/ ,/ 并且/ 不/ 需要/ 块/ 内/ 偏移/ ,/ 通过/ Cache/ 块/ 的/ 数据/ 可知/ 其/ Cache/ 索引/ 宽度/ ,/ 然后/ 根据/ 物理地址/ 可知/ 其/ Tag/ 宽度/ ./ 对于/ 全/ 映射/ 目录/ 来说/ ,/ 由于/ 片上/ 两级/ Cache/ 采用/ Inclusive/ 模式/ ,/ 省去/ 了/ L1Cache/ 中/ 的/ 目录/ 结构/ ,/ 所有/ 共享/ 信息/ 均/ 保存/ 在/ L2CacheSlice/ 一侧/ ,/ 因此/ 相对/ 于/ Non/ -/ inclusive/ 模式/ 来说/ ,/ 全/ 映射/ 目录/ 存储/ 开销/ 较/ 小/ ,/ 但/ 仍/ 占/ 到/ 10.65/ %/ ./ DiCo/ -/ CMP/ 方案/ 的/ 一致性/ 存储/ 开销/ 为/ 13.27/ %/ ./ 对于/ NPP/ 协议/ 来说/ ,/ 存储/ 开销/ 不随/ 内核/ 数量/ 增加/ 呈/ 指数/ 级/ 增长/ ,/ 而是/ 由/ 多个/ 存储/ 规模/ 线性/ 增长/ 的/ 存储/ 部件/ 之/ 和/ 构成/ ./ 假设/ 节点/ 规模/ 为/ n/ ,/ 则/ 粗/ 向量/ 全局/ 目录/ 的/ 存储/ 开销/ 和/ 存储/ 开销/ 随/ 内核/ 数量/ 的/ 增长速度/ 仅/ 为/ 全/ 映射/ 目录/ 协议/ 的/ 1/ // n/ ./ 节点/ 内/ 目录/ 虽然/ 采用/ 全/ 映射/ 方式/ ,/ 但/ L1Cache/ 条目/ 数量/ 少/ ,/ 节点/ 规模/ 小/ ,/ 新增/ 内核/ 在/ 所有/ 节点/ 中/ 均匀分布/ 等/ 特点/ 使/ 节点/ 目录/ 的/ 存储/ 开销/ 较/ 小/ 并/ 呈/ 线性/ 增长/ ./ 另外/ ,/ 考虑/ 到/ 目前/ Cache/ 较/ 高/ 的/ 读/ // 写/ 命中率/ 、/ 实际/ 应用/ 中/ 数据共享/ 规模/ 不/ 大/ 以及/ SHV/ 信息/ 的/ 产生/ 、/ 传递/ 特点/ 等/ 因素/ ,/ NPC/ 和/ SHC/ 的/ 存储/ 开销/ 也/ 较/ 小/ ./ 7/ 性能/ 模拟/ 7.1/ 实验/ 平台/ 本文/ 使用/ 全/ 系统/ 仿真器/ Simics/ [/ 35/ ]/ 和/ 威斯康星大学/ 研制/ 的/ GEMS/ [/ 36/ ]/ 仿真器/ 对/ 基于/ MESI/ 状态/ 转换/ 的/ 扁平/ 全/ 映射/ 目录/ 协议/ 、/ Dico/ -/ Base/ 协议/ (/ L1/ 和/ L2CoherenceCache/ 为/ 4/ 路/ 512/ 组/ 、/ 所/ 存储/ 指针/ 宽度/ 为/ 6/ 位/ )/ 和/ 多种/ NPC/ 、/ SHC/ 容量/ 配置/ 方式/ 下/ 的/ NPP/ 协议/ 进行/ 评估/ ./ GEMS/ 具备/ 详细/ 的/ 存储系统/ 时序/ 模型/ ,/ 能够/ 对多核/ 处理器/ Cache/ 一致性/ 协议/ 中/ 涉及/ 的/ 消息/ 、/ 数据/ 传递/ 和/ 数据/ 状态/ 迁移/ 等/ 事件/ 进行/ 详细/ 模拟/ ./ 表/ 3/ 列出/ 了/ GEMS/ 仿真器/ 的/ 参数/ 配置/ ./ 本文/ 从/ SPLASH2/ 测试程序/ 的/ 应用/ 集/ 和/ 内核/ 集中/ 各/ 选择/ 4/ 个/ 程序/ 进行/ 测试/ ,/ 表/ 4/ 是/ 测试程序/ 及其/ 数据/ 输入/ 情况/ ./ CMP/ 规模/ 节点/ 规模/ 内核/ 参数/ Cache/ 层次/ 关系/ InclusiveCache/ 块/ 大小/ 64/ 字节/ 私有/ L1I/ // DCache/ 共享/ L2CacheNPCSHC/ 主存/ 访问/ 时延/ 200/ 个/ 时钟/ 周期/ NoC/ 参数/ 测试程序/ CHOLESKYtk18/ ./ OFFTLURADIXBARNESVOLRENDOCEAN/ -/ NC258/ ×/ 258WATER/ -/ NS512molecules/ ,/ 3timestepsWATER/ -/ SP512molecules/ ,/ 3timesteps7/ ./ 2/ 仿真/ 结果/ 针对/ 本文/ 提出/ 的/ 节点/ 挂/ 起/ 技术/ 和/ 直接/ 写/ 操作/ 处理/ 技术/ ,/ 我们/ 评估/ 了/ L1Cache/ 平均/ 读/ 缺失/ 延迟/ 和/ 写/ 缺失/ 延迟/ 两项/ 指标/ ./ 另外/ ,/ 还/ 对/ 程序/ 的/ 执行/ 时间/ 、/ 网络流量/ 变化/ 情况/ 和/ SCU/ 更新/ 算法/ 的/ 有效性/ 进行/ 了/ 评估/ ./ 以上/ 对/ NPP/ 协议/ 性能/ 的/ 评估/ 均/ 在/ NPC/ 和/ SHC/ 容量/ 变化/ 的/ 情况/ 下/ 进行/ ,/ 且/ 图/ 16/ ~/ 图/ 19/ 的/ 所有/ 模拟/ 结果/ 数据/ 均/ 经过/ 相对/ 于全/ 映射/ 目录/ 协议/ 方案/ 的/ 归一化/ 处理/ ./ (/ 1/ )/ 程序执行/ 时间/ 相对/ 于全/ 映射/ 目录/ 来说/ ,/ Dico/ -/ Base/ 协议/ 对/ 所有/ 测试程序/ 的/ 性能/ 表现/ 较为/ 均衡/ ,/ 程序执行/ 时间/ 降幅/ 在/ 5.02/ %/ ~/ 14.1/ %/ 之间/ ,/ 平均/ 为/ 9.3/ %/ ;/ 而/ NPP/ 协议/ 根据/ NPC/ 中/ 保存/ 的/ 动态/ CNP/ 信息/ 对/ 有效/ 数据/ 所在/ 节点/ 进行/ 预测/ 直接/ 访问/ ,/ 降低/ 共享/ 数据/ 的/ 读/ 缺失/ Page17/ 和/ 写作/ 废/ 一致性/ 交互/ 延迟/ ,/ 从而/ 减少/ 程序执行/ 时间/ ./ 另外/ ,/ 双层/ 目录/ 结构/ 能够/ 在/ 同一/ 节点/ 内/ 包含/ 同一/ 数据/ 多个/ 副本/ 的/ 情况/ 下/ 增加/ 作废/ 操作/ 的/ 并行性/ ,/ 减少/ 作废/ 延迟/ ./ 图/ 16/ 中/ ,/ 程序执行/ 时间/ 降幅/ 最大/ 的/ 是/ OCEAN/ -/ NC/ 和/ WATER/ -/ SP/ ,/ 在/ NPC/ (/ 6.5625/ KB/ )/ +/ SHC/ (/ 1.5/ KB/ )/ 的/ NPP/ 协议/ 配置/ 下/ ,/ 降幅/ 分别/ 达到/ 了/ 53.10/ %/ 和/ 51.30/ %/ ./ 在/ 3/ 种/ 不同/ 的/ NPC/ +/ SHC/ 配置/ 下/ ,/ 程序/ 平均/ 执行/ 时间/ 降幅/ 分别/ 为/ 21.78/ %/ ~/ 31.11/ %/ ./ 可以/ 看到/ ,/ NPC/ 和/ SHC/ 在/ 最大/ 配置/ 下/ 性能/ 仍/ 有/ 提升/ ,/ 但/ 执行/ 时间/ 降幅/ 已经/ 非常/ 有限/ ./ (/ 2/ )/ 平均/ 读/ 缺失/ 延迟/ 在/ 降低/ L1Cache/ 读/ 缺失/ 延迟/ 方面/ ,/ 相对/ 于全/ 映射/ 目录/ 来说/ ,/ 基于/ Dico/ -/ Base/ 协议/ 时/ ,/ VOLREND/ 的/ 降幅/ 最大/ ,/ 达到/ 18.9/ %/ ,/ 而/ FFT/ 的/ 降幅/ 最小/ ,/ 达到/ 7.02/ %/ ,/ 平均/ 降幅/ 为/ 11/ %/ ./ NPP/ 协议/ 中/ 的/ CNP/ 预测/ 和/ 节点/ 挂/ 起/ 技术/ 缩短/ 了/ 读/ 缺失/ 关键/ 路径/ 长度/ ,/ 减少/ 了/ 读/ 缺失/ 延迟/ ./ NPC/ 容量/ 变化/ 时/ ,/ 随/ 数据共享/ 规模/ 的/ 不同/ ,/ 其/ 对/ 数据共享/ 历史/ 信息/ 的/ 捕捉/ 能力/ 也/ 不同/ ,/ 从而/ 影响/ 节点/ 预测/ 的/ 有效性/ ;/ 而/ SHC/ 容量/ 变化/ 时/ ,/ 随/ 程序/ 在/ 同一/ 内核/ 中/ 发生/ 写/ 操作/ 频率/ 和/ 密度/ 的/ 波动/ ,/ 其/ 对/ 过往/ 历史/ 共享/ 信息/ 的/ 捕捉/ 能力/ 也/ 会/ 不同/ ./ 图/ 17/ 中/ ,/ 所有/ 程序/ 的/ 平均/ 读/ 缺失/ 延迟/ 降低/ 14.22/ %/ ~/ 18.9/ %/ ./ 其中/ BARNES/ 和/ WATER/ -/ NS/ 降幅/ 最大/ ,/ 分别/ 达到/ 23.98/ %/ ~/ 24/ %/ 和/ 21/ %/ ~/ 24.12/ %/ ./ BARNES/ 和/ WATER/ -/ NS/ 在/ NPC/ 、/ SHC/ 的/ 不同/ 配置/ 下/ 性能/ 几乎/ 没有/ 波动/ ./ (/ 3/ )/ 平均/ 写/ 缺失/ 延迟/ 在/ 降低/ L1Cache/ 写/ 缺失/ 延迟/ 方面/ ,/ 相对/ 于全/ 映射/ 目录/ 来说/ ,/ 在/ Dico/ -/ Base/ 协议/ 下/ ,/ OCEAN/ -/ NC/ 的/ 降幅/ 最大/ ,/ 达到/ 16.09/ %/ ,/ 而/ CHOLESKY/ 的/ 降幅/ 最图/ 17NPP/ 协议/ 对/ L1Cache/ 读/ 缺失/ 延迟/ 的/ 影响/ 小/ ,/ 达到/ 1.89/ %/ ,/ 平均/ 降幅/ 为/ 8.3/ %/ ./ NPP/ 协议/ 只/ 对/ 处于/ M/ 或/ E/ 状态/ 的/ 写/ 缺失/ 数据/ 有/ 加速/ 访问/ 效果/ ,/ 但/ 也/ 没有/ 增加/ S/ 状态/ 写/ 缺失/ 数据/ 的/ 访问/ 延迟/ ./ 另外/ ,/ 延迟/ 减少/ 的/ 程度/ 与/ 目录/ 节点/ ,/ 写/ 缺失/ 节点/ 和/ 数据/ 副本/ 节点/ 之间/ 的/ 位置/ 关系/ 有关/ ,/ 如果/ 目录/ 节点/ 原先/ 就/ 位于/ 写/ 缺失/ 节点/ 和/ 数据/ 副本/ 节点/ 的/ 中点/ 附近/ ,/ 则/ 加速/ 效果/ 不/ 明显/ ./ 由于/ 测试程序/ 中/ 数据共享/ 规模/ 为/ 1/ (/ M/ 或/ E/ 状态/ )/ 的/ 情况/ 占有/ 很大/ 比例/ ,/ 因此/ NPP/ 协议/ 明显/ 的/ 降低/ 了/ 写/ 缺失/ 延迟/ ./ 图/ 18/ 中/ ,/ 所有/ 程序/ 的/ 平均/ 写/ 缺失/ 延迟/ 降低/ 17.89/ %/ ~/ 21.13/ %/ ./ 其中/ LU/ 和/ VOLREND/ 降幅/ 最大/ ,/ 分别/ 达到/ 45/ %/ ~/ 46.14/ %/ 和/ 29.97/ %/ ~/ 32.09/ %/ ./ 同样/ ,/ LU/ 和/ VOLREND/ 也/ 对/ NPC/ +/ SHC/ 的/ 配置/ 情况/ 不/ 敏感/ ,/ 原因/ 可能/ 是/ NPC/ +/ SHC/ 的/ 容量/ 已经/ 足够/ 捕捉/ 历史/ 共享/ 信息/ ./ 图/ 18NPP/ 协议/ 对/ L1Cache/ 写/ 缺失/ 延迟/ 的/ 影响/ (/ 4/ )/ 网络流量/ Dico/ -/ Base/ 协议/ 作废/ 数据/ 时/ 不会/ 发出/ 大量/ 的/ 冗余/ 请求/ ,/ 而且/ 其/ 对/ L1/ 和/ L2CoherenceCache/ 的/ 更/ Page18/ 新/ 较为简单/ ,/ 数据量/ 小/ ,/ 所以/ Dico/ -/ Base/ 协议/ 相对/ 于全/ 映射/ 目录/ 协议/ 和/ NPP/ 协议/ 来说/ ,/ 网络流量/ 是/ 最小/ 的/ ,/ 比全/ 映射/ 目录/ 协议/ 平均/ 低/ 12.67/ %/ ,/ 比/ 最大/ 配置/ 的/ NPP/ 协议/ 平均/ 低/ 19.3/ %/ ./ 为了/ 保证/ NPC/ 更新/ 的/ 精确性/ ,/ SCU/ 更新/ 算法/ 增加/ 了/ NoC/ 网络流量/ ,/ 这些/ 增加/ 的/ 流量/ 主要/ 是/ 在/ 传递/ 更新过程/ 需要/ 的/ 控制/ 消息/ ,/ 节点/ 数据共享/ 历史/ 信息/ (/ SHV/ ,/ GDV/ )/ ,/ 节点/ 指针/ 信息/ (/ CNP/ ,/ LWP/ )/ 时/ 产生/ 的/ ./ 但/ 另一方面/ ,/ 双层/ 目录/ 的/ NPP/ 协议/ 具备/ 的/ 节点/ 内/ 并行/ 写作/ 废/ 能力/ 和/ 节点/ 内读/ 缺失/ 化解/ 、/ 替换/ 能力/ 能/ 减少/ 网络流量/ ./ 实验/ 证明/ ,/ NPP/ 协议/ 的/ 网络/ 拥塞/ 程度/ 略大于/ 全/ 映射/ 目录/ ./ 由于/ NPC/ 和/ SHC/ 对/ 共享/ 历史/ 信息/ 的/ 捕捉/ 能力/ 会/ 影响/ 到/ 读/ 缺失/ 和/ 写/ 缺失/ 的/ 性能/ ,/ 所以/ 在/ 不同/ 的/ NPC/ +/ SHC/ 配置/ 下/ ,/ 网络流量/ 也/ 会/ 有/ 变化/ ./ 图/ 19/ 中/ ,/ 相对/ 于全/ 映射/ 目录/ ,/ NPP/ 协议/ 的/ 网络流量/ 平均/ 增加/ 6.62/ %/ ~/ 7.28/ %/ ./ 其中/ CHOLESKY/ 和/ WATER/ -/ NS/ 网络流量/ 增加/ 最/ 多/ ,/ 分别/ 达到/ 16/ %/ ~/ 17/ %/ 和/ 10/ %/ ./ (/ 5/ )/ SCU/ 算法/ 对/ NPC/ 预测/ 准确率/ 的/ 影响/ 基于/ NPP/ 协议/ 框架/ ,/ 我们/ 对/ 使用/ Writer/ -/ Recording/ 算法/ (/ 见/ 5.1/ 节/ )/ 和/ SCU/ 算法/ 时/ NPC/ 的/ 预测/ 准确率/ 做/ 了/ 评估/ ./ 从图/ 20/ 可知/ ,/ 采用/ Writer/ -/ Recording/ 算法/ 时/ ,/ NPC/ 的/ 预测/ 准确率/ 最高/ 为/ 65.37/ %/ ,/ 平均/ 为/ 48.04/ %/ ;/ 而/ 使用/ SCU/ 算法/ 时/ ,/ NPC/ 的/ 预测/ 准确率/ 最高/ 为/ 93.52/ %/ ,/ 平均/ 为/ 85.84/ %/ ,/ NPC/ 预测/ 准确率/ 明显/ 提升/ ./ SCU/ 更新/ 算法/ 增加/ 了/ NoC/ 网络流量/ ,/ 但/ 也/ 提升/ 了/ NPC/ 的/ 预测/ 准确率/ ./ 图/ 20/ 是/ 使用/ SCU/ 更新/ 算法/ 前后/ NPC/ 预测/ 准确率/ 的/ 变化/ 情况/ ./ 对于/ 使用/ 了/ SCU/ (/ 签名/ 回收/ 的/ NPC/ 更新/ )/ 算法/ 的/ NPP/ 协议/ 来说/ ,/ NPC/ 的/ 节点/ 预测/ 准确率/ 受到/ 共享/ 数据/ 重用/ 模式图/ 20SCU/ 更新/ 算法/ 对/ NPC/ 预测/ 准确率/ 的/ 影响/ 的/ 影响/ ,/ 重用/ 程度/ 不高/ 或者/ 重用/ 间隔/ 过长/ 都/ 有/ 可能/ 导致/ NPC/ 替换/ 频率/ 的/ 升高/ ,/ 从而/ 导致/ NPC/ 访问/ 时/ 缺失/ 率/ 增加/ ,/ 准确率/ 下降/ ;/ 另外/ ,/ 在/ 基于/ 2DMESH/ 的/ NoC/ 互联网络/ 中/ ,/ 所有/ 的/ 数据传输/ 和/ 消息传递/ 都/ 依赖于/ 片上/ 连线/ 和/ 路由器/ ,/ 某个/ 时刻/ 某个/ 通路/ 上/ 的/ 网络/ 拥塞/ 都/ 有/ 可能/ 导致/ 路由器/ 响应/ 不/ 及时/ 和/ 链路/ 饱和/ ,/ 这会/ 导致/ NPC/ 更新/ 实时性/ 的/ 下降/ ,/ 从而/ 降低/ NPC/ 预测/ 的/ 准确率/ ./ 而/ 对于/ 没有/ 使用/ SCU/ 的/ NPP/ 协议/ 来说/ ,/ 除了/ 以上/ 两个/ 原因/ ,/ 写/ 缺失/ 所/ 产生/ 的/ 过时/ 历史/ 信息/ 也/ 会/ 严重/ 降低/ NPC/ 的/ 预测/ 准确率/ ./ 8/ 结论/ 存储系统/ 的/ 发展/ 滞后/ 导致/ CMP/ 处理器/ 性能/ 不能/ 随/ 内核/ 数量/ 的/ 增加/ 等/ 比/ 提升/ ./ 随着/ 线/ 延迟/ 和/ 芯片/ 规模/ 的/ 不断/ 增大/ ,/ Cache/ 一致性/ 交互/ 延迟/ 在/ 访存/ 延迟/ 中所/ 占/ 的/ 比重/ 越来越/ 大/ ,/ 一致性/ 协议/ 的/ 存储/ 开销/ 也/ 严重/ 限制/ 了/ 系统/ 的/ 可/ 扩展/ 能力/ ./ 本文/ 以/ 延迟/ 、/ 存储/ 可/ 扩展/ 为/ 目标/ ,/ 提出/ 基于/ 节点/ 预测/ 的/ 直接/ Cache/ 一致性/ 协议/ ,/ 针对/ 一致性/ 协议/ 中/ 存在/ 的/ 数据/ 间接/ 访问/ 问题/ ,/ 分别/ 提出/ 适用/ 于读/ 缺失/ 和/ 写/ 缺失/ 的/ 节点/ 挂/ 起/ 技术/ 和/ 直接/ 写/ 缺失/ 处理/ 技术/ ,/ 有效/ 隐藏/ 了/ 目录/ 访问/ 延迟/ ./ 为了/ 实现/ 准确/ 的/ 节点/ 预测/ ,/ 我们/ 还/ 提出/ 基于/ “/ 签名/ ”/ 回收/ 的/ 历史/ 信息/ 更新/ 算法/ ,/ 避免/ 了/ 冗余/ 更新/ 和/ 不/ 完整/ 更新/ 的/ 发生/ ./ 在/ 基于/ 2DMESHNoC/ 互联/ 的/ 64/ 核/ CMP/ 测试环境/ 下/ ,/ 对/ 8/ 个/ SPLASH/ -/ 2/ 测试程序/ 进行/ 了/ 性能/ 模拟/ ./ 相对/ 于全/ 映射/ 目录/ 协议/ ,/ NPP/ 协议/ 的/ 平均/ 执行/ 时间/ 降幅/ 为/ 21.78/ %/ ~/ 31.11/ %/ ;/ 平均/ 读/ 缺失/ 和/ 写/ 缺失/ 延迟/ 分别/ 降低/ 14.22/ %/ ~/ 18.9/ %/ 和/ 17.89/ %/ ~/ 21.13/ %/ ./ 由于/ 历史/ 信息/ 更新/ 算法/ 需要/ 发送/ 的/ 相关/ 控制/ 消息/ 和/ 历史/ 信息/ ,/ 网络流量/ 平均/ 增加/ Page196/ ./ 62/ %/ ~/ 7.28/ %/ ./ 未来/ 我们/ 将/ 进一步/ 研究/ 减少/ 一致性/ 延迟/ 的/ 方法/ ,/ 如/ 数据/ 自/ 作废/ 技术/ ./ 目前/ 数据/ 自/ 作废/ 主要/ 依靠/ 软件/ 同步/ 和/ 历史/ 信息/ 预测/ ,/ 与/ 程序/ 中/ 实际/ 写作/ 废/ 的/ 契合/ 程度/ 还/ 不/ 理想/ ,/ 在/ 一定/ 程度/ 上会/ 破会/ 已经/ 建立/ 的/ 数据/ 局部性/ ./ 高效/ 的/ 数据/ 自/ 作废/ 技术/ 在/ 写/ 操作/ 时/ 不/ 依赖于/ 目录/ ,/ 能/ 大幅/ 提升/ 写/ 操作/ 效率/ ./ 我们/ 还/ 将/ 研究/ Cache/ 一致性/ 协议/ 的/ 低功耗/ 技术/ ,/ 包括/ 如何/ 提升/ 一致性/ 交互/ 效率/ ,/ 如何/ 减少/ 一致性/ 交互/ 消息/ 数量/ ,/ 如何/ 避免/ 大位/ 宽/ 数据/ 在/ 连线/ 上/ 长距离/ 传输/ 的/ 方法/ 等/ 问题/ ./ 

