Page1/ 分布式/ 存储/ 中/ 的/ 纠/ 删码/ 容错/ 技术/ 研究/ 王意洁/ 许方亮/ 裴晓强/ (/ 国防科学技术大学/ 并行/ 与/ 分布/ 处理/ 国家/ 重点/ 实验室/ 长沙/ 410073/ )/ (/ 国防科学技术大学/ 计算机/ 学院/ 长沙/ 410073/ )/ 摘要/ 大/ 数据/ 规模/ 上/ 体量/ 大/ 和/ 增长速度/ 快/ 的/ 特点/ 对/ 存储系统/ 的/ 性能/ 和/ 可扩展性/ 提出/ 了/ 严峻/ 挑战/ ./ 使用/ 普通/ 商用/ 服务器/ 构建/ 的/ 分布式/ 存储系统/ 服务/ 能力/ 强/ 、/ 成本/ 低廉/ 且/ 极易/ 扩展/ ,/ 在/ 大/ 数据/ 的/ 存储管理/ 中/ 得到/ 了/ 极为/ 广泛/ 的/ 应用/ ./ 分布式/ 存储系统/ 庞大/ 的/ 节点/ 数量/ 导致/ 节点/ 失效/ 情况/ 频发/ ,/ 必须/ 采用/ 一定/ 的/ 容错/ 技术/ 来/ 保证数据/ 可靠性/ ./ 常用/ 的/ 容错/ 技术/ 主要/ 包括/ 多/ 副本/ 技术/ 和/ 纠/ 删码/ 技术/ 两种/ ./ 与/ 多/ 副本/ 容错/ 技术/ 相比/ ,/ 纠/ 删码/ 容错/ 技术/ 能够/ 以低/ 得/ 多/ 的/ 存储/ 开销/ 提供/ 相同/ 甚至/ 更/ 高/ 的/ 数据/ 可靠性/ ./ 随着/ 近年来/ 数据/ 规模/ 的/ 爆炸式/ 增长/ ,/ 纠/ 删码/ 容错/ 技术/ 受到/ 了/ 业界/ 的/ 广泛/ 关注/ ./ 该文/ 综述/ 了/ 分布式/ 存储/ 中/ 纠/ 删码/ 容错/ 技术/ 的/ 研究/ 现状/ ./ 首先/ ,/ 介绍/ 了/ 纠/ 删码/ 容错/ 技术/ 的/ 基本原理/ 和/ 概念/ ,/ 指出/ 了/ 纠/ 删码/ 容错/ 技术/ 在/ 大规模/ 分布式/ 存储/ 中/ 面临/ 的/ 主要/ 技术/ 挑战/ ;/ 然后/ ,/ 从/ 编码/ 实现/ 、/ 纠/ 删码/ 设计/ 、/ 数据/ 修复/ 和/ 数据/ 更新/ 等/ 方面/ 阐述/ 了/ 分布式/ 存储/ 中/ 纠/ 删码/ 容错/ 技术/ 的/ 研究进展/ ,/ 重点/ 研究/ 分析/ 了/ 各项/ 关键技术/ 的/ 特点/ 和/ 局限性/ ,/ 并/ 依据/ 主要/ 评价/ 指标/ 对/ 现有/ 纠/ 删码/ 的/ 编码/ 性能/ 和/ 修复/ 性能/ 进行/ 了/ 对比/ 和/ 分析/ ;/ 最后/ ,/ 基于/ 最新/ 研究/ 动态/ 指出/ 了/ 分布式/ 存储/ 中/ 纠删/ 容错/ 技术/ 未来/ 的/ 研究/ 方向/ ,/ 包括/ 同步/ 编码/ 实现/ 技术/ 、/ 低/ 冗余/ 再生/ 码/ 设计/ 和/ 数据/ 失效/ 预测/ 技术/ 等/ ./ 关键词/ 分布式/ 存储/ ;/ 纠/ 删码/ ;/ 编码/ 实现/ ;/ 数据/ 修复/ ;/ 数据/ 更新/ 1/ 引言/ 进入/ 大/ 数据/ 时代/ ,/ 数据/ 在/ 规模/ 方面/ 的/ 显著特点/ 是/ 体量/ 庞大/ 和/ 增长/ 迅速/ [/ 1/ -/ 2/ ]/ ./ 例如/ ,/ 欧洲/ 中等/ 范围/ 天气预报/ 中心/ 在/ 2015/ 年/ 11/ 月/ 存储/ 的/ 原始数据/ 达到/ 87PB/ ,/ 并且/ 每月/ 增长/ 约/ 3PB/ ①/ ,/ 年化/ 增长率/ 为/ 41/ %/ ;/ 根据/ 2016/ 年/ 3/ 月/ 的/ 数据/ ,/ 社交/ 网站/ Facebook/ 上/ 用户/ 分享/ 的/ 图片/ 在/ 过去/ 6/ 年间/ 增长/ 了/ 20/ 倍/ ②/ ,/ 平均/ 每年/ 增长/ 65/ %/ ;/ 从/ 2012/ 年/ 到/ 2016/ 年/ 3/ 月/ ,/ 云/ 存储/ 平台/ Dropbox/ 上/ 的/ 数据量/ 从/ 40PB/ 增长/ 到/ 了/ 500PB/ ③/ ,/ 年/ 复合/ 增长率/ 高达/ 88/ %/ ./ 规模/ 庞大/ 并且/ 仍然/ 在/ 不断/ 迅速/ 增长/ 的/ 数据/ ,/ 对/ 构建/ 良好/ 的/ 存储系统/ 提出/ 了/ 重大/ 挑战/ ./ 系统/ 既要/ 有/ 极/ 高/ 的/ 数据/ 存取/ 性能/ ,/ 也/ 要/ 有/ 良好/ 的/ 可扩展性/ ,/ 可以/ 在/ 不/ 影响/ 系统/ 正常/ 运行/ 的/ 前提/ 下/ 动态/ 地/ 增加/ 系统/ 规模/ 并/ 获得/ 相应/ 的/ 性能/ 提升/ ./ 庞大/ 的/ 数据/ 规模/ 对系统/ 的/ 经济/ 成本/ 也/ 提出/ 了/ 严格要求/ ./ 传统/ 基于/ RAID/ (/ RedundantArrayofIndependentDisks/ )/ [/ 3/ ]/ 的/ 单点/ 存储系统/ 或/ 基于/ SAN/ (/ StorageAreaNetwork/ )/ [/ 4/ ]/ 的/ 网络/ 存储系统/ 等/ 都/ 无法/ 同时/ 满足/ 大/ 数据/ 存储/ 在/ 性能/ 、/ 可扩展性/ 和/ 经济/ 成本/ 等/ 方面/ 的/ 要求/ ./ 构建/ 于/ 大量/ 廉价/ 商用/ 硬件/ 之上/ 的/ 分布式/ 存储系统/ ,/ 不仅/ 可以/ 通过/ 并行/ 访问/ 提供/ 极高/ 的/ 数据/ 存取/ 性能/ ,/ 也/ 可以/ 通过/ 增加/ 存储/ 节点/ 增大/ 规模/ 并/ 提升/ 性能/ ,/ 并且/ 成本/ 低廉/ ./ 因此/ ,/ 分布式/ 存储系统/ 在/ 大/ 数据/ 的/ 存储管理/ 中/ 得到/ 了/ 极为/ 广泛/ 的/ 应用/ ./ 例如/ ,/ 谷歌/ 的/ 文件系统/ GFS/ (/ GoogleFileSystem/ )/ [/ 5/ ]/ 和/ Hadoop/ 中/ 被/ 广泛/ 采用/ 的/ 存储系统/ HDFS/ (/ HadoopDistributedStorageSystem/ )/ [/ 6/ ]/ 就是/ 该类/ 存储系统/ 的/ 典型/ 代表/ ./ 数据/ 容错/ 是/ 大规模/ 分布式/ 存储/ 中/ 一项/ 不可或缺/ 的/ 关键技术/ ./ 由于/ 数据量/ 极为/ 庞大/ ,/ 该类/ 存储系统/ 往往/ 包含/ 几千/ 甚至/ 几万个/ 存储/ 节点/ [/ 5/ ,/ 7/ -/ 8/ ]/ ./ 例如/ ,/ 百度/ 公司/ 单个/ 集群/ 的/ 节点/ 数量/ 在/ 2014/ 年/ 就/ 超过/ 了/ 10000/ 台/ [/ 9/ ]/ ./ 庞大/ 的/ 节点/ 数量/ 使得/ 节点/ 失效/ 成为/ 常态/ [/ 5/ ,/ 7/ ,/ 10/ -/ 11/ ]/ ./ 近年来/ 一些/ 大型/ 系统/ 中/ 的/ 统计数据/ 表明/ ,/ 平均/ 每天/ 都/ 会/ 有/ 1/ %/ ~/ 2/ %/ 的/ 节点/ 发生/ 失效/ [/ 8/ ,/ 12/ ]/ ./ 因此/ ,/ 采用/ 一定/ 的/ 数据/ 容错/ 技术/ ,/ 从而/ 保证/ 在/ 部分/ 存储/ 节点/ 失效/ 的/ 情况/ 下/ 数据/ 仍然/ 能够/ 被/ 正常/ 地/ 访问/ 就/ 显得/ 尤为重要/ ./ 目前/ ,/ 常见/ 的/ 数据/ 容错/ 技术/ 有/ 两种/ :/ 一种/ 是/ 多/ 副本/ 容错/ 技术/ [/ 13/ ]/ ,/ 通过/ 复制/ 进行/ 容错/ ;/ 另/ 一种/ 是/ 纠/ 删码/ 容错/ 技术/ [/ 14/ ]/ ,/ 通过/ 编码/ 进行/ 容错/ ./ 与/ 多/ 副本/ 容错/ 技术/ 相比/ ,/ 纠/ 删码/ 容错/ 技术/ 可以/ 在/ 显著/ 降低/ 存储空间/ 消耗/ 的/ 同时/ 提供/ 相同/ 甚至/ 高得/ 多/ 的/ 数据/ 容错/ 能力/ [/ 15/ -/ 16/ ]/ ./ 例如/ ,/ 与/ 被/ 广泛/ 采用/ 的/ 三/ 副本/ 相比/ ,/ (/ 14/ ,/ 10/ )/ -/ RS/ (/ Reed/ -/ Solomon/ )/ 纠/ 删码/ [/ 17/ ]/ 既/ 可/ 将/ 存储空间/ 消耗/ 降低/ 53/ %/ ,/ 也/ 可/ 将/ 容错/ 能力/ 提高/ 一倍/ ./ 随着/ 大/ 数据/ 时代/ 数据/ 规模/ 的/ 爆炸式/ 增长/ ,/ 容错/ 能力/ 强且/ 存储/ 成本低/ 的/ 纠/ 删码/ 容错/ 技术/ 受到/ 了/ 广泛/ 关注/ ,/ 成为/ 了/ 存储/ 领域/ 的/ 一个/ 研究/ 热点/ ./ 目前/ ,/ 国内外/ 关于/ 纠/ 删码/ 容错/ 技术/ 研究/ 的/ 综述/ 文献/ 较/ 少/ ,/ 主要/ 是/ 关于/ 纠/ 删码/ 在/ RAID/ 存储系统/ 中/ 的/ 应用/ [/ 18/ -/ 19/ ]/ ./ 但是/ 与/ RAID/ 存储系统/ 相比/ ,/ 大规模/ 分布式/ 存储系统/ 具有/ 不同/ 的/ 特点/ ,/ 其中/ 纠/ 删码/ 容错/ 技术/ 面临/ 的/ 技术/ 挑战/ 也/ 不尽相同/ ./ 除了/ 纠/ 删码/ 设计/ ,/ 近年来/ 也/ 涌现出/ 了/ 很多/ 从/ 编码/ 实现/ 、/ 数据/ 修复/ 和/ 数据/ 更新/ 等/ 其它/ 方面/ 优化/ 纠/ 删码/ 容错/ 技术/ 的/ 研究/ 工作/ ./ 本文/ 将/ 介绍/ 大规模/ 分布式/ 存储/ 中/ 纠/ 删码/ 容错/ 技术/ 面临/ 的/ 主要/ 技术/ 挑战/ ,/ 以及/ 围绕/ 这些/ 技术/ 挑战/ 的/ 最新/ 研究进展/ ,/ 并/ 指出/ 大规模/ 分布式/ 存储/ 中/ 纠/ 删码/ 容错/ 技术/ 的/ 未来/ 研究/ 方向/ ./ 本文/ 第/ 2/ 节/ 介绍/ 纠/ 删码/ 容错/ 技术/ 的/ 基本原理/ 并/ 明确/ 常用/ 的/ 相关/ 概念/ ;/ 第/ 3/ 节/ 介绍/ 纠/ 删码/ 容错/ 技术/ 在/ 大规模/ 分布式/ 存储/ 中/ 面临/ 的/ 主要/ 技术/ 挑战/ ;/ 第/ 4/ ①/ ②/ ③/ infrastructure/ // Page3/ 节/ 介绍/ 应对/ 编码/ 实现/ 挑战/ 的/ 研究进展/ ;/ 第/ 5/ 节/ 和/ 第/ 6/ 节/ 分别/ 介绍/ 从/ 纠/ 删码/ 设计/ 和/ 数据/ 修复/ 技术/ 两个/ 方面/ 应对/ 数据/ 修复/ 挑战/ 的/ 研究进展/ ;/ 第/ 7/ 节/ 介绍/ 应对/ 数据/ 更新/ 挑战/ 的/ 研究进展/ ;/ 第/ 8/ 节/ 介绍/ 有关/ 纠/ 删码/ 的/ 其它/ 研究/ 内容/ ;/ 第/ 9/ 节/ 展望未来/ 的/ 研究/ 方向/ ;/ 最后/ ,/ 第/ 10/ 节/ 总结/ 全文/ ./ 2/ 纠/ 删码/ 的/ 基本原理/ 和/ 概念/ 通常/ ,/ 纠/ 删码/ [/ 15/ -/ 16/ ]/ 可以/ 用/ 三元组/ (/ n/ ,/ k/ ,/ k/ )/ 来/ 表示/ ,/ 其中/ n/ >/ k/ / k/ ./ 一个/ (/ n/ ,/ k/ ,/ k/ )/ -/ 纠/ 删码/ 将/ 大小/ 为/ M/ 的/ 数据/ 对象/ O/ 划分/ 成/ k/ 个/ 大小/ 均/ 为/ M/ // k/ 的/ 数据/ 块/ o1/ ,/ o2/ ,/ …/ ,/ ok/ ,/ 然后/ 通过/ 相应/ 的/ 编码/ 算法/ 对/ 这些/ 数据/ 块/ 进行/ 运算/ ,/ 得到/ n/ 个/ 编码/ 块/ c1/ ,/ c2/ ,/ …/ ,/ cn/ ,/ 并/ 保证/ 使用/ 这/ n/ 个/ 编码/ 块/ 中/ 的/ 任意/ k/ 个/ 都/ 能/ 解码/ 恢复/ 出/ 原始数据/ 对象/ O/ ./ 2.1/ 纠/ 删码/ 的/ 基本原理/ 目前/ ,/ 存储系统/ 采用/ 的/ 纠/ 删码/ 都/ 是/ 线性/ 的/ ,/ 本文/ 也/ 只/ 关注/ 线性/ 纠/ 删码/ ./ 如式/ (/ 1/ )/ 所示/ ,/ 在/ 线性/ 纠/ 删码/ 中/ ,/ 每个/ 编码/ 块/ ci/ 都/ 可/ 表示/ 成/ 所有/ 数据/ 块/ 的/ 线性组合/ ./ 其中/ gij/ ∈/ Fq/ ,/ Fq/ 是/ 包含/ q/ 个/ 元素/ 的/ 伽/ 罗瓦域/ (/ GaloisField/ )/ ./ (/ gi1gi2/ …/ gik/ )/ ×/ 与/ 编码/ 过程/ 相同/ ,/ 在/ 线性/ 纠/ 删码/ 中/ ,/ 失效/ 块/ 的/ 修复/ 也/ 是/ 通过/ 对/ 可用/ 块/ 进行/ 线性组合/ 来/ 完成/ ./ 可用/ 块/ 的/ 选择/ 以及/ 相应/ 组合/ 系数/ 的/ 计算/ 由/ 具体/ 的/ 纠/ 删码/ 设计/ 决定/ ./ 例如/ ,/ 对于/ 经典/ 的/ RS/ 码/ [/ 17/ ]/ ,/ 修复/ 任何/ 一个/ 块/ 都/ 需要/ 下载/ k/ 个块/ ;/ 对于/ 近来/ 提出/ 的/ 改进型/ 纠/ 删码/ ,/ 如/ LRC/ (/ LocallyRepairableCode/ )/ [/ 20/ ]/ 等/ ,/ 在/ 多数/ 失效/ 情况/ 下/ 进行/ 修复/ 需要/ 的/ 块/ 数目/ 都/ 小于/ k/ ,/ 只/ 在/ 多块/ 失效/ 等/ 少数/ 情况/ 下/ 才/ 会/ 大于/ k/ ./ 2.2/ 纠/ 删码/ 的/ 相关/ 概念/ 目前/ ,/ 对/ 存储系统/ 中/ 纠/ 删码/ 容错/ 技术/ 的/ 相关/ 概念/ 尚无/ 一致/ 的/ 定义/ ./ 为了/ 便于/ 本文/ 的/ 描述/ 与/ 理解/ ,/ 现对/ 本文/ 常用/ 的/ 相关/ 概念/ 明确/ 如下/ :/ (/ 1/ )/ 数据/ 块/ (/ DataBlock/ )/ ./ 用户/ 存储/ 到/ 系统/ 中/ 的/ 原始数据/ 对象/ 被/ 系统/ 划分/ 后/ 产生/ 的/ 块/ ./ (/ 2/ )/ 编码/ 块/ (/ CodedBlock/ )/ ./ 数据/ 块/ 经过/ 编码/ 算法/ 运算/ 后/ 产生/ 的/ 所有/ 块/ ./ (/ 3/ )/ 条带/ (/ Stripe/ )/ ./ 独立/ 地/ 与/ 一个/ 纠/ 删码/ 算法/ 相关/ 的/ 所有/ 编码/ 块/ 所/ 构成/ 的/ 集合/ ./ 例如/ ,/ 一个/ (/ n/ ,/ k/ ,/ k/ )/ -/ 纠/ 删码/ 的/ 条带/ 包含/ n/ 个/ 编码/ 块/ ./ (/ 4/ )/ 系统/ 码/ (/ SystematicCode/ )/ ./ 如果/ 一个/ 纠/ 删码/ 产生/ 的/ 编码/ 块/ 包含/ 条带/ 内/ 的/ 所有/ 数据/ 块/ ,/ 即/ 满足/ {/ o1/ ,/ o2/ ,/ …/ ,/ ok/ }/ / {/ c1/ ,/ c2/ ,/ …/ ,/ cn/ }/ ,/ 则/ 称/ 该/ 纠/ 删码/ 为/ 系统/ 码/ ./ 对于/ 系统/ 码/ ,/ 在/ 条带/ 内/ 没有/ 编码/ 块/ 失效/ 时/ ,/ 原始数据/ 对象/ 可以/ 直接/ 读取/ ,/ 而/ 无需/ 解码/ ./ 这个/ 性质/ 对/ 存储系统/ 至关重要/ ./ 因此/ ,/ 用于/ 存储系统/ 的/ 纠/ 删码/ 几乎/ 全都/ 是/ 系统/ 码/ ./ 在/ 没有/ 特殊/ 说明/ 的/ 情况/ 下/ ,/ 后文/ 所/ 讨论/ 的/ 纠/ 删码/ 都/ 指/ 系统/ 码/ ./ (/ 5/ )/ 精确/ 码/ (/ ExactCode/ )/ ./ 如果/ 一个/ 纠/ 删码/ 进行/ 数据/ 修复/ 时所/ 恢复/ 出/ 的/ 编码/ 块/ 与/ 丢失/ 的/ 编码/ 块/ 在/ 内容/ 上/ 完全相同/ ,/ 则/ 称/ 这/ 一/ 纠/ 删码/ 为/ 精确/ 码/ ./ 任何/ 线性/ 精确/ 码/ 都/ 可/ 转化/ 为/ 系统/ 码/ [/ 21/ ]/ ./ 因此/ ,/ 用于/ 存储系统/ 的/ 纠/ 删码/ 也/ 几乎/ 全部都是/ 精确/ 码/ ./ 在/ 没有/ 特殊/ 说明/ 的/ 情况/ 下/ ,/ 后文/ 所/ 讨论/ 的/ 纠/ 删码/ 都/ 指/ 精确/ 码/ ./ (/ 6/ )/ 校验/ 块/ (/ ParityBlock/ )/ ./ 系统/ 码/ 产生/ 的/ 所有/ 编码/ 块/ 中除/ 数据/ 块/ 以外/ 的/ 部分/ 称为/ 校验/ 块/ ./ 在/ 不/ 需要/ 区分/ 数据/ 块/ 和校验/ 块/ 时/ ,/ 后文/ 统一/ 用/ 编码/ 块/ 或/ 块/ 来/ 指代/ ./ (/ 7/ )/ 容错/ 能力/ (/ FaultTolerance/ )/ ./ 一个/ 条带/ 可以/ 容忍/ 的/ 最大/ 任意/ 块/ 失效/ 数目/ ./ 假设/ 一个/ 纠/ 删码/ 的/ 容错/ 能力/ 为/ t/ ,/ 则/ 此/ 纠/ 删码/ 能且/ 只能/ 在/ 任意/ 不/ 多于/ t/ 个块/ 失效/ 的/ 情况/ 下/ ,/ 恢复/ 出/ 原始数据/ ./ 一个/ (/ n/ ,/ k/ ,/ k/ )/ -/ 纠/ 删码/ 的/ 容错/ 能力/ 为/ t/ =/ n/ -/ k/ ./ (/ 8/ )/ MDS/ 码/ (/ MaximumDistanceSeparableCode/ )/ ./ 如果/ 一个/ (/ n/ ,/ k/ ,/ k/ )/ -/ 纠/ 删码/ 满足/ k/ =/ k/ ,/ 则/ 称此/ 纠/ 删码/ 满足/ MDS/ 性质/ ,/ 也/ 称/ 该/ 纠/ 删码/ 为/ MDS/ 码/ ./ MDS/ 码/ 可以/ 用/ 更/ 简单/ 的/ 二元/ 组/ (/ n/ ,/ k/ )/ 来/ 表示/ ./ MDS/ 码/ 在/ 相同/ 的/ 容错/ 能力/ 下/ 拥有/ 最小/ 的/ 存储空间/ 开销/ ./ (/ 9/ )/ 数据/ 修复/ (/ DataRepair/ )/ ./ 当/ 一个/ 条带/ 中/ 的/ 一个/ 或/ 多个/ 编码/ 块/ 因/ 节点/ 或/ 磁盘/ 失效/ 等/ 原因/ 而/ 丢失/ 时/ ,/ 利用/ 条带/ 内/ 剩余/ 的/ 编码/ 块/ 恢复/ 出/ 丢失/ 的/ 编码/ 块/ 的/ 过程/ 称为/ 数据/ 修复/ ./ 3/ 主要/ 挑战/ 采用/ 纠/ 删码/ 进行/ 数据/ 容错/ 不仅/ 可以/ 极大/ 地/ 降低/ 系统/ 的/ 存储空间/ 消耗/ ,/ 甚至/ 同时/ 还/ 可以/ 提供/ 更/ 高/ 的/ 数据/ 可靠性/ ./ 早期/ 纠/ 删码/ 主要/ 应用/ 在/ 基于/ RAID/ [/ 3/ ]/ 的/ 存储系统/ 中/ ./ 由于/ 以前/ 芯片/ 的/ 运算/ 能力/ 有限/ ,/ 早期/ 关于/ 纠删/ Page4/ 码/ 的/ 研究/ 主要/ 关注/ 其/ 计算/ 效率/ 问题/ ./ 传统/ 纠/ 删码/ 的/ 复杂性/ 主要/ 来源于/ 编解码/ 过程/ 中/ 大量/ 伽罗瓦域/ 上/ 的/ 运算/ ./ 为此/ ,/ 涌现出/ 了/ 众多/ 只/ 需/ 进行/ 异或/ 运算/ 的/ 纠/ 删码/ ,/ 极大/ 降低/ 了/ 计算/ 的/ 复杂度/ ./ 该类/ 纠/ 删码/ 包括/ 由/ RS/ 码/ [/ 17/ ]/ 优化/ 而来/ 的/ 柯西/ RS/ 码/ [/ 22/ ]/ ,/ 用于/ RAID/ 的/ EVENODD/ 码/ [/ 23/ ]/ 、/ RDP/ (/ Row/ -/ DiagonalParity/ )/ 码/ [/ 24/ ]/ 、/ X/ -/ Code/ [/ 25/ ]/ 、/ Liberation/ 码/ [/ 26/ ]/ 、/ Liber8Tion/ 码/ [/ 27/ ]/ 、/ STAR/ 码/ [/ 28/ ]/ 、/ F/ -/ Code/ [/ 29/ ]/ 、/ P/ -/ Code/ [/ 30/ ]/ 、/ T/ -/ Code/ [/ 31/ ]/ 和/ 一般化/ 的/ X/ -/ Code/ [/ 32/ ]/ 等/ ./ 纠/ 删码/ 容错/ 技术/ 在/ 大规模/ 分布式/ 存储/ 中/ 面临/ 的/ 主要/ 挑战/ 已/ 不再/ 是/ 其/ 较/ 高/ 的/ 运算/ 复杂度/ ,/ 而是/ 其较/ 高/ 的/ 网络资源/ 消耗/ ,/ 以及/ 实现/ 上/ 的/ 复杂性/ ./ 一方面/ ,/ 随着/ CPU/ 运算/ 能力/ 的/ 飞速发展/ ,/ 现在/ 普通/ 商用/ 服务器/ 的/ 运算/ 能力/ 对于/ 大部分/ 存储系统/ 已经/ 严重/ 过剩/ ./ 例如/ ,/ 百度/ 云盘/ 的/ 云端/ 存储系统/ Atlas/ 甚至/ 由于/ 普通/ 处理器/ 利用率/ 过低/ 而/ 采用/ 了/ ARM/ 处理器/ [/ 33/ ]/ ./ 另一方面/ ,/ 与/ RAID/ 的/ 集中式/ 操作/ 不同/ ,/ 分布式系统/ 的/ 分布/ 特性/ 使得/ 纠/ 删码/ 容错/ 的/ 相关/ 操作/ 需要/ 多个/ 节点/ 相互协作/ ,/ 不可避免/ 地/ 带来/ 大量/ 的/ 数据传输/ ,/ 占用/ 较/ 多/ 的/ 网络资源/ ./ 一直/ 以来/ ,/ 网络/ 都/ 是/ 分布式系统/ 中/ 的/ 稀缺资源/ ,/ 往往/ 是/ 整个/ 系统/ 性能/ 的/ 瓶颈/ 所在/ ./ 此外/ ,/ 分布式系统/ 的/ 特性/ 也/ 增加/ 了/ 实现/ 的/ 难度/ ./ 具体来说/ ,/ 大规模/ 分布式/ 存储系统/ 中/ 纠/ 删码/ 容错/ 技术/ 面临/ 的/ 挑战/ 主要/ 表现/ 在/ 编码/ 实现/ 、/ 数据/ 修复/ 和/ 数据/ 更新/ 等/ 3/ 个/ 方面/ ./ 3.1/ 编码/ 实现/ 编码/ 实现/ 是/ 指/ 根据/ 给定/ 的/ 纠/ 删码/ 对/ 数据/ 块/ 进行/ 运算/ 、/ 得到/ 校验/ 块/ 并/ 将/ 数据/ 块/ 和/ 相应/ 的/ 校验/ 块/ 分散/ 到/ 不同/ 存储/ 节点/ 上/ 的/ 过程/ ./ 其/ 主要/ 挑战/ 在于/ 如何/ 在/ 编码/ 实现/ 完全/ 完成/ 之前/ 保证数据/ 的/ 可靠性/ ./ 一方面/ ,/ 由于/ 存储系统/ 一般/ 以/ 大小/ 固定/ 的/ 块/ 为/ 基本/ 管理/ 单位/ ,/ 数据/ 产生/ 只有/ 累积到/ 一定量/ 才能/ 启动/ 编码/ 实现/ ;/ 另一方面/ ,/ 由于/ 编码/ 实现/ 的/ 复杂性/ ,/ 其/ 编码/ 过程/ 需要/ 花费/ 一定/ 的/ 时间/ ./ 因此/ ,/ 在/ 将/ 数据/ 块/ 和校验/ 块/ 分散/ 到/ 相应/ 的/ 存储/ 节点/ 之前/ 都/ 有/ 可能/ 发生/ 数据/ 失效/ ,/ 造成/ 数据/ 丢失/ ./ 此外/ ,/ 编码/ 过程/ 中/ 数据/ 块/ 的/ 读取/ 和校验/ 块/ 的/ 分发/ 也/ 会/ 产生/ 大量/ 的/ 数据传输/ ,/ 占用/ 网络资源/ ./ 总之/ ,/ 编码/ 实现/ 不仅/ 要/ 考虑/ 数据/ 可靠性/ 还要/ 尽量/ 降低/ 数据传输/ 量/ ./ 3.2/ 数据/ 修复/ 数据/ 修复/ 的/ 挑战/ 主要/ 在于/ 如何/ 降低/ 数据/ 读取/ 量/ 和/ 数据传输/ 量/ ./ 与/ 多/ 副本/ 容错/ 技术/ 只/ 需/ 重新/ 拷贝/ 一个/ 副本/ 不同/ ,/ 采用/ 纠/ 删码/ 容错/ 的/ 分布式/ 存储系统/ 进行/ 数据/ 修复/ 时/ ,/ 需要/ 从/ 多个/ 存储/ 节点/ 下载/ 数据/ 并/ 对/ 这些/ 数据/ 进行/ 编解码/ 运算/ ./ 对于/ 大部分/ 纠/ 删码/ 来说/ ,/ 这些/ 运算/ 是/ 如式/ (/ 2/ )/ 所示/ 的/ 线性组合/ ./ 一个/ 编码/ 块/ 失效/ ,/ 需要/ 使用/ 多个/ 其它/ 编码/ 块/ 进行/ 修复/ ,/ 过程/ 中/ 需要/ 读取/ 并/ 传输/ 大量/ 的/ 数据/ ./ 这/ 不仅/ 会/ 影响/ 数据/ 修复/ 的/ 速度/ 而且/ 会/ 对/ 数据/ 访问/ 效率/ 产生/ 明显/ 的/ 影响/ ./ 3.3/ 数据/ 更新/ 数据/ 更新/ 的/ 挑战/ 主要/ 在于/ 如何/ 降低/ 数据/ 读写/ 量/ 和/ 数据传输/ 量/ ./ 在/ 基于/ 多/ 副本/ 容错/ 的/ 数据/ 更新/ 中/ ,/ 仅/ 需用/ 新/ 的/ 数据/ 依次/ 覆盖/ 各个/ 副本/ 中/ 的/ 原/ 数据/ 即可/ ./ 在/ 基于/ 纠/ 删码/ 容错/ 的/ 数据/ 更新/ 中/ ,/ 需要/ 先/ 将/ 数据/ 块/ 中/ 校验/ 块/ 中/ 更新/ 部分/ 的/ 原/ 数据/ 读取/ 出来/ ,/ 重新/ 计算/ 相应/ 的/ 校验/ 数据/ ,/ 然后/ 再/ 写入/ ./ 在/ 纠/ 删码/ 容错/ 中/ 一个/ 数据/ 块/ 关联/ 的/ 校验/ 块/ 较/ 多/ ,/ 需要/ 更新/ 的/ 编码/ 块/ 也/ 更/ 多/ ,/ 这/ 必将/ 产生/ 较大/ 的/ 数据/ 读写/ 量/ 和/ 数据传输/ 量/ ,/ 直接/ 影响/ 到/ 数据/ 更新/ 即/ 覆盖/ 写/ 操作/ 的/ 性能/ ./ 此外/ ,/ 更新过程/ 中/ 节点/ 也/ 可能/ 失效/ ,/ 造成/ 部分/ 数据/ 已/ 更新/ 而/ 其余部分/ 未/ 更新/ ,/ 从而/ 导致/ 数据/ 不/ 一致/ ./ 因此/ ,/ 保证数据/ 的/ 一致性/ 也/ 是/ 纠/ 删码/ 容错/ 技术/ 中/ 数据/ 更新/ 的/ 主要/ 挑战/ 之一/ ./ 4/ 编码/ 实现/ 技术/ 研究/ 在/ 采用/ 纠/ 删码/ 容错/ 的/ 分布/ 存储系统/ 中/ ,/ 需要/ 对/ 新/ 写入/ 的/ 数据/ 进行/ 编码/ ,/ 为了/ 保证数据/ 可用性/ ,/ 通常/ 先/ 利用/ 复制技术/ 保存/ 新/ 数据/ ,/ 等到/ 编码/ 完成/ 后/ 再/ 将/ 多余/ 的/ 副本/ 删除/ ./ 当前/ ,/ 采用/ 这种/ 方式/ 的/ 分布/ 存储系统/ 包括/ Facebook/ 公司/ 的/ HDFS/ -/ RAID/ [/ 34/ ]/ 、/ 微软/ 的/ 云/ 存储系统/ WAS/ (/ WindowsAzureStorage/ )/ [/ 35/ ]/ 、/ 百度/ 云盘/ 的/ 存储系统/ Atlas/ [/ 33/ ]/ 和/ 阿里/ 的/ TFS/ (/ TaobaoFileSystem/ )/ ①/ 等/ ./ 具体/ 的/ 编码/ 实现/ 方法/ 包括/ 集中式/ 编码/ 实现/ 方法/ 和/ 分布式/ 编码/ 实现/ 方法/ ./ 4.1/ 集中式/ 编码/ 实现/ 方法/ 目前/ ,/ 实际/ 系统/ 中/ 大多/ 采用/ 集中式/ 编码/ 实现/ 方法/ ./ 如图/ 1/ 所示/ ,/ 在/ 集中式/ 编码/ 实现/ 方法/ 中/ ,/ 一个/ 条带/ 的/ 所有/ 编码/ 工作/ 都/ 由/ 一个/ 编码/ 节点/ 来/ 单独/ 完成/ ./ 编码/ 节点/ 从/ 存储/ 节点/ 下载/ 条带/ 中/ 的/ 所有/ 数据/ 块/ ,/ 编码/ 计算/ 校验/ 块/ ,/ 然后/ 再/ 把/ 校验/ 块/ 发送到/ 其它/ 存储/ 节点/ 上/ ./ 在/ 具体/ 实现/ 中/ ,/ 可以/ 从/ 存储/ 数据/ 块/ 的/ 节点/ 中/ 选择/ 一个/ 作为/ 编码/ 节点/ ,/ 以便/ 减少/ 传输数据/ 量/ ,/ 降低/ 网络资源/ 开销/ ./ ①/ http/ :/ // // tfs/ ./ taobao/ ./ org/ // Page5HDFS/ -/ RAID/ [/ 34/ ]/ 、/ Atlas/ [/ 33/ ]/ 、/ WAS/ [/ 35/ ]/ 和/ TFS/ 等/ 分布式/ 存储系统/ 均/ 采用/ 集中式/ 编码/ 实现/ 方法/ ./ 其中/ ,/ HDFS/ -/ RAID/ 和/ TFS/ 在/ 编码/ 实现/ 时/ ,/ 编码/ 节点/ 从/ 多个/ 数据/ 节点/ 下载/ 数据/ 块/ 进行/ 编码/ ;/ Atlas/ 和/ WAS/ 在/ 编码/ 实现/ 时/ ,/ 将/ 存储/ 在/ 一个/ 数据/ 节点/ 上/ 的/ 大/ 数据/ 块/ 划分/ 成较/ 小/ 的/ 块/ 进行/ 编码/ ,/ 然后/ 把/ 划分/ 的/ 数据/ 块/ 和/ 编码/ 产生/ 的/ 校验/ 块/ 分发/ 到/ 不同/ 的/ 数据/ 节点/ 上/ ./ Atlas/ 和/ WAS/ 在/ 编码/ 之前/ 不/ 需要/ 下载/ 数据/ ,/ 但是/ 其/ 在/ 编码/ 完成/ 后/ 需要/ 发送/ 大量/ 的/ 数据/ ./ 总体而言/ ,/ Atlas/ 和/ WAS/ 的/ 数据/ 读取/ 量/ 和/ 传输/ 量/ 与/ HDFS/ -/ RAID/ 和/ TFS/ 相等/ ./ 但是/ ,/ Atlas/ 和/ WAS/ 的/ 数据/ 写入/ 量/ 远高于/ HDFS/ -/ RAID/ 和/ TFS/ ./ 以/ 常见/ 的/ (/ 14/ ,/ 10/ )/ -/ RS/ 码为例/ ,/ Atlas/ 和/ WAS/ 的/ 数据/ 写入/ 量/ 是/ HDFS/ -/ RAID/ 和/ TFS/ 的/ 3.25/ 倍/ ./ 集中式/ 编码/ 实现/ 方法/ 的/ 优点/ 是/ 简单/ 易于/ 实现/ ,/ 其/ 缺点/ 是/ 存在/ 较为/ 严重/ 的/ 性能/ 瓶颈/ ./ 编码/ 节点/ 负责/ 编码/ 计算/ 和/ 分发/ 编码/ 块/ ,/ 易/ 产生/ 计算/ 瓶颈/ 和/ 网络/ 传输/ 瓶颈/ ,/ 从而/ 影响/ 编码/ 实现/ 效率/ ./ 4.2/ 分布式/ 编码/ 实现/ 方法/ 为了/ 解决/ 集中式/ 编码/ 实现/ 方法/ 的/ 性能/ 瓶颈/ 问题/ ,/ Pamies/ -/ Juarez/ 等/ 人/ [/ 36/ ]/ 针对/ RapidRaid/ 码/ 的/ 特点/ ,/ 提出/ 了/ 基于/ 流水线/ 的/ 分布式/ 编码/ 实现/ 方法/ ./ RapidRaid/ 码是/ Pamies/ -/ Juarez/ 等/ 人/ 设计/ 的/ 一种/ 非/ 精确/ 码/ ./ 该/ 方法/ 将/ RapidRaid/ 码/ 的/ 编码/ 计算/ 分解/ 为/ 可以/ 在/ 不同/ 节点/ 上/ 并行执行/ 的/ 子/ 任务/ ,/ 将/ 编码/ 实现/ 的/ 网络/ 传输/ 负载/ 和/ 计算/ 负载/ 均衡/ 分布/ 到/ 多个/ 节点/ 上/ ,/ 采用/ 流水线/ 方式/ 进行/ 编码/ 计算/ ./ 如图/ 2/ 所示/ ,/ 该/ 编码方法/ 将/ 参与/ 编码/ 实现/ 的/ 节点/ 构成/ 一条/ 流水线/ ,/ 节点/ i/ 接收/ 前/ 一个/ 节点/ i/ -/ 1/ 发送/ 的/ 数据/ xi/ -/ 1/ ,/ i/ ,/ 将/ xi/ -/ 1/ ,/ i/ 和/ 自己/ 所/ 存储/ 的/ 数据/ 块/ oi/ 进行/ 组合/ ,/ 分别/ 生成/ 自己/ 最终/ 需要/ 存储/ 的/ 编码/ 块/ ci/ 和/ 供/ 节点/ i/ +/ 1/ 编码/ 使用/ 的/ 数据/ xi/ ,/ i/ +/ 1/ ,/ 并/ 将/ xi/ ,/ i/ +/ 1/ 发送/ 出去/ ./ 针对/ RapidRaid/ 码/ 的/ 分布式/ 编码/ 实现/ 方法/ 解决/ 了/ 集中式/ 编码/ 的/ 负载/ 不/ 均衡/ 问题/ ,/ 但是/ ,/ 该/ 方法/ 也/ 存在/ 许多/ 不足之处/ :/ (/ 1/ )/ 该/ 方法/ 只/ 适用/ 于/ Pamies/ -/ Juarez/ 等/ 人/ 提出/ 的/ RapidRAID/ 码/ [/ 36/ ]/ ,/ 通用性/ 较差/ ;/ 图/ 2RapidRAID/ 码/ 的/ 分布式/ 编码/ 实现/ 方法/ [/ 36/ ]/ (/ 2/ )/ RapidRAID/ 既/ 不是/ 系统/ 码/ ,/ 在/ 大多数/ 情况/ 下/ 也/ 不是/ MDS/ 码/ ,/ 数据/ 读取/ 性能/ 较差/ 且/ 空间/ 利用率/ 不高/ ;/ (/ 3/ )/ 与/ 集中式/ 编码/ 实现/ 方法/ 相比/ ,/ 该/ 方法/ 没有/ 减少/ 编码/ 实现/ 过程/ 中/ 的/ 计算/ 量/ 或/ 传输/ 的/ 数据量/ ,/ 并且/ 将/ 读取/ 的/ 数据量/ 提高/ 了/ 1/ 倍/ ./ 为了/ 减少/ 编码/ 实现/ 过程/ 中/ 的/ 数据传输/ 量/ ,/ Pamies/ -/ Juarez/ 等/ 人/ [/ 37/ ]/ 进一步/ 提出/ 了/ 一种/ 新/ 的/ 分布式/ 编码/ 实现/ 方法/ ./ 该/ 方法/ 采用/ 流水线/ 思想/ ,/ 只有/ 最终/ 存储/ 校验/ 块/ 的/ 节点/ 参与/ 编码/ 实现/ ,/ 且/ 流水线/ 可能/ 需要/ 循环/ 多次/ ;/ 需要/ 特殊/ 的/ 数据/ 块/ 放置/ 策略/ 将/ 多余/ 的/ 数据/ 块/ 均匀/ 放置/ 到/ 最终/ 存储/ 校验/ 块/ 的/ 节点/ 上/ ,/ 以/ 使/ 参与/ 编码/ 实现/ 的/ 节点/ 上/ 有/ 多个/ 数据/ 块/ ./ 文献/ [/ 37/ ]/ 中/ 的/ 方法/ 虽然/ 在/ 一定/ 程度/ 上/ 降低/ 了/ 编码/ 实现/ 过程/ 中/ 传输/ 的/ 数据量/ ,/ 但是/ 它/ 需要/ 根据/ 要/ 产生/ 的/ 校验/ 块/ 数目/ 和/ 数据/ 块/ 的/ 分布/ 情况/ 来/ 构造/ 相应/ 的/ 纠/ 删码/ ./ 此外/ ,/ 该/ 方法/ 需要/ 参与/ 编码/ 实现/ 的/ 节点/ 上/ 有/ 较/ 多/ 的/ 数据/ 块/ ./ 否则/ ,/ 流水线/ 需要/ 循环/ 多次/ 才能/ 达到/ 较/ 高/ 的/ 可靠性/ ,/ 从而/ 增加/ 了/ 编码/ 实现/ 过程/ 中/ 的/ 计算/ 量/ ./ 例如/ ,/ 为了/ 获得/ (/ 10/ ,/ 6/ )/ -/ MDS/ 码/ ,/ 当/ 参与/ 编码/ 实现/ 的/ 4/ 个/ 节点/ 上/ 有/ 12/ 个/ 数据/ 块/ 时/ ,/ 流水线/ 只/ 需/ 循环/ 1/ 次/ ;/ 而/ 当/ 参与/ 编码/ 实现/ 的/ 4/ 个/ 节点/ 上/ 只有/ 6/ 个/ 数据/ 块/ 时/ ,/ 流水线/ 则/ 需要/ 循环/ 2/ 次/ ./ 循环/ 2/ 次时/ ,/ 该/ 方法/ 虽然/ 可/ 将/ 网络/ 传输/ 量减少/ 约/ 22/ %/ ,/ 但是/ 会/ 增加/ 约/ 79/ %/ 的/ 乘法/ 运算/ 和/ 60/ %/ 的/ 加法/ 运算/ ./ 4.3/ 总结/ 总体/ 来说/ ,/ 相对/ 于/ 集中式/ 编码/ 实现/ 方法/ ,/ 现有/ 分布式/ 编码/ 实现/ 方法/ 可以/ 提升/ 编码/ 实现/ 的/ 性能/ ,/ 但/ 提升/ 效果/ 较为/ 有限/ ./ 一方面/ ,/ 集中式/ 编码/ 虽然/ 具有/ 一定/ 的/ 性能/ 瓶颈/ ,/ 但是/ 实际上/ 其/ 性能/ 瓶颈/ 并/ 没有/ 那么/ 严重/ ./ 因为/ 这里/ 的/ 集中/ 仅指/ 一个/ 条带/ 的/ 编码/ 工作/ ,/ 不同/ 条带/ 的/ 编码/ 仍然/ 可以/ 由/ 不同/ 的/ 节点/ 并行/ 地/ 完成/ ,/ 在/ Page6/ 并行度/ 较/ 高时/ ,/ 各个/ 节点/ 负载/ 相差/ 得/ 并不多/ ./ 另一方面/ ,/ 现有/ 分布式/ 编码/ 实现/ 方法/ 一般/ 对/ 纠/ 删码/ 或/ 数据/ 放置/ 等/ 有/ 严格要求/ ,/ 并且/ 数据传输/ 方面/ 的/ 提升/ 往往/ 以/ 更/ 多/ 的/ 数据/ 读取/ 量/ 或/ 计算/ 量/ 为/ 代价/ ./ 5/ 低/ 修复/ 开销/ 纠/ 删码/ 研究/ 修复/ 开销/ 是/ 由/ 纠/ 删码/ 的/ 特性/ 决定/ 的/ ./ 因此/ ,/ 设计/ 新型/ 纠/ 删码/ 是/ 从根本上/ 降低/ 修复/ 开销/ 的/ 重要途径/ ./ 根据/ 不同/ 的/ 编码/ 结构/ ,/ 低/ 修复/ 开销/ 纠/ 删码/ 可以/ 分为/ 分组码/ 和/ 再生/ 码/ 两大类/ ./ 5.1/ 分组码/ 传统/ MDS/ 码/ (/ 如/ RS/ 码/ [/ 17/ ]/ )/ 数据/ 修复/ 开销/ 大/ 的/ 根本原因/ 是/ 其/ 条带/ 内/ 的/ 每个/ 校验/ 块/ 都/ 与/ 所有/ 数据/ 块/ 相关/ ,/ 导致/ 任何/ 一个/ 块/ 失效/ 都/ 需要/ 下载/ 其它/ k/ 个块/ 才能/ 修复/ ./ 因此/ ,/ 如果/ 将/ 一个/ 条带/ 内/ 的/ 数据/ 块/ 分组/ ,/ 利用/ 组内/ 的/ 数据/ 块/ 产生/ 局部/ 校验/ 块/ ,/ 就/ 可以/ 降低/ 数据/ 修复/ 时/ 需要/ 下载/ 的/ 数据量/ ./ 以该/ 思想/ 为/ 基础/ 构造/ 的/ 纠/ 删码/ 称为/ 分组码/ ./ 根据/ 不同/ 的/ 分组/ 方法/ ,/ 分组码/ 可/ 进一步/ 分为/ 层次/ 分组码/ 和/ 交叉分组/ 码/ 两类/ ./ 5.1/ ./ 1/ 层次/ 分组码/ 层次/ 分组码/ 的/ 分组/ 呈现/ 明显/ 的/ 层次/ ./ 首先/ 将/ 一个/ 条带/ 内/ 的/ 数据/ 块/ 分成/ 少数几个/ 较大/ 且/ 互不/ 重叠/ 的/ 组/ ,/ 然后/ 每个/ 组/ 再进一步/ 分成/ 几个/ 若干/ 互不/ 重叠/ 的/ 子组/ ./ 以此类推/ ,/ 可以/ 根据/ 需要/ 划分/ 多个/ 层次/ ./ 最后/ ,/ 每组/ 各/ 产生/ 一个/ 只/ 与/ 组内/ 数据/ 块/ 相关/ 的/ 局部/ 校验/ 块/ ,/ 整个/ 条带/ 再/ 产生/ 若干/ 与/ 条带/ 内/ 所有/ 数据/ 块/ 相关/ 的/ 全局/ 校验/ 块/ ./ 这样/ 大部分/ 数据/ 失效/ 就/ 可以/ 在/ 组内/ 进行/ 修复/ ,/ 从而/ 降低成本/ ./ 最/ 基本/ 的/ 层次/ 分组码/ 是/ 两层/ 分组码/ ./ 图/ 3/ 显示/ 了/ 微软/ 云/ 存储系统/ WAS/ [/ 35/ ]/ 中/ 采用/ 的/ LRC/ 码/ [/ 20/ ]/ 的/ 一个/ 实例/ LRC/ (/ 8/ ,/ 2/ ,/ 2/ )/ ./ LRC/ (/ 8/ ,/ 2/ ,/ 2/ )/ 的/ 一个/ 条带/ 包含/ 8/ 个/ 数据/ 块/ ,/ 平均/ 分成/ 两个/ 组/ ,/ 每组/ 各/ 产生/ 1/ 个/ 局部/ 校验/ 块/ ,/ 整个/ 条带/ 再/ 产生/ 2/ 个/ 全局/ 校验/ 块/ ./ 可见/ ,/ 当组内/ 只有/ 1/ 个块/ 失效/ 时/ ,/ 只/ 需/ 使用/ 组内/ 的/ 其它/ 4/ 个块/ 即可/ 进行/ 修复/ ./ 只有/ 在/ 一个组/ 内有/ 多个/ 块/ 失效/ 时/ ,/ 才/ 需要/ 利用/ 组外/ 的/ 块/ 来/ 修复/ ./ 考虑/ 到/ 超过/ 98/ %/ 的/ 失效/ 情况/ 下/ ,/ 条带/ 内/ 都/ 只有/ 一个/ 块/ 失效/ [/ 38/ ]/ ,/ LRC/ 可以/ 有效/ 降低/ 数据/ 修复/ 的/ 成本/ ./ 在/ 组内/ 有/ 多个/ 块/ 失效/ 时/ ,/ 两层/ 分组码/ 仍然/ 需要/ 在/ 全局/ 范围/ 内/ 进行/ 修复/ ./ 为此/ ,/ 可以/ 对/ 数据/ 块/ 进行/ 更/ 多层次/ 的/ 分组/ ,/ 高层/ 的/ 组/ 包含/ 若干/ 低层/ 较/ 小/ 的/ 组/ ./ Pyramid/ 码/ [/ 39/ ]/ 就是/ 根据/ 该/ 思想/ 构造/ 的/ 多层次/ 分组码/ ./ 随着/ 分组/ 层次/ 的/ 增多/ ,/ 多层/ 分组码/ 的/ 平均/ 修复/ 开销/ 会/ 降低/ ,/ 但/ 其/ 存储空间/ 开销/ 会/ 增大/ ./ 因此/ ,/ 多层/ 分组码/ 可以/ 在/ 修复/ 开销/ 与/ 存储空间/ 开销/ 之间/ 灵活/ 地/ 进行/ 权衡/ ./ 除了/ LRC/ 码/ [/ 20/ ]/ 和/ Pyramid/ 码/ [/ 39/ ]/ ,/ 层次/ 分组码/ 还有/ Facebook/ 采用/ 的/ LRCs/ 码/ [/ 11/ ]/ 和/ EXPyramid/ 码/ [/ 40/ ]/ ./ 与/ LRC/ 码/ 相比/ ,/ LRCs/ 码/ 的/ 主要/ 不同之处/ 是/ 其/ 对/ 所有/ 全局/ 校验/ 块/ 再/ 产生/ 一个/ 局部/ 校验/ 块/ ,/ 降低/ 了/ 全局/ 校验/ 块/ 的/ 修复/ 开销/ ./ EXPyramid/ 码/ 将/ 两层/ Pyramid/ 码/ 的/ 数据/ 块/ 改为/ 阵列/ 结构/ ,/ 在/ 横向/ 和/ 纵向/ 都/ 产生/ 局部/ 校验/ 块/ ,/ 进一步/ 降低/ 了/ 数据/ 修复/ 的/ 成本/ ./ 5.1/ ./ 2/ 交叉分组/ 码/ 交叉分组/ 码/ 与/ 层次/ 分组码/ 的/ 不同之处/ 有/ 两点/ :/ (/ 1/ )/ 交叉分组/ 码中/ 各组/ 包含/ 的/ 数据/ 块/ 数目/ 基本相同/ ,/ 且/ 各组/ 包含/ 的/ 数据/ 块/ 有/ 一部分/ 相同/ ,/ 而/ 层次/ 分组码/ 不同/ 层级/ 的/ 分组/ 大小/ 差别/ 很大/ ,/ 每个/ 高层/ 的/ 分组会/ 包含/ 若干/ 较/ 低层次/ 的/ 组/ ;/ (/ 2/ )/ 交叉分组/ 码/ 一般/ 不/ 存在/ 全局/ 校验/ 块/ ./ 图/ 4/ 是/ Miyamae/ 等/ 人/ [/ 41/ ]/ 提出/ 的/ 交叉分组/ 码/ SHEC/ (/ ShingledErasureCode/ )/ 的/ 一个/ 实例/ SHEC/ (/ 10/ ,/ 6/ ,/ 5/ )/ ./ SHEC/ 的/ 基本/ 思想/ 是/ 使/ 各个/ 分组/ 像/ 屋顶/ 的/ 瓦片/ 一样/ 相互/ 重叠/ ,/ 从而/ 在/ 多个/ 块/ 失效/ 时/ 可以/ 利用/ 较少/ 的/ 组/ 进行/ 局部/ 修复/ ./ 图/ 4/ 中/ 的/ SHEC/ (/ 10/ ,/ 6/ ,/ 5/ )/ 将/ 10/ 个/ 数据/ 块/ 分为/ 相互/ 重叠/ 的/ 6/ 个组/ ,/ 每组/ 包含/ 5/ 个/ 数据/ 块/ ,/ 除了/ 第/ 3/ 组和/ 第/ 4/ 组/ ,/ 其它/ 任意/ 两组/ 之间/ 重叠/ 3/ 个/ 数据/ 块/ ,/ 每组/ 的/ 校验/ 块/ 均/ 通过/ 组内/ 的/ 5/ 个/ 数据/ 块/ 运算/ 产生/ ./ 具体/ 的/ 编码/ 过程/ 如式/ (/ 3/ )/ 所示/ :/ p1/ =/ α/ 1/ ,/ 1o1/ +/ α/ 1/ ,/ 2o2/ +/ α/ 1/ ,/ 3o3/ +/ α/ 1/ ,/ 4o4/ +/ α/ 1/ ,/ 5o5/ 烄/ p2/ =/ α/ 2/ ,/ 1o3/ +/ α/ 2/ ,/ 2o4/ +/ α/ 2/ ,/ 3o5/ +/ α/ 2/ ,/ 4o6/ +/ α/ 2/ ,/ 5o7p3/ =/ α/ 3/ ,/ 1o5/ +/ α/ 3/ ,/ 2o6/ +/ α/ 3/ ,/ 3o7/ +/ α/ 3/ ,/ 4o8/ +/ α/ 3/ ,/ 5o9/ 烅/ p4/ =/ α/ 4/ ,/ 1o6/ +/ α/ 4/ ,/ 2o7/ +/ α/ 4/ ,/ 3o8/ +/ α/ 4/ ,/ 4o9/ +/ α/ 4/ ,/ 5o10p5/ =/ α/ 5/ ,/ 1o8/ +/ α/ 5/ ,/ 2o9/ +/ α/ 5/ ,/ 3o10/ +/ α/ 5/ ,/ 4o1/ +/ α/ 5/ ,/ 5o2/ 烆/ p6/ =/ α/ 6/ ,/ 1o10/ +/ α/ 6/ ,/ 2o1/ +/ α/ 6/ ,/ 3o2/ +/ α/ 6/ ,/ 4o3/ +/ α/ 6/ ,/ 5o/ 在/ 此/ 实例/ 中/ ,/ 单个/ 块/ 的/ 失效/ 修复/ 只/ 需/ 下载/ 5/ 个块/ ;/ 两个/ 块/ 的/ 失效/ 修复/ 只/ 需/ 下载/ 6/ 或/ 7/ 个块/ ./ 例如/ ,/ 当图/ 2/ 中/ 的/ o6/ 和/ o9/ 失效/ 时/ ,/ 根据/ 式/ (/ 3/ )/ 中/ 的/ 第/ 3/ 和/ 第/ 4/ 个/ 等式/ ,/ 使用/ o5/ ,/ o7/ ,/ o8/ ,/ o10/ ,/ p3/ 和/ p4/ 这/ 6/ 个块/ 即可/ 修复/ ./ 可见/ ,/ SHEC/ 避免/ 了/ 下载/ 数据量/ 随着/ 失效/ 块数/ 增加/ 而/ 急剧/ 增长/ 的/ 情况/ ./ Page7/ 图/ 4SHEC/ (/ 10/ ,/ 6/ ,/ 5/ )/ 的/ 构造/ 和/ 修复/ 示意图/ [/ 41/ ]/ 交叉分组/ 码/ 还有/ WEAVER/ 码/ [/ 42/ ]/ 、/ GRID/ 码/ [/ 43/ ]/ 和/ Hover/ 码/ [/ 44/ ]/ 等/ ./ WEAVER/ 码先/ 限定/ 所有/ 数据/ 块/ 的/ 出度/ (/ 一个/ 数据/ 块/ 关联/ 的/ 校验/ 块/ 个数/ )/ 和校验/ 块/ 的/ 入度/ (/ 一个/ 校验/ 块/ 关联/ 的/ 数据/ 块/ 个数/ )/ ,/ 然后/ 通过/ 搜索/ 的/ 方法/ 找出/ 最优/ 的/ 组合/ 和/ 放置/ 方法/ ,/ 使/ 容错性/ 达到/ 最高/ ./ WEAVER/ 码/ 在/ 固定/ 数据/ 修复/ 开销/ 前提/ 下/ 可/ 构造/ 出/ 容错/ 能力/ 高达/ 12/ 的/ 实例/ ./ 但是/ WEAVER/ 码/ 的/ 冗余度/ 较/ 高/ ,/ 空间/ 利用率/ 始终/ 不/ 超高/ 50/ %/ ./ 如果/ 想要/ 同时/ 维持/ 较/ 低/ 的/ 修复/ 开销/ 和/ 较/ 高/ 的/ 容错/ 能力/ ,/ 甚至/ 需要/ 3/ 倍/ 或/ 4/ 倍/ 的/ 存储空间/ 开销/ ./ GRID/ 码/ 和/ Hover/ 码/ 都/ 是/ 纵横/ 相结合/ 的/ 阵列/ 码/ ,/ 可以/ 达到/ 较/ 高/ 的/ 容错/ 能力/ ,/ 同时/ 也/ 具有/ 较/ 高/ 的/ 存储空间/ 利用率/ ./ 5.2/ 再生/ 码/ 再生/ 码/ (/ RegeneratingCodes/ )/ [/ 45/ -/ 46/ ]/ 是/ 一种/ 基于/ 网络/ 编码/ 思想/ [/ 47/ ]/ 设计/ 的/ 纠/ 删码/ ,/ 由/ Dimakis/ 等/ 人/ [/ 48/ ]/ 在/ 2007/ 年/ 首次/ 提出/ ./ 其/ 基本/ 思想/ 是/ 通过/ 适当/ 增加/ 冗余/ 并且/ 使/ 新生/ 节点/ 从/ 尽量/ 多/ 的/ 节点/ 下载/ 数据/ 来/ 降低/ 修复/ 需要/ 下载/ 的/ 总/ 数据量/ ./ 再生/ 码/ 具有/ 两个/ 明显/ 的/ 特点/ :/ (/ 1/ )/ 再生/ 码/ 的/ 数据/ 块/ 和校验/ 块/ 都/ 包含/ 相同/ 数量/ 的/ 子块/ ,/ 编码/ 与/ 修复/ 时/ 以子/ 块/ 为/ 基本/ 单位/ ,/ 子块/ 之间/ 的/ 关系/ 也/ 更为/ 复杂/ ;/ (/ 2/ )/ 再生/ 码/ 在/ 进行/ 数据/ 修复/ 时/ ,/ 新生/ 节点/ 需要/ 从/ 尽量/ 多/ 的/ 节点/ 来/ 下载/ 数据/ ./ 再生/ 码/ 一般/ 用/ 三元组/ [/ n/ ,/ k/ ,/ d/ ]/ 来/ 表示/ ./ [/ n/ ,/ k/ ,/ d/ ]/ -/ 再生/ 码/ 的/ 一个/ 条带/ 包含/ n/ 个/ 编码/ 块/ ,/ 可以/ 容忍/ 任意/ n/ -/ k/ 个块/ 失效/ ,/ 进行/ 数据/ 修复/ 时/ 新生/ 节点/ 可以/ 连接/ d/ 个/ 存活/ 节点/ 下载/ 数据/ ,/ 其中/ k/ / d/ / n/ -/ 1/ ./ 另外/ ,/ 再生/ 码/ 还有/ 3/ 个/ 常用/ 的/ 辅助/ 参数/ α/ ,/ β/ 和/ B/ ,/ 分别/ 表示/ 单个/ 编码/ 块/ 包含/ 的/ 子块/ 个数/ ,/ 连接/ 到/ d/ 个/ 节点/ 进行/ 数据/ 修复/ 时/ 从/ 单个/ 节点/ 下载/ 的/ 子块/ 个数/ 和/ 一个/ 条带/ 包含/ 的/ 所有/ 数据/ 子块/ 个数/ ./ 图/ 5/ 显示/ 了/ 一个/ 简单/ 的/ [/ 4/ ,/ 2/ ,/ 3/ ]/ -/ 再生/ 码/ 及其/ 数据/ 修复过程/ ./ 在/ 该/ 再生/ 码中/ ,/ 原/ 数据/ 对象/ 被/ 分割/ 为/ 4/ 个/ 大小/ 相等/ 的/ 数据/ 子块/ o1/ ,/ 1/ ,/ o1/ ,/ 2/ ,/ o2/ ,/ 1/ 和/ o2/ ,/ 2/ ,/ 每/ 两个/ 数据/ 子块/ 合成/ 一个/ 数据/ 块/ ,/ 一个/ 校验/ 块/ 也/ 包含/ 两个/ 校验/ 子块/ ./ 校验/ 子块/ 完全/ 通过/ 异或/ 运算/ 产生/ ,/ 校验/ 子块/ 和/ 数据/ 子块/ 之间/ 的/ 关系/ 如图/ 5/ 所示/ ./ 当/ 第/ 2/ 个/ 校验/ 块/ 失效/ 时/ ,/ 先将子/ 块/ o2/ ,/ 1/ 和/ o2/ ,/ 2/ 在/ 其/ 节点/ 内/ 相异/ 或/ 得到/ o2/ ,/ 1/ +/ o2/ ,/ 2/ ,/ 然后/ o2/ ,/ 1/ +/ o2/ ,/ 2/ 与/ o1/ ,/ 2/ +/ o2/ ,/ 2/ 相异/ 或/ 恢复/ 出/ 失效/ 的/ o1/ ,/ 2/ +/ o2/ ,/ 1/ ,/ o1/ ,/ 1/ 与/ o1/ ,/ 2/ +/ o2/ ,/ 2/ 相异/ 或/ 恢复/ 出/ 失效/ 的/ o1/ ,/ 1/ +/ o1/ ,/ 2/ +/ o2/ ,/ 2/ ./ 在/ 一般/ 的/ (/ 4/ ,/ 2/ )/ -/ 纠/ 删码/ 中/ ,/ 新生/ 节点/ 需要/ 从/ 2/ 个/ 节点/ 下载/ 相当于/ 4/ 个子/ 块/ 的/ 数据/ ./ 而/ 在/ 图/ 3/ 的/ 再生/ 码中/ ,/ 新生/ 节点/ 虽然/ 连接/ 了/ 3/ 个/ 节点/ ,/ 却/ 只/ 需/ 下载/ o1/ ,/ 1/ ,/ o2/ ,/ 1/ +/ o2/ ,/ 2/ 和/ o1/ ,/ 2/ +/ o2/ ,/ 2/ 这/ 3/ 个子/ 块/ ,/ 将/ 下载量/ 减少/ 了/ 25/ %/ ./ 实际上/ ,/ Dimakis/ 等/ 人/ [/ 48/ ]/ 证明/ ,/ 如果/ 新生/ 节点/ 能够/ 从/ n/ -/ 1/ 个/ 节点/ 下载/ 数据/ ,/ 再生/ 码/ 可以/ 将/ 总体/ 数据/ 下载量/ 降低/ 高达/ 84/ %/ ./ 图/ 5/ 一个/ [/ 4/ ,/ 2/ ,/ 3/ ]/ -/ 再生/ 码/ 及其/ 数据/ 修复过程/ 再生/ 码/ 的/ 研究/ 主要/ 关注/ MBR/ 码/ (/ MinimumBandwidthRegeneratingCodes/ )/ 和/ MSR/ 码/ (/ Mini/ -/ mumStorageRegeneratingCodes/ )/ ./ MBR/ 码/ 具有/ 最低/ 的/ 数据/ 修复/ 带宽/ ,/ MSR/ 码/ 具有/ 最低/ 的/ 存储/ 开销/ ./ 再生/ 码/ 同样/ 分为/ 精确/ 码/ 和/ 非/ 精确/ 码/ ,/ 本文/ 只/ 关注/ 精确/ 再生/ 码/ ./ Dimakis/ 等/ 人/ [/ 48/ ]/ 提出/ 了/ 再生/ 码/ 的/ 概念/ 并/ 证明/ 了/ 再生/ 码/ 修复/ 带宽/ 的/ 下界/ ,/ 但是/ 没有/ 证明/ 达到/ 这个/ 下界/ 的/ 再生/ 码/ 是否/ 存在/ ,/ 也/ 没有/ 给出/ 构造/ 这种/ 再生/ 码/ 的/ 具体方法/ ./ 2009/ 年/ ,/ [/ n/ ,/ 2/ ,/ n/ -/ 1/ ]/ 的/ 精确/ MSR/ 码/ 被/ 证明/ 是/ 存在/ 的/ [/ 49/ ]/ ./ 同年/ ,/ [/ n/ ,/ k/ ,/ n/ -/ 1/ ]/ 的/ 精确/ MBR/ 码/ 被/ 构造/ 出来/ [/ 50/ ]/ ./ 2010/ 年/ ,/ [/ n/ =/ d/ +/ 1/ ,/ k/ ,/ d/ / 2k/ -/ 1/ ]/ 的/ 精确/ MSR/ 码/ 被/ 构造/ 出来/ ./ 2011/ 年/ ,/ Rashmi/ 等/ 人/ [/ 21/ ]/ 利用/ 矩阵/ 乘/ 的/ 方法/ 构造/ 出/ 了/ [/ n/ ,/ k/ ,/ d/ ]/ 的/ 精确/ MBR/ 码/ 和/ [/ n/ ,/ k/ ,/ d/ / 2k/ -/ 2/ ]/ 的/ 精确/ MSR/ 码/ ,/ 并/ 证明/ 不/ 存在/ d/ </ 2k/ -/ 2/ 的/ 精确/ MSR/ 码/ ./ 至此/ ,/ 所有/ 存在/ 的/ MBR/ 码/ 和/ MSR/ 码/ 都/ 可以/ 用/ 统一/ 的/ 方法/ 被/ 构造/ 出来/ ./ 再生/ 码/ 可以/ 极大/ 地/ 减少/ 修复/ 时/ 的/ 传输数据/ 量/ ,/ 但是/ 需要/ 读取/ 的/ 数据量/ 却/ 更/ 大/ ./ 在/ 数据/ 修复过程/ 中/ ,/ 参与/ 修复/ 的/ 节点/ 需要/ 把/ 自己/ 存储/ 的/ 所有/ 数据/ 都/ 读取/ 出来/ 进行/ 组合/ ./ 由于/ MBR/ 码/ 需要/ 存储/ 的/ 数据量/ 更/ Page8/ 大/ ,/ 所以/ 修复/ 时/ 需要/ 读取/ 的/ 数据量/ 比/ 传统/ 纠/ 删码/ 多/ ,/ 这/ 不仅/ 增加/ 了/ 系统/ 的/ 磁盘/ 负载/ ,/ 也/ 限制/ 了/ 修复/ 的/ 速率/ ./ 虽然/ MSR/ 码/ 存储/ 的/ 数据量/ 和/ 传统/ MDS/ 码/ 相等/ ,/ 但是/ 修复/ 时/ 需要/ 从/ 多于/ k/ 个/ 节点/ 下载/ 数据/ ,/ 所以/ 其/ 读取/ 的/ 数据量/ 也/ 比较/ 多/ ./ 针对/ 上述/ 问题/ ,/ 研究者/ 设计/ 了/ RBT/ (/ Repair/ -/ by/ -/ Transfer/ )/ MBR/ 码/ [/ 51/ -/ 52/ ]/ ./ RBTMBR/ 码/ 在/ 数据/ 修复/ 时/ 只/ 传输数据/ 而/ 不/ 进行/ 任何/ 数学/ 运算/ ,/ 使/ 需要/ 读取/ 的/ 数据量/ 和/ 需要/ 传输/ 的/ 数据量/ 相同/ ./ 该类/ 再生/ 码/ 最先/ 由/ Shah/ 等/ 人/ [/ 51/ ]/ 提出/ ./ 其/ 构造方法/ 是/ :/ 先/ 用/ 任何/ 一种/ (/ n/ (/ n/ -/ 1/ )/ // 2/ ,/ B/ )/ -/ MDS/ 码对/ 条带/ 中/ 的/ B/ 个/ 数据/ 子块/ 进行/ 编码/ ,/ 产生/ n/ (/ n/ -/ 1/ )/ // 2/ 个/ 编码/ 子块/ ./ 然后/ ,/ 将/ 产生/ 的/ n/ (/ n/ -/ 1/ )/ // 2/ 个/ 编码/ 子块/ 分别/ 对应/ 于/ 一个/ 包含/ n/ 个/ 顶点/ 的/ 全/ 连接/ 图/ 的/ n/ (/ n/ -/ 1/ )/ // 2/ 条边/ ,/ 该图/ 的/ 每个/ 顶点/ 分别/ 对应/ 一个/ 存储/ 节点/ ,/ 如图/ 6/ (/ a/ )/ 所示/ ,/ 每个/ 节点/ 存储/ 与其/ 对应/ 的/ 顶点/ 相连/ 的/ 所有/ 边上/ 的/ 编码/ 子块/ ,/ 如图/ 6/ (/ b/ )/ 所示/ ./ 从图/ 6/ (/ b/ )/ 可以/ 看出/ ,/ 当/ 任何/ 一个/ 节点/ 失效/ 时/ ,/ 只/ 需/ 从/ 其余/ 节点/ 分别/ 读取/ 并/ 传输/ 一个/ 编码/ 子块/ 就/ 可以/ 恢复/ 出/ 失效/ 数据/ ,/ 不/ 需要/ 进行/ 任何/ 数学计算/ ./ 图/ 7/ 包含/ 4/ 个/ 数据/ 磁盘/ 的/ RDP/ 码/ 的/ 编码/ 结构/ 与/ 数据/ 修复/ 示意图/ Wang/ 等/ 人/ [/ 55/ ]/ 和/ Xu/ 等/ 人/ [/ 56/ ]/ 分别/ 将/ Xiang/ 等/ 人/ [/ 54/ ]/ 的/ 思想/ 引入/ 到/ EVENODD/ 码/ [/ 23/ ]/ 和/ X/ -/ Code/ 码/ [/ 25/ ]/ 的/ 修复/ 中/ ,/ 通过/ 同时/ 使用/ 多个/ 校验/ 磁盘/ 来/ 降低/ 针对/ 上述/ 构造方法/ 存在/ 计算/ 复杂度/ 较/ 高/ 的/ 缺点/ ,/ Lin/ 等/ 人/ [/ 52/ ]/ 提出/ 了/ 一种/ 新/ 的/ 构造方法/ ./ 此/ 构造方法/ 也/ 采用/ Rashmi/ 等/ 人/ [/ 21/ ]/ 提出/ 的/ 矩阵/ 乘/ 框架/ ,/ 可/ 将/ 编码/ 运算/ 需要/ 的/ 伽/ 罗瓦域/ 大小/ 从/ n/ (/ n/ -/ 1/ )/ // 2/ 减小/ 为/ n/ ,/ 将/ 编码/ 运算/ 的/ 复杂度/ 从/ Ο/ (/ n4/ )/ 降低/ 到/ Ο/ (/ n3/ )/ ./ 近来/ ,/ Rashmi/ 等/ 人/ 将/ RBTMBR/ 码/ 的/ 思想/ 引入/ 到/ MSR/ 码中/ ,/ 提出/ 了/ 一种/ 近似/ Repair/ -/ by/ -/ Transfer/ 的/ MSR/ 码/ ,/ 称为/ PM/ -/ RBT/ (/ Product/ -/ MatrixRBT/ )/ 码/ [/ 53/ ]/ ./ 由于/ MSR/ 码/ 的/ 冗余度/ 较/ 低/ ,/ PM/ -/ MSR/ 码/ 只能/ 减少/ 部分/ 数据/ 修复/ 时/ 需要/ 读取/ 的/ 数据量/ ./ 此外/ ,/ 大部分/ 阵列/ 码/ 在结构上/ 也/ 具有/ 再生/ 码/ 的/ 特点/ ,/ 可以/ 通过/ 从/ 尽量/ 多/ 的/ 节点/ 下载/ 数据/ 来/ 降低/ 数据/ 修复/ 开销/ ./ 此/ 发现/ 最早/ 由/ Xiang/ 等/ 人/ [/ 54/ ]/ 提出/ ,/ 用于/ 优化/ RDP/ 码/ [/ 24/ ]/ 修复/ 时/ 下载/ 的/ 数据量/ ./ 图/ 7/ (/ a/ )/ 显示/ 了/ 包含/ 4/ 个/ 数据/ 磁盘/ 的/ RDP/ 码/ [/ 24/ ]/ 的/ 编码/ 实例/ ,/ 其中/ 磁盘/ 0/ 、/ 磁盘/ 1/ 、/ 磁盘/ 2/ 和/ 磁盘/ 3/ 为/ 数据/ 磁盘/ ,/ 磁盘/ 4/ 和/ 磁盘/ 5/ 为/ 校验/ 磁盘/ ./ 现/ 假设/ 磁盘/ 0/ 失效/ ./ 传统/ 的/ 修复/ 方法/ 是/ 使用/ 磁盘/ 1/ 、/ 磁盘/ 2/ 、/ 磁盘/ 3/ 和/ 磁盘/ 4/ 上/ 的/ 数据/ 进行/ 修复/ ,/ 即/ 分别/ 使用/ d1/ ,/ i/ ,/ d2/ ,/ i/ ,/ d3/ ,/ i/ 和/ p0/ ,/ i/ 修复/ d0/ ,/ i/ ,/ i/ =/ 0/ ,/ 1/ ,/ …/ ,/ 3/ ./ 这/ 需要/ 访问/ 4/ 个/ 磁盘/ 并/ 下载/ 16/ 个子/ 块/ ./ Xiang/ 等/ 人/ 指出/ ,/ 访问/ 5/ 个/ 磁盘/ 可以/ 减少/ 总/ 下载/ 数据量/ ./ 如图/ 7/ (/ b/ )/ 所示/ ,/ 可以/ 先用/ d1/ ,/ 0/ ,/ d2/ ,/ 0/ ,/ d3/ ,/ 0/ ,/ p0/ ,/ 0/ 和/ d1/ ,/ 1/ ,/ d2/ ,/ 1/ ,/ d3/ ,/ 1/ ,/ p0/ ,/ 1/ 分别/ 修复/ 出/ d0/ ,/ 0/ 和/ d0/ ,/ 1/ ,/ 然后/ 使用/ d2/ ,/ 0/ ,/ d1/ ,/ 1/ ,/ p0/ ,/ 3/ ,/ p1/ ,/ 2/ 和/ d3/ ,/ 0/ ,/ d2/ ,/ 1/ ,/ d1/ ,/ 2/ ,/ p1/ ,/ 3/ 分别/ 修复/ 出/ d0/ ,/ 2/ 和/ d0/ ,/ 3/ ./ 虽然/ 访问/ 了/ 5/ 个/ 磁盘/ ,/ 但是/ 只/ 需/ 下载/ d1/ ,/ 0/ ,/ d2/ ,/ 0/ ,/ d3/ ,/ 0/ ,/ p0/ ,/ 0/ ,/ d1/ ,/ 1/ ,/ d2/ ,/ 1/ ,/ d3/ ,/ 1/ ,/ p0/ ,/ 1/ ,/ p0/ ,/ 3/ ,/ d1/ ,/ 2/ 和/ p1/ ,/ 3/ 等/ 共计/ 12/ 个块/ 即可/ 完成/ 修复/ ,/ 将/ 总/ 数据/ 下载量/ 减少/ 了/ 25/ %/ ./ 这些/ 纠/ 删码/ 的/ 数据/ 修复/ 开销/ ./ Khan/ 等/ 人/ [/ 38/ ]/ 进一步/ 将/ 此/ 问题/ 一般化/ ,/ 使/ 其/ 适用/ 于/ 任何/ 基于/ 异或/ 运算/ 的/ 纠/ 删码/ ./ 基于/ 异或/ 运算/ 纠/ 删码/ 的/ 每个/ 块/ 均/ 有/ 多个/ 大/ Page9/ 小/ 相等/ 的/ 子块/ 构成/ ,/ 校验/ 子块/ 通过/ 某些/ 数据/ 子块/ 相异/ 或/ 而/ 产生/ ./ 由于/ 数据/ 子块/ 与/ 校验/ 子块/ 之间/ 的/ 关系/ 较为/ 复杂/ ,/ 在/ 一个/ 块/ 失效/ 时/ ,/ 其中/ 的/ 每个/ 子块/ 都/ 可能/ 有/ 多种/ 修复/ 方法/ ./ Khan/ 等/ 人/ [/ 38/ ]/ 提出/ 了/ 一种/ 通用/ 的/ 搜/ 方法/ ,/ 来/ 查找/ 出使/ 总/ 下载/ 数据量/ 最小/ 的/ 修复/ 方法/ ./ 基于/ 此/ 思想/ ,/ Khan/ 等/ 人/ [/ 38/ ]/ 还/ 提出/ 了/ 容错/ 能力/ 分别/ 为/ 2/ 和/ 3/ 的/ RotatedRS/ 码/ ./ Khan/ 等/ 人/ [/ 38/ ]/ 用/ 他们/ 提出/ 的/ 搜索算法/ 分析/ 了/ 多种/ 基于/ 异或/ 运算/ 纠/ 删码/ 的/ 性能/ ./ 结果表明/ ,/ 对于/ 常见/ 的/ 基于/ 异或/ 运算/ 纠/ 删码/ ,/ 上述/ 方法/ 可/ 将/ 总/ 数据/ 下载量/ 减少/ 20/ %/ 左右/ ./ 然而/ ,/ Khan/ 等/ 人/ [/ 38/ ]/ 提出/ 的/ 搜索算法/ 复杂度/ 极高/ ,/ 为了/ 选出/ 最好/ 的/ 组合/ 不得不/ 穷尽/ 所有/ 的/ 选择/ ./ 为了/ 解决/ 这一/ 问题/ ,/ Khan/ 等/ 人/ [/ 57/ ]/ 和/ Zhu/ 等/ 人/ [/ 58/ ]/ 分别/ 提出/ 了/ 近似/ 最优/ 的/ 搜索/ 方法/ ./ 基于/ 异或/ 运算/ 的/ 纠/ 删码/ 和/ RotatedRS/ 码/ 的/ 容错/ 能力/ 都/ 比较/ 有限/ ,/ 上述/ 思想/ 对/ 这些/ 纠/ 删码/ 的/ 优化/ 效果/ 也/ 较为/ 有限/ ./ 近来/ ,/ Rashmi/ 等/ 人/ [/ 12/ ,/ 59/ -/ 60/ ]/ 提出/ 了/ 一种/ 称为/ Hitchhiker/ 的/ MDS/ 码/ ./ Hitchhiker/ 码/ 可/ 基于/ 任何/ MDS/ 码/ 进行/ 构造/ ./ Hitchhiker/ 码/ 的/ 一个/ 条带/ 由/ 两个/ 普通/ MDS/ 码/ 条带/ 构成/ ./ 其/ 基本/ 编码/ 思想/ 是/ :/ 每个/ 子/ 条带/ 分别/ 先/ 用/ 普通/ 的/ MDS/ 码/ 进行/ 编图/ 8Hitchhiker/ 码/ 的/ 基本/ 编码/ 框架/ 和/ 编码/ 实例/ [/ 59/ ]/ (/ n/ =/ 14/ ,/ k/ =/ 10/ )/ 相比/ 于/ 基于/ 异或/ 运算/ 的/ 纠/ 删码/ 和/ RotatedRS/ 码/ ,/ Hitchhiker/ 码/ 能够/ 提供/ 任意/ 的/ 容错/ 能力/ ,/ 并且/ 其/ 可/ 将/ 数据/ 修复/ 所/ 需/ 下载/ 的/ 数据量/ 降低/ 高达/ 45/ %/ ./ 5.3/ 总结/ 5.3/ ./ 1/ 数据编码/ 性能/ 对比/ 影响/ 纠/ 删码/ 数据编码/ 性能/ 的/ 因素/ 有/ 编码/ 算法/ 的/ 时间/ 复杂度/ 以及/ 编码/ 过程/ 中/ 需要/ 读取/ 、/ 传输/ 和/ 写入/ 的/ 数据量/ ./ 纠/ 删码/ 的/ 编码/ 运算/ 主要/ 是/ 有限/ 域/ 上/ 的/ 加法/ 和/ 乘法/ 运算/ ,/ 其中/ 较为/ 费时/ 的/ 是/ 乘法/ 运算/ ./ 所以/ ,/ 乘法/ 运算/ 的/ 数量/ 可以/ 用来/ 表征/ 编码/ 算法/ 的/ 复杂度/ ./ 此外/ ,/ 编码/ ,/ 然后/ 对/ 其中/ 一个/ 子/ 条带/ 中/ 的/ 数据/ 计算/ 一些/ 检验/ 子块/ ,/ 并/ 把/ 这些/ 校验/ 子块/ 与/ 另/ 一个/ 子/ 条带/ 中/ 的/ 子块/ 相/ 合并/ ,/ 如图/ 8/ (/ a/ )/ 所示/ ./ 图/ 8/ (/ a/ )/ 中/ 的/ f1/ 和/ g1/ 等/ 表示/ 计算/ 校验/ 的/ 函数/ ,/ 其中/ f1/ ,/ f2/ ,/ f3/ 和/ f4/ 表示/ 采用/ 的/ 普通/ MDS/ 计算/ 校验/ 的/ 函数/ ./ 例如/ ,/ f1/ (/ 犪/ )/ 表示/ 子/ 条带/ 1/ 的/ 第一个/ 校验/ 子块/ ./ 容易/ 证明/ ,/ 不论/ g1/ ,/ g2/ ,/ …/ ,/ g14/ 是/ 什么样/ 的/ 函数/ ,/ Hitchhiker/ 码/ 都/ 具有/ MDS/ 性质/ ./ 但/ 若/ 要/ 降低/ 数据/ 修复/ 开销/ ,/ 则/ 需要/ 对/ 这些/ 校验/ 函数/ 进行/ 特殊/ 的/ 设计/ ./ Rashmi/ 等/ 人/ [/ 59/ ]/ 给出/ 了/ 3/ 种/ 设计/ ./ 图/ 8/ (/ b/ )/ 显示/ 了/ 其中/ 一种/ ,/ 称为/ Hitchhiker/ -/ XOR/ 码/ ./ Hitchhiker/ -/ XOR/ 码/ 的/ 额外/ 校验/ 数据/ 全部/ 通过/ 异或/ 运算/ 产生/ ./ 现/ 假设/ 数据/ 块/ 1/ 失效/ ,/ 即子/ 块/ a1/ 和/ b1/ 失效/ ,/ 数据/ 修复/ 分为/ 3/ 步/ ./ 第/ 1/ 步/ ,/ 使用/ b2/ ,/ b3/ ,/ …/ ,/ b10/ 和/ f1/ (/ 犫/ )/ 等/ 10/ 个子/ 块/ 修复/ 出子/ 块/ b1/ ;/ 第/ 2/ 步/ ,/ 使用/ b1/ 和/ b2/ ,/ …/ ,/ b10/ 等/ 10/ 个块/ 计算/ 出/ f2/ (/ 犫/ )/ ;/ 第/ 3/ 步/ ,/ 使用/ f2/ (/ 犫/ )/ ,/ f2/ (/ 犫/ )/ +/ a1/ +/ a2/ +/ a3/ ,/ a2/ 和/ a3/ 等/ 10/ 个子/ 块/ 修复/ 出子/ 块/ a1/ ./ 整个/ 过程/ 中/ 总共/ 需要/ 读取/ b2/ ,/ b3/ ,/ …/ ,/ b10/ ,/ f2/ (/ 犫/ )/ +/ a1/ +/ a2/ +/ a3/ ,/ a2/ 和/ a3/ 等/ 13/ 个子/ 块/ ./ 普通/ 的/ MDS/ 码则/ 需要/ 下载/ 相当于/ 20/ 个子/ 块/ 的/ 数据/ ./ Hitchhiker/ -/ XOR/ 码/ 将/ 数据/ 下载量/ 降低/ 了/ 35/ %/ ./ 码/ 使用/ 的/ 有限/ 域/ 的/ 大小/ 也/ 对/ 运算/ 时间/ 有/ 重大/ 影响/ ./ 随着/ 有限/ 域/ 的/ 增大/ ,/ 乘法/ 运算/ 的/ 复杂度/ 成/ 指数/ 级/ 增长/ ./ 此外/ ,/ 对于/ 较/ 小/ 的/ 有限/ 域/ ,/ 如/ 8/ 位/ 256/ 个/ 元素/ 的/ 有限/ 域/ ,/ 可以/ 将/ 所有/ 可能/ 的/ 乘法/ 运算/ 结果/ 保存/ 在/ 内存/ 中/ ,/ 用/ 查表/ 的/ 方法/ 加快/ 乘法/ 运算/ 速度/ ./ 目前/ 对于/ 常见/ 的/ 参数/ ,/ 上述/ 各类/ 纠/ 删码/ 中/ 较/ 优秀者/ 的/ 编码/ 运算/ 基本/ 可以/ 在/ 8/ 位/ 有限/ 域/ 上/ 完成/ ./ 在/ 现代/ 分布式/ 存储系统/ 中/ ,/ 真正/ 决定/ 纠/ 删码/ 编码/ 性能/ 的/ 是/ 需要/ 读取/ 、/ 传输/ 和/ 写入/ 的/ 数据量/ ./ 随着/ 计算机/ 运算/ 能力/ 的/ 飞速/ 增长/ ,/ 编码/ 运算/ 的/ 速度/ 已/ 远远/ 超过/ 数据/ 的/ 读取/ 、/ 传输/ 和/ 写入/ 速度/ ./ 影响/ 数据/ 读取/ 、/ Page10/ 传输/ 和/ 写入/ 量/ 的/ 主要/ 因素/ 是/ 编码/ 前/ 数据/ 的/ 分布/ 情况/ 和/ 采用/ 的/ 编码/ 实现/ 方法/ ./ 此外/ ,/ 纠/ 删码/ 的/ 数据/ 冗余度/ 也/ 对/ 运算量/ 、/ 数据传输/ 量/ 和/ 写入/ 量/ 有/ 重大/ 影响/ ./ 冗余度/ 越高/ ,/ 意味着/ 有/ 更/ 多/ 的/ 校验/ 数据/ 需要/ 产生/ 、/ 发送/ 出去/ 并/ 写入/ 到/ 磁盘/ 中/ ./ 表/ 1/ 从/ 存储空间/ 利用率/ 以及/ 编码/ 单位/ 数据/ 平均/ 需要/ 的/ 乘法/ 运算量/ 、/ 平均/ 数据/ 读取/ 量/ 、/ 平均/ 数据传输/ 表/ 1/ 几种/ 典型/ 纠/ 删码/ 的/ 数据编码/ 性能/ 对比/ RS/ (/ 14/ ,/ 10/ )/ LRCs/ (/ 10/ ,/ 2/ ,/ 4/ )/ SHEC/ (/ 10/ ,/ 6/ ,/ 5/ )/ 62.50/ (/ 9/ ,/ 5/ ,/ 8/ )/ -/ MSR/ (/ 14/ ,/ 10/ ,/ 13/ )/ -/ MBR46/ ./ 70/ (/ 14/ ,/ 10/ )/ -/ Hitchhiker/ -/ XOR71/ ./ 41/ 从表/ 1/ 可以/ 看出/ ,/ 在/ 运算/ 复杂性/ 方面/ ,/ RS/ 码/ 与/ LRCs/ 码/ 和/ Hitchhiker/ 码/ 这些/ 以/ RS/ 码为/ 基础/ 的/ 纠/ 删码/ 基本相同/ ./ 交叉分组/ 码/ SHEC/ (/ 10/ ,/ 6/ ,/ 5/ )/ 完全/ 的/ 运算/ 复杂度/ 较/ 低/ ,/ 但/ 其/ 容错/ 能力/ 也/ 较/ 低/ ./ (/ 9/ ,/ 5/ ,/ 8/ )/ -/ MSR/ 码/ 和/ (/ 14/ ,/ 10/ ,/ 13/ )/ -/ MBR/ 码/ 具有/ 最高/ 的/ 运算/ 复杂度/ ./ 除了/ 较为/ 复杂/ 外/ ,/ 再生/ 码较/ 高/ 的/ 运算/ 复杂度/ 也/ 与其/ 更/ 高/ 的/ 数据/ 冗余度/ 有/ 重大/ 关系/ ./ 在/ 集中式/ 编码/ 实现/ 方法/ 下/ ,/ 除了/ 数据/ 读取/ 量/ ,/ 数据传输/ 量/ 和/ 写入/ 量/ 完全/ 取决于/ 纠/ 删码/ 的/ 冗余度/ ./ 因此/ ,/ 冗余度/ 最低/ 的/ RS/ (/ 14/ ,/ 10/ )/ 码/ 和/ (/ 14/ ,/ 10/ )/ -/ Hitchhiker/ -/ XOR/ 码/ 表现/ 最好/ ,/ 冗余度/ 最高/ 的/ (/ 14/ ,/ 10/ ,/ 13/ )/ -/ MBR/ 码/ 表现/ 最差/ ./ 5.3/ ./ 2/ 数据/ 修复/ 性能/ 对比/ 通常/ 情况/ 下/ ,/ 采用/ 修复/ 一个/ 失效/ 块/ 平均/ 所/ 需/ 下载/ 的/ 数据量/ 来/ 衡量/ 纠/ 删码/ 的/ 数据/ 修复/ 开销/ ./ 将/ 修复/ 一个/ 块/ 平均/ 所/ 需/ 下载/ 的/ 数据量/ 与/ 块/ 大小/ 之/ 比/ 称为/ 单块/ 修复/ 代价/ ,/ 以/ Rs/ 表示/ ./ 单块/ 修复/ 代价/ 在/ 一定/ 程度/ 上/ 反映/ 了/ 纠/ 删码/ 数据/ 修复/ 的/ 开销/ ,/ 但/ 无法/ 反映/ 整个/ 系统/ 数据/ 修复/ 的/ 总体/ 开销/ ./ 不同/ 冗余度/ 的/ 纠/ 删码/ 具有/ 不同/ 的/ 存储/ 开销/ ./ 在/ 原始数据/ 量/ 相同/ 的/ 情况/ 下/ ,/ 系统/ 采用/ 不同/ 开销/ 的/ 纠/ 删码/ ,/ 其/ 实际/ 存储/ 的/ 数据量/ 是/ 不同/ 的/ ,/ 从而/ 导致/ 数据/ 修复/ 的/ 总体/ 开销/ 不同/ ./ 假设/ 系统/ 存储/ 的/ 原始数据/ 量/ 为/ V/ ,/ 数据/ 失效/ 速率/ 为/ λ/ ,/ 纠/ 删码/ 的/ 存储空间/ 利用率/ 为/ η/ ,/ 则/ 可/ 计算/ 出/ 系统/ 单位/ 时间/ 内/ 的/ 总体/ 修复/ 带宽/ F/ 为/ 从式/ (/ 4/ )/ 可以/ 看出/ ,/ 在/ 原始数据/ 量/ 和/ 数据/ 失效/ 速率/ 相同/ 的/ 情况/ 下/ ,/ 纠/ 删码/ 的/ 总体/ 修复/ 带宽/ 正比/ 于/ 其/ 单块/ 修复/ 代价/ Rs/ ,/ 反比/ 于/ 其/ 存储空间/ 利用率/ η/ ./ 因量/ 和/ 平均/ 数据/ 写入/ 量/ 等/ 方面/ ,/ 对比/ 了/ 几种/ 典型/ 纠/ 删码/ 在/ 集中式/ 编码/ 实现/ 方法/ 下/ 的/ 编码/ 性能/ ./ 除了/ 其中/ 的/ (/ 9/ ,/ 5/ ,/ 8/ )/ -/ MSR/ 码/ 和/ (/ 14/ ,/ 10/ ,/ 13/ )/ -/ MBR/ 码/ 两个/ 再生/ 码/ 以外/ ,/ 其它/ 纠/ 删码/ 均/ 已/ 被/ 应用/ 在/ 了/ 实际/ 的/ 大型/ 分布式/ 存储系统/ 中/ ./ 表/ 1/ 中/ ,/ SHEC/ (/ 10/ ,/ 6/ ,/ 5/ )/ 的/ 容错/ 能力/ 为/ 3/ ,/ 其它/ 纠/ 删码/ 的/ 容错/ 能力/ 均/ 为/ 4.111111/ 此/ ,/ 可以/ 用/ Rs/ 与/ η/ 之比来/ 表示/ 纠/ 删码/ 的/ 总体/ 修复/ 代价/ ./ 以/ Rc/ 表示/ 纠/ 删码/ 的/ 总体/ 修复/ 代价/ ,/ 则/ 有表/ 2/ 从/ 存储空间/ 利用率/ 、/ 单块/ 修复/ 代价/ 和/ 总体/ 修复/ 代价/ 等/ 方面/ 对比/ 了/ 表/ 1/ 中/ 几种/ 典型/ 纠/ 删码/ 的/ 数据/ 修复/ 性能/ ./ 作为/ 对比/ ,/ 表/ 2/ 中/ 加入/ 了/ 常见/ 的/ 三/ 副本/ 技术/ ./ 表/ 2/ 几种/ 典型/ 纠/ 删码/ 与/ 多/ 副本/ 技术/ 的/ 数据/ 修复/ 性能/ 对比/ LRCs/ (/ 10/ ,/ 2/ ,/ 4/ )/ 62.503/ ./ 756.00/ SHEC/ (/ 10/ ,/ 6/ ,/ 5/ )/ 62.505/ ./ 008.00/ 分组码/ (/ 9/ ,/ 5/ ,/ 8/ )/ -/ MSR55/ ./ 602.003/ ./ 60/ (/ 14/ ,/ 10/ ,/ 13/ )/ -/ MBR46/ ./ 701.002/ ./ 14/ (/ 14/ ,/ 10/ )/ -/ Hitchhiker/ -/ XOR71/ ./ 417.6410/ ./ 70/ 从表/ 2/ 可以/ 看出/ ,/ 传统/ MDS/ 码/ 的/ 存储空间/ 利用率/ 最高/ ,/ 但是/ 其/ 数据/ 修复/ 开销/ 也/ 最大/ ,/ 甚至/ 高于/ 其它/ 种类/ 纠/ 删码/ 数倍/ ./ 相比/ 于/ 传统/ MDS/ 码/ ,/ 分组码/ 能够/ 以较/ 少/ 的/ 额外/ 存储空间/ 开销/ 为/ 代价/ ,/ 显著/ 降低/ 数据/ 修复/ 的/ 成本/ ./ 分组码/ 也/ 较/ 容易/ 实现/ ,/ 这/ 也/ 是/ 其/ 在/ 大型/ 存储系统/ 中/ 得到/ 应用/ 的/ 重要/ 原因/ 之一/ ./ 再生/ 码/ 可以/ 极为/ 有效/ 地/ 降低/ 数据/ 修复/ 开销/ ,/ 但是/ 再生/ 码/ 的/ 存储空间/ 利用率/ 明显/ 低于/ 其它/ 类别/ 纠/ 删码/ ,/ 其/ 存储空间/ 利用率/ 最高/ 也/ 只能/ 达到/ 50/ %/ 左右/ ./ 所以/ ,/ 再生/ 码/ 不/ 适合/ 于/ 对/ 存储/ 成本/ 要求/ 较/ 高/ 的/ 大规模/ 存储系统/ ,/ 而/ 适合/ 于/ 对/ 带宽/ 成本/ 极其/ 敏感/ 的/ 系统/ ./ 例如/ ,/ 可以/ 将/ 再生/ 码用/ 在/ 数据中心/ 级/ 的/ 数据/ 容错/ 中/ ,/ 因为/ 数据中心/ 之间/ 的/ 网络带宽/ 极其/ 昂贵/ ./ Page115/ ./ 3.3/ 总结/ 分布式/ 存储系统/ 对/ 纠/ 删码/ 的/ 要求/ 主要/ 在/ 容错/ 能力/ 、/ 存储空间/ 开销/ 和/ 数据/ 修复/ 开销/ 3/ 个/ 方面/ ./ 但/ 这/ 3/ 个/ 方面/ 是/ 相互/ 排斥/ 的/ ,/ 提升/ 其中/ 一个/ 方面/ 必然/ 会/ 牺牲/ 其它/ 方面/ ./ 分布式/ 存储系统/ 中/ ,/ 纠/ 删码/ 的/ 设计/ 本质/ 上/ 都/ 是/ 在/ 容错/ 能力/ 、/ 存储空间/ 开销/ 和/ 数据/ 修复/ 开销/ 之间/ 进行/ 权衡/ ./ 由于/ 容错/ 能力/ 是/ 分布式/ 容错/ 系统/ 的/ 基本/ 要求/ ,/ 现有/ 研究/ 基本/ 都/ 是/ 在/ 保持/ 容错/ 能力/ 的/ 前提/ 下/ ,/ 在/ 存储空间/ 开销/ 和/ 数据/ 修复/ 开销/ 之间/ 进行/ 权衡/ ./ 分组码/ 就是/ 此/ 思路/ 的/ 典型/ 代表/ ./ 相比/ 于/ 分组码/ ,/ 再生/ 码/ 在/ 理论/ 上/ 取得/ 了/ 重大突破/ ,/ 证明/ 并/ 达到/ 了/ 一定/ 存储空间/ 开销/ 下/ 修复/ 时/ 数据/ 下载量/ 的/ 下界/ ./ 不过/ 早期/ 再生/ 码/ 在/ 数据/ 下载量/ 方面/ 的/ 减少/ 是/ 以/ 增加/ 数据/ 读取/ 量/ 为/ 代价/ 的/ ./ RBTMBR/ 码/ 的/ 提出/ ,/ 使/ MBR/ 码/ 在/ 数据/ 下载量/ 和/ 读取/ 量/ 都/ 达到/ 了/ 最优/ ./ PM/ -/ RBT/ 码/ 的/ 提出/ ,/ 缓解/ 了/ MSR/ 码/ 在/ 数据/ 下载量/ 方面/ 的/ 问题/ ./ 6/ 数据/ 修复/ 技术/ 研究/ 除了/ 从/ 纠/ 删码/ 本身/ 入手/ 降低/ 数据/ 修复/ 的/ 代价/ 之外/ ,/ 从/ 数据/ 修复/ 的/ 具体/ 过程/ 入手/ ,/ 通过/ 优化/ 修复/ 时/ 的/ 数据/ 读取/ 和/ 数据传输/ 过程/ 也/ 可以/ 进一步提高/ 数据/ 修复/ 的/ 效率/ ./ 传统/ 的/ 数据/ 修复/ 方法/ 通常/ 采用/ 星型/ 的/ 数据/ 传输方式/ ,/ 所有/ 提供/ 节点/ 直接/ 将/ 数据/ 发送给/ 新生/ 节点/ ,/ 所有/ 参与/ 修复/ 的/ 节点/ 构成/ 一个/ 以/ 新生/ 节点/ 为/ 中心/ 的/ 星型/ 结构/ ./ 星型/ 数据/ 修复/ 方法/ 简单/ 直观/ ,/ 但是/ 其/ 存在/ 严重/ 的/ 性能/ 瓶颈/ ./ 现有/ 的/ 数据/ 修复/ 技术/ 大部分/ 都/ 基于/ 树型/ 数据/ 修复/ 方法/ ./ 系统/ 会先/ 构建/ 覆盖/ 所有/ 参与/ 修复/ 的/ 节点/ 且/ 以/ 新生/ 节点/ 为根/ 的/ 修复/ 树/ ./ 在/ 修复过程/ 中/ ,/ 叶/ 节点/ 先/ 将/ 自己/ 的/ 数据/ 乘以/ 相应/ 的/ 系数/ 后/ 将/ 其/ 向上/ 传输/ 给/ 自己/ 的/ 父/ 节点/ ,/ 内部/ 节点/ 收取/ 其/ 所有/ 子/ 节点/ 发送/ 的/ 数据/ 并/ 将/ 这些/ 数据/ 和/ 自己/ 的/ 数据/ 进行/ 一定/ 的/ 组合/ ,/ 然后/ 再/ 将/ 组合/ 结果/ 传输/ 给/ 自己/ 的/ 父/ 节点/ ,/ 以此类推/ ,/ 直至/ 最终/ 到达/ 修复/ 树/ 的/ 根/ 节点/ ./ 根/ 节点/ 将/ 收到/ 的/ 所有/ 数据/ 进行/ 组合/ 后/ 就/ 可/ 恢复/ 出/ 失效/ 数据/ ./ 图/ 9/ (/ a/ )/ 显示/ 了/ 树型/ 数据/ 修复/ 方法/ 的/ 数据传输/ 结构/ ./ 其中/ ,/ 失效/ 编码/ 块/ c5/ 可用/ 编码/ 块/ c1/ ,/ c2/ ,/ c3/ 和/ c4/ 来/ 修复/ ,/ 其/ 关系/ 如式/ (/ 6/ )/ 所示/ ./ 作为/ 对比/ ,/ 图/ 9/ (/ b/ )/ 显示/ 了/ 传统/ 星型/ 数据/ 修复/ 方法/ 中/ 的/ 数据传输/ 结构/ ./ 根据/ 修复/ 树/ 构造方法/ 的/ 不同/ ,/ 现有/ 数据/ 修复/ 技术/ 可以/ 分为/ 两大类/ :/ 一是/ 带宽/ 感知/ 的/ 数据/ 修复/ 技术/ ,/ 图/ 9/ 树型/ 修复/ 方法/ 和/ 星型/ 修复/ 方法/ 的/ 数据传输/ 结构/ 依据/ 网络带宽/ 来/ 构建/ 修复/ 树/ ;/ 二是/ 拓扑/ 感知/ 的/ 数据/ 修复/ 技术/ ,/ 依据/ 网络拓扑/ 来/ 构建/ 修复/ 树/ ./ 6.1/ 带宽/ 感知/ 的/ 数据/ 修复/ 技术/ 带宽/ 感知/ 的/ 数据/ 修复/ 技术/ 最早/ 由/ Li/ 等/ 人/ [/ 61/ ]/ 提出/ ./ 其/ 主要/ 考虑/ 到/ 大规模/ 分布式系统/ 往往/ 是/ 异构/ 的/ ,/ 即/ 节点/ 的/ 性能/ 不尽相同/ ,/ 节点/ 之间/ 的/ 网络带宽/ 也/ 不同/ ./ 此类/ 方法/ 试图/ 根据/ 网络带宽/ 来/ 构造/ 修复/ 树/ ,/ 通过/ 尽量/ 利用网络/ 中/ 的/ 高/ 可用/ 带宽/ 达到/ 提高/ 数据/ 传输速度/ 、/ 缩短/ 修复/ 时间/ 的/ 目的/ ./ Li/ 等/ 人/ 证明/ ,/ 采用/ 以/ 节点/ 间/ 可用/ 网络带宽/ 作为/ 边/ 权重/ 的/ 最大/ 生成/ 树/ 作为/ 修复/ 树/ ,/ 可/ 使/ 数据/ 修复/ 时间/ 达到/ 最小/ ./ 图/ 10/ 显示/ 了/ 传统/ 星型/ 数据/ 修复/ 方法/ 和/ 文献/ [/ 61/ ]/ 中/ 带宽/ 感知/ 的/ 树型/ 数据/ 修复/ 方法/ 的/ 对比/ 情况/ ./ 其中/ ,/ 原/ 数据/ 对象/ 大小/ 为/ M/ ,/ 分为/ 3/ 个/ 数据/ 块/ ,/ 通过/ 编码/ 产生/ 个/ 1/ 校验/ 块/ ,/ 3/ 个/ 数据/ 块/ 和/ 1/ 个/ 校验/ 块/ 分别/ 存储/ 在/ 节点/ 2/ 、/ 节点/ 3/ 、/ 节点/ 4/ 和/ 节点/ 5/ 等/ 4/ 个/ 节点/ 上/ ,/ 各块/ 大小/ 均/ 为/ M/ // 3/ ./ 假设/ 节点/ 4/ 上/ 的/ 块/ 失效/ ,/ 用/ 节点/ 2/ 、/ 节点/ 3/ 和/ 节点/ 5/ 上/ 的/ 3/ 个/ 可用/ 块/ 进行/ 修复/ ,/ 节点/ 1/ 为/ 新生/ 节点/ ./ 图/ 10/ (/ a/ )/ 显示/ 了/ 各/ 节点/ 之间/ 的/ 可用/ 网络带宽/ ./ 图/ 10/ (/ b/ )/ 显示/ 了/ 采用/ 星型/ 数据/ 修复/ 方法/ 时/ 的/ 数据传输/ 情况/ ./ 在/ 此/ 方法/ 中/ ,/ 所有/ 3/ 个/ 提供/ 节点/ (/ 节点/ 2/ 、/ 节点/ 3/ 和/ 节点/ 5/ )/ 都/ 直接/ 向/ 节点/ 1/ 传输数据/ ./ 星型/ 修复/ 方法/ 的/ 修复/ 时间/ 取决于/ 可用/ 节点/ 与/ 新生/ 节点/ 之间/ 的/ 瓶颈/ 带宽/ ,/ 即/ 节点/ 1/ 和/ 节点/ 3/ 之间/ 的/ 带宽/ ./ 每个/ 可用/ 节点/ 与/ 新生/ 节点/ 之间/ 传输/ 的/ 数据量/ 均/ 为/ M/ // 3/ ./ 可以/ 计算/ 出/ ,/ 传统/ 星型/ 数据/ 修复/ 方法/ 的/ 修复/ 时间/ 为/ (/ M/ // 3/ )/ // 20/ =/ M/ // 60/ ./ 图/ 10/ (/ c/ )/ 显示/ 了/ 带宽/ 感知/ 的/ 树型/ 数据/ 修复/ 方法/ 的/ 数据传输/ 过程/ ,/ 图/ 10/ (/ d/ )/ 显示/ 了/ 对应/ 的/ 修复/ 树/ ./ 根据/ Li/ 等/ 人/ 的/ 证明/ ,/ 该/ 方法/ 的/ 修复/ 时间/ 取决于/ 修复/ 树中/ 的/ 最小/ 带宽/ ./ 此/ 实例/ 中/ 的/ 最小/ 带宽/ 为/ 40/ ./ 该/ 方法/ 中/ ,/ 节点/ 之间/ 传输/ 的/ 数据量/ 也/ 为/ M/ // 3/ ,/ 可以/ 算出/ 其/ 修复/ 时间/ 为/ (/ M/ // 3/ )/ // 40/ =/ M/ // 120/ ./ 可见/ ,/ 相比/ 于/ 星型/ 数据/ 修复/ 方法/ ,/ 带宽/ 感知/ 的/ 数据/ 修复/ 方法/ 将/ 修复/ 时间/ 缩短/ 了/ 一半/ ./ Page12/ 图/ 10/ 星型/ 修复/ 方法/ 和/ 带宽/ 感知/ 的/ 树型/ 数据/ 修复/ 方法/ 的/ 对比/ Li/ 等/ 人/ [/ 62/ ]/ 又/ 将/ 充分利用/ 可用/ 带宽/ 的/ 思想/ 引入/ 到/ 再生/ 码中/ ,/ 提出/ 了/ 针对/ 再生/ 码/ 的/ 树型/ 数据/ 修复/ 方法/ RCTREE/ ./ 为了/ 更加/ 有效/ 地/ 利用/ 系统/ 中/ 的/ 可用/ 带宽/ ,/ 加速/ 多/ 节点/ 同时/ 失效/ 情况/ 下/ 的/ 数据/ 修复/ ,/ Sun/ 等/ 人/ [/ 63/ ]/ 扩展/ 了/ 文献/ [/ 61/ ]/ 中/ 的/ 数据/ 修复/ 方法/ ,/ 提出/ 了/ 一种/ 带宽/ 感知/ 的/ 并行/ 数据/ 修复/ 方法/ TPR/ (/ Tree/ -/ struc/ -/ turedParallelRegeneration/ )/ ./ 当/ 多个/ 节点/ 同时/ 失效/ 时/ ,/ TPR/ 方法/ 会以/ 各/ 新生/ 节点/ 为根/ ,/ 分别/ 构建/ 多个/ 修复/ 树/ ,/ 并行/ 地/ 对/ 失效节点/ 进行/ 修复/ ./ 6.2/ 拓扑/ 感知/ 的/ 数据/ 修复/ 技术/ 拓扑/ 感知/ 的/ 数据/ 修复/ 技术/ 的/ 基本/ 思想/ 是/ 通过/ 构造/ 与/ 物理/ 拓扑/ 相符/ 的/ 修复/ 树/ ,/ 以/ 减少/ 数据/ 修复/ 时/ 在/ 网络拓扑/ 的/ 高层/ 链路/ 上/ 传输/ 的/ 数据量/ ./ 目前/ ,/ 最/ 常见/ 的/ 网络拓扑/ 仍然/ 为/ 多层/ 的/ 树型/ 结构/ [/ 64/ ]/ ,/ 由下/ 到/ 上/ 依次/ 为/ 由/ 机架/ 交换机/ (/ Top/ -/ of/ -/ Rack/ ,/ TOR/ )/ 组成/ 的/ 边界层/ (/ EdgeLayer/ )/ ,/ 由/ 聚合/ 交换机/ 组成/ 的/ 数据/ 聚合/ 层/ (/ AggregationLayer/ )/ 和/ 由/ 核心/ 交换机/ 和/ 路由器/ 组成/ 的/ 核心层/ (/ CoreLayer/ )/ ./ 树形/ 网络/ 的/ 突出/ 问题/ 是/ 高层/ 的/ 带宽/ 往往/ 非常/ 紧张/ ,/ 目前/ 部署/ 的/ 网络/ 中/ 边界层/ 的/ 总/ 带宽/ 仍然/ 为/ 核心层/ 的/ 4/ ~/ 10/ 倍/ [/ 64/ -/ 65/ ]/ ./ 近来/ 有关/ 数据中心/ 网络/ 负载/ 的/ 研究/ [/ 8/ ,/ 64/ ,/ 66/ ]/ 均/ 表明/ ,/ 核心层/ 链路/ 的/ 利用率/ 是/ 最高/ 的/ ./ 因此/ ,/ 如果/ 能够/ 有效/ 减少/ 核心层/ 的/ 带宽/ 消耗/ ,/ 将/ 极大/ 提高/ 系统/ 整体/ 的/ 性能/ ./ 针对/ 此/ 问题/ ,/ Zeng/ 等/ 人/ [/ 67/ ]/ 和/ Zhang/ 等/ 人/ [/ 68/ ]/ 提出/ 了/ 拓扑/ 感知/ 的/ 数据/ 修复/ 技术/ ,/ 以/ 降低/ 数据/ 修复/ 占用/ 的/ 核心/ 网络带宽/ ./ 这种/ 数据/ 修复/ 技术/ 的/ 基本/ 思想/ 是/ ,/ 将/ 距离/ 较近/ 的/ 编码/ 块/ (/ 如/ 处于/ 同一个/ 机柜/ 中/ 的/ 编码/ 块/ )/ 先/ 就近/ 组合/ 然后/ 再/ 发送到/ 更远/ 的/ 节点/ 进行/ 进一步/ 的/ 组合/ ,/ 直至/ 最终/ 汇入/ 新生/ 节点/ ,/ 这样/ 就/ 可以/ 逐步/ 减少/ 在/ 网络拓扑/ 高层/ 中/ 传输/ 的/ 数据量/ ,/ 降低/ 核心/ 带宽/ 消耗/ ,/ 从而/ 提高/ 数据/ 修复/ 效率/ ,/ 并/ 降低/ 数据/ 修复/ 对/ 整个/ 系统/ 性能/ 造成/ 的/ 不良影响/ ./ 图/ 11/ 显示/ 了/ 该/ 修复/ 方法/ 的/ 一个/ 实例/ ,/ 其中/ 存储/ 校验/ 块/ o1/ +/ o2/ +/ o3/ +/ o4/ 的/ 节点/ 失效/ ./ 修复过程/ 中/ ,/ 交换机/ S1/ 先/ 将/ 数据/ 块/ o1/ ,/ o2/ 和/ o4/ 进行/ 组合/ ,/ 产生/ o1/ +/ o2/ +/ o4/ 并/ 将/ 其/ 发送给/ 交换机/ S2/ ./ 交换机/ S2/ 再/ 将/ o1/ +/ o2/ +/ o4/ 和/ o3/ 组合/ 从而/ 恢复/ 出/ 失效/ 的/ 校验/ 块/ o1/ +/ o2/ +/ o3/ +/ o4/ ./ 整个/ 过程/ 中/ ,/ 交换机/ S1/ 和/ S2/ 之间/ 只/ 传输/ 了/ 1/ 个块/ ./ 在/ 传统/ 的/ 星型/ 修复/ 方法/ 中/ ,/ 交换机/ S1/ 和/ S2/ 之间/ 则/ 需要/ 传输/ 3/ 个块/ ./ 可见/ ,/ 拓扑/ 感知/ 的/ 树型/ 数据/ 修复/ 方法/ 能够/ 有效/ 降低/ 网络拓扑/ 中高层/ 的/ 数据传输/ 量/ ./ 6.3/ 总结/ 带宽/ 感知/ 的/ 数据/ 修复/ 技术/ 虽然/ 在/ 理论/ 上/ 非常/ 吸引/ 人/ ,/ 但是/ 存在/ 难以克服/ 的/ 缺点/ :/ (/ 1/ )/ 分布式系统/ 中/ 节点/ 间/ 的/ 带宽/ 是/ 实时/ 动态变化/ 的/ ,/ 测试/ 成本/ 高且/ 难以获得/ 精确/ 的/ 结果/ ;/ (/ 2/ )/ 该类/ 技术/ 只是/ 将/ 数据传输/ 导向/ 到/ 较/ 快/ 的/ 链路/ ,/ 并/ 没有/ 降低/ 数据/ 修复/ 的/ 负载/ ,/ 所以/ 不能/ 有效/ 提升/ 总体/ 的/ 数据/ 修复/ 效率/ ./ 此外/ ,/ 很多/ 研究/ 工作/ 涉及/ 的/ 网络/ 模型/ 也/ 与/ 实际/ 网络/ 不符/ ./ 相对而言/ ,/ 拓扑/ 感知/ 的/ 数据/ 修复/ 技术/ 更加/ 具有/ 可操作性/ ./ 但是/ ,/ 目前/ 这/ 类/ 方法/ 也/ 存在/ 比较/ 明显/ 的/ 缺点/ ./ 需要/ 由/ 交换机/ 完成/ 修复过程/ 中/ 的/ 数据/ 合并/ ,/ 交换机/ 需要/ 支持/ 数据/ 运算/ ,/ 也/ 需要/ 设计/ 专门/ 的/ 底层/ 通讯/ 协议/ ./ 这些/ 问题/ 限制/ 了/ 拓扑/ 感知/ 的/ 数据/ 修复/ 技术/ 在/ 实际/ 系统/ 中/ 的/ 应用/ ./ 7/ 数据/ 更新/ 技术/ 研究/ 纠/ 删码/ 中/ 一个/ 数据/ 块/ 关联/ 着/ 较/ 多/ 的/ 校验/ 块/ ,/ 导/ Page13/ 致/ 数据/ 更新/ 需要/ 同时/ 更新/ 较/ 多/ 的/ 块/ ,/ 不仅/ 需要/ 大量/ 的/ 数据传输/ 和/ 写入/ ,/ 也/ 使/ 保持数据/ 的/ 一致性/ 面临/ 挑战/ ./ 依据/ 更新/ 方式/ ,/ 可/ 将/ 现有/ 纠/ 删码/ 容错/ 技术/ 中/ 的/ 数据/ 更新/ 方法/ 分为/ 3/ 种/ :/ 替换/ 式/ 更新/ 方法/ 、/ 追加/ 式/ 更新/ 方法/ 和/ 混合式/ 更新/ 方法/ ./ 7.1/ 替换/ 式/ 更新/ 方法/ 替换/ 式/ 更新/ 方法/ [/ 69/ -/ 70/ ]/ 直接/ 用/ 新/ 的/ 数据/ 覆盖/ 原有/ 数据/ ,/ 完成/ 对/ 数据/ 块/ 和校验/ 块/ 的/ 更新/ 后/ 才/ 返回/ 更新/ 成功/ ./ 图/ 12/ 显示/ 了/ 一个/ 替换/ 式/ 更新/ 方法/ 的/ 实例/ ./ 其中/ ,/ 节点/ 1/ 和/ 节点/ 2/ 存储/ 数据/ 块/ ,/ 节点/ 3/ 存储/ 校验/ 块/ ,/ a/ ,/ b/ ,/ c/ 和/ d/ 分别/ 表示/ 4/ 个/ 原始数据/ 块/ ,/ a/ +/ c/ 和/ b/ +/ d/ 分别/ 表示/ 2/ 个/ 校验/ 块/ ,/ a/ ,/ b/ 和/ c/ 分别/ 表示/ 对原/ 数据/ 块/ a/ ,/ b/ 和/ c/ 中/ 的/ 一部分/ 进行/ 更新/ 的/ 新/ 数据/ 子块/ ./ 可以/ 看出/ ,/ 替换/ 式/ 更新/ 方法/ 直接/ 更新/ 了/ 所有/ 的/ 数图/ 13/ 追加/ 式/ 更新/ 方法/ 的/ 数据/ 更新/ 实例/ 相比/ 于/ 替换/ 式/ 更新/ 方法/ ,/ 追加/ 式/ 更新/ 方法/ 避免/ 了/ 数据/ 更新过程/ 中/ 对/ 原/ 校验/ 数据/ 的/ 读取/ ,/ 追加/ 式/ 的/ 写入/ 也/ 将/ 随机/ 写/ 转化/ 为了/ 顺序/ 写/ ,/ 这些/ 都/ 有利于/ 提高/ 数据/ 更新/ 的/ 效率/ ./ 但是/ ,/ 追加/ 式/ 更新/ 方法/ 存在/ 存储空间/ 消耗/ 较/ 多/ 和/ 数据/ 访问/ 性能/ 较差/ 等/ 不足/ :/ (/ 1/ )/ 追加/ 式/ 更新/ 方法/ 需要/ 同时/ 保存/ 原/ 数据/ 和/ 新/ 数据/ 与/ 原/ 数据/ 的/ 差值/ ,/ 这/ 必然/ 会/ 消耗/ 更/ 多/ 的/ 存储空间/ ./ 当/ 数据/ 更新/ 频繁/ 发生/ 时/ ,/ 该/ 问题/ 会/ 更加/ 严重/ ;/ (/ 2/ )/ 经过/ 更新/ 后/ ,/ 原来/ 数据/ 块/ 中/ 连续/ 的/ 数据/ 将/ 随机/ 地/ 分布/ 在/ 日志/ 中/ ,/ 导致/ 无法/ 顺序/ 读取数据/ ,/ 明显/ 影响/ 了/ 数据/ 访问/ 的/ 效率/ ./ 此外/ ,/ 访问/ 校验/ 块/ 需要/ 先/ 合并/ 数据/ ,/ 这/ 影响/ 了/ 数据/ 修复/ 的/ 性能/ [/ 71/ -/ 73/ ]/ ./ 7.3/ 混合式/ 更新/ 方法/ 混合式/ 更新/ 方法/ [/ 74/ -/ 75/ ]/ 是/ 替换/ 式/ 更新/ 方法/ 和/ 追加/ 式/ 更新/ 方法/ 的/ 结合/ ./ 具体来讲/ ,/ 混合式/ 更新/ 方法/ 采用/ 替换/ 式/ 更新/ 方法/ 对/ 数据/ 块/ 进行/ 实时/ 更新/ ,/ 同时/ 采据块/ 和校验/ 块/ ./ 替换/ 式/ 更新/ 方法/ 能够/ 保证数据/ 块/ 与/ 校验/ 块/ 实时/ 更新/ ,/ 对/ 提高/ 系统/ 的/ 性能/ 有/ 重要/ 作用/ ./ 数据/ 块/ 的/ 实时/ 更新/ 能够/ 保证/ 应用/ 访问/ 到/ 的/ 数据/ 始终/ 是/ 最新/ 的/ ,/ 有利于/ 提高/ 应用/ 运行/ 的/ 效率/ 和/ 准确性/ ./ 校验/ 块/ 的/ 实时/ 更新/ 能够/ 保证/ 访问/ 的/ 校验/ 数据/ 始终/ 是/ 最新/ 的/ ,/ 有利于/ 提高/ 数据/ 修复/ 的/ 性能/ ./ 但是/ ,/ 替换/ 式/ 更新/ 方法/ 存在/ 数据/ 读写/ 量/ 大/ 和/ 数据传输/ 量/ 大/ 等/ 不足/ ,/ 对/ 数据/ 更新/ 效率/ 产生/ 显著/ 影响/ ./ 7.2/ 追加/ 式/ 更新/ 方法/ 追加/ 式/ 更新/ 方法/ 先/ 将/ 新/ 数据/ 以/ 日志/ 的/ 形式/ 追加/ 在/ 原始数据/ 块/ 之后/ ,/ 将/ 新/ 数据/ 与/ 原/ 数据/ 的/ 差值/ 以/ 日志/ 的/ 形式/ 追加/ 在/ 校验/ 块/ 之后/ ;/ 一段时间/ 之后/ 或/ 需要/ 访问/ 新/ 的/ 数据/ 块/ 或/ 校验/ 块/ 时/ 再/ 将/ 追加/ 的/ 数据/ 与/ 原/ 数据/ 合并/ ./ 图/ 13/ 显示/ 了/ 一个/ 追加/ 式/ 更新/ 方法/ 的/ 实例/ ./ 更新过程/ 中/ ,/ 先/ 读取/ 被/ 更新/ 的/ 数据/ ,/ 并/ 计算/ 新/ 数据/ a/ ,/ b/ 和/ c/ 与/ 被/ 更新/ 部分/ 数据/ 的/ 差值/ Δ/ a/ ,/ Δ/ b/ 和/ Δ/ c/ ,/ 然后/ 将/ 新/ 数据/ a/ 和/ c/ 追加/ 到/ 节点/ 1/ 上/ ,/ 将/ 新/ 数据/ b/ 追加/ 到/ 节点/ 2/ 上/ ,/ 将/ 新/ 数据/ a/ ,/ b/ 和/ c/ 与/ 被/ 更新/ 部分/ 数据/ 的/ 差值/ Δ/ a/ ,/ Δ/ b/ 和/ Δ/ c/ 追加/ 到/ 校验/ 节点/ 上/ ./ GFS/ [/ 5/ ]/ 和/ Azure/ [/ 35/ ]/ 采用/ 的/ 是/ 追加/ 式/ 更新/ 方法/ ./ 用/ 追加/ 式/ 更新/ 方法/ 对/ 校验/ 块/ 进行/ 延迟/ 更新/ ./ 图/ 14/ 显示/ 了/ 一个/ 混合式/ 更新/ 方法/ 的/ 实例/ ./ 更新过程/ 中/ ,/ 先/ 读取/ 被/ 更新/ 的/ 数据/ ,/ 并/ 分别/ 计算/ 新/ 数据/ a/ ,/ b/ 和/ c/ 与/ 被/ 更新/ 部分/ 数据/ 的/ 差值/ Δ/ a/ ,/ Δ/ b/ 和/ Δ/ c/ ,/ 然后/ 用/ 新/ 数据/ a/ ,/ b/ 和/ c/ 分别/ 覆盖/ 被/ 更新/ 的/ 部分/ 数据/ ,/ 并/ 将/ 新/ 数据/ a/ ,/ b/ 和/ c/ 与/ 被/ 更新/ 部分/ 数据/ 的/ 差值/ Δ/ a/ ,/ Δ/ b/ 和/ Δ/ c/ 追加/ 到/ 校验/ 节点/ 上/ ./ 相比/ 于/ 追加/ 式/ 更新/ 方法/ ,/ 混合式/ 更新/ 方法/ 对/ 数据/ 块/ 的/ 实时/ 更新/ 使得/ 对/ 数据/ 块/ 的/ 读取/ 可以/ 顺序/ 进行/ ,/ 提高/ 了/ 数据/ 读取/ 效率/ ,/ 也/ 一定/ 程度/ 上/ 降低/ 了/ 存储空间/ 的/ 消耗/ ./ 但是/ ,/ 混合式/ 更新/ 方法/ 对/ 数据/ 块/ 的/ 写/ 操作/ 是/ 随机/ 的/ ,/ 影响/ 了/ 数据/ 更新/ 的/ 效率/ ./ 在/ 不/ 考虑/ 数据/ 合并/ 的/ 情况/ 下/ ,/ 混合式/ 更新/ 方法/ 的/ 数据/ 读写/ 量/ 和/ 传输/ 量/ 与/ 追加/ 式/ 更新/ 方法/ 完全/ 相等/ ./ 此外/ ,/ 由于/ 在/ 访问/ 校验/ 块/ 时/ 仍然/ 需要/ 先/ 合并/ 数据/ ,/ 混合式/ 更新/ 方法/ 也/ 同样/ 存在/ 数据/ 修复/ 性能/ 差/ 等/ 不足/ ./ Page14/ 图/ 14/ 混合式/ 更新/ 方法/ 的/ 更新过程/ 示意图/ 传统/ 的/ 混合式/ 更新/ 方法/ [/ 76/ -/ 77/ ]/ 由于/ 没有/ 为/ 追加/ 的/ 数据/ 差值/ 预留/ 空间/ ,/ 追加/ 的/ 数据/ 差值/ 实际上/ 是/ 随机/ 分布/ 在/ 磁盘/ 上/ 的/ ,/ 导致/ 合并/ 数据/ 时/ 产生/ 大量/ 的/ 随机/ 读/ 操作/ ./ 针对/ 该/ 问题/ ,/ Chan/ 等/ 人/ [/ 78/ ]/ 提出/ 了/ 一种/ 预留/ 空间/ 的/ 混合式/ 更新/ 方法/ PLR/ (/ ParityLoggingwithReservedSpace/ )/ ./ PLR/ 在/ 每个/ 校验/ 块/ 后/ 预留/ 一定/ 的/ 空间/ ,/ 使/ 追加/ 的/ 数据/ 可以/ 连续/ 地/ 分布/ 在/ 磁盘/ 上/ ./ 这样/ 合并/ 数据/ 时/ 就/ 无需/ 多次/ 访问/ 磁盘/ ,/ 只/ 需/ 在/ 连续/ 的/ 空间/ 读取/ 一次/ 即可/ ,/ 既/ 减轻/ 了/ 磁盘/ 的/ 负载/ 也/ 提高/ 了/ 数据/ 修复/ 的/ 效率/ ./ PLR/ 的/ 不足之处/ 是/ 预留/ 空间/ 导致/ 增加/ 了/ 存储空间/ 的/ 消耗/ ./ 为此/ ,/ Chan/ 等/ 人/ [/ 78/ ]/ 设计/ 了/ 一种/ 负载/ 感知/ 的/ 预留/ 空间/ 动态/ 调整/ 方法/ ./ 对于/ 以/ 追加/ 的/ 方式/ 处理/ 更新/ 的/ 系统/ ,/ 需要/ 建立/ 有效/ 的/ 索引/ 信息/ 以便/ 快速/ 定位/ 原/ 数据/ 的/ 更新/ 数据/ ./ 由于/ 数据/ 更新/ 的/ 位置/ 和/ 大小/ 是/ 随机/ 的/ ,/ 一般/ 把/ 数据/ 划分/ 成/ 大小/ 固定/ 的/ 数据/ 片/ (/ 如/ 文件系统/ 的/ chunk/ )/ 作为/ 基本/ 单位/ 来/ 管理/ 更新/ 信息/ ./ 在/ 磁盘阵列/ 中/ 常用/ 的/ 索引/ 结构/ 是/ 哈希/ 日志/ 列表/ [/ 75/ ,/ 79/ ]/ ./ 如图/ 15/ 所示/ ,/ 对于/ 每个/ 被/ 更新/ 的/ 数据/ 片/ ,/ 都/ 会/ 存在/ 一个/ 与/ 之/ 对应/ 的/ 列表/ 来/ 保存/ 其/ 每次/ 更新/ 的/ 信息/ ./ 图/ 15/ 中/ ,/ LBA/ (/ LogicalBlockAddress/ )/ 表示/ 每次/ 更新/ 追加/ 的/ 数据/ 的/ 位置/ ,/ Hash/ _/ pre/ 和/ Hash/ _/ next/ 分表/ 表示/ 前/ 一次/ 更新/ 和/ 下/ 一次/ 更新/ 的/ 索引/ 信息/ 的/ 指针/ ./ 因此/ ,/ 通过/ Hash/ _/ pre/ 和/ Hash/ _/ next/ 可以/ 快速/ 遍历/ 一个/ 数据/ 片/ 的/ 所有/ 更新/ 记录/ ./ 日志/ 列表/ 适用/ 于/ 数据量/ 较/ 小/ 的/ 系统/ ./ 在/ 大规模/ 分布式/ 存储系统/ 中/ 一般/ 使用/ 键/ // 值/ 存储系统/ 来/ 保存/ 追加/ 数据/ 的/ 索引/ 信息/ ./ 例如/ ,/ PLR/ [/ 78/ ]/ 使用/ 基于/ MongoDB/ ①/ 的/ 键/ // 值/ 存储系统/ ./ 图/ 15/ 保存/ 追加/ 数据/ 索引/ 信息/ 的/ 日志/ 列表/ 结构/ 另外/ ,/ Pei/ 等/ 人/ [/ 80/ ]/ 提出/ 使用/ 树型/ 结构/ 传输/ 更新/ 数据/ ,/ 通过/ 感知机/ 架/ 位置/ ,/ 减少/ 数据/ 更新过程/ 中/ 机架/ 间/ 的/ 数据传输/ 量/ ,/ 提高/ 更新/ 效率/ ./ 7.4/ 总结/ 表/ 3/ 显示/ 了/ 上述/ 3/ 种/ 更新/ 方法/ 的/ 对比/ 情况/ ./ 其中/ ,/ 读取/ 量/ 、/ 写入/ 量/ 和/ 传输/ 量/ 分别/ 表示/ 采用/ (/ 14/ ,/ 10/ )/ -/ RS/ 码时/ 更新/ 单位/ 数据/ 平均/ 产生/ 的/ 数据/ 读取/ 量/ 、/ 数据/ 写入/ 量/ 和/ 网络/ 传输/ 量/ ./ RL/ 和/ RH/ 分别/ 表示/ 追加/ 式/ 更新/ 方法/ 和/ 混合式/ 更新/ 方法/ 因/ 数据/ 合并/ 产生/ 的/ 数据/ 读取/ 量/ ,/ WL/ 和/ WH/ 则/ 分别/ 表示/ 这/ 两种/ 方法/ 因/ 数据/ 合并/ 产生/ 的/ 数据/ 写入/ 量/ ./ 由于/ 混合/ 更新/ 方法/ 不/ 需要/ 合并/ 数据/ 块/ ,/ 在/ 合并/ 频率/ 相同/ 的/ 情况/ 下/ ,/ 混合式/ 更新/ 方法/ 的/ 数据/ 读写/ 量/ 优于/ 追加/ 式/ 更新/ 方法/ ,/ 即/ 有/ RL/ >/ RH/ 和/ WL/ >/ WH/ ./ 从表/ 3/ 可以/ 看出/ ,/ 替换/ 式/ 更新/ 方法/ 对/ 数据/ 块/ 和校验/ 块/ 进行/ 实时/ 更新/ 的/ 特点/ ,/ 提高/ 了/ 数据/ 访问/ 和/ 修复/ 的/ 效率/ ,/ 但是/ 该/ 方法/ 的/ 数据/ 读取/ 量/ 非常/ 大/ ,/ 明显降低/ 了/ 更新/ 效率/ ./ 追加/ 式/ 更新/ 方法/ 通过/ 追加/ 的/ 方式/ 显著/ 降低/ 了/ 数据/ 读取/ 量/ ,/ 提高/ 了/ 数据/ 更新/ 的/ 效率/ ,/ 但/ 增加/ 了/ 存储空间/ 消耗/ ,/ 并/ 降低/ 了/ 数据/ 读取/ 效率/ ./ 混合式/ 更新/ 方法/ 对/ 数据/ 块/ 进行/ 实时/ 更新/ ,/ 对/ 校验/ 块/ 进行/ 追加/ 更新/ ,/ 比/ 追加/ 式/ 更新/ 方法/ 具有/ 更/ 高/ 的/ 数据/ 访问/ 性能/ 和/ 更/ 低/ 的/ 存储空间/ 消耗/ ./ 表/ 33/ 种/ 数据/ 更新/ 方法/ 的/ 对比/ (/ 犚/ 犔/ >/ 犚/ 犎/ ,/ 犠/ 犔/ >/ 犠/ 犎/ )/ 更新/ 方法/ 读取/ 量/ 写入/ 量/ 传输/ 量读/ 操作/ 写/ 操作/ 替换/ 式/ 554/ 连续/ 随机/ 追加/ 式/ 1/ +/ RL5/ +/ WL4/ 随机/ 顺序/ 混合式/ 1/ +/ RH5/ +/ WH4/ 连续/ 随机/ +/ 顺序/ 8/ 其它/ 研究/ 8.1/ 带/ 扇区/ 容错/ 的/ 纠/ 删码/ 带/ 扇区/ 容错/ 的/ 纠/ 删码/ 是/ 针对/ 磁盘/ 扇区/ 出错/ 和/ SSD/ 存储单元/ 易/ 磨损/ ,/ 且/ 这些/ 错误/ 很难/ 发现/ 的/ 问题/ 提出/ 的/ ./ 整个/ 磁盘/ 或/ 节点/ 的/ 失效/ 非常容易/ 被/ 探测/ 到/ ,/ 但是/ 存储介质/ 基本/ 单元/ 的/ 失效/ 只有/ 通过/ 全盘/ 扫描/ 才能/ 发现/ ./ 庞大/ 的/ 数据量/ 使得/ 无法/ 频繁/ 进行/ 这样/ 的/ 扫描/ ,/ 从而/ 使得/ 系统/ 中/ 存在/ 大量/ 的/ “/ 隐含/ ”/ 失效/ ./ 当/ 系统/ ①/ http/ :/ // // www/ ./ mongodb/ ./ orgPage15/ 探测/ 到/ 磁盘/ 或/ 节点/ 失效/ 时/ ,/ 就/ 有/ 可能/ 因/ “/ 隐含/ ”/ 失效/ 过多/ 而/ 导致/ 某些/ 数据/ 无法/ 修复/ ./ 图/ 16/ 显示/ 了/ 一种/ “/ 隐含/ ”/ 失效/ 导致/ (/ 6/ ,/ 4/ )/ -/ RS/ 码/ 无法/ 修复/ 的/ 情况/ ./ 其中/ 整个/ 磁盘/ 0/ 失效/ ,/ 但是/ 因为/ 磁盘/ 3/ 和/ 磁盘/ 4/ 的/ 相同/ 位置/ 均/ 存在/ “/ 隐含/ ”/ 的/ 失效/ 扇区/ ,/ 导致/ 扇区/ d0/ ,/ 0/ 无法/ 修复/ ,/ 同时/ 磁盘/ 3/ 和/ 磁盘/ 4/ 上/ 的/ 失效/ 扇区/ d3/ ,/ 0/ 和/ p0/ ,/ 0/ 也/ 无法/ 修复/ ,/ 造成/ 数据/ 永久/ 丢失/ ./ 图/ 16/ 扇区/ 失效/ 导致/ (/ 6/ ,/ 4/ )/ -/ RS/ 码/ 无法/ 修复/ 情况/ 示意图/ 应对/ “/ 隐含/ ”/ 失效/ 的/ 简单/ 方法/ 是/ 采用/ 容错/ 能力/ 更强/ 的/ 纠/ 删码/ ./ 但是/ 这种/ 方法/ 的/ 存储/ 成本/ 极高/ ,/ 每/ 一个/ 额外/ 扇区/ 的/ 容错/ 能力/ 都/ 要求/ 增加/ 一个/ 额外/ 的/ 冗余/ 磁盘/ ./ 针对/ 上述/ 问题/ ,/ Plank/ 等/ 人/ [/ 81/ -/ 82/ ]/ 提出/ 了/ SD/ (/ Sector/ -/ Disk/ )/ 码/ ./ SD/ 码/ 能够/ 容忍/ 任意/ m/ 个/ 磁盘/ 和/ 任意/ s/ 个/ 扇区/ 同时/ 失效/ ./ 如图/ 17/ 所示/ ,/ 除了/ m/ 个/ 校验/ 磁盘/ 外/ ,/ SD/ 码/ 任意/ s/ 个/ 扇区/ 的/ 容错/ 能力/ 只/ 需/ 额外/ 增加/ s/ 个/ 扇区/ 的/ 校验/ 数据/ ,/ 存储/ 成本/ 极低/ ./ SD/ 码对/ 失效/ 扇区/ 的/ 分布/ 没有/ 任何/ 要求/ ./ 但是/ SD/ 码/ 的/ m/ 和/ s/ 不能/ 任意/ 取值/ ,/ 只有/ 在/ m/ 和/ s/ 的/ 取值/ 满足/ 一定/ 条件/ 的/ 情况/ 下/ ,/ SD/ 码/ 才能/ 被/ 构造/ 出来/ ./ 并且/ ,/ SD/ 码/ 的/ 构造/ 需要/ 进行/ 穷尽/ 搜索/ ./ 更/ 严重/ 的/ 问题/ 是/ ,/ SD/ 码/ 往往/ 需要/ 在/ 很大/ 的/ 有限/ 域/ 上/ 进行/ 构造/ ,/ 极大/ 地/ 增加/ 了/ 编码/ 和/ 数据/ 修复/ 的/ 复杂度/ ./ PMDS/ (/ Partial/ -/ MDS/ )/ 码/ [/ 83/ ]/ 也/ 是/ 带/ 扇区/ 容错/ 的/ MDS/ 码/ ,/ 是/ SD/ 码/ 的/ 子集/ ./ 针对/ SD/ 码/ 存在/ 的/ 问题/ ,/ Li/ 等/ 人/ [/ 84/ ]/ 提出/ 了/ STAIR/ 码/ ./ STAIR/ 码/ 同样/ 只/ 需/ s/ 个/ 扇区/ 的/ 额外/ 校验/ 数据/ 即可/ 提供/ s/ 个/ 扇区/ 的/ 容错/ 能力/ ./ 与/ SD/ 码能/ 容忍/ 任意/ s/ 个/ 扇区/ 失效/ 不同/ ,/ STAIR/ 码/ 限制/ 了/ 包含/ 失效/ 扇区/ 的/ 磁盘/ 个数/ 和/ 每个/ 磁盘/ 包含/ 失效/ 扇区/ 的/ 最大/ 个数/ ./ 但是/ ,/ STAIR/ 码对/ 任意/ 的/ m/ 和/ s/ 均/ 存在/ ,/ 并且/ STAIR/ 码/ 可以/ 使用/ 统一/ 易行/ 的/ 方法/ 正向/ 构造/ 出来/ ./ 此外/ ,/ STAIR/ 码/ 的/ 构造/ 也/ 不/ 需要/ 在/ 很大/ 的/ 有限/ 域/ 上/ 进行/ ,/ 编码/ 和/ 修复/ 的/ 复杂度/ 更/ 低/ ./ 然而/ ,/ 上述/ 几种/ 带/ 扇区/ 容错/ 纠/ 删码/ 的/ 数据/ 更新/ 成本/ 极高/ ./ 这些/ 纠/ 删码/ 中/ 校验/ 磁盘/ 上/ 的/ 每个/ 扇区/ 和/ 每个/ 专门/ 的/ 校验/ 扇区/ 都/ 与/ 所有/ 的/ 数据/ 扇区/ 相关/ ./ 这/ 使得/ 更新/ 任意/ 一个/ 数据/ 扇区/ 都/ 要/ 同步/ 更新/ 所有/ 的/ 校验/ 磁盘/ 的/ 所有/ 扇区/ 和/ 所有/ 校验/ 扇区/ ,/ 需要/ 传输/ 大量/ 的/ 数据/ 并/ 进行/ 大量/ 的/ 运算/ ./ 8.2/ 混合/ 使用/ 多种/ 纠/ 删码/ 不同/ 纠/ 删码/ 具有/ 不同/ 的/ 存储空间/ 开销/ 和/ 数据/ 修复/ 开销/ ./ 一般/ 情况/ 下/ ,/ 存储空间/ 开销/ 越高/ 的/ 纠/ 删码/ 其/ 数据/ 修复/ 开销/ 越低/ ;/ 反之亦然/ ./ 混合/ 使用/ 多种/ 纠/ 删码/ 可以/ 同时/ 发挥/ 多种/ 纠/ 删码/ 的/ 优势/ ./ Xia/ 等/ 人/ [/ 85/ ]/ 提出/ 通过/ 跟踪/ 数据/ 的/ 访问/ 频率/ 来/ 动态/ 调整/ 纠/ 删码/ 的/ 参数/ ,/ 以/ 达到/ 既/ 降低/ 存储空间/ 开销/ 又/ 提高/ 失效/ 数据/ 访问速度/ 的/ 目的/ ./ 有些/ 纠/ 删码/ 存储空间/ 利用率/ 较/ 高/ ,/ 但/ 数据/ 修复/ 速度/ 很/ 慢/ ;/ 有些/ 纠/ 删码/ 存储空间/ 利用率/ 较/ 低/ ,/ 但是/ 数据/ 修复/ 速度/ 较快/ ./ 我们/ 知道/ ,/ 对系统/ 中/ 数据/ 的/ 访问/ 往往/ 是/ 不/ 均衡/ 的/ ./ 有些/ 数据/ 很/ “/ 热/ ”/ ,/ 经常/ 被/ 访问/ ;/ 有些/ 数据/ 则/ 很/ “/ 冷/ ”/ ,/ 很少/ 被/ 访问/ ./ 数据/ 的/ “/ 冷/ ”/ 和/ “/ 热/ ”/ 也/ 是/ 动态变化/ 的/ ./ 当/ 数据/ 较/ “/ 热/ ”/ 的/ 时候/ 使用/ 存储空间/ 开销/ 较大/ 但/ 数据/ 修复/ 较/ 快/ 的/ 纠/ 删码/ ;/ 当/ 数据/ 较/ “/ 冷/ ”/ 的/ 时候/ 则/ 使用/ 数据/ 修复/ 较慢/ 但/ 存储空间/ 开销/ 较/ 低/ 的/ 纠/ 删码/ ./ 这样/ 整体/ 上/ 既/ 能/ 保证/ 较/ 快/ 的/ 失效/ 数据/ 访问速度/ 也/ 能/ 保持/ 较/ 低/ 存储空间/ 开销/ ./ 但是/ ,/ 如果/ 使用/ 完全/ 不同/ 种类/ 的/ 纠/ 删码/ ,/ 每次/ 动态/ 转换/ 都/ 相当于/ 完全/ 重新/ 进行/ 了/ 一次/ 编码/ ,/ 成本/ 极高/ ./ 较/ 好/ 的/ 方法/ 是/ 在/ 同/ 一种/ 纠/ 删码/ 的/ 不同/ 参数/ 之间/ 转换/ ,/ 这样/ 可以/ 减少/ 转换/ 需要/ 重新/ 产生/ 的/ 校验/ 数据/ 以及/ 数据/ 的/ 读取/ 和/ 传输/ ./ 例如/ ,/ 可以/ 采用/ 如/ LRC/ 码/ [/ 20/ ]/ 这样/ 的/ 分组码/ ,/ 通过/ 调整/ 分组/ 的/ 大小/ 来/ 调整/ 数据/ 修复/ 的/ 速度/ 和/ 存储空间/ 开销/ ./ 调整/ 的/ 过程/ 中/ ,/ 全局/ 校验/ 块/ 完全/ 不/ 需要/ 重新/ 产生/ ./ 图/ 18/ 显示/ 了/ LRC/ (/ 12/ ,/ 6/ ,/ 2/ )/ 码/ 和/ LRC/ (/ 12/ ,/ 2/ ,/ 2/ )/ 码/ 的/ 相互/ 转化/ 过程/ ./ 从/ LRC/ (/ 12/ ,/ 2/ ,/ 2/ )/ 码/ 转化/ 为/ LRC/ (/ 12/ ,/ 6/ ,/ 2/ )/ 码/ 只/ 需/ 将/ 6/ 个/ 局部/ 校验/ 块/ 合并/ 为/ 2/ 个/ 即可/ ;/ 从/ LRC/ (/ 12/ ,/ 6/ ,/ 2/ )/ Page16/ 码/ 转化/ 为/ LRC/ (/ 12/ ,/ 2/ ,/ 2/ )/ 码/ 也/ 只/ 需/ 读取/ 2/ // 3/ 的/ 数据/ 块/ 和/ 2/ 个/ 局部/ 校验/ 块/ ./ 图/ 18LRC/ (/ 12/ ,/ 6/ ,/ 2/ )/ 码/ 和/ LRC/ (/ 12/ ,/ 2/ ,/ 2/ )/ 码/ 的/ 相互/ 转化/ 除了/ 多种/ 纠/ 删码/ 混合/ 使用/ ,/ 多/ 副本/ 也/ 经常/ 和/ 纠/ 删码/ 一起/ 使用/ ./ 最/ 常见/ 的/ 使用/ 方式/ 是/ 先用/ 多/ 副本/ 保存/ 新/ 产生/ 的/ 数据/ ,/ 过/ 一段时间/ 后/ 再/ 转换/ 为/ 纠/ 删码/ ./ 这种/ 方式/ 不仅/ 简化/ 了/ 编码/ 实现/ ,/ 也/ 提高/ 了/ 数据/ 的/ 访问速度/ ,/ 因为/ 新/ 产生/ 的/ 数据/ 往往/ 是/ 被/ 频繁/ 访问/ 的/ “/ 热/ ”/ 数据/ ./ HDFS/ -/ RAID/ [/ 34/ ]/ 、/ 微软/ 的/ 云/ 存储系统/ WAS/ [/ 35/ ]/ 、/ 百度/ 云盘/ 的/ 存储系统/ Atlas/ [/ 33/ ]/ 和/ 阿里巴巴/ 的/ TFS/ 等/ 系统/ 都/ 使用/ 了/ 这种/ 方式/ ./ 另外/ 一种/ 常见/ 的/ 混合/ 使用/ 方式/ 是/ ,/ 用/ 多/ 副本/ 保存/ 那些/ 被/ 频繁/ 访问/ 、/ 对/ 性能/ 有/ 重大/ 影响/ 且/ 规模/ 小/ 的/ 数据/ ,/ 用/ 纠/ 删码/ 保存/ 规模/ 庞大/ 的/ 数据/ ./ 例如/ ,/ Zhang/ 等/ 人/ [/ 86/ ]/ 在/ 提出/ 在/ 内存/ 键/ // 值/ 存储系统/ 中/ 使用/ 多/ 副本/ 保存/ 规模/ 小且/ 极为/ 分散/ 的/ 元/ 数据/ 和/ “/ 键/ ”/ ,/ 用/ 纠/ 删码/ 保存/ 规模/ 较大/ 的/ “/ 值/ ”/ ./ TFS/ 文件系统/ 也/ 使用/ 了/ 这种/ 方式/ ./ 此外/ ,/ TFS/ 文件系统/ 还/ 使用/ 多/ 副本/ 与/ 纠/ 删码/ 相结合/ 的/ 方式/ 来/ 处理/ 数据/ 更新/ ./ TFS/ 文件系统/ 直接/ 将/ 新/ 的/ 数据/ 追加/ 到/ 数据/ 块/ 和校验/ 块/ 之后/ ./ 更新/ 时/ 不用/ 读取/ 原/ 数据/ ,/ 读取/ 新/ 数据/ 时/ 也/ 不用/ 合并/ 数据/ ./ 8.3/ 磁盘/ 失效/ 预测/ 近年来/ ,/ 出现/ 的/ 应对/ 数据/ 修复/ 挑战/ 的/ 最新/ 思路/ 是/ 磁盘/ 失效/ 预测/ ./ 通过/ 预测/ 磁盘/ 的/ 失效/ ,/ 可以/ 提前/ 备份/ 即将/ 失效/ 磁盘/ 上/ 的/ 数据/ ,/ 从而/ 将/ 数据/ 修复/ 转化/ 为/ 复制/ ,/ 不仅/ 可/ 有效/ 降低/ 数据/ 修复/ 开销/ 也/ 可/ 提高/ 数据/ 访问速度/ ./ EMC/ 公司/ 的/ Ma/ 等/ 人/ [/ 87/ ]/ 分析/ 了/ 5/ 年/ 来/ 约/ 一百万个/ 磁盘/ 的/ 追踪/ 数据/ ,/ 发现/ 磁盘/ 的/ 失效/ 概率/ 与/ 磁盘/ 中/ 再/ 分配/ 扇区/ 的/ 个数/ 有着/ 明显/ 的/ 正/ 相关/ 关系/ ./ 鉴于/ 此/ ,/ Ma/ 等/ 人/ [/ 87/ ]/ 提出/ 了/ 完全/ 基于/ 磁盘/ 再/ 分配/ 扇区/ 个数/ 的/ 磁盘/ 失效/ 预测/ 方法/ RAIDShield/ ,/ 将/ 再/ 分配/ 扇区/ 数目/ 达到/ 一定/ 阈值/ 的/ 磁盘/ 作为/ 即将/ 失效/ 的/ 磁盘/ ./ 大规模/ 长时间/ 的/ 运行/ 表明/ ,/ RAIDShield/ 可以/ 有效/ 地/ 预测/ 磁盘/ 失效/ ,/ 极大/ 减少/ 过多/ 磁盘/ 同时/ 失效/ 导致/ 整个/ RAID/ 失效/ 的/ 概率/ ./ 9/ 研究/ 展望/ 关于/ 大规模/ 分布式/ 存储/ 中/ 纠/ 删码/ 容错/ 技术/ ,/ 未来/ 值得/ 进一步/ 研究/ 的/ 方向/ 主要/ 包括/ 以下/ 几个/ 方面/ ./ (/ 1/ )/ 同步/ 编码/ 实现/ 技术/ 现有/ 的/ 编码/ 实现/ 方法/ 都/ 是/ 异步/ 编码/ ,/ 利用/ 多/ 副本/ 技术/ 来/ 保证/ 编码/ 之前/ 的/ 数据/ 可靠性/ ./ 在/ 编码/ 之前/ ,/ 数据/ 的/ 多个/ 副本/ 同时/ 提供/ 服务/ ,/ 可以/ 获得/ 更/ 高/ 的/ 访问/ 吞吐/ 率/ ,/ 这/ 对/ 那些/ 需要/ 对/ 数据/ 进行/ 大量/ 分析/ 计算/ 的/ 存储系统/ 具有/ 较大/ 意义/ ./ 但是/ ,/ 对于/ 无需/ 进行/ 大量/ 运算/ 的/ 系统/ ,/ 比如/ 向/ 用户/ 提供/ 文件/ 存储/ 服务/ 的/ 个人/ 云盘/ 、/ 提供/ 视频流/ 或/ 视频/ 分享/ 的/ 视频/ 存储系统/ 等/ ,/ 由于/ 访问/ 瓶颈/ 存在/ 于/ 互联网/ ,/ 异步/ 编码/ 中/ 的/ 多个/ 副本/ 无法/ 有效/ 提高/ 用户/ 的/ 访问速度/ ,/ 并/ 存在/ 较为/ 严重/ 的/ 资源/ 浪费/ ./ 因此/ ,/ 有/ 必要/ 研究/ 同步/ 编码/ 实现/ 技术/ ,/ 在/ 数据/ 存储/ 时/ 就/ 立刻/ 进行/ 编码/ ,/ 避免/ 复制/ 数据/ 占用/ 大量/ 磁盘/ 和/ 网络资源/ ./ (/ 2/ )/ 低/ 冗余/ 再生/ 码/ 设计/ 再生/ 码/ 能够/ 显著/ 降低/ 数据/ 修复/ 开销/ ,/ 但是/ 其/ 存储/ 开销/ 较大/ ./ 现有/ 的/ 关于/ 再生/ 码/ 的/ 研究/ 工作/ 都/ 是/ 在/ 一定/ 数据/ 修复/ 开销/ 的/ 前提/ 下/ ,/ 大致/ 估算/ 存储空间/ 消耗/ ,/ 然后/ 再/ 构造/ 具体/ 编码/ ./ 但是/ 以/ 存储空间/ 利用率/ 为/ 前提/ ,/ 研究/ 再生/ 码/ 数据/ 修复/ 开销/ 的/ 下界/ ,/ 并/ 进一步/ 构造/ 具体/ 的/ 再生/ 码/ ,/ 也/ 是/ 极具/ 挑战/ 的/ 研究/ 工作/ ./ 从/ 这个/ 思路/ 出发/ ,/ 就/ 有/ 可能/ 设计/ 出/ 兼顾/ 存储/ 开销/ 和/ 数据/ 修复/ 开销/ 的/ 再生/ 码/ ./ (/ 3/ )/ 数据/ 失效/ 预测/ 技术/ 较/ 高/ 的/ 数据/ 修复/ 开销/ 一直/ 是/ 纠/ 删码/ 在/ 大/ 数据/ 存储/ 中/ 面临/ 的/ 一个/ 重大/ 挑战/ ./ 设计/ 新/ 的/ 纠/ 删码/ 和/ 数据/ 修复/ 技术/ 可以/ 在/ 一定/ 程度/ 上/ 解决/ 这些/ 问题/ ,/ 但是/ 无法/ 根本/ 解决问题/ ./ Ma/ 等/ 人/ [/ 87/ ]/ 对/ 磁盘/ 失效/ 预测/ 的/ 研究/ 为/ 解决/ 这个/ 挑战/ 指出/ 了/ 一个/ 新/ 的/ 有效/ 思路/ ./ 如果/ 能够/ 预测/ 节点/ 或/ 磁盘/ 的/ 失效/ ,/ 就/ 可以/ 提前/ 复制/ 其中/ 的/ 数据/ ,/ 避免/ 失效/ 后/ 的/ 数据/ 修复/ ./ 根据/ 我们/ 的/ 初步/ 估算/ ,/ 即使/ 失效/ 预测/ 的/ 准确率/ 只有/ 50/ %/ ,/ 也/ 可/ 将/ 数据/ 修复/ 开销/ 降低/ 40/ %/ ./ 10/ 总/ 结构/ 建于/ 商用/ 廉价/ 服务器/ 之上/ 的/ 分布式/ 存储系统/ 具有/ 服务/ 能力/ 强/ 、/ 扩展性/ 好/ 和/ 成本/ 低廉/ 等/ 优点/ ,/ 被/ 广泛应用/ 于/ 大/ 数据/ 的/ 存储管理/ ./ 分布式/ 存储系统/ 中节/ Page17/ 点/ 失效/ 的/ 常态/ 化/ 使得/ 数据/ 容错/ 不可或缺/ ./ 近年来/ ,/ 纠/ 删码/ 作为/ 一种/ 容错/ 能力/ 强且/ 存储/ 开销/ 小/ 的/ 数据/ 容错/ 技术/ ,/ 受到/ 了/ 业界/ 的/ 广泛/ 关注/ ./ 本文/ 首先/ 指出/ 了/ 纠/ 删码/ 容错/ 技术/ 在/ 分布式/ 存储/ 中/ 面临/ 的/ 主要/ 技术/ 挑战/ ;/ 然后/ 分类/ 综述/ 了/ 分布式/ 存储/ 中/ 纠/ 删码/ 容错/ 技术/ 的/ 相关/ 研究进展/ ,/ 重点/ 分析/ 了/ 各种/ 方法/ 的/ 优缺点/ ;/ 最后/ ,/ 本文/ 基于/ 最新/ 研究/ 动态/ 对/ 今后/ 的/ 研究/ 方向/ 进行/ 了/ 展望/ ./ 

