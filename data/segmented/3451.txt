Page1NoC/ 目录/ 协议/ 能耗/ 分析/ 与/ 建模/ 研究/ 王继禾/ 1/ )/ 郭兵/ 1/ )/ 沈艳/ 2/ )/ 伍元/ 胜/ 1/ )/ 刘云本/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 四川大学/ 计算机/ 学院/ 成都/ 610065/ )/ 2/ )/ (/ 成都/ 信息/ 工程学院/ 控制/ 工程学院/ 成都/ 610225/ )/ 摘要/ 在/ MPSoC/ 芯片/ 设计/ 中/ ,/ 能耗/ 问题/ 是/ 一个/ 关键因素/ ,/ NoC/ (/ Network/ -/ on/ -/ Chip/ 片上/ 网络/ )/ 的/ 能耗/ 占/ 芯片/ 总/ 能耗/ 的/ 50/ %/ 以上/ ./ 文中/ 首先/ 对/ NoC/ 应用层/ 协议/ 的/ 能耗/ 行为/ 进行/ 统一/ 的/ 数学/ 描述/ ,/ 在/ 此基础/ 上/ ,/ 针对/ 目前/ Cache/ 一致性/ 中/ 常用/ 的/ 目录/ 协议/ 进行/ 深入分析/ ,/ 提出/ 一种/ 基于/ 位置/ 概率分布/ 的/ 目录/ 协议/ 能耗/ 模型/ ,/ 其/ 考虑/ 目录/ 信息/ 与/ 数据/ 块/ 节点/ 位置/ 分布/ 的/ 无关/ 性/ ,/ 定位/ 数据/ 块/ 在/ NoC/ 中/ 的/ 节点/ 位置/ ,/ 计算/ 任意/ 节点/ 间/ 数据传输/ 的/ 概率/ 矩阵/ ,/ 并/ 结合/ 路由/ 单元/ 能耗/ 、/ 连线/ 能耗/ 以及/ 网络拓扑/ 结构/ ,/ 准确/ 获得/ 目录/ 协议/ 中/ 一次/ 数据/ 块/ 传输/ 的/ 能耗/ ./ 仿真/ 实验/ 表明/ ,/ 该文/ 提出/ 的/ 模型/ 在/ 发包/ 概率/ 稳定/ 的/ Mesh/ (/ 网孔/ )/ 网络/ 中/ 可/ 有效/ 计算/ 出/ 不同/ 类型/ 目录/ 协议/ 产生/ 的/ 能耗/ ,/ 且/ 精度/ 较/ 高/ (/ 误差/ 小于/ 2/ %/ )/ ,/ 为/ 下/ 一步/ 协议/ 能耗/ 优化/ 研究/ 提供/ 可信/ 的/ 量化/ 的/ 评判/ 依据/ ./ 关键词/ MPSoC/ ;/ NoC/ ;/ 协议/ 功耗/ ;/ 目录/ 协议/ ;/ Cache/ 一致性/ 1/ 引言/ 目前/ 处理器/ 的/ 发展趋势/ 倾向/ 于/ 采用/ 多核/ 集成/ 的/ 策略/ ,/ 随着/ 芯片/ 的/ 集成度/ 越来越/ 高/ ,/ 设计/ 复杂性/ 不断/ 上升/ ,/ 对/ 计算机系统/ 的/ 能耗/ 也/ 带来/ 严重/ 挑战/ ./ 因此/ ,/ 在/ MPSoC/ (/ Multi/ -/ ProcessorSoC/ 多核/ SoC/ )/ 芯片/ 设计/ 中/ ,/ 能耗/ 问题/ 始终/ 是/ 一个/ 关键因素/ [/ 1/ ]/ ./ 在/ MPSoC/ 中/ ,/ 核/ 间通信/ 主要/ 包括/ 总线/ 监听/ 、/ 交叉开关/ 和/ NoC/ (/ NetworkonChip/ 片上/ 网络/ )/ 3/ 种/ 方式/ ./ 其中/ ,/ 总线/ 监听/ 一般/ 适用/ 于/ 规模较/ 小/ 的/ 多/ 核/ 网络/ ,/ 如/ ARMCotex/ -/ A9/ 处理器/ 中/ 采用/ 侦听/ 控制/ 单元/ (/ SnoopControlUnit/ )/ 控制/ 多核/ 在/ AMBA/ 总线/ 上/ 的/ 通信/ ;/ 使用/ 交叉开关/ 的/ 典型/ 例子/ 是/ AMDAthlon64X2/ 处理器/ ,/ 利用/ 交叉/ 互联网络/ 和/ 系统/ 请求/ 接口/ 对/ 各个/ CPU/ 核/ 的/ 请求/ 进行/ 仲裁/ ./ 由于/ 上述/ 两种/ 通信/ 方式/ 都/ 不/ 适合/ 高端/ 的/ 多/ 核/ 和/ 众核/ 互联/ ,/ 所以/ 包交换/ 网络/ 互连/ 的/ 思想/ 被/ 引入/ 到/ MPSoC/ 核/ 间通信/ 设计/ 中/ ,/ NoC/ 将/ 成为/ 未来/ MPSoC/ 的/ 主流/ 通信/ 方式/ [/ 2/ ]/ ./ 目前/ NoC/ 的/ 能耗/ 一般/ 占/ 芯片/ 总/ 能耗/ 的/ 50/ %/ 以上/ [/ 3/ ]/ ,/ 其中/ 静态/ 能耗/ 主要/ 由/ 器件/ 的/ 漏电/ 电流/ 造成/ ,/ 动态/ 能耗/ 由/ 器件/ 的/ 0/ // 1/ 翻转/ 和/ 短路/ 电流/ 造成/ ./ 由于/ NoC/ 的/ 动态/ 能耗/ 主要/ 由/ 协议/ 活动/ 产生/ ,/ 因此/ ,/ 开展/ NoC/ 协议/ 能耗/ 问题/ 的/ 分析/ 与/ 建模/ 是/ 十分必要/ 的/ ./ 关于/ NoC/ 协议/ 能耗/ 问题/ 的/ 一些/ 代表性/ 工作/ 包括/ :/ Benini/ [/ 4/ ]/ 于/ 2001/ 年/ 首次/ 完整/ 描述/ 了/ NoC/ 系统/ 的/ 能耗/ ,/ 从/ 能耗/ 产生/ 的/ 角度/ 将/ NoC/ 划分/ 成/ 多个/ 层次/ ;/ Bhat/ [/ 5/ ]/ 给出/ 了/ NoC/ 包交换/ 中/ 各片/ 上/ 传输/ 部件/ 的/ 能耗/ 模型/ ,/ 并/ 得到/ 了/ 各/ 部件/ 单次/ 执行/ 的/ 能耗/ 值/ ;/ Li/ [/ 3/ ]/ 将/ DVS/ (/ 动态/ 电压/ 调整/ )/ 用于/ NoC/ 节点/ 间/ 互联/ ,/ 通过/ 动态/ 调整/ 电压/ 和/ 频率/ 降低/ NoC/ 通信/ 能耗/ ;/ Wang/ [/ 6/ ]/ 采用/ 了/ 分组/ Cache/ 的/ 方法/ 将/ 分布式/ 存储/ 组织/ 成/ 多个/ 自治/ 域/ ,/ 从而/ 降低/ 了/ Cache/ 一致性/ 协议/ 的/ 能耗/ ./ 但是/ ,/ 上述/ 工作/ 都/ 没有/ 给出/ 明确/ 的/ 协议/ 能耗/ 模型/ ,/ 导致/ NoC/ 协议/ 能耗/ 优化/ 缺乏/ 理论/ 支撑/ ./ 因此/ ,/ 本文/ 将/ 重点/ 研究/ Cache/ 一致性/ 协议/ 的/ 能耗/ 模型/ 及其/ 能耗/ 影响/ 因素/ ,/ 为/ 能量/ 有效/ 的/ NoC/ 协议/ 设计/ 和/ 优化/ 奠定/ 基础/ ./ 尽管/ 能耗/ 和/ 功耗/ 是/ 两个/ 不同/ 的/ 概念/ ,/ 但是/ 在/ 相关/ 研究/ 领域/ 中/ 许多/ 泛指/ 情况/ 下/ 可/ 互换/ 使用/ ,/ 一些/ 低功耗/ 的/ 研究/ 工作/ 实际上/ 是/ 优化/ 系统/ 的/ 能量消耗/ ./ 因此/ ,/ 在/ 不会/ 引起/ 混淆/ 的/ 情况/ 下/ ,/ 本文/ 不/ 详细/ 区分/ 能耗/ 和/ 功耗/ 的/ 概念/ ./ 本文/ 第/ 2/ 节/ 介绍/ NoC/ 协议/ 的/ 基本/ 组成/ 及/ 应用层/ 协议/ 能耗/ 的/ 统一/ 描述/ ;/ 第/ 3/ 节/ 描述/ NoC/ 物理层/ 协议/ 的/ 能耗/ ,/ 分析/ NoC/ 中/ 能耗/ 是/ 如何/ 在/ 连线/ 和/ 路由/ 单元/ (/ 路由/ 节点/ )/ 中/ 产生/ 的/ ;/ 第/ 4/ 节对/ 目录/ 协议/ 能耗/ 进行/ 建模/ ,/ 得出/ 单个/ 数据包/ (/ message/ )/ 传输/ 的/ 能耗/ 模型/ ;/ 第/ 5/ 节对/ 提出/ 的/ 能耗/ 模型/ 进行/ 实验/ 验证/ ;/ 第/ 6/ 节对/ 未来/ 的/ 工作/ 进行/ 展望/ ./ 2NoC/ 协议/ 栈及/ 协议/ 能耗/ 的/ 描述/ 2.1/ NoC/ 协议/ 栈/ 在/ 文献/ [/ 5/ ]/ 中/ ,/ Bhat/ 试图/ 将/ NoC/ 纳入/ 到/ 一般/ 网络/ 的/ 体系结构/ 中/ ,/ 希望/ 完全/ 按照/ ISO/ // OSI/ (/ OpenSystemInterconnection/ 开放系统/ 互连/ )/ 的/ 分层/ 结构设计/ 现有/ 的/ NoC/ ,/ 但是/ NoC/ 与/ OSI/ 之间/ 在/ 设计/ 目标/ 和/ 工作/ 环境/ 方面/ 存在/ 一些/ 差异/ :/ 次/ 对比/ (/ 如图/ 1/ 所示/ )/ ./ (/ 1/ )/ NoC/ 的/ 设计/ 目标/ 与/ OSI/ 不同/ ./ OSI/ 是/ 满足/ 各种/ 应用/ 需求/ 的/ 通用/ 网络/ ,/ 而/ NoC/ 是/ 面向/ Cache/ 一致性/ 的/ 专用/ 网络/ ,/ 二者/ 在/ 低层/ 设计/ 上/ 有/ 相似之处/ ,/ 但/ 在/ 上层/ 的/ 实现/ 上/ 存在/ 较大/ 的/ 差别/ ./ (/ 2/ )/ OSI/ 与/ NoC/ 的/ 工作/ 环境/ 不同/ ./ OSI/ 的/ 应用环境/ 往往/ 不可/ 预知/ ,/ 其/ 设计/ 十分/ 强调/ QoS/ (/ QualityofService/ 服务质量/ )/ ,/ 但是/ NoC/ 一般/ 工作/ 在/ MPSoC/ 中/ ,/ 对/ 信息/ 传输/ 环境/ 的/ 适应性/ 不是/ 设计者/ 考虑/ 的/ 主要/ 问题/ ,/ 而令/ 设计者/ 头痛/ 的/ 是/ 片/ 上/ 资源/ 的/ 局限性/ 和/ 能耗/ 难以/ 控制/ ./ 换言之/ ,/ NoC/ 的/ 设计/ 更加/ 强调/ 不同/ 层次/ 之间/ 的/ 统一/ 描述/ 和/ 软/ -/ 硬件/ 的/ 协同/ 设计/ ,/ 而/ 不/ 像/ OSI/ 追求/ 各层/ 协议/ 之间/ 相互/ 独立/ ./ 因此/ ,/ NoC/ 更应/ 遵循/ 整体/ 设计/ 的/ 思路/ ./ 进一步/ 地/ ,/ 可/ 将/ NoC/ 和/ OSI/ 的/ 协议/ 模型/ 进行/ 层/ Page3/ (/ 1/ )/ 在/ 下层/ (/ 传输层/ 以下/ )/ 协议/ 中/ ,/ NoC/ 与/ OSI/ 协议/ 栈/ 几乎/ 对/ 等/ ,/ NoC/ 依然/ 需要/ 物理层/ 和/ 链路层/ 对/ 信号/ 进行/ 编码/ 和/ 传输/ ./ 由于/ 一个/ 设计/ 好/ 的/ NoC/ 拓扑/ 结构/ 相对/ 简单/ 且/ 固定/ ,/ 因此/ 片上/ 通信/ 中/ 的/ 路由/ 协议/ 也/ 相对/ 简化/ ,/ 如/ 一种/ 简单/ 有效/ 的/ 路由/ 协议/ 是/ X/ -/ Y/ 路由/ ,/ 将/ 一个/ 数据/ 微片/ (/ Flit/ ,/ FlowControlUnit/ )/ 先/ 按照/ X/ 轴/ 方向/ 传输/ ,/ 到达/ 目标/ 列/ 之后/ 再/ 按照/ Y/ 轴/ 方向/ 传输/ ,/ 最终/ 到达/ 目的/ 节点/ ./ (/ 2/ )/ 在/ 上层/ 协议/ 中/ ,/ NoC/ 和/ OSI/ 协议/ 栈/ 的/ 差异/ 较大/ ,/ 功能/ 上/ 也/ 不/ 完全/ 对/ 等/ ./ 这/ 是因为/ 对于/ NoC/ 来说/ ,/ OSI/ 中/ 提供/ 服务质量/ 保证/ 的/ 传输层/ 复杂度/ 较/ 高/ ,/ 难以/ 利用/ 片上/ 较/ 低/ 的/ 软/ -/ 硬件/ 成本/ 实现/ ./ 如何/ 在/ 增强/ 传输/ 可靠性/ 和/ 降低/ 设计/ 复杂度/ 之间/ 取得/ 平衡/ ,/ 已/ 成为/ 当今/ NoC/ 研究/ 的/ 一个/ 热点问题/ ,/ 如/ 文献/ [/ 7/ ]/ 中/ 提出/ 的/ 一种/ 增强/ 传输/ 可靠性/ 的/ 反馈/ 控制/ 方法/ ,/ 依然/ 难以/ 摆脱/ 实现/ 成本/ 过高/ 的/ 问题/ ,/ 并且/ 严重/ 制约/ 了/ 传输/ 效率/ ./ 对于/ NoC/ 应用层/ 协议/ ,/ 可/ 细分/ 为/ 3/ 个子/ 层/ ./ (/ 1/ )/ CPU/ &/ L1Cache/ 读写/ 层/ ./ 当/ CPU/ 发生/ 读/ -/ 写/ 操作/ 时/ ,/ 若/ 目标/ 地址/ 所/ 指向/ 的/ 内存/ 块/ 不/ 在/ 本地/ L1Cache/ 中/ ,/ 将/ 向/ NoC/ 接口/ 发出/ 读/ -/ 写/ 请求/ ,/ 并/ 保存/ 在/ 接口/ 请求/ 队列/ 中/ ,/ 由/ 下层/ 协议/ 响应/ 这些/ 请求/ ,/ 并/ 保证/ 以/ 适当/ 的/ 操作/ 权限/ 将/ 所/ 请求/ 的/ 内存/ 块/ 返回/ 给/ CPU/ 使用/ ./ 值得一提的是/ ,/ 在/ 一种/ 具有/ XBar/ 结构/ 的/ 网络/ 中/ ,/ 每个/ 路由/ 单元/ 可能/ 同时/ 连接/ 多个/ CPU/ 核/ ,/ 这些/ CPU/ 拥有/ 各自/ 独立/ 的/ L1Cache/ ,/ 因此/ 当/ 这些/ 核/ 的/ 读/ -/ 写/ 操作/ 请求/ 在/ 本地/ L1Cache/ 中/ 失效/ ,/ 也/ 将/ 依次/ 进入/ NoC/ 接口/ 的/ 请求/ 队列/ ,/ 由/ 下层/ 协议/ 无差别/ 地/ 依次/ 处理/ [/ 8/ ]/ ./ (/ 2/ )/ 竞争/ 管理/ 协议/ 层/ ./ 将/ CPU/ 对/ Cache/ 的/ 读/ -/ 写/ 操作/ 封装/ 成/ 独立/ 的/ 原子/ 事务/ ./ 一个/ 有效/ 的/ 竞争/ 管理机制/ 应该/ 保证/ ,/ 在/ 任何时刻/ ,/ 网络/ 中/ 都/ 存在/ 一些/ 不能/ 被/ 其它/ 读/ -/ 写/ 请求/ 中断/ 的/ 原子/ 事务/ ,/ 协议/ 确保/ 这些/ 事务/ 能够/ 完整/ 地/ 得到/ 执行/ ./ 在/ 文献/ [/ 9/ ]/ 中/ ,/ Zhang/ 对/ Greedy/ 竞争/ 管理机制/ 与/ Cache/ 一致性/ 协议/ 的/ 关系/ 做/ 了/ 较为/ 详细/ 的/ 讨论/ ./ (/ 3/ )/ Cache/ 一致性/ 协议/ 层/ ./ 一种/ 面向/ CPU/ 读/ -/ 写/ 操作/ 的/ 同步/ 通信/ 机制/ ,/ 应该/ 保证/ ,/ 在/ 任何时刻/ ,/ 执行/ 事务/ 的/ 节点/ 可/ 在/ 最/ 短/ 的/ 时间/ 内在/ 网络/ 上/ 定位/ 自己/ 所/ 需要/ 的/ Cache/ 块/ ./ 目录/ 协议/ 是/ 一种/ 主流/ 的/ Cache/ 一致性/ 协议/ 实现/ 方式/ ,/ 对/ 共享存储器/ 中/ 的/ 数据/ 块/ 设置/ 目录/ 项/ ,/ 用以/ 跟踪/ 、/ 记录/ 每个/ 数据/ 块/ 的/ 状态/ 信息/ ,/ 从而/ 判断/ 哪些/ 节点/ 应对/ 请求/ 做出/ 响应/ ./ 这些/ 目录/ 项/ 按照/ 固定/ 的/ 排列/ 方式/ 分布/ 在/ 各个/ 路由/ 节点/ 中/ ,/ 使得/ 需要/ 这些/ 信息/ 的/ 节点/ 知道/ 所/ 需/ 信息/ 在/ 网络/ 中/ 的/ 位置/ [/ 10/ ]/ ./ 在/ 多任务/ MPSoC/ 环境/ 中/ ,/ 设计/ 人员/ 为/ 减少/ 片上/ 长距离/ 通信/ 提出/ 了/ 各种/ 映射/ 策略/ ,/ 试图/ 降低/ 数据/ 远程/ 传输/ 对系统/ 造成/ 的/ 影响/ ./ 这种/ 映射/ 优化/ 虽然/ 可以/ 在/ 一定/ 程度/ 上/ 降低/ 系统/ 能耗/ ,/ 但/ 难以/ 根本/ 上/ 消除/ 并行任务/ 对/ 共享资源/ 的/ 同步/ 、/ 竞争/ 这一/ 重要/ 特性/ ./ 在/ 并行执行/ 中/ ,/ 任意/ 节点/ 上/ 的/ 进程/ 在/ 任何/ 运行/ 时刻/ 都/ 可能/ 产生/ 对系统/ 中/ 的/ 某/ 一/ 共享/ 数据/ 的/ 读/ // 写/ 请求/ ,/ 这是/ 程序员/ 和/ 硬件/ 设计者/ 无法/ 预料/ 的/ ./ 因此/ 对/ Cache/ 一致性/ 协议/ 的/ 能耗/ 进行/ 分析/ 和/ 建模/ 显得/ 尤为重要/ ./ 2.2/ 应用层/ 协议/ 能耗/ 的/ 统一/ 描述/ 软件/ 能耗/ 是/ 指/ 在/ 软件/ 运行/ 期间/ ,/ 驱动/ 直接/ 相关/ 硬件/ (/ 包括/ CPU/ 、/ 存储器/ 、/ I/ // O/ 控制器/ 等/ )/ 活动/ 产生/ 的/ 系统/ 能耗/ 总和/ ./ 自从/ Tiwari/ 提出/ 软件/ 能耗/ 的/ 概念/ 之后/ ,/ 人们/ 越来越/ 关注/ 软件/ 实现/ 方式/ 对系统/ 能耗/ 的/ 影响/ 程度/ ./ 协议/ 能耗/ 是/ 软件/ 能耗/ 的/ 一种/ ,/ 表征/ 了/ 协议/ 软件/ 完成/ 一种/ 特定/ 任务/ 时所/ 消耗/ 的/ 能量/ ./ 对/ NoC/ 应用层/ 中/ 各层次/ 协议/ 的/ 能耗/ ,/ 可用/ 下列/ 两个/ 定义/ 进行/ 统一/ 的/ 描述/ ./ 定义/ 1/ ./ 面向/ 能耗/ 的/ 协议/ 是/ 一个/ 由/ 4/ 个/ 元素/ 构成/ 的/ 集合/ Protocol/ (/ O/ ,/ S/ ,/ P/ ,/ E/ )/ ,/ 其中/ ,/ O/ (/ o1/ ,/ o2/ ,/ …/ ,/ om/ )/ 是/ 协议/ 的/ 操作/ 域/ ,/ 即/ 面向/ 下层/ 协议/ 的/ 接口/ ,/ 为/ 协议/ 操作/ 的/ 最小/ 粒度/ ;/ S/ =/ {/ s/ |/ s/ =/ (/ on1/ ,/ on2/ ,/ …/ ,/ onk/ )/ ;/ oni/ ∈/ O/ ,/ k/ </ }/ 是/ 协议/ 的/ 事务/ 集/ ,/ 每个/ s/ 由/ 一个/ 操作/ 序列/ 组成/ ,/ 代表/ 协议/ 所/ 能够/ 完成/ 的/ 功能/ ;/ P/ (/ p1/ ,/ p2/ ,/ …/ ,/ pn/ )/ 是/ 协议/ 的/ 各个/ 事务/ s/ 发生/ 的/ 概率/ 向量/ ,/ 是/ 由/ 高层/ 协议/ 调用/ 决定/ 的/ ;/ E/ (/ e1/ ,/ e2/ ,/ …/ ,/ em/ )/ 是/ 操作/ 域/ O/ 内/ 的/ 各个/ 操作/ o/ 所/ 对应/ 的/ 能耗/ 向量/ ./ 定义/ 2/ ./ 协议/ 能耗/ 是/ 一个/ Protocol/ (/ O/ ,/ S/ ,/ P/ ,/ E/ )/ 在/ 完成/ 单个/ 任务/ 的/ 过程/ 中/ 所/ 产生/ 的/ 平均/ 能耗/ ,/ 可/ 表示/ 为/ ∑/ sj/ ∈/ S/ 从/ 定义/ 2/ 可以/ 看出/ ,/ 可/ 将/ 协议/ 中/ 各种/ 事务/ 的/ 能耗/ 视为/ 一个/ 基本/ 的/ 能耗/ 单元/ ,/ 协议/ 能耗/ 与/ 协议/ 负载/ 无关/ ,/ 只/ 与/ 事务/ 发生/ 的/ 概率分布/ 和/ 单元/ 能耗/ 有关/ ./ 3NoC/ 物理层/ 协议/ 的/ 能耗/ 分析/ 为了/ 建立/ NoC/ 目录/ 协议/ 能耗/ 模型/ ,/ 需要/ 首先/ 对/ 物理层/ 协议/ 的/ 能耗/ 进行/ 分析/ ,/ 以/ 明确/ NoC/ 产生/ 的/ 能耗/ 在/ 硬件/ 单元/ 上/ 的/ 分布/ 情况/ ./ 与/ 通用/ 的/ 互联网络/ 类似/ ,/ NoC/ 的/ 核心/ 是/ 路由/ 单元/ ,/ 处理单元/ 通过/ 路由/ 单元/ 的/ 消息/ 转发/ 机制/ 在/ 片/ 上/ Page4/ 实现/ 数据/ 的/ 通信/ ,/ 路由/ 单元/ 通过/ 金属/ 连线/ 实现/ 网络/ 相互连接/ ,/ 这种/ 片上/ 通信/ 对于/ 能量/ 的/ 消耗/ 是/ 十分/ 可观/ 的/ ,/ 如/ Alpha21364/ 处理器/ 的/ 功耗/ 为/ 23W/ ,/ 其中/ NoC/ 占/ 整个/ 处理器/ 功耗/ 的/ 58/ %/ ,/ 而/ MITRaw/ 处理器/ 的/ NoC/ 占/ 整个/ 处理器/ 功耗/ 的/ 40/ %/ [/ 3/ ]/ ./ NoC/ 产生/ 的/ 能耗/ 主要/ 由/ 连线/ 能耗/ 和/ 路由/ 单元/ 能耗/ 组成/ ./ 连线/ 能耗/ 是/ 数据/ 从/ 一个/ 路由/ 单元/ 发出/ ,/ 通过/ 金属/ 连线/ 传播/ 到/ 相邻/ 下/ 一个/ 路由/ 单元/ 的/ 过程/ 中/ 所/ 产生/ 的/ 能耗/ ;/ 路由/ 单元/ 能耗/ 则/ 是/ 指/ 数据/ 在/ 路由/ 单元/ 内部/ 存储转发/ 所/ 产生/ 的/ 能耗/ ./ Li/ 等/ 人/ 通过/ 对/ NoC/ 的/ 仿真/ 发现/ ,/ 其/ 功耗/ 分布/ 如图/ 2/ 所示/ ,/ 其中/ 连线/ 功耗/ 占/ 82.4/ %/ ,/ 路由/ 单元/ 功耗/ 占/ 17.6/ %/ ,/ 而/ 在/ 路由/ 单元/ 中/ ,/ Buffer/ 功耗/ 占/ 10.07/ %/ ,/ 交叉开关/ (/ Crossbar/ )/ 功耗/ 占/ 6.49/ %/ ./ 下面/ 分别/ 对/ 连线/ 能耗/ 和/ 路由/ 单元/ 能耗/ 模型/ 进行/ 分析/ 介绍/ ./ (/ 1/ )/ 连线/ 能耗/ 模型/ ./ 大规模/ 集成电路/ 的/ 片/ 上/ 通信/ 连线/ 几乎/ 都/ 采用/ 并行/ 通信/ ,/ 由于/ 并行/ 连线/ 的/ 集成度/ 很/ 高/ ,/ 所以/ 必须/ 考虑/ 并行/ 高频/ 传输/ 的/ 线间/ 电容/ (/ interlinecapacitance/ )/ 效应/ ,/ 并且/ 随着/ 连线/ 尺寸/ 的/ 减小/ ,/ 线/ 间/ 电容/ 对/ 与/ 传输/ 能耗/ 的/ 影响/ 也/ 逐渐/ 增大/ ./ 在/ 适当/ 考虑/ 线/ 间/ 电容/ 的/ 影响/ 后/ ,/ 单个/ Flit/ 在/ 连线/ 上/ 一次/ 传出/ 能耗/ 犈/ line/ 可/ 表示/ 为/ 下列/ 向量/ 形式/ :/ 其中/ ,/ d/ 是/ 一个/ 数据传输/ 块/ 中/ 含有/ Flit/ 的/ 数量/ ,/ 犞/ f/ 是/ n/ 条/ 并行/ 连线/ 在/ 数据/ 一次/ 变化/ 后/ 的/ 电平/ 向量/ ,/ (/ 犞/ f/ )/ T/ 是/ 其/ 转置/ 向量/ ,/ 犞/ i/ 是/ n/ 条/ 并行/ 连线/ 在/ 数据/ 一次/ 变化/ 前/ 的/ 电平/ 向量/ ,/ 犆/ t/ 是/ n/ ×/ n/ 的/ 连线/ 间/ 电容/ 对称/ 矩阵/ ,/ 其中/ 对角线/ 上/ 元素/ 是/ 对应/ 位置/ 连线/ 到/ 地/ 的/ 电容/ ,/ 其它/ 位置/ 元素/ 是/ 连线/ 间/ 的/ 电容/ ./ (/ 2/ )/ 路由/ 单元/ 能耗/ 模型/ ./ 目前/ 片/ 上路/ 由/ 单元/ 的/ 结构/ 还/ 没有/ 摆脱/ 通用/ 路由器/ 的/ 基本/ 框架/ ./ 在/ 输入/ 端/ ,/ 当/ 数据/ 从/ E/ 、/ W/ 、/ N/ 、/ S/ 和/ Local5/ 个/ 方向/ 到达/ 路由/ 单元/ 后/ ,/ 由/ 输入/ VC/ (/ InputVirtualChannel/ )/ 完成/ 输入/ 数据/ 的/ 接收/ 和/ 缓存/ ,/ 向/ 路由/ 仲裁/ 器/ (/ SwitchAllocator/ )/ 请求/ 并/ 得到/ 需要/ 的/ 输出/ 端口/ 后/ ,/ 数据包/ 以/ Flit/ 为/ 单位/ 通过/ Crossbar/ 发射/ 到/ 下/ 一/ 跳/ (/ hop/ )/ 的/ 路由/ 单元/ 输入/ VC/ 中/ ./ 如果/ 该/ Flit/ 已/ 到达/ 目的/ 节点/ ,/ 那么/ Crossbar/ 将/ 其/ 发送到/ 本地/ L2Cache/ 接口/ 队列/ (/ Sink/ )/ 中/ ./ 一个/ Flit/ 通过/ 一个/ 路由/ 单元/ 所/ 产生/ 的/ 能耗/ 犈/ Router/ 可/ 表示/ 为/ 其中/ ,/ 犈/ VC/ 为/ 数据包/ 在/ VC/ 队列/ 中/ 等待/ 的/ 能耗/ ,/ 犈/ SA/ 和/ 犈/ Crossbar/ 分别/ 为/ 路由/ 仲裁/ 器/ 分配/ 交叉/ 连接/ 的/ 能耗/ 和/ Flit/ 通过/ Crossbar/ 的/ 能耗/ ,/ 犈/ VC/ 又/ 可/ 分为/ VC/ 缓冲器/ 能耗/ 犈/ Buffer/ 和/ VC/ 分配/ 电路/ (/ VCAllocator/ )/ 能耗/ 犈/ VCA/ ./ 一般/ 情况/ 下/ ,/ 犈/ Buffer/ 和/ 犈/ Crossbar/ 是/ 整个/ 路由/ 单元/ 能耗/ 的/ 主要/ 来源/ ./ 在/ 此基础/ 上/ ,/ 可/ 得/ 出路/ 由/ 协议/ 的/ 能耗/ 模型/ ./ 由于/ 发送/ 端/ 将/ 一个/ 数据包/ 分割/ 成/ 一组/ 大小/ 相等/ 的/ Flit/ ,/ 当/ 数据包/ 的/ 第一个/ Flit/ 通过/ 路由/ 到达/ 一个/ 新/ 的/ 路由/ 节点/ 后/ ,/ 由/ VC/ 内部/ 的/ 分配/ 电路/ 为/ 该组/ Flit/ 分配/ 一个/ 数据/ 缓冲/ 对列/ ,/ 随后/ 的/ Flit/ 会/ 自动/ 地/ 进入/ 该/ 缓冲/ 对列/ ,/ 等待/ 由/ Crossbar/ 转发/ 到/ 下/ 一/ 跳/ ./ 因此/ ,/ 用/ n/ 表示/ 单个/ Flit/ 传输/ 所/ 经过/ 的/ 跳数/ ,/ 一个/ Flit/ 在/ 传送/ 路径/ 上/ 完成/ 一次/ 传输/ 所/ 产生/ 的/ 能耗/ EFlit/ 可/ 表示/ 为/ 4/ 基于/ 位置/ 概率分布/ 的/ 目录/ 协议/ 能耗/ 模型/ 可用/ 一个/ 有向图/ NoC/ 〈/ SN/ ,/ L/ 〉/ 表示/ 具有/ N/ 个/ 路由/ 节点/ 的/ NoC/ 网络/ ,/ si/ ∈/ SN/ 为/ 第/ i/ 个/ 路由/ 节点/ ,/ i/ 是/ 节点/ 的/ 位置/ 编号/ ,/ 0/ / i/ / N/ -/ 1/ ,/ li/ ,/ j/ ∈/ L/ 是/ 节点/ si/ 到/ sj/ 之间/ 的/ 有/ 向/ 边/ ./ 一个/ 一维/ 的/ 连续/ 内存/ M/ (/ n/ ,/ b/ )/ ,/ n/ 为/ 内存/ 块/ 的/ 数量/ ,/ 将/ M/ 平均/ 分成/ 的/ b/ 个/ 区域/ ,/ 一个/ 区域/ 的/ 大小/ 为/ n/ // b/ 块/ ./ 每/ 一个/ 块/ 对应/ 一个/ 块/ 目录/ 项/ ,/ 同一个/ 区域/ 中/ 的/ 块/ 目录/ 项/ 集中/ 存放/ 在/ NoC/ 的/ 一个/ 节点/ 中/ ,/ 不同/ 区域/ 的/ 目录/ 项/ 分布/ 存放/ 在/ 不同/ 的/ 节点/ 中/ ./ 假设/ 区域/ 的/ 数量/ 等于/ 路由/ 节点/ 的/ 数量/ ,/ 即/ b/ =/ N/ ,/ 得到/ 块/ 地址/ block/ _/ addr/ 到/ 路由/ 节点/ 位置/ i/ 之间/ 的/ 映射/ 关系/ 为/ 路由/ 节点/ 上/ PE/ (/ ProcessingElement/ 处理单元/ )/ 发出/ 的/ 块/ 读/ -/ 写/ 请求/ 会/ 沿着/ NoC/ 协议/ 栈/ 自上而下/ 到达/ Cache/ 一致性/ 协议/ 层/ ,/ 协议/ 对/ 请求/ 的/ 块/ 地址/ Page5/ 按照/ 式/ (/ 4/ )/ 进行/ 计算/ ,/ 得到/ 块/ 的/ 目录/ 项/ 所在/ 路由/ 节点/ 的/ 位置/ i/ ,/ 目录/ 协议/ 根据/ 目标/ 节点/ 的/ 位置/ i/ 完成/ 3/ -/ way/ 取/ 数据/ 操作/ (/ 如图/ 3/ 所示/ )/ ./ 从/ 路由/ 节点/ s0/ 请求/ 一次/ 取/ 数据/ 块/ 的/ 完整/ 过程/ 包括/ :/ (/ 1/ )/ 查询/ 过程/ ./ 通过/ 式/ (/ 4/ )/ 计算/ ,/ 请求者/ s0/ 发现/ 目标/ 块/ 的/ 目录/ 项/ 信息/ 静态/ 存放/ 在/ s11/ 的/ SRAM/ 中/ ,/ 向/ s11/ 发送/ 请求/ 消息/ ;/ (/ 2/ )/ 响应/ 过程/ ./ s11/ 收到/ 请求/ 消息/ 后/ ,/ 在/ 自己/ 的/ 目录/ 项中/ 查找/ 发现/ 该块/ 的/ 一个/ 共享/ 副本/ 存储/ 在/ s13/ 的/ 二级缓存/ 中/ ,/ 于是/ 向/ 响应者/ s13/ 发送/ 一个/ 数据/ 请求/ 消息/ ,/ 该/ 消息/ 包含/ 了/ 所要/ 请求/ 的/ 块/ 地址/ 和/ 请求/ 节点/ (/ s0/ )/ 信息/ ;/ (/ 3/ )/ 传输/ 过程/ ./ 当/ 响应者/ s13/ 得到/ 请求/ 消息/ 后/ ,/ 向/ s0/ 发送/ 一份/ 该块/ 的/ 副本/ 并/ 告知/ s11/ ,/ s11/ 对/ 该/ 块/ 目录/ 项/ 的/ 状态/ 做出/ 相应/ 的/ 更新/ ./ 由于/ 整个/ 内存/ 的/ 块/ 信息/ 均匀分布/ 存储/ 在/ 所有/ 的/ 路由/ 节点/ 中/ ,/ 因此/ 这种/ 协议/ 的/ 网络/ 负载/ 较为/ 均衡/ [/ 11/ ]/ ./ 为/ 建立/ 上述/ 过程/ 的/ 能耗/ 模型/ ,/ 首先/ 采用/ 概率/ 统计/ 模型/ 刻画/ 一个/ 3/ -/ way/ 取/ 数据/ 的/ 过程/ ./ 将/ 网络/ 中/ 的/ PE/ 对/ 内存/ 的/ 块/ 请求/ 视为/ 随机/ 事件/ ,/ 用/ qi/ ,/ j/ 表示/ PEi/ 的/ L2Cache/ 对/ 内存/ 中/ 第/ j/ 个/ 区域/ 中/ 数据/ 块/ 请求/ 的/ 概率/ (/ 或/ 速率/ )/ ./ 矩阵/ 犙/ 表示/ 整个/ NoC/ 中/ 各/ 节点/ 对/ Cache/ 块/ 的/ 请求/ 概率/ ,/ 由于/ b/ =/ N/ ,/ 该/ 矩阵/ 为/ 一个/ 方阵/ :/ 矩阵/ 对角/ 元素/ qi/ ,/ j/ 不为/ 0/ ,/ 这/ 是因为/ 如果/ 一个/ PE/ 所/ 请求/ 数据/ 块/ 的/ 目录/ 项/ 恰好/ 在/ 本地/ ,/ 不/ 需要/ 进行/ 远程/ 查询/ 目录/ 项/ 的/ 操作/ ,/ 而/ 直接/ 向/ 目标/ 节点/ 发送数据/ 请求/ ./ 通过/ 分析/ 可知/ ,/ ∑/ N/ -/ 1PE/ 首先/ 在/ 自己/ 的/ L2Cache/ 中/ 查找/ 所/ 需/ 的/ 数据/ 块/ ,/ 如果/ 命中/ ,/ 则/ 不/ 向/ NoC/ 接口/ 发送数据/ 请求/ ./ 一个/ 请求/ 信息/ 到达/ 目录/ 项/ 所在/ 的/ 节点/ 后/ ,/ 通过/ 查询/ 数据/ 块/ 的/ 目录/ 项可/ 获得/ 该块/ 目前/ 所在/ 节点/ 位置/ ,/ 可用/ 矩阵/ 犘/ 表示/ 响应/ 过程/ 的/ 概率分布/ ,/ 元素/ pj/ ,/ k/ 表示/ 在/ 节点/ j/ 的/ 目录/ 项/ 查询/ 某/ 一个/ 数据/ 块/ 时/ ,/ 该块/ 在/ 节点/ k/ 的/ L2Cache/ 中/ 的/ 概率/ ,/ 即/ 在/ 目录/ 协议/ 中/ 3/ -/ way/ 传输/ 的/ 第/ 2/ 步/ 发生/ 的/ 概率分布/ ./ 响应/ 过程/ 的/ 概率模型/ 与/ 查询/ 过程/ 类似/ ,/ 这里/ 不再/ 赘述/ ./ 假设/ 经过/ 查询/ ,/ 某/ 一个/ 数据/ 块/ 在/ 节点/ k/ 的/ L2Cache/ 中/ 存在/ 一个/ 副本/ ,/ 那么/ 节点/ k/ 将/ 此块/ 发送给/ 需要/ 它/ 的/ 源/ 节点/ i/ ,/ 该/ 传输/ 过程/ 的/ 概率分布/ 用/ 方阵/ 犜/ 表示/ ,/ 可/ 表示/ 为/ 即/ 节点/ k/ 向/ 节点/ i/ 发送数据/ 块/ 的/ 概率/ ,/ 实际上/ 等于/ 节点/ i/ 向/ 所有/ 节点/ 发送/ 请求/ 查询/ 概率/ 和/ 任何/ 节点/ 查询/ 到/ 某/ 一个/ 块/ 在/ 节点/ k/ 中/ 概率/ 的/ 乘积/ ./ 然后/ ,/ 计算/ 单个/ Flit/ 在/ NoC/ 中/ 传输/ 的/ 平均/ 能耗/ ./ 假设/ 在/ c/ ×/ c/ 的/ Mesh/ 网络/ 中/ ,/ 一个/ Flit/ 从/ 节点/ i/ 产生/ ,/ 目的/ 节点/ 为/ j/ ,/ 则/ 该/ Flit/ 经过/ 的/ 总/ 跳数/ n/ =/ |/ j/ -/ i/ |/ mod/ (/ c/ )/ +/ j/ 表示/ 一个/ Flit/ 从/ 节点/ i/ 到/ j/ 传输/ 的/ 能耗/ ,/ 则/ 根据/ 式/ (/ 3/ )/ 有/ 犈/ Flit/ =/ ei/ ,/ j/ [/ =/ |/ j/ -/ i/ |/ mod/ (/ c/ )/ +/ j/ 其中/ ,/ ei/ ,/ j/ 包含/ 了/ 硬件/ 电路/ 、/ 网络拓扑/ 结构/ 和/ 网络层/ 协议/ 的/ 所有/ 能耗/ 信息/ ,/ 不仅/ 是/ 单个/ Flit/ 对/ 硬件资源/ 利用/ 程度/ 的/ 函数/ ,/ 而且/ 是/ 源/ 和/ 目的/ 节点/ 之间/ 传输/ 跳数/ 的/ 函数/ ./ 引入/ 式/ (/ 2/ )/ 可/ 得到/ 整个/ 网络/ 任意/ 结点/ 间/ 一次/ 数据/ 块/ 传输/ 产生/ 的/ 能耗/ 为/ 犈/ data/ =/ 熿/ d/ ×/ eN/ -/ 1/ ,/ 0tN/ -/ 1/ ,/ 0e15/ ,/ 1tN/ -/ 1/ ,/ 1/ …/ eN/ -/ 1/ ,/ N/ -/ 1tN/ -/ 1/ ,/ N/ 燀/ 其中/ ,/ d/ 是/ 一个/ 数据/ 块/ 中/ 含有/ Flit/ 的/ 数量/ ./ 个/ 节点/ 之间/ 传输数据/ 能耗/ 的/ 期望/ ,/ 可/ 表示/ 为/ 因此/ ,/ 一次/ 取/ 数据/ 块/ 的/ 过程/ 平均/ 能耗/ 是/ 任意/ 两/ Page6/ 以上/ 通过/ 对/ 目录/ 协议/ 请求/ 数据/ 块/ 的/ 过程/ 进行/ 抽象/ ,/ 得到/ 在/ NoC/ 中/ 数据传输/ 的/ 能耗/ 模型/ ./ 从式/ (/ 3/ )/ 可以/ 看出/ ,/ 影响/ 一个/ 数据/ 块/ 传输/ 能耗/ 受到/ 两/ 方面/ 因素/ 影响/ ,/ 一方面/ 是/ 单个/ Flit/ 的/ 传输/ 能耗/ ,/ 代表/ 单个/ Flit/ 对片/ 上/ 资源/ 利用/ 程度/ ,/ 对/ 硬件/ 传输/ 电路/ 和/ 网络拓扑/ 结构/ 进行/ 改进/ ,/ 是/ 目前/ 降低/ ei/ ,/ j/ 对/ NoC/ 能耗/ 影响/ 的/ 主要/ 方法/ [/ 12/ ]/ ;/ 另一方面/ 是/ 面向/ 能耗/ 的/ 目录/ 协议/ 本身/ 的/ 运行/ 情况/ ,/ 这/ 控制数据/ 块/ 的/ 存储/ 策略/ 和/ 传送/ 过程/ ,/ 是/ 对/ 分布式/ 存储/ 及/ 目录/ 协议/ 能耗/ 的/ 抽象/ 描述/ ,/ 面向/ 能耗/ 的/ 协议/ 优化/ 也/ 是/ NoC/ 研究/ 领域/ 的/ 焦点/ ./ 5/ 仿真/ 实验/ 及/ 分析/ 5.1/ 实验/ 环境/ 仿真/ 实验/ 在/ NS/ -/ 2/ 平台/ 上/ 进行/ [/ 13/ ]/ ,/ 对/ 目录/ 协议/ 能耗/ 模型/ 在/ 不同/ 网络/ 发包/ 概率/ 的/ 情况/ 下/ 进行/ 比较/ 和/ 分析/ ./ 相关/ 参数设置/ 如下/ :/ (/ 1/ )/ NoC/ 参数/ ./ 在/ NS/ -/ 2/ 中/ 建立/ 了/ 一个/ 4/ ×/ 4/ 的/ Mesh/ 网络/ ,/ 相邻/ 路由/ 节点/ 之间/ 的/ 链路/ 传输速率/ 为/ 10Mbps/ ,/ 每个/ 数据包/ 的/ 大小/ 设为/ 512Bytes/ ,/ 与/ 一个/ 数据/ 块/ 的/ 大小/ 相适应/ ./ 在/ 源/ 节点/ 上/ ,/ 一个/ 512Bytes/ 的/ 数据/ 块/ 被/ 分割/ 成/ 4/ 个/ 大小/ 相同/ 的/ Flit/ ./ 传送/ 路径/ 上/ 的/ 每个/ 路由/ 节点/ 都/ 只/ 为/ 第一个/ Flit/ 做/ 一次/ 路由/ 处理/ ,/ 其实质/ 是/ 在/ 输入/ // 输出/ 端口/ 间/ 分配/ 一个/ 软/ 连接/ ,/ 后继/ Flit/ 通过/ 此/ 连接/ 直接/ 发送到/ 输出/ 端口/ ./ (/ 2/ )/ 发包/ 参数/ ./ 为了/ 模拟/ 不同/ 负载/ 环境/ 下/ 的/ NoC/ 发包/ 情况/ ,/ 为/ NoC/ 中/ 的/ 每/ 一个/ PE/ 设置/ 一个/ “/ 发包/ 向量/ ”/ 数据结构/ 以/ 控制/ 目的/ 地址/ 范围/ ,/ 从而/ 控制/ 发包/ 概率/ 矩阵/ 犜/ ./ PE/ 发包/ 的/ 过程/ 分为/ 两个/ 相互/ 独立/ 的/ 阶段/ :/ 发包/ 持续时间/ (/ BurstingTime/ )/ 和/ 空闲/ 持续时间/ (/ IdlingTime/ )/ ./ 设定/ 任意/ 两个/ PE/ 之间/ 的/ 发包/ 持续时间/ 期望值/ 和/ 空闲/ 持续时间/ 期望值/ ,/ 以/ 控制/ 节点/ 的/ 发包/ 概率/ ./ 如果/ 将/ 一个/ 轮转/ 周期/ 的/ 期望/ 设为/ 1s/ ,/ 发包/ 持续时间/ 的/ 期望/ E/ (/ BT/ )/ 和/ 空闲/ 持续时间/ 的/ 期望/ E/ (/ IT/ )/ 满足/ E/ (/ BT/ )/ +/ E/ (/ IT/ )/ =/ 1s/ ,/ 节点/ 发包/ 概率/ 由/ E/ (/ BT/ )/ // [/ E/ (/ BT/ )/ +/ E/ (/ IT/ )/ ]/ =/ E/ (/ BT/ )/ 决定/ ./ (/ 3/ )/ 节点/ 距离/ 的/ 影响/ ./ 一般来说/ ,/ 在/ 一个/ 经过/ 优化/ 的/ 任务/ 映射/ 中/ ,/ 任意/ 两/ 节点/ 间/ 的/ 通信/ 概率/ 会/ 呈现/ 如下/ 特征/ :/ 两/ 节点/ i/ 与/ j/ 之间/ 的/ “/ 曼哈顿/ ”/ 距离/ 越大/ ,/ 对应/ 的/ 传输/ 概率/ ti/ ,/ j/ 越小/ ./ 本/ 实验/ 通过/ 调整/ 矩阵/ 犜/ 中/ 的/ 概率分布/ ,/ 体现/ 不同/ 优化/ 深度/ 对系统/ 能耗/ 的/ 影响/ ./ 具体来说/ ,/ 4/ ×/ 4/ 类型/ 模拟/ 没有/ 经过/ 任务/ 映射/ 优化/ 的/ 随机/ 发包/ ;/ 3/ ×/ 3/ 类型/ 和/ 2/ ×/ 2/ 类型/ 模拟/ 了/ 经过/ 一般/ 优化/ 和/ 深度/ 优化/ 后/ 的/ 随机/ 发包/ ./ 5.2/ 实验/ 结果/ 分析/ 情况/ 下/ 60s/ 的/ 发包/ 情况/ :/ 即/ 犜/ 中/ 元素/ ti/ ,/ j/ =/ 1/ 实验/ 模拟/ 一个/ 4/ ×/ 4Mesh/ 在/ 3/ 种/ 不同/ 发包/ 类型/ (/ 1/ )/ 4/ ×/ 4/ ./ 在/ 4/ ×/ 4Mesh/ 网络/ 中/ 随机/ 自由/ 发包/ ,/ (/ 2/ )/ 3/ ×/ 3/ ./ 发包/ 节点/ 只/ 向/ 水平/ 距离/ 和/ 垂直距离/ (/ 3/ )/ 2/ ×/ 2/ ./ 发包/ 节点/ 只/ 向/ 水平/ 距离/ 和/ 垂直距离/ 通过/ 统计/ 一次/ 实验/ 中/ 总/ 路由/ 次数/ 和/ 产生/ 数据包/ 都/ 小于/ 3/ 的/ 节点/ 随机/ 自由/ 发包/ ;/ 都/ 小于/ 2/ 的/ 节点/ 随机/ 自由/ 发包/ ./ 数量/ ,/ 得到/ NoC/ 中/ 单个/ 包/ 的/ 平均/ 路由/ 次数/ :/ 同理/ ,/ 采用/ 式/ (/ 5/ )/ 也/ 可/ 得到/ 包/ 的/ 平均/ 链路/ 传输/ 次数/ ./ 根据/ 平均/ 路由/ 次数/ 和/ 平均/ 连路/ 传输/ 次数/ ,/ 获得/ NS/ -/ 2/ 平台/ 与/ 目录/ 协议/ 能耗/ 模型/ 估算/ 的/ 包/ 平均/ 能耗/ 数据/ 如表/ 1/ 所示/ ./ 类型/ NS/ -/ 2/ 平台/ 的/ 4/ ×/ 40.9563270/ ./ 9581000.1851/ ./ 7673/ ×/ 30.7830500/ ./ 7824760.0730/ ./ 6962/ ×/ 20.5125380/ ./ 5132860.1461/ ./ 350/ 可以/ 看出/ ,/ NS/ -/ 2/ 平台/ 的/ 包/ 平均/ 能耗/ 与/ 模型/ 估算/ 的/ 包/ 平均/ 能耗/ 最大/ 误差/ 小于/ 2/ %/ ,/ 说明/ 本文/ 提出/ 的/ 目录/ 协议/ 能耗/ 模型/ 是/ 有效/ 的/ ./ 进一步/ 地/ ,/ 可/ 得到/ 上述/ 3/ 种/ 情况/ 下/ 目录/ 协议/ 能耗/ 模型/ 的/ 包/ 平均/ 能耗/ 精度/ 与/ 概率/ 的/ 变化/ 关系/ (/ 如图/ 4/ ~/ 7/ 所示/ )/ ./ 从图/ 4/ 可以/ 看出/ ,/ 虽然/ 收到/ 发包/ 向量/ 矩阵/ 的/ 影响/ ,/ 3/ 种/ 情况/ 下包/ 平均/ 路由/ 次数/ 有所不同/ ,/ 但是/ 无论/ 发包/ 概率/ 如何/ 变化/ ,/ NoC/ 中/ 的/ 包/ 平均/ 路由/ 次数/ 维持/ 在/ 理论值/ 附近/ 变化/ ,/ 从而/ 保证/ 了/ 网络/ 中/ 数据包/ 平均/ 能耗/ 是/ 稳定/ 的/ ./ Page73/ 种/ 情况/ 下当/ 发包/ 概率/ 接近/ 1/ 时/ ,/ 单个/ 包/ 的/ NS/ -/ 2/ 平台/ 平均/ 能耗/ 值/ 接近/ 于/ 目录/ 协议/ 能耗/ 模型/ 估算/ 的/ 平均/ 能耗/ 值/ ,/ 并且/ 稳定性/ 也/ 更/ 高/ (/ 如图/ 5/ ~/ 7/ 所示/ )/ ./ 随着/ 发包/ 概率/ 的/ 增大/ ,/ 目录/ 协议/ 能耗/ 模型/ 估算/ 的/ 包/ 平均/ 能耗/ 值/ 精度/ 也/ 不断/ 提高/ ./ 5.3/ 实验/ 结论/ 从/ 实验/ 部分/ 可以/ 看出/ ,/ 由式/ (/ 6/ )/ 得到/ 的/ 矩阵/ 犜/ 实际上/ 反应/ 了/ NoC/ 数据传输/ 概率/ 的/ 集中度/ ./ 这/ 体现/ 在/ 网络/ 优化/ 中/ ,/ 犜/ 的/ 每/ 一行/ 发包/ 概率/ 应/ 尽可能/ 集中/ 在/ 与/ 该行/ 号/ 的/ 网络/ 位置/ 向/ 邻近/ 的/ 节点/ 上/ ,/ 同时/ 也/ 不/ 回避/ 长距离/ 传输/ 对/ 网络/ 能耗/ 的/ 影响/ ./ 利用/ 该/ 模型/ ,/ 可/ 对/ 各种/ 网络/ 优化/ 措施/ 的/ 能耗/ 收益/ 做/ 定量/ 的/ 分析/ 和/ 比较/ ./ 例如/ 在/ 本/ 实验/ 中/ ,/ 经过/ 初步/ 优化/ 的/ 3/ ×/ 3/ 类型/ ,/ 单个/ 包/ 的/ 平均/ 能耗/ 为/ 未经/ 优化/ 的/ 4/ ×/ 4/ 类型/ 的/ 81.7/ %/ ;/ 而/ 经过/ 深度/ 优化/ 的/ 2/ ×/ 2/ 类型/ ,/ 单个/ 包/ 的/ 平均/ 能耗/ 仅为/ 未经/ 优化/ 情况/ 的/ 53.6/ %/ ./ 由此可见/ ,/ 该/ 模型/ 为/ 分析/ 协议/ 设计/ 的/ 能耗/ 优化/ 深度/ 提供/ 量化/ 评判/ 依据/ ./ 6/ 结束语/ 在/ NoC/ 中/ ,/ 能耗/ 问题/ 将会/ 随着/ 网络/ 规模/ 的/ 增大/ 而/ 越来越/ 受到/ 人们/ 的/ 重视/ ./ 本文/ 对/ NoC/ 协议/ 栈中/ 应用层/ 协议/ 的/ 能耗/ 行为/ 进行/ 统一/ 的/ 数学/ 描述/ ,/ 重点/ 对/ 目录/ 协议/ 的/ 取/ 数据/ 过程/ 所/ 产生/ 的/ 能耗/ 进行/ 了/ 分析/ 与/ 建模/ ,/ 提出/ 一种/ 基于/ 位置/ 概率分布/ 的/ 目录/ 协议/ 能耗/ 模型/ ,/ 并/ 利用/ 发包/ 概率/ 稳定/ 的/ Mesh/ 网络/ 验证/ 了/ 目录/ 协议/ 能耗/ 模型/ 的/ 有效性/ ./ 该/ 模型/ 不/ 受到/ 网络拓扑/ 结构/ 的/ 影响/ ,/ 同样/ 适用/ 于/ DTorus/ 、/ 3/ -/ D/ 等/ 其它/ 网络拓扑/ 结构/ ,/ 通用性/ 较强/ ./ 下/ 一步/ 工作/ 主要/ 包括/ 将/ 目录/ 协议/ 的/ 能耗/ 模型/ 与/ Cache/ 一致性/ 协议/ 的/ 3/ 态/ MSI/ 协议/ 和/ 5/ 态/ MOESI/ 协议/ 相结合/ ,/ 构建/ 更为/ 广泛/ 的/ NoC/ 能耗/ 模型/ ,/ 以及/ 目录/ 协议/ 的/ 能耗/ 优化/ ./ 

