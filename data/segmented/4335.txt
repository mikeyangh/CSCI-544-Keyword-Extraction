Page1/ 内存/ OLAP/ 多核/ 并行/ 查询/ 优化/ 技术/ 研究/ 焦敏/ 1/ )/ ,/ 2/ )/ 张延松/ 1/ )/ ,/ 2/ )/ ,/ 3/ )/ 王珊/ 1/ )/ ,/ 2/ )/ 陈红/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 中国人民大学/ 数据/ 工程/ 与/ 知识/ 工程/ 教育部/ 重点/ 实验室/ 北京/ 100872/ )/ 2/ )/ (/ 中国人民大学/ 信息/ 学院/ 北京/ 100872/ )/ 3/ )/ (/ 中国人民大学/ 中国/ 调查/ 与/ 数据中心/ 北京/ 100872/ )/ 摘要/ 随着/ 以大/ 内存/ 和/ 多/ 核为/ 代表/ 的/ 计算机硬件/ 技术/ 的/ 发展/ ,/ 以/ cache/ -/ conscious/ 算法/ 为/ 中心/ 的/ 查询/ 优化/ 技术/ 逐渐/ 转向/ 以/ multicore/ -/ conscious/ 为/ 中心/ 的/ 查询/ 优化/ 技术/ ,/ 来/ 提高/ 多核/ 处理器/ 的/ 并行处理/ 性能/ ./ 该文/ 的/ 研究/ 目标/ 是/ 具备/ 复杂/ 星型/ 连接/ 特点/ 的/ 联机/ 分析/ 处理/ OLAP/ 技术/ ,/ 以/ 查询/ 执行/ 代价/ 最大/ 的/ 星型/ 连接/ 为/ 研究/ 对象/ ,/ 提出/ 同时/ 满足/ cache/ -/ conscious/ 和/ multicore/ -/ conscious/ 的/ 多/ 核/ 并行/ 连接/ 算法/ DDTA/ -/ MPJ/ ./ 该/ 算法/ 包括/ 基于/ 事实/ 表/ 水平/ 分片/ 和/ 维/ 属性/ 列/ 共享/ 访问/ 模式/ 的/ 查询/ 内多核/ 并行算法/ IntraDDTA/ -/ MPJ/ 、/ 基于/ QuerySlots/ 的/ 查询/ 间/ 多/ 核/ 并行算法/ InterDDTA/ -/ MPJ/ 以及/ 中位数/ 多核/ 并行算法/ Median/ -/ MPJ/ ./ 实验/ 结果表明/ 该/ 算法/ 具有/ 良好/ 且/ 稳定/ 的/ 并行/ 查询处理/ 性能/ ,/ 线性/ 查询处理/ 模型/ 能够/ 更好/ 地/ 利用/ 多核/ 处理器/ 的/ 先进/ 性能/ ./ 关键词/ 多核/ 敏感/ 算法/ ;/ 星型/ 连接/ ;/ 多核/ 并行/ ;/ 并行/ 中位数/ 聚集/ 计算/ 1/ 引言/ 20/ 世纪/ 70/ 年代/ ,/ IBM/ 公司/ 的/ SystemR/ 原型/ 系统/ 奠定/ 了/ 关系数据库/ 的/ 技术/ 基础/ ,/ 并/ 推动/ 其/ 占据/ 主流/ 的/ 数据库/ 市场/ ./ 在/ 关系数据库/ 技术/ 越来越/ 成熟/ 的/ 同时/ ,/ 计算机硬件/ 技术/ 的/ 发展/ 为/ 数据库/ 引入/ 越来越/ 多新/ 的/ 特性/ 和/ 技术/ ./ 目前/ ,/ 数据库/ 查询/ 优化/ 技术/ 是/ 以/ 磁盘/ 存储/ 和/ I/ // O/ 代价/ 模型/ 为/ 核心/ 的/ ,/ 难以/ 充分发挥/ 大/ 内存/ 和/ 多/ 核/ 处理器/ 这些/ 硬件/ 的/ 性能/ 优势/ ./ 面向/ 大/ 内存/ ,/ 数据库/ 需要/ 根据/ 内存/ 访问/ 特性/ 设计/ 新/ 的/ 存储/ 模型/ ;/ 面对/ 多核/ 处理器/ 越来越/ 多/ 的/ 计算/ 核心/ ,/ 数据库/ 需要/ 将/ 原有/ 的/ 串行/ 查询处理/ 引擎/ 升级/ 为/ 新/ 的/ 并行/ 查询处理/ 引擎/ ./ 面向/ 内存/ 数据库/ 的/ cache/ -/ conscious/ 查询/ 优化/ 技术/ 主要/ 针对/ 多级/ cache/ 结构/ 优化/ 内存/ 访问/ 性能/ ,/ 主要/ 体现/ 在/ cache/ -/ conscious/ 索引/ 机制/ 的/ 研究/ ,/ cache/ -/ conscious/ 的/ 连接/ 优化/ 技术/ 以及/ 并发/ 查询/ 时/ 面向/ page/ -/ color/ 的/ 优化/ 技术/ 等/ ./ 研究/ 的/ 方法/ 是/ 对/ 磁盘/ 关系数据库/ 中/ 传统/ 的/ 索引/ 结构/ 和/ 哈希/ 连接/ 算法/ 进行/ 内存/ 优化/ ./ 面对/ 当前/ 多核/ 处理器/ 技术/ ,/ 内存/ 数据库/ 的/ 查询/ 优化/ 技术/ 不仅/ 需要/ 在/ 多级/ 缓存/ 结构/ 上/ 进行/ 数据/ 访问/ 优化/ ,/ 而且/ 需要/ 面向/ 多核/ 处理器/ 进行/ 并行/ 访问/ 和/ 并行计算/ 模型/ 上/ 的/ 优化/ ,/ 同时/ 还要/ 提高/ 共享/ cache/ 在/ 多/ 核/ 并行处理/ 时/ 的/ 利用率/ ./ 本文/ 以/ 数据仓库/ 和/ 联机/ 分析/ 处理/ (/ On/ -/ lineAnalyticalProcessing/ ,/ OLAP/ )/ 的/ 星型/ 存储/ 模型/ 为/ 基础/ ,/ 研究/ 基于/ 大/ 内存/ 和/ 多/ 核/ 处理器/ 平台/ 的/ OLAP/ 并行/ 查询/ 优化/ 技术/ ./ 优化/ 面向/ 内存/ 访问/ 特性/ 的/ 存储/ 模型/ ,/ 设计/ 面向/ 负载/ 特性/ 的/ 内存/ 行/ 存储/ 、/ 列/ 存储/ 及/ 混合/ 存储/ 模型/ ;/ 基于/ 具备/ 内存/ 随机/ 访问/ 特性/ 的/ DDTA/ -/ JOIN/ 算法/ [/ 1/ ]/ 提出/ 了/ 多/ 核/ 并行/ DDTA/ -/ MPJ/ 算法/ ,/ 通过/ 内存/ 中/ 事实/ 表/ 动态/ 水平/ 分区/ 和/ 维表/ 属性/ 列/ 共享/ 访问/ 技术/ 提供/ 良好/ 的/ 并行/ 扩展/ 能力/ ,/ 增强/ 频繁/ 访问/ 数据/ 集在/ 多核/ 共享/ cache/ 中/ 的/ 数据/ 局部性/ ./ OLAP/ 的/ 并行处理/ 能力/ 不仅/ 取决于/ 连接/ 操作/ 的/ 并行/ 效率/ ,/ 还/ 取决于/ 聚集/ 操作/ 的/ 可/ 并行性/ ./ OLAP/ 中/ 可/ 分布式计算/ 的/ 聚集/ 函数/ ,/ 如/ sum/ 、/ count/ 以及/ average/ 等/ 能够/ 充分利用/ 多核/ 并行计算/ 能力/ ;/ 对于/ OLAP/ 中/ 不可/ 分布/ 计算/ 函数/ ,/ 例如/ 百分位/ 数/ (/ 包括/ 中位数/ )/ 等/ 需要/ 集中处理/ 的/ 聚集/ 函数/ ,/ 难以/ 发挥/ 多核/ 处理器/ 的/ 并行计算/ 优势/ ./ 百分位/ 数是/ 统计分析/ 中/ 非常/ 重要/ 的/ 函数/ ,/ 它/ 用来/ 衡量/ 数据分布/ 的/ 均衡/ 状态/ ./ 百分位/ 数在/ 统计/ 、/ 经济/ 、/ 教育/ 、/ 医学/ 、/ 房地产/ 等/ 领域/ 应用/ 非常/ 广泛/ ,/ 在/ 分析/ 处理/ 中/ 被/ 越来越/ 广泛/ 地/ 使用/ ./ 但是/ 这/ 类/ 函数/ 和/ 数据/ 位置/ 密切相关/ ,/ 不能/ 简单/ 地/ 利用/ 多/ 核技术/ 将/ 数据/ 集/ 水平/ 分割/ 后/ 再/ 进行/ 并行处理/ ./ 通常/ 只能/ 将/ 全部/ 数据/ 集/ 排序/ 后/ ,/ 按照/ 位置/ 找到/ 所/ 需/ 的/ 数值/ ./ 但是/ 在/ 大/ 内存/ 多核/ 处理器/ 平台/ 上/ ,/ 这种/ 方法/ 效率/ 很/ 低/ ./ 本文/ 提出/ 了/ 以/ 多/ 核/ 并行处理/ 为/ 基础/ 的/ 迭代/ 中位数/ 算法/ ,/ 能够/ 利用/ 多核/ 计算资源/ 实现/ 中位数/ 并行计算/ ,/ 从而/ 支持/ 通用/ 的/ 多/ 核/ 内存/ OLAP/ 查询处理/ ./ 本文/ 主要/ 创新/ 体现/ 在/ 以下几点/ :/ (/ 1/ )/ 根据/ 数据仓库/ 星型/ 模型/ 的/ 访问/ 特征/ 设计/ 了/ 面向/ 多核/ 处理器/ 的/ 适于/ 并行处理/ 的/ 存储/ 模型/ :/ 采用/ 行/ // 列/ 混合/ 存储/ 模型/ 和/ 面向/ 多核/ 优化/ 的/ 谓词/ 向量/ 压缩/ 技术/ ./ 事实/ 表/ 采用/ 行/ 存储/ 模型/ ,/ 适合/ 基于/ 动态/ 水平/ 分区/ 的/ 多/ 核/ 并行/ 扫描/ 操作/ ;/ 维表/ 采用/ 列/ 存储/ 模型/ ,/ 可以/ 提高/ 频繁/ 访问/ 的/ 维表/ 数据/ 的/ 存储/ 效率/ ;/ 通过/ 谓词/ 向量/ 压缩/ 技术/ 将/ 多/ 核/ 并行/ 查询/ 所/ 依赖/ 的/ 多个/ 共享/ 维/ 表列/ 缩减/ 为位/ 图/ 向量/ ,/ 进一步/ 减少/ 多核/ 并行处理/ 时/ 的/ cache/ 开销/ ./ (/ 2/ )/ 提出/ 了/ 面向/ 内存/ OLAP/ 的/ 多/ 核/ 并行/ DDTA/ -/ MPJ/ (/ DirectlyDimensionalTupleAccessingforMulticoreParallelJoin/ )/ 算法/ ,/ 实现/ 了/ 查询/ 内多核/ 并行/ 和/ 查询/ 间/ 多/ 核/ 并行处理/ ./ 通过/ 键值/ -/ 地址映射/ 机制/ 将/ 内存/ 维/ 向量/ 转换/ 为/ 公共/ 向量/ 集/ ,/ 消除/ 并发/ 查询/ 的/ 私有/ 数据/ 集/ (/ 如/ 查询/ 时/ 所/ 需/ 的/ 私有/ 哈希/ 表/ )/ ,/ 减少/ 高/ 负载/ 并发/ 查询处理/ 时/ 对/ cache/ 及/ 内存/ 资源/ 的/ 过度/ 消耗/ ,/ 提高/ 了/ OLAP/ 查询处理/ 的/ 性能/ 和/ 多/ 核/ 处理器/ 的/ 利用率/ ./ (/ 3/ )/ 提出/ 了/ 面向/ 多核/ 处理器/ 的/ 中位数/ 并行/ 聚集/ 计算技术/ ,/ 提高/ 了/ 依赖/ 全局/ 排序/ 的/ 不可/ 分布/ 聚集/ 函数/ (/ 如/ 中位数/ 、/ 百分位/ 数等/ )/ 在/ 多/ 核/ 处理器/ 上/ 的/ 并行处理/ 能力/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 工作/ ;/ 第/ 3/ 节/ 阐述/ 多核/ 并行/ 内存/ OLAP/ 关键技术/ ;/ 第/ 4/ 节/ 详细/ 介绍/ 多核/ 并行/ DDTA/ -/ MPJ/ 算法/ ;/ 第/ 5/ 节/ 描述/ 实验设计/ 与/ 实验/ 测试/ 结果/ ;/ 第/ 6/ 节/ 总结/ 本文/ 的/ 工作/ ./ Page32/ 相关/ 工作/ 2.1/ 基于/ 列/ 存储/ 的/ 查询/ 优化/ 技术/ 列/ 存储/ 已/ 成为/ 分析/ 型/ 数据库/ 普遍/ 采用/ 的/ 存储/ 模型/ ,/ 如/ C/ -/ store/ [/ 2/ ]/ 、/ SybaseIQ/ [/ 3/ ]/ 、/ MonetDB/ [/ 4/ ]/ 等/ 都/ 采用/ 列/ 存储/ 模型/ 来/ 支持/ 面向/ 少量/ 属性/ 的/ 列式/ 分析/ 处理/ ./ 通过/ 将列/ 数据/ 连续/ 存储/ 来/ 获取/ 更好/ 的/ 压缩/ 性能/ 以及/ 数据/ 访问/ 时/ 的/ cache/ 性能/ 和/ I/ // O/ 性能/ ./ 但列/ 存储/ 中/ 相关/ 属性/ 的/ 访问/ 要/ 转化/ 为/ 列间/ 操作/ ,/ 并/ 产生/ 大量列/ 连接/ 中间/ 结果/ ,/ 相对/ 于行/ 存储/ 的/ 流水线/ 处理/ 模式/ 而言/ ,/ 列/ 存储/ 会/ 消耗/ 更/ 多/ 的/ 内存/ 资源/ ./ PAX/ [/ 5/ ]/ 将/ 一个/ 数据/ 页/ 中/ 的/ 元组/ 按照/ 列/ 属性/ 组织/ 在/ 一起/ ,/ 实现/ 页/ 内/ 按列/ 访问/ ,/ 增加/ 了/ 页/ 内/ 记录/ 的/ 空间/ 局部性/ ./ MonetDB/ // X100/ [/ 6/ ]/ 提出/ 了/ 向量/ 计算/ 模型/ ,/ 通过/ positional/ -/ join/ 算法/ 访问/ cache/ 中/ 的/ 向量/ 来/ 消除/ 传统/ 列/ 存储/ 在/ 多列/ 处理/ 时/ 的/ 物化/ 代价/ ./ 文献/ [/ 7/ ]/ 进一步/ 提出/ 了/ 块/ 内行/ -/ 列/ 转换/ 技术/ ,/ 根据/ 不同/ 处理/ 特点/ 可以/ 动态/ 选择/ 优化/ 的/ 存储/ 模型/ ./ Datamorphing/ [/ 8/ ]/ 根据/ 负载/ 特征/ 将/ 关联/ 列/ 组合/ 在/ 一起/ 存储/ ,/ 当/ 访问/ 关联/ 属性/ 时/ 可以/ 提高/ cache/ 性能/ ./ 但/ 它/ 是/ 针对/ 特定/ 查询/ 负载/ 的/ ,/ 需要/ 对/ 数据/ 的/ 物理/ 分布/ 预先/ 进行/ 处理/ ./ 对于/ 内存/ 数据仓库/ ,/ 查询/ 负载/ 具有/ 相对/ 稳定/ 的/ 特点/ ,/ 可以/ 采用/ 类似/ 技术/ 将/ 关联度/ 高/ 的/ 属性/ 组合/ 在/ 一起/ 存储/ ,/ 提高/ 多/ 属性/ 访问/ 时/ 的/ 内存/ 带宽/ 效率/ 和/ cache/ 性能/ ./ InfoBright/ [/ 9/ ]/ 把/ 64KB/ 个/ 的/ 行/ 记录/ 组成/ 一组/ ,/ 称为/ 数据包/ ,/ 然后/ 将/ 每个/ 数据包/ 中/ 的/ 数据/ 按列/ 存储/ ,/ 相当于/ 水平/ 存储/ 和/ 列/ 存储/ 的/ 组合/ 策略/ ./ Vertica/ [/ 10/ ]/ 的/ 事实/ 表/ 采用/ 列/ 存储/ ,/ 按照/ 相关/ 属性/ 分成/ 几个/ 投影/ ,/ 从而/ 可以/ 增强/ 查询/ 时/ 的/ 数据/ 局部性/ ,/ 提高/ I/ // O/ 效率/ ./ 基于/ 列/ 存储/ 的/ 查询/ 优化/ 技术/ 有/ 两种/ :/ 一种/ 是/ 采用/ 列/ 存储/ 数据/ 而/ 查询/ 分析/ 采用/ 行/ 存储/ 处理/ 技术/ ,/ 如/ Greenplum/ ,/ InfoBright/ ,/ C/ -/ store/ 等/ ./ 这种/ 技术/ 在/ 内存/ 中将/ 数据/ 由列/ 存储/ 转换/ 为行/ 存储/ ,/ 以/ 流水线/ 方式/ 完成/ OLAP/ 查询处理/ ./ 另/ 一种/ 是/ 采用/ 列/ 存储/ 数据/ ,/ 查询/ 分析/ 采用/ 列/ 代数/ 查询处理/ 引擎/ ,/ 如/ MonetDB/ 、/ invisiblejoin/ [/ 11/ ]/ 等/ ./ 2.2/ 多核/ 并行/ 查询/ 优化/ 算法/ 多核/ 处理器/ 采用/ 共享/ 最后/ 一级/ cache/ (/ LastLevelCache/ ,/ LLC/ )/ 的/ 硬件/ 架构/ ,/ 优化/ cache/ 性能/ 是/ 提高/ 多核/ 处理/ 性能/ 的/ 基础/ ./ 相对/ 于/ cache/ 容量/ 而言/ 频繁/ 访问/ 数据/ 集/ 越小越/ 容易/ 提高/ 其/ 在/ cache/ 中/ 的/ 驻留/ 能力/ ./ 因此/ 在/ 设计/ 算法/ 时/ 需要/ 最小化/ 各种/ 频繁/ 访问/ 的/ 数据/ 集/ ,/ 例如/ 查询处理/ 时/ 用到/ 的/ 连接/ 哈希/ 表/ 和/ 分组/ 聚集/ 哈希/ 表等/ 中间/ 数据结构/ ./ 对于/ 哈希/ 连接/ 操作/ 而言/ ,/ 哈希/ 表是/ 连接/ 操作/ 中/ 的/ 强/ 局部性/ 数据/ 集/ ,/ radix/ -/ cluster/ [/ 12/ ]/ 通过/ 以/ 基数/ 为/ 分区/ 的/ 方法/ 来/ 控制/ 哈希/ 分区/ 的/ 最优/ 数据/ 集/ 大小/ ,/ 提高/ 哈希/ 表/ 的/ cache/ 访问/ 性能/ ./ 在/ 多/ 核/ 并行/ 查询/ 优化/ 技术/ 方面/ ,/ 以/ MonetDB/ 为/ 代表/ 的/ 列/ 存储/ 数据库/ 将列/ 数据/ 按照/ 处理器/ 核心/ 进行/ 逻辑/ 分区/ 来/ 支持/ 连接/ 操作/ 的/ 并行/ 化/ ./ 但/ 局部/ 连接/ 结果/ 需要/ 合并/ 后/ 才能/ 执行/ 后面/ 的/ 操作/ ,/ 在/ 整个/ 查询/ 执行/ 计划/ 中/ 仍然/ 具有/ 较/ 高/ 的/ 串行/ 负载/ 比例/ ./ IBM/ 的/ BLINK/ [/ 13/ ]/ 技术/ 使用/ 非/ 规范化/ 的/ 存储/ 模型/ 将/ 复杂/ 模式/ 转换/ 为/ 一个/ 大/ 的/ 连接/ 表/ ,/ 然后/ 以/ “/ memorybank/ ”/ 为/ 单位/ 进行/ 压缩/ 后/ 再/ 划分/ 列/ 存储单元/ ./ 各列/ 之间/ 通过/ positionaljoin/ 算法/ 来/ 支持/ 行式/ 访问/ ./ 这种/ 行式/ 处理/ 技术/ 消除/ 了/ 复杂/ 的/ 计算/ ,/ 具有/ 接近/ 线性/ 的/ 并行/ 加速/ 比/ ./ 但/ 由于/ 要/ 将/ 较/ 小/ 的/ 维表/ 属性/ 物化/ 到/ 庞大/ 的/ 事实/ 表中/ ,/ 复杂/ 谓词/ (/ 如/ 字符串/ 比较/ 等/ )/ 需要/ 进行/ 大量/ 的/ 重复/ 计算/ ,/ 同时/ 也/ 造成/ 存储空间/ 的/ 极大/ 膨胀/ ,/ 多核/ 并行/ 的/ 优化/ 收益/ 受到/ 冗余/ 数据/ 访问/ 代价/ 的/ 影响/ ./ DDTA/ -/ JOIN/ 通过/ 谓词/ 向量/ 和/ 键值/ -/ 地址映射/ 来/ 实现/ join/ -/ free/ (/ 消除/ 传统/ 哈希/ 连接/ 代价/ )/ 的/ 星型/ 连接/ ,/ 在/ 不/ 改变/ 模式/ 的/ 前提/ 下/ 获得/ 与/ BLINK/ 一样/ 的/ 线性/ 处理/ 性能/ ,/ 并且/ 降低/ 了/ 复杂/ 谓词/ 的/ 操作/ 代价/ ./ 在/ 多/ 核/ 并行算法/ 方面/ DDTA/ -/ JOIN/ 与/ BLINK/ 具有/ 相同/ 的/ 加速/ 比/ ,/ 但/ 却/ 大大降低/ 了/ BLINK/ 所/ 造成/ 的/ 存储空间/ 的/ 膨胀/ ,/ 提高/ 了/ 存储/ 效率/ ./ 对于/ 通用/ 的/ 多/ 核/ 并行/ 查询/ 优化/ 算法/ ,/ 需要/ 从/ 查询/ 执行/ 计划/ 优化/ 、/ 线程/ 调度/ 优化/ 和/ 并行/ 连接/ 操作/ 优化/ 几个/ 方面/ 来/ 提高/ 多核/ 处理/ 效率/ ./ 在/ 多/ 核/ 平台/ 上/ ,/ 文献/ [/ 14/ ]/ 提出/ 并行/ 的/ 基于/ 动态/ 规划/ 的/ 连接/ 枚举/ 器/ ,/ 对于/ 复杂/ 的/ 查询/ 可以/ 产生/ 优化/ 的/ 查询/ 执行/ 计划/ ,/ 文献/ [/ 15/ ]/ 针对/ 多线程/ 查询/ 优化/ 技术/ 进行/ 研究/ ,/ 文献/ [/ 16/ ]/ 提出/ 基于/ 并行/ 分区/ ,/ 内存/ 缓冲/ 池/ 和/ 适于/ 多线程/ 处理/ 的/ 数据结构/ 的/ 系统/ 架构/ ./ 在/ 研究/ 连接/ 操作/ 的/ 多/ 核/ 并行/ 优化/ 算法/ 上/ ,/ 文献/ [/ 17/ ]/ 在/ 两个/ 不同/ 的/ 多/ 核/ 硬件平台/ 上/ ,/ 分别/ 对/ 无/ 分区/ 的/ 哈希/ 连接/ ,/ 共享/ 分区/ 的/ 哈希/ 连接/ ,/ 无/ 共享/ 分区/ 的/ 哈希/ 连接/ 以及/ Radix/ 哈希/ 连接/ 进行/ 实验/ 得出/ 这样/ 的/ 结论/ :/ 传统/ 多核/ 并行/ 优化/ 技术/ 所/ 采用/ 的/ 哈希/ 算法/ 是/ 基于/ 哈希/ 数据/ 预/ 分区/ 的/ ,/ 因此/ 需要/ 付出/ 预处理/ 代价/ ,/ 而/ 这个/ 代价/ 高于/ 并行/ 哈希/ 算法/ 所/ 带来/ 的/ cache/ 命中率/ 的/ 提高/ ./ 简单/ 的/ 哈希/ 连接/ 算法/ 在/ 多/ 核/ 平台/ 上/ 具有/ 更好/ 的/ 综合性/ 能/ ,/ 包括/ 降低/ 计/ Page4/ 算/ 代价/ 、/ 数据/ 同步/ 代价/ 和/ 优化/ cache/ 访问/ 模式/ ,/ 这比/ 单纯/ 地/ 考虑/ cachemiss/ 的/ 算法/ 更加/ 适合/ 多核/ 平台/ ./ 2.3/ 中位数/ 优化/ 算法/ 研究/ 在/ 内存/ OLAP/ 应用/ 中/ ,/ 可/ 分布/ 聚集/ 计算/ 函数/ 能够/ 充分利用/ 多核/ 性能/ 来/ 提高/ 查询/ 效率/ ./ 文献/ [/ 18/ -/ 19/ ]/ 在/ 多/ 核/ 平台/ 上/ 研究/ 了/ 这类/ 聚集/ 函数/ 的/ 优化/ 技术/ ./ 针对/ 中位数/ 等/ 需要/ 全局/ 排序/ 的/ 聚集/ 函数/ ,/ OLAP/ 的/ 并行/ 化/ 处理/ 性能/ 会/ 受制于/ 串行/ 算法/ 这个/ 瓶颈/ ./ 文献/ [/ 20/ ]/ 提出/ 在/ 无/ 共享/ (/ Shared/ -/ Nothing/ ,/ SN/ )/ 集群/ 上/ 使用/ 迭代/ 中位数/ 逼近/ 算法/ 来/ 剪裁/ 远离/ 全局/ 中位数/ 的/ 数据/ ,/ 减少/ 全局/ 合并/ 中位数/ 计算/ 的/ 数据传输/ 代价/ ./ 在/ 多/ 核/ 并行/ 中位数/ 计算/ 时/ ,/ 数据/ 分片/ 可以/ 采用/ 根据/ 内存/ 偏移/ 地址/ 段/ 的/ 逻辑/ 划分/ 来/ 消除/ SN/ 集群/ 中/ 的/ 物理/ 划分/ 代价/ ,/ 同时/ 需要/ 根据/ 共享/ cache/ 容量/ 对/ 迭代/ 剪裁/ 次数/ 和/ 全局/ 合并/ 数据/ 集/ 大小/ 之间/ 进行/ 优化/ 选择/ ,/ 以/ 获得最佳/ 的/ 整体/ 并行处理/ 性能/ ./ 文献/ [/ 21/ -/ 23/ ]/ 针对/ 不同/ 应用/ 场景/ 下/ 的/ 中位数/ 算法/ 进行/ 了/ 研究/ ,/ 但/ 在/ 多/ 核/ OLAP/ 应用/ 场景/ 下/ 的/ 并行/ 中位数/ 计算/ 的/ 研究/ 还/ 没有/ 成熟/ 的/ 技术/ ,/ 通常/ 采用/ 的/ 是/ 集中式/ 排序/ 方法/ 获得/ 中位数/ ,/ 没有/ 充分/ 对/ 中位数/ 计算/ 进行/ 并行/ 化/ 处理/ ./ 3/ 内存/ OLAP/ 实现/ 技术/ 多核/ 内存/ OLAP/ 在/ 存储/ 模型/ 上/ 采用/ 维表/ 内存/ 列/ 存储/ ,/ 事实/ 表/ 内存/ 行/ 存储/ 的/ 混合/ 存储/ 模型/ ,/ 事实/ 表/ 可以/ 根据/ 负载/ 的/ 数据/ 访问/ 特性/ 采用/ 和/ DataMorphing/ 类似/ 的/ 行/ // 列/ 存储/ 模型/ ,/ 提高/ 数据/ 访问/ 时/ 的/ cache/ 性能/ ./ 内存/ OLAP/ 查询/ 优化/ 技术/ 主要/ 有/ 两个/ 方面/ :/ 一是/ 提高/ 查询处理/ 时/ 数据/ 访问/ 内存/ 的/ 带宽/ 效率/ ,/ 增强/ 内存/ 访问/ 性能/ ;/ 二是/ 优化/ OLAP/ 的/ 星型/ 连接/ 操作/ ,/ 提高/ 连接/ 操作/ 在/ CPU/ 上/ 的/ 代码执行/ 效率/ ./ 3.1/ 存储/ 模型/ 实现/ 技术/ (/ 1/ )/ 存储/ 模型/ 我们/ 所/ 研究/ 的/ 多/ 核/ 内存/ OLAP/ 采用/ 磁盘/ -/ 内存/ 二级/ 存储/ 层次/ 上/ 的/ 行/ // 列/ 混合/ 存储/ 模型/ ./ 事实/ 表和维表/ 的/ 原始数据/ 存储/ 于/ PostgreSQL/ 中/ ./ 系统启动/ 时/ 事实/ 表从/ 磁盘/ 加载/ 到/ 内存/ 并/ 转换/ 为/ 内存/ 存储/ 模型/ ,/ 在/ 加载/ 时/ 可以/ 根据/ 查询/ 负载/ 中/ 属性/ 之间/ 的/ 协同/ 访问/ 频率/ 来/ 动态/ 选择/ 行/ 存储/ 、/ 列/ 存储/ 和/ 聚集/ 列/ 存储/ ./ 如果/ 事实/ 表中/ 所有/ 属性/ 经常/ 共同/ 访问/ ,/ 可以/ 采用/ 行/ 存储/ ;/ 如果/ 部分/ 属性/ 经常/ 共同/ 访问/ ,/ 可以/ 采用/ 聚集/ 列/ 存储/ ;/ 如果/ 属性/ 间/ 相关性/ 不/ 大/ ,/ 可以/ 采用/ 独立/ 的/ 列/ 存储/ ./ 维表/ 从/ 磁盘/ 加载/ 到/ 内存/ 并/ 转换/ 为/ 内存/ 列/ 存储/ 模型/ ,/ 数据/ 宽度/ 较大/ 的/ 字符/ 型/ 属性/ 可以/ 通过/ 数据压缩/ 技术/ 来/ 进一步/ 减少/ 内存/ 存储/ 开销/ ./ 访问/ 维表上/ 时/ 主要/ 集中/ 在/ 对/ 谓词/ 属性/ 和/ 低势/ 集/ 分组/ 属性/ 的/ 访问/ 上/ ,/ 事实/ 表和维表主/ -/ 外键/ 的/ 约束/ 决定/ 了/ 维表/ 属性/ 是/ 频繁/ 访问/ 的/ 数据/ 集/ ,/ 因此/ 采用/ 列/ 存储/ 模型/ 来/ 减少/ 频繁/ 访问/ 数据/ 集/ 的/ 大小/ ./ 与/ 键值/ -/ 地址映射/ 相结合/ ,/ 维表/ 可以/ 作为/ 多核/ 并行/ OLAP/ 的/ 共享/ 哈希/ 表/ ,/ 采用/ 列/ 存储/ 保证/ 在/ 连接/ 操作/ 时/ 具有/ 较/ 小/ 的/ 参照/ 数据/ 集/ ,/ 在/ 高/ 负载/ 多核/ 并发/ 查询处理/ 时/ 可以/ 避免/ 产生/ 私有/ 哈希/ 表/ ,/ 从而/ 减少/ 内存/ 开销/ 和/ 对/ cache/ 的/ 争用/ ./ 事实/ 表由定/ 长/ 的/ 外键/ 属性/ 和/ 度量/ 属性/ 组成/ ,/ 当/ 事实/ 表/ 采用/ 行/ 存储/ 时/ ,/ 能够/ 根据/ 内存/ 事实/ 表/ 起始/ 地址/ 计算/ 出/ 每/ 一个/ 分片/ 的/ 起始/ 地址/ ,/ 在/ 多/ 核/ 并行处理/ 时/ 可以/ 按/ 内存/ 行/ 偏移/ 地址/ 动态/ 划分/ 水平/ 分片/ ,/ 实现/ 查询处理/ 负载/ 并行/ 化/ ./ 由于/ 维表/ 采用/ 内存/ 列/ 存储/ 和/ 键值/ -/ 地址映射/ 的/ 连接/ 技术/ ,/ 因此/ 事实/ 表不/ 需要/ 按外键/ 键值/ 进行/ 哈希/ 分区/ ,/ 可以/ 简化/ 查询处理/ ,/ 减少/ 数据/ 分区/ 代价/ ./ (/ 2/ )/ 事实/ 表/ 聚集/ 存储/ 表/ 扫描/ 操作/ 的/ 效率/ 和/ 性能/ 取决于/ 有效/ 访问/ 属性/ 宽度/ 总和/ 占/ 记录/ 总/ 宽度/ 的/ 比例/ ,/ 本文/ 将/ 此/ 比例/ 称为/ 访问/ 密度/ ./ 例如/ ,/ 在/ SSB/ (/ StarSchemaBenchmark/ )/ 数据库/ 中/ ,/ 事实/ 表有/ 17/ 个/ 属性/ ,/ 但/ 在/ 全部/ 测试/ 查询/ 中/ 只有/ 7/ 个/ 属性/ (/ 属性/ 个数/ 比例/ 为/ 41.2/ %/ )/ 被/ 使用/ ,/ 访问/ 密度/ 为/ 34.2/ %/ ./ 我们/ 按照/ 事实/ 表/ 属性/ 的/ 访问/ 频度/ 进行/ 聚类/ 的/ 方法/ 来/ 垂直/ 划分/ 事实/ 表/ ,/ 将/ 整个/ 事实/ 表/ 划分/ 为/ 频繁/ 访问/ 和/ 非/ 频繁/ 访问/ 两个/ 垂直/ 分片/ ./ 频繁/ 访问/ 垂直/ 分片/ 中/ 包含/ 维/ 属性/ 、/ 频繁/ 访问/ 的/ 度量/ 属性/ 和/ 附加/ 的/ 分片/ 连接/ 属性/ ,/ 非/ 频繁/ 访问/ 分片/ 中/ 只/ 包含/ 度量/ 属性/ 和/ 连接/ 属性/ ,/ 即/ :/ FF/ (/ D1/ ,/ D2/ ,/ …/ ,/ Dn/ ,/ Mi/ ,/ …/ ,/ Mp/ ,/ Key/ )/ ∪/ 其中/ ,/ (/ Mi/ ,/ …/ ,/ Mp/ )/ ∪/ (/ Mj/ ,/ …/ ,/ Mq/ )/ =/ (/ M1/ ,/ M2/ ,/ …/ ,/ Mm/ )/ ./ 当/ 事实/ 表由/ 磁盘/ 向/ 内存/ 加载/ 时/ 完成/ 事实/ 表/ 聚集/ 列/ 存储/ ,/ 两个/ 聚集/ 存储/ 表在/ 内存/ 中/ 通过/ 键值/ -/ 地址映射/ 的/ 方式/ 实现/ 两个/ 表/ 按/ 相同/ 的/ 内存/ 偏移/ 地址/ 进行/ 访问/ ./ 不同于/ 传统/ 的/ 基于/ 分区/ 连接/ 的/ 访问/ 技术/ ,/ 这种/ 方法/ 消除/ 了/ 大/ 事实/ 表/ 分区/ 之间/ 的/ 连接/ 代价/ ,/ 从而/ 降低/ 了/ 查询/ 中/ 需要/ 跨/ 聚集/ 表/ 访问/ 所/ 造成/ 的/ 记录/ 重构/ 代价/ ./ 未来/ 研究/ 中/ ,/ 可以/ 进一步/ 根据/ 事实/ 表/ 属性/ 间/ 的/ 关联性/ 实现/ 更/ 细粒度/ 的/ 垂直/ 分区/ ,/ 如/ 将/ 频繁/ 访问/ 的/ 外键/ 、/ 组合/ 访问/ 的/ 度量/ 属性/ 以及/ 独立/ 访问/ 的/ 度量/ 属性/ Page5/ 分别/ 作为/ 聚集/ 列/ 存储/ 粒度/ 来/ 提高/ 内存/ 访问/ 效率/ ./ 3.2/ 查询处理/ 模型/ 实现/ 技术/ (/ 1/ )/ 查询处理/ 模型/ 我们/ 所/ 研究/ 的/ 多/ 核/ 内存/ OLAP/ 的/ 基础/ 算法/ 是/ DDTA/ -/ JOIN/ ,/ 该/ 算法/ 是/ 基于/ 行/ 扫描/ 方式/ 的/ 连接/ 优化/ 技术/ ,/ 它/ 将/ OLAP/ 中星/ 型/ 连接/ 对应/ 的/ 查询/ 树/ 转换/ 为/ 基于/ 键值/ -/ 地址映射/ 的/ 维表/ 记录/ 直接/ 访问/ 或/ 谓词/ 向量/ 过滤/ 操作/ ,/ 实现/ join/ -/ free/ 查询处理/ ./ 整个/ OLAP/ 处理过程/ 分为/ 3/ 个/ 阶段/ :/ DDTA/ -/ JOIN/ 连接/ 阶段/ ,/ group/ -/ by/ 操作/ 阶段/ 和/ order/ -/ by/ 操作/ 阶段/ ,/ 从而/ 可以/ 将/ 复杂/ 的/ 多维/ 数据处理/ 转换/ 为/ 类似/ 单表/ 扫描/ 操作/ 的/ 线性/ 处理过程/ ,/ 更加/ 适合/ 在/ 多/ 核/ 处理器/ 上/ 并行处理/ ./ (/ 2/ )/ 键值/ -/ 地址映射/ (/ Key/ -/ AddressMapping/ )/ 多核/ 内存/ OLAP/ 中/ ,/ 维表/ 采用/ 内存/ 列/ 存储/ ,/ 每个/ 维/ 属性/ 被/ 存储/ 在/ 独立/ 的/ 内存/ 数组/ 中/ ./ 各维表/ 的/ 主键/ 大多数/ 没有/ 特殊/ 的/ 语义/ 信息/ ,/ 一般/ 为/ 连续/ 递增/ 的/ 数值/ ./ 数据仓库/ 中/ 数据/ 的/ 只读/ 特性/ 保证/ 了/ 维表/ 记录/ 的/ 稳定性/ ,/ 因此/ 在/ 维表/ 主键/ 和/ 内存/ 维/ 属性/ 数组/ 下标/ 之间/ 能够/ 建立/ 一一/ 映射/ 关系/ ,/ 即/ fMap/ 为/ 映射函数/ ,/ 则/ 有/ fMap/ (/ x/ |/ x/ ∈/ FactDi/ )/ =/ AddressOf/ (/ T/ |/ T/ ∈/ Di/ ∧/ T/ (/ PK/ )/ =/ x/ )/ ,/ FactDi/ 为/ 事实/ 表中/ 第/ i/ 个维/ 属性/ ,/ Di/ 为/ 第/ i/ 个维表/ ,/ T/ 为维表/ 记录/ ,/ AddressOf/ (/ T/ )/ 为/ 该/ 维表/ 记录/ 所有/ 属性/ 值/ 的/ 内存/ 偏移/ 地址/ ./ 通过/ 键值/ -/ 地址映射/ 机制/ ,/ 事实/ 表/ 记录/ 中/ 的/ 外/ 键值/ 对应/ 为维/ 属性/ 的/ 偏移/ 地址/ ./ 星型/ 模型/ 可以/ 看作/ 是/ 一个/ 虚拟/ 连接/ 表/ ,/ 而/ 事实/ 表中/ 的/ 外/ 键值/ 相当于/ 内置/ 的/ 维/ 属性/ 内存地址/ 指针/ ./ 因此/ 基于/ 事实/ 表外键/ 与/ 维表主/ 键值/ 之间/ 的/ 连接/ 操作/ 可以/ 简化/ 为/ 直接/ 按/ 内存/ 偏移/ 地址/ 进行/ 访问/ 操作/ ,/ 这个/ 连接/ 操作/ 仅/ 需要/ 一个/ CPU/ 指令/ 周期/ 即可/ 完成/ ./ 而/ 传统/ 的/ 时间/ 复杂度/ 为/ O/ (/ 1/ )/ 的/ 哈希/ 连接/ (/ 包图/ 1/ 存储/ 模型/ 和/ DDTA/ -/ JOIN/ 算法/ (/ 4/ )/ Predicate/ -/ Vector/ 谓词/ 向量/ 压缩/ 技术/ 在/ OLAP/ 查询/ 中/ ,/ 维/ 属性/ 的/ 用途/ 是/ 连接/ 操作/ 过滤器/ ,/ 并/ 提供/ 查询/ 所/ 需要/ 的/ 分组/ 属性/ 值/ ./ 由于/ 谓词/ 属括/ 键值/ 哈希/ 映射/ ,/ 哈希/ 探测/ 和/ 键值/ 匹配/ 等/ 操作/ )/ 则/ 需要/ 多个/ CPU/ 指令/ 周期/ 来/ 实现/ 以/ 哈希/ 探测/ 为/ 基础/ 的/ 连接/ 操作/ ,/ 这种/ 键值/ -/ 地址映射/ 的/ 方式/ 有效/ 地/ 降低/ 了/ 连接/ 操作/ 的/ CPU/ 代价/ ./ (/ 3/ )/ DDTA/ -/ JOIN/ 算法/ 如图/ 1/ 所示/ ,/ DDTA/ -/ JOIN/ 完成/ 多维/ 数据分析/ 处理/ 模型/ 中/ 事实/ 表与/ 全部/ 维表/ 的/ 连接/ 操作/ ./ 在/ 维表/ 内存/ 列/ 存储/ 和/ 键值/ -/ 地址/ 映射函数/ 两种/ 机制/ 的/ 支持/ 下/ ,/ 事实/ 表/ 被/ 映射/ 成/ 一个/ 虚拟/ 的/ 连接/ 表/ ,/ 复杂/ 的/ 多表/ 连接/ 操作/ 被/ 规范化/ 为/ 在/ 虚拟/ 连接/ 表上/ 的/ 选择/ 和/ 投影/ 操作/ ./ 采用/ 与/ join/ -/ order/ 相似/ 的/ 谓词/ 树/ 优化/ 技术/ 来/ 优先/ 处理/ 低/ 选择率/ 的/ 谓词/ 操作/ ,/ 从而/ 可以/ 减少/ 无效/ 谓词/ 的/ 对维/ 属性/ 列/ 的/ 访问/ 和/ 谓词/ 处理/ 代价/ ./ 例如/ 事实/ 表/ 记录/ (/ 1/ ,/ 3/ ,/ 2/ ,/ 3/ )/ 在/ 扫描/ 时/ ,/ 维/ 属性/ 值/ 1/ ,/ 3/ ,/ 2/ 分别/ 映射/ 为/ 内存/ 维表/ D1/ ,/ D2/ ,/ D3/ 上/ 的/ 维/ 属性/ 数组/ 下标/ 0/ ,/ 2/ ,/ 1/ ./ 查询/ 中/ 的/ 谓词/ 表达式/ 按/ 选择率/ 被/ 优化/ 为/ (/ D1/ ./ A/ >/ a/ ∩/ D2/ ./ B/ =/ b/ )/ ∩/ (/ D3/ ./ C/ >/ c/ ∪/ D3/ ./ D/ </ d/ )/ ,/ 因此/ 最终/ 执行/ 的/ 谓词/ 表达式/ 为/ (/ D1/ _/ A/ [/ 0/ ]/ >/ a/ ∩/ D2/ _/ B/ [/ 2/ ]/ =/ b/ )/ ∩/ (/ D3/ _/ C/ [/ 1/ ]/ >/ c/ ∪/ D3/ _/ D/ [/ 1/ ]/ </ d/ )/ ,/ 其中/ D1/ _/ A/ 表示/ 维表/ D1/ 中/ 属性/ A/ 对应/ 的/ 数组/ ,/ 以此类推/ ./ 当/ 谓词/ 表达式/ 的/ 结果/ 为/ TRUE/ 时/ ,/ 按外键/ 映射/ 地址/ 直接/ 访问/ 分组/ 属性/ 列中/ 指定/ 位置/ 的/ 数据/ 并/ 与/ 度量/ 属性/ 值/ 合并/ 为/ 连接/ 结果/ ,/ 然后/ 再/ 进行/ group/ -/ by/ 操作/ ./ DDTA/ -/ JOIN/ 与/ 传统/ 的/ 多表/ 连接/ 操作/ 相比/ 最大/ 的/ 区别/ 是/ 将/ 复杂/ 的/ 连接/ 树/ 扁平化/ 为/ 线性/ 的/ 谓词/ 表达式/ 运算/ ,/ 使维表/ 向量/ 成为/ 不同/ 查询/ 的/ 共享/ 数据/ ./ 在/ 多/ 核/ 并行处理/ 时/ ,/ 每个/ 事实/ 表/ 分片/ 可以/ 直接/ 映射/ 到/ 共享/ 的/ 内存/ 维/ 表列/ 中/ ,/ 不/ 需要/ 构建/ 额外/ 的/ 哈希/ 表/ ;/ 同时/ 多核/ 并行/ 访问/ 可以/ 增强/ 维/ 表列/ 的/ 访问/ 频率/ ,/ 提高/ 维/ 表列/ 在/ cache/ 中/ 的/ 数据/ 局部性/ 强度/ ,/ 提高/ cache/ 命中率/ ./ 性是/ 频繁/ 访问/ 数据/ 集/ ,/ 因此/ 减少/ 谓词/ 属性数据/ 集/ 的/ 大小/ 对/ 提高/ cache/ 利用率/ 和/ CPU/ 效率/ 具有/ 重要/ 的/ 促进作用/ ./ Page6/ 谓词/ 向量/ 数据压缩/ 技术/ (/ predicate/ -/ vector/ )/ 是/ 将/ 维表上/ 全部/ 的/ 谓词/ 操作/ 进行/ 预计/ 算/ ,/ 如果/ 当前/ 维/ 属性/ 满足/ 全部/ n/ 个/ 谓词/ 操作/ 条件/ 则/ 在位/ 图/ (/ bitmap/ )/ 中将/ 该/ 记录/ 置/ 1/ ,/ 反之/ 则/ 置/ 0/ ,/ 即/ bitPredVector/ [/ i/ ]/ =/ δ/ 1/ δ/ 2/ …/ δ/ n/ (/ Ti/ )/ ./ 通过/ 在/ 维表上/ 预处理/ 谓词/ 操作/ 的/ 方式/ ,/ 可以/ 获得/ 该维表/ 谓词/ 操作/ 结果/ 的/ 位/ 向量/ Pred/ -/ Vector/ [/ ]/ =/ {/ 0/ ,/ 0/ ,/ 1/ ,/ 0/ ,/ 1/ ,/ …/ }/ ,/ 用/ 谓词/ 向量/ 代替/ 维/ 属性/ 即可/ 完成/ 谓词/ 的/ 判断/ 操作/ ./ 采用/ 谓词/ 向量/ 技术/ 后/ ,/ 执行/ 该维表上/ 所有/ 谓词/ 操作/ 所/ 需要/ 的/ 频繁/ 数据/ 集/ 大小/ 为/ Nbit/ (/ N/ 代表/ 维表/ 记录/ 行/ 数/ )/ ./ 这样/ 做/ 极大/ 地/ 减小/ 了/ 查询处理/ 过程/ 中/ 的/ 频繁/ 数据/ 集/ ,/ 而且/ 不/ 需要/ 对/ 谓词/ 操作/ 进行/ 重复/ 计算/ ,/ 在/ 查询处理/ 时/ 进一步/ 降低/ 了/ 共享/ cache/ 的/ 空间/ 开销/ ./ 在/ SF/ =/ 8/ 的/ SSB/ 测试/ 集中/ ,/ 维表/ 总行/ 数为/ 858555/ ,/ 所/ 产生/ 的/ 谓词/ 向量/ 总/ 大小/ 为/ 0.1/ MB/ ,/ 而/ 我们/ 在/ 实验/ 中/ 所用/ 的/ 处理器/ L2cache/ 为/ 4MB/ ,/ 谓词/ 向量/ 极大/ 地/ 缩减/ 了/ 对/ 共享/ cache/ 的/ 需求/ ./ 在/ 并行/ OLAP/ 中/ ,/ 谓词/ 向量/ 作为/ 查询/ 的/ 共享/ 访问/ 数据/ 集只/ 需要/ 保留/ 一份/ ,/ 不会/ 因/ 处理/ 线程/ 的/ 增加/ 而/ 增加/ ./ 4/ 多核/ 并行/ DDTA/ -/ MPJ/ 算法/ 及/ 实现/ 根据/ 文献/ [/ 17/ ]/ 的/ 结论/ ,/ 我们/ 采用/ 两个/ 关键技术/ 来/ 保证/ 多核/ 并行/ 时多表/ 连接/ 查询/ 算法/ 的/ 性能/ :/ 一是/ 采用/ 谓词/ 向量/ 和/ 共享内存/ 分组/ 维/ 属性/ 列/ 作为/ 连接/ 操作/ 中/ 的/ 公共/ 连接/ 过滤器/ 和/ 分组/ 属性/ 抽取/ 器/ ./ 这种/ 方法/ 不/ 需要/ 按/ 连接/ 属性/ 为/ 每个/ 查询处理/ 线程/ 进行/ 数据/ 分区/ 和/ 创建/ 私有/ 哈希/ 表/ ,/ 从而/ 可以/ 减少/ 数据/ 分区/ 预处理/ 代价/ 和/ 大量/ 私有/ 数据/ 所/ 造成/ 的/ cache/ 争用/ ;/ 二是/ 在/ 键值/ -/ 地址映射/ 机制/ 的/ 支持/ 下/ ,/ 将/ 事实/ 表与维表/ 之间/ 的/ 哈希/ 连接/ 操作/ 简化/ 为/ 按/ 映射/ 地址/ 直接/ 进行/ 内存/ 访问/ ,/ 同时/ 将/ 连接/ 操作/ 优化/ 为/ 直接/ 按/ 位置/ 访问/ 谓词/ 向量/ ./ 由于/ 线程/ 间/ 共享/ 谓词/ 向量/ 能够/ 增大/ 其/ 在/ cache/ 中/ 的/ 访问/ 频率/ ,/ 提高/ 数据/ 的/ cache/ 驻留/ 性/ ./ 这样/ 可以/ 减少/ 每个/ 线程/ 的/ 数据/ 空间/ 开销/ ,/ 降低/ 线程/ 在/ 共享/ cache/ 中/ 的/ 空间/ 争用/ ,/ 从而/ 可以/ 最小化/ 事实/ 表与维表/ 之间/ 的/ 哈希/ 连接/ 代价/ ./ OLAP/ 中有/ 两类/ 并行处理/ 需求/ :/ 查询/ 内/ 并行/ 和/ 查询/ 间/ 并行/ ./ 查询/ 内/ 并行/ 是/ 将/ 一个/ 较大/ 的/ 查询/ 任务/ 分解/ 为/ 多个/ 较/ 小/ 的/ 、/ 可/ 并行处理/ 的/ 查询/ 任务/ ,/ 从而/ 减少/ 单个/ 查询/ 的/ 执行/ 时间/ ;/ 查询/ 间/ 并行/ 是/ 通过/ 并发/ 查询处理/ 技术/ 同时/ 完成/ 多个/ 查询/ 任务/ ,/ 减少/ 并发/ 用户/ 的/ 等待时间/ ,/ 提高/ 多核/ 处理器/ 的/ 效率/ ./ 多核/ 并行/ 内存/ OLAP/ 能够/ 极大地提高/ ad/ -/ hoc/ 查询/ 性能/ ,/ 从而/ 使/ 传统/ 的/ OLAP/ 突破性/ 能/ 瓶颈/ ,/ 服务/ 于/ 更/ 广大/ 的/ 分析/ 用户/ ./ 由于/ 查询/ 负载/ 不断/ 增加/ ,/ 这/ 使得/ OLAP/ 并发/ 查询/ 性能/ 变得/ 更加/ 重要/ ./ 影响/ 多核/ 并行算法/ 性能/ 的/ 主要/ 因素/ 有/ :/ 查询处理/ 中/ 并行/ 化/ 负载/ 与/ 串行化/ 负载/ 比例/ ,/ 并行处理/ 过程/ 中/ 私有/ 数据/ 空间/ 开销/ 所/ 导致/ 的/ cache/ 容量/ 冲突/ 以及/ 内存/ 带宽/ 争用/ 所/ 产生/ 的/ 数据/ 访问/ 延迟/ ./ DDTA/ -/ MPJ/ 将/ 查询/ 树/ 扁平化/ ,/ 可以/ 最小化/ 查询处理/ 过程/ 中/ 的/ 串行/ 负载/ ;/ 同时/ 采用/ 共享/ 维表/ 和/ 谓词/ 向量/ 压缩/ 技术/ 最小化/ 查询处理/ 所/ 需/ 的/ 私有/ 数据/ ,/ 从而/ 降低/ 了/ 对/ 内存/ 带宽/ 的/ 需求/ ./ DDTA/ -/ MPJ/ 针对/ 查询/ 特点/ 提出/ 三种/ 查询处理/ 算法/ :/ 查询/ 内多核/ 并行算法/ (/ IntraDDTA/ -/ MPJ/ )/ ,/ 查询/ 间/ 多/ 核/ 并行算法/ (/ InterDDTA/ -/ MPJ/ )/ 和/ 中位数/ 多核/ 并行算法/ (/ Median/ -/ MPJ/ )/ ./ 4.1/ 查询/ 内多核/ 并行算法/ IntraDDTA/ -/ MPJ/ 在/ 多/ 核/ 并行/ 内存/ OLAP/ 查询/ 执行/ 的/ 3/ 个/ 阶段/ 中/ ,/ DDTA/ -/ JOIN/ 是/ 在/ 数据/ 子集/ 上/ 完成/ 并行处理/ ,/ Group/ -/ by/ 操作/ 和/ Order/ -/ by/ 操作/ 完成/ 全局/ 分组/ 和/ 排序/ 任务/ ./ 因此/ IntraDDTA/ -/ MPJ/ 可以/ 采用/ 两种/ 并行/ 实现/ 技术/ :/ 第/ 1/ 种/ 方案/ 是/ 完全/ 并行/ 模式/ ,/ 如图/ 3/ (/ a/ )/ 所示/ ./ 将/ 内存/ 事实/ 表/ 按/ 可用/ 的/ 处理器/ 核心/ 动态/ 划分/ 为/ 若干个/ 水平/ 分片/ ,/ 然后/ 在/ 每个/ 水平/ 分片/ 上/ 并行执行/ 查询处理/ 任务/ ./ 各个/ 并行/ 子/ 查询/ 任务/ 共享/ 访问/ 维表/ 向量/ ,/ 消除/ 子/ 查询/ 的/ 私有/ 数据/ 集/ 开销/ ,/ 提高/ 数据/ 访问/ 的/ 局部性/ ;/ 各子/ 查询/ 维护/ 独立/ 的/ 分组/ 聚集/ 表并/ 生成/ 已排/ 好序/ 的/ 查询/ 结果/ 子集/ ,/ 最后/ 将/ 各个/ 子/ 查询/ 的/ 结果/ 子集/ 进行/ 全局/ 归并/ 排序/ ,/ 生成/ 最终/ 的/ 查询处理/ 结果/ ./ 算法/ 1/ ./ 完全/ 并行/ IntraDDTA/ -/ MPJ/ 算法/ ./ IntraDDTA/ -/ MPJ/ (/ SQLStatementST/ )/ {/ // // 将/ SQL/ 分解/ 为/ 各个/ 维表上/ 的/ 子/ 查询/ SQLParser/ (/ ST/ )/ →/ STD/ =/ {/ STD1/ ,/ STD2/ ,/ …/ }/ ;/ // // 生成/ 各维表位/ 图/ 谓词/ 向量/ GenPreBM/ (/ STD/ )/ →/ PreBM/ =/ {/ PB1/ ,/ PB2/ ,/ …/ }/ ;/ // // 根据/ 事实/ 表行数/ 和/ 线程/ 数/ 初始化/ 查询处理/ 线程/ ,/ 分/ Page7GetFactTableRows/ (/ )/ →/ FRows/ ;/ GetThreads/ (/ )/ →/ th/ ;/ InitQueryThreads/ (/ FRows/ ,/ th/ ,/ PreBM/ )/ →/ {/ Qth1/ ,/ Qth2/ ,/ …/ }/ ;/ // // 并行/ 查询处理/ ParaDDTA/ _/ JOIN/ (/ )/ →/ RS/ =/ {/ RS1/ ,/ RS2/ ,/ …/ }/ ;/ GlobalMerge/ (/ RS/ )/ →/ FinalRS/ ;/ RETURN/ (/ FinalRS/ )/ ;/ }/ 这种/ 方案/ 能够/ 实现/ 任务/ 的/ 最大化/ 并行/ ,/ 将/ 串行/ 结果/ 集/ 的/ 合并/ 负载/ 降到/ 最低/ ./ 但/ 每个/ 查询处理/ 任务/ 需要/ 重复使用/ 基于/ 哈希/ 的/ group/ -/ by/ 数据结构/ ,/ 当/ 查询/ 结果/ 集/ 较大/ 时/ ,/ 各个/ 子/ 查询/ 独立/ 的/ 哈希/ 聚集/ 表会图/ 3IntraDDTA/ -/ MPJ/ 算法/ 完全/ 并行/ 方案/ 中/ 数据/ 之间/ 独立/ ,/ 在/ 共享/ 哈希/ 聚集/ 表上/ 无/ 写访问/ 冲突/ ,/ 但/ 需要/ 为/ 每个/ 查询处理/ 线程/ 维护/ 私有/ 的/ 哈希/ 聚集/ 表/ ,/ 这种/ 方案/ 适合/ 于/ 查询/ 结果/ 集较/ 小/ 的/ 应用/ 场景/ ;/ n/ +/ 1/ 并行/ 模式/ 在/ 哈希/ 聚集/ 阶段/ 采用/ 共享/ 的/ 数据/ 空间/ ,/ 节省/ 了/ 线程/ 的/ 私有/ 数据/ 存储空间/ ,/ 减少/ 了/ 连接/ 处理/ 阶段/ 的/ 并行处理/ 资源/ ./ 但会/ 产生/ 线程/ 间/ 的/ 共享/ 访问/ 冲突/ ,/ 需要/ 并发/ 控制/ 机制/ 来/ 产生/ 较大/ 的/ cache/ 争用/ 问题/ ./ 第/ 2/ 种/ 方案/ 为/ n/ +/ 1/ 并行/ 模式/ ,/ 如图/ 3/ (/ b/ )/ 所示/ ./ 将/ 全部/ 的/ 多/ 核/ 处理/ 线程/ 分为/ 两个/ 部分/ ,/ n/ 个/ 线程/ 用于/ 并行/ 的/ DDTA/ -/ MPJ/ 查询处理/ ,/ 1/ 个/ 线程/ 用于/ group/ -/ by/ 和/ order/ -/ by/ 操作/ ./ 这种/ 方案/ 能够/ 减少/ 并行/ 查询处理/ 时/ 的/ 资源/ 争用/ ,/ 合理/ 分配/ 不同/ 操作符/ 的/ 处理/ 资源/ ./ StagedDB/ [/ 24/ ]/ 为/ 不同/ 的/ 操作符/ 分配/ 独立/ 的/ 处理/ 线程/ ,/ 这些/ 处理/ 线程/ 供/ 全部/ 查询/ 任务/ 共享/ ./ n/ +/ 1/ 并行/ 模式/ 吸收/ 了/ 操作符/ 共享/ 并行/ 的/ 思想/ ,/ 通过/ DDTA/ -/ MPJ/ 算法/ 减少/ 了/ 查询处理/ 中/ 的/ 操作符/ 数量/ ,/ 同时/ 为/ 并行/ 收益/ 最大/ 的/ 操作符/ 分配/ 最多/ 的/ 处理/ 资源/ ,/ 从而/ 可以/ 提高/ 并行/ 查询处理/ 的/ 性能/ ./ 保证/ 正确性/ ;/ 同时/ 也/ 需要/ 独立/ 的/ 线程/ 来/ 处理/ 分组/ 和/ 排序/ 操作/ ./ 这种/ 模式/ 适合/ 于/ 查询/ 结果/ 集/ 较大/ 的/ 应用/ 场景/ ,/ 它/ 是/ 以/ 牺牲/ 部分/ 并行处理/ 资源/ 来/ 减少/ 查询/ 子/ 任务/ 在/ cache/ 中/ 的/ 开销/ ./ 文献/ [/ 18/ ]/ 提出/ 了/ 根据/ group/ -/ by/ 结果/ 集/ 大小/ 选择/ 最佳/ 查询处理/ 策略/ ./ 我们/ 在/ 未来/ 研究/ 中/ 会/ 根据/ 查询/ 结果/ 集/ 的/ 估算/ 动态/ 选择/ 完全/ 并行/ 模式/ 或者/ n/ +/ 1/ 并行/ 模式/ 来/ 优化/ 查询处理/ 性能/ ./ Page84/ ./ 2/ 查询/ 间/ 多/ 核/ 并行算法/ InterDDTA/ -/ MPJ/ 在/ 磁盘/ 数据库/ 并发/ 查询/ 中/ ,/ 表/ 扫描/ 的/ 代价/ 较大/ ,/ 相对而言/ 查询处理/ 的/ 执行/ 代价/ 较/ 小/ ,/ 因此/ 研究/ 主要/ 集中/ 如何/ 在/ 并发/ 查询/ 之间/ 共享/ 表/ 扫描/ 操作/ ./ 并行/ 的/ 收益/ 取决于/ TI/ // O/ // TQ/ ,/ 即/ 在/ 一个/ I/ // O/ 延迟/ 内/ 能够/ 完成/ 多少/ 并行/ 查询/ 任务/ ./ 其中/ TI/ // O/ 表示/ 一次/ 磁盘/ I/ // O/ 访问/ 时间/ ,/ TQ/ 表示/ 并行/ 查询/ 时间/ ./ 对于/ 内存/ 数据库/ 而言/ ,/ 查询/ 的/ 延迟/ 主要/ 由/ cachemiss/ 决定/ ,/ 由于/ 在/ cache/ 上/ 无法/ 创建/ 可/ 管理/ 的/ 缓存/ 区/ ,/ 因此/ 无法/ 保证/ 查询处理/ 时/ 所/ 需/ 的/ 较/ 小/ 数据/ 集/ 能够/ 被/ “/ pin/ ”/ 在/ cache/ 中/ ./ cache/ 替换算法/ LRU/ 在/ 对/ 弱/ 局部性/ 数据/ (/ 不/ 经常/ 访问/ 的/ 数据/ )/ 顺序/ 扫描/ 时会/ 将/ 强/ 局部性/ 数据/ (/ 经常/ 访问/ 的/ 数据/ )/ 替换/ 出/ cache/ ,/ 造成/ “/ cachepollution/ ”/ ./ 当前/ 多核/ 平台/ 上/ 的/ cache/ 优化/ 算法/ 要么/ 需要/ 操作系统/ 层次/ 上/ 的/ 支持/ (/ 如/ pagecoloring/ 技术/ )/ ,/ 要么/ 需要/ 针对/ 特定/ 处理/ 类型/ 的/ 指令/ 级/ 进行/ 优化/ ,/ 难以/ 具有/ 良好/ 的/ 通用性/ ./ 因此/ ,/ 在/ 当前/ 硬件/ 和/ 操作系统/ 的/ 基础/ 上/ ,/ 提高/ cache/ 性能/ 的/ 关键/ 是/ 减小/ 查询处理/ 时强/ 局部性/ 数据/ 集/ 的/ 存储空间/ 从而/ 可以/ 提高/ 它/ 在/ cache/ 中/ 的/ 驻留/ 性/ ./ 本文/ 所/ 研究/ 的/ 并发/ 查询/ 优化/ 技术/ 主要/ 集中/ 在/ 优化/ 查询处理/ 模型/ 、/ 减少/ 查询/ 所/ 需/ 私有/ 数据/ 的/ 存储空间/ 、/ 优化/ 并发/ 查询/ 的/ 数据/ 局部性/ 强度/ 上/ ./ 研究/ 的/ 模型/ 和/ 算法/ 不/ 依赖于/ 具体/ 的/ 操作系统/ 和/ 硬件/ 配置/ ,/ 算法/ 具有/ 较/ 好/ 的/ 通用性/ ./ 磁盘/ 数据库/ 的/ 代价/ 模型/ 以/ I/ // O/ 为/ 核心/ ,/ 其/ 理论/ 基础/ 是/ 磁盘/ 缓冲区/ 可/ 控制/ ,/ 系统/ 能够/ 保证/ 查询/ 所/ 需/ 的/ 数据/ 被/ “/ pin/ ”/ 在/ 内存/ 中/ ./ 对/ cache/ 层/ 而言/ ,/ 没有/ 软件/ 级/ 的/ 替换算法/ ,/ 因此/ 我们/ 采用/ 数据/ 距离/ (/ DataDistance/ ,/ DD/ )/ 来/ 评估/ 多核/ 内存/ OLAP/ 的/ 查询/ 代价/ ./ 例如/ 将/ 某个/ 操作/ 对应/ 的/ 数据/ 按照/ cacheline/ 大小/ 划分/ 为/ 数据/ 子集/ {/ D1/ ,/ D2/ ,/ …/ ,/ Dn/ }/ ,/ 多个/ 数据/ 子集/ 可以/ 存在/ 于/ 同一个/ cacheline/ 中/ ,/ 一般/ 以/ LLC/ 的/ 命中率/ 作为/ 代价/ 评估/ 函数/ 的/ 依据/ ./ 因此/ 数据/ 操作/ OP/ 的/ 代价/ 为/ 其中/ DD/ (/ Di/ )/ =/ 1/ ,/ Di/ 缺失/ 时/ 访问/ 特征/ 和/ cache/ 替换/ 策略/ 下/ 数据/ 缺失/ 的/ 概率/ ./ 例如/ 在/ 哈希/ 连接/ 过程/ 中/ ,/ 表/ 扫描/ 是/ 顺序/ 操作/ ,/ 因此/ 下/ 一个/ 数据/ 在/ cacheline/ 中/ 缺失/ 的/ 概率/ 为/ 1/ ,/ 而/ 哈希/ 表中/ 频繁/ 访问/ 数据项/ 在/ cacheline/ 中/ 缺失/ 的/ 概率/ 则/ 小于/ 1/ ./ η/ 需要/ 通过/ 统计/ 或/ 经验值/ 进行/ 估算/ 来/ 调整/ 代价/ 模型/ 与/ 真实/ 查询/ 代价/ 的/ 拟合/ 程度/ ./ 在/ 高/ 负载/ 并发/ 查询处理/ 时/ ,/ 总/ 的/ 私有/ 哈希/ 表/ 空间/ 随/ 查询/ 数量/ 而/ 线性/ 增长/ ,/ 因此/ 降低/ 哈希/ 表中/ 数据/ 缺失/ 概率/ 的/ 关键/ 是/ 减少/ 哈希/ 表/ 的/ 空间/ 大小/ ./ 文献/ [/ 25/ ]/ 提出/ 了/ 基于/ 共享/ 哈希/ 表/ 的/ OLAP/ 并发/ 查询/ 优化/ 技术/ ,/ 将/ 共享/ 哈希/ 表/ 作为/ 并发/ 查询/ 的/ 过滤器/ ,/ 提高/ 哈希/ 表/ 的/ 共享性/ ,/ 消除/ 并发/ 查询/ 的/ 私有/ 哈希/ 表/ 空间/ ./ 由于/ OLAP/ 查询/ 选择率/ 较/ 高/ ,/ 高/ 并发/ 查询/ 负载/ 的/ 私有/ 哈希/ 表/ 可能/ 大大/ 超过/ 原始/ 维表/ 大小/ ./ 本文/ 通过/ 键值/ -/ 地址/ 技术/ 将/ 内存/ 列/ 存储/ 维表/ 作为/ 并发/ 查询/ 的/ 公共/ 哈希/ 表/ ,/ 以/ 事实/ 表外键/ 作为/ 哈希/ 键值/ ,/ 维/ 表列/ 作为/ 哈希/ 桶/ ,/ 保证/ 在/ 高/ 并发/ 查询/ 负载/ 下/ 公共/ 哈希/ 表/ 空间/ 的/ 最小化/ ,/ 从而/ 可以/ 减少/ 高/ 并发/ 查询/ 时/ 的/ 哈希/ 表/ 访问/ 代价/ ./ 在/ DDTA/ -/ JOIN/ 连接/ 操作/ 中/ ,/ 事实/ 表/ 记录/ FTuple/ 的/ 数据/ 距离/ 为/ |/ FTuple/ |/ // 64B/ (/ cacheline/ 的/ 长度/ 为/ 64B/ )/ ,/ 因此/ 减小/ 事实/ 表/ 记录/ 宽度/ 能够/ 增加/ 当前/ 记录/ 在/ cacheline/ 中/ 的/ 命中率/ ./ 维/ 属性/ 的/ 数据/ 距离/ 可以/ 通过/ 谓词/ 向量/ 来/ 减小/ ,/ 从而/ 提高/ cacheline/ 的/ 命中率/ ./ 由于/ OLAP/ 以/ 事实/ 表行/ 扫描/ 为/ 基础/ ,/ 各/ 线程/ 都/ 需要/ 进行/ 顺序/ 表/ 扫描/ 操作/ ,/ 因此/ 对于/ 并发/ 查询/ 而言/ ,/ 事实/ 表/ 的/ 第一个/ 扫描线/ 程/ 加载/ 到/ cache/ 中/ 的/ 数据/ 需要/ 较长/ 周期/ 被/ 替换/ 出/ cache/ ./ 对于/ 在/ 相同/ 事实/ 表上/ 的/ 多个/ 并发/ 查询处理/ 线程/ 而言/ ,/ 第/ 1/ 个/ 扫描/ 内存/ 事实/ 表/ 的/ 线程/ 为/ 其后/ 的/ 线程/ 提供/ 了/ 更/ 高/ 的/ cache/ 命中率/ ./ 虽然/ 在/ 内存/ 数据库/ 中/ 难以/ 设计/ 类似/ 磁盘/ 数据库/ 的/ 共享/ 扫描/ 机制/ ,/ 但/ 在线/ 程/ 并行/ 的/ 粒度/ 上/ 同时/ 执行/ 多个/ 查询/ 任务/ 有助于/ 提高/ cache/ 数据/ 的/ 共享/ 程度/ ./ 5.3/ 节/ 的/ 实验/ 结果/ 也/ 证明/ 了/ 基于/ 批处理/ 的/ 并发/ 查询处理/ 模式/ 能够/ 高效/ 地/ 利用/ 共享/ 数据/ 来/ 提高/ cache/ 命中率/ ,/ 从而/ 提高/ 并发/ 查询/ 性能/ ./ 根据/ 不同/ 的/ 线程/ 并行/ 策略/ ,/ 我们/ 提出/ 3/ 种/ InterDDTA/ -/ MPJ/ 算法/ ./ (/ 1/ )/ Query/ // Thread/ 如图/ 4/ 所示/ ,/ 事实/ 表和维表/ 被/ 多个/ 查询处理/ 线程/ 共享/ 访问/ ,/ 每个/ 查询处理/ 线程/ 实现/ 完整/ 的/ DDTA/ -/ JOIN/ 处理/ ,/ 维护/ 独立/ 的/ 哈希/ group/ -/ by/ 结果/ 集/ ./ 各个/ 查询处理/ 线程/ 之间/ 不/ 需要/ 严格/ 的/ 同步/ ,/ 新/ 的/ 查询/ 请求/ 可以/ 动态/ 提交/ ,/ 其/ cache/ 性能/ 受/ cache/ 替换/ 策略/ 的/ 影响/ ./ (/ 2/ )/ QuerySlots/ 并行/ Query/ // Thread/ 降低/ 了/ CPU/ 代价/ 但/ 加大/ 了/ 对/ 内存/ 访问/ 带宽/ 的/ 需求/ ,/ 降低/ 了/ 并行/ 查询/ 性能/ ./ 通过/ QuerySlots/ (/ 查询/ 槽/ )/ 将/ 并发/ 查询/ 分组/ ,/ 如图/ 5/ 所示/ ,/ 每组/ 查询/ 作为/ 一个/ slot/ ,/ 分配/ 一个/ 查询/ 线程/ ,/ 然后/ 分组/ 批量/ 执行/ 查询/ ./ 这样/ 可以/ 提高/ 事实/ 表/ 扫描/ 操作/ 的/ 共享性/ ,/ 增加/ 查询处理/ 时/ CPU/ 的/ 负载/ ,/ 降低/ 对/ 内存/ Page9/ 图/ 4Query/ // Thread/ 算法/ 图/ 5QuerySlots/ 算法/ 能/ 收益/ ./ 带宽/ 的/ 需求/ ;/ 同时/ 也/ 可以/ 提高/ cache/ 数据/ 的/ 共享/ 度/ ,/ 降低/ 线程/ 管理/ 的/ 开销/ ./ 但是/ QuerySlots/ 中/ 多个/ 查询/ 所/ 对应/ 的/ 哈希/ group/ -/ by/ 结果/ 集/ 为/ 私有/ 数据/ ,/ 并且/ 批量/ 执行/ 的/ 查询/ 数量/ 也/ 增加/ 了/ 线程/ 对/ 私有/ 数据/ 空间/ 的/ 需求/ ,/ 导致/ 比/ Query/ // Thread/ 并行/ 方法/ 更大/ 的/ cache/ 容量/ 冲突/ ./ QuerySlots/ 模式/ 由于/ 事实/ 表/ 共享/ 访问/ 可以/ 带来/ 收益/ ,/ 但/ 同时/ 也/ 由于/ 私有/ 数据/ 空间/ 增加/ 需要/ 付出/ 额外/ 的/ cache/ 代价/ ,/ 因此/ 需要/ 综合/ 评估/ 它/ 的/ 性/ (/ 3/ )/ IntraInterDDTA/ -/ MPJ/ 图/ 6/ 是/ 在/ IntraDDTA/ -/ MPJ/ 基础/ 上/ 实现/ 的/ 分组/ 批量/ 并行/ 查询/ ,/ 每个/ 线程/ 在/ 独立/ 的/ 数据/ 分片/ 上/ 完成/ 局部/ 查询/ ,/ 然后/ 通过/ 全局/ 合并/ 完成/ 最终/ 的/ 查询处理/ ./ 这种/ 方案/ 既/ 提高/ 了/ 长程/ 查询/ (/ long/ -/ runquery/ )/ 的/ 处理/ 性能/ ,/ 又/ 能/ 较/ 好/ 地/ 满足/ 并发/ 查询处理/ 的/ 需求/ ./ 方案/ (/ 1/ )/ 的/ 每个/ 线程/ 执行/ 的/ 查询/ 彼此/ 独立/ ,/ 没有/ Page10/ 图/ 6IntraInterDDTA/ -/ MPJ/ 算法/ 同步/ 代价/ ,/ 线程/ 数量/ 可以/ 根据/ 负载/ 强度/ 确定/ ./ 在/ 实验/ 中/ 通过/ 对/ 并发/ 查询/ 强度/ 的/ 测试/ 来/ 寻找/ 加速/ 比/ 性能/ 曲线/ 的/ 拐点/ ,/ 从而/ 测试/ 出/ 系统/ 最大/ 的/ 查询/ 并行/ 支持/ 度/ ./ 方案/ (/ 2/ )/ 和/ (/ 3/ )/ 采用/ 固定/ 的/ 线程/ 数量/ 减少/ 线程/ 同步/ 和/ 维护/ 代价/ ,/ 查询/ 通过/ QuerySlots/ 进行/ 分组/ 管理/ ,/ 这/ 两种/ 查询/ 方式/ 的/ 任务/ 集中/ 并/ 可以/ 周期性地/ 批量/ 执行/ ./ 为了/ 收集/ 实时/ 产生/ 的/ 查询/ 请求/ ,/ 我们/ 将/ 方案/ 改进/ 为/ 每个/ 查询/ 分组/ 初始化/ 两个/ 同构/ 的/ slot/ ,/ 每个/ 分组/ 仍然/ 分配/ 一个/ 查询处理/ 线程/ ./ 这/ 两个/ 同构/ 的/ slot/ 分别/ 称为/ 执行/ slot/ 和/ 聚集/ slot/ ,/ 执行/ slot/ 用于/ 执行/ 并行/ 查询处理/ ,/ 聚集/ slot/ 用于/ 收集/ 用户/ 实时/ 提交/ 的/ 并发/ 查询/ 请求/ ./ 当前/ 的/ 并行/ 查询/ 执行/ 完毕/ 后/ ,/ 自动/ 地/ 切换/ slot/ ,/ 执行/ slot/ 与/ 聚集/ slot/ 完成/ 功能/ 互换/ 并/ 开始/ 新/ 的/ 并行/ 查询处理/ ./ 通过/ QuerySlots/ 自动/ 替换/ 机制/ ,/ 当/ 系统/ 的/ 并发/ 查询/ 强度/ 很大/ 时/ 可以/ 实现/ 循环/ 的/ 并发/ 查询处理/ ,/ 充分利用/ 系统/ 的/ 计算资源/ ./ 4.3/ 中位数/ 多核/ 并行算法/ Median/ -/ MPJOLAP/ 中/ 常用/ 的/ 两类/ 聚集/ 函数/ :/ 可/ 分布/ 聚集/ 函数/ 和/ 不可/ 分布/ 聚集/ 函数/ ./ 并行计算/ 的/ 关键/ 是/ 聚集/ 函数/ 的/ 可/ 分布/ 计算/ 特征/ ./ 前/ 一类/ 聚集/ 函数/ 可以/ 采用/ 4.1/ 节/ 所示/ 的/ 并行算法/ 在/ 数据/ 水平/ 分片/ 的/ 基础/ 上/ 进行/ 并行处理/ 和/ 全局/ 聚集/ 结果/ 归并/ ;/ 而后/ 一类/ 聚集/ 函数/ 需要/ 集中式/ 处理/ ,/ 难以/ 充分发挥/ 现代/ 多核/ 处理器/ 的/ 并行处理/ 性能/ ./ 根据/ 多核/ 处理器/ 的/ 特点/ ,/ 我们/ 将/ 不可/ 分布/ 计算/ 函数/ 进行/ 优化/ 处理/ 来/ 提高/ 查询/ 性能/ ./ 本文/ 以/ 中位数/ 计算/ 为例/ 讨论/ 基于/ 全局/ 排序/ 的/ 聚集/ 函数/ 的/ 多/ 核/ 并行算法/ ,/ 其/ 原理/ 可以/ 直接/ 应用/ 于/ 百分位/ 数/ 和/ 其他/ 依赖/ 全局/ 排序/ 的/ 聚集/ 函数/ ./ 中位数/ 是/ 在/ 全局/ 排序/ 数列/ 中/ 位于/ 中间/ 位置/ 的/ 数值/ ./ 当/ 数列/ 的/ 个数/ 为/ 奇数/ 时/ ,/ 中间/ 位置/ 的/ 数值/ 就是/ 中位数/ ;/ 当/ 数列/ 个数/ 为/ 偶数/ 时/ ,/ 中位数/ 则/ 是/ 处于/ 中间/ 位置/ 两个/ 数值/ 的/ 平均数/ ./ 在/ 多/ 核/ 处理器/ 中/ 可以/ 将/ 待/ 排序/ 数据/ 在/ 内存/ 中/ 按/ 数据/ 偏移/ 地址/ 进行/ 逻辑/ 水平/ 分段/ (/ 不/ 进行/ 物理/ 划分/ 以/ 节约/ 内存空间/ )/ ,/ 并/ 由/ 多/ 核/ 处理器/ 并行/ 排序/ ,/ 然后/ 通过/ 多路/ 归并/ 排序/ 方法/ 生成/ 全局/ 排序/ 数列/ 后取/ 中位数/ 结果/ ./ 分段/ 并行/ 排序/ 提高/ 了/ 排序/ 操作/ 的/ 性能/ 但/ 多路/ 归并/ 排序/ 在/ 多/ 核/ 处理器/ 的/ 共享/ cache/ 中/ 产生/ 大量/ 的/ 数据/ 迁移/ ,/ 降低/ 了/ 多/ 核/ 处理器/ 的/ 效率/ ./ 我们/ 在/ 文献/ [/ 20/ ]/ 基于/ SN/ 集群/ 上/ 提出/ 的/ 迭代/ 中位数/ 逼近/ 算法/ 的/ 基础/ 上/ ,/ 面向/ 多核/ 处理器/ ,/ 提出/ 了/ 中位数/ 排序/ 序列/ 剪枝/ 算法/ ,/ 通过/ 剪裁/ 各个/ 排序/ 序列/ 中/ 全局/ 中位数/ 之前/ 的/ 数值/ 来/ 缩小/ 全局/ 排序/ 侯/ 选集/ 的/ 大小/ ,/ 从而/ 减少/ 全局/ 排序/ 时/ 所/ 需/ 归并/ 的/ 数据量/ ,/ 降低/ 内存/ 带宽/ 延迟/ ./ 算法/ 2/ ./ 中位数/ 多核/ 并行算法/ Median/ -/ MPJ/ ./ ParallelHandleRecordSet/ (/ RecordSetRS/ )/ {/ Page11ParallelSortSubSetASC/ (/ SS0/ ,/ SS1/ ,/ …/ ,/ SSn/ )/ }/ m/ =/ total/ // 2/ ;/ // // total/ 为/ 待/ 排序/ 数据/ 总数/ RecurseGetMedianValue/ (/ )/ {/ // // 比较/ 各子/ 数据/ 集中/ 值/ ,/ 得到/ 最小/ 的/ 中值/ // // 计算/ 全局/ 剪裁/ 的/ 数据/ 个数/ IF/ (/ pn/ </ m/ )/ 图/ 7/ 迭代/ 并行/ 中位数/ 计算/ 在/ 多/ 核/ 并行/ 中位数/ 计算/ 过程/ 中/ ,/ 使用/ 内存地址/ 指针/ 可以/ 动态/ 实现/ 对/ 分布式/ 候选/ 排序/ 集/ 的/ 剪裁/ (/ 调整/ 排序/ 序列/ 起始/ 位置/ 指针/ )/ ;/ 同时/ 通过/ 全局变量/ 传递/ 同步/ 消息/ ,/ 具有/ 较/ 小/ 的/ 通讯/ 开销/ ./ 在/ 处理过程/ 中/ ,/ 剪裁/ 是/ 迭代/ 的/ 可/ 并行处理/ 过程/ ,/ 全局/ 归并/ 是/ 一个/ 串行/ 处理过程/ ./ 迭代/ 的/ 次数/ 越/ 多/ ,/ 通讯/ 和/ CPU/ 开销/ 越大/ ,/ 但/ 各/ 处理/ 线程/ 中/ 排序/ 序列/ 越/ 接近/ 全局/ 中位数/ 位置/ ,/ 全局/ 归并/ 排序/ 的/ 数据量/ 越小/ ./ 因此/ 在/ 多/ 核/ 并行/ 中位数/ 算法/ 中/ ,/ 关键问题/ 是/ 需要/ 根据/ 实验/ 测试/ 并/ 权衡/ 迭代/ 处理/ 代价/ 和/ 全局/ 数据/ 归并/ 代价/ 对/ 全局/ 并行计算/ 收益/ 的/ 影响/ ./ 5/ 实验/ 5.1/ 实验/ 平台/ 和/ 系统/ 设计/ 多核/ 内存/ OLAP/ 是/ 面向/ 多核/ 平台/ 上/ 的/ 分析/ 型/ }/ 图/ 7/ 显示/ 了/ 迭代/ 中位数/ 计算/ 的/ 工作/ 原理/ ,/ 我们/ 以/ 3/ 个/ 并行处理/ 线程/ 为例/ :/ (/ 1/ )/ 将/ 数据/ 按/ 处理/ 线程/ n/ (/ n/ =/ 3/ )/ 等/ 分为/ 分布式计算/ 数据/ 集/ ,/ 计算/ 出/ 全局/ 数据项/ 个数/ 和/ 中位数/ 的/ 位置/ m/ ;/ (/ 2/ )/ 对/ 分布式/ 数据/ 集/ 进行/ 并行/ 排序/ 生成/ 序列/ S1/ ,/ S2/ ,/ S3/ ,/ 以/ m/ // n/ 为/ 度量/ 在/ 各/ 排序/ 序列/ 中/ 划分/ 出/ 剪枝/ 候选/ 集/ SS1/ ,/ SS2/ ,/ SS3/ ;/ (/ 3/ )/ 取/ S1/ ,/ S2/ ,/ S3/ 序列/ 中/ 的/ 最小值/ (/ 图/ 7/ 例中/ 为/ min/ (/ 17/ ,/ 15/ ,/ 19/ =/ 15/ )/ )/ ,/ 并/ 以此/ 最小值/ 为/ 阈值/ 在/ 候选/ 序列/ S1/ ,/ S2/ ,/ S3/ 中/ 剪裁/ 掉/ 小于/ 该/ 阈值/ 的/ 序列/ 并/ 计算/ 全局/ 剪裁/ 的/ 数据/ 个数/ pn/ (/ 5/ +/ 6/ +/ 4/ =/ 15/ )/ ;/ (/ 4/ )/ 分布式计算/ 数据/ 集/ S1/ ,/ S2/ ,/ S3/ 起始/ 位置/ 指针/ 跳过/ 剪裁/ 数据/ 序列/ 而/ 生成/ 新/ 的/ 逻辑/ 数据/ 序列/ ;/ (/ 5/ )/ 迭代/ 地/ 在/ 分布式/ 排序/ 数据/ 集上/ 进行/ 中位数/ 剪枝/ 操作/ ./ 当/ 剪裁/ 掉/ 的/ 数据项/ 个数/ 逼近/ 全局/ 中位数/ 位置/ m/ 时/ ,/ 即/ m/ -/ pn/ / λ/ 时/ ,/ 将/ 各/ 候选/ 集中/ 的/ 前/ m/ -/ pn/ 个/ 序列/ 进行/ 全局/ 归并/ 排序/ ,/ 全局/ 序列/ 中/ 的/ 第/ m/ -/ pn/ 位置/ 即/ 为/ 全局/ 中位数/ ./ 内存/ 数据库/ 技术/ ,/ 初始化/ 时/ 事实/ 表和维表/ 存储/ 在/ 磁盘/ 上/ ,/ 在/ 系统/ 运行/ 时/ 动态/ 地/ 加载/ 到/ 内存/ 分别/ 构造/ 事实/ 表/ 内存/ 行/ 存储/ 和/ 维表/ 内存/ 列/ 存储/ ./ 我们/ 在/ SSB/ 测试/ 标准/ 上用/ C++/ 开发/ 了/ 以图/ 1/ 所示/ 算法/ 为/ 基础/ 的/ 多/ 核/ 内存/ OLAP/ 原型/ 系统/ ,/ 其中/ 事实/ 表/ 采用/ 聚集/ 列/ 存储/ 模型/ ,/ 维表/ 采用/ 基于/ 字典/ 表/ 压缩/ 技术/ 的/ 列/ 存储/ 模型/ ,/ 我们/ 在/ 这个/ 原型/ 系统/ 上/ 进行/ 了/ 并行/ 查询处理/ 性能/ 的/ 测试/ ./ 实验/ 的/ 硬件平台/ 为/ 一台/ HP350/ 服务器/ ,/ 配置/ 两个/ IntelXeonQuad/ -/ core/ 四核/ 处理器/ ,/ 处理/ 核心/ 主频/ 为/ 2.26/ GHz/ ,/ 每/ 两个/ 处理器/ 核心/ 共享/ 4MBL2cache/ ./ 操作系统/ 为/ Ubuntu11/ ./ 04/ ,/ 内存/ 为/ 6GB/ ,/ 72GB/ 双硬盘/ 镜像/ ./ 5.2/ IntraDDTA/ -/ MPJ/ 查询处理/ 性能/ 首先/ 测试/ 了/ IntraDDTA/ -/ MPJ/ 并行/ 查询/ 性能/ ,/ 将/ 数据量/ 为/ 8GB/ 的/ SSB/ 数据库/ 的/ 事实/ 表/ 动态/ 地/ 划分/ 为/ 2/ 、/ 4/ 、/ 8/ 和/ 16/ 个/ 水平/ 分片/ ,/ 然后/ 在/ 每个/ 分片/ 上/ 并/ Page12/ 行地/ 执行/ 查询处理/ ,/ 最后/ 将/ 各子/ 查询/ 结果/ 集/ 进行/ 全局/ 归并/ ./ 总体/ 看来/ ,/ IntraDDTA/ -/ MPJ/ 算法/ 能够/ 获得/ 很/ 好/ 的/ 并行/ 加速/ 性能/ ./ 从图/ 8/ 的/ 并行/ 查询/ 执行/ 时间/ 和/ 图/ 9/ 显示/ 的/ 并行/ 加速/ 比/ 曲线/ 来看/ ,/ 当/ 线程/ 数/ 不/ 超过/ 4/ 时/ ,/ 并行/ 查询/ 的/ 加速/ 比随/ 并行处理/ 的/ 粒度/ 增长/ 而/ 增长/ ,/ 与/ 理想/ 的/ 线性/ 加速/ 比/ 曲线/ (/ 虚线/ 部分/ )/ 基本/ 吻合/ ./ 原因/ 是/ 两个/ 处理器/ 共有/ 4/ 个/ 独立/ 的/ L2cache/ ,/ 操作系统/ 分配/ 的/ 查询处理/ 子/ 线程/ 会/ 选择/ 能够/ 独占/ L2cache/ 的/ 处理/ 核心/ ,/ 因此/ 不会/ 产生/ 线程/ 间/ 的/ L2cache/ 竞争/ ,/ 体现/ 出/ 良好/ 的/ 并行/ 加速/ 比/ ;/ 当/ 并行/ 线程/ 数量/ 为/ 8/ 时/ ,/ 每/ 两个/ 处理器/ 核心/ 共享/ 一个/ L2cache/ ,/ 会/ 产生/ L2cache/ 争用/ ,/ 降低/ 了/ 并行/ 查询处理/ 的/ 性能/ ;/ 当/ 并行/ 线程/ 超过/ 处理器/ 物理/ 核心/ 数量/ 8/ 时/ ,/ 多个/ 线程/ 共享/ 处理/ 核心/ ,/ 查询/ 的/ 并行/ 性能/ 仍然/ 有/ 一定/ 的/ “/ 边际效应/ ”/ :/ 随着/ 并行任务/ 的/ 增加/ 缓慢/ 增长/ 到/ 最大/ 并行/ 加速/ 比/ 5.83/ ,/ 然后/ 呈现/ 缓慢/ 下降/ 趋势/ ./ 其/ 主要/ 影响/ 因素/ 是/ cache/ 争用/ 、/ 内存/ 带宽/ 争用/ 以及/ 线程/ 切换/ 代价/ ./ 在/ DDTA/ -/ MPJ/ 算法/ 中/ 存在/ 两种/ 不同/ 局部性/ 特征/ 的/ 数据/ :/ 顺序/ 访问/ 的/ 事实/ 表是/ 弱/ 局部性/ 数据/ ,/ 随机/ 访问/ 的/ 维表是/ 强/ 局部性/ 数据/ ,/ 这/ 两种/ 局部性/ 数据/ 需要/ 通过/ “/ cache/ ”/ 优化/ 策略/ 来/ 减少/ “/ cachepollution/ ”/ 带来/ 的/ 负面影响/ ./ 当/ 在/ 处理器/ 核心/ 上/ 运行/ 多个/ 线程/ 时/ ,/ 需要/ 优化/ 数据/ 在/ cache/ 层上/ 的/ 访问/ 策略/ 来/ 提高/ 性能/ ;/ 同时/ 也/ 要/ 针对/ 内存/ 带宽/ 进行/ 优化/ ,/ 减少/ 带宽/ 瓶颈/ 所/ 产生/ 的/ 性能/ 影响/ ./ 在/ 未来/ 工作/ 中将/ 针对/ cache/ 替换/ 策略/ 和/ 内存/ 带宽/ 性能/ 做/ 更加/ 深入/ 的/ 研究/ 工作/ ./ 我们/ 将/ 多/ 核/ 并行/ IntraDDTA/ -/ MPJ/ 算法/ 与/ MonetDB/ 做/ 了/ 性能/ 比较/ ,/ 如图/ 10/ 所示/ ,/ 实验/ 证明/ 我们/ 算法/ 的/ 总体/ 平均/ 执行/ 时间/ 要/ 优于/ MonetDB/ ,/ 特别/ 是/ Q4/ ./ 1/ 和/ Q4/ ./ 2/ 查询/ ./ IntraDDTA/ -/ MPJ/ 在/ 事实/ 表行/ 扫描/ 操作/ 的/ 基础/ 上将/ 事实/ 表与维表/ 之间/ 的/ 连接/ 操作/ 转换/ 为/ CPU/ 代码/ 效率/ 极高/ 的/ 直接/ 内存/ 访问/ ,/ 因此/ 查询处理/ 时间/ 相对/ 稳定/ ,/ 受/ 选择率/ 影响/ 但/ 波动/ 不/ 大/ ,/ 是/ 一种/ 类似/ BLINK/ 常量/ 查询/ 时间/ 的/ 算法/ ./ 查询处理/ 时间/ 主要/ 体现/ 为/ 不同/ 选择率/ 所/ 产生/ 的/ 分组/ 聚集/ 时间/ 代价/ ,/ 传统/ 的/ 连接/ 操作/ 代价/ 被/ 最小化/ ,/ 在/ 多/ 核/ 并行处理/ 时/ 也/ 能够/ 保持/ 接近/ 常量/ 执行/ 时间/ 的/ 特性/ ,/ 查询/ 时间/ 的/ 可/ 预期/ 性/ 非常/ 高/ ./ 而/ MonetDB/ 的/ 查询/ 性能/ 受较/ 多/ 因素/ 影响/ ,/ 如/ 选择率/ ,/ 查询/ 中要/ 访问/ 列/ 的/ 大小/ 和/ 数量/ ,/ 谓词/ 操作/ 代价/ (/ AND/ 或/ OR/ 操作/ )/ 等/ ./ MonetDB/ 的/ 列/ 存储/ 机制/ 在/ 低/ 选择率/ 且列/ 间连接/ 操作/ 较少/ 的/ 应用/ 场景/ 上/ 具有/ 优越/ 的/ cache/ 性能/ ,/ 图/ 10/ 可以/ 看到/ MonetDB/ 在/ 查询/ Q2/ ./ x/ ,/ Q3/ ./ 2/ 和/ Q3/ ./ 4/ (/ Q3/ ./ 3/ 执行/ 时间/ 超长/ ,/ 可能/ 是/ 系统/ bug/ ,/ 实验/ 中未/ 统计/ 其/ 执行/ 时间/ )/ 中/ 具有/ 很/ 好/ 的/ 性能/ ./ 但/ 在/ Q1/ ./ 2/ ,/ Q1/ ./ 3/ 和/ Q4/ ./ x/ 中/ ,/ 由于/ 查询/ 包含/ 了/ 多个/ 事实/ 表列/ 属性/ 之间/ 的/ 连接/ 操作/ 以及/ 物化/ 的/ 连接/ 索引/ ,/ 这些/ 都/ 对/ MonetDB/ 的/ 性能/ 产生/ 了/ 消极影响/ ,/ 使/ 其/ 在/ 较/ 低/ 选择率/ 的/ 情况/ 下/ 仍/ 有/ 较/ 长/ 的/ 查询处理/ 时间/ ./ 图/ 10IntraDDTA/ -/ MPJ/ 与/ MonetDB/ 并行/ 查询/ 执行/ 时间/ 比较/ 5.3/ InterDDTA/ -/ MPJ/ 查询处理/ 性能/ 我们/ 在/ 实验/ 中/ 测试/ 了/ 两种/ 查询/ 词/ 并发/ 查询处理/ 方案/ ,/ IntraInterDDTA/ -/ MPJ/ 可以/ 看作/ 是/ 查询/ 内/ 并行/ 与/ 查询/ 间/ 并行/ 的/ 组合/ ,/ 在/ 本文/ 中不作/ 进一步/ 测试/ ./ (/ 1/ )/ Query/ // Thread/ 每个/ 查询/ 使用/ 独立/ 的/ 线程/ 完成/ 查询处理/ 任务/ ,/ 实验/ 中/ 并发/ 查询/ 的/ 数量/ 从/ 1/ 增长/ 到/ 1024/ ,/ 查询/ 任务/ Page13/ 采用/ SSB/ 的/ 13/ 个/ 测试/ 查询/ ,/ 按照/ round/ -/ robin/ 的/ 方式/ 循环/ 调用/ ./ 图/ 11/ 显示/ 了/ 查询处理/ 时/ 的/ 并行/ 加速/ 比/ 曲线/ ,/ 当/ 并发/ 查询/ 超过/ 物理/ 核心/ 数/ 8/ 时/ ,/ 并发/ 查询/ 线程/ 相当于/ 在/ 处理器/ 核心/ 之间/ 进行/ 轮流/ 切换/ ,/ 并发/ 查询/ 的/ 收益/ 增速/ 放缓/ ,/ 并行/ 加速/ 比/ 逐渐/ 稳定/ 在/ 6.2/ 这个/ 最大值/ ,/ 当/ 并发/ 查询/ 负载/ 继续/ 增加/ 时/ ,/ 基本/ 保持稳定/ 状态/ ./ 当/ 使用/ 8/ 个/ 并发/ 查询/ 时/ Query/ // Thread/ 的/ 加速/ 比为/ 4.08/ ,/ 低于/ IntraDDTA/ -/ MPJ/ 算法/ 的/ 加速/ 比/ 5.58/ ,/ 原因/ 是/ IntraDDTA/ -/ MPJ/ 算法/ 采用/ 共享/ 谓词/ 向量/ 技术/ 来/ 降低/ L2cache/ 的/ 数据/ 访问/ 冲突/ ;/ 而/ Query/ // Thread/ 为/ 不同/ 的/ 并发/ 查询/ ,/ 采用/ 直接/ 访问/ 维/ 表列/ 的/ 方法/ ,/ 因此/ 它/ 具有/ 更大/ 的/ L2cache/ 数据/ 访问/ 冲突/ ./ 但/ IntraDDTA/ -/ MPJ/ 算法/ 需要/ 合并/ 线程/ 间/ 的/ 查询/ 结果/ ,/ 因此/ 线程/ 数量/ 增长/ 时/ 全局/ 数据/ 合并/ 开销/ 也/ 同步增长/ ,/ 其/ 最大/ 并行/ 加速/ 比为/ 5.83/ ,/ 而/ Query/ // Thread/ 并发/ 查询处理/ 不/ 需要/ 进行/ 全局/ 结果/ 的/ 归并/ ,/ 会/ 随着/ 并发/ 查询/ 线程/ 的/ 增加/ 缓慢/ 达到/ 更/ 高/ 的/ 并行/ 加速/ 比/ 6.2/ ./ (/ 2/ )/ QuerySlots/ 并行/ 如图/ 9/ 所示/ ,/ 实验/ 平台/ 配置/ 有/ 4/ 个/ L2cache/ 和/ 8/ 个/ 核心/ ,/ 当/ 采用/ 4/ 个/ 线程/ 处理/ 查询/ 时/ 不会/ 产生/ L2cache/ 争用/ ,/ 可以/ 获得/ 最大/ 的/ 并发/ 处理/ 效率/ ./ 当/ 采用/ 8/ 个/ 线程/ 处理/ 查询/ 时/ 可以/ 充分利用/ 多核/ 处理器/ 来/ 获得/ 很/ 高/ 的/ 并发/ 处理/ 性能/ ./ 因此/ 我们/ 预设/ 4/ 个/ 和/ 8/ 个/ 并发/ 处理/ 线程/ ,/ 同时/ 将/ 查询/ 分成/ 4/ 组和/ 8/ 组/ ,/ 每组/ 分配/ 一个/ 线程/ 来/ 分别/ 获得/ 最大/ 的/ 并发/ 处理/ 效率/ 和/ 并发/ 处理/ 性能/ ./ 实验/ 中/ 设置/ 两组/ 查询/ 测试/ ,/ 第/ 1/ 组/ 设置/ 4/ 个/ slot/ ,/ 每个/ slot/ 的/ 查询/ 任务量/ 从/ 1/ 增长/ 到/ 256/ ,/ 第/ 1/ 组/ 的/ 查询/ 任务/ 总量/ 从/ 4/ 增长/ 到/ 1024/ ./ 查询/ 时/ 循环/ 调用/ SSB/ 的/ 13/ 个/ 标准/ 测试/ 查询/ ,/ 每个/ slot/ 中/ 的/ 查询/ 任务/ 各不相同/ ;/ 第/ 2/ 组/ 采用/ 8/ 个/ slot/ ,/ 每个/ slot/ 的/ 查询/ 任务量/ 从/ 1/ 增长/ 到/ 128/ ,/ 第/ 2/ 组/ 的/ 查询/ 任务/ 总量/ 从/ 8/ 增长/ 到/ 1024/ ./ QuerySlots/ 为/ 每个/ slot/ 中/ 的/ 查询/ 维护/ 独立/ 的/ group/ -/ by/ 操作/ 对应/ 的/ 哈希/ 聚集/ 表/ ,/ slot/ 越多/ ,/ QuerySlots/ 中/ 私有/ 哈希/ 聚集/ 表/ 的/ 空间/ 开销/ 越大/ ./ QuerySlots/ 算法/ 对/ slot/ 中/ 的/ 查询/ 任务/ 批量/ 处理/ ,/ 使/ 顺序/ 访问/ 的/ 事实/ 表/ 记录/ 的/ 利用率/ 最大化/ ,/ 减少/ 了/ 线程/ 切换/ 代价/ ,/ 但/ 同时/ 私有/ 数据/ 空间/ 的/ 增大/ 也/ 加大/ 了/ cache/ 共享/ 冲突/ 的/ 概率/ ./ 从图/ 11/ 的/ 并发/ 查询/ 结果/ 可以/ 得到/ 这样/ 的/ 结论/ :/ 在/ 高/ 负载/ 的/ 并发/ 查询处理/ 任务/ 中/ ,/ QuerySlots/ 算法/ 能够/ 获得/ 更/ 高/ 的/ 并行/ 加速/ 性能/ ./ Query/ // Thread/ 算法/ 在/ 并发/ 任务/ 数量/ 超过/ 处理器/ 核心/ 数量/ 时/ ,/ 并行/ 加速/ 比/ 逐渐/ 趋于稳定/ ./ 而/ QuerySlots/ 算法/ 在/ 初期/ 有/ 一个/ 波动/ ,/ 主要/ 是/ 由于/ slot/ 中/ 各/ 查询/ 执行/ 时间/ 不同/ ,/ 因此/ 包含/ 查询/ 时间/ 较长/ 的/ slot/ 组/ 的/ 性能/ 会/ 受到/ 影响/ ,/ 呈现/ 波动/ 趋势/ ./ 当/ 查询/ 负载/ 增加/ 时/ ,/ 每个/ 分组/ 中/ 的/ 查询/ 执行/ 时间/ 相对/ 平均/ ,/ 加速/ 比/ 曲线/ 逐渐/ 趋于平稳/ ./ 与/ 图/ 9/ 结论/ 相近/ ,/ QuerySlot/ -/ 4/ (/ 预设/ 4/ 个/ 查询/ 分组/ )/ 方法/ 的/ 加速/ 比/ 接近/ 线性/ 加速/ 比/ 4/ ,/ QuerySlot/ -/ 8/ (/ 预设/ 8/ 个/ 查询/ 分组/ )/ 方法/ 在/ 具有/ 较大/ 并发/ 查询/ 任务/ (/ 512/ 个/ 并发/ 查询/ )/ 时/ 达到/ 最高/ 加速/ 比/ 6.245/ ,/ 而/ IntraDDTA/ -/ MPJ/ 在/ 32/ 线程/ 时/ 达到/ 最大/ 并行/ 加速/ 比/ 5.83/ ./ 相对/ 于/ IntraDDTA/ -/ MPJ/ 而言/ ,/ IntraDDTA/ -/ MPJ/ 能够/ 在/ 高/ 负载/ 时/ 获得/ 更好/ 的/ 并行处理/ 效率/ ./ QuerySlot/ -/ 8/ 并发/ 查询处理/ 比/ Query/ // Thread/ 方法/ 使用/ 更少/ 的/ 线程/ ,/ 因此/ 线程/ 切换/ 开销/ 更/ 低/ ,/ 最大/ 加速/ 比/ 性能/ 也/ 高于/ Query/ // Thread/ 方式/ ./ QuerySlot/ -/ 4/ 在/ 4/ 个/ L2cache/ 的/ 硬件/ 配置/ 下/ 获得/ 最高/ 的/ 并行处理/ 效率/ ,/ 即/ 并行处理/ 效率/ =/ 并行/ 加速/ 比/ // 处理/ 线程/ 数/ =/ 3.907/ // 4/ =/ 97.68/ %/ ,/ 但/ 没有/ 获得/ 最大/ 并行处理/ 性能/ ./ 增加/ 并行处理/ 线程/ 虽然/ 增加/ 了/ 多/ 核/ 并行处理/ 时/ 的/ 额外/ 开销/ ,/ 但/ 能够/ 获得/ 更/ 高/ 的/ 并行处理/ 性能/ ./ 综合/ 图/ 9/ 与/ 图/ 11/ 的/ 实验/ 结果/ ,/ 在/ 当前/ 4/ 个/ 独立/ L2cache/ 数据通道/ 和/ 8/ 个/ 物理/ 核心/ 的/ 硬件/ 配置/ 下/ ,/ 多核/ 并行/ 性能/ 主要/ 由/ 硬件/ 结构/ 特点/ 决定/ ./ 与/ L2cache/ 数据通道/ 数量/ 相同/ 的/ 并行处理/ 粒度/ 能够/ 获得最佳/ 的/ 接近/ 于/ 线性/ 的/ 加速/ 比/ ,/ 但/ 不是/ 最大/ 的/ 并行/ 加速/ 性能/ ./ 最大/ 并行/ 加速/ 性能/ 主要/ 受/ 物理/ 核心/ 数量/ 的/ 影响/ ,/ 并/ 在/ 超出/ 物理/ 核心/ 数量/ 的/ 并行/ 负载/ 下/ 逐渐/ 达到/ 最大/ 并行/ 加速/ 比/ ,/ 该/ 加速/ 比/ 数值/ 会/ 低于/ 物理/ 核心/ 的/ 数量/ ./ DDTA/ -/ MPJ/ 算法/ 以表/ 扫描/ 操作/ 为/ 基础/ ,/ 在/ 并发/ 查询处理/ 时/ 表现/ 出/ 比较稳定/ 的/ 性能/ 曲线/ ,/ 是/ 一种/ 可/ 预估/ 算/ 时间/ 代价/ 的/ 查询处理/ 算法/ ./ 但/ 由于/ 算法/ 将/ 复杂/ 的/ 连接/ 运算/ 转换/ 为/ 直接/ 地址/ 访问/ 操作/ ,/ 因此/ 在/ 查/ Page14/ 询总/ 负载/ 中使/ 内存/ 带宽/ 的/ 需求/ 更加/ 突出/ ,/ 在/ 并行/ 查询处理/ 时/ 需要/ 更大/ 的/ cache/ 容量/ 和/ 更/ 高/ 的/ 内存/ 带宽/ 支持/ ./ 实验/ 的/ 平台/ 是/ 2/ 个/ 核心/ 共享/ L2cache/ ,/ 这样/ 的/ 架构/ 也/ 降低/ 了/ 多/ 核/ 处理器/ 可/ 共享/ 访问/ 的/ cache/ 总/ 容量/ ,/ 制约/ 了/ 并行/ 性能/ 的/ 进一步提高/ ./ 新/ 的/ 处理器/ 能够/ 支持/ 更/ 大容量/ 的/ 共享/ cache/ 和/ 更/ 高/ 的/ 内存/ 带宽/ 性能/ ,/ 能够/ 进一步/ 发挥/ DDTA/ -/ MPJ/ 算法/ 的/ 优势/ ./ 5.4/ 中位数/ 多核/ 并行算法/ Median/ -/ MPJ/ 性能/ 我们/ 在/ 8/ 核/ 处理器/ 平台/ 上用/ 8GB/ 的/ SSB/ 测试数据/ 进行/ 并行/ 中位数/ 计算/ 实验/ ./ 在/ 实验/ 中将/ 需要/ 计算/ 的/ 数据/ 列/ 全部/ 加载/ 到/ 内存/ 并/ 通过/ 划分/ 数据/ 逻辑/ 分区/ 的/ 方式/ 对/ 数据/ 进行/ 水平/ 分段/ ,/ 然后/ 对/ 分段/ 数据/ 进行/ 并行/ 排序/ ,/ 最后/ 应用/ 迭代/ 并行/ 中位数/ 算法/ ./ 在/ 实验/ 中/ 我们/ 设置/ 2n/ 个/ 并行处理/ 线程/ ,/ 在线/ 程数/ 超过/ 128/ 时/ 我们/ 以/ 64/ 线程/ 为/ 步长/ 减小/ 线程/ 增幅/ 以/ 获得/ 更/ 细粒度/ 的/ 并行/ 加速/ 比/ 曲线/ ./ 从图/ 12/ 所示/ 的/ 并行/ 中位数/ 计算/ 执行/ 时间/ 和/ 图/ 13/ 显示/ 的/ 并行/ 加速/ 比/ 曲线/ 来看/ ,/ 并行/ 中位数/ 加速/ 比/ 达到/ 最大值/ 9/ 时/ 的/ 线程/ 数/ 达到/ 128/ 个/ ,/ 也就是说/ 中位数/ 计算/ 的/ 并行/ 收益/ 超过/ 可/ 分布式/ 并行/ 聚集/ 计算/ 的/ InterDDTA/ -/ MPJ/ 的/ 并行/ 加速/ 比/ ,/ 也/ 高于/ 物理/ 核心/ 数量/ 8/ ./ 当/ 线程/ 数/ 超过/ 128/ 个/ 时/ ,/ 加速/ 比/ 曲线/ 逐渐/ 呈/ 下降/ 趋势/ ./ 相比/ 线性/ 处理/ 的/ IntraDDTA/ -/ MPJ/ 算法/ ,/ 中位数/ 算法/ 分段/ 排序/ 的/ 代价/ 是/ O/ (/ nlogn/ )/ ,/ 因此/ 分段/ 排序/ 的/ 并行/ 收益/ 较大/ ./ 当/ 并行/ 线程/ 较多时/ ,/ 分段/ 排序/ 的/ 性能/ 会/ 有/ 较/ 高/ 的/ 收益/ ./ 影响/ 并行/ 中位数/ 计算/ 的/ 因素/ 包括/ 迭代/ 剪裁/ 操作/ 的/ 代价/ 和/ 全局/ 归并/ 的/ 代价/ ./ 当/ 并行/ 线程/ 较多时/ ,/ 并行/ 排序/ 的/ 时间/ 代价/ 降低/ ,/ 同时/ 并行/ 负载/ 比重/ 下降/ ,/ 但/ 全局/ 归并/ 的/ 串行/ 负载/ 比重/ 会/ 上升/ ,/ 从而/ 对/ 并行/ 加速/ 比/ 产生/ 负面影响/ ./ 通常/ 的/ 观念/ 是/ 并行处理/ 线程/ 数量/ 与/ 物理/ 线程/ 数量/ 相同/ 时/ (/ 多核/ 处理器/ 中/ 一个/ 处理/ 核心/ 支持/ 一个/ 物理/ 线程/ )/ 并行/ 收益/ 最高/ ,/ 当/ 并行处理/ 线程/ 超过/ 物理/ 线程/ 时/ ,/ 线程/ 之间/ 采用/ 轮流/ 切换/ 的/ 方式/ ,/ 会/ 影响/ 整体/ 并行处理/ 的/ 收益/ ./ 从/ 我们/ 的/ 实验/ 结果/ 来看/ ,/ 在/ 8/ 个/ 物理/ 核心/ 的/ 多/ 核/ 处理器/ 平台/ 上/ ,/ 并行/ 中位数/ 算法/ 在/ 128/ 个/ 处理/ 线程/ 时/ 获得/ 较/ 高/ 的/ 并行/ 加速/ 比/ (/ 并行/ 加速/ 比为/ 9/ ,/ 超过/ 物理/ 核心/ 数量/ 8/ )/ ,/ 能够/ 更好/ 地/ 发挥/ 多核/ 处理器/ 的/ 性能/ ./ 6/ 结束语/ 本文/ 针对/ 内存/ OLAP/ 提出/ 了/ 多/ 核/ 并行/ 查询/ 优化/ 技术/ ,/ 充分发挥/ 了/ 多/ 核/ 处理器/ 的/ 优势/ ,/ 提高/ 了/ 查询处理/ 性能/ ./ 我们/ 所/ 提出/ 的/ DDTA/ -/ MPJ/ 算法/ 采用/ 了/ 优化/ 的/ 存储/ 模型/ ,/ 分别/ 实现/ 了/ 查询/ 内多核/ 并行/ ,/ 查询/ 间/ 多/ 核/ 并行/ 以及/ 不可/ 分布/ 聚集/ 函数/ 的/ 多/ 核/ 并行/ ./ DDTA/ -/ MPJ/ 通过/ 优化/ 多维/ 数据/ 上/ 的/ 连接/ 操作/ 来/ 提高/ CPU/ 效率/ ,/ 优化/ 维表/ 存储/ 结构/ 实现/ 维/ 属性/ 直接/ 按/ 地址/ 随机/ 访问/ ./ 这样/ 可以/ 充分发挥/ 内存/ 的/ 随机/ 访问/ 性能/ ,/ 也/ 充分利用/ 了/ 多/ 核/ 的/ 特性/ ,/ 简化/ 了/ 查询处理/ 模型/ ,/ 消除/ 了/ 私有/ 哈希/ 表所/ 带来/ 的/ cache/ 冲突/ ,/ 提高/ 了/ cache/ 性能/ ./ 实验/ 结果/ 证明/ DDTA/ -/ MPJ/ 在/ 大/ 内存/ 、/ 多核/ 平台/ 上/ 具有/ 良好/ 的/ 并行处理/ 性能/ ,/ 并且/ 能够/ 与/ 现有/ 的/ 磁盘/ 数据库/ 技术/ 保持良好/ 的/ 兼容性/ ./ 多核/ 内存/ OLAP/ 是/ 内存/ 数据库/ 在/ 多/ 核/ 时代/ 的/ 技术/ 延伸/ ,/ 它/ 结合/ 最新/ 的/ 硬件/ 技术/ ,/ 在/ 存储/ 访问/ 性能/ 和/ 并行处理/ 性能/ 两个/ 物理/ 层面/ 来/ 进一步/ 优化/ 数据库/ 的/ 性能/ ,/ 也/ 将/ 成为/ 新一代/ 高性能/ 内存/ 分析/ 处理/ 的/ 基本特征/ ./ 随着/ 多核/ 处理器/ 技术/ 的/ 发展/ ,/ 在/ 未来/ 的/ 多/ 核/ 和/ 众核/ 计算/ 平台/ 上/ ,/ 单/ 节点/ 能够/ 提供/ 几十/ 甚至/ 上/ 百个/ 并行计算/ 核心/ 或/ 物理/ 线程/ ,/ 数据库/ 面临/ 着/ 节点/ 内/ 的/ 大规模/ 并行处理/ 需求/ ./ 因此/ 需要/ 研究/ 更加/ 简单/ 和/ 易于/ 扩展/ 的/ 并行/ 数据库/ 软件架构/ ,/ 来/ 更/ 高效率/ 地/ 利用/ 处理器/ 强大/ 的/ 并行计算/ 资源/ ,/ 提高/ 数据库/ 在/ 高性能/ 计算/ 平台/ 上/ 的/ 处理/ 能力/ ./ Page15/ 

