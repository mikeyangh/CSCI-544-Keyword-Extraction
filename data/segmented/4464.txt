Page1/ 基于/ 社团/ 并行/ 发现/ 的/ 在线/ 社交/ 网络蠕虫/ 抑制/ 和/ 亮/ 冯登国/ 苏璞/ 睿/ 应/ 凌云/ 杨轶/ (/ 中国科学院/ 软件/ 研究所/ 可信计算/ 与/ 信息/ 保障/ 实验室/ 北京/ 100190/ )/ 摘要/ 随着/ 在线/ 社交/ 网络/ (/ OnlineSocialNetwork/ ,/ OSN/ )/ 的/ 快速/ 发展/ ,/ OSN/ 蠕虫/ 已经/ 成为/ 最具/ 威胁/ 的/ 网络安全/ 问题/ 之一/ ./ 为了/ 防止/ OSN/ 蠕虫/ 的/ 快速/ 传播/ ,/ 文中/ 提出/ 了/ 一种/ 基于/ 社团/ 并行/ 发现/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ ./ 首先/ 将/ 分布式/ 图/ 计算/ 框架/ Pregel/ 和/ 基于/ 标签/ 传播/ 的/ 社团/ 发现/ 算法/ (/ LabelPropagationAlgorithm/ ,/ LPA/ )/ 相结合/ ,/ 提出/ 了/ 一种/ 能够/ 处理/ 大规模/ OSN/ 网络/ 社团/ 发现/ 问题/ 的/ 并行/ LPA/ 算法/ (/ ParallelLPA/ ,/ PLPA/ )/ ./ 其次/ ,/ 文中/ 在/ PLPA/ 算法/ 的/ 基础/ 上/ 给出/ 了/ 3/ 种/ 社团/ 关键/ 节点/ 的/ 选取/ 策略/ ,/ 并/ 提出/ 了/ 相应/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ ./ 最后/ ,/ 通过/ 在/ 两组/ 真实/ 数据/ 集上/ 进行/ 的/ 社团/ 并行/ 发现/ 及/ OSN/ 蠕虫/ 抑制/ 仿真/ 实验/ 证明/ 了/ 文中/ 方法/ 的/ 有效性/ ./ 关键词/ 社团/ 并行/ 发现/ ;/ 在线/ 社交/ 网络/ ;/ 蠕虫/ 抑制/ ;/ 社会/ 计算/ ;/ 社交/ 网络/ 1/ 引言/ OSN/ )/ 已经/ 成为/ 互联网/ 上/ 最为/ 流行/ 的/ 服务/ 之一/ ./ 但/ 与此同时/ ,/ 随着/ OSN/ 的/ 大规模/ 流行/ ,/ 一些/ 新/ 的/ 安全/ 问题/ 也/ 开始/ 不断涌现/ ./ 其中/ ,/ 新型/ 的/ OSN/ 蠕虫/ 以/ 其/ 目前/ ,/ 在线/ 社交/ 网络/ (/ OnlineSocialNetwork/ ,/ 独特/ 的/ 传播方式/ 成为/ 目前/ 最具/ 威胁/ 的/ 安全/ 问题/ 之一/ ./ Page2/ 与/ 传统/ 蠕虫/ 不同/ ,/ OSN/ 蠕虫/ 主要/ 是/ 通过/ 社会/ 工程/ 以/ 各种/ 方式/ 欺骗/ 用户/ 点击/ 而/ 进行/ 快速/ 传播/ ./ 例如/ ,/ 2011/ 年/ 6/ 月/ HelloSamy/ 蠕虫/ 通过/ 利用/ 新浪/ 微博中/ 存在/ 的/ 跨/ 站/ 脚本/ 漏洞/ ,/ 在/ 15/ 分钟/ 内/ 感染/ 3/ 万多/ 用户/ ①/ ./ 其/ 传播/ 过程/ 主要/ 是/ ,/ 依靠/ 在/ 被/ 感染/ 用户/ 的/ 页面/ 上/ 自动/ 发布/ 带有/ 恶意/ 短/ 链接/ 且/ 具有/ 很强/ 欺骗性/ 的/ 消息/ ,/ 当/ 其他/ 好友/ 因/ 好奇/ 而/ 浏览/ 该/ 消息/ 并/ 点击/ 其中/ 的/ 短/ 链接/ 时/ ,/ 就/ 会/ 使得/ 本地/ 浏览器/ 自动/ 加载/ 并/ 执行/ 相关/ 恶意代码/ ,/ 进而/ 使得/ 该/ 好友/ 被/ 蠕虫/ 感染/ ./ 在/ 2013/ 年/ 4/ 月份/ 爆发/ 的/ TwitterOhaa/ 蠕虫/ 也/ 采取/ 了/ 同样/ 类似/ 的/ 传播方式/ ,/ 在/ 短时间/ 内/ 感染/ 了/ 大量/ 用户/ ②/ ./ 此外/ ,/ OSN/ 用户/ 之间/ 较强/ 的/ 信任/ 关系/ 以及/ OSN/ 网络拓扑/ 本身/ 所/ 具有/ 的/ 小/ 世界/ [/ 1/ ]/ 和/ 无/ 标度/ [/ 2/ ]/ 等/ 特性/ 同样/ 在/ 很大/ 程度/ 上/ 加快/ 了/ OSN/ 蠕虫/ 的/ 传播/ ,/ 具体/ 原因/ 可/ 参见/ 6.2/ 节/ 的/ 相关/ 描述/ ./ 针对/ 目前/ OSN/ 蠕虫/ 所/ 造成/ 各种/ 危害/ ,/ 有/ 研究/ 人员/ 提出/ 了/ 初步/ 的/ 防御/ 措施/ ./ 具体来说/ ,/ 主要/ 包括/ 两个/ 方面/ :/ OSN/ 蠕虫/ 检测/ 和/ OSN/ 蠕虫/ 抑制/ ./ 其中/ ,/ OSN/ 蠕虫/ 检测/ 可/ 根据/ 检测/ 的/ 位置/ 分为/ 服务端/ 检测/ [/ 3/ -/ 5/ ]/ 和/ 客户端/ 检测/ [/ 6/ ]/ ./ 前者/ 主要/ 是/ 通过/ 在/ OSN/ 网站/ 的/ 服务器端/ 捕获/ 网络/ 中/ 被/ 判定/ 为/ 恶意/ 的/ 消息/ 的/ 数量/ ,/ 但/ 该/ 方法/ 只有/ 当/ 恶意/ 消息/ 扩散/ 到/ 一定/ 程度/ 后/ 才能/ 检测/ 到/ OSN/ 蠕虫/ ./ 由此可见/ ,/ 该/ 方法/ 具有/ 不可避免/ 的/ 延迟/ 性/ ./ 而/ 客户端/ 检测/ 方法/ 主要/ 是/ 利用/ 不断更新/ 的/ 特征/ 库来/ 匹配/ 并/ 检测/ 出/ OSN/ 蠕虫/ 传播/ 的/ 情况/ ./ 但/ 当/ 有/ 新/ 类型/ 蠕虫/ 爆发/ 时/ ,/ 受限于/ 现有/ 网络带宽/ 等/ 条件/ 很难/ 及时/ 将/ 新/ 的/ 特征/ 内容/ 同时/ 下发/ 到/ 网络/ 中/ 所有/ 用户/ 的/ 检测/ 系统/ 中/ ,/ 故该/ 方案/ 也/ 存在/ 不可避免/ 的/ 延迟/ 性/ ./ 考虑/ 到/ 检测/ 方法/ 所/ 具有/ 的/ 延迟/ 性/ ,/ 目前/ 已有/ 研究/ 人员/ 提出/ 将/ OSN/ 蠕虫/ 抑制/ 方法/ [/ 7/ -/ 9/ ]/ 作为/ 另/ 一种/ 有效/ 的/ 防御/ 措施/ ./ 虽然/ 无法/ 及时/ 检测/ 出/ OSN/ 蠕虫/ 的/ 传播/ ,/ 但是/ 应该/ 提出/ 一种/ 能够/ 最大/ 程度/ 上/ 减少/ 受/ 感染/ 用户数量/ 的/ 解决/ 方法/ ./ 而/ 目前/ 研究/ 人员/ 主要/ 普遍/ 采用/ 的/ 方案/ 是从/ 复杂/ 网络/ 自身/ 具有/ 的/ 社团/ 结构/ 特性/ [/ 10/ ]/ 来/ 入手/ 解决/ ,/ 即/ 首先/ 寻找/ 网络/ 中/ 的/ 社团/ ,/ 之后/ 根据/ 相关/ 度量/ 手段/ (/ 例如/ 节点/ 的/ 度数/ )/ 来/ 选取/ 社团/ 中/ 的/ 关键/ 节点/ ./ 最后/ ,/ 通过/ 优先/ 对/ 这些/ 关键/ 节点/ 来/ 进行/ 免疫/ 操作/ ,/ 从而/ 保证/ 可以/ 以/ 最快/ 速度/ 来/ 保证/ 其他/ 节点/ 得到/ 免疫/ ./ 目前/ ,/ 寻找/ 复杂/ 网络/ 中/ 的/ 社团/ 结构/ 已经/ 成为/ 当前/ 相关/ 领域/ 的/ 研究/ 热点/ 之一/ ,/ 并且/ 也/ 有/ 大量/ 的/ 社团/ 发现/ 算法/ 被/ 提出/ ./ 这些/ 方法/ 可/ 分为/ 非/ 重叠/ 社团/ 发现/ 方法/ 和/ 重叠/ 社团/ 发现/ 方法/ ./ 其中/ 非/ 重叠/ 社团/ 发现/ 方法/ 中/ 较为/ 典型/ 的/ 有/ :/ 基于/ 分裂/ 思想/ 的/ GN/ 算法/ [/ 10/ ]/ 、/ 基于/ 凝聚/ 思想/ 的/ FN/ 算法/ [/ 11/ ]/ 以及/ 基于/ 标签/ 传播/ 的/ LPA/ 算法/ [/ 12/ ]/ ;/ 而/ 在/ 重叠/ 社团/ 发现/ 方法/ 中/ ,/ 由/ Palla/ 等/ 人/ [/ 13/ ]/ 首次/ 提出/ 了/ 基于/ 完全/ 子图/ 的/ CPM/ 算法/ ./ 之后/ 又/ 有/ 大量/ 的/ 研究/ 人员/ 在/ 此基础/ 上/ 给出/ 了/ 各自/ 具有/ 代表性/ 的/ 工作/ ,/ 例如/ ,/ 基于/ 凝聚/ 思想/ 的/ EAGLE/ 算法/ [/ 14/ ]/ 、/ 基于/ 贪心/ 思想/ 的/ GCE/ 算法/ [/ 15/ ]/ 以及/ 基于/ 扩展/ 标签/ 传播/ 思想/ 的/ COPRA/ 算法/ [/ 16/ ]/ ./ 由于/ 目前/ 主流/ 的/ OSN/ 网站/ (/ Facebook/ 、/ Twitter/ 、/ 新浪/ 微博/ 、/ 朋友圈/ 等/ )/ 中/ 的/ 用户数量/ 已经/ 达到/ 上/ 亿/ (/ 甚至/ 十亿/ )/ 规模/ ③/ ,/ 而/ 通过/ 对/ 以上/ 各类/ 算法/ 的/ 研究/ 发现/ ,/ 为了/ 使/ 算法/ 能够/ 处理/ 如此/ 大规模/ 的/ 网络/ ,/ 研究/ 人员/ 只是/ 考虑/ 如何/ 优化/ 自身/ 的/ 算法/ ./ 例如/ ,/ 作为/ 目前/ 最为/ 流行/ 的/ 非/ 重叠/ 社团/ 发现/ 算法/ 之一/ ,/ BGLL/ 算法/ [/ 17/ ]/ 通过/ 计算/ 局部/ 节点/ 信息/ 来/ 提高/ 其/ 运行/ 效率/ ./ 但/ 由于/ 该/ 算法/ 只能/ 在/ 单个/ 计算/ 节点/ 中/ 运行/ ,/ 即/ 不/ 具备/ 可扩展性/ ,/ 因此/ 单个/ 节点/ 的/ 计算能力/ 决定/ 了/ 该/ 算法/ 的/ 实际/ 处理/ 能力/ ./ 另一方面/ ,/ 为了/ 使得/ 现有/ 算法/ 具备/ 可扩展性/ ,/ 研究/ 人员/ 利用/ 了/ 分布式/ 技术/ 来/ 解决/ 大规模/ 网络/ 中/ 社团/ 发现/ 问题/ ,/ 例如/ Chen/ 等/ 人/ [/ 18/ ]/ 和/ Yang/ 等/ 人/ [/ 19/ ]/ 分别/ 使用/ MapReduce/ [/ 20/ ]/ 技术/ 重新/ 实现/ 了/ FN/ 算法/ 以及/ CPM/ 算法/ ./ 但/ 通过/ 分析/ 其/ 具体/ 实现/ 过程/ 可以/ 发现/ ,/ MapReduce/ 的/ “/ 易/ 并行/ ”/ 特性/ 并/ 不/ 适合/ 处理/ 复杂/ 的/ 基于/ 图/ 的/ 计算/ 问题/ ,/ 其/ 主要/ 原因/ 是/ 该/ 技术/ 需要/ 在/ 前/ 一个/ 处理过程/ 中/ 保存/ 整个/ 图/ 的/ 状态/ 并/ 作为/ 下/ 一个/ 任务/ 的/ 输入/ ,/ 而/ 这样/ 处理/ 则/ 会/ 降低/ 整个/ 计算/ 任务/ 的/ 运行/ 效率/ ./ 本文/ 将/ Google/ 提出/ 的/ 分布式/ 图/ 计算/ 框架/ Pregel/ [/ 21/ -/ 22/ ]/ 运用/ 到/ 非/ 重叠/ 社团/ 发现/ 的/ LPA/ 算法/ 中/ ,/ 通过/ 解决/ MapReduce/ 难以/ 处理/ 图/ 并行计算/ 的/ 问题/ ,/ 提出/ 了/ 一种/ 适合/ 处理/ 大规模/ OSN/ 的/ 社团/ 并行/ 发现/ 算法/ PLPA/ (/ ParallelLabelPropagationAlgorithm/ )/ ,/ 并/ 将/ 其/ 应用/ 到/ OSN/ 蠕虫/ 抑制/ 的/ 过程/ 中/ ./ 本文/ 的/ 主要/ 贡献/ 总结/ 如下/ :/ (/ 1/ )/ 提出/ 了/ 一种/ 基于/ Pregel/ 模型/ 的/ 社团/ 并行/ 发现/ 方法/ ./ 该/ 方法/ 主要/ 利用/ 了/ 分布式/ 技术/ 实现/ 了/ 可/ 并行/ 化/ 的/ PLPA/ 算法/ ,/ 使/ 其/ 能够/ 有效/ 处理/ 大规模/ 网络/ 中/ 的/ 社团/ 发现/ 问题/ ./ (/ 2/ )/ 提出/ 了/ 一种/ 基于/ 社团/ 并行/ 发现/ 的/ OSN/ 蠕/ ①/ ②/ ③/ Page3/ 虫/ 抑制/ 方法/ ./ 该/ 方法/ 主要/ 在/ PLPA/ 算法/ 的/ 基础/ 上/ ,/ 通过/ 不同/ 策略/ 来/ 选取/ 社团/ 中/ 的/ 关键/ 节点/ 进行/ 优先/ 免疫/ ,/ 从而/ 达到/ 对/ OSN/ 蠕虫/ 的/ 及时/ 抑制/ ./ (/ 3/ )/ 通过/ 仿真/ 实验/ 验证/ 了/ 本文/ 方法/ 的/ 有效性/ ./ 本文/ 结合/ 真实/ 的/ 大规模/ 数据/ 集/ ,/ 对/ 本文/ 方法/ 的/ 有效性/ 进行/ 了/ 实验/ 检验/ ./ 结果表明/ ,/ 我们/ 所/ 提出/ 的/ PLPA/ 算法/ 能够/ 快速/ 有效/ 的/ 发现/ 社团/ 结构/ ,/ 同时/ 相应/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ 能够/ 取得/ 较/ 好/ 的/ 防御/ 效果/ ./ 本文/ 第/ 2/ 节/ 介绍/ OSN/ 蠕虫/ 抑制/ 和/ 社团/ 发现/ 的/ 相关/ 工作/ ;/ 第/ 3/ 节/ 阐述/ 本文/ 方法/ 的/ 总体/ 框架/ ;/ 第/ 4/ 节/ 和/ 第/ 5/ 节/ 分别/ 给出/ PLPA/ 算法/ 的/ 具体/ 实现/ 及/ 相应/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ ;/ 第/ 6/ 节/ 介绍/ 在/ 真实/ 数据/ 集上/ 的/ 实验/ 效果/ ;/ 第/ 7/ 节/ 总结/ 全文/ 工作/ ./ 2/ 相关/ 工作/ OSN/ 蠕虫/ 抑制/ 相关/ 的/ 工作/ 最初/ 是/ 由/ Zhu/ 等/ 人/ [/ 7/ ]/ 在/ 研究/ 移动电话/ 网络/ 中/ 如何/ 快速/ 发布/ 补丁/ 所/ 提出/ 来/ 的/ ./ 其/ 主要/ 是/ 考虑/ 到/ 在/ 蠕虫/ 爆发/ 时/ 无法/ 在/ 短时间/ 内/ 将/ 补丁/ 下/ 发给/ 所有/ 移动用户/ ,/ 因此/ 需要/ 提出/ 一种/ 分步/ 的/ 快速/ 下发/ 机制/ ./ 而/ 其/ 核心思想/ 是/ 借助/ 移动/ 网络/ 中/ 的/ 用户/ 关系/ ,/ 通过/ 提取/ 社交/ 关系/ 图/ 并/ 对/ 其/ 进行/ 划分/ ,/ 之后/ 在/ 所/ 划分/ 的/ 图上/ 利用/ 其/ 提出/ 的/ 最少/ 分割/ 节点/ 算法/ 来/ 进行/ 补丁/ 下发/ ,/ 从而/ 达到/ 及时/ 有效/ 的/ 蠕虫/ 抑制/ 效果/ ./ 而/ 基于/ 社团/ 结构/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ 则/ 是/ 由/ Nguyen/ 等/ 人/ [/ 8/ ]/ 首先/ 提出/ 来/ 的/ ./ 其/ 主要/ 考虑/ 到/ 基于/ 图/ 划分/ 的/ 方法/ 很难/ 反映/ 真实/ 的/ 网络结构/ 特性/ ,/ 同时/ 该/ 方法/ 在/ 划分/ 过程/ 中/ 必须/ 要/ 由/ 用户/ 提供/ 划分/ 的/ 数量/ k/ ,/ 而/ 事实上/ 该/ 参数/ 理应/ 是/ 由/ 划分算法/ 给出/ ./ 因此/ ,/ Nguyen/ 等/ 人/ 主要/ 的/ 贡献/ 是/ 一方面/ 提出/ 了/ 基于/ 社团/ 发现/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ ,/ 该/ 方法/ 利用/ 目前/ 流行/ 的/ BGLL/ 社团/ 发现/ 算法/ 能够/ 在/ 不/ 需要/ 用户/ 提供/ 划分/ 数量/ k/ 的/ 情况/ 下/ 即可/ 找出/ 合理/ 的/ 社团/ 结构/ ./ 另一方面/ 作者/ 给出/ 了/ 社团/ 中/ 关键/ 节点/ 的/ 选取/ 策略/ ,/ 即将/ 社团/ 中/ 和/ 其他/ 社团/ 连接/ 数最多/ 的/ 节点/ 定义/ 为/ 关键/ 节点/ ,/ 并/ 优先/ 对/ 这些/ 节点/ 进行/ 免疫/ 或者/ 补丁/ 下发/ ./ 但/ 在/ 文章/ 中/ ,/ 作者/ 并/ 没有/ 对/ 关键/ 节点/ 的/ 选取/ 进行/ 理论/ 证明/ 或者/ 实验/ 说明/ ./ 此外/ ,/ Nguyen/ 等/ 人/ [/ 9/ ]/ 还/ 提出/ 了/ 一种/ 基于/ 局部/ 密度/ 函数/ 的/ 重叠/ 社团/ 发现/ 方法/ ./ 与/ 以往/ 算法/ 不同/ 的/ 是/ ,/ 作者/ 在/ 发现/ 社团/ 的/ 过程/ 中/ 考虑/ 了/ 用户/ 关系/ 的/ 动态/ 调整/ 的/ 问题/ ./ 最后/ ,/ 作者/ 在/ 此基础/ 上/ 给出/ 了/ 相应/ 的/ 可以/ 看出/ ,/ 为了/ 能够/ 较/ 好/ 的/ 抑制/ OSN/ 蠕虫/ 传播/ ,/ 高效/ 寻找/ 网络/ 中/ 的/ 社团/ 结构/ 是/ 十分/ 关键/ 的/ ./ 而/ 为了/ 能够/ 有效/ 处理/ 大规模/ 网络/ 数据/ ,/ 目前/ 已经/ 有/ 学者/ 提出/ 使用/ 云/ 计算/ 中/ 的/ 分布式/ 并行计算/ 技术/ 来/ 解决/ 相应/ 的/ 大规模/ 问题/ ./ Chen/ 等/ 人/ [/ 18/ ]/ 首次/ 提出/ 利用/ MapReduce/ 技术/ 来/ 重新/ 实现/ 基于/ 凝聚/ 思想/ 的/ FN/ 算法/ ./ 其/ 主要/ 思路/ 是/ 利用/ MapReduce/ 求出/ 任意/ 节点/ 对/ 之间/ 的/ 模块/ 度/ 增益/ ,/ 之后/ 找出/ 增益/ 最大/ 的/ 节点/ 对/ 并/ 将/ 其/ 合并/ ./ 这样/ 处理/ 的/ 效率/ 仍然/ 很/ 低/ ,/ 因为/ 其/ 算法/ 每次/ 迭代/ 只能/ 处理/ 一对/ 节点/ ./ 虽然/ 作者/ 随后/ 提出/ 了/ 一次/ 处理/ 多/ 对/ 节点/ 的/ 优化/ 方法/ ,/ 但/ 这样/ 的/ 处理/ 方式/ 会/ 对/ 结果/ 的/ 准确性/ 造成/ 很大/ 影响/ ./ 此外/ ,/ Yang/ 等/ 人/ [/ 19/ ]/ 提出/ 通过/ 利用/ MapReduce/ 来/ 发现/ 极大/ 完全/ 子图/ 的/ 方式/ 重新/ 实现/ 了/ CPM/ 算法/ ./ 其/ 主要/ 思路/ 是/ 先/ 将/ 原始/ 图/ 预处理/ 为/ 邻接/ 表/ 的/ 形式/ ,/ 之后/ 在/ 邻接/ 表上/ 构建/ 完全/ 子图/ ,/ 并/ 通过/ 这些/ 完全/ 子图/ 来/ 发现/ 重叠/ 的/ 社团/ 结构/ ./ OSN/ 蠕虫/ 抑制/ 策略/ ,/ 即/ 在/ 找到/ 重叠/ 社团/ 以后/ ,/ 通过/ 对/ 重叠/ 区/ 的/ 邻居/ 节点/ 进行/ 补丁/ 分发/ ,/ 从而/ 能够/ 达到/ 更为/ 有效/ 的/ OSN/ 蠕虫/ 抑制/ 效果/ ./ Zhang/ 等/ 人/ [/ 23/ ]/ 首次/ 提出/ 了/ 利用/ 整体/ 同步/ 模型/ (/ BulkSynchronousParallel/ ,/ BSP/ )/ [/ 24/ ]/ 来/ 解决/ 无向/ 无权/ 图中/ 的/ 重叠/ 社团/ 发现/ 问题/ ./ 其/ 主要/ 思路/ 是/ 首先/ 给出/ 节点/ 之间/ 邻接/ (/ propinquity/ )/ 的/ 概念/ ,/ 进而/ 结合/ 拓扑/ 自身/ 的/ 结构/ 特性/ 给出/ 了/ 基于/ 邻接/ 动态/ 特性/ 的/ 重叠/ 社团/ 发现/ 算法/ ./ 该/ 算法/ 的/ 缺陷/ 是/ 需要/ 用户/ 定义/ 不同/ 的/ 参数/ 来/ 确定/ 节点/ 之间/ 是否/ 为/ 邻接/ ,/ 这/ 也/ 意味着/ 社团/ 发现/ 结果/ 的/ 准确性/ 很大/ 程度/ 上/ 会/ 受到/ 用户/ 参数/ 的/ 影响/ ./ 之后/ ,/ Zhang/ 等/ 人/ [/ 25/ ]/ 提出/ 了/ 利用/ BSP/ 计算/ 模型/ 来/ 解决/ 有/ 向/ 带/ 权图/ 中/ 的/ 重叠/ 社团/ 发现/ 问题/ ./ 其/ 核心/ 思路/ 是/ 依据/ 文献/ [/ 26/ ]/ 给出/ 的/ 概念/ ,/ 首先/ 找出/ 自然/ 社团/ ,/ 之后/ 通过/ 迭代/ 来/ 合并/ 两/ 两/ 相似/ 的/ 自然/ 社团/ ,/ 从而/ 发现/ 有/ 向/ 带/ 权图/ 中/ 的/ 重叠/ 社团/ ./ 该/ 方法/ 仍然/ 存在/ 效率/ 问题/ ,/ 因为/ 每次/ 迭代/ 只能/ 合并/ 两个/ 相似/ 的/ 社团/ ,/ 而/ 每/ 一次/ 迭代/ 都/ 需要/ 很大/ 的/ 计算/ 开销/ ./ 综上所述/ ,/ 虽然/ Nguyen/ 等/ 人/ 提出/ 的/ 基于/ 社团/ 发现/ 的/ OSN/ 蠕虫/ 抑制/ 方案/ 能够/ 在/ 一定/ 规模/ 的/ 网络/ 中/ 起到/ 较/ 好/ 的/ 防御/ 作用/ ,/ 但是/ 仍然/ 存在/ 两个/ 方面/ 不足/ :/ 首先/ ,/ 由于/ 作者/ 所/ 使用/ 社团/ 发现/ 算法/ 本身/ 不/ 具备/ 可扩展性/ ,/ 因此/ 无法/ 有/ 效应/ 对/ 大规模/ 网络/ ./ 其次/ ,/ 作者/ 在/ 文中/ 只/ 给出/ 了/ 单一/ 的/ 关键/ 节点/ 选取/ 策略/ ,/ 而/ 没有/ 给出/ 其他/ 选取/ 策略/ 及/ 相关/ 抑制/ 效果/ 的/ 比较/ ./ 此外/ ,/ 虽然/ 已有/ 部分/ 可/ 扩展/ 社团/ 发现/ 方法/ 被/ 提出/ ,/ 但/ 通过/ Page4/ 以上/ 分析/ 可知/ ,/ 这些/ 算法/ 仍然/ 存在/ 运行/ 效率/ 较/ 低/ 的/ 问题/ ./ 3/ 总体/ 框架/ 本文/ 在/ 现有/ 方法/ 的/ 基础/ 上/ ,/ 提出/ 了/ 一种/ 基于/ 并行/ 化/ 社团/ 挖掘/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ ./ 如图/ 1/ 所示/ ,/ 该/ 方法/ 主要/ 分为/ 4/ 个/ 阶段/ :/ 原始数据/ 预处理/ 、/ 并行/ 社团/ 发现/ 、/ 关键/ 节点/ 提取/ 以及/ OSN/ 蠕虫/ 快速/ 抑制/ ./ (/ 1/ )/ 原始数据/ 预处理/ ./ 由于/ 从/ 实际/ 网络/ 中/ 提取/ 到/ 的/ 原始/ 拓扑/ 结构/ 的/ 存储/ 格式/ 多种多样/ ,/ 并且/ 一般/ 规模/ 较大/ ,/ 因此/ 需要/ 预处理/ 来/ 进行/ 数据格式/ 的/ 统一/ ./ 本文/ 利用/ MapReduce/ 并行/ 化/ 技术/ 将/ 原始数据/ 统一/ 处理/ 成/ 邻接/ 表/ 格式/ 的/ 网络拓扑/ 结构/ ./ 具体来说/ ,/ 我们/ 假设/ 原始/ 输入/ 是/ 基于/ 边/ 集合/ 的/ 存储/ 格式/ ,/ 用/ {/ 〈/ n1/ ,/ n2/ 〉/ }/ 来/ 表示/ ,/ 其中/ n1/ 和/ n2/ 表示/ 网络/ 中/ 的/ 任意/ 两个/ 节点/ ./ 本文/ 在/ 数据/ 预处理/ 阶段/ 主要/ 实现/ 的/ 过程/ 可以/ 用/ 如下/ 形式/ 来/ 表示/ :/ Mapper/ :/ 〈/ n1/ ,/ n2/ 〉/ →/ 〈/ k/ ,/ v/ 〉/ Reducer/ :/ 〈/ k/ ,/ list/ (/ v/ )/ 〉/ →/ 〈/ k/ ,/ v1/ -/ v2/ -/ …/ -/ vn/ 〉/ 在/ 上述/ 表达式/ 中/ 的/ Mapper/ 方法/ 将/ 原始/ 网络/ 中/ 的/ 每/ 一条/ 边/ 转换/ 为/ 可供/ 处理/ 的/ key/ -/ value/ 二元/ 组/ (/ 这里/ 简记/ 为/ k/ 和/ v/ )/ ./ 而/ Reducer/ 方法/ 则/ 负责/ 收集/ 每/ 一个/ 节点/ k/ 对应/ 的/ 邻居/ 节点/ ,/ 进而/ 能够/ 得到/ 该/ 节点/ 的/ 邻接/ 表/ ,/ 并/ 以/ v1/ -/ v2/ -/ …/ -/ vn/ 形式/ 表示/ ./ 关于/ MapReduce/ 的/ 具体/ 处理/ 流程/ 可/ 参见/ 文献/ [/ 20/ ]/ 中/ 的/ 具体/ 描述/ ./ (/ 2/ )/ 并行/ 社团/ 发现/ ./ 该/ 阶段/ 是/ OSN/ 蠕虫/ 抑制/ 处理过程/ 中/ 的/ 核心/ 过程/ ,/ 其/ 能否/ 快速/ 准确/ 提取/ 出/ 大规模/ 网络/ 中/ 的/ 社团/ 结构/ ,/ 决定/ 了/ 最终/ OSN/ 蠕虫/ 抑制/ 的/ 效果/ ./ 本文/ 通过/ 利用/ Pregel/ 计算/ 模型/ ,/ 将/ 预处理/ 阶段/ 得到/ 的/ 网络/ 邻接/ 表/ 作为/ 输入/ ,/ 通过/ 并行/ 化/ 计算/ ,/ 将/ 网络/ 中/ 的/ 社团/ 结构/ 作为/ 输出/ ,/ 具体/ 算法/ 描述/ 将/ 在/ 第/ 4/ 节中/ 详细/ 介绍/ ./ (/ 3/ )/ 关键/ 节点/ 提取/ ./ 当/ 并行/ 化/ 社团/ 计算/ 完成/ 后/ ,/ 本文/ 将/ 对/ 社团/ 结构/ 中/ 具有/ 重要/ 属性/ 特征/ 的/ 节点/ (/ 称之为/ “/ 社团/ 关键/ 节点/ ”/ )/ ./ 而/ 根据/ 不同/ 属性/ 特征/ 的/ 选取/ ,/ 本文/ 提出/ 了/ 3/ 种/ 不同/ 的/ 关键/ 节点/ 选取/ 策略/ ,/ 即/ 基于/ 最大/ 度数/ 节点/ 、/ 最大/ 内部/ 度数/ 节点/ 以及/ 最大/ 外部/ 度数/ 节点/ ./ 不同/ 的/ 关键/ 节点/ 会/ 导致/ 不同/ 的/ 抑制/ 效果/ ,/ 具体/ 选取/ 策略/ 将会/ 在/ 第/ 5/ 节/ 介绍/ ./ (/ 4/ )/ OSN/ 蠕虫/ 抑制/ ./ 当/ 利用/ 关键/ 节点/ 选取/ 策略/ 筛选/ 出/ 所有/ 社团/ 结构/ 中/ 的/ 关键/ 节点/ 后/ ,/ 本文/ 将/ 对/ 其/ 进行/ 优先/ 免疫/ 操作/ ,/ 之后/ 再/ 借助/ 这些/ 关键/ 节点/ 来/ 对/ 其/ 周围/ 邻居/ 节点/ 进行/ 免疫/ ,/ 进而/ 保证/ 能够/ 有效/ 抑制/ OSN/ 蠕虫/ 的/ 快速/ 传播/ ./ 为了/ 说明/ 选取/ 不同/ 抑制/ 策略/ 所/ 导致/ 的/ OSN/ 蠕虫/ 抑制/ 效果/ ,/ 本文/ 将会/ 在/ 第/ 6/ 节/ 详细描述/ 相关/ 对比/ 实验/ 结果/ ./ 4/ 基于/ Pregel/ 的/ 社团/ 并行/ 发现/ 本/ 节/ 详细/ 介绍/ 基于/ 图/ 分布式计算/ 技术/ —/ —/ —/ Pregel/ 的/ 社团/ 并行/ 发现/ 算法/ ./ 首先/ ,/ 介绍/ Pregel/ 模型/ 及/ 利用/ 该/ 模型/ 处理/ 问题/ 的/ 一般/ 流程/ ./ 其次/ ,/ 在/ 分析/ 基于/ 标签/ 传播/ 的/ 社团/ 发现/ 算法/ 可扩展性/ 的/ 基础/ 上/ ,/ 提出/ PLPA/ 算法/ ./ 4.1/ Pregel/ 模型/ Google/ 研究/ 人员/ 在/ 利用/ MapReduce/ 解决/ 大规模/ 并行处理/ 问题/ 时/ ,/ 发现/ 其/ 很/ 难/ 应用/ 于/ 复杂/ 的/ 图/ 计算/ 领域/ ,/ 因此/ 提出/ 了/ 一种/ 新/ 的/ 基于/ 整体/ 同步/ 并行/ BSP/ 模型/ ,/ 称之为/ Pregel/ 模型/ [/ 21/ -/ 22/ ]/ ./ 在/ 该/ 模型/ 中/ ,/ 所有/ 待处理/ 的/ 对象/ 均/ 可以/ 用/ 有向图/ G/ =/ 〈/ V/ ,/ E/ 〉/ 来/ 表示/ ,/ 其中/ 顶点/ 集合/ V/ =/ {/ vi/ |/ i/ =/ 1/ ,/ 2/ ,/ …/ ,/ n/ }/ ,/ 有/ 向/ 边/ 集合/ E/ =/ {/ eij/ |/ eij/ =/ 〈/ vi/ ,/ vj/ 〉/ ,/ vi/ ,/ vj/ ∈/ V/ ,/ i/ ,/ j/ =/ 1/ ,/ 2/ ,/ …/ ,/ n/ }/ ./ 而/ 在/ 具体/ 的/ 处理过程/ 中/ ,/ Pregel/ 作为/ 一种/ 消息/ 驱动/ 的/ 面向/ 节点/ 的/ 计算/ 模型/ ./ 如图/ 2/ 所示/ ,/ 虚线/ 即/ 表示/ 节点/ 接收/ 或者/ 发送/ 消息/ 的/ 过程/ ./ 另外/ ,/ 在/ 该/ 模型/ 中/ ,/ 待处理/ 图/ G/ 中/ 的/ 所有/ 顶点/ 均/ 被/ 赋予/ 独立/ 计算/ 的/ 能力/ ,/ Page5/ 如图/ 2/ 所示/ ,/ 顶点/ 上方/ 的/ Compute/ 方法/ 表示/ 该/ 节点/ 的/ 计算/ 过程/ ./ 关于/ Pregel/ 的/ 具体/ 处理/ 流程/ 可/ 参见/ 文献/ [/ 21/ ]/ 中/ 的/ 具体/ 描述/ ./ 由于/ Pregel/ 本身/ 是/ 基于/ BSP/ 模型/ 的/ ,/ 因此/ 正/ 如上图/ 所示/ ,/ 整个/ 计算/ 过程/ 可以/ 看作/ 是/ 迭代/ 执行/ 一系列/ 步骤/ (/ 被/ 称为/ 超级/ 步/ )/ 的/ 过程/ ./ 而/ 在/ 每/ 一次/ 迭代/ 过程/ 中/ ,/ 系统/ 会为/ 每/ 一个/ 接收/ 到/ 消息/ 的/ 活跃/ 顶点/ (/ 图中/ 白色/ 顶点/ )/ 执行/ 一次/ Compute/ 方法/ ,/ 该/ 方法/ 则/ 需要/ 由/ 用户/ 根据/ 不同/ 的/ 计算/ 任务/ 来/ 为/ 所有/ 顶点/ 提供/ 统一/ 的/ 实现/ 过程/ ./ 本文/ 这里/ 以伪/ 代码/ 的/ 形式/ 总结/ 出/ Pregel/ 模型/ 中/ 所有/ 节点/ 计算/ 时/ 的/ 一般/ 流程/ ,/ 而/ 该/ 流程/ 也/ 作为/ 下文/ PLPA/ 算法/ 的/ 主要/ 框架/ ./ 过程/ 1/ ./ Compute/ 方法/ ./ 输入/ :/ 消息/ 集合/ M/ ,/ 当前/ 状态值/ S/ ,/ 停机/ 条件/ C/ 输出/ :/ 是否/ 停机/ 1/ ./ N/ ←/ / ,/ R/ ←/ / ,/ T/ ←/ / 2/ ./ formiinM3/ ./ ri/ ←/ calculate/ (/ mi/ )/ 4/ ./ R/ ./ add/ (/ ri/ )/ 5/ ./ setStatus/ (/ R/ ,/ S/ )/ 6/ ./ T/ ←/ getTargets/ (/ )/ 7/ ./ M/ ←/ createMessages/ (/ R/ ,/ targets/ )/ // // 创建/ 新/ 消息/ 8/ ./ formiinM9/ ./ send/ (/ mi/ )/ 10/ ./ if/ (/ checkStatus/ (/ C/ )/ )/ 11/ ./ voteToHalt/ (/ )/ 通过观察/ 以上/ 方法/ 可以/ 看出/ ,/ 节点/ 在/ 执行/ 计算/ 时/ 都/ 需要/ 完成/ 以下/ 4/ 项/ 任务/ ,/ 即/ 〈/ 1/ 〉/ 核心/ 计算/ (/ 第/ 2/ ~/ 4/ 行/ )/ ./ 该/ 任务/ 是/ 遍历/ 该/ 顶点/ 在/ 运行/ 时/ 所有/ 接收/ 到/ 的/ 消息/ 内容/ 并/ 进行/ 综合/ 的/ 计算/ 过程/ ,/ 同时/ 该/ 过程/ 也/ 是/ 利用/ Pregel/ 模型/ 来/ 解决/ 各类/ 计算/ 问题/ 的/ 主要/ 处理过程/ ./ 〈/ 2/ 〉/ 设置/ 顶点/ 状态/ (/ 第/ 5/ 行/ )/ ./ 该/ 任务/ 主要/ 是/ 根据/ 上/ 一个/ 任务/ 计算/ 得到/ 的/ 结果/ 来/ 修改/ 当前/ 的/ 状态值/ ./ 用户/ 可以/ 根据/ 不同/ 的/ 任务/ 来/ 定义/ 不同/ 的/ 状态/ 含义/ ./ 例如/ ,/ 本文/ 将/ 标签/ 值/ 作为/ 顶点/ 的/ 状态值/ ./ 〈/ 3/ 〉/ 创建/ 并/ 发送/ 消息/ (/ 第/ 6/ ~/ 9/ 行/ )/ ./ 该/ 任务/ 是/ 通过/ 核心/ 计算/ 任务/ 的/ 结果/ 来/ 创建/ 新/ 的/ 待/ 发送/ 消息/ 集合/ ./ 需要/ 说明/ 的/ 是/ ,/ 消息/ 的/ 创建/ 以及/ 消息/ 的/ 发送/ 目标/ 都/ 由/ 用户/ 根据/ 不同/ 的/ 任务/ 、/ 条件/ 来/ 完成/ ,/ 而/ 消息/ 的/ 发送/ 过程/ 则/ 通过/ 系统/ 提供/ 的/ 内部/ 方法/ 来/ 完成/ ./ 〈/ 4/ 〉/ 判断/ 停机/ (/ 第/ 10/ ~/ 11/ 行/ )/ ./ 该/ 任务/ 是/ 根据/ 当前/ 的/ 状态值/ 来/ 判断/ 是否/ 满足用户/ 提供/ 的/ 停机/ 条件/ ./ 若/ 满足/ ,/ 则/ 该/ 节点/ 由/ 活跃/ 状态/ 变为/ 停机/ 状态/ (/ 图/ 2/ 中/ 的/ 灰色/ 顶点/ )/ ,/ 同时/ 该/ 节点/ 将/ 不会/ 参与/ 下/ 一个/ 超级/ 步中/ 的/ 计算/ 直到/ 有/ 其他/ 节点/ 向/ 其/ 发送/ 消息/ 为止/ ./ 而/ 当/ 所有/ 顶点/ 均/ 为/ 停机/ 状态/ 时/ ,/ 整个/ 迭代/ 流程/ 将会/ 终止/ ./ 4.2/ PLPA/ 算法/ 原始/ LPA/ 算法/ 是/ 由/ Raghavan/ 等/ 人/ 为了/ 有效/ 处理/ 较/ 大规模/ 网络/ 而/ 提出/ 来/ 接近/ 线性/ 计算/ 时间/ 的/ 社团/ 发现/ 算法/ ./ 该/ 算法/ 与/ Pregel/ 模型/ 整体/ 计算/ 过程/ 相似之处/ 在于/ 均/ 采用/ 迭代/ 执行/ 的/ 过程/ ,/ 即/ 在/ 算法/ 的/ 每/ 一次/ 迭代/ 过程/ 中/ ,/ 所有/ 节点/ 首先/ 收集/ 其/ 周围/ 邻居/ 节点/ 的/ 标签/ ,/ 之后/ 将/ 其/ 自身/ 的/ 标签/ 赋值/ 为/ 出现/ 次数/ 最多/ 的/ 标签/ 值/ ./ 整个/ 算法/ 的/ 迭代/ 过程/ 直到/ 所有/ 节点/ 的/ 标签/ 值/ 是/ 其/ 周围/ 邻居/ 节点/ 中个/ 数最多/ 的/ 标签/ 值/ 为止/ ./ 在/ 原始/ LPA/ 算法/ 中/ [/ 12/ ]/ ,/ 作者/ 为了/ 解决/ 自身/ 固有/ 的/ “/ 振摆/ ”/ 问题/ ①/ ,/ 提出/ 了/ 异步/ 解决/ 策略/ ,/ 在/ 描述/ 该/ 策略/ 之前/ ,/ 下面/ 先/ 给出/ 相关/ 符号/ 的/ 说明/ :/ 该/ 集合/ 的/ 节点/ 数/ ;/ Lt/ (/ vi/ )/ :/ 节点/ vi/ 的/ t/ 时刻/ 标签/ 值/ ;/ Ni/ :/ 表示/ 节点/ vi/ 的/ 邻居/ 节点/ 集合/ ,/ 并用/ ni/ 表示/ f/ :/ 负责/ 确定/ 某/ 节点/ 标签/ 值/ 的/ 函数/ ,/ 一般/ 将/ 其/ 定义/ 为/ 选取/ 某个/ 标签/ 集合/ (/ 允许/ 重复/ )/ 中/ 出现/ 次数/ 最多/ 的/ 标签/ 值/ ;/ q/ :/ 表示/ 异步/ 比例/ ,/ 也/ 称/ 异步/ 程度/ ,/ 即/ 在/ t/ 时刻/ 用/ f/ 来/ 计算/ 节点/ vi/ 的/ 标签/ 值时/ ,/ 将/ 选取/ 其/ 邻居/ 节点/ 中/ q/ ×/ ni/ 个/ 节点/ 的/ t/ -/ 1/ 时刻/ 标签/ 值/ 和/ (/ 1/ -/ q/ )/ ×/ ni/ 个/ 节点/ 的/ t/ 时刻/ 的/ 标签/ 值来/ 作为/ 输入/ 参数/ ;/ 根据/ 以上/ 说明/ ,/ 假设/ 已知/ t/ 时刻/ 顶点/ vi/ 的/ 标签/ 值/ Lt/ (/ vi/ )/ 由/ 函数/ f/ 来/ 确定/ ,/ 并且/ 此时/ vi/ 的/ 邻居/ 节点/ 为/ Ni/ =/ {/ v1/ ,/ v2/ ,/ …/ ,/ vni/ }/ ,/ 则/ Lt/ (/ vi/ )/ 的/ 计算/ 方式/ 如下/ :/ Lt/ (/ vi/ )/ =/ f/ (/ Lt/ -/ 1/ (/ v1/ )/ ,/ …/ ,/ Lt/ -/ 1/ (/ vq/ ×/ ni/ )/ ,/ 在/ 式/ (/ 1/ )/ 中/ ,/ 由于/ 输入/ 格式/ 限制/ ,/ 这里/ q/ ×/ ni/ 表示/ 将/ 向下/ (/ 或/ 上/ )/ 取整/ ./ 此外/ ,/ 根据/ 上/ 式/ 可知/ ,/ 当/ q/ =/ 0/ 时/ ,/ 意味着/ 在/ 选取/ 标签/ 值时/ ,/ 将/ 采用/ 同步/ 策略/ ,/ 即/ t/ 时刻/ 任一/ 节点/ 的/ 标签/ 值/ 由/ 其/ 周围/ 邻居/ 节点/ 的/ t/ 时刻/ 标签/ 值来/ 确定/ ;/ 当/ 0/ </ q/ </ 1/ 时/ ,/ 表示/ 算法/ 选择/ 异步/ 策略/ ;/ 当/ q/ =/ 1/ 时/ ,/ 称为/ 完全/ 异步/ 策略/ ./ 本文/ 将/ 在/ 第/ 6/ 节/ 实验/ 部分/ (/ 见图/ 7/ (/ a/ )/ )/ 分析/ 不同/ 异步/ 程度/ 对/ 算法/ 结果/ 的/ 影响/ ./ 而/ 根据/ 以上/ 对/ LPA/ 算法/ 的/ 简要/ 描述/ 可以/ 发现/ ,/ 其/ 不仅/ 与/ Pregel/ 模型/ 的/ 整体/ 迭代/ 过程/ 相似/ ,/ 同时/ 每/ 一次/ 迭代/ 中/ 所有/ 节点/ 都/ 需要/ 执行/ 的/ 计算/ 过程/ 均/ 可以/ 划分/ 为/ 前述/ 的/ 4/ 项/ 任务/ ,/ 正是/ 在/ 此基础/ 上/ ,/ 本文/ 提出/ ①/ 造成/ “/ 振摆/ ”/ 问题/ 的/ 原因/ 是/ 在于/ 当图/ 中/ 存在/ 二部/ 图/ 或者/ 近似/ Page6/ 了/ 基于/ Pregel/ 的/ PLPA/ 算法/ ,/ 如下/ 所示/ ./ 算法/ 1/ ./ PLPA/ 算法/ ./ 输入/ :/ 含有/ 标签/ 值/ 的/ 消息/ 集合/ M/ ,/ 节点/ ID/ ,/ 异步/ 程度/ q/ 输出/ :/ 是否/ 停机/ 1/ ./ step/ ←/ getSuperstepCount/ (/ )/ // // 当前/ 超级/ 步数/ 2/ ./ if/ (/ step/ %/ 2/ =/ 0/ )/ // // 一次/ LPA/ 迭代/ 需要/ 两个/ 超级/ 步/ 3/ ./ if/ (/ step/ =/ 0/ )/ // // 初始化/ 标签/ 值为/ 节点/ ID4/ ./ currentLabel/ ←/ ID5/ ./ lastLabel/ ←/ ID6/ ./ else/ // // 计算/ 标签/ 值/ 7/ ./ maxLabel/ ←/ getMaxLabel/ (/ M/ )/ // // 〈/ 1/ 〉/ 8/ ./ if/ (/ currentLabel/ !/ =/ MaxLabel/ )/ // // 〈/ 2/ 〉/ 9/ ./ lastLabel/ ←/ currentLabel10/ ./ currentLabel/ ←/ maxLabel11/ ./ else12/ ./ voteToHalt/ (/ )/ 13/ ./ else14/ ./ p/ ←/ getRandomProbability/ (/ )/ 15T/ ←/ getAllNeighbors/ (/ )/ // // 所有/ 邻居/ 节点/ 16/ ./ if/ (/ p/ >/ q/ )/ 17/ ./ M/ ←/ createMessages/ (/ currentLabel/ ,/ T/ )/ 18/ ./ else19/ ./ M/ ←/ createMessages/ (/ lastLabel/ ,/ T/ )/ 20/ ./ formiinM21/ ./ send/ (/ mi/ )/ 这里/ 对/ PLPA/ 算法/ 进行/ 如下/ 说明/ :/ 首先/ ,/ 利用/ Pregel/ 模型/ 中/ 的/ 两个/ 超级/ 步来/ 完成/ 原始/ LPA/ 算法/ 中/ 的/ 一次/ 迭代/ 过程/ ./ 其中/ 第/ 1/ 个/ 超级/ 步/ 完成/ 核心/ 计算/ 任务/ ,/ 即/ 获取/ 周围/ 邻居/ 中个/ 数最多/ 的/ 标签/ 值/ ,/ 见/ 算法/ 第/ 3/ ~/ 12/ 行/ ./ 而/ 第/ 2/ 个/ 超级/ 步/ 需要/ 完成/ 异步/ 标签/ 策略/ ,/ 即/ 通过/ 比较/ 随机/ 概率/ 值/ p/ (/ 0/ </ p/ </ 1/ )/ 与/ 异步/ 程度/ q/ 来/ 决定/ 节点/ 发送/ 的/ 标签/ 值/ ,/ 这样/ 就/ 可以/ 保证/ 在/ 下/ 一个/ 超级/ 步中/ 其/ 相邻/ 节点/ 可以/ 按照/ 式/ (/ 1/ )/ 来/ 计算/ 自身/ 的/ 标签/ 值/ ,/ 见/ 算法/ 14/ ~/ 19/ 行/ ./ 其次/ ,/ 虽然/ 给出/ 的/ PLPA/ 算法/ 遵循/ 了/ 原始/ LPA/ 算法/ 给出/ 的/ 终止/ 条件/ (/ 见/ 算法/ 第/ 8/ ~/ 9/ 行/ )/ ,/ 但/ 根据/ 文献/ [/ 12/ ]/ 中/ 的/ 相关/ 描述/ 及/ 实验/ 证明/ ,/ 算法/ 只/ 需/ 迭代/ 5/ 次/ 以上/ 即可/ 保证/ 至少/ 95/ %/ 的/ 节点/ 被/ 标记/ 为/ 正确/ 的/ 标签/ 值/ ./ 因此/ 在/ 实际/ 的/ 应用/ 中/ ,/ 我们/ 可以/ 将/ 迭代/ 次数/ 是否/ 超过/ 设定/ 阈值/ 作为/ 算法/ 结束/ 的/ 条件/ ,/ 而/ 本文/ 将会/ 在/ 第/ 6/ 节/ 实验/ 部分/ 分析/ 不同/ 的/ 迭代/ 次数/ 对/ 算法/ 所/ 产生/ 的/ 影响/ ./ 5OSN/ 蠕虫/ 抑制/ 方法/ 本/ 节/ 介绍/ 在/ PLPA/ 算法/ 基础/ 上/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ ./ 首先/ ,/ 依据/ 不同/ 的/ 度量/ 方法/ ,/ 提出/ 了/ 3/ 种/ 社团/ 关键/ 节点/ 的/ 选取/ 策略/ ;/ 其次/ ,/ 给出/ 了/ 基于/ 社团/ 并行/ 发现/ 的/ OSN/ 蠕虫/ 抑制/ 算法/ 及/ 相关/ 说明/ ./ 5.1/ 关键/ 节点/ 选取/ 策略/ 由于/ 在/ 基于/ 社团/ 结构/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ 中/ ,/ 除了/ 社团/ 发现/ 算法/ 的/ 效率/ 以外/ ,/ 不同/ 的/ 关键/ 节点/ 选取/ 策略/ 同样/ 会/ 影响/ OSN/ 蠕虫/ 的/ 抑制/ 效果/ ./ 下面/ 首先/ 给出/ 本文/ 以/ 节点/ 度数/ 为/ 度量/ 值/ 的/ 关键/ 节点/ 的/ 形式化/ 定义/ ./ 假定/ 社交/ 网络/ G/ 由/ n/ 个/ 非/ 重叠/ 社团/ Ci/ 组成/ ,/ 即/ G/ =/ ∪/ ni/ =/ 1Ci/ ./ 此外/ ,/ 用/ |/ Vi/ 本/ 社团/ 内/ 其他/ 节点/ 的/ 连接数/ ,/ 亦/ 称/ 内部/ 节点/ 度数/ ;/ 用/ j/ |/ Out/ 表示/ 社团/ Ci/ 中/ 的/ 节点/ Vi/ |/ Vi/ 连接/ 的/ 度数/ ,/ 亦/ 称/ 外部/ 节点/ 度数/ ;/ 用/ |/ ViCi/ 中/ 的/ 节点/ Vi/ 节点/ 外部/ 度数/ 和/ 内部/ 度数/ 之/ 和/ ./ 其/ 最大/ 度数/ 节点/ ,/ 当且/ 仅/ 当/ 满足/ 如下/ 条件/ :/ 定义/ 1/ ./ 最大/ 度数/ 节点/ ./ 在/ 社团/ Ci/ 中/ ,/ 称/ Vi/ 定义/ 2/ ./ 最大/ 内部/ 度数/ 节点/ ./ 在/ 社团/ Ci/ 中/ ,/ 称/ MaxIn/ 是/ 其/ 最大/ 内部/ 度数/ 节点/ ,/ 当且/ 仅/ 当/ 其/ 满足/ 如下/ Vi/ 条件/ :/ 定义/ 3/ ./ 最大/ 外部/ 度数/ 节点/ ./ 在/ 社团/ Ci/ 中/ ,/ 称/ MaxOut/ 是/ 其/ 最大/ 外部/ 度数/ 节点/ ,/ 当且/ 仅/ 当/ 其/ 满足/ 如/ Vi/ 下/ 条件/ :/ 的/ 关键/ 节点/ 选取/ 策略/ 及/ 相关/ 说明/ :/ 基于/ 以上/ 3/ 个/ 定义/ ,/ 本文/ 给出/ 了/ 如下/ 3/ 种/ 不同/ (/ 1/ )/ Max/ 策略/ ./ 在/ OSN/ 蠕虫/ 爆发/ 时/ ,/ 优先/ 选取/ 每/ 一个/ 社团/ 中/ 最大/ 度数/ 节点/ VMax/ ./ 该类/ 节点/ 是/ 拥有/ 最/ 多/ 邻居/ 的/ 节点/ ,/ 而/ 邻居/ 节点/ 既/ 可以/ 是/ 同一/ 社团/ 节点/ 也/ 可以/ 是/ 不同/ 社团/ 中/ 的/ 节点/ ./ 该/ 选取/ 策略/ 主要/ 是/ 基于/ 贪心/ 思想/ ,/ 即/ 优先/ 免疫/ 局部/ 传播/ 能力/ 最强/ 的/ 节点/ ./ (/ 2/ )/ MaxIn/ 策略/ ./ 在/ OSN/ 蠕虫/ 爆发/ 时/ ,/ 优先/ 选取/ 社团/ 中/ 最大/ 内部/ 度数/ 节点/ VMaxIn/ ./ 该类/ 节点/ 是/ 在/ 社团/ 中/ 拥有/ 和/ 本/ 社团/ 内部/ 其他/ 节点/ 链接/ 最多/ 的/ 节点/ ,/ 选取/ 该类/ 节点/ 是/ 基于/ 局部/ 的/ 考虑/ ,/ 因为/ 该类/ 节点/ 免疫/ 后/ 其/ 可以/ 以/ 最快/ 的/ 速度/ 对本/ 社团/ 内/ 其他/ 节点/ 进行/ 免疫/ ,/ 从而/ 抑制/ OSN/ 蠕虫/ 在/ 本/ 社团/ 内/ 的/ 传播/ ./ (/ 3/ )/ MaxOut/ 策略/ ./ 在/ OSN/ 蠕虫/ 爆发/ 时/ ,/ 优先/ 选取/ 社团/ 中/ 最大/ 外部/ 度数/ 节点/ VMaxOut/ ./ 该类/ 节点/ 是/ Page7/ 在/ 社团/ 中/ 拥有/ 和/ 外部/ 其他/ 社团/ 连接/ 最多/ 的/ 节点/ ,/ 选取/ 该类/ 节点/ 主要/ 是从/ 如下/ 两个/ 方面/ 考虑/ :/ 首先/ ,/ 其/ 可以/ 有效/ 防止/ 外部/ 社团/ 中/ 的/ OSN/ 蠕虫/ 向/ 该/ 社团/ 传播/ ;/ 其次/ ,/ 该类/ 节点/ 可以/ 最大/ 程度/ 抑制/ 社团/ 内部/ 的/ OSN/ 蠕虫/ 向/ 外扩散/ ./ 假设/ 在/ 图/ 3/ 所示/ 的/ 结构/ 中/ ,/ 虚/ 线框/ 表示/ 社团/ 结构/ S/ ,/ 则/ 节点/ A/ 即为/ VMax/ 节点/ ,/ 节点/ B/ 为/ VMaxIn/ 节点/ ,/ 而/ 节点/ C/ 则/ 是/ VMaxOut/ 节点/ ./ 尽管/ 在/ 多数/ 情况/ 中/ ,/ VMax/ 节点/ 和/ VMaxIn/ 节点/ 以及/ VMaxOut/ 节点/ 有/ 可能/ 是/ 同一个/ 节点/ ,/ 但/ 在/ 图/ 3/ 所示/ 的/ 社团/ 结构/ 中/ ,/ VMax/ 节点/ 并/ 不是/ VMaxOut/ 节点/ ,/ 同时/ 也/ 不是/ VMaxIn/ ./ 以上/ 情况/ 正是/ 本文/ 提出/ 3/ 种/ 不同/ 选取/ 策略/ 的/ 主要/ 原因/ ./ 5.2/ OSN/ 蠕虫/ 抑制/ 算法/ 当/ 通过/ PLPA/ 算法/ 获取/ 到/ 当前/ OSN/ 的/ 社团/ 结构/ 后/ ,/ 根据/ 上/ 一/ 小节/ 给出/ 的/ 3/ 类/ 选取/ 策略/ ,/ 我们/ 给出/ 本文/ 的/ OSN/ 蠕虫/ 抑制/ 算法/ ./ 算法/ 2/ ./ OSN/ 蠕虫/ 抑制/ 算法/ ./ 输入/ :/ 关系/ 集合/ E/ ,/ 社团/ 结构/ C/ =/ {/ Ci/ }/ ,/ 选取/ 策略/ P/ 输出/ :/ 关键/ 节点/ 集合/ S1/ ./ S/ ←/ / 2/ ./ forCiinC3/ ./ if/ (/ P/ 为/ Max/ 策略/ )/ 4/ ./ v/ ←/ get/ _/ max/ (/ Ci/ ,/ E/ )/ 5/ ./ elseif/ (/ P/ 为/ MaxIn/ 策略/ )/ 6/ ./ v/ ←/ get/ _/ max/ _/ in/ (/ Ci/ ,/ E/ )/ 图/ 4/ 实验/ 环境/ 7/ ./ else8/ ./ v/ ←/ get/ _/ max/ _/ out/ (/ Ci/ ,/ E/ )/ 9/ ./ if/ (/ v/ !/ =/ NULL/ )/ 10/ ./ S/ ./ add/ (/ v/ )/ 11/ ./ forvinS12/ ./ 向/ v/ 下发/ 免疫/ 通告/ 或者/ 修复/ 补丁/ 13/ ./ v/ 免疫/ 后/ 向/ 其/ 邻居/ 扩散/ 通告/ 或/ 补丁/ 14/ ./ returnS/ 这里/ 对于/ 算法/ 2/ 进行/ 如下/ 补充/ 说明/ :/ 首先/ ,/ 由于/ 在/ get/ _/ max/ _/ / 方法/ 中/ 需要/ 以/ 原始/ 大规模/ 关系/ 集合/ E/ 作为/ 参数/ 来/ 进行/ 处理/ ,/ 因此/ 本文/ 仍然/ 采取/ MapReduce/ 技术/ 来/ 高效/ 提取/ 不同/ 策略/ 下/ 的/ 关键/ 节点/ ./ 这里/ 我们/ 以/ MaxOut/ 策略/ 为例/ 介绍/ 提取/ 思路/ ./ 假设/ 关系/ 集合/ E/ 中/ 的/ 每/ 一条/ 关系/ 已/ 根据/ 社团/ 结构/ 初始化/ 为/ 〈/ vi/ -/ Ci/ ,/ vj/ -/ Cj/ 〉/ 格式/ ./ 在/ Mapper/ 方法/ 中/ 需要/ 判断/ 两个/ 节点/ 是否/ 被/ 赋予/ 不同/ 的/ 标签/ 值/ ./ 因此/ ,/ 若/ 不同/ 则/ 输出/ 〈/ vi/ -/ Ci/ ,/ 1/ 〉/ 和/ 〈/ vj/ -/ Cj/ ,/ 1/ 〉/ ,/ 否则/ 输出/ 〈/ vi/ -/ Ci/ ,/ 0/ 〉/ 和/ 〈/ vj/ -/ Cj/ ,/ 0/ 〉/ ./ 在/ Reducer/ 方法/ 中则/ 累计/ 每/ 一个/ 节点/ 相应/ 的/ 所有/ 值/ 并/ 按照/ 最终/ 结果/ 进行/ 排序/ 进而/ 可以/ 得到/ 任意/ 社团/ 中/ MaxOut/ 策略/ 下/ 的/ 关键/ 节点/ ./ 其次/ ,/ 由于/ 在/ 大规模/ 网络/ 中/ 获取/ 到/ 的/ 关键/ 节点/ 数量/ 仍然/ 有/ 可能/ 较/ 多/ ,/ 因此/ 在/ 实际/ 免疫/ 的/ 过程/ 中/ 可以/ 只/ 选取/ 部分/ (/ 一定/ 比例/ )/ 关键/ 节点/ 进行/ 免疫/ 同样/ 可/ 获得/ 较/ 好/ 的/ 抑制/ 效果/ ,/ 而/ 本文/ 将会/ 在/ 第/ 6/ 节/ 最后/ 的/ 实验/ 部分/ 给出/ 不同/ 比例/ 下/ 的/ 抑制/ 情况/ ./ 6/ 实验/ 分析/ 6.1/ 实验/ 环境/ 为了/ 验证/ 本文/ 所/ 提出/ 的/ 社团/ 并行/ 发现/ 算法/ 的/ 高效/ 可扩展性/ 以及/ 相应/ 的/ OSN/ 蠕虫/ 抑制/ 策略/ 的/ 有效性/ ,/ 我们/ 搭建/ 了/ 分布式计算/ 实验/ 环境/ ,/ 如图/ 4/ 所示/ ./ Page8/ 其中/ ,/ 最底层/ 的/ 硬件/ 节点/ 集群/ 是/ 由/ 2/ 台/ 高性能/ DellR910/ 服务器/ 通过/ 开源/ 虚拟化/ 软件/ OracleVirtualBox/ 来/ 完成/ ;/ 中间层/ 则/ 是/ 我们/ 利用/ Apache/ 开源/ 项目/ 来/ 搭建/ 的/ 分布式/ 软件/ 计算/ 及/ 存储/ 环境/ ,/ 主要/ 包括/ 了/ 用于/ 社团/ 并行/ 发现/ 的/ Pregel/ 技术/ 的/ 开源/ 实现/ —/ —/ —/ Hama/ 项目/ 以及/ 用于/ 蠕虫/ 仿真/ 的/ MapReduce/ 技术/ 的/ 开源/ 实现/ —/ —/ —/ Hadoop/ 项目/ (/ 图中/ HDFS/ 和/ HMR/ 是/ 该/ 项目/ 中/ 的/ 两个/ 子项目/ )/ ;/ 而/ 最上层/ 则/ 是/ 本文/ 所/ 进行/ 的/ 实验/ ,/ 包括/ 社团/ 并行/ 发现/ 和/ OSN/ 蠕虫/ 传播/ 抑制/ 仿真/ ./ 本文/ 在/ 进行/ 仿真/ 实验/ 时/ 利用/ 了/ 作者/ 之前/ 提出/ 的/ 基于/ MapReduce/ 的/ 大规模/ OSN/ 蠕虫/ 传播/ 仿真/ 平台/ [/ 27/ ]/ ,/ 并/ 通过/ 扩展/ 原有/ 仿真/ 功能/ ,/ 使/ 其/ 在/ 提供/ 抑制/ 策略/ 的/ 条件/ 下/ 能够/ 进行/ 蠕虫/ 传播/ 抑制/ 的/ 仿真/ 实验/ ./ 具体来说/ ,/ 本文/ 在/ 已/ 获取/ 到/ 的/ OSN/ 社团/ 结构/ 的/ 基础/ 上/ ,/ 增加/ 了/ 单个/ 的/ 节点/ 免疫/ 功能/ :/ 即/ 当/ 已/ 感染/ 或者/ 未感染/ 节点/ 接收/ 到/ 免疫/ 或者/ 修复/ 补丁/ 后/ ,/ 我们/ 设定/ 该/ 节点/ 从此/ 不会/ 再/ 被/ 蠕虫/ 感染/ ,/ 并且/ 其/ 也/ 会/ 主动/ 向/ 周围/ 邻居/ 节点/ 进行/ 补丁/ 下发/ ,/ 而/ 当/ 节点/ 收到/ 补丁/ 后/ 即/ 被/ 标记/ 为/ 免疫/ 状态/ ./ 6.2/ 数据/ 集/ 为了/ 保证/ 仿真/ 实验/ 的/ 有效性/ 和/ 真实性/ ,/ 我们/ 在/ 实验/ 过程/ 中/ 采用/ 由/ 文献/ [/ 28/ ]/ 提供/ 的/ 两组/ 真实/ 且/ 具有/ 上百万/ 节点/ 规模/ 的/ OSN/ 用户/ 关系数据/ ,/ 包括/ 流行/ 的/ 视频/ 分享/ 社交/ 网站/ YouTube/ 以及/ 图片/ 分享/ 社交/ 网站/ Flickr/ ./ 这/ 两组/ 关系数据/ 的/ 相关/ 特征参数/ 如表/ 1/ 所示/ ./ 可以/ 看出/ ,/ 本文/ 所/ 选用/ 数据/ 集都/ 具有/ 较/ 小/ 特征/ 路径/ 长度/ 和/ 较大/ 聚集/ 系数/ ①/ ./ 这些/ 特点/ 反映/ 出/ 了/ OSN/ 网络/ 所/ 具有/ 的/ 小/ 世界/ 特性/ [/ 1/ ]/ ,/ 同时/ 这些/ 特性/ 很大/ 程度/ 上/ 有利于/ OSN/ 蠕虫/ 在/ 整个/ 网络/ 中/ 的/ 快速/ 传播/ ./ 具体来说/ ,/ 较/ 小/ 的/ 特征/ 路径/ 意味着/ 网络/ 中/ 任意/ 两个/ 节点/ 之间/ 拥有/ 较/ 小/ 的/ 距离/ ,/ 因此/ 能够/ 使得/ 蠕虫/ 在/ 较/ 短时间/ 从/ 初始/ 感染/ 节点/ 传播/ 到/ 网络/ 中/ 的/ 任意/ 节点/ ;/ 而/ 较大/ 的/ 聚集/ 系数/ 则/ 意味着/ 网络/ 中/ 的/ 相邻/ 节点/ 的/ 朋友/ 关系/ 拥有/ 较大/ 的/ 重叠/ 性/ ,/ 即/ “/ 朋友/ 的/ 朋友/ 仍然/ 是/ 朋友/ ”/ ,/ 该/ 特性/ 提高/ 了/ 蠕虫/ 感染/ 用户/ 好友/ 的/ 概率/ ,/ 进而/ 加快/ 了/ 其/ 在/ 整个/ 网络/ 中/ 的/ 传播速度/ ./ 名称/ 节点/ 数边数/ 特征/ 路径/ 聚合/ 系数/ YouTube115782749453825/ ./ 10.136/ Flickr1846198226139815/ ./ 70.313/ 此外/ ,/ 我们/ 还/ 分析/ 了/ 这/ 两个/ 数据/ 集中/ 节点/ 度数/ 分布/ 情况/ ./ 在/ 图/ 5/ 中/ ,/ 我们/ 给出/ 了/ 该/ 数据/ 集中/ 节点/ 度数/ 分布/ 的/ 双/ 对数/ 图/ (/ log/ -/ logplot/ )/ ./ 可以/ 看出/ 两组/ 数据/ 集/ 的/ 节点/ 度数/ 均/ 满足/ 幂率/ 分布/ 的/ 特点/ ,/ 该/ 特点/ 也/ 反映/ 了/ 真实/ 网络/ 中/ 的/ 无/ 标度/ 特性/ [/ 2/ ]/ ,/ 即/ 大部分/ 节点/ 只/ 拥有/ 较/ 少/ 邻居/ 节点/ ,/ 而/ 少部分/ 节点/ 拥有/ 较/ 多/ 邻居/ 节点/ ./ 该/ 特性/ 意味着/ 如果/ OSN/ 蠕虫/ 能够/ 成功/ 感染/ 后者/ ,/ 则/ 其/ 能够/ 在/ 短时间/ 内/ 感染/ 网络/ 中/ 的/ 大部分/ 节点/ ./ 而/ 这/ 也/ 解释/ 了/ HelloSamy/ 蠕虫/ 为何/ 能/ 通过/ 感染/ 微博中/ 明星/ 账号/ 的/ 方式/ 在/ 15/ 分钟/ 内/ 感染/ 上万/ 用户/ 的/ 原因/ ./ 6.3/ 实验/ 结果/ 及/ 分析/ 6.3/ ./ 1/ 社团/ 发现/ 效果/ 为了/ 检验/ PLPA/ 算法/ 处理/ 大规模/ 网络/ 数据/ 时/ 的/ 效率/ ,/ 本文/ 针对/ 该/ 算法/ 进行/ 了/ 可扩展性/ 和/ 有效性/ 实验/ ./ 其中/ ,/ 可扩展性/ 实验/ 主要/ 通过/ 在/ 不同/ 节点/ (/ CPU/ 核数/ )/ 的/ 条件/ 下/ 观察/ 算法/ 运行/ 时间/ 来/ 进行/ ,/ 而/ 有效性/ 实验/ 则/ 是/ 通过观察/ 算法/ 在/ 不同/ 条件/ 下/ 的/ 运行/ 结果/ (/ 即/ 社团/ 划分/ 的/ 真实性/ )/ 来/ 完成/ ./ 首先/ ,/ 在/ 实际/ 进行/ 可扩展性/ 实验/ 过程/ 中/ ,/ 一方面/ 通过/ 增加/ 运算/ 节点/ 数来/ 观察/ 算法/ 运行/ 时间/ ;/ 另一方面/ 还/ 通过/ 增加/ 单个/ 节点/ 的/ CPU/ 核数/ 来/ 观察/ 其/ 运行/ 情况/ ./ 图/ 6/ 给出/ 我们/ 在/ 两组/ 数据/ 集上/ 的/ 运行/ 结果/ ,/ 其/ ①/ 关于/ 特征/ 路径/ 、/ 聚集/ 系数/ 的/ 定义/ 和/ 计算方法/ 可/ 参见/ 文献/ [/ 1/ ]/ Page9/ 中/ 实验/ 结果/ 是/ 进行/ 10/ 次/ 重复性/ 实验/ 后/ 的/ 平均值/ ./ 其中/ 图/ 6/ (/ a/ )/ 中/ 显示/ 了/ 在/ YouTube/ 数据/ 集上/ 的/ 实际/ 情况/ ./ 可以/ 看出/ 当/ 投入/ 的/ 工作/ 节点/ 数从/ 5/ 增加/ 到/ 30/ 时/ ,/ 单核/ 运算/ 时间/ 已经/ 减少/ 至/ 原来/ 的/ 1/ // 6/ ,/ 而/ 双核/ 运算/ 时间/ 减少/ 至/ 原来/ 的/ 1/ // 3/ ./ 从图/ 6/ (/ b/ )/ 中/ 也/ 可/ 看到/ 节点/ 数从/ 5/ 增加/ 到/ 30/ 时/ ,/ 单核/ 运算/ 时间/ 缩减/ 至/ 原来/ 的/ 1/ // 4/ ,/ 而/ 双核/ 情况/ 下/ 时间/ 减少/ 1/ // 2/ ./ 通过/ 以上/ 分析/ 可以/ 看出/ ,/ 本文/ 提出/ 的/ PLPA/ 算法/ 具有/ 较/ 好/ 的/ 可扩展性/ ,/ 即/ 能够/ 通过/ 简单/ 的/ 增加/ 运算/ 节点/ 数/ (/ CPU/ 核数/ )/ 来/ 加快/ 算法/ 的/ 运行/ 时间/ ./ 但/ 需要/ 说明/ 的/ 是/ ,/ 从图/ 6/ (/ a/ )/ 和/ 图/ 6/ (/ b/ )/ 可以/ 看出/ ,/ 对/ 规模/ 一定/ 的/ 数据/ ,/ 当/ 投入/ 节点/ 数/ 或/ CPU/ 核数/ 过/ 多/ ,/ 例如/ 两图/ 中/ 节点/ 数/ 超过/ 30/ 时/ 的/ 情况/ ,/ 反而/ 会/ 导致/ 算法/ 运行/ 时间/ 回升/ ./ 分析/ 其/ 主要/ 原因/ 在于/ ,/ 此时/ 较/ 多/ 的/ 时间/ 将会/ 浪费/ 在/ 分布式/ 环境/ 下/ 的/ 资源/ 同步/ 及/ 节点/ 间/ 网络通信/ 等/ 非核心/ 计算/ 任务/ 中/ ./ 而/ 类似/ 问题/ 在/ 其他/ 分布式计算/ 问题/ [/ 27/ ,/ 29/ ]/ 中/ 也/ 均/ 有/ 出现/ ./ 因此/ ,/ 在/ 实际/ 计算/ 过程/ 中/ ,/ 我们/ 需要/ 根据/ 待处理/ 数据/ 的/ 规模/ 来/ 分配/ 合理/ 的/ 计算/ 节点/ 数目/ ,/ 以/ 达到/ 最优/ 效果/ ,/ 同时/ 也/ 应该/ 避免/ 因/ 投入/ 硬件/ 设备/ 过多/ 而/ 导致/ 时间/ 回升/ 问题/ ./ 接下来/ ,/ 本文/ 在/ 上述/ 可扩展性/ 实验/ 中/ 获得/ 最好/ 效果/ 的/ 条件/ 下/ ,/ 即/ 在/ 30/ 个/ 计算/ 节点/ 的/ 环境/ 中/ 进行/ PLPA/ 算法/ 的/ 有效性/ 实验/ ./ 根据/ PLPA/ 算法/ 的/ 特点/ 知道/ ,/ 对/ 算法/ 结果/ 可能/ 产生/ 影响/ 的/ 因素/ 包括/ 算法/ 自身/ 的/ 异步/ 程度/ 以及/ 实际/ 迭代/ 的/ 次数/ ./ 因此/ ,/ 本文/ 对/ 这/ 两个/ 因素/ 影响/ 程度/ 进行/ 了/ 具体/ 的/ 实验/ 比较/ ,/ 最终/ 结果/ 如图/ 7/ 所示/ ./ 需要/ 说明/ 的/ 是/ ,/ 为了/ 度量/ 算法/ 的/ 有效性/ ,/ 本文/ 选取/ 目前/ 流行/ 的/ 模块性/ (/ Modularity/ )/ 度量/ 值/ [/ 11/ ]/ ,/ 其/ 相关/ 计算公式/ 可/ 参见/ 文献/ [/ 11/ ]/ ./ 在/ 文献/ 中/ ,/ 作者/ 明确指出/ 当/ 模块性/ 度量/ 值/ 大于/ 0.3/ 时/ ,/ 即可/ 说明/ 算法/ 结果/ 能够/ 较/ 好/ 地/ 反映/ 网络/ 的/ 社团/ 结构/ ./ 图/ 7/ (/ a/ )/ 反映/ 了/ 不同/ 的/ 异步/ 程度/ 对/ 算法/ 结果/ 的/ 影响/ ./ 可以/ 看出/ ,/ 当/ 异步/ 程度/ 在/ (/ 0/ ,/ 1/ )/ 之间/ 时/ ,/ 算法/ 在/ YouTube/ 数据/ 集上/ 运行/ 结果/ 具有/ 较大/ 的/ 波动性/ ,/ 而/ 在/ Flickr/ 数据/ 集上/ 基本/ 保持稳定/ ./ 其/ 原因/ 在于/ 前者/ 相对/ 于/ 后者/ 本身/ 的/ 聚集/ 系数/ 较/ 低/ ,/ 如/ 6.2/ 节表/ 1/ 所示/ ,/ 由于/ 其/ 自身/ 真实/ 的/ 社团/ 结构/ 并/ 不/ 明显/ ,/ 进而/ 造成/ 不同/ 的/ 异步/ 程度/ 会/ 对/ 其/ 造成/ 较大/ 的/ 影响/ ./ 而/ 对于/ 聚集/ 系数/ 较大/ 的/ Flickr/ 数据/ 集/ ,/ 由于/ 其/ 自身/ 的/ 社团/ 结构/ 比较/ 明显/ ,/ 因此/ 异步/ 程度/ 的/ 取值/ 对/ 其/ 影响/ 效果/ 不大/ ./ 此外/ ,/ 从图/ 7/ (/ a/ )/ 中/ 还/ 可以/ 看出/ ,/ 当/ 异步/ 程度/ 为/ 0/ (/ 同步/ 策略/ )/ 或者/ 1/ (/ 完全/ 异步/ 策略/ )/ 时/ ,/ 模块性/ 度量/ 值/ 急剧下降/ ./ 因此/ ,/ 虽然/ 在/ 原始/ 算法/ 中/ 并/ 没有/ 对/ 异步/ 程度/ 值/ 的/ 选取/ 进行/ 任何/ 限制/ ,/ 但/ 通过/ 实验/ 可以/ 反映/ 出/ 在/ 实际/ 应用/ 中/ 应当/ 将/ 其/ 控制/ 在/ (/ 0/ ,/ 1/ )/ 之间/ ./ 图/ 7/ (/ b/ )/ 给出/ 的/ 是/ PLPA/ 算法/ 在/ 不同/ 的/ 迭代/ 次数/ 下/ 所/ 产生/ 的/ 结果/ ./ 从图/ 中/ 可以/ 看出/ ,/ 正如/ 第/ 4.2/ 小节/ 关于/ PLPA/ 算法/ 描述/ 的/ 那样/ ,/ 当/ 迭代/ 次数/ 大于/ 5/ 时/ ,/ 算法/ 所/ 获取/ 到/ 的/ 社团/ 结构/ 的/ 模块性/ 度量/ 值/ 基本/ 保持/ 不变/ ,/ 即/ 在/ YouTube/ 数据/ 集上/ 保持/ 在/ 0.3/ 左/ Page10/ 右/ ,/ 而/ 在/ Flickr/ 数据/ 集上/ 保持/ 在/ 0.5/ 左右/ ./ 因此/ ,/ 我们/ 通过/ 实验/ 再次/ 证明/ 了/ 基于/ 标签/ 传播/ 的/ 社团/ 发现/ 算法/ 只/ 需要/ 迭代/ 较少/ 的/ 次数/ 即可/ 对/ 大多数/ 节点/ 进行/ 正确/ 的/ 社团/ 标记/ ,/ 也/ 说明/ 了/ 该/ 算法/ 能够/ 以较/ 快/ 的/ 速度/ 完成/ 社团/ 发现/ 任务/ ./ 通过/ 以上/ 对/ 可扩展性/ 实验/ 以及/ 有效性/ 实验/ 的/ 结果/ 分析/ ,/ 可以/ 看出/ ,/ 一方面/ 本文/ 通过/ 提出/ PLPA/ 算法/ 解决/ 了/ 现有/ 算法/ 的/ 可扩展性/ 问题/ ,/ 使/ 其/ 能够/ 在/ 大规模/ 网络/ 中/ 进行/ 社团/ 结构/ 的/ 发现/ ;/ 另一方面/ ,/ 由于/ PLPA/ 算法/ 在/ 处理/ 节点/ 标签/ 时/ ,/ 是/ 面向/ 节点/ 为/ 中心/ 的/ 计算/ 过程/ ,/ 因此/ 其本质/ 上/ 仍然/ 是/ 按照/ LPA/ 算法/ 来/ 进行/ 标签/ 计算/ 的/ ,/ 故其/ 能够/ 保留/ 原始/ 算法/ 只/ 需要/ 较/ 少/ 迭代/ 次数/ 即可/ 完成/ 社团/ 结构/ 划分/ 的/ 优点/ [/ 12/ ,/ 30/ ]/ ,/ 这/ 也/ 为/ 本文/ 算法/ 能够/ 在/ 大规模/ 网络/ 中/ 高效/ 完成/ 社团/ 发现/ 提供/ 了/ 有力/ 的/ 实验/ 证明/ ./ 6.3/ ./ 2OSN/ 蠕虫/ 抑制/ 效果/ 为了/ 验证/ 本文/ 提出/ 的/ 基于/ 社团/ 并行/ 发现/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ 的/ 有效性/ ,/ 本文/ 进行/ 了/ 两类/ 蠕虫/ 传播/ 抑制/ 仿真/ 实验/ ./ 其中/ 第/ 1/ 类/ 实验/ 是/ 比较/ 无/ 抑制/ 和/ 采取/ 随机/ 抑制/ 措施/ 时/ 的/ 蠕虫/ 防御/ 效果/ (/ 见图/ 8/ )/ ;/ 第/ 2/ 类/ 实验/ 是/ 基于/ 不同/ 社团/ 发现/ 方法/ 的/ 抑制/ 效果/ 比较/ ,/ 这里/ 本文/ 选择/ 和/ Nguyen/ 等/ 人/ 在/ 小规模/ 网络/ 中/ 使用/ 的/ BGLL/ 算法/ 以及/ Zhu/ 等/ 人/ 使用/ 的/ 图/ 划分/ 方法/ 相/ 比较/ (/ 见图/ 9/ )/ ./ 首先/ ,/ 图/ 8/ 给出/ 了/ 本文/ 基于/ 社团/ 结构/ 中/ 关键/ 节点/ 免疫/ 策略/ 和/ 无/ 抑制/ 及/ 随机/ 策略/ 下/ 的/ 抑制/ 效果/ 比较/ ./ 需要/ 说明/ 的/ 是/ ,/ 参照/ 文献/ [/ 7/ -/ 8/ ]/ 中/ 所/ 提供/ 的/ 实验/ 参数/ ,/ 在/ 实验/ 过程/ 中/ ,/ 我们/ 同样/ 在/ 蠕虫/ 感染率/ 超过/ 2/ %/ 时/ 开始/ 启动/ 蠕虫/ 抑制/ 过程/ ,/ 并且/ 只/ 选取/ 了/ 已/ 发现/ 关键/ 节点/ 中/ 的/ 20/ %/ 作为/ 优先/ 免疫/ 节点/ ./ 从图/ 8/ (/ a/ )/ 和/ (/ b/ )/ 中/ 可以/ 看出/ ,/ 当/ 不/ 采取任何/ 抑制/ 措施/ 时/ ,/ OSN/ 蠕虫/ 将会/ 在/ 15/ 次/ 迭代/ 以后/ 基本上/ 感染/ 网络/ 中/ 的/ 所有/ 节点/ ./ 而/ 采取/ 随机/ 抑制/ 的/ 方式/ 时/ ,/ 虽然/ 能够/ 起到/ 一定/ 的/ 防御/ 措施/ ,/ 但/ 仍然/ 会/ 有/ 大部分/ 用户/ 被/ 感染/ (/ YouTube/ 数据/ 集中/ 50/ %/ 的/ 节点/ ,/ Flickr/ 数据/ 集中/ 40/ %/ 的/ 节点/ )/ ./ 而/ 当/ 我们/ 采取/ 基于/ 社团/ 结构/ 中/ 关键/ 节点/ 的/ 抑制/ 策略/ 时/ ,/ 可以/ 发现/ 在/ 传播/ 过程/ 迭代/ 5/ 次/ 以后/ ,/ 被/ 感染/ 的/ 用户数量/ 基本/ 保持/ 在/ 20/ %/ 左右/ ./ 进而/ 可以/ 反映/ 出/ 基于/ 社团/ 中/ 关键/ 节点/ 的/ 抑制/ 方案/ 能够/ 对/ OSN/ 蠕虫/ 产生/ 较/ 好/ 的/ 防御/ 效果/ ./ 此外/ ,/ 在/ 图/ 8/ (/ a/ )/ 和/ (/ b/ )/ 中/ 的/ 蓝色/ 框中/ ,/ 本文/ 列出/ 了/ 3/ 种/ 关键/ 节点/ 选取/ 策略/ 下/ 最终/ 的/ 具体/ 抑制/ 效果/ ./ 可以/ 看出/ ,/ 在/ 两个/ 不同/ 的/ 数据/ 集中/ ,/ MaxOut/ 策略/ 都/ 取得/ 了/ 最好/ 的/ 抑制/ 效果/ ./ 而/ 对比/ 本文/ 所/ 给出/ 的/ 3/ 种/ 策略/ 的/ 具体/ 描述/ 可以/ 发现/ ,/ 在/ MaxOut/ 策略/ 中/ ,/ 通过/ 选取/ 和/ 其他/ 社团/ 连接/ 数最多/ 的/ 节点/ 进行/ 免疫/ 可以/ 保证/ 尽可能/ 多/ 的/ 社团/ 接收/ 到/ 修复/ 补丁/ ,/ 此外/ 还/ 可以/ 确保/ 本/ 社团/ 内/ 的/ 蠕虫/ 不会/ 轻易/ 传播/ 到/ 其他/ 社团/ 中去/ ./ 而/ 其他/ 两种/ 策略/ 只是/ 保证/ 修复/ 补丁/ 能够/ 以/ 最快/ 的/ 速/ Page11/ 度/ 在/ 本/ 社团/ 内/ 传播/ ,/ 而/ 无法/ 抑制/ 社团/ 间/ 蠕虫/ 的/ 快速/ 传播/ ./ 最后/ ,/ 如图/ 9/ 所示/ ,/ 我们/ 根据/ 文献/ [/ 8/ ]/ 所/ 提供/ 的/ 实验/ 数据/ ,/ 详细/ 比较/ 了/ PLPA/ 算法/ (/ 利用/ MaxOut/ 策略/ )/ 、/ Nguyen/ 等/ 人/ 使用/ 的/ BGLL/ 算法/ 以及/ Zhu/ 等/ 人/ 使用/ 的/ 图/ 划分/ 方法/ 的/ 基础/ 上/ 进行/ OSN/ 蠕虫/ 抑制/ 的/ 最终/ 效果/ ./ 为了/ 保持/ 和/ 文献/ [/ 7/ -/ 8/ ]/ 的/ 一致性/ ,/ 我们/ 在/ 蠕虫/ 感染/ 比例/ 超过/ 2/ %/ 时/ 启动/ 相应/ 的/ 抑制/ 策略/ ./ 此外/ ,/ 考虑/ 到/ 在/ 大规模/ 网络/ 中/ 所/ 发现/ 的/ 社团/ 数量/ 及/ 对应/ 的/ 关键/ 节点/ 数量/ 仍然/ 较/ 多/ ,/ 这里/ 我们/ 通过/ 选取/ 不同/ 比例/ 的/ 免疫/ 节点/ 来/ 进行/ 实际/ 抑制/ 效果/ 的/ 比较/ ./ 首先/ ,/ 从图/ 9/ (/ a/ )/ 和/ (/ b/ )/ 中/ 给出/ 的/ 3/ 种/ 基于/ 社团/ 结构/ 的/ OSN/ 蠕虫/ 抑制/ 效果/ 来看/ ,/ 只/ 需要/ 对/ 部分/ 关键/ 节点/ 进行/ 免疫/ 即可/ 获得/ 较/ 好/ 的/ 抑制/ 效果/ ./ 例如/ ,/ 通过/ 本文/ 提出/ 的/ 抑制/ 方法/ (/ 利用/ MaxOut/ 策略/ )/ 仅/ 免疫/ 20/ %/ 的/ 关键/ 节点/ 即可/ 保证/ 在/ 两组/ 实验/ 中/ 最终/ 的/ 感染/ 比例/ 不/ 超过/ 20/ %/ ,/ 而/ 这/ 一/ 结果/ 也/ 与/ 前/ 文图/ 8/ 所示/ 的/ 两组/ 实验/ 结果/ 保持一致/ ./ 此外/ ,/ 通过/ 两组/ 实验/ 结果/ 也/ 可以/ 看出/ ,/ 即使/ 我们/ 在/ 只/ 选取/ 10/ %/ 的/ 关键/ 节点/ 的/ 条件/ 下/ ,/ 最终/ 的/ 感染/ 比例/ 均/ 不会/ 超过/ 25/ %/ ,/ 因此/ 从/ 另一方面/ 也/ 说明/ 了/ 文本/ 所/ 提出/ 的/ OSN/ 蠕虫/ 抑制/ 方法/ 的/ 有效性/ 和/ 高效性/ ./ 其次/ ,/ 通过/ 以上/ 两组/ 比较/ 实验/ 均/ 可以/ 发现/ ,/ 本文/ 方法/ 的/ 最终/ 抑制/ 效果/ 始终/ 介于/ 其他/ 两种/ 方法/ 之间/ ./ 造成/ 该/ 结果/ 的/ 主要/ 原因/ 在于/ PLPA/ 算法/ 本身/ 所/ 能够/ 发现/ 的/ 社团/ 结构/ 的/ 模块性/ 度量/ 值要/ 小于/ BGLL/ 算法/ 所/ 得到/ 的/ 度量/ 值/ ,/ 但/ 大于/ 基于/ 图/ 划分/ 方法/ 的/ 度量/ 值/ ./ 因此/ ,/ 该/ 实验/ 结果表明/ 为了/ 取得/ 更好/ 的/ OSN/ 蠕虫/ 抑制/ 效果/ ,/ 除了/ 增加/ 社团/ 发现/ 算法/ 的/ 可扩展性/ 以外/ ,/ 增强/ 社团/ 发现/ 的/ 准确度/ 也/ 是/ 十分/ 重要/ 的/ ,/ 而/ 这/ 一部分/ 内容/ 是/ 目前/ 论文/ 的/ 主要/ 弱点/ 问题/ ,/ 同时/ 也/ 将/ 是/ 本文/ 作者/ 下/ 一步/ 研究/ 的/ 重点/ ./ 7/ 总结/ 与/ 展望/ 为了/ 解决/ 现有/ OSN/ 蠕虫/ 抑制/ 方法/ 无法/ 有/ 效应/ 对/ 大规模/ 网络/ 的/ 问题/ ,/ 本文/ 首先/ 提出/ 了/ 基于/ Pregel/ 模型/ 的/ PLPA/ 算法/ ./ 该/ 算法/ 利用/ 分布式计算/ 模型/ 能够/ 有效/ 处理/ 大规模/ 数据/ ,/ 同时/ 还/ 具备/ 了/ 基于/ 标签/ 传播/ 方法/ 的/ 高效性/ ,/ 即/ 通过/ 少量/ 迭代/ 过程/ 即可/ 完成/ 计算/ 任务/ ./ 之后/ ,/ 本文/ 给出/ 了/ 3/ 种/ 不同/ 的/ 社团/ 关键/ 节点/ 的/ 提取策略/ ,/ 并/ 通过/ 对/ 这/ 3/ 种/ 策略/ 下/ 的/ 关键/ 节点/ 进行/ 优先/ 免疫/ 进而/ 达到/ 针对/ OSN/ 蠕虫/ 的/ 快速/ 抑制/ 效果/ ./ 最后/ ,/ 本文/ 通过/ 真实/ 的/ 数据/ 集/ 验证/ 了/ 算法/ 的/ 可扩展性/ 以及/ 抑制/ 方法/ 的/ 有效性/ ./ 在/ 接下来/ 的/ 工作/ 中/ ,/ 我们/ 一方面/ 将/ 继续/ 深入研究/ 能够/ 获得/ 较/ 高/ 模块性/ 度量/ 值/ 的/ 社团/ 并行/ 发现/ 算法/ ,/ 同时/ 还/ 准备/ 将/ Pregel/ 模型/ 应用/ 到/ 已有/ 的/ 重叠/ 社团/ 发现/ 算法/ 中/ ,/ 提出/ 的/ 重叠/ 社团/ 并行/ 发现/ 算法/ 及/ OSN/ 蠕虫/ 抑制/ 方法/ ./ 拟/ 通过/ 选取/ 重叠/ 区内/ 的/ 免疫/ 节点/ 以望/ 获得/ 更好/ 的/ OSN/ 蠕虫/ 抑制/ 效果/ ./ 

