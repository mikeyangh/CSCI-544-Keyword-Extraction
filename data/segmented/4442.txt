Page1/ 基于/ RED/ 的/ 差异/ 型/ 丢/ 包/ 队列/ 管理/ 算法/ 朱海婷/ 丁伟/ (/ 东南大学/ 计算机科学/ 与/ 工程学院/ 南京/ 211189/ )/ (/ 江苏省/ 计算机网络/ 技术/ 重点/ 实验室/ 南京/ 211189/ )/ 摘要/ 网络流量/ 中/ UDP/ 成分/ 的/ 逐渐/ 增加/ 可能/ 导致/ 网络/ 存在/ 拥塞/ 缓解/ 失效/ 的/ 隐患/ ./ 通过/ 引入/ TCP/ 流量/ 与非/ TCP/ 流量/ 的/ 区分/ 丢包/ 互斥/ 机制/ ,/ 使用/ Lotka/ -/ Volterra/ 竞争/ 模型/ 证明/ 在/ 该/ 机制/ 下/ TCP/ 与非/ TCP/ 流量/ 在/ 网络/ 中/ 必然/ 存在/ 平衡点/ ,/ 作者/ 提出/ 基于/ TCP/ 与非/ TCP/ 差异/ 型/ 丢/ 包/ 的/ 队列/ 管理机制/ ./ 该/ 机制/ 依据/ TCP/ 模型/ 推导/ 出/ 的/ TCP/ 协议/ 流量/ 的/ 丢/ 包/ 概率/ ,/ 利用/ 当前/ 缓存/ 队列/ 中/ 的/ TCP/ 和/ 非/ TCP/ 数据包/ 的/ 状态/ ,/ 对/ 不同/ 的/ 传输层/ 协议/ 产生/ 差异/ 型/ 的/ 动态/ 丢包/ 概率/ 以/ 确保/ AQM/ 的/ 稳定性/ 和/ 传输层/ 协议/ 间/ 的/ 公平性/ ./ 关键词/ 拥塞/ 控制/ ;/ 主动/ 队列/ 管理/ ;/ Lotka/ -/ Volterra/ 模型/ ;/ 区分/ 丢包/ 1/ 引言/ 拥塞/ 控制/ 对/ 互联网/ 的/ 稳定/ 运行/ 具有/ 十分/ 重要/ 的/ 意义/ ,/ 其中/ 拥塞/ 控制算法/ 的/ 研究/ 也/ 一直/ 是/ 互联网/ 领域/ 的/ 热点问题/ ./ 一般而言/ ,/ 拥塞/ 控制/ 研究/ 包括/ 在/ 网络/ 边缘/ 设备/ 中/ 使用/ 的/ 源/ 算法/ 和/ 在/ 网络/ 中间/ 节点/ 上/ 使用/ 的/ 链路/ 算法/ 两种/ ./ 源/ 算法/ 的/ 原理/ 是/ 根据/ 反馈/ 信息/ 调整/ 源点/ 端系统/ 的/ 发送/ 速率/ ;/ 链路/ 算法/ 是/ 在/ 网络/ 中间/ 节点/ 上/ 检测/ 拥塞/ ,/ 对/ 拥塞/ 进行/ 反馈/ 并/ 进行/ 相应/ 的/ 响应/ 操作/ ,/ 以/ 缓解/ 拥塞/ ./ 拥塞/ 控制算法/ 需要/ 针对/ 其/ 所在/ 互联网/ 本身/ 的/ 异构/ 复杂性/ 和/ 拥塞/ 控制/ 分布/ 性/ 的/ 特性/ ,/ 还/ 需/ 兼顾/ 拥塞/ 控制算法/ 的/ 性能/ 要求/ ,/ 因此/ 其/ 算法/ 设计/ 有/ 较/ 高难度/ ./ Page2/ 尽管/ 研究者/ 在/ 拥塞/ 控制/ 方向/ 已/ 开展/ 了/ 大量/ 的/ 研究/ 工作/ ,/ 但是/ 到/ 目前为止/ 拥塞/ 控制/ 问题/ 还/ 没有/ 得到/ 完美/ 的/ 解决/ ./ 目前/ 主流/ 的/ 链路/ 拥塞/ 控制算法/ 是/ 主动/ 队列/ 管理/ (/ ActiveQueueManagement/ ,/ AQM/ )/ [/ 1/ -/ 3/ ]/ ,/ 其中/ 得到/ 最/ 广泛/ 认可/ 的/ 随机/ 早期/ 检测/ 算法/ RED/ (/ RandomEarlyDetection/ )/ [/ 4/ ]/ ./ RED/ 是/ IETF/ 推荐/ 的/ 基于/ 中间/ 节点/ 的/ 拥塞/ 避免/ 机制/ ,/ 研究/ 表明/ RED/ 比/ DropTail/ 具有/ 更好/ 的/ 性能/ ,/ 其/ 主要/ 优点/ 是/ 可以/ 降低/ 数据包/ 丢包/ 和/ 降低/ 数据包/ 的/ 经过/ 延迟/ ,/ 同时/ 还/ 可以/ 避免/ “/ 死锁/ ”/ 情况/ 的/ 发生/ [/ 4/ ]/ ./ 虽然/ 已有/ 厂商/ 设备/ 能够/ 支持/ ,/ 但/ 因为/ RED/ 有/ 2/ 个/ 主要/ 的/ 问题/ ,/ 使/ 其/ 至今/ 还/ 没有/ 在/ 互联网/ 中/ 得到/ 广泛/ 的/ 实际/ 使用/ ./ 其一/ 是/ 其/ 性能/ 对/ 算法/ 的/ 参数设置/ 十分/ 敏感/ [/ 5/ ]/ ,/ 其二/ 是/ 在/ 公平性/ 方面/ 有所/ 欠缺/ [/ 6/ ]/ ./ RED/ 会/ 产生/ 不/ 公平/ 现象/ 的/ 主要/ 原因/ 是/ 其/ 平等/ 地/ 看待/ 每个/ 报文/ ./ 这/ 对/ 报文/ 数量/ 少/ 的/ 小流/ 不/ 公平/ ,/ 目前/ 主要/ 的/ 与/ 公平性/ 相关/ 研究/ 工作/ 均/ 从/ 这个/ 角度/ 展开/ [/ 7/ -/ 9/ ]/ ,/ 通过/ 惩罚/ 大流来/ 降低/ 小流/ 报文/ 被/ 丢弃/ 的/ 概率/ ./ 本文/ 的/ 研究/ 也/ 从/ 公平性/ 出发/ ,/ 但/ 考虑/ 的/ 角度/ 是/ 传输层/ 协议/ ./ 目前/ 网络流量/ 中/ TCP/ 和/ UDP/ 是/ 使用率/ 最高/ 的/ 2/ 个/ 传输层/ 协议/ ,/ 根据/ CAIDA/ 公布/ 的/ 数据/ ①/ 和/ 我们/ 在/ CERNET/ 某省/ 网/ 边界/ 的/ 观测/ ②/ 表明/ 二者/ 合计/ 可以/ 占/ 到/ 总流量/ 的/ 98/ %/ 以上/ ./ 很多/ 研究/ 直接/ 或/ 间接/ 地/ 表明/ UDP/ 流量/ 会/ 影响/ TCP/ 传输/ 的/ 通畅/ 程度/ ③/ ,/ 这种/ 影响/ 均是由/ 拥塞/ 导致/ 的/ ,/ 如果/ 在/ 链路/ 拥塞/ 控制算法/ 中/ 平等/ 地/ 看待/ 这/ 两种/ 协议/ ,/ 对/ TCP/ 来说/ 是/ 不/ 公平/ 的/ ,/ 因为/ TCP/ 使用/ 端点/ 拥塞/ 控制算法/ ,/ 而/ UDP/ 不/ 使用/ ./ 关于/ TCP/ 与/ UDP/ 在/ 实际/ 流量/ 中/ 比例/ 方面/ ,/ 文献/ [/ 10/ ]/ 在/ 对/ 国内/ 某/ 运营商/ 的/ 实测/ 数据/ 进行/ 分析/ 的/ 基础/ 上/ 认为/ 从/ 所有/ 角度看/ UDP/ 流量/ 已经/ 占用/ 了/ 全部/ 网络资源/ 的/ 50/ %/ 左右/ ./ 根据/ 我们/ 在/ 本地/ 被/ 管/ 网络/ 上/ 的/ 观测/ ,/ 从/ 2005/ 年/ 到/ 起/ 逐步/ 从/ 5/ %/ 增加/ 至/ 目前/ 的/ 40/ %/ 左右/ ,/ 而/ CAIDA/ 的/ 数据/ 和/ 文献/ [/ 11/ ]/ 认为/ 国外/ 主干/ 上/ UDP/ 的/ 比例/ 在/ 5/ %/ ~/ 20/ %/ 之间/ ./ 文献/ [/ 12/ ]/ 认为/ 以/ PPS/ 为/ 代表/ 的/ 使用/ UDP/ 的/ P2P/ 视频/ 软件/ 是/ 导致/ 国内/ 网络流量/ 中/ UDP/ 比例/ 偏高/ 的/ 原因/ ./ 基于/ 以上/ 的/ 分析/ ,/ 本文/ 提出/ 了/ 一种/ 基于/ RED/ 的/ 改进/ AQM/ 算法/ SF/ -/ RED/ ,/ 其/ 核心思想/ 是/ 在/ 拥塞/ 发生/ 时/ 按/ 不同/ 的/ 方案/ 处理/ TCP/ 和/ UDP/ 报文/ ,/ 来/ 达到/ 总体/ 更加/ 公平/ 的/ 目的/ ./ 算法/ 在/ 设计/ 思路/ 上/ 借鉴/ 了/ 生物学/ 中/ 种群/ 的/ 竞争/ 模型/ ,/ 通过/ 将/ TCP/ 与/ UDP/ 作为/ 争夺/ 相同/ 资源/ (/ 带宽/ )/ 的/ 两种/ 物种/ ,/ 对/ 资源/ 紧缺/ 的/ 情况/ 下/ 二者/ 的/ 竞争/ 关系/ 进行/ 建模/ ./ 在/ 模型/ 基础/ 上/ ,/ 我们/ 给出/ 使用/ 拥塞/ 控制算法/ 合理性/ 的/ 推理/ 证明/ ./ 与/ RED/ 相比/ ,/ SF/ -/ RED/ 算法/ 还/ 通过/ 引入/ 拥塞/ 状态/ 标识/ ,/ 对/ 一次/ 拥塞/ 作为/ 一个/ 过程/ 进行/ 控制/ 和/ 管理/ ,/ 使用/ 动态/ 的/ 参数设置/ 丢/ 包率/ 来/ 缓解/ 与/ RED/ 类似/ 的/ 参数/ 敏感性/ 问题/ ./ 2/ 相关/ 工作/ 2.1/ 基于/ RED/ 的/ AQM/ 算法/ RED/ [/ 4/ ]/ 是/ 最/ 经典/ 的/ AQM/ 算法/ ,/ 也/ 是/ 本文/ 算法/ 工作/ 的/ 基础/ ./ 基于/ RED/ 进行/ 改进/ 的/ 算法/ 较/ 多/ ,/ 具/ 代表性/ 的/ 有/ GRED/ (/ GentleRED/ )/ ④/ 、/ SC/ -/ RED/ [/ 13/ ]/ (/ Self/ -/ ConfiguringRED/ )/ 、/ ARED/ (/ AdaptiveRED/ )/ ⑤/ 等/ ,/ 他们/ 都/ 在/ RED/ 的/ 稳定性/ 方面/ 进行/ 了/ 改进/ ./ 在/ 公平性/ 方面/ ,/ 较/ 早/ 对/ RED/ 做出/ 改进/ 的/ 有/ FRED/ 算法/ [/ 7/ ]/ (/ FlowRED/ )/ ,/ 算法/ 使用/ 各个/ 流在/ 当前/ 队列/ 缓存/ 中所/ 占/ 比例/ 作为/ 丢包/ 判定/ 指标/ ,/ 需要/ 维护/ 单流/ 信息/ ,/ 因而/ 不/ 具备/ 良好/ 的/ 可扩展性/ ./ 后来/ 这方面/ 的/ 研究/ 逐渐/ 转移/ 为/ 无需/ 流/ 信息/ 维护/ 的/ 公平/ AQM/ 算法/ ,/ 其中/ 基于/ RED/ 的/ 算法/ 是/ RED/ -/ PD/ [/ 14/ ]/ ./ RED/ -/ PD/ 算法/ 在/ RED/ 算法/ 基础/ 上/ 加入/ 了/ 对/ 当前/ 丢包/ 的/ 记录/ ,/ 利用/ 丢包/ 记录/ 来/ 判断/ 是否/ 存在/ 过度/ 竞争/ 或者/ 存在/ 非/ 响应/ 的/ 流/ ./ 它/ 利用/ 两个/ 参数/ 作为/ 判断/ 依据/ :/ (/ 1/ )/ 最近/ N/ 次/ 丢/ 包/ 记录/ ;/ (/ 2/ )/ 某个/ 流在/ 这/ N/ 次/ 记录/ 中/ 出现/ 次数/ ./ 若该/ 次数/ 达到/ 预先/ 设定/ 阈值/ ,/ 则/ 判定/ 为/ 过度/ 竞争/ 流/ ,/ 并/ 对/ 其/ 进行/ 惩罚性/ 丢包/ ./ 但/ RED/ -/ PD/ 算法/ 的/ 参数设置/ 对/ 算法/ 效果/ 影响/ 较大/ ,/ 对/ 拥塞/ 响应/ 时间/ 也/ 较长/ ,/ 而且/ 针对/ 短流/ 丢/ 包率/ 较/ 高/ [/ 15/ ]/ ./ 2.2/ 其他/ 改善/ 公平性/ 的/ AQM/ 算法/ 除了/ 在/ RED/ 算法/ 基础/ 上/ 进行/ 公平性/ 的/ 修正/ 外/ ,/ 还有/ 其他/ 一些/ 在/ 公平性/ 上/ 进行/ 改进/ 的/ 拥塞/ 控制算法/ ./ 在/ 不/ 需/ 单流/ 信息/ 的/ 公平/ AQM/ 算法/ 中/ 比较/ 有/ 影响力/ 的/ 包括/ BLACK/ [/ 9/ ]/ 、/ CHOKe/ [/ 8/ ]/ 、/ SFB/ [/ 16/ ]/ 、/ SAC/ [/ 17/ ]/ ①/ ②/ ③/ ④/ ⑤/ loydS/ ,/ GummadiR/ ,/ ShenkerS/ ./ AdaptiveRED/ :/ Analgo/ -/ Page3/ 和/ DCN/ [/ 18/ ]/ 等/ ./ BLACK/ [/ 9/ ]/ 算法/ 通过/ 对/ 缓存/ 队列/ 进行/ 数据包/ 抽样/ ,/ 推断/ 各个/ 数据流/ 在/ 缓存/ 中/ 的/ 占/ 比/ ,/ 从而/ 找出/ 其中/ 的/ 竞争/ 流/ 并/ 进行/ 惩罚/ 处理/ ./ CHOKe/ [/ 8/ ]/ 算法/ 是/ 一个/ 不/ 需要/ 预先/ 判定/ 恶性竞争/ 流/ ,/ 而/ 通过/ 概率/ 方式/ 能/ 实现/ 近似/ 公平/ 的/ AQM/ 算法/ ./ CHOKe/ 算法/ 采用/ FIFO/ 队列/ ,/ 当/ 需要/ 丢/ 包时/ 则/ 从/ 当前/ 缓存/ 队列/ 中/ 随机/ 抽取/ 一个/ 数据包/ ,/ 若该/ 数据包/ 与/ 刚/ 到达/ 的/ 数据包/ 属于/ 同一个/ 流/ ,/ 则/ 同时/ 丢弃/ 这/ 两个/ 数据包/ ;/ 否则/ ,/ 对/ 取出/ 数据包/ 放/ 回/ 队列/ 中/ ,/ 同时/ 对刚/ 到达/ 的/ 数据包/ 进行/ 丢弃/ 判定/ ./ CHOKe/ 算法/ 简单/ 有效/ 而且/ 易于/ 部署/ 和/ 实施/ ,/ 但/ 当流/ 数量/ 增加/ 时/ ,/ 其有/ 算法/ 效性/ 也/ 会/ 下降/ ./ 在/ CHOKe/ 的/ 基础/ 上/ ,/ Jiang/ 等/ 人/ [/ 17/ ]/ 提出/ 了/ SAC/ (/ SelfAdjustableCHOKe/ )/ 算法/ ,/ 其中/ 增加/ 了/ 参数/ 动态/ 调整/ 方案/ ,/ 使得/ CHOKe/ 方法/ 能够/ 适应/ 更/ 多变/ 的/ 网络/ 状况/ ./ Yang/ 等/ 人/ [/ 18/ ]/ 提出/ 了/ AME/ -/ CHOKe/ ,/ 算法/ 针对/ CHOKe/ 中/ 引入/ 多次/ 比较/ 参数/ 的/ 动态/ 设置/ 方案/ ./ Eshete/ 等/ 人/ [/ 19/ ]/ 提出/ gCHOKe/ 算法/ ,/ 在/ CHOKe/ 基础/ 上/ 通过/ 增加/ 对非/ 响应/ 流/ 的/ 惩罚/ 粒度/ 来/ 保护/ 适/ 响应/ 流/ [/ 20/ ]/ ./ WARD/ [/ 21/ ]/ 算法/ 提出/ 的/ 一种/ “/ 无/ 状态/ ”/ 的/ 近似/ 公平/ AQM/ 算法/ ,/ 它/ 通过/ 给/ 队列/ 不同/ 的/ 位置/ 设置/ 不同/ 的/ 权值/ ,/ 量化/ 了/ 各流/ 的/ 实际/ 速率/ 与/ 理想/ (/ 公平/ 状态/ )/ 速率/ 的/ 差异/ ,/ 借此/ 判断/ 是否/ 需要/ 丢包/ ./ SFB/ [/ 16/ ]/ 是/ StochasticFairBLUE/ 的/ 简称/ ,/ 其/ 算法/ 在/ BLUE/ 算法/ 基础/ 上/ 利用/ 多级/ 哈希/ 散列/ 的/ BloomFilter/ ,/ 找出/ 恶性竞争/ 流/ ./ BLUE/ 用/ 数据包/ 的/ 丢失/ 率/ 以及/ 链路/ 带宽/ 利用率/ 而/ 不是/ 队长/ 来/ 衡量/ 链路/ 的/ 状况/ ./ SFB/ 算法/ 对/ 检测/ 出/ 的/ 恶性竞争/ 流/ 仅仅/ 设置/ 一个/ 速率/ 上限/ ./ 但/ 由于/ 在/ 实际/ 环境/ 中/ 可以/ 影响/ 该/ 阀值/ 的/ 因素/ 太/ 多/ ,/ 尚/ 没有/ 合理/ 的/ 计算/ 方案/ ,/ 尤其/ 在/ 流/ 数目/ 增加/ 时/ ,/ SFB/ 算法/ 的/ 性能/ 会/ 下降/ [/ 14/ ]/ ./ DCN/ [/ 18/ ]/ (/ DifferentialCongestionNotification/ )/ 算法/ ,/ 利用/ 互联网/ 中短流/ 的/ 数量/ 占优/ ,/ 而/ 长流/ 的/ 传输数据/ 量/ 占优/ 的/ 特点/ ,/ 算法/ 仅/ 对/ 长流/ 触发/ 拥塞/ 通知/ ,/ 保护/ 短流/ ./ DCN/ 算法/ 仅/ 需要/ 维护/ 少量/ 长流/ 信息/ ,/ 算法/ 实际/ 是/ 使用/ 了/ 较/ 小/ 的/ 代价/ 获得/ 相对/ 合理/ 的/ 网络/ 公平性/ ,/ 同时/ 确保/ 较/ 低/ 的/ 丢/ 包率/ 和/ 较/ 好/ 的/ 链路/ 利用率/ ./ 但/ 在/ 实际/ 网络/ 中/ 大量/ 存在/ 的/ 扫描/ 、/ DDoS/ 攻击/ 等/ 无功/ 甚至/ 有害/ 流量/ 均/ 为/ 短流/ ,/ 因此/ 这个/ 算法/ 不/ 适合/ 在/ 高/ 扫描/ 和/ DDoS/ 攻击/ 的/ 环境/ 下/ 使用/ ./ 另外/ ,/ 借鉴/ 其他/ 思想/ 的/ AQM/ 算法/ 也/ 有/ 推陈出新/ ,/ 如/ 控制论/ 思想/ 的/ PI/ [/ 1/ ]/ 算法/ 、/ REM/ 算法/ [/ 5/ ]/ 、/ 引入/ 虚拟/ 队列/ 概念/ AVQ/ 算法/ [/ 2/ ]/ ./ 但/ 它们/ 在/ 实用/ 方面/ 还/ 存在/ 问题/ ,/ 需要/ 进一步/ 的/ 研究/ ./ 从/ 另外/ 一个/ 视角/ 看/ ,/ 网络/ 中/ 的/ 带宽/ 分配/ 上/ 异质/ 流/ 的/ 公平性/ 问题/ 在/ 上述/ 算法/ 中/ 目前/ 还/ 没有/ 针对性/ 的/ 解决方案/ ./ 在/ 拥塞/ 控制/ 基础/ 工作/ 的/ 机理/ 模型/ 上/ ,/ 对/ TCP/ 协议/ 的/ 传输/ 流量/ 模型/ 等/ ,/ 目前/ 已经/ 有/ 较为/ 深入/ 的/ 研究/ [/ 22/ -/ 24/ ]/ ,/ UDP/ 协议/ 或/ 其他/ 非/ 响应/ 的/ 协议/ 控制/ 和/ 数据流/ 虽然/ 相对/ 简单/ ,/ 但/ 相对/ 应/ 的/ 理论/ 模型/ 目前/ 还有/ 待/ 完善/ ,/ 以/ UDP/ 为/ 代表/ 的/ 非/ 响应/ 流对/ TCP/ 流/ 的/ 影响/ 机理/ 及其/ 网络/ 模型/ 的/ 研究/ 工作/ 仍/ 还有/ 待/ 深入/ ./ 关于/ TCP/ 和/ UDP/ 协议/ 流/ 共存/ 时/ ,/ UDP/ 流对/ TCP/ 流/ 的/ 影响/ 的/ 机理/ 目前/ 还/ 没有/ 相关/ 理论/ 上/ 的/ 深入研究/ [/ 25/ ]/ ,/ 仅/ Song/ 等/ 人/ [/ 26/ ]/ 提出/ 了/ 基于/ 性能/ 测量/ 基础/ 上/ 的/ 高速/ 网络/ 传输层/ 拥塞/ 控制/ 方案/ ./ 3SF/ -/ RED/ 队列/ 管理/ 算法/ 3.1/ RED/ 队列/ 管理/ RED/ [/ 4/ ]/ 的/ 基本/ 思想/ 是/ 通过/ ExponentialWeightedMovingAverage/ (/ EWMA/ )/ 方法/ (/ 具体表现/ 为式/ (/ 1/ )/ )/ ,/ 其中/ wq/ 为/ 常数/ ,/ q/ 为/ 瞬时/ 队长/ )/ 维护/ 面向/ 每个/ 到达/ 的/ 数据包/ 的/ 平均/ 队长/ 测度/ qavg/ ,/ 并用/ 该/ 测度/ 的/ 值/ 与/ 固定/ 阀值/ 的/ 关系/ 确定/ 丢/ 包率/ (/ 式/ (/ 2/ )/ )/ ,/ 具体/ 丢/ 包率/ 与/ 平均/ 队列/ 长度/ 的/ 关系/ 如图/ 1/ ./ p/ =/ RED/ 采用/ 等/ 概率/ 随机/ 分布/ 丢包/ ,/ 可以/ 缓解/ 因/ 丢/ 包/ 同步/ 而/ 随之/ 产生/ 的/ TCP/ 流/ 的/ 同步/ 现象/ ./ RED/ 算法/ 可/ 保持/ 相对/ 较/ 低/ 的/ 平均/ 队长/ ,/ 有利于/ 吸收/ 突发/ 流/ ./ 但是/ RED/ 算法/ 仍然/ 存在/ 两大/ 问题/ :/ (/ 1/ )/ 参数/ 的/ 设置/ 问题/ ./ 即/ 无法/ 找到/ 在/ 任何/ 负载/ 变化/ 条件/ 下/ 都/ 合适/ 的/ 参数/ ;/ (/ 2/ )/ 带宽/ 的/ 公平性/ 问题/ ./ 即/ 在/ 不同/ 的/ 时延/ 、/ 拥塞/ 窗口/ 、/ 数据包/ 的/ 大小/ 、/ 目标/ 速度/ 以及/ 不同/ 的/ 协议/ 情况/ 下/ 难以/ 权衡/ ./ Page43/ ./ 2SF/ -/ RED/ 算法/ 思路/ 从/ 第/ 2/ 节/ 的/ 讨论/ 可以/ 看出/ ,/ 现有/ 的/ 改善/ 公平性/ 的/ 算法/ 的/ 主要/ 思路/ 是/ 面向/ 流/ 的/ ,/ 其/ 核心/ 思路/ 都/ 是/ 在/ 拥塞/ 发生/ 时/ ,/ 通过/ 惩罚/ 具有/ 某种/ 特征/ 的/ 流来/ 获得/ “/ 公平/ ”/ ./ 其中/ 的/ 部分/ 算法/ 需要/ 维护/ 所有/ 的/ 并发/ “/ 流/ ”/ 信息/ ,/ 这/ 对/ 目前/ 主干/ 路由器/ 来说/ 还是/ 非常/ 困难/ 的/ ./ 从/ 报文/ 协议/ 的/ 角度/ 来看/ RED/ 的/ 公平性/ 问题/ ,/ 由于/ RED/ 平等/ 地/ 对待/ 所有/ 报文/ ,/ 当/ 拥塞/ 发生/ 时/ ,/ 如果/ 丢弃/ 的/ 是/ TCP/ 报文/ ,/ 端系统/ 能/ 很快/ 感知/ 并/ 自动/ 放缓/ 发送/ 速度/ ,/ 使得/ 拥塞/ 能够/ 很快/ 缓解/ ,/ 但/ 如/ UDP/ 报文/ 等/ 非/ TCP/ 报文/ 不/ 具备/ 这样/ 的/ 能力/ ./ 当/ UDP/ 比例/ 过高时/ ,/ TCP/ 让出/ 的/ 带宽/ 还会/ 被/ UDP/ 占用/ ./ 本文/ 基于/ 这样/ 的/ 基本/ 问题/ ,/ 提出/ 了/ 一个/ 面向/ 协议/ 间/ 公平性/ 的/ SF/ -/ RED/ 主动/ 队列/ 管理/ 算法/ ./ 该/ 算法/ 工作/ 机理/ 基于/ RED/ ,/ 但/ 对/ TCP/ 和/ 非/ TCP/ 流量/ 采用/ 区分/ 丢包/ 的/ 控制/ 方式/ ./ TCP/ 流量/ 的/ 丢/ 包/ 控制/ 方式/ 源于/ TCP/ 模型/ 推导/ 的/ 控制/ 方程/ ,/ 而/ 非/ TCP/ 流量/ 的/ 丢/ 包则/ 通过/ 与/ TCP/ 之间/ 的/ 损失/ 等价/ 控制/ 方式/ 达到/ 公平/ 的/ 平衡点/ ./ 3.3/ 区分/ 丢包/ 模型/ 3.3/ ./ 1TCP/ 流量/ 的/ 丢/ 包/ 计算/ 首先/ 讨论/ 本/ 算法/ 中/ 针对/ TCP/ 流量/ 的/ 丢/ 包/ 方式/ ./ RED/ 算法/ 在/ Qmin/ </ qavg/ / Qmax/ 时/ 丢/ 包率/ 取决于/ 对应/ 时刻/ 计算/ 的/ 平均/ 队列/ 长度/ 和/ Pmax/ 的/ 值/ ,/ 丢/ 包率/ 的/ 变化/ 是/ 线性/ 的/ ,/ 这/ 与/ TCP/ 流量/ 的/ 行为/ 模式/ 有/ 一定/ 的/ 差异/ ./ 本文/ 中/ TCP/ 流量/ 的/ 丢/ 包/ 算法/ 是/ 单独/ 处理/ 的/ ,/ 所以/ 采用/ 更/ 符合/ TCP/ 的/ 流量/ 行为/ 的/ 丢/ 包/ 模型/ ./ 具体/ 而言/ ,/ 是/ 选择/ 了/ TCP/ 协议/ 中/ 特有/ 的/ 参数/ “/ 窗口/ ”/ 作为/ 拥塞/ 控制/ 中/ 计算/ TCP/ 流量/ 的/ 丢/ 包率/ 的/ 依据/ ./ 记由源/ 端/ Si/ 到/ 目的/ 端/ Di/ 的/ TCP/ 流/ 窗口/ 大小/ 在/ t/ 时刻/ 为/ wi/ (/ t/ )/ ,/ 记/ 路由器/ R/ 上/ 的/ 在/ t/ 时刻/ 数据包/ 的/ 丢弃/ 概率/ 为/ p/ (/ t/ )/ ./ 对/ 窗口/ wi/ (/ t/ )/ 中/ 的/ 每/ 一个/ 数据包/ ,/ 其/ 被/ 丢弃/ 的/ 概率/ 都/ 是/ p/ (/ t/ )/ ,/ 当/ p/ (/ t/ )/ 很/ 小时/ ,/ 对于/ 窗口/ wi/ (/ t/ )/ 来说/ ,/ 其中/ 没有/ 数据包/ 需要/ 重传/ 的/ 概率/ 为/ ∏/ wi/ (/ t/ )/ (/ 1/ -/ p/ (/ t/ )/ )/ ≈/ 1/ -/ p/ (/ t/ )/ wi/ (/ t/ )/ ./ 因此/ ,/ 无/ 数据包/ 丢失/ k/ =/ 1/ 的/ 情况/ 窗口/ 变化/ 速率/ 为/ 1/ // tRTT/ 乘上/ 丢/ 包/ ,/ 即/ 1/ -/ p/ (/ t/ )/ wi/ (/ t/ )/ tRTT/ ./ 窗口/ wi/ (/ t/ )/ 中有/ 数据包/ 丢失/ 的/ 概率/ 为/ 1/ -/ ∏/ wi/ (/ t/ )/ 半/ ,/ 同样/ 有/ 数据包/ 丢失/ 情况/ 下/ 窗口/ 的/ 变化/ 速率/ 为/ -/ p/ (/ t/ )/ w2i/ (/ t/ )/ 2tRTT/ 式/ (/ 3/ )/ ./ k/ =/ 1/ 当/ 链路/ 发生/ 拥塞/ 时/ ,/ 控制算法/ 希望/ 尽快/ 阻止/ 流量/ 继续/ 上升/ ./ 对于/ 每个/ TCP/ 流/ 来说/ ,/ 则/ 是/ 需要/ 保证/ 窗口/ 不会/ 增大/ ,/ 使得/ 单个/ TCP/ 传输/ 窗口/ 不/ 增加/ 的/ 条件/ 为式/ (/ 4/ )/ ./ 式/ (/ 3/ )/ 代入/ 式/ (/ 4/ )/ 得到/ 式/ (/ 5/ )/ ./ 由于/ TCP/ 中/ 往返/ 时延/ 均/ 视为/ 正值/ ,/ 因此/ 通过/ 式/ (/ 5/ )/ 可以/ 获得/ 在/ 窗口/ 不/ 增加/ 情况/ 下/ p/ (/ t/ )/ 与/ wi/ (/ t/ )/ 间/ 的/ 关系/ ,/ 见式/ (/ 6/ )/ ./ 从/ 拥塞/ 控制/ 的/ 角度看/ 整体/ TCP/ 流量/ ,/ TCP/ 每个/ 流/ 可能/ 具有/ 不同/ 的/ 窗口/ 大小/ ,/ 假设/ 存在/ 一个/ 理想/ 的/ 窗口/ 大小/ 为/ w/ / (/ t/ )/ ,/ 使得/ t/ 时间/ 整体/ TCP/ 流量/ 在/ 丢/ 包率/ pt/ (/ t/ )/ 下/ 增长率/ 为/ 0/ ,/ 它们/ 之间/ 关系/ 应该/ 满足/ 式/ (/ 7/ )/ ./ SF/ -/ RED/ 算法/ 中/ 使用/ 该式/ 作为/ TCP/ 流量/ 的/ 丢/ 包率/ 计算/ 模型/ ./ 该/ 计算/ 模型/ 在/ 丢/ 包率/ 较大/ 时/ 可能/ 会/ 出现/ 较大/ 的/ 误差/ ,/ 因此/ 后面/ 在/ 使用/ 该/ 计算/ 模型/ 时/ ,/ 窗口/ 参数/ 也/ 是/ 估算/ 值/ ,/ 其/ 大小/ 浮动/ 变化/ 用于/ 弥补/ 可能/ 存在/ 的/ 误差/ ./ 3.3/ ./ 2/ 其他/ 流量/ 的/ 丢/ 包/ 计算/ 如上所述/ ,/ 丢包/ 对/ TCP/ 流量/ 的/ 影响/ 超过/ 对以/ UDP/ 为主/ 的/ 非/ TCP/ 流量/ 的/ 影响/ ,/ 因此/ 在/ 设计/ 非/ TCP/ 流量/ 的/ 丢/ 包/ 模型/ 时/ ,/ 将/ 主要/ 基于/ 这个/ 影响/ 因素/ 进行/ ,/ 即应/ 尽量/ 将/ 2/ 者/ 的/ 损失/ 比例控制/ 在/ 同一个/ 数量级/ 上/ ./ 根据/ AIMD/ 原则/ ,/ 在/ 丢/ 包率/ 为/ pt/ (/ t/ )/ 下/ ,/ 整体/ TCP/ 窗口/ 为/ w/ / (/ t/ )/ 下/ ,/ TCP/ 流量/ 的/ 丢/ 包数/ 期望值/ 为/ dropt/ (/ t/ )/ =/ pt/ (/ t/ )/ ×/ Ntcp/ ,/ 其中/ 使用/ Ntcp/ 表示/ TCP/ 的/ 整体/ 流量/ ,/ 而/ 这些/ 被/ 丢失/ 的/ 数据包/ 会/ 对/ 以/ w/ / (/ t/ )/ 为/ 平衡/ 窗口/ 大小/ 的/ 整体/ 的/ TCP/ 流量/ 产生/ 预期/ 的/ 流量/ 损失/ 大小/ 可以/ 估计/ 为/ losst/ =/ dropt/ (/ t/ )/ w/ / (/ t/ )/ // 2/ ,/ 因此/ TCP/ 流量/ 的/ 损失/ 比例/ 为/ losst/ // Ntcp/ =/ pt/ (/ t/ )/ w/ / // 2/ ./ 若/ 将/ 同一/ 时刻/ 非/ TCP/ 的/ 损失/ 比例控制/ 在/ 同一/ 水平/ 上/ ,/ 则/ 有式/ (/ 8/ )/ 成立/ :/ 其中/ c/ 为/ 常量/ ,/ 若/ 要/ 使得/ 非/ TCP/ 流量/ 因为/ 其/ 本身/ 不/ Page5/ 能/ 对/ 丢/ 包/ 进行/ 反馈/ 而/ 增加/ 其/ 惩罚/ 程度/ ,/ 即/ 满足条件/ po/ (/ t/ )/ / pt/ (/ t/ )/ ,/ 则/ 常量/ c/ 需要/ 满足/ c/ / 2/ // w/ / (/ t/ )/ ./ 因/ 窗口/ 的/ 大小/ 满足/ w/ / (/ t/ )/ / 1/ ,/ 因此/ 推荐/ c/ 的/ 取值/ 范围/ 为/ [/ 2/ ,/ 3/ ]/ ./ 将式/ (/ 6/ )/ 代入/ 式/ (/ 8/ )/ ,/ 因为/ 窗口/ w/ / 为/ 正/ ,/ 得到/ 式/ (/ 9/ )/ ./ po/ (/ t/ )/ =/ cw/ / (/ t/ )/ SF/ -/ RED/ 算法/ 中/ 使用/ 该式/ 作为/ 非/ TCP/ 流量/ 的/ 图/ 2/ 给出/ 式/ (/ 9/ )/ 中/ c/ 取值/ 为/ 1/ 、/ 2/ 、/ 3/ 时/ ,/ 2/ 种/ 类型/ 流量/ 在/ 不同/ 窗口/ 大小/ 下/ 的/ 丢/ 包率/ 变化/ 情况/ ./ 根据/ 式/ (/ 6/ )/ ,/ 当/ w/ / >/ 1/ 时/ TCP/ 的/ 丢/ 包率/ 是/ w/ / 的/ 单调/ 递减/ 函数/ ,/ 当/ w/ / =/ 1/ 时/ ,/ 其/ 最大值/ 为/ 2/ // 3/ ./ 非/ TCP/ 的/ 丢/ 包率/ 则/ 随着/ 窗口/ 增加/ 单调/ 递减/ ,/ 当/ w/ / =/ 1/ 时/ ,/ 其/ 最大值/ 为/ c/ // 3/ ./ 丢/ 包率/ 计算/ 模型/ ./ 3.4/ 算法/ 描述/ SF/ -/ RED/ 算法/ 使用/ 4/ 个/ 含义/ 与/ RED/ 算法/ 完全相同/ 的/ 参数/ ,/ 分别/ 是/ 队列/ 长度/ 最小/ 门限/ Qmin/ 、/ 最大/ 门/ 限值/ Qmax/ 、/ Pmax/ 和/ qavg/ ./ 算法/ 的/ 核心/ 思路/ 是/ 当/ qavg/ >/ Qmin/ 时/ ,/ 定义/ SF/ -/ RED/ 算法/ 定义/ 进入/ 拥塞/ 状态/ ,/ 用/ 布尔/ 变量/ cong/ 进行/ 标记/ ./ 在/ 拥塞/ 状态/ 下/ ,/ 按/ 3.3/ 中/ 的/ 讨论/ ,/ 分/ 2/ 种/ 方式/ 对/ TCP/ 流量/ 与非/ TCP/ 流量/ 进行/ 区分/ 丢包/ 策略/ 以/ 到达/ 2/ 者/ 稳定/ 共存/ 的/ 目的/ ./ 维护/ ;/ 算法/ 中/ 使用/ 的/ 其他/ 参数/ :/ (/ 1/ )/ 当前/ 队列/ 长度/ q/ :/ 在/ 报文/ 的/ 到达/ 和/ 离开/ 时/ (/ 2/ )/ 平均/ TCP/ 队列/ 长度/ qt/ (/ 3/ )/ 当前/ TCP/ 队列/ 长度/ qt/ ,/ 队列/ 中/ TCP/ 的/ 队列/ (/ 4/ )/ TCP/ 报文/ 丢/ 包数/ dropt/ 和/ 其他/ 报文/ 丢/ 包数/ (/ EWMA/ 方法/ )/ ;/ 长度/ :/ 维护/ 方式/ 与/ q/ 相同/ ;/ dropo/ :/ 进入/ 本次/ 拥塞/ 后/ 2/ 种/ 类型/ 报文/ 的/ 丢/ 包/ 记录/ ;/ (/ 5/ )/ TCP/ 的/ 丢/ 包/ 概率/ pt/ 和/ 非/ TCP/ 丢包/ 概率/ po/ ./ 根据/ 窗口/ 参数/ w/ / (/ t/ )/ 和/ 式/ (/ 7/ )/ 和/ 式/ (/ 9/ )/ 实时/ 计算/ 出/ 的/ 丢/ 包率/ ;/ (/ 6/ )/ 窗口/ 参数/ w/ / (/ t/ )/ ,/ 用/ 固定/ 增加值/ a/ 和/ 固定/ 减少/ 值/ b/ 维护/ (/ a/ ,/ b/ 初始化/ 值均/ 为/ 1/ )/ ,/ 用于/ 计算/ TCP/ 的/ 报文/ 丢/ 包率/ pt/ 值/ ./ SF/ -/ RED/ 算法/ 的/ 伪/ 代码/ 描述/ 如下/ :/ 初始化/ 算法/ 参数/ Qmin/ 、/ Qmax/ 、/ Pmax/ 、/ a/ 、/ b/ ;/ FOR/ 每/ 一个/ 到达/ 报文/ P/ {/ 更新/ 队列/ 状态变量/ q/ ,/ qavg/ ,/ qt/ ,/ qtIFq/ >/ 缓冲/ 最大值/ ,/ 进入/ 强制/ 丢包/ 流程/ ;/ EXIT/ ;/ IFqavg/ </ Qmin/ ,/ cong/ =/ 0/ 非/ 拥塞/ 状态/ ,/ 报文/ 正常/ 加入/ 队列/ ;/ EXIT/ ;/ IFcong/ =/ 0/ // // 进入/ 拥塞/ 状态/ 初始化/ 拥塞/ 算法/ 参数/ w/ / ,/ dropt/ ,/ dropo/ ;/ 本次/ 不/ 丢/ 包/ ,/ cong/ =/ 1/ ;/ ELSE/ {/ // // 随机/ 抽取/ 队列/ 中/ 的/ 一个/ 对比/ 报文/ P/ / IF/ 发生/ 丢包/ }/ FOR/ 每/ 离开/ 一个/ 报文/ {/ 更新/ 队列/ 队长/ q/ ,/ qt/ ;/ }/ 算法/ 中/ 各/ 参数/ 的/ 初值/ ./ 最小/ 阈值/ Qmin/ 、/ 最大/ 阈值/ Qmax/ 需要/ 根据/ 实际/ 情况/ 自行/ 设置/ ,/ Pmax/ 默认值/ 采用/ 同/ RED/ 的/ 默认设置/ 为/ 0.1/ ./ 算法/ 中/ 参数/ w/ / 的/ 初始化/ 使用/ 式/ (/ 7/ )/ 中/ 丢/ 包率/ 与/ 窗口/ 的/ 关系/ 进行/ 变换/ 获得/ ./ 由于/ 窗口/ 大小/ 为/ 正值/ ,/ 所以/ w/ / 使用/ 式/ (/ 10/ )/ 进行/ 初始化/ ./ 其中/ 的/ p0/ 与/ RED/ 的/ 初始/ 丢/ 包率/ 计算/ 方式/ 相同/ ,/ 具体/ 表达式/ 为式/ (/ 2/ )/ ./ 参数/ w/ / 的/ 维护/ 参考/ 当前/ 队列/ 中/ 两种/ 报文/ 的/ 比例/ 与/ 当前/ 两种/ 报文/ 的/ 丢/ 包数/ 比例/ ./ 设/ 当前/ 队列/ 中/ 的/ TCP/ 报文/ 比例/ 为/ rtqueue/ >/ rtdropcw/ / // 2/ 成立/ ,/ 则/ 增大/ w/ / ;/ 否则/ 减小/ w/ / ./ rt/ 算法/ 中/ 使用/ 了/ 从/ 队列/ 中/ 选择/ 报文/ ,/ 在/ 其/ 与/ 到达/ 报文/ 类型/ 不/ 一致/ 时/ 丢弃/ 的/ 方法/ ./ 这一/ 基本思路/ 源于/ 种群/ 竞争/ Lotka/ -/ Volterra/ (/ L/ -/ V/ )/ 模型/ ,/ 有关/ 的/ 分析/ 将/ Page6/ 在/ 下/ 一/ 小节/ 给出/ ./ 4/ 基于/ Lotka/ -/ Volterra/ 模型/ 的/ 算法/ 收敛性/ 分析/ 本/ 节/ 使用/ L/ -/ V/ 模型/ 对/ TCP/ 流量/ 和/ 非/ TCP/ 流量/ 的/ 竞争/ 关系/ 进行/ 刻画/ ./ 带宽/ 作为/ 有限/ 资源/ 可以/ 认为/ 是/ 传输层/ 协议/ TCP/ 与非/ TCP/ 的/ 共享资源/ ./ 因此/ ,/ 可以/ 将/ TCP/ 与非/ TCP/ 流量/ 作为/ 对/ 同种/ 资源/ 进行/ 竞争/ 的/ 两个/ 种群/ 来/ 看待/ ,/ 符合/ 面向/ 特定/ 资源/ 的/ 种群/ 竞争/ L/ -/ V/ 模型/ 的/ 条件/ ./ 4.1/ Lotka/ -/ Volterra/ 模型/ Lotka/ -/ Volterra/ 模型/ (/ Lotka/ -/ Volterra/ 种间/ 竞争/ 模型/ )/ 是/ 20/ 世纪/ 40/ 年代/ ,/ Lotka/ (/ 1925/ )/ 和/ Volterra/ (/ 1926/ )/ 提出/ 的/ 种间/ 竞争/ 方程/ 对/ 现代/ 生态学/ 理论/ ,/ 它/ 奠定/ 了/ 种间/ 竞争/ 关系/ 的/ 理论/ 基础/ ./ Lotka/ -/ Volterra/ 模型/ 是/ 对/ Logistic/ 模型/ 的/ 延伸/ [/ 27/ ]/ ./ 适用/ 于/ 描述/ 在/ 两种/ 物种/ 争夺/ 有限/ 的/ 同/ 一种/ 食物/ 来源/ 和/ 生活空间/ 时而/ 进行/ 的/ 生存竞争/ 的/ 情况/ ./ 模型/ 中/ 设定/ 甲乙/ 两个/ 种群/ ,/ 当/ 它们/ 独自/ 在/ 一个/ 自然环境/ 中/ 生存/ 时/ ,/ 数量/ 的/ 演变/ 遵从/ logistic/ 规律/ ./ 记/ x1/ (/ t/ )/ 、/ x2/ (/ t/ )/ 分别/ 代表/ 两个/ 种群/ 的/ 数量/ ./ r1/ 、/ r2/ 表示/ 它们/ 的/ 固有/ 增长率/ ,/ N1/ 、/ N2/ 是/ 它们/ 的/ 最大/ 容量/ ./ 于是/ 对于/ 种群/ 甲有/ x/ ·/ N/ (/ )/ 1/ 子/ 1/ -/ x1/ (/ t/ )/ 的/ 对/ 其/ 增长/ 的/ 阻滞/ 作用/ ,/ x1/ (/ t/ )/ 位/ 数量/ 的/ 甲/ 消耗/ 的/ 食物/ 量/ (/ 设/ 食物/ 总量/ 为/ 1/ )/ ./ 当/ 两个/ 种群/ 在/ 同一/ 自然环境/ 中/ 生存/ 时/ ,/ 考察/ 乙/ 消耗/ 同/ 一种/ 有限/ 资源/ 时/ 对/ 甲/ 的/ 增长/ 产生/ 的/ 影响/ ,/ 可以/ 合理/ 地/ 在/ 因子/ 1/ -/ x1/ (/ t/ )/ 种群/ 乙/ 的/ 数量/ x2/ (/ 相对/ 于/ N2/ 而言/ )/ 成正比/ ,/ 得到/ 种群/ 甲/ 的/ 增长/ 方程/ 其中/ δ/ 1/ 的/ 意义/ 是/ ,/ 单位/ 数量/ 乙/ (/ 相对/ 于/ N2/ 而言/ )/ 消耗/ 的/ 食物/ 量/ 为/ 单位/ 数量/ 甲/ (/ 相对/ N1/ )/ 消耗/ 的/ 食物/ 量/ 的/ δ/ 1/ 倍/ ./ 增长/ 方程/ 是/ x/ ·/ 类似/ 地/ ,/ 甲/ 的/ 存在/ 也/ 影响/ 了/ 乙/ 的/ 增长/ ,/ 种群/ 乙/ 的/ 根据/ 式/ (/ 11/ )/ 和/ (/ 12/ )/ ,/ 对于/ 两个/ 种群/ 相互竞争/ 的/ 结局/ 进行/ 分析/ ,/ 通过/ 计算/ 可求/ 出/ 4/ 个/ 平衡点/ 和/ 在/ 每个/ 平衡点/ 下/ 的/ 稳定性/ 条件/ 见表/ 1/ [/ 27/ ]/ ./ (/ P3N1/ (/ 1/ -/ δ/ 1/ )/ 从/ 结果/ 看/ ,/ 一共/ 有/ 3/ 个/ 稳定/ 的/ 平衡点/ ./ 到达/ 平衡点/ P1/ 和/ P2/ 时会/ 导致/ 其中/ 一个/ 的/ 物种/ 消亡/ ,/ 到达/ 平衡点/ P3/ 表示/ 两/ 物种/ 保持/ 二者/ 在/ 一定/ 比例/ 上/ 共存/ ./ 4.2/ SF/ -/ RED/ 算法/ 的/ 收敛性/ 分析/ 本/ 节/ 借用/ Lotka/ -/ Volterra/ 模型/ 分析/ 使用/ SF/ -/ RED/ 算法/ 条件/ 下/ 网络/ 中/ TCP/ 流量/ 与非/ TCP/ 流量/ 的/ 竞争/ 关系/ ./ 将/ TCP/ 流量/ 看作/ 物种/ 甲/ ,/ 非/ TCP/ 流量/ 看/ 物种/ 乙/ ./ TCP/ 与非/ TCP/ 流量/ 在/ 网络/ 环境/ 中/ 对/ 带宽/ 的/ 竞争/ 相互影响/ ,/ 稳定/ 共存/ 的/ 局面/ ,/ 满足/ Lotka/ -/ Volterra/ 模型/ 条件/ ,/ 可以/ 用式/ (/ 11/ )/ 和/ (/ 12/ )/ 描述/ ./ 其中/ x1/ (/ t/ )/ 、/ x2/ (/ t/ )/ 分别/ 代表/ TCP/ 流量/ 和/ 非/ TCP/ 流量/ ./ 系数/ r1/ 、/ r2/ 表示/ TCP/ 和/ 非/ TCP/ 流量/ 的/ 固有/ 增长率/ ,/ N1/ 、/ N2/ 是/ 网络/ 中间/ 节点/ 上/ TCP/ 和/ 非/ TCP/ 流量/ 各自/ 的/ 最大/ 容量/ ./ 于是/ 在/ 网络/ 节点/ 上/ 流量/ 增加/ 对于/ 单纯/ 的/ 全/ TCP/ 和/ 非/ TCP/ 流量/ 都/ 假设/ 符合/ 式/ (/ 11/ )/ 的/ 形式/ ,/ 其中/ 因子/ 1/ -/ xi/ (/ t/ )/ 有限/ 导致/ 的/ 对/ 流量/ 增长/ 的/ 阻滞/ 作用/ ,/ xi/ (/ t/ )/ 为/ 相对/ 于/ Ni/ 而言/ 单位/ 数量/ 的/ 某方/ 消耗/ 的/ 带宽/ 资源/ ./ δ/ 1/ 表示/ 非/ TCP/ 对/ TCP/ 的/ 抑制作用/ ,/ δ/ 2/ 表示/ TCP/ 对非/ TCP/ 的/ 抑制作用/ ./ 根据/ 表/ 1/ ,/ 平衡点/ P1/ 表示/ 网络/ 中/ TCP/ 流量/ 占据/ 了/ 所有/ 带宽/ ./ 平衡点/ P2/ 表示/ 非/ TCP/ 占据/ 了/ 所有/ 的/ 带宽/ ./ 平衡点/ P3/ 表示/ TCP/ 与非/ TCP/ 二者/ 共存/ ,/ 共同/ 享有/ 带宽/ ,/ 二者/ 处于/ 动态平衡/ 状态/ ./ 如果/ 平衡点/ P3/ 存在/ ,/ 即使/ 网络/ 发生/ 拥塞/ (/ 即/ 网络资源/ 消耗/ 到达/ 极限/ )/ ,/ TCP/ 和/ 非/ TCP/ 流量/ 可以/ 在/ 一定/ 比例/ 上/ 稳定/ 共存/ ,/ 所以/ 可以/ 认为/ 这个/ 平衡点/ 是/ 我们/ 在/ 网络资源/ 紧缺/ 时为/ 保证/ 传输/ 协议/ 间/ 公平竞争/ 需要/ 实现/ 的/ 目标/ ./ 在/ 网络/ 中/ 流量/ 之间/ 的/ 竞争能力/ 强弱/ 体现/ 在/ Lotka/ -/ Volterra/ 模型/ 中/ 竞争能力/ 系数/ δ/ 1/ 和/ δ/ 2/ ,/ 其值/ Page7/ 是/ 与/ 协议/ 自身/ 的/ 算法/ 相关/ 的/ ,/ 网络/ 中间/ 节点/ 对/ 流量/ 的/ 控制/ 无法/ 改变/ 其/ 本质属性/ ./ SF/ -/ RED/ 通过/ 借助/ 基于/ 类型/ 的/ 丢/ 包/ 方式/ 来/ 修正/ 该/ 模型/ 下/ 平衡点/ ./ 由/ 3.4/ 节/ 的/ 算法/ 描述/ 可知/ ,/ SF/ -/ RED/ 在/ 拥塞/ 状态/ 下/ 的/ 丢/ 包/ 策略/ 是/ 随机/ 抽取/ 当前/ 队列/ 中/ 的/ 一个/ 数据包/ ,/ 如果/ 类型/ 与/ 当前/ 达到/ 的/ 数据包/ 相同/ 则/ 对/ 到达/ 数据包/ 进行/ 丢弃/ 判定/ ;/ 否则/ ,/ 丢弃/ 抽取/ 的/ 数据包/ ./ 这样/ 的/ 丢/ 包/ 策略/ 使得/ 一个/ 新到/ 的/ TCP/ 数据包/ 的/ 丢弃/ 不仅/ 取决于/ 当前/ 队列/ 的/ 长度/ 也/ 与/ 当前/ 队列/ 中/ 的/ 非/ TCP/ 数据包/ 数量/ 有关/ ./ 同样/ ,/ 非/ TCP/ 数据包/ 的/ 丢弃/ 也/ 不仅/ 取决于/ 当前/ 队列/ 长度/ 也/ 与/ 当前/ 队列/ 中/ 的/ TCP/ 数据包/ 数量/ 相关/ ./ 这个/ 判定/ 方式/ 的/ 原理/ 是/ 强行/ 干预/ 生物/ 种群/ 模型/ 中/ 2/ 种/ 物种/ 的/ 竞争/ 模型/ ,/ 使得/ 2/ 种/ 数据包/ 之间/ 的/ 竞争/ 关系式/ (/ 12/ )/ 发生/ 了/ 改变/ ./ 在/ SF/ -/ RED/ 算法/ 下/ ,/ 新到/ 的/ TCP/ 的/ 丢/ 包率/ 会/ 随着/ 队列/ 中非/ TCP/ 包/ 的/ 数量/ 的/ 增加/ 而/ 减少/ ,/ 同样/ 新到/ 的/ 非/ TCP/ 的/ 丢/ 包率/ 也/ 会/ 随着/ 队列/ 中/ TCP/ 包/ 的/ 数量/ 的/ 增加/ 而/ 减少/ ./ 因此/ ,/ SF/ -/ RED/ 下/ 两种/ 类型/ 的/ 数据包/ 在/ 争抢/ 带宽/ 上/ 满足/ 微分方程/ 组/ (/ 15/ )/ ./ 烄/ 烅/ 烆/ 对/ 上述/ 方程组/ 进行/ 分析/ ,/ 发现/ 无法/ 求出/ x1/ (/ t/ )/ 和/ x2/ (/ t/ )/ 的/ 解析/ 表达式/ ,/ 但是/ 可以/ 根据/ 方程组/ 得出/ 在/ t/ →/ 时/ 的/ 平衡点/ ./ 假设/ 从/ 初始条件/ 出发/ ,/ 存在/ x1/ =/ x01/ ,/ x2/ =/ x02/ 满表/ 2/ 竞争/ 模型/ 平衡点/ (/ P/ / 3N1/ (/ 1/ +/ δ/ 1/ )/ 对/ 该/ 方程组/ 进行/ 分析/ 可知/ ,/ 在/ 满足/ δ/ 1/ >/ 0/ ,/ δ/ 2/ >/ 0/ 情况/ 下/ ,/ 平衡点/ P/ / 3/ 的/ 条件/ 成立/ ./ 此时/ ,/ 另外/ 3/ 个/ 之前/ 的/ 平衡点/ 都/ 为/ 不/ 稳定/ 点/ ./ 上述/ 分析表明/ SF/ -/ RED/ 算法/ 中/ 的/ 基于/ 类型/ 的/ 丢/ 包/ 方式/ (/ 15/ )/ ,/ 在/ Lotka/ -/ Volterra/ 模型/ 下/ 可以/ 保证/ TCP/ 与非/ TCP/ 在/ 队列/ 管理/ 中/ 能够/ 按照/ 其/ 自身/ 的/ 属性/ 达到/ 一个/ 二者/ 共存/ 的/ 平衡点/ P/ / 3.4/ ./ 3SF/ -/ RED/ 算法/ 的/ 复杂度/ 分析/ 本/ 节/ 对照/ RED/ 与/ CHOKe/ 来/ 分析/ 该/ 算法/ 的/ 复杂度/ ./ RED/ 的/ 时间/ 复杂度/ 和/ 空间/ 复杂度/ 均/ 为/ O/ (/ 1/ )/ ,/ 足/ limt/ →/ x1/ (/ t/ )/ =/ x01/ ,/ limt/ →/ x2/ (/ t/ )/ =/ x02/ ./ 这样/ 可以/ 得到/ 新/ 的/ 4/ 个/ 平衡点/ P/ / 1/ (/ N1/ ,/ 0/ )/ ,/ P/ / 2/ (/ 0/ ,/ N2/ )/ ,/ P/ / 3N1/ (/ 1/ +/ δ/ 1/ )/ 1/ -/ δ/ 1/ δ/ )/ 2N2/ (/ 1/ +/ δ/ 2/ )/ 因为/ 仅当/ 平衡点/ 满足/ (/ x1/ ,/ x2/ / 0/ )/ 才/ 有/ 实际意义/ ,/ 微分方程/ 组/ (/ 15/ )/ 令其/ 导数/ 等于/ 0/ ,/ 使用/ 方程组/ (/ 16/ )/ 表示/ ,/ 利用/ 将/ 方程组/ (/ 16/ )/ 在/ 平衡点/ 进行/ Taylor/ 展开/ ,/ 取/ 一次/ 项/ ,/ 得出/ 近似/ 线性方程/ 后/ ,/ 系数/ 矩阵/ 为/ 犃/ ,/ 形式/ 见式/ (/ 17/ )/ ./ r11/ -/ 2x1N1/ +/ δ/ 1x2N/ (/ 熿/ 犃/ =/ 燀/ 熿/ =/ 燀/ 再/ 根据/ det/ (/ 犃/ -/ λ/ 犐/ )/ =/ 0/ 求/ 特征方程/ 根/ ,/ 得到/ 方程组/ (/ 18/ )/ 根据/ 对/ 方程组/ 的/ 特征/ 根/ 分析/ ,/ 求出/ 的/ 平衡点/ 和/ 稳定性/ 条件/ 见表/ 2/ (/ p/ 、/ q/ 参照/ 式/ (/ 18/ )/ )/ ./ 这/ 也/ 是/ RED/ 算法/ 的/ 优势/ ./ 尽管/ CHOKe/ 需要/ 随机/ 选出/ 一个/ 候选/ 报文/ 进行/ 对比/ ,/ 其/ 时间/ 复杂度/ 和/ 空间/ 复杂度/ 也/ 同样/ 是/ O/ (/ 1/ )/ ./ 上文/ 提出/ 的/ SF/ -/ RED/ 算法/ ,/ 每/ 到达/ 一个/ 报文/ 进行/ 的/ 处理/ 与/ RED/ 和/ CHOKe/ 基本相同/ ,/ 其/ 区别/ 为/ 在/ 确定/ 丢/ 包率/ 的/ 算法/ 上/ 存有/ 一些/ 不同/ 的/ 处理/ ./ 因此/ 算法/ 的/ 时间/ 复杂度/ 仍旧/ 是/ O/ (/ 1/ )/ ./ 空间/ 复杂度/ 上/ 增加/ 几个/ 需要/ 的/ 变量/ ,/ 变量/ 数目/ 不/ 随着/ 规模/ 的/ 增加/ 而/ 增加/ ,/ 因此/ 其/ 复杂度/ 仍旧/ 为/ O/ (/ 1/ )/ ./ 整体/ 上/ 看/ ,/ SF/ -/ RED/ 算法/ 保持/ 了/ RED/ 与/ CHOKe/ 算法/ 的/ 优点/ ./ Page8/ 另外/ 需要/ 指出/ 的/ 是/ ,/ 在/ 收敛性/ 方面/ ,/ RED/ 并/ 不能/ 阻止/ 队列/ 不断/ 增长/ ,/ 如果/ 用/ 控制/ 理论/ 建模/ ,/ 它/ 不能/ 收敛/ 到/ 较/ 短/ 的/ 目标/ 队列/ 长度/ ./ SF/ -/ RED/ 通过/ 引入/ 区分/ 丢包/ 的/ 方式/ 对/ 不同/ 的/ 流量/ 进行/ 不同/ 方式/ 的/ 处理/ ./ 其中/ TCP/ 的/ 丢/ 包/ 方式/ 根据/ TCP/ 的/ 吞吐量/ 模型/ 进行/ 推导/ ,/ 丢/ 包率/ 推导/ 条件/ 就是/ 队列/ 长度/ 维持/ 在/ 增长率/ 为/ 0/ 的/ 界限/ (/ 即/ 队列/ 长度/ 不再/ 增加/ ,/ 式/ (/ 4/ )/ )/ ./ UDP/ 的/ 丢/ 包/ 方式/ 根据/ 当前/ 的/ 算法/ 中/ 参数/ 进行/ 动态/ 的/ 计算/ (/ 与/ TCP/ 丢/ 包率/ 有关/ (/ 式/ (/ 8/ )/ )/ ./ SF/ -/ RED/ 的/ 控制/ 模型/ ,/ 结合/ 了/ TCP/ 的/ 吞吐/ 特点/ 和/ UDP/ 非/ 响应/ 流/ 的/ 特点/ ,/ 增加/ 了/ CHOKe/ 的/ 惩罚/ 机制/ ,/ 通过/ 计算/ 合理/ 的/ 丢/ 包率/ 可以/ 很/ 好/ 的/ 抑制/ 队列/ 长度/ 的/ 增长速度/ ./ 5/ 基于/ RTT/ 的/ 综合/ TCP/ 传输/ 性能/ 测度/ 为了/ 验证/ 上述/ SF/ -/ RED/ 算法/ 的/ 有效性/ ,/ 使用/ NS2/ 仿真/ 环境/ 对/ 不同/ 的/ 非/ TCP/ 流量/ 比例/ 下/ 的/ 网络/ 状况/ 进行/ 测试/ ./ 5.1/ 仿真/ 环境/ 实验/ 在/ NS2/ 中/ 使用/ 如图/ 3/ 所示/ 的/ 拓扑/ 结构/ ./ 仿真/ 使用/ 单/ 瓶颈/ 的/ 哑铃/ 拓扑/ ./ 有/ N1/ 个/ TCP/ 链接/ 和/ N2/ 个/ UDP/ 链接/ 与/ 路由器/ 分别/ 相连接/ ,/ 与/ 路由器/ 之间/ 的/ 链路/ 默认/ 使用/ 丢尾/ (/ drop/ -/ tail/ )/ 方式/ ,/ 链路/ 上限/ 为/ 2Mbps/ ,/ 延迟/ 为/ 10ms/ ./ 路由器/ R1/ 和/ R2/ 之间/ 链路/ 默认/ 带宽/ 限制/ 30Mbps/ ,/ 延迟/ 20ms/ ,/ 队长/ 为/ 20/ 个/ 数据包/ ./ 实验/ 在/ 较/ 高/ 的/ 网络/ 负载/ 下/ 进行/ ,/ 在/ 不同/ 的/ 非/ TCP/ 流量/ 比重/ 下/ 测试/ 每个/ 算法/ 的/ 表现/ ./ R1/ 到/ R2/ 的/ 链路/ 上/ 使用/ RED/ ,/ CHOKe/ 和/ SF/ -/ RED/ 算法/ ./ 5.2/ TCP/ 流/ 与/ UDP/ 流/ 共存/ 的/ 仿真/ 结果/ 仿真/ 通过/ 改变/ TCP/ 和/ UDP/ 流/ 的/ 数量/ ,/ 即/ 通过/ 不同/ 的/ N1/ 和/ N2/ 的/ 设置/ ,/ 测试/ 算法/ 的/ 有效性/ ./ SF/ -/ RED/ 中/ 采用/ 参数/ a/ ,/ b/ ,/ c/ 都/ 固定设置/ 为/ 1/ ./ 图/ 4/ 和/ 图/ 5/ 表示/ 在/ 不同/ 的/ 流数/ 比/ [/ N1/ ,/ N2/ ]/ 组合/ 情况/ 下/ ,/ 3/ 种/ 算法/ 在/ 相同/ 的/ 网络/ 配置/ 下/ ,/ TCP/ 报文/ 丢/ 包率/ 和/ UDP/ 报文/ 丢/ 包率/ 对比/ ./ 由于/ CHOKe/ 对于/ 恶意/ 流/ 的/ 鉴别/ 不/ 区分/ 流量/ 种类/ ,/ 因此/ 对于/ TCP/ 和/ UDP/ 流/ 的/ 丢/ 包率/ 在/ 3/ 种/ 算法/ 中/ 都/ 偏高/ (/ 图/ 4/ )/ ,/ CHOKe/ 的/ 这/ 一/ 特点/ 在/ 流较/ 少/ 的/ 情况/ 下/ 确实/ 能/ 防止/ 少数/ 流量/ 恶意/ 流量/ 独占/ 大量/ 带宽/ ./ 根据/ 文献/ [/ 28/ ]/ ,/ 对/ CHOKe/ 的/ 建模/ 分析表明/ ,/ CHOKe/ 能/ 保证/ 最大/ 的/ 单流/ 占用/ 带宽/ 不/ 超过/ 26/ %/ ./ 然而/ ,/ 当流/ 的/ 数量/ 增加/ 到/ 万级/ ,/ CHOKe/ 的/ 优势/ 反而/ 会/ 限制/ TCP/ 为/ 代表/ 的/ 传输/ 协议/ ./ 因为/ TCP/ 数据/ 窗口/ 增大/ 后/ ,/ 相同/ 吞吐量/ 的/ TCP/ 与/ 恒速/ 的/ 其他/ 应用/ 在/ CHOKe/ 下会/ 获得/ 更大/ 的/ 丢/ 包/ 概率/ ./ 因此/ ,/ CHOKe/ 并/ 不/ 适合/ 在/ 骨干/ 路由器/ 上/ 的/ 配置/ ./ 从图/ 5/ 可知/ ,/ Page9CHOKe/ 的/ 实际/ 吞吐/ 率/ 是/ 3/ 种/ 算法/ 中/ 最低/ 的/ ./ 比较/ SF/ -/ RED/ 与/ RED/ 的/ 丢/ 包率/ ,/ SF/ -/ RED/ 上/ UDP/ 的/ 丢/ 包率/ 略大于/ RED/ ,/ 表明/ SF/ -/ RED/ 算法/ 对/ 仿真/ 中/ UDP/ 的/ 惩罚/ 力度/ 稍/ 强于/ RED/ ./ 从/ TCP/ 的/ 丢/ 包率/ 看/ ,/ 在/ 高/ UDP/ 的/ 环境/ 下/ (/ 即/ UDP/ 超过/ 50/ %/ )/ ,/ SF/ -/ RED/ 对于/ TCP/ 的/ 丢/ 包率/ 明显/ 小于/ RED/ (/ 见图/ 4/ (/ a/ )/ )/ ./ 从/ 吞吐量/ 上/ 看/ ,/ SF/ -/ RED/ 与/ RED/ 相/ 比较/ ,/ 在/ 混合/ 流量/ 下/ ,/ SF/ -/ RED/ 的/ TCP/ 吞吐/ 率/ 较优/ ./ UDP/ 的/ 吞吐量/ 与/ RED/ 基本/ 相等/ ./ 综上所述/ ,/ 实验/ 中/ SF/ -/ RED/ 在/ 非/ TCP/ 流量/ 较/ 高/ 的/ 情况/ 下/ 可以/ 较/ 好/ 的/ 保护/ TCP/ 流量/ ,/ 并且/ 通过/ 窗口/ 参数/ w/ / 的/ 调节/ 和/ 利用/ Lotka/ -/ Volterra/ 模型/ 保证/ 了/ 混合/ 流量/ 的/ 并存/ 性/ 和/ 收敛性/ ,/ 在/ 不同/ 的/ 情况/ 下/ 进行/ 区别/ 的/ 丢/ 包/ 方式/ 保护/ 了/ 弹性/ 流/ 的/ 合理/ 带宽/ ,/ 可用/ 带宽/ 的/ 充分利用/ 使得/ 网络/ 具有/ 良好/ 的/ 吞吐/ 率/ ./ 6/ 总结/ 本文/ 提出/ 了/ 一个/ 基于/ RED/ 的/ 差异/ 型/ 丢/ 包/ 队列/ 管理/ 算法/ SF/ -/ RED/ ./ 通过/ TCP/ 的/ 吞吐量/ 模型/ 引入/ 一个/ 窗口/ 参数/ ,/ 对/ 流量/ 的/ 拥塞/ 控制/ 进行/ 动态/ 调节/ ;/ 控制/ 方式/ 上/ 采用/ 了/ 不同/ 类型/ 报文/ 的/ 差异性/ 丢包/ 方式/ ./ 从/ 理论/ 上/ 证明/ 了/ SF/ -/ RED/ 算法/ 控制/ 方式/ 存在/ 异种/ 流量/ 共存/ 的/ 稳定/ 平衡点/ ./ 算法/ 的/ 时间/ 和/ 空间/ 复杂度/ 较/ 低/ ./ 仿真/ 实验/ 表明/ 较/ RED/ 和/ CHOKe/ 相比/ ,/ SF/ -/ RED/ 在/ 高/ UDP/ 流量/ 下/ 可以/ 合理/ 保护/ TCP/ 流量/ ,/ 并/ 对/ 恶意/ 的/ UDP/ 流量/ 产生/ 抑制/ ,/ 并且/ 同时/ 能/ 有效/ 利用/ 带宽/ ,/ 具有/ 良好/ 的/ 吞吐/ 率/ ./ 

