Page1/ 基于/ 聚类分析/ 的/ 进程/ 拓扑/ 映射/ 优化/ 王涛/ 1/ )/ 卿鹏/ 1/ )/ 魏迪/ 1/ )/ 漆锋滨/ 2/ )/ 1/ )/ (/ 江南/ 计算技术/ 研究所/ 江苏/ 无锡/ 214083/ )/ 2/ )/ (/ 国家/ 并行/ 计算机/ 工程技术/ 研究/ 中心/ 北京/ 100080/ )/ 摘要/ 高性能/ 计算机系统/ 规模/ 的/ 持续/ 增大/ 使/ 通信/ 墙/ 问题/ 越来越/ 突出/ ./ 逻辑/ 进程/ 与/ 物理/ 拓扑/ 的/ 映射/ 优化/ 方法/ 能够/ 提高/ 应用/ 的/ 通信/ 效率/ ,/ 已经/ 成为/ 高性能/ 计算/ 的/ 研究/ 热点/ 之一/ ./ 传统/ 的/ 进程/ 映射/ 优化/ 模型/ 由于/ 映射/ 粒度/ 过细/ ,/ 导致/ 映射/ 效率/ 低/ ,/ 且易/ 破坏/ 通信/ 密集/ 的/ 进程/ 簇/ 的/ 整体性/ ./ 为此/ ,/ 文中/ 提出/ 了/ 一种/ 聚合/ 的/ 二次/ 分配/ 问题/ (/ AggregatedQuadraticAssignmentProblem/ ,/ AQAP/ )/ 模型/ ,/ 并/ 以/ AQAP/ 模型/ 为/ 指导/ ,/ 提出/ 了/ 一种/ 新颖/ 的/ 基于/ 聚类分析/ 的/ 进程/ 映射/ 优化/ 方法/ ./ 该/ 方法/ 首先/ 使用/ 谱/ 聚类/ 算法/ 对/ 进程/ 通信/ 模式/ 进行/ 聚类分析/ ,/ 然后/ 采用/ 自/ 适应/ 聚合/ 进程/ 映射/ 策略/ 实现/ 进程/ 簇到/ 物理/ 拓扑/ 的/ 映射/ ,/ 最后/ 使用/ 聚合/ Pair/ -/ Exchange/ 算法/ 对/ 进程/ 簇/ 映射/ 进行/ 进一步/ 优化/ ./ 文中/ 提出/ 的/ 优化/ 方法/ 首次/ 将/ 谱/ 聚类分析/ 应用/ 于/ 进程/ 映射/ 问题/ ,/ 可以/ 有效/ 减少/ 远距离/ 通信/ ,/ 增强/ 通信/ 的/ 局部性/ ./ NPB/ 基准/ 程序/ 及/ 两道/ 实际/ 应用/ 的/ 实验/ 结果表明/ ,/ 文中/ 提出/ 的/ 进程/ 映射/ 优化/ 方法/ 可以/ 使/ 程序/ 获得/ 明显/ 的/ 性能/ 提升/ ,/ 优于/ 现有/ 的/ 基于/ Pair/ -/ Exchange/ 以及/ 基于/ 图/ 划分/ 的/ 进程/ 映射/ 方法/ ./ 关键词/ 通信/ 模式/ ;/ 物理/ 拓扑/ ;/ 进程/ 映射/ ;/ 谱/ 聚类/ ;/ MPI1/ 引言/ 随着/ 高性能/ 计算机系统/ 并行/ 规模/ 尤其/ 是/ 片/ 内/ 并行度/ 的/ 持续/ 增大/ ,/ 通信/ 墙/ 问题/ 变得/ 越来越/ 突出/ ./ 片内/ 处理器/ 核心/ 数量/ 的/ 增多/ 使得/ 单芯片/ 计算能力/ 有/ 了/ 跨越式/ 发展/ ,/ 但/ 增长/ 缓慢/ 的/ 网络/ 端口/ 数量/ 和/ 日渐/ 增大/ 的/ 网络/ 直径/ 使得/ 通信/ 能力/ 成为/ 限制/ 程序/ 性能/ 的/ 瓶颈/ ./ 已有/ 研究/ [/ 1/ -/ 3/ ]/ 表明/ ,/ 逻辑/ 进程/ 与/ 物理/ 拓扑/ 的/ 映射/ 对于/ 程序/ 性能/ 有着/ 重要/ 影响/ ./ 合理/ 的/ 进程/ -/ 物理/ 拓扑/ 映射/ 可以/ 使/ 更/ 多/ 的/ 进程/ 间通信/ 控制/ 在/ 通信/ 效率/ 更/ 高/ 的/ 局部/ 范围/ 内/ (/ 如/ 节点/ 内/ )/ ,/ 提高/ 通信/ 效率/ 并/ 减少/ 拥塞/ ./ 这/ 对于/ 具有/ 高片/ 内/ 并行度/ 和/ 长/ 网络/ 直径/ 的/ 高性能/ 计算机系统/ 尤为重要/ ./ 进程/ 拓扑/ 映射/ 问题/ 属于/ 组合/ 优化/ 范畴/ ,/ 已经/ 被/ 证明/ 是/ 一个/ NP/ 难/ 问题/ [/ 4/ -/ 5/ ]/ ,/ 因此/ 无法/ 在/ 合理/ 时间/ 内/ 给出/ 实际/ 规模/ 并行程序/ 的/ 最优/ 进程/ 拓扑/ 映射/ ./ 传统/ 的/ 进程/ 映射/ 优化/ 模型/ 以/ 进程/ 作为/ 映射/ 粒度/ ,/ 由于/ 映射/ 粒度/ 过细/ ,/ 导致/ 搜索/ 最优/ 映射/ 效率/ 偏低/ ,/ 且/ 可能/ 破坏/ 通信/ 密集/ 的/ 进程/ 簇/ 的/ 整体性/ ./ 针对/ 上述/ 问题/ ,/ 本文/ 提出/ 一种/ 聚合/ 的/ 二次/ 分配/ 问题/ (/ AQAP/ )/ 模型/ ,/ 该/ 模型/ 使用/ 聚合/ 的/ 进程/ 簇/ 作为/ 最优/ 映射/ 的/ 搜索/ 粒度/ ,/ 不仅/ 能够/ 提高/ 最优/ 解/ 搜索/ 效率/ ,/ 而且/ 可以/ 避免/ 进程/ 簇/ 整体性/ 遭到/ 破坏/ ./ 以/ 传统/ 进程/ 映射/ 优化/ 模型/ 为/ 指导/ ,/ 研究/ 人员/ 提出/ 了/ 多种/ 启发式/ 算法/ 用以/ 求解/ 进程/ 拓扑/ 映射/ 问题/ 的/ 近似/ 最优/ 解/ ,/ 包括/ 基于/ 对/ 交换/ (/ Pair/ -/ Exchange/ [/ 6/ ]/ )/ 以及/ 基于/ 图/ 划分/ 的/ 一系列/ 启发式/ 算法/ [/ 7/ -/ 11/ ]/ ./ 然而/ 上述/ 大多数/ 算法/ 存在/ 易/ 收敛/ 于/ 较差/ 的/ 局部/ 最优/ 解/ 或/ 搜索/ 效率/ 低等/ 问题/ ./ 为此/ ,/ 本文/ 以/ AQAP/ 模型/ 为/ 指导/ 提出/ 一种/ 新颖/ 的/ 基于/ 聚类分析/ 的/ 进程/ 拓扑/ 映射/ 优化/ 方法/ ./ 与/ 传统/ 方法/ 不同/ ,/ 本文/ 方法/ 以/ 进程/ 簇为/ 搜索/ 粒度/ 求解/ 优化/ 映射/ ,/ 因此/ 进程/ 簇/ 内部/ 的/ 通信/ 密集/ 程度/ 对于/ 程序/ 通信/ 的/ 局部性/ 至关重要/ ,/ 进而/ 对/ 程序/ 性能/ 产生/ 直接/ 影响/ ./ 我们/ 选用/ 谱/ 聚类/ 算法/ 对/ 进程/ 进行/ 分簇/ ,/ 是因为/ 谱/ 聚类/ 算法/ 具有/ 以下/ 特点/ :/ (/ 1/ )/ 对/ 进程/ 进行/ 谱/ 聚类分析/ 可以/ 得到/ 若干/ 簇内/ 通信量/ 最大化/ 、/ 簇间/ 通信量/ 最小化/ 的/ 进程/ 簇/ ,/ 符合/ 进程/ 簇/ 内部/ 通信/ 密集/ 化/ 的/ 根本/ 需求/ ./ (/ 2/ )/ 谱/ 聚类/ 是/ 建立/ 在/ 谱/ 理论/ 基础/ 上/ 的/ 新兴/ 聚类/ 算法/ ,/ 通过/ 使用/ 特征向量/ 完成/ 对/ 原始数据/ 的/ 降维/ 分析/ 处理/ ./ 因此/ 谱/ 聚类/ 算法/ 具有/ 收敛/ 于/ 全局/ 最优/ 解且/ 计算/ 复杂度/ 低/ 的/ 突出/ 优点/ [/ 12/ ]/ ./ 以上/ 特点/ 可以/ 避免/ 本文/ 优化/ 方法/ 陷入/ 较差/ 的/ 局部/ 最优/ 解/ ,/ 并且/ 可以/ 高效/ 处理/ 大规模/ 数据/ ./ (/ 3/ )/ 通信/ 模式/ 矩阵/ 可以/ 满足/ 谱/ 聚类/ 对/ 数据/ 的/ 要求/ ./ 而/ 其他/ 聚类/ 算法/ (/ 如/ K/ -/ means/ 算法/ )/ 一般/ 要求/ 数据/ 必须/ 是/ 多维/ 欧氏/ 空间/ 中/ 的/ 向量/ ,/ 而/ 这/ 是/ 通信/ 模式/ 无法/ 提供/ 的/ ./ 在/ 进程/ 分簇/ 的/ 基础/ 上/ ,/ 本文/ 设计/ 了/ 朴素/ 映射/ 、/ First/ -/ Fit/ 和/ MostReservation/ 三种/ 进程/ 簇/ 映射/ 策略/ ./ 进程/ 簇/ 映射/ 模块/ 根据/ 聚类分析/ 结果/ 的/ 均衡性/ 和/ 进程/ 簇/ 数量/ 的/ 差异/ ,/ 自/ 适应/ 地/ 选择/ 上述/ 三种/ 策略/ 进行/ 进程/ 簇/ 映射/ ./ 最后/ ,/ 本文/ 通过/ 在/ 进程/ 簇/ 映射/ 结果/ 的/ 基础/ 上/ 复用/ 已有/ 的/ 启发式/ 算法/ ,/ 进一步/ 优化/ 映射/ 结果/ ./ 本文/ 的/ 主要/ 贡献/ 总结/ 如下/ :/ (/ 1/ )/ 针对/ 现有/ 的/ 进程/ 映射/ 模型/ 粒度/ 过细/ 的/ 问题/ ,/ 提出/ 了/ 聚合/ 的/ 二次/ 分配/ 问题/ AQAP/ 模型/ ./ (/ 2/ )/ 首次/ 在/ 进程/ 映射/ 优化/ 问题/ 中/ 引入/ 谱/ 聚类分析/ ,/ 提出/ 了/ 通信/ 模式/ 正规化/ 谱/ 聚类/ 算法/ (/ CP/ -/ NSC/ 算法/ )/ ,/ 利用/ 谱/ 聚类/ 算法/ 效率高/ 、/ 处理/ 数据/ 能力/ 强/ 、/ 收敛/ 于/ 全局/ 最优/ 解/ 、/ 聚类/ 结果/ 均衡/ 等/ 特点/ 解决/ 进程/ 分簇/ 问题/ ./ (/ 3/ )/ 针对/ 进程/ 簇/ 映射/ 问题/ ,/ 提出/ 了/ 自/ 适应/ 聚合/ 进程/ 映射/ 策略/ ./ 策略/ 根据/ 进程/ 聚类/ 结果/ 的/ 均衡性/ 和/ 进程/ 簇/ 数量/ ,/ 自/ 适应/ 地/ 在/ 朴素/ 映射/ 、/ First/ -/ Fit/ 以及/ MostReservation/ 三种/ 进程/ 簇/ 映射/ 算法/ 中/ 做出/ 选择/ ./ 另外/ ,/ 本文/ 还/ 提出/ 了/ 适用/ 于/ AQAP/ 模型/ 的/ 聚合/ Pair/ -/ Exchange/ 算法/ (/ APE/ 算法/ )/ ,/ 对/ 进程/ 簇/ 映射/ 作/ 进一步/ 优化/ ./ 本文/ 第/ 2/ 节是/ 相关/ 工作/ 介绍/ ;/ 第/ 3/ 节/ 介绍/ 进程/ 拓扑/ 映射/ 问题/ 的/ 模型/ 和/ 方法/ ,/ 并/ 提出/ 改进/ 的/ 聚合/ 模型/ ;/ 第/ 4/ 节/ 介绍/ 基于/ 聚类分析/ 的/ 进程/ 映射/ 优化/ 的/ 设/ Page3/ 计与/ 实现/ ;/ 第/ 5/ 节/ 给出/ 基准/ 测试程序/ 和/ 实际/ 应用/ 的/ 实验/ 结果/ ,/ 对/ 本文/ 提出/ 的/ 方法/ 进行/ 验证/ ;/ 最后/ 得出结论/ ,/ 并/ 对/ 本文/ 的/ 内容/ 进行/ 总结/ 和/ 展望/ ./ 2/ 相关/ 工作/ 众多/ 学者/ 对/ 进程/ 拓扑/ 映射/ 优化/ 问题/ 做/ 了/ 多方位/ 的/ 研究/ ./ 共同/ 的/ 指导思想/ 是/ 通过/ 将/ 进程/ 重新/ 映射/ 到/ 底层/ 物理/ 拓扑/ ,/ 使得/ 总/ 通信/ 开销/ 最小/ ./ 由于/ MPI/ ①/ 已经/ 成为/ 消息传递/ 编程/ 模型/ 事实上/ 的/ 工业/ 标准/ ,/ 在/ MPI/ 内部/ 实现/ 进程/ 拓扑/ 优化/ 成为/ 一种/ 常用/ 的/ 思路/ ./ 文献/ [/ 13/ -/ 14/ ]/ 研究/ 了/ 在/ MPI/ 中/ 通过/ 修改/ MPI/ 拓扑/ 相关/ 函数/ 实现/ 虚拟/ 拓扑/ 到/ 物理/ 拓扑/ 的/ 映射/ ./ 但是/ 此类/ 方法/ 需要/ 调用/ MPI/ 接口/ 实现/ 映射/ 优化/ 功能/ ,/ 这/ 对于/ 源码/ 复杂/ 的/ 程序/ 是/ 不易/ 用/ 的/ ./ Chen/ 等/ 人/ 在/ 文献/ [/ 8/ ]/ 中/ 首次/ 提出/ 了/ 一种/ 全/ 自动化/ 的/ 进程/ 映射/ 方案/ MPIPP/ ,/ 该/ 方案/ 不再/ 依靠/ 用户/ 知识/ 给出/ 通信/ 模式/ 和/ 物理/ 拓扑/ ,/ 而是/ 通过/ MPI/ 通信/ 模式/ 采集/ 工具/ 以及/ 物理/ 拓扑/ 信息/ 探测/ 工具/ 自动化/ 获取/ ./ MPIPP/ 还/ 提出/ 了/ 一种/ 比/ 以往/ 方法/ 更/ 有效/ 的/ 映射/ 优化/ 算法/ ./ 然而/ MPIPP/ 只/ 考虑/ 了/ 点对点/ 通信/ ./ Zhang/ 等/ 人/ [/ 11/ ]/ 的/ 工作/ 对此/ 进行/ 了/ 完善/ ,/ 他们/ 提出/ 了/ 一种/ 针对/ 集合/ 通信/ 的/ 进程/ 映射/ 优化/ 方法/ ,/ 称为/ OPP/ ./ OPP/ 方法/ 通过/ 将/ 集合/ 通信/ 转换/ 为/ 等效/ 的/ 点对点/ 通信/ 实现/ 对/ 集合/ 通信/ 信息/ 的/ 自动/ 采集/ ,/ 然后/ 使用/ 已有/ 的/ 进程/ 映射/ 优化/ 算法/ 实现/ 进程/ 到/ 物理/ 拓扑/ 的/ 映射/ ./ Bhatele/ 等/ 人/ 在/ 文献/ [/ 1/ ,/ 3/ ]/ 中/ 提出/ 了/ 一个/ 基于/ 多种/ 启发式/ 算法/ 的/ 并行程序/ 自动/ 映射/ 框架/ ./ 该/ 框架/ 通过/ 程序/ 剖面/ 技术/ 获取/ 通信/ 模式/ ,/ 然后/ 分析/ 通信/ 模式/ 并/ 将/ 其/ 归类/ ,/ 最后/ 根据/ 通信/ 模式/ 的/ 种类/ 动态/ 选择/ 不同/ 的/ 启发式/ 算法/ 寻找/ 最优/ 进程/ 拓扑/ 映射/ ./ 该/ 研究/ 工作/ 总结/ 并/ 集成/ 了/ 众多/ 传统/ 的/ 启发式/ 映射/ 算法/ ,/ 主要/ 针对/ IBMBlueGene/ 等/ 具有/ 环网/ (/ torus/ )/ 结构/ 的/ 计算机系统/ ./ 基于/ 开源/ 的/ 图/ 划分/ 软件/ 实现/ 进程/ 重新/ 映射/ 是/ 近年来/ 的/ 研究/ 热点/ ,/ 常用/ 的/ 开源/ 图/ 划分/ 软件包/ 有/ METIS/ [/ 15/ ]/ 、/ Scotch/ [/ 16/ ]/ 和/ Jostle/ [/ 17/ ]/ 等/ ./ 文献/ [/ 7/ ]/ 中/ 首先/ 使用/ 与/ 文献/ [/ 8/ ]/ 相似/ 的/ 方法/ 追踪/ 程序/ 进程/ 间/ 通信量/ ,/ 不同/ 的/ 是/ 后者/ 在/ 后续/ 处理/ 中/ 使用/ 了/ Scotch/ 图/ 划分/ 软件/ 获得/ 通信/ 图到/ 物理/ 拓扑图/ 的/ 优化/ 映射/ ./ 其后/ ,/ Mercier/ 和/ Jeannot/ 在/ 文献/ [/ 9/ ]/ 中/ 提出/ 了/ TreeMatch/ 算法/ ,/ 用于/ 解决/ NUMA/ 体系结构/ 下/ 的/ MPI/ 进程/ 近似/ 最优/ 映射/ ./ 该/ 算法/ 采用/ 了/ 与/ 本文/ 类似/ 的/ 思想/ ,/ 首先/ 将/ 进程/ 按照/ 通信/ 亲和性/ 分组/ ,/ 然后/ 以/ 进程/ 组为/ 单位/ 进行/ 图/ 匹配/ ,/ 与/ 本文/ 不同/ ,/ TreeMatch/ 使用/ 的/ 进程/ 分组/ 算法/ GroupProcesses/ 采取/ 贪心/ 策略/ 寻找/ 独立/ 进程/ 集/ ,/ 并且/ 算法/ 的/ 复杂度/ 较/ 高/ ./ 文献/ [/ 18/ ]/ 提出/ 了/ GroupProcesses/ 算法/ 的/ 快速/ 版本/ ,/ 但是/ 需要/ 借助/ 用户/ 指定/ 切换/ 阈值/ ,/ 增加/ 了/ 用户/ 参与/ 程度/ ,/ 并且/ 沿用/ 了/ 分组/ 的/ 贪心/ 策略/ ./ Subramoni/ 等/ 人/ 在/ 文献/ [/ 10/ ]/ 中/ 提出/ 了/ 一种/ 针对/ IB/ 网络/ 的/ 拓扑/ 感知/ 进程/ 映射/ 服务/ ./ 使用/ Neighbor/ -/ Joining/ 算法/ 在/ 用户/ 级/ 发掘/ IB/ 网络/ 路由/ 和/ 交换/ 信息/ ,/ 并/ 使用/ Jostle/ 等/ 图/ 划分/ 工具/ 完成/ 进程/ 图到/ 网络拓扑/ 图/ 的/ 映射/ 优化/ ./ 与/ 本文/ 不同/ ,/ 该/ 工作/ 是/ 通过/ 修改/ MPI/ 开源/ 实现/ MVAPICH2/ ②/ 实现/ 的/ ,/ 并且/ 更/ 侧重于/ 底层/ 网络拓扑/ 的/ 获取/ 和/ 抽象/ ./ vonAlfthan/ 等/ 人/ [/ 19/ ]/ 的/ 工作/ 则/ 更/ 侧重于/ 解决/ 不规则/ 物理/ 拓扑/ 上/ 的/ 进程/ 映射/ 优化/ 问题/ ./ 该/ 工作/ 以/ 进程/ 作为/ 映射/ 粒度/ ,/ 针对/ 高性能/ 计算/ 系统/ 的/ 可用/ 资源/ 不/ 连续/ 的/ 实际/ 情景/ ,/ 使用/ 标准/ 模拟退火/ 算法/ 寻找/ 最优/ 映射/ ,/ 并/ 借助/ 并行/ 化/ 加快/ 搜索/ 速度/ ./ Leung/ 等/ 人/ [/ 20/ ]/ 的/ 工作/ 同样/ 针对/ 非/ 连续/ 分配任务/ 的/ 计算机系统/ (/ 如/ CrayX/ 系列/ )/ ./ 该/ 工作/ 提出/ 了/ 一组/ 任务/ 映射/ 算法/ 解决/ 具有/ 筛网/ (/ stencil/ )/ 通信/ 模式/ 的/ 并行程序/ 在/ CrayXE/ 系统/ 上/ 的/ 任务/ 映射/ 问题/ ./ 聂/ 鹏程/ 等/ 人/ 在/ 文献/ [/ 21/ ]/ 中/ 提出/ 了/ 一种/ 自/ 适应/ 任务/ 映射/ 算法/ ,/ 该/ 算法/ 首先/ 通过/ 分析/ 任务/ 运行/ 时/ 的/ 平均/ 停驻/ 时间/ 得出/ 任务/ 的/ 计算/ 需求/ 然后/ 根据/ 需求/ 以及/ 各/ CPU/ 核/ 的/ 负载/ 情况/ 将/ 任务/ 映射/ 到/ 合适/ 的/ CPU/ 核上/ 运行/ ./ Brandfass/ 等/ 人/ 在/ 文献/ [/ 6/ ]/ 中/ 形式化/ 地/ 总结/ 了/ 进程/ 重新/ 映射/ 的/ 数学模型/ ,/ 评估/ 了/ 已有/ 启发式/ 算法/ 的/ 复杂度/ ,/ 并/ 对/ 基于/ Pair/ -/ Exchange/ 的/ 启发式/ 算法/ 进行/ 了/ 优化/ ,/ 降低/ 了/ 其/ 计算/ 量/ ./ 与/ 文献/ [/ 19/ ]/ 类似/ ,/ 该/ 研究/ 工作/ 仍然/ 以/ 进程/ 作为/ 映射/ 粒度/ ./ 本文/ 提出/ 了/ 一种/ 聚合/ 的/ 二次/ 分配/ 问题/ 模型/ AQAP/ ,/ 并/ 以/ AQAP/ 模型/ 为/ 指导/ ,/ 提出/ 了/ 一种/ 基于/ 聚类分析/ 的/ 进程/ 簇/ 拓扑/ 映射/ 优化/ 方法/ ,/ 着重/ 解决/ 传统/ 模型/ 和/ 方法/ 的/ 低效/ 、/ 易/ 破坏/ 进程/ 簇/ 整体性/ 及易/ 陷入/ 较差/ 局部/ 最近/ 解等/ 问题/ ./ 3/ 模型/ 和/ 方法/ 在/ 消息传递/ 模型/ 中/ ,/ 两个/ 进程/ 间/ 一次/ 独立/ 的/ 通/ ①/ ②/ Page4/ 信/ 行为/ 的/ 时间/ 开销/ 取决于/ 两/ 部分/ :/ 消息/ 的/ 长度/ 和/ 通信/ 双方/ 所在/ 的/ 物理/ 位置/ ./ 因此/ 一个/ 合理/ 的/ 通信/ 开销/ 模型/ 必须/ 将/ 通信/ 模式/ 和/ 物理/ 拓扑/ 考虑/ 在内/ ./ 3.1/ QAP/ 模型/ 已有/ 的/ 研究/ [/ 2/ ,/ 6/ ,/ 19/ ]/ 为/ 进程/ 映射/ 优化/ 问题/ 建立/ 了/ 如下/ 模型/ ./ 对于/ 一个/ 拥有/ n/ 个/ 进程/ 、/ 运行/ 在/ n/ 个/ CPU/ 核心/ 上/ 的/ 应用程序/ ,/ 定义/ 犃/ ∈/ 犚/ n/ ×/ n/ 为/ 通信/ 模式/ 矩阵/ ,/ 其中/ 元素/ aij/ 表示/ 进程/ i/ 发送至/ 进程/ j/ 的/ 通信量/ ;/ 定义/ 犅/ ∈/ 犚/ n/ ×/ n/ 为/ 拓扑/ 距离/ 矩阵/ ,/ 其中/ 元素/ bij/ 表示/ CPU/ 核心/ i/ 和/ CPU/ 核心/ j/ 之间/ 的/ 距离/ ./ 至此/ 寻找/ MPI/ 进程/ 到/ 物理/ 拓扑/ 的/ 最优/ 映射/ 可以/ 形式化/ 为/ 如下/ 二次/ 分配/ 问题/ (/ QuadraticAssignmentProblem/ ,/ QAP/ )/ ./ 寻找/ 一种/ 进程/ -/ CPU/ 核心/ 间/ 的/ 一对一/ 映射/ π/ ,/ 使得/ 式/ (/ 1/ )/ 总体/ 通信/ 开销/ 最小化/ ./ 每/ 一种/ 映射/ π/ 即/ 是/ QAP/ 问题/ 的/ 一个/ 解/ ,/ 一般/ 用/ 序列/ {/ 0/ ,/ 1/ ,/ 2/ ,/ …/ ,/ n/ -/ 1/ }/ 的/ 一种/ 排列/ 来/ 表示/ ,/ 其/ 含义/ 是/ 将/ 进程/ i/ 映射/ 到/ CPU/ 核心/ π/ (/ i/ )/ 上/ ./ 在/ 过去/ 的/ 数十年/ 中/ ,/ 尽管/ 吸引/ 了/ 大量/ 的/ 研究/ ,/ QAP/ 问题/ 仍然/ 是/ 最难/ 解决/ 的/ 优化/ 问题/ 之一/ ,/ 甚至/ 当/ n/ 很/ 小时/ (/ 不/ 大于/ 50/ )/ 就/ 无法/ 在/ 合理/ 的/ 时间/ 内/ 计算/ 出/ 准确/ 的/ 最优/ 解/ ./ 事实上/ ,/ Sahni/ 和/ Gonzalez/ [/ 4/ ]/ 已经/ 证明/ QAP/ 问题/ 是/ NP/ 难/ 问题/ ,/ 因此/ 提高/ 启发式/ 算法/ 的/ 效率/ 和/ 准确性/ 对于/ 进程/ 映射/ 优化/ 问题/ 至关重要/ ./ 3.2/ AQAP/ 模型/ 在/ 过去/ 长/ 时期/ 内/ ,/ 以/ QAP/ 模型/ 为/ 指导/ 的/ 多种/ 启发式/ 算法/ 取得/ 了/ 良好/ 的/ 进程/ 映射/ 效果/ ./ 然而/ 随着/ 程序/ 和/ 系统/ 规模/ 的/ 快速增长/ ,/ QAP/ 模型/ 粒度/ 过细/ 的/ 缺陷/ 越来越/ 明显/ ,/ 导致/ 最优/ 解/ 搜索/ 效率/ 低/ 、/ 易/ 破坏/ 进程/ 簇/ 整体性/ 和/ 易/ 陷入/ 较差/ 局部/ 最优/ 解等/ 问题/ ./ 针对/ 上述/ 问题/ ,/ 我们/ 提出/ 了/ 如下/ 聚合/ QAP/ 模型/ (/ AggregatedQAP/ ,/ AQAP/ )/ ./ 寻找/ 一种/ 进程/ 簇/ -/ CPU/ 核心/ 组/ 之间/ 的/ 映射/ Π/ (/ 注意/ 到/ 由/ Π/ 细化/ 即可/ 得到/ 映射/ π/ )/ ,/ 使得/ 式/ (/ 2/ )/ 总体/ 通信/ 开销/ 最小化/ ./ 其中/ k/ 表示/ 进程/ 簇/ 的/ 数量/ ,/ Costij/ 表示/ 进程/ 簇/ i/ 中/ 各/ 进程/ 与/ 进程/ 簇/ j/ 中/ 各/ 进程/ 之间/ 通信/ 的/ 总开销/ ./ 一般/ 地/ ,/ Costij/ 可由式/ (/ 3/ )/ 计算/ 得到/ ./ Costij/ =/ ∑/ ni/ -/ 1/ 其中/ ni/ 和/ nj/ 分别/ 表示/ 进程/ 簇/ i/ 和/ 进程/ 簇/ j/ 中/ 的/ 进程/ 数量/ ,/ 等式/ 右边/ 两项/ 分别/ 表示/ 进程/ 簇/ i/ 中/ 各/ 进程/ 向/ 进程/ 簇/ j/ 中/ 各/ 进程/ 发送/ 消息/ 的/ 开销/ 以及/ 反/ 方向/ 发送/ 消息/ 的/ 开销/ ./ 与/ 传统/ QAP/ 模型/ 相比/ ,/ AQAP/ 模型/ 有/ 如下/ 特点/ :/ (/ 1/ )/ 求解/ AQAP/ 仍然/ 是/ NP/ 难/ 问题/ ,/ 但是/ 搜索/ 最优/ 解/ 的/ 效率/ 大大提高/ ./ 在/ 求解/ 过程/ 中待/ 映射/ 的/ 对象/ 数量/ 由/ 进程/ 数/ n/ 变为/ 进程/ 簇数/ k/ (/ 通常/ k/ / n/ // 2/ )/ ,/ 搜索/ 空间/ 显著/ 缩小/ ./ (/ 2/ )/ 求解/ 过程/ 不会/ 破坏/ 进程/ 簇/ 的/ 整体性/ ./ 在/ 初始/ 映射/ 时/ 保证/ 绝大多数/ 进程/ 簇/ 映射/ 到/ 邻近/ 连续/ 核心/ 上/ ,/ 在/ 进行/ 映射/ 的/ 重新/ 调整/ 时/ ,/ 以/ 进程/ 簇为/ 单位/ 进行/ 重新/ 映射/ ,/ 因此/ 重新/ 映射/ 后/ 进程/ 簇/ 还是/ 映射/ 到/ 邻近/ 连续/ 核心/ 上/ ,/ 其/ 整体性/ 得到/ 保留/ ./ (/ 3/ )/ 以/ AQAP/ 为/ 指导/ 的/ 进程/ 重新/ 映射/ 的/ 质量/ 十分/ 依赖于/ 进程/ 聚类/ 的/ 准确性/ ./ 由于/ 特点/ (/ 2/ )/ ,/ 具有/ 良好/ 通信/ 局部性/ 的/ 进程/ 簇/ 得以/ 映射/ 到/ 拓扑/ 局部性/ 的/ 核心/ 上/ ,/ 但/ 若/ 聚类/ 结果/ 较差/ (/ 进程/ 簇/ 内部/ 通信/ 不够/ 密集/ )/ ,/ 这种/ 耦合度/ 差/ 的/ 进程/ 簇/ 也/ 将/ 作为/ 整体/ 出现/ 在/ 最终/ 的/ 进程/ 映射/ 结果/ 中/ ./ 3.3/ 通信/ 模式/ 矩阵/ 和/ 拓扑/ 距离/ 矩阵/ 模型/ 通信/ 模式/ 矩阵/ 须要/ 反映/ 出/ 并行程序/ 进程/ 间/ 的/ 通信/ 需求/ ,/ 通信/ 需求/ 高/ 的/ 进程/ 映射/ 到/ 邻近/ 的/ 物理/ 位置/ 上/ 可以/ 获得/ 较/ 高/ 的/ 通信/ 效率/ ./ 已有/ 研究/ 中/ 使用/ 了/ 多种/ 度量/ 标准/ 对/ 通信/ 模式/ 建模/ ,/ 比如/ 通信量/ 、/ 通信/ 频率/ 以及/ 通信量/ 和/ 通信/ 频率/ 的/ 组合/ 等/ ./ 拓扑/ 距离/ 矩阵/ 须/ 反映/ 的/ 物理/ 意义/ 是/ CPU/ 核心/ 间/ 传输/ 单位/ 消息/ 所耗/ 的/ 时间/ ,/ 即/ LogP/ 模型/ [/ 22/ ]/ 中/ 的/ gap/ ,/ 因此/ 通信量/ 与/ 拓扑/ 距离/ 的/ 乘积/ 反映/ 的/ 物理/ 意义/ 便是/ 通信/ 耗时/ ./ 而/ 通信量/ 和/ 通信/ 频率/ 的/ 组合/ 量/ 与/ 拓扑/ 距离/ 的/ 乘积/ 反而/ 失去/ 了/ 原有/ 的/ 物理/ 意义/ ,/ 因此/ 我们/ 选用/ 通信量/ 作为/ 通信/ 模式/ 的/ 度量/ 标准/ ./ 拓扑/ 距离/ 矩阵/ 本质/ 上/ 须要/ 反映/ 出/ CPU/ 核心/ 间通信/ 带宽/ 的/ 差别/ ./ 根据/ 目前/ 高性能/ 计算机/ 典型/ 的/ 层次化/ 拓扑/ 结构/ ,/ 我们/ 定义/ 节点/ 内/ 、/ 交换机/ 内/ 和/ 交换机/ 间/ CPU/ 核心/ 单位/ 消息/ 传输/ 耗时/ 分别/ 为/ tintra/ -/ node/ 、/ tintra/ -/ switch/ 和/ tinter/ -/ switch/ ./ 因此/ 构建/ 拓扑/ 距离/ 矩阵/ 犅/ 的/ 模型/ 如下/ :/ tintra/ -/ node/ ,/ 核心/ i/ 、/ j/ 属于/ 同一/ 节点/ 烄/ tintra/ -/ switch/ ,/ 核心/ i/ 、/ j/ 属于/ 同一/ 交换机/ 下/ 不同/ 节点/ bij/ =/ 烅/ tinter/ -/ switch/ ,/ 核心/ i/ 、/ j/ 烆/ tintra/ -/ node/ 、/ tintra/ -/ switch/ 和/ tinter/ -/ switch/ 的/ 取值/ 需要/ 实测/ 或/ 网络/ 参数/ 的/ 指导/ ./ Page54/ 基于/ 聚类分析/ 的/ 进程/ 映射/ 优化/ 以/ AQAP/ 模型/ 为/ 指导/ ,/ 设计/ 基于/ 聚类分析/ 的/ 进程/ 映射/ 优化/ 框架/ 如图/ 1/ 所示/ ./ 根据/ 应用/ 需求/ ,/ 本文/ 进程/ 映射/ 优化/ 方法/ 分为/ 单层/ 映射/ 和/ 层次化/ 指定/ 映射/ 两类/ ./ 单层/ 映射/ 将/ 进程/ 直接/ 映射/ 到/ 节点/ 内/ ,/ 适用/ 于/ 扁平/ 式/ 拓扑/ 结构/ 的/ 计算环境/ ./ 层次化/ 指定/ 映射/ 将/ 进程/ 映射/ 到/ 指定/ 的/ 聚合/ 节点/ 上/ ,/ 适用/ 于/ 大规模/ 层次化/ 拓扑/ 结构/ 的/ 计算/ 系统/ ./ 4.1/ ~/ 4.4/ 小节/ 和/ 4.5/ 小节/ 将/ 分别/ 阐述/ 基于/ 聚类分析/ 的/ 单层/ 映射/ 以及/ 层次化/ 指定/ 映射/ 的/ 设计/ 与/ 实现/ ./ 4.1/ 轻量级/ 通信/ 模式/ 追踪/ 多种/ 功能/ 复杂/ 的/ 工具/ 可以/ 对/ MPI/ 程序/ 进行/ 追踪/ (/ tracing/ )/ 和/ 分析/ ,/ 比如/ MPICH2/ 自带/ 的/ 分析/ 工具/ MPE/ ./ 然而/ 使用/ 这些/ 工具/ 进行/ 通信/ 模式/ 采集/ 存在/ 如下/ 问题/ :/ (/ 1/ )/ 因为/ 追踪/ 的/ 事件/ 繁多/ ,/ 追踪/ 文件/ 的/ 体积/ 往往/ 过于/ 巨大/ ;/ (/ 2/ )/ 采集/ 到/ 的/ 信息/ 不能/ 满足需要/ ,/ 如/ MPE/ 对/ 通信量/ 的/ 采集/ 没有/ 考虑/ 集合/ 通信/ ./ 基于/ 上述/ 原因/ 我们/ 开发/ 了/ 专用/ 的/ 轻量级/ 通信/ 插装库/ ,/ 通过/ 重新/ 定义/ MPI/ 点对点/ 通信/ 和/ 集合/ 通信接口/ ,/ 覆盖/ MPI/ 原有/ 的/ 弱/ 引用/ 接口/ ,/ 完成/ 通信/ 模式/ 所/ 需/ 数据/ 的/ 采集/ ./ 考虑/ 到/ 数据/ 的/ 通用性/ ,/ 我们/ 只/ 采集/ 了/ MPI/ 进程/ 间/ 的/ 用户/ 数据/ 传递信息/ ,/ 而/ 由/ MPI/ 内部/ 协议/ 实现/ 引起/ 的/ 额外/ 通信/ 我们/ 没有/ 考虑/ 在内/ ./ 我们/ 的/ 轻量级/ 通信/ 插装库/ 还/ 针对性/ 地/ 采集/ 了/ 通信/ 次数/ 等/ 信息/ ./ 图/ 2/ 是/ 采集/ 到/ 的/ 通信/ 模式/ 示例/ ,/ 矩阵/ 表示/ 一个/ NPB/ 程序/ (/ cg/ ./ W/ ./ 8/ )/ 进程/ 间/ 发送/ 的/ 消息/ 数据量/ ./ 4.2/ 拓扑/ 信息/ 仿真/ 采集/ 拓扑/ 距离/ 矩阵/ 描述/ 了/ 集群/ 的/ 互连/ 层次/ ,/ 为了/ 根据/ 3.3/ 节/ 模型/ 构建/ 拓扑/ 距离/ 矩阵/ 犅/ ,/ 需要/ 判断/ 给定/ 犃/ =/ 58245830.95830/ ./ 900000/ 烄/ 5830.9582405830/ ./ 900005830.9005830/ ./ 958240000.0085830/ ./ 95830.9005824000/ ./ 00805824005830.95830/ ./ 900.0080058245830/ ./ 9005830.90/ ./ 0080005830.9058245830/ ./ 9/ 烆/ 0.00800005830/ ./ 95830/ ./ 图/ 2NPBcg/ ./ W/ ./ 8/ 程序/ 通信/ 模式/ 矩阵/ (/ aij/ 代表/ 的/ 核心/ 之间/ 的/ 关系/ 和/ 距离/ (/ 即/ gap/ ,/ 取值/ 为/ 通信/ 带宽/ 的/ 倒数/ )/ ./ 这些/ 参数/ 可以/ 由/ 系统/ 配置文件/ 或/ 通过/ 实验/ 测试/ 获取/ ./ 本文/ 采用/ single/ -/ circle/ -/ match/ 算法/ [/ 8/ ]/ 测量/ 拓扑/ 距离/ ,/ 该/ 算法/ 由/ n/ 次/ ping/ -/ pong/ 测试/ 组成/ (/ n/ 为/ CPU/ 核心/ 数/ )/ ,/ 在/ 每轮/ 迭代/ 中/ ,/ n/ // 2/ 对/ 核心/ 同时/ 交换/ ping/ -/ pong/ 消息/ ./ 该/ 方法/ 模拟/ 了/ 进程/ 间/ 同时/ 进行/ 数据传输/ 的/ 真实/ 程序/ ./ 另外/ ,/ 为了/ 避免/ 并行执行/ 中/ 可能/ 出现/ 的/ 异常/ 通信/ 拥塞/ 对/ 结果/ 准确性/ 的/ 影响/ ,/ gap/ 值/ 最高/ 的/ 10/ %/ 的/ 数据/ 会/ 被/ 忽略/ 掉/ ./ 图/ 3/ 展示/ 了/ 一套/ 示例/ 测试/ 集群/ 及其/ gap/ 拓扑图/ ,/ 根据/ 图/ 3/ (/ b/ )/ 的/ 测试/ 结果/ ,/ 我们/ 设置/ 该/ 集群/ 的/ tintra/ -/ nodetintra/ -/ switchtinter/ -/ switch/ =/ 13.74/ ./ 1/ ./ 相比/ 于/ 使用/ 经验值/ (/ 如/ 文献/ [/ 6/ ]/ )/ 或/ 配置文件/ 参/ Page6/ 数/ 构建/ 距离/ 矩阵/ ,/ 上述/ 方法/ 可以/ 准确/ 反映/ 程序/ 实际/ 运行/ 时/ 的/ 有效/ 带宽/ ,/ 而/ 配置/ 值/ 无法/ 反映/ 运行/ 时/ 的/ 拥塞/ 等/ 状态/ ./ 除此之外/ ,/ 上述/ 方法/ 中/ 所有/ 进程/ 同时/ 参与/ ,/ 具有/ 高度/ 的/ 可扩展性/ ,/ 适用/ 于/ 大规模/ 系统/ ./ 4.3/ 基于/ CP/ -/ NSC/ 算法/ 的/ 进程/ 聚类分析/ 本/ 小节/ 介绍/ 进程/ 聚类分析/ 的/ 设计/ ,/ 为/ 保证/ 进程/ 映射/ 的/ 整体/ 效果/ 和/ 效率/ ,/ 对于/ 聚类分析/ 算法/ 有/ 如下/ 要求/ :/ (/ 1/ )/ 得到/ 的/ 进程/ 簇/ 内部/ 通信/ 尽可能/ 密集/ ,/ 进程/ 簇/ 间通信/ 尽可能/ 稀疏/ ;/ (/ 2/ )/ 分簇/ 结果/ 尽可能/ 均衡/ ;/ (/ 3/ )/ 聚类/ 过程/ 高效/ ,/ 具有/ 处理/ 大规模/ 进程/ 数据/ 的/ 能力/ ./ 综合/ 分析/ 上述/ 要求/ 和/ 各类/ 聚类/ 算法/ 的/ 特点/ ,/ 我们/ 选用/ 正规化/ 谱/ 聚类/ 算法/ [/ 23/ ]/ (/ NormalizedSpectralClustering/ ,/ NSC/ )/ 对/ 进程/ 进行/ 聚类分析/ ./ 然而/ 原生/ 的/ 谱/ 聚类/ 算法/ 处理/ 的/ 对象/ 是/ 具有/ 多维/ 属性/ 的/ 点/ 数据/ ,/ 无法/ 直接/ 处理/ 通信/ 拓扑矩阵/ ,/ 例如/ 文献/ [/ 24/ ]/ 提出/ 的/ 正规化/ 谱/ 聚类/ 的/ 并行算法/ ./ 算法/ 1/ 给出/ 了/ 我们/ 设计/ 的/ 处理/ 进程/ 聚类/ 的/ NSC/ 算法/ 版本/ ,/ 称为/ 通信/ 模式/ NSC/ 算法/ (/ Commu/ -/ nicationPatternNSC/ ,/ CP/ -/ NSC/ )/ ,/ 这/ 也/ 是/ 改进/ 的/ 谱/ 聚类/ 算法/ 首次/ 应用/ 于/ 进程/ 映射/ 优化/ 问题/ ./ CP/ -/ NSC/ 算法/ 的/ 核心思想/ 是/ 对/ 问题/ 的/ 不断/ 转化/ :/ 第/ 1/ ~/ 2/ 步/ 将/ 根据/ 通信/ 模式/ 进行/ 聚类/ 的/ 问题/ 转化/ 为/ 根据/ 相似性/ 进行/ 聚类/ 的/ 问题/ ;/ 第/ 3/ ~/ 5/ 步/ 利用/ Laplacian/ 矩阵/ 性质/ 和/ 特征向量/ 将/ 相似性/ 矩阵/ 转化/ 为/ 正规化/ 特征向量/ 矩阵/ ,/ 实现/ 了/ 对/ 问题/ 的/ 降维/ 转化/ ;/ 最后/ 将/ 原/ 问题/ 转化成/ 低/ 维度/ 聚类/ 问题/ 并/ 利用/ K/ -/ means/ 算法/ 进行/ 聚类/ ,/ 其中/ 聚类/ 簇数/ k/ 对于/ 进程/ 映射/ 的/ 效果/ 有/ 重要/ 影响/ ,/ 其/ 最优/ 值/ 与/ 通信/ 模式/ 及/ 节点/ 数等/ 因素/ 相关/ ./ 一般/ 地/ ,/ k/ 值应/ 不/ 小于/ 节点/ 数量/ ,/ 且/ 应/ 随着/ 通信/ 模式/ 不规则/ 程度/ 的/ 加剧/ 而/ 增大/ ./ 根据/ 相似性/ 矩阵/ 的/ 定义/ ,/ 我们/ 在/ CP/ -/ NSC/ 算法/ 中/ 引入/ 两个/ 常量/ SELF/ _/ SIMILARITY/ 和/ MAX/ _/ SIMILARITY/ ,/ 分别/ 用以/ 表示/ 自身/ 相似/ 度/ (/ 一般/ 设置/ 为/ 1/ )/ 和/ 非/ 自身/ 最大/ 相似/ 度/ ./ 算法/ 1/ ./ CP/ -/ NSC/ 算法/ ./ 输入/ :/ 进程/ 通信/ 模式/ 矩阵/ 犃/ ,/ 进程/ 数/ n/ ,/ 聚类/ 簇数/ k/ 输出/ :/ k/ 个/ 进程/ 簇/ cluster/ (/ i/ )/ ,/ i/ =/ 0/ ,/ 1/ ,/ …/ ,/ k/ -/ 11/ ./ 根据/ 矩阵/ 犃/ 计算/ 通信量/ 矩阵/ 犃/ :/ 犃/ =/ 犃/ +/ 犃/ T2/ ./ 根据/ 矩阵/ 犃/ 计算/ 相似性/ 矩阵/ 犛/ 3/ ./ 计算/ Laplacian/ 矩阵/ 犔/ 4/ ./ 计算/ 矩阵/ 犔/ 的/ 前/ k/ 个/ 特征向量/ ,/ 并/ 使用/ 特征向量/ 构/ 5/ ./ 计算/ 矩阵/ 犞/ 的/ 正规化/ 矩阵/ 犝/ 6/ ./ 使用/ K/ -/ means/ 算法/ 对/ 矩阵/ 犝/ 的/ n/ 行/ 进行/ 聚类/ ,/ 得到/ 原生/ NSC/ 算法/ 的/ 性能/ 瓶颈/ 在于/ 由/ 多维/ 属性/ 点/ 数据/ 构建/ 相似性/ 矩阵/ ,/ 文献/ [/ 24/ -/ 25/ ]/ 详细分析/ 了/ NSC/ 算法/ 的/ 时空/ 复杂度/ ,/ 并/ 指出/ 实际/ 聚类/ 的/ 时间/ 复杂度/ 相对/ 于/ 构建/ 相似性/ 矩阵/ “/ 几乎/ 是/ 可/ 忽略/ 的/ ”/ ./ 而/ 在/ CP/ -/ NSC/ 算法/ 中/ ,/ 构建/ 相似性/ 矩阵/ 的/ 时间/ 复杂度/ 降低/ 为/ O/ (/ n2/ )/ ,/ 低于/ K/ -/ means/ 算法/ 的/ 时间/ 复杂度/ (/ O/ (/ nk2/ )/ ×/ t/ ,/ k/ 为分/ 簇/ 数量/ ,/ 一般/ 为/ 槡/ n/ 量级/ ,/ t/ 为/ 迭代/ 次数/ )/ ,/ 相比/ 于原生/ NSC/ 算法/ 则/ 时间/ 开销/ 几乎/ 可/ 忽略/ ./ 4.4/ 自/ 适应/ 聚合/ 进程/ 映射/ 策略/ 及/ 优化/ 基于/ CP/ -/ NSC/ 算法/ 的/ 进程/ 聚类分析/ 结果/ 是/ k/ 个/ 大小不等/ 的/ 进程/ 簇/ ,/ 本/ 小节/ 目标/ 是/ 将/ 上述/ k/ 个/ 进程/ 簇/ 映射/ 到/ N/ 个/ 节点/ 的/ n/ 个/ CPU/ 核心/ 上/ ,/ 并/ 使得/ 进程/ 间通信/ 尽可能/ 多地/ 集中/ 在/ 节点/ 内/ ./ 4.4/ ./ 1MPI/ 默认/ 进程/ 映射/ MPI/ _/ Init/ (/ )/ 会/ 创建/ 默认/ 的/ 逻辑/ 进程/ -/ 物理/ 核心/ 映射/ ./ MPI/ 的/ 实现/ 一般/ 会/ 提供/ 以下/ 3/ 种/ 映射/ 方式/ :/ (/ 1/ )/ Block/ 方式/ ./ 进程/ 依次/ 映射/ 到/ 按序/ 排列/ 的/ 所/ (/ 2/ )/ Round/ -/ robin/ 方式/ ./ 进程/ 被/ 循环/ 映射/ 到/ 节点/ (/ 3/ )/ Custom/ 方式/ ./ 映射/ 由/ 配置文件/ 给出/ ./ 图/ 4/ 展示/ 了/ 3/ 种/ 进程/ 分簇/ 情景/ 下/ 不同/ 进程/ 映射/ 策略/ 的/ 映射/ 结果/ ,/ 其中/ (/ a1/ )/ 、/ (/ a2/ )/ 分别/ 表示/ Round/ -/ Robin/ 方式/ 和/ Block/ 方式/ 的/ 映射/ 结果/ ./ 从/ 映射/ 结果/ 可以/ 看出/ 默认/ 的/ 进程/ 映射/ 方式/ 没有/ 考虑/ 进程/ 簇/ 的/ 内部/ 密集/ 的/ 通信/ 需求/ ./ 4.4/ ./ 2/ 自/ 适应/ 进程/ 簇/ 映射/ 策略/ 虽然/ 谱/ 聚类/ 算法/ 倾向/ 于/ 产生/ 元素/ 个数/ 相近/ 的/ 进程/ 簇/ ,/ 但是/ 通信/ 模式/ 的/ 特点/ 各异/ ,/ 使得/ 聚类/ 算法/ 并/ 不能/ 保证/ 聚类/ 结果/ 总是/ 均衡/ 的/ ,/ 并且/ 不同/ 应用/ 情景/ 下进/ 列表/ 中/ 的/ 下/ 一个/ 节点/ ./ 有/ 节点/ 的/ 所有/ 核心/ 上/ ./ Page7/ 程簇/ 的/ 数量/ 差异/ 巨大/ ./ 为了/ 适用/ 多样/ 的/ 应用/ 情景/ ,/ 我们/ 设计/ 了/ 朴素/ 映射/ 、/ First/ -/ Fit/ 以及/ MostReservation/ 三种/ 进程/ 簇/ 映射/ 策略/ ,/ 在/ 聚合/ 进程/ 映射/ 时/ 我们/ 的/ 方法/ 会/ 根据/ 进程/ 聚类/ 结果/ 均衡性/ 和/ 进程/ 簇/ 数量/ 的/ 差异/ 自/ 适应/ 地/ 在/ 以下/ 3/ 种/ 策略/ 中/ 做出/ 选择/ ./ (/ 1/ )/ 朴素/ 映射/ 策略/ (/ PlainScheme/ )/ ./ 我们/ 将/ 进程/ 簇中/ 进程/ 号/ 最小/ 的/ 进程/ 称为/ 进程/ 簇首/ 进程/ ./ 在/ 每次/ 迭代/ 中/ ,/ 该/ 策略/ 按照/ 首/ 进程/ 由小到大/ 的/ 顺序/ 依次/ 选择/ 下/ 一个/ 进程/ 簇/ ,/ 然后/ 将/ 该/ 进程/ 簇中/ 的/ 进程/ 顺序/ 映射/ 到/ CPU/ 核心/ 上/ ./ 使用/ 该/ 策略/ 的/ 映射/ 结果/ 如图/ 4/ (/ a3/ )/ 、/ (/ b3/ )/ 和/ (/ c3/ )/ 所示/ ./ (/ 2/ )/ First/ -/ Fit/ 策略/ (/ FFScheme/ )/ ./ 如/ 算法/ 2/ 所示/ ./ 首先/ 对/ 进程/ 簇/ 按照/ 所/ 含/ 进程/ 数量/ 由/ 多/ 至少/ 进行/ 稳定/ 排序/ ,/ 排序/ 的/ 目的/ 是/ 在/ 后续/ 的/ 映射/ 中/ 优先/ 考虑/ 体积/ 较大/ 的/ 进程/ 簇/ ./ 然后/ 按照/ 顺序/ 依次/ 将/ 进程/ 簇/ 进行/ 映射/ ./ 在/ 映射/ 的/ 过程/ 中/ 维护/ 一张/ 空闲/ 表/ idleTable/ [/ N/ ]/ ,/ 记录/ 每个/ 节点/ 中/ 空闲/ 核心/ 的/ 数量/ ./ 在/ 进程/ 簇/ 映射/ 时/ 通过/ 查询/ idleTable/ 获得/ 首个/ 可/ 容纳/ 该/ 进程/ 簇/ 的/ 位置/ 进行/ 映射/ ./ 若/ idleTable/ 中/ 已经/ 没有/ 足够/ 大/ 的/ 空闲/ 块/ 容纳/ 该/ 进程/ 簇/ (/ 该/ 情况/ 较/ 少/ 发生/ )/ ,/ 将/ 该/ 进程/ 簇/ 拆分/ 并/ 映射/ 到/ idleTable/ 中/ 仍旧/ 空闲/ 的/ 位置/ ./ 注意/ idleTable/ [/ i/ ]/ 初始值/ 是/ MAX/ ,/ 表示/ 空闲/ 的/ 节点/ 总是/ 可以/ 容纳/ 任一/ 进程/ 簇/ ./ 使用/ 该/ 策略/ 的/ 映射/ 结果/ 如图/ 4/ (/ a4/ )/ 、/ (/ b4/ )/ 和/ (/ c4/ )/ 所示/ ./ 算法/ 2/ ./ 进程/ 簇/ First/ -/ Fit/ 算法/ ./ 输入/ :/ 进程/ 数量/ n/ ,/ 节点/ 数量/ N/ ,/ k/ 个/ 进程/ 簇/ cluster/ (/ i/ )/ ,/ 输出/ :/ 映射/ π/ :/ 进程/ →/ CPU/ 核心/ 1/ ./ 对/ 进程/ 簇/ 按照/ 进程/ 数量/ 由大到/ 小/ 进行/ 稳定/ 排序/ 2/ ./ 初始化/ 空闲/ 表/ 3/ ./ 进程/ 簇/ First/ -/ Fit/ 映射/ (/ 3/ )/ MostReservation/ 策略/ (/ MRScheme/ )/ ./ 如/ 算法/ 3/ 所示/ ./ 顾名思义/ ,/ 该/ 策略/ 倾向/ 于/ 保留/ 尽量/ 多/ 的/ 完整/ 节点/ ,/ 与/ First/ -/ Fit/ 策略/ 类似/ ,/ MR/ 策略/ 同样/ 需要/ 在/ 映射/ 的/ 过程/ 中/ 维护/ 一张/ 空闲/ 表/ idleTable/ [/ N/ ]/ ,/ 而/ 与/ First/ -/ Fit/ 策略/ 不同/ ,/ MR/ 策略/ 不再/ 需要/ 对/ 进程/ 簇/ 按照/ 体积/ 进行/ 排序/ ./ 具体/ 过程/ 如下/ ./ 首先/ 初始化/ idleTable/ ,/ 使得/ 空闲/ 节点/ 可以/ 容纳/ 任意/ 体积/ 的/ 进程/ 簇/ ./ 然后/ 依次/ 为/ 每/ 一个/ 进程/ 簇/ cluster/ (/ i/ )/ 寻找/ 首个/ 可以/ 容纳/ 该/ 进程/ 簇/ 的/ 位置/ pos/ ./ 如果/ 可以/ 找到/ 符合条件/ 的/ pos/ 则/ 将/ cluster/ (/ i/ )/ 拟/ 映射/ 到/ pos/ 并/ 进行/ 前移/ 条件/ 检查/ ,/ 即/ 如果/ 满足/ 以下/ 条件/ :/ 算法/ 3/ ./ 进程/ 簇/ MostReservation/ 算法/ ./ 输入/ :/ 进程/ 数量/ n/ ,/ 节点/ 数量/ N/ ,/ k/ 个/ 进程/ 簇/ cluster/ (/ i/ )/ ,/ 有/ 空闲/ 邻居/ 可以/ 增加/ 空闲/ 节点/ 的/ 数量/ ./ 条件/ 1/ ./ pos/ 之前/ 还有/ 空闲/ 的/ 邻居/ 核心/ ./ 条件/ 2/ ./ 若/ 将/ cluster/ (/ i/ )/ 前移/ 至/ 占用/ pos/ 前/ 的/ 所/ 则/ 将/ cluster/ (/ i/ )/ 映射/ 到/ pos/ 前/ 首个/ 空闲/ 的/ 位置/ ./ 如此/ 可以/ 保留/ 尽量/ 多/ 的/ 完整/ 空闲/ 节点/ ./ 使用/ 该/ 策略/ 的/ 映射/ 结果/ 如图/ 4/ (/ a5/ )/ 、/ (/ b5/ )/ 和/ (/ c5/ )/ 所示/ ./ Page8/ 输出/ :/ 映射/ π/ :/ 进程/ →/ CPU/ 核心/ 1/ ./ 初始化/ 空闲/ 表/ 2/ ./ 进程/ 簇/ MostReservation/ 映射/ 朴素/ 映射/ 策略/ 过程/ 最/ 简单/ ,/ 开销/ 最小/ ,/ 适用/ 于/ 进程/ 簇/ 体积/ 均衡/ 的/ 情景/ (/ 图/ 4/ 情景/ a/ )/ ,/ 该/ 情景/ 下/ 进程/ 簇所含/ 元素/ 数量/ 几无/ 差异/ ,/ 不/ 存在/ 琐碎/ 的/ 进程/ 簇/ (/ 本文/ 中/ 称为/ 噪音/ )/ ,/ 在/ 这种/ 情景/ 下/ ,/ First/ -/ Fit/ 和/ MostReservation/ 策略/ 会/ 将/ 某些/ 进程/ 簇/ 分拆/ 映射/ 到/ 节点/ 的/ 碎片/ 上/ ,/ 而/ 朴素/ 映射/ 策略/ 则/ 可以/ 避免/ 这种/ 情况/ ./ 而/ 当/ 进程/ 簇/ 的/ 体积/ 差异/ 巨大/ 且/ 噪音/ 较多时/ ,/ 我们/ 采用/ First/ -/ Fit/ 映射/ 策略/ ,/ 因为/ First/ -/ Fit/ 策略/ 会/ 首先/ 保证/ 大块/ 体积/ 的/ 进程/ 簇/ 的/ 优先/ 映射/ ,/ 而/ 其他/ 策略/ 则/ 可能/ 破坏/ 大块/ 进程/ 簇/ 的/ 完整性/ ,/ 如图/ 4/ 情景/ b/ 所示/ ./ 然而/ 由于/ 需要/ 对/ 进程/ 簇/ 进行/ 排序/ ,/ First/ -/ Fit/ 策略/ 的/ 开销/ 最大/ ,/ 当分/ 簇/ 均衡性/ 介于/ 上述/ 两种/ 极端/ 情景/ 且/ 进程/ 簇/ 数量/ 庞大/ 时/ ,/ MostReservation/ 映射/ 策略/ 能够/ 避免/ 由/ 排序/ 引起/ 的/ 高/ 开销/ ,/ 并且/ 取得/ 更优/ 的/ 映射/ 效果/ ,/ 如图/ 4/ 情景/ c/ 所示/ ./ 在/ 此/ 情境/ 下/ ,/ 使用/ MR/ 策略/ 使得/ 更少/ 的/ 进程/ 簇分/ 跨/ 在/ 多个/ 节点/ 上/ ./ 根据上述/ 分析/ 我们/ 设计/ 自/ 适应/ 选择/ 规则/ 如下/ :/ scheme/ =/ 其中/ stdev/ (/ clusters/ )/ 为/ 进程/ 簇/ 体积/ 的/ 均/ 方差/ ,/ k/ 为/ 进程/ 簇/ 数量/ ,/ Tl/ ,/ Th/ 和/ Tk/ 分别/ 为/ 均/ 方差/ 的/ 低/ 、/ 高/ 阈值/ 和/ 进程/ 簇/ 数量/ 阈值/ ./ 规则/ 表示/ 当/ 进程/ 簇/ 体积/ 足够/ 均衡/ 时/ 采用/ 朴素/ 映射/ 策略/ ,/ 当/ 不/ 均衡/ 程度/ 达到/ 一定/ 阈值/ 且/ 进程/ 簇/ 数量/ 较/ 少时/ 采用/ First/ -/ Fit/ 策略/ ,/ 当/ 均衡/ 程度/ 介于/ 两者之间/ 时/ 采用/ MostReservation/ 策略/ ./ 4.4/ ./ 3/ 基于/ APE/ 算法/ 的/ 进程/ 簇/ 映射/ 优化/ 在/ 实现/ 了/ 4.4/ ./ 2/ 小节/ 进程/ 簇自/ 适应/ 映射/ 后/ ,/ 我们/ 可以/ 设计/ 相应/ 的/ 适用/ 于/ AQAP/ 模型/ 的/ 启发式/ 算法/ 实现/ 对/ 已有/ 算法/ 的/ 复用/ ,/ 进一步/ 优化/ 映射/ 结果/ ./ 文献/ [/ 6/ ]/ 提出/ 的/ Pair/ -/ Exchange/ 改进/ 算法/ 是/ 一种/ 耗时/ 可控/ 的/ 启发式/ 算法/ ,/ 简称/ PE/ 算法/ ./ 其/ 算法/ 描述/ 如下/ :/ 在/ 每/ 一轮/ 迭代/ 中/ ,/ 随机/ 或/ 按序/ 选择/ 进程/ 对/ (/ i/ ,/ j/ )/ ,/ 试探性/ 交换/ 两个/ 进程/ 所在/ 的/ 物理/ 位置/ 得到/ 新/ 映射/ π/ ,/ 如果/ π/ 使得/ 式/ (/ 1/ )/ 的/ 总开销/ 减小/ 则/ 执行/ 实际/ 交换/ ,/ 否则/ 维持/ 原/ 映射/ π/ ./ 利用/ AQAP/ 为/ 指导/ ,/ 我们/ 基于/ PE/ 算法/ 设计/ 聚合/ PE/ 算法/ (/ AggregatedPE/ ,/ APE/ )/ ,/ 如/ 算法/ 4/ 所示/ ./ 算法/ 首先/ 将/ 体积/ 较/ 小/ 进程/ 簇/ 标记/ 为/ 噪音/ ,/ 然后/ 对/ 大小/ 相同/ 的/ 噪音/ 使用/ PE/ 算法/ ./ 算法/ 4/ ./ APE/ 算法/ ./ 输入/ :/ 迭代/ 次数/ l/ ,/ 通信/ 模式/ 矩阵/ 犃/ ,/ 拓扑/ 距离/ 矩阵/ 犅/ ,/ 初/ 输出/ :/ 优化/ 映射/ π/ 1/ ./ 在/ cluster/ 中/ 分离/ 噪音/ noise2/ ./ 对/ 噪音/ 进程/ 簇/ 使用/ PE/ 算法/ 图/ 5/ 展示/ 了/ APE/ 算法/ 的/ 一个/ 示例/ ,/ 图中/ c/ 代表/ 大块/ 进程/ 簇/ (/ chunk/ )/ ,/ n/ 代表/ 噪音/ (/ noise/ )/ ./ 图/ 5/ (/ 1/ )/ 表示/ 进程/ 簇/ 初始/ 映射/ 结果/ ,/ 双向/ 箭头/ 所/ 连接/ 的/ 噪音/ 是/ 可/ 尝试/ 交换/ 的/ ./ 图/ 5/ (/ 2/ )/ 给出/ 了/ 一次/ 噪音/ 交换/ 后/ 的/ 结果/ ./ 只/ 对/ 噪音/ 使用/ PE/ 算法/ 是因为/ 交换/ 噪音/ 即可/ 获得/ 与/ 交换/ 非/ 噪音/ 相同/ 的/ 组合/ 结果/ (/ 图/ 5/ (/ 3/ )/ 所示/ )/ ,/ 而/ 噪音/ 交换/ 开销/ 较/ 小/ ./ Page94/ ./ 5/ 层次化/ 指定/ 映射/ 前述/ 单层/ 映射/ 可以/ 将/ 进程/ 直接/ 映射/ 到/ 各个/ 节点/ 上/ ,/ 而/ 在/ 拥有/ 多层次/ 拓扑/ 的/ 大规模/ 计算环境/ 中/ (/ 如胖/ 树结构/ 超级计算机/ )/ ,/ 出于/ 性能/ // 开销/ 的/ 考虑/ 将/ 进程/ 映射/ 到/ 大/ 的/ 聚合/ 节点/ 上/ 往往/ 是/ 更/ 实用/ 的/ 方法/ ./ 为/ 满足/ 上述/ 需求/ ,/ 我们/ 设计/ 层次化/ 指定/ 映射/ ,/ 可/ 将/ 进程/ 指定/ 映射/ 到/ 某/ 一/ 层交换机/ 上/ ./ 典型/ 的/ 应用/ 情景/ 如图/ 6/ 所示/ ,/ 图中/ 系统/ 是/ 常见/ 的/ 层次化/ 拓扑/ 结构/ 集群/ ,/ 其/ 聚合/ 节点/ 内部/ 的/ 拓扑/ 距离/ 差别/ 细微/ ,/ 因此/ 只/ 需要/ 将/ 进程/ 簇/ 映射/ 到/ 聚合/ 节点/ 上/ 即可/ 获得/ 近似/ 最优/ 映射/ ./ 具体/ 设计/ 如下/ ,/ 层次化/ 指定/ 映射/ 可以/ 分解/ 为/ h/ 次/ 单层/ 映射/ ,/ h/ 为/ 聚合/ 节点/ 到/ 根/ 交换机/ 的/ 层次/ ./ 以图/ 6/ 中/ 系统/ 为例/ ,/ h/ 为/ 2/ ,/ 在/ 第/ 1/ 次/ 映射/ 迭代/ 中/ ,/ 将/ Level2/ 交换机/ 视为/ 虚拟/ 节点/ 进行/ 单层/ 进程/ 簇/ 映射/ ,/ 然后/ 按/ 同样/ 的/ 方式/ 进行/ 第/ 2/ 次/ 映射/ 迭代/ ./ 在/ 第/ 2/ 次/ 迭代/ 中/ ,/ Level2/ 交换机/ 中/ 的/ 进程/ 簇是/ 待/ 映射/ 进程/ 簇/ ,/ 将/ Level1/ 交换机/ 视为/ 虚拟/ 节点/ 进行/ 单层/ 映射/ ,/ 依此类推/ ,/ 直至/ 进程/ 映射/ 到/ 指定/ 的/ 聚合/ 节点/ 上/ ./ 在/ 层次化/ 指定/ 映射/ 中/ ,/ 将/ 开销/ 较大/ 的/ 单层/ 映射/ 分解/ 为/ 若干次/ 低/ 开销/ 的/ 粗粒度/ 单层/ 映射/ ,/ 在/ 如图/ 6/ 系统/ 的/ 大规模/ 计算环境/ 下/ 具有/ 性能/ // 开销/ 优势/ ./ 5/ 实验/ 结果/ 5.1/ 实验/ 环境/ 及/ 方法/ 5.1/ ./ 1/ 实验/ 环境/ 实验/ 集群/ 包含/ 12/ 个/ 计算/ 节点/ ,/ 节点/ 间/ 使用/ InfiniBand/ 网络/ 互连/ ./ 每个/ 节点/ 拥有/ 62GB/ 内存/ ,/ 2/ 个/ 8/ 核心/ Intel/ ?/ Xeon/ ?/ E5/ -/ 2670CPU/ ,/ 主频/ 为/ 2.60/ GHz/ ./ 每个/ CPU/ 拥有/ 20MBL3cache/ ./ 操作系统/ 为/ RedHatEnterpriseLinuxServer6/ ./ 3/ ,/ MPI/ 版本/ MVAPICH2v1/ ./ 9a/ (/ icc13/ ./ 0.1/ )/ ./ 在/ 实验/ 中未/ 启用/ 处理器/ 的/ 超线程/ 特性/ ./ 5.1/ ./ 2/ 测试程序/ 应用程序/ 进行/ 实验/ 测试/ ./ 本文/ 使用/ NAS/ 基准/ 测试程序/ 集/ 以及/ 两个/ 实际/ (/ 1/ )/ NPB/ [/ 26/ ]/ ./ NAS/ 并行/ 基准/ 测试程序/ 中/ 的/ 4/ 道/ 检测/ 通信/ 性能/ 的/ 典型/ 程序/ :/ 法/ 计算/ 稀疏/ 对称/ 有限/ 矩阵/ 的/ 最小/ 特征值/ ./ ①/ CG/ ./ 共轭/ 梯度/ 方程/ 测试程序/ ,/ 使用/ 共轭/ 梯度/ ②/ LU/ ./ 上下/ 对角线/ 测试程序/ ,/ 采用/ 对称/ 的/ 超/ 松弛法/ 求解/ 块/ 稀疏/ 方程组/ ./ 通信/ 多/ 使用/ “/ 方块/ 化/ ”/ 数据/ ./ ③/ SP/ ./ 标量/ 五角/ 测试程序/ ,/ 倾向/ 于/ 检测/ 计算/ 和/ 通信/ 之间/ 的/ 平衡/ ,/ 与/ 上述/ 程序/ 不同/ ,/ SP/ 要求/ 进程/ 数量/ 为/ 平方/ 数/ ./ ④/ BT/ ./ 块状/ 三角/ 测试程序/ ,/ 同样/ 要求/ 进程/ 数量/ 为/ 平方/ 数/ ,/ 通信/ 强度/ 较/ SP/ 低/ ./ (/ 2/ )/ 3dwing/ ./ 全称/ 3D/ -/ acousticwave/ -/ modeling/ ,/ 用来/ 模拟/ 三维/ 中/ 声波/ 传播/ 规律/ ./ 三维/ 声波/ 模型/ 仿真/ 广泛/ 运用/ 于/ 航空/ 发动机/ 降噪/ 、/ 乐器/ 制造/ 等/ 领域/ ./ (/ 3/ )/ openform/ ./ 计算/ 流体力学/ (/ CFD/ )/ 程序/ ,/ 通过/ 计算/ 模拟/ 分析/ 流体/ 流动/ 性质/ ./ 5.1/ ./ 3/ 实验/ 方法/ round/ -/ robin/ ,/ 以/ 前者/ 结果/ 作为/ 基线/ ./ 代/ 次数/ 为/ 5/ ×/ 105/ ,/ 记为/ pe/ -/ 500k/ ./ 们/ 选用/ 最/ 流行/ 的/ 图/ 划分/ 软件/ METIS/ [/ 15/ ]/ ./ (/ 1/ )/ 实验/ 对比/ 设置/ 实验/ 中/ 我们/ 比较/ 了/ 4/ 类/ 进程/ 映射/ 策略/ :/ ①/ 两种/ MPI/ 默认/ 进程/ 映射/ 方法/ ./ block/ 及/ ②/ Pair/ -/ Exchange/ 映射/ ./ 根据/ 程序/ 规模/ ,/ 设置/ 迭/ ③/ 图/ 划分/ 映射/ ./ 由/ 现有/ 的/ 图/ 划分算法/ 生成/ ,/ 我/ ④/ 聚类/ 映射/ ./ 本文/ 提出/ 的/ 优化/ 方法/ ,/ 记为/ clus/ -/ teringmapping/ ./ 根据/ 测试程序/ 特点/ 本文/ 设置/ 分簇数/ k/ 为/ 节点/ 数/ 的/ 两倍/ (/ 经验值/ )/ ,/ k/ 的/ 最优/ 取值/ 与/ 通信/ 模式/ 及/ 物理/ 拓扑/ 相关/ ,/ 其/ 量化/ 关系/ 及/ k/ 的/ 自/ 调谐/ 取值/ 是/ 未来/ 研究/ 的/ 方向/ ./ (/ 2/ )/ 重新/ 映射/ 绑定/ 方法/ 根据/ 运行/ 环境/ 的/ 不同/ ,/ 实验/ 中/ 使用/ 两种/ 进程/ 映射/ 绑定/ 方法/ :/ ①/ 使用/ MPICH2/ 的/ 进程/ 管理器/ hydra/ 提供/ 的/ 绑定/ 机制/ ;/ ②/ 使用/ 资源管理/ 程序/ slurm/ ①/ 提供/ 的/ 进程/ -/ 节点/ 绑定/ 机制/ ./ ①/ SimpleLinuxUtilityforResourceManagement/ ./ https/ :/ // // Page105/ ./ 2/ 实验/ 结果/ 及/ 分析/ 5.2/ ./ 1/ 进程/ 映射/ 优化/ 效果/ 对比/ 我们/ 使用/ 5.1/ ./ 3/ 节/ 设置/ 的/ 对比/ 方法/ 分别/ 对/ NPB/ 基准/ 测试程序/ 和/ 3dwing/ 及/ openform/ 两道/ 实际/ 应用/ 进行/ 了/ 测试/ ./ (/ 1/ )/ NPB/ 程序/ 测试/ 结果/ 如图/ 7/ 所示/ ./ 图/ 7/ 不同/ 进程/ 映射/ 方法/ NPB/ 测试/ 结果/ 对比/ (/ 程序/ 规模/ :/ cg/ ./ A/ ./ 128/ ,/ lu/ ./ A/ ./ 128/ ,/ sp/ ./ A/ ./ 144/ ,/ bt/ ./ A/ ./ 144/ )/ 图/ 7/ 结果表明/ ,/ 对于/ 选取/ 的/ 除/ CG/ 之外/ 的/ NPB/ 程序/ ,/ 相对/ 于/ MPI/ 默认/ 的/ 进程/ 映射/ 方法/ ,/ 聚类/ 映射/ 方法/ 可以/ 获得/ 8.1/ %/ ~/ 12.1/ %/ 的/ 性能/ 提升/ ,/ 并且/ 在/ 整体/ 上/ 优于/ PE/ 和/ 图/ 划分/ 映射/ ./ 这是/ 由于/ 上述/ PE/ 和/ 图/ 划分算法/ 均/ 以/ 某种/ 初始/ 映射/ (/ 或/ 初始/ 划分/ )/ 为/ 基础/ 寻找/ 最优/ 解/ ,/ 其/ 结果/ 受/ 初始/ 解/ 的/ 影响/ ,/ 易/ 陷入/ 较差/ 的/ 局部/ 最优/ 解/ [/ 15/ ]/ ./ 对于/ CG/ 程序/ ,/ 我们/ 在/ 实验/ 中/ 发现/ 使用/ 聚类/ 映射/ 和/ 图/ 划分/ 映射/ 的/ 结果/ 与/ block/ 方式/ 相同/ ,/ 因此/ 结果/ 表现/ 为/ 无/ 加速/ ./ 我们/ 通过/ 分析/ 通信/ 模式/ 发现/ ,/ 原因/ 为/ CG/ 程序/ 通信/ 模式/ 具有/ 明显/ 的/ 簇状/ 结构/ (/ 图/ 8/ )/ ,/ 因此/ 默认/ block/ 映射/ 已/ 是/ 最优/ 解/ ./ 上述/ 分析/ 也/ 从/ 侧面/ 说明/ 聚类/ 映射/ 方法/ 在/ 发现/ 进程/ 簇/ 方面/ 的/ 有效性/ ./ (/ 2/ )/ 图/ 9/ 所示/ 是/ 实际/ 应用/ 的/ 测试/ 结果/ ./ 结果表明/ 在/ 更/ 大规模/ 的/ 应用/ 中/ 使用/ 聚类/ 映射/ 算法/ 也/ 取得/ 了/ 4.3/ %/ ~/ 12.3/ %/ 的/ 性能/ 提升/ ./ 相比/ 于图/ 划分算法/ 也/ 有/ 最高/ 达/ 3.7/ %/ 的/ 性能/ 提升/ ./ 再次/ 验证/ 了/ 聚类/ 映射/ 对/ 较差/ 局部/ 最优/ 解/ 的/ 规避/ 能力/ ./ 图/ 9/ 不同/ 进程/ 映射/ 方法/ 实际/ 应用/ 测试/ 结果/ 对比/ (/ 程序/ 规模/ :/ 3dwing/ :/ 144/ 进程/ (/ 12/ ×/ 12/ )/ ,/ openform/ :/ 192/ 进程/ (/ 16/ ×/ 12/ )/ )/ (/ 3/ )/ 使用/ SP/ 基准/ 测试程序/ (/ CLASS/ =/ A/ )/ 对/ 聚类/ 映射/ 方法/ 效果/ 的/ 扩展性/ 进行/ 测试/ ,/ 结果/ 如图/ 10/ 所示/ ./ 图中/ 数据/ 表明/ ,/ 随着/ 进程/ 数量/ 的/ 增多/ ,/ 使用/ 聚类/ 映射/ 方法/ 的/ SP/ 程序/ 获得/ 的/ 性能/ 提升/ 呈上升/ 趋势/ ./ 这/ 是因为/ 在/ 进程/ 规模较/ 小时/ ,/ 核心/ 间/ 的/ 远距离/ 通信/ 和/ 端口/ 的/ 拥塞/ 较少/ ./ 因此/ 进程/ 拓扑/ 映射/ 对/ 小规模/ 程序/ 的/ 性能/ 影响/ 甚微/ ,/ 并会/ 随着/ 进程/ 规模/ 的/ 增大/ 影响/ 越来越/ 明显/ ./ 5.2/ ./ 2/ 进程/ 映射/ 优化/ 开销/ 本/ 小节/ 测试/ 我们/ 提出/ 的/ 聚类/ 进程/ 映射/ 方法/ 的/ 开销/ ./ 使用/ SP/ 、/ 3DWING/ 和/ OPENFORM/ 程序/ 的/ 通信/ 模式/ 作为/ 输入/ ,/ 测试环境/ 为/ 配备/ Intel/ ?/ CoreTMi3/ 处理器/ 的/ DesktopPC/ ,/ 软件/ 环境/ 为/ Linux2/ ./ 6/ 和/ GCC4/ ./ 4.7/ ./ 测试/ 结果/ 如表/ 1/ 所示/ ./ Page11/ 表/ 1/ 基于/ 聚类分析/ 的/ 进程/ 映射/ 算法/ 执行/ 时间/ 测试程序/ 3DWINGOPENFORM/ 从表/ 1/ 中/ 可以/ 看出/ ,/ 对于/ 小于/ 192/ 进程/ 的/ 程序/ ,/ 使用/ 聚类/ 进程/ 映射/ 的/ 开销/ 几乎/ 是/ 可以/ 忽略/ 的/ ./ 由/ O/ (/ nk2/ )/ 的/ 复杂度/ 可/ 粗略/ 估算/ 对/ 2000/ 进程/ 的/ 程序/ 进行/ 聚类/ 进程/ 映射/ 的/ 开销/ 约/ 250s/ ./ 达到/ 了/ 可/ 处理/ 大规模/ 数据/ 的/ 预期/ 目标/ ./ 6/ 结论/ 及/ 未来/ 工作/ 在/ 本文/ 中/ ,/ 我们/ 提出/ 了/ 一种/ 聚合/ 的/ 进程/ 拓扑/ 映射/ 模型/ AQAP/ ,/ 并/ 基于/ AQAP/ 模型/ 提出/ 了/ 一种/ 新颖/ 的/ 基于/ 聚类分析/ 的/ 进程/ 映射/ 优化/ 方法/ ./ 与/ 已有/ 研究/ 不同/ ,/ 该/ 优化/ 方法/ 使用/ 进程/ 簇/ 作为/ 映射/ 单位/ 搜索/ AQAP/ 问题/ 的/ 近似/ 最优/ 解/ ,/ 其/ 映射/ 效果/ 十分/ 依赖于/ 进程/ 聚类/ 结果/ 的/ 准确性/ ,/ 为此/ 我们/ 提出/ 了/ 一种/ 基于/ 谱/ 聚类分析/ 的/ 进程/ 分簇/ 算法/ ,/ 即/ CP/ -/ NSC/ 算法/ ./ 可以/ 将/ 通信/ 模式/ 聚类/ 问题/ 转化/ 为/ 低维聚类/ 问题/ ,/ 在/ 保证/ 效率/ 的/ 同时/ 避免/ 了/ 陷入/ 较差/ 的/ 局部/ 最优/ 解/ ./ 然后/ ,/ 提出/ 了/ 一种/ 用于/ 进程/ 簇/ 映射/ 的/ 自/ 适应/ 聚合/ 进程/ 映射/ 策略/ ,/ 根据/ 进程/ 聚类/ 结果/ 的/ 均衡性/ 自/ 适应/ 地/ 选择/ 最优/ 映射/ 算法/ ./ 并/ 提出/ 了/ 一种/ 基于/ Pair/ -/ Exchange/ 的/ 聚合/ PE/ 算法/ ,/ 通过/ 复用/ 启发式/ 算法/ 进一步/ 优化/ 映射/ 结果/ ./ 此外/ ,/ 为了/ 满足/ 层次化/ 大规模/ 系统/ 上/ 指定/ 聚合/ 节点/ 上/ 的/ 进程/ 映射/ ,/ 我们/ 提出/ 了/ 层次化/ 指定/ 映射/ 方法/ ,/ 通过/ 分解/ 为/ 多次/ 单层/ 映射/ 实现/ 进程/ -/ 聚合/ 节点/ 映射/ ./ 我们/ 使用/ 多道/ 基准/ 测试程序/ 和/ 实际/ 应用/ 进行/ 了/ 广泛/ 的/ 实验/ ./ 实验/ 结果表明/ 本文/ 提出/ 的/ 进程/ 优化/ 方法/ 可以/ 使/ 程序/ 获得/ 明显/ 的/ 性能/ 提升/ ,/ 优于/ 现有/ 的/ Pair/ -/ Exchange/ 方法/ 和/ 图/ 划分/ 方法/ ./ 并且/ 进程/ 映射/ 的/ 开销/ 微小/ ,/ 具备/ 处理/ 大规模/ 数据/ 的/ 能力/ ./ 由于/ 聚类分析/ 的/ 性能/ 对于/ 本文/ 方法/ 的/ 有效性/ 至关重要/ ,/ 因此/ 未来/ 工作/ 主要/ 从/ 以下/ 3/ 个/ 方面/ 进行/ :/ (/ 1/ )/ 量化/ 研究/ 谱/ 聚类分析/ 参数/ (/ 如分/ 簇/ 数量/ k/ )/ 对/ 聚类/ 结果/ 和/ 进程/ 映射/ 性能/ 的/ 影响/ ,/ 提高/ 进程/ 聚类分析/ 的/ 准确性/ ;/ (/ 2/ )/ 研究/ 进程/ 簇自/ 调谐/ 聚类/ 算法/ 对/ 本文/ 方法/ 的/ 影响/ ,/ 即/ 不再/ 规定/ 分簇/ 数量/ k/ 而/ 由/ 聚类/ 算法/ 主动/ 寻找/ 最优/ 分簇/ 数量/ ;/ (/ 3/ )/ 进一步/ 研究/ 具有/ 复杂/ 网络拓扑/ 结构/ 的/ 超级计算机/ 系统/ 上/ 的/ 聚类/ 进程/ 映射/ 优化/ 问题/ ./ 

