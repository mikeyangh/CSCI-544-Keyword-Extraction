Page1/ 基于/ 应用/ 特征/ 的/ PaaS/ 弹性/ 资源管理/ 机制/ 魏豪/ 周抒睿/ 张锐/ 杨/ 挺/ 王千祥/ (/ 北京大学/ 信息/ 科学技术/ 学院/ 软件/ 所高/ 可信/ 软件/ 教育部/ 重点/ 实验室/ 北京/ 100871/ )/ 摘要/ 如何/ 在/ 保障/ 服务质量/ 的/ 前提/ 下/ ,/ 尽可能/ 地/ 节省/ 服务器资源/ ,/ 是/ 云/ 计算环境/ 中/ 弹性/ 资源管理/ 面临/ 的/ 主要/ 问题/ 之一/ ./ 目前/ 关于/ 云/ 计算环境/ 中/ 弹性/ 机制/ 的/ 研究/ 多数/ 集中/ 在/ IaaS/ 层/ ,/ 且/ 较/ 少/ 考虑/ 不同/ 应用/ 的/ 具体/ 特征/ ./ 文中/ 提出/ 了/ 一种/ 基于/ 应用/ 特征/ 的/ PaaS/ 弹性/ 资源管理/ 机制/ AFERM/ (/ ApplicationFeaturebasedElasticResourceManagementmechanism/ )/ ,/ 主要/ 贡献/ 包括/ :/ (/ 1/ )/ 定义/ 了/ 包含/ 资源/ 开销/ 信息/ 与/ 请求/ 率/ 变化/ 信息/ 的/ 应用/ 特征/ ;/ (/ 2/ )/ 设计/ 了/ 一种/ 基于/ 应用/ 执行/ 单元/ 的/ 请求/ 分配机制/ ,/ 在/ 请求/ 数量/ 较大/ 时/ ,/ 将/ 它们/ 划分/ 给/ 多个/ 资源/ 开销/ 相对/ 固定/ 的/ 应用/ 执行/ 单元/ 分别/ 处理/ ;/ (/ 3/ )/ 基于/ 应用/ 特征/ 将/ 不同/ 类型/ 的/ 应用/ 搭配/ 部署/ ./ 作者/ 在/ 自主/ 开发/ 的/ PaaS/ 平台/ PAE/ (/ PekinguniversityApplicationEngine/ )/ 上/ 验证/ 了/ 该/ 机制/ 的/ 可行性/ 和/ 有效性/ ./ 实验/ 证明/ ,/ AFERM/ 能够/ 在/ 保证/ 服务质量/ 的/ 前提/ 下/ ,/ 有效/ 地/ 减少/ 服务器/ 的/ 使用/ :/ 与/ 对比/ 策略/ 相比/ ,/ AFERM/ 平均/ 可以/ 减少/ 28.3/ %/ 的/ 虚拟机/ 占用/ ,/ 最/ 多/ 可以/ 减少/ 50/ %/ ./ 关键词/ 云/ 计算/ ;/ PaaS/ ;/ 弹性/ ;/ 应用/ 特征/ 1/ 引言/ PaaS/ 作为/ 云/ 计算/ [/ 1/ ]/ 的/ 三种/ 平台/ 交付/ 模型/ 之一/ ,/ 支持/ 用户/ 基于/ PaaS/ 开发/ 应用/ ,/ 并/ 将/ 应用程序/ 部署/ 到/ PaaS/ 平台/ 上/ ./ PaaS/ 平台/ 的/ 用户/ 不必/ 关心/ 网络/ 、/ 硬件/ 服务器/ 、/ 操作系统/ 、/ 数据库/ 管理系统/ 、/ 应用服务器/ 等/ 应用/ 的/ 运行/ 环境/ 细节/ ,/ 就/ 可以/ 配置/ 应用/ 的/ 托管/ 环境/ ,/ 并/ 部署/ 所/ 开发/ 的/ 应用/ ./ 目前/ 互联网/ 上/ 已经/ 出现/ 了/ 许多/ 典型/ 的/ PaaS/ 平台/ ,/ 例如/ Google/ 的/ GAE/ (/ GoogleAppEngine/ )/ 、/ SalesForce/ 的/ Force/ ./ com/ 、/ Microsoft/ 的/ Azure/ 、/ VMware/ 的/ CloudFoundry/ 等/ ./ 国内/ 相关/ 产业界/ 也/ 在/ 这个/ 领域/ 进行/ 了/ 尝试/ ,/ 例如/ 新浪/ 的/ SAE/ 、/ 百度/ 的/ BAE/ 等/ ./ 对于/ 云/ 计算/ 服务/ 的/ 提供者/ 来说/ ,/ 他们/ 的/ 主要/ 任务/ 是/ 保证/ 用户/ 的/ 服务质量/ ,/ 并/ 尽可能/ 地/ 减少/ 系统资源/ 开销/ ./ 采取/ 弹性/ 的/ 资源管理/ 机制/ ,/ 可以/ 在/ 保证/ 服务/ 级别/ 协议/ (/ ServiceLevelAgreement/ )/ 的/ 前提/ 下/ ,/ 有效/ 地/ 提高/ 系统/ 的/ 资源/ 利用率/ ,/ 从而/ 减少/ 运维/ 成本/ [/ 2/ -/ 4/ ]/ ./ 目前/ 的/ 弹性/ 资源管理/ 机制/ 研究/ 主要/ 集中/ 在/ IaaS/ 层/ ,/ 并且/ 较/ 少/ 考虑/ 平台/ 上/ 应用/ 的/ 特性/ ./ 例如/ :/ AGILE/ [/ 5/ ]/ 通过/ 预测/ 应用/ 请求/ 率/ ,/ 保证/ 为/ 虚拟机/ 的/ 增加/ 及/ 启动/ 提供/ 充分/ 的/ 时间/ ,/ 并/ 通过/ 快速/ 复制/ 虚拟机/ 的/ 方法/ 保证/ 应用/ 的/ 服务质量/ ./ 但是/ ,/ 该/ 方法/ 主要/ 考虑/ 的/ 对象/ 是/ 计算/ 密集型/ 应用/ ,/ 也/ 就是/ CPU/ 密集型/ 应用/ ,/ 没有/ 考虑/ 应用/ 其他/ 方面/ 的/ 特性/ ./ Gandhi/ 等/ 人/ [/ 6/ ]/ 提出/ 了/ 一种/ 动态/ 的/ 容量/ 管理/ 方法/ 来/ 减少/ 运行/ 的/ 服务器/ ,/ 从而/ 节省/ 资源/ ./ 但是/ 他们/ 并/ 没有/ 考虑/ 应用/ 对/ 多种/ 资源/ 的/ 消耗/ 以及/ 应用/ 在/ 资源/ 开销/ 上/ 表现/ 出/ 的/ 不同/ 特性/ ./ PaaS/ 平台/ 上/ 的/ Web/ 应用/ 通常/ 是/ 由/ 不同/ 的/ 人员/ 开发/ 、/ 部署/ 的/ ./ 往往/ 这些/ 应用/ 对/ 各种/ 资源/ 的/ 使用/ 情况/ 差异/ 较大/ ,/ 而且/ 接受/ 的/ 请求/ 往往/ 随/ 时间/ 表现/ 出/ 不同/ 的/ 特性/ ./ 针对/ 这种/ 情形/ ,/ 本文/ 提出/ 了/ 一种/ 基于/ 应用/ 特征/ 的/ PaaS/ 弹性/ 资源管理/ 机制/ (/ ApplicationFeaturebasedElasticResourceManagementmechanism/ ,/ AFERM/ )/ ./ AFERM/ 综合/ 考虑/ PaaS/ 平台/ 的/ 资源/ 使用/ 情况/ 和/ Web/ 应用/ 的/ 特征/ ,/ 在/ 保障/ 服务质量/ 的/ 前提/ 下/ 尽可能/ 地/ 减少/ 系统/ 的/ 资源/ 开销/ ./ 本文/ 的/ 主要/ 贡献/ 包括/ :/ (/ 1/ )/ 定义/ 了/ 面向/ PaaS/ 平台/ 的/ 应用/ 特征/ ./ 通过/ 挖掘/ 应用/ 的/ 访问/ 日志/ ,/ 找出/ 应用/ 请求/ 率/ 随/ 时间/ 的/ 变化规律/ ,/ 以/ 实现/ 对/ 该/ 应用/ 请求/ 率/ 的/ 预测/ ./ 结合/ 对/ 应用/ 所在/ 系统/ 环境/ 的/ 监测/ 记录/ 分析/ ,/ 建立/ 起/ 涵盖/ 应用/ 请求/ 率/ 变化/ 情况/ 以及/ 各项/ 资源/ 开销/ 等/ 指标/ 的/ 应用/ 特征/ 模型/ ./ (/ 2/ )/ 提出/ 了/ 一种/ 基于/ 应用/ 执行/ 单元/ 的/ 请求/ 分配机制/ ,/ 在/ 请求/ 数量/ 较大/ 时/ ,/ 将/ 它们/ 划分/ 给/ 多个/ 资源/ 开销/ 相对/ 固定/ 的/ 应用/ 执行/ 单元/ 分别/ 处理/ ,/ 有效/ 地/ 减少/ 了/ 弹性/ 操作/ 的/ 频率/ ,/ 降低/ 了/ 弹性/ 操作/ 带来/ 的/ 额外/ 开销/ ./ (/ 3/ )/ 提出/ 了/ 基于/ 应用/ 特征/ 的/ 搭配/ 部署/ 方案/ ,/ 将/ 多种/ 在/ 资源/ 开销/ 方面/ 有/ 不同/ 特征/ 的/ 应用/ 部署/ 在/ 一起/ ,/ 均衡/ 、/ 充分/ 地/ 使用/ 服务器资源/ ,/ 提高/ 了/ 资源/ 利用率/ ./ 本文/ 第/ 2/ 节/ 回顾/ 与/ 本文/ 相关/ 的/ 研究/ 工作/ ;/ 第/ 3/ 节/ 介绍/ 应用/ 特征/ 及其/ 获取/ 方法/ ;/ 第/ 4/ 节/ 从/ 应用/ 执行/ 单元/ 、/ 弹性/ 操作/ 时机/ 和/ 弹性/ 操作/ 方案/ 等/ 方面/ 对/ AFERM/ 进行/ 详细/ 介绍/ ;/ 第/ 5/ 节/ 通过/ 实验/ 对/ 本文/ 提出/ 的/ 方法/ 进行/ 评估/ ;/ 第/ 6/ 节/ 总结/ 全文/ 并/ 给出/ 下/ 一步/ 的/ 研究/ 方向/ ./ 2/ 相关/ 工作/ 近年来/ ,/ 人们/ 对云/ 平台/ 的/ 弹性/ 资源/ 策略/ 进行/ 了/ 大量/ 的/ 研究/ ./ 为了/ 实现/ 云/ 平台/ 的/ 弹性/ 机制/ ,/ 需要/ 根据/ 应用/ 的/ 资源/ 需求/ 变化/ 情况/ 及时/ 调整/ 应用/ 的/ 部署/ 方案/ ./ 本节/ 将/ 简略/ 介绍/ 与/ 该/ 问题/ 相关/ 的/ 研究/ 工作/ 的/ 进展/ 情况/ ./ 已有/ 的/ 研究/ 工作/ 大多/ 基于/ 应用/ 的/ 请求/ 率来/ 优化/ 资源/ 的/ 供给/ 方案/ ./ 其中/ 有/ 的/ 通过/ 实时/ 的/ 请求/ 率/ 变化/ 情况/ ,/ 判断/ 当前/ 应用/ 的/ 运行/ 情况/ ,/ 动态/ 地/ 增减/ 系统资源/ [/ 6/ ]/ ;/ 有/ 的/ 通过/ 预测/ 应用/ 的/ 请求/ 率/ 或/ 资源/ 占用/ 情况/ 来/ 达到/ 提前/ 供给/ 资源/ 、/ 保证/ 服务质量/ 的/ 目的/ [/ 2/ ,/ 7/ -/ 12/ ]/ ;/ 还有/ 一些/ 工作/ 同时/ 依据/ 预测/ 和/ 实时/ 响应/ 来/ 为/ 应用/ 提供/ 弹性/ 资源/ [/ 13/ -/ 14/ ]/ ./ Gandhi/ 等/ 人/ [/ 6/ ]/ 提出/ 了/ 一种/ 动态/ 的/ 容量/ 管理/ 方法/ ,/ 可以/ 显著/ 地/ 减少/ 正在/ 运行/ 的/ 服务器/ 的/ 数量/ ,/ 以/ 节省/ 资源/ 和/ 能源/ ./ 该/ 方法/ 的/ 重点/ 在于/ 实时/ 地/ 计算/ 系统/ 的/ 负载/ ,/ 并/ 保守/ 地/ 进行/ 服务器/ 的/ 关闭/ ,/ 从而/ 为/ 爆发/ 的/ 负载/ 留出/ 余量/ ./ 参照/ 该/ 方法/ 提出/ 的/ 基于/ 实时/ 负载/ 进行/ 动态/ 资源管理/ 的/ 思路/ ,/ 我们/ 设计/ 了/ 一个/ 基于/ 实时/ 请求/ 率/ 的/ 弹性/ 策略/ ,/ 并/ 与/ 我们/ 本文/ 提出/ 的/ 弹性/ 资源/ 方法/ 进行/ 了/ 实验/ 对比/ ./ Gandhi/ 等/ 人/ [/ 13/ ]/ 在/ 他们/ 的/ 另外/ 一个/ 工作/ 中/ ,/ 采用/ 了/ 反馈/ 与/ 预测/ 结合/ 的/ 资源/ 提供/ 方法/ ,/ 将/ 服务器/ 在/ 逻辑/ 上/ 划分/ 为/ 两/ 部分/ ,/ 一部分/ 用来/ 处理/ 预测/ 模块/ 的/ 基础/ 负载/ ,/ 另/ 一部分/ 用来/ 处理/ 实时/ 的/ 多余/ 负载/ ./ 他们/ Page3/ 的/ 两个/ 工作/ 都/ 仅/ 考虑/ 了/ 服务器/ 的/ 计算能力/ ,/ 并/ 没有/ 考虑/ 多种/ 资源/ 的/ 消耗/ 和/ 应用/ 的/ 特性/ ./ SOPRA/ 框架/ [/ 7/ ]/ 通过/ 对/ 应用/ 请求/ 率/ 的/ 预测/ ,/ 预先/ 为/ 应用/ 分配/ 相应/ 的/ 资源/ ,/ 以/ 保证/ 服务质量/ ,/ 优化/ 资源配置/ ,/ 达到/ 节省能源/ 、/ 提高/ 资源/ 利用率/ 的/ 目的/ ./ 但是/ ,/ 该/ 方法/ 提出/ 的/ 调整/ 策略/ 只是/ 开启/ 关闭/ 服务器/ ,/ 这个/ 调整/ 力度/ 对于/ PaaS/ 平台/ 上/ 的/ Web/ 应用/ 来说/ 过大/ ;/ 同时/ 该/ 方法/ 只/ 关注/ 一种/ 有/ 固定/ 逻辑/ 的/ 网购/ 应用/ ,/ 不/ 具备/ 通用性/ ./ Gong/ 等/ 人/ [/ 2/ ]/ 使用/ 信号处理/ 技术/ 来/ 获取/ 应用/ 资源/ 占用/ 相关/ 特征/ ,/ 然后/ 通过/ 马尔可夫/ 链/ 预测/ 应用/ 未来/ 的/ 资源/ 开销/ ,/ 他们/ 只是/ 针对/ CPU/ 等/ 单一/ 资源/ 使用/ 情况/ 进行/ 了/ 考虑/ ,/ 忽略/ 了/ 多种/ 资源/ 的/ 搭配/ 使用/ 问题/ ./ Krioukov/ 等/ 人/ [/ 8/ ]/ 的/ NapSAC/ 工具/ 通过/ 分析/ 监测数据/ 获得/ 应用/ 的/ 请求/ 率/ ,/ 通过/ 预测/ 请求/ 率/ 的/ 方法/ 来/ 预先/ 为/ 应用/ 分配/ 运行/ 资源/ ,/ 提前/ 增加/ 或/ 删减/ 服务器/ 池里/ 的/ 服务器/ ./ 该/ 工作/ 比较/ 了/ 多种/ 预测/ 算法/ ,/ 如/ LastArrival/ 算法/ 、/ 滑动/ 窗口/ 平均/ (/ MovingWindowAverage/ ,/ MWA/ )/ 算法/ 、/ 指数/ 加权/ 平均法/ 和/ 线性/ 回归/ 的/ 预测/ 算法/ 等/ ,/ 并/ 得出结论/ :/ MWA/ 算法/ 和/ 线性/ 回归/ 算法/ 的/ 预测/ 效果/ 最好/ ,/ 比/ 始终保持/ 服务器/ 开启/ 的/ AlwaysOn/ 方法/ 节省/ 资源/ ./ 但是/ ,/ 在/ 被/ 对比/ 的/ AlwaysOn/ 方法/ 中/ ,/ 作者/ 无法/ 知道/ 请求/ 率/ 的/ 峰值/ 何时/ 出现/ ,/ 因此/ 该/ 对比/ 结果/ 说服力/ 较弱/ ./ 另外/ 的/ 一些/ 工作/ 关注/ 了/ 系统资源/ 的/ 快速/ 分配/ 方面/ ,/ 降低/ 资源/ 实时/ 分配/ 的/ 时间/ 和/ 性能/ 开销/ ,/ 从而/ 快速/ 对/ 负载/ 的/ 变化/ 进行/ 响应/ ,/ 以/ 提高/ 资源/ 利用率/ ./ Xiao/ 等/ 人/ [/ 15/ ]/ 在/ 他们/ 的/ 另外/ 一项/ 工作/ 中/ ,/ 设计/ 并/ 实现/ 了/ 一个/ 可/ 对/ 资源/ 进行/ 自动/ 伸缩/ 的/ IaaS/ 平台/ ,/ 该/ 方法/ 只/ 适用/ 于/ CPU/ 密集型/ 应用/ ,/ 对于/ PaaS/ 上/ 大量/ 的/ 在/ 资源/ 开销/ 方面/ 不同/ 的/ 应用/ 而言/ ,/ 该/ 方法/ 没有/ 充分考虑/ 它们/ 的/ 差异/ ./ 针对/ CPU/ 密集型/ 应用/ ,/ 该/ 方法/ 提出/ 了/ 一种/ 基于/ CPU/ 占用/ 情况/ 的/ 弹性/ 策略/ ,/ 系统/ 依据/ CPU/ 开销/ 情况/ 执行/ 弹性/ 操作/ ./ 我们/ 参照/ 该/ 方法/ 实现/ 了/ 一个/ 基于/ CPU/ 占用/ 情况/ 的/ 弹性/ 策略/ ,/ 并/ 与/ 我们/ 本文/ 提出/ 的/ 方法/ 进行/ 了/ 实验/ 对比/ ./ Gong/ 等/ 人/ [/ 16/ ]/ 的/ 工作/ 对/ 应用/ 进行/ 了/ 基于/ 向量/ 的/ 特性/ 描述/ ,/ 但/ 在/ 其/ 实际/ 系统/ 的/ 实验/ 验证/ 里/ ,/ 并/ 没有/ 对/ CPU/ 、/ I/ // O/ 等/ 多种/ 资源/ 的/ 消耗/ 情况/ 同时/ 进行/ 考虑/ ,/ 其/ 应用/ 部署/ 策略/ 也/ 没有/ 采取/ 资源/ 互补/ 的/ 搭配/ 部署/ 方式/ ./ Qin/ 等/ 人/ [/ 17/ ]/ 的/ 工作/ 关注/ 了/ 分布式系统/ 上/ 的/ I/ // O/ 密集型/ 应用/ ,/ 分析/ 了/ I/ // O/ 密集型/ 应用/ 的/ 特点/ 和/ 原因/ ,/ 提出/ 了/ 针对/ I/ // O/ 密集型/ 应用/ 的/ 两种/ 调度/ 算法/ ./ 但是/ 该/ 方法/ 对/ 资源/ 的/ 搭配/ 使用/ 考虑/ 的/ 不够/ ,/ 如果/ 系统/ 的/ I/ // O/ 资源/ 不是/ 性能/ 的/ 瓶颈/ 的话/ ,/ 也/ 很/ 难/ 证明/ 该/ 方法/ 的/ 有效性/ ./ 综上所述/ ,/ 目前/ 的/ 相关/ 研究/ 工作/ 较/ 少有/ 对/ 平台/ 上/ 应用/ 的/ 特性/ 进行/ 综合/ 考虑/ ,/ 它们/ 或者/ 忽视/ 了/ 应用/ 通常/ 是/ 对/ 多种/ 资源/ 进行/ 竞争/ ,/ 只/ 局限/ 地/ 考虑/ 了/ 单一/ 资源/ ,/ 或者/ 在/ 实施/ 弹性/ 资源分配/ 方案/ 时/ 没有/ 对/ 应用/ 在/ 资源/ 使用/ 方面/ 的/ 差异/ 加以/ 考虑/ ,/ 又/ 或者/ 忽视/ 了/ 应用/ 请求/ 随/ 时间/ 变化/ 体现/ 出/ 的/ 重要/ 规律/ ./ 在/ 本文/ 中/ ,/ 我们/ 提出/ 了/ 一种/ 基于/ 应用/ 特征/ 的/ PaaS/ 弹性/ 资源管理/ 机制/ ,/ 综合/ 考虑/ 了/ PaaS/ 平台/ 的/ 特性/ 和/ Web/ 应用/ 的/ 特征/ ,/ 在/ 保证/ 应用/ 服务质量/ 的/ 前提/ 下/ ,/ 尽可能/ 地/ 提高/ 平台/ 资源/ 利用率/ 、/ 降低/ 服务器/ 使用/ 数量/ ./ 3/ 应用/ 特征/ 获取/ 技术/ 本/ 节/ 首先/ 解释/ 什么/ 是/ 应用/ 特征/ ,/ 并/ 给出/ 其/ 形式化/ 描述/ ,/ 然后/ 介绍/ 应用/ 特征/ 获取/ 方法/ ./ 3.1/ 什么/ 是/ 应用/ 特征/ 部署/ 在/ PaaS/ 平台/ 上/ 的/ 不同/ 应用/ ,/ 可能/ 由于/ 用户/ 需求/ 的/ 不同/ 、/ 业务/ 逻辑/ 的/ 不同/ 、/ 以及/ 开发者/ 实现/ 方式/ 的/ 差别/ ,/ 在/ 资源/ 占用/ 方面/ 往往/ 存在/ 很大/ 的/ 差异/ ./ 例如/ ,/ 一个/ 在线/ 报表/ 数据处理系统/ 对/ 报表/ 数据/ 进行/ 计算/ ,/ 往往/ 会/ 占用/ 较/ 多/ 的/ CPU/ 资源/ ,/ 而/ 一个/ 以/ 静态数据/ 为主/ 的/ 个人/ 博客/ 系统/ ,/ 则/ 需要/ 更/ 多/ 的/ 磁盘/ 读写/ 时间/ 来/ 读写/ 文章/ 、/ 图片/ 等/ 数据/ ./ 此外/ ,/ 应用/ 对/ 不同/ 种类/ 资源/ 的/ 需求/ 与/ 该/ 应用/ 请求/ 情况/ 的/ 关系/ 也/ 表现/ 出/ 了/ 不同/ 的/ 特征/ ,/ 例如/ ,/ 一个/ 装载/ 在/ Tomcat/ 中/ 的/ 应用/ 在/ 启动/ 阶段/ 占用/ 的/ 内存/ 逐步/ 增加/ ,/ 但/ 启动/ 完毕/ 后/ 其/ 内存/ 占用/ 便/ 基本/ 维持/ 一个/ 稳定/ 的/ 数值/ 上/ ./ 而/ 它/ 的/ CPU/ 占用/ 或/ I/ // O/ 开销/ 会/ 随/ 请求/ 率/ 变化/ 而/ 改变/ ./ 换言之/ ,/ 此/ 应用/ 的/ 内存/ 占用/ 几乎/ 不/ 受/ 请求/ 率/ 影响/ ,/ 而/ CPU/ 占用/ 及/ I/ // O/ 开销/ 与/ 请求/ 率/ 具有/ 较强/ 的/ 相关性/ ./ 本文/ 主要/ 关注/ 与/ 资源/ 占用/ 相关/ 的/ Web/ 应用/ 特征/ :/ (/ 1/ )/ 资源/ 消耗/ 特征/ ,/ 即/ 应用/ 实例/ 的/ 各类/ 资源/ 开销/ 随/ 请求/ 率/ 的/ 变化/ 情况/ ;/ (/ 2/ )/ 请求/ 率/ 变化/ 特征/ ,/ 即/ 应用/ 实例/ 接收/ 到/ 的/ 请求/ 率/ 随/ 时间/ 的/ 变化/ 特性/ ./ 请求/ 率/ 的/ 变化/ 通常/ 会/ 影响/ 到/ 应用/ 对/ 系统资源/ 的/ 需求/ 情况/ ./ 应用/ 的/ 资源/ 消耗/ 特征/ 主要/ 通过/ 对/ 资源/ 使用/ 情况/ 的/ 监测/ 得到/ ./ 通过/ 对/ 较长时间/ 内/ 监测/ 的/ 数据/ 进行/ 统计分析/ ,/ 可以/ 归纳/ 出/ 应用/ 资源/ 消耗/ 的/ 特征/ ./ 应用/ 的/ 请求/ 率/ 变化/ 特征/ 可以/ 通过/ 对/ 其/ 访问/ 日志/ Page4/ 分析/ 得到/ ./ 通过/ 周期性地/ 从/ 日志/ 中/ 采样/ 统计/ 应用/ 在/ 某/ 段时间/ 内/ 的/ 平均/ 请求/ 率/ ,/ 可以/ 归纳/ 出/ 应用/ 的/ 请求/ 率/ 变化/ 特征/ ,/ 并/ 进一步/ 基于/ 请求/ 率/ 变化/ 特征/ 对/ 应用/ 将来/ 的/ 请求/ 率/ 变化/ 情况/ 进行/ 预测/ ./ 3.2/ 应用/ 特征/ 的/ 形式化/ 描述/ 3.2/ ./ 1/ 资源/ 消耗/ 特征/ 的/ 形式化/ 描述/ 运行/ 在/ PaaS/ 平台/ 上/ 的/ 应用/ 会/ 消耗/ 系统资源/ ./ 这些/ 资源/ 主要/ 包括/ CPU/ 时间/ 、/ 磁盘/ 时间/ 、/ 内存/ 占用/ 等/ ./ 这些/ 资源/ 的/ 消耗量/ 往往/ 随/ 应用/ 的/ 请求/ 率有/ 规律/ 地/ 变化/ ,/ 我们/ 将/ 应用/ 资源/ 消耗/ 随/ 请求/ 率/ 的/ 变化规律/ 定义/ 为/ 应用/ 的/ 资源/ 消耗/ 特征/ RC/ (/ ResourceConsumption/ )/ ./ 具体/ 地/ ,/ 我们/ 将/ RC/ 表示/ 为/ 应用/ 资源/ 消耗/ 与其/ 请求/ 率/ 之间/ 的/ 函数/ 关系/ :/ 其中/ n/ 代表/ 资源/ 种类/ 数/ ,/ Ci/ (/ r/ )/ (/ 1/ / i/ / n/ )/ 代表/ 第/ i/ 种/ 资源/ 消耗/ 随/ 请求/ 率/ r/ 的/ 变化/ 函数/ ,/ 特别/ 地/ ,/ 规定/ C1/ (/ r/ )/ 、/ C2/ (/ r/ )/ 和/ C3/ (/ r/ )/ 分别/ 表示/ CPU/ 时间/ 、/ 磁盘/ 时间/ 和/ 内存空间/ 的/ 占用/ 情况/ ./ 如图/ 1/ 即为/ 一个/ 具体/ 应用/ A/ 的/ 资源/ 消耗/ 随/ 请求/ 率/ 的/ 变化/ 情况/ ./ 图中/ 横轴/ 表示/ 请求/ 率/ ,/ 单位/ 为/ “/ 请求/ 数/ 每秒/ (/ req/ // s/ )/ ”/ ;/ 纵轴/ 表示/ 资源/ 消耗/ 情况/ ,/ 均/ 转换/ 为/ 百分数/ 的/ 形式/ (/ 单个/ 虚拟机/ 上/ 各/ 资源/ 总量/ 均/ 表示/ 为/ 100/ %/ )/ ./ 可以/ 看出/ 应用/ A/ 的/ CPU/ 、/ I/ // O/ 、/ 内存/ 等/ 资源/ 占用率/ 与/ 请求/ 率/ 存在/ 明显/ 线性关系/ (/ 实验/ 中/ 我们/ 使用/ 了/ 固态/ 硬盘/ ,/ 如果/ 是/ 普通/ 硬盘/ 的话/ 磁盘/ 时间/ 占用率/ 与/ 请求/ 率/ 之间/ 可能/ 是/ 非线性/ 关系/ )/ ,/ 并/ 可/ 拟合/ 得到/ 具体/ 的/ 线性/ 函数/ ./ 因此/ 根据/ 定义/ ,/ 应用/ A/ 的/ 资源/ 消耗/ 特征/ 表示/ 为/ RC/ =/ {/ 1.02/ r/ +/ 9.98/ ,/ 0.38/ r/ +/ 3.64/ ,/ 6/ }/ ./ 为了/ 将/ 应用/ 的/ 资源/ 消耗/ 特征/ 方便/ 地/ 应用/ 到/ 平台/ 环境/ 中/ ,/ 我们/ 还/ 对/ 平台/ 系统资源/ 的/ 使用/ 情况/ 进行/ 了/ 形式化/ 描述/ ./ 通常/ 一个/ PaaS/ 平台/ 由/ 多台/ 物理/ 机构/ 成/ ,/ 而/ 每台/ 物理/ 机/ 又/ 划分/ 为/ 若干/ 虚拟机/ ./ 因此/ ,/ 我们/ 可以/ 将/ PaaS/ 视为/ 多个/ 虚拟机/ 的/ 集合/ ./ 本文/ 中/ ,/ 我们/ 假设/ 所有/ 虚拟机/ 都/ 是/ 同构/ 的/ ,/ 它们/ 具有/ 相同/ 种类/ 相同/ 性能/ 的/ 系统资源/ ./ 每个/ 虚拟机/ 都/ 有/ 其/ 系统资源/ 向量/ :/ 其中/ Ri/ (/ 1/ / i/ / n/ )/ 代表/ 该/ 虚拟机/ 第/ i/ 种/ 资源/ 的/ 使用/ 情况/ ./ 3.2/ ./ 2/ 请求/ 率/ 变化/ 特征/ 的/ 形式化/ 描述/ 应用/ 的/ 请求/ 率/ 变化/ 特征/ RV/ (/ RequestVariability/ )/ 是/ 应用/ 在/ 各个单位/ 时间/ 内/ 的/ 平均/ 请求/ 率/ 随/ 时间/ 的/ 变化规律/ ./ 我们/ 通过/ 傅里叶/ 变换分析/ 和/ 描述/ 应用/ 的/ 请求/ 率/ 变化规律/ ./ 傅里叶/ 变换/ 在/ 声学/ 、/ 电信/ 、/ 电力系统/ 、/ 信号处理/ 等/ 诸多/ 领域/ 都/ 有/ 广泛应用/ ,/ 它/ 将/ 时间/ 序列/ 数据/ 转换/ 为/ 频率/ 序列/ 数据/ ,/ 以便/ 了解/ 序列/ 的/ 频率/ 构成/ ,/ 从而/ 能够/ 把握/ 序列/ 的/ 主要/ 特征/ ,/ 方便/ 对/ 其/ 进行/ 进一步/ 地/ 处理/ ./ 具体/ 地/ ,/ 可/ 将/ 时间/ 序列/ xt/ 展开/ 为/ 傅里叶/ 级数/ :/ xt/ =/ ∑/ 其中/ k/ 为/ 周期/ 分量/ 个数/ ,/ A0/ 为/ 误差/ 项/ ,/ fj/ 为/ 频率/ ,/ aj/ 、/ bj/ (/ 1/ / j/ / k/ )/ 为/ 各/ 频率/ 成分/ 对应/ 的/ 振幅/ ./ 我们/ 借助/ 傅里叶/ 变换分析/ 应用/ 的/ 请求/ 序列/ ,/ 了解/ 它/ 的/ 主要/ 频率/ 成份/ 及其/ 对应/ 振幅/ ,/ 从而/ 获取/ 应用/ 的/ 请求/ 率/ 变化规律/ ./ 具体/ 地/ ,/ 应用/ 的/ 请求/ 率/ 变化/ 特征/ RV/ 表示/ 为/ 对/ 其/ 请求/ 序列/ 进行/ 时频/ 变换/ 后/ 的/ 主要/ 频率/ 成分/ 的/ 频率/ 及/ 振幅/ 构成/ 的/ 元组/ 的/ 集合/ :/ 其中/ m/ 为/ 请求/ 序列/ 主要/ 频率/ 成分/ 的/ 个数/ ./ 如图/ 2/ (/ a/ )/ 展示/ 了/ 一个/ 具体/ 应用/ B/ 在/ 一段时间/ 内/ 的/ 请求/ 率/ 随/ 时间/ 变化/ 的/ 情况/ ,/ 图中/ 横轴/ 表示/ 时间/ ,/ 纵轴/ 表示/ 请求/ 率/ ,/ 单位/ 为/ “/ 请求/ 数/ 每秒/ (/ req/ // s/ )/ ”/ ./ 对/ 其/ 进行/ 傅里叶/ 变换/ 得到/ 图/ 2/ (/ b/ )/ 所示/ 的/ 频谱/ 图/ ,/ 图中/ 横轴/ 表示/ 频率/ ,/ 纵轴/ 表示/ 频率/ 强度/ ,/ 由于/ 离散/ 傅里叶/ 变换/ 的/ 共轭/ 对称性/ ,/ 我们/ 只/ 需/ 关注/ 图中/ 前半部/ 分/ 结果/ ./ 由图/ 2/ (/ b/ )/ 可知/ 强度/ 较大/ 的/ 频率/ 有/ 0.125/ 、/ 0.25/ 和/ 0.375/ ,/ 它们/ 构成/ 了/ 应用/ B/ 请求/ 率/ 变化/ 序列/ 的/ 主要/ 频率/ 成分/ ./ 可以/ 得到/ 它们/ 的/ 振幅/ 分别/ 为/ (/ -/ 218/ ,/ -/ 54/ )/ 、/ (/ 77/ ,/ 26/ )/ 和/ (/ -/ 42/ ,/ -/ 19/ )/ ,/ 因此/ 根据/ 定义/ ,/ 应用/ B/ 的/ 请求/ 率/ 变化/ 特征/ 表示/ 为/ RV/ =/ {/ (/ 0.125/ ,/ -/ 218/ ,/ -/ 54/ )/ ,/ (/ 0.25/ ,/ 77/ ,/ 26/ )/ ,/ Page5/ 图/ 2/ 一个/ 具体/ 应用/ B/ 的/ 请求/ 率/ 变化/ 及/ 频谱/ 图/ 基于/ 应用/ 请求/ 率/ 变化/ 特征/ ,/ 我们/ 可以/ 对/ 应用/ 的/ 请求/ 情况/ 进行/ 预测/ ,/ 从而/ 能够/ 预先/ 地/ 对/ 其/ 进行/ 资源/ 调配/ ,/ 在/ 保证/ 服务质量/ 的/ 前提/ 下/ 提高/ 系统资源/ 利用率/ ./ 3.3/ 应用/ 特征/ 的/ 获取/ 一个/ 新/ 应用/ 被/ 部署/ 到/ PaaS/ 平台/ 时/ ,/ 必须/ 经过/ 一个/ 监测/ 和/ 日志/ 分析/ 的/ 过程/ ,/ 才能/ 让/ 平台/ 获取/ 到/ 其/ 应用/ 特征/ ,/ 从而/ 更好/ 地/ 指导/ 应用/ 的/ 部署/ 和/ 资源分配/ ./ 我们/ 将/ 应用/ 的/ 部署/ 划分/ 为/ 单独/ 部署/ 和/ 搭配/ 部署/ 两个/ 阶段/ :/ (/ 1/ )/ 当/ 应用/ 被/ 初次/ 部署/ 到/ 云/ 平台/ 时/ ,/ 需将/ 其/ 单独/ 部署/ 到/ 一个/ 虚拟机/ 上/ ,/ 对/ 虚拟机/ 和/ 应用/ 进行/ 监测/ ,/ 并/ 分析/ 应用/ 访问/ 日志/ ,/ 待/ 该/ 应用/ 运行/ 状态/ 稳定/ ,/ 获取/ 其/ 应用/ 特征/ ;/ (/ 2/ )/ 基于/ 应用/ 特征/ 将/ 该/ 应用/ 与/ 其他/ 应用/ 搭配/ 部署/ 到/ 服务器/ 上/ ,/ 并/ 适时/ 进行/ 弹性/ 操作/ ,/ 以/ 实现/ 优化/ ./ 在/ 部署/ 搭配/ 阶段/ ,/ 我们/ 还会/ 继续/ 通过/ 监测/ 和/ 日志/ 分析/ ,/ 实时/ 更新/ 应用/ 特征/ ./ 3.3/ ./ 1/ 资源/ 消耗/ 特征/ 的/ 获取/ 在/ 单独/ 部署/ 阶段/ ,/ 系统对/ 运行/ 在/ 独立/ 虚拟机/ 上/ 的/ 应用/ 进行/ 监测/ ,/ 记录/ 其/ 各项/ 资源/ 的/ 消耗/ 情况/ ,/ 这里/ 我们/ 借鉴/ 了/ Shao/ 等/ 人/ [/ 18/ ]/ 的/ 研究/ 工作/ ./ 经过/ 一段时间/ (/ 具体/ 时间/ 长度/ 可/ 根据/ 应用/ 被/ 访问/ 的/ 频度/ 进行/ 设定/ ,/ 访问/ 频繁/ 的/ 应用/ 时间/ 较/ 短/ ,/ 反之/ 则/ 相反/ )/ 的/ 运行/ ,/ 应用/ 运行/ 状态/ 趋于稳定/ ,/ 我们/ 由/ 监测/ 得到/ 的/ 应用/ 的/ 各类/ 资源/ 的/ 消耗/ 情况/ ,/ 拟合/ 出其/ 随/ 请求/ 率/ 变化/ 的/ 变化/ 函数/ ,/ 从而/ 归纳/ 得到/ 应用/ 的/ 资源/ 消耗/ 特征/ RC/ ./ 随着/ 请求/ 率/ 的/ 增加/ ,/ 应用/ 所在/ 虚拟/ 机会/ 有/ 某项/ 系统资源/ 消耗/ 首先/ 超过/ 阈值/ (/ 通常/ 设/ 为/ 单个/ 虚拟机/ 上该/ 资源/ 总量/ 的/ 80/ %/ )/ ,/ 我们/ 定义/ 应用/ 此时/ 的/ 请求/ 率为/ 应用/ 的/ 请求/ 率/ 上限/ ,/ 记为/ Rul/ ./ 例如/ ,/ 图/ 1/ 中/ 应用/ A/ 请求/ 率/ 达到/ 70req/ // s/ 的/ 情况/ 下/ ,/ CPU/ 开销/ 会/ 首先/ 达到/ 80/ %/ 的/ 阈值/ ,/ 因此/ 可得/ 该/ 应用/ Rul/ 为/ 70req/ // s/ ./ Rul/ 将/ 为/ 搭配/ 部署/ 阶段/ 应用/ 执行/ 单元/ 的/ 确定/ 提供/ 依据/ ./ 实验/ 表明/ (/ 详见/ 5.1/ 节/ )/ ,/ 应用/ 在/ 单独/ 部署/ 阶段/ 表现/ 出/ 的/ 资源/ 消耗/ 特征/ 可以/ 应用/ 到/ 搭配/ 部署/ 阶段/ ./ 3.3/ ./ 2/ 请求/ 率/ 变化/ 特征/ 的/ 获取/ 日志/ 分析/ 是/ 一种/ 对/ 应用/ 特征/ 进行/ 学习/ 和/ 挖掘/ 的/ 有效/ 手段/ [/ 19/ -/ 20/ ]/ ./ 因此/ 我们/ 通过/ 分析/ 应用/ 在/ 运行/ 过程/ 中/ 产生/ 的/ 访问/ 日志/ ,/ 来/ 获取/ 其/ 请求/ 率/ 变化/ 特征/ ./ 在/ 单独/ 部署/ 阶段/ ,/ 系统/ 通过/ 日志/ 记录/ 应用/ 的/ 访问/ 情况/ ,/ 待/ 应用/ 运行/ 状态/ 趋于稳定/ ,/ 对/ 应用/ 访问/ 日志/ 进行/ 分类/ 和/ 统计/ ,/ 得到/ 单位/ 时间/ 内/ 应用/ 的/ 平均/ 请求/ 率/ ./ 然后/ 我们/ 对/ 请求/ 率/ 序列/ 进行/ 傅里叶/ 变换/ ,/ 得到/ 其/ 主要/ 频率/ 成分/ 对应/ 的/ 频率/ 、/ 振幅/ 等/ ,/ 从而/ 获取/ 到/ 应用/ 的/ 请求/ 率/ 变化/ 特征/ RV/ ./ 基于/ RV/ ,/ 我们/ 对/ 应用/ 请求/ 率/ 进行/ 预测/ ./ 根据/ 请求/ 率/ 变化/ 特征/ 反映/ 出/ 的/ 应用/ 的/ 历史/ 请求/ 信息/ ,/ 系统/ 可以/ 预测/ 应用/ 未来/ 的/ 请求/ 情况/ ,/ 从而/ 能够/ 预先/ 地为/ 应用/ 进行/ 资源/ 调配/ ,/ 在/ 保证/ 服务质量/ 的/ 前提/ 下/ 提高/ 资源/ 利用率/ ./ 应用/ 本身/ 的/ 请求/ 特征/ 对/ 预测/ 精度/ 有/ 较大/ 影响/ ,/ 如果/ 请求/ 率/ 变化/ 周期性/ 好/ 、/ 规律/ 明显/ ,/ 那么/ 预测/ 精度/ 自然/ 较/ 高/ ,/ 反之/ 则/ 相反/ ./ 因此/ ,/ 预测/ 请求/ 率/ 的/ 方法/ 更/ 适用/ 于/ 请求/ 率/ 变化规律/ 明显/ 的/ 应用/ ./ 4/ 基于/ 应用/ 特征/ 的/ PaaS/ 弹性/ 机制/ 基于/ 在/ 单独/ 部署/ 阶段/ 获取/ 到/ 的/ 应用/ 特征/ ,/ 我们/ 以/ 执行/ 单元/ 为/ 单位/ ,/ 将/ 应用/ 搭配/ 部署/ 在/ PaaS/ 平台/ 上/ ,/ 并/ 根据/ 一定/ 的/ 触发/ 条件/ ,/ 在/ 应用/ 运行/ 过程/ 中/ 进行/ 弹性/ 操作/ —/ —/ —/ 扩展/ 或/ 伸缩/ ,/ 动态/ 地为/ 其/ 分配/ 所/ 需/ 资源/ 、/ 灵活/ 地/ 调整/ 其/ 部署/ ./ 本文/ 提出/ 的/ 弹性/ 资源管理/ 机制/ 包括/ 3/ 个/ 要素/ :/ (/ 1/ )/ 执行/ 单元/ 执行/ 单元/ 是/ 被/ 限定/ 了/ 接收/ 到/ 的/ 最高/ 请求/ 率/ 的/ 应用/ 实例/ ./ 我们/ 以/ 执行/ 单元/ 为/ 单位/ ,/ 对/ 应用/ 进行/ 部署/ 及/ Page6/ 后续/ 弹性/ 操作/ ,/ 能够/ 减少/ 弹性/ 操作/ 次数/ ,/ 降低/ 弹性/ 操作/ 带来/ 的/ 额外/ 开销/ ./ (/ 2/ )/ 弹性/ 操作/ 时机/ 新/ 应用/ 进入/ 搭配/ 部署/ 阶段/ ,/ 就/ 可能/ 触发/ 扩展/ 操作/ ./ 在/ 应用/ 运行/ 过程/ 中/ ,/ 我们/ 预测/ 其下/ 一时/ 段/ 请求/ 率/ ,/ 并/ 对/ 应用/ 及其/ 运行/ 环境/ 实时/ 监测/ ,/ 获取/ 平台/ 整体/ 的/ 资源/ 使用/ 情况/ 和/ 应用/ 响应/ 时间/ 等/ 一系列/ 监测数据/ ./ 当/ 预测/ 结果/ 或/ 监测数据/ 满足/ 特定条件/ 时/ ,/ 触发/ 相应/ 的/ 扩展/ 或/ 伸缩/ 操作/ ./ (/ 3/ )/ 弹性/ 操作/ 方案/ 由/ (/ 2/ )/ 中/ 预测/ 结果/ 或/ 监测/ 得到/ 的/ 平台/ 服务器/ 运行/ 状态/ 、/ 应用/ 响应/ 时间/ 等/ 确定/ 了/ 具体/ 的/ 弹性/ 操作/ 类型/ 后/ ,/ 根据/ 应用/ 的/ 资源/ 占用/ 特征/ 以及/ 应用/ 的/ 请求/ 状况/ ,/ 确定/ 应用/ 执行/ 单元/ 增删/ 位置/ 等/ 具体操作/ 细节/ ,/ 并/ 通过/ 搭配/ 部署/ 的/ 方式/ ,/ 实施/ 弹性/ 操作/ 方案/ ./ 4.1/ 应用/ 执行/ 单元/ 为了/ 能/ 提供/ 可靠/ 、/ 高效/ 的/ 应用服务/ ,/ PaaS/ 平台/ 上/ 应用/ 的/ 服务/ 往往/ 由/ 应用/ 的/ 多个/ 实例/ 共同/ 承担/ 完成/ ,/ 并且/ 通常/ 单个/ 应用/ 实例/ 不会/ 独自/ 占/ 尽/ 虚拟机/ 上/ 的/ 全部/ 资源/ ./ 具体/ 地/ ,/ 应用/ 实例/ 可/ 实现/ 为/ “/ 代码/ 加/ 中间件/ ”/ 的/ 形式/ ,/ 即将/ 应用/ 代码/ 与其/ 运行/ 所/ 依托/ 的/ 中间件/ (/ 如/ 应用服务器/ 等/ )/ 打包/ 为/ 一个/ 整体/ ,/ 然后/ 部署/ 到/ 虚拟机/ 上/ 运行/ ./ 平台/ 须/ 将/ 用户/ 的/ 请求/ 根据/ 一定/ 的/ 规则/ 分/ 发给/ 各个/ 应用/ 实例/ ,/ 由/ 各个/ 实例/ 借助/ 所在/ 服务器/ 提供/ 的/ 资源/ ,/ 完成/ 对/ 请求/ 的/ 响应/ 和/ 处理/ ,/ 并/ 将/ 结果/ 返回/ 给/ 用户/ ./ 基于/ 轮询/ 的/ 负载平衡/ 是/ 一种/ 较为/ 常见/ 的/ 请求/ 分发/ 方式/ ./ 它/ 通过/ 轮询/ ,/ 将/ 用户/ 的/ 请求/ 平均/ 地/ 转发给/ 各个/ 应用/ 实例/ ./ 这种/ 方法/ 实现/ 简单/ ,/ 但/ 在/ PaaS/ 平台/ 的/ 弹性/ 机制/ 中有/ 显著/ 的/ 缺点/ :/ 由于/ 单位/ 时间/ 内/ 每个/ 应用/ 实例/ 所/ 承担/ 的/ 请求/ 数量/ 不/ 固定/ ,/ 一个/ 应用/ 实例/ 的/ 状态/ 发生/ 改变/ ,/ 可能/ 会/ 影响/ 整个/ 服务器/ 集群/ 上/ 相应/ 应用/ 的/ 所有/ 实例/ 状态/ ,/ 进而/ 引发/ 不必要/ 的/ 弹性/ 操作/ ./ 如图/ 3/ 所示/ ,/ 假设/ 某/ 应用/ C/ 在/ VM1/ 、/ VM2/ 和/ VM3/ 三台/ 虚拟机/ 上/ 分别/ 部署/ 了/ 一个/ 实例/ ,/ 某一/ 时刻/ 其/ 接收/ 到/ 的/ 用户/ 请求/ 共/ 需要/ 6/ 单位/ 的/ 系统资源/ 来/ 进行/ 处理/ ,/ 基于/ 轮询/ 的/ 负载平衡/ 方法/ 会/ 将/ 这些/ 请求/ 平均分/ 发给/ 3/ 个/ 应用/ 实例/ ,/ 因此/ 每个/ 应用/ 实例/ 需/ 提供/ 2/ 单位/ 的/ 系统资源/ ./ 在/ 弹性/ 机制/ 下/ ,/ 由于/ VM3/ 的/ 资源/ 利用率/ 过低/ ,/ 系统/ 会/ 进行/ 收缩/ 操作/ ,/ 将/ VM3/ 关闭/ ,/ 并/ 将/ 它/ 上面/ 的/ 实例/ 承担/ 的/ 请求/ 转发给/ 其他/ 虚拟机/ 上/ 的/ 应用/ 实例/ ./ 因此/ ,/ VM1/ 和/ VM2/ 上/ 的/ 应用/ 实例/ 需/ 共同/ 承担/ 该/ 应用/ 6/ 单位/ 的/ 资源/ 需求/ ,/ 即/ 各自/ 提供/ 3/ 个/ 单位/ 的/ 资源/ ./ 如此/ ,/ 两个/ 虚拟机/ 的/ 资源/ 占用/ 都/ 升高/ 了/ ,/ 而/ 由于/ VM1/ 的/ 资源/ 占用/ 过高/ 超过/ 了/ 阈值/ ,/ 又/ 将/ 引发/ 一次/ 扩展/ 操作/ ,/ 需在/ 其他/ 虚拟机/ 上/ 增加/ 应用/ 实例/ 以/ 缓解/ VM1/ 过高/ 的/ 负载/ 压力/ ./ 上述/ 过程/ 表明/ ,/ 使用/ 基于/ 轮询/ 的/ 负载平衡/ 方法/ 进行/ 请求/ 分发/ 过程/ 中/ ,/ 局部/ (/ 如/ 本例/ 中/ VM3/ )/ 应用/ 实例/ 状态/ 变化/ 往往/ 会/ 影响/ 平台/ 其他/ 部分/ 应用/ 实例/ 的/ 状态/ ,/ 从而/ 引起/ 弹性/ 操作/ 的/ “/ 连锁反应/ ”/ ,/ 带来/ 更/ 多/ 的/ 额外/ 开销/ ./ 图/ 3/ 基于/ 轮询/ 的/ 负载平衡/ 在/ 弹性/ 机制/ 上/ 的/ 应用/ 为了/ 解决/ 上述/ 问题/ ,/ 我们/ 设计/ 了/ 应用/ “/ 执行/ 单元/ ”/ 作为/ 应用服务/ 的/ 基本/ 单位/ ,/ 来/ 代替/ 基于/ 轮询/ 的/ 负载平衡/ 方法/ 中/ 接收/ 请求/ 率/ 大小/ 不/ 固定/ 的/ 应用/ 实例/ ./ 一个/ 应用/ 的/ 执行/ 单元/ 是/ 指/ 限定/ 了/ 最高/ 请求/ 率/ Rmax/ 的/ 应用/ 实例/ ./ 如果/ 一个/ 应用/ 执行/ 单元/ 接受/ 的/ 请求/ 率/ 达到/ Rmax/ ,/ 则/ 称/ 其/ 处于/ 满负荷/ 状态/ ,/ 否则/ 为/ 不满/ 状态/ ./ 特别/ 地/ ,/ 我们/ 将/ 接受/ 请求/ 率为/ 零/ 的/ 执行/ 单元/ 称为/ 空/ 执行/ 单元/ ./ 在/ 每个/ 请求/ 分发/ 周期/ 内/ ,/ 用户/ 请求/ 被/ 分/ 发给/ 应用/ 的/ 若干/ 执行/ 单元/ 承担/ ,/ 且/ 通常/ 只有/ 一个/ 处于/ 不满/ 状态/ ./ 例如/ ,/ 假设/ 某/ 应用/ 的/ 执行/ 单元/ 最大/ 请求/ 率/ Rmax/ 设为/ 60req/ // s/ ,/ 某一/ 时刻/ 用户/ 对/ 该/ 应用/ 的/ 请求/ 率/ 达到/ 150req/ // s/ ,/ 则/ 分别/ 分配/ 60req/ // s/ 的/ 请求/ 给/ 2/ 个/ 执行/ 单元/ 使/ 之/ 达到/ 满负荷/ 状态/ ,/ 剩余/ 30req/ // s/ 的/ 请求/ 分配/ 给/ 1/ 个/ 执行/ 单元/ ./ 如果/ 应用/ 的/ 全部/ 执行/ 单元/ 都/ 处于/ 满负荷/ 状态/ 仍/ 不足以/ 承载/ 所有/ 的/ 用户/ 请求/ ,/ 则/ 将/ 超出/ 执行/ 单元/ 承载能力/ 的/ 请求/ 推迟/ 至下/ 一/ 分发/ 周期/ 接受/ 处理/ ,/ 如果/ 下/ 一/ 分发/ 周期/ 的/ 请求/ 数/ 仍/ 超过/ 执行/ 单元/ 承载能力/ ,/ 则/ 继续/ 推迟/ 处理/ ,/ 以此类推/ ./ 上述/ 推迟/ 操作/ 会/ 导致/ 应用/ 平均/ 响应/ 时间/ 增长/ ,/ 而/ 我们/ 的/ 弹性/ 资源管理/ 机制/ 会/ 持续/ 监测/ 平均/ 响应/ 时间/ ,/ 并/ 在/ 其/ 超过/ 特定/ 阈值/ 时/ 增加/ 执行/ 单元/ 以/ 提高/ 承载能力/ ./ 基于/ 执行/ 单元/ 的/ 请求/ 分配/ 方式/ 保证/ 了/ 应用/ 大部分/ 实例/ 接收/ 到/ 的/ 请求/ 率/ 都/ 处于/ 较为/ 稳定/ 的/ 状态/ ,/ 各自/ 的/ 请求/ 率/ 不会/ 相互影响/ ,/ 解决/ 了/ 基于/ 轮询/ 的/ 负载平衡/ 方法/ 中/ 各/ 应用/ 实例/ 请求/ 率/ 之间/ 的/ 耦合/ 性/ ,/ 从而/ 防止出现/ 的/ 一个/ 应用/ 实例/ 状态/ 改变/ 而/ 影响/ 整个/ 服务器/ 集群/ 上/ 相应/ 应用/ 所有/ 实例/ 状态/ 的/ 现象/ ,/ 减少/ 了/ 触/ Page7/ 发/ 的/ 弹性/ 操作/ 次数/ ,/ 降低/ 了/ 由此/ 带来/ 的/ 资源/ 开销/ ./ 图/ 4/ 是/ 我们/ 基于/ 应用/ 执行/ 单元/ 的/ 请求/ 分配/ 方法/ ,/ 与/ 图/ 3/ 的/ 前置条件/ 完全相同/ ,/ 应用/ C/ 在/ VM1/ 、/ VM2/ 和/ VM3/ 三台/ 虚拟机/ 上/ 各/ 部署/ 了/ 1/ 个/ 执行/ 单元/ ,/ 它们/ 承担/ 的/ 请求/ 各有/ 2/ 单位/ 的/ 资源/ 开销/ ,/ 且/ 均/ 处于/ 满负荷/ 状态/ ./ 当/ 系统/ 进行/ 收缩/ 操作/ 关闭/ VM3/ 时/ ,/ 需要/ 将/ 它/ 上面/ 的/ 执行/ 单元/ “/ 整体/ ”/ 地/ 迁移/ 到/ 其他/ 虚拟机/ 上/ ./ 在/ 这个/ 例子/ 中/ 执行/ 单元/ 被/ 迁移/ 到/ 了/ 资源/ 占用/ 还/ 未/ 超过/ 阈值/ 的/ VM2/ 上/ ./ 上述/ 过程/ 只/ 触发/ 了/ 一次/ 弹性/ 操作/ ,/ 相比/ 基于/ 轮询/ 的/ 负载平衡/ 方法/ ,/ 其/ 弹性/ 操作/ 次数/ 较/ 少/ ,/ 因此/ 弹性/ 操作/ 带来/ 的/ 额外/ 开销/ 较/ 低/ ./ 应用/ 执行/ 单元/ 本质/ 上/ 仍/ 为/ 应用/ 实例/ ,/ 因此/ 实现/ 形式/ 也/ 与/ 后者/ 相同/ ,/ 即/ “/ 代码/ 加/ 中间件/ ”/ ./ 只是/ 在/ 对/ 其/ 转发/ 请求/ 时/ ,/ 会/ 由/ 转发/ 服务器/ 限定/ 其/ 接收/ 到/ 的/ 最高/ 请求/ 率为/ Rmax/ ./ Rmax/ 决定/ 了/ 单位/ 时间/ 内/ 单个/ 执行/ 单元/ 可以/ 接收/ 到/ 的/ 最大/ 请求/ 数/ ,/ 进而/ 决定/ 了/ 单个/ 执行/ 单元/ 的/ 资源/ 开销/ ./ 因此/ ,/ 为/ 应用/ 执行/ 单元/ 确定/ 合适/ 的/ Rmax/ 值/ 至关重要/ ./ 我们/ 基于/ 3.3/ 节/ 方法/ 获取/ 到/ 的/ 应用/ 特征/ 以及/ 应用/ 的/ 请求/ 率/ 上限/ Rul/ 来/ 确定/ Rmax/ ./ 令/ Rmax/ =/ Rul/ // k/ ,/ 其中/ k/ 为/ 正整数/ ,/ 将/ 确定/ Rmax/ 的/ 问题/ 转化/ 为/ 确定/ k/ 值/ ./ 如果/ k/ 过/ 小/ ,/ 则/ 意味着/ 满载/ 的/ 执行/ 单元/ 承载/ 了/ 较大/ 的/ 请求/ 率/ ,/ 需要/ 占用/ 更/ 多/ 的/ 资源量/ ,/ 会/ 难以/ 找到/ 合适/ 的/ 其他/ 应用/ 的/ 执行/ 单元/ 与其/ 共同/ 使用/ 服务器/ 的/ 资源/ ,/ 从而/ 丧失/ 搭配/ 部署/ 的/ 灵活性/ ;/ 如果/ k/ 过大/ ,/ 则/ 意味着/ 满载/ 的/ 执行/ 单元/ 承载/ 了/ 较/ 小/ 的/ 请求/ 率/ ,/ 所/ 需/ 资源量/ 较/ 少/ ,/ 便/ 能/ 在/ 同一个/ 虚拟机/ 上/ 部署/ 较/ 多数/ 目的/ 应用/ 执行/ 单元/ ,/ 但/ 由于/ 处理器/ 在/ 接受/ 各个/ 执行/ 单元/ 的/ 请求/ 时要/ 不断/ 地/ 进行/ 进程/ 的/ 调度/ ,/ 执行/ 单元/ 数目/ 过多会/ 导致/ 进程/ 调度/ 频繁/ ,/ 从而/ 增大/ 调度/ 开销/ ./ 因此/ ,/ k/ 值/ 的/ 确定/ 需在/ 保证/ 搭配/ 部署/ 灵活性/ 和/ 系统调度/ 开销/ 之间/ 做/ 一个/ 权衡/ ./ 另外/ ,/ 不同/ 应用/ 的/ k/ 值/ 也/ 会/ 不同/ :/ 对于/ 资源/ 开销/ 较大/ 的/ 应用/ ,/ 其/ k/ 值应/ 相对/ 较/ 小/ ,/ 否则/ 需较/ 多/ 执行/ 单元/ 才能/ 满足/ 其/ 资源/ 需求/ ,/ 增大/ 调度/ 开销/ ./ 因此/ k/ 值/ 的/ 大小/ 需/ 结合/ 应用/ 特征/ 确定/ ./ 4.2/ 弹性/ 操作/ 时机/ 将/ 完成/ 单独/ 部署/ 阶段/ 的/ 应用/ 搭配/ 部署/ 到/ 平台/ 上/ ,/ 会/ 触发/ 扩展/ 操作/ ,/ 为/ 该/ 应用/ 在/ 服务器/ 上/ 增加/ 一个/ 或/ 多个/ 执行/ 单元/ ./ 而/ 在/ 应用/ 运行/ 过程/ 中/ ,/ 我们/ 根据/ 其/ 历史/ 请求/ 率/ 预测/ 它/ 在/ 未来/ 一段时间/ 内/ 的/ 请求/ 率/ ,/ 预先/ 地为/ 其/ 确定/ 所/ 需/ 的/ 系统资源/ ,/ 并/ 通过/ 触发/ 弹性/ 操作/ 对/ 其/ 进行/ 资源/ 调配/ ,/ 在/ 保证/ 服务质量/ 的/ 前提/ 下/ 提高/ 资源/ 利用率/ ./ 同时/ ,/ 考虑/ 到/ 基于/ 预测/ 的/ 弹性/ 操作/ 有时/ 不能/ 很/ 好/ 地/ 处理/ 突发/ 请求/ 率/ 变化/ (/ 例如/ ,/ “/ 春运/ ”/ 期间/ 铁路/ 售票/ 系统/ 12306/ 在/ 开放/ 售票/ 的/ 一瞬间/ 可能/ 会/ 有/ 数以百万计/ 的/ 并发/ 请求/ [/ 21/ ]/ )/ ,/ 我们/ 会/ 对/ 平台/ 整体/ 的/ 资源/ 使用/ 情况/ 、/ 应用/ 响应/ 时间/ 等/ 进行/ 监测/ ,/ 并/ 将/ 它们/ 作为/ 弹性/ 操作/ 的/ 触发/ 条件/ ,/ 以/ 实时/ 应对/ 突发/ 请求/ 率/ 变化/ ./ 我们/ 将/ 上述/ 所有/ 可能/ 触发/ 弹性/ 操作/ 的/ 情况/ —/ —/ —/ 应用/ 进入/ 搭配/ 部署/ 阶段/ 以及/ 预测/ 结果/ 或/ 监测数据/ 满足/ 特定条件/ 定义/ 为/ 弹性/ 操作/ 时机/ ./ 具体/ 地/ ,/ 我们/ 按照/ 弹性/ 操作/ 类型/ —/ —/ —/ 扩展/ 或/ 收缩/ ,/ 设定/ 弹性/ 操作/ 时机/ 如下/ :/ (/ 1/ )/ 扩展/ 时机/ ①/ 应用/ 进入/ 搭配/ 部署/ 阶段/ ./ 基于/ 在/ 单独/ 部署/ 阶段/ 获得/ 的/ 应用/ 特征/ ,/ 我们/ 将/ 应用/ 搭配/ 部署/ 到/ 平台/ 服务器/ 上/ ./ 此时/ ,/ 触发/ 扩展/ 操作/ ,/ 为/ 应用/ 创建/ 一到/ 多个/ 执行/ 单元/ ,/ 具体/ 创建/ 数量/ 由该/ 应用/ 的/ 请求/ 率/ 预测/ 结果/ 决定/ ,/ 我们/ 将/ 在/ 后文/ 详述/ ./ ②/ 应用/ 平均/ 响应/ 时间/ 过高/ ./ 当/ 监测/ 到/ 应用/ 平均/ 响应/ 时间/ 超过/ 阈值/ 时/ ,/ 意味着/ 该/ 应用/ 拥有/ 的/ 系统资源/ 不足以/ 处理/ 目前/ 的/ 请求/ ,/ 部分/ 请求/ 被/ 推迟/ 处理/ ,/ 因此/ 需为/ 该/ 应用/ 增加/ 执行/ 单元/ ./ ③/ 预测/ 请求/ 率过/ 高/ ./ 当/ 预测/ 发现/ 某/ 应用/ 下/ 一时间/ 窗/ 的/ 请求/ 率/ 大于/ 当前/ 时段/ 其/ 所有/ 执行/ 单元/ 所/ 能/ 处理/ 的/ 最大/ 请求/ 率时/ ,/ 意味着/ 需要/ 增加/ 执行/ 单元/ 以/ 保证/ 服务质量/ ,/ 即/ 进行/ 扩展/ 操作/ ./ (/ 2/ )/ 收缩/ 时机/ ①/ 系统资源/ 利用率/ 过低/ ./ 应用/ 请求/ 降低/ 会/ 导致/ 该/ 应用/ 出现/ 多个/ 不满/ 执行/ 单元/ (/ 含空/ 执行/ 单元/ )/ ,/ 从而/ 导致/ 虚拟机/ 资源/ 利用率/ 降低/ ,/ 因此/ 有/ 必要/ 进行/ 收缩/ 操作/ ,/ 移除/ 空/ 执行/ 单元/ 并/ 将/ 多个/ 资源/ 利用率/ 低/ 的/ 虚拟机/ 上/ 的/ 执行/ 单元/ 合并/ 到/ 一台/ 虚拟机/ 上/ ./ 但/ 为了/ 避免/ 突发/ 式/ 的/ 应用/ 请求/ 率/ 下降/ 引发/ 不必要/ 的/ 收缩/ 操作/ ,/ 我们/ 只/ 在/ 下/ 一/ 预测/ 时间/ 窗/ 开始/ 前/ 分析/ 各/ 虚拟机/ 的/ 资源/ 利用率/ ,/ 并/ 结合/ 对/ 该/ 虚拟机/ 上/ 所有/ 应用/ 请求/ 率/ 的/ 预测/ 结果/ ,/ 计算/ 下/ 一时间/ 窗该/ 虚拟机/ 的/ 资源/ 利用率/ ,/ 如果/ 发现/ 系统资源/ 利用率/ 持续/ 低于/ 阈值/ ,/ 则/ 进行/ 收缩/ 操作/ ,/ 将/ 该/ 虚拟机/ 上/ 的/ 执行/ 单元/ 迁移/ 合并/ 到/ 另一台/ 虚拟机/ 上/ ,/ 并/ 在/ 此/ 过程/ 中对空/ 执行/ 单元/ 进行/ Page8/ 移除/ ,/ 以/ 提高/ 系统资源/ 利用率/ ./ ②/ 预测/ 请求/ 率过/ 低/ ./ 当/ 预测/ 发现/ 某/ 应用/ 下/ 一时间/ 窗/ 的/ 请求/ 率/ 小于/ 其/ N/ -/ 1/ (/ N/ 为/ 应用/ 当前/ 时段/ 的/ 执行/ 单元/ 数/ )/ 个/ 执行/ 单元/ 所/ 能/ 处理/ 的/ 最大/ 请求/ 率时/ ,/ 则/ 可以/ 在/ 开始/ 下/ 一时间/ 窗时/ 关闭/ 一定/ 数量/ 的/ 执行/ 单元/ 以/ 达到/ 节省/ 资源/ 的/ 目的/ ,/ 进行/ 弹性/ 收缩/ ./ 由于/ 我们/ 使用/ 了/ 基于/ 应用/ 执行/ 单元/ 的/ 请求/ 分配机制/ ,/ 对/ 应用/ 实例/ 能/ 接收/ 的/ 最高/ 请求/ 率/ Rmax/ 进行/ 了/ 限定/ ,/ 并且/ 在/ 转发/ 请求/ 时/ ,/ 保证/ 一个/ 应用/ 尽可能/ 多/ 的/ 执行/ 单元/ 处于/ 满负荷/ 运行/ 状态/ (/ 期待/ 通过/ 收缩/ 操作/ 使得/ 每个/ 应用/ 至多/ 有/ 一个/ 不满/ 状态/ 的/ 执行/ 单元/ )/ ./ 因此/ ,/ 对于/ 应用/ 进入/ 搭配/ 部署/ 阶段/ 导致/ 的/ 扩展/ 操作/ 及/ 预测/ 请求/ 率过/ 高/ 或/ 过/ 低/ 导致/ 的/ 弹性/ 操作/ ,/ 我们/ 可/ 通过/ 以下/ 方法/ 确定/ 需/ 增加/ 或/ 减少/ 的/ 执行/ 单元/ 数量/ ./ 假设/ 应用/ A/ 当前/ 在/ 平台/ 上/ 运行/ 了/ N/ (/ 对于/ 应用/ 进入/ 搭配/ 部署/ 阶段/ 的/ 情况/ ,/ N/ =/ 0/ )/ 个/ 执行/ 单元/ ,/ 则/ 期待/ 至少/ N/ -/ 1/ 个/ 执行/ 单元/ 处于/ 满负荷/ 状态/ ,/ 即/ 请求/ 率/ 达到/ Rmax/ ,/ 并且/ 此时/ A/ 能/ 接受/ 的/ 总/ 请求/ 率/ 至多/ 为/ N/ ×/ Rmax/ ./ 设/ 预测/ 得到/ A/ 下/ 一时/ 段/ 请求/ 率为/ r/ ,/ 如果/ r/ >/ N/ ×/ Rmax/ ,/ 此时/ 需/ 进行/ 弹性/ 扩展/ ,/ 且/ 需/ 增加/ (/ r/ // Rmax/ -/ N/ )/ 个/ 执行/ 单元/ ;/ 如果/ r/ / (/ N/ -/ 1/ )/ ×/ Rmax/ ,/ 此时/ 需/ 进行/ 弹性/ 收缩/ ,/ 且/ 需/ 减少/ (/ N/ -/ r/ // Rmax/ )/ 个/ 执行/ 单元/ ./ 4.3/ 弹性/ 操作/ 方案/ 由/ 4.2/ 节/ 我们/ 确定/ 了/ 弹性/ 操作/ 类型/ —/ —/ —/ 扩展/ 或/ 收缩/ ,/ 接下来/ 我们/ 对/ 具体/ 弹性/ 操作/ 方案/ 进行/ 实施/ ./ 在/ 这个/ 过程/ 中/ ,/ 无论是/ 扩展/ 操作/ 还是/ 收缩/ 操作/ ,/ 我们/ 都/ 会/ 对/ 多种不同/ 应用/ 的/ 执行/ 单元/ 进行/ 搭配/ 部署/ :/ 对于/ 扩展/ 操作/ ,/ 新创建/ 的/ 执行/ 单元/ 与/ 虚拟机/ 上/ 已有/ 应用/ 执行/ 单元/ 进行/ 搭配/ 部署/ ;/ 对于/ 收缩/ 操作/ ,/ 将/ 较为/ 空闲/ 的/ 虚拟机/ 上/ 的/ 应用/ 执行/ 单元/ 进行/ 迁移/ 合并/ ,/ 并/ 对/ 这些/ 应用/ 执行/ 单元/ 进行/ 搭配/ 部署/ ./ 通过/ 搭配/ 部署/ ,/ 可以/ 均衡/ 、/ 充分/ 地/ 使用/ 系统资源/ ,/ 有效/ 提高/ 资源/ 利用率/ ./ 应用/ 执行/ 单元/ 的/ 搭配/ 部署/ 是/ 弹性/ 操作/ 实施/ 的/ 关键/ ,/ 因此/ 我们/ 将/ 应用/ 经过/ 单独/ 部署/ 阶段/ 获取/ 到/ 应用/ 特征/ 后/ ,/ 在/ 平台/ 上/ 的/ 正式/ 部署/ 阶段/ 称为/ 搭配/ 部署/ 阶段/ ./ 下面/ 分别/ 介绍/ 扩展/ 和/ 收缩/ 两种/ 弹性/ 操作/ 的/ 操作/ 流程/ ./ 4.3/ ./ 1/ 扩展/ 在/ 扩展/ 过程/ 中/ ,/ 需为/ 应用/ 执行/ 单元/ 找到/ 一台/ 合适/ 的/ 虚拟机/ 进行/ 部署/ ,/ 即/ 需/ 确定/ 合适/ 的/ 部署/ 位置/ ./ 出于/ 充分利用/ 资源/ 和/ 保持/ 部署/ 结果/ 稳定/ 的/ 考虑/ ,/ 我们/ 采用/ 如下/ 的/ 虚拟机/ 查找/ 算法/ 为/ 应用/ 确定/ 合适/ 的/ 部署/ 位置/ :/ (/ 1/ )/ 由该/ 应用/ 的/ 资源/ 消耗/ 特征/ 获取/ 其/ 满负荷/ 执行/ 单元/ 的/ 资源/ 消耗/ RCRmax/ =/ {/ C1/ (/ Rmax/ )/ ,/ C2/ (/ Rmax/ )/ }/ (/ 此处/ 我们/ 仅以/ 应用/ CPU/ 开销/ 和/ 磁盘/ 开销/ 为例/ ,/ 分别/ 用/ C1/ 、/ C2/ 表示/ )/ ;/ (/ 2/ )/ 列出/ 当前/ 所有/ 活跃/ 虚拟机/ 的/ 资源/ 特征向量/ ,/ 其中/ 第/ i/ 个/ 虚拟机/ 的/ 特征向量/ 为/ 犛/ 犚/ i/ =/ {/ R1/ ,/ R2/ }/ (/ R1/ 、/ R2/ 分别/ 表示/ 虚拟机/ 当前/ 的/ CPU/ 开销/ 和/ 磁盘/ 开销/ )/ ,/ 并/ 找出/ 可以/ 容纳/ 该/ 应用/ 的/ 所有/ 虚拟机/ ,/ 即/ 满足条件/ R1/ +/ C1/ (/ Rmax/ )/ / 80/ %/ 且/ R2/ +/ C2/ (/ Rmax/ )/ / 80/ %/ (/ 如/ 3.3/ ./ 1/ 节/ 所述/ ,/ 设定/ 资源/ 开销/ 阈值/ 为/ 80/ %/ )/ ;/ (/ 3/ )/ 计算/ 每/ 一个/ 虚拟机/ 的/ δ/ =/ |/ (/ R1/ +/ C1/ (/ Rmax/ )/ )/ -/ (/ R2/ +/ C2/ (/ Rmax/ )/ )/ |/ ,/ 如果/ 仅/ 有/ 一台/ 虚拟机/ 拥有/ 最小/ δ/ 值/ ,/ 则/ 选择/ 此/ 虚拟机/ 部署/ 新/ 应用/ ;/ 否则/ ,/ 如果/ 有/ 多台/ 虚拟机/ δ/ 值/ 相等/ 且/ 均/ 为/ 最小值/ ,/ 则/ 进行/ 步骤/ (/ 4/ )/ ;/ (/ 4/ )/ 比较/ α/ =/ |/ (/ R1/ +/ C1/ (/ Rmax/ )/ )/ +/ (/ R2/ +/ C2/ (/ Rmax/ )/ )/ |/ ,/ 选出/ α/ 最大/ 的/ 虚拟机/ ,/ 部署/ 新/ 应用/ ./ 如果/ 找到/ 符合/ 上述/ 条件/ 的/ 虚拟机/ ,/ 则/ 在/ 该/ 虚拟机/ 上/ 创建/ 执行/ 单元/ ;/ 如果/ 没有/ 找到/ ,/ 则/ 开启/ 一个/ 新/ 的/ 虚拟机/ ,/ 并/ 部署/ 执行/ 单元/ ./ 选择/ δ/ 最小值/ ,/ 是因为/ 我们/ 希望/ 达到/ CPU/ 消耗/ 和/ 磁盘/ 消耗/ 的/ 均衡/ ,/ 这/ 就/ 意味着/ 不/ 存在/ 一台/ 虚拟机/ 拥有/ 很/ 高/ 的/ CPU/ 开销/ 和/ 很/ 低/ 的/ 磁盘/ 开销/ ,/ 或者/ 很/ 低/ 的/ CPU/ 开销/ 和/ 很/ 高/ 的/ 磁盘/ 开销/ ./ 这样/ 有利于/ 提高/ 系统资源/ 利用率/ ,/ 有利于/ 下/ 一次/ 的/ 部署/ 调整/ ./ 如图/ 5/ 所示/ ,/ 当前/ VM1/ 的/ CPU/ 时间/ 开销/ 为/ 20/ %/ ,/ 磁盘/ 时间/ 开销/ 为/ 60/ %/ ;/ VM2/ 的/ CPU/ 时间/ 开销/ 为/ 40/ %/ ,/ 磁盘/ 时间/ 开销/ 为/ 20/ %/ ./ 现在/ 需要/ 给/ 一个/ CPU/ 时间/ 开销/ 为/ 40/ %/ 、/ 硬盘/ 时间/ 开销/ 为/ 20/ %/ 的/ 新/ 应用/ 执行/ 单/ Page9/ 元/ 寻找/ 合适/ 的/ 部署/ 位置/ ./ 若/ 应用/ 执行/ 单元/ 被/ 部署/ 在/ VM1/ 上/ ,/ 则/ 部署/ 后该/ 虚拟机/ CPU/ 开销/ 为/ 60/ %/ ,/ 硬盘/ 开销/ 为/ 80/ %/ ,/ δ/ =/ 60/ %/ -/ 80/ %/ =/ 20/ %/ ;/ 若/ 应用/ 执行/ 单元/ 被/ 部署/ 在/ VM2/ 上/ ,/ 部署/ 后该/ 虚拟机/ CPU/ 开销/ 为/ 80/ %/ ,/ I/ // O/ 开销/ 为/ 40/ %/ ,/ δ/ =/ 80/ %/ -/ 40/ %/ =/ 40/ %/ ./ 因此/ 应该/ 选择/ δ/ 值较/ 小/ 的/ VM1/ ./ 选择/ α/ 最大值/ ,/ 是因为/ 我们/ 希望/ 虚拟机/ 的/ 资源/ 利用率/ 尽可能/ 地/ 逼近/ 阈值/ ,/ 这样/ 就/ 能/ 尽可能/ 地/ 减少/ 由于/ 虚拟机/ 资源/ 利用率/ 低/ 而/ 导致/ 的/ 收缩/ 操作/ ,/ 降低/ 由此/ 带来/ 的/ 额外/ 开销/ ./ 如图/ 6/ 所示/ ,/ 若/ 应用/ 执行/ 单元/ 被/ 部署/ 在/ VM1/ 上/ ,/ 则/ 部署/ 后/ VM1/ 的/ CPU/ 开销/ 为/ 80/ %/ ,/ 磁盘/ 开销/ 为/ 80/ %/ ,/ δ/ =/ 80/ %/ -/ 80/ %/ =/ 0/ ;/ 若/ 应用/ 执行/ 单元/ 被/ 部署/ 在/ VM2/ ,/ 则/ 部署/ 后/ VM2/ 的/ CPU/ 开销/ 为/ 60/ %/ ,/ 磁盘/ 开销/ 将/ 为/ 60/ %/ ,/ δ/ =/ 60/ %/ -/ 60/ %/ =/ 0/ ./ 此时/ 两者/ δ/ 相等/ ,/ 因此/ 进入/ 步骤/ (/ 4/ )/ 的/ 选择/ 过程/ :/ 若/ 应用/ 部署/ 在/ VM1/ 上/ ,/ 则/ α/ =/ 80/ %/ +/ 80/ %/ =/ 160/ %/ ,/ 若/ 部署/ 在/ VM2/ 上/ ,/ 则/ α/ =/ 60/ %/ +/ 60/ %/ =/ 120/ %/ ./ 我们/ 选择/ 将/ 应用/ 执行/ 单元/ 部署/ 在/ α/ 值/ 较大/ 的/ VM1/ 上/ ./ 4.3/ ./ 2/ 收缩/ 根据/ 4.2/ 节/ ,/ 收缩/ 操作/ 有/ 两种/ 触发/ 时机/ —/ —/ —/ 系统资源/ 利用率/ 过低/ 或/ 应用/ 预测/ 请求/ 率过/ 低/ ,/ 下面/ 分别/ 介绍/ 它们/ 各自/ 的/ 操作/ 流程/ ./ 当/ 监测/ 到/ 系统资源/ 利用率/ 过/ 低时/ ,/ 需对/ 多台/ 虚拟机/ 上/ 的/ 应用/ 执行/ 单元/ 进行/ 迁移/ 合并/ ,/ 这/ 实际上/ 是/ 对/ 应用/ 执行/ 单元/ 的/ 重新部署/ ,/ 因此/ 其/ 过程/ 与/ 扩展/ 操作过程/ 类似/ ./ 例如/ :/ 假设/ 要/ 将/ 虚拟机/ V/ 上/ 的/ 应用/ 执行/ 单元/ 与/ 其他/ 虚拟机/ 上/ 的/ 执行/ 单元/ 合并/ ,/ 则/ 通过/ 4.3/ ./ 1/ 节/ 的/ 虚拟机/ 查找/ 算法/ 判断/ 能否/ 找到/ 一台/ 虚拟机/ W/ 将/ V/ 上/ 的/ 执行/ 单元/ 部署/ 上去/ ,/ 如果/ 可以/ ,/ 迁移/ V/ 上/ 的/ 执行/ 单元/ 至/ W/ ./ 而/ 当/ 预测/ 应用/ 请求/ 率过/ 低时/ ,/ 需在/ 下/ 一/ 预测/ 时间/ 窗/ 开始/ 时/ 移除/ 该/ 应用/ 的/ 部分/ 执行/ 单元/ :/ (/ 1/ )/ 列出/ 所有/ 拥有/ 该/ 应用/ 执行/ 单元/ 的/ 虚拟机/ ;/ (/ 2/ )/ 找到/ 一台/ 其上/ 执行/ 单元/ 总数/ (/ 不仅/ 是/ 该/ 应用/ 的/ 执行/ 单元/ 数/ )/ 最少/ 的/ 的/ 活跃/ 虚拟机/ V/ ,/ 将/ 该/ 虚拟机/ 上该/ 应用/ 的/ 执行/ 单元/ 移除/ ;/ (/ 3/ )/ 如果/ 虚拟机/ V/ 上/ 已经/ 没有/ 运行/ 的/ 应用/ ,/ 则/ 将/ 其/ 关机/ ;/ (/ 4/ )/ 如果/ V/ 上该/ 应用/ 的/ 执行/ 单元/ 数/ 小于/ 我们/ 期待/ 移除/ 的/ 数目/ ,/ 则/ 重复/ 进行/ 上述/ 操作/ ./ 5/ 方法/ 评估/ 5.1/ 资源/ 特征/ 稳定性/ 验证/ 如/ 第/ 3/ 节/ 所述/ ,/ 我们/ 在/ 应用/ 的/ 单独/ 部署/ 阶段/ 获取/ 其/ 资源/ 消耗/ 特征/ ,/ 然后/ 在/ 搭配/ 部署/ 阶段/ 基于/ 应用/ 特征/ 进行/ 弹性/ 操作/ ,/ 以/ 优化/ 应用/ 的/ 资源分配/ ./ 为此/ ,/ 需/ 通过/ 实验/ 验证/ 应用/ 在/ 单独/ 部署/ 阶段/ 的/ 资源/ 消耗/ 情况/ 是否/ 与/ 搭配/ 部署/ 阶段/ 一致/ ./ 实验/ 使用/ 了/ 1/ 台/ IBM/ 的/ HS/ -/ 21Blade/ 服务器/ ,/ 并/ 通过/ VMware/ 硬件/ 虚拟化/ 系统/ 将/ 服务器/ 划分/ 为/ 2/ 台/ 虚拟机/ V1/ 和/ V2/ ./ 实验/ 过程/ 如下/ :/ (/ 1/ )/ 在/ 虚拟机/ V1/ 上/ 部署/ 待测/ 应用/ A/ ,/ 以/ 每秒/ 5/ 次/ ,/ 10/ 次/ ,/ 15/ 次/ ,/ …/ ,/ 45/ 次/ ,/ 50/ 次/ 的/ 速率/ 向/ 应用/ A/ 发送/ 请求/ ,/ 监测/ 并/ 记录/ A/ 的/ CPU/ 开销/ 和/ 磁盘/ 开销/ ;/ (/ 2/ )/ 在/ 虚拟机/ V2/ 上/ 部署/ 待测/ 应用/ B/ ,/ 以/ 每秒/ 5/ 次/ ,/ 10/ 次/ ,/ 15/ 次/ ,/ …/ ,/ 45/ 次/ ,/ 50/ 次/ 的/ 速率/ 向/ 应用/ B/ 发送/ 请求/ ,/ 监测/ 并/ 记录/ B/ 的/ CPU/ 开销/ 和/ 磁盘/ 开销/ ;/ (/ 3/ )/ 将/ 应用/ A/ 和/ 应用/ B/ 同时/ 部署/ 在/ 虚拟机/ V1/ 上/ ,/ 以/ 每秒/ 25/ 次/ 的/ 速率/ 向/ 应用/ A/ 发送/ 请求/ ,/ 同时/ 以/ 每秒/ 5/ 次/ ,/ 10/ 次/ ,/ 15/ 次/ ,/ …/ ,/ 45/ 次/ 、/ 50/ 次/ 的/ 速率/ 向/ 应用/ B/ 发送/ 请求/ ,/ 监测/ 并/ 记录/ 应用/ A/ 和/ 应用/ B/ 总/ 的/ CPU/ 开销/ 和/ 磁盘/ 开销/ ./ 可测/ 得/ 单独/ 部署/ 在/ 虚拟机/ V1/ 上时/ ,/ 应用/ A/ 在/ 请求/ 率为/ 每秒/ 25/ 次时/ CPU/ 开销/ 为/ 20.35/ %/ ,/ I/ // O/ 开销/ 为/ 12.46/ %/ ,/ 记为/ CPUA/ =/ 20.35/ ,/ IOA/ =/ 12.46/ ./ 按照/ 上述/ 实验/ 步骤/ ,/ CPU/ 开销/ 结果/ 如表/ 1/ 所示/ ,/ 其中/ rrB/ 为/ 应用/ B/ 的/ 请求/ 率/ ,/ 单位/ 为/ “/ 次/ 每秒/ ”/ ,/ CPUB/ 为/ 应用/ B/ 单独/ 部署/ 在/ 虚拟机/ 上时/ 相应/ 请求/ 率下/ 的/ CPU/ 开销/ ,/ CPUA/ +/ B/ 表示/ 应用/ A/ 、/ 应用/ B/ 同时/ 部署/ 在/ 虚拟机/ V1/ 上时/ 总/ 的/ CPU/ 开销/ ,/ Δ/ CPU/ =/ CPUA/ +/ B/ -/ (/ CPUA/ +/ CPUB/ )/ ,/ 表示/ 应用/ 搭配/ 部署/ 与/ 单独/ 部署/ 时/ 的/ CPU/ 开/ Page10/ 销/ 差值/ ./ 从表中/ 可知/ ,/ 在/ 负载/ 不太高/ 的/ 情况/ 下/ ,/ Δ/ CPU/ 的/ 值/ 相对/ 较/ 低/ ,/ 这/ 表明/ ,/ 将/ 应用/ 搭配/ 部署/ 在/ 同一/ 台/ 虚拟机/ 上时/ ,/ CPU/ 开销/ 与/ 分别/ 部署/ 在/ 两台/ 虚拟机/ 上时/ 的/ CPU/ 开销/ 差别/ 不大/ ./ 表/ 2/ 为/ 磁盘/ 开销/ 实验/ 结果/ ,/ 可以/ 得到/ 与/ CPU/ 开销/ 类似/ 的/ 结论/ ./ 因此/ 在/ 应用/ 负载/ 压力/ 不大/ 的/ 情况/ 下/ ,/ 其/ 在/ 单独/ 部署/ 阶段/ 获取/ 到/ 的/ 应用/ 特征/ 可/ 应用/ 于/ 搭配/ 部署/ 阶段/ 指导/ 弹性/ 操作/ ./ rrB5101520253035404550rrB51015202530354045505/ ./ 2/ 实验/ 环境/ 下面/ 我们/ 在/ 自主/ 开发/ 的/ PaaS/ 平台/ PAE/ (/ PKUAppEngine/ )/ 上/ 对/ 本文/ 提出/ 的/ 基于/ 应用/ 特征/ 的/ PaaS/ 弹性/ 资源管理/ 机制/ AFERM/ 进行/ 实验/ 验证/ ./ 实验/ 使用/ 了/ 5/ 台/ 同构/ 的/ 物理/ 服务器/ ,/ 它们/ 每个/ 都/ 通过/ VMware/ 硬件/ 虚拟化/ 系统/ ,/ 被/ 划分/ 为/ 4/ 台/ 虚拟机/ ,/ 因此/ 共有/ 20/ 台/ 同构/ 的/ 虚拟机/ ./ 在/ 各/ 虚拟/ 机上安装/ 了/ 实验所/ 必须/ 的/ 系统软件/ 和/ 相关/ 中间件/ ,/ 其中/ 数据库/ 软件/ 为/ MySQLServer5/ ./ 5.36/ ,/ JVM/ 为/ OracleJDK7/ ./ 0.15/ &/ OracleJRE7/ ./ 0.400/ ./ 43/ ,/ 应用服务器/ 为/ Tomcat7/ ./ 0.6/ ,/ 代理服务器/ 为/ Nginx1/ ./ 4.1/ ./ 5.3/ 实验/ 数据/ 集/ 实验所/ 使用/ 的/ 数据/ 来自/ NLANR/ ①/ 实验/ 数据/ 集/ 和/ 百度/ 公司/ 提供/ 的/ BAE3/ ./ 0/ 真实/ 应用/ 监测数据/ 集/ ,/ 它们/ 实际上/ 都/ 是/ Web/ 应用/ 的/ 访问/ 日志/ ./ 为了/ 便于/ 进行/ 实验/ ,/ 对/ 其/ 进行/ 如下/ 处理/ :/ (/ 1/ )/ 将/ 每/ 一条/ 日志/ 按照/ 其/ 行为/ 进行/ 区分/ :/ 对于/ 访问/ 一个/ servelet/ 或者/ 一个/ action/ 的/ 行为/ ,/ 认为/ 该/ 应用/ 执行/ 了/ 一次/ CPU/ 密集型/ 的/ 操作/ ,/ 该条/ 日志/ 中/ 的/ 请求/ 响应/ 时间/ 长度/ 代表/ 这次/ CPU/ 密集型/ 操作/ 的/ 任务量/ ;/ 对于/ 访问/ 一个/ 文件/ 的/ 行为/ ,/ 认为/ 该/ 应用/ 执行/ 了/ 一次/ I/ // O/ 密集型/ 的/ 操作/ ,/ 该条/ 日志/ 中/ 的/ 请求/ 文件/ 读写/ 量/ 的/ 值/ 代表/ 这次/ I/ // O/ 密集型/ 操作/ 的/ 任务量/ ./ (/ 2/ )/ 统计/ 应用/ 访问/ 情况/ ,/ 以/ 其中/ 连续/ 29/ 天/ 的/ 统计/ 结果/ 作为/ 数据/ 集/ ./ 其中/ ,/ 前/ 28/ 天/ 的/ 数据/ 作为/ 训练/ 集/ ,/ 用于/ 获取/ 应用/ 特征/ ,/ 最后/ 1/ 天/ 的/ 数据/ 作为/ 实验/ 集/ ,/ 用于/ 验证/ 本文/ 提出/ 的/ 弹性/ 策略/ ./ 5.4/ 实验/ 过程/ 我们/ 在/ 平台/ 上/ 自行设计/ 了/ 4/ 种/ 类型/ 的/ 应用/ 进行/ 实验/ ,/ 它们/ 在/ CPU/ 、/ I/ // O/ 等/ 资源/ 开销/ 方面/ 各不相同/ ./ 所有/ 应用/ 的/ 请求/ 率/ 变化/ 数据/ 均/ 来自/ 5.3/ 节/ 所述/ 的/ NLANR/ 数据/ 集/ 或/ BAE3/ ./ 0/ 数据/ 集/ ,/ 每个/ 应用/ 在/ 24/ 小时/ 内/ 的/ 请求/ 次数/ 在/ 30/ 万次/ 到/ 40/ 万次/ 之间/ ,/ 与/ 云/ 平台/ 上/ 比较/ 典型/ 的/ 应用/ 的/ 请求/ 情况/ 相符/ ./ 4/ 个/ 应用/ 作为/ 实验/ 集/ 的/ 最后/ 一天/ 24/ 小时/ 的/ 请求/ 率/ 变化趋势/ 分别/ 如图/ 7/ (/ a/ )/ ~/ (/ d/ )/ 所示/ ,/ 图中/ 横轴/ 表示/ 时间/ ,/ 每/ 0.5/ 小时/ 统计/ 一次/ 请求/ 数/ ,/ 共计/ 48/ 个/ 统计/ 时间/ 点/ ;/ 纵轴/ 表示/ 应用/ 在/ 相应/ 的/ 0.5/ 小时/ 内/ 的/ 请求/ 数/ ./ 图/ 7/ (/ a/ )/ 展示/ 了/ 以/ CPU/ 占用/ 为主/ 的/ 应用/ A/ 的/ 请求/ 率/ 变化/ 情况/ ,/ 该/ 应用/ 请求/ 数据/ 来自/ NLANR/ 数据/ 集/ ./ 其/ 执行/ 单元/ Rmax/ 为/ 60req/ // min/ (/ 次/ // 分钟/ ,/ 下同/ )/ ,/ 满负荷/ 执行/ 单元/ 的/ CPU/ 时间/ 开销/ 为/ 23/ %/ ,/ 磁盘/ 时间/ 开销/ 为/ 3/ %/ ./ 图/ 7/ (/ b/ )/ 展示/ 了/ 以/ I/ // O/ 占用/ 为主/ 的/ 应用/ B/ 的/ 请求/ 率/ 变化/ 情况/ ,/ 该/ 应用/ 请求/ 数据/ 来自/ BAE3/ ./ 0/ 数据/ 集/ ./ 其/ 执行/ 单元/ Rmax/ 为/ 80req/ // min/ ,/ 满负荷/ 执行/ 单元/ 的/ CPU/ 时间/ 开销/ 为/ 4/ %/ ,/ 磁盘/ 时间/ 开销/ 为/ 20/ %/ ./ 图/ 7/ (/ c/ )/ 展示/ 了/ CPU/ 占用/ 相对/ 较/ 多/ 而/ I/ // O/ 占用/ 相对/ 较少/ 的/ 应用/ C/ 的/ 请求/ 率/ 变化/ 情况/ ,/ 该/ 应用/ 请求/ 数据/ 来自/ BAE3/ ./ 0/ 数据/ 集/ ./ 其/ 执行/ 单元/ Rmax/ 为/ 100req/ // min/ ,/ 满负荷/ 执行/ 单元/ 的/ CPU/ 时间/ 开销/ 为/ 17/ %/ ,/ 磁盘/ 时间/ 开销/ 为/ 6/ %/ ./ 图/ 7/ (/ d/ )/ 展示/ 了/ I/ // O/ 占用/ 相对/ 较/ 多/ 而/ CPU/ 占用/ 相对/ 较少/ 的/ 应用/ D/ 的/ 请求/ 率/ 变化/ 情况/ ,/ 该/ 应用/ 请求/ 数据/ 来自/ BAE3/ ./ 0/ 数据/ 集/ ./ 其/ 执行/ 单元/ Rmax/ 为/ 90req/ // min/ ,/ 满负荷/ 执行/ 单元/ 的/ CPU/ 时间/ 开销/ 为/ 7/ %/ ,/ 磁盘/ 时间/ 开销/ 为/ 17/ %/ ./ 平台/ 上/ 应用/ 的/ 总/ 请求/ 率/ 由/ 上述/ 4/ 个/ 应用/ 的/ 请求/ ①/ NLANR/ (/ NationalLaboratoryforAppliedNetworkResearch/ )/ Page11/ 图/ 7/ 实验/ 应用/ 的/ 请求/ 率/ 变化率/ 叠加/ 而成/ ,/ 其/ 变化/ 情况/ 如图/ 7/ (/ e/ )/ 所示/ ./ 系统/ 设定/ 单台/ 虚拟机/ 的/ CPU/ 时间/ 开销/ 上限/ 为/ 80/ %/ ,/ 磁盘/ 时间/ 开销/ 上限/ 为/ 75/ %/ ;/ 每台/ 虚拟机/ 应用服务器/ 数/ 上限/ 为/ 6/ ,/ 即/ 最/ 多/ 可/ 将/ 6/ 个/ 应用/ 部署/ 到/ 一台/ 虚拟机/ 上/ ;/ 虚拟机/ 启动/ 时间/ 为/ 120s/ ,/ 应用服务器/ 启动/ 时间/ 为/ 30s/ ./ 我们/ 按照/ 图/ 7/ 所示/ 请求/ 率/ 变化/ 情况/ 向/ 部署/ 在/ 系统/ 上/ 的/ 实验/ 应用/ 发出/ 访问/ 请求/ ,/ 初始/ 情况/ 下/ 在/ 5/ 台/ 物理/ 服务器/ 上/ 各/ 启动/ 1/ 台/ 虚拟机/ ,/ 即/ 共/ 启动/ 5/ 台/ 虚拟机/ ,/ 在/ 其中/ 一/ 台上/ 部署/ 应用/ A/ 、/ 应用/ B/ 、/ 应用/ C/ 、/ 应用/ D/ 的/ 执行/ 单元/ 各/ 1/ 个/ ,/ 其余/ 虚拟机/ 在/ 初始/ 情况/ 下/ 空闲/ ./ 5.5/ 实验/ 结果/ 分析/ 本文/ 对比/ 了/ 以下/ 4/ 种/ 弹性/ 策略/ ,/ 分别/ 是/ :/ (/ 1/ )/ 基于/ 请求/ 的/ 弹性/ 策略/ R/ (/ RequestBasedElasticApproach/ )/ ./ 这是/ 我们/ 参照/ Gandhi/ 等/ 人/ [/ 6/ ]/ 的/ 工作/ 实现/ 的/ 对比/ 策略/ ,/ 以/ 应用/ 实时/ 的/ 请求/ 率/ 作为/ 系统/ 执行/ 弹性/ 操作/ 的/ 依据/ ./ (/ 2/ )/ 基于/ CPU/ 占用/ 的/ 弹性/ 策略/ C/ (/ CPUBasedElasticApproach/ )/ ./ 这是/ 我们/ 参照/ Xiao/ 等/ 人/ [/ 15/ ]/ 的/ 工作/ 实现/ 的/ 对比/ 策略/ ,/ 以/ 单一/ 的/ CPU/ 开销/ 情况/ 作为/ 系统/ 执行/ 弹性/ 操作/ 的/ 依据/ ./ (/ 3/ )/ 基于/ 应用/ 资源/ 消耗/ 特征/ 的/ 弹性/ 策略/ AFERM/ -/ RC/ (/ ApplicationFeatureBasedElasticManagement/ -/ ResourceConsumption/ )/ ./ 这是/ 本文/ 提出/ 的/ 策略/ ,/ 但仅/ 考虑/ 应用/ 的/ 资源/ 消耗/ 特征/ ,/ 未/ 考虑/ 请求/ 率/ 变化/ 特征/ ./ 这个/ 策略/ 用来/ 评估/ AFERM/ 增加/ 请求/ 预测/ 后/ 的/ 效果/ ./ (/ 4/ )/ 请求/ 率/ 预测/ 与/ 资源/ 开销/ 实时/ 监测/ 相结合/ 的/ 基于/ 应用/ 特征/ 的/ 弹性/ 策略/ AFERM/ ./ 这是/ 本文/ 提出/ 的/ 完整/ 的/ 策略/ ,/ 包含/ 了/ 预测/ 机制/ ./ 按照/ 5.3/ 节/ 所述/ 实验/ 过程/ ,/ 我们/ 对/ AFERM/ 与/ 其他/ 方法/ 进行/ 了/ 对比/ 实验/ ,/ 实验/ 结果/ 如图/ 8/ 及表/ 3/ 所示/ ./ Page12/ 图/ 8/ 不同/ 策略/ 的/ 虚拟机/ 、/ 物理/ 机/ 占用/ 数/ 策略/ 名称/ AFERM/ 策略/ AFERM/ -/ RC/ 策略/ 251.0/ C/ 策略/ R/ 策略/ 在/ 图/ 8/ 中/ ,/ 横轴/ 表示/ 时间/ ,/ 每/ 30/ 分钟/ 对/ 应用/ 所/ 占用/ 的/ 虚拟机/ 或/ 物理/ 机数量/ 进行/ 一次/ 统计/ ,/ 因此/ 24/ 小时/ 的/ 实验/ 周期/ 内/ 共有/ 48/ 个/ 统计/ 点/ ;/ 纵轴/ 表示/ 统计/ 所得/ 的/ 虚拟机/ 或/ 物理/ 机数/ ./ 由图/ 8/ 可见/ ,/ 基于/ 应用/ 特征/ 的/ 两种/ 弹性/ 策略/ ,/ 相比/ 其他/ 两种/ 对比/ 策略/ ,/ 占用/ 更/ 少/ 数量/ 的/ 虚拟机/ 和/ 物理/ 机/ ,/ 其中/ AFERM/ 策略/ 相比/ R/ 策略/ 最多能/ 减少/ 约/ 50/ %/ 的/ 虚拟机/ 占用/ ,/ 因此/ 基于/ 应用/ 特征/ 的/ 弹性/ 策略/ 更加/ 节省/ 服务器资源/ ./ 进一步/ 看/ ,/ 结合/ 了/ 应用/ 请求/ 率/ 预测/ 的/ AFERM/ 策略/ 相比/ 于/ AFERM/ -/ RC/ 策略/ ,/ 占用/ 更/ 少/ 数量/ 的/ 虚拟机/ ,/ 这/ 表明/ 通过/ 对/ 应用/ 请求/ 率/ 的/ 预测/ ,/ 弹性/ 机制/ 性能/ 得到/ 了/ 进一步/ 的/ 提高/ ./ 需要/ 注意/ 的/ 是/ ,/ 我们/ 的/ 实验/ 应用/ 都/ 属于/ 请求/ 率/ 规律/ 相对/ 较/ 好/ 的/ 应用/ ,/ 对于/ 请求/ 规律性/ 较差/ 的/ 应用/ ,/ 请求/ 率/ 预测/ 的/ 方法/ 就/ 失去/ 了/ 其/ 优越性/ ./ 除了/ 虚拟机/ 、/ 物理/ 机/ 占用/ 数/ ,/ 我们/ 的/ 实验/ 还/ 对比/ 了/ 各种/ 策略/ 的/ 资源/ 占/ 用量/ 和/ 应用/ 服务质量/ ./ 为了/ 获得/ 量化/ 的/ 资源/ 占用/ 情况/ ,/ 我们/ 定义/ 了/ 一个/ 资源/ 占/ 用量/ :/ 其中/ ,/ VM/ 表示/ 统计/ 点/ 对应/ 的/ 虚拟机/ 数/ ,/ Hour/ 表示/ 统计/ 时间/ 长度/ (/ 每/ 半小时/ 统计/ 一次/ )/ ./ 表/ 3/ 是/ 对/ 实验/ 结果/ 的/ 量化/ 分析/ ./ 从表中/ 可知/ ,/ 与/ R/ 策略/ 相比/ ,/ AFERM/ 平均/ 可以/ 减少/ 28.3/ %/ 的/ 虚拟机/ 占用/ ,/ 最大/ 虚拟机/ 占用/ 数少/ 了/ 5/ 台/ ,/ 由于/ 每台/ 物理/ 机都/ 有/ 4/ 个/ 虚拟机/ ,/ 因此/ 可以/ 直接/ 减少/ 1/ 台/ 物理/ 机/ 的/ 使用/ (/ 这/ 在/ 图/ 8/ (/ b/ )/ 中/ 也/ 有/ 反映/ )/ ./ 尽管/ 由于/ 更加/ “/ 吝啬/ ”/ 的/ 资源分配/ 策略/ 导致/ 请求/ 违反/ 数/ 增加/ 了/ 94/ 次/ ,/ 但/ 在/ 总/ 请求/ 数为/ 1307888/ 次/ 的/ 前提/ 下/ ,/ 这个/ 增加/ 是/ 可以/ 接受/ 的/ ./ 因此/ AFERM/ 在/ 保证/ 服务质量/ 的/ 表现/ 上/ ,/ 与/ R/ 策略/ 相比/ 并/ 无/ 明显/ 劣势/ ./ 与/ C/ 策略/ 相比/ ,/ AFERM/ 平均/ 可以/ 减少/ 21.9/ %/ 的/ 虚拟机/ 占用/ ,/ 最大/ 虚拟机/ 占用/ 数少/ 了/ 4/ 台/ ,/ 即/ 可以/ 直接/ 减少/ 1/ 台/ 物理/ 机/ 的/ 使用/ ./ 请求/ 违反/ 数/ 仅仅/ 增加/ 了/ 6/ 次/ ,/ 在/ 保证/ 服务质量/ 的/ 表现/ 上/ ,/ 两者/ 表现/ 相当/ ./ 与/ AFERM/ -/ RC/ 相比/ ,/ AFERM/ 在/ 虚拟机/ 占用/ 上/ 减少/ 了/ 8.2/ %/ ,/ 最大/ 虚拟机/ 占用/ 数/ 也/ 减少/ 了/ 1/ 台/ ,/ 同时/ 请求/ 违反/ 数/ 减少/ 了/ 178/ 次/ ./ 可见/ 由于/ 引入/ 了/ 预测/ ,/ 我们/ 的/ AFERM/ 无论是/ 在/ 节省/ 服务器资源/ 方面/ ,/ 还是/ 在/ 保证/ 服务质量/ 方面/ ,/ 都/ 使/ 其/ 得到/ 了/ 有效/ 的/ 提高/ ./ 综上所述/ ,/ AFERM/ 能够/ 在/ 保证/ 服务质量/ 的/ 情况/ 下/ ,/ 有效/ 减少/ 服务器/ 的/ 使用/ ./ 与/ 对比/ 策略/ 相比/ ,/ 平均/ 可以/ 减少/ 28.3/ %/ 的/ 虚拟机/ 占用/ ,/ 最多时/ 可以/ 减少/ 50/ %/ ./ 6/ 总结/ 本文/ 提出/ 的/ 基于/ 应用/ 特征/ 的/ PaaS/ 弹性/ 资源管理/ 机制/ AFERM/ 通过/ 分析/ 应用/ 的/ 日志/ 信息/ ,/ 对/ 应用/ 请求/ 率/ 进行/ 预测/ ;/ 并/ 结合/ 对/ 应用/ 所在/ 系统/ 环境/ 的/ 监/ Page13/ 测/ 记录/ 分析/ ,/ 建立/ 起/ 涵盖/ 应用/ 请求/ 率/ 变化/ 信息/ 和/ 资源/ 占用/ 信息/ 的/ 应用/ 特征/ 模型/ ;/ 将/ 不同/ 类型/ 的/ 应用/ 进行/ 搭配/ 部署/ ,/ 使/ 不同/ 特征/ 的/ 应用/ 竞争/ 不同/ 的/ 系统资源/ ,/ 提高/ 各种/ 系统资源/ 的/ 利用率/ ;/ 提出/ 了/ 一种/ 更为/ 合理/ 的/ 请求/ 分配机制/ ,/ 将/ 一般/ 的/ 应用/ 实例/ 转化/ 为/ 请求/ 率/ 和/ 资源/ 开销/ 相对/ 固定/ 的/ 应用/ 执行/ 单元/ ,/ 从而/ 保持/ 部署/ 方案/ 的/ 相对/ 稳定/ ,/ 有效/ 地/ 减少/ 了/ 弹性/ 操作/ 的/ 次数/ ,/ 降低/ 了/ 弹性/ 操作/ 带来/ 的/ 资源/ 开销/ ./ 实验/ 证明/ ,/ AFERM/ 在/ 保证/ 应用/ 服务质量/ 的/ 基础/ 上/ ,/ 可以/ 有效/ 地/ 降低/ 资源/ 的/ 使用/ ./ 现阶段/ AFERM/ 只/ 考虑/ 了/ 应用/ 的/ 不同/ 特征/ ,/ 还/ 没有/ 考虑/ PaaS/ 平台/ 的/ 差异/ ,/ 因此/ 对于/ 由/ 不同/ 性能/ 的/ 物理/ 机和/ 虚拟机/ 构成/ 的/ PaaS/ 系统/ ,/ 目前/ 的/ 方法/ 不能/ 提供/ 有效/ 的/ 支持/ ./ 今后/ 我们/ 将/ 把/ 系统/ 的/ 资源/ 特征/ 作为/ 参数/ 加入/ 到/ 特征/ 模型/ 中/ ,/ 以便/ 更/ 广泛/ 地/ 支持/ 各种/ 不同/ 的/ PaaS/ 系统/ ./ 另外/ ,/ 在/ 获取/ 请求/ 率/ 变化/ 特征/ 时/ 可以/ 尝试/ 采用/ 其他/ 工具/ 或/ 方法/ ,/ 如小波/ 变换/ 等/ ,/ 从而/ 提高/ 请求/ 预测/ 精度/ ,/ 更好/ 的/ 指导/ 弹性/ 资源分配/ ./ 

