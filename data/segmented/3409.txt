Page1/ 复杂/ 软件/ 的/ 级联/ 故障/ 建模/ 王健/ 1/ )/ ,/ 2/ )/ 刘衍/ 珩/ 1/ )/ ,/ 2/ )/ 刘/ 雪莲/ 3/ )/ 1/ )/ (/ 吉林大学/ 计算机科学/ 与/ 技术/ 学院/ 长春/ 130012/ )/ 2/ )/ (/ 吉林大学/ 符号计算/ 与/ 知识/ 工程/ 教育部/ 重点/ 实验室/ 长春/ 130012/ )/ 3/ )/ (/ 吉林大学/ 软件/ 学院/ 长春/ 130012/ )/ 摘要/ 软件/ 复杂性/ 的/ 增加/ 直接/ 导致/ 软件/ 故障/ 的/ 复杂性/ 增加/ ./ 从/ 系统/ 科学/ 的/ 角度/ 出发/ ,/ 采用/ 复杂/ 网络/ 等/ 方法/ 和/ 技术/ 在/ 整体/ 上/ 研究/ 复杂/ 软件/ 的/ 级联/ 故障/ 特性/ 是/ 研究/ 软件/ 质量/ 的/ 一个/ 新视角/ ./ 以/ 函数/ 为/ 节点/ 、/ 以/ 调用/ 关系/ 为边/ ,/ 提出/ 了/ 使用/ 有/ 向/ 边/ 和/ 边权/ 表述/ 函数/ 间/ 的/ 调用/ 关系/ 和/ 紧密/ 程度/ 的/ 拓扑/ 模型/ ./ 通过/ 引入/ 函数/ 容错/ 能力/ 和/ 软件/ 故障/ 强度/ 建立/ 复杂/ 软件/ 的/ 级联/ 故障/ 模型/ ,/ 模拟/ 软件/ 运行/ 时/ 的/ 故障/ 传播/ 行为/ ./ 对/ 3/ 个/ 实际/ 软件/ 网络/ 的/ 实验/ 结果表明/ ,/ 弱/ 的/ 故障/ 强度/ 、/ 少/ 的/ 初始/ 故障/ 节点/ 和/ 高/ 的/ 容错/ 能力/ 均会/ 减缓/ 故障/ 的/ 传播速度/ 和/ 缩小/ 故障/ 的/ 波及/ 范围/ ./ 分析/ 了/ 部分/ 软件/ 节点/ 最终/ 未/ 被/ 感染/ 的/ 原因/ ,/ 文中/ 模型/ 有助于/ 为/ 软件工程/ 人员/ 准确/ 检测/ 复杂/ 软件/ 的/ 复杂性/ 和/ 容错性/ 提供/ 新/ 的/ 思路/ ./ 关键词/ 复杂/ 网络/ ;/ 软件/ 复杂性/ ;/ 软件/ 容错性/ ;/ 级联/ 故障/ ;/ 软件/ 度量/ 1/ 引言/ 随着/ 人们/ 对/ 软件/ 功能/ 的/ 需求/ 越来越/ 高/ ,/ 软件结构/ 也/ 日益/ 复杂/ ,/ 函数/ 与/ 函数/ 、/ 模块/ 与/ 模块/ 、/ 系统/ 与/ 系统/ 等/ 实体/ 之间/ 的/ 互联互通/ 与/ 相互作用/ 使/ 软件/ 整体/ 结构/ 表现/ 出/ 一些/ 全新/ 的/ 特性/ ,/ 研究/ 人员/ 陆续/ 发现/ 软件系统/ 的/ 拓扑/ 结构/ 可以/ 抽象/ 成/ 网络结构/ ,/ 并且/ 具有/ 小/ 世界/ 和/ 无/ 标度/ 等/ 复杂/ 网络/ 特性/ ./ 由于/ 动态性/ 和/ 开放性/ 的/ 增加/ ,/ 复杂/ 软件/ 时刻/ 受到/ 各种/ 故障/ 和/ 攻击/ 的/ 威胁/ ./ 例如/ ,/ 1996/ 年/ 6/ 月/ 4/ 日/ ,/ 阿丽亚娜/ 5/ 型/ 火箭/ 由于/ 整型/ 加速度/ 值/ 产生/ 溢出/ ,/ 造成/ 以/ 加速度/ 为/ 参数/ 的/ 速度/ 、/ 位置/ 等/ 变量/ 计算错误/ ,/ 程序/ 只得/ 进入/ 异常/ 处理/ 模块/ ,/ 引爆/ 自毁/ ;/ 2009/ 年/ 9/ 月/ 12/ 日/ ,/ MSN/ 美国/ 总部/ 服务器/ 瘫痪/ 超过/ 1/ 小时/ ,/ 导致/ 全球/ 900/ 万/ 用户/ 受到/ 影响/ ;/ 2010/ 年/ 1/ 月初/ ,/ 由于/ 一个/ 软件/ 兼容性/ 故障/ 导致/ 美国/ 约/ 有/ 8000/ 至/ 10000/ 台/ GPS/ 接收机/ 失效/ ./ 图/ 1/ 给出/ 了/ 故障/ 在/ SNLC/ ①/ (/ 作者/ 单位/ 用于/ 编译/ 原理/ 教学/ 的/ 一个/ 简单/ 但/ 功能/ 完整/ 的/ SNL/ 语言/ 编译器/ )/ 传播/ 的/ 情况/ ./ 对于/ 给定/ 的/ 输入/ 目标/ 文件/ ,/ 首先/ 记录/ 在/ 整个/ 执行/ 过程/ 中/ 每个/ 函数/ 在/ 每个/ 时刻/ 的/ 正确/ 输出/ 值/ ,/ 然后/ 在/ SNLC/ 源代码/ 中/ 随机/ 地/ 挑选/ 一定/ 数量/ 的/ 函数/ 注入/ 人为/ 错误/ ,/ 对比/ 正常/ 函数/ 在/ 后续/ 的/ 执行/ 过程/ 中/ 的/ 输出/ 值/ 与/ 之前/ 的/ 正确/ 输出/ 值/ ,/ 以此/ 观察/ 故障/ 的/ 传播/ 特性/ ./ 图/ 1/ 的/ 横坐标/ 为/ 以/ 函数/ 为/ 单位/ 的/ 执行/ 步骤/ ,/ 纵坐标/ 为/ 发生/ 故障/ 的/ 函数/ 数目/ ./ 从图/ 1/ 中/ 可以/ 看出/ ,/ 如果/ 一个/ 或者/ 少数几个/ 函数/ 发生/ 故障/ ,/ 该/ 故障/ 可能/ 会/ 随着/ 调用/ 和/ 依存关系/ 传播/ 至/ 其它/ 函数/ 而/ 引发/ 其它/ 函数/ 无法/ 正常/ 运行/ ,/ 最终/ 导致/ 部分/ 或者/ 整个/ 系统/ 的/ 崩溃/ ,/ 称之为/ “/ 级联/ 故障/ ”/ [/ 1/ ]/ ./ 复杂/ 软件/ 作为/ 典型/ 的/ 复杂/ 系统/ 可以/ 运用/ 复杂/ 网络理论/ 进行/ 建模/ 和/ 分析/ ,/ 但是/ ,/ 目前/ 却/ 很少/ 有人/ 直接/ 从/ 软件工程/ 的/ 角度/ 系统地/ 研究/ 复杂/ 软件/ 的/ 质量/ 特征/ ./ 因此/ ,/ 有/ 必要/ 从/ 复杂/ 网络/ 的/ 视角/ ,/ 结合/ 软件工程/ 实践/ ,/ 对/ 复杂/ 软件/ 的/ 级联/ 故障/ 特性/ 进行/ 深入研究/ ./ 在/ 软件工程/ 界/ ,/ 多种/ 软件/ 质量/ 度量/ 方法/ 已经/ 被/ 提出/ ,/ 但/ 大部分/ 是/ 建立/ 在/ 分析/ 源代码/ 的/ 基础/ 上/ ./ 2002/ 年/ ,/ Valverde/ 等/ 人/ [/ 2/ ]/ 首先/ 将/ 软件结构/ 抽象/ 为/ 网络拓扑/ ,/ 发现/ 软件/ 网络/ 具有/ “/ 小/ 世界/ ”/ 和/ “/ 无/ 标度/ ”/ 现象/ ,/ 符合/ 复杂/ 网络/ 的/ 特点/ ./ 此后/ 很多/ 研究/ 人员/ 使用/ 复杂/ 网络理论/ 建模/ 和/ 分析/ 软件/ 内部结构/ ,/ 借助/ 复杂/ 网络/ 的/ 数学/ 理论/ 和/ 方法/ 分析/ 软件/ 网络/ 的/ 各种/ 统计/ 特性/ ,/ 对/ 软件/ 进行/ 质量/ 度量/ 及/ 优化/ ./ 2004/ 年/ ,/ 美国/ 卡内基/ ·/ 梅隆/ 大学/ 软件工程/ 研究所/ 发布/ 了/ 复杂/ 巨/ 系统软件/ 专项/ 调研/ ,/ 试图/ 解决/ 复杂/ 巨/ 系统/ 的/ 软件工程/ 问题/ [/ 3/ ]/ ./ 2005/ 年/ ,/ 13/ 个/ 跨国/ IT/ 公司/ (/ 包括/ IBM/ 、/ HP/ 、/ Nokia/ 等/ )/ 宣布/ 合作/ 研制/ 网络化/ 软件/ ./ 2006/ 年/ ,/ 我国/ 学者/ 何克清/ 和/ 李德/ 毅/ 等/ 人/ 将/ 复杂/ 网络理论/ 和/ 方法/ 引入/ 到/ 软件工程/ 的/ 设计/ 之中/ [/ 4/ -/ 5/ ]/ ./ Cai/ 和/ Yin/ [/ 6/ ]/ 将/ 软件系统/ 的/ 执行/ 过程/ 视为/ 一个/ 演化/ 的/ 有/ 向/ 复杂/ 网络结构/ ,/ 引入/ 了/ 软件/ 镜像/ 图/ 概念/ ,/ 并/ 发现/ 虽然/ 在/ 拓扑/ 层面/ 上/ 软件/ 执行/ 过程/ 表现/ 出小/ 世界/ 现象/ ,/ 但/ 在/ 时间/ 角度/ 上/ 不再/ 体现/ 小/ 世界/ 特征/ ,/ 其度/ 分布/ 可以/ 表示/ 为/ 幂律/ 分布/ 也/ 可以/ 表示/ 为/ 指数函数/ ./ 目前/ ,/ 基于/ 复杂/ 网络理论/ 对/ 软件系统/ 的/ 研究/ 工作/ 大多/ 集中/ 在/ 从/ 不同/ 方面/ 和/ 粒度/ 对/ 各类/ 软件系统/ 的/ 复杂/ 特征/ 进行/ 分析/ ,/ 揭示/ 结构性/ 特性/ ,/ 缺少/ 从/ 复杂/ 网络/ 角度/ 研究/ 软件/ 质量/ 特征/ 的/ 工作/ ./ 另外/ ,/ 目前/ 常用/ 的/ 软件/ 网络/ 模型/ [/ 7/ ]/ 虽然/ 能够/ 表示/ 软件/ 函数/ 间/ 的/ 相互/ 调用/ 关系/ ,/ 但是/ 无法/ 表示/ 该/ 关系/ 的/ 紧密/ 程度/ ./ 事实上/ ,/ 各/ 函数/ 被/ 调用/ 次数/ 的/ 差异/ 从/ 复杂/ 网络/ 的/ 角度/ 可以/ 被/ 认作/ 是/ 节点/ 间/ 相互作用/ 的/ 差异/ ./ 为了/ 表示/ 这种/ 紧密/ 程度/ ,/ 本文/ 提出/ 了/ 一种/ 具有/ 边权/ 的/ 软件/ 网络/ 模型/ ,/ 用以/ 表征/ 函数调用/ 关系/ 和/ 紧密/ 程度/ ;/ 并/ 在/ 此基础/ 上/ 引入/ 了/ 软件/ 故障/ 强度/ 和/ 函数/ 容错/ 能力/ ,/ 设计/ 了/ 一种/ 级联/ 故障/ 模型/ ;/ 同时/ ,/ 对/ 实际/ 软件/ 网络/ 、/ 随机/ 网络/ 和/ 无/ 标度/ 网络/ 的/ 大量/ 实验/ 揭示/ 了/ 故障/ 触发/ 方式/ 、/ 故障/ 强度/ 、/ 初始/ 故障/ 数量/ 、/ 容错/ 能力/ 等/ 对/ 级联/ 故障/ 的/ 影响/ ,/ 并/ 分析/ 了/ 其中/ 的/ 原因/ ,/ 讨论/ 了/ 部分/ 软件/ 网络/ 节点/ 最终/ 未/ 被/ 感染/ 的/ 原因/ ./ 本文/ 第/ 2/ 节/ 介绍/ 软件/ 复杂性/ 和/ 容错性/ 的/ 相关/ 工作/ ;/ 第/ 3/ 节/ 详细/ 地/ 给出/ 软件/ 网络/ 模型/ 和/ 级联/ 故障/ 模型/ ;/ 第/ 4/ 节/ 通过/ 大量/ 实验/ 对比/ 分析/ 级联/ 故障/ 在/ 实际/ 软件/ 网络/ 中/ 的/ 传播/ 情况/ 以及/ 各/ 模型/ 参数/ 对/ 级联/ 故障/ 的/ 影响/ ,/ 并/ 给出/ 部分/ 软件/ 网络/ 节点/ 最终/ 未/ 被/ 感染/ 的/ 原因/ ;/ 最后/ 总结/ 全文/ ./ ①/ SNLC/ ./ http/ :/ // // www/ ./ hackchina/ ./ com/ // en/ // cont/ // 136801/ ,/ Page32/ 相关/ 工作/ 2.1/ 软件/ 复杂性/ 在/ 软件工程/ 领域/ ,/ 已有/ 多种/ 方式/ 对/ 软件/ 复杂性/ 进行/ 度量/ ./ 代码/ 行/ 数/ 度量/ 法以/ 程序/ 的/ 总/ 代码/ 行/ 数/ 作为/ 程序/ 复杂性/ 的/ 度量/ 值/ ,/ 但/ 比较/ 粗糙/ ,/ 实际/ 中/ 也/ 很少/ 应用/ ./ McCabe/ 度量/ 法/ [/ 8/ ]/ 以图/ 论为/ 工具/ ,/ 先画/ 出/ 程序/ 图/ ,/ 然后/ 用该/ 图/ 的/ 环路/ 数/ 作为/ 程序/ 复杂性/ 的/ 度量/ ,/ 但/ 其实质/ 上/ 是/ 对/ 程序控制/ 流/ 复杂性/ 的/ 度量/ ,/ 并/ 不/ 考虑/ 数据流/ ,/ 因而/ 其/ 科学性/ 和/ 严密性/ 有/ 一定/ 的/ 局限/ ./ Halstead/ 度量/ 法/ [/ 9/ ]/ 通过/ 计算/ 程序/ 中/ 的/ 运算符/ 和/ 操作数/ 的/ 数量/ 对/ 程序/ 的/ 复杂性/ 加以/ 度量/ ,/ 但/ 只/ 考虑/ 了/ 程序/ 的/ 数据流/ 而/ 没有/ 考虑/ 控制流/ ,/ 因而/ 也/ 不能/ 从根本上/ 反映/ 程序/ 的/ 复杂性/ ./ 复杂/ 网络/ 的/ 出现/ ,/ 为/ 描述/ 软件系统/ 的/ 复杂性/ 提供/ 了/ 一个/ 新/ 的/ 途径/ ./ 复杂/ 软件系统/ 的/ 拓扑/ 结构/ 可以/ 从/ 服务/ 、/ 构件/ 、/ 模块/ 、/ 包/ 、/ 接口/ 、/ 类/ 、/ 函数/ 等/ 不同/ 粒度/ 进行/ 网络拓扑/ 建模/ ,/ 将/ 上述/ 元素/ 视为/ 组成/ 网络结构/ 的/ 节点/ ,/ 这些/ 元素/ 之间/ 的/ 作用/ 关系/ 如/ 调用/ 关系/ 、/ 继承/ 关系/ 、/ 聚合/ 关系/ 、/ 包含/ 关系/ 、/ 协作关系/ 等/ 视为/ 边/ ./ 目前/ ,/ 相关/ 研究/ 人员/ 主要/ 是/ 通过/ 复杂/ 网络/ 的/ 理论/ 和/ 方法/ 对/ 软件系统/ 进行/ 研究/ ,/ 研究/ 对象/ 主要/ 是/ 开源/ 软件/ ,/ 采用/ 逆向/ 工程/ 等/ 方法/ ,/ 从/ 开源/ 软件/ 源代码/ 中/ 抽取/ 出/ 软件/ 类图/ ,/ 再/ 建立/ 软件/ 网络/ 模型/ 进行/ 分析/ ,/ 进而/ 发现/ 各种/ 统计/ 特性/ ,/ 并/ 针对/ 研究/ 现象/ 得出/ 一些/ 客观规律/ ./ Valverde/ 等/ 人/ [/ 2/ ]/ 使用/ 复杂/ 网络/ 方法/ 描述/ 软件/ 拓扑/ 结构/ ,/ 将/ 面向对象/ 软件/ 的/ 类图/ 作为/ 研究/ 对象/ ,/ 提取/ 类/ 之间/ 的/ 继承/ 和/ 关联/ 关系/ 作为/ 边/ ,/ 构造/ 了/ 软件结构/ 的/ 复杂/ 网络拓扑/ 图/ ./ Alessandro/ 等/ 人/ [/ 10/ ]/ 提出/ 了/ 一种/ 分析/ C语言/ 源程序/ 的/ 方法/ ,/ 并/ 分析/ 了/ Linuxker/ -/ nel/ 等/ 开源/ 软件/ ,/ 忽略/ 来自/ 外部/ 的/ 库/ 文件/ ./ 此后/ ,/ 国内外/ 学者/ 对/ 大量/ 的/ 开源/ 软件/ 进行/ 了/ 分析/ ,/ 进一步/ 验证/ 了/ 软件结构/ 的/ 复杂/ 网络/ 现象/ [/ 11/ -/ 13/ ]/ ./ 随着/ 研究/ 的/ 深入/ ,/ 研究/ 人员/ 认为/ 无向/ 图/ 不能/ 确切/ 表示/ 诸如/ 类/ 的/ 继承/ 、/ 调用/ 等/ 关系/ ,/ 转而/ 使用/ 有向图/ 进行/ 建模/ [/ 14/ -/ 16/ ]/ ./ 本文/ 提出/ 一种/ 使用/ 加权/ 有向图/ 建模/ 软件结构/ 的/ 方法/ ,/ 能够/ 更加/ 准确/ 地/ 描述/ 软件/ 内部/ 实体/ 之间/ 的/ 依赖/ 关系/ ./ 2.2/ 软件/ 容错性/ 软件/ 的/ 容错性/ 是/ 指/ 故障/ 出现/ 后/ ,/ 软件系统/ 通过/ 自身/ 调节/ 不致/ 崩溃/ 且/ 仍/ 能/ 正常/ 工作/ 的/ 能力/ ./ 对/ 软件/ 漏洞/ 进行/ 分类/ 是/ 实现/ 软件/ 容错性/ 的/ 前提/ ,/ 它/ 决定/ 软件/ 容错/ 的/ 方式/ ./ 软件/ 漏洞/ 是/ 在/ 硬件/ 、/ 软件/ 、/ 协议/ 的/ 具体/ 实现/ 或/ 系统/ 安全策略/ 上/ (/ 主要/ 是/ 人为/ )/ 存在/ 的/ 缺陷/ ,/ 从而/ 可以/ 使/ 攻击者/ 能够/ 在/ 未/ 授权/ 的/ 情况/ 下/ 访问/ 或/ 破坏/ 系统/ ./ 目前/ ,/ 很多/ 大型/ 安全/ 机构/ 分别/ 对/ 软件/ 漏洞/ 进行/ 分类/ ,/ 有/ Microsoft/ 公司/ ①/ 、/ CVE/ 安全/ 组织/ ②/ 和/ FortifySoftware/ 公司/ [/ 17/ ]/ 等/ ,/ 本文/ 采用/ FortifySoft/ -/ ware/ 的/ 分类/ 策略/ ,/ 对/ 软件/ 漏洞/ 的/ 分类/ 以/ 代码/ 缺陷/ 为/ 基础/ ,/ 通过/ 对/ 代码/ 缺陷/ 的/ 分类/ ,/ 间接/ 地/ 实现/ 了/ 对/ 软件/ 漏洞/ 的/ 分类/ ./ 同类/ 代码/ 缺陷/ 引起/ 的/ 软件/ 漏洞/ 为/ 一类/ ,/ 并/ 在/ 两个/ 层次/ 上/ 进行/ 归纳/ :/ (/ 1/ )/ 在/ 程序/ 编码/ 层次/ 上/ 归纳/ 出/ 软件/ 的/ 实现/ 过程/ 中/ 的/ 各种/ 代码/ 缺陷/ ;/ (/ 2/ )/ 根据/ 漏洞/ 攻击/ 特征/ ,/ 把/ 具有/ 相同/ 特征/ 的/ 代码/ 缺陷/ 归为/ 一类/ ./ 由此/ ,/ 把/ 代码/ 缺陷/ 分为/ 8/ 类/ ,/ 根据/ 重要性/ 高低/ 依次/ 排序/ 为/ :/ (/ 1/ )/ 输入/ 有效性/ 和/ 表示/ ;/ (/ 2/ )/ API/ 滥用/ ;/ (/ 3/ )/ 安全/ 功能/ ;/ (/ 4/ )/ 时间/ 和/ 状态/ ;/ (/ 5/ )/ 错误/ ;/ (/ 6/ )/ 代码/ 质量/ ;/ (/ 7/ )/ 封装/ ;/ (/ 8/ )/ 环境/ ./ 如果/ 对/ 一个/ 软件/ 漏洞/ 发起/ 攻击/ 或/ 该/ 漏洞/ 在/ 特定/ 运行/ 环境/ 下/ 出现异常/ ,/ 将/ 可能/ 会/ 引起/ 软件/ 网络/ 的/ 大规模/ 级联/ 效应/ ./ 复杂/ 网络/ 的/ 级联/ 动力学/ 研究/ 表明/ [/ 18/ ]/ ,/ 故障/ 传播/ 特性/ 、/ 系统/ 抗毁/ 性/ 与/ 网络拓扑/ 结构/ 密切相关/ ,/ 即/ :/ 无/ 标度/ 网络/ 对/ 随机/ 故障/ 具有/ 很/ 好/ 的/ 鲁棒性/ ,/ 但/ 在/ 基于/ 度/ 的/ 蓄意/ 攻击/ 下/ 存在/ 脆弱性/ ./ 但是/ ,/ 目前/ 从/ 复杂/ 网络/ 角度/ 评估/ 软件/ 容错性/ 的/ 研究/ 还/ 很少/ ,/ 因此/ 有/ 必要/ 揭示/ 复杂/ 软件/ 网络/ 的/ 级联/ 故障/ 传播/ 规律/ ,/ 有助于/ 软件/ 的/ 开发/ 和/ 部署/ ,/ 运行/ 过程/ 中/ 因势利导/ ,/ 使/ 漏洞/ 得到/ 有效/ 控制/ 和/ 防护/ ./ 3/ 系统/ 模型/ 大量/ 研究/ 人员/ 集中/ 在/ 探讨/ 软件系统/ 的/ 结构/ 特性/ [/ 7/ ,/ 10/ -/ 11/ ,/ 19/ ]/ 、/ 形成/ 机理/ [/ 2/ ,/ 20/ ]/ 、/ 演化/ 模型/ [/ 4/ ,/ 21/ ]/ 和/ 软件/ 复杂性/ 度量/ [/ 10/ ,/ 22/ -/ 24/ ]/ ,/ 本文/ 在/ 对/ 软件/ 进行/ 网络拓扑/ 建模/ 的/ 基础/ 上/ ,/ 进一步/ 构建/ 级联/ 故障/ 模型/ ,/ 探讨/ 故障/ 在/ 软件/ 网络/ 中/ 的/ 传播/ 情况/ ./ 3.1/ 网络拓扑/ 模型/ 将/ 软件/ 网络/ 表示/ 为/ 具有/ n/ 个/ 节点/ ,/ e/ 条边/ 的/ 加权/ 有向图/ G/ ,/ 记为/ G/ =/ (/ V/ ,/ E/ )/ ,/ 其中/ V/ 是/ 节点/ 集合/ ,/ V/ 中/ 的/ 每个/ 元素/ vi/ 代表/ 软件/ 源代码/ 中/ 的/ 一个/ 函数/ ,/ E/ 是/ 边/ 集合/ ,/ E/ 中/ 的/ 每个/ 元素/ 〈/ vi/ ,/ vj/ 〉/ 是/ 一个/ 有序/ 对/ ,/ 当且/ 仅/ 当/ vi/ 调用/ vj/ 时/ ,/ 〈/ vi/ ,/ vj/ 〉/ ∈/ E/ ,/ 即/ vi/ →/ vj/ ./ 在/ 现有/ 的/ 大多数/ 基于/ 函数/ 实体/ 的/ 软件/ 网络/ 模型/ 中/ ,/ 节点/ 间/ 只有/ “/ 相连/ ”/ 和/ “/ 不/ 相连/ ”/ 两种/ 连接/ 方式/ 对应/ 着/ 函数/ 间/ 的/ “/ 调用/ ”/ 和/ “/ 不/ 调用/ ”/ 两种/ 关系/ ,/ 但/ 这/ 并/ ①/ ②/ inCVE/ ./ http/ :/ // // www/ ./ cve/ ./ mitre/ ./ org/ // docs/ // vuln/ -/ trends/ // index/ ./ html/ ./ May/ ,/ 2007Page4/ 不能/ 准确/ 地/ 反映/ 软件/ 函数/ 间/ 的/ 调用/ 关系/ ,/ 实际上/ 不同/ 函数/ 间连接/ 的/ 紧密/ 程度/ 也/ 是/ 不同/ 的/ ./ 因此/ ,/ 为/ 每条/ 有/ 向/ 边/ 设置/ 一个/ 权重/ wij/ ,/ 用以/ 表征/ 函数/ 间/ 的/ 调用/ 频度/ ,/ wij/ ∈/ [/ 1/ ,/ )/ ./ 同时/ ,/ 定义/ 一个/ n/ ×/ n/ 的/ 邻接矩阵/ [/ aij/ ]/ ,/ 如果/ 在/ 源代码/ 中/ ,/ 函数/ vi/ 调用函数/ vj/ 共/ wij/ 次则/ aij/ =/ wij/ ,/ 否则/ aij/ =/ 0/ ./ 节点/ 集合/ V/ 不/ 包括/ 库函数/ ./ 3.2/ 级联/ 故障/ 模型/ 漏洞/ 被/ 触发/ 后/ 称之为/ 故障/ ,/ 故障/ 发生/ 时/ 对/ 软件系统/ 正常/ 运行/ 的/ 影响/ 程度/ 称之为/ 故障/ 强度/ ,/ 实验/ 中/ 采用/ FortifySoftware/ 公司/ [/ 17/ ]/ 对/ 代码/ 漏洞/ 的/ 分类/ 方式/ 定义/ 故障/ 强度/ ,/ 记/ 为/ λ/ ,/ λ/ ∈/ [/ 1/ ,/ 8/ ]/ ,/ 等级/ 越高/ ,/ 意味着/ 故障/ 影响/ 到/ 其它/ 函数/ 的/ 可能性/ 越大/ ./ 软件/ 网络/ 中/ 每个/ 节点/ (/ 函数/ )/ 对/ 故障/ 的/ 处理/ 能力/ 称为/ 节点/ 容错/ 能力/ ,/ 记/ 为/ ρ/ ./ 实际/ 测试/ 过程/ 中/ 采用/ 的/ 函数/ 质量/ 评估/ 方法/ 应/ 与/ 漏洞/ 分类/ 方法/ 相一致/ ,/ 因此/ 参考/ 故障/ 强度/ ,/ 容错/ 能力/ 也/ 被/ 划分/ 为/ 8/ 个/ 等级/ ,/ 即/ ρ/ ∈/ [/ 1/ ,/ 8/ ]/ ,/ 等级/ 越高/ 表示/ 节点/ 容错/ 能力/ 越强/ ,/ 越/ 不易/ 被/ 软件/ 故障/ 所/ 影响/ ./ 本文/ 设定/ 两种/ 容错/ 能力/ 分配/ 方式/ :/ 随机/ 分配/ ,/ 各/ 函数/ 的/ 容错/ 能力/ 符合/ 均值/ 为/ ρ/ 的/ 泊松/ 分布/ ;/ 优先/ 分配/ ,/ 各/ 函数/ 的/ 容错/ 能力/ 与/ 它/ 拥有/ 的/ 调用/ 关系/ 数目/ (/ 度/ )/ 和/ 调用/ 关系/ 紧密/ 程度/ 之/ 和/ (/ 强度/ )/ 成/ 正比例/ 关系/ ,/ 即/ 其中/ ,/ ki/ 和/ si/ 分别/ 表示/ 节点/ i/ 的/ 度/ 和/ 强度/ (/ 权重/ 和/ )/ ,/ kmax/ 和/ smax/ 分别/ 表示/ 网络/ 中/ 最大/ 度/ 和/ 最大/ 强度/ ./ 触发/ 漏洞/ 有/ 两种/ 方式/ :/ 随机/ 触发/ ,/ 在/ 图/ G/ 中/ 随机/ 地/ 选取/ q/ 个/ 节点/ 作为/ 初始/ 故障/ 节点/ ,/ 例如/ ,/ 由于/ 运行/ 环境/ 的/ 偶然/ 变化/ 导致/ 函数/ 功能/ 异常/ ;/ 恶意/ 触发/ ,/ 从图/ G/ 中/ 选择/ 入度/ 最大/ 的/ 前/ q/ 个/ 节点/ 作为/ 初始/ 故障/ 节点/ ,/ 例如/ ,/ 黑客/ 发起/ 的/ 攻击/ ./ 在/ 软件系统/ 运行/ 的/ 过程/ 中/ ,/ 如果/ 函数/ i/ 出现/ 故障/ ,/ 例如/ 内存/ 溢出/ ,/ 那么/ 该/ 故障/ 可能/ 通过/ 函数/ 间/ 的/ 调用/ 或/ 依赖/ 关系/ 以/ 某/ 一/ 概率/ 传播/ 至/ 函数/ j/ ,/ 而/ 后者/ 容错/ 能力/ 的/ 强弱/ 决定/ 着/ 该/ 故障/ 能否/ 导致/ 函数/ j/ 失效/ ,/ 继而/ 影响/ 着/ 调用/ 和/ 依赖/ 函数/ j/ 的/ 其它/ 函数/ ./ 不失/ 一般性/ ,/ 假定/ 软件/ 运行/ 时/ 一个/ 或/ 多个/ 函数/ 会/ 同时/ 发生/ 强度/ 相同/ 的/ 初始/ 故障/ ,/ 当/ 容错/ 能力/ 为/ ρ/ i/ 的/ 函数/ i/ 调用/ 已/ 发生/ 强度/ 为/ λ/ j/ 的/ 故障/ 的/ 函数/ j/ 时/ ,/ 本文/ 规定/ 当/ λ/ j/ / ρ/ i/ 时/ ,/ 函数/ i/ 是否/ 会/ 受到/ 该/ 故障/ 的/ 影响/ 仅/ 依赖于/ 函数/ i/ 和/ 函数/ j/ 之间/ 调用/ 关系/ 的/ 紧密/ 程度/ ;/ 当/ λ/ j/ </ ρ/ i/ 时/ ,/ 故障/ 能否/ 感染/ 函数/ i/ 则/ 依赖于/ 两个/ 函数/ 的/ 紧密/ 程度/ 和/ 故障/ 强度/ 与/ 容错/ 能力/ 之/ 比/ 的/ 共同/ 作用/ ./ 因此/ ,/ 节点/ i/ 的/ 故障/ 感染/ 概率/ Pi/ 表示/ 为/ 其中/ ,/ wmax/ 为/ 图/ G/ 的/ 最大/ 权重/ ,/ 即/ 最大/ 的/ 调用/ 次数/ ,/ Wij/ 表示/ 函数/ i/ 与/ 函数/ j/ 的/ 调用/ 关系/ 在/ 软件/ 网络/ 中/ 发生/ 的/ 概率/ ,/ 即/ 调用/ 关系/ 的/ 紧密/ 程度/ ,/ 这样/ 设计/ 的/ 原因/ 是因为/ 函数/ 被/ 调用/ 的/ 次数/ 越/ 多/ 意味着/ 它/ 具有/ 的/ 漏洞/ 越易/ 被/ 触发/ ,/ Wij/ ∈/ (/ 0/ ,/ 1/ ]/ ./ 发生/ 故障/ 的/ 函数/ 只有/ 当/ 被/ 其它/ 函数调用/ 时才/ 有/ 可能/ 将/ 故障/ 传播/ 出去/ ,/ 因此/ ,/ 故障/ 的/ 一次/ 传播/ 规则/ 定义/ 如下/ :/ 遍历/ 所有/ 已/ 发生/ 故障/ 的/ 节点/ ,/ 如果/ 指向/ 故障/ 节点/ 有/ 向/ 边/ 的/ 起始/ 节点/ 是非/ 故障/ 节点/ ,/ 则/ 根据/ 式/ (/ 3/ )/ 计算/ 感染/ 概率/ ,/ 并/ 以此/ 概率/ 感染/ 该/ 节点/ ,/ 直至/ 所有/ 非/ 故障/ 邻居/ 节点/ 计算/ 完毕/ ./ 4/ 实验/ 分析/ 本文/ 实验/ 选取/ 了/ 3/ 款/ 大小/ 和/ 用途/ 各异/ 的/ 开源/ 软件/ SNLC/ [/ 1/ ]/ 、/ Sockets/ ①/ 和/ NotePad/ ++/ ②/ ./ Sockets/ 是/ Berkeley/ 大学/ 提供/ 的/ 一个/ 套接/ 字库/ ,/ NotePad/ ++/ 是/ 一款/ 出色/ 的/ 代码/ 编辑器/ ./ 表/ 1/ 列出/ 了/ SNLC/ 、/ Sock/ -/ ets/ 和/ NotePad/ ++/ 的/ 函数/ 网络拓扑/ 统计/ 信息/ ./ 从表/ 1/ 中/ 可以/ 看出/ ,/ SNLC/ 中/ 各/ 节点/ 之间/ 的/ 联系/ (/ 2.28/ )/ 较/ Sockets/ (/ 1.68/ )/ 和/ NotePad/ ++/ (/ 1.97/ )/ 更为/ 紧密/ ./ 为/ 便于/ 理解/ ,/ 附录/ A/ 、/ B/ 和/ C/ 中/ 分别/ 给出/ 了/ 规模/ 最小/ 的/ SNLC/ 的/ 原始/ 函数调用/ 关系/ 网络/ 、/ 处理/ 后/ 的/ 拓扑/ 网络/ 和/ 节点/ 编号/ 与/ 函数/ 名称/ 的/ 对应/ 关系/ ./ 从/ 附录/ B/ 所示/ 的/ 拓扑图/ 中/ 可以/ 发现/ ,/ 整个/ 软件/ 网络/ 被/ 88/ 号/ 函数/ 分割/ 为/ 两个/ 大/ 的/ 社团/ ,/ 而/ 88/ 号/ 函数/ 正好/ 是/ main/ 函数/ ./ 表/ 1SNLC/ 、/ Sockets/ 、/ NotePad/ ++/ 节点/ 和/ 边/ 的/ 统计/ 信息/ 软件名称/ 节点/ (/ 函数/ )/ 数边/ (/ 调用/ 关系/ )/ 数/ 平均/ 出/ (/ 入/ )/ 度/ SNLC297Sockets710NotePad/ ++/ 3117/ 表/ 2/ 给出/ 了/ 3/ 个/ 软件/ 网络/ 弱/ 连通/ 图内/ 的/ 节点/ 数/ 和/ 占/ 总/ 节点/ 数/ 的/ 比例/ ./ 从表中/ 可以/ 看出/ ,/ Sockets/ 网络/ 属于/ 弱/ 连通/ 图/ 的/ 节点/ 比例/ 为/ 69/ %/ ,/ 这是/ Sockets/ 软件/ 性质/ 决定/ 的/ ./ Sockets/ 是/ 一个/ 套接/ 字库/ ,/ 多数/ 函数/ 实现/ 独立/ 功能/ ,/ 不/ 需要/ 依赖于/ 其它/ 函数/ ,/ 同时/ ,/ Sockets/ 提供/ 了/ 很多/ 测试函数/ ,/ 也/ 是/ “/ 独立/ ”/ 于/ 其它/ 函/ ①/ ②/ Page5/ 数/ 的/ ,/ 因此/ 不/ 属于/ 弱/ 连通/ 图/ ./ NotePad/ ++/ 实际/ 网络/ 属于/ 弱/ 连通/ 图/ 的/ 节点/ 比例/ 为/ 73/ %/ ,/ 分析/ 其/ 源代码/ 发现/ ,/ NotePad/ ++/ 借助/ 了/ 一个/ 插件/ scintilla/ ,/ 它/ 提供/ 的/ 函数/ 仅/ 有/ 一部分/ 被/ NotePad/ ++/ 使用/ ,/ 但是/ 网络/ 建模/ 时/ 包括/ 了/ scintilla/ 的/ 所有/ 函数/ ,/ 因此/ 弱/ 连通/ 图/ 节点/ 比例/ 为/ 73/ %/ ./ 初始/ 故障/ 节点/ 从弱/ 连通/ 图中/ 选取/ ,/ 每次/ 实验/ 的/ 循环/ 次数/ 为/ 500/ ,/ 每次/ 模拟/ 的/ 最终/ 结果/ 对应/ 着/ 50/ 次/ 实验/ 的/ 平均值/ ./ 软件名称/ 弱/ 连通/ 图/ 节点/ 数所/ 占/ 比例/ // %/ SNLCSocketsNotePad/ ++/ 4.1/ 故障/ 触发/ 方式/ 与/ 容错/ 能力/ 分配/ 方式/ 图/ 2/ 给出/ 了/ 故障/ 触发/ 方式/ 和/ 容错/ 能力/ 分配/ 方式/ 对/ 级联/ 故障/ 在/ 3/ 种/ 软件/ 中/ 传播/ 的/ 影响/ ./ 使用/ I/ (/ t/ )/ 表示/ t/ 时刻/ 发生/ 故障/ 的/ 节点/ 比例/ ./ 可以/ 看出/ ,/ 恶意/ 触发/ 的/ 故障/ 传播速度/ 略大于/ 随机/ 触发/ 的/ 故障/ 传播速度/ ./ 这/ 是因为/ 恶意/ 触发/ 选择/ 的/ 初始/ 故障/ 节点/ 是/ 入度/ 大/ 的/ 节点/ ,/ 这些/ 节点/ 与/ 更/ 多/ 的/ 节点/ 相连/ ,/ 故障/ 更/ 易/ 快速/ 传播/ ;/ 而/ 在/ 随机/ 触发/ 下/ 的/ 初始/ 故障/ 节点/ 是/ 随机/ 选择/ 的/ ,/ 这些/ 节点/ 的/ 入度/ 平均/ 分布/ ,/ 因此/ 在/ “/ 一跳/ ”/ 内/ ,/ 故障/ 传播/ 的/ 范围/ 小于/ 恶意/ 触发/ ,/ 导致/ 传播速度/ 没有/ 恶意/ 触发/ 快/ ./ 同时/ 可以/ 发现/ ,/ 容错/ 能力/ 优先/ 分配/ 的/ 软件/ 网络/ 比/ 随机/ 分配/ 的/ 软件/ 网络/ 具有/ 更强/ 的/ 容错性/ ,/ 这/ 表明/ 图/ 2/ 故障/ 触发/ 方式/ 和/ 容错/ 能力/ 分配/ 方式/ 对/ 级联/ 那些/ 具有/ 高/ 节点/ 度/ (/ 调用/ 关系/ )/ 和/ 高强度/ (/ 紧密/ 程度/ )/ 的/ 函数/ 对/ 整个/ 系统/ 稳定性/ 贡献/ 更大/ ./ 这里/ 说明/ 一点/ ,/ 恶意/ 攻击/ 选择/ 的/ 初始/ 目标/ 仅/ 是/ 入度/ 大/ 的/ ,/ 而/ 优先/ 分配/ 法则/ 同时/ 考虑/ 节点/ 度/ 和/ 强度/ ,/ 因此/ ,/ 恶意/ 攻击/ 选择/ 的/ 节点/ 不/ 一定/ 是/ 容错/ 能力/ 强/ 的/ 节点/ ./ 软件系统/ 在/ 故障/ 被/ 恶意/ 触发/ 、/ 容错/ 能力/ 被/ 随机/ 分配/ 的/ 情况/ 下/ ,/ 表现/ 出/ 最差/ 的/ 稳定性/ ./ 因此/ 接下来/ 考察/ 在/ 该/ 情况/ 下/ 各/ 模型/ 参数/ 对系统/ 稳定性/ 的/ 影响/ ./ 4.2/ 故障/ 强度/ 图/ 3/ 给出/ 了/ 故障/ 强度/ 对/ 级联/ 故障/ 在/ SNLC/ 、/ Sock/ -/ ets/ 和/ NotePad/ ++/ 3/ 种/ 网络结构/ 中/ 传播/ 的/ 影响/ ./ 3/ 种/ 软件/ 对/ 故障/ 强度/ 表现/ 出/ 一致/ 的/ 反应/ ,/ 即/ 故障/ 强度/ 的/ 增加/ 会/ 促使/ 级联/ 故障/ 传播速度/ 加快/ ,/ 对于/ 规模/ 大/ 的/ 软件/ 而言/ (/ 例如/ :/ NotePad/ ++/ )/ ,/ 也/ 会/ 导致/ 最终/ 发生/ 故障/ 的/ 节点/ 数目/ 也/ 相应/ 地/ 增加/ ./ 但/ 在/ 各种/ 故障/ 强度/ 下/ ,/ 即便/ 是/ 最高/ 的/ 8/ 级/ ,/ 最终/ 的/ 感染/ 规模/ 也/ 不/ 超过/ 20/ %/ ./ 图/ 3/ 故障/ 强度/ 对/ 级联/ 故障/ 的/ 影响/ (/ q/ =/ 32/ ,/ ρ/ =/ 4/ )/ 4.3/ 初始/ 故障/ 数目/ 图/ 4/ 给出/ 了/ 初始/ 故障/ 数目/ 对/ 级联/ 故障/ 在/ SNLC/ 、/ Sockets/ 和/ NotePad/ ++/ 的/ 3/ 种/ 网络结构/ 中/ 传播/ 的/ 影响/ ./ 少数/ 的/ 初始/ 故障/ 节点/ 并/ 不会/ 诱发/ 级联/ 故障/ 的/ 大规模/ 爆发/ ,/ 这/ 也/ 说明/ 软件/ 内部/ 是/ 允许/ 存在/ 少量/ 错误/ 的/ ,/ 他们/ 的/ 触发/ 并/ 不会/ 对/ 软件/ 的/ 正常/ 工作/ 带来/ 巨大/ 的/ 影响/ ,/ 但/ 当/ 初始/ 故障/ 节点/ 数目/ 增加/ 时/ ,/ 级联/ 故障/ 会/ 逐步/ 蔓延/ 开来/ ,/ 但/ 最终/ 被/ 感染/ 的/ 节点/ 比例/ 依然/ 不会/ 超过/ 20/ %/ ./ Page6/ 图/ 4/ 初始/ 故障/ 数目/ 对/ 级联/ 故障/ 的/ 影响/ (/ λ/ =/ 8/ ,/ ρ/ =/ 4/ )/ 4.4/ 容错/ 能力/ 图/ 5/ 展示/ 了/ 容错/ 能力/ 对/ 级联/ 故障/ 在/ SNLC/ 、/ Sockets/ 和/ NotePad/ ++/ 的/ 3/ 种/ 网络结构/ 中/ 传播/ 的/ 影响/ ./ 级联/ 故障/ 在/ 3/ 种/ 软件/ 网络/ 中/ 对于/ 提升/ 的/ 容错/ 能力/ 均/ 表现/ 出/ 了/ 相似/ 的/ 规律/ ,/ 即/ 节点/ 平均/ 容错/ 能力/ 越大/ ,/ 故障/ 传播速度/ 越慢/ ,/ 稳态/ 时/ 感染/ 节点/ 的/ 个数/ 越少/ ./ 这/ 也/ 说明/ 加强/ 函数/ 异常/ 处理/ 功能/ 将/ 提升/ 软件/ 整体/ 质量/ 和/ 容错性/ ,/ 即便/ 发生/ 异常情况/ 时/ ,/ 也/ 不会/ 影响/ 大多数/ 其它/ 函数/ 或/ 模块/ 的/ 正常/ 运行/ ./ 图/ 6SNLC/ 不同/ 时刻/ 的/ 级联/ 故障/ 传播/ 快照/ (/ q/ =/ 32/ ,/ λ/ =/ 8/ ,/ ρ/ =/ 4/ ./ 从/ 左/ 至/ 右/ 依次/ 为/ t/ =/ 0/ ,/ 50/ ,/ 100/ 和/ 200/ )/ 图/ 7Sockets/ 不同/ 时刻/ 的/ 级联/ 故障/ 传播/ 快照/ (/ q/ =/ 32/ ,/ λ/ =/ 8/ ,/ ρ/ =/ 4/ ./ 从/ 左/ 至/ 右/ 依次/ 为/ t/ =/ 0/ ,/ 50/ ,/ 100/ 和/ 200/ )/ ./ 图/ 5/ 容错/ 能力/ 对/ 级联/ 故障/ 的/ 影响/ (/ q/ =/ 16/ ,/ λ/ =/ 5/ )/ 4.5/ 故障/ 传播/ 快照/ 图/ 6/ ~/ 8/ 分别/ 给出/ 各/ 软件/ 网络/ 在/ 故障/ 被/ 恶意/ 触发/ 、/ 容错/ 能力/ 被/ 随机/ 分配情况/ 下/ ,/ 当/ t/ =/ 0/ ,/ 50/ ,/ 100/ 和/ 200/ 时/ 的/ 级联/ 故障/ 快照/ ,/ 便于/ 更加/ 直观/ 地/ 观察/ 级联/ 故障/ 的/ 传播/ 过程/ ,/ 隐藏/ 了/ 节点/ 间/ 的/ 连接/ 关系/ ./ 从中/ 可以/ 看出/ ,/ 一旦/ 漏洞/ 被/ 触发/ ,/ 发生/ 软件/ 故障/ 后/ ,/ 该/ 故障/ 会/ 随着/ 函数/ 间/ 的/ 调用/ 关系/ 逐渐/ 扩散/ ,/ 最终/ 演变/ 为/ 级联/ 故障/ ./ 对比/ 各/ 软件/ 图中/ 故障/ 节点/ (/ 浅色/ )/ 增加/ 的/ 比例/ 可/ 发现/ ,/ 级联/ 故障/ 在/ 3/ 种/ 软件/ 网络/ 中/ 的/ 前/ 50/ 次/ 迭代/ 传播/ 最为/ 迅速/ ./ Page7/ 图/ 8NotePad/ ++/ 不同/ 时刻/ 的/ 级联/ 故障/ 传播/ 快照/ (/ q/ =/ 32/ ,/ λ/ =/ 8/ ,/ ρ/ =/ 4/ ./ 从/ 左/ 至/ 右/ 依次/ 为/ t/ =/ 0/ ,/ 50/ ,/ 100/ 和/ 200/ )/ 4.6/ 节点/ 最终/ 未/ 被/ 感染/ 的/ 原因/ 分析/ 实验/ 过程/ 中/ 发现/ ,/ 有/ 一些/ 节点/ 虽/ 属于/ 连通/ 图/ ,/ 但/ 直到/ 级联/ 故障/ 传播/ 稳定/ 后/ ,/ 依然/ 没有/ 被/ 感染/ ./ 本文/ 通过/ 对/ 规模/ 最小/ 的/ SNLC/ 在/ q/ =/ 16/ ,/ λ/ =/ 5/ ,/ ρ/ =/ 4/ 随机/ 触发/ 下/ 的/ 故障/ 传播/ 数据/ 进行/ 跟踪/ 分析/ 后/ ,/ 发现/ 了/ 如图/ 9/ 所示/ 的/ 4/ 种/ 具有/ 代表性/ 的/ 宏观/ 原因/ ./ 更/ 细致/ 的/ 微观/ 原因/ 可以/ 试图/ 从/ 这/ 4/ 种/ 宏观/ 原因/ 入手/ 分析/ ,/ 将/ 在/ 后续/ 研究/ 工作/ 中/ 给出/ 结果/ ./ (/ 1/ )/ 节点/ 自身/ 容错/ 能力/ 强/ ,/ 如图/ 9/ (/ a/ )/ 所示/ ./ 例如/ ,/ 编号/ 为/ 38/ 的/ 节点/ ,/ 容错/ 能力/ 为/ 7/ ,/ 具有/ 较强/ 的/ 容错/ 能力/ ,/ 而/ 故障/ 强度/ 为/ 5/ ,/ 所以/ 不易/ 受/ 故障/ 传播/ 的/ 影响/ ;/ (/ 2/ )/ 周围/ 节点/ 的/ 容错/ 能力/ 强/ ,/ 如图/ 9/ (/ b/ )/ 所示/ ./ 节点/ 65/ 的/ 容错/ 能力/ 为/ 4/ ,/ 它/ 的/ 两个/ 邻居/ 节点/ 79/ 和/ 100/ 的/ 容错/ 能力/ 分别/ 为/ 6/ 和/ 5/ ,/ 具有/ 较强/ 的/ 容错/ 能力/ ,/ 所以/ 故障/ 传播/ 到/ 节点/ 65/ 处/ 为止/ ,/ 使/ 调用/ 79/ 和/ 100/ 节点/ 的/ 其它/ 容错/ 能力/ 弱/ 的/ 节点/ 也/ 不会/ 被/ 感染/ ;/ (/ 3/ )/ 没有/ 入度/ 的/ 节点/ ,/ 如图/ 9/ (/ c/ )/ 所示/ ./ 节点/ 176/ 将/ 故障/ 传播/ 给/ 节点/ 216/ ,/ 节点/ 216/ 的/ 容错/ 能力/ 为/ 2/ ,/ 图/ 9/ 节点/ 未/ 被/ 感染/ 的/ 原因/ 示例/ (/ 圆圈/ 代表/ 节点/ ,/ 里边/ 的/ 数字/ 为/ “/ 节点/ 号/ :/ 容错/ 能力/ ”/ ,/ 对比/ 附录/ A/ 、/ B/ 和/ C/ 可以/ 找到/ 各/ 节点/ 的/ 编号/ 、/ 函数/ 名/ 和/ 连接/ 关系/ )/ 本/ 应该/ 继续/ 传播/ 故障/ ,/ 但/ 该/ 节点/ 没有/ 入度/ ,/ 即/ 没有/ 其它/ 函数调用/ 216/ 号/ 函数/ ,/ 所以/ 级联/ 故障/ 传播/ 到/ 216/ 号/ 处/ 为止/ ;/ (/ 4/ )/ 有限/ 的/ 迭代/ 次数/ ,/ 这种/ 情况/ 在/ NotePad/ ++/ 这种/ 规模/ 较大/ 的/ 软件/ 中/ 更为/ 明显/ ./ 观察/ 图/ 9/ (/ d/ )/ ,/ 当/ 故障/ 传播/ 到/ 节点/ 5/ 后/ ,/ 它/ 的/ 容错/ 能力/ 为/ 3/ ,/ 但/ 模拟/ 时间/ 已到/ ,/ 故障/ 不再/ 继续/ 传播/ ./ 图/ 9/ 节点/ 未/ 被/ 感染/ 的/ 原因/ 示例/ ./ 圆圈/ 代表/ 节点/ ,/ 里边/ 的/ 数字/ 为/ “/ 节点/ 号/ :/ 容错/ 能力/ ”/ ,/ 对比/ 附录/ A/ 、/ B/ 和/ C/ 可以/ 找到/ 各/ 节点/ 的/ 编号/ 、/ 函数/ 名/ 和/ 连接/ 关系/ ./ 5/ 结束语/ 本文/ 基于/ 软件/ 函数/ 间/ 的/ 调用/ 关系/ ,/ 引入/ 故障/ 强度/ 和/ 容错/ 能力/ 对/ 复杂/ 软件/ 的/ 级联/ 故障/ 进行/ 建模/ ,/ 模拟/ 软件/ 运行/ 时/ 的/ 故障/ 传播/ 行为/ ./ 通过/ 对/ 3/ 个/ 实际/ 软件/ 网络/ 的/ 大量/ 模拟实验/ ,/ 揭示/ 了/ 触发/ 方式/ 、/ 容错/ 能力/ 分配/ 方式/ 、/ 故障/ 强度/ 、/ 初始/ 故障/ 数目/ 和/ 容错/ 能力/ 大小/ 等/ 因素/ 对/ 级联/ 故障/ 传播/ 的/ 影响/ ,/ 并/ 分析/ 了/ 造成/ 这些/ 影响/ 的/ 原因/ ,/ 也/ 探讨/ 了/ 节点/ 未/ 被/ 最终/ 感染/ 的/ 可能/ 原因/ ./ 模拟/ 结果/ 揭示/ 出/ 级联/ 故障/ 的/ 传播速度/ 和/ 范围/ 同/ 故障/ 强度/ 、/ 初始/ 故障/ 数目/ 、/ 容错/ 能力/ 密切相关/ ,/ 即/ :/ 弱/ 的/ 故障/ 强度/ 、/ 少/ 的/ 初始/ 故障/ 数目/ 和/ 高/ 的/ 容错/ 能力/ 均会/ 减缓/ 级联/ 故障/ 的/ 传播速度/ ,/ 缩小/ 波及/ 范围/ ,/ 提高/ 软件/ 质量/ ./ 对/ 复杂/ 软件/ 的/ 级联/ 故障/ 进行/ 建模/ 有助于/ 增进/ 对/ 软件/ 复杂性/ 和/ 容错性/ 的/ 认识/ ,/ 为/ 提高/ 软件/ 质量/ 提供/ 帮助/ ./ 在/ 本文/ 的/ 级联/ 故障/ 模型/ 中/ ,/ 故障/ 强度/ 在/ 整个/ 传播/ 过程/ 中/ 始终保持/ 不变/ ,/ 但/ 由于/ 各/ 函数/ 容错/ 能力/ 的/ 作用/ 和/ 差异/ ,/ 该/ 故障/ 的/ 强度/ 应/ 随着/ 函数/ 的/ 调用/ 而/ 产生/ 变化/ ,/ 例如/ ,/ 如果/ 某/ 函数/ 没有/ 异常/ 处理/ 环节/ ,/ 那么/ 该/ 故障/ 传播/ 至/ 此后/ 强度/ 应该/ 被/ 增加/ ,/ 反之/ 则/ 减弱/ ./ 下/ 一步/ 工作/ 将/ 设计/ 故障/ 强度/ 的/ 更新/ 规则/ ,/ 基于/ 本文/ 的/ 研究/ 结果/ ,/ 并/ 结合/ 具体/ 的/ 软件工程/ 开发/ 与/ 测试/ 技术/ ,/ 开发/ 复杂/ 软件/ 容错性/ 的/ 检测工具/ ./ Page8/ 

