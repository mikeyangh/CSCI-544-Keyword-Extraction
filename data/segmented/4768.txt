Page1/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 王桂玲/ 1/ )/ 韩燕波/ 1/ )/ 张仲妹/ 1/ )/ ,/ 2/ )/ 朱/ 美玲/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 北方工业大学/ 云/ 计算/ 研究/ 中心/ 大规模/ 流/ 数据/ 集成/ 与/ 分析/ 技术/ 北京市/ 重点/ 实验室/ 北京/ 100144/ )/ 2/ )/ (/ 天津大学/ 计算机科学/ 与/ 技术/ 学院/ 天津/ 300072/ )/ 摘要/ 当前/ ,/ 大/ 数据/ 的/ 管理/ 和/ 处理/ 是/ 云/ 基础设施/ 的/ 重点/ 用武之地/ ,/ 而/ 服务/ 是/ 落实/ 云/ 计算环境/ 中/ 各类/ 资源/ 及/ 能力/ 交付/ 和/ 使用/ 模式/ 的/ 主要/ 方式/ ./ 随着/ 感知/ 设备/ 的/ 普及/ ,/ 系统/ 规模/ 急剧/ 扩张/ ,/ 数据/ 多元/ 异构/ 复杂性/ 提升/ ,/ 流/ 数据/ 并发/ 数量/ 及/ 速度/ 剧增/ ,/ 传统/ 的/ 流/ 数据系统/ 在/ 处理/ 能力/ 、/ 可扩展性/ 、/ 容错性/ 等/ 方面/ 面临/ 瓶颈/ 问题/ ,/ 而云/ 计算技术/ 依靠/ 其/ 良好/ 的/ 可伸缩性/ 、/ 数据/ 的/ 并行/ 化/ 处理/ 能力/ 、/ 对/ 服务/ 使用/ 模式/ 的/ 支持/ 、/ 容错性/ 等/ 特点/ ,/ 可/ 作为/ 流/ 数据管理/ 与/ 处理/ 的/ 基础/ ./ 基于/ 云/ 计算/ 对/ 来自/ 不同/ 类型/ 设备/ 的/ 大规模/ 流/ 数据/ 进行/ 集成/ 、/ 处理/ 及/ 服务化/ 正是/ 文中/ 关注/ 的/ 焦点/ 所在/ ./ 从/ 应用/ 需求/ 出发/ ,/ 该文/ 对/ 大规模/ 流/ 数据/ 集成/ 和/ 实时处理/ 及/ 服务/ 的/ 概念/ 框架/ 、/ 集成/ 方法/ 、/ 流/ 数据/ 查询处理/ 、/ 定制/ 化/ 服务/ 、/ 可伸缩性/ 保障/ 和/ 可靠性/ 保障/ 以及/ 相关/ 评测/ 基准/ 等/ 要点/ 进行/ 了/ 剖析/ ,/ 归纳/ 了/ 大规模/ 流/ 数据/ 的/ 集成/ 与/ 服务/ 研究/ 面临/ 的/ 挑战/ ,/ 探讨/ 了/ 云/ 计算环境/ 下/ 求解/ 相关/ 问题/ 的/ 思路/ ./ 关键词/ 流/ 数据/ ;/ 云/ 服务/ ;/ 数据服务/ ;/ 云/ 数据/ 集成/ 1/ 引言/ 网络化/ 进程/ 、/ 规模/ 效应/ 和/ 学科/ 交融/ 推动/ 了/ 云/ 计算/ 、/ 大/ 数据/ 、/ 物/ 联网/ 、/ 社会/ 计算/ 等/ 新/ 发展/ ,/ 催生/ 了/ 计算机科学/ 与/ 技术/ 一次/ 又/ 一次/ 的/ 变革/ 和/ 进步/ ./ 近年来/ ,/ 随着/ IPv6/ 、/ 传感/ 和/ 移动/ 设备/ 、/ 物/ 联网/ 、/ 泛/ 在/ 计算/ 等/ 的/ 不断/ 发展/ ,/ 来自/ 不同/ 行业/ 领域/ 、/ 体现/ 物理/ 世界/ 、/ 人类/ 社会/ 生产/ 生活/ 等/ 实际/ 状态/ 的/ 感知/ 类/ 数据/ 日益增长/ ./ 据/ Gartner/ 预测/ ,/ 未来/ 3/ 年/ ,/ 传感/ 和/ 移动/ 设备/ 将/ 更/ 深入/ 延伸/ 至/ 我们/ 的/ 日常生活/ ,/ 导致/ 数据/ 爆发/ ①/ ./ 而/ 如何/ 充分利用/ 这些/ 数据/ 为/ 人类/ 提供/ 更/ 智能/ 、/ 贴切/ 的/ 服务/ 是/ 当前/ 研究/ 面临/ 的/ 重要/ 挑战/ ./ 相对/ 于/ 以/ 人为/ 中心/ 生成/ 的/ 传统/ 互联网/ 数据/ ,/ 这/ 类/ 数据/ 面向/ 物理/ 世界/ ,/ 来自/ 不同/ 类型/ 的/ 设备/ ,/ 涉及/ 物理/ 世界/ 和/ 人类/ 社会/ 生产/ 生活/ 的/ 方方面面/ ,/ 具有/ 实时/ 到达/ 、/ 持续/ 不间断/ 、/ 到达/ 速度/ 快/ 等/ 特征/ ,/ 常/ 被/ 归类/ 到/ “/ 流/ 数据/ (/ streamingdata/ )/ ”/ ./ 国外/ 咨询机构/ 对/ 企业/ 信息化/ 的/ 调查/ 也/ 显示/ ,/ 70/ %/ 的/ 企业/ 存在/ 流/ 数据/ 实时处理/ 的/ 需求/ [/ 1/ ]/ ./ 除/ 传统/ 互联网/ 领域/ 外/ ,/ 大规模/ 流/ 数据/ 集成/ 与/ 服务/ 还/ 广泛/ 出现/ 在/ 智能/ 交通/ 、/ 电信/ 、/ 物流/ 、/ 水利/ 、/ 工业/ 监控/ 等/ 各个/ 应用领域/ ./ 例如/ ,/ 实时/ 交通/ 监管/ 是/ 流/ 数据/ 集成/ 和/ 服务/ 的/ 一类/ 重要/ 应用领域/ ./ 传统/ 大多数/ 交通管理/ 系统/ 对于/ 交通/ 数据/ 是/ 基于/ 静态数据/ 进行/ 离线/ 计算/ 处理/ 的/ ,/ 即将/ 一定/ 时间段/ 内/ 采集/ 到/ 的/ 数据/ 集中/ 存储/ 和/ 查询处理/ ./ 这种/ 处理/ 方式/ 无法/ 满足/ 交通/ 数据/ 实时/ 查询/ 和/ 计算/ 的/ 处理/ 需求/ ./ 采用/ 流/ 数据处理/ 技术/ 是/ 解决/ 这一/ 问题/ 的/ 新途径/ ./ 我国/ 大部分/ 城市/ 均/ 在/ 主要/ 道路/ 上/ 部署/ 车辆/ 识别/ 传感器/ ,/ 以/ 一个/ 大型/ 城市/ 的/ 车辆/ 识别/ 交通/ 数据/ 为例/ ,/ 车牌/ 识别/ 传感器/ 为/ 成千上万/ 个点/ ,/ 每个/ 点/ 的/ 高峰/ 采样/ 频率/ 为/ 1/ 条/ 记录/ // 秒/ ,/ 则/ 每秒/ 将/ 产生/ 成千上万/ 条/ 车辆/ 识别/ 数据/ ,/ 一年/ 车辆/ 识别/ 数据/ 记录/ 数/ 超过/ 百亿/ 条/ (/ 来自/ 我们/ 曾/ 实施/ 的/ 实际/ 项目/ )/ ./ 基于/ 对/ 车牌/ 识别/ 流/ 数据/ 及/ 历史数据/ 的/ 集成/ 处理/ 和/ 分析/ ,/ 可以/ 为/ 交通管理/ 部门/ 提供/ 各类/ 实时/ 交通管理/ 服务/ ,/ 例如/ 道路/ 流量/ 计算/ 、/ 伴随/ 车辆/ 发现/ 、/ 套牌车/ 检测/ 、/ 黑名单/ 白名单/ 实时/ 匹配/ 、/ 旅行/ 时间/ 计算/ 等/ ./ 国外/ 例如/ 爱尔兰/ 首都/ 都柏林/ 市政/ 采用/ 流/ 数据处理系统/ IBMSystemS/ [/ 2/ ]/ 监控/ 全市/ 上/ 千个/ 公交车/ 的/ 全球定位系统/ (/ GlobalPositioningSystem/ ,/ GPS/ )/ 信号/ ,/ 为/ 120/ 万/ 市民/ 提供/ 服务/ ,/ 包括/ 呈现/ 实时/ 交通/ 信息/ (/ 例如/ 车流量/ 、/ 路段/ 拥堵/ 情况/ 、/ 最快/ 旅行/ 时间/ 等/ )/ 、/ 在/ 拥堵/ 时为/ 市民/ 实时/ 推荐/ 最佳/ 路线/ 等/ ./ 在/ 学术界/ ,/ 流/ 数据/ 的/ 理论/ 与/ 技术/ 研究/ 也/ 已经/ 有/ 十几年/ 的/ 历史/ ./ 早期/ 对流/ 数据处理/ 的/ 研究/ 主要/ 包括/ 流/ 数据/ 管理系统/ 、/ 实时/ 数据库/ 以及/ 复杂/ 事件处理/ 系统/ 中/ 对/ 事件/ 流/ 处理/ 的/ 研究/ 等/ ./ 近年来/ ,/ 随着/ 感知/ 类/ 数据/ 的/ 爆发/ 及/ 新/ 技术/ 的/ 发展/ ,/ 各类/ 应用领域/ 对流/ 数据/ 集成/ 与/ 服务/ 提出/ 了/ 更/ 高/ 的/ 要求/ ,/ 包括/ 高/ 吞吐/ 低/ 延迟/ 的/ 处理/ 能力/ 、/ 能够/ 动态/ 适应/ 流/ 数据/ 规模/ 和/ 速度/ 、/ 良好/ 的/ 容错性/ 、/ 支持/ 服务/ 使用/ 模式/ 等/ ,/ 为流/ 数据/ 研究/ 提出/ 了/ 新/ 的/ 挑战/ ,/ 大规模/ 流/ 数据处理/ 的/ 研究/ 成为/ 学术界/ 近年来/ 重点/ 探索/ 的/ 领域/ 之一/ [/ 3/ -/ 6/ ]/ ./ 云/ 基础设施/ 是/ 进行/ 大/ 数据处理/ 的/ 主要/ 基础/ 之一/ ,/ 而/ 服务/ 则/ 是/ 落实/ 云/ 计算环境/ 中/ 各类/ 资源/ 及/ 能力/ 交付/ 和/ 使用/ 模式/ 的/ 主要/ 方式/ ./ 本文/ 从云/ 计算/ 和/ 服务/ 的/ 视角/ ,/ 对/ 现有/ 基于/ 云/ 计算/ 的/ 大规模/ 流/ 数据/ 集成/ 和/ 服务/ 研究/ 资料/ 进行/ 归纳/ 和/ 总结/ ./ 第/ 2/ 节/ 给出/ 基本概念/ 定义/ 以及/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 和/ 服务/ 的/ 概念/ 框架/ ;/ 在/ 此基础/ 上/ ,/ 第/ 3/ 节对云/ 计算环境/ 下/ 的/ 大规模/ 流/ 数据/ 集成/ 与/ 服务/ 的/ 相关/ 问题/ 进行/ 分析/ ,/ 包括/ 流/ 数据/ 集成/ 、/ 流/ 数据/ 查询/ 操作/ 的/ 实现/ 及/ 优化/ 、/ 流/ 数据/ 定制/ 化/ 服务/ 、/ 可伸缩性/ 保障/ 技术/ 、/ 可靠性/ 保障/ 技术/ 以及/ 相关/ 评价/ 指标/ 和/ 测试/ 基准/ 等/ ;/ 最后/ ,/ 第/ 4/ 节/ 简要/ 阐述/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 面临/ 的/ 新/ 挑战/ ./ 2/ 概念/ 框架/ 2.1/ 流/ 数据/ 相关/ 的/ 基本概念/ 流/ 数据/ 的/ 概念/ 来源于/ 数据库/ 领域/ ,/ 一般/ 将流/ 数据/ 看作/ 无/ 边界/ 的/ 、/ 瞬时/ 的/ 数据项/ 序列/ ,/ 同/ 源流/ 数据/ 中/ 的/ 数据项/ 都/ 具有/ 相同/ 的/ 模式/ ./ 具体/ 的/ ,/ 流/ 数据/ 指/ 带有/ ①/ GartnerSaysby2017/ ,/ MobileUsersWillProvidePersonalizedPage3/ 时间/ 戳/ 、/ 按照/ 到达/ 时间/ 的/ 序列/ 表示/ 的/ 数据/ ./ 流/ 数据/ 一般/ 用/ 时间/ 序列/ (/ timeseries/ )/ 模型/ 来/ 表示/ ,/ 例如/ ,/ 令/ t/ 表示/ 任/ 一时间/ 戳/ ,/ at/ 表示/ 在/ 该/ 时间/ 戳/ 到达/ 的/ 数据/ ,/ 流/ 数据/ 可以/ 表示/ 成/ {/ …/ ,/ at/ -/ 1/ ,/ at/ ,/ at/ +/ 1/ ,/ …/ }/ [/ 7/ ]/ ./ 针对/ 不同/ 的/ 流/ 数据/ 计算/ 需求/ ,/ 常用/ 的/ 还有/ 收银机/ (/ cashregister/ )/ 模型/ 和/ 十字/ 转门/ (/ turnstile/ )/ 模型/ 等/ [/ 8/ ]/ ./ 流/ 数据/ 常/ 采用/ 元组/ 、/ 键值/ 对/ (/ key/ -/ value/ )/ 记录/ 等/ 几种/ 不同/ 的/ 数据格式/ ./ 一个/ 流/ 数据/ 集成/ 与/ 处理/ 作业/ 可以/ 看作/ 是/ 由/ 执行数/ 图/ 1/ 流/ 数据/ 集成/ 与/ 处理/ 的/ 抽象/ 模型/ 根据/ 算子/ 是否/ 需要/ 在/ 多个/ 触发/ 执行/ 过程/ 对/ 状态/ 进行/ 维护/ ,/ 可/ 将/ 其/ 分为/ “/ 无/ 状态/ (/ stateless/ )/ ”/ 算子/ 及/ “/ 有/ 状态/ (/ stateful/ )/ ”/ 算子/ 两类/ ;/ 根据/ 算子/ 在/ 产生/ 执行/ 结果/ 时/ 是否/ 需要/ 预先/ 读取/ 整个/ 流/ 数据/ ,/ 可/ 将/ 其/ 分为/ 阻塞/ 式/ 算子/ 及/ 非/ 阻塞/ 式/ 算子/ 两类/ [/ 9/ ]/ ./ 在/ 每/ 一个/ 数据处理/ 算子/ 中/ 执行/ 一些/ 数据/ 操作/ ,/ 包括/ 数据/ 转换/ 、/ 处理/ 及/ 产生/ 输出/ 数据/ 等/ ,/ 可用/ 流/ 数据处理/ 规则/ 表达/ ./ 流/ 数据处理/ 的/ 规则/ 有/ 两类/ ,/ 一类/ 是/ 转换规则/ (/ transformationrules/ )/ ,/ 一类/ 是/ 检测/ 规则/ (/ detectionrules/ )/ [/ 9/ ]/ ./ 转换规则/ 实质/ 上/ 定义/ 了/ 一个/ 由/ 基本/ 的/ 算子/ 运算符/ 构成/ 的/ 执行/ 计划/ ./ 这些/ 运算符/ 描述/ 了/ 算子/ 所/ 执行/ 的/ 包括/ 过滤/ 、/ 连接/ 、/ 聚集/ 等/ 在内/ 的/ 数据/ 操作/ ./ 执行/ 计划/ 可/ 由/ 用户/ 自定义/ 或/ 由/ 系统/ 预定/ 义/ ./ 系统/ 预定/ 义/ 转换规则/ 可用/ 声明/ 式/ 语言/ 和/ 命令式/ 语言/ 来/ 表达/ ./ 检测/ 规则/ 由/ 条件/ 和/ 活动/ 两/ 部分/ 构成/ ,/ 在/ 事件/ 流/ 处理/ 系统/ 中/ 尤为/ 常见/ ./ 由于/ 流/ 数据/ 是/ 无/ 边界/ 的/ 连续/ 数据项/ ,/ “/ 窗口/ (/ window/ )/ ”/ 被/ 用来/ 对流/ 数据/ 算子/ 执行/ 时/ 考虑/ 的/ 流/ 数据/ 进行/ 限制/ ./ 流/ 数据/ 的/ 窗口/ 定义/ 了/ 算子/ 执行/ 过程/ 中/ 需要/ 考虑/ 哪/ 一部分/ 输入/ 流/ 数据/ ./ 现有/ 系统/ 定义/ 的/ 窗口/ 可以/ 分为/ 时间/ 窗口/ 和/ 计数/ 窗口/ 两类/ ./ 时间/ 窗口/ 的/ 边界/ 定义/ 为/ 一个/ 时间/ 函数/ ,/ 计数/ 窗口/ 边界/ 使用/ 窗口/ 中/ 包括/ 的/ 数据项/ 数目/ 进行/ 定义/ ./ 根据/ 窗口/ 边界/ 移动/ 方式/ 的/ 不同/ ,/ 常见/ 的/ 窗口/ 有/ 滑动/ 窗口/ 和/ 翻滚/ 式/ 窗口/ (/ tumbling/ -/ window/ )/ 等/ [/ 10/ -/ 11/ ]/ ./ 据/ 操作/ 的/ “/ 算子/ (/ operator/ )/ ”/ 或/ “/ 处理单元/ (/ processingelement/ )/ ”/ 集合/ 互相/ 之间/ 通过/ 数据/ “/ 流/ (/ stream/ )/ ”/ 连接/ 而成/ 的/ 有/ 向/ 无/ 环图/ (/ DirectedAcyclicGraph/ ,/ DAG/ )/ 形成/ ./ 如图/ 1/ 所示/ ,/ 算子/ 在/ 获取/ 输入/ 数据流/ 后/ 触发/ 相关/ 操作/ ,/ 算子/ 的/ 操作/ 包括/ 数据/ 转换/ 、/ 处理/ 及/ 产生/ 输出/ 数据/ ./ 数据源/ 接收/ 算子/ 负责/ 接收/ 来自/ 多个/ 数据源/ 的/ 数据/ ,/ 并/ 将/ 它们/ 发送给/ 下/ 一个/ 数据处理/ 算子/ ./ 目的/ 接收/ 算子/ 负责/ 将流/ 数据处理/ 的/ 结果/ 递送/ 到/ 外部/ 的/ 应用/ 或/ 服务/ ./ 2.2/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 和/ 服务/ 的/ 框架/ 近年来/ 随着/ 各/ 应用领域/ 感知/ 类/ 数据/ 的/ 爆发/ 、/ 系统/ 规模/ 上升/ 、/ 数据/ 的/ 多元/ 异构/ 复杂性/ 的/ 提升/ 、/ 流/ 数据/ 并发/ 数量/ 及/ 速度/ 的/ 剧增/ ,/ 从/ 处理/ 能力/ 、/ 可伸缩性/ 、/ 容错性/ 、/ 使用/ 模式/ 等/ 各个方面/ 对/ 传统/ 流/ 数据处理/ 提出/ 了/ 新/ 的/ 挑战/ ./ 为了/ 应对/ 这些/ 挑战/ ,/ 出现/ 了/ 新/ 的/ 流/ 数据处理/ 技术/ 框架/ 及/ 系统/ ./ 本文/ 所/ 讨论/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 从/ 多个/ 不同/ 的/ 数据/ 来源/ 接收/ 流/ 数据/ ,/ 基于/ 云/ 计算/ 基础设施/ 进行/ 并行处理/ ,/ 并/ 对/ 它们/ 进行/ 过滤/ 、/ 关联/ 以及/ 聚合/ 等/ 处理/ ./ 在/ 此基础/ 上/ ,/ 将流/ 数据/ 操作/ 以/ Web/ 应用程序/ 编程/ 接口/ (/ ApplicationProgrammingInterface/ ,/ API/ )/ 方式/ 提供/ 给/ 开发者/ 进行/ 定制/ 化/ 开发/ ,/ 降低/ 开发成本/ ./ 图/ 2/ 展示/ 了/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 的/ 一般性/ 框架/ ./ 该/ 框架/ 主要/ 分为/ 云/ 基础设施/ 层/ 、/ 云/ 数据/ 管理层/ 、/ 云/ 服务/ 层/ 以及/ 性质/ 保障/ 等/ 四个/ 核心/ 组成部分/ ./ 其中/ ,/ 云/ 基础设施/ 层/ 提供/ 对/ CPU/ 、/ 网络/ 和/ 存储/ 等/ 云/ 基础设施/ 资源/ 的/ 虚拟化/ 抽象/ 、/ 资源/ 监控/ 、/ 负载/ 管理/ 、/ 资源/ 部署/ 、/ 存储管理/ 和/ 安全/ 等/ 功能/ ./ 云/ 数据/ 管理层/ 通过/ 缓冲区/ 接收/ 来自/ 不同/ 消息/ 系统/ 、/ 数据源/ 的/ 流/ 数据/ ,/ 进入/ 流/ 数据处理/ 引擎/ 进行/ 实时处理/ ./ 云/ 计算环境/ 下/ 的/ 流/ 数据处理/ 引擎/ 采用/ 分布式/ 的/ 部署/ 架构/ 及/ 并行处理/ 模式/ ./ 基于/ 流/ 数据处理/ 引擎/ ,/ 云/ 数据/ 管理层/ 提供/ 特定/ 的/ 流/ 数据/ 查询/ 操作/ 接口/ ,/ 例如/ 基本/ 查询/ 操作/ 、/ 聚集/ 查询/ 操作/ 、/ 连接/ 查询/ 操作/ 以及/ 高级/ 查询/ 操作/ 等/ ./ 云/ 服务/ 层/ 基于/ 云/ 数据/ 管理层/ 提供/ 的/ 流数/ Page4/ 据/ 操作/ 接口/ ,/ 提供/ 流/ 数据服务/ 的/ 建模/ 、/ 发现/ 、/ 编程/ 、/ 提供/ 及/ 托管/ 功能/ ,/ 可/ 面向/ 不同/ 类型/ 的/ 应用/ 提供/ 定制/ 化/ 的/ 服务/ ./ 例如/ ,/ 支持/ 统计/ 监控/ 视图/ 的/ 连续/ 更新/ 、/ 支持/ 事件/ 通知/ 应用/ 以及/ 实时/ 的/ 数据分析/ 应用/ ./ 为了/ 更好/ 图/ 2/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 框架/ 此外/ ,/ 在/ 大规模/ 的/ 云/ 计算环境/ 中/ ,/ 机器/ 故障/ 时有发生/ ,/ 系统/ 访问量/ 巨大/ 且/ 是/ 动态变化/ 的/ ,/ 因而/ 流/ 数据服务/ 的/ 可靠性/ 保障/ 、/ 可伸缩性/ 保障/ 等/ 能力/ 的/ 重要性/ 非常/ 突出/ ./ 云/ 计算环境/ 已经/ 成为/ 数据/ 存储/ 、/ 管理/ 和/ 计算/ 广泛/ 使用/ 的/ 平台/ ,/ 虽然/ 研究者/ 对/ 传统/ 流/ 数据处理系统/ 的/ 特点/ 已有/ 不同/ 程度/ 的/ 归纳/ [/ 12/ -/ 13/ ]/ ,/ 但/ 对/ 基于/ 云/ 计算/ 的/ 大规模/ 流/ 数据/ 集成/ 和/ 服务/ 的/ 研究/ 才/ 刚刚开始/ ./ 文献/ [/ 13/ ]/ 将流/ 数据处理系统/ 的/ 发展/ 划分/ 为/ 三代/ ./ 第一代/ 流/ 数据处理系统/ 通常/ 为/ 单机版/ 并且/ 功能/ 有限/ ;/ 第二代/ 流/ 数据处理系统/ 为/ 分布式/ 体系结构/ ,/ 开始/ 具备/ 良好/ 的/ 容错性/ 、/ 支持/ 适应性/ 的/ 查询/ 等/ 特征/ ;/ 第三代/ 流/ 数据处理系统/ 是/ 由/ 云/ 计算技术/ 促成/ 的/ ,/ 其/ 典型/ 特征/ 是/ 高/ 可伸缩性/ 及/ 容错/ 能力/ ./ 本文/ 总结/ 归纳/ 云/ 计算环境/ 下/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 有/ 以下/ 几个/ 特点/ :/ (/ 1/ )/ 支持/ 服务/ 交付/ 和/ 使用/ 模式/ ,/ 支持/ 多/ 租户/ 共地/ 支持/ 应用/ 和/ 服务/ 的/ 并发/ 请求/ 、/ 保障/ 服务/ 的/ 质量/ ,/ 流/ 数据/ 查询处理/ 操作/ 的/ 结果/ 可/ 通过/ 消息/ 队列/ 将/ 处理结果/ 分发/ 到/ 应用/ 和/ 服务/ 中/ ,/ 也/ 往往/ 分发/ 到/ 数据库/ 中/ 进行/ 持久/ 化/ ,/ 再/ 以/ 服务/ 的/ 方式/ 对外/ 提供数据/ 访问/ 接口/ ./ 享/ ,/ 支持/ “/ 即取/ 即/ 用/ ”/ (/ pay/ -/ as/ -/ you/ -/ go/ )/ 的/ 服务/ 使用/ 模式/ ./ 以/ 服务/ 的/ 模式/ 提供/ 各类/ 资源/ 及/ 能力/ ,/ 是/ 云/ 计算/ 的/ 显著特点/ 之一/ ./ 在/ 云/ 计算环境/ 下/ ,/ 流/ 数据/ 的/ 各类/ 操作/ 可以/ 以/ 服务/ 的/ 方式/ 交付使用/ ./ 同时/ ,/ 支持/ 服务/ 交付/ 模式/ 还/ 意味着/ 支持/ 多个/ 租户/ 共享/ 流/ 数据处理/ 的/ 设施/ ,/ 并/ 按照/ “/ 即取/ 即/ 用/ ”/ 的/ 模式/ 使用/ ./ (/ 2/ )/ 实时性/ ,/ 高/ 吞吐/ 低/ 延迟/ 数据/ 的/ 处理/ 能力/ ./ 因为/ 每秒/ 有/ 大量/ (/ 一般/ 至少/ 1/ 万条/ 记录/ 以上/ )/ 需要/ 处理/ 的/ 数据/ ,/ 所以/ 响应/ 时间延迟/ 需在/ 秒/ 甚至/ 毫秒/ 以内/ ./ (/ 3/ )/ 动态/ 可伸缩性/ ,/ 能够/ 适应/ 负载/ 变化/ ./ 动态/ 可/ 伸缩/ 是/ 云/ 计算/ 的/ 显著特点/ 之一/ ./ 在/ 云/ 计算环境/ 中/ ,/ 应用/ 和/ 服务/ 在/ 理论/ 上/ 可以/ 做到/ 随意/ 伸缩/ ,/ 即/ 应用/ 和/ 服务/ 所/ 占用/ 的/ 资源/ 可以/ 在/ 负载/ 均衡/ 的/ 前提/ 下/ ,/ 随着/ 负载/ 的/ 上升/ 或/ 降低/ 而/ 增加/ 或/ 减少/ ,/ 从而/ 保证/ 在/ 不同/ 的/ 负载/ 下/ 仍/ 能/ 获得/ 一致/ 的/ 性能/ ./ (/ 4/ )/ 容错性/ ,/ 能够/ 处理/ 有/ 缺陷/ 的/ 数据/ ,/ 在/ 出现/ 故/ Page5/ 障时/ 仍/ 能够/ 保持/ 正常/ 运行/ ,/ 并且/ 保障/ 容错/ 的/ 开销/ 较/ 小/ ./ 流/ 数据源/ 时有/ 延迟/ 、/ 丢失/ 和/ 无序/ 的/ 情况/ 发生/ ,/ 此外/ ,/ 云/ 计算环境/ 基于/ 大规模/ 中低端/ 服务器/ 组建/ ,/ 机器/ 的/ 故障/ 在/ 云/ 计算环境/ 中/ 几乎/ 是/ 必然/ 事件/ 或/ “/ 常态/ ”/ ,/ 而/ 非/ 简单/ 的/ “/ 异常/ ”/ ./ 因此/ ,/ 可靠性/ 保障/ 是/ 流/ 数据服务/ 的/ 一项/ 基本/ 要求/ ./ 可以/ 从/ 不同/ 角度/ 分析/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 与/ 传统/ 流/ 数据处理/ 的/ 区别/ ./ 从/ 体系结构/ 角度/ 来说/ ,/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 的/ 基础设施/ 层/ 的/ 软硬件/ 资源/ (/ 或/ 虚拟化/ 软硬件/ 资源/ )/ 以/ 分布式/ 共享/ 的/ 形式/ 存在/ ./ 为/ 应/ 对流/ 数据/ 规模/ 和/ 速率/ 的/ 变化/ ,/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 应/ 具有/ 动态/ 伸缩/ 和/ 负载/ 均衡/ 的/ 能力/ ./ 从/ 数据处理/ 模式/ 的/ 角度/ 来说/ ,/ 为/ 支持/ 高/ 吞吐/ 流/ 数据/ 的/ 集成/ 与/ 处理/ ,/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 应/ 支持/ 数据/ 在/ 多个/ 节点/ 上/ 的/ 并行/ 化/ 处理/ ./ 此外/ ,/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 支持/ 服务/ 交付/ 和/ 使用/ 模式/ ,/ 对流/ 数据处理/ 延迟/ 及/ 吞吐量/ 的/ 要求/ 较/ 高/ ./ 在/ 容错性/ 方面/ ,/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 将/ 机器/ 故障/ 看作/ “/ 常态/ ”/ 进行/ 处理/ ,/ 能够/ 有/ 效应/ 对/ ./ 表/ 1/ 对/ 二者/ 进行/ 了/ 对比/ ./ 值得/ 指出/ 的/ 是/ ,/ 虽然/ 分布式计算/ 环境/ 流/ 数据处理系统/ 的/ 一些/ 技术/ 也/ 可以/ 在/ 云/ 计算环境/ 中/ 适用/ ,/ 但/ 本文/ 仅/ 着重/ 介绍/ 与/ 分析/ 那些/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 区别/ 于/ 传统/ 流/ 数据处理/ 的/ 技术/ ./ 比较/ 项/ 基于/ 云/ 计算/ 的/ 体系结构/ 分布式/ ,/ 强调/ 系统/ 的/ 动/ 数据处理/ 模式/ 交付/ 与/ 使用/ 模式/ 实时性/ 及/ 吞吐量/ 高/ 吞吐/ 、/ 低/ 延迟/ 可伸缩性/ 随/ 负载/ 变化/ 动态/ 伸缩/ 可/ 扩展/ 能力/ 受/ 计算/ 和/ 内/ 容错性/ 能够/ 有/ 效应/ 对/ 机器/ 故障/ 将/ 机器/ 故障/ 作为/ 异常/ 进/ 3/ 相关/ 问题/ 分析/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 以云/ 计算/ 基础设施/ 为/ 基础/ ,/ 在/ 合适/ 的/ 流/ 数据处理/ 引擎/ 等/ 工具/ 的/ 辅助/ 下/ ,/ 对流/ 数据源/ 进行/ 汇聚/ 和/ 集成/ ,/ 利用/ 合适/ 的/ 流/ 数据/ 查询处理/ 技术/ ,/ 对/ 它们/ 进行/ 过滤/ 、/ 关联/ 以及/ 聚合/ 等/ 处理/ ,/ 并/ 对外/ 提供/ 一系列/ 流/ 数据/ 定制/ 化/ 服务/ ./ 在/ 此/ ,/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 涉及/ 到/ 多方面/ 的/ 问题/ ,/ 如/ 大规模/ 流/ 数据/ 集成/ 、/ 流/ 数据/ 查询/ 操作/ 、/ 服务/ 模型/ 、/ 可伸缩性/ 、/ 可靠性/ 等/ 非/ 功能属性/ 的/ 保障/ 技术/ 等/ 方面/ ,/ 本文/ 从/ 集成/ 与/ 服务/ 的/ 视角/ 将/ 其中/ 的/ 关键问题/ 进行/ 归纳/ 总结/ ./ 而/ 对于/ 从/ 数据管理/ 与/ 分析/ 、/ 安全/ 可信/ 等/ 角度/ 出发/ 的/ 其他/ 问题/ ,/ 如流/ 数据/ 查询语言/ 、/ 流/ 数据分析/ 与/ 挖掘/ 、/ 流/ 数据处理系统/ 的/ 安全性/ 等/ [/ 4/ -/ 6/ ,/ 14/ ]/ ,/ 本文/ 不/ 进行/ 赘述/ ./ 3.1/ 流/ 数据/ 集成/ 流/ 数据/ 的/ 集成/ 问题/ 大致/ 可以/ 分为/ 几个/ 方面/ :/ 多个/ 流/ 数据源/ 的/ 集成/ 、/ 流/ 处理/ 引擎/ 间/ 的/ 集成/ 以及/ 流/ 处理/ 引擎/ 和/ 传统/ 数据库/ 的/ 集成/ [/ 15/ ]/ ./ 多个/ 流/ 数据源/ 的/ 集成/ 是/ 指/ 把/ 不同/ 来源/ 、/ 格式/ 、/ 特点/ 性质/ 的/ 流/ 数据/ 在/ 逻辑/ 上/ 或/ 物理/ 上/ 有机/ 地/ 集中/ ./ 流/ 处理/ 引擎/ 间/ 的/ 集成/ 是/ 指流/ 处理/ 引擎/ 实例/ 之间/ 的/ 集成/ ,/ 以便/ 综合利用/ 多个/ 流/ 处理/ 引擎/ 的/ 能力/ ./ 流/ 处理/ 引擎/ 和/ 传统/ 数据库/ 的/ 集成/ 是/ 指/ 将/ 流/ 处理/ 引擎/ 和/ 传统/ 数据库/ 有机/ 组织/ 在/ 一起/ ,/ 主要/ 针对/ 混合/ 查询/ 需求/ ,/ 即/ 不仅/ 涉及/ 动态/ 的/ 流/ 数据/ ,/ 还/ 需要/ 访问/ 存储/ 于/ 传统/ 数据库/ 中/ 的/ 静态/ 历史数据/ 的/ 查询/ 需求/ ./ 下面/ 分别/ 对/ 它们/ 进行/ 介绍/ ./ 云/ 计算环境/ 下/ 用户/ 的/ 查询/ 请求/ 一般/ 会/ 涉及/ 到/ 多个/ 流/ 数据源/ ,/ 并且/ 这些/ 数据源/ 常/ 具有/ 不同/ 的/ 数据模型/ 和/ 访问/ 接口/ ./ 同样/ ,/ 对于/ 流/ 处理/ 引擎/ 的/ 输出/ ,/ 也/ 存在/ 流/ 处理/ 的/ 结果/ 输出/ 到/ 多个/ 不同/ 目的/ 系统/ 中/ 的/ 情况/ ./ 对于/ 这/ 类/ 问题/ 的/ 常见/ 解决/ 方法/ 是/ 提供/ 适用/ 于/ 不同/ 数据类型/ 的/ 适配器/ ./ 例如/ ,/ Coral8/ ①/ 和/ Stream/ -/ Base/ [/ 16/ ]/ 等流/ 处理/ 引擎/ 就/ 提供/ 了/ 大约/ 20/ 多个/ 输入/ // 输出/ 适配器/ 或/ SDK/ ,/ 来/ 连接/ 不同/ 的/ 消息/ 系统/ 、/ 数据/ 种子/ (/ datafeed/ )/ 以及/ 呈现/ 数据处理/ 结果/ 的/ 仪表板/ 等/ ./ 这种/ 基于/ 适配器/ 的/ 集成/ 方法/ 虽然/ 需要/ 一些/ 人工/ 操作/ ,/ 不够/ 灵活/ ,/ 但/ 却是/ 支持/ 流/ 数据/ 输入/ // 输出/ 集成/ 的/ 最/ 直接/ 方法/ ./ 基于/ 中介/ 模式/ 与/ 数据源/ 模式/ 之间/ 的/ 语义/ 映射/ 关系/ 利用/ 视图/ 回答/ 查询/ (/ answeringqueriesusingviews/ )/ 是/ 一种/ 很/ 普遍/ 的/ 数据/ 集成/ 方法/ ./ 这种/ 方法/ 同样/ 可/ 用于/ 多个/ 流/ 数据源/ 的/ 集成系统/ 中/ ./ 由于/ 多个/ 流/ 数据源/ 的/ 模式/ 各不相同/ ,/ 采用/ 基于/ 中介/ 模式/ 的/ 集成/ 方法/ ,/ 重写/ 后/ 的/ 查询/ 可能/ 非常复杂/ ./ 为了/ 克服/ 此/ 缺点/ ,/ MDQ/ (/ MappingDatatoQueries/ )/ 直接/ 将/ 到来/ 的/ 流/ 数据/ 的/ 格式/ 和/ 模式/ 映射/ 到/ 连续/ 查询/ 上/ [/ 17/ ]/ ,/ 并/ 将/ 查/ ①/ EngineC/ ./ Coral8/ ./ Inc/ ../ http/ :/ // // www/ ./ coral8/ ./ comPage6/ 询/ 重写/ 推迟/ 到/ 运行/ 时/ ./ MDQ/ 技术/ 对/ 异构/ 模式/ 流/ 数据/ 的/ 灵活/ 集成/ 有/ 较大/ 意义/ ./ 除了/ 流/ 数据/ 的/ 模式/ 异构/ 带来/ 的/ 挑战/ 之外/ ,/ 与/ 传统/ 的/ 数据/ 集成/ 不同/ ,/ 流/ 数据/ 难以/ 预先/ 存储/ ,/ 数据/ 也/ 不/ 属于/ 某/ 一个/ 流/ 处理/ 引擎/ ,/ 并且/ 通过/ 网络/ 连续不断/ 地/ 到达/ ,/ 这/ 使得/ 待/ 集成/ 的/ 数据源/ 的/ 不/ 可预测性/ 、/ 不可靠性/ 更加/ 突出/ ./ 因此/ ,/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 对/ 适应/ 流/ 数据/ 负载/ 变化/ 的/ 可伸缩性/ 保障/ 技术/ 以及/ 针对/ 系统故障/ 的/ 可靠性/ 保障/ 技术/ 具有/ 更/ 高/ 的/ 要求/ ,/ 本文/ 将/ 在/ 3.4/ 节/ 和/ 3.5/ 节对/ 它们/ 进行/ 详细分析/ ./ 对/ 多个/ 流/ 数据源/ 集成/ 的/ 最终/ 目的/ 是/ 为了/ 方便/ 进一步/ 的/ 查询/ 和/ 分析/ ,/ 尤其/ 是/ 那些/ 涉及/ 到/ 多个/ 数据源/ 分析/ 和/ 挖掘/ 的/ 应用/ ./ 例如/ 在/ 文献/ [/ 18/ ]/ 中/ ,/ 为了/ 分析/ 交通流/ 与/ 空气质量/ 之间/ 的/ 相关性/ ,/ 涉及/ 到/ 交通流/ 、/ 人/ 的/ 移动性/ 和/ 气象/ 数据/ 等/ 多种不同/ 类型/ 的/ 数据/ ;/ 在/ 文献/ [/ 19/ ]/ 中/ ,/ 为了/ 分析/ 道路/ 规划/ 的/ 合理性/ ,/ 涉及/ 到/ 交通流/ 、/ 道路/ 结构/ 等/ 多种类型/ 的/ 数据/ ./ 区别/ 于/ 传统/ 先/ 集成/ 再/ 分析/ 的/ 技术/ 路线/ ,/ 多/ 数据源/ 的/ 协同/ 计算/ 也/ 是/ 很多/ 大/ 数据分析/ 应用/ 采用/ 的/ 手段/ [/ 20/ ]/ ,/ 这/ 是/ 流/ 数据/ 集成/ 技术/ 研究/ 的/ 一种/ 新/ 趋势/ ./ 流/ 处理/ 引擎/ 间/ 的/ 集成/ 可/ 分为/ 两类/ :/ 同构/ 流/ 处理/ 引擎/ 间/ 集成/ 以及/ 异构/ 流/ 处理/ 引擎/ 间/ 集成/ ./ 云/ 计算环境/ 下/ 同构/ 流/ 处理/ 引擎/ 间/ 集成/ 的/ 本质/ 是/ 利用/ 分布/ 、/ 并行/ 的/ 流/ 处理/ 技术/ 来/ 提升/ 流/ 处理/ 系统/ 的/ 可用性/ 、/ 可伸缩性/ ,/ 其/ 关键技术/ 见/ 本文/ 在/ 3.2/ 节/ 和/ 3.4/ 节中/ 对/ 云/ 计算环境/ 下/ 的/ 流/ 数据/ 查询/ 操作/ 及/ 可伸缩性/ 保障/ 的/ 归纳/ 和/ 分析/ ./ 异构/ 流/ 处理/ 引擎/ 间/ 的/ 集成/ 在/ 应对/ 跨/ 组织/ 和/ 地域/ 的/ 大规模/ 流/ 处理/ 应用/ 时/ 非常/ 有用/ ./ 当前/ 流/ 处理/ 引擎/ 在/ 语法/ 及/ 执行/ 行为/ 方面/ 均/ 存在/ 多方面/ 的/ 异构/ 问题/ ,/ 使得/ 这种/ 集成/ 方式/ 和/ 传统/ 的/ 数据库/ 集成/ 有/ 了/ 很大/ 不同/ ./ 文献/ [/ 21/ ]/ 提出/ 一个/ 形式化/ 的/ 模型/ ,/ 可/ 用于/ 描述/ 和/ 分析/ 流/ 处理/ 引擎/ 的/ 语法/ 和/ 行为/ ./ 这/ 对/ 增强/ 异构/ 流/ 处理/ 引擎/ 之间/ 互操作性/ 的/ 研究/ 进行/ 了/ 理论/ 上/ 的/ 铺垫/ ,/ 但/ 对/ 云/ 计算环境/ 下流/ 处理/ 引擎/ 语法/ 和/ 行为/ 的/ 形式化/ 描述/ 与/ 分析/ 还是/ 一个/ 待/ 研究/ 的/ 问题/ ./ 异构/ 流/ 处理/ 引擎/ 间/ 的/ 集成/ 用于/ 应对/ 跨/ 组织/ 和/ 地域/ 的/ 大规模/ 流/ 数据/ 协同/ 应用/ 系统/ 中/ 不同/ 参与方/ 流/ 数据处理/ 引擎/ 间/ 的/ 互操作/ ,/ 也/ 常用/ 于/ 融合/ 批处理/ 、/ 流/ 处理/ 及/ 混合/ 处理/ 等/ 不同/ 的/ 计算/ 模式/ ,/ 以/ 发挥/ 异构/ 数据处理/ 引擎/ 的/ 优点/ 、/ 进行/ 流/ 数据处理/ 的/ 优化/ ./ 文献/ [/ 22/ ]/ 以/ 窗口/ 聚集/ 计算/ 为例/ 的/ 相关/ 实验/ 表明/ ,/ 流/ 数据源/ 窗口/ 计算/ 的/ 窗口/ 时间/ 范围/ 、/ 滑动/ 大小/ 、/ 数据/ 速率/ 等/ ,/ 都/ 会/ 影响/ 不同/ 计算/ 模式/ 下流/ 数据处理/ 的/ 延迟/ ./ 这为/ 集成/ 多种/ 计算/ 模式/ 的/ 优点/ 带来/ 了/ 困难/ ./ 文献/ [/ 22/ ]/ 解决/ 这一/ 问题/ 的/ 思路/ 是/ 通过/ 预测/ 不同/ 参数/ 下流/ 数据处理/ 的/ 性能/ 进行/ 计算/ 模式/ 的/ 选取/ 与/ 切换/ ,/ 但/ 其仅/ 针对/ 窗口/ 聚集/ 查询/ ,/ 无法/ 适用/ 于/ 数据/ 速率/ 、/ 窗口/ 时间/ 范围/ 等/ 参数/ 动态变化/ 的/ 情况/ ./ 此外/ ,/ 面向/ 常见/ 的/ 混合/ 查询/ 需求/ ,/ 即/ 不仅/ 涉及/ 动态/ 的/ 流/ 数据/ ,/ 还/ 需要/ 访问/ 传统/ 数据库/ 中/ 的/ 静态/ 历史数据/ 的/ 情形/ ,/ 需要/ 将流/ 处理/ 引擎/ 和/ 传统/ 数据库/ 进行/ 集成/ ,/ 例如/ 提供/ 一个/ 统一/ 的/ 查询/ 接口/ 来/ 支持/ 针对/ 流/ 数据源/ 和/ 静态/ 关系数据库/ 数据源/ 的/ 混合/ 查询/ ./ MaxStream/ [/ 23/ ]/ 是/ 针对/ 此/ 问题/ 的/ 一个/ 典型/ 工作/ ,/ 其/ 目标/ 是/ 无缝/ 集成/ 多个/ 自治/ 、/ 异构/ 的/ 流/ 数据处理/ 引擎/ 以及/ 传统/ 数据库/ ,/ 对外/ 提供/ 基于/ 结构化/ 查询语言/ 的/ 声明/ 式/ 查询/ 接口/ 和/ 共用/ 的/ API/ ./ MaxStream/ 的/ 实现/ 原理/ 如图/ 3/ 所示/ ,/ 在/ 客户端/ 和/ 关系数据库/ 、/ 流/ 处理/ 引擎/ 之间/ 增加/ 了/ 联邦/ 层/ ,/ 联邦/ 层/ 对流/ 数据/ 连续/ 查询/ 请求/ 进行/ 解析/ 、/ 查询/ 结果/ 进行/ 转换/ ,/ 数据/ 代理/ 则/ 负责/ 所有/ 控制/ 消息/ 的/ 交换/ 以及/ 数据/ 的/ 转发/ ./ MaxStream/ 可/ 适用/ 于/ 跨/ 组织/ 和/ 地域/ 的/ 分布式计算/ 环境/ 中/ ,/ 但/ 在/ 云/ 计算环境/ 下/ ,/ 如何/ 针对/ 动态变化/ 的/ 负载/ ,/ 对/ 跨流/ 处理/ 引擎/ 和/ 传统/ 数据库/ 的/ 连续/ 查询/ 进行/ 功能/ 及/ 非/ 功能属性/ 方面/ 的/ 优化/ ,/ 还有/ 待/ 进一步/ 的/ 研究/ ./ 图/ 3MaxStream/ :/ 流/ 处理/ 引擎/ 与/ 传统/ 数据库/ 的/ 集成/ [/ 23/ ]/ 3.2/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 查询/ 操作/ 流/ 数据/ 查询/ 操作/ 是/ 实现/ 定制/ 化/ 服务/ 的/ 基础/ ,/ 其/ 相关/ 工作/ 可以/ 分为/ 两个/ 方面/ ./ 一方面/ 是/ 单个/ 查询/ 操作/ 的/ 实现/ 及/ 优化/ ,/ 例如/ 连接/ 查询/ 、/ 聚集/ 查询/ 等/ 操作/ 的/ 实现/ 及/ 优化/ ;/ 另一方面/ 是/ 互相/ 连接/ 的/ 多个/ 流/ 数据/ 操作/ 算子/ 的/ 执行/ 及/ 优化/ ./ 针对/ 包含/ 多个/ 流/ 数据/ 操作/ 算子/ 的/ 优化/ 方法/ ,/ 文献/ [/ 24/ ]/ 进行/ 了/ 总结/ ,/ 如/ 算子/ 重新/ 排序/ 、/ 算子/ 去/ 重/ 等/ 优化/ 方法/ ,/ 本文/ 不/ 进行/ 赘述/ ./ 与/ 传统/ 数据库/ 一样/ ,/ 流/ 数据/ 的/ 基本/ 查询/ 操作/ 也/ 可/ 分为/ 选择/ 、/ 投影/ 、/ 连接/ (/ join/ )/ 和/ 聚集/ (/ aggregation/ )/ 等/ 操作/ ./ 其中/ ,/ 选择/ 和/ 投影/ 操作/ 相对/ 简单/ ,/ 而/ 连接/ 操作/ 和/ 聚集/ 操作/ 是/ 两种/ 较/ 复杂/ 、/ 耗时/ 的/ 查询/ 操作/ ./ 在/ 传统/ 数据库/ 研/ Page7/ 究中/ ,/ 连接/ 和/ 聚集/ 查询/ 一直/ 是/ 热点/ 研究/ 内容/ ,/ 在/ 流/ 数据/ 研究/ 中/ ,/ 由于/ 大规模/ 流/ 数据/ 的/ 实时性/ 、/ 不间断/ 等/ 固有/ 特性/ 以及/ 云/ 计算环境/ 下/ 分布/ 并行处理/ 的/ 特点/ ,/ 为/ 聚集/ 操作/ 和/ 连接/ 操作/ 的/ 实现/ 和/ 优化/ 方法/ 带来/ 一些/ 新/ 的/ 问题/ ./ 除流/ 数据/ 基本/ 查询/ 操作/ 之外/ ,/ 还有/ 一些/ 应用/ 较/ 广泛/ 的/ 流/ 数据/ 高级/ 查询/ 操作/ ,/ 例如/ 流/ 数据/ 上/ 的/ skyline/ 查询/ 、/ K/ 最近/ 邻/ (/ K/ -/ NearestNeighbor/ ,/ KNN/ )/ 查询/ 、/ 关键字/ 查询/ 、/ 相似/ 查询/ 等/ ./ 下面/ 针对/ 它们/ 在/ 云/ 计算环境/ 下/ 的/ 实现/ 及/ 优化/ 方法/ 进行/ 解析/ ./ 3.2/ ./ 1/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 连接/ 查询/ 操作/ 流/ 数据/ 在/ 理论/ 上/ 是/ 无限/ 的/ ,/ 因而/ 流/ 数据/ 上/ 的/ 查询/ 一般/ 被/ 定义/ 为/ “/ 滑动/ 窗口/ 连续/ 查询/ ”/ ./ 面向/ 连接/ 操作/ 的/ 滑动/ 窗口/ 连续/ 查询/ (/ 以下/ 简称/ “/ 滑动/ 窗口/ 连接/ 查询/ ”/ )/ 可/ 用于/ 关联/ 不同/ 的/ 流/ 数据源/ ,/ 例如/ 关联/ 多个/ 移动/ 对象/ 生成/ 的/ 数据/ 等/ ./ 流/ 数据/ 的/ 连接/ 查询/ 算法/ 可以/ 分为/ 两个/ 或/ 多个/ 流/ 数据/ 之间/ 的/ 连接/ 查询/ 以及/ 流/ 数据/ 和/ 静态数据/ 之间/ 的/ 连接/ 查询/ 两类/ ./ 传统/ 的/ 对称/ 哈希/ 连接/ 算法/ (/ SymmetricHashJoin/ ,/ SHJ/ )/ 扩展/ 后/ 可以/ 支持/ 滑动/ 窗口/ 连接/ 查询/ [/ 25/ ]/ ./ 针对/ 多个/ 流/ 数据源/ 的/ 连接/ 查询/ ,/ 文献/ [/ 26/ ]/ 提出/ 进行/ 多重/ 连接/ 的/ MJoin/ 算法/ ./ 针对/ 流/ 数据/ 和/ 静态数据/ 之间/ 的/ 连接/ 查询/ 问题/ ,/ 索引/ 循环/ 嵌套/ 连接/ (/ Index/ -/ Nested/ -/ LoopJoin/ ,/ INLJ/ )/ 算法/ 和/ MESHJOIN/ 是/ 两种/ 基本/ 的/ 算法/ [/ 27/ ]/ ./ 在/ 分布式/ 和/ 云/ 计算环境/ 中/ ,/ 连接/ 查询/ 主要/ 通过/ 数据/ 分区/ 技术/ 实现/ ①/ ,/ 文献/ [/ 28/ ]/ 提出/ 一种/ 可/ 用于/ 云/ 计算环境/ 下/ 的/ 基于/ 数据/ 并行/ 划分/ 技术/ 的/ 流/ 数据/ 滑动/ 连接/ 查询方法/ ./ 该/ 方法/ 可/ 细粒度/ 地/ 动态/ 调整/ 每个/ 节点/ 上/ 的/ 窗口/ 分片/ 大小/ ,/ 以/ 应对/ 运行/ 时流/ 数据/ 速率/ 的/ 变化/ 问题/ ./ 真实/ 系统/ 中/ 的/ 流/ 数据/ 连接/ 查询/ 往往/ 还/ 需要/ 针对/ 具体情况/ 灵活/ 应对/ ./ 例如/ ,/ Photon/ 从/ 不同/ 数据中心/ 的/ GFS/ (/ GoogleFileSystem/ )/ 读入/ 查询/ 日志/ 和/ 点击/ 日志/ 后/ 根据/ 查询/ ID/ 进行/ 连接/ 操作/ ./ 由于/ Photon/ 中/ 查询/ 请求/ 数据流/ 根据/ 查询/ 的/ 时间/ 戳/ 基本/ 有序/ 到达/ ,/ 但/ 点击/ 流有/ 天然/ 的/ 延迟/ ,/ 不是/ 按照/ 查询/ 请求/ 的/ 时间/ 戳/ 顺序/ 到达/ 的/ ,/ 因此/ ,/ Photon/ 持久/ 化/ 保存/ 最近/ N/ 天内/ 已/ 处理/ 过/ 的/ 点击/ ID/ 的/ 集合/ ./ N/ 的/ 选择/ 取决于/ 资源/ 消耗/ 和/ 丢失/ 数据/ 影响面/ 之间/ 的/ 权衡/ ,/ 系统对/ 延迟/ 到达/ N/ 天/ 之前/ 的/ 数据/ 进行/ 丢弃/ 处理/ [/ 29/ ]/ ./ 3.2/ ./ 2/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 聚集/ 查询/ 操作/ 根据/ 分配/ 型/ 、/ 代数/ 型/ 和/ 整体/ 型/ 聚集/ 函数/ 作用/ 在/ 滑动/ 窗口/ 新增/ 元组/ 和/ 消失/ 元组/ 的/ 特点/ ,/ 可以/ 将流/ 数据/ 上/ 的/ 聚集/ 函数/ 分为/ 非/ 整体/ 型/ (/ 指对/ 窗口/ 的/ 新增/ 元组/ 和/ 消失/ 元组/ 都/ 是/ 分配/ 型/ 或/ 代数/ 型/ 的/ ,/ 例如/ sum/ 、/ count/ 等/ 聚集/ 函数/ )/ 、/ 半/ 整体/ 型/ (/ 指对/ 窗口/ 的/ 新增/ 元组/ 为/ 分配/ 型/ 或/ 代数/ 型/ ,/ 但/ 对/ 消失/ 元组/ 不是/ 分配/ 型/ 或/ 代数/ 型/ 的/ ,/ 例如/ max/ 、/ min/ 、/ top/ -/ k/ 等/ 聚集/ 函数/ )/ 以及/ 整体/ 型/ (/ 指对/ 新增/ 元组/ 既/ 不是/ 分配/ 型/ 又/ 不是/ 代数/ 型/ 的/ 聚集/ 函数/ ,/ 如求/ 中位数/ )/ 等/ 三类/ 聚集/ 函数/ [/ 30/ ]/ ./ 基于/ 云/ 计算/ 分布/ 并行/ 的/ 计算/ 模式/ ,/ 流/ 数据/ 上/ 的/ 滑动/ 窗口/ 聚集/ 操作/ 有/ 几种/ 优化/ 方法/ [/ 22/ ]/ :/ (/ 1/ )/ 并行/ 划分/ ./ 基本/ 的/ 滑动/ 窗口/ 划分/ 方法/ 以/ 窗口/ 为/ 单位/ 将/ 其/ 划分/ 到/ 多个/ 节点/ 上/ 执行/ ,/ 这种/ 方法/ 虽然/ 简单/ ,/ 但/ 由于/ 连续/ 的/ 滑动/ 窗口/ 之间/ 存在/ 元组/ 重叠/ 的/ 情况/ ,/ 导致/ 同一/ 元组/ 划分/ 到/ 多个/ 节点/ 上/ 重复/ 处理/ ./ 基于/ 批量/ 窗口/ 的/ 划分/ 方法/ 将/ 多个/ 窗口/ 的/ 元组/ 作为/ 一个/ 单元/ 划分/ 到/ 节点/ 上/ 进行/ 处理/ ,/ 同一/ 分片/ 中/ 的/ 元组/ 不需/ 重复/ 处理/ ,/ 减少/ 了/ 计算/ 开销/ 和/ 空间/ 开销/ ./ 由于/ 划分/ 代价/ 和/ 计算/ 代价/ 都/ 会/ 随/ 重叠/ 元组/ 数目/ 提升/ 而/ 提升/ ,/ 因此/ ,/ 当/ 窗口/ 太/ 大/ 、/ 流/ 数据/ 的/ 到达/ 速度/ 太高时/ ,/ 基本/ 窗口/ 和/ 批量/ 窗口/ 的/ 并行处理/ 方法/ 不/ 具有/ 较/ 好/ 的/ 可扩展性/ ./ 此外/ ,/ 还/ 可以/ 与/ 层次/ 型/ 处理/ 方法/ 结合/ ,/ 将/ 窗口/ 划分/ 为子/ 窗口/ 后/ ,/ 再/ 划分/ 到/ 多个/ 节点/ 上/ 执行/ ./ (/ 2/ )/ 增量/ 式/ 处理/ ./ 增量/ 式/ 处理/ 方法/ 只/ 处理/ 相邻/ 窗口/ 中/ 不同/ 的/ 元组/ ./ 增量/ 式/ 处理/ 只/ 对/ 非/ 整体/ 型/ 聚集/ 函数/ 有/ 意义/ ,/ 非/ 增量/ 式/ 处理/ 可/ 应用/ 于/ 任何/ 类型/ 的/ 聚集/ 函数/ ./ 增量/ 式/ 处理/ 可以/ 减少/ 待处理/ 的/ 元组/ ,/ 加快/ 元组/ 处理/ 效率/ ,/ 但/ 可能/ 造成/ 处理/ 浪费/ ./ (/ 3/ )/ 层次/ 型/ 处理/ ./ 层次/ 型/ 处理/ 实质/ 上/ 是/ 将/ 窗口/ 聚集/ 函数/ 进行/ 两轮/ 计算/ :/ 将/ 窗口/ 分成/ 几个/ 不/ 重叠/ 的/ 子/ 窗口/ ,/ 先在子/ 窗口/ 上/ 进行/ 聚集/ 函数/ 计算/ ,/ 然后/ 再/ 进行/ 整体/ 上/ 的/ 聚集/ 计算/ ./ 在/ 第二轮/ 计算/ 时/ ,/ 可以/ 采用/ 增量/ 式/ 和/ 非/ 增量/ 式/ 处理/ 方式/ ./ 层次/ 型/ 处理/ 可/ 对/ 不同/ 子/ 窗口/ 的/ 数据/ 进行/ 并行处理/ ,/ 从而/ 进一步/ 提升/ 处理/ 效率/ ./ 文献/ [/ 31/ ]/ 将/ 滑动/ 窗口/ 划分/ 为/ 互不/ 相交/ 但/ 间隔/ 相等/ 的/ 格/ (/ pane/ )/ ,/ 称为/ “/ 基于/ 格/ 的/ 窗口/ 聚集/ 查询/ ”/ 方法/ ./ 基于/ 格/ 的/ 划分/ 方法/ 以格/ 为/ 单元/ 进行/ 划分/ ,/ 将/ 节点/ 以/ “/ 环/ ”/ 的/ 拓扑/ 结构/ 组织/ ,/ 将格以/ 轮询/ 方法/ 循环/ 分派/ 到/ 环中/ 的/ 下/ 一个/ 相邻/ 节点/ 上/ ,/ 从而/ 使得/ “/ 基于/ 格/ 的/ 窗口/ 聚集/ 查询/ ”/ 可/ 在/ 分布式/ 的/ 云/ 计算/ 环境中工作/ ./ 基于/ 格/ 的/ 划分/ 方法/ 消除/ 了/ 元组/ 的/ 重复/ 处理/ ,/ 因此/ 其/ 划分/ 代价/ 不会/ 随/ 窗口/ 重叠/ 元组/ 数目/ 的/ 提升/ 而/ 提升/ ,/ 而/ 吞吐/ 率/ 也/ 不会/ 随之/ 下降/ [/ 32/ ]/ ./ 划分/ 并行/ 由于/ 数据/ 划分/ 、/ 网络通信/ 、/ 并行任务/ 的/ 执行/ 等/ 处理/ 会/ 带来/ 一些/ 开销/ ./ 半/ 整体/ 型/ 聚集/ 函数/ 由于/ 不/ 需要/ 专门/ 对/ 消失/ 元组/ 进行/ 处理/ ,/ 因此/ 层次/ 型/ 处理/ 的/ 第二轮/ 计算/ 可/ 基于/ 子/ ①/ IlyaKatsov/ ./ In/ -/ StreamBigDataProcessing/ ./ https/ :/ // // highly/ -/ Page8/ 窗口/ 的/ 处理结果/ 进行/ ,/ 节省/ 了/ 计算/ 开销/ 和/ 空间/ 开销/ ./ 整体/ 型/ 聚集/ 函数/ 虽然/ 无法/ 基于/ 子/ 窗口/ 的/ 处理结果/ 节省/ 开销/ ,/ 但/ 也/ 减少/ 了/ 重叠/ 窗口/ 聚集/ 查询/ 的/ 计算/ 开销/ 和/ 空间/ 开销/ ./ 文献/ [/ 24/ ]/ 将/ 多种/ 计算/ 模式/ 优化/ 选取/ 方法/ 用于/ 聚集/ 函数/ 的/ 优化/ ,/ 此/ 方法/ 已经/ 在/ 3.1/ 节中/ 进行/ 了/ 介绍/ ,/ 主要/ 思想/ 是/ 利用/ 不同/ 种类/ 流/ 处理/ 引擎/ 的/ 优点/ 、/ 融合/ 批处理/ 、/ 流/ 处理/ 及/ 混合/ 处理/ 等/ 不同/ 计算/ 模式/ ,/ 从中/ 选取/ 优化/ 的/ 计算/ 模式/ ./ 该/ 工作/ 尚未/ 考虑/ 基于/ 格/ 的/ 窗口/ 聚集/ 查询/ ,/ 还有/ 进一步/ 的/ 研究/ 空间/ ./ 此外/ ,/ 当前/ 滑动/ 窗口/ 聚集/ 查询方法/ 的/ 优化/ 目标/ 大多/ 为/ 减少/ 计算/ 开销/ 和/ 空间/ 开销/ ,/ 在/ 分布/ 的/ 云/ 计算环境/ 中/ ,/ 如何/ 减少/ 网络通信/ 代价/ ,/ 如何/ 在/ 各种/ 优化/ 指标/ 之间/ 进行/ 权衡/ ,/ 都/ 是/ 需要/ 考虑/ 的/ 问题/ ./ 文献/ [/ 33/ ]/ 提出/ 了/ 优化/ 目标/ 为/ 减少/ 源/ 节点/ 和/ 目的/ 接收/ 节点/ 之间/ 通信/ 代价/ 的/ △/ SPE/ 算法/ ,/ 其/ 核心思想/ 是/ 找到/ 源/ 节点/ 发送到/ 目的/ 接收/ 节点/ 的/ 最小/ 聚集/ 集合/ ./ 但/ 这方面/ 的/ 研究/ 还/ 很/ 初步/ ./ 表/ 2/ 对本节/ 介绍/ 的/ 几种/ 典型/ 工作/ 进行/ 了/ 对比/ ./ 表/ 2/ 云/ 计算环境/ 中/ 滑动/ 窗口/ 聚集/ 查询/ 操作/ 实现/ 方法/ 对比/ 分类/ 标准/ 概述/ 优点/ 并行/ 划分/ 增量/ 式/ 处理/ 层次/ 型/ 处理/ 其他/ 除流/ 数据/ 基本/ 查询/ 操作/ 之外/ ,/ 流/ 数据/ 上/ 的/ skyline/ 查询/ 、/ k/ 最近/ 邻/ 查询/ 、/ 关键字/ 查询/ 等/ 高级/ 查询/ 操作/ 应用/ 也/ 较/ 广泛/ ,/ 这/ 类/ 查询/ 计算/ 代价/ 比较/ 大/ ,/ 当/ 数据/ 规模/ 大/ 、/ 速度/ 高时/ ,/ 面临/ 更大/ 挑战/ ./ 近年/ 分布式/ 环境/ 中流/ 数据/ 高级/ 查询/ 的/ 研究/ 成为/ 热点/ ,/ 而/ 利用/ 云/ 计算环境/ 提升/ 流/ 数据/ 查询处理/ 性能/ 和/ 效率/ 的/ 研究/ 刚刚/ 起步/ ,/ 其/ 基本/ 思想/ 是/ 采用/ 划分/ 的/ 方法/ ,/ 将/ 高速/ 到达/ 的/ 大规模/ 流/ 数据/ 进行/ 有效/ 划分/ ,/ 将/ 其/ 分配/ 到/ 各个/ 并行计算/ 节点/ 上/ ,/ 利用/ 各/ 节点/ 的/ 并行/ 来/ 提高/ 系统/ 的/ 性能/ ./ 例如/ ,/ 文献/ [/ 34/ ]/ 等/ 通过/ 交叉/ 划分/ 完整/ 的/ 滑动/ 窗口/ 的/ 方法/ 实现/ 了/ 流/ 数据/ 上/ 分布/ 并行/ 的/ skyline/ 查询/ ;/ 文献/ [/ 35/ ]/ 在/ 实现/ KNN/ 查询/ 操作/ 时/ ,/ 使用/ 哈希/ 方法/ 对流/ 数据/ 元组/ 进行/ 划分/ 并行处理/ ,/ 同时/ 设计/ 了/ 维护/ 节点/ 之间/ 共享/ 状态/ 的/ 策略/ ./ 文献/ [/ 36/ ]/ 面向/ 流/ 数据/ 查询/ 操作/ ,/ 提出/ 了/ 一个/ 层次/ 型/ 的/ 基于/ 云/ 计算/ 的/ 并行/ 编程/ 模型/ 和/ 框架/ ./ 在/ 分布/ 并行/ 的/ 云/ 计算环境/ 中/ 进行/ 流/ 数据/ 高级/ 查询/ 操作/ 还/ 面临/ 一系列/ 难点/ 问题/ ./ 例如/ ,/ 数据/ 划分/ 到/ 不同/ 节点/ 上/ 之后/ ,/ 状态/ 维护/ 以及/ 不同/ 节点/ 之间/ 通信/ 会/ 带来/ 开销/ ,/ 如何/ 在/ 开销/ 及/ 效率/ 提升/ 之间/ 进行/ 平衡/ ;/ 当/ 负载/ 变化/ 时/ ,/ 如何/ 动态/ 保障系统/ 的/ 可伸缩性/ (/ 此/ 问题/ 的/ 详细/ 讨论/ 见/ 本文/ 3.4/ 节/ )/ ./ 此外/ ,/ 由于/ 实际/ 应用/ 中/ 产生/ 的/ 流/ 数据/ 往往/ 是/ 不/ 确定/ 或/ 不/ 精确/ 的/ ,/ 在/ 对/ 这些/ 不/ 确定/ 的/ 流/ 数据/ 进行/ 查询/ 操作/ 时/ ,/ 会/ 涉及/ 到流/ 数据/ 概率/ 等/ 复杂/ 计算/ ,/ 使得/ 针对/ 大规模/ 、/ 高速/ 到达/ 的/ 流/ 数据/ 进行/ 查询/ 面临/ 极大/ 的/ 挑战/ ./ 近年/ 已有/ 研究/ 人员/ 在/ 如何/ 利用/ 云/ 计算技术/ 解决/ 这些/ 问题/ 方面/ 开展/ 了/ 一些/ 工作/ [/ 37/ -/ 38/ ]/ ./ 3.3/ 流/ 数据/ 定制/ 化/ 服务/ 流/ 数据/ 定制/ 化/ 服务/ 的/ 目标/ 是/ 面向/ 不同/ 类型/ 应用/ 的/ 需求/ ,/ 以/ 服务/ 方式/ 提供/ 对流/ 数据/ 连续/ 查询/ 、/ 事件/ 检测/ 、/ 实时/ 分析/ 等/ 的/ 能力/ ,/ 支持/ 用户/ 对/ 大规模/ 流/ 数据/ 集成/ 和/ 处理/ 进行/ 灵活/ 的/ 共享/ 与/ 定制/ ./ 云/ 计算环境/ 下流/ 数据/ 定制/ 化/ 服务/ 的/ 现有/ 工作/ 可/ 分为/ 流/ 数据服务/ 建模/ 、/ 发现/ 、/ 编程/ 、/ 提供/ 及/ 托管/ 等/ 不同/ 方面/ 的/ 工作/ ./ 面向/ 流/ 数据/ 的/ 访问/ 和/ 获取/ ,/ 流/ 数据/ 定制/ 化/ 服务/ 首先/ 要/ 考虑/ 服务/ 的/ 抽象/ 和/ 建模/ 问题/ ./ 流/ 数据/ 的/ 使用者/ 还/ 需要/ 发现/ 有/ 哪些/ 流/ 数据/ 需要/ 访问/ 以及/ 数据/ 的/ 格式/ 、/ 语义/ 、/ 集成/ 的/ 方式/ 等/ ,/ 流/ 数据/ 定制/ 化/ 服务/ 向/ 服务/ 消费者/ 提供/ API/ 、/ 表达/ 语言/ 、/ 丰富/ 的/ 元/ 数据/ 等/ 来/ 满足/ 这些/ 需求/ ,/ 服务/ 消费者/ 可/ 发送/ 访问/ 和/ 查询/ 的/ 请求/ 到/ 服务提供者/ 并/ 从/ 服务提供者/ 获取数据/ ,/ 或/ 进一步/ 进行/ 大/ 粒度/ 服务/ 及/ 应用/ 的/ 编程/ 和/ 构造/ ./ 流/ 数据服务/ 的/ 托管/ 将/ 用户/ 对流/ 数据/ 进行/ 管理/ 、/ 部署/ 和/ 运营/ 的/ 任务/ 托管/ 给/ 云/ 基础设施/ 进行/ ,/ 并/ 将/ 流/ 数据/ 的/ 采集/ 、/ 查询/ 、/ 分析/ 和/ 管理/ 的/ 能力/ 在/ 互联网/ 上/ 作为/ 云/ 数据服务/ [/ 39/ ]/ 交付给/ 用户/ 使用/ ,/ 对/ 用户/ 提供/ “/ 即取/ 即/ 用/ ”/ 的/ 服务/ 使用/ 模式/ ./ 针对/ 具有/ 实时/ 、/ 持续/ 不间断/ 等/ 特性/ 的/ 流/ 数据/ ,/ 采用/ 目前/ 流行/ 的/ 网络服务/ (/ 如/ Web/ 服务/ )/ 的/ 方法/ 和/ 技术/ 对/ 其/ 进行/ 统一/ 访问/ 和/ 查询/ 存在/ 天然/ 的/ 局限性/ ./ 现有/ 的/ 服务/ 抽象/ 模型/ 难以/ 刻画/ 对/ 大规模/ 流/ 数据/ 进行/ 查询/ 和/ 集成/ 的/ 能力/ ./ 例如/ ,/ 现存/ 的/ 服务/ 模型/ (/ 如/ 基于/ Web/ 服务/ 接口/ 描述语言/ (/ WebServicesDescriptionLanguage/ ,/ WSDL/ )/ 的/ 服务/ 模型/ [/ 40/ ]/ )/ 主要/ 用来/ 刻画/ 与/ Page9/ 其他/ 分布式/ 的/ 组件/ 进行/ 交互/ 的/ 业务/ 功能/ 方面/ ,/ 不/ 对/ 数据源/ 的/ 数据/ 模式/ 进行/ 显式/ 的/ 描述/ ,/ 将/ 数据源/ 抽象/ 为/ 一组/ 带有/ 输入/ // 输出/ 参数/ 的/ 操作/ 接口/ ./ 并且/ ,/ 这些/ 操作/ 接口/ 是/ 预先/ 定义/ 好/ 的/ ,/ 只/ 提供/ 了/ 对/ 数据源/ 有限/ 的/ 访问/ 和/ 查询/ 功能/ ,/ 客户端/ 无法/ 针对/ 数据源/ 提交/ 预定/ 义/ 功能/ 外/ 的/ 定制/ 查询/ 请求/ ./ 针对/ 服务/ 模型/ 存在/ 的/ 上述/ 问题/ ,/ 国内外/ 研究者/ 在/ 数据服务/ 模型/ 方面/ 开展/ 了/ 不同/ 程度/ 的/ 研究/ 工作/ 和/ 实践/ [/ 39/ ,/ 41/ -/ 43/ ]/ ,/ 包括/ “/ 数据服务/ ”/ (/ dataservice/ )/ 以及/ “/ 以/ 数据/ 为/ 中心/ 的/ Web/ 服务/ ”/ (/ data/ -/ centricWebService/ )/ 的/ 工作/ ./ 流/ 数据服务/ 的/ 模型/ 和/ 数据服务/ 模型/ 类似/ ,/ 都/ 将/ 数据/ 作为/ 服务/ 描述/ 的/ “/ 一等/ 公民/ (/ first/ -/ classcitizen/ )/ ”/ ./ 但/ 由于/ 大规模/ 流/ 数据/ 具有/ 规模/ 大/ 、/ 实时/ 、/ 持续/ 不间断/ 等/ 特性/ ,/ 使得/ 二者/ 有/ 很大/ 区别/ ./ 表/ 3/ 对/ 大规模/ 流/ 数据服务/ 与/ 传统/ 数据服务/ 从/ 几个/ 角度/ 进行/ 了/ 初步/ 比较/ ./ 首先/ 二者/ 描述/ 的/ 数据源/ 类型/ 不同/ ,/ 其次/ ,/ 流/ 数据服务/ 模型/ 还/ 需/ 屏蔽/ 大规模/ 流/ 数据处理/ 的/ 复杂性/ ,/ 需要/ 对流/ 数据/ 基本操作/ 的/ 算子/ 进行/ 定义/ ,/ 对流/ 数据处理/ 的/ 规则/ 进行/ 描述/ ./ 此外/ ,/ 相对/ 于/ 传统/ 数据服务/ 被动/ 调用/ 的/ 方式/ 以及/ 较/ 低/ 的/ 结果/ 更新/ 频率/ ,/ 大规模/ 流/ 数据服务/ 的/ 结果/ 持续/ 更新/ 、/ 频率/ 较/ 高/ ,/ 通常/ 采用/ 主动/ 推送/ 的/ 调用/ 方式/ ./ 表/ 3/ 大规模/ 流/ 数据服务/ 模型/ 与/ 传统/ 数据服务/ 模型/ 的/ 比较/ 比较/ 项/ 大规模/ 流/ 数据服务/ 数据源/ 类型/ 主要/ 功能/ 屏蔽/ 大规模/ 数据处理/ 的/ 复调/ 用/ 方式/ 支持/ 主动/ 推送/ 结果/ 更新/ 结果/ 持续/ 更新/ ,/ 频率/ 高/ 结果/ 更新/ 频率/ 低/ 部署/ 环境/ 部署/ 在/ 云/ 存储/ 、/ 分布/ 并行/ 的/ 流/ 数据服务/ 的/ 模型/ 需要/ 对/ 服务/ 的/ 数据模型/ 、/ 操作/ 、/ 服务/ 处理/ 方法/ 以及/ 性质/ 等/ 进行/ 刻画/ ./ 针对/ 这些/ 问题/ ,/ 已有/ 研究/ 工作/ 提出/ 了/ 流/ 数据服务/ 模型/ 支持/ 规模/ 大/ 、/ 实时/ 、/ 持续/ 不间断/ 的/ 流/ 数据/ 访问/ 和/ 查询/ 等/ ./ StreamFeeds/ [/ 44/ ]/ 建立/ 了/ 基于/ RESTful/ 服务/ 模型/ 的/ 流/ 数据服务/ ,/ 将/ 来自/ 于/ 传感器/ 的/ 流/ 数据/ 变为/ Web/ 上/ 可/ 直接/ 访问/ 的/ 资源/ ./ 如图/ 4/ 所示/ ,/ 该/ 服务/ 模型/ 支持/ 将流/ 数据/ 更新/ 实时/ 、/ 主动/ 地/ 推送/ (/ push/ )/ 到/ 客户端/ 的/ 调用/ 模式/ (/ 也/ 兼容/ “/ 拉/ (/ pull/ )/ ”/ 的/ 服务/ 调用/ 模式/ )/ ,/ 在/ 服务端/ 提供/ 基本/ 的/ 流/ 数据/ 过滤/ 操作/ ,/ 支持/ 将/ 多个/ 流/ 数据/ 融合/ 成为/ 一个/ 新/ 的/ 流/ 数据/ ./ 同时/ ,/ 该/ 服务/ 模型/ 支持/ 对流/ 数据/ 及其/ 历史数据/ 的/ 查询/ ./ 在/ 性能/ 上/ ,/ 该/ 服务/ 模型/ 也/ 满足/ 了/ 流/ 数据/ 更新/ 频率/ 高/ 、/ 低/ 延迟/ 、/ 数据量/ 大/ 等/ 基本/ 要求/ ./ 与/ StreamFeeds/ 的/ 工作/ 原理/ 类似/ ,/ Thing/ -/ REST/ [/ 45/ ]/ 以及/ Guinard/ 等/ 人/ [/ 46/ ]/ 的/ 研究/ 工作/ 也/ 为/ 传感器/ 数据/ 等流/ 数据/ 建立/ 了/ RESTful/ 服务/ 抽象/ ./ SOCRADES/ [/ 47/ ]/ 则/ 提供/ 了/ RESTful/ 、/ 基于/ 简单/ 对象/ 访问/ 协议/ (/ SimpleObjectAccessProtocol/ ,/ SOAP/ )/ 和/ WS/ -/ / 标准/ 等/ 两种/ 流/ 数据服务/ 模型/ ./ 针对/ 特定/ 领域/ 流/ 数据服务/ 建模/ 也/ 有着/ 相关/ 研究/ ,/ 例如/ ,/ 针对/ 时空/ 轨迹/ 流/ 数据/ ,/ Chu/ 等/ 人/ [/ 48/ ]/ 在/ 传统/ 实体/ -/ 关系/ (/ Entity/ -/ Relation/ ,/ ER/ )/ 模型/ 的/ 基础/ 上/ ,/ 提出/ 了/ 能够/ 刻画/ 时空/ 变化/ 及/ 它们/ 与/ 移动/ 对象/ 之间/ 关系/ 的/ 数据模型/ ,/ 并/ 基于/ 此/ 数据模型/ 提出/ 交通流/ 数据分析/ 服务/ 模型/ ,/ 能够/ 捕捉/ 交通流/ 在/ 不同/ 情境/ 下/ 的/ 变化/ ./ 图/ 4StreamFeeds/ :/ 一种/ 流/ 数据服务/ 抽象/ 模型/ [/ 44/ ]/ 应该/ 认识/ 到/ ,/ 在/ 数据源/ 数据/ 发送/ 速度/ 很/ 高/ 的/ 情况/ 下/ ,/ 并不需要/ 将流/ 数据源/ 直接/ 抽象/ 为/ HTTP/ 可/ 访问/ 的/ 服务/ 资源/ ,/ 将流/ 数据/ 查询/ 操作/ 提供/ 为/ 服务/ 更有意义/ ./ 此外/ ,/ 通过/ 领域/ 知识/ 的/ 重用/ 面向/ 领域/ 进行/ 流/ 数据服务/ 建模/ 也/ 是/ 亟待/ 研究/ 的/ 问题/ ./ 为了/ 利用/ 流/ 数据/ 构造/ 具体/ 的/ 应用/ ,/ 研究者/ 们/ 提出/ 了/ 不同/ 的/ 编程/ 模型/ 与/ 方法/ ,/ 从/ 基于/ 特定/ 编程语言/ (/ 例如/ IBM/ 在/ 分布式/ 集群/ 中/ 进行/ 流/ 数据处理/ 的/ 编程语言/ SPL/ [/ 49/ ]/ )/ 、/ 基于/ 程序库/ (/ 例如/ SparkStreaming/ [/ 50/ ]/ )/ 到/ 基于/ SQL/ 的/ 流/ 数据/ 查询语言/ (/ 例如/ CQL/ [/ 51/ ]/ )/ 等/ ./ 利用/ 流/ 数据服务/ 构造/ 应用/ 的/ 方法/ 则/ 延续/ 服务/ 计算/ 的/ 核心思想/ ,/ 采用/ 面向/ 服务/ 的/ 编程/ 模型/ ,/ 在/ 近年来/ 传感器/ 流/ 数据/ 应用/ 的/ 构造/ 过程/ 中/ 得到/ 广泛/ 研究/ ./ 其/ 主要/ 思想/ 是/ 将/ 现实/ 世界/ 中/ 的/ 传感器/ 流/ 数据抽象/ 为/ 服务/ ,/ 并/ 将/ 其/ 与/ 传感器/ 所在/ 的/ 周围/ 情景/ 信息/ 及/ 用户/ 的/ 情景/ 信息/ 相关联/ ,/ 从而/ 实现/ 灵活/ 的/ 智能/ 服务/ ,/ 能够/ 感知/ 物/ Page10/ 理/ 世界/ 并/ 主动/ 做出/ 响应/ ./ 与/ 传统/ 的/ 服务/ 不同/ ,/ 由于/ 流/ 数据服务/ 大多/ 是/ 基于/ 计算能力/ 有限/ 的/ 传感器/ 设备/ 提供/ 的/ ,/ 其/ 数量/ 多/ 、/ 变化/ 快/ ,/ 因此/ 在/ 基于/ 流/ 数据服务/ 的/ 编程/ 方法/ 中/ ,/ 需/ 尽可能/ 减小/ 服务/ 执行/ 和/ 注册/ 的/ 开销/ ,/ 同时/ 对/ 根据/ 情境/ 信息/ 动态/ 发现/ 服务/ 、/ 并/ 主动/ 按/ 需向/ 用户/ 提供/ 服务/ 的/ 能力/ 具有/ 更/ 高/ 的/ 要求/ ./ 在/ 这方面/ ,/ SOCRADES/ 提出/ 了/ 一种/ 流/ 数据服务/ 发现/ 、/ 选取/ 及/ 按/ 需/ 提供/ 的/ 方法/ [/ 47/ ]/ ./ Thing/ -/ REST/ 在/ 流/ 数据服务/ 模型/ 的/ 基础/ 上/ 提出/ 了/ 一种/ mashup/ 基本/ 结构/ 来/ 生成/ 智能/ mashup/ 应用/ [/ 45/ ]/ ,/ 但/ 其/ 表达能力/ 未见/ 评测/ ./ 从/ 上述/ 内容/ 可见/ ,/ 当前/ 研究/ 还/ 比较/ 初步/ ,/ 未来/ 应对/ 传统/ 服务/ 编程/ 的/ 方法/ 加以改进/ ,/ 使/ 其/ 符合/ 流/ 数据服务/ 自身/ 的/ 特点/ 并/ 满足/ 流/ 数据/ 应用/ 特有/ 的/ 需求/ ./ 在/ 流/ 数据服务/ 的/ 托管/ 方面/ ,/ 亚马逊/ 的/ Kinesis/ 向/ 用户/ 提供/ 了/ 方便/ 的/ 客户端/ 库/ 以及/ RESTful/ 服务/ 编程/ 接口/ 来/ 收集/ 、/ 分析/ 由/ 应用程序/ 产生/ 的/ 数据流/ ,/ 用户/ 无需/ 自行/ 运/ 维和/ 搭建/ 流/ 数据处理/ 基础设施/ ①/ ./ GoogleBigQuery/ ②/ 以及/ GooglePredictiveAPI/ ③/ 也/ 是/ 一类/ 流/ 数据/ 定制/ 化/ 服务/ ,/ 用户/ 无需/ 搭建/ 流/ 数据处理系统/ ,/ 即/ 可以/ 每秒/ 10/ 万条/ 记录/ 的/ 速率/ 发送数据/ 到/ 指定/ 接口/ 并/ 进行/ 实时/ 查询/ 及/ 分析/ ./ 多/ 租户/ 共享/ 的/ 服务/ 使用/ 模式/ 下/ ,/ 流/ 数据/ 规模/ 和/ 速度/ 具有/ 突出/ 的/ 动态变化/ 性/ ,/ 因此/ ,/ 流/ 数据服务/ 托管/ 面临/ 的/ 主要/ 挑战/ 是/ 不可/ 预测/ 及/ 动态变化/ 的/ 负载/ ./ 解决/ 此/ 问题/ 的/ 关键/ 是/ 应用/ 和/ 服务/ 的/ 可伸缩性/ 保障/ ,/ 使/ 其/ 能够/ 灵活/ 地/ 伸缩/ ,/ 避免/ 系统/ 瓶颈/ 并/ 提高/ 资源/ 利用率/ ./ 相关/ 研究/ 问题/ 及/ 现状/ 的/ 分析/ 在/ 下节/ 进行/ 介绍/ ./ 3.4/ 可伸缩性/ 保障/ 可伸缩性/ (/ scalability/ )/ 是/ 云/ 计算环境/ 下/ 支持/ 多/ 租户/ 共享/ 的/ 应用/ 或/ 服务/ 重要/ 的/ 度量/ 指标/ ./ 一个/ 可/ 伸缩/ 的/ 应用/ 或/ 服务/ 意味着/ 负载/ 变化/ 后/ ,/ 还/ 能够/ 在/ 保障/ 一定/ 服务质量/ 的/ 前提/ 下/ 正常/ 提供/ 服务/ ./ 流/ 数据处理/ 领域/ 对于/ 可伸缩性/ 的/ 研究/ 可/ 分为/ 集中式/ 和/ 分布式/ 两类/ ./ 在/ 集中式/ 环境/ 下/ ,/ 受/ 计算/ 和/ 内存/ 资源/ 的/ 限制/ ,/ 可以/ 通过/ 算子/ 重新/ 排序/ (/ reordering/ )/ 、/ 负载/ 降载/ (/ loadshedding/ )/ 以及/ 延期/ 处理/ (/ deferredprocessing/ )/ 等/ 方法/ 来/ 提供/ 可伸缩性/ [/ 52/ ]/ ./ 由于/ 流/ 数据/ 的/ 到达/ 速率/ 和/ 用户/ 需求/ 的/ 多变性/ 以及/ 单个/ 服务器/ 计算资源/ 的/ 有限性/ ,/ 单个/ 服务器/ 往往/ 无法/ 完成/ 大规模/ 流/ 数据/ 的/ 处理/ ./ 很多/ 研究/ 开始/ 考虑/ 在/ 云/ 环境/ 上/ 处理/ 流/ 数据/ [/ 53/ -/ 54/ ]/ ,/ 利用/ 云/ 基础设施/ 基于/ 虚拟化/ 技术/ 动态/ 管理/ 和/ 扩展/ 节点/ 的/ 能力/ ,/ 为/ 处理/ 任务/ 按需分配/ 计算资源/ ,/ 应/ 对流/ 数据/ 规模/ 和/ 速率/ 的/ 剧增/ ./ 当前/ 面向/ 大规模/ 流/ 数据/ 的/ 流/ 数据处理系统/ 或/ 中间件/ ,/ 如/ S4/ [/ 55/ ]/ 、/ Storm/ ④/ 、/ StreamCloud/ [/ 56/ ]/ 、/ Esc/ [/ 57/ ]/ 、/ MillWheel/ [/ 58/ ]/ 、/ SparkStreaming/ [/ 50/ ]/ 、/ SEEP/ [/ 59/ ]/ 、/ ChronoStream/ [/ 60/ ]/ 、/ Samza/ ⑤/ 以及/ TimeStream/ [/ 61/ ]/ 等/ 都/ 建立/ 在/ 可/ 动态/ 管理/ 和/ 扩展/ 节点/ 的/ 云/ 基础设施/ 之上/ ./ 算子/ 放置/ 技术/ 与/ 数据/ 并行/ 化/ 处理/ 技术/ 是/ 保障/ 基于/ 云/ 计算/ 的/ 流/ 数据服务/ 可伸缩性/ 的/ 关键技术/ ,/ 其中/ ,/ 数据/ 并行/ 化/ 被/ 认为/ 是/ 基于/ 云/ 计算/ 的/ 流/ 数据处理系统/ 的/ 主要/ 特征/ [/ 13/ ]/ ./ 下面/ 结合/ 学术界/ 及/ 工业界/ 的/ 实际/ 系统/ 及/ 研究/ 对/ 其/ 进行/ 分析/ ./ 流/ 数据处理/ DAG/ 中/ 的/ 逻辑/ 算子/ 可能/ 根据/ 其/ 资源/ 的/ 需求/ 情况/ 部署/ 在/ 多个/ 节点/ 上/ ,/ 图/ 5/ 是/ 一个/ 云/ 计算环境/ 下/ 处理/ 任务/ (/ 算子/ )/ 的/ 部署/ 示意图/ ,/ 其中/ 一个/ 虚拟/ 节点/ 上/ 可/ 注册/ 多个/ 资源/ 容器/ ,/ 一个/ 逻辑/ 算子/ 可/ 部署/ 到/ 多个/ 资源/ 容器/ 中/ ./ 图中/ 虚/ 线框/ 中/ 的/ 逻辑/ 算子/ v6/ 部署/ 在/ 多个/ 虚拟机/ 节点/ n1/ 和/ n2/ 中/ ./ 针对/ 由/ 多个/ 处理/ 任务/ (/ 算子/ )/ 组成/ 的/ 流/ 数据处理/ 网络/ ,/ 在/ 云/ 计算环境/ 下/ ,/ 随着/ 计算/ 节点/ 的/ 增加/ ,/ 主要/ 通过/ 在/ 多个/ 节点/ 上/ 平衡/ 算子/ 的/ 分布/ 来/ 提供/ 伸缩性/ ,/ 其/ 关键问题/ 是/ 如何/ 进行/ 算子/ 的/ 放置/ (/ 或/ 布局/ )/ ,/ 以及/ 如何/ 在/ 不同/ 的/ 节点/ 上/ 进行/ 负载/ 均衡/ ./ 这/ 就是/ “/ 算子/ 放置/ (/ operatorplacement/ )/ ”/ 问题/ ./ 算子/ 放置/ 问题/ 是/ 指/ 将/ 处理/ 任务/ 的/ 一系列/ 算子/ 布局/ 在/ 一系列/ 的/ 节点/ 上/ 执行/ ,/ 并/ 在/ 满足/ 一定/ 约束条件/ 的/ 情况/ 下/ 达到/ 优化/ 目标/ ./ Lakshmanan/ 等/ 人/ [/ 62/ ]/ 将/ 现有/ 的/ 算子/ 放置/ 算法/ 从/ 体系结构/ 、/ 算法/ 结构/ 、/ 优化/ 目标/ 、/ 算子/ 层次/ 上/ 的/ 操作/ 、/ 动态/ 重/ 配置/ 等/ 5/ 个/ 维度/ 进行/ 了/ 分析/ 和/ 比较/ ./ 在/ 体系结构/ 上/ ,/ 分为/ 主从/ 式/ 、/ 分散式/ 以及/ 二者/ 混合/ 等/ 情况/ ,/ 当前/ ,/ 大多数/ 云/ 环境/ 下/ 的/ 流/ 数据处理系统/ 或/ 中间件/ ①/ ②/ ③/ ④/ ⑤/ Page11/ 采用/ 主从/ 式/ 体系结构/ 进行/ 资源/ 的/ 调度/ 来/ 平衡/ 算子/ 的/ 分布/ ./ 然而/ S4/ 采用/ 了/ 分散式/ 结构/ ,/ 由/ 各/ 对/ 等/ 节点/ 互相/ 协调/ 实现/ 资源/ 调度/ 分配/ ./ 在/ 算法/ 结构/ 上/ ,/ 有/ 中心/ 式/ 算法/ (/ 基于/ 全局/ 状态/ 信息/ 进行/ 决策/ )/ 、/ 分散式/ 算法/ (/ 基于/ 本地/ 资源/ 和/ 负载/ 信息/ 进行/ 决策/ )/ 两种/ ./ 在/ 优化/ 目标/ 上/ ,/ 可/ 分为/ 计算/ 负载/ 、/ 延迟/ 、/ 带宽/ 或/ 以上/ 几个/ 指标/ 的/ 混合/ 等/ 几种/ 情况/ ./ 在/ 算子/ 层次/ 的/ 操作/ 上/ ,/ 可/ 分析/ 是否/ 采取/ 算子/ 结果/ 重用/ 、/ 复制/ 等/ 机制/ 来/ 提升/ 处理/ 效率/ ./ 为/ 适应/ 网络/ 、/ 数据/ 或/ 处理/ 流程/ 等/ 的/ 变化/ ,/ 需要/ 对/ 算子/ 放置/ 进行/ 动态/ 的/ 重新配置/ ,/ 可/ 分为/ 离线/ 重/ 配置/ 以及/ 基于/ 当前工作/ 负载/ 进行/ 在线/ 重/ 配置/ 两种/ 情况/ ./ 除/ Lakshmanan/ 等/ 人/ 提到/ 的/ 工作/ 之外/ ,/ 最近/ 出现/ 的/ 关于/ 算子/ 放置/ 算法/ 的/ 研究/ 包括/ SODA/ [/ 63/ ]/ 、/ SQPR/ [/ 64/ ]/ 、/ 面向/ Storm/ 的/ 适应性/ 调度/ 机制/ [/ 65/ ]/ 以及/ Twitter/ 公司/ 的/ 流/ 处理/ 系统/ Heron/ [/ 66/ ]/ 等/ ,/ 其/ 主要/ 进展/ 在/ 算子/ 动态/ 重/ 配置/ 方面/ ./ 当前/ ,/ 越来越/ 多云/ 计算环境/ 下/ 的/ 流/ 数据处理系统/ 支持/ 在线/ 的/ 算子/ 重/ 配置/ ,/ 从而/ 可/ 根据/ 网络/ 、/ 数据/ 或/ 处理/ 流程/ 等/ 的/ 变化/ 灵活/ 地/ 扩展/ 资源/ 、/ 调整/ 资源分配/ ,/ 避免/ 系统/ 瓶颈/ 并/ 提高/ 资源/ 利用率/ ./ 因此/ ,/ 下面/ 着重/ 从/ 该/ 维度/ 对/ 它们/ 进行/ 分析/ ./ SODA/ [/ 63/ ]/ 以/ 满足/ 根据/ 任务/ 优先级/ 进行/ 区分/ 以及/ 最大化/ 资源/ 利用率/ 作为/ 优化/ 目标/ ,/ 通过/ 约束/ 优化/ 模型/ 及/ 启发式/ 混合/ 算法/ 求解/ 资源分配/ 的/ 问题/ ./ 在/ 动态/ 重/ 配置/ 方面/ ,/ SODA/ 采取/ 周期性/ 的/ 动态/ 调度/ 策略/ ,/ 可/ 进行/ 运行/ 时/ 的/ 适应性/ 算子/ 重/ 配置/ ,/ 并/ 在/ 每个/ 调度/ 周期/ 将/ 问题/ 分解/ 为/ 多个/ 阶段/ ,/ 每个/ 阶段/ 对应/ 一个/ 优化/ 模块/ ,/ 从而/ 提升/ 了/ 问题/ 的/ 求解/ 效率/ ./ 与/ SODA/ 不同/ ,/ SQPR/ [/ 64/ ]/ 在/ 新/ 的/ 任务/ 提交/ 时/ ,/ 只/ 对/ 那些/ 与/ 新/ 提交/ 的/ 任务/ 存在/ 资源共享/ 关系/ 的/ 算子/ 资源/ 进行/ 重新分配/ ,/ 因而/ 减少/ 了/ 算子/ 重/ 配置/ 的/ 开销/ ./ 文献/ [/ 65/ ]/ 中/ Storm/ 的/ 优化/ 目标/ 是/ 减少/ 节点/ 间/ 的/ 网络流量/ ,/ 在/ 动态/ 重/ 配置/ 方面/ ,/ 其/ 在线/ 调度/ 机制/ 考虑/ 运行/ 时/ 的/ 资源/ 约束/ ,/ 采用/ 约束/ 优化/ 模型/ 及/ 启发式/ 混合/ 算法/ 来/ 实现/ ./ 值得/ 指出/ 的/ 是/ ,/ Storm/ 对/ 每个/ worker/ (/ Storm/ 中/ 的/ 工作/ 进程/ ,/ 负责/ 执行/ 作业/ 的/ 一个/ 子集/ )/ 公平/ 对待/ 、/ 分配/ 同样/ 的/ 资源/ ,/ 但/ 事实上/ 每个/ worker/ 所需/ 资源/ 并不相同/ ,/ 因此/ 存在/ 为/ 算子/ 超量/ 申请/ 资源/ 的/ 问题/ ./ Twitter/ 最近/ 在/ Storm/ 基础/ 上/ 研发/ 了/ Heron/ [/ 66/ ]/ ,/ 一个/ worker/ 只/ 运行/ 一个/ 算子/ ,/ 可以/ 对/ 每个/ 算子/ 占用/ 的/ 资源/ 进行/ 不同/ 的/ 细粒度/ 配置/ ,/ 提高/ 了/ 资源/ 利用率/ ./ 这样/ 也/ 会/ 带来/ 新/ 的/ 问题/ ,/ 即/ 每个/ 作业/ 中/ worker/ 数目/ 增多/ 将会/ 导致/ 通信/ 端口/ 资源/ 不足/ ./ 为此/ ,/ Heron/ 对/ Storm/ 的/ 体系结构/ 进行/ 了/ 改进/ ,/ worker/ 之间/ 的/ 数据通信/ 不再/ 是/ 点对点/ 进行/ ,/ 而是/ 通过/ 本地/ 的/ 流/ 数据/ 管理器/ (/ StreamManager/ ,/ SM/ )/ 统一/ 路由/ ./ 这/ 使得/ 系统/ 在/ 提高/ 资源/ 利用率/ 的/ 同时/ ,/ 可伸缩性/ 不会/ 受到/ 大/ 的/ 影响/ ./ 针对/ 云/ 计算环境/ 下流/ 数据/ 的/ 高/ 吞吐/ 特性/ ,/ 当/ 每秒/ 需要/ 处理/ 的/ 流/ 数据/ 规模/ 较大/ 时/ ,/ 即使/ 将/ 算子/ 部署/ 在/ 多个/ 节点/ 上/ 执行/ ,/ 节点/ 上/ 的/ 单个/ 算子/ 也/ 将/ 成为/ 数据处理/ 的/ 瓶颈/ ./ 因此/ ,/ 在/ 算子/ 内部/ 进行/ 数据/ 并行/ 化/ (/ intraoperatorparallelism/ )/ 是/ 解决/ 此/ 问题/ 的/ 另/ 一/ 关键技术/ ./ 算子/ 内部/ 的/ 数据/ 并行/ 化将/ 持续/ 到达/ 的/ 流/ 数据/ 划分/ 为/ 并行/ 的/ 子/ 数据流/ ,/ 并/ 利用/ 并行/ 化/ 的/ 算子/ 来/ 处理/ 相应/ 的/ 子/ 数据流/ ,/ 可/ 在/ 负载/ 变化/ 时/ 提高/ 流/ 数据处理/ 的/ 吞吐量/ ./ 数据/ 并行/ 化/ 一般/ 按照/ 并行/ 化/ 是否/ 能够/ 在/ 运行/ 时/ 进行/ 调整/ 分为/ 静态/ 并行/ (/ staticallyparallelism/ )/ 和/ 动态/ 并行/ (/ dynamicallyparallelism/ )/ [/ 59/ ]/ 两类/ ./ 其中/ ,/ 静态/ 并行/ 在/ 应用/ 构建/ 时/ 设置/ ,/ 而/ 动态/ 并行/ 在/ 此基础/ 上/ 还/ 可以/ 在/ 应用/ 运行/ 时/ 动态/ 进行/ 调整/ ./ 如表/ 4/ 所示/ ,/ 静态/ 并行/ 需要/ 开发人员/ 在/ 部署/ 应用/ 时/ 了解/ 所有/ 算子/ 执行/ 需要/ 的/ 资源/ ,/ 这/ 依赖于/ 流/ 数据/ 的/ 到达/ 速率/ 以及/ 数据/ 的/ 分布/ 情况/ ./ 目前/ 较为/ 流行/ 的/ 流/ 数据处理系统/ S4/ 、/ Samza/ 和/ SparkStreaming/ 等/ 都/ 支持/ 静态/ 并行/ (/ 注/ :/ 表/ 4/ 中/ 支持/ 动态/ 并行/ 的/ 流/ 数据处理系统/ 也/ 同时/ 支持/ 静态/ 并行/ )/ ./ 文献/ [/ 67/ ]/ 还/ 提出/ 了/ 一种/ 代价/ 模型/ 来/ 评价/ 静态/ 并行/ 的/ 数据/ 划分/ 带来/ 的/ 开销/ ./ 静态/ 并行/ 不/ 能够/ 根据/ 随时/ 变化/ 的/ 流/ 数据/ 到达/ 速率/ 以及/ 算子/ 执行/ 的/ 负载/ 情况/ 动态/ 地/ 修改/ 并行度/ (/ parallelismdegree/ )/ [/ 68/ ]/ ./ 流/ 数据处理/ 的/ 动态/ 并行/ 一般/ 通过/ 某种/ 监控/ 机制/ ,/ 能够/ 实时/ 发现/ 负载/ 过高/ 或/ 处在/ 瓶颈/ 期/ 的/ 算子/ ,/ 并/ 根据/ 系统/ 的/ 性能/ 和/ 算子/ 的/ 性质/ 制定/ 并行/ 策略/ ,/ 动态/ 地/ 调整/ 并行度/ ./ 文献/ [/ 35/ ]/ 提出/ 了/ 一种/ 一般化/ 的/ 动态/ 并行/ 模型/ —/ —/ —/ split/ -/ (/ process/ / )/ -/ merge/ 模型/ ,/ 该/ 模型/ 将/ 处于/ 瓶颈/ 的/ 算子/ 的/ 输入/ 数据流/ 利用/ split/ 操作/ 进行/ 划分/ ,/ 将/ 输出/ 的/ 数据流/ 结果/ 利用/ merge/ 操作/ 进行/ 合并/ ./ 制定/ 并行/ 策略/ 时/ 需要/ 考虑/ 的/ 问题/ 主要/ 有/ 算子/ 是否/ 适合/ 并行/ 化/ 、/ 最优/ 的/ 并行/ 化/ 级别/ 是/ 什么/ 以及/ 采用/ 哪/ 种/ 并行/ 化/ 技术/ (/ 例如/ 轮询/ 技术/ 、/ 哈希/ 技术/ 等/ )/ ./ 针对/ 流/ 数据处理/ 的/ 无/ 状态/ 算子/ 和/ 有/ 状态/ 算子/ ,/ 有/ 一些/ 动态数据/ 并行/ 化/ 的/ 工作/ 展开/ ./ 文献/ [/ 69/ -/ 71/ ]/ 采取/ 了/ 动态/ 并行度/ 的/ 概念/ ,/ 但是/ 仅仅/ 针对/ 无/ 状态/ 的/ 算子/ ,/ 或者/ 不/ 考虑/ 算子/ 的/ 状态/ ,/ 没有/ 涉及/ 有/ 状态/ 算子/ 的/ 正确性/ ./ 如表/ 4/ 所示/ ,/ Storm/ 、/ Esc/ 等/ 云/ 计算环境/ 下/ 的/ 流/ 数据处理/ 中间件/ 支持/ 针对/ 无/ 状态/ 算子/ 的/ 动态/ 并行/ 化/ 处理/ ./ 值得/ 指出/ 的/ 是/ ,/ Storm/ 虽然/ 支持/ 运行/ 过程/ 中/ 调整/ 并行度/ ,/ 但/ 需要/ 开发人员/ 或者/ 管理人员/ 的/ 介入/ ./ Page12/ 表/ 4/ 基于/ 数据/ 并行/ 化/ 的/ 可伸缩性/ 保障/ 方法/ 对比/ 实现/ 方法/ 技术/ 方案/ 优缺点/ 静态/ 并行/ 无/ 状态/ 动态/ 并行/ 有/ 状态/ 有/ 状态/ 的/ 算子/ 不/ 能够/ 简单/ 地/ 进行/ 划分/ 并行/ 化/ 和/ 合并/ ,/ 还/ 需/ 保障/ 状态/ 的/ 正确性/ ,/ 即能/ 保障/ 调整/ 前后/ 并行执行/ 的/ 正确性/ ./ 表/ 4/ 列出/ 了/ 支持/ 有/ 状态/ 算子/ 并行/ 化/ 处理/ 的/ 流/ 数据处理系统/ 或/ 中间件/ ,/ 包括/ 工业界/ 的/ TimeStream/ 、/ MillWheel/ 以及/ 学术界/ StreamCloud/ 、/ SEEP/ 等/ 工作/ ./ 涉及/ 有/ 状态/ 算子/ 的/ 并行/ 化/ 状态/ 正确性/ 的/ 保障/ 通常/ 可以/ 通过/ 状态/ 迁移/ 、/ 状态/ 共享/ 等/ 方式/ 实现/ ./ 状态/ 迁移/ 是/ 指/ 在/ 为/ 算子/ 添加/ 或/ 删除/ 节点/ 的/ 方式/ 实现/ 方案/ 转换/ 时/ ,/ 将/ 算子/ 的/ 状态/ 连同/ 算子/ 一同/ 迁移/ [/ 72/ ]/ ./ 状态/ 共享/ 通常/ 通过/ 共享/ 的/ 内存/ 来/ 实现/ 状态/ 的/ 共享/ ,/ 因此/ 需要/ 避免/ 共享/ 数据/ 的/ 竞态/ 条件/ [/ 24/ ]/ ./ 如何/ 减少/ 保障/ 正确性/ 带来/ 的/ 额外/ 开销/ 是/ 有/ 状态/ 算子/ 并行/ 化/ 解决方案/ 的/ 约束条件/ ./ 本质/ 上/ ,/ 状态/ 迁移/ 力求/ 在/ 负载/ 均衡/ 的/ 前提/ 下/ 最小化/ 迁移/ 成本/ ,/ 而/ 状态/ 共享/ 则/ 要求/ 在/ 正确/ 的/ 共享内存/ 管理/ 和/ 避免/ 竞态/ 条件/ (/ 如/ 通过/ 保证数据/ 不可/ 变/ 或/ 同步/ 访问/ )/ 的/ 前提/ 下/ 尽量减少/ 内存/ 占用/ [/ 24/ ,/ 73/ ]/ ./ 文献/ [/ 68/ ]/ 进一步/ 将/ 有/ 状态/ 并行/ 化/ 问题/ 理解/ 为/ 效益/ 问题/ (/ profitabilityproblem/ )/ ,/ 即/ 力求/ 以/ 尽可能/ 小/ 的/ 代价/ (/ 额外/ 的/ 资源/ 消耗/ 等/ )/ 获取/ 尽可能/ 大/ 的/ 效益/ (/ 正确性/ 保障/ 、/ 高/ 吞吐/ 、/ 低/ 延迟/ 等/ )/ ./ 解决/ 这一/ 问题/ 仍/ 面临/ 较大/ 挑战/ ./ TimeStream/ 、/ StreamCloud/ 和/ ChronoStream/ 等/ 工作/ 研究/ 了/ 透明/ 的/ 数据/ 并行/ 化/ 编程/ 模型/ 或流/ 数据处理/ 表达方式/ ,/ 使/ 数据/ 并行/ 化/ 细节/ 在/ 语法/ 和/ 语义上/ 对/ 开发人员/ 透明/ ,/ 以/ 减轻/ 开发人员/ 的/ 负担/ ,/ 这/ 也/ 是/ 流/ 数据处理/ 并行/ 化/ 不容忽视/ 的/ 研究/ 问题/ ./ 3.5/ 可靠性/ 保障/ 可靠性/ 保障/ 是/ 云/ 计算环境/ 下流/ 数据服务/ 及/ 应用/ 的/ 一项/ 基本/ 需求/ [/ 74/ -/ 75/ ]/ ./ 导致/ 流/ 处理/ 系统/ 不可/ 用/ 的/ 故障/ ,/ 按/ 其/ 影响/ 可/ 分为/ 如下/ 两类/ :/ (/ 1/ )/ 失效/ -/ 停止/ (/ fail/ -/ stop/ )/ 故障/ ,/ 表现/ 为/ 节点/ // 系统/ 的/ 数据处理/ 功能/ 停止/ ./ 这/ 一类/ 的/ 故障/ 出现/ 后/ ,/ 除非/ 存在/ 外/ 在/ (/ 人工/ 或者/ 非人工/ 的/ )/ 干预/ ,/ 数据处理/ 过程/ 无法/ 继续/ ;/ (/ 2/ )/ 瞬时/ 失效/ (/ transientunavailability/ )/ 故障/ ,/ 表现/ 为/ 节点/ 的/ 处理/ 并/ 不/ 停止/ ,/ 但/ 经常性/ 或/ 间歇性/ (/ 如/ 每/ 1min/ 或/ 每/ 10s/ )/ 出现/ 不/ 超过/ 10s/ 的/ 暂时/ 停滞/ [/ 76/ ]/ ./ 瞬时/ 失效/ 故障/ 源于/ 资源/ 竞争/ ,/ 计算资源/ (/ CPU/ 、/ 内存/ 和/ 带宽/ )/ 没有/ 被/ 处理/ 任务/ 合理/ 的/ 分配/ ./ 这类/ 故障/ 可/ 在/ 被/ 竞争/ 的/ 资源/ 释放/ 后/ 自动/ 恢复/ ./ 自/ 2009/ 年/ 开始/ ,/ 以/ IBM/ 的/ 工作/ 为/ 代表/ [/ 76/ -/ 77/ ]/ ,/ 这/ 类/ 研究/ 逐步/ 兴起/ ./ 在/ 云/ 计算环境/ 下/ ,/ 当/ 系统/ 扩展/ 处理/ 节点/ 的/ 数量/ 时/ ,/ 也/ 增加/ 了/ 因为/ 某一/ 节点/ 的/ 失效/ 导致系统/ 整体/ 受到/ 影响/ 的/ 风险/ [/ 75/ ]/ ./ 当前/ 许多/ 流/ 数据处理系统/ ,/ 如/ HOP/ [/ 78/ ]/ 和/ S4/ ,/ 假设/ 数据/ 丢失/ 和/ 结果/ 不/ 准确/ 是/ 可以/ 容忍/ 的/ ,/ 其/ 可靠性/ 保障/ 仅仅/ 是/ 重启/ 故障/ 的/ 节点/ 继续/ 进行/ 数据处理/ ./ 但是/ ,/ 这种/ 假设/ 在/ 实际/ 场景/ 下/ 并/ 不/ 总是/ 恰当/ ./ 例如/ ,/ 基于/ 流/ 数据/ 的/ 交通流量/ 和/ 旅行/ 时间/ 的/ 统计/ 业务/ ,/ 计算/ 中间/ 结果/ 作为/ 必要/ 的/ 状态/ 若/ 无法/ 恢复/ ,/ 势必/ 造成/ 恢复/ 时间/ 较长/ 的/ 滞留/ 或/ 恢复/ 后/ 结果/ 较大/ 的/ 误差/ [/ 79/ ]/ ./ 此外/ ,/ 由于/ 存在/ 内存/ 、/ 带宽/ 等/ 开销/ ,/ 可靠性/ 保障/ 在/ 系统/ 中/ 体现/ 为/ 处理/ 性能/ 与/ 保障/ 效果/ 的/ 折中/ ./ 在/ 高速/ 高/ 并发/ 的/ 应用/ 场景/ 下/ ,/ 流/ 数据/ 快速/ 到达/ 系统/ ,/ 一旦/ 某一/ 节点/ 出现/ 故障/ ,/ 不但/ 影响/ 甚至/ 中断/ 下游/ 的/ 数据/ 接收/ 和/ 处理/ ,/ 同时/ 导致/ 未能/ 传递/ 的/ 数据/ 迅速/ 积累/ ,/ 影响/ 上游/ 节点/ 的/ 处理过程/ ,/ 甚至/ 产生/ 连锁反应/ [/ 80/ ]/ ./ 为了/ 保证/ 在/ 故障/ 时/ 无/ 人工干预/ 也/ 可以/ 快速/ 地/ 恢复/ 数据处理/ ,/ 节点/ 的/ 被动/ 副本/ 、/ 主动/ 副本/ 及/ 上游/ 备份/ 等/ 策略/ 和/ 技术/ 在/ 当前/ 得到/ 了/ 广泛应用/ ./ 由于/ 具体/ 需求/ 不同/ ,/ 相关/ 策略/ 和/ 技术/ 意味着/ 不同/ 的/ 内存/ 、/ 带宽/ 等/ 开销/ ,/ 以及/ 恢复/ 延迟/ 和/ 恢复/ 后/ 结果/ 的/ 精确性/ ./ 例如/ ,/ 基于/ 被动/ 副本/ 的/ 故障/ 恢复/ ,/ 实际/ 是/ 以/ 增加/ 延迟/ 和/ 资源/ 开销/ 换取/ 系统可靠性/ [/ 77/ ]/ ./ 如表/ 5/ 所示/ ,/ 流/ 数据处理/ 的/ 可靠性/ 保障/ 通常/ 包表/ 5/ 云/ 计算环境/ 下/ 的/ 流/ 数据服务/ 可靠性/ 保障/ 方法/ 对比/ 分类/ 标准/ 运行/ 时/ 的/ 备份/ 方法/ 故障/ 时/ 的/ 恢复/ 目标/ Page13/ 括/ 运行/ 时/ 节点/ 备份/ 和/ 故障/ 时/ 节点/ 恢复/ 两个/ 阶段/ ,/ 可/ 将/ 系统/ 的/ 保障/ 技术/ 从/ 这/ 两个/ 维度/ 进行/ 分类/ ./ 一方面/ ,/ 从/ 运行/ 时/ 节点/ 备份/ 方法/ 的/ 角度/ 来看/ ,/ 流/ 数据服务/ 的/ 可靠性/ 保障/ 可以/ 分为/ 上游/ 备份/ 、/ 主动/ 备份/ 和/ 被动/ 备份/ 3/ 类/ :/ (/ 1/ )/ 上游/ 备份/ 在/ 上游/ 节点/ 保存/ 发送数据/ ,/ 优点/ 在于/ 实现/ 简单/ ,/ 运行/ 时/ 开销/ 小/ ,/ 但/ 存在/ 恢复/ 延迟/ 大/ 的/ 缺点/ [/ 81/ ]/ ;/ (/ 2/ )/ 主动/ 备份/ 的/ 副本/ 冗余/ 独立/ 运行/ ,/ 其/ 优点/ 在于/ 故障/ 后/ 备份/ 副本/ 可以/ 快速/ 地/ 切换/ 继续/ 处理/ ,/ 缺点/ 在于/ 系统/ 开销/ 要/ 增长/ 一倍/ 以上/ ./ 另外/ ,/ 备份/ 副本/ 的/ 状态/ 同步/ [/ 81/ ]/ 也/ 是/ 一个/ 挑战/ ,/ 特别/ 是/ 当/ 节点/ 存在/ 不确定性/ 操作/ (/ 如/ 随机化/ 抽样/ )/ 的/ 情况/ ;/ (/ 3/ )/ 被动/ 备份/ 是/ 主/ 副本/ 的/ 状态/ 增量/ 备份/ ,/ 优点/ 在于/ 运行/ 时/ 资源/ 开销/ 较/ 小/ 而且/ 可以/ 灵活/ 折中/ 保障/ 的/ 效果/ ;/ 缺点/ 在于/ 主/ 副本/ 故障/ 时/ 需要/ 重建/ 副本/ 状态/ ,/ 恢复/ 延迟/ 大/ ,/ 实现/ 也/ 较/ 复杂/ ./ 另一方面/ ,/ 从/ 故障/ 时/ 恢复/ 目标/ 的/ 角度/ 来看/ ,/ 流/ 数据服务/ 的/ 可靠性/ 保障/ 可以/ 分为/ 间隔/ 恢复/ 、/ 回滚/ 恢复/ 和/ 精确/ 恢复/ 3/ 类/ ./ (/ 1/ )/ 间隔/ 恢复/ 的/ 恢复/ 目标/ 最/ 弱/ ,/ 容忍/ 节点/ 恢复/ 后/ 的/ 数据/ 丢失/ ./ 这类/ 保障机制/ 在/ 许多/ 精确性/ 要求/ 不高/ 的/ 场景/ ,/ 如/ 基于/ 传感器/ 的/ 网络/ 监控/ 环境/ ,/ 有着/ 广泛应用/ ./ 由于/ 开销/ 小/ 和/ 实现/ 相对/ 简单/ 的/ 优点/ ,/ 也/ 应用/ 于/ 当前/ 许多/ 分布式/ 数据流/ 处理/ 系统/ ,/ 如/ HOP/ [/ 78/ ]/ 和/ S4/ [/ 55/ ]/ 等/ ;/ (/ 2/ )/ 回滚/ 恢复/ 相比/ 间隔/ 恢复/ ,/ 保证/ 了/ 节点/ 恢复/ 后/ 的/ 数据/ 不/ 丢失/ ./ 它/ 使得/ 故障/ 前后/ 输出/ 数据/ 等价/ ,/ 但/ 允许/ 故障/ 前/ 系统/ 已经/ 处理/ 的/ 数据/ 重复/ ,/ 故/ 适用/ 于/ 基于/ 条件/ 通知/ 的/ 应用/ ,/ 如/ 火警/ 、/ 资产/ 防盗/ 等/ 系统/ [/ 81/ ]/ ./ 为/ 达到/ 这个/ 目标/ ,/ 往往/ 需要/ 备份/ 上游/ 节点/ 的/ 输出/ 数据/ ,/ 重建/ 故障/ 节点/ 的/ 状态/ ;/ (/ 3/ )/ 精确/ 恢复/ 相比/ 回滚/ 恢复/ ,/ 保证/ 了/ 节点/ 恢复/ 后/ 的/ 数据/ 不/ 丢失/ 且/ 不/ 重复/ ,/ 适合/ 应用/ 在/ 数据/ 精确性/ 要求/ 较/ 高/ 的/ 应用/ ,/ 如实/ 时/ 的/ 金融/ 分析/ 和/ 军事/ 计算/ 等/ ./ 为/ 达到/ 这个/ 目标/ ,/ 需要/ 在/ 回滚/ 恢复/ 的/ 基础/ 上/ ,/ 从/ 欲/ 恢复/ 的/ 数据/ 中/ 移除/ 故障/ 前/ 系统/ 已经/ 确定/ 处理/ 的/ 数据/ ./ 相比而言/ ,/ 精确/ 恢复/ 的/ 开销/ 最大/ ,/ 恢复/ 延迟/ 最长/ ./ 3/ 种/ 备份/ 方法/ 和/ 恢复/ 目标/ 有着/ 各自/ 的/ 优点/ 、/ 缺点/ 和/ 适用/ 场景/ ,/ 恰好/ 体现/ 了/ 不同/ 的/ 可靠性/ 需求/ 和/ 对/ 性能/ 和/ 开销/ 的/ 不同/ 程度/ 的/ 折中/ ./ 在/ 实际/ 的/ 系统/ 中/ ,/ 由于/ 存在/ 多样/ 的/ 业务/ 需求/ 和/ 大量/ 处理/ 节点/ ,/ 系统/ 可能/ 需要/ 同时/ 实现/ 主动/ 备份/ 和/ 被动/ 备份/ [/ 76/ -/ 77/ ]/ ./ 事实上/ ,/ 同样/ 的/ 备份/ 方法/ 可以/ 实现/ 不同/ 的/ 恢复/ 目标/ ;/ 相同/ 的/ 恢复/ 目标/ 可以/ 通过/ 不同/ 的/ 备份/ 方法/ 实现/ ./ 例如/ ,/ Borealis/ [/ 82/ ]/ 采用/ 主动/ 备份/ 方法/ 实现/ 精确/ 恢复/ 目标/ ;/ S4/ [/ 55/ ]/ 采用/ 主动/ 备份/ 方法/ 实现/ 间隔/ 恢复/ 目标/ ;/ Flume/ ①/ 采用/ 主动/ 或/ 被动/ 的/ 备份/ 方法/ 实现/ 间隔/ 或/ 回滚/ 恢复/ 目标/ ;/ CLASP/ [/ 83/ ]/ 采用/ 主动/ 或/ 被动/ 的/ 备份/ 方法/ 实现/ 精确/ 恢复/ 目标/ ;/ Storm/ 采用/ 上游/ 备份/ 方法/ 实现/ 回滚/ 或/ 精确/ 恢复/ 目标/ 等/ ./ 3.6/ 评测/ 基准/ 评测/ 基准/ 是/ 可/ 用于/ 评测/ 、/ 比较/ 不同/ 系统/ 性能/ 的/ 规范/ ./ 评测/ 基准/ 用于/ 客观/ 、/ 全面/ 反映/ 具有/ 类似/ 功能/ 的/ 系统/ 之间/ 的/ 差异/ ./ 相较/ 于/ 大/ 数据处理/ 的/ 其他/ 技术/ ,/ 关于/ 基于/ 云/ 计算/ 的/ 流/ 数据处理系统/ 、/ 应用/ 和/ 服务/ 的/ 评测/ 基准/ 方面/ 还/ 存在/ 许多/ 亟待/ 研究/ 之处/ ./ 传统/ 的/ 数据管理/ 技术/ 如/ 数据库/ 处理/ ,/ 其/ 评测/ 基准/ 包含/ 度量/ 指标/ 、/ 模拟/ 数据/ 生成器/ 、/ 工作/ 负载/ 设定/ 、/ 审计/ 等/ 要素/ [/ 84/ ]/ ,/ 发展/ 已/ 相对/ 成熟/ 和/ 稳定/ ./ 流/ 数据处理/ 由于/ 各个/ 要素/ 普遍/ 缺乏/ 标准/ ,/ 评测/ 基准/ 还有/ 其/ 特殊性/ ./ 对于/ 流/ 数据处理/ ,/ 基准/ 测试/ 的/ 需求/ 在于/ 下述/ 方面/ ./ (/ 1/ )/ 广泛/ 的/ 评估/ 和/ 比较/ 流/ 计算/ 系统/ ./ 特别/ 是/ ,/ 除了/ 根据/ 传统/ 分布式系统/ 的/ 吞吐量/ 和/ 响应/ 时间/ 等/ 指标/ 评估/ 性能/ 之外/ ,/ 还/ 需要/ 评估/ 可用性/ 、/ 可伸缩性/ 等/ 关键/ 要素/ ;/ (/ 2/ )/ 评估/ 不同/ 数据/ 或/ 计算/ 特征/ 下/ 的/ 能力/ ./ 特别/ 是/ ,/ 除了/ 能够/ 根据/ 传统/ 平稳/ 运行/ 或/ 峰值/ 指标/ 评估/ 系统/ 能力/ ,/ 还/ 需要/ 针对/ 动态变化/ 的/ 负载/ (/ 例如/ 突发/ 数据/ 暴增/ )/ 评估/ 其/ 伸缩/ 能力/ ;/ (/ 3/ )/ 产生/ 不同/ 的/ 有/ 代表性/ 的/ 负载/ ./ 特别/ 是/ ,/ 与/ 传统/ 分布式系统/ 相比/ ,/ 基于/ 云/ 计算/ 的/ 流/ 数据处理系统/ 由于/ 面向/ 多个/ 不同/ 类别/ 的/ 租户/ 提供/ 服务/ ,/ 业务/ 需求/ 差异/ 大/ ,/ 缺乏/ 统一/ 的/ 具有/ 代表/ 意义/ 的/ 数据/ ,/ 故/ 难以/ 设计/ 普遍/ 适用/ 的/ 相对/ 公平/ 、/ 合理/ 的/ 负载/ ./ LinearRoadBenchmark/ (/ 简称/ LRB/ )/ 是/ 传统/ 流/ 数据处理/ 应用/ 非常/ 广泛/ 的/ 测试/ 基准/ ,/ 它/ 由/ Aurora/ 和/ STREAM/ 合作/ 设计/ [/ 85/ ]/ ./ LRB/ 是/ 一定/ 规模/ 的/ 车辆/ 在/ 一个/ 城市/ 的/ 多条/ 高速公路/ 上/ 行驶/ 时/ 的/ 位置/ 、/ 车速/ 等/ 数据/ ,/ 基于/ 这些/ 数据/ ,/ 可以/ 进行/ 计费/ 通知/ 、/ 事故/ 通知/ 、/ 旅行/ 时间/ 估计/ 等/ 查询/ ./ LRB/ 可用/ 来/ 测试/ 不同/ 系统/ 执行/ 这些/ 查询/ 时/ 的/ 性能/ ./ 近年来/ 大/ 数据/ 的/ 繁荣/ 带来/ 了/ 相关/ 评测/ 基准/ 的/ 发展/ ./ HiBench/ [/ 86/ ]/ 针对/ Hadoop/ 海量/ 数据处理/ ,/ 其中/ 包含/ 了/ 7/ 个/ 测试/ 场景/ ,/ 使用/ 诸多/ 机器/ 学习/ 的/ 算法/ 作为/ 基准/ 程序/ ./ BigBench/ [/ 87/ ]/ 针对/ 端/ 对/ 端的/ 大/ 数据处理/ ,/ 其中/ 包含/ 了/ 丰富/ 的/ 业务/ 用例/ ,/ 借鉴/ 了/ TPC/ -/ DS/ 的/ 思想/ ,/ 使用/ 了/ 结构化/ 和/ 非/ 结构化/ 的/ 数据/ 产生/ 数据/ 负载/ ./ BigDataBench/ [/ 88/ ]/ 针对/ 生产/ 环境/ 下/ 的/ 业务/ ,/ 包含/ 6/ 组/ 真实/ 数据/ 集/ 和/ 19/ 种/ 测试/ 场景/ ./ BerlinMOD/ [/ 89/ ]/ 针对/ ①/ Cloudera/ ./ FlumeDocumentation/ (/ v0/ ./ 9.3/ )/ ./ http/ :/ // // archive/ ./ Page14/ 连续/ 移动/ 对象/ 数据/ ,/ 给出/ 了/ 具有/ 代表性/ 的/ 数据/ 集/ ,/ 设计/ 可/ 扩展/ 的/ 查询/ 语句/ 作为/ 基准/ 程序/ ,/ 评估/ 查询处理/ 的/ 能力/ ./ 此外/ 许多/ 业界/ 知名/ 的/ 流/ 处理/ 系统/ ,/ 各自/ 完成/ 了/ 在/ 自身/ 适用/ 场景/ 下/ 的/ 专用/ 评测/ ,/ 并/ 给出/ 了/ 相关/ 技术/ 报告/ ./ 例如/ ,/ S4/ 给出/ 了/ 典型/ 的/ 基于/ 点击/ 事件/ 的/ 基准/ 程序/ 评估/ 自身/ 性能/ ;/ SparkStreaming/ 通过/ 典型/ 的/ 流/ 数据/ grep/ 运算/ 和/ 单词/ 计数/ 统计/ (/ wordcount/ )/ 作为/ 基准/ 程序/ ,/ 不仅/ 评估/ 了/ 自身/ 性能/ 还/ 给出/ 了/ 扩展性/ 和/ 容错/ 能力/ 指标/ ;/ 微软/ 的/ TimeStream/ [/ 61/ ]/ 使用/ 相异/ 计数/ (/ distinctcount/ )/ 和/ 推文/ (/ Tweets/ )/ 分析/ 作为/ 基准/ 程序/ ,/ 评估/ 了/ 自身/ 的/ 扩展性/ 和/ 容错/ 能力/ ./ 应该/ 看到/ ,/ 云/ 计算环境/ 下/ 针对/ 流/ 数据/ 评测/ 基准/ 的/ 工作/ 还/ 亟待/ 深入开展/ 相关/ 研究/ ./ 4/ 挑战/ 与/ 展望/ 流/ 数据处理/ 虽然/ 不是/ 一个/ 新/ 的/ 研究/ 领域/ ,/ 但/ 其/ 内涵/ 和/ 外延/ 已然/ 发生变化/ ./ 由于/ 物/ 联网/ 和/ 云/ 计算/ 的/ 兴起/ 和/ 发展/ ,/ 遍布/ 各/ 行业/ 的/ 传感/ 和/ 移动/ 设备/ 将/ 导致/ 流/ 数据/ 大/ 爆发/ ,/ 传统/ 的/ 流/ 数据处理/ 技术/ 面临/ 新/ 的/ 挑战/ ./ 以/ 交通/ 应用领域/ 为例/ ,/ 传统/ 的/ 流/ 数据处理/ 技术/ 在/ 面向/ 多个/ 区域/ 和/ 组织/ 提供/ 大规模/ 实时/ 交通/ 监控/ 及/ 管理/ 服务/ 时/ ,/ 在/ 支持/ 多/ 租户/ 共享/ 及/ 方便/ 的/ 交付/ 及/ 使用/ 模式/ 、/ 服务/ 的/ 实时性/ 、/ 可伸缩性/ 、/ 可靠性/ 等/ 方面/ ,/ 还有/ 大量/ 的/ 问题/ 有待/ 进一步/ 解决/ ./ 当前/ ,/ 云/ 计算环境/ 下/ 的/ 流/ 数据/ 的/ 集成/ 与/ 处理/ 技术/ 还/ 处于/ 起步/ 阶段/ ,/ 尤其/ 是从/ 服务/ 角度/ 研究/ 基于/ 云/ 计算/ 的/ 大规模/ 流/ 数据/ 集成/ 与/ 服务/ 的/ 工作/ 还/ 比较/ 少/ ,/ 未来/ 研究/ 工作/ 及/ 面临/ 的/ 主要/ 挑战/ 集中/ 在/ 以下/ 几个/ 方面/ :/ (/ 1/ )/ 流/ 数据服务/ 模型/ ./ 在/ 前面/ 的/ 分析/ 和/ 介绍/ 中/ 可以/ 看到/ ,/ 流/ 数据/ 与/ 传统/ 的/ 数据/ 有/ 很大/ 不同/ ,/ 流/ 数据/ 定制/ 化/ 服务/ 在/ 服务/ 的/ 抽象/ 和/ 建模/ 、/ 服务/ 编程/ 等/ 方面/ 还/ 面临/ 一些/ 挑战/ ./ 首先/ ,/ 现有/ 服务/ 抽象/ 模型/ 还/ 不/ 具备/ 对/ 大规模/ 、/ 实时/ 、/ 持续/ 不间断/ 、/ 多样化/ 和/ 多变/ 的/ 流/ 数据/ 访问/ 和/ 查询/ 进行/ 刻画/ 的/ 能力/ ./ 针对/ 此/ 问题/ ,/ 未来/ 关于/ 流/ 数据服务/ 抽象/ 模型/ 的/ 研究/ 一方面/ 要/ 在/ 底层/ 并行/ 流/ 数据/ 计算/ 框架/ 基础/ 上/ 屏蔽/ 大规模/ 数据处理/ 的/ 复杂性/ ,/ 另一方面/ 需要/ 能够/ 对流/ 数据/ 的/ 连续/ 查询/ 和/ 计算/ 进行/ 灵活/ 的/ 定制/ ,/ 从而/ 方便/ 服务/ 的/ 发现/ 和/ 使用/ ./ 其次/ ,/ 由于/ 流/ 数据服务/ 大多/ 是/ 基于/ 计算能力/ 有限/ 的/ 传感器/ 设备/ 提供/ 的/ ,/ 其/ 数量/ 多/ 、/ 变化/ 快/ ,/ 基于/ 流/ 数据服务/ 的/ 编程/ 方法/ 在/ 减小/ 服务/ 注册/ 及/ 发现/ 的/ 开销/ 、/ 增强/ 服务/ 发现/ 及/ 编程/ 的/ 动态性/ 、/ 对/ 情境/ 信息/ 变化/ 的/ 适应性/ 等/ 方面/ 面临/ 挑战/ ./ 未来/ 研究/ 可/ 在/ 流/ 数据服务/ 模型/ 的/ 基础/ 上/ ,/ 从流/ 数据服务/ 操作/ 算子/ 定义/ 及/ 执行/ 优化/ 等/ 方面/ 对/ 传统/ 服务/ 编程/ 的/ 方法/ 加以改进/ ,/ 使/ 其/ 符合/ 流/ 数据服务/ 自身/ 的/ 特点/ 并/ 满足/ 流/ 数据/ 应用/ 特有/ 的/ 需求/ ./ (/ 2/ )/ 基于/ 云/ 计算/ 的/ 流/ 数据服务/ 的/ 性能/ 优化/ 问题/ ./ 吞吐量/ 、/ 延迟/ 、/ 可伸缩性/ 等/ 是/ 衡量/ 大规模/ 流/ 数据服务/ 的/ 主要/ 非/ 功能属性/ ,/ 随着/ 流/ 数据/ 的/ 空前/ 爆发/ ,/ 高/ 吞吐/ 低/ 延迟/ 的/ 大规模/ 流/ 数据处理/ 是/ 当前/ 普遍/ 面临/ 的/ 挑战/ ./ 针对/ 大规模/ 的/ 流/ 数据处理/ 的/ 吞吐量/ 和/ 延迟时间/ 等/ 实时性/ 指标/ ,/ 首先/ ,/ 云/ 计算环境/ 下/ 与/ 特定/ 流/ 数据处理/ 操作/ 无关/ 的/ 优化/ 方法/ 是/ 未来/ 待/ 研究/ 的/ 方向/ ./ 例如/ ,/ 基于/ 集群/ 架构/ ,/ 将/ 数据/ 划分/ 并行/ 与/ 其他/ 多种/ 优化/ 手段/ 相结合/ ,/ 动态/ 优化/ 选取/ 不同/ 的/ 计算/ 模式/ 、/ 不同/ 的/ 优化/ 策略/ 及/ 算法/ ./ 此外/ ,/ 针对/ 大规模/ 流/ 数据/ 特定/ 操作/ (/ 例如/ 连接/ 查询/ 、/ 聚集/ 查询/ 等/ )/ ,/ 未来/ 可/ 研究/ 特定/ 的/ 分布式/ 并行/ 查询/ 优化/ 方法/ ./ 流/ 数据处理/ 还/ 应该/ 能够/ 适应/ 流/ 数据/ 规模/ 和/ 速度/ 的/ 动态变化/ ,/ 适应/ 不同/ 的/ 负载/ ./ 研究/ 适应性/ 的/ 大规模/ 流/ 数据处理/ 集群/ 构造/ 和/ 负载/ 均衡/ 算法/ ,/ 特别/ 是/ 针对/ 多/ 租户/ 共享/ 流/ 数据处理/ 基础设施/ 的/ 情况/ ,/ 支持/ 对/ 不同/ 类别/ 的/ 租户/ 应用/ 能够/ 适应性/ 地/ 进行/ 资源分配/ ./ 将/ 数据/ 划分/ 并行/ 与/ 可伸缩性/ 保障/ 技术/ 结合/ 起来/ ,/ 根据/ 负载/ 情况/ 动态/ 地/ 进行/ 流/ 数据/ 划分/ 和/ 并行执行/ ,/ 例如/ ,/ 动态/ 决定/ 划分/ 数目/ 、/ 进行/ 算子/ 资源分配/ 等/ ./ (/ 3/ )/ 基于/ 云/ 计算/ 的/ 流/ 数据服务/ 的/ 可靠性/ 保障/ 问题/ ./ 由于/ 流/ 数据处理/ 性能/ 的/ 提高/ 与/ 处理过程/ 的/ 可靠/ 之间/ 以及/ 处理过程/ 的/ 实时性/ 与/ 保障机制/ 产生/ 的/ 延迟/ 之间/ 存在/ 天然/ 的/ 矛盾/ ,/ 使得/ 大规模/ 流/ 数据处理/ 的/ 可靠性/ 保障/ 较/ 传统/ 分布式/ 数据/ 查询/ 面临/ 更大/ 的/ 挑战/ ./ 特别/ 是/ ,/ 如何/ 适应/ 云/ 计算环境/ 下/ 多变/ 的/ 负载/ 环境/ 、/ 支持/ 可/ 配置/ 、/ 满足/ 多种/ 需求/ 的/ 可靠性/ 保障/ ,/ 是/ 实现/ 基于/ 云/ 计算/ 的/ 流/ 数据服务/ 的/ 挑战/ 和/ 难点/ 所在/ ./ 未来/ 可/ 基于/ 分布式/ 的/ 集群/ 架构/ ,/ 重点/ 研究/ 如何/ 根据/ 业务/ 需求/ 、/ 节点/ 分布/ 及/ 负载/ 环境/ 的/ 特性/ ,/ 综合利用/ 不同/ 的/ 备份/ 方法/ 和/ 恢复/ 目标/ ,/ 降低/ 可靠性/ 保障/ 过程/ 的/ 系统/ 开销/ ,/ 应对/ 可靠性/ 保障/ 的/ 代价/ 矛盾/ ,/ 并/ 提高/ 对/ 动态/ 负载/ 环境/ 的/ 适应性/ ./ (/ 4/ )/ 云/ 计算环境/ 下流/ 数据/ 的/ 集成/ 与/ 服务/ 的/ 评测/ 基准/ ./ 针对/ 流/ 数据/ 的/ 评测/ 基准/ 存在/ 如下/ 挑战/ :/ 一方面/ ,/ 流/ 数据/ 上/ 的/ 操作/ 应用/ 相关性/ 强/ ,/ 普适性/ 相对/ 较弱/ ,/ 不/ 可能/ 设计/ 覆盖/ 所有/ 应用/ 或/ 场景/ 的/ 全面/ 的/ 基准/ 程序/ ./ 那么/ ,/ 如何/ 设计/ “/ 合理/ ”/ 的/ 基准/ 程序/ 是/ 具有/ 广泛/ 意义/ 的/ 难题/ ./ 另一方面/ ,/ 流/ 数据/ 是/ 一种/ 在线/ 数据/ 集/ ,/ 呈现/ 时间/ 具有/ 不/ 可逆/ 的/ 特征/ [/ 5/ ]/ ,/ 被/ 一次性/ 消费/ 而/ 难/ Page15/ 于/ 重放/ ./ 那么/ ,/ 如何/ 灵活/ 、/ 按/ 需/ 配置/ 流/ 数据/ 负载/ ,/ 使/ 之/ 适应/ 更/ 多/ 场景/ 的/ 基准/ 程序/ 和/ 系统/ ,/ 甚至/ 模拟/ 产生/ 数据/ 负载/ 的/ 暴增/ ,/ 评估/ 系统/ 的/ 可用性/ 和/ 扩展性/ 等/ 非/ 功能/ 保障/ 能力/ ,/ 也/ 是/ 极具/ 挑战/ 的/ 难题/ ./ 未来/ 可/ 面向/ 交通/ 等/ 领域/ 的/ 流/ 数据/ 应用/ 的/ 共性/ 需求/ ,/ 并/ 针对/ 可伸缩性/ 、/ 可用性/ 等/ 重要/ 指标/ ,/ 模拟/ 云/ 计算环境/ 下面/ 向/ 多/ 租户/ 应用/ 的/ 灵活/ 、/ 按/ 需/ 配置/ 的/ 流/ 数据/ 负载/ ,/ 研究/ 领域/ 相关/ 的/ 流/ 数据/ 基准/ 程序/ 及/ 数据/ 集/ ./ (/ 5/ )/ 基于/ 云/ 计算/ 的/ 流/ 数据/ 集成/ 与/ 服务/ 的/ 研发/ 与/ 应用/ ./ 由于/ 上述/ 挑战性/ 问题/ 的/ 存在/ ,/ 研发/ 流/ 数据/ 集成/ 与/ 服务/ 及其/ 应用/ 仍然/ 是/ 一项/ 具有/ 挑战性/ 的/ 工作/ ./ 北方工业大学/ 大规模/ 流/ 数据/ 集成/ 与/ 分析/ 技术/ 北京市/ 重点/ 实验室/ 已经/ 初步/ 研发/ 了/ 海量/ 交通/ 感知/ 数据/ 实时处理/ 平台/ 软件系统/ ,/ 并且/ 结合/ 北京/ 、/ 深圳/ 真实/ 的/ 城市道路/ 车辆/ 识别/ 数据/ 和/ 违法/ 车辆/ 甄别/ 及/ 交通流/ 计算/ 等/ 实际/ 应用/ 需求/ ,/ 进行/ 了/ 相关/ 研究成果/ 的/ 应用/ 验证/ ,/ 建立/ 了/ 海量/ 交通/ 感知/ 数据/ 实时处理/ 测试/ 基准/ 程序/ 、/ 数据/ 及用/ 例集/ (/ 数据量/ 达/ 100/ 亿/ 数据/ 记录/ ,/ 用例/ 包括/ 违章/ 车辆/ 实时/ 甄别/ 布控/ 、/ 实时/ 交通流/ 分析/ 、/ 车辆/ 数据/ 高效/ 查询/ 分析/ 等/ 3/ 类/ 业务/ 10/ 余个/ 用例/ )/ ./ 未来/ ,/ 将/ 针对/ 本文/ 上述/ 挑战性/ 问题/ ,/ 进一步/ 研发/ 面向/ 大规模/ 流/ 数据/ 的/ 云/ 服务平台/ DeCloud/ ./ DeCloud/ 拟/ 构建/ 在/ 支持/ 服务/ 使用/ 模式/ 的/ 云/ 计算/ 基础设施/ 上/ ,/ 支持/ 高/ 吞吐/ 、/ 低/ 延迟/ 的/ 流/ 数据/ 集成/ 与/ 处理/ ,/ 具有/ 容错性/ 和/ 动态/ 可/ 伸缩/ 的/ 能力/ ./ 其/ 设计/ 目标/ 具体/ 包括/ 支持/ 多种/ 异构/ 流/ 数据源/ 的/ 接入/ ,/ 支持/ 流/ 数据/ 的/ 实时/ 计算/ 以及/ 对/ 历史数据/ 的/ 离线/ 计算/ 及/ 查询/ ,/ 支持/ 流/ 数据/ 的/ 基本/ 查询/ 和/ 部分/ 高级/ 查询/ 操作/ ,/ 并/ 提供/ 对流/ 数据/ 丰富/ 灵活/ 、/ 面向/ 智能/ 交通/ 等/ 行业/ 多种类型/ 应用/ 的/ 定制/ 化/ 服务/ 等/ ./ 5/ 结束语/ 近年来/ ,/ 随着/ 感知/ 类/ 系统/ 深入/ 延伸/ 至/ 人类/ 的/ 日常生活/ ,/ 新/ 的/ 数据/ 在/ 源源不断/ 的/ 产生/ ,/ 流/ 数据/ 空前/ 爆发/ ./ 在/ 这种/ 背景/ 下/ ,/ 对/ 响应/ 时间/ 要求/ 比较/ 高/ 的/ 流/ 处理/ 类大/ 数据/ 应用/ 需求/ 也/ 越来越/ 普遍/ ,/ 传统/ 的/ 流/ 数据处理/ 技术/ 面临/ 新/ 的/ 挑战/ ./ 本文/ 从/ 如何/ 利用/ 云/ 计算/ 提升/ 流/ 数据处理/ 能力/ 以及/ 如何/ 利用/ 服务/ 提升/ 流/ 数据共享/ 能力/ 等/ 视角/ 出发/ ,/ 对/ 近几年/ 出现/ 的/ 基于/ 云/ 计算/ 的/ 大规模/ 流/ 数据/ 集成/ 与/ 服务/ 相关/ 研究成果/ 进行/ 了/ 归纳/ 阐述/ ,/ 归纳/ 了/ 大规模/ 流/ 数据/ 集成/ 与/ 服务/ 的/ 基本概念/ 和/ 一般/ 框架/ ./ 文中/ 着重/ 分析/ 了/ 大规模/ 流/ 数据/ 集成/ 、/ 流/ 数据/ 查询/ 操作/ 、/ 定制/ 化/ 服务/ 、/ 可伸缩性/ 保障/ 技术/ 、/ 可靠性/ 保障/ 技术/ 以及/ 相关/ 评测/ 基准/ 等/ 关键技术/ ,/ 还/ 对/ 基于/ 云/ 计算/ 的/ 大规模/ 流/ 数据/ 集成/ 与/ 服务/ 面临/ 的/ 新/ 挑战/ 进行/ 了/ 简要/ 阐述/ ,/ 对/ 我们/ 的/ 研发/ 工作/ 进行/ 了/ 展望/ ./ 云/ 计算环境/ 下/ 大规模/ 流/ 数据/ 集成/ 与/ 服务/ 的/ 研究/ 为/ 我们/ 带来/ 若干/ 亟待/ 突破/ 的/ 课题/ ,/ 其/ 研究成果/ 可以/ 直接/ 应用/ 于/ 智能/ 交通/ 、/ 电信/ 、/ 物流/ 、/ 互联网/ 、/ 物/ 联网/ 等/ 多个/ 领域/ ,/ 具有/ 重大/ 的/ 研究/ 价值/ 和/ 应用/ 价值/ ./ 

