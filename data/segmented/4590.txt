Page1/ 分布式/ 数据流/ 关系/ 查询/ 技术/ 研究/ (/ 中国人民大学/ 信息/ 学院/ 北京/ 100872/ )/ 摘要/ 随着/ 在线/ 分析/ 连续/ 数据流/ 的/ 需求/ 日益/ 增多/ ,/ 用于/ 实时处理/ 海量/ 、/ 易变/ 数据/ 的/ 数据流/ 管理系统/ 由此/ 产生/ ./ 大/ 数据/ 时代/ 下/ ,/ 随着/ 开放式/ 处理/ 平台/ 的/ 发展/ ,/ 为/ 处理/ 大规模/ 且/ 多样化/ 的/ 数据流/ ,/ 出现/ 了/ 若干/ 分布式/ 流/ 处理/ 系统/ ,/ 如/ S4/ 、/ Storm/ 、/ SparkStreaming/ 等/ ./ 然而/ ,/ 为/ 提升/ 处理/ 系统/ 的/ 易用性/ 和/ 处理/ 能力/ ,/ 需要/ 在/ 其/ 之上/ 构建/ 具有/ 抽象/ 查询语言/ 的/ 关系/ 查询/ 系统/ ,/ 以/ 构筑/ 完整/ 的/ 分布式/ 数据流/ 管理系统/ ./ 如何/ 设计/ 并/ 实现/ 高效/ 易用/ 的/ 关系/ 查询/ 系统/ 是/ 一个/ 亟待解决/ 的/ 问题/ ./ 文中/ 首先/ 概述/ 了/ 分布式/ 数据流/ 查询处理/ 的/ 典型/ 应用/ 、/ 数据/ 特征/ 和/ 实现目标/ ./ 进而/ ,/ 提出/ 了/ 分布式/ 数据流/ 关系/ 查询/ 系统/ 的/ 基础架构/ ,/ 并/ 基于/ 此/ 架构/ 深入分析/ 了/ 用户/ 自定义/ 函数/ 查询/ 、/ 查询/ 优化/ 、/ 驱动/ 方式/ 、/ 编译/ 技术/ 、/ 算子/ 管理/ 、/ 调度/ 管理/ 和/ 并行/ 管理/ 等/ 关键技术/ ./ 然后/ ,/ 对比/ 分析/ 了/ SPL/ 、/ StreamingSQL/ 、/ Squall/ 和/ DBToaster/ 这/ 4/ 种/ 具有/ 代表性/ 的/ 查询/ 系统/ 实例/ ./ 最后/ ,/ 指明/ 了/ 该/ 技术/ 在/ 优化/ 技术/ 、/ 执行/ 策略/ 、/ 实时/ 精准/ 查询/ 和/ 复杂/ 查询/ 分析/ 等/ 方面/ 所/ 面临/ 的/ 挑战/ 和/ 今后/ 的/ 研究/ 工作/ ./ 关键词/ 大/ 数据/ ;/ 数据流/ ;/ 流/ 处理/ 系统/ ;/ 流/ 查询/ 系统/ ;/ 关系/ 查询/ 技术/ 1/ 引言/ 近年来/ ,/ 随着/ 社交/ 网络/ 、/ 物/ 联网/ 和/ 移动/ 互联网/ 等/ 领域/ 的/ 快速/ 发展/ ,/ 数据量/ 呈/ 爆炸式/ 增长/ ,/ 大/ 数据/ 时代/ 已/ 真正/ 到来/ [/ 1/ -/ 3/ ]/ ./ 在/ 这些/ 应用/ 中/ ,/ 数据/ 变化/ 的/ 速度/ 越来越快/ ,/ 需要/ 处理/ 和/ 响应/ 的/ 时间/ 越来越/ 短/ ,/ 对大/ 数据/ 3V/ 特性/ [/ 4/ ]/ 中/ 的/ 高速性/ (/ velocity/ )/ 处理/ 便/ 显得/ 非常/ 重要/ ./ 因此/ ,/ 数据流/ 的/ 实时/ 分析/ 和/ 流式/ 处理/ 成为/ 当今/ 热点/ 研究/ 领域/ 之一/ ./ 21/ 世纪/ 初/ ,/ 学术界/ 开始/ 对/ 数据流/ 管理系统/ (/ DataStreamManagementSystem/ ,/ DSMS/ )/ 展开/ 研究/ 工作/ 表/ 1/ 数据库/ 管理系统/ 和/ 数据流/ 管理系统/ 对比/ 分析/ 数据库/ 管理系统/ 数据流/ 管理系统/ 大/ 数据/ 时代/ 下/ ,/ 出现/ 了/ 使用/ MapReduce/ [/ 8/ ]/ 编程/ 框架/ 的/ 分布式/ 数据库/ 管理系统/ ,/ 文献/ [/ 9/ ]/ 对/ 使用/ MapReduce/ 框架/ 的/ 关系/ 查询处理/ 语言/ 、/ 实现/ 的/ 算子/ 以及/ 系统/ 实例/ 等/ 整个/ 分布式/ 数据/ 管理系统/ 的/ 生态圈/ 进行/ 了/ 详实/ 的/ 综述/ 和/ 分析/ ./ 为/ 满足/ 数据流/ 海量/ 和/ 高速/ 等/ 特点/ 的/ 流式/ 处理/ ,/ 工业界/ 和/ 学术界/ 相继/ 出现/ 了/ 大量/ 的/ 分布式/ 数据流/ 处理/ 系统/ ,/ 如/ Yahoo/ !/ 的/ S4/ [/ 10/ ]/ 、/ Twitter/ 的/ Storm/ ①/ [/ 11/ ]/ 和/ 伯克利大学/ 的/ SparkStreaming/ ②/ 等/ ./ 目前/ 国内外/ 对/ 分布式/ 数据流/ 处理/ 的/ 相关/ 综述/ 文章/ 包括/ :/ 文献/ [/ 12/ ]/ 对大/ 数据流/ 处理/ 的/ 关键技术/ 和/ 流行/ 的/ 系统/ 实例/ 进行/ 了/ 分析/ ;/ 文献/ [/ 13/ ]/ 着重/ 关注/ 数据流/ 处理/ 系统/ 的/ 实现/ 技术/ ;/ 文献/ [/ 14/ ]/ 把/ 分布式/ 流/ 处理/ 系统/ 作为/ 一种/ 实时处理/ 的/ 内存/ 数据/ 管理系统/ 进行/ 了/ 说明/ ./ 然而/ ,/ 目前/ 的/ 分布式/ 数据流/ 处理/ 系统对/ 数据/ 的/ 查询/ 操作/ 需要/ 用户/ 编码/ 来/ 实现/ ,/ 系统/ 本身/ 未/ 提供/ 相应/ 的/ 查询语言/ ./ 因此/ ,/ 为/ 提高/ 处理/ 系统/ 的/ 易用性/ 和/ 处理/ 能力/ ,/ 增强/ 应用程序/ 的/ 可/ 重用/ 性/ 和/ 移植性/ ,/ 需在/ 处理/ 系统/ 之上/ 实现/ 具有/ 抽象/ 查询语言/ 的/ 关系/ 查询/ 系统/ ③/ ,/ 以/ 构筑/ 完整/ 的/ 分布式/ 数据流/ 管理系统/ ./ 本文/ 重点/ 分析/ 查询/ 系统/ 中/ 关于/ 关系/ 查询/ 技术/ ④/ 的/ 相关/ 研究/ 工作/ ./ 本文/ 第/ 2/ 节/ 总体/ 概述/ 分布式/ 数据流/ 查询处理/ 的/ 典型/ 应用/ 、/ 数据/ 特征/ 和/ 实现目标/ ;/ 第/ 3/ 节/ 提出/ 分布式/ 数据流/ 查询/ 技术/ 的/ 基础架构/ ,/ 并/ 基于/ 此/ 架构/ 深入分析/ 用户/ 自定义/ 函数/ 查询/ 、/ 查询/ 优化/ 、/ 驱动/ 方式/ 、/ 编译/ 技术/ 、/ 算子/ 管理/ 、/ 调度/ 管理/ 和/ 并行/ 管理/ 等/ 关键技术/ ;/ 并/ 推出/ 了/ 原型/ 系统/ ,/ 如/ Aurora/ [/ 5/ ]/ 、/ TelegraphCQ/ [/ 6/ ]/ 和/ STREAM/ [/ 7/ ]/ 等/ ./ 研究者/ 认为/ ,/ 数据流/ 的/ 产生/ 一般/ 通过/ 外部/ 资源/ 获取/ (/ 如/ 传感器/ 网络/ 等/ )/ ,/ 而/ 非人/ 为/ 主动/ 地/ 发出/ 数据/ ,/ 因此/ ,/ 数据流/ 管理系统/ 属于/ 系统/ 主动/ -/ 用户/ 被动/ (/ system/ -/ activehuman/ -/ passive/ )/ [/ 5/ ]/ 的/ 管理模式/ ./ 此外/ ,/ 数据流/ 管理系统/ 处理/ 的/ 数据/ 重点/ 是/ 按照/ 时间/ 排序/ 的/ 内存/ 数据/ ,/ 这/ 要求/ 系统/ 具有/ 序列化/ 的/ 访问/ 模式/ 和/ 实时/ 的/ 响应/ 时间/ ./ 并且/ ,/ 数据库/ 管理系统/ (/ DataBaseManagementSystem/ ,/ DBMS/ )/ 一般/ 提供/ 即席/ (/ ad/ -/ hoc/ )/ 查询/ 模式/ ,/ 而/ 数据流/ 管理系统/ 往往/ 针对/ 的/ 是/ 连续/ 查询/ (/ ContinuousQuery/ ,/ CQ/ )/ ./ 表/ 1/ 对/ 数据库/ 管理系统/ 和/ 数据流/ 管理系统/ 进行/ 了/ 对比/ 分析/ ./ 第/ 4/ 节/ 对比/ 分析/ 具有/ 代表性/ 的/ 数据流/ 查询/ 系统/ ;/ 第/ 5/ 节/ 指明/ 针对/ 优化/ 技术/ 、/ 执行/ 策略/ 、/ 实时/ 精准/ 查询/ 和/ 复杂/ 查询/ 分析/ 等/ 方面/ 所/ 面临/ 的/ 挑战/ 和/ 今后/ 的/ 研究/ 工作/ ./ 2/ 分布式/ 数据流/ 查询处理/ 概述/ 分布式/ 数据流/ 处理/ 系统/ 具有/ 查询/ 响应/ 时间/ 短/ 、/ 查询/ 精度高/ 、/ 可靠性/ 强/ 、/ 易于/ 扩展/ 和/ 使用/ 灵活/ 等/ 特点/ ./ 然而/ ,/ 数据流/ 往往/ 具有/ 监控/ 周期长/ 、/ 输入/ 速率/ 不/ 稳定/ 等/ 特征/ ./ 在/ 处理/ 系统/ 之上/ ,/ 如何/ 构建/ 高效/ 、/ 易用/ 的/ 查询/ 系统/ 是/ 满足用户/ 查询/ 需求/ 的/ 关键所在/ ./ 本节/ 列举/ 了/ 分布式/ 数据流/ 查询处理/ 的/ 典型/ 应用/ ,/ 分析/ 了/ 查询处理/ 中/ 分布式/ 数据流/ 的/ 特征/ ,/ 并/ 阐述/ 了/ 查询处理/ 的/ 相关/ 目标/ ./ 2.1/ 分布式/ 数据流/ 查询处理/ 的/ 典型/ 应用/ 分布式/ 数据流/ 处理/ 系统/ 的/ 应用/ 范围/ 较为/ 广泛/ ./ 如微博/ 、/ Twitter/ 等/ 社交/ 网站/ 提供/ 实时/ 搜索/ 博文/ 的/ 服务/ ;/ 移动/ 互联网/ 领域/ 提出/ 的/ 实时/ 监控/ 移动/ 宽带/ 业务/ 的/ 需求/ ;/ 金融/ 领域/ 针对/ 高频/ 交易/ 的/ 实时/ 分析/ 软件/ ;/ 以及/ 电子商务/ 领域/ 的/ 实时/ 推荐/ 系统/ 等/ ./ 随着/ 这些/ 应用/ 需求/ 的/ 不断/ 扩展/ ,/ 出现/ 了/ 相关/ 的/ 查询/ 系统/ ./ 如/ 洛桑/ 联邦/ 理工学院/ 数据/ 实验室/ 基于/ Storm/ ①/ ②/ ③/ ④/ Page3/ 推出/ 了/ 针对/ 实时/ 查询处理/ 的/ Squall/ ①/ 系统/ ;/ 文献/ [/ 15/ ]/ 为/ 提升/ Squall/ 连接/ 操作/ 的/ 扩展性/ 并/ 降低/ 数据/ 的/ 冗余度/ ,/ 推出/ 了/ BiStream/ 系统/ ;/ 以及/ 腾讯/ 公司/ 基于/ Storm/ 设计/ 的/ 实时/ 数据流/ 推荐/ 系统/ TencentRec/ [/ 16/ ]/ 等/ ./ 2.2/ 分布式/ 数据流/ 的/ 特征/ 为/ 确保/ 分布式/ 数据流/ 的/ 实时处理/ ,/ 需要/ 对/ 数据流/ 的/ 传输/ 和/ 模型/ 进行/ 说明/ ./ (/ 1/ )/ 数据流/ 传输/ ./ 为/ 保证/ 实时/ 、/ 完整/ 且/ 稳定/ 地/ 将/ 数据流/ 传输/ 到/ 处理/ 系统/ ,/ 一般/ 可/ 通过/ 消息/ 队列/ 和/ 网络/ Socket/ 传输/ 等/ 方法/ 完成/ ,/ 以/ 保证/ 将/ 数据/ 发送到/ 每台/ 物理/ 节点/ ,/ 为/ 数据处理/ 提供/ 保障/ ./ 利用/ 消息/ 队列/ 的/ 方式/ 进行/ 数据/ 采集/ 和/ 传输/ 是/ 较为/ 常用/ 的/ 一种/ 方法/ ,/ 常见/ 的/ 消息/ 队列/ 产品/ 有/ Facebook/ 的/ Scribe/ ②/ 、/ LinkedIn/ 的/ Kafka/ ③/ 和/ Cloudera/ 的/ Flume/ ④/ 等/ ./ (/ 2/ )/ 数据流/ 模型/ ./ 在/ 查询处理/ 过程/ 中/ ,/ 由于/ 数据流/ 的/ 来源/ 不同/ ,/ 需要/ 针对/ 不同/ 的/ 数据源/ 制定/ 不同/ 的/ 数据/ 样式/ ./ 一般来讲/ ,/ 通用/ 的/ 数据流/ 管理系统/ 支持/ 关系/ 型/ 数据模型/ ,/ 数据/ 定义语言/ 是/ 基于/ 关系/ 型/ 的/ 原子/ 类型/ ,/ 便于/ 以/ 属性/ 和/ 元组/ 的/ 形式/ 划分/ 和/ 发送数据/ ;/ 针对/ 特殊/ 领域/ 的/ 数据流/ 管理系统/ ,/ 可/ 根据/ 领域/ 数据/ 的/ 特点/ 设计/ 基于/ 对象/ 类型/ 的/ 复合/ 数据类型/ ./ 如/ 针对/ 传感器/ 网络/ 的/ COUGAR/ [/ 17/ ]/ 和/ 管理网络/ 数据传输/ 的/ Tribeca/ [/ 18/ ]/ 是/ 利用/ 复合/ 数据类型/ 构建/ 的/ 系统/ ./ 2.3/ 分布式/ 数据流/ 查询处理/ 的/ 目标/ 将/ 分布式/ 数据流/ 查询处理/ 集成/ 到/ 处理/ 系统/ 之上/ ,/ 可/ 便于/ 用户/ 灵活/ 地/ 调用/ 处理/ 系统/ 的/ 函数库/ ,/ 提高/ 处理/ 系统/ 的/ 易用性/ ./ 分布式/ 数据流/ 查询处理/ 需要/ 实现/ 的/ 目标/ 可/ 总结/ 为/ 以下几点/ :/ (/ 1/ )/ 声明/ 式/ 查询语言/ ./ 类似/ 于/ 基于/ Hadoop/ ⑤/ 构建/ 的/ Hive/ [/ 19/ ]/ 中/ 设计/ HiveQL/ 的/ 思想/ ,/ 在/ 数据流/ 处理/ 系统/ 之上/ 设计/ 的/ 查询/ 系统/ 需/ 支持/ 类似/ SQL/ 的/ 声明/ 式/ 描述语言/ ,/ 并/ 将/ 查询/ 计划/ 自动/ 编译成/ 处理/ 系统/ 的/ 工作/ 任务/ ./ 利用/ 查询/ 系统/ 提供/ 的/ 算子/ 库/ 可/ 降低/ 用户/ 使用/ 处理/ 系统/ 的/ 难度/ ,/ 提升/ 使用/ 效率/ ./ (/ 2/ )/ 查询/ 的/ 自适应性/ ./ 为/ 应对/ 分布式/ 数据流/ 传输速率/ 不/ 稳定/ 和/ 数据/ 动态/ 分布/ 等/ 特点/ ,/ 查询/ 系统/ 应/ 具有/ 自适应性/ ./ 可/ 根据/ 查询/ 算子/ 处理/ 数据流/ 的/ 时间/ 变化/ 、/ 查询/ 谓词/ 选择率/ 的/ 变化/ 以及/ 数据流/ 传输速率/ 的/ 变化/ ,/ 实现/ 查询/ 算子/ 的/ 动态/ 调度/ 和/ 自/ 适应/ 地/ 查询处理/ [/ 20/ ]/ ./ (/ 3/ )/ 查询/ 的/ 可扩展性/ ./ 为/ 快速/ 响应/ 查询/ 请求/ ,/ 查询/ 系统/ 需/ 支持/ 查询/ 算子/ 的/ 可扩展性/ ./ 设计/ 完备/ 的/ 可/ 扩展/ 策略/ ,/ 可/ 降低/ 分布式/ 处理/ 的/ 开销/ ,/ 提高/ 查询/ 性能/ ./ 可扩展性/ 策略/ 一般/ 涉及/ 到/ 两个/ 方面/ :/ ①/ 伸缩性/ ./ 可/ 根据/ 处理/ 数据流/ 数量/ 的/ 变化/ ,/ 动态/ 增减/ 处理/ 节点/ ;/ ②/ 有效性/ ./ 尽量/ 提高/ 新增/ 处理/ 节点/ 的/ 使用/ 效率/ ,/ 充分利用/ 集群/ 的/ 整体/ 资源/ ./ (/ 4/ )/ 查询/ 的/ 容错性/ ./ 查询/ 系统/ 的/ 查询/ 过程/ 中/ ,/ 一般/ 存在/ 两种/ 数据/ 丢失/ 的/ 现象/ ./ 一种/ 是/ 执行/ 过程/ 中/ 算子/ 状态/ 信息/ 的/ 数据/ 丢失/ ,/ 这种/ 数据/ 的/ 丢失/ 往往/ 通过/ 复制/ 算子/ 的/ 状态/ 信息/ 进行/ 容错/ 处理/ ;/ 另外/ 一种/ 是/ 分布式/ 环境/ 下/ 网络/ 传输/ 过程/ 中/ 的/ 数据/ 丢失/ ,/ 这种/ 情况/ 一般/ 通过/ 上游/ 备份/ [/ 21/ ]/ 和/ 主动/ 备份/ [/ 22/ ]/ 等/ 策略/ 进行/ 容错/ 处理/ ./ (/ 5/ )/ 查询/ 的/ 实时性/ ./ 由于/ 数据流/ 具有/ 不稳定性/ 和/ 易变性/ 等/ 特点/ ,/ 需要/ 实时/ 获取/ 查询/ 过程/ 的/ 中间/ 结果/ ./ 因此/ 可/ 根据/ 用户/ 接受/ 的/ 查询/ 延迟时间/ ,/ 设定/ 批量/ 处理/ 数据/ 的/ 大小/ [/ 23/ ]/ ,/ 将/ 查询/ 结果/ 分批/ 返回/ 给/ 用户/ ;/ 或者/ 可/ 引入/ 过程/ 调用/ 等/ 技术/ ,/ 将/ 运行/ 结果/ 实时/ 返回/ 给/ 用户/ ,/ 如/ 在/ Storm/ 中/ 引入/ 的/ 分布式/ 远程/ 过程/ 调用/ (/ DistributedRemoteProcedureCall/ ,/ DRPC/ )/ 技术/ ./ 3/ 分布式/ 数据流/ 查询/ 技术/ 研究/ 新型/ 的/ 分布式/ 数据流/ 处理/ 系统/ ,/ 提供/ 开放/ 的/ 编程/ 接口/ ,/ 可/ 为/ 用户/ 提供/ 丰富/ 的/ 计算资源/ ./ 然而/ ,/ 如何/ 高效/ 、/ 便捷/ 地/ 使用/ 处理/ 系统/ 提供/ 的/ 计算资源/ ,/ 是/ 设计/ 查询/ 系统/ 的/ 关键所在/ ./ 本节/ 首先/ 提出/ 分布式/ 数据流/ 查询/ 系统/ 的/ 基础架构/ ,/ 然后/ 重点/ 分析/ 用户/ 自定义/ 函数/ (/ UserDefinedFunction/ ,/ UDF/ )/ 查询/ 、/ 查询/ 优化/ 、/ 查询/ 驱动/ 方式/ 、/ 编译/ 技术/ 、/ 算子/ 管理/ 、/ 调度/ 管理/ 和/ 并行/ 管理/ 等/ 关键/ 的/ 查询/ 技术/ ./ 3.1/ 分布式/ 数据流/ 查询/ 系统/ 架构/ 分布式/ 数据流/ 处理/ 系统/ 具有/ 高/ 扩展性/ 、/ 高可用性/ 、/ 负载/ 均衡/ 和/ 容错/ 控制/ 等/ 特性/ ./ 因此/ ,/ 在/ 这种/ 开放式/ 处理/ 系统/ 之上/ 构建/ 的/ 分布式/ 数据流/ 查询/ 系统/ 不同于/ 传统/ 的/ 集中式/ 系统/ ./ 这/ 要求/ 系统/ 在/ 查询/ 优化/ 、/ 调度/ 管理/ 和/ 并行/ 管理/ 等/ 方面/ 要/ 有/ 满足/ 分布式/ 特征/ 的/ 架构/ 体系/ ./ 我们/ 归纳/ 总结/ 了/ 分布式/ 数据流/ 查询/ 系统/ 的/ 技术/ 要点/ ,/ 并/ 设计/ 了/ 基础架构/ ./ 如图/ 1/ 所示/ ,/ 该/ 架构/ 被/ 分为/ 5/ 个/ 方面/ ./ ①/ ②/ ③/ ④/ ⑤/ Page4/ 图/ 1/ 分布式/ 数据流/ 查询/ 系统/ 架构/ (/ 1/ )/ 用户/ 接口/ 层/ ./ 该层/ 负责/ 接收/ 用户/ 的/ 查询/ 请求/ ,/ 提供/ 统一/ 的/ 查询/ 接口/ ./ 即/ 制定/ 相应/ 的/ SQL/ 查询/ 标准/ ,/ 并/ 支持/ 用户/ 自定义/ 函数/ (/ UDF/ )/ 的/ 访问/ 模式/ 和/ 复杂/ 查询/ 过程/ 的/ 脚本/ 模式/ ,/ 以及/ 提供/ 图形化/ 的/ 访问/ 界面/ 等/ ./ (/ 2/ )/ 查询/ 解析/ 层/ ./ 根据/ 用户/ 接口/ 层/ 提交/ 的/ 查询/ 请求/ ,/ 进行/ 语法/ 和/ 语义/ 解析/ ./ 完成/ 词法/ 和/ 语法/ 的/ 解析/ 任务/ ,/ 生成/ 相应/ 的/ 逻辑/ 查询/ 计划/ 和/ 物理/ 查询/ 计划/ 并/ 对/ 其/ 进行/ 优化/ ./ 该层/ 还/ 提供/ 基于/ 查询处理/ 所/ 需/ 的/ 基础/ 算子/ 库/ ,/ 以及/ 根据/ 用户/ 需求/ 构建/ 的/ 用户/ 自定义/ 函数库/ ./ (/ 3/ )/ 查询/ 管理层/ ./ 控制/ 查询/ 系统/ 的/ 整体/ 流程/ ,/ 是/ 提升/ 查询/ 性能/ 的/ 关键/ 一层/ ./ 我们/ 将/ 该层/ 分为/ 5/ 个/ 模块/ :/ ①/ 查询/ 驱动/ 方式/ ./ 根据/ 查询/ 请求/ 制定/ 不同/ 的/ 查询/ 驱动/ 方式/ (/ 如/ 滑动/ 窗口/ 和/ 无/ 窗口/ 的/ 驱动/ 方式/ )/ ;/ ②/ 编译/ 技术/ ./ 根据/ 新型/ 的/ 硬件资源/ 特征/ 设计/ 的/ 查询/ 编译/ 框架/ 及其/ 优化/ 技术/ ;/ ③/ 算子/ 管理/ ./ 针对/ 分布式/ 环境/ 下有/ 向/ 无/ 环图/ (/ DirectedAcyclicGraph/ ,/ DAG/ )/ 的/ 处理/ 方式/ ,/ 需/ 根据/ 系统/ 性能/ 和/ 算子/ 状态/ 信息/ ,/ 设计/ 查询/ 系统/ 的/ 部署/ 和/ 维护/ 策略/ ,/ 以及/ 针对/ 多/ 查询处理/ 的/ 应用/ 场景/ 需/ 引入/ 算子/ 共享/ 机制/ ;/ ④/ 调度/ 管理/ ./ 为/ 满足/ 自适应性/ 的/ 查询/ 需求/ ,/ 对/ 查询/ 算子/ 和/ 数据流/ 需/ 进行/ 实时/ 的/ 调度/ 优化/ 和/ 动态/ 的/ 路由/ 决策/ ;/ ⑤/ 并行/ 管理/ ./ 在/ 分布式/ 环境/ 下/ ,/ 实现/ 针对/ 算子/ 和/ 数据流/ 的/ 划分/ 策略/ ,/ 以及/ 为/ 提升/ 处理/ 系统/ 的/ 性能/ ,/ 动态/ 设置/ 各个/ 处理/ 节点/ 的/ 并行度/ ./ (/ 4/ )/ 流/ 处理/ 系统/ 层/ ./ 完成/ 多/ 数据源/ 的/ 传输/ 和/ 查询/ 任务/ 的/ 执行/ ./ 处理/ 层/ 一般/ 利用/ ZooKeeper/ [/ 24/ ]/ 进行/ 协调/ 服务/ ./ 其中/ ,/ 数据流/ 传输/ 往往/ 通过/ 消息/ 队列/ 的/ 方式/ 实现/ (/ 详见/ 2.2/ 节/ )/ ./ 数据流/ 处理/ 系统/ 完成/ 执行/ 查询/ 任务/ 的/ 核心/ 功能/ ,/ 负责管理/ 集群/ 和/ 各个/ 处理单元/ ,/ 以及/ 系统/ 底层/ 的/ 负载/ 均衡/ 和/ 容错/ 控制/ 等/ ./ (/ 5/ )/ 全局/ 管理/ 模块/ ./ 负责/ 全局/ 数据/ 词典/ 的/ 维护/ 和/ 更新/ ,/ 并/ 实现/ 全局/ 查询处理/ 的/ 实时/ 监控/ 功能/ ,/ 以及/ 完成/ 整个/ 数据流/ 查询/ 系统/ 的/ 配置/ 信息/ 和/ 日志/ 管理/ 等/ 任务/ ./ 3.2/ 分布式/ 数据流/ 查询处理/ 关键技术/ 研究/ 通过/ 对/ 分布式/ 数据流/ 查询/ 系统/ 架构/ 的/ 分层/ 说明/ ,/ 我们/ 可/ 将/ 流/ 查询/ 系统/ 涉及/ 到/ 的/ 关键技术/ 归纳/ Page5/ 为/ :/ 关注/ 于/ 支持/ 复杂/ 任务分析/ 的/ 用户/ 自定义/ 函数/ (/ UDF/ )/ 查询/ 、/ 查询/ 解析/ 过程/ 中/ 的/ 查询/ 优化/ 、/ 驱动/ 方式/ 、/ 编译/ 技术/ 、/ 算子/ 管理/ 、/ 调度/ 管理/ 以及/ 针对/ 分布式/ shared/ -/ nothing/ 处理/ 框架/ 的/ 并行/ 管理/ 等/ ./ 3.2/ ./ 1/ 用户/ 自定义/ 函数/ 查询/ 用户/ 自定义/ 函数/ (/ UDF/ )/ 是/ 数据库/ 管理系统/ 可/ 扩展/ 的/ 高级/ 功能/ ,/ 允许/ 用户/ 通过/ 创建/ 存储/ 方法/ 将/ 复杂/ SQL/ 逻辑/ 封装/ 成/ 函数/ ,/ 便于/ 用户/ 使用/ ./ 用户/ 自定义/ 函数/ (/ UDF/ )/ 可/ 发挥/ 其/ 灵活/ 和/ 易用/ 的/ 特性/ ,/ 充分/ 提高/ 查询/ 系统/ 的/ 查询/ 效率/ 和/ 处理/ 能力/ ./ 用户/ 自定义/ 函数/ (/ UDF/ )/ 一般/ 有/ 3/ 种/ 类型/ :/ 标量/ UDF/ 、/ 源/ UDF/ 和/ 聚集/ UDF/ ./ 标量/ UDF/ 一般/ 利用/ 返回值/ 为/ 确定/ 类型/ 的/ 标量/ 函数/ 定义/ ,/ 用于/ 操作/ 数据库/ 中/ 的/ 标量/ 类型/ 值/ (/ 如/ 获取/ 子/ 字符串/ SUBSTR/ 的/ 标量/ 函数/ )/ ./ 源/ UDF/ 是/ 基于/ 已/ 存在/ 函数/ 的/ 扩展/ ,/ 一般/ 可/ 通过/ 系统/ 内置/ 函数/ 或/ 已/ 定义/ 的/ UDF/ 表示/ ./ 除了/ 可/ 利用/ 标量/ 函数/ 外/ ,/ 还/ 可/ 针对/ 数据表/ 的/ 列/ 进行/ 扩展/ 操作/ (/ 如/ SELECT/ 语句/ 中求/ 最大值/ MAX/ 的/ 列/ 操作/ )/ ./ 聚集/ UDF/ ,/ 又/ 称为/ 用户/ 自定义/ 聚集/ 函数/ (/ UserDefinedAggregation/ ,/ UDA/ )/ ,/ 是/ 在/ UDF/ 的/ 基础/ 上/ 增加/ 了/ 数据分析/ 和/ 挖掘/ 的/ 功能/ ./ UDA/ 往往/ 用于/ 决策支持系统/ ,/ 被/ 认为/ 是/ 数据库/ 高级/ 应用/ 的/ 关键所在/ ./ UDA/ 作用/ 范围/ 较广/ ,/ 除了/ 可/ 对/ 标量/ 类型/ 和/ 列/ 进行/ 操作/ 外/ ,/ 还/ 可/ 操作/ 整个/ 数据表/ 的/ 任意/ 列/ ./ 如/ IBMDB2/ 上/ 实现/ 的/ 高级/ 语言/ SADL/ [/ 25/ ]/ ,/ 可/ 支持/ 对/ 数据表/ 的/ 不同/ 类型/ 的/ 聚集/ 操作/ ./ 表/ 2/ 总结/ 了/ 各种/ UDF/ 的/ 应用/ 范围/ ./ 标量/ UDF/ 源/ UDFUDA/ 在/ 分布式/ 数据流/ 查询/ 系统/ 中/ ,/ 针对/ 数据流/ 动态/ 、/ 易/ 失和/ 非/ 确定/ 等/ 特点/ ,/ 文献/ [/ 26/ ]/ 提出/ 了/ 在/ 非/ 确定/ 数据/ 集上/ 支持/ UDF/ 的/ 通用/ 框架/ ,/ 并/ 通过/ 基于/ 高斯/ 过程/ [/ 27/ ]/ 的/ 学习/ 方法/ ,/ 计算/ 输出/ UDF/ 结果/ 的/ 近似/ 分布/ 情况/ ,/ 确保/ 查询/ 结果/ 的/ 错误/ 区间/ ./ 文献/ [/ 28/ ]/ 基于/ MapReduce/ 编程/ 模型/ ,/ 利用/ 数据/ 重排/ 的/ 方式/ 为/ 数据/ 划分/ 做/ 预处理/ ,/ 进一步/ 优化/ 了/ UDF/ 的/ 执行/ 效率/ ./ 文献/ [/ 29/ ]/ 构建/ 了/ UDA/ 的/ 执行/ 框架/ ,/ 重点/ 涉及/ 到/ 关于/ UDA/ 的/ 查询/ 优化/ 、/ 查询/ 重写/ 和/ 视图/ 维护/ 等/ 关键/ 流程/ ./ 文献/ [/ 30/ ]/ 解除/ 了/ UDF/ 中/ 包含/ 强制性/ 构建/ 函数/ (/ 如/ 条件/ 分支/ 、/ 循环/ 等/ )/ 的/ 相关性/ ,/ 允许/ 以/ 面向/ 集合/ 的/ 方式/ 执行/ 查询/ ./ 通过/ 将/ 嵌套/ 查询/ 重/ 写成/ 平面/ 查询/ 的/ 方法/ ,/ 生成/ 对应/ 的/ UDF/ 树/ ,/ 并/ 利用/ 转换规则/ 对/ 其/ 进行/ 优化/ ./ 通常/ 支持/ UDF/ 的/ 查询/ 系统/ 需要/ 构建/ 支持/ UDF/ 的/ 查询/ 分析器/ 和/ 函数库/ ,/ 再/ 根据/ UDF/ 的/ 查询处理/ 流程/ 生成/ 对应/ 的/ 查询/ 计划/ 和/ 执行/ 计划/ ./ 3.2/ ./ 2/ 查询/ 优化/ 查询/ 优化/ 是/ 查询处理/ 的/ 永恒/ 主题/ ,/ 针对/ 数据流/ 易变/ 的/ 特点/ ,/ 查询/ 系统/ 需要/ 快速/ 响应/ 用户/ 提交/ 的/ 查询/ 请求/ ./ 一般/ 的/ 优化/ 方法/ 分为/ 编译/ 时/ 的/ 静态/ 优化/ 和/ 运行/ 时/ 的/ 动态/ 优化/ ,/ 现/ 归纳如下/ :/ (/ 1/ )/ 静态/ 优化/ 静态/ 优化/ 可/ 分为/ 逻辑/ 优化/ 和/ 物理/ 优化/ 两种/ ./ ①/ 逻辑/ 优化/ ./ 一般/ 采用/ 基于/ 启发式/ 的/ 优化/ 规则/ ,/ 比如/ 优先/ 做/ 选择/ 和/ 投影/ 、/ 剪枝/ 优化/ 、/ 连接/ 条件/ 下推/ 等/ 规则/ ./ 在/ 分布式/ 环境/ 下/ ,/ 数据流/ 查询/ 系统/ 一般/ 均/ 支持/ 有/ 向/ 无/ 环图/ (/ DAG/ )/ 的/ 处理/ 模型/ ./ 此时/ ,/ 基于/ 规则/ 的/ 逻辑/ 优化/ 可/ 将/ 规则/ 转换器/ 传入/ 到/ 有/ 向/ 无/ 环图/ (/ DAG/ )/ 的/ 拓扑/ 结构/ 中/ 顺序/ 执行/ ,/ 通过/ 查询/ 重写/ 得到/ 优化/ 后/ 的/ 执行/ 计划/ ./ ②/ 物理/ 优化/ ./ 从/ 逻辑/ 计划/ 可以/ 派/ 生出/ 多个/ 物理/ 计划/ ,/ 物理/ 优化/ 器则/ 对/ 每个/ 物理/ 计划/ 进行/ 代价/ 估计/ ,/ 从而/ 选择/ 出/ 最小/ 估计/ 代价/ 的/ 物理/ 查询/ 计划/ ,/ 这种/ 代价/ 估计/ 往往/ 基于/ 数据分布/ 的/ 元/ 数据/ 信息/ ./ 在/ 分布式/ 环境/ 下/ ,/ 需要/ 利用/ 调度/ 器/ 协同/ 考虑/ 各/ 节点/ 的/ 计算能力/ ./ 在/ 流/ 应用/ 场景/ 中/ ,/ 数据分布/ 的/ 元/ 数据/ 信息/ 可以/ 根据/ 历史数据/ 的/ 信息/ 进行/ 估计/ (/ 如/ 算子/ 的/ 选择率/ 、/ 数据/ 流速/ 等/ )/ ./ 基于/ 这些/ 统计/ 信息/ ,/ 查询/ 优化/ 器/ 可以/ 估计/ 中间/ 结果/ 的/ 大小/ ./ 另外/ ,/ 基于/ 分布式/ 集群/ 中/ 各/ 节点/ 的/ 资源配置/ 情况/ ,/ 估算/ 出/ 不同/ 算子/ 在/ 不同/ 节点/ 上/ 的/ 执行/ 代价/ ./ (/ 2/ )/ 动态/ 优化/ ./ 数据流/ 是/ 源源不断/ 输入/ 的/ ,/ 数据分布/ 的/ 信息/ 难以预测/ 和/ 准确/ 估计/ ./ 由于/ 最优/ 查询/ 计划/ 的/ 代价/ 是/ 基于/ 查询/ 提交/ 时/ 获取/ 的/ 统计/ 信息/ 来/ 估算/ 的/ ,/ 但/ 这些/ 统计/ 信息/ 在/ 查询/ 执行/ 过程/ 中/ 往往/ 会/ 发生/ 改变/ ,/ 很/ 可能/ 导致/ “/ 最优/ ”/ 查询/ 计划/ 的/ 执行/ 代价/ 变得/ 很/ 高/ ./ 因此/ ,/ 在/ 查询/ 提交/ 时/ 由/ 优化/ 器/ 选中/ 的/ 查询/ 计划/ 很难/ 保证/ 在/ 整个/ 查询/ 执行/ 过程/ 中/ 都/ 是/ 最优/ 的/ ./ 这/ 就/ 需要/ 在/ 查询/ 执行/ 的/ 过程/ 中/ ,/ 动态/ 自/ 适应/ 地/ 优化/ 查询/ 执行/ 计划/ ./ 表/ 3/ 对比/ 分析/ 了/ 不同/ 的/ 查询/ 优化/ 技术/ ./ 关于/ 静态/ 优化/ 的/ 代表/ 技术/ ,/ 康奈尔大学/ 数据库/ 研究组/ 设计/ 了/ 基于/ 规则/ 的/ 多/ 查询/ 优化/ 框架/ RUMOR/ [/ 31/ ]/ ./ 该/ 框架/ 针对/ 多/ 查询/ 需要/ 共享/ 状态/ 和/ 计算/ 的/ 特点/ ,/ 扩展/ 了/ 基于/ 规则/ 的/ 查询/ 和/ 基于/ 查询/ 计划/ 的/ 处理/ 模型/ ./ 通过/ 将/ Page6/ 多个/ 流/ 扩展/ 并/ 映射/ 成/ 一个/ 信道/ (/ channel/ )/ 的/ 方法/ ,/ 利用/ 信道/ 表述/ 多/ 查询/ 的/ 优化/ 技术/ ,/ 并/ 基于/ 自动机/ 的/ 事件/ 监控/ 系统/ [/ 32/ ]/ 向/ 基于/ 关系/ 的/ 查询/ 系统/ 进行/ 转换/ ,/ 将/ 查询/ 系统/ 和/ 事件/ 监控/ 系统集成/ 到/ RUMOR/ 中/ ./ 文献/ [/ 33/ ]/ 提到/ 的/ 分布式/ 多/ 模型/ 优化/ 技术/ 综合/ 考虑/ 了/ 输出/ 率/ 和/ 计算/ 代价/ 两个/ 方面/ ,/ 并/ 设计/ 了/ 在/ 分布式/ 环境/ 下/ 分解/ 查询/ 计划/ 的/ 算法/ ,/ 进一步/ 提升/ 了/ 物理/ 优化/ 的/ 效果/ ./ 由于/ 数据流/ 不易/ 确定/ 表/ 的/ 基数/ ,/ 文献/ [/ 34/ ]/ 针对/ 选择/ 、/ 投影/ 、/ 连接/ 等/ 不同/ 算子/ 构建/ 基于/ 速率/ 的/ 代价/ 模型/ ,/ 并表/ 3/ 查询/ 优化/ 技术/ 静态/ 优化/ 动态/ 优化/ 3.2/ ./ 3/ 驱动/ 方式/ 根据/ 不同/ 区间/ 的/ 数据流/ 连续/ 查询/ ,/ 可/ 将/ 查询/ 驱动/ 方式/ 分为/ 滑动/ 窗口/ 类型/ 和/ 无/ 窗口/ 类型/ 两种/ ,/ 如图/ 2/ 所示/ ./ 滑动/ 窗口/ 将/ 无限/ 的/ 数据流/ 切/ 分成/ 若干/ 有限/ 子/ 数据流/ ,/ 每次/ 的/ 查询处理/ 仅/ 针对/ 当前/ 滑动/ 窗口/ 内/ 的/ 子/ 数据流/ ./ 一般/ 可/ 根据/ 用户/ 设定/ 的/ 时间/ 间隔/ 或/ 窗口/ 内/ 元组/ 数量/ 设定/ 滑动/ 窗口/ 的/ 大小/ ./ 除此之外/ ,/ CQL/ [/ 37/ ]/ 引入/ 了/ 基于/ 划分/ 的/ 滑动/ 窗口/ 、/ 序列/ 数据库/ SEQ/ [/ 38/ ]/ 设计/ 了/ 基于/ 属性/ 值/ 排序/ 的/ 划分/ 窗口/ 、/ 在/ Aurora/ [/ 5/ ]/ 系统/ 中/ 定义/ 了/ 翻转/ 窗口/ 等/ ./ 随着/ 数据流/ 挖掘/ 算法/ 的/ 深入研究/ 和/ 分布式/ 查询处理/ 能力/ 的/ 不断/ 提高/ ,/ 人们/ 需要/ 对/ 窗口/ 外/ 的/ 历史数据/ 进行/ 分析/ ,/ 而/ 基于/ 窗口/ 的/ 驱动/ 方式/ 不能/ 满足/ 这样/ 的/ 要求/ ./ 因此/ ,/ 需要/ 引入/ 无/ 窗口/ 的/ 处理/ 模式/ ./ 在/ 无/ 窗口/ 模式/ 下/ ,/ 对/ 全部/ 历史/ (/ full/ -/ history/ )/ 数据/ 有/ 两种/ 处以/ 最大/ 输出/ 速率/ 为/ 优化/ 目标/ 利用/ 启发式/ 规则/ 生成/ 优化/ 框架/ ./ 关于/ 动态/ 优化/ 的/ 代表/ 技术/ ,/ 文献/ [/ 35/ ]/ 在/ 辅助/ 系统/ 上/ 模拟/ 原始数据/ 流/ ,/ 用于/ 验证/ 优化/ 的/ 查询/ 计划/ ./ 在/ 保证/ 原始/ 查询/ 计划/ 可/ 正常/ 执行/ 的/ 基础/ 上/ ,/ 仅/ 将/ 已/ 验证/ 的/ 有效/ 查询/ 计划/ 迁移/ 到/ 主/ 系统/ ./ 文献/ [/ 36/ ]/ 针对/ 多个/ 连续/ 查询/ 设计/ 了/ 基于/ 共享/ 的/ 自/ 适应/ 优化/ 方案/ A/ -/ SEGO/ ./ 通过/ 设置/ 共享/ 连接/ 算子/ 的/ 代价/ 边界/ ,/ 可/ 从/ 不同/ 的/ 优化/ 策略/ 中/ 生成/ 全局/ 执行/ 计划/ ,/ 在/ 最优/ 执行/ 计划/ 和/ 执行/ 优化/ 的/ 处理/ 时间/ 上/ 寻求/ 平衡点/ ./ 理/ 方法/ ./ 一种/ 是/ 引入/ 衰减/ 因子/ 的/ 概念/ ,/ 即/ 数据流/ 中/ 越/ 陈旧/ 的/ 数据/ 对/ 整个/ 分析模型/ 的/ 影响/ 越小/ ./ 此类/ 处理/ 方法/ 往往/ 应用/ 于/ 数据流/ 的/ 挖掘/ 算法/ 中/ [/ 39/ -/ 41/ ]/ ./ 衰减/ 因子/ 还/ 可/ 分为/ 多项式/ 衰减/ [/ 42/ ]/ 、/ 指数/ 衰减/ 因子/ [/ 43/ ]/ 和/ 前/ 向/ 衰减/ 因子/ [/ 44/ ]/ 等/ ,/ 以/ 说明/ 历史数据/ 对/ 分析模型/ 的/ 影响/ 程度/ ./ 另/ 一种/ 是/ 随着/ 分布式/ 数据流/ 处理/ 系统/ 的/ 不断完善/ ,/ 以及/ 实时/ 监控/ 等/ 需求/ 的/ 发展/ ,/ 需要/ 对/ 全部/ 历史数据/ 给出/ 实时/ 精准/ 的/ 查询/ 结果/ ./ Squall/ ①/ 和/ BiStream/ [/ 15/ ]/ 对/ 实时/ 到来/ 的/ 数据流/ 进行/ 路由/ 选择/ 和/ 可/ 扩展/ 的/ 连接/ 查询/ ,/ 保证/ 查询/ 的/ 实时性/ 和/ 正确性/ ;/ DBToaster/ [/ 45/ ]/ 基于/ 敏捷/ 视图/ (/ agileview/ )/ [/ 46/ ]/ 的/ 方法/ ,/ 通过/ 递归/ 编译/ 的/ 思想/ 对/ 数据流/ 进行/ 增量/ 处理/ ,/ 以/ 获得/ 全部/ 历史数据/ 的/ 查询/ 结果/ ./ 可以/ 看出/ ,/ 对/ 不同/ 的/ 查询/ 需求/ 和/ 查询/ 系统/ 的/ 处理/ 能力/ ,/ 需要/ 在/ 控制/ 管理/ 阶段/ 选择/ 不同/ 的/ 查询/ 驱动/ 方式/ ./ 3.2/ ./ 4/ 编译/ 技术/ 为/ 满足/ 流/ 查询/ 系统/ 的/ 实时/ 快速/ 响应/ ,/ 在/ 考虑/ 查询/ 优化/ 和/ 调度/ 优化/ 的/ 同时/ ,/ 需/ 结合/ 先进/ 的/ 硬件/ 设施/ 和/ 编译/ 技术/ 进一步提高/ 查询/ 效率/ ./ 对于/ 以/ 计算/ 为/ 瓶颈/ 的/ 复杂/ 分析/ 任务/ (/ 如/ UDF/ 的/ 决策/ 支持/ 等/ )/ ,/ 需要/ 应对/ 较/ 高/ 的/ 查询/ 工作/ 负载/ ./ 这/ 需要/ 纵向/ 扩展/ 查询/ 系统/ 的/ 处理/ 能力/ ,/ 尽量/ 提高/ CPU/ 的/ 处理/ 效率/ ,/ 降低/ 指令/ 周期/ 的/ 处理/ 时间/ ./ 文献/ [/ 47/ ]/ 基于/ MonetDB/ 系统/ 设计/ 了/ 一种/ 基于/ 向量/ 处理/ 模型/ 的/ X100/ 查询/ 系统/ ./ 运用/ 块/ 处理/ 方式/ 提高/ 缓存/ 的/ 随机/ 读/ ①/ https/ :/ // // github/ ./ com/ // epfldata/ // squallPage7/ 写/ 效率/ ;/ 并且/ 为了/ 进一步提高/ CPU/ 的/ 吞吐量/ ,/ X100/ 可/ 将/ 整个/ 表达式/ 编译成/ 向量/ 原语/ ,/ 无需/ 单独/ 编译/ 各个/ 函数/ ./ 文献/ [/ 48/ ]/ 利用/ 与/ 语言/ 无关/ 的/ LLVM/ [/ 49/ ]/ 编译/ 框架/ ,/ 利用/ 将/ 查询/ 转换成/ 机器/ 代码/ 的/ 方法/ 进行/ 查询/ 优化/ ./ 并/ 以/ 数据/ 为/ 中心/ ,/ 将/ 待处理/ 的/ 数据/ 推向/ 不同/ 算子/ ./ 通过/ 利用/ 单指令/ 多/ 数据/ (/ SingleInstructionMultipleData/ ,/ SIMD/ )/ CPU/ 寄存器/ 实现/ 的/ 数据/ 扫描/ 方法/ [/ 50/ ]/ ,/ 可/ 在/ 同一/ 时刻/ 处理/ 多条/ 数据/ ,/ 从而/ 大大提高/ 查询/ 的/ 并行处理/ 能力/ ./ 除了/ 将/ 硬件/ 设施/ 和/ 编译/ 框架/ 结合/ 外/ ,/ 还/ 可/ 集成/ 优化/ 策略/ 和/ 编译/ 技术/ ./ 针对/ 流/ 查询处理/ 均/ 是/ 在/ 内存/ 中/ 进行/ 操作/ 的/ 特点/ ,/ 文献/ [/ 51/ ]/ 利用/ 基于/ 动态/ 划分/ 的/ 部分/ 分解/ 存储/ 模型/ (/ partiallydecomposedstoragemodel/ )/ [/ 52/ ]/ 和/ 及时/ (/ just/ -/ in/ -/ time/ )/ 编译/ 的/ 方法/ ,/ 在/ 节省/ 内存/ 带宽/ 的/ 同时/ ,/ 尽量/ 不/ 影响/ CPU/ 的/ 处理/ 能力/ ./ 文献/ [/ 53/ ]/ 设计/ 的/ LegoBase/ 查询/ 系统/ ,/ 利用/ 支持/ 运行/ 时/ 编译/ 和/ 代码生成/ 工具/ 的/ LMS/ [/ 54/ ]/ 框架/ ,/ 实现/ 了/ 高级/ 语言/ 和/ 生成式/ 程序/ 结合/ 的/ 优化/ 方案/ ./ Ahmad/ 和/ Koch/ 设计/ 的/ DBToaster/ 系统/ [/ 45/ ]/ 在/ 前端/ 利用/ LLVM/ [/ 49/ ]/ 编译/ 框架/ 生成/ LLVM/ 程序/ ,/ 在/ 后/ 端/ 利用/ LMS/ [/ 54/ ]/ 框架/ 递归/ 编译/ 增量/ 的/ 敏捷/ 视图/ ,/ 生成/ 相应/ 的/ C++/ 或/ Scala/ 函数/ ,/ 实现/ 对/ 数据流/ 的/ 高效/ 处理/ ./ 连接/ 算子/ Photon/ [/ 58/ ]/ 多数据流/ 等值/ 连接/ 表/ 4/ 连接/ 算子/ 对比/ 处理/ 方式/ 非/ 阻塞/ 的/ 元组/ 处理/ D/ -/ Streams/ [/ 59/ ]/ 多数据流/ θ/ 连接/ 阻塞/ 的/ 微/ 批次/ 处理/ TimeStream/ [/ 61/ ]/ 多数据流/ θ/ 连接/ 弹性/ 替代/ 和/ 依赖/ 追踪/ ATR/ // CTR/ [/ 62/ ]/ 多数据流/ θ/ 连接/ PSP/ [/ 63/ ]/ DYNAMIC/ [/ 64/ ]/ 多数据流/ θ/ 连接/ JB/ [/ 15/ ]/ 阻塞/ 的/ 批次/ 处理/ 、/ 非/ 阻塞/ 的/ 元组/ 处理/ 非/ 阻塞/ 的/ 元组/ 处理/ 非/ 阻塞/ 的/ 元组/ 处理/ 非/ 阻塞/ 的/ 元组/ 处理/ 非/ 阻塞/ 的/ 元组/ 处理/ Photon/ [/ 58/ ]/ 是/ 谷歌/ 公司/ 针对/ 连接/ 网络/ 查询/ 的/ 数据流/ 和/ 用户/ 点击/ 广告/ 的/ 数据流/ 而/ 设计/ 的/ ,/ 支持/ 两种/ 数据流/ 的/ 等值/ 连接/ 操作/ ,/ 通过/ 中心/ 协调/ 器/ 实现/ 多/ 数据中心/ 的/ 容错/ 和/ 扩展/ 连接/ ./ 其/ 利用/ 向/ 中心/ 协调/ 器/ 注册/ 查询/ 事件/ 的/ 方法/ 和/ 多/ 数据中心/ 的/ 分布式/ 架构/ 确保/ 数据/ 的/ 完备/ 性/ ,/ 并/ 采用/ 非/ 阻塞/ 的/ 方式/ 实时处理/ 新/ 到来/ 的/ 每条/ 元组/ ./ 但/ Photon/ 主要/ 处理事件/ ID/ 的/ 等值/ 3.2/ ./ 5/ 算子/ 管理/ 为/ 满足用户/ 的/ 不同/ 需求/ ,/ 在/ 分布式/ 环境/ 下/ ,/ 需要/ 对/ 算子/ 库中/ 的/ 算子/ 进行/ 高效/ 的/ 管理/ ,/ 以/ 提升/ 查询/ 的/ 效率/ ,/ 并/ 确保/ 查询/ 的/ 正确性/ ./ 为/ 实时/ 获取/ 最新/ 的/ 查询/ 结果/ ,/ 满足用户/ pay/ -/ as/ -/ you/ -/ go/ 的/ 计算/ 模型/ ,/ 文献/ [/ 55/ ]/ 在/ 处理/ 包含/ 状态/ 信息/ 的/ 算子/ 时/ (/ 如/ 连接/ 、/ 去/ 重/ 等/ 算子/ )/ ,/ 设计/ 了/ 具有/ 检查/ 、/ 备份/ 、/ 恢复/ 和/ 划分/ 等/ 功能/ 的/ 算子/ 模型/ ,/ 以/ 保证/ 查询/ 系统/ 具有/ 自动/ 扩展/ 虚拟机/ 数目/ 和/ 快速/ 容错/ 的/ 能力/ ./ 在/ 多/ 查询/ 的/ 应用/ 场景/ 下/ ,/ CQL/ [/ 37/ ]/ 通过/ 概要/ (/ synopses/ )/ 存储/ 中间状态/ 结果/ ,/ 用于/ 共享/ 算子/ 的/ 处理/ ./ SBON/ [/ 56/ ]/ 算法/ 利用网络/ 感知/ 的/ 算子/ 部署/ ,/ 自动检测/ 不同/ 查询/ 的/ 数据共享/ 和/ 算子/ 共享/ ,/ 提供/ 多/ 查询/ 优化/ 机制/ ./ 文献/ [/ 57/ ]/ 设计/ 的/ 共享/ 感知/ 的/ 中间件/ 技术/ ,/ 可/ 共享/ 多/ 查询/ 情况/ 下/ 的/ 算子/ 和/ 中间/ 结果/ ,/ 自/ 适应/ 地/ 调整/ 网络/ 间/ 的/ 查询/ 部署/ ,/ 提升/ 查询/ 效率/ ./ 在/ 分布式/ 数据流/ 查询/ 系统/ 中/ ,/ 针对/ 连接/ 算子/ 的/ 管理/ 最为/ 复杂/ ./ 实现/ 可/ 扩展/ 且/ 实时/ 的/ 连接/ 操作/ 是/ 一个/ 具有/ 挑战性/ 的/ 研究/ 问题/ ./ 如表/ 4/ 所示/ ,/ 我们/ 总结/ 了/ 目前/ 流行/ 的/ 分布式/ 数据流/ 在线/ 连接/ 算子/ 的/ 连接/ 类型/ 、/ 连接/ 模型/ 和/ 处理/ 方式/ 等/ 相关/ 特性/ ./ 连接/ ,/ 不/ 支持/ θ/ 连接/ 操作/ ./ D/ -/ Streams/ [/ 59/ ]/ 是/ SparkStreaming/ 定义/ 的/ 数据流/ 操作/ 对象/ ,/ 可/ 支持/ 多数据流/ 的/ θ/ 连接/ ./ 通过/ 转换/ (/ transformations/ )/ 操作/ ,/ 可/ 利用/ 底层/ Spark/ ①/ 提供/ 的/ RDD/ [/ 60/ ]/ 机制/ 确保/ 查询处理/ 的/ 正确性/ 和/ 容错性/ ./ ①/ http/ :/ // // spark/ -/ project/ ./ org/ // Page8D/ -/ Streams/ 是/ 将/ 若干/ 数据流/ 元组/ 以/ 阻塞/ 的/ 方式/ 构造/ 成/ 一系列/ 的/ 微/ 批次/ (/ mini/ -/ batch/ )/ 进行/ 处理/ ./ 这种/ 处理/ 方式/ 也/ 导致/ 了/ 某些/ 离散/ 的/ batch/ 存在/ 丢失/ 连接/ 元组/ 对/ 的/ 现象/ ,/ 从而/ 仅/ 可/ 获得/ 近似/ 的/ 查询/ 结果/ ./ TimeStream/ [/ 61/ ]/ 设计/ 的/ 弹性/ 替代/ (/ resilientsub/ -/ stitution/ )/ 和/ 依赖/ 追踪/ (/ dependencytracking/ )/ 机制/ ,/ 确保/ 了/ 数据流/ 计算/ 的/ 可信赖/ 性/ ./ 针对/ 任意/ 数据流/ 的/ θ/ 连接/ 操作/ ,/ 提供/ 了/ MapReduce/ 风格/ 的/ 批处理/ 和/ 非/ 阻塞/ 的/ 元组/ 处理/ 两种/ 方式/ ./ 但/ TimeStream/ 需要/ 维护/ 连接/ 状态/ 的/ 依赖/ 信息/ ,/ 通信/ 代价/ 较大/ ./ ATR/ // CTR/ [/ 62/ ]/ 是/ 应对/ 多个/ 窗口/ 数据流/ θ/ 连接/ 操作/ 设计/ 的/ 自/ 适应/ 负载/ 扩散/ 算法/ ./ 这/ 两个/ 算法/ 可/ 实现/ 保留/ 语义/ 的/ 元组/ 路由/ 的/ 功能/ ,/ 实现/ 细粒度/ 的/ 负载/ 均衡/ 和/ 连接/ 操作/ 的/ 正确性/ ./ 通过/ 主从/ 数据流/ 切换/ 的/ 一步/ (/ one/ -/ hop/ )/ 扩散/ 法/ 或/ 基于/ 路由表/ 的/ 多步/ (/ multi/ -/ hop/ )/ 扩散/ 法/ ,/ 可/ 支持/ 数据流/ 元组/ 至少/ 被/ 执行/ 一次/ 的/ 语义/ 保障/ ./ 但/ ATR/ // CTR/ 需要/ 控制/ 计算/ 重复/ 结果/ 的/ 开销/ ,/ 且/ 只能/ 处理/ 基于/ 窗口/ 模式/ 的/ 数据流/ 连接/ 操作/ ./ PSP/ [/ 63/ ]/ 设计/ 了/ 基于/ 时间/ 的/ 算子/ 状态/ 划分/ 环以/ 支持/ 多个/ 窗口/ 数据流/ θ/ 连接/ 操作/ ./ 流水线/ 状态/ 划分/ 技术/ 提供/ 了/ 每个/ 连接子/ 操作/ 的/ 状态/ 信息/ ,/ 将/ 连接/ 算子/ 拆/ 分成/ 若干/ 子/ 连接/ 算子/ 进行/ 操作/ ./ 但/ 维护/ 分布式/ 的/ 连接/ 状态/ 信息/ 增加/ 了/ 系统/ 的/ 通信/ 开销/ ,/ 且/ 该/ 操作/ 受限于/ 窗口/ 模式/ 下/ 的/ 数据流/ ./ 表/ 5/ 调度/ 策略/ 技术/ 基于/ 算子/ 和/ 数据/ 的/ 混合/ 调度/ 基于/ 算子/ 的/ 调度/ 策略/ 往往/ 通过/ 在/ 主控/ 节点/ 制定/ 服务质量/ (/ QoS/ )/ 指标/ [/ 65/ ]/ 、/ 路由/ 调度/ 算法/ [/ 66/ ]/ 和/ 监控/ 内存/ 消耗/ 情况/ [/ 67/ ]/ ,/ 以/ 更改/ 相应/ 的/ 算子/ 执行/ 顺序/ 和/ 对应/ 的/ 查询/ 计划/ ./ 基于/ 数据/ 的/ 调度/ 策略/ ,/ 以/ Juggle/ [/ 68/ ]/ 和/ Borealis/ [/ 69/ ]/ 为/ 代表/ 技术/ ./ Juggle/ 针对/ 感兴趣/ 的/ 元组/ 内容/ 信息/ ,/ 设计/ 了/ 重/ 排序/ (/ reorder/ )/ 算子/ ,/ 将/ 已/ 扫描/ 的/ 元组/ 重新/ 排序/ ./ Borealis/ 在/ Aurora/ [/ 5/ ]/ 的/ 基础/ 上/ ,/ 计算/ 每个/ 盒/ 处理器/ 的/ 平均/ 服务质量/ (/ QoS/ )/ 梯度/ 值/ ,/ 用于/ 重排/ 元组/ 的/ 执行/ 顺序/ ./ JuggleEddy/ 和/ 数据/ 的/ 混合/ 调度/ 策略/ 的/ 代表/ ,/ 其/ 根据/ 在线/ 查询处理/ 产生/ 的/ 部分/ 查询/ 结果/ ,/ 通过/ 计算/ 相关/ 元组/ 的/ 重要性/ 和/ 对应/ 算子/ 的/ 处理/ 时延/ ,/ 利用/ juggle/ 对/ 同一/ 数据/ DYNAMIC/ [/ 64/ ]/ 算子/ 支持/ 多个/ 数据流/ 的/ θ/ 连接/ 操作/ ,/ 使用/ 基于/ 矩阵/ 的/ 连接/ 模型/ join/ -/ matrix/ ,/ 冗余/ 存储/ 每个/ 子/ 处理单元/ 的/ 数据/ ,/ 并/ 采用/ 无/ 窗口/ 模式/ 下/ 的/ 非/ 阻塞/ 元组/ 处理/ 方式/ 以/ 实时/ 获取/ 正确/ 的/ 查询/ 结果/ ./ DYNAMIC/ 算子/ 设计/ 的/ 重组/ 器/ (/ reshuffler/ )/ 可/ 动态/ 设计/ 划分/ 样式/ ,/ 确保/ 最小化/ 的/ 数据/ 输入/ 装载/ 因子/ (/ input/ -/ loadfactor/ )/ ./ 但/ 该/ 算子/ 存储/ 的/ 数据/ 冗余度/ 较大/ ./ JB/ [/ 15/ ]/ 算子/ 利用/ 基于/ 完全/ 二部/ 图/ 概念/ 构建/ 的/ join/ -/ biclique/ 模型/ ,/ 将/ 集群/ 分成/ 两个/ 部分/ ./ JB/ 算子/ 可/ 支持/ 多个/ 数据流/ 的/ θ/ 连接/ 操作/ ,/ 并/ 支持/ 无/ 窗口/ 模式/ 下/ 的/ 非/ 阻塞/ 元组/ 处理/ 方式/ ,/ 还/ 可/ 根据/ θ/ 连接/ 操作/ 的/ 负载/ 程度/ 动态/ 扩展/ 处理单元/ 的/ 数量/ ./ 相对/ 于/ DYNAMIC/ 算子/ 使用/ 的/ join/ -/ matrix/ 模型/ 来讲/ ,/ JB/ 算子/ 使用/ 的/ join/ -/ biclique/ 模型/ 大幅/ 降低/ 了/ 数据备份/ 的/ 冗余度/ ,/ 提高/ 了/ 资源/ 利用率/ ./ 但/ 在/ 数据/ 分组/ 时/ JB/ 算子/ 利用/ 元组/ 内容/ 敏感性/ 的/ 混合/ 路由/ 策略/ ,/ 需要/ 人工干预/ 数据/ 分组/ 的/ 参数设置/ ./ 3.2/ ./ 6/ 调度/ 管理/ 分布式/ 数据流/ 查询/ 系统/ 中/ ,/ 一般/ 需要/ 根据/ 查询/ 算子/ 的/ 缓冲/ 队列/ 长度/ 、/ 查询/ 代价/ 和/ 选择率/ 等/ 方面/ 考虑/ 系统/ 的/ 调度/ 策略/ ./ 如表/ 5/ 所示/ ,/ 调度/ 优化/ 策略/ 可/ 分为/ 基于/ 算子/ 的/ 调度/ 、/ 基于/ 数据/ 的/ 调度/ 和/ 混合/ 调度/ 策略/ 等/ ./ 指定/ 查询/ 的/ QoS/ 指标/ [/ 65/ ]/ ,/ 动态/ 确定/ 算子/ 的/ 执行/ 顺序/ 通过/ 路由/ 调度/ ,/ 重排/ 算子/ 关系/ 并/ 更改/ 查询/ 计划/ 根据/ 运行/ 时/ 最小化/ 内存/ 的/ 需求/ ,/ 更改/ 算子/ 调度/ 策略/ 根据/ 关注/ 元组/ 内容/ 信息/ ,/ 将/ 已/ 扫描/ 的/ 元组/ 重新/ 排序/ 根据/ 元组/ 的/ QoS/ 值/ 和/ QoS/ 梯度/ ,/ 确定/ 元组/ 的/ 执行/ 顺序/ 根据/ 元组/ 的/ 重要性/ 和/ 算子/ 的/ 处理/ 时延/ ,/ 重/ 排序/ 元组/ 和/ 算子/ 关系/ 流中/ 的/ 中间/ 元组/ 进行/ 重新/ 排序/ ./ 并/ 结合/ Eddy/ 的/ 原理/ ,/ 通过/ 路由/ 调度/ 将/ 对应/ 算子/ 进行/ 重新/ 排序/ ,/ 以/ 达到/ 调度/ 优化/ 的/ 目的/ ./ 3.2/ ./ 7/ 并行/ 管理/ 为/ 实时处理/ 大量/ 数据流/ ,/ 提高/ 整个/ 分布式系统/ 的/ 处理/ 能力/ 和/ 吞吐量/ ,/ 需/ 划分/ 查询/ 任务/ 和/ 设定/ 处理单元/ 的/ 查询/ 粒度/ ./ 针对/ 数据流/ 处理/ 的/ 并发/ 性/ 来讲/ ,/ 存在/ 两种/ 划分/ 机制/ ./ 一种/ 是/ 划分/ 查询/ 执行/ 计划/ ;/ 另/ 一种/ 是/ 划分/ 输入/ 的/ 数据流/ ./ 文献/ [/ 71/ ]/ 是/ 基于/ Aurora/ 系统/ 实现/ 的/ 划分/ 查询/ 计划/ 的/ 分布式/ 划分/ 策略/ ./ 但/ 因为/ 存在/ 某些/ 占用/ 资源/ 较/ 多/ 和/ 耗时/ 较长/ 的/ 算子/ ,/ 导致/ 无法/ 生成/ 有效/ 的/ 执行/ Page9/ 计划/ ,/ 因此/ 划分/ 查询/ 执行/ 计划/ 的/ 方法/ 使用/ 较少/ ./ 较/ 常见/ 的/ 解决/ 方法/ 是/ 针对/ 不同/ 的/ 应用/ 需求/ ,/ 对/ 某些/ 负载/ 过重/ 的/ 算子/ 进行/ 划分/ ,/ 如/ 文献/ [/ 64/ ]/ 设计/ 的/ DYNAMIC/ 算子/ ,/ 可/ 对/ 算子/ 内部/ 进行/ 实时/ 自/ 适应/ 的/ 划分/ ,/ 确保/ 最少/ 的/ 状态/ 迁移开销/ ./ 基于/ 输入/ 数据流/ 划分/ 的/ 策略/ 是/ 应用/ 较/ 多/ 的/ 划分/ 方法/ ,/ 其/ 一般/ 可/ 分为/ 静态/ 划分/ 和/ 动态/ 划分/ 两种/ ./ 静态/ 划分/ 是/ 指/ 在/ 查询/ 编译/ 时/ 确定/ 具体/ 的/ 划分/ 码/ (/ 如图/ 3/ (/ a/ )/ 所示/ )/ ;/ 动态/ 划分/ 是/ 在/ 查询/ 执行/ 过程/ 中/ 根据/ 数据流/ 的/ 分布/ 和/ 关联/ 情况/ 动态/ 调整/ 划分/ 码/ (/ 如图/ 3/ (/ b/ )/ 所示/ )/ ,/ 减少/ 了/ 网络/ 开销/ ,/ 提高/ 了/ 查询/ 效率/ ./ AT&T/ 实验室/ 首先/ 提出/ 了/ 感知/ 查询/ 的/ 划分/ 方法/ [/ 72/ ]/ :/ 针对/ 具有/ 聚集/ 和/ 连接/ 操作/ 的/ 多/ 查询/ 来讲/ ,/ 根据/ 每个/ 查询/ 的/ 划图/ 3/ 数据/ 划分/ 策略/ 划分/ 后/ 的/ 数据/ 通过/ 处理/ 系统/ 计算/ 时/ ,/ 根据/ 数据量/ 的/ 多少/ 和/ 计算/ 的/ 复杂度/ ,/ 优化/ 算子/ 内部/ 的/ 并行度/ ,/ 并/ 对/ 各个/ 处理/ 节点/ 的/ 负载/ 进行/ 动态/ 调整/ ./ 文献/ [/ 76/ ]/ 以/ Storm/ 为/ 实验/ 平台/ ,/ 根据/ 有/ 向/ 无/ 环图/ (/ DAG/ )/ 中/ 不同/ bolt/ 的/ 处理/ 复杂度/ ,/ 动态/ 设定/ 其/ 并行处理/ 粒度/ ,/ 以/ 提升/ 查询/ 系统/ 的/ 性能/ ./ 4/ 分布式/ 数据流/ 查询/ 系统/ 介绍/ 为/ 提升/ 分布式/ 数据流/ 处理/ 系统/ 的/ 简洁性/ 、/ 易用性/ 和/ 扩展性/ 等/ 特点/ ,/ 工业界/ 和/ 学术界/ 相继/ 推出/ 了/ 支持/ 不同/ 处理/ 系统/ 的/ 查询/ 系统/ ./ 本节/ 选择/ 有/ 代表性/ 的/ 分布式/ 查询/ 系统/ 实例/ SPL/ [/ 77/ ]/ 、/ StreamingSQL/ ①/ 、/ Squall/ ②/ 和/ DBToaster/ [/ 45/ ]/ 进行/ 对比/ 分析/ ./ 分析/ 内容/ 包括/ 底层/ 处理/ 系统/ 的/ 简介/ ,/ 查询/ 系统/ 的/ 实现/ 原理/ ,/ 以及/ 查询/ 系统/ 的/ 相关/ 特征/ 等/ ./ 4.1/ SPL/ 查询/ 系统/ SPL/ [/ 77/ ]/ 是/ 由/ IBM/ 的/ 声明/ 式/ 系统/ SPADE/ [/ 78/ ]/ 演分码/ ,/ 求/ 出/ 向上/ 兼容/ 的/ 最大/ 划分/ 码/ 集合/ ./ 基于/ 代价/ 模型/ ,/ 通过/ 转换规则/ 将/ 逻辑/ 查询/ 计划/ 转换成/ 最优/ 的/ 物理/ 查询/ 计划/ ./ 文献/ [/ 73/ ]/ 基于/ 文献/ [/ 72/ ]/ 设计/ 的/ 方法/ ,/ 提出/ 了/ 挖掘/ 划分/ 码间/ 时态/ 近似/ 依赖性/ (/ TemporalApproximateDependencies/ ,/ TADs/ )/ 的/ 概念/ ./ 为/ 避免/ 运行/ 时/ 的/ 二次/ 划分/ 和/ 最小化/ 额外/ 的/ 通信/ 开销/ ,/ 将/ 满足/ TADs/ 规则/ 的/ 范式/ 进行/ 规约/ ,/ 实现/ 对/ 划分/ 码/ 动态/ 合并/ 的/ 优化/ 处理/ ./ 文献/ [/ 74/ ]/ 设计/ 了/ 感知/ 数据/ 关联性/ 的/ 多/ 查询/ 优化/ 器/ CMR/ ./ 在/ 运行/ 时/ ,/ 根据/ 分析/ 和/ 判断/ 每个/ 数据流/ 内部/ 的/ 倾斜/ 一致性/ (/ skeweduniformity/ )/ ,/ 动态/ 划分/ 各个/ 数据流/ ;/ 再/ 根据/ 查询/ 的/ 聚集/ 或/ 连接/ 码/ 选取/ 各个/ 被/ 划分/ 子/ 数据流/ 的/ 聚类/ 特征/ ,/ 利用/ BIRCH/ [/ 75/ ]/ 方法/ 进行/ 层次/ 聚类/ ,/ 以/ 获得/ 最终/ 的/ 划分/ 区间/ ./ 化成/ 的/ 商业软件/ ,/ 构建/ 在/ 支持/ 处理/ 高速/ 数据流/ 的/ InfoSphereStreams/ ③/ 之上/ ./ 作为/ 商业/ 产品/ 的/ 代表/ ,/ SPL/ 不仅/ 具有/ 丰富/ 的/ 系统/ 内置/ 算子/ ,/ 而且/ 可较/ 好/ 支持/ 用户/ 自定义/ 函数/ (/ UDF/ )/ 的/ 功能/ ./ 4.1/ ./ 1InfoSphereStreams/ 简介/ InfoSphereStreams/ 广泛应用/ 于/ 电信/ 、/ 金融/ 和/ 医疗/ 等/ 多个/ 领域/ ,/ 可/ 快速/ 提取/ 、/ 分析/ 和/ 关联/ 来自/ 多个/ 数据源/ 的/ 信息/ ,/ 并/ 可/ 处理/ 结构化/ 、/ 半/ 结构化/ 和/ 非/ 结构化/ 的/ 不同/ 数据类型/ ./ InfoSphereStreams/ 根据/ 多个/ 连续/ 查询/ 构建/ 数据流/ 图/ (/ data/ -/ flowgraph/ )/ ,/ 用于/ 支持/ 高效/ 的/ 分布式/ 数据流/ 处理/ 框架/ ./ 4.1/ ./ 2SPL/ 实现/ 原理/ SPL/ 支持/ 关系/ 型/ 数据流/ ,/ 可定义/ 嵌套/ 的/ 元组/ 类型/ 和/ 带环/ 的/ 拓扑/ 结构/ ./ 利用/ 算子/ 和/ 数据流/ 的/ 概念/ ,/ SPL/ 为/ 每个/ 应用程序/ 产生/ 一个/ 数据流/ 图/ ,/ 图中/ 的/ 每/ ①/ ②/ ③/ Page10/ 个/ 顶点/ 对应/ 于/ 后台/ 的/ 算子/ 代码/ ./ 算子/ 具有/ 声明/ 式/ 语义/ 信息/ ,/ 便于/ 用户/ 描述/ 具体/ 的/ 应用/ 需求/ ./ SPL/ 提供/ 用/ 本地/ 语言/ (/ C++/ 或/ Java/ )/ 定义/ 的/ 原始/ 算子/ (/ 包括/ 系统/ 内置/ 算子/ 和/ 用户/ 自定义/ 算子/ )/ ,/ 以及/ 包含/ 可/ 重用/ 数据流/ 子图/ 的/ 复合/ 算子/ [/ 79/ ]/ ./ SPL/ 利用/ 非/ 阻塞/ 的/ 元组/ 处理/ 以及/ 基于/ 时间/ 和/ 元组/ 的/ 滑动/ 窗口/ ,/ 实现/ 了/ 窗口/ 内部/ 数据/ 的/ 实时处理/ ./ 图/ 4/ [/ 77/ ]/ 说明/ 了/ SPL/ 处理/ 原始/ 算子/ 的/ 流程/ ./ 每个/ 原始/ 算子/ 由/ 算子/ 模式/ (/ operatormodel/ )/ 和/ 算子/ 代码生成/ 器/ (/ operatorcodegenerator/ )/ 两/ 部分/ 组成/ ./ 其中/ ,/ 算子/ 模式/ 是/ 一个/ 描述/ 算子/ 到/ SPL/ 编译器/ (/ SPLComplier/ )/ 的/ XML/ 文档/ ;/ 算子/ 代码生成/ 器/ 负责/ 为/ 特定/ 算子/ 生图/ 4/ 算子/ 处理/ 流程/ 4.1/ ./ 3/ 小结/ SPL/ 查询/ 系统/ 具有/ 的/ 特征/ 包括/ :/ (/ 1/ )/ SPL/ 通过/ 编程/ 式/ 语言/ 描述/ 数据流/ 处理过程/ ,/ 不/ 受限于/ 数据流/ 图/ 的/ 描述/ 形式/ 和/ 中间/ 语言/ 的/ 转换/ ;/ (/ 2/ )/ SPL/ 可/ 生成/ 便于/ 组合/ 的/ 并行/ 或/ 分布式/ 数据流/ 图/ 的/ 中间/ 语言/ ,/ 并/ 支持/ 用户/ 自定义/ 的/ 数据类型/ 和/ 算子/ ;/ (/ 3/ )/ SPL/ 支持/ 代码/ 的/ 错误/ 检查/ ,/ 利用/ 编译器/ 搜集/ 的/ 信息/ 进行/ 优化/ ,/ 并/ 支持/ C++/ 或/ Java/ 代码/ 的/ 转换/ ./ SPL/ 查询/ 系统/ 的/ 不足之处/ 在于/ :/ 用户/ 需要/ 掌握/ SPL/ 提供/ 的/ 不同/ 算子/ 进行/ 编程/ 实现/ ,/ 缺少/ 抽象/ 语义/ 的/ 描述性/ 信息/ ,/ 不如/ SQL/ 类型/ 的/ 查询/ 系统/ 易于/ 使用/ ./ 4.2/ StreamingSQL/ 查询/ 系统/ StreamingSQL/ 是/ Intel/ 公司/ 基于/ SparkStreaming/ ①/ 和/ 结构化/ 数据/ 查询/ 框架/ Catalyst/ ②/ 实现/ 的/ 数据流/ 查询/ 系统/ ./ 4.2/ ./ 1SparkStreaming/ 简介/ 由于/ Spark/ 只/ 支持/ 数据/ 的/ 批量/ 处理/ 模式/ 而/ 不/ 支持/ 流式/ 处理/ 模式/ ,/ 伯克利大学/ 设计/ 了/ SparkStreaming/ 以/ 满足/ 对/ 数据流/ 的/ 处理/ ./ SparkStreaming/ 定义/ 了/ 用于/ 描述/ 数据流/ 计算/ 的/ 操作/ 对象/ D/ -/ Streams/ [/ 59/ ]/ ,/ 并/ 将/ 输入/ 数据流/ 切/ 分成/ Spark/ 可以/ 处理/ 的/ 若干/ RDD/ [/ 60/ ]/ ./ 成/ 相应/ 代码/ ./ 在/ 编译/ 应用/ 源码/ (/ applicationsourcecode/ )/ 时/ ,/ SPL/ 会/ 产生/ 多个/ 算子/ 调用/ ,/ 每个/ 算子/ 调用/ 均/ 需要/ 检查/ 算子/ 模式/ 并/ 产生/ 相应/ 的/ 算子/ 实例/ 模式/ (/ operatorinstancemodel/ )/ ,/ 并/ 利用/ 算子/ 代码生成/ 器/ 产生/ 算子/ 实例/ (/ operatorinstance/ )/ ./ 在/ 运行/ 时/ ,/ InfoSphereStreams/ 根据/ 已/ 定义/ 的/ 应用/ 模式/ (/ applicationmodel/ )/ 触发/ 算子/ 并/ 产生/ 数据流/ 图/ ,/ 利用/ 流/ 平台/ (/ streamingplatform/ )/ InfoSphereStreams/ 的/ 处理单元/ (/ ProcessingElements/ ,/ PEs/ )/ 对/ 数据流/ 进行/ 分析/ 处理/ ./ 每个/ 算子/ 实例/ 是/ 一个/ 转换器/ ,/ 根据/ 流/ 平台/ 的/ 运行/ 环境/ 处理/ 输入/ 数据项/ 流/ (/ streamofinputdataitems/ )/ ,/ 并/ 产生/ 输出/ 数据项/ 流/ (/ streamofoutputdataitems/ )/ ./ 这/ 使得/ SparkStreaming/ 对/ D/ -/ Streams/ 的/ 操作/ 可/ 转换/ 为/ Spark/ 对/ RDD/ 的/ 操作/ ,/ 从而/ 实现/ 了/ 数据流/ 的/ 批量/ 处理/ ./ 4.2/ ./ 2StreamingSQL/ 实现/ 原理/ StreamingSQL/ 使用/ 类/ SQL/ 声明/ 式/ 语言/ 调度/ 和/ 操作/ SparkStreaming/ 的/ 任务/ ,/ 利用/ Scala/ 语言/ 实现/ 系统/ 的/ 核心/ 功能/ ./ StreamingSQL/ 的/ 定义/ 参照/ 了/ SQLstream/ 公司/ 的/ StreamingSQL/ 标准/ ③/ ,/ 并/ 对/ HiveQL/ 进行/ 了/ 扩展/ ./ StreamingSQL/ 类似/ 于/ 操作/ 数据库/ 中/ 的/ 结构化/ 数据/ 来/ 处理/ 数据流/ ,/ 并/ 构建/ 支持/ 连续/ 查询/ 的/ 模块/ ./ StreamingSQL/ 支持/ 基于/ 时间/ 的/ 滑动/ 窗口/ 和/ 无/ 窗口/ 两种/ 驱动/ 方式/ ,/ 分别/ 利用/ 阻塞/ 的/ 窗口/ 处理/ 和/ 阻塞/ 的/ 微/ 批次/ 处理/ 实现/ 聚集/ 和/ 连接/ 操作/ ./ StreamingSQL/ 基于/ 修改/ Hive/ 的/ 解析器/ 设计/ 自身/ 语言/ 并/ 增加/ 了/ 关于/ 数据流/ 的/ 语义/ 操作/ ;/ 为/ 易于/ 和/ Hive/ 集成/ ,/ 共享/ 了/ Hive/ 的/ Metastore/ [/ 80/ ]/ ./ StreamingSQL/ 的/ 设计/ 复用/ 了/ Spark/ 原始/ 的/ 逻辑/ 计划/ 和/ 相应/ 的/ 分析/ 规则/ ,/ 通过/ 构造/ 包装/ 器/ 的/ 方法/ 进行/ ①/ ②/ ③/ Page11/ 物理/ 计划/ 树/ 的/ 转换/ ./ StreamingSQL/ 的/ 处理/ 流程/ 如图/ 5/ 所示/ ./ StreamingSQL/ 利用/ Hive/ 解析/ 的/ 抽象/ 语法/ 树/ (/ AbstractSyntaxTree/ ,/ AST/ )/ ,/ 生成/ 对应/ 的/ 逻辑/ 计划/ ,/ 并/ 通过/ Catalyst/ 进行/ 优化/ ,/ 最终/ 生成/ 分别/ 依赖于/ RDD/ 和/ D/ -/ Streams/ 的/ 不同/ 的/ 物理/ 计划/ 树/ ./ Streaming/ -/ SQL/ 通过/ 从/ 抽象/ 语法/ 树叶子/ 节点/ 的/ D/ -/ Streams/ 中/ 提取/ RDD/ ,/ 可/ 将/ 流式/ 物理/ 计划/ 树/ 转换成/ Spark/ 的/ 物理/ 计划/ 树/ ,/ 以/ 获取/ 最终/ 的/ 查询/ 结果/ ./ 4.2/ ./ 3/ 小结/ StreamingSQL/ 查询/ 系统/ 具有/ 的/ 特征/ 包括/ :/ (/ 1/ )/ 支持/ 多种/ 查询/ 驱动/ 方式/ ;/ (/ 2/ )/ 可/ 在/ 同一个/ 查询/ 中/ 进行/ 表/ 和/ 数据流/ 的/ 交互式/ 操作/ ./ StreamingSQL/ 查询/ 系统/ 的/ 不足之处/ 在于/ :/ (/ 1/ )/ 不/ 支持/ 嵌套/ 等/ 复杂/ 查询/ ;/ (/ 2/ )/ 不/ 支持/ 基于/ 元组/ 的/ 滑动/ 窗口/ 操作/ ./ 4.3/ Squall/ 查询/ 系统/ Squall/ ①/ 是/ 由/ 洛桑/ 联邦/ 理工学院/ 数据/ 实验室/ 开发/ 的/ 基于/ Storm/ ②/ [/ 11/ ]/ 的/ 分布式/ 在线/ 查询/ 系统/ ,/ 可/ 利用/ SQL/ 查询/ 语句/ 实现/ 对/ 数据流/ 的/ 实时/ 分析/ 处理/ ./ 4.3/ ./ 1Storm/ 简介/ Storm/ 是/ Twitter/ 开源/ 的/ 实时/ 数据流/ 处理/ 框架/ ,/ 具有/ 简单/ 的/ 编程/ 模型/ ,/ 可/ 利用/ 不同/ 的/ 通信协议/ 支持/ 多种/ 编程语言/ ,/ 并/ 通过/ acker/ 机制/ 实现/ 可靠/ 的/ 消息/ 处理/ ./ Storm/ 集群/ 架构/ 如图/ 6/ 所示/ ./ Storm/ 由/ 一个/ nimbus/ 节点/ 和/ 若干/ supervisor/ 节点/ 组成/ ./ 其中/ ,/ nimbus/ 节点/ 负责/ 资源分配/ 、/ 任务调度/ 和/ 监控/ 各个/ supervisor/ 节点/ 的/ 运行/ 情况/ ;/ 各个/ supervisor/ 节点/ 负责/ 接受/ nimbus/ 分配/ 的/ 任务/ 和/ 管理/ 该/ 节点/ 下/ 的/ 各个/ 工作/ 进程/ worker/ ./ 整个/ Storm/ 集群/ 利用/ ZooKeeper/ [/ 24/ ]/ 提供/ 分布式应用/ 的/ 协调/ 管理/ ./ 4.3/ ./ 2Squall/ 实现/ 原理/ Squall/ 将/ SQL/ 查询/ 翻译成/ 由/ 执行/ 算子/ 构成/ 的/ 有/ 向/ 无/ 环图/ (/ DAG/ )/ 的/ 查询/ 计划/ ,/ 用/ Java/ 语言/ 编写/ 了/ 查询/ 系统/ ./ 每个/ 算子/ 对应/ 于/ Storm/ 的/ 一个/ 组件/ (/ spout/ 或/ bolt/ )/ ,/ 并/ 通过/ 构建/ Storm/ 的/ 拓扑/ 结构/ (/ topology/ )/ 执行/ 查询/ 计划/ ./ Squall/ 采用/ 基于/ 矩阵/ 的/ 连接/ 模型/ join/ -/ matrix/ 适应/ 数据流/ 不断/ 增长/ 的/ 应用/ 场景/ ,/ 支持/ 无/ 窗口/ 驱动/ 方式/ 下/ 全部/ 历史数据/ 的/ θ/ 连接/ 处理/ ,/ 并/ 实现/ 了/ 基于/ 非/ 阻塞/ 元组/ 处理/ 的/ DYNAMIC/ 连接/ 算子/ [/ 64/ ]/ ./ Squall/ 将/ 连接/ 操作/ 分解成/ 连接器/ (/ joiner/ )/ 和/ 重组/ 器/ (/ reshuffler/ )/ 两/ 部分/ ./ 其中/ ,/ 连接器/ 负责/ 实际/ 连接/ 计算/ ,/ 重组/ 器/ 负责/ 分发/ 元组/ 和/ 路由/ 元组/ ./ 重组/ 器/ 负责/ 监控/ 全部/ 历史数据/ 的/ 统计/ 信息/ 和/ 支持/ 自/ 适应/ 调整/ 的/ 样式/ 划分/ ./ 这样/ 的/ 组合/ 设计/ 确保/ 了/ 数据流/ 连接/ 算子/ 的/ 负载/ 均衡/ ,/ 分摊/ 了/ 输入/ 元组/ 的/ 处理/ 代价/ ,/ 并/ 利用/ 重组/ 器/ 对/ 内容/ 的/ 不/ 敏感性/ 来/ 抵御/ 数据/ 倾斜/ 的/ 问题/ ./ 4.3/ ./ 3/ 小结/ Squall/ 查询/ 系统/ 具有/ 的/ 特征/ 包括/ :/ (/ 1/ )/ Squall/ 实现/ 了/ 在线/ 数据流/ 连接/ 算子/ ,/ 支持/ 任意/ 谓词/ 的/ 连接/ 操作/ ./ 并且/ 可/ 根据/ 数据/ 的/ 动态变化/ 对/ 算子/ 进行/ 连续/ 调整/ 和/ 状态/ 的/ 重/ 划分/ ;/ (/ 2/ )/ Squall/ 设计/ 了/ 带/ 状态/ 的/ 在线/ 连接/ 算子/ ,/ 在/ 缺乏/ 数据流/ 统计/ 信息/ 的/ 情况/ 下/ 可/ 自/ 适应/ 的/ 处理/ 连接/ 操作/ ;/ (/ 3/ )/ Squall/ 提供/ 了/ 一种/ 位置/ 感知/ 的/ 迁移/ 机制/ ,/ 确保/ 了/ 最小/ 的/ 状态/ 迁移开销/ ./ Squall/ 查询/ 系统/ 的/ 不足之处/ 在于/ :/ (/ 1/ )/ Squall/ 目前/ 只/ 支持/ 简单/ 的/ 连接/ 查询/ 操作/ ,/ 不/ 支持/ IN/ 、/ BETWEEN/ 、/ LIKE/ 、/ EXISTS/ 、/ HAVING/ 等/ SQL/ 子句/ ;/ (/ 2/ )/ 连接/ 条件/ 不/ 支持/ OR/ 表达式/ ,/ 也/ 不/ 支持/ 嵌套/ 查询/ 和/ 过程/ 查询/ ./ 4.4/ DBToaster/ 查询/ 系统/ DBToaster/ [/ 45/ ]/ 是/ 洛桑/ 联邦/ 理工学院/ 数据/ 实验室/ 开发/ 的/ 新型/ 数据流/ 查询/ 系统/ ,/ 提供/ 从/ SQL/ 查询/ 语句/ 到/ 生成/ 本地/ 代码/ 的/ 编译/ 框架/ ./ ①/ ②/ Page124/ ./ 4.1/ 处理/ 系统/ 简介/ 根据/ 不同/ 的/ 业务/ 需求/ ,/ 可/ 将/ DBToaster/ 部署/ 在/ 不同/ 的/ 处理/ 系统/ 上/ ./ 若需/ 保证/ 数据流/ 的/ 并行处理/ 能力/ 和/ 处理/ 效率/ ,/ 可/ 使用/ Storm/ 作为/ 底层/ 处理/ 系统/ (/ 详见/ 参见/ 4.3/ ./ 1/ 节/ )/ ;/ 若有/ 大量/ 联机/ 分析/ 处理/ (/ OnlineAnalyticalProcessing/ ,/ OLAP/ )/ 的/ 操作/ ,/ 可/ 使用/ Cumulus/ [/ 81/ ]/ 作为/ 底层/ 处理/ 系统/ ./ 本节/ 简要/ 介绍/ Cumulus/ 处理/ 系统/ ./ Cumulus/ 是/ 洛桑/ 联邦/ 理工学院/ 和/ 图卢兹/ 大学/ 联合开发/ 的/ 可信/ 云/ 系统/ ,/ Cumulus/ 提出/ 了/ 一种/ 新/ 的/ 拜占庭/ 容错/ (/ ByzantineFaultTolerance/ ,/ BFT/ )/ [/ 82/ ]/ 协议/ CBFT/ ,/ 可/ 保证/ 机器/ 之间/ 独立/ 且/ 无/ 感知/ 的/ 数据备份/ ,/ 为/ DBToaster/ 的/ 视图/ 维护/ 操作/ 提供/ 了/ 可靠/ 的/ 信息/ 传输/ 和/ 实时/ 的/ 精准/ 聚集/ 结果/ ①/ ./ 4.4/ ./ 2DBToaster/ 实现/ 原理/ DBToaster/ 通过/ 递归/ 的/ 思想/ 将/ 增量/ 查询/ 转换/ 为/ C++/ 或/ Scala/ 函数/ ,/ 利用/ 敏捷/ 视图/ (/ agileview/ )/ [/ 46/ ]/ 保持/ 实时/ 更新/ ,/ 省略/ 了/ 多余/ 的/ 扫描/ 和/ 连接/ 操作/ ,/ 并/ 消除/ 了/ 解释/ 查询/ 计划/ 的/ 冗余/ 开销/ ./ DBToaster/ 还/ 可以/ 将/ 用于/ 维护/ 敏捷/ 视图/ 的/ 程序/ 嵌入/ 到/ 用户/ 的/ 应用程序/ 中/ ,/ 根据/ 支持/ 数据流/ 管理系统/ 中/ 物化/ 视图/ [/ 46/ ]/ 的/ 机制/ ,/ 确保/ 将/ 更新/ 视图/ 的/ 最新/ 查询/ 结果/ 直接/ 返回/ 给/ 用户/ ./ DBToaster/ 采用/ 无/ 窗口/ 的/ 非/ 阻塞/ 元组/ 处理/ 方式/ ,/ 实现/ 全部/ 历史数据/ 的/ 实时/ 增量/ 计算/ ./ 表/ 6/ 分布式/ 数据流/ 查询/ 系统/ 对比/ 分析/ StreamingSQLSparkSQL/ 类型/ 语言/ 阻塞/ 的/ 微/ 批次/ 处理/ 基于/ 时间/ 的/ 滑动/ 窗口/ 无/ 窗口/ Scala/ 对比/ 指标/ 处理/ 系统/ 抽象/ 语言/ 处理/ 方式/ 查询/ 驱动/ 方式/ 开发/ 语言/ 5/ 挑战/ 与/ 展望/ 分布式/ 数据流/ 查询/ 系统/ 为/ 满足/ 查询/ 速度/ 快/ 、/ 查询/ 精度高/ 且/ 功能/ 完备/ 等/ 特点/ ,/ 依然/ 存在/ 着/ 很多/ 有/ 价值/ 的/ 研究/ 问题/ ./ 5.1/ 分布式/ 数据流/ 查询/ 优化/ 技术/ 为/ 满足/ 实时性/ 的/ 查询/ 要求/ ,/ 分布式/ 数据流/ 查询处理/ 的/ 优化/ 技术/ 需/ 不断完善/ ./ 相关/ 技术/ 可/ 归纳/ 为/ 如下/ 几点/ :/ (/ 1/ )/ 在/ 查询/ 优化/ 的/ 过程/ 中/ ,/ 为/ 适应/ 数据流/ 波动/ 、/ 有损/ 、/ 易失/ 等/ 特点/ ,/ 需/ 制定/ 流/ 查询/ 系统/ 的/ 优化/ 规则/ ,/ 并/ 协调/ 规则/ 的/ 执行/ 顺序/ ,/ 进一步/ 完善/ 基于/ 规则/ 的/ 优/ 4.4/ ./ 3/ 小结/ DBToaster/ 查询/ 系统/ 具有/ 的/ 特征/ 包括/ :/ (/ 1/ )/ DBToa/ -/ ster/ 通过/ LLVM/ [/ 49/ ]/ 和/ LMS/ [/ 54/ ]/ 编译/ 技术/ 直接/ 生成/ 目标/ 代码/ ,/ 消除/ 了/ 解析器/ 所/ 需/ 的/ 时间/ 成本/ ,/ 提高/ 了/ 查询/ 性能/ ;/ (/ 2/ )/ DBToaster/ 通过/ 物化/ 视图/ 的/ 操作/ ,/ 快速/ 处理/ 大量/ 更新/ 的/ 数据流/ ,/ 而且/ 打破/ 了/ 基于/ 窗口/ 的/ 数据流/ 操作方法/ ,/ 从而/ 可以/ 访问/ 内存/ 中/ 的/ 全部/ 历史数据/ ;/ (/ 3/ )/ 为了/ 支持/ 复杂/ 的/ 聚集/ 操作/ ,/ DBToaster/ 构建/ 了/ 支持/ 增量/ 处理/ 的/ 数据库/ 环/ [/ 83/ ]/ ./ 用环/ 作为/ 设计/ 查询/ 计算/ 的/ 基础/ ,/ 可/ 保证/ 增量/ 计算/ 的/ 封闭性/ ,/ 同时/ 简化/ 了/ 处理/ 机制/ ;/ (/ 4/ )/ DBToaster/ 利用/ 有限/ 差/ 的/ 方法/ ,/ 提出/ 了/ 小/ 视图/ 变换/ (/ viewlettransforms/ )/ 的/ 概念/ [/ 84/ ]/ ,/ 可/ 将/ 高阶/ 的/ 增量/ 查询/ 集合/ 物化/ 成/ 视图/ ,/ 降低/ 视图/ 维护/ 的/ 代价/ ./ 并/ 通过/ 启发式/ 和/ 基于/ 代价/ 的/ 优化/ 框架/ ,/ 保证/ 视图/ 的/ 频繁/ 更新/ ./ DBToaster/ 查询/ 系统/ 的/ 不足之处/ 在于/ :/ (/ 1/ )/ 不/ 支持/ 排序/ (/ orderby/ )/ 和/ 外/ 连接/ (/ outerjoin/ )/ 等/ 查询/ 操作/ ;/ (/ 2/ )/ 内存/ 溢出/ 时需/ 进行/ 内外/ 存/ 的/ 交互/ 处理/ ,/ 查询/ 的/ 响应/ 时间/ 增长/ ;/ (/ 3/ )/ 进行/ 多/ 查询处理/ 时/ ,/ 会/ 出现/ 敏捷/ 视图/ 的/ 存储/ 冲突/ 和/ 版本/ 不/ 一致/ 等/ 问题/ ./ 4.5/ 查询/ 系统/ 对比/ 分析/ 根据/ 以上/ 数据流/ 查询/ 系统/ 的/ 分析/ 说明/ ,/ 可以/ 看出/ :/ 针对/ 数据流/ 处理/ 的/ 不同/ 需求/ ,/ 需/ 采用/ 不同/ 的/ 查询/ 系统/ 和/ 处理/ 方法/ ./ 各个/ 查询/ 系统/ 的/ 特点/ 分析/ 如表/ 6/ 所示/ ./ 化/ 策略/ ./ (/ 2/ )/ 针对/ 无/ 窗口/ 驱动/ 方式/ 的/ 连续/ 查询/ ,/ 由于/ 数据分布/ 和/ 执行/ 代价/ 等/ 信息/ 的/ 动态变化/ ,/ 查询/ 系统/ 需要/ 实时/ 调整/ 查询/ 计划/ ./ 例如/ ,/ 在/ Shark/ 系统/ 中/ 引入/ 部分/ 有/ 向/ 无/ 环图/ 执行/ 策略/ (/ PartialDAGExecution/ ,/ PDE/ )/ [/ 85/ ]/ 的/ 概念/ ,/ 利用/ 在/ 查询处理/ 中/ 实时/ 收集/ 到/ 的/ 统计/ 信息/ 动态/ 改变/ 查询/ 计划/ ./ 为/ 满足/ 自/ 适应/ 查询处理/ 的/ 需求/ ,/ 宾夕法尼亚大学/ 的/ 学者/ 们/ 设计/ 了/ 基于/ 代价/ 模型/ 的/ 二次/ 优化/ 框架/ [/ 86/ ]/ ,/ 可/ 根据/ 代价/ 信息/ 增量/ 更新/ 查询/ 优化/ 器/ ./ 如何/ 在/ 运行/ 时自/ 适应/ 地/ 寻求/ 最小/ 代价/ 的/ 查询/ 计划/ ,/ 成为/ 近年来/ 一个/ 热门/ 的/ 研究/ 问题/ ./ ①/ http/ :/ // // webdam/ ./ inria/ ./ fr/ // wordpress/ // wp/ -/ content/ // uploads/ // Page13/ (/ 3/ )/ 针对/ 用户/ 提交/ 的/ 复杂/ 查询/ (/ 如多/ 查询/ 和/ 嵌套/ 查询/ 等/ )/ ,/ 对/ 查询/ 重写/ 、/ 算子/ 共享/ 等/ 数据库/ 管理系统/ 中/ 关注/ 的/ 优化/ 问题/ ,/ 在/ 数据流/ 处理/ 场景/ 中/ 也/ 有/ 很多/ 研究/ 工作/ 要/ 做/ ./ 5.2/ 分布式/ 数据流/ 查询/ 执行/ 策略/ 基于/ 分布式/ 环境/ 下/ 的/ 数据流/ 查询处理/ 框架/ ,/ 流/ 查询/ 系统/ 将/ 各个/ 查询处理/ 计划/ 以/ 流水线/ 的/ 形式/ 组织/ 在/ 一起/ ./ 在/ 运行/ 时/ ,/ 需/ 重点/ 关注/ 算子/ 和/ 数据/ 的/ 调度/ 执行/ 策略/ ,/ 存在/ 的/ 挑战性/ 问题/ 分析/ 如下/ :/ (/ 1/ )/ 执行/ 需/ 保持/ 状态/ 信息/ 的/ 算子/ 时/ ,/ 要/ 设计/ 算子/ 调度/ 和/ 执行/ 的/ 策略/ ,/ 以/ 最低/ 的/ 代价/ 存储/ 和/ 传输/ 中间状态/ 信息/ ./ (/ 2/ )/ 针对/ 用户/ 提交/ 的/ 多/ 查询/ 请求/ ,/ 需/ 引入/ 数据流/ 和/ 查询/ 划分/ 码/ 的/ 相关性/ 评测/ 标准/ ./ 根据/ 不同/ 的/ 查询/ 驱动/ 方式/ 和/ 数据分布/ 情况/ ,/ 制定/ 综合/ 的/ 划分/ 策略/ 作为/ 数据/ 分组/ 的/ 处理/ 依据/ ./ (/ 3/ )/ 根据/ 分布式/ 集群/ 的/ 部署/ 情况/ 和/ 用户/ 提交/ 的/ 查询/ 请求/ ,/ 随着/ 数据流/ 分布/ 特征/ 的/ 不断/ 变化/ ,/ 需/ 设计/ 出/ 合理/ 且/ 高效/ 的/ 最优/ 并行度/ 分裂/ 算法/ (/ 包括/ 数据流/ 的/ 划分/ 和/ 复制/ )/ ,/ 尽可能/ 提高/ 查询/ 系统/ 的/ 并行处理/ 能力/ ./ 5.3/ 分布式/ 数据流/ 实时/ 精准/ 查询/ 分布式/ 数据流/ 处理/ 系统/ 在/ 可伸缩性/ 、/ 容错性/ 、/ 状态/ 一致性/ 管理/ 和/ 数据/ 细粒度/ 处理/ 等/ 方面/ 不断/ 提升/ 和/ 发展/ ,/ 系统/ 处理/ 大量/ 无损/ 数据流/ 的/ 能力/ 得以/ 完善/ ./ 因此/ ,/ 学者/ 们/ 将/ 研究/ 的/ 重点/ 从/ 丢弃/ 部分/ 元组/ 的/ 降载/ [/ 87/ ]/ 方式/ 转向/ 处理/ 全部/ 历史数据/ 的/ 实时/ 精准/ 查询/ ./ 其中/ 面临/ 的/ 研究/ 点/ 包括/ :/ 分布式/ 环境/ 下/ 的/ 本地/ 增量/ 视图/ 和/ 全局/ 增量/ 视图/ 的/ 统一/ 与/ 维护/ ;/ 针对/ 多/ 查询/ 应用/ 场景/ 下/ 的/ 视图/ 一致性/ 管理/ 和/ 共享/ 算子/ 的/ 状态/ 管理/ 等/ ./ 针对/ 这些/ 问题/ 的/ 研究/ ,/ 对/ 提高/ 系统/ 的/ 查询/ 速度/ 和/ 查询/ 精度/ 均/ 具有/ 十分/ 重要/ 的/ 意义/ ./ 5.4/ 分布式/ 数据流/ 复杂/ 查询/ 分析/ 为/ 满足/ 以/ 用户/ 自定义/ 函数/ (/ UDF/ )/ 、/ 嵌套/ 查询/ 等/ 为/ 代表/ 的/ 复杂/ 查询/ 分析/ ,/ 分布式/ 数据流/ 查询/ 系统/ 需/ 构建/ 实时/ 高效/ 的/ 以/ 有/ 向/ 无/ 环图/ (/ DAG/ )/ 为/ 拓扑/ 结构/ 的/ 任务/ 执行/ 计划/ ./ 因此/ ,/ 为了/ 充分发挥/ 系统/ 性能/ ,/ 如何/ 优化/ 有/ 向/ 无/ 环图/ (/ DAG/ )/ 的/ 层次/ 划分/ ,/ 如何/ 利用/ 重写/ 规则/ 的/ 模板/ 推断/ 语义/ 等价/ 的/ 查询/ 执行/ 计划/ ,/ 是/ 需要/ 重点/ 考虑/ 的/ 问题/ ./ 另外/ ,/ 针对/ 数据流/ 的/ 动态/ 和/ 不确定性/ ,/ 如何/ 更好/ 地/ 设计/ 在线/ 计算/ 模型/ 以/ 支持/ 复杂/ 查询/ 的/ 处理/ 能力/ ,/ 也/ 是/ 值得/ 研究/ 的/ 问题/ ./ 并且/ ,/ 如何/ 利用/ 增量/ 聚集/ 算法/ 和/ 增量/ 学习/ 框架/ [/ 88/ -/ 89/ ]/ 支持/ 无/ 窗口/ 驱动/ 方式/ 的/ 用户/ 自定义/ 函数/ (/ UDF/ )/ ,/ 以及/ 如何/ 优化/ 同时/ 处理/ 多个/ 用户/ 自定义/ 函数/ (/ UDF/ )/ 的/ 执行/ 计划/ 问题/ ,/ 也/ 值得/ 我们/ 进一步/ 深入研究/ ./ 5.5/ 其他/ 研究/ 点/ 对于/ 制定/ 流/ 查询/ 系统/ 的/ 相关/ 标准/ 和/ 增强/ 数据/ 的/ 处理/ 能力/ 方面/ ,/ 仍/ 有/ 许多/ 其他/ 的/ 研究课题/ ./ 例如/ ,/ 为/ 应对/ 不同/ 模式定义/ 的/ 异构/ 数据源/ ,/ 查询/ 系统/ 需/ 根据/ 用户/ 需求/ 的/ 变化/ 支持/ 不同/ 的/ 查询/ 请求/ ./ 参照/ 文献/ [/ 90/ ]/ 的/ 思想/ 和/ 方法/ ,/ 可/ 制定/ 统一/ 的/ 流/ 查询/ 系统/ 标准/ 和/ 算子/ 转换规则/ ,/ 以/ 适应/ 不同/ 的/ 数据流/ 处理/ 系统/ ,/ 使/ 其/ 具有/ 更好/ 的/ 参照/ 性/ 、/ 完备/ 性/ 和/ 通用性/ ./ 此外/ ,/ 为/ 支持/ Lambda/ 架构/ ①/ ,/ 可/ 设计/ 同时/ 进行/ 批量/ 处理/ 和/ 流式/ 处理/ 的/ 查询/ 计划/ 适配器/ ,/ 通过/ 统一/ 的/ 查询/ 系统/ 接口/ ,/ 不仅/ 可以/ 实时/ 获取/ 当前/ 数据流/ 的/ 查询/ 结果/ ,/ 而且/ 可以/ 从/ 离线/ 的/ 历史数据/ 中/ 获取/ 相应/ 的/ 查询/ 结果/ ./ 6/ 结论/ 随着/ 大/ 数据/ 概念/ 的/ 兴起/ ,/ 分布式/ 数据流/ 处理/ 技术/ 已/ 成为/ 新型/ 数据处理/ 技术/ 的/ 一个/ 重要/ 分支/ ./ 基于/ 流/ 处理/ 系统/ 的/ 查询/ 技术/ 成为/ 研究/ 热点/ ,/ 受到/ 了/ 学术界/ 和/ 工业界/ 的/ 共同/ 关注/ ./ 查询/ 技术/ 需要/ 对/ 相关/ 概念/ 、/ 理论/ 、/ 方法/ 和/ 体系/ 进行/ 深入研究/ ./ 本文/ 主要/ 归纳/ 总结/ 了/ 近年来/ 分布式/ 数据流/ 查询/ 技术/ 的/ 若干/ 关键/ 特性/ ,/ 并/ 对比/ 了/ 4/ 种有/ 代表性/ 的/ 查询/ 系统/ ./ 同时/ 指出/ 了/ 存在/ 的/ 挑战性/ 问题/ ./ 这些/ 问题/ 的/ 研究/ 还/ 处于/ 起步/ 阶段/ ,/ 均/ 没有/ 较为/ 成熟/ 的/ 、/ 可以/ 进行/ 大规模/ 实际/ 应用/ 的/ 成果/ 和/ 方案/ ./ 因此/ ,/ 这些/ 课题/ 具有/ 重要/ 的/ 研究/ 价值/ 和/ 意义/ ./ 

