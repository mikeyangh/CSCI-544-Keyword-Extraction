Page1/ 云/ 虚拟机/ 资源分配/ 的/ 效用/ 最大化/ 模型/ 师雪霖/ 徐恪/ (/ 清华大学/ 计算机科学/ 与/ 技术/ 系/ 清华/ 信息科学/ 与/ 技术/ 国家/ 实验室/ (/ 筹/ )/ 北京/ 100084/ )/ 摘要/ 随着/ 云/ 计算/ 和/ 虚拟化/ 技术/ 的/ 发展/ ,/ 为云/ 资源管理/ 提供/ 了/ 一种/ 更/ 高层次/ 的/ 调度/ 选择/ :/ 一个/ 作业/ 不再/ 只能/ 分配/ 到/ 一台/ 物理/ 机上/ ,/ 而是/ 可/ 将/ 一台/ 或/ 多台/ 物理/ 机/ 的/ 计算资源/ 虚拟化/ 成/ 一台/ 虚拟机/ 来/ 运行/ 该/ 作业/ ./ 根据/ 作业/ 需要/ ,/ 高效/ 分配/ 定量/ 的/ 物理/ 资源/ 放置/ 虚拟机/ ,/ 是/ 决定/ 云/ 系统/ 性能/ 的/ 关键因素/ ,/ 即云/ 资源/ 调度/ 问题/ 实质/ 就是/ 一个/ 虚拟机/ 和/ 物理/ 机/ 之间/ 的/ 映射/ 问题/ ./ 文中/ 借鉴/ 网络/ 效用/ 最大化/ 模型/ ,/ 提出/ 了/ 一种/ 云/ 资源/ 调度/ 模型/ —/ —/ —/ 云/ 效用/ 最大化/ (/ CloudUtilityMaximization/ ,/ CUM/ )/ 模型/ ,/ 与/ 传统/ 调度/ 模型/ 相比/ ,/ 目标/ 函数/ 不再/ 是/ 最小化/ 最大/ 完工/ 时间/ ,/ 而是/ 以/ 达到/ 效用/ 最大/ 为/ 调度/ 目标/ ,/ 可以/ 充分/ 提高/ 用户/ 的/ 满意/ 程度/ ./ 通过/ 求解/ CUM/ 优化/ 问题/ 得到/ 最优/ 的/ 虚拟机/ 和/ 物理/ 机/ 映射/ 关系/ ./ 设计/ 了/ 针对/ 该/ 模型/ 的/ 分解/ 优化/ 算法/ —/ —/ —/ 简化/ 次梯度/ 算法/ 求解/ 拉格朗/ 日/ 对偶/ 问题/ ,/ 证明/ 了/ 该/ 算法/ 可以/ 获得/ 原始/ 模型/ 问题/ 的/ 最优/ 解/ ./ 仿真/ 实验/ 表明/ 算法/ 可行/ 且/ 具有/ 良好/ 的/ 收敛/ 特性/ ,/ 并/ 给出/ 了/ CUM/ 模型/ 在/ 真实/ 云/ 环境/ 下/ 的/ 应用/ 场景/ ./ 关键词/ 云/ 计算/ ;/ 资源/ 调度/ ;/ 虚拟机/ 放置/ ;/ 拉格朗/ 日/ 松弛/ ;/ 次梯度/ 算法/ 1/ 引言/ 云/ 计算/ (/ CloudComputing/ )/ 是/ 继/ 并行计算/ 、/ 分布式计算/ 、/ 网格/ 计算/ 后/ 的/ 新型/ 计算/ 模式/ [/ 1/ ]/ ,/ 云可/ 视为/ 集群/ 和/ 网格/ 的/ 组合/ ./ 云/ 环境/ 中/ 包含/ 着/ 大量/ 分散/ 、/ 异构/ 资源/ ,/ 包括/ 处理器/ 、/ 内存/ 、/ 存储/ 、/ 可视化/ 设备/ 、/ 软件/ 等等/ ./ 云/ 计算/ 要/ 解决/ 的/ 问题/ 是/ 如何/ 有效/ 安全/ 地/ 管理/ 和/ 共享/ 接入/ 云/ 的/ 各种/ 资源/ ,/ 并/ 提供/ 相应/ 的/ 服务/ ,/ 它/ 强调/ 的/ 是/ 全面/ 的/ 资源共享/ ,/ 全面/ 的/ 应用服务/ ./ 云/ 计算/ 提出/ 了/ 全/ 互联网/ 范围/ 内/ 共享资源/ 的/ 最高/ 目标/ ,/ 最大/ 限度/ 地/ 充分利用/ 计算/ // 存储资源/ ,/ 是/ 整合/ 全/ 社会/ 高性能/ 计算资源/ 的/ 有效/ 方法/ ./ 在/ 云/ 环境/ 中/ ,/ 不仅/ 资源/ 的/ 地理位置/ 分布/ 广泛/ ,/ 甚至/ 属于/ 不同/ 的/ 自治/ 系统/ ,/ 而且/ 资源/ 往往/ 具有/ 异构/ 性/ 、/ 动态性/ ,/ 如何/ 有效/ 分配/ 计算资源/ 是/ 决定/ 整个/ 云/ 性能/ 、/ 效率/ 的/ 关键问题/ ./ 因此/ ,/ 随着/ 云/ 计算技术/ 的/ 日益/ 普及/ ,/ 有效/ 的/ 云/ 资源/ 调度/ 模型/ 和/ 算法/ 将/ 成为/ 高效/ 利用/ 这些/ 资源/ 的/ 关键/ ./ 由于/ 云/ 计算/ 模式/ 从/ 提出/ 伊始/ 即/ 考虑/ 到/ 其/ 商业/ 实现/ ,/ 所以/ 从/ 经济/ 效用/ 度量/ 的/ 调度/ 模型/ 更具/ 意义/ ./ 云/ 计算/ 中/ 的/ 资源/ 调度/ 算法/ 多/ 延续/ 网格/ 资源/ 调度/ ,/ 这些/ 传承/ 于/ 20/ 世纪/ 六/ 、/ 七十年代/ 即/ 开始/ 的/ 多处理器/ 、/ 并行机/ 上/ 的/ 作业/ 调度/ 研究/ ,/ 其/ 数学模型/ 是/ 整数/ 规划/ (/ integerprogramming/ )/ 问题/ ,/ 以/ 尽可能/ 短/ 的/ 任务/ 完成/ 时间/ 为/ 调度/ 目标/ ,/ 采用/ 启发式/ 算法/ 求解/ 次优/ 解/ ./ 随着/ 网格/ 计算/ 和/ 云/ 计算/ 的/ 普及/ ,/ 资源/ 调度/ 越来越/ 多/ 考虑/ 经济效益/ ,/ 在/ 模型/ 中/ 增加/ 了/ 经济/ 度量/ 参数/ ,/ 如/ 机器/ 价格/ 、/ 最迟/ 完工/ 时间/ 等/ ./ 但是/ 无论/ 是否/ 包含/ 经济效益/ 参数/ ,/ 这些/ 调度/ 模型/ 的/ 解/ 都/ 是/ 0/ -/ 1/ 变量/ 矩阵/ ,/ 即/ 若/ 作业/ i/ 分配/ 到/ 机器/ j/ 上/ ,/ 则/ xij/ =/ 1/ ;/ 否则/ 为/ 0/ ./ 由于/ 云/ 计算/ 普遍/ 采用/ 虚拟化/ 技术/ ,/ 给/ 云/ 用户/ 分配/ 的/ 计算资源/ ,/ 并/ 不是/ 真正/ 独占/ 一台/ 或/ 多台/ 的/ 物理/ 机/ (/ PhysicalMachine/ ,/ PM/ )/ ./ 以/ 亚马逊/ EC2/ 平台/ 为例/ ,/ 用户/ 通过/ 付费/ 可以/ 购买/ “/ 一台/ ”/ 计算/ 服务器/ 若干/ 小时/ 的/ 使用权/ ,/ 但/ 实际上/ 在/ 用户/ 使用/ 过程/ 中/ ,/ 并/ 不是/ 始终/ 独占/ 使用/ 一台/ 真正/ 的/ 物理/ 机/ ,/ 而/ 有/ 可能/ 是/ 一台/ 或者/ 多台/ 物理/ 机/ 提供/ 的/ 虚拟机/ (/ VirtualMachine/ ,/ VM/ )/ 服务/ ./ 虚拟化/ 技术/ 是/ 推动/ 云/ 计算/ 发展/ 的/ 重要/ 动力/ ,/ 一台/ 物理/ 机/ 可以/ 实例/ 化/ 多个/ 虚拟机/ ,/ 而/ 多台/ 物理/ 机/ 的/ 剩余/ 计算资源/ 也/ 可以/ 虚拟化/ 成/ 一台/ 虚拟机/ ./ 随着/ 虚拟化/ 技术/ 的/ 不断/ 发展/ ,/ 可以/ 预计/ 虚拟化/ 本身/ 消耗/ 的/ 计算资源/ 会/ 降低/ ,/ 而且/ 从/ 便于管理/ 和/ 安全性/ 角度/ 考虑/ ,/ 虚拟机/ 方式/ 也/ 会/ 被/ 云/ 服务提供商/ 广泛/ 采用/ ./ 因此/ ,/ 云/ 计算资源/ 调度/ 可以/ 不/ 使用/ 整数/ 规划/ 模型/ ,/ 而是/ 变成/ 如何/ 将/ 物理/ 机/ 的/ 计算资源/ 按/ 比例/ 分配/ 的/ 优化/ 问题/ ,/ 通过/ 虚拟机/ 技术/ 将/ 这些/ 资源/ 提供/ 给/ 云/ 用户/ 使用/ ./ 本文/ 提出/ 了/ 一种/ 云/ 资源/ 调度/ 效用/ 最大化/ 模型/ ,/ 描述/ 云/ 计算资源/ 优化/ 问题/ ,/ 从/ 经济学/ 角度/ 分析/ 了/ 该/ 模型/ 的/ 理论意义/ ./ 此外/ 设计/ 了/ 求解/ 该/ 问题/ 的/ 次梯度/ 优化/ 算法/ ./ 最后/ 给/ 了/ 模拟实验/ 数据/ ,/ 分析/ 了/ 算法/ 性能/ ./ 2/ 相关/ 研究/ 工作/ 最/ 基本/ 的/ 多处理器/ 、/ 并行机/ 上/ 的/ 作业/ 调度/ 研究/ ,/ 其/ 数学模型/ 实质/ 是/ 整数/ 规划/ 问题/ ,/ 以/ 尽可能/ 短/ 的/ 任务/ 完成/ 时间/ 为/ 调度/ 目标/ ,/ 目标/ 函数/ 为/ 最大/ 完工/ 时间/ 最小/ ,/ 数学模型/ 为/ 其中/ 变量/ 定义/ 如下/ :/ 机器/ ;/ M/ =/ {/ 1/ ,/ 2/ ,/ …/ ,/ m/ }/ :/ 表示/ 机器/ 的/ 集合/ ,/ 共有/ m/ 台/ J/ =/ {/ 1/ ,/ 2/ ,/ …/ ,/ n/ }/ :/ 表示/ 所有/ 作业/ 的/ 集合/ ,/ 共有/ n/ 个/ 作业/ ;/ 犜/ :/ 加工/ 时间/ 矩阵/ (/ n/ ×/ m/ 矩阵/ )/ ,/ 矩阵/ 元素/ tij/ 表示/ 作业/ i/ 在/ 机器/ j/ 上/ 的/ 加工/ 时间/ ;/ 目标/ 函数/ 最大/ 完工/ 时间/ 定义/ 如下/ :/ 该/ 优化/ 问题/ 的/ 目标/ 解为/ n/ ×/ m/ 矩阵/ 犡/ ,/ 矩阵/ 元素/ xij/ 表示/ 作业/ i/ 是否/ 在/ 机器/ j/ 上/ 加工/ ,/ xij/ ∈/ {/ 0/ ,/ 1/ }/ ,/ 如果/ 加工/ 为/ 1/ ,/ 否则/ 为/ 0/ ./ 根据/ 目标/ 函数/ 定义/ ,/ 可以/ 将/ 模型/ (/ 1/ )/ 整理/ 为/ 如下/ 简化/ 形式/ :/ 这/ 类/ 整数/ 规划/ 模型/ ,/ 多/ 采用/ 启发式/ 算法/ 来/ 寻找/ 次优/ 解/ :/ 如/ 经典/ 的/ Min/ -/ min/ 、/ Max/ -/ min/ 、/ sufferage/ 、/ Xsufferage/ 等/ 作业/ 调度/ 算法/ [/ 2/ ]/ 等/ ./ 网格/ 调度/ 中/ 也/ 多/ 采用/ 此类/ 模型/ ./ 随着/ 现代/ 优化/ 计算方法/ 的/ 快速/ 发展/ ,/ 禁忌/ 搜索/ (/ TabuSearch/ )/ 、/ 模拟退火/ (/ SimulatedPage3Annealing/ )/ 、/ 遗传算法/ (/ GeneticAlgorithm/ )/ // 进化/ 算法/ (/ EvolutionaryAlgorithm/ )/ 、/ 蚁群/ 优化/ 算法/ (/ AntColonyOptimizationAlgorithm/ )/ 和/ 人工神经网络/ (/ ArtificialNeuralNetworks/ )/ 算法/ 等/ 也/ 被/ 用于/ 网格/ 调度/ ,/ 被/ 很多/ 后续/ 研究/ 加以改进/ ,/ 如/ 文献/ [/ 3/ -/ 5/ ]/ ./ 随后/ 也/ 出现/ 了/ 一些/ 考虑/ 经济效益/ 的/ 模型/ ,/ 增加/ 了/ 经济/ 参数/ ,/ 如/ 机器/ 使用/ 价格/ 、/ 作业/ 预算/ 、/ 作业/ 最迟/ 完工/ 时间/ (/ deadline/ )/ 等/ 参数/ [/ 6/ -/ 7/ ]/ ,/ 这/ 类/ 模型/ 通常/ 形式/ 如下/ :/ 其中/ 新增/ 的/ 经济/ 参数/ 定义/ 如下/ :/ Pj/ :/ 机器/ j/ 的/ 价格/ ;/ Bi/ :/ 作业/ i/ 的/ 预算/ ;/ Di/ :/ 作业/ i/ 的/ 最迟/ 完工/ 时间/ ./ 这类/ 模型/ 在/ 基本/ 平行/ 机/ 调度/ 模型/ (/ 3/ )/ 的/ 基础/ 上/ 增加/ 了/ 更/ 多/ 约束条件/ ,/ 也/ 对/ 求解/ 算法/ 提出/ 了/ 更/ 高/ 的/ 要求/ ,/ 解决/ 方法/ 仍然/ 采用/ 遗传算法/ 及/ 衍生/ 算法/ 居多/ ./ 上述/ 模型/ 研究/ 的/ 都/ 是/ 离线/ 排序/ (/ off/ -/ linesched/ -/ uling/ )/ 问题/ ,/ 即/ 预先/ 知道/ 作业/ 的/ 全部/ 信息/ ,/ 其中/ 作业/ 在/ 某/ 机器/ 上/ 的/ 加工/ 时间/ tij/ 需要/ 估计/ 得到/ ./ 方法/ 如下/ :/ 估算/ 作业/ 所/ 包含/ 的/ 机器指令/ 条数/ [/ 8/ -/ 9/ ]/ ,/ 根据/ 不同/ 计算/ 节点/ 的/ MIPS/ (/ 每秒/ 可/ 处理/ 的/ 百万条/ 指令/ 数/ ,/ MillionInstructionspersecond/ )/ 性能/ ,/ 计算/ 出该/ 作业/ 在/ 该/ 节点/ 上/ 所/ 需要/ 的/ 处理/ 时间/ ./ 在/ 所有/ 作业/ 进入/ 排序/ 系统/ 前/ ,/ 可以/ 先/ 经过/ 一个/ 预处理/ 环节/ ,/ 估算/ 加工/ 时间/ ./ 但是/ 这/ 类/ 调度/ 模型/ 都/ 存在/ 如下/ 问题/ :/ 首先/ ,/ 目标/ 解/ 限定/ 为/ 0/ -/ 1/ 变量/ ,/ 其实质/ 是/ 线性/ 整数/ 规划/ 问题/ ,/ 从/ 理论/ 上/ 说/ 线性/ 整数/ 规划/ 问题/ 可以/ 转化/ 为/ 一个/ 线性规划/ 问题/ ,/ 但是/ 从/ 计算/ 角度看/ 实现/ 这种/ 转化/ 是/ 相当/ 困难/ 的/ ./ 其次/ ,/ 针对/ 此类/ 模型/ 多/ 采用/ 启发式/ 算法/ 搜索/ 局部/ 最优/ 解/ ,/ 针对/ 不同/ 的/ 输入/ 条件/ ,/ 算法/ 的/ 收敛/ 速度/ 可能/ 差别/ 较大/ ,/ 很难/ 保证/ 调度/ 效率/ ./ 随着/ 云/ 计算/ 的/ 不断/ 普及/ ,/ 尤其/ 是/ 虚拟化/ 技术/ 的/ 发展/ ,/ 计算资源/ 的/ 调度/ 可以/ 不再/ 局限于/ 作业/ 是否/ 分配/ 到/ 某台/ 物理/ 机/ 的/ 二元/ 选择/ 限制/ ,/ 而是/ 从/ 效益/ 最大化/ 的/ 角度/ 出发/ ,/ 进行/ 整体/ 计算资源/ 的/ 配置/ ,/ 分配/ 给/ 某个/ 作业/ 的/ 计算资源/ 可以/ 是/ 多台/ 物理/ 机/ 提供/ 的/ 剩余/ 资源/ ./ 虽然/ 多台/ 物理/ 机/ 并行处理/ 会/ 产生/ 额外/ 开销/ ,/ 但是/ 却/ 使得/ 计算资源/ 的/ 管理/ 更为/ 有效/ ./ 这样/ 资源/ 调度/ 问题/ 就/ 相当于/ 虚拟机/ 放置/ 问题/ ,/ 如何/ 分配/ 虚拟机/ 和/ 物理/ 节点/ 的/ 映射/ 成为/ 影响/ 云/ 性能/ 的/ 关键/ ,/ 这/ 也/ 是/ 云/ 资源/ 调度/ 的/ 研究/ 热点/ [/ 10/ ]/ ./ 因此/ ,/ 本文/ 借鉴/ 网络/ 效用/ 最大化/ (/ NetworkUtilityMaximization/ ,/ NUM/ )/ 模型/ ,/ 提出/ 了/ 一种/ 云/ 资源/ 调度/ 效用/ 最大化/ 模型/ ,/ 简称/ 为云/ 效用/ 最大化/ (/ CloudUtilityMaximization/ ,/ CUM/ )/ 模型/ ./ 近年来/ ,/ NUM/ 模型/ 成为/ 计算机网络/ 体系/ 架构/ 和/ 协议/ 的/ 重要/ 研究/ 方向/ ./ 文献/ [/ 11/ ]/ 最先/ 提出/ 了/ NUM/ 模型/ ,/ 文献/ [/ 12/ ]/ 给出/ 了/ 针对/ NUM/ 模型/ 常用/ 的/ 优化/ 分解/ 方法/ 和/ 分布式/ 算法/ ./ 基本/ 的/ NUM/ 模型/ 可/ 表示/ 成/ 如下/ 形式/ [/ 13/ ]/ :/ 其中/ ,/ 犚/ 为/ 路由/ 矩阵/ (/ routingmatrix/ )/ ;/ 向量/ 犮/ 为/ 各/ 链路/ 最大/ 的/ 传输/ 带宽/ ;/ Us/ 为/ 第/ s/ 个/ 服务/ 的/ 效用函数/ ,/ 通常/ 效用函数/ 是/ 一个/ 光滑/ 、/ 递增/ 的/ 凹/ 函数/ ,/ 并且/ 只/ 依赖于/ 该/ 服务/ 所/ 获得/ 的/ 网络带宽/ xs/ ;/ 问题/ 的/ 目标/ 解/ 向量/ 狓/ ,/ 每个/ 分量/ xs/ 表示/ 为/ 第/ s/ 个/ 服务/ 所/ 分配/ 的/ 网络带宽/ ./ NUM/ 优化/ 问题/ 往往/ 是/ 凸/ 规划/ ,/ 可以/ 获得/ 全局/ 最优/ 解/ ./ 通过/ 反向/ 工程/ 分析/ ,/ 已经/ 证实/ 了/ 按照/ 一些/ 效用函数/ 进行/ 网络带宽/ 分配/ ,/ 可以/ 保证/ 不同/ 的/ 公平/ 策略/ 要求/ ./ 考虑/ 到/ 云/ 计算/ 经济/ 化/ 、/ 市场化/ 的/ 发展趋势/ ,/ 云/ 环境/ 中/ 的/ 计算资源/ 可以/ 参照/ 网络带宽/ 分配/ 策略/ ./ 有/ 学者/ 认为/ 计算资源/ 将/ 成为/ 继水/ 、/ 电/ 、/ 气/ 、/ 电信/ 之后/ 的/ 第五/ 大/ 公共/ 基础设施/ (/ utility/ )/ [/ 1/ ]/ ,/ 越来越/ 多/ 的/ 用户/ 会/ 直接/ 租用/ 计算资源/ 而/ 不再/ 自己/ 购买/ 硬件/ ./ 因此/ ,/ 未来/ 的/ 云/ 可能/ 会象/ 目前/ 的/ Internet/ 网络/ 一样/ ,/ 同时/ 会/ 有/ 很多/ 并发/ 请求/ ./ 如何/ 像/ 网络/ 一样/ ,/ 将/ 有限/ 的/ 资源分配/ 给/ 多个/ 等待/ 的/ 作业/ ,/ 保证/ 总/ 效用/ 最大/ 才/ 是/ 调度/ 的/ 关键/ ./ 而/ 虚拟化/ 技术/ 也/ 使得/ 将/ 所有/ 计算资源/ 统一/ 度量/ 分配/ 成为/ 可能/ ,/ 可以/ 不/ 考虑/ 物理/ 硬件/ 的/ 异构/ 和/ 限制/ ,/ 而是/ 采用/ 统一/ 的/ 描述/ 框架/ 量化/ 所有/ 的/ 物理/ 资源/ ,/ 在/ 效益/ 最大化/ 的/ 目标/ 下/ 进行/ 整体/ 分配/ ,/ 这/ 将/ 是/ 进行/ 云/ 资源/ 调度/ 的/ 一个/ 有效/ 方法/ ./ 基于/ 效用/ 最大化/ 来/ 调度/ 云/ 资源/ 也/ 开始/ 被/ 逐渐/ 采用/ ,/ 在/ 文献/ [/ 14/ ]/ 中/ 提出/ 了/ 云/ 环境/ 中/ 内容/ 提供商/ 如何/ 分发/ 服务/ 的/ 方法/ ,/ 但/ 不/ 属于/ 作业/ 和/ 资源/ 调度/ 层面/ 的/ 问题/ ./ 文献/ [/ 15/ ]/ 提出/ 了/ 一种/ 云/ 资源管理/ 方法/ ,/ 模型/ 的/ Page4/ 目标/ 是/ 使/ 云/ 效用/ 最大/ ,/ 不过/ 最终/ 构造/ 的/ 仍然/ 是/ NP/ -/ Hard/ 问题/ ./ 本文/ 将/ NUM/ 模型/ 的/ 效用函数/ 、/ 分解/ 算法/ 加以改进/ ,/ 用/ 在/ 云/ 计算资源/ 调度/ 中/ ./ 3/ 云/ 效用/ 最大化/ 模型/ 在/ NUM/ 模型/ 中/ ,/ 网络资源/ 一般/ 采用/ 带宽/ 作/ 单位/ ,/ 不同/ 类型/ 的/ 网络/ 传输/ 介质/ ,/ 采用/ 带宽/ 这个/ 单位/ 可以/ 统一/ 衡量/ ./ 网络/ 用户/ 发起/ 的/ 一个/ 网络服务/ 可以/ 使用/ 多条/ 网络/ 路径/ ,/ 一条/ 网络/ 路径/ 上/ 也/ 可以/ 承载/ 多个/ 服务/ ./ 参照/ 网络资源/ 模型/ ,/ 本/ 节/ 首先/ 提出/ 了/ 云/ 资源/ 描述/ 框架/ ,/ 使/ 异构/ 的/ 云/ 计算资源/ 能/ 用/ 单一/ 量化/ 标准/ 计量/ ,/ 便于/ 统一/ 调度/ ./ 其次/ 介绍/ 了/ CUM/ 模型/ 及其/ 效用函数/ 的/ 定义/ ./ 3.1/ 云/ 资源/ 描述/ 框架/ 与/ 传统/ 的/ 并行机/ 调度/ 不同/ ,/ 在/ 云/ 环境/ 下/ ,/ 采用/ 虚拟机/ 技术/ ,/ 可以/ 利用/ 多台/ 物理/ 机/ (/ PM/ )/ 的/ 剩余/ 计算资源/ 实例/ 化成/ 一台/ 虚拟机/ (/ VM/ )/ ,/ 云/ 资源/ 调度/ 问题/ 就/ 可以/ 简化/ 成/ :/ 如何/ 分配/ 物理/ 机/ 资源/ 以/ 达到/ 效用/ 最大化/ ./ 因此/ 可以/ 用图/ 1/ 来/ 表示/ 云/ 资源/ 物理/ 机和/ 虚拟机/ 的/ 框架结构/ ./ 理想/ 的/ 云/ 计算/ 系统/ 中/ 地理位置/ 分散/ 的/ 、/ 异构/ 的/ 物理/ 机都/ 可以/ 统一/ 调度/ ./ 用户/ 通过/ 云/ portal/ 提交/ 作业/ ,/ 资源/ 调度/ 器/ 根据/ 调度/ 策略/ ,/ 决定/ 如何/ 为/ 作业/ 分配/ 物理/ 资源/ ,/ 通过/ 虚拟机/ 监控器/ (/ VMMonitor/ )/ 把/ 相应/ 的/ 物理/ 资源/ 映射/ 为/ 虚拟机/ ./ 如同/ 计算机网络/ 环境/ 下/ ,/ 不同/ 拓扑/ 路径/ 都/ 可以/ 用/ 统一/ 的/ 带宽/ 来/ 衡量/ ./ 在/ 云/ 计算/ 中/ ,/ 一般/ 衡量/ 计算资源/ 主要/ 考查/ CPU/ 、/ 内存/ 、/ I/ // O/ 等/ ,/ 但/ 由于/ 调度/ 性能/ 的/ 限制/ ,/ 常见/ 的/ 调度/ 算法/ 只/ 考虑/ 一个/ CPU/ 维度/ ,/ 少量/ 工作/ 能/ 扩展/ 到/ CPU/ 、/ 内存/ 两个/ 维度/ [/ 11/ ]/ ./ 在/ 本文/ 提出/ 的/ 云/ 资源/ 描述/ 框架/ 下/ ,/ 可以/ 不必/ 关心/ 物理/ 机/ 的/ 差异/ ,/ 而是/ 为/ 所有/ 计算资源/ 制定/ 统一/ 的/ 衡量/ 方式/ ./ 这/ 也/ 符合/ 目前/ 一些/ 云/ 服务提供商/ 的/ 经营/ 模式/ ,/ 例如/ 按/ CPU/ 小时/ 计费/ 等/ ./ 在/ 本文/ 的/ 云/ 资源/ 描述/ 中/ ,/ 做/ 如下/ 假设/ :/ 首先/ 只/ 考虑/ 作业/ 对/ CPU/ 的/ 占用/ ,/ 假设/ 内存/ 和/ I/ // O/ 足够/ ;/ 其次/ 所有/ 物理/ 机/ (/ PM/ )/ 的/ 计算能力/ 采用/ 同一/ 标准/ 度量/ ,/ 即/ MIPS/ ./ 在/ 实际/ 应用环境/ 下/ ,/ 还/ 可以/ 根据/ 需要/ 设定/ 别的/ 衡量/ 方式/ ,/ 如/ 可用/ CPU/ 机时/ ,/ 或是/ CPU/ 和/ 内存/ 的/ 混合/ 限制/ ./ 因此/ ,/ 云/ 资源/ 可以/ 用/ 集合/ {/ C1/ ,/ …/ ,/ Cj/ ,/ …/ ,/ Cm/ }/ 表示/ ,/ 集合/ 中/ 的/ 每个/ 元素/ Cj/ 表示/ 物理/ 机/ j/ 的/ 最大/ 计算能力/ ,/ 单位/ 为/ MIPS/ ./ 3.2/ CUM/ 模型/ 在/ 上述/ 云/ 资源/ 描述/ 框架/ 下/ ,/ 可以/ 将/ 云/ 资源/ 调度/ 问题/ 用/ 如下/ CUM/ 模型表示/ (/ 设有/ n/ 个/ 作业/ ,/ m/ 台/ 物理/ 机/ )/ :/ 其中/ ,/ Cj/ 表示/ 某/ 物理/ 机/ j/ 的/ 最大/ 计算能力/ ,/ 单位/ 为/ MIPS/ ;/ Ii/ 表示/ 作业/ i/ 的/ 计算/ 量/ ,/ 作业/ 所/ 包含/ 的/ 机器指令/ 条数/ ,/ 单位/ MI/ (/ 百万条/ 指令/ 数/ )/ ,/ 可/ 估算/ 得到/ ;/ Di/ 表示/ 作业/ i/ 的/ 最迟/ 完工/ 时间/ ,/ 从/ 提交/ 作业/ 到/ 作业/ 完成/ 所/ 能/ 允许/ 的/ 最长/ 时间/ ,/ 单位/ s/ (/ 秒/ )/ ./ 为了/ 便于/ 表示/ ,/ 引入/ 中间/ 变量/ yi/ ,/ 表示/ 分配/ 给/ 作业/ i/ 的/ 所有/ 计算资源/ 总和/ ,/ 即/ yi/ =/ ∑/ jMIPS/ ./ ∑/ i/ 合/ ,/ 必须/ 小于/ 等于/ 该/ 物理/ 机/ j/ 的/ 最大/ 计算能力/ Cj/ ./ 约束条件/ Ii/ 总和/ 必须/ 能/ 使得/ 作业/ 在/ 最迟/ 完工/ 时间/ 前/ 完成/ ./ 为了/ 便于/ 处理/ ,/ 将/ 该/ 约束条件/ 变形/ 为/ 目标/ 函数/ 为/ 所有/ 作业/ (/ 即/ 所有/ 云/ 用户/ )/ 的/ 效用函数/ Ui/ (/ yi/ )/ 最大/ ,/ 选取/ 不同/ 的/ 效用函数/ 可以/ 实现/ 不同/ 的/ 公平/ 控制策略/ ,/ 在/ 下/ 一/ 小节/ 中将/ 介绍/ 效用函数/ 选择/ ./ Page5/ 显然/ ,/ CUM/ 模型/ 要求/ 所有/ 输入/ 参数/ 必须/ 满足/ 如下/ 条件/ :/ 即当/ 所有/ 作业/ 要求/ 的/ 计算资源/ 超出/ 物理/ 机总/ 计算能力/ 的/ 情况/ 不/ 在/ 模型/ 考虑/ 范围/ 内/ ./ 在/ 模型/ (/ 6/ )/ 中/ ,/ 目标/ 解为/ 矩阵/ 犡/ ,/ 矩阵/ 中/ 每个/ 元素/ xij/ 的/ 含义/ 为/ 每个/ 物理/ 机/ 分给/ 每个/ 作业/ 的/ 计算资源/ ,/ 不/ 局限/ 为/ 0/ -/ 1/ 变量/ ,/ 与/ 传统/ 调度/ 模型/ (/ 3/ )/ 、/ (/ 4/ )/ 相比/ ,/ 不再/ 是/ 整数/ 规划/ 问题/ ./ 传统/ 的/ 调度/ 模型/ ,/ 一个/ 作业/ 只能/ 分给/ 一台/ 机器/ ,/ 要求/ 目标/ 解/ 必须/ 是/ 0/ -/ 1/ 矩阵/ ./ 而/ 本文/ 提出/ 的/ CUM/ 模型/ 目标/ 是/ 找出/ 物理/ 机/ 分配/ 多少/ 比例/ 的/ 计算资源/ 给/ 某个/ 作业/ ,/ 一个/ 作业/ 可以/ 通过/ 虚拟机/ 技术/ 同时/ 使用/ 多个/ 物理/ 机/ 的/ 资源/ ,/ 而且/ 并/ 不/ 独占/ ,/ 物理/ 机/ 剩余/ 的/ 计算资源/ 可以/ 分给/ 其它/ 作业/ ./ 模型/ (/ 6/ )/ 没有/ 考虑/ 虚拟化/ 技术/ 、/ 并行/ 通信/ 所/ 造成/ 的/ 额外/ CPU/ 消耗/ ./ 通常/ 作业/ 分配/ 到/ 越/ 多/ 的/ 物理/ 机上/ 执行/ 额外/ 开销/ 就/ 越/ 大/ ,/ 但/ 这个/ 约束条件/ 难以确定/ 描述/ ./ 此外/ 虚拟机/ 技术/ 虽然/ 带来/ 额外/ 开销/ ,/ 但是/ 可以/ 给/ 云/ 用户/ 提供/ 不同/ 的/ 操作系统/ 环境/ ,/ 安全性/ 也/ 更/ 有/ 保证/ ,/ 随着/ 虚拟机/ 技术/ 的/ 普遍/ 应用/ ,/ 这些/ 额外/ 开销/ 可以/ 视为/ 固定成本/ ,/ 在/ 云/ 资源/ 调度/ 中/ 可以/ 不/ 单独/ 计算/ ./ 此外/ 模型/ (/ 6/ )/ 中/ 没有/ 考虑/ 作业/ 到达/ 时间/ ,/ 也/ 不/ 考虑/ 排队/ ,/ 而是/ 针对/ 现有/ 作业/ ,/ 如何/ 将/ 所有/ 的/ PM/ 资源/ 划分/ 成/ 不同/ VM/ 分给/ 不同/ 的/ 作业/ ./ 在/ 传统/ 并行机/ 、/ 网格/ 调度/ 中/ 都/ 是/ 要/ 考虑/ 作业/ 到达/ 时间/ ,/ 而且/ 都/ 是/ 有/ 排队/ 情形/ ,/ 作业/ 排队/ 优先级/ 不同/ ./ 本文/ CUM/ 模型/ 中/ 没/ 体现/ 时间/ 因素/ ,/ 因为/ 在/ 常见/ 的/ 网络/ NUM/ 模型/ 中/ ,/ 也/ 只/ 考虑/ 当前/ 发起/ 的/ 网络/ 请求/ 如何/ 共享/ 带宽/ ,/ 也/ 没/ 考虑/ 时间/ 问题/ ./ 网络/ 一般/ 都/ 是/ 满载/ 的/ ,/ 现有/ 的/ 应用/ 能/ 合理/ 分配/ 带宽/ 避免/ 拥塞/ 即可/ ./ 随着/ 云/ 计算/ 的/ 普及/ ,/ 云/ 计算资源/ 的/ 分配/ 也/ 会/ 向/ 网络/ 分配/ 带宽/ 一样/ ,/ 针对/ 现有/ 作业/ 合理/ 分配/ 计算资源/ ./ 而且/ 考虑/ 到/ 与/ 网络/ 的/ 不同/ ,/ 本文/ 模型/ 还是/ 考虑/ 了/ 部分/ 时间/ 因素/ :/ 作业/ 的/ 最迟/ 完工/ 时间/ ,/ 要/ 保证/ 分配/ 给/ 作业/ 足够/ 计算资源/ 以便/ 在/ 最迟/ 完工/ 时间/ 前/ 完成/ ./ 3.3/ 效用函数/ 效用函数/ 描述/ 了/ 用户/ 对于/ 所/ 获得/ 的/ 某种/ 服务/ 在/ 一定/ 衡量/ 单位/ 下/ 的/ 满意度/ [/ 16/ ]/ ./ 以/ NUM/ 模型/ 为例/ ,/ 效用函数/ 是/ 所/ 获得/ 的/ 网络带宽/ 的/ 单调/ 递增/ 函数/ ,/ 一般/ 采用/ 如下/ 效用函数/ :/ 其中/ ,/ x/ 表示/ 用户/ 获得/ 的/ 服务/ ;/ w/ 为/ 用户/ 获得/ 该/ 服务/ 而/ 愿意/ 提供/ 的/ 支付/ (/ willingness/ -/ to/ -/ pay/ )/ ./ 通过/ 计算机网络/ 反向/ 工程/ 分析/ 结果/ 证实/ ,/ 当/ α/ =/ 1/ 时/ ,/ 效用函数/ U/ (/ x/ )/ =/ wlogx/ 也/ 称为/ 对数函数/ ,/ 对数/ 效用函数/ 可以/ 实现/ 竞争/ 网络资源/ 的/ 各/ 用户/ 之间/ 的/ 比例/ 公平性/ (/ proportionalfair/ )/ ;/ 当/ α/ >/ 1/ 时/ ,/ 效用函数/ U/ (/ x/ )/ =/ w/ (/ 1/ -/ α/ )/ -/ 1x1/ -/ α/ 也/ 称为/ 负/ 指数函数/ ,/ 可/ 提供/ α/ -/ 公平性/ (/ α/ -/ fair/ )/ ./ 对数/ 效用函数/ 被/ 广泛/ 用于/ 有线/ 网络/ 和/ 无线网络/ 的/ 网络资源/ 分配/ 算法/ 中/ ,/ 传统/ 的/ TCP/ 协议/ 实际/ 达成/ 的/ 带宽/ 分配/ 恰恰/ 符合/ 的/ 是/ w/ =/ 1/ 的/ 对数/ 效用函数/ ./ 对数/ 效用函数/ 在/ [/ 0/ ,/ +/ )/ 区间/ 内/ 的/ 曲线/ 如图/ 2/ 所示/ ./ 如图/ 2/ 所示/ ,/ 对数/ 效用函数/ 为/ 单调/ 递增/ 的/ 凹/ 函数/ (/ concavefunction/ )/ ,/ 且/ 增长速度/ 趋于/ 平缓/ ,/ 即/ 在/ 区间/ 内/ 任意/ 点/ x0/ 处/ 的/ 一阶/ 导数/ 大于/ 0/ ,/ 二阶/ 导数/ 小于/ 0/ ,/ 这/ 也/ 是/ 经济学/ 中/ 选取/ 效用函数/ 的/ 基本/ 要求/ ./ 为了/ 便于/ 描述/ ,/ 给出/ 如下/ 条件/ ./ 引理/ 1/ ./ 效用函数/ 选取/ 条件/ :/ 如果/ 函数/ U/ (/ x/ )/ 在/ 自变量/ 约束/ 区间/ 内/ 任意/ 点/ x0/ 处/ 的/ 一阶/ 导数/ U/ (/ x0/ )/ >/ 0/ ,/ 二阶/ 导数/ U/ (/ x0/ )/ </ 0/ ,/ 则/ 可/ 表示/ 在/ 某种/ 情况/ 下/ 用户/ 对/ 获得/ 某种/ 服务/ 的/ 满意度/ ./ 本文/ 目前/ 的/ 工作/ 只/ 选定/ 对数/ 效用函数/ 进行/ 实验/ 模拟/ ./ CUM/ 模型/ 本身/ 不/ 局限于/ 特定/ 的/ 效用函数/ ,/ 只要/ 引理/ 1/ 的/ 函数/ 均/ 可/ 使用/ ./ 选择/ 不同/ 的/ 效用函数/ ,/ 可以/ 实现/ 不同/ 目标/ 的/ 资源/ 调度/ 策略/ ./ 在/ 后续/ 的/ 工作/ 中将/ 对/ 不同/ 效用函数/ 产生/ 的/ 结果/ 进行/ 比较/ ./ 3.4/ 模型/ 最优性/ 条件/ 已知/ 效用函数/ Ui/ (/ yi/ )/ =/ wilog/ (/ yi/ )/ 为/ 递增/ 的/ 凹/ 函数/ ,/ 则/ 式/ (/ 5/ )/ 描述/ 的/ CUM/ 模型/ 的/ 目标/ 函数/ 也/ 是/ 凹/ 函数/ ./ 现/ 考察/ 其/ 约束/ 域/ 情况/ ,/ 式/ (/ 5/ )/ 中显式/ 约束条件/ 有/ 两个/ ,/ ∑/ iPage6/ 化为/ 如下/ 形式/ :/ 其中/ ,/ 约束条件/ (/ c2/ )/ 表示/ 为/ 作业/ i/ 分配/ 的/ 资源/ 要/ 足够/ 保证/ 作业/ 能/ 在/ 最迟/ 完工/ 时间/ 前/ 完工/ ,/ 实际/ 只要/ 不晚/ 于/ 最迟/ 完工/ 时间/ 即可/ ./ 因此/ ,/ 在/ 不/ 影响/ 最优/ 解/ 的/ 前提/ 下/ ,/ 可以/ 将/ 约束条件/ (/ c2/ )/ 写成/ :/ 即/ CUM/ 模型/ 的/ 显式/ 约束条件/ 可/ 表示/ 为/ 如下/ 线性/ 不等式/ 和/ 等式/ 集合/ :/ 该/ 集合/ 定义/ 了/ 一个/ 多面体/ ,/ 是/ 一个/ 典型/ 的/ 凸集/ ./ 图/ 3/ 以/ 5/ 台/ 物理/ 机/ 、/ 5/ 个/ 作业/ (/ m/ =/ 5/ ,/ n/ =/ 5/ )/ 为例/ ,/ 给出/ 了/ CUM/ 模型/ 解/ 空间/ ./ 如上所述/ ,/ 目标/ 函数/ 为/ 单调/ 递增/ 凹/ 函数/ ,/ 约束/ 域/ 是/ 凸集/ ,/ 则/ CUM/ 优化/ 问题/ 是/ 一个/ 凸/ 规划/ 问题/ (/ convexoptimization/ )/ ,/ 存在/ 最优/ 解/ ./ 4/ 优化/ 算法/ 本节/ 将/ 通过/ 拉格朗/ 日/ 分解/ 方法/ 简化/ 模型/ ,/ 设计/ 次梯度/ 求解/ 算法/ ./ 拉格朗/ 日/ 松弛/ 算法/ 是/ 20/ 世纪/ 70/ 年代/ 被/ 提出/ 来/ 的/ [/ 17/ -/ 18/ ]/ ,/ 该/ 算法/ 主要/ 包括/ 以下/ 几个/ 要点/ :/ 松弛/ 约束/ 的/ 选择/ 、/ 拉格朗/ 日/ 算子/ 的/ 调整/ 和/ 可行/ 解/ 的/ 构造/ 等/ ./ 次梯度/ 算法/ 是/ 处理/ 拉格朗/ 日/ 对/ 偶函数/ 的/ 有效/ 方法/ [/ 19/ -/ 20/ ]/ ./ 4.1/ 拉格朗/ 日/ 松弛/ 拉格朗/ 日/ 函数/ :/ L/ (/ 狓/ ,/ y/ ;/ λ/ ,/ μ/ )/ =/ ∑/ n/ 用/ 拉格朗/ 日/ 因子/ 松弛/ 原/ 问题/ 的/ 优化/ 条件/ ,/ 得到/ 其中/ ,/ λ/ j/ / 0/ ,/ μ/ i/ / 0/ 为/ 拉格朗/ 日/ 因子/ ;/ δ/ j/ / 0/ ,/ γ/ i/ / 0/ 为/ 松弛/ 变量/ ./ 从/ 实际/ 经济/ 含义/ 考虑/ ,/ 拉格朗/ 日/ 因子/ λ/ j/ 可以/ 看作/ 物理/ 机为/ 提供/ 单位/ 计算资源/ 而/ 收取/ 的/ 价格/ ,/ μ/ i/ 可以/ 看作/ 提前完成/ 作业/ 的/ 奖励/ 价格/ (/ 同时/ 也/ 是/ 无法/ 在/ 最迟/ 完工/ 时间/ 前/ 完成/ 作业/ 的/ 惩罚/ 价格/ )/ ./ 松弛/ 变量/ δ/ j/ 表示/ 物理/ 机/ j/ 剩余/ 的/ 计算能力/ ,/ 松弛/ 变量/ γ/ i/ 表示/ 作业/ i/ 提前/ 完工/ 的/ 时间/ (/ 即/ 最迟/ 完工/ 时间/ 和/ 实际/ 完工/ 时间/ 的/ 差值/ )/ ./ 因为/ 从/ 效益/ 上/ 来讲/ ,/ 每个/ 作业/ 应/ 尽可能/ 获得/ 更/ 多/ 的/ 计算资源/ ,/ 因此/ 可令/ 松弛/ 变量/ δ/ j/ 为/ 0/ ./ 为了/ 简化/ 优化/ 问题/ ,/ 只/ 需要/ 尽量/ 保证/ 作业/ 在/ 最迟/ 完工/ 时间/ 时/ 执行/ 完毕/ ,/ 不必/ 考虑/ 提前完成/ ,/ 因此/ 可令/ 松弛/ 变量/ γ/ i/ 为/ 0/ ./ 将式/ (/ 7/ )/ 整理/ 后/ 如下/ :/ L/ (/ 狓/ ;/ λ/ ,/ μ/ )/ =/ ∑/ n/ 为了/ 简化/ 问题/ ,/ 再/ 不/ 影响/ CUM/ 模型/ 含义/ 的/ 情况/ 下/ ,/ 将/ 对数/ 效用函数/ 简化/ ,/ 代入/ 式/ (/ 9/ )/ ,/ 得到/ L/ (/ 狓/ ;/ λ/ ,/ μ/ )/ =/ ∑/ n/ 式/ (/ 10/ )/ 为/ 最终/ 得到/ 的/ 拉格朗/ 日/ 函数/ ,/ 记作/ L/ ./ 由此/ 可得/ 原/ 问题/ 的/ 对偶/ 问题/ ,/ 记作/ LD/ ./ 针对/ 对偶/ 问题/ LD/ ,/ 设计/ 了/ 优化/ 算法/ 求解/ 目标/ 解/ ./ 4.2/ 简化/ 次梯度/ 算法/ 次梯度/ 优化/ 算法/ (/ SubgradientOptimizationAlgorithm/ )/ 通过/ 求解/ 对偶/ 问题/ 而/ 逐步/ 逼近/ 原/ 问题/ ./ 次梯度/ 算法/ 是/ 求解/ 不可/ 微/ 优化/ 问题/ 的/ 最/ 常用/ 方法/ [/ 21/ ]/ ./ 在/ 每次/ 迭代/ 中/ 更新/ 拉格朗/ 日/ 因子/ 狌/ :/ 其中/ ,/ s/ (/ k/ )/ 为/ 迭代/ 步长/ ;/ 犵/ (/ k/ )/ 为/ 第/ k/ 次/ 迭代/ 中/ L/ (/ k/ )/ 的/ 次梯度/ ,/ 即/ 迭代/ 的/ 下降/ 方向/ ./ 针对/ CUM/ 模型/ ,/ 本文/ 设计/ 了/ 一种/ 简化/ 的/ 次梯度/ 算法/ ,/ 称为/ CUM/ 简化/ 次梯度/ 算法/ ./ 主要/ 思想/ 是/ 简化/ 每/ 一步/ 对/ 下降/ 方向/ 的/ 求解/ ,/ 以/ 拉格朗/ 日/ 因子/ 的/ 导数/ 作为/ 次梯度/ 犵/ ./ 个/ 分量/ λ/ j/ 和/ μ/ i/ 均/ 可微/ ,/ 因此/ 令/ 在/ 式/ (/ 10/ )/ 中/ ,/ 拉格朗/ 日/ 因子/ 狌/ =/ [/ λ/ ,/ μ/ ]/ T/ ,/ 其中/ 每/ Page7/ 熿/ 犵/ =/ 燀/ 即/ 次梯度/ 犵/ 为/ m/ +/ n/ 维/ 矢量/ ./ 完整/ 的/ CUM/ 简化/ 次梯度/ 算法/ 描述/ 如下/ ./ 算法/ 1/ ./ CUM/ 简化/ 次梯度/ 算法/ ./ 输入/ :/ m/ 台/ 物理/ 机/ 计算资源/ 集合/ C/ =/ {/ C1/ ,/ …/ Cj/ ,/ …/ ,/ Cm/ }/ ,/ n/ 个/ 作业/ 愿意/ 提供/ 的/ 支付/ 集合/ W/ =/ {/ w1/ ,/ …/ ,/ wi/ ,/ …/ ,/ wn/ }/ ,/ n/ 个/ 作业/ 的/ 计算/ 量/ 集合/ I/ =/ {/ I1/ ,/ …/ ,/ Ii/ ,/ …/ ,/ In/ }/ ,/ n/ 个/ 作业/ 的/ 最迟/ 完工/ 时间/ 集合/ D/ =/ {/ D1/ ,/ …/ ,/ Di/ ,/ …/ ,/ Dn/ }/ 输出/ :/ 目标/ 解/ 矩阵/ 犡/ (/ n/ ×/ m/ 矩阵/ )/ 算法/ 步骤/ :/ 1/ ./ 设定/ 初始/ 点/ —/ —/ —/ 犡/ (/ 1/ )/ 为/ 全零/ 矩阵/ ,/ 即/ 任意/ 元素/ xij/ =/ 0/ ,/ λ/ (/ 1/ )/ =/ [/ 1/ ,/ 1/ ,/ …/ ]/ T/ ,/ μ/ (/ 1/ )/ =/ [/ w1/ ,/ w2/ ,/ …/ ,/ wn/ ]/ T/ ,/ 允许/ 误差/ ε/ >/ 0/ ,/ 置/ k/ =/ 1.2/ ./ 计算/ 次梯度/ 犵/ (/ k/ )/ ./ 3/ ./ 将/ λ/ (/ k/ )/ 和/ μ/ (/ k/ )/ 代入/ 拉格朗/ 日/ 函数/ L/ ,/ 令/ / L/ 程组/ ,/ 得到/ 第/ k/ 次/ 迭代/ 目标/ 解/ 犡/ (/ k/ )/ ./ 4/ ./ 若/ ‖/ 犵/ (/ k/ )/ ‖/ / ε/ ,/ 则/ 停止/ 迭代/ ;/ 否则/ 求/ 步长/ s/ (/ k/ )/ ,/ 令/ 其中/ ,/ 珚/ L/ 为/ 拉格朗/ 日/ 对偶/ 问题/ 的/ 估计/ 最优/ 目标值/ ,/ 采用/ 估计值/ ;/ 若/ 计算/ 出/ 的/ 步长/ s/ (/ k/ )/ / 0/ ,/ 则/ 继续/ 采用/ 上/ 一次/ 步长/ ,/ 即/ s/ (/ k/ )/ =/ s/ (/ k/ -/ 1/ )/ ./ k/ =/ k/ +/ 1/ ,/ 转步/ 2.5/ ./ 利用/ 式/ (/ 11/ )/ 更新/ 拉格朗/ 日/ 算子/ ,/ 求/ λ/ (/ k/ +/ 1/ )/ 和/ μ/ (/ k/ +/ 1/ )/ ,/ 可以/ 根据/ 需要/ 设置/ 允许/ 误差/ ε/ ,/ 获得/ 不同/ 精度/ 的/ 最优/ 解/ ./ 算法/ 中/ 使用/ 的/ 估计/ 最优/ 目标值/ 珚/ L/ 可以/ 通过/ 启发式/ 搜索算法/ 估算/ ,/ 或者/ 直接/ 使用/ Matlab/ 、/ LINGO/ 等/ 软件/ 计算/ 得到/ ./ 文献/ [/ 21/ ]/ 从/ 理论/ 上/ 分析/ 了/ 估计值/ 珚/ L/ 的/ 偏差/ 对/ 计算结果/ 产生/ 的/ 影响/ ./ 在/ CUM/ 简化/ 梯度/ 算法/ 中/ ,/ 通过/ 步/ 4/ 的/ 调整/ ,/ 减少/ 了/ 这种/ 偏差/ 对/ 结果/ 的/ 影响/ ./ 4.3/ 算法/ 收敛性/ 假设/ 狌/ / 为/ 拉格朗/ 日/ 对偶/ 问题/ 的/ 最优/ 解/ ,/ L/ / 为/ 此时/ 拉格朗/ 日/ 函数/ 值/ ./ 在/ CUM/ 简化/ 次梯度/ 算法/ 中/ ,/ 第/ k/ +/ 1/ 次/ 迭代/ 得到/ 的/ 拉格朗/ 日/ 因子/ 狌/ (/ k/ +/ 1/ )/ 必定/ 比/ 第/ k/ 次/ 迭代/ 的/ 狌/ (/ k/ )/ 更/ 逼近/ 狌/ / ,/ 即/ 证明/ 如下/ :/ ‖/ 狌/ / -/ 狌/ (/ k/ +/ 1/ )/ ‖/ 2/ =/ ‖/ 狌/ / -/ 狌/ (/ k/ )/ -/ s/ (/ k/ )/ 犵/ (/ k/ )/ ‖/ 2/ =/ ‖/ 狌/ / -/ 狌/ (/ k/ )/ ‖/ 2/ -/ 2s/ (/ k/ )/ 犵/ (/ k/ )/ (/ 狌/ / -/ 狌/ (/ k/ )/ )/ +/ (/ s/ (/ k/ )/ )/ 2/ ‖/ 犵/ (/ k/ )/ ‖/ 2/ =/ ‖/ 狌/ / -/ 狌/ (/ k/ )/ ‖/ 2/ -/ s/ (/ k/ )/ (/ 2/ 犵/ (/ k/ )/ (/ 狌/ / -/ 狌/ (/ k/ )/ )/ -/ s/ (/ k/ )/ ‖/ 犵/ (/ k/ )/ ‖/ 2/ )/ ./ 根据/ 求/ 步长/ 公式/ ,/ 可/ 得/ ‖/ 狌/ / -/ 狌/ (/ k/ +/ 1/ )/ ‖/ 2/ =/ ‖/ 狌/ / -/ 狌/ (/ k/ )/ ‖/ 2/ -/ s/ (/ k/ )/ (/ 2/ 犵/ (/ k/ )/ (/ 狌/ / -/ 狌/ (/ k/ )/ )/ -/ (/ L/ / -/ L/ (/ k/ )/ )/ )/ ./ 根据/ 拉格朗/ 日/ 对/ 偶函数/ 的/ 性质/ ,/ 可知/ ,/ 所以/ ,/ 则/ 可得/ -/ s/ (/ k/ )/ (/ -/ 2/ 犵/ (/ k/ )/ (/ 狌/ / -/ 狌/ (/ k/ )/ )/ +/ L/ / -/ L/ (/ k/ )/ )/ </ 0/ ,/ 式/ (/ 13/ )/ 得证/ ,/ 因此/ CUM/ 简化/ 次梯度/ 算法/ 是/ 收敛/ 的/ ./ 5/ 实验/ 和/ 分析/ 为了/ 验证/ CUM/ 简化/ 次梯度/ 算法/ 的/ 可行性/ 和/ 收敛/ 性能/ ,/ 本/ 节/ 给出/ 仿真/ 计算结果/ ,/ 并/ 分析/ 了/ 算法/ 复杂性/ ./ 最后/ 给出/ CUM/ 模型/ 在/ 真实/ 云/ 环境/ 下/ 的/ 应用/ 场景/ ./ 5.1/ 仿真/ 结果/ 随机/ 生成/ 物理/ 机和/ 作业/ 相关/ 参数/ ,/ 作为/ 算法/ 输入/ ,/ 以/ 模拟/ 不同/ 规模/ 的/ 云/ 资源/ 调度/ 情况/ ./ 生成/ 的/ 随机数/ 满足/ 如下/ 条件/ :/ 即/ 所有/ 物理/ 机/ 计算能力/ 总和/ (/ 单位/ :/ MIPS/ )/ / 所有/ 作业/ 的/ 计算/ 量/ (/ 单位/ :/ MI/ )/ 与/ 最迟/ 完工/ 时间/ (/ 单位/ :/ s/ )/ 商之/ 和/ ./ 实验/ 运行/ 硬件/ 环境/ :/ 一台/ PC机/ ,/ CPU/ 主频/ 2.4/ GHz/ ,/ 内存/ 4GB/ ./ 首先/ ,/ 为了/ 验证/ 算法/ 的/ 可行性/ ,/ 设计/ 了/ 一组/ 规模较/ 小/ 的/ 输入/ 参数/ (/ 3/ 个/ 作业/ ,/ 3/ 台/ 物理/ 机/ )/ ,/ 这样/ 规模较/ 小/ 的/ 问题/ ,/ Matlab/ 的/ fmincon/ 函数/ 可算出/ 较/ 好/ 结果/ ,/ 以便/ 和/ 本文/ 算法/ 比较/ ,/ 该类/ 模拟/ 问题/ 记作/ P/ (/ 3/ ,/ 3/ )/ ./ 指定/ 输入/ 参数/ 如下/ :/ 有/ 3/ 台/ 物理/ 机/ ,/ 计算资源/ 分别/ 为/ C/ =/ {/ 1/ ,/ 2/ ,/ 3/ }/ ;/ 有/ 3/ 个/ 作业/ :/ W/ =/ {/ 1/ ,/ 2/ ,/ 3/ }/ ,/ I/ =/ {/ 3/ ,/ 2/ ,/ 1/ }/ ,/ D/ =/ {/ 3/ ,/ 2/ ,/ 1/ }/ ./ 此时/ 构造/ 了/ 问题/ P/ (/ 3/ ,/ 3/ )/ 的/ 一个/ 实例/ ,/ 记作/ P1/ (/ 3/ ,/ 3/ )/ ./ 表/ 1/ 给出/ 了/ 针对/ P1/ (/ 3/ ,/ 3/ )/ ,/ 本文/ 算法/ 和/ Matlab/ 的/ 计算结果/ ./ Page8/ 表/ 1/ 本文/ 算法/ 所得/ 解与/ fmincon/ 比较/ x11x12x13y1x21x22x23y2x31x32x33y3/ ∑/ i/ 本文/ 算法/ 0.23330/ ./ 33330.43330/ ./ 99990.56670/ ./ 66670.76672/ ./ 00010.20001/ ./ 00001.80003/ ./ 00004.6820/ fmincon0/ ./ 09010.28870/ ./ 62211.00090/ ./ 28830.68901/ ./ 02241.99970/ ./ 62161.02231/ ./ 35562.99954/ ./ 6821/ 表/ 3/ 给出/ 了/ 问题/ P/ (/ 10/ ,/ 5/ )/ 的/ 4/ 个/ 实例/ 的/ 计算/ 从表/ 1/ 中/ 可以/ 看出/ ,/ 对于/ 问题/ P1/ (/ 3/ ,/ 3/ )/ ,/ 使用/ 本文/ 算法/ 得到/ 的/ 最优/ 解/ 矩阵/ 犡/ 和/ Matlab/ 的/ fmincon/ 函数/ 结果/ 虽然/ 不尽相同/ ,/ 但是/ 目标/ 函数/ 值/ 基本相同/ ,/ 证明/ 了/ 本文/ 算法/ 的/ 正确性/ ./ 为了/ 验证/ 算法/ 的/ 收敛性/ ,/ 将/ 问题/ 规模/ 扩大/ ,/ 构造/ 的/ 问题/ 记作/ P/ (/ n/ ,/ m/ )/ ,/ 其中/ n/ 表示/ 作业/ 数/ ,/ m/ 表示/ 物理/ 机数/ ./ 分别/ 构造/ 3/ 类/ 规模/ 的/ 问题/ :/ P/ (/ 5/ ,/ 10/ )/ 、/ P/ (/ 10/ ,/ 5/ )/ 、/ P/ (/ 50/ ,/ 50/ )/ ./ 3/ 类/ 问题/ 的/ 输入/ 参数/ :/ 物理/ 机/ 计算能力/ Cj/ 、/ 作业/ 愿意/ 提供/ 的/ 支付/ wi/ 、/ 作业/ 计算/ 量/ Ii/ 、/ 最迟/ 完工/ 时间/ Di/ ,/ 均/ 采用/ 符合/ 均匀分布/ 的/ 随机数/ ,/ 如果/ 生成/ 的/ 随机数/ 不/ 满足/ 式/ (/ 13/ )/ 的/ 条件/ ,/ 则/ 重新/ 生成/ ./ 对/ 上述/ 3/ 类/ 模拟/ 问题/ ,/ 主要/ 分析/ 算法/ 的/ 迭代/ 次数/ ./ 每类/ 问题/ 随机/ 生成/ 4/ 组/ 输入/ 参数/ ,/ 即/ 构造/ 出/ 问题/ 的/ 4/ 个/ 实例/ ,/ 比较/ 迭代/ 次数/ ./ 表/ 2/ 给出/ 了/ 问题/ P/ (/ 5/ ,/ 10/ )/ 的/ 4/ 个/ 实例/ 的/ 计算结果/ ./ 迭代/ 次数/ 1017.51514/ ./ 39013.5759/ ./ 4682018.15315/ ./ 39813.97210/ ./ 1583018.27415/ ./ 918/ -/ 10.47240/ -/ -/ -/ -/ P/ (/ 5/ ,/ 10/ )/ 规模/ 下/ 构造/ 的/ 4/ 个子/ 问题/ ,/ 其/ 迭代/ 收敛/ 情况/ 如图/ 4/ 所示/ ./ 结果/ ./ 迭代/ 次数/ 1063.95969/ ./ 39077.97263/ ./ 0682064.15370/ ./ 91878.75864/ ./ 2693065.47771/ ./ 85879.03865/ ./ 8284066.82772/ ./ 13380.25466/ ./ 5935067.01373/ ./ 25481.44267/ ./ 3977567.886/ -/ -/ -/ 100/ -/ -/ -/ -/ 图/ 5/ 为/ 对应/ 的/ 收敛/ 曲线图/ ./ 表/ 4/ 给出/ 了/ 问题/ P/ (/ 50/ ,/ 50/ )/ 的/ 4/ 个/ 实例/ 的/ 计算结果/ ./ 迭代/ 次数/ 10520.876408/ ./ 879653.869718/ ./ 98320548.021439/ ./ 203681.021742/ ./ 38730579.954471/ ./ 936714.763770/ ./ 86540593.286506/ ./ 147748.011791/ ./ 01250602.011521/ ./ 978769.613813/ ./ 43275616.947529/ ./ 743778.864819/ ./ 165100620.842533/ ./ 879781.276822/ ./ 034125623.431535/ ./ 327784.012824/ ./ 986150625.017536/ ./ 414785.873825/ ./ 484175626.525/ -/ 786.352/ -/ 200/ -/ -/ -/ -/ 图/ 6/ 为/ 对应/ 的/ 收敛/ 曲线图/ ./ Page9/ 通过/ 上述/ 3/ 组/ 数据/ 可以/ 看出/ ,/ 不同/ 规模/ 、/ 不同/ 输入/ 的/ 问题/ ,/ 在/ 有限/ 次/ 迭代/ 后均/ 得到/ 了/ 最优/ 解/ ./ 同一/ 规模/ 的/ 问题/ 虽然/ 迭代/ 次数/ 略有/ 差别/ ,/ 但是/ 总体/ 相差/ 不大/ ./ 此外/ 为了/ 考察/ 更/ 大规模/ 问题/ 下/ 算法/ 的/ 收敛性/ ,/ 分别/ 构造/ 了/ 小规模/ 、/ 中/ 规模/ 、/ 大规模/ 3/ 类/ 输入/ 参数/ ,/ 比较/ 求解/ 时/ 的/ 迭代/ 次数/ ,/ 实验/ 结果/ 如表/ 5/ 所示/ ./ 问题/ 规模/ 作业/ 数/ 物理/ 机数/ 迭代/ 次数/ 小规模/ 中/ 规模/ 大规模/ 1000200/ 由表/ 5/ 数据/ 可见/ ,/ 当/ 问题/ 规模/ 增加/ 时/ ,/ 迭代/ 次数/ 仍然/ 在/ 可/ 接受/ 范围/ 内/ ./ 图/ 7/ 给出/ 了/ 问题/ 规模/ 和/ 迭代/ 次数/ 的/ 关系/ 曲面/ 图/ ./ 通过/ 理论/ 证明/ 和/ 实验/ 数据/ 可/ 得出/ ,/ CUM/ 简化/ 次梯度/ 算法/ 属于/ 线性/ 时间/ 算法/ ,/ 对于/ 规模/ 为/ m/ 个/ 作业/ 、/ n/ 个/ 物理/ 机/ 的/ 输入/ 问题/ P/ (/ m/ ,/ n/ )/ ,/ 通过/ 有限/ k/ 次/ 迭代/ 可/ 获得/ 最优/ 解/ ,/ 算法/ 时间/ 复杂度/ 为/ O/ (/ mn/ )/ ./ 5.2/ 应用/ 场景/ 给出/ 了/ 其/ 应用/ 模式/ ./ CUM/ 模型/ 可/ 应用/ 于/ 规模/ 较大/ 的/ 云/ 环境/ 中/ ,/ 图/ 8/ 图/ 8/ 中/ ,/ CUM/ 全局/ 调度/ 管理器/ (/ CUMscheduler/ )/ 实时/ 接收/ 虚拟机/ 监控器/ (/ VMMonitor/ )/ 发来/ 的/ 计算资源/ 使用/ 情况/ ,/ 根据/ 作业/ 、/ 剩余/ 资源/ 确定/ 效用/ 最大化/ 的/ 虚拟机/ 放置/ 策略/ ,/ 创建/ 虚拟机/ ,/ 将/ 作业/ 分配/ 到/ 虚拟机/ 上/ 执行/ ./ 与/ 传统/ 的/ 集群/ 、/ 网格/ 计算环境/ 中/ 采用/ 的/ 作业/ 调度/ 管理器/ (/ scheduler/ )/ 相比/ ,/ CUMscheduler/ 首先/ 确定/ 虚拟机/ 放置/ 策略/ ,/ 即/ 多少/ 物理/ 计算资源/ 实例/ 化成/ 一个/ 虚拟机/ ,/ 然后/ 将/ 作业/ 分配/ 到/ 虚拟机/ 上/ 执行/ ./ 在/ 真实/ 云/ 环境/ 中/ ,/ 可/ 在/ CUMscheduler/ 前端/ 增加/ 作业/ 预处理/ 模块/ ,/ 通过/ 用户/ 竞价/ 、/ 用户/ 选择/ 偏好/ 来/ 划分/ 作业/ 层次/ ,/ 由/ 高/ 至/ 低/ 排列/ ,/ 设置/ 高低/ 不同/ 的/ 愿意/ 提供/ 的/ 支付/ 值/ wi/ ./ 经过/ 分级/ 后/ 的/ 作业/ 提交/ 给/ CUMscheduler/ ,/ 进行/ 调度/ ./ CUM/ 模型/ 以/ 效用/ 最大化/ 作为/ 优化/ 目标/ ,/ 这种/ 优化/ 方式/ 在/ 计算机/ 网络带宽/ 分配/ 中/ 取得/ 了/ 很/ 好/ 的/ 效果/ ./ 计算机网络/ 承载/ 的/ 业务/ 往往/ 具有/ 如下/ 特点/ :/ 某一/ 时刻/ 往往/ 很多/ 业务/ 同时/ 到达/ 请求/ 服务/ ,/ 业务/ 对/ 服务质量/ 的/ 要求/ 差距/ 大/ ,/ 高峰期/ 网络资源/ 基本/ 满负荷/ ./ 因此/ 当云/ 计算/ 不断/ 发展/ ,/ 用户/ 对/ 计算资源/ 的/ 需求/ 如同/ 对/ 网络/ 需求/ 一样/ 普遍/ 时/ ,/ CUM/ 模型/ 的/ 调度/ 优势/ 更为/ 明显/ ./ 6/ 结论/ 本文/ 提出/ 的/ 云/ 资源/ CUM/ 调度/ 模型/ ,/ 和/ 以往/ 0/ -/ 1/ 整数/ 规划/ 的/ 调度/ 方法/ 不同/ ,/ 利用/ 计算机网络/ 中/ NUM/ 模型/ 思路/ ,/ 实现/ 了/ 对/ 物理/ 机/ 计算资源/ 的/ 更/ 高层次/ 分配/ :/ 以/ 效用/ 最大/ 为/ 调度/ 目标/ ,/ 一台/ 或/ 多台/ 物理/ 机/ 资源/ 如同/ 网络/ 链路/ 的/ 带宽/ 一样/ ,/ 通过/ 虚拟化/ 技术/ 分配/ 给/ 一个/ 或/ 多个/ 作业/ ./ 此外/ 给出/ 了/ 该/ 模型/ 的/ 优化/ 算法/ ,/ 通过/ 简化/ 的/ 次梯度/ 算法/ 求解/ 该/ 模型/ 的/ 拉格朗/ 日/ 对偶/ 问题/ ./ 通过/ 模拟实验/ 表明/ ,/ 算法/ 具有/ 可行性/ 和/ Page10/ 较/ 好/ 的/ 收敛性/ ./ 下/ 一步/ 将/ 探索/ 不同/ 的/ 效用函数/ 对/ 虚拟机/ 资源/ 调度/ 效益/ 的/ 影响/ ./ 此外/ ,/ 将/ 云/ 计算资源/ 从/ 单纯/ 的/ CPU/ 计算能力/ 度量/ 方式/ 扩展/ 成/ 多种/ 资源/ (/ 包括/ 内存/ 、/ I/ // O/ 、/ 磁盘/ 存储/ 等/ )/ 共同/ 约束/ ,/ 即将/ 云/ 资源/ 的/ 描述/ 从/ 一维/ 发展/ 到/ 多维/ ./ 

