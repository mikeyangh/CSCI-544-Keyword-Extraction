Page1/ 基于/ 在线/ 属性/ 聚合/ 的/ 海量/ 软件/ 层次/ 分类/ 王涛/ 1/ )/ 王怀民/ 1/ )/ 尹刚/ 1/ )/ 李翔/ 1/ )/ 杨程/ 1/ )/ 邹鹏/ 2/ )/ 1/ )/ (/ 国防科学技术大学/ 计算机/ 学院/ 并行/ 与/ 分布/ 处理/ 国家/ 重点/ 实验室/ 长沙/ 410073/ )/ 2/ )/ (/ 装备/ 学院/ 北京/ 101400/ )/ 摘要/ 互联网/ 规模/ 的/ 软件/ 资源库/ 正/ 从根本上/ 改变传统/ 的/ 软件开发/ 模式/ ,/ 资源库/ 中/ 海量/ 软件/ 的/ 高效/ 层次/ 分类/ 对/ 基于/ 互联网/ 资源/ 的/ 软件开发/ 具有/ 重要/ 意义/ ./ 传统/ 软件/ 分类/ 方法/ 基于/ 软件/ 源代码/ 或/ 字节/ 码/ 实现/ 粗粒度/ 的/ 扁平/ 分类/ ,/ 并且/ 只/ 在/ 小规模/ 数据/ 集上/ 进行/ 了/ 验证/ ./ 文中/ 提出/ 了/ 一种/ 基于/ 软件/ 在线/ 属性/ 聚合/ 的/ 层次/ 分类/ 方法/ ,/ 设计/ 了/ 一个/ 层次/ 分类/ 框架/ ,/ 基于/ 跨/ 资源库/ 软件/ 在线/ 描述/ 和/ 标签/ 的/ 加权/ 聚合/ ,/ 实现/ 对/ 海量/ 软件/ 的/ 高效/ 层次化/ 分类/ ./ 文中/ 在/ 超过/ 18000/ 个/ 开源/ 软件/ 上/ 进行/ 交叉/ 验证/ ,/ 实验/ 结果表明/ 文中/ 提出/ 的/ 在线/ 属性/ 加权/ 聚合/ 方法/ 能/ 显著/ 提高/ 软件/ 分类/ 效果/ ./ 在/ 粗粒度/ 扁平/ 分类/ 下文/ 中/ 方法/ 能够/ 达到/ 基于/ 源代码/ // 字节/ 码/ 分类/ 近似/ 的/ 性能/ ,/ 而且/ ,/ 与/ 相关/ 工作/ 比较/ ,/ 文中/ 方法/ 实现/ 了/ 涵盖/ 123/ 个/ 更/ 细粒度/ 类别/ 的/ 层次化/ 分类/ ,/ 能够/ 更/ 有效/ 地/ 对/ 海量/ 软件/ 进行/ 分类/ ./ 关键词/ 软件/ 资源库/ ;/ 开源/ 软件/ ;/ 层次/ 分类/ ;/ 在线/ 属性/ 1/ 引言/ 互联网/ 规模/ 的/ 软件/ 资源库/ 如/ SourceForge/ 、/ Ohloh/ 以及/ RubyForge/ 等/ 都/ 聚集/ 了/ 海量/ 的/ 开源/ 软件资源/ ,/ 这些/ 开源/ 软件资源/ 正/ 从根本上/ 改变传统/ 的/ 软件开发/ 活动/ ./ 传统/ 软件开发/ 通常/ 基于/ 组织/ 内部/ 的/ 本地/ 资源库/ ,/ 开发/ 活动/ 通常/ 局限/ 在/ 开发/ 团队/ 或者/ 组织/ 内部/ ./ 随着/ 互联网/ 软件/ 资源库/ 不断/ 增长/ ,/ 可/ 自由/ 获取/ 的/ 高质量/ 软件资源/ 不断/ 积累/ ,/ 开发人员/ 可/ 利用/ 的/ 不再/ 仅仅/ 是/ 组织/ 内部/ 的/ 本地/ 资源库/ ,/ 而是/ 整个/ 互联网/ 上/ 的/ 软件/ 资源库/ ,/ 软件开发/ 活动/ 正/ 演变成/ 一个/ 全球/ 协作/ 的/ 过程/ ./ 借助/ 互联网/ 软件/ 资源库/ ,/ 开发人员/ 可以/ 查找/ 问题/ 解决方案/ 、/ 学习/ 他人/ 最佳/ 实践/ 等/ ./ 比如/ ,/ 通过/ 资源库/ 搜索/ 查找/ 高质量/ 可/ 复用/ 组件/ [/ 1/ ]/ 、/ 发现/ 特定/ 领域/ 的/ 新/ 技术/ 趋势/ [/ 2/ -/ 3/ ]/ 、/ 从/ 相关/ 系统/ 学习/ 解决方案/ [/ 4/ ]/ 、/ 分析/ 相似/ 软件/ 来/ 预测/ 和/ 修改/ 软件缺陷/ [/ 5/ ]/ ,/ 或者/ 找到/ 相关/ 领域专家/ 进行/ 交流/ 讨论/ [/ 6/ ]/ ./ 那么/ ,/ 从/ 互联网/ 规模/ 的/ 软件/ 资源库/ 中/ 高效/ 准确/ 地/ 检索/ 到/ 需要/ 的/ 软件/ 非常/ 重要/ ./ 层次/ 分类/ 通过/ 类别/ 划分/ 大大/ 缩小/ 搜索/ 范围/ ,/ 从而/ 被/ 认为/ 是/ 一种/ 大规模/ 数据/ 快速/ 准确/ 检索/ 的/ 有效/ 方法/ [/ 7/ ]/ ./ 这种/ 层次/ 分类/ 机制/ 在/ SourceForge/ 、/ Ruby/ -/ Forge/ 等/ 大型/ 资源库/ 中/ 被/ 广泛/ 使用/ ,/ 通过/ 与/ 通用/ 关键字/ 搜索/ 相结合/ 实现/ 高效/ 的/ 资源/ 检索/ ./ 但是/ ,/ 这些/ 资源库/ 中/ 的/ 软件/ 利用/ 人工/ 分类/ ,/ 而且/ 有/ 相当/ 大/ 比例/ 的/ 软件/ 没有/ 进行/ 分类/ [/ 8/ ]/ ./ 此外/ ,/ 在/ Ohloh/ 、/ Freecode/ 等/ 开源/ 资源库/ 则/ 完全/ 没有/ 分类/ 系统/ ./ 在/ 软件/ 自动/ 分类/ 领域/ 已有/ 很多/ 的/ 相关/ 研究/ ,/ 主要/ 通过/ 分析/ 软件程序/ 实现/ 分类/ ./ 其中/ ,/ 文献/ [/ 9/ -/ 11/ ]/ 通过/ 源代码/ 解析/ 抽取/ 相应/ 的/ 属性/ ,/ 用/ 这些/ 属性/ 组成/ 的/ 文/ 本来/ 代表/ 相应/ 软件/ ,/ 然后/ 利用/ 文本/ 分类/ 方法/ 进行/ 分类/ ./ McMillan/ 等/ 人/ [/ 12/ -/ 13/ ]/ 提出/ 一种/ 基于/ 程序/ API/ 调用/ 信息/ 的/ 软件/ 分类/ 方法/ ,/ 通过/ 分析/ 第三方/ API/ 对应/ 的/ 类别/ 信息/ 来/ 预测/ 程序/ 所属/ 类别/ ./ 因为/ API/ 调用/ 信息/ 既能/ 从/ 源代码/ 中/ 获得/ ,/ 也/ 能/ 从/ 字节/ 码中/ 得到/ ,/ 因此/ 这种/ 方法/ 对/ 那些/ 没有/ 源代码/ 的/ 软件/ 也/ 能/ 进行/ 自动/ 分类/ ./ 目前/ 这些/ 工作/ 主要/ 研究/ 扁平/ 分类/ 且/ 类别/ 粒度/ 都/ 比较/ 大/ (/ 仅/ 定义/ 了/ 20/ 个/ 左右/ 的/ 类别/ )/ ,/ 如/ “/ Internet/ ”/ 等/ ./ 在/ 海量/ 软件/ 中/ ,/ 如此/ 大/ 粒度/ 的/ 类别/ 对/ 缩小/ 软件/ 搜索/ 范围/ 还/ 远远不够/ ./ 如/ 在/ SourceForge/ 中/ ,/ “/ Internet/ ”/ 类别/ 下/ 的/ 软件/ 数目/ 仍然/ 超过/ 35350/ 个/ ./ 此外/ ,/ 在/ 这些/ 研究/ 中/ ,/ 绝大部分/ 工作/ 仅仅/ 在/ 很少/ 数量/ 的/ 软件/ 上/ 进行/ 了/ 实验/ 验证/ ./ 但是/ ,/ 考虑/ 到/ 在/ 互联网/ 资源库/ 中/ 软件/ 的/ 数量/ 和/ 软件/ 本身/ 的/ 复杂性/ (/ 在/ Ohloh/ 资源库/ 中有/ 超过/ 400000/ 个/ 软件/ ,/ 所/ 使用/ 的/ 编程语言/ 超过/ 100/ 种/ )/ ,/ 如何/ 对/ 这些/ 资源库/ 中/ 的/ 海量/ 软件/ 进行/ 高效/ 自动/ 的/ 细粒度/ 分类/ 是/ 一个/ 非常/ 有/ 挑战性/ 的/ 问题/ ./ 本文/ 提出/ 了/ 一种/ 层次/ 分类/ 方法/ ,/ 充分/ 利用软件/ 在线/ 属性/ 实现/ 海量/ 软件/ 的/ 高效/ 自动/ 分类/ ./ 互联网/ 资源库/ 中/ 的/ 软件/ 通常/ 利用软件/ 简介/ 或者/ 标签/ 进行/ 概括/ 描述/ ,/ 这些/ 描述/ 和/ 标签/ 等/ 在线/ 属性/ 比较/ 全面/ 地/ 反映/ 了/ 软件/ 的/ 功能/ 和/ 技术/ 特征/ ,/ 因此/ 为/ 我们/ 进行/ 软件/ 分类/ 提供/ 了/ 新/ 的/ 源/ 数据/ ./ 以/ 数据库/ 管理系统/ MySQL/ 为例/ ,/ 其/ 在/ SourceForge/ 、/ Ohloh/ 和/ Freecode/ 中/ 的/ 描述/ 和/ 标签/ // 类别/ 属性/ 见表/ 1/ 和表/ 2/ ./ 资源库/ SourceForgeOhlohFreecode/ 资源库/ SourceForgeDatabaseEngines/ // ServersOhlohFreecodeDatabase/ ,/ DatabaseEngines/ // Servers/ 源代码/ 标识符/ 和/ API/ 调用/ 信息/ 通常/ 反映/ 软件/ 在/ 实现/ 层类/ 或/ 包/ 的/ 细粒度/ 特征/ ./ 与/ 此/ 不同/ ,/ 软件/ 描述/ 和/ 标签/ 强调/ 整个/ 软件/ 更/ 高层/ 的/ 技术/ 或/ 功能/ 特征/ ./ 如表/ 1/ 和表/ 2/ 所示/ ,/ MySQL/ 的/ 软件/ 描述/ 和/ 标签/ // 类别/ 等/ 在线/ 属性/ 概括/ 了/ 软件/ 的/ 重要/ 特征/ ./ 同时/ ,/ 软件/ 描述/ 和/ 标签/ 以/ 自然语言/ 形式/ 给出/ ,/ 绝大部分/ 互联网/ 软件/ 资源库/ 中/ 的/ 软件/ 都/ 有/ 此类/ 数据/ ./ 因此/ ,/ 这/ 类/ 数据/ 与/ 编程语言/ 无关/ 且/ 更/ 容易/ 获得/ ,/ 从而/ 能够/ 基于/ 这/ 类/ 数据/ 实现/ 更为/ 高效/ 和/ 通用/ 的/ 软件/ 分类/ ./ 我们/ 首先/ 基于/ SourceForge/ 定义/ 的/ 分类/ 层次/ 构建/ 了/ 一个/ 包含/ 超过/ 120/ 个/ 类别/ 的/ 4/ 层/ 分类/ 体系/ ./ 然后/ ,/ 设计/ 了/ 一种/ 基于/ 支持/ 向量/ 机/ (/ SVM/ )/ 等/ 算法/ 的/ 分类/ 框架/ ,/ 实现/ 了/ 基于/ 软件/ 在线/ 数据/ 的/ 层次/ 分类/ ./ 通过/ 广泛/ 的/ 实验/ 分析/ 对比/ 了/ 不同/ 的/ 分类/ 方法/ 并/ 深入/ 讨论/ Page3/ 了/ 利用/ 跨/ 资源库/ 在线/ 属性/ 聚合/ 的/ 方法/ 来/ 优化/ 软件/ 层次/ 分类/ ./ 具体/ 而言/ ,/ 本文/ 的/ 加权/ 聚合/ 方法/ ,/ 通过/ 将/ 多个/ 资源库/ 中/ 不同/ 的/ 软件/ 在线/ 属性/ (/ 本文/ 主要/ 针对/ 描述/ 和/ 标签/ )/ 进行/ 聚合/ ,/ 并/ 对/ 不同/ 数据/ 根据/ 其/ 重要性/ 赋予/ 不同/ 权重/ ,/ 大大提高/ 了/ 软件/ 分类/ 准确度/ ./ 本文/ 第/ 2/ 节/ 介绍/ 软件/ 分类/ 和/ 软件/ 在线/ 属性/ 挖掘/ 的/ 相关/ 工作/ ;/ 第/ 3/ 节/ 阐述/ 软件/ 层次/ 分类/ 方法/ ;/ 第/ 4/ 、/ 5/ 节/ 给出/ 相关/ 实验/ 并/ 对/ 实验/ 结果/ 进行/ 分析/ ;/ 第/ 6/ 节对/ 全文/ 工作/ 进行/ 总结/ 与/ 展望/ ./ 2/ 相关/ 研究/ 在/ 软件/ 自动/ 分类/ 方面/ ,/ 根据/ 分类/ 所/ 依赖/ 的/ 源数/ 目前/ ,/ 对/ 软件/ 分类/ 、/ 软件/ 资源库/ 挖掘/ 方面/ 的/ 研究/ 较/ 多/ ,/ 本/ 节/ 我们/ 重点/ 介绍/ 在/ 软件/ 自动/ 分类/ 和/ 软件/ 在线/ 属性/ 数据挖掘/ 方面/ 的/ 相关/ 工作/ ./ 2.1/ 软件/ 自动/ 分类/ 研究/ 据/ ,/ 当前/ 的/ 研究/ 工作/ 主要/ 可以/ 分为/ 两类/ ./ 第/ 1/ 类/ 是/ 基于/ 源代码/ 标识符/ 和/ 注释/ 的/ 软件/ 分类/ 方法/ ,/ 主要/ 研究/ 包括/ 文献/ [/ 9/ -/ 11/ ]/ ./ 在/ 这些/ 工作/ 中/ ,/ 每个/ 软件/ 被/ 看作/ 是/ 一个/ 由/ 源代码/ 标识符/ 和/ 注释/ 组成/ 的/ 文档/ ,/ 然后/ 利用/ 文本/ 分类/ 方法/ 实现/ 对/ 这些/ 软件/ 的/ 分类/ ./ 这些/ 研究/ 的/ 主要/ 区别/ 在于/ 所/ 采用/ 的/ 类别/ 定义/ 以及/ 机器/ 学习/ 方法/ ./ MUDABlue/ [/ 9/ ]/ 和/ LACT/ [/ 10/ ]/ 首先/ 从/ 源代码/ 中/ 自动/ 构建/ 分类/ 类别/ ,/ 然后/ 分别/ 采用/ LSA/ 和/ LDA/ 的/ 方法/ 来/ 对/ 软件/ 进行/ 分类/ ;/ 文献/ [/ 11/ ]/ 则/ 抽取/ 源代码/ 标识符/ 和/ 注释/ 作为/ 软件/ 对应/ 文档/ ,/ 然后/ 利用/ SVM/ 方法/ 将/ 软件/ 分类/ 到/ 预定/ 义/ 的/ 主题/ 和/ 语言/ 类别/ 中/ ./ 这/ 一类/ 工作/ 只能/ 对/ 有/ 源代码/ 的/ 软件/ 进行/ 分类/ ./ 第/ 2/ 类/ 工作/ 主要/ 基于/ 其它/ 软件/ 信息/ 如/ API/ 调用/ 信息/ 来/ 实现/ 软件/ 分类/ [/ 12/ -/ 13/ ]/ ./ 由于/ 很多/ 软件/ 无法/ 获得/ 源代码/ ,/ Linares/ -/ Vsquez/ 等/ 人/ [/ 13/ ]/ 提出/ 了/ 一种/ 新/ 的/ 基于/ API/ 调用/ 信息/ 的/ 软件/ 分类/ 方法/ ./ 其/ 基本/ 思想/ 是/ :/ 外部/ API/ 和/ 方法/ 通常/ 是/ 基于/ 功能/ 组合/ 在/ 一起/ 的/ ,/ 因此/ 这些/ API/ 和/ 方法/ 能够/ 反映/ 调用者/ 的/ 功能/ ,/ 从而/ 能够/ 用来/ 预测/ 调用者/ 的/ 类别/ ./ API/ 调用/ 信息/ 既/ 能/ 通过/ 源代码/ 分析/ 得到/ ,/ 也/ 能/ 通过/ 字节/ 码/ 分析/ 获得/ ,/ 因此/ 这种/ 方法/ 对/ 无法/ 获得/ 源代码/ 的/ 软件/ 也/ 能够/ 进行/ 分类/ ./ 目前/ ,/ 绝大部分/ 软件/ 分类/ 研究/ 需要/ 对/ 软件/ 源代码/ 或者/ 字节/ 码/ 进行/ 分析/ ./ 然而/ ,/ 在/ 互联网/ 软件/ 资源库/ 中/ 通常/ 积累/ 了/ 海量/ 的/ 软件资源/ ,/ 同时/ 这些/ 软件/ 代码/ 非常复杂/ ,/ 要/ 基于/ 源代码/ 或/ 字节/ 码/ 分析/ 的/ 方法/ 对/ 软件/ 资源库/ 中/ 的/ 海量/ 软件/ 进行/ 分类/ 面临/ 很大/ 的/ 挑战/ ./ 同时/ ,/ 目前/ 这些/ 方法/ 都/ 是/ 扁平/ 分类/ 且/ 类别/ 粒度/ 较大/ ./ 不同于/ 此/ ,/ 本文/ 探索/ 了/ 基于/ 软件/ 在线/ 属性/ 的/ 层次/ 分类/ 方法/ ./ 2.2/ 软件/ 在线/ 属性/ 数据挖掘/ 随着/ 越来越/ 多/ 的/ 软件/ 项目/ 被/ 发布/ 到/ 互联网/ 资源库/ 中/ ,/ 软件/ 在线/ 数据/ 也/ 不断/ 积累/ ,/ 很多/ 研究/ 人员/ 开始/ 关注/ 此类/ 数据/ ,/ 对/ 其/ 展开/ 研究/ ./ Dumitru/ 等/ 人/ [/ 2/ ]/ 及/ Yu/ 等/ 人/ [/ 14/ ]/ 对/ Softpedia/ 中/ 的/ 软件/ 在线/ 特征描述/ 数据/ 进行/ 研究/ 以/ 辅助/ 领域/ 分析/ ./ Dumitru/ 等/ 人/ 提出/ 了/ 一种/ 增量/ 扩散/ 聚类/ 算法/ ,/ 实现/ 从/ 大量/ 软件/ 特征描述/ 中/ 发现/ 领域/ 相关/ 特征/ ,/ 并/ 根据/ 领域/ 分析/ 人员/ 的/ 初始/ 输入/ 进行/ 分析/ 并/ 做/ 关联/ 特征/ 推荐/ ./ McMillan/ 等/ 人/ [/ 15/ ]/ 更进一步/ ,/ 通过/ 对/ 源代码/ 中/ 方法/ 调用/ 链/ 的/ 分析/ ,/ 将/ 文献/ [/ 2/ ]/ 中/ 挖掘/ 的/ 特征/ 定位/ 到/ 具体/ 的/ 实现/ 模块/ ./ 此外/ ,/ 软件/ 协同/ 标签/ 被/ 互联网/ 资源库/ 广泛/ 使用/ 来/ 描述/ 软件/ 特征/ 、/ 组织/ 海量/ 软件资源/ ./ Li/ 等/ 人/ [/ 16/ ]/ 和/ Wang/ 等/ 人/ [/ 17/ ]/ 对/ 资源库/ 中/ 的/ 软件/ 标签/ 进行/ 了/ 深入研究/ ./ 文献/ [/ 17/ ]/ 作者/ 对/ Freecode/ 中/ 的/ 软件/ 标签/ 进行/ 分析/ ,/ 基于/ 同现/ 性对/ 标签/ 相似/ 度/ 进行/ 度量/ ,/ 提出/ 一种/ k/ -/ 中心/ 聚类/ 算法/ 来/ 构建/ 开源/ 软件/ 的/ 标签/ 层次/ ./ 此外/ ,/ 他们/ 还/ 对/ SourceForge/ 中/ 的/ 软件/ 类别/ 、/ 编程语言/ 、/ 许可证/ 等/ 软件/ 标签/ 进行/ 分析/ 以/ 查找/ 相似/ 软件/ [/ 18/ ]/ ./ 这些/ 工作/ 对/ 软件/ 在线/ 属性/ 进行/ 了/ 分析/ 和/ 研究/ ./ 但是/ 目前/ 的/ 研究/ 通常/ 聚焦/ 于/ 某/ 一个/ 特定/ 的/ 资源库/ ,/ 没有/ 将/ 不同/ 的/ 在线/ 属性/ 关联/ 起来/ ./ 本文/ 将/ 多个/ 资源库/ 中/ 的/ 软件/ 描述/ 和/ 协同/ 标签/ 等/ 不同/ 的/ 属性数据/ 聚合起来/ ,/ 实现/ 软件/ 的/ 层次/ 分类/ ./ 3/ 软件/ 层次/ 分类/ 软件/ 资源库/ 中/ 积累/ 了/ 海量/ 的/ 软件/ ,/ 这些/ 软件/ 通常/ 附带/ 了/ 相应/ 的/ 软件/ 描述/ 和/ 软件/ 标签/ 等/ 在线/ 属性数据/ ,/ 为/ 进行/ 软件/ 分类/ 提供/ 了/ 源/ 数据/ ./ 本文/ 基于/ 这些/ 数据/ 实现/ 自动/ 层次化/ 分类/ 方法/ ./ 本节/ 我们/ 介绍/ 基于/ 软件/ 在线/ 属性/ 聚合/ 的/ 层次/ 分类/ 处理/ 流程/ ,/ 然后/ 对/ 软件/ 在线/ 属性/ 、/ 层次/ 分类器/ 训练/ 与/ 预测/ 进行/ 介绍/ ./ 3.1/ 软件/ 层次/ 分类/ 流程/ 基于/ 在线/ 属性/ 聚合/ 的/ 层次/ 分类/ 主要/ 分为/ 数据/ 获取/ 与/ 预处理/ 、/ 分类/ 层次/ 构建/ 、/ 软件/ 在线/ 属性/ 聚合/ 以及/ 分类器/ 训练/ 与/ 部署/ 4/ 个/ 部分/ ,/ 其/ 处理/ 流程/ 如图/ 1/ 所示/ ./ (/ 1/ )/ 数据/ 获取/ 与/ 预处理/ ./ 利用网络/ 爬虫/ 将/ 软件/ 在/ 各个/ 资源库/ 中/ 的/ 主页/ 爬取/ 下来/ ,/ 然后/ 通过/ HTML/ 解析/ 工具/ 抽取/ 出/ 各/ 软件/ 的/ 描述/ 、/ 类别/ 和/ 标签/ 等/ 在线/ Page4/ 属性/ ,/ 并/ 进行/ 停/ 用词/ 剔除/ 、/ 词干/ 提取/ 等/ 预处理/ 操作/ ./ 我们/ 最终/ 得到/ 每个/ 软件/ 预处理/ 后/ 的/ 在线/ 属性/ ,/ 并/ 将/ 这些/ 在线/ 属性/ 作为/ 软件/ 对应/ 的/ 文档/ ./ (/ 2/ )/ 分类/ 层次/ 构建/ ./ 互联网/ 上/ 有/ 超过/ 百万/ 的/ 开源/ 软件/ 项目/ ,/ 因此/ 粗粒度/ 的/ 分类/ 对于/ 缩小/ 检索/ 范围/ 还/ 远远不够/ ./ 本文/ 基于/ 在/ 开源/ 社区/ 中/ 广泛/ 采用/ 的/ 分类/ 体系/ ,/ 根据/ 所/ 涵盖/ 的/ 软件/ 主题/ 以及/ 主题/ 之间/ 的/ 关系/ 将/ 不同/ 粒度/ 的/ 类别/ 组织/ 成/ 一个/ 层次/ 分类/ 结构/ ./ (/ 3/ )/ 在线/ 属性/ 加权/ 聚合/ ./ 不同/ 的/ 资源库/ 中/ 同一/ 软件/ 的/ 在线/ 属性/ 并/ 不/ 完全/ 一样/ ,/ 这些/ 属性/ 从/ 不同/ 角度/ 和/ 层面/ 反映/ 软件/ 的/ 功能/ 和/ 技术/ 等/ 特征/ ,/ 通过/ 聚合/ 这些/ 在线/ 属性/ 能够/ 更/ 全面/ 地/ 概括/ 一个/ 软件/ ./ 本文/ 提出/ 了/ 一种/ 加权/ 聚合/ 方法/ ,/ 根据/ 不同/ 类型/ 在线/ 属性/ 的/ 特点/ 以及/ 其/ 在/ 区分/ 软件/ 类别/ 的/ 重要/ 度/ ,/ 将/ 软件/ 在/ 多个/ 社区/ 的/ 不同/ 属性/ 进行/ 加权/ 聚合/ ./ (/ 4/ )/ 分类器/ 构建/ 与/ 部署/ ./ 利用/ 聚合/ 属性/ 本文/ 基于/ 支持/ 向量/ 机/ 模型/ (/ SVM/ )/ 等/ 分类/ 方法/ 、/ 采用/ “/ 自顶向下/ ”/ 的/ 方法/ 构建/ 层次/ 分类/ 系统/ ./ 基于/ 构建/ 的/ 分类器/ ,/ 我们/ 可以/ 将/ 其/ 部署/ 到/ 软件/ 资源库/ 中/ ,/ 实现/ 基于/ 软件/ 在线/ 属性/ 的/ 自动/ 分类/ ./ 层次/ 分类/ 流程图/ 如图/ 1/ 所示/ ./ 图/ 1/ 基于/ 软件/ 在线/ 属性/ 聚合/ 的/ 层次/ 分类/ 流程图/ 3.2/ 软件/ 在线/ 属性/ 3.2/ ./ 1/ 软件/ 在线/ 属性数据/ 软件/ 在线/ 属性/ 包括/ 多种类型/ 的/ 数据/ ,/ 本文/ 重点/ 研究/ 软件/ 在线/ 描述/ 、/ 类别/ 和/ 标签/ 这/ 3/ 类/ 属性数据/ ./ 在/ 软件/ 资源库/ 中/ ,/ 每个/ 软件/ 在/ 发布/ 时/ 通常/ 会/ 附带/ 相应/ 的/ 软件/ 描述/ ,/ 对/ 软件/ 的/ 主要/ 功能/ 等/ 进行/ 概括性/ 介绍/ ,/ 从而/ 帮助/ 使用者/ 了解/ 该软件/ ./ 第/ 1/ 节表/ 1/ 列出/ 了/ MySQL/ 在/ 开源/ 资源库/ 中/ 的/ 描述/ ,/ 从/ 这些/ 描述/ 中/ 我们/ 可以/ 看到/ “/ SQL/ ”/ 、/ “/ databasemanagementsystem/ ”/ 和/ “/ Oracle/ ”/ 等/ 与/ 数据库/ 相关/ 的/ 词/ ,/ 基于/ 这些/ 词汇/ 可以/ 判定/ 该软件/ 的/ 类别/ ./ 除/ 软件/ 描述/ 外/ ,/ 软件/ 标签/ 被/ 广泛应用/ 于/ 对/ 海量/ 软件资源/ 的/ 标注/ ./ 在/ Ohloh/ 和/ Freecode/ 中/ ,/ 所有/ 注册/ 用户/ 都/ 可以/ 根据/ 他们/ 对/ 相应/ 软件/ 的/ 认识/ 和/ 了解/ 为/ 资源库/ 中/ 的/ 软件/ 添加/ 新/ 标签/ 、/ 删除/ 或者/ 修改/ 已有/ 的/ 标签/ ./ 第/ 1/ 节表/ 2/ 列出/ 了/ MySQL/ 在/ Ohloh/ 和/ Freecode/ 中/ 的/ 标签/ ,/ 这些/ 标签/ 聚集/ 了/ 不同/ 使用者/ 对/ MySQL/ 的/ 认识/ 和/ 了解/ ,/ 从/ 不同/ 的/ 角度/ 反映/ 了/ MySQL/ 的/ 特征/ ,/ 为/ 进行/ 软件/ 分类/ 提供/ 了/ 有效/ 信息/ ./ 软件/ 描述/ 和/ 软件/ 标签/ 都/ 从/ 较/ 高层次/ 反映/ 软件/ 的/ 整体/ 特征/ ,/ 与/ 源代码/ 标识符/ 以及/ API/ 调用/ 信息/ 是/ 互补/ 的/ ./ 源代码/ 标识符/ 和/ API/ 名称/ 等/ 在/ 方法/ 、/ 类/ 或者/ 包/ 的/ 粒度/ 上/ 反映/ 了/ 软件/ 的/ 特征/ ,/ 而/ 软件/ 描述/ 或者/ 标签/ 则/ 以/ 整个/ 软件/ 为/ 粒度/ 概括/ 了/ 软件/ 的/ 重要/ 技术/ 或者/ 功能/ 特征/ ./ 基于/ 这个/ 思想/ ,/ 我们/ 通过/ 分析/ 挖掘/ 软件/ 在线/ 描述/ 与/ 标签/ 来/ 对/ 软件/ 进行/ 自动/ 分类/ ./ 3.2/ ./ 2/ 在线/ 属性/ 加权/ 聚合/ 尽管/ 软件/ 描述/ 和/ 软件/ 标签/ 都/ 从/ 整体/ 上/ 反映/ 软件/ 的/ 技术/ 或者/ 功能/ 特征/ ,/ 但/ 这/ 两类/ 在线/ 属性/ 存在/ 差异/ ./ 软件/ 描述/ 通常/ 是/ 软件/ 管理者/ 或者/ 提交者/ 为/ 软件/ 能够/ 吸引/ 用户/ 而/ 写/ 的/ ./ 在/ 软件/ 描述/ 中/ ,/ 除了/ 反映/ 软件/ 功能/ 或/ 技术/ 特征/ 之外/ 还有/ 很多/ 其它/ 无关/ 词/ ,/ 这些/ 词会/ 对/ 软件/ 分类/ 造成/ 干扰/ ./ 软件/ 标签/ 的/ 标注/ 者/ 既/ 包括/ 软件/ 提交者/ 或/ 管理者/ ,/ 也/ 包括/ 软件/ 使用者/ 、/ 软件维护/ 人员/ 等/ ./ 他们/ 为/ 软件/ 添加/ 标签/ 以/ 反映/ 软件/ 的/ 某些/ 重要/ 特征/ ,/ 这些/ 特征/ 涵盖/ 了/ 软件/ 的/ 功能/ 和/ 技术/ 特征/ ./ 因此/ ,/ 除/ 一些/ 拼写错误/ 或者/ 特殊/ 的/ 词/ ,/ 软件/ 标签/ 通常/ 具有/ 更好/ 的/ 质量/ ./ 同时/ ,/ 这/ 两类/ 在线/ 属性/ 也/ 具有/ 一定/ 的/ 互补性/ ,/ 两者/ 的/ 聚合/ 能够/ 更/ 全面/ 地/ 反映/ 软件/ 特征/ ./ 但是/ ,/ 由于/ 每个/ 软件/ 的/ 标签/ 通常/ 较少/ 而/ 软件/ 描述/ 相对/ 更长/ ,/ 将/ 两者/ 简单/ 合并/ 会/ 导致/ 标签/ 的/ 权重/ 降低/ ,/ 进而/ 削弱/ 软件/ 标签/ 在/ 分类/ 中/ 的/ 作用/ ./ 为了/ 平衡/ 两者/ 在/ 软件/ 分类/ 中/ 的/ 影响/ ,/ 我们/ 设计/ 了/ 一种/ 加权/ 策略/ ,/ 通过/ 增加/ 标签/ 出现/ 次数/ 来/ 提高/ 软件/ 标签/ 的/ 权重/ ./ 其/ 基本思路/ 是/ :/ 软件/ 描述/ 和/ 软件/ 标签/ 都/ 是从/ 整体/ 上/ 对/ 软件/ 特征/ 进行/ 概括/ ,/ 因而/ 可以/ 认为/ 一个/ 软件/ 的/ 描述/ 及其/ 标签/ 在/ 区分/ 一个/ 软件/ 的/ 类别/ 时/ 具有/ 等价/ 的/ 效果/ ./ 基于/ 此/ ,/ 我们/ 设计/ 了/ 一种/ 方法/ 使得/ 软件/ 描述/ 归一化/ 词频/ 之/ 和/ 与/ 所有/ 标签/ 的/ 归一化/ 词频/ 之/ 和/ 相近/ ,/ 从而/ 保证/ 两者/ 的/ 总体/ 权重/ 相近/ ./ 具体做法/ 是/ 在/ 将/ 软件/ 描述/ 和/ 标签/ 进行/ 合并/ 之前/ ,/ 我们/ 首先/ 将/ 软件/ 的/ 标签/ 复制/ 多份/ 然后/ 再/ 合并/ ,/ 复制/ 份数/ 由/ 软件/ 描述/ 与/ 软件/ 标签/ 词/ 的/ 比例/ 来/ 确定/ ./ 具体/ 的/ 复制/ 次数/ 由式/ (/ 1/ )/ 确定/ ./ 式/ (/ 1/ )/ 中/ ,/ tkj/ 表示/ 词/ tk/ 在/ 软件/ j/ 的/ 两类/ 在线/ 属性/ 中出/ Page5/ 在/ 实际/ 数据/ 中/ ,/ 部分/ 软件/ 的/ 标签/ 数/ 很少/ (/ 仅/ 1/ ~/ 2/ 个/ )/ ,/ 不足以/ 全面/ 涵盖/ 软件/ 各/ 方面/ 的/ 特征/ ,/ 难以达到/ 和/ 软件/ 描述/ 等价/ 的/ 效果/ ./ 对于/ 此类/ 软件/ ,/ 直接/ 根据/ 描述/ 与/ 标签/ 数目/ 比例/ 进行/ 复制/ 会/ 使/ 该/ 标签/ 出现/ 次数/ 远大于/ 其它/ 描述/ 词/ ,/ 导致/ 其/ 对/ 分类/ 的/ 影响/ 过大/ ,/ 影响/ 分类/ 模型/ 的/ 准确性/ ./ 因此/ ,/ 我们/ 对/ 软件/ 描述/ 长度/ 与/ 软件/ 标签/ 数/ 的/ 比例/ 进行/ 开方/ 从而/ 降低/ 标签/ 复制/ 的/ 过/ 大/ 影响/ ./ 此外/ ,/ 我们/ 在/ 公式/ 中/ 增加/ 参数/ α/ 对/ 复制/ 次数/ 进行/ 控制/ ./ α/ 为/ 0/ 表示/ 不/ 复制/ 而/ 直接/ 进行/ 简单/ 合并/ ,/ 此时/ 标签/ 可以/ 被/ 看成/ 是/ 软件/ 描述/ 中/ 的/ 一个/ 普通/ 词/ ./ 随着/ α/ 的/ 增加/ ,/ 对/ 标签/ 的/ 复制/ 次数/ 不断/ 增大/ ,/ 相应/ 的/ 标签/ 权重/ 会/ 不断/ 增大/ ./ 下面/ 我们/ 将/ 具体分析/ 这种/ 复制/ 对/ 权重/ 的/ 影响/ ./ 本文/ 使用/ TF/ -/ IDF/ 来/ 表征/ 一个/ 词/ 在/ 区分/ 软件/ 类别/ 时/ 的/ 重要性/ ,/ 每个/ 词/ 的/ TF/ -/ IDF/ 值/ 可/ 根据/ 式/ (/ 2/ )/ 来/ 计算/ ./ 在/ 式/ (/ 2/ )/ 中/ ,/ tij/ 表示/ 词/ ti/ 在/ 软件/ j/ 中/ 出现/ 的/ 次数/ ,/ 其中/ ti/ 可以/ 是/ 一个/ 描述/ 中/ 的/ 词/ 或者/ 一个/ 标签/ ./ ni/ 表示/ 包含/ 词/ ti/ 的/ 软件/ 个数/ ,/ N/ 表示/ 软件/ 总数/ ./ 式/ (/ 2/ )/ 第/ 1/ 部分/ 是/ 词/ ti/ 在/ 软件/ j/ 中/ 的/ 归一化/ 词频/ ,/ 第/ 2/ 部分/ 是/ 词/ ti/ 的/ 逆向/ 文档/ 频率/ ./ 从式/ (/ 2/ )/ 可以/ 看出/ ,/ 在/ 合并/ 时/ 对/ 软件/ 标签/ 进行/ 复制/ 能够/ 增加/ 标签/ 的/ 归一化/ 词频/ 同时/ 降低/ 软件/ 描述/ 中词/ 的/ 归一化/ 词频/ ,/ 但是/ 这种/ 复制/ 不会/ 改变/ 标签/ 或/ 描述/ 词/ 的/ 逆向/ 文档/ 频率/ ./ 因此/ ,/ 综合/ 起来/ ,/ 利用/ 标签/ 复制/ 的/ 方法/ 能够/ 提高/ 标签/ 的/ 整体/ 权重/ 同时/ 降低/ 描述/ 词/ 的/ 权重/ ./ 3.3/ 层次/ 分类/ 方法/ 3.3/ ./ 1/ 分类/ 层次/ 定义/ 本文/ 将/ 分类/ 层次/ 建模/ 为/ 一个/ 树结构/ ,/ 父子/ 节点/ 之间/ 是/ 一种/ “/ 包含/ ”/ 关系/ ,/ 这种/ 关系/ 具有/ 反对称性/ 、/ 反自/ 反性/ 和/ 传递性/ ./ 该/ 分类/ 结构/ 有/ 一个/ 根/ 节点/ “/ Root/ ”/ 将/ 所有/ 的/ 第一层/ 节点/ 关联/ 起来/ ,/ 除/ “/ Root/ ”/ 节点/ 外/ 所有/ 类别/ 都/ 可以/ 包含/ 1/ 个/ 、/ 多个/ 子类/ 或者/ 0/ 个子/ 类/ ,/ 形成/ 相应/ 的/ 子树/ ./ 图/ 2/ 给出/ 了/ “/ Multimedia/ ”/ 对应/ 的/ 子树/ 示例/ ./ 其中/ ,/ “/ Multimedia/ ”/ 节点/ 将/ 所有/ 子/ 类别/ 关联/ 起来/ 构成/ 一棵树/ ,/ 其/ 第一层/ 节点/ 如/ “/ Video/ ”/ 、/ “/ Sound/ // Audio/ ”/ 类/ 分别/ 构成/ 下/ 一级/ 的/ 子树/ ./ 在/ 我们/ 定义/ 的/ 类别/ 层次/ 中/ ,/ 对/ 某些/ 软件/ 其/ 最/ 细粒度/ 的/ 类别/ 可能/ 不是/ 叶/ 节点/ 而是/ 内部/ 节点/ ./ 同时/ ,/ 一个/ 内部/ 节点/ (/ 如图/ 2/ 中/ 的/ “/ Players/ ”/ )/ 可以/ 只有/ 一个/ 子/ 类别/ ./ 因为/ 不/ 强制/ 要求/ 所有/ 软件/ 都/ 被/ 划分/ 到/ 叶/ 节点/ ,/ 同时/ 所有/ 软件/ 都/ 应/ 尽可能/ 被/ 划分/ 到/ 更/ 细粒度/ 的/ 类别/ 中/ ,/ 所以/ 某些/ 类别/ 只有/ 一个/ 子类/ 是/ 有/ 意义/ 的/ ./ 如图/ 2/ ,/ 对于/ 被/ 划分/ 到/ “/ Players/ ”/ 的/ 所有/ 软件/ ,/ 我们/ 会/ 继续/ 测试/ 其/ 是否/ 属于/ 更/ 细粒度/ 的/ “/ MP3/ ”/ ./ 如果/ 属于/ 的话/ ,/ 我们/ 就/ 将/ 其/ 划分/ 至/ “/ MP3/ ”/ ,/ 否则/ 将/ 其/ 划分/ 至/ “/ Players/ ”/ ./ 在/ 该/ 层次/ 定义/ 中/ ,/ 我们/ 不/ 允许/ 两个/ 类别/ 节点/ 间/ 存在/ 多条/ 路径/ ,/ 即/ 同一个/ 类别/ 不能/ 同时/ 属于/ 两个/ 不同/ 的/ 父类/ (/ 多重/ 从属关系/ )/ ./ 这/ 主要/ 是/ 为了/ 后续/ 方法/ 说明/ 的/ 简单/ 清晰/ ./ 在/ 实际/ 的/ 软件/ 类别/ 体系/ 中/ 这类/ 情况/ 是/ 存在/ 的/ ,/ 而且/ 本文/ 的/ 方法/ 也/ 能够/ 较/ 好地解决/ 这一/ 问题/ ,/ 具体/ 细节/ 我们/ 将/ 在/ 分类/ 模型/ 构建/ 与/ 预测/ 章节/ 进行/ 分析/ ./ 3.3/ ./ 2/ 分类/ 模型/ 构建/ 与/ 预测/ 层次/ 分类/ 模型/ 的/ 构建/ 主要/ 可以/ 分为/ “/ Big/ -/ bang/ ”/ 和/ “/ Top/ -/ down/ ”/ 两大类/ 方法/ [/ 19/ ]/ ./ “/ Big/ -/ bang/ ”/ 面向/ 整个/ 类别/ 层次/ 学习/ 一个/ 包含/ 所有/ 类别/ 的/ 分类器/ ,/ 这种/ 方法/ 能够/ 有效/ 降低/ 分类器/ 模型/ 的/ 规模/ ./ 但是/ ,/ 由于/ 层次/ 类别/ 总数/ 较大/ ,/ 因此/ 很难/ 构建/ 一个/ 统一/ 的/ 分类器/ 实现/ 对/ 所有/ 类别/ 的/ 准确/ 分类/ ./ 不同于/ 此/ ,/ “/ Top/ -/ down/ ”/ 方法/ 为/ 每个/ 类别/ 构建/ 一个/ 单独/ 的/ 分类器/ ,/ 并/ 在/ 预测/ 时/ 针对/ 每个/ 类别/ 单独/ 进行/ 测试/ ./ 文献/ [/ 20/ ]/ 通过/ 实验/ 证明/ “/ Top/ -/ down/ ”/ 方法/ 要/ 优于/ “/ Big/ -/ bang/ ”/ 的/ 方法/ ./ 因此/ ,/ 本文/ 采用/ “/ Top/ -/ down/ ”/ 的/ 层次/ 分类/ 模型/ 构建/ 方法/ ./ 在/ 对/ 每个/ 节点/ 构建/ 分类器/ 时/ 主要/ 需要/ 解决/ 两个/ 问题/ :/ 分类/ 算法/ 的/ 选择/ 以及/ 正反/ 训练/ 样例/ 的/ 构建/ ./ 目前/ 有/ 很多/ 分类器/ 构建/ 方法/ 如/ 支持/ 向量/ 机/ (/ SVM/ )/ 、/ 最近/ 邻/ (/ kNN/ )/ 以及/ 贝叶斯/ (/ Bayes/ )/ 方法/ 等/ ./ 其中/ SVM/ 方法/ 在/ 前人/ 的/ 工作/ 中/ 被/ 广泛应用/ 于/ 软件/ 分类/ 并/ 被/ 证明/ 是/ 最/ 有效/ 的/ 方法/ [/ 12/ ,/ 21/ ]/ ,/ 本文/ 将/ 对/ 这/ 几类/ 方法/ 进行/ 分析/ 对比/ ./ 正反/ 样例/ 的/ 选择/ ,/ 对于/ 某个/ 给定/ 的/ 类别/ ,/ 其正例/ 样本/ 为/ 该/ 类别/ 及其/ 子类/ 下/ 的/ 所有/ 样本/ ,/ 反例/ Page6/ 为/ 其/ 兄弟/ 节点/ 及/ 对应/ 所有/ 子/ 节点/ 下/ 的/ 样本/ ./ 对于/ 没有/ 兄弟/ 节点/ 的/ 类别/ (/ 如图/ 2/ 中/ 的/ “/ MP3/ ”/ )/ ,/ 我们/ 回溯到/ 其有/ 兄弟/ 节点/ 的/ 最近/ 祖先/ 节点/ ,/ 将/ 该/ 祖先/ 节点/ 其它/ 子/ 节点/ 下/ 的/ 样本/ 作为/ 其/ 反例/ 样本/ ./ 以/ “/ MP3/ ”/ 为例/ ,/ 其/ 反例/ 为/ 节点/ “/ Players/ ”/ 的/ 兄弟/ 节点/ “/ CDAudio/ ”/ 下/ 的/ 所有/ 样本/ ./ 这种/ 正反/ 样本/ 的/ 选择/ 方法/ 能够/ 降低/ 层次/ 分类/ 中/ 严重/ 的/ “/ 数据/ 倾斜/ ”/ 带来/ 的/ 问题/ [/ 20/ ]/ ./ 通过/ 这种/ 方法/ 我们/ 为/ 每/ 一个/ 类别/ 构建/ 对应/ 的/ 正反/ 样本/ 并/ 训练/ 分类器/ ./ 本文/ 的/ 层次/ 分类/ 问题/ 是/ 一个/ “/ 非/ 强制/ 叶/ 节点/ 预测/ ”/ 问题/ ,/ 即待/ 测试软件/ 最/ 细粒度/ 的/ 类别/ 不/ 强制/ 要求/ 为叶/ 节点/ ./ 如图/ 1/ ,/ 类别/ “/ CDAudio/ ”/ 和/ “/ Players/ ”/ 并/ 不能/ 完全/ 涵盖/ “/ Sound/ // Audio/ ”/ ,/ 因此/ 某个/ 软件/ 可能/ 属于/ “/ Sound/ // Audio/ ”/ ,/ 但是/ 不/ 属于/ 任何/ 一个/ 子类/ ./ 对于/ 一个/ 给定/ 的/ 软件/ ,/ 和/ 前面/ 的/ 训练/ 过程/ 类似/ ,/ 我们/ 仍然/ 采用/ “/ Top/ -/ down/ ”/ 的/ 方法/ 来/ 进行/ 预测/ ./ 首先/ ,/ 在/ 第一层/ 所有/ 分类/ 上/ 对/ 该软件/ 进行/ 测试/ ./ 如果/ 其/ 属于/ 某个/ 类别/ ,/ 则/ 进一步/ 测试/ 该/ 类别/ 下/ 的/ 所有/ 子类/ ;/ 否则/ ,/ 停止/ 对/ 该/ 类别/ 所有/ 子类/ 的/ 测试/ ./ 这里/ 的/ 层次模型/ 构建/ 与/ 预测/ 方法/ 针对/ 的/ 是/ 3.3/ ./ 1/ 节所/ 定义/ 的/ 分类/ 层次/ ./ 在/ 实际/ 的/ 类别/ 体系/ 中/ 如果/ 存在/ 多重/ 从属关系/ ,/ 如/ 类别/ C3/ 同时/ 为/ C1/ 和/ C2/ 的/ 子类/ ,/ 那么/ 在/ 分类器/ 构建/ 过程/ 中/ 确定/ 正反/ 样本/ 时/ ,/ 要/ 分析/ 一个/ 属于/ C3/ 类别/ 的/ 软件/ A/ 是/ C1/ 的/ 正例/ 样本/ 还是/ C2/ 的/ 正例/ 样本/ 时/ ,/ 我们/ 可以/ 通过/ 两种/ 简答/ 的/ 方法/ 进行/ 解决/ ./ 一种/ 方法/ 是/ 根据/ 软件/ A/ 的/ 其它/ 类别/ 来/ 判断/ ,/ 如果/ 软件/ A/ 有/ 一个/ 标注/ 类别/ 是/ C1/ 的/ 父类/ ,/ 那么/ 可以/ 判断/ A/ 应该/ 为/ C1/ 的/ 正例/ 样本/ ;/ 如果/ 这种/ 方法/ 仍然/ 无法/ 判断/ ,/ 那么/ 我们/ 可以/ 简单/ 认定/ 软件/ A/ 同时/ 为/ C1/ 和/ C2/ 的/ 正例/ 样本/ ./ 在/ 进行/ 预测/ 时/ ,/ 因为/ 我们/ 采用/ 了/ “/ Top/ -/ down/ ”/ 的/ 分类/ 方法/ 并/ 为/ 每/ 一个/ 类别/ 构建/ 一个/ 分类器/ 独立/ 进行/ 预测/ ,/ 因此/ 在/ 进行/ 预测/ 时/ 多重/ 从属关系/ 和/ 单重/ 从属关系/ 是/ 一样/ 的/ ,/ 无须/ 特殊/ 处理/ ./ 4/ 实验设计/ 4.1/ 实验/ 数据/ 集/ 本文/ 以三大/ 开源/ 软件/ 资源库/ SourceForge/ 、/ Ohloh/ 和/ Freecode/ 为例/ 对/ 本文/ 所提/ 方法/ 进行/ 验证/ ./ SourceForge/ 是/ 目前/ 最大/ 的/ 开源/ 社区/ 之一/ ,/ 托管/ 了/ 超过/ 300000/ 个/ 软件/ 项目/ ./ SourceForge/ 定义/ 了/ 一个/ 包括/ 4/ 层共/ 363/ 个/ 类别/ 的/ 分类/ 层次/ ,/ 项目/ 管理者/ 在/ 提交/ 项目/ 时/ 可以/ 选择/ 相应/ 的/ 类别/ ./ Ohloh/ 和/ Freecode/ 是/ 两个/ 主要/ 提供/ 软件/ 名录/ 和/ 分析/ 服务/ 的/ 开源/ 软件/ 资源库/ ,/ 各/ 收集/ 了/ 超过/ 400000/ 和/ 45000/ 个/ 软件/ 项目/ ./ Ohloh/ 和/ Freecode/ 采用/ 了/ 标签/ 机制/ 来/ 对/ 其中/ 的/ 软件/ 进行/ 组织/ 和/ 管理/ ,/ 注册/ 用户/ 能够/ 对/ 其中/ 的/ 软件/ 标签/ 进行/ 添加/ 和/ 删除/ 等/ 操作/ ./ 这/ 3/ 个/ 资源库/ 涵盖/ 了/ 两类/ 典型/ 的/ 互联网/ 资源库/ ,/ 本文/ 基于/ 这些/ 资源库/ 中/ 的/ 软件/ 描述/ 和/ 标签/ 进行/ 实验/ ./ 本文/ 通过/ 以下/ 3/ 个/ 步骤/ 来/ 构建/ 实验/ 数据/ 集/ :/ (/ 1/ )/ 软件/ 主页/ 爬取/ ./ 利用/ 网页/ 爬虫/ 从/ 资源库/ 爬取/ 各/ 软件/ 项目/ 主页/ ,/ 分析/ 并/ 抽取/ 软件/ 描述/ 、/ 软件/ 标签/ 以及/ 软件/ 类别/ 等/ 数据/ ./ (/ 2/ )/ 跨/ 资源库/ 软件/ 描述/ 与/ 标签/ 聚合/ ./ 同一个/ 软件/ 可能/ 同时/ 存在/ 于/ 不同/ 资源库/ 中/ ,/ 我们/ 将/ 这/ 一类/ 软件/ 抽取/ 出来/ ,/ 并/ 将/ 其/ 来自/ 不同/ 社区/ 的/ 描述/ 和/ 标签/ 数据/ 合并/ 起来/ 作为/ 我们/ 的/ 原始/ 训练/ 和/ 测试/ 集/ ./ (/ 3/ )/ 软件/ 数据/ 预处理/ ./ 对/ 聚合/ 后/ 的/ 原始/ 项目/ 数据/ ,/ 我们/ 进行/ 去除/ 停/ 用词/ 、/ 提取/ 词干/ 等/ 预处理/ ,/ 然后/ 去掉/ 描述/ 长度/ 少于/ 10/ 的/ 软件/ ./ 同时/ ,/ 我们/ 设定/ 了/ 一个/ 阈值/ 50/ 来/ 剔除/ 拼写错误/ 或者/ 特殊/ 的/ 标签/ ,/ 只有/ 标注/ 超过/ 50/ 个/ 软件/ 的/ 那些/ 标签/ 才/ 保留/ 下来/ 作为/ 有效/ 标签/ ./ 我们/ 最终/ 得到/ 18032/ 个/ 软件/ 和/ 5429/ 个/ 不同/ 的/ 标签/ ,/ 该/ 数据/ 集/ 的/ 详细信息/ 如表/ 3/ 所示/ ,/ 其中/ SF/ ,/ Oh/ 和/ Fc/ 分别/ 代表/ 取自/ SourceForge/ 、/ Ohloh/ 和/ Freecode/ 的/ 数据/ ./ 软件/ 数目/ 资源库/ SF1803219/ ./ 693072.98/ -/ -/ Oh981320/ ./ 84/ -/ -/ 53735.73/ Fc1035725/ ./ 17/ -/ -/ 9404.85/ 实验/ 数据/ 集中/ 每个/ 软件/ 都/ 存在/ 于/ SourceForge/ 中且/ 在/ SourceForge/ 中/ 被/ 指定/ 了/ 类别/ ./ 同时/ ,/ 这些/ 软件/ 至少/ 在/ Ohloh/ 或/ Freecode/ 中/ 的/ 一个/ 资源库/ 中/ 存在/ ,/ 且/ 有/ 至少/ 一个/ 有效/ 标签/ ./ 这些/ 数据/ 的/ 软件/ 描述/ 长度/ 、/ 平均/ 类别/ 数/ 和/ 平均/ 标签/ 数等/ 如表/ 3.4/ ./ 2/ 分类/ 层次/ 构建/ 本文/ 基于/ SourceForge/ 预定/ 义/ 的/ 分类/ 层次/ 来/ 构建/ 分类/ 层次/ 体系/ ,/ 类似/ 分类/ 层次/ 也/ 被/ 广泛应用/ 于/ 其它/ 开源/ 社区/ 如/ RubyForge/ 等/ ./ 基于/ SourceForge/ 中/ 的/ 分类/ 层次/ ,/ 本文/ 按/ 以下/ 步骤/ 构建/ 层次/ 分类/ 体系/ :/ (/ 1/ )/ DAG/ 消除/ ./ 在/ SourceForge/ 原始/ 分类/ 系统/ 中/ ,/ 两个/ 类别/ 节点/ 之间/ 可以/ 存在/ 多条/ 路径/ ./ 为/ 简化/ 分类/ 过程/ ,/ 我们/ 只/ 保留/ 出现/ 最/ 频繁/ 的/ 一条/ 路径/ ./ (/ 2/ )/ 分类/ 层次/ 裁剪/ ./ 我们/ 将/ 最/ 相似/ 的/ 类别/ 进行/ 合并/ ,/ 然后/ 将/ 样本/ 数量/ 少于/ 某/ 阈值/ 的/ 类别/ 删除/ 并/ 将/ 对应/ 类别/ 下/ 的/ 软件/ 提升/ 到/ 其父/ 节点/ 下/ ./ 构建/ 统一/ 的/ Page7/ 分类/ 层次/ ./ 在/ 消除/ DAG/ 并/ 进行/ 裁剪/ 后/ ,/ 我们/ 创建/ 虚拟/ 根/ 节点/ 将/ 所有/ 节点/ 连接起来/ 构建/ 一棵/ 统一/ 的/ 类别/ 层次/ 树/ ./ 在/ 进行/ 类别/ 裁剪/ 时/ ,/ 对/ 不同/ 层次/ 的/ 类别/ 我们/ 设定/ 不同/ 的/ 阈值/ ,/ 从/ 第/ 1/ 到/ 第/ 4/ 层/ 的/ 阈值/ 分别/ 为/ 500/ ,/ 100/ ,/ 50/ 和/ 50/ ./ 经过/ 这/ 3/ 步/ 处理/ ,/ 我们/ 最终/ 构建/ 出/ 包括/ 4/ 层共/ 123/ 个类/ 的/ 分类/ 层次/ ./ 构建/ 的/ 分类/ 层次/ 详细信息/ 如表/ 4/ ,/ 其中/ ,/ 第/ 1/ 层/ 共有/ “/ Multimedia/ ”/ 等/ 12/ 个类/ ,/ 而/ 第/ 2/ 、/ 3/ 层/ 分别/ 包含/ 61/ 和/ 41/ 个/ 类别/ ,/ 第/ 4/ 层有/ 9/ 个类/ ./ 在/ 18032/ 个/ 软件/ 中/ ,/ 第/ 1/ 层/ 类别/ 下/ 的/ 平均/ 正例/ 样本/ 数目/ 为/ 2215.33/ ./ 随着/ 类别/ 层次/ 增加/ ,/ 相应/ 类别/ 下/ 的/ 正例/ 样本/ 数目/ 迅速/ 减少/ ./ 分类/ 层次/ 类别/ 个数/ 12344.3/ 评价/ 标准/ 目前/ 大多数/ 扁平/ 分类/ 工作/ 通常/ 采用/ 正确率/ (/ precision/ )/ 、/ 召回/ 率/ (/ recall/ )/ 以及/ F1/ 值/ (/ F/ -/ measure/ )/ 来/ 评价/ 分类/ 的/ 性能/ [/ 19/ ]/ ./ 本文/ 采用/ 修改/ 的/ 层次/ 分类/ 评价/ 标准/ 来/ 评估/ 层次/ 分类/ 性能/ ,/ 主要/ 包括/ 针对/ 每个/ 类别/ 的/ 层次/ 正确率/ (/ hierarchicalPrecision/ ,/ hP/ )/ 、/ 召回/ 率/ (/ hierarchicalrecall/ ,/ hR/ )/ 和/ F1/ 值/ (/ hierarchicalF/ -/ measure/ ,/ hF/ )/ ,/ 其/ 具体/ 定义/ 如下/ :/ hP/ =/ 式/ (/ 3/ )/ 中/ ,/ 对/ 每个/ 类/ i/ ,/ ^/ Pi/ 表示/ 预测/ 类别/ 为/ i/ 以及/ i/ 的/ 所有/ 子类/ 的/ 样本/ 集合/ ,/ ^/ Ti/ 是/ 所有/ 原始/ 标注/ 类别/ 为类/ i/ 及其/ 所有/ 子类/ 的/ 样本/ 集合/ ./ 本文/ 采用/ 的/ 测度/ hP/ 、/ hR/ 和/ hF/ 分别/ 表示/ 对/ 每个/ 类别/ 在/ 所有/ 测试/ 样本/ 上/ 的/ 平均/ 正确率/ 、/ 召回/ 率/ 和/ F1/ 值/ ./ 为/ 度量/ 在/ 所有/ 类别/ 上/ 的/ 平均/ 正确率/ 、/ 召回/ 率/ 和/ F1/ 值/ ,/ 类似/ 于/ 层次/ 分类/ 相关/ 工作/ [/ 19/ ]/ 中/ 所/ 采用/ 的/ 测度/ ,/ 我们/ 采用/ 微/ 平均/ 的/ 方法/ 来/ 度量/ ./ 其/ 具体/ 定义/ 如下/ :/ Micro/ -/ hF/ =/ 2/ ×/ Micro/ -/ hP/ ×/ Micro/ -/ hR5/ 实验/ 分析/ 为/ 验证/ 本文/ 提出/ 的/ 基于/ 软件/ 在线/ 属性/ 的/ 层次/ 分类/ 方法/ 以及/ 加权/ 聚合/ 方法/ 的/ 有效性/ ,/ 我们/ 设计/ 了/ 不同/ 的/ 实验/ ./ 5.1/ 节/ 我们/ 将/ 分析/ 对比/ 不同/ 分类/ 算法/ 基于/ 不同/ 类型/ 在线/ 属性/ 及其/ 直接/ 合并/ (/ 不/ 进行/ 加权/ 聚合/ )/ 的/ 分类/ 效果/ ;/ 5.2/ 节/ 我们/ 将/ 不同/ 类型/ 在线/ 属性/ 进行/ 加权/ 聚合/ 并/ 对比/ 分析/ 不同/ 加权/ 强度/ (/ 通过/ 式/ (/ 1/ )/ 中/ 的/ 参数/ α/ 来/ 控制/ )/ 对/ 分类/ 结果/ 的/ 影响/ ;/ 5.3/ 节/ 我们/ 对比/ 分析/ 基于/ 在线/ 属性/ 加权/ 聚合/ 的/ 分类/ 与/ 基于/ API/ 的/ 分类/ 方法/ ./ 在/ 5.1/ 和/ 5.2/ 节/ 实验/ 中/ ,/ 我们/ 采用/ 5/ 倍/ 交叉/ 验证/ 的/ 方法/ ,/ 实验/ 数据/ 被/ 随机/ 分为/ 5/ 等份/ ,/ 共/ 进行/ 5/ 组/ 实验/ ,/ 每组/ 实验/ 拿/ 其中/ 4/ 份/ 进行/ 训练/ 在/ 剩下/ 的/ 1/ 份/ 上/ 进行/ 测试/ ./ 这种/ 方法/ 能够/ 保证/ 实验/ 数据/ 集中/ 的/ 所有/ 软件/ 都/ 能够/ 作为/ 测试/ 项/ 被/ 测试/ 一次/ ,/ 能够/ 更好/ 地/ 验证/ 方法/ 的/ 有效性/ ./ 5.1/ 基于/ 软件/ 描述/ 与/ 软件/ 标签/ 的/ 分类/ 本/ 节/ 我们/ 分别/ 基于/ 软件/ 描述/ 、/ 标签/ 以及/ 描述/ 和/ 标签/ 直接/ 合并/ 的/ 数据/ 设计/ 实验/ 来/ 测试/ 本文/ 提出/ 的/ 层次/ 分类/ 方法/ ./ 第/ 1/ 组/ 实验/ 我们/ 首先/ 将/ 来自/ Source/ -/ Forge/ 、/ Ohloh/ 和/ Freecode/ 的/ 同名/ 软件/ 的/ 描述/ 进行/ 合并/ ,/ 然后/ 构建/ 分类器/ 并/ 进行/ 测试/ ;/ 第/ 2/ 组/ 实验/ 我们/ 将/ 软件/ 在/ Ohloh/ 和/ Freecode/ 中/ 的/ 标签/ 作为/ 软件/ 文本/ 进行/ 测试/ ;/ 第/ 3/ 组/ 实验/ ,/ 我们/ 将/ 同一/ 软件/ 在/ 3/ 个/ 社区/ 中/ 的/ 软件/ 描述/ 以及/ 相应/ 的/ 标签/ 进行/ 直接/ 合并/ 作为/ 软件/ 文本/ 进行/ 训练/ 和/ 测试/ ./ 本节/ 我们/ 分别/ 采用/ NaveBayes/ 、/ kNN/ 以及/ SVM/ 方法/ 作为/ 基本/ 分类器/ 构建/ 层次/ 分类/ 系统/ 进行/ 实验/ ./ 前/ 两种/ 方法/ 基于/ Scikit/ -/ learn/ [/ 22/ ]/ 实现/ ,/ SVM/ 基于/ Lib/ -/ linear/ [/ 23/ ]/ 实现/ ./ 具体/ 实验/ 结果/ 如图/ 3/ 所示/ ./ 图/ 3/ (/ a/ )/ 、/ (/ b/ )/ 、/ (/ c/ )/ 分别/ 给出/ 了/ 不同/ 分类/ 方法/ 基于/ 不同/ 在线/ 属性/ 分类/ 的/ 正确率/ 、/ 召回/ 率及/ F1/ 值/ ./ 对比/ 3/ 种/ 不同/ 的/ 分类/ 方法/ ,/ 从图/ 3/ 可以/ 看出/ NaveBayes/ 方法/ 在/ 基于/ 描述/ 以及/ 描述/ 与/ 标签/ 合并/ 数据/ 的/ 分类/ 正确率/ 最高/ ,/ 但是/ 召回/ 率仅/ 为/ 10/ %/ 左右/ ,/ 但/ 在/ 基于/ 标签/ 数据/ 时/ 的/ 分类/ 正确率/ 最差/ ./ 基于/ SVM/ 的/ 层次/ 分类/ 在/ 3/ 类/ 不同/ 属性数据/ 上/ 能够/ 获得/ 优于/ kNN/ 、/ 与/ NaveBayes/ 相近/ 的/ 正确率/ ,/ 但是/ 召回/ 率要/ 远/ 优于/ NaveBayes/ 和/ kNN/ ./ 综合/ 考虑/ 正确率/ 和/ 召回/ 率/ ,/ 我们/ 从图/ 3/ (/ c/ )/ 的/ F1/ 调和/ 均值/ 可以/ 看出/ ,/ 基于/ 3/ 类/ 不同/ 属性数据/ ,/ SVM/ 都/ 获得/ 最优/ 的/ 效果/ ./ 3/ 种/ 方法/ 的/ 实验/ 效果/ 与/ 当前/ 相关/ 工作/ 的/ 研究/ 结果/ 是/ 一致/ 的/ ,/ 这/ 也/ 是/ 我们/ 在/ 后面/ 的/ 实验/ 中/ 选择/ SVM/ 来/ 构建/ Page8/ 图/ 3/ 基于/ 软件/ 不同/ 在线/ 属性/ ,/ 利用/ NaveBayes/ (/ NB/ )/ 、/ 层次/ 分类/ 系统/ 的/ 原因/ ./ 对比/ 不同/ 的/ 软件/ 在线/ 属性/ 对/ 分类/ 结果/ 的/ 影响/ ,/ 综合/ 考虑/ 分类/ 正确率/ 和/ 召回/ 率/ ,/ 从图/ 3/ (/ c/ )/ 的/ F1/ 看/ ,/ 对/ NaveBayes/ 方法/ 和/ kNN/ 方法/ 而言/ ,/ 基于/ 标签/ 的/ 分类/ 结果/ 要/ 远/ 好/ 于/ 基于/ 描述/ 或者/ 描述/ 与/ 标签/ 合并/ ;/ 对/ SVM/ 方法/ ,/ 基于/ 标签/ 的/ 实验/ 结果/ 要/ 优于/ 基于/ 描述/ 的/ 实验/ ,/ 但/ 与/ 标签/ 与/ 描述/ 合并/ 结果/ 相近/ ./ 更/ 具体/ 的/ ,/ 以/ SVM/ 方法/ 为例/ ,/ 表/ 5/ 列出/ 了/ SVM/ 在/ 基于/ 3/ 组/ 数据/ 实验/ 的/ 详细/ 结果/ ./ 表/ 5/ 基于/ SVM/ 方法/ 在/ 不同/ 在线/ 属性/ 上/ 的/ 分类/ 实验/ 软件/ 简介/ Micro/ -/ hPMicro/ -/ hRMicro/ -/ hF/ 描述/ 0.62130/ ./ 48390.5440/ 标签/ 0.63750/ ./ 62070.6290/ 描述/ +/ 标签/ 0.68310/ ./ 57460.6241/ 从表/ 5/ 中/ 可以/ 看出/ ,/ 基于/ 软件/ 描述/ 时/ 整体/ 的/ 正确率/ 、/ 召回/ 率/ 分别/ 为/ 62.13/ %/ 和/ 48.39/ %/ ./ 而/ 基于/ 软件/ 标签/ 的/ 实验/ ,/ 尽管/ 相对/ 于/ 软件/ 描述/ 而言/ 每个/ 软件/ 的/ 标签/ 要少/ 很多/ ,/ 却/ 能够/ 获得/ 更好/ 的/ 实验/ 效果/ ./ 从表中/ 第/ 2/ 行/ 可以/ 看出/ ,/ 基于/ 标签/ 的/ 实验/ 中/ 正确率/ 和/ 基于/ 软件/ 描述/ 的/ 结果/ 差不多/ ,/ 但是/ 其/ 召回/ 率/ 却/ 提高/ 了/ 约/ 13.68/ %/ ,/ F1/ 也/ 提升/ 了/ 约/ 8.50/ %/ ./ 分类/ 效果/ 得到/ 提高/ 的/ 原因/ 在于/ 软件/ 标签/ 相对/ 于/ 软件/ 描述/ 具有/ 更好/ 的/ 质量/ ./ 以/ MySQL/ 为例/ ,/ 其/ 软件/ 描述/ 中/ 包含/ 很多/ 词如/ “/ widerange/ ”/ 、/ “/ performance/ ”/ 等/ ,/ 这些/ 词/ 不能/ 有效/ 反映/ 软件/ 的/ 类别/ ,/ 具有/ 干扰/ 作用/ ./ 而/ MySQL/ 的/ 绝大部分/ 标签/ 都/ 具有/ 明确/ 的/ 含义/ 且/ 反映/ 了/ 该软件/ 某些/ 方面/ 的/ 特征/ ./ 因此/ ,/ 基于/ 软件/ 标签/ 的/ 分类/ 能够/ 获得/ 更好/ 的/ 结果/ ./ 表/ 5/ 第/ 4/ 行列/ 出/ 了/ 基于/ 软件/ 描述/ 和/ 软件/ 标签/ 简单/ 合并/ 的/ 实验/ 结果/ ./ 实验/ 结果显示/ ,/ 与/ 仅/ 使用/ 软件/ 标签/ 相比/ ,/ 基于/ 该/ 数据/ 能够/ 取得/ 更/ 高/ 的/ 正确率/ 但是/ 其/ 召回/ 率会/ 下降/ ,/ F1/ 值则/ 相近/ ./ 经过/ 深入分析/ ,/ 合并/ 之所以/ 未能/ 进一步提高/ 分类/ 效果/ 的/ 主要/ 原因/ 在于/ 数据/ 合并/ 方式/ ./ 这种/ 简单/ 合并/ 将/ 软件/ 标签/ 与/ 软件/ 描述/ 中/ 的/ 词/ 同等对待/ ./ 但是/ ,/ 由于/ 软件/ 描述/ 的/ 词数/ 通常/ 要远/ 多于/ 软件/ 标签/ ,/ 这种/ 合并/ 虽然/ 能够/ 丰富/ 该软件/ 的/ 信息/ ,/ 但/ 同时/ 也/ 引入/ 了/ 更/ 多/ 的/ 噪声/ ,/ 从而/ 使得/ 软件/ 标签/ 对/ 软件/ 类别/ 的/ 影响/ 减弱/ ,/ 因此/ 没/ 能/ 获得/ 比/ 软件/ 标签/ 更好/ 的/ 效果/ ./ 5.2/ 基于/ 在线/ 属性/ 加权/ 聚合/ 的/ 软件/ 分类/ 在/ 3.2/ ./ 2/ 节中/ 我们/ 提出/ 了/ 加权/ 聚合/ 的/ 方法/ ,/ 根据/ 软件/ 描述/ 与/ 软件/ 标签/ 的/ 比例/ 对/ 标签/ 进行/ 复制/ ,/ 然后/ 聚合/ 以/ 提高/ 软件/ 标签/ 在/ 合并/ 文本/ 中/ 的/ 权重/ ./ 在/ 式/ (/ 1/ )/ 中/ ,/ 我们/ 设计/ 了/ 参数/ α/ 来/ 控制/ 整体/ 加权/ 强度/ ./ 本节/ 我们/ 利用/ SVM/ 算法/ 作为/ 分类器/ 进行/ 实验/ ,/ 分析/ 加权/ 聚合/ 方法/ 的/ 有效性/ 以及/ 加权/ 强度/ 对/ 实验/ 结果/ 的/ 影响/ ./ 我们/ 将/ α/ 的/ 取值/ 从/ 0/ 开始/ 不断/ 增加/ ,/ 在/ [/ 0/ ,/ 2.0/ ]/ 之间/ 以/ 0.2/ 为/ 间隔/ 递增/ ,/ 在/ [/ 2/ ,/ 3/ ]/ 之间/ 每次/ 增加/ 0.5/ ,/ 共取/ 13/ 个/ 不同/ 的/ α/ 值/ 进行/ 实验/ ./ 其中/ ,/ α/ 为/ 0/ 时/ 回归/ 为/ 5.1/ 节/ 实验/ 中/ 的/ 直接/ 合并/ ./ 随着/ α/ 的/ 不断/ 增加/ ,/ 软件/ 标签/ 的/ 权重/ 不断/ 增加/ 而/ 软件/ 描述/ 中词/ 的/ 权重/ 不断/ 降低/ ,/ 最终/ 的/ 实验/ 结果/ 如图/ 4/ 所示/ ./ 从图/ 4/ 可以/ 看出/ ,/ 在/ [/ 0/ ,/ 1/ ]/ 区间/ ,/ 随着/ α/ 的/ 不断/ 增加/ ,/ 分类/ 正确率/ 、/ 召回/ 率/ 以及/ F1/ 值/ 都/ 在/ 不断/ 增加/ ./ 其中/ ,/ F1/ 值/ 从/ 0/ 时/ 的/ 62.41/ %/ 增加/ 到/ 68.38/ %/ ./ 这个/ 结果/ 验证/ 了/ 我们/ 在/ 5.1/ 节/ 的/ 分析/ ,/ 说明/ 通过/ 增加/ 标签/ 权重/ 的/ 加权/ 聚合/ 方法/ 既/ 能/ 利用软件/ 描述/ 来/ 丰富/ 软件/ 信息/ ,/ 同时/ 又/ 能够/ 发挥/ 标签/ 质量/ 较/ 好/ 的/ 优点/ ,/ 从而/ Page9/ 获得/ 更好/ 的/ 分类/ 效果/ ./ 此外/ ,/ 从图/ 中/ 可以/ 看出/ ,/ 当/ α/ 从/ 1/ 增加/ 到/ 3/ 时/ ,/ 分类/ 准确度/ 降低/ ,/ 召回/ 率/ 和/ F1/ 值/ 基本/ 保持/ 不变/ ./ 这/ 主要/ 是因为/ 随着/ α/ 的/ 增大/ ,/ 软件/ 标签/ 的/ 权重/ 会/ 远大于/ 软件/ 描述/ 的/ 权重/ ,/ 使得/ 软件/ 描述/ 在/ 区分/ 软件/ 类别/ 方面/ 的/ 影响/ 越来越/ 小/ ,/ 没有/ 发挥/ 出/ 软件/ 描述/ 中/ 关于软件/ 类别/ 信息/ 的/ 作用/ ./ 从/ 5.1/ 节/ 和/ 5.2/ 节/ 的/ 实验/ 可以/ 看出/ ,/ 软件/ 标签/ 在/ 进行/ 软件/ 分类/ 时比/ 软件/ 描述/ 具有/ 更好/ 的/ 效果/ ./ 尽管如此/ ,/ 两者/ 具有/ 一定/ 的/ 互补性/ ,/ 通过/ 加权/ 聚合/ 能够/ 较/ 好/ 地/ 发挥/ 两者/ 的/ 作用/ ,/ 取得/ 更好/ 的/ 分类/ 效果/ ./ 5.3/ 基于/ 在线/ 属性/ 加权/ 聚合/ 和/ 基于/ API/ 的/ 软件/ 分类/ 基于/ 源代码/ 和/ 字节/ 码/ 分析/ 的/ 软件/ 分类/ 方法/ 被/ 广泛/ 研究/ ,/ 其中/ 基于/ API/ 调用/ 信息/ 的/ 软件/ 自动/ 分类/ 方法/ 根据/ 调用/ 的/ API/ 包/ // 类/ 的/ 类别/ 来/ 对/ 软件/ 类别/ 进行/ 预测/ 被/ 证明/ 是/ 一个/ 有效/ 的/ 方法/ ./ Linares/ -/ Vsquez/ 等/ 人/ [/ 13/ ]/ 针对/ Java/ 程序/ ,/ 通过/ 分析程序/ 中/ 的/ API/ 调用/ 信息/ 对/ 软件/ 在/ 22/ 个/ 类别/ 上/ 进行/ 测试/ ./ 作者/ 通过/ 对/ 一组/ 开源/ 软件/ 和/ 一组/ 商业软件/ 上/ 进行/ 实验/ 发现/ 基于/ API/ 调用/ 信息/ 的/ 分类/ 方法/ 能够/ 达到/ 和/ 基于/ 源代码/ 标示/ 符/ // 注释/ 的/ 方法/ 近似/ 的/ 效果/ ./ 同时/ ,/ 对比/ 实验/ 表明/ 基于/ API/ 包名/ 比/ API/ 方法/ 名/ 分类/ 准确度/ 更高/ ./ 本节/ 将/ 本文/ 提出/ 的/ 基于/ 软件/ 在线/ 属性/ 加权/ 聚合/ 的/ 方法/ 与/ 基于/ API/ 包名/ 的/ 分类/ 方法/ 进行/ 对比/ 分析/ ./ 我们/ 首先/ 从/ 文献/ [/ 13/ ]/ 的/ 数据/ 集中/ 抽取/ 出/ 那些/ 在/ Ohloh/ 、/ Freecode/ 或者/ Softpedia/ 中有/ 标签/ 的/ 项目/ 将/ 其/ 作为/ 测试/ 集/ ,/ 共/ 849/ 个/ 软件/ ./ 为/ 分析/ 本文/ 方法/ 在/ 该/ 测试/ 集上/ 的/ 效果/ ,/ 我们/ 从/ 5.1/ 节/ 实验/ 数据/ 集中/ 将/ 这/ 一部分/ 数据/ 去掉/ ,/ 将/ 剩下/ 的/ 软件/ 作为/ 训练/ 集来/ 构建/ 我们/ 的/ 层次/ 分类器/ ./ 本节/ 采用/ SVM/ 方法/ 进行/ 训练/ 和/ 测试/ ,/ 实验/ 参数设置/ 为/ c/ =/ 0.5/ ,/ α/ =/ 1/ ,/ 最终/ 的/ 实验/ 结果/ 见表/ 6/ ./ 表/ 6/ 基于/ 软件/ 在线/ 属性/ 和/ 基于/ API/ 的/ 软件/ 分类/ 的/ 结果/ Bio/ -/ InformaticsChatCommunicationsCompilersDatabaseEducationEmailFrameworksFront/ -/ EndsGames/ // Entertainments0/ ./ 728GraphicsIndexing/ // SearchingInternetInterpretersMathematicsNetworkingOffice/ // BusinessScientificSecurityTestingVisualizationWWW/ // HTTP/ 平均值/ 从表/ 6/ 可以/ 看出/ ,/ 两种/ 方法/ 在/ 22/ 个/ 类别/ 上/ 的/ 平均/ F1/ 值/ 相近/ ,/ 其中/ 基于/ API/ 的/ 方法/ 为/ 66.96/ %/ ,/ 本文/ 方法/ 为/ 64.64/ %/ ./ 具体/ 的/ ,/ 在/ 某些/ 类别/ 上/ ,/ 如/ “/ Chat/ ”/ 以及/ “/ Email/ ”/ 等/ 类别/ 上/ 本文/ 方法/ 取得/ 更好/ 的/ 效果/ ,/ 而/ 基于/ API/ 的/ 方法/ 在/ 其它/ 类别/ 如/ “/ Visualization/ ”/ 上/ 更好/ ./ 这种/ 差异/ 是/ 由/ 所/ 使用/ 的/ 数据/ 特点/ 决定/ 的/ ./ API/ 包名/ 或/ 方法/ 名/ 与/ 实现/ 相关/ ,/ 通常/ 反映/ 一个/ 软件/ 更/ 细粒度/ 的/ 特征/ ,/ 而/ 软件/ 在线/ 属性/ 则/ 从/ 整体/ 的/ 粒度/ 进行/ 概括/ ./ 实验/ 结果表明/ 软件/ 在线/ 属性/ 是/ 一种/ 有效/ 的/ 软件/ 分类/ 源/ 数据/ ./ 同时/ ,/ 与/ API/ 数据/ 比较/ 两者/ 从/ 不同/ 的/ 角度/ 和/ 粒度/ 反映/ 软件/ 的/ 特征/ ,/ 在/ 软件/ 分类/ 上/ 具有/ 互补性/ ,/ 对/ 这种/ 互补性/ 的/ 研究/ 将/ 是/ 我们/ 下/ 一步/ 工作/ 的/ 重点/ ./ 文献/ [/ 13/ ]/ 中仅/ 在/ 22/ 个/ 粗粒度/ 的/ 类别/ 上/ 进行/ 实验/ 分析/ ,/ 而且/ 没有/ 考虑/ 类别/ 之间/ 的/ 层次/ 关系/ ./ 在/ SourceForge/ 中/ ,/ 这些/ 软件/ 实际/ 被/ 标注/ 的/ 类别/ 更/ 多/ Page10/ 粒度/ 更细/ ./ 本文/ 提出/ 的/ 方法/ 根据/ 软件/ 类别/ 之间/ 的/ 关系/ 将/ 其/ 组织/ 为/ 层次结构/ ,/ 并且/ 在/ 较/ 细粒度/ 的/ 类别/ 上/ 也/ 获得/ 了/ 较/ 好/ 的/ 分类/ 效果/ ./ 例如/ ,/ 在/ 我们/ 构建/ 的/ 分类/ 层次/ 中/ ,/ “/ Compiler/ ”/ 和/ “/ Testing/ ”/ 被/ 组织/ 在/ “/ Soft/ -/ wareDevelopment/ ”/ 类别/ 下/ ,/ “/ SoftwareDevelop/ -/ ment/ ”/ 还/ 被/ 细分/ 为/ “/ BuildTools/ ”/ 、/ “/ QualityAssur/ -/ ance/ ”/ 等/ ./ 测试/ 集上/ 有/ 很多/ 软件/ 同时/ 也/ 属于/ 这些/ 细粒度/ 的/ 类别/ ,/ 本文/ 提出/ 的/ 方法/ 能够/ 将/ 这些/ 软件/ 准确/ 的/ 划分/ 到/ 相应/ 的/ 类别/ 下/ ./ 表/ 7/ 列出/ 了/ 测试软件/ 在/ “/ SoftwareDevelopment/ ”/ 下/ 各个/ 类别/ 的/ 测试/ 结果/ ./ 表/ 7/ “/ SoftwareDevelopment/ ”/ 下/ 各/ 子类/ 测试/ 结果/ SoftwareDevelopment0/ ./ 85260.78260/ ./ 8161ObjectOriented0/ ./ 93330.66670/ ./ 7778BuildToolsAlgorithmsQualityAssurance0/ ./ 80000.66670/ ./ 7273UserInterface5/ ./ 4/ 分类/ 方法/ 伸缩性/ 分析/ 基于/ 互联网/ 的/ 软件开发/ 依赖于/ 互联网/ 软件/ 资源库/ ,/ 而/ 充分利用/ 资源库/ 中/ 的/ 资源/ 依赖于/ 对/ 其中/ 软件/ 的/ 高效/ 分类/ ./ 本节/ 就/ 本文/ 方法/ 对/ 互联网/ 规模/ 软件/ 资源库/ 进行/ 高效/ 分类/ 的/ 能力/ 进行/ 分析/ ./ 本文/ 提出/ 的/ 软件/ 分类/ 方法/ 主要/ 分为/ 训练/ 数据/ 的/ 获取/ 与/ 预处理/ 、/ 分类/ 模型/ 的/ 训练/ 与/ 预测/ 两/ 部分/ ./ 第一/ 部分/ ,/ 我们/ 设计/ 实现/ 了/ 多线程/ 爬虫/ 程序/ ,/ 启动/ 50/ 个/ 线程/ 并行/ 爬取/ 软件/ 主页/ 然后/ 利用/ 正则表达式/ 对/ HTML/ 文件/ 进行/ 解析/ ./ 我们/ 将/ 程序/ 部署/ 在/ 一个/ 100Mbps/ 带宽/ 接入/ 互联网/ 的/ 服务器/ 上/ (/ 服务器/ 配置/ 为/ 8/ ×/ 2.13/ GCPUs/ ,/ 16GBRAM/ 和/ 2TB/ 存储/ )/ ./ 对/ Ohloh/ 中/ 417344/ 个/ 软件/ 项目/ 的/ 主页/ 进行/ 爬取/ 和/ 数据/ 抽取/ 的/ 总/ 时间/ 约/ 为/ 3/ 天/ ,/ 抽取/ 出/ 的/ 软件/ 在线/ 属性数据/ 大小/ 约/ 为/ 100MB/ ./ 与/ 基于/ 源代码/ 的/ 软件/ 分类/ 相比/ ,/ 本文/ 方法/ 大大降低/ 了/ 数据/ 获取/ 与/ 预处理/ 的/ 代价/ ./ 软件/ 源代码/ 通常/ 非常复杂/ ,/ 以/ MySQL/ 为例/ ,/ 在/ 2011/ 年/ 6/ 月/ ,/ MySQL/ 源代码/ 中共/ 包括/ 22/ 种/ 不同/ 的/ 编程语言/ ,/ 代码/ 文件/ 共/ 包括/ 1333855/ 行/ 代码/ 以及/ 298918/ 行/ 注释/ ./ 这/ 仅仅/ 是/ 资源库/ 海量/ 软件/ 中/ 的/ 一个/ 中等/ 规模/ 的/ 开源/ 软件/ ,/ 要/ 对/ 资源库/ 中/ 的/ 海量/ 软件/ 源代码/ 进行/ 解析/ 和/ 处理/ 从而/ 进行/ 分类/ 其/ 代价/ 远远/ 超过/ 对/ 软件/ 主页/ 的/ 分析/ ./ 分类/ 模型/ 的/ 训练/ 和/ 预测/ 相对/ 于/ 数据/ 获取/ 与/ 预处理/ 而言/ 是/ 非常/ 高效/ 的/ ./ 该/ 部分/ 的/ 时间/ 开销/ 与/ 所/ 使用/ 的/ 分类/ 算法/ 相关/ ./ 本文/ 基于/ SVM/ 方法/ 在/ 一台/ 配置/ 为/ Intel/ (/ R/ )/ Core/ (/ TM/ )/ i5/ -/ 3320MCPU/ @/ 2.6/ M/ ,/ 4GBRAM/ 的/ 电脑/ 上/ 对/ 18032/ 个/ 项目/ 进行/ 5/ 倍/ 交叉/ 验证/ ,/ 总/ 时间/ 约/ 为/ 620s/ ,/ 其中/ 模型/ 训练/ 时间/ 约/ 为/ 540s/ ,/ 分类/ 预测/ 时间/ 为/ 80s/ ./ 基于/ 该/ 数据/ 我们/ 可以/ 算/ 出/ ,/ 在/ 完成/ 分类/ 模型/ 训练/ 后/ ,/ 对/ Ohloh/ 中/ 所有/ 417344/ 个/ 软件/ 进行/ 分类/ 的/ 总/ 时间/ 约/ 为/ 31min/ ./ 在/ 整个/ 层次/ 分类/ 模型/ 构建/ 与/ 预测/ 过程/ 中/ 需要/ 人工/ 参与/ 的/ 部分/ 主要/ 是/ 数据/ 的/ 爬/ 取/ 以及/ 分类/ 层次/ 构建/ ./ 在/ 图/ 1/ 所示/ 的/ 整体/ 流程图/ 中/ ,/ 在/ Web/ 数据/ 爬取/ 与/ 预处理/ 阶段/ ,/ 需要/ 人工/ 确定/ 每个/ 社区/ 中/ 开源/ 项目/ 的/ URL/ 以便/ 爬虫/ 程序/ 爬取/ 项目/ 主页/ ,/ 然后/ 通过/ 分析/ 项目/ HTML/ 页面/ 结构/ ,/ 构建/ 项目/ 在线/ 属性/ 抽取/ 规则/ ./ 这/ 一部分/ 的/ 工作/ 中/ ,/ 同一个/ 开源/ 社区/ 中/ 项目/ 的/ URL/ 和/ 主页/ 通常/ 具有/ 相同/ 的/ 结构/ ,/ 因此/ 对/ 每个/ 社区/ 只/ 需要/ 人工/ 分析/ 几个/ 项目/ 即可/ 确定/ ./ 在/ 完成/ 主页/ 爬取/ 之后/ 进行/ 预处理/ 时/ 不/ 需要/ 人工干预/ ,/ 程序/ 能够/ 自动/ 完成/ 相应/ 处理/ ./ 本文/ 的/ 分类/ 层次/ 是/ 人工/ 构建/ 的/ ./ 在/ 分类/ 层次/ 构建/ 时/ ,/ 我们/ 需要/ 对/ SourceForge/ 社区/ 中/ 的/ 分类/ 体系/ 进行/ 统计分析/ ,/ 计算/ 不同/ 类别/ 下/ 的/ 样本数/ 以及/ 类别/ 间/ 关系/ 以/ 确定/ 保留/ 和/ 剔除/ 的/ 类别/ ,/ 构建/ 分类/ 层次/ ./ 在/ 进行/ 分类/ 预测/ 时/ ,/ 只要/ 将/ 待/ 预测/ 项目/ 的/ 描述/ 及/ 标签/ 作为/ 输入/ ,/ 系统/ 将/ 首先/ 进行/ 自动化/ 预处理/ 、/ 权重/ 计算/ 并/ 将/ 结果/ 作为/ 分类/ 模型/ 的/ 输入/ ,/ 然后/ 根据/ 分类/ 模型/ 计算/ 出该/ 项目/ 可能/ 的/ 类别/ ./ 基于/ 上述/ 对/ 本文/ 方法/ 与/ 基于/ 源代码/ 分类/ 方法/ 的/ 对比/ 以及/ 对/ 人工成本/ 的/ 分析/ 可以/ 看出/ ,/ 本文/ 提出/ 的/ 基于/ 软件/ 在线/ 属性/ 的/ 层次/ 分类/ 方法/ 在/ 完成/ 模型/ 构建/ 与/ 部署/ 后/ 能够/ 实现/ 对/ 互联网/ 规模/ 软件/ 资源库/ 中/ 的/ 海量/ 软件/ 的/ 高效/ 分类/ ./ 6/ 结束语/ 互联网/ 软件/ 资源库/ 需要/ 对/ 海量/ 软件资源/ 进行/ 有效/ 组织/ 和/ 管理/ ./ 本文/ 构建/ 了/ 一个/ 包括/ 120/ 多个/ 类别/ 的/ 层次/ 分类/ 体系/ ,/ 提出/ 了/ 一种/ 基于/ 软件/ 在线/ 属性/ 的/ 层次/ 分类/ 方法/ ,/ 能够/ 实现/ 对/ 海量/ 软件/ 的/ 高效/ 自动/ 分类/ ./ 该/ 方法/ 基于/ 软件/ 在线/ 属性/ 聚合/ ,/ 不/ 依赖/ 软件/ 源代码/ 且/ 与/ 编程语言/ 无关/ ,/ 因此/ 具有/ 较/ 好/ 的/ 分类/ 效率/ 和/ 伸缩性/ ./ 我们/ 实现/ 了/ 一个/ 开源/ 软件/ 搜索/ 与/ 分析/ 平台/ Influx/ ,/ 搜集/ 了/ 多个/ 大型/ 资源库/ 的/ 开源/ 软件/ ,/ 提供/ 跨/ 资源库/ 项目/ 整合/ 、/ 软件/ 引用/ 分析/ 等/ 功能/ ./ 针对/ 本文/ 提出/ 的/ 层次/ 分类/ 方法/ ,/ 我们/ 在/ 该/ 平台/ 上/ 实现/ 了/ 相应/ 的/ Demo/ ,/ 可以/ 进行/ 访问/ ①/ ./ ①/ http/ :/ // // trustie/ ./ influx/ ./ netPage11/ 下/ 一步/ 工作/ 中/ ,/ 我们/ 将/ 获取/ 和/ 分析/ 更/ 多/ 的/ 软件/ 在线/ 属性/ 以/ 进一步提高/ 软件/ 分类/ 的/ 准确度/ ./ 同时/ ,/ 软件/ 源代码/ 中/ 的/ 标识符/ 以及/ API/ 调用/ 信息/ 从/ 不同/ 的/ 角度/ 和/ 粒度/ 反映/ 软件/ 的/ 功能/ 或/ 技术/ 特征/ ,/ 与/ 软件/ 在线/ 数据/ 具有/ 互补性/ ,/ 未来/ 我们/ 将/ 对/ 多种不同/ 数据/ 如何/ 有效/ 融合/ 以/ 实现/ 更/ 准确/ 高效/ 的/ 分类/ 展开/ 研究/ ./ 本文/ 重点/ 关注/ 大规模/ 资源库/ 软件资源/ 的/ 组织/ 管理/ ,/ 后续/ 工作/ 中/ 我们/ 将/ 对/ 如何/ 充分利用/ 这些/ 软件资源/ 辅助/ 软件开发/ 展开/ 深入研究/ ./ 

