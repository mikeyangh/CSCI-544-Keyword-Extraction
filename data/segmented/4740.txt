Page1/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 研究进展/ 1/ )/ (/ 东北大学/ 软件/ 学院/ 沈阳/ 110819/ )/ 2/ )/ (/ 东北大学/ 计算机科学/ 与/ 工程学院/ 沈阳/ 110819/ )/ 摘要/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 从/ 程序设计/ 和/ 编码/ 角度/ 优化/ 软件系统/ 的/ 能耗/ ,/ 能够/ 很/ 好/ 地/ 弥补/ 面向/ 硬件/ 和/ 面向/ 资源/ 的/ 能耗/ 优化/ 方法/ 过多/ 依赖/ 硬件/ 环境/ 、/ 普适性/ 较差/ 、/ 粒度/ 过大/ ,/ 且/ 难以/ 在/ 软件开发/ 过程/ 中/ 应用/ 等/ 缺点/ ./ 该文/ 综述/ 了/ 近年来/ 面向/ 代码/ 软件/ 能耗/ 优化/ 领域/ 的/ 主要/ 研究成果/ ,/ 总结/ 了/ 能耗/ 优化/ 的/ 基本/ 方法/ 和/ 技术/ 层次/ 以及/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 基本思路/ ;/ 随后/ 从/ 面向/ 代码/ 的/ 软件/ 能耗/ 估算/ 方法/ 和/ 优化/ 方法/ 两个/ 方面/ 对/ 现有/ 工作/ 加以/ 梳理/ ,/ 逐一/ 介绍/ 了/ 相关/ 优化/ 工具/ ./ 该文/ 提出/ 了/ 若干/ 进一步/ 研究/ 的/ 问题/ ./ 首先/ ,/ 该文/ 重/ 定义/ 面向/ 代码/ 的/ 软件/ 能耗/ 评估/ 模型/ 和/ 方法/ 应该/ 满足/ 的/ 特性/ ,/ 并/ 提出/ 代码/ 的/ 运行/ 时/ 能耗/ (/ RuntimeEnergyConsumption/ )/ 和/ 视/ 在/ 能耗/ (/ ApparentEnergyConsumption/ )/ 的/ 概念/ ;/ 其次/ ,/ 该文/ 认为/ 现有/ 面向/ 代码/ 的/ 能耗/ 优化/ 技术/ 过于/ 具体/ ,/ 或/ 针对/ 具体/ 的/ 代码/ ,/ 或/ 针对/ 具体/ 的/ 功能/ ,/ 缺乏/ 抽象层次/ 的/ 优化/ 技术/ ,/ 缺乏/ 算法/ 层面/ 的/ 能耗/ 优化/ 方法/ ,/ 且/ 没有/ 充分考虑/ 编程语言/ 特征/ ,/ 尤其/ 是/ 面向对象/ 语言/ 特征/ ;/ 最后/ ,/ 该文/ 提出/ 算法/ 能耗/ 复杂度/ 这/ 一新/ 观点/ ,/ 指出/ 仍然/ 存在/ 的/ 问题/ 和/ 可能/ 的/ 解决办法/ ./ 关键词/ 面向/ 代码/ ;/ 软件/ 能耗/ ;/ 能耗/ 估算/ ;/ 能耗/ 优化/ ;/ 绿色/ 计算/ 1/ 引言/ 当/ 提及/ 节能/ 减排/ 技术/ 时/ ,/ 人们/ 会/ 想到/ 制造业/ 、/ 交通运输/ 等/ 传统/ 行业/ ,/ 殊不知/ ,/ 计算机/ 等/ IT/ 设备/ 的/ 电能/ 消耗/ 同样/ 不容忽视/ ./ 美国/ Harvard/ 大学/ 研究/ 人员/ 就/ 用户/ 电脑/ 耗能/ 和/ 服务器/ 搜索/ 一次/ 的/ 耗能/ 进行/ 计算/ ,/ 形象/ 地/ 指出/ 人们/ 每/ 使用/ Google/ 搜索/ 一次/ ,/ 将/ 消耗/ 可以/ 烧开/ 半壶/ 水/ 的/ 电能/ ①/ ;/ 一个/ 数据中心/ 的/ 能耗/ 高于/ 100/ 个/ 商业/ 建筑/ 的/ 能耗/ [/ 1/ ]/ ;/ 数据中心/ 每年/ 耗电量/ 已达/ 近千/ 亿千瓦时/ ,/ 电费/ 占/ 运营/ 成本/ 的/ 50/ %/ 以上/ ②/ ./ 绿色/ 和平/ 组织/ 预测/ ,/ 2020/ 年/ 全球/ 主要/ IT/ 运营商/ 的/ 能耗/ 将/ 达到/ 2/ 万亿千瓦时/ ,/ 超过/ 德/ 、/ 法/ 、/ 加/ 和/ 巴西/ 等/ 4/ 国/ 的/ 能耗/ 总和/ ③/ ./ IT/ 企业/ 已经/ 属于/ 能源/ 密集型/ 产业/ ./ 从/ 成本/ 角度看/ ,/ 随着/ 计算机设备/ 规模/ 的/ 不断扩大/ ,/ 耗电量/ 剧增/ ,/ 导致/ 运营/ 成本/ 大大增加/ ,/ 能源/ 费用/ 是/ 各个/ IT/ 企业/ 的/ 主要/ 成本/ ./ 马化腾/ 表示/ ,/ 2009/ 年/ 腾讯/ 数据中心/ 全年/ 电费/ 已经/ 等于/ 腾讯/ 所有/ 员工/ 的/ 工资/ ;/ 中国联通/ 数据中心/ 运营/ 成本/ 约/ 占/ 总收入/ 的/ 60/ %/ ,/ 能源消耗/ 成本/ 占/ 运营/ 成本/ 的/ 70/ %/ ④/ ./ 能源价格/ 飙升/ 导致/ 运营/ 成本/ 同比/ 增长/ ,/ 买得起/ 设备/ 供不起/ 电/ 的/ 现象/ 已经/ 出现/ [/ 2/ ]/ ./ 从/ 环境/ 角度看/ ,/ 各种/ 数据/ 表明/ 计算机/ 在/ 吞噬/ 大量/ 能源/ 的/ 同时/ ,/ 不知不觉/ 中/ 给/ 环境/ 带来/ 了/ 沉重/ 压力/ ./ 传统/ 能源/ 驱动/ 的/ 100MW/ 发电站/ 每年/ 排放/ 5000/ 万吨/ CO2/ 的/ IT/ 资源/ 的/ 年/ 耗电量/ 等同于/ 14/ 个/ 大型/ 发电站/ 的/ 年/ 供电量/ ,/ 换算/ 成/ 二氧化碳/ 排放量/ ,/ 相当于/ 全球/ 航空公司/ 一年/ 的/ 碳/ 排放量/ 之/ 和/ ,/ 占/ 温室/ 气体/ 总/ 排放量/ 的/ 2/ %/ ⑤/ ./ 而且/ ,/ 这些/ 数据/ 都/ 在/ 持续/ 地/ 增加/ ./ 成本/ 和/ 环境因素/ 促使/ 能耗/ 优化/ 成为/ IT/ 企业界/ 和/ 学术界/ 共同/ 关注/ 的/ 热门话题/ ,/ 绿色/ 计算/ 逐渐/ 产业化/ ./ 报道/ 指出/ ,/ 2015/ 年/ 全球/ 绿色/ IT/ 服务/ 市场/ 规模/ 达/ 50/ 亿美元/ ,/ 亚太地区/ 绿色/ IT/ 服务/ 市场/ 规模/ 达到/ 20/ 亿美元/ ,/ 中国/ 、/ 日本/ 和/ 澳大利亚/ 将/ 占据/ 重要/ 份额/ ⑥/ ./ 综上/ ,/ 计算机/ 能耗/ 优化/ 问题/ 亟待解决/ ./ 能耗/ 归根结底/ 是/ 硬件/ 消耗/ 的/ ,/ 但/ 我们/ 可以/ 从/ 软件/ 层面/ 来/ 更/ 灵活/ 地/ 优化/ 能耗/ ./ 软件/ 是/ 能源/ 的/ 最终/ 消费者/ [/ 4/ ]/ ./ 为/ 研究/ 软件/ 特征/ 对/ 能耗/ 的/ 影响/ ,/ 以便/ 从/ 软件/ 层面/ 优化/ 能耗/ ,/ 我们/ 首先/ 定义/ 软件/ 完成/ 特定/ 运算/ 和/ 服务/ 时/ 对应/ 的/ 硬件/ 环境/ 消耗/ 的/ 电能/ 为/ 软件/ 能耗/ ./ 如果/ 将/ 系统/ 简单/ 的/ 分为/ 硬件/ 层/ 和/ 软件/ 层/ ,/ 那么/ 软件/ 能耗/ 优化/ 方法/ 则/ 位于/ 软件/ 层/ ,/ 采用/ 软件/ 相关/ 的/ 技术/ ,/ 优化/ 软件/ 能耗/ [/ 5/ ]/ ./ 从/ 软件/ 层面/ 优化/ 能耗/ 的/ 方法/ 有/ 很多/ ,/ 本文/ 着重/ 研究/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 技术/ ,/ 也/ 即/ 从/ 编写/ 代码/ 角度/ 来/ 评估/ 和/ 优化/ 软件/ 能耗/ ./ 我们/ 在/ 下/ 一节/ 会/ 描述/ 这种/ 优化/ 方法/ 的/ 优势/ ./ 本文/ 总结/ 了/ 近年来/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 相关/ 领域/ 的/ 研究进展/ 和/ 最新/ 成果/ ./ 本文/ 第/ 2/ 节/ 介绍/ 能耗/ 优化/ 的/ 基本思路/ 和/ 分类/ ;/ 第/ 3/ 和/ 4/ 节/ 分别/ 分析/ 代码/ 能耗/ 估算/ 和/ 优化/ 方法/ ,/ 并/ 在/ 每节/ 小结/ 中/ 提出/ 现存/ 问题/ 和/ 研究/ 方向/ ;/ 第/ 5/ 节/ 介绍/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 工具/ ;/ 第/ 6/ 节/ 从/ 抽象/ 算法/ 角度/ 提出/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 的/ 新思路/ 和/ 挑战/ ;/ 最后/ ,/ 第/ 7/ 节对/ 全文/ 进行/ 总结/ ./ 2/ 优化/ 思路/ 无论是/ 采用/ 何种/ 优化/ 方法/ ,/ 或是/ 面向/ 何种/ 优化/ 对象/ ,/ 能耗/ 优化/ 思路/ 可以/ 归结为/ 两种/ :/ 一是/ 减少/ 能源/ ①/ ②/ ③/ ④/ ⑤/ ⑥/ tional/ // publications/ // climate/ // 2012/ // iCoal/ // HowCleanisYour/ -/ Page3/ 的/ 使用/ ;/ 二是/ 提高/ 能源/ 利用率/ ,/ 减少/ 能源/ 浪费/ (/ 如/ 设备/ 空载/ 耗能/ )/ [/ 6/ -/ 8/ ]/ ./ 例如/ :/ 对于/ 一个/ 低/ 功率/ 硬件/ ,/ 若该/ 硬件/ 采用/ 更加/ 节能/ 的/ 材料/ 制作/ ,/ 则/ 属于/ 前者/ ;/ 若该/ 硬件/ 可以/ 在/ 空闲/ 时/ 自动/ 休眠/ ,/ 则/ 属于/ 后者/ ./ 对于/ 一个/ 低能耗/ 软件/ ,/ 若/ 缩减/ 功能/ 以/ 降低/ 能耗/ ,/ 则/ 属于/ 前者/ ,/ 如果/ 充分利用/ 资源/ 减少/ 硬件/ 空闲/ ,/ 则/ 属于/ 后者/ ./ 基于/ 该/ 思路/ ,/ 我们/ 采用/ 不同/ 分类/ 规则/ 对/ 现有/ 研究/ 进行/ 归类/ ,/ 一种/ 按/ 优化/ 对象/ 不同/ ,/ 分成/ 软件/ 能耗/ 优化/ 和/ 硬件/ 能耗/ 优化/ ;/ 另/ 一种/ 按/ 优化/ 方法/ 不同/ ,/ 分成/ 静态/ 能耗/ 优化/ 和/ 动态/ 能耗/ 优化/ ;/ 两种/ 分类/ 互/ 有/ 交叉/ ./ 本节/ 首先/ 介绍/ 硬件/ 和/ 软件/ 能耗/ 优化/ ,/ 随后/ 介绍/ 静态/ 与/ 动态/ 能耗/ 优化/ ,/ 最后/ 概述/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ ./ 2.1/ 软件/ 和/ 硬件/ 能耗/ 优化/ 对于/ 计算机系统/ ,/ 其/ 能耗/ 归根结底/ 是/ 由/ 硬件/ 产生/ 的/ ,/ 但/ 却/ 可以/ 从/ 多个/ 层面/ 来/ 优化/ ./ 我们/ 把/ 系统/ 分为/ 硬件/ 层/ 和/ 软件/ 层/ ,/ 而/ 又/ 将/ 软件/ 分为/ 平台/ 软件/ 层/ 和/ 应用软件/ 层/ ,/ 图/ 1/ 展示/ 了/ 系统/ 各个/ 层面/ 的/ 能耗/ 优化/ 研究/ ./ 由/ 前文/ 所述/ 优化/ 思路/ 可知/ ,/ 电能/ 由/ 硬件/ 层/ 消耗/ ,/ 因此/ 很多/ 研究/ 在/ 该层/ 考虑/ 硬件/ 设备/ 的/ 能耗/ 特性/ ,/ 开发/ 功耗/ 更/ 低/ 的/ 硬件/ ;/ 然而/ 从/ 另外/ 一个/ 角度/ ,/ 硬件/ 为/ 平台/ 软件/ 提供/ 资源/ ,/ 平台/ 软件/ 是/ 资源/ 的/ “/ 消费者/ ”/ ,/ 通过/ 合理/ 的/ 资源管理/ 能/ 减少/ 资源/ 使用/ ,/ 或/ 提高/ 资源/ 使用率/ ,/ 节能/ 效果/ 更好/ ,/ 尤其/ 是/ 在/ 集群/ 环境/ 下/ ,/ 平台/ 软件/ 能耗/ 优化/ 效果显著/ [/ 9/ ]/ ;/ 同理/ ,/ 平台/ 软件/ 为/ 应用软件/ 提供/ 运算/ 和/ 存储/ 服务/ ,/ 那么/ 本质/ 上/ 应用软件/ 是/ 资源/ 的/ 最终/ 消费者/ ,/ 研究/ 低能耗/ 的/ 应用软件/ ,/ 同样/ 可以/ 达到/ 节能/ 的/ 作用/ ./ 应用/ 于/ 平台/ 软件/ 层/ 和/ 应用软件/ 层/ 的/ 能耗/ 优化/ 方法/ 均/ 为/ 软件/ 能耗/ 优化/ 方法/ ./ 软件/ 能耗/ 优化/ 是/ 绿色软件/ 研究/ 的/ 一个/ 重要/ 部分/ ,/ 软件/ 能耗/ 存在/ 很大/ 优化/ 空间/ ./ 在/ 性能/ 领域/ ,/ 软件/ 的/ 效率/ 与/ 硬件/ 的/ 效率/ 增长/ 之间/ 的/ 差距/ 越来越/ 大/ ;/ 同理/ ,/ 在/ 能耗/ 领域/ ,/ 硬件/ 功耗/ 降低/ 速度/ 较/ 快/ ,/ 可是/ 软件/ 能耗/ 降低/ 则/ 较为/ 缓慢/ [/ 10/ ]/ ./ 此外/ ,/ 在/ 可/ 持续/ 发展/ 被/ 高度重视/ 的/ 今天/ ,/ IT/ 企业/ 和/ 学术/ 组织/ 更多地/ 考虑/ 计算机硬件/ 和/ 原材料/ 的/ 重复/ 利用/ 等/ ,/ 而/ 较/ 少/ 地/ 关注/ 软件/ 的/ “/ 可/ 持续/ 发展/ ”/ [/ 11/ ]/ ./ 而/ 软件/ 能耗/ 优化/ 正是/ 实现/ “/ 可/ 持续/ 发展/ ”/ 的/ 重要途径/ ,/ 这/ 一点/ 是/ 硬件/ 能耗/ 优化/ 所/ 无法/ 替代/ 的/ [/ 12/ ]/ ./ 以/ 汽车/ 节油/ 作/ 比喻/ ,/ 研究/ 计算机硬件/ 节能/ 技术/ 好比/ 是/ 研究/ 发动机/ 节油/ 技术/ ,/ 而/ 研究/ 软件/ 节能/ 技术/ 好比/ 是/ 研究/ 驾驶员/ 的/ 习惯/ (/ 静态/ )/ 、/ 行车/ 最短/ 路径/ (/ 动态/ )/ 、/ 躲避/ 交通/ 高峰/ (/ 动态/ )/ 等等/ ,/ 后者/ 能够/ 大幅度/ 地/ 减少/ 空闲/ 油耗/ ,/ 也/ 能够/ 充分发挥/ 各种/ 发动机/ 节油/ 技术/ ./ 2.2/ 静态/ 和/ 动态/ 能耗/ 优化/ 无论是/ 面向/ 硬件/ 还是/ 软件系统/ ,/ 现有/ 能耗/ 优化/ 方法/ 均/ 可以/ 分为/ 静态/ 和/ 动态/ 两种/ ./ 动态/ 能耗/ 优化/ 方法/ 根据/ 上下文/ 实时/ 地/ 调节/ 硬件/ 或/ 软件/ 的/ 行为/ 以/ 达到/ 节能/ 的/ 目的/ [/ 13/ ]/ ./ 动态/ 能耗/ 优化/ 建立/ 在/ 3/ 个/ 假设/ 的/ 前提/ 之上/ :/ 一是/ 系统/ 边界/ 清晰/ ,/ 系统/ 能耗/ 可以/ 测量/ 或是/ 度量/ ;/ 二是/ 系统/ 可以/ 实时/ 动态/ 地/ 调整/ 其/ 能耗/ 相关/ 的/ 状态/ ,/ 如/ 工作/ 状态/ ,/ 资源分配/ 等/ ;/ 三是/ 系统/ 负载/ 在/ 一定/ 程度/ 上/ 是/ 可/ 预测/ 的/ ./ 组件/ 开关/ 是/ 动态/ 能耗/ 优化/ 主要/ 方法/ ,/ 即/ 关闭/ 空闲/ 组件/ ./ 硬件/ 节能/ 方法/ 中/ 的/ “/ 组件/ ”/ 多为/ 芯片/ ;/ 操作系统/ 节能/ 方法/ 中/ 的/ “/ 组件/ ”/ 多为/ 计算机/ 部件/ ;/ 分布式系统/ 节能/ 方法/ 中/ “/ 组件/ ”/ 多为/ 计算机/ 节点/ ./ 此外/ ,/ 动态/ 地/ 减少/ 硬件/ 空闲/ 也/ 是/ 一种/ 可选/ 的/ 方法/ ,/ 如/ 避免/ MapReduce/ 作业/ 中/ Reduce/ 节点/ 等待/ 所有/ Map/ 节点/ 执行/ 结束/ [/ 14/ ]/ ./ 本文/ 不再/ 逐一/ 详述/ 这些/ 方法/ ./ 静态/ 能耗/ 优化/ 方法/ ,/ 顾名思义/ ,/ 是/ 在/ 系统/ 设计/ 之时/ 即/ 被/ 采用/ 的/ ,/ 在/ 系统/ 运行/ 时/ 无法/ 改变/ 的/ 优化/ 方法/ ./ 从/ 硬件/ 角度/ ,/ 静态/ 能耗/ 优化/ 方法/ 包括/ 针对/ 电路设计/ 、/ 逻辑设计/ 和/ 硬件/ 体系结构/ 的/ 优化/ ./ 从/ 软件/ 角度/ ,/ 静态/ 能耗/ 优化/ 可以/ 分为/ 面向/ 代码/ 的/ 优化/ 方法/ 、/ 面向/ 软件架构/ 的/ 优化/ 方法/ 以及/ 软件开发/ 过程/ 上/ 的/ 优化/ (/ 绿色/ 软件工程/ )/ [/ 15/ ]/ ./ 我们/ 可以/ 设计/ 低能耗/ 的/ 软件/ 模块/ ,/ 如/ 采用/ 低能耗/ 的/ 算法/ 或/ 低能耗/ 的/ 程序设计/ 方法/ ,/ 直接/ 降低/ 能耗/ ,/ 避免/ 资源/ 空闲/ ./ 2.3/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 软件/ 能耗/ 优化/ 并非/ 一个/ 崭新/ 的/ 技术/ 领域/ ./ 传统/ 的/ 能耗/ 优化/ 技术/ 主要/ 应用/ 于/ 嵌入式软件/ ,/ 这些/ 软件/ 多/ 运行/ 在/ 电池/ 供电/ 的/ 硬件/ 环境/ ,/ 在/ 能源/ 受限/ 环境/ 下/ 优化/ 软件/ 能耗/ 可以/ 延长/ 软件/ 的/ 运行/ 时间/ ./ 但/ 近年来/ ,/ 随着/ 云/ 计算/ 技术推广/ ,/ 能耗/ 优化/ 技术/ 逐渐/ 推广/ 到/ 一/ Page4/ 般/ 软件/ ,/ 尤其/ 是/ 那些/ 需要/ 依赖/ 大量/ 服务器/ 的/ 分布式/ 软件/ ./ 研究/ 软件/ 能耗/ 优化/ ,/ 若/ 按/ 优化/ 软件/ 的/ 种类/ 不同/ ,/ 则/ 会/ 有/ 嵌入式软件/ 、/ 分布式/ 软件/ 、/ 移动/ 应用软件/ 等/ 多种/ 分类/ ,/ 但/ 这些/ 软件/ 均/ 由/ 代码/ 组成/ ,/ 抛开/ 功能/ 和/ 运行/ 环境/ 的/ 差异/ ,/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 具有/ 较/ 好/ 的/ 适用性/ ./ 本文/ 针对性/ 能/ 已/ 优化/ 的/ 代码/ ,/ 研究/ 其/ 能耗/ 优化/ 方法/ ,/ 称为/ 面向/ 代码/ 的/ 能耗/ 优化/ ,/ 属于/ 静态/ 的/ 软件/ 能耗/ 优化/ 方法/ ./ 按/ 优化/ 对象/ ,/ 面向/ 代码/ 的/ 能耗/ 优化/ 又/ 可以/ 具体/ 分为/ 指令/ 级/ 、/ 语句/ 级/ 和/ 模块/ 级/ 三类/ ./ 例如/ :/ 指令/ 级/ 优化/ 可/ 采用/ 英特尔/ 编译器/ 提供/ 的/ “/ prof/ -/ gen/ ”/ 和/ “/ prof/ -/ use/ ”/ 优化/ 代码/ 能耗/ ;/ 语句/ 级/ 优化/ 可以/ 采用/ 能耗/ 更/ 低/ 的/ 代码/ 结构/ 和/ 数据结构/ 来/ 降低/ 能耗/ ;/ 模块/ 级/ 优化/ 可以/ 通过/ 根据/ 上下文/ 选择/ 能耗/ 更/ 低/ 的/ 实现/ 算法/ 或/ 模块/ 设计/ 方法/ ,/ 来/ 优化/ 能耗/ ./ 无论/ 优化/ 对象/ 是/ 指令/ 、/ 语句/ 还是/ 模块/ ,/ 面向/ 代码/ 的/ 能耗/ 优化/ 方法/ 大多/ 遵循/ 两个/ 原理/ ./ 其一/ ,/ 代码/ 对应/ 的/ 指令/ 越长/ ,/ 指令/ 越/ 复杂/ ,/ 代码/ 的/ 运行/ 时间/ 将/ 越长/ ,/ 能耗/ 越高/ ./ 即使/ 硬件/ 存在/ 功率/ 波动/ ,/ 指令/ 长度/ 还是/ 执行/ 时间/ 以及/ 执行/ 能耗/ 的/ 主导/ 因素/ ;/ 此外/ ,/ 复杂性/ 高/ 的/ 指令/ 将/ 需要/ 更/ 多/ 的/ CPU/ 资源/ ,/ CPU/ 是/ 计算机/ 组件/ 中/ 最为/ 耗能/ 的/ 部分/ ,/ 因此/ 消耗/ 了/ 大量/ 能源/ ./ 应该/ 尽量减少/ 代码/ 的/ 复杂性/ ,/ 用/ 简单/ 的/ 语句/ 或/ 逻辑/ 替换/ 复杂/ 的/ 语句/ 或/ 逻辑/ ./ 例如/ 模块/ 封装/ 会/ 增加/ 额外/ 的/ 数据/ 转换/ 和/ 传递/ 运算/ ,/ 如/ 数据格式/ 和/ 数据/ 位置/ 的/ 变换/ ,/ 这些/ 运算/ 都/ 消费/ 额外/ 的/ 能量/ ./ 第二/ ,/ 代码/ 对/ 资源/ 的/ 使用率/ 越高/ ,/ 运行/ 时内/ 空闲/ 资源/ 越/ 少/ ,/ 能耗/ 越低/ ./ 理论/ 上/ ,/ 代码/ 的/ 运行/ 能耗/ 和/ 代码/ 完成/ 的/ 任务量/ 线性/ 正/ 相关/ ,/ 但/ 实际上/ 这种/ 关系/ 是/ 不/ 准确/ 的/ ./ 代码运行/ 会/ 消耗/ 一些/ 额外/ 能量/ ,/ 对/ 资源/ 的/ 使用率/ 越高/ ,/ 这部分/ 额外/ 能量/ 就/ 越少/ ./ 这是/ 由于/ 硬件/ 设备/ 空载/ 功率/ 的/ 存在/ ,/ 空闲/ 的/ 资源/ 会/ 浪费/ 能源/ ./ 给定/ 完成/ 某/ 功能/ 的/ 代码/ ,/ 若/ 资源/ 需求/ 总量/ 不变/ ,/ 资源/ 空闲/ 越/ 少/ ,/ 浪费/ 的/ 能量/ 就/ 越少/ ,/ 能耗/ 就/ 越/ 低/ ,/ 或/ 称为/ 能效/ (/ 能源/ 效率/ )/ 越高/ ./ 比如/ ,/ 高/ 内聚/ 低/ 耦合/ 是/ 软件/ 模块化/ 的/ 重要/ 目标/ ,/ 但弱/ 耦合/ 的/ 模块/ 会/ 增加/ 模块/ 间/ 数据/ 同步/ 的/ 代价/ ,/ 在/ 数据/ 同步/ 时/ ,/ 运算/ 资源/ 的/ 使用率/ 很/ 低/ ,/ 造成/ 能源/ 浪费/ ./ 部分/ 研究/ 认为/ ,/ 因为/ 代码/ 编译/ 过程/ 的/ 复杂性/ 和/ 指令/ 的/ 执行/ 顺序/ 对/ 能耗/ 影响/ 的/ 无法/ 预知/ 性/ ,/ 导致/ 从/ 代码/ 级/ 分析/ 和/ 优化/ 大型软件/ 产生/ 的/ 能耗/ 非常/ 困难/ ;/ 而/ 本文/ 梳理/ 和/ 总结/ 了/ 很多/ 静态/ 代码优化/ 以/ 降低/ 能耗/ 的/ 理论/ 和/ 技术/ ,/ 证明/ 该/ 方法/ 同样/ 可行/ 且/ 有效/ ./ 3/ 能耗/ 估算/ 本节/ 将/ 综述/ 面向/ 代码/ 的/ 软件/ 能耗/ 估算/ 方法/ ./ 作为/ 软件/ 能耗/ 优化/ 的/ 关键/ 支撑/ 技术/ 之一/ ,/ 软件/ 能耗/ 估算/ 不仅/ 要/ 把/ 软件/ 执行/ 涉及/ 到/ 的/ 硬件/ 能耗/ 映射/ 到/ 软件/ 各/ 组成部分/ 上/ ,/ 更/ 期望/ 建立/ 高层/ 软件/ 特征/ 与/ 硬件/ 能耗/ 的/ 关系/ ,/ 从而/ 易于/ 在/ 软件/ 层面/ 评估/ 和/ 优化/ 系统/ 能耗/ [/ 16/ ]/ ./ 能耗/ 测量/ 最/ 简单/ 的/ 方法/ 是/ 采用/ 功率/ 和/ 电量/ 测量/ 仪器/ (/ 如/ 电量计/ )/ 去/ 直接/ 测量/ 软件/ 执行/ 时/ 的/ 系统/ 能耗/ ,/ 然而/ ,/ 该/ 方法/ 存在/ 以下/ 不足/ [/ 17/ ]/ :/ (/ 1/ )/ 电量计/ 都/ 有/ 一定/ 的/ 功率/ 测量范围/ ,/ 普通/ 的/ 电量计/ 测量/ 的/ 最大/ 功率/ 在/ 2500W/ 左右/ ,/ 如果/ 软件/ 的/ 运行/ 在/ 分布式/ 环境/ ,/ 如/ 包含/ 大量/ 用电/ 设备/ 的/ 集群/ 系统/ ,/ 则/ 需要/ 大量/ 电量计/ ,/ 并且/ 电量计/ 的/ 控制/ 、/ 同步/ 和/ 数据/ 汇总/ 都/ 存在/ 难题/ ;/ (/ 2/ )/ 电量计/ 难以/ 区分/ 代码/ 各个/ 部分/ 的/ 能耗/ 差异/ ,/ 如/ 存储/ 代码/ 和/ 运算/ 代码/ 、/ 业务/ 代码/ 和/ 数据/ 访问/ 代码/ ,/ 难以/ 定位/ 高能耗/ 语句/ ,/ 此外/ 也/ 无法/ 区分/ 在/ 分布式/ 环境/ 下/ 每个/ 节点/ 的/ 能源消耗/ ,/ 也/ 即/ 电量计/ 测量/ 能耗/ 的/ 粒度/ 难以/ 控制/ ;/ (/ 3/ )/ 由于/ 测量/ 仪器/ 的/ 精度/ 限制/ ,/ 能耗/ 分析/ 的/ 范围/ 、/ 精度/ 和/ 准确度/ 有限/ ./ 由此可见/ ,/ 能耗/ 测量/ 是/ 一种/ 黑盒/ 的/ 测量方法/ ,/ 不利于/ 对/ 软件/ 能耗/ 进行/ 细致/ 的/ 评价/ 和/ 优化/ ,/ 而/ 对/ 软件/ 的/ 能耗/ 估算/ 是/ 能耗/ 优化/ 研究/ 的/ 一个/ 重要/ 课题/ ./ 本节/ 描述/ 了/ 面向/ 代码/ 的/ 软件/ 能耗/ 估算/ 方法/ ,/ 我们/ 将/ 估算/ 方法/ 分为/ 指令/ 级/ 、/ 语句/ 级/ 和/ 模块/ 级/ 共/ 3/ 类/ ./ 指令/ 级/ 能耗/ 估算/ 将/ 代码执行/ 的/ 每条/ 指令/ 能耗/ 进行/ 加/ 和/ ;/ 语句/ 级/ 估算/ 则/ 以/ 语句/ 作/ 估算/ 单元/ ,/ 研究/ 语句/ 之间/ 的/ 逻辑/ 结构/ 对/ 能耗/ 的/ 影响/ ;/ 模块/ 级/ 则/ 以/ 软件/ 模块/ ,/ 如类/ 、/ 方法/ 等/ 作为/ 估算/ 单元/ ,/ 研究/ 模块/ 间/ 关系/ 对/ 能耗/ 的/ 影响/ ./ 现存/ 大量/ 指令/ 级/ 能耗/ 估算/ 研究/ ,/ 已/ 较为/ 成熟/ ,/ 本文/ 简要/ 介绍/ 其/ 基本思路/ ,/ 而/ 着重/ 描述/ 语句/ 级/ 和/ 模块/ 级/ 的/ 能耗/ 估算/ ./ 3.1/ 指令/ 级/ 指令/ 级/ 能耗/ 估算/ 方法/ 首先/ 估计/ 代码生成/ 的/ 指令/ 在/ 目标/ 硬件/ (/ 如/ 处理器/ )/ 上/ 的/ 执行/ 能耗/ ,/ 并/ 通过/ 叠加/ 指令/ 能耗/ 来/ 估算/ 代码/ 能耗/ ,/ 这种/ 方法/ 又称/ 做白盒/ 方法/ ,/ 它/ 要求/ 预知/ 硬件/ 信息/ ./ 白盒/ 方法/ 的/ 优点/ 是/ 通过/ 硬件/ 预/ 描述/ ,/ 能够/ 相对/ 快速/ 和/ 准确/ 地/ 评估/ 代码/ 能耗/ ;/ 缺点/ 是/ 与/ 硬件/ 环境/ 绑定/ ,/ 在/ 许多/ 硬件/ 环境/ ,/ 或/ 解释/ 型/ 执行/ 的/ 语言/ 环境/ ,/ 周期/ 精确/ 的/ 指令集/ 模拟器/ 不可/ 用/ ./ 该/ 方法/ 大量/ 应用/ 到/ 嵌入式软件/ [/ 18/ ]/ ,/ 文献/ [/ 19/ ]/ 对/ 相关/ 技术/ 做/ 了/ 很/ 好/ 的/ 综述/ ./ Page5/ 部分/ 研究/ 人员/ 注意/ 到/ 白盒/ 方法/ 的/ 难度/ 在于/ 代码/ 和/ 指令/ 的/ 映射/ 关系/ ,/ 而视/ 代码/ 为/ 黑盒/ ,/ 单纯/ 地/ 考虑/ 对应/ 指令/ 的/ 执行/ 情况/ 则/ 会/ 更/ 容易/ ./ 操作系统/ 会/ 给出/ 大量/ 的/ 参数/ 来/ 统计/ 这些/ 指令/ 的/ 执行/ ,/ 但/ 这样/ 做/ 的/ 代价/ 就是/ 无法/ 精确/ 地/ 确定/ 代码/ 和/ 能耗/ 的/ 关系/ ,/ 而/ 代码/ 能耗/ 并非/ 是/ “/ 估算/ ”/ 而是/ “/ 测量/ 和/ 预测/ ”/ 得到/ ,/ 且/ 度量/ 粒度/ 也/ 随之/ 变大/ ./ 例如/ ,/ 文献/ [/ 20/ ]/ 更加/ 细致/ 地/ 对/ 指令/ 进行/ 划分/ ,/ 并/ 采用/ 不同/ 功能/ 的/ 测试代码/ (/ BurnCPU/ ,/ MemLoop/ ,/ Network/ ,/ TarKernel/ ,/ DiskRead/ ,/ DiskWrite/ )/ 来/ 分析/ 指令/ 和/ 能耗/ 之间/ 的/ 关系/ ,/ 以/ 预测/ 代码/ 能耗/ ./ 文献/ [/ 21/ ]/ 研发/ 了/ 一套/ 进程/ 级/ 功率/ 测量/ 工具/ ,/ 这能/ 准确/ 地/ 评估/ 每/ 一个/ 在/ Linux/ 服务器/ 上/ 运行/ 的/ 进程/ 的/ 能源/ 利用/ 情况/ ,/ 进而/ 评价/ 软件系统/ 的/ 能耗/ ./ 一系列/ 实验/ 表明/ ,/ 该/ 方法/ 对/ 复杂/ 电子商务/ 应用软件/ 的/ 能耗/ 评估/ 准确率/ 到达/ 了/ 95/ %/ ./ 3.2/ 语句/ 级/ 相对/ 于/ 指令/ 级/ ,/ 语句/ 级/ 能耗/ 估算/ 粒度/ 更大/ ,/ 该/ 方法/ 将/ 代码/ 以/ 语句/ 块/ 的/ 形式/ 进行/ 分割/ ,/ 评价/ 每个/ 语句/ 块/ 的/ 能耗/ ./ 语句/ 级/ 能耗/ 估算/ 需要/ 考虑/ 语句/ 之间/ 的/ 逻辑关系/ ,/ 也/ 即/ 语句/ 结构/ 对/ 能耗/ 的/ 影响/ ./ 这/ 一点/ 有别于/ 指令/ 级/ 能耗/ 估计/ ./ 在/ 第/ 4/ 节会/ 进一步/ 介绍/ ,/ 语句/ 结构/ 对/ 代码/ 能耗/ 影响/ 是/ 显著/ 的/ ,/ 语句/ 结构/ 的/ 调整/ 是/ 面向/ 代码/ 的/ 能耗/ 优化/ 的/ 重要途径/ ./ 语句/ 级/ 能耗/ 估算/ 的/ 一般/ 方法/ 如图/ 2/ 所示/ ./ 首先/ 图/ 3/ 语句/ 片段/ 和/ 其/ 对应/ 的/ 解析/ 树/ [/ 23/ ]/ 文献/ [/ 22/ ]/ 还/ 设计/ 了/ 解析/ 树/ 的/ 等价/ 变换/ 方法/ ,/ 以/ 优化/ 代码/ 能耗/ ./ 在/ 能耗/ 估算/ 部分/ ,/ 该文/ 采用/ 指令/ 级/ 的/ 能耗/ 估算/ 技术/ ,/ 设计/ 了/ 一个/ 编译/ 和/ 运行/ 环境/ 相关/ 的/ 处理/ 引擎/ 去/ 逐/ 节点/ 、/ 逐行/ 、/ 逐/ 函数/ 地/ 计算/ 代码/ 的/ 能耗/ 、/ 时间/ 代价/ 和/ 空间/ 代价/ ./ 文献/ [/ 23/ ]/ 提出/ 了/ 一个/ C语言/ 代码/ 能耗/ 模型/ ./ 该文/ 认为/ 指令/ 执行/ 需要/ 3/ 个/ 阶段/ :/ 指令/ 获取/ 、/ 解码/ 以及/ 执行/ ,/ 因此/ 代码执行/ 能耗/ 不能/ 等价/ 于/ 指令/ 执行/ 能耗/ ,/ 而/ 应该/ 等价/ 获取/ 、/ 解码/ 和/ 执行/ 阶段/ 的/ 能耗/ 之/ 和/ ,/ 如/ 抽象/ 每条/ 语句/ 以及/ 语句/ 结构/ 的/ 能耗/ 特征/ ,/ 然后/ 分别/ 评价/ 其/ 能耗/ ./ 对于/ 前者/ ,/ 可以/ 采用/ 指令/ 级/ 方法/ 估算/ ;/ 对于/ 后者/ ,/ 尽管/ 不同/ 的/ 研究/ 做法/ 不尽相同/ ,/ 但/ 都/ 是/ 通过/ 参数/ 的/ 定义/ 和/ 调整/ 以及/ 不同/ 参数/ 组合/ 来/ 表征/ 语句/ 结构/ 对/ 能耗/ 的/ 影响/ ./ 文献/ [/ 22/ ]/ 遵循/ 如图/ 2/ 所示/ 的/ 方法/ ,/ 属于/ 语句/ 级/ 能耗/ 估算/ 的/ 研究/ 工作/ ./ 该/ 文献/ 通过/ 源码/ 分析/ 建立/ 解析/ 树/ (/ ParseTree/ )/ ./ 图/ 3/ 给出/ 一段/ 简单/ 的/ if/ -/ else/ 语句/ 块/ 建立/ 的/ 解析/ 树/ ./ 每个/ 节点/ 都/ 是/ 一个/ 原子/ 的/ 能耗/ 单元/ ,/ 而树/ 的/ 边/ 则/ 表示/ 组合/ 关系/ ,/ 以此/ 来/ 表征/ 源码/ 的/ 结构特征/ 和/ 语句/ 特征/ ./ If/ -/ else/ 分支/ 结构特征/ 带来/ 的/ 能耗/ 由/ 节点/ 1/ 表示/ ,/ 而/ If/ 子句/ 中/ 两条/ 语句/ 的/ 顺序/ 结构特征/ 由/ 节点/ 3/ 和/ 7/ 表示/ ./ 式/ (/ 1/ )/ 所示/ ./ Etotal/ _/ system/ =/ Etotal/ _/ fetch/ +/ Etotal/ _/ decode/ +/ Etotal/ _/ execute/ (/ 1/ )/ 其中/ :/ Etotal/ _/ system/ 为/ 代码/ 能耗/ ;/ Etotal/ _/ fetch/ 为/ 指令/ 获取/ 能耗/ ;/ Etotal/ _/ decode/ 为/ 指令/ 解码/ 能耗/ ;/ Etotal/ _/ execute/ 为/ 指令/ 执行/ 能耗/ ./ 获取/ 指令/ 时/ 需要/ 通过/ 外部/ 总线/ 访问/ 内存/ ,/ 因此/ 该/ 阶段/ 的/ 能耗/ 近似/ 等价/ 于/ 访问/ 内存/ 数据/ 的/ 能耗/ ./ 因此/ 指令/ 获取/ 的/ 能耗/ 可由式/ (/ 2/ )/ 估算/ :/ 式/ 中/ ,/ Nmem/ _/ cyc/ 表示/ 内/ 存在/ 活动状态/ 时/ 的/ 存储周期/ Page6/ 的/ 数量/ ./ 实验/ 证明/ ,/ 该文/ 提出/ 的/ 方法/ 累积/ 指令/ 获取/ 以及/ 指令/ 解码/ 阶段/ 的/ 能耗/ ,/ 其/ 估算/ 值比/ 传统/ 仅仅/ 考虑/ 执行/ 阶段/ 的/ 能耗/ 估算/ 值/ 高出/ 90/ %/ ./ 文章/ 认为/ 该/ 估算/ 值/ 更为/ 准确/ ,/ 遗憾/ 的/ 是/ 该文/ 并/ 没有/ 给出/ 估算/ 值/ 与/ 实际/ 值/ 的/ 比较/ ./ 此外/ ,/ 部分/ 研究/ 工作/ 采用/ 执行/ 代码/ 的/ 方式/ 来/ 评价/ 其/ 能耗/ ,/ 或/ 称为/ 代码运行/ 时/ 的/ 能耗/ 评价/ (/ Profiling/ )/ 工具/ [/ 24/ ]/ ./ 通过/ 执行/ 代码/ ,/ 评价/ 工具/ 易/ 获得/ CPU/ 等/ 计算机/ 组件/ 的/ 工作/ 状态/ ,/ 并/ 采用/ 对应/ 的/ 能耗/ 模型/ ,/ 进而/ 估算/ 代码/ 能耗/ [/ 17/ ]/ ./ 文献/ [/ 25/ ]/ 设计/ 了/ Eprof/ 工具/ ./ Eprof/ 可以/ 准确/ 评估/ 代码/ 能耗/ ,/ 有助于/ 开发人员/ 定位/ 高能耗/ 代码/ 并/ 加以/ 优化/ ./ 该文/ 认为/ 传统/ 的/ 以/ CPU/ 为/ 中心/ 的/ 能耗/ 评价/ 方法/ 没有/ 考虑/ 到/ 计算机/ 附属/ 设备/ ,/ 如/ 硬盘/ 和/ 网络设备/ ,/ 而/ 这些/ 设备/ 同样/ 耗能/ ./ 文章/ 指出/ ,/ 代码/ 同步/ 访问/ CPU/ ,/ 因此/ 代码执行/ 与/ CPU/ 能耗/ 也/ 是/ 同步/ 的/ ;/ 而/ 代码/ 对/ 附属/ 设备/ 的/ 访问/ 则/ 可能/ 是/ 异步/ 的/ ,/ 因此/ 语句/ 执行/ 与/ 附属/ 设备/ 能耗/ 也/ 是/ 异步/ 的/ ./ 该/ 工具/ 主要/ 从/ CPU/ 的/ 同步/ 能耗/ 和/ 设备/ (/ 如/ 磁盘/ 和/ 网卡/ )/ 的/ 异步/ 能耗/ 两个/ 角度/ 来/ 考虑/ ,/ 编程人员/ 可以/ 在/ 依赖/ CPU/ 的/ 代码/ 和/ 依赖/ I/ // O/ 的/ 代码/ 中/ 做出/ 选择/ ./ 例如/ ,/ 是否/ 采用/ 压缩/ 的/ 数据格式/ 传输数据/ ./ 整个/ 系统结构/ 如图/ 4/ 所示/ ./ 如图/ 4/ 所示/ ,/ 代码执行/ 时会/ 产生/ CPU/ 行为/ 和/ 设备/ 行为/ ,/ 这些/ 行为/ 能够/ 被/ Eprof/ 采集/ 并/ 构建/ CPU/ 能耗/ 模型/ 和/ 设备/ 能耗/ 模型/ ./ 实验/ 证明/ Eprof/ 对/ 能够/ 准确/ 定位/ 语句/ 的/ 能耗/ ,/ 误差率/ 为/ 3.6/ %/ ./ 类似/ 的/ ,/ 通过/ 进程/ 级/ 和/ 设备/ 级/ 监控/ ,/ 文献/ [/ 26/ ]/ 提出/ 一种/ 估算/ 代码/ 能耗/ 的/ 方法/ ,/ 并/ 定位/ 高能耗/ 代码/ ./ 该文/ 认为/ 传统/ 解决方案/ 主要/ 采用/ 粗粒度/ 方法/ 来/ 监控/ 设备/ 和/ 进程/ 的/ 能耗/ ,/ 而/ 该文/ 提出/ 了/ 一个/ 细粒度/ 的/ 运行/ 时/ 能耗/ 监控/ 框架/ ,/ 以/ 判断/ 能耗/ 热点/ 的/ 位置/ ./ 框架/ 包含/ 两级/ 监控/ 组件/ :/ 操作系统/ 级/ 和/ 进程/ 级/ 能量/ 监控器/ ,/ 前者/ 主要/ 监控/ 硬件/ 设备/ ,/ 后者/ 监控/ Java/ 代码/ 的/ 执行/ ./ 框架/ 将/ 两个/ 监控器/ 的/ 结果/ 对应/ 起来/ ,/ 就/ 可以/ 评估/ 代码/ 能耗/ ,/ 确定/ 代码/ 中/ 的/ 能耗/ 热点/ ./ 类似/ 的/ 研究/ 还/ 包括/ 文献/ [/ 27/ ]/ 和/ [/ 28/ ]/ ./ 3.3/ 模块/ 级/ 从/ 代码/ 角度/ ,/ 具有/ 适当/ 内聚性/ 且/ 相互/ 弱/ 耦合/ 的/ 代码/ 单元/ 称为/ 模块/ ./ 在/ 面向对象编程/ 语言/ 中/ ,/ 方法/ 可以/ 视为/ 最小/ 的/ 模块/ ,/ 而类/ 或/ 包/ 作为/ 模块/ 则/ 粒度/ 适中/ ./ 模块/ 级/ 的/ 软件/ 能耗/ 评估/ 不仅/ 考虑/ 语句/ 能耗/ 、/ 语句/ 结构/ 对/ 能耗/ 的/ 影响/ ,/ 还要/ 考虑/ 模块/ 间/ 的/ 依赖/ 关系/ 对/ 能耗/ 的/ 影响/ ,/ 这种/ 依赖/ 关系/ 通过/ 具体/ 代码/ 的/ 形式/ 体现/ ./ 因此/ ,/ 模块/ 级/ 的/ 软件/ 能耗/ 估算/ 也/ 属于/ 面向/ 代码/ 的/ 估算/ 方式/ ./ 模块/ 级/ 的/ 能耗/ 估算/ 研究/ 主要/ 考虑/ 模块/ 和/ 模块/ 之间/ 的/ 依赖/ 关系/ 对/ 能耗/ 的/ 影响/ ,/ 本文/ 总结/ 这种/ 依赖/ 关系/ 为/ 4/ 类/ ,/ 它们/ 及其/ 对/ 能耗/ 的/ 影响/ 分别/ 为/ :/ (/ 1/ )/ 调用/ (/ Invocation/ )/ ./ B/ 模块/ 调用/ A/ 模块/ 的/ 方法/ ,/ 在/ 这种/ 情况/ 下/ ,/ 模块/ 间/ 依赖/ 带来/ 的/ 能耗/ 等同于/ 语句/ 级/ 能耗/ 估算/ 中/ 的/ 函数调用/ ,/ 可以/ 简单/ 地/ 采用/ 内联/ 技术/ 将/ 两者/ 视为/ 一个/ 模块/ ./ (/ 2/ )/ 通信/ (/ Communication/ )/ ./ B/ 模块/ 与/ A/ 模块/ 远程/ 通讯/ ,/ 通信/ 带来/ 的/ 能耗/ 参照/ 消息/ 通信/ 代码/ 的/ 能耗/ ,/ 按/ 同步/ 和/ 异步/ 、/ 阻塞/ 和/ 非/ 阻塞/ 的/ 消息/ 通信/ ,/ 能耗/ 影响/ 均/ 不同/ ./ (/ 3/ )/ 转换/ (/ Conversion/ )/ ./ B/ 模块/ 与/ A/ 模块/ 交互/ 需要/ 接口/ 转换/ ,/ 转换/ 带来/ 的/ 能耗/ 参照/ 数据结构/ 变换/ 代码/ 的/ 能耗/ ./ (/ 4/ )/ 多态/ (/ Polymorphism/ )/ ./ B/ 模块/ 中/ 的/ 方法/ 是/ A/ 模块/ 中/ 方法/ 的/ 多态/ 版本/ ,/ 任何/ 其他/ 模块/ 与/ A/ 模块/ 间/ 的/ 依赖/ 关系/ 都/ 要/ 叠加/ 调用/ 虚/ 方法/ 的/ 能耗/ ./ 文献/ [/ 29/ ]/ 提出/ 一个/ 架构/ 用来/ 评估/ 软件/ 不同/ 模块/ 之间/ 的/ 依赖/ 对于/ 软件/ 能耗/ 的/ 影响/ ./ 该/ 文献/ 假设/ 模块/ 之间/ 通过/ “/ 连接器/ ”/ 交互/ ,/ 且/ 连接器/ 本身/ 也/ 是/ 模块/ ,/ 一个/ 连接器/ 也/ 可以/ 与/ 其他/ 连接器/ 交互/ ./ 由于/ 没有/ 考虑/ 面向对象/ 的/ 特性/ ,/ 连接器/ 被/ 抽象/ 为/ 通信/ 连接器/ 、/ 流程/ 控制/ 连接器/ 、/ 数据/ 转换/ 连接器/ 和/ 接口/ 化简/ (/ Facilitation/ )/ 连接器/ ,/ 其中/ 前/ 两者/ 对应/ 本文/ 总结/ 的/ “/ 通信/ 依赖/ ”/ ,/ 后/ 两者/ 都/ 对应/ 模块/ 间/ “/ 转换/ 依赖/ ”/ ./ 该/ 文献/ 给出/ 了/ 这些/ 连接器/ 的/ 能耗/ ,/ 本文/ 略去/ 了/ 繁杂/ 的/ 公式/ 描述/ ./ 为了/ 证明/ 能耗/ 估算/ 的/ 准确性/ 和/ 平台/ 无关/ 性/ ,/ 该文/ 估算/ 了/ MIDAS/ 系列/ 的/ 传感器/ 应用软件/ ,/ 在/ 不同/ 的/ 运行/ 环境/ 中/ 估计值/ 和/ 测量/ 值/ 的/ 误差/ 范围/ 在/ 7/ %/ 之内/ ./ 以/ Java/ 语言/ 为例/ ,/ 文献/ [/ 30/ ]/ 从/ 软件/ 模块/ 角度/ 提出/ 了/ Java/ 代码/ 的/ 能耗/ 估算/ 方法/ ./ 包括/ CPU/ 操作/ 、/ 内存/ 访问/ 、/ I/ // O/ 操作/ 对应/ 的/ 代码/ 能耗/ ./ 此外/ 还/ 整合/ 了/ 模块/ 和/ 模块/ 之间/ 的/ 通信/ 能耗/ 模型/ ,/ 模块/ 的/ 能耗/ 包括/ 运算/ 能耗/ 和/ 通信/ 能耗/ ,/ 而/ 通信/ 能耗/ 又/ 分为/ 本地/ 通信/ 能耗/ 和/ 远程/ 通信/ 能耗/ ./ 实验/ 使用/ 数字/ 万用表/ 来/ 测量/ 影/ Page7/ 响/ 设备/ 能耗/ 的/ 电压/ 和/ 电流/ 两种/ 因子/ ,/ 并/ 分别/ 监控/ 运算/ 能耗/ 和/ 通讯/ 能耗/ ./ 经/ 实验/ 验证/ ,/ 在/ 不/ 考虑/ 信息/ 交互/ 频率/ 和/ 平均/ 信息/ 大小/ 的/ 情况/ 下/ ,/ 评估/ 结果/ 与/ 实际/ 消耗/ 之间/ 误差/ 在/ 5/ %/ 之内/ ./ 类似/ 的/ 面向对象/ 语言/ 编写/ 的/ 代码/ 的/ 能耗/ 估算/ 研究/ 还有/ 文献/ [/ 31/ ]/ ./ 部分/ 研究/ 工作/ 采用/ 抽象/ 模块/ 而/ 非/ 具体/ 代码/ ,/ 以/ 评估/ 代码/ 能耗/ ./ 文献/ [/ 32/ ]/ 提出/ 基于/ 程序/ 流程图/ 来/ 对/ 软件系统/ 进行/ 模块/ 级/ 的/ 能耗/ 评估/ ./ 流程图/ 能够/ 表征/ 代码/ 结构/ :/ 流程图/ 元素/ 封装/ 了/ 程序模块/ ,/ 这些/ 模块/ 分为/ 运算/ (/ Process/ )/ 、/ 数据/ 读写/ (/ I/ // O/ )/ 和/ 流程/ 控制/ (/ Decision/ )/ 这/ 3/ 类/ ;/ 元素/ 间/ 关系/ 为/ 分支/ 和/ 迭代/ ./ 该文/ 基于/ 流程图/ 元素/ 的/ 特征/ 和/ 分支/ 、/ 迭代/ 的/ 执行/ 概率/ 估算/ 代码/ 能耗/ ./ 该文/ 实验/ 部分/ 采用/ AutoBench/ ①/ 定义/ 的/ 3/ 种/ 基准/ 用例/ 对/ 能耗/ 估算/ 方法/ 进行/ 了/ 验证/ ./ 实验/ 结果表明/ 误差/ 范围/ 在/ -/ 11.9/ %/ 和/ 6.9/ %/ 之间/ ./ 文献/ [/ 33/ ]/ 进一步/ 的/ 提出/ 基于/ “/ 存在/ 并发/ 软件/ 模块/ 的/ 流程图/ ”/ 的/ 能耗/ 估算/ ./ 文献/ [/ 34/ ]/ 采用/ 了/ 更为/ 抽象/ 的/ UML/ 和/ Petri/ 网来/ 表征/ 模块/ 和/ 模块/ 之间/ 的/ 调用/ 关系/ ,/ 以/ 估算/ 代码/ 能耗/ ./ 上述/ 方法/ 很大/ 程度/ 上/ 借鉴/ 了/ 代码/ 性能/ 估算/ 和/ 评价/ 方法/ ,/ 其/ 关键步骤/ 是/ 代码/ 模块/ 的/ 划分/ ,/ 划分/ 方法/ 需/ 满足/ :/ (/ 1/ )/ 按/ 代码/ 能耗/ 特征/ 划分/ 模块/ ,/ 模块/ 能耗/ 已知/ ,/ 模块/ 内/ 没有/ 显著/ 的/ 分支/ 语句/ ,/ 具体/ 可/ 参照/ 语句/ 级/ 的/ 代码/ 能耗/ 估算/ 方法/ ;/ (/ 2/ )/ 模块/ 的/ 调用/ 次数/ 可以/ 估算/ ,/ 流程/ 中/ 的/ 分支/ 判断/ 可以/ 推算/ 执行/ 概率/ ./ 由于/ 软件/ 模块/ 的/ 粒度/ 较大/ ,/ 对于/ 不同/ 的/ 编程语言/ ,/ 模块/ 大小/ 划分/ 灵活/ ,/ 给/ 能耗/ 估算/ 带来/ 较大/ 的/ 不确定性/ ,/ 因此/ 上述/ 文献/ ,/ 如/ 文献/ [/ 30/ ]/ ,/ 多/ 定性/ 的/ 评价/ 而/ 非/ 定量/ 的/ 估算/ 能耗/ ./ 我们/ 认为/ 这是/ 面向/ 代码/ 的/ 软件/ 能耗/ 估算/ 的/ 发展/ 方向/ ,/ 本文/ 将/ 在/ 下/ 一/ 小节/ 阐述/ 这一/ 观点/ ./ 3.4/ 进一步/ 研究/ 由/ 前文/ 可知/ ,/ 面向/ 代码/ 的/ 软件/ 能耗/ 估算/ 可以/ 从/ 指令/ 级/ 、/ 语句/ 级/ 和/ 模块/ 级/ 3/ 种/ 不同/ 的/ 粒度/ 考虑/ ./ 估算/ 方法/ 越/ 靠近/ 硬件平台/ 则/ 越/ 精确/ ,/ 但/ 普适性/ 会越/ 差/ ;/ 反之/ 越/ 抽象/ ,/ 估算/ 误差/ 越大/ ,/ 但/ 普适性/ 越好/ ./ 大部分/ 研究/ 都/ 强调/ 语句/ 结构/ 和/ 模块/ 依赖/ 关系/ 对/ 能耗/ 的/ 影响/ ./ 能耗/ 估算/ 的/ 目的/ 并非/ 是/ 要/ 取代/ 仪器/ 测量/ ,/ 而是/ 为了/ 定位/ 高能耗/ 代码/ 、/ 能耗/ 优化/ 或/ 评价/ 能耗/ 优化/ 效果/ ./ 此外/ ,/ 无论是/ 直接/ 使用/ 指令/ ,/ 还是/ 将/ 代码/ 转换成/ 指令/ ,/ 只要/ 代码/ 没有/ 运行/ ,/ 都/ 不能/ 实现/ 精确/ 估算/ ./ 因为/ ,/ 代码/ 的/ 逻辑/ 结构复杂/ ,/ 除了/ 运行/ 代码/ ,/ 否则/ 难以/ 精确/ 地/ 确定/ 代码/ 的/ 执行/ 路径/ ,/ 如/ 分支/ 的/ 选择/ ,/ 循环/ 的/ 执行/ 次数/ ,/ 数据结构/ 的/ 规模/ 等等/ ./ 由此可见/ ,/ 一个/ 精确/ 的/ 代码/ 能耗/ 估算/ 难以实现/ ,/ 且/ 未必/ 满足要求/ ,/ 我们/ 重/ 定义/ 面向/ 代码/ 的/ 软件/ 能耗/ 评估/ 模型/ 和/ 方法/ 应该/ 满足/ :/ (/ 1/ )/ 环境/ 无关/ 性/ ./ 与/ 编译/ 环境/ 和/ 运行/ 环境/ 无关/ ;/ (/ 2/ )/ 富/ 代码/ 特性/ ./ 能够/ 充分考虑/ 代码/ 的/ 各种/ 性质/ ,/ 包括/ 丰富/ 的/ 语句/ 和/ 关键字/ 、/ 代码/ 逻辑/ 结构/ 、/ 数据结构/ 、/ 面向对象/ 特性/ 和/ 模块/ 间/ 依赖/ 关系/ 等/ ;/ (/ 3/ )/ 静态/ 度量/ ./ 不/ 需要/ 代码/ 编译/ 或者/ 运行/ ,/ 仅仅/ 分析/ 代码/ 即可/ 度量/ ;/ (/ 4/ )/ 适度/ 精确/ ./ 适当/ 放宽/ 估算/ 的/ 精确性/ 要求/ ,/ 考虑/ 估算/ 值/ 和/ 实际/ 值/ 量级/ 上/ 的/ 一致/ ,/ 变化趋势/ 上/ 的/ 一致/ ,/ 或/ 估算/ 值/ 是/ 实际/ 值/ 的/ 上/ (/ 确/ )/ 界/ 或是/ 下/ (/ 确/ )/ 界/ ;/ (/ 5/ )/ 可/ 叠加/ ./ 估算/ 方法/ 要/ 可/ 叠加/ ,/ 计算方法/ (/ 函数/ )/ 是/ 分布/ 的/ ,/ 每/ 部分/ 代码/ 能耗/ 估算/ 值/ 的/ 加和应/ 等于/ 整个/ 代码/ 整体/ 估算/ 的/ 能耗/ 值/ ;/ (/ 6/ )/ 公平性/ ./ 估算/ 精度/ 、/ 实际/ 运行/ 环境/ 等/ 因素/ 都/ 不/ 应该/ 影响/ 估算/ 方法/ 的/ 公平性/ ,/ 在/ 相同/ 的/ 上下文/ 中/ ,/ 若干/ 代码/ 间/ 的/ 估算/ 能耗/ 差距/ 和/ 实际/ 运行/ 能耗/ 差距/ 应/ 基本一致/ ,/ 或/ 满足/ 一定/ 比例/ ;/ (/ 7/ )/ 简洁/ 通用/ ./ 估算/ 方法/ 应该/ 突出/ 代码/ 的/ 共性/ ,/ 弱化/ 差异/ ,/ 化繁为简/ ,/ 保证/ 方法/ 的/ 通用性/ ./ 既然/ 估算/ 方法/ 不/ 可能/ 达到/ 较/ 高/ 的/ 精度/ ,/ 那么/ 我们/ 认为/ ,/ 适当/ 的/ 简化/ 估算/ 方法/ ,/ 突出/ 代码/ 特点/ ,/ 是/ 面向/ 代码/ 的/ 能耗/ 估算/ 方法/ 的/ 进一步/ 研究/ 方向/ ./ 众所周知/ ,/ 代码/ 由/ 若干/ 语句/ 以及/ 它们/ 之间/ 的/ 结构/ 组成/ ,/ 这些/ 语句/ 的/ 特征/ 包括/ 操作/ 种类/ (/ 如/ 运算/ 、/ 赋值/ 和/ 方法/ 调用/ 等/ )/ 、/ 语句/ 间/ 不同/ 的/ 逻辑/ 结构/ (/ 如/ 顺序/ 、/ 分支/ 和/ 循环/ )/ 以及/ 语句/ 包含/ 的/ 面向对象/ 特性/ (/ 如/ 方法/ 、/ 继承/ 和/ 多态/ )/ ,/ 我们/ 将/ 上述/ 特征/ 统称/ 为/ 代码/ 特征/ ./ 现有/ 研究/ 表明/ ,/ 语义/ 相同/ 但/ 上述/ 特征/ 不同/ 的/ 代码运行/ 能耗/ 不同/ ./ 我们/ 定义/ 运行/ 时/ 能耗/ (/ RuntimeEnergyConsumption/ )/ 是/ 指/ 代码/ 在/ 特定/ 硬件/ 环境/ 中/ 以及/ 特定/ 输入/ 下/ 执行/ 而/ 消耗/ 的/ 能量/ ,/ 而/ 代码/ 的/ 视/ 在/ 能耗/ (/ ApparentEnergyConsumption/ )/ 是/ 由/ 代码/ 特征/ 体现/ 的/ 能耗/ ./ 当/ 设定/ 某种/ 特征/ 语句/ 的/ 运行/ 时/ 能耗/ 为/ 单位/ 能耗/ 时/ ,/ 代码/ 的/ 视/ 在/ 能耗/ 即/ 是/ 其/ 静态/ 语句/ 能耗/ 的/ 叠加/ ,/ 而/ 忽略/ 运行/ 时/ 和/ 上下文/ 信息/ ./ 为/ 阐述/ 上述/ 观点/ ,/ 我们/ 将/ 代码/ 能耗/ 类比/ 为/ 代码/ 性能/ ./ 在/ 代码/ 性能/ 优化/ 中/ ,/ 我们/ 可以/ 反复/ 执行/ 代码/ ,/ 并/ 调整/ 代码/ 特征/ 以/ 优化/ 代码/ 的/ “/ 运行/ 时/ 性能/ ”/ ,/ 但/ 代码/ 的/ 运行/ 时/ 性能/ 与/ 输入/ 数据/ 的/ 规模/ 和/ 分布/ 以及/ 硬件/ 环境/ 都/ 有/ 很大/ 的/ 关系/ ,/ 运行/ 时/ 性能/ 的/ 估计/ 和/ 优化/ 需要/ 考虑/ 很多/ 因素/ ;/ 而/ 静态/ 代码优化/ 工具/ ,/ 如/ pclint/ ②/ ,/ ①/ ②/ Page8/ 则/ 可以/ 按/ 代码/ 特征/ 评价/ 和/ 优化/ 代码/ 的/ “/ 视在/ 性能/ ”/ ,/ 这/ 在/ 代码/ 编写/ 时/ 尤为重要/ ,/ 可以/ 避免/ 很多/ 功能/ 满足/ 但/ 性能/ 较差/ 的/ 代码/ ./ 同样/ ,/ 视在/ 能耗/ 也/ 是/ 一种/ 静态/ 的/ 度量/ 标准/ ./ 诚然/ ,/ 代码运行/ 时/ 能耗/ 和/ 视/ 在/ 能耗/ 会/ 存在/ 差异/ ,/ 但视/ 在/ 能耗/ 度量/ 能够/ 有效/ 地/ 比较/ 不同/ 代码/ 之间/ 的/ 能耗/ 差异/ ,/ 或/ 代码/ 的/ 能耗/ 优化/ 效果/ ,/ 且/ 有利于/ 总结/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 方法/ ./ 然而/ ,/ 视在/ 能耗/ 的/ 定义/ 和/ 估算/ 也/ 绝非易事/ ,/ 如何/ 定义/ 原子/ 的/ 能耗/ 单元/ ,/ 是/ 指令/ 、/ 运算/ 还是/ 语句/ ;/ 如果/ 是/ 语句/ ,/ 那么/ 如何/ 定义/ 具有/ 单位/ 视在/ 能耗/ 的/ 语句/ ;/ 其他/ 语句/ 的/ 视/ 在/ 能耗/ 如何/ 表达/ ;/ 代码/ 特征/ 和/ 视/ 在/ 能耗/ 之间/ 有何/ 关系/ ;/ 如何/ 确定/ 语句/ 间/ 的/ 调用/ 关系/ ;/ 视在/ 能耗/ 如何/ 比较/ 以及/ 和/ 运行/ 时/ 能耗/ 之间/ 存在/ 何种/ 关系/ ;/ 这些/ 都/ 是/ 亟待/ 研究/ 的/ 问题/ ./ 4/ 能耗/ 优化/ 本文/ 第/ 2/ 节/ 介绍/ 了/ 大量/ 软件/ 能耗/ 优化/ 的/ 思路/ 和/ 具体做法/ ;/ 第/ 3/ 节/ 介绍/ 了/ 面向/ 代码/ 的/ 能耗/ 评估/ ,/ 这为/ 发现/ 代码/ 相关/ 的/ 能耗/ 规律/ 、/ 定位/ 耗能/ 代码/ 以及/ 评价/ 能耗/ 优化/ 效果/ 提供/ 了/ 基础/ ./ 本节/ 着重/ 介绍/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 方法/ ./ 在/ 2.3/ 节/ 我们/ 按/ 优化/ 对象/ 不同/ ,/ 将/ 面向/ 代码/ 的/ 能耗/ 优化/ 又/ 细分/ 为/ 指令/ 级/ 、/ 语句/ 级/ 和/ 模块/ 级/ 优化/ 方法/ ./ 现存/ 大量/ 指令/ 级/ 能耗/ 优化/ 研究/ ,/ 已/ 较为/ 成熟/ ,/ 本文/ 简要/ 介绍/ 其/ 基本思路/ ,/ 而/ 着重/ 描述/ 语句/ 级/ 和/ 模块/ 级/ 能耗/ 优化/ ./ 4.1/ 指令/ 级/ 在/ 给定/ 硬件/ 环境/ 下/ ,/ 指令/ 的/ 执行/ 能耗/ 是/ 固定/ 的/ ,/ 若/ 要/ 降低/ 指令/ 的/ 能耗/ ,/ 需/ 开发/ 低功耗/ 的/ 硬件/ 系统/ ,/ 这/ 并非/ 本文/ 关注/ 的/ 内容/ ./ 从/ 代码/ 角度/ ,/ 指令/ 级/ 能耗/ 优化/ 的/ 基本思路/ 是/ 通过/ 编译/ 技术/ ,/ 减少/ 代码生成/ 的/ 二进制/ 指令/ 数/ ;/ 或/ 通过/ 指令/ 变换/ 将/ 功耗/ 较/ 高/ 的/ 指令/ 用/ 功能/ 相同/ 但/ 功耗/ 较/ 低/ 的/ 指令/ 来/ 替换/ [/ 35/ ]/ ;/ 或/ 使/ 代码/ 编译/ 后/ 的/ 指令/ 能够/ 充分利用/ 硬件/ 的/ 节能/ 特性/ [/ 36/ ]/ ;/ 以/ 降低/ 代码/ 能耗/ ./ 本/ 小节/ 将/ 简要/ 列举/ 部分/ 优化/ 技术/ ./ 在/ 编译/ 期间/ 删除/ 永远/ 不会/ 执行/ 的/ 冗余/ 代码/ ,/ 可以/ 减少/ 代码/ 编译/ 后/ 的/ 二进制/ 指令/ ,/ 从而/ 降低/ CPU/ 执行/ 指令集/ 的/ 功耗/ ./ 例如/ ,/ 可以/ 在/ 编译/ 期间/ 检查/ 条件/ 表达式/ 的/ 值/ ,/ 若值/ 为/ 常量/ ,/ 则/ 可以/ 减少/ 分支/ 循环/ 指令/ ./ 此外/ ,/ 加法/ 移位/ 操作/ 的/ 能耗/ 比/ 乘法/ 操作/ 的/ 能耗/ 低/ ,/ 因为/ 前者/ 的/ 指令/ 周期/ 较/ 少/ ,/ 因此/ 编译/ 时/ 将/ 代码/ 的/ 乘法/ 操作/ 变为/ 加法/ 操作/ ,/ 会/ 一定/ 程度/ 上/ 节省/ 能耗/ ./ 在/ 多级/ 存储/ 中/ ,/ 数据/ 的/ 存储/ 位置/ ,/ 如/ 寄存器/ 、/ 高速缓存/ 、/ 主存/ 等/ ,/ 会/ 显著/ 影响/ 代码/ 能耗/ ;/ 但/ 效率高/ 的/ 存储容量/ 有限/ ,/ 我们/ 可以/ 在/ 编译/ 阶段/ 确定/ 数据/ 的/ 重用/ 特征/ ,/ 将/ 反复/ 读写/ 的/ 数据/ 放入/ 高速/ 存储/ ;/ 还/ 可以/ 在/ 编译/ 阶段/ 预测/ 缓存/ 的/ 大小/ ,/ 让/ 多余/ 的/ 缓存/ 设备/ 休眠/ ,/ 以/ 降低/ 能耗/ [/ 37/ ]/ ./ 4.2/ 语句/ 级/ 在/ 程序设计/ 方法学/ 中/ ,/ 程序变换/ (/ ProgramTrans/ -/ formation/ )/ 是/ 指/ 由/ 现有/ 程序/ P/ 生成/ 新/ 程序/ P/ 的/ 过程/ ,/ 且/ P/ 和/ P/ 等价/ ./ 一般/ 的/ ,/ 我们/ 通过/ 程序变换/ 将/ 一个/ 面向/ 问题/ 、/ 结构/ 清晰/ 、/ 易于/ 理解/ 但/ 效率/ 不高/ 的/ 正确/ 程序/ ,/ 转变/ 为/ 一个/ 面向/ 过程/ 、/ 不太/ 直观/ 但/ 效率/ 较/ 高/ 的/ 正确/ 程序/ ./ 语句/ 级/ 能耗/ 优化/ 研究/ 借用/ 程序变换/ 的/ 概念/ ,/ 在/ 不/ 改变/ 代码/ 可察/ 行为/ 的/ 前提/ 下/ ,/ 将/ 能耗/ 较/ 高/ 的/ 代码优化/ 为/ 能耗/ 较/ 低/ 的/ 代码/ ,/ 称为/ 代码变换/ (/ CodeTransformation/ )/ ./ 代码变换/ 的/ 优化/ 原理/ 可以/ 归纳/ 为/ 以下/ 3/ 点/ :/ (/ 1/ )/ 化/ 复杂/ 运算/ 为/ 简单/ 运算/ ,/ 化/ 复杂/ 数据结构/ 为/ 简单/ 数据结构/ (/ 但/ 并非/ 化/ 复杂/ 代码/ 为/ 简单/ 代码/ )/ ,/ 减少/ 运算/ 能够/ 减少/ 资源/ 的/ 使用/ ,/ 降低/ 能耗/ ;/ (/ 2/ )/ 优先/ 使用/ 高性能/ 的/ 存储/ ,/ 如/ 缓存/ 优于/ 内存/ 、/ 磁盘/ 和/ 网络/ 存储/ ,/ 以此类推/ ,/ 无论/ 是否/ 读写/ 数据/ ,/ 内存/ 一直/ 处于/ 通电/ 状态/ ,/ 而/ 磁盘/ 一直/ 在/ 旋转/ ,/ 优先/ 使用/ 高性能/ 存储/ 会/ 减少/ 数据交换/ ,/ 减少/ 空载/ 能耗/ ,/ 提高/ 存储介质/ 的/ 能源/ 效率/ ;/ (/ 3/ )/ 充分利用/ CPU/ 资源/ ,/ 在/ 不/ 增加/ 运算量/ 的/ 前提/ 下/ 提高/ CPU/ 运算/ 的/ 效率/ ,/ 减少/ CPU/ 空闲/ 时间/ ,/ 虽然/ CPU/ 空闲/ 时/ 可以/ 进入/ 低/ 功率/ 状态/ ,/ 但/ 这个/ 空载/ 功率/ 也/ 高于/ 内存/ 、/ 硬盘/ 等/ 其他/ 组件/ 的/ 功率/ ,/ 减少/ CPU/ 的/ 空闲/ ,/ 能够/ 减少/ 电能/ 消耗/ ,/ 而/ CPU/ 空闲/ 的/ 原因/ 可以/ 归结为/ “/ 等待/ 任务/ ”/ 和/ “/ 等待/ 数据/ ”/ 两种/ [/ 38/ ]/ ,/ 在/ 代码/ 的/ 执行/ 过程/ 中/ CPU/ 会/ 因为/ 上述/ 原因/ 而/ 被动/ 空闲/ ./ 代码变换/ 的/ 步骤/ 主要/ 为/ “/ 变换/ ”/ 和/ “/ 校验/ ”/ 两步/ ,/ 可以/ 进一步/ 归纳/ 为/ 如图/ 5/ 所示/ 步骤/ :/ 首先/ 对/ 源代码/ 运用/ 代码变换/ ,/ 使/ 其/ 转换/ 为/ 变换/ 代码/ ;/ 然后/ 对/ 源代码/ Page9/ 和/ 变换/ 代码/ 进行/ 分析/ (/ 或/ 编译/ )/ ,/ 验证/ 两者/ 的/ 相等/ 性/ ,/ 如/ 通过/ “/ 数据/ 依赖图/ ”/ 表示/ 数据流/ 信息/ ,/ “/ 代数/ 运算/ ”/ 表示/ 运算/ 信息/ ,/ 判定/ 等价/ 条件/ ,/ 计算/ 输入/ 与/ 输出/ 的/ 映射/ 等价/ [/ 39/ ]/ ;/ 随后/ 运行/ 源代码/ 和/ 变换/ 代码/ ,/ 对/ 运行/ 结果/ 的/ 相等/ 性/ 进行/ 验证/ ;/ 最后/ 通过/ 两者/ 运行/ 期间/ 采集/ 的/ 能耗/ 参数/ 评价/ 能耗/ 和/ 能耗/ 优化/ 效果/ ./ 图/ 5/ 中/ 第/ 2/ 步/ 和/ 第/ 3/ 步/ 至少/ 应该/ 完成/ 一步/ ,/ 因为/ 在/ 实际/ 运用/ 中/ ,/ 代码变换/ 会/ 由/ 程序/ 自动/ 完成/ ,/ 如/ 开发工具/ 集成/ 的/ 优化/ 功能/ ,/ 那么/ 需要/ 一个/ 正确性/ 检测/ 程序/ 来/ 确保/ 变换/ 后/ 的/ 代码/ 正确/ 和/ 变换/ 前后/ 的/ 语义/ 等价/ ./ 代码变换/ 的/ 形式/ 多种多样/ ,/ 或/ 修改/ 代码/ 直接/ 实现/ 代码变换/ ,/ 或/ 不/ 修改/ 代码/ 本身/ 而是/ 对/ 编译器/ 进行/ 优化/ ,/ 间接/ 实现/ 代码变换/ ./ 大部分/ 研究/ 属于/ 前者/ ,/ 又/ 可以/ 进一步/ 分为/ “/ 循环/ 结构/ 变换/ ”/ 、/ “/ 数据结构/ 变换/ ”/ 、/ “/ 操作/ 和/ 控制结构/ 转换/ ”/ 和/ “/ 程序/ 内部/ 变换/ ”/ 4/ 类/ ./ 对/ 代码变换/ 技术/ 做/ 上述/ 总结/ 后/ ,/ 我们/ 将/ 描述/ 具体/ 的/ 代码变换/ 方法/ ./ 文献/ [/ 40/ -/ 41/ ]/ 对/ 代码变换/ 方法/ 加以/ 总结/ :/ “/ 循环/ 结构/ 变换/ ”/ 减少/ 循环/ 代码/ 中/ 变量/ 的/ 依赖/ ,/ 减少/ CPU/ 因/ I/ // O/ 操作/ 而/ 阻塞/ 的/ 可能/ ,/ 符合/ 优化/ 原理/ ③/ ;/ “/ 数据结构/ 变换/ ”/ 改变/ 数据结构/ 和/ 存储/ 的/ 关系/ ,/ 减少/ 数据结构/ 的/ 遍历/ 次数/ ,/ 降低/ 存储/ 的/ 访问量/ ,/ 符合/ 优化/ 原理/ ②/ ;/ “/ 控制结构/ 变换/ ”/ 采用/ 函数/ 内联/ 技术/ ,/ 通过/ 减少/ 函数/ 之间/ 的/ 调用/ 而/ 导致/ 的/ 上下文/ 切换/ ,/ 符合/ 优化/ 原理/ ①/ ;/ “/ 运算/ 变换/ ”/ 对于/ 条件/ 表达式/ 的/ 每个/ 子项/ 进行/ 了/ 重新排列/ ,/ 能够/ 减少/ 测试/ 条件/ 运算/ ,/ 符合/ 优化/ 原理/ ①/ ;/ “/ 函数调用/ 预处理/ ”/ 通过/ 宏命令/ 包装/ 库函数/ 的/ 调用/ ,/ 当/ 结果/ 通过/ 先验/ 知识/ 可/ 确定/ 时/ 可以/ 直接/ 去除/ 函数调用/ ,/ 符合/ 优化/ 原理/ ①/ ;/ “/ 子程序/ 队列/ 重新/ 排序/ ”/ 和/ “/ 按照/ 地址/ 参数/ 缩小/ 范围/ ”/ 两种/ 变换/ 方法/ 改变/ 堆栈/ 的/ 访问/ 频率/ 和/ 访问/ 顺序/ ,/ 提高/ 缓存/ 命中率/ ,/ 符合/ 优化/ 原理/ ③/ ./ 该/ 文献/ 选用/ 6/ 种/ 测试用例/ 对/ 上述/ 代码变换/ 的/ 能耗/ 优化/ 效果/ 进行/ 评价/ ,/ 如表/ 1/ 所示/ ./ 此外/ ,/ 由于/ 实验/ 程序/ 的/ 启动/ 、/ 监测/ 和/ 退出/ 消耗/ 了/ 较/ 多/ 能耗/ ,/ 因此/ 代码/ 的/ 实际/ 能耗/ 优化/ 效果/ 应该/ 优于/ 测量/ 值/ ./ MatrixMultiplication/ 文献/ [/ 42/ ]/ 较/ 早/ 地/ 研究/ 了/ 循环/ 变换/ 对/ 能耗/ 优化/ 影响/ ,/ 此类/ 变换/ 均/ 以/ 减少/ 缓存/ 失效率/ 和/ 提高/ 并行性/ 为/ 目标/ ,/ 符合/ 优化/ 原理/ ②/ 和/ ③/ ./ 总体/ 上/ ,/ 循环/ 变换/ 方法/ 如下/ :/ (/ 1/ )/ 循环展开/ (/ LoopUnrolling/ )/ ./ 如/ 代码/ 1/ 所示/ ,/ 循环展开/ 通过/ 多次/ 展开/ “/ 各/ 语句/ 数据/ 无关/ ”/ 的/ 循环体/ 来/ 增加/ 循环/ 语句/ ,/ 减少/ 循环/ 次数/ ./ 循环展开/ 旨在/ 增加/ 循环体/ 指令/ 级/ 并行度/ ,/ 这种/ 变换/ 减少/ 了/ 循环/ 控制/ 语句/ 执行/ 的/ 次数/ ,/ 为/ 具有/ 多个/ 功能/ 单元/ 的/ 处理器/ 提供/ 指令/ 级/ 并行/ ,/ 也/ 有利于/ 指令/ 流水线/ 的/ 调度/ ./ (/ 2/ )/ 软件/ 流水线/ (/ SoftwarePipelining/ )/ ./ 如/ 代码/ 2/ 所示/ (/ 和/ 循环展开/ 联合/ 使用/ )/ ,/ 软件/ 流水线/ 去除/ 循环/ ,/ 或/ 改变/ 循环/ 体内/ 相互/ 独立/ 语句/ 的/ 顺序/ ,/ 提高/ 代码/ 或/ 数据/ 缓存/ 的/ 命中率/ 以/ 降低/ 能耗/ ./ (/ 3/ )/ 循环/ 合并/ (/ LoopFusion/ )/ ./ 如/ 代码/ 3/ 所示/ ,/ 循环/ 合并/ 将/ 多组/ 独立/ 的/ 循环/ 合为/ 一个/ 循环/ ./ 类似/ 于/ 循环展开/ ,/ 变换/ 后/ 代码/ 更/ 有利于/ 减少/ 缓存/ 失效/ ,/ 降低/ 能耗/ ./ (/ 4/ )/ 循环排列/ (/ LoopPermutation/ )/ ./ 如/ 代码/ 4/ 所示/ ,/ 循环排列/ 又/ 称为/ 循环/ 互换/ ,/ 用来/ 互换/ 内层/ 循环/ 和/ 外层/ 循环/ ,/ 改变/ 多个/ 循环/ 变量/ 之间/ 的/ 嵌套/ 顺序/ ./ 它/ 是/ 一种/ 高级/ 别的/ 循环/ 变换/ ,/ 通常/ 改善/ 代码/ 的/ 引用/ 局部性/ (/ LocalityofReference/ )/ ./ Page10/ (/ 5/ )/ 循环/ 分块/ (/ LoopTiling/ )/ ./ 如/ 代码/ 5/ 所示/ ,/ 循环/ 分块/ 将/ 迭代/ 空间/ 分割/ 成小块/ ,/ 对应/ 的/ 代码/ 和/ 数据/ 也/ 会/ 分割/ 成小块/ ,/ 以此/ 确保/ 循环/ 内/ 的/ 数据/ 能够/ 驻留/ 缓存/ ,/ 提高/ 缓存/ 命中率/ ./ 循环/ 分块/ 是/ 针对/ 内存/ 的/ 高级/ 优化/ ,/ 同样/ 以/ 减少/ 缓存/ 失效率/ ,/ 提高/ CPU/ 使用率/ 为/ 目标/ ./ 文献/ [/ 42/ ]/ 采用/ SPECCPU92/ [/ 43/ ]/ 标准/ 测试用例/ 的/ 矩阵/ 乘法/ (/ MatrixMultiply/ ,/ MXM/ )/ 和/ 并行/ 化/ 分块/ 五/ 对角/ 矩阵/ 求逆/ (/ InvertsMatrixPenta/ -/ diagonalsinaHighlyParallelFashion/ ,/ VPENTA/ )/ 对/ 上述/ 部分/ 循环/ 变换/ 的/ 能耗/ 优化/ 效果/ 进行/ 测试/ ,/ 实验/ 结果/ 如图/ 6/ 所示/ ./ 除/ 软件/ 流水线/ 变换/ 没有/ 优化/ VPENTA/ 用例/ 的/ 能耗/ ,/ 其他/ 变换/ 均/ 能够/ 优化/ 10/ %/ 的/ 软件/ 能耗/ ./ 从图/ 6/ 和/ 其他/ 相关/ 文献/ 的/ 实验/ 结果/ 可以/ 看出/ ,/ 单纯/ 的/ 通过/ 代码变换/ ,/ 能耗/ 优化/ 的/ 效果/ 并非/ 显著/ ,/ 一方面/ 说明/ 测试用例/ 的/ 规模较/ 小/ ,/ 但/ 另一方面/ 也/ 促使/ 人们/ 研究/ 优化/ 效果/ 更好/ 的/ 方法/ ./ 上述/ 代码变换/ 方法/ 没有/ 很/ 好/ 地/ 考虑/ 操作系统/ 的/ 影响/ ,/ 也/ 没有/ 很/ 好/ 的/ 考虑/ 系统/ 并发/ 性/ 和/ 多/ 核/ 应用程序/ 中/ 数据/ 在/ 多个/ 处理器/ 之间/ 传递/ 等/ 特性/ ./ 因此/ 文献/ [/ 39/ ]/ 提出/ 了/ 以下/ 方法/ :/ (/ 1/ )/ 通过/ 线程/ 的/ 合并/ 或/ 分割/ 实现/ 能耗/ 优化/ 的/ 单/ 处理器/ 并发/ 线程/ 管理/ ;/ (/ 2/ )/ 通过/ 处理器/ 内部/ 数据/ 交互/ 和/ 图/ 6/ 变换/ 前后/ 能耗/ 相对值/ ,/ 每组/ 数据/ 自/ 左向右/ 分别/ 是/ 原代码/ 、/ 循环展开/ 、/ 软件/ 流水线/ 、/ 循环/ 分块/ 和/ 循环排列/ [/ 43/ ]/ 处理器/ 与/ 内存/ 的/ 数据/ 交互/ 之间/ 权衡/ 来/ 优化/ 能耗/ ;/ (/ 3/ )/ 将/ 计算/ 从/ 一个/ 处理器/ 移动/ 到/ 另外/ 一个/ 处理器/ ,/ 以此/ 减少/ 数据/ 访问/ ,/ 降低/ 能耗/ ;/ (/ 4/ )/ 采用/ 共享内存/ ,/ 管道/ 和/ 消息/ 队列/ 等/ 特征/ 来/ 标识/ 软件/ 的/ 通讯/ 特征/ ,/ 通过/ 给出/ 能量/ 优化/ 模型/ 以及/ 源代码/ 转换/ 的/ 整体/ 流程/ 来/ 实现/ ./ 文献/ [/ 39/ ]/ 提出/ 一种/ 兼顾/ 系统/ 特征/ 的/ 代码变换/ 方法/ ,/ 这种/ 变换/ 方法/ 与/ 操作系统/ 相关/ ,/ 且/ 难以实现/ 自动/ 地/ 变换/ 代码/ ,/ 但/ 优化/ 效果/ 明显/ ./ 该/ 方法/ 在/ 系统/ 缓存/ 利用率/ 和/ IPC/ (/ InterprocessCommunication/ )/ 代价/ 之间/ 找到/ 了/ 平衡点/ ./ 该/ 文献/ 给出/ 两个/ 实际/ 的/ 应用/ 案例/ :/ 一是/ 水下/ 导航/ 控制系统/ 代码/ ,/ 改进/ 后/ 节省/ 能耗/ 29.6/ %/ ;/ 二是/ 以太网/ 包/ 控制系统/ 代码/ ,/ 改进/ 后/ 节省/ 能耗/ 27.9/ %/ ./ 综上所述/ ,/ 代码变换/ 的/ 主要/ 方法/ 是/ 源代码/ 的/ 变换/ ,/ 变换/ 同时/ 要/ 充分考虑/ 一般/ 运行/ 环境/ 或/ 特定/ 运行/ 环境/ 的/ 特征/ ./ 代码变换/ 是/ 传统/ 面向/ 编译器/ 的/ 优化/ 节能/ 技术/ 提供/ 了/ 有力/ 的/ 补充/ ./ 文章/ 总结/ 上述/ 代码变换/ 类型/ 如表/ 2/ 所示/ ./ 然而/ ,/ 代码变换/ 也/ 有/ 一定/ 代价/ ,/ 不能/ 简单/ 地/ 认为/ 代码变换/ 一定/ 会/ 降低/ 能耗/ ./ 能耗/ 和/ 代码/ 规模/ 之间/ 并非/ 简单/ 的/ 正/ 相关/ 关系/ ,/ 因此/ 需要/ 在/ 能耗/ 和/ 代码/ 规模/ 之间/ 寻找/ 到/ 一个/ 平衡点/ ,/ 并/ 以/ 用户/ 约束条件/ 来/ 权衡/ 性能/ 和/ 能耗/ 之间/ 的/ 关系/ ./ 文献/ [/ 44/ ]/ 充分考虑/ 了/ 这/ 一点/ ,/ 提出/ 一个/ 代码/ 级/ 能耗/ 微/ 模型/ 和/ 能耗/ 优化/ 方法/ ./ 该/ 方法/ 是/ 一种/ 交互式/ 的/ 代码变换/ 方法/ ,/ 有/ 两/ 方面/ 的/ 优势/ :/ (/ 1/ )/ 采用/ “/ 能耗/ // CPU/ 时钟/ 周期/ ”/ 作为/ 能耗/ 评价/ 指标/ ,/ 仅当/ 必要/ 时且/ 很/ 可能/ 带来/ 明显/ 优化/ 效果/ 时才/ 进行/ 代码/ 级/ 的/ 变换/ ;/ (/ 2/ )/ 提供/ 强大/ 的/ 工具集/ 来/ 确定/ 优化/ 所/ 需/ 的/ 参数/ ./ 文章/ 提出/ 优化/ 代码/ 的/ 执行/ 时间/ 和/ 能耗/ 问题/ 的/ 解/ 空间/ (/ 代码变换/ 方法/ )/ 很大/ ,/ 找到/ 最优/ 解是/ 一个/ NP/ 完全/ 问题/ ,/ 但/ 没有/ 给出/ 证明/ ./ 代码变换/ 问题/ 的/ 求解/ 由/ 若干/ 步骤/ 组成/ ,/ 每/ 一个/ 步骤/ 用/ 一个/ 5/ 元组/ r/ 来/ 描述/ :/ r/ =/ {/ codeSize/ ,/ executionTime/ ,/ energy/ ,/ Page11/ 表/ 2/ 代码变换/ 方法/ 转换/ 类型/ 循环/ 变换/ Transformations/ )/ 数据结构/ 变换/ (/ DataStructureTransformations/ )/ 程序/ 内部/ 变换/ (/ Inter/ -/ ProceduralTransformations/ )/ 操作/ 和/ 控制结构/ 转换/ (/ OperatorsandControlStructureTransformations/ )/ 元组/ 中/ 的/ 每个/ 元素/ 为/ 优化/ 对象/ ,/ 设置/ 为/ {/ 1/ ,/ 0/ ,/ -/ 1/ }/ 3/ 个值/ ,/ 对应/ 含义/ 分别/ 为/ “/ 增加/ ”/ 、/ “/ 不变/ ”/ 和/ “/ 缩小/ ”/ ,/ 极大/ 地/ 缩小/ 了解/ 空间/ ./ 例如/ r/ 可以/ 为/ {/ 1/ ,/ -/ 1/ ,/ 0/ ,/ -/ 1/ ,/ 1/ }/ ,/ 表明/ 当前/ 代码变换/ 相对/ 于/ 前/ 一步/ 会/ 扩大/ 代码/ 规模/ ,/ 降低/ 执行/ 时间/ ,/ 在/ 能耗/ 不变/ 的/ 情况/ 下/ 减少/ 缓存/ 失效率/ 和/ 提高/ CPU/ 的/ 使用率/ ,/ 增加/ 并行性/ ./ 而/ 整个/ 优化/ 过程/ 则/ 采用/ “/ 决策树/ ”/ 求解/ ./ 文献/ [/ 45/ ]/ 采用/ 代码变换/ 的/ 方法/ 对/ 嵌入式/ 系统/ 的/ 能耗/ 进行/ 优化/ ,/ 并且/ 辅以/ 算法/ 优化/ 和/ 内存/ 访问/ 策略/ 的/ 优化/ ,/ 以/ 达到/ 优化/ 系统/ 性能/ 和/ 能耗/ 之双/ 目标/ ./ 文献/ [/ 46/ ]/ 用/ 实例/ 验证/ 了/ 代码变换/ 对/ 软件/ 能耗/ 优化/ 的/ 效果/ ./ 采用/ C语言/ 编写/ 代码/ 求解/ 八/ 皇后/ 问题/ ,/ 并/ 对/ 代码/ 进行/ 能耗/ 优化/ ,/ 评价/ 优化/ 效果/ ./ 具体/ 采用/ 的/ 优化/ 方法/ 为/ 优化/ 循环/ 结构/ 和/ 改善/ 数据结构/ ./ 实验/ 结果表明/ ,/ 对比/ “/ 循环/ 结构/ ”/ ,/ “/ 数据结构/ ”/ 和/ “/ 二者/ 结合/ ”/ 3/ 种/ 优化/ 方法/ ,/ 其/ 能耗/ 分别/ 减少/ 16.5/ %/ ,/ 90.2/ %/ 和/ 93.1/ %/ ./ 由此可见/ ,/ 改善/ 数据结构/ 可以/ 很大/ 程度/ 上/ 降低/ 能耗/ ./ 事实上/ ,/ 改善/ 数据结构/ 属于/ 一种/ 算法/ 级/ 改进/ ,/ 与/ 简单/ 的/ 代码变换/ 相比/ 更为/ 抽象/ ,/ 更为/ 通用/ ./ 我们/ 认为/ ,/ 面向/ 算法/ 的/ 能耗/ 优化/ 与/ 面向/ 代码/ 的/ 能耗/ 优化/ 既有/ 联系/ 又/ 有/ 区别/ ,/ 前者/ 更加/ 具有/ 普适性/ ,/ 是/ 未来/ 的/ 研究/ 方向/ ./ 我们/ 将/ 在/ 本文/ 第/ 6/ 节/ 提及/ 算法/ 级/ 能耗/ 优化/ 思路/ ./ 4.3/ 模块/ 级/ 在/ 面向对象/ 程序设计/ 中/ ,/ 重构/ (/ Refactoring/ )/ 是/ 指/ 在/ 不/ 改变/ 软件系统/ 外部/ 行为/ 的/ 前提/ 下/ ,/ 改善/ 它/ 的/ 内部结构/ ./ 模块/ 级/ 能耗/ 优化/ 研究/ 借用/ 重构/ 的/ 概念/ ,/ 在/ 不/ 改变/ 模块/ 功能/ 的/ 前提/ 下/ ,/ 调整/ 模块/ 自身/ 或/ 模块/ 间/ 结构/ 以/ 优化/ 代码/ 能耗/ ,/ 称为/ 模块/ 重构/ (/ Module/ (/ While/ -/ dotoDo/ -/ while/ )/ 数组/ 范围/ 修改/ 数组/ 替换/ (/ ReplacementofArray/ )/ 地址/ 参数/ 范围/ 减少/ (/ ScopeReductionofby/ -/ addressParameters/ )/ 函数调用/ 预处理/ Refactoring/ )/ ./ 本/ 小节/ 将/ 应用/ 于/ 模块/ 的/ 、/ 粗粒度/ 的/ 能耗/ 优化/ 方法/ 归为/ 模块/ 重构/ ,/ 是/ 为了/ 区别/ 于/ 语句/ 级/ 的/ 代码变换/ 方法/ ,/ 前者/ 更/ 着重于/ 模块/ 之间/ 依赖/ 关系/ 的/ 调整/ ,/ 粒度/ 较/ 粗/ ;/ 后者/ 则/ 着重于/ 语句/ 之间/ 关系/ 的/ 调整/ ,/ 粒度/ 较细/ ./ 我们/ 将/ 按/ 被/ 重构/ 的/ 模块/ 结构/ 由小到大/ ,/ 从/ 算法/ 、/ 组件/ 、/ (/ 模块/ )/ 结构/ 3/ 个/ 角度/ 介绍/ 现有/ 工作/ ./ (/ 1/ )/ 算法/ 相同/ 功能/ 的/ 不同/ 算法/ 需要/ 不同/ 的/ 时间/ 和/ 空间/ ,/ 在/ 给定/ 上下文/ 中/ ,/ 其/ 实现/ 代码/ 量/ 、/ 内存/ 访问量/ 以及/ I/ // O/ 量/ 也/ 会/ 有/ 明显/ 差异/ ,/ 因而/ 其/ 能耗/ 也/ 不同/ ./ 面向/ 算法/ 的/ 能耗/ 优化/ 主要/ 采用/ 算法/ 选择/ 的/ 方法/ ,/ 顾名思义/ ,/ 即/ 在/ 给定/ 上下文/ 中/ 从/ 功能/ 相同/ 的/ 算法/ 中/ 选择/ 能耗/ 最低/ 的/ 算法/ ./ 由于/ 排序/ 算法/ 复杂/ 多样/ ,/ 很多/ 算法/ 选择/ 研究/ 都/ 以/ 排序/ 算法/ 为例/ 展开/ [/ 47/ -/ 50/ ]/ ./ 文献/ [/ 47/ ]/ 认为/ 不同/ 的/ 排序/ 算法/ 有/ 不同/ 的/ 能耗/ ,/ 而且/ 算法/ 时间/ 复杂度/ 和/ 能耗/ 之间/ 没有/ 直接/ 的/ 联系/ ,/ 因此/ 对于/ 不同/ 的/ 排序/ 算法/ ,/ 如/ 冒泡排序/ 、/ 堆排序/ 、/ 插入排序/ 、/ 合并/ 排序/ 、/ 快/ 排序/ 、/ 选择/ 排序/ 、/ 鸡尾酒/ 排序/ 和/ 希尔/ 排序/ ,/ 该/ 研究/ 建立/ 一个/ 测试/ 平台/ 来/ 度量/ 它们/ 的/ 能耗/ ./ 实验/ 主要/ 考虑/ 算法/ 能耗/ 和/ 算法/ 规模/ 之间/ 的/ 关系/ ,/ 最后/ 得出结论/ :/ 一般/ 意义/ 上/ ,/ 算法/ 运行/ 速度/ 越慢/ 耗能/ 越高/ ,/ 但/ 排序/ 算法/ 需要/ 综合/ 考虑/ 能耗/ 和/ 处理速度/ 之间/ 的/ 关系/ ,/ 算法/ 性能/ 不是/ 影响/ 能耗/ 的/ 决定性/ 因素/ ./ 例如/ ,/ 尽管/ 快/ 排序/ 是/ 最快/ 的/ 排序/ 方式/ 但/ 不是/ 最/ 节能/ 的/ ,/ 插入排序/ 相较/ 于/ 其他/ 排序/ 算法/ 能耗/ 更/ 低/ ,/ 动态/ 的/ 选择/ 排序/ 算法/ 能够/ 显著/ 的/ 优化/ 系统/ 能耗/ ./ 文献/ [/ 49/ ]/ 进一步/ 讨论/ 了/ 排序/ 算法/ 的/ 选择/ 标准/ ./ 分别/ 使用/ 快/ 排序/ 、/ 插入排序/ 、/ 优化/ 算法/ (/ 动态/ 选择/ 合适/ 的/ 排序/ 算法/ )/ 3/ 种/ 不同/ 算法/ 来/ 完成/ 排序/ ,/ Page12/ 并/ 测量/ 能耗/ :/ 快/ 排序/ 算法/ 对/ 运行/ 速度/ 进行/ 优化/ ;/ 插入排序/ 对/ 能耗/ 进行/ 优化/ ;/ 优化/ 算法/ 平衡/ 速度/ 和/ 能耗/ ,/ 优化/ 效果/ 符合/ 预期/ ./ 文章/ 提出/ 数据类型/ 对于/ 排序/ 能耗/ 也/ 有/ 影响/ ./ 浮点数/ 排序/ 会/ 比/ 整数/ 排序/ 消耗/ 更/ 多/ 的/ 能量/ ,/ 因此/ 编写/ 低能耗/ 代码/ 很/ 重要/ 的/ 一点/ 是/ 选择/ 合适/ 的/ 数据类型/ ./ 上述/ 文献/ 提出/ 了/ 代码/ 能耗/ 和/ 代码/ 特征/ 之间/ 的/ 关系/ ,/ 这些/ 关系/ 与/ 4.2/ 节/ 描述/ 的/ 代码变换/ 技术/ 相吻合/ ./ 此外/ ,/ 相关/ 研究/ 还有/ 评估/ 使用/ 高性能/ 存储器/ 设备/ (/ SSD/ )/ 对/ 算法/ 能耗/ 的/ 影响/ [/ 49/ ]/ 以及/ MapReduce/ 环境/ 下/ 海量/ 数据/ 排序/ 算法/ 的/ 选择/ 和/ 优化/ [/ 50/ ]/ ,/ 此处/ 不再/ 累述/ ./ 此外/ ,/ 还/ 可以/ 改写/ 高能耗/ 的/ 算法/ ,/ 根据/ 硬件/ 环境/ 图/ 7/ 框架结构/ 和/ 工作/ 机理/ 本/ 小节/ 重点/ 描述/ 的/ 算法/ 选择/ 技术/ 的/ 基本思路/ 是/ 确定/ 实现/ 同一/ 功能/ 的/ 若干/ 算法/ 的/ 能耗/ 特征/ 以及/ 能耗/ 和/ 上下文/ 之间/ 的/ 关系/ ,/ 随后/ 静态/ 或/ 动态/ 的/ 选择/ 能耗/ 最低/ 的/ 算法/ ./ 除此之外/ ,/ 面向/ 算法/ 的/ 能耗/ 优化/ 还/ 包括/ 对/ 算法/ 自身/ 的/ 优化/ ./ 例如/ 文献/ [/ 46/ ]/ ,/ 该文/ 同时/ 采用/ 了/ 语句/ 级/ 和/ 模块/ 级/ 的/ 能耗/ 优化/ 方法/ ,/ 而/ “/ 低能耗/ 算法/ 选择/ ”/ 和/ “/ 改写/ 现有/ 算法/ ”/ 是/ 后者/ 采用/ 的/ 主要/ 方法/ ./ 但/ 由于/ 算法/ 是/ 一个/ 抽象/ 的/ 概念/ ,/ 难以/ 定义/ 其/ 能耗/ ,/ 因此/ 现有/ 的/ 算法/ 优化/ 实际上/ 是/ 其/ 实现/ 代码/ 的/ 优化/ ./ 现有/ 研究/ 尚/ 缺少/ 对/ 算法/ 设计/ 方法/ 和/ 设计/ 准则/ 的/ 优化/ ./ 我们/ 认为/ ,/ 从/ 算法/ 设计/ 角度/ 而/ 非/ 实现/ 代码/ 考虑/ 能耗/ 优化/ 是/ 未来/ 的/ 一个/ 研究/ 方向/ ,/ 我们/ 在/ 4.4/ 节/ 以及/ 第/ 6/ 节/ 中将/ 对此/ 加以/ 论述/ ./ (/ 2/ )/ 组件/ 应用软件/ 会/ 依赖/ 很多/ 基础/ 组件/ ,/ 如/ 数据库/ 连接/ 组件/ 、/ 开发/ 框架/ 组件/ 、/ 网络通讯/ 组件/ 等/ ,/ 它们/ 也/ 会/ 对/ 软件/ 能耗/ 产生/ 影响/ ./ 首先/ ,/ 操作系统/ 对/ 软件/ 能耗/ 影响/ 显著/ ./ 文献/ [/ 52/ ]/ 以/ 实验/ 的/ 方式/ 证明/ 了/ 操作系统/ ,/ 特别/ 是/ Linux/ 操作系统/ ,/ 对/ 能耗/ 优化/ 起/ 重要/ 作用/ ./ 其次/ ,/ 优化/ 软件/ 依赖/ 的/ 外部/ 链接库/ 或/ 框架/ 组件/ 也/ 可以/ 优化/ 其/ 能耗/ ./ 文献/ [/ 53/ ]/ 对/ 63/ 个/ 开源/ 应用软件/ 进行/ 了/ 测/ 和/ 上下文/ 特征/ ,/ 插入/ 实现/ 能耗/ 优化/ 功能/ 的/ 代码/ ./ 文献/ [/ 51/ ]/ 提出/ 的/ 优化/ 框架/ 可/ 自动检测/ 功耗/ 关键性/ 代码/ 区域/ (/ Power/ -/ CriticalCodeRegion/ )/ ,/ 并/ 减少/ 代码执行/ 时/ 的/ 峰值/ 功耗/ ./ 借助/ 功耗/ 评估/ 技术/ ,/ 框架/ 首先/ 确定/ 高功耗/ 的/ 代码/ 区域/ ,/ 随后/ 选择/ 相应/ 的/ 节能/ 策略/ 来/ 影响/ 这些/ 区域/ ,/ 如/ 采用/ CPU/ 频率/ 调整/ (/ FrequencyScaling/ )/ 技术/ 可以/ 降低/ CPU/ 功耗/ ,/ 或/ 增加/ 非/ 功能/ 代码/ 来/ 降低功耗/ 峰值/ ./ 图/ 7/ 给出/ 了/ 该/ 框架/ 的/ 工作/ 机理/ ./ 框架/ 的/ 基础/ 组件/ 为/ “/ 标准/ 软件开发/ 流程/ (/ A/ )/ ”/ 和/ “/ 运行/ 时/ 功耗/ 分析方法/ (/ B/ )/ ”/ ,/ 基于/ 这/ 两个/ 组件/ ,/ 框架/ 可以/ 跟踪/ 代码/ ,/ 分析/ 并/ 检测/ 出/ 功耗/ 关键性/ 代码/ 区域/ (/ C/ )/ ./ 随后/ ,/ 框架/ 对/ 这/ 一/ 代码/ 区域/ 进行/ 优化/ ,/ 降低/ 其/ 功耗/ 峰值/ (/ D/ )/ ./ 试/ ,/ 探求/ 软件/ 运行/ 环境/ 是否/ 影响/ 以及/ 如何/ 影响/ 软件/ 能耗/ ./ 结果表明/ ,/ 基础/ 组件/ 和/ 外部/ 链接库/ 的/ 使用/ 将/ 额外/ 增加/ 能耗/ ,/ 且/ 不同/ 类型/ 、/ 完成/ 不同/ 业务流程/ 的/ 应用软件/ 能耗/ 级别/ 有/ 显著/ 差异/ ./ 由于/ 采用/ 组件/ 会/ 缩短/ 编码/ 时间/ ,/ 上述/ 规律/ 暗示/ 在/ 软件开发/ 效率/ 和/ 软件/ 能耗/ 上存/ 一个/ 平衡/ ./ 文献/ [/ 54/ ]/ 分析/ 了/ 分布式/ 编程/ 抽象/ (/ DistributedProgrammingAbstractions/ ,/ DPA/ )/ ,/ 如/ Socket/ 、/ RMI/ 等/ 对/ 软件/ 能耗/ 的/ 影响/ ,/ 然后/ 提出/ 了/ 一系列/ 可/ 实践/ 的/ 原则/ 以/ 指导/ 程序员/ 编程/ ./ DPA/ 可以/ 理解/ 为/ 实现/ 分布式/ 功能/ 的/ 组件/ 或/ 中间件/ ./ 一个/ 分布式/ 软件/ 执行/ 时会/ 经历/ 几个/ 阶段/ :/ 初始化/ 、/ 执行/ 阶段/ 、/ 空转/ 阶段/ 、/ 终止/ 状态/ ,/ 在/ 每个/ 状态/ 都/ 会/ 产生/ 能耗/ ./ 该文/ 认为/ ,/ 分布式系统/ 的/ 整体/ 能耗/ 由/ 应用软件/ 以及/ DPA/ 两个/ 部分/ 构成/ ,/ 在/ 实现/ 相同/ 功能/ 的/ 前提/ 下/ ,/ 从/ 大量/ DPA/ 中/ 选择/ 一个/ 合适/ 的/ DPA/ 会/ 优化/ 软件/ 的/ 整体/ 能耗/ ./ 例如/ 同步/ 通信/ ,/ CPU/ 能耗/ 取决于/ 传输数据/ 的/ 大小/ 和/ 网络/ 延迟/ ,/ 采用/ XML/ -/ RPC/ 和/ DOSGi/ 实现/ 通讯/ ,/ 由于/ 需要/ 传输/ XML/ 文档/ ,/ 因此/ 能耗/ 会略/ 高/ ./ 又/ 例如/ 异步/ 通讯/ ,/ 无论是/ 采用/ R/ -/ OSGi/ ,/ MOM/ (/ MessageOrientedMiddleware/ )/ ,/ 还是/ Sockets/ ,/ 都/ 不会/ 影响/ CPU/ 能耗/ ./ Page13/ 这是/ 由于/ CPU/ 在/ 空载/ 状态/ 下/ 仍然/ 会/ 消耗/ 能量/ ,/ 而/ 异步/ 通讯/ 能/ 降低/ CPU/ 空闲/ 时间/ ./ 此/ 结果/ 也/ 暗示/ 网络/ 传输数据/ 量/ 的/ 大小/ 也/ 会/ 明显/ 影响/ 整体/ 能耗/ ./ 在/ 例如/ 复杂/ 数据/ Marshalling/ // Unmarshalling/ 功能/ ,/ 基于/ XML/ 的/ DPA/ 与/ 基于/ 本地/ Java/ 序列化/ (/ 例如/ RMI/ ,/ Sockets/ ,/ andMOM/ )/ 或/ 其他/ 优化/ 的/ 序列化/ 机制/ (/ 例如/ RBI/ 和/ R/ -/ OSGi/ )/ 的/ DPA/ 相/ 比较/ ,/ 前者/ 更加/ 耗能/ ./ 总之/ ,/ 该文/ 通过/ 系统地/ 测量/ 和/ 分析/ 主要/ DPA/ 的/ 能耗/ 特征/ ,/ 以/ 指导/ 软件/ 设计者/ 和/ 分布式系统/ 研究/ 人员/ ;/ 然而/ 文中/ 的/ 能耗/ 测量/ 只/ 包含/ 分布式/ 交互/ 中/ 客户端/ 的/ 能耗/ ,/ 不/ 包括/ 服务器端/ 的/ 能耗/ ./ 文献/ [/ 55/ ]/ 介绍/ 了/ 一种/ 代码生成/ 器/ ,/ 用于/ 优化/ 移动/ 设备/ 端/ 代码/ ,/ 减轻/ 移动/ 终端/ 的/ 计算/ 量/ ,/ 降低/ 能耗/ ./ 代码生成/ 器/ 的/ 结构/ 如图/ 8/ 所示/ ./ 首先/ ,/ 移动/ 设备/ 端/ 代码/ 经过/ 代码/ 分析/ ,/ 定位/ 代码/ 中/ 运算量/ 大/ 的/ 组件/ ,/ 随后/ 将/ 该/ 组件/ 卸载/ ,/ 并/ 生成/ 对应/ 的/ WebService/ ,/ 将/ WebService/ 自动/ 部署/ 在/ 服务器端/ ,/ 代码/ 通过/ 调用/ 该/ WebService/ 来/ 实现/ 原有/ 组件/ 的/ 功能/ ./ 总之/ ,/ 将/ 复杂/ 的/ 本地/ 组件/ 替换/ 为/ 服务器端/ 组件/ 远程/ 执行/ ,/ 大大降低/ 移动/ 端/ 代码/ 能耗/ ./ 实验/ 采用/ 斐波/ 那契/ 数列/ 作为/ 测试用例/ ./ 该/ 用例/ 在/ 移动/ 设备/ 本地/ 、/ Wifi/ 连接/ 远程/ Web/ 服务/ 、/ 3G/ 连接/ 远程/ Web/ 服务/ 3/ 种/ 情况/ 下/ 运行/ ./ 测试/ 结果表明/ 组件/ 远程/ 服务化/ 的/ 方法/ 能/ 有效/ 减少/ 终端/ 能耗/ ,/ 当/ 远程/ 组件/ 执行/ 时间/ 越长/ ,/ 优势/ 越为/ 明显/ ,/ 该/ 方法/ 不仅/ 缩减/ 了/ 能耗/ ,/ 而且/ 由于/ 服务器/ 性能/ 优于/ 移动/ 设备/ 性能/ ,/ 这些/ 组件/ 的/ 本地/ 时间/ 很/ 可能/ 会/ 更长/ ,/ 此时/ 代码/ 性能/ 同时/ 得到/ 优化/ ./ 通过/ “/ 组件/ 卸载/ 为/ Web/ 服务/ ”/ 的/ 方式/ 可以/ 减少/ 的/ 移动/ 设备/ 能耗/ 为/ 30/ %/ ~/ 32/ %/ ./ 文献/ [/ 56/ ]/ 基于/ 抽象/ 的/ 组件/ 模型/ ,/ 对/ 代码/ 进行/ 性能/ 和/ 能耗/ 两个/ 方面/ 的/ 优化/ ./ 由/ 抽象/ 组件/ 模型/ 生成/ 代码/ 需要/ 3/ 个/ 步骤/ :/ 建立/ 组件/ 模型/ 、/ 从/ 模型/ 中/ 生成/ 代码/ 、/ 对/ 代码/ 进行/ 编译/ ./ 该文/ 在/ 每个/ 步骤/ 中/ 加入/ 了/ 能耗/ 优化/ 策略/ ,/ 因此/ 能够/ 对/ 生成/ 的/ 代码/ 能耗/ 加以/ 优化/ ./ 该文/ 没有/ 给出/ 详细/ 的/ 优化/ 方法/ ,/ 仅以/ 状态图/ 为例/ 举例说明/ :/ 首先/ 建立/ 状态图/ ,/ 然后/ 由/ 状态图/ 生成/ C++/ 源代码/ ,/ 最后/ 对/ 生成/ 的/ 源代码/ 进行/ 优化/ 编译/ ,/ 期间/ 的/ 优化/ 方法/ 包括/ 如图/ 9/ 所示/ 的/ “/ 移除/ 不可/ 达/ 状态/ ”/ 、/ “/ 移除/ 无效/ 的/ 事务/ (/ 与/ 已/ 完成/ 状态/ 相关/ 的/ 事务/ )/ ”/ ./ (/ 3/ )/ 结构/ 模块/ 结构/ 可以/ 反映/ 代码/ 的/ 物理/ 结构/ ,/ 表征/ 模块/ (/ 如/ 源代码/ 文件/ 或/ 动态链接库/ )/ 之间/ 的/ 编译器/ 和/ 运行/ 时/ 依赖/ 关系/ ,/ 如/ 组件/ 间/ 的/ 连接/ 方法/ ;/ 或/ 模块/ 间/ 的/ 抽象/ 结构/ ,/ 如/ 细粒度/ 的/ 设计模式/ 和/ 粗粒度/ 的/ 软件体系结构/ ./ 这些/ 结构/ 都/ 直接/ 影响/ 代码/ 能耗/ ,/ 因此/ 存在/ 优化/ 的/ 空间/ ./ 首先/ ,/ 我们/ 研究/ 面向/ 组件/ 间/ 结构/ 的/ 能耗/ 优化/ ./ 基于/ Fractal/ 组件/ 模型/ ,/ 文献/ [/ 57/ ]/ 从/ 性能/ 和/ 能耗/ 两个/ 方面/ 提出/ 了/ 一系列/ 优化/ 方法/ ,/ 简要/ 介绍/ 如下/ :/ (/ 1/ )/ 单一/ 实例/ (/ SingleInstance/ )/ ./ 约束/ 组件/ 只有/ 一个/ 实例/ ,/ 以/ 优化/ 内存/ 访问/ ;/ (/ 2/ )/ 单一/ 接口/ (/ SingleInterface/ )/ ./ 如果/ 一个/ 组件/ 接口/ 是/ 唯一/ 的/ ,/ 应该/ 明显/ 地/ 标识/ 出来/ ,/ 这样/ ,/ 在/ 调用/ 该/ 接口/ 的/ 时候/ 就/ 无需/ 参照/ 上下文/ 信息/ ;/ (/ 3/ )/ 常量/ 属性/ (/ ConstantAttribute/ )/ ./ 若/ 属性/ 为/ 只读/ ,/ 该/ 属性/ 会/ 被/ 编译/ 为/ 字面/ 量/ ;/ (/ 4/ )/ 静态/ 绑定/ (/ StaticBinding/ )/ ./ 两个/ 组件/ 之间/ 动态/ 的/ 绑定/ 改为/ 静态/ 的/ 绑定/ ,/ 组件/ 之间/ 的/ 接口/ 会/ 被/ 简化/ ,/ 所有/ 的/ 间接/ 调用/ 会/ 改为/ 直接/ 调用/ ,/ 减少/ 了/ 非/ 功能/ 操作/ ,/ 优化/ 能耗/ ;/ (/ 5/ )/ 内联/ 绑定/ (/ InlineBindings/ )/ ./ 组件/ 级/ 的/ 内联/ 操作/ ,/ 参见/ 文献/ [/ 41/ ]/ ./ 其次/ ,/ 我们/ 考虑/ 细粒度/ 的/ 模块/ 结构/ ./ 设计模式/ 为/ 构造/ 软件系统/ 的/ 结构/ 、/ 行为/ 和/ 关键/ 属性/ 提供/ 了/ 设计/ 模型/ 和/ 指导/ ,/ 是/ 提高/ 软件/ 质量/ 的/ 常用/ 手段/ ,/ 通常/ 程序设计/ 人员/ 会/ 编写/ 或/ 修改/ 面向对象/ 的/ 代码/ 使/ 其/ 符合/ 某个/ 设计模式/ ./ 文献/ [/ 58/ ]/ 研究/ 了/ 不同/ 设计模式/ 的/ 运用/ 对/ 代码/ 能耗/ 的/ 影响/ ,/ 得出/ 总体/ 规律/ :/ 软件系统/ 的/ 能耗/ 主要/ 分为/ 处理器/ 能耗/ 和/ 内存/ 能耗/ 两个/ 部分/ ,/ 而/ 内存/ Page14/ 能耗/ 又/ 分为/ 指令/ 内存/ 的/ 能耗/ 和/ 数据/ 内存/ 的/ 能耗/ ,/ 前者/ 与/ 代码/ 规模/ 正/ 相关/ ,/ 后者/ 则/ 与/ 处理/ 的/ 数据量/ 正/ 相关/ ;/ 小/ 部分/ 设计模式/ 的/ 运用/ 对/ 代码/ 能耗/ 没有/ 影响/ ,/ 但/ 大部分/ 设计模式/ 则/ 会/ 增加/ 代码/ 能耗/ ./ 具体来说/ ,/ 工厂/ 方法/ (/ FactoryMethod/ )/ 模式/ 应用/ 前后/ 代码/ 规模/ 小/ 范围/ 增加/ ,/ 但/ 执行/ 的/ 指令/ 数/ 不会/ 有/ 明显/ 变化/ ,/ 指令/ 内存/ 的/ 能耗/ 和/ 数据/ 内存/ 的/ 能耗/ 也/ 没有/ 明显增加/ ,/ 因此/ 整体/ 能耗/ 也/ 没有/ 明显增加/ (/ 增加/ 0.23/ %/ )/ ,/ 这个/ 结论/ 也/ 适用/ 于/ 适配器/ (/ Adapter/ )/ 模式/ (/ 增加/ 0.18/ %/ )/ ,/ 而/ 观察者/ (/ Observer/ )/ 模式/ 应用/ 前后/ ,/ 代码/ 规模/ 明显增加/ ,/ 且/ 增加/ 了/ 很多/ 中间/ 变量/ 的/ 读写/ ,/ 能耗/ 变化/ 明显/ (/ 增加/ 44.1/ %/ )/ ./ 上述/ 实验/ 结果/ 是/ 文献/ [/ 58/ ]/ 采用/ C++/ 语言/ 在/ 嵌入式/ 设备/ 中/ 测量/ 得到/ 的/ ./ 但/ 在/ 文献/ [/ 59/ ]/ 中/ 采用/ Java/ 语言/ 在/ 移动/ 设备/ 中/ 测量/ 出/ 不同/ 的/ 结果/ ,/ 如表/ 3/ 所示/ ./ 运用/ 观察者/ (/ Observer/ )/ 模式/ 能耗/ 变化/ 不/ 大/ (/ 增加/ 0.9/ %/ )/ ,/ 而/ 装饰/ 器/ (/ Decorator/ )/ 模式/ 虽然/ 并/ 没有/ 引入/ 大量/ 代码/ ,/ 但/ 能耗/ 明显提高/ (/ 增加/ 132.40/ %/ )/ ./ 这/ 是因为/ 后者/ 实例/ 化/ 大量/ 对象/ ,/ 导致/ Java/ 虚拟机/ 频发/ 触发/ 垃圾/ 回收/ 机制/ ,/ 这/ 将/ 消耗/ 大量/ 能量/ ./ 由此/ 得出结论/ ,/ 尽管/ 设计模式/ 对于/ 提高/ 面向对象/ 软件/ 的/ 可/ 复用/ 性/ 和/ 可扩展性/ 有着/ 明显/ 的/ 效果/ ,/ 但/ 从/ 能耗/ 角度/ ,/ 有些/ 设计模式/ 需要/ 更为/ 平衡/ 地/ 考虑/ 其/ 能耗/ 代价/ ,/ 且/ 能耗/ 的/ 变化/ 和/ 编程语言/ 以及/ 运行/ 环境/ 均/ 有关/ ./ 模式/ FacadeAbstractFactoryObserverDecoratorPrototypeTemplateMethod/ 较之于/ 设计模式/ ,/ 软件体系结构/ 更/ 粗粒度/ 地/ 描述/ 软件/ 模块/ 间/ 依赖/ 关系/ ./ 从/ 软件体系结构/ 角度/ 同样/ 可以/ 优化/ 软件/ 能耗/ ./ 文献/ [/ 60/ ]/ 测量/ 了/ 不同/ 系统结构/ 的/ MIS/ (/ ManagementInformationSystems/ )/ 能耗/ ,/ 包括/ 两个/ ERP/ 系统/ 、/ 两个/ CRM/ 系统/ 和/ 4/ 个/ DBMS/ 系统/ ,/ 证实/ 了/ :/ 不仅仅/ 是/ 基础设施/ (/ 硬件/ )/ 对/ 能耗/ 有/ 影响/ ,/ 软件体系结构/ (/ 如/ N/ 层/ 结构/ )/ 和/ 中间件/ (/ 如/ Web/ 容器/ 和/ 数据库/ 管理系统/ )/ 对/ MIS/ 的/ 能耗/ 也/ 有/ 巨大/ 的/ 影响/ ,/ 满足/ 相同/ 功能/ 需求/ 的/ 不同/ MIS/ 具有/ 截然不同/ 的/ 能耗/ ./ 文献/ [/ 61/ ]/ 提出/ 了/ 一个/ 基于/ 3/ 层/ (/ 视图/ 层/ 、/ 业务/ 层/ 、/ 数据/ 层/ )/ 体系结构/ 的/ 能源消耗/ 模型/ ,/ 从/ 一个/ 新/ 角度/ 来/ 理解/ 能源消耗/ ,/ 该/ 模型/ 让/ 软件设计/ 人员/ 理解/ 如何/ 实现/ 低能耗/ 的/ 软件/ ./ 文献/ [/ 62/ ]/ 从/ 体系结构/ 的/ 角度/ 研究/ 海量/ 数据/ 的/ 高性能/ 、/ 低功耗/ 管理/ 方法/ ,/ 给出/ 一个/ 3/ 层/ 数据库系统/ 的/ 原型/ 设计/ 与/ 实现/ ./ 文献/ [/ 63/ ]/ 研究/ 数据仓库/ 的/ 体系结构/ 和/ 性能/ 以及/ 能耗/ 之间/ 的/ 联系/ 以及/ 现有/ 能耗/ 优化/ 技术/ 在/ 各个/ 部分/ 上/ 的/ 应用/ ./ 4.4/ 进一步/ 研究/ 代码变换/ 能够/ 降低/ 软件/ 能耗/ ,/ 是/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 的/ 重要途径/ ,/ 但是/ 很多/ 变换/ 方法/ 都/ 存在/ 缺陷/ ;/ 与此同时/ ,/ 代码变换/ 也/ 是/ 有/ 代价/ 的/ ,/ 不能/ 简单/ 地/ 认为/ 代码变换/ 一定/ 会/ 降低/ 能耗/ ./ 其次/ ,/ 相对/ 于/ 代码变换/ ,/ 还有/ 一些/ 其他/ 的/ 优化/ 方法/ ,/ 如/ 资源/ 替换/ 和/ 算法/ 选择/ ./ 除此之外/ ,/ 基于/ 模块/ 结构/ 的/ 能耗/ 优化/ 可以/ 指导/ 编写/ 代码/ ./ 但/ 我们/ 认为/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 现有/ 研究/ 还/ 存在/ 两处/ 空白/ ,/ 是/ 进一步/ 研究/ 的/ 方向/ ./ 第一个/ 方面/ ,/ 现有/ 面向/ 代码/ 的/ 能耗/ 优化/ 技术/ 过于/ 具体/ ,/ 或/ 针对/ 具体/ 的/ 代码/ ,/ 或/ 针对/ 具体/ 的/ 功能/ ,/ 缺乏/ 抽象/ 级别/ 的/ 优化/ 技术/ ,/ 缺乏/ 算法/ 级/ 能耗/ 优化/ 方法/ ./ 所谓/ 算法/ 级/ ,/ 是/ 指/ 通过/ 类似/ 于/ “/ 递归/ 算法/ 变为/ 循环/ 算法/ ”/ 、/ “/ 贪心/ 算法/ 改为/ 动态/ 规划/ 算法/ 求解/ ”/ 、/ “/ Cooper/ 变换/ ”/ 之类/ 的/ 算法/ 变换/ ,/ 来/ 优化/ 一类/ 算法/ 的/ 能耗/ ./ 前文/ 介绍/ 了/ “/ 程序变换/ ”/ 的/ 定义/ ,/ 我们/ 借用/ 此/ 定义/ ,/ 提出/ 以/ 能耗/ 优化/ 为/ 目标/ 的/ 算法/ 变换/ 研究/ ,/ 在/ 不/ 改变/ 算法/ 的/ 可察/ 行为/ 的/ 前提/ 下/ 通过/ 调整/ 算法/ 类型/ 、/ 设计/ 方法/ 、/ 内部结构/ 等/ ,/ 降低/ 算法/ 实现/ 代码/ 的/ 能耗/ 而/ 不/ 去/ 考虑/ 平台/ 和/ 编程语言/ 等/ 实现/ 技术/ ./ 数学/ 上/ ,/ 变换/ (/ 映射/ )/ 是/ 集合/ X/ 到/ 另/ 一个/ 集合/ Y/ 的/ 函数/ f/ ,/ f/ :/ X/ →/ Y/ ,/ 因此/ 算法/ 变换/ 可以/ 视为/ 原/ 算法/ A/ 上/ 的/ 函数/ Te/ ,/ 有/ Te/ :/ A/ →/ A/ ,/ 且/ A/ 和/ A/ 行为/ 等价/ A/ / A/ (/ 功能/ 不变/ )/ ,/ 但/ 算法/ 实现/ 代码/ 的/ 执行/ 能耗/ EA/ / EA/ ./ 我们/ 认为/ 可以/ 从/ 以下/ 两个/ 方面/ 研究/ Te/ ./ 首先/ ,/ 可以/ 研究/ 算法/ 的/ 分类/ ,/ 将/ 算法/ 按/ 设计/ 思路/ 、/ 结构特征/ 、/ 所/ 需/ 资源/ 等/ 与/ 能耗/ 相关/ 的/ 因素/ 划分/ 为/ 若干类/ ./ 算法/ 类/ 大小/ 应该/ 适中/ ,/ 不能/ 相互/ 重叠/ ./ 算法/ 的/ 分类/ 是/ 为了/ 设计/ 变换/ Te/ ,/ 毕竟/ 我们/ 无法/ 针对/ 所有/ 算法/ 设计/ 有效/ 的/ 变换/ ,/ 可行/ 的/ 做法/ 是/ 将/ 各种/ 算法/ 分类/ ,/ 对/ 每/ 一类/ 进行/ 抽象/ 描述/ ./ 由于/ 变换/ 前后/ 算法/ 是/ 语义/ 等价/ 的/ ,/ 因此/ 还/ 应该/ 设计/ 算法/ 语义/ 等价/ 的/ 验证/ 方法/ ./ 我们/ 无法/ 定义/ 算法/ 这一/ 抽象概念/ 的/ 能耗/ ,/ 需要/ 将/ Page15/ 算法/ 用/ 特定/ 语言/ 在/ 特定/ 平台/ 上/ 实现/ ,/ 度量/ 实现/ 代码/ 的/ 能耗/ ./ 而/ 实现/ 方法/ 不同/ 必然/ 会/ 影响/ 能耗/ ,/ 因此/ 算法/ 变换/ 必须/ 较/ 粗粒度/ 地/ 优化/ 能耗/ ,/ 一些/ 实现/ 代码/ 造成/ 的/ 微小/ 能耗/ 差异/ 应/ 被/ 忽略/ ./ 其次/ ,/ 应该/ 研究/ 变换/ Te/ ./ 由于/ 算法/ 复杂/ 且/ 难以/ 穷举/ 差异/ ,/ Te/ 或许/ 只能/ 手工/ 地且/ 在/ 算法/ 分析/ 之后/ 被/ 定义/ ,/ 但/ 应该/ 研究/ 指导性/ 法则/ 和/ 变换/ 规则/ 集/ ./ 这/ 一点/ 可以/ 类比/ 传统/ 的/ 程序变换/ ,/ 我们/ 无法/ 定义/ 将/ 递归/ 算法/ 变换/ 为/ 尾/ 递归/ 算法/ 的/ 通用/ 程序变换/ ,/ 但/ 可以/ 定义/ Cooper/ 变换/ 规则/ 来/ 指导/ 此类/ 变换/ 的/ 设计/ ./ 还/ 可以/ 进一步/ 总结/ 面向/ 算法/ 的/ 能耗/ 优化/ 方法/ ,/ 考虑/ 给定/ 一个/ 定义/ 清晰/ 的/ 算法/ (/ 如/ 可以/ 用/ 清晰/ 的/ 伪码/ 表示/ )/ ,/ 那么/ 可以/ 通过/ 算法/ 变换/ 优化/ 其/ 能耗/ 的/ 条件/ 是/ 什么/ ,/ 优化/ 效果/ 是否/ 可/ 评估/ ,/ 优化/ 代价/ 是/ 什么/ ;/ 可否/ 总结/ 面向/ 算法/ 的/ 能耗/ 优化/ 方法/ ,/ 得到/ 一种/ 低能耗/ 算法/ 设计/ 方法/ 或/ 规律/ ,/ 指导/ 算法/ 设计/ ./ 第二个/ 方面/ ,/ 现有/ 面向/ 代码/ 的/ 能耗/ 优化/ 技术/ 没有/ 充分考虑/ 编程语言/ 特征/ ,/ 尤其/ 是/ 主流/ 的/ 面向对象/ 语言/ 特征/ ,/ 如/ 内存/ 管理/ 、/ 垃圾/ 回收/ 、/ 对象/ 创建/ 等/ ./ 对于/ 面向对象/ 的/ 编程语言/ ,/ 语句/ 种类/ 繁多/ ,/ 语法/ 和/ 关键字/ 庞杂/ ,/ 完成/ 的/ 功能/ 各异/ ,/ 若/ 研究/ 它们/ 的/ 能耗/ ,/ 则/ 需要/ 首先/ 对/ 面向对象编程/ 语言/ 进行/ 很/ 好/ 的/ 抽象/ ./ 本文/ 提出/ 一种/ 研究/ 思路/ ,/ 首先/ 将/ 语句/ 分为/ 运算/ 语句/ 、/ 逻辑/ 语句/ 、/ 存储/ 语句/ 和/ 调用/ 语句/ ./ 调用/ 语句/ 表征/ 了/ 面向对象/ 中/ “/ 类/ 与/ 类/ 的/ 关系/ ”/ ,/ 因为/ 类/ 之间/ 的/ 依赖/ 、/ 继承/ 、/ 聚合/ 等/ 关系/ 在/ 软件/ 执行/ 过程/ 中/ 表征/ 为/ 语句/ 的/ 调用/ 、/ 虚/ 调用/ 、/ 构造/ 函数调用/ 等/ 调用/ 语句/ ./ 有/ 了/ 语句/ 的/ 分类/ 和/ 抽象/ ,/ 就/ 可以/ 参照/ 4.2/ 节中/ 介绍/ 的/ 代码变换/ 方法/ ,/ 对/ 面向对象编程/ 语言/ 编写/ 的/ 表/ 4/ 面向/ 代码/ 的/ 能耗/ 评估/ 和/ 优化/ 工具/ 名称/ GreenTracker/ [/ 64/ ]/ JouleMeter/ ①/ 评估/ 硬件/ 黑盒/ JouleTrack/ [/ 65/ ]/ 评估/ 硬件/ 白盒/ EECoMark/ ②/ 评估/ 硬件/ 黑盒/ 性能/ ,/ 但/ 优先/ 考虑/ 系统/ 功耗/ ./ SEProf/ [/ 66/ ]/ WattsOn/ [/ 67/ ]/ 评估/ 代码/ 白盒/ 模块/ 动态/ ①/ ②/ http/ :/ // // research/ ./ microsoft/ ./ com/ // en/ -/ us/ // projects/ // joulemeter/ // default/ ./ aspx/ ,/ 2015https/ :/ // // bapco/ ./ com/ // products/ // eecomark/ -/ v2/ // ,/ 2015/ 代码/ 进一步/ 分析/ ,/ 找出/ 优化/ 规律/ 和/ 方法/ ./ 这里/ 需要/ 考虑/ 的/ 是/ ,/ 面向对象编程/ 语言/ 的/ 语句/ 语义/ 丰富/ ,/ 在/ 研究/ 时/ 需要/ 充分考虑/ 编译/ 和/ 运行/ 环境/ 完成/ 的/ 功能/ ./ 可以/ 对/ 显式/ 方法/ 和/ 隐式/ 方法/ 分别/ 研究/ ./ 隐式/ 方法/ 是/ 指/ 那些/ 实际/ 发生/ 但/ 没有/ 代码/ 定义/ 或/ 采用/ 特殊/ 格式/ 定义/ 的/ 方法/ ,/ 如/ 对象/ 创建/ 和/ 销毁/ 会/ 隐式/ 调用/ 所有/ 父类/ 的/ 构造函数/ 和析构/ 函数/ ,/ 调用/ 虚/ 方法/ 时会/ 隐式/ 调用/ 虚/ 方法/ 的/ 查找/ 方法/ ./ 隐式/ 方法/ 更/ 多/ 代表/ 面向对象/ 语言/ 的/ 特性/ ,/ 充分/ 研究/ 隐式/ 方法/ 的/ 能耗/ 评估/ 和/ 优化/ ,/ 将/ 是/ 面向/ 代码/ 的/ 能耗/ 研究/ 的/ 进一步/ 研究/ 内容/ ./ 5/ 优化/ 工具/ 本文/ 第/ 3/ 节至/ 第/ 4/ 节/ 综述/ 了/ 面向/ 代码/ 的/ 能耗/ 估算/ 和/ 优化/ 方法/ ,/ 列举/ 了/ 很多/ 现有/ 的/ 研究成果/ ./ 本节/ 将/ 描述/ 一些/ 软件/ 能耗/ 估算/ 和/ 优化/ 的/ 工具/ ,/ 这些/ 工具/ 可以/ 辅助/ 开发人员/ 编写/ 代码/ ,/ 并/ 能够/ 极为/ 快速/ 准确/ 地/ 定位/ 需要/ 优化/ 的/ 代码/ ,/ 大大减少/ 优化/ 代码/ 所/ 需/ 工作量/ ,/ 也/ 能够/ 避免/ 因为/ 能耗/ 过高/ 而/ 重新/ 设计/ 软件/ ./ 软件/ 能耗/ 评估/ 和/ 优化/ 工具/ 可以/ 按/ 多种/ 角度/ 分类/ ./ 按/ 设计/ 目标/ 可以/ 分为/ 评估/ 工具/ 和/ 优化/ 工具/ ;/ 而/ 按照/ 评估/ 优化/ 层次/ 可以/ 分为/ 硬件/ 层/ 工具/ 和/ 代码/ 层/ 工具/ ;/ 按/ 评估/ 和/ 优化/ 方法/ 可以/ 分为/ 黑盒/ (/ 无需/ 源码/ )/ 方法/ 和/ 白盒/ (/ 需/ 源码/ )/ 方法/ ;/ 按照/ 评估/ 和/ 优化/ 粒度/ 可以/ 分为/ 指令/ 级/ 工具/ ,/ 语句/ 级/ 工具/ ,/ 模块/ 级/ 工具/ ,/ 应用软件/ 级/ 工具/ ;/ 按/ 是否/ 需要/ 运行/ 时/ 支持/ 可以/ 分为/ 静态/ (/ 无需/ 执行/ )/ 方法/ 和/ 动态/ (/ 需/ 执行/ )/ 方法/ ./ 我们/ 对/ 现有/ 的/ 工具/ 做/ 简要/ 介绍/ ,/ 其中/ 评估/ 工具/ 较/ 多/ ,/ 而/ 优化/ 工具/ 则/ 较/ 少/ ,/ 如表/ 4/ 所示/ ./ Page16/ 名称/ pTop/ [/ 68/ ]/ Safari/ [/ 69/ ]/ HMSim/ [/ 70/ ]/ SoftExplorer/ ①/ 优化/ 代码/ 白盒/ Green/ [/ 71/ ]/ Codeoptimizations/ [/ 53/ ]/ 优化/ 代码/ 白盒/ 块/ 、/ 内存/ 4/ 个/ 方面/ 实施/ 优化/ ./ PowerScope/ ②/ 优化/ 代码/ 白盒/ 语句/ 动态/ EnergyAnalyzer/ [/ 72/ ]/ 优化/ 代码/ 白盒/ 模块/ 动态/ ①/ ②/ 在/ 商用/ 领域/ ,/ Intel/ 、/ Microsoft/ 针对/ 绿色/ 计算/ 开发/ 了/ 一些/ 专用工具/ ,/ 供/ 不同/ 领域/ 的/ 开发人员/ 使用/ ,/ 这些/ 工具/ 包括/ Power/ -/ awarenessIntelPowerCheck/ ,/ IntelPowerInformer/ ,/ IntelApplicationEnergyToolkit/ ,/ WindowsDriverKit/ ,/ WindowsEventViewer/ ,/ WindowsPerformanceMonitoringFrame/ -/ work/ ,/ PowerTop/ ,/ BatteryLifeToolkit/ ./ 这些/ 软件/ 均/ 能够/ 收集/ 操作系统/ 的/ 各种/ 参数/ 并/ 加以/ 调整/ ,/ 但/ 它们/ 并/ 不能/ 针对/ 代码/ 进行/ 能耗/ 优化/ ./ 就/ 我们/ 所知/ ,/ 未见/ 成熟/ 的/ 、/ 商业/ 的/ 面向/ 代码/ 的/ 能耗/ 优化/ 工具/ ./ 与/ 编程/ 工具/ 高度/ 集成/ 的/ 、/ 完全/ 面向/ 代码/ 的/ 能耗/ 优化/ 工具/ 目前/ 还/ 较/ 少/ ./ Trepn/ 是/ App/ 软件/ 能耗/ 估算/ 工具/ ,/ 它/ 可以/ 运行/ 在/ Eclipse/ 中/ ,/ 辅助/ 开发人员/ 进行/ 低功耗/ App/ 软件开发/ ③/ ./ 与此同时/ ,/ 我们/ 团队/ 目前/ 正在/ 开发/ 一个/ 基于/ Eclipse/ 插件/ 的/ 开发工具/ AecProfiler/ ,/ 可以/ 在/ 开发人员/ 编写/ Java/ 代码/ 的/ 过程/ 中/ 提示/ 代码/ 能耗/ 和/ 能耗/ 优化/ 方法/ ./ 6/ 能耗/ 复杂度/ 前/ 文/ 分别/ 描述/ 了/ 面向/ 代码/ 的/ 软件/ 能耗/ 估算/ 和/ 能耗/ 优化/ 研究/ 的/ 进一步/ 工作/ (/ 3.4/ 节/ 和/ 4.4/ 节/ )/ ,/ 作为/ 研究/ 展望/ ,/ 本/ 节/ 我们/ 提出/ 一个/ 与/ 之/ 相关/ 的/ 新/ 问题/ ,/ 即/ 算法/ 的/ 能耗/ 复杂度/ 研究/ ./ 算法/ 是/ 解题/ 方法/ 的/ 一种/ 抽象/ 描述/ ,/ 代码/ 是/ 算法/ 的/ 实现/ ./ 面向/ 代码/ 的/ 能耗/ 优化/ 与/ 面向/ 算法/ 的/ 能耗/ 优化/ 相比/ ,/ 前者/ 更为/ 具体/ 而/ 后者/ 更为/ 抽象/ ./ 若/ 能够/ 从/ 算法/ 角度/ 研究/ 能耗/ 优化/ 问题/ ,/ 则/ 抽象层次/ 更高/ ,/ 得出/ 更为/ 普适/ 的/ 结论/ ,/ 更/ 具有/ 指导意义/ ./ “/ 算法/ 实现/ ”/ 的/ 能耗/ ,/ 也/ 即/ 代码/ 能耗/ 是/ 可以/ 清晰度/ 量/ 的/ ,/ 但/ 难以/ 定义/ 算法/ 这一/ 抽象概念/ 的/ 能耗/ ,/ 类比/ 我们/ 也/ 无法/ 定义/ 算法/ 的/ 执行/ 时间/ ./ 面向/ 算法/ 研究/ 能耗/ 优化/ ,/ 需要/ 一个/ 新/ 的/ 能耗/ 评价/ 模型/ ./ 我们/ 不能/ 简单/ 地/ 从/ 功能/ 和/ 性能/ 角度/ 来/ 衡量/ 一个/ 算法/ ,/ 而/ 应该/ 考虑/ 其/ “/ 能耗/ 特征/ ”/ ./ 那么/ 可否/ 使用/ “/ 时间/ 特征/ ”/ 来/ 代替/ “/ 能耗/ 特征/ ”/ 呢/ ?/ 前期/ 研究/ [/ 70/ ]/ 中/ 我们/ 发现/ :/ 当/ 优化/ 软件/ 模块/ 性能/ 时/ ,/ 并/ 不能/ 确定性/ 地/ 优化/ 其/ 能耗/ ,/ 在/ 某些/ 情况/ ,/ 能耗/ 和/ 性能/ 成反比/ :/ 如/ 增加/ Web/ 服务器/ 数量/ 可以/ 缩短/ 请求/ 的/ 响应/ 时间/ ,/ 但/ 增加/ 了/ 系统/ 能耗/ ;/ 或/ 采用/ 存储/ 过程/ 执行/ 部分/ 算法/ 可以/ 减少/ 应用服务器/ 的/ 压力/ ,/ 在/ 请求/ 密集/ 时/ 可以/ 提高/ 性能/ ,/ 但/ 能耗/ 几乎/ 不变/ ;/ 或/ 采用/ 密集/ 的/ 数据库/ 索引/ 能/ 同时/ 优化/ 性能/ 和/ 能耗/ ./ 因此/ 不能/ 简单/ 地/ 使用性能/ 度量/ 代替/ 能耗/ 度量/ ./ 计算/ 复杂性/ 理论/ (/ ComputationalComplexityTheory/ )/ 研究/ 计算/ 问题/ 求解/ 时/ 所/ 需/ 资源/ (/ 比如/ 时间/ 和/ 空间/ )/ 的/ 界/ 以及/ 如何/ 尽可能/ 地/ 节省/ 这些/ 资源/ ./ 对/ 资源/ 的/ 界/ 的/ 深入/ 理解/ 可以/ 更加/ 明确/ 求解/ 算法/ 和/ 资源/ 之间/ 的/ 规律/ ,/ 一方面/ 可以/ 很/ 好/ 地/ 对/ 算法/ 进行/ 优化/ ,/ 另一方面/ 还/ 可以/ 确定/ 一个/ 能/ 或/ 不能/ 被/ 计算机/ 求解/ 的/ 问题/ 所/ 具有/ 的/ 实际/ 限制/ ./ 我们/ 通常/ 研究/ 算法/ 的/ 时间/ 复杂度/ 和/ 空间/ 复杂度/ ,/ 尚/ 缺少/ 对/ 其/ 能耗/ 复杂度/ 的/ 研究/ ,/ 即/ 研究/ 算法/ 规模/ 和/ 其/ 消耗/ 的/ 能量/ 之间/ 的/ 关系/ ./ 基于/ 上/ ①/ ②/ ③/ Page17/ 述/ 背景/ ,/ 我们/ 认为/ 如何/ 定义/ 普适/ 的/ 算法/ 能耗/ 复杂度/ ,/ 并/ 以此/ 提出/ 能耗/ 优化/ 方法/ 是/ 亟待解决/ 的/ 难题/ ,/ 具体/ 可以/ 从/ 以下/ 几个/ 方面/ 着手/ 研究/ ./ 首先/ ,/ 研究/ 算法/ 能耗/ 复杂度/ 模型/ ./ 针对/ 一个/ 具体/ 算法/ ,/ 利用/ 数学/ 工具/ 研究/ 其/ 复杂程度/ ,/ 称之为/ 复杂度/ 分析/ ./ 目前/ 对/ 算法/ 的/ 复杂度/ 分析/ 主要/ 集中/ 的/ 时间/ 和/ 空间/ 两个/ 角度/ ,/ 即/ 时间/ 复杂度/ T/ (/ n/ )/ 和/ 空间/ 复杂度/ S/ (/ n/ )/ ,/ 两者/ 是/ 问题/ 规模/ n/ 的/ 函数/ ,/ 可/ 采用/ 渐进/ 记法/ T/ (/ n/ )/ =/ O/ (/ ft/ (/ n/ )/ )/ 和/ S/ (/ n/ )/ =/ O/ (/ fs/ (/ n/ )/ )/ ./ 分析/ 一个/ 算法/ 的/ 能耗/ 复杂度/ ,/ 亦/ 应该/ 遵照/ 这种/ 方式/ ./ 可以/ 采用/ 的/ 基本思路/ 是/ 找到/ 能耗/ 复杂度/ E/ 的/ 函数/ 表达/ ,/ 然后/ 利用/ 数学知识/ 化简/ ./ 那么/ :/ (/ 1/ )/ 能耗/ 仅仅/ 与/ 问题/ 规模/ 有关/ ,/ 还是/ 与/ 执行/ 环境/ 、/ 并行/ 程度/ 等/ 其他/ 因素/ 相关/ ,/ 如何/ 表达/ 这种/ 关系/ ;/ (/ 2/ )/ 如何/ 最小化/ E/ 函数/ 的/ 变量/ 个数/ ,/ 把/ 一些/ 上下文/ 相关/ 的/ 变量/ 定义/ 为/ 常量/ ,/ 可否/ 采用/ E/ (/ n/ )/ =/ O/ (/ fe/ (/ n/ )/ )/ 的/ 形式/ 表达/ 能耗/ 复杂度/ ;/ (/ 3/ )/ 能耗/ 与/ 时间/ 复杂度/ T/ (/ n/ )/ 和/ 空间/ 复杂度/ S/ (/ n/ )/ 存在/ 何种/ 关系/ ,/ 相同/ 时间/ 复杂度/ 的/ 算法/ 其/ 能耗/ 复杂度/ 是否/ 相同/ ;/ (/ 4/ )/ 如何/ 借助/ T/ (/ n/ )/ 和/ S/ (/ n/ )/ 的/ 表达/ 来/ 推导/ E/ (/ n/ )/ ./ 上述/ 问题/ 都/ 是/ 算法/ 能耗/ 复杂度/ 研究/ 中/ 亟待解决/ 的/ 问题/ ./ 其次/ ,/ 需要/ 着手/ 解决/ 一个/ 根本性/ 的/ 问题/ :/ 能耗/ 等于/ 功率/ 乘以/ 时间/ ,/ 若/ 功率/ 在/ 小/ 范围/ 内/ 浮动/ ,/ 则/ 遵照/ 算法/ 时间/ 复杂度/ 定义/ 的/ 能耗/ 复杂度/ 可能/ 会/ 和/ 前者/ 一致/ ,/ 而/ 相同/ 时间/ 复杂度/ 算法/ 的/ 不同/ 能耗/ 特征/ 无法/ 表现/ ./ 事实上/ ,/ 按/ 现有/ 实践经验/ ,/ 应该/ 不/ 存在/ 需要/ 大量/ 时间/ 但/ 很少/ 能耗/ 的/ 算法/ ,/ 也/ 不/ 存在/ 有限/ 时间/ 可以/ 完成/ 但/ 有限/ 能耗/ 无法/ 完成/ 的/ 算法/ ,/ 反之亦然/ ./ 因此/ ,/ 要/ 研究/ 定义/ 算法/ 能耗/ 复杂度/ 的/ 新思路/ ,/ 放大/ 时间/ 复杂度/ 相同/ 的/ 算法/ 的/ 能耗/ 差异/ ./ 再次/ ,/ 我们/ 研究/ 能耗/ 复杂度/ 的/ 分类/ ./ (/ 1/ )/ 对于/ 算法/ 的/ 时间/ 复杂度/ ,/ 采用/ 同阶/ 多项式/ 渐进/ 记法/ ,/ 可以/ 分为/ 常数/ 级/ O/ (/ 1/ )/ ,/ 亚/ 线性/ 级/ O/ (/ nk/ )/ (/ 0/ </ k/ </ 1/ )/ ,/ 对/ 数级/ O/ (/ logn/ )/ ,/ 多项式/ 对/ 数级/ O/ (/ (/ logn/ )/ k/ )/ (/ k/ >/ 1/ )/ ,/ 线性/ 级/ O/ (/ n/ )/ ,/ 拟/ 线性/ 级/ O/ (/ nlogn/ )/ ,/ 多项式/ 级/ O/ (/ nk/ )/ (/ k/ >/ 1/ )/ ,/ 指数/ 级/ O/ (/ kn/ )/ 和/ 阶乘/ 级/ O/ (/ n/ !/ )/ 等/ ,/ 那么/ ,/ 能耗/ 复杂度/ 是否/ 也/ 可以/ 分为/ 这些/ 级别/ ,/ 或者/ 哪些/ 级别/ 不会/ 存在/ ;/ (/ 2/ )/ 传统/ 的/ 时间/ 复杂度/ 若/ 是/ 多项式/ 级/ ,/ 则/ 认为/ 该/ 算法/ 为/ P/ 问题/ ,/ 是/ 多项式/ 时间/ 内可解/ 的/ 确定性/ 问题/ ,/ 这一/ 规律/ 在/ 算法/ 的/ 能耗/ 复杂度/ 中/ 是否/ 适用/ 以及/ 适用范围/ 是/ 什么/ ;/ (/ 3/ )/ 时间/ 复杂性/ 理论/ 把/ 问题/ 分成/ P/ 类/ 和/ NP/ 类/ ,/ 那么/ 能耗/ 复杂性/ 是否/ 可以/ 比照/ 此/ 分类/ ,/ 这种/ 分类/ 是否/ 有/ 意义/ ,/ 是否/ 存在/ 无法/ 在/ 有限/ 能量/ 下/ 求解/ 的/ 问题/ ,/ 如果/ 有/ ,/ 这些/ 算法/ 呈/ 何种/ 特征/ ,/ 如果/ 时间/ 复杂度/ 理论/ 很/ 好/ 地/ 诠释/ 了/ 问题/ 的/ 可/ 解性/ ,/ 那么/ ,/ 能耗/ 复杂度/ 是否/ 可以/ 在/ 此基础/ 上/ 进一步/ 以/ 合适/ 的/ 粒度/ 来/ 评价/ 求解/ 所/ 需/ 的/ 能耗/ 大小/ ,/ 以/ 指导/ 能耗/ 优化/ ./ 最后/ ,/ 研究/ 能耗/ 复杂度/ 优化/ ./ (/ 1/ )/ 若/ 某/ 算法/ 的/ 能耗/ 复杂度/ 已知/ ,/ 那么/ 采用/ 何种/ 数学方法/ 能够/ 优化/ 该/ 复杂度/ ,/ 且/ 这种/ 优化/ 方法/ 可否/ 实际/ 运用/ ,/ 应用/ 效果/ 如何/ ./ 现有/ 时间/ 复杂度/ 优化/ 方法/ 在/ 能耗/ 复杂度/ 中/ 是否/ 可行/ ;/ (/ 2/ )/ 是否/ 存在/ 能耗/ 复杂度/ 的/ 规约/ 方法/ ,/ 将/ 不同/ 的/ 算法/ 规约/ 到/ 同一/ 能耗/ 复杂度/ 可定义/ 、/ 可/ 优化/ 的/ 算法/ 上/ ;/ (/ 3/ )/ 研究/ 特定/ 问题/ 求解/ 算法/ 的/ 能耗/ 的/ 界/ ,/ 及/ 任何/ 经过/ 精妙/ 设计/ 的/ 算法/ ,/ 或/ 任何/ 优化/ 能耗/ 的/ 程序变换/ 均/ 无法/ 达到/ 的/ 最优/ 能耗/ 复杂度/ ./ 对于/ 一个/ 能耗/ 复杂度/ 为/ E/ (/ n/ )/ =/ O/ (/ fe/ (/ n/ )/ )/ 的/ 算法/ X/ ,/ 能耗/ 复杂性/ 研究/ 企图/ 找到/ 一个/ 尽可能/ 大/ 的/ 函数/ ge/ (/ n/ )/ ,/ 并/ 以此/ 证明/ 对于/ 该/ 算法/ ,/ 无论/ 实例/ 大小/ 如何/ ,/ 任意/ 与/ X/ 语义/ 等价/ 的/ 算法/ X/ 的/ 消耗/ 的/ 能量/ 不会/ 小于/ Ω/ (/ ge/ (/ n/ )/ )/ ./ 7/ 结束语/ 随着/ 信息产业/ 的/ 不断/ 发展/ ,/ 软件/ 已经/ 深入/ 到/ 人们/ 的/ 日常/ 工作/ 和/ 生活/ 中/ ./ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 从/ 程序设计/ 和/ 编码/ 角度/ 研究/ 能耗/ 优化/ 问题/ ,/ 是/ 硬件/ 层/ 和/ 资源/ 层/ 能耗/ 优化/ 的/ 一个/ 很/ 好/ 的/ 补充/ ./ 该/ 技术/ 能够/ 很/ 好/ 地/ 指导/ 软件设计/ 和/ 实现/ ./ 众所周知/ ,/ 能源/ 是/ 计算机系统/ 的/ 重要/ 运行/ 成本/ ,/ 马化腾/ 表示/ 腾讯/ 的/ 能源/ 成本/ 已经/ 等于/ 或/ 超过/ 人力/ 成本/ ①/ ./ 软件/ 能耗/ 优化/ 技术/ 的/ 研究/ 和/ 其/ 在/ 软件设计/ 和/ 开发/ 领域/ 的/ 应用/ ,/ 尤其/ 是/ 在/ 手机/ 等/ 能源/ 受限/ 硬件/ 环境/ 之上/ 的/ 软件/ 中/ 得以/ 应用/ ,/ 可以/ 提高/ 软件/ 的/ 竞争力/ ,/ 带来/ 市场经济/ 效应/ ./ 此外/ ,/ 目前/ 国内/ 电能/ 主要/ 是/ 以/ 火力发电/ 为主/ ,/ 软件/ 能耗/ 的/ 降低/ 不仅/ 节省/ 了/ 开销/ ,/ 也/ 减少/ 了/ 二氧化碳/ 的/ 排放量/ ,/ 保护/ 了/ 环境/ ,/ 符合/ 目前/ 倡导/ 的/ 节约型/ 经济/ 和/ 低/ 碳/ 经济/ ./ 本文/ 对/ 近几年/ 国内外/ 在/ 面向/ 代码/ 软件/ 能耗/ 优化/ 研究/ 方面/ 的/ 主要/ 研究成果/ 进行/ 了/ 综述/ :/ 总结/ 了/ 软件/ 能耗/ 优化/ 的/ 思路/ ,/ 优化/ 技术/ 层次/ ,/ 软件/ 能耗/ 优化/ 的/ 优势/ ,/ 和/ 具体/ 的/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 方法/ ;/ 随后/ 从/ 面向/ 代码/ 的/ 软件/ 能耗/ 估算/ 方法/ 和/ 优化/ 算法/ 两个/ 方面/ 对/ 现有/ 工作/ 加以/ 梳理/ ,/ 并/ 分别/ 提出/ 进一步/ 的/ 研究/ 方向/ ;/ 最后/ ,/ 由于/ 现有/ 面向/ 代码/ 的/ 软件/ 能耗/ 研究/ 过于/ 具体/ ,/ 需要/ 更为/ 抽象/ 的/ 优化/ 方法/ ,/ 本文/ 提出/ 算法/ 能耗/ 复/ ①/ http/ :/ // // group/ ./ vsharing/ ./ com/ // News/ // Diary/ ./ aspx/ ?/ id/ =/ 25268/ ,/ Page18/ 杂度/ 这/ 一新/ 观点/ ,/ 指出/ 仍然/ 存在/ 的/ 问题/ 和/ 可能/ 的/ 解决办法/ ,/ 以供/ 研究/ 人员/ 参考/ ./ 总的来说/ ,/ 面向/ 代码/ 的/ 软件/ 能耗/ 优化/ 研究/ 仍然/ 处于/ 刚刚/ 起步/ 的/ 阶段/ ,/ 仍然/ 有/ 大量/ 具有/ 挑战性/ 的/ 关键问题/ 需要/ 深入研究/ ,/ 为/ 国内/ 的/ 绿色/ 计算/ 研究者/ 提供/ 了/ 广阔/ 的/ 研究/ 空间/ ./ 

