Page1/ 一种/ 面向/ 大规模/ URL/ 过滤/ 的/ 多/ 模式/ 串/ 匹配/ 算法/ 刘燕兵/ 1/ )/ ,/ 2/ )/ 邵妍/ 3/ )/ 王勇/ 4/ )/ 刘/ 庆云/ 1/ )/ ,/ 2/ )/ 郭莉/ 1/ )/ ,/ 2/ )/ 1/ )/ (/ 中国科学院/ 信息工程/ 研究所/ 北京/ 100093/ )/ 2/ )/ (/ 信息内容/ 安全/ 技术/ 国家/ 工程/ 实验室/ 北京/ 100093/ )/ 3/ )/ (/ 北京邮电大学/ 计算机/ 学院/ 北京/ 100876/ )/ 4/ )/ (/ 国家/ 计算机网络/ 与/ 信息安全/ 管理中心/ 北京/ 100029/ )/ 摘要/ 对/ 大量/ 有害/ 的/ URL/ 进行/ 过滤/ ,/ 是/ 目前/ 网络安全/ 应用/ 系统/ 中/ 所/ 亟需/ 的/ 关键技术/ ./ 使用/ 经典/ 的/ 串/ 匹配/ 算法/ 检测/ 庞大/ 的/ URL/ 规则/ 集/ ,/ 需要/ 消耗/ 大量/ 的/ 计算资源/ 和/ 存储资源/ ,/ 性能/ 十分/ 低下/ ./ 该文/ 设计/ 了/ 一种/ 适合/ 于/ 大规模/ URL/ 过滤/ 的/ 多/ 模式/ 串/ 匹配/ 算法/ —/ —/ —/ SOGOPT/ ./ 该/ 算法/ 在/ 经典/ 的/ SOG/ 算法/ 基础/ 上/ ,/ 针对/ URL/ 规则/ 的/ 特点/ ,/ 提出/ 了/ 最优/ 窗口/ 选择/ 、/ 模式/ 串/ 分组/ 规约/ 这/ 两种/ 优化/ 技术/ ,/ 大幅度提高/ 了/ SOG/ 算法/ 的/ 匹配/ 速度/ ,/ 在/ 大规模/ URL/ 规则/ 集上/ 效果/ 尤其/ 显著/ ./ 该文/ 设计/ 的/ 算法/ 非常适合/ 于/ 大规模/ (/ 100/ 万级/ )/ URL/ 实时/ 在线/ 匹配/ 的/ 应用环境/ ./ 关键词/ 多/ 模式/ 串/ 匹配/ ;/ URL/ 过滤/ ;/ 最优/ 窗口/ 选择/ ;/ 模式/ 串/ 分组/ 规约/ ;/ 信息安全/ ;/ 网络安全/ 1/ 引言/ 所谓/ 多/ 模式/ 串/ 匹配/ (/ 后文/ 简称/ 串/ 匹配/ )/ 是/ 指/ :/ 给定/ 字符串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ ,/ 其中/ p/ (/ i/ )/ =/ 2/ …/ p/ (/ i/ )/ p/ (/ i/ )/ 1p/ (/ i/ )/ 入/ 文本/ 串/ T/ =/ t1t2/ …/ tn/ ,/ 找出/ P/ 中/ 的/ 字符串/ 在/ T/ 中/ 的/ 所有/ 出现/ 位置/ ./ 称/ P/ 为/ 模式/ 串/ 集合/ ,/ 称/ p/ (/ i/ )/ 为/ 模式/ 串/ ,/ 称/ T/ 为/ 文本/ ./ 串/ 匹配/ 技术/ 在/ 网络/ 信息安全/ 领域/ 有着/ 广泛/ 的/ 应用/ ,/ 典型/ 的/ 应用/ 包括/ :/ 入侵/ 检测/ // 防御/ 系统/ (/ IDS/ // IPS/ )/ 、/ 反病毒/ 和/ 反/ 垃圾邮件/ 检测/ (/ AV/ // AS/ )/ 、/ 网络带宽/ 管理/ 和/ 服务质量/ (/ QoS/ )/ 、/ 统一/ 威胁/ 管理/ (/ UTM/ )/ 等等/ ./ 与此同时/ ,/ 串/ 匹配/ 技术/ 在/ 文本检索/ 、/ 搜索引擎/ 、/ 语言/ 翻译/ 、/ 拼写/ 检查/ 、/ 计算/ 生物学/ 等/ 领域/ 也/ 发挥/ 着/ 关键/ 的/ 作用/ ./ 对/ 大量/ 有害/ 的/ URL/ 进行/ 过滤/ ,/ 是/ 目前/ 网络安全/ 应用/ 系统/ 中/ 所/ 亟需/ 的/ 关键技术/ ./ 目前/ 有/ 七类/ 典型/ 应用/ 需要/ 进行/ URL/ 过滤/ ,/ 包括/ :/ 色情/ 内容/ 、/ 垃圾邮件/ 、/ 恶意软件/ 、/ 漏洞/ 利用/ 、/ 网络/ 钓鱼/ 、/ 代理/ 和/ 可能/ 不/ 受欢迎/ 的/ 应用/ ./ 对/ 这些/ 造成/ 巨大/ 危害/ 的/ URL/ 进行/ 过滤/ ,/ 可以/ 有效/ 地/ 对/ 人们/ 上网/ 浏览/ 非法/ 、/ 有害/ 、/ 不良/ 信息内容/ 进行/ 控制/ 与/ 管理/ ,/ 创造/ 绿色/ 洁净/ 的/ 网络空间/ 环境/ ./ 在/ 海量/ 的/ 网络/ 数据/ 中/ 检测/ 庞大/ 的/ URL/ 规则/ 集/ ,/ 需要/ 消耗/ 大量/ 的/ 计算资源/ 和/ 存储资源/ ,/ 如何/ 保证/ 串/ 匹配/ 算法/ 仍然/ 能够/ 高效/ 实时/ 地/ 运行/ ,/ 是/ 我们/ 当前/ 面临/ 的/ 一个/ 重大/ 难题/ ./ 本文/ 设计/ 了/ 一种/ 适合/ 于/ 大规模/ URL/ 过滤/ 的/ 多/ 模式/ 串/ 匹配/ 算法/ —/ —/ —/ SOGOPT/ ./ 该/ 算法/ 在/ 经典/ 的/ SOG/ 算法/ 基础/ 上/ ,/ 针对/ URL/ 规则/ 的/ 特点/ ,/ 提出/ 了/ 最优/ 窗口/ 选择/ 、/ 模式/ 串/ 分组/ 规约/ 这/ 两种/ 优化/ 技术/ ,/ 大幅度提高/ 了/ 算法/ 的/ 匹配/ 速度/ ,/ 在/ 大规模/ URL/ 规则/ 集上/ 效果/ 尤其/ 显著/ ./ 实验/ 结果显示/ :/ 在/ 100/ 万/ URL/ 规则/ 上/ ,/ SOGOPT/ 算法/ 的/ 匹配/ 速度/ 是/ 原始/ SOG/ 算法/ 的/ 4.33/ 倍/ ,/ 并且/ 性能/ 远远/ 优于/ 其它/ 经典/ 串/ 匹配/ 算法/ (/ AC/ [/ 1/ ]/ 、/ SBOM/ [/ 2/ ]/ 、/ KR/ [/ 3/ ]/ 、/ WM/ [/ 4/ ]/ )/ ./ 本文/ 设计/ 的/ 算法/ 非常适合/ 于/ 大规模/ URL/ 实时/ 在线/ 匹配/ 的/ 应用环境/ ./ 本文/ 第/ 2/ 节/ 介绍/ 串/ 匹配/ 的/ 相关/ 工作/ ;/ 第/ 3/ 节/ 介绍/ 本文/ 提出/ 的/ 面向/ 大规模/ URL/ 过滤/ 的/ 串/ 匹配/ 算法/ —/ —/ —/ SOGOPT/ ;/ 第/ 4/ 节将/ 本文/ 提出/ 的/ 匹配/ 算法/ 同/ 其它/ 经典/ 串/ 匹配/ 算法/ 进行/ 实验/ 比较/ ;/ 第/ 5/ 节是/ 本文/ 的/ 总结/ ./ 2/ 相关/ 工作/ 根据/ 多/ 模式/ 串/ 匹配/ 算法/ 的/ 特点/ ,/ 我们/ 将/ 已有/ 的/ 算法/ 分为/ 三大类/ :/ 基于/ 自动机/ 的/ 匹配/ 算法/ 、/ 基于/ 散列/ 的/ 匹配/ 算法/ 和/ 基于/ 位/ 并行/ 的/ 匹配/ 算法/ ./ (/ 1/ )/ 基于/ 自动机/ 的/ 匹配/ 算法/ 采用/ 自动机/ 作为/ 基本/ 的/ 数据结构/ ,/ 用/ 自动机/ 识别模式/ 串/ 的/ 前缀/ 或者/ 子串/ ./ AC/ [/ 1/ ]/ 和/ SBOM/ [/ 2/ ]/ 是/ 这类/ 算法/ 的/ 典型/ 代表/ ./ 自动机/ 类型/ 匹配/ 算法/ 的/ 优点/ 是/ 适应性/ 好/ ,/ 在/ 不同/ 类型/ 的/ 数据/ 集上/ 的/ 性能/ 稳定/ ./ 其/ 缺点/ 是/ 自动机/ 需要/ 消耗/ 巨大/ 的/ 存储空间/ ,/ 无法/ 支持/ 大规模/ 串/ 匹配/ ./ 例如/ ,/ 对于/ 100/ 万个/ 长度/ 为/ 10/ 的/ 字符串/ ,/ AC/ 自动机/ 大约/ 需要/ 消耗/ 106/ ×/ 10/ ×/ 1KB/ ≈/ 10GB/ 的/ 存储空间/ ./ (/ 2/ )/ 基于/ 散列/ 的/ 匹配/ 算法/ 采用/ 散/ 列表/ 作为/ 基本/ 的/ 数据结构/ ,/ 用散/ 列表/ 记录/ 模式/ 串/ 的/ 散列值/ ,/ 并/ 与/ 待/ 匹配/ 文本/ 的/ 散列值/ 进行/ 比/ 对/ ,/ 以/ 检测/ 模式/ 串/ 和/ 文本/ 是否/ 匹配/ ./ KR/ [/ 3/ ]/ 和/ WM/ [/ 4/ ]/ 是/ 这类/ 算法/ 的/ 典型/ 代表/ ./ 散列/ 类型/ 算法/ 的/ 优点/ 是/ 存储空间/ 较/ 小/ ,/ 在/ 大字符集/ 随机/ 数据/ 上/ 的/ 匹配/ 速度/ 很快/ ./ 但是/ 对于/ 字符集/ 较/ 小/ 并且/ 字符/ 分布/ 极/ 不/ 均匀/ 的/ 数据/ (/ 例如/ URL/ 、/ Email/ 等/ )/ ,/ 这/ 类/ 算法/ 的/ 实际/ 性能/ 很差/ ./ (/ 3/ )/ 基于/ 位/ 并行/ 的/ 匹配/ 算法/ 采用/ 位/ 向量/ 来/ 模拟/ 串/ 匹配/ 自动机/ 的/ 匹配/ 过程/ ,/ 将/ 自动机/ 的/ 状态/ 跳转/ 表示/ 为位/ 向量/ 的/ 运算/ ,/ 并/ 通过/ 机器字/ 来/ 高效/ 执行/ ./ Shift/ -/ AND/ // Shift/ -/ OR/ [/ 5/ ]/ 和/ BNDM/ [/ 6/ ]/ 是/ 这类/ 算法/ 的/ 典型/ 代表/ ./ 这类/ 算法/ 的/ 优点/ 是/ 存储空间/ 小/ ,/ 匹配/ 速度/ 快/ ,/ 在/ 普通/ PC/ 上/ 甚至/ 能/ 达到/ 1GB/ // s/ 的/ 匹配/ 速度/ ./ 但是/ 受限于/ 机器字/ 宽/ 的/ 限制/ ,/ 位/ 并行算法/ 只/ 适合/ 于/ 小规模/ (/ 几个/ ~/ 十几个/ 模式/ 串/ )/ 串/ 匹配/ ./ 近年来/ ,/ 国内外/ 研究者/ 在/ 模式/ 串/ 匹配/ 方面/ 提出/ 了/ 一些/ 新/ 的/ 结果/ [/ 7/ -/ 15/ ]/ ./ 文献/ [/ 7/ ]/ 和/ 文献/ [/ 8/ ]/ 结合/ AC/ 算法/ 和/ 跳跃/ 的/ 思想/ ,/ 提出/ 了/ 改进/ 的/ 多/ 模式/ 串/ 匹配/ 算法/ ./ 不同/ 的/ 是/ ,/ 前者/ 采用/ QuickSearch/ 的/ 思想/ 进行/ 跳跃/ ,/ 而/ 后者/ 汲取/ BM/ 算法/ 中/ 跳跃/ 的/ 特性/ ,/ 采用/ 后缀/ 树/ 算法/ 得到/ 最大/ 跳跃/ 值/ ./ 当/ 模式/ 串/ 数量/ 较/ 少时/ (/ 千级/ )/ ,/ 这/ 两个/ 算法/ 的/ 匹配/ 效率/ 相比/ AC/ 算法/ 有/ 较大/ 提高/ ./ 但是/ ,/ 对于/ 大规模/ 模式/ 串/ (/ 10/ 万级/ 以上/ )/ ,/ 这/ 两个/ 算法/ 的/ 跳跃/ 能力/ 基本/ 退化/ 至/ 零/ ,/ 匹配/ 效率/ 与/ AC/ 算法/ 相当/ ./ 文献/ [/ 9/ ]/ 提出/ 了/ 一种/ 时间/ 复杂度/ 最优/ 的/ 串/ 匹配/ 算法/ LDM/ ./ 该/ 算法/ 综合/ 使用/ 后缀/ 自动机/ DAWG/ 和/ AC/ 自动机/ 同时/ 进行/ 反向/ 和/ 正向/ 匹配/ ,/ 其/ 最坏/ 时间/ 复杂度/ 和/ 平均/ 时间/ 复杂度/ 均/ 达到/ 理论/ 最优/ ./ 但是/ ,/ 该/ 算法/ 需要/ 存储/ 两个/ 自动机/ ,/ 庞大/ 的/ 存储/ 开销/ 更是/ 无法/ 支持/ 大规模/ 串/ 匹配/ ./ 文献/ [/ 10/ ]/ 利用/ 散列/ 函数/ 和/ BloomFilter/ 技术/ 存储/ 模式/ 串/ 的/ 摘要/ 信息/ ,/ 使得/ 大部分/ 的/ 数据/ 访问/ 都/ 局限/ 在/ 缓存/ 之中/ ,/ 提高/ 了/ 缓存/ 命中率/ ./ 该/ 算法/ 本质/ 上/ 是/ WM/ [/ 4/ ]/ 算法/ 的/ 变体/ ,/ 只/ 适合/ 于/ 大字符集/ 和/ 较长/ 模式/ 串/ 的/ 匹配/ ./ 文献/ [/ 11/ ]/ 提出/ 了/ Page3/ 基于/ q/ -/ gram/ 技术/ 的/ 匹配/ 算法/ SOG/ ./ 该/ 算法/ 利用/ q/ -/ gram/ 技术/ 快速/ 排除/ 掉/ 不/ 可能/ 匹配/ 的/ 文本/ ,/ 对/ 剩下/ 可能/ 匹配/ 的/ 文本/ 和/ 模式/ 串/ 进行/ 比/ 对/ ./ 随机/ 数据/ 集上/ 的/ 实验/ 表明/ ,/ 该/ 算法/ 能够/ 有效/ 地/ 进行/ 1/ 万/ ~/ 10/ 万/ 规模/ 的/ 串/ 匹配/ ,/ 但是/ 在/ URL/ 数据/ 集上/ 的/ 实际效果/ 不佳/ ./ 文献/ [/ 12/ ]/ 从/ URL/ 过滤/ 的/ 应用/ 目的/ 出发/ ,/ 提出/ 了/ 一种/ URL/ 散列/ 与/ 多/ 模式/ 串/ 匹配/ 算法/ 相结合/ 的/ 方法/ ,/ 以/ 达到/ 较/ 高/ 的/ 查找/ 速度/ 和/ 有效/ 的/ 内存/ 利用率/ ./ 但是/ 该/ 方法/ 只/ 支持/ 分节/ URL/ 前缀/ 匹配/ ,/ 并/ 不/ 支持/ 子串/ 匹配/ 功能/ ,/ 因而/ 限制/ 了/ 其/ 应用/ 范围/ ./ 综上所述/ ,/ 已有/ 的/ 算法/ 比较/ 适合/ 中/ 小规模/ 的/ 串/ 匹配/ ,/ 当/ 模式/ 串/ 规模/ 为/ 几千/ 时/ ,/ 现有/ 算法/ 的/ 匹配/ 效率/ 很/ 高/ ./ 但是/ 当/ 模式/ 串/ 规模/ 达到/ 10/ 万/ 以上/ 时/ ,/ 这些/ 算法/ 存在/ 存储空间/ 过大/ 或/ 匹配/ 速度/ 降低/ 的/ 问题/ ,/ 无法/ 完全/ 满足/ 实际/ 应用/ 的/ 需求/ ./ 同时/ ,/ 现有/ 的/ 匹配/ 算法/ 研究/ 主要/ 是/ 针对/ 一般/ 的/ 模式/ 串/ (/ 随机/ 串/ 、/ 中文/ 、/ 英文/ 等/ )/ 进行/ 优化/ ,/ 针对/ 特定/ 类型/ 模式/ 串/ (/ 如/ URL/ 、/ Email/ 等/ )/ 的/ 研究/ 工作/ 很少/ ./ 因此/ ,/ 需要/ 进一步/ 研究/ 针对/ 大规模/ URL/ 过滤/ 的/ 高效/ 匹配/ 算法/ ./ 3/ 大规模/ URL/ 串/ 匹配/ 算法/ —/ —/ —/ SOGOPT/ 本节/ 提出/ 一种/ 面向/ 大规模/ URL/ 过滤/ 的/ 多/ 模式/ 串/ 匹配/ 算法/ —/ —/ —/ SOGOPT/ ./ 该/ 算法/ 在/ 经典/ 的/ SOG/ 算法/ [/ 11/ ]/ 的/ 基础/ 上/ ,/ 针对/ URL/ 的/ 特点/ 进行/ 专门/ 优化/ ,/ 以/ 适应/ 大规模/ URL/ 匹配/ 的/ 需求/ ./ 本文/ 主要/ 通过/ 如下/ 两种/ 优化/ 技术/ 来/ 提高/ 串/ 匹配/ 算法/ 的/ 速度/ :/ (/ 1/ )/ 以/ 最大/ 二部/ 图/ 匹配/ 理论/ 为/ 基础/ ,/ 为/ URL/ 模式/ 串/ 选择/ 最优/ 的/ 窗口/ ,/ 以/ 减少/ 哈希/ 函数/ 的/ 冲突/ ,/ 使得/ URL/ 散列/ 更加/ 均匀/ ;/ (/ 2/ )/ 对/ URL/ 模式/ 串/ 进行/ 分组/ 规约/ ,/ 在/ 同一个/ 机器字/ 内/ 并行执行/ 多组/ SOG/ 算法/ ,/ 以/ 达到/ 减少/ 校验/ 次数/ 、/ 提高/ 匹配/ 速度/ 的/ 目的/ ./ 在/ 3.1/ 节中/ ,/ 我们/ 首先/ 介绍/ 原始/ SOG/ 算法/ 的/ 基本/ 思想/ ,/ 并/ 分析/ 其/ 对/ 大规模/ URL/ 进行/ 过滤/ 时/ 的/ 不足之处/ ./ 针对/ 原始/ SOG/ 算法/ 的/ 缺点/ ,/ 3.2/ 节/ 和/ 3.3/ 节/ 分别/ 介绍/ 本文/ 提出/ 的/ 两种/ 优化/ 技术/ ./ 3.1/ SOG/ 算法/ 的/ 基本/ 思想/ 及其/ 不足/ SOG/ 算法/ 是/ Salmela/ 等/ 人/ [/ 11/ ]/ 提出/ 的/ 面向/ 10/ 万/ 规模/ 模式/ 串/ 的/ 匹配/ 方法/ ./ 在/ 随机/ 数据/ 集上/ 的/ 测试表明/ ,/ 该/ 算法/ 优于/ 众多/ 其它/ 经典/ 串/ 匹配/ 算法/ ./ 该/ 算法/ 的/ 基本/ 思想/ 是/ :/ 首先/ ,/ 将/ 模式/ 串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ 规约/ 为/ 一个通/ 配/ 形式/ 的/ 模式/ 串/ p/ ;/ 然后/ ,/ 使用/ 位/ 并行/ 串/ 匹配/ 算法/ Shift/ -/ OR/ [/ 5/ ]/ 对/ p/ 进行/ 搜索/ ;/ 最后/ ,/ 对于/ 可能/ 出现/ 的/ 匹配/ 位置/ ,/ 使用/ 二级/ 哈希/ 和/ 二分/ 搜索/ 进行/ 校验/ ,/ 以/ 报告/ 所有/ 真正/ 匹配/ 的/ 结果/ ./ 本质/ 上/ ,/ SOG/ 算法/ 是/ 一种/ 过滤/ 型/ 串/ 匹配/ 算法/ ,/ 适合/ 于/ 模式/ 串/ 命中/ 较少/ 的/ 应用/ 场景/ ./ 直接/ 使用/ SOG/ 算法/ 进行/ 大规模/ URL/ 匹配/ ,/ 其/ 匹配/ 速度/ 比较/ 低下/ ./ 究其原因/ ,/ 存在/ 如下/ 两个/ 方面/ 的/ 不足/ :/ (/ 1/ )/ 哈希/ 函数/ 严重/ 聚集/ 与/ 冲突/ :/ SOG/ 算法/ 与/ KR/ [/ 3/ ]/ 、/ WM/ [/ 4/ ]/ 等/ 算法/ 一样/ ,/ 都/ 使用/ 哈希/ 函数/ 对/ 可能/ 出现/ 的/ 匹配/ 位置/ 进行/ 校验/ ,/ 以/ 报告/ 所有/ 真正/ 匹配/ 的/ 结果/ ./ 当/ 模式/ 串/ 长度/ 不/ 相等/ 时/ ,/ 算法/ 需要/ 从/ 每个/ 模式/ 串中/ 选取/ 一个/ 长度/ 为/ m/ 的/ 子串/ 作为/ 待/ 查找/ 的/ 目标/ ,/ 这里/ m/ 是/ 最/ 短/ 模式/ 串/ 的/ 长度/ ./ 选取/ 的/ 长度/ 为/ m/ 的/ 子串/ 称之为/ 窗口/ ./ 通常/ 的/ 窗口/ 选择/ 方法/ 是从/ 每个/ 模式/ 串中/ 选取/ 长度/ 为/ m/ 的/ 前缀/ 或者/ 后缀/ ./ 但是/ ,/ URL/ 分布/ 极/ 不/ 均匀/ ,/ 往往/ 具有/ 大量/ 的/ 相同/ 前缀/ 或者/ 后缀/ ,/ 从/ 每个/ 模式/ 串中/ 选取/ 的/ 长度/ 为/ m/ 的/ 子串/ 往往/ 出现/ 大量/ 重复/ ,/ 导致/ 哈希/ 函数/ 的/ 严重/ 聚集/ 与/ 冲突/ ./ 大量/ 的/ 模式/ 串散/ 列到/ 相同/ 的/ 位置/ ,/ 散/ 列表/ 中/ 某些/ 链表/ 过长/ ,/ 大幅度/ 增加/ 了/ 校验/ 的/ 代价/ ./ 针对/ 这一/ 缺点/ ,/ 3.2/ 节/ 提出/ 最优/ 窗口/ 选择/ 方法/ ,/ 为/ 模式/ 串/ 选择/ 合适/ 的/ 窗口/ 子串/ ,/ 使得/ 哈希/ 函数/ 的/ 冲突/ 达到/ 最小/ ./ (/ 2/ )/ 较/ 高/ 的/ 校验/ 次数/ :/ SOG/ 算法/ 是/ 一种/ 过滤/ 型/ 算法/ ,/ 需要/ 对/ 可能/ 出现/ 匹配/ 的/ 位置/ 进行/ 校验/ ./ 校验/ 是/ 极/ 费时间/ 的/ 操作/ ,/ 校验/ 次数/ 越/ 多/ ,/ 算法/ 匹配/ 速度/ 越慢/ ./ 随着/ 模式/ 串/ 集合/ 的/ 增大/ ,/ SOG/ 算法/ 的/ 校验/ 次数/ 越来越/ 高/ ,/ 算法/ 匹配/ 速度/ 下降/ ./ 针对/ 这一/ 缺点/ ,/ 3.3/ 节/ 提出/ 模式/ 串/ 分组/ 规约/ 方法/ ,/ 大幅度/ 减少/ 了/ SOG/ 算法/ 的/ 校验/ 次数/ ./ 3.2/ 最优/ 窗口/ 选择/ 如上节/ 所述/ ,/ 当/ 模式/ 串/ 长度/ 不/ 相等/ 时/ ,/ SOG/ 、/ WM/ 、/ KR/ 等/ 算法/ 需要/ 从/ 每个/ 模式/ 串中/ 选取/ 一个/ 长度/ 为/ m/ 的/ 子串/ 作为/ 待/ 查找/ 的/ 目标/ ,/ 这里/ m/ 是/ 最/ 短/ 模式/ 串/ 的/ 长度/ ./ 选取/ 的/ 长度/ 为/ m/ 的/ 子串/ 称之为/ 窗口/ ./ 对于/ 模式/ 串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ ,/ 其中/ p/ (/ i/ )/ =/ 2/ …/ p/ (/ i/ )/ p/ (/ i/ )/ 1p/ (/ i/ )/ 在/ 经典/ 的/ 串/ 匹配/ 算法/ 中/ ,/ 并/ 没有/ 考虑/ 窗口/ 选择/ 的/ 问题/ ./ 在/ SOG/ 、/ WM/ 、/ KR/ 等/ 算法/ 中/ ,/ 通常/ 是/ 截取/ 每个/ 模式/ 串中/ 最/ 左/ (/ 或者/ 最右/ )/ 的/ m/ 个字符/ 作为/ 模式/ 串/ 的/ 窗口/ ,/ 然后/ 对/ 这些/ 窗口/ 计算/ 哈希/ 值/ (/ 不是/ 对/ 整个/ 模式/ 串/ 计算/ 哈希/ 值/ )/ ,/ 将/ 模式/ 串/ 插入/ 到/ 散/ 列表/ 中/ ./ URL/ 这种/ 字符/ 分布/ 极/ 不/ 均匀/ 的/ 模式/ 串/ ,/ 往往/ 具有/ 大量/ 的/ 相同/ 前缀/ 或者/ 后缀/ ,/ 如果/ 简单/ 地/ 选取/ 最/ 左/ (/ 或者/ 最右/ )/ 的/ 窗口/ 进行/ 散列/ ,/ 必然/ 导致/ 大量/ 的/ URL/ 散列/ Page4/ 到/ 同一个/ 桶/ 中/ ,/ 导致/ 严重/ 的/ 哈希/ 冲突/ ,/ 哈希/ 表/ 的/ 查找/ 性能/ 也/ 十分/ 低下/ ./ 为了/ 减少/ 串/ 匹配/ 算法/ 中/ 哈希/ 表/ 的/ 冲突/ ,/ 本文/ 提出/ 一种/ 最优/ 的/ 窗口/ 选择/ 方法/ ,/ 使得/ 哈希/ 表/ 的/ 均匀/ 性/ 最好/ ./ 该/ 方法/ 的/ 基本/ 思想/ 是/ 选出/ 模式/ 串中/ 最/ 独特/ 、/ 最/ 具有/ 区分度/ 的/ 子串/ ,/ 使得/ 它/ 能/ 唯一/ 代表/ 该/ 模式/ 串/ ,/ 即/ 寻找/ 模式/ 串/ 集合/ 与其/ 子串/ 之间/ 的/ 一一对应/ 关系/ ,/ 使得/ 每个/ 模式/ 串/ 尽可能/ 对应/ 不同/ 的/ 子串/ ,/ 从而/ 最大/ 程度/ 地/ 减少/ 哈希/ 函数/ 的/ 聚集/ 与/ 冲突/ ./ 通过/ 为/ 每/ 一个/ URL/ 模式/ 串/ 选择/ 合适/ 的/ 窗口/ ,/ 每个/ 窗口/ 唯一/ 代表/ 该/ URL/ ,/ 避免/ 了/ 相同/ 前缀/ 的/ URL/ 散列/ 到/ 同一个/ 桶/ 中/ ./ 因为/ 每个/ 模式/ 串有/ mi/ -/ m/ +/ 1/ 种/ 可/ 供选择/ 的/ 窗口/ ,/ 模式/ 串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ 上/ 共有/ ∏/ r/ (/ mi/ -/ m/ +/ 1/ )/ 种/ 不同/ 的/ 窗口/ 选择/ 组合/ ,/ 简单/ 的/ 枚/ i/ =/ 1/ 举/ 搜索/ 显然/ 是/ 不/ 可行/ 的/ ./ 我们/ 将/ 上述/ 最优/ 窗口/ 选择/ 形式化/ 为/ 最大/ 二部/ 图/ 匹配/ 问题/ :/ 设/ 二部/ 图为/ G/ =/ (/ V1/ ,/ V2/ ,/ E/ )/ ./ 模式/ 串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ 中/ 的/ 模式/ 串/ 组成/ 顶点/ 集/ V1/ ./ 模式/ 串/ 所有/ 长度/ 为/ m/ 的/ 子串/ 组成/ 顶点/ 集/ V2/ ./ 二部/ 图/ G/ 中/ 存在/ 一条/ 连接/ 左侧/ 顶点/ u/ ∈/ V1/ 和/ 右侧/ 顶点/ v/ ∈/ V2/ 的/ 边/ e/ =/ (/ u/ ,/ v/ )/ ∈/ E/ ,/ 当且/ 仅/ 当/ v/ 是/ u/ 的/ 子串/ ./ 显然/ ,/ 模式/ 串/ p/ (/ i/ )/ =/ p/ (/ i/ )/ mi/ 在/ 二部/ 图中/ 对应/ 于/ mi/ -/ m/ +/ 1/ 条边/ ./ 于是/ ,/ 模式/ p/ (/ i/ )/ 串/ 的/ 最优/ 窗口/ 选择/ 问题/ 等价/ 于/ 求解/ 二部/ 图/ G/ 的/ 最大/ 匹配/ 问题/ ,/ 即为/ V1/ 中/ 的/ 每/ 一个/ 顶点/ 寻找/ 一条/ 边/ ,/ 使得/ V2/ 中/ 的/ 顶点/ 出现/ 的/ 最/ 多/ ./ 利用/ 最大/ 二部/ 图/ 匹配/ 理论/ 选择/ 最优/ 窗口/ 的/ 过程/ 如/ 算法/ 1/ 所示/ ./ 首先/ ,/ 根据/ 模式/ 串/ 集合/ P/ 构造/ 二部/ 图/ (/ 算法/ 1/ 的/ 第/ 1/ ~/ 8/ 行/ )/ ,/ 然后/ 使用/ 经典/ 的/ 最大/ 流/ 算法/ 求解/ 最大/ 二部/ 图/ 匹配/ (/ 算法/ 1/ 的/ 第/ 9/ 行/ )/ ,/ 最后/ 根据/ 二部/ 图/ 匹配/ 的/ 结果/ 为/ 每个/ 模式/ 串/ 选择/ 最优/ 的/ 窗口/ (/ 算法/ 1/ 的/ 第/ 10/ 行/ )/ ./ 算法/ 1/ ./ 基于/ 最大/ 二部/ 图/ 匹配/ 的/ 最优/ 窗口/ 选择/ 方法/ ./ 输入/ :/ 模式/ 串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ 输出/ :/ 各/ 模式/ 串/ 的/ 最优/ 窗口/ OptimalWindowSelection/ (/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ )/ 1/ ./ m/ ←/ minp/ ∈/ P/ |/ p/ |/ 2/ ./ V1/ ←/ P/ ,/ V2/ ←/ / ,/ E/ ←/ / 3/ ./ FOReachpatternp/ (/ k/ )/ =/ p/ (/ k/ )/ 4/ ./ FOReachsubstringvi/ =/ p/ (/ k/ )/ 5/ ./ E/ ←/ E/ ∪/ {/ (/ p/ (/ k/ )/ ,/ vi/ )/ }/ 6/ ./ V2/ ←/ V2/ ∪/ {/ vi/ }/ 7/ ./ ENDFOR8/ ./ ENDFOR9/ ./ R/ ←/ MaxBipartiteMatching/ (/ G/ =/ (/ V1/ ,/ V2/ ,/ E/ )/ )/ 10/ ./ foreachpair/ (/ p/ (/ k/ )/ ,/ v/ )/ ∈/ R/ ,/ substringvisthe/ 基于/ 最大/ 二部/ 图/ 匹配/ 的/ 窗口/ 选择/ 方法/ 虽然/ 能/ 得到/ 理论/ 上/ 的/ 最优/ 解/ ,/ 但是/ 算法/ 1/ 的/ 时间/ 复杂度/ 很/ 高/ ,/ 不/ 适合/ 在/ 实际/ 工程/ 中/ 应用/ ./ 为此/ ,/ 我们/ 设计/ 了/ 一种/ 快速/ 的/ 近似算法/ 来/ 进行/ 窗口/ 选择/ ,/ 以/ 降低/ 计算/ 的/ 代价/ ./ 近似算法/ 的/ 基本/ 思想/ 是/ :/ 首先/ 统计/ 所有/ 模式/ 串中/ 可能/ 出现/ 的/ 长度/ 为/ m/ 的/ 子串/ 的/ 出现/ 频率/ (/ 算法/ 2/ 的/ 第/ 1/ ~/ 7/ 行/ )/ ./ 子串/ 出现/ 频率/ 越低/ ,/ 说明/ 该/ 子串/ 是/ 不/ 常见/ 的/ 字符串/ ,/ 因而/ 适合/ 被/ 选作/ 模式/ 串/ 的/ 窗口/ ./ 对于/ 特定/ 的/ 模式/ 串/ ,/ 选择/ 其/ 窗口/ 为/ 它/ 所/ 包含/ 的/ 长度/ 为/ m/ 的/ 子串/ 中/ 出现/ 频率/ 最低/ 者/ (/ 算法/ 2/ 的/ 第/ 8/ ~/ 11/ 行/ )/ ./ 近似算法/ 的/ 步骤/ 如/ 算法/ 2/ 所示/ ./ 算法/ 2/ ./ 近似/ 最优/ 的/ 窗口/ 选择/ 方法/ ./ 输入/ :/ 模式/ 串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ 输出/ :/ 各/ 模式/ 串/ 的/ 近似/ 最优/ 窗口/ NearOptimalWindowSelection/ (/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ )/ 1/ ./ m/ ←/ minp/ ∈/ P/ |/ p/ |/ 2/ ./ count/ [/ ]/ ←/ / 3/ ./ FOReachpatternp/ (/ k/ )/ =/ p/ (/ k/ )/ 4/ ./ FOReachsubstringvi/ =/ p/ (/ k/ )/ 5/ ./ count/ [/ vi/ ]/ ←/ count/ [/ vi/ ]/ +/ 16/ ./ ENDFOR7/ ./ ENDFOR8/ ./ FOReachpatternp/ (/ k/ )/ =/ p/ (/ k/ )/ 9/ ./ vmin/ ←/ argmin/ {/ count/ [/ vi/ ]/ |/ vi/ =/ p/ (/ k/ )/ 10/ ./ vministhenearoptimalwindowforpatternp/ (/ k/ )/ 11/ ./ ENDFOR/ 算法/ 1/ 和/ 算法/ 2/ 的/ 时间/ 复杂度/ 和/ 空间/ 复杂度/ 分析/ 如下/ ./ 定理/ 1/ ./ 算法/ 1/ 的/ 时间/ 复杂度/ 为/ O/ (/ r2L2/ )/ ,/ 空间/ 复杂度/ 为/ O/ (/ rL/ )/ ,/ 其中/ r/ 是/ 模式/ 串/ 的/ 个数/ ,/ L/ 为/ 模式/ 串/ 的/ 平均/ 长度/ ./ 证明/ ./ 根据/ 最大/ 流/ 算法/ 的/ 理论/ ,/ 最大/ 二部/ 图/ 匹配/ 的/ 时间/ 复杂度/ 为/ O/ (/ |/ V/ |/ |/ E/ |/ )/ ,/ 空间/ 复杂度/ 为/ O/ (/ |/ V/ |/ +/ |/ E/ |/ )/ ,/ 其中/ |/ V/ |/ 是/ 二部/ 图/ 的/ 顶点/ 数/ ,/ |/ E/ |/ 是/ 二部/ 图/ 的/ 边数/ ./ 算法/ 1/ 的/ 主要/ 时间/ 开销/ 为/ 计算/ 最大/ 二部/ 图/ 匹配/ ,/ 二部/ 图/ 的/ 顶点/ 数/ |/ V/ |/ =/ (/ Or/ +/ ∑/ rO/ (/ rL/ )/ ,/ 边数/ |/ E/ |/ =/ (/ O/ ∑/ r/ 此/ 算法/ 1/ 的/ 时间/ 复杂度/ 为/ O/ (/ |/ V/ |/ |/ E/ |/ )/ =/ O/ (/ r2L2/ )/ ,/ 空间/ 复杂度/ 为/ O/ (/ |/ V/ |/ +/ |/ E/ |/ )/ =/ O/ (/ rL/ )/ ./ 证毕/ ./ Page5/ 定理/ 2/ ./ 算法/ 2/ 的/ 时间/ 复杂度/ 为/ O/ (/ rLlogrL/ )/ ,/ 空间/ 复杂度/ 为/ O/ (/ rL/ )/ ,/ 其中/ r/ 是/ 模式/ 串/ 的/ 个数/ ,/ L/ 为/ 模式/ 串/ 的/ 平均/ 长度/ ./ 证明/ ./ 算法/ 2/ 中/ 主要/ 的/ 时间/ 代价/ 是/ 统计/ 长度/ 为/ m/ 的/ 子串/ 的/ 出现/ 频率/ ./ 模式/ 串/ 集合/ P/ 中/ 总共/ 有/ ∑/ r/ (/ mi/ -/ m/ +/ 1/ )/ =/ O/ (/ rL/ )/ 个/ 长度/ 为/ m/ 的/ 子串/ ,/ 如果/ i/ =/ 1/ 用/ 平衡/ 二叉树/ 来/ 实现/ 子串/ 的/ 频率/ 统计/ (/ 算法/ 2/ 中/ 的/ 第/ 5/ 行/ )/ ,/ 一次/ 计数/ 的/ 时间/ 代价/ 为/ O/ (/ logrL/ )/ ./ 算法/ 2/ 中/ 3/ ~/ 6/ 行/ 的/ 时间/ 代价/ 为/ O/ (/ rLlogrL/ )/ ,/ 8/ ~/ 9/ 行/ 的/ 时间/ 代价/ 也/ 为/ O/ (/ rLlogrL/ )/ ,/ 因此/ 算法/ 2/ 的/ 时间/ 复杂度/ 为/ O/ (/ rLlogrL/ )/ ./ 因为/ 平衡/ 二叉树/ 具有/ 线性/ 的/ 空间/ 复杂度/ ,/ 因此/ 算法/ 2/ 的/ 空间/ 复杂度/ 为/ O/ (/ rL/ )/ ./ 证毕/ ./ 为了/ 度量/ 窗口/ 选择/ 方法/ 对/ 降低/ 哈希/ 函数/ 冲突/ 、/ 改善/ 哈希/ 函数/ 均匀/ 性/ 的/ 效果/ ,/ 我们/ 采用/ 文献/ [/ 16/ ]/ 中/ 定义/ 的/ “/ 信息/ 查询/ 性能/ 测度/ ”/ 作为/ 评价/ 哈希/ 函数/ 均匀/ 性/ 的/ 指标/ ./ “/ 信息/ 查询/ 性能/ 测度/ ”/ 定义/ 为/ 1/ 其中/ Ni/ 是/ 哈希/ 表中/ 第/ i/ 个/ 桶/ 的/ 链表/ 长度/ ,/ N/ =/ ∑/ M/ 是/ 哈希/ 表中/ 元素/ 的/ 总数/ ,/ M/ 是/ 哈希/ 表/ 的/ 大小/ ./ “/ 信息/ 查询/ 性能/ 测度/ ”/ 的/ 物理/ 意义/ 是/ :/ 假设/ 查询/ 每个/ URL/ 的/ 概率/ 均/ 为/ 1/ 哈希/ 表/ 的/ “/ 信息/ 查询/ 性能/ 测度/ ”/ (/ 测试数据/ 集中/ 最短/ URL/ 长度/ 为/ 犿/ =/ 6/ ,/ 哈希/ 表/ 的/ 大小/ 为/ 犕/ =/ 224/ )/ 表/ 1/ 不/ 进行/ 窗口/ 选择/ 、/ 基于/ 最大/ 二部/ 图/ 匹配/ 的/ 最优/ 窗口/ 选择/ (/ 算法/ 1/ )/ 、/ 近似/ 最优/ 窗口/ 选择/ (/ 算法/ 2/ )/ 3/ 种/ 情况/ 下/ URL/ 规模/ 不/ 进行/ 窗口/ 选择/ 基于/ 最大/ 二部/ 图/ 匹配/ 的/ 最优/ 窗口/ 选择/ (/ 算法/ 1/ )/ 近似/ 最优/ 窗口/ 选择/ (/ 算法/ 2/ )/ 2/ 万条/ URL5/ 万条/ URL10/ 万条/ URL633/ ./ 582710/ 需要/ 说明/ 的/ 是/ ,/ 本/ 节/ 提出/ 的/ 窗口/ 选择/ 方法/ 是/ 一种/ 针对/ 串/ 匹配/ 算法/ 的/ 通用/ 优化/ 技术/ ,/ 不/ 限于/ 优化/ SOG/ 算法/ ,/ 同样/ 可以/ 应用/ 于/ KR/ [/ 3/ ]/ 和/ WM/ [/ 4/ ]/ 等/ 散列/ 类型/ 的/ 串/ 匹配/ 算法/ ,/ 并/ 能/ 显著/ 提高/ 匹配/ 算法/ 的/ 匹配/ 速度/ ./ 相关/ 测试/ 结果/ 见/ 4.2/ 节中/ 的/ 表/ 4.3/ ./ 3/ 模式/ 串/ 分组/ 归约/ SOG/ 是/ 一种/ 过滤/ 型/ 匹配/ 算法/ ,/ 它/ 将/ 模式/ 串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ 规约/ 为/ 一个通/ 配/ 形式/ 的/ 模式/ 串/ ,/ 然后/ 利用/ 该/ 通配/ 模式/ 串/ 进行/ 粗/ 过滤/ ,/ 排除/ 掉/ 不/ 可能/ 匹配/ 的/ 文本/ 位置/ ./ 对于/ 剩下/ 的/ 可能/ 出现/ 匹配/ 的/ 文本/ 位置/ ,/ 逐个/ 进行/ 校验/ ,/ 以/ 报告/ 真正/ 的/ 匹配/ 结果/ ./ 随着/ 模式/ 串/ 集合/ 规模/ 的/ 增大/ ,/ SOG/ 算法/ 的/ 过滤/ 效果/ 越来越/ 差/ ,/ 需要/ 进行/ 校验/ 的/ 次数/ 越来越/ 多/ ,/ 大幅度降低/ 了/ 算法/ 的/ 匹配/ 速度/ ./ 为了/ 解决/ 这个/ 问题/ ,/ 本文/ 采用/ 模式/ 串/ 分组/ 归约/ 的/ 方法/ 来/ 改进/ SOG/ 算法/ 的/ 过滤/ 效果/ ./ 2/ ,/ 因此/ 查询/ N/ 个/ URL/ 的/ 平均/ 代价/ 为/ Ni/ (/ Ni/ +/ 1/ )/ Ni/ (/ Ni/ +/ 1/ )/ N/ ∑/ M1i/ =/ 1/ 知/ ,/ “/ 信息/ 查询/ 性能/ 测度/ ”/ 越小/ ,/ 查询/ URL/ 的/ 平均/ 时间/ 代价/ 越小/ ,/ 哈希/ 表对/ URL/ 的/ 散列/ 越/ 均匀/ ./ 本文/ 测试/ 了/ 窗口/ 选择/ 方法/ 对/ 降低/ 哈希/ 函数/ 冲突/ 、/ 改善/ 哈希/ 函数/ 均匀/ 性/ 的/ 效果/ ./ 我们/ 在/ 骨干/ 路由器/ 上/ 采集/ 了/ 100GB/ 的/ URL/ 数据/ ,/ 对/ 数据/ 进行/ 去/ 重/ ,/ 然后/ 从中/ 随机/ 选取/ 了/ 2/ 万条/ 、/ 5/ 万条/ 和/ 10/ 万条/ URL/ 作为/ 模式/ 串/ ,/ 评估/ 窗口/ 选择/ 对/ 哈希/ 表/ 的/ “/ 信息/ 查询/ 性能/ 测度/ ”/ 的/ 影响/ ./ 在/ 实验/ 中/ ,/ 分别/ 统计/ 了/ 不/ 进行/ 窗口/ 选择/ 、/ 基于/ 最大/ 二部/ 图/ 匹配/ 的/ 最优/ 窗口/ 选择/ (/ 算法/ 1/ )/ 、/ 近似/ 最优/ 窗口/ 选择/ (/ 算法/ 2/ )/ 这/ 3/ 种/ 情况/ 下/ 哈希/ 表/ 的/ “/ 信息/ 查询/ 性能/ 测度/ ”/ ,/ 得到/ 的/ 测试/ 结果/ 如表/ 1/ 所示/ ./ 从/ 实验/ 结果/ 可以/ 看出/ ,/ 不/ 进行/ 窗口/ 选择/ 时/ 的/ 测度/ 值/ 最大/ ,/ 近似/ 最优/ 窗口/ 选择/ 的/ 测度/ 值/ 次之/ ,/ 基于/ 最大/ 二部/ 图/ 匹配/ 的/ 最优/ 窗口/ 选择/ 的/ 测度/ 值/ 最小/ ./ 因此/ ,/ 进行/ 窗口/ 选择/ 大大/ 改善/ 了/ 哈希/ 表/ 的/ 均匀/ 性/ 和/ 查询/ 性能/ ./ 此外/ ,/ 近似/ 最优/ 窗口/ 选择/ 方法/ 的/ 效果/ 与/ 基于/ 最大/ 二部/ 图/ 匹配/ 的/ 最优/ 窗口/ 选择/ 方法/ 的/ 效果/ 很/ 接近/ ./ 鉴于/ 求解/ 最大/ 二部/ 图/ 匹配/ 非常/ 耗时/ ,/ 在/ 实际/ 应用/ 中/ 采用/ 近似/ 最优/ 窗口/ 选择/ 方法/ 就/ 能/ 取得/ 非常/ 好/ 的/ 效果/ ./ 1.0000001/ ./ 0000001.000000/ 模式/ 串/ 分组/ 归约/ 的/ 基本/ 思想/ 是/ :/ 将/ 模式/ 串/ 集合/ P/ 平均/ 分为/ G/ 组/ P/ =/ P1/ ∪/ P2/ ∪/ …/ ∪/ PG/ ,/ 每/ 一组/ 模式/ 串/ Pj/ 单独/ 规约/ 为/ 一个通/ 配/ 形式/ 的/ 模式/ 串/ ^/ pj/ (/ 1/ / j/ / G/ )/ ,/ 然后/ 将/ 这/ G/ 个/ 通配/ 模式/ ^/ pj/ 拼接/ 到/ 一个/ 机器字/ 中/ ,/ 使用/ SOG/ 算法/ 进行/ 并行/ 搜索/ ./ 设/ 机器字/ 位/ 宽/ 为/ w/ ,/ 因为/ 每个/ 通配/ 模式/ ^/ pj/ 需要/ m/ -/ q/ +/ 1/ 比特/ 位来/ 表示/ ,/ 因此/ 最/ 多/ 可以/ 将/ 模式/ 串/ 集合/ 划分/ 为/ G/ =/ wm/ -/ q/ +/ 1/ 组/ ./ 算法/ 3/ 是/ 应用/ 模式/ 串/ 分组/ 规约/ 技术/ 的/ SOG/ 算法/ ./ 算法/ 分为/ 预处理/ 和/ 搜索/ 两个/ 阶段/ ./ 在/ 预处理/ 阶段/ (/ 算法/ 3/ 的/ 第/ 1/ ~/ 12/ 行/ )/ ,/ 位/ 图表/ B/ [/ c1c2/ …/ cq/ ]/ 记录/ 每个/ q/ 元/ 字符串/ c1c2/ …/ cq/ ∈/ Σ/ q/ 在/ 模式/ 串中/ 的/ 出现/ 位置/ ./ 模式/ 串/ p/ (/ k/ )/ 被/ 分/ 在/ 第/ g/ =/ kmodG/ 组/ ,/ 因此/ p/ (/ k/ )/ 的/ 所有/ q/ 元/ 字符串/ 的/ 信息/ 都/ 被/ 记录/ 在/ Page6/ 位/ 图表/ B/ [/ ·/ ]/ 的/ 第/ g/ (/ m/ -/ q/ +/ 1/ )/ 比特/ 位/ 和/ g/ (/ m/ -/ q/ +/ 1/ )/ +/ m/ -/ q/ 比特/ 位/ 之间/ ./ 对于/ 模式/ 串/ p/ (/ k/ )/ 的/ 第/ i/ 个/ q/ 元/ 字符串/ p/ (/ k/ )/ i/ +/ q/ -/ 1/ ]/ 的/ 第/ g/ (/ m/ -/ q/ +/ 1/ )/ +/ i/ -/ 1/ 个/ 比特/ 位/ 设置/ 为/ p/ (/ k/ )/ 0/ ,/ 表示/ q/ 元/ 字符串/ p/ (/ k/ )/ 个/ 模式/ 串/ 的/ 位置/ i/ 出现/ 过/ ./ 在/ SOG/ 算法/ 中/ ,/ 用/ 比特/ 0/ 表示/ 某个/ 字符串/ 出现/ 、/ 比特/ 1/ 表示/ 不/ 出现/ ,/ 这样/ 表示/ 的/ 目的/ 是/ 为了/ 减少/ 搜索/ 阶段/ 位操作/ 的/ 次数/ ,/ 是/ 位/ 并行算法/ 中/ 的/ 一种/ 常用/ 优化/ 技巧/ ./ 在/ 搜索/ 阶段/ (/ 算法/ 3/ 的/ 第/ 13/ ~/ 19/ 行/ )/ ,/ 用位/ 向量/ 犇/ 记录/ 当前/ 的/ 匹配/ 状态/ ,/ 通过/ 与/ 位/ 向量/ 表/ B/ [/ ·/ ]/ 和/ 掩码/ Mask/ 、/ Clear/ 进行/ 位操作/ ,/ 来/ 检测/ 是否/ 发生/ 匹配/ ./ 由于/ G/ 个/ 模式/ 串/ 分组/ 的/ 信息/ 都/ 记录/ 在/ 宽度/ 为/ w/ 的/ 位图/ 之中/ ,/ 可以/ 在/ 一个/ 机器字/ 内/ 完成/ ,/ 因此/ ,/ 对/ 模式/ 串/ 进行/ 分组/ 规约/ 并/ 不会/ 增加/ 搜索/ 过程/ 的/ 时间/ 复杂度/ ./ 算法/ SOGPartition/ 中/ 的/ Mask/ ←/ (/ 10m/ -/ q/ )/ G/ 表示/ 二进制/ 字符串/ 10m/ -/ q/ 重复/ G/ 次/ ,/ Clear/ ←/ (/ 1m/ -/ q0/ )/ G/ 的/ 含义/ 与/ 此/ 相同/ ./ 算法/ 3/ ./ 基于/ 模式/ 串/ 分组/ 规约/ 的/ SOG/ 算法/ ./ 输入/ :/ 模式/ 串/ 集合/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ 、/ 待/ 匹配/ 文本/ 输出/ :/ 模式/ 串/ 在/ 待/ 匹配/ 文本/ 中/ 的/ 出现/ 位置/ SOGPartition/ (/ P/ =/ {/ p/ (/ 1/ )/ ,/ p/ (/ 2/ )/ ,/ …/ ,/ p/ (/ r/ )/ }/ ,/ T/ =/ t1t2/ …/ tn/ )/ Preprocessing/ :/ 1/ ./ m/ ←/ minp/ ∈/ P/ |/ p/ |/ ,/ G/ ←/ w2/ ./ FOReachgramc1c2/ …/ cq/ ∈/ Σ/ qDO3/ ./ B/ [/ c1c2/ …/ cq/ ]/ ←/ 1w/ // / 每个/ q/ 元/ 字符串/ 对应/ 于/ 一个/ 4/ ./ ENDFOR5/ ./ FORk/ ←/ 1torDO6/ ./ g/ ←/ kmodG7/ ./ FOReachq/ -/ gramp/ (/ k/ )/ 8/ ./ settheg/ (/ m/ -/ q/ +/ 1/ )/ +/ i/ -/ 1bitofB/ [/ p/ (/ k/ )/ 9/ ./ ENDFOR10/ ./ ENDFOR11/ ./ Mask/ ←/ (/ 10m/ -/ q/ )/ G/ // / Mask/ 掩码/ 用来/ 检测/ 当前/ 状/ 12/ ./ Clear/ ←/ (/ 1m/ -/ q0/ )/ G/ // / Clear/ 掩码/ 用来/ 防止/ 位移/ 操/ Searching/ :/ 13/ ./ D/ ←/ 1w14/ ./ FORi/ ←/ 1ton/ -/ q/ +/ 1DO15/ ./ D/ ←/ (/ (/ D/ </ </ 1/ )/ Clear/ )/ |/ B/ [/ titi/ +/ 1/ …/ ti/ +/ q/ -/ 1/ ]/ 16/ ./ ifDMask/ ≠/ MaskDo17/ ./ checkcurrenttextpositionagainstpatternsinP18/ ./ ENDIF19/ ./ ENDFOR/ 为了/ 评价/ 模式/ 串/ 分组/ 规约/ 的/ 效果/ ,/ 定义/ “/ 校验/ 概率/ ”/ 为/ SOG/ 算法/ 中/ 进入/ 校验/ 过程/ 的/ 概率/ ./ 校验/ 概率/ 越大/ ,/ 算法/ 匹配/ 速度/ 越慢/ ./ 定理/ 3/ 证明/ ,/ 算法/ 3/ 的/ 校验/ 概率/ 小于/ 原始/ SOG/ 算法/ 的/ 校验/ 概率/ ,/ 因而/ 算法/ 3/ 的/ 匹配/ 速度/ 更快/ ./ 定理/ 3/ ./ 在/ 字符/ 独立/ 且/ 等/ 概率分布/ 的/ 前提/ 下/ ,/ SOG/ 算法/ 的/ 校验/ 概率/ 为/ p/ (/ r/ )/ =/ r/ 的/ 校验/ 概率/ 为/ p/ (/ r/ ,/ G/ )/ =/ 1/ -/ (/ 1/ -/ p/ (/ r/ // G/ )/ )/ G/ ./ 当/ G/ >/ 1/ 且/ q/ </ m/ 时/ ,/ p/ (/ r/ ,/ G/ )/ </ p/ (/ r/ )/ ./ 其中/ r/ =/ |/ P/ |/ 是/ 模式/ 串/ 的/ 个数/ ,/ σ/ =/ |/ Σ/ |/ 是/ 字符集/ 的/ 大小/ ./ 证明/ ./ SOG/ 算法/ 中/ ,/ 当且/ 仅/ 当/ 文本/ 中/ 的/ m/ -/ q/ +/ 1/ 个/ q/ 元/ 字符串/ 都/ 出现/ 在/ 模式/ 串中/ ,/ 才/ 需要/ 进行/ 校验/ ./ 1/ 个/ q/ 元/ 字符串/ 出现/ 在/ 模式/ 串中/ 对应/ 位置/ 的/ 概率/ 为/ r/ σ/ q/ ,/ m/ -/ q/ +/ 1/ 个/ q/ 元/ 字符串/ 出现/ 在/ 模式/ 串中/ 对应/ 位置/ 的/ 概率/ 为/ r/ 入/ 校验/ 过程/ 的/ 概率/ ./ 采用/ 模式/ 串/ 分组/ 规约/ 后/ ,/ 模式/ 串/ 集合/ 被/ 平均/ 分为/ G/ 组/ ,/ 每/ 一组/ 模式/ 串/ 的/ 个数/ 为/ r/ // G/ ,/ 因此/ ,/ 每/ 一组/ 的/ 校验/ 概率/ 为/ p/ (/ r/ // G/ )/ ./ 只要/ 任何/ 一组/ 需要/ 校验/ ,/ 算法/ 3/ 就/ 需要/ 进入/ 校验/ 过程/ ./ G/ 组中/ 有/ 任何/ 一组/ 需要/ 校验/ 的/ 概率/ 为/ 1/ -/ (/ 1/ -/ p/ (/ r/ // G/ )/ )/ G/ ,/ 此即/ 为/ 算法/ 3/ 的/ 校验/ 概率/ ./ 因为/ p/ (/ r/ ,/ G/ )/ =/ 1/ -/ (/ 1/ -/ p/ (/ r/ // G/ )/ )/ G/ ≈/ G/ ·/ p/ (/ r/ // G/ )/ =/ 1Gm/ -/ qp/ (/ r/ ,/ G/ )/ </ p/ (/ r/ )/ ./ 定理/ 4/ 是/ 对/ 算法/ 3/ 的/ 时间/ 复杂度/ 和/ 空间/ 复杂度/ 分析/ ./ 定理/ 4/ ./ 算法/ 3/ 预处理/ 阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ r/ (/ m/ -/ q/ +/ 1/ )/ )/ ,/ 搜索/ 阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ n/ (/ 1/ +/ p/ (/ r/ ,/ G/ )/ logr/ )/ )/ ,/ 空间/ 复杂度/ 为/ O/ (/ w/ |/ Σ/ |/ q/ )/ ./ 证明/ ./ 在/ 预处理/ 阶段/ ,/ 算法/ 需要/ 对/ 每个/ 模式/ 串中/ 的/ 每/ 一个/ q/ 元/ 字符串/ 设置/ 相应/ 的/ 比特/ 位/ ./ 模式/ 串/ 的/ 个数/ 为/ r/ ,/ 每个/ 模式/ 串/ 包含/ m/ -/ q/ +/ 1/ 个/ q/ 元/ 字符串/ ,/ 因此/ ,/ 预处理/ 阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ r/ (/ m/ -/ q/ +/ 1/ )/ )/ ./ 在/ 搜索/ 阶段/ ,/ 对位/ 向量/ 犇/ 的/ 更新/ 仅/ 需要/ 常数/ 时间/ (/ 算法/ 3/ 的/ 15/ 行/ )/ ./ 如果/ 可能/ 发生/ 匹配/ ,/ 那么/ 需要/ Page7/ 将/ 模式/ 串/ 集合/ P/ 与/ 当前/ 文本/ 位置/ 进行/ 比/ 对/ ,/ 检查/ 是否/ 真的/ 匹配/ ./ 进入/ 校验/ 阶段/ (/ 算法/ 3/ 的/ 17/ 行/ )/ 的/ 概率/ 为/ p/ (/ r/ ,/ G/ )/ ,/ 如果/ 采用/ 二分/ 搜索/ 进行/ 校验/ ,/ 那么/ 一次/ 校验/ 的/ 时间/ 复杂度/ 为/ O/ (/ logr/ )/ ./ 综上/ ,/ 搜索/ 阶段/ 的/ 时间/ 复杂度/ 为/ O/ (/ n/ (/ 1/ +/ p/ (/ r/ ,/ G/ )/ logr/ )/ )/ ./ 在/ 空间/ 复杂度/ 方面/ ,/ 位/ 图表/ B/ [/ ·/ ]/ 消耗/ 主要/ 的/ 存储空间/ ./ 位/ 图表/ B/ [/ ·/ ]/ 中/ 总共/ 有/ |/ Σ/ |/ q/ 种/ 可能/ 出现/ 的/ q/ 元/ 字符串/ ,/ 每个/ q/ 元/ 字符串/ 对应/ 于/ 一个/ 宽度/ 为/ w/ 的/ 位图/ ,/ 因此/ 空间/ 复杂度/ 为/ O/ (/ w/ |/ Σ/ |/ q/ )/ ./ 证毕/ ./ 表/ 2/ 是/ 算法/ 3/ 与/ 原始/ SOG/ 算法/ 的/ 比较/ ./ 可以/ 看出/ ,/ 算法/ 3/ 在/ 校验/ 概率/ 和/ 搜索/ 阶段/ 时间/ 复杂度/ 方面/ 优于/ 原始/ SOG/ 算法/ ,/ 两者/ 在/ 预处理/ 阶段/ 时间/ 复杂度/ 表/ 2/ 基于/ 模式/ 串/ 分组/ 规约/ 的/ SOG/ 算法/ 与/ 原始/ SOG/ 算法/ 的/ 校验/ 概率/ 、/ 时间/ 复杂度/ 和/ 空间/ 复杂度/ 比较/ 预处理/ 时间/ 原始/ SOG/ 算法/ p/ (/ r/ )/ =/ r/ 模式/ 串/ 分组/ 规约/ p/ (/ r/ ,/ G/ )/ =/ 1/ -/ (/ 1/ -/ p/ (/ r/ // G/ )/ )/ GO/ (/ r/ (/ m/ -/ q/ +/ 1/ )/ )/ O/ (/ n/ (/ 1/ +/ p/ (/ r/ ,/ G/ )/ logr/ )/ )/ O/ (/ w/ |/ Σ/ |/ q/ )/ 表/ 3/ 不同/ 机器字/ 位/ 宽/ 下/ 、/ 模式/ 串/ 分组/ 数/ 不/ 同时/ 进入/ 位/ 宽/ w3/ (/ 不/ 分组/ )/ 8/ (/ unsignedchar/ )/ 16/ (/ unsignedshort/ )/ 32/ (/ unsignedint/ )/ 64/ (/ unsignedlonglong/ )/ 217904542236.48128/ (/ SSEregister/ )/ 425941792027.424/ 实验/ 评估/ 本文/ 从/ 匹配/ 速度/ 和/ 存储空间/ 两个/ 方面/ ,/ 将/ SOGOPT/ 算法/ 与/ 原始/ 的/ SOG/ 算法/ [/ 11/ ]/ 以及/ 多种/ 串/ 匹配/ 算法/ AC/ [/ 1/ ]/ 、/ SBOM/ [/ 2/ ]/ 、/ KR/ [/ 3/ ]/ 、/ WM/ [/ 4/ ]/ 、/ DTM/ [/ 13/ ]/ 进行/ 了/ 对比/ 测试/ ./ 此外/ ,/ 本文/ 还/ 测试/ 了/ 窗口/ 选择/ 和/ 分组/ 规约/ 技术/ 对/ 算法/ 匹配/ 速度/ 的/ 影响/ ./ 4.1/ 实验/ 数据/ 和/ 环境/ 我们/ 从/ 骨干/ 路由器/ 上/ 采集/ 了/ 约/ 100GB/ 的/ URL/ 数据/ ,/ 对/ 采集/ 数据/ 去/ 重后/ ,/ 得到/ 约/ 2000/ 万条/ (/ 2.06/ GB/ )/ URL/ ,/ 将/ 这些/ URL/ 作为/ 待/ 扫描/ 文本/ ./ 我们/ 选取/ 两类/ URL/ 数据/ 作为/ 模式/ 串/ 集合/ :/ 一类/ 是/ 某/ 在线/ 应用/ 系统/ 的/ URL/ 规则/ ,/ 包括/ 约/ 17.5/ 万条/ URL/ ;/ 另一类/ 是从/ 上述/ 2000/ 万条/ URL/ 数据/ 中/ 随机/ 抽取/ 的/ URL/ 作为/ 模式/ 串/ ,/ 规模/ 分别/ 为/ 25/ 万/ 、/ 50/ 万/ 、/ 100/ 万/ 、/ 500/ 万/ 和/ 1000/ 万/ ,/ URL/ 长度/ 范围/ [/ 6/ ,/ 512/ ]/ ./ 相同/ ,/ 而/ 原始/ SOG/ 算法/ 的/ 空间/ 复杂度/ 较/ 低/ ./ 本文/ 对/ 模式/ 串/ 分组/ 归约/ 方法/ 的/ 效果/ 进行/ 了/ 测试/ ./ 我们/ 从/ 骨干/ 路由器/ 上/ 采集/ 了/ 约/ 100GB/ 的/ URL/ 数据/ ,/ 去/ 重后/ 得到/ 2.06/ GB/ 、/ 约/ 2000/ 万条/ URL/ ,/ 将/ 这些/ URL/ 作为/ 文本/ 进行/ 扫描/ ./ 用/ 某/ 在线/ 应用/ 系统/ 的/ 17.5/ 万/ URL/ 规则/ 作为/ 模式/ 串/ ./ 最短/ 模式/ 串/ 长度/ m/ =/ 6/ ,/ q/ -/ gram/ 参数/ q/ =/ 4/ ./ 在/ 不同/ 机器字/ 位/ 宽/ w/ 下/ ,/ 对/ 模式/ 串/ 集合/ 进行/ 分组/ 规约/ 后/ ,/ 算法/ 进入/ 校验/ 阶段/ 的/ 次数/ 对/ 比如/ 表/ 3/ 所示/ ./ 测试/ 结果表明/ ,/ 随着/ 机器字/ 位/ 宽/ w/ 的/ 增大/ ,/ 分组/ 数/ 增多/ ,/ 校验/ 次数/ 显著/ 降低/ ./ 当位/ 宽/ w/ 达到/ 128/ 时/ ,/ 校验/ 次数/ 已/ 降低/ 到/ 不/ 分组/ 时/ 的/ 27.42/ %/ ./ 实验/ 的/ 软硬件/ 环境/ 如下/ ./ CPU/ 为/ IntelXeonE5520/ ,/ 2.27/ GHz/ ,/ 2/ 路/ 4/ 核/ ;/ 内存/ 为/ 8GB/ ;/ Cache/ 为/ 32KBL1/ 数据/ Cache/ ,/ 32KBL1/ 指令/ Cache/ ,/ 256KBL2Cache/ ,/ 8MB/ 共享/ L3Cache/ ;/ 操作系统/ 为/ Windows7Ultimate/ ,/ 64/ 位/ ;/ 编译/ 平台/ 为/ VisualStudio2010/ ./ 算法/ 均/ 用/ C++/ 实现/ 并/ 单线程/ 执行/ ./ 4.2/ 实验/ 结果/ 和/ 分析/ (/ 1/ )/ 匹配/ 速度/ 比较/ SOGOPT/ 算法/ 与/ SOG/ 、/ AC/ 、/ WM/ 、/ SBOM/ 、/ KR/ 、/ DTM/ 等/ 算法/ 的/ 匹配/ 速度/ 对/ 比如/ 图/ 1/ ~/ 图/ 4/ 所示/ ./ 表/ 4/ 是/ 更/ 完整/ 详细/ 的/ 测试/ 结果/ ./ 从图/ 1/ ~/ 图/ 4/ 中/ 可以/ 看出/ ,/ SOGOPT/ 是/ 最快/ 的/ 算法/ ,/ 且/ 优势/ 非常明显/ ./ 无论是/ 17.5/ 万/ 的/ 在线/ 系统/ URL/ 规则/ 集/ ,/ 还是/ 更/ 大规模/ 的/ URL/ 规则/ 集/ ,/ SOGOPT/ 算法/ 都/ 表现/ 优异/ ./ 随着/ URL/ 规则/ 集/ 的/ 增大/ ,/ SOGOPT/ 算法/ 相对/ 于/ 其它/ 算法/ 的/ 优势/ 越来越/ 明显/ ./ 当/ 模式/ 串/ 规模/ 增大/ 到/ 100/ 万时/ ,/ SOGOPT/ 算法/ 的/ 匹配/ 速度/ 是/ 其它/ 算法/ 的/ 3/ ~/ 4/ 倍/ ./ 值得注意/ 的/ 是/ ,/ 在/ 17.5/ 万/ URL/ 规则/ 集上/ ,/ 尽管/ AC/ 算法/ 的/ 匹配/ 速度/ 较/ 快/ ,/ 与/ SOGOPT/ 算法/ 的/ 差距/ 较/ 小/ ,/ 但/ AC/ 算法/ 消耗/ 的/ 内存/ 超过/ 5GB/ ./ 当/ URL/ 规模/ 增大/ 到/ 25/ 万时/ ,/ AC/ 算法/ 由于/ 无法/ 申请/ 到/ 足够/ 内存/ 而/ 停止/ 运行/ 了/ ./ 我们/ 还/ 测试/ 了/ SOGOPT/ 算法/ 在/ 500/ 万/ 和/ 1000/ 万/ URL/ 规则/ 集上/ 的/ 性能/ (/ 表/ 4/ )/ ./ SOGOPT/ 算法/ 的/ 匹配/ 速度/ 在/ 10MB/ // s/ ~/ 20MB/ // s/ ,/ 而/ 其它/ 算法/ 的/ 匹配/ 速度/ 均/ 低于/ 1MB/ // s/ ./ Page8/ 图/ 1/ 串/ 匹配/ 算法/ 匹配/ 速度/ 对比/ (/ 17.5/ 万条/ URL/ 图/ 2/ 串/ 匹配/ 算法/ 匹配/ 速度/ 对比/ (/ 25/ 万条/ URL/ 模式/ 串/ ,/ 图/ 3/ 串/ 匹配/ 算法/ 匹配/ 速度/ 对比/ (/ 50/ 万条/ URL/ 模式/ 串/ ,/ 图/ 4/ 串/ 匹配/ 算法/ 匹配/ 速度/ 对比/ (/ 100/ 万条/ URL/ 模式/ 串/ ,/ (/ 2/ )/ 内存/ 用量/ 比较/ SOGOPT/ 算法/ 与/ SOG/ 、/ AC/ 、/ WM/ 、/ SBOM/ 、/ KR/ 、/ DTM/ 等/ 算法/ 的/ 内存/ 用量/ 对/ 比如/ 表/ 4/ 所示/ ./ 在/ 内存/ 用量/ 方面/ ,/ 经典/ 的/ AC/ 算法/ 消耗/ 的/ 内存/ 最大/ ,/ SOGOPT/ 算法/ 次之/ ./ 1000/ 万/ URL/ 规则/ 时/ ,/ SOGOPT/ 算法/ 的/ 内存/ 使用量/ 为/ 1946MB/ ,/ 其中/ 包括/ 模式/ 串/ 本身/ 占用/ 的/ 1266MB/ 存储空间/ ./ 算法/ 实际/ 使用/ 的/ 内存/ 为/ 680MB/ ,/ 控制/ 在/ 合理/ 的/ 范围/ 之内/ ,/ 可以/ 满足/ 实际/ 工程/ 应用/ 的/ 要求/ ./ 随着/ URL/ 规模/ 的/ 增大/ ,/ SOGOPT/ 算法/ 的/ 内存/ 使用量/ 会/ 比较/ 平稳/ 地/ 上升/ ./ (/ 3/ )/ 窗口/ 选择/ 和/ 分组/ 规约/ 对/ 算法/ 匹配/ 速度/ 的/ 影响/ 我们/ 测试/ 了/ 窗口/ 选择/ 和/ 分组/ 规约/ 技术/ 对/ 算法/ 匹配/ 速度/ 的/ 影响/ ,/ 如图/ 5/ ~/ 图/ 8/ 所示/ ./ 其中/ ,/ SOG/ -/ W/ 表示/ 在/ SOG/ 算法/ 基础/ 上/ 运用/ 窗口/ 选择/ 技术/ ,/ SOG/ -/ W/ -/ P/ (/ 即/ SOGOPT/ )/ 表示/ 在/ SOG/ 算法/ 基础/ 上/ 运用/ 窗口/ 选择/ 和/ 分组/ 规约/ 技术/ ./ WM/ -/ W/ 和/ KR/ -/ W/ 分别/ 是/ WM/ 算法/ 和/ KR/ 算法/ 采用/ 窗口/ 选择/ 技术/ 后/ 的/ 优化/ 算法/ ./ 从/ 实验/ 结果/ 可以/ 看出/ ,/ SOG/ -/ W/ 、/ WM/ -/ W/ 和/ KR/ -/ W/ 的/ 匹配/ 速度/ 均/ 快/ 于/ 相应/ 的/ 原始/ 算法/ ,/ 验证/ 了/ 窗口/ 选择/ 方法/ 的/ 有效性/ ./ SOG/ -/ W/ -/ P/ 算法/ 快于/ SOG/ 和/ SOG/ -/ W/ 算法/ ,/ 验证/ 了/ 分组/ 规约/ 方法/ 的/ 有效性/ ./ 总体/ 来看/ ,/ 窗口/ 选择/ 方法/ 对/ 匹配/ 速度/ 的/ 提升/ 效果/ 更加/ 明显/ ./ 图/ 5/ 窗口/ 选择/ 和/ 分组/ 规约/ 对/ 算法/ 匹配/ 速度/ 的/ 影响/ 图/ 6/ 窗口/ 选择/ 和/ 分组/ 规约/ 对/ 算法/ 匹配/ 速度/ 的/ 影响/ Page9/ 图/ 7/ 窗口/ 选择/ 和/ 分组/ 规约/ 对/ 算法/ 匹配/ 速度/ 的/ 影响/ (/ 50/ 万条/ URL/ 模式/ 串/ ,/ 最短/ 模式/ 串/ 长度/ 为/ 6/ ./ WM/ 算法/ 因/ 匹配/ 速度/ 太慢/ (/ </ 1MB/ // s/ )/ 而/ 没有/ 实验/ 结果/ )/ 表/ 4SOGOPT/ 与/ 多种/ 串/ 匹配/ 算法/ 在/ URL/ 模式/ 串上/ 的/ 匹配/ 速度/ 、/ 内存/ 用量/ 、/ 预处理/ 时间/ 比较/ (/ 当/ URL/ 规模/ 达到/ 25/ 万时/ ,/ AC/ 算法/ 由于/ 消耗/ 过多/ 的/ 内存/ (/ 超过/ 8GB/ )/ 而/ 无法/ 运行/ 出/ 结果/ ./ 表中/ 其它/ 标示/ “/ —/ ”/ 的/ 测试/ 项/ 是因为/ 算法/ 匹配/ 速度/ 太慢/ (/ </ 1MB/ // s/ )/ 而/ 没有/ 实验/ 结果/ )/ 17.5/ 万/ URL/ 模式/ 串/ (/ 某/ 在线/ 应用/ 系统/ 的/ 规则/ )/ 25/ 万/ URL/ 模式/ 串/ 50/ 万/ URL/ 模式/ 串/ 100/ 万/ URL/ 模式/ 串/ 500/ 万/ URL/ 模式/ 串/ 1000/ 万/ URL/ 模式/ 串/ 5/ 总结/ 多/ 模式/ 串/ 匹配/ 是/ 计算机科学/ 中/ 的/ 一个/ 经典/ 问题/ ./ 对/ 大量/ 有害/ 的/ URL/ 进行/ 过滤/ ,/ 是/ 目前/ 网络安全/ 应用/ 系统/ 中/ 所/ 亟需/ 的/ 关键技术/ ./ 本文/ 设计/ 了/ 一种/ 适合/ 于/ 大规模/ URL/ 过滤/ 的/ 多/ 模式/ 串/ 匹配/ 算法/ —/ —/ —/ 图/ 8/ 窗口/ 选择/ 和/ 分组/ 规约/ 对/ 算法/ 匹配/ 速度/ 的/ 影响/ (/ 100/ 万条/ URL/ 模式/ 串/ ,/ 最短/ 模式/ 串/ 长度/ 为/ 6/ ./ WM/ 和/ KR/ 算法/ 因/ 匹配/ 速度/ 太慢/ (/ </ 1MB/ // s/ )/ 而/ 没有/ 实验/ 结果/ )/ SOGOPT/ ./ 该/ 算法/ 在/ 经典/ 的/ SOG/ 算法/ 基础/ 上/ ,/ 针对/ URL/ 规则/ 的/ 特点/ ,/ 提出/ 了/ 最优/ 窗口/ 选择/ 和/ 模式/ 串/ 分组/ 规约/ 这/ 两种/ 优化/ 技术/ ,/ 大幅度提高/ 了/ 算法/ 的/ 匹配/ 速度/ ,/ 在/ 大规模/ URL/ 规则/ 集上/ 效果/ 尤其/ 显著/ ,/ 非常适合/ 于/ 大规模/ URL/ 实时/ 在线/ 匹配/ 的/ 应用环境/ ./ 经典/ 串/ 匹配/ 算法/ 设计/ ,/ 主要/ 基于/ “/ 模式/ 串/ 和/ 文本/ 字符/ 服从/ 均匀分布/ ”/ [/ 17/ ]/ 的/ 假设/ ,/ 并且/ 主要/ 在/ 随机数/ Page10/ 据/ 集上/ 进行/ 评测/ ,/ 然而/ URL/ 等/ 真实/ 模式/ 串/ 并/ 不/ 满足/ 上述/ 条件/ ./ 为了/ 更好/ 地/ 反映/ 模式/ 串/ 和/ 文本/ 的/ 概率/ 特征/ 对/ 匹配/ 速度/ 的/ 影响/ ,/ 本文/ 的/ 下/ 一步/ 工作/ 将/ 考虑/ 研究/ 基于/ 概率分布/ 的/ 串/ 匹配/ 算法/ ./ 

