Page1/ 同构/ DVS/ 集群/ 中/ 基于/ 自/ 适应/ 阈值/ 的/ 并行任务/ 节能/ 调度/ 算法/ 刘伟/ 1/ )/ ,/ 2/ )/ ,/ 3/ )/ ,/ 4/ )/ 尹行/ 1/ )/ 段玉光/ 1/ )/ 杜薇/ 1/ )/ ,/ 2/ )/ ,/ 3/ )/ 王伟/ 3/ )/ ,/ 4/ )/ 曾国荪/ 3/ )/ ,/ 4/ )/ 1/ )/ (/ 武汉理工大学/ 计算机科学/ 与/ 技术/ 学院/ 武汉/ 430063/ )/ 2/ )/ (/ 武汉大学/ 软件工程/ 国家/ 重点/ 实验室/ 武汉/ 430072/ )/ 3/ )/ (/ 同济大学/ 嵌入式/ 系统/ 与/ 服务/ 计算/ 教育部/ 重点/ 实验室/ 上海/ 200092/ )/ 4/ )/ (/ 同济大学/ 计算机科学/ 与/ 技术/ 系/ 上海/ 200092/ )/ 摘要/ 目前/ ,/ 高/ 能效/ 的/ 并行/ 任务调度/ 算法/ 设计/ 已经/ 成为/ 集群/ 系统/ 的/ 研究/ 热点/ ./ 现有/ 基于/ 复制/ 的/ 节能/ 调度/ 算法/ 主要/ 利用/ 阈值/ 平衡/ 系统/ 的/ 性能/ 和/ 能耗/ ,/ 但/ 随机/ 设置/ 的/ 阈值/ 无法/ 根据/ 性能需求/ 和/ 环境参数/ 等/ 特征/ 自动/ 调节/ ,/ 导致/ 调度/ 算法/ 存在/ 一定/ 的/ 局限性/ ./ 文中/ 提出/ 一种/ 面向/ 同构/ 集群/ 系统/ 的/ 两/ 阶段/ 节能/ 调度/ 算法/ ATES/ (/ AdaptiveThreshold/ -/ basedEnergy/ -/ efficientScheduling/ )/ ./ 首先/ ,/ 设计/ 一种/ 基于/ 自/ 适应/ 阈值/ 的/ 任务/ 复制/ 策略/ ,/ 该/ 策略/ 能够/ 自动/ 计算/ 最佳/ 阈值/ ,/ 利用/ 该/ 阈值/ 获取/ 近似/ 最优/ 的/ 任务/ 分组/ ./ 然后/ ,/ 将/ 各/ 分组/ 任务调度/ 到/ 支持/ DVS/ 的/ 处理器/ 上/ ,/ 并/ 充分利用/ 任务/ 之间/ 的/ 空闲/ 时间/ 降低/ 处理器/ 电压/ ./ 该/ 算法/ 将/ 任务/ 复制/ 策略/ 与/ 电压/ 调节/ 技术/ 有机/ 结合/ ,/ 在/ 调度/ 过程/ 中/ 能够/ 自动/ 调整/ 阈值/ ,/ 有效/ 提高/ 调度/ 算法/ 的/ 能效/ ./ 为了/ 验证/ ATES/ 算法/ 的/ 合理性/ ,/ 通过/ 典型/ 应用/ 进行/ 仿真/ 实验/ ,/ 并/ 与/ 常见/ 任务调度/ 算法/ 进行/ 比较/ ,/ 结果表明/ ATES/ 算法/ 能够/ 更好/ 地/ 实现/ 性能/ 和/ 能耗/ 之间/ 的/ 平衡/ ./ 关键词/ 高性能/ 集群/ ;/ 动态/ 电压/ 调节/ ;/ 任务/ 复制/ ;/ 自/ 适应/ 阈值/ ;/ 调度/ 算法/ 1/ 引言/ 传统/ 集群/ 计算/ 的/ 研究/ 主要/ 侧重于/ 提高/ 系统/ 性能/ ./ 近年来/ ,/ 由于/ 微处理器/ 、/ 通信/ 设备/ 和/ 存储设备/ 的/ 高功耗/ ,/ 集群/ 系统/ 消耗/ 了/ 巨大/ 的/ 能量/ ,/ 研究/ 重点/ 开始/ 转向/ 高性能/ 集群/ 的/ 能耗/ 管理/ 问题/ ./ 据统计/ ,/ 2008/ 年/ 服务/ 于/ 互联网/ 的/ 路由器/ 、/ 服务器/ 、/ 交换机/ 和/ 数据中心/ 等/ 各种/ 设备/ 总共/ 消耗/ 8680/ 亿度/ 电/ ,/ 占/ 全球/ 总/ 耗电量/ 的/ 5.3/ %/ [/ 1/ ]/ ./ 按照/ 目前/ 的/ 增长/ 趋势/ ,/ 到/ 2025/ 年/ ,/ IT/ 行业/ 平均/ 能耗/ 将/ 达到/ 2008/ 年/ 的/ 5/ 倍/ [/ 2/ ]/ ./ 很/ 显然/ ,/ 高性能/ 和/ 低能耗/ 是/ 集群/ 系统/ 的/ 两个/ 重要/ 需求/ [/ 3/ ]/ ,/ 忽略/ 其中/ 任何/ 一个/ 需求/ 都/ 是/ 不合理/ 的/ [/ 4/ ]/ ./ 目前/ ,/ 基于/ 任务/ 复制/ 的/ 调度/ 算法/ 主要/ 利用/ 处理器/ 上/ 的/ 空闲/ 时间/ 片/ ,/ 有/ 选择地/ 复制/ 前驱/ 任务/ ,/ 将父/ 任务/ 和子/ 任务分配/ 到/ 同一个/ 处理器/ 上/ ,/ 缩短/ 调度/ 长度/ ./ 研究/ 表明/ ,/ 基于/ 任务/ 复制/ 的/ 调度/ 策略/ 能/ 有效/ 改善/ 并行任务/ 的/ 性能/ [/ 5/ -/ 7/ ]/ ,/ 特别/ 是/ 对于/ 通信/ 密集型/ 并行/ 应用/ ,/ 能够/ 减少/ 大量/ 通信/ 时间/ ./ 动态/ 电压/ 调节/ DVS/ (/ DynamicVoltageScaling/ )/ 技术/ 是/ 一种/ 新型/ 硬件/ 节能/ 机制/ ,/ 其/ 基本/ 思想/ 是/ 在/ 不/ 影响/ 处理器/ 正常/ 运行/ 情况/ 下降/ 低电压/ 和/ 频率/ ,/ 使得/ 处理器/ 不总以/ 最高/ 电压/ 工作/ ,/ 从而/ 降低/ 能耗/ ./ 在/ 并行任务/ 中/ 采用/ DVS/ 技术/ 能够/ 在/ 不/ 影响/ 性能/ 的/ 前提/ 下/ 降低/ 系统/ 能耗/ ./ 任务/ 复制/ 策略/ 和/ 电压/ 调节/ 技术/ 一直/ 被/ 分开/ 研究/ ,/ 二者/ 并/ 没有/ 有机/ 结合/ ./ 其中/ ,/ 任务/ 复制/ 策略/ 改善/ 系统/ 性能/ ,/ 电压/ 调节/ 技术/ 降低/ 处理器/ 能耗/ ./ 然而/ ,/ 传统/ 的/ 任务/ 复制/ 算法/ 通过/ 尽可能/ 地/ 复制/ 任务/ ,/ 缩短/ 调度/ 长度/ ,/ 忽略/ 了/ 复制/ 任务/ 本身/ 带来/ 的/ 额外/ 能耗/ 开销/ ./ 尽管/ 有些/ 算法/ 通过/ 阈值/ 控制/ 复制/ 粒度/ 以/ 改善/ 能效/ ,/ 但/ 固定/ 阈值/ 存在/ 一定/ 的/ 局限性/ [/ 1/ ,/ 4/ ]/ ./ 此外/ ,/ 越来越/ 多/ 的/ 研究/ 表明/ ,/ 在/ 集群/ 系统/ 中/ 除了/ 处理器/ 外/ ,/ 通信/ 设备/ 同样/ 会/ 产生/ 大量/ 能耗/ ./ 特别/ 是/ 随着/ 下一代/ 高速/ 互联网络/ 的/ 出现/ ,/ 网络通信/ 的/ 高能耗/ 问题/ 变得/ 更加/ 严峻/ ./ 针对/ 上述/ 问题/ ,/ 本文/ 提出/ 一种/ 新/ 的/ 并行/ 任务调度/ 策略/ —/ —/ —/ 基于/ 自/ 适应/ 阈值/ 的/ 并行任务/ 节能/ 调度/ 算法/ ATES/ (/ AdaptiveThreshold/ -/ basedEnergy/ -/ efficientSchedulingalgorithm/ )/ ,/ 将/ 任务/ 复制/ 策略/ 和/ 动态/ 电压/ 技术/ 有机/ 结合/ ,/ 在/ 保证/ 性能/ 的/ 前提/ 下降/ 低能耗/ ./ ATES/ 算法/ 利用/ 阈值/ 控制/ 任务/ 的/ 复制/ ,/ 即/ 选择性/ 地/ 复制/ 任务/ 的/ 最佳/ 前驱/ ,/ 以/ 平衡/ 性能/ 和/ 能耗/ ./ 本文/ 提出/ 的/ 调度/ 策略/ 与/ 已有/ 研究/ 存在/ 本质区别/ ./ 首先/ ,/ ATES/ 算法/ 可以/ 根据/ 调度/ 环境/ 和/ 性能需求/ 自动/ 计算/ 阈值/ ,/ 根据/ 最佳/ 阈值/ 获取/ 近似/ 最优/ 的/ 任务/ 分组/ ,/ 进而/ 节省/ 能耗/ ./ 其次/ ,/ ATES/ 算法/ 能够/ 根据/ 任务/ 之间/ 的/ 依赖/ 关系/ 寻找/ 空闲/ 时间/ ,/ 然后/ 利用/ DVS/ 技术/ 调整/ 处理器/ 频率/ 和/ 电压/ ,/ 以/ 节省/ 计算/ 能耗/ ./ 最后/ ,/ ATES/ 算法/ 同时/ 考虑/ 了/ 计算/ 能耗/ 和/ 通信/ 能耗/ ./ 本文/ 第/ 2/ 节/ 介绍/ 相关/ 工作/ ;/ 第/ 3/ 节/ 分析/ 系统/ 模型/ ,/ 包括/ 集群/ 模型/ 、/ 任务模型/ 和/ 能耗/ 模型/ ;/ 第/ 4/ 节/ 详细描述/ 和/ 分析/ ATES/ 算法/ ;/ 第/ 5/ 节/ 给出/ 实验/ 环境/ 以及/ 仿真/ 结果/ ;/ 第/ 6/ 节/ 得出结论/ 并/ 展望未来/ 工作/ ./ 2/ 相关/ 工作/ 近年来/ ,/ 国内外/ 学者/ 在/ 集群/ 系统/ 的/ 并行/ 任务调度/ 方面/ 取得/ 了/ 一定/ 的/ 研究成果/ ./ Darbha/ 等/ 人/ [/ 5/ ]/ 提出/ 一种/ 基于/ 任务/ 复制/ 的/ 并行/ 任务调度/ 算法/ TDS/ (/ TaskDuplicationScheduling/ )/ ,/ 利用/ 处理器/ 的/ 空闲/ 时间/ 复/ Page3/ 制/ 关键/ 路径/ 的/ 前驱/ 任务/ ,/ 减少/ 传输/ 延迟/ ,/ 提高/ 系统/ 性能/ ./ 然而/ ,/ TDS/ 提高/ 系统/ 性能/ 的/ 同时/ 却/ 增加/ 了/ 计算/ 能耗/ ,/ 因为/ 任务/ 会/ 复制到/ 多个/ 处理器/ 重复/ 执行/ ./ 为了/ 解决/ TDS/ 算法/ 的/ 问题/ ,/ Zong/ 等/ 人/ [/ 4/ ]/ 提出/ 了/ 两种/ 节能/ 调度/ 策略/ —/ —/ —/ EAD/ (/ Energy/ -/ AwareDuplication/ )/ 调度/ 算法/ 和/ PEBD/ (/ Performance/ -/ EnergyBalancedDuplication/ )/ 调度/ 算法/ ,/ 通过/ 设定/ 阈值/ 控制/ 前驱/ 任务/ 的/ 复制/ ,/ 以/ 平衡/ 系统/ 性能/ 和/ 能耗/ ./ 山东大学/ 的/ 李新/ 等/ 人/ [/ 8/ ]/ 提出/ 一种/ 处理器/ 合并/ 的/ 优化/ 算法/ PRO/ (/ ProcessorReductionOptimizing/ )/ ,/ 根据/ 任务/ 最早/ 开始/ 时间/ 和/ 最早/ 结束/ 时间/ 查找/ 处理器/ 空隙/ ,/ 将/ 轻/ 负载/ 处理器/ 上/ 的/ 任务/ 重新分配/ 到/ 其它/ 处理器/ 上/ ,/ 进行/ 处理器/ 的/ 合并/ ,/ 降低/ 计算/ 能耗/ ./ 但是/ 以上/ 算法/ 均/ 无法/ 根据/ 性能需求/ 和/ 系统/ 参数/ 自动/ 调整/ 阈值/ ,/ 存在/ 一定/ 的/ 局限性/ ./ 在/ 高性能/ 集群/ 中/ ,/ 基于/ 动态/ 电压/ 调节/ 的/ 调度/ 策略/ 研究/ 已经/ 受到/ 了/ 众多/ 学者/ 的/ 关注/ ./ Lee/ 等/ 人/ [/ 9/ -/ 12/ ]/ 针对/ 异构/ 集群/ 提出/ 基于/ 动态/ 电压/ 调节/ 技术/ 的/ 能效/ 调度/ 算法/ ,/ 以/ 平衡/ 系统/ 性能/ 和/ 能耗/ ./ MaYan/ 等/ 人/ [/ 13/ ]/ 提出/ 基于/ DVS/ 的/ 节能/ 调度/ 算法/ ,/ 利用/ 整数/ 线性规划/ ILP/ (/ IntegerLinearProgramming/ )/ 选择/ 并行任务/ 的/ 执行/ 频率/ 或/ 电压/ ,/ 优化/ 处理器/ 能耗/ ./ Wang/ 等/ 人/ [/ 14/ -/ 15/ ]/ 提出/ 的/ 高/ 能效/ 调度/ 算法/ ,/ 通过/ 寻找/ 并行/ 应用/ 中非/ 关键/ 路径/ 上/ 的/ 空闲/ 时间/ ,/ 能够/ 在/ 不/ 增加/ 执行/ 时间/ 的/ 前提/ 下/ ,/ 有效/ 减少/ 处理器/ 的/ 计算/ 能耗/ ./ 然而/ ,/ 基于/ 动态/ 电压/ 调节/ 的/ 调度/ 算法/ 只/ 考虑/ 了/ 处理器/ 的/ 计算/ 能耗/ ,/ 忽略/ 了/ 网络通信/ 能耗/ 的/ 影响/ ,/ 甚至/ 完全/ 忽视/ 了/ 处理器/ 的/ 空闲/ 能耗/ ./ Ruan/ 等/ 人/ [/ 16/ ]/ 提出/ 的/ 调度/ 算法/ 能/ 有效/ 降低/ 系统/ 能耗/ ,/ 但是/ 性能/ 损失/ 较大/ ./ 国防科学技术大学/ 的/ 林一松/ 等/ 人/ [/ 17/ ]/ 和/ 王/ 桂林/ 等/ 人/ [/ 18/ ]/ 提出/ 针对/ CPU/ -/ GPU/ 异构/ 集群/ 的/ 能量/ 优化/ 算法/ ,/ 旨在/ 降低/ 系统/ 的/ 整体/ 能耗/ ./ 国防科学技术大学/ 的/ 朱晓敏/ 等/ 人/ [/ 19/ ]/ 提出/ 一种/ 弹性/ 节能/ 调度/ 策略/ ,/ 用于/ 动态/ 调度/ 异构计算/ 系统/ 中非/ 周期/ 独立/ 任务/ ./ 软件/ 学报/ 在/ 2012/ 年/ 第/ 2/ 期/ 出版/ 了/ 《/ 高/ 能效/ 软件设计/ 、/ 分析/ 和/ 实现/ 方法/ 》/ 专刊/ [/ 20/ ]/ ,/ 介绍/ 了/ 国内/ 相关/ 研究成果/ ./ 目前/ ,/ 绿色/ 网络/ 的/ 研究/ 已经/ 取得/ 了/ 一定/ 成果/ ./ 中国科学院计算技术研究所/ 的/ 张法/ 等/ 人/ [/ 21/ ]/ 从/ 全局/ 角度/ 研究/ 网络/ 能耗/ 问题/ ,/ 提出/ 优化/ 的/ 节能/ 路由/ 算法/ ./ 清华大学/ 的/ 林/ 闯/ 团队/ [/ 2/ ]/ 将/ 能量/ 看成/ 一种/ 系统资源/ ,/ 从/ 资源分配/ 角度/ 对/ 绿色/ 网络/ 的/ 评价/ 机制/ 进行/ 深入分析/ ,/ 为/ 构建/ 绿色/ 网络/ 的/ 评价/ 体系/ 奠定/ 了/ 基础/ ./ 尽管如此/ ,/ 对于/ 诸如/ GigabitEthernet/ 、/ Infiniband/ 、/ Myrinet/ 和/ QsNetII/ 等/ 常用/ 的/ 高速/ 互连/ 网络/ ,/ 功耗/ 管理/ 技术/ 仍/ 有待/ 深入研究/ ./ 3/ 系统/ 模型/ 本/ 节/ 给出/ 同构/ 集群/ 模型/ 、/ 并行任务/ 模型/ 和/ 系统/ 能耗/ 模型/ ,/ 其中/ 能耗/ 模型/ 包括/ 计算/ 能耗/ 和/ 通信/ 能耗/ 两/ 部分/ ./ 表/ 1/ 列出/ 了/ 本文/ 研究/ 中/ 主要/ 用到/ 的/ 参数/ 及/ 定义/ ./ 参数/ viticcictivik/ τ/ ikpred/ (/ vi/ )/ 任务/ vi/ 的/ 前驱/ 任务/ 集/ succ/ (/ vi/ )/ 任务/ vi/ 的/ 后继/ 任务/ 集/ pjVkfkPNhighest/ 处理器/ 的/ 最高/ 功耗/ Vhighest/ 处理器/ 的/ 最高/ 执行/ 电压/ fhighest/ 处理器/ 的/ 最高/ 执行/ 频率/ PL/ 网络通信/ 功耗/ eijcij/ |/ V/ |/ 有/ 向/ 无/ 环图/ 任务/ 总数/ |/ E/ |/ hrEST/ (/ vi/ )/ 任务/ vi/ 的/ 最早/ 开始/ 时间/ ECT/ (/ vi/ )/ 任务/ vi/ 的/ 最早/ 完成/ 时间/ FP/ (/ vi/ )/ 任务/ vi/ 的/ 最佳/ 前驱/ LAST/ (/ vi/ )/ 任务/ vi/ 的/ 最迟/ 允许/ 开始/ 时间/ LACT/ (/ vi/ )/ 任务/ vi/ 的/ 最迟/ 允许/ 完成/ 时间/ 3.1/ 同构/ 集群/ 模型/ 同构/ 集群/ 系统/ 是/ 高速/ 网络/ Link/ 将/ 一系列/ 计算/ 节点/ P/ =/ {/ p1/ ,/ p2/ ,/ …/ ,/ pm/ }/ 连接/ 组成/ 的/ 分布式系统/ ./ 由于/ 本文/ 研究/ 的/ 集群/ 系统/ 支持/ 动态/ 电压/ 调节/ 技术/ ,/ 假设/ 每个/ 处理器/ 都/ 有/ h/ 个/ 不同/ 的/ 电压/ 等级/ ,/ 可/ 表示/ 为/ p/ {/ V1/ ,/ V2/ ,/ …/ ,/ Vh/ }/ ,/ 其中/ V1/ ,/ V2/ ,/ …/ ,/ Vh/ 按/ 降序/ 排列/ ,/ 其/ 对应/ 的/ 频率/ 为/ {/ f1/ ,/ f2/ ,/ …/ ,/ fh/ }/ ./ 本文/ 主要/ 研究/ 同构/ 集群/ ,/ 处理器/ 节点/ 和/ 网络/ 互连/ 设备/ 都/ 是/ 同构/ 的/ ,/ 因此/ 集群/ 中/ 所有/ 节点/ 具有/ 相同/ 的/ 处理/ 能力/ ,/ 而且/ 任意/ 两个/ 节点/ 之间/ 的/ 传输/ 能力/ 相同/ ./ 3.2/ 并行任务/ 模型/ 具有/ 依赖/ 关系/ 的/ 任务/ 集/ 可以/ 抽象/ 为/ 一个/ 有/ 向/ 无/ 环图/ (/ DirectedAcyclicGraph/ ,/ DAG/ )/ ./ 一个/ DAG/ 可以/ 表示/ 为/ G/ (/ V/ ,/ E/ )/ ,/ 其中/ V/ =/ {/ v1/ ,/ v2/ ,/ …/ ,/ vn/ }/ 代表/ 任务/ 集/ ,/ E/ 表示/ 消息/ 集/ ./ 对于/ 集合/ V/ 中/ 的/ 每个/ 任务/ ,/ ti/ 是/ 任务/ vi/ 以/ 最高/ 电压/ 和/ 频率/ 执行/ 时/ 所/ 需/ 的/ 计算/ 时/ Page4/ 间/ ,/ cci/ 是/ 计算/ 周期/ ,/ 不随/ 处理器/ 电压/ 的/ 变化/ 而/ 变化/ ,/ 其中/ 1/ / i/ / n/ ./ 特别/ 地/ ,/ 当/ 一个/ 任务/ 具有/ 空闲/ 时间/ 时/ ,/ 这个/ 任务/ 可以/ 被/ 分为/ h/ 个/ 任务/ 块/ {/ vi1/ ,/ vi2/ ,/ …/ ,/ vih/ }/ ,/ 每个/ 任务/ 块/ vik/ 在/ 工作电压/ Vk/ 下/ 的/ 执行/ 时间/ 是/ τ/ ik/ ./ 此外/ ,/ 用/ eij/ =/ {/ vi/ ,/ vj/ }/ ∈/ E/ 表示/ 从/ 任务/ vi/ 传输/ 到/ vj/ 的/ 消息/ ,/ 而/ 传输/ 该/ 消息/ 所/ 需/ 的/ 时间/ 用/ cij/ 表示/ ./ 在/ 实际/ 网络/ 中/ ,/ 通信/ 时间/ cij/ 表示/ 数据/ 从/ 发送到/ 被/ 接收/ 的/ 时间/ 间隔/ ,/ 主要/ 由/ 传输/ 时间/ 和/ 延迟时间/ 组成/ ./ 用/ succ/ (/ vi/ )/ 表示/ 任务/ vi/ 的/ 后继/ 节点/ 集合/ ,/ pred/ (/ vi/ )/ 表示/ 任务/ vi/ 的/ 前驱/ 节点/ 集合/ ./ 对于/ 一个/ DAG/ ,/ 如果/ 某个/ 任务/ 没有/ 前驱/ 节点/ ,/ 则/ 称/ 该/ 任务/ 为/ 入口/ 任务/ ,/ 如果/ 某个/ 任务/ 没有/ 后继/ 节点/ ,/ 则/ 称/ 该/ 任务/ 为/ 出口/ 任务/ ./ 本文/ 假设/ 任一/ DAG/ 仅/ 具有/ 一个/ 入口/ 任务/ 和/ 一个/ 出口/ 任务/ ,/ 这样/ 的/ 假设/ 是/ 合理/ 的/ ./ 如果/ 某个/ DAG/ 有/ 多个/ 入口/ 任务/ 或/ 多个/ 出口/ 任务/ ,/ 则/ 可以/ 利用/ 若干个/ 通信/ 代价/ 为/ 零/ 的/ 边/ 将/ 所有/ 入口/ 任务/ 或/ 出口/ 任务/ 连接/ 到/ 一个/ 计算/ 代价/ 为/ 零/ 的/ 虚拟/ 任务/ ,/ 从而/ 构造/ 出/ 只有/ 一个/ 入口/ 任务/ 和/ 一个/ 出口/ 任务/ 的/ DAG/ ./ 3.3/ 系统/ 能耗/ 模型/ 3.3/ ./ 1/ 计算/ 能耗/ CPU/ 主要/ 包含/ 活动/ 功耗/ 和/ 空闲/ 功耗/ ,/ 动态/ 功耗/ 在/ 处理器/ 活动/ 功耗/ 中所/ 占/ 比例/ 最大/ ,/ 根据/ CMOS/ 逻辑电路/ 中/ 的/ 功耗/ 原理/ ,/ 动态/ 功耗/ Psw/ 可/ 表示/ 为/ 其中/ ,/ α/ 代表/ 切换/ 速率/ ;/ CL/ 表示/ 负载/ 电容/ ;/ Vdd/ 代表/ 供电/ 电压/ ;/ fclk/ 表示/ 时钟/ 频率/ ./ 给定/ 处理器/ 的/ 最大/ 功耗/ ,/ 最大/ 电压/ 以及/ 最高/ 频率/ ,/ 可以/ 利用/ 式/ (/ 1/ )/ 推导/ 出该/ 处理器/ 在/ 电压/ Vi/ 和/ 频率/ fi/ 下/ 的/ 活动/ 功耗/ :/ 则/ 所有/ 任务/ 的/ 总/ 活动/ 能耗/ 可以/ 通过/ 式/ (/ 3/ )/ 计算/ 得出/ :/ ENactive/ =/ ∑/ n/ 其中/ cti/ 代表/ 任务/ vi/ 副本/ 的/ 个数/ ./ 假设/ PNidle/ 是/ 处理器/ 的/ 空闲/ 功耗/ ,/ 即/ 处理器/ 不/ 执行/ 任务/ 时/ 的/ 功耗/ ,/ makespan/ 为/ 出口/ 任务/ 的/ 完成/ 时间/ ,/ 即/ 并行任务/ 的/ 调度/ 长度/ ,/ 则/ 所有/ 处理器/ 节点/ 的/ 空闲/ 能耗/ 表示/ 为/ ENidle/ =/ PNidle/ ·/ m/ ·/ makespan/ -/ ∑/ n/ 因此/ ,/ 处理器/ 的/ 总/ 能耗/ 根据/ 式/ (/ 3/ )/ 和/ (/ 4/ )/ 表示/ 为/ 3.3/ ./ 2/ 通信/ 能耗/ 同构/ 集群/ 中/ 互联网络/ 具有/ 相同/ 的/ 传输速率/ 和/ 通信/ 功耗/ ,/ 分配/ 到/ 相同/ 节点/ 的/ 两个/ 任务/ 之间/ 通信/ 时间/ 忽略不计/ ./ 用/ elij/ 表示/ 传输数据/ eij/ =/ (/ vi/ ,/ vj/ )/ ∈/ E/ 所/ 消耗/ 的/ 能量/ ,/ 则/ 其中/ PL/ 代表/ 网络/ 的/ 通信/ 功耗/ ./ 因此/ ,/ 网络/ 上/ 的/ 总/ 通信/ 能耗/ 可以/ 表示/ 为/ 其中/ 参数/ inij/ 的/ 定义/ 见式/ (/ 8/ )/ ./ inij/ =/ 0/ ,/ 如果/ 任务/ vi/ 和/ vj/ 被/ 调度/ 到/ 同一个/ 处理器/ 上/ 1/ ,/ {/ 否则/ 最后/ ,/ 整个/ 集群/ 系统/ 上/ 的/ 总/ 能耗/ 表示/ 为/ 4/ 并行任务/ 的/ 节能/ 调度/ 算法/ 4.1/ 算法/ 的/ 总体/ 结构/ 本文/ 提出/ 的/ 基于/ 自/ 适应/ 阈值/ 的/ 节能/ 调度/ 算法/ ATES/ ,/ 适用/ 于/ 支持/ 动态/ 电压/ 调节/ 的/ 同构/ 集群/ 系统/ ./ ATES/ 算法/ 的/ 总体/ 结构/ 如图/ 1/ 所示/ ,/ 可/ 分为/ 4/ 个/ 步骤/ :/ (/ 1/ )/ 获取/ 最佳/ 阈值/ ;/ (/ 2/ )/ 任务/ 分组/ ;/ (/ 3/ )/ 任务分配/ ;/ (/ 4/ )/ 动态/ 电压/ 调节/ ./ 首先/ ,/ ATES/ 算法/ 根据/ 性能需求/ 和/ 系统/ 参数/ 自动/ 计算/ 阈值/ ,/ 根据/ 得到/ 的/ 最佳/ 阈值/ ,/ 获取/ 近似/ 最优/ 的/ 任务/ 分组/ ,/ 并/ 利用/ 任务/ 复制/ 策略/ ,/ 缩短/ Page5/ 调度/ 长度/ ./ 其次/ ,/ ATES/ 算法/ 利用/ 动态/ 电压/ 调节/ 技术/ ,/ 减少/ 每个/ 处理器/ 的/ 计算/ 能耗/ ./ 最后/ ,/ 执行/ 任务/ 得到/ 运行/ 结果/ ./ 4.2/ 算法/ 的/ 详细描述/ 4.2/ ./ 1/ 生成/ 初始/ 任务调度/ 序列/ 为了/ 满足/ 并行任务/ 的/ 优先/ 约束/ 关系/ ,/ 定义/ 概念/ bottom/ ,/ 表示/ 从/ 当前任务/ 到/ 出口/ 任务/ 所有/ 路径/ 中/ 总/ 计算/ 时间/ 的/ 最大值/ ,/ 计算/ bottom/ 时/ 通信/ 时间/ 不/ 作/ 考虑/ ./ 需要/ 注意/ 的/ 是/ ,/ 并行任务/ 的/ 调度/ 长度/ 不会/ 小于/ 入口/ 任务/ 的/ bottom/ 值/ ./ 任务/ vi/ 的/ bottom/ 值/ 定义/ 如下/ :/ bottom/ (/ vi/ )/ =/ ti/ ,/ 烄/ 烅/ maxvk/ ∈/ succ/ (/ vi/ )/ (/ bottom/ (/ vk/ )/ )/ +/ ti/ ,/ 烆/ 在/ 获得/ 所有/ 任务/ 的/ bottom/ 值后/ ,/ 就/ 能/ 得到/ 一个/ 按照/ bottom/ 值/ 升序/ 排列/ 的/ 初始/ 调度/ 序列/ ./ 4.2/ ./ 2/ 重要/ 参数/ 计算/ EST/ (/ vi/ )/ =/ 0/ ,/ 烅/ 烄/ mineji/ ∈/ (/ Emaxeki/ ∈/ E/ ,/ vk/ ≠/ vj/ 烆/ 任务/ vi/ 的/ 最早/ 开始/ 时间/ EST/ (/ vi/ )/ 可以/ 通过/ 式/ (/ 11/ )/ 自上而下/ 进行/ 计算/ ,/ 即/ 从/ 入口/ 任务/ 开始/ 到/ 出口/ 任务/ 终止/ ./ 入口/ 任务/ 的/ 最早/ 开始/ 时间/ 为/ 0/ ,/ 其它/ 任务/ 的/ 最早/ 开始/ 时间/ 通过/ 式/ (/ 11/ )/ 计算/ 得到/ ./ 在/ 得到/ 任务/ vi/ 的/ 最早/ 开始/ 时间/ 之后/ ,/ 就/ 可以/ 计算/ 其/ 最早/ 完成/ 时间/ ECT/ (/ vi/ )/ ,/ 计算公式/ 如下/ :/ 任务/ vi/ 的/ 最佳/ 前驱/ FP/ (/ vi/ )/ 可以/ 用式/ (/ 13/ )/ 计算/ 得到/ ,/ 该/ 参数/ 表示/ 将/ 当前任务/ 与其/ 前驱/ 调度/ 到/ 同一/ 处理器/ 上/ ,/ 可以/ 减少/ 并行任务/ 的/ 整体/ 执行/ 时间/ ./ FP/ (/ vi/ )/ =/ vj/ ,/ vj/ ∈/ pred/ (/ vi/ )/ ,/ vk/ ∈/ pred/ (/ vi/ )/ j/ ≠/ k/ &&/ ECT/ (/ vj/ )/ +/ cji/ / ECT/ (/ vk/ )/ +/ cki/ (/ 13/ )/ 任务/ vi/ 的/ 最迟/ 允许/ 完成/ 时间/ LACT/ (/ vi/ )/ 可以/ 通过/ 式/ (/ 14/ )/ 计算/ 得到/ ./ 采用/ 自下而上/ 的/ 方式/ ,/ 即/ 从/ 出口/ 任务/ 开始/ 计算/ 到/ 入口/ 任务/ 终止/ ./ 出口/ 任务/ 的/ 最早/ 允许/ 完成/ 时间/ 等于/ 其/ 最早/ 完成/ 时间/ ,/ 其它/ 任务/ 的/ 最迟/ 允许/ 完成/ 时间/ 通过/ 式/ (/ 14/ )/ 计算/ 得到/ ./ LACT/ (/ vi/ )/ =/ 在/ 得到/ 任务/ vi/ 的/ 最迟/ 允许/ 完成/ 时间/ 之后/ ,/ 就/ 可以/ 计算/ 其/ 最迟/ 允许/ 开始/ 时间/ LAST/ (/ vi/ )/ ,/ 计算公式/ 如下/ :/ 4.2/ ./ 3/ 任务/ 分组/ 在/ 该/ 步骤/ 中/ ,/ 首先/ 获取/ 最佳/ 阈值/ ,/ 然后/ 利用/ 任务/ 复制/ 策略/ 在/ 该/ 阈值/ 下/ 对/ 任务/ 进行/ 分组/ ./ 本文/ 所/ 提出/ 的/ 任务/ 复制/ 策略/ ,/ 可以/ 根据/ 系统/ 参数/ 和/ 调度/ 长度/ 自动/ 调节/ 阈值/ ,/ 获取/ 近似/ 最优/ 的/ 任务/ 分组/ ./ 在/ 进行/ 任务/ 分组/ 之前/ ,/ 首先/ 需/ 根据/ 4.2/ ./ 1/ 小节/ 所述/ 方法/ 得到/ 初始/ 调度/ 序列/ queue/ ,/ 然后/ 根据/ 4.2/ ./ 2/ 小节/ 的/ 描述/ 计算/ 分组/ 所/ 需/ 的/ 重要/ 参数/ ./ 在/ 进行/ 任务/ 分组/ 时/ ,/ 最佳/ 阈值/ 的/ 计算/ 分/ 3/ 步/ 进行/ ,/ 伪/ 代码/ 见/ 算法/ 1/ ./ 算法/ 1/ ./ 最佳/ 阈值/ 计算/ ./ 输入/ :/ G/ (/ V/ ,/ E/ )/ ,/ PNhighest/ ,/ PL/ ,/ Assigned/ _/ Makespan/ 输出/ :/ 最佳/ 阈值/ // / 1/ ./ 获得/ 阈值/ 的/ 变化/ 范围/ / // 1/ ./ min/ _/ threshold/ ←/ 65535/ ,/ max/ _/ threshold/ ←/ 0/ ;/ 2/ ./ v/ ←/ queue/ 中/ 的/ 第一个/ 任务/ ;/ 3/ ./ WHILE/ (/ v/ ≠/ queue/ 中/ 的/ 最后/ 一个/ 任务/ )/ DO4/ ./ u/ ←/ FP/ (/ v/ )/ ;/ 5/ ./ IF/ (/ LAST/ (/ v/ )/ -/ LACT/ (/ u/ )/ </ cuv/ )/ 6/ ./ moreenergy/ ←/ enu/ -/ eluv/ ;/ // / 增加/ 能耗/ / // 7/ ./ lesstime/ ←/ LACT/ (/ u/ )/ +/ cuv/ -/ LAST/ (/ v/ )/ ;/ 8/ ./ ratio/ ←/ moreenergy/ // lesstime/ ;/ 9/ ./ IF/ (/ ratio/ </ min/ _/ threshold/ )/ THEN10/ ./ IF/ (/ ratio/ </ 0/ )/ THEN11/ ./ min/ _/ threshold/ ←/ 0/ ;/ 12/ ./ ELSE13/ ./ min/ _/ threshold/ ←/ ratio/ ;/ 14/ ./ ENDIF15/ ./ ENDIF16/ ./ IF/ (/ ratio/ >/ max/ _/ threshold/ )/ THEN17/ ./ max/ _/ threshold/ ←/ ratio/ ;/ 18/ ./ ENDIF19/ ./ ENDIF20/ ./ v/ ←/ thenexttaskofqueue/ ;/ 21/ ./ ENDWHILE22/ ./ IF/ (/ max/ _/ threshold/ =/ =/ 0/ )/ THEN23/ ./ optimal/ _/ threshold/ ←/ 0/ ;/ 24/ ./ ELSE25/ ./ min/ _/ schedule/ _/ len/ ←/ Grouping/ (/ max/ _/ threshold/ )/ ;/ 26/ ./ max/ _/ schedule/ _/ len/ ←/ Grouping/ (/ min/ _/ threshold/ )/ ;/ 27/ ./ optimal/ _/ threshold/ ←/ min/ _/ threshold/ -/ 1/ ;/ Page628/ ./ 根据/ 调度/ 长度/ 的/ 变化/ 范围/ ,/ 设定/ 一个/ 满足用户/ 需/ 29/ ./ IF/ (/ Assigned/ _/ Makespan/ </ min/ _/ schedule/ _/ len/ )/ THEN30/ ./ optimal/ _/ threshold/ ←/ max/ _/ threshold/ ;/ 31/ ./ BREAK/ ;/ 32/ ./ ELSE33/ ./ WHILE/ (/ optimal/ _/ threshold/ </ =/ max/ _/ threshold/ )/ 34/ ./ temp/ _/ sched/ _/ len/ ←/ Grouping/ (/ optimal/ _/ threshold/ )/ ;/ 35/ ./ IF/ (/ temp/ _/ sched/ _/ len/ >/ Assigned/ _/ Makespan/ )/ THEN36/ ./ optimal/ _/ threshold/ ++/ ;/ 37/ ./ ELSE38/ ./ BREAK/ ;/ 39/ ./ ENDIF40/ ./ ENDWHILE41/ ./ ENDIF42/ ./ ENDIF43/ ./ RETURNoptimal/ _/ threshold/ ./ 下面/ 依次/ 介绍/ 算法/ 1/ 的/ 3/ 个/ 步骤/ ./ 第/ 1/ 步/ ,/ 计算/ 影响/ 任务/ 复制/ 的/ 阈值/ 变化/ 范围/ ./ 首先/ ,/ 分别/ 将/ 最小/ 阈值/ 和/ 最大/ 阈值/ 初始化/ 为/ 65535/ 和/ 0/ (/ 见/ 1/ 行/ )/ ./ 这样/ 设置/ 是因为/ ,/ 当/ 算法/ 1/ 中/ 的/ 最大/ 阈值/ 为/ CPU/ 功耗/ 或/ 网络/ 功耗/ 的/ 若干倍/ (/ 1/ ~/ 100/ 倍/ )/ 时/ 通常/ 就/ 可以/ 满足/ 需求/ ,/ 另一方面/ 阈值/ 在/ 大于/ 零/ 的/ 情况/ 下/ 才能/ 有效/ 控制/ 任务/ 复制/ ./ 接着/ ,/ 算法/ 1/ 从/ 序列/ queue/ 的/ 初始/ 任务/ 开始/ 遍历/ 整个/ 序列/ ,/ 假如/ 复制/ 当前任务/ 的/ 最佳/ 前驱/ ,/ 计算/ 复制/ 此/ 前驱/ 任务/ 所/ 增加/ 的/ 能耗/ (/ moreenergy/ )/ 以及/ 减少/ 的/ 调度/ 长度/ (/ lesstime/ )/ (/ 第/ 4/ ~/ 8/ 行/ )/ ./ 算法/ 2/ 需将/ 增加/ 能耗/ 量/ 与/ 减少/ 调度/ 长度/ 的/ 比值/ 与/ 给定/ 阈值/ 比较/ ,/ 因此/ 这里/ 将/ 最大/ 比值/ 和/ 最小/ 比值/ 分别/ 设定/ 为/ 动态/ 阈值/ 的/ 上界/ 和/ 下界/ ,/ 即/ 最大/ 阈值/ (/ max/ _/ threshold/ )/ 和/ 最小/ 阈值/ (/ min/ _/ threshold/ )/ (/ 第/ 9/ ~/ 18/ 行/ )/ ./ 如果/ 最大/ 阈值/ 等于/ 0/ ,/ 则/ 返回/ 0/ 作为/ 最佳/ 阈值/ ;/ 否则/ ,/ 执行/ 接下来/ 的/ 两步/ ./ 第/ 2/ 步/ ,/ 根据/ 任务/ 分组/ 算法/ (/ 算法/ 2/ )/ 计算/ 得到/ 最大/ 调度/ 长度/ (/ max/ _/ schedule/ _/ len/ )/ 和/ 最小/ 调度/ 长度/ (/ min/ _/ schedule/ _/ len/ )/ (/ 第/ 25/ ~/ 26/ 行/ )/ ./ 这里/ ,/ 最大/ 调度/ 长度/ 在/ 最小/ 阈值/ 下/ 求得/ ,/ 而/ 最小/ 调度/ 长度/ 在/ 最大/ 阈值/ 下/ 求得/ ./ 根据/ 复制/ 策略/ 中/ 的/ 条件/ 可知/ ,/ 复制/ 活动/ 都/ 是/ 在/ 不/ 影响/ 系统/ 性能/ 的/ 前提/ 下/ 进行/ 的/ ,/ 因此/ ,/ 并行任务/ 的/ 调度/ 长度/ 随着/ 阈值/ 的/ 增加/ 不/ 可能/ 增大/ ,/ 只/ 可能/ 减小/ ./ 第/ 3/ 步/ ,/ 获得最佳/ 阈值/ ./ 首先/ 指定/ 一个/ 满足用户/ 实际/ 需求/ 的/ 调度/ 长度/ ,/ 该/ 数值/ 由/ 用户/ 参照/ 调度/ 长度/ 变化/ 范围/ 输入/ (/ 第/ 28/ 行/ )/ ./ 如果/ 用户/ 设定值/ 小于/ 最小/ 调度/ 长度/ (/ min/ _/ schedule/ _/ len/ )/ ,/ 那么/ 算法/ 1/ 将/ 最大/ 阈值/ 作为/ 最佳/ 阈值/ 返回/ (/ 第/ 29/ ~/ 31/ 行/ )/ ,/ 因为/ 本文/ 所/ 提出/ 的/ 算法/ 只能/ 将/ 性能/ 优化/ 到/ min/ _/ schedule/ _/ len/ ./ 否则/ ,/ 算法/ 1/ 将/ 从/ 最小/ 阈值/ 开始/ 对/ 整个/ 阈值/ 区间/ 进行/ 遍历/ ,/ 并/ 计算/ 当前/ 阈值/ 下/ 的/ 任务调度/ 长度/ ,/ 直至/ 计算/ 所得/ 的/ 调度/ 长度/ 小于/ 所/ 指定/ 的/ 调度/ 长度/ (/ 第/ 32/ ~/ 38/ 行/ )/ ./ 也就是说/ ,/ 一旦/ 系统/ 性能/ 要求/ 得到/ 满足/ ,/ 循环/ 即刻/ 终止/ ,/ 并/ 返回/ 当前/ 阈值/ 作为/ 最佳/ 阈值/ ./ 在/ 求得/ 最佳/ 阈值/ 后/ ,/ 利用/ 分组/ 策略/ 对/ 任务/ 进行/ 分组/ ./ 分组/ 策略/ 简写/ 为/ Grouping/ (/ threshold/ )/ ,/ 伪/ 代码/ 见/ 算法/ 2/ ./ 算法/ 2/ ./ 任务/ 分组/ 算法/ Grouping/ (/ threshold/ )/ ./ 输入/ :/ G/ (/ V/ ,/ E/ )/ ,/ PN/ ,/ PL/ ,/ threshold/ 输出/ :/ 分组/ 结果/ 和/ 调度/ 长度/ 1/ ./ v/ ←/ queue/ 中/ 的/ 第一个/ 任务/ ;/ 2/ ./ i/ ←/ 0/ ;/ 3/ ./ 当前/ 分组/ ←/ group/ [/ i/ ]/ ;/ 4/ ./ 当前/ 分组/ ←/ v/ ;/ 5/ ./ WHILE/ (/ 未/ 分配/ 的/ 任务/ ≠/ NULL/ )/ DO6/ ./ u/ ←/ FP/ (/ v/ )/ ;/ 7/ ./ IF/ (/ u/ 已经/ 被/ 分配/ )/ THEN8/ ./ IF/ (/ LAST/ (/ v/ )/ -/ LACT/ (/ u/ )/ </ cuv/ )/ THEN9/ ./ moreenergy/ ←/ enu/ -/ eluv/ ;/ // // 增加/ 能耗/ 10/ ./ lesstime/ ←/ LACT/ (/ u/ )/ +/ cuv/ -/ LAST/ (/ v/ )/ ;/ 11/ ./ ratio/ ←/ moreenergy/ // lesstime/ ;/ 12/ ./ IF/ (/ ratio/ </ =/ threshold/ )/ THEN13/ ./ 当前/ 分组/ ←/ u/ ;/ 14/ ./ ELSE15/ ./ 对于/ v/ 的/ 另/ 一个/ 前驱/ z/ ,/ z/ ≠/ v/ ,/ 16/ ./ IF/ (/ ECT/ (/ u/ )/ +/ ccuv/ =/ =/ ECT/ (/ z/ )/ +/ cczv17/ ./ u/ ←/ z/ ,/ 当前/ 分组/ ←/ u/ ;/ 18/ ./ ELSE19/ ./ i/ ++/ ;/ 20/ ./ u/ ←/ queue/ 中下/ 一个/ 未/ 分配任务/ ;/ 21/ ./ 当前/ 分组/ ←/ 下/ 一个/ 可行/ 任务/ 组/ group/ [/ i/ ]/ ;/ 22/ ./ ENDIF23/ ./ ENDIF24/ ./ ELSE25/ ./ 执行/ 与/ 第/ 13/ ~/ 20/ 行/ 相同/ 的/ 操作/ ;/ 26/ ./ ENDIF27/ ./ ELSE/ 当前/ 分组/ ←/ u/ ;/ 28/ ./ v/ ←/ u/ ;/ 29/ ./ ENDIF30/ ./ IF/ (/ v/ 为/ 结束任务/ )/ THEN31/ ./ i/ ++/ ;/ 32/ ./ v/ ←/ queue/ 中下/ 一个/ 未/ 分配任务/ ;/ Page733/ ./ 当前/ 分组/ ←/ 下/ 一个/ 可行/ 任务/ 组/ group/ [/ i/ ]/ ;/ 34/ ./ 当前/ 分组/ ←/ v/ ;/ 35/ ./ ENDIF36/ ./ ENDWHILE37/ ./ RETURN/ 分组/ 结果/ 和/ 调度/ 长度/ ./ 在/ 任务/ 分组/ 过程/ 中/ ,/ 从/ 序列/ queue/ 的/ 第一个/ 任务/ 开始/ ,/ 逐个/ 考虑/ 是否/ 将/ 当前任务/ 的/ 最佳/ 前驱/ 分配/ 或/ 复制到/ 当前/ 处理器/ 上/ (/ 第/ 1/ ~/ 6/ 行/ )/ ./ 如果/ 当前任务/ 的/ 最佳/ 前驱/ 没有/ 分组/ ,/ 则/ 将/ 其/ 分配/ 给/ 当前/ 分组/ (/ 第/ 26/ 行/ )/ ./ 假设/ v/ 为/ 当前任务/ ,/ 其/ 最佳/ 前驱/ u/ 已/ 被/ 分配/ ,/ 如果/ 复制/ 任务/ u/ 到/ 任务/ v/ 所在/ 的/ 组/ 可以/ 提高/ 系统/ 性能/ ,/ 同时/ 增加/ 的/ 能耗/ 有限/ ,/ 那么/ 任务/ u/ 将会/ 被/ 允许/ 复制到/ 任务/ v/ 所在/ 的/ 分组/ (/ 第/ 8/ ~/ 13/ 行/ )/ ./ 否则/ ,/ 寻找/ 任务/ v/ 的/ 另/ 一个/ 未/ 分配/ 前驱/ z/ ,/ 判断/ 任务/ z/ 是否/ 满足条件/ ECT/ (/ z/ )/ +/ cczv/ =/ =/ ECT/ (/ u/ )/ +/ ccuv/ ./ 如果/ 存在/ 这样/ 的/ 任务/ z/ ,/ 将/ 其/ 分配/ 给/ 当前/ 分组/ ,/ 并/ 从/ 任务/ z/ 开始/ 继续/ 往后/ 搜索/ (/ 第/ 15/ ~/ 21/ 以及/ 第/ 25/ 行/ )/ ./ 一旦/ 任务/ 复制/ 失败/ (/ 第/ 18/ ~/ 21/ 行/ )/ 或者/ 搜索/ 到达/ 入口/ 任务/ (/ 第/ 30/ ~/ 34/ 行/ )/ ,/ 则/ 当前/ 分组/ 结束/ ,/ 下/ 一个/ 任务/ 组从/ 序列/ queue/ 的/ 第一个/ 未/ 被/ 分配/ 的/ 任务/ 开始/ 继续执行/ (/ 第/ 20/ 和/ 32/ 行/ )/ ./ 重复/ 上述/ 过程/ ,/ 直至/ 所有/ 的/ 任务/ 被/ 分配/ ,/ 算法/ 2/ 结束/ (/ 第/ 5/ 行/ )/ ./ 4.2/ ./ 4/ 任务分配/ 在/ 4.2/ ./ 3/ 小节/ 中/ ,/ 已经/ 按照/ 最佳/ 阈值/ 控制/ 下/ 的/ 分配/ 策略/ 对/ 并行任务/ 进行/ 了/ 分组/ ./ 在/ 本文/ 中/ ,/ 处理器/ 是/ 同构/ 的/ ,/ 即/ 所有/ 处理器/ 的/ 处理/ 能力/ 均/ 相同/ ,/ 因此/ 可以/ 将/ 各/ 分组/ 任务/ 随机/ 分配/ 到/ 空闲/ 处理器/ 上/ ,/ 各个/ 处理器/ 根据/ 空闲/ 时间/ 独立/ 调节/ 电压/ ,/ 以/ 提高/ 系统/ 能效/ ./ 4.2/ ./ 5/ 动态/ 电压/ 调节/ 通过/ 任务调度/ ,/ 每/ 一个/ 分组/ 已/ 被/ 分配/ 到/ 其/ 对应/ 的/ 处理器/ 节点/ ./ 首先/ 根据/ 任务/ 分组/ 结果/ ,/ 以及/ 任务/ 之间/ 的/ 优先/ 约束/ 关系/ ,/ 计算/ 各个/ 任务/ 的/ 空闲/ 时间/ ,/ 然后/ 确定/ 每个/ 任务/ 块/ 在/ 其/ 相应/ 电压/ // 频率/ 下/ 的/ 执行/ 时间/ (/ τ/ i1/ ,/ τ/ i2/ ,/ …/ ,/ τ/ ih/ )/ ./ 本文/ 采用/ 的/ 动态/ 电压/ 调节/ 技术/ ,/ 并/ 不是/ 将/ 具有/ 空闲/ 时间/ 的/ CPU/ 工作频率/ 或/ 电压/ 调节/ 到/ 某个/ 近似/ 最优/ 值/ ,/ 而是/ 根据/ 条件/ 方程/ 和/ 目标/ 方程/ ,/ 利用/ 一种/ 常用/ 的/ 整数/ 线性规划/ 求解/ 工具/ ①/ 确定/ 任务/ 在/ 各/ 执行/ 频率/ 或/ 电压/ 下/ 的/ 计算/ 时间/ ./ 对于/ 任务/ vi/ ,/ 计算/ 周期/ 、/ 执行/ 时间/ 和/ 时钟/ 频率/ 之间/ 的/ 关系/ 可/ 表示/ 为/ cci/ =/ ti/ ·/ fmax/ ,/ 这里/ 计算/ 周期/ cci/ 对/ 任务/ vi/ 而言/ 是/ 常量/ ,/ fmax/ 为/ 处理器/ 最大/ 频率/ ./ 对于/ 具有/ 空闲/ 时间/ 的/ 任务/ ,/ 可以/ 将/ 其/ 分为/ h/ 个/ 任务/ 块/ ,/ cci/ 可/ 表示/ 为/ 其中/ ,/ {/ τ/ ij/ ,/ i/ =/ 1/ ,/ …/ ,/ n/ ,/ j/ =/ 1/ ,/ …/ ,/ h/ }/ ∈/ Integer/ (/ 17/ )/ 由于/ 任务/ 之间/ 存在/ 优先/ 约束/ 关系/ ,/ 每个/ 任务/ 只有/ 在/ 其/ 所有/ 前驱/ 任务/ 都/ 已/ 执行/ 完毕/ 之后/ 才能/ 开始/ 执行/ ./ 当/ 任务/ vi/ 在/ 最高/ 电压/ 下/ 执行/ 时/ ,/ 其/ 执行/ 时间/ ti/ 即/ 为/ 最/ 短/ 执行/ 时间/ ./ 因此/ ,/ 任务/ vi/ 的/ 实际/ 执行/ 时间/ 在/ 区间/ [/ ti/ ,/ MAET/ (/ vi/ )/ ]/ 内/ 取值/ ,/ 这里/ MAET/ (/ vi/ )/ 表示/ 任务/ vi/ 的/ 最长/ 允许/ 执行/ 时间/ (/ MaximumAllowableExecutionTime/ ,/ MAET/ )/ ./ 在/ 给出/ 参数/ MAET/ 的/ 表达式/ 之前/ ,/ 首先/ 介绍/ 另/ 一个/ 重要/ 参数/ ST/ (/ vi/ )/ —/ —/ —/ 任务/ vi/ 的/ 开始/ 执行/ 时间/ (/ StartTime/ ,/ ST/ )/ ./ 每个/ 任务/ 的/ 开始/ 执行/ 时间/ 可以/ 利用/ 式/ (/ 19/ )/ 通过/ 自上而下/ 的/ 方式/ 计算/ 得到/ ./ ST/ (/ vi/ )/ =/ 0/ ,/ pred/ (/ vi/ )/ =/ / 烄/ (/ maxmaxvj/ ∈/ pre/ (/ vi/ )/ ,/ group/ (/ vi/ ≠/ vj/ )/ (/ ST/ (/ vj/ )/ +/ ti/ +/ cij/ )/ ,/ 烅/ maxvj/ ∈/ pre/ (/ vi/ )/ ,/ group/ (/ vi/ =/ vj/ )/ (/ ST/ (/ vj/ )/ +/ ti/ )/ )/ ,/ 烆/ 因此/ ,/ 任务/ vi/ 的/ 最长/ 允许/ 执行/ 时间/ MAET/ (/ vi/ )/ 可以/ 用式/ (/ 20/ )/ 表示/ ./ MAET/ (/ vi/ )/ =/ ti/ ,/ 烄/ (/ minminvj/ ∈/ succ/ (/ vi/ )/ ,/ group/ (/ vi/ ≠/ vj/ )/ (/ ST/ (/ vj/ )/ -/ ST/ (/ vi/ )/ -/ cij/ )/ ,/ 烅/ minvj/ ∈/ succ/ (/ vi/ )/ ,/ group/ (/ vi/ =/ vj/ )/ (/ ST/ (/ vj/ )/ -/ ST/ (/ vi/ )/ )/ )/ ,/ 烆/ 在/ 式/ (/ 19/ )/ 和/ (/ 20/ )/ 中/ ,/ group/ (/ vi/ =/ vj/ )/ 代表/ 任务/ vi/ 和/ 任务/ vj/ 在/ 同一/ 处理器/ 上/ ,/ group/ (/ vi/ ≠/ vj/ )/ 代表/ 任务/ vi/ 和/ 任务/ vj/ 不/ 在/ 同一/ 处理器/ 上/ ./ 本文/ 运用/ 动态/ 电压/ 调节/ 技术/ 计算/ 各个/ 任务/ 在/ 处理器/ 上/ 的/ 最小/ 计算/ 能耗/ ,/ 由于/ 同时/ 考虑/ 了/ 处理器/ 的/ 活动/ 功耗/ 和/ 空闲/ 功耗/ ,/ 任务/ vi/ 的/ 能耗/ 目标/ 方程/ 如下/ 式/ 所示/ :/ mineni/ =/ eni/ 需要/ 强调/ 的/ 是/ ,/ 如果/ 某个/ 任务/ 没有/ 空闲/ 时间/ (/ 即/ ①/ lp/ _/ solve/ :/ Opensource/ (/ Mixed/ -/ Integer/ )/ LinearProgram/ -/ Page8ti/ =/ MAET/ (/ vi/ )/ )/ ,/ 那么/ 该/ 任务/ 只能/ 在/ 最高/ 电压/ 下/ 执行/ ,/ 因此/ 这/ 类/ 任务/ 的/ 计算/ 能耗/ 可/ 表示/ 为/ 对于/ 上述/ 问题/ ,/ 可以/ 利用/ 整数/ 线性规划/ 求解/ ,/ 并/ 根据/ 条件/ (/ 16/ )/ ~/ (/ 18/ )/ 和/ 目标/ 函数/ (/ 21/ )/ 来/ 获取/ 近似/ 最优/ 解/ ./ 算法/ 3/ 详细描述/ 了/ 如何/ 对/ 存在/ 空闲/ 时间/ 的/ 任务/ 进行/ 电压/ 调节/ ./ 首先/ ,/ 计算/ 每个/ 任务/ 的/ 开始/ 执行/ 时间/ ST/ (/ 第/ 1/ ~/ 3/ 行/ )/ ,/ 然后/ 遍历/ 序列/ queue/ 中/ 的/ 任务/ ,/ 计算/ 出/ 每个/ 任务/ 的/ 最长/ 允许/ 执行/ 时间/ MAET/ (/ 第/ 4/ ~/ 6/ 行/ )/ ./ 遍历/ 所有/ 处理器/ ,/ 如果/ 当前/ 处理器/ pj/ 处于/ 空闲/ 状态/ ,/ 则/ 将/ 该/ 处理器/ 的/ 工作电压/ // 频率/ 调节/ 到/ 最低/ (/ 第/ 9/ ~/ 11/ 行/ )/ ;/ 如果/ 调度/ 到/ 当前/ 处理器/ 上/ 的/ 任务/ vi/ 无/ 空闲/ 时间/ ,/ 则/ 此/ 任务/ 的/ 执行/ 电压/ // 频率/ 一直/ 保持/ 在/ 最高/ 频率/ 水平/ (/ 第/ 12/ ~/ 13/ 行/ )/ ./ 否则/ ,/ 算法/ 3/ 首先/ 利用/ 整数/ 线性规划/ 方法/ 计算/ 出/ 当前任务/ vi/ 在/ 各/ 电压/ // 频率/ 下/ 的/ 执行/ 时间/ ,/ 然后/ 动态/ 调节/ 当前/ 处理器/ pj/ 的/ 频率/ 到/ 相应/ 水平/ ,/ 使得/ 任务/ vi/ 在/ 每个/ 频率/ 上/ 执行/ 一段时间/ (/ 第/ 14/ ~/ 16/ 行/ )/ ./ 算法/ 3/ ./ 动态/ 电压/ 调节/ ./ 输入/ :/ G/ (/ V/ ,/ E/ )/ ,/ 支持/ 动态/ 电压/ 调节/ 技术/ 的/ 处理器/ 输出/ :/ 任务/ 在/ 其/ 相应/ 的/ 频率/ // 电压/ 下/ 的/ 执行/ 时间/ 1/ ./ FOR/ (/ i/ ←/ 1ton/ )/ DO/ // // n/ 为/ 任务/ 个数/ 2/ ./ 利用/ 式/ (/ 19/ )/ 计算/ ST/ (/ vi/ )/ ;/ 3/ ./ ENDFOR4/ ./ FOR/ (/ queue/ 中/ 的/ 每个/ 任务/ vi/ )/ DO5/ ./ 利用/ 式/ (/ 20/ )/ 计算/ MAET/ (/ vi/ )/ ;/ 6/ ./ ENDFOR7/ ./ FOR/ (/ j/ ←/ 0tom/ -/ 1/ )/ DO/ // // m/ 为/ 处理器/ 个数/ 8/ ./ FOR/ (/ 处理器/ pj/ 上/ 的/ 每个/ 任务/ vi/ )/ DO9/ ./ IF/ (/ pj/ ←/ 空闲/ )/ THEN10/ ./ pj/ ←/ 最低/ 电压/ // 频率/ ;/ 11/ ./ ENDIF12/ ./ IF/ (/ MAET/ (/ vi/ )/ =/ =/ ti/ )/ THEN13/ ./ vi/ ←/ 最高/ 电压/ // 频率/ ;/ 14/ ./ ELSE15/ ./ 在/ 条件/ 方程/ (/ 17/ )/ ~/ (/ 19/ )/ 和/ 目标/ 方程/ (/ 21/ )/ 下/ ,/ 利/ 16/ ./ 动态/ 调节/ 处理器/ pj/ 的/ 频率/ 到/ 相应/ 水平/ ,/ 并且/ 使/ 17/ ./ ENDIF18/ ./ ENDFOR19/ ./ ENDFOR/ 定理/ 1/ ./ 算法/ ATES/ 的/ 时间/ 复杂度/ 是/ (/ O/ (/ rh/ +/ 4.3/ 算法/ 的/ 时间/ 复杂度/ 分析/ log/ |/ V/ |/ )/ |/ V/ |/ +/ ∑/ nr/ 是/ 阈值/ 的/ 取值/ 范围/ ;/ |/ V/ |/ 表示/ DAG/ 图中/ 任务/ 总/ 个数/ ./ 证明/ ./ 本文/ 4.2/ 节对/ 整个/ ATES/ 算法/ 进行/ 了/ 描述/ ./ 在/ 4.2/ ./ 1/ 小节/ 中/ ,/ 算法/ ATES/ 遍历/ DAG/ 图中/ 的/ 所有/ 任务/ 以/ 计算/ 任务/ 的/ bottom/ 值/ ,/ 其/ 时间/ 复杂度/ 为/ O/ (/ |/ E/ |/ )/ ,/ |/ E/ |/ 表示/ 所/ 传递/ 的/ 信息/ 数量/ ./ 接着/ ,/ 对/ 所有/ 任务/ 的/ bottom/ 值/ 进行/ 排序/ 来/ 生成/ 初始/ 任务/ 序列/ ,/ 其/ 时间/ 复杂度/ 为/ O/ (/ |/ Vlog/ |/ V/ |/ |/ )/ ,/ |/ V/ |/ 表示/ 任务/ 总数/ ./ 本/ 部分/ 的/ 时间/ 复杂度/ 为/ O/ (/ |/ V/ |/ log/ |/ V/ |/ +/ |/ E/ |/ )/ ./ 在/ 4.2/ ./ 2/ 小节/ 中/ ,/ 计算/ 所有/ 参数/ (/ EST/ ,/ ECT/ ,/ FP/ ,/ LACT/ ,/ LAST/ )/ ,/ 该/ 过程/ 的/ 时间/ 复杂度/ 为/ O/ (/ 3/ (/ |/ V/ |/ +/ |/ E/ |/ )/ )/ ./ 在/ 4.2/ ./ 3/ 小节/ 中/ ,/ 任务/ 分组/ 过程/ 总/ 的/ 时间/ 复杂度/ 为/ O/ (/ (/ 3h/ +/ hr/ +/ 1/ )/ |/ V/ |/ )/ ,/ 其中/ h/ 代表/ DAG/ 图/ 的/ 深度/ ,/ r/ 是/ 阈值/ 的/ 取值/ 范围/ ./ 首先/ ,/ 算法/ 1/ 遍历/ 所有/ 任务/ 来/ 获取/ 阈值/ 的/ 取值/ 范围/ ,/ 其/ 时间/ 复杂度/ 为/ O/ (/ |/ V/ |/ )/ ;/ 利用/ 算法/ 2/ 求/ 调度/ 长度/ 的/ 时间/ 复杂度/ 为/ O/ (/ 2h/ |/ V/ |/ )/ ./ 另外/ ,/ 求得/ 最佳/ 阈值/ 的/ 时间/ 复杂度/ 为/ O/ (/ hr/ |/ V/ |/ )/ ,/ 这/ 是因为/ ,/ 在/ 最坏/ 情况/ 下/ ,/ 算法/ 1/ 需要/ 遍历/ 所有/ 阈值/ ./ 因此/ ,/ 算法/ 1/ 的/ 时间/ 复杂度/ 为/ O/ (/ (/ hr/ +/ 2h/ +/ 1/ )/ |/ V/ |/ )/ ./ 最后/ ,/ 算法/ 2/ 在/ 最佳/ 阈值条件/ 下/ 利用/ 任务/ 复制/ 策略/ 进行/ 任务/ 分组/ ,/ 所有/ 的/ 任务/ 被/ 分配/ 到/ 一个/ 或/ 被/ 复制到/ 多个/ 处理器/ 上/ ./ 在/ 最坏/ 情况/ 下/ ,/ 关键/ 路径/ 上/ 的/ 所有/ 任务/ 都/ 被/ 复制/ ,/ 因此/ 算法/ 2/ 的/ 时间/ 复杂度/ 为/ O/ (/ h/ |/ V/ |/ )/ ./ 综上所述/ ,/ 该/ 部分/ 的/ 时间/ 复杂度/ 为/ O/ (/ (/ 3h/ +/ hr/ +/ 1/ )/ |/ V/ |/ )/ ./ 在/ 4.2/ ./ 5/ 小节/ 中/ ,/ 算法/ 3/ 首先/ 通过/ 深度/ 优先/ 的/ 方式/ 计算/ 任务/ 开始/ 执行/ 时间/ ST/ 和/ 最长/ 允许/ 执行/ 时间/ MAET/ ,/ 时间/ 复杂度/ 为/ O/ (/ |/ V/ |/ +/ |/ E/ |/ )/ ./ 然后/ ,/ 判断/ 任务/ 是否/ 存在/ 空闲/ 时间/ ,/ 并/ 利用/ 整数/ 线性规划/ 方法/ 求解/ 拥有/ 空闲/ 时间/ 的/ 任务/ 在/ 各个/ 电压/ // 频率/ 下/ 的/ 执行/ 时间/ ./ 虽然/ 算法/ 3/ 优化/ 了/ 搜索/ 空间/ ,/ 但/ 在/ 最坏/ 情况/ 下/ ,/ 该/ 算法/ 必须/ 遍历/ 每个/ 频率/ 和/ 电压/ 下/ 的/ 执行/ 时间/ 区间/ ./ 此外/ ,/ 本文/ 所/ 采用/ 的/ 整数/ 线性规划/ 方法/ 只/ 使用/ 了/ 3/ 组/ 电压/ // 频率/ 值/ ,/ 对/ 任务/ vi/ ,/ 整数/ 线性规划/ 求解/ 所/ 花费/ 的/ 时间/ 复杂度/ 为/ O/ (/ t3i/ )/ ./ 在/ 最坏/ 情况/ 下/ ,/ 所有/ 任务/ 都/ 拥有/ 空闲/ 时间/ ,/ 因此/ 总/ 的/ 时间/ 复杂度/ 为/ (/ O/ ∑/ nt3i/ +/ |/ V/ |/ +/ |/ EATES/ 算法/ 的/ 时间/ 复杂度/ 为/ (/ Ohr/ |/ V/ |/ +/ i/ =/ 1/ |/ V/ |/ log/ |/ V/ |/ +/ 3h/ |/ V/ |/ +/ 6/ |/ V/ |/ +/ 5/ |/ E/ |/ +/ ∑/ nPage9/ 等于/ (/ O/ (/ rh/ +/ log/ |/ V/ |/ )/ |/ V/ |/ +/ ∑/ n5/ 性能/ 评测/ 在/ 本节/ 中/ ,/ 将/ ATES/ 算法/ 与/ 现有/ 的/ 4/ 种/ 经典/ 调度/ 算法/ :/ TDVAS/ 算法/ [/ 16/ ]/ 、/ TDS/ 算法/ [/ 5/ ]/ 、/ EAD/ 算法/ [/ 4/ ]/ 和/ PEBD/ 算法/ [/ 4/ ]/ 进行/ 比较/ ./ 其中/ ,/ TDS/ 是/ 基于/ 关键/ 路径/ 的/ 任务/ 复制/ 调度/ 算法/ ,/ 通过/ 复制/ 关键/ 路径/ 上/ 的/ 任务/ 以/ 获得/ 最短/ 的/ 调度/ 长度/ ./ EAD/ 和/ PEBD/ 是/ 两个/ 基于/ TDS/ 的/ 能耗/ 感知/ 调度/ 算法/ ,/ 通过/ 阈值/ 平衡/ 性能/ 和/ 能耗/ ./ TDVAS/ 算法/ 通过/ 计算/ 处理器/ 的/ 空闲/ 时间/ ,/ 利用/ DVS/ 节省/ 处理器/ 能耗/ ./ 为了/ 验证/ ATES/ 算法/ 在/ 现实/ 应用/ 中/ 的/ 有效性/ ,/ 仿真/ 实验/ 采用/ SimGrid/ ①/ 模拟/ 并行任务/ 的/ 调度/ 过程/ ./ SimGrid/ 是/ 一种/ 广泛应用/ 于/ 集群/ 系统/ 的/ 调度/ 仿真/ 软件/ ,/ 可以/ 真实/ 和/ 准确/ 地/ 模拟/ 并行任务/ 的/ 执行/ 过程/ ./ 本文/ 选择/ 调度/ 长度/ 和/ 能耗/ 大小/ 作为/ 算法/ 比较/ 的/ 评价/ 指标/ ./ 对于/ EAD/ 算法/ 和/ PEBD/ 算法/ ,/ 首先/ 计算/ 出/ 它们/ 各自/ 的/ 阈值/ 变化/ 范围/ ,/ 分别/ 记为表/ 2/ 处理器/ 参数信息/ 处理器/ AMDAthlon/ -/ 641.5/ ,/ 1.4/ ,/ 1.3/ ,/ 1.2/ ,/ 1.1/ ,/ 1.0/ ,/ 0.9/ IntelPentiumM1/ ./ 484/ ,/ 1.463/ ,/ 1.308/ ,/ 1.180/ ,/ 0.956/ AMDOpteron22181/ ./ 30/ ,/ 1.25/ ,/ 1.20/ ,/ 1.15/ ,/ 1.15/ ,/ 1.10/ IntelCorei7/ -/ 8601.375/ ,/ 1.300/ ,/ 1.200/ ,/ 1.125/ ,/ 1.125/ ,/ 1.125/ ,/ 1.1254/ ./ 0/ ,/ 3.8/ ,/ 3.6/ ,/ 3.4/ ,/ 3.2/ ,/ 3.0/ ,/ 2.810951/ ./ 0005.1/ ./ 2/ 网络/ 环境/ 配置/ 本文/ 选取/ GigabitEthernet/ 、/ Infiniband/ 、/ Myrinet/ 和/ QsNetII4/ 种/ 互联网络/ 分别/ 构建/ 网络/ 环境/ ,/ 这/ 4/ 种/ 网络/ 已经/ 在/ 实际/ 集群/ 中/ 得到/ 广泛应用/ ,/ 而且/ 它们/ 具有/ 不同/ 的/ 功耗/ 、/ 带宽/ 和/ 网络延时/ [/ 4/ ,/ 24/ -/ 25/ ]/ ./ 在/ 实验/ 中/ ,/ 以/ Myrinet/ 作为/ 标准/ 网络/ ,/ 其/ MPI/ 延时/ 为/ 2.7/ μ/ s/ ③/ ./ 实验/ 中/ 假设/ Myrinet/ 的/ 延时/ 比为/ 1/ ,/ 表/ 3/ 中/ 列出/ 了/ 其余/ 3/ 种/ 网络/ 相对/ 于/ Myrinet/ 的/ 延时/ 比及/ 其它/ 详细/ 配置/ 信息/ ./ 网络/ 交换机/ GigabitEthernet75/ ./ 05.05013/ ./ 00Infiniband25/ ./ 010.68220/ ./ 90Myrinet55/ ./ 29.32431/ ./ 00QsNetII5/ ./ 2/ 并行/ 应用/ 本文/ 选择/ 两类/ 真实/ 的/ 并行程序/ 用于/ 仿真/ 实验/ ./ [/ min/ _/ threshold1/ ,/ max/ _/ threshold1/ ]/ 和/ [/ min/ _/ threshold2/ ,/ max/ _/ threshold2/ ]/ ./ 为了/ 体现/ 公平性/ ,/ 后续/ 实验/ 将/ EAD/ 算法/ 和/ PEBD/ 算法/ 的/ 阈值/ 均/ 设定/ 为/ 最大/ 阈值/ 与/ 最小/ 阈值/ 的/ 算术/ 平均值/ ./ 5.1/ 硬件/ 环境/ 配置/ 5.1/ ./ 1/ 处理器/ 配置/ 实验/ 选择/ AMDAthlon/ -/ 64/ [/ 22/ ]/ 、/ IntelPentiumM1/ ./ 4GHz/ [/ 4/ ,/ 16/ ]/ 、/ AMDOpteron2218/ [/ 23/ ]/ 和/ IntelCorei7/ -/ 860/ ②/ 4/ 种/ 处理器/ 模拟/ 真实/ 的/ 集群/ 环境/ ,/ 这/ 4/ 种/ 处理器/ 均/ 支持/ 动态/ 电压/ 调节/ 技术/ ./ 其中/ AMDAthlon/ -/ 64/ 和/ IntelPentiumM/ 是/ 单核/ 处理器/ ,/ AMDOpteron2218/ 和/ IntelCorei7/ -/ 860/ 是/ 多/ 核/ 处理器/ ./ AMDAthlon/ -/ 64/ 处理器/ 在/ 高性能/ 集群/ 环境/ 得到/ 广泛应用/ ,/ 非常适合/ 应用/ 动态/ 电压/ 调节/ 技术/ 降低/ 处理器/ 能耗/ ./ IntelPentiumM/ 处理器/ 是/ 一款/ 主要/ 应用/ 于/ 嵌入式/ 系统/ 的/ 低功耗/ 处理器/ ./ AMDOpteron2218/ 是/ 一款/ 主要/ 用于/ 服务器/ 的/ 双核/ 处理器/ ,/ 是/ IBMX3455/ 服务器/ CPU/ 的/ 主要/ 组成部分/ ./ IntelCorei7/ -/ 860/ 是/ 一款/ 当前/ 主流/ 的/ 4/ 核/ 处理器/ ./ 实验/ 中/ 假设/ ,/ 对于/ 任一/ 并行/ 应用/ 每/ 一种/ 处理器/ 的/ 数量/ 都/ 是/ 足够/ 的/ ./ 表/ 2/ 列出/ 了/ 上述/ 4/ 种/ 处理器/ 的/ 详细/ 参数/ ./ 2.0/ ,/ 1.8/ ,/ 1.6/ ,/ 1.4/ ,/ 1.2/ ,/ 1.0/ ,/ 0.88912/ ./ 8161.4/ ,/ 1.2/ ,/ 1.0/ ,/ 0.8/ ,/ 0.62/ ./ 6/ ,/ 2.4/ ,/ 2.2/ ,/ 2.0/ ,/ 1.8/ ,/ 1.0/ 目前/ ,/ 有/ 许多/ 生成/ DAG/ 的/ 工具/ ,/ 常用/ 的/ 有/ STG/ ④/ 和/ TGFF/ [/ 26/ ]/ ./ 本文/ 采用/ STG/ 生成/ 两个/ 实际/ 的/ 并行/ 应用/ —/ —/ —/ RobotControl/ (/ 88/ 个/ 任务/ ,/ 131/ 条边/ )/ 和/ Sparse/ (/ 96/ 个/ 任务/ ,/ 67/ 条边/ )/ ④/ ./ 其中/ ,/ RobotControl/ 是/ 通信/ 密集型/ 应用/ ,/ Sparse/ 是/ 计算/ 密集型/ 应用/ ./ 定义/ 通信/ 计算/ 比率/ (/ Communication/ -/ to/ -/ ComputationRatio/ ,/ CCR/ )/ 为/ 并行/ 应用/ 的/ 平均/ 通信/ 代价/ 与/ 平均/ 计算/ 代价/ 之比/ ./ CCR/ 是/ 并行/ 应用/ 的/ 重要/ 特征/ 之一/ ,/ 实验/ 中/ CCR/ 的/ 取值/ 范围/ 为/ 0.1/ ~/ 10.5/ ./ 3/ 实验/ 结果/ 与/ 评价/ 本/ 节/ 给出/ 了/ 不同/ 实验/ 环境/ 下/ 的/ 仿真/ 结果/ ./ 每/ 一组/ 仿真/ 实验/ 只/ 改变/ 处理器/ 、/ 网络连接/ 、/ 并行/ 应用/ 和/ ①/ ②/ ③/ ④/ Page10CCR4/ 个/ 参数/ 中/ 的/ 一个/ ,/ 其余/ 参数/ 保持/ 不变/ ,/ 以/ 比较/ 观察/ 各/ 算法/ 在/ 性能/ 和/ 能耗/ 两个/ 评价/ 指标/ 上/ 的/ 变化/ ./ 5.3/ ./ 1/ 处理器/ 的/ 影响/ 第/ 1/ 组/ 实验/ 研究/ 处理器/ 对/ 集群/ 系统/ 性能/ 和/ 能耗/ 的/ 影响/ ,/ 除了/ 整个/ 系统/ 的/ 总/ 能耗/ 之外/ ,/ 论文/ 还/ 对/ CPU/ 能耗/ 进行/ 了/ 研究/ ./ 为了/ 比较/ 的/ 公平性/ ,/ 每个/ 处理器/ 的/ 空闲/ 功耗/ 均/ 定义/ 为/ 该/ 处理器/ 在/ 最低/ 执行/ 电压/ 和/ 频率/ 下/ 的/ 功耗/ 值/ ./ IntelPentiumM/ 处理器/ 是/ 一款/ 低/ 功率/ 处理器/ ,/ 其/ 活动/ 功耗/ 和/ 空闲/ 功耗/ 分别/ 是/ 25W/ 和/ 6.25/ W/ ,/ 而/ 其它/ 3/ 种/ 处理器/ 均/ 具有/ 较/ 高/ 的/ 活动/ 功耗/ 和/ 空闲/ 功耗/ ,/ 尤其/ 是/ IntelCorei7/ -/ 860/ 处理器/ ,/ 其/ 空闲/ 功耗/ 为/ 51W/ ./ 而且/ 从表/ 2/ 中/ 可以/ 看出/ ,/ IntelPentiumM/ 和/ AMDAthlon/ -/ 64/ 处理器/ 具有/ 相似/ 的/ 电压/ 分布/ 特性/ ,/ 电压/ 变化/ 范围/ 均/ 大于/ AMDOpteron2218/ 和/ IntelCorei7/ -/ 860/ 两种/ 处理器/ ./ 本组/ 实验/ 的/ 详细/ 环境/ 配置/ 见表/ 4/ ./ 环境/ 处理器/ IntelPentiumM/ ,/ AMDAthlon/ -/ 64/ ,/ 网络连接/ QsNetII/ 并行/ 应用/ RobotControl/ ,/ SparseCCR/ 图/ 2/ (/ a/ )/ 和/ 图/ 3/ (/ a/ )/ 展示/ 的/ 是/ 应用/ 分别/ 为/ Robot/ 和/ Sparse/ 时/ 的/ 调度/ 长度/ ./ 从图/ 中/ 可以/ 观察/ 到/ ,/ 首先/ ,/ 当/ 选择/ IntelPentiumM/ 处理器/ 时/ ,/ 4/ 个/ 基于/ 任务/ 复制/ 的/ 调度/ 算法/ 的/ 性能/ 非常/ 接近/ ,/ 均/ 优于/ TDVAS/ ./ 但是/ ,/ 当/ 选择/ 其它/ 3/ 种/ 高功耗/ 处理器/ 时/ ,/ 算法/ EAD/ 和/ PEBD/ 的/ 性能/ 降低/ ./ 这/ 主要/ 是因为/ ,/ 当/ 这/ 3/ 种/ 高功耗/ 处理器/ 被/ 应用/ 于/ 集群/ 环境/ 中/ 时/ ,/ EAD/ 算法/ 和/ PEBD/ 算法/ 为了/ 节省/ 处理器/ 能耗/ ,/ 通过/ 阈值/ 限制/ 了/ 任务/ 复制/ 活动/ ;/ 而/ 选择/ IntelPentiumM/ 处理器/ 时/ ,/ 通信/ 能耗/ 在/ 总/ 能耗/ 中/ 占/ 主导地位/ ,/ 此时/ 这/ 两个/ 算法/ 将会/ 尽量/ 复制/ 任务/ 以/ 改善/ 性能/ ,/ 同时/ 减少/ 通信/ 能耗/ ./ 其次/ ,/ TDS/ 算法/ 和/ ATES/ 算法/ 的/ 性能/ 始终保持/ 最佳/ ,/ 而/ TDVAS/ 算法/ 的/ 性能/ 最差/ ,/ 这/ 主要/ 是因为/ TDVAS/ 算法/ 没有/ 采用/ 复制/ 策略/ ./ 而/ TDS/ 算法/ 通过/ 复制/ 关键/ 路径/ 上/ 的/ 任务/ 改善/ 系统/ 性能/ ,/ ATES/ 算法/ 通过/ 任务/ 复制/ 改善/ 性能/ ,/ 而且/ 能够/ 自动/ 适应/ 用/ 性能需求/ 的/ 变化/ ./ 图/ 2/ (/ b/ )/ 和/ 图/ 3/ (/ b/ )/ 给出/ 了/ 应用/ 分别/ 为/ Robot/ 和/ Sparse/ 时/ 4/ 种/ 处理器/ 的/ CPU/ 能耗/ ./ 从图/ 中/ 可以/ 发现/ ,/ 除/ 处理器/ 为/ IntelCorei7/ -/ 860/ 时/ TDVAS/ 的/ 能耗/ 高于/ TDS/ ,/ 对于/ 其余/ 3/ 种/ 处理器/ ,/ 两种/ 基于/ 动态/ 电压/ 调节/ 技术/ 的/ 算法/ —/ —/ —/ TDVAS/ 和/ ATES/ 较/ 其它/ 3/ 种/ 算法/ 均/ 有/ 更/ 低/ 的/ 能耗/ ./ 当/ 处理器/ 为/ IntelCorei7/ -/ 860/ 时/ ,/ 由于/ TDVAS/ 算法/ 本身/ 的/ 性能/ 较差/ ,/ 而且/ 该/ 处理器/ 的/ 空闲/ 功耗/ 较大/ ,/ 产生/ 了/ 大量/ 空闲/ 能耗/ ,/ 从而/ 影响/ 了/ 总/ 能耗/ ./ 从图/ 中/ 还/ 可以/ 看出/ ATES/ 算法/ 更/ 适合/ 于/ 降低/ 高功耗/ 处理器/ 的/ 能耗/ ,/ 从图/ 2/ (/ c/ )/ 和/ 图/ 3/ (/ c/ )/ 中/ 也/ 能/ 得到/ 同样/ 的/ 结论/ ./ 例如/ ,/ 当/ 应用/ 为/ Robot/ 时/ ,/ ATES/ 算法/ 与/ EAD/ 算法/ 比较/ ,/ 在/ 4/ 种/ 处理器/ 上/ 的/ 能耗/ 分别/ 高/ 4.4/ %/ 、/ 10.4/ %/ 、/ 19/ %/ 和/ 14.1/ %/ ;/ 而/ 当/ 应用/ 为/ Sparse/ 时/ ,/ 则/ 分别/ 高/ 10.1/ %/ 、/ 24.2/ %/ 、/ 25.8/ %/ 和/ 29.4/ %/ ,/ 可见/ ,/ 高功耗/ 处理器/ 更/ 适合/ 采用/ DVS/ 节省/ 能耗/ ./ 由于/ DVS/ 技术/ 主要/ 用于/ 节省/ 处理器/ 能耗/ ,/ IntelCorei7/ -/ 860/ 处理器/ 和/ AMDOpteron2218/ 处理器/ 均/ 具有/ 较/ 高/ 的/ 功耗/ ,/ 因此/ 基于/ DVS/ 的/ 调度/ 算法/ 能够/ 更/ 有效/ 地/ 节省/ 处理器/ 能耗/ ./ 5.3/ ./ 2/ 网络连接/ 的/ 影响/ 第/ 2/ 组/ 实验/ 研究/ GigabitEthernet/ 、/ Infiniband/ 、/ Myrinet/ 和/ QsNetII4/ 种/ 互联网络/ 对系统/ 性能/ 和/ 能耗/ 的/ 影响/ ./ 应用/ 选择/ Sparse/ ,/ 为了/ 公平/ 地/ 进行/ 比较/ ,/ CCR/ 值/ 选择/ 中间/ 值/ 1/ ./ 详细/ 的/ 实验/ 环境/ 配置/ 信息/ 见/ Page11/ 表/ 5/ ./ 图/ 4/ (/ a/ )/ 和/ 图/ 4/ (/ b/ )/ 比较/ 了/ 当/ 处理器/ 为/ AMDAthlon/ -/ 64/ 时/ ,/ 5/ 种/ 算法/ 在/ 4/ 种/ 网络/ 上/ 的/ 性能/ 和/ 能耗/ ./ 从图/ 中/ 可以/ 看出/ ,/ 当/ 互联网络/ 为/ Ethernet/ 时/ ,/ 5/ 种/ 算法/ 所/ 获得/ 的/ 调度/ 长度/ 远大于/ 选择/ 其它/ 3/ 种/ 网络/ 的/ 调度/ 长度/ ./ 相应/ 地/ ,/ 由于/ 较长/ 的/ 通信/ 延迟/ ,/ 以太网/ 消耗/ 了/ 更/ 多/ 的/ 能量/ ./ 环境/ 处理器/ AMDAthlon/ -/ 64/ ,/ AMDOpteron2218/ 网络连接/ Ethernet/ ,/ Infiniband/ ,/ Myrinet/ ,/ QsNetII/ 并行/ 应用/ SparseCCR/ 从/ 实验/ 结果/ 还/ 可以/ 观察/ 到/ ,/ 当/ 选择/ Infiniband/ 网络/ 时/ ,/ 各/ 算法/ 具有/ 最好/ 的/ 性能/ 和/ 最低/ 的/ 能耗/ ./ 对于/ Myrinet/ 和/ QsNetII/ ,/ 各/ 算法/ 性能/ 相似/ ,/ 但是/ 在/ 能耗/ 方面/ ,/ QsNetII/ 总是/ 优于/ Myrinet/ ./ 也就是说/ ,/ 网络/ 活动/ 功耗/ 对系统/ 能耗/ 也/ 会/ 产生/ 实际/ 的/ 影响/ ./ 而且/ ,/ 不同/ 的/ 延时/ 和/ 带宽/ 会/ 对系统/ 性能/ 产生/ 更/ 显著/ 的/ 影响/ ./ 在/ 4/ 种/ 网络/ 中/ ,/ Ethernet/ 的/ 延时/ 和/ 带宽/ 都/ 是/ 最大/ 的/ ,/ 而/ Infiniband/ 的/ 延时/ 和/ 带宽/ 都/ 是/ 最小/ 的/ ./ 从/ 实验/ 结果/ 可以/ 发现/ ,/ 网络延时/ 和/ 带宽/ 对/ 通信/ 时间/ 产生/ 了/ 显著/ 影响/ ,/ 而且/ 对/ 性能/ 和/ 能耗/ 的/ 改善/ 产生/ 负面/ 作用/ ./ 图/ 5/ (/ a/ )/ 和/ 图/ 5/ (/ b/ )/ 给出/ 了/ 各/ 算法/ 在/ 网络连接/ 分别/ 为/ Ethernet/ 和/ Infiniband/ 时/ 系统/ 性能/ 和/ 能耗/ 的/ 比较/ ./ 从图/ 5/ (/ a/ )/ 中/ 可以/ 观察/ 到/ ,/ 4/ 种/ 基于/ 任务/ 复制/ 的/ 算法/ 系统/ 性能/ 非常/ 接近/ ,/ 而且/ 均/ 优于/ TDVAS/ 算法/ ./ 从图/ 5/ (/ b/ )/ 可以/ 看到/ ,/ 算法/ ATES/ 总是/ 具有/ 最低/ 的/ 能耗/ ,/ 并且/ 能耗/ 的/ 改善/ 程度/ 随着/ 网络/ 类型/ 的/ 变化/ 而/ 变化/ ./ 例如/ ,/ 当/ 网络/ 类型/ 为/ Ethernet/ 时/ ,/ ATES/ 在/ 相同/ 实验/ 环境/ 下比/ EAD/ 、/ PEBD/ 和/ TDS/ 平均/ 多/ 节省/ 4.6/ %/ 的/ 能耗/ ;/ 当/ 网络/ 类型/ 为/ Infiniband/ 时/ ,/ 这一/ 改进/ 比例/ 会/ 提升/ 到/ 20.3/ %/ ./ 另外/ ,/ ATES/ 算法/ 在/ 网络/ 类型/ 为/ Ethernet/ 时/ ,/ 比/ TDVAS/ 算法/ 多/ 节省/ 26.1/ %/ 的/ 能耗/ ;/ 然而/ 当/ 网络/ 类型/ 为/ Infiniband/ 时/ ,/ 这一/ 改进/ 比例/ 则/ 降为/ 1.3/ %/ ./ 该/ 现象/ 表明/ ,/ 高带宽/ 、/ 低/ 延时/ 和/ 高功耗/ 的/ 网络连接/ 更/ 有利于/ 动态/ 电压/ 调节/ 技术/ 节约/ 图/ 5/ 处理器/ 为/ AMDOpteron2218/ 时/ 的/ 结果/ Page12/ 能耗/ ;/ 反之/ ,/ 低/ 带宽/ 、/ 高/ 延时/ 和/ 低功耗/ 的/ 网络连接/ 更/ 适合/ 于/ 基于/ 任务/ 复制/ 的/ 策略/ 节约/ 能耗/ ./ 上述/ 推断/ 是/ 合理/ 的/ ,/ 因为/ 动态/ 电压/ 调节/ 技术/ 主要/ 被/ 用于/ 节约/ 处理器/ 能耗/ ,/ 当/ 总/ 能耗/ 中/ 通信/ 能耗/ 占/ 主导地位/ 时/ ,/ 运用/ 动态/ 电压/ 调节/ 技术/ 节省/ 能耗/ 的/ 空间/ 将会/ 很/ 有限/ ,/ 此时/ 运用/ 任务/ 复制/ 策略/ 不仅/ 可以/ 改进/ 系统/ 性能/ ,/ 而且/ 还/ 能/ 节约/ 大量/ 的/ 通信/ 能耗/ ./ 与此同时/ ,/ ATES/ 算法/ 充分/ 了/ 考虑/ 性能/ 和/ 能耗/ 两/ 方面/ 需求/ ,/ 在/ 两者之间/ 找到/ 了/ 最佳/ 平衡点/ ./ 5.3/ ./ 3CCR/ 值/ 的/ 影响/ CCR/ 值/ 作为/ 并行/ 应用/ 的/ 重要/ 特性/ 之一/ ,/ 是/ 本文/ 研究/ 的/ 重点/ 之一/ ./ 第/ 3/ 组/ 实验/ 研究/ 了/ CCR/ 值/ 对/ 性能/ 和/ 能耗/ 的/ 影响/ ./ 实验/ 选择/ 标准/ 网络/ Myrinet/ 搭建/ 网络/ 环境/ ,/ 处理器/ 选择/ AMDAthlon/ -/ 64/ ,/ CCR/ 值/ 从/ 0.1/ 变化/ 到/ 10/ ./ 详细/ 的/ 实验/ 配置/ 信息/ 见表/ 6/ ./ 图/ 6/ (/ b/ )/ 和/ 图/ 7/ (/ b/ )/ 分别/ 描述/ 了/ 5/ 种/ 算法/ 在/ 并行/ 应用/ 分别/ 为/ Robot/ 和/ Sparse/ 时/ 的/ 总/ 能耗/ ,/ 可以/ 得出/ 两个/ 结论/ ./ 其一/ ,/ 与/ 其它/ 4/ 种/ 算法/ 相比/ ,/ ATES/ 算法/ 的/ 能耗/ 总体/ 上/ 是/ 最好/ 的/ ./ 唯一/ 的/ 例外/ 是/ 当/ 应用/ 为/ Robot/ 且/ CCR/ 值较/ 小时/ ,/ TDVAS/ 的/ 能耗/ 要/ 低于/ ATES/ ./ 这/ 主要/ 是因为/ ATES/ 算法/ 虽然/ 可以/ 利用/ 任务/ 复制/ 策略/ ,/ 改善/ 系统/ 性能/ ,/ 但是/ CCR/ 值较/ 小时/ ,/ 计算/ 能耗/ 在/ 总/ 能耗/ 中/ 占据/ 主导地位/ ,/ 因此/ 增加/ 的/ 计算/ 能耗/ 会/ 远大于/ 减少/ 的/ 通信/ 能耗/ ./ 另外/ ,/ 从图/ 6/ (/ a/ )/ 可以/ 看出/ ,/ TDVAS/ 算法/ 的/ 性能/ 一直/ 最差/ ,/ 因为/ 该/ 算法/ 没有/ 采用/ 任务/ 复制/ 策略/ ./ 其二/ ,/ 与/ Robot/ 应用/ 相比/ ,/ ATES/ 算法/ 在/ Sparse/ 应用/ 中/ 节省/ 了/ 更/ 多/ 的/ 能耗/ ./ 例如/ ,/ 与/ PEBD/ 算法/ 相比/ ,/ 当/ CCR/ 为/ 0.5/ ,/ 应用/ 为/ Robot/ 时/ ,/ ATES/ 算法/ 的/ 能耗/ 改进/ 比例/ 为/ 5.9/ %/ ,/ 而/ 当/ 应用/ 为/ Sparse/ 时/ 的/ 能耗/ 改进/ 比例/ 则/ 增加/ 到/ 28/ %/ ./ 这/ 主要/ 是因为/ Sparse/ 是/ 一个/ 并行度/ 较/ 高/ 的/ 计算/ 密集型/ 应用/ ,/ 这一图/ 6/ 不同/ CCR/ 值下/ 并行/ 应用/ 为/ RobotControl/ 的/ 结果/ 特性/ 使得/ 调度/ 到/ 处理器/ 上/ 的/ 任务/ 拥有/ 较/ 多/ 的/ 空闲/ 时间/ ,/ 从而/ 有利于/ ATES/ 算法/ 利用/ DVS/ 技术/ 节省/ 处理器/ 的/ 空闲/ 能耗/ ,/ 而/ Robot/ 则/ 正好/ 相反/ ./ 这/ 表明/ ,/ 动态/ 电压/ 调节/ 技术/ 能/ 有效/ 减少/ 计算/ 密集型/ 应用/ 的/ 能耗/ ./ 图/ 7/ 不同/ CCR/ 值下/ 并行/ 应用/ 为/ Sparse/ 的/ 结果/ 从图/ 6/ (/ a/ )/ 和/ 图/ 7/ (/ a/ )/ 中/ 可以/ 看出/ ,/ 无论/ CCR/ 为何/ 值/ ,/ 对于/ Robot/ 应用/ 和/ Sparse/ 应用/ ,/ ATES/ 算法/ 和/ TDS/ 算法/ 均/ 具有/ 相似/ 的/ 性能/ ,/ 并且/ 均/ 优于/ 另外/ 3/ 种/ 算法/ ./ 例如/ ,/ 当/ CCR/ 值为/ 2/ ,/ 应用/ 分别/ 为/ Robot/ 和/ Sparse/ 时/ ,/ 与/ TDVAS/ 算法/ 相比/ ,/ ATES/ 算法/ 的/ 性能/ 改进/ 比例/ 分别/ 为/ 22.6/ %/ 和/ 34.3/ %/ ,/ 这/ 表明/ ATES/ 算法/ 能够/ 保持/ 较/ 好/ 的/ 系统/ 性能/ ./ 另外/ 还/ 可以/ 观察/ 到/ ,/ TDVAS/ 算法/ 只/ 适用/ 于/ CCR/ 值较/ 小/ 的/ 并行/ 应用/ ,/ 而且/ 其/ 调度/ 长度/ 会/ 随着/ CCR/ 值/ 的/ 上升/ 迅速/ 增加/ ./ TDVAS/ 算法/ 在/ 性能/ 上/ 的/ 劣势/ 会/ 产生/ 大量/ 的/ 处理器/ 空闲/ 能耗/ ,/ 从而/ 影响/ 系统/ 的/ 整体/ 能耗/ ./ 5.4/ 算法/ 时间/ 复杂度/ 比较/ 表/ 7/ 列出/ 了/ 本文/ 涉及/ 的/ 5/ 种/ 算法/ 的/ 时间/ 复杂度/ ./ 算法/ ATESO3/ |/ E/ |/ +/ rh/ +/ log/ |/ V/ (/ )/ |/ |/ V/ |/ +/ ∑/ VEADPEBDO/ (/ 2/ |/ E/ |/ +/ |/ V/ |/ (/ log/ |/ V/ |/ +/ h/ )/ )/ TDSTDVASO/ (/ 2/ |/ V/ |/ +/ |/ E/ |/ +/ |/ V/ |/ log/ |/ V/ |/ )/ Page13/ 从表/ 7/ 可以/ 看出/ ,/ 算法/ ATES/ 的/ 复杂度/ 高于/ 其它/ 4/ 种/ 算法/ 的/ 复杂度/ ./ 究其原因/ 在于/ ,/ ATES/ 算法/ 在/ 运用/ 动态/ 电压/ 调节/ 技术/ 时/ ,/ 采用/ 整数/ 线性规划/ 方法/ 选择/ 各个/ 任务/ 的/ 执行/ 电压/ 或/ 频率/ ;/ 另外/ ,/ 最佳/ 阈值/ 的/ 获取/ 是/ 动态/ 的/ ,/ 因此/ 计算/ 最佳/ 阈值/ 也/ 需要/ 花费/ 一定/ 的/ 时间/ ,/ 上述/ 两点/ 是/ 导致/ ATES/ 复杂度/ 增加/ 的/ 主要/ 因素/ ./ 但是/ ,/ 需要/ 指出/ 的/ 是/ ,/ 尽管/ ATES/ 算法/ 的/ 复杂度/ 高于/ 其它/ 算法/ ,/ 但是/ 在/ 实验/ 中/ 运行/ 稳定/ ,/ 并且/ 其/ 调度/ 长度/ 没有/ 受到/ 任何/ 影响/ ./ 而且/ ,/ 正是/ 由于/ 整数/ 线性规划/ 方法/ 和/ 动态/ 获取/ 最佳/ 阈值/ 策略/ 的/ 使用/ ,/ 才/ 使得/ ATES/ 算法/ 能够/ 在/ 系统/ 性能/ 和/ 能耗/ 之间/ 寻找/ 到/ 最佳/ 平衡点/ ./ 6/ 结论/ 本文/ 提出/ 一种/ 同构/ 集群/ 系统/ 中/ 基于/ 自/ 适应/ 阈值/ 的/ 两/ 阶段/ 能效/ 调度/ 算法/ —/ —/ —/ ATES/ ,/ 适用/ 于/ 支持/ 动态/ 电压/ 调节/ 技术/ 的/ 同构/ 集群/ 系统/ ,/ 旨在/ 满足/ 系统/ 性能需求/ 的/ 前提/ 下/ 降低/ 系统/ 能耗/ ./ 第一阶段/ ,/ 算法/ 采用/ 基于/ 动态/ 阈值/ 的/ 任务/ 复制/ 策略/ ,/ 根据/ 性能需求/ 和/ 环境参数/ 等/ 特性/ ,/ 动态/ 调整/ 并/ 获得/ 最优/ 阈值/ ;/ 然后/ ,/ 利用/ 最佳/ 阈值/ 控制/ 任务/ 的/ 复制/ ,/ 即/ 选择性/ 地/ 复制/ 任务/ 的/ 最佳/ 前驱/ ,/ 平衡/ 系统/ 性能/ 和/ 能耗/ 以/ 获取/ 近似/ 最优/ 分组/ ,/ 使/ 产生/ 的/ 分组/ 在/ 满足/ 性能/ 要求/ 的/ 同时/ 降低/ 能耗/ ./ 第二阶段/ ,/ 将/ 各/ 分组/ 调度/ 到/ 支持/ 动态/ 电压/ 调节/ 技术/ 的/ 处理器/ 上/ ,/ 并/ 充分利用/ 任务/ 之间/ 的/ 依赖/ 关系/ 所/ 产生/ 的/ 空闲/ 时间/ 降低/ 处理器/ 电压/ ,/ 显著/ 降低/ 了/ 计算/ 能耗/ ,/ 提高/ 了/ 系统/ 能效/ ./ 实验/ 结果表明/ ,/ 与/ 现有/ 其它/ 同类/ 算法/ 相比/ ,/ 本文/ 提出/ 的/ ATES/ 算法/ 不仅/ 可以/ 维持/ 良好/ 性能/ ,/ 而且/ 还/ 能/ 节省/ 大量/ 能耗/ ./ 特别/ 是/ 对于/ 具有/ 高/ 并行度/ 的/ 计算/ 密集型/ 应用/ ,/ ATES/ 算法/ 在/ 不/ 影响/ 系统/ 性能/ 的/ 前提/ 下/ ,/ 能耗/ 改进/ 比例/ 是/ 显著/ 的/ ./ 未来/ 将/ 对/ 异构/ 多核/ 集群/ 的/ 能耗/ 管理/ 开展/ 研究/ ./ 

