Page1基于帕累托最优的隐私保护服务定价模型史玉良邵雅丽周中民张宏磊陈玉崔立真(山东大学计算机科学与技术学院济南250101)摘要在云计算环境下,租户向云服务提供商租赁云产品和服务,那么云服务商如何规定一个合理的服务定价使得多租户与提供商都满意成为一个亟待解决的问题.针对该问题,该文提出一种基于帕累托最优思想的服务定价模型,综合考虑多租户与提供商的利益,使用多目标粒子群优化算法得到全局最优的资源分配与服务定价结果.由于迭代算法的效率与服务定价实时性的需求存在冲突,所以该文提出两阶段定价策略:独立定价与集中定价.独立定价阶段,参考历史同需求或相似需求的定价,结合当前资源使用占比给出实时报价;集中定价以一定时间为周期,根据已知的该周期内多租户提出的不同需求,提前使用粒子群算法求出最优服务定价与资源分配策略.实验表明,通过该文提出的定价模型,可以得到一个使多租户和云服务提供商都满意的定价,并且在定价过程中,采用隐私保护技术,有效地保护了租户的数据安全.关键词隐私保护;帕累托;粒子群优化算法;独立定价;集中定价;云计算;网络空间安全1引言随着云技术的飞速发展,云产品或云服务被企业及个人广泛应用.在云环境下,租户的数据需要上传到云服务提供商处,如果对上传的数据不加处理就直接存储,将不可避免地存在隐私泄漏的可能,比如数据库管理员窥探库中数据时造成无意识泄漏或有意将信息卖给竞争对手公司等.因此,提供商不仅会提供云产品或云应用服务,还会提供相应的隐私保护服务.本文前期工作[1-2]中提出数据分块作为隐私保护服务的一种策略,将租户的身份信息与隐私敏感属性分割到不同数据分块中,然后混淆数据分块间的对应关系以保护租户的隐私.该方法较传统的隐私加密与数据泛化方法有着良好的性能并且可以重构原始信息.文献[3-4]给出了不同的数据分块策略生成算法,算法均根据租户个性化提出的隐私约束计算策略.隐私约束越复杂,数据分块个数越多,其上的应用操作需要的连接次数越多,性能相对就越低.想要在隐私安全的同时提高应用性能,就需要获得更多的云计算资源(CPU、内存、缓存等).资源分配的多,服务定价就会越高,但是超过租户承受能力的价格又会造成用户的流失,服务提供商如何规定一个合理的定价使得租户与提供商都满意成为一个亟待解决的问题.在本文前期工作[5]中,提出采用基于纳什均衡的思想对隐私保护服务进行定价,但在纳什均衡点处,参与者虽然对自身状态都满意,但此状态不一定是全局最优的,因此本文采用帕累托最优的思想建立多目标粒子群模型寻求多目标优化的平衡点.帕累托最优思想适合于解决多目标矛盾性问题,而粒子群算法(PSO)较一般的优化算法来说,需要调整的参数少且能较快收敛于最优解.然而,当种群规模较大,迭代次数较多的情况下,粒子群算法耗时依然较大,比如,由于数据迁移、资源的重新分配等因素,50个租户迭代50次所花费的时间数量级以小时计.考虑到现实情况,租户不可能等待数小时再拿到一份定价合同,因此本文将定价分为两个阶段:独立定价与集中定价.独立定价参考同需求(或需求相近)的上一周期历史定价数据,根据资源占比情况快速给出价格;集中定价以一个月为周期,将本月内加入的租户进行博弈,求出最佳资源分配与定价.由于集中定价阶段已知租户的需求,可以在该周期内租户签订正式租用协议之前预先一天或几天进行计算,因此算法的效率对服务影响不大.本文第2节是相关工作;第3节给出隐私保护服务定价模型的相关概念与问题描述;第4节介绍隐私保护服务定价模型的具体实现;第5节是相关实验和分析;最后对本文进行了简要的总结.2相关工作大部分云服务提供商都是按照虚拟机配置以固定比例定价,比如AmazonEC2①和MicrosoftWindowsAzure②对计算资源的使用、存储和数据传输均采用此种策略,不可否认,该策略对于租户来说可以更直观的理解.文献[6]也是基于“按使用付费(pay-as-you-use)”的思想,提出一种虚拟企业模型的概念,租户对云资源的需求稳定时,模型为其分配公有云资源,当租户在短时间内对云资源的需求大量增加时,模型为其分配私有云资源,以此尽可能的降低提供商的开销.然而此种策略只针对中小企业有效,普适性较低.文献[7]综合考虑租户的折扣心理与时间需求因素,给出一个基准模型,为云服务动态地定价.该模型使得服务提供商可以从非理性租户和时间需求紧的租户处获得较大收益.文献[8]利用动态赌博理论建立了一个面向资源提供商的定价模型,该模型既可以吸引大型专业IT资源提供商,又可以吸引个人计算机拥有者加入云银行.以上定价模型着重考虑提供商的收益,而忽略了租户的利益.AmazonEC2后期又提出了一种竞价机制,它根据资源的供求关系来确定价格,这种竞价机制综合考虑提供商与租户双方的利益.文献[9]提出一种自适应的多轮组合拍卖竞价方式,竞标者可以根据历史投标数据即时的调整自己的边际收益率,借以最大化期望值.文献[10]对首轮-二轮竞标算法进行修改以满足动态分配多媒体资源的需求.文献[11]提出一种基于组合双向拍卖的动态资源定价模型,给出云资源分配与定价算法,用户通过响应时间出价,资源提供商根据负载情况要价.竞价机制综合考虑了提供商与多租户的利益,然而忽略了用户的服①②Page3务质量需求.文献[12]利用经济学中的金融选择理论给出一个资源定价模型,该模型将云资源当作潜在资产计价,动态计算资产在不同时间的价格,既能满足用户的服务质量需求,同时最大化租户的利益.上述方法均没有将安全和隐私保护服务作为对资源定价的影响因素来考虑.在云计算环境下,由于不同租户对云安全保护需求和隐私关注程度不同,因此对同一种云安全隐私保护技术的收费也不尽相同.当前不少机构和公司根据不同云安全方案和客户需求制定了各自的云安全保护方案和定价标准[13],例如Zero-Knowledge&Privada公司利用匿名代理技术对客户身份信息进行匿名隐藏,保证客户的隐私信息在上网过程中不会发生隐私泄露,并根据保护级别的不同,收费在每月30美元到40美元之间不等.知名的隐私服务公司TRUSTe则根据客户的需求,发现客户的系统或数据潜在的隐私安全风险,并制定可行隐私保护方案,隐私服务定价的标准取决于客户系统或数据的复杂性.科力斯卫士(QualysGuard)①是全世界覆盖范围最广,部署用户最多的按需订制安全解决方案,它在短短几小时内就可在全世界内任何地方、任何时候部署SaaS模式服务方案,保护用户的隐私.国内云服务商中,阿里云在对外提供基本的云产品和云服务的同时,也推出了一系列的云安全服务(如云盾)供租户按需租赁,并对各种不同的安全服务按保护等级进行定价收费②.上述这些国内外研究和应用成果对本文的研究内容提供了很好的借鉴意义.本文前期研究成果[1-4]证明,在SaaS模式中,基于分块混淆的隐私保护技术可以同时保证应用性能和数据可用性,然而,隐私保护服务等级的高低,隐私约束的复杂度直接影响到服务质量,若想要满足租户对服务的性能需求,必须分配更多的资源,相应收取更高的费用.本文的前期工作[5]提出一种隐私保护策略定制框架,综合考虑隐私保护需求、SaaS应用的性能和租户与SaaS服务提供商的利益,基于纳什均衡思想建立博弈模型,最终通过多租户与SaaS服务提供商之间的博弈获得隐私保护策略,并给出各个租户的资源定价.纳什均衡③又称非合作博弈均衡,指参与者为了自身利益的最大化,都不愿意单方面改变其策略的状态,也就是说,如果参与者单方面改变策略,只会使自己收益更低.可以证明,在纳什均衡点处,参与者虽然对自身状态都满意,然而此状态不一定是全局最优的,可能参与者选择了一个较坏策略的均衡点,但在帕累托最优思想下选择的一定是最优策略的均衡点,从而达到全局最优,即在帕累托最优下租户和服务供应商实现了双赢,利益最大.在定价上本文提出的基于帕累托最优的隐私保护服务定价模型将定价分为两个阶段:独立定价与集中定价.独立定价参考同需求(或需求相近)的上一周期历史定价数据,根据资源占比情况给出价格;集中定价根据多租户提出的资源申请量与隐私保护服务需求建立效用函数,并使用多目标粒子群算法根据最优解的帕累托支配关系进行求解.该模型通过降低资源定价或应用响应时间(即提升服务质量)提升租户满意度的同时最大化资源利用率,以此增加提供商的收益.3隐私保护服务定价模型3.1SaaS应用隐私保护基本模型如图1所示.在SaaS模式下,云服务提供商提供多个应用实例(App)供租户进行定制和租赁,并通过负载均衡模块来平衡服务压力.为了防止租户隐私的内部泄露,在应用层和存储层之间增加了隐私保护层,该层负责对租户的隐私数据进行分块混淆,并将混淆后①②③Page4的数据进行存储.此外,当租户需要访问隐私数据时,调用相应的重构算法对分块数据进行重构并返回给租户.随着租户数量和请求压力的增加,单一的隐私保护模块会导致数据分块和重构时间的增加,进而使服务总的响应时间增加,影响租户SLA约束的实现,因此需要在隐私保护层,部署多个隐私保护模块(PPM)来并行处理多租户数据的分块和重构操作.通常情况下,SaaS模式可以采用3种存储方案存储不同租户的数据,即独立数据库、共享数据库独立数据模式和共享数据库共享数据模式.其中独立数据库方案隔离程度最高,但共享程度最低,使用成本也最高,而共享数据库共享数据模式方案则具有隔离程度最低共享程度最高的特点,适合以最少的服务器支持最多租户的应用场景,使用成本相对较低.由于SaaS应用具有可个性化定制的特点,使不同租户对数据的隔离程度以及应用性能的要求也会不同,而不同的隐私保护需求则使不同租户的分块策略有所不同,最终需要使用不同的存储模式来存储数据.因此,当隐私保护模块对租户数据分块完成后,存储方案映射模块需要根据该租户的分块策略映射到合适的存储模式上,并将分块数据在存储层进行存储.在上述SaaS应用隐私保护基本模型中,应用实例和隐私保护模块具有多实例和多共享的特性,数据存储模式则具有多样性的特点,且因租户隐私需求和应用性能要求的不同,对于不同的存储模式,其共享程度也会不同.共享程度越高,服务商获得相同的利润需要付出的成本就越低,对应租户的定价也就越低,反之,要保持一定的收益成本比,则只能提高单位租户的定价.下面将首先对隐私保护过程中的不同数据存储模式及其共享程度进行介绍,然后详细描述帕累托资源分配的思想,最后通过结合资源分配结果和资源共享程度以及帕累托最优思想,总体描述隐私保护服务定价过程.3.2SaaS数据存储方案传统的SaaS模型采用的是multi-tenancy架构,也是单实例多租户.在这种模型下,服务提供商部署一个应用实例即可满足多个客户的要求.在数据存储方面则采用共享数据库共享数据模式的存储方案,以实现通过最大程度的共享来支持最多的租户.从用户的角度考虑,则需要进行特殊的改造和过滤,使每一个租户感受不到所使用的应用实例和存储模式也在同一时间为其他客户所共享,提升用户的功能体验.在SaaS应用隐私保护基本模型中,由于不同租户的隐私保护需求不同,其最终使用的分块策略也会有所不同,此时,对于相同的租户数据逻辑视图,采用单一的共享数据模式将无法实现所有租户的需求.因此本文在原有SaaS存储方案的基础上进行了扩展,首先根据租户定制的隐私保护策略对数据进行分块,然后根据租户SLA协议和分块策略将其映射到合适的存储模式,最后将分块后的数据在所映射存储模式中进行存储,以实现SaaS模式下的数据隐私保护,同时为隐私服务的定价提供了硬件基础.如图2所示,假设有3个租户{A1,A2,A3},他们具有相同的逻辑表结构,字段tenantID用来记录数据所属的租户,租户{A1,A2}使用相同的分块策略{(user,age),(zipcode,disease)},租户A3使用的分块策略为{(user),(age,zipcode,disease)}.首先根据3个租户的分块策略对租户的隐私数据进行分块,由于租户{A1,A2}使用相同的分块策略,因此在数据存储时可以共享相同的存储模式(C_AX,C_BX),模式中的每一个分块中都需记录数据所属租户的TenantID.由于租户A3的分块策略和租户{A1,A2}不同,因此无法与租户{A1,A2}共享存储模式(C_AX,C_BX),此时需要为租户A3单独创建新的存储模式(C_EX,C_FX)对数据进行存储.创建一个新的存储模式,需要付出一定的计算、存储以及后续维护代价,而随着一个存储模式共享程度的提高,其创建和维护的单位代价也就会越来越低,因此,对应租户的服务定价也应相应降低.本文提出使用因子的概念对资源共享程度进行描述,用f(0<f1)表示,f越大,共享程度越低,定价相应越高.在上述数据存储模式中,为了混淆具有相同隐私约束的不同数据分块中同一条记录的关联关系,采用非完全可信的服务运营商与可信第三方协作的方式,利用乘法同态加密函数生成数据分块间的映射关系,并为同一租户下的同一条记录在不同数据分块上生成相应的CID,用来标识租户数据之间的关联关系.由于攻击者不能获得分块的加密函数,租户数据的隐私获得了良好的隐藏保护.Page5图2隐私保护数据存储方案3.3帕累托最优状态文献[5]提出通过纳什均衡的思想进行服务提供商与租户之间的一对一博弈,博弈时在保证纳什均衡状态的前提下,使得本次参与博弈的双方利益最大化,但最终得到的只是一个局部最优解.纳什均衡适合双寡头博弈的情况,而帕累托最优,综合考虑所有参与博弈的对象,是资源分配的一种理想状态.在帕累托最优状态下,不存在能使某一方变得更好而所有博弈方都没有变坏的调整方式,总体上达到一种资源分配的最优状态,即取得全局最优解.定义1.帕累托最优①(ParetoOptimality)是资源分配的一种理想状态,假定固有的一群人和一些可分配的资源,从一种分配状态到另一种分配状态的变化中,在不使其他人的利益减少的情况下使得至少一个人变得更好称作“帕累托改进”.不存在任何帕累托改进的状态称为帕累托最优状态.定义2.帕累托支配(ParetoDominate,PD),一个向量狌=(u1,…,um)支配(或非劣于)另一个向量狏=(v1,…,vm),当且仅当S(ui)S(vi),(i∈(1,…,m))且P(u)P(v)(其中至少有一个严格不等式成立),表示为uv.其中S(ui)表示根据ui计算得到的租户满意度,P(u)表示根据u计算得到的服务商总利润.由于需要不断进行迭代测试以判断当前状态是否还存在可用的帕累托调整,因此选择一种合适的迭代算法对提高整个定价过程的效率就尤为关键.粒子群优化算法②(ParticleSwarmOptimization)是近些年发展起来的一种新的进化算法,也是一种随机搜索算法,该算法模拟鸟群捕食从无序到有序的特点,找出可行解中的最优解.其中,每个粒子代表一个潜在解,给粒子赋予速度向量,让其在可行空间中飞行,同时,根据自己与同伴的经验时刻调整自己飞行的方向,最终到达平衡状态.由于粒子群优化算法操作简单、收敛速度快,在函数优化、图像处理、大地测量等众多领域都得到了广泛的应用.因此,本文采用该算法来探寻帕累托最优状态.3.4隐私保护服务定价在SaaS模式中,租户需要根据自身情况对应用(组件)进行按需定制,签订SLA协议并提交个性化的隐私保护策略对隐私信息进行保护.基于此模式,本文提出了隐私保护服务定价过程,下面首先给出该过程相关的定义.定义3.云服务需求(CloudServiceDemand,CSD),用来表示租户对SaaS应用租赁情况的形式化描述,用四元组〈ACD,PPS,PR,SD〉表示,其中①②tionPage6ACD为应用定制请求,PPS为隐私保护策略,PR表示应用性能要求,SD表示存储空间需求.定义4.应用定制请求(ApplicationCustomi-zationDemand,ACD),表示租户对各应用组件的租赁情况,用R表示,R={ri|1iM,ri∈{0,1}},其中M表示应用组件数量,ri取0时表示没有租赁基础应用Appi,取1表示租赁了Appi.定义5.隐私保护需求(PrivacyPreservingDemand,PPD),租户存储在提供商处的隐私数据不希望被窃取或泄漏的需求,也可以称为隐私约束,PC{(a1,a2),(a3,a4,a5),…}.隐私约束中的各属性集合如(a1,a2),(a3,a4,a5),…中的属性不能同时出现在同一个数据分块中,否则会泄漏租户的隐私.比如,{姓名,疾病}是一条隐私约束,如果姓名李雷与所患疾病癌症出现在同一个数据分块中,数据库管理员就可以获知,李雷患了癌症这条信息,而这是租户不希望泄漏的隐私信息.定义6.应用性能要求(PerformanceRequire-ment,PR),表示租户对所租赁应用提出的如正确性、响应时间等性能的最低要求.为便于算法描述,本文只使用响应时间作为性能要求的评价指标.定义7.存储空间需求(StorageDemand,SD),表示租户所持有的数据存储到云服务提供商处需要占用的存储空间大小.在图3所示的隐私保护服务定价过程中,云资源分配过程包括基础应用资源分配、隐私保护资源分配和存储资源分配.其中对各类资源的共享程度,用使用因子f(0<f1)进行描述,共享程度越高,使用因子小,反之当只有一个租户使用该资源时,使用因子最大为1.基础应用资源分配主要负责计算租户租赁各应用组件所需要的计算资源量,用Rc表示.设RAppi示服务运营商部署应用组件Appi(1im)所需要的资源,fi表示租户对Appi的使用因子,ri表示租户的应用定制情况,与定义4中描述一致,则租户的基础应用资源需求:Rc=∑隐私保护资源分配负责计算要同时满足租户的隐私保护需求和应用性能所需要的计算资源,用Rp表示.设RPPMiPPMi(1in)所需要的计算资源,fi表示租户对PPMi的使用因子,ri表示是否分配PPMi为该租户提供隐私保护服务,则租户的隐私保护资源分配量:NRp=∑i=1存储资源分配负责为租户数据分配存储空间,用Rs表示.设租户数据量大小用dataSize表示,则Rs与dataSize成正比,表示为Rs=dataSize×l×fi,其中l(l1)为比例系数,用于校正因分块引起的空间消耗,f为数据架构使用因子.设隐私保护过程所用时间为tp,则tp随着分块数和数据量的增加会线性增加,随隐私保护资源的增加而减少,即tp=中constraints为分块数,dataSize为数据量,k1,k2为两个调整因子.设不进行隐私保护时应用的响应时间为t0,则在增加隐私保护处理过程后的总响应时间T=t0+tp.上述模型中,租户向SaaS应用定制平台提交云服务需求CSD,然后将需求信息分发给各资源分配模块计算满足租户需求所需要的最低资源分配;资源分配完成后,由独立定价模块收集资源分配结果并参考相似需求在上一周期的定价实施独立定价;最后在集中定价阶段,根据租户的服务定价与应用性能建立效用函数,并使用多目标粒子群算法根据最优解的帕累托支配关系求解最终的服务价格以及资源分配.4隐私保护服务定价模型的实现本文提出的隐私保护服务定价模型分为两个阶Page7段:独立定价与集中定价.独立定价参考同需求(或需求相近)的历史定价数据,根据资源占比情况给出价格;集中定价根据多租户提出的资源申请量与隐私保护服务需求建立效用函数,并使用多目标粒子群算法根据最优解的帕累托支配关系进行求解.4.1独立定价策略供应商根据相似需求的历史定价数据以及当前资源使用占比进行估价.其中:Pins表示实时价格;Phis表示上一周期相同或相似需求的定价;cost为需求对应的资源成本,见式(5).α是资源使用占比,即当前使用掉的资源量与供应商持有的资源总量的比值,公式如下:其中:use_resource表示当前已分配出去的资源量;all_resource表示供应商的资源总量.由式(1)与(2)可见,α越大,证明供应商已分配出去的资源越多,也就是当前持有的可用资源越稀缺,价格相应要更高.算法1.基于资源使用占比的独立定价算法(HPSPA).输入:round;CSD_RA;margin;stack输出:Pins1.IF(round==0)2.Pins=margin×α+cost;3.ELSE{4.similarity=MAX;5.Phis=0;6.list=stack.peek();7.iterator=list.iteratior();8.WHILE(iterator.hasNext()){9.tenant=iterator.next();10.distance=comparetoHistory(tenant.CSD_RA);11.IF(distance<similarity){12.similarity=distance;13.Phis=tenant.price;14.}15.}16.Pins=(Phis-cost)×α+cost;17.}算法1为独立定价策略,算法输入参数round表示集中定价的轮数,CSD_RA为云资源分配平台根据租户服务需求为其分配的最低资源量,margin为第一次独立定价无历史数据参考时提供商规定的最低利润,stack用以存储每个周期给多租户的定价,其元素为list类型,每个节点存储一个tenant数据,tenant类中有3个成员变量,包括id,CSD_RA,price.其中id用以标记租户身份,price为集中定价算法给出的结果.之所以使用栈结构存储周期数据,是根据栈结构后进先出的特点,栈顶元素永远存储上一周期最新的数据,独立定价算法需要搜索上一周期数据时只需获取栈顶元素即可.第1行判断集中定价进行过的轮数,round等于0,表示尚未进行集中定价,此时使用提供商给定的最低利润margin代替式(1)中的(Phis-cost)计算独立定价(第2行).否则使用式(1)根据历史数据Phis计算独立定价(第15行).算法1中4~15行为计算Phis的过程.第4行变量similarity表示当前租户的需求与历史需求的相似度,用一个最大常量初始化,这里可以赋值65536,similarity值越小,证明需求的相似度越高.第5行变量Phis表示历史定价.算法第6行获取栈顶元素,第7行定义链表遍历指针,8~13行遍历链表,调用算法2比对当前租户需求与历史需求的相似度,赋值给变量distance(第10行),如果当前搜索的节点相似度高于similarity记录的值,则用当前数据赋值给similarity变量,并将租户的历史定价赋给变量Phis.算法1只需遍历一次list链表,复杂度为O(n),实时性较好.算法2.历史数据比对算法comparetoHistory.输入:tenant;CSD_RA输出:distance1.Rc_current=CSD_RA.Rc;2.Rc_history=tenant.CSD_RA.Rc;3.Rp_current=CSD_RA.Rp;4.Rp_history=tenant.CSD_RA.Rp;5.Rs_current=CSD_RA.Rs;6.Rs_history=tenant.CSD_RA.Rs;7.distance=k1×Math.abs(Rc_current-Rc_history)+8.returndistance;算法2用以比对当前租户需求与历史需求的相似度.输入参数tenant表示上一周期参与集中定价的租户,其中保存了其资源分配和定价,参数CSD_RA为本轮独立定价中云资源分配平台为租户分配的资源量.算法1~6行分别取出当前和历史的基础Page8应用资源、隐私保护资源和存储资源分配量,第7行根据当前和历史的资源分配量计算其相似度,参数k1,k2,k3分别表示服务提供商对各类资源的重视程度,一般来说基础应用和隐私保护资源如(CPU、内存和缓存)的价格是要比存储资源(如硬盘)贵很多的,此时在计算需求近似度时要优先考虑基础应用和隐私保护资源的近似度.4.2集中定价策略4.2.1基于帕累托最优的隐私保护服务定价算法集中定价策略根据多租户提出的资源申请量与隐私保护服务需求建立效用函数,并使用多目标粒子群算法根据最优解的帕累托支配关系进行求解.下面首先给出效用函数:式中:Satisfactioni(p,t)表示租户满意度,它由p跟t两个参数决定,其中,p表示租赁资源与服务的单位价格,t表示应用的响应时间;α,β分别为价格跟响应时间的系数,表示租户对价格和响应时间的偏好度,α+β=1.微观经济学中,α/β为边际替代率,它表示租户在满意度不变的条件下,租户每提高一单位价钱所得到的性能提升.S0表示租户的初始满意度.对于提供商来说,提供商的效用函数如下:profit(n)=∑式中:Profit(n)表示服务提供商的收益;pi表示租赁资源与服务的价格,是提供商的收入;costi表示资源的成本,是提供商的支出;Penaltyi表示提供商提供的服务性能没有满足SLA协议中的标准所缴纳的罚金.xi∈{0,1},取0表示给第i个租户提供的服务满足SLA,不需缴纳罚金,取1表示需要缴纳罚金.cost包含计算资源(CPU、memory)的成本与存储资源(disk)的成本.cost=num_cmp×cmp_price+其中:num_storage表示分配给租户的存储资源量;num_cmp表示分配给租户的计算资源数量,它受SLA协议与数据分块数影响.cmp_price为每单位计算资源的价格:storage_price为每单位存储资源的价格:其中:unit_time表示租赁周期;cores表示计算资源数量,一般为CPU核数;capacity表示存储资源数量,一般以G为单位;RC表示相对成本:新的生产商加入云,CRA会对其提供的资源质量进行估分,用S来表示,MP表示相似产品的市场价格,L表示调整系数.由于服务提供商的资源有限,分配给各个租户的资源不能超过提供商拥有的资源总量.粒子群算法中,每次迭代粒子的速度vi与位置xi更新公式如下:vt+1烄烅xt+1烆i=ωvti=xt其中:上标t表示迭代次数;ω表示惯性权重,一般取0.9~0.4线性递减值;c1,c2为加速因子,通常取c1=c2=2;r1,r2在(0,1)之间随机取值;pBest表示个体极值,记录单个粒子发现的最好的位置;gBest表示全体极值,记录整个种群经历过的最好的位置.算法3.基于帕累托最优的集中定价算法(POCPA).输入:种群规模L,最大迭代次数T,租户个数N,租户输出:每个租户的资源分配CSD_RA与定价P_opt1.WHILE(t<T){2.IF(t==0){3.FOR(i=0;i<L;i++){4.initializing(particle[i]);5.pBest[i]=particle[i];6.IF(i==0)7.gBest=particle[i];8.ELSE{9.10.gBest=particle[i];11.}12.}13.}ELSE{14.FOR(i=0;i<L;i++){15.IF(particle[i]pBest[i])16.pBest[i]=particle[i];17.IF(pBest[i]gBest)Page918.gBest=pBest[i];19.}20.}21.IF(gBest=gBestold)22.Break;23.changeVelocity();24.changePosition();25.}算法3为集中定价策略,算法输入L为种群的规模,即设置多少个粒子来搜索最优解,每一个粒子都表示成一个W维向量,向量的每一个元素代表参与定价的某一租户的定价和资源分配.T表示最大迭代次数,N表示参与集中定价的租户个数,CSD表示租户提出的服务需求.算法2~12行为第一次迭代,考虑到独立定价结果的合理性,集中定价的最优解必然会出现在独立定价结果附近,因此粒子的初始位置在独立定价结果附近随机选取(算法第4行).算法13~20行根据定义2帕累托支配关系搜索个体极值和全局最优值,算法第10~16行计算某一粒子的个体极值,若根据当前粒子位置得到的计算结果优于根据当前的个体极值的计算结果则更新个体极值.算法第17~18行用来探索全局最优解.算法第21行表示,若本轮迭代得到的全局最优解与上轮相同,则此解即为最优解.算法23~24行根据式(10)计算下一轮粒子搜索的速度与位置.算法需要两次循环,因此时间负杂度为O(n2),较独立定价算法增加一个数量级.4.2.2帕累托最优均衡点存在性证明由帕累托最优的定义,不存在任何帕累托改进的状态下达到帕累托均衡,即无法使得其他人的利益不减少的情况下至少一个人变得更好.下面通过边际替代率的定义给出帕累托最优均衡点存在的证明.定义8.边际替代率(MarginalRateofSub-stitution,MRS)在维持效用水平或满足程度不变的前提下,消费者增加一单位一种商品的消费可以代替的另一种商品的消费数量.由边际替代率的定义可知,当两种商品的边际替代率相等时,增加一单位一种商品的消费必然会减少另一种商品的消费,即不存在任何帕累托改进,也就是达到了帕累托均衡.定理1.两种资源分配到N个租户的问题存在帕累托最优状态.证明.为N个租户分配两种资源C,D,分别代表计算资源CPU、存储资源disk,已知计算资源与存储资源的总量为C0,D0.设效用函数为其中:α1i,α2i分别代表C,D的分配弹性系数,在α1i>0,α2i>0范围内可随机分配.已知设租户2到租户N的平均效用需求为珡Ui(i=2,…,n),求MAX(U1).令L=U1(C1,D1)+∑分别对Ci,Di求偏导由上可得即上式表示不同租户对计算资源、存储资源的边际替代率均相等,即如果增加一个租户的收益必定会降低另一个租户的收益,于是该状态达到帕累托最优均衡状态.但有时可能会有分配多种资源到多个租户的情况,下面进行推广,针对此情况给出以下定理并证明.定理2.多种资源分配到N个租户的问题存在帕累托最优状态.证明.假设存在n种资源R1,…,Rn,分别代表计算资源CPU、存储资源disk和带宽等,已知n种资源各自的总量分别为R1D,…,RnD.Page10对于N个租户偏好既定,效用函数为其中α1i>0,…,αni>0代表各种资源的分配弹性系数,在范围内可随机分配.提供商提供的各种资源量有限,所以分配给各租户的各种资源总和不大于提供商持有的各种资源量:Ri1+…+RiNRiD(i=1,…,N).设租户2到租户N的平均效用需求为珡Ui(i=2,…,n),求MAX(U1).L=U1(R1L,…,RnL)+对各种资源变量R1,…,Rn求偏导,如下:由上,得出U1R11U1Rn1即1=U1/R1LU1/RiL上式表示不同租户对n种资源的边际替代率均相等,即增加一个租户的收益必定会降低另一个租户的收益,表明该状态达到帕累托最优均衡.4.2.3帕累托最优均衡与纳什均衡前期工作[5]中,我们使用了纳什均衡思想对隐私保护服务定价建立博弈模型,最终确定资源分配与定价,从而生成隐私保护策略.本文使用帕累托最优的思想建立服务定价模型,并使用多目标粒子群优化算法求解出资源分配与定价结果.本文的贡献与创新点在于以下几个方面.(1)文献[5]给出的博弈模型更适合双寡头情况,即两方博弈.因为现实世界中,我们不能强制不同租户与它们的隐私保护服务需求同时到来,因此一个时间点上,只能进行服务提供商与单一租户的博弈.这种情况下,定价服务需耗费大量的计算资源与时间.本文创造性地提出两阶段定价机制,对于异步到来的租户与隐私保护服务请求,我们使用独立定价算法根据历史定价数据快速计算出初始服务价格,一定周期后,再对积累的多租户建立集中定价模型,使用多目标粒子群优化算法根据帕累托支配关系确定最优的服务定价.而文献[5]所采取的定价策略只是根据当前需求确定的租户隐私保护等级、应用性能、租赁费用.(2)资源管理是云计算的核心部分,资源定价是其合理使用的其中一种管理方法.文献[5]给出的博弈模型主要考虑的是资源定价的问题.服务提供商希望资源定价越高越好,而租户希望定价越低越好,通过双方博弈来解决服务提供商与租户双方利益最大化的矛盾问题.本文提出的服务定价模型同样解决了双方利益最大化的问题,同时保证在帕累托最优均衡状态下,资源分配最合理,资源利用率最高.(3)纳什均衡思想是保证在均衡状态下,博弈双方认为当前自己是利益最大化的.而帕累托最优均衡状态下,不仅参与方都达到利益最大化,同时达到全局最优分配.举例如图4所示.图4帕累托最优均衡与纳什均衡下双方的收益横轴纵轴分别表示不同的租户x,y.对于租户y来说,如果他申请32GB内存,对方也申请32GB内存,他们的价格都是2元/GB,如果对方只申请4GB内存,他将按0.5元/GB收费;如果y申请4GB内存,对方申请32GB内存,他将按4元/GB收费,Page11如果对方也申请4GB内存,他们都只需1元/GB.在不知道对方如何选择的情况下,y认为自己申请的多比较划算,同理,x也选择32GB,最终他们将按(2元/GB,2元/GB)收费,此时达到纳什均衡点,参与者都满意,然而这不是帕累托最优的.帕累托最优允许参与者互相传递信息,在x确定y只购买4GB的情况下自己选择4GB收益最高(4GB内存可以满足需求的情况下),此时的均衡状态为全局最优状态,对于租户来说收益最大,对于提供商来说资源利用率最高.5实验为了验证本文提出的基于帕累托最优的隐私保护服务定价模型的有效性和性能,我们搭建了一台服务器,配置为8核CPUInter?Xeon?1.80GHz,8GB内存,1TB硬盘.系统采用RedHatEnterprise图5响应时间分别与隐私约束和分块数的关系图6模拟了提供商对10个租户的服务定价,10个租户的数据量从1T到25T等量递增,隐私约束个数从10个到100个等量递增.为了方便计算,实验中的资源分别为CPU、内存和磁盘,定价范围参考阿里云①,如表1所示.CPU/(元/核)根据式(1)求出对应的响应时间,再根据式(2)求出满足租户提出的性能需求所需的计算资源.分别使用独立定价算法HPSPA、集中定价算法POCPA给出服务定价如图6(a)所示,求出租户的满意度Satisfaction与提供商的收益Profit并以文献[5]提出的纳什均衡算法CIA进行对比.其中,先进行Linux6.2版本,ApacheTomcat作为应用服务器,测试数据库采用OracleDatabase11gRelease2,编程环境选用Eclipse-SDK-3.4.3-win32,编程语言为Java6.为了测试响应时间与隐私保护模块、数据分块之间的关系,在应用服务器端模拟了300次/s服务请求,不断增大隐私保护模块、数据分块的数量观察响应时间的变化,为了简化实验,假设每一个隐私保护模块隐私保护需求和应用性能要求是不变的.从图5(a)中可以看出随着隐私保护模块的不断增加,响应时间不断减小,两者近似线性关系,因为随着隐私保护模块的增加,分配的资源越多,应用处理速度越快.图5(b)中假设数据量不变,很明显分块数与响应时间呈线性正相关.这是因为,租户数据的分块数越多,数据块之间的产生平均连接次数就越多,从而增加了应用的响应时间.集中定价算法,得到的数据作为独立定价的历史参考数据.假设最高收益对应的满意度为80%(实验图形随该值的变化等比例伸缩,数据变化趋势不受影响),以此为基准将全部结果转化成百分值,如图6(b)和(c)所示.图6(a)为独立定价和集中定价阶段不同租户的服务定价,因为10个租户的数据量和隐私保护等级是等量递增的,所以两种算法的曲线整体呈上升趋势.从图中可以看到,独立定价和集中定价阶段对于租户的定价差别并不是很大,原因在于独立定价阶段给出的价格本身就是一个相对合理的价格,在集中定价阶段只是根据帕累托最优对部分租户的价格和资源分配做了调整,保证租户满意度和服务商①Http://www.aliyun.com/Page12图6不同算法下租户的定价、满意度和提供商的收益的情况利润不会降低的同时实现了资源分配的最优.从图6(b)可以看出,随着隐私需求和资源需求量的增加,3种算法下不同租户的满意度呈钟形曲线走势变化,该走向较明显的是HPSPA算法和POCPA算法.对于服务提供商来说,减少资源闲置收益最高,因此对于资源申请较多的租户定价较优惠,因此前期租户的满意度随着需求的增加而增加.由于提供商的资源有限,当租户提出的隐私需求与资源需求过大时,提供商会提高服务定价以避免剩余资源不足分配给其他用户的情况,因此后期租户的满意度随着需求的增加反而呈下降趋势,且下降幅度比前期上升幅度更大.HPSPA算法是参考历史同需求的价格跟当前资源使用占比进行的定价,这里参考的历史数据是POCPA算法得出的,因此前期走势同POCPA算法,随着需求的增加租户满意度也相应增加,后期由于资源使用占比越来越大,而服务定价与资源使用占比的增加而相应提高,因此租户的满意度逐渐下降.POCPA算法下,租户的满意度,整体看,要比HPSPA算法下的高,这是因为POCPA算法下的结果是全局最优的.CIA算法的租户满意度大致相同,同时低于HPSPA算法跟POSPA算法,这是由于CIA算法中,各租户和提供商只考虑自身利益最大化,多方参与者互相牵制,当达到纳什均衡点处,参与者认为当前价格下自己的收益最大,然而并不是一个全局最优的结果.图6(c)为3种算法下提供商的收益比例,很明显,POCPA算法下提供商的收益最高,CIA算法次之,HPSPA算法下提供商的收益最低.正如上段分析的,HPSPA算法给出的价格比较偏重于租户的收益,以此来吸引租户对服务的申请,因此提供商的收益相对较低.POCPA算法综合考虑多方利益,合理分配资源,因此有一个全局最优的收益.CIA算法参与者多方互相牵制,因此提供商的收益相应减少.为了验证本文提出的基于帕累托最优思想的多目标粒子群优化算法的有效性,我们采用CloudSim模拟器对云计算环境进行仿真.实验中模拟500个租户跟1个提供商,每个租户的隐私需求与资源需求随机分配.图7为POCPA算法跟CIA算法的时间开销随租户数增加的变化趋势.租户数目从16个开始,每次增加32个.开始,POCPA算法的时间开销增长缓慢,到112个租户左右,算法的时间开销呈线性增长趋势.当租户数目达到400左右时,POCPA算法开始趋于收敛,即租户数再增加时,多目标粒子Page13群算法的时间开销不会继续加大,因此云服务提供商不必担心因业务规模扩大造成的全局缓存策略生成效率不可控的问题.此时,算法的执行时间是55个小时左右,不到3天,在一个集中定价周期内完全可以接受.可以看到,当租户增加到500个时,CIA算法依然呈线性增长趋势,没有任何收敛现象,可见,粒子群优化算法能够较快收敛于最优解.6总结本文首先分析了当前的服务定价模型,发现现有的模型给出的定价,并不能使租户和云服务提供商同时满意.而且,在定价时,也没有考虑到租户数据的隐私保护问题.鉴于此,本文基于帕累托最优的思想,综合考虑租户基础应用需求和隐私保护需求,提出一种可以使租户和服务提供商都满意的两阶段定价模型,并且对模型最优解的存在性给出了证明.实验结果证明,相比独立定价算法HPSPA和纳什均衡算法CIA,基于帕累托最优思想和粒子群算法的POCPA算法具有最优的租户满意度和最高的服务商利润,实现了租户和服务商的共赢,并且随着租户规模的增加,其算法执行效率也会逐渐收敛,具有更好的实用性.下一步将重点研究租户需求发生改变时,对服务定价和资源分配的最优调整策略.
