Page1两种改进的EDF软实时动态调度算法李琦1)巴巍2)1)(大连理工大学电子与信息工程学院辽宁大连116024)2)(大连测控技术研究所辽宁大连116013)摘要软实时系统中,任务的随意抢占浪费了CPU资源,过多的任务丢失降低了系统的调度性能.文章引入“动态模糊阈值”概念,提出了两种新的类似EDF调度的模糊阈值调度算法.两种算法在任务执行过程中,分别通过缩短和延长当前任务截止期至动态模糊阈值的方法节约资源、提高任务完成率.给出模糊阈值的临界值计算公式,分析算法的可调度性,进行仿真与性能分析比较.结果表明,与EDF调度算法比较,两种算法有效地提高了重要任务的完成率,当截止期被延长时,任务的错失率明显降低,当截止期被缩短时,任务间的切换次数大大减少.因此,新算法提高了CPU的利用率,改善了系统的实时性能.关键词EDF;抢占阈值;语言模糊集;模糊规则1引言EDF)[1-2]调度算法是实时系统中应用最广泛的调度算法之一,涉及的领域包括工业网络、多媒体传输等众多方面.根据任务的抢占特性不同,EDF算法分最小截止期优先(EarliestDeadlineFirst,为抢占EDF调度算法和非抢占EDF调度算法[3]两Page2种.抢占EDF调度算法已被证明是最优的动态调度算法[2],但是,调度周期任务和非周期任务,对于非抢占式调度而言是一个NP难题[3].抢占式EDF虽然调度灵活、CPU利用率高,但内容转换开销远远大于非抢占式EDF,对内存的需求也相对较高[4].目前,阈值法和模糊推理法是提升软实时调度性能的两种主要的方法.文献[4]在文献[5-6]提出的抢占阈值基础上,针对ASOS系统提出了动态抢占阈值调度算法,把阈值算法引入EDF调度算法,分析任务可调度性能,给出任务调度方案.但他仅从整体调度性能上考虑阈值的选取,只考虑系统完成任务的数量,而忽略了任务个体之间重要程度的差异,这可能造成系统中非紧急任务完成出色而重要任务的丢失数量增加,也将有损系统的调度性能.文献[7]详细阐述了模糊的理论基础,为其在调度领域的应用指明了道路.文献[8]用模糊控制器调度实时任务,提出最高模糊优先级优先(HighestFuzzyPriorityFirst,HFPF)调度算法,它是一种新的调度方案,很难整合到已广泛使用的EDF调度算法中,且仅针对非抢占系统,应用范围有所限制.软实时系统中,一定数量的任务丢失不会带来致命的错误,为系统在超载状态下工作提供了便利.这种情况下,优化调度性能,在负载过大时降低对系统资源的需求以及完成更多的任务显得尤为重要.实际问题中,任务的重要程度是实时变化的,它受到多方面的影响,一个任务在不同的时期具有的重要程度也是不一样的,这要求任务的优先级考虑多种条件的作用且能够根据需要灵活地变化.本文提出两种新的基于动态模糊阈值的最小截止期优先调度算法,由模糊控制器融合多种特性对任务的影响并确定阈值大小,利用阈值对正在执行的任务进行截止期长短的再调节,分别在允许范围内虚拟地延长和缩短当前任务的截止期.仿真试验表明,两种调度算法下,重要任务的完成率增加,利用阈值的方法延长当前任务的截止期,系统任务的错失率明显减少,而当前任务的截止期被缩短时,任务的切换次数显著降低.新算法降低了CPU消耗,改善了实时调度性能.2任务模型周期任务集T=(T1,T2,…,Tn)中任务Ti可以用四元组(pi,ei,Di,Ci)来描述,其中pi表示任务Ti的周期;ei表示任务Ti的执行时间;Di表示任务Ti的相对时限;Ci表示任务Ti的关键性系数,取值为1~7这7个整数,数值越小任务越关键.下面给出本文描述任务Ti的特性参数.Ti(k)表示任务Ti的第k次执行,k=1,2,….di(k)表示任务Ti的第k次执行的截止期retik(t)表示系统开始t时刻后任务Ti(k)的剩余执行时间.stik(t)表示系统开始t时刻后任务Ti(k)的剩余空闲时间dli(k)表示截止期延长EDF算法中任务Ti的第k次执行时延长后的截止期.dsi(k)表示截止期缩短EDF算法中任务Ti的第k次执行时缩短后的截止期.Tr软实时系统中,任务的截止期可以一定程度的延长[9],表示任务的容忍度为Tr,则任务Ti(k)的截止期可以延长至dtoi(k)=(1+Tr)×di(k),Tr0(1)U表示任务集的处理器利用率其中dtoi(k)为任务Ti(k)的截止期延长上限.SN表示任务切换次数,指从未完成的任务到抢占任务的切换次数.MDP表示截止期错失率,3模糊阈值EDF调度算法3.1模糊抢占阈值Wang和Saksena提出了抢占阈值的概念[6],扩展了固定优先级的抢占调度.与此同时,模糊规则在实时系统中的应用也逐渐兴起[10-11],它重新界定了任务调度的界限,优化了系统的调度性能.这里我们把模糊阈值的概念引入EDF调度算法,用模糊规则约定阈值系数的大小,动态控制模糊阈值的变化.选定任务的剩余空闲时间和关键性指标用语言模糊集表示,共同作为模糊输入,其中,剩余空闲时间标志着任务完成的紧急程度,它随时间的推移动态变化;任务的关键性指的是任务在整个实时系统中所处的重要性等级,它随任务的产生而产生,且保持不变,是衡量任务重要程度的标准之一.在此基础上,Page3由模糊规则得到该任务的模糊阈值系数,使它的大小和任务自身的特性紧密相关.当前任务将要被新任务抢占时,按照模糊规则计算将要被抢占的任务在当前状态下的阈值系数,并将它的截止期变至它的抢占阈值水平.对于截止期延长的EDF算法,任务截止期与它产生的阈值相等直至任务结束,对于截止期缩短的EDF算法,如果该任务在缩短截止期后仍被抢占,它将恢复到原截止期,等待下一轮的调度.用模糊阈值优化EDF算法的设计图如图1所示.由图1可以看出,算法以EDF调度算法为基础,增加了模糊推理模块,利用阈值对任务截止期进行调节.采用这种增加模块的形式不仅利于实验室仿真,更为算法软件包的设计与开发提供了方便,加快了其在工业网络式控制系统、现场总线控制系统中应用的步伐.阈值的选取直接影响到算法的性能,本文考虑两种情况:(1)利用阈值延长当前任务的截止期.正在执行的任务被抢占后,在容忍范围内延长截止期使得该任务在系统出现空闲后可能继续执行直至完成.(2)利用阈值缩短当前任务的截止期.当发生任务抢占时,根据任务的实际情况适当地缩短当前任务的截止期,按照新的截止期重新比较待抢占任务和抢占任务的优先级,使得当前任务有了不被抢占继续执行的可能.模糊阈值的运用赋予传统的EDF调度算法新的活力,它使得任务的抢占特性富于变化,根据任务的紧急情况、关键程度灵活调整任务的抢占特性.当阈值系数为1时,这两种调度算法都还原为传统的EDF调度算法.3.2调度策略根据截止期的不同变化,提出两种通过动态模糊阈值改进EDF算法调度性能的新方案:截止期被延长的长阈值EDF(LongThresholdEarliestDead-lineFirst,LTEDF)调度算法和截止期被缩短的短阈值EDF(ShortThresholdEarliestDeadlineFirst,STEDF)调度算法.这里的阈值指的是动态模糊阈值.3.2.1LTEDF调度算法LTEDF调度算法利用模糊阈值延长当前任务的截止期.当抢占发生时,计算当前任务Ti(k)的阈值系数,设此时Ti(k)的阈值系数为hi(k)(hi(k)1),判断hi(k)引起的截止期变化是否超出dtoi(k)的范围.如果:则hi(k)引起的截止期变化已经超出了任务Ti(k)容许的范围,此时截止期只能增加到dtoi(k),即dli(k)=dtoi(k).如果:则hi(k)引起的截止期变化没有超出任务Ti(k)容许的范围,此时任务Ti(k)的截止期被延长至dli(k)=hi(k)×di(k).由于截止期被延长,当抢占的任务完成后,如果系统状态空闲,该任务将再次得到执行.hi(k)只对任务Ti(k)起作用,并不影响Ti在其他时段任务的产生以及截止期的变化.dli(k)将作为Ti(k)的截止期参与调度直到任务完成或丢失.此种方案能更大限度地完成任务、减小错失率且更加有效地利用了系统资源.3.2.2STEDF调度算法此算法与LTEDF调度算法设定的阈值系数相反.在STEDF调度算法中,当抢占发生时,首先判断此时当前任务Ti(k)的剩余空闲时间stik(t)是否为零,如果stik(t)=0,即使再次给该任务分配CPU资源,它也将因不满足剩余空闲时间的要求而被丢弃,因此,这种情况无需计算阈值系数,默认Ti(k)已丢弃.如果stik(t)>0,表示此时当前任务Ti(k)的截止期di(k)仍有可缩短的空间.di(k)缩短的最低下限则由STEDF算法产生的阈值和stik(t)共同决定.设该方法下任务Ti(k)的阈值系数为hi(k),为了区分任务Ti(k)的前后变化,设缩短后的剩余空闲时间为stik(t).为了保证缩短截止期后,任务Ti(k)的剩余空闲时间stik(t)能够满足式(4)的要求,hi(k)在hi(k)1的基础上设置下限.缩短后的截止期表示为Page4此时,缩短前的剩余空闲时间表示为缩短后的剩余空闲时间表示为为了满足剩余空闲时间的变化条件,由式(4)和式(7)有由式(6)有把式(5)和式(9)代入式(8)有由式(10)可得阈值系数hi(k)变化的下限,即因此hi(k)的变化范围是STEDF调度算法在设计中,已经要求hi(k)1,为了使hi(k)在式(12)的范围内变化,计算出阈值系数hi(k)后,首先要验证hi(k)是否满足式(11),如满足,则可把hi(k)代入式(5)计算,如果不满足,则按照式(11),取允许范围内的hi(k)的最小值1-stik(t)di(k).在截止期缩短的前提下,STEDF再次判断该任务是否可以继续得到执行.如果此时di(k)比将要抢占的任务的截止期小,任务Ti(k)将继续占用CPU资源,本次抢占不发生;如果缩短后的di(k)仍然大于将要抢占的任务的截止期,则发生抢占,系统资源让给该抢占任务,任务Ti(k)各参数恢复到改变阈值前的状态.此方案有效地减少了任务∑i-1烄j=1t+pi-Dli烅∑n-1烆j=1t+pi-Dit+pi-Di由式(16)可知,任务集在LTEDF调度算法中同样可以调度.定理2.按截止期降序排列的周期任务集T=(T1,T2,…,Tn)如果满足之间的切换,更有利于系统中重要任务的完成.3.2.3LTEDF和STEDF算法调度性能和复杂度LTEDF和STEDF调度算法采用模糊阈值系数作为系统对当前任务的截止期的调节手段,使得任务在完全可抢占和不可抢占之间灵活变化.虽然两种算法的截止期有所改变,但它们仍维持了较好的调度性能.定理1.周期任务集T=(T1,T2,…,Tn)在t=0时刻同时释放,若任务集在EDF算法中可调度,则在LTEDF算法中仍然可以调度.证明.在截止期与任务的周期不等的情况下,设周期任务集T=(T1,T2,…,Tn)在EDF调度算法中可调度.则任务集可调度的充分必要条件是[12-13]LTEDF调度算法中,由于任务周期没有发生变化,任务的总利用率不变,任务是否可调度仅取决于是否满足式(13)中∑n求.抢占发生时,当前任务Ti(k)的截止期增加到了dli(k),设此时相对截止期为Dli(k),则相对截止期变化量ΔDi表示为式(14).ΔDi=Dli(k)-Di=dli(k)-di(k)>0(14)由式(14)有Dli(k)=Di+ΔDi=Di+dli(k)-di(k)(15)则,式(13)的变化可由式(16)所示.piei∑npieit,pieit,则它在STEDF调度算法中可以调度.证明过程如文献[4]所述.由定理1和定理2可知,EDF可调度是LTEDF可调度的充分条件,而STEDF的可调度条件与非抢占EDF相同.Page5EDF算法中由于涉及到对时限的排序,其复杂度为O(logn)[14].LTEDF和STEDF调度算法拟采用查表的方式,根据模糊输入查找有限次数的表格即可读取阈值系数,因此,查表部分的算法复杂度为O(1),总体而言,两种算法的时间复杂度没有改变.4性能仿真分析4.1阈值系数等级阈值系数与任务的特性有着密切的关系,它直接反映了该任务此刻在系统中的总体重要程度,本文采用模糊推理求取这两种算法的阈值系数.模糊输入为任务的关键性和剩余空闲时间.这里我们选定最为常用的三角形隶属度函数作为模糊输入和模糊输出的隶属度函数.分别用三个语言模糊集对应不同的输入优先级等级.任务的关键性用“重要”、“一般”、“不重要”来描述,任务的剩余空闲时间用“短”、“中”、“长”描述.得到各自的三角型隶属度函数,如图2(a)、图2(b)所示.为了节省系统的运算资源,模糊控制器的输出不再用隶属度函数描述,而是直接用具体的数值表示.这里定义LTEDF调度算法的模糊输出为1、1.25、1.5、1.75、2,STEDF调度算法的模糊输出为0.01、0.25、0.5、0.75、1.采用构建模糊逻辑控制表的方法列出各种情况下输入和输出的对应关系,两种方法的控制策略分别如表1、表2所示.发生抢占时,系统当前任务根据其特性得到模糊阈值系数,用模糊阈值代替其截止期参与调度.以LTEDF调度算法为例,如果当前时刻正在执行的任务Ti(k)的stik(t)为20,Ci为4,则若此时发生抢占,从图2(a)知Ti(k)的剩余空闲时间隶属度为中,从图2(b)知Ti(k)的关键性隶属度为一般,查询表1,得到它的阈值系数为1.5.STEDF模糊逻辑控制表的查询方法与此相同.C\ST重要一般不重要C\ST重要一般不重要如表1和表2所示,第1行表示任务空闲时间的等级,第1列表示任务关键性程度的等级.LTEDF和STEDF调度算法中,任务按照各自的特点,在表中找到自己的阈值系数.表1和表2所示的逻辑表中,任务最多查找3×3次则可得到阈值系数,因此,查表部分算法的复杂度为O(1).4.2性能仿真模糊阈值对EDF调度算法的性能优化是显著的.为了说明加入模糊阈值后给EDF调度算法带来的影响,采用EDF、LTEDF、STEDF3种调度算法进行比较分析.在相同任务模型情况下,分别按3个方案得到仿真结果,比较其调度性能之间的差异.实验采用MATLAB软件进行仿真.每次随机产生5个任务,记U(x,y)表示x、y之间随机分布函数,设任务Ti的周期pi的取值范围为U(5,60),Ci取值范围为U(1,7),ei取值范围为U(1,pi),设定初始时刻任务的相对时限Di与任务的周期pi相等,5个任务在t=0时刻同时释放.任务的周期选取的随意性决定了它们的最小公倍数因过大而不适合作Page6为仿真的持续运行时间,这里限定每次仿真运行的持续时间为1000个时间单元,后面所有的仿真结果都是由100次独立仿真结果的平均值得到.在LTEDF调度算法中,Tr决定了阈值的变化空间,Tr取值不同,系统的性能将产生差异.选取Tr的值为0.2、0.5和1,在相同情况下产生各自的任务错失率,如图3所示.图3不同Tr下LTEDF调度算法错失率对比从图3中可以看出,在负载小于1的情况下,各调度算法的错失率均为零,当负载大于1时,Tr=0.2和Tr=0.5的LTEDF调度算法错失率曲线分别在Tr=1的LTEDF调度算法和EDF调度算法之间.即LTEDF调度算法的任务错失率随着Tr的增加而减小,但均小于EDF调度算法.在Tr=1情况下,LTEDF调度算法的错失率最小.取Tr=1,分别对EDF、LTEDF、STEDF3种调度算法进行调度性能分析,在相同情况下得到各自的错失率以及切换次数.错失率对比如图4所示,从图中可以看出,3种算法的MDP具有相同的变化趋势,当负载小于1时MDP几乎为零,当系统过载后,MDP随着负载的增加而增加.但过载时三种调度算法的错失率各不相同,STEDF算法的错失率与EDF调度算法相差无几,这是因为在STEDF算法中,重要的当前任务采用缩短其截止期的方法被率先确保完成,但与此同时,本该抢占当前任务的抢占任务却可能因任务的执行超过截止期而丢失,而LTEDF调度算法由于当前任务在抢占任务完成后可能再次执行从而获得了最低的错失率.3种调度算法的切换次数对比如图5所示.在相同情况下,3种算法切换次数变化趋势相同,切换次数在负载为1附近时达到最大,从图5可知,LTEDF调度算法的切换次数略小于EDF调度算法的切换次数,这是因为LTEDF算法中,重要的当前任务在抢占发生时其截止期得到了一定程度的延长,这不仅仅为该任务在抢占任务完成后继续执行直至完成提供了条件,延长的截止期也因相对较小,在一定程度上减少了与后续任务出现任务切换的概率.而STEDF调度算法由于避免了重要的当前任务被抢占,其切换次数明显小于EDF调度算法和LTEDF调度算法.图4和图5分别描述了相同情况下任务的错失率和切换次数随负载变化的情况.从仿真结果图可以看出,LTEDF和STEDF分别改善了EDF的MDP和SN特性,在应用中可以根据实际需要做出选择.LTEDF和STEDF调度算法采用动态模糊阈值的方法改进EDF调度算法的性能,不仅能减少任务的错失率和切换次数,模糊控制器中把任务的剩余空闲时间和关键性作为隶属度,提高了重要任务完成的概率.图6对3种调度算法重要任务的完成比率进行了比较.如图2所示,选择完成时剩余空闲时间为U(0,10),关键性为1、2的任务为重要任务Page7进行仿真结果统计,仿真条件同上,从图中可以看出,在负载较轻时,LTEDF和STEDF算法重要任务的完成率与EDF调度算法相等,但随着负载的增加,完成率的差距越来越明显,LTEDF、STEDF调度算法重要任务的完成率普遍高于EDF调度算法.5结论本文针对软实时系统中EDF调度算法存在任务丢失和任务切换的情况,提出两种改进的动态模糊阈值EDF调度算法,用模糊逻辑求取抢占阈值系数,把任务本身的特性与阈值的选择紧密关联起来.分别用LTEDF减少任务错失率,用STEDF降低切换次数,与此同时,利用阈值与任务特性的关系提高重要任务的完成率,仿真实验结果验证了算法的有效性.LTEDF和STEDF两种算法仅适用于改进软实时系统的抢占调度,且减少任务的错失率和降低任务的切换次数不可兼得,要根据需要优化的参数不同选择不同的算法.动态模糊阈值方法不仅可以用于改进EDF调度算法,在实时调度算法尤其是动态调度中,它都能够模糊化调度的标准,提升或降低调度的要求,最终实现优化调度策略的目的.它的通用性将给它带来广阔的应用前景.将动态模糊阈值方法推广到更多的实时调度算法中,通过控制任务的抢占和丢失达到更好的调度效果,是本文下一步的研究工作.
