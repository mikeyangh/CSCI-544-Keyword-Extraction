Page1基于四边形斯坦纳树的无线传感器网络连通恢复陈洪生1),2)石柯1)1)(华中科技大学计算机科学与技术学院武汉430074)2)(湖北科技学院计算机科学与技术学院湖北咸宁437005)摘要在恶劣环境下无线传感器网络的节点和通信链路常常会失效,致使网络被分割为很多分离的分区,因此通过布置尽量少的中继节点实现高健壮性的连通恢复对于维持网络的正常运作必不可少.对于一个被分割的无线传感器网络,找到相应的位置布置最少中继节点恢复连通是一个NP难题,在实际应用中只能采用启发式算法.文中提出了一种新的基于四边形斯坦纳树的算法来恢复网络连通.此算法首先探测出各分区并确定各分区的代表节点及其位置,然后寻找合适的四边形连接分割的网络分区,确定这些四边形的斯坦纳点;对无法用四边形连接的各连接部分用三角形斯坦纳树或最小生成树的方法连接;最后沿着斯坦纳树的边在相应位置布置中继节点,实现网络连通的恢复.大量的仿真实验表明文中提出的方法能够减少所需中继节点的数量,恢复后的拓扑结构中节点的连通度更高,容错性更好.关键词无线传感器网络;连通恢复;四边形斯坦纳树;启发式算法;拓扑结构1引言随着电子技术的飞速发展,无线传感器网络WSN(WirelessSensorNetwork)已经得到越来越广泛的应用,并且WSN真正实现了无处不在的理念,因此不管是在民用还是特殊行业,特别是在一些恶劣环境下如矿井监测、环境监测、军事侦查、水下监测、海岸线监测和目标跟踪等方面得到广泛应用.由于传感器自身资源的限制,其能量有限,并且在恶劣环境下很容易被损坏,而在WSN中网络的连通性非常重要,特别是在如军事、环境监测等行业中有可能由于网络的损坏导致不可估量的损失,因此在出现网络分割时能否及时准确地恢复网络连通非常重要.在网络遭到大规模损坏时,最关键的问题是如何部署或移动最少的节点到关键的位置恢复网络的连通,此问题已被证明是NP问题,因此几乎所有文献在解决这一问题时都采用启发式算法寻找部署位置,其中最常见是斯坦纳最小树SMT(SteinerMini-mumTree)算法,此算法在很多情况下会退化为最小生成树算法MST_1TRNP(MinimumSpanningTreebasedonasingle-TieredRelayNodePlace-ment)[1-2].最近也有很多研究者提出了其它一些近似算法部署中继节点,如基于特定的蜘蛛网式模型、网格模型CORP(Cell-basedOptimizedRelaynodePlacement)布置中继节点[3-4],基于斯坦纳三角近似算法FeSTA(FederatingnetworkSegmentsviaTriangularsteinertreeApproximation)布置中继节点等[5].本文提出的算法基于四边形斯坦纳树,获取各个分离分区的信息,把各个分离的分区假设为点;然后将所有可能连接各个分区的四边形列举出来,从小到大寻找符合求解四边形斯坦纳点要求的四边形,找出相应的斯坦纳点,通过布置相应中继节点使此4个分区实现连通;接着用上述同样方法继续寻找其它四边形连接4个分区;最后对不能用四边形方法连接的各连接部分用基于斯坦纳三角近似算法(FeSTA)或最小生成树算法(MST_1TRNP)布置中继节点到相应的位置,实现整个网络连通.本文第2节介绍相关工作;第3节对系统模型进行描述;第4节对本文提出的方法进行了详细阐述;第5节通过实验模拟与其它算法进行比较并进行分析;最后对全文进行总结.2相关工作当前无线传感器网络连通恢复的方法大致可分为部署新的中继节点到失效节点或失效区域位置实现连通恢复和移动原有节点实现连通恢复.移动原有节点实现连通不需重新布置节点,但需要节点具有一定的可移动性.Abbasi等人[6]提出通过运动协助实现连接恢复,并提出了单连通和双连通的算法.算法的基本思路是先找到失效节点,判断失效节点是否为边界节点,其邻居节点是否为边界节点,失效节点是否会导致剪裁顶点(cutvertex)的出现;然后依据最小节点度、最短距离和最高节点编号等因素选择相应节点移动到特定位置;如果节点移动到指定位置后满足连通要求就停止移动其他节点,若不满足要求则再移动其邻居节点中的边界节点,如此继续下去,直到满足要求为止.Wang等人[7]对上述提出的算法进行了剖析,并且指出了其中一些相关理论的缺陷,提出了一种集中式算法实现网络的K连通恢复.Akkaya等人[8]提出了基于约束移动的分布式连接恢复方法,能够在单个节点失效和多个节点失效时恢复连接,核心是基于连接约束集确定每个节点邻居集中的支配节点及其是否为凸顶点,在节点失效时判断哪个节点可作为替换节点,然后进行移动,从而恢复网络连通.当有多个节点失效时,采用加锁机制解决可能出现的路径和替换节点冲突.Mi等人[9]提出了一种基于K跳近邻局部信息恢复网络连通的策略,该策略主要包括两步:一是首先进行分布式失效节点探测然后指派最好的可用候选者节点进行恢复操作;二是通过设计好的移动控制器来控制选定的候选节点移动到期望位置,从而避免内部节点的冲突和网络的再分割.Younis等人[10]提出了一种分布式的连通恢复算法,算法RIM(RecoverythroughInwardMotion)在节点失效后可以有效地恢复网络连通.同其它算法不同,RIM不进行失效节点的分析和评估,而是直接触发局部恢复处理过程迁移失效节点的邻居节点.为了减少消息负载,RIM选择移动距离最小的节点移动.Imran等人[11]提出了DCR(DistributedConnectivityRestoration)和RAM(RecoveryAlgorithmforMul-tiplenodefailures)两种算法分别对单个和多个节点失效进行网络连通恢复,采用提前预测和及时响应相结合的混合算法进行恢复,并且分别通过一些Page3参数来判定一跳邻居内的备用节点.移动节点的方法多是从单个节点失效开始研究,再扩展到多个节点失效的情况.当单个或少数节点失效时,移动节点的方法非常有效,但当大规模节点失效时,使用此方法需要移动的节点过多,要求大多数节点可移动,也可能造成相当大的能量损耗,从而缩短节点的生命周期,不利于延长网络的寿命.重新部署新的中继节点实现连通对节点没有特殊要求,因而也是本文关注的重点.该方法需解决的难题是中继节点应该部署在什么位置从而以最少的中继节点实现连通,该问题已被证明是NP难题,因此只能采用启发式算法达到近似最优.Efrat等人[12]提出了一种单层网络架构下的中继节点部署算法,将节点的通信范围抽象为单位圆,基于单位圆的区域重叠来确定中继节点的最佳放置位置.Pandey等人[13]研究了二进制整数线性规划、遗传算法启发式算法解决中继节点部署问题的有效性.Lee等人[14]使用最小斯坦纳树方法提出了分布式中继节点布置算法DORMS(Distributedalgo-rithmforOptimizedRelaynodeplacementusingMinimumSteinertree),通过构造失效区域的斯坦纳树来减少中继节点的数量.Senel等人[15]提出的最佳连接恢复CIST(ConnectedInter-SegmentTopology)方法是一种连接多个分区的启发式节点部署方法,该方法在构建连接的内拓扑时将所有位于分区边界的节点都看作是分界点,然后找到相邻3个分区的边界节点构成三角形,再通过三角形斯坦纳树的方法部署节点,从而使得所需节点数比直接通过最小生成树方式连接所需的数量要少.Senel等人[3]提出使用蜘蛛网式的布局方法,首先通过凸壳算法确定各个分区的大概范围边界,然后计算出中心位置,再从每个分区中选出一个代表性的节点,连接每个分区中的节点和中心位置节点形成多条线段,接着根据该线段的欧氏距离从大到小排序,按照顺序沿线段布置中继节点,并且采用左右连通的方式,直到所有分区都被连接在一起.Lee等人[4]提出了基于网格的分布式中继布置节点算法(CORP),这种方案基于网格模型根据分区所在的网格位置,由外向内画长方形找到最短路径布置额外节点以建立各个分区之间的连接,具体步骤包括基于最佳邻居节点的选择和剪裁,此算法所需的中继节点数较多,但是连通性和覆盖性很好.Lee等人[16]也提出了一种基于网格模型的方法,以每个分区中节点的剩余能量作为评价函数,同时考虑服务质量和所需节点数,通过布置尽量少的中继节点满足连通性和服务质量的要求.Lloyd等人[1]提出的最小生成树(MST_1TRNP)算法首先使用经典的普利姆算法或克鲁斯卡尔算法寻找最小生成树,然后根据每条边的长度与中继节点通信半径的大小,沿着生成树的边在相应位置部署中继节点.Senel等人[5]提出了基于三角形斯坦纳树的FeSTA算法,首先寻找合适的三角形连接分区,然后连接剩下的无法用三角形连接的分区,最后通过三角形斯坦纳树与最小生成树的比较,对未考虑到的情况进行检测以优化斯坦纳树.该算法的时间复杂度为O(n4),其中n为分区个数.该算法在所需的中继节点个数、平均节点连通度、平均路径长度、覆盖范围等方面同其它几种算法相比具有优势.本文提出的算法采用四边形斯坦纳树,同三角形斯坦纳树相比进一步减小了所需中继节点的数量,并提高了恢复连接后网络节点的平均连通度.3系统模型本文研究的传感器网络部署在森林、战场、沙漠、高山等恶劣环境中监控指定区域,传感器节点是静止的,其感知半径和通信半径都是固定不变的.传感器节点只要位于其通信半径范围之内就可以相互通信,并最终将收集到的数据传送到基站进行相应处理.传感器节点能够通过相关的定位算法获取自身的位置信息.整个网络采用分簇式层次拓扑结构.在一般环境中,传感器节点可能会因为能量耗尽而失效,但大多数情况下仅会导致少数节点失效.若不影响网络连通,可以不做任何处理,否则也只需通过探测算法找到相应失效节点重新布置少量节点即可.但在本文关注的恶劣环境中,除了能量耗尽失效,传感器网络节点也会由于外界环境的影响(如炸弹等攻击)出现大规模失效,在此情况下就会导致整个网络遭到破坏,出现如图1所示的场景.Page4在这种情况下实现网络连通要求部署新的节点,不管是新部署同原有节点相同的传感器节点还是特定的用于通信的中继节点,增加节点并进行部署都需要一定的成本,因此使用最少的节点实现网络连通是本文的首要目标.这里将所有新部署的节点称为中继节点,并假设这些节点都是静止的且具有相同的通信半径R.传感器网络遭到破坏后形成的被分割的孤立子网络被称为分区.当传感器网络分割成多个孤立的分区后,传感器节点通过相互通信能够获取处于同一分区的其他节点的信息,并选取合适的代表节点,将分区抽象为代表节点的位置.网络连通问题抽象为图连通问题,即给定n个分区,如何找到一种方法布置一定数量的中继节点将n个分区连接起来.求解该问题需要网络的全局分区信息,因此需要借助特定的巡视设备将分区的信息传输给基站,基站进行网络连接的恢复.在很多实际应用中定期的巡视是必要和可行的,如在生态环境监测中定期的人员巡查,战场中无人机的定期侦察等.4基于四边形斯坦纳树连通恢复算法本文提出的算法首先进行分区探测,确定每个分区的代表节点及其位置,然后再通过巡视设备将各分区及代表节点信息传输到基站,最后再根据收集到的各代表节点位置信息使用四边形斯坦纳树算法将各分区连接在一起,使整个网络实现连通.4.1分区探测与代表节点确定如何探测孤立的分区及如何找到每个分区的代表传感器节点,是在部署中继节点之前必须要解决的两个问题.为此,我们使用构造连通支配集的方法构造出每个孤立分区的连通子树,每个未被损坏的节点从而可以确定自己属于的分区并了解分区的信息.对于每个孤立的分区,我们取连通子树中节点度最大(邻居节点最多)的节点作为每个分区的代表节点.具体实现过程如下.首先使用相关的分簇算法选取簇头节点,然后簇头节点广播消息给其邻居节点,经过一段收敛时间后收到各邻居节点的回复消息,根据收到的回复消息(其中包含邻居节点的位置信息)取距离此簇头节点最远的邻居节点作为支配节点.相应的支配节点继续执行上述过程,最终可以确定每个孤立分区的支配集,进而形成多个连通子树.最后取连通子树中节点度最大(邻居节点最多)的节点作为每个分区的代表节点,若有多个节点度相同的节点,则取ID小的节点作为代表节点.确认了每个分区的代表节点后,将代表节点的位置信息及节点ID广播给分区中的每个节点,使得同一分区中的每个节点都存储有代表节点的位置信息和ID.当巡视设备对所部署监控区域进行巡视收集时,巡视设备只要遇到分区中的一个节点即可将获取此分区的代表节点位置信息及ID,最终将所有分区代表节点信息传到基站.4.2四边形斯坦纳树构造算法(QuadrilateralSteinerTreeAlgorithm)4.2.1算法基本理论本文用到的关于斯坦纳树的基本理论和相关术语如下.斯坦纳点:对于平面中给定的n个点,在保证求得一个连接这n个点的最小树时,需要找到一些中间点,基于这些中间点与给定的n个点构成的顶点集构造出一个最小树,这些中间点称为斯坦纳点.三角形的斯坦纳点:若三角形的三个内角都小于120°则一定可以在此三角形内部找到一点,此点与三角形三个顶点的夹角均为120°,则此点即为三角形的斯坦纳点.退化型三角形:若三角形有一内角大于120°,则称为退化型三角形.确定三角形的斯坦纳点的方法是分别对三角形任意两边向外作等边三角形,然后再对每个等边三角形作外接圆,则两个外接圆在三角形内部的交点即为斯坦纳点.如图2即为构造三角形中斯坦纳点的示意图,其中F点即为此三角形的斯坦纳点,相关证明在文献[17]中已证.凸四边形:没有内角大于180°,把四边形的任何一边向两方延长,其它各边都在延长所得直线的同一旁,这样的四边形叫做凸四边形.波拉克定理:设A、B、C、D为4个点,它们构成的四边形的两条对角线的交角分别为θ和180°-θ,Page5当此四边形的两棵斯坦纳树都存在时,若θ90°则较短的那棵树应该位于两条对角线的交角为θ的区域.下面以图3为例说明构造四边形斯坦纳点的过程,首先必须保证四边形为凸非退化型四边形,再根据波拉克定理确定较短的一棵树,即θ90°的区域,然后分别对图3中的边AD和BC向外作正△ADE和△BCF,并连接两个正三角形的另外两个顶点E和F,最后再分别作正△ADE和△BCF的外接圆,与直线EF分别相交于G和H两点,则G和H即为所求斯坦纳点.相关证明在文献[17]中已证.平均节点度定理:在同一拓扑结构下,若仅考虑所布置的中继节点,则有AvND(AverageNodeDegree)四边形斯坦纳树>AvND三角形斯坦纳树>AvND最小生成树.证明.假设四边形斯坦纳树所需节点数为m,三角形斯坦纳树所需节点数为n,最小生成树所需节点数为q.则根据上述四边形斯坦纳树和三角形斯坦纳树及最小生成树的构造过程易知:四边形斯坦纳树所部署的中继节点中节点度为3的节点有2个,其它节点度都为2,三角形斯坦纳树所部属的中继节点中节点度为3的节点有1个,其它节点度都为2,最小生成树所部属的中继节点中节点度为3的节点没有,所有节点度都为2.因此容易得到3种情况下平均节点度:AvND四边形斯坦纳树=(3×2+(m-2)×2)/m=2/m+2,AvND三角形斯坦纳树=(1×3+(n-1)×2)/n=1/n+2,AvND最小生成树=2q/2=2.又因为mn,故AvND四边形斯坦纳树>AvND三角形斯坦纳树>AvND最小生成树得证.下面以一个实际场景对三角形斯坦纳树、四边形斯坦纳树和最小生成树这三种连接方法进行对比和分析,假设整个网络在某一时刻被分割为4个孤立的分区,如图4所示,小圆点表示传感器节点,T1、T2、T3和T4对应的大圆点表示每个分区的代表节点,其它的大圆点代表找到的斯坦纳点及部署在边上的中继节点.图4~图6分别描述了对应的三角形斯坦纳树、四边形斯坦纳树和最小生成树,图4中的S是三角形的斯坦纳点,图5中的S1和S2是四边形斯坦纳点.假设L是分别求出的树的距离之和,则由图4~图6可知.L三角形斯坦纳树=Z0+Z1+Z2+Z3=15.39L四边形斯坦纳树=Z0+Z1+Z2+Z3+Z4=15.11L最小生成树=Z0+Z1+Z2=15.88由此可见在相同拓扑结构下,L四边形斯坦纳树<Page6L三角形斯坦纳树<L最小生成树,因此沿四边形斯坦纳树的边布置中继节点相比其他两种所需的节点数量更少.若中继节点的通信半径为R,所需节点总个数Sum为Sum三角形斯坦纳树=|ST2|)-1Sum四边形斯坦纳树=|S1T2|Sum最小生成树=|T1T2|假设中继节点通信半径R为1.7,则根据上述3个公式可分别计算出上述图4~图6中所需节点个数为Sum三角形斯坦纳树=8,Sum四边形斯坦纳树=7,Sum最小生成树=8.具体部署情况如上图4~图6所示,由此也可以看出四边形斯坦纳树的方法所需中继节点数较少,根据上述图中各中继节点的部署情况,很容易计算出图4~图6这3种拓扑结构的平均节点度,故得到3种结构的所有节点(包括部署的中继节点和原有的传感器节点)平均节点度如下:由以上结果可以看出四边形斯坦纳树平均节点度最高,由此可见,本文提出的四边形斯坦纳树方法所构造的网络拓扑结构不仅使用的中继节点数目少,而且网络鲁棒性也很好.4.2.2算法的主要思想伪代码及实例分析本文提出的四边形斯坦纳树算法是一种启发式算法,首先根据已探测出的各分区位置信息,确定能够连接各个分区的四边形组合,通过将满足条件的四边形按周长排序,按顺序确定各个四边形的斯坦纳点,构造斯坦纳树,最后沿斯坦纳树边部署中继节点实现整个网络的连通恢复.我们将以图7所示的网络为例描述该算法的具体步骤.在图7中,a、b、c、d、e、f、g、h、i、j、k、l和m代表13个分割的分区.(1)将所有分区标记为未连接,初始拓扑结构如图7所示.(2)枚举连接所有分区的非退化凸四边形组合,计算其周长并根据周长从小到大排序,放在一列表中.(3)从前往后依次处理列表中的每个四边形.如果该四边形4个顶点代表的分区只有一个或都没有与其它分区连接(该四边形的连接数小于等于1),则根据波拉克定理确定较短的斯坦纳树,使用四边形斯坦纳树构造方法,找到斯坦纳点,然后沿着斯坦纳树的边布置中继节点,并将四边形4个顶点代表的分区标记为已经连接,合并这4个分区为一个分区并标明已被连接;否则,不作处理.描述该步骤的算法伪代码DealQuadrilateral(G)如下所示.ProcedureDealQuadrilateral(G)1.listallquadrilateralsinlistQ2.FOReachqinQ3.IFqisnotconvexordegenerated4.deleteitfromQ5.ENDIF6.ENDFOR7.sortQbytheperimeterinascendingorder8.FOReachqinQinascendingorder9.IFthenumberofdisconnectedpartitionsthatthe10.computetheSteinerEdgeanddeployrelaynodes11.markthese4partitionsbeingconnected12.ENDIF13.ENDFORDealQuadrilateral(G)的第3行判断四边形是否为非凸四边形或是退化型四边形,若是则将其删除.其中判断是否为凸四边形(Convex)的主要思想是首先从某点出发连接四边形两个相邻点i和i+1,得到一直线方程,然后将其它两点的横坐标值Page7代入上述直线方程,得到一纵坐标值,通过比较得到的值与此点的纵坐标值,从而判断此点在上述直线的哪一侧,如此也可判断另一点在直线的哪一侧,若两点不在上述直线两侧则为凹四边形,直接结束判断;否则继续上述判断,直到四边形四个相邻节点均进行判断,都在直线两侧,则此四边形为凸四边形.判断是否为退化型四边形(Degenerate)的主要思想是调用波拉克定理判断函数确定斯坦纳点应由哪两条边确定,对这两条边分别向外作等边三角形,得到上述两个等边三角形外面的两个点的坐标值;根据上面两个坐标值得到经过此两点的直线方程;然后分别判断四个顶点在直线的哪一侧,若有3个顶点在同一侧则为非退化型四边形,否则为退化型四边形.DealQuadrilateral(G)的第10行求解四边形斯坦纳点.首先根据波拉克定理判断函数,找到所需要的两条边,从而得到这两条边两个端点的坐标.假设其中一条边两点坐标为(x1,y1)和(x2,y2);先求出两点间的夹角:从而得到根据两点坐标可求得两点间距离:从而求得等边三角形的另一点坐标:用同样的方法可得到另外一边向外作等边三角形后的坐标假设为(x4,y4);从而可以求得此四边形中所需布置的总节点个数为根据上面所求的两个点坐标,可以求得此四边形对应的两个斯坦纳点坐标,假设其中一个所求斯坦纳点坐标为(x6,y6),首先根据等边三角形3个已知坐标,求的其外接圆的圆心坐标为然后根据上面求得的两个边向外作等边三角形求得的两点坐标求得此直线斜率为又因为斯坦纳点在此直线上故有下式成立:(y6-y4)/(x6-x4)=(y4-y3)/(x4-x3)(10)再有圆心坐标与此点距离为圆的半径,圆的半径r很容易可计算出:又已知下式成立:联立式(10)~(12)即可求得坐标(x6,y6)的值;用同样方法可以求得四边形中另外一个斯坦纳点的坐标(x7,y7),最后再根据求得的这两个斯坦纳点坐标及四边形4个顶点的坐标和传感器节点的通信半径R,即可求得所要布置节点的坐标位置.在图7所示的实例中,最小的四边形为bced,该四边形中标记为已连接的分区数为0,求出其斯坦纳点,沿斯坦纳树边布置中继节点连接这4个分区,合并此4个分区为1个分区.然后继续执行找到周长次小的四边形ijlk,此四边形与bced情形一样,故作同样处理.继续执行步3找到四边形efgh,该四边形的标记为已连接的分区数为1,求出其斯坦纳点,沿斯坦纳树边布置中继节点连接这4个分区,将f,g,h这3个分区并入前面合并的第1个分区中,连接部署情况如图8~图10所示.Page8经过(1)、(2)和(3)处理后,能够用四边形斯坦纳树连接的分区都已被连接,此时剩余的分区已无法使用四边形斯坦纳树连接,因此枚举连接所有剩余分区的三角形组合,放入新建列表中,最后将列表中的三角形按照周长升序排序.(4)从前往后依次处理新建列表中的每个三角形.如果3个顶点代表的分区未被连接,则构建该三角形的斯坦纳树,沿着斯坦纳树的边布置相应中继节点,合并这3个分区并标明该分区已被连接,算法的伪代码如DealTriangle(G)所示.ProcedureDealTriangle(G)1.listalltrianglesinlistT2.sortTbytheperimeterinascendingorder3.FOReachtinTinascendingorder4.IFthenumberofdisconnectedpartitionsthatthe5.computetheSteinerEdgeanddeployrelay6.markthese3partitionsbeingconnected7.ENDIF8.ENDFOR其中第5行求解三角形斯坦纳点.若三角形的内角都小于120°,则可以在三角形中找到一斯坦纳点,使得此点与三角形的3个顶点成的夹角均为120°.已知三角形3个点的坐标,此点坐标也不难求得.若三角形的内角有一个大于120°,则直接取三角形中较短的两条边,即使用最小生成树方法连接实现连通即可.在实例中发现△kma和△hmk符合条件,显然△hmk为较小的三角形,因此对该三角形构建斯坦纳树,沿着斯坦纳树边布置相应中继节点,并将m分区及前面形成的两个分区一起合并为一个分区,如图11所示.(5)经过上面的操作,分区数不大于2.若此时分区数目为1,算法结束;若为2,则检查所有能连接两个分区的边,找到其中最短的那条,沿此边在相应位置布置中继节点,将两个分区合并成一个,从而使得整个网络实现连通.实例中最短的那条边显然是ma,故在边的相应位置布置中继节点,将两个分区合并成一个,从而使得整个网络实现连通,如图12所示.基于四边形斯坦纳树的连通算法(QTA)的伪代码如下.输入:网络的拓扑结构G(包括各分区的位置),中继节输出:需重新布置中继节点个数及位置坐标1.ProcedureQTA(G,R)2.FOReachpartitionp3.markitasadisconnectedpartition4.ENDFOR5.dealQuadrilateral(G)//处理四边形6.dealTriangle(G)//处理三角形7.IFnodisconnectedpartitionleft8.algorithmterminate9.ELSE//网络还有两个未连接分区10.findtheshortestedge(u,v),uinpartition1andPage911.computethelengthofedge(u,v)anddeployrelaynodesalongtheedge12.mergepartition1andpartition213.ENDIF主算法QTA中,首先标记每个分区为未连接分区,然后分别按四边形斯坦纳树和三角形斯坦纳树的方法沿着斯坦纳边在相应位置部署中继节点,同时对各个分区进行合并,最终在算法执行到第7行时,整个网络中的分区数不会超过2,若分区数为1,表明整个网络已经连通,算法结束.否则执行第10行,找到两个分区中最短的边,然后计算其长度并沿着此边部署中继节点,合并两个分区,最终使整个网络连通.4.3算法性能分析对于本文提出的基于四边形斯坦纳树的连通算法(QTA)分析了时间复杂度及算法的收敛性,同时分析了分区探测和代表节点确定方法的信息复杂度.定理1.QTA算法的时间复杂度为O(n4logn),证明.假设m表示n个分区所组成的四边形其中n表示分区的个数.的个数,则在主算法QTA中,第2~4行时间复杂度为分区节点个数,为一常数n,第5行是四边形处理算法,在此算法中,列举所有四边形的时间复杂度为O(n4),判断是否为凸四边形Convex的时间复杂度为一常数4,判断是否为退化型四边形Degenerate的时间复杂度仍为一常数4,故算法中第2~6行时间复杂度为O(4×n4),第7行对所有四边形进行从小到大排序,排序算法时间复杂度为O(mlogm)=O(n4logn),第8~13行,在求解斯坦纳点中时间复杂度也是一常数,是当前求得的四边形所需的中继节点个数,每次执行也是一常数,故时间复杂度也是n4的常数倍.主算法中执行第6行三角形处理算法,此算法跟四边形类似,其时间复杂度为n3的常数倍,然后主算法执行到第10行时,查找较短的边时需要比较次数也不会超过n2的常数倍,故整个算法的时间复杂度为O(n4logn).定理2.本文提出的QTA算法一定是收敛的,即最终一定可以将所有分区连接在一起.证明.在算法中首先列举四边形进行斯坦纳树连接,此时会使得网络形成一些合并后的新分区,然后再通过三角形斯坦纳树连接,三角形斯坦树连接一定会将3个分区连接在一起,最终要么使得整个网络形成一个分区,即实现连通,要么是整个网络仅剩下两个分区.若还剩两个分区,在主算法中第10行进行了处理,即找到连接两个分区的最短边,沿着此边部署中继节点,使两个分区合并为一个分区,从而实现整个网络连通,故本文提出的算法一定是收敛的.定理3.本文提出的分区探测和代表节点确定方法的信息复杂度为O(N2),其中N为整个网络被毁坏后仍存在的所有传感器节点的个数.证明.首先使用相关的分簇算法选取簇头节点,很多文献对分簇算法进行了研究,使信息复杂度提高到了O(N),其中N为整个网络中的节点总数,故选取簇头节点的信息复杂度为O(N).簇头通过广播消息选取支配节点所用信息数在最坏情况下为N-1,即网络中所有节点位于一个簇中.支配节点继续执行上述过程,实际就是支配节点通过广播消息找到下一个支配节点,因此确定每个支配节点所用信息数最坏情况下均为N-1,因此假设最终共有n个支配节点,则寻找支配节点形成连通子树所用信息总数为n×(N-1),选取代表节点只需一个通知消息即可得到.代表节点信息发布过程所需信息数为Np,其中Np为代表节点个数也就是整个网络所有分区个数.因此整个方法的信息总数为N+n×(N-1)+Np+1=(n+1)×N+n+Np+1,由此式易知,其中n对整个信息复杂度起决定作用,而最坏情况下就是整个网络中的所有节点都是支配节点,此时n=N,故整个算法的信息复杂度为O(N2).5性能评价与分析我们通过仿真对本文提出的算法进行了评价与分析,并与FeSTA(基于三角形斯坦纳树近似算法)和MST_1tRNp(最小生成树算法)算法进行了比较.5.1仿真参数及性能指标我们选用OMNET++仿真工具,通信模型采用自由空间通信模型,即两个节点间的距离小于通信半径R即可直接通信,否则不能通信.通过模拟不同的拓扑结构使网络出现指定个数的分区.缺省的部署区域为1500m×1500m的正方形区域,通信半径R为100m,分区个数为9.在仿真中用到的不同网络特性的配置参数如下:Page10分区个数.分区越多,连通恢复所需的工作量越多,需要更多的中继节点.通信半径.通信半径对本文提出的QTA算法的性能影响很大,通信半径越大,连接各分区所需节点就越少,反之就越多.区域大小.若使用同样多的分区个数,区域越大,即分区密度越小,所需节点个数会增多.性能指标主要包括所需部署的中继节点个数、平均节点的连通度等.部署中继节点是为了实现网络连通,显然在保证连通情况下,使用越少的中继节点就越优.平均节点度是指平均每个节点所连接其它节点的个数,显然,平均节点度越大,网络的鲁棒性就越好.每次仿真执行算法100次,取平均值,每次执行都是在随机产生的一种拓扑结构情形下进行.5.2结果分析此部分通过模拟实验从所需部署中继节点个数和平均节点的连通度两个方面对本文提出的基于四边形斯坦纳树算法与基于三角形斯坦纳树近似算法和最小生成树算法进行了比较,在图示中QTA表示本文中提出的基于四边形斯坦纳树的连通算法,FeSTA表示基于三角形斯坦纳树的近似算法,MST_1TRNP表示最小生成树算法.5.2.1部署中继节点个数图13描述了分区个数对部署中继节点个数的影响.从图中可以看出,随着分区个数的增加,3种算法所需中继节点个数都会增加.这种趋势是符合实际情况的,分区个数的增加必将导致在恢复连通时使用更多的中继节点.从图中也很明显地看出本文提出的算法要比其他两种算法所需中继节点个数要少,并随分区个数的增加此优势会更加明显.这是因为分区个数越多,使用四边形斯坦纳树能够连接的分区数越多,从而减小了所需中继节点的个数.图13随分区个数增加中继节点个数比较图图14描述了分区个数为9时,通信半径改变对所需中继节点个数的影响,从图中发现,随着通信半径增加,所需中继节点个数减少.这种趋势也是符合实际情况的,因为随着通信半径的增加,连接路径长度固定,所需中继节点个数必将减少,故当通信半径为250m时,所需中继节点数仅为5.同时从图中可以看出,本文提出的QTA算法,比其它两种算法所需中继节点个数要少.当然随通信半径的增加这一优势变得不是很明显,这是因为通信半径的增加导致连接路径长度的减小带来的优势变得不明显.图14随通信半径增加中继节点个数比较图(9个分区)图15描述了分区数为9,通信半径为100m时,区域大小对所需中继节点个数的影响.从图中可以看出,随区域增大,所需的中继节点个数也会增加,这是因为区域增大必将导致分区间距离增大,从而所需中继节点个数也会增加.从图中也很明显地看出本文提出的算法要比其它两种算法所需中继节点个数要少,并随区域增大此优势较为明显.这是因为随区域增大会使分区间距离增大,而本文提出的QTA算法所需距离之和比其它两种方法要小,并随区域增大这个优势会更加明显.图15随区域增大增加中继节点个数比较图(9个分区)Page115.2.2平均节点连通度图16描述了分区数为9,通信半径为100m时,区域大小对平均节点连通度的影响.从图中看出随区域增大,平均节点连通度也增大.这是因为随区域增大,所需的中继节点个数也会增加,所以会导致平均节点连通度的增大.本文提出的QTA算法明显高于其它两种算法,说明QTA算法所构建的网络鲁棒性要比其它两种算法好很多.这是因为QTA算法布置的中继节点在连接4个分区的四边形内部,从而提高了节点的连通度.当然随区域增大,此优势变小,这是因为随区域增大本文提出的算法所需布置节点个数要比其它两种算法要少,故优势会变小.图16随区域增大平均节点度比较图(9个分区)图17描述了分区数为9,通信半径对平均节点连通度的影响.从图中可以看出,随通信半径增大平均节点连通度减小,这是因为通信半径增大必将导致部署中继节点个数减少,故平均节点连通度减小.本文提出的QTA算法明显优于其它两种算法,并随通信半径增大这一优势更加明显.这说明QTA算法布置的节点分布更均匀,形成的网络拓扑结构鲁棒性更好.图17随通信半径增大平均节点度比较图(9个分区)图18描述了分区个数对平均节点连通度的影响,从图中可以看出3种算法随分区数增加,平均节点连通度也增加,并且随分区个数的增大,本文提出的QTA算法增长趋势呈升高的趋势,这是因为分区个数越多,使用四边形斯坦纳树能够连接的分区数越多.通过对上述实验结果的比较分析,本文提出的算法在所需部署的中继节点个数和平均节点的连通度上都优于其它两种算法,并在某些方面表现出很大的优势,比如所需部署中继节点个数上平均提高11.2%左右,平均节点连通度上最高可提高10%左右,最低也提高了2%左右.在文献[17]及后来的许多文献中都已证明四边形斯坦树与最小生成树的比值大于等于槡3/2,即理论上提高率不超过13.4%.由于此问题是一NP问题,本文也是采用启发式算法得到近似解,该近似解已经比较接近理想值,因此本文提出的算法性能较好.尽管本文提出的算法比其他两种算法所需中继节点个数要少,但是平均节点连通度还高于其他两种算法,这表明通过本文提出的算法恢复的网络具有较强的健壮性和容错性.6结论本文提出的基于四边形斯坦纳树的连通算法是一种新的启发式算法,通过此算法可以部署较少的中继节点使得严重破坏的无线传感器网络中的各分区恢复连通.此算法主要是采用局部最优的四边形进行斯坦纳树构造,从而使整个网络通过此算法不断迭代形成更大的分区,最后再将剩余的分区用三角形斯坦纳树方法或最小生成树方法实现连通,从而恢复网络连通时使用尽量少的中继节点.此外,本文还对基于四边形斯坦纳树的连通算Page12法进行了评估,实验结果显示基于四边形斯坦纳树的连通算法要优于当前其它一些算法,从部署节点数、平均节点度等各性能指标上都表现出了算法的优越性,从而进一步表明了使用此算法所构造的连通网络具有较好的鲁棒性.下一步的工作是将基于四边形斯坦纳树的连通算法同覆盖和服务质量保证等问题结合,进一步提高恢复连通后网络的健壮性和鲁棒性,同时我们将在实际环境中实现并测试本文提出的算法,并进行深入的研究.
