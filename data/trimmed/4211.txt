Page1基于梯度搜索的移动协作定位算法彭鑫1),2)李仁发2)王东2)魏叶华3)李哲涛4)1)(湖南理工学院信息与通信工程学院,复杂系统优化与控制湖南省高校重点实验室湖南岳阳414000)2)(湖南大学嵌入式系统与网络实验室长沙410082)3)(湖南师范大学物理与信息科学学院长沙410081)4)(湘潭大学信息工程学院湖南湘潭411105)摘要针对节点移动对定位实时性能的影响,通过预测节点的移动趋势平衡定位时延,提出一种基于梯度搜索的移动协作定位算法.该算法将移动定位拓展到时间区间上进行.在每个时间区间内,采用一跳距离测量和压缩感知方法构建节点距离数据,并通过预测节点移动趋势确定网络中节点间距离矩阵的边界条件;然后通过梯度搜索法求解节点在特定时间区间内的最佳估计,从而求得各节点的相对坐标;如果网络中有足够锚节点,则可将相对坐标转换为绝对位置.仿真结果表明,与其它移动定位算法相比,提出的方案有效提高了定位精度,而且在有测距误差的环境下也表现出较好的定位性能.关键词协作定位;移动网络;压缩感知;梯度搜索;基于位置的服务;物联网1引言随着物联网(InternetofThings,IoT)和多跳无线网络的成熟和普及,移动环境的应用部署成为学术和工业界讨论的热点问题.以灾害救援通信、军用自组网以及车载自组网(VehicularAdhocNet-works,VANET)为代表的移动网络体现出极大的应用价值[1].虽然以无线传感器网络(WirelessSensorNetworks,WSN)为代表的物联网研究已取得了长足进展,但静态网络的问题在移动网络环境下有了新的表现形式,之前的方案并不适用于移动场景,许多问题仍值得进一步研究.节点定位是物联网的支撑技术.生态环境监测、生物信息采集、智能交通和军事勘察等领域,如果没有定位系统那么需要采集或发布的目标信息将没有任何意义.在多跳网络中有广泛应用的地理路由策略同样需要以节点的位置信息为基础.目前,基于位置的服务(LocationBasedServices,LBS)[2]已被列入国家“十二五”科技发展规划纲要.现有的移动定位技术通过迭代执行定位过程,将动态网络转化为静态网络求解.当节点移动速度较慢时这是可行的.若节点速度较快,定位算法的执行时延使得网络节点的估计位置与当前实际位置不匹配,从而降低定位精度,无法满足位置服务的实时性要求.本文提出一种基于梯度搜索的移动定位算法,将时间分为连续区间,在每个时间区间的起始时刻通过一跳测距和压缩感知方法求出网络节点距离矩阵;然后预测节点的移动趋势,在每个区间内构造网络距离矩阵的边界条件,最后通过梯度搜索在每个时间区间内求得节点位置的最佳估计.本文第2节介绍相关研究工作;第3节介绍基于测距的定位机制;第4节建立基于凸约束的移动定位模型;第5节提出基于压缩感知的网络距离约束条件;第6节在距离约束基础上提出梯度搜索定位算法;第7节是性能评价;最后是结论.2相关研究2.1静态网络定位静态网络中节点位置固定,网络部署过程只需一次定位.算法的执行时延不会影响定位结果.下面介绍代表性的静态定位算法.文献[3]提出一种迭代似然定位算法.每个节点首先测量到各邻居节点的距离,然后根据距离信息和已定位的邻居估计自身位置.通过迭代执行,即可从锚节点开始逐步实现全网定位.但算法存在误差累积现象,所以作者在文献[4]中将定位建模为全局非线性优化问题.APS(AdhocPositioningSystem)[5]定位系统通过距离向量路由交换协议传输锚节点位置信息,使节点获取到各锚节点的距离或跳数,然后利用三边测量定位.根据锚节点位置传输方式的不同,APS包含DV-Hop、DV-Distance和Euclidean3种定位算法.APIT[6]是一种粗粒度定位算法,节点根据获取的锚节点坐标将其组成多个三角形,然后对每个三角形,节点判断自己是否处在三角形内,最后把各三角形交集区域的质心作为节点位置.文献[7]将多维尺度变换(Multi-DimensionalScaling,MDS)用于节点定位问题.提出的MDS定位算法用最短路径近似节点距离,建立节点距离矩阵;然后将平方距离矩阵双中心化并奇异值分解,得到节点的坐标,如果有足够锚节点便可得到绝对坐标.但MDS定位需要最短路径法构造节点距离矩阵,在网络拓扑不规则时有较大定位误差.文献[8]提出的算法提取由四个全连通节点构成的集合,然后通过3个已定位节点确定集合中节点的位置.该算法为避免误差累积,依次选取4个全连通节点进行定位,使得网络中存在少数无法定位的节点.Biswas等人[9-10]将半定规划用于传感器网络定位,并提出全局优化策略降低测距误差的影响.文献[11]针对半定规划开销较大的问题提出了点松弛和边松弛模型,在降低算法开销的同时也保证了定位精度.文献[12]提出一种非测距定位算法.算法将每个节点的参考区域分为两部分,分别是覆盖区域和非覆盖区域.待定位节点根据所处覆盖和非覆盖区域的交集确定自身的位置.对于处在同一交集内的节点则分配相同的位置.2.2移动网络定位移动网络定位中常见的方法是反复进行定位,将移动定位转换为静态定位问题.文献[13]在MDS-MAP(P)[7]算法基础上提出了移动节点辅助定位算法MA-MDS-MAP(P).提出的方案通过距离交换对移动节点的运动轨迹进行采样,将采样点作为虚节点纳入到网络中进行定位,从而增大节点密度,改善定位精度.文献[14]提出基于无线信号强度测距的移动定位算法.算法考虑无线测距噪声的Page3时间相关性,提出了多模辅助粒子滤波器定位算法.由于定位时延的存在,这种定位方式的性能受到一定影响.另一类算法则考虑节点运动过程中前后位置相关性,以降低定位时延对定位结果的影响.文献[15]将蒙特卡罗(MonteCarlo)用于移动节点定位.提出的算法在每个连续时隙内确定节点最大移动距离Vmax,同时每个锚节点在两跳邻居范围内周期性广播自身位置,节点收到锚节点信标后根据锚节点大致确定自身所处的范围.算法首先建立一个样本点集合,作为节点可能的位置;然后通过Vmax在后续时隙内确定相应的样本点集,并在滤波阶段根据锚节点的信标滤除不满足定位限制条件的样本点;最后,把剩余样本点的质心作为节点的估计位置.但是算法在滤波阶段收敛较慢,容易成为性能瓶颈.针对这一点,文献[16]通过锚节点信标将待定位节点的限制区域表示为一个方形区域,称为锚盒子(anchorbox);然后将相邻时隙锚盒子的交叠区域作为每个时隙待定位节点的可能位置.文献[15-16]均采用固定的样本点数目.当锚节点密度较高时,限制区域较小,如果使用过多的样本点会引入较大的计算开销.文献[17]使用两跳范围内的锚节点和已定位节点信息,使算法具有更快的收敛速度.由于使用了普通节点的连通性信息,算法定位误差和通信开销较大.文献[18]在锚盒子的基础上引入了邻节点和运动方向两个限制条件,能够根据锚盒子的大小自适应改变样本点的数目.文献[19]通过分析节点的运动轨迹的时域相关性,提出了3种定位策略,分别是运动轨迹的低秩定位(LRL)、时域稳定性定位(TSL)以及两者的联合定位策略(TSLRL).3问题描述本文算法通过网络的一跳距离信息建立节点距离约束条件,从而求得节点坐标的最佳估计.令δij表示节点i和j之间的测量距离,犡n,m表示节点坐标矩阵,n为节点数,m为空间维数,dij表示节点i和j在m维空间犡中对应点的计算距离:根据多维尺度变换,首先将犃置为行列和为零的矩阵,可表示为π(犃)=-1令Δ=(δ2λrλr+1=…=λn=0表示矩阵犅的奇异值,Λ=diag(λ1…λn).对犅进行奇异值分解,有犅=犝Λ犝T.那么在犚m中,令Λm=diag(λ1…λm),犝m为矩阵犝的前m列,则犡n,m=犝mΛ1/2m.因为双中心化的作用,相对坐标犡n,m分布在坐标原点的周围.从上述过程不难发现,基于距离的定位必须准确构建网络节点距离数据.这在静态多跳无线网络中容易满足.目前在移动网络环境下,主要通过对动态节点的移动轨迹进行采样,即反复执行定位算法,将动态网络转化为静态网络进行定位.在移动环境下,节点的移动速度比较快,通过对节点移动轨迹进行采样的方式会造成定位估计位置滞后于节点的实际位置,导致定位精度下降,无法满足位置服务的实时性要求.本文将时间划分为连续的区间,在每个时隙内建立移动节点所满足的距离上下界约束条件,将移动定位问题建模为凸约束优化问题.4移动定位模型本文算法将时间分为连续的时隙,不失一般性考察任意时隙[t0,t1],如图1所示.任取两个节点i和j,狏i表示节点i的速度,δ0ij表示节点i和j在t0时刻的距离,i、j分别表示节点i、j在t1时刻的位置,δ1ij表示节点i和j在t1=t0+τ时刻的距离,其中τ表示采样间隔.由于实际情况下节点的移动速度不会骤变,而且[t0,t1]是很短的时隙(以×1s为量级),所以在时隙内节点的运动可近似为匀速运动.在测得δ0ij的情况下,从图中不难“预测”i、j在t1时刻的距离:δ1ij=((δ0ij)2+2δ0ijcosαij(|狏i|cosθi-|狏j|cosθj)+|狏i|2+|狏j|2-2|狏i||狏j|cos(θi+θj)+2δ0ijsinαij(|狏i|sinθi-|狏j|sinθj))1/2(3)其中,θ表示节点速度方向角.在间隔[t0,t1]内距离δij将满足δij∈[min(δ0ij,δ1ij),max(δ0ij,δ1ij)].Page4将上述过程推广到任意节点.令矩阵Δ0=[min(δ0,δ1)2得到Δ0ΔΔ1.矩阵Δ为测量得到的平方距离矩阵,令犇(犡)=[d2的平方距离矩阵.任意时隙内移动定位问题便可建模为多约束联合优化问题:对于问题(4)可得出如下引理.引理1.如果Δ0=[min(δ0,δ1)2[max(δ0,δ1)2问题.证明.不失一般性,假设δ0δ1.令η∈[0,1],矩阵犕1=(m1ij)n×n,犕2=(m2且犕1,犕2∈[Δ0,Δ1],即由于δ0δ1,则式(5)和(6)可以写成将η和1-η分别代入式(7)和(8),可得式(9)和(10)两式相加,不难得到δ2(1-η)m2[Δ0,Δ1].同理,当δ0δ1也有η犕1+(1-η)犕2∈因此,问题(4)是一个凸约束优化问题.证毕.建立定位模型要构造节点距离矩阵的约束条件.令rT表示节点通信半径.对节点i、j,如果δijrT,则能直接测距;否则,δij需要借助其它方法求出.目前通常用i、j之间的最短路径距离近似δij.最短路径距离要大于节点的欧氏距离,而且在节点分布不均匀时,误差更大.本文利用压缩感知,通过网络的单跳距离数据,构造网络距离约束条件[Δ0,Δ1].5距离约束条件的建立令G(V,E)表示多跳无线网络,V为节点集,|V|=n表示节点数.E为边集.如果δijrT,则边eij∈E.由于通信距离有限,并且仅当节点处于通信范围内才能测距,根据拓扑图G(V,E)建立初始距离矩阵犕=[mij]n×n,矩阵犕为对距离矩阵Δ进行随机采样后的矩阵.将矩阵Δ为观测信号,犕则为信号的部分样值.怎样通过部分样值重建原信号,压缩感知(compressivesensing)[20]提供了思路.只要信号在某正交空间具有稀疏性,就能够以较低的采样频率重建原信号.分析矩阵犇(犡)=[d2(令狓=∑t则式(12)可以表示为上式中rank(狓犲T)=1,rank(狓狓T)=2,因此rank(犇(犡))4.而矩阵阶数n4,表明行列之间具有较大的相关性,矩阵具有稀疏特性.可通过有限的样值重建原矩阵,重建过程可归结如下:其中,σk表示矩阵Δ的第k个奇异值.重建过程的秩数太高会产生不必要的计算开销,过低会造成距离信息的丢失.由于rank(犇(犡))4,所以重建过程的秩为4.实际上只需满足节点的连通度不小于4即可.由于稀疏信号恢复是NP-hard问题,所以本文在模型(14)的基础上给出启发式算法.由于rank(犇(犡))4,可以采用秩4的截断奇异值分解进行重建.对矩阵犕奇异值分解犕=犝Σ犞T,其中Σ=diag(σ1,σ2,…,σn),并且σ1σ2…σn,犝、犞均为n阶正交矩阵.秩4重建过程可表示为其中,Σ4=diag(σ1,…,σ4,0,…,0),狌、狏为对应的奇异值向量,系数n2/|E|为数值补偿因子.实际中,部分节点的连通度可能大于4,在矩阵犕中对应行和列的已知项数也大于4.这些行列中额外的项数不仅对矩阵犕4的重建精度没有提升,反而导致截断奇异值分解的计算开销过大.所以本文的重建过程首先对初始距离矩阵犕进行处理,将矩阵中各行列的元素限制在4项,然后再进行截断奇异值分解.算法步骤如算法1所示.Page5算法1.网络节点距离重建算法.DistMat(G(V,E)):1.Foreachv=V;2.While(Conn(v)>4)3.{If{v|v∈Neigh(v),Conn(v)>4}≠4.u=argmax5.E=E\(v,u);6.Elsebreak;}7.EndFor;8.Foreach(i,j)∈E;9.mij=δij;10.EndFor;11.Foreach(i,j)E12.mij=0;13.EndFor;14.犕=[mij]n×n;15.犕=犝Σ犞T;16.Compute犕4using(15);下面分析距离矩阵的重建误差.令Δ^为真实距离矩阵,犕^为真实的初始距离矩阵,犖是(0,σ2)高斯距离误差矩阵,Δ=Δ^+犖表示实际测得的距离矩阵.本文通过原矩阵和重建矩阵之差的范数Δ^-犕4表示距离矩阵的误差.矩阵的F和2范数分别为犕F=∑i,j不难看出矩阵的2范数就是其最大奇异值.所以从范数定义式可知犕4F2犕2.那么有其中Δ^-犕42Δ^-Δ2+Δ-犕42矩阵犕^4为Δ^的重建矩阵,两者具有相同的2范数.由于矩阵犖的元素nij服从(0,σ2)的高斯分布,所以犖424σ槡n.令λ^max表示Δ^的最大奇异值,那么式(17)说明距离重建误差主要来自测距误差犖42.6基于梯度搜索的定位算法对问题(4),计算奇异值分解犅=犝Λ犝T,Λ=diag(λ1…λn),λ1λ2…λn;π(犇)=犙Γ犙T,Γ=diag(γ1…γn),γ1γ2…γn,可得犅-π(犇)2其中λ=(λ1,…,λn),γ=(γ1,…,γn),λ=max(λ1,0),max(λ2,0),0,…,(为求解该问题,根据式(19)定义函数:如果λ1λ2…λn0,那么f(Δ)=∑n可微的.由于λi是π(Δ)的奇异值,所以f(Δ)在Δ也是可微的.f(Δ)的梯度可以表示为f(Δ)=2∑n因此,可以构造如过程1所示的梯度搜索的优化过程.过程1.梯度优化过程.Optimize(Δ0,Δ1):1.Initializek=0,Δ0=Δ0;2.Do{3.犆=Δ-q(π(Δ)-π(Δ));//q为尺度因子4.Foreach{cij|cij[min(δ0,δ1),max(δ0,δ1)]}5.Ifcij<min(δ0,δ1)Then6.cij=min(δ0,δ1);7.Elsecij=max(δ0,δ1);8.EndFor;9.k=k+1;10.Δk=犆;11.}12.While{π(Δk)-π(Δk-1)F>ε}13.Return犇=Δk;根据DistMat(G(V,E))和Optimize(Δ0,Δ1),算法2.节点移动定位算法.Localize(G(V,E)):1.DistMat(G(V,E));2.Foreach(i,j)∈E3.Measuringαij;4.EndFor;5.Foreachi∈V6.Measuringvi,θi;本文定位算法如算法2所示.Page67.EndFor;8.Foreach(i,j)∈E;9.Computingδ110.EndFor;11.ConstructionconstraintconditionΔ0,Δ1;12.Optimize(Δ0,Δ1);13.π(犇)=犝犞犝T;14.犡n,2=犝2犞1/2用k表示优化过程的迭代次数.算法第1步复杂度为O(n3);第2~11步确定约束条件复杂度为O(n);第12步的复杂度为O(kn2);第13步复杂度为O(n3);第14行复杂度为O(n).Localiz算法可以通过平移、反褶和缩放将犡n,2转为绝对坐标,转换复杂度为O(a3+n).a为锚节点数.因此,本文算法总的复杂度为O(n3).7性能评价本文用MatLab7.8验证算法,并与Sextant[14],MA-MDS-MAP(P)[15],IMCL[20]和TSL、LRL、TSL-RL[21]进行比较.实验主要考察算法的性能,因而将测距值建模为距离真值加上高斯噪声.时隙长度τ是定位时间粒度.速度一定时,区间越长表示定位粒度越大,节点运动轨迹上的点越少;区间越小表示定位粒度越小,节点运动轨迹上的点越多.为避免τ的绝对时长对结果的影响,实验中使用的速度单位为(m/τ).为便于比较,本文引入一跳通信范围内的节点密度Ndens和锚节点密度Nanch作为网络参数,分别为Ndens=πr2(naver+nanch)其中naver、nanch分别为普通节点和锚节点,S为部署区域的面积.Ndens和Nanch反映了网络的连通度.算法评价使用平均相对误差作为性能指标:其中n是普通节点数目,xi,t和x^i,t分别为节点i在时刻t的估计位置和实际位置,本文用节点在每时隙的中间位置作为其实际位置.本文使用两种仿真场景,一种为200m×200m的方形区域,如图2;另一种为220m×220m凹形区域,如图3,其中的空白区域为110m×110m.实验中部署50个节点,其中5个锚节点.Ndens=10,Nanch=1,r=50m.节点运动使用随机路径点模型,最大运动速度为10m/τ.首先改变节点的最大速度,在两种场景下比较算法的性能,结果如图4.从图中不难看出,各定位算法在两种场景下的性能特点基本一致.本文算法随节点速度的增加误差也相应增大.这是因为本文算法以时隙τ为定位计算粒度,速度较大时时隙τ的距离约束范围也更宽,从而定位误差较大.而其余算法随节点运动速度的增加,定位误差呈现出先下降然后增加的趋势.这是因为节点的运动为定位过程带来了额外的定位约束从而改善定位性能.MA-MDS-MAP(P)可以在网络中添加虚拟节点获得更多距离信息改善定位性能;TSL、LRL和TSLRL算法能够获得更多的时隙间距离约束以降低定位误差;IMCL算法能够得到合适的估计样本集提高定位精度.当节点移动速度进一步增大,在时隙长度不变的情况下意味着定位粒度的增加.在速度较大时,IMCL的定位样本区域越大;TSL、LRL和TSLRL的低秩特性和时域稳定性受到影响,从而导致精度下降.但与其余算法相比,本文算法在不同速度条件下均表现出较好的性能.如果节点速度较快,通过减小时隙τ降低节点相对运动速度,可降低定位误差.MA-MDS-MAP(P)定位算法在凹形区域内的性能与方形仿真区域相比有明显下降.这是因为算法使用最短路径法计算距离值,而在凹形区域,最短路径近似存在较大的误差,从而造成性能的下降.Page7为评价测距误差对算法的影响,将零均值高斯噪声η~N(0,σ2)引入到测距中,使δij=δ^ij+η,并且改变测距标准差σ,在方形仿真区域比较算法性能,结果如图5.因为几种算法都以距离信息为基础,所以随测距误差的增大,各算法的定位精度开始下降.MA-MDS-MAP(P)由于使用最短路径距离近似,存在误差累积问题,所以对测距误差非常敏感.IMCL在样本估计过程中需要一跳邻居和两跳锚节点的距离信息.TSL/LRL/TSLRL算法的低秩特性和时域稳定性对距离误差较为敏感.本文算法由于将测距信息表征为凸约束条件,然后在凸集中进行优化定位,从而弱化了测距误差对定位精度的影响,表现出更好的性能.接下来,在方形区域改变节点通信半径,评估算法在不同Ndens条件下的性能.将通信半径从32m增加到64m,对应Ndens从4增加到16,实验结果如图6.不难看出,随节点密度的增大定位误差呈下降趋势.这是由于Ndens的增大网络连通度越大,算法能获得更多的距离信息.Ndens的增大使本文算法的初始矩阵犕有更多元素,连通度低于4的概率降低;IMCL能够获得更多的一跳邻居位置和锚节点位置,改善估计精度;TSL/LRL/TSLRL具有更好的低秩特性和时域稳定性.图6不同待定位节点密度参数条件下的性能改变锚节点个数,在方形区域评估算法在不同Nanch条件下的性能.将锚节点个数从3增加到11,对应Nanch从0.6增加到2.2,结果如图7.随着锚节点密度的增加,各算法的定位性能逐渐改善.对于本文算法、MA-MDS-MAP(P)和TSL/LRL/TSLRL而言,更多的锚节点可以降低节点位置的转换误差;IMCL在位置估计过程中,需要两跳范围内锚节点的直接支持.在方正PC(PentiumDual-CoreE6700,2GRAM)上比较了各算法的运行时间.IMCL使用其Java实现,其余算法使用Matlab.让每个算法运行不同时隙数,比较各算法在每个时隙的运行时长,结果如图8.各算法每个时隙的运行时长基本趋近于常数,IMCL由于使用的是其Java实现,执行效率较高,所以在这次对比中具有最小的时间开销.而MA-MDS-MAP(P)每时隙执行一次,并没有利用节点的Page8运动规律,因而时间开销较小.TSL/LRL/TSLRL和本文算法均利用时隙内的节点运动规律进行优化,所以时间开销较大.本文的梯度优化方法通过模型的凸约束特性,降低了执行开销,在定位精度得到提升的同时,算法开销与TSL/LRL/TSLRL保持相同的量级.最后使用绝对速度和时隙参数τ对比算法在不同τ值下的性能.在方形区域中最大速度设为20m/s,τ从0.5s增大到2s,实验结果如图9.不难看出,随着τ的增大各算法的定位误差也增大.这是由于τ越小定位粒度越细,反之亦然.算法在每时隙内定位一次,如果τ值过长节点的运动区间也越大,定位误差也相应增大.如果τ值过小,虽然定位精度提升,但是执行开销也增加,实际中可按需要选取合适的τ值.8结论本文提出一种基于梯度搜索的移动协作定位算法.该算法通过压缩感知求解网络距离信息,降低了非均匀网络拓扑结构下节点的测距误差;并充分利用节点移动参数的稳定性构建网络距离信息的凸约束条件,有效降低了移动环境下节点位置估计的定位滞后问题;最后根据定位模型的凸性质,构造相应的梯度优化过程来提升收敛特性.本文算法有效改善了定位精度,表现出较好的抗测距误差性能,而且具有稳定的执行时延.后续工作将致力于本文算法的分布式实现方案,以便在大规模移动网络环境下应用.
