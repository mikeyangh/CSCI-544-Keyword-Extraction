Page1一种基于近距离最大子图优先的业务流程推荐技术曹斌尹建伟邓水光王东京徐悦繰(浙江大学计算机科学与技术学院杭州310027)摘要业务流程的动态性和不确定性,为企业流程建模过程带来了巨大挑战,传统基于流程挖掘或流程检索的方式在一定程度上提高了建模的智能性,但仍需大量人工参与,如何更大程度地提高业务流程建模效率和准确度成为当前企业亟待解决的问题.论文借鉴传统推荐技术思想,提出了一种业务流程推荐技术,该技术以业务流程资源库作为出发点,利用图挖掘方法进行流程模式的提取,基于近距离最大子图优先的流程匹配策略对参考流程与流程模式的相同性进行判断,进而选取相关候选节点集作为推荐结果.基于业务流程推荐系统原型JTangWFR,通过对比现有相关技术表明,文中方法能够支持实际应用中的复杂流程结构,其效率和准确度方面能够满足实际应用的需求.关键词流程推荐;近距离最大子图;业务流程建模;流程匹配1引言业务流程管理是企业信息化系统的核心,适时建立符合企业发展特色的高效业务流程是现代企业成功与可持续发展的保障.面向服务的体系架构(ServiceOrientedArchitecture,SOA)为快速构建松耦合、动态、易扩展的企业信息系统提供了可能,成为越来越多的企业信息系统的首选.现代企业的业务流程建模,存在如下两个问题:(1)动态性.客户或市场需求的频繁变化对流程建模的效率提出更高要求,建模人员很难充分理解需求变更,造成新流程模型与实际的脱节,使得业务决策准确度降低,最终影响企业的效益.(2)不确定性.由于知识结构、工作经历等方面限制,建模人员往往缺乏必要的领域知识,从而导致制定流程时缺乏科学性和系统性,所建模流程不够系统、全面,不确定性较大.在经典SOA计算模型中,设计了服务流程语言(WSFL、BPEL等)来支撑业务流程的建模[1-2],近年来众多学者在服务流程的自动组合方法进行了研究[3-6],以求找到智能的问题解决方法.但服务组合侧重于通过一定的规则,将较小且简单的、易于执行的轻量级服务进行组合来创建功能更为丰富的服务.但实际的业务流程中,不是所有活动节点都能抽象成为服务,各活动节点很可能会涉及到大量人工参与,活动间的约束关系也并非像服务组合那样明确.为了解决上述问题,许多辅助流程建模的技术和方法被提出.通过对业务流程相关系统中事件执行日志的分析,流程挖掘[7]技术可发现实际的业务执行过程,进而节省了建模前的调研、讨论等工作,直接通过挖掘结果指导业务建模人员制定更加合理的流程或改进现有流程.流程检索技术基于流程相似度计算方法[8],可迅速从业务流程资源库中查找相关流程或流程片断,利用返回结果帮助业务人员重新设计新的流程.上述方式为流程建模工作提供了相关借鉴基础,但是在具体的建模过程中仍需要大量业务人员的人工参与.如,在制定具体新业务流程过程中,业务人员需要同时参考和借鉴相关现有流程(通过流程挖掘或流程检索得到),并通过人工完成具体的建模工作.这种建模方式不仅效率较低,且自动化程度不高,无法满足现代企业业务频繁变更的需求.反映到企业流程管理系统上,就需要采用一种更加灵活的构建方式应对这些变化.近年来推荐技术在电子商务领域的流行,为解决快速企业流程建模提供了新思路.同时,由于目前大多数业务流程均是以图结构的形式进行建模,如Petri网、BPMN、EPC等[9],因此,本文从流程图模型结构出发并结合传统推荐思想,拟在大量业务流程图基础上进行流程子图挖掘、处理和分析,为建模人员在流程建模中提供相关决策支持和信息服务.我们称之为流程推荐,它要求业务建模人员将一个正在构建的流程片断当做“参考流程”,并基于一定的相似度计算方法匹配业务流程资源库中的具有一定置信度的流程模式(流程片断),进而找到该模式对应的业务活动进行推荐.本文提出了一种基于近距离最大子图优先(NearNeighborandMaximalSubgraphFirst,NMSF)的流程图匹配方法,并基于该方法实现了流程推荐系统原型:JTangWFR(JTangWorkflowRecommender).系统利用图挖掘方法发现流程模式,并通过参考流程上的近距离最大子图优先匹配策略对流程片断间的相等性进行判断,通过判定结果选择对应的业务活动节点作为待推荐结果.本文第2节首先对相关基本定义进行说明,并在该部分末尾交待了流程推荐的度量和最大子图优先策略;第3节介绍JTangWFR的相关推荐场景和框架;第4节讨论推荐系统JTangWFR的主要实现;第5节通过实验对原型进行验证;第6节对相关研究状况进行介绍;最后第7节对本文工作进行总结和展望.2基本定义2.1业务流程图工作流系统中,业务流程是实际业务过程的体现,流程中的各个活动节点是企业内部各业务功能的表示,活动节点间通过顺序关系表达了相应的信息流向.因此,其流程模型图可抽象为有向图,且图上顶点(节点)具有相应的标号.定义1.业务流程图.令T为节点类型集合,L为节点标号字符的有限集合.一个业务流程是一个连通图,由P=(N,α,β)表示,其中:N表示节点的有限集;α:N→T表示节点类型映射函数;β:N→L表示节点标号映射函数.令P=(N,α,β)为业务流程图,E=N×N为有向边,节点x∈N,y∈N.节点x是另一个节点y的输入当且仅当在x与y之间存在一条有向边(即Page3(x,y)∈E).节点x是y的输出当且仅当(y,x)∈E.没有任何输入的节点称为开始节点,没有任何输出的结点称为结束节点.为了清楚地描述流程图模型的复杂结构(工作流模式)[10],我们使用α来区分节点类型.以Petri网为例,库所(p)和变迁(t)是两种不同的节点类型.如图1所示,上面一行由Petri网表示的模型是标准的工作流模式(即AND-split,AND-join,OR-split,OR-join),下面一行是其对应的业务流程图.其中,每个节点都由一组节点类型和节点标号表示.定义2.流程子图.令P=(N,α,β)与P=(N,α,β)表示两个流程图.当下列条件成立时,P是P的子图,即PP:NN,x∈N,α(x)=α(x),x∈N,β(x)=β(x).根据定义2,每个业务流程图拥有多个不同的业务流程子图,这些子图一般是流程片断.通常同一个业务流程图或流程子图可以有不同的具体表现形式.如图2所示,G1与G2是两个流程图模型,可以看出N(G1)=N(G2)且E(G1)=E(G2),我们认为G1与G2是相同或同构的.同构现象在图数据中是一个普遍现象,基于定义1,我们给出流程同构的定义.定义3.流程同构.令P=(N,α,β)与P=(N,α,β)表示两个流程图.P与P同构(表示为PP)是指,存在一个双射函数,f:N→N,使得u∈N,(α(u)=α(f(u))),u∈N,(β(u)=β(f(u))),u,v∈N,((u,v)∈E(f(u),f(v))∈E).在对业务流程资源库进行基于图挖掘方式的流程模式提取时,同构图的检测是难点,为了提高挖掘效率,同构图需要被剪枝.由于子图同构是NP-C问题,没有算法能在多项式时间内对其进行检测.当前图挖掘领域主要采用规范化标记(Canonicallabel)来解决图同构问题.一个图的规范化标记表示为cl(G),它是由一个字节,字符或数字组成的序列,是图的唯一编码,且该编码与图的顶点和边无关,完全取决于图的拓扑结构.如果两个图的规范化标记相同,那么这两个图互为同构.类似地,在本文工作中,同构流程图也被认为是相同的.我们采用了深度优先搜索(DepthFirstSearch)编码[11]做为规范化标记的基础,所以挖掘到的子流程图将是唯一的,且在模式提取时不会有重复的处理操作发生.下面给出DFS编码相关定义.2.2图的规范化标记众所周知,深度优先搜索被广泛应用在图算法中,它比广度优先搜索(BFS)消耗的内存要少.当对一个图进行深度优先搜索时,一个DFS树将被构建.深度优先搜索的过程中对顶点访问次序的不同会导致同一个图的DFS树有多种表达.因此,不能直接用DFS序列来检测图的同构现象.采用DFS字典序以及最小DFS编码做为图的规范化标记可解决此问题.首先,我们给出DFS下标的定义.定义4.DFS下标.在构建一个DFS树T时,顶点的访问顺序构成了一个线性序.使用下标来记录这个序列,其中i<j意味着在进行深度优先搜索时顶点vi在vj之前被访问.用T做下标的图G记作GT,T称为G的一个DFS下标.我们称T的开始顶点v0为根,最后访问的顶点vn为最右顶点.从v0到vn的直接路径称为最右路径.如图3所示,顶点标号分别是X,Y和Z,边的标号是a与b.图3(b)到(d)中的粗体边表示图3(a)的3个不同DFS树.它们产生3个不同的下标方式,图3(b)的最右路径是(v0,v1,v3),而图3(c)和图3(d)的则是(v0,v1,v2,v3).DFS树T,我们有:定义5.最右扩展.给定一个图G以及它的(1)后向扩展.一条新的边能够添加到最右顶Page4到一个最右路径上的顶点.(2)前向扩展.一个新的顶点能够引入并连接由于上述扩展发生在最右路径,我们也称它们点和最右路径上另一个顶点之间.为最右扩展.以图3(c)为例,因为在v1,v2和v3间已存在边,所以候选后向扩展边可以是(v3,v0)而候选前向扩展边可以是从v0,v1,v2或v3引入一个新的顶点.图3(c)所示的所有潜在最右扩展边在图4中给出,虚线表示扩展边.图4(a)和(b)两者均扩展自最右顶点(即v3),而图4(c)和(d)扩展自最右路径上的其它顶点.总之,后向扩展仅能够发生在最右顶点,而前向扩展则可以发生在最右路径上的顶点.如前所述,一个图很可能会有多个DFS树(或下标).为了避免从相同的图(即同构图)进行扩展,我们需要选择一个基准下标并在其基础上进行最右扩展.定义6.DFS编码.给定一个图G的DFS树,下标图GT可以转化为一个边序:ei(i=0,…,|E|-1).ei被称为DFS编码,表示为DFSCode(G,T).基于定义6,在下标图与DFS编码间存在一个双射关系.此外,由于一个图拥有多个边序列,所以我们在这些边序列间构造一个次序,然后选择能够产生最小边序列的下标作为该图的下标.这个次序也可以用于DFS编码,下面给出它的定义.定义7.DFS字典序.令边由一个6元组表示:(i,j,f,li,l(i,j),lj).其中,li与lj分别是顶点vi与vj的标号,l(i,j)是连接它们的边,f表示l(i,j)的方向:f=1表示vi→vj,f=-1表示vi←vj.给定一个顶点v,边(DFS编码)的次序关系如下定义:(1)顶点v的所有后向边应在它的前向边之前(2)若顶点v没有任何前向边,我们将它的后向边放置在其作为边的终顶点时的前向边之后.令边序关系拥有第1优先级,顶点标号li为第2出现.优先级,边的标号l(i,j)拥有第3优先级,顶点标号lj为第4优先级.通过该优先级次序可以确定两条边(或DFS编码)的顺序.基于上述规则的次序称为DFS字典序.根据定义7,图3(c)的完整边顺序是(0,1),(1,2),(2,3),(3,1).图3(b)~(d)的DFS编码如表1所示,我们可以看出,DFS编码的第1条边分别是(0,1,1,X,a,X),(0,1,1,Y,b,X)和(0,1,1,Z,b,X).由于它们拥有相同的边序,即下标(0,1),以及在0与1之间没有别的边存在,所以无法区分它们之间的不同.但是,通过使用余下的标号信息优先顺序,我们可以得到(0,1,1,X,a,X)<(0,1,1,Y,b,X)<(0,1,1,Z,b,X).因此,cb<cc<cd是表1中所列DFS编码的次序.edgecbe0(0,1,1,X,a,X)(0,1,1,Y,b,X)(0,1,1,Z,b,X)e1(1,2,1,X,b,Y)(1,2,1,X,a,Z)(1,2,1,X,a,X)e2(1,3,1,X,a,Z)(2,3,1,Z,b,X)(2,0,1,X,a,Z)e3(3,0,1,Z,b,X)(3,1,1,X,a,X)(2,3,1,X,b,Y)定义8.最小DFS编码.对于一个图G,C(G)={(DFSCode(G,T))|T,TisaDFStreeforG},基于DFS字典序,C(G)中最小的元素称为最小DFS编码,表示为minDFSCode(G).根据定义8,图3(a)的最小DFS编码是表1中的cb.此外,我们可以推断出如下最小DFS编码与同构图间的重要关系.性质1.给定图G和G,存在下列关系:GGminDFSCode(G)=minDFSCode(G).利用最小DFS编码,我们在整个流程推荐过程中不仅可以对所有流程图及其子图进行唯一的标识,同时也方便判断两个流程图或子图是否相同.2.3流程推荐的度量如前所述,通过图挖掘方法发现业务流程库中的流程模式是流程推荐的基础.但匹配流程模式并找到相应的候选推荐节点是流程推荐的关键.定义9.候选节点集,上游子图.令P=(N,α,β)与P=(N,α,β)表示两个流程图.N〈P,end〉表示流程P的结束节点,称为候选节点集.当下列条件满足时,P是候选节点集N〈P,end〉的上游子图:N=N-N〈P,end〉;PP(定义2).根据定义9,每个业务流程图或子图可被分为两部分,即候选节点集(Candidatenodeset,Cns)与Page5它对应的上游子图(Upstreamsubgraph,Us),表示为〈Cns,Us〉.反之,每对〈Cns,Us〉对应一个业务流程图或子图.在业务流程资源库中,有很多〈Cns,Us〉,而且一个上游子图或候选节点集可能会出现在多个〈Cns,Us〉结构中.因此,我们通过置信度(Confidence)来评估候选节点集与它的上游子图.定义10.置信度.令Cns表示一个候选节点集,Us表示一个上游子图.在业务流程资源库中,freq(Cns,Us)表示Cns与Us同时出现的频数,freq(Cns)表示Cns出现的频数.在给定Us条件下,Cns的置信度定义为实际中,一个流程图或子图中的候选节点集与上游子图出现频数很可能会较低,但是它们也很可能会强关联.如果使用传统关联规则中的支持度,这样的强关联将被剔除,而且也不可能基于这些业务流程进行推荐.因此,本文仅使用置信度来进行推荐.定义11.有影响上游子图.令θConf表示置信度的阈值.对于一个已知的候选节点集Cns以及它的对应上游子图Us,Us是有影响的当且仅当:Conf(Cns,Us)θConf.在业务流程库中,有影响的上游子图决定候选节点集的出现,这些子图也称为流程模式.下面我们给出流程模式表的定义,流程模式表在本文工作中将作为流程匹配与活动节点推荐时的输入.3元组,T=(I,C,f),其中:定义12.流程模式表.流程模式表T是一个I表示有影响上游子图的有限集合;C表示候选节点集的有限集合;f:I→C是一个满射函数.流程模式表中的每个候选节点集包含了将被推荐的一个或多个活动节点.为了选择合理的候选节点集,需要进行参考流程片断与有影响的上游子图的匹配工作.通过匹配,可找出与参考流程最相关的候选节点集.其中,最理想的情况是可以在模式表中找到与参考流程完全一致的模式,该模式对应的候选节点则为最佳推荐节点.但往往参考流程与流程模式是不同的,这就需要我们借助一定的策略去寻找最为相关的推荐候选节点集.本文工作基于如下假设:参考流程的子图均对推荐产生作用,即是有影响的.如业务人员正执行如下流程的建模:a→b→c→d→?,其中“?”表示待推基于如上假设,本文从参考流程图结构出发,提荐的活动节点,“a→b→c→d”表示参考流程.流程片断“a→b”,“c→d”以及“b→c→d”均是参考流程的子图,当子图“a→b”能与流程模式表中的某个模式完全匹配(即相同),则该模式对应的候选推荐节点则有可能被推荐,其它两个片断类似.出了近距离最大子图优先的匹配策略.定义13.节点后向位置.令P=(N,α,β)表示参考流程,R(R∩N=)表示P的推荐节点集合.In(x)与Out(x)分别表示x(x∈(N∪R))的输入节点集与输出节点集.num(N)表示集合N的个数.x,y,z∈(N∪R),节点x的后向位置为Locanode(x)=0,x∈R烄Locanode(y)+1,x∈In(y),num(Out(In(y)))=1烅max(Locanode(z)+1),z∈Out(In(x)),烆图5通过4个框图描述了一个具体业务流程图中节点后向位置的确定过程.i中R表示推荐节点集合,剩余部分为参考流程.ii中的两条直向路径是i中的流程子图.对于每条路径,节点后向位置在其上面均进行了标注.对于iii中的左子图,节点a是b与c的输入(即a∈In(b)且a∈In(c)),节点b与c是a的输出(即b,c∈Out(a)).注意,由于i中的流程有两条并行的路径,所以节点a有两个位置值:4与3.在这种情况下,我们选择最大值.最终我们获得的整个流程的完整节点后向位置在iv中表示.定义14.子图大小.令P,P,P表示3个不同的业务流程图,其中P与P是P的两个子图.若num(N)>num(N),则P>P.根据定义14,子图大小由其包含节点个数决定.基于参考流程的子图大小以及定义13与14,我们给出近距离最大子图的定义.定义15.近距离最大子图.令P表示参考流程.PiP(1in)表示参考流程的流程子图,其中n表示参考流程P当前未参与排序的流程子图Page6个数.End(Pi)表示流程Pi的结束节点.对n个流程子图按照节点后向位置与子图大小进行排序,P的子图P称为近距离最大子图需满足如下两个条件:(1)Pmax({Pi,1in}).(2)Locanode(End(P))=min(Locanode(End({Pi,1in}))).我们优先选择近距离最大子图的最小DFS编码与流程模式的最小DFS编码进行相等性匹配,若两个流程片断相等,则该流程模式对应的候选节点集将作为潜在的推荐活动节点.通过近距离最大子图优先策略,可以保证前述最佳推荐节点的产生.此外,由于该策略只是通过最小DFS编码进行流程图的相同性判断,即本质上是比较两个字符串是否相等,所以整个匹配过程将十分高效.3系统框架3.1推荐场景基于流程图匹配,候选节点集才可能被推荐.然而,若参考流程有多于一个的结束节点,则会出现多种不同的推荐需求.针对该问题,我们提出了两种推荐场景,分别是:(1)基于单个节点推荐:推荐结果(即候选节点集)跟在单个节点后面.从单个结束节点画出一条边可触发该场景.(2)基于多个节点推荐:推荐结果(即候选节点集)跟在多个节点后面.从多个结束节点分别画出一条边并汇聚可触发该场景.对于这两种场景,将整个参考流程模型与模式表中的模式进行匹配是不合理的.因为工作流是一个结构复杂的图,里面含有较多执行路径且在大多数时候这些路径都是独立执行的.因此,如果我们去匹配每一条路径或者每一个子图,会花费较多时间,而这些计算时间在实际中是无法接受的.事实上,每一条路径有其自身的业务逻辑,同时下游节点应该与其上游路径的逻辑保持一致.因此,在进行推荐时,我们仅将与当前节点直接相关的上游路径(子图)作为最重要的因素,而不去考虑其他的路径(子图).如图6所示,节点标号R表示推荐动作发生的位置,右侧框图展示了上述两种推荐场景.从图中可明显看出,某些执行路径被忽略.需要强调,由于待推荐的候选节点集可能包含多个节点,所以结束节点后面的输出可能是一个分支结构.基于上述推荐场景,我们实现了流程推荐原型系统———JTangWFR,下面对其框架进行概述.3.2框架概述图7所示为JTangWFR系统框架,3个虚线框表示了该框架的3个主要模块.其中,预处理与流程模式发现模块在线下(offline)执行而流程推荐模块则是线上(online)执行.预处理模块.如前所述,流程库中的业务流程很可能以不同的标注方式存在.为了方便对模式进行提取,需要对这些业务流程模型进行重新统一建模,新模型表达能够被上层模块所支持.基于重建模的结果,我们使用高效的图挖掘算法(如gSpan算法)执行业务流程子图的挖掘.考虑到第2节定义10所提及问题,在挖掘过程中,子图出现频繁度被设置为0.本模块的输出是一个流程子图集合以及它们对应的出现频率.流程模式发现模块.首先,每个挖掘到的流程子图根据定义9被分解为两部分,即候选节点集和上游子图.候选节点集用来扩展和完成参考流程的构建过程,上游子图作为模式提取的来源.然后,基于定义10和定义11,我们通过选择有影响的上游子图来提取流程模式.最后,流程模式以及相对应的候选推荐节点集将被注册到流程模式表中(定义12),为随后的流程推荐模块奠定基础.至此,整个框架的线下阶段结束.流程推荐模块.该模块有两个主要步骤.第1步计算是在业务建模人员触发相关推荐场景时进行的.系统找到参考流程中的执行路径并将该路径与上个模块发现的流程模式进行匹配.第2步计算则是具体的流程片断匹配过程(定义15),本文采用近距离最大子图优先策略对两个流程子图进行相等性Page7判断,若参考流程的子图与流程模式一致,则该模式对应候选节点集成为潜在推荐对象.从图7中看出,流程推荐模块由5个组件构成并且这些组件形成一个封闭的循环体.参考流程将作为流程匹配的直接输入.基于选择的执行路径(子图),系统将在流程匹配后推荐相应候选节点集.然后,推荐结果反馈给业务建模人员并由建模人员决定是否采用相关节点扩展或完成流程建模.这个循环体中的组件不停循环执行直到业务流程建模结束.一旦整个建模工作结束,新完成的业务流程可被归档到业务流程资源库中,并作为未来推荐工作的数据来源.4实现讨论由于预处理阶段涉及到的工作大多与图挖掘相关,并非本文的重点,所以在本节仅讨论框架中剩下的两个模块.4.1模式发现预处理模块挖掘所有的子图并统计每个子图的频数.通过图挖掘技术,业务流程子图的重复图已经被去除,在挖掘得到的结果中,每个子图个数Output:TheminimumDFScodesforMap(S,F):M2;theordersofnodelabelsandedgelabels:N,E图8模式发现模块伪代码是唯一的.本文工作中,这些子图均是由最小DFS编码规范化表示的.图8给出流程模式发现的伪代码.如图8所示,模式发现模块的输入是由流程子图与其出现频数的集合组成的键/值对(Key-Value).该阶段的输出结果有3个:所有业务流程图及其子图的最小DFS编码,业务流程库中顶点和边的标号顺序.首先,解析业务流程库中的所有流程图并产生所有顶点和边的标号顺序(2~3行),这些标号顺序用来在匹配阶段构造相应的DFS编码.接下来,算法将执行5个主要的步骤.在第1步骤,通过遍历流程库中的所有流程图(4~9行),我们将每个流程子图拆分为候选节点和影响上游子图.第2步,计算所有流程子图的置信度(10~14行),即流程子图出现的频数与对应影响上游子图的频数之比.第3步将遍历模式中的所有流程图(15~20行),通过给每个流程图添加一个无关节点(主要是为了保证图的连通性),获取其ID和最小DFS编码,并将它们放入一个临时表中.第4步合并流程库中的相同编码,并使用一个相反的键/值对(即最小DFS编码作为Key,流程图ID为Value)表示流程库中流程图的最小DFS编码集合(21~29行).这样就将相同(或同Page8构)图归并在一起,在相似度计算时便不会匹配重复多余的图,匹配效率将会得到提高.最后第5步中,对DFS编码进行了简化处理:按序提取每条边(DFS编码表示)的两个顶点以及边的方向(30~32行).例如,图3(a)的最小DFS编码是“(0,1,1,X,a,X),(1,2,1,X,b,Y),(1,3,1,X,a,Z),(3,0,1,Z,b,X)”,经简化处理后变为“+XX+XY+XZ+ZX”,其中为了方便SED计算,边的方向1与-1分别转换为“+”与“-”.4.2流程推荐流程推荐模块为业务建模人员产生最可能的活动节点并指导其扩展或完成参考流程的构建.该模块处理过程使用了基于近距离最大子图优先(NMSF)的匹配策略(定义15).基于该策略,我们实现了相关的推荐算法,如图9所示.该算法主要包括3个步骤:获取参考流程中的上游执行路径,获取上游执行路径所有子图的最小DFS编码,匹配上游执行路径与流程模式表中的模式.Input:TheminimumDFScodesforprocesspatterns:M1;theordersofnodelabelsandedgelabels:N,E;图9流程推荐算法伪代码算法第1步中,根据3.1节提到的推荐场景,流程建模人员通过选择参考流程的一个或多个结束节点触发推荐动作(2行).基于所触发的推荐场景,我们遍历搜索结束节点的输入节点,最终会得到一个完整的执行路径(3行).算法第2步与前面类似,添加一个无关节点到该执行路径末端构成一个新的流程图(4行).然后,基于上个模块返回的节点和边序,利用图挖掘算法对该新的流程图进行所有子图的挖掘并获取相应的最小DFS编码(5行).然后根据定义15,对所有子图的DFS编码进行排序,即将与待推荐节点位置最近,含有最多节点的子图赋予最高匹配优先权.算法第3步(7~13行),按照已排好的优先顺序,将参考流程子图与流程模式中的模式(由最小DFS编码表示)进行匹配,判断两者的最小DFS编码是否相同.若相同,则将该模式对应的候选节点集加入到待推荐节点列表中.算法最后将该列表返回,一次推荐过程完成.整个算法在前两步中,涉及到了参考流程的遍历以及子图挖掘,这两步过程从计算复杂度来看较高,但由于只是针对单个简单图的计算,因此时间消耗并不多.算法第3步的计算复杂度为O(m×n),m表示参考流程中上游执行路径的所有子图个数,n表示模式表中的所有模式个数.通常mn,因此流程推荐模块的时间主要取决于流程模式的数目.在实际实现过程中,我们采取了一定的措施来减少需要匹配的模式数目,如通过事先对不同子图大小进行分类,从而匹配操作只发生在相同大小的子图间.下面通过实验对本文工作进行验证.5实验评估实际应用中,业务建模人员主要关注于推荐结果的有效性以及线上流程推荐过程的高效性,本节将在合成数据集与仿真数据集的基础上对两者进行实验考察.由于文献[12]中提到的流程推荐方法(FlowRecommender)在准确性和效率方面均优于其它方法.因此,我们选用该方法与本文所提的近距离最大子图(NMSF)方法进比较.实验所用Flow-Recommender系统是我们根据文献[12]所述算法实现的,其性能与文献[12]中描述相似.两个方法均基于Java(JDK1.6)实现,挖掘技术为gSpan算法,置信度阈值为0.15.所有实验均基于如下环境:处理器Intel(R)Core(TM)2DuoE7200,2.53GHz;3.24GB内存;WindowsXP32位操作系统.Page9由于实现机理上的不同,FlowRecommender不支持包含有分支的较为复杂的流程结构,而NMSF方法则支持多种复杂结构.两个方法的比较实验仅在合成数据集上进行考察.合成数据集的生成器与文献[12]中类似.我们使用的仿真数据集通过模拟实际业务过程得到,其中的流程模型包含了多种分支结构,如AND-Join、OR-Join、AND-Split等.通过在仿真数据集上的测试,本文所提方法被证明在实际应用中是高效可行的.5.1有效性数据集中10%的业务流程图做为测试集来验证有效性,其余90%用来进行模式的发现.对于测试集中的每个业务流程图,我们从它的第2个节点开始进行推荐.被执行过的测试节点将与所推荐节点进行比较,若测试节点与推荐节点相同则认为推荐准确.实际中,推荐系统往往会推荐给用户多于一个的结果,以供用户选择.因此,在下面的实验中,我们认为若测试节点与推荐结果中的任一个节点相同就认为一次正确的推荐.通过计算不同推荐结果数量下的准确性,我们间接地考察两个方法的有效性.图10基于合成数据集测试仿真数据集.本实验场景中,我们拟通过模拟真实流程的数据集考察NMSF方法在不同测试用例下的准确率变化.该场景下的流程图含有不同的分支结构,且所用测试用例规模与图10(b)相同.如图11所示,在推荐结果仅为1时,不同测试用例下的准确率均较低,且彼此相差较大.这是由于不同规模的流程库会导致线下发现的模式数量不同,以及挖掘到的模式与待推荐结果的关联程度不同,进而使得准确率波动较大.可以明显看出,在推荐结果为2时,NMSF方法的推荐准确度波动减小,且均提高至80%左右.该实验证明NMSF方法的有效性能够很好地满足实际应用.合成数据集.我们首先固定流程数量为500,考察随着推荐结果的个数(N)增加,NMSF与Flow-Recommender两个方法的推荐准确率变化.如图10(a)所示,两个方法均随着推荐结果数目的增加,其准确率也增加.这是因为推荐结果数目的增加自然的增大了推荐准确的概率.不同的是,NMSF在前4个推荐结果的准确率均高于FlowRecommender.图10(b)所示实验中,我们固定推荐结果数目为2,考察不同业务流程数目下的准确率变化.共采用5个不同的合成测试数据集,这些数据集的规模大小在200~1000之间.可以看出,在所有测试用例中(即相同规模下的数据集),NMSF方法的推荐准确率均略高于FlowRecommender.通过上述实验结果可以得出,本文提出的NMSF方法基于流程图结构并结合近距离最大子图的方式能在较少推荐结果中获取较好的推荐效果.此外,FlowRecommender以及现有类似推荐系统,均没有考虑业务流程中的分支情况,所以无法适用于复杂的流程推荐场景,在实际使用中受到了限制.5.2高效性在效率方面,由于线下阶段涉及处理工作较多,Page10其耗时会较长.但在实际应用中,与线下处理相比,线上推荐阶段直接关系到用户体验,因此,推荐阶段的效率更受用户关注.本节实验仅针对线上推荐,其效能是通过考察测试节点的平均推荐时间来衡量的.注意,在线下阶段,我们排除了这样一些子图:上游子图和相应的候选节点集个数均大于1.这样的流程片断本文工作不支持,不在第3节中讨论的推荐场景范围内.根据4.2节的介绍,参考流程的近距离最大子图与流程模式的匹配是最为耗时的,而且一般主要取决于模式的数量.因此,我们将合成数据集以及仿真数据集各自分成了5个不同规模(200~1000个流程图)的测试用例,如表2所示.需要强调的是,即使在同一个用例下,FlowRecommender(表2中用“FR”表示)与NMSF的流程模式数量互不相同.这是由于它们发现模式的方式不同所导致的.此外,由于仿真数据集包含了众多流程分支等结构,因此其图12单个节点平均推荐耗时图12(b)反映了仿真数据集上面的推荐效率.通过DFS编码后,我们将仿真数据集上复杂结构转化成了字符串的唯一标识,通过匹配字符串是否相等就可判断两个流程片断是否一样.这样的转化对效率的提高起到了重要的作用.结合表2与图12(b)我们能得出,即使模式数量超过4000时,节点平均推荐时间仍在5ms以内,且整体趋势是随着业务流程的增多,推荐时间也呈上升趋势.此外,高效的推荐还得益于在实际实现中,流程中前后活动节点的I/O类型约束也可用来过滤一部分不需要参与匹配的模式.通过上述实验与分析,可以得出,NMSF方法效率较高,能够很好地应用于实际场景.6相关工作当前,虽然在流程建模改进方面的研究工作较对应的模式数量相对与合成数据集要多.表2中流程模式数量的总体趋势是业务流程数越大,相应产生的流程模式越多.业务流程数量2008804009156009441289800961155510009611804图12展示了基于表2的线上推荐效率结果(通过插值处理).从图12(a)中可以看出,在合成数据集上,两个方法所消耗的时间相差不多,且耗时也低.这是因为两个方法在线上推荐时都是在做寻找相同模式的处理工作,计算复杂度相差不大.事实上,两者的推荐时间均主要取决于待匹配的模式数量.多,但通过类似本文流程推荐的方式来指导和完善流程建模的研究工作并不多见.据我们所知,只有很少的一部分研究工作与本文直接相关.文献[12]提出了一种称为FlowRecommender的流程推荐技术,该技术与本文解决问题一致,但是该技术仅适用于串行工作流,无法适用于存在复杂结构(如AND-split,OR-join等)的流程模型上.然而,实际中的业务流程模型结构远比串行结构复杂,所以FlowRecom-mender无法在真实应用中广泛使用.相比之下,本文提出的方法是建立在图结构的基础上,更加趋近于实际流程,可以支持多种拥有复杂结构的流程模型.其它与流程推荐相关的工作来自于服务计算领域的服务组合[13].但是,传统的服务组合要么是基于现有过程模板进行Web服务的查找,要么需要用户指定一些约束关系,包括Web服务间的依赖、用Page11户的偏好等,进行过程模型的自动创建.与之相反,本文的工作是由业务流程资源库驱动,没有任何的预定义模板或者需要指定其它约束关系.流程图的匹配在整个推荐过程中起着非常重要的作用,而传统的流程匹配均是以流程相似度计算[8,14-15]来实现的.这些研究工作主要基于图编辑距离(GED)[16],存在计算复杂度高以及转变操作代价函数的不确定性等问题.本文所提方法虽然不考虑代价函数等配置信息,但在推荐准确率方面已能够满足实际应用.此外,其高效的推荐也能保证企业业务流程的快速构建.7总结本文针对当前业务流程建模效率低、准确度不高等问题,提出了一种新的流程推荐技术解决方案.该技术利用图挖掘方法,线下提取业务流程资源库中的流程模式,线上利用近距离最大子图优先(NMSF)的策略与流程模式进行匹配,通过判断两个流程片断最小DFS编码的一致性,得到推荐候选节点集.本文讨论了基于该技术的流程推荐系统的实现,并通过实验证明了NMSF方法的高效性和准确性,实验结果表明该方法可以很好地支持实际的应用场景.
