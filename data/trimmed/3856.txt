Page1基于存储级并行的同时多线程电压紧急容错技术胡杏1),2)潘送军1),2)胡瑜1)李晓维1)1)(中国科学院计算技术研究所计算机体系结构国家重点实验室北京100190)2)(中国科学院大学北京100049)摘要时钟门控等低功耗技术引起的电流波动以及供电网络上的寄生阻抗效应,共同形成感应噪声(di/dt),引起供电电压波动.过大的电压波动可能引发时延故障并影响系统正确运行,被称之为电压紧急.文章分析了同时多线程处理器中电压紧急与程序访存行为之间的关系,结合程序的存储级并行性,提出了一种线程调度方法以减少电压紧急对系统性能的影响.实验结果表明,与flush方法相比,所提方法在双线程环境下平均减少21.7%的电压紧急,在四线程环境下平均减少25.2%的电压紧急,并能够有效提高同时多线程处理器的公平性.关键词电压紧急;感应噪声;同时多线程;存储级并行1引言随着集成电路工艺的发展,时钟门控[1]等低功Page2响处理器运行的正确性,这种现象称为电压紧急(VoltageEmergency,VE)[2].随着工艺特征尺寸的减小,供电电压波动幅度不断增加.当前,电压紧急已成为高性能处理器设计者关注的热点问题.目前工业界采用的方法主要是在电路设计时提高电压余量.但是在45nm的工艺尺寸下,20%的电压余量造成约25%的性能降级,当工艺特征尺寸减小为16nm时,性能损失将高达50%[3].而处理器在实际运行过程中,电压紧急发生的频度较低.例如,在CoreTM2Duo处理器中,大部分情况下电压波动都在额定电压的4%以内,只有0.06%的情况超出此范围[3].因此为预防出现频度较小的电压紧急而提高电压余量是一种保守的设计方法,带来了较高的系统性能损失.另一种技术路线是在体系结构级采用容错技术避免电压紧急影响程序正确执行.现有体系结构级电压紧急容错技术主要包括电压紧急的预测[2,4-7]、通过各种调度方法减少电压紧急的发生[3,8-9]以及确认发生电压紧急后进行系统恢复[10].以上方法大都针对单线程处理器,其中Essawy等人对同时多线程(SimultaneousMultithreading,SMT)处理器中的电压紧急进行了分析,观察到电压紧急发生的频度及幅度随线程数目增多而增加[8].本文对处理器运行不同类型程序时的电压紧急特性进行分析,观察到程序访存行为与电压紧急之间的关系,从而利用程序的存储级并行性,提出了一种线程调度方法以减少电压紧急的发生.本文第2节介绍相关研究工作;第3节首先分析不同类型程序在SMT处理器中的电压紧急特性,继而提出结合存储级并行的线程调度方法;第4节给出实验结果及其分析;第5节总结全文.2相关工作文献[4]介绍了电压波动的形成,如何利用模拟器模拟电压波动,它抽象出电源供电网络,并使用功耗分析工具Wattch[11]模拟处理器在运行程序时的电压变化.文献[6]对单线程处理器中电压紧急进行了分析,发现电压紧急大都由以下微体系结构事件引起:分支误预测引发的清空流水线,L1/L2高速缓存缺失,页表缓存(TranslationLook-AsideBuff-er,TLB)缺失和长延时运算.而文献[8]主要针对SMT处理器进行分析,发现与单线程处理器中电压紧急的主要引发原因不同,SMT处理器中的电压紧急主要由于资源竞争导致.SMT处理器可以平滑一条线程暂停而导致的电压波动,但若暂停的线程占用流水线资源无法释放,将导致流水线资源拥塞从而暂停,导致电流骤减.当该长延时操作执行完毕时,流水线又进入活动状态,引起电流骤增,电流的骤减和骤增引发电压紧急.随着线程数的增多,资源竞争和拥塞次数更严重,导致电压紧急发生得更频繁.SMT处理器中的取指方法直接影响了处理器中的线程调度.文献[8]进而分析了ICOUNT[12]和flush[13]取指方法对SMT处理器中资源竞争的影响.ICOUNT方法旨在尽量均衡地执行每个线程.flush方法在ICOUNT方法的基础上,针对长延时Ld操作进行了改进———当某线程执行长延时Ld指令时,将该指令后续指令清除出流水线,停止对该线程取指直到Ld指令的数值返回.文献[8]发现利用flush方法可以缓解资源拥塞,减少电压紧急发生的次数.上述方法忽略了程序访存特性与电压紧急之间的联系,存储级并行性(MemoryLevelParallelism,MLP)[14-15]不仅对系统性能产生着显著的影响,还为减少电压紧急提供了可能.现有利用MLP的方法主要包括存储子系统设计[16-17]和流水线结构设计[18-22].我们的方法属于后者,通过流水线结构设计提高处理器并发长延时访存操作的数目.流水线结构设计方法主要包括增大指令窗口[18]、Runahead[19-20]和基于值预测的推测执行[21]以及使用多线程/多核处理器结构[22].3基于存储级并行的同时多线程电压紧急容错3.1研究动机我们对SMT模拟器M-sim[23]进行了修改,结合功耗分析工具Wattch,使用SPECCPU2000基准程序集以模拟SMT处理器运行过程中的电压波动情况.为分析程序访存行为对电压波动的影响,我们根据访存行为密集程度将程序分为访存密集型MEM和指令级并行密集型ILP(划分方法见第4节),模拟运行1000000条指令,统计电压紧急发生次数,观察ILP2和MEM2两组程序电压紧急特性的差别,其中ILP和MEM表示程序类型,数字表示SMT处理器中的线程数目.如图1所示,MEM2类型程序发生电压紧急的平均次数为13660次,而ILP2类型程序为4099次,MEM2程序组发生电压Page3紧急的频度为ILP2程序组的3.33倍,故处理器运行MEM类型程序更易发生电压紧急.所以我们从程序访存特性出发,通过重叠多个长延时Ld操作的时间,减少电压紧急并降低MEM类型程序的性能损失.程序中的循环代码使得大部分动态指令流由少量的静态代码构成,故程序的访存特性具有规律性,这为长延时Ld指令的存储级并行性预测提供了可能.图1发生电压紧急的次数(一百万条指令内)存储级并行是指在程序的指令流中,多条长延时Ld指令独立且在时间上相距很近.处理器可以利用此特性并行发出和处理多条长延时Ld操作,以重叠访存时间.为了描述存储级并行性的内在涵义,我们引入了两个概念:访存聚簇和存储级并行度.访存聚簇是指一段动态指令流中包含多条独立的Ld指令.存储级并行度(缩写为MLP度)指具有访存聚簇特性的动态指令流中能够重叠执行的长延时Ld指令的个数[22].图2显示了SPECCPU2000基准程序的存储级并行性情况,由图可见,在MEM型程序中,75.2%的动态访存程序块具有访存聚簇性,并且有39.5%的动态访存程序块的MLP度大于5,故访存密集型程序中存在大量的存储级并行性可以利用,提供了叠加访存时间的可能.在此基础上,我们结合程序访存特性提出同时多线程取指方法MLP-Aware以减少电压紧急的发生.3.2MLP-Aware电压紧急容错方法MLP-Aware方法的基本思想如图3所示.图中左侧为线程动态指令流,一旦该线程执行的Ld指令被识别为长延时,就通过历史信息预测该Ld指令后续是否有其它长延时Ld指令可以叠加执行,若可以叠加,则继续向下执行.若该Ld指令后没有其它长延时Ld指令可与之叠加,则停止对该线程取指,并将该长延时Ld指令的后续指令清除出流水线,直到其数值返回,才恢复对该线程的正常取指.为支持MLP-Aware方法,需对流水线部分结构进行修改.如图4所示,在流水线中修改了Ld/St队列结构和取指单元并增加了MLP预测器.Ld/St队列中设立了检查机制,以确定Ld指令是否为长延时.设立MLP预测器的目的是根据所保存的历史信息判断是否可以叠加访存,取值单元根据MLP距离信息采取相应的取值方法.MLP距离是指某Ld指令距离与其可叠加执行的最远Ld指令之间的动态指令条数.下面将详细介绍MLP-Aware方法对流水线部分结构的修改.3.2.1Ld/St队列检查机制MLP-Aware方法的第一步是确认某Ld指令是否为长延时操作.文献[13]中提出两种识别长延时操作的实现方法:缓存缺失信号触发和延时触发.前者在发生缓存缺失时,使缓存返回一个缺失信号,处理器根据该信号来定位发生长延时Ld操作的线程.此种方法对流水线修改较大.第2种方法实现较简单,当发现某条指令在Ld/St队列里超过L个时钟周期,则认为发生了长延时Ld操作.我们采用第2种方法识别长延时操作,并在实验中将L定为20个时钟周期,略大于L2缓存命中时间.Page4图4MLP-Aware处理器结构示意图3.2.2MLP预测器MLP预测器的主要功能是预测MLP距离并更新MLP距离预测表.MLP距离预测表的表索引项为长延时Ld指令的指令地址(即PC值),内容为该Ld指令的MLP距离.一旦确认线程动态指令流中的某个Ld操作为长延时,预测器将查找MLP距离预测表,预测该Ld指令相应的MLP距离.某条Ld指令的MLP距离是指在这段指令流中,能与它叠加执行的最远Ld指令距离它的动态指令条数.如图5所示,Ld1指令的MLP距离为5.在预测过程中,若MLP距离预测表中无该Ld指令项时,则默认其MLP距离为0.在程序执行过程中,我们还将根据长延时Ld指令的信息更新MLP距离预测表.在图5所示的例子中,假设程序中某段动态指令流中有5个长延时Ld指令,分别为Ld1,Ld2,Ld3,Ld4,Ld5.当程序执行Ld1时,开始第一个动态指令窗口W1(动态指令窗口的大小设为ub,其大小设置将在第4节具体介绍),如果查询MLP距离预测表,发现表中无Ld1指令项,则在MLP距离预测表中插入Ld1表项,继而在执行Ld2,Ld3,Ld4时,更新表中Ld1的MLP距离域.当程序执行到Ld5时,由于Ld5与Ld1之间的距离已经超出动态指令窗口大小,因此开始下一个动态指令窗口W2,并在MLP距离预测表中插入Ld5表项.设立动态指令窗口的目的是避免对MEM型线程的过度取指,减少发生资源拥塞的可能性.3.2.3取指单元MLP-Aware方法的取指过程如下:当某线程发生长延时Ld操作时,根据该Ld指令PC查找MLP距离预测表,获得MLP距离md.若md为0,则将该Ld指令的后续指令清除出流水线,释放资源,避免该线程占用资源.若md>0则继续执行,直至指令距离为md,才停止对该线程取指直至Ld指令的数值返回.MLP-Aware取指单元的逻辑结构示意图如图6所示.选择逻辑确定每个时钟周期的取指线程.选择逻辑的控制信号ci(0<i<n,n为指令条数)表明该线程能否叠加长延时Ld操作的状态,若为0,则选择逻辑放弃从该线程取指令,如果c1到cn全部为0,则处理器中所有线程都处于不可叠加长延时Ld操作的状态(此为小概率事件,但仍可能发生),则随机选取一条线程继续执行.控制信号ci是信号Page5longlatency和信号p进行逻辑或操作的结果,lon-glatency和p分别表征线程是否处于长延时操作状态和MLP可利用状态.当线程进入长延时Ld操作时,longlatency置0.信号p是信号occupancy和信号d逻辑与的结果,occupancy表征Ld/St队列的使用率,d表示是否存在MLP距离可以利用.为了避免MLP-Aware取指方法造成Ld/St发生拥塞,我们设定Ld/St使用量超过80%时,将occupancy赋值为0,也就是不进行MLP预测,直接停止对该线程取指.否则,启用MLP-Aware方法,根据d值图6取指单元逻辑结构示意图此处MLP-Aware清空流水线机制与分支误预测清空流水线机制类似,均由给定指令开始释放流水线资源,包括重命名寄存器、指令队列和重排序缓存(如果为访存指令,还将释放Ld/St队列中相应项),无需新增其它硬件.4实验环境与实验结果我们扩展了M-sim模拟器,使其支持flush和MLP-aware方法.每个线程有单独的程序计数器和重命名表,其他资源则为线程间共享.主要的配置参数如表1所示.为对访存密集型程序区分考虑,我们根据程序出现长延时操作的频度将程序分成4组,运行200M指令.若某程序平均每1K条指令出现长延时Ld操作的次数大于0.5,则将其归为MEM类型程序,否则为ILP类型程序.如表2所示,判断是否继续取指令.d值的计算方法是:由MLP预测器输入的MLP距离md,计算出预测的可叠加访问的最远Ld指令动态地址dda,若当前的取指指令的动态地址cda大于dda,则d值为0,说明长延时Ld指令后已有多于md条指令进入流水线执行,则将与Ld指令动态距离大于md的指令清除出流水线.如果cda<dda,信号d为1,说明该线程当前的取指指令与Ld指令的动态距离小于md,则继续对该线程正常取指,直到取满md条(即cda=dda)为止.MEM组全部由MEM类型程序构成.MIX组是MEM类型程序和ILP类型程序的混合组合.取指/译码带宽指令发射队列个数Ld/St队列个数整数运算器个数整数乘/除运算器个数浮点运算器个数浮点乘/除运算器个数Page6表2SPECCPU2000程序集分类art,gziplucas,gzipswim,artmgrid_swimperlbmk_artmcf,perlbmk4.1性能评估指标由于flush方法和MLP方法均主要针对访存密集型程序优化,故实验主要针对MEM型程序组和MIX程序组,考察在这两种不同方法下的电压紧急情况.SMT处理器主要有两个性能评估指标:平均吞吐量Throughput和公平性Fairness,分别表征所有线程的平均IPC和每个线程执行的均衡情况[24].考虑到每个线程下自身访存特性对电压紧急发生次数的影响,在实验中引入以下指标表征每次流水线暂停引发的电压紧急次数,以对不同取指方法下的电压紧急情况进行分析.其中,VE#为电压紧急发生实际次数,Instsum为总提交指令数,处理器中有n条线程,每条线程提交指令数为Insti(0in).根据文献[3],大部分电压紧急频度和流水线暂停周期数正相关,故设置fac-tor=stall_ratio,表征每个线程电压紧急的特性,factor越大表明该程序更容易发生电压紧急.其中stall_ratio指线程发生暂停的频度(可能由指令缓存,L2缓存缺失或分支误预测等事件引起).这个指标因为考虑程序自身电压紧急特性从而更客观地评价SMT处理器的电压紧急发生情况.4.2MLP距离预测表准确度和实现细节4.2.1MLP距离预测表准确度MLP距离预测表的准确度直接影响系统的性能.对于MLP距离预测表,预测错误有两种情况:(1)MLP预测器预测有存储级并行度而实际并不存在;(2)MLP预测的存储级并行度少于实际情况.定义第i次预测的准确度为则预测器的准确度为其中Accuracyi为每次预测准确度,Sum为预测总equake,art,gzip,fma3dgzip,swim,vpr,fma3dmcf,art,eon,ampmcf,applu,gzip,lucasswim_perlbmk_mgrid_art次数.故预测器的准确度定义为每次预测准确度的平均值.图7显示了MLP预测器的准确度,由于程序具有明显的代码重复特性,故预测性能较好.根据实验数据,我们的MLP预测器准确度平均情况下达到了90.7%.4.2.2MLP距离预测表实现细节对MLP距离预测表更新时,动态窗口的大小ub对性能也有显著影响.当ub设置过小时,存储级并行特性不能充分利用,当ub设置过大,可能导致长延时线程占用过多资源而致使流水线拥塞.流水线中关键资源主要包括重排序缓存(ROB)、Ld/St队列和物理寄存器.在这里设立ub略小于寄存器文件大小/线程数,在双线程环境下,设置为50,在四线程环境下,设置为30.由于不同线程的地址空间不相交,所以不会导致MLP距离预测表发生冲突.多个线程可以共用一个MLP距离预测表.如表3所示,MLP预测器的表项数目需要量较少,每个线程平均每106指令需要表项数目为15项,故面积开销也较小.在实验配置中,双线程环境下MLP预测表表项设置为48项,四线程环境下MLP预测表表项设置为96项.MLP预测器的替换策略采用LRU算法.由于MLP预测器的时序约束不高(MLP预测器电路时延故障造成的预测失败,仅降低了叠加长延时操作的优化效果,不影响程序的正确性),故对系统性能的影响较小.Page7表3平均每106条指令所需MLP表项数目程序表项数程序表项数程序表项数ammp3galgel7lucas2mgrid17mcf29vpr7applu5perlbmk7swim26art60gzip1avg.154.3实验结果及分析实验结果表明,与flush取指方法相比,MLP-Aware方法能有效降低电压紧急的发生频度.图8和图9分别为双线程和四线程环境下发生电压紧急的情况.在双线程环境下,MLP-Aware方法平均减少约21.7%的电压紧急,四线程环境下,电压紧急可降低约25.2%.在公平性方面,MLP-Aware方法明显优于flush方法.如图10和图11所示,MLP-Aware在双线程和四线程环境下公平性相较于flush方法分别图8双线程MLP-Aware与flush电压紧急次数对比图图9四线程MLP-Aware与flush电压紧急次数对比图提高1.6倍和1.4倍.MLP-Aware方法使得处理器的吞吐量也平均提高4.4%,当程序集为MEM类型时,MLP-Aware方法比flush方法的吞吐量在二线程和四线程环境下分别提高8.9%和6.3%,尤其是当访存密集型程序的MLP距离较大时,MLP-Aware方法不仅能较好地降低电压紧急频度,同时还能提高多线程处理器的公平性和吞吐量.但对于MIX类型程序集,flush方法倾向于执行ILP类型的线程,从而通过利用此线程的指令并行性来提高系统吞吐量,而不会像MLP-Aware公平地调度MEM线程和ILP线程.由于ILP线程的吞吐量明显高于MEM线程的吞吐量,因此即便MLP-Aware挖掘了存储级并行,在MIX组中,MLP-Aware的系统吞吐量还是会略低于flush方法,如图12和图13所示,平均情况Page8图10双线程MLP-Aware与flush公平性对比图图11四线程MLP-Aware与flush公平性对比图图12双线程MLP-Aware与flush吞吐量对比图Page9图13四线程MLP-Aware与flush吞吐量对比图下,MLP-Aware方法在二线程和四线程环境中吞吐量分别下降2.6%和2.5%.虽然flush方法的吞吐量略高于MLP-Aware方法,但flush方法是以牺牲MEM类型程序性能为代价的,公平性低.5结论本文针对同时多线程中的电压紧急进行分析,长延时Ld指令不仅对系统性能影响明显,对电压紧急的影响也十分显著.它们占用流水线关键资源继而影响其他线程的执行.已有工作通过flush方法减轻长延时Ld指令对系统的影响,这种方法虽能从一定程度上减小电压紧急频度,但忽略程序自身访存特性与电压紧急特性之间的关系.我们的工作结合程序特性,提出了一种线程调度算法,利用程序中大量存在的存储级冗余特性提升系统性能,避免由于长延时Ld操作造成资源拥塞,进而显著减少电压紧急的发生.
