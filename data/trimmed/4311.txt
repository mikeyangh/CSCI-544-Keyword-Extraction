Page1有期限约束的多DAG共享资源的调度及公平费用优化方法田国忠1),2)肖创柏1)谢军奇1)1)(北京工业大学计算机学院北京100124)2)(新疆工程学院计算机工程系乌鲁木齐830091)摘要随着网格和云计算工作流技术的发展,近来关于多DAG(DirectedAcyclicGraph)共享资源调度的研究取得了一些进展,然而,关于具有最晚完成期限约束的多DAG共享一组有限异构资源的调度及其费用最低化等问题还有待进一步研究和解决.针对这些问题,文中首先提出了衡量DAG期限紧急水平的“相对严格程度”的新方法,并在此基础上提出了基于相对严格程度的调度算法MDRS(SchedulingforMulti-DAGswithDeadlinebasedonRelativeStritness).该算法不仅能够合理处理多个DAG之间调度的紧急水平关系,也能对由于DAG期限过于严格而可能产生的“过饱和”情况进行探测和处理.一旦遇到“过饱和”情况,则采用“堆栈”与“调度回溯”相结合的机制尽可能少地丢弃其中的DAG,从而达到DAG吞吐量最大化调度目标.在MDRS算法的基础上,为了满足各DAG期限内完成约束条件,并尽可能公平地降低多个DAG执行的费用,又提出了基于单位相对严格程度变化量的费用降低率最大化方法的费用优化算法CDVRS(CostDecreasebasedonVarianceoftheRelativeStrictness).实验表明:这些方法及算法能够达到较好的性能.关键词多DAG调度;期限约束;工作流;费用优化;公平性1引言很多的工作流任务及任务间的依赖约束关系都可由有向无环图DAG(DirectedAcyclicGraph)来表示或者能够转化为DAG任务图.近年来,随着一些异构分布式计算环境下工作流系统技术研究和应用的发展(如网格、云计算或混合云计算工作流系统),作为这些工作流管理系统的关键技术之一的多个DAG任务共享异构分布式资源的调度问题引起了研究者们的关注.目前有关多个DAG任务共享资源调度的研究在执行时间最小化(MakespanMinimization)、公平性最大化(FairnessMaximiza-tion)、吞吐量最大化(ThroughputMaximization)以及资源分配优化(ResourceAllocationOptimiza-tion)等方面已经取得了一些进展[1-8].另外,在网格、云计算或混合云计算等平台的工作流的研究领域中,关于有最晚完成期限约束的DAG调度问题也引起了研究者们的关注.在这些新型异构分布式应用环境下,由于资源提供者往往会根据所提供的资源类型、服务质量QoS(QualityofService)和用户使用(或租用)资源的总时长进行计费,用户考虑到经济费用等因素,往往会根据应用的需求为DAG应用指定一个最晚完成期限Deadline,而并不要求DAG在最短时间内完成,这样就需要工作流调度系统能够根据用户指定的最晚完成期限尽可能为用户的DAG任务选择经济费用最低的资源[9].针对有期限约束的DAG任务调度及其费用优化,相关研究[9-14]提出了一些算法和解决方案.这些关于有Deadline约束的DAG调度算法大多都有一个“Deadline分配”的重要步骤,也就是用不同的方法将整个DAG的Deadline分配到各任务(或任务区间)上,然后根据任务所分配的时间窗口尽可能选择较便宜(因而速度也较慢[11])的资源进行费用优化.然而目前这些方法主要还是针对单个DAG或者针对单个DAG多个实例[13]在一组资源上的调度及其费用优化问题.由于DAG中任务有数据传递的前后依赖关系,在一组资源上调度后必然会留下空闲时隙,如果将多个DAG共享资源调度,则这些空闲时隙将会被互相利用,资源利用率将会得到显著提高,这也是目前多个DAG共享资源调度受到研究者们关注(如文献[1-8])的重要原因之一.而本文所要提出和解决的问题是:当多个具有最晚完成期限约束的DAG共享一组资源进行调度时,该采取什么样的调度策略和方法才能提高DAG的吞吐量,使得在期限内完成的DAG数量最大化,并且在吞吐量最大化的基础上尽可能公平地降低这些DAG执行的总费用.这些问题的解决将对提高多个DAG共享异构资源应用的吞吐率和降低运行费用有着重要的应用价值.然而,这些问题与以往关于无Deadline约束的多个DAG共享资源调度的时间最小化调度等问题,或者是有关单个有Deadline约束DAG的调度及费用优化等问题相比,是复杂而更具有挑战性的问题.针对有最晚完成期限的多个DAG共享资源调度来说,这些结构、大小各不相同的DAG中,每个DAG都有一个由用户根据QoS需要所指定的最晚完成期限Deadline.不合理的调度方法将可能引起期限内完成DAG数量的降低,因此如何根据这些DAG的Deadline紧急程度公平合理地确定这些DAG的调度关系,才能使得期限内完成的DAG数量最大化是首要考虑和解决的问题.进一步看,如果每个DAG的Deadline的紧急程度都比较高,那么很可能会出现:即使不考虑费用优化而采用时间最小化方法,也不能够使得所有DAG都能在期限内完成的情况(本文将这种情况称为“过饱和”).因此在调度中需要有一种方法能够对这种情况进行探测.如果出现了“过饱和”情况,还需要对其中的DAG按照某种方法进行丢弃.其次,在DAG吞吐量最大化的基础上,如何进行费用优化而公平地降低多个DAG的经济费用问题是另一个较为复杂的问题,因为这将涉及到任何一个DAG的调度及费用优化都会影响到其他DAG的调度及费用优化,甚至会导致其他DAG不能够在期限内完成.同时,这也是现有关于单DAG调度费用优化研究所采用Page3的各种Deadline分配方法[9-14]不适用解决上述调度及费用优化问题的原因之一.就我们现有知识范围来看,还未见有相关研究和文献针对上述这些问题展开研究和讨论.尽管一些关于解决其他类型问题(如多个没有依赖关系的独立实时任务或实时DAG任务的调度问题)的文献[15-19]所提到的EDF(Earliest-Deadline-First)和LLF(Least-Laxity-First)方法可以借鉴,但也不能够很好地解决上述这些问题.其中的EDF方法是:任务的Deadline时间越早,调度优先级越大,能够越早被调度.尤其是文献[19]在解决多个实时的非精确计算DAG的调度问题时采用了EDF方法,即用DAG的Deadline作为DAG任务的优先值.针对结构大小相同的多个DAG,采取这种方法的确会有较好的效果.然而,Deadline不足以反应多个结构不同DAG之间紧急程度的关系.例如,A和B两个DAG共享一组定量的资源同时进行混合调度,其中A的Deadline(DA)较为紧急,接近其Mown(Mown表示:当用某个时间最小化的算法对DAG单独进行调度的makespan(调度长度)[2]),而B的Deadline(DB)大约为其Mown的2倍.但如果B的任务量较小,很有可能会出现DB<DA的情况.按照EDF方法,A的任务只有在B中所有任务优先被调度完毕后才能被调度,那么A将不能在DA之前完成.相比之下,LLF方法[18]会比EDF更好,也就是用DAG的Deadline宽松度(即DAG的Deadline与其Mown之间的差值)衡量DAG完成期限的紧急程度.但如果多个DAG之间的结构和任务量差异很大,根据LLF的方法来决定DAG调度的优先级,也不能很好地衡量多个DAG之间Deadline紧急程度相对差异的大小.因此EDF和LLF方法都不能很好地衡量多个DAG之间紧急程度的关系.另外,除了对DAG紧急程度的衡量以外,对“过饱和”情况的探测和处理,如何降低多DAG共享资源调度执行的经济费用等问题也都有待解决.为解决上述这些问题,本文完成了以下几方面的工作:首先提出了衡量每个DAG相对于其Deadline紧急程度的“相对严格程度”和“宽松度”的定义,并在此基础上给出了基于相对严格程度的算法MDRS(schedulingforMulti-DAGswithDead-linebasedonRelativeStrictness)和基于LLF方法与MDRS相结合的算法LLF-Sim-MDRS(schedulingforMulti-DAGswithDeadlinebasedoncombiningLLFwithMDRS);在DAG吞吐量最大化和MDRS算法基础上,针对多个DAG共享资源调度的费用优化问题,提出了基于单位相对严格程度变化量的费用降低率最大化方法的算法CDVRS(CostDecreasebasedonVarianceoftheRelativeStrict-ness).另外为了比较各个算法在调度和费用优化性能等方面的优劣,本文也提出了3个新的衡量算法性能的指标:相对于Deadline的满意度、规范化总费用和费用优化的公平性.本文第2节包括问题的描述、相关的定义、DAG吞吐量最大化的算法MDRS、LLF-Sim-MDRS算法和费用优化算法CDVRS;第3节给出实验设置和各个算法实验结果的比较分析;第4节是结论和展望.2多DAG调度吞吐量最大化及费用优化两阶段策略2.1有期限约束的多DAG共享异构资源的调度及费用优化问题n个由用户指定了完成期限Deadline的DAG(G1,G2,…,Gi,…,Gn)共享q个异构分布式系统资源(M1,M2,…,Mi,…,Mq)同时进行调度.其中,这组异构分布式资源环境的网络拓扑连接、通信特性、DAG任务模型及模型中每个任务的向上权值ranku(ni)等与著名的HEFT(HeterogeneousEarliestFinishTime)算法文献[20]中有关的假设、定义和计算方法一致,这里不再赘述.关于任务在资源上执行的经济费用,文献[10-12]假设了任务在资源上运行的时间越短,其经济费用也越高,而在文献[14]中假设了每个机器都有一个单位时间使用价格.因此,我们也类似地假设计算资源Mi依据其提供的服务及运算速度有一个单位时间的使用价格pMi.任务在每个资源上执行的时间都不一样,在价格较高或费用较大资源上的执行时间也较短.若某DAGGi中的第k个任务Gi-k在某资源Mi上的执行时间为wGi-k,Mi,则任务Gi-k在Mi上经济费用应为pMi·wGi-k,Mi.另外,若某DAGGi的Deadline表示为tDeadline-Gi,与文献[11-12]一样,我们也假设该DAG的tDeadline-Gi>Mown,其中对Gi的Mown值的计算采用著名的时间最小化算法HEFT.最终调度目标:使得这组能够在期限内调度完成的DAG吞吐量(数量)最大化,并在此基础上尽可能公平地降低所有能在期限内完成的DAG总的执行费用.Page4由于这些来自不同用户的DAG的Deadline是由用户根据需要指定的,具有一定的任意性,因此各个DAG相对于其Deadline的紧急程度都可能不一样.显然,DAG中各任务尽量选择费用较低的资源(因而速度也较慢[11])意味着整个DAG的完成时间很可能要滞后,并且很可能会出现“过饱和”情况.因此,在费用优化前,需要一种能够根据DAG的Deadline的不同紧急程度来确定不同DAG任务调度先后关系的时间最小化的预调度算法,来探测可能存在的“过饱和”情况,并确定最终可同时调度完成的DAG最大数量以及各DAG的最早完成时间.当这些确定以后,如果这组DAG仍有冗余时间,再进行费用优化是一种合理可行的方案.因此本文提出了以下2.2节中期限内完成的DAG吞吐量最大化和2.3节中费用优化两个阶段的算法.2.2第1阶段的DAG吞吐量最大化调度算法及2.2.1期限紧急程度的衡量方法及MDRS算法相关性能指标(1)期限紧急程度的衡量方法在某个关于单DAG调度的时间最小化算法下,每个DAG的Mown容易计算得到.本文也采用著名的HEFT算法来计算每个DAG的Mown.如果某个DAGGi在HEFT算法下的Mown被表示为tM-Gi-SHEFT-own,那么Gi的初始相对严格程度被定义为rori-un(Gi)-SHEFT=tM-Gi-SHEFT-own/tDeadline-Gi(1)假设在调度的任务资源映射过程中,某个时间点上,某Gi仍有剩余的未被调度任务,这些任务被表示为un(Gi).在资源被已调度任务占用的情况下,如果利用HEFT对un(Gi)中所有任务进行调度后,un(Gi)中任务在资源上最早的开始时间为tsun(Gi)-SHEFT,最早完成时间为tfun(Gi)-SHEFT,那么un(Gi)的makespan(调度长度)表示为mun(Gi)-SHEFT=tfun(Gi)-SHEFT-tsun(Gi)-SHEFT;相对于Gi的Deadline,un(Gi)的可用时间表示为mavail-un(Gi)=tDeadline-Gi-tsun(Gi)-SHEFT,那么Gi中所有剩余未被调度任务当前的相对严格程度被定义为而Gi中所有未被调度任务当前的宽松度被定义为lun(Gi)-SHEFT=mavail-un(Gi)-mun(Gi)-SHEFT(2)基于相对严格程度的MDRS算法第1步:所有DAG中第1个任务的选择和调度.第1个要调度的任务是从rori-un(Gi)-SHEFT值最大的DAG中选择向上权值ranku(ni)最高的任务,并对其用HEFT进行调度.第2步:第2个及后续所有任务的选择及调度.每当上次选择的任务经HEFT算法调度后,计算每个DAG所有剩余未被调度任务的相对严格程度run(Gi)-SHEFT,然后从run(Gi)-SHEFT值最大的DAG中选取剩余任务中向上权值ranku(ni)最高的任务,并利用HEFT进行调度.重复这一过程,直到所有DAG的任务调度完毕.在计算run(Gi)-SHEFT时之所以采用HEFT算法,是由于在资源被已调度任务占用的情况下,利用时间最小化的HEFT算法来计算Gi剩余任务的makespan,更能直接反映某个DAG相对于其Deadline的紧急程度.如果一旦发现某个DAG的剩余任务利用最小化时间方法调度所需时间等于其剩余可用时间,可以优先利用HEFT算法调度该DAG的剩余全部任务,以保证其在期限内完成.可以看出,这里的相对严格程度实际上就是对DAG期限的紧急程度的一种衡量方法.当然,上述第2个任务及后续所有任务的选择及调度过程中可能会出现更为复杂的情况,如“run(Gi)-SHEFT1”、“run(Gi)-SHEFT<0(随着已调度任务的增多有可能会出现“tsun(Gi)-SHEFT>tDeadline-Gi”的情况)或“过饱和”情况等.针对这些情况的处理见以下完整算法MDRS.算法1.基于相对严格程度的算法MDRS.输入:Gunsche←Gi(i=1,2,…,n);输出:Ssche1.(1)根据以下3步从Gunsche中选出第1个任务并调度:2.计算所有DAG的初始相对严格程度3.选择rori-un(Gi)-SHEFT值最大的Gi,并从对应的4.从Gi-unsche删除该任务;5.(2)对第2个任务及后续所有任务的选择和调度:6.WHILE(Gunsche≠)DO#/便于引述,该循环在7.计算run(Gi)-SHEFT(Gi∈Gunsche);Page58.IF(0<run(Gi)-SHEFT<1Gi∈Gunsche)THEN9.选择run(Gi)-SHEFT值最大的Gi,并从对应的Gi-unsche10.IF(相对应的Gi-unsche=)THEN11.将Gi从Gunsche中删除(即修改Gunsche);12.ENDIF13.ELSE14.IF(存在有DAG的run(Gi)-SHEFT=1,且其余DAG15.将Gunsche中所有run(Gi)-SHEFT=1中tM-Gi-SHEFT-own16.ELSE17.IF(出现有DAG的run(Gi)-SHEFT>1或18.IF(在“WHILEDO”#循环中,本次不是连续第219.从堆栈Ssche中弹出上一次压入堆栈的已分配20.将弹出的任务加入到相应的Gi-unsche中,修改21.将“run(Gi)-SHEFT>1”或“run(Gi)-SHEFT<0”中最22.ELSE23.IF(在“WHILEDO”#循环中,本次是连续第224.在本次所有“run(Gi)-SHEFT>1”或“run(Gi)-SHEFT<25.对ssche做出栈操作,直到属于被取消DAG中26.除属于被取消DAG的任务外,将这些弹出/在MDRS算法中,如果在“WHILE27.ENDIF28.ENDIF29.ENDIF30.ENDIF31.ENDIF32.ENDWHILE33.RETURNSsche如果一个DAG有v个顶点任务,机器的数量为q,则HEFT算法在最坏情况下的时间复杂度为O(v2×q)[20].对MDRS来说,如果共有n个DAG同时需要调度,并且在没有“过饱和”发生的情况下,HEFT算法将最多会被MDRS调用1/2·(n2+n)·v次,因此它的时间复杂度为O(n2·v3·q).如果有“过饱和”发生,在最坏的情况下,即有n-1个DAG需要丢弃,那么算法HEFT将最多会被MDRS调用1/6·n·(n+1)·(2n+1)·v次,因此它的时间复杂度为O(n3·v3·q).因此算法能够在幂次多项式的时间复杂度内提供一个解决方案.2.2.2基于LLF方法与MDRS相结合的算法正如前所述,与EDF方法相比,将LLF方法中的宽松度作为衡量Deadline的紧急程度是一种更好的选择.因此,如果将LLF方法与MDRS相结合,我们就得到了使得期限内完成的DAG吞吐量最大化的另一种可选算法LLF-Sim-MDRS.简单来说,该算法就是用2.2.1小节定义的宽松度来衡量某DAG未调度任务的紧急程度,并且每次根据宽松度来决定下一次将从哪个DAG中选取要调度的任务.宽松度小的DAG中的任务优先被调度,即用lun(Gi)-SHEFT=mavail-un(Gi)-mun(Gi)-SHEFT替换MDRS算法中的相对严格程度run(Gi)-SHEFT.另外需注意的是:在算法MDRS中“run(Gi)-SHEFT=1”对应于算法LLF-Sim-MDRS中的lun(Gi)-SHEFT=0,并且在LLF-Sim-MDRS中,被视作“过饱和”情况发生的条件也应调整为“在WHILEDO#循环中连续第2次出现“lun(Gi)-SHEFT<0”.本文将这种替换后的算法称为LLF-Sim-MDRS算法.LLF-Sim-MDRS算法可以看作是根据每个DAG的冗余时间大小来衡量DAG的Dead-line紧急程度,进而决定多个DAG中任务调度的先后顺序,是一种可供选择的调度方法.与EDF方法类似,LLF-Sim-MDRS算法中所使用的宽松度也是一种用绝对量来衡量DAG的Deadline紧急程度的方法,因此适用于多个DAG的结构和任务量差异较小的情况.2.2.3期限内DAG的完成率和相对于Deadline若利用某调度算法S对所有DAG同时混合调Page6k=1度完毕后,能够在各自Deadline内完成的DAG数量表示为nc,则nc/n·100%为完成率Rc,该值越高,说明算法能根据Deadline的紧急程度合理安排多个DAG之间的调度关系,使得调度系统的DAG吞吐量越高.在这些期限内完成的nc个DAG中,如果第k个DAG的Deadline为tDeadline-Gk,它的makespan为tM-Gk-S,第k个DAG的makespan与其Deadline的比值rGk-S=tM-Gi-S/tDeadline-Gk,则这nc个DAG在调度策略S下混合调度后rGk-S(k=1,…,nc)的均值Avg(rGk-S)=1略S下的各DAG完成时间接近各自Deadline的程度,表示为Accessness(S).在Rc相同的情况下,Accessness(S)越高,说明各DAG完成时间越接近各自Deadline;而这nc个DAG在调度策略S下调度后rGk-S(k=1,2,…,nc)的标准差Dev(rGk-S)=nc∑nc槡1略S相对于Deadline的公平性,表示为Fairness(S).在Rc相同的情况下,Fairness(S)越小,说明所有能够在期限内完成的DAG的完成时间与其Deadline的比值相互之间就越接近,调度策略S相对于Deadline的公平性也就越好.在Rc相同的情况下,如果Accessness(S)较高,说明所有DAG的完成时间与各自Deadline平均接近程度较高,但同时如果Fairness(S)也较高,则表明多个DAG之间的完成时间与各自Deadline的接近程度差异水平较大,那么调度的公平性就较差,因此Accessness(S)和Fairness(S)都不能单独衡量调度的好坏.因此本文定义了以下关于调度策略S相对于Deadline的满意度指标:Satisfaction(S)=Accessness(S)/Fairness(S)(4)如果一组DAG经过调度策略S调度后,Satisfaction(S)越大,说明调度策略S的调度相对于Deadline的满意度性能越好.2.3第2阶段的费用优化算法及相关性能指标经过第1阶段MDRS算法调度给出了DAG吞吐量最大化的预调度方案后,如果确定了一组n个DAG中在Deadline内完成的DAG最大数量为nc,并且这nc个DAG中相对于各自Deadline仍存在DAG有冗余时间,这意味着可以进行第2阶段的费用优化,将更便宜的机器资源分配给有关任务.最终的优化目标为:尽可能公平地降低所有nc个DAG总的执行费用,同时满足这nc个DAG能够在各自期限内完成的约束条件.由于每个资源的单位时间使用价格是确定的,并且按照文献[20]的假设,每个任务在每个机器资源上的估计执行时间也是已知的,因此只要算法确定了每个DAG所有任务在资源上映射关系,也就确定了每个DAG在资源上执行的费用和所有DAG调度执行的总费用.针对第2阶段的费用优化问题,本节提出了基于单位相对严格程度变化量的费用降低率最大化的费用优化算法CDVRS.另外,为了比较不同算法对多个DAG共享有限资源调度的总费用和各DAG之间的费用降低率是否公平,又给出了规范化总费用指标NC-multiDAG(S)和费用优化的相对公平性指标FCost(S-Spre)的定义.2.3.1公平的费用优化算法CDVRSCDVRS算法基本过程为:首先对第1阶段的MDRS算法所筛选出的这些DAG的所有任务都赋给未优化任务集合,已优化任务集合初始为空.然后,每次利用MDRS算法来确定下一个要优化的调度任务.当确定了要优化的任务后,对这个任务的优化方法是:在本次MDRS算法确定的资源MHEFT(由于MDRS算法在选择了某个任务后将用HEFT算法调度该任务,因此该资源记为MHEFT)和所有比MHEFT更为便宜的资源中,利用单位相对严格程度变化量的费用降低率最大化的方法做出选择.该任务优化后,将该任务转移至已优化任务集合,直到未优化任务集合变空为止.以下介绍具体优化过程及相关符号表示.在已优化任务占用了资源的情况下,利用MDRS算法对所有未被优化过的任务进行预调度.假设在这次预调度中第一个被选择调度的任务为Gi中的第k个任务,被记为Gi-k,并且该任务所分配的资源记为MHEFT,任务-资源映射关系记为(Gi-k,MHEFT),这个映射后某个DAGGi的相对严格程度表示为run(Gi)-SHEFT/(Gi-k,MHEFT)(它的计算方法同2.2.1节的相对严格程度计算方法).而待优化任务Gi-k在选择资源MHEFT上的费用表示为Cost(Gi-k,MHEFT)=pMHEFT·wGi-k,MHEFT(其中pMHEFT为资源MHEFT的单位时间价格,wGi-k,MHEFT表示任务Gi-k在MHEFT上的执行时间).假设此时在所有资源中,对任务Gi-k来说,费用比MHEFT便宜的资源集合为MGi-k,那么当任务Gi-k选择了比MHEFT更为便宜的资源Mchea(Mchea∈MGi-k)时,某个DAGGi的剩余未优化任务的相对严格程度就表示为run(Gi)-SHEFT/(Gi-k,Mchea);而Cost(Gi-k,Mchea)=pMchea·wGi-k,Mchea则表示Gi-k在Mchea的费用(其中pMchea为Page7资源Mchea的价格,wGi-k,Mchea为任务Gi-k在Mchea上的执行时间).至此可以得到:当任务Gi-k选择了某个比MHEFT更为便宜的资源Mchea(Mchea∈MGi-k)后,费用的降低量为Cost(Gi-k,MHEFT)-Cost(Gi-k,Mchea),各DAG剩余未优化任务的run(Gi)-SHEFT变化量绝对值之和为∑ncrun(Gi)-SHEFT/(Gi-k,MHEFT)|,则单位相对严格程度变化量的费用降低率则定义为CDVRS(Gi-k,Mchea)=∑nc第2阶段的费用优化算法CDVRS的核心就是待优化任务Gi-k将从MGi-k中选择使得CDVRS(Gi-k,Mchea)最大化的一个资源Mchea(Mchea∈MGi-k)作为其优化后的映射资源.具体步骤见算法2.Cost(Gi-k,MHEFT)-Cost(Gi-k,Mchea)run(Gi)-SHEFT/(Gi-k,Mchea)-run(Gi)-SHEFT/(Gi-k,MHEFT)i=1算法2.CDVRS.输入:Gunoptimized←Gi(i=1,2,…,nc);/待调度优化输出:Gi-optimized1.WHILE(Gunoptimized≠)DO2.在已优化任务占用了资源基础上,利用MDRS预3.将任务Gi-k的费用比在MHEFT上费用低的其它资4.WHILE(MGi-k≠)DO5.从MGi-k中取出一个较为便宜的资源Mchea试分6.IF(出现某DAG完成时间超出其Deadline)THEN7.CDVRS(Gi-k,Mchea)=0;8.ELSE9.计算CDVRS(Gi-k,Mchea);10.ENDIF11.ENDWHILE12.IF(MGi-k中所有Mchea的CDVRS(Gi-k,Mchea)=0)13.仍将MHEFT作为任务Gi-k的资源;14.ELSE15.从MGi-k中选择使得CDVRS(Gi-k,Mchea)值16.ENDIF17.将任务Gi-k从Gi-unoptimized中移至已优化任务集合18.IF(Gi-unoptimized=)THEN19.从Gunoptimized删除该DAG;20.ENDIF21.ENDWHILE22.RETURNGi-optimized正如2.2.1节对MDRS算法时间复杂度的分析,在没有“过饱和”发生情况下,也就是在不发生取消DAG的情况下,MDRS的时间复杂度最大为O(n2·v3·q),那么这种情况下的MDRS算法与MDRSco-op复杂度是一致的.假如有nc个DAG进行调度,每个DAG都有v个顶点任务,机器数量为q情况下,CDVRS优化算法最多会调用MDRSco-op算法nc·v·q次,因此它们的时间复杂度均为O(n3c·v4·q2).因此该算法也能够在幂次多项式的时间复杂度内提供一个调度的费用优化方案.2.3.2规范化总费用指标和费用优化公平性指标(1)规范化总费用指标NC-multiDAG(S)为方便比较不同算法的费用指标,针对有最晚完成期限约束的单个工作流调度,文献[11]定义了规范化费用指标NC=某算法下的总费用/CC,其中CC为所有任务都选择最便宜资源情况下的总费用.本文推广这一定义到针对具有完成期限约束的多个DAG共享有限资源的混合调度情况.nc个DAG中,第k个DAGGk的所有任务如果都选择最低费用资源情况下Gk的费用记为CostC-Gk,则这nc个DAG的所有任务都选择最低费用资源时的总费用可记为∑ncCostC-Gk;在混合调度算法S调度这nc个DAGk=1后,Gk的费用记为CostS-Gk,nc个DAG的总费用记为∑ncCostS-Gk,则算法S调度这nc个DAG的规范k=1化总费用被定义为Page8NC-multiDAG(S)=∑nc(2)费用优化的相对公平性指标FCost(S-Spre)一般说来,用户指定DAG完成期限的相对严格程度越低或Deadline越长,即对计算服务的QoS时间上的要求较低,当然希望所支出的费用也越低;反之,QoS要求越高的用户,相应的付费水平也应该越高.在共享资源调度情况下,如果给予一个DAG的优化机会越多,其他DAG的优化程度就会降低.如果经某算法调度或费用优化后,期限紧急程度较低的DAG反而比紧急程度高的DAG费用降低程度或降低率还要低,就出现了不公平.因此公平的多个DAG之间费用优化或降低程度关系不仅受到DAG的数量和任务量的影响,也受到这些DAG之间Deadline紧急程度及其差异水平的影响,并且任何一个DAG的调度和费用的变化都会对其他DAG的相关指标产生影响.为了衡量不同算法对多个DAG进行费用优化的公平性,本文提出了一种新的性能指标,即费用优化的相对公平性FCost-opti(S-Spre).该定义分为以下几部分:设有nc个DAG,第k个DAG的初始相对严格程度为rori-un(Gk)-SHEFT(见2.2.1节定义),则第k个DAG(Gk)在这nc个DAG中公平的优化权重定义为该定义表明了Gk初始相对严格程度越高,即Dead-line越紧急,冗余时间越小,所应给予Gk的费用优化程度在nc个DAG的费用优化率总量中所占权重应该越小.假设在某算法Spre下,上述nc个DAG中Gk(第k个DAG)的费用为CostSpre-Gk(等于Gk中所有任务费用之和),如果经过某优化算法S对这nc个DAG进行了调度后,Gk的费用变为CostS-Gk,则算法S相对于Spre,nc个DAG的总费用降低率drTotal-Cost(S-Spre)=∑nc100%;单个DAG(Gk)的费用降低率drCost-Gk(S-Spre)=(CostSpre-Gk-CostS-Gk)/CostSpre-Gk·100%,并且Gk在所有nc个DAG费用降低率总量中所占的权值可表示为Wdr-Gk(S-Spre)=drCost-Gk(S-Spre)/∑nc这nc个DAG在某算法S下费用优化的相对公平性(k=1被定义为FCost(S-Spre)=∑ncFCost(S-Spre)值越低,说明在算法S下,各DAG实际费用降低率的权重与对应DAG的公平费用优化权重越接近,则算法S在费用优化方面的相对公平程度也就越高.另外,不同的算法S之间,只有相对于同一个Spre算法下各DAG的费用进行总费用降低率drTotal-Cost(S-Spre)、单个DAGGk的费用降低率drCost-Gk(S-Spre)和FCost(S-Spre)等指标的比较才有意义.根据文献[11]有关性能比较方法,本文为比较不同算法S的费用优化公平性指标,Spre选取经典的最快策略HEFT算法,即每个DAG单独利用HEFT算法在所有资源上调度,这种情况下Spre可被表示为SHEFT-own.如drTotal-Cost(S-SHEFT-own)表示:相对于SHEFT-own策略下所有DAG的总费用,经过算法S调度后,所有DAG总费用的降低率.FCost(S-SHEFT-own)表示:相对于SHEFT-own策略下各DAG的费用,在算法S下各DAG的实际费用降低率与其对应的公平费用优化权值之间的差异水平.3实验3.1实验设置本文全部实验在联想ThinkPadL4124403AJ5(Intel(R)Core(TM)i3CPU,2.53GHz)+Win7环境下,并在课题组研发的DAG调度模拟实验平台上完成.该平台基于jdk1.6的JavaNet-BeansIDE6.9集成系统研发.以下将介绍针对本文算法的相关实验设置和实验方法.由于本文算法分为两个阶段:第1阶段的目标是,对可能的“过饱和”情况进行探测和处理,在时间最小化方法下合理处理多个DAG之间的调度关系,使得在期限内完成的DAG数量最大化,并且DAG完成时间越接近Deadline越好.因此针对第1阶段的两个算法,将与EDF、Fairness-F1和Round-Robin等有关算法进行对比,验证所提出的MDRS和LLF-Sim-MDRS算法相关性能.对于第2阶段的费用优化算法,由于只有在期限内DAG完成率相同的算法之间进行费用变化指标方面的比较才有意义,而CDVRS算法是在第1阶段MDRS算法预调度确定了期限内完成的DAG数量基础上,并在存在DAG有冗余时间的前提下进行费用优化,两算法的Page9DAG完成率一致,所以第2阶段CDVRS算法只需要与MDRS算法在费用和期限满意度的相关指标方面进行验证和比较即可.3.1.1需比较的相关算法(1)第1阶段的MDRS和LLFSim-MDRS将与以下几种调度方法进行相关比较.EDF方法:Deadline最小的DAG的所有任务优先按HEFT调度后,Deadline较大的DAG插入到较小DAG的时隙Slots中去.Fairness-F1算法(见文献[2,7]):该算法针对无Deadline约束的多DAG同时调度的情况,属于公平的时间最小化算法,仅根据调度过程中的每个DAG的Slowdown值的变化来决定下多个DAG之间的调度关系.Round-Robin轮转法(见文献[5,7]):该方法针对无Deadline约束的多DAG调度问题,轮流从每个DAG选取一个任务按HEFT方法调度,直到所有任务调度完毕.(2)第2阶段的费用优化CDVRS将会与第1指标.3.1.3实验方法实验利用上述相关算法在模拟软件平台上共模拟100组随机生成的DAG分别在7组不同的Deadline紧急和差异水平下的调度情况.实验方法如下.(1)每组同时调度的DAG数量在3~20整数中随机选择.当一组DAG的数量确定后,组内每个DAG按照文献[20]中的实验方法随机生成.本文采用如下参数集合随机生成DAGSETV={5,10,20,35,55};SETCCR={0.1,0.5,1.0,5.0,10.0};阶段的MDRS算法进行比较.3.1.2比较的性能指标法在以下2个指标上进行对比.同时调度DAG总数n的比率.(1)MDRS和LLFSim-MDRS算法将与其它3个算Rc:完成时间不超过Deadline的DAG占所有Satisfaction(S):不同调度策略S的相对于(2)CDVRS算法将在以下3个指标上与MDRSNC-multiDAG(S):规范化总费用指标.Satisfaction(S):Deadline的满意度指标.FCost(S-SHEFT-own):费用优化的相对公平性Deadline的满意度指标.算法进行对比.以上集合的下标及其含义与文献[20]完全一致,这里不再重复.(2)在3~20中随机选择一个整数作为该组DAG的执行机器数量.然后根据文献[20]实验方法,从异构因子参数β集合中随机抽取一个参数生成DAG中每个任务在这组机器上的预计执行时间.本文的β参数集合选为SETβ={0.1,0.5,1.5,2.5,3.0},其中β为资源异构因子参数,它影响着DAG中某一任务在不同资源上执行时间差异大小程度.一般来说,资源的运算速度越快,价格也越高[11],因此机器间的性能速度差异越大,其单位时间的价格差异也应该越大.为体现这一特征,我们选用正太分布N(7,β)来随机生成机器的单位时间使用价格.如某组DAG在SETβ中随机选择到了异构因子参数1.5为每个任务在一组资源上生成了运行时间,则利用正太分布N(7,1.5)随机生成该组机器的单位时间使用价格.(3)在文献[11]的实验中,针对DAG的Dead-line生成,采用了λ·MH(1<λ<5)方法.其中,λ为比例因子,MH为利用HEFT算法对某个DAG单独在某个数量资源上调度的makespan,相当于本文所提到的tM-Gi-SHEFT-own.但由于该文献的方法是针对单个有Deadline约束的DAG调度问题,不适用于多DAG情况.为了更好地体现用户DAG最晚完成期限Deadline的随机分布特征和更好地对比一组DAG在不同Deadline的紧急程度和差异水平下各算法的性能,本文对文献[11]的该方法进行了改进.具体做法是:当一组DAG和机器的数量以及任务在每个机器上的执行时间确定后,其中每个DAG的tM-Gi-SHEFT-own均可得到,如果确定这组Deadline,只需再确定λ参数组(λ1,λ2,…,λn)即可.针对λ1,λ2,…,λn,本文利用正太分布N(μλ,σλ)(μλ和σλ分别为λ的期望与标准差,其取值集合为SETλ={(1.2,0.2),(1.6,0.3),(2.5,0.5),(3.0,0.7),(5.0,1.2),(7.0,2.2),(10.0,3.0)})生成7组λ参数,然后用“λ·MH”方法为一组DAG生成7组不同紧急和差异水平的Deadline组.(4)当每组DAG的上述这些参数生成确定后,用上述6种不同算法对每组DAG分别在7组Deadline情况下执行(当然,其中CDVRS算法每次都在MDRS算法调度后,即确定了能在期限内完成的DAG数量之后进行),记录统计这组DAG的Page106种算法在7组不同的Deadline条件下调度的有关指标.对100组DAG调度实验后,对每种算法记录了700组实验结果及相关性能指标,并按7种Deadline参数类型分为7组,最后得到每种算法下7组相关性能指标的平均值.3.2实验结果及分析3.2.1关于MDRS和LLF-Sim-MDRS的实验结果根据3.1节所述的实验方法和实验数据进行统计,得到了MDRS、LLF-Sim-MDRS、EDF、Fairness-F1和Round-Robin等5个算法对100组DAG分别在7种不同类型Deadline条件下调度的Rc和Satis-faction(S)两个性能指标的均值,如图1和图2所示.图1SETλ中7种Deadline参数下的5种算法的Rc均值图2SETλ中7种Deadline参数下的5种算法的在图1中,当(μλ,σλ)取值为(1.2,0.2)时,由于DAG的Deadline的均值和标准差都较小,也即Deadline紧急程度总体上较高,并且差异水平也较小,因此多个DAG的同时调度对资源竞争的强度也大.可以看出这5种算法在期限内完成的DAG数量的平均比率都较低,但MDRS算法和LLF-Sim-MDRS的平均Rc仍然较高,分别为21.8226%和16.0736%.而Fairness-F1和Round-Robin算法则因为没有考虑Deadline因素,也没有对“过饱和”情况的探测与处理,所有的DAG按照公平或轮转方法调度,当每个DAG的冗余时间都比较小的情况时,容易造成这些DAG的完成时间均超出其Deadline,致使在(μλ,σλ)这一取值上的平均Rc值更低,Fairness-F1和Round-Robin算法的平均Rc分别只有6.3832%和6.1193%.尽管EDF算法也没有考虑“过饱和”情况,但它总是选择Deadline最小的DAG优先调度,在多个DAG的任务量差异不大的情况下,仍能够合理安排DAG之间的调度关系,平均Rc相对比最后两种算法高.随着(μλ,σλ)中μλ和σλ的取值增大,所有5个算法的平均Rc都在增大,表明了随着多个同时调度的DAG平均冗余时间的增大,不管采取何种方法,在期限内完成的DAG的平均数量都会增大,但MDRS算法在各种差异水平下的平均Rc值都为最高,并且增长速度也最快,LLF-Sim-MDRS算法次之,最慢的是Round-Robin算法.当(μλ,σλ)取值为(10.0,3.0),MDRS算法的平均Rc达到了78.8561%,LLF-Sim-MDRS算法的平均Rc为57.3142%,Round-Robin算法的平均Rc为39.3871%.表明与其他4种算法相比,MDRS算法根据Deadline的相对严格程度能够更加合理地对多个DAG进行调度,并能保证在各种Deadline的差异水平下,一组DAG中期限内完成DAG的数量最多.LLF-Sim-MDRS算法表现比其他3种算法较好,表明“冗余度小优先”的方法在一些情况下是有效果的.图2显示了在不同的Deadline的均值和差异水平下的5种不同算法的平均Satisfaction(S)值.当(μλ,σλ)中μλ和σλ的取值在较小时,5种不同算法的平均Satisfaction(S)都比较接近,但随着在(μλ,σλ)中μλ和σλ的取值的逐渐增大,MDRS的Satisfaction(S)呈上升趋势,当(μλ,σλ)取值为(3.0,0.7)时,Satisfaction(S)达到了最高值,从(5.0,1.2)开始缓慢下降.如果进一步扩大(μλ,σλ)中μλ和σλ的取值,调度完毕后,DAG的完成时间与Deadline的接近程度Accessness(S)会变小,而公平性Fairness(S)却不会有趋向性的变化,从而导致Satisfaction(S)降低.这也说明了如果要使得调度性能达到最好水平,DAG的Deadline的平均值和差异水平与同时调度DAG的结构、数量规模和资源数量规模都存在着某种最佳的匹配关系.而其他3种算法(EDF、Fairness-F1和Round-Robin)的Satisfaction(S)均值则明显要低于MDRS和LLF-Sim-MDRS,并且随着μλ和σλ的取值的增大,这3种算法的Satisfaction(S)一直处于下降趋势,这也进一步说明了由于Fairness-F1和Round-Robin对多Page11个DAG的Deadline之间差异水平变化不敏感,不适合解决这类调度问题.从总体上看,MDRS和LLF-Sim-MDRS都明显好于其他3种算法,但LLF-Sim-MDRS在各种Deadline的均值和差异水平下的平均Satisfaction(S)值变化不稳定,说明根据多个DAG冗余度的大小进行调度的LLF-Sim-MDRS算法,在有些情况下不能够很好地反映DAG的紧急程度,致使调度完毕后,在期限内完成的各个DAG的完成时间与各自Deadline相比差异较大.3.2.2关于费用优化CDVRS算法的实验结果以下为费用优化算法CDVRS和MDRS两算法分别在7种不同类型Deadline条件下调度100组DAG的规范化总费用NC-multiDAG(S)、Satisfaction(S)和费用优化的相对公平性FCost(S-SHEFT-own)等指标的均值对比,如图3、图4和图5所示.图3显示了在7种不同的Deadline的均值和差异水平下,MDRS和CDVRS调度100组DAG的规范化总费用NC-multiDAG(S)的平均值.当DAG的Deadline紧急程度较高和差异水平较小时,也即当(μλ,σλ)两参数较小时,这2种算法的规范化总费用NC-multiDAG(S)的均值没有明显差异,并且都较高,均超过了4.5.这表明,当DAG的Deadline之间的紧急程度较高和差异水平较小时,为了能保证各DAG都能在期限内完成Deadline,都尽可能选择最早完成时间的资源,费用优化的空间较小,并且对CDVRS来说,如果选择任务的MHEFT以外的资源容易造成有DAG的完成时间超出其Deadline.从两算法该指标的变化趋势来看,随着(μλ,σλ)取值的增大,在MDRS算法下,规范化总费用NC-multiDAG(S)均值没有明显的变化趋势.这表明,虽然Deadline延长和差异水平扩大会影响各个DAG的Deadline紧急程度关系的变化,使得DAG的任务调度顺序图3SETλ中7种Deadline参数下MDRS和CDVRS的发生变化,DAG的完成率会上升,但所增加的冗余时间并不能被有效利用.而CDVRS算法在每种情况下的规范化费用NC-multiDAG(S)均值都比MDRS低,并呈现出持续下降的变化趋势,表明该费用优化算法能在保证各DAG在期限内完成的约束条件下,充分利用冗余时间而选择费用较低的资源进行调度,因而是一种有效的费用优化方法.图4显示了在不同的Deadline的均值和差异水平下的MDRS和CDVRS调度100组DAG的平均满意度Satisfaction(S).可以看出该图中MDRS的Satisfaction(S)指标与图2中的是完全一致的,到了SETλ集合中的取值为(3.0,0.7)以后,开始下降.这是由于MDRS的目标是使得一组DAG能在期限内完成的数量最大而采用的是时间最小化的方法,随着一组DAG的Deadline延长和紧急程度的降低,经过MDRS调度后的DAG完成时间与其Deadline的接近程度将会降低,从而导致了Dead-line满意度值的下降.与MDRS相比,随着(μλ,σλ)取值在(3.0,0.7)以后的继续增大,CDVRS算法的Deadline满意度指标却没有下降,一直保持着较高的满意度值.这表明CDVRS为了能利用MDRS算法调度后各DAG所余下的冗余时间,尽可能地选择了费用较为便宜的资源,因而进一步延长了各个DAG的完成时间,使得各个DAG的完成时间与其Deadline保持较高的接近程度.图4SETλ中7种Deadline参数下MDRS和CDVRS的图5显示了在不同的Deadline的均值和差异水平下的MDRS和CDVRS算法的100组DAG费用优化公平性指标FCost(S-SHEFT-own)的平均值.从图5中可以看到,在(μλ,σλ)取值在(1.2,0.2)时,2个算法的FCost(S-SHEFT-own)均值都在0.6左右,这也证明了当DAG的Deadline之间的紧急程度和差异水平较小时,由于冗余时间小,费用优化的空间较小,CDVRS算法能够选择MHEFT以外资源的概率较Page12低,因此该指标与MDRS算法比较接近.但随着(μλ,σλ)参数的增大,MDRS算法下的FCost(S-SHEFT-own)的平均值逐渐升高.这表明随着给予DAG的冗余时间差异水平的增大,各DAG之间的初始相对严格程度差异较大(公平的费用优化权重差异也越大),但MDRS算法下的各个DAG费用降低率的权重与其对应的公平费用优化权重之间的差异也变得越来越大,造成了FCost(S-SHEFT-own)均值的升高.相对来说,尽管由于本文一组资源的价格差异是在一个有限的范围取值,从而限制了CDVRS算法下的DAG在更低Deadline紧急程度情况下的费用降低率的增加,造成了从(5.0,1.2)以后下降趋缓,但总体上显示了比MDRS更低的均值.这也表明CDVRS对MDRS调度结果进行费用优化后,各个DAG的费用降低程度比MDRS算法更接近公平的费用优化权值.图5SETλ中7种参数下MDRS和CDVRS的4结论和展望从实验结果分析来看,针对多DAG在任意确定的Deadline条件下调度多DAG的问题,本文提出的相对严格程度、宽松度的定义、MDRS和LLF-Sim-MDRS算法能够根据不同DAG的Deadline的差异水平较好地确定多DAG之间的调度关系,尽可能使得更多的DAG能在期限内完成.其中MDRS算法的吞吐量性能最佳.另外,所提出的费用优化算法CDVRS能够在MDRS调度的DAG吞吐量最大化基础上,兼顾各DAG费用优化的公平性,有效降低各DAG的经济费用.但正如实验分析部分所述,当Deadline的满意度性能达到最好时,DAG的Deadline的平均值和差异水平与同时调度DAG的结构和数量规模,以及与资源的数量规模应该存在一定的匹配关系.如果能有效地确定这些匹配关系,对提升资源系统利用率有较大意义,具有进一步研究的价值.另外,在探测到“过饱和”情况时,不同的丢弃策略会对最终确定要调度的DAG组及任务吞吐量有较大影响.今后将针对上述这些问题展开进一步的研究和探索.
