Page1基于MDP的服务不确定性自适应决策方法王忠杰郑伟徐晓飞初佃辉(哈尔滨工业大学计算机科学与技术学院哈尔滨150001)摘要服务系统运行中因环境变化而面临各种不确定性事件,导致期望价值无法完全实现.有多种应对不确定性的策略,不同的策略导致服务最终成功执行的概率不同,所导致的质量变化(时间延迟、成本溢出等)也不同,需要寻求最优的应对策略,使不确定性造成的损失和应对策略所付出的代价最小.对不确定性事件和相应的应对策略进行了分类,根据流程结构定义服务执行中的各种状态,采用不确定性触发关系图(UTG)刻画状态与决策动作之间的关系,进而采用Markov决策过程(MDP)进行最优策略的选择.通过仿真实验验证了方法的有效性,并给出了影响决策效果的若干因素.关键词运行时服务;不确定事件;自适应决策;Markov决策过程;仿真实验1引言服务计算的哲理之一是利用互联网上的海量候Page2方期望的价值无法完全实现,还可能触发其它更多的不确定性事件,造成各种直接和潜在的影响.本文将“不确定性”定义为“某个已经或即将发生的事件,它使得服务实际执行结果与预先达成的服务级别协议(ServiceLevelAgreement,SLA)之间产生了偏差”.服务执行中典型的不确定性事件包括:(1)某个服务环节执行之后未达到期望的质量(QualityofService,QoS);(2)某个服务环节执行失败;(3)客户需求发生变更或取消;(4)可用服务/资源的数量或价格发生波动;(5)外部商业环境或政策发生变化;等等.从发生时间看,不确定性事件分为已经发生并已造成影响的事件和预测可能发生但尚未发生的事件.为了应对不确定性,核心策略就是“按需应变”:根据预期或已经发生的不确定性事件对服务做出调整.这里的“变”即各种不确定性事件,“应”即所采取的对策,而“需”则是指在决定采取何种对策时应考虑客户/提供者的特征.按需应变的目标是:以最小的代价,使不确定性造成的损失最小化.由于不确定性的动态性,所采取的应对策略也不可能是提前计划好的静态策略,需要根据服务执行时的具体情况选取最优的应对策略.该基本思路如图1所示.在服务执行过程中,对各类不确定性事件可能有多种处理对策(重试、补偿、重组、替换等),不同对策对服务的影响不同.如何以最小的代价使服务回到期望轨道,需要做出最优的选择.另外,由于不确定性是可传播的,选择决策时不能仅考虑到对当前环节的优化,还需要考虑到它对未来的长期影响,从而达到整体最优,因此这是一个长期的动态决策过程.本文根据软件层面的服务(例如WebService)执行中发生的具体不确定性,利用不确定性触发关系图(UTG)刻画不确定性事件所导致的服务状态以及所采取的决策动作之间的转换关系,以服务成功执行的概率最大、时间延迟最小、成本最低作为决策优化的目标,建立基于Markov决策过程(MDP)的不确定性优化决策模型并加以求解,生成对当前服务方案的最优改进策略.限于篇幅,本文方法定位在软件服务层面的不确定性决策,并将已发生和尚未发生的不确定性事件统一看待.2服务不确定性决策的相关研究在按需服务环境中,服务执行之前供需双方在性能、可靠性和可用性等QoS方面达成服务级别协议(SLA).目前得以广泛应用的WebServiceLevelAgreement(WSLA)是一种用于定义和监测Web服务的SLA描述语言和框架[1],为SLA的建模、扩展、度量和监控提供支持.文献[2-4]对服务运行时可能发生的不确定性进行了不同角度的分类,从不确定性发生的层次(应用层面、服务层面、基础设施/中间件层面)、不确定性发生时的表现(服务/数据缺失、非期望的服务行为、性能问题、协议违反)等方面阐述了不确定性的含义,通过基于SLA的风险度量与估算方法协助发现不确定性及其影响[5].服务不确定性与其可靠性息息相关,因此可采用可靠性保障的方法来解决Web服务中的不确定性问题[6],在最初构建服务方案时就考虑可能面临的风险,将可靠性、不确定性等因素加入到服务选择与服务组合模型/算法中,以降低未来执行中的风险.使用随机Petri网等工具对Web服务组合方案进行建模并计算其可靠性[7],或者将服务发生风险时的依赖关系作为服务组合的可靠性优化依据[8],通过Markov决策过程(MDP)等方法来选择最符合客户风险偏好的可靠服务[9-10].为了在服务执行产生不确定事件时能够通过恢复机制来保障可靠性[11],可基于冗余策略预先配置备用服务或多个替代配置方案(配置树、执行计划)来提升服务方案的容错能力[12],目标是使服务方案具备自我治愈的能力[4].当现有服务无法正常执行时直接由备选服务接替执行,也可采用备选流程的方式,在当前流程出现问题时直接切换到备选流程.为此需在服务建模阶段考虑各种不确定性,对建模元素的实现机制和应用场景进行扩展以提高模型描述能力和适应性[13].服务执行过程中的典型动态自适应策略包括:服务替换、服务重组等服务重配置方法、恢复与补偿机制等策略[14],进而在运行基础设施层面加以支持[15].服务替换考虑服务的功能和非功能特性,基于服务的参数类型等静态属性和动态行为特性的匹配保证替换前后服务过程功能的一致性,基于客户Page3的QoS偏好对服务效用进行度量来保证和优化替换后的服务质量[16],并引入context对服务的可替换性进行判断[17].服务重组分为服务的大规模重选取和服务路径的重规划.文献[18]使用服务片段作为重规划的基本单元以提升效率.文献[19]提出了一组系统化的原则和指南,指导设计者如何构造/重规划适应变化的服务.为降低重组代价,对服务过程内处于不同执行状态的部分进行划分,每次尝试都期望在尽量小范围内弥补不确定性产生的后果,并在尝试失败后逐渐扩大重组范围[20].还可使用修补技术对当前服务组合方案进行改变和增强,使之适应各类故障[21].还可根据服务执行反馈的状况,采用持续规划方式[22],以适应执行过程中出现的各类不确定情况.归纳起来,目前对服务不确定性决策的研究分为两类:(1)建模阶段对服务模型进行抗风险能力的增强,一旦运行时发现问题即按预案进行应对;(2)运行阶段对相关服务进行替换、重组或修补,并确保操作前后服务功能和QoS的一致性.尚有两点不足:(1)关注替换、重组、修补等单一决策动作如何操作、如何实施,对哪种动作的效果最优考虑不足;(2)决策目标定位在服务功能的相容性和QoS的可保障性,较少从经济角度考虑不确定性带来的时间和成本方面的损失.本文尝试从这两点入手展开研究,试图将服务层面的不确定性与业务层目标结合起来,寻求处理不确定性的最优决策动作.3服务不确定性事件及状态模型3.1服务方案使用服务流程表示当前执行中的服务方案,表示为SPlan=(A,E,fc,dc),其中,A={a1,a2,…,an}是活动集合,每个活动ai=(CSi,Si0,LSTi,LETi),Si0为当前被选中用于执行该活动的具体服务,CSi={Si1,Si2,…}表示活动的可替换服务集,LSTi表示最晚开始时间,LETi为最晚结束时间.Sij∈CSi∪{Si0},Sij=(SIDij,Tij,Cij,Rij),其中各个分量分别表示候选服务Sij的ID和QoS信息(执行时间、耗费成本、可靠性).本文站在顾客角度看待服务,这里的执行时间是服务执行所消耗的时间,成本指顾客为调用此服务所需要支付的费用(而非是指服务运行的资源消耗,如CPU、存储等),可靠性则为服务成功执行的概率;E={e1,e2,…,em}是活动之间的时序依赖关系.服务流程中存在各种复杂结构关系,本文考虑串行与并行两种基本关系,使用e=(ai,aj)表示活动aj需在ai执行完成后才能开始执行;fc表示服务若执行失败,提供方需要支付给客户的补偿金;dc表示服务若执行延期,每单位时间延迟需要支付给客户的补偿金.3.2服务执行过程中的事件本文关注的是服务执行过程中从外界可观测到的事件,即站在服务使用者的角度观察系统的运行状态,而不关心服务执行环境内部是何种原因而产生的事件.这是因为,服务方案通常是由服务中介方负责构建的,但方案中使用的各服务并不受其控制,故只能从外部观察.若站在服务提供者的角度看待服务的运行状态,则可以观测到服务执行内部的运行情况,例如:站在云计算服务提供商的角度,若服务出现故障,则可以观测到其不确定性事件的产生原因,也许是主机宕机,又可能是停电了;但若站在服务提供者的角度,则顾客观测到的只是服务商无法继续提供计算服务,服务不可用了,而并不关心也无需关心服务内部产生不确定性事件的原因,因为顾客只关心自己需求的服务可以被正常执行.这正是本文选择站在服务使用者(顾客)的角度来观察系统运行状态的原因.事件可表示为event=(t,a,EType),其中,t为事件发生的时刻;a为事件所涉及的活动;EType表示事件的类型.考虑事件的类型EType.服务执行过程中产生的事件分为两大类:正常事件、不确定性事件.前者是一个服务按计划正常开始和正常执行结束时所发出的,后者表征了活动未按预期开始或结束,或者执行失败.按照事件触发的机制,可分为以下3类:(1)由定时器所触发的事件,表示某活动ai未在期望时间点上开始执行或执行完成.服务执行引擎根据服务方案中为每个活动预设的最晚开始和最晚结束时刻对服务执行进行监控,如果到达LSTi或LETi时刻活动未能开始或结束,将发出以下两类事件:E01:ai在当前时刻t未开始执行,满足t>LSTi+δ(δ是一个足够小的时间间隔),一旦系统在LSTi+δ时刻未发现ai开始执行,则发出该类事件;E02:与之类似,ai在当前时刻t未按计划执行结束,满足t>LETi+δ;(2)由活动的开始执行所触发的事件(E11).一旦服务活动开始执行,系统即产生该类事件.tLSTi表示活动提前或准时开始,而t>LSTi表示活动开始迟于计划.Page4下两种情况:(3)由活动执行结束所触发的事件,可分为以E21:活动执行失败或错误,未得到期望结果;E22:活动执行成功.tLETi表示活动提前或准时执行结束,而t>LETi表示活动有延迟.3.3服务执行的状态服务流程在执行过程中产生各种正常或不确定事件,导致服务执行不确定状态.本节给出服务执行状态的刻画.3.3.1单个活动的状态首先定义活动的状态.对活动ai,其状态可表示为state(ai)=STATE_TYPEN/U〈T,C〉或简写为STATE_TYPEN/U.STATE_TYPE可为以下6种类型之一(T和C表示ai处于当前状态时相比于预期服务方案的时间延迟(TimeDelay)和成本溢出(CostOverflow),N和U分别表示该状态为正常状态或不正常状态,正常状态表示时间和成本未超出初始服务方案中对ai的时间与成本的规划(T0,C0),不正常状态是指当前存在时间延迟或者成本溢出(T>0,C>0).对NOT_READY、FAIL、CANCEL3类状态来说,不存在正常或不正常的分类,不需标注上标N或U):(1)未执行(NOT_READY):ai至少有一个前图2服务活动的状态转换关系3.3.2服务执行的整体状态将服务执行“前锋线”(FrontLine)上的各服务活动的状态联合起来,共同表示服务执行的整体状态state(SPlan).所谓“前锋线”,是指将已经执行的部分和尚未执行的部分分开的一条线,表示为FL(SPlan)={(ai,state(ai))},它由一组活动及其状态构成,prodecessor(FL)、successor(FL)分别为其左侧和右侧的活动集合.处于FL中的每一个服务,可能是READYN/U、EXECN/U、FAIL、FINISHN/U的某一状态,序活动尚未执行结束,故ai尚无开始执行的条件,即a∈{aj|e=(aj,ai)},state(a)!=FINISHstate(ai)=NOT_READY.这是所有活动的缺省状态;(2)待执行(READY):若ai的所有前序活动均已执行完毕(处于FINISH状态),且对这些活动的决策动作均非“终止”时,ai具备了执行的先决条件,进入该状态,即a∈{aj|e=(aj,ai)},state(a)=FINISH∧Action(a)!=STOPstate(ai)=READY.当ai处于READY状态且产生E01时,它仍然处于READY状态;(3)执行中(EXEC):当本活动产生E11、E02事件时,ai正在执行中,但尚未结束;(4)执行后失败(FAIL):本活动产生E21事件,ai执行结束,但未得到期望输出,执行失败;(5)执行后成功(FINISH):本活动产生E22事件,ai执行结束,已得到期望结果;(6)取消(CANCEL):当某活动处于READYU、FINISHU或FAIL状态,并且决策动作将该活动终止时,ai被人为取消,服务方案停止执行而完全失败.活动的状态变化是由事件或决策动作所导致的,图2给出了状态之间的转换关系图.其所有前序活动的状态必须是FINISHN/U,其所有后序活动的状态必须是NOT_READY,即ai∈FL,state(ai)∈{READYN/U,EXECN/U,FAIL,FINISHN/U};a∈predecessor(FL),state(a)=FINISHN/U;a∈successor(FL),state(a)=NOT_READY.例如,在某一时刻服务执行状态如图3所示,虚线表示流程执行的前锋线,它左侧的活动(a1,a2,a5)均处于FINISH状态,它右侧的活动(a7,a8,a9)均处于NOT_READY状态,而在线上的3个活动(a3,a4,a6),分别处于READY、EXEC、FAIL状态.Page5FL,state(ai)=READYN;successor(FL)!=;ai∈predecessor(FL),state(ai)=FINISHN/U;state(SPlan)可分为几类:(1)执行前:predecessor(FL)=,对ai∈(2)执行中:FL!=,predecessor(FL)!=,(3)成功结束:FL=,successor(FL)=,对(4)失败结束:FL!=,且ai∈FL,state(ai)=面向不确定性的优化决策的目标可表述为:以最小的时间延迟和成本溢出,使服务以最大概率进入到“成功结束”状态.4面向不确定性的服务自适应决策FAIL.模型4.1决策动作针对每一种不确定性所导致的系统异常状态,有多种可用的决策动作.将每一次决策表示为四元组(SPlan,ai,state,action,SPlan),含义是:当前服务执行方案SPlan,出现了不确定性事件导致某服务活动ai进入状态state,此时采取对策action,对原方案变更而得到新的方案SPlan.将决策动作归纳为5类:(1)终止(terminate).停止活动的执行,state(ai)=CANCEL,客户需求无法满足,服务失败,SPlan=;(2)不作为(continue).不做额外的调整对策,继续按原方案执行下去,SPlan=SPlan;(3)重试(retry).重新执行出现异常的活动,即令state(ai)=EXECU(T,C);(4)替换(substitute).为出现异常的活动ai从其候选服务集CSi中选择一个新服务Sij替换原服务Si0,并重新启动执行ai,即Si0←Sik,其中Sik∈CSi;(5)重组(recompose).对当前前锋线的右侧尚未执行的服务活动进行重组,形成替代方案并启动执行.这相当于对多个服务要素进行替换操作.即将多个服务Si0,Si+1,0,…,Sj0分别替换为Sik,Si+1,k,…,Sjk,其中Sik∈CSi,Si+1,k∈CSi+1,…,Sjk∈CSj.终止、不作为和重试对服务方案的结构无影响,替换相当于为某一活动进行服务选择,重组相当于对后续未执行服务流程进行服务重组.替换和重组是为尚未执行的一个或多个活动选择时间更短或价格更低的候选服务,以此来消除之前因为不确定事件所导致的时间延误或成本溢出,替换可相当于对1个活动进行重新选择和组合服务,它们均有成熟方法可供参考(见第2节).限于篇幅,本文直接使用已有方法生成服务替换方案和重组方案.在此之前,需要根据SPlan的当前状态动态生成替换和重组的目标函数,所获得的替换/重组方案能够使当前造成的时间延误和成本溢出得到最大程度的降低.以下简要说明上述5种决策动作的完备性.当服务出现不确定性,顾客所能采取的所有策略可按下列方式逐渐进行分类,即所有策略=采取动作∪不采取动作=采取动作∪“不作为”=正向动作∪负向动作∪“不作为”=单点动作∪多点动作∪“终止”∪“不作为”=“重试”∪“替换”∪“重组”∪“终止”∪“不作为”.因此,以上给出的5种决策动作可以涵盖顾客所能采取的可能动作.4.2决策、事件与状态之间的关系在服务方案执行过程中,若产生某一不确定性事件,则导致某一活动状态发生变化.此时进行决策,根据决策动作修正服务方案并更新受影响的活动状态,继续投入执行.如此循环往复,直到服务停止或者执行成功.对活动执行前、执行后的状态,一旦该状态产生,马上进行决策;对活动执行中的状态,等活动达到执行后的某一状态时再进行决策.需要说明的是,虽然决策针对服务的整体状态,但是每次动作只针对前锋线上的某一个活动进行.若前锋线上多个活动均处于异常状态,那么多个导致异常状态的事件必然是有先后次序到达的,因而决策也会随事件到达的先后次序进行.本文的决策仅针对单一活动的状态进行.针对服务所处的不同状态,可能采取的决策动作是上述5类中的子集.表1的前4列给出了某一活动处于不同状态时可能采用的决策动作集合,以及决策之后可能导致的新状态.Page6状态类型决策动作决策后可能导致的状态决策后,服务可继续执行的概率(r)ΔT表1服务状态与决策动作之间的关系READYU(T,C)活动执行前状态READYN(T,C)无需决策FINISHN/U(T+ΔT,C+ΔC)FAIL(T,C)活动执行后状态FINISHU(T,C)FINISHN(T,C)无需决策后续活动READYN(T,C)注:表示是否可以过渡到后续活动的READY状态,取决于流程的结构,只有后续活动的所有前序活动均处于FINISH且不采用“终止”决策时才能够过渡到READY.4.3决策收益决策动作的目标是“使不确定性造成的损失尽可能小”,但并不保证服务一定能够从异常状态完全回到正常轨道,因此需要分析每种决策对服务执行的影响,计算其损失(负收益),以此作为优化决策的依据.决策动作对原有的服务方案进行了调整,对它的收益度量从以下3个因素入手:(1)使服务可以继续向后执行的概率.一般情况下服务失败后需支付给顾客的补偿(fc)较高,因此决策动作应尽可能保证服务可以继续执行下去.除了补偿上的考虑之外,还考虑到服务执行失败可能造成的客户流失.设决策动作之后,受影响的活动(可能为当前活动,也可能为下一步活动)执行成功的概率为r,那么该部分代价是(1-r)×fc.(2)若造成时间延迟而需支付的延误成本.设延误时间为ΔT,那么该部分的代价是ΔT×dc.(3)所引入的新成本ΔC.对终止和不作为两种动作来说,新成本为0;对重试动作来说,新成本为重新支付的当前服务使用价格;对替换动作来说,新成本为所选新替代服务的使用价格;对重组动作来(Si0为活动当前所用的服务)Rik(Sik为替换后的服务)(Sik为重组后最先执行的服务)Rik(Sik为替换后的服务)(Sik为重组后最先执行的服务)说,新成本为所选的多个替代服务的使用价格与原方案中相应服务的使用价格之差.因此,在当前状态下state采取决策动作action所带来的总收益是:Reward=-((1-r)×fc+ΔT×dc+ΔC),其中r、ΔT、ΔC的计算方式如表1右侧的3列所示.4.4不确定性触发关系图(UTG)不确定性本身蕴含着服务的一种状态(不正常状态),它是可以传播的,若不采取任何对策(不作为),任由某一不确定性蔓延下去,将会造成更严重的后果(成本溢出、时间延误、执行失败).即使采取了某一种对策,弥补了某些潜在后果,但可能不会完全弥补,因此也会扩散.这里提出不确定性触发关系图(UncertaintyTriggeringGraph,UTG)表达UC之间的触发关系.利用UTG来计算不确定性事件及决策动作所引发的直接和间接代价.UTG可表示为包含两类节点和两类边的有向图UTG=(rs,SS,AS,TSA,TAS),其中:rs=(ai,statei)表示根状态,代表活动ai处于statei时所生成的UTG;Page7SS={ss}为状态节点集合,其中包含两类节点,第一类为原子状态ss=(aj,statej),第二类为嵌套的UTG根结点,可扩展为一棵完整的UTG树;点的有向边;AS={action}为决策动作节点的集合;TSA=ss→action表示状态节点到决策动作节TAS=action→ss表示决策动作节点到状态节点的有向边,它具有3个属性:tp(该状态转移的概率)、ΔT(该状态转移所造成的时间延迟)、ΔC(该状态转移所造成的成本增加).图4给出了UTG示意图,其中菱形框表示根状态,圆形节点表示原子状态,矩形框表示决策动作节点,箭头表示TSA和TAS.图5多棵UTG的连接下面给出一个小例子.假设服务方案是由3个活动(a1,a2,a3)串行构成的流程,图6(a)表示活动a1在READYU状态下的UTG,图6(b)表示活动a1在FINISHU状态下的UTG,图6(c)表示a1在FAIL状态下的UTG.UTG的结构与服务方案的流程结构密切相关.当出现不确定性事件之后,更新相关活动、状态和前锋线的信息,进而根据表1的相关信息生成UTG.5基于MDP的优化决策方法根据第4节的讨论,不确定性是可以传播的,因此作决策时不能仅仅考虑当前发生的不确定性,还在UTG模型中,状态节点可以是一棵UTG的根节点,这代表了不同UTG之间的连接(不同活动的不确定性状态之间的转换).若将此类UTG节点展开,即可形成如图5所示的形态.要考虑到在采取特定决策后续可能引起的其它各种潜在的不确定性,将当前及未来的潜在代价/收益计算进去,得到全局的最优决策.5.1马尔可夫决策过程(MDP)马尔可夫决策过程(MDP)[23]将马尔可夫过程与确定性的动态规划相结合,决策者周期或连续观察随机动态系统,序贯地做出决策,系统下一步的状态是随机的,并且其状态转移概率具有马尔可夫性.决策者根据新观察到的状态,再作新的决策,依此反复地进行.通过此种决策,使系统运行的全过程达到某种最优运行效果,选取控制系统发展的最优策略.服务执行过程中面临的各种不确定性以及对其Page8图6UTG的3个例子所做出的决策,符合Markov决策过程的定义.因此,采用基于MDP的方法进行服务自适应演化过程中的决策,根据当前服务执行状态、发生的不确定性事件、不确定性事件之间的触发关系(UTG),考虑未来的收益和代价,做出当前不确定状态下的最优决策.5.2模型按照MDP的数学模型,需要首先建立决策时刻T、服务状态S、决策动作A、转移概率P、代价Reward的数学表达.(1)时刻T.当前服务环节执行中/执行后发生不确定事件、或者预知到尚未执行的环节将会发生不确定事件时开始决策,此时为时刻0.如图4所示的多棵UTG连接形成完全触发关系图,叶子结点p(statej|statei,action)=1,action=continue/terminate(5)报酬函数Reward.在4.3节中已给出.5.3算法基于上述5个方面的基本定义,采用有限阶段向后递归迭代MDP算法进行最优决策序列的求解,得到对当前服务的决策动作.算法1.基于MDP的服务不确定性优化决策.输入:服务方案SPlan与当前发生的不确定性事件相关输出:最优马氏策略及其成本1.根据出现故障的活动a,按照表1构造UTG,并将多的状态处于最终时刻V,“完全触发关系图”的层数是周期个数.这是一个不定周期的时刻序列;(2)状态S.根据3.3.2节服务执行的整体状态的内容,将服务流程的前锋线上活动的6种状态组成一个状态集合,形成MDP状态state,即state=〈state(ai),state(ai+1),…,state(aj)〉,每个状态附着两个参数(T和C);(3)动作A.根据4.1节的内容,共有终止、不作为、重试、替换、重组5个动作,不同状态下可执行的动作集合有所不同(见表1);(4)转移概率P.转移概率由当前的决策动作和服务活动的状态联合决定,具体计算方式如下所示,其中reliability指的是将要执行的服务端可靠性,若有多个服务,则是多个服务可靠性之积;棵UTG连接形成“完全触发关系图”,从而形成状态转移表;2.定义当前的不确定状态为时刻0,以此生成向后衍生的UTG,直至服务方案最后一个结点,此时为最终时刻V.从而生成0到V的V+1个时刻的若干个状态、若干个动作、相应的转移概率报酬;uV(stateV)=RewardV(stateV);3.令t=V,且对所有V时刻的状态stateV∈S,令4.如果t=0,则π=(f0,f1,…,fV-1)为最优的马氏策略,而u0(state0)为最优的值函数,算法停止.否则,令t=t-1,进入步5;5.对所有statet∈S,计算Page9ut(statet)=maxaction∈Action(statet){Rewardt(statet,action)+并记集合Actiont(statet)=argmaxaction∈Action(statet){Rewardt(statet,action)+任意取ft(statet)∈Actiont(statet),于是定义了t时刻的决策规则ft.而0时刻的决策f0则是对当前故障时刻的故障状态采取最优的直接动作;6.返回步3.5.4算法分析算法的步1和步2可同时进行,耗时out-degree(state)|V|,步3到步6为采用有限阶段向后递归迭代算法求解的MDP属于动态规划问题,其时间复杂度为O(|V|×|S|×maxoutdegree(state)).其中V为决策阶段数,|S|为状态总个数,outdegree(state)为状态state的出度.在本问题中,|V|为UTG的层数,|S|为UTG中的状态总数(实际情况只是UTG一层的状态个数),outdegree(state)的最大值为5(共5种动作),每一个动作可能产生1个或者2个后继状态,因此,算法时间复杂度为O(outdegree(state)|V|+outdegree(state)×|V|×|S|)=O(5|V|+5×2×|V|×|S|).算法执行时间与流程结构紧密相关.在最理想的情况下,服务流程结构为全并行且活动上的服务执行的时间相同,此时状态数|S|1+5×2=11(1个故障状态、采取5种动作、每种动作生成2个后继状态),阶段数为|V|=1,则时间复杂度为O(51+5×1×11)=O(1),下降为常数.最差的情况下,UTG中每个状态都是不重复的,这里UTG的第v层(第v时刻)有5|v|个状态,|v|取最大值|V|,则算法复杂度为O(5|V|+5×2×|V|×|S|)=O(5|V|+5×2×|V|×5|V|)=O(5|V|).平均情况下,状态有部分重复,因此|S|5|V|,虽然理论时间复杂度依然是O(5|V|),但是实际运行时间并不会达到这个级别.6仿真实验6.1实验设置实验针对以下3个目标进行设置:(1)对比仿真.通过仿真的方式来验证本文提出的方法能否有效地对服务不确定性进行决策,并的执行效率.与传统的贪心策略对比.参数的取值对决策动作有何影响;(2)证明影响决策动作的因素.分析fc和dc等(3)算法复杂度.通过实验分析本文所提方法因此,共设计以下3个实验.实验1.同一服务方案下,执行过程中面对一组按时间先后次序发生的不确定性事件,分别采用MDP和贪心策略,对比决策效果.此实验固定服务所有参数,采用仿真进行实验,变量为服务不确定性事件,实验目标观察为MDP和贪心的决策动作的差别.实验2.针对同一服务方案,在服务失败赔偿参数(fc)取不同值的情况下,对决策动作和相应收益的影响.此实验固定已绑定服务和候选服务QoS参数(包括T、C、R),变量为fc.同理,变量为dc时类似.实验3.针对不同结构、不同规模的流程,针对一次决策所耗费时间的对比.此实验固定服务相关参数,包括服务QoS、fc和dc,变量为服务流程中活动的个数,实验目标是观察活动个数对执行时间的影响.实验1是实验2和实验3的基础,只有完成了实验对比仿真,才能说明算法的有效性,才能继续说明算法中的参数对算法的影响(实验2),进而再测试算法复杂性(实验3).上述实验所需数据由程序随机生成,按照3.1节给定的模型为流程、活动、候选服务设置相应的属性.其中,随机生成的数据指服务流程中已绑定的服务和候选服务,服务的数据生成即是其QoS的生成.按照两步生成服务:(1)随机生成服务流程中活动上已经绑定的服务QoS;(2)数据的随机生成为了与现实相符合,因此不应该大量出现偏离常规的奇异数据,针对每个活动,伪随机生成其能够替换原来服务的候选服务,其候选服务T、C、R的值分布满足如表2所示,其中“+”表示比已绑定在活动上的服务相应的值高,“-”则比已绑定的服务相应值小.候选服务如此大致正态分布的取值也与实际相吻合,例如,在候选服务中,出现执行时间长、价格贵、可靠性低的极端服务应该较少,而实际服务执行时间长,相对价格则会便宜,可靠性上可高可低,此类服务应该数量较多.Page10活动上已绑定的服务候选服务在实验1中,T和C的具体取值多少对仿真实验并没有影响,本实验为了仿真展示方便,范围分别为[1,30]、[1,100];而R的取值范围为了与实际服务可靠性相吻合,因此本实验取值为[0.5,1.0],另外,每个候选服务的个数指定为100.现实中大部分情况,服务执行失败时的赔偿价格往往不会太高也不会太低,其不应该大于服务流程总价格,也不会远远低于服务流程的总价格.因此,总为了与现实相吻合,fc=0.5×服务流程总价格;而延时赔偿取值为已绑定的服务的C/T的平均值,因此dc取2.0元/s.服务可靠性R意味着服务不出现故障的概率,因此实验的不确定性事件则在服务执行期间内按照概率(1-R)随机产生不确定性事件,这与现实是相吻合的.在实验2中,变量fc取服务流程总价格的0~2倍,以观察决策动作随fc的变化情况.其余服务参数的生成与实验1相同(包括已绑定的服务和候选服务的T、C、R,候选服务个数,dc),并且固定故障服务状态为失败.在实验3中,手工生成3组流程(串行、并行、混合结构),每组包含8个流程,每个流程中包含的活动数目从10变化到80.以10个活动来说明生成的流程结构:其中,串行流程则10活动都是串行执行;并行流程则所有活动在开始1个活动执行后分支为8条分支同时执行,之后在合并为1个最终活动;混图7MDP与贪心策略在决策效果上的对比分析(1)合则是其中5个活动采用串行,5个活动采用并行.测试算法执行时间与服务T、C、R无关,因此其T、C、R和候选服务数量与实验1/2相同.另外,不确定性事件的产生概率与实验1一致,同为(1-R).采用上面的实验设置生成的随机数据,与算法无关的数据如T、C的范围设置完全随机给出,与算法有关的如fc、dc由以上分析而取与T、C对应合适的值,服务可靠性R也取现实服务相当的范围.在服务随机生成之后,不确定性事件的生成概率依据已生成的服务可靠性R.这使得实验基本与现实情况符合,所生成的数据具有代表性,实验得出的结论具有较高的可信度.MDP和贪心算法均采用Java语言,运行环境为JRE1.764bit,系统平台MicrosoftWindows764bit,处理器为Intel?Corei3CPU3.0GHz,系统内存为4GB,JVM分配512MB内存.6.2实验结果与分析6.2.1实验1.不同决策策略(MDP与贪心)的效针对特定的服务流程,随机产生不确定性事件,使用MDP方法和贪心方法分别生成决策动作,对流程进行自适应修改,进而对比分析两种策略在收益、执行成功率、时间延迟、成本溢出4个方面的差异.实验中,不确定事件按照流程中包含的服务可靠性为参数随机产生.所采用的“贪心策略”是指:不展望未来的收益,直接从当前所能采取的所有决策动作中选择收益最大的动作.在不同的实验设置下(T、C、R的取值范围分别为[1,30]、[1,100]、[0.5,1.0],fc和dc取不同值时)进行实验,从中选择两次有代表性的(T、C、R的取值范围分别为[1,30]、[1,100]、[0.5,1.0],fc=0.5×服务流程总价格,dc=2.0元/s)结果,对比分别如图7和图8所示.图中横轴表示时间,不确定性Page11图8MDP与贪心策略在决策效果上的对比分析(2)事件在不同时刻产生,曲线上的每个点代表一个不确定事件;纵轴分别表示不确定事件发生后采取相应决策后所累积的总收益、成本溢出、时间延迟.从图7可以看出,在服务执行的最初阶段,贪心策略比马尔可夫策略的报酬更高,但随着流程向后执行,MDP策略比贪心策略体现更好的收益.在图8的实验中,MDP方法采取了“终止”的决策动作以避免损失(负收益)过高,故相应曲线在中途断开;而贪心策略则一直执行至服务流程最终结束,但所带来的成本消耗和时间延误均很高.由此可以看出,本文给出的MDP方法较之贪心策略具有更好的决策效果.6.2.2实验2.赔偿参数对决策的影响如4.3节所述,决策收益取决于3个方面的因素:服务继续向后执行的概率、时间延迟、成本溢出.前二者可以统一转化为成本(1-r)×fc、ΔT×dc,它们取决于fc和dc(失败补偿、单位时间延迟补偿)的大小.将这3个部分成本分别记为C1、C2、C3.本实验以fc为主,针对特定流程在执行过程中所发生的一个特定不确定事件,在fc取不同值的情况下寻找最优决策动作.实验结果如图9所示,横轴为fc与服务流程总价格的比值,取值范围为[0.1,2],图9(a)的纵轴表示所采取的决策动作,图9(b)的纵轴表示相应的决策总收益(Reward).从图9(a)中可以看出,在参数值0.3时,决策动作为“终止”;参数值在(0.3,1.2]时,决策动作开始倾向于“重试”;参数值大于1.2时,倾向于选择“重组”或“重试”.这意味着,如果fc较小,C1相对于C3来说很小,决策更倾向于停止,从而避免后续出现其它不确定事件及相应决策在C3上较大的累积;如果fc较大,C1在总成本中所占的比重随之增加,决策将力争让服务继续执行下去,以避免因为失败而引起的巨大C1.另外从图8(b)中可以看出,随着参数值的升高,相应的负收益基本呈线性增加,这表示fc对决策代价造成较大影响.dc(单位延迟时间的补偿)对决策结果造成的影响与fc类似.限于篇幅,这里不再给出实验结果.6.2.3实验3.时间复杂性根据5.4节的分析,本文方法的时间复杂性与服务方案的流程结构复杂性具有密切的关系.实验中,生成3种不同结构的流程(纯串行结构、纯并行结构、混合结构),执行MDP算法,记录相应的执行时间,结果如图10所示.图10不同流程结构和规模下的时间复杂度对比Page12可以看出,时间复杂度呈指数上升,在同样活动数目的情况下,串行结构流程的时间复杂度最高,纯并行的几乎为常数,而混合结构介于两者之间.这与5.4节算法复杂度分析的结果一致.7结束语考虑到“不确定性”的传播特征,本文采用UTG作为工具刻画不确定性事件、服务运行时状态、决策动作三者之间的关系,进而使用MDP作为决策工具,寻求全局的最优决策.实验除了证实该方法相比于贪心决策的优良性之外,还验证了赔偿参数不同取值下对MDP决策效果的影响.与当前服务不确定性决策的研究相比,本文的方法侧重于运行时的自适应决策而非构建时的模型增强.本文的目的也不是研究重试、重组、替换等某一种特定动作的具体算法,而是将多种策略并列起来,根据不确定事件发生时的动态信息来动态选择最优的一种应对策略,从经济角度考虑不确定性带来的时间和成本方面的损失,作为评判决策动作优劣的标准.下一步的工作包括:(1)将“不确定”从软件层面扩展到业务层面、考虑更多类型的不确定性事件(例如需求变更、需求取消、资源不可用等);(2)使用多方参与的服务协同模型(choreography)而不是简单的BPEL模型刻画服务方案,因为现实中的不确定性事件来源于多方之间的交互环节;(3)扩展目前的5种决策动作,增加更复杂的决策动作,例如“补偿”(compensation)、回退(rollback)等.
