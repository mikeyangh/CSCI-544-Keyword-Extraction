Page1EasiDEF:一种水平化轻量级物联网数据交换协议侯陈达1),2)李栋1)邱杰凡1),2)崔莉1)1)(中国科学院计算技术研究所北京100190)2)(中国科学院大学北京100049)摘要物联网系统中数据交换协议私有化的问题日益突出,异构应用系统之间缺少水平、无缝地交换数据和共享信息的方法.而现有互联网中广泛采用的XML(eXtensibleMarkupLanguage)等数据交换协议存在数据冗余和解析复杂的问题,并不适用于资源受限的物联网前端设备.因此文中提出了一种新型的水平化轻量级物联网数据交换协议EasiDEF.该协议根据环境监测类物联网的应用数据特点,将数据类型分为单次请求数据和周期连续上报数据两种常见形式.针对单次出现的数据请求采用三级压缩机制,包括:(1)一种XML文件的序列化方法.该方法基于XML标准设计,保证了数据交换的通用性和水平化.同时序列化的操作使得在低功耗设备中应用XML成为可能;(2)一种将XML文件的字符串标签转化为占用空间小的数值标签的字典映射机制,其中字典的设计面向典型的物联网应用;(3)一种基于LZW(Lempel-Ziv-Welch)的改进数据压缩算法EasiLZW,该算法基于物联网应用字典压缩数据,保证协议的轻量性.而针对周期连续上报数据类型,对连续数据传输提出了一种增量式压缩算法.在保证协议低开销的前提下,EasiDEF可有效压缩XML文件,降低数据传输量.实验结果显示EasiDEF比传统方法提升了5~10倍的压缩效果,能够在物联网的资源受限环境中支持水平化的数据交换.关键词物联网;水平化;轻量级;数据交换协议;压缩算法;增量传输1引言近年来物联网技术的飞速发展受到了人们的广泛关注.国际电信联盟(ITU)①指出物联网从功能上能够实现“世界上所有的物体都可以通过因特网主动进行信息交换,实现任何时刻、任何地点、任何物体之间的互联、无所不在的网络和无所不在的计算”.由此可见物联网概念的出现打破了原有物理世界与信息世界相分离的传统结构,使得人们不但能够访问和管理互联网中的虚拟资源,还能够与物理世界中的实体资源互动.但是现有的物联网应用大多为专有应用,运行系统相对封闭,不同系统的数据定义格式不统一,导致异构系统之间难以进行水平、自由的数据交换和信息共享,已经成为物联网发展和产业化进程的瓶颈.因此物联网的应用系统中需要一种新型水平通用的数据交换协议.从另一方面考虑,当前互联网已经成为人们获取和共享信息的主要方式,人们的生活和工作已经离不开互联网.因此越来越多的需求希望能将各种各样的智能物体也连入互联网中,以现有的互联网体系去连接物联网应用,从而大大降低上层应用的开发成本,提高物联网系统的水平性和通用性.但是从目前的研究进展看,物联网应用之间的数据通信和数据交换普遍存在协议隔离和格式差异的问题,缺少水平化的数据交换协议和应用层访问协议,不能很好的集成到现有的互联网体系当中.为了解决物联网系统中数据交换协议私有化的问题,可以将XML②(eXtensibleMarkupLanguage)等在互联网中广泛使用的数据交换协议引入到物联网中.但是在这一过程中面临着以下的挑战.首先由于物联网在前端感知网络中通常采用低成本、低功耗的嵌入式设备,计算资源,存储资源和网络带宽都严重受限,对协议和算法的轻量性要求较高.其次由于互联网中采用的数据交换协议除了数据内容本身还包含自描述的控制信息,存在大量信息冗余,增加了网络传输开销.同时XML技术本身很复杂,处理XML的开销很大.综合上述两点XML处理的复杂性和数据冗余对于低功耗、资源受限的物联网前端感知设备负担过重,难以在前端设备上设计和实现.同时需要考虑物联网具有与互联网不同的数据特点.互联网的web请求通常为大量不规律的单次请求,一次请求的内容一般比较复杂,包括各种文本和多媒体信息,数据量大.但是在物联网应用中,感知数据往往具有时空相关性,即具有感知资源相对固定、单次请求的数据量小和连续传输数据相似性大的特点.特别是在环境监测类物联网应用的感知数据中,采用XML这种自描述的数据交换协议会导致控制信息远远多于感知内容数据,存在连续传输过程中控制内容大量冗余的问题.为了解决这些问题,本文提出了一种基于XML的轻量级物联网数据交换协议EasiDEF.该协议根据环境监测类物联网应用的数据特点,将数据类型分为单次请求数据和周期连续上报数据两种类型.针对单次随机出现的请求数据采用三级压缩机制,包括:(1)一种XML文件的序列化方法.该方法基于XML标准设计的数据格式保证了数据交换的通用性,并且序列化的操作使得在低功耗设备中应用XML成为可能;(2)针对现有的物联网典型应用方式,采用能将XML文件的字符串标签转化为数值标签的映射字典机制;通过字典映射将占用空间较大的字符串转化成二进制数值,实现了数据压缩;(3)一种基于LZW(Lempel-Ziv-Welch)的改进数据压缩算法EasiLZW,该算法基于物联网应用字典压缩数据,压缩数据保证协议的轻量级特点.而针对周①②Page3期连续上报数据的类型,提出了一种增量式压缩传输算法.通过比较连续传输过程中传输文件与标准文件的不同,传输增量XML文件,实现XML文件的压缩.在保证协议低开销的前提下,EasiDEF能够大幅压缩XML文件,降低数据传输量,为物联网系统前端感知网络提供轻量级水平化的数据交换协议.同时针对互联网中的一般XML格式数据集、故宫博物院文物监测系统和无锡太湖水污染监测系统的数据集,设计了4种实验场景以验证该数据交换协议的压缩效果和算法开销.本文的贡献主要集中在以下3方面:(1)针对单次请求数据类型采用三级压缩机制,有效提高了XML的压缩率和处理效率,包括:①一种XML文件的序列化方法;②一种字符串标签到二进制数值映射字典机制;③一种基于LZW的改进数据压缩算法EasiLZW.通过这三级压缩机制压缩数据保证协议的轻量级特点.(2)针对周期性连续上报数据类型,提出了一种增量式压缩算法,减少了连续数据传输过程中重复数据的冗余传输.(3)设计了4种实验场景,通过文件压缩率和处理时间开销的对比实验,验证了EasiDEF的协议性能和算法开销.本文第2节简要介绍研究背景和相关工作;第3节给出EasiDEF概述;第4节是协议的详细设计和实现;第5节是性能与效果实验评价;最后第6节给出本文的结论和展望.2研究背景与相关工作目前在数据交换协议方面的工作主要包括互联网通用协议、互联网轻量级协议和物联网轻量级协议3类.首先在互联网中广泛采用的协议有XML、JSON等协议,尤其以XML占主导地位.XML是为了人类可读性和互操作性而设计的一种通用数据交换协议,因此XML在描述数据的过程中采用了大量重复的数据标签,造成了大量数据冗余.一旦这种冗余与应用程序中的元素和属性名结合起来,XML文件中标签成分的大小可能远远超出文件中实际数据成分的大小.这种数据冗余通常会给网络传输带来负担.为了降低数据传输量,在互联网中通常采用的方式是先压缩再传输.在实际应用中,Gzip(GNUzip)是互联网中被广泛采用的数据压缩方式,HTTP协议(HypertextTransferProtocol)即支持Gzip的压缩传输.Gzip是一种开源的文件压缩程序,其核心采用LZ77与哈夫曼编码的组合方法,因而Gzip是对一般字符串做处理的压缩算法,并没有考虑XML的结构化特点,缺少相对应的压缩优化方法.在学术界很多学者同样提出了一些XML压缩方法,以优化XML在应用中的性能.文献[1-2]提出的压缩方法主要思想是将XML文档拆分成属性名、文本数据和文档结构3个不同的部分后分别进行压缩.在压缩每个部分时,还要将数据划分到不同的容器内使得每个容器内的数据具有一定的相关性,然后再根据每个容器内的数据特点进行压缩.Millau[3-4]采用了差异DTD(DocumentTypeDefinition)树来压缩符合DTD定义的XML数据,其主要思想是从DTD树的解析过程中获得语义信息,通过XML结构信息和数据编码形成结构流和内容流来达到压缩的目的.文献[5]用树型结构表示XML文档,通过提取公共子树来压缩XML数据中的结构冗余.文献[6]给出了第一个支持查询处理的XML压缩方法.它用数值来表示元素名和属性名,而数据项则用非自适应的哈夫曼编码来进行压缩.根据某些典型应用仅访问XML文档中的某些特定元素的特点,文献[7]中的方法保持应用需要的元素不变而将其他元素用XSLT(ExtensibleStylesheetLanguageTransformations)转换成CSV(CommaSeparatedValues)的格式,进而达到压缩XML的目的.2013年Lohrey等学者在文献[8]中提出基于有向无环图的XML压缩方法,用无等级的节点标签树来表示XML的编码二叉树,减少了标签冗余,实现了数据压缩.然而上述工作XML压缩方法的不足都是处理相对复杂,需要大量的计算和存储资源,难以应用在资源受限的物联网前端设备.2007年W3C标准组织发布了高效XML交换格式第一版公开草案EXI[9](EfficientXMLInter-change).EXI格式使用由信息和正规语言理论衍生出的一种混合方法,利用相对简单的算法以及少量的数据类型,可靠地产生XML事件流的高效编码.虽然EXI针对XML文件结构做了优化处理,可应用在资源受限设备,但是由于EXI的普适性,没有面向物联网的特点进行方法优化,在数据压缩率方面还有提高的空间.在物联网领域内,目前已有的工作中微软研究院的Priyantha[10]等学者于2008年发表了首篇关于Page4物联网web服务及其系统架构的论文,文章提到了在能量和计算能力受限的情况下基于传感器节点的XML解析方法和压缩算法.UCBerkley大学的Dawson-Haggerty[11]等研究人员在2010年提出了首个基于REST(REpresentationalStateTransfer)风格的物理信息交换协议sMap,该协议使用了编码后的JSON(JavaScriptObjectNotation)数据描述格式进行数据封装,减少了数据传输量.Castellani等人在文献[12]中提出了物联网中基于CoAP和EXI的web服务框架.CoAP(ConstrainedApplica-tionProtocol)协议是国际标准制定组织下CoRE(ConstrainedRESTfulEnvironment)工作组为受限节点制定相关的REST架构风格的应用层协议,以取代HTTP协议在受限设备中运行.文章用CoAP协议传输EXI格式的载荷数据,在资源受限的节点上验证了EXI的可行性.2013年Thoma等人[13]提出了基于REST的传感器网络,该框架采用Atom①和JSON②的编码方式减少数据传输,提高网络性能.同年Groppe[14]等研究人员提出了一种嵌入式XML语言,该工作通过减少XML查询时的多余计算来降低处理XML的开销,缺点是该工作并没有减少XML的数据冗余.上述内容介绍了现有水平化数据交换协议的研究现状,所述水平化网络协议栈如图1所示.在互联网中自下而上采用了TCP(TransmissionControlProtocol)、HTTP和XML的水平网络协议体系.在物联网相关的已有工作中sMap采用了UDP(UserDatagramProtocol)、EBHTTP(EmbeddedBinaryHTTP)和EncodedJSON结合的水平网络协议体系,也有包括UDP、CoAP和EXI结合的水平网络协议体系.本文提出采用EasiDEF与UDP和CoAP构成的新的适用于物联网应用特点的轻量级水平网络协议体系.综上所述的研究背景和相关工作表明,目前在物联网前端感知网络中需要一套高压缩率和低开销的水平化轻量级数据交换协议.3EasiDEF协议概述EasiDEF是一种基于XML的物联网轻量级数据交换协议,解决了物联网不同应用系统数据交换协议私有化的问题,同时采用了一定的压缩策略,降低了数据传输量,优化了资源受限网络的性能.为了能够设计出适合物联网前端感知网络的数据交换协议,首先要分析现有物联网应用系统中前端感知网络通常具的数据特点:(1)在物联网的应用系统中前端感知资源类型相对固定.一旦感知网络被部署,硬件传感器基本不会被修改和更换,所以感知网络中感知资源在一段连续的时间区间内是相对固定的.即使是异主系统,面向同类应用的传感器具有种类、数量、密度等相似性或互补性,如采用通用数据交换协议,则可达到资源共享;(2)物联网系统中单次请求数据量一般比较小.因为物联网应用系统的前端感知网络一般采用低成本的嵌入式节点,计算、存储和通信能力非常有限,尤其在环境监测类的物联网应用中,感知数据通常为温度、湿度等环境信息,以数据内容为主,图片等多媒体内容占据较少的比例,所以单次的数据量通常只在10~500byte范围内;(3)在环境监测等普遍部署的物联网应用中,数据采集往往具有周期性和规律性.应用中用户主动发送请求获取数据的需求较少,数据大多采用用户订阅然后感知节点周期上报的形式,数据的格式和内容在一段时期内基本不变,只有采集的实时数据会变化.对于这类的物联网应用,如果每次都完整传输所有信息,会出现连续数据上报的重复性问题,可以采用增量传输数据的方式进行数据压缩.以故宫博物院文物监测系统[15]和无锡太湖水污染监测系统[16]为例说明以上列出的3个物联网系统前端感知网络的数据特点.首先在故宫博物院文物监测系统和无锡太湖水污染监测系统中包含的感知资源类型和对应的数据量级如表1所示.从表1中可以看出物联网前端感知网络根据实际应用的不同具有相对固定和专有的硬件感知资源.资源单次通信的数据量比较小,通常只有几十到几百字节.①②Page5表1故宫博物院文物监察系统和无锡太湖水污染其次本文统计了在无锡太湖水污染监测系统和故宫博物院文物监测系统中1000次数据传输中包含的单次请求数据与周期连续上报数据的分布比例,如图2所示.从图2中可以看出在物联网的环境监测类系统中数据通信方式以周期上报为主,单次随机请求的需要比较少,占请求总量的20%以下.该统计的结果验证了上述总结的物联网数据特点的第3点,即周期性连续上报的数据请求在总体请求中占多数.在连续数据上报的过程中,相邻两次的数据上报的控制内容基本相同,只有实时感知数据发生变化,因此适合在这类应用中采用增量数据传输的方法来压缩数据,降低数据传输量.根据上述对物联网系统前端感知网络数据特点的总结,本文将应用数据分为单次请求数据和周期连续上报数据两种.EasiDEF处理流程图如图3所示.对于单次请求数据采用三级压缩机制,包括:(1)XML文件的序列化.将格式化的XML文件通过序列化的操作转换为字符串,减少XML标签冗图3EasiDEF的整体处理流程图4EasiDEF设计与实现本节详细介绍EasiDEF协议的设计和实现.4.1节介绍如何序列化XML文件,序列化的优点和解决的问题.4.2节对物联网应用字典的设计进行详细的描述.4.3节提出改进的LZW算法EasiLZW.4.4节提出一种增量化传输的数据压缩算法.余,便于后期处理;(2)一种标签数值映射字典机制.设计针对不同物联网应用的标签字典,对要传输的XML文件进行字典映射,将多字节字符串标签转换成单字节数值;(3)改进的LZW数据压缩算法EasiLZW.对于周期连续上报数据提出增量式数据传输压缩算法,通过比较传输文件与标准文件的不同,传输增量XML文件,达到压缩传输数据,降低传输数据量的目的.总体来说,EasiDEF通过三级压缩机制和增量传输压缩算法实现面向物联网的轻量级数据交换协议.4.1XML序列化XML序列化是将文件转换成字符串的过程,其目的一是压缩文件,减少冗余数据;二是预处理,方便以字符流进行操作.序列化的主要思想是用元素标签(Tag)来表达XML数据,包括XML文件中的元素(Element)、属性(Attribute)、文本(Text).对于在物联网前端感知网络中不太常用的注释(Comment)等内容进行了精简.图4和图5给出了一个简单的XML文件及其对应序列化后的结果.Page6〈?xmlversion="1.0"encoding="UTF-8"?〉〈root〉〈Region〉22:46:27〈/timestamp22:46:27〈/timestamp〉〈/root〉X4rootX6RegionX10RegionNameT4WestzzX4SinkX8SinkNameT5WumenzzX7FromNetT8NetWumenzzX10ToDatabaseT7DbWumenzzX2IPT1110.22.0.234zzX4PortT48080zzX7successT4truezzX3varX3mocT13IntEnviromentzzX3moiT14HouseEnvSensorzzX4codeT2IDzzX5valueT3101zzX9timestampT192012-04-0522:46:27zzX3varX3mocT13IntEnviromentzzX3moiT14HouseEnvSensorzzX4codeT11TemperaturezzX5valueT530.53zzX9timestampT192012-04-0522:46:27zzZ图5所示的EasiDEF内容是一组标签序列,如“X”标签表示XML文件中的元素,“X4root”表示字符长度为4的元素“root”,“X4root”是一个完整意义的标签单元.从上述例子可知所有的XML内容在EasiDEF序列化的过程中都以标签来表示,将元素、属性等内容由一个标签单元来表达.标签单元包括标签本身(Tag)、数据长度(Length)和数据值(Value),即TLV.因为在XML中元素总是以“〈elementName〉”和“〈/elementName〉”开始和结束,本身就存在信息的冗余,标签化的表示方式消除了这种冗余,在通常情况下有效的减少了数据的长度;重复出现的文本只显示一次,显著地减少了冗余信息,同时压缩了XML的数据长度.并且传统方式在解析XML时,必须逐个字符的扫描,寻找XML元素名称、属性名称、字符文本在何处结束,而XML内容的标签化,免除了这一繁琐的工作.在EasiDEF中,文本数据的长度信息总是出现在文本之前,这样我们可以预先知道将要读取处理的数据长度,需要分配的空间大小,可以整体拷贝,而不像XML那样只有读到结束符时才能确定文本数据的大小.所以该序列化模块具有一定的预判功能,可以提前处理数据所需的系统资源.EasiDEF完整的结构布局如图6所示,由头部(EasiDEFHeader)和主体(EasiDEFBody)构成.EasiDEF头部包括标识EasiDEF的区别标志位(DistinguishingFlag)、头部长度(Length)、版本号(Version),EasiDEF主体则是有一串标签单元构成的,标签“Z”是整个EasiDEF结束的标志.在EasiDEF头部,区分标志位占2个字节;头部长度是指后续的版本和编码控制信息所占的字节数,用一个字节表示,目前取值为5;EasiDEF版本取值V1.0,版本号为数字1,占一个字节.对于EasiDEF的主体是有多个表达XML组成部分的标签单元构成的,最后以“Z”结束.如图5所示EasiDEF中的数字使用ASCII码字符表示,但在实际的EasiDEF中是二进制的数值,并非ASCII码.EasiDEF的标签化方式使得处理器不需要扫描每一个字符,识别XML结构的结束符;使用数值代替文本不仅降低信息冗余、压缩数据长度,还使得数据的比较操作更快、更容易;长度前置使得块拷贝成为可能,也避免了处理器动态的分配变长内存.因此EasiDEF的解析轻量化,解析时需要的系统资源显著减少,解析的速度得到很大提高.4.2标签数值映射字典机制在这一节本文提出了EasiDEF中的标签数值映射字典机制.在上述第2节EasiDEF概述中总结了物联网系统中前端感知网络的数据特点,即物联网不同应用具有不同的感知资源类型.同类物联网应用拥有大量相似的感知资源,比如在环境监测类的应用中,基本都围绕环境信息:温度、湿度和光照等参数.因此在XML文件描述和组织感知数据的时候,有大量相关元素标签是重复和冗余的.为了解决重复标签问题,充分利用物联网前端感知网络的数据特点,本文提出要在感知节点的本地建立标签数值映射字典.根据对历史数据进行统计和分析,得到出现频率较高的关键词,建立应用字典,将多字节字符串转换成单字节的数值,在XMLPage7序列化的基础上进一步压缩了XML文件.本节建立的物联网应用字典作为下一节4.3中EasiLZW的初始化输入字典.图7是以环境监测为背景的物联网应用字典示例.4.3改进的LZW压缩算法EasiLZW1984年Welch在文献[17]中提出了LZW算法.LZW算法的压缩原理是通过分析输入字符流,在压缩的时候自适应地生成字典,记录此前所有出现过的不重复的字符串.通过比较当前输入字符流与字典中的字符串来确定输出值,并更新字典,其压缩流程中没有传输开销,计算相对简单.发送方和接受方都包含初始化字典,基于已经存在的字典词条建立新的字典词条.一旦接收到数据,接收方就可以重新建立字典.其最大的特点是逻辑简单,易于实现,速度快.但是经典LZW算法存在以下2个不足:(1)经典LZW算法针对的是无结构的字符流,没有考虑结构化数据的压缩方法.结构化数据一般是自描述的,比如XML,数据的结构和内容混在一起.结构化的数据有很多信息是已知的,但是LZW无法利用;(2)用LZW算法压缩时自适应形成字典的过程需要积累足够的长度,根据本文第2节中所总结的物联网数据特点可知,物联网系统中存在的信息大多数都是短而小的,容易造成在压缩时字典无法积累相当的结构化信息,也就不能有效地压缩文件中的冗余信息.为了克服上述的不足,本文提出了EasiLZW算法.其主要思想是编码和解码不再是以单个字符而是以字典中的标准子串为单位进行.而标准子串是针对物联网应用从XML文件中提取出的结构化标签的字符串,这些字符串组成了4.2节中的物联网应用字典.因此将4.2节中生成的典型物联网专有字典作为EasiLZW的初始化字典输入算法.EasiLZW的编码和解码过程如算法1和算法2所示.算法1.EasiLZW编码算法.输入:待压缩的字符串s输出:字符串s压缩后的码串CODE1.STRING=NULL2.WHILEtherearestillinputsubstringDO3.SubSTRING=getinputsubstring4.IFSTRING+SubSTRINGisinthestringtable5.STRING=STRING+SubSTRING6.ELSE7.outputtheCODEforSTRING8.addSTRING+SubSTRINGtothestringtable9.STRING=SubSTRING10.ENDofIF11.ENDofWHILE12.OutputtheCODEfors算法2.EasiLZW译码算法.输入:待解压缩的码串CODE输出:完成解压缩的字符串s1.CODE=getfirstinputcode2.SubSTRING=getthetranslationfromCODE3.WHILEtherearestillinputcodesDO4.CODE_P=CODE5.SubSTRING_P=getthetranslationfromCODE_P6.CODE=getnextinputcode7.IFSubSTRINGisinthestringtablethen8.outputSubSTRING9.M=getthefirstunitstringinSubSTRING10.addM+SubSTRING_Ptothestringtable11.ELSE12.M=getthefirstunitstringinSUBSTRING_P13.outputM+SubSTRING_P14.addM+SubSTRING_Ptothestringtable15.ENDofIF16.ENDofWHILE17.Outputuncompresseds对于标准子串的匹配问题我们采用滑动窗口的机制来优化标准子串的匹配过程,如图8所示.该滑动窗口包含两个指针P1和P2,P1是字符流输入位置的当前指针,P2是搜索标准子串时的超前指针.P1和P2要满足以下3个条件:(1)初始时P2=P1;(2)匹配的范围在P2到P1之间,滑动窗口的大小W为标准子串的最大长度和剩余字符流长度的较小值;(3)结束时P1=P2+1;当找到匹配的标准子串时(P2=P1),窗口向前滑动P2-P1个字节.对于EasiLZW的算法效率分析如下.传统LZW算法大量依赖快速的字典查找,若直接检索字典,代Page8码执行速度慢,其时间复杂度为O(n2).因此需要对字典检索进行优化,引入Hash表能有效提高字符串表的检索效率及整体执行效率.Hash表的容量与字典的容量均为表中不定长元素的代码数组,用于存放Hash值相同的字符串代码.一般Hash函数产生的重复值较少,这样检索字符串所需比较的次数将大幅减少,时间复杂度几乎接近于O(n),从而有效提高了代码的执行效率.改进的EasiLZW算法采用物联网应用字典,以标准子串为单位进行字典匹配,删除了匹配率小的词条,并根据字典中每个码字的使用计数值大小进行排序.一方面减少了算法的空间占用,释放了大量无效内存;另一方面.对有序Hash表可以采取二分查找,其时间复杂度降为O(logn).由此可见,改进算法降低了经典算法的复杂度.4.4增量式数据压缩算法上述4.1~4.3节是针对单次请求的数据类型所提出的压缩处理方法,本节针对周期连续上报数据,提出EasiDEF增量式的压缩算法.由于在物联网系统中存在较多的周期性数据传输,通常在一段时期内传输的数据类型和结构相对固定,只有实时感知的数据会发生变化.因此如果每次都完整的传输数据包,会造成大量的带宽浪费和能量消耗.为此本文基于XML提出一种增量式的数据压缩算法.增量压缩算法的主要思想是首先要在物联网前端感知节点本地存储一个标准数据文件.该文件可以与程序一起写入感知节点,固化为节点文件.将每次传输的数据文件作为目标文件,然后计算和已经存储在感知终端的标准文件之间的增量变化文件.当两文件间的相似性超过了预先设定的阈值时,就进行增量压缩,计算出一个增量变化文件,最后只需把这个增量变化文件和参考文件存储在感知节点中即可.增量式数据压缩算法的输入为一个待传输文件(记为T)和一个参考文件(记为R),输出为一个增量更新文件(记为updateFile).通过比较待传输文件T和参考文件R,得到增量比较文件(记为VaryFile(T,R)),该增量比较文件记录了需要周期性更新的数据在原文件中的位置和结构,因此算法可以对照文件R的内容对文件T进行压缩,将新产生的传感数据sensorData按照增量比较文件中记录的数据位置更新,并输出更新后的文件updateFile.其压缩过程如算法3所示.算法3.增量式传输压缩算法.输入:待压缩文件newFile,参考文件referenceFile输出:增量变化文件updateFile1.writeFile(referenceFile);//初始化写入参考文件2.WHILEtherearestillnewsensingdata3.IFreferenceFileisupdated//参考文件已更新4.VaryFile(T,R)=Compare(newFile,5.updateFile=Generate(VaryFile(T,R),6.Send(increaseFile);7.ELSE8.updateFile=Generate(VaryFile(T,R),9.Send(increaseFile);10.ENDofIF11.ENDofWHILE12.EXIT//没有新数据产生则退出5实验结果与分析本节通过实验分析EasiDEF的压缩率和处理速度,以验证该协议的性能表现.因为EasiDEF协议是基于XML标准设计和实现的,而XML的自描述特性可以实现不同系统之间的数据交换,保证了水平性,所以本节没有专门设计实验场景验证协议的水平性,而是把实验的重点放在EasiDEF的轻量性验证上.实验基于ARM的嵌入式S3C6410的平台设计和实现,该平台CPU为ARM1176JZF-S,主频664MHz,RAM256M.数据内容基于CoAP[18]协议传输.实验对比的对象包括XML、GZIP、EXI和本文的EasiDEF.XML为原始文件,GZIP、EXI和EasiDEF都是以XML为输入文件经过压缩后的输出文件.GZIP采用了标准实现方案①.EXI采用了EfficientXML规范V1.0版本②C语言版本的实现.在实验的过程中一共设计了4类典型应用场景:场景1.互联网中传统的XML文件实验.该实验采用了互联网已有的XML文件测试集③,包括以下4类:(1)TPC-D.基于交易基准测试集人工生成的①②③Page9关系数据库;信息;注释剧本;(2)Shakespeare.结构化信息的莎士比亚戏剧(3)SWISS-PROT.基因序列和蛋白质数据的(4)Treebank.华尔街日报文章的语言注解.场景2.故宫博物院文物监测系统单次请求实验.场景3.无锡太湖水污染监测系统单次请求实验.场景4.故宫博物院文物监测系统数据周期连续上报实验.实验中采用了压缩率和处理速度两个评价指标.在本文中压缩率定义为:压缩率=(压缩后文档大小/压缩前原始文档大小)%.处理速度定义为事务数/秒TransactionsPerSecond(TPS):处理速度=事务数量/处理事务的总时间.压缩率衡量算法的压缩效果,压缩率越小代表压缩效果越好;处理速度衡量算法的时间开销,处理速度越大代表算法性能越好.下文针对4个实验场景作逐一的实验结果分析.5.1互联网普通应用场景本文的实验场景1对互联网系统中传统的XML文件进行处理和压缩,在XML原文件,GZIP、EXI和EasiDEF中对比压缩率和处理速度.场景1压缩率的实验的结果如图9所示.从图中可知GZIP、EXI和EasiDEF对XML原文件都有不同程度的压缩.在这一实验场景中,本文的EasiDEF压缩效果最好,压缩范围在20.01%~54.93%,EXI压缩效果介于EasiDEF和GZIP之间,压缩范围在36.46%~62.23%,GZIP的压缩效果最差,压缩范围在35.41%~69.74%.综合看EXI与EasiDEF的压缩效果接近,都比GZIP有30%的效果提升.图9互联网普通应用单次请求场景:XML、GZIP、从场景1压缩率的实验结果可知由于GZIP是对字符串的压缩算法,没有针对XML的结构化特点进行优化,所以GZIP的压缩效果最差.EXI则是针对一般XML的压缩算法,对结构化的内容做了处理和压缩,所以压缩效果比GZIP有所提高.EasiDEF针对XML文件进行了3步压缩处理,减少了数据冗余,压缩效果也要优于GZIP;同时说明了EasiDEF的水平性,可以适用于一般的XML文件.但是由于EasiDEF面向物联网应用的数据特点进行了优化,而场景1是互联网中的一般XML文件,虽然EasiDEF的压缩效果比EXI略优,在此场景下没有充分体现EasiDEF在物联网系统中的压缩优势.图9是对场景1压缩率的讨论.提升压缩效果可以降低数据传输量,节约资源受限节点的通信能量.同时必须要考虑压缩算法的效率,本文采用处理速度(TPS)来衡量算法的时间开销.图10对场景1中的处理速度进行了讨论.在实验的时候本文以GZIP为标准,对EXI和EasiDEF做归一化,例如当EasiDEF的处理速度为200%时,表示处理速度是GZIP的2倍,即压缩相同文件时EasiDEF的时间开销是GZIP的一半.从图10可知在多数情况下,EXI和EasiDEF的处理速度要优于GZIP,平均提高250%.而EXI的处理速度又比本文提出的EasiDEF平均约有10%的提升.图10互联网普通应用单次请求场景:XML、GZIP、场景1处理速度的实验结果反映了GZIP、EXI和EasiDEF压缩算法的不同.GZIP是基于LZ77[19]与哈弗曼编码的组合体,在压缩数据时通常要付出一定的代价创建和维护字典,同时需要遍历二叉树,因此处理速度最低.EXI与EasiDEF是轻量级协议,在压缩处理的过程中采用了相对简单的算法,因Page10此处理速度要优于GZIP.因为本文的EasiDEF使用了改进的LZW算法,需要对物联网应用字典进行遍历,代价要大于EXI的压缩算法,所以处理速度低于EXI.5.2单次请求的实验场景4.1节中分析了场景1的实验结果,验证了EasiDEF在互联网场景下的压缩率高和处理速度大的特点.因为EasiDEF是面向物联网的轻量级数据交换协议,所以本文将场景2~4设计在物联网的系统应用中.具体的场景是基于故宫博物院文物监测系统和无锡太湖水污染监测系统两个实际系统而设计的.原始XML文件封装的感知数据也都来源于这两个实际系统运行中的实时数据.为了模拟物联网应用系统在实际运行中的情况,本文设计了5种网络传输操作:发起连接(connect),激活连接(activate),传输数据(data),关闭连接(deactivate)和断开连接(disconnect).这5种操作组成了物联网应用系统数据请求和响应的一般过程.实验设计和实现了这5中操作的XML文件,通过GZIP、EXI和EasiDEF进行对比实验.对于单次请求的实验结果如图11~图14所示,在实验场景2和3下分别测试了GZIP、EXI和EasiDEF基于故宫博物院文物监测系统和无锡太湖水污染监测系统的感知数据压缩率和处理速度.从图11和图13可知EasiDEF的压缩效果要明显优于EXI和GZIP.故宫文物监测系统中EasiDEF的压缩率在8.17%~41.14%,EXI在18.62%~47.51%,GZIP在16.01%~107.1%.这里特别注意到GZIP会出现放大XML原文件的情况.在5个请求操作中,connect,activate,deactivate和disconnect属于控制操作,数据的冗余度比较小.因图11故宫博物院文物监测系统中单次请求场景:XML、图12故宫博物院文物监测系统中单次请求场景:XML、图13无锡太湖水污染系统中单次请求场景:XML、图14无锡太湖水污染系统中单次请求场景:XML、GZIP、此从图11和图13中可知,前4种操作对应的XML文件,在压缩率方面EasiDEF虽然优于EXI,但是相对比较接近,没有明显的优势.对于data操作,因Page11为包含大量的感知数据,描述同类感知数据的标签相同,会产生较多的重复标签元素,造成冗余.因此此时EasiDEF的压缩效果要远好于EXI和GZIP,平均约有2~3倍压缩效果的提升.单次请求数据处理速度的结果如图12和图14所示.从图中可知EXI和EasiDEF比,GZIP的处理速度有2~3倍的提升,EXI与EasiDEF相比,EasiDEF的处理速度要低于EXI10%~20%,原因已经在4.1节中进行了分析.5.3周期上报数据实验场景对于周期上报数据的实验结果如图15所示.实验的场景基于无锡太湖水污染监测系统.从图中可知EasiDEF的压缩效果要远远好于EXI和GZIP,EasiDEF的压缩率在2%左右,EXI在10%~20%,GZIP在20%左右.这是因为在周期上报的数据传输中,EasiDEF采用了增量传输的压缩算法,实际传输的数据内容是文件之间的差异,即实时变化的感知数据.而EXI与GZIP依然是全文件传输,文件内容大量冗余.因此EasiDEF比EXI和GZIP有5~10倍的压缩效果提升.图15故宫博物院文物监测系统中周期上报数据的XML、6总结与展望本文针对现有物联网系统应用中数据交换协议垂直私有化的问题,提出了一种新型的水平化轻量级物联网数据交换协议EasiDEF.该协议对于单次请求数据和周期连续上报数据两种类型采取了不同的处理方式.针对单次出现的数据请求采用三级压缩机制,有效提高了XML的压缩率和处理效率.而针对周期性连续数据上报应用模式,对连续数据传输使用增量式文件压缩算法.在保证协议低开销的前提下,EasiDEF能够大幅压缩XML文件,降低了数据传输量,为物联网系统前端感知网络提供了水平化轻量级的数据交换协议.因为本文基于CoAP协议传输EasiDEF封装好的数据,而CoAP协议本身存在因设备休眠导致的节点响应率低等问题.所以在未来的工作中,我们将设计一种新型的应用层传输协议,然后将EasiDEF与该协议综合考虑如何提高受限网络的性能表现.致谢审稿专家和编辑为本文提出了宝贵的修改意见和建议,作者在此表示衷心的感谢!
