Page1扩展因子预编码的两阶段CORDIC旋转算法2S-PCS牟胜梅1)杨晓东2)1)(海军工程大学计算机工程系武汉430033)2)(国防科技大学计算机学院长沙410073)摘要CORDIC算法常用于高效地用硬件实现向量旋转操作,如何减少迭代次数并保持扩展因子计算与补偿的简单性是算法的难点.文中提出一种表驱动的2S-PCS算法,其流水线较短且扩展因子可预先计算并优化编码.算法首先将[-π,π]内的旋转角映射到[0,π/4]内,并产生初值调整和旋转方向控制信号.之后的旋转过程分为两阶段,步1进行扩展因子可变的大角度旋转,使剩余旋转角进入步2的收敛域.步1的迭代系数和扩展因子均由映射后旋转角的高字段作为地址查表获得.步2扩展因子恒为1,迭代系数直接由旋转角的二进制编码决定.整个过程不需z通道和扩展因子计算通道,节省了面积开销.2S-PCS利用角度分解算法生成步1的迭代系数,约束非零系数的位置,并对扩展因子进行基4-Booth编码,同时合并相邻的计算量小的迭代,以减少流水线级数.2S-PCS算法利用CSA实现三数累加,同时忽略超出精度表示范围的表达式,以减少延迟、降低复杂性.短流水线还可减少计算通路的圆整(rounding)误差,提高精度.2S-PCS算法克服了全字段查表可扩展性差的问题,入口数随数据精度的增加而缓慢增长,可扩展性好.当采用28位数据通路时,与常规CORDIC算法相比,2S-PCS算法的流水线级数减少约38%,面积减少约27.9%,精度提高3位左右,具有明显的性能优势.关键词向量旋转;CORDIC算法;查找表;免扩展;角度重编码1引言向量旋转是数字信号处理和科学计算等领域的常用操作,CORDIC(COordinateRotationalDIgitalComputer)算法[1]因计算简单、结构规整而被用于硬件实现向量旋转.向量旋转可分为两类,一类是旋转角取值随机性强、选取范围较广且不可预知的情况,本文称其为I类应用;另一类是旋转角数目有限且可预知的旋转操作,称为II类应用.II类应用算法优化空间较大,可利用搜索算法[2-5]预先计算迭代系数,求得扩展因子并对其进行优化编码,以较少的迭代次数达到精度要求.但对于I类应用,较少的迭代次数与简单的扩展因子计算和补偿操作相矛盾,算法较难优化.常规CORDIC算法的旋转因子只与精度n有关,易计算与补偿,但迭代次数较多,计算延迟较大.为减少迭代次数,一些优化策略被采用,如合并两次基本旋转[6],利用冗余算术、采用CSA(Carry-SaveAdder)减少加法延迟[7-8];允许迭代系数为0,旁路不必要的迭代;采用高基CORDIC算法[7]等.但这些算法多以增加扩展因子的计算复杂性为代价.例如:允许迭代系数取0,使得扩展因子不固定,必须伴随旋转操作更新扩展因子,增加了计算开销.目前面向I类应用的改进型向量旋转CORDIC算法大多需动态计算扩展因子,MVSF算法[9]虽支持固定旋转因子(±1或±1/槡2),但仅适用于中低精度(位宽n17).随着n的增加,迭代次数呈指数规律剧增.文献[13]采用分段符号预测加校正的方式提高了系统的并行性,但计算模式不规整.本文提出的2S-PCS算法面向I类应用,兼顾了迭代次数与扩展因子的计算复杂性.旋转过程分为两个阶段,通过步1的有限几次大角度旋转,使剩余旋转角进入步2的收敛域.步1利用旋转角的高位进行查表,获得迭代系数(旋转方向)和扩展因子.其迭代表达式与常规CORDIC算法相同,但迭代系数可取{0,-1,1},以旁路不必要的旋转.步2采用扩展因子恒为1的迭代算法,且直接将旋转角的二进制编码作为迭代系数.整个过程不需扩展因子与迭代系数计算通路.扩展因子采用基4-Booth编码,每两位组成的位片至多含一个非零位,以减少扩展因子补偿操作的流水线级数.这些方法有效地减少了流水线级数、计算延迟和电路的面积开销.本文第2节介绍常规CORDIC算法;第3节介绍SFCORDIC算法与Step2的实现;第4节阐述Step1的实现思路,包括旋转角区间压缩、角度分解以及查找表的生成;第5节描述算法实现电路的系统结构;第6节对算法性能进行模拟与分析;最后一节总结全文.2常规CORDIC算法CORDIC是一种通用迭代算法,可在线性、圆坐标和双曲坐标模式下进行定向与旋转操作,用于各类初等函数求值.其中向量旋转操作应用最为广泛.CORDIC算法将旋转角分解为若干基本旋转角α(i),每次旋转仅由移位和加法操作完成.设向量犈(i)(x(i),y(i))逆时针旋转角度α(i)得到向量犈(i+1)(x(i+1),y(i+1)),则两向量的端点坐标间存在如下对应关系x(i+1)烄y(i+1烆Page3用变量z记录向量当前位置到目标位置的转角,z(i+1)=z(i)-α(i)(逆时针旋转为正),z(0)表示初始向量到目标位置的转角.经过若干次迭代,当z(i+1)→0时,向量便旋转到目标位置.多数CORDIC算法在迭代过程中忽略cosα(i)因子,令tanα(i)=di2-i(di∈{-1,1}),利用式(1)简化迭代,故迭代结束时需对终值x(n)y(n())T进行校正,xfy()fT=Kx(n)y(n())T.扩展因子K=∏icosα(i)=1/∏i由于扩展因子只取决于迭代次数n(数据表示精度),因此不需在旋转过程中临时计算.常规CORDIC算法的收敛域约为[-99.88°,99.88°].烄x(i+1)y(i+1烆z(i+1)=z(i)-α(i)=z(i)-ditan-12-i,di=sign(z(i))=1,z(i)03SF算法(Scaling-freeCORDIC)[10]与常规CORDIC算法不同,SF算法取α(i)=2-i,直接将cosα(i)和sinα(i)表示为易于迭代的形式.因此,每次迭代过程与真正的旋转操作等价,向量长度不变,不需进行扩展因子补偿.假设变量x,y均用m位补码表示,角度z含n位小数,则受操作数表示精度限制,当α(i)-sinα(i)<2-n时,sinα(i)≈α(i)=2-i,sin(α(i)/2)≈α(i)/2=2-(i+1).故利用麦克劳林(Maclaurin)公式[11]将sinx展成级数,利用误差项表达式可求得满足α(i)-sinα(i)<2-n的i值下界(非下确界):(n-log62)/3.实际应用中可验证是否可取(n-log62)/3.为简化描述,记i的最小值为t.故算法迭代范围为tin-1.图1显示了n与t的对应关系.本文步2采用单向旋转,di的符号由步1的余角r的符号位sr与控制信号s1(取决于旋转角所在区间,详见第4节)共同决定,初始旋转角取z(0)=|r|,其二进制编码决定相应的|di|,z通路可省.算法迭代公式表示如下烎)=1-di2-(2i+1)-di·2-ix(i+1)烄烌y(i+1烆z(i+1)=z(i)-di·2-i,di∈{0,S},S=1,s1sr=0当2i+1m,即i(m-1)/2时,2-(2i+1)为机器0,上式可简化为与常规CORDIC算法相同的迭代表达式:烄烆SF算法的收敛域较小,仅为[-f(n),f(n)],f(n)=∑n-1整至SF算法收敛域内.MVSF算法[9]通过重复执行多次i=t的SF迭代实现该过程,但随n的增加,迭代次数呈指数增加.2S-PCS算法则在步1借助查找表实现扩展因子可变的旋转操作,迅速将旋转角调整至SF算法收敛域内.4迭代系数与扩展因子预编码4.1旋转角区间压缩(rangereduction)向量旋转算法一般需处理周期为2π的旋转角.若使用常规CORDIC算法,需增加两次i=0(π/4)的旋转,才能将其收敛域扩展至[-π,π].2S-PCS算法为减少第一阶段的查找表入口数,首先通过区间压缩将初始旋转角θ∈[-π,π]映射到[0,π/4)内.图2将旋转角θ∈[-π,π]划分为A0,π[]()4、4,π[]()2、CπBπ-3π])4、F-3π4,[]()08个区间(临界角可属于两区间任H-πPage4一),利用映射函数f将θ映射至∈[0,π/4].记初始向量为(x(0),y(0)),旋转角θ位于区间i(i∈{A,B,C,D,E,F,G,H})时的目标向量为(xi,yi),则xA烌烄=cos-siny烎A烆=cos(-)-sin(-)xH烌烄y烆烎H=cossinxB烄烌=y烎B烆=sin-cosxC烌烄=y烎C烆=-sin-cos=cos(π-)-sin(π-)xD烌烄y烎D烆=-cos-sin=cos(-π+)-sin(-π+)xE烄烌y烆烎E=-cossinxF烌烄=y烎F烆=-sincosxG烌烄=y烎G烆=sincos上述各式表明,旋转角θ位于区间A、C、E、G时,实际旋转角取,位于区间B、D、F、H时,实际旋转角取-,x,y的初始值作相应的交换与符号变换.因此,要计算旋转θ后的目标向量,需先判断θ所在区间,产生控制信号s1s2s3s4调整x,y的初值,并计算映射后的值.s1=1则旋转角取-,即查表所得迭代系数取相反数;s2=1则x取相反数,s3=1则y取相反数,s4=1则交换x,y值.θ所在区间与控制信号的对应关系如表1所示.s2s3s4既可用于调整x,y的初始值,也可待步1与步2全部结束且进行扩展因子补偿后再调整x,y的终值,二者等价,但将s2s3s4的控制作用前移,可省掉寄存s2s3s4信号的开销.区间s1s2s3s4A0000B1011C0011D1110E0110F1101G0101H1000初始旋转角位于[-π,π]时,区间压缩过程需3次减法操作(减数为常数)和若干次符号判断,比初始旋转角位于[0,2π]时少用一次减法操作.区间压缩模块的结构如图3所示.Page54.2角度分解算法CHAR旋转角映射到∈[0,π/4]后,需通过若干次迭代将调整至SF算法的收敛域内.2S-PCS算法预先通过角度分解求得步1的迭代系数及剩余角,保存在查找表中.角度分解属搜索带约束的最优组合问题,贪婪算法[2]可获得局部最优组合,求得的系数序列{di}满足∑n-1流水实现时不能有效地减少流水线级数.本文提出一种带约束的高位角度分解算法CHAR(Con-strainedHigh-bitsAngleRecodingAlgorithm),将迭代系数两两分组,每组至多含一个非零值,流水实现时每级处理两个系数,至多进行一次迭代.问题描述如下:给定用t位无符号定点表示的旋转角H∈[0,π/4)和无穷精度的基本旋转角{α(i)=atan2-i,i=0,…,t-1},tn,寻找迭代系数序列{di,i=0,…,t-1},di∈{0,±1},使得:(1)H=∑t-1置顺序两两分组,每组至多含一个非零值(若t为奇数,则最后一个系数单独成组);(3)|ε|最小.现给出一满足上述条件(1)、(2)的迭代系数构造算法,但求得的迭代系数未必最优,即|ε|未必最小.t较小时可通过穷举搜索确定最优解,t较大时利用CHAR算法求解.CHAR算法.初始值:(0)=H,{di=0,i=0,…,t-1};For(k=0;ktIf|(k)|<α(t)break;|(k+1)2|=||(k)|-α(2k)|;|(k+1)1|=||(k)|-α(2k+1)|;|(k+1)|=min(|(k+1)2|,|(k+1)1|,|(k)|);If|(k+1)|=|(k+1)2|{Elseif|(k+1)|=|(k+1)1|{else(k+1)=(k);If(Odd(t)&&(|(k)|α(t)))Ift-1()2-α(t-1)<t-1()2{A2i+1A2iA2i-1A2i+1A2i00000001010100101110100-101010-11100-111100m=n对于n位无符号表示的旋转角∈[0,π/4],其高t位便是H,记L=-H,则L<2-t.又因CHAR算法满足|ε|<α(t)<2-t,故|ε+L||ε|+|L|<2-(t-1),即|εr|=H-∑t-12-(t-1),已进入SF算法的收敛域.由于搜索只需针对t位表示的H进行,每个角度需3t次穷举搜索,故高t位全局最优搜索算法的总开销为(2t×π/4+1)×3t,而n位全局最优搜索算法的总开销为(2n×π/4+1)×3t,前者仅为后者的2-(n-t).利用搜索得到的系数组合可计算扩展因子K=1∏t-1(1+d2i2-2i)1/2,并对其进行基4-Booth编码,i=0转化为SD(SignedDigit)格式,每2位组成的位片至多只含一个非零值.表2列出了编码前后位片值的对应关系.4.3查找表步1的查找表包含π为T),以映射后旋转角的高t位H作为查表地址,每个表项保存t个SD编码的迭代系数、m位SD编码的扩展因子(由基4-Booth编码转化而得)和n-t+1位补码表示的ε=H-∑t-1数需用两位表示,可用两个位串组合表示迭代系数和扩展因子,每次迭代时提取两位串中的相应位进Page6行译码即可.因此查找表的总存储开销为M=T(2m+n+t+1)位.步1的剩余旋转角r=L+ε.表3列举了数据表示精度与存储量开销的对应关系.5系统结构与流水线划分2S-PCS算法实现电路的流水线级数取决于n以及由n决定的t.算法的硬件实现电路大致分为区间压缩、查表、步1、步2和扩展因子补偿5个模块,步2又根据i的取值细分为两个流水组.整条流水线被划分为6个流水组,每组内各级流水线结构相同.模块1:区间压缩,产生、s1~s4,含1级流水线;模块2:用H查表获取{di}、ε和K,计算r,并模块3(步1):用系数{di}控制旋转,每级处理2模块4-1(步2-phase1):i<(m-1)/2,用r控对x、y初值进行变换,含1级流水线;数(至多1个非零),含t/2级流水线;制旋转,含m-3模块4-2(步2-phase2):i(m-1)/2,合并相邻的两次迭代,用r控制旋转,含(n+1-(m-1)/2)/2级流水线;烌烎1烌烄di·2-i烎1烆=1-di·di+1·2-(2i+1)-di·2-i-di+1·2-(i+1)di·2-i+di+1·2-(i+1)1-di·di+1·2-(2i+1当i(m-1)/2时,2-(2i+1)=0,故上式可简化为x(i+2)烌烄烎)=y(i+2烆1-(2di+di+1)2-(i+1)烄(2di+di+1)2-(i+1)烆x、y通路各对应3个加数,可利用一级CSA和一级全加器实现,比常规CORDIC的两级全加延迟减小了近一半.扩展因子补偿操作对应的流水线每级处理4位,至多含2个非零位.这样可保证整条流水线每级至多累加3个操作数.为降低复杂性,模块3(步1)每级仅处理2个迭代系数,而未将相邻的两次旋转合并.若使其每级处理4个迭代系数,则控制复杂,会使步1成为瓶颈.模块5:扩展因子补偿,含m/4级流水线.扩展因子补偿操作既可针对迭代初值,也可针对迭代终值,前者寄存r的开销较大,后者寄存{di}与K的开销较大,二者性能相当,本文将扩展因子补偿操作置于最后.2S-PCS算法的实现流程如图4所示.步2-phase2每级流水线处理2个迭代系数,合并相邻的两次迭代,并利用CSA优化累加操作.合并后迭代表达式如下x(i+1)y(i+1())6性能分析与误差模拟2S-PCS算法步1通过查表获取迭代系数,步2则直接将旋转角的二进制编码作为迭代系数,故整个过程不需要z通道.对于I类应用,目前可省略z通道的算法只有MVSF算法,但其迭代次数随数据表示精度的增加呈指数增加.当落在SF算法收敛域外时,MVSF算法约需增加·2t角为2-t的迭代.以=π/8为例,当n=18时,·2t=25;当n=21时,·2t·2t=402.而2S-PCS算法步1阶段的迭代次数仅为t/2,可扩展性好.另外2S-PCS算法通过约束步1非零系数的位置、对扩展因子进行基4-Booth编码、合并部分相邻的运算级等措施减少流水线级数.以m=n=28为Page7例,常规CORDIC算法需2+28+14=44级流水线(包含为扩展收敛域而增加的2次π/4旋转,并利用基4-Booth编码将扩展因子补偿操作转化为14级加法流水线),每级流水线延迟约为1个28位加法器延迟.而2S-PCS算法仅需2+t/2+m-3t+1+(n+1-(m-1)/2)/2+m/4=27级流水线.整条流水线每级至多累加3个操作数,CSA的使用使每级流水线延迟仅略大于常规CORDIC算法,约为1位全加器和1个m位加法器延迟之和,再加上简单的判断和选择逻辑的延迟.x、y通路利用固定连线+简单的选择逻辑实现移位功能,充分利用了零迭代系数,又不需复杂的桶式移位器(BarrelShift).这些方法使得2S-PCS算法相对于其他向量旋转算法具有明显的面积优势,若用加法器来衡量,则2S-PCS算法所需加法器数目为:3个n+3位常数加法器,1个n-t+1位加法器,S1个m位加法器和S2个CSA(1位全加器).其中S1=2×t/2+2×m-32×(n+1-(m-1)/2)/2+2×m/4,S2=m×m-3(n+1-(m-1)/2)/2+m/4).当m=n=28时,总的加法器数目约为54个28位加法器和588个1位加法器(约合21个28位加法器),合75个28位加法器.而常规CORDIC算法的旋转过程需(2+n)×3=90(含为扩展收敛域而增加的2次π/4旋转)个m位加法器,扩展因子补偿过程需2个m位乘法器,若用基4-Booth乘法器,需m/2个m位加法器,整个常规CORDIC算法约需90+14=104个28位加法器.故2S-PCS算法可节省约27.9%的面积开销.基于XilinxVirtex系列FPGA以全流水方式分别实现了传统CORDIC旋转算法和2S-PCS算法,综合后发现:利用IP核实现CORDIC需2160个slice,而2S-PCS算法仅需1611个slice,二者均用加法代替乘法实现扩展因子图6m=n=28(26位小数)时x通路的误差补偿.由理论分析可知,2S-PCS算法的面积优势主要得益于z通路的省略和流水线级数的压缩.2S-PCS算法的误差主要分为角度误差和x、y通路误差.步1过程的ε因超出精度表示范围而产生圆整误差r1,H相同的角对应的r1相同,步2过程不产生剩余角误差.区间压缩过程会产生圆整误差r0,n=28(区间压缩前:1位符号+2位整数+28位小数,区间压缩后:28位无符号小数)时的剩余角误差分布如图5所示,纵坐标B=-log2(|rr|),rr=r0+r1.可见,区间压缩会影响剩余角,但不总是副作用.当输入角θ∈(-π/4,π/4)时,r0=0;|θ|∈(π/4,π/2)时,r0与r1同号概率较大,误差增大,而|θ|∈(π/2,π)时,r0与r1异号概率较大,误差减小.x、y通路的误差主要由剩余角和计算过程的圆整操作引起.m=n=28时,对单位向量的旋转进行模拟,用1位符号位+1位整数+26位小数表示x,y,扩展因子也用1位符号(扩展因子恒正,符号位恒为0,用补码表示便于Booth编码)+1位整数+26位小数表示.设初始向量为(1,0),则x通路的误差曲线如图6所示.纵坐标表示B=-log2(|xf-xr|),xf为计算值,xr为准确值.图6(a)对应t=(28-log62)/3=9,图6(b)对应t=(28-log62)/3=8.图7为y通路误差.通过对比可发现,t=7或9时误差分布类似,最坏情况下的计算精度均可达到22位,因此实际应用中可取t=(n-log62)/3,以减少查找表的入口数和流水线级数.Page8图7m=n=28(26位小数)时y通路的误差实验表明:2S-PCS算法具有较高的计算精度.常规CORDIC算法需使用(n+log2n+2)位数据通路[12]才能达到n位精度,用28位数据通路,只能达到约21位精度,去掉小数点前两位,精度只能达到小数点后19位,比2S-PCS算法的精度(22位小数)低3位.2S-PCS算法的高精度主要得益于短流水线,且利用CSA将3个加数化为2个,每级流水线只引发一次圆整误差.本例中,整条27级流水线的误差限约为1外,di为0的级不存在圆整误差,故2S-PCS算法的平均精度要比最低精度高1~2位.7总结本文提出一种新的CORDIC算法和体系结构,减少迭代次数的同时保持了常规CORDIC算法扩展因子易计算与补偿的特点,实现了旋转角位于[-π,π]的向量旋转操作.2S-PCS算法根据数据通路x,y以及旋转角的表示精度确定流水线级数和组织方式.步1的迭代系数和扩展因子由查表获得,步2迭代系数直接取目标转角的二进制编码,扩展因子恒为1,因此整个旋转过程不需z通路和扩展因子计算通路,大大减小了电路的面积开销.通过带约束的角度分解算法、基4-Booth编码和迭代合并等措施,有效减少了流水线级数.2S-PCS算法在迭代过程中对超出计算精度的表达式预先进行化简,并采用CSA累加多个操作数,有效地减少了流水线延迟.算法克服了传统全字段查表法可扩展性差的问题,随着数据表示精度的增加,查找表入口数增加缓慢,可扩展性好.理论分析与误差模拟表明,2S-PCS算法在保持高精度的同时具有明显的面积和延时优势,实用性强.采用28位数据通路时,与常规CORDIC算法相比,2S-PCS算法的流水线级数减少约38%,面积减少约27.9%,精度提高3位左右,显示了算法的优良性能.
