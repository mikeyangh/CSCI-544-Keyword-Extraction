Page1资源受限Web服务李刚孙红梅李智余海燕(中国科学院计算技术研究所北京100190)(Intel中国研究中心通讯技术实验室北京100190)摘要该文的目的是明确资源受限Web服务中的技术难点和未决问题,以便研究人员进行创新性研究.资源受限Web服务是服务计算与无线网络、移动计算和嵌入式系统相融合的产物.它是小型终端设备访问云计算平台的有效手段,也是一种重要的物联网支撑技术,在移动电子商务、现代医疗、智能家庭、制造业自动化等领域有广阔的应用前景.文中首先介绍了资源受限Web服务的概念,分析了它的起源、发展趋势和技术特点;然后从服务构件、开发工具、中间件、软件框架、标准规范和应用入手,对现有工作进行了评述,分析了其中的技术难点,提出了今后的几个主要研究方向.关键词Web服务;无线自组织网络;轻量级服务;资源受限Web服务;移动手持设备;传感器网络1引言随着PC的日趋衰落,IT领域出现了一些新Page2过无线网络将计算机与智能手机、家电等消费类电子产品互联,向用户提供个性化信息服务正在成为一种新的IT消费趋势.(2)计算技术一方面向大规模、高性能、分布式的云计算发展.通过云平台向用户提供“按需租用”的IT服务.另一方面向泛在计算发展,各种小型、嵌入式智能设备通过无线网络为云计算提供了“无时无处不在”的服务终端.最近,随着EaaS(Everyt-ingasaService)的兴起,服务作为手持、嵌入式设备访问云平台的一种重要手段[1],越来越受到业界的重视.例如:2008年,微软在ProfessionalDevel-operConference上发布了手持设备云计算软件BlueHoo,以增强微软的WindowsAzure平台.(3)随着“物联网”、“智慧地球”等新计算模式的出现,传感器、RFID等小型设备的无线互联和资源共享变得越来越迫切.在上述新趋势中,如何在无线移动环境中实现异构设备的互联与协同是一个需要解决的关键问题.Web服务为异构资源协同提供了有效手段.然而,在无线移动环境中,网络带宽、内存容量、处理器计算能力、电源等资源都十分有限[2].传统Web服务无法很好满足这种资源受限环境中异构设备互联与协同的需求.于是,人们开始研究嵌入式Web服务、移动/无线Web服务以及面向服务的移动设备.在此,我们将这类Web服务统称为资源受限Web服务(Resource-constrainedWebServices,RCWS).资源受限Web服务是服务计算与无线网络、移动计算和嵌入式系统相结合的产物,在移动电子商务、现代制造业、服务业、农业、医疗、消费类电子产品等领域有广阔应用前景.本文首先从资源受限Web服务的发展历程入手,分析了它在各个发展阶段的特点及整体趋势,然后从服务构件、开发工具、中间件、基础框架、技术规范及应用6个方面,分析了国内外研究现状,评述了现有研究成果的特点、优势和面临的主要挑战.目的是明确该领域的技术难点和未决问题,以便研究人员确立研究目标,在已有工作基础上进行创新性研究.2发展趋势图1清晰地刻画了资源受限Web服务的起源、成长、发展趋势和各阶段的特点.1996年至1999年是RCWS的孕育阶段.1996年,Gartner公司提出了服务计算的概念.1999年,人们从服务调用入手,在XML-RPC基础上提出了SOAP1.0.2000年,随着WSDL1.0和UDDI1.0的出现,面向服务体系结构(ServiceOrientedArchi-tecture,SOA)[3]初步形成.1999年至2001年是RCWS研究的初始阶段.SOA形成后不久,服务计算研究者就开始了在资源受限环境中设计Web服务的尝试.这些工作从服务构件入手,着重研究低资源消耗的SOAP协议.代表性工作有gSOAP[4]和kSOAP[5].2001年左右,在嵌入式、移动计算领域也出现了与RCWS相关的工作.例如:2001年,OdysseySoftware在PalmOS4.0上研发了移动Web服务框架ViaXML,支持在Palm嵌入式操作系统平台上通过Web服务访问企业数据;2002年,WindowsCE4.0NET开始支持Web服务;2003年,Nokia发布了S60PlatformSDKsforSymbianOS,在JSR-172基础上支持Web服务.目前,RCWS仍处于发展阶段.学术界在服务构件、中间件、开发工具等方面做了不少探索.工业界也在大力推动这方面的工作.例如:2008年,微软以嵌入式Web服务为基础,在WindowsEmbeddedCE6.0R2中加强了对RCWS的支持.不难看出,资源受限Web服务是一个富有生命力和发展潜力的研究领域.尽管形成时间不长,但得到了学术界、工业界的高度重视.3关键技术现状及难题为了分析资源受限Web服务的研究现状,我们对国内外权威论文数据库EiEngineeringVillage、ISIWebofKnowledge、IEEEXplore和万方数字Page3期刊中的论文进行了检索、统计和分析.结果如图2所示.EiEngineeringVillage、ISIWebofKnowledge和IEEEXplore的数据显示:国际上,RCWS论文最早出现于1999年.万方数字期刊的数据显示:在表1资源受限Web服务研究分类代表性工作服务构件基础设施框架SODA、NWSF、.NetCF、ViaXMLe-CommerceAuction-basedmarketplace、Mobilepayment、Mobileenterprise、Enterpriseinformationsystemintegration应用3.1服务构件根据通信协议的不同,Web服务构件分为RPC、REST及REST-RPC式三大类[24].其中,RPC服务又包括XML-RPC和SOAP服务两种.早期的资源受限Web服务多为SOAP服务.REST服务源于REST体系结构[25],是一种简洁的服务构件技术,出国内,RCWS论文最早出现于2004年.与其它国家相比,我国在这方面的起步稍晚.统计显示:从2003年开始,RCWS论文数量迅速增加.其中,IEEEXplore和万方数字期刊的数据显示:RCWS论文一直在逐年增加;ISIWebofKnowledge、EiEngineeringVillage的数据显示:RCWS论文分别在2006年和2007年略有回落,但下降幅度很小.例如:ISIWebofKnowledge中2006年与2007年论文的数量基本持平;EiEngi-neeringVillage中2007年与2005年论文的数量基本持平.总的来看,国内外RCWS论文的数量正逐年增加.综合现有代表性研究[1-23]①②③,图3给出了一个统一的RCWS关键技术分类体系.依据该体系,表1对相关工作进行了分类.现较晚但在资源受限环境中有很大发展潜力.REST-RPC服务综合了REST、RPC的特点,但相对复杂.表2对与RCWS相关的服务构件技术进行了比较.结果表明:现有技术对XML解析、对象序列化都提供了较好的支持.大都支持Socket缓存、内存管理.此外,REST、XML-RPC、REST-RPC服务内存消耗较大;XML-RPC、REST-RPC服务通信开销较大;轻量级SOAP(包括gSOAP[4]、kSOAP[5]、eSOAP[6]、cSOAP[7]和wSOAP[8]等)内存消耗小,通讯开销也较小.这些工作的主要特点与创新点如下:(1)通信开销小总的来看,这些服务构件的通信开销都比较小.例如:REST服务直接采用HTTP协议,通过URI①②jsr172/index.html,2008③Page4表2服务构件技术的比较gSOAP支持部分否完善差提供支持有支持小支持较小kSOAP否部分否少好提供无无支持很小支持较小eSOAP支持全部否少差提供支持有支持较小部分较小cSOAP支持部分否少差提供无无支持较小无较小CXF支持全部支持完善差提供支持有支持大支持小Jersey否否支持少好提供无有支持大支持小RESTEasy否否支持少好提供无有支持大支持小XINS支持全部支持少好提供支持有支持大支持大XML-RPC否否否少差提供无有支持大支持较大定位Web服务,通过GET、POST、PUT、DELETE方法完成客户端与服务的交互.数据交互直接构建在HTTP协议上,无需额外消息传递和会话跟踪.此外,REST服务省去了XMLSOAP消息附加元素和消息头,对带宽要求小,更具有在资源受限设备上使用的潜力.(2)结构简洁为了满足资源受限环境的需求,这些服务构件大都采用了简化的构件结构.例如:kSOAP客户端直接通过核心类SoapObject调用服务,无需构造、使用代理.gSOAP提供透明的SOAPAPI,在降低服务调用复杂性的同时,大大减小了服务客户端支撑库的规模.(3)存储资源消耗小轻量级SOAP服务的低存储消耗特点尤为突出.例如:运行gSOAP客户端只需要150KB内存,运行kSOAP客户端只需要120KB内存.但轻量级SOAP服务的低资源消耗大多以牺牲部分SOAP功能为代价.例如:gSOAP不支持SOAProot;kSOAP不支持多维数组,而且减少了对静态数据类型的支持.由分析不难看出,在服务构件方面还有以下技术难点和理论问题需要进一步探讨.(1)现有REST服务构件技术,如CXF、Jersey、RESTEasy,并没有妥善解决好资源受限问题.如:它们在内存消耗方面的开销并不理想.如何降低资源消耗,是一个需要进一步研究的技术难题.(2)REST服务基于无状态服务器模型,不保存服务状态,而且操作也是无状态的.无状态性以及消息优化机制的欠缺,增加了REST服务的资源消耗.如何解决这一问题需要在技术、理论上进一步研究.(3)尽管有WADL,但REST服务并没有完整的服务模型及服务描述机制,在数据交换语法及语义等方面也存在欠缺.(4)轻量级SOAP对SOAP的支持并不完善,如何在不减少对SOAP核心功能支持的情况下,降低资源消耗是一个很具挑战性的问题.3.2开发工具RCWS开发工具比较少,代表性的有kSOAPToolkit[5]、SODAToolkit①、WSDAPIDevelopmentTools[26]和gSOAPToolkit[27].它们的特点与创新点如下:(1)kSOAPToolkit基于轻量级XML解析器kXML,最大特点是简洁.此外,它能有效地处理SOAP异常,支持kSOAP用异常对象SoapFault处理意外情况.(2)SODAToolkit包括DeviceKit和ServiceActivatorToolkit.前者支持硬件设备接入,后者支持服务化设备与SOA的集成.除了支持OSGi(OpenServicesGatewayInitiative)规范及相关框架外,SODAToolkit还能与集成开发环境EclipseIDE无缝集成.(3)WSDAPIDevelopmentTools包括WSDCodeGen,WSDDebugHost和WSDDebugClient三部分.WSDCodeGen可以根据WSDL自动生成Web服务Stub或客户端Proxy.此外,该工具集支持Web服务客户端和Host端的调试.(4)gSOAPToolkit是一个平台独立的Web服务开发工具集,包括SOAP/XML引擎、Web服务器、gSOAPStub/Skeleton编译器、WSDL工具等,支持用C/C++开发Web服务.图4给出了gSOAPToolkit的服务客户端运行时环境以及用它开发、部署服务客户端的过程[27].综合现有工作,不难看出:目前尚无专用的RC-WS集成化开发环境.现有成果以工具集为主,需要与传统集成化开发环境结合使用.这些工具结构简洁,通用性强,占用存储空间小,可灵活组合.①RickerJ,LymanPA.ServiceorienteddevicearchitecturePage5图4用gSOAPToolkit开发部署服务客户端现有工作中存在的难点问题主要包括:(1)缺少支持资源受限Web服务开发的完整软件过程模型.(2)自动化开发工具是提高资源受限Web服务开发效率、质量的有效途径.RCWS的形式化建模和分析方法是构造这类自动化开发工具的基础.但是,目前有关RCWS形式化建模和分析方法的工作还很欠缺.(3)尽管有部分开发工具支持资源受限Web服务的测试,但这些工具还很不完善,尤其是在测试策略、测试模型及测试自动化方面尚存在欠缺.(4)研究支持资源受限Web服务及应用低成本构造与演化的综合试验平台,对需求分析、设计、验表3资源受限Web服务中间件的比较ConciergeAltaspCASEContext-awarenessOSGiDeviceserviceweakstronge-CommerceMWSMFROME4EUProcess-awarenessnoComponentservicestrongnoe-CommerceMobP2PWSLFMWSaMobWSSIRENA下面对其中的代表性工作进行分析.ConciergeConcierge是一个符合OSGi规范的资源受限服务中间件,核心包括模块层、生命周期管理层、服务层三部分.其中,模块层是Concierge的基础,负责加载资源受限环境中的应用服务;生命周期管理层支持应用服务的安装、启动、关闭、卸载和升级;服务层主要负责服务请求过滤和服务注册[28].证、演化、监控和评价提供系统支持,是一个很具挑战性的问题.3.3中间件如表3所示,资源受限Web服务中间件主要包括Concierge[28]、Altas[29]、pCASE[30]、MWSMF[31]、ROME4EU[32]、SIRENA[33]、MobP2PWS[34]、LFM-WS[35]、aMobWS[36]等.从服务化角度,可以将它们分为两类:设备服务中间件、构件服务中间件.由分析可知,这些中间件对数据管理的支持普遍较弱,对构件管理的支持比较完善;应用主要集中在电子商务领域;所支持的编程范型以SOA为主.此外,还支持Event-driven、Smart-space、Context-awareness和Process-awareness几种编程范型.服务化Concierge的主要创新点如下:(1)完善的服务管理.服务管理是Concierge的一个突出特点.通常情况下,用户可以在嵌入式设备上进行的操作十分有限,而且在资源受限条件下加载服务模块很容易出错.模块之间的依赖性也使加载更加复杂.Concierge消除了模块间的依赖,提供了完善的服务生命周期管理,使用户可以按照任意顺序加载服务Page6构件.(2)低资源消耗.与其它符合OSGi规范的中间件(如Oscar①、Knopflerfish②等)相比,Concierge占用的存储资源更少,性能更优越.例如:Concierge的文件只占用75KB存储空间,Knopflerfish则至少需要200KB;在PDA设备上(SharpZaurus5500G,SUNCVM1.0),Concierge的性能比Knopflerfish高3.2倍[28].AltasAtlas是一个支持传感器/响应器的面向服务中间件.如图5所示,Altas涉及物理层、节点层、服务层和应用层4个层面.其中,传感设备与服务、应用一起构成智能空间.传感器负责收集智能空间信息,响应器根据空间状态,响应处理.为了支持异构设备动态集成,Altas采用面向服务技术屏蔽物理设备在数据和操作上的差异,实现传感器/响应器的服务化[29].Altas的主要创新点如下:(1)自集成和普适编程空间.Altas在设计上采用了自集成和普适编程空间的思想.节点层通过Altas节点实现物理设备的自动集成,并以服务形式将设备呈现给其它构件.Altas节点支持传感数据过滤和聚合,对外提供数据查询功能.Altas服务层负责服务注册、发现及组合,并为应用的构造、调试及服务远程部署提供支持.(2)透明的服务化传感设备.Altas的另一个特点是异构传感设备的服务化.Altas节点实现了对传感器/响应器的抽象,提供节点层与服务层的接口;设备驱动服务在Altas节点基础上将传感器/响应器透明化,使底层物理设备在服务层呈现为可被应用调用的服务.不过,Altas中的服务并不驻留在传感设备中,服务构件实际上仍部署在服务器平台上.尽管如此,Altas仍不失为一个采用面向服务技术实现设备动态集成的典型.pCASEpCASE是一个Context-aware的中间件平台.目的是将服务部署、管理和Context信息结合,支持动态服务集成.如图6所示,pCASE包括服务支撑和Context感知两个子平台.服务支撑子平台支持复杂服务的开发、部署和管理.Context感知子平台包括持久存储层、设备层、Context信息收集层、Context框架层和应用层,支持自动获取Context信息[30].pCASE的主要创新点如下:(1)传感数据抽象.在Context感知子平台中,设备层是数据抽象的基础,它为Context信息收集提供数据采集接口;信息收集层支持感知设备服务化,向Context框架层提供原始Context数据;原始Context数据在Context框架层被聚合、解析、语意化,抽象成可被应用使用的业务数据.(2)传感数据预处理.pCASE中间件平台在实现位置传感器等感知设备服务化的同时,支持对从传感器获取的数据进行预处理.数据预处理减小了底层数据扰动对高层应用的影响,避免了冗余数据引起的额外资源消耗.尽管pCASE支持设备服务化,但其服务支撑子平台基于J2EE,对资源受限服务的支持有限.另外,上下文敏感的无线环境具有动态性,如何在这种动态、资源受限环境中保持服务持续可用尚需进一步研究.SIRENA中间件SIRENA通过服务化设备协同,实现嵌①②flerfish.org/,2008Page7入式设备的无缝集成.如图7所示,SIRENABasicFramework是SIRENA的核心,它采用DPWS标准定义了SIRENA中支持设备集成的基本部件,如SIRENA-DPWS和JavaDPWSUPnP.SIRENA-DPWS可以生成资源受限Web服务的Stub和Skeleton,以此为基础用户可以通过gSOAP与服务化设备交互.JavaDPWSUPnP提供一个支持服务化设备动态集成的抽象层,支持JavaDPWS设备即插即用[33].SIRENA的主要特点如下:(1)服务化设备集成.SIRENA支持来自不同领域的异构设备无缝集成,并将它们以同构服务的形式呈现给高层应用[33].(2)支撑工具丰富.SIRENA提供了一组简化服务开发、集成和管理的工具.如:服务描述工具WebWSDL简化了嵌入式设备Web客户端的开发;生命周期管理工具DLCM支持动态网络中本地构件的生命周期管理;基于模型的服务配置工具MoBaSeC支持服务的运行时重配置和动态变更;过程管理工具GINGER支持基于可配置工作流的系统集成.(3)互操作性和兼容性强.与其它工作相比,SIRENA在互操作性和兼容性上有明显优势.SIRENAFrameworkExtensionInterface提供了DPWS-BluetoothSDPBridge,可以实现蓝牙设备与DPWS设备间的元数据映射及互操作.不过,SIRENA对服务部署支持较弱,扩展性比较差;设备层对服务化的支持也不够完善.目前,欧盟ITEA2计划正在资助这方面的研究.由综合分析可知,资源受限Web服务中间件的难点问题主要包括:(1)在资源受限环境中,如何实现异构设备的服务化是RCWS中间件要考虑的一个技术难题.现有工作为了降低问题复杂性,大都采用了结合领域需求,设计接入适配器的策略,缺少一个统一的设备服务模型.(2)资源受限环境中的不少小设备(如传感器等)与数据采集有关,在中间件层面需要对数据管理、分析提供充分支持.目前,大多数RCWS中间件对数据管理的支持还很薄弱.(3)现有资源受限Web服务中间件具有面向特定领域的特点,如何结合领域知识,设计灵活、可扩展的系统体系结构,低消耗、动态地满足领域需求还需进一步研究.(4)资源受限环境中,中间件采用何种机制降低服务化设备在内存、电量等方面的消耗一直是该领域的一个难题.资源敏感的中间件(resourceawaremiddleware)是解决这一问题的一条新思路,但在感知算法、资源消耗评价策略等方面仍有许多问题需要深入研究.3.4基础框架如表4,代表性的资源受限Web服务基础框架包括Service-OrientedDeviceArchitecture(SODA)[26]、NokiaWebServicesFramework(NWSF)[37]、NetCompactFramework(.NetCF)[38]、ViaXML①.由分析不难看出它们的共同特点:体系结构层次化,侧重基础功能,配置、使用复杂.同时,它们在降低资源消耗、实现设备服务化等方面各具特色.Service-OrientedDeviceArchitectureSODA基于OGSi规范,是一个支持传感器、执行器等与SOA集成的软件框架.SODA结构如图8所示,其核心包括设备适配器层(由设备接口、协议适配器、与设备及应用相关的逻辑构件组成)、总线适配器层和设备服务注册器三部分.设备服务注册器负责服务化设备的注册与发现.总线适配器层支持服务化设备与企业服务总线的集成.设备适配器层支持各种物理设备的接入.SODA的主要创新点如下:(1)支持服务化设备共享与重用.SODA包含DeviceKit和ServiceActivatorTool-kit两个工具,可将设备服务化,实现物理设备的高层抽象.开发人员通过服务共享物理设备,提高了设备利用率,降低了硬件设备与企业信息系统集成的复杂度[38].物理设备与应用的分离,不仅提高了设备的重用性,而且为设备集成提供了统一接口.①OdysseySoftware.ViaXML2FAQ,http://www.odys-Page8表4资源受限Web服务基础框架的比较SODADeviceKit,ServiceActivatorToolkitNWSF.NetCFViaXMLWindowsCE/WindowsMobile/Unix/Linux/PalmOS(2)支持多种嵌入式设备标准.SODA侧重异构物理设备的标准化接入.在互联网数据流、XML设备描述、资源注册基础上,SODA支持将符合SCADA(SupervisoryControlAnd图9NWSF体系结构NWSF的主要创新点如下:(1)P2P的动态共享机制.在NWSF中,手机等移动设备既是服务消费者又是服务提供者,可以以P2P方式实现音频、视频、文字等的动态共享[13].(2)完善的资源受限Web服务专用框架.NWSF不仅支持服务的发现、调用和管理,而且支持服务策略配置、安全的消息传递和基于HT-TPS的身份认证.以此为基础,NWSF为资源受限Web服务及应用的构造提供了比较完善的支持.为了支持P2P的ServiceMeshNetwork,NWSF在服务访问控制、移动P2PWeb服务、用户单点登录方面还有待进一步改进.EclipseIDE3.2.2+EclipseMEC++/JavaJSR-172DataAcquisition)、IEEE1451、IEEE802.15.x标准的嵌入式设备封装成服务.NokiaWebServicesFrameworkNWSF以开放标准J2MEWebServices为基础,支持服务的发现、调用和管理.NWSF结构如图9所示,包括基础通信层、XML服务层、工具服务层和应用接口几部分.其中,XML服务层与工具服务层是NWSF的核心.在工具服务层,服务调用模块支持客户端调用符合ID-FF(IdentityFederationFramework)、ID-WSF(IdentityWebServicesFramework)规范的Web服务;目录与发现服务支持客户端与服务的绑定,并提供安全的服务访问机制;策略服务负责用户身份认证以及上下文信息、服务访问策略的管理.XML服务层提供XML解析、SOAP消息处理、安全的消息传递等功能..NetCompactFramework.NetCF结构如图10,主要包括公共基础层、系统服务层、本地程序适配层、通用语言运行时环境Page9(CommonLanguageRuntimem,CLR)和.Net应用接口层.其中,系统服务层为本地方法调用、系统启动、安全策略互操作等提供支持.CLR负责将.Net字节码转换成本地操作系统、硬件支持的指令并执行.应用接口层由.NetCF接口类组成,提供对Web服务的支持.户以同步或异步方式访问Web服务..NetCF的主要创新点如下.(1)轻量级的服务客户端..NetCF支持轻量级Web服务客户端,支持用(2)低资源消耗..NetCF在运行环境层面对资源受限Web服务客户端提供了支持;采用面向资源受限环境的CLR设计,降低了RAM、CPU、电池等资源的消耗.(3)安全的Web服务..NetCF支持Web服务加密.在此基础上,开发人员可以构造安全、可信的Web服务.但.NetCF不支持使用HTTPS的客户端证书和身份认证.此外,.NetCF支持WindowsForms等桌面元素,并使之运行在PockPC、SmartPhone等多种移动、嵌入式设备上.但目前.NetCF只是.NetFramework的一个子集,在功能上并不很完备[26].ViaXMLViaXML是一个以Web服务引擎为核心的移动Web服务框架,支持开发人员用C++、VB.NET或C#构造移动Web服务应用,实现移动设备的P2P互联、远程设备管理或移动服务调用.表5资源受限Web服务规范的比较目的支持Java嵌入式设备、小型移动设备的无缝互联为J2ME设备提供Web服务支持结构层状结构层状结构服务管理提供服务生命周期管理,支持服务注册服务调用SOAP服务发现在服务注册器基础上发现新增服务、删除旧服务在移动环境中不支持服务发现元数据支持服务元数据安全机制提供了一个层次化安全模型,能为网络化设备上应用领域手持设备、嵌入式设备、车载设备以及工业自动用户服务提供者、服务消费者特点体系结构清晰,大而全侧重服务调用系统等下面分别对这些规范的技术特点进行分析.OSGiServicePlatformSpecificationOSGi由开放标准组织OSGiAlliance制定,最初目的是为Java嵌入式设备、小型移动设备的无缝互联提供标准.目前,OSGi的最新版本是OSGiR4.1.ViaXML的主要创新点如下:(1)对象化服务调用.ViaXML支持开发人员以面向对象方式调用Web服务.对象化服务调用以XML自动解析为基础;调用时,参数被封装成SOAP或XML-RPC消息包,通过HTTP/HTTPS发送给服务;调用结束后,ViaXML解析SOAP或XML-RPC消息,将结果呈现给用户.对象化服务调用使ViaXML应用的性能比传统Web应用高10倍.除上述优点外,ViaXML的SOAP/XML-RPC(2)高可靠、可扩展的Web服务事务处理.ViaXML首次将队列技术和Web服务结合,支持异步事务,解决了移动环境中可靠、可扩展的Web服务事务处理问题.以此为基础,ViaXML支持服务与客户端之间的双向数据访问和动态事务处理.机制在高效、低冗余的数据传递方面还需改进.3.5技术规范资源受限Web服务规范主要有OSGiServicePlatformSpecification(OSGi)、JSR-172J2MEWebServicesSpecification(JSR172)和DevicesProfileforWebServices(DPWS).如表5所示:上述规范都采用了层次化结构,支持设备服务化及设备互联;OSGi对服务管理的支持最强,并提供了较完善的安全机制、服务发现机制;JSR-172侧重服务调用,在服务管理、服务发现、安全机制及元数据管理方面比较欠缺;DPWS侧重服务化设备的发现及无缝互联.OSGi的主要技术特点如下:(1)动态的构件管理.OSGi内含一个动态构件模型,并以它为基础定义了相关服务,其核心包括应用生命周期管理、服务注册及运行支持等.符合OSGi的系统可以远程Page10安装、启动、更新服务化应用构件(Bundles);远程完成服务生命周期管理;通过服务注册器发现新增服务、删除旧服务或对服务进行适应性调整.(2)清晰的体系结构.OSGi的结构如图11所示.与其它规范相比,OSGi在系统体系结构方面优势明显.它为应用及设备动态集成定义了一个基于虚拟机的SOA结构;通过SOA结构支持构件的动态发现和协同,并支持网络化设备的动态组合.(3)广阔的应用领域.大而全是OSGi的另一个突出特点.最初,OSGi针对资源受限的小型嵌入式设备.目前,OSGi已经演化成一个可以支持手机、嵌入式设备、消费类电子产品、车载设备以及工业自动化、网格计算等的复杂规范,并向面向服务的大规模企业信息系统规范发展.这种向大规模、高资源消耗系统发展的趋势使现在的一些OSGi平台已不能很好地支持轻量级小设备.JSR-172J2MEWebServicesSpecificationJSR172由JavaCommunityProcess组织制定,目的是为J2ME设备提供Web服务支持.目前,它的最新版本是FinalDraftJSR-172J2MEWebServices1.0FR.JSR172的主要技术特点如下:(1)支持Web服务消费者和提供者两类构件.如图12所示,按照JSR172构建的系统包括为Web服务提供了如下支持:消息处理;Web服务消费者和提供者两类构件.嵌入式或移动设备是Web服务消费者,安装JSR172JAX-RPC运行时环境,通过JAX-RPC实现Web服务应用程序与服务提供者的交互.(2)侧重服务调用.与其它规范相比,JSR172侧重Web服务调用,①通过XMLJava应用接口JAXP支持XML②通过JAX-RPC提供跨服务节点的方法调用,支持不同服务节点间的SOAP消息交换和处理;JSR172与WS-IBasicProfile兼容,支持SOAP1.1和HTTP1.1,不需要宿主设备支持XML编码.但JSR172不支持DOM和XLST,而且只支持简单的XSD数据类型.这使得JSR172在很多情况下无法使用无数据类型约束的Web服务.此外在移动环境中,JSR172不支持SOAP附件、SOAP句柄和Web服务发现.(2)服务化设备发现.在以DPWS为核心的体系结构中,有HostingService和HostedService两类服务.以它们为基础,DPWS支持服务化设备的动态发现,并通过Web服务接口支持灵活的分布式应用开发和设备无缝集成.DevicesProfileforWebServicesDPWS由微软及其合作伙伴联合制定,目的是定义一个Web服务子集,支持服务化设备的网络互联.目前,DPWS只发布了一个PublicConsultationDraft版本.DPWS的主要技术特点如下:(1)标准化服务协议栈.DPWS的目标与UPnP相似,但在结构和功能上却有本质差别.它建立在WSDL、SOAP、WS-Addressing、WS-MetadataExchange、WS-Policy、WS-Security、WS-Discovery、WS-Eventing等Web服务标准之上,对Web服务提供了充分支持.Page11布自己,发现其它服务;(3)内置服务.DPWS定义了如下内置服务:①元数据交换服务.支持服务元数据的动态访问;②发现服务.与网络相连的设备利用该服务发③事件发布/订阅服务.允许其他设备订阅由某服务产生的异步消息.DPWS在下一代工业自动化系统及消费类电子产品中有广阔应用前景.不过,在构造DPWS应表6典型资源受限Web服务应用分类领域e-Commercee-HealthSmarthome灾害管理在e-Commerce领域,RCWS应用主要包括电子拍卖、移动电子支付、移动虚拟企业、企业信息系统集成等.例如:Pilioura等人将移动Web服务应用到拍卖信息系统中,通过移动终端向用户提供Any-where-and-Anytime的服务[12];Chong等人采用移动Web服务设计了一个电子支付系统,使用户通过便携的J2ME手机就可以与支付服务网关交互,完成电子支付[13];Ennai等人设计了一个支持Web2.0的轻量级服务框架,该框架采用移动Web服务技术,支持移动企业计算,可以使移动应用方便地与已有企业信息系统集成,并通过Context-awareness技术降低了计算复杂性[14].Souza等人将嵌入式Web服务与RFID、嵌入式设备、传感器网络相结合,构造服务化的SmartObject,这种服务化智能物体能够无缝地与企业ERP系统等集成,为下一代面向服务的协同制造提供智能支持[15].资源受用时,设计人员需要首先在本地设备与Web服务之间建立桥接.桥接的引入使DPWS的使用相对复杂.4应用进展资源受限Web服务在e-Commerce、e-Health、智能家庭、灾害应急等领域有广阔的应用前景.表6给出了其中的典型案例.time的拍卖需求[12].业计算[14].ERP系统)动态集成,支持灵活的工作流管理[15].实现心脏监测器、温度传感器、环境监测器等的无线互联,以服务和事件为基础实现医疗信息共享,为疾病诊断、治疗提供支持[16].取位置信息,通过移动终端及时掌握老人病况[17].医生随时随地访问病历信息[18].通过Web服务提高异构子系统、设备的互操作性,利用SOAP完成异构设备间的数据交换,以提高系统的动态扩展性和平台无关性[19].用移动、嵌入式Web服务实现设备服务化,在设备服务化基础上,实现智能家庭设备的无缝互联,提高系统的自治性和自动化程度[20].设计了一种面向服务的设备驱动器,通过它无缝控制远程设备,支持符合OSGi、DPWS的服务集成,支持HomeServiceComposition[21].象等服务,实现森林火情实时监控[22].务的集成,形成一个SensorWeb系统,实现灾害早期预警[23].限Web服务在e-Commerce中的应用表明,它大大提高了信息系统的自动化程度.在e-Health领域,RCWS的典型应用包括健康监测、基于位置信息的e-Health和移动医疗.例如:Lupu等人将嵌入式Web服务应用到低能耗、便携式医疗传感器上,设计了Self-ManagedCell(SMC).通过服务发现和事件总线,SMC提供的服务可以实时发布病人病情.医护人员可以通过PDA或其它支持移动Web服务的手持设备及时获取病人病情,做到及时发现,及时治疗[16].Boulos等人将移动Web服务与地理位置信息、可穿戴医疗检测设备相结合,在实时监控病人病情的同时,通过GSM/GPS获取病人位置信息.当病人突然病危时,可以做到准确定位及时抢救[17].Adnan等人将移动Web服务应用到医疗信息系统中,设计了服务化医疗数据库访问接口,使医生可以随时随地通过手持设备Page12获取病人病历等信息[18].资源受限Web服务在e-Health领域的应用使医生能够及时了解病人病情,提高了抢救、治疗的成功率.在Smarthome领域,RCWS应用主要集中在异构设备集成、移动家庭和家庭服务自动化几方面.例如:Perumal等人将嵌入式、移动Web服务应用到数字娱乐设备、环境监控设备、健康监测设备的互联中,通过SOAP实现设备间的数据交换,增强了系统的动态扩展能力[19].Botterweck等人将嵌入式Web服务应用到电灯、暖气、电话、自动门等设备中,在设备服务化基础上,实现了智能家庭设备的无缝互联,使用户可以通过智能手机随时随地远程监控家中情况[20].Bottaro等设计了一种面向服务的设备驱动器,支持符合OSGi、DPWS标准的服务集成,实现对远程设备的无缝控制[21].RCWS在灾难应急中的典型应用有森林火情监控、水与大气污染评估等.Zhou等人将移动Web服务与PDA结合,在SOA框架下集成火警、气象等信息系统,实现了森林火灾实时监控[22,39].Jirka等人将嵌入式Web服务应用到环境污染监测中,将多种环境监测传感器与地理信息服务集成,搭建了一个SensorWeb系统,实现了环境灾害的早期预警[23].资源受限Web服务在灾害应急系统中的应用提高了灾害早期预警的准确性和人们对灾难的处理能力.5研究方向综合、分析现有工作,不难发现以下问题还需进一步研究.(1)轻量级服务模型.现有轻量级SOAP采用了部分实现SOAP协议的研究思路,虽然降低了存储空间等资源消耗,但以损失Web服务技术特征为代价.此外,以XML为基础的数据传递存在大量冗余数据,增加了带宽、电源等资源消耗.如何在充分支持Web服务的同时减少资源消耗有待进一步研究.资源消耗不仅与单个Web服务的运行有关,而且与宿主、客户端、应用模式及系统结构密切相关.问题的解决不仅需要轻量级SOAP引擎,而且需要轻量级服务模型及动态体系结构的支持.(2)低消耗、高互操作的应用架构.现有支持资源受限Web服务的基础框架侧重服务调用和物理设备服务化;安装、配置不便,互操作性差.目前,已有一些研究人员开始关注这方面的问题,但问题远没有得到解决[33].(3)便捷、高效的开发环境.现有RCWS工具对服务客户端的支持较强,对无线环境中常用的异步编程模式支持很弱.此外,资源受限Web服务在内存、多线程、仿真环境等方面有诸多限制,这使得这类服务、应用的开发与传统软件开发有较大差异.针对RCWS的特点,研究适于这类服务开发、测试、维护的便捷集成开发环境是一个值得进一步研究的问题.(4)语义化数据聚合.异构数据在资源受限环境中的传输、处理会大量消耗带宽、存储、CPU、电源等资源[40].对数据进行必要的聚合是解决这一问题的一个有效方法.尽管像pCASE这样的中间件平台提供了数据预处理功能,但现有研究成果对异构数据语义化聚合、检索及协同使用的支持还很弱,这方面的工作还有待进一步加强[41].(5)面向资源受限Web服务的轻量级系统结构.RCWS应用的资源消耗受无线动态链接、即时数据传递、异构系统集成等多重因素影响.降低资源消耗,提高资源利用率需要在体系结构层面综合考虑.研究面向RCWS的体系结构和服务模型将有助于问题的解决.目前,已有研究人员开始了这方面的探索,例如GuilhermeBertoni等人借鉴SaaS思想,以gSOAP为基础研究设计了服务化的嵌入式设备集成结构[42].但问题并没有得到很好解决.以REST为基础研究面向RCWS的轻量级系统结构是解决这一难题的一条新途径.6结语目前,资源受限Web服务的研究主要集中在服务构件、开发工具、中间件、基础框架与技术规范几方面,且侧重设备服务化技术.尽管研发了一些轻量级SOAP引擎,但这些引擎对Web服务的支持并不完善.现有开发工具对集成化开发、测试的支持还很弱;基础框架互操作性也较差.此外,现有工作在新型服务模型、系统体系结构、语义化数据聚合等方面仍有大量工作要做.同时,我们认为资源受限Web服务的构造、使用受多种因素、环节的影响.综合考虑各种因素,研究轻量级的服务模型、体系结构和适应性软件框架,Page13从构件资源消耗和系统负载平衡两个层面降低资源消耗,将是克服存储、网络带宽等资源瓶颈的一条新思路.
