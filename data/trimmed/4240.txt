Page1基于超链接多样性分析的新型网页排名算法杨博1),2)陈贺昌1),2)朱冠宇3)赵学华1),2)1)(吉林大学计算机科学与技术学院长春130012)2)(符号计算与知识工程教育部重点实验室(吉林大学)长春130012)3)(吉林大学软件学院长春130012)摘要作为搜索引擎的核心部件,网页排名算法决定了搜索到的相关结果以何种顺序呈现给用户,其性能的优劣将会直接影响搜索引擎的服务质量和用户的搜索体验.在计算网页的权威性时,现有的基于链接的网页排名算法和网页作弊检测算法仅关注网页的超链接数量和质量,而忽略了超链接来源的多样性———另一种客观评价网页权威性的重要信息.相比于真正的权威页面(具有大量且来源广泛的入链),通过作弊手段提升排名的网页往往不具有入链来源多样性的特征.基于以上思想,文中分别提出了超链接来源多样性判断方法、超链接权值调整方法,进而提出了基于超链接来源多样性分析的网页排名算法Drank.在多个基准数据集上的实验结果表明:与现有最好的同类算法相比,综合寻找优质页面和抑制网页排名作弊两方面,Drank算法表现出更好的性能.关键词搜索引擎;排名算法;作弊检测;链接分析;概率计数;社会计算;社交网络1引言互联网飞速发展的同时,互联网上的信息量也呈爆炸式增长.用户要从海量的资源中寻找到对自己有帮助的信息,大都需要依靠搜索引擎的帮助.搜索引擎能够根据用户的搜索需求,从互联网中找到与需求相关的信息返回给用户.通过对大量用户行为的统计,在搜索引擎为用户返回的结果中,用户只对前几页的内容感兴趣[1].因此,搜索引擎都具备一个网页排名算法,用于对将要返回给用户的结果进行排序,之后再将排序后的结果返回给用户.其目的是希望将最有价值的网页排在最前面,使用户只需浏览少量信息就能找到对自己有用的资源.因此,排名算法性能的优劣将会直接影响搜索引擎的服务质量和用户的搜索体验.另一方面,搜索引擎优化者(searchengineoptimizer)可利用网页排名算法的缺陷,通过欺骗手段达到虚假提高作弊网页排名的目的[2-3].作弊网页质量不高,甚至包含虚假信息,严重影响了搜索服务质量.网页作弊的本质是在网页排名信号中加入噪声,因此反作弊的关键是设计出鲁棒的排名算法,去除噪声干扰,在不影响高质量网页排名的基础上尽可能地抑制作弊网页的排名.随着基于链接排名算法的广泛应用,基于链接的作弊已成为网页作弊的主要形式,因为无论作弊网页在内容上具有何种特征,这些网页最终要靠特殊加入的超链接结构去提升它们在搜索引擎中的排名.这其中,采用链接交换和操纵子节点的方法构造链接农场是最普遍的一种链接作弊方法[4-6].因而,相比于基于内容分析的机器学习方法[7-8],基于链接分析方法无论在计算成本上还是在抑制作弊网页排名的效果上都表现出更好的性能,在实际应用中被广泛采用.随着搜索引擎优化方法的不断演化和发展,研究与之博弈的反作弊技术将成为搜索引擎面临的一个长期任务.下面从基于链接的排名和反作弊两个方面简要分析相关技术的发展和现状.1.1研究现状由Brin和Page[9]提出的PageRank算法以及Kleinberg[10]提出的HITS算法是最著名的两种基于链接结构的网页排名算法.PageRank算法认为:一个网页被高质量网页指向的次数越多,该网页的质量也就越高[11].该算法被应用于迄今最成功的商业搜索引擎Google中,在工业界和学术界都受到了很大关注[11-14].HITS算法认为每个网页具备两种属性:权威性(authority)和中心性(hub).权威性高的网页包含了用户需要的信息资源,而中心性高的页面中包含了很多指向高权威性网页的链接.之后,有很多学者对这两种算法进行了改进,代表工作包括:Chakrabarti等人[15]提出的ARC(AutomaticResourceCompilation)算法通过锚文本及锚文本的上下文中包含的查询关键词的数量为其对应的链接分配权值,解决HITS算法容易出现的“主题漂移”问题;Lempel和Moran[16]提出SALSA(StochasticApproachforLink-StructureAnalysis)算法,将随机游走模型应用到了HITS算法中,同样解决“主题漂移”问题,并且减少算法的运行时间;Bharat等人[17]提出Hilltop算法,不完全依赖PageRank得分去寻找权威页面,以有效避免链接作弊带来的影响,提高主题相关性;Haveliwala[18]对PageRank进行改进,提出TSPR(Topick-SensitivePageRank)算法,基于ODP(OpenDirectoryProject)中收录的网页,对每个目录主题都求得一个PageRank得分向量,以增强排名的主题相关性.此外,Roberts等人[19]基于隐含社区的假设前提,提出SD(SimilarityDownweighting)和SC(SequentialClustering)算法,弥补了HITS和SALSA算法易受TKC(TightlyKnitCommunity)的干扰的不足.针对基于链接的网页排名作弊,研究者将信任传播(trustdiffusion)引入到排名算法中.2004年,斯坦福大学的Gyangiy等认为“高质量的网页很少指向垃圾网页”,基于该假设提出了TrustRank[20]算法,以抑制作弊网页的排名.该算法首先选择一个“可被信任”的页面集合作为种子,为其中的页面分配初始信任值,采用与PageRank相同的迭代过程模拟信任值沿超链接的传播过程,计算各个网页的信任值,作为排序的依据.Wu等人[21]运用类似TSPR的方法对TrustRank进行了改进,提出TopicalTrustRank算法,根据ODP每个主题中的种子对网络分别进行TrustRank运算,进而综合各次计算结果作为页面的最终信任度.2006年,Krishnan等人[22]基于“垃圾网页很少被高质量的网页所指向”之一假设提出Anti-TrustRank算法.与TurstRank算法不同的是,该算法采用垃圾页面作为种子集,沿着超链接的相反方向计算各个页面的不信任度.与此类似的还有BadRank[23]算法.考虑到信任度与非信任度都可以在网络中传播,Wu等人[24]又提出一种结合两者的算法,令信任度与非信Page3任度同时在网络中传播,为每个网页计算两种属性的得分,进而综合这两个得分作为网页是否作弊的判断依据.近年来,研究者提出了基于物理模型的网页排名算法,具有更强的抑制作弊能力.Yang等人[25]借鉴物理学中的热扩散模型提出了DiffusionRank算法.该算法将评价网页质量的得分视为热量,网页间的链接视为可以传递热量的管道,用热量在网络上的传递来模拟网页质量得分的传播.2009年,Kaul等人[26]提出的AIR(AffinityIndexRanking)算法将网络模拟成电路,将页面间的超链接看作二极管,页面自身的电位值作为评价页面权威性的得分,采用电流模拟对页面权威性的投票,由于二极管具有单向导电特性,投票只能由权威性高的页面投向权威性低的页面,从而抑制链接作弊的发生.1.2本文的研究动机现有的基于链接的排名算法在计算网页的权威性时只考虑两个因素:指向该网页的页面数量和指向该网页的页面质量.本文算法将考虑一个新的因素:指向该网页的页面来源,进而综合页面数量、质量和来源三个因素评价网页的权威性.如果将计算网页的权威性视作投票过程,则页面数量对应投票数量,页面质量对应投票人的权重,页面来源则刻画了投票代表是否具有多样性.互联网中不同的网站通常代表不同利益的团体,如果指向一个网页(或网站)的超链接来自不同的网站,则说明它得到了广泛的认可;反之,如果指向该网页的超链接来源非常单一,即使其具有较多的投票者,也不具有更大的权威性,甚至存在投票作弊的嫌疑.超链接来源的多样性分析不仅有助于区分正常页面和垃圾页面,还能更好地区分高质量页面和一般质量的页面,使得排名靠前的页面尽可能多地包含高质量页面,尽可能少地包含低质量和垃圾页面.此外,考虑到网页作弊具有成本,绝大部分帮助垃圾页面作弊的搜索引擎优化者只针对占市场份额最大的搜索引擎[27],针对只有市场份额很小的引擎作弊在经济上很不划算,因而我们重点针对Google公司的PageRank排名算法进行改进,通过引入超链接多样性的思想显著提升其抑制作弊的能力.基于上述思想,本文提出了计算超链接多样性的模型和算法,进而基于随机游走模型提出了综合考虑超链接数量、质量和多样性的排名算法Drank(diversitybasedpagerank),并通过人工和实际数据集,对比分析了现有方法和Drank在寻找优质页面和抑制作弊等方面的性能,验证了基于多样性分析进行网页排名的有效性.本文第1节介绍论文的研究背景、研究现状和本文的研究动机与主要思路;第2节详细介绍提出的Drank算法;第3节是算法的验证分析;第4节是总结与展望.2Drank算法2.1基本思想网页的链接结构特征通常能够直接反映其本质,作弊网页与正常网页的链接结构有明显区别.如图1所示,正常网页的链接来源广泛,且不同来源的网页之间链接不会过于稠密,网页来源多样性较高.相反的,作弊网页的链接来源单一,通常仅限于链接农场,且农场内部链接十分稠密,农场中的网页与正常网页间的链接较少,网页来源多样性较低.图1作弊网页(左)和正常网页(右)的结构特征网页作弊的主要方式是构造链接农场,参见定义1.我们根据作弊方式的不同将其分成两类:操纵子节点作弊和链接交换作弊.定义1.节点P0为目标节点,集合{P1,P2,P3,…,Pn}是P0的链接农场,Pi为子节点(i=1,2,…,n),目标节点的权威性得分依赖于子节点.(1)操纵子节点作弊:在作弊组织中设置一个目标节点(作弊者希望提高排名的节点),构造大量子节点及其与目标节点间的链接,子节点将自身得分流向目标节点,进而达到提升目标节点权威值的目的.如图2(a)所示,目标节点P0将自己的得分流向周围的作弊子节点{P1,P2,…,Pn},子节点再将自身得分回流给目标节点,以此提高目标节点的得分.(2)链接交换作弊:在作弊组织中设置若干目标节点,目标节点除了与子节点间的链接外还存在与其它目标节点间的链接,通过联合作弊以积累目标节点权威值.如图2(b)所示,P0和Q0是目标节Page4点,链接农场分别为{P1,P2,…,P3}和{Q1,Q2,…,Q3},P0和Q0通过交换链接互相累积得分.为了不使得分外流,作弊子节点链接构造简单,仅指向目标节点,正常节点很少指向作弊节点,因此作弊节点的链接来源非常单一.PageRank算法在计算网页权威性时只考虑网页入链的数量和质量,未考虑入链来源的多样性,本文提出的Drank算法通过重新调整网页间超链接的权值,并将这一因素考虑到网页权威性计算过程中.具体而言,针对链接交换和操作子节点两种作弊方式,超链接权值调整策略有如下两种.策略1.超链接的源网页与目标网页之间的多样性较低时,则削弱该链接的权值.参与链接交换作弊的目标节点同属于一个关系密切的团体,源网页和目标网页间的多样性较低,通过策略1可以削弱目标节点之间的链接权重,使其无法累积得分.策略2.指向同一目标网页的超链接的源网页间的多样性较低时,则削弱这些链接的权值.目标节点的得分主要来自子节点,而子节点都来自链接农场,因此,子节点之间的链接多样性较低,通过策略2能够削弱子节点到目标节点间的链接权值,使得分无法回流.基于以上分析,Drank算法由以下3部分组成:(1)计算每对节点之间的网页来源多样性.(2)根据网页来源多样性调整链接权值.(3)计算每个节点的权威值.2.2网页来源多样性定义我们在计算网页来源多样性的时候借鉴了社会网络分析的“k-近邻”概念.个体v直接和间接认识的人以及直接和间接认识v的人共同构成了v的“k-近邻”.根据个体间k-近邻的重合程度,可判断个体来源是否具有多样性,具体可根据如下定义计算.定义2.G表示网络,U(v)表示个体v的k-近邻集合,|·|表示集合中的元素个数,u(v,u∈G)之间的来源多样性为如果一些个体的社交关系非常相似,那么他们很可能同处于一个关系密切的集体中,则他们的来源多样性低;反之,个体之间的来源多样性高.基于该思想,将网络看做网页间的社会关系网,对每个网页找到它自己的k-近邻,进而通过计算网页间k-近邻的重合程度来判断它们是否处于同一来源.网页来源的多样性越高,相应的输入链接对提升网页质量的贡献就越大.网页来源多样性的计算过程如下:首先找到与页面v和u有链接关系的网页集合,假设k-近邻的半径为k,分别统计与当前两个页面距离为k的页面集合作为各自的k-近邻,进而采用Jaccard指标计算这两个页面集合的重合程度.如图3所示:令out(v,k)表示页面v的k步出链近邻集合,即v向外走k步能够到达的页面集合,令in(v,k)表示v的k步入链邻居集合,即k步内可以走到v的页面集合,页面v和u的网页来源多样性计算如下:D(v,u)=1-(in(v,k)∪out(v,k))∩(in(u,k)∪out(u,k))(in(v,k)∪out(v,k))∪(in(u,k)∪out(u,k))2.2.1网页来源多样性的精确计算为计算以上定义的网页来源多样性,必须先求出属于每个页面的k-近邻,即out(v,k)集合和in(v,k)集合.当k=0和k=1时,上述两个集合容易计算;而当k2时,计算将会变得复杂.以求out(v,k)为例,为统计节点v在k步内可到达的节点,可以先统计v的各邻居节点在k-1步可到达的节点,然后这些节点与v的邻居节点共同构成的集合就是v在k步可到达的节点.因此,可以从k=0开始,利用硬盘中存储的边信息,统计当前k值下各节点的出链近邻集合.令k值不断增加,直到k等于我们期望的步长.算法描述如下.Page5算法1.出链k-近邻精确计算方法:OUT_K.输入:节点集合V,边的集合E,步长k输出:各节点k步出链邻居集合O1.OUT_K1[初始化]2.FORv∈VDO3.O(v,0)←{v}//初始k-近邻集合4.OUT_K2[统计出链k-近邻集合]5.FORt=1TOkDO6.FORv∈VDO7.(O(v,t)←O(v,t-1)8.FOR(v,u)∈EDO9.O(v,t)←O(v,t)∪O(u,t-1))//新增节点类似的,算法IN_K可以求得in(v,k),综合两个集合即可得到网页v的k-近邻.求出每个网页的k-近邻后根据式(1)可依次计算各网页间的链接来源多样性.精确计算方法中存在大量的集合求并集运算,面对大规模网络时,用精确方法计算网页间的多样性会消耗大量的时间.因此,本文采用一种基于概率计数(probabilisticcounting)[28-30]的近似算法来解决网页来源多样性计算的可扩展性问题.2.2.2网页来源多样性的近似计算概率计数算法用二进制编码(bitmap)表示集合,通过计算编码中“0”元素所占比例来估计集合中的元素个数.假设集合中的元素个数为N,每个元素都有唯一的编号Xi(i=1,2,…,N).假设该集合的一个子集包含n个元素,该子集编码长度为L,初始值全为“0”,最右端为第0位.对子集中的每个元素执行一次Hash运算hash(Xi),并将编码中与Hash值对应位置的元素置为“1”.统计编码中“0”的个数Un,则子集中所包含的元素个数可估计为η.例如:集合中的元素为{1,2,3,…,100},某子集包含10个元素{2,8,13,30,38,40,41,47,80,89},编码长度L=8,Hash运算采用除留余数法.运算后编码中“0”元素个数Un=2,如图4所示.该子集中元素个数被估计为η=11.09035.估计两个集合并集元素个数时,可将两个集合的编码按位进行或运算,然后按以上方法估计元素个数.与同类估计算法相比(参见文献[29-30]),本文采用的概率计数方法估计更准确,且不需要校正系数(correctionfactor).基于概率计数方法求集合并集运算的时间复杂度仅为O(1),且每个集合只需用一个长度为L的二进制编码表示,从而降低了计算的时空复杂度.基于以上分析,对算法OUT_K进行改进,得到out(v,k)的近似计算方法APX_OUT_K,其输出out(v,k)表示为一个二进制编码.算法2.出链k-近邻近似计算方法:APX_OUT_K.输入:节点集V,边集E,步长k输出:各节点k步出链可达节点集合编码O1.APX_OUT_K1[初始化]2.FORv∈VDO3.O(v,0)←0//分配初始编码4.Bitmap1×L←0//编码长度为L5.APX_OUT_K2[计算出链k-近邻集合编码]6.FORt=1TOkDO7.IFt=18.FORv∈VDO9.FOR(v,u)∈EDO10.Bitmap(hash(Xi))=“1”11.O(v,1)←Bitmap12.IFt>113.FORv∈VDO14.(O(v,t)←O(v,t-1).15.FOR(v,u)∈EDO16.O(v,t)←O(v,t)BITWISE-ORO(u,t-1))类似的,算法APX_IN_K可求得in(v,k)对应的编码,进而将out(v,k)与in(v,k)编码进行或运算得到网页的k-近邻集合对应的编码.利用以上方法能近似估计出两个集合并集的元素个数,估计两个集合交集中的元素个数时,可将两个集合的编码按位进行与运算,再根据式(1)计算每对网页的来源多样性.2.2.3精确计算与近似计算的复杂度分析求网页多样性分为统计k-近邻和计算k-近邻重合度两步.本节针对这两步,对精确计算和近似计算的复杂度进行对比分析,并将结果总结于表1.其中,m和n分别表示网络中边和节点的数量,L为编码长度,机器字长为32位,令L/32=r.(1)统计所有节点的k-近邻.每次步长增加1,精确计算和近似计算都要对m条边进行一次遍历.对于之间存在边的两个节点,需要进行两个节点当Page6前邻居集合的并集运算.精确计算需要O(nlogn)的时间完成并集运算,而近似计算只需O(r)的时间.所以,两者整体的时间复杂度分别为O(mnlogn)和O(rm).统计过程中,除了用到m条边的集合,还要存取不断更新的各节点的邻居集合.精确计算需要O(n2)的空间保存各节点邻居集合,近似计算只需花费O(rn)的空间保存n个编码即可.所以两者的空间复杂度分别为O(m+n2)和O(m+rn).(2)计算所有节点对k-近邻重合度.计算重合度时首先需要二重循环遍历所有节点对,其时间复杂度为O(n2).对于每对节点同样需要通过集合的并集和交集运算来求得节点k-近邻的重合度,精确计算和近似计算的时间复杂度仍为O(nlogn)和O(r).因此,两者整体的时间复杂度为O(n3logn)和O(rn2).在空间复杂度上,精确计算需要O(n2)的空间存放各节点的k-近邻集合,近似计算只需O(rn)的空间存放各节点k-近邻对应的编码.统计k-近邻O(mnlogn)O(m+n2)O(rm)O(m+rn)计算重合度O(n3logn)O(n2)O(rn2)O(rn)计算多样性O(n3logn)O(n2)O(rn2)O(rn)近似计算节点间链接来源多样性的计算时间复杂度降到了O(n2),主要原因是将集合并集运算的时间复杂度降到了O(r).同时,近似计算的空间复杂度也远小于精确计算.运算中需要频繁读取节点的邻居集合,相比于精确计算O(n2)的空间复杂度,近似计算O(rn)规模的数据可以直接放入内存,从而提高了存取速度.所以,在实际运行中,近似计算的速度优势更加明显.2.2.4k-近邻半径选择k-近邻的半径k对相似度影响较大,因此k的选择非常重要.我们通过分析常见的作弊模式发现,涉及作弊的团体大多分布在半径较小、较稠密的社区中.如图2所示,操纵子节点作弊的链接农场与目标节点间的距离为1;链接交换作弊的目标节点之间距离为1,链接农场与其他目标节点之间距离为2,各链接农场之间距离为3.因此,作弊节点之间3步内的网页来源多样性非常低,而正常和权威网页则不会有类似特征.基于以上分析,对于较小的人工合成网络(节点数小于1000),我们建议k-近邻半径取值为2,对于真实的网络数据集(节点数大于10000),建议k-近邻半径取值为3.2.3调整链接权值的两种策略调整超链接的权重,具体方法如下:求出网页来源多样性后,可采用2.1节中提出通过式(2)实现策略1.其中,i和j表示两个网页,W(i,j)和NW(i,j)分别表示调整前和调整后的链接权重,D(i,j)表示两个网页间的多样性.可以看到,如果两个页面间的多样性为0时,它们之间链接的权值会被削弱50%;反之,如果页面之间多样性较高,它们之间的链接权值将不受太大影响.通过式(3)和式(4)实现策略2.其中,页面a和b同时指向页面i,W(a,i)和NW(a,i)分别表示调整前和调整后页面a与i之间的链接权重.通过a和b的网页来源多样性,重新调整了链接〈a,i〉和〈b,i〉的权值.假设页面i为目标节点,构造子节点数为n,当子节点间的多样性为0时,被调整后的链接权重为NW(a,i)=W(a,i)/2n-1.由此可见,策略2对目标节点的惩罚力度随子节点数的增加呈指数递增.2.4计算网页权威性我们采用类似PageRank算法的随机搜索模型计算各网页的权威性.假定要查找的信息X包含在网页i中,采用的搜索过程如下:从任选的一个页面出发,如果该页面包含X则停止搜索过程,否则随机选择该页面中的一个超链接进入到下一个页面,或者随机选择一个新页面重新开始搜索.反复执行以上过程直至到达页面i为止.与PageRank不同的是,在选择新页面重新开始搜索时,我们的方法不是完全随机地从所有页面中挑选,而是根据调整前后的链接权重选择,使得当搜索过程遇到作弊链接时,尽量减小沿该链接继续前行的概率,以此方式来抑制作弊链接对搜索过程产生的影响.超链接〈i,j〉的权重W(i,j)定义为从网页i经过一步随机游走到网页j的概率,犠可计算如下:其中,犃表示网络的邻接矩阵,λ表示由各网页出度(出链数量)构成的对角矩阵.令PR(i)表示网页i的权威值,定义为按照以上Page7过程搜索到网页i的概率.PR(i)可迭代计算如下:PR(i)=α∑k→i其中,α是阻尼系数,W(k,i)和NW(k,i)分别是调整前后链接〈k,i〉的权重,犱是种子向量,如果i是种子节点,则d(i)=1/|犱|,否则d(i)=0,N为网络中节点数.我们定义:即调整后的权值NW(k,i)在NW(k,j)中所占的比重(j=1,2,…,n).当D(k,i)=0时,〈k,i〉疑为作弊链接,此时pki被削弱为原来的50%,从而降低了k沿链接走到i的概率.令Epki=NW(k,i)该定义是本文算法思想的核心所在.我们注意到在真实网络中Pki1/N,也就是当〈k,i〉有作弊嫌疑的时候,通过式(7)第2部分让k以极小的概率走到i,反之,当〈k,i〉为正常链接时,通过式(7)第1部分让k以原有的概率随机游走到i.因此,Epki可认为是在同时考虑到〈k,i〉为正常链接和作弊链接两种情况下,k一步之内走到i的期望概率.进而将式(6)表达为如下形式:PR(i)=α∑k→i为了说明式(8)的特点,我们给出了如下传统的PageRank算法,其中pki=1/dk,dk为节点k的出度.PR(i)=α∑k→i对照式(8)和(9)可看出,本文算法在遇到作弊网页时能够降低其继续浏览的概率,同时不会影响其浏览正常网页,进而兼顾了寻找优质页面和抑制网页作弊的功能.2.5基于超链接来源分析的网页排名算法基于以上分析,算法3给出了基于超链接来源分析的网页排名算法Drank.算法3.Drank算法.输入:网络的节点集合V,边集合E,转移概率矩阵犠,输出:节点的权威性向量犘1.Drank1[统计k-近邻]2.APX_OUT_K(V,E,k.O).3.APX_IN_K(V,E,k.I).4.FORv∈VDO5.C(v,k)←O(v,k)BITWISE-ORI(v,k).6.Drank2[计算网页来源多样性]7.FORv∈VDO8.FORv∈VDO9.ove_amt←AMT(C(v,k)BITWISE-OR10.uni_amt←AMT(C(v,k)BITWISE-AND11.D(v,w)←1-ove_amt/uni_amt.12.Drank3[调整链接权值]13.FORv∈VDO14.FORv∈VANDu≠vDO//策略115.NW(v,u)←W(v,u)16.FORv∈VDO17.FORu1∈in(v,1)DO18.FORu2∈in(v,1)ANDu1≠u2DO//策略219.NW(u1,v)←NW(u1,v)20.NW(u2,v)←NW(u2,v)21.Drank4[计算权威值]22.π=SelectSeed()//用PageRank算法选种子23.犱=0N24.FORv∈πDO25.犱(v)=126.犱=犱/|犱|27.犘0←犱28.犜=犖犠29.WHILE犘t-犘t-1<εDO//迭代求解30.犘t+1←α·犜犘t+(1-α)·犱Drank算法整体分为4步:统计k-近邻,计算多样性,调整链接权值和计算权威性.Drank采用近似方法统计k-近邻和计算多样性,其时间复杂度分别为O(rm)和O(rn2),空间复度分别为O(m+rn)和O(rn),参见表1.链接权值调整策略1和策略2的时间复杂度分别为O(m)和O(mn),空间复杂度都为O(m).计算权威性的时间和空间复杂度分别为O(m)和O(n).综上,Drank算法整体的时间复杂度为O(n2),空间复杂度为O(m+n).Page83实验本节我们通过人工合成数据集和真实数据集分别对Drank算法的抑制作弊能力和寻找优质页面的有效性进行验证.并选择PageRank[4]、TrustRank[14]、DiffusionRank[19]、AIR[21]和TruncatedPR[6]算法进行对比.其中,PageRank是最经典的网页排名算法;其余4个算法是最近提出的基于链接分析的反作弊算法.TrustRank和DiffusionRank寻找优质页面的性能较好,而AIR对作弊网页的抑制能力较强,TruncatedPR[6]算法与本文算法所使用的数据集相同.3.1检验Drank算法抑制作弊的能力为了检验算法抑制网页作弊的效果,我们在两组人工合成网络上进行对比实验.实验选择PageRank、TrustRank、DiffusionRank和AIR算法进行对比.3.1.1实验数据和参数设置操纵子节点和链接交换作弊是目前最为常见的两种网页排名作弊手段.本实验使用的人工合成网络主要针对以上两种作弊类型来检测算法抑制作弊的性能.图5(b)中所示的作弊模式曾用于验证DiffusionRank算法和AIR算法的有效性,我们以此为基础,根据操纵子节点和链接交换作弊的结构特征,构造了其余5种作弊模式.图5给出操纵子节点作弊的4种模式,作弊复杂程度从模式1到模式4递增,节点1为目标节点,节点4为种子节点,链接农场为{P1,P2,P3,…,Pn},所构造链接总数为l,图6给出链接交换作弊的两种模式,节点1、7和8为目标节点,其链接农场分别为{P1,P2,P3,…,Pn},{Q1,Q2,Q3,…,Qn}和{R1,R2,R3,…,Rn},节点4为种子节点,l为链接农场所构造的链接总数,图6(a)中节点1与7彼此指向,图6(b)中节点1、7和8的链接关系为环形.实验中各对比算法参数均遵照参考文献设置.其中阻尼系数为0.85,导热系数为1,电导系数为0.5,考虑到计算时间和准确性的问题,TrustRank和DiffusionRank算法的迭代次数为100,TruncatedPR算法截距为4时抑制作弊能力最强.为了保证种子的有效性,并参考已有算法对阻尼系数的取值,Drank算法阻尼系数为0.85,为了保证本文算法对作弊的敏感性,并考虑链接农场以及实验网络的结构特征,Drank算法在人工合成小网络中k-近邻半径取值为2,在真实网络中k-近邻半径取值为3,具体设置如表2所示.PageRank[4]TruncatedPR[14]2阻尼系数:0.85TrsutRank[19]2阻尼系数:0.85,DiffusionRank[19]3AIR[21]Drank3.1.2实验结果和分析首先对第一种作弊类型的4种模式进行实验.子节点数量从0增至16,针对各算法,统计节点1的相对排名和相对得分随子节点数量增加的变化情况,其中,相对排名是指添加子节点之前与添加子节点之后目标节点排名的差值;相对得分是指添加子节点之前与添加子节点之后目标节点得分的比值,如图7所示,横轴表示添加子节点的数量,左侧图纵轴表示相对排名变化情况,右侧图纵轴表示相对得分变化情况.可以看到PageRank算法抵抗作弊的能力最弱,随子节点数量的增加,节点1的得分和排名都有很大提升.图7(h)显示PageRank中节点1得分有所下降,原因是模式4作弊节点间链接过于紧密,子节点占有较多得分.TrustRank和Page9DiffusionRank对作弊有一定抑制,节点的得分和排名提升程度都小于PageRank.DiffusionRank的抑制效果略优于TrustRank.AIR和Drank算法中作弊节点的排名和得分都没提升,显示了这两种算法抑制作弊的有效性.特别地,随着作弊节点数量的增图7操纵子节点作弊以下对第2种作弊类型的两种模式进行实验.实验考查节点1的相对排名和相对得分变化情况,如图8所示.实验结果与前一实验相似,在PageRank、加,Drank和AIR算法能够惩罚作弊节点,令其排名下降,但Drank更为敏感.另外,非作弊节点相对排名分别为4、5、2、3、6,节点4位居第1,节点5、2、3排名随子节点增加有所上升且相对位置不变,节点1因涉嫌作弊被抑制,导致节点6排名随之下降.TrustRank和DiffusionRank3种算法下,目标节点的相对得分和相对排名都随子节点增加而上升,但TrustRank和DiffusionRank的上升幅度小于Page10PageRank.与之前不同的是,在PageRank中节点1排名上升后有下降趋势,原因是其它作弊节点被排在了前面.AIR和Drank可以有效抑制作弊,目标图8链接交换作弊综合分析以上两组实验,可得如下结论:(1)PageRank抑制作弊的能力最弱.因为算法注重入链数量,作弊者可以轻易地通过作弊提升自己网页的排名.(2)TrustRank和DiffusionRank都能一定程度的抑制作弊,限制作弊节点的排名过快提升.两者通过和种子节点的关系判断页面的好坏,作弊者很难直接改变种子节点与自己网页的链接关系,因此作弊效果受到一定抑制.(3)AIR算法下作弊节点的排名趋于稳定或有一定量的下降,因为AIR算法中,一个节点加入子节点后需要降低自身的电位值以满足输出电流的增加.(4)Drank算法能很好地抑制作弊节点的得分和排名,并且随着作弊节点的增加不断降低其排名.因为作弊链接的权值被不断削弱,子节点无法将得分流向目标节点,目标节点间无法再累积得分,同时目标节点自身得分会通过对外链接不断流失,造成得分和排名的下降.3.2Drank算法综合能力的有效性验证本节采用真实网络数据对Drank、PageRank[4]、节点的得分和排名都在不断下降.从得分来看,子节点数量在0~5范围内下降的最快,说明Drank算法对作弊更敏感.TrustRank[14]、DiffusionRank[19]、AIR[21]和Truncated-PR[6]算法进行对比,进一步验证Drank算法的有效性.3.2.1实验数据和参数设置实验使用一个公开的数据集WEBSPAM-UK2006,由Yahoo实验室提供(参见http://barcelona.research.yahoo.net/webspam/datasets/uk2006/).该数据集作为基准数据,专门用于供测试和对比抑制垃圾网页排名算法的性能.该数据集中共有77862535个网页,2965197340条链接,包含11402个主机节点,其中志愿者已经在主机层面上将7473个站点标注为“nonspam”或“spam”,其中,“spam”节点的多样性主要分布在0到0.2之间(约为66%),而“nonspam”节点的多样性主要分布在0.2到0.6之间(约为67%).具体数据集信息如表3所示.Page11本节使用主机级别的网络进行实验,如果一个网站内有页面指向另一个网站内的页面,那么这两个网站主机之间有一条有向边.因为Drank、TrustRank、DiffusionRank和AIR算法需要种子集合,所以我们采用TrustRank和DiffusionRank算法中提到的方法来选取种子:用PageRank算法迭代20次,选择前100个(不包括spam)节点作为种子集合;之后,从剩余节点中选取前30%(不包括spam)作为权威节点;最后,将剩余的标注为“nonspam”的节点作为正常节点(normal).实验网络信息如表4所示.Drank算法中k-近邻半径k=3,其他各算法的参数设置与表1相同.3.2.2实验结果和分析在上述实验网络中分别运行了各算法.首先,对spam和权威节点在各算法中的分布进行统计.图9描述了以500为单位将前10000个节点按排名顺序图9spam节点在各区间的分布情况分成20个桶,柱高表示桶中spam节点的个数.从中可以看出,与PageRank算法相比,其它4个算法的前5个桶内作弊节点数(少于10)明显少于PageRank(大于300),作弊节点排名主要集中在后5个桶,说明这4个算法都有抑制作弊的功能.除Drank算法外,PageRank、TrustRank、DiffusionRank和AIR算法在第一个桶中均有作弊节点出现,其中,PageRank最多,说明Drank算法有较强的抑制作弊能力.图10描述了各算法中权威节点的分布情况.可以看出,大部分权威节点都集中在前5个桶内,其中TrustRank最多,Drank和DiffusionRank次之,AIR最少.说明AIR在抑制作弊的同时不能很好地兼顾对权威节点的排名.各算法前5个桶中权威节点和后5个桶中作弊节点的召回率和准确率如图11所示.其中,召回率指桶中包含的相关节点数与相关节点总数之比,准确率指桶中包含的相关节点数与桶中节点总数之比.可以看出,Drank和AIR算法对作弊节点的召回率和准确率较高,说明其对作弊节点的抑制效果较好,TrustRank对权威节点的召回率和准确率最高,Drank和DiffusionRank次之,说明其寻找权威节点的能力较强.Page12图10权威节点在各区间的分布情况图11各算法精度统计下面我们对作弊节点的受抑制程度进行统计分析.按PageRank算法的排名顺序选取1900个spam节点平均分到19个桶中,将各个桶中spam节点在PageRank算法中的平均排名分别与在Drank、TrustRank、DiffusionRank和AIR算法中的平均排名作差,结果如图12所示.图中横轴表示19个桶,纵轴表示平均排名的差值.可以看出,DiffusionRank对作弊的抑制程度最弱,TrustRank优于Diffusion-Rank,但不如AIR.Drank算法对作弊节点的抑制能力最强,并且排名越靠前的节点受抑制程度越强.该实验通过与TruncatedPR算法比较排名前10000节点中包含作弊节点和权威节点数量,进一步验证本文算法的综合能力.如图13(a)所示,Drank算法累积的作弊节点数明显少于TruncatedPR算法,图13(b)中排名前2500内Drank算法累积的权威节点数多于TruncatedPR算法,说明本文算法能够在推迟作弊节点排名的同时提升权威节点的排名.综合上面的实验结果,分析如下:(1)从spam排名分布来看.Drank算法对作弊现象有最好的抑制能力.用户通常只对排名靠前的网页感兴趣,除Drank算法外,PageRank、TrustRank、DiffusionRank和AIR算法在前500范围内均有作Page13图13排名前10000作弊节点和权威节点累积数量弊节点出现.(2)从权威节点分布来看.在前2500范围内Drank算法稍弱于TrustRank,优于DiffusionRnak和AIR算法.但在Drank算法中前1500名均为权威页面,这个数字远远超过用户所能关注的页面数量,仍然能够保证向用户提供优质的搜索服务.(3)从抑制作弊能力来看.Drank算法能够最大限度地将作弊节点排名向后推迟,如图12所示,第一个桶内的作弊节点平均被推迟了7500名以上.(4)综上,与其他算法相比,Drank算法在保证权威页面排名的同时还具有良好的抑制作弊性能.4结论本文的主要工作可总结如下:(1)提出了入链来源多样性是客观反映网页权威性一个重要特征的思想,认为真正的权威网页,不仅拥有大量入链,并且入链来源广泛,而期望通过作弊提升排名的网页往往不具备该特征.基于该思想,针对两种主要的链接作弊手段,提出两种链接权值调整策略.(2)借鉴社会网络中社交圈的概念,通过网页间的超链接为网页建立k-近邻集合,以k-近邻的重合度来定义网页来源的多样性.在适当步长下,该定义可以很好地区分网页是否属于同一来源.(3)因为精确计算多样性的时间复杂度高,处理大规模网络的时间开销通常无法接受,因此基于概率计数算法提出了近似计算网页来源多样性的方法,将时间和空间复杂度从精确计算的O(n3logn)和O(n2)分别降低至为O(n2)和O(n).(4)将PageRank中的一步随机游走概率改进为同时考虑正常和作弊两种情况下的期望转移概率,提出了改进的随机搜索模型.(5)基于以上思想提出了新的排名算法Drank.在人工合成网络和真实网络上进行的实验结果表明:与目前主要的同类算法相比,Drank算法在寻找权威网页和抑制作弊两方面均表现出很好的性能.与当前主要的网页排名算法相比,本文的算法能很好地兼顾排名和抑制作弊.但现有算法只能将作弊节点排在后面,而不能显示地识别出作弊节点.初步试验表明,我们的算法具有作弊节点识别的能力.为此,我们在今后的工作中将重点考虑如何扩展现有算法,使之能准确地识别和检测作弊网页,进一步加强对作弊的抑制力度,提高网页排名算法的性能.
