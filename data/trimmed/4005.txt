Page1基于空间聚类增强Lightcuts的光照计算王光伟1),2)谢国富1),2)王文成1)1)(中国科学院软件研究所计算机科学国家重点实验室北京100190)2)(中国科学院大学北京100049)摘要Lightcuts是面向多光源场景的高效绘制方法.它渐进地对光源进行聚类组织,并以二叉树进行管理,由此在绘制时可用一些光源聚类的代表光源(统称为‘光源割’)进行光照计算,以减少需要计算的光源数量.但是,当光源很多并分布复杂时,在二叉树结构中寻找光源割也要花费不少的计算.为此,有些方法提出利用绘制中的图像连贯性来减少光源割的搜寻计算,并取得了较好的效果.文中提出利用空间聚类来减少光源割的搜寻计算,即先根据位置和法向对场景中的几何位置进行聚类,为各个类的代表点寻找其光源割,以作为该类其它点搜索各自对应光源割的初始情况.实验表明,文中方法能很好地减少光源树中搜索光源割的计算,提高Lightcuts的光照计算效率,优于利用图像连贯性的加速方法,加速性能稳定,并且光源越多分布越复杂,加速效果越好.关键词光照计算;Lightcuts;空间聚类;多光源;真实感绘制1引言复杂光源下的真实感绘制一直是计算机图形学中的重要研究内容.一般地,复杂光源被离散成一些点光源,然后使用点光源的累积计算来进行绘制[1],但这种累积计算往往很费时.为提高绘制效率,Walter等提出对点光源进行聚类的处理方法[2],称为Lightcuts方法,即一个聚类中所有光源对某个几何位置的实际光能贡献,与使用该聚类的代表光源近似计算出的光能贡献相差不大时,就根据代表光源来计算该聚类对该位置的光能贡献.由此,可减少大量的光照计算.具体地,该方法是以二叉树的方式对光源进行层次化的组织,简称光源树(LightTree),以便能自适应地选择合适的光源聚类,提高绘制效率.对于一个几何位置而言,其对应的各个光源聚类在光源树中就形成了一条分割界线,统称为‘光源割’(Cut),如图1所示.绘制时,每个几何位置都需要从光源树的根结点开始搜索对应的光源割,因此,会在光源树中产生大量的搜索计算.由于场景中邻近的成像点(成像面发出的绘制光线与三维场景的交点)一般在光源树中有相似的光源割,如图1中黑色及灰色细线表示的光源割所示,许多方法提出利用这种连贯性来进一步提高绘制效率.目前,这方面的工作主要是基于图像空间的连贯性来处理的,即如果图像中某区域里邻近采样点的光照连贯性较强,则该区域中的许多像素点可以通过对邻近已进行了光照计算的像素点进行插值计算来获得其光照亮度[2];或者将这样的一个像素区域作为一个整体来搜索光源割,然后据此为其中的每个像素进行光照计算[3].但是,当场景比较复杂时,图像空间的连贯性会降低,因而会影响绘制效率的提高.本文提出一种利用场景三维空间连贯性的加速方法,以增强Lightcuts的光照计算效率,即根据几何位置和法向,对场景空间中与绘制光线相交的各成像点进行在线的逐步聚类,并为每个类动态地更新初始光源割,以作为初始位置来为该类中各成像点搜索其相应的光源割.这样,在处理复杂的光照计算时,可节省很多在光源树中的搜索计算.如图1所示,对于黑色及灰色区域中的点,如果其搜索不是从光源树的根结点开始,而是从粗线条所示的公共初始光源割开始,则可节省从根结点到初始光源割的搜索开销.实验表明:与Lightcuts算法相比,新算法搜索步数的节省效率可达48.29%~73.57%,绘制计算的加速比可达32.70%~49.15%;而与基于图像连贯性加速的类似方法[2-3]相比,新方法的加速比可达6.38%~50.00%,并且光源越复杂,加速效果越好.在处理各种复杂的场景和光源情况时,新算法的加速性能比较稳定.图1场景几何中相近成像点的光源割以及其初始光源割(图(a)为寺庙场景,图(b)为针对该场景的光源树,其中黑色及灰色的线分别对应图(b)中灰色区域及黑色区域成像点相应的光源割;灰色粗折线为该区域的初始光源割)2相关工作多光源复杂场景的高效绘制一直是图形学中一个很具挑战性的问题.如果对各光源的光照结果进行累积运算,则绘制时间通常是随着光源的数目呈线性增长的.为了加快绘制速度,一些算法[2,4-5]采用重要性采样或聚类的方式来减少需要处理的光源数目,以提高绘制速度.其中,Lightcuts算法[2]渐进地对光源进行层次化聚类组织,可为每个成像点自适应地生成光源割,以快速高质量地进行绘制,是当前流行的多光源绘制加速技术.在Lightcuts方法的基础上,有许多工作进行了进一步的发展.其中有一些工作对Lightcuts算Page3法进行了扩展,使其能支持多种高级绘制效果,如景深、透明等[6-7].而另外的一些工作主要针对绘制效率的提高.这些加速方法可分为以下3类.(1)基于可见性预计算的方法.Akerlund等人[8]首先提出在预计算光辐射传输技术(Precom-putedRadianceTransfer)中使用Lightcuts技术,可根据可见性预计算光源割,能以交互的速度绘制静态场景.文献[9]提出先分别根据可见性、几何材质和光源的位置来计算各自相关的光源割,然后再进行综合以获得各成像点对应的光源割,可以使用GPU进行并行计算以加速,并能得到高质量的光照结果.但这些方法需要存储大量预计算的可见性数据,不适合大规模场景的绘制.并且它们的绘制结果受限于预计算的准确性以及采样点的密度,难以进行自适应的动态处理.(2)增强光源割搜索质量的方法.文献[10]提出把BRDF重要性采样与Lightcuts方法结合在一起,根据采样的重要性在光源聚类中创建多个代表光源,以提高光源割搜索的质量,并加快绘制速度.文献[11]提出使用物体截面图来提高成像点到光源结点之间可见性的计算效率,以改进光源割的计算质量.但这两种算法都没有利用场景中成像点之间关于光源割搜索的共享性,可以和本文算法相结合,以进一步提高绘制效率.(3)利用图像空间的连贯性的方法.Lightcuts一文[2]中也提出了利用图像空间连贯性加速的算法ReconstructionLightcuts.该算法将成像面分成许多块,使得各个块内的像素具有很好的光照连贯性.于是,在各个像素块内可对大部分成像点使用简单的插值计算来获取它们的光照量.但该算法需要计算各像素块4个角上的光源割,并且需要为每个像素块建立一个局部光源树.当图像连贯性减少时,算法需要使用较密的块划分,会增加很多计算,降低加速效果.并且,该算法使用插值来计算光源对成像点的亮度贡献,容易丢失细节.CoherentLightcuts算法[3]提出对成像面进行逐步细分的划分,直至各个划分的子块中的像素相应的光源割具有很大的相似性,则以一个子块为一个整体在光源树中寻找其光源割,并根据该光源割为此子块中的各个像素进行光照计算.但该算法在成像面逐步细分的过程中要不断地在光源树中进行搜索计算,因此,当图像的连贯性不高时,该算法需要将成像面划分得很细,会降低加速效果.第4节的对比实验表明,当图像连贯性下降时,这些基于图像连贯性方法的加速效率下降,甚至还会慢于原来的Lightcuts方法;而本文的新算法加速性能稳定,能有效处理各种绘制情况.3算法思路3.1Lightcuts算法计算光源割的步骤Lightcuts算法在计算光源割时,自上而下逐步地遍历光源树中的子节点.如果一个结点的代表光源对成像点的亮度贡献的误差上限超过所设定的误差阈值,就继续分别考察它的两个子结点,直至在所有搜索路径上找到了满足要求的结点,这些结点就形成了一个光源割.根据韦伯定律[12],人可以感知到的亮度的最小变化大概是当前亮度的1%,而文献[2]的实验中,使用亮度的2%作为误差阈值就能得到较好的绘制结果,从而该算法使用如式(1)计算成像点x的误差阈值Ethre:其中,Cut为成像点x对应的光源割;Ck为光源割中的结点;LC(x)表示结点C对成像点x的亮度贡献,该算法使用C中代表光源j近似计算这一亮度贡献:其中,M为材质项;G为几何项;V为可见性项;I为光源亮度;∑i∈C积,可预先计算以备重复使用.使用式(2)的近似计算会引入误差(即此近似亮度贡献和实际亮度贡献的差值).为此,Lightcuts算法提出以M、G和V在该结点处的最大可能变化范围来计算这一误差的上限.由于可见性的最大变化范围是1,因此,该算法就将误差上限EC-upper的计算简化为其中,Mupper为材质项的上限;Gupper为几何项的上限.3.2基于空间聚类的光照计算在场景空间中,如果位置邻近的成像点的法向、材质和可见性信息较为相似,则它们相应的光源割也会比较类似.由此,它们在光源树中的许多搜索计算就可以共享来加速.为此,本文在绘制时对场景中的成像点进行聚类,并为每个类中的代表成像点计算其光源割作为初始光源割,并动态地对其进行更Page4新,然后该类中的其它成像点在搜索各自的光源割时,就以初始光源割作为起始位置,可减少在光源树中的大量搜索计算.这对于大规模复杂的光照计算是很有利的,因为此时的光源树一般会很大,计算光源割时的搜索也会比较多.为减少对成像点聚类的计算,本算法先用均匀网格剖分场景,然后对同网格单元内的成像点进行聚类.对于一个成像点而言,它先与所在网格单元内已有的聚类的代表成像点进行比较;如果它与一个代表点在材质、几何方面比较相似,它就归入该类;否则,它就自成一个新类,并作为此类的代表成像点.当然,如果一个成像点是所在网格单元的第一个成像点,它就是一个类的代表成像点.在我们实现的聚类计算中,如果一个成像点与一个代表成像点具有相同的材质,并且它们的法向的夹角小于10°,我们就将它们归于同一个类.图2中显示了一个场景中的成像点的聚类情况.图2寺庙场景中成像点的聚类分布图(这里,用黑线在计算一个类的代表成像点的光源割时,我们用式(1)计算该成像点的误差阈值,用式(3)计算所考察结点的误差上限,当一个结点相关的误差上限小于误差阈值时,该结点就归入光源割.之后,该类中的其它成像点就将以该光源割作为初始光源割来寻找它们各自的光源割,具体的搜索计算方法还是采用Lightcuts中的相应工作.此时,初始光源割中的结点,对于一个成像点而言,有3种情况:(1)正好合适,即该结点的父结点对该成像点的光照计算有太大的误差,而该结点的光照计算却能满足要求.(2)欠分割,即该结点对该成像点的光照计算有太大的误差,需要继续考察它的子光源结点.(3)过分割,即该结点的父结点甚至更高层的结点对该成像点的光照计算,能满足要求.此时,对于绘制质量来说影响很小,因为采用了更细致的光照计算;但计算的光源数量会增加,因而影响绘制速度.显然,(1)的情况是最理想的,(2)的情况可按照原始的Lightcuts算法继续搜索,也可节省一些搜索计算,而(3)的情况则需要尽可能避免,因为光照计算一般是比较复杂的,不利于加速计算.对此,我们将在各成像点寻找它的光源割时逐渐地优化初始光源割,将其中的结点逐步地向父结点甚至更高层的粗化结点进行移动,使得后续成像点在寻找它们的光源割时,能尽量减少‘过分割’现象的出现.我们所采用的措施如下:(1)根据可见性的变化来增大误差阈值,由此来调整初始光源割.根据代表点计算光源割时,我们保存搜索过的每一个光源结点的误差上限.只有当一个结点的误差上限大于误差阈值时,该结点的子结点才需要继续搜索.于是,我们可将误差阈值放大一些,就可将初始光源割的结点往粗化结点移动.为此,我们可根据可见性的变化来更新误差阈值.当初始光源割中的一个结点,对于代表点不可见而对于一个成像点可见时,我们就假设该结点对于代表点可见,并根据式(1)重新计算误差阈值.(2)优化误差上限的计算.根据式(3)计算一个光源结点对一个成像点的误差上限时,考虑了材质项的上限Mupper和几何项的上限Gupper.由于同一个类的成像点具有相同的材质和类似的法线方向,所以Mupper可以保持不变.但Gupper主要决定于成像点到光源结点所覆盖区域的距离及相对位置关系,其值可变小以使得初始光源割向粗化的光源结点移动.为此,根据成像点所在网格单元的8个顶点计算它们各自相对于各个光源结点的Gupper,然后从中取出最小者作为优化误差上限计算的G项.基于以上分析,算法使用如下公式来计算光源结点C的误差上限EC-upper:EC-upper(P)=Mupperx()pminxi∈GVGupperx()()i∑i∈C其中,GV为成像点所在网格的顶点的集合.4实验及讨论本文所有实验均在一台DellT3400微机上进行,该机装有一个双核2.33GHzIntelCoreE5650CPU,有2GB内存.因为算法是单线程的,实验中只使用了一个核.我们使用3个不同复杂度的场景来验证新算法的性能,及与一些已有工作进行Page5对比.这些场景及相关数据在图3及表1给出.我们在实验中取误差阈值为2%,每个成像点的光源割中的结点个数上限为1000.考虑到场景在观察过程中将从各个方向进行绘制,算法使用正方体三维网格划分场景,并以场景包围盒最长边上网格数确定分辨率.网格分辨率对于我们算法在场景三维空间连贯性的利用方面有较大的影响,我们通过许多实验发现,当这一值为40时对于我们的实验场景能得到较好的加速效果.因此,本文的实验都使用这一值来确定网格分辨率.除特殊说明外,每个场景的图像分辨率为640×480,每像素投射一根光线.场景面片寺庙154会议室5143大厅300716表2本文方法与原始方法绘制结果对比场景寺庙98.33195.6669.8100.33131.9452.6会议室281.63562.26290.7283.81323.93194.9大厅310.55620.10357.6312.72373.77258.3注:#:平均每个像素对应的光源割中的光源结点数目.:平均每个像素对应的在光源数中搜索的结点数目.…:平均每个像素的光源割中的过分割结点个数.-:新方法相比于原始Lightcuts方法在光源树中搜索步数的节省效率,以下面的公式计算:(c-d)/d,c和d分别指Lightcuts方法和新算法的搜索步数.绘制加速比:新方法相比于原始Lightcuts方法的加速率,以下面的公式计算:(a-b)/b,这里a和b分别指Lightcuts方法和新方法的绘制时间.新方法的绘制时间中包括空间聚类时间.光源的复杂程度对绘制效率的影响很大.为此,我们使用不同数目、不同类型的面光源,对大厅和会议室场景进行绘制测试,每个面光源都离散成一些点光源进行近似.本文使用光源数目与点光源方向的平均差异来度量光源的复杂程度.光源数量越多,点光源方向的平均差异越大,则光照计算越复杂.我们在实验中使用3种不同类型的面光源进行测试,它们的复杂度由低到高排序为:平面光源、柱面光图4不同光源复杂度下,新算法的加速效果(横轴表示场景中点光源的个数,纵轴表示新算法相对于Lightcuts算法的加速比)4.1加速效果绘制图3中实验场景的统计数据在表2中列出.实验表明,新算法可很好地加速,加速率可达32.70%~49.15%,并且平均每个像素的过分割结点一般不多于3个,相比于它们的光源割中的结点数目是很小的.这说明,新方法计算出的光源割与Lightcuts方法的实际光源割很接近,即新算法的初始光源割能很好地反映各像素的实际光源割的情况,节省关于光源割的搜索计算.正如3.2节中所讨论的,过分割对于光照质量的影响不大,不会导致视觉上的不连贯性.源和球面光源.实验结果如图4所示:当光源数目增加时,算法加速效果呈波动上升的趋势;在光源数目相同的情况下,使用较复杂的光源时,算法的加速效果较好.综上可知,光源情况越复杂,新算法的加速效果就越好.这是因为,在复杂光源情况下,遮挡情况和法向分布情况,对光源割的搜索效率有很大的影响;而新算法对此进行了高效的处理.Page64.2与基于图像连贯性的加速算法的比较除了与Lightcuts算法进行比较外,我们还与利用图像空间连贯性进行加速的算法进行比较,包括ReconstructionLightcuts算法[2]和CoherenceLightcuts算法[3].为了比较不同复杂度场景下3种算法对连贯性的利用程度,实验中绘制了由近及远时的一系列图像,如图5所示.图5实验所使用的场景(按镜头的近及远排序)实验用场景中所有可见的三角形面片的面积之和与它们的投影面积之和的比来度量图象的连贯性,该比值越大,则图象的连贯性越小,即单位面积内场景的复杂度越高.实验结果如图6所示,当场景在投影面上投影变小时,3种算法的搜索步骤的节省效率都会有所下降.但本文算法的加速性能比较稳定,下降幅度不大,而其它两种算法都有较大幅度的下降,甚至没有加速效果.与CoherenceLightcuts算法相比,虽然它的搜索步骤的节省效率比本文算图63种算法相对于Lightcuts的加速效果的比较(面积比为场景中所有可见的三角形面片的面积之和与它们的投影面积之和的比)法的高,但该算法只能节省搜索计算,而不能节省亮度贡献的计算,所以其加速效果不及新算法.而与ReconstructionLightcuts算法相比,它的搜索步骤的节省效率有时会高过新算法,但它需要为每个像素块创建一个光源树,耗时较多.而新算法仅需对代表成像点的光源割进行调整,需时较少,所以新算法的加速比相对较高.由上可知,新算法的加速效果比较稳定,便于对场景进行各种远近的绘制.5结语本文基于空间聚类来利用场景的连贯性,能很好地减少Lightcuts方法使用时的光源割的搜索计算,提高绘制效率,即先为成像点的每一个类的代表点计算一个光源割,再以此作为该类中其它成像点搜索其光源割的起始位置,可共享利用很多光源结点的搜索计算.实验表明,本文提出的新算法可有效提高绘制速度,并且光源情况越复杂,场景越大,则加速效果越好.与基于图象连贯性的方法相比,新算法的加速性能更好,并且针对不同远近的绘制的加速情况更稳定,一般不会出现减速的情况.总之,新算法提高了Lightcuts方法的计算效率,特别适合处理大规模复杂的光照计算.致谢ThomasDeBodt提供了开源代码,在此表示感谢!
