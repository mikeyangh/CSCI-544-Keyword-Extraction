Page1基于遗传算法求解折扣{0-1}背包问题的研究贺毅朝1)王熙照2)李文斌3)张新禄4)陈嶷瑛1)1)(石家庄经济学院信息工程学院石家庄050031)2)(深圳大学计算机与软件学院广东深圳518060)3)(石家庄经济学院网络与信息安全实验室石家庄050031)4)(河北师范大学数学与信息科学学院石家庄050024)摘要目前,求解折扣{0-1}背包问题(D{0-1}KP)的主要算法是基于动态规划的具有伪多项式时间的确定性算法,当D{0-1}KP实例中各项的价值系数与重量系数在大范围内取值时缺乏实用性.文中基于杰出者保留策略遗传算法(EGA)求解D{0-1}KP,首先建立了D{0-1}KP的两个新的数学模型;然后,为了利用EGA和第一数学模型求解D{0-1}KP,提出了一种处理非正常编码个体的贪心修复与优化算法GROA,并将其与EGA相结合给出了求解D{0-1}KP的第一遗传算法FirEGA;紧接着,利用EGA和第二数学模型求解D{0-1}KP,提出了处理非正常编码个体的另一种有效算法NROA,并将其与EGA相结合给出了求解D{0-1}KP的第二遗传算法SecEGA;最后,利用四类大规模D{0-1}KP实例,确定了FirEGA和SecEGA的交叉概率与变异概率的合理取值,比较了两个算法的实际求解性能.对四类实例的计算结果表明:FirEGA和SecEGA都非常适于求解大规模的难D{0-1}KP实例,均能够得到一个近似比非常接近于1的近似解,并且FirEGA的平均求解性能比SecEGA的更优.关键词折扣{0-1}背包问题;遗传算法;非正常编码个体;贪心策略;修复与优化1引言背包问题(Knapsackproblem,KP)[1-2]是计算机科学中的一个重要的NP-Complete问题,也是一个经典的组合优化问题,在投资决策与资源分配等方面具有重要的应用背景[3-4].0-1背包问题(0-1KnapsackProblem,0-1KP)[5]是最基本的KP问题,它的一般描述为:从n个具有价值系数与重量系数的物品(或项)中,选择若干个装入一个具有载重限制的背包,如何选择才能使装入物品的重量系数之和在不超过背包载重前提下价值系数之和达到最大?KP问题有许多扩展形式,如有界背包问题(BoundedKnapsackProblem,BKP)、无界背包问题(UnboundedKnapsackProblem,UKP)、多维背包问题(MultidimensionalKnapsackProblem,MKP)、多选择背包问题(Multiple-ChoiceKnapsackProblem,MCKP)和二次背包问题(QuadraticKnap-sackProblem,QKP)等[6-7],这些扩展形式大多已得到了广泛的研究与应用.近年来,许多新颖的KP问题被相继提出,如随机背包问题(StochasticKnapsackProblem,SKP)[8-9]、动态背包问题(DynamicKnapsackProblem,DKP)[10-13]、具有单连续变量的0-1背包问题(0-1KnapsackProblemwithasingleContinuousvariable,KPC)[14-15]和折扣{0-1}背包问题(Discounted{0-1}KnapsackProblem,D{0-1}KP)[16-17]等,并取得了一些研究成果,例如Lin等人[8]深入研究了SKP中所涉及的交换策略与动态定价问题;Dizdar等人[9]研究了SKP在税收最大化中的应用问题;Goldberg和Smith[10]提出了背包载重在两个固定值之间振荡变化的DKP———时变背包问题(Time-VaryingKnapsackProblems,TVKP),并且利用二倍体遗传算法(GeneticAlgorithms,GA)求解TVKP问题;Hadad和Lewis等人[11-12]利用多倍体GA求解TVKP问题,并比较了几种多倍体方法求解TVKP的优劣;He等人[13]将TVKP推广为随机时变背包问题(RandomizedTime-VaryingKnapsackProblems,RTVKP),并分别利用动态规划法、贪心算法和GA求解RTVKP问题;Marchand和Wolsey[14]首先提出了KPC问题,并分析了它的若干性质;Lin等人[15]则给出了求解KPC问题的确定性算法;Guldan[16]首先提出了D{0-1}KP问题,并给出了求解它的动态规划法;Rong等人[17]研究了D{0-1}KP的核(Core)问题,并基于动态规划与核相结合求解D{0-1}KP.对于D{0-1}KP问题,基于动态规划的确定性算法[16-17]是伪多项式时间的,当问题规模较大并且各项的价值系数与重量系数在较大范围内取值时,会导致算法耗费大量的求解时间而变得不实用,因此探讨如何利用进化算法(Evolutionaryalgorithms,EAs)快速求解D{0-1}KP是一个值得研究的问题.本文利用遗传算法求解D{0-1}KP问题,在第2节中,介绍D{0-1}KP的定义和第一数学模型,然后建立它的两个新数学模型.在第3节简单介绍具有杰出者保留策略遗传算法(EGA)[18-19]的原理,给出算法伪代码描述.在第4节中,首先指出个体采用0-1向量编码方法时导致非正常编码个体(即编码不对应问题可行解的个体)的概率至少为1-(1/2)n,然后基于贪心策略提出一种处理这种个体的修复与优化算法,并将它应用于EGA给出求解D{0-1}KP问题的第一遗传算法(记为FirEGA).在第5节中,针对个体采用整型向量的编码方法,首先给出一种新的变异算子,接着基于贪心策略提出一种新的修复与优化算法,然后将它们应用于EGA给出求解Page3D{0-1}KP问题的第二遗传算法(记为SecEGA).在第6节中,首先根据四类D{0-1}KP实例的计算结果确定了FirEGA和SecEGA的交叉概率与变异概率的合理取值,然后通过对四类大规模D{0-1}KP实例的计算比较FirEGA和SecEGA的求解性能,计算结果表明:FirEGA和SecEGA均适于求解大规模的难D{0-1}KP实例,从获得最好结果的能力来看它们的性能基本相当,从平均求解结果来看FirEGA的性能比SecEGA更胜一筹.最后,总结全文并展望今后进一步的研究方向.2D{0-1}KP的定义与数学模型D{0-1}KP问题[16-17]中的“打折”思想源于商业领域,通常打折是商家进行促销的一种强有力的手段.例如,某商店对于商品A或商品B进行促销,如果顾客同时购买商品A和B则可以享受一个打折优惠.假设商品A和商品B的售价分别是30元和50元,商品A和B被同时购买的售价为70元.显然,顾客可以有四种选择:只购买商品A,只购买商品B,同时购买商品A与B,或者商品A与B均不购买.D{0-1}KP准确地反映了现实生活中的实际问题,能够更好地为项目决策、投资和预算控制等领域提供合理的理论模型.下面先给出D{0-1}KP问题的定义和已有数学模型,然后建立它的两个新的数学模型.定义1[17].给定n个均含有3个项(或物品)的项集,项集i(0in-1)中含有的3个项分别记为3i,3i+1,3i+2,其中前两个项3i和3i+1具有的价值系数分别为p3i和p3i+1,具有的重量系数分别为w3i和w3i+1;前两个项合并在一起构成第3个项3i+2,它具有的价值系数为p3i+2=p3i+p3i+1,具有的折扣重量系数为w3i+2,满足w3i+2<w3i+w3i+1并且w3i<w3i+2,w3i+1<w3i+2.对于每个项集i(0in-1),项3i,3i+1,3i+2中至多有一个可以被选择装入背包中.如何选择各项装入背包使得装入背包的所有项的重量系数之和在不超过背包载重C的前提下价值系数之和达到最大?记D{0-1}KP的规模为项的个数3n,则规模为3n的D{0-1}KP实例由价值系数集P={{p3i,p3i+1,p3i+2}|0in-1}、重量系数集W={{w3i,w3i+1,w3i+2}|0in-1}和背包载重C构成.不失一般性,设pj,wj(0j3n-1)和C均为正整数,并且w3i+2C(0in-1),∑n-1此,Guldan[16]给出了D{0-1}KP的第一数学模型,其描述如下:maxf(X)=max∑n-1subjecttox3i+x3i+1+x3i+21,i=0,1,…,n-1(2)∑n-1i=0x3i,x3i+1,x3i+2∈{0,1},i=0,1,…,n-1(4)其中,二元变量xj(0j3n-1)表示项j是否被装入背包中,即xj=1表示项j被装入了背包中,xj=0表示项j没有被装入背包.显然,任意的0-1向量犡=[x0,x1,…,x3n-1]∈{0,1}3n仅仅表示D{0-1}KP的一个潜在解,只有当它同时满足了约束条件(2)和(3)时才是一个可行解.根据定义1,下面我们建立D{0-1}KP的第二、第三数学模型.设犡=[x0,x1,…,xn-1]∈{0,1,2,3}n为一个n维整型向量,则D{0-1}KP的第二数学模型定义如下:其中,x为顶函数,整型变量xi(0in-1)表示项集i中是否存在项被装入了背包中,xi=0表示项集i中没有项被装入背包,xi=1表示项3i被装入了背包中,xi=2表示项3i+1被装入了背包中,xi=3表示项3i+2被装入了背包中.同样地,任意整型向量犡=[x0,x1,…,xn-1]∈{0,1,2,3}n仅仅表示D{0-1}KP的一个潜在解,只有当它满足了约束条件(6)时才是一个可行解.此外,我们还可以建立D{0-1}KP的第三数学模型.设U={k|0k3n-1且k是整数},SU且S≠,则D{0-1}KP的第三数学模型定义如下:其中,x为底函数;集合S是由装入背包中各项的下标构成,即项j被装入背包中当且仅当j∈S.显Page4然,任意满足SU且S≠的集合S只是D{0-1}KP的一个潜在解,只有它同时满足约束条件(9)与(10)时才是一个可行解.3遗传算法遗传算法(GeneticAlgorithms,GA)[19-25]是Holland教授于1975年借鉴生物进化规律提出的一种进化算法,其主要特点是不需要计算目标函数的导数和梯度,也不要求目标函数具有连续性,并且算法具有内在的隐含并行性和全局寻优能力[23-24].目前,GA已被广泛应用于数值优化、组合优化、机器学习、图像识别、神经网络和模糊控制等众多领域[20-25].Rudolph[18]指出标准GA不具有全局收敛性,但是在GA中引入杰出者保留策略以后则具有了全局渐进收敛性.在本文下面的论述中,所涉及到的遗传算法均是指杰出者保留策略遗传算法(EGA).遗传算法利用交叉算子(Crossoveroperator)、变异算子(Mutationoperator)和选择算子(Selectionoperator)等3类遗传算子实现进化操作,常见的交叉算子有单点交叉、两点交叉和多点交叉,常用的变异算子为基本变异算子和逆转算子,而选择算子一般是按照适应度比例法进行选择.有关遗传算子的详细介绍和实现请参考文献[21-24],限于篇幅不再赘述.下面以求解最大约束优化问题maxf(X),X∈{0,1}d(d为问题的规模或维数)为例,给出个体采用二进制向量编码,并利用单点交叉算子、基本变异算子和适应度比例法实现的EGA原理与算法伪代码描述.记犘(t)={Xi(t)|1iN}为EGA的第t(t0)代种群,Xi(t)=[xi1(t),xi2(t),…,xid(t)]∈{0,1}d为犘(t)中的第i个个体,N为种群规模,d为问题的维数.令fit(Xi(t))表示个体Xi(t)的适应度,B(t)=[b1(t),b2(t),…,bd(t)]∈{0,1}d为第t次迭代进化后产生的杰出者.EGA在第t+1次迭代进化时,首先将单点交叉算子作用于犘(t)中个体产生一个临时种群犘1(t)={Yi(t)=[yi1(t),yi2(t),…,yid(t)]∈{0,1}d|1iN};然后将基本变异算子作用于犘1(t)中个体产生第2个临时种群犘2(t)={Zi(t)=[zi1(t),zi2(t),…,zid(t)]∈{0,1}d|1iN};接着,计算犘2(t)中个体Zi(t)(1iN)的适应度fit(Zi(t)),并根据适应度的大小在犘2(t)∪{B(t)}中确定B(t+1);最后,利用选择算子按照适应度比例法从犘2(t)中选择个体构成新一代种群犘(t+1).分别记“犘1(t)←CROperator(犘(t),pc)”、“犘2(t)←MUOperator(犘1(t),pm)”和“犘(t+1)←SEOperator(犘2(t))”表示上述3类遗传算子的实现过程,其中pc为交叉概率,pm为变异概率,记MaxIt为算法的迭代进化次数,则EGA的算法伪代码描述如算法1.算法1.EGA.输入:maxf(X),X∈{0,1}d的实例数据,参数N,pc,输出:近似解(或最优解)B(t)及其目标函数值f(B(t))1.Generateinitialpopulation犘(0)={Xi(0)|1i2.Computefitnessfit(Xi(0))ofindividualXi(0)3.DetermineB(0)byfit(Xi(0))(1iN)in犘(0);4.t←0;5.WHILE(tMaxIt)6.犘1(t)←CROperator(犘(t),pc);7.犘2(t)←MUOperator(犘1(t),pm);8.Computefitnessfit(Zi(t))ofZi(t)∈犘2(t),9.DetermineB(t+1)byfit(Zi(t))in犘2(t)∪{B(t)};10.犘(t+1)←SEOperator(犘2(t));11.t←t+1;12.ENDWHILE13.RETURN(B(t),f(B(t))).在EGA中,步1、6和7的时间复杂度均为O(dN),步3和9的时间复杂度均为O(N),步10的时间复杂度为O(N2);不妨记O(T)为计算个体适应度的时间复杂度,则步2和8的时间复杂度均为N×O(T);因此EGA的算法时间复杂度为O(dN)+N×O(T)+O(N)+MaxIt×[2O(dN)+N×O(T)+O(N)+O(N2)]=O(MaxIt×N×(d+T+N)).注意到N和MaxIt通常都是关于d的线性函数,当T为d的多项式函数时,EGA是一个具有多项式时间复杂度的进化算法.4求解D{0-1}KP的第一遗传算法在利用EAs求解问题时,选择数学模型的关键在于个体的编码表示与模型中的可行解(或潜在解)是否一致以及EAs的进化算子是否适用、有效且易Page5于实现.由于基本GA中个体编码是二进制向量,因此EGA适合利用第一数学模型进行求解.对于第二数学模型,为了利用EGA进行求解,个体编码必须为{0,1,2,3}n上的整型向量,并且还需给出适用于这种编码的有效变异算子.在第三数学模型中,问题的潜在解是一个基数不固定的集合S,这将导致个体的编码长度不固定,不利于交叉算子和变异算子的实现.为此,本文主要基于第一、二数学模型研究如何利用EGA求解D{0-1}KP问题.4.1个体的二进制编码与适应度在基于第一数学模型利用EGA求解D{0-1}KP问题时,个体犡的编码为一个二进制向量犡=[x0,x1,…,x3n-1]∈{0,1}3n,其中当xj=1(0j3n-1)时表示项j被装入背包,当xj=0时表示项j没有被装入背包.这种编码方法虽然简单易行,便于EGA的交叉算子和变异算子的实现,但是也存在一个明显的缺点,即产生非正常编码个体的概率很高.事实上,下述结论表明当个体采用二进制向量编码时几乎所有个体均为非正常编码个体.定理1.当个体犡采用二进制向量编码时,犡为非正常编码个体的概率不小于1-(1/2)n.证明.令犡=[x0,x1,…,x3n-1]∈{0,1}3n为一个随机产生的个体,其分量x3i,x3i+1,x3i+2(0in-1)的取值组合有8种情形:000,001,010,011,100,101,110和111,因此x3i,x3i+1,x3i+2中至多有一个值是1的概率为1/2,故个体犡不满足约束条件(2)的概率为1-(1/2)n.此外,即使个体犡满足了约束条件(2),它也不一定满足约束条件(3),因此个体犡不满足约束条件(2)或(3)的概率至少为1-(1/2)n.注意到EGA的初始种群是随机产生的,交叉算子与变异算子均具有随机性,所产生的个体自然也是随机的.故当个体犡采用3n维二进制向量编码时,犡为非正常编码个体的概率不小于1-(1/2)n.显然,如果EGA中存在大量非正常编码个体,必将导致算法的求解效率极低;此外,当EGA的所有个体均为正常编码个体时,利用目标函数值f(X)=∑n-1体犡的适应度来比较个体之间的优劣是非常方便的.因此,将EGA中的非正常编码个体转化为正常编码个体,不仅可以提高算法的求解效率,还可以使用f(犡)作为个体的适应度,可谓一举两得.4.2基于贪心策略的修复与优化法在利用EAs求解约束优化问题时,处理非正常编码个体的常见方法有罚函数法(Penaltyfunctionapproach)、修复法(Repairapproach)、纯正法(Puristapproach)和分离法(Separatistapproach)[26,27],各种方法均有利弊,而且不具有通用性.Michalewicz[28]在利用EGA求解0-1KP问题时分别采用基于贪心策略[5,7]的修复法和罚函数法处理非正常编码个体,并指出贪心修复法比罚函数法处理非正常编码个体的效果更好.贺毅朝等人[13,29]在贪心修复的基础上引入优化处理,提出了消除非正常编码个体的贪心修复与优化法,进一步提升了EGA求解0-1KP和RTVKP的性能.事实上,罚函数法是根据个体违反约束条件的程度,利用一个适当的惩罚项对目标函数进行“惩罚”,其本质是给出个体适应度测度的一种相对合理的定义方法,并不能改善个体的编码质量,自然也不会减少非正常编码个体的数量,当算法中存在大量非正常编码个体时不宜使用此方法.由定理1易知:当EGA的个体采用二进制向量编码时,几乎所有个体均为非正常编码个体,因此罚函数法是不适用的.为此,下面借鉴文献[13,29]中的设计思路,基于贪心策略提出一种处理非正常编码个体的贪心修复与优化算法(记为GROA).设犘={{p3i,p3i+1,p3i+2}|0in-1}为D{0-1}KP的价值系数集,犠={{w3i,w3i+1,w3i+2}|0in-1}为重量系数集,C为背包载重.将3n个项根据价值系数密度(即pj/wj,0j3n-1)由大到小进行排序,并按照排序后的顺序将各项的下标存入数组H[0…3n-1]中.令Flag[0…n-1]为一个布尔数组,用于标识各项集的状态,即当Flag[j]=1时表示项集j(0jn-1)中恰有一项被装入背包,当Flag[j]=0时表示项集j中没有项被装入背包.设犡=[x0,x1,…,x3n-1]∈{0,1}3n为任一个体,犢=[y0,y1,…,y3n-1]∈{0,1}3n为一个二进制向量,则GROA的伪代码描述如算法2.算法2.GROA.输入:个体犡=[x0,x1,…,x3n-1]和数组H[0…3n-1]输出:二元向量犢=[y0,y1,…,y3n-1]和f(犢)的值1.FORi←0TO3n-1DOyi←0;2.FORi←0TOn-1DOFlag[i]←0;3.fweight←0;fvalue←0;i←0;4.WHILE(fweight<C∧i3n-1)5.IF(xH[i]=1)∧(fweight+wH[i]C)Page66.7.8.ENDIF9.i←i+1;10.ENDWHILE11.FORi←0TO3n-1DO12.IF(fweight+wH[i]C)∧13.14.15.ENDIF16.ENDFOR17.FORi←0TO3n-1DOfvalue←fvalue+yi×pi;18.RETURN(Y,fvalue).当输入的犡为非正常编码个体时,GROA首先利用步4~10将其修复为正常编码个体,并存储于犢中,然后再利用步11~16对犢做进一步的优化.在步17中所计算的fvalue为个体犢的适应度f(犢).当输入的犡为正常编码个体时,GROA实质上仅是对其进行优化处理.显然,GROA的算法时间复杂度为O(n).4.3求解D{0-1}KP的第一遗传算法由上述分析可知:在基于第一数学模型利用EGA求解D{0-1}KP问题时,如果使用GROA对每一代种群中的每一个个体进行修复与优化,既能够保证算法中不存在非正常编码个体,又可利用f(X)=∑n-1(x3ip3i+x3i+1p3i+1+x3i+2p3i+2)作为个体犡的i=0适应度.由此,下面利用GROA处理非正常编码个体,利用单点交叉算子、变异算子和适应度比例法等3个遗传算子实现进化操作,给出求解D{0-1}KP的第一遗传算法(记为FirEGA).记“H[0…3n-1]←犙狌犻犮犽犛狅狉狋({pj/wj|pj∈犘,wj∈犠,0j3n-1})”表示3n个项按照pj/wj(0j3n-1)由大到小的顺序排序后将各项下标依次存入数组H[0…3n-1]中,设MaxIt为迭代进化次数,则FirEGA的算法伪代码描述如算法3.算法3.FirEGA.输入:犘={{p3i,p3i+1,p3i+2}|0in-1},犆,犠=输出:近似解(或最优解)B(t)及其目标函数值f(B(t))1.H[0…3n-1]←犙狌犻犮犽犛狅狉狋({pj/wj|pj∈犘,wj∈2.Generateinitialpopulation犘(0)={Xi(0)|1i3.FORi←1TONDO4.(Xi(0),f(Xi(0)))←GROA(Xi(0),5.ENDFOR6.DetermineB(0)byf(Xi(0))(1iN)in犘(0);7.WHILE(tMaxIt)8.犘1(t)←CROperator(犘(t),pc);9.犘2(t)←MUOperator(犘1(t),pm)10.FORi←1TONDO11.(Zi(t),f(Zi(t)))←GROA(Zi(t),12.ENDFOR13.DetermineB(t+1)byf(Zi(t))in犘2(t)∪14.犘(t+1)←SEOperator(犘2(t))15.t←t+1;16.ENDWHILE17.RETURN(B(t),f(B(t))).在FirEGA中,步1可以利用快速排序算法(QuickSort)[5,7]实现,其时间复杂度为O(nlogn);显然,步2与步3~5的时间复杂度均为O(Nn),步6的时间复杂度为O(N);在步7~16中,步8、9和步10~12的时间复杂度均为O(Nn),步13的时间复杂度为O(N),步14的时间复杂度为O(N2);注意到N和MaxIt是关于n的线性函数,故FirEGA的时间复杂度为O(nlogn)+2O(Nn)+O(N)+MaxIt×(3O(Nn)+O(N)+O(N2))=O(n3),FirEGA是一个复杂度为多项式时间的进化算法.5求解D{0-1}KP的第二遗传算法在本节中,基于第二数学模型利用EGA求解D{0-1}KP问题,首先分析个体采用{0,1,2,3}n上整型向量编码的优缺点,并给出一种适用于整型向量编码的新变异算子;然后借鉴GROA的算法设计思想,提出一种适用于这种编码方法的新贪心修复与优化算法(记为NROA),并利用EGA与NROA相结合给出求解D{0-1}KP问题的第二遗传算法(记为SecEGA).5.1个体的整型编码与变异算子在利用EGA和第二数学模型求解D{0-1}KP问题时,由于个体犡采用{0,1,2,3}n上的整型向量进行编码,即犡=[x0,x1,…,xn-1]∈{0,1,2,3}n,只要犡满足式(6)即为问题的一个可行解,因此容易检验个体是否为非正常编码个体.但是,这种编码Page7方法也存在两点不足:其一是不可避免地产生非正常编码个体;其二是EGA的基本变异算子对于这种编码方法不再适用.下面针对整型向量编码方法,首先给出一种新的变异算子,并证明此编码方法的一个性质,然后提出一种处理非正常编码个体的新算法.注意到个体犡=[x0,x1,…,xn-1]∈{0,1,2,3}n中分量有4种可能的取值,借鉴EGA基本变异算子的设计思想,基于等概率随机变异原则提出一种适用于{0,1,2,3}n上整型向量编码的变异算子(ModifiedMutationOperator,MMOperator).设犘={Xi|Xi∈{0,1,2,3}n,1iN}为算法的当前种群,其规模为N,犡i=[xi0,xi1,…,xi,n-1]∈{0,1,2,3}n为犘中第i(1iN)个个体.记rand[0,1]为区间[0,1]上的一个随机实数,rand(S)表示从集合S中随机选择一个元素,pm为变异概率,则MMOperator的伪代码由下述过程描述.过程1.MMOperator.输入:种群犘={Xi|Xi∈{0,1,2,3}n,1iN}和变输出:对犘中每一个体进行变异操作后产生的新种群1.FORi←1TONDO2.FORj←0TOn-1DO3.IF(rand[0,1]<pm)THENxij←rand({0,1,2,4.ENDFOR5.ENDFOR6.RETURN(犘).显然,MMOperator将种群犘的第i个个体Xi中的任一分量xij(0jn-1)以概率pm随机变异为{0,1,2,3}-{xij}中的任一个元素,其算法时间复杂度为O(Nn).事实上,当个体采用{0,1,2,3}n上的n维整型向量进行编码时具有以下性质.定理2.当个体犡=[x0,x1,…,xn-1]中每一维分量以等概率随机取{0,1,2,3}中的值时,犡所对应的潜在解使得欲装入背包中项的重量系数之和犠(犡)几乎总是满足犠(犡)>1证明.不妨设S0={i|xi=0,xi∈犡},S1={i|xi=1,xi∈犡},S2={i|xi=2,xi∈犡},S3={i|xi=3,xi∈犡},则在等概率的条件下|S0|=|S1|=|S2|=|S3|.于是,当xi(0in-1)以等概率随机取{0,1,2,3}中的值时几乎总有∑i∈S1w3i+1=1∑i∈S2犠(犡)=∑i∈S1w3i+2)+1这样,当个体采用{0,1,2,3}n上的n维整型向量编码时,对于背包载重满足C<1D{0-1}KP实例,几乎总有犠(犡)>C,从而算法随机产生的个体几乎均为非正常编码个体,显然不宜利用罚函数法进行处理.为此,下面提出一种适用于{0,1,2,3}n上整型向量编码个体的贪心修复与优化算法(NROA)来处理非正常编码个体.5.2整型向量的贪心修复与优化法类似于GROA的算法设计思路,在NROA中,如果输入个体犡是非正常编码个体,首先将其修复为正常编码个体,然后再对修复后的结果做进一步的优化,并计算修复与优化后犡对应的目标函数值作为其适应度.如果犡是正常编码个体,则仅对犡进行优化与计算其适应度.令集合犘、集合犠、整数C及数组H[0…3n-1]与4.2节中相同,并设犡=[x0,x1,…,xn-1]∈{0,1,2,3}n表示个体的n维整型向量编码,H[i](mod3)表示对H[i]进行模3取余运算,则NROA的算法伪代码描述如算法4.算法4.NROA.输入:个体犡=[x0,x1,…,xn-1]和数组H[0…3n-1]输出:修复与优化后的犡=[x0,x1,…,xn-1]及其适应1.fweight←0;fvalue←0;2.FORi←0TO3n-1DO3.k←H[i]/3;r←H[i](mod3);4.IF(xk=r+1)∧(fweight+wH[i]C)THEN5.fweight←fweight+wH[i];6.ELSEIF(xk=r+1)∧(fweight+wH[i]>C)7.ENDIF8.ENDFOR9.FORi←0TO3n-1DO10.k←H[i]/3;r←H[i](mod3);11.IF(xk=0)∧(fweight+wH[i]C)THEN12.fweight←fweight+wH[i];13.fvalue←fvalue+pH[i];xk←r+1;14.ENDIFPage8i=015.ENDFOR16.RETURN(X,fvalue).在NROA中,步2~8的作用是将非正常编码个体犡=[x0,x1,…,xn-1]修复为正常编码个体,并将修复后的犡作为可行解计算装入背包的项的价值系数之和与重量系数之和;当个体犡为正常编码个体时,仅计算犡对应的项的价值系数之和与重量系数之和.在步9~15中,NROA对个体犡做进一步的优化处理,以提高其编码质量;此外,在步16输出的fvalue是修复与优化后个体犡的适应度f(犡)=max∑n-1复杂度也为O(n).5.3求解D{0-1}KP的第二遗传算法在SecEGA中,所使用的3类遗传算子分别为两点交叉算子、变异算子MMOperator和基于适应度比例法的选择算子.SecEGA的算法实现流程与FirEGA基本相同,即首先随机生成初始种群犘(0),利用NROA对犘(0)中所有个体进行修复与优化,并确定B(0).在SecEGA的第t+1(t0)次迭代进化中,首先由两点交叉算子作用于犘(t)产生犘1(t),再由变异算子MMOperator作用于犘1(t)产生犘2(t);然后利用NROA对犘2(t)中所有个体进行修复与优化,并在犘2(t)∪{B(t)}中确定B(t+1);最后,利用适应度比例法由犘2(t)产生犘(t+1).反复进行迭代操作,直到满足迭代终止条件为止,输出B(t)和f(B(t))并结束算法.不妨记“犘1(t)←TROperator(犘(t),pc)”和“犘2(t)←MMOperator(犘1(t),pm)”分别表示两点交叉算子和变异算子的实现过程,仍然记“H[0…3n-1]←犙狌犻犮犽犛狅狉狋({pj/wj|pj∈犘,wj∈犠,0j3n-1})”表示3n个项按照pj/wj(0j3n-1)由大到小的顺序排序后将其下标依次存入数组H[0…3n-1]中,记MaxIt为算法的迭代进化次数,则SecEGA的算法伪代码描述如算法5.算法5.SecEGA.输入:犘={{p3i,p3i+1,p3i+2}|0in-1},C,犠=输出:近似解(或最优解)B(t)及其目标函数值f(B(t))1.H[0…3n-1]←犙狌犻犮犽犛狅狉狋({pj/wj|pj∈犘,wj∈2.Generateinitialpopulation犘(0)={Xi(0)|1iN}3.FORi←1TONDO4.(Xi(0),f(Xi(0)))←NROA(Xi(0),5.ENDFOR6.DetermineB(0)byf(Xi(0))(1iN)in犘(0);7.WHILE(tMaxIt)8.犘1(t)←TROperator(犘(t),pc);9.犘2(t)←MMOperator(犘1(t),pm);10.FORi←1TONDO11.(Zi(t),f(Zi(t)))←NROA(Zi(t),12.ENDFOR13.DetermineB(t+1)byf(Zi(t))in犘2(t)∪{B(t)};14.犘(t+1)←SEOperator(犘2(t))15.t←t+1;16.ENDWHILE17.RETURN(B(t),f(B(t))).在SecEGA中,由于犙狌犻犮犽犛狅狉狋的时间复杂度为O(nlogn),NROA的时间复杂度为O(n),两点交叉算子和改进变异算子的时间复杂度均为O(nN),选择算子的时间复杂度为O(N2),类似于FirEGA的分析易知:SecEGA的时间复杂度也为O(n3),即它也是一个复杂度为多项式时间的进化算法.虽然SecEGA与FirEGA的算法时间复杂度均为O(n3),但是由于SecEGA的个体编码长度仅为FirEGA的1/3,在实现3类遗传算子时其速度更快,所以对于同一个D{0-1}KP实例,在相同的迭代次数下SecEGA比FirEGA所耗费的时间更少.6实例计算与比较在本节中,首先给出了四类D{0-1}KP实例———不相关D{0-1}KP实例(UncorrelatedinstancesofD{0-1}KP,UDKP)、弱相关D{0-1}KP实例(WeaklycorrelatedinstancesofD{0-1}KP,WDKP)、强相关D{0-1}KP实例(StronglycorrelatedinstancesofD{0-1}KP,SDKP)和逆向强相关D{0-1}KP实例(InversestronglycorrelatedinstancesofD{0-1}KP,IDKP)[17,30]的参数设置,并据此对每一类分别随机生成10个不同规模的实例;然后,利用若干实例的计算结果所对应的箱线图(Boxplot)分析并确定FirEGA和SecEGA的交叉概率pc和变异概率pm的合理取值;最后,利用对四类大规模D{0-1}KP实例的各种计算结果比较FirEGA和SecEGA的求解性能.Page9本文所使用微型计算机为AcerAspireE1-570G笔记本,硬件配置为Intel(R)Core(TM)i5-3337uCPU-1.8GHz,4GBDDR3内存(3.82GB可用),操作系统为MicrosoftWindows8.利用C++语言进行编程,编译环境为VisualC++6.0,并利用MATLAB7.10.0.499(R2010a)绘制箱线图.6.1四类D{0-1}KP实例四类D{0-1}KP实例的规模分别为3003n3000,实例编号和参数设置如下所述(具体数据请参考下面网址中pdf文档①或邮件索取Word文档).(1)UDKP实例.实例编号为UDKP1~10,参数设置为w3i∈R[2,1000],w3i+1∈R[2,1000],且w3i<w3i+1,w3i+2∈R[w3i+1+1,w3i+w3i+1-1],p3i∈R[1,1000],p3i+1∈R[1,1000],且p3i<p3i+1,p3i+2=p3i+p3i+1.(2)WDKP实例.实例编号为WDKP1~10,参数设置为w3i∈R[101,1000],w3i+1∈R[101,1000],w3i<w3i+1,w3i+2∈R[w3i+1+1,w3i+w3i+1-1],p3i∈R[w3i-100,w3i+100],p3i+1∈R[w3i+1-100,w3i+1+100],且p3i<p3i+1,p3i+2=p3i+p3i+1.(3)SDKP实例.实例编号为SDKP1~10,参数设置为w3i∈R[2,1000],w3i+1∈R[2,1000],且w3i<w3i+1,w3i+2∈R[w3i+1+1,w3i+w3i+1-1],p3i=w3i+100,p3i+1=w3i+1+100,p3i+2=p3i+p3i+1.(4)IDKP实例.实例编号为IDKP1~10,参数设置为p3i∈R[2,1000],p3i+1∈R[2,1000],p3i<p3i+1且p3i+2=p3i+p3i+1,w3i=p3i+100,w3i+1=从图1~图4可以看出:对于实例UDKP3,当pm=1.0时FirEGA的求解效果最优;而对于实例WDKP3、SDKP3和IDKP3,当pm=0.01时FirEGA不仅求解效果很好,而且算法的稳定性极佳.此外,从图中还容易看出pc的取值变化确实对FirEGA的求解效果影响不大.这样,在利用FirEGA求解UDKP类实例时,设置pc=0.5或0.8且pm=1.0是合理的选择;而对于WDKP类、SDKP类和IDKP类实例,设置pc=0.5或0.8且pm=0.01是合理的选择.表1FirEGA中参数狆犮和狆犿构成的42种组合形式(狆犮,狆犿)及其序号idid(pc,pm)id(pc,pm)id(pc,pm)id(pc,pm)id(pc,pm)id(pc,pm)1(0.2,0.0)8(0.2,0.4)15(0.5,0.0)22(0.5,0.4)29(0.8,0.0)36(0.8,0.4)2(0.2,0.01)9(0.2,0.5)16(0.5,0.01)23(0.5,0.5)30(0.8,0.01)37(0.8,0.5)3(0.2,0.03)10(0.2,0.6)17(0.5,0.03)24(0.5,0.6)31(0.8,0.03)38(0.8,0.6)4(0.2,0.05)11(0.2,0.7)18(0.5,0.05)25(0.5,0.7)32(0.8,0.05)39(0.8,0.7)5(0.2,0.1)12(0.2,0.8)19(0.5,0.1)26(0.5,0.8)33(0.8,0.1)40(0.8,0.8)6(0.2,0.2)13(0.2,0.9)20(0.5,0.2)27(0.5,0.9)34(0.8,0.2)41(0.8,0.9)7(0.2,0.3)14(0.2,1.0)21(0.5,0.3)28(0.5,1.0)35(0.8,0.3)42(0.8,1.0)由于EGA是一类对参数敏感的进化算法,对不同类型的问题甚至同一类型问题的不同实例类,其参数的选取往往会出现差异,所以FirEGA求解其中,x∈R[A,B]表示x是随机取自区间[A,B]p3i+1+100,w3i+2∈R[w3i+1+1,w3i+w3i+1-1].上的整数;实例的背包载重取为C=α∑n-1是[0.45,0.75]上的一个随机实数.6.2确定FirEGA中狆犿和狆犮的合理取值在FirEGA中,正常编码个体的二进制编码中“0”的个数至少是“1”的个数的2倍,显然交叉算子对于改变个体的这种结构形式作用不大.但为了能够获得更优秀的个体,FirEGA必须打破个体的这种结构形式,因此只能借助于变异算子来实现这一突破.据此我们推断:在FirEGA中变异概率pm的取值变化对算法的求解性能将起到关键的作用,而交叉概率pc对算法的影响并不会太大.为了验证以上推断,下面分别利用四类D{0-1}KP实例对pc和pm的每一种组合形式进行计算,以确定pc和pm的合理取值.限于篇幅,下面仅给出规模3n=900的实例UDKP3、WDKP3、SDKP3和IDKP3的计算结果及其所对应的箱线图.对pc分别取值0.2,0.5和0.8,对pm分别取值0.0,0.01,0.03,0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,共构成42种不同的组合形式(pc,pm),给每种组合形式赋予一个序号id,并将它们在表1中列出.对于每一种组合形式(pc,pm),利用FirEGA对实例UDKP3、WDKP3、SDKP3和IDKP3分别独立计算30次,所得到的30个最好值的统计结果分布情况由图1~图4中的箱线图给出.①UDKP:http://wenku.baidu.com/view/35a54e7503d8ce2-Page10图1在42种组合形式下FirEGA求解UDKP3的性能比较图2在42种组合形式下FirEGA求解WDKP3的性能比较图3在42种组合形式下FirEGA求解SDKP3的性能比较图4在42种组合形式下FirEGA求解IDKP3的性能比较Page11UDKP类时变异概率pm的取值与其它实例类不同是正常的,这是由UDKP类实例的价值系数与重量系数在取值区间[A,B]上是随机均匀分布导致的.6.3确定SecEGA中狆犿和狆犮的合理取值在SecEGAD中,无论是两点交叉算子,还是新的变异算子,既可能使新产生的个体变得更好,也可能变得更差,无法判断它们能否改善个体的质量,因此无法推断交叉概率pc和变异概率pm对算法求解性能的影响.为此,下面分别利用四类D{0-1}KP实例对pc和pm的每一种组合形式进行计算,以确定它们的合理取值.限于篇幅,下面仅给出实例UDKP3、WDKP3、SDKP3和IDKP3的计算结果及其所对应的箱线图.对pm分别取值0.0,0.01,0.05,0.2,0.5和表2SecEGA的参数狆犿和狆犮构成的42种组合形式(狆犿,狆犮)及其序号idid(pm,pc)id(pm,pc)id(pm,pc)id(pm,pc)id(pm,pc)id(pm,pc)1(0.0,0.1)8(0.01,0.1)15(0.05,0.1)22(0.2,0.1)29(0.5,0.1)36(0.8,0.1)2(0.0,0.3)9(0.01,0.3)16(0.05,0.3)23(0.2,0.3)30(0.5,0.3)37(0.8,0.3)3(0.0,0.5)10(0.01,0.5)17(0.05,0.5)24(0.2,0.5)31(0.5,0.5)38(0.8,0.5)4(0.0,0.7)11(0.01,0.7)18(0.05,0.7)25(0.2,0.7)32(0.5,0.7)39(0.8,0.7)5(0.0,0.8)12(0.01,0.8)19(0.05,0.8)26(0.2,0.8)33(0.5,0.8)40(0.8,0.8)6(0.0,0.9)13(0.01,0.9)20(0.05,0.9)27(0.2,0.9)34(0.5,0.9)41(0.8,0.9)7(0.0,1.0)14(0.01,1.0)21(0.05,1.0)28(0.2,1.0)35(0.5,1.0)42(0.8,1.0)图5在42种组合形式下SecEGA求解UDKP3的性能比较图6在42种组合形式下SecEGA求解WDKP3的性能比较0.8,对pc分别取值0.1,0.3,0.5,0.7,0.8,0.9和1.0,共构成42种不同的组合形式(pm,pc),其序号仍用id表示,并在表2中列出所有的组合形式及其序号id.对于每一种组合形式(pm,pc),利用SecEGA对实例UDKP3、WDKP3、SDKP3和IDKP3分别独立计算30次,所有30个最好值的统计结果分布情况由图5~图8中的箱线图给出.从图5~图8的箱线图分布情况可以看出:对于四类D{0-1}KP实例,当pm=0.01时SecEGA的求解效果普遍较好;对于固定的pm=0.01,当pc=0.8或1.0时算法的求解效果相对更优.由此可知,在利用SecEGA求解各类D{0-1}KP实例时,设置交叉概率pc=0.8或1.0,变异概率pm=0.01是比较合理的.Page12图7在42种组合形式下SecEGA求解SDKP3的性能比较图8在42种组合形式下SecEGA求解IDKP3的性能比较6.4计算结果比较与分析在利用FirEGA求解四类D{0-1}KP实例时,对于UDKP类实例,设置pc=0.8且pm=1.0;对于WDKP类、SDKP类和IDKP类实例,设置pc=0.8且pm=0.01.在利用SecEGA求解四类D{0-1}KP实例时,设置pc=0.8且pm=0.01.除此以外,在所有的计算中,两个算法的种群规模均设置为50,迭代次数均等于实例的规模(即3n).利用FirEGA和SecEGA求解四类D{0-1}KP实例的计算结果见表3~表6,其中Opt为由动态规划法(记为DPDKP)计算出的实例最优值;Best、Worst和Mean分别为FirEGA和SecEGA在30次独立计算中得到的所有结果的最好值、最差值及所有结果的数学期望;Opt/表3FirEGA与SecEGA求解D{0-1}KP实例UDKP1~10的结果比较算法结果BestOpt/BestMeanOpt/MeanWorstOpt/WorstTime2UDKP185740801011.070379325.31.0809784991.09220.1511779741.099676808.31.1163756241.13380.1323UDKP21637441529691.0704151045.21.08411497321.09360.58021480421.1061146310.51.11921441131.13620.5323UDKP32693932442911.1028241061.21.11752391141.12661.35162304851.1688225232.41.19612221181.21281.1584UDKP43475993196801.0873316503.41.09823131411.11002.40683063581.1346301700.81.15212990591.16232.1230UDKP54426444039081.0959399525.21.10793969371.11513.92283756191.1784371688.81.19093684451.20143.3147UDKP65365784833501.1101478779.51.12074745581.13075.53364472311.1998442556.41.21254387621.22294.7106UDKP76358605646561.1261559815.41.13585557631.14417.66095311921.1970523809.21.21395175791.22856.2522UDKP86502065902371.1016584264.31.11295802581.12059.95905609321.1592555100.71.17135455091.19198.5761UDKP97185326523541.1014646592.21.11136429651.117512.63066194441.1599615990.41.16656090771.179710.8808UDKP107794607087441.0998703947.81.10737007021.112415.47846892481.1309684872.41.13816627421.176113.4265Best、Opt/Worst和Opt/Mean分别表示以上各值的近似比[5,7];Time1和Time2分别表示FirEGA和SecEGA对于每个D{0-1}KP实例30次独立计算的平均耗费时间(单位:s).从表3可以看出:FirEGA求解UDKP实例所得最好值的近似比基本保持在1.10左右,平均值和最差值的近似比均不超过1.1441;SecEGA求解UDKP实例所得最好值和平均值的近似比基本保持在1.20左右,即使最差值的近似比也不超过1.2285.从表4可以看出:FirEGA求解WDKP实例所得到的最好值的近似比不超过1.0094,平均值的近似比不超过1.0131,最差值的近似比不超过1.0282;SecEGA求解WDKP实例所得最好值的近Page13表4FirEGA与SecEGA求解D{0-1}KP实例WDKP1~10的结果比较算法结果BestOpt/BestMeanOpt/MeanWorstOpt/WorstTime2WDKP183098827221.004582539.61.0068824541.00780.1474826641.005381118.31.0244802841.03510.1307WDKP21382151377121.0037137225.81.00721369831.00900.56201377121.0037135951.31.01671344901.02770.5620WDKP32566162542341.0094253294.41.01312529091.01471.32142543151.0090247826.21.03552364441.08531.2244WDKP43156573141071.0049312343.11.01063106651.01612.30643142271.0046308628.91.02282936971.07482.2345WDKP54284904267831.0040424384.21.00974215841.01643.59914267831.0040421415.11.01683916331.09413.4382WDKP64660504638701.0047460750.41.01154552011.02385.32184634351.0056461779.81.00924467411.04325.0059WDKP75476835440591.0067541505.31.01145355511.02277.63375447761.0053537821.21.01835010941.09306.5758WDKP85769595742011.0048571594.91.00945651191.02109.78135748621.0036567507.71.01675272041.09448.8046WDKP96506606470121.0056644298.21.00996392411.017912.55216484021.0035643444.61.01125890181.104711.3073WDKP106789676773591.0024673776.01.00776603321.028215.77076771181.0027672912.31.00906103431.112414.3101表5FirEGA与SecEGA求解D{0-1}KP实例SDKP1~10的结果比较算法结果BestOpt/BestMeanOpt/MeanWorstOpt/WorstTime2SDKP194459933161.012293192.81.0136930641.01500.1495930091.015691684.01.0303902561.04660.1307SDKP21608051591161.0106158936.71.01181587981.01260.58441591071.0107156557.31.02711542411.04260.5266SDKP32382482353721.0122235204.41.01292350151.01381.30942354741.0118231287.41.03012248721.05951.1709SDKP43400273363691.0109335844.71.01253355241.01342.33863365971.0102330437.41.02903186381.06712.1225SDKP54630334511841.0263447335.91.03514442521.04233.51634447481.0411435933.31.06224159231.11333.2387SDKP64660974592361.0149458746.11.01604584271.01675.25704585091.0165453973.91.02674302861.08324.7950SDKP76204466072001.0218602797.71.02936004961.03327.29515986481.0364592672.41.04695714691.08576.1576SDKP86706976611041.0145659844.61.01646591201.01769.89296624651.0124653459.81.02646106641.09838.1947SDKP97391217284431.0147727364.51.01627268721.016912.83557300361.0124726324.11.01766716231.100510.7512SDKP107653177551891.0134752931.01.01657498791.020615.52677566621.0114750716.41.01946975201.097213.6472表6FirEGA与SecEGA求解D{0-1}KP实例IDKP1~10的结果比较算法结果BestOpt/BestMeanOpt/MeanWorstOpt/WorstTime2IDKP170106701061.000070078.01.0004700221.00120.1406701011.000170010.41.0014699471.00230.1391IDKP21182681180341.0020117544.31.00621172491.00870.53651182321.0003116921.71.01151153841.02500.6063IDKP32348042345081.0013233896.31.00392334471.00591.25272346981.0005228166.11.02912186211.07401.2584IDKP42825912818041.0028280536.61.00732781791.01592.23392824841.0004273731.21.03242594851.08902.2860IDKP53355843350681.0015332180.21.01023286611.02113.56913355801.00001331886.11.01113099641.08273.5616IDKP64524634514981.0021449781.01.00604464561.01355.09664520161.0010447358.41.01144125391.09684.9877IDKP74891494876751.0030484305.81.01004754761.02886.86664888401.0006483569.71.01154459991.09676.8920IDKP85338415318721.0037529372.81.00845244041.01808.94635336861.0002531844.81.00385085601.04979.8470IDKP95281445254601.0051522243.51.01135014281.053311.21575279421.0004523597.81.00874767601.107811.8425IDKP105812445788971.0041575128.51.01065517721.053413.76945809101.0006572178.71.01585202551.117214.9866由表3~表6还可以看出:SecEGA的求解速度似比不超过1.009,平均值的近似比不超过1.0355,最差值的近似比不超过1.1124.从表5可以看出:明显比FirEGA快,而且它求得各实例的最好结果FirEGA求解SDKP实例所得到的最好值的近似比与FirEGA不相上下,对于某些实例甚至比FirEGA均不超过1.0263,平均值的近似比不超过1.0351,得到的最好结果更优;但是,从平均求解性能来看,最差值的近似比也均不超过1.0423;SecEGA求解SecEGA的求解效果却明显不如FirEGA更优.SDKP实例所得最好值的近似比不超过1.0411,平均值的近似比不超过1.0622,最差值的近似比也不超过1.1133.从表6可以看出:FirEGA求解IDKP实例所得最好值的近似比不超过1.0051,平均值的近似比不超过1.0113,最差值的近似比不超过1.0534;SecEGA求解各IDKP实例所得到的最好值的近似比不超过1.001,平均值的近似比不超过1.0324,最差值的近似比不超过1.1172.令F(t)=1法在第i次独立计算某实例的第t次迭代进化后所得杰出者对应的函数值,当t在区间[0,MaxIt]上均匀取值时(包括0和MaxIt),连接各坐标点(t,F(t))所构成的曲线即为算法求解各实例的平均收敛曲线,其中MaxIt为算法的迭代进化次数.为了更直观地比较FirEGA和SecEGA的平均Page14Page15求解性能,在图9~图16给出它们30次独立计算实例UDKP3、UDKP5、WDKP3、WDKP5、SDKP3、SDKP5、IDKP3和IDKP5的平均收敛曲线.由图9~图16可以看出:FirEGA的平均收敛速度非常快,基本上在不超过0.2×MaxIt的迭代次数内即可获得极好的结果;SecEGA的平均收敛速度明显比FirEGA的慢,其平均收敛曲线呈现出一种缓慢上升的态势,并且它的平均求解结果也明显比FirEGA的差.事实上,由于基于动态规划的确定性算法是伪多项式时间的,当D{0-1}KP实例的规模较大且各项的价值系数和重量系数均在较大范围(例如[A,B]=[101,1018])内取值时,需要耗费大量的求解时间而缺乏实用性.但是这些因素对于FirEGA和SecEGA是没有实质性影响,因为可以对D{0-1}KP实例中各项的价值系数、重量系数和背包载重同时乘以一个很小的系数ε(0<ε<1),从而得到一个与原实例具有相同最优解(最优值相差1/ε倍)的新D{0-1}KP实例,利用FirEGA或SecEGA求解这个新实例即可.因此,虽然FirEGA和SecEGA不一定能够求得D{0-1}KP问题的最优解,但是对于规模大且各项价值系数和重量系数均在大范围内随机取值的难D{0-1}KP实例,能够快速求得一个近似比接近于1的近似解,这恰好符合实际应用中更注重算法的求解速度,而对于求解结果只要是一个具有满意近似比的近似解即可的要求,所以FirEGA和SecEGA均为适于求解D{0-1}KP问题的有效且实用的进化算法.基于对四类D{0-1}KP实例的计算、比较和分析可以得出以下结论:对于项的价值系数和重量系数均在大范围内随机取值的四类D{0-1}KP实例,FirEGA和SecEGA均能够快速求得一个近似比接近于1的近似解,因此是适于求解大规模难D{0-1}KP实例的有效且实用的进化算法.此外,从算法求得的最好结果来看,FirEGA和SecEGA的求解能力基本相当;从算法的平均求解性能来看,FirEGA的求解效果明显优于SecEGA.7结束语本文研究如何利用遗传算法求解D{0-1}KP问题,在提出该问题的两个新数学模型的基础上,个体分别采用0-1向量和整型向量的编码方法,给出了求解D{0-1}KP的两个进化算法FirEGA和SecEGA,并针对非正常编码个体,分别基于贪心策略给出了两个有效的处理算法;通过对四类大规模D{0-1}KP实例的计算结果比较与分析表明:FirEGA和SecEGA均不受实例中各项的价值系数、重量系数和背包载重的大小影响,对于大规模的难D{0-1}KP实例,能够快速求得一个近似比接近于1的近似解,因此均为求解大规模难D{0-1}KP实例的实用进化算法.由于D{0-1}KP提出的时间较短,其研究结果还相对较少,且已有确定性算法不适于求解大规模的难D{0-1}KP实例,因此设计求解D{0-1}KP的高效进化算法是一个值得深入研究的问题.此外,如何基于D{0-1}KP的第三数学模型设计有效的进化算法也是一个值得探讨的问题.今后将对以上两问题做进一步的探讨与研究,以获得求解D{0-1}KP的具有更好近似比的进化算法.致谢审稿人提出了宝贵意见,对提高论文水平有很大的帮助;编辑付出了辛勤工作.在此一并致谢!
