Page1硬实时系统在强分区约束下的双层分区调度李昕颖顾健何锋熊华钢(北京航空航天大学电子信息工程学院北京100191)摘要文中研究了硬实时系统在强分区约束下的双层分区的调度问题,合理建立了强分区约束下的双层分区调度模型,给出了最坏情况下的分区任务集可调度的判定条件.同时,在此基础上,提出了与分区利用率匹配的分区设计方法,导出了该方法下的系统可调度利用率的最小上限.仿真实验表明,在严格实时的条件下,文中提出的方法相对于现有方法更具优越性,并提高了分区可调度利用率的最小上限.关键词实时系统;强分区约束;分区调度;可调度利用率;分区设计1引言在综合化实时系统中,各种应用软件共享计算资源、网络资源,为了防止错误在关键级别不同的应Page2系统的容错能力.综合模块化的航空电子系统软件标准———ARINC653标准中提出了双层分区的调度策略[1],由此带来两个问题:(1)给定分区参数,如何在严格实时的约束条件下,对分区任务的可调度性进行分析;(2)给定分区任务,分区的设计直接影响系统的实时特性.如何合理地设计分区,使分区中的任务都满足实时性要求,又提供尽可能大的处理器利用率.这是两个重要的理论和工程问题.商用领域中的多数研究工作侧重于最小化任务的平均响应时间、最小化任务的截止期错过率等平均统计特性方面的研究[2].但是在航空电子等硬实时系统中,强调每个任务必须在截止时限内完成,满足实时性,否则可能带来灾难性后果.硬实时系统与一般的系统相比,具有不同的特性,因此研究方法有较大不同.文献[3-4]讨论了基于服务器思想的分层EDF调度方法,但是对于具有大量周期任务的航空电子等硬实时系统来说,是不合适的[5].针对区间层采用RM的分层分区调度,主要有两种方法来分析系统的可调度性.一种是采用CPU利用率的分析方法,还有一种是利用时间需求函数的分析方法.文献[6-8]都采用了时间需求函数的方法提出任务可调度性条件,但是这些文献中的分层分区调度模型都不满足强分区约束条件,也就是分区隔离且固定周期的约束条件,并且推导得到的可调度判定条件时间复杂度很高,缺少鲁棒性.文献[9]利用了CPU利用率的分析方法,给出了区间层采用RM调度,分区所有任务可调度利用率的最小上限,但要求分区的周期必须是分区中所有任务周期的最大公约数或最大公约数的约数,约束条件使其实际应用受到很大限制.文献[10]运用以上两种方法对可调度性做了研究,但是得到的可调度利用率比较低.对于分区设计的研究,文献[7,11]提出的方法以时间需求函数推出的可调度性条件为基础,时间复杂度高.文献[12]提出的方法有效地避免了时间需求函数的复杂性,采用均衡型和耗尽型的方法来进行分区设计,但不能完全保证系统的实时性.本文根据以上不足,建立了满足强分区约束条件的双层分区调度模型.在给定分区参数条件下,推导了最坏情况下的分区任务集严格实时条件,并提出了与分区利用率匹配的分区设计方法,导出了该方法下系统可调度利用率上限.通过仿真进行了比较和验证.2基本概念2.1分层调度模型双层分区调度模型如图1所示,操作系统层根据ARINC653标准,采用轮转调度的方式激活每一个分区.在区间层,根据分区内定义的调度策略进行任务调度.每一个分区内部的任务只能在当前分区处于激活状态才有可能被执行,从而使得模块中各分区相互独立[13].本文区间层采用RM(RateMonotonic)调度算法,它的定时行为比动态优先级算法调度的系统具有更好的预知性,更满足硬实时系统可预测性的要求.2.2任务模型假设有n个实时任务,分别用τ1,τ2,…,τn表示,它们组成一个任务集合Γ,即Γ={τ1,τ2,…,τn}.任务特征定义如下:(1)任务最坏情形执行时间Ci:表示第i个任务在最坏情况下无中断执行所需的处理器时间.(2)任务的周期Ti:表示第i个任务的产生周期.对于非周期任务,则表示任务产生的最小时间间隔.(3)任务的截止期限等于任务的周期,即Di=Ti.(4)任务之间相互独立(不存在因共享资源而导致阻塞).根据以上定义,任务由一个二维数组表述:任务τi的利用率定义为任务集τ1,τ2,…,τn的利用率为2.3分区调度模型假定分区PΩ由NΩ个任务组成,可表示为ΓΩ={τΩi(Ci,Ti),i=1,2,…,NΩ}.其中τΩi的下标表示Page3第Ω个分区中的第i个任务.分区调度模型如图2所示.在系统层,采用周期性的轮转调度激活分区PΩ,我们定义系统的轮转周期时长为TRL.在每一个轮转周期内,TΩ表示分区PΩ的执行时间,在其余TRL-TΩ时间段内,分区PΩ处于阻塞状态.2.4相关定义定义1.在一个调度中,若某任务集中的所有任务的实时约束条件都满足,则称在此调度策略下,该任务集是可调度的.定义2.在某调度策略下,只要系统利用率不大于U,就能保证系统中所有任务都是可调度的,U称为可调度利用率的上限.Ubound表示最坏情况下可调度利用率的上限,即为可调度利用率的最小上限.定义3.分区内的任务只能在激活的分区窗口内运行,分区周期性地被激活,当某个处于激活状态的分区中没有任务处于就绪状态,即使其它分区有任务处于就绪状态,也不能跨越分区的边界在当前空闲的分区内执行,在时间和空间上对任务进行这种分区隔离,称为系统的强分区约束条件.定义4.αΩ表示分区PΩ的执行能力,即每一次轮转周期内分区PΩ的执行时间与轮转周期时长之比,αΩ=TΩ/TRL.根据αΩ的定义可知若系统有m个分区,则系统可调度约束条件为3分区的可调度利用率分析3.1两个分区的简单情况为了阐述思想,我们首先以两个分区的简单情况为例.考虑分区P1和P2,执行能力分别为α1、α2,分区所包括的硬实时任务分别为τ1、τ2.假定C1、T1、T2都已经确定了,现在考虑τ1、τ2满足截止时限的要求时,C2能取的最大值.其中分区P1对分区P2的影响,可以看成是由一周期任务τ0对P2的抢占而形成.任务τ0的周期为TRL,执行时间为TRL(1-α2).设R=T2/TRL1,分两种情况讨论:(1)kTRLT2kTRL+TRL(1-α2),此时C2最大为k(TRL-TRL(1-α2))=kα2TRL,分区P2的任务利用率U2=C2/T2=k(TRL-TRL(1-α2))kRk+(1-α2).U2是关于R的单调递减函数.(2)kTRL+TRL(1-α2)T2(k+1)TRL,此时C2最大为T2-(k+1)TRL(1-α2),分区P2的任务利用率U2=C2/T2=1-(k+1)TRL(1-α2)(k+1)(1-α2)R,k+(1-α2)Rk+1.U2是关于R的单调递增函数.显然,在两种情况的交界点上U2取最小值,即R=k+(1-α2)时,U2=kα2k+(1-α2),对于k=1,2,…,U2的最小值为α22-α2.α12-α1.3.2两个分区的复杂情况分区P1和P2分别包括硬实时任务集Γ1={τ1,τ2,…,τk}和Γ2={τ1,τ2,…,τn},执行能力分别为α1、α2,其中分区P1对分区P2的影响,可以看成是由一周期任务τ0={TRL(1-α2),TRL}对P2的抢占而形成的.不失一般性,假定任务按T1<T2<T3<…<Tn排列,则T0<T1<T2<T3<…<Tn,Liu和Layland[14]证明了最难调度的系统发生在所有任务同时开始,并且Ci,Ti满足式(6)和式(7):同理,分区P1的任务利用率U1的最小值为Ci=Ti+1-Ti,0in-1,Cn=2T0-Tn(7)此时,分区P2的任务利用率U=T2-T1T1+…Tn-Tn-1Tn-1+2T0-TnTn定义Ri=Ti+1/Ti,式(8)可化为U=∑n-1Page4当R1=R2…=Rn-1=R时,式(9)等号成立取最小值U=(n-1)R+2UR=(n-1)-(n-1)21+U()0即R=2U0=(1-α2),分区P2的任务总利用率取得最小值,即可调度利用率的最小上界同理分区P1的任务可调度利用率的最小上界为Ubound=k23.3一般情况定理1.处理器系统有m个分区,每个分区Pi上执行ni个任务,分区执行能力为αi,分区的任务总利用率Ui满足则分区可调度.证明.考虑某一个分区Pi,其它(m-1)个分区对本分区的阻塞,都可以看作是一周期任务τ0={TRL(1-αi),TRL}对分区Pi中任务的抢占形成的.因此根据式(10),直接得出定理1的结论.证毕.4分区设计4.1分区设计方法对于系统中运行的特定任务集,如果所采用的分区设计方法既能保证各个分区任务的可调度性,又能满足系统可调度约束条件,那么在该分区设计方法下,该任务集可实时执行,即系统是可调度的.如果分区设计得太大,则分区占用系统资源太多,造成系统资源一定程度的浪费.如果分区设计得太小,则不能保证系统的可调度性.因此为每个分区分配合理的分区执行能力是分区设计的关键.由定理1可知,只要Uini2分区Pi一定可调度.在满足分区任务可调度的约束条件下,为了使系统的可调度利用率尽可能大,应取分区执行能力的最小值.从匹配的角度令上式相等,可以得到上式为本文提出的匹配型分区设计方法.当给定分区任务时,按此方法进行分区设计,为每个分区分配合理的执行能力,则能保证各分区任务的可调度性.对于有m个分区,每个分区Pi上执行ni个任务的系统,分区设计方法的复杂度最多为O(mn),其中n=max(ni,i=1,2,…,m).复杂度开销是系统完全可以接受的.4.2系统可调度利用率分析定理2.处理器系统有m个分区,每个分区Pi上执行的硬实时任务集Γi={τ1,τ2,…,τni},如果每个分区的执行能力按照式(11)分配,只要系统的总利用率满足则系统可调度.理1可知,各个分区可调度.证明.(1)分区的执行能力按照式(11)分配,根据定(2)∑m∑mαi2m-2∑mni+1)-ni为ni的单调递减函数,所以可得i=1即满足系统可调度性约束条件.推论1.处理器有m个分区,每个分区Pi上执行的硬实时任务集Γi={τ1,τ2,…,τni},每个分区的执行能力按照式(11)分配,n1=n2=…=nm=n,则系统的可调度利用率最小上界为证明.(1)n1=n2=…=nm=n时,按定理2可知,Page5Umn2m(2)下面证明对于任意给定实数ξ,0<ξ<1,至少存在一个任务集的利用率Umn2mmn+ξ,使得∑m条件.对于给定的m和n,假设β=2m个任务集,具有以下参数:U1=U2=…=Um=nβ1U=∑mα1=α2=…=αm=2-2nβ1=2-2β1αi=2m-2mβ1i=1则∑mn+ξ()mn所以β1则∑mαi>2m-2m1i=1由定理2可知,各个分区的任务数ni越大,系统可调度利用率上界越小.推论2.处理器有m个分区,每个分区Pi上执行的硬实时任务集Γi={τ1,τ2,…,τni},每个分区的执行能力按照式(11)分配,ni都取较大值,则系统的可调度利用率最小上界为证明.(1)分区的执行能力按照式(11)分配,根据定理1可知,各个分区可调度.(2)αi=2-2(Ui/ni+1)-ni,当ni取较大值时,αi接近于2-2e-Ui,因此∑mαi=2m-2∑mi=1即满足系统可调度性约束条件.(3)下面证明对于任意给定实数ξ,0<ξ<1,至少存在一个任务集的利用率Umln2m使得∑m下参数:i=1对于给定的m和ni,构造一个任务集,具有以αi=2-2ln2m当ni取较大值时,αi=2-2e-ln2m∑mαi=2m-(2m-1)e-ξ>2m-(2m-1)=1.i=1由推论2可知,当m的值越大,Ubound越小.m→时,min(Ubound)≈1/2,即最坏情况下,系统可调度利用率不小于50%.5计算机仿真实验5.1实时性比较通过C++建模,对处理器双层分区调度策略下的多个任务集进行了仿真实验,实验平台采用VC++6.0.将匹配型的分区设计方法与耗尽型和均衡型两种分区设计方法下的调度情况进行了实验比较.耗尽型分区设计思想是期望分区每次都能占用全部处理器资源执行全部任务;均衡型分区设计思想是将处理器资源平均分配给每个分区[12].实验中,将任务延迟时间率作为衡量系统强实时性的指标,任务延迟时间率定义为任务的实际执行延迟时间与任务的截止期限的比率.最大延迟时间率、最小延迟时间率和平均延迟时间率分别表示任务执行的最大延迟时间、最小延迟时间和平均延迟时间与任务截止期限的比率.实验结果如图3~图5所示,在仿真环境中,系统由两个分区组成,分区中包括周期性的实时任务,并且任务的截止时限与周期相等,表1给出了实验中的一组任务集,任务的执行时间和周期参数设置如表1所示.表2给出了实验的对比结果.Page6表2采用不同方法分区设计的仿真结果比较比较参数耗尽型均衡型匹配型从表2的结果可以看出,对于同一任务集,在相同的仿真时间内,如图3~5所示的3种分区设计方法的最大延迟时间率差别较大.耗尽型和均衡型的分区设计均使得任务的实际执行延迟时间有可能最大延迟时间率/%188.462103.84676.923超过截止时限(最大延迟时间率分别为188.642%、103.846%,超过截止时限的周期任务数分别为12和4),而匹配型的分区设计实验中,没有任务的实际执行延迟时间超过截止时限(最大延迟时间率76.923%,超过截止时限的周期任务数为0).仿真实验结果表明基于匹配型的分区设计可以更好地满足硬实时系统双层分区调度的实时性要求.5.2分区可调度利用率比较文献[10]给出了双层调度下分区可调度利用率的最小上限.参照本文定理1,可以得到分区执行能力下相应的分区可调度利用率最小上限Ubound,其结果与文献[10]的比较如表3所示.由表3分析可知,随着分区处理能力α的增加,分区最大可调度利用率的最小上限也相应增加.对于相同的分区处理能力,同一分区中子任务数目越多,分区的最大可调度利用率最小上限越小.相比文献[10],本文给出的计算方法有效地提高了可调度利用率的最小上限.图3耗尽型分区设计情况下延迟时间率曲线图4均衡型分区设计情况下延迟时间率曲线图5匹配型分区设计情况下延迟时间率曲线α0.10.0520.0350.0510.0350.0510.0350.20.1080.0750.1060.0740.1050.0740.30.1690.1210.1640.1180.1630.1180.40.2360.1740.2260.1680.2230.1670.50.3090.2360.2920.2260.2880.2230.60.3910.3090.3630.2920.3570.2880.70.4810.3980.4400.3700.4310.3630.80.5820.5070.5240.4620.5110.4520.90.6970.6460.6160.5760.5980.5601.00.8280.8280.7180.7180.6930.693注意到α=1的情况,分区可调度利用率最小上限取最大值,此时分区占用全部系统资源,即相当于单层的RM调度,两种方法得到的结果都与Liu和Layland[14]所推导的RM可调度利用率上限相一致,α取其它值时,本文的方法相比文献[10],在其基础上至少提高了6.7%.5.3分区设计成功率仿真实验中,使用分区设计成功率(successfulPage7机选择,服从均匀分布;designpercentage)作为衡量分区设计算法好坏的一个性能指标.成功分区设计是指能找到满足系统可调度约束条件的分区参数,使得系统所有分区内的任务可成功调度,找不到这样的分区参数,则说分区设计失败.分区设计成功率越高,说明分区设计算法越好.系统分别由2个分区、3个分区、5个分区组成,任务的参数根据下面的方法产生:(1)每个分区中任务的个数在2~10个之间随(2)任务最坏情况下的执行时间Ci在2个时间单位到30个时间单位之间随机选择,服从均匀分布;(3)每个任务实例τi的松弛时间li服从100~(4)任务周期Ti=Ci+li.实验结果是采用200次独立实验结果的平均值,为了比较算法在不同的系统负载情况下的性能,实验中系统负载率的取值范围为0.4~0.8.图6给出了分区数目分别为2、3、5时,不同的系统负载下分区设计成功率的变化趋势.从图中我们不难发现,只要系统负载率不大于50%,则调度成功率为100%,这与推论2的结论相一致.当系统负载率大于50%之后,随着系统负载的增加,SDP呈下降趋势.在相同的负载情况下,随着分区数目的增加,SDP呈下降趋势.这是由于分区数越多,任务越多,系统更复杂,因此保证系统实时性的分区设计成功率越低.400之间的均匀分布;6结论一般的可调度性研究大多集中于最大响应时间分析的方法,它的分析结果对任务的周期和执行时间的值敏感,缺少鲁棒性.在工程设计的初始阶段,任务集合也许不能完备,可调度利用率对于指导我们在设计时灵活选择任务具有重要意义.本文根据ARINC653标准,建立了可行的分区调度模型,通过可调度利用率,对系统的实时性能进行了理论分析.本文给出了分区可调度利用率的最小上限.提出了与分区利用率匹配的分区设计方法,证明了在最坏情况下,系统可调度的利用率不小于50%,并进行了仿真验证.为硬实时系统双层分区调度设计提供了理论分析基础.
