Page1基于路由证据的域间路由不一致路径恶意自治系统检测机制蒋健李伟罗军舟陆悠夏怒(东南大学计算机科学与工程学院南京211189)摘要域间路由系统中,自治系统依据路由策略选择报文转发路径,并将路径通告给邻居自治系统.为了追求更多的网络利益,自治系统向邻居自治系统通告的路径可能并不是实际转发报文的路径,从而产生域间路由路径不一致的问题.域间路由不一致路径不仅欺骗正常自治系统的路由选路过程,损害其网络利益,而且对域间路由的稳定性也会造成严重影响.现有的检测机制主要关注不一致路径的检测,没有致力于发现导致路径不一致的恶意自治系统,无法为后续解决路径不一致的问题提供支撑.该文提出一种域间路由不一致路径恶意自治系统检测机制,采用路由证据将自治系统的路由行为与自治系统本身相绑定.路径源自治系统对路径中其他自治系统进行逆序比较路由证据,确定可疑自治系统,然后查询离自身较近的可疑自治系统的直接上游自治系统的路由通告历史记录,对可能接收可疑自治系统报文的自治系统请求路由证据,根据比较结果最终确定恶意自治系统.实验结果表明,该文的检测机制在查全率和查准率两个指标上均优于现有的检测机制,有效提高了检测不一致路径中恶意自治系统的准确率.关键词域间路由;路径不一致问题;恶意自治系统检测机制;路由证据;互联网1引言Internet中的自治系统(AutonomousSystem,AS)通过BGP协议(BorderGatewayProtocol)[1]实现域间路由.依据RFC4271[1],域间路由分为路由控制层和路由数据层两个层面:在路由控制层,自治系统从邻居自治系统获得BGP路由通告,依据自身的路由策略选择到达目的自治系统的最优路径,并将最优路径通告至其他邻居自治系统;在路由数据层,自治系统沿着最优路径转发数据报文.正常情况下,自治系统在数据层转发报文的最优路径与控制层对外通告的最优路径是相同的.然而由于商业利益驱动[2]、路由器配置错误[3]等原因,自治系统向邻居自治系统通告的路径可能并不是其实际转发报文的路径,同时产生域间路由路径不一致问题.域间路由路径不一致问题在Internet中广泛存在.AS级别的Traceroute实验显示Internet的域间路由中至少有8%的路由路径存在数据层与控制层路径不一致的情况[4].由于恶意自治系统可以躲避Traceroute实验的检测,因此域间路由可能存在更多的不一致路径.域间路由不一致路径带来一系列问题,一方面使得自治系统的路由选路过程被欺骗,路由策略无法在路由路径中体现,自治系统利益受损;另一方面,由于恶意自治系统所发布的路由通告并非自身最优路径,接收通告的相邻自治系统也无法保证最优的路径,一定范围内会导致路由路径出现环路,影响域间路由的稳定性[5].近年来,域间路由路径不一致问题逐渐获得研究人员的关注,相关研究工作主要集中在不一致路径检测方面,已取得了许多成果[6-8].这些检测机制多采用发送探测报文的形式,利用探测报文反馈的结果检测路径.然而这些检测机制并不能保证探测报文与正常报文的无差异性,所以使得检测机制不能对恶意自治系统透明,影响检测结果;同时由于这些检测机制主要关注不一致路径的检测,没有致力于发现导致路径不一致的恶意自治系统,所以无法为后续解决路径不一致问题提供支撑[9].鉴于以上原因,本文提出一种域间路由不一致路径恶意自治系统检测机制(MaliciousASDetectionMechanism,MADM),在发现不一致路径的基础上,检测出导致路径不一致的恶意自治系统.本文首先提出路由证据的概念,自治系统在接收和转发数据报文的同时生成路由证据.路由证据反映自治系统声明的报文转发路径,将自治系统的路由行为与自治系统本身相绑定.其次本文提出基于路由证据的恶意自治系统检测方法,源自治系统依据证据比较结果,确定路径中的可疑自治系统,查询离自身较近的可疑自治系统的直接上游自治系统的路由通告历史记录,对可能接收可疑自治系统报文的自治系统请求路由证据,依据证据比较结果最终确定恶意自治系统.和已有研究成果相比,MADM具有以下3个方面的优势:(1)MADM是一种轻量级检测机制.MADM对路由证据进行加密以保证路由证据的安全性,其不需要进行报文级别的加密,显著减少了网络开销;(2)MADM提高检测恶意自治系统的准确率.在路由证据的生成过程中,路径中的恶意自治系统无法辨别证据生成报文和正常报文,不能针对证据生成报文改变转发路径,无法躲避检测;(3)MADM避免恶意自治系统对检测结果的影响.MADM检测过程不与恶意自治系统直接交互信息,仅与正常自治系统比较路由证据即可发现恶意自治系统,对恶意自治系统透明.本文第2节介绍不一致路径检测机制的相关工作;第3节形式化描述域间路由路径不一致问题;第4节介绍路由证据和不一致路径恶意自治系统检测方法;第5节对MADM进行实验验证;第6节总结全文并提出未来工作.2相关工作近年来研究人员在路由数据层部署测量机制检Page3测路由路径,然而即使不考虑检测恶意自治系统,在数据层发现完整的路由路径仍然是一项繁重的工作,同时数据层的测量机制一般需要报文级别加密,会造成很大的网络开销.研究人员[6]试图从Traceroute数据中得到完整的路由路径,然而由于路由聚集和路由过滤、边界路由器接口编号混乱、ICMP报文接口错误、恶意路由等原因,得到的结果和实际路径存在很大的偏差.Securetraceroute[7]在自治系统之间设立一个共享的密钥谓词,自治系统选择一些报文作为探测报文并检测报文是否能够正常到达目的节点的元素.它要求路由器对探测报文的每个应答信息计算消息鉴别码(MessageAuthenticationCodes,MAC),在探测报文数量庞大的情况下,路由器会消耗巨大的计算资源.Icing化加密结构,要求报文发送者和报文接收者共享报文转发路径所涉及的路由策略.由于自治系统的高度自治性,策略共享在实际网络中难以实现.Zhao等人[10]提出了一种域间路由决策检测协议,允许自治域的对等邻居检测自治域是否遵守了路由策略承诺.除了域间路由协议公开的信息之外不需要暴露其他域内隐私,多个邻居自治系统通过检测公开信息即可得出检测结果.与其他研究方法相比,Zhao等人的检测机制需要自治域提前向邻居自治域提供路由选择承诺(Promise),这种假设在当前域间路由系统中并不成立.其次它只能判断自治域通告的路径是否违背承诺,即只能够验证路由控制层通告路径的真实性,并没有关注路由控制层和数据层的路径不一致问题.类似的工作有NetReview[11],它检测一个自治域是否偏离对其他域的路由策略承诺.为了实现此方法,自治域必须公开所有接收到的BGP更新消息.这种需求不能保护自治系统的隐私,另外NetReview和Zhao等人的工作类似,只关注路由控制层的路由行为验证问题.Wong等人[12]提出一种轻量级的路由路径验证机制Lightweight.验证方在一些数据报文中附加共享密钥元组的前半部分并发送数据报文至被验证方.被验证方拥有共享密钥元组的后半部分,收到数据报文后发送应答报文.验证方依据应答报文判断被验证方的上游自治系统是否沿着当前路径转发报文.与本文类似,它需要多个自治域的协作,同时必须确保附加共享密钥元组的报文与常规报文一致,否则恶意自治系统将探测报文正常转发,而将正常报文则转发至其他路径.虽然Lightweight可以检测当前路径是否存在路径不一致问题,但是无法准确定位不一致路径中的恶意自治系统,不能为后续解决路径不一致问题提供支撑.3域间路由路径不一致问题的形式化描述为了便于理解,本节对域间路由路径不一致问题进行形式化描述,在此基础上给出具体实例.采用有向图G=(V,E)表示网络域间路由拓扑,其中V={v0,v1,…,vn}表示域间自治系统集合,vn表示一个域间节点(为形式化表述方便,自治系统在本文中也被称为节点).E={evi相邻自治系统直连边的集合,其中evi到节点vj的有向边,边的方向表示报文传输方向.定义1.路由路径.路由路径P以路径中的节点序列表示,P=(v0,v1,…,vi,d),v0为路径P的源节点,d为路径的目的节点,vi是路径P中的第i+1个节点.定义2.上下游节点.如果vi∈P,vj∈P,且P=(v0,v1,…,vi,…,vj,…,d),i<j,则vi为vj的上游节点,vj为vi的下游节点.如果vi和vj是邻居节点,则vi为vj的直接上游节点,vj为vi的直接下游节点.根据BGP的路由选路过程可知BGP路由通告总是由直接下游节点发送给直接上游节点.定义3.路径权值.路径权值反映自治系统的路由策略.节点v利用路径权值函数Wv(P)计算路由路径的权值,每条路由路径的权值不同,权值最高的路径为最优路径.一般情况下Wv(P)>0,如果节点接收的路由路径P存在环路,则Wv(P)=-.基于以上定义,我们给出路径不一致问题和恶意自治系统的定义.定义4.路径不一致问题.设节点v0依据路由策略选择到达目的节点d的最优路径为P,表示为P=(v0,v1,…,vi,d).设数据报文从v0到d的实际传输路径为P,表示为P=(v0,v1,…,vj,d).如果存在节点vs使得vs∈P∪P且vsP∩P,则我们称路径P存在不一致问题.路由策略是指自治系统制定的接收路由、选择最佳路由以及对外通告路由的策略,具有多样性和自主性的特点.路由策略的多样性首先表现在决定路由策略的因素多样化.典型因素包括自治系统之间的商业关系、路径长度和流量负载等;其次是路由Page4策略的偏好多样化.Gao-Rexford[13]首次提出了自治系统商业关系的概念,将自治系统分为客户自治系统、服务自治系统以及对等自治系统.客户自治系统需要向服务自治系统支付费用以获得网络接入权限.为了追求更多的经济利益,服务自治系统会选择通过客户自治系统的路径发送报文,同时将最优路径通告给上游的客户自治系统.而某些自治系统则考虑报文传输的实时性要求,即使付出一定的经济损失,也对最短路径有所偏好.路由策略的自主性表现在策略的自主决策,其他自治系统无法决定也无法获知本自治系统的最终策略.根据RFC4271对域间路由的描述,我们可以发现域间路由的默认准则即自治系统向邻居自治系统通告的路径必须是自身选择的最优路径.虽然路由策略具备多样性和自主性,但是如果自治系统在制定以及实施路由策略的过程中违反了此准则,对其他自治系统利益和网络路由系统造成危害,则被称为恶意自治系统,定义如下.定义5.恶意自治系统.设节点v0到目的节点d的最优路径P存在路径不一致问题,表示为P=(v0,v1,…,vi,d).P[vr]=(vr,vr+1,…,vi,d)表示P中源节点为vr,目的节点为d的子路径,其中r∈(0,i].设Pvrd的最优路径,如果Pvr≠P[vr],则vr为恶意自治系统.图1是不一致路径的实例.节点a的3条路径abd、ad和abcd的路径权值关系为Wa(abd)>Wa(ad)>Wa(abcd).相应的,b的路径权值关系为Wb(bcd)>Wb(bd).图的左侧不存在路径不一致问题.节点b沿着路径bcd发送报文至d,同时将bcd通告给上游节点a.在a的路由策略中路径ad的权值高于abcd,因此a选择ad作为最优路径,将报文直接发送至d节点.图的右侧存在路径不一致问题.假设a是b的客户节点,由于bcd并不被a选为最优路径,为了吸引a的流量,节点b向a通告非最优路径bd.虽然bd不是b的真实报文转发路径,但是a并不知晓b如何转发报文,因此a节点选择路径abd发送报文,abd成为不一致路径.4域间路由不一致路径恶意自治系统检测机制在本节我们首先介绍路由证据的概念,其次设计基于路由证据的恶意自治系统检测方法,最后讨论MADM的实现和部署方案.4.1路由证据路由证据反映自治系统的路由行为.根据路由证据的生成节点和生成方式,路由证据分为3类:源节点报文发送证据(SourceSendingEvidence,SSE)、目的节点报文发送证据(DestinationSendingEvidence,DSE)和目的节点报文接收证据(DestinationReceivingEvidence,DRE).自治系统采用RSA密钥算法生成本自治域的公钥和私钥,在全网内发布公钥并获取其他自治系统的公钥,利用密钥加密路由证据保证路由证据的鲁棒性.在生成路由证据之前,源自治系统设计证据生成报文的发送策略.首先制定证据生成报文的发送时间区间T.T的起始时间晚于源自治系统的当前时间.源自治系统将T平均分为若干个小区间,在小区间中随机选择k个不连续小区间发送证据生成报文,每个小区间内报文发送的持续时间也不同.例如源自治系统将1000ms划分为10个区间,每个区间为100ms,选择5个不连续区间,即2、4、6、8和10,在这5个区间内发送证据生成报文;其次还要设计证据生成报文格式.依据RFC791①,IP报文分为头部和载荷两个部分.载荷包含报文的主要内容,而头部则包含一系列报文选项,例如报文源地址,报文目的地址,时间戳等.为了防止证据生成报文被恶意自治系统辨别,源自治系统不对报文进行任何加密操作,仅在报文的时间戳附加报文的发送时间.由于报文发送的时间区间是不连续的,且不同区间内报文发送的持续时间也存在差异,因此相同区间内报文的附加时间戳是相近的.证据生成报文发送策略制定完毕后,源自治系①IP,ftp://ftp.ietf.org/rfc/rfc0792.txtPage5统向目的自治系统发送路由证据请求消息(RequestofRoutingEvidence,RRE),定义如下.定义6.路由证据请求消息RRE.RRE={{RETflag,Times,Timee,k,IPu}RKs其中,RETflag是证据请求类型标志位.如果源自治系统请求的证据类型是DRE,RETflag=0;当源自治系统请求的证据类型是DSE和DRE时,RETflag=1.Times是整个报文发送区间T的起始时间,结束时间为Timee.k表示发送报文的小区间数量,IPu是目的自治系统的直接上游自治系统IP地址.源自治系统用私钥RKs加密消息保证其不被中途恶意自治系统篡改,用目的自治系统公钥PKd加密消息保证只有目的自治系统可以获悉消息内容.目的自治系统接收RRE后,确认自身当前时间早于Times,向源自治系统返回路由证据确认消息(AcknowledgementofRequest,AOR),定义如下.定义7.路由证据确认消息AOR.AOR={{RETflag,Times,Timee,k,IPu}RKd其中,RETflag,Times,Timee,k和IPu与RRE消息中对应项的值相同,目的自治系统用私钥RKd和源自治系统公钥PKs加密消息.源自治系统收到AOR后,确认目的自治系统收到RRE消息.当时间到达Times时,源自治系统执行报文发送策略,在k个不连续的时间区间内发送报文.如果当前时间晚于Times,源自治系统需重新制定报文发送策略.源自治系统统计每个发送区间内发送的报文长度s,获得报文长度集合S={s1,s2,…,sk},对集合中的元素取对数以减少异常值的影响,得到Slog={log(s1),log(s2),…,log(sk)},继而生成源自治系统报文发送证据SSE.定义8.源自治系统报文发送证据SSE.SSE={SSElabel,Times,Timee,k,IPd,Slog}RKs其中,SSElabel是SSE标签,Times是T的起始时间,结束时间为Timee.k表示发送报文的小区间数目,IPd是目的自治系统的IP地址,Slog是报文长度集合,源自治系统用私钥RKs加密证据内容.考虑不同自治系统的时钟可能不同步,为了避免时钟不同步对路由证据的生成造成影响,目的自治系统向源自治系统反馈AOR信息后即开始监听边界路由器连接直接上游自治系统IPu的网络端口,收集源地址为源自治系统IP、时间戳介于Times和Timee之间的报文,并根据RRE中RETflag的值生成相应的证据.由于IP协议的best-efforts机制,目的自治系统接收的IP报文可能是混乱排列的.为了生成正确的路由证据,它必须采用K-means[14]聚类算法对接收的数据报文进行聚类处理.算法以报文时间戳为聚类特征值,随机选择k个对象代表k个区间内报文时间戳的平均值.执行算法得到报文长度集合为S={s1,s2,…,sk},对报文长度集合中元素取对数可得Slog={log(s1),log(s2),…,log(sk)}.目的自治系统依据报文分析结果生成报文接收证据DRE.定义9.目的自治系统报文接收证据DRE.DRE={{DRElabel,Times,Timee,k,IPs,其中,DRElabel是DRE标签,Times、Timee、k与SSE中对应项的值相同.IPs是源自治系统的IP地址,IPu是目的自治系统的直接上游自治系统的IP地址,Slog是报文长度集合,目的自治系统用私钥RKd和源自治系统公钥PKs加密证据内容.根据DRE的生成过程,可以发现当路径是正常路径时DRE与SSE是匹配关系,即对于任意的SSE,目的自治系统接收来自源自治系统的证据生成报文,生成唯一的DRE,使得证据内容Times、Timee和k相同,同时Slog=Slog.实际网络中链路拥塞等原因会造成网络丢包,这种情况下Slog与Slog会存在一定的误差.为了解决这个问题,在此给出证据误差μ的计算方法:其中,ρi是第i个时间区间内发送报文的长度si占整个时间区间发送报文长度的比例:设网络丢包率为ξ,ξ在一定时间内会有波动.如果证据误差μ与时间区间T内Max(ξ)的差值小于等于误差容忍度θ,我们仍然认为Slog=Slog,即认为SSE和DRE是匹配的.随着网络丢包率的增加,我们可以加长报文发送区间,增加发送报文长度,同时增大误差容忍度,保证路由证据比较结果的准确性.在DRE的生成过程中,目的自治系统需要监听到来自直接上游自治系统所有的证据生成报文,才可以生成与SSE匹配的DRE.DSE则反映目的自治系统是否将接收的证据生成报文沿着当前路径转发至直接下游自治系统.然而即使恶意自治系统将Page6证据生成报文转发至其他直接下游自治系统,它仍然可以生成与SSE匹配的DSE,因此DSE反映的路由行为并不可靠.DSE定义如下.定义10.目的自治系统报文发送证据DSE.其中,DSElabel是DSE标签,Times、Timee、k、IPs、Slog与DRE中对应项的值相同.IPds是直接下游自治系统的IP地址.目的自治系统用私钥RKd和源自治系统公钥PKs加密证据内容.4.2基于路由证据的不一致路径恶意自治系统检测方法MADM需要路由路径中多个自治系统协同合作执行路径检测.路由路径的源节点是检测机制的发起节点.目的节点基本是网络的边缘节点(StubAS),并不是传输节点(TransitAS),不存在通告不一致路径的动机,因此我们认为源节点和目的节点为正常节点.与相关研究工作[8,11]类似,本文只考虑路由路径中存在一个恶意节点的情况.根据第3节恶意自治系统的定义,可知如果路径存在不一致问题,则路径中的恶意节点一定沿着其他路径将报文转发给非路径中的节点.受此启发,本检测方法以节点路由证据比较的方式,从目的节点开始逐个验证直接上游节点,判断直接上游节点是否沿着当前路径将报文转发至目的节点.检测方法分为两个部分:第1部分是可疑节点检测算法,第2部分是恶意节点检测算法.在可疑节点检测算法中,源节点生成SSE,与目的节点的报文接收证据DRE进行比较.当目的节点的DRE与源节点的SSE匹配时,将目的节点的直接上游节点替换为目的节点,继续比较证据.如果所有节点的DRE均与源节点的SSE匹配,表明当前路径不存在不一致问题.当某一节点的DRE与源节点SSE不匹配时,源节点向此节点的上游节点逐个请求路由证据DRE和DSE,依据证据的比较结果确定可疑节点范围并将范围缩小至两个节点.在恶意节点检测算法中,源节点查询离自身较近的可疑节点的直接上游节点的路由通告历史记录,对可能接收可疑节点报文的节点请求路由证据DRE,依据SSE和DRE的比较结果确定恶意节点.4.2.1可疑节点检测算法在介绍检测算法之前,先给出证据比较布尔函数F(x,y)的定义.定义11.证据比较布尔函数F(x,y).证据比较布尔函数表示路由证据的比较结果:其中,x代表源节点生成的路由证据SSE,y代表目的节点生成的路由证据.根据布尔函数的定义[15],我们设定x∈{1},表示源自治系统总是依据报文发送的策略生成正确的SSE.设定y∈{0,1},y为1时表示目的自治系统生成与SSE匹配的路由证据,反之y为0.相应的,F(x,y)∈{0,1},F(x,y)=1表示证据匹配,F(x,y)=0表示证据不匹配.设P=(v0,v1,…,vi),i>0是源节点为v0,目的节点为vi的路由路径.v0生成SSE,同时要求vi生成DRE.我们用σi和τi分别表示此时的SSE和DRE.v0与vi比较证据,获得F(σi,τi).如果F(σi,τi)=1,表明vi的直接上游节点vi-1沿着正常路径vi-1vi转发报文.算法将vi-1标记为正常节点,将vi替换为vi-1,继续检查vi-1的直接上游节点vi-2.当vi=v1ik=2F(σk,τk)=i-1,表明路径的所有节点均可从时,∑直接上游节点正常接收证据生成报文,当前路径不存在不一致问题;如果存在节点vj,使得F(σj,τj)=0,表明vj没有从vj-1正常接收证据生成报文,导致其DRE与v0的SSE不匹配.当j=2时,F(σ2,τ2)=0,由于v0节点是正常节点,肯定发送证据生成报文至v1,并且算法的执行顺序与节点排列顺序相反,即v2已经被证明是正常节点,因此v1为恶意节点,整个检测算法结束.当j∈(2,i]时,位于v0和vj之间的节点均有可能是恶意节点,用V表示v0与vj之间的节点,得到V={v1,v2,…,vj-1},为后续可疑节点检测提供信息.v0将RRE中的RETflag设置为1,要求V内的节点同时生成DRE和DSE,进行两类证据比较.为了表述方便,在证据比较布尔函数的基础上我们定义证据完全比较布尔函数R(x,z,r).定义12.证据完全比较布尔函数R(x,z,r).证据完全比较布尔函数表示两类路由证据的比较结果:其中,x代表源节点生成的路由证据SSE,z代表目的节点生成的路由证据DRE,r代表目的节点生成的路由证据DSE.x取值范围与F(x,y)中x的取值范围相同,z和r的取值范围与F(x,y)中y的取值范围相同.据布尔函数的定义[15],R(x,z,r)∈{0,1}.F(x,z)和F(x,r)均为0时R(x,z,r)=0,表示目的节点不能产生与源节点SSE匹配的DREPage7和DSE.F(x,z)和F(x,r)中只要有一个值为1时R(x,z,r)即可为1,我们在下文中根据具体场景分析其意义.算法执行顺序仍然与节点排列顺序相反,v0首先与vj-1比较路由证据.我们用σj-1,τj-1和δj-1分别表示此时的SSE,DRE和DSE.依据R(σj-1,τj-1,δj-1)的取值,检测算法分为两种情况执行:(1)R(σj-1,τj-1,δj-1)=1,vj-1是恶意节点,算法结束.首先假设R(σj-1,τj-1,δj-1)=1时,F(σj-1,τj-1)和F(σj-1,δj-1)均为1,表明vj-1从子路径vj-2vj-1正常接收且声称正常发送证据生成报文至下游节点vj.根据算法流程可知,F(σj,τj)=0,即vj从子路径vj-1vj接收证据生成报文存在异常.同时检测结果已经证明vj是正常节点,它的路由证据是可信的.上文提到DSE的可靠性无法保证,因此判定vj-1没有生成真实的DSE,是恶意节点.由于P仅存在一个恶意节点,整个检测算法结束.其次假设F(σj-1,τj-1)=1而F(σj-1,δj-1)=0,表明vj-1从vj-2正常接收证据生成报文但是并没有沿着子路径vj-1vj发送证据生成报文,“承认”其没有沿着正常路径转发报文.依据定义5,我们同样认为vj-1是恶意节点,整个检测算法结束.需要注意的是F(σj-1,τj-1)=0且F(σj-1,δj-1)=1的情况没有讨论,因为根据路由证据定义,vj-1不可能在没有正常接收证据生成报文的情况下生成与SSE匹配的DSE.(2)R(σj-1,τj-1,δj-1)=0,v0继续向vj-1的直接上游节点vj-2请求路由证据DRE和DSE,算法继续执行.R(σj-1,τj-1,δj-1)=0意味着vj-1声称没有从子路径vj-2vj-1正常接收和发送证据生成报文,此时无法判断证据真实性,不能对vj-1进行判定,只能继续执行检测算法.检测算法最终在vj-h节点执行完毕,符合以下两个条件之一:j-h1且R(σj-h,τj-h,δj-h)=1,R(σj-h,τj-h,δj-h)=0且j-h=1.依据R(σj-h,τj-h,δj-h)的取值,算法执行结果分为3种情况:(1)j-h1且R(σj-h,τj-h,δj-h)=1+1=1,可疑节点是vj-h和vj-h+1,用V表示可疑节点集合,可得V={vj-h,vj-h+1}.此时F(σj-h,τj-h)和F(σj-h,δj-h)均为1,表明vj-h从子路径vj-h-1vj-h正常接收证据生成报文,并正常发送报文到vj-h+1.由于算法是反序进行,依据上文分析可得R(σj-h+1,τj-h+1,δj-h+1)=0,即vj-h+1声称没有从直接上游节点vj-h正常接收证据生成报文,与vj-h的路由证据矛盾,说明两个节点中必有一个节点伪造路由证据,因此两者构成可疑节点集合.(2)j-h1且R(σj-h,τj-h,δj-h)=1+0=1,恶意节点是vj-h.此时F(σj-h,τj-h)=1而F(σj-h,δj-h)=0,结合vj-h+1的证据结果R(σj-h+1,τj-h+1,δj-h+1)=0,可得vj-1是恶意节点.(3)R(σj-h,τj-h,δj-h)=0且j-h=1,v1是恶意节点.R(σj-h,τj-h,δj-h)=0且j-h=1,表明节点集合V={v1,v2,…,vj-1}中所有节点均没有从直接上游节点正常接收证据生成报文.由于v0肯定发送了证据生成报文且P中只存在一个恶意节点,因此判断v0的直接下游节点v1的路由证据不真实,v1是恶意节点.算法的详细流程见算法1.算法1.可疑节点检测算法.输入:P=(v0,v1,…,vi),i>0.F(x,y),R(x,z,r).输出:恶意节点vr或者可疑节点集合V1.FORvi∈PDO2.IFF(σi,τi)=1THEN3.i=i-1;4.IFvi=v1THEN5.RETURN;6.ELSE7.CONTINUE;8.ENDIF9.ELSE10.j=i;11.IFvj=v2THEN12.vr=v1;13.RETURNvr;14.ELSE15.V={v1,v2,…,vj-1},j∈(2,i];16.BREAK;17.ENDIF18.ENDIF19.ENDFOR20.IFR(σj-1,τj-1,δj-1)=1THEN21.vr=vj-1;22.RETURNvr;23.ELSE24.FORvj-2∈VDOPage825.IFR(σj-2,τj-2,δj-2)=1+1=1THEN26.V={vj-2,vj-1};27.RETURNV;28.ELSEIFR(σj-2,τj-2,δj-2)=1+0=1THEN29.vr=vj-2;30.RETURNvr;31.ELSEIFR(σj-2,τj-2,δj-2)=0andj-2=1THEN32.vr=v1;33.RETURNvr;34.ELSE35.j=j-1;36.CONTINUE;37.ENDIF38.ENDFOR39.ENDIF以一个具体实例描述算法过程(如图2所示),路由路径为P=(a,b,c,d,e).源节点为a,目的节点为e,阴影圆形表示目的节点的直接上游节点.依据检测算法,首先a向e请求路由证据DRE,e监听并分析直接上游节点d发送的报文,生成DRE并发送至a.a生成SSE并比较SSE与DRE,如果证据内容匹配,则确认d沿着子路径de将报文发送至e,d是正常节点.然后a将d作为目的节点,向d请求路由证据DRE,对c进行检测.如果检测c没有问题,算法将c作为目的节点继续检测b.当b为目的节点时表明路径的所有节点均为正常节点,路径不存在不一致问题,算法结束.如果e不能产生与a的SSE相匹配的DRE,表明e没有从子路径de获得证据生成报文,但是并不能确定d节点是恶意节点,因为b,c和d均可能通过f转发报文至e,得到V={b,c,d}(如图3所示).依据检测算法,a向d请求路由证据DRE和DSE,如果d的路由证据结果R(σd,τd,δd)=1,a确定d是恶意节点,算法结束.如果R(σd,τd,δd)=0,a继续向c请求路由证据DRE和DSE.当R(σc,τc,δc)=0时继续向b请求路由证据.当R(σb,τb,δb)=1时,如果F(σb,τb)和F(σb,δb)均为1,则b和c之间有一个节点是恶意节点,V={b,c},否则b是恶意节点.当R(σb,τb,δb)=0时,b仍然为恶意节点.4.2.2恶意节点检测算法由于V内的节点均可能是恶意节点,它们的路由证据真实性无法保证,源节点无法与它们比较证据,因此恶意节点检测算法必须设计新的检测方式.在介绍恶意节点检测算法之前,我们首先介绍路由通告历史记录(RouteLog).RouteLog由自治系统维护,按照二元组{路由通告的发送节点,路由通告的目的节点}索引,记录相邻节点的路由通告历史信息.Page9设vr是节点vk的邻居节点,则vk的RouteLog,d表示vr向vk发送的目的节点为d的历史路中Uvr由通告集合.Uvr前最优路径子路径的路由通告ut(当路由通告中的路径被vk选为最优路径时,我们称该路由通告包含vk最优路径子路径),包含vk上次最优路径子路径的路由通告u0以及通告时间介于两者之间的路由通告u1,u2,…,ut-1,可得Uvr随着路由路径的更新,RouteLog的存储信息周期性更新.每当vk收到来自vr的目的地为d的路由通告时,均缓存在RouteLog中.假设vk收到un后更新最优路径,则删除ut之前的记录,添加un至,d,将ut和un之间缓存的路由通告也添加至UvrUvr周期性更新保证了RouteLog的存储空间在可接受范围内,以便于在自治系统中部署RouteLog.图4是节点a的RouteLog中Ub,e的生成过程示意图.当前a到e的最优路径是abcde,a保存b节点的路由通告bcde.上次a到e的最优路径是abge,a保存b节点当时的路由通告bge.两次通告间隔内a收到的通告bfe和bche也被记录,最终得到Ub,e(见表1).需要注意的是,如果u0不存在,只存在ut,即(vk)ut表示vk首次将vr的路由通告选为最优路径.这种情况下vk需要存储vr发送的目的节点为d的所有路由通告,然而由于现实网络中相邻自治系统的连接关系是基于网络可达性创建的,因此这种情况很难存在①.网络自治系统追求网络利益的最大化,研究成果[16]表明:产生域间路由不一致路径的主要原因是恶意节点为了增加网络利益而吸引正常节点的网络流量.同时自治系统总是尽可能通过通告最优路径获得最多的网络利益,只有通告非最优路径能够获得更多的网络利益时才会通告非最优路径,据此我们提出定理1.定理1.设Uvr表示节点vk的RouteLog中二元组{vr,d}标记的历史路由通告集合.如果当前最优路径(vk)ut是不一致路径且vr是导致路径不一致的恶意节点,则vk的实际报文转发路径是(vk)u,其中u∈Uvr证明.(vk)ut是vk当前最优路径,根据定义3可得Wvk过程可知,vr向vk通告ut,则ut是vr当前选择的最优路径.然而vr的实际报文转发路径u才是vr真实的最优路径,可得Wvr节点vr没有通告最优路径u,而通告了非最优路径ut至vk,表明vr可能获悉在vk的路由策略中ut的权值高于u的权值.然而由于自治系统路由策略的自主性,这种情况并不存在,因此vr只能采用发送多次路由通告的方式试探vk.依据BGP选路过程,vr首先向vk通告真实路径u,vk并没有选择(vk)u作为最优路径,vr继续向vk通告非最优路径,直到通告ut时才获得vk的报文流量,因此可得真实路径u的通告时间早于ut且u≠ut.(vk)u0是上次vk到达d的最优路径,而当前最优路径是(vk)ut.一般来说,自治系统的最优路径改变有3种原因,分别是自治系统的路由策略变化导致最优路径权值改变;自治系统接收到最优路径撤销通告;自治系统接收到更符合其路由策略的路径通告.接下来依次分析这3种原因:(1)假设vk的最优路径变化是因为其路由策略发生变化.由于vr不能获悉vk的最新路由策略,依据前文的分析,vr只能在vk更新路由策略之后通告最优路径u进行试探,可知最优路径u的通告时间晚于u0,但也可能存在u=u0.(2)假设vk的最优路径变化是因为vr主动撤销路由通告u0.由于vr是恶意节点,因此(vk)u0的一致性无法保证.首先考虑u0不是vr当时最优路径的情况,前文提到vr向vk发送u0的动机是吸引vk的流量,此时vr已经获得vk的流量,没有撤销路由通告u0的动机,因此这种情况不成立;其次考虑u0是vr①TheCooperativeAssociationforInternetDataAnalysisPage10当时最优路径的情况,vr当前的最优路径是u,表明u成为其最优路径的时间晚于u0,因此通告u的时间同样晚于u0,但是同样存在u=u0的可能.(3)假设vk的最优路径的变化是因为收到更符合其路由策略的路径通告,而该路径通告可能来自非vr节点.当该路径通告来自非vr节点时,vk取消最优路径(vk)u0,vr无法分辨vk的路由策略是否改变,情况与(1)类似,vr只能在vk改变最优路径后通告最优路径u进行试探,可知最优路径u的通告时间晚于u0,但是可能存在u=u0.当该路径通告来自vr时,表明vr最优路径从u0变为u,且u不同于u0.由于u无法被vk选为最优路径,vr只能通过通告ut获得vk的流量.同样可知u的通告时间晚于u0.经过以上分析,我们发现包含真实报文传输路径子路径的路由通告u的通告时间介于u0和ut之间,u与ut不同但是可能与u0相同.根据Uvr义,可得u∈Uvr由4.2.1节可知可疑节点集合为V={vj-h,vj-h+1},j-h1.为了在两个可疑节点中发现恶意节点,源节点与离自身较近的可疑节点的直接上游节点vj-h-1协作.v0向vj-h-1申请查询RouteLog,得到vj-h向vj-h-1发送的目的节点为vi的路由通告历史记录Uv含当前最优路径子路径的路由通告,找出剩下的历史路由通告中vj-h的下一跳节点(Nexthop),并向所有的下一跳节点依次请求DRE(源节点可能就是vj-h-1节点,此时vj-h=v1).根据定理1,如果vj-h的某个下一跳节点反馈的DRE与v0的SSE匹配,则证明vj-h是恶意节点,反之vj-h+1为恶意节点(具体见算法2).算法2.恶意节点检测算法.输入:P=(v0,v1,…,vi),i0.V={vj-h,vj-h+1},输出:恶意节点vr1.FOREACHu∈Uv2.IFSSE=DRETHEN3.vr=vj-h;4.RETURNvr;5.ELSE6.CONTINUE;7.ENDIF8.ENDFOR9.vr=vj-h+1;10.RETURNvr;以图4为例,假设b和c是可疑节点,为了在b和c之间找出唯一恶意节点,a首先得到b的路由通告历史记录bge,bche,bcde,bfe.由于bcde是当前最优路径,因此a仅选择bge,bche,bfe中的下一跳节点g、f和c进行证据比较.如果g、f和c中有一个节点产生与a的SSE匹配的DRE,则证明b是恶意节点,否则c是恶意节点.4.2.3算法分析分析算法执行过程可以发现,源节点与路径中的节点最多进行一次证据交互,与历史路由通告中vj-h的每个下一跳节点也仅交互一次证据信息,因此检测算法的计算复杂度取决于路径节点数和历史路由通告中vj-h的下一跳节点数.设路径总共包含n个节点,最坏的情况下,源节点的直接下游节点是可疑节点且最终被检测为恶意节点.源节点执行可疑节点检测算法,与目的节点比较SSE和DRE,生成V.V包含位于源节点和目的节点之间的n-2个节点.源节点与V内的每个节点分别比较SSE和DRE、SSE和DSE,获得V.源节点总共需要进行2n-3次证据比较.源节点执行恶意节点检测算法,设Uvvj-h的下一跳节点数是m,最坏的情况下,源节点必须与每个下一跳节点比较SSE和DRE,总共进行m次证据比较.综合两个算法,可得源节点总共进行2n+m-3次证据比较以发现恶意节点,算法复杂度为O(2n+m).通过分析MADM检测算法的执行过程,可知源节点并不直接与恶意节点交互信息,而是与恶意节点的邻居节点比较路由证据.这种方式对恶意节点透明,避免恶意节点干扰检测结果.同时节点之间的交互信息和路由证据均用密钥加密,防止中间人攻击影响检测结果,保证检测机制的安全性.4.3MADM的实现与部署随着软件定义网络(Software-DefinedNetworking,SDN)[17]的蓬勃发展,基于控制器(Controller)的集中式路由控制方案也愈发成熟.为了实现MADM,可在自治域内的控制器中部署路由检测模块(RoutingDetectionModel,RDM),集中管理自治域的密钥和路由证据,并维护路由通告历史记录,执行检测机制.图5是RDM的结构图,总共包含5个功能子模块,分别是密钥生成子模块、密钥管理子模块、路由证据生成子模块、路由证据验证子模块和路由通告历史记录子模块.密钥生成子模块采用RSA算法Page11计算本自治域的密钥对.我们在全网范围内采用Chord环[18]连接多个自治系统的RDM,自治系统的RDM通过Chord环发布自身的公钥,并根据其他自治系统的ASnumber获取它们的公钥.密钥管理子模块存储其他自治域的公钥信息,以便于对路由证据进行加解密操作.路由证据生成子模块的主要功能是通过分析证据生成报文,生成相应的路由证据.路由证据验证子模块将其他自治系统反馈的图5RDM结构图分析MADM的检测原理,我们可以发现对于一条路由路径的源节点,它并不需要全网自治系统的配合,而仅需要当前路径中的其他自治系统和恶意节点的邻居节点协作检测恶意自治系统.因此在最初阶段,我们可以选择在小范围网络内,从网络安全和网络利益两个角度推动MADM在自治系统中的部署,进而实现全网范围内的部署.5实验与分析为了更加直观地阐述MADM的价值,本节通过实验验证MADM对恶意自治系统的检测效果.为了使得实验结果更具有说服力,我们实现了相关工作中介绍的Securetraceroute和Lightweight两种路径检测机制.Securetraceroute在自治系统之间设立了一个共享的密钥谓词,自治系统选择一些报文作为探测报文,通过检测报文是否能够正常到达目的节点来发现不一致路径和恶意节点.Light-weight在一些数据报文中附加共享密钥元组的前半部分,被验证方拥有共享密钥元组的后半部分.被验证方收到验证方的数据报文后发送应答报文.依据应答报文,验证方检测被验证方的上游自治系统.我们将Securetraceroute和Lightweight对恶意自路由证据与自身的路由证据进行比较,依据比较结果检测路径和自治系统.路由通告历史记录子模块存储相邻节点的路由通告历史信息.研究人员通过统计AT&T的骨干网络的路由更新日志,得到现有自治系统到某一子网的路由平均一天会有5次更新,而到一些包含著名地址(如知名网站等)的路由平均一天只有0.2次更新[19],因此每个自治域RDM的RouteLog更新频率较低,在实际网络中易实现.治系统的检测结果与MADM的检测结果进行比较,依据比较结果分析MADM的性能.5.1实验环境我们采用SSFnet①对MADM、Securetrace-route和Lightweight进行仿真实验.为了模拟现实网络中的拓扑,从CAIDA②项目组下载了2014年6月11日的网络拓扑和AS连接关系数据集cycle-aslinks.l7.t1.c003225.20140607,在数据集中选择300个节点,其中30个节点为Tier-1节点,50个节点为Tier-2节点,220个节点为Tier-3节点.基于节点之间的连接信息,采用BRITE[20]拓扑生成器生成节点的仿真拓扑.我们从RouteView③项目组下载到2014年6月11日的域间路由更新通告数据集updates.20140611以及自治系统路由信息表数据集rib.20140611,在数据集中找出仿真拓扑中节点的路由表和路由通告信息,在拓扑中构建路由路径.在拓扑中选择3个节点A,B,C作为源节点,A节点为Tier-1节点,连接度为150,以A节点为源节①②③Page12点的路由路径有112条.B节点为Tier-2节点,连接度为90,以B节点为源节点的路由路径有45条.C节点为Tier-3节点,连接度为30,以C节点为源节点的路由路径有12条(见表2).源节点ABC我们将网络报文传输速率设置为100Mbps,证据生成报文长度设置为16bytes,证据生成报文发送时间区间设置为50ms.网络丢包率设置为0.5%,误差容忍度设置为1%.在MADM检测过程中,采用RSA算法为每个参与检测过程的节点生成密钥对.5.2实验评估指标本文采用相关研究中广泛使用的查全率和查准率作为实验评估指标.在网络丢包率相同的条件下,分别测试MADM、Securetraceroute和Lightweight在不一致路径比例不同时检测恶意节点的查全率.设拓扑包含E个恶意节点,被正确检测出的恶意节点数目为F,则查全率(RecallRatio)为在不一致路径比例相同的条件下,分别测试MADM、Securetraceroute和Lightweight在网络丢包率不同时检测恶意节点的查准率.设拓扑中总共被检测为恶意节点的节点数目为H,则查准率(PrecisionRatio)为5.3实验方案与实验结果实验1.验证在不一致路径比例不同的情况下MADM、Securetraceroute和Lightweight对恶意节点的检测效果.分别在A、B和C的路由路径中随机选择路径作为不一致路径,在不一致路径中任意选择一个节点作为恶意节点.为了比较不同不一致路径比例下的实验结果,设定不一致路径占总路径的比例分别为5%、8%、10%、15%和18%.实验对比分析结果如图6~图8所示,图6是节点A的路由路径的检测结果.可以发现,当不一致路径比例为5%时,MADM对其路由路径中恶意节点的查全率是89%,仍然有大约11%的恶意节点不能被检测.分析拓扑发现虽然每条不一致路径只包含一个恶意节点,但是一部分路径在某些节点相交,导致这部分路径包含多个恶意节点.由于MADM的检测算法只处理路由路径存在一个恶意节点的情况,因此不能检测这些恶意节点.Securetraceroute对恶意节点的查全率是60%,分析发现Securetraceroute检测的恶意节点大部分是没有分辨probe报文的恶意节点以及兄弟节点(SiblingAS),这些节点对Securetraceroute发送的probe报文给予正面回应,从而被检测出存在问题.而剩余恶意节点可以分辨probe报文,并正常转发probe报文,因此并没有被Securetraceroute发现.Lightweight对恶意节点的查全率是68%,它与MADM一样均可以避免恶意节点的识别,但是查全率并不高.分析发现只有当恶意节点是目的节点的直接上游节点时,Lightweight才能检测出恶意节点,而非直接上游节点的恶意节点不能被检测出,因此影响了查全率.随着不一致路径比例的增加,一条不一致路径出现多个恶意节点的情况增多,MADM、Securetraceroute和Light-weight的查全率缓慢下降.当不一致路径比例达到18%时,MADM查全率是78.3%,SecuretraceroutePage13查全率是53.5%,而Lightweight则是54.6%.综合曲线可以发现MADM的查全率总体优于Securetraceroute和Lightweight的查全率.图7显示节点B的路由路径的检测结果.相比于节点A,节点B的路由路径较少,一条路径存在多个恶意节点的情况也较少,因此当不一致路径比例相同时,MADM、Securetraceroute和Lightweight对节点B的路径中恶意节点检测结果均优于对节点A的路径中恶意节点的检测结果.图8显示节点C的路由路径的检测结果,当不一致路径比例是5%时,MADM查全率达到95%左右,Securetraceroute的查全率是67%,Lightweight的查全率则是72%.观察曲线走势可以发现MADM的查全率优于Securetraceroute和Lightweight的查全率.现实网络中不一致路径比例保持在8%左右,这种情况下的实验结果表明MADM对恶意节点取得较高的查全率,优于Securetraceroute和Light-weight的检测结果.实验2.验证在网络丢包率不同的情况下MADM、Securetraceroute和Lightweight对恶意节点的检测效果.选择A作为测试节点,在A的路由路径中随机选择路径为不一致路径,设置不一致路径占总路径比例为8%,不一致路径中任意选择一个节点为恶意节点.分别设定网络丢包率为0.5%,2.0%和5.0%,在不同的网络丢包率下执行Securetraceroute和Lightweight,获得检测结果.在网络丢包率为0.5%时,设置证据生成报文发送区间为50ms,证据生成报文发送长度为16bytes,误差容忍度为1%;在网络丢包率为2.0%时,设置证据生成报文发送区间为100ms,证据生成报文发送长度为32bytes,误差容忍度为5%;在网络丢包率为5.0%时的证据生成报文发送区间设置为150ms,证据生成报文发送长度设置为64bytes,误差容忍度设置为10%(见表3).在不同丢包率下执行MADM,获得检测结果.网络丢包率/%时间区间/ms报文长度/bytes误差容忍度/%0.52.05.0实验结果如图9~图11所示,可以发现在不同的网络丢包率下,Securetraceroute和Lightweight检测恶意节点的查准率不同.图9是丢包率为0.5%的情况,Securetraceroute的查准率尚能保持在90%左右.图10和图11显示丢包率上升时,Securetraceroute发送的probe报文丢失率增加,节点没有接收到probe报文,不能反馈检测结果,因此Securetraceroute误判率上升,查准率下降.Lightweight也有类似的情况,当丢包率为0.5%时查准率在89%左右,而丢包率为5.0%时,查准率已经下降到49%.在丢包率为0.5%时,MADM的查准率保持在91%左右.当丢包率上升的时候,由于采取增加证据生成报文发送时间、增加证据生成报文长度、同时调整误差容忍度的措施,图10和图11显示MADM的查准率仍然保持在86%左右,表明MADM在网络丢包率较大时仍然具有较好的查准率.综合以上实验结果可知,与Securetraceroute和Lightweight检测机制相比,MADM能够对不一致路径中的恶意节点进行有效检测,在查全率和查准率两个指标上都有优于另外两个机制的表现,即使在网络丢包率较高的情况下仍然可以有效检测恶意节点.Page146结束语本文对域间路由路径不一致问题进行了深入研究,提出了一种不一致路径恶意自治系统检测机制MADM,弥补了已有工作的不足.MADM利用路由证据将自治系统的路由行为与其自身相绑定,从而可以追究自治系统的路由行为.MADM设计了不一致路径恶意节点的检测方法,源自治系统与其他自治系统比较路由证据,依据证据比较结果发现恶意节点.仿真结果表明,MADM在查全率和查准率两个指标上的表现都优于Securetraceroute和Lightweight,并适用于网络丢包率较高的环境.下一步工作中,我们会研究当不一致路径包含多个恶意节点时,如何对多个恶意节点进行检测.同时本文仅介绍了不一致路径中恶意节点的检测方法,在未来工作中将研究如何对恶意节点实施路由控制,从根本上解决域间路由路径不一致问题.
