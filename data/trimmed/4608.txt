Page1一种基于遗传算法的虚拟机镜像自适应备份策略1)(中国科学院软件研究所北京100190)2)(计算机科学国家重点实验室北京100190)3)(中国科学院大学北京100190)摘要虚拟机镜像备份是保障虚拟化数据中心服务可靠性的关键技术.同时,为了节省存储空间,镜像备份过程往往伴随着数据去冗余操作.然而,镜像备份和数据去冗余都会占用大量系统资源,会对在数据中心托管的应用性能造成严重干扰.如何缩短备份与去冗余时间以降低对应用造成的性能干扰成为数据中心管理的关键问题.当前常用的备份策略可以分为3种:先去冗余再备份、先备份再去冗余和边去冗余边备份.每种策略都有不同的资源需求,适用于不同的应用场景,而合理的组合策略可以有效缩短备份时间.该文提出一种基于遗传算法的虚拟机镜像自适应备份策略.我们首先针对不同的虚拟机镜像备份策略,分别建立资源需求模型,然后根据系统当前资源占用情况自适应的进行策略规划,以最小化备份时间.实验结果表明:该文所提出的模型可以在2%~10%误差范围内预测去冗余备份时间,采用所提出的组合策略可以减少20%左右的备份时间.关键词虚拟机镜像;镜像备份;数据去冗余;遗传算法;组合策略;云计算1引言虚拟化技术已经在数据中心广泛应用,而且虚拟机已逐步取代物理机成为应用服务的部署环境.虚拟机的磁盘信息(操作系统、应用软件、软件配置和用户数据等内容)都封装在虚拟机镜像中.虚拟机镜像备份是保障数据中心可靠性的关键技术.由于虚拟机镜像具有封装性,镜像在存储过程中以一个整体的形式存在,这就不可避免的造成镜像备份数据的大量冗余.为了节约存储空间,数据中心通常在镜像备份操作的同时采用内容寻址(ContentAddressableStorage,CAS)技术[1-3]消除冗余数据.内容寻址技术首先利用哈希函数(如MD5,SHA-1)计算数据块的指纹,并将该指纹作为存储数据块内容的地址.于是,在数据存储中相同的数据只存储一份,从而达到数据去冗余的目的.虚拟机镜像备份通常伴随着数据去冗余操作,我们将该备份过程称为虚拟机镜像的去冗余备份.由于去冗余备份过程会占用大量系统资源,数据中心一般会选择在负载较低的时间段进行备份操作.研究指出[4],虚拟化数据中心每天负载较低的时间段极短.如果在特定的时间窗口内不能完成备份操作,就有可能导致服务违约的情况发生;而如果放弃备份,则可能导致系统存在可靠性风险.因此,加快去冗余备份速度,可以使系统在有限时间内备份更多的数据,同时避免因性能干扰而导致的服务质量违约的情况发生.去冗余备份操作可以被分解为一系列子任务,根据子任务执行顺序和执行位置的不同,常见的备份策略可以分为先备份再去冗余策略(DeduplicationAfterBackupstrategy,DAB)[5]、先去冗余再备份策略(DeduplicationBeforeBackupstrategy,DBB)[6]和边备份边去冗余策略(DeduplicationDuringBackupstrategy,DDB)[7-8]等3种.不同策略中相同的子任务对资源的需求程度不尽相同,通过合理配置备份策略,可以在一定程度上避免对同种类型资源的竞争,为缩短虚拟机镜像备份时间提供了可能.针对上述问题,本文首先提出了一种去冗余备份时间预测模型用于预测不同组合策略下的虚拟机镜像备份时间.其次,根据运行时各种物理资源的占用情况,利用遗传算法以模型预测的镜像备份时间作为评价因子,自适应的给出近似最优的组合策略方法.实验结果表明,我们的方法可以有效降低虚拟机镜像备份时间.本文第2节介绍研究背景和研究动机;第3节介绍虚拟机镜像备份时间预测模型;第4节给出基于遗传算法的组合策略方法;第5节描述实验环境,对实验结果进行分析以验证本文所提出方法的有效性;第6节分析并比较相关工作;第7节对文章内容进行总结,并给出进一步的研究方向.2研究背景与动机2.1研究背景虚拟机镜像存储涉及两类设备:运行主机和备份存储.运行主机用于虚拟机运行时磁盘文件存储,备份存储则用于镜像备份文件存储.运行主机和备份存储并非一一对应,一个备份存储设备可用于多个不同运行主机的数据备份.本文中,我们把共享一个备份存储设备的运行主机视为一个集群(Cluster).在镜像备份中,我们把运行主机称为客户端(Client),而把备份存储设备称为服务器端(Server).虚拟机镜像备份时需要在客户端和服务器端创建一个备份线程,该线程负责将虚拟机镜像从客户端传输到服务器端进行存储.如图1所示,虚拟机镜像备份去冗余的策略主要包括DAB、DBB和DDB等3类.图1中“原始镜像”代表需要备份的虚拟机镜像,“备份镜像”代表保存到备份存储设备的无冗余虚拟机镜像备份,虚线矩形框代表临时中间存储.下面我们对这3类主要策略分别进行介绍.(1)先备份再去冗余策略(DAB).先将虚拟机镜像通过网络从运行主机传输到备份存储设备,然后在备份存储设备执行去冗余操作,如图1(a)所示.由于去冗余操作在备份存储设备中执行,不会对主机所托管应用的正常运行产生性能干扰,因此,我们并不关心此策略中去冗余操作的执行时间.该策略适用于运行主机资源相对紧张、备份存储设备资源相对充足、网络传输代价相对较低的场景.(2)先去冗余再备份策略(DBB).先在运行主机进行虚拟机镜像去冗余,并将去冗余后的镜像临时存储到运行主机上,再通过网络将去冗余后的镜像传输到备份存储设备进行持久化存储,如图1(b)所示.该策略的优点是网络传输和去冗余操作可以分开进行,即可以充分考虑网络负载状况以选择合适Page3的网络传输时机.因此,该策略适应于运行主机资源相对充足、备份存储设备资源相对紧张、网络传输代价较高的场景.(3)边去冗余边备份策略(DDB).虚拟机镜像在运行主机进行去冗余操作,并将处理后的非冗余图1去冗余备份策略示例2.2研究动机我们所提出的虚拟机镜像备份策略的基本思想是:由于不同的虚拟机镜像备份策略具有不同的资源需求,所以综合考虑各虚拟机运行环境,选择特定的备份组合策略,可以缩短镜像备份时间.而该思想成立的前提条件是:不同的策略适合不同的应用场景,策略的选择会影响备份时间.这里,我们设计了简单的实验来验证我们思想的合理性.实验采用了4台物理机和3个虚拟机镜像,其中3台物理机(PM1,PM2,PM3)组成备份客户端集群,一台物理机(PM4)作为备份服务器端.每台服务器拥有一个500GBSATA硬盘,一颗Intel(R)Core(TM)i7-2600CPU,4GB内存和一个Intel(R)82579LM网卡.3个虚拟机镜像的原始大小如表1所示,分别放置到PM1、PM2和PM3上,实验过程中我们将3个虚拟机镜像备份到PM4上.每个镜像有3种不同的策略选择,因此,共有33种不同组合策略.为了便于数据块通过网络实时地传输到备份存储设备进行存储.与先去冗余再备份策略相比,该策略少了中间存储的环节,因此在一般情况下处理速度更快,如图1(c)所示.这种策略适用于运行主机CPU和内存资源相对充足、网络传输代价相对较高的场景.分析问题,我们采用完全内存去冗余方法以避免索引查找过程中可能出现的磁盘瓶颈问题.VM1VM2VM3我们首先测试单纯采用DDB组合策略的虚拟机镜像备份时间.在此次测试中,我们设置了两种备份模式:顺序模式和并发模式.顺序模式是指虚拟机镜像按顺序依次进行备份,在上一个备份任务结束时再进行下一个镜像的备份.并发模式是指几个虚拟机镜像备份任务同时开始.图2所示为在不同模式和组合策略下的备份时间,图中“obo”代表顺序模式而“sim”代表并发模式.在顺序模式中,我们先备份VM1,由于PM1磁盘读写速度的限制,该备份过程的瓶颈在数据块指纹计算方面,该虚拟机镜像Page4备份共消耗186s;之后备份VM2,此时备份瓶颈与VM1相同,此镜像备份中共消耗208s;当VM3备份时,由于备份后镜像大小与镜像原始大小相近,该备份过程的瓶颈在网络传输模块,VM3备份共消耗649s.3个虚拟机镜像备份消耗总时间为1043s.在并发模式下,我们同时备份3个虚拟机镜像,在这种情况下,很难确定瓶颈资源.且由于3个镜像同时备份,在备份存储设备端存在磁盘并发写冲突.在这种模式下,总备份时间为926s,这表明并发模式可以加速备份过程.接下来,我们测试并发模式下两组备份策略组合.组合策略1(图2中的mix1):DDB备份VM1,DBB备份VM2,DAB备份VM3;组合策略2(图2中的mix2):DBB备份VM1和VM2,DDB备份VM3.组合策略1虚拟机镜像备份消耗时间为894s.组合策略2虚拟机镜像备份消耗时间为861s.以上实验结果表明,虚拟机镜像备份时间随组合策略不同而不同,因此,我们可以通过组合备份策略来加速镜像去冗余备份过程,从而验证了本文研究思路的合理性和可行性.3去冗余备份时间模型本文工作的目标是探索一种有效的备份组合策略方法,用于加速去冗余备份过程.为解决这个问题,需要建立资源和任务之间的关联关系模型.我们将复杂的备份过程分解为若干简单子任务.不同策略中,每个子任务的资源需求和执行顺序也不尽相同.我们需要分析不同策略下子任务的执行顺序,建立特定资源约束下子任务的处理时间模型.之后找出整个备份过程中限制备份处理速度的瓶颈,通过分析瓶颈可以估算出整个备份过程的处理时间.3.1任务分解在虚拟机镜像备份中,我们采用数据块级别去冗余[1,9-12]技术,该去冗余备份过程共分为4个不同的子任务:(1)数据指纹计算,将虚拟机镜像划分为不同数据块并计算数据块指纹;(2)指纹查找,在指纹库中查找数据块指纹,从而判断该数据块是否已存在;(3)指纹存储,存储新数据块并更新指纹库;(4)网络传输,将数据块从运行主机发送到备份存储设备.在去冗余备份系统中,虚拟机镜像数据块按一定的顺序执行以上子任务.不同策略下,数据块执行各个子任务的顺序也不尽相同.3.2子任务时间模型在本节中,我们将分析不同策略中子任务执行的先后顺序,建立子任务处理时间模型.3.2.1数据指纹计算子任务数据指纹计算子任务由两种资源敏感型操作组成:原始镜像读取和数据块指纹计算.前者用于将镜像数据块加载到内存,该操作是I/O敏感型操作,我们用Sr表示镜像最快读取速度,后者用于计算数据块指纹,该操作是CPU敏感型操作,我们用Sc表示指纹计算的最大处理速度.在DAB策略中,这个子任务在备份服务器端执行,而在DBB策略和DDB策略中,这个子任务在备份客户端执行.3.2.2指纹查找子任务指纹查找任务是内存敏感型操作,我们用Sm表示指纹查找子任务的最快处理速度.在DAB策略中,指纹查找子任务在备份服务器端执行,而在DBB策略和DDB策略中,指纹查找子任务在备份客户端执行.3.2.3数据块存储子任务数据块存储子任务是I/O敏感型子任务,该任务的处理速度主要取决于服务器端磁盘写速度,我们用Ss表示数据块存储子任务的最快处理速度.在3种策略中,数据块存储子任务均在备份服务器端执行.由于在DBB策略中数据块需要在备份客户端进行临时存储,我们用Sw表示备份客户端最大临时写速度.3.2.4网络传输子任务网络传输子任务是网络I/O敏感型任务,用于将虚拟机镜像从备份客户端传输到备份服务器端,我们用Sn表示网络最大传输速度.表2所示为3种不同策略子任务执行顺序和最大处理速度,箭头代表子任务的先后顺序.Page5策略DABDBBDDB当多个任务同时备份时,不同任务之间由于资源竞争而产生性能干扰.在多客户端备份系统中,共享资源包括网络I/O资源和备份服务器端磁盘I/O资源,这就意味着Sn和Ss是随并发任务数变化而变化的.根据观察,Sn随任务数增加而线性降低,而Ss则非线性变化.假设备份服务器端有k个并发写任务,我们用Ssk务同时使用一条网络通道,不同任务之间根据传输数据量不同而均匀使用网络资源,我们用Sn个任务网络传输速度.DBB中的镜像读操作和临时写操作之间会存在一定的干扰,由于数据中心存储普遍采用RAID、Cache等技术进行读写加速,该干扰基本可以忽略[13-14].在实际操作中两者完成时间几乎同步,因此本文模型只计算读操作完成时间.以上各个量的取值都可以通过离线测试的方法获得.另外,k,j最大取值也可以通过存储设备I/O速度和网络通道I/O速度确定.由于DAB策略中去冗余操作可以在备份服务器端空闲时进行,因此本文模型中并不关心DAB策略中的去冗余操作,即并不关心DAB中的Sc和Sm.由于DAB策略会对备份服务器负载产生影响,当DAB实例超出备份服务器在一个备份周期内的处理能力时,会导致任务无法完成的情况出现.在模型中,我们将应用DAB策略实例数目限定为M(M取决于备份服务器在一个周期内的最大处理能力),将其控制在备份服务器处理能力范围之内,以避免任务无法完成的情况发生.我们用T代表虚拟机镜像大小,对于每个虚拟机集群C,所有虚拟机镜像总大小为∑i∈CTi.通常情况下,去冗余之后的镜像大小要小于原始镜像大小.为了评估备份操作时间开销,我们首先评估备份后镜像大小T.我们假设虚拟机镜像冗余率为r,镜像备份大小可以根据式(1):通过我们之前工作中的方法[15],我们可以轻易地获得r的近似值,集群中所有镜像的总大小为∑i∈CTi×ri.3.3备份时间预测我们已经建模了每个子任务的处理数据量和数据处理速度,这样就可以计算子任务的处理时间.我们用tr代表镜像读取时间,tc代表指纹计算时间,tm代表索引查找时间,tn代表网络传输时间,tw代表临时数据块写时间,ts代表备份服务器端数据块写时间.备份时间取决于最慢的子任务.在DDB策略中,由于流式数据处理,子任务可以同时进行.而在DBB策略中,由于非冗余的数据块需要在备份客户端方面进行临时存储,去冗余过程与网络传输过程之间存在一定的时间延迟.式(2)用于计算每种策略的备份时间.与DAB和DDB不同,DBB策略的去冗余过程可以使用存储客户端资源而不干扰其他备份任务,因而可以立即开始.在DAB和DDB策略中,仅有部分的任务可以立即开始,其他任务则需要等到这些任务结束时开始.表3列出每种策略子任务的处理速度计算公式.除此之外,由于指纹保存在备份服务器端,在进行客户端去冗余时,需要将指纹传输到客户端.我们采用聚类分组的方式进行去冗余[15],分组的原则是分组内指纹总量不超过可用内存大小.在系统规模稳定的情况下,备份客户端镜像数量固定,指纹传输时间可以近似认为是常数时间C.烄max(tr,tn,ts),在DAB情况下max(tr,tn,tc,tm,ts),max(tr,tc,tm,tw)+timedelay+max(tn,ts),t=烅烆tr=tn=tc=tm=ts=tw=4基于遗传算法的自适应备份策略通过上文所述模型我们可以预测去冗余备份的处理时间.本章将介绍基于遗传算法的自适应备份策略,并将其与贪心算法进行对比.Page64.1基于遗传算法的策略选择我们将从以下5个方面介绍基于遗传算法(GeneticAlgorithm,GA)的自适应备份策略:编码、交叉算子、变异算子、适应度函数和选择算子.编码是将问题解用方便于机器处理的格式进行描述,算法的执行过程是对问题解编码的操作过程.交叉算子和变异算子模拟了生物进化过程中的杂交和变异过程,用于迭代生成新一代的种群个体.适应度函数是对种群个体优良程度的一种评估,即对问题解优劣的评估.选择算子的目的是选择较为优良的个体进行进一步迭代处理.算法在每一次迭代中通过以上几种算子的操作生成新个体和选择优秀个体,直到满足条件的个体出现.4.1.1面向对象编码遗传算法是一种通过模拟自然进化过程搜索最优解的方法,问题解用“染色体”表示,染色体是由“基因”编码组成的.编码通常是由字符串或数字组成.我们的问题中有3个优化目标,这3个目标是非对称的(即在染色体中一个优化目标编码是唯一的,另外两个优化目标编码则是可重复的).单纯的字符串和数字编码无法实现此目标.为解决这个问题,我们提出了面向对象的编码方式,用对象表示一个基因编码.一个基因编码代表一个备份任务线程.基因对象有3个不同属性,分别代表任务顺序(sequence)、任务策略(strategy)和网络通道(taskQueue).其中sequence值在染色体中是唯一的,而strategy和taskQueue值则可重复.图3为染色体示例.图3中矩形框代表一个基因,矩形框中的字符代表属性.下划线前的第一个数字代表sequence属性,下划线后的字母代表strategy属性.其中‘A’代表DAB策略,‘B’代表DBB策略,‘D’代表DDB策略.字母后面的数字代表taskQueue属性.4.1.2交叉算子交叉算子用于生成新的染色体,该算子的操作数是一对已存在的染色体.这对父染色体交换各自的基因片段生成子染色体.图4所示为交叉算子操作过程,‘P1’和‘P2’代表两个父染色体,而‘S1’和‘S2’代表两个子染色体.基因片段交换可能导致sequence属性值重复,为保障sequence值的唯一性.我们需要交换交叉点所在基因位点的重复值和原始值.例如,图4中‘P1’的基因‘2_D1’与‘P2’的基因‘0_A1’进行交换,其中‘0_A1’中的顺序属性值为‘0’.然而P1中的一个基因‘0_D3’的顺序属性值同样为‘0’.因此,我们将‘P1’中位点的顺序属性‘2’与‘0’进行交换.此时,‘S1’中基因变为‘2_D3’.而基因中另外两个属性值是可重复的,因此,我们在基因交换过程中并不对其进行干涉.4.1.3变异算子变异算子用于由单个父染色体生成新的染色体.首先,随机选择一个基因位点,将其属性值在各自取值范围内进行变异.对于sequence属性,随机赋予一个小于染色体长度的值;对于taskQueue属性,随机赋予一个网络通道数范围之内的值;而对于strategy属性,随机赋予‘A’,‘B’,‘D’中的一个字符.图5所示为变异算子操作过程.图5中‘7_B1’变异为‘2_A1’.同交叉算子相同,sequence属性值在染色体中为唯一值,变异之后同样需要进行交换.4.1.4适应度函数适应度函数是遗传算法中的重要函数,用于评价染色体所代表问题解的优劣.本文中,我们用预测的去冗余备份时间作为适应度函数的值.每个备份线程的备份时间δt可以通过式(2)计算.对于每个备份任务,其开始时间记为st,则结束时间可以通过公式et=st+δt计算.适应度函数的值等于最后一个备份任务的结束时间et与第1个线程的开始时间st之差.4.1.5选择算子选择算子用于从种群中选择优秀个体.算法首先按照适应度函数对当前种群中的染色体进行排序.之后选择当前种群中的前n个染色体,并将其保留到下一代种群中,当前种群中其他染色体则被Page7丢弃.算法1给出了策略选择算法的伪代码.算法输入包括任务数n,网络通道数m,种群大小p,选择、交叉、变异个体的比例为α、β、γ.算法输出为染色体编码而成的近似最优解c.算法第1行初始化第一代染色体.之后开始算法迭代过程.第3行中的B代表当前种群的精英个体集合,S代表通过交叉算子生成的个体集合,T代表通过变异算子生成的个体集合.算法第4行是选择算子操作过程.第5~9行是交叉算子操作过程.第10~13行是变异算子操作过程.第14行中B,S,T集合共同组成下一代种群.第15行中算法终止条件可以为达到一定的迭代次数结束或种群中优秀个体的适应度值不再发生变化结束[16]等.第16行中按照适应度函数值对种群中个体进行排序.第17~18行返回适应度最高的个体.算法1.策略选择遗传算法.输入:备份客户端数n,任务队列数m,种群大小p,选输出:近似解c1.Initialize(pool,p)2.REPEAT3.B←S←T←4.B←selection(pool,α)5.FORi=1TOβ×p/2DO6.x←rand()7.y←rand()8.S←S∪crossover(best,x,y)9.ENDFOR10.FORi=1TOγ×pDO11.x←rand()12.T←T∪{mutation(best,x)}13.ENDFOR14.pool←B∪S∪T15.UNTILcondition16.sort(pool)17.c←pool[0]18.RETURNc4.2解空间分析本节中我们将分析问题解空间,并给出选择遗传算法解决问题的原因.4.2.1解空间大小如前文所述,我们知道对于所有任务而言有3种不同的备份策略可供选择.每个任务只能选择唯一一种策略,假设有n个不同的任务,则有3n种不同的选择.如果有m条不同的网络I/O通道用于连接客户端和服务器端,则每个任务有m条不同网络通道可供选择,即有mn种不同的选择.除此之外,尽管备份系统是分布式的,并不是所有的备份任务可以同时进行.因此,我们需要安排每个任务的顺序.这个问题类似于旅行商问题(TravellingSalesmanProblem,TSP),其选择空间大小为节点数的阶乘.因此,策略选择问题的解空间的大小为(3m)n×n!.4.2.2可选算法组合优化问题的求解方法可以分成两大类,即精确方法(如线性规划、动态规划等)和启发式方法(如贪心算法、遗传算法和模拟退火算法等).为避免组合爆炸问题,在这种时间和空间复杂度下,一切精确算法都显得无能为力.因此,在本文中我们用遗传算法解决此问题.遗传算法通过模拟自然选择的过程实现启发式搜索.遗传算法共有3种重要算子:选择算子,变异算子和交叉算子.变异算子和交叉算子用于生成下一代染色体.选择算子用于根据适应度函数从当前种群中选择优秀个体.所有这些算子都建立在问题解的合理编码上.策略选择问题有3个优化目标.第1个目标用于决定任务顺序;第2个目标用于为每个任务选择特定的策略;第3个目标用于为每个指定网络I/O通道.为实现这几个优化目标我们在解决方案中采用面向对象编码.为了与遗传算法进行对比,以验证其有效性,我们同样实现了解决此问题的贪心算法.贪心算法采用与遗传算法相同的问题解编码.算法2为贪心算法的实现过程.在算法每次循环中,遍历所有未非分配的备份客户端,为其分配所有可能的策略和任务队列,找出当前步骤中最优的策略配置,直到所有的备份客户端都分配完.算法2.策略选择贪心算法.输入:备份客户端X输出:近似解C1.U←X2.C←3.WHILEU≠DO4.selectc(strategy,taskQueue)∈Uthatminimizes5.U←U-c6.C←C∪{c}7.ENDWHILE8.RETURNCPage85实验验证5.1实验设置为验证本文工作的有效性,本文中实验采用的数据集选自真实云计算环境OnceCloud①平台中的100个虚拟机镜像备份.这些镜像隶属于10台不同的刀片服务器.表4所示为实验采用的不同镜像的种类与数量.物理机的本地存储存放虚拟机镜像,备份存储设备采用磁盘阵列.每台刀片服务器拥有两颗IntelXeonE5645CPU,32GB内存,两块300GB7200RPMSATA硬盘组成RAID0.磁盘读速度为300MB/s.磁盘阵列拥有12块3TB10000RPMSCSI硬盘组成RAID5.共有4条千兆网络通道连接运行主机和备份存储.每条网络通道速度可以达到120MB/s.每个镜像备份大小在20GB~30GB之间,镜像总大小为2.8TB.每个镜像中约有40%~90%的数据重复.在一周时间内我们每天对这些镜像进行备份,每日备份数据量约为1TB.图6所示为实验网络拓扑图.实验中采用的备份周期为1d(24h),DAB策略实例数目限定为5(即M=5).我们实现了包括DAB,DBB,DDB等3种不同备份策略.对于DAB,其去冗余过程可以在系统的任意系统负载较低时执行,因此在实验中我们并不计算去冗余过程的时间.5.2模型准确性在该实验中,我们验证去冗余备份模型预测的准确性.我们用模型预测给定策略下虚拟机镜像日常备份操作时间.之后将预测时间和真实备份时间进行对比.每天备份中我们测试两种不同组合策略.表5所示为策略组合1、2中采用不同策略的镜像数目.实验结果如图7所示,图中x轴代表日期代表第x天,y轴代表每日备份时间.图中共有4个图例:“预测1”和“真实1”、“预测2”和“真实2”,分别代表第1种组合策略下模型预测时间组合策略和真实备份操作时间、第2种组合策略下模型预测时间组合策略和真实备份操作时间.表5策略组合1、2中采用不同策略的镜像数目镜像类型从图中我们可以看出,模型的预测结果接近真实操作结果组合策略,模型的最大预测误差出现在第1天第2种组合策略为9.9%,最小预测误差出现在第7天第1种组合策略为2.5%,模型的平均预测误差为4.5%.我们的模型适用于系统负载相对稳定的情况,真实系统中负载如果发生较大波动,可能对模型准确性预测造成影响,导致误差的产生.①Oncecloudplatform是中国科学院软件研究所软件工程中Page9另外,模型输入中去冗余后数据量T是通过采样的方式进行预测的,该过程也会存在一定的统计学误差,对模型预测结果产生影响.本节实验结果表明本文中所提出的去冗余备份时间模型在实验环境下具有较高的准确性.5.3策略选择算法的有效性本节实验验证策略选择算法的有效性.实验选取5种不同组合策略进行对比,比较不同组合策略下的备份操作时间.图8表现了不同组合策略下的备份预测时间,图中带☆标记的实线代表单纯由DAB策略构成的组合策略(即DABonly)下的预测时间,带○标记的实线代表DBBonly策略下的预测时间,带×标记的实线代表DDBonly策略下的预测时间,带△标记的实线代表根据贪心算法得出的策略的预测时间,带□标记的实线代表根据遗传算法得出的策略预测时间.如图8所示,在单一策略组合策略中,DDBonly策略最节约时间,甚至优于采用贪心算法的混合策略.而在混合策略中,基于遗传算法得出的结果优于基于贪心算法得出的结果.以第1天结果为例,DDBonly组合(DDB策略)的备份预测时间为8988s,根据遗传算法(GA策略)的预测时间为7278s,GA策略与DDB策略相比可减少23.5%的操作时间.从图中我们可以看出GA策略可以缩短17.3%~23.5%的备份时间,这是由于在同一时刻3种策略的瓶颈资源不相同,而我们所提出的策略可以尽可能合理地分配任务顺序和策略,从而避免资源竞争.值得注意的是,贪心算法策略反而不及DDBonly策略,这是因为贪心算法并不考虑潜在的资源冲突,而是在规划的过程中仅仅考虑当前的最大收益.图9对比了GA组合策略和DDB策略下预测和备份操作时间.图9坐标轴与图8坐标轴含义相同.带○标记的实线代表GA策略真实操作时间,带×标记的实线代表DDBonly策略的真实操作时间,带☆标记的实线代表GA组合策略的预测时间,带□标记的实线代表DDBonly策略的预测时间.由于DABonly策略和贪心算法组合策略备份时间过长,我们没有进行实验.图中我们可以看出,GA组合策略的备份操作节省了18.7%~24.3%的时间,而预测时间节省了17.3%~23.5%的时间,两者之间存在的误差在可以接受的范围之内.图9GA组合策略与DDB组合策略预测和备份时间实验结果表明本文提出的策略能够有效地减少虚拟机镜像去冗余备份的时间,同时在组合策略中遗传算法优于贪心算法.5.4策略选择算法的收敛性本节实验验证遗传算法的收敛性.实验设定的算法终止条件为“种群中优秀个体的适应度值不再发生变化”.实验中我们记录每次迭代后染色体的适应度函数值.图10所示为适应度函数值分布.x轴坐标代表当前种群中第x个个体,y轴坐标代表个体对应的适应度函数值.3个子图分布代表不同种群大小下适应度函数值分布.图例中“n=k”代表第n代种群.图10(a)所示为种群大小为10的情况下种群中个体适应度函数值分布.□代表第1代种群适应度函数值,×代表第50代种群适应度函数值,+代表第200代种群适应度函数值.在种群大小为10的情况下,算法可以在500代之内收敛.图10(b)所示为种群大小为20的情况下种群中个体适应度函数值分布.图10(c)所示为种群大小为50的情况下种群中个体适应度函数值分布.在种群大小为20和50的情况下,算法可以在100代之内收敛.本节所示实验表明遗传算法具有很好的收敛性.算法能在500代之内收敛,而且种群越大,收敛速度越快.在给定的实验条件下,当种群数量为20时,继Page10续扩大种群数量对于算法收敛速度并无太大影响.图10不同参数下GA算法染色体适应度函数值分布6相关工作数据去冗余研究广泛地采用遗传算法寻找指向相同实体的记录[17-20].然而,这些工作是将遗传算法应用在去冗余过程中,其目的主要用于消除数据冗余[15,21].在本文中,我们采用遗传算法选择合适的去冗余备份策略.去冗余是基于CAS技术实现的,由于备份系统通常是包括备份客户端和备份服务器端的两层架构,因此,去冗余备份的顺序和位置是需要重点研究的问题.Mandagere等人[22]采用真实数据,通过实验表明了不同的去冗余技术可以导致CPU使用率和去冗余时间的差异.该工作虽然讨论了是在客户端还是在服务器端进行去冗余的问题,但是并没有给出相应的解决方案.在之前的工作中[15],我们提出了先备份再去冗余策略,先去冗余再备份策略和边去冗余边备份的策略.Fu等人[6]采用“源”去冗余(sourcededuplication)方案在私有云计算环境中实现了虚拟机备份.备份数据先在“源”端进行聚合再传输到备份端.论文中的“源”去冗余跟我们提出的DBB策略类似,但“源”去冗余需要占用大量的CPU资源和内存资源.而我们的目标之一就是权衡资源使用率和备份效率.Park等人[23]采用排队论模型分析数据达到率对系统吞吐量的影响,论文中并没有提及具体采用的是单一策略.Bhagwat等人[5]提出了基于文件相似性的ExtremeBinning方法执行去冗余操作,该系统在备份端执行去冗余操作,是一种典型的DAB策略.Min等人[24]设计了基于PRUN[7]的原型系统,该系统采用的是DDB备份策略,将数据切分和指纹计算模块放置在备份客户端,数据通过stream方式发送到服务器端执行去冗余操作.Xing等人[25]通过优化数据块路由算法提高去冗余的性能.Jin等人[26]将去冗余技术引进到虚拟机镜像存储中,通过实验表明了在虚拟机镜像去冗余中变长切分和定长切分效果相近.Jayaram等人[27]分析了虚拟机镜像的相似性,指出虚拟机镜像具有小范围相似的特点.Zhang等人[8]针对大规模的虚拟机镜像去冗余提出了一种低开销可扩展的解决方案,核心思想是在实际的存储中进行重复数据检测,而不Page11是内联去冗余.该方法将数据索引进行划分,在不同虚拟机之间执行去冗余,本质上是一种DDB策略.以上工作都是采用单一策略进行去冗余,由于不同的备份策略存在不同的资源需求,多个主存储设备上的镜像就会向同一个备份发送数据并执行去冗余操作.然而,采用单一策略会造成传输带宽竞争和并发写冲突,导致去冗余备份性能降低.本文工作的主要贡献就是针对不同策略的资源需求进行优化,最大化资源利用率,提高虚拟机镜像备份效率.此外,Li等人[28]和Xia等人[29]均提出混合不同去冗余方法提高备份性能.与本文方法的不同之处是,他们都是先采取一种粗粒度的方法对数据进行处理再采取另外一种细粒度的方法对数据进行处理,这样会导致数据的重复处理.本文方法在合理进行资源配置的同时,还可以有效避免数据重复处理带来的额外开销.7总结与讨论虚拟机镜像去冗余备份是数据中心重要技术,而镜像去冗余备份通常会干扰正常运行的虚拟机性能,而缩短备份操作时间对于缓解这种干扰具有重要意义.不同的备份策略资源需求不尽相同,从而使得不同场景下的组合策略进行去冗余备份来减少备份时间具有合理性和可行性.本文中,我们首先建模了3种不同策略下的备份时间预测.然后,采用遗传算法为每个虚拟机集群分配不同的备份策略.通过对任务顺序、备份策略等的合理配置,我们尽可能地消除资源竞争.实验表明,我们的工作可以降低17.3%~23.5%的备份操作时间.本文中讨论的3种备份策略为主要的备份策略,除了这3种策略之外还有其他类型的备份策略,例如DDB策略的变种DDB-v,先将镜像数据块传输到备份存储设备再在备份存储设备进行实时的去冗余.这种策略相对来讲有更高的资源需求,因此并不适合我们的处理环境.所以在本文中我们只考虑DAB、DBB和DDB这3种备份策略.我们的工作也存在一些不足,需要进一步的完善.首先,并发线程数只能根据用户经验进行配置,无法做到自动获取.DAB策略中数据写到磁盘上的单独区域中,无需读/写锁.而对于DBB和DDB由于数据需要写到同一存储区域中,因此需要读/写锁来规范不同线程的行为.可行的解决方法就是通过大量的离线测试制定相应的启发式规则来决定并发线程数.其次,由于存在客户端去冗余,数据指纹库需要进行同步,方法中并没有采用实时一致性对指纹库进行更新,因此在备份结束时需要对指纹库进行一致性扫描,找出其中指向不同存储区域的相同指纹,并执行数据回收操作.
