Page1云环境中跨虚拟机的Cache侧信道攻击技术研究梁鑫桂小林戴慧臖张晨(西安交通大学电子与信息工程学院西安710049)(陕西省计算机网络重点实验室(西安交通大学)西安710049)摘要在云计算环境中,不同租户的虚拟机可能运行于同一台物理主机之上,即虚拟机同驻.同驻的虚拟机之间共享物理主机的计算资源,并依赖于虚拟机监控器进行系统资源的分配与调度.这种跨域共享虽然提高了资源使用效率,但也给用户的隐私安全造成严重威胁.恶意租户通过探测共享资源的状态信息,建立泄漏模型,便可绕过虚拟化提供的隔离性,窃取其它同驻虚拟机的隐私信息,这种攻击模式通常称为跨虚拟机的侧信道攻击.文中深入分析了跨虚拟机Cache侧信道攻击的机理和实现方式,对跨虚拟机Cache侧信道攻击技术的研究现状与进展进行总结.首先,分析总结了Cache侧信道信息泄露的本质原因;其次,回顾了跨虚拟机Cache侧信道攻击的起源与研究进展,讨论了其与传统Cache侧信道攻击的关系,并提出跨虚拟机访问驱动Cache侧信道攻击的通用模型;然后,分类归纳并重点阐述了虚拟机同驻相关问题以及当前用于跨虚拟机Cache侧信道信息探测的主流方法;最后,分析了目前研究中存在的问题,并展望了未来的研究方向.关键词云计算;缓存;侧信道攻击;虚拟机同驻;虚拟化1引言云计算[1-2]作为一种新型的网络计算模式,通过网络以按需、易扩展的方式为用户提供各种虚拟的IT资源和应用服务,支持用户在任意位置、使用多种终端进行访问.云计算不仅大大减轻了用户的计算和存储负担,降低了用户对各种IT基础设施的购置和管理维护成本,也使得企业用户可以根据需求的变化随时进行应用的快速重新部署和动态扩展.然而,在已经实现的云计算服务中,安全和隐私问题[3-6]一直令人担忧,并已经成为阻碍云计算推广和普及的主要因素之一.基于虚拟化环境提供的逻辑隔离,采用访问控制[7]、入侵检测[8-9]等方法可以增强云计算环境的安全性;但是,隐私泄露问题依然存在,因为底层共享的硬件资源容易引发侧信道攻击(Side-Channel-Attacks,SCA)[10]的威胁.侧信道攻击是一个经典的研究课题,由Kocher等人[11]于1996年首先提出.侧信道攻击是针对密码算法实现的一种攻击方式,当密码算法具体执行时,执行过程中可能泄露与内部运算紧密相关的多种物理状态信息,比如声光信息、功耗、电磁辐射以及运行时间等.这些通过非直接传输途径泄露出来的物理状态信息被研究人员称为侧信道信息(Side-ChannelInformation,SCI).攻击者通过测量采集密码算法执行期间产生的侧信道信息,再结合密码算法的具体实现,就可以进行密钥的分析与破解.而这种利用侧信道信息进行密码分析的攻击方法则被称为侧信道攻击.相比于传统Cache侧信道攻击①,跨虚拟机Cache侧信道攻击的相关研究起步较晚,直到2009年由Ristenpart等人[10]首先提出.云计算环境中,云服务供应商为了有效利用物理资源,通常将多个不同租户的虚拟机分配到同一台物理机器上运行,称为虚拟机同驻.虚拟机同驻为跨虚拟机实施攻击提供了便利条件,而同驻虚拟机之间对于CPU、Cache及内存等底层物理资源的共享和争用则天然地为Cache侧信道信息泄露提供了泄露通道.因此,恶意租户可以方便地利用底层共享资源构建侧信道,绕过虚拟化环境提供的逻辑隔离,隐秘地窃取其它同驻虚拟机的隐私信息[12].现有的云安全防护机制很难发现和应对这种非入侵式的攻击,跨虚拟机Cache侧信道攻击已成为云计算环境中威胁用户隐私安全的重要挑战,并得到了国内外研究人员的普遍关注[10,13-14].工业界同样关注跨虚拟机侧信道攻击相关研究,尤其是针对跨虚拟机侧信道攻击的有效防御方法.2010年,Intel公司发布了第1款支持AES-NI指令集的处理器②,用于防御针对AES的Cache侧信道攻击.AES-NI指令集在处理器芯片的定制硬件上执行AES加密/解密操作,由于不需要在内存中建立查找表,其指令在运行时都不会访问内存,因此,可有效防御针对AES的Cache侧信道攻击.随后,AMD公司发布的Bulldozer处理器中加入了对AES-NI的硬件支持③,Intel的CryptographyAPI以及密码库OpenSSL1.0.1④和NSS3.12.2⑤等也增加了对AES-NI指令集的支持.此外,公有云平台AmazonEC2提供的VirtualPrivateCloud(VPC)⑥服务允许租户选择“专用硬件模式”创建虚拟机实例⑦,并承诺租户可以独占使用某个物理平①②intel.com/content/dam/doc/white-paper/enterprise-security-③④⑤⑥⑦Page3台上的硬件资源.虽然租户需要为此额外付费,但这极大地加强了租户之间的物理隔离性,基本杜绝了跨虚拟机Cache侧信道攻击的可能性.SecludIT公司的云基础设施自动检测软件ElasticDetector则宣称可以检测发现云环境中访问驱动的侧信道攻击①.目前,国内对跨虚拟机Cache侧信道攻击的关注和研究相对较少,且尚未有详细全面介绍其攻击机理与研究成果的综述论文.为深入理解跨虚拟机Cache侧信道攻击的机理和实现方式,总体把握其研究趋势,并促进国内在该方向上的研究,本文对云计算环境中跨虚拟机Cache侧信道攻击的相关研究工作进行了分析和总结.本文第2节讨论共享Cache带来的信息泄露问题;第3节对跨虚拟机Cache侧信道攻击进行概述;第4节阐述虚拟机同驻的相关问题;第5节对主流的Cache侧信道信息探测方法进行介绍;第6节讨论现有研究中存在的问题并展望未来可能的研究方向;第7节对全文进行总结.2Cache侧信道信息泄露分析Cache是攻击者构建侧信道时最常用的一类共享资源,因为:(1)CPUCache是最常用的共享资源,只要程序运行,就离不开CPU,也就离不开CPUCache;(2)Cache在系统中位于较低的层级,且缺乏有效的访问控制机制,利用其构建侧信道可以绕过许多高层的隔离机制,比如虚拟化环境提供的逻辑隔离等;(3)Cache拥有一个系统上数据访问和计算操作最细粒度且详细的状态信息,可以为攻击者提供丰富的信息;(4)不同的Cache行为(命中或失效)具有不同的时间特征,可以通过采集Cache时间特征得到Cache侧信道信息,而Cache时间特征的采集方法比较简单;(5)Cache的操作和刷新频率较高,可以提供细粒度的观察结果.分析探讨共享Cache带来的信息泄露问题,对于深入理解Cache侧信道攻击的机理与实现方式来说十分重要.因此,本节将对Cache侧信道信息泄露问题进行详细地分析讨论,其中,2.1节分析Cache可能泄露哪些信息;2.2节讨论Cache泄露的侧信道信息可以用于密钥分析的原因;2.3节讨论Cache侧信道信息为什么会被泄露;2.4节讨论Cache侧信道信息可能通过哪些方式泄露.2.1Cache侧信道信息Cache侧信道信息是指系统中由Cache行为产生的物理状态信息,包括访问时间、功率、电磁辐射等.通常,CPU访问内存中的数据或指令时,根据涉及到的目标数据或指令当前是否位于Cache中,将导致不同的Cache行为,包括Cache命中和Cache失效.而不同Cache行为产生的Cache侧信道信息是可区分的,例如,相比Cache命中,Cache失效会产生对更高一级Cache或内存的访问,从而导致更长的访问时间或者产生更多的功耗等.因此,如果能够观察或测量到算法执行期间产生的Cache侧信道信息,攻击者就可以推断对应的Cache行为,并进一步得到内存访问的一些关键信息,包括:(1)内存访问的部分地址信息Cache是物理标记的,数据在Cache中的位置由其物理内存地址决定.因此,Cache可能泄露内存访问的部分地址信息.例如,目标程序执行期间,攻击者根据访问指定的Cache组产生的侧信道信息,可以推断目标程序是否使用了该Cache组;如果使用了,再根据Cache与内存地址之间的映射关系,就可以得到目标程序执行期间内存访问的部分地址信息.(2)历史内存访问的数据信息或指令信息CPU访问指定的数据或指令时,根据其当前是否被缓存于Cache中,将产生不同的侧信道信息,具体地,当访问一个数据块或指令块时,如果其已经被缓存于Cache中,将发生Cache命中;那么,相对Cache失效来说,将产生较短的访问时间.因此,一个数据块或指令块的访问时间将泄露其是否已被缓存于Cache中这一信息;进一步地,这将泄露历史内存访问的数据信息或指令信息.例如,目标程序执行期间,攻击者访问指定的数据块或指令块,根据访问时间就可以判断它们是否已被缓存,进一步地可以推断目标程序执行期间是否访问过这些数据或指令.综上,利用Cache侧信道信息可以推测得到一些程序执行期间的内存访问信息,包括访问了哪些内存位置的数据,使用了哪些内存页面,或者执行了哪些指令序列等.2.2Cache侧信道信息与密钥之间的相关性算法实现中通常存在一些条件语句、分支语句等,导致算法执行具有数据依赖特性,即相同算法在输入参数不同时,可能具有不同的执行特征.因此,攻击者可以利用算法的执行特征推测输入参数的取值.①Howtodetectside-channelattacksincloudinfrastructures.Page4如图1所示.其中,图1(a)为输入依赖的指令执行,如果A和B的运行时间存在可观察的差异,攻击者就可以根据采集到的时间信息判断执行了哪一分支,进而确定x的取值;图1(b)所示为输入依赖的数据访问,如果攻击者能够确认用户访问了m还是n,就可以确定y的取值;图1(c)所示为输入依赖的执行时间,由于循环次数由输入参数决定,而循环次数又直接影响算法的执行时间,因此,算法执行时间将泄露输入参数z的取值信息.密码算法的执行通常具有密钥依赖特性,主要包括密钥依赖的数据访问模式和密钥依赖的指令执行序列两种.因此,攻击者可以利用密码算法执行中产生的侧信道信息推断其执行特征,再根据执行特征以及具体的依赖关系来反向推测密码算法使用的密钥.例如:现代分组密码算法在实现中通常使用查找表来提高性能,且查表索引通常是密钥相关的,因此,分组密码算法的执行通常具有密钥依赖的数据访问模式.如果攻击者能够获取密码算法查表访问的Cache组地址集合,并将其转换为查表索引,再结合明文或密文就可以进行密钥分析[15],推断出密码算法使用的部分或全部密钥.现代公钥密码算法在加密/解密过程中所要执行的指令序列,由于密钥各二进制位取值不同一般具有很大区别,因此,公钥密码算法的执行通常具有密钥依赖的指令执行序列.比如,模幂运算是RSA加解密的核心算法,其中一种简单的实现方式为平方-乘算法,即将模幂运算分解为一系列平方、乘法以及取模运算.如图2所示,采用平方-乘算法,当指数e的二进制表示中的某一位为1时将比为0时多执行两步运算[13].那么,如果攻击者能够确定算法运行期间执行的指令序列,就可以推测指数e的取值,并进一步破解密钥.2.3Cache侧信道信息泄露来源在云计算环境中,被分配到同一个物理CPU上运行的多个虚拟机之间共享硬件Cache,虽然Cache中的数据是受存储器保护的,攻击者无法直接获取.但是,这些虚拟机在Cache中的数据可能被映射到同一个或多个Cache组甚至Cache行中,这为攻击者提供了一个观察被攻击虚拟机Cache行为的侧信道:攻击者访问其私有数据或执行私有指令时产生的侧信道信息,可以用来推测其它虚拟机的Cache行为.目前,由于共享Cache产生的信息泄露可以分为两类:Cache争用产生的信息泄露和数据重用产生的信息泄露.2.3.1Cache争用产生的信息泄露通常,Cache失效表明发生了Cache争用.如图3所示,虚拟机VM1的内存数据A1,A2与虚拟机VM2的内存数据B1,B2,B3被映射到同一个Cache组中.假设VM2在较短的时间内连续两次访问B1、B2和B3,如果第2次访问B1时发生了Cache失效,则可以判断在VM2的两次访问之间有其它的虚拟机(VM1)使用了相同的Cache组,导致VM2的B1已被驱逐出Cache.在图3中,每个小方块表示Cache行大小的数据块,是Cache与内存之间进行数据传输与分配的基本单位;图中左边表示Cache,每行表示一个Cache组,每个Cache组有W个Cache行,总共有S个Cache组;右边表示内存,每行表示映射到同一Cache组中的所有内存块,即对应于左边同一高度的Cache组.Prime-Probe[10,13-14]攻击方法是Cache争用产生信息泄露的一个典型应用.Prime-Probe攻击中,Page5攻击者利用进程或虚拟机之间的外部Cache访问冲突,在密码进程运行前后分别访问同样的数据来填充Cache,并根据第2次访问各个Cache组时发生了Cache命中(没有争用)还是Cache失效(存在争用),来推测密码进程运行期间访问的Cache组地址集合,再在此基础之上进行密钥分析.2.3.2数据重用产生的信息泄露Cache命中信息能够记录CPU对Cache的历史访问情况.Cache命中表明存在相同数据的重复使用,即CPU曾经访问过相同的数据.如图4所示,假设虚拟机VM1和VM2共享部分内存页面,VM2访问页面A1,A2时,发现A1,A2已经位于Cache中,则可以推断有其它的虚拟机(VM1)在之前使用了A1,A2.Yarom等人[16]提出的Flush-Reload攻击方法是数据重用产生信息泄露的一个典型例子,其假设攻击者和攻击目标共享内存页面,在密码进程执行前将指定地址的一个或多个共享内存块驱逐出Cache,并在加密完成后立即访问这些内存块,然后根据访问时是否发生了Cache命中来推测密码进程执行期间是否使用了其中的一些内存块,进一步地,可以推测密码进程执行了哪些加密指令等.2.4Cache侧信道信息泄露方式共享Cache是Cache侧信道信息泄露的主要方式.云计算环境中,攻击虚拟机和目标虚拟机共享Cache的方式可以分为图5所示.(1)分时共享当攻击虚拟机和目标虚拟机被分配到同一个CPU核心上运行时,如图5(a)所示,它们之间分时复用该物理CPU核心,并由虚拟机监控器(VirtualMachineMonitor,VMM)负责调度、切换运行的虚拟机.这种情况下,攻击虚拟机和目标虚拟机可以共享该CPU的全部多级Cache,但是只能分时共享,并不能同时对Cache进行访问.VMM每次切换运行的虚拟机时,并不会清空该CPUCache中的数据,因此,下一个运行的虚拟机可以探测得到上一个运行的虚拟机的Cache访问信息.通常,攻击者需要寻找并利用虚拟机调度算法的漏洞,来抢占目标虚拟机的调度[13],才能保证攻击虚拟机能够紧随目标虚拟机之后被调度运行;这样,才能在虚拟机切换后探测目标虚拟机之前的Cache访问信息.(2)同时共享当攻击虚拟机和目标虚拟机被分配到同一个CPU的不同核心上运行时,它们之间可以并行运行.这种情况下,如图5(b)所示,攻击虚拟机和目标虚拟机只能共享该CPU的末级Cache(LastLevelCache,LLC),并不能共享各个核心私有的L1Cache或L2Cache.但是,由于它们之间可以同时对LLC进行访问,因此,攻击者可以同步地在目标虚拟机运行期间探测LLC来得到其Cache访问信息[14,17].(3)通过Cache一致性协议共享Cache数据在多处理器系统中,如果多个CPU访问了同样的一块内存数据,那么,这块内存数据可能在不同CPU的多个Cache中都存有副本.Cache一致性协议就是用来解决内存数据与它的多个Cache副本之间的内容一致性问题.即使攻击虚拟机和目标虚拟机被分配到不同的CPU之上运行时,如图6所示,虽然它们之间并不物理上共享Cache;但是,由于图6通过Cache一致性协议共享Cache数据Page6Cache一致性协议,它们也可能会共享一部分Cache数据(同一内存数据在不同Cache中的副本),因此,Cache一致性协议也可以看作逻辑上共享Cache的一种方式.当一个处理器发生Cache失效时,失效的数据是否缓存于另一个处理器Cache中,将产生从另一个处理器Cache读取数据和直接从内存读取数据两种可能,这将导致可区分的Cache访问时间差异[18].因此,攻击者也可以利用Cache一致性协议来探测目标虚拟机是否使用了指定的内存数据[18].本文没有考虑被分配到同一个CPU核心上的虚拟机之间并行运行的情况,这主要是由于以下两方面的原因:一是出于安全性的考虑,公有云平台一般禁止使用超线程或对称多线程技术[13],因此,基本不会发生这种情况;二是即使发生这种情况,也可以同时参考上述两种共享方式产生的泄露问题.3跨虚拟机Cache侧信道攻击概述在云计算环境中,被分配到同一个物理CPU上运行的多个虚拟机之间共享底层的硬件资源,这为恶意租户跨虚拟机实施Cache侧信道攻击提供了极大的便利条件.跨虚拟机Cache侧信道攻击会破坏多租户虚拟机之间的隔离性,从而给其它同驻虚拟机带来严重的安全威胁.同时,由于跨虚拟机Cache侧信道攻击不是利用系统本身的漏洞进行攻击,而是通过共享的底层硬件环境进行攻击,因此极难防御.跨虚拟机Cache侧信道攻击可以看作是传统Cache侧信道攻击在云计算环境下跨虚拟机攻击场景中的一种扩展和应用.因此,3.1节介绍传统Cache侧信道攻击,3.2节分析总结跨虚拟机Cache侧信道攻击与传统Cache侧信道攻击的联系与区别,3.3节介绍跨虚拟机Cache侧信道攻击的研究进展.3.1传统缓存侧信道攻击1998年,Kesley等人[19]提出Cache命中率可用于密码分析的思想.此后,Cache侧信道攻击技术获得研究人员的极大关注并得以迅速发展.最初,Cache侧信道攻击的相关研究工作都是围绕单机环境展开,以数据缓存[20-21]、指令缓存[22-23]等作为研究对象,研究人员提出了多种可行的Cache侧信道攻击方法,并且可以利用这些攻击方法窃取受害者系统中的机密信息,例如AES[20-21,24-25]、DES[26]、RSA[27-30]等加密算法的密钥,这给大部分加密算法的安全性带来了严重威胁.根据采集信息不同,可将传统Cache侧信道攻击分为时序驱动攻击、访问驱动攻击以及踪迹驱动攻击[29].时序驱动攻击[24,26,31]需要采集密码算法一次加密/解密的整体时间,并利用统计分析方法推测密钥.访问驱动攻击[20,25,27,32]需要通过间谍进程采集密码算法一次加密/解密过程中访问的Cache组地址集合,再利用直接分析或排除分析方法推测密钥.踪迹驱动攻击[28-30]需要采集密码算法一次加密/解密过程中所有Cache访问的命中和失效序列,再结合明文或密文推测密钥.传统Cache侧信道攻击方法大多存在先决成立的假设条件,例如时序驱动攻击需要能够获得目标系统的详细配置参数并重建相同的本地对照环境;访问驱动攻击需要能够侵入目标机器并植入间谍进程;踪迹驱动攻击通过计时手段很难实现,需要物理上接触目标机器并精确采集其功率消耗或电磁辐射信息等.这些假设条件在现实环境的攻击场景中往往难以满足,这严重影响了传统Cache侧信道攻击在现实环境中的可行性.3.2跨虚拟机Cache侧信道攻击的起源2009年,Ristenpart等人[10]首次指出云计算环境中存在跨虚拟机Cache侧信道攻击的安全威胁.不同于传统Cache侧信道攻击,同驻虚拟机之间对于Cache、内存的共享和争用天然地为跨虚拟机Cache侧信道攻击的实现提供了便利条件和重要基础,极大地增强了跨虚拟机Cache侧信道攻击在现实环境中的可行性.参考传统Cache侧信道攻击分类,可将跨虚拟机Cache侧信道攻击分为时序驱动攻击和访问驱动攻击,下面分别对其与传统Cache侧信道攻击的关系进行评述.而踪迹驱动攻击在云计算环境中很难实现,目前尚未有相关的研究成果.3.2.1跨虚拟机时序驱动攻击传统时序驱动攻击可以分为远程攻击和本地攻击两种.远程攻击属于非入侵式攻击,攻击者通过网络远程采集计时信息,由于网络传输时延和抖动时延的存在,很难采集到精确的计时信息,而不精确的计时信息对攻击成功率影响较大,因此,远程攻击在真实网络环境下的适用性不强.本地攻击属于入侵式攻击,攻击者需要在攻击目标的操作系统中植入间谍进程来采集计时信息,虽然可以完全消除网络传输时延和抖动时延带来的影响,但是也降低了本Page7地攻击在现实环境中的可行性.由于发生在两个虚拟机操作系统之间,跨虚拟机时序驱动攻击本质上仍属于远程攻击.当攻击者的虚拟机和攻击目标的虚拟机不同驻时,攻击场景与传统远程时序驱动攻击完全一样,因此,跨虚拟机时序驱动攻击通常发生在同驻的虚拟机之间.由于同驻虚拟机之间一般通过宿主机的本地通信信道进行数据交换,因此,跨虚拟机时序驱动攻击采集的计时信息比较精确[33].除此之外,跨虚拟机时序驱动攻击与传统时序驱动攻击并无明显区别.3.2.2跨虚拟机访问驱动攻击与传统访问驱动攻击方法类似,跨虚拟机访问驱动攻击通过监测宿主机的Cache或共享内存,并利用计时手段采集目标进程运行期间通过Cache泄露出来的侧信道信息,再结合其具体实现进行分析,即可能推测得到其它同驻虚拟机的隐私信息.但是,如表1所示,跨虚拟机访问驱动攻击与传统访问驱动攻击也存在许多不同之处,表现在:表1传统跨进程与跨虚拟机访问驱动攻击比较攻击类型攻击场景运行环境攻击方式可检测性传统访问驱动攻击跨虚拟机访问驱动攻击(1)攻击场景传统访问驱动攻击发生在单机环境中的两个进程之间.攻击者需要将间谍进程植入攻击目标的操作系统,再利用系统内多个进程间共享Cache的特点使间谍进程与密码进程同步执行,探测采集密码进程执行期间的Cache侧信道信息.跨虚拟机访问驱动攻击发生在同驻一台宿主机的两个虚拟机之间.攻击者不需要侵入目标虚拟机的操作系统,仅需要和目标虚拟机同驻,就可以探测采集密码进程执行期间的Cache侧信道信息.图7跨虚拟机Cache侧信道攻击研究时间轴跨虚拟机访问驱动攻击中,攻击者和攻击目标分别为同驻一台宿主机的攻击虚拟机和目标虚拟机中的目标进程.攻击虚拟机和目标虚拟机共享覆盖的或相邻的底层硬件资源,可能具有相同的或完全不同的操作系统.系统级虚拟化为跨虚拟机攻击增加了难度,例如,内存虚拟化使得虚拟机内存系统中增加了一级物理地址到机器地址的地址转换,导致内存地址与Cache之间的映射关系更为复杂;同时,系统级虚拟化也使得攻击者拥有其虚拟机操作系统的全部权限,这可以为其提供一些新的能力,例如可以修改操作系统的内存页面大小等.(3)攻击方式传统访问驱动攻击需要侵入攻击目标的操作系统,植入并运行间谍进程,是一种入侵式的攻击方式.跨虚拟机访问驱动攻击的攻击目标从操作系统内部转移到了操作系统外部,不需要侵入攻击目标的操作系统,是一种非入侵式的攻击方式.(2)运行环境传统访问驱动攻击中,密码进程与间谍进程运行在真实物理硬件之上的同一个真实操作系统环境中,它们之间具有完全相同的运行环境,且可以共享该机的全部硬件资源.(4)可检测性传统访问驱动攻击会在目标操作系统中留下攻击痕迹,因此,存在被攻击目标检测发现的可能性.跨虚拟机访问驱动攻击不会在攻击目标的虚拟机中留下任何的攻击痕迹,因此,攻击目标无法检测到这种攻击行为.3.3跨虚拟机Cache侧信道攻击的研究进展近年来,跨虚拟机Cache侧信道攻击研究得到了国内外研究人员的极大关注,并获得了一些新的研究进展,图7为其研究时间轴,其中标示出了跨虚拟机Cache侧信道攻击研究起源与发展过程中具有代表性的文献.下面从时序驱动攻击和访问驱动攻击两个方面分别进行介绍.Page83.3.1跨虚拟机时序驱动攻击研究进展目前,跨虚拟机时序驱动攻击的相关研究较少,已有研究成果也只是将传统时序驱动攻击方法直接应用于跨虚拟机攻击场景中.2012年,Wei等人[33]以运行L4Re微内核的虚拟化平台为例,首先尝试将Bernstein攻击[31]应用于虚拟化环境中同驻的虚拟机之间.2014年,Irazoqui等人[34-35]将Bernstein攻击应用于Xen、VMware和KVM虚拟化环境以及AmazonEC2云平台中,并成功恢复了其它同驻虚拟机中使用的AES密钥的部分比特位.3.3.2跨虚拟机访问驱动攻击研究进展传统访问驱动攻击为Cache的探测和分析奠定了坚实的基础,也为跨虚拟机访问驱动攻击提供了可以借鉴的技术和方法.已有跨虚拟机访问驱动攻击可分为:(1)将传统的访问驱动攻击方法迁移至跨虚拟机攻击场景中,并解决迁移过程中产生的各种问题和挑战;(2)设计实现新的攻击方法.(1)迁移传统攻击方法2009年,Ristenpart等人[10]利用Prime-Probe方法[20]在AmazonEC2云平台中探测得到同驻虚拟机的Cache负载状态信息以及用户击键间隔时间信息等.2012年,Zhang等人[36]基于Prime-Probe方法设计了HomeAlone工具,租户可利用Home-Alone来检测是否有其他租户的虚拟机与其同驻.随后,Zhang等人[13]利用Prime-Probe方法对L1指令Cache进行探测,并设计了一个隐马尔科夫模型过滤探测噪声,成功恢复了其它同驻虚拟机上使用的ElGamal加密密钥.2015年,Younis等人[37]将虚拟机的虚拟地址转换为物理地址,再利用Prime-Probe方法监控这些物理地址是否被其它虚拟机访问过.Liu等人[14]和Irazoqui等人[17]利用大页映射得到的额外物理地址知识来保留LLC和物理内存之间的映射关系,绕过了LLC与内存地址映射不透明的问题,使得Prime-Probe方法可用于探测LLC.在此之前,Prime-Probe方法只能用于探测容量较小的L1Cache.随后,Inci等人[38]和Kayaalp等人[39]对LLC的索引哈希机制进行逆向工程,得到了内存地址与LLC各分片之间的映射关系,解决了LLC与内存地址映射不透明的问题.(2)设计新的攻击方法2014年,Yarom等人[16]假设攻击虚拟机和目标虚拟机共享内存页面,并利用Cache的包容性特点,将Gullasch攻击[21]扩展之后用于探测LLC,提出了第1个可以跨内核进行攻击的Cache侧信道攻击方法(Flush-Reload攻击).2015年,Gruss等人[40]发现缓存刷新指令的执行时间取决于被刷新的内存块是否位于Cache中,他们利用这一点对Flush-Reload攻击进行了改进,提出了Flush-Flush攻击,在缩短了攻击执行时间的同时提高了攻击的隐匿性.2016年,Irazoqui等人[18]基于Cache一致性协议,提出并实现了第1个跨CPU的Cache侧信道攻击方法(Invalidate-Transfer攻击),成功恢复了另一个CPU上运行的加密软件库中使用的AES密钥和ElGamal密钥.通过上述分析发现,跨虚拟机访问驱动攻击的攻击方法更为多样化,随着攻击媒介从L1数据Cache和L1指令Cache,到LLC,再到双路CPU上Cache的变化,攻击的限制条件越来越现实:从要求攻击虚拟机和目标虚拟机同驻一个CPU核心,到同驻一个CPU,再到跨CPU,威胁范围也越来越广.3.4跨虚拟机访问驱动Cache侧信道攻击的通用模型根据3.2.1节的分析,跨虚拟机时序驱动攻击的攻击模式和传统时序驱动攻击并无区别,同时,发表的文献中,已有一些[15,32]对传统时序驱动攻击的攻击模型进行了详细介绍及总结,可供参考,本文不再赘述.而3.2.2节的分析表明,跨虚拟机访问驱动攻击的攻击场景、执行环境以及攻击方式等均与传统访问驱动攻击不同.因此,本节探讨跨虚拟机访问驱动Cache侧信道攻击的攻击模式,给出此类攻击的一个通用模型.3.4.1相关假设为了方便描述,我们将攻击者创建并拥有的虚拟机称为攻击虚拟机,将目标用户创建并拥有的虚拟机称为目标虚拟机.云计算环境中的Cache侧信道攻击一般基于如下假设:假设1.云服务供应商及其提供的底层基础设施都是可信的,而使用云平台的各个租户之间是互不信任的.假设2.攻击者为使用云平台的恶意租户,其拥有目标用户所运行应用的相关背景知识,但不具有任何特殊权限,期望利用侧信道攻击来获取目标用户的隐私信息.假设3.攻击目标为使用云平台的正常租户,他们利用虚拟机运行某些机密性相关的应用,并对外提供公开的服务访问接口.Page9上述假设均符合实际应用场景,即使假设2中针对攻击者背景知识的假设,也具有一定的普适意义.例如,针对特定的目标用户发起攻击时,攻击者通常已经拥有目标用户的背景知识;即使没有,攻击者也可以通过其它方式得到所需背景知识,例如,采用文献[41]和文献[42]中的方法,攻击者可以判断同驻虚拟机是否与其使用相同的操作系统,或者探测得到同驻虚拟机中运行的应用等.3.4.2攻击过程统计分析的攻击方法.攻击过程一般如下:跨虚拟机Cache侧信道攻击本质上是一种基于(1)实现同驻基于一定策略,攻击者创建并运行多个虚拟机实例,并利用虚拟机同驻检测方法逐一判断这些虚拟机是否和目标虚拟机同驻;重复这一过程,直到实现至少一个攻击虚拟机和目标虚拟机同驻为止.(2)探测Cache侧信道信息攻击虚拟机首先根据具体攻击场景(包括攻击虚拟机和目标虚拟机共享Cache的方式,目标虚拟机所运行应用的具体实现特征等)的不同,设计选取合适的Cache侧信道信息探测方法;然后,将Cache设置为一个已知状态,并访问部署在目标虚拟机中的应用;最后,探测并收集目标虚拟机运行过程中产生的Cache侧信道信息.(3)分析Cache侧信道信息将攻击者想要获取的隐私信息标记为K={K1,K2,…,Kn}.目标虚拟机中的应用为了响应攻击者的服务请求,将执行一些操作OP={OP1,OP2,…,OPn},而操作OP与隐私信息K之间通常图8跨虚拟机Cache侧信道攻击通用模型4虚拟机同驻攻击虚拟机和目标虚拟机同驻是攻击者可以跨虚拟机实施侧信道攻击的必要条件和重要基础.然而,随着云计算的快速发展,数据中心拥有的物理机器数量不断增加,例如AmazonEC2的单个数据中心目前一般拥有超过50000①台物理机器.在这一具有依赖关系,即由隐私信息K决定执行哪些操作,可以表示为函数f:K→OP,即OP=f(K);在执行OP时,目标虚拟机访问共享Cache,这将产生一些Cache侧信道信息L={L1,L2,…,Ln};当Cache初始状态相同时,不同的操作OP将产生不同的Cache行为,从而产生不同的Cache侧信道信息,即操作OP与执行操作OP产生的Cache侧信道信息L之间具有强相关性,可以表示为函数g:OP→L,即L=g(OP).通过上述分析,攻击虚拟机可以通过分析探测到的Cache侧信道信息L来推测得到目标虚拟机中的应用具体执行了哪些操作,再结合这些操作(OP)与隐私信息(K)之间的关系,减小K的取值范围或直接推测K的取值.具体地,通过对目标应用的具体实现进行分析,可以建立函数f,并得到其逆函数K=f-1(OP);对具体Cache行为与其产生的Cache侧信道信息进行关联,可以建立函数g,并得到其逆函数OP=g-1(L);在此基础之上,建立泄露模型K=f-1(g-1(L)),即可通过对Cache侧信道信息L进行分析,推测得到目标虚拟机的隐私信息K.图8给出了跨虚拟机Cache侧信道攻击的通用模型.其中,虚拟机同驻是实现跨虚拟机Cache侧信道攻击的重要基础,我们将在第4节中介绍;跨虚拟机Cache侧信道信息探测方法将在第5节中介绍;跨虚拟机Cache侧信道信息分析方法与传统单机环境中的分析方法是通用的,且一般针对具体算法及其实现进行设计,在文献[15,29]中已经详细介绍,本文不再赘述.应用背景下,攻击者可能需要花费大量的时间和精力,才能实现和特定目标虚拟机的同驻.根据3.4.2节有关实现同驻的过程,攻击者创建虚拟机的策略以及同驻检测方法的准确性和效率是影响同驻实现过程的重要因素.因此,4.1节分析①AWSinnovationatscale,AWSre:Invent2014(SPOT301).Page10公有云中虚拟机资源调度策略的脆弱性,这可以帮助攻击者可以更有效率地实现同驻;4.2节分类介绍虚拟机同驻检测方法;4.3节探讨虚拟机同驻检测评估问题,并对已有的各种虚拟机同驻检测方法进行对比分析.4.1虚拟机资源调度策略云平台的虚拟机资源调度策略主要解决的是虚拟机与物理主机的映射问题,包括虚拟机的创建、迁移以及管理等.作为云计算底层的核心技术之一,虚拟机资源调度策略的好坏将直接影响到云平台的整体性能、运营成本以及服务质量等.目前,公有云平台的虚拟机资源调度策略还未形成统一的标准和规范,各大云服务供应商都是根据自身资源的特点以及调度目标等采用不同的调度策略[43],例如,IBM云平台采用性能优先的调度策略,HP云平台采用成本优先的调度策略,AmazonEC2的调度策略综合考虑了成本优先、负载均衡、高可靠性、满足用户不同租用请求等优化目标.通过上述分析可以发现,公有云平台目前采用的虚拟机资源调度策略多是从降低能耗、减少成本、提高资源利用率以及实现负载均衡等角度出发进行优化,而大多忽略了安全上的考虑.因此,攻击者可以分析并利用虚拟机资源调度策略的脆弱性,更有针对性地创建或启动虚拟机来实现与目标虚拟机的同驻[10].例如,为了降低能耗,并提高资源利用率,虚拟机资源调度策略可能将同一时刻提交启动申请的多个虚拟机分配到一台物理主机上运行;再如,为了便于管理,虚拟机资源调度策略可能将业务分类、可用区域、实例类型等启动信息相同的虚拟机分配到一台物理主机上运行.为了应对同驻威胁,公有云平台对虚拟机资源调度策略和网络管理功能进行了优化,在一定程度上增加了实现同驻的难度[44],但是,攻击者仍可以较低的开销实现与目标虚拟机的同驻[44-45].4.2虚拟机同驻检测方法虚拟机同驻检测方法用来判断两个虚拟机是否运行于同一台物理主机之上,高效、准确的同驻检测方法有助于降低攻击者实现同驻的开销.根据同驻检测的基本原理不同,可将虚拟机同驻检测方法分为基于网络信息的同驻检测、基于资源干扰的同驻检测和基于隐蔽信道的同驻检测.4.2.1基于网络信息的虚拟机同驻检测Ristenpart等人[10]发现在AmazonEC2中同驻的两个Xen虚拟机之间具有相同的第1跳IP地址,较短的网络包往返时间,以及数字上接近的内部IP地址;因此,攻击者可以利用两个虚拟机的网络信息来判断它们是否同驻.然而,2015年,Inci等人[38]发现,AmazonEC2已经修复了这些网络信息泄露漏洞,上述利用网络信息进行虚拟机同驻检测的方法在AmazonEC2中都已不再适用.但是,基于网络信息的同驻检测方法仍可能适用于其它的云平台.基于网络信息的同驻检测,利用两个虚拟机的网络信息来判断它们之间是否同驻.优点是实现简单,检测效率较高,且不会对目标虚拟机的运行造成任何影响;缺点是检测准确率不高,且云平台可以很容易地阻止此类检测方法[44],例如利用VPC对不同虚拟机的网络进行隔离等.4.2.2基于资源干扰的虚拟机同驻检测虽然VMM在同驻的虚拟机之间提供了逻辑隔离,但是对于底层共享资源的竞争使用仍然会导致虚拟机之间的相互干扰[10,36,46].物理网卡的多路复用会带来网络包延时问题[47],基于此,Bates等人[48-49]设计了一种同驻水印方法进行虚拟机同驻检测.具体地,进行同驻检测的虚拟机(攻击虚拟机)周期性地占用宿主机的物理网卡,向外发送无意义的网络包;与此同时,通过代理与目标虚拟机进行通信,并测量收集它们之间的网络包通信状况.如果攻击虚拟机与目标虚拟机同驻,每个检测周期内它们将多路复用宿主机的物理网卡,就会导致代理与目标虚拟机之间的网络通信存在一定的延时,这个延时就是同驻水印.因此,通过检测周期内代理与目标虚拟机之间的网络通信是否产生同驻水印,即可判断攻击虚拟机与目标虚拟机是否同驻.Zhang等人[36]设计了HomeAlone工具,租户可利用HomeAlone来检测是否有其他租户的虚拟机与其同驻,验证租户虚拟机对于物理主机的独占使用.其基本思想如下:在每个检测周期内,租户控制其所有虚拟机均不使用某一随机选取的Cache区域,探测该Cache区域的负载状态;若探测到Cache负载状态大于设定的阈值,则表明有其它虚拟机使用了该Cache区域,从而表明存在其他租户的虚拟机与该租户的虚拟机同驻.当目标虚拟机提供公开服务时,其响应服务请求要使用宿主机的Cache资源;如果攻击虚拟机与目标虚拟机同驻,那么攻击虚拟机探测到的宿主机Cache负载值将明显增大;否则,Cache负载值将基本保持不变[10].基于上述事实,余思等人[12]将虚拟Page11机同驻检测问题抽象为Cache负载值集合差异性计算问题:首先,在访问和不访问目标虚拟机的情况下,攻击者可以获取两个Cache负载值集合;然后,对这两个集合进行对比分析,得到Cache负载状态的变化情况;最后,基于Cache负载特征匹配的方式推断目标虚拟机与攻击虚拟机是否同驻.基于资源干扰的虚拟机同驻检测,利用两个虚拟机竞争使用共享资源时是否相互干扰来判断它们是否同驻.优点是检测准确率较高;缺点是实现相对复杂,容易受到同一宿主机上其它虚拟机的干扰,并且可能破坏宿主机的资源可用性.此外,Inci等人[38]发现云平台通过优化资源管理机制和虚拟机隔离机制,可以有效降低同驻虚拟机之间的相互干扰;同时,随着硬件技术的不断发展,云平台中使用的硬件也更加复杂,例如固态硬盘允许多个读/写操作同时进行,在AmazonEC2云平台中已经很难观察到硬件性能上的衰减.4.2.3基于隐蔽信道的虚拟机同驻检测隐蔽信道[50]是指两个合谋的恶意进程通过预先约定的方式操作系统中的共享资源而实现的一种信息传输方式.云计算环境中,合谋的两个虚拟机利用宿主机的共享资源创建隐蔽信道,就可以绕过VMM,以一种隐秘地方式进行通信.Ristenpart等人[10]利用基于内存总线和硬盘访问冲突的隐蔽信道来判断两个虚拟机是否同驻;Inci等人[38]提出一种基于LLC访问冲突的隐蔽信道通信方式用于虚拟机同驻检测.基于隐蔽信道的虚拟机同驻检测基于两个虚拟机是否能够合谋操作同一宿主机的共享资源,来判断它们是否同驻.这种同驻检测方法的优点是误检率低,检测结果比较准确;但是,存在一个致命的缺点,即只能应用于检测与被检测双方均为受控虚拟机的情况,并不适用于现实应用场景中只有攻击虚拟机受控的情况.因此,基于隐蔽信道的同驻检测方法一般用于研究人员在实验环境中确定其创建的两个虚拟机同驻这一事实,并在此基础上,分析同驻虚拟机之间的一些特性.4.3虚拟机同驻检测方法的评估为了客观而准确评估相关虚拟机同驻检测方法的性能,研究虚拟机同驻检测方法的评测指标与测评方法具有重要的理论价值和实际意义.但是,目前有关虚拟机同驻检测方法的研究刚刚起步,而有关其评测研究,则尚未有成熟和完善的理论与方法.本节分析讨论适用于虚拟机同驻检测评估的测评原则,并根据提出的测评原则对已有的各类检测方法进行对比分析.4.3.1虚拟机同驻检测方法的测评原则虚拟机同驻检测方法需要在保证检测效果的同时兼顾检测效率与检测能力,另外,一个好的同驻检测方法应该在现实环境中可行.因此,可以从以下几个方面对虚拟机同驻检测方法进行评估.(1)检测效果可以将同驻检测问题抽象为一个二分类问题:根据是否与某个特定的虚拟机同驻,可以将其它所有虚拟机分为同驻和不同驻两类.表2展示了用于衡量同驻检测的分类准确性的混淆矩阵,其中包含同驻检测的全部4种可能结果.果也为同驻;正确接受:表示两个虚拟机实际同驻,检测结正确拒绝:表示两个虚拟机实际不同驻,检测结果也为不同驻;结果为不同驻;测结果为同驻.错误拒绝:表示两个虚拟机实际同驻,但检测错误接受:表示两个虚拟机实际不同驻,但检实际是否同驻根据混淆矩阵,可以使用分类器的评价指标,包括真正类率、漏报率、误报率、假负类率、正确率、精确度、准确率、召回率以及F-measure等[51],来对同驻检测方法的检测效果进行度量.(2)检测效率检测效率是衡量同驻检测方法性能的一个重要方面,可以利用完成一次同驻检测所需的时间来对检测效率进行评估.(3)检测能力检测能力主要用于反映同驻检测方法能够检测的同驻级别.由于虚拟机之间对于CPU的共享情况直接决定它们之间的Cache共享关系,因此,本文中我们根据虚拟机之间共享CPU的情况,将它们之间的同驻级别分为:内核级同驻.两个虚拟机被分配到同一个CPUCPU级同驻.两个虚拟机被分配到同一个CPU之上运行,包括交替地运行于同一个内核之上的同一个内核之上交替运行;Page12(内核级同驻)以及并行地运行于不同内核之上两种情况;宿主机级同驻.两个虚拟机被分配到同一个物理主机之上运行,它们之间可能被分配到同一个CPU之上运行(CPU级同驻),也可能被分配到不同的CPU上运行.(4)局限性局限性主要用于衡量同驻检测方法在现实应用环境下的可行性,可以使用限制条件来描述同驻检测算法的局限性,通常来说,限制条件越严格,算法的局限性越强、可行性越低.表33类虚拟机同驻检测方法的比较主要优点方法分类基于网络信息的同驻检测方法基于资源干扰的同驻检测方法基于隐蔽信道的同驻检测方法表4各种虚拟机同驻检测方法的比较基于网络信息的同驻检测方法[10]一般高宿主机级基于资源干扰的同驻检测方法[12]较好中内核级基于隐蔽信道的同驻检测方法[10]好中宿主机级可以看出:基于隐蔽信道的同驻检测方法误检率低、检测效果最好,但其限制条件较为严格,在现实攻击场景中很难实现,实用性低;基于网络信息的同驻检测方法实现简单,检测效率较高,但其检测准确率低、检测效果一般,而且由于大多数云平台已经支持使用VPC来加强网络隔离,导致其实用性严重降低;基于资源干扰的同驻检测方法相对来说实用性最高,是目前虚拟机同驻检测的主流方法.5Cache侧信道信息探测方法当前跨虚拟机Cache侧信道信息探测方法主要有四种:Prime-Probe方法、Flush-Reload方法、Flush-Flush方法以及Invalidate-Transfer方法.其中,Flush-Flush方法和Invalidate-Transfer方法与Flush-Reload方法的探测原理类似,因此,本节主要对Prime-Probe方法和Flush-Reload方法进行详细的分析和讨论,并将Flush-Flush方法和Invalidate-Transfer方法作为Flush-Reload方法的扩展,进行简单的介绍.(5)实用性实用性主要用于衡量同驻检测方法在现实应用场景下的实用价值.4.3.2虚拟机同驻检测方法的比较在4.2节中,先后介绍了3类虚拟机同驻检测方法,本节对这3类虚拟机同驻检测方法进行比较,列举其原理及优缺点,见表3;同时,对各种虚拟机同驻检测方法进行对比分析,见表4.其中,检测效果用“好”、“较好”、“一般”、“差”,检测效率、实用性用“高”、“较高”、“中”、“低”,检测能力用“内核级”、“CPU级”、“宿主机级”来分别描述.5.1Prime-Probe方法Prime-Probe(PP)方法最初由Osvik等人[20]针对单机计算环境提出,2009年,Ristenpart等人[10]首先将其应用于云环境中.5.1.1方法简介机重复下面的步骤:利用PP探测Cache侧信道信息时,攻击虚拟(1)Prime.用预先准备的数据填充一个或多个Cache组;(2)Trigger.访问部署在目标虚拟机中的应用,并且等待一段预设的Prime-Probe间隔时间;在这个过程中,由于要响应服务请求,目标虚拟机执行应用并使用Cache;(3)Probe.重新读取Prime阶段加载的数据,测量并记录各个Cache组的读取时间.实际探测过程中,为了避免硬件预取导致的时延隐藏问题,通常采用Pointer-Chasing[52]技术对预先准备的数据进行组织和操作.如图9所示,如果目标虚拟机在Trigger阶段使用了一些攻击虚拟机在Prime阶段填充的Cache组,攻击虚拟机Page13位于这些Cache组中的数据将被驱逐出Cache,导致攻击虚拟机在Probe阶段重新读取数据时发生Cache失效,从而产生一个较长的读取时间.因此,图9Prime-Probe方法PP算法基于以下关键因素实现:(1)攻击者能够识别出与目标用户内存访问活动相关的Cache访问,即需要确定目标应用中安全性关键的数据或代码缓存于Cache中的哪一个或哪几个Cache组中;(2)攻击虚拟机能够填充指定Cache组中的全部Cache行,即要求攻击者知道Cache与内存地址之间的映射关系;(3)高分辨率的时钟.5.1.2应用PP方法探测L1Cache利用PP方法探测L1Cache时,通常针对整个L1Cache进行探测,然后再使用机器学习方法识别出与目标用户内存访问活动相关的Cache使用[13-14,27].PP方法最初只能应用于探测L1Cache,这主要是因为L1Cache的容量较小,攻击者可以利用数据或代码的虚拟地址确定其在L1Cache中的具体位置(称为虚拟定址).具体地,Cache是物理标记的,即使用物理地址来确定数据或代码在Cache中的存储位置(称为物理定址).对于容量较小的L1Cache,攻击者可能拥有其地址映射所需的全部物理地址知识.如图10所示,与传统计算机相比,虚拟机系统中共包含3种地址,其中:虚拟地址是指客户机操作系统提供给其应用程序使用的线性地址空间,对应于传统计算机系统中的虚拟地址;物理地址是指虚拟机能够看到的经过VMM抽象的伪物理地址;机器地址是指真实硬件的机器地址,即地址总线上应该出现的地址信号,对应于传统计算机系统中的物理地址.系统在进行虚拟地址到物理地址再到机器地址的转换过程中,只对页号部分进行映射,页内地址偏移部分则保留不变;因此,当Cache容量小于等于内存页面大小时,虚拟地址的页内地址偏移部分根据Probe阶段探测到的各个Cache组的重载时间,可以判断目标虚拟机在应用执行中使用了哪些Cache组.将保留Cache与物理内存之间进行映射所需的全部地址信息,使Cache由物理定址变为虚拟定址.但是,当Cache容量大于内存页面大小时,Cache只能物理定址,此时,攻击者只能控制其数据或代码的虚拟地址,不知道也无法控制其物理地址和机器地址,也就无法控制其私有数据填充指定的Cache组.5.1.3应用PP方法探测LLC除了物理定址问题,使用PP探测LLC的挑战还在于:(1)LLC的非公开哈希索引机制.LLC各分片与物理内存地址之间的映射关系由一个非公开的哈希函数确定,即使攻击者可以判断一个Cache组中包含有哪些Cache行,也不知道这些Cache行分别对应于LLC的哪个分片;(2)安全性关键访问相关的Cache组.对于容量较大的LLC(通常大于2MB)来说,对整个LLC进行一次Prime或Probe的时间较长,如果每次都探测整个LLC,将无法以足够的分辨率探测得到有用的信息.导致使用PP探测LLC时,只能监控那些与目标应用安全性关键Page14访问相关的Cache组,因此需要确定目标应用中安全性关键的数据或代码缓存于LLC中的哪一个或几个Cache组中.针对上述问题,Liu等人[14]通过在攻击虚拟机中使用大内存页,利用大页映射产生的额外页内地址偏移来保留LLC与虚拟地址之间的映射关系;同时,利用Cache组内各Cache行之间的驱逐关系来按照分片进行Cache行划分,绕过了LLC地址映射不透明的问题;最后,通过对LLC进行扫描,一次监控一个Cache组在探测周期内的时态访问模式,并判断是否与目标应用的安全性关键访问一致,直到确定目标应用中安全性关键的数据或代码对应的Cache组.与此同时,Irazoqui等人[17]也利用大页映射解决LLC的地址映射问题,并通过将探测数据从除LLC之外的多级Cache中驱逐的方法来降低其它高级别Cache对于探测结果的影响.Inci等人[38]和Kayaalp等人[39]以及文献[53-55]通过对LLC的索引哈希机制进行逆向工程,恢复了物理内存地址与LLC的地址映射关系,从根本上解决了LLC与物理内存地址映射不透明的问题.Kayaalp等人[39]则通过访问一个Cache组时是否对目标应用造成影响来判断该Cache组是否对应于目标应用的安全性关键访问.5.2Flush-Reload方法2013年,Yarom等人[16]利用Cache刷新指令(Clflush)可以将指定内存块从全部多级Cache中驱逐以及Cache具有包容性的特点,对文献[21]中的方法进行了扩展,提出了Flush-Reload(FR)攻击图11Flush-Reload方法5.2.2Flush-Reload方法的应用实际应用时,为了得到目标应用中安全性关键的数据或代码的内存位置,攻击者通常需要对被攻击的目标应用进行逆向工程,来定位这些安全性关键的内存块的具体位置.Flush-Reload攻击基于假设攻击虚拟机和目标虚拟机共享内存页面实现,方法.Flush-Reload基于共享内存实现,是虚拟化环境中第1个跨内核、跨虚拟机的Cache探测方法.5.2.1方法简介利用FR探测Cache侧信道信息时,攻击虚拟机重复下面的操作:(1)Flush.将共享内存中指定位置的内存块驱逐出Cache;(2)Trigger.访问部署在目标虚拟机中的应用,并且等待一个预先设定的Flush-Reload间隔;在这个过程中,由于要响应服务请求,目标虚拟机执行应用并使用Cache;(3)Reload.重新加载这些指定位置的内存块,测量并记录各个数据块的重载时间.如图11所示,Flush阶段,攻击虚拟机将指定位置的内存块驱逐出Cache,如果在Trigger阶段目标虚拟机访问了其中的一些内存块,这些数据将被重新加载到Cache;那么,Reload阶段对这些内存块的重载将发生缓存命中,从而得到一个显著降低的重载时间.因此,根据Reload阶段的重载时间,可以判断目标虚拟机是否访问了共享内存中指定位置的数据块,并进一步判断目标虚拟机访问了哪些数据或执行了哪些指令.FR算法实现基于以下关键因素:(1)攻击虚拟机和目标虚拟机共享内存页面;(2)攻击虚拟机可以无限制地使用Cache刷新指令;(3)攻击虚拟机知道目标应用中安全性关键的数据或代码的内存位置;(4)Cache多级架构具有包容性的特点;(5)高分辨率的时钟.这种共享可以基于页面的来源,比如共享的代码库或加密库;或者基于合并内容相同的页面,比如Linux的内核同页合并(KernelSamePageMerging,KSM)[56],VMWareESX的透明页面共享(Trans-parentPageSharing,TPS)[57]以及Xen的内存写时复制(MemoryCopyonWrite,MemoryCOW)[58]Page15等.共享内存页面可以为攻击者提供丰富的信息,例如:其它同驻虚拟机中使用的ECDSA签名算法的密钥[59-61]和AES密钥[62-63],运行的软件加密库[64],加密消息的明文[65],同驻租户的敏感数据[66]以及击键信息[67]等.5.2.3Flush-Reload方法的扩展(1)Flush-Flush方法Gruss等人[40]发现Cache刷新指令Clflush的执行时间可以用来判断被刷新的内存块是否位于Cache中:被刷新的内存块不在Cache中时,Clflush指令将提前终止,从而产生较短的执行时间;被刷新的内存块在Cache中时,Clflush指令需要将其从全部多级Cache中驱逐,导致执行时间较长.基于此,Gruss等人去掉了Flush-Reload方法中的Reload步骤,提出了Flush-Flush攻击方法.Flush-Flush方法连续两次使用Clflush指令将指定位置的内存块驱逐出Cache,并根据第2次Clflush指令的执行时间来判断在这期间目标虚拟机是否使用了这些内存块.由于去掉了Reload步骤,Flush-Flush方法缩短了一轮探测所需时间,可以提供更高的探测分辨率,同时也增加了攻击的隐匿性.但是,与Cache命中和失效产生的Cache访问时间差异信息相比,Clflush指令执行时间的差异信息较小,导致Flush-Flush方法的探测准确率没有Flush-Reload方法高.(2)Invalidate-Transfer方法2016年,Irazoqui等人[18]发现在多处理器配置下,由于需要保持多处理器间Cache内容的一致性,表5Prime-Probe方法和Flush-Reload方法比较方法信息泄露来源PPCache争用FR数据重用6总结与展望作为云计算环境面临的一种重要安全威胁,跨当一个处理器发生Cache失效时,失效的数据是否缓存于另一个处理器Cache中,将产生从另一个处理器Cache读取数据和直接从内存读取数据两种可能,这将导致Cache访问时间差异(大约50个时钟周期).基于上述事实,Irazoqui等人首次提出并实现了跨处理器的Invalidate-Transfer攻击方法,并恢复了另一个处理器上运行的加密软件库中使用的AES密钥和ElGamal密钥.Invalidate-Transfer方法先将指定的共享内存块在Cache中的副本标记为无效,然后等待一段时间后,再重新访问上述指定的内存块,并根据重载时间来判断在此期间攻击目标是否使用了这些内存块.进一步地,根据重载时间的差异还可以判断攻击者和攻击目标是否运行于同一个CPU之上.5.3Cache侧信道信息探测方法的比较本节从信息泄露来源、应用场景、实现条件、优缺点等方面对Prime-Probe方法和Flush-Reload方法进行对比分析,见表5.从表5可以看出,Prime-Probe方法和Flush-Reload方法针对不同的应用需求,有各自的优缺点及应用挑战,具体方法的选取取决于应用场景和攻击者具备的能力等.当攻击虚拟机和目标虚拟机之间共享内存时,采用Flush-Reload方法,攻击者可以得到更细粒度且更为丰富的信息;当攻击虚拟机和目标虚拟机没有共享内存时,攻击者只能采用Prime-Probe方法.因此,Flush-Reload方法的适用范围受到了严格的限制,Prime-Probe方法则更为通用.(1)实现简单(2)对于目标应用不敏感,通用性强(1)能够得到更精确的信息(2)不受Cache与内存之间地址映射以及地址多样化技术(如ASLR)的影响(3)分析方法相对简单虚拟机Cache侧信道攻击已引起了学术界和工业界的广泛关注.本文分析了跨虚拟机Cache侧信道攻击的攻击机理和实现方式,并着重对虚拟机同驻相关问题和Cache侧信道信息探测技术进行了阐述.Page16总体来说,跨虚拟机Cache侧信道攻击还是一个较新的研究领域,许多研究工作仍然处于起步阶段,在理论和应用上都还存在一些有价值的研究问题.6.1虚拟机同驻检测方面攻击虚拟机和目标虚拟机同驻是跨虚拟机Cache侧信道攻击的必要条件和重要基础,而虚拟机同驻检测方法则是实现同驻的过程中比较重要且关键的一个部分.现有研究中,基于网络信息的同驻检测方法实现简单,检测效率较高,但是检测准确率低,只能作为其它同驻检测方法的辅助手段使用;基于隐蔽信道的同驻检测方法误检率低、检测效率也比较高,但其实用性低,只能用于检测双方均为受控虚拟机的情况,这在现实攻击场景中很难实现;基于资源干扰的同驻检测方法虽然实现复杂,但检测准确率较高,适用范围最广,但是,随着虚拟机资源管理机制的优化以及硬件技术的不断发展,同驻虚拟机之间的相互干扰越来越难被观察发现.因此,如何设计更为准确、高效、实用的虚拟机同驻检测方法,还需要进一步研究.6.2跨虚拟机时序驱动攻击方面目前,跨虚拟机时序驱动攻击的相关研究较少,主要是将传统时序驱动攻击方法直接应用于跨虚拟机攻击场景中.一方面,跨虚拟机时序驱动攻击并没有解决传统时序驱动攻击中存在的两个主要问题:一是攻击条件过于严格,为了采集加密时间以创建模板,攻击者需预先获取目标系统的详细配置参数并重建相同的本地对照环境,这在实际攻击场景中很难实现;二是创建模板时所需样本量大,一般都以百万计,而且离线分析方法比较复杂[32].因此,如何在没有对照环境的情况下,设计能够直接采集目标端的加密时间来创建模板的攻击方案是一个富有挑战性的工作;如何将更多的数学分析方法与现有的离线分析方法结合起来,从而简化分析过程,提高密钥分析效率,从而减少创建模板所需要采集的样本量,也是颇具挑战性的问题.另一方面,根据分析方法不同,传统时序驱动攻击可以分为Cache碰撞计时攻击和Cache计时模板攻击两类[70],而现有跨虚拟机时序驱动攻击都属于Cache计时模板攻击.因此,将传统Cache碰撞计时攻击引入跨虚拟机攻击场景中,并解决迁移过程中可能遇到的问题,也具有重要的意义.6.3跨虚拟机访问驱动攻击方面跨虚拟机访问驱动攻击是一种非入侵式的攻击方式,由于其利用虚拟机之间共享的底层硬件资源进行攻击,而不是利用系统本身的逻辑漏洞进行攻击,因此,极难防御.目前,跨虚拟机访问驱动攻击已经有一些研究成果,一方面,利用虚拟化系统环境为攻击者带来的新能力,例如,修改内存页面大小等,对传统的Prime-Probe攻击方法进行了扩展,使其能够支持跨内核攻击;另一方面,基于某些系统共享内存页面的特点,设计提出了Flush-Reload、Flush-Flush以及Invalidate-Transfer攻击方法,并且已经可以支持跨CPU进行攻击.但是,现有跨虚拟机访问驱动攻击方法大多是在较为理想的假设条件下进行,如假设攻击者具有密码库及密码算法实现方式的背景知识、可以精确地在密码算法执行前后探测采集Cache侧信道信息,以及可以准确地定位密码算法使用的Cache组地址等.因此,在以后的研究中,如何摆脱上述假设条件的限制,提高跨虚拟机访问驱动攻击在现实环境中的实用性和通用性,也是一个极具挑战性的研究方向.另外,现有攻击方法大多没有考虑虚拟化环境中的各种软硬件特征、VMM系统负载以及其它同驻虚拟机活动等给Cache探测结果引入的噪声和干扰,这也将严重影响攻击的实用性,因为在现实环境中这类噪声和干扰是真实且普遍存在的,很难避免.因此,对虚拟化环境中存在的各种噪声和干扰进行分类、建模、量化,并有针对性地设计过滤方法,也是一个值得研究的方向.6.4跨虚拟机Cache侧信道攻击方法评估方面由于跨虚拟机Cache侧信道攻击是针对密码算法实现的一种攻击方式,其攻击效果受底层硬件配置、系统环境、密码库版本、密码实现方式、信息采集手段以及攻击者和攻击目标的同驻等级等多个因素的影响,导致很难对不同攻击方法的可行性及威胁性进行统一的量化评估.因此,如何建立评估指标体系和评估模型,量化各种因素对于攻击方法的影响,从而对众多的攻击方法进行统一客观的性能评估,也是今后的一个重要研究方向.6.5其它方面云计算包含3种不同的服务类型:基础设施即服务(InfrastructureasaService,IaaS)、平台即服务(PlatformasaService,PaaS)以及软件即服务(SoftwareasaService,SaaS).目前,云环境中有关跨虚拟机Cache侧信道攻击的研究工作,除文献[66]以外,都是围绕IaaS云平台展开.因此,将Cache侧信道攻击扩展到IaaS层之上的PaaS或SaaS,甚至轻量级虚拟化方案Docker中,也具有重Page17要的意义.7结束语跨虚拟机Cache侧信道攻击是云安全领域的热点问题.随着云计算的持续快速发展,该问题得到了国内外研究人员的极大关注.针对这一问题,本文首先讨论了共享Cache带来的信息泄露问题,这是深入理解Cache侧信道攻击机理与方法的理论基础;然后介绍了跨虚拟机Cache侧信道攻击的起源与研究进展,分析总结了其与传统Cache侧信道攻击的区别与联系,并给出了跨虚拟机访问驱动Cache侧信道攻击的通用模型;接下来,介绍了虚拟机同驻相关问题,讨论了虚拟机资源调度策略对于虚拟机同驻的影响,介绍了虚拟机同驻检测的各种方法,分析讨论了适用于虚拟机同驻检测方法评估的测评原则,并根据提出的测评原则对各种虚拟机同驻检测方法进行了对比分析;最后,重点阐述了当前用于跨虚拟机Cache侧信道信息探测的主要方法,并从信息泄露来源、应用场景、实现条件等方面进行了分析比较.本文还重点讨论了跨虚拟机Cache侧信道攻击研究中存在的问题和挑战,并展望了未来可能的研究方向.致谢在此,我们向对本文提出宝贵修改意见的评审老师和同行表示衷心的感谢!
