Page1一种任意维Line-Sweep计算的数据划分算法王鹏1),2)邱枫3)张为华1),2)臧斌宇1),2)朱传琪1),2)1)(复旦大学计算机学院上海200433)2)(复旦大学并行处理研究所上海200433)3)(复旦大学高分子科学系上海200433)摘要数据划分是在当前主流高性能计算平台上高效并行化应用程序的关键技术,它包括数据分割和处理机分配两个主要部分.Line-Sweep计算模式被众多科学工程计算核心采用,目前该计算模式的并行化主要采用多重数据划分.多重数据划分能保证各处理机的计算量、访存量和通讯量相等,但在某些情况下也会导致访存量和通讯量过多,因此无法保证性能最优.为解决这一缺陷,文中提出均衡数据划分,进一步放松对数据分割和处理器分配的非本质约束,以利于在计算、访存和通讯这3种开销之间达到最佳平衡.文中给出生成最佳均衡数据划分的算法,它包含3个关键技术:首先建立性能模型,在该模型中均衡数据划分的性能只与数据分割方式有关;接着基于该模型缩减数据分割方式的搜索空间,并以该模型为判据搜索性能最佳的数据分割方式;最后设计处理机分配函数以满足均衡数据划分的条件.均衡数据划分被应用于NPB并行测试包中的SP程序和高分子材料计算程序LineABC.实验结果表明,当均衡数据划分与多重数据划分的数据分割方式相同时,二者性能基本一致;当两种数据分割方式不同时(对于SP和LineABC,这种情况所占比例分别高达38.7%和37.9%),采用均衡数据划分的SP程序和LineABC程序的并行效率比多重数据划分平均分别高出44.45%和22.15%.关键词Line-Sweep计算;负载均衡;多重数据划分;均衡数据划分;性能模型1引言当前以集群为代表的分布式内存并行机是并行计算的主流平台,数据划分是在这类机器上有效并行化应用程序的关键技术,该技术力求将数据合理地分割并分配给计算节点,以期同时达到最大的并行度和最小的访存与通讯开销,从而最优化整体并行效率.Line-Sweep计算是众多科学工程计算的核心[1-2],它的一个重要应用是交替方向隐式(ADI)方法,该方法广泛用于求解偏微分方程[3-4](如Navier-Stokes方程),并因其高精度和高稳定性而被称为“对计算数学的伟大贡献”[2].由于Line-Sweep计算通常需要大量计算资源,故为其设计高效数据划分是有意义的课题.图1展示了三维Line-Sweep计算的程序结构与数据访问模式:该计算整体上使用迭代收敛模式,每次迭代依次沿目标数组的各维扫描并更新数据,每维扫描对应一个循环,该循环只存在扫描方向上的数据相关性.图1左边的立方块表示待计算的三维数组,右边的(1)~(6)项依次列出迭代包含的扫描,每个扫描所沿方向在左边的立方块上用箭头标出,标注框中的循环代码对应于扫描(2).虽然每维扫描对应的循环只存在该维方向的数据相关性,但从全局上看,不存在一个数据维,使得按该维分割并分配数据能够避免数据重组或流水线并行,这就给高效并行化Line-Sweep计算设置了难题.当前Line-Sweep计算的有效数据划分方法有通常的一维和二维区域分解方式和多重数据划分,文献[5]将这些划分方法的性能做了比较,根据该文献多重数据划分的可扩展性远优于传统的区域划分.多重数据划分从出现到成熟经历了一系列演变:Johnsson等人[3]首次实现了二维多重数据划分,Naik等人[4]发展了三维多重数据划分,Darte等人[6]进一步推至使用任意数目处理机并行化任意维Line-Sweep计算的情况.Darte的算法自提出后一直没有改进,之后的工作主要是基于该算法做一些调优或者将其应用到新的编程模式中[7-8].图2是处理机数目为9的三维多重数据划分的例子,图中的每个方格表示一个数据块,方格中的数字表示该数据块所属处理机.该图体现了多重数据划分的主要特征:(1)给定任意数据层面,每个处理机分配到相同数目的该层面内的数据块;(2)任意两个相邻数据面之间的通讯可表示为若干置换通讯(permutationtraffic),这种通讯模式能被当今主流集群网络有效支持[9];(3)同一维上的置换通讯的置换函数相同,这样每个处理器可以将同一维方向上的多次通讯聚合成一次通讯,从而减少通讯次数提高通讯带宽.多重数据划分的核心理念是负载均衡,它保证沿着任意维扫描时,每个处理机的计算量、访存量和通讯量完全相等.从直觉上看,负载均Page3衡有利于减少处理时间.然而实际上对于很多处理机数,多重数据划分会导致一些数据维分割次数过多,从而增加访存量和通讯量(详见后文分析).为了改进该方法,文本提出均衡数据划分,力求在计算、访存和通讯这3种开销之间取得最佳平衡,从而将整体并行处理时间最小化.和多重数据划分一样,均衡数据划分同样适用于使用任意数目处理机并行化任意维Line-Sweep计算.本文第2节给出本文使用的通用符号和数据划分的定义;第3节提出均衡数据划分;第4节详述如何生成性能最优的均衡数据划分;第5节给出一个实例;第6节给出实验结果;第7节总结全文.2基本概念2.1通用符号为了方便定义概念和展开讨论,本文通用如下符号:①若是有穷集,则||表示其所含元素总数.②若f是任意函数,是f的定义域的子集,则f[]={f(x)|x∈}.③表示所有正整数的集合,若m是正整数则的所有m维向量的集合.④表示所有非负整数的集合,默认情况下本文所有标量(包含向量的分量)都属于,因此文中的闭区间[a,b]表示大于等于a且小于等于b的所有非负整数的集合.⑤设m∈,狓=(x1,x2,…,xm)∈‖狓‖xi量狊的每一维分量都小于或等于狓的对应维分量.⑥d表示待划分数组的维数,d2;d维向量狀=(n1,n2,…,nd)表示待划分数组各维长度,其中对于任意i∈[1,d],ni表示待划分数组第i维的长度且有ni2.⑦设x和y都是正整数,若非负整数z满足xz|y∧xz+1|/y,则z称为x在y中出现的次数,显,狓={狊|狊∈然z存在且唯一,其中符号“|”表示整除,符号“|/”表示不能整除.⑧p表示处理机总数,p2;t表示p的互异质因子的个数,这些质因子记为p1,p2,…,pt;对于任意i∈[1,d],qi表示pi在p中出现的次数,即p=∏t2.2数据划分数据划分探讨如何将目标数组划分成子数组并分配给参与并行的处理机,使得整体效率最佳.本文只考虑规则数组的规则数据划分,且不考虑一维数组的数据划分,因为此时只能将唯一的数据维均分给各处理机.所谓规则数组是指数组每维的长度是固定值,从直观上看,这样的数组是一个超立方(Hypercube).一个d维规则数组中的每个元素可表示为d维向量狅=(o1,o2,…,od),其中对于任意i∈[1,d],oi表示该元素在数组中的第i维下标(从1开始编号),从直观上看,oi是该元素在规则数组构成的超立方的第i维上的偏移,狅称为数组元素的坐标.将规则数组的各维的长度综合表示为d维向量狀,则该数组所有元素的坐标构成集合狀,由于数组元素与其坐标一一对应,因此可以认为狀就是数组本身.所谓规则数据划分,形象地说,就是只考虑以沿着和数组各维垂直的方向一切到底的方式分割数组.在只考虑规则数组的规则数据划分的前提下,一个数据划分包含两个内容:①确定目标数组的每维被分为几份(本文假定目标数组的每维总是被尽量均匀地划分).②确定如何将划分形成的数据块(即子数组)分配给各处理机.第一个内容实际上是要确定一个d维整数向量狉=(r1,r2,…,rd),其中对于任意i∈[1,d],ri代表数组第i维被分成几份.考虑到每个数组的第i维最多被分割成ni块,因此一个合法的数据分割方式狉必属于狀.将被狉分割形成的每个数据块看做一个元素,则所有数据块构成d维规则数组狉.因此数据划分的第2个内容实际上是要找到一个从狉到处理机集合[1,p]的函数.综上所述,规则数组的规则数据划分表述为定义1.定义1.若狉∈狀,λ是从狉到[1,p]的函数,则二元组(狉,λ)是一个规则数据划分,简称数据划分,其中狉称为数据划分向量,简称划分向量,λ称为处理机分配函数.3均衡数据划分设(狉,λ)是数据划分,其中狉=(r1,r2,…,rd),Page4则狉将数组划分成的数据块构成集合狉,从直观上看,狉是一个d维超立方体,对于任意i∈[1,d],狉中第i维坐标相等的数据块构成若干与第i维垂直的i-1维超立方体,这些i-1维超立方体称为狉在第i维上的数据层面,可形式化为定义2.显然狉中同一维上的数据层面包含相同数量的数据,这个性质总结为引理1.当沿第i维正方向扫描时,由于数据相关只存在于第i维正方向,故狉在第i维上的任意数据层面中的数据块可以并行处理,同样由于数据相关性的方向是沿着第i维正方向,所以必须依次处理第1~ri个数据层面,连续处理的两个数据层面之间有一个边界通讯以保证数据相关性.沿第i维负方向扫描的情况类似,只是数据层面的处理顺序相反.直观上看,任意维上连续处理的两个数据层面相互平行,且它们中的一个可由另一个中的所有数据块沿着该维正方向移位1个单位构成,这样的一对数据层面互称为该维上的相邻数据层面(第一个和最后一个数据层面也看作相邻,它们之间通常也需要交换数据).相邻的概念参见定义4,其中用到的移位函数及其性质在定义3和引理2中给出.定义2.设狉=(r1,r2,…,rd)∈狀,给定任意i∈[1,d],任意j∈[1,ri],定义狉(i,j)={(s1,s2,…,sd)|(s1,s2,…,sd)∈狉∧si=j},则狉(i,j)称为狉在第i维上的第j个数据层面.引理1.给定任意狉=(r1,r2,…,rd)∈狀,任意i∈[1,d],任意j∈[1,ri],均有|狉(i,j)|=‖狉‖i.证明.略.定义3.对于任意狉∈狀和任意i∈[1,d],构造双射θ狉,i:狉→狉,θ狉,i(狓)=(狔),狓=(x1,x2,…,xd),狔=(y1,y2,…,yd),yj=ximodri+1,j=iθ狉,i称为狉在第i维上的移位函数.引理2.给定任意狉=(r1,r2,…,rd)∈狀,任意i∈[1,d],任意j∈[1,ri],均有θ狉,i[狉(i,j)]=狉(i,jmodri+1).证明.略.定义4.设狉∈狀,狓∈狉,i∈[1,d],j∈[1,ri],则:(1)狓和θ狉,i(狓)在第i维上相邻,其中θ狉,i(狓)是狓在第i维正方向上的相邻数据块,狓是θ狉,i(狓)在第i维负方向上的相邻数据块.(2)狉(i,j)和θ狉,i[狉(i,j)]在第i维上相邻,其中θ狉,i[狉(i,j)]是狉(i,j)在第i维正方向上的相邻数据层面,狉(i,j)是θ狉,i[狉(i,j)]在第i维负方向上的相邻数据层面.Line-Sweep计算总共花费的时间可进一步细分为处理本地数据块的时间和通讯时间,前者简称为本地处理时间.如果狉能够保证第i维上的每个数据层面所包含的数据块数能被p整除,且处理机分配函数λ保证这些数据块被均分给各处理机,则沿第i维扫描时,每个处理机的计算量、访存量和通讯量是一样的,具有这种性质的数据划分称为在第i维负载均衡.从直觉上看,负载均衡对性能有利,这正是多重数据划分的核心设计理念,该划分总是保证在每维负载均衡.然而为了保证任意数据层面的数据块数能够被p整除,给定任意k∈[1,t],p的质因子pk在狉的任意d-1个分量中出现的总数必须大于等于qk.对于某些处理机数,这会使得各维的划分总数很大,从而导致用于存放边界数据的“影像区”(HALO区)占的存储比例增大,进而产生两个后果:(1)在处理本地数据的过程中需要访问影像区,因此影像区占比增加会导致访存量增加,若访存是瓶颈则本地处理时间会增加.在现实中由于Line-Sweep计算中单位访存量对应的计算量很低,加上存储墙的存在,所以访存常为瓶颈.(2)影像区为存放交换数据的区域,影像区占比增加会导致通讯量增大,从而增加通讯时间.更加详细的例子与性能分析参见第5节的实例.通过以上分析可知传统多重数据划分基于负载均衡的设计理念未必能够保证实际性能最优.一个理想的数据划分,应该在计算、访存和通讯之间达到最佳平衡,而为了能够找到这样的数据划分,应适当放松传统多重数据划分的条件.具体考虑如下:①只保证一个数据维上的负载均衡,但保证任意数据层面内的数据块被尽量均匀地分配给各处理机.这样设计有利于找到整体性能最佳的数据划分,且能避免穷举,降低算法的复杂度.②Line-Sweep程序中,除了沿着数组各维依次扫描之外往往包含一些可以完全并行化的代码,由于传统的多重数据划分保证沿给定维扫描时每个处理机具有固定的通讯对象,因此在完成这些代码后进行交换影像区的通讯时,每个处理器可以将同一维方向上的消息聚合成一次置换通讯,从而减少通讯次数提高通讯带宽.然而可作如此优化的通讯量所占比例较小,且在当今的主流并行处理平台上,单次通讯量较小时可以使用计算和通讯相互覆盖的技术大幅减少实际通讯Page5时间.因此只需要保证相邻数据层面之间的数据通讯可以划分为若干置换通讯即可.基于这两个设计原则,本文在定义5中提出均衡数据划分.定义5.设(狉,λ)是数据划分,其中狉=(r1,r2,…,rd),若(狉,λ)满足以下两个条件则称为均衡数据划分:(1)存在一个i∈[1,d],使得p|‖狉‖i;(2)给定任意i∈[1,d],给定任意j∈[1,ri],记m1=‖狉‖i/p,m2=‖狉‖i/p,则狉(i,j)总是可以为表示为m2个互不相交的非空子集1,2,…,m2的合集,且这些子集满足:①k(k∈[1,m1]→|k|=p),②给定其中的任意一个子集中的任意两个不同的数据块狊1和狊2,总有λ(狊1)≠λ(狊2)且λ(θ狉,i(狊1))≠λ(θ狉,i(狊2)).4均衡数据划分生成算法4.1目标函数记均衡数据划分的数据划分向量为狉=(r1,r2,…,rd),则狉决定了狉中每个数据层面的数据块数和各数据块的形状,且均衡数据划分总是尽量均匀分配每个数据层面的所有数据块,因此均衡数据划分的本地处理时间仅由其数据划分向量决定,与具体的处理器分配方式无关.另外均衡数据划分保证相邻数据层面之间的数据通讯可以表示为若干置换通讯,如果忽略具体置换方式带来的影响,则通讯开销仅取决于影像区的大小,而影像区的大小亦由数据划分向量决定.综上所述,对于给定的处理机平台,均衡数据划分的性能仅取决于它的数据划分向量.下面探讨数据划分向量狉对实际性能的具体影响,为简化讨论,只探讨沿各维正方向扫描的情况.狉将数组狀分割成的数据块的大小可表示为d维向量狊=(s1,s2,…,sd),其中对于任意i∈[1,d]总有si=ni/ri;设第i维正负方向的数据相关深度相等且记为ai,则每个数据子块狊的实际存储区域可表示为狋=(t1,t2,…,td),其中对于任意i∈[1,d]总有ti=si+2×ai.处理每个数据子块时的计算量和访存量分别与‖狊‖和‖狋‖成正比,设处理机单位时间可以完成peakcomp个基本运算,访问peakmem个基本数据,则每个数据子块的本地处理时间Tprocess可以表示为其中c1和c2都是常数,由程序的特点决定.给定狉中第i维上的任一数据层面,则包含‖狉‖i块数据,每个处理机最多分配到‖狉‖i/p个中的数据块,沿第i维正方向扫描一次每个数据块需要交换的边界数据量为ai×‖狊‖i个基本元素,忽略每次通讯时延,记通讯网络的带宽为w,考虑到共需处理ri个数据层面,则沿第i维正方向扫描一次所花的时间Ti可以表示为Ti=Tprocess+c3×ai×‖狊‖i其中c3是常数,由程序的特点决定.综合上面两式,令T表示沿各维正方向扫描所花费的总时间,则有T=∑d上式中peakcomp和peakmem以及w取决于并行处理平台的硬件特性,可以通过硬件手册获得,p为处理器机数,d为数据维数,变量ai、c1、c2和c3对于给定的程序都是常数,它们的具体值由程序决定;剩下的所有变量都决定于狉.沿各维负方向扫描的总时间的计算方式与T类似,不再赘述,现将其记为T,我们使用T+T作为目标函数,选择能够使T+T最小的均衡数据划分作为最后产生的数据划分方案.由于T和T与均衡数据划分的处理器分配函数无关,本文的算法首先寻找使得T+T最小的均衡数据划分的数据划分向量,然后为得到的数据划分向量构造处理机分配函数.在实践中,如果两个不同的划分向量使得目标函数的值相等,则总是选择在连续存储的那个数据维上(Fortran是第1维)分割次数最少的划分向量,因为这样的划分方式更加有利于发挥当前主流体系结构的访存性能.以上性能模型同样适用于多重数据划分,但是由于多重数据划分保证任意维上的负载均衡,因此该性能模型可以进一步简化,能使得影像区体积最小的数据划分向量对应的多重数据划分的性能最佳.4.2确定数据划分向量设狉=(r1,r2,…,rd)∈狀,狊=(s1,s2,…,sd)∈狀,狊≠狉,对于任意i∈[1,d]都有siri且p|‖狉‖i→p|‖狊‖i,则根据4.1节中的性能模型可知狊的性能优于狉,因为狉比狊在第i维上多出来的划分次数既不能带来额外的负载平衡,又增加了访存量和通讯Page6量.在寻找最佳数据划分向量的时候,如果已经考虑过狊,则没有必要再考虑狉.不严格地说,在寻找性能最优的均衡数据划分的划分向量时,只需要考虑至少具有相同程度负载均衡的数据划分向量中的各维分量最小的那个,这样的划分向量称为基本数据划分向量,其定义如下.定义6.设狉=(r1,r2,…,rd)∈狀,若狉满足以下条件则是基本数据划分向量,简称基本划分向量:(1)存在一个i∈[1,d],p|‖狉‖i;(2)对于任意i∈[1,d],不存在狊=(s1,s2,…,sd)∈狀满足:①狊≠狉,②对于任意i∈[1,d]均有siri且p|‖狉‖i→p|‖狊‖i.根据定义6可以推断出基本划分向量的每维分量不含有除了p的质因子以外的质数,引理3给出了该性质的证明.定理1和定理2总结了基本划分向量中p的质因子在各维分量中的分布特点,可根据这两个定理构造产生所有基本划分向量的算法.引理3.若狉是基本数据划分向量,则狉的任意分量或者等于1或者可以表示为p的若干质因子的乘积.证明.使用反证法.设狉=(r1,r2,…,rd)∈狀是基本数据划分向量,i∈[1,d],x是质数且满足x|ri∧x|/p,构造向量狉=r1,…,rix,…,r(①若p|‖狉‖i,考虑到‖狉‖i=‖狉‖i,故p|‖狉‖i;②若j∈[1,d]∧j≠i且p|‖狉‖j,考虑到x|ri∧x|/p,则p|(‖狉‖j/x),即p|‖狉‖j.综合①和②可知对于任意k∈[1,d],均有p|‖狉‖k→p|‖狉‖k,因此狉不是基本数据划分向量,这与题设矛盾.证毕.定理1.设狉=(r1,r2,…,rd)∈狀,i∈[1,d],则狉是基本数据划分向量且仅在第i维满足p|‖狉‖i的充要条件为(1)若d=2,则满足(r1=1∧r2=p)∨(r1=p∧(2)若d>2,则满足‖狉‖=p∧ri=1∧j(j∈证明.略.定理2.设狉=(r1,r2,…,rd)∈狀,m1,m2,…,ms互异且属于[1,d],s∈[2,d],对于任意i∈[1,t],任意j∈[1,d],令ai,j表示pi在rj中出现的次数,令bi=∑dai,k-qi则狉是基本数据划分向量且狉中只有第m1,m2,…,ms维上的数据层面包含的数据块r2=1).[1,d]∧j≠i→rj∈[2,p-1]).k=1ai,mj=ai,mk=bi);[1,t]∧ai,j>bi).数才能被p整除的充分必要条件是(1)i(i∈[1,t]→bi∈[0,qi]);(2)ij(i∈[1,t]∧j∈[1,s]→ai,mj∈[0,bi]);(3)ijk(i∈[1,t]→j,k∈[1,s]∧j≠k∧(4)ji(j∈[1,d]-{m1,m2,…,ms}→i∈证明.见附录.确定均衡数据划分的划分向量首先需要确定哪些维上的数据层面包含的数据块数可以被p整除,记这些数据维的集合为={m1,m2,…,ms},令=[1,d]-.当s=1时可以按照定理1直接生成p的各质因子在各维的分布.当s2时可根据定理2确定各质因子在各维的分布,具体分3步:①首先对于每个pi,i∈[1,t],从中任选2个元素,将pi在这两维上出现的次数设置为bi(最后一步会保证bi是pi在中诸维上的出现次数的最大值),根据定理2,若s=2则bi=qi,若s>2则bi∈[0,qi].②接下来考虑质因子在中各维的分布,对于任意i∈[1,t],pi在中各维上出现的次数之和的取值范围是[ci,qi-bi],其中ci=max(0,qi-bi×(s-1)),记pi在ei个中的数据维上的出现次数大于bi,则ei∈[max(0,min(ci-bi×(d-s),1)),min((qi-bi)/(bi+1),d-s)],具体安排质因子分布时只需要保证中的每个维度上至少有一个质因子的出现次数大于该质因子在中各维出现次数的最大值即可.③最后考虑剩下的数据维,对于任意i∈[1,t],只需保证pi在这些维上出现的次数小于或等于bi,且pi在所有维上出现的总次数为qi+bi.以上产生所有的基本数据划分向量的过程可总结为算法1,为节省空间略去只有一个数据维上的数据层面包含的数据块数可以被p整除的情况.算法1的复杂度不高于穷举各维分量都能整除p的d维向量,而根据文献[6]的定理1,后者的算法复杂度为(d(d-1)/2)logp(1+o(1))/loglogp.所有集合的包含i个元素的子集的集合;每个数据划分向量表示为一个二维数组Config[1:t][1:d],给定任意i∈[1,t]和j∈[1,d],Config[i][j]的值表示质因子pi在数据划分向量的第j维分量中出现的次数,Config称为“配置数组”;GenConf(Config,i,Spots,1,2)是函数,其中Config是配置数组,i∈[1,t],Spots是[1,d]的子集,1,2是的子集,GenConf不会修改输入参数,该函数的输出为所有算法1中使用的符号的具体含义如下:Page7满足以下条件的配置数组NewConfig的集合:(1)kj(k≠i→NewConfig[k][j]=Config[k][j]);(2)j(j∈[1,d]∧jSpots→NewConfig[i][j]=Config[i][j]);(3)j(j∈Spots→NewConfig[i][j]∈1)∧∑j∈SpotsNewConfig[i][j]∈2).GenSpotsSet(Spots,1,2,…,t)也是函数,其中Spots是[1,d]的子集,1,2,…,t是[0,d]的子集,该函数的输出为集合{〈1,2,…,t〉|∪ti=1i=Spots∧i(i∈[1,t]→|i|∈i])},其中〈1,2,…,t〉表示由1,2,…,t构成的有序t元组,〈1,2,…,t〉简记为算法1.基本数据划分向量生成算法(s2).Config[1:t][1:d]=-1;={Config};=;=;=foreachs∈[2,d]foreach∈foreachi∈[1,t]foreach∈foreachb∈[0,qi]foreachConfig∈=;=if(s<d)foreachConfig∈foreachi∈[1,t]bi=0foreachj∈bi=max(bi,Config[i][j])xi=max(0,qi-bi×(s-1))yi=max(0,min(xi-bi×(d-s),1))zi=min((qi-bi)/(bi+1),d-s)foreachforeachi∈[2,t]if(s>2)foreachi∈[1,t]foreachConfig∈bi=0=;=return4.3确定处理机分配设狉是基本数据划分向量,本节探讨如何给狉中的数据块分配处理机,以保证得到均衡数据划分.设狉=(r1,r2,…,rd)是基本划分向量,引理4证明存在向量狌=(u1,u2,…,ud)满足i(i∈[1,d]→ui|ri)∧‖狌‖=p,引理4的证明过程给出了狌的构造方法.一旦确定狌,可构造向量狊=(s1,s2,…,sd),使得对于任意i∈[1,d]均有si=ri/ui.将狊看作数组狉的数据划分向量,则数组狉被狊分割成的所有子数组构成狊,狊中的每个子数组的各维长度可综合表示为狌,为了区分这些子数组,对于任意狏∈狊,将其对应的子数组记为狌,狏,则狌,狏狉.接着按序执行以下两步:①对于任意狏∈狊,将狌,狏中的元素按照从低维到高维排序并从1开始编号,并将该编号赋予该元素,考虑到狌,狏共有‖狌‖=p个元素,故狌,狏中的每个元素各自得到一个属于[1,p]的编号.②沿狊各维正方向依次扫描,在按每维扫描时,依次处理该维上的数据层面.具体而言,对于任意狊(i,j),i∈[1,d],j∈[1,si],首先将狊(i,j)中的所有元素按照从低维到高维排序并从1开始编号,对任意狏∈狊(i,j),记其编号为k;然后将狌,狏中的每个元素的编号在狌,狏内沿着第i维正方向循环移动k个单位.完成步骤①和②后狉中的每个数据块有一个属于[1,p]的编号,将数据块分配给该编号表示的处理机即得到一个均衡数据划分.以上分配处理器的方法总结为算法2,其输入为基本数据划分向量狉,算法结束时狉的任意元素狓所属的处理机编号表示为标量属性狓.proc.算法2中采用的符号含义如下:①向量的分量使用相同的字母加上下标表示.②对于任意i∈[1,d],k∈,狓∈狌,θk表示函数θ狌,i的k次复合,从直观上看,θk量狓在狌内沿着i维正方向循环移位k次.算法2的正确性由附录的定理3保证,定理3用到的函数和相关记号在附录中的定义7至定义9中给出,定理3用到的引理5亦在附录中给出.Page8引理4.设狉=(r1,r2,…,rd)是基本数据划分向量,则存在狌=(u1,u2,…,ud)满足i(i∈[1,d]→ui|ri)∧‖狌‖=p.证明.记px在ry中出现的次数为ax,y,x∈[1,t],y∈[1,d].因为狉是基本划分向量,故存在i∈[1,d]满足p|‖狉‖i,故j(j∈[1,t]→∑daj,iqi).对于任意j∈[1,t],构造整数序列xj,1,xj,2,…,xj,d满足:①xj,i=0,②k(k∈[1,d]∧k≠i→xj,k∈[0,aj,k]),③∑dud),其中k(k∈[1,d]→uk=∏t题设条件的向量.算法2.处理机分配函数生成算法.find狌=(u1,u2,…,ud)satisfyingi(i∈[1,d]→ui|ri)∧s0=1;u0=1;狊=r1u1foreach狏∈狊foreach狑∈狌狑=((v1-1)×u1+w1,(v2-1)×u2+w2,…,狑.proc=∑dforeachi∈[1,d]foreachj∈[1,si]foreach狏∈狊(i,j)k=∑dforeach狑∈狌狓=((v1-1)×u1+w1,(v2-1)×u2+w2,…,狑=θk狔=((v1-1)×u1+w1,(v2-1)×u2+w2,…,狔.tmp=狓.procforeach狑∈狌狓=((v1-1)×u1+w1,(v2-1)×u2+w2,…,狓.proc=狓.tmp定理3.设狉=(r1,r2,…,rd)∈狀是基本数据划分向量,狌=(u1,u2,…,ud)∈狀,‖狌‖=p,狊=(s1,s2,…,sd)∈狀,i(i∈[1,d]→ri=ui×si),ε:狌→[1,p]是双射,令:ι:狉→狌,ι(狓)=(y1,y2,…,yd),yi=αui(xi),i∈[1,d];π:狉→狊,π(狓)=(y1,y2,…,yd),yi=βui(xi),λ:狉→[1,p],λ(狓)=ειδ狌,d,zd…δ狌,2,z2i∈[1,d];δ狌,1,z1(狓),zi=ζ狊,i(π(狓)),i∈[1,d];则(狉,λ)是均衡数据划分.证明.见附录.5实例及其性能分析考虑p=30,d=3,待划分数组3维大小都是100,各维正负向上的相关深度都是2,数组按列优先存储.p共有3个质因子2、3和5,且它们在p中的出现次数都是1.由于多重数据划分的划分向量需要保证任意维上的数据层面包含的数据块数可以被p整除,故每个质因子只有(0,1,1)、(1,0,1)、(1,1,0)3种分布方式,这些向量的第i维分量表示对应质因子在数据划分向量的第i维上的出现次数,每个质因子的分布方式可以任意搭配,因此共有27种合法的数据划分向量,若考虑对称性则只有5种:(1,30,30)、(2,15,30)、(3,10,30)、(5,6,30)、(6,10,15).在所有这些数据划分向量中,(6,10,15)使得HALO区占比最小,因此理论上使用此划分向量的多重数据划分性能最好,其对应的处理机分配方式可以参见文献[5]的第5小节.均衡数据划分除了可以使用多重数据划分的这5种划分向量,还可以采用只保证一维或两维上的数据层面的数据块数能被p整除的划分向量,在考虑对称性的情况下还有8种有效划分向量:(1,1,30)、(1,5,6)、(2,2,15)、(2,15,15)、(3,3,10)、(3,10,10)、(5,5,6)、(5,6,6).若访存是瓶颈,则根据本文4.1节的目标函数可知(5,5,6)的性能最好.令狉=(5,5,6),下面根据算法2讨论如何为狉确定处理机分配方式.令狌=(1,5,6),则狌的每维分量整除狉的对应分量,且有‖狌‖=p,算法2中的狊=r1u1个元素对应于狉中第1维上的一个数据平面,首先对这些数据平面中的数据块赋初值,得到如下效果,其中对于每个数据层面,第2维的正方向为从左到右,第3维的正方向为从下到上:2627282930熿21222324251617181920111213141567891012345燀Page92627282930熿212223242516171819201112131415678910燀12345接着沿着狊的第1维遍历,由于狌的第1维分量为1,处理机标号沿着第1维移动不会产生变化,因此本步骤结束时处理机标号没有变化.然后沿着狊的第2维遍历,狊在第2维上只有一个数据层面,狉(1,1)~狉(1,5)在狊中的标号分别为1~5,它们包含的各数据块的处理机标号分别沿着第2维循环移动1~5次,得到3026272829熿252122232420161718191511121314106789燀512342829302627熿232425212218192016171314151112891067燀34512最后沿着狊的第3维遍历,狊在第3维上亦只有一个数据层面,狉(1,1)~狉(1,5)在狊中的标号分别为1~5,它们包含的各数据块的处理机标号分别沿着第3维循环移动1~5次,得到最后的处理机分配方案:2521222324熿2016171819151112131410678951234燀30262728291314151112熿8910673451228293026272324252122燀1819201617假设沿每维扫描时数组里面的每个元素只访问一次,边界数据只通讯一次,访存相对计算总是瓶颈,通讯时间只和通讯量相关且成正比.则根据上一节的讨论,性能最佳的多重数据划分和均衡数据划分的划分向量分别为(6,10,15)和(5,5,6),下面对比二者实际性能,在讨论中,访存量和计算量都以数组元素为单位.划分向量(6,10,15)对应的每个数据子块的实际计算区域大小为17×10×7,实际存储区域大小为21×14×11;(5,5,6)对应的每个数据子块的实际计算区域大小为20×20×17,实际存储区域大小为24×24×21.多重数据划分沿各维正负方向各扫描一次,每个处理机访问的数据块数为6×10×15为(21×14×11)×180=5.82×105;均衡数据划分中每个处理机对应的访问量为(24×24×21)×(5+5+6)×2=3.87×105.多重数据划分的访存量约为均衡数据划分的1.5倍,这个值也是二者本地处理时间之比.就通讯量而言,多重数据划分沿各维正负方向扫描一次,每个数据块需要交换的数据量为(10×7×2+17×7×2+17×10×2)×2=1436,每个处理机分配到的数据块数为6×10×15Page10故每个处理机的通讯量为1436×30≈4.31×104.均衡数据划分沿第1、2、3维任意方向扫描一次,每个处理机的单向通讯量为20×17×2×5=3400,20×17×2×5=3400和20×20×2×6=4800,故沿各维正负方向各扫描一次,每个处理机的单向通讯量为(3400+3400+4800)×2=2.32×104.多重数据划分中每个处理机的通讯量约为均衡数据划分的1.86倍,这个比例也是通讯时间之比.综上可知,对于本节的例子,均衡数据划分的性能远高于多重数据划分.6实验为了检验均衡数据划分的实际性能,我们将其应用于NPB(NASParallelBenchmarks)并行测试包中的SP程序和一个实际使用的高分子材料计算程序LineABC.SP和LineABC分别使用Line-Sweep模式求解五对角方程组和自洽平均场方程[10].测试平台为复旦大学高端计算中心的集群,该系统共有100个计算节点,每个节点是双处理机SMP,处理机为IntelXeon3.06GHz,二级Cache大小为512KB;计算节点之间通过Myrinet2000高速集群网络互联;操作系统为RedHatLinux8.0,MPI版本为MPICH-GM1.2.6,编译器为IntelCompiler9.1.两个测试程序的数据规模都是1203,测试中每个计算节点只使用一个处理机.对于给定的应用程序和处理机数p,我们首先根据性能模型找到理论性能最佳的多重数据划分和均衡数据划分,其中多重数据划分采用影像区体积最小的划分向量,均衡数据划分采用4.1节的性能模型,然后测试它们的性能.对于任意x2,令Tx和Tx分别表示使用x个处理机的多重数据划分和均衡数据划分的实际并行时间,现给定任意y2,若不存在z∈[2,y-1]使得min(Tz,Tz)min(Ty,Ty),则y称为有效处理机数,因为处理机的增加不会导致实际性能的下降.本节只列出有效处理机数对应的测试数据,因此图3~图6中的处理机数的变化不规律.有效处理机数可进一步分类:若均衡数据划分和多重数据划分的划分向量一致,则该处理机数归为类别I,否则归为类别II.SP程序介于2~100之间的有效处理机数共有31个,其中12个属于类别II,占总数的38.7%;LineABC程序介于2~100之间的有效处理机数共有29个,其中11个属于类别II,占总数的37.9%.图3和图4分别给出SP和LineABC的属于类别I的有效处理机数的并行效率(加速比除以处理机数),图5和图6则给出属于类别II的并行效率.从图3和图4可以看出,当均衡数据划分和多重数据划分的数据分割向量相同时,它们的性能也几乎一致,且在大多数情况下后者性能略优.为了方便表示性能差别,对于任意有效处理机数p,定义diff(p)=(e1-e2)/max(e1,e2),其中e1和e2分别表示p所对应的均衡数据划分与多重数据划分的并行效率,则SP程序类别I中全部有效处理机数的diff(p)的平均值为-0.78%,LineABC的对应值为-1.96%,这种细微的性能差别来源于多重数据划分使用了通讯聚合的优化方法.从图5和图6可以看出,对于类别II中有效处理机数,均衡数据划分的性能远高于多重数据划分,SP的diff(p)平均值为44.45%,Line-ABC的diff(p)平均值为22.15%.Page11对于给定的程序和处理机数p,为了进一步理解diff(p)的产生原因,可引入相对本地处理时间和相对通讯时间的概念:将实际运行时间分为本地处理时间和通讯时间两个部分,并记多重数据划分的本地处理时间为benchmark(p),则多重数据划分或均衡数据划分的本地处理时间与benchmark(p)的比值称为该数据划分的相对处理时间,多重数据划分或均衡数据划分的通讯时间与benchmark(p)的比值称为该数据划分的相对通讯时间.图7和图8显示均衡数据划分不仅减少了通讯时间,也大幅减少了本地处理时间,这主要原因是减少了实际访存量,这些现象和4.1节中的性能模型相符,也进一步印证了性能模型的有效性.图8LineABC相对计算和通讯时间(类别II)7总结Line-Sweep计算是众多科学工程计算的核心,由于它具有独特的数据访问模式,故需要为其设计特殊的数据划分.多重数据划分是当前并行化Line-Sweep计算的主要数据划分,其核心理念是负载均衡,它要求每个数据层面的数据块数恰好是处理机数的倍数,对于某些处理机数,这会导致一些数据维分割次数过多,从而增加访存量和通讯量.此时以少量计算开销的增加换取大量访存和通讯开销的减少,则可能获得更好的整体性能.基于该思想,我们提出均衡数据划分,该划分和多重数据划分一样亦能使用任意数目处理机并行化任意维Line-Sweep计算,且能够全局平衡计算、访存和通讯开销,从而达到最佳整体性能.本中首先为均衡数据划分建立性能模型,根据该模型均衡数据划分的性能只取决于数据划分向量,因此我们求解最佳均衡数据划分的算法可分为两步:第1步确定理论性能最佳的数据划分向量,在实际应用中,这一步很快,以三维数据划分为例,为103量级的处理机数目寻找最佳数据分割向量所耗费的时间为毫秒量级;第2步确定处理机分配函数,给定任意在第1步中找到的数据分割向量,该函数能够保证最终得到均衡数据划分.为了检验均衡数据划分的实际性能,我们将其应用于NPB并行测试包中的SP程序和高分子材料计算程序LineABC.实验结果表明,均衡数据划分具有更高和更稳定的性能.
