Page1多社交网络的影响力最大化分析李国良楚娅萍冯建华徐尧强(清华大学计算机科学与技术系北京100084)摘要影响力最大化旨在从网络中识别k个节点,使得通过这k个节点产生的影响传播范围最大.该问题在病毒营销领域具有重要的应用背景,它已经引起了学术界和工业界的广泛研究.该文作者观察到已有的研究工作大多数只是针对单一网络,即在给定的一个网络上识别k个节点使得其在该网络上产生最大的影响范围;然而,随着社交网络的普及,丰富多样的社交平台不断涌现,以满足不同的社交需求,这使得社交人群不被局限在一个网络内,而是分布在不同的社交网络上.这种变化的一个直接影响是使得基于病毒式营销的应用,例如单一网络上的产品推广愈加不能满足推广的广度需求,很可能是单一网络上的用户量不能达到推广的目标人群数量,又或者广告商期望在多个网络平台上找到k个用户以最大化影响传播范围.为此,在文中,作者研究多社交网络上的影响力最大化问题.该文首先仔细地研究了影响力最大化问题在单一网络和多社交网络上的不同,并提出了实体的自传播特性以在多个网络之间建立联系.之后,作者提出了多社交网络上的影响计算模型来建模节点间的影响力,然后扩展了基于树的算法模型以适应多社交网络上的影响力最大化问题.基于所提出的影响计算模型和扩展的基于树的算法模型,作者提出了多种策略的优化算法.例如通过深层次挖掘自模特性来避免冗余计算,通过使用影响增益上界近似准确的增益来加速种子选取过程等,最后通过真实数据集上的实验表明文中所提方法在性能和影响范围上都优于已有的算法.关键词社交网络;影响力最大化;多社交网络;传播模型;影响力;社会媒体;数据挖掘1引言互联网的快速发展,不仅带来了海量的数据,也丰富了人们之间的交流、沟通渠道.多样的社交网络在给予人们多种交流平台选择的同时,也为一些传统的生产方式提供了机会.在众多的营销方式中,口口相传①(word-of-mouth,也被称为病毒式营销②)被认为是最为有效的营销方式.不同于其他的营销策略,口口相传基于个体之间的相互信任而进行产品的传播和推广,研究[1]表明,相比之下,人们更倾向于信任从亲戚、朋友等强社交关系那里所获得的信息,基于社交网络的病毒式营销正是基于这种共识而被广泛接受.得益于互联网和社交网络的发展,传统的社交关系正逐渐从线下转移到线上,使得对这种社交关系的跟踪和分析更加容易.所有这些使得社交网络上的病毒式营销倍受关注,作为社交网络影响力研究领域的一个重要问题,“影响力最大化”对应于病毒式营销的应用研究,更是引起了学术界和工业界的广泛关注和研究热情.影响力最大化问题最早由Domingos和Richardson等人[2-3]提出,而后Kempe等人[4-5]进一步提出了top-k的影响力最大化问题,即假设给定只能满足k个用户的预算费用,如何找到k个用户使得通过这k个用户所产生的影响传播范围最大.在线性阈值模型和独立级联模型下,影响力最大化问题被证明为NP难问题[4],而对给定k个用户的影响范围的准确评估被证明为#P难问题[6].针对影响力最大化方面的研究,已经有很多学者提出过不同方法来解决此问题.Kempe等人提出了一个近似比为(1-1/e)的贪心算法来解决此问题;由于贪心算法的最坏运行时间为O(n2(m+n)),对于稍大规模的社交网络来讲伸缩性遇到挑战,计算代价高昂,为此很多学者都针对贪心算法的伸缩性问题进一步提出了很多算法以提升计算性能.Leskovec等人[7]通过挖掘影响函数的子模特性,提出了CELF(Cost-EffectiveLazy-Forward)算法,该算法极大地减少了评估种子影响范围的次数,他们的实验表明CELF算法相比贪心算法有近700倍的速度提升,尽管CELF的性能提升很明显,但是在数万节点规模的网络上寻找top-50的节点仍然需要数个小时的时间[8].CELF++是Goyal等人[9]在CELF算法的基础上通过进一步挖掘子模特性而优化的算法,虽然CELF++相比CELF维护的信息更多,但是比CELF有了近17%~61%的性能提升.除了基于贪心算法的改进之外,还有使用启发式进行优化的算法.Kimura和Saito等人[10]提出了基于最短路径的影响级联模型SPM和SP1M,并据此提出算法计算该模型下的影响范围,该模型假设每个节点都只通过最短路径进行信息传播,在SPM①②Page3和SP1M模型下,每个节点的影响范围都可以被准确计算出来,但是这些模型忽略了用户之间的影响概率,仅仅使用最短路径而忽视了用户间的影响在传播中的重要作用.Chen等人[11]对Kempe等人所提的贪心算法进行了优化,结果表明通过对贪心算法改善而极大提升性能是非常困难的,随后提出了degree-discount算法,该算法虽然能提升计算性能,但是该方法假设在独立级联模型下所有边上的影响概率值都一样,很显然同现实需求不符.另外文献[12]提出了使用社区结构来聚合具有相似特征的节点以期减少计算过程中的节点数量.Goyal等人[13]所提的SIMPATH算法被证明在线性阈值模型下较为有效,他们实验表明SIMPATH在运行时间、内存损耗和影响范围具有很好的性能.Jiang等人[14]还首次提出了使用模拟退火的方法来解决影响力最大化问题.Jung等人[15]提出了IRIE方法以期伸缩性的解决影响力最大化问题.在最短路径的影响级联模型下,Chen等人[6]提出了使用最大传播路径的启发式算法来解决该问题.即假设用户之间的信息传播按照最大传播路径而非最短路径进行传播,考虑了用户之间的影响概率.对每个节点使用最大传播路径建立它的局部树结构,并以此评估每个节点的影响范围,通过设置最大传播路径的阈值过滤不重要的节点以减少候选节点规模.基于最大传播路径的传播模型具有子模性,保证所求节点集合能够达到1-1/e的近似最优比.实验证明[6]基于最大传播路径的启发式算法能极大地提升性能.在文献[16]中,作者使用社区结构通过聚集具有相似特性的来减少需要检验的节点数目.Kim等人[17]提出了使用OpenMP元编程表达式的并行计算方法来提升计算性能.Tang等人[18]提出了一个接近最优时间复杂度的算法和启发式算法来提升效率.Cheng等人[19]介绍了一种基于自适应排序的算法来解决此问题.另外还有很多针对影响力最大化方面的扩展工作.Li等人[20]研究了基于地理位置的影响力最大化问题,即在全局网络内找到k个用户使得这k个用户对所查询的地理位置能够产生最大的影响范围.Tang等人[21]将关系分类考虑到影响传播的过程中,通过用户之间的关系类别和待推广的产品特性,使带推广产品尽可能地在适当的关系类别中传播以减少在不必要的关系中传播.此外Barbieri等人[22]还研究了话题感知的影响力最大化问题,Chen等人[23]更进一步地研究了在线的话题感知的影响力最大化问题.此外,还有一些其他的研究致力于通过使用机器学习或者数据挖掘的方法来提取影响传播模型下的参数问题.例如Tang等人[24]提出了基于因子图模型的TFG模型来定量地衡量社交网络中用户间在不同话题上的影响力强度;Liu等人[25]使用概率模型将用户节点的话题分布以及用户间的影响力强度结合的方式来学习用户间的影响力强度;Weng等人[26]在Twitter上分析了不同话题上的影响力强度,首先通过LDA话题模型提取用户的主题分布,然后使用TwitterRank方法计算用户间在不同话题上的影响概率.Chen等人[28]在复杂网络上研究了识别有影响力节点的问题,提出了一种介于中心度低相关和其他较为耗时方法折中的半局部中心度量的方法来识别有影响力的节点,最后在SIR传播模型上评估性能.现有的影响力最大化研究大多针对单一网络进行分析,然而当前社交网络种类十分丰富,不同的社交网络针对不同的受众用户具有自身的特点.例如新浪微博和Twitter关注信息流通,专注于共享微博客;人人网和Facebook注重朋友之间的互动和联络;知乎和Quora侧重于问答(Q&A).而现如今的产品推广重点在于影响力最大化,即将信息推广传播到最多的用户上,为此除了找到关键节点用户之外,还需要找到更多的待推广人群,为此多个社交网络上的影响力最大化正成为营销需求.多社交网络即在给定的多个目标网络中,找到k个用户,使得通过这k个用户的影响使得最后在多个社交网络上的传播范围最大.相比单一网络的影响力最大化问题,多个社交网络保证待传播的用户数量更多,但同时也面临着更多挑战:(1)如上所述,影响力最大化问题为NP难问题,而准确评估用户的影响范围为#P难问题,多网络上用户数量的增加首先带来了计算挑战:更多的候选种子节点,更广的传播范围;(2)相比单一网络,多网络上的信息传播以及对于用户之间的影响力评估更复杂;(3)多网络需要考虑网络间节点的实体链接①和识别问题,避免在计算节点的影响范围时产生计算错误.因此,多社交网络上的影响力最大化研究挑战更多,复杂度更高.针对上述挑战,本文研究了多社交网络上的影响力最大化问题,首先分析了多社交网络上信息传播的特征并对多社交网络上的影响力最大化问题进①http://en.wikipedia.org/wiki/Entity_linkingPage4行了定义,提出了影响计算模型解决多网络上节点间的影响概率,通过扩展树的算法模型提出了几种优化方法,并通过实验对比了所提算法的性能.本文第2节介绍多社交网络信息传播的自传播特性以及阐述多社交网络上的影响力最大化问题;第3节介绍多社交网络上的影响计算模型以及基于树的算法模型;第4节介绍文章所提的几种优化算法;在第5节给出在真实数据集上的对比实验;最后在第6节总结文章工作.2自传播性与问题定义2.1自传播给定n个网络G1(V1,E1),G2(V2,E2),…,Gn(Vn,En),对于每个网络Gi(Vi,Ei)(0in),Vi表示网络Gi中的节点集合,Ei表示网络Gi中的边集合,ETi表示网络Gi中的实体集合.本文使用V表示所有的节点集合,即V=∪所有的实体集合,即ET=∪中不同名称的节点可能指代同一个实体(entity),为了表示他们之间的关系,每个节点使用它的表面名称(surfacename,该节点在网络中的名称)、网络身份(networkID,该节点所在的网络)和实体身份(entityID,该节点实际指代的实体)3种信息来表示.比如u(eu,Gi)就表示存在网络Gi中,名为u实际指代实体eu的节点.对于任意实体eu,它可能存在于多个网络中,例如实体eu分别在人人网和新浪微博上都有账户,分别表示为u(eu,RR)和u(eu,WB).当节点u(eu,WB)在微博上看到一条很有意思的文章,为了将此文章分享给其在人人网上的朋友,u(eu,WB)将该文章转发到了人人网上.在这个过程中,该文章被用户u(eu,WB)从新浪微博转发到了人人网中,本文称这种行为为自传播行为,具体定义如定义1.定义1.自传播.给定存在网络Gi和网络Gj的实体eu,分别表示为u(eu,Gi)和u(eu,Gj).如果实体eu将信息从网络Gi传播到了网络Gj(即信息由节点u(eu,Gi)传播到了节点u(eu,Gj)),那么称这种行为为自传播.由于每个实体在两两网络间的自传播频率不同,这里统一使用参数δeu(Gieu从网络Gi到网络Gj的自传播概率.显然,正是由于实体在不同网络间的自传播,使得信息能够在不同的网络之间进行传播,而不是封闭在一个网络内.图1描述了原始网络(子图1)在自传播的基础上形成的新网络结构(子图2).其中子图1包含了人人网和新浪微博两个社交网络,子图1中节点间的实线表示节点之间的传播概率,不同网络间相同的节点标识表示相同的实体.子图2为在自传播特性上新形成的网络结构.其中虚线表示实体之间的自传播概率.比如δa(ai网)到网络2(新浪微博)的自传播概率为1.如果一个自传播概率δeu(Gi中的信息传播到网络Gj中.否则就以δeu(Gi率将网络Gi中的信息传播到网络Gj中.由于每个网络的功能不同,面向的受众人群也有所不同,同一实体在不同的网络中具有不同的影响力.例如在新浪微博上影响力很大的人,在人人网上的影响力或许就非常小(这里简单就粉丝数量来衡量影响力的话):中国知名女演员姚晨在新浪微博上拥有粉丝数量77930000人,但在人人网上的粉丝只有6697人,相比之下,其微博粉丝数比人人网高出近11637倍.如果想要通过姚晨来传播信息,那么可能只需在微博上发布一次而无需在人人网上再次发布就足以覆盖其多数粉丝.使用信息发布次数进行计费,不仅减少了冗余信息的发布,同时降低了推广费用.为此本文在选择关键节点以最大化传播范围的时候,是按照节点而非实体进行选择,但是在计算传播范围的时候,需要按照实体进行度量,避免计算结果误差过大.2.2传播模型及问题定义本文使用传播模型中使用最为广泛和最具代表Page5性的独立级联模型[4,6,27]来模拟传播过程.在独立级联模型中,每个节点有两种状态:激活和未激活,其中激活表示该节点接受或者传播某种信息(例如微博上的转发、点赞等行为).形式上,独立级联模型可以归纳如下:在初始阶段,初始激活节点集合(也称为种子集合)S∈V被选中在这n个网络中进行传播,这里使用At和Et分别表示在阶段t后被激活的节点集合和实体集合,因此有A0=S,E0=∪u∈A0eu,在阶段t+1,每个在集合At中的节点u都只有一次机会来激活它的处于非激活状态下的外向邻居节点,此过程一直持续到At=,此时Et=.在这个过程中所有被S所激活的实体集合记为σ(S)=i=0Ei,其中Et+1=.本文称σ(S)为集合S的影∪i=t响范围(influencespread).在此基础上,多网络上的影响力最大化问题的定义如定义2.定义2.多社交网络的影响力最大化.给定n个社交网络G1(V1,E1),G2(V2,E2),…,Gn(Vn,En),这n个社交网络的所有节点表示为V=∪定一个整数k,多社交网络上的影响力最大化旨在找到一个包含k个节点的集合S(|S|=k),使得对于任何包含k个节点的集合K∈V,都有σ(S)σ(K).这里称S为种子集合,S中的每个节点为种子节点.显然,多网络上的影响力最大化问题仍然满足单调性和子模性(submodular),即使用贪心算法可以找到一个近似比为1-Kempe等人[4]已经证明了影响力最大化问题为NP难问题,同时,准确评估影响范围也被证明为#P难问题[6].贪心算法面临的最大挑战是伸缩性问题,随着网络规模的增加,使得伸缩性问题更加突出.在真实数据集上的实验显示,贪心算法在百万规模的数据集上需要数天时间才能选出种子集合,计算时间较长.下面我们先介绍多社交网络上的影响计算模型,然后扩展基于树的算法模型[6]给出有效的解决措施,从而解决多社交网络下数据规模扩展带来的伸缩性挑战.3影响计算模型和基于树的算法模型3.1节点间的近似影响计算模型在多社交网络环境下,考虑实体间的自传播特性,节点对之间的传播路径不仅有多条,还会跨越网络.下面以图2为例说明在多网络下,给出本文所提的多网络下的影响计算模型.图2所示的示意图包含两个网络:人人网和新浪微博.网络之间的虚线如同图1一样,用来表示实体间存在自传播性.其中灰色的节点属于人人网,白色的节点属于新浪微博.图2所示的示意图中,具有相同名字,不同下标(下标表示网络ID)的节点指代同一个实体,例如a1和a2都指代实体a.这里以节点a1对实体b为例来说明如何计算一个节点对实体的影响强度.不考虑自传播性,从节点a1到实体b只有一条路径:Path1(a1→b1);如果考虑实体a的自传播性(a1→a2),经由节点a1到实体b还有:Path2(a1→b1→b2)、Path3(a1→a2→b2)和Path4(a1→a2→d2→b2)3条传播路径.这里需要注意路径Path2,可以看出对节点b2的影响是在b1的基础上产生的,而b1和b2指代相同的实体,在计算过程中该条路径不被计算在内.如此,节点a1对实体b的影响路径有Path1、Path3和Path4.路径P=(u=n1,n2,…,v=nm)表示经由节点u到节点v.在独立级联模型下,点u沿着路径P对点v所产生的影响传播强度记为pp(P),其中pp(P)使用式(1)计算:由于节点对之间的可达路径有很多条,在网络规模较大的情况下更是如此,逐一计算所需的计算量十分大.本文使用节点间具有最大传播概率的路径来近似衡量节点对之间的传播概率以减少计算规模,这里使用MPP(u(eu,Gi),v(ev,Gj))来表示由点u(eu,Gi)到点v(ev,Gj)的所有路径中具有最大传播概率的路径,并以该最大传播路径上的值近似作为他们之间的传播概率.则节点u(eu,Gi)到节点v(ev,Gj)的传播概率可近似表示如式(2):pp(u(eu,Gi),v(ev,Gj))≈pp(MPP(u(eu,Gi),v(ev,Gj)))(2)在多网络情况下,需要衡量节点对实体的影响强度,这里假设在n个网络上有m(mn)个表面名Page6称指代实体ev(即实体ev存在m个网络上).这里需要注意在使用最大传播路径近似节点间的影响力时,如果目标节点与它的前驱指代相同实体,则该路径不被计算在内.如此由节点u(eu,Gi)到实体ev使用最大传播路径近似之后,可以得到一个以节点u(eu,Gi)为根节点,叶节点为指代实体ev的多叉树.节点u(eu,Gi)对实体ev的影响可使用式(3)计算,其中Gjm表示第m个指代实体ev的节点所在的网络ID.pp(u(eu,Gi),ev)=1-∏示例.以图2为例解释如何使用近似的影响计算模型来计算节点a1对实体b的影响传播强度.由图可知,实体b存在人人网和新浪微博,分别表现为b1和b2,经由a1到节点b1只有一条路径Path1(a1→b1),相应的,该路径也是具有最大传播的路径,pp(a1,b1)=1-(1-pp(a1→b1))=0.2;从节点a1到节点b2有3条路径,由于路径Path2(a1→b1→b2)中节点b2的前驱b1指代相同实体,该条路径不在计算之内.则剩下的两条路径的传播概率分别为Path3:pp(a1→a2→b2)=1×0.4=0.4,Path4:pp(a1→a2→d2→b2)=1×1×0.6=0.6,可知具有最大传播概率的路径为Path4〈a1→a2→d2→b2〉,则pp(a1,b2)=pp(a1→a2→d2→b2)=0.6,根据式(3)可知,节点a1对实体b的近似传播概率为1-(1-0.2)×(1-0.6)=0.67.3.2基于树的算法模型根据式(3),可以计算出每个节点的影响传播范围,即将该节点对每个实体的影响范围加权,具体计算使用式(4):式(4)中,E表示n个网络中的所有实体集合,根据式(4)对节点集合V中的每个节点计算它的影响传播范围,其中具有最大影响传播范围的节点为第1个种子节点s1.当选择第2个种子节点时,应是同第1个种子节点s1一起能够产生最大影响范围的节点,换句话说,第2个种子节点应该是在已有的种子集合基础之上能够产生最大影响范围增益的节点.假设第1个种子为u,第2个候选种子为v,节点v在节点u上的影响范围增益表示在加入节点v之后所增加的影响范围.节点v在当前种子集合S上的影响范围增益表示为gain(v|S),计算方式如式(5)所示.式(5)中σ(S)表示节点集合S所能产生的影响范围.显然,σ(S)并不等于S中的每个节点所能产生的影响范围加权,因为S中的节点到某一目的点v的最大化传播路径可能产生交叉,加权求解会造成所求值比真实值大的假象.为此,需要计算集合S对每个实体的影响概率,然后加权求解,具体计算如式(6).式(6)中,pp(S,ev)表示节点集合S对实体ev的影响传播概率.因此,可以使用式(3)进行计算,即pp(S,ev)=1-∏pp(S,v(ev,Gjm))表示集合S对节点v(ev,Gjm)的影响强度,同样的,对于节点v(ev,Gjm)的影响不能通过集合S中的每个点对v(ev,Gjm)的影响加权计算,因为集合S中的点到v(ev,Gjm)的最大传播路径会有重叠.为此,我们扩展基于树的算法模型[6]来解决该计算问题.基于树的算法模型,将节点v视为树根,所有能够抵达点v的起始节点作为该树的叶子节点,通过叶子节点沿着抵达点v的最大传播路径逆向构建一棵树.可知,所有能够影响到点v的节点一定在以点v为树根的最大逆向传播树里.如此,可以根据式(7)计算pp(S,v(ev,Gjm))的值:pp(S,v)=由于空间有限,式(7)中使用v来简单表示v(ev,Gjm),其中Cv表示以点v(ev,Gjm)构成的最大逆向传播树中点v(ev,Gjm)的儿子节点集合.这里需要注意所有的传播只在以点v(ev,Gjm)构成的最大逆向传播树里进行.对于每个节点u(eu,Gi),本文使用O(u(eu,Gi))和I(u(eu,Gi))分别表示所有被点u(eu,Gi)影响的节点集合和所有能够影响点u(eu,Gi)的节点集合.因此可知,在计算最大传播路径的时候可以获得O(u(eu,Gi)),而在构建最大逆向传播树的时候可以获得I(u(eu,Gi)),其中O和I表示方向,O表示外向邻居(Outgoing),I表示内向邻居(Ingoing).4基于上界的算法优化由前文讨论可知,当选择下一个种子节点时,在Page7已有的种子集合的基础上能够产生最大影响范围增益的节点即为下一个种子节点.当O(u(eu,Gi))∩O(v(ev,Gj))=时表示点u(eu,Gi)和点v(ev,Gj)没有共同影响的节点,否则需要重新计算被他们共同影响的节点的激活概率.多网络上的影响范围增益是针对所能影响到的实体的增益.需要先计算每个节点的影响概率,然后针对每个实体计算影响增益,因此针对每一个候选种子都需要计算每个节点和每个实体在当前种子集合下的影响概率.为了避免计算冗余,本文使用EMS(EM表示entitymap)和NMS(NM表示nodemap)分别缓存种子节点对每个实体和每个节点的影响概率.算法1为候选种子u在现有种子集合S上的影响增益计算过程(其中u和v为形如u(eu,Gi)的简写形式).算法1.gain(u,S,EMS,NMS).输入:候选种子节点u,种子集合S,EMS,NMS输出:候选种子节点u的影响增益gain(u|S)初始化EMS∪u=EMS;初始化gain(u|S)=0.0;FOR(EACHvINO(u)){IF(vNOTINNMS.keyset()){IF(v.entityNOTINEMS.keyset()){EMS∪u[v.entity]=pp(u,v);ELSE{EMS∪u[v.entity]=1-(1-EMS[v.entity])×ELSE{nval=1-(1-EMS[v.entity])×(1-npp(u,v))/}FOR(eINEMS∪u.keyset()){IF(eINEMS)THEN{ELSE{gain(u|S)+=EMS∪u[e];}RETURNgain(u|S);算法1描述了候选种子节点u在已有种子集合S上影响增益的计算过程.具体包含两个部分,首先需要计算集合(S∪u)对每个实体的影响概率,然后加权每个实体的增益值作为最后u在集合S上的增益值.根据算法1可知,每一轮选择具有最大影响范围增益的节点,直至选择k个种子为止.经过我们的实验发现,算法1所耗时间比较长,因为它需要准确计算每个节点的影响范围,然后需要计算每个实体的增益值才能求解.如果节点v被集合S和u共同影响,需要根据式(7)求解节点的影响范围npp(u,v)时.如果节点u和s分别独立的影响节点v,则u和s对v的共同影响概率为1-pp(u,v)×pp(s,v),否则需要根据式(7)计算.由此可知,影响独立假设下的影响概率pp(u∪s,v)要大于根据式(7)所计算值,因为式(7)减去了由u∪s共同影响的那部分值.如果假设集合S中的每个点对节点v(ev,Gi)都独立影响,则集合S对v(ev,Gi)的影响概率pp(S,v(ev,Gi))使用式(8)计算.p^p(S,v)=因为对于实体的影响概率是根据其多个被指代的节点计算,根据式(8)可以得出集合S对实体ev的影响概率计算如式(9).假设实体ev存在n个表面形式,记节点u在集合S的基础上对实体ev的影响增益为g^ain(u|S,ev),则g^ain(u|S,ev)=p^p(S∪u,ev)-pp(S,ev).根据式(9),对增益值g^ain(u|S,ev)有如下推导:g^ain(u|S,ev)=p^p(S∪u,ev)-pp(S,ev)n=1-∏i=1n=1-∏i=1=1-(1-pp(S,ev))×∏=(1-pp(S,ev))×1-∏=(1-pp(S,ev))×pp(u,ev).由此,得出节点u在集合S上的影响增益上界g^ain(u|S)为式(10):对节点集合V中的每个节点u,我们都预先计算它对每个实体的影响概率并缓存在map里,记为EMu,那么在已有种子集合S的基础上,节点u的影响增益上界可归纳为算法2.Page8算法2.Uppergain(u,EMu,EMS).输入:候选种子u,EMu和EMS输出:候选种子u的影响增益上界g^ain(u|S)初始化g^ain(u|S)=0.0;FOR(evINEMu.keyset()){IF(evINEMS.keyset()){ELSE{}RETURNg^ain(u|S);显然,如果一个节点的影响增益均大于其他节点的影响增益上界,那么该节点就是下一个种子节点,而无需重新计算其他节点的影响增益.本文通过借助大顶堆H来维护每个节点的相关信息,同时辅助种子选取.大顶堆中的每个元素包含3个信息:节点信息(称为node)、节点的影响范围(称为spread)和该节点影响范围计算时的状态值(称为status).初始阶段,堆节点中的影响范围spread为每个节点的初始影响范围(使用式(4)计算),状态status初始化为0.算法3(BlendedIMMS)描述了多网络下寻找top-k个影响力范围最大的种子节点的计算过程.算法3.BlendedIMMS.输入:n个社交网络G1(V1,E1),…,Gn(Vn,En);种子输出:大小为k的种子集合S;对集合V中的每个节点u预计算O(u),I(u),σ(u)和EMu;建立并初始化大顶堆H;初始化S=,EMS=,NMS=,UM=;FOR(i=0;i<k;i++){UM=;Nodetnode=H.top();WHILE(tnode.status!=i){gain=0.0;IF(tnode.nodeNOTINUM){gain=Uppergain(tnode.node,EMu,EMS);UM[tnode.node]=gain;SETtnode.spread=gain;}ELSE{gain=gain(tnode.node,S,EMS,NMS);IF(犝犕[狋狀狅犱犲.node]>0牔牔(犵犪犻狀/犝犕[狋狀狅犱犲.node]>狋狀狅犱犲.spread=犵犪犻狀;BREAK;}tnode=H.pop();S=S∪tnode.node;UPDATEEMS和NMS;H.sort();}RETURNS;算法3中初始输入为n个社交网络和k值.期望得到大小为k的种子集合S使得这k个种子节点的影响传播范围最大化.刚开始,算法需要预先计算每个节点u的O(u)、I(u)、EMu和初始影响范围σ(u).并根据σ(u)建立并初始化大顶堆H.之后,初始化种子集合S、mapEMS、mapNMS为空集,同时使用mapUM缓存每轮候选种子节点的影响增益上界值.整个过程总共k轮,使用i记录当前轮次.每轮先初始化UM为空集,之后查看堆顶元素tnode,如果堆顶元素tnode的状态值为i,则弹出堆顶元素并添加种子集合S中.因为i值用来表征当前堆节点中的影响范围增益值是在哪一轮计算的,如果是在当前轮计算,并且经过堆排序之后仍然处于堆顶,则说明该节点为能够产生最大影响范围增益的点.否则,先判断当前节点是否在mapUM里:如果不在,使用算法2计算堆顶节点tnode的影响范围增益上界,分别缓存在UM,同时设置堆顶元素tnode的spread为增益上界值;如果tnode在mapUM里,则使用算法1计算它准确的影响增益值,之后设置堆顶节点的spread值为准确增益值,并设置它的状态status为i值.最后堆排序并获得堆顶元素,重新开始判断.整个过程持续直到选取了k个种子.影响增益上界比准确的影响增益要高出一些,为此可以通过设置阈值,即如果通过算法1获得的准确影响增益与使用算法2计算出的影响增益上界值的比值在一定阈值内,就认定当前候选节点为下一个种子节点,本文使用变量φ表示比值阈值.为了节省空间,具体的代码为算法3中添加下划线和加粗部分的内容.每次计算过当前节点的准确增益值之后,如果它的增益上界值大于0,并且准确增益值同增益上界比值大于阈值φ,就终止WHILE循环,弹出当前节点作为下一个种子节点.由前文推导知,影响增益上界值要比真实的增Page9益值大,通过使用推导出的公式可以比较方便的计算出增益上界值,对精度要求不高时,可以避免大量运算.为此我们考虑直接使用增益上界值作为评估种子节点增益的方法.并通过实验判断与准确计算下的增益值相比相差多少.算法4为完全使用影响增益上界值的计算过程.算法4.BoundBasedIMMS.输入:n个社交网络G1(V1,E1),…,Gn(Vn,En);种子输出:大小为k的种子集合S;对集合V中的每个节点u预计算O(u),I(u),σ(u)和EMu;建立并初始化大顶堆H;初始化S=,EMS=;FOR(i=0;i<k;i++){Nodetnode=H.top();tnode=H.pop();S=S∪tnode.node;UPDATEEMS;H.sort();}RETURNS;算法4为完全使用影响上界的方式选择top-k个种子的过程.每次使用算法2计算候选节点的影响增益上界,并更新堆节点的status为i,spread值为增益上界值,直到堆顶节点的status为i时弹出该节点并添加到种子集合S中,最后经过k轮迭代,返回种子集合S.5实验本文分别实现了使用影响增益上界优化的算法BlendedIMMS以及使用完全影响增益上界的算法BoundBasedIMMS两种方法,并实现了使用准确增益的算法(这里表示为IMMS,即完全使用影响增益来评估候选种子,具体将算法4中的gain=Uppergain(tnode.node,EMu,EMS)替换为gain=gain(tnode.node,S,EMS,NMS),由于篇幅有限不再赘述).最后本文分别在DBLP、Citeseer、Aminer和Linkedin等数据集上进行实验,将所提算法同当前较为先进的两种算法PMIA[6]和IRIE[15]进行比较,分别从运行时间和影响范围两个方面评估算法的性能差异.由于PMIA和IRIE适用于单网络的影响力最大化问题,为此,针对输入的多网络通过预处理将其整合成一个网络,指代相同实体的节点重新编号,节点间的关系同多网络相同.最后根据不同算法所选取的种子集合在原始的多网络上通过蒙特卡洛模拟计算平均的影响范围.5.1数据集多网络上的影响力分析需要考虑不同网络上节点间的实体链接与识别问题,虽然已有研究成果去解决多网络上节点的实体链接,但是考虑到准确度问题,我们使用实体能够一一对应的数据集DBLP①和Citeseer②以及Linkedin③[29]和Aminer④[29].DBLP和Citeseer为科研作者网络,网络上的节点都是实名制,本文将具有相同名字的节点指代同一个实体,不同网络上的节点信息使用节点名称与网络ID进行标识,Linkedin和Aminer为文章[29]所用,我们使用作者提供的真实节点的实体映射作为两个网络上的实体映射集合.对于DBLP和Citeseer数据集,同一个网络内节点间的影响概率使用两个作者之间的合作关系计算得到,使用式(11)计算:式(12)中p(a→b)表示节点a对节点b的影响概率,其中N(a,b)表示作者a和b的合作次数,N(a)表示作者a总共的著作次数.显然,如果两个作者之间的合作次数越多,那么他们之间相互的影响概率就越强.对于Aminer和Linkedin,我们使用常用的1/d(v)作为节点同其他关联节点之间的影响强度,其中d(v)为节点v的入度.多个网络上实体间的自传播概率可以根据每个实体在多个网络上的行为计算得到,例如用户A在新浪微博上发布了100条微博,其中有10条都转发到了人人网上,则δA(Weibo,Renren)=0.1.由于DBLP和Citeseer、Aminer和Linkedin捕捉同一实体的自传播概率比较困难,这里使用随机生成数作为实体上的自传播概率.首先,需要找到两个网络上的共同节点作为能够产生自传播概率的实体,然后针对每个①②③④Page10实体生成[0-1]的实数作为自传播概率,由于所有的数据均提前生成并固定,每个算法使用相同的数据信息,对实验结果不会造成影响.DBLP和Citeseer、Aminer和Linkedin均为有向网络,具体的数据集统计信息如表1所示.数据集DBLP1436596123117068.57Citeseer1383687543165.45Aminer105694178597527.44Linkedin6726290387213805.765.2实验效果本文分别在DBLP和Citeseer、Aminer和Linkedin这4个数据集所构成的两组网络上分别比较了IMMS、BlendedIMMS、BoundBasedIMMS和PMIA、IRIE、SPM(由CELF算法改进)和SP1M(由CELF算法改进)这5种算法的实验效果,其中PMIA、IRIE、SPM和SP1M由Chen等人[6,15]在文章中所用源代码,由于SPM、SP1M这两种贪心算法所耗时间过长,在DBLP、Citeseer两个网络上寻找20个节点耗时约53h,而在影响范围上同IRIE、PMIA和本文所提算法相差无几,由于传统贪心算法耗时过长,实验部分只对IRIE和PMIA进行对比.对比实验从运行时间和影响范围(InfluenceSpread)两个方面衡量方法的性能.对于已选取的种子集合,在独立级联模型基础上使用的蒙特卡洛模拟来评估节点集合的影响范围,多网络下指代同一个实体的节点的激活只能算作一次,但可以多次被激活,每个种子集合使用20000次蒙特卡洛模拟传播过程,最后使用均值作为每个种子集合的影响范围.下面分别从影响范围和运行时间对比不同算法在多网络下的影响力最大化的性能表现.5.2.1影响范围(InfluenceSpread)实验分别比较了在固定种子数量的情况下,最大传播路径的阈值θ分别为0.01、0.02、0.03、0.04和0.05时IMMS、BlendedIMMS、BoundBasedIMMS和PMIA这4种方法的影响范围.图3和图4为在DBLP和Citeseer数据集上分别固定种子数目为50和100的情况下,4种方法在不同阈值下的影响传播范围,图5为在Aminer和Linkedin数据集上种子个数为100时不同阈值范围下4种算法的结果.从图3、图4和图5看出,随着阈值θ增大,上述几种方法的影响范围均呈现下降趋势,这是因为θ为最大传播路径的阈值,用来控制每个节点的局部传播范围.最大传播路径上的概率值小于θ,该路图3DBLP&Citeseer数据集上的影响范围结果图4DBLP&Citeseer数据集上的影响范围结果图5Aminer&Linkedin数据集上的影响范围结果径就会被过滤掉,使得计算结果近似于真实结果,但也小于真实的影响范围.同时也总结出,在相同阈值下,随着种子数量的增加,影响范围也会增加.并且4种方法都能够达到一定的传播范围,从整体来看本文所提算法IMMS、BlendedIMMS和Bound-BasedIMMS大体相当,并都要略优于PMIA.这是Page11因为IMMS、BlendedIMMS和BoundBasedIMMS在计算影响范围增益的时候按照实体的增益计算,这也是多网络同单一网络的不同之处,一个实体可能存在于多个网络,增益的计算需要按照实体而非节点进行计算.由于IRIE同θ不相关,图6和图7比较了在最大传播路径阈值θ为0.01(对PMIA、IMMS、BlendedIMMS和BoundBasedIMMS这4种方法而言)时,种子数目k分别为20、40、60、80和100时5种算法的影响范围.其中图6为DBLP和Citeseer两个网络上的结果,图7为Aminer和Linkedin两个网络上的比较结果.可以看出,随着种子数目k的增加,5种方法的影响范围都会增长,并且差异不大,由此得知,本文所提方法在结果上能够同PMIA、IRIE等方法取得一致性.图6DBLP&Citeseer数据集上的影响范围结果(固定θ=0.01,种子数目k同影响范围的关系)图7Aminer&Linkedin数据集上的影响范围结果(固定θ=0.01,种子数目k同影响范围的关系)5.2.2运行时间(RunningTime)此外,实验分别比较了在固定种子数目k时,不同阈值θ对时间的影响(针对PMIA、IMMS、BlendedIMMS和BoundBasedIMMS这4种方法).图8和图9为在数据集DBLP和Citeseer上,在固定种子数目k为50和100时,不同阈值θ下4种方法的运行时间;图10为在数据集Aminer和Linkedin数据集上,种子数目k为100时,阈值范围在0.01~0.05上4种不同算法的影响范围结果.由图8、图9和图10看出,随着阈值θ的增加,图8DBLP&Citeseer数据集上运行时间结果图9DBLP&Citeseer数据集上运行时间结果图10Aminer&Linkedin数据集上运行时间结果Page12运行时间呈下降趋势,这是因为随着阈值θ的增大过滤了一些不重要的节点,减少了候选种子的规模;此外,运行时间最长的为使用准确影响增益计算的IMMS,其次为使用BlendedIMMS的方法,之后为PMIA,运行时间最短的为完全基于影响上界的BoundBasedIMMS,运行时间很稳定并且一直维持在1秒左右,比PMIA高出70倍的数量级,比IMMS和BlendedIMMS快2个数量级.图11和图12显示了在固定阈值θ为0.01时,不同种子数目k下,5种算法的运行时间结果比较.其中图11为在数据集DBLP和Citeseer两个网络上的结果,图12为数据集Aminer和Linkedin两个网络上的对比结果.从图11、图12中可以看出,随着种子数量的增加,运行时间也会增长,出乎意料的是运行时间最长的反而是IRIE算法,PMIA表现一直很稳定,这其中性能表现最优的为Bound-BasedIMMS,运行时间一直维持在秒级,表现了极强的性能.这是因为BoundBasedIMMS算法使用节点间完全独立的假设进行近似计算,免去了诸多中图11DBLP&Citeseer数据集上运行时间结果(θ=0.01时,运行时间与种子数目k的关系)图12Aminer&Linkedin数据集上运行时间结果(θ=0.01时,运行时间与种子数目k的关系)间计算过程.从运行时间和影响范围的实验结果来看,无论是运行时间还是影响范围,完全基于影响增益上界的方法BoundBasedIMMS均有着较高的性能,虽然使用影响独立假设会损失部分计算精度,但是相比之下运行效率提高了近2个数量级.基于准确计算的IMMS和使用Bound作为过滤的BlendedIMMS运行时间上比较高,但却有着最好的影响范围.图3至图12中的BlendedIMMS我们设置的阈值φ为60%.为了验证阈值φ对BlendedIMMS方法的影响,实验还比较了不同阈值φ下,5种方法在运行时间和影响范围的对照结果.图13为固定种子数目k为50,阈值θ为0.01时,阈值φ分别为20%、40%、60%和100%时分别对影响范围的影响.图14为在上述配置下对运行时间的影响.从图13和图14看出,阈值φ对影响范围和运行时间的影响不大,这其中主要因为网络是稀疏的.但总体来看完全基于影响上界的方法BoundBasedIMMS表现出了较高的性能,从运行时间和影响范围来看图13DBLP&Citeseer数据集上影响范围结果(k=50,θ=0.01时,影响范围与阈值φ的关系)图14DBLP&Citeseer数据集上运行时间结果(k=50,θ=0.01时,运行时间与阈值φ的关系)Page13都优于其他方法.而当前最为先进的方法PMIA从影响范围上来看比不过IMMS和BlendedIMMS,而从运行时间上又高出BoundBasedIMMS方法.6结束语本文研究了多社交网络上的影响力最大化问题.首先与单一网络相比,多社交网络具有自传播性,通过该特性可以将多个网络建立联系;其次提出了针对多社交网络上节点对实体的影响计算模型来评估多网络下节点间的影响计算问题;并在独立级联影响模型下提出多种解决方案来解决多网络下的影响力最大化问题;最后通过真实数据集上进行实验,对比了本文所提方法与当前最先进的方法在影响范围和运行时间上的实验效果.最后的实验表明所提算法在影响范围和运行时间都能够达到满意的效果,并明显优于现有方法.传统的贪心算法通过多次蒙特卡洛模拟来计算给定节点集合在给定网络上的影响范围,计算量比较大,本文通过扩展基于树的算法模型,并在此基础上通过进一步挖掘影响函数的子模性(submodular)(如算法3所示)来避免冗余计算,最后通过假设节点间的影响相互独立,使用节点的影响增益上界近似节点的增益值来提升计算性能,而最后的实验结果表明这种近似的方法并未明显减少所选种子节点的影响范围.传统贪心算法在大型网络上伸缩性较差,而实验所选数据集的节点多为百万规模的大型网络,根据实验效果来看,所提算法的伸缩性较好,运行时间并未随网络规模有明显异动.
