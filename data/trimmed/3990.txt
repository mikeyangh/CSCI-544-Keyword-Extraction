Page1基于组织的分布式开放系统自适应机制孙跃坤毛新军尹俊文(国防科学技术大学计算机学院长沙410073)摘要随着分布式开放系统的涌现,其呈现出系统环境的动态性和开放性、系统成员的自主性和异构性、系统自身的分布性和层次性以及明显的社会组织特征,给自适应技术带来了新的挑战,需要跨跃成员层面(单个系统)在组织层面(系统之间)进行发散式自适应调整以及与之对应的软件抽象.然而,现阶段大多自适应技术针对单个系统采用对象范型和集中控制的方式.因此文中借鉴社会学、组织学思想,采用组织范型对系统组织层面进行抽象,提出了系统的组织元模型,使得基于组织的抽象范型与系统的组织层面相对应,缩减了问题空间与解空间的鸿沟,提出了支持组织自适应的动态重组机制,使得组织成为具有自适应能力的一阶实体,从而实现系统组织层面发散式的自适应.分别利用上下文(Context)和策略(Strategy)对组织的监控逻辑和自适应逻辑规约,通过把上下文、策略同组织显式地分离,提高了系统的模块性和可维护性.最后通过案例分析验证了文中提出的组织元模型和动态重组机制的有效性.关键词自适应;分布式开放系统;组织1引言软件自适应是指软件在运行过程中能够根据环境和自身的变化进行动态调整[1].目前对自适应软件的研究已成为软件工程领域的一个热点,引起工业界和学术界的广泛兴趣.随着近年来计算机网络尤其是互联网的日益普及和广泛应用,越来越多的软件系统运行和部署在互联网之上,出现了一大批新的软件形态,比如超大规模软件系统(Ultra-Large-Scalesystems,ULS)、数字物理系统(Cyber-PhysicalSystems,CPS)和网构软件(Internetware)等.目前这类系统已经在日常生活中普遍存在,比如电子商务系统、旅游管理系统、智能交通系统等.它们表现出以下特点:系统运行环境的动态性和开放性、系统组成单元的自主性和异构性、系统自身的分布性和层次性.我们把具有上述特征的这类系统称为分布式开放系统,它一般具有明显的社会组织特征,给自适应带来了以下新的挑战:(1)由于系统的层次性,系统成员本身也可以是一个独立的系统,而且系统也可以作为其它系统的成员.因此我们把系统成员理解为单一系统,把由大量独立的系统成员组成的系统理解为组织.由于系统环境的动态性、开放性,设计态参与系统的成员具有不确定性.运行态,系统成员和环境的动态变化将引起系统自适应.由于系统成员的自主性和异构性,系统并不能对其成员进行完全控制,因此需要跨跃系统成员层面在更高的抽象层次(组织层面)进行自适应调整.(2)由于系统的分布性,不可能建立系统的全局模型,实现集中控制,而且在动态开放环境下,集中控制容易出现单点失效,因此需要发散式的自适应调整.(3)由于系统表现出明显的社会组织特征,而且需要在组织层面进行自适应调整,为了有效地对系统进行分析、建模,需要减小问题空间与解空间的鸿沟,提出与之对应的软件抽象范型.目前人们已经从不同的视点对自适应软件进行研究,取得了一系列成果[1].但主要是针对单个系统采用对象范型和集中控制的方式.比如目前研究比较多的基于体系结构的自适应[2],通过控制中心对运行态软件体系结构的构件、连接子的调整实现系统的自适应.虽然基于体系结构的自适应构造技术可以实现软件的自适应,但一般基于集中的控制中心[3-5],因此不能满足分布式开放系统的发散式自适应需求.而且体系结构是基于构件和连接子的抽象,在软件设计阶段构件、连接子已经确定,运行阶段通过对构件和连接子进行完全控制实现自适应调整,这不符合分布式开放系统个体自主性、异构性以及在软件设计阶段个体的不确定性.此外目前基于体系结构的自适应研究主要是针对单个软件系统[6],而由于分布式开放系统的特点,需要在抽象层次更高的组织层面进行自适应调整.Agent具有自主性、反应性、社会性等特点,被认为是开发自适应软件的有效范型[7].由于Agent粒度太小,为了满足大规模复杂系统的需求,学术界提出了基于组织的Multi-AgentSystems(MAS)[8].目前基于组织的MAS主要关注MAS需要从以Agent为中心转移到以组织为中心[9],但是如何支持在运行过程中对组织进行动态调整,比如调整什么(What)、什么时间调整(When)、如何调整(How)并没有进行深入的研究.因此本文针对分布式开放系统对自适应提出的新挑战,需要跨跃单个系统在组织层面进行发散式自适应调整以及与之对应的软件抽象范型.通过借鉴新颖的社会学、组织学思想,利用组织范型对系统进行抽象,提出系统的组织元模型.由于采用了组织范型,提高了抽象层次,缩小了问题空间与解空间的鸿沟,可以实现对系统的有效自然建模,提出了支撑组织自适应的动态重组机制,使组织成为具有自适应能力的一阶实体,实现系统在组织层面发散式自适应.通过把组织、上下文和策略显式地分离,提高了系统的模块化程度,简化了系统的开发维护.本文第2节介绍自适应系统的组织元模型;在此基础上,第3节描述组织的动态重组机制;第4节介绍基于策略的自适应系统;第5节通过案例分析验证本文提出的元模型和自适应机制的有效性;第6节对相关工作进行了介绍和比较,最后第7节对全文进行总结,讨论下一步的研究方向.2自适应系统的组织元模型由于分布式开放系统给自适应带来新的需求,需要在组织层面进行自适应调整,本节通过借鉴社会学、组织学思想,采用组织范型对系统进行抽象,提出了系统的组织元模型.首先,介绍一个分布式开放系统案例———自适应电子商务系统,这个案例将贯穿全文;其次,对社会组织抽象和思想进行简要介绍;最后,借鉴社会学、组织学思想,提出自适应系统Page3的组织元模型.2.1自适应电子商务系统随着互联网的快速发展,电子商务系统日益普及,如图1所示,它由分布在整个网络环境上的大量成员组成,比如:顾客、商家、银行和物流公司等,可以实现大范围内的网上交易,显然整个系统具有明显的社会组织特征.电子商务系统分布在整个网络环境下,其环境是动态变化的,比如带宽降低、节点故障等,因此系统环境具有动态性.而且系统环境具有开放性,比如顾客、商家可以动态加入、退出系统.图1电子商务系统示意图由于电子商务系统环境的动态性和开放性,系统在运行过程中需要根据环境和成员的动态变化进行自适应调整.由于系统成员具有自主性、异构性,系统并不能对其进行完全控制,因此需要跨跃个体层面在组织层面进行自适应调整.在分布环境下,不可能有集中的控制中心,需要发散式的自适应,每个组织都可以根据环境和成员的变化进行自适应调整.组织的自适应调整具体表现为以下3种类型:(1)组织成员调整.比如,某个银行成员动态退出系统,则需要寻找新的银行成员动态加入提供支付服务.(2)组织结构调整.比如,随着越来越多的顾客、商家加入系统,系统的交易量逐渐增大,银行支付已经成为瓶颈,则需要动态增加银行职位并吸收新的银行成员.(3)组织间关系调整.比如,在系统运行过程中,随着组织内成员不断减少,当减少到一定数量后,将不能发挥系统资源的最大效益,因此需要和相邻的组织进行合并.反之,随着组织内成员逐渐增多,当达到一定数量后,将影响系统的效率,因此需要对组织进行拆分.2.2社会组织抽象和思想人类社会组织是一个复杂系统,具有动态性、分系统成员具有自主性和异构性.比如系统中有很多商家,他们之间相互独立,销售的商品、价格、促销信息等各不相同,可以自主决定加入系统和退出系统.系统具有分布性和层次性.电子商务系统部署在整个网络环境下,呈现出分布性特点.其系统成员本身也可以是一个独立的系统由其他成员组成,呈现出层次性特点.比如,电子商务系统的物流公司本身也是由很多成员组成,电子商务系统本身也可以作为其它系统的一个成员.我们把这种由大量独立自主异构成员构成的系统理解为组织.布性、开放性和适应性等特征,呈现出与分布式开放系统相似的特点.此外,目前很多软件系统为一个组织开发,系统自身表现出很强的社会组织特征,因此软件系统会遇到在人类社会组织中曾经遇到的问题.由于人类社会本身就具有自适应能力,目前人们已经从不同的视角进行了研究,获得了大量的研究成果,比如组织理论(OrganizationTheory)、计算组织理论(ComputationalOrganizationTheory)和权变理论(ContingencyTheory).这些已有的成果将为自适应系统的研究提供重要参考.因此采用社会组织思想对分布式开放系统抽象,可以独立于具体技术和平台,充分借鉴人类社会学的各种自适应机制,有助于从新的视点来研究和分析自适应,更加适合于本文所研究的问题.目前社会学、组织学思想已经在特定领域的自适应系统中得到应用,比如仓库系统[10].但这些大都是与领域相关的,本文从软件工程视点,提出领域无关的自适应系统组织元模型.2.3自适应系统组织元模型针对分布式开放系统的自适应需求,借鉴社会组织学思想,采用组织范型对自适应系统进行抽象,提出了系统的组织元模型如图2所示.组织(Organ-ization)作为设计态一阶实体,运行态实例化为Page4Group.组织有一系列角色(Role)组成,运行态实例化为职位(Position),Agent通过动态绑定职位加入Group.由于组织需要根据所处的环境以及内部Agent的动态变化进行自适应调整,通过上下文(Context)显式地对组织的环境以及内部Agent状态进行描述.组织根据上下文的变化通过动态重组机制进行自适应调整.下面对组织元模型的各组成元素以及它们之间的关系进行详细描述.(1)组织(Organization).处在特定环境中由一系列相互交互角色(Role)完成其目标的抽象行为实体.组织包含一系列角色,并对其进行约束.比如案例中,可以把电子商务系统抽象为一个组织,它由顾客、商家、银行和物流4个角色组成,通过他们之间的相互交互实现网上交易,同时还可以定义一些约束,比如组织中必须有商家存在,顾客购物请求响应时间必须小于3s等.(2)Group.组织在运行态实例化.同一组织可以实例化为多个独立的Group,形成Group间的对等结构.Group可以和Agent一样动态绑定职位加入其它Group,形成Group间的层次结构.比如案例中,商家可以作为一个Agent动态加入电子商务Group,电子商务Group本身又可作为一个独立成员加入其它Group.(3)角色(Role).指组织为完成其目标而对Agent职责抽象表示,包括Agent在组织中拥有的行为和需要感知的上下文,反映了Agent在组织中的地位.比如以顾客角色为例,它描述了Agent在组织中拥有购买商品行为,需要感知的上下文有商品销售信息、购买商品的响应时间等.(4)职位(Position).角色(Role)在特定Group实例化,一个角色可以实例化成多个职位,Group可以根据环境的变化对职位进行动态调整.比如在案例中包含很多商家,Group为每个商家实例化一个职位,如果某个商家拒绝提供商品销售服务,则Group可以把该职位删除,从而使商家离开Group.(5)Agent.开放系统中自主行为实体,可以自主决定需要加入的Group以及绑定的职位.比如,案例中存在的大量商家Agent,可以动态加入Group绑定商家职位.(6)动态绑定(DynamicBind).Agent通过动态绑定Group的职位加入到Group中,履行角色规定的职责.Agent可以同时绑定多个职位,但是每个职位只允许一个Agent绑定.对于同一Group内同一个角色实例化的多个职位,Agent只能绑定一个.比如系统中有AgentTom,他既可以绑定顾客职位又可以绑定商家职位,但是对于同一个Group内商家角色的多个实例化职位,Tom只能绑定一个.(7)上下文(Context).分为物理上下文(PhysicalContext)和社会上下文(SocialContext).物理上下文指组织所处的物理环境信息,比如网络带宽,系统响应时间等.社会上下文指组织的内部状态信息,比如当前角色实例化职位个数,职位是否有Agent绑定等.(8)动态重组(DynamicReorganization).组织根据上下文的变化通过动态重组机制进行自适应调整.动态重组机制将在第3节进行详细描述.3动态重组机制根据自适应系统的组织元模型,组织作为一阶实体,运行态在上下文驱动下基于动态重组机制进行自适应调整.本节从为什么自适应调整(Why)、由谁来进行自适应调整(Who)、调整时机(When)、调整元素(What)和如何调整(How)对动态重组机制进行详细介绍.3.1自适应调整的原因在分布式开放系统中,组织的环境是动态变化的,构成组织的Agent具有自主性和异构性,运行态可以自主动态加入和退出组织.因此要求组织能够根据外部环境和内部Agent的动态变化进行自适应调整.基于本文提出的自适应系统组织元模型,利用物理上下文(PhysicalContext)对组织所处环境和社会上下文(SocialContext)内部Agent状态进行显式建模.3.2自适应调整的执行者自适应系统一般指由系统自身根据环境的变化Page5进行动态调整.基于本文提出的自适应系统组织元模型,运行态系统由Agent、Group和上下文组成.Agent作为自主实体,可以动态绑定职位加入Group以及撤销绑定职位离开Group.Group作为运行态一阶实体需要根据环境以及内部Agent状态进行自适应调整.根据分布式开放系统特点,系统不可能存在集中的控制中心,因此要求每个Group都是具有自适应能力的一阶实体.而由于Agent和Group相互独立并且Agent来自开放环境,为了减少Group对Agent的依赖,应该由Group自身来实现自适应调整.3.3自适应调整的时机自适应调整的时机指Group什么时间需要进行自适应调整.上下文变化将引起Group自适应调整,因此对上下文的显式化建模和分析是一项重要工作.Group上下文分为社会上下文和物理上下文.社会上下文指组织内部的状态信息,比如当前Group中有多少Agent,有多少职位、职位状态,哪些职位是闭合的,哪些是开放的等.物理上下文指Group关注的物理环境信息.对物理上下文的感知需要特定的行为实体,比如各种传感器.为了提供统一视点来描述和分析上下文,简化系统的开发,把感知物理上下文的行为实体封装为Agent.和其它Agent一样,可以通过动态绑定职位加入Group,根据角色规约对物理上下文进行感知.这样不仅为Group提供了统一的视点对上下文感知,而且把Group对上下文的感知需求与具体的感知Agent相分离,可以在运行过程中动态选择感知Agent对上下文感知.图3展示了Group的上下文模型,Group把上下文需求拆解后分配给各个职位,然后利用职位规约Agent的上下文感知需求.因此Group上下文是指参与Group的Agent,Agent运行过程中主要包含以下3类变化:(1)Agent在Group内生命周期的变化.Group提供4种操作(Join,Quit,Suspend,Resume)供Agent加入Group,Agent通过这4种操作使其在Group内的生命周期发生变化.由于这4种操作由Group提供,因此Group自身就可以感知到Agent生命周期的变化.(2)Agent感知物理上下文的变化.在动态环境中,物理上下文是不断变化的,Agent依据绑定职位规约对物理上下文进行感知.如果物理上下文有变化,Agent根据感知的变化对职位进行更新,最终导致Group上下文不断更新.(3)Agent自身能力的变化.Agent通过动态绑定职位加入Group,根据职位规约履行职责.由于Agent处在动态环境中,其自身能力也在不断变化,可能会出现不满足规约情况.因此Group利用职位动态监测Agent能力的变化.Group上下文由Agent构成,Agent主要包含以上3种变化,从而导致Group上下文动态变化.由于Group对物理上下文的感知依赖内部的感知Agent,通过Group的自适应调整会带来内部感知Agent变化,从而导致Group上下文的自适应变化.因此本文提出的自适应机制不仅能实现Group的自适应,也使Group上下文进行相应的自适应调整.3.4自适应调整元素自适应调整元素主要关注哪些元素可以进行调整.根据组织元模型,组织作为设计态一阶实体,运行态实例化为Group,因此可分为对设计态组织的调整和对运行态Group的调整.由于Group是组织的实例化,对设计态组织的调整最终要映射到对Group的调整,因此本文只关注对Group的调整.组织在运行态可以实例化为多个相互独立的Group,Group包含一系列职位,在开放环境中,Agent通过动态绑定职位加入Group.因此Group的自适应调整元素分为3种类型:Group内职位与Agent关系动态调整,Group内职位动态调整,Group之间关系动态调整.3.5如何自适应调整如何自适应调整是指自适应调整元素如何进行动态调整.根据自适应调整元素的类型,下面分别进行详细描述.(1)职位与Agent关系的动态调整由于Agent需要动态绑定职位加入Group,因此Group为Agent提供以下4种动态绑定操作,如图4所示.Page6图4Agent动态绑定职位与Group动态调整职位示意图①Join.Agent通过Join操作绑定职位,成为Group成员.默认情况下,职位处于开放状态(Open),当Agent成功绑定职位后,职位将变为闭合状态(Closed).每个职位只允许一个Agent绑定,因此Agent只能绑定处于开放状态的职位.当Agent成功绑定职位后,将根据角色规约,履行Agent在Group内职责.比如电子商务系统中,如果AgentAlex需要出售商品,可以通过Join操作动态绑定商家职位加入Group,Group将根据角色规约把购买商品的信息发给Alex,同时Alex也必须根据角色规约提供出售商品服务.②Quit.Agent通过Quit操作解除绑定职位,离开Group,不再受角色规约的影响.职位状态将由闭合变为开放,可以重新接受其余Agent绑定.比如Alex的商品已经出售完毕,可以通过Quit操作解除与商家职位绑定,离开Group.Group将不会把购买商品的信息发给Alex,而是发给当前绑定商家职位的Agent.③Deactivate.Agent通过Deactivate操作钝化职位,使职位变为钝化状态(Inactive).虽然Agent仍是Group的成员,但是其暂停履行角色规约的职责.比如Alex下班后,可以通过Deactivate操作钝化其商家职位,虽然Alex还是Group内成员,但是暂停履行角色职责,暂停提供商品销售服务.Group把需要转发给Alex的购买请求暂时缓存在职位,等待Alex重新激活职位时对这些购买请求处理.④Activate.Agent通过Activate操作激活职位,使职位变为激活状态(Active),重新受角色规约的影响.比如Alex上班后,通过Activate操作激活职位,继续履行角色规约的职责,同时对职位缓存的信息进行处理.由于Agent绑定职位加入Group将受到角色规约的影响,如果Agent不能满足角色规约,Group强制解除Agent与职位的绑定关系,把Agent从Group中开除.因此Group还包含一个开除操作如下:⑤Expel.该操作Agent不能调用,只供Group使用.Group通过该操作可以把内部Agent开除,强制解除Agent与职位的绑定关系.比如Alex通过Join操作绑定商家职位后,并且职位处于Active状态,如果其处理购买请求的响应时间超过角色规约的要求,则Group通过Expel操作将Alex开除.(2)Group内部职位动态调整Group包含一系列职位,在运行态根据上下文变化对职位进行动态调整,如图4所示,主要包括以下自适应动作:①Add.通过Add操作,可以在Group内新增职位.新增职位默认处于开放状态,Agent可以通过动态绑定该职位加入Group,从而可以在Group内新增一个成员Agent.比如随着Group内的顾客和商家逐渐增多,交易量不断增加,银行支付已经成为瓶颈,需要通过Add操作增加银行职位,从而可以在Group内新增一个银行成员.②Remove.通过Remove操作,可以对Group内职位进行删除.如果该职位没有Agent绑定,可以直接删除,如果该职位已经有Agent绑定,需要首先执行Expel把Agent从Group中开除,然后删除该职位.比如随着Group内顾客和商家逐渐减少,交易量不断减小,已经有多个银行支付服务处于空闲状态,需要通过Remove操作删除银行职位,从而减少Group内的银行成员.③Lock.通过Lock操作,可以对Group内的某个职位进行锁定,使职位变为锁定状态(Locked).如果该职位没有被Agent绑定,则通过Lock操作后,该职位不能再被Agent绑定.如果该职位已经被Agent绑定,则通过Lock操作后,绑定该职位的Agent暂时不再受Role规约的影响,同时Group暂停其它职位与该职位交互,即该职位将接Page7收不到来自Group的消息.Lock操作与Delete操作的最大区别是:Lock将继续保持Agent与职位动态绑定关系,而Delete将完全解除Agent与职位关系,把Agent从Group中开除.因此Lock操作能够对Group状态更快恢复,可以在某些短暂突发情况下使用.比如Group内交易量突然减小,有多个银行支付服务处于空闲状态,由于交易量可能很快就会恢复到正常状态,所以通过Lock操作暂时对某个银行职位锁定.如果Group内交易量持续减小,有多个银行服务长时间处于空闲状态,则需要通过Remove操作删除银行职位.④Unlock.通过Unlock操作,可以对Group内已经锁定的职位进行解锁,使职位变为解锁状态(Unlocked).如果该职位没有被Agent绑定,则通过Unlock操作后,该职位可以继续被Agent绑定.如果该职位已经被Agent绑定,则通过Unlock操作后,绑定该职位的Agent将重新受Role规约的影响,同时恢复其它职位与该职位交互.比如由于Group内交易量恢复正常,通过Unlock操作对锁定的银行职位进行解锁,使其继续提供银行服务.(3)Group之间关系的动态调整由于同一组织可以实例化为多个相互独立的Group,Group不仅需要对内部元素进行自适应调整,还需要对Group之间的关系进行调整.Group之间的关系动态调整如图5所示,主要包含以下自适应动作:图6职位状态图①Merge.通过Merge操作,可以把两个独立的Group合并成一个Group.比如在电子商务系统中,由于交易量持续减少,但Group中必须存在一个银行成员提供支付服务,这种情况下将不能充分发挥银行的支付能力,因此需要通过Merge操作对Group进行合并.②Split.通过Split操作,可以把一个Group拆分为两个独立的Group.比如在电子商务系统中,由于顾客、商家的持续增加,Group的成员越来越多,当达到一定数量后会对系统的效率带来影响,因此需要通过Split操作对Group进行拆分.Group通过以上自适应动作可以实现职位与Agent关系、内部职位以及Group之间的关系动态调整,这些动作执行都将导致Group状态的改变,因此Group自适应动作之间存在一定关系.运行态实例化的Group包含一系列职位,Group通过Add、Delete、Lock、Unlock、Expel对职位进行动态调整,而Group间的自适应动作Merge、Split本质上也是对职位的调整,因此Group间的自适应动作可以等价为Group内部职位动态调整自适应动作.职位作为Group与Agent之间交互的接口,其状态机如图6所示.Group和Agent都可以通过自适应动作对职位状态进行调整.比如Group通过Lock操作使职位变为锁定状态(Locked),通过Unlock操作使职位变为解锁状态(Unlocked).Agent通过Join操作使职位变为闭合状态(Closed),通过Quit操作使职位变为开放状态(Open).通过Deac-tivate操作使职位变为钝化状态(Inactive),通过Activate操作使职位变为活跃状态(Active).虽然Agent具有自主性,可以自主决定执行自适应动作,但是在不同的状态下允许执行的自适应动作是不同的.比如当职位处于锁定状态,即使当前职位是开放的,Agent也不能通过Join操作绑定该职位.因此Page8Group根据职位状态对允许Agent执行的自适应动作进行约束,从而防止对Group一致性的破坏.Agent具有自主性,虽然Group不能强制Agent执行某动作,但是Group确保只有合法的Agent动作才能执行,而且可以把不符合组织规约的Agent开除.因此,这样既体现了Agent的自主性,又维护了Group状态的一致性.4基于策略的自适应系统根据前文提出的动态重组机制,Group在运行过程中根据上下文变化进行自适应调整.由于自适应需求一般是多变的,为了增强系统的模块化程度,简化系统的开发和维护,根据关注点分离原则,需要把Group的业务逻辑和自适应逻辑相分离.自适应逻辑一般从软件日常使用过程中总结出来,与最终用户密切相关,因此需要提供简单易用的方式对自适应逻辑描述[11].基于该需求,本文提出利用策略显式地对Group的自适应逻辑进行描述,以清晰地描述和定义Group如何根据上下文的变化进行动态调整.策略模型如图7所示,策略由一系列规则组成,每个规则包含状态以及在该状态下需要执行的自适应动作.状态由上下文、关系运算符、值以及逻辑运算符组成.通过关系运算符把上下文和值连接形成原子状态,通过逻辑运算符可以对这些状态进行组合.自图8基于组织抽象的电子商务系统结构适应动作在前文已经分析过,包括Group内的Add、Delete、Lock、Unlock、Expel以及Group间的Merge和Split.基于动态重组机制,通过策略显式地对组织自适应逻辑描述,并与组织的业务逻辑相分离,使得逻辑更加清晰,策略的维护成本也大大降低.5案例分析根据本文提出的组织元模型和基于策略的动态重组机制,对前面介绍的自适应电子商务系统进行分析.系统整体结构如图8所示,设计态电子商务组Page9织(ElectricalCommerceOrganizationOrg_EC)运行态实例化为Group(Grp_EC1,Grp_EC2),Agent通过动态绑定职位加入Group实现系统功能.因为系统环境以及组成Agent动态性,Group在运行过程中需要自适应调整.由于受文章篇幅所限,本文主要分析以下几个典型的自适应场景:(1)职位与Agent关系动态调整:银行Bank1动态绑定职位BankPos1加入GroupGrp_EC1,如果银行Bank1不能提供支付服务,则职位BankPos1把银行Bank1开除,动态绑定别的银行继续提供服务,比如Bank2.(2)Group内职位动态调整:如果GroupGrp_EC1内部的银行平均支付响应时间大于3s,则动态添加银行职位,比如BankPos2;如果银行平均空闲时间大于60s,则动态删除空闲时间最长的银行职位,比如BankPos2.(3)Group之间关系的动态调整:如果GroupGrp_EC1内的顾客、商家数量大于1000,则对Grp_EC1进行拆分,如果Grp_EC1内的顾客、商家数量小于100,则Grp_EC1与相邻的Grp_EC2进行合并.5.1系统设计基于本文提出的组织元模型,电子商务系统设计包含以下内容:组织(Organization)、上下文(Context)和策略(Strategy),下面对各部分的设计进行详细描述.(1)组织(Organization)电子商务组织(Org_EC)包含以下角色:顾客(Customer)、商家(Seller)、银行(Bank)和物流(Transporter).其中每个角色的详细情况如表1所示,包含角色的行为以及所关注的上下文,比如银行角色包含行为有支付,关注的上下文有支付时间和空闲时间.角色CustomerBuyGoodsSellerSellGoodsBankTransporterTransport(2)上下文(Context)根据案例的自适应场景描述,组织关注的上下文信息如表2所示.组织的物理上下文信息通过对角色上下文计算得到,因此包含上下文名称、计算公式.比如组织内银行的平均支付时间,需要通过对各个银行角色支付时间计算得到.组织的社会上下文信息可以通过组织直接获取,比如组织内顾客、商家的数量.别如下:响应,则把该银行开除.加银行Position.AVG_PayTimeAVG(Bank.PayTime)AVG_IdleTimeAVG(Bank.IdleTime)CustomerCountGetPositionCount(Customer)SellerCount(3)策略(Strategy)根据案例的3个场景,其对应的自适应策略分①职位与Agent关系动态调整如果银行不能提供支付服务,比如超过60s没策略1.If(Bank@PayTime>60)thenBank.Expel()②Group内职位动态调整如果Group内部银行平均支付时间大于3s,增策略2.If(AVG_PayTime>3)thenAdd(Bank@Position)如果银行平均空闲时间大于60s,则动态删除策略3.If(AVG_IdleTime>60)then③Group之间关系动态调整如果Group内顾客、商家增加到1000,则对策略4.If(Org_EC@CustomerCount+如果Group内顾客、商家减少到100,则把策略5.Group与其相邻Group进行合并.空闲时间最长的银行职位.Group进行拆分.5.2自适应场景分析基于上文的分析和设计,Grp_EC1的自适应场景如图9所示,系统运行过程如下:假定Grp_EC1初始场景如图(a),在T1时刻,由于Bank1的支付时间为70s,则触发策略1,银行职位执行自适应动作开除Bank1,则会有新的银行Page10AgentBank2动态绑定该职位加入Grp_EC1,场景变为(b).图(b)场景,在T2时刻,由于Grp_EC1内银行的平均支付时间为5s,则触发策略2,Grp_EC1执行自适应动作增加银行职位BankPos2,则会有新的银行Agent动态绑定该职位加入Group,场景变为(c).图(c)场景,在T3时刻,由于Grp_EC1内银行的平均空闲时间为70s,则触发策略3,Grp_EC1执图9电子商务Group的自适应场景6相关工作近年来自适应软件已经成为软件工程领域的研究热点,主要是基于控制环路实现自适应.根据IBM的参考架构,自适应软件的研究可分为两部分AutonomicManager和ManagedElement.AutonomicManager内部包含一个控制环路,目前主要关注控行自适应动作删除银行职位BankPos2,绑定该Position的Agent也被开除,场景变为(a).图(a)场景,在T4时刻,Grp_EC1内顾客和商家的总数为1010,则触发策略4,Grp_EC1执行自适应动作拆分为Grp_EC1和Grp_EC2,场景变为(d).图(d)场景,在T5时刻,Grp_EC1内顾客和商家的总数为90,则触发策略5,Grp_EC1执行自适应动作与其相邻的GroupGrp_EC2合并,场景变为(a).制环路显式化、交互性、适应性[12]等,而ManagedElement主要关注基于体系结构的自适应[4-5]和基于运行态模型的自适应[13]等.基于体系结构的自适应强调对运行态软件体系结构调整,基于运行态模型自适应强调对运行态模型调整,运行态体系结构也属于一种运行态模型,因此基于体系结构的自适应可以看作是基于运行态模型自适应的一个子类.通过运行态模型主要是为了屏蔽代码层的细节,在Page11更高的抽象层次调整,从而减少自适应难度、提高效率.虽然基于运行态模型自适应强调在更高的抽象层次进行自适应调整(因为相对于代码层而言模型层面抽象层次比较高),但是该模型主要是针对单个系统采用面向对象范型产生.本文研究的是比单个系统抽象层次更高的组织层面发散式自适应,提出与之对应的抽象层次比较高的组织范型以及相应的自适应支撑机制动态重组机制.因此本文的工作与现有工作互补,是对现有工作在组织层面进行自适应调整的细化.目前已经有一些工作开始关注在组织层面的自适应.比如THOMAS[9]提出了对组织动态调整的运行支撑平台,但是由环境中的Agent对组织进行调整.在分布式开放系统中,参与系统的Agent来自开放环境,具有不确定不可控特点,因此并不是所有的Agent都具有对组织进行自适应调整的能力,而且由不确定Agent对组织自适应调整,对系统的可靠性和稳定性带来极大威胁.本文基于动态重组机制,通过策略显式地描述组织的自适应逻辑,使组织作为具有自适应能力的一阶实体,可以通过自身来实现自适应调整.目前也有部分学者注意到应该由组织自身来实现自适应调整,比如文献[14]提出组织通过领域无关算法实现运行过程中自适应调整.系统的自适应逻辑一般是从日常使用维护中总结出来,具有领域相关、应用相关特点,而且自适应逻辑一般是多变的、与最终用户相关的[11].因此需要提供简单易用的方式对组织的自适应逻辑进行规约.文献[14]利用领域无关的算法实现自适应逻辑,因此它不能对领域相关应用相关的自适应逻辑进行有效描述.文献[15]利用Java语言对自适应逻辑进行规约,抽象层次比较低,和自适应逻辑之间存在较大的鸿沟.本文通过抽象层次比较高的策略显式地对组织的自适应逻辑描述,根据关注点分离原则,把策略、上下文同组织相分离,提高了系统的模块性,便于对系统管理与维护.7总结和下一步工作分布式开放系统的出现给软件自适应带来了新的挑战,需要在更高的抽象层次(组织层面)进行自适应调整.本文借鉴社会学、组织学思想,采用组织范型对系统进行抽象,提出了系统的组织元模型,把组织作为一阶实体,提出了支撑组织自适应的动态重组机制,通过策略显式地描述组织的自适应逻辑,从而使整个系统在组织层面实现发散式的自适应.和现有的很多自适应机制不同,在自适应对象上,本文针对抽象层次更高的组织层面;在抽象范型上,本文借鉴社会组织学思想,采用抽象层次更高的组织范型;在实现机制上,组织在上下文驱动下依据策略通过动态重组机制进行自适应调整,通过把上下文、策略和组织显式分离,提高了模块化程度,使系统更容易开发、维护和演化.针对分布式开放系统的自适应需求,我们已经初步实现了支撑Agent层面自适应的动态绑定机制的开发、运行环境SADE.目前针对组织层面的自适应需求,研究了系统的组织元模型、动态重组机制以及描述组织自适应逻辑的策略模型,并结合案例进行了具体分析.下一步的工作主要包括以下几方面:对组织元模型以及基于策略的动态重组机制进行形式化规约;设计简单易用的策略描述语言设施;设计实现相应的中间件支撑平台;在具体领域进行实际应用,比如电子商务系统、城市智能交通系统等.致谢感谢国防科学技术大学计算机学院SADE小组的所有老师和同学!
