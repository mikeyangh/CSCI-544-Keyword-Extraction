Page1云计算环境下知识约简算法钱进1),2),3)苗夺谦1),3)张泽华1),3)1)(同济大学计算机科学与技术系上海201804)2)(江苏技术师范学院计算机工程学院江苏常州213001)3)(同济大学嵌入式系统与服务计算教育部重点实验室上海201804)摘要知识约简是粗糙集理论的重要研究内容之一.经典的知识约简算法是假设所有数据一次性装入内存中,这显然不适合处理海量数据.为此,从属性(集)的可辨识性和不可辨识性出发,给出了可辨识和不可辨识对象对的概念及其性质,并阐述了它们与差别矩阵的关系.利用MapReduce设计了并行计算等价类的方法,提出了面向大规模数据的数据并行知识约简算法,讨论并实现了3种并行策略.最后,通过实验表明了云计算环境下知识约简算法是有效可行的,具有较好的可扩展性.关键词云计算;粗糙集;知识约简;数据并行;MapReduce1引言随着数据库技术的发展和信息系统的广泛使用,各行各业已经积累了大规模数据.大量数据背后隐藏着许多重要的信息,人们希望能够对其进行更高层次的分析.粗糙集理论(RoughSetTheory)[1]是一种新的研究不精确、不确定性知识的数据分析Page2理论,目前正被广泛地应用于机器学习、数据挖掘、模式识别等领域.在粗糙集理论中,知识约简是重要的研究内容之一,也是知识获取的关键步骤.所谓知识约简是指保持知识库的分类能力不变的条件下,删除其中不必要的知识.通过删除冗余知识,可以大大提高信息系统潜在知识的清晰度.因此,研究如何提高知识约简算法效率是十分重要的工作.目前已提出许多知识约简算法[2-15],主要分为基于正区域的属性约简算法[2-4]、基于信息论的属性约简算法[5-6],基于差别矩阵及在此基础上改进的属性约简算法[7-10]等.众多学者主要研究如何处理不相容决策表[11-12]和如何提高知识约简算法效率[4,13-15].文献[11]研究了不相容决策表中最大分布约简、分布约简和可能约简之间的关系.文献[12]具体探讨了Pawlak粗糙集模型下各种知识约简算法中性质保持的含义,给出了一个广义的性质保持定义.文献[4]提出了基于Hash的正区域计算方法和知识约简算法,将基于正区域的知识约简算法时间复杂度降为O(|C|2|U/C|).文献[13]利用正向近似思想,提出了一种知识约简框架模型,能够将基于信息熵的约简算法时间复杂度降为(O|U||C|+(|C|-i+1)).文献[14]利用计数排序算法能够∑Ci=1将基于差别矩阵的知识约简算法时间复杂度降为max(O(|C||U|),O(|C|2|U/C|)).文献[15]给出了改进的差别矩阵定义,对不相容对象进行了处理,并利用原有的约简结果对增量数据进行属性约简更新,从而提高了知识约简算法效率.所有这些算法是假设所有数据能够一次性装入内存中,这显然无法处理大规模数据.并行知识约简可能是解决海量数据挖掘问题的一个重要途径,而已有的并行知识约简算法[16]将并行遗传算法和协同进化算法相结合,对属性约简任务进行分解,从而提高了知识约简算法的效率.然而,此类知识约简算法[16-17]也是假设将所有数据一次性装入内存中,不适合处理海量数据.云计算(CloudComputing)是近几年新提出的一种商业计算模型,是分布式计算、并行计算和网格计算的发展.云计算先行者之一的Google公司提出了一个具有海量数据存储和访问能力的大型分布式文件系统GFS(GoogleFileSystem)[18],同时提供了一种处理海量数据的并行编程模式MapReduce[19],这为海量数据挖掘提供了一个可行的解决方案.云计算技术已经初步应用于机器学习领域[20],但至今还没有真正应用到知识约简算法中[21].本文深入研究了MapReduce并行编程技术,对现有知识约简算法进行具体剖析,利用属性(集)的可辨识性和不可辨识性,给出了可辨识和不可辨识对象对的定义和相关性质,结合MapReduce技术设计了适合大规模数据集的并行计算等价类的算法,并利用Hadoop开源平台实现了云计算环境下知识约简算法.实验结果表明该算法不仅具有较好的扩展性,而且能够很好地处理海量数据.2相关理论2.1粗糙集相关概念下面简要介绍本文主要用到的一些Rough集的基本概念,详细内容请参考文献[1,3,14].定义1[1].五元组S=〈U,C,D,V,f〉是一个决策表,其中U={x1,x2,…,xn}表示对象的非空有限集合,称为论域;C表示条件属性的非空有限集,D表示决策属性的非空有限集,C∩D=;V=∪a∈C∪DVa,Va是属性a的值域;f:U×(C∪D)→V是一个信息函数,它为每个对象赋予一个信息值,即a∈C∪D,x∈U,有f(x,a)∈Va;每一个属性子集AC∪D决定了一个二元不可区分关系IND(A):IND(A)={(x,y)∈U×U|a∈A,f(x,a)=f(y,a)}.关系IND(A)构成了U的一个划分,用U/IND(A)表示,简记为U/A.U/A中的任何元素[x]A={y|a∈A,f(x,a)=f(y,a)}称为等价类.定义2[1].在决策表S=〈U,C,D,V,f〉中,对于每个子集XU和不可区分关系AC∪D,X的下近似集与上近似集分别可以由A的基本集定义如下:定义3[1].在决策表S=〈U,C,D,V,f〉中,AC,XU,用A-X表示X的下近似集,决策属性D的A-正区域POSA(D)定义为定义4[1].在决策表S=〈U,C,D,V,f〉中,a∈C,若POSC-{a}(D)≠POSC(D),则称属性a在C中是不可缺少的;C中所有不可缺少的属性集合称为C的核(简称核),记为Core(C).定义5[3].在决策表S=〈U,C,D,V,f〉中,记Page3U/C={[x1]C,[x2]C,…,[xs]C},U={x1,x2,…,xs},UPOS={xi1,xi2,…,xit},其中,UPOS中对象为相容对象,UBND为U-UPOS,则S=(U=UPOS∪UBND,C,D,V,f)为简化决策表.不失一般性,假设决策表S仅有一个决策属性D,其决策属性值映射为1,…,k,由D导出的U上划分记为U/D={D1,D2,…,Dk},其中,Di={x∈U|f(x,D)=i}(i=1,2,…,k).定义6[14].在简化决策表S中,将UBND中所有矛盾对象集记为Dk+1,其决策属性值标记为“?”,映射为k+1.若Dk+1=,则称决策表S是相容(一致)决策表;否则是不相容(不一致)决策表.若将决策表S中所有矛盾对象归为Dk+1类,则新划分{D1,…,Dk,Dk+1}既将属于不同决策类中相容对象(D1,…,Dk)分开,又将相容对象与矛盾对象Dk+1分开,这样的不一致决策表就可以看成“相容”决策表了.因此,相容决策表不过是不一致决策表的“特例”,Dk+1=.因此,下文将所有决策表都看成“相容决策表”.2.2云计算技术为了解决海量数据的存储和计算问题,Google率先提供了GFS(GoogleFileSystem)和MapReduce等云计算技术.MapReduce是一种处理海量数据的并行编程模式.用户不必关注MapReduce如何进行数据分割、负载均衡、容错处理等细节,只需要将实际应用问题分解成若干可并行操作的子问题,设计相应的Map和Reduce两个函数,就能将自己的应用程序运行在分布式系统上.其形式如下:Map:〈in_key,in_value〉→{〈keyi,valuei〉|i=1,…,m},Reduce:(key,[value1,…,valuek])→〈final_key,final_value〉.Map函数是接收一组输入键值对〈in_key,in_value〉,然后通过某种计算,产生一组中间结果键值对〈keyi,valuei〉(i=1,…,m);而Reduce函数对具有相同key的一组value值进行归并处理,最终形成〈final_key,final_value〉.通过MapReduce编程模型,可以实现面向海量数据的知识约简算法.3云计算环境下知识约简算法假设决策表S共有k个不同决策属性值,相容对象的决策属性值分别映射为1,…,k,将所有不相容对象的决策属性值映射为k+1.这样,整个决策表S可以看成由k+1个子决策表D1,D2,…,Dk,Dk+1组成,每个子决策表包含同一类别的对象,其对象个数分别为n1,n2,…,nk+1.因此,决策表S是“相容决策表”.假设属性a有r个不同属性值,将其映射为1,…,r.记Di中条件属性a的属性映射值为p的对象个数为ni1,…,k+1),n13.1云计算环境下可辨识对象对计算方法一个可辨识的对象对是由决策属性值不同和条件属性组合值也不同的两个对象生成的.如果两个对象决策值不同,同时条件属性a上属性值也不同,则a能够辨识这两个对象(一个可辨识的对象对),即a具有一定的相对辨识能力.a能够辨识的对象对个数越多,说明a相对辨识能力越强.这时,可以用可辨识的对象对个数多少来衡量a相对辨识能力大小.定义7.在相容决策表S中,a∈C,属性a能够辨识的对象对为DOPa={〈x,y〉|f(x,a)≠f(y,a),x∈Di,y∈Dj},其中,1i<jk+1.定义8.在相容决策表S中,AC,属性集A能够辨识的对象对为DOPA={〈x,y〉|a∈A,f(x,a)≠f(y,a),其中,1i<jk+1.A,则有定理1.在相容决策表S中,若AC,a∈证明.由定义7和定义8可以直接证得.证毕.假设由A导出的U上划分有r个等价类,记U/A={A1,A2,…,Ar},将其属性组合值映射为1,…,r.A能够辨识的对象对个数可根据下面定义来计算.定义9.在相容决策表S中,AC,属性集A能够辨识的对象对个数为DISD由定义9可知,可辨识对象对个数的计算方法涉及到计算属性集A和属性D在U上导出的等价类,然后对它们进行交运算操作,计算相对比较复杂,所以只能在内存中计算出属性集A在小规模数据集上可辨识的对象对个数.然而在云计算环境下,由于海量数据的不同等价类存储在若干个节点和文件中,而计算DISD此,无法根据定义9计算对象对个数.如何快速计算Page4可辨识的对象对个数成为云计算环境下知识约简算法的关键问题.下面重点研究云计算环境下可辨识对象对个数的两种计算方法.3.1.1云计算环境下可辨识对象对个数的直接计众所周知,属性集A能够区分U/A中任意两个等价类,这说明A具有一定的辨识能力.如果A只能将所有元素划分到一个等价类中,则A具有最弱的辨识能力.因此,可以利用属性集A的辨识能力大小[22]来计算A的相对辨识能力大小DISD定义10.在相容决策表S中,AC,属性集A具有的辨识能力大小定义为定义11.在相容决策表S中,AC,c∈C∪D,则由属性c新增加的辨识能力定义为属性c分别在A1,A2,…,Ar中新增加的辨识能力大小之和,即DISU,A∪{c}-DISU,A=计算属性集A的相对辨识能力大小.下面,根据属性集A、D和A∪D的辨识能力来定理2.在相容决策表S中,若AC,则A=DISU,A+DISU,D-DISU,A∪D.证明.假设Di中条件属性集A的属性值映射DISD为p的对象个数为ni1,…,k+1),则有DISU,A=∑1p<qr由属性集A∪D导出的等价类细分为{A11,A21,…,Ak+11,A12,A22,…,Ak+12,…,A1r,A2r,…,Ak+1r},其对象个数记为nl(l=1,…,(k+1)r),则有由定义11得出DISU,A∪D=DISU,A+∑1pr∑1i<jk+1因此,DISU,A+DISU,D-DISU,A∪D=DISU,A+DISU,D-DISU,A+∑1pr∑1i<jk+1=∑1i<jk+1=∑1i<jk+1∑1i<jk+1∑1pr=∑1i<jk+1∑1p<qr=DISD由于DISU,A,DISU,D和DISU,A∪D可以统一为[n()l(∑1il象个数),而〈等价类,等价类中对象个数〉与〈key,value〉类似,故可以利用MapReduce并行计算等价类,从而可以计算可辨识对象对个数.3.1.2云计算环境下可辨识对象对个数的间接计一个可辨识的对象对是由决策属性值不同和条件属性组合值也不同的两个对象生成的.而一个不可辨识的对象对则是由条件属性组合值相同但决策属性值不同的两个对象产生的,这说明这些条件属性不能辨识这个对象对.于是,可以利用属性(集)的不可辨识性来间接计算可辨识的对象对个数.定义12.在决策表S中,a∈C,属性a不能辨识的对象对为槇DOPa={〈x,y〉|f(x,a)=f(y,a),x∈Di,y∈Dj},其中,1i<jk+1.定义13.在决策表S中,AC,属性集A不能辨识的对象对为槇DOPA={〈x,y〉|a∈A,f(x,a)=f(y,a),其中,1i<jk+1.定理3.在决策表S中,若AC,a∈A,则有证明.由定义12和定义13可以直接证得.定义14.在决策表S中,AC,属性集A不能够辨识的对象对总数为槇DISD从定义14可知,由于∑1pr∑1i<jk+1[一为∑1ilMapReduce并行计算等价类,从而计算不可辨识的对象对个数.定理4.在决策表S中,AC,c∈C-A,则槇DISDA∪c槇DISD证明.由A导出的U上划分记为U/A={A1,A2,…,Ar},属性集合A∪c导出的U上划分U/{A∪c}是对A1,A2,…,Ar等价类的细化.任一等价类Ap(p=1,2,…,r)按决策属性D划分为k+1个等价类A1p,…,nk+1n2Page5将A1p,A2对于等价类Ap来说,不能辨识的对象对数槇DISD对于任意等价类Ap和决策属性值i、j,都有A∪c为∑1i<jk+1为∑1i<jk+1数槇DISD∑1i<jk+1nip,1njp,1+nip,m)(njp,1+njp,2+…+njp,m)=nini槇DISDA∪c槇DISD性质1.在决策表S中,PQC,则槇DISDQ槇DISDP.定理5.在相容决策表S中,AC,则DISD证明.由定理4,易证性质1成立.从定理4和性质1可知,槇DISD用来进行属性约简.下面探讨DISD矩阵的关系.假设“相容决策表S”有k+1个不同决策,按决策属性可生成非空差别矩阵元素个数为∑1i<jk+1∑1i<jk+1证明.∑1i<jk+1=∑1i<jk+1=∑1i<jk+1∑1i<jk+1∑1pr=∑1i<jk+1∑1p<qr=DISD说明:DOPA中一个对象对将产生差别矩阵中包含属性集A中属性的一个差别元素,而槇DOPA中一个对象对将生成差别矩阵中不包含属性集A中属性的一个元素.对于相容(一致)决策表,两者个数之和正好等于差别矩阵中的元素个数.DISD计算方法只能适用于相容决策表,而间接计算方法可以适用于任何决策表.尽管两种方法都能够计算相容决策表的知识约简,但是由于DISD性A、D和A∪D导出的等价类,而槇DISD导出的等价类,故知识约简算法效率会相差很大.3.2云计算环境下知识约简算法从定理2和定理5可以看出,属性集A能够辨识的对象对个数DISD槇DISDA都需要通过计算等价类来获得,而不同等价类是可以并行计算的.因此,可以利用MapReduce并行编程技术处理大规模数据.在一个MapReduce编程框架中,用户着重研究算法中可并行化操作,编写Map函数和Reduce函数,即可实现大规模数据并行处理.具体而言,Map函数主要完成不同数据块中等价类计算,而Reduce函数主要统计同一个等价类个数或计算同一个等价类所不能辨识的对象对个数.根据DISD算方法,给出两种云计算环境下的知识约简算法.3.2.1云计算环境下的知识约简算法之一(DP-DIS)下面先给出直接计算方法中一个属性集是否是约简的判断准则.对于决策属性D的一个约简的充分必要条件为定理6.在相容决策表S中,AC,A是C相(1)DISD(2)a∈A,DISD证明.由定理2容易证得.DP-DIS算法包含Map函数(算法1)、Reduce函数(算法2)和主程序DP-DIS(算法3)3个算法,分别叙述如下.算法1.Map(Objectkey,Textvalue)输入:已选属性集A,候选属性c∈C-A,决策属性D,输出:〈等价类,出现次数〉//Ac_EquivalenceClass、D_EquivalenceClass、AcD_EquivalenceClass为属性集A∪c、D和A∪c∪D导1.Ac_EquivalenceClass=“c”;D_EquivalenceClass=2.ForeachattributeainA∪c3.EmitIntermediate〈Ac_EquivalenceClass,1〉;4.D_EquivalenceClass=f(value,D);Page65.EmitIntermediate〈D_EquivalenceClass,1〉;6.ForeachattributeainA∪c∪Drable〈Int〉values).7.EmitIntermediate〈AcD_EquivalenceClass,1〉.算法2.Reduce(TextEquivalenceClass,Ite-输入:等价类EquivalenceClass,values[]输出:〈EquivalenceClass,出现次数〉1.Total=0;2.fori=1tovalues.size()3.Emit〈EquivalenceClass,Total〉.算法3.主程序DP-DIS.输入:一个相容决策表S输出:一个约简Red1.Red=;2.while(DISDForeachattributecinC-Red3.ForeachattributecinRed启动一个Job,调用算法1的Map函数和算法24.输出Red.算法1中Map函数计算各个数据块中等价类及出现次数,算法2将所有数据块中相同的等价类进行汇总,而算法3则分别计算属性集A∪c、D和A∪c∪D的辨识能力大小,并根据各个候选属性的相对辨识能力确定最佳候选属性,重复上述过程,直到计算出约简.3.2.2云计算环境下知识约简算法之二(DP-NDIS)由于同一个等价类可能决策属性值都相同,因此不可辨识的对象对个数为0.为了节省存储空间,降低网络传输时间,不输出这类信息.定理7.对于一个等价类Ap,ApBNDA(D)充分必要条件为∑1i<jk+1两个不同的决策值.不妨设决策值为i和j,则ninjp>0.于是有∑1i<jk+1反之,若∑1i<jk+1证明.如果Ap属于BNDA(D),则Ap至少有BNDA(D),则Ap中所有对象的决策值相同.不妨设决策值为i,则ni∑1i<jk+1此,Ap属于BNDA(D).则∑1i<jk+1性质2.对于一个等价类Ap,ApPOSA(D),决策属性D的一个约简的充分必要条件为证明.根据定理7,容易证得.证毕.定理8.在决策表S中,AC,A是C相对于(1)槇DISD(2)a∈A,槇DISD证明.由定理4容易证得.下面,具体探讨如何实现Map函数(算法4)、Reduce函数(算法5)和主程序DP-NDIS(算法6).算法4.Map(Objectkey,Textvalue)输入:已选属性集A,候选属性c∈C-A,决策属性D,输出:〈Ac_EquivalenceClass,〈f(value,D),1〉〉1.Ac_EquivalenceClass=“c”;2.ForeachattributeainA∪c3.EmitIntermediate〈Ac_EquivalenceClass,算法5.Reduce(Textkey,Iterable〈Text〉values).输入:同一个等价类key及对应的决策值与出现次数输出:〈EquivalenceClass,IndisObjectPairSum〉//EquivalenceClass是等价类,IndisObjectPairSum是1.IndisObjectPairSum=0;2.Fori=1tovalues.size()3.IndisObjectPairSum=∑1i<jk+14.EquivalenceClass=key.toString().split(“”)[0];5.ifIndisObjectPairSum不为0算法6.主程序DP-NDIS.输入:一个决策表S输出:一个约简Red1.Red=;2.While(DISDPage73.ForeachattributecinRed4.输出Red.算法4计算各个数据块中等价类及其不同决策值出现的次数,算法5统计同一个等价类中不同决策值出现的次数,并计算不可辨识的对象对个数,而算法6根据各个候选属性产生的不可辨识的对象对个数,确定最优候选属性,重复上述过程,直到计算出约简.3.3数据并行策略传统的并行属性约简算法是假设将所有数据一图1知识约简算法中的并行操作策略4实例分析与实验结果4.1实例分析用一个“相容决策表”(表1)说明本文提出的两种算法,其中表1中“?”为所有不相容对象的决策属性值.UC1C2C3C4C5D11121332211134331222143333225333332621121?731312?假设将表1划分为两个数据分片,第1个数据分片包含第1~4条对象,第2个数据分片包含第5~7条对象.下面分别阐述DIS算法和NDIS算法计算对象对个数过程.次性装入内存中,这不适合处理大规模数据集.下面深入讨论知识约简算法中并行操作策略,如图1所示.图1(a)先在每个任务中将大规模数据划分为多个数据分片,并行计算候选属性集导出的等价类,然后根据各个任务中所计算得到的不可辨识或可辨识对象对个数确定最佳候选属性.图1(b)先将大规模数据划分为多个数据分片,然后对每个数据分片并行计算不同的候选属性集导出的等价类(任务并行),然后统计各个任务中不可辨识或可辨识对象对个数来确定最佳候选属性.图1(c)是指当知识约简算法面对高维数据集时,任务并行方式将产生大规模的不可辨识或可辨识对象对,这时可以在图1(b)基础上再以数据并行方式计算候选属性集的可辨识或不可辨识对象对总个数,最终确定最佳候选属性.识的对象对过程(1)DP-DIS算法计算候选属性C1的相对可辨在Map阶段,对于第1个数据分片中第1个对象,分别生成属性C1导出的等价类〈“C11”,1〉、属性D导出的等价类〈“D3”,1〉和属性集合{C1,D}导出的等价类〈“C1D13”,1〉3个〈key,value〉对,其余对象计算过程类似.在Reduce阶段,对属性C1、属性D和属性集合{C1,D}导出的等价类进行合并,如〈“C12”,1〉和〈“C12”,1〉合并为〈“C12”,2〉;〈“C13”,1〉、〈“C13”,1〉、〈“C13”,1〉和〈“C13”,1〉合并为〈“C13”,4〉;其余属性导出的等价类合并类似.最终,属性C1的相对可辨识的对象对个数为13(见图2(a)).(2)DP-NDIS算法计算候选属性C1的相对不在Map阶段,对于第1个数据分片中第1个对象,生成属性C1导出的等价类〈“C11”,〈“3”,1〉〉,其余对象计算过程类似.在Reduce阶段,对属性C1导出的等价类进行合并,如〈“C13”,〈“2”,1〉〉和可辨识的对象对过程Page8〈“C13”,〈“2”,1〉〉合并为〈“C13”,〈“2”,2〉〉;其余等价类合并类似.最终,属性C1的相对不可辨识的对象对个数为6(见图2(b)).图2DP-DIS和DP-NDIS两种算法计算候选属性C1的重要性4.2实验结果本节主要从运行时间、加速比(Speedup)和可扩展性(Scaleup)3个方面对所提出的云计算环境下知识约简算法的性能进行评价.将采用图1(a)~(c)并行操作策略的算法分别标记为DP-DIS/DP-NDIS、DTP-DIS/DTP-NDIS和DTDP-DIS/DTDP-NDIS.为了考察本文所提出的算法,选用UCI机器学习数据库(http://www.ics.uci.edu/~mlearn/MLRepository.html)中DS1(tic-tac-toe-endgame,TicTac)和DS2(mushroom)两个数据集用于测试算法正确性,用人工数据集DS3、DS4、DS5和DS7以及实际数据集DS6(5000倍DS2)来测试性能.表2列出了不同数据集的特性.利用开源云计算平台hadoop0.20.2(http://lucene.apache.org/hadoop)数据集对象数条件属性数决策属性值个数DS19589DS2812422DS31000000030DS42000000030DS54000000030DS64062000022DS710000010000DP-DIS和DP-NDIS两种算法整个计算过程如图2所示.和Java1.6.0_20在17台普通计算机(IntelPentiumDual-core2.6GHzCPU,2GB内存)构建的云计算环境下进行实验,其中1台为主节点,16台为从节点.(1)运行时间首先,在两个小数据集DS1(TicTac)和DS2(mushroom)上比较了DIS(传统方法)、DP-DIS、DP-NDIS、DTP-DIS和DTP-NDIS5种知识约简算法.从图3可以看出,小数据集不适宜使用MapRe-duce技术,而且使用数据和任务并行的知识约简算Page9法比仅使用数据并行的算法运行时间更短.因此,下文着重讨论DTP-DIS/DTP-NDIS和DTDP-DIS/DTDP-NDIS两类基于数据和任务同时并行的知识约简算法.其次,分别对DS3~6四个数据集在8个节点上进行测试,运行时间如图4、图5所示.从图4和图5可以看出,DTP-DIS运行时间比DTP-NDIS更长.图4表明随着所选属性个数的增加,DTP-DIS图4DTP-DIS和DTP-NDIS在单次属性选择中运行时间比较图5DTP-DIS和DTP-NDIS在DS3~6上整个运行时间比较由于DTP-NDIS算法比DTP-DIS算法运行时间更短,下面探讨DTP-NDIS算法.当DTP-NDIS遇到高维数据集时,其串行时间较长,这时可以考虑运行时间一直呈上升趋势,而DTP-NDIS运行时间呈现先上升后有所下降或较平稳上升.这是因为DTP-DIS生成的可辨识的对象对越来越多,故计算时间一直增加,而DTP-NDIS生成的不可辨识的对象对个数随着属性个数的增长先增加而后慢慢变少,故计算时间会先增加后减少,这一点可以从它们各自的计算公式上得到体现.再次使用数据并行方式(图1(c)).DTP-NDIS算法和DTDP-NDIS算法在DS7的运行结果如图6所示,其中PT表示并行计算时间(含通信并行),ST表示串行计算时间.从图6(b)可以看出,在第3、4和5次选择属性时再次用数据并行方式,算法效率更高,其它情况基本相当或略低.至于何时再次使用数据并行方式值得进一步深入研究.(2)加速比加速比是指将数据集规模固定,不断增大计算机节点数时并行算法的性能.为了测定加速比,保持DS3~7的5个数据集大小不变,成倍增加计算机节点数至16台.一个理想的并行算法加速比是线性的,即当计算机节点数增加至m时,其加速比为m.然而,由于存在计算机间通信开销、任务启动、任务Page10图6DTP-NDIS和DTDP-NDIS两种算法在DS7的运行结果调度和故障处理等时间,其实际加速比低于理想的加速比.图7显示了不同数据集的加速比大小.从图7可以看出,云计算环境下知识约简算法具有较好的加速比.图7中DTP-NDIS在高维数据集DS7上加速比较低,是因为产生了大量的不可辨识的对象对,在串行统计候选属性的对象对个数时运行时间过长,导致整个算法并行所占比例过低.另外,较小数据集的加速比比较低,其主要原因是部分节点处于空闲状态.(3)可扩展性可扩展性是指按与计算机节点数成比例地增大数据集规模时并行算法的性能.为了测定可扩展性,实验复制1、2和4倍的数据集DS3、DS4,分别在4、8和16节点下运行.图8显示了在不同节点上的可扩展性结果.实验结果显示,DTP-NDIS具有较好的可扩展性.4.3讨论传统的并行属性约简算法主要用来计算最小属性约简[16],但仅仅对小数据集进行约简.文献[17]提出了并行约简概念,将大规模数据随机划分为若干个子决策表,然后分别对各个子决策表计算正区域个数,选择最优单个候选属性,重复这个过程,从而获取约简.然而,对于不一致决策表,该方法并不能保证对各个子决策表计算正区域与对整个决策表计算正区域是等价的,因为各个子决策表之间计算正区域时并不交换信息.同样,它也无法对较大的子决策表进行约简.文献[21]先利用MapReduce技术分解大规模数据,对每个数据分片进行约简,然后合并各个数据分片的约简,再增加其它必要的候选属Page11性,最后删除冗余属性.然而,该方法中合并后的候选约简有可能是较大的条件属性集,删除冗余属性则变得十分困难.为了解决海量数据集的知识约简问题,本文利用MapReduce技术对大规模数据进行分片,对各个数据分片计算不同候选属性集的等价类,然后汇总并合并相同的等价类,计算候选属性的相对不可辨识对象对或可辨识对象对,选择最优单个候选属性,迭代此过程,直到获得约简.本文所提的算法先采用数据并行策略,再进行任务并行操作,这样大大地节省了MapReduce作业启动与调度时间,从而提高了云计算环境下知识约简算法效率.5结束语传统的知识约简算法通过改进排序算法或利用较好的数据表示来快速计算等价类,将时间复杂度降为max(O(|C||U|),O(|C|2|U/C|)),但只能在主存中处理小数据集.而目前已有的并行知识约简算法仅仅实现了约简任务的并行计算,同样不能处理大规模数据集.为了进行面向大规模数据集的知识约简,深入分析知识约简算法中可并行化操作,利用属性(集)的可辨识性和不可辨识性来设计适合处理海量数据的可辨识和不可辨识的对象对,提出了并行计算等价类方法和两类云计算环境下知识约简算法,讨论并实现了各种数据并行策略,并利用Hadoop在普通计算机的集群上进行实验.实验结果表明该知识约简算法具有较好的加速比,能够处理大规模数据集.
