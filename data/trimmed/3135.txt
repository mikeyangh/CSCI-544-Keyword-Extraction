Page1可信数据库环境下面向服务的自适应密文数据查询方法宋伟彭智勇程芳权李文海胡文斌任毅(武汉大学计算机学院武汉430074)(武汉大学软件工程国家重点实验室武汉430074)摘要实现加密数据的高效安全查询是保证可信数据库安全性和实用性的关键.与目前加密数据查询采用的静态密文分段方法不同,论文基于加密数据的分布和用户查询类型、分布规律,提出了一种自适应加密索引AEI(AdaptiveEncryptedIndex),实现面向服务的加密数据查询.AEI通过分析查询服务对查询性能的影响,根据承载服务特性、密文数据分布、用户查询分布采用自适应的加密索引划分策略,获得更好的加密数据查询性能.基于AEI方法可在可信数据库环境下实现密文数据查询,并通过了相关性能测试.实验数据表明,与其它加密数据查询方法相比,AEI方法具有更好的适应性和更高的加密数据查询效率.关键词自适应加密索引;DAS模型;可信数据库;密文数据查询;查询假阳性率1引言可信性必须得到保证.数据库的可信性主要强调即使在不可信应用环境下,如数据库管理员不可信、存储介质失窃、黑客攻击等,仍然可以保证数据的安全数据库系统是支撑信息系统的基础软件,它的性.目前还没有一个可信数据库的明确定义,我们认Page2为可信数据库是在传统多级安全数据库基础上利用加密和密文查询机制进一步阻止来自内部的恶意访问和窃取,保护数据库敏感数据的私密性和查询过程的安全性[1].目前构建可信数据库的方法主要是对数据库数据进行加密处理,但是数据加密后会失去原始数据本身所具有的很多特性,如有序性、相似性等,这给可信数据库中的数据查询带来了很大困难和挑战.本文分析数据库承载服务的特性及其对密文数据查询的影响,给出了一种自适应加密索引AEI(AdaptiveEncryptedIndex),基于数据和用户访问分布进行自适应密文数据分段划分,实现面向服务的高效、安全密文数据查询服务.与其它可信加密数据库的查询方法相比,AEI能更好地适应数据的动态变化和用户访问的不均衡性.针对AEI查询方法的相关性能测试结果,进一步验证了相关分析.本文第2节分析并比较一些其他学者在本研究方向上的相关研究工作成果;第3节详细介绍提出的面向服务密文数据查询方法;第4节给出模拟实验设计对理论方法进行验证,并对实验结果进行分析;最后在第5节总结全文并提出下一步需要继续研究的工作.2相关工作数据库作为信息系统的支撑软件,在各种应用系统中几乎无处不在.随着应用的日益丰富和复杂,企业为维护数据库需要付出大量人力、物力.2002年Hacgümü等人首先提出了DAS(DatabaseAsService)服务模式的概念[2],将数据库作为一种外包服务由第三方提供,这种服务模式减轻了企业的维护代价和运营成本,但是数据存储在第三方也带来了一些安全隐患.目前数据库数据都以明文形式存储,在DAS模型的外包服务模式下,难以保证数据的安全性和私密性,DBA本身的不可靠,黑客突破DBMS访问控制保护以及数据库物理文件的失窃等都给数据库数据安全性带来了极大威胁.如何解决应用系统将数据放在第三方管理的安全隐患,成为可信数据库的研究热点和关键问题.DAS模型提出对数据库中数据进行信息加密,以保护数据隐私安全.数据加密后会失去原始数据本身所具有的一些特性[3-4],如有序性、相似性等,难以在密文数据上直接进行查询和运算操作,如果对所有加密数据进行解密,再在明文数据基础上进行查询,由于解密操作开销巨大,会极大影响查询性能,而且对密文数据解密也会引起信息泄漏,破坏可信数据库安全性.如何实现可信数据库环境下密文数据的高效查询成为近年来的研究热点问题.目前国内外学者和研究人员在可信数据库加密数据查询方面做了大量研究工作,大致可以分为以下3类:(1)不解密而直接操作密文数据的方法.这类方法利用秘密同态、保持有序等加密方法,不对密文数据进行解密,直接在密文数据上进行运算操作.Rivest等使用秘密同态(privacyhomomorphism)函数算法对数据进行加密,无须解密直接可以对加密数据进行算术运算操作[3].这种方法提高了加密数据操作性能.但是在现实中构造一个可行的同态加密函数非常困难,而且同态加密方法本身也存在一定安全隐患.Agrawal等提出了一种保持有序的加密方法[4],但加密数据保持有序性,容易遭到选择密文攻击.Ozsoyoglu等提出了另一种保持有序的加密方法[5],也存在一定安全隐患,容易遭受已知明文攻击和统计攻击.(2)快速解密的方法.这类方法通过快速解密可信数据库存储的密文数据,提高系统查询性能.目前的研究成果有子密钥加密、智能卡加密等.David等基于中国剩余定理提出了子密钥加密技术[6],这种方法在解密密文数据时,只需进行一次模运算.Ge等提出了一种轻量级数据加密机制FCE[7],Bou-ganim等采取智能卡技术实现加密数据快速查询[8],但是它不能对实数类数据进行范围查询.这种方法主要对加密算法本身进行改造,使之适应可信数据库应用需求,但加密方法经过改造后存在一定安全隐患,而且数据在服务器端解密,也会破坏可信数据库存储数据的私密性.(3)利用密文数据分段过滤的方法.这类方法中可信数据库服务器进行中间处理得到一个包含所有结果数据的较小中间结果集,由客户端对中间结果集进行解密过滤获得最终结果,从而减少用户解密工作量,提高查询性能.Hacigumus等在DAS模型基础上,对密文数据构建分段索引,缩小解密范围,返回客户端的记录集包含一些不满足查询条件的记录,需要由客户端进行解密过滤处理[9];Hacigumus基于这一方法又研究了如何实现加密数据的聚集操作运算[10]以及密文分段的优化方法[11].Wang等提出了一种桶划分的自适应调整方法STBucket[12]减小查询的假阳性率.此外,还有一些其它加密数据查询方法研究,戴Page3一奇等给出了一种在非同态密文上建立索引的方法完成数据的快速检索[13].这种方法十分适用于单条件密文检索,同时经过处理也能适用于复合条件的查询.文献[14]利用查询重写方法实现属性粒度的数据库加密,降低网络通信量提高系统性能.秘密信息检索PIR[15-17]保证用户从数据库获得信息,而服务器并不知道用户究竟查询什么信息,保护用户查询的私密性.可信数据库密文分段查询方法[9]使解密操作只在客户端进行,保证了数据的安全性,但并没有研究密文索引分段对查询效率的影响.文献[11]研究了索引优化方法,但没有考虑用户查询差异带来的影响.目前密文数据分段普遍采用静态划分方法,还无法支持可信数据库数据的更新.文献[12]提出了一种自适应的密文桶划分调整方法,但并没有考虑不同类型查询对密文查询带来的影响.本文首先分析密文数据分布和承载服务特征对密文查询效率的影响,进而提出了一种面向服务的自适应密文分段索引AEI,与其它研究方法相比,AEI结合数据分布和用户访问服务特征自适应地进行密文数据分段划分,可以更好地适应数据库数据的更新,同时对不同类型数据查询服务也具有更好的适应性和更高的查询效率.3面向服务的自适应密文数据查询方法3.1可信数据库环境下的加密数据过滤查询数据库中存储了不同类型(主要是字符型和数值型)的数据,它们承载的查询服务各不相同,而加密数据的查询差别就更大了,论文主要研究可信数据库中数值型密文数据的高效、安全查询方法.相关研究[2,9,11]对加密属性值划分密文数据分段,服务器收到查询请求后把密文数据分段内的全部密文元组返回用户,这种方法返回的结果集包含所有正确结果,但也有不符合查询条件的内容,由用户解密过滤获得最终结果.如图1可信数据库,原始数据加密后的密文元组如图1(b),salary数据内容采用esalary=Map(salary)函数加密存储,salary的密文映射数据分段如图1(c).当用户发起针对salary的查询(如salary=55K)时,首先将查询值映射到对应的密文数据分段上,服务器将所有可能元组((40K,60K)分段上的全部密文元组)返回客户端,由客户端解密过滤得到最终查询结果.110101100100…15182310001000110010…86111018100100010110…47241014001011100011…23231019010010011100…12171521这种查询方法服务器端无需解密,但客户端需要对全部中间结果进行解密过滤,上例服务器端返回(40K,60K)上3条密文元组,客户端只有全部解密后才能获得最终的1条正确匹配元组.这种查询方式下加解密操作成为决定查询效率的关键.论文利用式(1)所示假阳性率(falsepositiverate)[11]、误报率即中间结果集的不匹配元组比例,来反映客户端无效解密操作量.针对某查询集合,Nfit为符合查询条件的密文元组数,Ntotal为返回的全部密文元组规模.如何调整加密数据分段,降低查询假阳性率,减少客户端无效解密操作量,成为论文优化可信数据库查询的主要手段和目标.3.2面向服务的自适应密文数据查询不同类型用户查询对加密数据查询方法、效率都有很大影响,论文将用户查询分为以下两类加以研究:(1)attributeopvalue查询;(2)attribute1opattribute2连接查询;其中attribute为可信数据库某加密属性,value是针对attribute的查询值,op是查询操作符,可以为“=”、“>”、“<”、“”和“”等.3.2.1attributeopvalue查询(1)op为“=”的attribute=value查询操作针对一系列attribute=value查询,设当前加密属性A的密文数据分段为Range1,…,Rangek共k段,每个数据分段的密文元组规模为M1,…,Mk,查询值落在各个密文数据分段内的次数分别为Q1,…,Qk,每个密文数据分段返回命中的正确结果总Page4数为H1,…,Hk,则查询总假阳性率如式(2).论文采用自适应索引划分策略,随着用户查询和数据的变化动态调整密文分段划分.首先分析密文数据分段划分对查询假阳性率的影响,设将当前第i个密文数据分段重新划分为两个新的数据分段,各自包含密文元组数Mi1和Mi2(Mi1+Mi2=Mi),承载查询服务量Qi1和Qi2(Qi1+Qi2=Qi),正确命中查询结果总数为Hi1和Hi2(Hi1+Hi2=Hi),在其它密文数据分段不变的前提下,划分前后的假阳性率变化如式(3).ΔP=∑i-1MtQt+Mi1Qi1+Mi2Qi2+∑kt=1=∑kMtQt∑i-1t=1上式恒大于等于零,因此对较大密文数据段进一步划分可以降低假阳性率,优化查询.下面分析选择哪个密文数据分段进行划分有可能使优化效果最大.在确定时间点上∑k因此选择划分后Mi1Qi2+Mi2Qi1取得最大值的密文分段可以获得最好的假阳性率优化效果.不同类型用户查询,AEI索引结构也不相同,针对attribute=value查询其结构如图2所示.可信数据库中,为了保证查询请求对服务器端保密,服务器只获得针对某个密文数据分段的查询,而并不知道密文数据分段内用户查询值的具体分布,因此服务器端难以确定对哪个密文数据分段进行划分使得Mi1Qi2+Mi2Qi1最大.如图2,Query记录每个数据分段承担的查询量,令Mi1=αMi,Qi1=βQi(0<α,β<1),则Mi2=(1-α)Mi,Qi2=(1-β)Qi,Mi1Qi2+Mi2Qi1=(α+β-2αβ)MiQi~MiQi.因此可信数据库服务器端总是优先选择MiQi最大的加密数据分段作为优化目标.110101100100…15182310001000110010…86111018100100010110…47241014001011100011…23231019010010011100…12171521R_idesalaryMinimumMaximalQueryJoincost113020000150221200004000018228310400006000058400423600008000042102515800001000009null图2attributeopvalue的AEI密文分段索引结构AEI设置采样时间窗口interval来统计用户访问量,Query统计interval内每个密文分段的查询访问量,采样周期结束将访问量清零.为了使interval更准确地反映用户访问量的变化,AEI随着用户访问量的变化调整采样时间间隔(当用户访问量增加时,缩小采样间隔及时地调整可信数据库密文分段,当用户访问量减小时,扩大采样时间间隔,减低服务器端处理量).设当前采样时间间隔为intervalnow,则下一周期的采样间隔intervalnext如式(4)所示,其中Querynow和Querylast分别表示当前和上一个时间间隔内的用户访问量.设系统允许的最大密文分段数为K,当前密文分段数为k,每次时间间隔结束,在密文分段总数不超过K的前提下,服务器选择至多α×k(0<α<1)个MiQi最大的密文分段作为待划分的目标.随着密文分段的划分,直接划分密文分段有可能超出分段总数K的限定,为了更好适应用户查询服务变化,有必要对部分数据量和承载服务量较小的密文分段进行合并优化,因此需要衡量划分密文分段和合并之间的代价.如图2(b)所示,AEI以密文分段和右侧相邻密文分段合并后的M×Q作为其合并代价Joincost.当选择某密文分段bucket进一步划分超出K限制时,将bucket的优化判定条件MiQi与系统中最小的密文分段合并代价Joincost进行比较,当划分优化效果大于合并代价时,说明划分更有利于优化查询,将bucket加入待划分列表,合并具有最小合并代价Page5的两个密文分段并局部更新合并代价,迭代这一过程直至找到αk个待划分分段,或划分密文分段的优化判定条件小于最小合并代价为止,选择算法如算法1所示.服务器端最坏情况下需要选择αk个待划分的密文数据分段,因此算法最坏情况下的时间复杂度为O(αk).如图2所示AEI索引结构,服务器增加图2(b)密文索引存储开销与当前密文分段规模k成正比为O(k).数据库初始状态只有一个数据分段,若单纯利用AEI方法调整需要较长时间,不利于服务质量的稳定.为加快密文分段的优化调整,初始化时可以采用equi-width、equi-depth或QOB等其它方法划分若干密文分段,再随着数据和服务的加载利用AEI方法进行动态调整和优化.算法1.attribute=value查询,划分数据分段选择算法.参数:K,最大分段数;α,划分比例;k,当前分段数;返回:list_buckets,待划分密文分段列表;1.if((1+α)k>K){//有必要进行合并优化调整2.for(inti=1;i<=αk;i++){3.bucket=剩余密文数据分段中Mi×4.if(i+k<=K){//没有超出最大密文分段数5.list_buckets.add(bucket);6.}else{7.if(bucket’sMi×Qi<Min(Joincost)){8.break;//划分代价更大停止选择9.}else{10.list_buckets.add(bucket);11.合并最小Joincost的密文数据分段;}}}12.}elseif((1+α)k<=K){//不超出最大分段数限制13.选择α×k个MiQi最大的数据分段进入14.returnlist_buckets.确定待划分密文数据分段后,如何进行划分也是必须研究的.为了保护数据私密性,可信数据库环境下服务器并不能解密存储的数据,无法完成数据分段划分操作.可信数据库用户在查询过程中会获得加密数据分段上的全部密文元组并对其进行解密过滤,AEI利用可信数据库的这一服务特点,由可信用户前端完成加密数据分段的划分调整优化.服务器将密文分段划分请求发送给第一个查询该密文分段的用户,可信用户端在查询解密过滤基础上,基于明文数据元组,选取划分点使得Mi1Qi2+Mi2Qi1取得极大值来划分密文分段.但可信数据库中服务器端和客户端都不知道用户查询的分布状况,考虑到每个数据分段跨度较小,可以认为用户查询在数据分段内近似服从均匀分布即Q~Range,则划分条件可转换为使划分后Mi1Rangei2+Mi2Rangei1取极大值.可信前端完成划分后,将数据分段和密文元组分配信息返回服务器,服务器端调整对应密文数据分段,并更新数据分段映射函数,AEI密文分段优化算法如算法2所示.优化算法.算法2.attribute=value类型查询,数据分段参数:r,密文分段最小元组数;list_buckets,待划分密文分段列表;服务器端:1.if(客户端client查询的密文数据分段bucketinlist_2.服务器端向client发起调整bucket请求;3.while(收到返回的bucket划分信息){4.if(bucket可以进行划分)5.调整密文数据分段和分段函数;客户端:1.if(客户端client收到划分密文分段bucket的请求){2.for(inti=bucket.Min,temp=0;i<=bucket.3.以i作为分界点试划分;4.if(M1.size()<rorM2.size()<r)5.continue;//不满足最小元组数大于r条件6.elseif(M1Range2+M2Range1>temp)7.temp=M1Range2+M2Range1;8.if(divide_point==0)9.return最小元组r限定条件下无法进行划分;10.else11.return新密文数据分段划分信息;}可信数据库的数据分段与安全性和查询效率都紧密相关,相同情况下数据分段中包含的密文元组数越少,信息泄漏可能性也越大.为了保证可信数据库安全性,在AEI的数据分段过程中保证每个密文数据分段至少包含r个元组.密文数据分段调整算法对于客户端来说,客户端需要比较分段内的所有划分点,其时间开销与密文数据分段跨度Range成正比,客户端时间复杂度为O(Range).对于服务器端,收到每个密文分段的调整信息后,需要调整的密文元组信息与密文分段内元组数Size成正比,当服务器端确定有Count个密文数据分段需要调整时,服务器端调整密文数据分段的时间开销为O(Size×Count).AEI密文分段调整交给对密文分段查询的客户端执行,这样既确保数据对服务器的保密性,而且由于客户端查询过程本身需要解密所有密文元组,Page6也不会额外增加客户端的解密开销.AEI加密数据分段函数根据密文数据分段的变化而变化,用户在发起查询请求时需要更新加密数据分段函数.操作(2)op为比较操作符的attributeopvalue查询op为比较操作符(“>”,“<”,“”或“”),针对图1数据查询salary>50K时,服务器端将(40K,60K),(60K,80K),(80K,100K)3个数据分段的密文元组都返回给客户端解密过滤获得最终结果.除了查询值所在密文数据分段存在不匹配数据元组外,其它密文分段返回的都是正确的匹配结果.和前述分析相同,设属性A被划分为k个加密数据分段,查询值value落在每个加密数据分段内时的正确结果总和为H1,…,Hk.针对这种查询,需要返回大于或小于方向上的所有加密数据分段的密文元组,首先考虑比较查询符是大于(包括“>”和“”)的情况,其总假阳性率如式(5).∑P=1-∑kj=t+1Mj和∑k设将第i个数据分段进行重新划分,划分后密文元组数为Mi1和Mi2,覆盖查询值次数分别为Qi1和Qi2,对于一个数据分段而言,Ht和Qi2Mi1相对于Qt∑k阳性率变化如式(6)所示.其中∑k前可信数据库加密数据分段结构和用户查询分布决定并不能改变.当查询操作符为小于操作时,可以得到类似的假阳性率变化情况.ΔP=Qi1Mi2∑k∑k≈Qi1Mi2+Qi2Mi1M()j∑kt=1通过上述分析可以发现,与前述attribute=value类型用户查询相同,Qi1Mi2+Qi2Mi1也可以作为attributeopvalue(op为比较操作符)类型用户查询的加密数据分段优化判定条件.因此AEI同样可以基于图2的AEI数据结构和算法1、2实现attributeopvalue类型用户查询的优化,本文不进t=1t=1行累述.3.2.2attributeopattribute查询针对加密属性的attributeopattribute表连接查询,为了获得全部查询结果,需要将所有可能的密文分组连接集合返回给客户端进行解密过滤.例如:在图3所示可信数据库表A和表B的salary属性密文分段中,当用户发起A.salary=B.salary查询,可信数据库需要把所有可能的加密数据分段组合返回给客户端进行解密过滤,包括((0K,20K),(0K,15K)),((0K,20K),(15K,30K)),((20K,40K),(15K,30K))…,因此针对attributeopattribute类型查询,可信客户端需要解密过滤的密文数据元组数量是非常大的.图3可信数据库attributeopattribute密文分段论文采用一种两级索引方法来优化attributeopattribute查询.为降低管理代价,AEI只在有查询需求的属性对之间构建查询索引.首先分析两个属性值域之间的关系,图4将两个属性的值域分成相离、相交、包含和重叠4种相对关系.如图4可将两个待比较属性的值域Rangea(Lowera,Uppera)和Rangeb(Lowerb,Up-perb)分为5个子区域:(1)Seta<b=(Lowera,min(Uppera,Lowerb));(2)Seta=b=(max(Lowera,Lowerb),(3)Seta>b=(max(Lowera,Upperb),Uppera);(4)Setb<a=(Lowerb,min(Lowera,Upperb));(5)Setb>a=(max(Lowerb,Uppera),Upperb).两个待比较的密文属性不可能同时具有上述5个子集合,如图4(a)相离关系就只有Seta<b和Seta>b两个子集合,其它子集合为空集.针对一个attributeopattribute查询,除Seta=bPage7集合外,其它子集合对于任一查询都是确定的(全部是正确结果,或全部不是),如针对a<b的查询,Seta<b和Setb>a中的密文元组就全是正确匹配的,而Setb<a和Seta>b则肯定不可能匹配.AEI设计图5所示两级自适应密文分段索引来解决这类查询.在两级索引中,第1级记录了密文属性值所属值域子集,由于属性值域相对固定,第1级索引是一个静态索引,针对任何表连接查询,第1级索引可以解决除Seta=b子集外的所有数据查询,而且不会产生不必要的解密操作,下面研究如何利用第2级索引来优化Seta=b区域的查询性能.(1)attribute=attribute查询针对table1.A=table2.B查询操作,在Seta=b区间上,设密文属性A划分的密文数据分段为A.Range1,…,A.Rangek共k段,每段含有密文元组A.Mi条,属性B划分为B.Range1,…,B.Rangel共l段,每段包含密文元组B.Mi条,正确匹配元组数为H,则Seta=b区间产生的假阳性率如式(7)所示.P=1-其中∑A.Mi∩B.Mj≠于等于A.Mi和B.Mi的覆盖区域,因此在其它条件相同时,在Seta=b区间上,保证两属性的二级索引具有相同的密文数据分段划分,如图5(g)、(h)每个密文分段覆盖区间相同,可以获得更好的查询性能,此时假阳性率为P=1-H∑k(A.Mj1×B.Mj2+A.Mj2×B.Mj1)H由式(8)可知选择划分后A.Mj1×B.Mj2+A.Mj2×B.Mj1最大的密文分段对可以获得更好的假阳性率优化效果,令A.Mj1=αA.Mj,B.Mj1=βB.Mj,则A.Mj2=(1-α)A.Mj,B.Mj2=(1-β)B.Mj,所以A.Mj1×B.Mj2+A.Mj2×B.Mj1=(α+β-2αβ)A.Mj×B.Mj~A.Mj×B.Mj,因此设二级索引当前密文分段数为k,在二级索引最大分段数K限定条件下,AEI优先选择αk(0<α<1)组A.Mj×B.Mj最大的密文数据分段对作为优化划分目标可以获得更大的优化效果.最坏情况下,密文分段对选择算法需要选idNamesalary012Tom75K013Mary60K014John50K015Jerry65K(a)表A原始数据etupleLevel_1Level_21110…Seta>b0010…Seta=b181011…Seta=b140111…Seta=b19(e)A.salary两级加密数据分段(f)B.salary两级加密数据分段图5针对attributeopattribute的两级自适应密文索引下面分析选择划分两个属性的哪一对密文数据分段对可以获得最好的优化效果.假设同时对两个属性的第j个密文数据分段进行划分,划分后的两个属性密文数据分段仍然相同,存储密文元组数分别为A.Mj1,A.Mj2,B.Mj1,B.Mj2,其它数据分段情况相同,则假阳性率变化情况如下.择α×k个密文元组乘积最大的密文分段对,因此最坏情况下的密文分段对选择时间复杂度为O(α×k).服务器端优化分段对选择算法类似算法1,这里不再描述,这时的合并代价Joincost是两密文属性密文分段对与右侧密文分段对合并后的密文元组乘积.由式(8)可知这类查询的假阳性率与用户访问量无关,因此不需要记录用户访问量.同时由于用户需要解密Seta=b上的所有密文元组,为了不额外增加用户解密操作量,AEI算法由查询attribute=Page8attribute的第一个可信用户端在解密过滤基础上完成所有密文分段的划分工作,分段优化算法如算法3.算法3.attributeA=attributeB二级索引分段优化算法.参数:r,最小元组数;list_buckets,待划分密文分段对;服务器端:1.if(客户端client第一次查询attributeA=attributeB)2.服务器端向client发起划分list_buckets请求;3.while(收到返回划分信息list_info){4.while(buckets=list_info.next()!=null){5.if(buckets可以进行划分)6.修改两个属性的密文数据分段信息;}}客户端:1.if(客户端收到划分请求){2.while(buckets(A,B)=list_buckets.next()!=null){3.for(inti=A.Min,temp=0;i<=A.Max;i++){4.以i作为分界点试划分;5.if(A1.size<rorA2.size<rorB1.size<ror6.continue;//不满足最小元组数条件7.}elseif(A1.size×B2.size+A2.size×B1.size>8.temp=A1.size×B2.size+A2.size×B1.size();9.divide_point=i;}}10.if(divide_point==0){11.list_info.add(该密文分段对不能进行划分);}12.else{13.list_info.add(密文分段对划分信息);}14.}Returnlist_info;}如算法3所示,客户端需要对所有待划分密文分段对进行处理,设Seta=b区间跨度之和为∑Range,则客户端的时间复杂度为O∑Rang()e.而服务器端需要对返回的调整密文分段对元组进行分段调整,设待划分密文分段对的元组总数为∑Size,则在调整密文分段对时服务器端的时间复杂度为O∑()Size.设两属性密文元组规模为Size1和Size2,在Seta=b子集上的二级密文分段都为k,为了实现二级AEI索引结构,服务器端首先需要存储O(Size1+Size2)的两级加密数据分段信息,如图5(e)、(f),同时需要存储2k的二级索引信息,如图5(g)、(h),因此整个服务器的存储开销为O(Size1+Size2+2k).(2)op为比较操作符的attributeopattribute查询操作对于table1.Aoptable2.B(op为“>”,“<”,“”或“”)查询,也只会在Seta=b区间上产生不匹配返回结果,本节只分析Seta=b区间带来的假阳性率,且保持两属性在二级索引上具有一致的密文分段划分,以减少数据分段交叉覆盖引起的大量解密操作.设属性A,B在Seta=b区间上都被分成相同的k段,包含密文元组数分别为A.Mi和B.Mi.大于和小于比较操作的假阳性率情况并不相同,下面首先研究table1.A<table2.B的查询,设Seta=b区间上满足条件的密文元组共H条,则假阳性率如下所示.设同时对A,B二级索引中的第i个密文数据分段进行重新划分,分割后新密文数据分段元组数分别为A.Mi1,A.Mi2和B.Mi1,B.Mi2,则假阳性率优化情况如下所示.ΔP<=由式(10)可知,选择A.Mi2×B.Mi1最大的密文数据分段进行划分可以获得更好的优化效果,同理当比较操作符为大于时,ΔP>优化选择条件为A.Mi1×B.Mi2.考虑到A.Mi1,A.Mi2~A.Mi,B.Mi1,B.Mi2~B.Mi,则有ΔP<,ΔP>~A.Mi×B.Mi,因此服务器总是优先选择不超过α×k组A.Mi×B.Mi最大的密文数据分段对作为优化目标,优化目标选择算法同样类似算法1,服务器端的时间复杂度为O(α×k).由于大于和小于比较操作的优化判定条件并不相同,因此为了更好的反映查询服务特性,服务器端记录采样周期interval内的大于、小于比较查询比例,设分别为Prop>和Prop<(Prop>+Prop<=1),客户端在划分密文分段对时选择Prop>×(A.Mi1×B.Mi2)+Prop<×(A.Mi2×B.Mi1)最大点作为新的密文数据分段划分点,二级索引分段优化策略类似算法3,时间和空间复杂度也相同,本节不再累述.4性能测试及结果分析4.1实验设置论文采用JAVA基于Totem数据库实现了面向Page9服务的加密数据查询方法AEI,将AEI方法与equi-depth、equi-width[9]、QOB[11]和STBucket[12]等加密数据密文分段查询算法进行对比,比较相同实验环境下的查询总假阳性率性能.模拟实验在一台双核2.1GHz,内存2GB的PC机上进行.实验中AEI算法通过承载用户查询达到一定密文数据分段数后进行查询结果统计,统计各种算法承载10000条用户查询请求的总假阳性率,其它实验设置见表1.rAEI密文数据分段的最小元组数3interval0AEI采用的初始时间间隔α划分密文分段比例图6查询值均匀分布的attribute=value查询假阳性率实验从实验数据可以发现,由于AEI和STBucket对于attribute=value查询密文数据分段划分策略一致,因此两者的查询假阳性率性能并没有区别.而与其它几种密文查询方法比较,当查询值服从均匀分布时,若不考虑数据分布(都服从均匀分布),如图6(a),各种密文分段查询方法的查询效率相当.而当数据分布状况发生变化时,如图6(b)、(c),AEI密文数据分段方法具有更好的查询性能,且随着数据分段数的增加,AEI能更好地适应用户查询和数据分布变化,获得更好的查询性能.从实验结果看,实验数据集服从N(0,1002)分布时,在密文数据模拟实验采用3种不同测试数据集:(1)值域[1,10000]服从U(1,10000)均匀分布规模10000的整数数据集;(2)值域[-,+]上服从N(0,1002)正态分布取整后规模10000的数据集;(3)UCI的个人信用数据集①中的信用保证金真实数据.4.2犪狋狋狉犻犫狌狋犲=狏犪犾狌犲类型查询实验模拟实验设计不同查询测试集对各种密文数据查询算法进行测试,分别是:(1)查询值服从属性值域范围内随机均匀分布的用户查询;(2)考虑到用户查询都应落在属性值域范围内,针对(1)、(2)两种数据源,设计查询值服从N(50,1002)正态分布查询;针对UCI数据源设计查询值服从N(5000,1002)正态分布的用户查询,实验结果如图6、图7所示.分段数500情况下,AEI的查询假阳性率约为equi-depth和equi-width的10%,QOB方法的60%.对于UCI数据集而言,当数据分段较少时,各种方法的查询假阳性率并没有太大区别,随着密文分段数的增加,AEI方法优化假阳性率效果更为明显,在分段数为500时,AEI的查询假阳性率只有其它方法的约5%.在图7(a)中,即使数据仍然服从均匀分布,当用户查询不均匀时,AEI算法可以更好地适应用户①Statlog(GermanCreditData)DataSet.http://archive.ics.uci.edu/ml/datasets.htmlPage10图7查询值正态分布的attribute=value查询假阳性率实验查询的变化,其查询假阳性率约只有其它3种方法的60%.当用户查询不服从均匀分布时,图7(b)与图6(b)相比AEI方法的假阳性率性能优势更加明显,更能适应用户查询的变化.在图7(c)UCI数据环境下,AEI查询方法也具有更好的查询效率,但随着密文数据分段的增加,假阳性率比值会上升,深入分析发现其原因是由于UCI测试集数据规模较小,随着密文数据分段的增加,密文分段包含的密文元组数很少,从而使各种查询方法的假阳性率都较低,但AEI方法仍然具有最高的查询效率.4.3犪狋狋狉犻犫狌狋犲狅狆狏犪犾狌犲类型查询实验采用4.2节中的测试查询值分布集合进行模拟实验,模拟实验过程中保持各种比较操作符(“>”,“<”,“”和“”)所占比例大致相等,统计各种算法的假阳性率比值,实验结果如图8、图9所示.与attribute=value查询类似,在attributeopvalue类型查询中AEI和STBucket也具有相同的查询假阳性率性能.图8中的实验结果显示,当数据和用户查询分布都服从均匀分布时,各种查询方法的假阳性率大致相当.当数据集服从正态分布时,AEI算法的假阳性率约为QOB的80%,相对于equi-width和equi-depth方法假阳性率优化效果随密文分段数的增加更加明显,当密文分段足够多时可以节省约90%以上的无效解密操作.在UCI数据集环境下,AEI方法的查询假阳性率分别只有equi-width、equi-depth和QOB方法的约80%,30%和45%.当用户查询值服从正态分布时,与图8(a)实验结果数据相比,图9(a)表明AEI方法具有更好的用户查询适应性,其查询假阳性率明显小于其它3种对比方法,当数据和用户查询值都服从正态分布时,AEI方法的查询假阳性率只有equi-width、equi-depth和QOB方法的约20%、40%和60%.在UCI数据集环境下AEI方法的查询假阳性率分别只有其它3种方法的约35%、30%和45%.4.4犪狋狋狉犻犫狌狋犲=犪狋狋狉犻犫狌狋犲类型查询实验AEI方法中利用两级索引结构优化密文属性之间的查询操作,本节设计模拟实验对密文属性间的attribute=attribute查询假阳性率性能进行评估,实验结果如图10所示.当相同密文数据属性之间进行等值连接查询时,若两个密文属性列数据都服从均匀分布(图10(a)),AEI与equi-width、equi-depth和QOB的查询效率大致相当,而STBucket在动态划分密文数据分段时产生了大量的分段值域的重叠,导致针对attribute=attribute的连接查询操作代价大大增加.而当属性数据不服从均匀分布时(图10(b)~(c)),AEI方法显示出更好的适应性,其查询假阳性率也明显优于其它4种比较方法.Page11图8查询值均匀分布的attributeopvalue查询假阳性率实验图9查询值正态分布的attributeopvalue查询假阳性率实验当两个不同密文属性进行等值查询时(图10(d)~(f)),其它查询方法两个密文属性的数据分段划分都不相同,存在大量的密文数据段交集,使得查询假阳性率大大上升,而AEI采用了两级自适应索引方法,很好地解决了密文数据分布和数据段划分带来的影响,其查询假阳性率性能获得了极大的提高,平均假阳性率只有其它方法在相同情况下的不到50%.Page12图10attribute=attribute查询假阳性率实验4.5犪狋狋狉犻犫狌狋犲狅狆犪狋狋狉犻犫狌狋犲类型查询实验本节模拟实验对密文属性之间的attributeopattribute(op为比较操作符)查询假阳性率性能进行评估,模拟实验保持各种比较操作符(“>”,“<”,“”和“”)比例相当,实验结果如图11所示.从图11所示实验结果发现当两属性相同时,当密文属性值服从均匀分布时(图11(a)),STBucket方法对密文数据分段进行动态调整,产生部分重叠的密文数据分段对使得查询假阳性率上升,而其它各种密文查询方法的效率相当.当密文数据分布服从正态分布时(图11(b)),AEI方法比其它方法假阳性率性能更高,大约为QOB和STBucket方法的40%,equi-width和equi-depth方法的25%.UCI数据集相对较小,密文数据分段也较小,AEI方法相对于QOB和STBucket方法可以获得约30%的假阳性率提升,相对equi-width和equi-depth则分别为20%和30%的性能提升.当两不同密文属性进行比较时,由于两属性的值域、密文数据分段的划分都不相同,AEI方法显示出更好的适应性和更加明显的优势,从图11(d)~(f)中可以发现AEI密文查询方法的查询假阳性率都要大大优于其它几种方法,且随着密文分段的增加,优势更为明显.5结论本文分析了查询类型、数据分布和用户查询对可信数据库环境下加密数据查询带来的影响,根据加密数据分布和用户访问情况给出了一种自适应密文索引结构,实现面向服务的加密数据优化查询.本Page13图11attributeopattribute查询假阳性率实验文中的AEI算法基于可信数据库客户端需要解密过滤的服务特点将密文分段调整任务交给可信客户端处理既保证了加密数据的安全性,降低了服务器端的处理压力,而且也不会额外地增加客户端解密开销.AEI采用动态的密文数据分段划分方法可以解决可信数据库数据更新对密文分段带来的影响,同时也可以实现可信数据库的表连接优化查询,这是目前相关研究并没有很好解决的.基于提出的加密数据查询方法已经实现了一种可信加密Web电子邮件系统,本文提出的方法很好地解决了加密电子邮件系统中日期型数据的加密查询操作.数据库承载的用户查询类型很多,本文研究了两大类主要的可信数据库查询操作,但是数据库需要提供的查询服务种类很多,下一步进一步深入解决可信数据库的其他复杂查询以及应用中面临的各种问题,研究如何实现加密数据的分组、排序以及提供可信数据库基于AEI方法的查询接口和标准语言.
