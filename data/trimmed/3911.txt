Page1基于签到数据的短时间体验式路线搜索宋晓宇1)许鸿斐1)孙焕良1)刘俊岭1),2)1)(沈阳建筑大学信息与控制工程学院沈阳110168)2)(东北大学信息科学与控制学院沈阳110004)摘要路线搜索已经广泛地应用于基于位置的服务和旅游路线推荐等领域.现有的关于路线搜索的研究,通常只考虑景点之间路线的流行程度与用户的需求,因此提供的推荐路线并未考虑景点类别的丰富性,存在类别重复的现象.为了能使用户在短时间内体验所在地区不同类别特色的景点,增强旅游体验效果,文中提出一种新的路线搜索:短时间体验式路线搜索(SERS).该路线搜索方法根据用户给定的查询位置vs、旅行时间限定t以及用户对景点类别选择的集合uc,找到一条非重复多类别且收益最大化的最优景点访问路线.为了有效处理SERS,提出一种预计算结点收益上界值的优化策略,设计了两种优化搜索算法:单收益上界剪枝搜索算法(SUB)和多收益上界剪枝搜索算法(MUB).优化的搜索算法利用收益上界值剪掉了不可能产生结果的分枝,提高了搜索效率.利用Gowalla和Foursquare社交网站真实的签到数据集进行了充分实验,评估了所提出的算法在不同参数设置下的搜索效率,验证了算法的有效性.关键词路线搜索;短时间体验;签到数据;基于位置的服务1引言随着互联网的快速发展与普及,Web上的数据日渐增多,数据种类愈发丰富.越来越多的人将自己的旅游照片和旅游轨迹等信息上传到Flickr①、Gowalla②、Foursquare③等社交网站上来记录和分享自己的旅游经历.通过分析大量的该类数据,可以挖掘出流行的旅游地点与旅游路线,为用户提供有价值的路线推荐与搜索服务.现有的研究包括:基于景点流行程度的路线推荐[1-2]、结合用户需求的路线推荐与搜索[3-6]及查询敏感(考虑查询的位置、时间及天气)的路线推荐[7-9]等.考虑实际生活中一种新的路线搜索需求:用户来到一个陌生的城市出差,公事之余还有几小时空闲时间,希望搜索到一条能够体验所在地区有特色的不同类别的景点,如文化古迹、地貌风景、特色美食等的个性化最优访问路线.我们称此类搜索为体验式路线搜索.上例表明体验式路线搜索即为:结合用户的查询位置与用户提供景点类别的集合,考虑用户对旅行时间限定的基础上搜索到一条非重复多类别且收益最大化的最优景点访问路线.由无明确目的地的体验性访问决定了用户希望搜索非重复多类别的景点.本文中最大收益以路线上不同类别景点的流行程度之和最大来度量.现有的关于路线搜索的研究中,通过用户给出的查询关键字搜索到的最优路线存在关键字类别的重复现象[7].而且最优路线的计算大多基于景点之间路线的流行程度,并未考虑景点本身的流行程度,从而忽略了访问景点所带来的收益.通过体验式路线搜索得到的最优路线,在考虑景点本身流行程度的基础上,做到了路线中景点类别不重复,增强了旅游的体验性效果.此外,现有的关于路线搜索研究采用的数据通常为基于社交平台用户分享的旅游照片和GPS轨迹数据.随着基于位置的服务(LBS)的兴起,Gowalla和Foursquare等社交网站提供了“签到”服务,用户可以将当前访问地点与时间的信息展现在自己的主页上.一条签到数据的结构通常为〈UserID,Time,Longitude,Latitude,POI,Category〉.从上述结构可知,签到数据包含用户确切的时空位置信息.通过分析用户连续的签到数据,能够得到用户的日常行程以及连续访问两地的时间花费;分析某地的签到数据,还可以得出该地流行的景点;签到数据不仅包含了景点的空间信息,还包含了景点具有的类别特点Category.此外由文献[10]分析可知,大部分有效的连续两次签到的时间间隔都小于6h.基于以上特点,签到数据较适用于本文所研究的短时间体验式路线搜索.为了能够最大程度上满足用户的需求,现有景点大多包含多个类别特点,例如Foursquare网站对旧金山的Japantown景点的类别描述为{arts_entertainment,shop}.因此,为了能够在短时间内体验到多种类别特点,且要获得最大的收益,可能需要用户在不同的景点体验其中不同的类别特点.体验式路线搜索问题,目的是要找到一条最优的景点访问路线,所以可将问题映射到图上,即在图中寻找一条从指定结点出发、满足消耗限定与类别集合的最优路线.本文签到数据映射为图,签到的POI生成图的结点,两个结点如果有相同用户连续签到则生成一条边.图中根据查询结点的位置满足消耗限定与类别集合的路线数量通常较大,所以如何能够快速搜索出一条最优路线是个挑战性问题.解决类似问题的方法如文献[7]中提出的贪心算法和OSScaling算法等,均为近似算法,不能获得问题的精确解.所以为了获得准确的最优路线,需要设计高效的搜索算法.一种简单的解决方法为,遍历图中满足时间约束的所有可行路线,根据用户提出的类别集合计算路线收益,最终确定可获最大收益的访问路线.随着景点个数与景点之间边数的增加,可行路线数会呈指数增长.所以该方法不仅效率低,而且伸缩性差.为解决上述问题,本文提出预计算收益上界搜索策略.该策略为,通过预计算结点收益的上界值,将这些值存储在结点中,用于计算经过当前结点所有路线的收益上界值.若该上界值小于当前获得的最优路线的收益值,则说明从当前结点不会得到最优路线.因此,可以在该结点停止搜索.基于这种策略本文提出了单收益上界剪枝搜索算法与多收益上界剪枝搜索算法,大范围地减少了对可行路线的判别,快速得到满足要求的最大收益路线.单收益上界剪枝搜索算法采用分支限界法的思想,较早地得到一条收益较大的路线.在搜索过程中不仅通过判别结点最小邻接边权值减去不满足时间约束的子树,而且在对结点进行扩展时,利用结点中提前存储的结点各类收益上界值来计算路线收益上界值,产生①②③Page3剪枝条件来减小搜索空间,加快搜索过程.多收益上界剪枝搜索算法在单收益上界剪枝搜索算法的基础上,动态选用结点各类收益上界值来计算路线的最小收益上界值,进一步提高对最优路线搜索的效率.综上所述,本文的主要贡献如下:(1)提出了一种新的路线搜索———短时间体验式路线搜索,可用于基于位置的服务领域,给出了该问题的形式化定义;(2)提出两种优化算法,包括单收益上界剪枝搜索算法与多收益上界剪枝搜索算法,提高了搜索效率;(3)运用Gowalla和Foursquare两个社交网站真实的签到数据集,对文中所提出算法进行充分实验研究,对比了提出算法的搜索效率,验证了算法的有效性.本文第2节综述相关研究工作;第3节定义体验式路线搜索问题;第4节给出解决问题的有效算法;第5节给出实验结果及分析;第6节为结论与展望.2相关工作近些年出现大量有关旅游路线推荐和搜索的相关研究,通常有以下3种:通过分析社交网站上用户分享的旅游照片来推荐旅游路线[2-3,5,7,11-12];通过GPS轨迹来挖掘流行的旅游地点和线路[13-17];运用人们日常生活中分享的签到记录,为用户提供基于位置的路线搜索[8,18-19].文献[5]将Markov与Topic模型进行合并,得到用户对于该主题下景点的访问概率,求得Top-k个满足用户兴趣以及时间约束的旅游路线.文献[11]充分利用照片数据中的Tags和Titles,在此基础上得到了不同旅游主题类别的频繁访问模式.文献[12]运用多样化排序算法将推荐的路线进行多样化的排序,使得推荐的路线之间差异性尽量大,涵盖的景点尽量丰富,能够最大程度地满足不同旅行者的需求.文献[7]提出了KOR问题,即在满足用户提出的关键字与消耗约束的基础上搜索一条最流行的路线.运用了近似算法OSScaling、BucketBound以及贪心算法来解决此问题.通过以上研究推荐的路线并未考虑景点类别的丰富性.而体验式路线搜索,在考虑了用户的查询位置和对旅行时间限定的基础上,得到的最优路线满足景点类别不重复的需求.伴随着GPS移动定位系统的发展,通过GPS轨迹数据挖掘出最优路线,成为又一个研究热点.在文献[13]中,运用CoherenceExpanding算法构建中间转移网络,运用AbsorbingMarkovChain模型与MaximumProbabilityProduct算法在转移网络中寻找概率最大的路径.文献[14]中,Chen等人运用k-BCT查询和IKNN等算法,给出了k条能够很好地贯穿用户指定地点的轨迹.Cong等人在文献[15]提出了一种BCK-tree索引技术,快速地搜寻到满足所有关键字的最短路径.文献[16]采用基于熵的方法对时间进行分割,运用两阶段路线算法,得出在不同时间下最快的行驶路线.文献[17]运用RICK参考框架,考虑给定的时间间隔的基础上构建出一条最流行的线路,主要解决了在GPS轨迹数据比较稀疏的情况下,如何还原出具体路线的问题.运用GPS轨迹数据搜索出的最优路线,通常是基于景点之间路线的流行程度,而本文体验式路线搜索,对最优路线的计算考虑的是景点本身的流行程度,即景点收益值,更加符合用户希望体验景点价值的需求.基于签到数据进行路线推荐是近年来基于位置服务中一个比较流行的研究领域.文献[8]提出了时间敏感访问路线概念,将Kullback-LeiblerDiver-gence与高斯分布相结合,求得较好的景点访问时间以及景点之间的转移时间.文献[18]依照用户的访问历史、用户的社交网络圈以及所访问过地点的实际位置信息,做出合理的访问地点推荐.文献[19]从连续的签到地点构成的路线中挖掘出频繁的访问模式,根据用户需求推荐分数最高的访问路线.本文运用签到数据中包含地点类别信息这一特点,通过确定景点中不同类别特点的收益,使搜索到的路线中各类别收益之和最大化.与上述工作相比,本文提出的体验式路线搜索,适用于用户无明确目的地时,结合其提出的时间限定和类别集合,考虑景点流行程度的情况,搜索到的线路能使用户在短时间内体验尽量多类别的景点且类别收益和最大,使得体验效果达到最佳.3问题定义给定有向带权图G=(V,E)包括了结点集合V和边的集合E,EV×V.如图1所示,图中每个结点v∈V代表一个景点,结点总个数为n,每条有向边(vi,vj)代表两景点之间的一条可行路线,边的数目为|E|,边上的权值代表访问该两点所花费的总时间代价,用b(vi,vj)表示.一条景点访问路线可表示为R=(v0,v1,v2,…,vn).任一结点v∈V的邻接点的集合为nb(v)={u(v,u)∈E},表示与该景点Page4存在可行路线的其它景点,结点v的出度数为d(v)=|nb(v)|,结点v最小的邻接边的权值为md(v).定义1.结点类别属性.给定有向带权图G(V,E),每一个结点v∈V,v=(ID,C),ID代表该结点的编号,C代表该结点v的类别属性,定义为其中ci表示该结点具有ci类别节点,pci表示该节点的收益,即该节点的流行程度,pci的度量参考文献[2]中计算景点流行程度的方法.若结点类别属性包含两个或两个以上类别特点,称该结点具有多类别属性.若结点包含的类别属性具有双层结构,则其表示为C={〈cij,pcij〉,…,〈ckj,pckj〉},其中cij表示该结点具有cij类别特点,cij∈ci,pcij表示该节点的收益.若类别属性具有多层结构,其表示方法以此类推.本文采用当前最大基于位置服务的在线网站Foursquare的位置点分类方法,描述景点具有的类别特点.通常分为8类,记为A={arts_entertainment(c1),shops(c2),food(c3),nightlife(c4),travel(c5),education(c6),parks_outdoors(c7),building(c8)}.以图1为例,v0~v6结点具有多类别属性,v0.C=(〈c1,0.15〉,〈c2,0.40〉),说明该结点表示的景点具有arts_entertainment与shops类别特点,流行程度分别为0.15、0.40,可知该景点主要以休闲娱乐为主.因为本文采用签到数据,所以无法分别准确测算出在每个景点花费的停留时间与两地的路上花费时间,因此根据签到数据中连续两个景点签到的时间间隔来代表访问这两个景点的总时间代价,所以在图G中,两结点之间边的权值b(vi,vj)为数据集中该两点所有连续签到记录的时间间隔平均值.本文假设访问某景点的一个类别特点与多个类别特点所花费的时间是相同的.所以图中边的权值与访问结点类别属性的数量无关.定义2.体验式路线搜索查询.Q=〈vs,t,uc〉,vs代表用户起始出发点,t代表用户设定的最大访问时间约束,uc代表用户提出的类别集合,例如uc={c1,c2},uc.e为类别集合的大小.定义3.路线收益与路线消耗.在图G中,根据用户发出的体验式路线搜索查询Q=〈vs,t,uc〉,得到一条可行路线R=(vi,vj,…,vn).路线收益为其中max(R,ci)代表路线R中,包含ci类别特点的所有结点中收益最大值,且ci∈uc,其余节点不参与计算.如果提出的类别在这条路线中不存在,则其值为0.例如图1中,用户发出一条查询Q=〈v2,4,{c1,c2,c3}〉,其中一条可行路线R=(v2,v1,v5),路线上共有4个类别:c1,c2,c3,c5,max(R,c1)=0.3,max(R,c2)=0.32,max(R,c3)=0.34,max(R,c5)=0.23,W(R)=0.3+0.32+0.34=0.96,max(R,c5)不参与运算.路线消耗为B(R)=b(2,1)+b(1,5)=4.例如上例中景点访问路线R=(v2,v1,v5),问题1.体验式路线搜索.依据图G、体验式路线搜索查询Q=〈vs,t,uc〉,体验式路线为:符合Q,满足B(R)t的所有路线中,能获得最大收益的路线,记为Rmax,Rmax.q表示最大收益值,即Rmax.q=max(W(R)).上例中,用户发出一条查询Q=〈v2,4,{c1,c2,c3}〉,通过计算得到Rmax=R(v2,v0,v3),Rmax.q=1.03.本文为了强调短时间内体验不同类别的景点,突出访问路线中景点之间属性特点的差异性,采用8种类别来描述景点具有的属性特点.针对Foursquare的位置点分类方法具有多层次结构特点,本文提出的结点存储结构与相应的搜索算法同样适用于不同粒度的类别选择情境.4SERS搜索处理本节研究处理SERS搜索的算法,4.1节介绍处理该问题的基本算法BSL,4.2节介绍基于预计算收益上界的搜索策略,提出单收益上界剪枝搜索算法和多收益上界剪枝搜索算法,并分析它们的处理过程.4.1基本算法BSL一种简单的解决体验式路线搜索的方法为,在Page5图G中,通过遍历满足Q=〈vs,t,uc〉查询的所有可行路线,比较路线的收益值,最终确定最大收益访问路线.算法1描述了基本算法BSL的细节.步骤5中,当已花费时间tt时,对过程Count进行调用,如过程1所示,计算路线的收益值,否则将该结点放入栈V中,递归调用BSL,直到遍历完所有nb(vs)为止.最终输出最大收益路线Rmax及最大收益值Rmax.q.算法1.BaselineAlgorithm(BSL).输入:有向带权图G,Q=〈vs,t,uc〉输出:Vmax中存储的最大收益路线Rmax及qmax中存储的1.初始化栈V,Vmax;2.已花费时间t=0;当前最大收益qmax=0;3.FORnb(vs)中的每个结点vjDO4.t=t+b(vs,vj);//消耗时间的累加5.IF(tt)6.Count(V,uc);//计算权值7.ELSE8.V.push(vj);9.BaselineAlgorithm(G,Q=〈vj,t,uc〉).在过程1中,步骤3~11对V中存储的所有结点的类别属性进行判别,将不同类别的收益值放入不同的数组中,N为所有景点类别总数,由上文可知N=|A|=8,步骤12根据uc对指定类别数组按权值从大到小进行排序.步骤13将各数组中最大值进行相加得到W(R),如果W(R)>qmax,则更改qmax=W(R).过程1.Count(V,uc).1.初始化数组p1,p2,…,pN;2.k1=k2=…=kN=0;W(R)=0;i=j=0;3.FORV中的每个结点DO4.FORV[i].CDO5.SWITCH(V[i].C[j])6.CASEc1:p1[k1++]=V[i].C[j].p;7.BREAK;8.CASEc2:p2[k2++]=V[i].C[j].p;9.BREAK;10.CASEcN:pN[kN++]=V[i].C[j].p;11.BREAK;12.依照uc对满足要求的数组进行排序;13.W(R)=满足要求的数组的最大值进行相加;14.IF(W(R)>qmax)15.Vmax=V;16.qmax=W(R).BSL算法通过遍历所有可行路线,最终确定收益最大的景点访问路线.在图G中,所有结点权值最小的邻接边的值为m=min{md(v)},则最长路径深度为L=t/m,所有结点出度最大值为D=max{d(v)},则找到满足要求的所有路线的最多访问结点数为DL-1为O(1),则BSL算法的时间复杂度为O(DL-1).时间复杂度随着t的增加呈指数次幂增长,随着d(v)增加时间复杂度也会急剧增长.所以该方法不仅效率低,而且伸缩性差.4.2优化算法为解决BSL算法的不足,本文提出一种基于预计算收益上界的搜索策略.基于这种策略,提出两种优化算法,分别为:单收益上界剪枝搜索算法(SUB)和多收益上界剪枝搜索算法(MUB).在搜索过程中SUB与MUB算法不仅利用图中结点的邻接边最小权值减去不满足时间约束的子树,而且利用存储在结点中提前生成的结点各类收益上界值来计算经过当前结点的所有路线的收益上界值,产生剪枝条件,减小搜索空间.4.2.1基于预计算收益上界的搜索策略SERS搜索是在图中找到一条最优路线的过程.在搜索的过程中,对当前结点进行扩展时,如果能得到经过当前结点所有路线的收益上界值,且该上界值小于当前获得的最优路线的收益值,则说明从当前结点不会得到最优路线.因此,可以在该结点停止搜索.通过预计算结点收益的上界值,将这些值存储在结点中,用于计算经过当前结点所有路线的收益上界值.图2(a)给出了结点存储结构,图中ID表示结点编号,C是该结点类别属性,用一个列表存储该结点的所有类别及收益值.在结点中用一个列表τ存储N个类的收益上界值pτ-c1,pτ-c2,…,pτ-cN,其中,pτ-ci为时间约束τ下ci类可获得的收益上界值,ci∈A.文中类别总数|A|=8,所以每个结点需要存储8个收益值.定义4.路线收益上界值.给定Q=〈vs,t,uc〉,此时扩展结点为v,lci为当前路径满足uc的各类别Page6最大收益值,则经过当前结点所有路线的收益上界值由式(4)计算.由定义4可知,在运用结点各类最大收益值来计算路线收益上界时,一定要保证τt.由于本文强调短时性,所以t的取值通常为[0,10],则τ通常取10.定理1.在图G中,给定Q=〈vs,t,uc〉,qmax为当前寻找到的可行路线中收益最大路线的收益值,t为当前路径已花费时间,当结点v为扩展结点时,如果Wv(R)qmax,则停止搜索v的子树,不会丢失结果.证明.当访问到结点v时,此时剩余时间r=t-t,如果Wv(R)qmax,说明从结点v出发,在剩余时间为r时,不能获得更大收益的路线,即不能获得问题最优解,因此可停止搜索v的子树,即对其子树进行剪枝,提高访问效率.定理2.如果存在tτi<τj,那pτi-cipτj-ci,ci∈A.证明.从结点v出发在时间约束为τ时可以访问到的结点集合为N(v,τ),因为τi<τj,所以N(v,τi)N(v,τj),根据结点各类收益上界值的定义,可得pτi-cipτj-ci.由定理2可知,在运用结点各类收益上界值来计算路线收益上界时,一定要保证τt,但是τ过大会使收益上界值过大,不利于剪枝操作.为了适应不同t,需要不同τ,构成时间约束集合Y={τ1,τ2,…,τk}.在图2(a)所示单收益上界结点结构基础上,我们设图3图1的状态空间树计了多收益上界的结点结构,如图2(b)所示.结点保存了k个列表,分别对应k个时间约束值,满足τ1<τ2<…<τk.由于t通常为[0,10],则可设两级结构为τ1=5,τ2=10.多上界值使用方法是根据时间约束t,从Y中选择不小于t的最小值所对应的结点各类最大收益值,来计算路线收益上界值,称此上界值为路线最小收益上界值,表示为Wmin-v(R).例如图3为图1中vs=v2,uc={c1,c2,c3},每个结点提前存储τ1=5,τ2=10,各类别的两个收益上界值的状态空间树.用户发出查询Q=〈v2,4,{c1,c2,c3}〉,t=4,t<τ1,为了得到路线最小收益上界值,采用τ1时各类收益上界值来计算.当v3成为扩展结点时,此时qmax=1.03,v3.pτ1-c1=0.10,v3.pτ1-c2=0.34,v3.pτ1-c3=0.35,此时lc1=0.30,lc2=0.00,lc3=0.31,所以Wmin-v3(R)=0.30+0.34+0.35=0.99.Wmin-v3(R)<qmax.利用定理1的剪枝条件,可以停止搜索v3的子树.若此时采用τ2时各类收益上界值来计算路线收益上界值,Wv3(R)=1.05.Wv3(R)>qmax,需要继续搜索v3的子树,未达到最优剪枝效果.4.2.2单收益上界剪枝搜索算法SUB我们利用预计算图中各结点的单收益上界值,采用图2(a)所示的结点结构,设计了一种基于分支限界的优化算法SUB.在搜索过程中,选择下一个扩展结点时,计算当前收益值,选择一个收益值最大结点作为扩展结点,以便快速得到收益值较大的访问路线.算法SUB的具体执行过程如算法2所示.Page7算法2.SUB.输入:有向带权图G,Q=〈vs,t,uc〉输出:Vmax中存储的最大收益路线Rmax及qmax中存储的1.初始化最大堆H,栈V,Vmax;2.t=0,当前最大收益qmax=0,vt存储H中优先级3.FORnb(vs)中每个结点vjDO4.IF(b(vs,vj)+tt)5.H.push(vj);6.WHILE(H!=Null)7.vt=pop(H);8.t=t+b(vs,vt);9.IF(tt)10.Count(V,uc);11.ELSE12.IF(Wv(R)>qmax)//剪枝判定13.V.push(vj);14.IF(md(vj)+tt)//时间约束15.算法2中,H为最大堆,表示活结点优先对列,优先级是当前收益值.步骤7,取出H中优先级最高结点进行扩展.步骤12,利用结点中各类收益上界值,确定路线收益上界值.与算法BSL相同,算法SUB同样是在图G中找到可行路线进行判别,最终确定收益最大的访问路线.但不同的是,在搜索过程中,算法SUB并没有遍历G中所有的满足时间约束t的可行路线,而是利用定理1的剪枝条件(见算法2步骤12)剪切掉不能产生最大收益值的子树,减小搜索空间.4.2.3多收益上界剪枝搜索算法MUB一种基于分支限界的优化算法MUB.在SUB算法的基础上我们发现,随着访问的进行,剩余时间r是逐渐减小的,可以根据r的值来动态选用结点各类收益上界值,从而得到路线最小收益上界值.例如,每个结点提前存储时间约束为τ1=5,τ2=10时各类收益上界值,当t=6,r=6时,选用时间约束为τ2时各类收益上界值计算路线最小收益上界值,但是当r=4时,应该选用时间约束τ1来计算路线最小收益上界值,从而进一步减小搜索空间,加快对最优解的搜索.算法MUB的具体执行过程如算法3所示.利用预计算图中各结点的多收益上界值,设计算法3.MUB.输入:有向带权图G,Q=〈vs,t,uc〉输出:Vmax中存储的最大收益路线Rmax及qmax中存储的1.初始化最大堆H,栈V,Vmax;2.t=0,当前最大收益qmax=0,vt存储H中优先级最3.FORnb(vs)中每个结点vjDO4.IF(b(vs,vj)+tt)5.H.push(vj);6.WHILE(H!=Null)7.vt=pop(H);8.t=t+b(vs,vt);9.IF(tt)10.Count(V,uc);11.ELSE12.r=t-t;13.τ选取r的最小值;14.IF(Wmin-v(R)>qmax)//剪枝判定15.V.push(vj);16.IF(md(vj)+tt)//时间约束17.MUB(G,Q=〈vj,t,uc〉).算法3中,步骤12~14,按照剩余时间r来动态选用结点各类收益上界值,从而确定路线最小收益上界值.例如图3所示,用户发出查询为〈v2,6,{c1,c2,c3}〉,首先得到一条收益较大路线R(v2,v0,v3,v5),W(R)=0.3+0.4+0.34=1.04,即qmax=1.04.因为τ1<t<τ2,所以当v3成为扩展结点时,如果采用时间约束为τ2时各类收益上界来求路线上界值,则Wv3(R)=1.05>qmax,需要继续访问结点的子树,使其子结点加入到最大堆中,但是最终判别是不能大于当前最大值的.我们注意到,在v3成为扩展结点时,剩余时间r<5,所以这时采用时间约束为τ1时各类收益上界值来求路线最小收益上界值,此时Wmin-v3(R)=0.99<qmax,可以减去结点子树,从而减少结点访问次数与算法递归次数.因此,MUB算法具有更好的剪枝效果.4.2.4算法评价分析由3.1节可知BSL算法需要遍历图中所有的可行路线,在图G中,所有结点权值最小的邻接边的值为m=min{md(v)},则最长路径深度为L=t/m,所有结点出度最大值为D=max{d(v)},时间复杂度为O(DL-1),时间花费随着t的增加呈指数次幂增长.在BSL的基础上,我们引入路线最小收益上界值Wmin-v(R),用于剪去不含最优解的子树.虽然在改进后算法的时间复杂度仍然为O(DL-1),并且为了求出Wmin-v(R)需要存储不同时间约束下的结点各类收益上界值,这样会增大空间的开销,但是加入Wmin-v(R)后,在平均情况下算法检查的结点数目、递归的次数、计算时间呈指数级别减少.所以,优化算法是以空间换时间的典型案例.Page85实验结果与分析本节我们对所提出BSL算法、SUB算法和MUB算法在搜索效率上进行对比.所有算法均由C语言编程实现,实验在PC机上执行,处理器为IntelCPUP87002.80GHz,主存为3.0GB,操作系统为WindowXPPro.5.1实验数据实验中采用Gowalla和Foursquare社交网站真实的签到数据集.本文选取Gowalla数据集中美国旧金山市从2009年3月到2010年10月的155254条签到记录.我们对数据进行预处理,除去虚假数据,过滤掉低于10次签到的地点,得到了3545个地点.图4为3545个地点的签到次数的统计柱状图.3545个地点共签到133151次,平均地点的签到次数为37.56次.利用Foursquare签到数据集中对每个地点类别的描述,再参考文献[2]中基于类别来计算景点流行程度的方法,来确定3545个地点中每个地点包含的类别以及类别的收益值.如果两次签到在同一天并且时间间隔超过1h,我们就认为这两点之间的这条路线是有意义的,在两点之间构造一条有向边,边的权值取该路线所有记录的平均值.得到15607条有向边,边的权值平均为3.12h.其中3012个结点有出度,结点的平均出度数为5.18个,即从每个地点出发可有5个左右的地点进行下一步选择,图5为各地点出度数(d(v))统计.5.2效率对比实验本节针对问题的相关参数进行实验分析,对各算法的效率进行了比较.由图5可知,各结点出度数相差很大,大的出度甚至超过了100,这样的大图会增加运行开销,同时不利于BSL算法的进行.所以,通过控制结点出度数来缩小图的尺寸,如表1所示,为5个有向图的参数对比.表15个有向图结点最大度数、结点数、边数图号d(v)nG1G2G3G4G5图6为3种算法在不同尺寸的图上搜索效率方面的表现.其中,参数设置为t=6,uc={c1,c2,c3},Y={τ1,τ2},τ1=5,τ2=10.从图6为我们可以看出,n相同的情况下,d(v)不同,|E|不同,运行时间不同.因为d(v)的增加,可行路线数会相应的增加,造成运行时间的增加.图6(a)所示,算法SUB比BSL的访问结点数减少了约35%,而算法MUB则减少了68%.图6(b)中显示了算法的运行时间,与图6(a)中算法的结点访问数相一致.与BSL相比,算法MUB运行时间平均缩短1倍.实验表明,通过剪枝操作,较大地提高了搜索最优路线的运行效率.MUB算法通过动态确定结点各类最小阈值,搜索效率进一步提高.除了限定d(v)来缩小图的尺寸之外,还可将大图根据结点位置拆分成一系列小尺寸子图.根据查询位置,在不同的子图上进行搜索,减少算法的运行开销,提高搜索的效率,这里不再进行详细讨论.图7为通过改变uc.e,即改变用户提供景点类别集合的大小,来比较3种算法的运行效率.其中,参数设置为G2,t=6,Y={τ1,τ2},τ1=5,τ2=10.从图7(a)、(b)可以看出,uc.e的改变对3种算法性能影响较小,3种算法访问结点个数没有改变,因为判别可行路线的条数没有改变,3种算法运行时间略有上升,原因是uc.e增加时,要进行更多的类别排序以及略复杂的收益计算.图8为通过变化t,即用户提出最大时间限定,来比较3种算法的运行效率.其中,参数设置为G2,uc={c1,c2,c3},Y={τ1,τ2},τ1=5,τ2=10.从图8(a)、(b)可以看出,算法访问结点数与算法运行时间Page9图7类别集合大小uc.e对算法性能的影响图8最大访问时间约束t对算法性能的影响的趋势基本一致.随着t的改变,访问结点个数与运行时间都呈指数次幂增长,同3.1节中分析一致.SUB与MUB算法利用了剪枝条件,缩小了查询范围,提高了运行效率.MUB算法在此具有最高性能.图9显示了改变结点时间约束集合Y,3种算法运行效率的变化.其中,参数设置为G2,t=6,uc={c1,c2,c3}.从图中可知,时间范围一定的情况下,时间分割粒度越细,优化算法效果越好.因为粒度越小,结点最小上界值越小,剪枝效果越好.但是需要增加结点的存储空间.为了增强实验效果,体现用户查询的随机性,我们在G2图中随机选取5个不同的查询位置,比较3种算法的运行效率,如图10所示,其中,参数设置为G2,t=6,uc={c1,c2,c3},Y={τ1,τ2},τ1=5,τ2=10.从图10可看出,不同查询点,两个优化算法运行效率都优于BSL,图10(a)中算法SUB比BSL的访问结点数平均减少了约36%,算法MUB则减少了47%.图10(b)中,与算法BSL相比,SUB算法平均缩短65%的运行时间,算法MUB获得了平均1.13倍的加速比.针对真实数据集的效率实验表明,SUB算法与Page10MUB算法在各种参数设置下运行效率均优于BSL算法,由于MUB算法动态选用结点各类收益上界值,剪枝效果优于SUB算法.综上,MUB算法具有最高的性能.6结论与展望本文提出一种新的路线搜索:体验式路线搜索,该路线搜索方法可为用户推荐一条短时间内快速体验该地不同类别景点的最优路线.为解决可行路线数目过多的问题,本文提出基于预计算收益上界搜索策略的两种剪枝优化算法:SUB算法和MUB算法.SUB算法采用分支限界法的思想,较早地得到一条收益较大的路线,通过运用提前求出的结点各类收益上界值求出路线收益上界值,作为剪枝条件,减少结点访问数目,从而减少对可行路线的判别数目.MUB算法在SUB算法的基础上,根据剩余时间动态选用结点各类收益上界值,进一步提高了搜索效率.本文利用真实数据集进行了搜索效率对比.实验表明,所提出的MUB算法具有最高的搜索效率.考虑到部分景点不同时间段流行程度不同这一事实,在将来的工作中我们要将时间因素加入到对景点收益的度量当中,并且根据不同的时间选择不同的类别,使得搜索到的体验式路线更加准确、更好地体现基于位置服务的特点.
