Page1一个通用最优的动态网络构建框架袁野1),2)王国仁1),2)郭得科3)1)(东北大学信息科学与工程学院沈阳110004)2)(医学影像计算教育部重点实验室(东北大学)沈阳110004)3)(国防科学技术大学信息与管理学院信息系统工程国家重点实验室长沙410073)摘要覆盖网络的拓扑特性对P2P系统的性能至关重要.现有的覆盖网络大多基于静态互联网络,因为互联网络在静态环境下表现出良好的拓扑特性.Moore下界给出这些静态网络的直径和结点度数的最佳折中理论值,但由于动态变化的网络,Moore下界不适合现存P2P系统.为此,该文根据现有P2P系统的特点,给出在高度动态环境下新的网络直径和路由平均距离的下界.现有系统的路由性能不能超越此下界,因为它们不能很好地适应高度动态的网络———这一P2P系统最重要的特点.另外已被提出的覆盖网络都针对其相应静态结构有不同的维护机制,并没有统一的构建方法.为解决上述问题,该文提出了动态Trie树结构这一通用框架,任何静态互联网络都可以基于该框架构造出新的P2P系统,同时此通用框架又包含了一系列最优的设计策略.根据该构造方法,文章采用deBruijn和Butterfly图构建出两个新P2P系统,并且它们的性能可以超越文中给出的下界.经少许修改,构建deBruijn和Butterfly的方法也可应用到其它互联网络如Hypercube、Kautz、Shuffle-exchange和CCC等.关键词P2P;互联网络;下界;动态网络;路由1引言随着P2P系统大量的涌现,它已经成为继In-ternet网之后信息系统的又一主要基础架构.在Napster和Gnutella等[1]集中式和无结构P2P网络出现之后,为取得更好的可扩展性、查询准确性和高效的路由,大量基于分布式Hash表(DHT)的结构化网络相继出现[2-4].两个最重要的参数决定了结构化P2P网络的性能和质量:(1)结点度数:结点路由表的大小.(2)网络直径:一个查询在网络里执行的最长路由跳数(hop).早期的结构化网络如基于Hypercube的Chord[3]和Pastry[4],它们的网络直径和结点度数都随着结点数目(n)的增加而以对数比例增长.这些系统在发布和查询资源时需执行logn跳数,它们通常具有较大的维护代价和较差的扩展性.为解决上述问题,一些基于常数度互联网络的P2P系统被提出,例如基于Butterfly的Viceroy[5]和Ulysses[6];基于CCC的Cycloid[7];基于d维度Torus的CAN[2];基于debruijn的D2B[8]、Koorde[9]和ODRI[10];基于Kautz的FissionE[11]和Moore[12].这些网络的直径在结点度数不变的情况下随网络规模以对数比例变化,表现出良好的可扩展性.Moore下界给出任何静态图的结点度数和直径的最佳折中理论值.但由于P2P系统的动态特性,Moore下界不能很好地给予P2P网络理论指引.deBruijn和Kautz图是直径最接近Moore下界的互联网络结构,但基于它们的P2P系统,如D2B、Koorde和FissionE的直径远大于Moore下界.其它一些系统如Pastry、Viceroy和Cycloid也远比它们相应的静态网络性能差得多.主要原因在于现有系统不能很好地适应动态环境,这些网络通常只有在它们的直径和结点度数决定的网络规模下,才能表现出良好性能,但这对动态的P2P系统是不实际的.因此本文根据P2P网络动态的特性,为现有系统计算出新的网络直径和查询平均距离的下界.Kademlia[13]系统使用XOR技术来解决动态问题,但它只在Pastry系统上实现了该方法,并且系统具有较高的维护代价.Zhang等人[14]用DistributedLineGraphs技术来解决任何常数度拓扑的动态构造问题,但该方法实际只适用于Kautz和deBruijn,并不适用于Butterfly、CCC和Hypercube等结构.为了支持任何互联结构的动态构造,本文提出了一通用构建框架-基于动态Trie树的构造模型,基于该框架,任何静态拓扑都可以构造出P2P系统,并且这些系统的直径和平均距离可以超越本文给出的下界.同时该构造方法也包含了一系列最优设计来优化系统的性能.2相关工作Moore下界是任何图直径的下界,它的理论值由文献[15]给出:dmlogk(n(k-1)+1)-1.另一个衡量网络路由效率的参数是图的平均距离,任何k-正则图的平均距离下界是[16]:davgdm-k(kdm-1)一个度数和直径为d和k的deBruijn图[8]含有dk个结点,其中边的连接规则是从结点u=x1x2…xk到结点v=x2…xkxk+1连接一条有向边.包含kdk个结点的Butterfly结构也是有向图,其中它的直径和结点度数分别是2k-1和d.当i≠k-1时,有向边从结点(x0x1…xk-1;i)连接到标识为(x0…xi,y,xi+2…xk-1;i+1)的结点,否则连接到结点(y,x1…xk-1;0).图1和图2分别给出deBruijn和Butterfly结构示例.Page3图2结点度数为2直径为5的Butterfly图基于deBruijn图的系统如D2B[8]和Koorde[9],基于Butterfly的系统如Viceroy[5]和Ulysses[6]都给出解决动态网络问题的方法,但同时也带来了网络拓扑变形、维护代价高昂和结点度数分布倾斜等问题,这些变化都会严重影响网络的性能.本文将给出解决动态环境问题的通用方法,同时将额外的代价降到最低,以保证系统高效的运行.3动态网络路由延迟下界众所周知,Moore下界给出任何图的直径下界,但它只适合描述静态拓扑.对于动态网络,它的值太小,不适合描述P2P网络.因此本节给出在动态环境下,现有P2P网络查询延迟的下界.为计算新下界,考虑一颗d叉Trie树,它也可被看作路由树.对于静态网络,从树根开始在h跳内,最多可达n-1个结点,因此满足d+d2+…+dhn-1,从此式便可推出Moore下界.但在动态网络里,第i跳(1ih)最多可达结点不一定是di了,也可看成路由树的每层不再是满叉的.为了模拟动态网络,考虑一个标识符前缀为x的结点随机地加入和离开Trie树.加入时从根结点开始,从d个孩子中找到一个与x向前最匹配的结点,并路由到该结点;接下去每一层都按照此规则路由,直到该结点路由到一个叶子结点,此叶子结点和x具有最长的公共前缀;最后该结点成为此叶子结点的孩子,加入到Trie树中.随机离开的过程和加入的过程恰好相反.这个动态过程是目前DHT的工作方式,因此可以用来模拟动态网络.对网络直径的下界,我们有如下定理.定理1.在概率1-o(1)的保证下,动态网络的直径下界(dmax)由如下等式给出证明.dmax可看作上述Trie树的最大高度,因此只需计算此高度.为此,需考虑结点离开的过程.这个过程等同于从最大高度开始一层层地砍掉叶子结点,这个过程与PatriciaTrie树结构的构造十分类似,因为PatriciaTrie树可看成是删除所有普通Trie树中只有一个孩子的中间结点后得到的结构.从文献[17]可以得到在概率1-o(1)的保证下,随机PatriciaTrie树的高度收敛于logdn+dlogd槡n-1.5.因此得到式(1)给出的下界.证毕.网络直径只是查询在最坏情况下的路由跳数,而查询平均距离更能衡量一个网络的路由性能.因此下面将给出动态网络的平均查询距离的下界.设h表示d叉Trie树的最小深度.Trie树由两部分构成,一部分是从根结点到h层,另一部分是由h+1层到dmax层的结点组成.很明显第1部分是一颗叉数为d的满叉树.同时设dx表示从根节结点到树任意结点的距离,接下来讨论dx对树两部分的概率分布情况.为计算第1部分的分布情况,我们定义一序列随机变量Ai,i0.其中当树的第i层是满的,有Ai=1,否则Ai=0.一层是满的表示该层的结点都存在,并且不是叶子结点.注意到对ih,如果有Ai=1,那么对所有k<i,可推出Ak=1.因此当dx至少是k+1时,所有的0~k层都需是满的,并且满足从式(2)可推出:P(dxk+1)=P(dxk)P(Ak|Ak-1)(3)其中P(dx0)=1并且P(Ak|Ak-1)是条件概率,表示如果第k层满,那么前0,…,k-1层都得是满的,因此有对于树的第1部分,有如下定理.引理1.在概率1-o(1)的保证下,dx的分布是exp-dkexp1证明.首先树的第1部分是h层的满叉树,并且该满叉树包括n(d-1)+1n(d-1)+1-dd(d-1)个非叶子结点.其次假设对于0~k-1层都是满的,那么就有dk-1到0,…,k-1层,并且还剩余n(d-1)+1-dd-1=n(d-1)+1-dk+1dk-1Page4入.在前k-1层已经被加满后,第k层每个位置被新结点加入的概率是d-k.这样我们的问题就等同于把u=n(d-1)+1-dk+1到m=dk个盒子里,要求每个盒子至少一个球的概率是多少.这个问题有很多种解法,其中文献[18]把它看做是经典的优惠券收集问题,下面将用到其中的结果.定义Z(u)是在u个球被放到m个盒子后剩下的非空盒子个数,因此有P(Ak|Ak-1)=P(Z(u)=m).由文献[18]知,P(Z(u)=m)=∑(-1j)(m/j)1-j()m因u很大,所以(1-j/m)u近似等于e-uj/m,因此式(5)可写成P(Z(u)=m)≈∑(-1j)(m/j)e-uj/m=1-e-u/m对于P2P系统,我们对较大的m=o(logdn)更感兴趣,因此上式又可写成P(Z(u)=m)≈e-me-u/m=因此从式(3)~式(7)得P(dxk+1)=P(dxk)P(Ak|Ak-1)≈从引理1知,在概率1-n-ε(ε1)的保证下有h=max(dx)=logdn-logd((1+ε)logn-o(loglogn))(8)对于dx到树第2部分的分布可以从文献[17]引理2.在概率1-o(1)的保证下,dx对PA-得到,因此有如下引理.TRICIATrie树的分布是其中ε=nd-k(0<ε<1),并且从dx到树两部分的分布,有如下定理.定理2.在概率1-n-ε(ε1)的保证下,动态证明.由上述结论可得,网络查询平均距离的下界是logdn+logdn/槡d.E(dx)=∑hk·exp-dkexp1∑h∑dmaxk·1+dεΦ(ε)+εdΦ(εk=0k=h+1logdn+logdn槡d.4动态网络通用构建框架任何互联网络具有良好的拓扑特性的条件是当且仅当它的所有结点都存在并且稳定,例如deBrui-jn和Butterfly结构要具有优良的拓扑特性需有dk和dkk个结点.但这种要求对以互联网络为基础的动态P2P系统是不现实的,为此本文提出了“动态多叉Trie树”来构建P2P系统,使其有良好的拓扑特性.4.1动态多叉Trie树定义1.动态d叉Trie树结构是一颗深度为k的树,每个结点至多有d个孩子结点.每个结点和其出边都被赋予唯一的标识符,结点的标识符是从根结点到其自身边标识符的叠加,并且边和结点的标识符满足如下规则:(1)根结点的出边被标识为xi1=i(0id-1),它的第i个孩子结点也被赋予标识符xi1=i,并且孩子结点从左至右地排列,根结点不包括任何标识符.(2)结点x1的出边标识为xi2=i(0id-1),它的第i个孩子结点被标识为x1xi2,并且从左至右排序.(3)结点x1x2…xk-1的出边标识为xik=i(0id-1),孩子结点标识为x1x2…xk-1xk,并且从左至右排序.(4)每个结点同时也指向其父亲,并且同层的结点构成一个环结构.在动态环境下,Trie树可能是不平衡的.平衡Tire树被定义为所有的叶子结点都在同一层,当叶子结点都存在时,树被称为完全Trie树.图3给出一颗高度为3的完全Trie树,当结点011失效,树变成不完全的,但是平衡的.如果结点010和011都失效,Tire树变成不平衡树.从Tire树定义可知,同层结点构成环结构,此环称之为Trie环.因此每个结点需连接其前驱和后Page5继结点以构成环.定义2.动态Trie树一结点的前驱是以顺时针方向沿Trie环第一个存在的结点,同理它的后继结点是以逆时针方向沿Trie环第一个存活的结点.从定义2看出,一个结点的前驱和后继可能不是在标识符空间中的邻居,因为动态网络不能保证所有邻居结点都存活.下面给出结点x1x2…xk确定其前驱的算法.算法1.Predecessor(x1x2…xk).1.结点x1x2…xk沿向上路径发送“确定前驱”消息,该消息直到发送到x1x2…xk,某个祖先x1x2…xi已经有前驱并且该祖先不是其父的第1个孩子为止.本节给出最优P2P网络的构建方法,使网络在2.结点x1x2…xi将消息转发给其前驱结点,接着该消息一直沿着最后一个向下链接被转发,直到结点x1x2…xk所在的层,并把该结点作为x1x2…xk的前驱.该算法的效率由如下定理给出.定理3.在概率1-o(1)的保证下,算法1的代价最多是dlogd槡n+0.5+logd((1+ε)logn-o(loglogn)).算法1给出确定结点前驱的步骤,同理也可以确定结点的后继Successor(x).4.2静态网络到Trie树的映射动态环境下保持静态互联网络的拓扑特性.4.2.1最优拓扑构建规则欲保持静态互联网络的拓扑特性,主要需解决P2P网络动态变化问题.为此本节给出基于Trie树的方法可使任何类型的互联网络结构都能被构建成高效的覆盖网络.对任意d-ary互联网络的一个结点x=x1x2…xk,σi(x)(1id),表示结点x的一个邻居,则基于动态d叉Trie树的构建规则如下:(1)如果结点σi(x)存在于覆盖网络,那么它是结点x的第i个邻居.(2)否则,如果结点σi(x)和它Trie树中前驱结点Predecessor(x)的标识符有共同长度为k-1的前缀,那么结点Predecessor(x)是结点x的第i个邻居,并且Predecessor(x)保留标识符σi(x)以代替结点σi(x).(3)否则,如果结点σi(x)和它Trie树中后继结点Successor(x)的标识符有共同长度为k-1的前缀,那么Successor(x)是结点x的第i个邻居,并且Successor(x)保留标识符σi(x)以代替结点σi(x).(4)否则最年轻存活的σi(x)祖先结点作为结点x的第i个邻居,并且该祖先保留标识符σi(x).该构建规则可保证互联网络结点在动态环境下一定能按其规则连接到它的邻居σi(x),并且保证在σi(x)不存在时,替代结点和σi(x)的标识符具有最大匹配,以保证路由算法以最小代价完成动态路由(路由算法将在后面介绍).例如将deBruijn图嵌入到图3所示的树中,按规则结点010连接100和101,如果结点100失效,010将连接到101.如果结点100和101都失效,其父结点10替代它们作为010的邻居.从该构建规则很容易得到如下定理.定理4.设一个基于上述构建规则的P2P系统的中间结点和叶子结点分别为x和y,可得如下结论:(1)当Trie树平衡时,结点x和y分别有2d+3和d+3个邻居.(2)当Trie树不平衡时,结点x和y分别至少有2d+1和d+1个邻居.在设计实际系统时,通常选取较大的参数d来保证系统有高效的路由和较好的连通性,但同时也增加了系统维护代价,反之亦然.因此参数d对系统性能有很大影响,选取一个最佳的参数值是一个折中问题.P2P系统执行的操作主要包括查询和更新,因此可以基于它们的操作代价计算出系统总的代价.设查询操作所占比例为λ(0λ1),更新操作比例为1-λ,则总代价为C=λA+(1-λ)B,其中A为查询代价,B为更新代价.它们的值可分别近似为logdn和d,因此有总代价,对该式求导得很容易利用牛顿迭代计算方法求得满足方程(10)中d的数值解.4.2.2最优资源放置策略资源放置策略对P2P系统至关重要,因为它直接影响动态路由的效率和正确性.现有的策略在网络高度震荡时并不能同时满足上述两个特性.本节将给出基于Trie树的资源放置策略,它能保证在大量结点失效时,接管其资源的结点标识符和该资源有最大匹配,以保证路由的正确和高效.设一资源为x=x1x2…xk…,它是根据某种Hash算法得到的,其标识符通常比它所在结点标识符要长.则放置规则如下:(1)如果结点x=x1x2…xk存活于P2P网络,则结点x存储资源x.Page6(2)否则,如果结点x和其前驱Predecessor(x)在Trie树上有共同的父亲,则结点Predecessor(x)存储资源x.(3)否则,如果结点x和其后继Successor(x)在Trie树上有共同的父亲,则结点Successor(x)存储资源x.(4)否则最年轻的x存活祖先结点存储资源x.根据构造和放置策略可看出,系统结点和动态Trie树结点是一一对应的,所有资源都放置在树叶子结点上,中间结点只作为路由结点.此策略和以往的方法不同(如文献[19]),它们都是把虚拟树结点以组为单位或以树枝为一个整体将虚拟树影射成覆盖网络.这样会使结点度数增大一个对数数量级,从而破坏了互联网络的基本特性,例如deBruijn结点的常数度,而本文的方法最大限度地保持了原有结构的特征.另外叶子的数量几乎是中间结点数目的(d-1)倍,因此叶子结点足够容纳系统发布的资源.如图3所示,资源100…存储在结点100,如果100失效,资源100…存储在结点101;如果结点100和101都失效,资源发布到它们父亲结点10上.传统P2P系统都是把所有资源发布到网络中,这样会带来大量维护代价,但减少发布的资源会使某些查询失效,为此本文接下来给出一个最优的折中方案.设G表示一结点pi存储的所有资源的数量,设aj表示第j个资源所占空间大小(以字节为单位).这里假设对资源j的成功查询概率qj已知,并有q1+q2+…qG=1.设yj是布尔变量,当结点pi存储资源j时,yj=1,否则yj=0.因此结点pi被成功查询的概率为P2P系统对资源的维护代价主要包括数据更新代价和检查代价,检查代价主要查看资源是否和本地数据一致,并且查看资源是否由于网络的变化而丢失.假设检查消息平均每T秒发送到结点pi,则检查代价可以近似为假设每秒有f个资源插入到结点Pi(或删除).此更新操作大约消耗Crefresh=flogdn代价.综上系统总的代价为另外结点所存资源的量需满足其存储能力,变量yj还需满足其中S是结点Pi的最大存储容量.对结点Pi应该最大化其成功查询概率,最小化网络维护代价,因此最优资源存储策略是多目标优化问题.根据实际P2P系统的特点,可以建立如下一个目标函数来求解,其中λ表示查询操作所占比例,(1-λ)是维护操作比例.可通过求式(13)的最大值来确定最优策略,由式(11)、式(13)得Cvirual=λlogdn∑G上述分析可得规划函数,本文用动态规划来求解式(14)的最优值,结合c1jG,0<iS(j,i){=maxC(j-1,i-aj)+我们设计一个递归程序来计算规划函数,在程序执行过程中,把变量yj的取值记录下来,从而得出最优资源存储策略.系统中任何结点都可以在本地完成该最优化求解,不需增加网络代价.4.3特例研究前面已给出基于互联网络的通用P2P系统构建方法,本节将以deBruijn和Butterfly结构为例基于上述方法构造出DPhoenix和BPhoenix两个新P2P系统,因为deBruijn代表了单协议的互联网络如Kautz、Hypercube和Shuffleexchange等,But-terfly可用来代表混合互联网络结构如CCC等.4.2节给出的网络拓扑构造规则是整个框架的核心,该方法可直接应用于deBruijn图.对Butter-fly结构(相关工作介绍了Butterfly结构),系统包含若干棵Trie树,第i棵树的结点x=(x0x1…xk-1;i)把第i+1棵树上结点σi(x)=(x0x1…xi,y,xi+2…xk-1;i+1)作为其邻居.由于P2P系统结点数目的动态性,第i+1棵树可能为空,此时结点x作为该树的树根.最优参数d的选取对DPhoenix和BPhoenix的拓扑性能很重要,此方法可以不经任何修改地应用到deBruijn和Butterfly结构上.同样,最优资源放置策略也可被DPhoenix和BPhoenix系统直接采纳.通过两系统的构造可看出本文的方法具有通Page7用性,构造deBruijn和Butterfly的方法可应用到其它互联网络结构.5系统的动态操作P2P系统是高度动态的网络,结点频繁地加入、离开和失败.这些动作对网络拓扑有很大影响,从而影响路由.因此对这些动作需健壮的处理方法,本节将给出基于动态Trie树系统的动态操作处理算法.5.1结点加入欲保证路由算法的正确性,结点必须加入到正确的位置,及时更新路由表入口项.同时也需以较低代价降低Trie树的倾斜度以平衡系统的负载.为满足上述需求,本文给出算法3.的邻居可以根据其父结点的路由表快速定位.算法2.Join(Peerx=x0x1…xk).1.加入结点首先通过Hash函数获得标识符x,之后路由到其标识符所在的位置.如果该位置有结点x(没有设其父结点为x)查看其邻居σi(x)是否至少包含两个标识符,则结点x路由到位置σi(x).重复此过程(x=σi(x))直到结点x的邻居σi(x)只包含一个标识符,那么结点分享x一个标识符并最后加入到该标识符所在位置.2.结点按拓扑构造规则连接其邻居,其中它互联网络新加入结点总是能选择Trie树低层空缺位置加入,因为构造规则使存活结点接管失败者时保存它们的标识符代替它们,这些多余的标识符揭示出系统的空缺,也标识出树的不平衡信息,加入结点一直沿这些连接找到最低层的空缺位置加入,从而降低树的不平衡性.例如在图3中(假设结点100和101失败,结点010连接到10),新结点0101欲成为010的孩子,发现它的邻居10存储了其它的标识符,则它会选择100或101的位置加入替代它们.算法步2根据其父结点快速定位互联网络邻居是有如下定理保证的.定理5.对于结点x和它的d个互联网络邻居σi(x),结点x后代的互联网络邻居也是结点σi(x)的后代.虽然加入过程是一个迭代过程,但代价也是较低的并由定理5给出.算法消耗的代价至多是定理6.在概率1-o(1)的保证下,结点加入5.2结点离开高效快速处理结点离开的方法可保证网络拓扑持久的连通性.如果叶子结点离开系统,它可以随时离开,其保存的资源根据资源放置规则重新分配给其邻居,这个过程并不影响系统的拓扑形状.但树的中间结点欲离开,此动作会给拓扑带来较大改变,算法4给出高效处理方法.对于有向互联网络,设(σi(x))-1表示结点x的入边,对无向网络有(σi(x))-1=σi(x).算法3.Departure(Peerx).1.结点x发送“替代”消息给它的一个后代叶子结点.如果该后代结点u至少包含两个标识符,则u将消息转发给其邻居(σi(u))-1,重复此过程(u=(σi(u))-1)直到结点u只包含一个标识符.最后结点u被用来代替结点x.由表更新x的d个(σi(x))-1邻居.2.更新结点xTrie树上邻居,并且根据结点x父亲路步1也像加入算法一样降低树的不平衡,“替代”消息会选择一个高层叶子结点来接替低层离开的中间结点.同时在步2中,也可以利用定理4给出的性质快速更新互联网络邻居.下面定理给出此算法的代价.定理7.在概率1-o(1)的保证下,结点x离开的代价至多是logdn+dlogd槡n-1.5-Length(x).P2P网络经常也有结点失败,本文也按传统的方法让结点周期地查看其邻居是否失效,一旦发现就按离开结点处理.这里不再单独给出结点失败的处理算法.5.3负载平衡从前面介绍的方法可看出用基于Trie树构建的P2P系统有很多优良特性,但动态的网络会造成树的不平衡从而影响系统性能.为此本节给出动态Tire树的负载平衡算法,本文以DPhoenix系统为例展示负载平衡算法.如图4所示,根据构造规则子树e的所有结点都会找到替代它们不存在邻居的结点,由定理4知,这些结点都会连接到结点c,当结点c过载时,它激发负载平衡算法.如同结点加入和离开算法所述,指向c的连接揭示了不平衡信息,结点c就是利用这Page8个信息来执行负载平衡算法,此时c存储了子树e所有信息.算法包含两步,第一步采用类似AVL树旋转的方法处理不平衡.首先结点c对子树e的所有结点按中序遍历排序得m,l,k,j,h,e,i.之后c开始按此顺序旋转子树,结点m替代l;l替代k;k替代j等等,最后结点e变成i的一个孩子,如图5(a)所示.用同样的中序遍历对该结构旋转得到如图5(b)所示结果.最后子树变成平衡树,图5(c)给出得到的平衡树.步2是自底向上地把平衡子树j的结点移给子树c,做为其后代结点,直到两颗树的叶子结点在整个Trie树的同一层为止.这个过程是结点m,k成为c的孩子;结点h,i成为m的孩子,最后的结果由图6给出.在算法执行过程中,数据移动代价较低,因为采用的旋转方法充分利用了系统拓扑的特性.对参与的结点需要花费o(logn)代价去路由和更新路由表,但此代价是可以接受的.由算法的步骤可看出,执行过程中不需要全局信息,也不需要整个系统都参与,只是某个结点过载时,它自己发起算法并在整个过程中控制所有参与结点,同时该算法并不很大程度地改变系统拓扑.以上这些特性对高度动态环境下的树结构是很必要的.5.4路由算法P2P系统里的消息包括3类:(1)发布或查找资源的消息.(2)维护网络拓扑的消息.(3)两结点之间的路由消息.为了正确并高效地路由上述3种消息,Trie树的每个结点需按本文给出的拓扑规则保持连接.但由于P2P网络的动态性和网络维护的延迟,拓扑不能始终按规则保持连接,这就要求路由算法具有容错特性.为满足上述需求,结合拓扑构造和资源放置的特点,本文设计了算法5用来支持高效容错的路由算法.其中x表示请求结点或当前结点,y是终点或资源标识符.case1:Length(x)=Length(y)or(yisaresourceandxis算法4.Route(x,y).if(x=y)thenreturnavailable.elseifComprefix(x,Successor(x))=k-1andSuc-cessor(x)islessthanyinthering,thenForwardthemessagetopeerSuccessor(x).elseifComprefix(x,Predecessor(x))=k-1andelsePeerxforwardsmessagetoitsneighborσi(x)amongalltheneighbors.case2:Length(x)<Length(y)or(yisaresourceandxisif(xcontainsy)thenreturnavailable.elseif(Peerxhasatleastonechild),thenForwardthemessagetoitschildzwhichhasthelargestvalueelsePeerxforwardsmessagetoitsneighborσi(x)amongalltheneighbors.case3:Length(x)>Length(y)if(xhasalinktoitsparent)thenPeerxforwardselsePeerxforwardsmessagetoitsneighborσi(x)amongalltheneighbors.对资源的查询该算法主要包括两步,首先消息从请求结点路由到同一层结点,该结点的标识符是资源y的前缀,其次查询消息沿向下路径路由到叶子结点去查找资源y.例如对DPhoenix系统,如图3所示,结点00欲查获资源111…,查询被沿路径00-01-11转发,接着路由到叶子结点111.算法支持Page9的资源查询和任意结点间的路由操作都有一共同特点:消息可以像在静态互联网络里路由一样,不必考虑网络拓扑的变化.因为拓扑构造方法保证一定会有结点替代失效或离开者并保存其标识符,同时资源放置策略也是按构造方法的规则处理资源的.这样就保证了路由的正确性,同时前面的一系列最优策略保证了路由的高效性,定理7给出了量化的路由效率.定理8.动态环境下,以概率1-o(1)为保证,系统DPhoenix和BPhoenix的最坏路由延迟(网络直径)分别是logdn和2logdn-1.6性能分析文本给出的所有算法都在我们开发的P2P模拟器上实现了,该模拟器和算法代码都用C++编写,实验的运行环境是奔腾IV3.0GHzCPU,2GB内存.我们在模拟器上实现了DPhoenix和BPhoe-nix系统,作为比较,基于deBruijn的Koorde系统和基于Butterfly的Viceroy系统也被在模拟器上实现.为公平比较,对d-ary的deBruijn和Butterfly的d值取4,这样所有系统结点度数都相同,同时每组实验网络包含256至1百万个结点,所有查询在网络里被随机且均匀地激发.本文所有实验都是在上述条件下进行的.6.1动态网络路由效率本节给出两组实验以检验网络在动态环境下的最大和平均路由延迟.在第1组实验中,为模拟动态网络,结点总数大约10%的结点被设置成加入和离开网络.最大路由跳数和平均路由跳数在此条件下被记录,同时第2节给出的最大查询延迟理论下界(dia-bound)和平均延迟下界(avg-bound)也在结果中给出,用来和实际系统的结果作以比较.图7给出第一组实验结果,图7(a)给出最大延迟,平均查询效率由图7(b)给出.从结果看出,DPhoenix的最大和平均延迟超越了下界,而BPhoenix的效率略大于理论下界,因为其内嵌结构Butterfly不像DPhoenix的deBruijn有最优直径.同时DPhoenix和BPhoenix的查询效率远高于Koorde和Vice-roy,并且它们的跳数也少于理论下界.此结果验证了本文给出的理论下界对现有P2P系统的有效性,而基于Trie树构造的系统可以超越下界,因为它们能够更好地适应动态环境.第2组实验中,每个网络起初有64K个结点,后允许一定数目结点离开,同时设置相同数目的结点加入,从而网络总结点数几乎不变.图8给出此环境下各系统的路由跳数.从图中看出不论是最坏情Page10况下还是平均情况下,DPhoenix和BPhoenix系统跳数的波动都好于Koorde和Viceory.此结果说明本文的构建方法能使P2P系统很好地适应结点频繁的加入和退出,而现有系统的查询性能在网络震荡时受较大影响.6.2系统最优化本节给出对DPhoenix和BPhoenix两系统应用最优化设计后的性能评测结果.对最优资源放置策略,本实验假设每结点最大负载是102+x,x是和结点数目相关的整数,测试时分别取x=0,…,12.系统查询和更新操作比例被设置成60%和40%.根据这些实验条件,我们可得优化资源放置策略和拓扑构造策略后的网络代价,其中图9给出每个结点平均消耗的路由代价.该结果表明在网络规模扩展的同时,优化后的系统OPT-DPhoenix和OPT-BPhoenix比原系统的路由显著变小.但系统维护代价的实验结果(如图10所示)刚好和路由代价相反,基于最优设计的网络代价比非优化的网络要略高些.因为,正如在最优化设计方法中指出的,不论是最优放置策略还是最优拓扑构建策略都是一个最优折中设计问题.6.3负载平衡通常希望P2P系统的资源平均地分布到每个结点上,这样可以使结点收到其它结点均衡的访问,以至于系统总的访问代价和存储代价由每个结点均匀地来承担.本文采用结点所存资源数量等于平衡负载的数目占总结点数的百分比来衡量系统平衡负载的能力,其中允许5%的误差,例如平均负载是每结点100个资源,那么存储95~105个资源的结点也被计算在比例中.实验中,每系统有10000个结点,系统资源数是105至106并以105的数量递增.如图11展示的结果,随资源数目的递增,结点所占比例下降.同时该结果也显示出,由于负载平衡算法的作用,DPhoenix和BPhoenix的曲线比其它网络更稳定,而且比例也是高于其它网络的.反而由于Viceroy和Koorde没有有效的负载平衡算法,网络资源分配的很不平均.图12给出应用本文的负载平衡方法后,DPhoenix和BPhoenix系统所产生的平均网络代价.从图中看出,产生的消息数目略多一些,但这个代价是可接受的,因为负载平衡算法只作用于Trie树的一小部分.6.4容错性测试容错性时,4000个查询被均匀地在含有10000个结点的网络里激发,每个结点以0.1~0.3的概率失效.图13给出此条件下各系统的成功查询Page11比例.从图中易看出,在相同失效概率的情况下,DPhoenix和BPhoenix的成功查询百分比远高于其它系统并变化稳定,因为在本文给出的构建方法中,每环节都考虑了容错设计,并且都是相互对应的.其中BPhoenix要比DPhoenix的鲁棒性差些,因为消息要在不同Trie树间路由会增加查询失败的概率.尽管Viceory,Koorde和DPhoenix,BPhoenix是基于相同互联网络结构的,但它们遭遇到更多的失败,主要原因是它们的路由协议只是不断地选择离目标最近的邻居转发消息,不允许沿其它路径路由.7结束语本文首先对现有P2P系统给出动态环境下网络直径和平均距离的理论下界.其次提出基于动态Trie树的通用构建框架,任何静态互联网络基于此框架都可被构建成P2P系统,并使系统在动态环境下保持静态网络的优点,同时对系统的参数给出最优化设计.deBruijn和Butterfly作为互联网络的代表用通用方法构建出DPhoenix和BPhoenix两个P2P系统,两系统拥有的拓扑维护算法和路由算法保证了资源的平均分布、健壮的网络和高效的路由.实验验证了本文的设计,DPhoenix和BPhoenix路由效率渐进地接近其相应的互联网络,并不受到理论下界的限制.将来,我们将开发出DPhoenix原型系统,并在其上构建大规模分布式应用.
