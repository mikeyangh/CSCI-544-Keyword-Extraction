Page1OpenFlow交换机动态共享限速机制的研究杨骥许琛龚志敏胡成臣管晓宏(西安交通大学智能网络与网络安全教育部重点实验室西安710049)摘要每流限速一直以来都是互联网服务质量保障(QoS)的一大挑战,由于受到硬件资源的限制,很难找到一种快速高效的算法在数据包级对流量进行区分限速.OpenFlow1.3协议对每流限速(Meter)部分,给出了具体定义和描述,该文参照该协议标准,提出了具体的Meter实现方案,并在ONetSwitch硬件平台上,进行了实验验证和性能测试.本文通过对网络流量的统计分析,发现网络中共存的流数量往往只占总流量的万分之一,因此使多条流分时共享硬件资源,可以有效解决每流限速的难题.参考动态队列共享(DQS)的思想,该文提出动态共享限速(DMS)算法,在多条流之间进行调度,实现多条流分时共享限速通道,在硬件资源受限,限速通道数量一定,同时需要限速的流数量大于限速通道数量时,能够有效地实现对各条流进行限速的功能.实验结果表明,Meter能够为每条流有效分配限速通道,从而在网络中对多条流以不同的速率区分限速.关键词OpenFlow1.3;ONetSwitch;QoS;每流限速;动态共享限速;软件定义网络;下一代互联网1引言随着网络中协议的多样性趋势,交换机-路由器等设备的复杂度正在逐渐增加,而传统的网络架构由于诸多问题,如缺乏灵活性、对需求变化的响应速度缓慢、无法实现网络虚拟化以及成本高昂等,已不能满足当今互联网用户的需求.因此,迫切需要新型网络架构的提出,从而为互联网带来一场革命性的变革.软件定义网络(SoftwareDefinedNetworking,SDN)的概念应运而生,并且经过近些年的发展与成熟,它正在成为下一代互联网的主要趋势之一.美国斯坦福大学CleanSlate研究计划于2006年提出了SDN的概念,将控制功能从网络交换设备中分离出来,即用软件定义网络,使得网络可编程化,在满足用户的需求方面具有很大的灵活性.同时,SDN还简化了网络基础设备的工作,底层无需执行冗杂的协议标准,只需要从上层接收指令和规则完成转发即可[1].SDN实现了对网络流量的灵活控制,为核心网络及应用的创新提供了良好的平台,可满足网络设备上QoS、访问控制和路径选择等需求[2].SDN的3层架构从上到下依次为应用程序、控制平面和数据平面,其中应用程序与控制平面之间通过北向应用程序编程接口(API)通信,控制平面和数据平面之间通过南向接口安全通道通信.网络编程人员只需在逻辑中心化的控制平面上编写应用程序,而将规则下发到数据平面的复杂工作则由控制平面来完成,从而在很大程度上减轻了网络管理人员的工作负担[2-3].在SDN架构中,OpenFlow协议最早被定义,也是当前SDN设备通信的事实标准,工作在网络设备控制层面与数据层面之间[4],主要负责南向接口,即SDN的控制器与交换机之间的通信,交换机中的流表用于匹配进入网络中的流,控制器可以增加、修改和删除流表项的内容,实时更新并下发规则到流表,如图1所示.在流表中找到匹配项的流按照流表中安装的规则执行相应的丢弃或转发动作,否则产生未匹配流表的消息,将其转发到控制器处理①.OpenFlow支持精确的流分类,并允许网络编程对每流进行操作,为网络提供细粒度的控制,使网络实时响应应用、用户及会话层的请求,已经被大量应用到各种网络交换设备和应用软件上[5].利用SDN的OpenFlow技术,可以解决很多传统网络中难以解决的问题,例如配置网络设备路由、访问控制和防火墙等复杂功能[6-7],实现信息中心网络(ICN)[8],解决互联网中负载均衡的问题[9].在本文中,将详述利用OpenFlow对流表中的每条表项按照控制器下发的规则执行不同操作的优势,实现对网络中的各条突发流以不同速率区分限速.在版本号高于1.3的OpenFlow协议中,针对网络服务质量保障(QoS)支持,新增了每流限速(Meter)的功能,即实时测量网络中各流的速率,并对指定流进行速率控制.任何一个流表项都可以在其指令动作中声明其对应的限速指令,当到达的数据包匹配该流表项后,需要继续通过Meter以指定速率对流量进行控制,满足要求后,数据包才会进行转发,以达到限速的目的②.图1所示为Meter在SDN网络中的部署,控制器具有全局视图,可对网络中的交换机进行配置.控制器通过OpenFlow协议下发流表项和限速参数到交换机,对匹配了某条流表项的流按照相应的参数限速并转发,否则执行指令域定义的其他动作.每流限速的前景毋庸置疑,相较于传统的限速技术有着很大的优势.由于网络中一段时间内只有部分流会出现突发传输的现象,只有在这种情况下,才需要对这些流量的速率进行一定限制,以避免湮没下行节点.然而,突发传输的流往往仅占网络总流①②Page3量的一部分,并不总是需要对所有的流进行限速.目前网络中的限速技术仍旧是对所有流量不加区分地以统一速率限速,从而导致网络带宽不能够得到充分利用,造成资源的浪费;同时,由于当前网络中流的数目非常庞大,如果对每条流独立地进行限速,则需要为每一条进入网络的流分配一个限速通道,这将会耗费大量的硬件资源空间,且随着流数的增多,硬件消耗线性增加,可扩展性较差.此外,多个限速通道输出队列的管理与调度,进一步增加了硬件设计的复杂度,这就导致了目前网络中很难实现每流限速的功能,因此迫切需要一种高效的限速方案来有效地解决这一问题.随着网络技术的发展成熟,以及复杂网络应用对QoS的需求,OpenFlow定义的每流限速(Meter)对传统的实现方法提出了挑战.本文旨在硬件资源有限的情况下,以不影响其他流为前提,仅对突发传输的流进行独立的速率控制以实现每流限速,为网络提供更好的QoS保证.在DQS(DynamicQueueingSharing)中[10],作者提到,网络中某个时间段内并发传输的流数目往往只有几百条,而且更进一步,在这几百条流中大多数的流是无需限速操作而可以直接进行转发的,仅仅在网络发生拥塞时,需要控制某些突发流的速率,而保证大多数的流按照正常速率转发.所以,当网络中的一条流由“活动”(Active)状态变为“休眠”(Silent)状态时,占用的限速通道中也将暂停数据包的传输,转为空闲状态,此时则可以通过释放该通道,供其他新进入网络的流使用,而不用为流重新开辟限速通道,从而使得多条流分时共享有限的硬件限速通道资源.如图2所示,并存的突发流,即需要同时限速的流仅占网络总流量的少部分,在不同的时段t1和t2需要对不同的流限速,通过动态调度和分时共享,使得有限的限速通道为远超过限速通道数目的流进行限速.基于以上理论,结合OpenFlow对每流区分处理的特性,本文提出了动态共享限速(DynamicMeterSharing,DMS)算法,实现多流分时共享限速通道,Meter在多条流之间动态调度,使得每条流在独立的通道中限速传输,等效于为该流分配了专用通道.在功能上,DMSMeter可解决网络中的每流限速需求与硬件资源限制的矛盾.考虑到在某段时间内,网络中同时需要限速的流的数量会超过限速通道的数量,由于硬件资源的限制,一段时间内只能保证有N条流独立地限速(其中N是限速通道的数量),不能确保每条流对应一个限速通道,有些流被分到共享限速通道是不可避免的.对于某条流f,在一段时间内,如果限速通道数不够,将会被分到共享通道限速,当有限速通道被其他流释放时,Meter又可为其分配独立的限速通道,相对于传统的限速方式,Meter能够处理更多的流,因此对f的限速效果更优.本文在课题组已实现的OpenFlow1.3交换机的基础上,提出了一种高效快速地为流分配限速通道的算法DMS,基于ONetSwitch硬件开发平台,设计并实现了OpenFlow1.3标准的每流限速功能模块,并用实际流量对其性能进行了测试评估,结果表明本文提出的Meter通过动态共享的方法实现了对每流进行限速的功能,对网络中大量数据流以不同的速率限速,并且在多条流之间共享限速通道.本文第2节介绍本文DMS算法设计的主要思想;第3节详细描述Meter的硬件设计方案;第4节对Meter的算法及相关参数进行理论上的分析;第5节介绍硬件实验平台ONetSwitch相关内容;第6节通过实验测试,评估Meter的每流限速性能;第7节对比每流限速的相关工作;第8节对本文的工作作出总结.2DMS基本思想和系统结构2.1DMS整体设计思想Meter的设计采用软硬件相结合的思想,构建出如图3所示的系统,在软件层维护一张软件限速表以及一个用来实时监测网络中流的速率并与软件限速表中预先设置的限速速率进行比较的速率选择模块;硬件层维护一张硬件流表和每流限速表,若干限速通道以及从限速通道中轮询读取数据包的输出仲裁模块.软件层通过写寄存器信号对硬件表进行配置,通过读寄存器信号读取硬件寄存器的信息,统计分析限速流的数量、时延等.Page4图3Meter软硬件整体架构软件层实时监测网络流量,对每一条进入网络的流,在软件层面计算其速率并查找软件流表,匹配该流对应的表项,该表项中设置若干限速参数,在其中通过比较得到小于流当前速率的最大速率值Ri,生成一条硬件流表项{flow_id,Meter_id}以及一条限速表项{Meter_id,Ri},表示匹配了流标号flow_id的流以限速表中第Meter_id条表项配置的参数Ri进行限速,这两条表项通过写寄存器下发到硬件表上.在硬件中匹配了flow_id中的流,根据其指令域中的Meter_id查找硬件每流限速表,得到其对应的限速参数,接着该流被分配到某个限速通道,以查找到的速率Ri进行传输;如果软件层没有为流配置限速信息,则该流无需限速,直接转发.本文每流限速设计的核心思想即前言所述的动态限速共享(DMS)机制,主要体现在硬件层面的设计上,在一条新流进入网络时为其分配空闲的限速通道,而当一条流在网络中传输结束之后,释放其占用的限速通道,实现分时共享.硬件Meter通过数据包的所属的流标号flow_id识别出某条流,在其第一个包进入网络时,Meter为其分配一个新的限速通道,后继到达的属于该流的数据包都被分配到同一通道;当一个限速通道在一段时间Δt之内没有数据传输,则说明占用该限速通道的流已经不再有效,即变为“休眠”状态,检测到该通道超时,将其解除占用并加入空闲通道队列,等待分配给新加入的流;而如果该流在一段时间之后重新恢复Active状态,则为其重新分配另外一个空闲的限速通道;当所有竞争通道都被占用时,后进入网络的流则被分配到竞争通道中以统一的速率限速,直到有限速通道被释放;无需限速的流被分到非限速通道执行正常转发处理.Meter使多条流分时共享有限的限速队列,同时保证每流独立限速,不受其余共存流的影响.图4所示为用Meter实现每流限速的图形化解Page5释,举例说明Meter如何使多条流动态共享限速通道.在图4(a)中,t1时段,流{a,b,e,j,r,s}是网络中处于“活动”状态的流,双向箭头线表示该时段限速通道的分配情况:a→1,b→2,e→3,j→4,r→k,s→k+1;在图2(b)中,t2时段,流{b,e,j}由“活动”状态变为“休眠”状态,而新增加了“活动”状态的流{c,d,i,k},这时网络中{a,c,d,i,k,r,s}是“活动”状态的流,虚线表示该时段限速通道分配情况:a→1,r→k,s→k+1保持不变,将流{b,e,j}占用的通道释放,分配给流{c,d,j};在图2(c)中,当所有的限速通道都被占用,此时新进入网络的流{t,u,v,w}都被分到竞争通道中限速.在此例中,通过上述动态限速共享的方法,10条流分时共享7个限速通道,从“外部”看实现了对每流的独立限速.2.2硬件设计架构如图5所示,Meter包含3级功能模块:(1)查表匹配模块.对进入Meter的流,查找限速表匹配之后,为其配置独立的限速通道并转发;(2)限速通道.对进入该通道的流进行数据包级的限速处理,之后将数据包存放入输出缓存队列中;(3)输出仲裁.从限速通道的输出队列仲裁取出数据,由轮询算法选择一路到输出队列,从相应的输出端口转发.2.2.1查表匹配模块查表匹配模块提取数据包匹配的限速表项号和流标号信息,分别查找硬件限速表和活动流限速记录表,判定该数据包属于哪一条流,将其分发到该流相应的限速通道,之后在限速表和活动流记录表中注册;而当某个限速通道在一段时间Δt之内都没有数据发送,那么说明其对应的流已经传输结束,则该模块接收流的注销请求,释放其占用的限速通道,同时删除其注册信息.当数据包连续到达时,并行完成数据包的处理和传输,在传输一个数据包的同时,进行对下一个包的查找匹配和限速通道分配工作.2.2.2限速通道模块限速通道的主要功能是使用漏桶算法控制数据注入到网络的速率,平滑网络上的突发流量,把输入的突发数据流以一个平缓的速率输出,使得包与包之间以固定的间隔传输.该流水级设置3种限速通道,当共存流的数目不超过限速通道的数目时,每个标准的限速通道对应一条独立的流;而当共存流的数目大于限速通道数目时,独立的限速通道已经全部被占用后,后续的流都被分配到该竞争的共享限速通道;对于不需要限速的流,将其分配到“虚拟”的限速通道中,保持其输入速率,收到则立即转发.2.2.3输出仲裁查表匹配模块将输入数据分发到n个通道并行限速,限速完成后暂存在相应的n个输出队列中,而输出只能处理一路数据,因此需要在这些队列中执行调度仲裁.由于并非所有的队列都同时有数据要输出,在传统的轮询调度机制中,大部分的时间都在询问输出队列是否非空,当一个队列传输完成之后,另一个队列已经有了数据,而循环队列指针还未询问到该队列,从而导致该队列空等,增加了传输时延,效率低下.本文输出仲裁模块的设计中,增加非空队列链表机制,同样用轮询算法询问队列,当有队列非空时,立即将其加入到输出队列链表中,等待排在它之前的队列发送完数据之后,就可以立即从该队列中取出数据,提高了输出效率.在上述每流限速Meter的设计的3级模块中,查表匹配为每流分配限速通道是其中最复杂的逻辑,主要涉及到两个重点解决的难题:(1)如何快速判定新进入网络的数据包属于哪一条流?(2)对每个进入网络的数据包,在转发之前都需要解析包头并查表为其分配限速通道,这将造成很大的延迟,如何最大程度上降低延迟,提高处理效率?针对上述两个问题,本文通过两项重要技术来解决,即硬件限速表和活动流记录表的二级查找技术以及流水处理数据包技术,这两部分内容将在第3节中分别作详细说明.3Meter详细设计方案3.1二级查找技术Meter为每流配置一个限速通道,维护一张由限速通道号(0,1,…,n-1)到流标号的直接映射表,即活动流记录表,对每个进入Meter处理的数据包,根据其携带的所属流标号,判断是否已为其分配Page6了限速通道,如果是,则直接将其转发到流标号对应的限速通道传输,否则说明其为一条新流的第1个数据包,为之分配空闲的限速通道,将新的映射关系加入活动流记录表中,后续到达的属于该流的数据包则能匹配该项,转发到相应限速通道.由于流标号是不连续的,如果顺序查找活动流记录表,则平均每包需要耗费n/2个时钟周期,最坏情况要将整张表搜索一遍,这种情况下网络中的延时将会非常大.Meter采用二级查找的方式,如图6所示,左侧限速表中Meter号表示限速表的表项编号,活动流链头列表示匹配了该限速表项的活动流链表头在活动流记录表中的编号;右侧活动流记录表中,限速通道号列表示限速通道的编号,流标号列表示分配到该通道限速的活动流标号,后继空闲通道列是链表指针,指向匹配同一限速表项的下一条活动流.因为Meter可以使多条流共享一条限速表项,限速表为每一个表项维护一个链表,链式存储匹配该限速表项的所有活动流对应的限速通道号,在限速表项记录链头;在活动流记录表中将对应同一限速表项的所有限速通道链接,那么每包进入Meter之后,先直接映射查找限速表,再由链头开始顺序查找对应的链表,直至找到匹配的流标号或至链尾,结束返回查找结果,相比于顺序查找方式大大降低了时间复杂度.3.2流水处理在硬件资源足够的情况下,流水处理技术能够显著地提高系统的效率.将包的处理过程分成两段流水线,在传输一个数据包的同时,进行下一个包的限速通道号的分配处理工作,降低数据包在该模块处理时的总时延以提高效率.如图7所示,状态机1和状态机2分别为流水阶段1和2,即限速通道的分配与数据包的传输,阴影箭头表示一个包的处理流程.在状态机2启动之前,先检测当前需要输出的数据包是否已经分配好了正确的限速通道,如果是,则直接将数据包传输给下一级模块,否则等待上述过程(即状态机1)完成之后才可启动数据的传输;在一个数据包开始传输时,如果输入队列非空,则说明有新的包要处理,启动状态机1,为下一个包的按时传输做好准备;每个流水段完成一次数据包的处理之后,都需要检测启动条件是否成立,如果是,则进行下一次处理,否则等待触发信号.3.3输出队列调度Meter中设置多个限速通道,如62个限速通道,对应64个输出队列,包括一个共享限速队列和一个非限速的队列,输出管理模块一次只能从一个队列读取数据,继而转发到相应端口.在之前的工作中,每个输出端口对应一个输出队列,由于硬件平台上仅有8个输出端口,使用Round-Robin算法即可以有效地处理各队列中的数据包,使其按序从对应端口转发出去.然而,在Meter中有64个输出队列,而且由于进行了速率控制而导致多个队列驻留数据包.按照轮询各队列控制数据包输出的算法,造成部分输出队列“空等”,从而加大了数据包的时延,尤其是对无需限速的数据包.在本文中,通过设置“非空队列链”有效地解决这一问题.对于有数据包的队列,维护一个链表,当有队列非空时,将其加入链尾,当从一个队列中取出数据包后,将其从链头删除,继续从其后续非空队列中读取数据包.对于有64个限速通道的Meter,输出队列的有效调度可提高Meter的效率,为流提供更可靠的时延保证.4Meter性能分析4.1二级查找表的时间复杂度限速表的查找是直接映射查找,时间为常量1,而线性链表的查找与其长度L有关,其中L是由软件配置的“最多有L条流共享一条限速表项”所决Page7定的,而与活动流记录表的长度无关.为减少L的值,优化查找时间,将部分限速表项冗余,即多个限速表项对应同一限速速率,可成倍减小链表的长度.如有N条流需要以同一速率R限速,则将这N条流分为两组,在硬件限速表中对应两条限速速率都为R的表项,那么活动流链的长度即可由N降低至N/2,缩短了一半的查找时间.4.2冲突流与限速通道数量之间的折衷网络中共存流的数目时刻在变化,限速通道的数量并不总是满足需求.当流的数目大于限速通道数时,如有一条新流进入网络中,则所有的限速通道都被占用,在这种情况下,放松“每流独立限速”的需求,单独开辟一条共享的限速通道,当无空闲的限速通道时,该通道处理在这之后所有的新流,称之为冲突流,直到有通道被释放.冲突流的数量C与限速通道的数量R存在着负关系,当R值增加时,C值减少;而当R值减少时,C值增加.需要根据对实际流量的测试,找到这二者之间的平衡点,以实现最优的性能,既能充分保证每流限速,又能最大程度上减少硬件资源的消耗.5实验环境本文的实验环境,是基于课题组和叠锶MeshSr联合开发的ONetSwitch45网络创新平台[11],如图8所示,ONetSwitch45是一个基于FPGA的网络创新实验平台,其核心器件是Zynq7045SoC[12],其内部包含一个ARMCortex-A9双核CPU以及一个KintexFPGA,ARM处理器运行在667MHz,具有较强处理能力,能够运行完整的Linux操作系统;同时FPGA提供约355KLogicCell,是传统的NetFPGA所提供逻辑资源的6倍以上,能够支撑更加复杂的硬件逻辑,内部能够提供超过40GB网络数据的处理能力,方便研究者在其内部编写逻辑进行硬件加速,两者之间使用高速总线AMBA互联.ONetSwitch45板卡资源还包括72MBQDR2SRAM,提供约48Gbps的吞吐率用于线速网络数据缓存或其他高速应用.与传统插卡式的网络实验平台相比,ONetSwitch开发平台无需额外匹配服务器,单板可以独立工作.同时ONetSwitch采用开放的体系结构设计,允许使用者针对需要进行硬件或者软件编程,同时尽可能地复用已有的设计.硬件提供丰富的扩展接口,FMC高速板间互连接口,可以接驳功能扩展卡,或者进行板间互连;Mini-PCIe扩展接口可以支持对应标准模块,以及控制通信接口针对多种常见开发板进行连接.研究人员可根据需要扩展对应模块,来支持数据中心网络[13]、移动互联网、命名数据网络等研究以及软件定义网络研究与创新应用,基于ONetSwitch搭建理想的网络创新平台,进行网络创新开发.同时,ONetSwitch包含4个最高支持10G-BaseR等万兆以太网协议以及多种光协议的SFP+接口与4个三速自适应以太网接口,用于适应不同的实验环境,如图9所示.在此之前,由斯坦福大学研发的NetFPGA[14]作为一套灵活易用的网络实验平台在全球有着广泛的部署,但是随着网络带宽提高与应用复杂化,尤其是SDN成为研究的主流,NetFPGA已经无法满足对新协议开发的资源支持.ONetSwitch45与NetFPGA相比,提供了超过5倍的片上资源,以及更高容量与带宽的片外存储.在提供千兆以太网接口的同时,额外增加4个支持万兆以太网协议的SFP+接口,支持更高速的网络实验.在主机接口上,ONetSwitch所提供的带宽也完全满足万兆流量实时处理的需求,支持主机应用创新,而NetFPGA受限于PCI接口的物理性能无法提供超过千兆的主机应用支持.与NetFPGA10G版本相比,ONetSwitch能够友善地兼容原有社区的应用,无需做过多修改,同时片上资源更加丰富,易于对新应用进行支持.在功耗估计方面,ONetSwitch也可以提供整体和局部电源功耗测量以及绿色网络的支持,这也是NetFPGA系列所没有涉及到的.Page8图9ONetSwitch45开发平台结构6测试评估实验测试分为3个部分,分别是:(1)用Xcap工具构造3种模拟流量,分别包含64、128和256条流,即流量SF1~SF3(SimulationFlow),以恒定的速率发送,限速分为4个等级:0.9Mbps、0.8Mbps、0.7Mbps、0.6Mbps,用Wireshark抓包工具统计分析各条流限速后的速率分布;(2)将网络中的实际流量,分别以不同速率发送,用Wireshark统计分析各流的速率,对突发流计算得到其限速参数,配置硬件限速表,对比限速前后的流量速率,并且比较Meter对不同流的限速效果;(3)用Smartbits以不同的速率发送数据包,测试在高速网络环境下Meter的限速性能.6.1模拟流量测试用tcpreplay发包工具以恒定速率1.87Mbps分别发送构造的流量SF1~SF3,硬件限速表中配置16条表项,则这3种流量分别有4、8和16条流共享同一条限速表项,限速参数的配置与流标号flow_id的关系分为4个等级:flow_id%4==0:限速到0.6Mbps;flow_id%4==1:限速到0.7Mbps;flow_id%4==2:限速到0.8Mbps;flow_id%4==3:限速到0.9Mbps.6.1.1各流限速后的速率分布在限速通道数目为62的情况下,分别发送流量SF1~SF3,得到正确的限速结果,如图10所示,横坐标表示模拟流量中各流的标号,纵坐标表示经过Meter处理后各流的速率,竞争限速通道的限速速率设置较大,图中速率高的流即表示被分配到竞争限速通道的流,即冲突流.运行结果显示,对于有62个限速通道的Meter,当分别发送流量SF1~SF3时,分别有2、20和61条流被分到竞争通道.同时,对于流量2和流量3,当第63条流进入Meter时,所有限速通道都已被占用,此时后续到达的流都被分配到竞争通道,但是经过一段时间后,最先到达的流变为“休眠”状态,释放其占用的限速通道,后续的流则可被分到空闲的通道执行限速,从而实现了多流动态共享限速通道.6.1.2限速等级与冲突流数量关系在限速通道数目为62的情况下,分别以1.44Mbps~1.94Mbps的速率发送上述3种流量,对各流的限速配置保持不变,统计分析在不同限速Page9等级下被分配到竞争通道的流数量,得到如图11所示结果,横坐标表示模拟流量的发送速率,纵坐标表示冲突流数目,从上到下3条折线分别对应流量SF1~SF3.令r(ini)为流的原始速率,r(lim)为流限速后的速率,则限速等级L定义为r(ini)/r(lim),例如,流原始速率为1.44Mbps,配置限速速率为0.9Mbps,则L=1.6,对一条流的限速等级越大,则该流占用限速通道的时间就相对较长.如图11所示,随着发送速率的增加,Meter对流的限速等级由平均1.9增至2.6,被分到竞争通道的流数量随着限速等级的加大而呈线性增加趋势.6.1.3限速通道数与冲突流数的关系分别用14、30和62个限速通道对上述构造的流量SF1~SF3进行限速测试,统计分析在不同限速通道数下被分到竞争通道的流数量,得到如表1所示共9组实验结果,如对于64条流,14个限速通道的一组数据,“14/50”中14表示正确限速的流(即限速流)的数目,而50表示被分到竞争通道的流(即冲突流)数目.表1模拟流量冲突流数与限速通道数的关系流类64flow128flow256flow由表1可见,随着限速通道数量的增长,被正确限速的流数目呈相同的增长趋势,而冲突流数量呈递减趋势;并且在限速通道数不变的情况下,网络中需要限速的流数量越多,则被分到竞争通道的流数量也就越多.6.2实际流量测试用网络中真实的流量对Meter进行测试,ONetCard有4个千兆以太网接口,分别发送同一流量到1、2、3、4个网口,从而可以构造出4种流量RF1~RF4(RealFlow),分别包含32、64、96和128条需要限速的流.用Wireshark工具统计在限速通道数变化的情况下,多种流量在Meter中的处理情况,并最终分析得到影响Meter对流限速性能的因素.6.2.1Meter限速性能分析首先,在62个限速通道的情况下,发送流量RF1,得到限速前后的速率比较结果,如图12所示,取其中3条进行分析,横坐标表示实际流和限速流中依次到达的数据包,纵坐标表示用Wireshark统计的每个数据包到达时间,和标记分别表示限速前后的流.经过Meter限速处理后的各流相较于初始值,两个数据包之间的间隔增大,表明流速得到控制,即抑制了突发流的传输,且限速后曲线渐趋平缓,数据流的速率在一段时间内基本保持不变,起到了平滑网络流量的作用.在图12中,只分析了Meter对少量数据流量的限速结果,对比了未限速和限速时数据包到达的时间;然而,在高速网络环境下,要处理大量的数据流,分别发送1s和45s的实际流量,统计一条流中最小的两个包之间时间间隔是0.00013s,然后设置限速参数使得时间间隔为0.001s,相当于最高以1/10的等级限速,在发送1s的实际流量时,该流包含244个数据包,限速后收到55个;在发送45s的实际流量时,该流包含9456个数据包,收到2470个,限速与不限速的时延对比与图13类似,部分数据包被丢弃,两数据包之间的最大时间间隔不超过预先设置的0.001s.Page10接着,进行Meter的时延分析,对实际流量中的一条包含33个数据包的流f1,分别为其配置Meter限速参数和不配置Meter参数直接转发,在这两种情况下,统计每个数据包接收时间与发送时间的间隔,得到如图13结果.在图13中,横坐标表示流f1中包的序号,纵坐标表示每包接收时间与发送时间的差值,单位是ms.图13(a)表示不经过Meter限速处理而直接转发的包时延;(b)图表示经过限速处理后的包时延;(c)图表示两者的对比,由此图可以得到,在流突发传输的一段时间内,Meter对流的速率起到了有效的控制作用.图13是Meter对限速流的处理时延,在图14中,分析Meter对于无需限速的流处理的时延,在没有Meter时,数据包在网络中的平均处理时延约为0.106ms,而引入Meter后,对于不需要限速的流而言,其平均处理时延增加至0.173ms,仍能够保证高速网络环境下的对数据包的快速转发.6.2.2限速通道数与冲突流数的关系对特定数目的流,改变限速通道的数量,当限速通道数分别为14、30、62时,统计被分到竞争通道的流数,如对于32条流,14个限速通道的一组数据,“17/19”中17表示正确限速的流(即限速流)的数目,而19表示被分到竞争通道的流(即冲突流)数目.由表2可见,随着限速通道数的增加,被分到竞争通道的流(即冲突流)的数目递减.表2中限速流与冲突流的和大于总的流数,是因为在实际流量中,由于流中的数据包分布不均匀,在有些流中后到达的数据包进入Meter后,该流已经注销,且所有的限速通道已被其他流占用,则该数据包被分到竞争通道中.表2实际流量冲突流数与限速通道数的关系32flow64flow96flow128flow6.2.3超时时间与冲突流数的关系对于6.2.2节中的62个限速通道,当限速通道的超时时间为0.1s时,所有的流都被正确限速,冲突流的数目为0.在此基础上,研究超时时间与冲突流的数量关系,以相同的速率发送流量,将超时时间分别设置为0.4s和0.6s时,得到如表3所示结果.64flow96flow128flow分析表3中数据可以得到结论,随着超时时间的延长,被分到竞争通道的流数目增加.超时时间过短,则流频繁在各限速通道中切换,而超时时间过长,则会造成限速通道资源的浪费,因此,在实际流限速中,需根据这两者之间的平衡关系折衷,取相对最优的超时时间.如前所述,超时时间与限速通道的个数是影响Meter限速性能的两个重要参数,同时决定系统限Page11速精度以及硬件利用效率.如何设置这两个参数,进而需要在既节省硬件资源同时又不影响Meter限速性能的前提下,得到最优的结果,以使得Meter以较少的限速通道数为大量的流量限速,需要进一步用更多的实际流量来测试分析,这将在以后的工作中逐步完成.6.3Smartbits流量测试用Smartbits工具分别以不同的速率发送数据包,受限于Smartbits构造数据流量的简单性,而本实验的目的是为了测试Meter在高速网络下的性能,故而仅构造32条流,对其中31条进行限速,第32条直接转发处理,得到如图15所示结果.图15(a)为以91.43Mbps~251.96Mbps的8组速率发送数据包,纵轴表示8组限速前与限速后的速率值,随着发送速率的增加,限速后速率保持在92.4Mbps附近,在高速网络下,Meter能以不同等级对流量进行限速,控制网络中流的速率;图15(b)为8组发送速率下的丢包率,发送相同数量级的流量,丢包率随着发送速率的增加而增大,之后趋于平缓.当网络中流的速率很大,而设置的限速速率与原速率相差较大时,必然会引起较大程度的丢包.7相关工作在Raghavan等人[15]的分布式限速工作中,用多个分布式的限速模块协同工作,对分散到各个域的云服务流量做单一聚合的全局限制.其采用GRD和FPS算法对流量的速率进行控制,各个分布的限速模块之间通过协议通信并更新自身信息,最终统一集中地限速,这是传统的限速方案,并没有对流进行精确的划分.Covington等人[16]在其实现的packetgenerator中实现了对流的区分限速.其按照数据包在硬件平台上的输出端口号对流进行划分,硬件平台上有4个以太网接口,分别对应4个限速通道,从同一个端口输出的数据包按照同样的速率限速.packetgenerator没有对流进行解析和分类,只是按照其转发端口进行区分限速.Melman等人[17]实现了网络路由交换设备到主机CPU的流量限速.将网络中流量划分为数据流量和控制流量,捕获控制流量到CPU,控制数据包分类有BPDU,LACP,GVRP,RIPvl,RIPv2,OSPFVZ,PIM,TELNET,HTTP等等,用一个包处理器对数据包分类,每一类对应一个CPU通道,通过阈值控制每个通道数据包的数量以达到限速的目的.Cheriton[18]的近似每流限速方案中,对流进行了分类,每条流对应一个限速的队列,各个限速队列相互独立,系统中设置一个控制器,为每个队列分配限速的令牌,实时地控制各流的限速情况.Covington等人的工作中,对流量进行了简单的划分,按照输出端口号限速,但是并没有对流进行更细粒度的划分;Melman等人的工作和Cheriton的近似每流限速对流量的划分更为精确,但是每条划分的流对应一个限速队列,而DMS算法可以使得多条流共享限速通道,使用较少数量的限速通道为网络中多种类流量限速;在限速方案上,packetgenerator与Meter都采取漏桶算法,相对于单一的数据包计数效果更优.除此之外,在Meter每流限速中,可根据上层软件需求定制需要限速的流,如根据IP协议、IP地址、传输层端口号等,可满足不同应用的需求;且本文提出的DMS算法为流量动态分配限速通道,效率高,可有效解决硬件资源不足的问题.FlowQoS[19]通过使用两个交换机分别进行分类和限速,来达到家庭网络的每流限速,但是这种结构无法支持高带宽低延迟的网络.受限于硬件资源与芯片规模,现在绝大多数商用的硬件SDN交换机都不支持每流限速的功能,目前应用广泛的OpenvSwitch[20]是一种软件的SDN交换机实现,其中包含一些QoS能力,但是实际无法支持较大的流数量以及高的网络负载.因此绝大多数基于OpenvSwitch的商用交换机也无法有效完成每流限速.Page128总结及未来工作SDN新型网络模型的提出以及新业务模式的应用对每流限速提出了强烈的需求.在OpenFlow协议中,为每一条需要限速的流配置一条流表项,定义该流可以转发的最高速率,将其分配到指定的限速通道执行限速.本文提出了DMS算法,在硬件限速通道一定的情况下,通过有效分配限速通道,以及调度流进入共享限速通道,使得硬件能够支持服务更多的流,从而实现每流限速的实际功能.相比于传统的限速机制,DMS算法可以用非常少的硬件资源实现同样的限速效果.本文在ONetSwitch平台上的OpenFlow1.3交换机中,利用FPGA资源实现了基于DMS算法的Meter,并进行了一系列实验.相较于传统网络中的限速机制,DMS算法实现的Meter可用14、30、62个限速通道有效地为128条流限速,节约了硬件资源,同时保证高效的各流区分限速.文中使用了3种流量进行算法的验证,分别是Xcap工具构造的模拟流量、Smartbits测试仪生成的流量和网络中的真实流量.测试结果表明,Meter能够按照预先配置好的限速参数对需要限速的流进行正确的速率限制.本文进一步分别研究了硬件限速通道数目和超时时间对冲突流数目的关系的影响,随着硬件通道数的增加,冲突流数目减少,且随着超时时间的延长,冲突流数目增加.硬件限速通道的数目和超时时间是影响Meter限速性能的两项重要参数.这将作为下一阶段的工作重点.通过进行更大量的流量测试,进一步调整Meter以优化参数,使之实现更好的性能,为网络提供高效的限速.致谢西安交通大学智能网络与网络安全教育部重点实验室SDN小组的同学之前在OpenFlow方面做了很多的工作,为本篇论文的完成奠定了良好的基础,给予了很大的帮助和指导,在此衷心表示感谢,同时感谢在百忙之中评阅论文的各位专家!
