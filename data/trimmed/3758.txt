Page1给定限界的势结构分组与联盟结构生成胡山立1)石纯一2)李少芳3)1)(福州大学计算机科学与技术系福州350108)2)(清华大学计算机科学与技术系北京100084)3)(莆田学院电子信息工程学系福建莆田351100)摘要联盟形成是多Agent系统中的一个关键问题,寻求能极大化联盟值总和的最优联盟结构是NP-完全的.Sandholm等人已经证明,要建立最坏情况下的限界k,搜索联盟结构图的最底两层是必要且是充分的.当实际应用提出最坏情况下的具体限界要求时,如何通过进一步的最小搜索找到一个能保证在最坏情况下其联盟结构值与最优的联盟结构值相距在一个给定的限界内的联盟结构,是个长期以来值得研究而又尚未解决的问题.文中深刻分析了不同的分组方法对需要搜索的势结构数的影响,针对给定限界,在最坏情况下提出一种新的分组方法和一个新的联盟结构生成算法,使需要搜索的势结构数和联盟结构数比已有的算法都大大减少.关键词多Agent系统;联盟结构;势结构;给定限界;分组1引言联盟形成是多Agent系统中Agents交互的一种重要形式,倍受电子商务和网格计算等新兴领域的关注.由于单个Agent的资源和能力有限,Agent可能希望通过互相合作来完成或更有效地完成任务,从单Agent的观点参加一个联盟的动机是为了能完成或更有效地完成任务,以便能增加所得到的收益.通常所有可能的联盟结构的数目太大,以至于不能进行穷尽搜索.那么能否通过部分搜索找到一个能保证在最坏情况下其联盟结构值与最优的联盟结构值相距在一个有限的限界内的联盟结构?如果能够找到,那么这个限界有保证的最小搜索是多少?这个问题已由Sandholm等人[1]解决.他们证明,要建立最坏情况下的限界k,搜索联盟结构图的最底二层是必要且充分的,此时限界k=n.然而最底二层含有一个或两个联盟的联盟结构数在所有可能的联盟结构数中只占有很小的比例,两者之比当n增大时趋于0,而由最小搜索建立的限界k=n,却是随n的增大而增大的.这个结果向人们提出第2个重要问题:当实际问题提出比这更小的具体限界要求时,在最小搜索之后(此时限界为n),在没有启发信息的条件下,应怎样进行进一步的部分搜索,以尽快地满足这个限界?这个问题不仅在理论上有意义,而且随着Agent的计算能力的不断提高,也具有实用价值[1-6].针对这个问题,胡山立和石纯一[2]给出了一种以层为单位的最优搜索算法(算法1);Dang和Jennings[3]给出了一个联盟结构生成算法(算法2);Su等人[4]提出一个更优的联盟结构生成算法(算法3).这些算法中的分组思想和分组方法直接影响到搜索量的多少.本文第2节介绍一些基本概念;第3节给出各算法的分组方法;第4节讨论新的分组方法和相应的算法;第5节比较这几种算法的优劣;第6节给出结论.2基本概念设n个Agent的集合A={a1,a2,…,an}.A中的一个非空子集C称为Agent的一个联盟,联盟C中Agent的个数称为联盟C的势,记为|C|.而A的一个完全的划分称为一个联盟结构CS.设联盟结构CS={C1,C2,…,Cp},不失一般性,不妨设|C1||C2|…|Cp|1.令n1=|C1|,n2=|C2|,…,np=|Cp|,n=n1+n2+…+np,则把{n1,n2,…,np}称为联盟结构CS的势结构(CCS).在特征函数对策(CFGs)下研究联盟结构生成问题[1-6]:(1)每个特征函数V仅与联盟C有关,联盟C的特征值(下文中简称为值)表示为V(C),联盟结构的特征值等于该联盟结构中所有联盟的特征值的和,即V(CS)=∑C∈CS值是有限的,对任意的联盟C,不妨假设V(C)0;(3)在非超加对策中研究联盟形成,即联盟不具有超加性,或超加性事先不知道.超加性是指对任意两个不相交的联盟C1,C2A,有V(C1∪C2)V(C1)+V(C2),否则最优联盟结构就是由所有Agent组成的全联盟了.在某一特征函数V下特征值最大的联盟结构就是该特征函数V下的最优联盟结构,记作CS.在寻求最优联盟结构时,算法的输入可以只包含一部分联盟的特征值,而其余的约定为0.我们用特征函数V(CS)来给出联盟结构CS的值或权(即收益),这样寻求最优联盟结构的过程可看成在对应的结点带权的联盟结构图上的搜索过程.设所有联盟结构的集合为M,在特征函数V下,设CS是M中值最大的联盟结构(即最优联盟结构),CS部最优联盟结构.若对任意特征函数V,存在与V无关的k(一般与n和N有关),满足V(CS)称k是搜索到的解的限界,可用来衡量最坏情况下搜索得到的局部最优解CS况下已搜索的局部最优解和全局最优解的距离.如果k是限界,并且存在一个特征函数V,使得V(CS)N)k中的等式成立,则称限界k是紧的.V(CS对于有n个Agent的系统,所有可能的联盟结构的势结构及其关系能够用势结构图来表示,图中结点代表势结构,由底向上共有n层,第i层(Li)中的结点代表含有i个势的势结构,结点间的连线代表势结构之间的关系,沿连线向下代表上面势结构中的两个势合并产生下面的势结构,沿连线向上代表下面势结构中的一个势分裂为两个势而产生上面的势结构,6个Agent{1,2,3,4,5,6}的势结构图如图1所示.整数n的每一种划分对应一种势结构,例如,整数6的一种划分表示为6=2+2+1+1,正好对应势结构{2,2,1,1},整数n的划分数就是势结构数,其值可通过递归方法计算[7].Page3得到以下基本结论[1].定理1.要建立最坏情况下的限界k,搜索势结构图的最底二层是必要且充分的,此时限界k=n.定理2.搜索势结构图的最底二层L1,L2和顶层Ln,限界k=n/2且是紧的.容易证明:定理3.若CS对应的势结构中的元素可分成a组,且a组中的每一组中的元素都同时出现在已被搜索过的同一个势结构中,则限界ka.3联盟结构生成算法中的分组思想3.1算法1中按层搜索的分组思想[2]引理1.设l1<l2<l3,对层l1中的任一联盟结构CS1,如果有m个联盟在层l3一起出现,则它们一定在层l2一起出现.对层l3中的任一联盟结构CS3,如果有m个联盟在层l1一起出现,则它们一定在层l2一起出现.定理4.设l1<l2<l3,如果CS在层l2且层l3已搜索,则层l3以上各层是否搜索过不影响限界k;如果CS在层l2且层l1已搜索,则层l1以下各层是否搜索过不影响限界k.文献[2]中算法1的思想是:对给定的限界k,取k=k,寻求要搜索的层l,使得层l与层l2之间的层尽量多且不必搜索,即要求当CS所在的层p满足2<p<l时,搜索层l后只要考虑层p>l的情况,就有kk,层l以下是否已被搜索不影响k.若p>l,则搜索层l之后,l以上的层也不必搜索,就有kk,算法1结束.否则寻求要搜索的层l1,使得层l与层l1之间的层尽量多且不必搜索,继续这个过程直到建立不大于k的限界.其分组思想体现在:对于包含p个联盟的最优联盟结构CS,对给定的限界k,取k=k,当其中任意p/k个联盟都在要搜索的层l中一起出现过,则满足限界k.3.2算法2中势结构的分组方法[3]设最优联盟结构CS包含t个联盟C1,C2,…,Ct,且|C1||C2|…|Ct|1.给定k3的奇数限界k=2q-1,当t3时,只搜L1,L2层就可达到.当3<tn-1时,首先将C1,C2,…,Cq-1各单独分成一组,共q-1组,这些组是由单一联盟构成的,它们在L1,L2层中全搜索过.其次考虑CS中的其它联盟Cq,Cq+1,…,Ct,要将它们分成q组,即共将CS分为2q-1组.后q组的分组方法如下:设i=t/q,m≡tmodq,令CS1={Cq,C2q,…,Ciq},CS2={Cq+1,C2q+1,…,Ciq+1},…,CSq={C2q-1,C2q,…,Ciq+q-1},这q组中每组最多i个联盟,最少i-1个联盟,各组末项至Ciq+m止.令x=|Cq|+|C2q|+…+|Ciq|,则这q组中每一组中的Agent个数和x,因此只需搜索最大联盟的势n-x的联盟结构就可以搜遍所有联盟的势之和x的q组.3.3算法3中势结构的分组方法[4]给定n,k,取h=n/k,m≡nmodk,不妨设最优联盟结构CS={C1,C2,…,Ct},其对应的势结构为{n1,n2,…,nt},且n1n2nt.将CS的势结构按以下规则分为a组:首先当m<h时,对所有ni(nih)各分一组.其次对所有ni+1,…,nj,若满足ni+1+…+njh且ni+1+…+nj-1<h(m=0,1时)或ni+1+…+njh+1且ni+1+…+nj-1<h+1(2m<h时),各分为一组{ni+1,…,nj};最后若有元素剩下,则将剩下的部分分为一组.显然1an/h,当m=0时,n/h=k,否则n/h=k+1.只需搜索完文献[4]中的CCS(n,k)对应的联盟结构,则CS的势结构中各分组都已在CCS(n,k)或L1,L2,Ln上搜索过.3.4本文新的势结构分组方法给定n,k,取h=n/k,m≡nmodk,设最优联盟结构为CS={C1,C2,…,Ct},若tk,则搜L1,L2已达到限界,下面设t>k.不失一般性,不妨设|C1||C2|…|Ck|…|Ct|1.令n1=|C1|,n2=|C2|,…,nt=|Ct|,则n1+n2+…+nt=n,记CS的势结构为CCS.现在将CCS按以下规则分为k组:(1)联盟Ci的势ni(1ik)分在第i组;(2)联盟Cj(k+1jt)按势nj从大到小的次序依次分在当前联盟大小总和最小的那个组,如果Page4这样的组不止一个,可任取一个,按这种分组方法可把CS中的t个联盟分成k组.与前面的分组方法相比,这种分组方法能使达到限界k所需搜索的势结构数大大减少,详见后.4本文给定限界的联盟结构生成算法CSH定义1.给定n,k,取h=n/k,m≡nmodk,若0m<h,设CSH(n,k,h)为势结构{n1,n2,…,ni,1,…,1}的集合,其中1的个数为n-∑in1,n2,…,ni满足以下条件:(1)h-1n1n2…ni2;(2)nj+k·(n1+n2+…+nj-1)n,2ji;(3)当m=0或1时,n1+n2+…+ni-1<h且n1+n2+…+nih;当2m<h时,n1+n2+…+ni-1<h+1且n1+n2+…+nih+1.定义2.给定n,k,取h=n/k,m≡nmodk,若mh,取h=n/k,m≡nmodh,k=n/h,设CSH(n,k,h)为势结构{n1,n2,…,ni,1,…,1}的集合,其中1的个数为n-∑i满足以下条件:(1)h-1n1n2…ni2;(2)nj+k·(n1+n2+…+nj-1)n,2ji;(3)当m=0或1时,n1+n2+…+ni-1<h且n1+n2+…+nih;当2m<h时,n1+n2+…+ni-1<h+1且n1+n2+…+nih+1.算法CSH描述如下:1.搜索联盟结构图的最底二层和顶层:L1,L2,Ln.2.对于给定的n,k,取h=n/k,m≡nmodk,若0m<h,搜索CSH(n,k,h)对应的联盟结构集合;若mh,取h=n/k,k=n/h,搜索CSH(n,k,h)对应的联盟结构集合.3.返回至今为止所得到的最优的联盟结构.定理5.给定n,k,取h=n/k,m≡nmodk,若mh,取h=n/k,k=n/h,则k<k.证明.k=n=k-k-m因为m≡nmodk,从而m<k,k-m>0,所以k<k.定理6.给定n,k,取h=n/k,m≡nmodk,显然m<k.若0m<h,搜索CSH(n,k,h)对应的联盟结构集合,限界是k,且是紧的.若mh,取h=n/k,m≡nmodh,k=n/h,搜索CSH(n,k,h)对应的联盟结构集合,限界是k,且是紧的,满足限界是k.组,则最后一组势为1;k+1组,则最后一组势m;过;如果由多元素组成,有3种情况:证明.先证明限界是k.把CS按以上规则分组:m=0时,最多分成k组;m=1时,最多分成k+1组,且如果分成k+12m<h时,最多分成k+1组,且如果分成前k组如果由单元素组成,则在L1,L2中已搜(1)如果不含1,则在CSH(n,k,h)中已搜过;(2)如果含有1,又含有大于1的元素,则最多含有h-1个1,容易证明在CSH(n,k,h)中已搜过;(3)如果全为1,则在Ln中已搜过.如果有第k+1组,有两种情况:(1)m=1,此时最后一组的势为1,它可以放在前面任意一组中,且在CSH(n,k,h)中已搜过;(2)2m<h,此时最后一组的元素个数最多为m,而前面k组中势为h的单元素组至少有m个,把最后一组中的每个元素分别放在势为h的不同的单元素组中,容易证明放进后这些组在CSH(n,k,h)中已搜过.根据引理1和定理4,限界是k.下面证明限界是紧的.情况1.m=0,取CS的势结构为{h,h,h,…,h}(k个h)的某一联盟结构,这个联盟结构由k个大小为h的联盟构成,取任一特征函数V,对这k个联盟均赋值1,即V(C)=1,|C|=h,其它的联盟均赋值0.由于CS中任一联盟都已搜索过,即V(CS)=k,但CS中任意两个大小为h的联盟都不在已搜索过的同一联盟结构中一起出现过,即V(CSN)=1,从而即限界k是紧的.情况2.m=1,取CS={C1,C2,…,Ck,Ck+1},|C1|=|C2|=…=|Ck|=h,|Ck+1|=1,取任一特征函数V,令V(C1)=V(C2)=…=V(Ck)=1,其它的联盟均赋值0,则V(CS)=k,但CS中任意包含大小为h的两个联盟都不在已搜索过的同一Page5联盟结构中一起出现过,即V(CS即限界k是紧的.情况3.2m<h,取CS={C1,C2,…,Ck,Ck+1},|C1|=|C2|=…=|Ck|=h,|Ck+1|=m<h,取任一特征函数V,令V(C1)=V(C2)=…=V(Ck)=1,其它的联盟均赋值0,则V(CS)=k,但CS中任意包含大小为h的两个联盟都不在已搜索过的同一联盟结构中一起出现过,即V(CS从而即限界k是紧的.若mh=h-1,k=nnmodh,有m<h,且n=k·h+m,这里先证明k<m.按3.4节的分组方法把CCS中的元素分成a组,当m=0时,ak,即CCS最多可以分为k组,且每一组中的元素均同时被搜索过,这时限界kk;当m≠0时,a=k+1,除由最后剩余元素组成的第k+1组外,其它组的元素和h,且至多m个组的和大于h.不妨设CCS中组{h}的个数为p(p2),且第k+1组中元素和为q,则有即k·(h+1)-p+qn.又n=k·h+m<k·(h+1),(因为m<h),所以q<p.这表明第k+1组中元素的个数少于CCS中组{h}的个数,可以将第k+1组中的各元素分配到这p组{h}中的不同组,使CCS最多可以分为k组,因此,类似0m<h的情形,同理分m=0,m=1和2m<h3种情况可证明搜索CSH(n,k,h)对应的联盟结构集合,限界是k,且是紧的.根据定理5,k<k,因此限界是k.详细证明过程从略.5相关算法的比较算法1[2]讨论了以最少的搜索层数达到给定的限界要求,给出了一种以层为单位的最优搜索算法:在搜索联盟结构图的最底两层之后,当给定的限界k3,只搜索一层就得到满足限界的解.当2k<3,最多需要搜索两层就能得到满足限界的解.算法2[3]需要进一步搜索最大联盟的势大于或等于n(k-1)/(k+1)的所有联盟结构.算法3[4]搜索势结构集合CCS(n,k)所对应的联盟结构可保证限界k(k2).表1和表2给出n=50时各算法在搜索完层L1,L2和Ln层后需要进一步搜索的势结构数和联盟结构数(注:表1中给出的数据未计入层L1,L2和Ln的势结构数,表2中给出的数据取以10为底的对数值,k26648—137699431002927025619443859270513589867789874225982225992212810111281111125135145155162172182192202212222232242k245.8807—33.564933.4970340.135532.810124.786724.4859435.547032.810120.430119.6509529.886822.739617.917416.9081626.886822.739615.565915.4118723.180417.731313.894513.8944819.403817.731312.433112.2253919.403815.257612.433112.22141015.412815.257610.360710.36071115.412812.425210.360710.36071210.827812.42528.81748.81741310.827811.00568.81748.25721410.827811.00568.81748.25721510.82789.52138.81748.2572165.85169.52137.347.3400175.85168.04677.345.8394185.85168.04677.345.8394195.85168.04677.345.8394205.85168.04677.345.8394215.85166.51907.345.8394225.85166.51907.345.8394235.85166.51907.345.8394245.85166.51907.345.8394Page6未计入层L1,L2和Ln的联盟结构数,另外,对于限界k=2,算法2未给出解,表中用“-”标示).例如:当n=50,k=3时,h=50/3=16,m=2,h=h+1=17,本文的算法CSH需进一步搜索CSH(50,3,17)={{16,2,1,…,1},{15,5,1,…,1},{15,4,1,…,1},…,{15,2,1,…,1},{14,8,1,…,1},{14,7,1,…,1},…,{14,3,1,…,1},{14,2,2,…,1},{13,11,1,…,1},{13,10,1,…,1},…,{13,4,1,…,1},{13,3,2,1,…,1},{13,2,2,1,…,1},{12,12,1,…,1},{12,11,1,…,1},…,{12,5,1,…,1},{12,4,2},{12,3,3},{12,3,2},{12,2,2,2,1,…,1},{11,11,1,…,1},{11,10,1,…,1},…,{11,5,2,…,1},{11,4,4,…,1},{11,4,3,…,1},{11,4,2,…,1},{10,10,1,…,1},{10,9,1,…,1},{10,8,1,…,1},{10,7,1,…,1},{10,6,2,1,…,1},{10,5,5,1,…,1},{10,4,4,1,…,1},{10,4,3,1,…,1},{10,4,2,2,1,…,1},{9,9,1,…,1},{9,8,1,…,1},{9,7,2,1,…,1},{9,6,5,1,…,1},{9,6,4,1,…,1},{9,6,3,1,…,1},{9,6,2,1,…,1},{9,5,5,1,…,1},{9,5,4,1,…,1},{9,5,3,1,…,1},{9,5,2,2,1,…,1},{9,4,4,1,…,1},{9,4,3,2,1,…,1},{9,4,2,2,1,…,1},{9,3,3,3,1,…,1},{9,3,3,2,1,…,1},{9,3,2,2,2,1,…,1},…,{2,2,2,2,2,2,2,2,2,1,…,1}},共194个势结构.而当n=50,k=3时,h=16,m=2,算法3需进一步搜索CCS(50,3)={{15,15,1,…,1},{15,14,1,…,1},{15,13,1,…,1},…,{15,2,1,…,1},{14,14,1,…,1},{14,13,1,…,1},{14,12,1,…,1},…,{14,3,1,…,1},{14,2,2,…,1},{13,13,1,…,1},{13,12,1,…,1},{13,11,1,…,1},…,{13,4,1,…,1},{13,3,3,1,…,1},{13,3,2,1,…,1},{12,12,1,…,1},{12,11,1,…,1},{12,10,1,…,1},…,{12,5,1,…,1},…,{12,2,2,2,1,…,1},{11,11,1,…,1},{11,10,1,…,1},{12,10,1,…,1},…,{11,6,1,…,1},…,{11,2,2,2,1,…,1},…,{2,2,2,2,2,2,2,2,2,1,…,1},{16,2,1,…,1}}共256个势结构.当n=50,k=2时,与算法3需搜索的1376个势结构相比,算法CSH减少382个势结构,这里不再一一列出.6结束语联盟形成是多Agent系统中Agents交互的一种重要的形式,最优联盟结构生成是联盟形成中的一个关键问题.Sandholm等人[1]已经证明,要建立最坏情况下的限界k,搜索联盟结构图的最底两层是必要且是充分的.当实际应用提出最坏情况的具体限界要求时,在搜索联盟结构图的最底两层之后如何进一步以最小的搜索量获得这个限界,是个长期以来未能解决的问题.Dang和Jennings[3]在搜索最底两层及顶层后,将最优联盟结构分成2q-1组,进行搜索,对于限界k3且为奇数,在搜索最底两层及顶层后,进一步搜索最大联盟的势大于或等于n(k-1)/(k+1)的所有联盟结构;Su等人[4]的算法在搜索最底两层及顶层后,按不同的方法分组进一步减少搜索的势结构数,从而使需要搜索的联盟结构数减少,是我们所见到的这一领域的当前最好成果.本文深刻分析了不同的分组方法和分组的均匀程度对势结构数的影响,对需要搜索的势结构数的影响,考虑到给定限界在最坏情况下对分组的要求,提出一种新的通用的分组方案和一个新的联盟结构生成算法,使搜索的势结构数和联盟结构数都大大减少,并给出相关结果的理论证明.
