Page1数据世系管理技术研究综述高明1)金澈清2)王晓玲2)田秀霞1),3)周傲英2)1)(复旦大学计算机科学技术学院上海市智能信息处理重点实验室上海200433)2)(华东师范大学软件学院上海市高可信计算重点实验室上海200062)3)(上海电力学院计算机与信息工程学院上海200090)摘要世系描述了数据产生、并随时间推移而演变的整个过程,它的应用领域很广,包括数据质量评价、数据核查、数据恢复和数据引用等.数据世系大致可分为不同数据源之间的数据演化过程和同一数据源内部的数据演化过程,即模式级和实例级数据演化过程.文中以模式级和实例级数据世系的表示、查询为主线综述数据世系的研究进展.模式级世系部分主要介绍了查询重写和模式映射的世系追踪技术,实例级世系部分则从关系型数据、XML数据、流数据三方面总结了新近的研究进展.文中还综述了跟踪不确定性数据及其演化过程的研究进展.最后,列举了数据世系管理的应用,并讨论了世系分析研究面临的挑战及未来的研究方向.关键词数据世系;世系半环;数据集成;数据空间;不确定数据1引言近年来,数据规模不断扩大、共享范围愈来愈广、数据形式日趋多样化.以互联网应用为例,网页的数量正在以惊人的速度增长,这些数据构成一个庞大的、复杂的、异构的数据环境.据中国互联网络信息中心(CNNIC)发布的《第23次中国互联网络发展状况统计报告》显示,“截至2008年底,中国网页总数超过160亿个,较上年增长90%”.传统的数据集成方法关注集成后的目标数据,而忽略了数据的清洗和中间处理过程.而中间数据集合层次丰富、来源不同、质量各异、结构不一致.因此,分析数据产生和演化的过程,进而评价数据的质量和正确性等,乃至修正数据结果就显得尤为重要.自1990年,Wang等研究异构数据库系统中数据的世系以来[1],数据世系得到了越来越多的关注.很多研究者从不同角度定义了数据的世系,影响较大的有如下几种:(1)1991年,Lanter定义GIS中数据的世系(datalineage)是有关产生这个数据项的原始素材和演化过程的信息[2].(2)1997年,Woodruff等定义数据的世系(datalineage)是有关数据处理历史的信息集合,包括数据起源(源数据的标识符、所属文件、文件的操作信息)和数据演化过程(运用的算法和相应参数)[3].(3)2000年,Cui等定义数据的世系(dataline-ageorprovenance)是关于数据演化信息的集合[4].(4)2001年,Buneman等限定在数据库应用中定义数据的世系(dataprovenance,lineageorpedi-gree)是数据库中数据项的源数据和处理过程[5].(5)2005年,Simmhan等定义数据的世系(dataprovenance)是用于确定输出数据的演化历史和源数据信息[6].(6)2007年,Glavic等定义数据的世系(dataprovenance,lineageorpedigree)包括数据项的产生和具有当前的表现形式所经历的处理过程和源数据信息[7].综上定义,我们把数据的产生、并随时间推移而演化的整个过程信息叫做数据的世系(dataprove-nance).根据数据世系的定义,数据世系包含静态的源数据信息和动态的数据演化过程,但很多研究者并没有区分这两部分[4-5,7].在不同应用场景下,datalineage和dataprovenance还是有区别的,前者侧重于追踪数据库中数据项的来源,而后者则侧重于描述各种不同应用中数据来源和演化过程的信息,包括了更加丰富的元数据信息.传统的信息集成技术注重数据的形式,管理的对象依然是数据.而目前需要在庞大的异构环境中提供数据共享,这使得传统的数据库技术(注重数据的格式)在数据模型、数据集成、查询与索引等方面显得力不从心,在此背景下,谷歌、雅虎、百度等提出的数据空间概念获得了广泛的重视.无论是传统信息集成技术还是数据空间技术都实现了异构数据源中数据的共享,其中数据的世系包含了在不同数据源间的数据演化过程和相同数据源内部数据的演化过程.本文首先通过几个实例说明数据世系分析和管理的重要性以及数据世系的应用分类;第2节、第3节分别以模式级和实例级数据世系的表示、查询为主线综述数据世系的研究进展,模式级数据世系主要考察了查询重写和模式映射技术;实例级主要从关系型数据、XML数据、流数据世系的表示和查询的角度考察数据世系的研究进展;针对不确定性数据,综述了跟踪数据及其不确定性的演化过程方面的研究进展;第4节和第5节分别叙述了数据世系的应用现状和展望了未来数据世系的研究方向;最后部分总结全文.2背景数据世系的应用非常广泛,可用于追踪不同数据源间和同一数据源内部数据的演化过程.同时,在数据演化过程中不可避免地产生不确定性,因此,数据世系可同时追踪数据以及不确定性的来源和演化过程.2.1数据世系应用举例2.1.1数据集成为了便于使用信用卡,很多用户将一个借记卡绑定在信用卡上,在还款到期日直接从借记卡上扣除本期还款金额,信用卡管理数据库中同时包含了这两部分信息.图1给出了一个简单的数据集成例子,银行客户信息数据库集成来自该银行信用卡管理数据库和借记卡用户管理数据库中的数据,该例子展示了将信用卡管理数据库集成到客户信息数据库中的过程.Page3图1数据集成的一个例子源数据库S包括持卡人表和借记卡表,目标数据库T包括账户表和客户信息表.映射m1、m2定义了源数据与目标数据间属性的对应关系,m3定义了目标数据库中属性间的对应关系.m1:S.持卡人(卡号,额度,身份证号,,)→m2:S.借记卡(,身份证号,姓名)→m3:T.账户(,,持卡人身份证号)→根据对应关系m1、m2和m3将源数据实例I转换为目标数据实例J.如果现在银行要通过客户信息表来发掘潜在的信用卡违约用户,需要了解用户更多的信息,比如工资.但数据集成过程中并没有将工资信息集成到客户信息数据库中,我们需要通过这些对应关系找到相应客户信息的来源.在数据实例I和J中,可以通过m1找到和账户(001,50K,ID1)匹配的源数据元组持卡人(001,50K,ID1,赵明,10K).找到目标数据的来源发现该用户的年收入只有10K,显然在目前的状况下他违约的图2数据流世系的例子风险很大;根据账户(124,L2,ID2)发现该用户没有信用额度的记录,可以通过对应关系m3在目标数据中找到和账户(124,L2,ID2)匹配的客户信息(ID2,王芳)元组,再通过m2找到和客户信息(ID2,王芳)匹配的目标数据源中的元组借记卡(124,ID2,王芳),发现她是借记卡用户没有信用额度数据项,目标数据记录是正确的;在知道对应关系m1,m2,m3的情况下,一旦客户信息数据库崩溃,可以通过这些对应关系恢复客户信息数据库.事实上,现实应用要远比例1复杂.数据集成可能集成来自关系数据库、面向对象数据库、网络服务器、文件系统等数据源的数据;在数据集成环境下追踪不同数据源间数据的演化过程,由于不知道显式的数据项,只能从模式级考虑数据的世系以响应数据引用、数据核实、数据恢复等应用.2.1.2数据流图2是数据世系在流数据异常检测方面的应用.某制药车间用温度传感器监控室内温度,每间隔1分钟读取一个数据,经图像解析工具解析后得到原始数据流,如图左边所示,聚集由不同传感器产生的原始数据进行数据清洗,数据清洗时加入设备的测量误差±1.0,再通过用户接口将清洗得到的数据范围的最大值显示出来,并根据用户自定义的告Page4警阈值40判断是否有异常发生(异常被定义为温度数据的上限超过40).如图,某个传感器读取的温度经数据清洗后为51.4±1.0,上限超过40,所以用户接口上显示一个异常温度52.4并向用户告警,但是仅凭告警和图形化显示用户无法判断异常发生的原因.世系可以跟踪数据的读取一直到数据显示的整个过程.我们可以通过世系标注每一条数据流的来源和时间来准确定位异常发生的时间和位置.比如传感器S在t1时刻读取的温度表示为(51.4,S,t1)(其中S和t1都作为数据51.4的标注信息),经数据清洗后原始数据加入清洗规则表示为(51.4,S,t1,±1.0),通过链接将(51.4,S,t1,±1.0)和用户界面上显示的52.4连接起来.当用户界面显示异常温度52.4并向用户告警时,用户可以通过用户界面上的52.4链接到底层数据(51.4,S,t1,±1.0),继续追踪到原始数据(51.4,S,t1),通过前后两次数据的比较可以断定数据的演化符合数据清洗规则,直至回溯到原始的图像资料才发现温度图片显示为21.4,从而确定异常产生的原因为图像解析错误.同样,在电信网络流量管理中,一些异常检测工具能够及时地发现网络流量中的异常,但是这些工具并不能检测出是什么原因导致的异常,异常发生在哪里?如果系统能够追踪流数据的世系,那么用户可以确定数据演化过程以及产生异常的原始流,定位并确定异常产生的原因.图3一个不确定世系分析的例子ID21(张三,沪H73):0.8‖(张三,沪H13):0.222ID(驾驶员,车牌)31(王五,沪H73)32(赵六,沪H13)(b)驾驶记录表图4不确定性数据库中的世系分析例子传统的不确定性数据库中,通过可能世界模型对不确定性进行建模.图5是目击调查表的可能世这里给出了数据流场景下世系应用的例子,与关系型数据和XML数据世系的应用类似,数据都具有特定的模式.在这些应用中,数据被显式的表示出来,考察数据在数据实例内部进行演化,可以从元组级或更细粒度(属性级)来考察数据的世系.2.1.3不确定性数据图3是不确定数据世系的应用,记录了某路口交通肇事者被指控的取证过程.目击者调查笔录是该路口交通事故调查笔录,张三和李四是两个目击证人.张三看到的车牌是沪H73或是沪H13,但两个选项不可能同时发生,据张三回忆是沪H73的可能性更大,可信度定为0.8,而沪H13的可信度为0.2;李四并不能确定肇事车辆一定是沪H13,可信度为0.7;综合目击者调查笔录和公安局交通管理分局信息系统,可以找到被指控人和相应的目击者;把这些信息集成到取证调查数据库中,如图4(a)的目击调查表所示.与传统数据库相比,这里一条记录是传统数据库中若干元组的集合,并且每个可选项对应一个概率,表示这个可选项的可信度.例如,元组21相当于传统数据库中两个元组(张三,沪H73)和(张三,沪H13)的集合;(b)是驾驶记录表,记录了所有轿车以及车主,准确无误;(c)是通过上述两个表生成具有3项记录的指控表,指控表中数据来源字段记录了产生指控记录的证据.例如,张三指控王五,证据是目击调查表中记录21的第一选项与驾驶记录表中的记录31.界实例,每个可能实例对应一个发生的概率,综合所有可能世界实例得到最终查询结果的不确定性描Page5述.如元组41可能是可能实例1和可能实例3与驾驶记录表连接得到的,所以元组41的发生概率为图5目击调查表的可能世界引入世系后,我们可以知道元组来自哪些数据源,从而确定数据不确定性的来源,并且可以知道数据的产生方式从而可以计算不确定性的大小.如元组41中,通过数据来源字段发现该元组来自元组21的第一个选项和元组31,从而确定不确定性来自元组21的第一选项,与其它数据项无关,故该元组的不确定性大小就是0.8,而不需要用可能世界模型对不确定性进行建模,简化问题处理过程.以上通过几个实例简单说明了数据世系管理的应用.实际上,数据世系的潜在应用有很多,为了更好地理解数据世系的应用,下面对数据世系的应用作个归类.2.2数据世系应用分类将这些应用划分成以下4类[6]:统观数据世系管理的应用,根据目标不同可以(1)数据质量.数据集合的质量问题是大型应用所关注的重要问题.高可靠性的查询结果往往依赖于高质量的输入数据.但是,仅凭独立的数据集合难以轻易判定其质量高低,必须结合世系信息深入了解数据产生、演化的具体过程才能合理评估数据集合的质量.(2)数据核实.人机交互、多样化的数据演化过程对系统的可靠性造成很大影响.大多数系统加工、汇总或集成了外部数据源,甚至还需要不断的人机交互,想要确切地了解数据演化过程中是否产生错误,错误产生在哪一环节,支持世系查询的系统能够回答这两个问题.(3)数据恢复.系统的可用性和可维护性是每个系统都需要考虑的问题.随着数据源的更新,系统也在不断的更新,数据的世系描述了数据的演化过程而被保存下来.当系统中数据不可用时,可以根据数据源和世系信息重构这些数据,保证顺畅的数据通信.(4)数据引用.数据引用信息增加了源数据、中间数据和结果数据的可读性.实际应用中最大限度的数据共享可以减少数据冗余、避免重复劳动,记录数据引用信息可以很好地保证数据的可读性.世系信息可以描述数据的引用情况,增加数据的可读性.0.56+0.24=0.8.ID(目击者,车牌)21(张三,沪H73)Pr(3)=0.243模式级数据的世系异构数据源间的数据共享问题一直是数据集成的核心问题之一.不同模式的数据源间进行的数据演化过程是数据集成的关键部分,由于不知道数据的具体形式从而无法标注数据项的世系,只能利用模式级数据间的对应关系追踪数据在不同模式间的演化过程.Glavic和Alonso提出了Perm(Prove-nanceextensionoftherelationalmodel)查询重写技术[8];Kolaitis提出了模式映射方法[9].3.1查询重写Perm查询重写技术将原始的关系模式转化为另外一个关系模式使其支持数据世系的查询,实际上利用了数据交换技术来追踪数据演化过程,但仅局限于关系模式之间的数据交换.3.1.1数据世系的表示Glavic和Alonso制定了SQL语句重写规则,扩展了SQL的查询能力以支持针对数据世系的查询;图6为某超市商品销售数据库,在该数据库上执行查询Q,Q:Π商品名,sum(价格)(σ商品编号=编号(销售表×价格表))得到查询结果数据表.结果数据表中元组(咖啡,145)的世系包括了来自销售表中的元组(咖啡,1)、(咖啡,2)和价格表中的元组(1,100)、(2,45).按照文献[4]中的世系表示法,将元组(咖啡,145)的世系表示为({(咖啡,1),(咖啡,2)},{(1,100),(2,45)}).但这种世系表示法不能用关系来建模;如果数据继续演化下去将无法确定哪些元组是源数据,哪些是中间数据,因为集合中元素是没有顺序的.Glavic和Alonso提出了查询重写技术,将元组的世系信息统一到关系模型中,直接用SQL语句查询数据的世系.关系模式(商品名,总价,P(商品名),P(商品编号),P(编号),P(价格))为查询重写后的关系,其中P(·)是基本关系(销售表和价格表)中的一个属性,表示了整个元组的来源信息.结果数据Page6表中元组(咖啡,145)利用查询重写技术表示为{(咖啡,145,咖啡,1,1,100),(咖啡,145,咖啡,2,2,45)},同样可以说明元组(咖啡,145)的世系为({(咖啡,1),(咖啡,2)},{(1,100),(2,45)}).用关系模型对数据的世系进行建模,可以充分利用关系数据库技术来管理数据的世系.商品名商品编号咖啡1咖啡2巧克力3巧克力3传统技术中,数据世系与数据本身的表示方法不同,且需要保存在磁盘上,而不保存数据世系的SQL查询重写方法不仅可以减少存储空间,并且可以充分利用数据库技术对世系查询进行优化等[8]操作.Perm技术运用9条查询语句重写规则,其中第一条规则是利用重命名语句在原来关系上添加属性表示数据的世系,其余八条规则分别描述了对应不同代数算子数据世系的演化过程.3.1.2数据世系的查询由于转化后的模型仍然是关系模式,且支持世系查询,所以可以直接利用SQL对其进行查询.在Perm中查询1用SQL可以改写为SELECTPROVENANCE商品名,sum(价格)FROM销售,价格WHERE商品编号=编号GROUPBY商品名;其中关键词PROVENANCE表示在查询结果中需要利用查询重写技术标注出结果数据元组的世系信息.传统的世系管理系统仅支持SQL的子集查询,Perm通过重写SQL语句扩展SQL的查询能力,但是对于子查询中嵌套另外的查询(sublinks),Perm和其它方法一样是无法处理的.Glavic和Alonso重新制定了8条查询重写规则,使得SQL能够支持sublinks查询,进一步扩展了SQL的查询能力[10].查询重写技术仅考虑了关系模式与关系模式的数据交换使其支持数据世系的查询,而无法支持关系模式与XML模式、XML模式与XML模式间的数据交换,3.2节将介绍利用模式映射技术实现追踪不同数据模型间数据的演化过程.3.2模式映射模式映射是数据集成、数据交换、P2P环境下数据共享、模式集成和模式演化等应用的一个基本工具,描述了不同数据源间数据是如何演化的.追踪模式映射可用于评价数据的质量、核查数据的正确性、增加数据的可读性等.3.2.1数据世系的表示模式映射可以追踪不同模式间数据的演化过程.当源数据模式发生变化时,模式间的映射也要发生变化,此时需要考虑映射组合技术.(1)模式映射.四元组M(S,T,ΣST,ΣT)被称为是模式映射,其中S为源数据模式,T为目标数据模式,ΣST描述了源数据模式和目标数据模式间的相依关系,是所有S-T相依关系的集合,ΣT是目标模式内部数据间的相依关系.(2)映射组合.设M12为模式σ1和σ2间的映射,M23为模式σ2和σ3间的映射,则M12和M23的映射组合M12M23也是一个模式映射,它表示了σ1和σ3间的相依关系.已有的模式映射工具MapForce[11]、BizTalk[12]、Studio[13]、Clio[14]等主要应用于不同数据源间的数据共享.模式映射不同于传统的映射,不仅存在一对多而且可能存在多对一的情形,得到的数据对应关系可能具有不确定性.用户通过查询所有可能的映射关系找到目标数据对应的数据源,在数据源内部追踪到数据项更加细粒度的数据来源和演化信息.映射组合从动态的观点来看待不同模式间数据的演化过程,它主要运用在两个方面[15]:(1)模式演化.当源数据模式发生变化时,模式间的映射关系也要发生变化,如M12为模式σ1和σ2间的映射,而σ1是由σ1演化而来,M表示了σ1和σ1间的相依关系,那么MM12表示了演化后模式σ1和目标模式σ2间的相依关系;(2)表示多个模式间顺序演化过程.Mij为模式σi和σj间的映射,其中1i<jn,则映射组合M1n=M12M23…M(n-1)n为模式σ1和σn间的映射关系.Madhavan和Halevy[16]第一个研究映射组合问题,随后,映射组合作为支持模式更新、数据交换、数据集成和其它数据管理任务的主要工具得到了足够的重视[17-19].3.2.2数据世系的查询图1是模式映射方法的一个例子,给出的m1、m2和m3是源数据和目标数据间的模式映射.可以通过查询一个源数据模式和目标数据模式间的映射关系找到目标数据的世系,例如:在数据实例I和J中,通过m1只能找到账户(卡号,信用额度,持卡人身份证)和持卡人(卡号,额度,身份证号,姓名,工Page7资)间的对应关系,再通过源数据内部的条件查询找到账户(001,50K,ID1)的来源为持卡人(001,50K,ID1,赵明,10K);也可以通过映射m3找到和账户(卡号,信用额度,持卡人身份证号)匹配的目标数据元组客户信息(身份证号,赵明),再通过映射m1找到和客户信息(身份证号,赵明)匹配的源数据元组持卡人(卡号,额度,身份证号,姓名,工资),再通过数据源内部的条件查询找到账户(001,50K,ID1)的来源是持卡人(001,50K,ID1,赵明,10K);这说明了这种方法确定数据的演化过程可能是不唯一的,找到的模式级数据世系存在不确定性.由上述分析可以看出,模式映射的方法追踪数据的演化过程,不需要事先在本地存储各数据项的注解信息,因而更灵活且空间效率高,这种方法适合追踪不同数据源间数据的演化过程,主要应用在数据交换和数据集成等场景下.Chiticariu等[20]也研究了XML数据世系的模式映射表示法,他们通过表示关系与关系、关系与XML、XML与XML数据间可能的映射关系,找到数据可能的世系.通常,模式映射技术没有注解信息来标注数据项的世系,这种隐式的世系表示法被称为非注解表示法[21].但是,Orchestra系统中将模式间数据演化和同一模式内部数据的演化过程综合在一起形成一种显式的世系表示方法[22-23].传统的数据管理技术大多关注计算的处理速度,强调数据的组织方式,但许多新兴应用却可能包含诸多半结构或非结构化数据,例如文本、图片、音频和视频等,如何在大型异构环境中追踪数据的产生和演化过程就极具挑战性.4实例级数据的世系用户通过查询所有可能的映射关系,找到模式级数据的世系,想要获取更细粒度的世系,还需要在某数据源内部考察数据的演化过程,即实例级数据(a)元组编号标注(b)lineage标注(c)why世系标注(d)how世系标注图7标注数据库数据世系的例子执行查询(2)用lineage标注查询结果如图7(b)所示,注解属性描述了查询结果中元组的世系,的世系.和模式级数据的世系不同,实例级的数据项可以被显式地表达出来,通过对数据进行标注得到更细粒度的数据世系.由于实例级数据演化过程都是在同一个模式内部进行的,所以我们分别从关系型数据、XML数据、流数据的实例出发考察数据世系的表示和查询.针对数据对象具有不确定性,考察数据以及不确定性的演化过程.4.1关系型数据的世系关系型数据是单一的二维表格结构,使用高度非过程化的关系语言,用户只需要说明“做什么”而不必说明“怎么做”.由于其简单易操作且应用广泛,使得关系型数据的世系的表示和查询等也得到了广泛的研究.4.1.1数据世系的表示由于实例级数据具有显式的表达方式,所以数据项的世系也可显式地表达出来.注解表示法由来已久,它在关系表上额外增加一个属性来表示注解信息,用于对数据项的元数据进行管理,这些注解信息可以是概率[24-25]、置信度、布尔变量[26]等.世系的注解表示法是在关系上额外增加属性作为元组或者属性的注释信息表示数据对象的世系,例如在图7(a)中,关系表R中注解属性标注了元组或属性的世系.Buneman将XML中数据节点的世系分为why世系和where世系[5],而在关系数据库中,当注解属性用来标注属性A的世系时,标注信息表示元组(x,y,z)中属性x的世系,称它为where世系;当用特定的注解方式来标注元组世系时,标注信息表示了元组(x,y,z)的世系信息,称这种世系为line-age或why世系.在关系表R上执行查询:Q(R)=ΠAC((ΠAB(R)ΠBC(R))∪关系R作为数据源,用元组编号标注世系信息(即图7(a)中元组编号作为注解,表示元组的世系信息).AC注解信息xz{{p}}xw{{p,r}}uz{{p,r}}uw{{r},{r,s}}vw{{s},{r,s}}这是在数据仓库中Cui等考虑的数据世系表示方法[4];图7(b)中第2条记录(x,w)的标注信息是Page8{p,r},表示了该元组来自图7(a)中的元组p和r.这种世系表示法无法知道由图7(a)中的元组p和r如何生成图7(b)中第2条记录(x,w),并且无法判断图7(b)中元组(u,w)和(v,w)的演化过程有什么不同.执行查询(2)用Buneman考虑的why世系标注查询结果如图7(c)所示.虽然知道了元组(u,w)和(v,w)的世系有所不同,但无法完全知道由图7(a)中的元组r和s如何生成图7(b)中第2条记录(u,w)以及元组r和s通过哪些方式演化到元组(u,w).虽然lineage和why世系都可以追踪到数据的来源,但是,lineage无法判断数据对象的演化过程;而why世系也没有完全的记录数据的演化过程,因此它们都不能完整地追踪数据的演化过程.Green引入了世系半环[27]的概念.世系半环是由自然数集、×和+两种运算、一个单位元1和一个零元0构成的五元组K(N,+,×,0,1),其中关系代数运算连接表示为×,投影和并表示为+,选择断言对应0或1.SQL查询的结果可以被表示为在世系半环上的多项式,多项式系数取值于自然数集,由世系多项式可以推断出更详实的数据演化过程.执行查询(2)用世系多项式标注查询结果如图7(d)所示.该世系表示法不仅描述了元组的why世系,而且还表明了更丰富的元组演化过程.如第4条记录(u,w)的注解信息是2r2+rs表明元组(u,w)可以由3种不同方式得到,由图7(a)中元组r经过两种不同的自连接后投影得到,也可以由元组r和s连接投影后得到;Green将这种世系表示法称为how世系[27].由how世系不仅可以知道数据项的来源,而且可以更精确地推断出数据项的演化过程.与其它世系表示法相比,how世系表达能力更强.关系型数据世系的注解表示法适合应用在数据库内部数据的演化过程,Bose将这种表示方法称为基于查询的世系[28].给定关系模式R(A,B),S(B,C)R:ABS:BCSELECTR.AASA1,R.BASA2,S.CASA3FROMR,SWHERER.B=S.BSELECTR.AASA1,R.BASA2,S.CASA3FROMR,SWHERER.B=S.BSELECTR.AASA1,R.BASA2,S.CASA3FROMR,SWHERER.B=S.B图9PROPAGATE子句应用举例4.1.2数据世系的查询关系数据库中基于注解的查询方法如图8,世系查询语言通常都扩展SQL语句,使得它们能够支持对数据世系的查询,如DBNotes扩展SQL为pSQL,其SELECT查询语句的标准语法规范为[29]SELECTDISTINCTselectlistFROMWHEREPROPAGATEDEFAULT|DEFAULT-ALL|r1.A1TOB1,…,rm.AmTOBm除了能够实现部分SQL查询功能外,在pSQL中还加入了PROPAGATE子句,用于指定输出世系信息的方式.PROPAGATE子句中可选项DEFAULT、DEFAULT-ALL和r1.A1TOB1,…,rm.AmTOBm指定了数据世系的记录策略,它们分别对应着系统默认记录、完全记录和用户指定记录策略[30].通过这3个数据世系的记录策略,用户可以指定用户偏好的数据来源和演化方式,比如指定数据来自数据质量比较高的数据源,或者比较可信的数据源等.图9给出了3个查询分别对应3种不同的记录策略,查询1为默认记录策略,查询结果中属性B的世系来自关系R中的B属性;查询2为用户指定记录策略,查询结果中属性B的世系由子句PROPAGATEs.BTOA2指定来自关系S中的属性B;查询3为完全记录策略,查询结果中属性B的世系分别来自关系R和S的B属性.Ans:A1A2A3Ans:A1A2A3Ans:A1A2A3Page9数据的演化过程也是数据世系的演化和丰富的过程.世系能够追踪到数据的来源,必须要考察世系的记录和传递策略.对世系的注解表示法而言,Buneman考察where世系在数据库中的传递过程,图10描述了对应不同的代数算子其世系的传递策略.以投影为例,查询投影在A3属性上,图中列出了在A3上具有相同属性值的3条不同记录,将该属性值的3个不同来源记录在同一个标注属性上作为投影后该属性值的世系.本节考察了where世系的记录和传递策略.对不同代数算子,how世系和why世系的记录和传递策略和where世系的情形类似.4.2XML数据的世系XML数据是应用非常广泛的半结构化数据,由于XML数据自身的特点使得它成为数据共享和数据交换的主要工具,Buneman首先开始研究XML数据世系的管理[5].4.2.1世系表示法类似地,可以采取关系型数据世系的表示法,对XML数据节点进行标注来描述XML数据的世系.Foster扩展了世系半环概念,定义了无序XML数图12标注无序XML和K-UXQuery据上的世系注解表示法[31].XML数据中每个节点都对应一个注解k∈K,五元组K(N,+,·,0,1)构成一个半环,这种经过注解的无序XML数据被称为K-UXML.注解k1·k2表示数据项同时需要遍历k1和k2两个节点,注解k1+k2表示该数据项只需要遍历k1或k2两个节点中的一个,这样就可以用半环多项式表示XML数据的世系.例如图11中树状源数据S对应的XML文件如图左下方所示,每个XML数据节点用上标来注解它,每个节点标注世系信息如图左上方,XQuery查询Q(图11中间)是要求返回源数据S中的属性节点,其查询结果及节点的标注信息展示在图11右下方.节点d的来源由两部分组成,可以在源数据S中用两条路径表示为a/b/d和a/c/d.在查询结果中,节点d的标注信息z·x1·y1+z·x2·y2可以推断出该节点对应源数据中的两条路径a/b/d和a/c/d.针对有序的XML数据,JamesCheney引入了信息次序的概念来表示有序XML数据的why世系[32].4.2.2世系查询Foster研究了XML数据上的世系查询[31],在K-UXML数据基础上提出了K-UXQuery查询语言.与传统的XQuery相比,K-UXQuery可以查询、修改XML数据上的注解信息.但考虑到是无序XML数据上的世系,所以去掉了传统XQuery中的orderby子句.图7中(a)可以表示为图12中的K-UXML树R,查询(2)可以用K-UXQuery改写为图12中的Page10K-UXQuery,除了第1层节点用元组编号标注外,其余节点都标注为1.执行查询的结果返回一个K-UXML树Q(实际上,标注也可以出现在第2层和第3层节点上,但是它们都和第2层的祖先节点的标注相同,为了和源文件表示方法一致所以把标注统一放在第2层),同样可以看出K-UXQuery的查询结果返回了K-UXML数据的how世系[27].换句话说,XML数据的how世系和基于关系上how世系表示法是相容的.和关系上的半环代数类似,这里我们只需要将注解K改成布尔值空间B或概率空间P就可以对不完全XML数据和概率XML数据进行建模[31].用户在XML数据上提交各类查询,有关XML数据各类世系(where,why和how世系)的记录和传递策略等相关工作亟待考虑.4.3流数据的世系有关流数据分析与管理的研究是目前国际数据库研究领域的一个热点.在过去30多年中,尽管传统数据库技术发展迅速且得到了广泛应用,但是它不能处理在诸如电信、传感器网络、金融领域等应用中所生成的一种新型数据,即流数据.流数据的特点是数据持续到达,且速度快、规模宏大[33],对流数据世系的研究刚起步,最新的研究进展并不多.4.3.1世系的表示流数据的世系分析与管理有它自身的特点.首先,通常数据到达速度很快,对流数据进行标注和保存会给系统的吞吐量造成影响;其次,流数据应用只能单遍扫描数据,这就限制了流数据世系的形式;再次,流数据算法执行都在内存中进行,而维护世系是很费空间的任务;再次,流数据世系应该能够响应用户连续查询和即时查询;最后,流数据常常是基于时间的,比如滑动窗口模型,数据过期了但是世系不一定过期;分析可见,在流数据应用场景下进行世系管理和分析是很有挑战的一项任务.给定流数据的模式信息,可以通过标注数据实例来表示流数据的世系,标注信息可以是源数据项,也可以是源数据项的一个链接.对小规模的简单应用,通过标注源数据项可能是充分的,而源数据的链接使得元数据信息独立于数据类型和数据大小,因此更适合在流数据场景下应用.在传感器应用中,Park和Heidemann提出了利用链接模式去追踪元组级的数据处理和重新发布的过程[34],核心是建立发布数据和源数据间的链接.由于传感器网络产生的都是流数据,数据周期性到达,追踪源数据不仅需要链接到具体的传感器,而且还要确定源数据的获取时间以及源数据的演化过程,而追踪数据的演化过程需要记录源数据码、执行的可执行程序、定义中间处理过程的标识符等.Reddy和Santanche等研究通过互联网共享传感器数据[35-36],可以回答(1)数据是哪个传感器读取的?(2)这些数据是怎么被处理的?4.3.2世系的查询由于在流数据模式上增加了标注信息表示流数据的世系,可以通过数据流管理系统(DataStreamManagementSystem,DSMS)提供的接口进行在线的世系查询.在高输入低查询需求的、广泛使用的生物医疗传感器网络中,Blount考虑了由医疗传感器形成的流数据的世系查询,提出了TVC(Time-Val-ue-Centric)模型以解决面向流数据的世系查询[37].但对于具有更高抽样比例的流数据,TVC方法将面临很大挑战.Misra提出了CMIR(CompositeMod-elingwithIntermediateReplay)方法以应对这个挑战,该方法聚集了TVC中的PE(ProcessElement),形成一个虚拟PE,定义虚拟PE的相依关系,从而问题被有效解决[38].4.4不确定性数据的世系不确定性数据[39]在越来越多的应用中扮演关键角色,例如物流、金融、电信等.不确定性数据的产生原因复杂,包括原始数据不准确、粗粒度数据转化成细粒度数据、隐私保护、缺失值处理以及数据集成等[40].在整个数据演化过程中,各环节不断地传递、放大不确定性,从而极大影响了查询结果的质量.支持数据世系查询可以用来评价数据质量;不确定性数据世系必需能够分析不确定性的来源和演化过程.目前针对不确定数据世系的研究工作还比较有限,主要工作是斯坦福大学的Trio项目组开发的ULDB(Uncertainty-LineageDataBases,不确定和世系数据库).以下简要介绍ULDB.4.4.1ULDB的特点(1)U-关系模型.比较传统的关系模型,U-关系中的每个元组对应若干可选项,每个可选项间相互排斥,且每个可选项都对应一个概率,这样的元组被称为x-元组;在U-关系中有一个标注属性用来描述每个可选项的世系信息.(2)世系及其传递策略.x-元组具有不确定性,其世系也具有不确定性;ULDB中世系采取受限传Page11递的策略,即ULDB中的世系只记录最新的数据演化过程,而不是全部的演化过程.(3)查询处理过程.TriQL是ULDB上的查询语言,图13直观地展示了ULDB的查询过程[41].ULDB用可能世界模型对不确定性进行建模,执行TriQL查询相当于在可能世界实例上执行SQL查询,综合所有可能世界实例上的查询得到最终结果,结果中包含不确定性(U)和数据的世系(L).(4)系统架构.系统构建于开源的数据库系统PostgreSQL之上,每个U-关系都以传统关系表的形式存储[42];TriQL查询类似于SQL查询,用户不需要关心U-关系底层是如何存储和表示的,由TrioAPI直接支持TriQL查询,而不确定性和世系的查询由系统内置的函数confidence(·)和lineage(·)来完成.4.4.2模型和基础理论ULDB对x-元组每个可选项的不确定性和世系从物理层和逻辑层进行建模[41,43]构建了U-关系.从物理层上来看,U-关系采取松散耦合的存储策略,数据世系被存储在一个辅助关系表中,每个x-元组对应唯一的标识符;逻辑层上函数依赖理论对关系数据库的设计、范式分解至关重要,Sarma[44]定义了不确定关系的水平和垂直函数依赖(垂直函数依赖的定义和传统关系型数据库的函数依赖理论是相容的),并将水平和垂直函数依赖理论运用在不确定关系的分解上;重点回答了3个问题:(1)测试一个关系实例是否满足一个函数依赖;(2)找出一个关系实例中所有的函数依赖关系;(3)推断不确定查询结果中所有的函数依赖关系.此外,文献[45]提出算法确定不确定关系表示法间的等价关系,最小化了可能性实例集合.4.4.3TriQL查询和优化ULDB还提供一些手段以优化查询处理过程.为提高Trio系统响应查询的速度,Sarma[46]一方面考虑对ULDB中的不确定关系进行索引,以及索引的适用范围;另一方面提出不同的统计量来优化查询计划,对于那些无法精确维护的统计量提出了直方图的估计方法.然而,当一个查询不存在“安全的”查询计划时,运用可能世界模型对不确定性进行建模是#-P问题[47],Sarma[48]研究了利用世系信息追踪数据不确定性的来源.在此过程中,世系可以隔离数据评价和概率评价过程,在数据评价过程中可以不必考虑查询计划的安全性,数据评价的同时记录数据项的世系,概率评价可以在数据评价后的任意时刻进行,从而简化整个数据和概率评价过程.4.4.4其它查询和操作考虑到与传统关系表的区别,在U-关系上,Sarma[49]研究了插入x-元组、插入可选项、删除可选项、更新可选项这4种操作的语义和Trio系统上的实现;可能世界模型运用于精确的聚集查询将产生指数级的查询结果,为此,Murthy[50]定义了聚集属性的上界、下界、期望值查询,它们都只返回单个查询结果.文中考虑在ULDB上的期望计数、期望和、期望平均等聚集操作,使得三类聚集查询能有效执行在ULDB上,同时介绍了执行聚集查询的TriQL语句;Agrawal[51]定义了基于置信度或概率阈值、top-K以及对查询结果按概率进行排序的不确定世系查询,提出查询算法同时理论保证其有效性.4.4.5近似世系查询随着数据集成技术的发展,现实应用中单个数据项的世系信息可能达到几十兆字节,甚至更大,在不影响查询结果的情况下,采取近似世系表示策略追踪若干最重要的世系将更合理、更适用.Re[52]定义了不确定世系的保守近似和激进近似(或者叫充分近似和多项式近似)查询策略;详细讨论了这两种近似策略产生的误差,提供了创建、理解和处理近似不确定世系的基本算法.同一个数据源内部数据的演化过程,针对关系型数据、XML数据和流数据,甚至当数据具有不确定性时,已知了数据项的具体形式,通过直接标注数据项来记录数据项的世系,这种显式的世系表示法又被称为数据世系的注解表示法[53-56].5数据世系的应用自20世纪90年代以来,数据世系的研究取得显著的进展[57-58],并且应用到了多个领域之中.在科学数据管理、商业应用等领域,特别是在分布式环境下,数据世系的管理获得了一些成果,Bose将数据处理过程分为以下几种方式:基于脚本或程序运行Page12的、基于查询的、基于工作流管理系统的和基于服务的方式[28].表1总结了比较有代表性的研究项目和原型系统,其它典型的系统还包括UvAVL-e、表1典型的世系研究项目系统或项目名称数据处理架构Orchestra[22-23,62]SPIDER[20-21]WHIPS[4,62-64]DBNotes[29]Mondrian[64-66]Perm[8]Chimera[67]ESSW[68]Tioga[3]CMCS[69]MyGrid[70]PASOA[71]Trio[72]TheEUProvenanceProject[73-74]Karma[75]VisTrails[76]Wings/Pegasus[77-78]WFMS支持计算密集的分布式工作流的创建和执行WFMS新的工作流和世系管理系统支持数据探索和可视化犹他大学从表1可以看出工作流世系也得到了广泛的研究和重视,但本文主要聚焦在数据世系的管理技术上.前文中提到注解和非注解式的数据世系管理技术得到了广泛的应用,下面将重点介绍前面提到的数据世系管理技术在现实中的应用.5.1Orchestra[22-23,62]Orchestra是一个在P2P环境下支持运用模式映射技术进行数据交换的数据资源共享平台.由于在整个网络中不同资源具有不同的可信度,所以不同节点间数据交换的过程中通过模式映射记录下每个数据实例的世系来追踪数据资源的可信度.Orchestra系统扩展关系模型下的世系半环代数,将其运用到异构数据源的交换中,基于模式映射基础上提出了显式的how世系去追踪数据精确的来源和演化过程.5.2SPIDER[20-21]SPIDER是一个调试模式映射的工具,用于理解、提取和调试源数据模式与目标数据模式间的模式映射.SPIDER的核心是通过显示路径(route)帮助用户理解、提取和调试模式映射,而一条路径描述了从源数据模式到目标数据模式间的映射关系.该工具可以列举出从源数据模式到目标数据模式间的所有路径以及中间数据或中间模式,这里可以将路径理解为模式级的数据世系.和Orchestra相比,尽管它没有显式的记录数据的世系信息,但是可以通PASS、NCSA、UCD/GC、Trident/MSR、Swift、ES3等[59-60],更多项目请参考文献[6,28,59].描述过调试源数据模式和目标数据模式间的模式映射而获得数据世系的查询.5.3WHIPS[4,62-64]WHIPS原型系统能在数据仓库环境下支持实例级任意关系视图(包括聚集查询)的世系查询.该系统并没有显式地表示出数据视图的世系,而是运用反演的方式通过一系列中间的辅助视图最终返回到分布在本节点或其它节点的输入数据.其世系表示方法与SPIDER类似,均可视为隐式的世系表达方式,但是数据世系查询结果与图7(b)中所表示的世系(lineage)比较相似.5.4DBNotes[29]DBNotes是一个注解型的、基于关系数据库的世系管理系统.在该系统中,注解数据的最小粒度是属性级的(where世系).DBNotes扩展了SQL语言,提出了pSQL语言,不仅可以完成类似于SQL的查询,还能用于查询数据的演化信息,容许用户通过pSQL语句指定where世系的传递规则.另外,该系统还支持数据演化过程的可视化.5.5Mondrian[62,65-66]Mondrian是一个基于标注的关系模型原型系统,在“颜色”代数基础上支持数据和标注信息的管理和查询.它使用“块”的概念来标注属性值集合,用不同的“颜色块”来表示不同的标注,并且在“颜色”代数基础上引入了“颜色”查询语言.与DBNotes相Page13比,Mondrian的世系表达更加灵活,能够表示单个属性的where世系以及多个属性甚至是整个元组的why世系.5.6Perm[8]Perm是一个基于开源数据库系统PostgreSQL上的世系查询原型系统[8],采用非注解表示法.Perm使用查询重写规则改写SQL查询,而且这些重写规则均限定在关系代数操作基础上,因此无需改变数据模型就可以对数据的世系进行查询.5.7Trio[62,72]Trio项目组开发了ULDB系统,将不确定性与世系紧密整合在一起.各元组能表述存在级不确定性和属性级不确定性.Trio系统也开发了新的查询语言TriQL,不仅能实现SQL的部分功能,也支持不确定性和世系查询,查询结果包含不确定性和世系信息.此外,不同于其它的世系传递策略,Trio中的世系是受限传递的.6展望未来本节简要叙述数据世系的未来研究方向.6.1数据空间中数据世系的管理随着互联网和数字化技术的发展,数据管理和计算模式正发生着变化并呈现出新的特征.首先,数据是海量的,并且增长速度极快,这对于数据管理和计算模式都是全新的挑战.其实,异构数据越来越普遍,可能包含XML、文本、图片、音频或视频等多种形式.然而,重视数据格式的传统数据管理技术仅限于某几种数据格式,新形势下并不能很好地胜任对数据的建模、索引和查询等.数据空间的概念是数据管理和处理方式的创新,数据空间中不注重数据的格式,数据的格式仅仅是数据的载体,任何格式的数据都可以放在数据空间中.数据空间实质上是淡化数据的组织形式而凸显数据本身的重要性,它的提出使得共享庞大的异构数据源成为可能.而数据空间中数据的冗余性、不一致性可能更为严重,追踪数据的演化可以用来考察数据质量的评价、数据核查以及数据引用等,目前这还是一个空白领域.从文中分析可见,即使是在传统的数据管理模式下,数据世系的管理还有很多的工作亟待考虑,而在新的数据管理和组织方式下考察数据的起源和演化过程将是一个更大的挑战.6.2不确定数据的世系管理不确定性数据在科学研究、经济、物流、金融、电信、公共卫生等领域广泛出现,并且具有多种多样的表现形式.数据的演化过程同时也伴随着数据不确定性的演化,可以利用数据的世系追踪数据不确定性的来源和演化过程.如何利用数据的世系对数据的不确定性进行衡量,目前的工作还比较有限.整合数据的世系,在不确定性数据建模、基础理论、查询评价和查询优化等方面还有大量的工作需要完成.6.3工作流世系的管理工作流(Workflow)技术发端于1970年代中期办公自动化领域的研究,1990年后,相关的技术逐渐成熟起来,也使得工作流系统的开发与研究进入了一个新时期.工作流是对工作流程及其各操作步骤间业务规则的抽象、概括和描述,广泛应用于电信、软件工程、制造、金融、科学实验、卫生保健、航运和办公自动化等领域[79].从表1可以看出,很多工作流世系管理系统被开发出来,但这些系统间工作流世系的表示和查询都是各有特点的.研究统一的工作流世系的表示和查询框架可以提高不同系统间数据的共享和交互,而整合工作流世系和数据世系将实现更大范围内的数据共享,这些都是开放问题.6.4数据世系的挖掘和可视化作为一种新颖的数据分析手段,数据挖掘技术在许多领域中得到了广泛应用.针对数据世系的挖掘技术能够更好地表达数据世系、理解世系查询结果、发现潜在模式.Santos等首先完成了一项基于世系信息基础上的数据挖掘工作,利用聚类技术对收集到的大量工作流和图模式的世系进行分析,以便更有层次地表示和管理数据世系和世系查询结果[80].研究针对数据世系的挖掘和可视化技术在未来仍是一项重要的工作.7总结世系是数据管理的重要内容,自20世纪90年代以来得到了充分的关注.本文重点考察数据的演化过程,分别从模式级和实例级数据演化过程考虑数据世系的表示和查询技术的研究进展.模式级数据世系描述了不同数据源间数据的演化过程,重点总结了基于关系型数据的查询重写技术和广泛应用于数据集成和数据交换等领域的模式映射技术;实例级数据世系描述了同一数据源或同一模式实例内部数据的演化过程,重点介绍了关系型数据、XML数据、流数据世系的表示和查询等技术的研究现状;Page14针对不确定性数据,总结了追踪数据以及不确定性的产生和演化过程的主要工作;同时列举了过去和当前比较典型的世系管理系统,回顾了世系研究的历程,特别是数据世系管理技术在现实中的应用,并展望了世系管理技术未来的研究方向.
