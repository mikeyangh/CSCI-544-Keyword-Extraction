Page1三维面心立方网格下的直线生成算法何丽君1),2)刘勇奎2)孙世昶2)1)(大连理工大学数学科学学院大连116024)2)(大连民族学院计算机科学与工程学院大连116600)摘要以菱形十二面体为体素构成的三维面心立方(Face-CenteredCubic,FCC)网格是六角网格在三维的一种推广,直线生成算法在三维图形和图像应用中是一个非常重要和基础的算法.文中首先研究了二维六角网格下基于附属菱形空间的直线生成算法,然后将其推广至三维FCC网格,得到了一种FCC网格下的直线生成算法,该算法在三维方形网格下的Bresenham算法的基础上,利用附属平行六面体空间的平行六面体与FCC网格空间的体素之间的一一对应关系生成直线.该算法应用简单的判断公式,一步最多可生成3个体素,且只涉及到整数运算,因而没有累计误差.关键词菱形十二面体;面心立方网格;算法;体素;直线生成1引言三维直线作为计算机图形学中基本的几何元素,其生成算法是计算机图形学的重要基础,是计算机图形学及CAD最基本的算法之一,是数控机床和快速成型机控制系统中直线插补算法的数学基础.三维直线生成算法的应用领域包括物体的真实感显示、光线追踪、医学图像的三维重建、体元素绘制、计算机视觉以及立体几何造型.直线生成算法的好坏不仅直接影响图形生成与显示的效率,而且与数控加工和快速原型制造的速度和精度有直接的关系,因此,研究高效、高精度的直线生成算法,对于开发高性能的计算机数控系统具有十分重要的意义.目前,已有较多文献讨论了三维方形网格下的直线生成算法,分别将二维直线生成中有代表性的算法等推广到三维.文献[1-2]在二维直线Bresenham生成算法的基础上,利用三维直线在坐标平面内的投影,将二维直线Bresenham算法推广到三维.文献[3]通过对三维直线特性的分析,充分利用直线的方向性和对称性,结合投影原理,提出了一种基于直线特性和投影原理的三维直线生成算法.文献[4]利用直线在两个坐标平面内的投影,将二维中点画线算法推广到三维,用于三维空间直线的生成.文献[5]利用整数运算来生成面连接体素序列,实现了顶点连接到面连接之间的转换.除了常见的方形网格外,其它的网格也受到人们的关注.体素为六棱柱构成的无通道(tunnel-free)三维网格有两种[6],体素为菱形十二面体和截八面体构成的三维网格分别称为面心立方(Face-CenteredCubic,FCC)网格和体心立方(Body-CenteredCubic,BCC)网格,FCC网格和BCC网格是二维六角网格在三维的推广.与六角网格类似,FCC网格和BCC网格上的体素分布比立方网格更加紧凑和合理,在三维空间具有更好的采样性质.在不影响体数据质量的前提下,FCC网格将采样数据密度变为立方网格的76.98%,即FCC网格能比立方网格减少23.02%的体数据量[7].因此,最近很多研究人员关注FCC网格[8-11],总结了FCC网格的性质和优点[12];提出了类似于步进立方体(MarchingCubes)算法的FCC网格表面绘制重建算法[13],来进行FCC网格体数据场等值面生成和绘制;研究了FCC网格的一般情形(平行十二面体网格)的快速离散傅立叶变换及其并行算法[14];构造了FCC网格的箱样条[15].这些研究说明FCC网格因其良好的采样性质将在三维计算机图形学及CAD中具有较好的应用前景.然而,很少有人研究作为FCC网格的基础算法之一的直线生成算法.本文则提出了FCC网格下的直线生成算法.该算法建立在三维Bresenham算法和附属平行六面体的基础之上,只用整数运算,从而消除累积误差并提高算法速度.该算法为基于FCC网格的真实感显示、体绘制、光线追踪、消除隐藏线面及三维重建等技术提供了基础.2二维六角网格六角网格理论上优于方形网格,主要原因在于方形网格上除了4个边相邻像素外,还有4个点相邻像素,而在六角网格上,每个像素的6个相邻像素都是边相邻的,因而六角网格直线或曲线更平滑;同时,六角网格上的像素分布更加紧凑和合理,因而可以更好地表示图形与图像的细节.文献[16]证明了方形网格和六角网格在几何意义上是相似的,并且比较了两种网格上的绘制直线和圆的算法.文献[17]提出了一种在六角网格上的直线生成算法.本节提出了一种六角网格上的直线生成算法.首先,介绍了六角网格坐标系统附属的菱形空间并分析了它们之间的邻接关系,利用它们之间的一一对应关系和Bresenham算法,建立了一个有效的六角网格直线生成算法.2.1六角网格空间及其附属菱形空间正六边形可以覆盖整个二维空间(即平面),在六角网格上每个像素对应于一个正六边形,而将正六边形的中心称为网格点.所有像素构成了一个数字六角网格空间.记h(x,y)为中心在点(x,y)的像素.Brimkov和Barneva[6]创建了六角网格空间的附属菱形空间.对每个六角网格像素h(x,y),其相应的附属菱形r(x,y)按如下方法生成:菱形的中心和像素h(x,y)的中心相同,菱形边与六角网格空间的单位基向量相等(图1).这样一来,附属菱形空间和六角网格空间具有相同的中心和基向量.图1六角网格像素h(x,y)及其相应的菱形r(x,y)Page3按上述方法建立的菱形空间中,每个菱形r(i,j)有8个相邻菱形,其中4个菱形(r(i+1,j),r(i,j+1),r(i-1,j)和r(i,j-1))与r(i,j)边相邻,相应的六角网格像素(h(i+1,j),h(i,j+1),h(i-1,j)和h(i,j-1))也与h(i,j)边相邻.另外4个菱形(r(i+1,j+1),r(i-1,j+1),r(i-1,j-1)和r(i+1,j-1))与r(i,j)点相邻,此时相应的六角网格像素有两种情形:h(i+1,j+1),h(i-1,j-1)与h(i,j)边相邻;h(i+1,j-1),h(i-1,j+1)与h(i,j)不相邻.表1中列出了它们的相邻关系.相邻的坐标对(i,j)和(i+1,j)边相邻边相邻(i,j)和(i,j+1)边相邻边相邻(i,j)和(i+1,j-1)点相邻边相邻(i,j)和(i+1,j+1)点相邻不相邻2.2六角网格上的直线生成算法假设直线起点和终点的六角网格坐标分别为(x1,y1)和(x2,y2),则(x1,y1)和(x2,y2)同时也是两点的相应菱形坐标.记Δx=|x2-x1|,Δy=|y2-y1|,xsign=SIGN(x2-x1),ysign=SIGN(y2-y1).为简便起见,我们这里假设Δx>Δy,即直线的斜率的绝对值在0与1之间,此时x为主坐标轴,x值每一步都递增(或递减),y值是否递增(或递减)由Bresenham误差变量eyx=2Δx(dxy-0.5)决定(图2),变量eyx的初始化公式为eyx=2Δy-Δx.假设当前已选择的离直线最近的菱形记为r(x,y),则下一步可选的菱形有两种选择:r(x+xsign,y)或r(x+xsign,y+ysign)(图2中为xsign=ysign=1),由eyx的符号决定究竟选择上述两个菱形中的哪一个.图2平行四边形网格下的Bresenham算法示意图若eyx<0,则右方菱形r(x+xsign,y)与直线上理想位置更接近,应取右方菱形,同时变量eyx递增为eyx=eyx+2Δy.由于相应的六角网格像素h(x+xsign,y)与h(x,y)为边相邻,故六角网格上的下一像素即为h(x+xsign,y).若eyx0,则右上方菱形r(x+xsign,y+ysign)与直线上理想位置更接近,应取右上方菱形,同时变量eyx递增为eyx=eyx+2(Δy-Δx).此时需要分情况处理:(1)若相邻的坐标对形如(i,j)和(i+1,j-1),相应的六角网格像素h(x+xsign,y+ysign)与h(x,y)边相邻,故六角网格上的下一像素即为h(x+xsign,y+ysign).(2)若相邻的坐标对形如(i,j)和(i+1,j+1),相应的六角网格像素h(x+xsign,y+ysign)与h(x,y)不相邻,需要增加一个像素来连接这两个断开的像素.从h(x,y)到h(x+xsign,y+ysign)有2条可能路径:h(x,y),h(x,y+ysign)到h(x+xsign,y+ysign)或h(x,y),h(x+xsign,y)到h(x+xsign,y+ysign).究竟如何选择呢?从图2中可以看出,只要判断直线在点B上方或下方即可.也就是判断tyx是否大于1/2.注意到tyx-1dyx-h-1且Δx大于0,则问题归结为比较eyx和Δy的大小,若eyx<Δy,则接下来的两个像素分别为h(x+xsign,y)和h(x+xsign,y+ysign),见图3(a);否则eyxΔy,接下来的两个像素分别为h(x,y+ysign)和h(x+xsign,y+ysign),见图3(b).图3连接两个不相邻像素h(x,y)和h(x+1,y+1)的像素若直线斜率绝对值大于1(即Δy>Δx),则y值Page4每一步总是递增(或递减),x值是否递增(或递减)由Bresenham误差变量eyx决定.2.3算法分析与Bresenham算法一样,本算法只涉及到整数运算,只用到整数的加法、减法、移位(所有乘2用左移运算完成)和比较运算.本算法在一步循环中可能生成1或2个像素,具体的操作次数见表2.该表中的计算量不包括x和y坐标值的操作,因为这些操作在任何直线生成算法中都是一样的,但其中的计算量包括循环语句本身的一次比较和一次加减法操作.同时,我们只考虑了算法循环体内的操作,因为循环体外的操作只执行一次,对算法速度影响不大.操作类型一步形成1个像素一步形成2个像素加法比较3FCC(Face-CenteredCubic)网格及其坐标系统由菱形十二面体为体素构成的三维网格称为面心立方(Face-CenteredCubic,FCC)网格.菱形十二面体由12个全等的菱形构成,共有14个顶点,其中8个顶点的度为3,6个顶点的度为4.菱形十二面体可由下述方法构造:取两个相同的立方体,立方体表面为深灰色,内部为浅灰色,将其中一个立方体分割成6个如图4(a)所示相同的四棱锥,然后将这6个四棱锥的四边形粘帖到另一个立方体的6个面上,见图4(b),即形成如图4(c)所示的菱形十二面体,此菱形十二面体的6个度为4的顶点恰好是四棱锥的顶点,度为3的8个顶点则是原立方体的8个顶点.对于6个相同的菱形十二面体,各取其1个度为4的顶点如切割时相对,则正好可以无缝连接,于是可以铺满整个三维空间.FCC网格是二维六角网格在三维的一种推广,它与方形网格相比具有如下优点:(1)在FCC网格上,每个体素只有点相邻和面相邻两种相邻关系,而方形网格除了点相邻和面相邻外,还有边相邻,因此,在FCC网格上,为许多图像处理算法提供了更加简便的实现途径,并提高了算法的效率.有更好的近似效果.格上曲线或曲面更平滑[9].(2)FCC网格的误差小于方形网格[12].从而具(3)FCC网格的体素点分布更加合理和紧凑[18].FCC网格在3D空间比方形网格具有更好的采样性质.也就是说,对于三维信号,需要较少的采样点就可以完全重构信号.从而可以节约内存空间,提高体绘制速度.(4)FCC网格的体素更接近球面,从而FCC网(5)FCC网格更经济.即在体积相同的条件下,FCC网格的表面积要小于方形网格.与传统的方形网格不同,菱形十二面体构成的离散空间中只存在点相邻和面相邻,不存在边相邻的情形.我们按如下方法构造FCC坐标系统:选取一个体素中心定义为坐标原点O,坐标原点O的所有坐标值为0,即O=(0,0,0).然后确定3个坐标轴,考虑坐标原点体素(菱形十二面体)的一个有3个相邻面的顶点(即度为3的顶点),过原点且分别垂直于这3个相邻面的直线为坐标轴Ox,Oy和Oz.基向量狌,狏和狑方向分别与坐标轴Ox,Oy和Oz相同,长度为从坐标原点到相邻体素中心.4附属平行六面体空间我们可以为上一节的离散FCC空间定义相应的附属平行六面体空间.FCC空间中的每个体素h(x,y,z)都对应一个平行六面体p(x,y,z).p(x,y,z)称为h(x,y,z)的附属平行六面体,它们具有相同的中心,并且平行六面体p(x,y,z)的边为FCC空间的基向量狌,狏和狑(见图5).按这种方法Page5定义的附属平行六面体空间和FCC空间具有相同的中心和基向量.下面分析构成FCC空间和其附属平行六面体空间的体素之间的关系.记h(x,y,z)为FCC空间的体素且p(x,y,z)为与之对应的平行六面体空间图6面相邻平行六面体和面相邻体素图7边相邻平行六面体和面相邻体素图8点相邻平行六面体和点相邻体素中的平行六面体.由图6~10我们可以得出如下结论:平行六面体p(i,j,k)有26个相邻平行六面体,其中6个与p(i,j,k)面相邻,12个与p(i,j,k)边相邻,其余8个与p(i,j,k)点相邻.根据对称性,相邻的两个平行六面体有13种不同的坐标对,分别对应于表3的13行,由表中可以看出,面相邻的体素坐标对有6种(由于对称性,对应于12个面相邻体素),点相邻体素坐标对有3中(由于对称性,对应于6个点相邻体素),不相邻的体素坐标对有4种,其中对应于边相邻的平行六面体3种(由于对称性,对应于6个边相邻平行六面体),点相邻的平行六面体1种(由于对称性,对应于2个点相邻平行六面体).Page6图9边相邻平行六面体和不相邻体素图10点相邻平行六面体和不相邻体素,形如(i,j,k)表3FCC网格体素及其对应的平行六面体空间相邻的坐标对(i,j,k)和(i+1,j,k)面相邻面相邻图6(a)0(i,j,k)和(i,j+1,k)面相邻面相邻图6(b)0(i,j,k)和(i,j,k+1)面相邻面相邻图6(c)0(i,j,k)和(i+1,j,k-1)边相邻面相邻图7(a)0(i,j,k)和(i+1,j-1,k)边相邻面相邻图7(b)0(i,j,k)和(i,j+1,k-1)边相邻面相邻图7(c)0(i,j,k)和(i+1,j-1,k-1)点相邻点相邻图8(a)0(i,j,k)和(i+1,j+1,k-1)点相邻点相邻图8(b)0(i,j,k)和(i+1,j-1,k+1)点相邻点相邻图8(c)0(i,j,k)和(i+1,j,k+1)边相邻不相邻图9(a)1(i,j,k)和(i,j+1,k+1)边相邻不相邻图9(b)1(i,j,k)和(i+1,j+1,k)边相邻不相邻图9(c)1(i,j,k)和(i+1,j+1,k+1)点相邻不相邻图102对于体素不相邻的情形,需要增加体素来连接这两个不相邻的体素.若相应的两个平行六面体为边相邻的情形,需要增加1个体素来连接体素,则由2.2节的二维算法的简单三维扩展就可解决FCC网格下体素的选择问题,即由xy平面、xz平面或yz平面的二维算法扩展成三维算法.若相应的两个平行六面体为点相邻的情形,需要增加2个体素来连接体素,此时坐标对为(i,j,k)和(i+1,j+1,k+1).注意到有3种选择:h(x+1,y,z),h(x,y+1,z)和h(x,y,z+1),分别对应3个平行六面体:p(x+1,y,z),p(x,y+1,z)和p(x,y,z+1).要在这3个平行六面体中选取一个使其与直线的距离最小,我们根据判断变量eyx和ezx的大小来选择(eyx和ezx的定义和递增与2.2节的二维算法类似),首先在xy平面由eyx<Δy是否成立决定y是否先变化,然后在xz平面由ezx<Δz是否成立决定z是否先变化.根据eyx和ezx的大小有以下4种情形:(1)若eyx<Δy且ezx<Δz,则选取平行六面体p(x+1,y,z)(体素h(x+1,y,z)).(2)若eyx<Δy且ezxΔz,则选取平行六面体p(x,y,z+1)(体素h(x,y,z+1)).(3)若eyxΔy且ezx<Δz,则选取平行六面体p(x,y+1,z)(体素h(x,y+1,z)).(4)若eyxΔy且ezxΔz,则选取平行六面体p(x,y+1,z)或p(x,y,z+1)(体素h(x,y+1,z)或h(x,y,z+1)).首先考虑情形(1),eyx<Δy且ezx<Δz,则选取的体素h(x+1,y,z)与h(x+1,y+1,z+1)还不相邻,连接它们的体素可能为h(x+1,y,z+1)或h(x+1,y+1,z).通过分析,我们发现变量ezy=ezxΔy-eyxΔz的符号决定了该选取哪个连接体素:若ezy为正,则应选取h(x+1,y,z+1),即体素h(x,y,z)的紧接着的3个体素为h(x+1,y,z),h(x+1,y,z+1),h(x+1,y+1,z+1);否则体素h(x,y,z)的紧接着的3个体素为h(x+1,y,z),h(x+1,y+1,z),h(x+1,y+1,z+1).下面说明为什么变量ezy能决定体素h(x+1,y,z+1)或h(x+1,y+1,z)的选取.图11画出了yz平面在x=x+1处的情况,可以看出,若直线在点E上方,即dzx+d>1/2,则应选取体素h(x+1,y,z+1),否则应选取体素h(x+1,y+1,z).由图11看出,d可由下式计算:这样公式dzx+d>1/2可写为Page7为消除浮点数运算,下式将dyx(或dzx)为转换为Bresenham误差变量eyx(或ezx):将式(2)中的dyx和dzx代入式(1)得2+ezx2Δx+11即由于Δx和Δy为正数(绝对值),则式(3)等价于于是变量ezy能决定体素h(x+1,y,z+1)或h(x+1,y+1,z)的选取.现在考虑情形(2),eyx<Δy且ezxΔz,则选取的体素h(x,y,z+1)与h(x+1,y+1,z+1)还不相邻,连接它们的体素可能为h(x+1,y,z+1)或h(x,y+1,z+1),但由于eyx<Δy,只能选取h(x+1,y,z+1).于是体素h(x,y,z)的紧接着的3个体素为h(x,y,z+1),h(x+1,y,z+1),h(x+1,y+1,z+1).现在考虑情形(3),eyxΔy且ezx<Δz,则选取的体素h(x,y+1,z)与h(x+1,y+1,z+1)还不相邻,连接它们的体素可能为h(x+1,y+1,z)或h(x,y+1,z+1),但由于ezx<Δz,只能选取h(x+1,y+1,z).于是体素h(x,y,z)的紧接着的3个体素为h(x,y+1,z),h(x+1,y+1,z),h(x+1,y+1,z+1).最后考虑情形(4),eyxΔy且ezxΔz,则可能选取的体素为h(x,y+1,z)或h(x,y,z+1),与情形(1)的分析类似,我们可以在yz平面由ezy=ezxΔy-eyxΔz的符号决定应该选取哪个体素.若ezy<0,则应该选取h(x,y+1,z)和h(x,y+1,z+1),于是体素h(x,y,z)的紧接着的3个体素为h(x,y+1,z),h(x,y+1,z+1),h(x+1,y+1,z+1).否则若eyx0,体素h(x,y,z)的紧接着的3个体素为h(x,y,z+1),h(x,y+1,z+1),h(x+1,y+1,z+1).5FCC网格上的直线生成算法假设直线的起点和终点的FCC坐标分别为(x1,y1,z1)和(x2,y2,z2),则(x1,y1,z1)和(x2,y2,z2)同时也是相应点的平行六面体坐标.令Δx=|x2-x1|,Δy=|y2-y1|和Δz=|z2-z1|,xsign=SIGN(x2-x1),ysign=SIGN(y2-y1)和ysign=SIGN(z2-z1).为简便起见,我们这里假设Δx>Δy且Δx>Δz(即x轴为主坐标轴),则x值每一步都递增(或递减).FCC网格上,两点(x1,y1,z1)和(x2,y2,z2)之间的直线生成算法包括如下步骤:1.选取起点(x1,y1,z1)为当前体素(也是当前平行六面体).2.与三维方形网格直线生成算法Bresenham算法类似,在平行六面体空间决定下一步所选取的平行六面体(我们将在下一节详细说明其选取方法).3.根据当前平行六面体和选取的下一个平行六面体的相邻关系和对应体素的相邻关系,采用上一节的方法决定是否需要增加体素.4.若还没到达终点(x2,y2,z2),则转向步2,否则算法结束.6在平行六面体空间选择下一个平行六面体为了选择下一个平行六面体,我们采用与三维方形网格下Bresenham算法类似的方法,下面将说明其详细过程.由于算法在平行六面体空间x值每一步都递增(或递减),因此只要决定下一平行六面体的y和z坐标是否变化即可.假设当前平行六面体为E=p(x,y,z),则下一平行六面体的取法只有四种可能的选择,即A=p(x+xsign,y,z),B=p(x+xsign,y+ysign,z),C=p(x+xsign,y,z+zsign)和D=p(x+xsign,y+ysign,z+zsign)(图12).要在这4个平行六面体中选取一个使其与直线的距离最小,我们根据判断变量eyx和ezx的符号来选择.我们分两步进行,首先在xy平面由eyx的符号决定y是否变化,然后在xz平面由ezx的符号决定z是否变化.根据eyx和ezx的符号有以下4种情形:Page8(1)若eyx<0且ezx<0,则下一平行六面体为(2)若eyx<0且ezx0,则下一平行六面体为(3)若eyx0且ezx<0,则下一平行六面体为(4)若eyx0且ezx0,则下一平行六面体为p(x+xsign,y,z).p(x+xsign,y,z+zsign).p(x+xsign,y+ysign,z).p(x+xsign,y+ysign,z+zsign).图12三维平行六面体空间的Bresenham算法示意图7算法分析与实验本算法只用到整数运算,而且除了在一步生成3个体素的时候需要2次整数乘法运算外,其余的只用到整数加法、减法、移位、比较运算.算法主要集中在第2步和第3步,这两步需要重复N=Max(Δx,Δy,Δz)次,在算法第2步,需要2次比较和2次加法操作,在算法第3步,若不需要增加体素,即一次仅生成一个体素则没有任何操作;若需要增加1个体素,即一步生成2个体素,则第3步需要1次比较操作;若需要增加2个体素,即一步生成3个体素,则第3步最多需要2次比较、2次乘法和1次加法运算共5次操作.因此,本算法的时间复杂度为O(N).我们用VC6.0在Intel2.53GHz微机上编程实现了本文算法.为了测试算法的速度,我们在面心立方网格中嵌入一个球面,随机取球面上的点,连接其和球心得到一条直线,则该直线即为球面的半径,通过生成这些直线得到算法的执行时间.我们通过改变球面半径大小(直线长度)和直线数目得到不同组数据.表4列出了对于不同长度和数目的直线,本文算法的执行时间比较,表中所列的时间是执行完整的算法所需的时间,即包括主循环体外对判断变量等的初值和增量的计算.从表4可以看出,随着直线长度的加大和直线数目的增加,算法执行时间逐步增加.表4本文算法生成不同长度直线所需要的时间长度2000.3233.26532.7884000.4224.58043.2856000.5425.39753.2198000.6566.38263.45510000.7657.42975.72612000.8598.51385.8888结论本文提出了一个FCC网格下的三维直线生成算法,该算法基于三维Bresenham算法和附属平行六面体空间,在每一步利用判断变量找出离直线最近的体素(菱形十二面体).算法的每一步最多可生成3个体素.本文算法和已有的三维直线生成算法相比,优点在于生成的直线是基于FCC网格的,由于FCC网格比方形网格具有更好的采样性质,并且具有较小的误差,因此,本文算法生成为FCC网格直线,在相同质量的条件下,体素数量更少,生成的直线更平滑.但本文算法要较方形网格直线生成算法稍为复杂.
