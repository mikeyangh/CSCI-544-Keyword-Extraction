Page1基于最小圆覆盖区域划分的索引过滤算法陈洁1),2)方滨兴1),2)谭建龙2)金世超2),3)1)(北京邮电大学计算机学院北京100876)2)(中国科学院信息工程研究所信息智能处理实验室北京100093)3)(北京大学软件与微电子学院北京100084)摘要过滤算法设计是信息内容安全处理系统中的一个重要环节,过滤速度成为衡量过滤系统性能的首要因素.索引结构是处理大规模数据的一种有效方式,但目前索引方法都是针对特定检索领域而设计,在实际过滤应用中,并不能满足过滤实时性需求.为了加快信息过滤中数据查询的判定速度,文中提出一种基于最小圆覆盖的区域划分方法,构建了适合过滤的索引结构:F-tree.该算法充分考虑实际过滤环境中正例(正常信息)多、反例(敏感信息)少的非平衡数据分布特性,利用最小圆覆盖划分方法得到最大否定判断区域.在查询阶段,正例以最大概率落入否定区域,根据否定性判定原理可以对正例快速否定判定,从而加快整体查询的判定速度.实验表明,与现有算法相比,所提出的算法减少了查询中的距离计算次数,有效提高了过滤查询性能.关键词过滤算法;最小圆覆盖;否定性判定;索引结构1引言信息过滤是信息内容安全领域具有实际应用价值的一个研究方向.针对网络中存在的敏感信息,设计有效的过滤算法,对用户所请求的网页信息进行审计,从而过滤判定为敏感内容的信息.过滤算法设计是整个安全过滤系统中的一个重要环节,决定过滤系统整体的速度性能.一般认为敏感信息过滤技术实质上是一个二分类的问题,目前过滤算法主要采用基于模式分类的方法,通过学习基本的模型,为每个测试数据都打上一个标签,从而过滤标记为敏感信息的数据,常用的有基于概率论的贝叶斯分类方法以及基于最大间隔的SVM分类方法.而在实际过滤应用中我们需要面对的是海量数据的处理,数据量的个数远远超出了传统模式分类方法的应对能力.因此为特征集建立有效的索引结构是实现大规模数据高性能检测的关键技术.目前在信息检索领域已有大量有效的索引构建方法被提出,虽然信息检索和信息过滤在某些关键技术的运用上有相似之处,但信息安全过滤相比信息检索需要更快的判定速度,在数据处理方式上也不同.目前基于检索的索引结构根本不能满足实际过滤处理环境中所需的实时性需求.本文在分析实际网络中正例与反例非平衡分布特性的基础上,提出了一种面向安全过滤的基于最小圆覆盖区域划分的索引构建方法.该方法利用否定性判定的思想,结合最小圆覆盖理论基础,通过对数据进行最小圆划分,使每个最小圆之间呈现稀疏性分布特性,以此构建适合实际网页过滤的高性能索引结构F-tree.本文的主要贡献包括:(1)深入分析敏感信息过滤的特性,引入图形学中最小圆覆盖理论来解决实际的应用问题.(2)提出一种新的区域划分策略———最小圆覆盖区域划分,并基于此划分构建了适合快速过滤的索引结构F-tree,以满足过滤实时性需求.(3)在大量数据集上,对文本提出的方法进行了实验验证.多组实验结果证明,所提出的过滤索引结构在查询中所需的距离比较次数在不同搜索半径条件设置下都少于经典的M-tree检索结构,在过滤应用中表现出极高的查询性能.本文第2节分析过滤索引树结构特点;第3节描述所需要解决的问题;第4节介绍基于最小圆区域划分的过滤索引结构F-tree的构建方法;第5节通过实验验证所提出算法的有效性;最后是结束语.2过滤索引树结构特点相似性索引方法一般应用在检索领域,是一种处理大规模数据或高维数据的有效技术手段,其基本原理是根据数据的分布特性,构建有效的索引结构组织数据,从而加快数据检索的速度.典型的检索索引结构可以简单地用图1来表示,检索的主要特点是尽量多地检索出相关的数据.因此,有效的检索树结构要近似平衡树,一般是搜索到叶子节点才返回结果,这个结果可以直接反馈给用户,让用户评价,从而更新用户模板,使搜索结果更精确.因此,在构建基于检索的索引结构时,主要考虑尽量多的搜索出满足用户所需求的数据.由于安全过滤具有实时性和否定判断的特性,这个特性与基于检索的索引结构在本质上有所不同,因此适合过滤的索引结构和适合检索索引结构有很大区别.当构建一个适合过滤的索引结构后,给定查询q,我们不需要找出与它相似的多个数据对象,因为在安全过滤中没有反馈,不需要把结果反馈给用户,只需要尽快判定它的特性,从而直接进行处理.因此,我们构建的过滤索引结构,在查询阶段不需要每个查询都搜索到叶子节点才返回结果,而是查询到部分中间节点时,就可以判定查询数据的特征,从而退出查询.典型的过滤索引结构可以用图2简单描述.在查询阶段查询数据不需要遍历到Page3叶子节点,只需要使判定结果尽可能在树的中间节点就返回.通过设计中间节点的返回模式,加快过滤应用中数据判定速度.3问题描述根据第2节的分析可知,具有高性能特性的过滤索引树需要在中间节点就返回结果.根据以上特点,在构建索引结构过程中,数据空间的分割是否合理,会直接影响索引结构的性能.目前存在的区域划分方法(如基于支点选择的方法[1-2],还有基于划分的方法[3]),大部分都是遵循层次化聚类的原则.每一种索引都有自己的特性,包括数据类型、数据分布情况还有维度大小.这些特性对索引结构的性能都有较大的影响.M-tree索引[4]至今被认为是性能最优的索引结构之一,这种索引结构是根据数据空间中各个数据点之间的距离进行空间划分的,将一个数据空间分成两个子空间[5].M-tree也是基于层次聚类划分空间,划分后数据空间里的数据聚集较稠密,这种结构非常适合检索的需求,数据空间划分示意图如图3所示.在安全过滤中,由于应用领域不一样,对数据处理的方式也不一样,基于检索的索引结构根本不能满足实时性需求.下面我们将分析安全过滤中的数据分布特性,在此基础上描述具体过滤应用中需要解决什么样的特定问题才能构建适合过滤的高效索引结构.假设对于给定数据集X,其中包括有正例和反例,在实际网络环境中数据分布表现为一个非平衡分布特性,正例较多(正常信息),反例较少(敏感信息).在查询阶段,我们需要对反例进行判定,继而进行过滤处理.在这样一个非平衡的数据分布条件下,利用否定性判断原理,只需快速否定判定大量正例数据,就可以加快整个查询的综合判定速度,从而提高索引结构过滤处理的性能.下面通过一个简单实例来说明需要解决的问题.考虑如图4所示的集合S,包含有9个数据点,这些数据点都为反例数据,所需解决的主要问题是如何对数据区域进行划分使得集合S中的空白区域最大,即否定判定区域达到最大.通过上面区域划分构建索引结构,当给定查询点q时,查询数据点以最大概率落入划分区域后的空白区域,就可以快速判定查询数据点q必然不属于敏感信息.由于在实际过滤中大部分数据都不属于敏感信息,所以这样的数据划分就使得大部分数据只需与根节点比较或与部分中间节点比较就可以得到最后判定结果,从而提高整体数据的查询性能.想要快速得到判定结果,在区域空间划分时,就必须使得划分后的空白区域最大.因此,在构建过滤索引树阶段,需要解决以下两个基本问题:(1)如何得到包含所有点集的最小区域?(2)如何确保每次区域划分后所得空白区域都最大?在第4节,我们将具体描述如何通过最小圆覆盖的方法来解决基于否定性判断的快速过滤问题.4基于最小圆覆盖的过滤索引方法4.1最小圆覆盖算法在数据划分时,为保证在每次区域划分中都得到最大空白区域,就需要用一个最小的区域来包括数据集簇,使得簇间较稀疏,空白区域达到最大.求一个最小圆包含给定点集所有点的问题是人们在理论和实践上都十分感兴趣的一个问题[6-8].最小圆覆盖问题可以形式化描述为:给定有Page4限点集S,包含所有点集S的最小圆B满足:B=B(c,r)··={x:‖x-c‖r}.由于最小圆的圆心是到集合中最远点的距离最近的一个点,因此在一些规划中有实际的应用价值.圆心可以看作是点集的中心.基于n个点的最小圆覆盖算法[9]可以用算法1描述.算法1.最小圆覆盖算法.输入:n个数据点输出:包含n个数据点的最小圆1.在点集n中任取3点A,B,C.2.作一个包含三点的最小圆C1.3.在点集中找出距离C1最远的点D.若点D在圆C1的圆内或圆周上,则该圆即为所求的最小圆,算法结束.否则,继续执行步4.4.在A,B,C,D中选3个点,求解使包含这4个点的圆最小.所选取的三点成为新的A,B,C三点,返回执行步2.最小圆覆盖算法在规划设施中有广泛应用.在我们设计的过滤索引结构中,可以用来生成最大空白区域,从而可以加快搜索速度.在4.2节我们将具体描述如何使用最小圆覆盖算法构建适合过滤的索引结构F-tree.4.2F-tree索引生成算法构建适合F-tree过滤索引结构的主要目的是加快在数据查询阶段的判定速度,使得查询数据以最大概率落入索引结构所拥有数据点以外的区域,也就是上面所描述的数据划分中的空白区域.因此在进行支点选择或区域划分时,首要考虑因素是相近点集之间组成的区域尽可能小,而划分后的点集区域之间的距离要尽可能大,才能保证在数据集划分后,整个集合区域所拥有的空白区域最大.在实际安全过滤应用中,由于大量查询数据是正例,落入空白区域概率较大,因此设计具有较大空白区域的索引结构可以使大量查询数据只需查询树的根节点或部分中间节点就可以快速得到判定结果,而不需要遍历直到叶子节点才返回结果,从而加快查询数据集的整体查询速度.由以上结合具体过滤应用领域的理论分析,基于启发式规则,我们设计了一种有效的基于最小圆覆盖的过滤索引结构F-tree.假设有包含n=3k的数据集Ω,那么适合安全过滤应用领域的F-tree索引结构的构建方法由算法2给出.在构建过滤索引树结构中,采用自低向上逐层构成节点的生成方式.算法2.F-tree_Build(Ω).输入:反例数据集(Ω)输出:F-tree1./叶子节点的生成/a)在Ω中选择离原点最近的一点u1;b)寻找离u1最近的两点u2、u3;c)求解u1、u2、u3最小覆盖圆c1;d)寻找离c1最远的点u4;e)寻找离u4最近的两点u5、u6;f)求解u4、u5、u6最小覆盖圆c2;g)重复执行步d)~f),直到所有数据点都生成最小圆.在通过以上处理阶段的区域划分后,可生成3k-1个包含3个数据点集的最小覆盖圆,由这些最小圆集合可生成过滤索引树F-tree的叶子节点.2./中间层节点的生成/a)从3k-1个最小圆中选择圆心离原点最近的圆c1;b)寻找离c1最近的两个圆c2、c3;c)基于c1、c2、c3包含的所有点,求解最小覆盖圆c4;d)寻找离c4最远的两个圆c5;e)寻找离c5最近的两个圆c6、c7;f)求解c5、c6、c7包含所有点的最小圆c8;g)重复执行步d)~f),直到3k-1个最小圆集合中每通过叶子节点中3k-1个最小圆之间结合处理,可以生成3k-2个最小圆,这些最小圆覆盖了叶子节点中多个最小圆所包含的所有数据点集.利用这个阶段生成的3k-2个最小圆构成过滤索引树F-tree的第k-1层中间节点.3.重复第2阶段,经过迭代划分,依次可生成过滤索引树F-tree结构的第k-2,k-3,…,1层的中间节点.根节点.4.最后包含所有数据点的最小覆盖圆构成F-tree的由上面建树过程可知,F-tree为一颗平衡二叉树,具有平衡二叉树所拥有的良好特性,同时也具备具体应用领域的特点.结合过滤应用领域中非平衡数据分布特性,利用最小圆覆盖划分数据区域,使得区域划分后的数据空间空白区域最大,符合查询阶段否定性判断的处理,可以加快整体的查询速度.在图5中,通过一个简单的例子描述了过滤索引树F-tree构建过程中数据区域划分情况,首先在图5(a)中,由3个数据点生成的最小覆盖圆构成F-tree中每个叶子节点;其次,F-tree中间节点可以通过叶子节点中最小圆之间结合生成(图5(b));最后覆盖所有点的最小圆构成F-tree的根节点(图5(c)).图示中只展示了两个最小圆的结合方式.Page54.3F-tree相似性查询算法众多应用领域要求索引结构有相似性查询,即查找数据库中与某个给定的高维适量最近的k个数据,这一查询通常称为K近邻查询.当K=1时为“最近邻查询”,这个是在检索领域所需要的查询.而在过滤应用领域,我们需要通过相似性来判定数据的特性或性质,不需要找出在查询阶段所搜索到的具体数据点.因此,在F-tree的相似性查询阶段,采用区域查询的方法进行数据的判定处理.区域查询可由定义1给出.定义1.区域查询.给定一个查询(q,r),q∈M,M为对象集,r为查询半径,是一个非负值,区域查询就是要从对象集M中找出与查询q之间距离小于r的所有数据库对象.给出区域查询的定义后,现在来描述基于区域查询的F-tree的查询算法.给定查询R(q,r),设置查询q的查询半径为r.基于过滤索引F-tree的区域查询算法可用如下步骤来描述:给定一个查询R(q,r)1.从根节点开始遍历查询F-tree.2.在每个中间节点Cj,执行:a)如果d(q,Cj)r,退出搜索,对查询q执行放行b)如果d(q,Cj)<r,进入子节点搜索.直到q不属于与基于检索的索引结构不同,基于过滤的索引结构在查询阶段不需要遍历整棵索引树的所有节点,由于生成了最大的否定判定区域,大量查询在中间节点就可以报告满足条件的节点,退出查询.在查询过程中,查询节点将大量减少.5实验结果与分析5.1实验设置在实验中,我们对基于最小圆覆盖区域划分的索引结构F-tree进行了测试,并与基于检索的索引结构M-tree的性能进行了比较和分析.两种索引结构均使用Windows环境下的C语言实现.由于距离计算的费用较高,我们就使用“距离计算次数”作为算法计算复杂度的度量准则.另一方面,由于我们实现的是内存索引结构,所以这里我们并不考虑磁盘的I/O操作.在实验中,选取两个实验数据集,一个数据集data1包含729个随机生成的均匀分布数据,另一个是由2187个随机生成的均匀分布数据组成的数据集data2.分别验证所提出的过滤索引结构应用在不同数据量情况下的查询性能.5.2实验结果数据集1.在数据集1的基础上,分别建立相应的M-tree和F-tree.查询性能的好坏是衡量索引结构好坏的一个重要标志[10],在查询阶段,采用q(r)区域查询方式.我们随机地选取100个查询数据点,计算这100个查询的平均距离计算次数,并据此来比Page6较这两种索引结构的性能.在表1中,M-tree(times)和F-tree(times)分别表示两种索引结构从根节点开始直到查询到满足要求的所有数据点所需要的距离比较次数.搜索半径rM-tree(times)F-tree(times)0.00010.0020.0040.0060.0080.010.020.040.060.080.1将查询半径r的值设置为0.0001开始进行实验,在多组实验中,逐渐增加搜索半径r的值,直到r=0.1,以此用来测试在设置不同搜索半径r的条件下,两种索引结构所需距离比较次数的变化.图6给出了数据集data1上两种索引所需要的距离比较次数随查询半径增加而产生的不同结果.从图6所展示的实验结果可以得出,在最初区域搜索半径为0.0001时,M-tree索引结构的平均距离比较次数只有16.51次,而F-tree的平均距离比较次数却达到27.88次,F-tree距离比较次数是M-tree的1.6倍左右.随着查询半径r的增加,F-tree与M-tree之间的距离比较次数差距逐渐减小.当半径增加到0.01左右时,F-tree的距离比较次数开始小于M-tree,查询性能开始增强,继续增加查询半径,F-tree与M-tree之间的距离比较次数差距变大,在整个查询半径变化过程中,F-tree的查询性能整体呈现增强趋势,查询性能优于M-tree.总体来说,r在0~0.1的区间变化时,M-tree的查询性能受半径变化的影响较大,表现为图6中斜率较大的曲线.相反,F-tree在整个半径变化过程中,查询中所需距离比较次数随着半径增加,所需的查询次数变化较小,在整个查询半径增加的过程中,性能趋于稳定.因此,在一定查询半径变化波动范围内,F-tree在查询性能上相对于M-tree来说,性能相对稳定.数据集2.主要测试两种索引结构处理大数据集的性能变化情况.同样,我们从数据集中随机选择100个数据作为测试中的查询数据,表2中给出了两种索引结构在不同查询半径设置下所需的距离比较次数.图7描述了两种索引结构所需距离比较次数随查询半径变化而变化的曲线图.搜索半径rM-tree(times)F-tree(times)0.00010.0020.0040.0060.0080.010.020.040.060.080.1从表2和图7所展示的查询结果可以得出,当搜索半径为0.0001时,M-tree索引结构所需的距离计算次数为40.94,而F-tree却只需要34.09,在最初始设定的查询半径条件下,F-tree所需的距离比较次数要小于M-tree.而随着查询半径的增加,F-tree所需距离比较次数与M-tree所需的距离比较次数之差也逐渐增加,距离比较次数只有M-tree的1/2左右.在整个查询半径变化区间内,F-tree距离比较次数随查询半径增加的变化相对稳定,在图7上表现为斜率较小的曲线.Page7下面,我们比较数据集大小的变化对查询性能的影响,设定搜索半径为r=0.02,分别得到在两种数据集下所构建的M-tree和F-tree两种索引结构的查询性能比较(图8).从图8中的结果描述中可以得出,在搜索半径设置为0.02的情况下,F-tree的搜索性能在两种数据集上的测试中都要优于M-tree.尤其是应用在不同数据量的情况下,M-tree搜索所需要的距离比较次数随着数据量急速增大,也表现急剧增加的趋势:当数据量为729时,所需距离比较次数为39.67,而当数据量增加到2187时,所需的距离比较次数增加到85.76,这个距离比较次数是应用于小数据集时所需距离比较次数的2倍左右,查询性能下降速度较快.而对于所提出的基于过滤的索引结构F-tree来说,从图8所展示的实验结果可以得出,当数据量为729时,距离比较次数为33.61,而当数据量增加到2187时,所需的距离比较次数为46.63,数据量的增加对F-tree的索引性能影响很小.图8两种数据集data1和data2的性能比较5.3结果分析在所设置的多组实验中,F-tree都表现出了较好的性能,这是因为我们所需要面对的具体问题是敏感信息过滤,而实际网络环境中敏感信息数据分布具有非平衡性,并且在过滤过程中需要具有较快的判定速度.根据以上两个特性,利用最小圆覆盖划分数据区域,使否定区域达到最大,这样构建的索引树是一棵平衡树,每个节点区域不会存在覆盖问题,所划分的节点区域也会比较稀疏.在F-tree的查询阶段,由于我们得到了最大的否定区域,在查询半径较小的情况下,需要比较的数据点较多,查询性能优势不明显.而当半径增加,查询q遍历节点时,覆盖的数据点较多,分布较多的正常数据以最大概率落入否定区域,从而在查询时可以快速得到判定结果.而基于检索的M-tree索引结构在划分数据空间时,数据划分比较稠密,以便搜索到更多的相似性数据,在查询判定阶段,每到一个区域都需要进一步判断,并不适合需要快速判定的非平衡分布敏感信息过滤领域,在搜索距离比较次数上相比稀疏区域划分的过滤索引结构F-tree有所增加.6结束语索引是基于内容相似性查询的有效方法,而数据空间的分割直接影响索引结构的查询性能.本文针对实际敏感信息过滤应用中数据非平衡分布的特点,提出了基于否定判断的过滤模型.采用基于最小圆覆盖的区域划分方法解决基于否定性判断的过滤问题,构建符合否定判断的过滤索引结构F-tree.实验结果显示:在不同查询半径值r设置下,F-tree的查询性能明显优于M-tree,并且随着数据量的增加,F-tree所需的距离比较次数增长幅度不大.因此,所设计的F-tree索引结构在综合性能上表现出一定的稳定性和鲁棒性.
