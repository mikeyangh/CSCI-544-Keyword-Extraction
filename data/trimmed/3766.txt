Page1一种动态优先级实时任务调度算法夏家莉1)陈辉1)杨兵2)1)(江西财经大学软件与通信工程学院南昌330013)2)(湖北大学教育学院武汉430062)摘要现有实时任务调度算法往往根据任务的时间属性或者价值确定任务优先级,较少同时兼顾任务的价值和执行紧迫性.文中根据任务的价值和剩余执行时间讨论任务的剩余价值密度,根据任务的截止期和空余执行时间分析任务的紧迫性;然后综合任务的剩余价值密度和执行紧迫性,提出了动态分派任务优先级的DPA策略;最后提出了基于DPA的抢占调度算法DRTP.DRTP算法分析了任务抢占调度的各种可能条件,分析了系统中可能出现的颠簸调度,并给出避免颠簸的条件.仿真实验结果显示,与其它同类算法相比,DRTP算法能够提高系统价值收益,降低任务截止期错失率,并大大减少任务抢占的次数.关键词实时任务;剩余价值密度;执行紧迫性;动态优先级分派1引言最近几年,实时任务系统广泛应用到航天控Page2理系统,任务处理的主要目标是进行任务调度从而使尽可能多的任务能够在任务截止期前完成执行,并实现系统性能到达最佳[12].然而,在时间紧急的实时任务系统中做出调度决策是一项非常困难的工作,因为该决策涉及到大量的实时系统参数和实时任务属性[13].截止期最早最优先EDF[14-15]算法根据任务截止期来决定任务执行顺序,让截止期最早的任务优先执行.空闲时间最短最优先LSF[16]算法则将最高优先级指派给最短空闲时间的任务,保证最紧迫的任务优先执行.Semghouni等人[17]在EDF算法的基础上,同时考虑任务的重要性,提出了一种新的调度策略GEDF来提高EDF算法处理系统过载的能力.为了提高周期性实时任务系统的效率,文献[18]提出了一种更为通用的实时任务模型,允许周期性任务的截止期和周期可以在某些周期内变化.文献[19]提出了一种计算周期性任务最小截止期的算法.文献[18-19]在保证系统可调度性的基础上,通过动态调整实时任务的截止期和周期,加快任务的调度速度,减少系统的等待时间,从而在系统过载的情况下提高任务的可调度性,进而提高系统的效率.为了克服EDF算法和可能LSF算法存在的不足,文献[20]根据任务的相对截止期和空闲时间,采用综合加权的方式综合任务的EDF优先级和LSF优先级设计任务的优先级,并通过加权参数调节两种优先级策略对表优先级影响的权重.随着实时任务系统广泛应用到各种应用领域,具体应用也对实时任务调度的效率和灵活性提出了更高要求,单纯考虑任务的时间属性来确定任务优先级的方式已经不能满足需要.Burns等人[1]指出,提高实时系统灵活性和效率的一种流行方式就是采用基于价值的优先级调度策略.简单地讲,基于价值的调度就是从一个任务集合中选择地执行某些任务,从而保证系统具有最佳的价值收益.而价值[5,12]可以认为是任务成功执行对系统的贡献,其值是应用系统决定的,是任务的固有属性.文献[5]结合汽车自动导航系统的具体应用,运用计量理论和决策分析方法给出了计算任务价值的系统化、合理化的方法.文献[2]根据任务的价值高低提出了价值最高最优先HVF算法,在系统高负载情况下,让价值最高的任务优先执行.为了提高系统在单位时间内的价值收益,文献[2,21]根据任务的价值及任务的最大执行时间,确定任务的价值密度,并由此提出了价值密度最大最优先HVDF算法,保证对系统价值收益贡献率高的任务优先执行.很显然,HVF及HVDF都是静态优先级分配算法.在基于价值的调度系统中,当且仅当实时任务完成并提交时,系统才能获得相应的价值增益.当系统采用抢占的调度策略时,不管当前执行任务正执行到哪一个阶段,都有可能被新到达的其它任务抢占,甚至于夭折.为了保护执行事务不被其它任务抢占而夭折,Aldarmi和Burns[13]根据任务的价值及其剩余执行时间,提出了一种动态价值密度的实时调度策略DVD,优化系统资源的利用率.随着执行任务剩余执行时间的减少,DVD算法赋予执行任务的优先级会快速增加,直至无穷大.因此,不管执行任务在时间紧迫程度如何,它都很难被其它任务抢占,因此可能造成后到达的紧迫任务错失截止期.在具体的实时应用系统中,时间紧迫的任务其价值未必高,而价值高的任务其执行时间未必紧迫.因此,片面依据任务的时间属性进行任务调度虽能保证时间紧迫性高的任务优先执行,提高任务的成功执行率,但可能使一些价值高的任务错过截止期,降低系统总收益.相反,片面强调系统价值收益,则可能使得那些低价值任务得不到执行的机会或者频繁地被高价值任务抢占而错失截止期,降低任务的成功执行率[22].为了兼顾公平和效率,本文综合考虑任务价值、截止期与空余时间3个特征参数,提出了一种综合任务动态价值密度与执行紧迫性的动态优先级分派策略(DynamicPriorityAssignment,DPA).首先,为了合理保护执行任务不易被其它任务抢占,同时又给其它高紧迫性任务执行的机会,DPA策略根据任务的价值和剩余执行时间提出了一种不同于文献[13]的动态价值密度计算方法.该方法将任务的价值密度控制在一个确定的区间[VDi,p×VDi)内,其中VDi=ViCi属性有关,p是调节任务动态价值密度对优先级影响权重的系数.其次,为了提高时间高紧迫性任务的执行机会,DPA策略根据任务的截止期和空余时间设计了一个新的实时任务执行紧迫性的评价指标δi=qφi,其中φi为任务的执行强度,δi为任务执行紧迫性,其取值区间为(0,1],q是调节任务时间紧迫性对优先级影响权重的系数.通过选取不同参数p和q,DPA策略可以改变任务动态价值密度与紧迫性对任务优先级的影响权重,提高了对不同应用环境的适应性.第三,在DPA策略的基础上,提出了Page3一种新的实时任务调度算法DRTP(DynamicReal-timeTransactionScheduling),该算法详细分析了任务调度中可能出现的情况,讨论了任务抢占与非抢占调度的条件.最后,论文还讨论了DRTP算法抢占调度中可能出现的系统颠簸[16]现象,并通过推理分析给出了避免系统颠簸条件.2任务模型假设实时任务系统中实时任务集合为T={T1,T2,…,Tn},其中每个任务Ti都具有以下属性[23]:(1)Pi,表示Ti的执行周期,若Ti为非周期任务,则假设其周期Pi为无穷大;(2)Di,表示Ti的相对截止期,DiPi,即系统中同时仅存在任务的一个实例,因此在上下文中不区分任务及其实例;(3)Ci,表示Ti的理论执行时间,CiDi;(4)bi,表示Ti放行并准备执行的时间;(5)ei,表示Ti执行完成时间;(6)di,表示Ti的绝对截止期,且di=bi+Di;(7)Vi,表示Ti的预期价值,若Ti在截止期前完成,则Ti对系统累积价值的贡献为Vi;否则为0.假设τi为系统的当前时刻,那么根据任务在系统中执行状态,可以将系统中实时任务划分为如下几类:但尚未执行完成的任务;但目前因被抢占而处于等待状态的任务;(1)执行任务,表示在当前执行周期内已放行(2)活动任务,表示在当前执行周期内已开始,(3)等待任务,表示在当前执行周期内已经放行,但因未获得系统执行权而处于等待状态的任务;(4)休眠任务,表示在当前执行周期内已完成执行或者已夭折,目前正等待下一个执行周期到来的任务.务间无冲突资源与相互依赖关系;此外,针对该任务模型本文还作如下假定:(1)系统中任务间相互独立,即除CPU外,任(2)任务不会自动挂起;(3)任务切换时间为0或者很小以致可以忽略.3任务优先级分派本节将详细讨论影响实时任务优先级的两个最主要因素:任务的动态价值密度与执行紧迫性,并提出基于任务价值密度与紧迫性的优先级分派函数.3.1任务即时价值在实时任务系统中,系统各种功能总是通过执行相关的任务来完成.然而,由于系统各个功能在整个系统中重要性的不同,系统执行各个任务的重要程度也存在着明显的差异.为了具体量化某个任务对于系统的重要性,本文使用任务的价值(Value,简记为V)表示任务的重要性.显然,任务价值是任务本身的固有属性,与任务的时间特征无关;此外,任务的价值也不是在任务成功执行的那个瞬间产生,而是随着任务的执行而逐渐积累的过程.定义1(即时价值).当实时任务Ti开始执行后,任务累积产生的价值称为任务的即时价值(ImmediateValue),记为IVi.若任务Ti执行了t个单位时间,则Ti的即时价值记为IVi(t).假设曲线IVi(t)=k×tp表示任务Ti即时价值产生的过程,其中p(p1)反映任务即时价值产生速度的变化.当p=1时,表示任务即时价值匀速产生,当p>1时,表示任务即时价值变加速产生.显然,当t=Ci时,IVi(t)=Vi,故有Vi=k×CpVi.因此,任务的即时价值可以由下式得到Cpi在任务成功提交之前,任务所累积产生的即时价值只是一种可能价值收益,并没有给系统带来实实在在的价值收益.当且仅当成功执行并正常提交后,任务才能够带给系统大小为Vi的价值收益,否则丢弃已产生的即时价值.3.2剩余价值密度定义2(平均价值密度).任务预期价值与任务理论执行时间的比率称为任务的平均价值密度,记为VD.显然,任务Ti的平均价值密度VDi=ViCi与任务本身的属性有关,而与任务的执行过程无关.然而,任务的平均价值密度并不能反映任务即时价值产生的动态过程.为了反映任务价值产生的变化速度,下面给出了任务剩余价值密度的概念.定义3(剩余价值密度).任务在其剩余执行时间内,单位时间产生的价值称为任务的剩余价值密度(RemainderValueDensity),记为RVD;若任务Ti已执行t个单位时间,则其剩余价值密度表示Page4为RVDi(t).得到根据定义,任务Ti的剩余价值密度可由下式RVDi(t)=Vi-IVi(t)其中,Vi为Ti的预期价值;t为Ti的已执行时间;IVi(t)为Ti当前已产生的即时价值;Ci为任务的理论执行时间.显然,当p=1时,有RVDi(t)=VDt,与Ti的已执行时间t无关.定理1.若0t<Ci且t取定值时,任务Ti的剩余价值密度RVDi(t)关于参数p递增.证明.令f(p)=Cpf(p)为关于参数p的增函数,所以,RVDi(t)=f(p)×ViCi-t也关于参数p递增.故原命题得证.证毕.定理2.若0t<Ci,p>1且p取定值时,任务Ti的剩余价值密度RVDi(t)关于t递增.证明.令f(t)=Cp再令g(t)=(p-1)tp+Cpp(p-1)tp-2(t-Ci),故g(t)<0,即g(t)为减函数,因此,有g(t)>g(Ci)g(t)>0,f(t)=(p-1)tp+Cp增函数.所以,RVDi(t)=f(t)×Vi故原命题得证.若称任务Ti在执行t(0t<Ci)个单位时间时的剩余价值密度与开始时刻剩余价值密度的比率为Ti剩余价值增长倍率,记为Ri(t),显然,Ri(t)=RVDi(t)RVDi(t)t=0=Cpp=1时,Ri(t)=1;当p>1时,Ri(t)>1,且p的值越大,Ri(t)越大.当t→Ci时,Ti剩余价值密度的增幅达到最大,即maxRi(t)=limt→Ci(i(Ci-t)×∑klimt→CiCp-1任务Ti执行期间,其剩余价值密度的变化区间为[VDi,p×VDi).假设任务Ti的预期价值Vi=100,理论执行时间Ci=10,当p=1,2,3,4时,Ti的即时价值及剩余价值密度变化曲线如图1所示.当p=1时,在Ti执行期间,Ti即时价值的产生速度稳定不变,剩余价值密度为常数.当p的值大于1时,Ti即时价值与剩余价值密度都随Ti执行时间的增加而增大,且当p的值越大,Ti即时价值及剩余价值密度增速越快.任务仅在成功提交之后才能够给系统带来与其预期价值等值的价值收益,否则,其产生的即时价值无效.若夭折一个已产生即时价值的任务,不但没有给系统带来收益,相反还浪费了任务执行时消耗的系统资源.因此,完全有必要采取一种措施来保护那些已经开始执行的任务,使它们能够尽可能地提交.在实时任务系统的四类实时任务中,休眠任务的执行周期尚未到达,可以不用考虑,下面我们比较其它3类任务.对于实时系统中的某个任务Ti,若Ti为等待任务(Ti已执行时间t=0),Ti的剩余价值密度RVDi(t)=ViCi(0<t<Ci),Ti的剩余价值密度RVDi(t)=(Cpi-tp)×Vii(Ci-t).根据定理2,显然有RVDi(t)>ViCi.Cp同时,p的取值越大,RVDi(t)的值也越大.因此,可以提高Ti的优先级,在一定程度上降低了Ti夭折的可能性,提高了系统的成功执行率.Page53.3紧迫性分析在实时系统调度中,不仅要求系统价值收益最大化,同时也要求尽可能满足任务的时间约束,提高任务的成功执行率.传统的基于任务时间属性的调度方法往往根据任务的截止期[14-15]或者空闲时间[16]来评判任务执行的紧迫性,然而,仅依据截止期或空余时间并不能准确地反映任务执行的紧迫性.本节分析任务截止期、剩余执行时间及空闲时间的关系,提出一个新的评价指标来判定任务执行的紧迫性,即:为了保证任务时间约束,任务必须尽快开始执行的紧迫程度.定义4(执行强度).完成任务所需的执行时间与任务空余时间的比称为任务的执行强度,记为φ.任务Ti的执行强度φi=Ci-t时间,t为Ti的已执行时间.显然,任务执行强度越大,说明为了完成任务,任务空闲时间中需用于执行任务的时间份额越大.定义5(执行紧迫性).为了保证任务截止期,任务需尽快执行的紧迫程度称为任务执行的紧迫性(Urgency),记为δ.这时,Ti的执行紧迫性δi(t)可由下式(3)得到假设在τi时刻,任务Ti已执行了t个单位时间,迫性随等待时间的增加而增高.其中q(q1)为调节任务执行强度对任务执行紧迫性影响大小的参数.显然,任务执行强度φ的取值区间为(0,1],因此任务执行紧迫性δ的取值区间为(1,q].特别地,当q=1时,表示任务执行的紧迫性为常数.定理3.当q(q>1)取定值时,任务执行的紧证明.假设在τi时刻,任务Ti已执行了t个单位时间,其Ti放行后的累积等待时间(不包括Ti的执行时间)为x.因为di-τi=Di-x-t(0x<Di-t,0t<C),其中,di-τi表示Ti的空余时间.所以上式(3)可改写为δi(t)=q令f(x)=Ci-t0,故f(x)关于x递增.所以,δi(t)=qf(x)也关于x递增.故原命题得证.当实时任务Ti开始放行时,其已执行时间t=0,空闲时间为Di,这时Ti执行的紧迫性最小,为qCi(CiDi).若任务Ti一直处于等待状态或者执行一段时间后被抢占而处于等待状态,随着等待时间增加,其执行紧迫性不断增加,到某个时刻,Ti的空闲时间恰好仅够用于完成余下的执行任务时,也就是说,Ti必须立即转为执行状态,否则将因为没有足够的执行时间而夭折.这时Ti的执行紧迫性达到最大,等于q.因此,在Ti的执行期间内,其执行紧迫性的变化区间为[qCi对于实时任务系统各种任务,其执行紧迫性的处理方式也是不同的:(1)仅考虑能满足截止期任务的紧迫性,对于无法满足截止期的任务则直接进夭折处理;(2)执行任务的紧迫性等于其最近一次开始执行时的紧迫性,并在其执行期间保持不变;(3)活动任务与等待任务的紧迫性随其等待时间的增加而逐渐增大;(4)休眠任务的执行周期尚未到达,不考虑其紧迫性.3.4动态优先级分派DPA前面,我们根据实时任务的价值与执行时间分析了任务的剩余价值密度,根据任务的截止期与空余时间分析了任务的执行紧迫性.接下来,我们将综合考虑任务的剩余价值密度与执行紧迫性这两个方面的因素,提出一种实时任务优先级动态分派策略DPA(DynamicPriorityAssignment),该策略将致力于实现系统价值收益与任务成功执行率综合性能最优.假设在τi时刻,非休眠任务Ti已执行t个单位时间,DPA策略定义任务Ti的动态优先级为DyPri(Ti),其理论执行时间为Ci,预期价值为Vi,截止期为di,则称Ti在τi时刻的动态优先级为DyPri(Ti),且DyPri(Ti)可以由下式得到.DyPri(Ti)=RVD(t)×δ(t)=(Cp定义6(基本优先级).根据DPA策略,实时任务在其执行周期内优先级的最小值称为该任务的基本优先级.根据3.2及3.3节的分析,当任务Ti放行时,其剩余价值密度及执行紧迫性均为最小值,分别为ViCi和qCiminDyPri(Ti)=min(RVDi(t))×min(δi(t))=Di×ViCi.显然,Ti的基本优先级仅与任务本身属性qCiPage6及参数q有关,而与Ti运行时的时间参数无关.随着Ti等待时间或者已执行时间的增加,Ti的剩余价值密度或执行紧迫性不断增加,或者二者均增加.当某个时刻,Ti的剩余价值密度和执行紧迫性均到达最大时,Ti的优先级到达最大,maxDyPri(Ti)=max(RVDi(t))×max(δi(t))=pq×ViCi.假设当实时系统开始运行时,所有任务同时放行,这时,基本优先级最高的任务首先获得系统执行权.然后,随着系统时间的推移,系统中各个任务的优先级动态变化.对于执行任务,其执行紧迫性保持不变(3.3节),但其剩余价值密度随着已执行时间的增加而不断增加,这在一定程度上保护了执行任务不被其它任务抢占;对于等待任务与活动任务,其剩余价值密度保持不变,但随着其等待时间的增加,其执行紧迫性不断增加,这给它们提供了抢占系统执行权的机会.此外,通过调节参数p与q的取值,还可以调节任务剩余价值密度及执行紧迫性对任务动态优先级的影响力.若p值较大时,剩余价值密度大的任务将优先获得系统的执行权,故能提高系统累积价值收益.此外,执行任务的剩余价值密度随已执行时间增加而增大,能够减少执行任务被抢占而夭折的概率,进而减少了任务抢占的次数,提高任务的成功执行率.若q的值较大时,执行紧迫性高的任务将优先获得系统的执行权,可以增加价值密度低的任务参与系统执行的机会.但是,等待任务或活动任务的紧迫性随等待时间增加而增高,使任务抢占的概率大大增加,可能会造成部分价值密度大的任务夭折而降低系统累积价值收益.4动态抢占调度策略DRTP前面,我们已经讨论了基于任务剩余价值密度及执行紧迫性的动态优先级分派策略DPA.本节中,我们将基于该策略提出一种新的实时任务动态抢占的调度算法.4.1系统颠簸及避免在基于动态优先级的实时系统中,两个或多个任务优先级交替上升而导致任务之间反复抢占的现象,称为系统颠簸现象[16].实时任务之间的抢占需要进行上下文切换,消耗系统资源.而系统颠簸则是一种频繁的任务抢占,将导致系统的额外开销大大增加.根据3.4节分析,在基于任务剩余价值密度及执行紧迫性的动态优先级分派策略中,由于参数p、q取值不同时,可能造成执行任务与非执行任务(不包括休眠任务)优先级交替增大的现象.为了避免可能出现的系统颠簸现象,本文设定一个任务抢占门限,避免优先级差别很小任务间的抢占.假设给定一个颠簸避免系数β(β1),对于任意两个任务T2与T1,T1为执行任务.某一时刻,它们的优先级分别为DyPri(T1)与DyPri(T2).如果仅当DyPri(T2)β×DyPri(T1)时,方许可T2抢占T1,那么可以避免T2与T1之间抢占.考虑任务T2与T1的任意性,根据下面的定理4,总能找到一个能够避免系统颠簸现象的颠簸避免系数β.定理4.给定一个任务集,总存在一个颠簸避免系数β能使得系统避免出现系统颠簸.证明.给定一个实时任务集,记其中平均价值密度最大的任务为T1,平均价值密度最小的任务为T2.假设在τi时刻,T1为执行任务,且已执行了t1(t1>0)个单位时间,T2为非执行任务,已执行了t2(t20)个单位时间,这时T1与T2的优先级分别记为DyPri(T1)与DyPri(T2).这时,若允许任务T2能够抢占T1,则有下式(5)中的条件成立:假设T2抢占T1后,执行了x个单位时间,即到了τi+x时刻,T1与T2的优先级分别为DyPri(T1)与DyPri(T2).为了避免系统出现颠簸现象,我们强制要求,在T2抢占T1后,T1不能再去抢占T2.因此,必须满足下式(6)中的条件:根据式(6),显然有β>DyPri(T1)下面考虑一种极端情况:假设在τi时刻,任务T1为执行任务,其剩余价值密度最大,为p×VD1,VD1=V1C1任务,其剩余价值密度最小,为VD2,VD2=V2C2行紧迫性也最小,为qC2行状态转变为等待状态,其剩余价值密度保持不变,执行紧迫性逐渐增大;T2从等待状态转变为执行状态,其执行紧迫性保持不变,剩余价值密度逐渐增大.到τi+x时刻,T1执行紧迫性从最小值增加到最大值q.假设x足够小,T2剩余价值密度增幅足够小,以致可以忽略,因此有βmaxDyPri(T1)Page7maxDyPri(T1(minDyPri(T2(因为在τi时刻,T1为执行任务,T2为等待任务,根据3.4节中的分析,显然有VD1>VD2.又因为q1且C2D2,显然有qqC2因此,当式(7)成立时,系统一定能够避免颠簸现象.故原命题得证.4.2基于动态优先级的抢占调度在实时任务系统中,休眠任务的执行周期尚未到达.因此,在基于动态优先级的实时任务调度时,仅需考虑执行任务、活动任务以及等待任务.在任务调度时,通过计算各个任务的动态优先级,并将活动任务及等待任务中优先级最高的任务与执行任务的优先级进行比较,并根据相应的策略调度,从而使系统获得最佳性能.假设在τi时刻,T1为执行任务,且已执行了t1(0t1<C1)个单位时间.此时,记T1的优先级为DyPri(T1),它保证截止期的基本条件为d1-τiC1-t1.T2是所有活动任务及等待任务中优先级最高的任务,且已执行了t2(0t2<C2)个单位时间.此时,T2的优先级为DyPri(T2),它保证截止期的基本条件为d2-τiC2-t2.那么,基于动态优先级的抢占调度策略说明如下:(1)如果DyPri(T2)<β×DyPri(T1),任务T2未能满足抢占任务T1的条件.T1继续执行,T2保持原状态;(2)如果DyPri(T2)β×DyPri(T1),任务T2满足抢占任务T1的条件.此时,根据T2的截止期可有如下两种不同的处理策略:(a)如果条件d2-τi-(C1-t1)C2-t2与d1-τi-(C2-t2)C1-t1同时成立,说明如果T2等待T1提交后才开始执行,T2仍能保证其截止期;而若T2抢占T1,T1等待T2提交后再继续执行,T1也能满足截止期,这时可按调度策略I(参见4.2.1节)处理;(b)如果条件d2-τi-(C1-t1)<C2-t2成立,说明若T2不抢占T1,T2将无法保证截止期,因此必须实施抢占.这时,根据T1被抢占后是否夭折,可分如下两种不同处理策略:(i)如果条件d1-τi-(C2-t2)C1-t1成立,则说明T2抢占T1,T1等待T2提交后继续执行仍能满足截止期,这时可按调度策略II(参见4.2.2节)处理;(ii)如果条件d1-τi-(C2-t2)<C1-t1成立,则说明T2抢占T1后,T1将无法满足截止期而夭折,这时则按照调度策略III(参见4.2.3节)处理.4.2.1调度策略I实施调度策略I的前提条件是:任务T2满足抢占任务T1的基本条件,且在无其它影响条件下,无论T2抢占T1与否,T1与T2都能满足截止期.这时可有两种不同的处理策略:乐观处理策略与悲观处理策略.(1)乐观处理策略乐观处理策略是任务T2不抢占任务T1,T2等待T1提交后才开始执行.乐观处理策略的处理步骤为:任务T1继续执行,等到T1成功提交后,将T2的优先级设定为maxDyPri(T1),DyPri(T2中,DyPri(T1)为T1等待T2执行(即等待C2-t2个单位时间),直到T2提交时的优先级;DyPri(T2)为T2等待T1执行(即等待C1-t1个单位时间),直到T1提交时的优先级.(2)悲观处理策略悲观处理策略是T2抢占T1.悲观处理策略的处理步骤为:暂停任务T1的执行进程,执行任务T2,T1等待到T2提交后再继续执行.显然,乐观处理策略可以减少任务间不必要的上下文切换,提高系统的效率,而悲观处理可以避免因其它因素影响导致高优先级任务T2无法满足截止期.在实际的实时任务系统中,实时任务的数量很多.如果T2具有较高的基本优先级,即使等待T1提交后,T2仍然有较大可能性获得系统执行权,那么,则采用乐观处理策略,否则,采用悲观处理策略.4.2.2调度策略II调度策略II也称为不夭折抢占调度策略,具体处理步骤为:暂停任务T1的执行进程,执行任务T2,T1等待到T2提交后再继续执行.4.2.3调度策略III若任务T1被任务T2抢占后会错过截止期而夭折,那么,夭折T1将使T1已产生的即时价值无效.因此,若T2夭折T1,T2需要弥补因T1夭折而损失的即时价值.假设在τi时刻,T1已执行的时间为t1,T2已执行的时间为t2,则若T2能抢占T1,则还应满足如下条件:CpPage8β×(CpCp(其中V2-V1×tp期价值,V1×tp综上分析,基于动态优先级的实时任务调度算法具体如下:Notations:·C,V,d,τi,t,p,q,βhavebeendepictedinthepaper·Tctheexecutingtransaction·Qthequeueoftransactionsincludingwaitingtransac-tionsandactivetransactions·TithetransactioninQwhichhasthemaximumpriorityProcedure:PriorityAssignment(Tj)//DPAstrategyBeginif(TjisTcorTj∈Q)elseEndProcedure:TransSchudling(Tc,Q)//DRTPalgorithmBeginSetthevalueofβbasedonformula(7);Foreach(transactionTjintheQ)DyPri(Ti)=max(DyPri(Tj)),hereTj∈Q;ifDyPri(Ti)β×DyPri(Tc)thenelseEnd5仿真实验所有实验均在CPU为AMDAthlon2.0GHz,内存为512MB的PC机上运行,实验程序采用C语言实现.实验中所有任务的时间参数C、D与P均随机产生,且满足C<DP.实验首先分析算法DRTP的基本性能,然后将其同GEDF[17]、HVF[2]及DVD[13]算法进行对比分析.实验中采用3项性能指标来评价算法优劣:系统累积价值收益[24](TotalValue,TV)、任务抢占次数(PreemptionNumber,PN)以及任务截止期错失率(MissDeadlineRatio,MDR).5.1基本性能分析在基本性能实验中,我们假定实时系统包括4个实时任务(如表1所示),且系统负载为2.0.实验中,通过3组实验分别变换参数p、q以及β的值来观察DRTP算法的性能指标.任务CDSVVDT191116606.667T278118011.429T32784020.0T4569306.0实验1.固定参数q=2,改变参数p的值,分析p对算法性能的影响,实验根据式(7)选取参数β的值.实验结果如图2所示,随着p值增大,任务剩余价值密度对优先级的影响增大,任务执行紧迫性对优先级的影响相对减小.因此在任务调度时,剩余价值密度高的任务优先获得执行权,且不易被抢占,大大提高了价值密度大的任务的成功执行率及系统的累积价值收益(如图2(a)所示).此外,q值一定时,颠簸避免系数β的值随p值增大而增大,使任务间抢占的困难加大.因此,如图2(b)所示,当p值增大时,任务之间的抢占次数逐渐减少.根据3.2节中的分析,当p值增大时,执行任务的动态价值密度增幅越大,因而不易被抢占,保证执行任务能够正常完成.因此,如图2(c)所示,任务截止期错失率随p的增加而减小.此外,图2中所示的3项性能指标都说明:当p增大到一定值(等于2.5)后,系统性能基本不变.这是因为,当p值增大到一定值时,任务的剩余价值密度对优先级的影响足够大,以致于可以忽略任务执行紧迫性对优先级的影响.这时,即使继续增大p值,任务优先级也不会有明显的变化,因此对任务执行的结果也没有明显的影响.实验2.固定参数p=2,改变参数q的值,分析p对系统性能的影响,同样地,根据式(7)选取参数β的值.实验结果如图3所示,随着q值增大,任务执行紧迫性对优先级的影响增大,任务剩余价值密度对优先级的影响相对减小.因此在任务调度时,执行紧迫性高的任务优先获得系统执行权.因此,如Page9图2负载为2.0,变化参数p时的系统性能分析图3(a)所示,系统的价值总收益随着q值增大而逐步减小.此外,由于执行任务的紧迫性在执行期间保持不变,而非执行任务(活动任务与等待任务)的紧迫性随着其截止期的临近而不断增加.在任务调度过程中,执行任务与非执行任务的优先级可能交替上升,且q值越大,这种优先级交替上升的速度越快.因此,如图3(b)所示,任务间抢占的概率大大增加.此外,由于执行任务与非执行任务频繁相互抢占,很容易造成任务因无法获得足够的CPU时间而错过截止期,导致任务截止期错失率增大,结果如图3(c)所示.同样地,实验2的3项性能指标都说明:当参数q增大到一定值(3.5)以后,任务紧迫性对任务优先级的影响足够大,从而可以忽略任务价值密度对任务优先级的影响.这时,即使再增大q的值,也不会造成任务优先有明显的变化,因此对任务执行的结图3负载为2.0,变化参数q时的系统性能分析图4负载为2.0,变化参数β时的系统性能分析果也不会有明显的影响.实验3.固定参数p=2,q=2,改变颠簸避免系数β的值,分析β对系统性能的影响.根据4.1节分析,若保证系统无颠簸,β理论取值应不小于7.5.如图4所示,当β取值很小时,任务间可能出现相互抢占现象,造成任务错失截止期的概率增大,系统累积价值收益减少.随着β值增大,任务间抢占的难度增大,系统抢占次数以及任务截止期错失率大大减少,系统累积价值收益增大.从图4还可以看出,当β大于3时,系统的抢占次数、任务截止期错失率及系统价值收益基本保持不变.这说明在实验中,当β大于3时,系统中出现的抢占都是正常的,基本上不存在任务间相互交替抢占现象.这时,继续增大β的值,不会明显减少任务之间抢占次数,对系统累积价值收益以及任务截止期错失率影响都很小.Page105.2性能比较分析性能对比实验将DRTP算法与GEDF[17]、HVF[2]及DVD[13]算法进行对比分析,实验分别在负载为0.5~3.0的实时系统中进行.每种负载条件下,实验选择3组不同任务集分别进行并取平均值,实验结果见图5.如图5(a)和(b)所示,当系统负载较小(1)时,DRTP算法并没有任何优势,系统的价值收益TV及截止期错失率MDR均比GEDF算法差.这是因为,当系统负载较低时,只要能够合理安排截止期早的任务优先执行就能保证绝大部分任务正常完成,而GEDF算法在这方面做得最好.而基于价值(密度)的调度算法则优先选择价值(密度)大的任务图54种算法在不同系统负载下的性能对比分析6总结论文研究了任务剩余价值密度及执行紧迫性随时间变化的特性,并综合这两方面因素,提出了动态分配任务优先级的DPA策略,由此提出了基于任务动态优先级的实时任务调度算法DRTP.该算法可通过改变参数p与q来调节任务剩余价值密度与执行紧迫性对任务优先级影响的权重,提高了算法对满足不同应用需要的灵活性.此外,算法还讨论了任务抢占与非抢占调度的条件,讨论了系统可能出现的颠簸现象及避免颠簸的条件.最后,实验仿真结果显示,当系统负载较高时,DRTP算法能够大大减少任务的抢占次数,降低任务截止期错失率,并提高系统累积价值收益.
