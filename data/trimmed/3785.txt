Page1RGPS制导的按需服务组织与推荐方法刘建晓1),2)何克清1)王健1)余敦辉1)冯在文1)宁达1)张秀伟1)1)(武汉大学计算机学院软件工程国家重点实验室武汉430072)2)(华中农业大学理学院武汉430072)摘要随着互联网上各种Web服务数量的快速增长,如何发现满足用户个性化、多样化需求的服务成为亟待解决的关键问题之一.文中提出了一种面向领域问题的、基于角色-目标-流程-服务模型的按需服务组织与推荐方法.该方法在对与领域问题相关的用户角色(R)、目标(G)、流程(P)和服务(S)进行建模的基础上,利用RGPS元素间的关联关系对领域中服务实现了按需组织,同时根据不同的用户需求表达方式相应地设计了3种服务推荐算法.最后,通过实验验证了所提方法的有效性,并结合实际案例介绍了所开发的系统平台.关键词Web服务;按需服务组织;领域问题;服务推荐;RGPS1引言面向服务的计算作为一种新的计算范型,已经在学术界和工业界产生了深远的影响.与此同时,互联网上的用户需求呈现出多样化、个性化的特点,为了给用户提供高体验质量(QoE)的服务,需要以用户为中心进行服务的有效组织与推荐,实现按需服务[1].在服务计算中,用户的个性化多样化需求往往体现在如下两个方面.一方面,由于不同服务的各种QoS值(服务质量参数)如执行时间、费用、可靠性等往往有较大差异,这样在面对大量实现相同功能而具有不同QoS值的Web服务时,偏好各异的用户其选择结果往往也有所不同.另一方面,针对同一目标,不同用户可能会选择不同的执行流程,从而导致实现这些流程的服务也有差异.这就需要从上述两个方面来考虑进行服务组织,为用户提供高质量服务.针对上述第一方面,现有研究大都采用了对服务进行聚类的方式[2-5],将实现近似功能、且具有不同QoS值的服务进行聚类,这样用户首先查找到实现特定功能的服务类簇,然后根据差异化的QoS请求信息实现进一步的服务查找.本文主要针对第二方面展开研究,即从用户共性需求出发,对具有关联关系的服务进行组织.在服务组织方面目前已有一些研究方法,例如基于业务生成图的服务工作流[6]、GODSS[7]、VINCA[8]、APDR4AWS[9]等方法,这些方法主要是从服务执行的过程、意图、行为角度出发,针对服务间的交互与协作对服务进行组织.服务间的交互与协作是服务组织的基础,而服务间交互与协作一般都是为满足用户特定需求目标而进行的.而现有的研究方法主要考虑了服务间的流程约束关系,并未从用户自身及其需求的特点出发来考虑服务组织,这使得这些方法在进行服务组织时的层次、粒度和视角往往较为单一,同时现有的方法更多地注重利用服务描述信息(比如服务名称、输入输出等)来查找服务,查找到的服务往往是独立的服务,难以根据用户的需求来推荐有效的关联服务,从而影响了按需服务的质量.此外,由于现有的服务组织方法没有考虑用户本身需求的特点,影响了服务查找时的效率和准确率.针对上述问题,本文的主要工作如下:(1)面向具体领域问题SDP(SpecificDomainProblem),对与该问题相关的用户角色、目标、流程和服务进行建模,并定义了RGPS元素间的关联关系.基于TLA(TemporalLogicofActions)对各模型中的相关操作进行建模,通过合理的逻辑顺序实现复杂的模型操作.(2)从用户需求目标、用户角色以及服务之间的流程约束关系等方面进行考虑,设计了面向具体领域问题、RGPS制导的按需服务组织算法,从不同角度、在不同层次、以不同粒度对相关服务资源进行组织管理.根据不同的用户需求表达方式相应地设计了3种服务推荐算法,使用户快速查找到满足其需求的最佳服务或者一组相关联的服务集.(3)根据提出的按需服务组织与推荐方法,利用相关实验和复杂度分析对服务查找效率等方面进行实证分析.介绍了开发的相关系统平台Cloud-CRM,并通过实际案例对模型定义、服务组织与服务执行模块等方面进行了详细说明.本文第2节介绍提出的RGPS制导的按需服务组织框架;第3节在定义RGPS模型以及元素间关联关系的基础上,对各模型中涉及的相关操作进行建模分析,并给出实现服务组织的算法;第4节详细介绍服务查找与推荐算法;第5节利用相关实验对所提出的方法进行验证分析,并介绍开发的相关CloudCRM平台;第6节给出相关工作介绍;最后是总结和下一步工作展望.2RGPS制导的按需服务组织框架如图1所示,本文提出了一种面向领域问题、RGPS制导的按需服务组织框架来实现服务组织,该框架主要包括领域建模、按需服务组织、服务聚类和服务推荐几个方面.(1)领域建模领域专家根据具体领域内用户共性需求进行建模,得到角色模型、目标模型、流程模型和服务模型,可根据相应的操作规则对这些模型中涉及的元素进行相关的操作(包括添加、配置和删除),这些模型是实现按需服务组织的基础.领域模型应尽可能的全面,从而可以对更多类型的服务进行组织,尽可能地满足用户需求.(2)服务聚类根据特定类型的服务模型,把实现近似功能但不同QoS值的服务聚集在一起,形成特定服务模型对应的服务类簇.该服务模型是特定类型服务的抽象,并不指特定的服务实例.服务聚类方面的工作可Page3参考文献[10],本文对此不进行赘述.图1RGPS制导的按需服务组织框架(3)按需服务组织面向具体的领域问题,根据该问题涉及的相关用户的需求目标,同时结合用户的角色、实现目标的流程以及相应的元素间关联关系对相关服务实现面向用户需求的组织.(4)服务推荐根据用户不同的需求表达方式,如提出的需求目标、所属角色、或者服务描述信息,通过不同的服务推荐算法实现服务查找和推荐,使用户得到满足其需求的相互关联的服务集,提高用户查找服务的效率和准确率.3RGPS模型定义及相关操作3.1RGPS的定义及其关联关系角色描述了涉众的社会性属性(职责、组织及规则)及其参与者的偏好及情境约束,是共性用户的抽象.目标是期望待构造系统达到状态的声明,它是对用户意图的一种说明性的描述,可分为功能目标与非功能目标.流程是完成特定目标的具体过程,包括原子流程和组合流程.通过将角色、目标、流程和服务进行有机关联,提出了基于RGPS[11-13]的服务建模与组织方法.在上述给出角色、目标、流程与服务定义的基础上,下面主要介绍4个元素之间的关联关系,为服务的组织规则奠定基础.各元素间的关系见表1.元素1目标(NG)流程实现AC目标(FNG)流程促进CB如表1所示,服务可以满足特定角色需求,完成特定目标以及实现相应的流程.角色承担特定目标,参与流程的构建.流程有助于实现特定功能性目标,促进非功能目标的实现.3.2模型定义格式将其定义如下:实现模型定义的开始状态为Initσ,采用TLAPage4InitσRole∧Goal∧Process∧Service∧RS∧T,其中Role、Goal、Process、Service分别表示定义的具体领域内的角色、目标、流程和服务等领域资产,这些领域资产可由领域建模工具生成.RS表示Role、Goal、Process、Service之间的关联关系集合,T表示相关变量状态的集合.定义1.角色模型.角色模型Mr描述了实现SDP所需的服务可以为哪些类型的用户角色提供服务,Mr=〈Nr,Rr,RS〉,其中:Nr={nr|nr∈Role}表示Mr中包括的角色集;Rr={〈nri,rr,nrj〉,nri,nrj∈Nr,rr∈RS}表示Mr中角色之间的关系集合,比如intersect、equivalent、specialized等;RS={〈nri,ST,nsj〉,nri∈Nr,nsj∈Ms.Ns},表示角色与服务模型中服务之间的ST关系集合.定义2.目标模型.目标模型Mg描述了SDP中包含的目标以及元素间关联关系,Mg=〈Ng,Tg,Rg,GR,GP,GS〉,其中:Ng={ng|ng∈Goal}表示Mg中包括的目标集合;Tg={tg|tg∈FG,NFG}表示目标的类型,分为功能目标(NG)和非功能目标(NFG).NG指可实现的目标,NFG指服务的QoS目标信息,可用定性描述〈非功能目标类型,程度〉或定量描述〈非功能目标类型,比较符,值,单位〉的形式进行表示,本文主要考虑功能目标;表示原子流程和组合流程;Rg={〈ngi,rg,ngj〉,ngi,ngj∈Ng,rg∈RS},表示Mg中目标之间的关系集合;GR={〈ngi,TC,nrj〉,ngi∈Ng,nrj∈Mr.Nr},表示目标与角色模型中角色之间的TC关系集合;GP={〈ngi,AC,npj〉,ngi∈Ng,npj∈Mp.Np},表示目标与流程模型中实现流程之间的AC关系集;GS={〈ngi,AP,nsj〉,ngi∈Ng,nsj∈Ms.Ns},表示目标与服务模型中服务之间的AP关系集;其中,参照领域特征模型中特征间的关系定义,Rg表示的目标之间的关系主要有以下几种:Manda-tory、Optional、Alternative和OR.定义3.流程模型.流程模型Mp描述了SDP中实现特定目标所对应的执行流程以及元素间关联关系,Mp=〈Np,Tp,Ip,Op,Rp,PS〉,其中:集合;Np={np|np∈Process}表示Mp包括的流程Tp={tp|tp∈AP,CP}表示流程的类型,分别Ip和Op表示执行流程所需要的输入和输出集;Rp={〈npi,rp,npj〉,npi,npj∈Np,rp∈RS}表示包含的流程之间的控制约束关系,主要包括Sequence、Choice、Split等关系;示流程与服务模型中服务之间的RL关系.PS={〈npi,RL,nsj〉,npi∈Np,nsj∈Ms.Ns},表定义4.服务模型.服务模型Ms包含了SDP中涉及的一些特定类型的服务以及元素间关联关系,Ms=〈Ns,Is,Os,OPs,Ps,Es,Qs,Rs〉,其中:集合;Ns={ns|ns∈Service}表示Ms包括的服务类型Is与Os表示服务执行所需要的输入和输出集;OPs={ops}表示服务包含的操作集,其中每个操作对应的输入输出均属于Is和Os;Ps和Es表示服务执行所要满足的前提条件以及执行后对环境产生的影响.采用TLA的表示方法,则Ps表示为Pstipi,其中pi表示涉及的变量,ti∈T.Estiopstj,其中ops∈OPs,ti,tj∈T;Qs描述服务的QoS信息,可用〈参数名称,程度〉或〈参数名称,最大值,最小值,单位〉的形式进行表示;Rs={〈nsi,rs,nsj〉,nsi,nsj∈Ns,rs∈RS}表示Ms中包含的服务之间的执行依赖关系.该服务模型包含的服务只是某一类型服务的代表,并不指向具体的服务实例,是一种抽象服务.根据定义的服务模型可以引导相关服务进行聚类形成服务类簇,同一服务类簇中的服务具有相同的功能但具有不同的QoS值.3.3基于TLA的模型操作TLA(TemporalLogicofActions)[14-16]是一种基于模型检验的逻辑,能够很好地描述并发和实时系统的行为.将系统的动作(行为)分解为有序的状态集合,再将状态的变化描述为相应的逻辑公式.在进行服务组织时,会涉及角色、目标、流程以及服务模型中元素的相关操作和模型的动态变化,这些操作离散,有一定的时序性.本文用TLA来对相关操作进行建模,用行为来表示各个模型中涉及的操作.各模型操作的开始状态为Initσ,定义如下:InitσMr∧Mg∧Mp∧Ms∧其中,Mr、Mg、Mp和Ms分别表示已定义的角色、目标、流程和服务模型;RING、GING、PING和SING分别表示正在进行操作的角色、目标、流程和服务元Page5素集合.(1)角色模型操作①添加角色.在实现服务组织的基础上,建模人员可以添加一个用户角色,也需要配置新加角色与已有角色以及该角色与服务模型中服务之间的关系.添加角色活动用Add_R表示,nr表示要添加的角色,则Add_R(nr)(nrMr.Nr)∧(RING=RING∪{nr})∧其中:add(nr,ST,ns)(ns∈Ms.Ns)∧(〈nr,ST,ns〉∈Mr.RS),add(nr,rr,nr)(nr∈Mr.Nr)∧(〈nr,rr,nr〉∈Mr.Rr).②配置角色.配置用户角色时,需要配置角色与角色,以及该角色与服务模型中服务之间的关系.该角色可以是已存在的角色,也可以是新增的角色.配置用户角色活动用Config_R表示,nr表示要配置的角色,则Config_R(nr)(nr∈Mr.Nr)∧(RING=RING∪{nr})∧s=1config(nr,ST,ns))∧(∧rr(∧rs③删除角色删除角色表示删除特定角色以及与该角色相关的关联关系.删除角色活动用Delete_R表示,nr表示要删除的角色,则Delete_R(nr)(nr∈Mr.Nr)∧(RING=RING∪{nr})∧(∧rss=1delete(nr,ST,ns))∧(∧rr(Nr=Nr-{nr}),其中delete用来删除与nr有关联的元素之间的联系.(2)目标模型操作①添加目标.建模人员可以添加一个目标,同时也需要配置新加目标与其它元素之间的关联关系.添加目标活动用Add_G表示,ng表示要添加的目标,则Add_G(ng)(ngMg.Ng)∧(GING=GING∪{ng})∧(Ng=Ng∪{ng})∧(∧grp=1add(ng,AC,np))∧(∧gs(∧gp(∧ggg=1add(ng,rg,ng)),其中:add(ng,TC,nr)(nr∈Mr.Nr)∧(〈ng,TC,nr〉∈Mg.GR),add(ng,AC,np)(np∈Mp.Np)∧(〈ng,AC,np〉∈Mg.GP),add(ng,AP,ns)(ns∈Ms.Ns)∧(〈ng,AP,ns〉∈Mg.GS),add(ng,rg,ng)(ng∈Mg.Ng)∧(〈ng,rg,ng〉∈Mg.Rg).②配置目标.配置目标时,需要配置目标与目标以及该目标与角色、流程、服务之间的关系.该目标可以是已存在的目标,也可以是新增目标.配置目标活动用Config_G表示,ng表示要配置的目标,则Config_G(ng)(ng∈Mg.Ng)∧(GING=GING∪{ng})∧(∧grr=1config(ng,TC,nr))∧(∧gp(∧gss=1config(ng,AP,ns))∧(∧ggconfig(tg).③删除目标.删除目标表示删除特定目标以及与该目标相关的关联关系.删除目标活动用Delete_G表示,ng表示要删除的目标,则Delete_G(ng)(ng∈Mg.Ng)∧(GING=GING∪{ng})∧(∧grr=1delete(ng,TC,nr))∧(∧gp(∧gss=1delete(ng,AP,ns))∧(∧gg(Ng=Ng-{ng}).流程模型与服务模型中涉及的相关操作的表示方式与上述角色模型和目标模型中操作类似,限于篇幅,在此不再阐述.3.4按需服务组织在定义了角色模型、目标模型、流程模型、服务模型以及各模型中元素间语义关联关系的基础上,本节面向具体领域问题,比如交通出行、旅游规划等,从该问题涉及的用户角色、需求目标以及服务执行流程几个方面进行考虑,对相关的服务实现按需组织.首先对具体领域问题定义如下.TripleSDP,GoalSDP},其中:定义5.具体领域问题.SDP={CompSDP,CompSDP={ei,ei∈{Mr.Nr,Mp.Np,Ms.Ns}};GoalSDP={eg,eg∈Mg.Ng};TripleSDP={〈ei,rk,ej〉,ei,ej∈{CompSDP,GoalSDP},rk∈RS}.其中,CompSDP是SDP所涉及的角色、流程以及服务元素的集合;GoalSDP表示SDP包含的目标集合;TripleSDP表示元素间所有关联关系的集合.可见SDP是通过4个模型以及各模型中元素之间语义关联关系组织形成的.算法1给出了如何根据这些模型以及模型中元素间的关联关系生成Page6SDP的过程,进而指导相应Web服务实现聚类以及组织.为表示方便,将TripleSDP简写为TS.算法1.按需服务组织算法SerOrganization.Input:Mr,Mg,Mp,Ms,WS={ws1,ws2,…,wsn}Output:SDPWS1.SDPWS←,GoalSDP←,cluster[]←;2.Foreachngi∈Mg.Ng3.GoalSDP←GoalSDP∪ngi;4.Foreach〈ngi,TC,nrj〉∈Mg.GR5.if(nrjSDP)Then6.CompSDP←CompSDP∪nrj;7.TS←TS∪(〈GoalSDP.ngi,TC,CompSDP.nrj〉);8.Foreach〈ngi,rg,ngj〉∈Mg.Rg9.findGoalSDP.ngi==ngi&GoalSDP.goalj==goalj;10.TS←TS∪(〈GoalSDP.ngi,rg,GoalSDP.ngj〉);11.Similartostep8~10andaddrolerelations;12.Foreach〈ngi,AC,npj〉∈Mg.GP&&npjSDP13.CompSDP←CompSDP∪npj;14.TS←TS∪(〈GoalSDP.ngi,AC,CompSDP.npj〉);15.Foreach〈npi,RL,nsj〉∈Mp.PS16.if(npi==npj&&nsjSDP)Then17.CompSDP←CompSDP∪nsj;18.Foreachservicewss∈WS19.if(Sim(nsj,wss)>α)Then20.cluster[k]←cluster[k]∪wss;21.TS←TS∪(〈CompSDP.npi,RL,CompSDP.nsj〉);22.Similartostep8~10,addprocessandservice23.Foreach〈ngi,AP,nsj〉∈Mg.GS24.TS←TS∪(〈GoalSDP.ngi,AP,CompSDP.nsj〉);25.Foreach〈nri,ST,nsj〉∈Mr.RS26.TS←TS∪(〈GoalSDP.nri,ST,CompSDP.nsj〉);27.SDPWS←(CompSDP,TS,GoalSDP);28.returnSDPWS.在上述算法1中SDPWS表示面向SDP组织的服务.该算法根据具体领域问题中涉及的目标集合,首先加入与特定目标具有TC关系的角色以及二者之间的关联,见步4~7.然后添加角色与角色以及目标间的关系,见步8~11.步12~21描述了如何根据目标与流程间的AC关联关系以及流程与服务间的RL关系添加流程与服务.最后添加流程间、服务间、目标与服务以及角色与服务间的关联关系,见步22~26,最后根据4个元素以及元素间的关联关系生成SDP.通过上述方法,面向具体问题的相关服务在服务模型的引导下进行聚类可形成各个服务类簇,然后从该问题涉及的用户的角色、需求目标、实现流程等方面考虑将其组织在一起.此方法从用户自身的需求目标出发,同时考虑其辅助特征(角色,执行流程)将相关联的服务组织在一起,这样用户可以快速查找到满足其需求的一系列服务(包括原子服务和组合服务),有助于提高服务查找效率和准确率.4服务查找与推荐前面介绍了如何实现按需服务组织,本节主要介绍如何根据用户实际需求查找和推荐合适的服务的具体过程.在对领域服务进行组织的基础上,用户可以从中查找满足其需求的服务,不同用户表达需求的方式有所不同.用户可以直接提出需求目标来查找服务,比如查询快递、查询天气等.用户也可以通过服务名称、服务输入输出以及QoS信息来直接查找所需服务,比如天气预报服务、价格小于1元的快递公司查询服务等.用户还可以通过其所属角色来查找服务,比如查找与学生相关的服务.因此,本文根据不同用户的不同的需求表达形式,采用不同的方法在服务组织中查找合适的服务.(1)根据用户需求目标查找服务.由算法1所述的按需服务组织方法可知,服务是通过不同模型中元素与元素间的关联关系来实现组织的.可以采用构造图的方法来表示组织的服务,也就是将模型中的元素看作图中的节点,元素间的关联关系看作节点间的边来构造图,这样便于采用图的相关方法进行操作,比如增加、删除节点以及查找节点等操作.算法2给出了根据用户需求目标实现服务查找推荐的具体过程.算法2.SerDiscoveryGoal.Input:goalrequest,SDPWSOutput:RWS1.RWS←,ND←;2.num←(SDPWS.GoalSDP.length+3.Foreachei∈(GoalSDP∪CompSDP)4.ifei∈Role/Goal/Process/ServiceThen5.nodes[i].type←R/G/P/S;6.graph←newGraph(nodes,num);7.Foreach〈ep,rk,eq〉∈SDPWS.TripleSDP8.graph.insert(newEdge(ep,rk,eq));9.Foreachnodeg∈graph10.if(nodeg.type==G)Then11.if(match(goalrequest,nodeg)>β))ThenPage712.Foreachnodewhichhasedgewithnodeg13.if(node.type==S)ThenND←ND∪node14.if(node.type==P)Then15.Foreachnodeshasedgewithnode16.if(nodes.type==S)Then17.Foreachs∈Ns.clusterofND18.UseQoSinfor,RWS←RWS∪s;19.returnRWS.上述算法给出了根据特定目标在通过RGPS制导方法组织的服务中查找服务的具体过程,首先根据RPGS模型以及元素间的关联关系构造图,将CompSDP与GoalSDP中元素看作图中节点,将TripleSDP中元素间的关系看作节点间的边,并对相关的节点类型进行标记,见步2~8.然后通过匹配计算查找满足需求的目标节点,再根据目标节点利用AP关系进行相关的服务查找.或者根据目标利用AC关系查找实现该目标的流程,根据特定流程实现对应服务的查找.在找到服务模型对应的服务类簇后,根据QoS信息在服务类簇中进一步查找到合适的服务返回.假设图2是根据上述算法构造的图,各节点表示模型中角色、目标、流程、服务4个元素,节点之间的边则表示元素之间的关联关系.在该图中,节点A和B表示Mr中的角色,节点C和D表示Mg中的目标,节点E、F和G表示Mp中流程,节点H、I、J、K和L则表示Ms中的服务.如果节点D与goalrequest之间匹配度大于阈值(如步11),则通过步12~13直接查找到服务节点L.当此服务不能满足需求时,则通过流程实现进一步查找.可以查找到实现D的节点G,进而查找到节点K与L,见步14~16.在图2中这些节点标为灰色,可得最后的节点K和L.K和L是服务模型中两个节点,代表两类不同类型的服务,进而对应到不同的服务类簇.然后用户根据QoS需求信息可以查找到合适的服务(步17~18).(2)根据用户角色查找服务.同理,采用构造图的方法来构造服务组织图,然后根据用户角色查找服务,具体过程如算法3所示.算法3.SerDiscoveryRole.Input:rolerequest,SDPWSOutput:RWS1.RWS←,ND←,ngoalmid←;2.Usestep2~8ofalgorithm2toconstructgraph3.Foreachnodeg∈graph4.if(noder.type==R)5.if(match(rolerequest,noder)>β))Then6.Foreachnodewhichhasedgewithnoder7.if(node.type==S)Then8.ND←ND∪node;9.if(node.type==G)10.ngoalmid←ngoalmid∪node;11.Foreachnode∈ngoalmid12.Usealgorithm2(goalrequest)toaddservicenode;13.Foreachs∈Ns.clusterofND14.UseQoSinfor,RWS←RWS∪s;15.returnRWS.在上述算法中,首先构造图,通过用户角色与服务组织涉及的角色进行匹配计算查找到合适的角色节点,根据ST关系实现服务的直接查找,见步骤7~8.然后利用角色与目标之间的TC关系查找到rolerequest对应的目标,并利用算法2中的方法查找到对应服务.同理,在找到服务模型元素对应的服务类簇后,在服务类簇中根据QoS信息进一步查找到合适的服务返回.由于一个角色经常会有多个需求目标,所以通过用户角色查找的服务个数往往会多于通过目标查找到的服务.(3)根据服务描述信息查找服务.服务本身有一些相关属性信息,如服务名称、输入、输出、前置和后置条件等,可以根据服务的这些属性信息通过相应匹配计算直接进行服务查找,此方面已有一些研究工作,在此不再具体阐述.在通过此方法找到所需服务后,用户需要的往往不仅仅是独立的服务,而是需要一些具有关联关系的服务集.在通过RGPS制导方法形成的服务组织中,可以利用模型元素间的关系来辅助查找和推荐具有关联关系的服务.假设已找到的服务为ns,可以利用如下3种方式来推荐与ns有关联关系的服务.其中,RES(s)表示服务s的关联服务集;Page8REG(s)用来表示服务s的关联目标集;RER(s)表示服务s的关联角色集.①服务关联法.利用Ms中定义的服务间执行关系集Rs={〈nsi,rs,nsj〉}实现关联服务查找:((nsi∈Ms.Ns)∧(ns≡nsi)RES(ns)=nsj)∪((nsj∈Ms.Ns)∧(ns≡nsj)RES(ns)=nsi).表示存在nsi属于Ms.Ns且ns与nsi等价,则推出ns的关联服务为nsj;当ns与nsj等价且nsi属于Ms.Ns,则推出ns的关联服务为nsi.②目标反推法.利用Mg中定义的目标与服务关系集GS={〈ngi,AP,nsj〉}查找关联服务:(nsj∈Ms.Ns)∧(ns≡nsj)∧(〈ngi,AP,nsj〉∈GS)REG(ns)=ngi,然后根据SerDiscoveryGoal(ngi,SDPWS)RES(ns)=RWS.表示首先找到与ns等价的nsj,然后通过GS找到与nsj具有AP关系的ngi,最后通过SerDiscoveryGoal找到对应的关联服务.如图3(a)所示,(ns≡S1)∧(〈G1,AP,S1〉∈GS)REG(ns)=G1,根据SerDiscoveryGoal(G1,SDPWS)RES(ns)={S2,S3}.③角色反推法.同理利用Mr中定义的角色与服务关系集RS={〈nri,ST,nsj〉}查找服务:(nsj∈Ms.Ns)∧(ns≡nsj)∧(〈nri,ST,nsj〉∈RS)RER(ns)=nri,然后根据SerDiscoveryRole(nri,SDPWS)RES(ns)=RWS.表示首先找到与ns等价的nsj,然后通过RS找到与nsj具有ST关系的nri,最后通过SerDiscoveryRole找到对应的关联服务.如图3(b)所示,(ns≡S1)∧(〈R1,ST,S1〉∈RS)RER(ns)=R1,根据SerDiscoveryRole(R1,SDPWS)RES(ns)={S2,S3,S4}.总之,针对用户不同的需求表达方式,可以通过上述3种不同的服务查找与推荐算法在RGPS制导的按需服务组织中查找到所需的单个服务或者相关联的服务集,从而高质量地满足用户需求.5实验与系统平台5.1实验与分析(1)实验环境软件环境:WindowsXP,MyEclipse8.5M2,MindswapOWL-SAPI(http://www.mindswap.org/2004/owl-s/api/),xampp(http://www.apache-friends.org/en/xampp.html);数据来源:OWLS-TC(http://projects.sem-webcentral.org/projects/owls-tc/),该数据集包含了超过1000个服务,覆盖了7个应用领域:food、weapon、education、communication、medicalcare、economy和travel,本文在education领域进行实验;硬件环境:CPU为双Intel(R)Core(TM)2i5CPU760@2.80GHz,内存为4GB.(2)实验本文主要对以下几种方法进行比较:Random方法:未采用服务组织方法对服务实现组织,即随机方法,简称RD;Workflow方法:主要利用工作流[6]的方式来组织服务,利用工作流定义的服务间的关系查找服务,简称WF;Goal-Service方法:采用RGPS制导的方法组织服务,利用目标与服务信息来查找服务,简称GS;Role-Service方法:采用RGPS制导的方法组织服务,利用角色与服务信息来查找服务,简称RS;Service-Service方法:采用RGPS制导的方法组织服务,利用服务信息以及服务间的关联关系来查找服务,简称SS.实验1.单个服务查找请求的服务查找时间对比.本实验随机生成10,20,30,40,50,60,70,80,90,100次单个服务查找请求,采用上述几种不同的服务组织查找方法进行服务查找,对服务查找时间进行对比分析,实验结果如图4所示.由图4可见,对于特定次数的服务查找请求,采用RD、WF、GS、RS和SS方法查找服务的时间有所不同.服务请求次数越多,不同方法对应的查找时间差距越大.对于特定次数的服务请求,RD、WF以及SS方法对应的服务查找时间则相差无几,且3种方法对应服务查找时间最多,而GS对应的服务查找时间最少,RS次之.这是由于对于单个的服务请求,RD、WF以及SS3种方法在查找服务时,没有Page9图4单个服务请求个数的服务查找时间对比利用服务具有的相关属性信息,需要逐个地对服务进行匹配计算,使得比较的次数增加,从而增大服务查找时间.而GS与RS在查找服务时,分别利用了服务的目标与角色信息,可以缩小服务查找的范围,减少服务查找时间.由于特定目标对应的服务个数要少于特定角色对应的服务个数,所以GS要比RS对应的服务查找时间要少.实验2.两个关联服务查找请求的服务查找时间对比.本实验随机生成10,20,30,40,50,60,70,80,90,100,200,300次具有关联关系的两个服务查找请求,采用不同的服务组织查找方法进行服务查找,对其服务查找时间进行对比分析,实验结果如图5所示.图5两个关联服务请求次数的服务查找时间对比由图5可见,对于特定次数的两个关联服务请求,采用RD、WF、GS、RS和SS方法查找服务的时间有所不同.且服务请求次数越多,不同方法对应的查找时间差距越大.对于特定次数的关联服务请求,RD方法对应的服务查找时间最多,GS的服务查找时间最少,RS次之.WF与SS的服务查找时间差不多,所用时间要少于RD方法,但要高于RS与GS方法.同理这是由于RD方法没有利用服务间具有的关联关系的属性信息,需要逐个对服务进行匹配计算,导致服务查找时间最多.WF与SS仅仅利用了服务间的关联关系,而RS与GS方法则利用了服务对应的角色与目标信息,这样在通过WF与SS方法查找到某个服务s1时,假如查找另外的服务s2与已查找到的服务s1没有关联关系,而此服务s2与已查找到的服务s1可以通过用户的角色与目标进行关联,这样WF与SS方法需要重新逐个匹配计算来查找s2,导致服务查找时间增多.RS与GS则利用了服务间的角色、目标关联关系,可以大大缩小服务查找范围,提高效率.由于GS对应的服务个数要少于RS对应的服务个数,所以前者对应的服务查找时间最少,RS次之.实验3.不同关联服务个数的查找时间对比.本实验在关联服务个数k取1~10的不同情况下,对于特定的服务查找请求次数(30),采用不同的服务组织查找方法进行服务查找,对查找时间进行对比分析,实验结果如图6所示.图6不同关联服务个数的服务查找时间对比由图6可得,特定服务组织查找方法对应的服务查找时间随着k值的增大而增大,这是由于需要查找更多个数的服务所致.对于特定k,RD方法所用的时间最多,GS最少,RS次之,WF与SS方法对应的时间基本相同,但要远少于RD方法,高于GS与RS方法,此结果与实验1和2保持一致.另外,随着k值的增大,不同方法对应的服务查找时间差距变得越来越大.实验4.组织聚类服务的关联服务查找时间对比.前面3个实验所查找的服务是抽象服务,也就是本文定义的服务模型中的抽象服务.由3.2节可见,此抽象服务是一类具有特定功能服务的代表,可以对应到不同的服务类簇,本文探讨的服务组织方法是对不同服务类簇的组织.本实验是在前面3个实验的基础上,将不同的抽象服务对应到不同的服务类簇.在k=6的情况下,根据不同的关联服务请求次数,对不同服务查找方法所耗的查找时间进行统计,如表2所示.Page10表2组织聚类服务的关联服务查找时间(犽=6)服务请求次数1015.29913711.7217319.0302929.68795611.4929922021.70880316.90512514.15288614.20057015.8632053030.46284121.31883415.61571617.84052822.8558854037.36680224.41815619.94207822.01271024.2400805044.52736730.37073122.08033425.43112430.8275286050.77947034.67885225.72941828.46422434.1642107058.32316638.97875230.51315931.68404237.7721868065.63466042.55243034.00977334.96549243.6316769074.62104046.53573236.69107441.02686748.42188610079.53181553.67833339.09315542.46621751.976254由表2可见,在组织的服务类簇的基础上查找服务的所耗时间远多于上述几个实验中查找抽象服务所用的时间,这主要是由于首先要找到正确的抽象服务,然后在抽象服务对应的服务类簇中查找所表3服务查找时间复杂度对比不同情况请求ORD单个服务请求O(n)服务请求O(n×k){O(k2×(n-2s)+k1×2s),k(k>1)个关联{O(n×k/g),O(n×k)}当k>g时,O(n×k/g)注:设k=k1+k2,k1为在服务关联中的服务个数,k2为不在服务关联中的服务个数.OGSO(n/g)当kg时,设n=100,g=10,r=4,s=20,则ORD=OWF=OSS=O(n)=100,OGS=O(n/g)=10,ORS=O(n/g)=25.当k=4,且k1=3,k2=1时,ORD=O(n×k)=400,OWF=OSS={O(k2×(n-2s)+k1×2s),O(n×k)}={280,400},OGS={O(n×k/g),O(n×k)}={40,400},ORS={O(n×k/r),O(n×k)}={100,400};当k=20,且k1=15,k2=5时,ORD=O(n×k)=2000,OWF=OSS={O(k2×(n-2s)+k1×2s),O(n×k)}={900,2000},OGS={O(n×k/g),O(n×k)}={200,2000},ORS={O(n×k/r),O(n×k)}={500,2000}.通过表3以及相关计算分析可得,RD方法的时间复杂度明显最高,GS的最低,RS则次之,WF与SS方法的复杂度相同,但二者的复杂度要小于RD方法,大于GS与RS方法,这与前述实验结果保持一致.另外,随着服务数目的增加,上述几种服务查找方法间的时间复杂度差距变得越来越大.5.2CloudCRM平台课题组开发了一个云服务超市平台———Cloud-CRM①,其中的服务组织以及服务推荐模块是用本文所述方法进行开发的.该平台是基于开源客户关需服务所致.不同方法对应的时间比较与前述实验结果大致相同,在此不再阐述,但其效果更加明显.(3)时间复杂度分析下面主要通过服务查找算法时间复杂度分析来进一步说明上述实验结果,分别分析比较用户在服务组织中查找单个服务以及关联服务的时间复杂度.假设通过按需服务组织的服务数为n,这些服务间的关联关系数为s,n个服务对应的角色数为r,目标数为g,且n>s>g>r.可得与每个角色具有关联关系的平均服务个数为n/r,同理与每个目标具有关联关系的平均服务个数为n/g.表3给出了通过RD、WF、GS、RS和SS几种方法查找服务的时间复杂度(ORD、OWF、OGS、ORS、OSS)对比结果.系管理系统SugarCRM[17]所进行的二次开发,对SugarCRM进行服务化改造.由于SugarCRM是用php语言开发的,在进行服务封装时,服务的源文件是由php语言开发.通过下面两个步骤实现服务封装:(1)为每个功能模块创建对应的.php文件;(2)采用ZendStudioforEclipse-6.1.2将.php文件封装为服务(.wsdl).使用两种方法为封装服务创建对应的源文件,一方面利用SugarCRM向外暴露的服务接口(SugarWebServicesAPI),将SugarCRM内的一些常用功能(如联系人管理、电话管理)封装为Web服务.另一方面通过对程序中的源代码进行抽取,并对实现某一功能的函数进行直接调用,将尚未对外暴露接口的功能封装为服务.目前已将SugarCRM中的Account、Contact、Case、Lead等共14个模块封装为不同服务,而将模块中的增、删、改、查等子功能封装为服务中的不同操作.该平台在进行领域建模的基础上,面向客户关系管理以及快递货品两个具体领域问题,采用RGPS制导的按需服务组织方法实现了相关服务的组织.除上述封装的服务外,服务超市中还注册了互联网上开放的一些WebAPI和服务(如快递100、①http://202.114.107.230:8080/CloudCrm/login.jspPage11发送短信等),支持用户根据需求进行服务选择和调用.针对快递货品这一具体领域问题,其涉及的服务包括快递公司查询服务、联系人服务、快递100服务、百度地图服务、RFID完整性检测服务和天气查询服务等.该问题对应的RGPS模型定义如下:Tp={AP};IP=Op=NULL;Rp={〈选择快递公司_P,Sequence,获取收件人人员,ST,天气查询服务〉}.(1)角色模型:Mr=〈Nr,Rr,RS〉,Nr={销售人员};Rr=NULL;RS={〈销售人员,ST,快递查询服务〉,〈销售(2)目标模型:Mg=〈Ng,Tg,Rg,GR,GP,GS〉,Ng={快递货品_G,寄送货品_G,选择快递公司_G,获取收件人联系方式_G,跟踪货品_G,查询订单_G,显示订单信息_G,文本显示订单_G,地图显示订单_G,查询货品完整性_G,获取天气信息_G};Tg={FG};Rg={〈快递货品_G,Mandatory,寄送货品_G〉,〈快递货品_G,Mandatory,跟踪货品_G〉,〈寄送货品_G,Depend,跟踪货品_G〉,〈寄送货品_G,Mandatory,选择快递公司_G〉,〈寄送货品_G,Man-datory,获取收件人联系方式_G〉,〈跟踪货品_G,Mandatory,查询订单_G〉,〈跟踪货品_G,Mandatory,显示订单信息_G〉,〈跟踪货品_G,Mandatory,查询货品完整性_G〉,〈跟踪货品_G,Mandatory,获取天气信息_G〉,〈显示订单信息_G,OR,文本显示订单_G〉,〈显示订单信息_G,OR,地图显示订单_G〉;GR={〈快递货品_G,TC,销售人员〉,〈寄送货品_G,TC,销售人员〉,〈跟踪货品_G,TC,销售人员〉…};GP={〈选择快递公司_G,AC,选择快递公司_P〉,〈查询货品完整性_G,AC,查询货品完整性_P〉…};GS={〈选择快递公司_G,AP,快递公司查询服务〉,〈获取收件人联系方式_G,AP,联系人服务〉,〈文本显示订单_G,AP,快递100服务〉,〈地图显示订单_G,AP,百度地图服务〉,〈查询货品完整性_G,AP,RFID完整性检测服务〉,〈获取天气信息_G,AP,天气查询服务〉}.(3)流程模型:Mp=〈Np,Tp,Ip,Op,Rp,PS〉,Np={选择快递公司_P,获取收件人联系方式_P,查询订单_P,文本显示订单_P,地图显示订单_P,查询货品完整性_P,获取天气信息_P};联系方式_P〉,〈获取收件人联系方式_P,Sequence,查询订单_P〉,〈文本显示订单_P,Choice,地图显示订单_P〉,〈查询订单_P,Sequence,地图显示订单_P〉};PS={〈选择快递公司_P,RL,快递公司查询服务〉,〈获取收件人联系方式_P,RL,联系人服务〉,〈查询订单_P,RL,快递100服务〉,〈地图显示订单_P,RL,百度地图服务〉,〈查询货品完整性_P,AP,RFID完整性检测服务〉,〈获取天气信息_P,AP,天气查询服务〉}.(4)服务模型:Ms=〈Ns,Is,Os,OPs,Ps,Es,Qs,Rs〉,Ns={快递公司查询服务,联系人服务,快递100服务,百度地图服务,RFID完整性检测服务,天气查询服务};I1={Place,Price,Weight},I2={Name},I3={Number,Expresscompany},I4={Places},I5={Number},I6={Data,Places};O1={Expresscompany},O2={Address,PhoneNumber},O3={DeliveryInfo},O4={MapInfo},O5={RfidInfo},O6={WeatherInfo};OPs=NULL;P3{validNumber,validCompany};P5{validRFID};E3{NotObtainedGetDeliveryInforObtained};E5{UncheckedGetIntegrityInforChecked};Qs=Rs=NULL.根据上述快递货品相关的RGPS模型描述,实现的部分服务定制模块如图7所示.可以看出,快递货品问题涉及到的用户角色为销售者,目标包括跟踪货品、显示订单信息等,执行流程包括选择获取收件人联系方式、查询订单等.其中文本显示订单信息、地图显示订单信息如图7(b)所示.6相关工作关于服务的组织目前已有一些研究工作,文献[7]中将服务结点作为构成服务聚合组织流程模型的基本逻辑单元,该服务节点的含义类似于本文讨论的服务模型,利用服务结点按照特定的业务逻辑可以建立通用服务聚合流程模型.该方法重点讨论服务聚合流程的多目标优化的服务动态选择问题,且该方法主要从服务的业务逻辑集成角度讨论服务聚合组织的,也就是本文所述的流程.文献[6]提出了用Page12户为中心的基于业务生成图的服务工作流构造方法,首先将功能相同或相似的服务聚集成一类服务集合,然后在服务集合的基础上采用生成树的方法对其进行组织.该方法同样重点从服务执行过程角度对服务进行组织.文献[8]中采用了业务用户编程的方式,面向业务用户组织服务资源以及以业务过程为中心进行业务级服务组合,提出了一种“中间相遇”的方法来实施服务聚合.此方法采用的用户编程方式实施服务聚合,将用户业务需求直接映射为虚拟化服务资源,从业务功能输入与非功能约束方面进行考虑查找服务实例.Howard等人[18-19]则为动态语义Web服务的组织管理提出了一个基于知识的框架KDSWS,在虚拟组织中采用代理的方式,以工作流的形式实施语义Web服务交互、组合、执行和管理等.上述几种研究方法重点从执行流程方面考虑对相关服务进行组织,而本文则面向具体的领域问题,从该问题涉及用户角色、需求目标、实现流程和服务模型几个方面进行综合考虑,并从上述几个方面之间的关联关系入手,对相关服务进行组织.这样用户可以分别通过其所属角色、需求目标或者完成特定功能的业务流程来查找所需的服务,实现按需服务,可以提高服务发现的效率和准确率.文献[20]中提出一种用户驱动的服务聚合技术,该方法根据用户需求将功能相似的服务聚合成服务池并封装为单一的虚拟服务,随后根据用户QoS需求进行自动协商,选出最佳服务或服务组合,其讨论的服务池的概念类似于本文的服务模型.该方法重点是根据用户的个性化特定需求来实施服务聚合组织的,且通过该方法用户查找到的服务基本上是原子级服务.文献[21]中则提出一种以用户为中心、基于多视图合成的服务组合方法,将用户的需求转化为在多个视图编程操作方法,参照用户的视图操作合成服务组合流程.该方法从用户需求出发,参照用户需求声明的约束条件,以用户为主导、探索式地对服务进行组织.文献[22]中提出一种面向个性化需求的虚拟服务资源整合方法,首先以多维度分类树的方式对服务资源进行描述,然后根据用户个性化需求,将其经过分类、约简并以规范、可重用的方式进行表达,提出了基于动态剪枝的服务资源整合方法.该方法可以兼顾用户需求和资源组织的特点,通过动态整合批量资源形成虚拟的大粒度资源来快速满足个性化应用需求.文献[9]引入具有主动搜索需求能力的自主Web服务概念,提出基于环境本体的意图-行为-实现机制,提出了一种需求驱动的自主Web服务聚集的模型.该方法主要将服务建模为具有实现某些意图行为的自主计算实体,使服务根据用户需求实现自主性的聚集来满足用户需求.上述几种方法主要从用户实时需求出发,通过相应方法实施服务组织的.而本文则是侧重于根据具体的领域问题对应的用户功能需求,将相关服务根据该问题涉及的用户角色、需求目标、实现目标的流程之间的依关联系进行组织,从而为实现用户的按需服务选择奠定基础,而不是根据用户的需求实时进行服务组织.文献[23]提出了一个支持动态服务组合的Web服务3层组织模型,按服务包含的操作、各操作的功能和接口参数信息将它们映射到不同的组织单元.该方法没有考虑服务间的协作关系以及涉及的用户信息来组织服务.Benatallah等人[24]提出了服务社区概念,通过服务社区来对服务进行组织,可以应用于动态分布式的Web执行环境中.在文献[25]中采用数学模型方式,提出了一个Web服务管理框架来实现动态业务过程配置,从服务功能角度,面向任务等方面组织服务来满足用户需求.Page137总结在面向服务的软件工程中,为了满足用户个性化、多样化、动态变化的需求,需要从服务执行的过程、用户本身角色以及其需求目标等方面进行考虑,对相应的服务进行组织来提高服务发现的效率和准确度.本文的主要的工作如下:(1)通过对具体领域问题中的用户共性需求进行建模,从其涉及的用户角色、需求目标、流程几个方面进行考虑,设计了相应的按需服务组织算法.(2)设计了3种服务查找和推荐方法来满足用户提出的不同需求表达形式,更好地指导用户利用服务间的交互与协作来查找合适的服务以满足其需求.(3)设计了具体的实验对服务查找效率等方面进行验证分析,根据实际案例对相关定义和算法进行阐述,并介绍了开发的相关系统平台CloudCRM.下一步的研究工作主要包括:根据用户个性化需求使用户参与服务流程定制以及对定制的流程进行正确性验证等,从而实现更为个性化的按需服务.
