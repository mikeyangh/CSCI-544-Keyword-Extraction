Page1基于范德蒙码的HDFS优化存储策略研究宋宝燕王俊陆王妍(辽宁大学信息科学与技术学院沈阳110036)摘要随着大数据时代的到来,新型文件系统HDFS(Hadoop分布式文件系统)的应用越来越广泛.但其本身也存在着整体存储成本过高、可扩展性低、节点负载均衡能力不足等问题.因此,该文提出了一种基于范德蒙码的HDFS分散式动态副本存储优化策略,针对HDFS大多部署在大量的廉价硬件集群上的实际情况,在范德蒙码优化策略的基础上,采用分散式动态副本控制的思想对HDFS文件操作的计算过程、计算模式以及译码触发策略进行系统的改进,并通过校验码动态设置的方式将容错度控制在一个理想的范围之内,此外,结合伽罗华有限域理论对范德蒙码的编译码操作及计算方法进行全面优化,在不影响HDFS存储结构的前提下,降低了范德蒙码编译码的时间代价和计算的内存压力,节约了HDFS约30%的存储开销,数据可靠性提高了约200%,均衡HDFS系统节点负载能力,译码恢复效率平均提升约40%,形成了一套完整的、系统的优化方案,为未来HDFS的发展提供了一条有效途径.关键词大数据;HDFS;范德蒙码;分散式动态副本;优化存储1引言随着IT技术迅猛发展以及信息化的深入,数据的生成量大约每两年就会上翻一倍,几乎达到了电子领域中摩尔定律的标准.据统计,平均每秒有200万用户在使用谷歌搜索,Facebook用户每天共享的内容超过40亿,Twitter每天处理的推特数量超过3.4亿[1].大数据时代下,数据量的增长速度会超过存储数据介质容量的增长速度[2],即存储代价会不断上升,存储介质的成本在不断增加.面对这种巨大的数据生成量,传统数据管理系统中的数据处理技术受到了极大挑战[3],如何更高效、稳定的存储这些数据,成为数据处理等许多领域研究的热点[4].目前人们往往采用HDFS(Hadoop分布式文件系统)来存储这些大数据.HDFS是一种可靠的、容错的文件系统,适合低廉地存放大规模的数据.但随着HDFS被广泛使用,其固有的如整体存储成本过高、可扩展性低、节点负载均衡能力不足等问题也越来越突显.针对这些问题,许多专家学者进行了深入广泛的研究,取得了卓有成效的进展,如针对云端存储优化的HDFS存储传输策略[5]、以高效存储为目的基于XOR码的HDFS优化策略[6-7]等.在此基础上,本文亦对大数据的有效存储问题进行了研究,提出了一种基于范德蒙码的HDFS优化存储方法:(1)针对HDFS存储成本过高的问题,采用了基于范德蒙码的编译码操作对HDFS进行数据优化,摒弃HDFS原本的多副本镜像复制策略;(2)加入分散式动态副本控制思想,改进单纯范德蒙码策略无法应对灾难性机架和节点失效的问题;(3)采用分组分列策略以及有限域理论对译码操作的计算过程、计算模式和计算方法进行改进,精简矩阵运算的步骤;(4)根据范德蒙码输出矩阵的特点,改进译码触发操作的时机,降低译码操作触发的频率.2相关工作2.1HDFSHDFS有别于已有的分布式文件系统.其核心设计思想为“一次写入,多次读取[8]”的高效访问方式,且系统不需要架设在价格高昂、性能稳定的硬件设备上[9].HDFS采用Master/Slave架构[10]设计,目的是对大量数据的吞吐应用进行优化[11].同时,与磁盘存储默认的数据块概念类似,HDFS上的文件被划分为多个Block分块[12],且每个Block分块都作为独立的存储单元,以多副本备份策略进行存储工作.2.1.1HDFS架构HDFS由两类节点构成:管理者Namenode和工作者Datanode[13].这两类节点相互分工又共同协作,分别以不同的模式运行,完成各自的任务.图1为HDFS的组织结构图.如图1所示,HDFS中管理者Namenode暂存所有存储Block文件块的Datanode节点的信息,并负责数据块的备份操作,周期性地从集群中的各个节点接收反馈心跳信号以及Block分块的反馈状态报告Blockreport,Namenode会根据这些反馈信息来检测HDFS系统中Block分块数据映射的状况信息.工作者Datanode是HDFS分布式文件系统的实际操作节点.这些节点由管理者Namenode统一调度,根据实际需要进行文件的存储操作或者数据块的检索操作.同时,Datanode节点还负责执行管理者Namenode发出的对数据块的增删查改等操作的指令,并周期性地向管理者Namenode提交Block数据块的反馈心跳信号以及Block分块的反馈状态报告.2.1.2HDFS的主要优势HDFS是通过多副本镜像复制策略来实现备份操作的,默认情况下副本系数为3,即HDFS的副本策略是将1/3的备份数据存储在本地机架的某个节点中,另1/3的备份数据存储在同一个机架的另一个Datanode节点中,最后1/3的备份数据是存储在不同机架上的某个Datanode节点中的.该策略确保了HDFS的数据移动与安全机制.Page3首先,HDFS是一种容错的分布式文件系统.HDFS所有数据经由源数据生成后会立即进行副本的备份操作,并将副本分别存储到集群的各个节点中执行数据的管理调度和数据的分析请求[14],允许节点数据出现灾难性崩溃的情况.其次,HDFS可以部署在大量廉价设备集群上以节约存储成本.HDFS采用的多副本镜像复制策略保证了数据存储的安全性和可靠性,通过增加数据的副本数量弥补硬件设备的不足,同时也减少了本地机架与异地机架之间数据传输的时间开销.最后,在实际的数据读写操作过程中,HDFS的多副本复制策略实现了多节点传输,降低了对网络传输总带宽的依赖,在不损害数据可靠性和读取操作效率的前提下,提高了对文件高效写入操作的支持.2.1.3HDFS存在的不足在HDFS这种多副本镜像复制策略中,各个机架上所存储的备份数据的实际分布状态并不是均匀的.因此,这种多副本镜像复制的策略也使得HDFS产生了诸多问题.首先,HDFS的整体存储成本过高[15].在默认情况下,HDFS实际存储数据所需的空间开销为原始存储数据容量的3倍.以此种方式对PB至ZB数据级的数据进行操作时,增加的数据冗余量会使得实际物理存储介质无法适应,且过大的数据规模也会直接增加存储设备的硬件成本预算以及建立文件索引的时间代价.其次,HDFS的可扩展性低[16].在HDFS的多副本镜像复制策略中,所有系统中的数据都要保持相同的副本数目,且系统无法根据外界实际需求的改变动态调度已有的副本,这就导致了系统的灵活性及可扩展性降低.最后,HDFS的节点负载均衡能力不足[17].由于所有的Block分块数据的位置信息都必须要存储在管理者Namenode的运行内存中,Block文件块数量的不断增加会导致管理者Namenode的运行内存压力不断变大,超出系统有限的负载均衡能力.2.2HDFS的优化随着对数据处理技术要求越来越高,HDFS的这些缺点会产生越来越多的问题.各领域的专家学者通过对HDFS文件系统存储框架的不断研究与拓展,各类存储备份策略的优化方案已经逐步展现出雏形.典型优化方案如基于GE码的HDFS存储优化策略、基于FEC码的HDFS云存储优化策略、以及企业级应用基于XOR码的HDFS优化存储策略等.文献[15,18]提出了一种基于GE码的HDFS存储优化策略.GE码是一种垂直码的编码方式,该策略能够通过引入较少的冗余校验块而对数据的传输和数据的存储提供可靠保证,其容错度可以控制在[0.30,0.35]的范围内,在确保数据的可靠性和存储效率的同时,很大程度上也降低了系统的存储开销,并提供了更为灵活的数据负载均衡技术.但是,基于GE码的HDFS优化策略也存在着不足之处,如编码分片的方式需要重构HDFS分块,译码操作时需要进行大量的动态计算,复杂度较高,这导致了译码的效率较低、后期维护升级难度较大等问题.文献[5]中讨论了一种基于FEC码的HDFS优化策略,该策略是针对云端存储文件系统占用空间大,负载均衡能力差等问题进行改进的.其设计思想是把需要上传的文件先进行编码分块的操作,然后整合编码后的输出数据,最后再把数据传输至云端的HDFS的分布式系统集群中.整个过程不进行数据副本的备份操作或者只进行少量的数据副本备份,降低了整个文件系统操作过程的空间开销和传输代价.此外,基于FEC码的HDFS优化策略中加入了数据传输的完成性检测工作,因此,该策略更适用于远程文件的传输.基于FEC码的优化策略优势是存储代价较小,与基于GE码优化策略相比,更有利于云端数据上传和下载等传输操作;但是,该策略也存在着计算较为复杂,灵活性较低,本地数据存储效率较低的缺点.文献[6-7]中提到的一种基于XOR码的优化策略,其编码和译码的方式相对简单,采用单一的异或运算生成奇偶校验码Parity,原始数据是按照Stripe进行分条目存储的,且每一个Stripe条目只会生成一个Parity,当某个Stripe条目中丢失或者损坏了一个Block数据块时,XOR码优化策略能够通过异或校验的译码运算过程进行数据的恢复操作.相比上述优化方案,基于XOR码的HDFS优化存储策略执行效率更高,但由于译码操作只能恢复单一Block数据块的数据,即XOR码的优化策略中只允许出现一个数据块失效的情况,所以,基于XOR码的HDFS优化策略对文件系统的纠错能力比较弱.Page43基于范德蒙码的优化策略由上文分析可知,随着数据生成量的逐渐增大,HDFS的应用将会越来越广泛,还有很多问题有待进一步探讨.本文对HDFS文件系统及现有的几种优化策略进行了深入研究,提出了一种空间开销更优,稳定性和可靠性更好的优化策略:基于范德蒙码的HDFS优化存储策略(VanHDFS).3.1范德蒙码范德蒙码也被称为范德蒙阵列纠删码[19],目前,关于纠删码的研究大致上可以分为两个方向:一种是低密度级联纠删码,如LT码(LubyTransformCodes)、LDPC码等;另一种是最大距离可分纠删码,如RS码(Reed-SolomonCodes)等.其中,低密度级联纠删码的研究虽然取得了很多进展,但还存在很多的问题,并不适合大规模应用到生产和生活中去;而最大距离可分纠删码的编译码方案具有优秀的存储空间代价和良好的容灾能力,能够平衡整体效率和编译码性能的问题,通过对原始数据块添加校验码的方法来减少数据存储过程中的副本备份操作,在保证数据可靠性的前提下很大程度上降低存储开销,提高存储效率.范德蒙码隶属于里德-所罗门码(Reed-SolomonCodes)的类别,是一种最大距离可分纠删码.在继承了最大距离可分纠删码优点的同时,范德蒙码的编译码方案还具有更低的迭代算法复杂度、更优秀的空间代价及容错能力.所以,范德蒙码也被公认为是一种可以充分利用信道带宽的优秀编译码解决方案之一.范德蒙码与其他编码策略既有相似之处,又有所不同.从数学的角度进行分析,目前被广泛使用的RAID5、RAID6等编码都可以看作是范德蒙码阵列算法的一个子集.当冗余校验码有且只有一个的时候,范德蒙码就退化成了RAID5算法,在伽罗华域上将源数据进行XOR逻辑运算以得到冗余校验码.同理,当同时产生两个冗余校验码数据的时候,范德蒙码就退化成了RAID6算法,在伽罗华域上通过XOR码等方法进行运算.因此,范德蒙码也可以看成是已有RAID5、RAID6编码基础上的一种延伸.现阶段,为提高数据传输的实时性和可靠性,大量利用范德蒙码同卷积码、数字喷泉码等编码级联使用的方案已经被广泛地应用到了数字视频信号、远程文件存储、数据传输等实际项目中.如在网络通信领域中,信息传输的过程常常会由于网络拥塞或受到其他原因影响而造成数据传输成功率低的问题.虽然很多利用检错码、纠错码的方式对失效数据进行重传的策略可以改善网络的可靠性,但反复传输相同数据也造成了额外的网络开销和巨大的传输时间代价.因此,为了平衡传输开销和数据可靠性之间的矛盾,范德蒙码及类范德蒙码的纠删码策略被广泛应用到网络传输、数据通信等领域,对传输数据进行纠删码编码提高数据可靠性的同时也不会影响传输效率.此外,如磁盘存储(RAID)、文件系统中也会采用类似的容错技术来增强数据的可靠性.3.2VanHDFS与HDFS存储策略范德蒙码以其优秀的编译码效率和存储空间代价,被广泛应用于电子通信、互联网数据安全、磁盘介质存储等领域的纠错技术中.考虑到HDFS存储策略的优势、不足以及范德蒙码的编译码操作特性,本文将范德蒙码编译码引入到HDFS存储策略中,提出采用“数据块+校验码”存储方式的VanHDFS替代HDFS的多副本备份存储策略.HDFS存储框架大多是建立在大量廉价硬件存储设备集群基础之上的,硬件环境的执行效率和整体的稳定性都较低,节点数据丢失或损坏的情况是不可避免的.VanHDFS改变了HDFS需要存储大量的冗余数据来确保数据可靠性的传统方式,在适当的容错度设置下,只需额外存储较少的校验码块.当HDFS中一个或者多个数据块中的数据失效时,通过VanHDFS策略的译码操作即可将数据直接进行恢复.因此,VanHDFS策略可以在确保HDFS存储数据可靠性的同时节约大量的存储成本.在VanHDFS策略中,设存入HDFS的原始数据包的数量为k,对这k包数据进行范德蒙码的编码操作,此时,根据容错度设置的不同,生成的q包数据中需要有相应的额外数量的冗余校验码块l(其中,q=k+l).在HDFS的读写操作中,当任意包的数据发生丢失或者失效的时候(失效数据包的数目要小于q-k),范德蒙码的译码策略就能够选取生成的q包数据中其他有效的k包数据来恢复构建原始的q包数据.图2为VanHDFS策略优化过程示意图.如图所示,数据包a到数据包e中的数据为原始数据,而数据包a到数据包G中的数据为编码后的输出数据,其中,数据包F和数据包G为校验码Page5包,生成编码后数据q的过程可表示为q=犘(a,b,c,d,e),其中,犘为编码操作的构造矩阵.范德蒙码的译码过程为q=犘-1(a,b,c,d,e),其中,犘-1为犘的求逆运算.VanHDFS策略可以在一定范围内最大程度降低HDFS的存储空间代价,节约存储成本,这是HDFS的多副本镜像复制策略无法比拟的.此外,与其他存储优化策略不同,范德蒙码的编码和译码操作均是基于范德蒙矩阵进行的,故采用范德蒙码对HDFS文件系统进行优化可以避免对HDFS的整体结构和内部的Block分块进行重构,与HDFS的存储模式保持最大程度的相似性.3.3VanHDFS的编译码策略VanHDFS策略中使用的范德蒙码本质上是基于数学上范德蒙矩阵转换而来的,故范德蒙码本身并不会完全适用于HDFS的存储,需要进一步有针对性的改进.在VanHDFS编码策略中,范德蒙码需要生成系统码矩阵以优化HDFS的读取操作;而在译码策略中,根据HDFS数据的存储特点,VanHDFS采取整行译码的方式,确保HDFS的可靠性.3.3.1编码策略单从数学角度分析,设本源根α的幂级数为w,本源多项式为P(狓)=1+狓+狓2+狓3+…+狓w,那么,这个给定的伽罗华域GF(2w)就可以由多项式P(狓)的解集α来生成:GF(2w)={0,1,α,α2,…,α254,…};构造n×k阶的范德蒙矩阵犅(其中,n>k),设犅n×k为编码生成矩阵,则由矩阵犅中任意k行组成的子矩阵犅都满足犅≠0的特性,故子矩阵犅可逆,矩阵犅同时满足纠删码的生成矩阵的特性.设输入数据为D(d1到dk),则范德蒙码编码后的输出数据为c1到cn,那么,输入数据和编码后输出数据之间的关系如式(1)所示.犅×犇=构造辅助矩阵狔,令矩阵狔=犅狓,且其中狓=(x0,x1,…,xk-1)T.可以发现生成矩阵犅属于原始范德蒙矩阵,符合纠删码生成矩阵的固有特点,可以直接用来进行数据的编码操作.但是,考虑到对HDFS文件系统的应用,如果使用该范德蒙生成矩阵对HDFS中的原始数据进行编码,那么,编码后的数据矩阵和原始数据矩阵将会完全不同,即数据部分不是系统码,得到的编码矩阵中将无原数据块.这对于通信领域中数据传输的加密有很大益处,但在实际的HDFS文件操作中,这样的编码矩阵会导致用户每次从HDFS节点读取数据都要进行范德蒙码译码操作,大大增加对于数据读写操作的计算代价和文件系统的时间开销,故并不适用于HDFS的大规模数据集操作.因此,必须对矩阵犅进行转化,使编码后的矩阵生成系统码矩阵,保证HDFS的存储数据中存在原始数据.使用高斯消元法对矩阵犅的前k行和前k列进行消元运算.转换后的矩阵犅上半部分为k阶的单位矩阵犐k,余下部分即为消元运算后的冗余校验码生成行.在矩阵变换的过程中,所有的运算均采用标准的模2消元方式,范德蒙码的生成矩阵犅使用k阶单位矩阵与(n-k)×k阶的范德蒙变形矩阵联合构成,如式(2)所示.犌=犅=设矩阵犇为原始数据包矩阵,使用编码矩阵犌和原始数据犇进行矩阵乘法运算,输出矩阵犈上半部分k×m包数据和原始数据犇完全相同,即犈k×m为系统码矩阵,且整个矩阵的转换过程不会破坏纠删码生成矩阵的特性,如式(3)所示.Page6犈=犌×犇=熿100…0010…0000…1y1y2y3…yk燀yn-k1y至此,采用范德蒙码生成矩阵犈对HDFS的原始数据进行编码,实际操作中读取的数据都为原始数据,省去了每次读取都需要进行范德蒙码译码操作的步骤,符合用户对HDFS的实际应用需求.3.3.2译码策略由上文可知,VanHDFS策略编码后的输出矩阵属于系统码矩阵,当系统中的源数据d1到dk或者校验码数据L1到Ln-k中发生数据失效问题时,就需要对HDFS进行范德蒙码的译码操作.从数学的角度进行分析,即只要将读取的有效数据和生成矩阵的逆矩阵相乘就可以恢复丢失的数据.根据HDFS以Block文件块方式存储数据的特点,在VanHDFS策略中,如果HDFS数据块单行的错误比特数大于1或者等于1,那么就对整行都添加错误标识,这样就可以确保当失效块所占的行数小于或等于HDFS系统编码容错度设置的范围时,VanHDFS策略经过一次译码操作即可对HDFS系统中全部的失效数据块进行恢复,且在此过程中无需考虑编码输出矩阵中的各个行列的数据块的具体失效情况.设编码后HDFS的输出矩阵中第3行与第k行数据块同时发生错误,且kn,则从冗余校验码矩阵部分中选取第1行与第2行参与恢复运算(设第1行与第2行冗余校验码正常),同原始数据矩阵一并构造辅助矩阵犇.辅助矩阵形可用如式(4)所示的矩阵表示.构造译码还原矩阵犃,通过对单位矩阵和冗余校验码矩阵组合后进行消元运算可得,矩阵犃可用如式(5)所示的矩阵表示.对译码还原矩阵犃求逆,设其逆矩阵为犃-1.将矩阵犃-1与矩阵犇作为译码恢复操作输入参数,则恢复数据的表达式可用如式(6)所示的矩阵运算表示.数据矩阵犇为译码恢复后的输出矩阵,即HDFS的原始数据矩阵,失效数据恢复完成.4VanHDFS动态副本分散存储策略由VanHDFS编译码过程可知,对于HDFS系统中的数据块失效情况,VanHDFS策略通过一次译码操作即可恢复全部的失效数据,且无需考虑HDFS存储中实际数据块的具体失效情况.由于需要进行矩阵运算,因此,VanHDFS更适合在系统环境相对较稳定、处理能力较好的硬件集群上部署,实现最优的存储开销.随着硬件设备的发展,硬件环境部署的成本必然会不断降低,设备的稳定性和处理能力也会随之提高,故VanHDFS策略在未来HDFS的发展过程中会有一个很好的前景.但在目前的实际情况中,对于执行效率不高、稳定性差的廉价硬件设备集群环境来说,VanHDFS策略在时间开销和计算内存方面的压力都是巨大的.同时,单纯的VanHDFS策略没有办法应对节点或整个机架完全崩溃的状况,会导致数据完全丢失的状况发生,不能很好的适用于实际的使用环境,因此,本文对VanHDFS策略进行进一步改进,提出VanHDFS动态副本分散存储策略(D-VanHDFS).图3所示的为D-VanHDFS策略架构图.如图所示,针对上文提出的实际因素考虑,在VanHDFS的基础上,D-VanHDFS策略进行了系统的、完整的改进设计,使优化策略更适用于实际的应用操作.Page74.1分散式动态副本策略针对单纯的VanHDFS没有办法应对节点或整个机架完全崩溃的状况,D-VanHDFS策略中引入了动态副本分散控制的思想.由于范德蒙码策略本身是基于矩阵进行的,编码和译码操作都需要多个辅助矩阵和构造矩阵共同参与进行恢复计算.因此,如果对全部的数据块进行一次性编译码操作,虽然可以保证当存在多个失效数据块时,通过一次矩阵译码计算就能将所有失效的数据块全部恢复,但编码和译码操作的计算代价以及对硬件设备的性能、可靠性要求都会大幅提高.鉴于目前HDFS都是架设在大量的廉价硬件设备环境中的,如果需要在性能和稳定性都较低的硬件平台上采用VanHDFS策略,大量的矩阵计算会增加译码操作的时间开销和系统的整体效率.因此,基于并行性和编译码时间代价的考虑,需要将原数据块进行Group分组操作,每个数据块中要添加一个分组标志位,用来标记该数据块是属于哪个Group分组.图4为D-VanHDFS分组策略的示意图.如图所示,由于分组大小的设置均为统一的矩阵形式,故在系统容错度设置一定的情况下,每个Group分组都具有完全相同的性质,系统的译码矩阵就只有一个,可以通用于文件系统的所有数据分组,降低了系统设计的复杂度,提高了系统的灵活性和可操作性.此外,在D-VanHDFS策略存储过程中,将每个Group分组的编码后矩阵按照纵列Column进行标记,即所有数据块被分为若干个Group分组,每个Group分组又由若干个Column数据列构成.Column数据列包含两部分内容:数据块部分和校验码部分.当编码输出数据中的数据块或者冗余校验码块失效时,D-VanHDFS的译码操作将不再进行矩阵与矩阵之间的运算,转换为矩阵行列之间的计算.HDFS的多副本镜像复制策略本质上是通过增加副本复制的数量来提高可靠性的.通常状况下,系统默认的三副本策略就可以满足数据存储及读写操作的需求.故对于D-VanHDFS策略,可将动态副本数目设置为N/2(其中N为原HDFS的镜像副本数量),在要保证优秀的存储空间开销外,兼顾整个HDFS的可靠性.与此同时,加入了范德蒙码编码后的Column数据列的副本对于机架和节点的崩溃状况有了很好的控制,但对于单纯的节点失效状况不能很好的应对,当存储某Column列数据的节点完全失效,该动态副本策略的可靠性上就会低于HDFS的多副本镜像复制策略.因此,还需要采用分散存储策略.在同一机架上,当容错度一定时,需要将每个Column数据列中包含的数据块部分以容错度为单位进行分散式存储,各个节点中只保留对应容错度的数据块信息.图5所示的为分散式动态副本策略示意图.如图所示,此时若出现节点失效的情况,在逻辑上只是丢失了D-VanHDFS译码容错范围内的部分数据块,可通过译码操作快速恢复,不会对文件产生影响.Page84.2计算过程的改进通过对VanHDFS译码操作过程的研究发现,还原矩阵和构造矩阵在计算的过程中,只有部分矩阵参与实际的运算过程,并且都是基于行或者列来计算的,因此在进行译码操作之前,就必须对还原矩阵和构造矩阵进行变形,这又增加了计算的时间代价.基于这一点考虑,D-VanHDFS策略利用Column分列操作进行计算,将数据部分和校验码部分当成统一的整体,这样便省去了建立构造矩阵的过程,对于提高运算效率有重要作用.建立辅助矩阵犌,则矩阵犌和原始数据矩阵犇之积为去掉失效数据块的Column数据列中有效数据构成的矩阵犛,即犌×犇=犛.将矩阵犌进行求逆运算,求出矩阵犌的逆矩阵为犌-1,如图6所示,在等式两边同时左乘以矩阵犌-1,矩阵运算后的输出结果犇即为原始数据Column数据列.矩阵犌-1和矩阵犌之积为k×k阶的单位矩阵犈,故等式左侧即为原始数据.这样,通过余下的数据矩阵犛与对应矩阵犌的系数组成的矩阵的逆做矩阵乘法操作就可以得到源数据列,也就得到了原始数据.译码过程描述如下所示:1.获取失效块所在Column数据列的信息Failure-Column[m],包括分组号Groupno,队列号Columnno以及失效数据块号Blockno;其中,失效Block分块的数量为m,且mparity_length;构造辅助矩阵AuxiliaryArray[k][n],其中辅助矩阵的行数为k=n+parity_length-m,且k对应的行为失效Block分块所在Column数据列的有效数据行;2.构造译码操作的辅助数据列Validcolumn[k],其中,k=n+parity_length-m.选取的数据块为失效Block分块所在的Column数据列的有效数据块.Validcolumn[k]为译码操作的输入参数;3.使用ErasuredCode编码生成器构造范德蒙码的译码矩阵.对矩阵AuxiliaryArray[k][n]进行逆运算操作InverseOperation(AuxiliaryArray),生成范德蒙码的译码矩阵DecodeArray[n][k];4.使用ErasuredCode编码生成器对输入的数组进行编码操作,输入参数为Encoder.encode(AuxiliaryArray,ValidColumn),输出结果为Column数据列的源数据OutputColumn[n+parity_length].4.3计算模式的改进在D-VanHDFS译码过程中,由于将分组矩阵进一步划分为多个Column数据列,使数据的计算范围进一步减小,因此,每个Column数据列中的数据块失效的情况也变为了可控状态,且该失效情况只和优化策略的容错度设置相关;而范德蒙码编码时设置的容错度通常都是一定的,故还原矩阵的总变形矩阵数也是一定的,总数为CmColumn数据列中数据部分和冗余校验码部分的总和,m为编码容错度.所以,可以将所有的变形还原矩阵都提前进行计算,并存统一存储到计算中间过程索引表中,当进行范德蒙码的译码操作时,可以直接查询索引表,将矩阵作为中间结果参与运算.在此过程中,由于各个相关的参数都是在编码过程的时候就提前计算好的,且中间参数均为通用形式,在需要进行译码操作的情况下,将原本的动态还原计算模式转化成为了查表计算的静态计算模式,一次矩阵运算即刻恢复原始数据.因此,在商用的大量廉价硬件集群环境下,D-VanHDFS策略可以极大程度的弥补廉价硬件设备执行效率不高、计算能力不足的缺陷,降低运算内存的压力,从而提高整个分布式文件系统的存储效率.译码过程如下所示:1.获取失效块所在Column数据列的信息Failure-Column[m],包括分组号Groupno,队列号Columnno以及失效数据块号Blockno;其中,失效Block分块的数量为m,且mparity_length;获取计算过程中间索引表的数据AuxiliaryArray[n+parity_length-m][n];Page92.构造译码操作的辅助数据列Validcolumn[k],其中,k=n+parity_length-m.选取的数据块为失效Block分块所在的Column数据列的有效数据块.Validcolumn[k]为译码操作的输入参数;3.使用ErasuredCode编码生成器对输入的数组进行编码操作,输入参数为Encoder.encode(AuxiliaryArray,ValidColumn),输出结果为Column数据列的源数据OutputColumn[n+parity_length].4.4计算方法的改进由上文叙述可知,在VanHDFS策略的编译码运算过程中,最主要的计算量是来自范德蒙矩阵和构造矩阵之间的加法与乘法运算.因此,为了降低矩阵运算的计算复杂度,减少内存压力,D-VanHDFS策略将二进制矩阵与伽罗华域上的元素建立一个映射关系,将矩阵运算中的加法运算转换成为伽罗华域上的逻辑“与”运算,将乘法运算转换为逻辑“异或”运算,进而大幅提高范德蒙码的编译码效率.图7二进制矩阵转换过程示意图通过矩阵转换,很大程度上简化了GF(2w)域中的乘法运算,将矩阵运算转换成伽罗华有限域上的“AND”和“XOR”逻辑与运算,降低了VanHDFS策略运算复杂度和内存的运算压力.4.5译码触发时机选取范德蒙码编码后的Group分组被分成了若干Column数据列,每个Column数据列同样都由原数从数学上有限域理论的角度分析,若w次本源多项式P(x)=a0+a1x+a2x2+…+awxw的系数全部取自于二进制域GF(2)中,那么伽罗华域中任意一个GF(2w)域上的元素都可以映射到GF(2)二进制域,对应的w×w阶二元矩阵犠可以用式(7)所示的矩阵表示.矩阵犠称为伽罗华域GF(2w)的本源二进制镜像矩阵.通过镜像矩阵犠可以将范德蒙码矩阵转换成二进制生成矩阵,即将k(k+m)的生成矩阵转换为(w·k)(w(k+m))二进制矩阵.转换过程示意图如图7所示.据部分和校验码部分构成.在实际的操作中,用户最关心的是原始数据部分,因为原数据部分是直接需要进行操作的部分,所以,当原数据部分中的Block数据块存在信息丢失或者数据失效时,必须立刻进行数据恢复操作.校验码部分的作用是当数据块的数据损坏或者丢失时,通过范德蒙码译码操作进行数据恢复,因此,校验码部分本身并不是我们真正需Page10要进行读写操作的数据,故当校验码部分的数据失效时,可以延迟进行恢复操作.D-VanHDFS策略不同于VanHDFS策略,当一个Block数据块文件损坏时,D-VanHDFS可以采取两种恢复方式,即副本复制恢复方式和范德蒙码译码恢复方式.因此需要恰当的选择两种恢复策略进行的时机来提升整个系统的效率.图8所示的为系统译码时机选取的整体过程流程图.4.5.1校验码部分译码时机的选取校验码部分实质上是恢复操作的冗余编码,与实际的数据操作无关,因此,需要优先考虑系统效率的问题.触发规则:在机架m(机架n)中,当节点x(节点z)上的Group分组中产生R个失效校验码块,先检测机架n(机架m)上对应的节点z(节点x),若对应校验码块有效,则直接进行副本恢复方式;若对应校验码块失效,则触发器只记录下失效的校验码块的信息,不进行任何恢复操作.当数据块部分进行译码操作时,通过查询之前记录的校验码块失效的信息,以该失效记录为标志,对存在校验码块失效的Column数据列进行范德蒙码译码恢复操作,同样,对于对应的Column数据列,只进行数据块部分的副本恢复策略,校验码块不进行其他操作.4.5.2数据块部分译码时机的选取数据块部分的数据是实际使用的真实数据,因此,必须优先考虑数据的正确性.触发规则:在机架m(机架n)中,当节点x(节点z)上的Group分组中产生R个失效数据块,先检测机架n(机架m)上对应的节点z(节点x)上的数据块信息,若对应数据块有效,则直接进行副本恢复方式,并同时恢复失效的冗余校验码块;若对应数据块失效,则触发器记录下该数据块信息,并查询冗余校验码块失效记录,选取其中一个存在冗余校验码失效记录的Column数据列进行范德蒙码译码恢复方式,之后再对对应的Column数据列的失效数据块部分进行副本复制恢复策略.综上所述,D-VanHDFS策略这种数据块/校验码块分别进行触发恢复操作的方式,增加了HDFS的灵活性,并且在极大程度上减少了译码操作触发的频率,降低了文件系统存储时间开销,提高了系统整体的存储效率.5范德蒙码优化策略评测与分析实验平台依托搭载了Hadoop的主机构成的小型集群环境,Hadoop的版本为0.20.203,操作系统为Ubuntu-11.10,JDK版本为6u30-linux-i586.5.1存储开销表1所示的为各备份策略存储开销情况的数据对比,HDFS采用默认的3副本复制策略,Block分块的大小为默认的64M.数据列容错度D-VanHDFSFECGEXORHDFS6464128128256256由表1所示的存储空间开销比率可知,D-VanHDFS策略同其他优化策略的存储开销情况相近,与原HDFS系统的3副本策略相比可以节约30%~32%的存储空间开销.但随着数据量的持续增大,D-VanHDFS策略相比其他策略存储开销的节约程度会逐渐增高,优势也越来越明显,这符合HDFS海量数据存储的特征.5.2可靠性表2所示的为各备份策略的数据可靠性对比.其中,D-VanHDFS策略的动态副本数设置为2,容错度设置为3,HDFS采用默认的3副本复制策略,表格中“√”代表可正常工作,“×”代表有概率出现失效情况.Page11失效类型失效数目D-VanHDFSFECGEXORHDFS机架机架节点节点节点节点数据块数据块数据块数据块数据块数据块数据块由表2所示的对比数据可知,D-VanHDFS策略采用的是译码恢复和副本恢复的双重恢复策略,大幅降低了数据失效问题,与原HDFS策略相比数据可靠性提高了约200%,在各种情况下的可靠性也均优于其他副本备份策略.同时,D-VanHDFS策略还可以在保证存储开销变动极小的情况下,通过控制冗余校验行的数目来动态提升可靠性,很大程度上增加了文件系统的灵活性.5.3负载均衡能力D-VanHDFS策略可以显著改善HDFS的负载均衡能力.图9所示的为各备份策略的节点资源负载均衡能力对比图.其中,横坐标表示的为在系统集群中选取的10个Datanode节点组成的小型集群环境,纵坐标表示的为随机读取500次数据的节点资源负载标准差的绝对值.D-VanHDFS中采用了分散式动态副本的策略,所有的文件都分散的存储在各个节点上,负载被平均分配到整个集群中,故各个节点的资源利用率浮动范围很小,负载均衡.如图9所示,D-VanHDFS策略拥有最佳的负载均衡能力,而其他备份策略的系统资源负载波动比较大,即会产生某些节点负载过重,而另一些节点却几乎没有负载的问题,这直接影响了系统运行的稳定性.5.4译码恢复效率D-VanHDFS策略的译码操作中,计算模式变为了静态计算,其时间复杂度远低于矩阵的运算.图10所示的为实验环境下各备份策略进行数据恢复的时间对比.其中,D-VanHDFS策略的动态副本数设置为2,容错度设置为3,HDFS采用默认的3副本复制策略.由图10所示的系统译码效率对比图可知,与原HDFS存储策略相比,D-VanHDFS的译码恢复效率平均提升约40%左右.随着数据规模的不断增大,各备份策略在数据的恢复时间上都是以线性递增的.其中,XOR码优化策略的数据恢复效率最高,但在数据量达到一定程度时,数据概率性丢失的问题就会愈发明显;除此之外,D-VanHDFS在数据的恢复效率上均略高于其他优化策略,在降低存储开销的同时也保证了系统的存储效率.综上所述,本文提出的D-VanHDFS策略在存储开销程度,数据的可靠性,系统资源负载均衡能力及数据的恢复效率等方面的综合表现均优于其他备份策略.6结论伴随着大数据概念逐渐成为研究的热点,各个领域的相关技术都会产生很大的变革.HDFS作为新型文件存储系统,以其高容错性和低成本的特点广泛受到人们的关注并迅速发展.基于范德蒙码的HDFS优化存储策略改进了HDFS自身存在的缺陷,通过范德蒙码编译码操作很大程度上降低了存储的空间开销,节约了HDFS整体的存储成本,配合分组分列策略和有限域理论,改进计算方案,提高存储操作的灵活性,降低矩阵计算的时间开销和计算内存的压力,同时,引入动态副本分散控制的思想,使数据的可靠性以及负载均衡能力有了显著提升,为未来HDFS的发展提供了一条有效途径.Page12
