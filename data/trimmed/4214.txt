Page1一种面向用户需求的Web服务测试方法许蕾1),2)李言辉1),2)陈林1),2)宫敏2)颜友军2)徐宝文1),2)1)(南京大学计算机软件新技术国家重点实验室南京210023)2)(南京大学计算机科学与技术系南京210023)摘要Web服务对外只提供接口文档,可利用生成测试用例的信息不够充分,现有方法所生成的用例冗余度高、查错能力有限.文中基于现有Web服务功能和用户协同推荐构建用户需求模型,再使用领域知识和使用场景生成测试用例,并通过实验演示过程,实验结果表明该文方法生成组合Web服务测试用例的有效性.以用户需求驱动组合Web服务测试,既能保证所选服务真正符合用户需求,又可根据用户使用场景来丰富测试需求信息,结合领域知识启发式生成测试用例.关键词组合Web服务;用户需求;测试用例生成;使用场景;软件测试1引言作为面向服务架构SOA(Service-OrientedArchitecture)的一种实现技术,Web服务通过标准的Web协议提供服务,以保证不同平台上应用服务的互操作性,从而使得不同开发语言、部署平台、通信协议等系统之间能有效交互,并保证数据更新同步及信息的一致性.为实现这种互操作,Web服务提供了一套标准的类型系统,用于沟通不同的平台、编程语言和组件模型.为实现真正可信、可用的Web服务,目前的研究主要集中在Web服务发现、服务组合、服务测试等方面.尤其在服务测试方面(现有研究大都从非开发者视角展开,因为从开发者视角测试Web服务和一般单元测试差别不大),由于Web服务自身提供信息较少、运行环境复杂多变以及服务组合的多样性,给Web服务测试带来很多困难:只能依靠接口文档生成测试用例,导致用例冗余度高、查错能力有限;难以全面估计用户使用场景,容易漏测功能点;服务组合涉及到多个服务和用户的交互,一旦出错,会造成严重影响,且很难定位错误.鉴于用户是Web服务的使用者、评价者和最终决定者,本文拟通过用户需求驱动组合Web服务测试,既可以从源头上保证所选服务真正符合用户的需求(所选服务作为测试对象),又可以根据用户的使用场景来丰富测试需求信息,并结合领域知识启发式生成测试用例,使得“每一个用户都是潜在的测试者”,进而保证所选服务及其组合流程具备较高质量.本文第2节是相关工作介绍;第3节分两步获取用户需求,先在现有Web服务功能关联、聚类基础上形成基于领域知识的服务组合基础模型,即服务关联图,再基于用户协同推荐建立用户需求模型,表现为服务组合流程;第4节在第3节所得模型的驱动下生成测试用例,即从用户需求模型出发,使用推理、转化等手段形成用户使用场景,进而得到测试路径,并最终生成测试用例;第5节通过实验演示过程并说明本文方法生成Web服务测试用例的有效性.2相关工作软件测试是保障软件质量的重要方法.由于Web服务涉及因素众多,与其测试相关的方法和技术也很多,可以从功能、性能、安全性等多个方面进行考虑[1],并且研究视角也有Web服务开发者、提供者、集成者、第三方确认者和用户之分[2].可以分3个维度来表述Web服务的测试视角、测试内容和测试过程,其中Web服务的测试视角分Web服务开发者、提供者、集成者、第三方确认者和用户,角度不同,出发点不同,另外各自所掌握的信息、资源也不同;测试内容包括功能、性能、安全、易用性、可靠性等,涉及到Web服务的所有相关方面;测试过程从最初的用例生成到用例的约简、优化,再到测试执行以及测试结果度量评估、后期的维护等,与传统软件的测试过程无异.在单个Web服务测试的研究方面,由于用户通常只能获得Web服务的接口信息(如WSDL文档)[3-4],从而只能进行黑盒测试[5],即通过服务的WSDL描述文档来获得相关的测试信息,而WSDL文档中只有一些服务名称、参数类型等信息,由此生成的测试用例通常冗余度高、查错能力弱;虽然目前有一些研究对WSDL文档进行了扩展,增加了一些运行时信息、语义信息或者约束条件[6],例如考虑输入输出前置后置条件IOPE或者引入本体概念,但由于无法获取到程序代码,难以保证覆盖率.对组合Web服务测试的研究主要是基于BPEL和OWL-S文档的流程结构[7-10]进行测试或采用模型检查的方法进行验证[11-12].但由于运行环境的未知性,在Web服务实际运行过程中,由于网络连接的故障或者服务提供者自身的原因,会导致某些服务暂时不可使用,需要临时更换功能类似但实现方式不同的新服务,若事先没有测试过这些新服务,则通常会有一些隐患或组合时可能会有冲突;另外,Web服务的分布式和并发执行特性导致有些场景难以重现和回放,很难定位、修复故障.因此,由于受客观条件的制约,Web服务测试研究需要继续丰富测试所需的信息、测试组合Web服务、检测Web服务并发特性等,以提高测试的自动化程度、保障Web服务质量、提高用户的满意度.以用户需求为驱动进行Web服务组合,能够发现并选择满足用户功能性和非功能性需求的服务[13-15].但现有服务数量太多,可以通过聚类[16]或者语义标注[17]形成功能相似的服务类,然后再考虑服务类之间的可能组合,从而降低复杂度并提高效率.这些组合服务流程体现了用户的需求,同时也反应了服务组合的业务逻辑,需要确保其可行、有效.可以设计对应的测试用例来检测有无缺陷、冲突.当服务提供者变动了服务、服务暂不可使用以及服务Page3中某些属性发生了变化时,可能有需求变动产生,也需要考虑需求变动带来的影响,可以通过回归测试解决.Web服务通常只提供接口信息,可供测试的资源有限,因而需要增加用户需求等信息.例如,分组测试(GroupTesting)[18]挑选查错能力强的测试用例,对测试用例进行人为分组,组之间的等级不同;审计测试(AuditTesting)[19]类似于回归测试,考虑测试用例的选择和优化,即当服务组合中的某个服务发生了变动,需要测试其影响,此时应保证最重要的测试用例先执行;我们在用户需求驱动的Web服务发现和测试方面进行了一些研究,取得了一些初步研究成果[20-21].在此基础上,本文重点研究如何充分利用用户需求、结合领域知识和用户使用场景启发式设计生成Web服务测试用例.3获取用户需求Web服务由用户使用和评价,能否被采纳,最终决定权在于用户.因此,充分研究用户需求并以此为驱动进行服务的组合与测试,能够发挥用户群体智能、丰富测试相关信息并全面提升测试效果,进而保障Web服务质量.直观上来看,用户需求处于不断演变中,没有确切统一的标准,具有动态变化性,难以准确刻画.就用户本身而言,由于缺乏专业知识,通常提不出具体、准确的服务需求.为此,需要结合现有Web服务的特点和大众使用评价,建立反映用户使用特征且便于维护扩展的用户需求模型,以方便开展后续测试工作.我们依据服务领域知识并融合用户协同推荐的方法来获取用户需求:首先建立领域知识的服务组合基础模型,即领域内服务关联图G,详见3.1节;进而基于用户协同推荐形成最终用户需求模型,表现为服务组合流程图,是基础模型G的子图,详见3.2节.3.1基于领域知识的服务组合基础模型文档的形式化表示见定义1.现有Web服务通常用WSDL文档描述,WSDL定义1.WSDL文档的形式化表示WSwsdl=〈WSname,OPSet〉;OPSet={〈OPname,InputSet,OutputSet〉};InputSet={〈Inputname,type〉};OutputSet={〈Outputname,type〉};其中:WSname是服务的名称,用于表示服务对象;OPSet是服务WSname的一组操作集合,一个服务可以包括多个服务操作;OPname是一个服务操作的名称,用于表示服务的方法对象,一个操作一般包括一个或多个输入、输出参数;InputSet是服务操作OPname的输入参数集合,包括服务操作输入参数的名称Inputname和类型type;OutputSet是服务操作OPname的输出参数集合,包括服务操作输出参数的名称Outputname和类型type;type是服务参数所对应的类型概念,分为简单类型和复合类型.WSwsdl主要描述Web服务的输入输出及一系列类型和条件约束.在多个服务组合时,需要着重考虑Web服务之间的输入输出覆盖关系,因此给出一个简化的Web服务三元组模型,见定义2.定义2.为简化起见,只考虑服务的输入、输出和约束,定义Web服务三元组为其中In和Out是描述服务WS输入、输出的功能术语集,分别对应定义1中的InputSet和OutputSet.Constraint是为了实现对应的服务功能而须达到的约束,分为输入上的约束Constraint(WSIn)和输出上的约束Constraint(WSOut).假设当前领域存在n个服务WS1,WS2,…,WSn,WSi=(Ini,Outi,Constrainti),1in,在此基础上,汇总领域中所有服务的输入、输出功能术语,形成领域内服务术语集DT(DomainTerm):规定用户需求的输入输出描述从DT中选取,以保证用户需求的规范性.定义3.对任意两个服务WSi和WSj,若WSjIn∩WSiOut≠,则存在WSi指向WSj的关联关系.其中,若WSjIn==WSiOut,则表明两个服务是完全关联;否则,表明两个服务是部分关联.定义4.领域内服务关联图G为一个二元组(Node,Edge),其中:Node={WS1,WS2,…,WSn}为节点集,对应于领域内的所有服务,WSi=(Ini,Outi,Constrainti),1in;Edge为边集,对应于服务间的关联,具体的关联关系有顺序(Sequence)、分支(Split,Split-Join,Choice,If-Then-Else)、循环(Repeat-While,Repeat-Until)等.边集Edge中顺序关系节点间的Constraint沿着边从上一服务节点的Out原样传递到当前节点的In;分支关系节点间的Constraint沿着分支边从上一服务节点的Out增量传递到当前节点的In,增加Page4了分支边成立的约束条件;循环关系节点间Constraint条件拆分为顺序和分支关系处理.定义4中的图G包括某个领域内依据关联关系形成的服务以及服务组合间的功能蕴含关系,是基于领域知识的服务组合基础模型.可按照一定的策略在图G上选择符合用户需求的子图,详见3.2节.3.2基于用户协同推荐的用户需求模型用户需要在众多候选服务及其组合流程中做出决策.对多数用户决策最有效的帮助,通常来自用户关系亲密的亲友或同事以及有过使用体会的其他用户.定义8.用户需求R为二元组(In,Out),In和Out是一组从领域术语集DT中选取的输入输出随着社交网络的出现,基于协同过滤的推荐方法受到了普遍关注.协同过滤是指通过计算目标用户与各个基本用户的相似性,搜索目标用户的K近邻,最终根据近邻用户的偏好估计目标用户的偏好[22].借鉴协同推荐的思想,对偏好相似的用户聚类,形成若干用户群,群中用户偏好相似,可互相推荐感兴趣的事物;若用户群中的某个用户评价了某个Web服务,则该评价适用于群中所有用户.具体定义如下.定义5.设X个用户有Y个兴趣,据此生成一个用户偏好矩阵犘.若P中元素Pjk为1,表示用户Uj有兴趣Ik;若Pjk为0,表示用户Uj无兴趣Ik.其中,1jX,1kY,j,k为整数.定义6.若任意两个用户Ua、Ub的相似度大于等于某个阈值,则用户Ua和Ub为偏好相似用户,记Ua、Ub的相似度为其中t为整数,若Pit,Pjt同为0或1,则Sim(Pit,Pjt)=1;否则Sim(Pit,Pjt)=0.定义7.设用户对服务的评价矩阵为犆,若犆中元素Cji(用户j对服务i的评价)未被定义,则由j所属用户群g(j)对服务评价的均值来定义,即Cji=Σm∈g(j)Cmi×Sim(Uj,Um)/Σm∈g(j)Sim(Uj,Um).因此,在用户需求不太明确的情况下,可以参考偏好相似用户的推荐意见,即在领域内服务关联图G基础上,考虑用户的偏好以及偏好相似用户的推荐,增加一些限制条件(主要是非功能需求,如反映可达性和响应时间的QoS指标、品牌偏好等,或者是服务组合的偏好策略,如要求组合服务间的路径最短或要求组合时前后服务完全关联等),明确服务组合流程以及所选具体服务.Sim(Ua,Ub)=Σt∈[1,Y]Sim(Pit,Pjt)/Y,集;用户需求模型ReqModel为领域内服务关联图G=(Node,Edge)的子图,并增加入口、出口两个虚拟的节点,表示为四元组(Node,Edge,entry,exit),NodeNode,EdgeEdge,对Node中的任意WSi,满足WSiIn(∪(WS,WSi)∈EdgeWSOut)∪RIn,且ROut∪WS∈NodeWS另外,需要增加分别与entry和exit相连的边到集合Edge中,即若WSiIn-∪(WS,WSi)∈EdgeWSOut≠,则Edge=Edge∪{(entry,WSi)};若WSiOut∩ROut≠,则Edge=Edge∪{(WSi,exit)}.用户需求模型ReqModel生成算法的核心思想是在定义4形成的领域内服务关联图G基础上,根据候选服务的输出是否满足用户需求以及服务评价矩阵C确定排序策略,从中找到能满足约束条件的组合服务模型.具体构建过程见算法1.算法1.用户需求模型ReqModel生成算法.输入:领域内服务关联图G(Node,Edge),服务评价矩输出:用户需求模型ReqModel(Node,Edge,entry,{SWS=;//置空已选集SWSNWS=Node;//未选集NWS为G中NodeOut=ROut;//将用户需求的输出Out记为OutNode=GenerateReqModel(Out,SWS,NWS);Edge=Edge∩{Node×Node};WSi∈Node,IFWSiIn-∪(WS,WSi)∈EdgeWSOut≠THENEdge=Edge∪{(entry,WSi)};WSi∈Node,IFWSi.Out∩R.Out≠THENEdge=Edge∪{(WSi,exit)};}GenerateReqModel(Out,SWS,NWS)//需求模型生成函数{//判断条件IFWSi∈SWS满足WSiIn(∪(WS∈SWS)WSOut)THENRETURNSWS;//排序算法SortArrayWS[]=Sort(Out,NWS);//将未选集NWS中服务FOR(i=0;i<|NWS|;i++){Page5GenerateReqModel(Out,SWS,NWS);}}Sort(Out,NWS)//优先级排序函数{根据|WSOut∩Out|/|Out|值,将所有服务降序排列;若两服务上述取值一致,根据Cji大小对服务降序排列;将排序后的NWS中服务依次写入服务数组ArraySort;RETURNArraySort;}算法1中并未考虑用户需求In和Out上的约束集Constraint,这是因为Constraint是领域相关的,复杂的Constraint间的蕴含关系的检查和推导往往复杂度很高,甚至可能在理论上是不可判定问题,无法自动化实现.第4节将通过测试的方法来检验生成的组合服务模型可达性,并依据用户使用场景以及对应的Constraint条件生成测试用例.4生成测试用例第3节中得到的用户需求模型ReqModel是满足用户需求的服务间组合流程,蕴含了Web服务的领域知识以及Web服务的使用评价等信息,可据此设计、生成查错效率更高的测试用例,克服现有方法只能生成符合接口参数类型测试用例的不足.流程的控制通常由事件来触发的,事件触发时的情景形成了场景.因此,首先从用户使用Web服务的视角出发,将用户需求模型转化为用户使用场景;进而采用启发式方法进行测试用例的生成和选择,即根据用户使用场景进一步明确约束条件,以此生成更有针对性、查错效率更高的测试用例.4.1从用户需求模型到用户使用场景如前所述,用户需求模型中组合模型的流程控制转向由服务的执行状况(成功或失败)决定.在每个节点上增加两个后续节点(执行成功与失败节点)并增加执行成功节点到原流程图后继节点的边以及失败节点跳转到exit节点的边,形成扩展图;在扩展图的基础上,递归遍历所有从entry节点到exit节点的可能路径,输出即为用户使用场景集P(若流程图中相关服务均成功执行,则形成用户使用基本场景;否则对应若干备选场景),涵盖用户常用及较特殊或不常用的功能.定义9.对于SW∈Node(Node为扩展图中节点集),假设Constraint(SW)=〈Constraint(SWIn),SW,Constraint(SWOut)〉是SW的约束三元组(entry,exit以及SW的success及fail节点的In和Out约束为空),通过递归定义由约束三元组构成的路径:对于SW∈Node,Constraint(SW)为路径;若Constraint(SWi),Constraint(SWj),…,Constraint(SWk)为路径,且(SWk,SWl)∈Edge,则Constraint(SWi),Constraint(SWj),…,Constraint(SWk),Constraint(SWl)也为路径.在此基础上,可进一步得到场景集P的构造函数Construct(SW,Path).即:将当前节点SW从entry传递到exit,在其过程中,不断地将当前路径扩展,直至最后获得从entry到exit的所有可能路径,每条路径对应一个测试场景.从用户需求模型到用户使用场景的转化见算法2.由于用户需求模型中可能存在循环,为避免场景集P为无限集,设置处理循环的计数Count,限定循环仅能出现一次.算法2.将用户需求模型转化为用户使用场景.输入:服务需求模型ReqModel(Node,Edge,entry,输出:用户使用场景UseScene(Node,Edge,entry,{Node=Node;Edge=;//初始化//扩展用户需求模型SW∈Node,Node=Node∪{SWsuccess,(entry,SWj)∈Edge,Edge=Edge∪{(entry,(SWi,SWj)∈Edge,Edge=Edge∪{(SWisuccess,SWfail∈Node,Edge=Edge∪{(SWifail,//遍历扩展图,得到用户使用场景P=;//P为场景(从entry的exit路径)集Cur∈Node,Count(Cur)=0;Construct(entry,Constraint(entry));}Construct(SW,path)//场景生成函数{IF(SW==exit)P=P∪{path};//构造场景集PELSEFOReachnodeCur满足(SW,Cur)∈Edge且{Page6path=path,Constraint(Cur);Count(Cur)=Count(Cur)+1;Construct(Cur,path);}}通过将用户需求模型转化为用户使用场景信息,提取、保留了路径可达的约束条件,这些融合了领域知识和用户需求的约束条件是启发式设计、生成测试用例的基础.4.2为每个用户使用场景生成相应的测试用例根据基本场景和备选场景,分别确定场景中的路径以及输入、输出变量,并根据变量之间的约束关系,综合等价类划分、边界值分析、约束求解等方式生成测试数据.具体步骤如下.由场景目标事先确定.执行路径;足的约束条件等内容;价类的边界值作为测试数据;到一些可行的解空间,以此构成等价类;(1)选定场景,明确各场景对应的功能、目标、(2)依据路径,确定涉及的变量及其类型、须满(3)将所有的约束条件汇总,进行约束求解,得(4)在等价类中选取代表数据,并另外选取等(5)测试数据作为测试用例的输入,预期输出这种依据用户使用场景生成测试用例的方法,关注用户实际需求和使用习惯,能保证用户常规使用功能的正确性与稳定性;另外,结合用户需求和Web服务特征而形成的领域知识也能有效避免Web服务其它相关内容(如QoS属性、与其它服务组合时的条件等)的遗漏,并进一步缩小测试数据解空间、提高用例生成效率.5实验分析加拿大居弗大学的EyhabAl-Masri等人通过使用WebServiceCrawlerEngine(WSCE),从UDDI、搜索引擎和服务门户网站中收集Webservice,并度量了这些服务的十几种QoS属性,形成了一个数据集QWS,并不断扩充数据[23].实验主要在第一个版本的数据集上进行,该数据集收集了365个Webservice及其相关信息.首先,根据数据集中的信息,获取各WSDL文档.由于网络问题或者时间原因,某些服务不再对外提供,我们共获取到198个真实的WSDL文档,作为实验数据.这些文档对应众多Web服务,需要进行聚类以缩小规模.但由于各文档的书写习惯、命名风格等差异很大,再加上所取样本未必分布均匀,导致功能聚类难度很大.为此,给出服务相似度的形式化定义.定义10.存在两个服务WS1、WS2,若其相似度sim(WS1,WS2)阈值,则WS1、WS2为一类服务.其相似度计算公式如下:sim(WS1,WS2)=Σx∈[1,M]Σy∈[1,N]Wkx×Wky×WordNet_sim(kx,ky)/Σx∈[1,M]Σy∈[1,N]Wkx×Wky(x,y为整数)即提取服务中的服务名称WSname和操作名称OPname,经过分词、去掉无意义或高频词后得到若干关键词,其中,服务WS1中有M个关键词kx,服务
