Page1犎-Tree:一种面向大数据流在线监测的层次索引臧文羽1),2)李军1),3)方滨兴1),2),3)谭建龙2)1)(中国科学院计算技术研究所信息安全研究中心北京100190)2)(中国科学院信息工程研究所信息内容安全技术国家工程实验室北京100093)3)(北京邮电大学计算机学院北京100876)摘要随着计算机网络的迅猛发展和大数据时代的到来,数据越来越频繁地呈现出多属性异构的特点.这种包含多种不同类型属性的大数据流称为异构大数据流(HeterogeneousBigDataStreams).在面向大规模数据在线监测分析的应用中,通常需要在异构大数据流上注册大规模监测规则.因此,对于每一个数据流元组,必须用最小的计算开销满足所有的规则.同时,由于大数据流上监测规则集异常庞大,提高规则监测的性能是大规模数据流在线监测的关键.基于此,该文提出一种层次化的索引结构H-Tree及其在线规则匹配算法.具体的,H-Tree将大数据流上的属性集划分为离散型属性和连续型属性.基于不同的属性集,构建两层索引结构:在第1层,通过改进的红黑树对离散型谓词构建触发索引;在第2层,通过量化连续型谓词构建多维索引结构.H-Tree的在线规则匹配算法利用关联关系表对两层索引的监测结果进行融合过滤.实验分析表明,与经典的R+方法相比较,H-Tree通过层次化的索引结构,在不降低准确度的前提下,显著提升了大数据流的监测效率.关键词异构大数据流;监测规则;索引1引言伴随着大数据时代的到来,企业信息化水平不断提升,企业信息运营系统数据流的种类和规模也持续增长.利用大数据技术实现大型集团企业的运营状态在线监测具有广泛的应用前景.对于大数据环境下,包含不同媒体格式的数据流,通过传统的数据流监测[1-2]方法(对监测规则进行线性计算)已经不能满足在线监测的要求.面对运营大数据在线监测需求,通过对监测规则构建索引,可以提升规则计算的判别速度,大大提高异构大数据流在线监测的效率.将这种包含不同类型属性且具有高维度的大数据流称为异构数据流.异构数据流包含文本、图片、音视频等不同属性的元信息,属性间存在较大的差异.近来,随着基于内容的大规模多媒体大数据流监测需求的不断增加,大数据流实时监测已经成为研究热点.然而在实际的监测过程中,由于监测规则集规模大、关联维度高,使得大规模数据流上的监测计算量大,效率低下.因此,如何高效地匹配数据流元组与大规模监测规则成为提高异构大数据流监测效率的关键.对监测规则构建索引是解决问题的有效途径,相关研究成果包括:针对单一属性的数据流,CEI-Index[3]使用区域划分的思路,以空间换时间提高谓词匹配效率;针对离散型属性简单且数量较少的发布订阅系统中的数据流,一般通过哈希表以及Cache技术[4]提升离散型属性集上的匹配效率;针对单纯的连续型属性,R-Tree[5]将多个连续型属性映射到高维向量空间并进行合理的划分,为每个划分建立覆盖区域.R-Tree[6]通过优化R树的空间划分策略来减少节点的访问次数,从而提高了监测效率.上述研究大多是针对单一类型的数据流进行优化索引,而且规则集的数量也相对较少,因而很难直接应用到异构大数据流监测中.具体来说,面对异构大数据流的在线监测应用,传统[5-7]的索引技术都是假定数据流的所有维度都具有相同或者相似的性质;传统的索引方法没有充分利用异构数据流中不同属性之间的关系,需要做很多属性维度的转换,直接影响了监测性能.然而,异构数据流包含的属性之间尽管存在较大的差别,但不同属性之间也存在共享度较高的关联性.如果能够合理的将不同属性的谓词集结合起来,可以有效提升监测的性能.由此,结合面临的挑战以及异构大数据流的自身特点,本文从异构大数据流监测的应用背景出发,针对传统高维索引对异构大数据流处理的性能瓶颈问题,提出了一种层次化的索引结构H-Tree.本文的主要贡献包括:(1)在高维索引的基础上,引入了层次化索引的思想.考虑异构大数据流本身的特点,将数据流包含的属性划分为离散型属性和连续型属性.考虑到离散型属性上的谓词共享度高的特点,提出了一种两层的索引结构H-Tree,给出了索引构建和监测匹配算法.(2)对提出的H-Tree索引构建和监测匹配算法进行详细的算法复杂度分析.(3)在大量公开数据集上,对H-Tree进行了大量的测试实验,结果表明:H-Tree结构的匹配算法在不降低监测准确率的情况下,较R-Tree的性能有了大幅度的提升.本文第2节形式化定义异构大数据流监测问题并提出简单的解决算法;第3节详细介绍H-Tree的索引框架和核心算法;第4节给出H-Tree的评估模型;第5节是实验结果的对比与分析;第6节是对论文工作的一个总结.2问题描述对异构数据流进行内容监测时,首先在数据流上注册大量的监测规则.然后将数据流中的每一个实时到达的元组与注册的监测规则逐一匹配.这里,监测规则和数据流元组的定义如下:定义1.监测规则.令Q表示注册的监测规则集合.S代表一个异构数据流.每个监测规则q∈Q是多个谓词的“与”.每个谓词关联着相应的属性,这些属性主要分为两类:连续型属性和离散型属性,相Page3应地,监测规则q包含的谓词分为:连续型谓词(vi<p<vj)和离散型谓词(p==vk).若任意谓词的结果是布尔型变量.则q可表示为定义2.数据流元组.令t表示当前的数据流项,元组t是由不同属性上的键值对组成的集合.t=(ki,vi),其中ki对应着第i个属性.若连续型属性i对应的值域为[si,ti],离散型属性j对应的值域为S=∪vj,则元组t对应监测规则q的计算可表示为q(t)=∪i(si,tt)=∏i因此,在判断监测规则的过程中,如果谓词pi对于当前数据流项t的结果为真,就认为数据流项t满足属性谓词pi;如果数据流项t满足一条监测规则q中的所有谓词,就说数据流项t满足监测规则q.对于异构数据流项t,监测计算具有如下2个性质:(1)如果t满足监测规则q,那么监测规则q中所有的谓词都会出现在已经计算为“真”的序列中.也就是说,q中所有的属性谓词都必须经过计算且返回值为真.(2)如果t不满足监测规则q,那么q中至少存在一个属性谓词在已经完成的计算序列中,且计算结果为假.由以上2个性质可以看出,对数据流元组监测的过程就是元组在属性域包含的谓词集上的检索过程.因此,如何提升检索效率是监测算法的关键.如表1所示,数据流S上注册的监测规则集Q包括5个监测规则,每个监测规则的含义如表所示.其中每个监测规则q∈Q都是不同谓词的“与”运算.将连续型属性Atime,Alen映射为两维空间,那么q1,q2,q3,q4,q5的关系如图1所示.不同的监测规则之间的共享,对应着图1中两维空间上的矩形块之间的交叠.监测规则IDq1q2q3q4q5图1表1中5个监测规则在对应的连续型高维空间中的关系2.1经典的解决方法针对异构数据流下的内容监测问题,本文首先来介绍两个简单的解决办法.(1)监测规则顺序检查算法(QuerySequenceInspect):这种算法[8-10]广泛应用于面向数据流的挖掘中,其核心思想是针对监测规则不建立索引,根据训练好的分类器,对于每一个数据流元组t,依次取得其相应属性的键值对(k,v),然后将(k,v)键值对依次与分类器中的规则进行比较,将所有谓词结果都为“真”的监测规则作为结果输出.这种算法效率低,性能差:基于集成分类器[8]提出的数据流监测算法在规则少于1000的情况下,元组的监测时间接近1s,这远远达不到我们的大规模内容监测的应用要求.(2)统一高维索引(Uniformhigh-DimensionIndex):这种方法[5]广泛应用于空间数据库监测规则相关的应用系统中,核心思想是不对谓词关联的属性本身的性质进行区分,将所有的属性依次对应为空间对象的维度,每一个监测规则对应于属性空间中的一个区域块,然后根据所有的监测规则构建高维索引,该算法可以把每一个数据流元组看作高维空间中的一个点,因此,数据流元组的监测过程就变成了高维索引中的点监测规则.这种算法与H-Tree最大的不同之处在于它不对属性集合进行分类,而是统一的映射到多维度空间构建高维索引,当异构数据流的属性数量在80以上,监测规则大于2000时,性能下降明显[11].数据流监测的目标是:针对每一个数据流元组,用最小的开销计算出所有满足的监测规则.本文的索引结构针对异构数据流实时监测的特点,充分利用属性间的关联性,将规则集按照属性分类构建层次化的索引结构,最大限度地利用不同属性索引的特点,大大的提升了实时监测效率.3犎-Tree的结构和算法本节重点介绍H-Tree的索引结构及核心算Page4法.H-Tree是一种面向异构数据流上大规模监测规则计算的动态索引,支持监测规则的实时更新,其主体流程包括索引构建和实时匹配计算.如图2所示,构建索引时,首先对异构数据流的属性集进行分类:连续型属性和离散型属性.然后,根据属性类型将输入的监测规则集划分为不同的谓词集,基于不同的谓词集构建层次化的索引结构:根据离散型属性上的谓词构建Treap树作为第1层索引;在第2层,将所有连续型属性映射为多维空间,根据连续性属性相关的谓词构建高维索引.由于离散型属性上的谓词都是离散值,所以构建的第1层索引可以快速定位到监测规则上,而且空间开销也比较小.在H-Tree的第2层,本文将性质相同的属性谓词按照维度划分构建索引,尽可能的提升监测规则处理速度.对实时到达的数据流元组t进行监测计算时,首先对t进行向量抽取和裁剪计算;量化后的向量经过谓词属性分类处理后得到不同的谓词向量;运用H-Tree的监测规则算法通过两层索引结构过滤得到满足条件的监测规则集.在本节余下的部分中,首先在3.1节给出H-Tree索引框架的基本结构;在3.2节,给出H-Tree的动态构建算法;在3.3节,描图3H-Tree树结构(主要有3个部分组成.左边是H-Tree中存储监测规则与谓词的关联表.右边是H-Tree的两层索引框架.第1层是Treap树,是根据离散型属性上的谓词集构建.第2层是高维索引树,是根据连续H-Tree中的节点可以分为3类:首层节点top_node,第2层的中间节点mid_node和叶子节点leaf_node.节点的主要定义和主要包含元素如图4所示.其中,attr为首层Treap树节点对应的离散型属性,value为该Treap节点对应的离散值,weight为该节点代表的谓词的优先级,left,right为该节点的左述H-Tree的实时监测流程.3.1犎-Tree的索引结构从结构上来讲,H-Tree包括3个重要组成部分以及3个重要操作.其中,3个组成部分分别是:(1)第1层的Treap索引结构;(2)第2层的高维向量索引结构;(3)监测规则和谓词的关联表.基于H-Tree的3个主要操作分别是:(1)搜索;(2)插入;(3)删除.H-Tree总体上是1个两层的索引结构.图3给出了基于表1中的监测规则构建的H-Tree.如图3所示,其第1层是由离散型谓词构建的Treap树索引;第2层是根据连续型谓词对应的多维向量构建的高维空间树;另外1个很重要的组成部分是监测规则与谓词的关联表,用来完成两层索引监测规则结果的快速融合.Page5右孩子节点.branch代表着第2层索引对应的高维树结构的中间节点指针.mbr为第2层叶子节点对应的高维向量.3.2犎-Tree的动态构建基于H-Tree的层次化索引结构,提出一种可行的索引构建算法,共分为3个步骤:规则预处理、谓词集合划分和层次化索引构建.先对预处理后的规则集按照属性分类进行一定的划分,在此基础上再对划分后的数据集分层构建索引.规则集划分时,对于预处理后的n条规则,按照属性类别和值域划分了离散型谓词集犃和连续型谓词集犅.其中∑A+B=∑q∈Q1维上的谓词集分为了s个区间I1,I2,…,Is,其中每个区间只有离散型谓词或者连续型谓词.由于经过了预处理的维度转换,使得I1,I2,…,Is的区间内含有的谓词性质基本相同或者相似,便于分层次索引的构建.同时,异构数据流注册的规则集通常包含着优先级信息,规则的优先级越高,表示其被监测计算的需求越紧迫.当一个新的监测规则注册到系统中,H-Tree首先预处理模块将监测规则按照属性类型划分为离散型谓词pd和连续型谓词pc.然后将离散型谓词pd插入到H-Tree的第1层索引中,也就是插入到离散型属性对应的Treap树索引中;最后将连续型谓词pc插入到H-Tree的第2层索引中.当将pd插入到第1层的Treap树的时候,首先按照排序二叉树的标准插入法进行插入,但这时可能违反Treap树的堆性质,因此需要自底向上进行旋转,直到堆性质得到满足.删除是相反的,先把优先级设置为最低,自上而下转移到叶子,然后删除.H-Tree的第2层插入算法与R-Tree的插入过程类似:首先利用searchLeaf(pc)去定位到要插入的目标叶子节点,定位的过程本身是个递归过程.第2层索引插入pc的过程从第2层的根节点开始,顺次按照广度优先搜索,按照多维空间的包含关系进行搜索,当找到一个叶子节点n以后,检查n的分支数.如果发现已经超过分支阈值M,则直接进行节点分裂,产生新节点,并将n已有的节点和Pc的向量利用启发式策略平均分派到两个节点中,最后依次更新父亲节点信息.如果n的分支数没有超过阈值M,则直接调用updateParentNode(L)来完成插入操作.H-Tree插入和删除的具体细节如算法1和算法2所示.算法1.H-Tree的插入算法.输入:监测规则q,离散型谓词pd,连续型谓pc,H-Tree输出:NULL1.IFn==NULLTHEN2.DirectInsert(pd);3.rt←GetRoot(T).4.IFleftbranchofLlessthanMTHEN5.UpdateParentNodeofL6.ELSE7.SplitNodeL;8.AdjustchildtreeofL;9.ENDIF10.ELSE11.IFthevalueofpdislessthann:valueTHEN12.Insert(n:leftChild,p);13.ELSE14.Insert(n:rightChild,p);15.ENDIF16.ENDIF;算法2.H-Tree的实时监测算法.输入:数据流元组狋,索引H,检索结果res输出:NULL1.FORall针对当前滑动窗口中的元组tDO2.r←Hfirst:TreapSearch(狋).3.IFrisnotemptyTHEN4.Hsecond:Search(狋;res);5.ELSE6.狋←GetNextTuple狋;7.ENDIF8.IFresisnotemptyTHEN9.res←Combine(res;r)10.ELSE11.狋←GetNextTuple狋;12.ENDIF13.ENDFOR;需要注意的是:基于离散型谓词的特点,H-Tree的第1层索引用Treap树构建,加快离散型谓词的快速监测规则计算.我们假设空树的优先级为无穷大,则上面的添加和删除算法可以正确处理只有一个儿子的情形.第1层索引的添加和删除操作的期望时间复杂度均为O(logn).从编程复杂度来说,Treap是工程上最容易实现的数据结构,不仅没有任何特例需要考虑,而且在期望O(logn)时间内同时支持插入、删除、分离和合并.插入过程最重要的问题是第2层索引中节点的分裂策略.在这里本文采用类似R-Tree的启发式策略.详细来讲,首先取出所有要分裂的块.然后选择Page6交叠面积最小、同时覆盖两个块的面积最大的两个块.最后将剩余的块按照面积交叠差异依次划归到不同的节点中.由于删除操作与构建操作都比较简单,在此,本文不再赘述.3.3实时监测算法在这一节重点介绍数据流元组在H-Tree的监测过程如图5所示.针对元组t,H-Tree充分挖掘面向大数据流监测上规则集的特征,首先扫描第1层图5H-Tree的实时监测过程在算法2中,对于任意的数据流元组t,首先把离散型属性值在多属性Treap树索引中扫描,如果命中,表示有离散型谓词命中,这种情况下才进行第2层索引的监测规则过程.否则直接返回.通过构建第1层触发索引,大大加快了H-Tree数据流元组的监测规则过程.如果命中了离散型谓词,则接下来进行第2层索引的并行监测规则过程.即对于第1层中的每一个高维索引依次进行属性值键值对的监测规则,并将监测规则结果存入vRes中.本文根据获得的vRes运行结果融合算法,最终获得命中的监测规则结果集Qr.4算法复杂度分析本节针对提出的H-Tree中的实时监测算法和插入、删除算法的时间和空间开销进行分析.在这里,监测规则集合本文用Q来表示,监测规则和谓词的映射结构用C表示,H用来表示多属性哈希索引.如算法2所示,对于每个实时到来的数据流元组t,监测规则处理的时间开销可以分为4个部分:的Treap树索引来计算满足的离散谓词集.由于离散型谓词共享度很高,这就大大提升了扫描速度,加快了监测规则的整个处理过程.然后,根据第1层索引命中的有效节点,搜索谓词关联表,找到第2层索引的节点指针,进入第2层高维索引中继续查找,最后,融合第1层和第2层命中的结果,将最终命中的规则集进行快速融合计算.算法2给出了数据流元组的监测规则处理的具体细节.(1)计算每个谓词结果的时间;(2)检查监测规则和谓词映射关系的时间;(3)检索哈希索引的时间;(4)检索第2层高维索引树的时间.为此,本文设计了评估方程,对监测规则处理过程的时间开销进行评估.因此,时间开销的评估方程如下:idx_searching(H)+sum=∑p∈TP(C)v(p)×scanning(p,Q)+multi_dim(t)(3)其中,idx_searching(H)是多属性Treap树的搜索开销,scanning(p,Q)代表着对谓词p对应的关联表计算的开销,multi_dim(t)代表着t在H-Tree的第2层连续高维索引的检索开销.在算法2中,本文做了以下假设:(1)多属性Treap树索引的搜索开销idx_searching(H)与离散型属性个数成正比;(2)scanning(p,Q)的大小与Q的数量成正比.基于以上假设,式(3)可以转换为式(4).sum=H×logCidx+∑p∈TP(C)v(p)×λp×κp×n(4)Cidx代表多属性Treap树的节点数量.λp代表着谓词P在监测规则集Q的频率,κp是谓词p的宽度.n表示监测规则集Q的数量.同时,我们用式(5)对Page7H-Tree的空间开销进行评估,空间开销主要由以下3个部分组成:(1)第1层索引即多属性Treap索引的空间;(2)存储谓词与监测规则关系的空间开销;(3)连续型高维索引的开销.sum=∑h∈H∑p∈TP(H)Mmapping(Q)+Mdim其中,Mtreap构建多属性Treap树索引所需要的空间,Mbitmap是被用来对所有的监测规则结果进行融合计算的空间.Mmapping是用来对所有的谓词与监测规则集Q的关系进行缓存的空间.Mdim是H-Tree的第2层高维索引的内存开销.5实验结果为了验证H-Tree的性能,本文基于公开数据集和人工数据集进行了属性数量变化、谓词数量变化、规则数量变化下的性能比较实验.在实验中,既实现了提出的层次化索引框架H-Tree,又实现了算法QSI和算法UDI,实验结果表明,无论在何种参数设置情况下,由于采用了层次化的索引结构,H-Tree的性能都远远优于QSI算法和UDI算法的.在这一部分,本文首先描述对结果的评估办法,然后再具体阐述实验结果.5.1结果评估办法在实验的监测规则部分,用表2所示的3种人工数据集分别进行实验.所有的谓词与监测规则之间的关系服从Zipf分布,Zipf分布广泛使用在基于内容的关键字检索中.测试数据流是从网关上捕获图6本文将监测规则数量从100增加到1000的过程中3种算法的表现(从图中可以明显看出3个算法的时间开销都明显增加,但是H-Tree的增加幅度明显比其他两个算法的要小得多)5.2.2离散型谓词规模的影响图7和图8显示在离散型谓词不同的情况下3个算法的表现.本文用离散型属性的数量和离散型谓词的数量这两个指标来衡量离散型谓词对监测规则性能的影响.依据这两个指标,本文在监测规则的实时多媒体数据流,然后按照已经选定的属性和维度进行内容抽取,将抽取的内容以异构数据流的形式推送到监测算法中.实验部署在处理器为Duo2.66GHzCPU,内存为2GB,LinuxAS5的机器上.其中,实验最关心的是监测规则计算的时间开销.这个时间开销定义为:对于任意一个数据流元组,完成所有监测规则的计算所花费的时间均值.本文将H-Tree,QSI,UDI这3种算法的表现做对比.为了使比较更有意义、更公平,本文在每组实验中仅仅改变一个参数,其他参数均设置为固定值.所有实验结果都是连续重复运行20次后求得平均值.名称连续型属性集监测规则集离散性属性集stockdataanalysis401000000017spamdetection701000000021Intrusiondetection8010000000205.2实验结果5.2.1监测规则规模的影响首先,我们最关心的是监测规则规模不同的情况下3个算法的表现.其中,本文用监测规则的数量这个指标来衡量监测规则的规模.依据该指标本文进行实验:将监测规则的数量从100增加到1000.图6显示了实验的结果.从实验结果中可以看到无论在何种参数情况下,H-Tree都远远优于QSI以及UDI.另外H-Tree比QSI优秀的一个重要原因是本文通过多属性触发索引的扫描淘汰了大量的元组,很多数据流元组假如经过多属性触发索引的扫描过程以后发现不命中,那么元组中剩余属性上的键值对就根本不需要进行扫描.的数量固定在10000条,连续性谓词的数量固定在120个的情况下进行了两组实验,第1组是在将离散型属性的数量固定在5的情况下进行,本文将离散型谓词的数量从10渐增到800.第2组实验是在将离散型谓词的数量固定在100的情况下展开,本Page8文依次将离散型属性的数量从1增加到10.从图7和图8的两组结果中可以看到无论在何种参数情况下,H-Tree都远远优于另外两种算法.而且,在随着离散型属性数量的增加,H-Tree的表现更加优秀,主要是因为本文利用了并行性的处理算法,将监图7本文将离散型谓词从10增加到800的过程中3种算法的表现(从图中可以明显看出由于H-Tree采用了层次化的索引,利用第1层的触发索引可以保证基本不受离散型属性数量的影响)图8本文将离散型属性从1增加到10的过程中3种算法的表现(从图中可以明显看出离散型属性的增加几乎对H-Tree没有影响,因为多属性触发索引本身的扫描速度基本不会增加)5.2.3连续型谓词规模的影响本文比较关心连续性谓词规模不同的情况下3种算法的表现.图9和图10显示了两组实验的结果.其中分别用连续型属性的数量和连续型谓词的数量这两个指标来衡量连续性谓词对监测规则的影响.依据这两个指标本文进行了相应的两组实验.其中第1组是将监测规则数量固定在2000,连续性属性数量固定在3维的情况下,将连续性谓词的数量图9本文将连续型谓词数量从10增加到800的过程中3种算法的表现(从图中可以明显看出3种算法的开销都明显增加,只是由于H-Tree对每个元组都进行命中扫描,所以开销增加幅度不如其他2种算法大)测规则更好地分布到不同的触发索引上.另外,本文发现,在离散型属性不变的情况下,增加离散型谓词的数量对H-Tree几乎没有影响,是因为触发索引的检索速度基本不受谓词数量的影响,这与本文最初的设想基本相同.从10渐增到800.第2组实验是在将连续型谓词的数量固定在200,监测规则固定在2000的情况下,依次将连续型属性的数量从2增加到34.从两组结果中本文可以看到无论在何种参数情况下,H-Tree都远远优于另外两种算法.另外H-Tree和UDI都比QSI优秀的一个重要原因是他们都对监测规则构建了索引,这样监测规则起来的速度要比QSI快得多.Page9图10本文将连续型属性从2增加到34的过程中3种算法的表现(从图中可以明显看出由于H-Tree采用了层次化的索引,虽然高维索引的维度增加会带来开销的增加,但对H-Tree的开销影响不大)5.2.4公开数据集上的实验结果最后,本文通过公开的数据集(表3所示)来对H-Tree和R-Tree的性能进行比较.实验方法如下:将公开的数据集的规则作为监测规则注册到系统中,然后区分出所有的离散型属性和连续型属性.然后构造10000条数据流元组推送到系统中,比较两个算法的时间.表3显示了实验结果.通过表3本文可以观察到,在所有公开的数据集上,本文的H-Tree性能也比R-Tree的优秀,尽管内存开销比R-Tree要高一些.综上所述,由于采用了层次化的索引框架以及高效的监测规则算法,H-Tree性能较传统的解决算法有了大幅度的提升,非常适合大数据背景下的运营数据流在线监测系统.表3公开数据集上的数据流监测规则效率比较数据流H-Treesyn-528171215.670.389123600012.290.376syn-1021166812.630.291103712510.250.054Spam33322631.150.013141740626.290.055Intrusion28195320.930.134898213718.040.169Adult30652326.370.135122503121.080.172Magic29314523.070.032103625022.450.097Winered29365723.570.057113125020.150.121Winewhite28303122.950.133133812018.150.182Census27978220.760.964138360016.170.8176结束语和下一步工作在以实现大型集团企业的运营状态在线监测为背景的大数据流环境中,尤其是多媒体数据流环境下,数据流包含的属性越来越多,不同属性之间存在差异的异构大数据流也日益壮大,由于监测规则规模异常庞大,传统的高维索引方法对监测规则集合构建的索引性能无法满足实时性的要求.为了解决这个问题,从异构大数据流本身的特点出发,结合不同属性上谓词的特点,本文提出了一种层次化的索引结构(H-Tree).在H-Tree中,首先根据离散型谓词构建Treap树作为第1层索引;在第2层,将每一个连续型谓词映射为多维空间中一维,进而构建多维索引.当数据流元组到来时,首先扫描H-Tree的第1层触发索引,完成离散型谓词的监测规则;当命中触发索引以后再搜索第2层索引.文中方法既充分利用了第1层离散型触发索引的快速扫描能力,又借助第2层连续型谓词的高维区块划分,将连续型谓词映射为不同的区间块,进一步加快检索速度.在公开数据集和人工数据集上的实验结果表明,在不降低准确率的情况下,H-Tree的性能优于已有的解决方法.
