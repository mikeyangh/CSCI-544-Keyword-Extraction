Page1异构分布式系统DAG可靠性模型与容错算法谢国琪李仁发刘琳杨帆(湖南大学嵌入式与网络计算湖南省重点实验室国家超级计算长沙中心长沙410082)摘要异构分布式系统性能得到大幅度提升的同时,却造成故障率大增,以有向无环图(DirectedAcyclicGraph,DAG)任务模型研究异构分布式系统的容错调度成为当前的研究热点.广泛采用的基于任务复制的容错算法存在以下问题:(1)DAG任务可靠性需求与DAG可靠性需求的约束存在缺陷且缺乏严谨的理论证明;(2)每个任务仅有一个副版任务,不足以应对任务潜在的多次发生的故障;(3)盲目地使每个任务拥有ε+1个副版来容忍可能的ε个故障,虽然提高了系统的可靠性但易造成系统冗余度过高,并付出昂贵的计算资源.文中首先分析DAG图中任务依赖关系,确定DAG任务的可靠性概率模型,并建立DAG可靠性模型;接着提出满足可靠性目标的任务复制下限值算法、经济的任务复制策略算法和贪婪的任务复制策略算法,精确量化各个任务需要复制的次数,最后在上述算法的基础上提出可选策略的DAG容错算法OPDFT(OptionalPolicyonDAGFault-Tolerant).实验表明,OPDFT算法的经济复制策略和贪婪复制策略的可靠性代价分别是盲目策略算法可靠性代价的60%和70%左右.关键词异构分布式系统;可靠性;容错;有向无环图;任务复制1引言计算机系统日益走向异构化与分布式.作为与人们生活息息相关的汽车,其内部的总线系统是典型的异构分布式嵌入式计算系统,部分轿车中的电子控制单元(ElectronicControlUnit,ECU)的数量超过100个,并通过CAN、FlexRay、LIN、MOST等多种车辆总线互联[1],系统规模和复杂性骤增.近年来,将CPU与具有超高的计算性能和性能功耗比的GPU集成构建异构分布式系统已成为超级计算机发展的新趋势之一[2].然而,处理器制造工艺的发展,使得单芯片上集成的晶体管尺寸越来越小且晶体管的数量呈指数性增长,在处理器性能得到大幅度提高的同时,系统的故障率急剧增加.汽车行驶过程中存在的各种干扰也容易出现瞬时故障.安全关键系统(如防抱死制动系统)如果因为故障而错过截止期限,则会造成灾难性的后果[3].在提供强大的计算性能的同时,GPU集成了大量的功能部件且运行时温度较高,容易出现瞬时故障,可靠性大大低于传统CPU[2].因此必须采用一定的容错手段来保障异构分布式系统的可靠性,使得在出现局部故障的情况下,仍然能够产生正确的结果.由于异构分布式系统的调度在各处理器上执行时间不同以及处理器间存在通信开销,各任务之间还存在优先级约束和数据依赖关系,因而可以将应用映射成有向无环图DAG[4].以DAG任务模型研究计算机系统的容错问题已成为当前研究的热点[5-13].2相关研究在异构分布式系统中,任务复制技术是实现容错的主要手段,最具代表性的主/副版技术(Primary/BackupCopy,P/B)广泛应用于容错调度方法[14].它通过在备份处理器上执行备份任务来实现容错.P/B复制技术有3种执行方式:主动复制方式(ActiveBackupCopy)[10-13]、被动复制方式(PassiveBackupCopy)[5-9]和混合复制方式(P/BOverlappingBackupCopy)[14].目前学术界对DAG任务容错调度的研究也都是基于任务复制机制,针对副版数复制数量来区分,主要有2种复制方式.(1)每个任务仅有一个副版.文献[5]提出了DAG可靠性代价驱动的eFRCD(efficientFault-tolerantReliabilityCostDriven)算法,该算法对DAG中的每一个任务都有一个分配在不同处理器上的副版任务.为了提高性能,对于主版不在同一个处理器上的多个任务,系统允许在同一个处理器上的这些任务的副版可以重叠.然而,这种方法必须假设这些任务之间是相互独立的,不能满足DAG中有优先级约束任务的需要,因此在eFRCD算法基础上,作者在文献[6]又提出了改进的eFRD(efficientFault-tolerantReliabilityDriven)算法,该算法采用主副版重叠机制,即允许任务的副版与此任务的所有后继任务的主版重叠,可以进一步降低调度长度.文献[7]在eFRD算法的基础上提出了基于最早完成时间的最小复制开销的MRC-ECT(MinimumReplicationCostwithEarlyCompletionTime)算法和基于最小复制开销的最小完成时间的MCT-LRC(MinimumCompletionTimewithLessReplicationCost)算法分别对DAG中的非独立任务和独立任务进行容错调度.首先,上述研究针对可靠性问题,假设某一个时刻最多只有一个处理器出现故障,且在下个故障出现时,前一个故障已经排除,假设较为理想导致实用性不强.同时也只考虑DAG的可调度性,没有考虑可靠性目标.Lin等人在文献[8]中给出了可靠性目标的定义,即系统任务集里的每个任务都有ε个副版,一个任务成功分配的条件是该任务的ε个副版分配到不同的处理器上,且没有导致这些处理器的利用率超过1,在满足任务副版时间约束和系统高可靠性条件的基础上,最大化成功的分配任务.Page3其次,上述算法都是采用被动复制方式,只有当主版任务调度失败后才能启动副版任务,被动复制在主版任务失效时,需要选择一个新副版任务恢复到失效前状态,造成失效恢复时间较长.因此从截止期限和失效恢复时间考虑,主动复制优于被动复制[9].主动复制能够在运行失效时直接屏蔽失效的任务版,失效恢复时间几乎接近于零,调度长度也相对较短.(2)每个任务有多个副版.文献[10]提出基于主动复制的FTSA(FaultTolerantSchedulingAlgorithm)算法,此算法是经典的非任务复制的DAG调度算法HEFT(Hetero-geneousEarliestFinishTime)的扩展.FTSA容忍ε个错误的发生,并且有ε+1个版本允许在不同的处理器上,但FTSA算法每次只选择一个优先级最高的就绪任务调度.作者又在文献[11]中提出了同样基于主动复制的CAFT(ContentionAwarenessandFault-Tolerant)算法,与FTSA算法每次只选择一个优先级最高的就绪任务不同,CAFT选择一组就绪任务,在同一决策过程中分配其所有副版到相应的处理器,这样能够产生更好的负载均衡.但是FTSA和CAFT算法为了使系统能够达到容忍多个故障,采用了盲目的复制策略,即对于每个任务需要复制的版本个数,并没有精确的量化,而是盲目地使每个任务拥有ε+1个副版,容忍系统中任务可能存在的ε个故障.虽提高了系统的可靠性却易造成任务冗余过高,使得调度过程中既付出了昂贵的计算资源,又造成调度长度过长而可能错过任务的截止期限.文献[12]则将盲目的复制策略应用到多个DAG,更加剧了系统的冗余程度过高.针对主动复制采用ε+1个副版容忍ε个故障的情况,文献[13]首次指出:拥有更多的副版并不意味更高的可靠性.其提出的MaxRe算法针对不同的任务,基于可靠性目标而采用不同的副版次数,在满足系统的可靠性目标的前提下,能够最小化资源的使用.但是该算法认为每个任务的可靠性目标为r=n槡R,其中R为DAG的可靠性需求,n为任务个数,但是由于DAG中的任务存在优先级约束,对于有前驱的任务,需要考虑其直接前驱任务的影响,不能依靠简单的开方就能断定.本文旨在通过DAG可靠性概率模型的有效建模以及在可靠性目标的约束条件下,计算DAG任务复制下限值,提出有效的任务复制选择策略,精确量化分析每个任务需要的版本个数,在满足可靠性目标的前提下,减少任务冗余,最小化可靠性代价,降低调度长度以提高性能.3可靠性模型3.1DAG任务模型DAG任务模型中的结点表示任务,有向边表示任务间的依赖和通信关系[15].用G={N,E,W,C}表示DAG.其中N={n1,n2,…,ni}表示图中结点的集合,也就是任务的集合.E={e1,2,e2,3,…,ei,j}表示图中有向边的集合,边表示任务间的优先级与数据依赖关系;P={p1,p2,…,pk}表示异构处理器的集合.犠是一个|N|×|P|的矩阵,wi,k表示任务ni在pk上的计算时间开销.ci,j表示任务ni与nj间的通信开销,如果将2个任务分配到同一个处理器,则通信开销为0.pred(ni)表示结点ni的直接前驱结点集合,ind(ni)表示ni的入度,也就是其直接前驱结点集合的个数,当前任务只有在它全部前驱结点的数据到达后才能执行.succ(ni)表示结点ni的直接后继结点集合,outd(ni)表示ni的出度,也就其直接后继结点集合的个数.没有前驱结点的结点为入口结点,记为nentry.没有后继结点的结点为出口结点,记为nexit.如图1所示为一个包含7个任务结点的DAG,表1为相应的计算开销矩阵.任务n1n2n3n4n5n6n7Page43.2DAG任务可靠性模型任务的可靠性为系统中任务无故障运行的概率.一般地,DAG任务发生故障的概率服从泊松分布(PoissonDistribution)[5-14].泊松分布是一种离散型概率分布,用以描述在时间段[0,t]内γ(γ0)个事件发生的概率.它假定事件以一个恒定速率λ到达且事件是相互独立的,那么在时间段[0,t]内,出现γ(γ0)个事件的概率为若γ=0,即在时间段[0,t]内事件没有发生,根据式(1)可得事件没有发生故障的概率可表示为若任务ni发生故障的均值为λi,那么运行在处理器pu上的任务ni在其执行时间wi,u内无故障概率可表示为由于任务相互之间存在依赖关系,且当前任务只有在它全部前驱任务结点的数据到达后才能执行,可得出任务的可靠性不是由式(3)所能表示的,还必须与它所有的前驱结点相关.(1)无容错机制下的任务可靠性在无容错机制下,系统中只有每个任务的主版存在,对于没有前驱结点的入口结点nentry而言,其可靠性仅由式(3)决定;对于入度ind(ni)不为零的任务ni,其可靠性计算还需要考虑到其直接前驱结点的影响,因此无容错机制下,DAG任务ni的可靠性计算公式为CR(nentry,pu)=e-λentry×wentry,u烄CR(ni,pu)=烅NError(ni,pu)×∏nx∈pred(ni),pu∈P烆(2)容错机制下的任务可靠性在容错机制下,系统中不仅有每个任务对应的主版任务,还有它们的副版任务.我们定义ki为任务复制因子,表示任务ni拥有的副版任务个数为ki,相应的主副版任务集合为{n0i,n1i,n2i,…,nkii},其中n0i为主版任务,剩余的为副版任务.在主副版任务集合中,只要有一个主版或副版任务执行成功就代表任务ni在其运行时间段内没有发生故障,那么任务的无故障概率可表示为NError(ni)=1-∏ki对于没有前驱结点的入口结点任务nentry,其可靠性可由式(5)表示;对于入度ind(ni)不为零的任务ni,可靠性由NError(ni)和它所有的直接前驱结点任务共同决定.因此容错机制下,DAG中任务ni的可靠性计算如下:CR(nentry)=1-∏ki烄烅CR(ni)=NError(ni)×∏nx∈pred(ni)CR(nx烆3.3DAG可靠性模型文献[13]中的DAG可靠性模型中,任务可靠性需求与DAG可靠性需求的约束计算公式忽略了对于有前驱任务的任务,还需要考虑其前驱任务对此任务的可靠性造成的影响.而DAG任务模型本身以任务之间优先级约束为特点,因此本节充分考虑DAG的任务优先级约束,创新性地从理论证明和实例验证2个方面提出和验证DAG可靠性模型.定理1.DAG可靠性概率模型.若DAG中每个任务ni拥有副版任务的个数为ki,那么该DAG可靠性计算的概率模型可表示为其中Roadi表示从任务结点ni到出口任务结点nexit所有路径的个数,Roadi的值可以通过深度优先遍历(Depth-First-Search,DFS)算法[16]计算而得;NError(ni)Roadi定义为可靠性贡献因式,即DAG可靠性是各个任务的可靠性贡献因式的乘积.证明.在DAG中,相关任务之间存在着优先级依赖关系.当前任务只有在它的全部前驱结点的数据完成之后才能执行.这就意味着若某个任务成功执行了,那么它所有的直接前驱结点任务也执行成功了.以此类推,可知对整个DAG而言,只要出口结点任务nexit运行成功,那么此DAG就是可靠的.因此,出口结点任务nexit的可靠性代表着整个DAG的可靠性.若DAG中每个任务ni拥有副版任务的个数为ki,根据式(5)可知,DAG的可靠性概率GRDAG可表示为GRDAG=CR(nexit)对式(8)逐步进行扩展:Page5GRDAG=NError(nexit)×CR(ni-1)×=NError(nexit)×NError(ni-1)×∏nx1∈pred(ni-1)CR(nx1)×NError(ni-2)×∏nx2∈pred(ni-2)CR(nx2)×…×NError(ni-a)×∏nxa∈pred(ni-a)CR(nxa)=NError(nexit)×NError(ni-1)×NError(ni-b)×∏nxc∈pred(ni-b)CR(nxc)×…×NError(ni-2)×NError(ni-d)×∏nxe∈pred(ni-d)CR(nxe)×…×NError(ni-a)×NError(ni-f)×∏nxg∈pred(ni-f)CR(nxg)×…×NError(n3)×…×NError(n2)×…×NError(n1)=NError(nexit)×NError(ni-1)Roadi-1×NError(ni-2)Roadi-2×…×NError(ni-q)Roadi-q×NError(ni-q-1)Roadi-q-1×…×NError(n4)Road4×NError(n3)Road3×NError(n2)Road2×NError(n1)Road1=∏ni∈N最终得到整个DAG的可靠性计算的概率模型为式(7)的形式.接下来通过图1所示的DAG_1的可靠性计算过程实例来验证上述证明.图1表明了任务之间的依赖关系,其中任务结点n1为入口结点,任务结点n7为出口结点nexit.由图中任务结点的边关系可知,如果出口任务结点n7执行成功,则整个DAG就执行成功.一方面,假设在容错模式下每个结点任务拥有一定数量的副版任务,依据式(6),其可靠性的计算过程如表2所示.如表中步2,n7运行成功则代表它的前驱任务结点n5和n6也执行成功;n5依赖n2和n3执行成功,如步3;同样如步4,n6需要n3和n4执行成功,步5~7表示了n2和n4依赖于入口结点n1执行成功,n3依赖于前驱n1和n4.步骤结点DAG_1的可靠性1nexit=n72pred(n7)=〈n5,n6〉NError(n7)×CR(n5)×CR(n6)3pred(n5)=〈n2,n3〉NError(n7)×NError(n5)×4pred(n6)=〈n3,n4〉5pred(n2)=〈n1〉6pred(n3)=〈n1,n4〉7pred(n4)=〈n1〉另一方面,DAG中各个任务结点到出口结点n7的路径以及个数Roadi可以通过深度优先遍历算法计算得出,计算结果如表3所示.任务n1n2n2→n5→n7n3n4n5n5→n7n6n6→n7n7n7→n7根据定理1,将路径个数Roadi代入可靠性计算式(7),即可得到实例DAG_1的可靠性为GRDAG_1=(NError(n1))6×NError(n2)×将按照定理1获知的可靠性GRDAG_1的表达式与表2中实际计算所得到的可靠性表达式对比,计算结果一样.该实例的验证与定理1得出的结论一致,验证完毕.Page64容错算法4.1DAG任务复制下限值算法(1)任务复制次数下限值分析定义1.DAG可靠性约束(DAGReliabilityConstraint).假定用户对系统的可靠性目标为ω且ω<1.若GRω,则表示系统的容错方法已达到了用户的可靠性目标需求,即可认为系统是可信的.那么将DAG的可靠性约束定义为GRDAG=∏ni∈N为了满足DAG的可靠性目标值,采用主动任务复制的方式,那么必定存在一个任务复制次数的下限值kdown满足kikdownω的最小值.定理2.若系统中任意一个任务ni的复制次数ki<kdown系统中其它任务复制次数kj取何值(i≠j),系统的可靠性目标难以达到,也就是会造成DAG的可靠性值∏ni∈N证明.已知条件为任务ni的复制次数ki<i,那么NError(ni)Roadi<ω.在此条件下,DAGkdown中其它任务的nj∈N(i≠j)对应的NError(nj)Roadj之积∏nj∈N情况1.若∏nj∈N两边同时乘以NError(ni)Roadi,可得GR<ω×NError(ni)Roadi,已知NError(ni)Roadi<ω,则即在第1种情况下DAG的可靠性GR小于ω.情况2.若ω∏nj∈N(NError(nj))Roadj,则式两边同时乘以NError(ni)Roadi,可得ω×NError(ni)RoadiGR.已知GR=NError(ni)Roadi×∏nj∈Nω×NError(ni)RoadiGR<NError(ni)Roadi×1<ω综合以上两种情况可知,如果任务复制次数ki小于下限值kdown∏ni∈N目标.(NError(ni))Roadi<ω无法达到系统的可靠性由定理2可知复制次数下限值kdownNError(ni)Roadiω满足的最小值,可推出任务ni的可靠性NError(ni)Roadi槡ω,即1-∏ki(2)任务复制次数下限值算法接下来根据此表达式来设计获取任务复制次数下限值kdown需引入几种优先级队列和集合,依次为①任务无故障概率优先级队NError_Quque,每个任务都包含一个此队列.该队列是任务ni在处理器pu上无故障概率值NError(ni,pu)=e-λiwi,u的降序排列;②Duplication_Set集合={k1,k2,…,ki},该集合包含每个任务的副版复制个数,初始默认次数都为0;③集合Road_Set={road1,road2,…,roadi},该集合包含每个任务到出口任务nexit的路径个数;④任务的可靠性贡献因式优先级队列Contri-bution_Quque,该队列是任务ni对DAG可靠性贡献因式NError(ni)Roadi的降序排列.公理1.处理器分配原则.为了使得任务复制次数最小化,需从任务的无故障概率优先级队列NError_Quque中选择最大e-λiwiu且未分配任务ni主版及其副版的处理器给当前任务版本.算法1.DAG任务复制下限值算法.输入:Duplication_Set,Contribution_Quque输出:Duplication_Set,Contribution_Ququefor(vari=0;i<|N|;i++){//遍历所有任务初始任务ni的复制个数kdown获取任务ni发生故障的概率while(1-fail<Roadi槡ω)&(ki<|U|)doendwhile更新ni对DAG的可靠性的贡献因式NError(ni)Roadi=(1-fail)Roadi,并更新到Contribution_Quque中;更新ni的复制次数kdown}//endforreturnDuplication_Set,Contribution_Quque.Page7任务复制次数下限值算法的时间复杂度为O(n×p2).其中,n为任务数,p为处理器数.证明.遍历完一个DAG内的所有任务的时间复杂度为O(n),由于任务复制次数的大小不能超过处理器的数目p,所以任务复制的时间复杂度为O(p),计算fail值需要遍历处理器,所以其复杂度为O(p).那么,任务复制次数下限值算法的时间复杂度为O(n×p2).4.2贪婪的任务复制策略算法定义2.可靠性代价(ReliabilityCost)[17].它是指因任务复制冗余执行而消耗的计算资源,DAG任务每复制一次都会产生一定的可靠性代价.设犡是一个|N|×|P|的矩阵,xi,u表示任务ni是否存在主版任务或者副版任务分配在处理器pu上运行.若存在任务在处理器pu上调度,则xi,u=1;否则xi,u=0.在对任务分配处理器时,要求任务的主版任务和所有的副版任务被分配到不同的处理器上执行以保证当主版执行失败的时候,副版仍能在截止期前产生正确的结果.wi,u是任务ni在处理器pu上的计算时间开销.那么在一个DAG图中因为任务副版的执行而增加的可靠性代价表示为因此,针对文献[10-12]中存在的高可靠性代价问题,即为容忍ε个故障盲目地使每个任务拥有ε+1个副版,在结合以上知识的基础上,本文接下来提出相应策略的任务复制算法,算法以满足系统可靠性目标和降低系统可靠性代价为目的,在系统可靠性目标的驱使下动态地量化各个任务需要冗余复制的次数.定义3.可靠性贡献值.假设任务ni当前拥有的副版数为ki,那么任务ni可靠性贡献值ΔGRni表示任务ni复制一个副版之后(其副版数变为knewi=ki+1)其DAG的可靠性值GRiDAG的可靠性值GRDAG,即其中GRiDAG=∏ni∈NGRi=∏ni∈N贪婪(Greedy)的任务复制策略(GreedyPolicy)是指对所有任务进行一次预复制,并从计算出的任务可靠性贡献值集合{ΔGRn1,ΔGRn2,…,ΔGRn|N|}中找到当前贡献值最大的那个任务ni,并为其增加一个主动方式的副版任务.算法2.贪婪的任务复制策略算法.输入:Duplication_Set,Contribution_Quque输出:Duplication_Set,Contribution_Quque初始化:通过算法1获取Duplication_Set,Contribution_Quque,其中Duplication_Set存储每个任务的最小复制次数ki,Contribution_Quque存储每个任务的可靠性贡献因式NError(ni)Roadi;通过式(11)计算DAG的初始可靠性值GRDAG;whileGRDAG<ωdo对每个任务预复制一次(已达到满复制的任务不再复制),并通过式(16)和公理1得出每个任务的可靠性贡献值ΔGRni和相应处理器,并组成可靠性贡献值集合{ΔGRn1,ΔGRn2,…,ΔGRn|N|};从可靠性贡献值集合{ΔGRn1,ΔGRn2,…,ΔGRn|N|}中选择最大值ni;并将GRi为ni增加一个副版,ki=ki+1;依处理器分配原则,分配处理器;更新ni对DAG的可靠性的贡献因式NError(ni)Roadi,并更新到Contribution_Quque中;更新ni的复制次数ki,并更新到Duplication_Set中;endwhile贪婪任务复制策略的时间复杂度为O(n2×p2).其中,n为任务数,p为处理器数.证明.遍历完一个DAG内的所有任务的时间复杂度为O(n).计算GRi制任务的处理器,复杂度为O(p);其次要计算预复制任务的可靠性贡献值,需要遍历处理器,复杂度为O(p);最后得出GRi杂度为O(n).所以,贪婪的任务复制策略的时间复杂度为O(n2×p2).4.3经济的任务复制策略算法贪婪的任务复制策略基于可靠性贡献值来复制任务,没有考虑因任务复制而消耗的计算资源,因而可以进一步优化.定义4.可靠性贡献经济比值.假设任务ni当前拥有的副版数为ki,那么任务ni可靠性贡献经济比值ΔGREni表示任务ni复制一个副版之后,其可靠性贡献值ΔGRni与该副版任务消耗的计算资源wi,ps的比值(s为选择的处理器编号),即经济的(Economic)任务复制策略是指对所有任务进行一次预复制,并从计算出的任务可靠性贡献经Page8济比值集合{ΔGREn1,ΔGREn2,…,ΔGREn|N|}中找到当前贡献值最大的那个任务ni.作为选择的结果任务ni将增加一个主动方式的副版任务.该策略不但考虑了不同的任务对系统的可靠性贡献大小不同外,还将任务因复制冗余而消耗的计算资源作为指标,因此相比贪婪的任务复制策略,其付出的可靠性代价更少.算法3.经济的任务复制策略算法.输入:Duplication_Set,Contribution_Quque输出:Duplication_Set,Contribution_Quque通过算法1获取Replication_Set,Contribution_Quque,其中Replication_Set存储每个任务的最小复制次数ki,Contribution_Quque存储每个任务的可靠性贡献因式NError(ni)Roadi;通过式(11)计算得出DAG的初始可靠性值GRDAG;whileGRDAG<ωthen对每个任务预复制一次(已达到满复制的任务不再复制),并通过式(18)和公理1计算得出每个任务的可靠性经济贡献值集合{ΔGREn1,ΔGREn2,…,ΔGREn|N|}和相应处理器;从可靠性经济贡献值集合中{ΔGREn1,ΔGREn2,…,ΔGREn|N|}中选择最大值ni,并将GRi靠性值,即GR←GRi为ni增加一个副版,ki=ki+1;依处理器分配原则,分配处理器;更新ni对DAG的可靠性的贡献因式NError(ni)Roadi,并更新到Contribution_Quque中;更新ni的复制次数ki,并更新到Duplication_Set中;endwhile经济的任务复制策略的时间复杂度为O(n2×p2).证明.遍历完一个DAG内的所有任务的时间复杂度为O(n).计算ΔGREn1值首先需要选择预复制任务的处理器,复杂度为O(p);其次要计算预复制任务的可靠性贡献值,需要遍历处理器,复杂度为O(p);最后得出ΔGREn1需要遍历的所有任务,其复杂度为O(n).所以,经济的任务复制策略的时间复杂度为O(n2×p2).4.4DAG容错算法通过理论分析,得出DAG的可靠性概率模型;明确为了达到DAG的可靠性目标,任务的复制次数需满足kikdown值算法可获知下限值kdown任务复制策略造成的高可靠性代价问题,提出了贪婪的任务复制策略算法和经济的任务复制策略算法.基于上述模型和算法,提出可选策略的DAG容错(OptionalPolicyonDAGFault-Tolerant,OPDFT)算法.虽然通过任务复制策略得出了任务的主副版本和相应分配的处理器,但必须对任务的优先级进行排序,本文采用在DAG任务容错调度中常用的任务向上排序值(upwardrankvalue)[10-11]的降序排列作为任务优先级排序标准,其计算公式为ranku(nexit)=wexit烅烄ranku(ni)=wi+maxnj∈succ(ni){ci,j+ranku(nj烆其中wi表示任务ni的平均计算开销,OPDFT算法流程如算法4和图2所示.算法4.OPDFT算法.输入:DAG参数信息输出:DAG调度结果1.读取DAG的相关信息,如任务结点、任务结点之间的有向边和通信开销以及在处理单元上运行的计算开销等,确定系统参数集;2.按照深度优先遍历算法(DepthFirstSearch,DFS)[16],求取各DAG中各任务到出口任务的路径个数Roadi;3.按照式(2)计算DAG中各任务在各个处理器上,在其执行时间内无瞬时性故障的概率Nerror,并放入降序的优先级队列NError_Quque;4.调用任务复制次数下限值算法;5.判断当前系统的可靠性值是否已满足系统可靠性目标,如果满足,则跳转至步8;如果不满足,则进入下一步.6.若系统考虑计算资源消耗的经济性,则采用经济的任务复制选择策略,继续选择任务进行复制,否则采用贪婪的任务复制策略进行复制;7.获取最终各任务的复制和所分配的处理器;8.基于向上排序值对任务优先级排序并调度;9.返回调度结果,算法结束.OPDFT算法的时间复杂度主要考虑任务复制下限值算法和任务复制策略算法,如果通过任务复制次数下限值算法能够满足DAG的可靠性目标,那么无需调用任务复制策略算法,OPDFT算法的时间复杂度就为O(n×p2).否则需调用任务复制策略算法,使OPDFT算法的时间复杂度达到O(n2×p2).因此,这也说明了与直接调用相关任务复制策略算法相比,预先调用任务复制下限值算法,确定每个任务的复制次数下限值,能够为OPDFT算法产生更好的效率.Page95实验5.1实验平台及样本实验的硬件环境为一台具有奔腾双核处理器(3.2GHz/2.0GBRAM)的WindowsXP机器,所使用的软件工具有VC++6.0和Highcharts,DAG任务图生成工具TGFF3.5(TaskGraphsforFree)[18].实验流程步骤分为系统参数生成模块、算法处理模块、实验数据分析这3步.本文将采用TGFF随机生成具有不同特征的大量随机DAG作为仿真测试中的任务样本空间,并在一个由15个异构处理器构成的处理器平台上进行任务分配,任务故障概率取值范围为(2~10)×10-3中的随机数.其中,TGFF中生成DAG随机DAG的参数设置为:任务个数m={10,20,30,40,50,60,70,80,90,100,110,120,130,140,150},DAG最大出度集β={2,3,4,5},DAG最大入度集γ={2,3,4,5},任务在不同处理器上执行时间的差异度η={0.1,0.5,1.0},平均通信时间与平均计算时间的比值CCR={0.1,0.5,1.0,5.0,10.0},假设wi表示任务ni的平均计算开销,那么ni在处理器pk上的计算开销可以通过公式产生,即wi×(1-η/2)wi,kwi×(1+η/2)(20)5.2评价指标本文采用DAG的可靠性(Reliability)、可靠性代价(ReliabilityCost)和加速比(Speedup)作为评价指标.可靠性即DAG的可靠性概率模型,采用式(7)计算,通过可靠性与可靠性目标之间的关系来衡量容错算法的有效性.可靠性代价是指因任务复制冗余执行而消耗的计算资源,采用式(15)计算.DAG的可靠性代价越低,说明冗余任务越少,容错算法越高效.加速比即在一个处理器上串行执行DAG图中的所有任务时使用的最少时间与算法实际调度长度的比值.调度算法产生的加速比越大,说明容错算法越高效,加速比计算公式为5.3实验结果及分析实验1.针对多个DAG样本,探究它在不同的可靠性目标ω和不同的任务复制策略条件下,系统最终所获取的实际可靠性值和为此而付出的可靠性代价.本次实验从样本空间中随机选取20个DAG,并设定系统的可靠性目标ω在0.80~0.99区间变化,以0.01递增.取100次实验所得数据的平均值作为最终的仿真结果.实验结果如图3和图4所示.图33种复制策略的可靠性值随目标值的变化比较Page10图43种复制策略的可靠性代价随可靠性目标的变化比较图3表示利用3种任务复制策略进行容错设计之后最终所得的可靠性值与用户设定的可靠性目标之间的关系.从图中可以看出,运用3种容错策略均能使系统可靠性目标得到满足.其中,利用盲目的复制策略最终得到的可靠性值最大,这是因为较之另外两种策略,它缺乏有效的分析而盲目地运用了大量的冗余任务副版.另外,经济的任务复制策略与贪婪的任务复制策略得到的结果较为接近.但随着系统可靠性目标的不断提高,运用3种策略所得到的可靠性值之间差距逐渐缩小.也就是说,当对系统可靠性要求较高时,盲目复制策略在最终得到可靠性值较大方面的优势在减弱.图4表示DAG在不同的可靠性目标和任务复制策略下,为满足可靠性目标而付出的可靠性代价.从图中可以看出,随着系统可靠性目标的变大,3种复制策略所付出的可靠性代价都在增长,这是因为需增加任务副版数目以满足可靠性需求的增长.但是在同一个可靠性目标下,本文所提出的经济的任务复制策略所付出的可靠性代价最低,贪婪的复制策略次之,盲目的任务复制策略的可靠性代价最大.另外,对照图3与图4,可以看出当系统可靠性目标值较大时,特别是当ω=0.99时,3种复制策略最终所得到的可靠性值均满足目标且相差无几,但是盲目的任务复制策略付出了最大的可靠性代价,而本文所提出的经济的任务复制策略可靠性代价最低.这是因为它是在对系统可靠性建模的基础上,兼顾不同的任务对系统可靠性的贡献与所带来的可靠性开销之间的关系,然后做出任务复制选择.可见本文所提出的算法较之以往算法能够在一定程度上降低可靠性代价.实验2.假定用户对系统的可靠性目标ω=0.99,评估任务数量规模不同的DAG在相同的可靠性目标条件下,分别采用以上3种任务复制策略所付出的可靠性代价.本次实验中系统规模,即DAG任数在10~150之间变化.实验结果如图5所示.图53种复制策略的可靠性代价随DAG任务数的变化比较由图5可看出当DAG任务规模增大时,可靠性代价值也在增大.这是由于系统中含有的任务数量规模增加,会导致任务副版集合的增大,故而需要更多的计算资源来运行这些任务.但从图中可以看出,无论DAG规模为多少,本文所提出的基于经济任务复制策略的容错算法对应的可靠性代价最少,大约是盲目的任务复制策略所带来的可靠性代价的60%.实验3.假定用户对系统的可靠性目标ω=0.99,评估任务数量规模不同的DAG在相同的可靠性目标条件下,分别采用以上3种任务复制策略所产生的的加速比.本次实验中系统规模,即DAG任务数量在10~150之间变化.实验结果如图6所示.图63种复制策略的平均加速比随DAG任务数的变化比较由图6可看出,当DAG任务规模增大时,加速比也在增大,本文所提出的基于经济任务复制策略的容错算法对应的加速比最大,贪婪复制策略次之,大约分别是盲目的任务复制策略所带来的加速比的1.2和1.3倍左右.这是因为随着DAG任务规模增大,经济任务复制策略复制的副版任务比盲目复制策略要少,因此相比调度长度更短,从而加速比更高.Page11实验4.随机实验.实验目的是对一个DAG分别运用基于以上3种复制策略的容错算法,获取它在可靠性目标ω=0.99的条件下,各个任务对应的复制次数以及所选择处理器情况.本次实验从样本空间中随机选择3个DAG,并以之为例验证算法功能的有效性.本次随机实验中,随机从样本空间中选择了分别含有8个、5个和12个任务的DAG.每个任务在不同的策略下对应的任务版本数如图7、图8和图9所示.这次试验中盲目的任务复制策略带来的可靠性代价为4513,贪婪的任务复制策略对应的可靠性代价是3171,经济的任务复制策略最少,可靠性代价是3046.各个DAG内采用经济任务策略情况下,任务所分配的处理器如表4所示.任务序号G1_1G1_2G1_3√G1_4√√√√G1_5√G1_6G1_7G1_8G2_1√√√G2_2G2_3√√√√G2_4G2_5G3_1G3_2G3_3G3_4G3_5G3_6√G3_7G3_8G3_9G3_10G3_11G3_12以上4次实验的结果表明,本文所提出的DAG任务启发式动态复制容错方法可以根据用户设定的可靠性目标有效地为任务动态地生成任务版本数,为之分配处理器;并且在达到可靠性目标的同时,经济任务复制策略和贪婪任务复制策略在可靠性代价方面分别是盲目策略算法的60%和70%左右.实验5.与MaxRe[13]算法的DAG可靠性模型在可靠性及可靠性代价方面的比较.图10为在基于经济复制策略的情况下,可靠性值随可靠性目标变化的趋势图.可以看出,本文提出的OPDFT算法采用的DAG可靠性模型相比MaxRe在可靠性目标一定的情况下,具有更高的可靠性值.图10经济复制策略下实际可靠性值随目标值的变化比较Page12图11表示在经济复制策略下,DAG在不同的可靠性目标下,为满足可靠性目标而付出的可靠性代价.从图中可以看出,随着系统可靠性目标的增大,本文所提出的DAG可靠性模型所付出的可靠性代价在最坏情况也仅为MaxRe算法的80%左右.图11经济复制策略下可靠性代价随可靠性目标值的变化比较由于本文从任务优先级约束和可靠性贡献因式出发,建立更加精确的可靠性模型,因而具有更好的系统可靠性值和更低的可靠性代价.实验6.考虑真实汽车电子环境下,端到端最差响应时间(Worst-CaseResponseTime,WCRT)[19]随消息数变化的情况.在汽车电子系统中,消息集的WCRT定义为消息集的第一个消息所分配的ECU触发就绪到传输完毕到达最后一个消息所在ECU节点之间的时间段,WCRT越短,说明加速比越高,算法越高效.本文采用日本名古屋大学嵌入式系统研究中心提供的单个CAN网络环境下的包括65个消息任务,并被分配到14个ECU之中的真实消息任务集[19].基于经济复制策略,实验结果如图12所示,从结果可以看出,OPDFT的WRCT相比MaxRe要短,最好情况下优于MaxRe算法30%以上.图12经济复制策略下WCRT随任务消息数的变化比较6总结本文面向异构分布式计算系统领域进行容错研究,以经典DAG任务模型为基础,在对DAG任务进行可靠性分析的基础上,提出了DAG的可靠性模型并进行了证明和实例验证;然后利用主动任务复制容错方式,给出了系统可靠性的约束条件以及可靠性代价的计算方法,并提出了一种计算DAG任务复制次数下限值算法;接着分别提出以降低可靠性代价为目标的贪婪的任务复制策略和经济的任务复制策略算法,在一定程度上降低了对任务的盲目复制;接着通过结合上述3个算法,给出了DAG可选策略的容错调度算法;最后利用仿真实验将本文提出的算法与盲目复制策略进行比较,结果表明本文所提出的算法可精确量化任务复制个数,在满足系统的可靠性目标的前提下付出更少的可靠性代价并具有更好的调度性能.致谢在此,向湖南大学嵌入式与网络计算重点实验室李仁发教授领导的高性能嵌入式计算讨论班和国家超级计算长沙中心异构并行系统高性能研究组的专家、老师、工程师和同学所提出的意见和建议表示感谢,向本文的审稿专家致以深深的谢意!
