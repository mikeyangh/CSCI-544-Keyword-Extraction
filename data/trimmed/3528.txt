Page1基于排队Petri网的服务系统性能建模与分析方法顾军1),2)罗军舟1)曹玖新1)李伟1)1)(东南大学计算机科学与工程学院南京211189)2)(中国矿业大学计算机科学与技术学院江苏徐州221116)摘要如何有效评估服务系统的性能表现是解决服务对动态网络环境适配性的关键.然而,基于互联网的服务系统的规模尺度和复杂程度不断提高,使得服务系统的性能建模和分析越来越困难.通过分析服务系统的执行过程,提出了一种基于排队Petri网的性能建模和分析方法.该方法将服务系统运行过程分为服务准备和服务提供两个阶段.服务准备阶段被建模为多层Web系统,刻画了浏览、选择、组合和注册4种行为的性能表现.服务提供阶段被建模为组合服务,重点讨论了交互关系、节点失效和恢复机制对组合服务执行性能的影响,并在此基础上建立组合服务在集中和分散两种执行方式下的性能模型.最后,采用QPME工具仿真和比较提出的模型在不同配置下的性能表现.结果表明,该方法在定量评估服务系统性能时具有一定的优越性.关键词排队Petri网;服务系统;组合服务;性能;失效1引言面向服务的信息处理系统以服务为构造单元,强调软件的松耦合、可重用、易组合和动态优化[1],能够有效解决互联网环境下的数据、资源和系统集成问题.随着面向服务应用的普及,服务系统开发、部署、运行和维护的网络环境逐渐从封闭、静态、可控走向开放、动态、难控.网络环境的动态性和不可预知性要求服务系统必须能够适应及处理各种变化,实现和增强服务对环境的适配能力,提升信息服务质量,即解决服务对环境的适配性问题.为此,首先必须对具有动态变化特性的服务系统的运行状态进行评估,通过建立服务系统的性能模型,预测环境变化对服务系统运行性能的影响,判定服务对环境能否适配,进而开展服务适配机制和方法的研究,增强服务的适配能力.然而,面向服务的系统以可共享与可集成的自治网络资源为基础,往往包括众多协同工作的服务器或设备,加上用户需求的多样性和不确定性,使得服务系统不论在规模尺度还是复杂程度上都远远超过传统的软件系统,增加了系统性能建模和分析的难度[2].事实上,随着面向服务应用的普及,服务系统的边界、复杂性瓶颈和非功能性要求悄然发生了质的变化,规模的扩大化使得直接建模变得非常困难.Dai等人[3-4]的研究表明分析网格服务的性能和可靠性比针对整个网格更可行,也更有实际意义.我们认为服务系统的性能对外表现为向用户提供服务的能力,即服务的执行能力.为了更好地满足用户的需求,往往选择现有的一组服务按照一定的业务逻辑以组合服务的形式执行,而每类服务使用的资源规模和数量都是有限和可描述的.因此,只要能够从服务执行过程中抽象出具有共性的执行模型,就可以完成服务性能模型的建立和分析,并进而评估整个系统的性能.此外,互联网环境下的服务系统中,资源故障和组件失效的情况比较普遍.如果不考虑系统的失效行为,仅仅从纯性能的角度去分析会显得过于乐观.因此,本文将通过研究失效影响下的服务系统执行过程和性能表现,探索具有通用性的服务系统性能建模和分析方法.为了预测各种性能指标,排队论、随机Petri网、随机进程代数等方法常被用作形式化建模和分析工具,建立反映系统行为和性质的数学模型[5].排队论(queuingtheory)[6],也称随机服务系统理论,是通过对服务对象到来及服务时间的统计研究,得出这些数量指标(等待时间、排队长度、忙期长短等)的统计规律,然后根据这些规律来改进服务系统的结构或重新组织被服务对象,使得服务系统既能满足服务对象的需要,又能使系统的费用最经济或某些指标最优.随机Petri网[7]以研究模型系统的组织结构和动态行为为目标,着眼于系统中可能发生的各种状态变化以及变化之间的关系.Petri网作为一种图形化建模工具和一种具有丰富数学基础的形式化模型,可以广泛应用于描述和研究并发、异步和分布式特征的系统.因此,随机Petri网非常适合描述松耦合的分布式服务系统.排队Petri网(QueueingPetriNets,QPN)[8]继承和发展了排队网模型和随机Petri网的优点,既能定量地建模资源的运行性能,也可以刻画多层系统之间的依赖关系.Kounev等人[9-11]的研究工作表明排队Petri网具有很强的定量评价能力和行为描述能力,能很好地对分布式系统和网格系统进行建模和模拟,可用于系统的性能预测、能力规划和在线性能管理.因此,本文将在排队Petri网的系统模型框架上采用图形化的方式完成服务系统的性能建模.本文第2节分析服务系统的运行过程,将其划分为服务准备和服务提供两个阶段,并给出组合服务的集中执行和分散执行两种方式;第3节给出服务系统的形式化描述,设计失效恢复影响下服务器节点的QPN模型,讨论满足时间约束和自动化要求的服务交互关系Petri网描述方法,并在此基础上对服务准备阶段、组合服务集中执行和组合服务分散执行3种情况下的性能进行建模;第4节给出仿真实验和数据分析;第5节介绍相关工作;最后,第6节总结全文并提出下一步工作.2服务系统运行过程分析服务系统本质上是大量服务的集合,每个服务都驻留在一定的自治软硬件资源上,通过相关协议实现服务的发布、交互和组合,并协调多个服务提供者(providers)的行为,以便为消费者(consumers)提供增值服务.本文在面向服务架构(ServiceOrientedArchitecture,SOA)[1]的基础上提出服务系统的一般性运行模式(如图1所示),可以分为服务准备(servicepreparing)和服务提供(serviceproviding)两个阶段.在服务准备阶段,服务门户(serviceportal)、Page3服务代理(ServiceBroker,SB)[12]和服务注册库(serviceregistry)共同完成服务请求的接纳、服务的选择和组合、服务提供方案的确定、服务注册信息的登记和更新等.为了提高处理能力,常常对这些功能部件的软硬件进行冗余处理.在服务提供阶段,服务请求将按照已形成的组合服务方案,构建服务执行环境(serviceexecutionenvironment),完成服务的调度、分配、绑定和执行,最后将服务结果反馈给消费者.服务准备阶段注册的服务信息、确定的服务方案都是信息服务提供阶段得以实施的前提和基础,而服务提供阶段的实际运行效果又是对服务准备阶段工作成效的评测与验证,两者组成了一个完整的服务系统,为服务消费者和服务提供者提供了交互的平台.服务准备阶段的服务门户、服务代理和服务注册库等部件的性能会影响服务消费者和服务提供者的访问规模、对请求的应答时延和访问成功率等;而服务提供阶段的执行环境由分布的多个服务提供者的运行环境组成,单个服务的性能以及多个服务图2服务准备阶段的执行图在服务提供阶段,单一服务或者组合服务在服务代理的调度下开始执行.在服务执行环境NE中,子服务Si驻留在节点Nk上执行.服务与节点之间可以是一对一或者多对一的关系,即允许一个节点运行一个或者多个子服务.在应用需求驱动下,服务环境NE中的部分服务提供者的节点和服务将被选交互后的综合性能对系统性能影响很大.服务准备阶段和服务提供阶段以服务为联系纽带,形成一种松耦合的结构,因此本文从服务准备和服务提供两个阶段对服务系统进行建模.服务准备阶段的运行过程和系统所能提供的业务流程种类、每类业务包含的功能数量以及消费者的行为有关.比如系统对外提供n项业务{BP1,BP2,…,BPn},其中业务BPi包括mi个功能.每个功能的实现都可以由多个候选的服务提供者(serviceproviders)负责,因此需要在服务注册库中为每个功能查找符合业务功能和非功能要求的服务S,形成具有不同QoS属性的组合服务,并从中确定最终解决方案.在实际执行过程中,系统并不需要为每个消费者都执行服务选择和组合.此外,服务提供者也需要访问服务准备系统进行服务信息的注册和更新.因此,我们将系统的处理行为分为4类:(1)消费者只是一般性的浏览,并不提交服务请求;(2)消费者提交服务请求,从系统推荐的组合服务方案中选择一个去执行;(3)消费者提交服务请求,启动新组合服务方案的生成;(4)服务提供者注册或更新服务信息.每个处理行为都包括若干个操作,如图2所示,nj表示某个操作的执行次数.比如,Browse包括(n1+4)个操作,Select包括(n2+4)个操作,Composite包括(mi+5)个操作,Register包括(n3+4)个操作.虚线方框的操作属于服务提供阶段的处理工作.择,并按服务组合方案形成组合服务协同工作以满足用户需求.为此,本文引入服务覆盖网(serviceoverlaynetwork)的概念对组合服务执行环境进行描述,如图3所示.服务链路表示节点之间的逻辑通道,可以是由多条物理链路组成.Page4图3组合服务执行环境多层次、具有高可扩展性的服务组合为用户和提供商提高运行效率提供了极大便利.文献[13]的研究表明,引起系统复杂行为的主要原因不是元件的数量而是元件之间的交互,只要能保持系统元件之间交互的基本性质,那么即使对系统加以简化,系统的基本特性也不会改变.为此,本文对组合服务的交互关系定义如下.定义1.顺序关系(sequential).服务Si执行完毕后,Sj才开始执行,记作Si>Sj.定义2.重复关系(iterative).服务Si重复执行k次,记作μSi(k).定义3.并发关系(parallel).服务Si和Sj相互独立执行,记作Si|Sj.并发后又有合并和不合并两种情况.定义4.容错关系(fault-tolerant).服务Si和Sj提供相同的服务应用,在工作服务发生失效且不可恢复时,可以用备份服务来代替而使应用能够维持正常工作,记作Si定义5.条件关系(conditional).前驱服务执行完毕后,按照一定的条件概率选择Si和Sj中的一个开始执行,记作Si(p)+Sj(1-p).假设图3执行环境中有服务流程如图4所示.S1.1称为(S2.1+S3.2)的前驱服务,(S2.1+S3.2)称为S1.1的后继服务(集).起始服务S1.1执行后按照一定的条件选择S2.1和S3.2中的一个来执行.其中,S2.1被前驱服务(集)选中执行的概率为p,S3.2被选中的概率为(1-p).服务S4.1以重复方式连续执行k次后进入容错服务集(S5.1后各自独立执行,只要有一个完成就可以调用后继服务(集).并发执行的S7.1和S8.2必须先合并后再调用后继服务S1.2.因此,业务流程可以形式化为“S1.1>(S2.1(p)+S3.2(1-p))>μS4.1(k)>组合服务的执行主要有两种方式[14-15].集中执行(centralizedexecution)方式需要控制中心完成所有服务的调用和数据传输,服务之间不直接交互,实现简单但存在性能瓶颈,只适合小规模的服务系统.分散执行(decentralizedexecution)方式允许服务之间按照业务流程需要直接交互和传输数据,有利于减少通信成本、提高组合服务的吞吐量,适合构建大规模的服务系统.图4的组合服务业务流程示例在不同执行方式下的结构如图5所示.3服务系统的性能建模3.1服务系统的形式化描述排队Petri网(QPN)结合了排队网络、有色PetriPage5I+,M0,Q,W),其中p|P|);t|T|);网(ColoredPetriNets,CPNs)、随机Petri网(Gen-eralizedStochasticPetriNets,GSPNs)的功能特性.在这里我们假定读者具有随机Petri网、排队网络和系统性能评价的基本知识.对此不熟悉的读者可以参阅文献[7].下面给出排队Petri网QPN的形式化定义,其余概念见文献[8-9,16].定义6.QPN是一个8元组(P,T,C,I-,①P是非空有限库所(places)集合(p1,p2,…,②T是非空有限变迁(transitions)集合(t1,t2,…,③P∩T=;④C为颜色函数,C:P∪T→∑C把每个库所p都映射到一个颜色集C(p),把每个变迁t都映射到一个颜色集C(t),也就是说p和t中的每个托肯(token)都属于颜色类型;⑤I-,I+分别是P×T上的后向和前向关联函数,使得对所有(p,t)∈P×T有I-,(p,t),I+,(p,t):C(t)→C(p)MS;⑥M0称为CPN的初始标识,对于所有p∈P⑦Q=(珟Q1,珟Q2,(q1,q2,…,q|P|)),其中珟Q1P表示时间队列库所;珟Q2P表示瞬时队列库所,且珟Q1∩珟Q2=;如果库所pi是队列库所,那么qi表示具有C(pi)中所有颜色的队列;如果库所pi是普通库所,那么qi等价于关键字“null”.⑧W=(珮W1,珮W2,(w1,w2,…,w|T|)),其中珮W1T表示时间变迁;珮W2T表示瞬时变迁,且T=珮W1∪珮W2,珮W1∩wi∈[C(ti)珮W2=;有:如果ti是时间变迁,那么wi(c)描述了与颜色c有关的变迁触发时延的概率分布函数;如果ti是瞬时变迁,那么wi(c)描述了与颜色c有关的变迁触发频率的权值.由此可见,排队Petri网模型的结构元素包括队列库所(queueingplace)、普通库所(ordinaryplace)、时间变迁(timedtransition)、瞬时变迁(immediatetransition)、弧(arc)和颜色托肯(colortoken).队列库所用于描述具有随机服务特征的业务处理行为,包括队列(queue)和贮存库(depository)两部分;普都有M0(p)∈C(p)MS.通库所用于描述可能的系统局部状态(条件或状况);时间变迁用于描述具有时延特征的改变系统状态的事件;瞬时变迁用于描述系统状态改变的事件;弧用于规定局部状态和事件之间的关系;颜色托肯用于描述不同类型的服务实例.从软硬件配置的角度看,服务准备阶段可以建模为一个多层系统(multi-tiersystem),包括负载均衡器(loadbalancermachine)、应用服务器集群(applicationserverclusters)和数据库服务器(data-baseservers).其中应用服务器处理Web业务逻辑和服务组合,数据库服务器处理Web数据访问和服务注册库处理.服务准备阶段的形式化定义如下.定义7.服务准备阶段是一个四元组,即MS=(MQ,V,P,SH),其中①MQ={MQ1,MQ2,…,MQM}是多层服务器集,其中MQi是第i层服务器集,可以包含多个并发运行的服务器,每个服务器都可以建模为一个队列库所;②V={V1,V2,…,VM}是服务器访问速率集,其中Vi是第i层服务器集的访问比率(visitratio),即到达MQi的平均访问数目,可用于计算队列的到达率λ;③P={p1,p2,…,pM}是多层服务器之间的变迁概率集,其中由MQi返回MQi-1的概率是pi,由MQi到MQi+1的概率是(1-pi);④SH={SH1,SH2,…,SHM}是每层服务器集内部的调度策略(scheduledispline),如随机调度法、负载均衡法、优先级调度法等.在服务提供阶段,由于服务系统的分布性和异构性,失效的发生不可避免.所谓服务失效是服务节点软硬件运行行为对消费者需求的偏离,是服务系统的一个动态特征.服务节点发生失效后将会停止工作直到失效被恢复,即当服务器节点遇到大量的突发请求、用户误操作、CPU资源短时衰竭、网络瞬时堵塞、临时中断、恶意的入侵攻击或网络错误等可修复故障时,通过恢复策略解决服务遇到失效而被迫终止的问题.因此,服务提供阶段的形式化定义如下.定义8.服务提供阶段是一个七元组,即DS=(N,S,CL,IS,NS,RN,RL):①N,S,CL分别是有限节点集、可用服务集和服务链路集,其中服务链路是对跨地域网络基础设施的虚拟化,屏蔽了实际的网络拓扑和通信细节;②IS:N×N→{>,μ,|,--,+}是节点间的交Page6互关系函数,其中>,μ,|,--,+分别表示顺序、重复、并发、容错和条件关系;③NS:N→S是节点的可用服务函数,NS(Ni)=Si={Si,1,Si,2,…,Si,m}表示节点Ni的可用服务集,其中Si,j是节点Ni的第j个可用服务;④RN:N→(0,1)是节点成功运行不失效的概率,RL:CL→(0,1)是链路成功通信不失效的概率,根据实际情况,节点和链路的成功概率不为1.在不确定的、复杂的各种外部因素的影响下,服务系统不可能永远稳定、可靠地运行.分析服务系统的性能先要建立系统的性能模型,而建立服务系统的性能模型可以从以下几个方面入手:首先要建立系统节点的性能模型,它描述了理想无失效发生时节点的结构和性能情况;二是对可能出现失效的节图6服务准备阶段的QPN表示为了方便讨论建模方法,本文假设服务准备阶段只提供两项业务{BP1,BP2},包括的功能个数分别为m1和m2.为此,服务准备阶段执行时包含5类处理行为,且每类都包含若干操作.其中,托肯“B”表示Browse行为,由n1个操作“b”组成;托肯“L”表示Select行为,由n2个操作“l”组成;托肯“C1”表示业务BP1的Composite行为,由m1个操作“c1”组成;托肯“C2”表示业务BP2的Composite行为,由m2个操作“c2”组成;托肯“R”表示Register行为,由n3个操作“r”组成.为了简化模型表示的复杂,对符号含义规定如下:(1)符号“U”描述托肯“B”,“L”,“C1”或“C2”,表示消费者的一个行为.(2)符号“u”描述托肯“b”,“l”,“c1”或“c2”,表示消费者行为的一个操作.(3)符号“o”描述托肯“r”,“b”,“l”,“c1”或“c2”,表示消费者或提供者的一个操作.服务准备阶段模型的执行过程如下:点资源建立失效模型和恢复模型,它用来描述节点失效的过程及失效后的反应.这其中引起节点失效的原因很多,可能是节点自身设计的问题、管理或操作中的问题,也可能是由于外来恶性攻击而造成的;三是将前面的两者结合建立考虑失效恢复的节点性能模型;最后建立包含多种交互关系和不同执行方式的系统性能模型,它描述了在一个特定的业务流程结构中某些节点失效后对整个系统所带来的影响,根据性能模型计算各种性能参数,就可综合分析一个服务系统的性能状态.3.2建模服务准备阶段服务准备阶段的QPN图形化模型如图6所示.其中,黑色方框图代表瞬时变迁,圆圈表示普通库所,带有竖线的圆圈表示队列库所.(1)库所Q1(G/M//IS队列)建模消费者请求的发生,托肯“U”(“B”,“L”,“C1”或“C2”)的初始数量反映了并发请求的规模,间隔时间满足指数分布.库所Q2(G/M//IS队列)建模提供者请求的发生,托肯“R”的初始数量反映了请求的规模,间隔时间满足指数分布.(2)消费者发出请求,触发变迁t1销毁Q1中的一个托肯“U”,同时在库所P1中创建一个托肯“u”,表明消费者行为的第1个操作准备执行.提供者发出请求,触发变迁t0销毁Q2中的一个托肯“R”,同时在库所P1中创建一个托肯“r”,表明提供者行为的第一个操作准备执行.(3)库所LB(G/M/1/PS队列)建模负载均衡器,普通库所T建模负载均衡器线程池.当请求“o”被LB调度时,将从T中分配一个托肯“t”;当请求“o”成功调度后将把托肯“t”返回给T.如果T中没有可用托肯“t”时,请求“o”只能在P1中等待新的线程托肯“t”的出现.T中托肯“t”的初始数量决定了Page7可用线程的数目.(4)变迁t11,t12,…,t10+j的触发概率相同,因此被LB成功调度的请求“o”将等概率地从库所P2移入j个应用服务器CPU库所中的一个,如APi(G/M/1/PS队列).(5)托肯“o”从APi进入库所P3,接着被等概率地移入k个数据库服务器CPU库所中的一个,如DSi(G/M/1/PS队列).(6)库所DSi处理完的托肯“o”将被移入数据库磁盘库所H(G/M/1/PS队列).完成磁盘访问后,托肯“o”的处理有5种情况:(6.1)变迁t4将托肯“b”或“l”移入库所P1,开始下一个Web访问操作.(6.2)变迁t4将托肯“c1”或“c2”移入库所P2,开表1服务准备阶段中t4和t5以外的变迁触发模式变迁t0t1t2变迁t4和t5的变迁模式如表2所示.为了对各类处理行为进行准确评估,必须合理设置这些变迁模式的触发权值,以保证只有当所有操作完成后才能结束这类处理.对于变迁t5来讲,根据图2(d)的描述,Register包括(n3+4)个操作,即每完成(n3+4)个操作就完成一个处理行为.为此,可以设表2服务准备阶段中狋4和狋5的变迁触发模式变迁t4t5变迁t4的情况要复杂一些.根据图2的描述,Browse包括(n1+4)个操作,Select包括(n2+4)个操作,BP1的Composite包括(m1+5)个操作,BP2始下一个服务注册库访问操作.(6.3)消费者行为的所有操作都完成后,从Q1中移出的托肯“U”返回到Q1中.(6.4)变迁t5将托肯r移入库所P2,开始下一个服务注册操作.(6.5)提供者Register行为的所有操作完成后,从Q2中移出的托肯“R”返回到Q2中.图6中除t4和t5之外的变迁描述如表1所示.符号“A{x}→B{y}”表示模型中变迁的触发模式(firingmode),托肯“x”在一次变迁中由库所A迁出后以“y”的形式存放在库所B中.In和Out表示变迁的输入和输出库所.每个变迁的触发权值(firingweight)都相同,设为1.变迁t3置变迁t5的模式1和2的触发权值分别为(n3+3)/(n3+4)和1/(n3+4).这样,当有(n3+4)个托肯“r”进入库所H后,变迁t5的模式1平均触发(n3+3)次,而模式2平均触发1次.虽然不能保证其触发顺序,但资源消耗和队列行为方面与真实系统非常接近.的Composite包括(m2+5)个操作.令变迁t4的8个模式的触发权值为w(i),其中i=1,2,…,8.权值的设置步骤如下:Page8(1)令w(1)+w(2)=w(3)+w(4)=w(5)+w(6)=w(7)+w(8),从而保证4个消费者处理行为的发生概率相等.(2)令mw=max{n1+4,n2+4,m1+5,m2+5},即取操作数目的最大值.(3)按照以下公式计算各个模式的权值.3.3建模服务提供阶段3.3.1考虑失效恢复的服务节点根据失效对服务节点影响的不同,可以分为通信失效和计算失效两大类.通信失效使得节点停止接收新的任务请求,同时停止将完成的任务输出,等到失效修复后将恢复到正常的任务输入和输出状态.计算失效使得服务任务在节点的生命周期分为有效执行和失效恢复2个阶段.在有效执行阶段,服务任务持续进入节点,完成后进入下一个执行环节.在失效恢复阶段,节点启动服务恢复程序进行处理.当然,失效恢复具有一定的概率,即失效可以恢复时,恢复后的服务从失效断点继续执行,直到遇到不可恢复的失效或者服务Si执行完毕;反之,失效不可恢复,Si被迫终止,在该节点的任务执行宣告失败[15].因此,在建模服务系统的性能模型时需要考虑服务节点的失效和恢复对服务性能的影响.为了更好地描述服务节点的性能表现,本文的分析满足以下假设:(1)用户任务请求的到达率与节点的状态是独立的且服从泊松分布,这个假设在已有的关于失效对性能影响的研究工作中被广泛使用[17-18];率服从泊松分布;(2)通信失效和计算失效独立发生,失效发生(3)每个服务节点都存在一个有限长度的队列来处理所有的服务请求;效执行时间服从指数分布;成,所以假设失效恢复时间服从指数分布;(4)所有节点被调用后立即执行,并且其无失(5)由于失效恢复主要通过执行恢复程序完(6)因通信失效而丢失的服务任务将会继续发送给服务节点.服务提供阶段的服务节点的QPN模型如图7所示.队列库所F1(G/M//IS)代表通信失效的发生,按照一定失效发生率λf1输出托肯“f1”,失效间隔时间服从λf1的指数分布.通信失效发生后进入修复阶段,用队列库所R(G/M/1/PS)建模失效恢复时间.NP建模服务节点处理环节,包含一个G/M/n/PS队列,可以模拟具有n个CPU的服务节点工作负载.队列库所F2(G/M//IS)代表计算失效的发生,按照一定失效发生率λf2输出托肯“f2”,失效间隔时间服从λf2的指数分布.发生计算失效的服务将以托肯“s”或“w”的形式回送到库所NP中,启动恢复程序,进入计算失效恢复处理阶段.由于服务的共享性与重用性,服务提供者的服务节点上往往运行着多类服务任务,这些额外负载会影响服务任务的性能,而失效对这些额外负载的影响也是一样的.代表前驱服务(集)的库所Input向服务节点NP输入任务托肯“s”,库所EW产生服务任务“s”之外的工作负载“w”.库所A1中包含3个控制托肯(“a1”,“a2”和“d”),其取值在0和1之间切换,0表示托肯不存在,禁止变迁触发,1表示托肯存在,允许变迁触发.在未发生通信失效,即变迁ft1未触发时,库所A1中只包含托肯“a1”和“a2”各一个,其中“a1”用于控制服务节点的输入,即变迁nt3的触发,“a2”用于控制服务节点的输出,即变迁nt5的触发.如果新任务到达时没有发生通信失效,那么变迁nt3触发模式1和模式2将新到的托肯“s”和“w”移入队列库所NP中,任务完成后将输出到下一个Page9环节,即触发变迁nt5的模式1和模式2.如果发生通信失效,即变迁ft1触发,将托肯“a1”和“a2”从库所A1中移出,同时在A1中创建托肯“d”,在队列库所R中创建托肯“r”.托肯“a1”的移出使得变迁nt3的触发模式1和模式2被禁止;托肯“a2”的移出使得变迁nt5的触发模式1和模式2被禁止;托肯“d”的创建使得变迁nt3的模式3和模式4被触发,销毁新到的托肯“s”和“w”;托肯“r”的创建使得通信环节进入修复阶段,等到修复成功,即变迁ft3触发,将会在库所A1中创建托肯“a1”和“a2”各一个,在队列库所F1中创建托肯“f1”,同时销毁库所A1中的托肯“d”,服务节点进入新的失效间隔阶段.计算失效和通信失效独立发生,且对服务任务的影响是个体性的,即计算失效的一次发生只会使当前从库所NP中输出的任务托肯“s”或“w”转变为托肯“s”或“w”,然后回送到库所NP中.如果失效恢复成功,那么托肯“s”移入库所CP后直接输表3服务节点中的变迁触发模式变迁nt11:Input{s}→AP{s}nt3ft11:F1{f1}+A1{a1}+A1{a2}→R{r}+A1{d}ft21:F2{f2}→F2{f2}+A2{f2}ft31:R{r}+A1{d}→F1{f1}+A1{a1}+A1{a2}ft41:A2{f2}+NP{s}→NP{s}3.3.2服务交互的Petri网表示通过Petri网的变迁触发机制的设计可以描述服务组合中存在的多种交互关系,如图8所示.然而这只是对交互关系的静态描述,并没有考虑实际执行过程的时间约束、失效影响和自动化要求.顺序重复关系需要预设重复次数k,确保在重复执行次数满足后才进入到后继服务(集),并且自动设图8服务交互关系的Petri网表示出到库所Output.如果失效恢复不成功,那么托肯“s”将被移入库所Fail中.如果服务有冗余容错处理环节,那么托肯“s”将被送入备份工作部件中,否则被销毁,即服务失败终止.变迁ft5属于自由选择冲突模型,选择哪一个变迁模式实施并不依赖于库所中的标识,而取决于变迁模式的触发权值(firingweight),即发生的概率.令变迁ft5的4个变迁模式的触发权值为w(i),i=1,2,3,4.服务任务“s”的失效恢复成功概率为φs,服务任务“w”的失效恢复成功概率为φw,那么它们之间的关系如下:图7中的变迁描述如表3所示.符号“A{x}→{}”表示“x”在变迁中由库所A迁出后不留在任何库所中,而是被销毁(destroy).变迁nt21:EW{w}→AP{w}nt41:NP{s}→CP{s}nt51:CP{s}+A1{a2}→Output{s}+A1{a2}ft5和条件交互关系下的任务执行是独立和一次性的,即只要业务流程中规定的前驱服务(集)能够完成,随后就会启动这两类交互,其触发条件是确定的,因此在系统建模中的描述方法和图8一致.置下一次重复次数.从运行过程分析,重复交互可以看作具有k个操作的处理过程.但是,从失效影响来Page10看,对于通信失效,按照假设(6)可以通过任务的重发来解决;对于计算失效,一个操作的失效就意味着整个重复关系的失败,如图9(a)所示.当有一个服图9重复、并发和容错关系节点的QPN模型列的处理行为.3.3.3组合服务集中执行的性能模型业务流程“S1.1>(S2.1(p)+S3.2(1-p))>μS4.1(k)>(S5.1含多种交互关系,但可以分解为6个顺序执行的服务(集).用托肯“S”表示这个组合服务,“z1”表示S1.1,“z2”表示S2.1(p)+S3.2(1-p),“z3”表示μS4.1(k),“z4”表示(S5.1示S1.2,“z7”表示处理组合服务的执行结果.当组合服务“S”以集中方式执行时,服务代理SB将从“z1”开始依次调用服务(集)“zi”.当托肯“zi”回到SB时,SB将开始调用“zi+1”表示的服务(集),直到“z7”完成为止.为了简化模型表示,规定符号“z”表示托肯“z1”,“z2”,…,“z6”,或“z7”.组合服务“S”集中执行场景对应的QPN模型如图10所示.容错关系是在对失效服务采取修复措施外,增加冗余备份资源以提高系统可用性最常用的策略之一.这样可以使系统在出现故障的时候仍能维持正常功能,当工作部件发生不可恢复的故障后,可以用备份部件来代替有故障的部件而使系统能够维持正常工作.按备份部件所处状态的不同,冗余备份系统主要有3种形式:冷备份、温备份和热备份.冷备份是指备用部件处于完全不工作状态,并假设它的失效率为零.温备份系统指备用部件与主部件处于完全相同的工作状态下,但备用部件相对于主部件处于轻载荷工作状态,其失效率较主部件的小,而在热备份系统中,两者的失效率相同[19].在实际的服务系统中可根据服务提供者管理策略的不同设置不同的冗余容错结构,如图9(c)所示.主节点N中没有失效或者失效修复成功的服务任务将通过变迁fu1输出到下一个环节Output,由于通信失效而被主节点N丢失的服务任务将通过变迁fu3输送到备用节点N中,由于计算失效而失效且修复不成功的服务任务将通过变迁fu2输送到备用节点N中.备用节点N中的服务任务按照图7的方式工作.容错关系对服务任务的响应时间影响不大,但可以提高服务可用性.此外,在开放的网络环境中,服务交互关系既和业务逻辑有关,也和服务驻留的节点位置有关.当服务与节点之间是一对一关系,即一个节点只运行一类服务时,服务交互和节点交互是一致的,描述也比较简单.当服务与节点之间是多对一关系,即一个节点运行多类服务时,同样的两个节点在业务流程的不同执行阶段可能按照不同的方式进行交互.图3的组合服务执行环境中有9个服务节点提供了15类服务,其中有3个节点属于单类服务队列,6个节点属于两类服务队列.为此,我们用“sj”作为节点Ni的第j个服务Si,j的托肯符号,以便描述节点队务任务“s”恢复不成功时,将会触发变迁it,销毁(k-1)个托肯“s”,节点N的内部细节如图7所示.执行过程如下:(1)队列库所CQ(G/M//IS)建模组合服务执行请求的到达,托肯“S”的到达速率反映了服务请求的频度.队列库所CB(G/M/1/PS)建模服务代理,完成服务调用和最终结果处理.变迁ct1触发后将销毁库所CS中的一个托肯“S”,同时在CB中创建托肯“z1”,准备调用“z1”表示的服务S1.1.(2)变迁ct2触发后在库所SE中创建托肯“s1”,调用节点N1的服务S1.1.变迁ct1销毁N1输出的托肯“s1”,在库所CB中创建一个托肯“z2”,准备调用“z2”表示的服务集S2.1(p)+S3.2(1-p).(3)服务S2.1和S3.2的选择概率可以通过变迁cd1和cd2的触发权值来实现.变迁cd1的触发将在N2中创建托肯“s1”调用服务S2.1,变迁cd2的触发将在N3中创建托肯“s2”调用服务S3.2.无论是哪个服务被调用,完成后将触发变迁ct1在库所CB中创建一个托肯“z3”,准备调用“z3”表示的服务集μS4.1(k).Page11图10组合服务集中执行的QPN表示(4)变迁ct2在库所IT3中创建托肯“s”,调用节点N4的服务S4.1.变迁it1的触发在队列库所N4中生成k个任务托肯“s”,变迁it3的触发将销毁库所N4中的k个任务托肯“s”,同时输出托肯“s”到库所IT4,变迁ct1得到托肯“s”后将在库所CB中创建一个托肯“z4”,准备调用后继服务集(S5.1(5)变迁ct2在库所FA1中创建托肯“s”,调用节点N5的服务S5.1.库所FA1中成功执行的任务托肯“s”输出到库所FA2中,触发变迁ct1在库所CB中创建一个托肯“z5”,准备调用“z5”表示的服务集(S7.1|S8.2).库所FA1中不能成功执行的任务托肯“s”将通过变迁fa3输出到容错备用节点N6中.如果能够成功执行,就通过变迁fa4输出到库所FA2表4集中执行模型的变迁触发模式触发模式变迁ct01:CQ{S}→CS{S}ct2cd11:CD1{s}→N2{s1}it21:N4{s}→IT1{s}cd21:CD1{s}→N3{s2}it31:IT1{k×s}→IT4{s}cd31:N2{s1}→CD2{s}it41:N4{s}→IT2{s}cd41:N3{s2}→CD2{s}it51:IT1{(k-1)×s}+IT2{s}→{}3.3.4组合服务分散执行的性能模型μS4.1(k)>(S5.1组合服务“S1.1>(S2.1(p)+S3.2(1-p))>中,否则就销毁,表明任务失败终止.(6)变迁ct2在库所CO1中创建托肯“s”后,变迁co1同时调用N7中的服务S7.1和N8中的服务S8.2.等到两个服务都完成后触发变迁co2在库所CO2中创建托肯“s”.变迁ct1触发后在库所CB中创建一个托肯“z6”,准备调用“z6”表示的服务集S1.2.(7)变迁ct2触发后在库所SE中创建托肯“s2”,调用节点N1的服务S1.2.完成后,变迁ct1销毁N1输出托肯“s2”,在库所CB中创建托肯“z7”,准备处理组合服务的最终结果.(8)库所CB输出托肯“z7”后触发变迁ct2将托肯“z7”销毁,表明组合服务执行完成.图10中的变迁描述如表4所示.行的QPN模型如图11所示.队列库所DQ(G/M//IS)建模组合服务执行请求“S”的到达,队列库所DB(G/M/1/PS)建模组合服务代理.变迁dt2触Page12发模式1后在库所SE中创建托肯“s1”后开始调用第一个服务S1.1,随后不再干涉组合服务的执行过程.服务之间按照预定的执行方案直接交互,由最后图11组合服务分散执行的QPN表示4实验与分析4.1仿真工具QPME按照上述建模思路可以建立起基于排队Petri网的服务系统性能模型,但是在实际应用中仍存在不少局限性,主要是状态空间爆炸问题.排队Petri网模型的状态空间大小会随模型中库所、变迁、颜色托肯等建模元素数目的增长呈指数级增长,导致所谓状态空间爆炸问题或维数灾难问题,不仅关系到数值方法求解的可行性,而且影响到仿真方法分析的精确度,严重限制着此类建模机制在现实中的应用.QPME(QueueingPetrinetModelingEnviron-ment)软件包[16,20]是一款基于排队Petri网的性能建模工具,具有友好的图形界面,包括QPN编辑器(QPE)和仿真器(SimQPN)两部分.SimQPN能够规避QPN的状态空间爆炸问题,支持构建层次化模型HQPNs(Hierarchically-CombinedQPNs),有助于理解系统各部件之间的交互关系,还可以更简洁地描述系统.Kounev等人[10]采用SimQPN对大规模复杂分布式组件系统进行了建模,结果证明其对QPN模型有等价的形式化表达能力,能够提供准确和稳定的性能度量值,可用于分析具有现实规模和复杂性的QPN模型.Kounev等人[9-10]使用QPME对J2EE软硬件平台性能测量基准程序SPECjAppServer2004进行建模和仿真,实验结果和实际系统测量值非常接近,总体的结果误差在±5%以内,表明QPME能够很好反映系统的性能变化,预测系统性能度量值.一个完成的服务S1.2通过变迁dt9将最终结果“S”返回给服务代理DB,处理后通过变迁dt2的触发模式2将托肯“S”销毁,表明整个组合服务执行完成.因此,本文在Kounev等人的研究成果基础上建立服务系统的QPN性能模型,重点关注服务系统中的部件能力、交互关系、执行方式等的图形化描述;采用QPME作为仿真工具,既可以利用SimQPN工具的形式化建模能力为性能模型的形式化验证提供保证,减少不必要的繁琐证明,也可以通过实验分析阐述所提出的服务系统性能模型的可行性.4.2仿真服务准备阶段服务准备阶段的实验仿真场景如图6所示,其中负载均衡器包含1个CPU,线程池T的数量为50,应用服务器包含5个CPU,数据库服务器包含2个CPU和1个磁盘系统.相应的队列库所针对服务准备阶段的5类操作行为的参数p1设置如表5所示.处理行为Q1Q2LBAPiDSiHBrowse3.2E-4-0.10.0050.0160.06Select3.2E-4-0.10.0100.0500.050Register-1.75E-40.10.0250.0450.052Composite13.2E-4-0.10.0120.0320.08Composite23.2E-4-0.10.0150.0350.092为了分析服务准备阶段的性能表现,设计了两个具有不同访问规模的应用场景,如表6所示.处理行为托肯操作数场景1场景2BrowseBn1=1025200SelectLn2=71070RegisterRn3=41050Composite1C1m1=61585Composite2C2m2=81868Page13根据图2的描述,Browse行为包含14个操作,即当托肯“b”在库所H中出现14次时,变迁t4的模式1平均触发13次,而模式2平均触发1次;Select行为包含11个操作,即当托肯“l”在库所H中出现11次时,变迁t4的模式3平均触发10次,而模式4平均触发1次;Composite1行为包含11个操作,即当托肯“c1”在库所H中出现11次时,变迁t4的模式5平均触发10次,而模式6平均触发1次;Composite2行为包含13个操作,即当托肯“c2”在库所H中出现13次时,变迁t4的模式7平均触发12次,而模式8平均触发1次.为此,变迁t4的8个触发模式的权值的一种可能的设置方案如下:w(1)=13,w(2)=1,w(3)=12.73,表7服务准备阶段的仿真结果场景2(95%c.i.)Ui场景1/%场景2/%Xi场景1场景2Ti场景1(95%c.i.)XB21.12194.35TB16997.491(+/-30.800)107408.501(+/-142.771)ULB28.637.1XL7.6967.37TL10404.323(+/-23.478)80178.498(+/-163.445)UAS63.576.9XC111.6381.83TC110795.878(+/-21.523)80749.312(+/-160.700)UDB52.561.7XC214.1365.80TC211418.780(+/-21.938)93412.132(+/-207.386)XR5.7545.56TR7735.456(+/-17.099)58583.748(+/-119.557)分析实验结果可知,性能模型可以描述不同访问规模的服务系统,且当系统的访问规模增大时,系统中各种操作行为的吞吐量Xi随之增加,使得系统中各类服务器的利用率Ui也得到很大提高.但是负载量的增加,也使得系统的处理效率下降,操作行为的响应时间Ti变得更长.4.3仿真服务提供节点仿真实验分析失效率、恢复时间、额外负载和失效恢复成功率对服务节点模型的性能影响,度量属性包括稳态时任务“s”的丢失率L(lossratio)、吞吐率x(throughputrate)、平均响应时间τ(mean图12服务节点的仿真w(4)=1.27,w(5)=12.73,w(6)=1.27,w(7)=12.92,w(8)=1.08.Register行为包含8个操作,即当托肯“r”在库所H中出现8次时,变迁t5的模式1平均触发7次,而模式2平均触发1次.为此,变迁t5的2个触发模式的权值的一种可能的设置方案如下:服务准备阶段的性能度量属性包括稳态时每种行为的吞吐量(throughput)Xi和响应时间(responsetime)Ti,服务器利用率(serviceutiliza-tion)Ui包括负载均衡器利用率ULB、应用服务器利用率UAS以及数据库服务器利用率UDB,结果数据的置信区间(c.i.)为95%.仿真结果如表7所示.responsetime)和服务节点利用率U(servicenodeutilization),结果数据的置信区间(c.i.)为95%.丢失率L指任务托肯“s”到达时因为失效而没有被接受的任务数量占到达任务数目的比率.实验仿真场景如图12所示.采用开放式队列模型模拟一定速率λ到达的服务请求,队列库所Q(G/M//IS)模拟稳定的任务产生源,队列库所Q(G/M//IS)模拟稳定的额外负载产生源.库所SC用来跟踪和描述服务节点的执行状况,托肯“c1”统计丢失率L和吞吐率x,托肯“c2”统计服务任务的平均响应时间τ.Page14对于可恢复的服务,其可靠性的主要参数是平均失效间隔时间(MeanTimeBetweenFail,MTBF)和平均恢复时间(MeanTimeToRecovery,MTTR).服务节表8服务节点模型犖的队列库所属性表库所托肯初始值λ库所托肯Q{s}{1}0.0005Q{w}F1{f1}{1}1.2E-7F2{f2}R{r}{0}1.5E-5NP{s,w,s,w}{0,0,0,0}1.5E-3,1.5E-3,1.2E-4,1.2E-4实验1分析通信失效率对服务节点模型的性能影响,仿真结果如图13所示.分析实验结果可知,随着通信失效率降低,即通信失效的MTBF变长,服务节点的吞吐率逐渐增加,任务丢失率逐渐下降,从而增加了服务节点的利用率,也使得节点负载变得更高.当通信失效间隔时间MTBF超过1.0E+06ms后,吞吐率、丢失率和利用率的变化趋于稳定.服务的平均响应时间的变化分为3个阶段:(1)初期时呈现下降趋势,分析其原因主要是通信失效率的下降使得通信失效恢复的执行频率降低,减少了服务响应过程中由于通信失效恢复而产生的等待时间.因为通信失图13实验1的仿真结果实验2分析通信失效恢复时间对服务节点模型的性能影响,仿真结果如图14所示.分析实验结果可知,通信失效恢复时间的延长,使得服务节点的有效执行时间变短,节点吞吐率和利用率下降,任务丢失率上升.这个变化趋势在初期是比较平缓的,当通信失效恢复时间MTTR超过1.2E+06ms后,变化幅度逐渐增大.服务平均响应时间的变化分为3个阶段:(1)初始时趋于平稳,主要原因是通信失效恢复时间的变长虽然增加了任务的平均等待时间,但是也在一定程度上减少了进入节点的任务的数量,点模型N中队列库所的初始设置如表8所示,其中任务到达服从泊松分布,服务处理时间和失效恢复时间服从λ的指数分布,服务失效恢复的成功率为99.9%.效恢复时间相对节点的处理时间要长,所以实际的服务平均响应时间反而下降了.(2)当通信的MTBF超过1.0E+06ms后,响应时间开始了增加趋势,分析其原因主要是失效恢复时间在平均响应时间中所占的比重逐渐下降,而由于节点负载增加造成的等待时间增加的影响增强,导致服务平均响应时间开始增加.(3)当通信的MTBF超过2.0E+09ms后,服务平均响应时间下降并保持稳定,分析其原因是此时的通信MTBF时间接近初始设置的仿真实验时间范围,使得通信失效发生的概率几乎为零,其平均响应时间只与相对稳定的节点负载和处理能力有关.降低了节点负载,减少了任务在节点中的平均逗留时间,因此综合影响后的服务平均响应时间变化平缓.(2)当通信MTTR超过1.2E+06ms后,较长的失效恢复时间的影响力变大,导致服务平均响应时间变长.(3)当通信MTTR超过5E+09ms后,由于接近初始设置的仿真实验时间范围,使得通信失效发生的概率几乎为零,其平均响应时间只与相对稳定的节点负载和处理能力有关.比较实验1和实验2的仿真结果,可以发现其对服务节点模型的性能分析结果是一致的.Page15图14实验2的仿真结果实验3分析计算失效率对服务节点模型的性能影响,仿真结果如图15所示.分析实验结果可知,随着计算失效率降低,计算失效的MTBF变长.初始时,计算失效率很高,对应的MTBF很大,服务节点的吞吐率保持在一个较低的水平,平均响应时间很大,节点处于满负载工作状态,任务丢失率接近40%.当MTBF上升到5.0E+3ms左右时,节点吞吐率快速上升,节点利用率和任务丢失率快速下降,图15实验3的仿真结果实验4分析计算失效恢复时间对服务节点模型的性能影响,仿真结果如图16所示.分析实验结果可知,随着计算失效恢复时间MTTR变长,服务任务在节点中的逗留时间变长,因此增加了节点的利用率和负载,造成了平均响应时间的增加.由于计算失效和计算失效恢复之间是独立发生的,因此失效恢复时间MTTR对吞吐率和丢失率的影响是间接平均响应时间快速下降,随后又保持相对平稳的变化趋势.分析其原因,主要是当失效率较高时,服务节点需要执行大量的恢复处理程序,使得节点处于满负荷工作状态,因此所有性能指标都处于低谷;当时失效率降低到一个门限值时,节点负载减轻,各个性能指标都得到恢复;但是当失效发生间隔MTBF超过了平均响应时间时,其影响变小,因此性能指标的变化又趋于平稳.的,其表现为在一定范围内的上下波动.实验5分析额外负载“w”对服务节点模型性能的影响,仿真结果如图17所示.分析实验结果可知,只有当额外负载“w”到达率很高时,节点利用率和负载处于较高水平,使得任务“s”的吞吐率很低,平均响应时间很长,任务丢失率很高.但是当“w”到达时间间隔增加500ms以后,即“s”到达时间间隔(2000ms)Page16的1/4,额外负载“w”对“s”的影响就变得很小了.实验6分析计算失效恢复成功率对服务节点模型的性能影响,仿真结果如图18所示.分析实验结图16实验4的仿真结果图17实验5的仿真结果图18实验6的仿真结果果可知,随着计算失效恢复成功率的不断提高,任务丢失率逐渐下降.而其它性能参数基本不受其影响,只是在一个较小范围内上下波动.Page174.4仿真服务交互关系不同交互关系下的性能与可靠性指标的度量方式是不同的.根据性质的不同,可分为可加性度量、可乘性度量、最小性度量和最大性度量4类.比如,顺序关系下的响应时间具有可加性,可靠性具有可乘性;并发关系下的响应时间具有最大性,可靠性具有可乘性;重复关系可以看成是连续多个顺序结构;条件关系下的选择概率对性能和可靠性指标的影响很大;而容错关系下的不同结构使得度量属性的计算更加复杂.因此,当组合服务的规模和交互分支增加时,很难直接推导出通用的组合服务性能属性和表9服务节点模型犖的队列库所属性表库所托肯初始值λ库所托肯F1{f1}{1}1.2E-8F2{f2}R{r}{0}1.5E-5NP{s,w,s,w}{0,0,0,0}3.5E-3,3.5E-3,1.5E-4,1.5E-4置一致,但是实际进入到N中的任务量较少,负载不同交互关系下吞吐率的比较结果如图19所较轻,因此N的平均响应时间要比N的短,而示.分析实验结果可知:(1)在并发关系下,虽然N“N--N”的平均响应时间要比N的略高.(4)在重复和N的处理能力不同,但两者的吞吐率基本相同,关系下,因为需要在N中重复执行k=5次,因此而“N|N”的吞吐率与较低的xN更接近.(2)在条“μN”的平均响应时间几乎是N的平均响应时间的件关系下,选择概率高的N的吞吐率要高于N,而“N+N”的吞吐率是两者吞吐率之和.(3)在容错5倍.关系下,只有当N出现失效时,服务任务才会进入不同交互关系下丢失率的比较结果如图21到N中,因此N的吞吐率比N的高出差不多两个数量级,而“N--N”的吞吐率近似为两者吞吐率之和.(4)在重复关系下,因为需要在N中重复执行k=5次,因此“μN”的吞吐率差不多是N的吞吐率的五分之一.不同交互关系下平均响应时间的比较结果如图20所示.分析实验结果可知:(1)在并发关系下,由于N的处理能力比N强,因此N的平均响应时间要比N短;但是“N|N”的平均响应时间比N还要长,分析其原因是,N和N的通信失效发生率不同步,使得并发关系下的关联失效放大了失效恢复时间的影响.(2)在条件关系下,选择概率高的N的吞吐率要高于N,而“N+N”的吞吐率是两者吞吐率之和.(3)在容错关系下,虽然N和N的基本配可靠性的度量公式,更不用说量化考虑失效和恢复影响的服务性能属性.为了分析不同交互关系下的服务节点模型的性能表现,引入一个新的服务节点模型N,其中的队列库所的初始设置如表9所示,其中任务到达服从泊松分布,服务处理时间和失效恢复时间服从λ的指数分布,服务失效恢复的成功概率为99.9%.条件交互下N和N的选择概率分别为70%和30%.容错关系下的N具有和N一样的配置.重复关系的重复次数k=5.所示.图20不同交互关系下平均响应时间的比较分析实验结果可知:(1)在并发关系下,由于N的通信失效发生率低于N,因此N中丢失的任务数目较少,所以N的丢失率比N的低不少,而“N|N”的丢失率与较高的N的丢失率接近.(2)在条件关系下,N具有较低的通信失效发生率,同时Page18被选择的概率也比较低,因此N的丢失率要明显低于N;而“N+N”的丢失率近似满足(LN×70%+LN×30%)的约束关系.(3)在容错关系下,虽然实际进入到N中的任务量较少,但是N和N具有相同的失效发生率,所以N的丢失率和N的丢失率差不多;由于N对N中的失效任务进行恢复执行,因此“N--N”的丢失率降低到0.0062%.(4)在重复关系下,N和“μN”对失效的处理是同步的,因此两表10服务提供阶段的分析结果S5.1子服务S1.14.96E-04878.95(+/-0.76)0.814.96E-04878.87(+/-0.73)0.79S2.14.10E-04741.13(+/-0.60)0.794.10E-04740.99(+/-0.57)0.81S3.28.19E-05698.61(+/-1.11)0.798.20E-05699.06(+/-1.10)0.80S2.1+S3.24.92E-04734.05(+/-0.53)0.794.92E-04734.00(+/-0.51)0.81S4.12.44E-0372853.64(+/-2033.18)0.802.44E-0373031.26(+/-1648.66)0.80μS4.1(5)4.88E-04374629.08(+/-3518.50)0.804.88E-04376140.54(+/-1834.21)0.80S5.14.84E-04729.60(+/-1.38)0.784.84E-04735.42(+/-1.89)0.77S6.13.80E-06721.55(+/-11.62)0.833.72E-06729.03(+/-14.04)0.87--S6.14.88E-04729.54(+/-1.37)0.014.88E-04735.37(+/-1.89)0.01S7.14.84E-04728.58(+/-0.92)0.804.84E-04722.95(+/-0.67)0.81S8.24.84E-04291.49(+/-0.26)0.764.84E-04291.09(+/-0.26)0.80S7.1|S8.24.84E-04810.78(+/-131.68)0.804.84E-041500.39(+/-618.68)0.81S1.24.82E-04847.06(+/-1.11)0.424.82E-04842.75(+/-0.91)0.42CoS4.82E-04379643.75组合服务的集中执行过程中,需要多次和服务代理库所CB进行交互,完成对托肯“z1”,“z2”,…,“z6”和“z7”的处理.令对应的平均处理时间表示为τ(zi),其中i=1,2,…,7.本例的仿真结果为τ(z1)=149.72ms,τ(z2)=150.14ms,τ(z3)=150.30ms,τ(z4)=143.74ms,τ(z5)=138.75ms,τ(z6)=139.12ms,τ(z7)=142.52ms.那么可以近似计算出集中执行的组合服务CoS的平均响应时间为τ(CoS)=τ(S1.1)+τ(S2.1+S3.2)+τ(μS4.1(5))+组合服务的分散执行过程中,只是在初始的任务调用和最后的结果汇总时才会和服务代理DB进行交互,分别用托肯“S”和“S”表示.本例的仿真结果为τ(S)=110.75ms,τ(S)=108.87ms.那么可以近似计算出分散执行的组合服务CoS=379643.75ms.的平均响应时间为者具有一致的丢失率.4.5仿真服务提供阶段服务提供阶段的性能度量属性包括稳态时的子服务Si.j和组合服务S的吞吐率x、响应时间T和任务丢失率L,结果数据的置信区间(c.i.)为95%.对组合服务“S1.1>S2.1(p)+S3.2(1-p)>μS4.1(k)>(S5.1--S6.1)>(S7.1|S8.2)>S1.2”分别按照集中和分散方式进行仿真的结果如表10所示.τ(CoS)=τ(S1.1)+τ(S2.1+S3.2)+τ(μS4.1(5))+τ(S5.1=381051.55ms.一般来讲,吞吐率通常用于度量小规模、耗时短的小型软件系统,或者单个软件模块的性能,而响应则适合度量规模较大、执行过程较复杂的系统的性能.比较相同配置下组合服务的两种执行方式可知,它们的吞吐率相同,集中方式下的任务丢失率较高,而分散执行方式下的平均响应时间较长.分析其原因,主要是在稳定的外部任务源输入的情况下,丢失率低表明实际处理的任务数量多,因此服务处理时间有所增加.5相关工作目前,国内外关于服务系统的性能分析问题的研究还处于初步阶段.文献[21]提出了对组合的Web服务的性能和可靠性瓶颈进行闭环分析的随机模型方法.文献[22]使用扩展的广义随机Petri网(ExtendedGeneralizedStochasticPetriNet,EGSPN)建模服务组合系统的性能,并且设计了模型化简规则和算法以解决状态空间爆炸问题.文Page19献[23]使用一组模糊微分函数描述服务组合及其性能,并通过平行算法来完成公式的计算.文献[24]提出了一种云计算平台性能评价的框架C-Meter,并在亚马逊弹性计算云上进行了初步的测试.文献[25]给出了云计算性能预测的计算方法,但是缺乏相关的实验数据作为验证标准.文献[26]分析了提供多任务科学计算的云计算服务的性能.文献[27]提出了一种轻量级的企业服务总线测试框架.文献[28]使用队列网络模型预测企业服务总线的响应时间,但该模型无法涵盖一些经典的企业服务总线应用模式(如消息的分裂和聚合等).文献[29]研究了QoS感知的面向服务体系结构的性能问题.文献[30]通过随机Petri网评价面向服务体系结构的性能,但是准确性会随着负载的增加而降低.由此可见,已有研究有些是针对特定的封闭式系统,有些使用的模型相对简单,不能充分反映大规模复杂服务系统的特性.排队网模型是一种确定性的网络建模工具[31].Das等人[32]使用分层排队网对多层服务系统的性能和可靠性进行了建模,并给出了基于马尔科夫链(MarkovChain)的分析方法.但是由于存在信息量小、无结构化机制的弊端,排队模型只被应用于较为简单的情况.文献[17]采用排队网(Queuenetwork)分析了失效影响下的多层Web服务的性能,但是基于乘积网络(product-formnetwork)的假设限制了该方法的适用范围.随机Petri网[7]易于对系统状态进行全面有效的描述,精确刻画系统的不确定行为以及行为组合关系,便于计算各种分析指标,非常适合描述Web服务这种松耦合的分布式系统.Bernardi等人[33]对基于概率模型的可信赖性评价方法进行了研究,并给出了利用随机Petri网对复杂系统进行建模和评价的方法.林闯等人[19]研究了随机Petri网对网络系统可信赖性建模分析的方法和步骤,着重研究了随机Petri网描述系统的服务失效模型和容错模型,并给出了网络可信赖性分析中主要指标的计算方法.排队Petri网继承和发展了排队网模型和随机Petri网的优点,能够更好地描述复杂的服务系统的性能表现[9-11].因此,本文从通用的角度出发,通过分析服务系统的运行过程,研究并提出了一种基于排队Petri网的性能建模和分析方法.6结论随着信息服务的不断演化,以面向服务为基础的服务系统呈现出规模扩大化、结构复杂化、状态动态化的趋势,常用的性能评价形式化工具逐渐显出能力上的差异.本文在分析服务系统运行过程和交互关系的基础上,提出服务准备和服务提供两个阶段.服务准备阶段的运行环境由负载均衡器、应用服务器集群和数据库服务器构成,其建模方法类似多层Web系统.服务准备阶段中的消费者和服务提供者的访问行为被归纳为Browse,Select,Composite和Register4类,每类都由若干操作组成.通过对各种行为在服务准备阶段的刻画,完成了服务准备阶段的QPN建模.服务提供阶段由多个服务节点按照业务流程要求以组合方式向消费者提供服务.对服务提供阶段的建模,除了考虑到不同交互关系(顺序、重复、并发、容错、条件)外,还要考虑时间约束、自动化要求、驻留节点的物理位置和节点失效恢复的影响.在此基础上,应用QPME软件包对服务准备阶段性能模型和服务提供性能阶段模型进行了仿真.模型的使用过程中可以设置不同的访问规模、更复杂的服务流程、更多的环境参数,构建出反映不同应用需求和环境配置的服务系统应用场景.实验结果表明所提出的建模和分析方法具有很好的有效性和可扩展性.与现有的服务系统性能分析方法相比,本文所提方法对服务系统性能的建模更全面,不但考虑到服务准备阶段的浏览、注册和组合行为,而且考虑到服务提供阶段中组合服务的不同执行方式(集中和分散),尤其是将失效行为和恢复机制的影响引入到性能建模中,明显改善了性能量化的准确性.采用的分析建模工具排队Petri网综合了排队网模型和随机Petri网的优势,能够刻画系统的执行细节和性能表现,极大地提高了建模和分析方法的实用性,为解决大粒度服务的复杂系统建模和服务质量评价问题提供了很好的解决方案.在下一步的工作中,我们将继续优化服务系统分析性模型和评价方法,并在此基础上研究动态网络环境下的服务系统适配机制,增强服务对环境的适配能力.致谢在此衷心感谢SamuelKounev博士提供的排队Petri网仿真软件QPME1.01对本文研究工作的帮助!衷心感谢评阅人对本文的工作提出的宝贵意见和建议!
