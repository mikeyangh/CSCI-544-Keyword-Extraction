Page1基于Map-Reduce的海量数据高效Skyline查询处理丁琳琳信俊昌王国仁黄山(医学影像计算教育部重点实验室(东北大学)沈阳110819)(东北大学信息科学与工程学院沈阳110819)摘要Skyline查询已成为现今数据库和信息检索领域的研究热点之一,伴随着人类可以采集和利用的数据信息的急剧增长,使得如何处理海量数据的Skyline查询成为急需解决的问题.近年来兴起的Map-Reduce编程框架能够有效地处理基于海量数据的应用,该文既是研究如何运用Map-Reduce编程框架解决海量数据的Skyline查询问题.在Map-Reduce框架下处理Skyline查询的直接方法是扫描整个数据集进而得到查询结果,但是在海量数据Skyline查询问题中,查询结果的数量远小于原始数据集的数据量,对此该文提出了一系列的Skyline查询算法及优化,有效地过滤掉部分不能成为Skyline查询结果的数据对象,大幅度提高了在Map-Reduce框架下处理Skyline查询的效率.大量运行在Hadoop平台上的实验验证了该文所提出的Skyline查询处理算法具有良好的有效性、准确性和可用性.关键词云计算;Skyline查询;Map-Reduce;海量数据;Hadoop1引言随着信息时代的到来,Skyline查询已成为现今数据库和信息检索领域的研究热点之一,并被广泛地应用于多目标决策分析和数据可视化等领域.Skyline查询的主要目标是在给定的数据集中搜索不被其它数据对象“支配”的数据对象.一个数据对象“支配”另一个数据对象指的是该数据对象在所有维度都不比另一个数据对象“差”,并且至少有一个维度比另一个数据对象“优”,这里“优”和“差”的定义并无统一标准,而是根据不同应用的特点确定.例如,图1所示为某沿海城市酒店的Skyline查询情况.酒店的价格和到海边的距离是衡量某个酒店“优”或“差”的两个标准,可以看出到海边距离越近的酒店其价格也越贵,反之,酒店价格越便宜,在图1中位于虚线上的点既是该Skyline查询的结果集,在结果集中的点即为不被其它点所“支配”的点.当游客到该城市旅行,希望找到既离海边近并且价格又便宜的酒店时,只需在该Skyline查询结果集中的点进行选择,就可以找到令游客满意的酒店.除此之外,Skyline查询还可以应用到如何选择工作能力强且要求薪水低的员工和如何买到质量好并且价格低的商品中.然而,随着网络信息和通信技术的迅猛发展,人类可以采集并利用的数据量急剧增长,使得如何在海量数据集中迅速确定Skyline查询结果成为迫切需要解决的问题.自2001年,Borzsonyi等人[1]将Skyline查询引入到数据库中以来,其得到了广泛的重视并取得了一系列的研究成果[2].尽管,现有的Skyline查询能够解决很多实际问题,但这些算法并不适用于海量数据的处理.近年来出现的Map-Re-duce[3]并行编程框架定位于处理海量数据,具有良好的可扩展性和容错性,能够满足数据量迅速增长的需要,因此可以运用Map-Reduce框架解决海量数据的Skyline查询处理问题.本文主要研究如何在Map-Reduce框架下处理Skyline查询.在分析了基于Map-Reduce框架处理Skyline查询的基本算法后,针对Skyline查询结果的数量远小于原始数据集的数据量的问题,本文又提出了一系列的Sky-line查询算法,能够有效地过滤部分不能成为查询结果的数据对象,减少Map任务的输出,同时降低Reduce任务的输入量,使得在有效解决海量数据Skyline查询问题的同时提高了算法的效率,降低了网络开销.算法具有高效、准确和可扩展等特性.本文主要贡献点如下:(1)提出3个在Map-Reduce框架下具有过滤性质的海量数据高效Skyline查询处理算法,分别是延迟Skyline查询算法、贪婪Skyline查询算法和混合Skyline查询算法.(2)提出1个Skyline查询优化算法,前置Sky-line查询算法.(3)大量实验结果验证了本文提出的Skyline本文第2节介绍相关工作;第3节提出Map-Reduce框架下海量数据Skyline查询处理算法;第4节提出Skyline查询处理优化算法;第5节分析实验结果;第6节进行总结.2相关工作2.1Skyline查询目前,Skyline查询的相关研究主要分为集中式Skyline查询和分布式Skyline查询.集中式Skyline查询主要针对数据量大且更新不频繁的情况.集中式Skyline查询算法中的BNL算法[1]的基本原理是通过将数据集中某个数据对象与数据集中其它数据对象比较用以检索数据集中不被其它数据对象支配的数据对象.Bitmap算法[4]是一种利用比特位运算的高效方法,利用位运算快的特点提高算法的效率.NN算法[5]的基本原理是先对数据集中的数据对象构建R-tree索引,并利用最近邻算法求出距离原点最近的点,然后利用该点的信息对数据空间进行划分,并在每个划分中递归此过程,直到分区中不含有任何Skyline查询结果为止.文献[6]提出了一种在线高效子空间Skyline算法CSky,利用新的数Page3据结构InventS将可能成为Skyline结果的点置于优先扫描的位置,保证了算法的渐进性.分布式Skyline查询算法的研究主要集中于算法的渐进性,节点之间负载平衡等,用于万维网、P2P等网络中.BDS算法[7]的基本原理是先确定数据集中一个包含Skyline查询结果和非查询结果的数据对象的子集,并从中删除非查询结果的数据对象,形成最终Skyline查询结果.IDS算法[7]的基本原理是利用启发式规则减少候选集合计算中的访问次数,从而在分布式环境中提高系统的效率.文献[8]提出了一种基于P2P网络的CAN结构的分布式Skyline查询算法DSL,主要原理是采用负载平衡策略在节点间分割数据并采用动态编码策略提高了Skyline查询的效率.文献[9]提出一种有效的滑动窗口Skyline监督算法及其优化,通过采用不同的过滤方法减少传输的数据量,降低了算法的代价.不论是集中式Skyline查询算法还是分布式Skyline查询算法,面对日益增长的海量数据,都会增加处理Skyline查询的计算量和代价,降低了Skyline查询算法的性能.2.2Map-Reduce框架Map-Reduce是现今较为流行的并行编程框架,用于大规模数据集的并行计算.最早是由Dean等人在2004年提出的,其开源实现是Hadoop平台①.图2说明了Map-Reduce的基本框架,框架中包含一个Master节点和多个Slave节点,Master节点负责整个框架的任务调度和分配,Slave节点负责执行分配到自身的任务.在Map-Reduce框架中一个作业的处理过程主要包括两个阶段:用于划分原始数据和产生中间结果的Map阶段和生成最终结果的Reduce阶段.用户可以通过简单的配置Map-per函数和Reducer函数来实现对原有任务的并行执行.近年来,关于Map-Reduce的研究也不断深入,涌现出一系列的研究成果,主要围绕在改进Map-Reduce架构以适应处理某些特定应用和将某些现有问题在Map-Reduce框架下处理两方面.Hadoop++[10]通过调用用户自定义函数提高Map-Reduce的性能,但并未改变Hadoop原有的框架.HaLoop[11]是Hadoop的改进版本,通过增加和修改一些功能模块有效地处理具有迭代特征的应用.Map-Reduce-Merge[12]通过给Map-Reduce框架增加一个Merge阶段有效地合并已经被Map和Reduce阶段划分和排序的数据,用来处理关系数据库的相关应用.尽管Map-Reduce的相关研究已成为当今的研究热点,但是对于Skyline查询来说,利用Map-Reduce框架处理Skyline查询的相关研究还相当初步.目前,文献[13-14]将Skyline查询处理问题引入到Map-Reduce框架中,根据不同的数据划分策略,实现了Skyline查询的块嵌套循环算法(Map-ReducebasedBlock-Nested-Loops,MR-BNL)等3个Skyline查询算法.文献[13-14]仅仅是在Map-Reduce框架下实现了Skyline查询处理算法,并未对算法提出优化,而本文针对海量数据的Skyline查询中Skyline查询结果的数量远小于原始数据集的数据量的问题提出了一系列优化算法,提高了在Map-Reduce框架下处理Skyline查询问题的效率.3基于Map-Reduce框架的高效Skyline查询处理算法本节主要说明Map-Reduce框架下Skyline查询处理算法.首先,3.1小节介绍了Map-Reduce框架下Skyline查询的基本算法,3.2~3.4小节分别介绍了本文所提出的3个Skyline查询算法,分别是延迟Skyline查询算法、贪婪Skyline查询算法和混合Skyline查询算法.3.1基本Skyline查询算法文献[13-14]中所提出的基于Map-Reduce的块嵌套循环算法(Map-ReducebasedBlock-Nested-Loops,MR-BNL)、基于Map-Reduce的排序过滤算法(Map-ReducebasedSort-Filter-Skyline,MR-SFS),其执行过程及原理可以归纳为在Map-Re-duce框架下处理Skyline查询的基本算法,本文选择性能略优的MR-BNL算法为例进行分析和说明.下面以一个二维空间Skyline查询为例说明基本Skyline查询算法的原理.如图3所示,在二维空间①Hadoop.http://hadoop.apache.org/Page4中有50个数据点,求这50个点的Skyline查询结果,由图3可知实心圆点表示该Skyline查询的结果即点(1,9),(2,5),(3,3),(4,2),(5,1).假设整个Map-Reduce框架中包含5个Map任务和1个Re-duce任务,50个数据点被随机划分成5个分片,分别由5个Map任务执行,得到自身的中间Skyline结果,进行排序和分组后发送给Reduce任务.Re-duce任务接收到所有Map任务的中间结果后产生最终的Skyline查询结果,具体执行过程如图4所示.例如,对于第1个Map任务来说,原始数据点为(2,10),(4,10),(1,9),(2,9),(4,9),(3,8),(5,8),(2,7),(4,7),(2,5),产生的Skyline查询结果为点(1,9)和(2,5),同理,第2个Map任务产生的Sky-line查询结果为点(5,9),(6,8)和(8,7),第3、4、5个Map任务产生的Skyline查询中间结果集为图4基本Skyline算法以上简要介绍了Map-Reduce框架下Skyline查询处理的基本算法,可以看出通常情况下Skyline查询最终结果的数量远小于原始数据集的数据量,即使采用Map-Reduce框架将原有数据集划分成多个子数据集进行并行计算,其代价仍然很大,在数据量成指数增长的情况下更会使效率降低.为了进一步提高Skyline查询的效率,本文在用Map-Reduce框架处理Skyline查询时,通过采用一系列有效的方法过滤掉一部分Map任务的输出结果,即不是最终查询结果的数据对象,使得Reduce任务的输入量大幅度减少,提高了运用Map-Reduce框架处理Skyline查询的效率.具体过程如下:在每个Map任务结束后,通过与Master节点建立连接,每个Map点(3,3),(4,2),(5,5),(7,2),(5,1).Reduce任务接收到5个Map任务所产生的中间结果之后,通过调用用户定义的Reducer函数求得该Skyline查询的最终结果,即点(1,9),(2,5),(3,3),(4,2),(5,1).任务选择一个自身的Skyline查询结果作为其局部过滤值发送给Master节点,Master节点根据不同的策略在接收到的局部过滤值中选择一个作为全局过滤值,然后Map任务根据全局过滤值对自身Skyline查询结果进行过滤,过滤一些不能成为Skyline查询结果的数据对象,再发送给Reduce任务,使得输入量大大减少.Reduce任务接收过滤后的中间结果,然后调用用户定义的Reducer函数产生最终的Skyline查询结果.3.2延迟Skyline查询算法延迟Skyline查询算法的基本原理是:在所有Map任务完成后将自身的局部过滤值发送给Mas-ter节点,Master节点在接收到所有Map任务的局Page5部过滤值之后产生全局过滤值再将其发送给每个Map任务,每个Map任务接收到全局过滤值之后,运用该全局过滤值对自身结果进行过滤并产生各自Skyline查询结果,Reduce任务以过滤后的中间结果为输入产生最终的Skyline查询结果.图5表示的是运用延迟Skyline查询算法处理3.1节中Skyline查询的过程.原有数据集被划分成5个分片,分别由5个Map任务处理,每个Map任务处理自身的数据得到局部Skyline查询结果,并产生局部过滤值.本文采用文献[9]中的滑动窗口Skyline监督算法(SWSMA)求得局部过滤值和全局过滤值,基本原理是:假设集合S是D维空间中的一个数据集,其中第i维的范围是[0,Di],X和Y是数据集S中的两个数据对象,分别表示成(x1,x2,…,xD)和(y1,y2,…,yD),数据对象X的概率密度函数为p(x)=p(x1,x2,…,xD),则数据对象Y可以“支配”的数据对象数量由下面的式(1)确定:c(Y)=S×∫R其中R={X|x1y1,x2y2,…,xDyD}.因此,对于每个数据对象来说,由式(1)求得的值越大,表明其过滤能力越强,“支配”能力也越强.尽管式(1)中的p(x)在大多数情况下并不已知,但可以运用随机取样或直方图的方法近似求得.另外,求得局部过滤值和全局过滤值的方法不仅限于本文中的一种,任何求Skyline查询点的方法均可以用来求局部过滤值和全局过滤值.以二维空间为例,对于每个数据点来说,可以运用文献[9]中的方法确定该点的“支配”图5延迟Skyline算法能力,凡是位于该点“支配”范围内的点,均是被该点“支配”的点,即一定不是Skyline查询结果.运用这种方法,每个Map任务对自身局部Skyline查询结果比较其“支配”能力,并将具有最大“支配”能力的点作为其局部过滤值,发送给Master节点.在图5中,本文仅以3个步骤进行说明.步1.每个Map任务在产生局部过滤值后将其发送给Master节点.例如,第1个Map任务产生的Skyline查询结果为点(1,9),(2,5),而点(2,5)的“支配”能力大于点(1,9),即点(2,5)可以“支配”的范围大于点(1,9),因此,第1个Map任务产生的局部过滤值为点(2,5).同理,第2~5个Map任务产生的局部过滤值分别为点(6,8),(3,3),(5,5),(5,1);步2.Master节点接收到所有Map任务传送的局部过滤值,在这些局部过滤值中运用同样的方法确定“支配”能力最强的点,这里为点(3,3),作为全局过滤值,然后将点(3,3)发送给所有Map任务;步3.在每个Map任务接收到全局过滤值即点(3,3)之后,用其对自身的Skyline结果进行过滤,产生最终的Map任务输出.例如第2个Map任务在接收到点(3,3)之后,用点(3,3)对其Skyline查询结果点(5,9),(8,7),(6,8)进行过滤,点(3,3)可以“支配”这3个点,故这3个点一定不是最终的Skyline查询结果,即第2个Map任务的最终输出结果为空.同理,第4个Map任务也用点(3,3)对其结果点(5,5),(7,2)进行过滤,点(3,3)可以支配点(5,5),但不能支配点(7,2),故第4个Map任务最终的输出结果为点(7,2).因此,Reduce任务的输入为点(1,9),(2,5),(3,3),(4,2),(7,2),(5,1),与基本Skyline算法相比降低了40%,大幅度减少了Reduce任务的输入,因此能够提高整个Skyline查询算法的效率.Page6然而,对于延迟Skyline查询算法来说,如果系统中某些Map任务占据的时间较长,那么Master节点必须等待这些Map任务结束才能产生全局过滤值.在实际应用中,系统中运行的Map任务数量巨大,如果某个Map任务失效或占据时间较长,会导致该Map任务不能及时将局部过滤值发送给Master节点的情况,使得Master节点由于一直等待该Map任务发送局部过滤值而无法产生全局过滤值,系统会进入“死锁”状态,那么Master节点无法等待所有Map任务结束后再产生全局过滤值.因此,尽管延迟Skyline算法可以降低Reduce任务的输入量,但是其效率并不高,并且实际应用的情况很少.3.3贪婪Skyline查询算法贪婪Skyline查询算法的基本原理是:当一个Map任务结束后将其局部过滤值发送给Master节点并获得一个全局过滤值.如果这个全局过滤值为空,那么该Map任务将其所有Skyline查询结果输出,否则,该Map任务用这个从Master节点获得的全局过滤值对自身Skyline查询结果进行过滤.Master节点在接收到第一个Map任务的局部过滤值后将其设定为全局过滤值.如果系统中另外一个Map任务结束,该Map任务也将其局部过滤值发送给Master节点.当Master节点接收到该Map任务的局部过滤值之后,将其与原有全局过滤值比较,根与延迟Skyline查询算法相比,贪婪Skyline查询算法同样能将Reduce任务的输入降低到基本图6贪婪Skyline算法据不同应用的需求选择最优的值作为新的全局过滤值.这样的过程一直继续,直到所有的Map任务运行结束为止.图6表示贪婪Skyline查询算法的计算过程.与前述Skyline查询处理算法相同,原始数据集被随机划分成5个分片,分别由5个Map任务执行,图6仅用6个步骤说明第1和第2个Map任务的执行情况,其余Map任务的执行原理与前2个Map任务相同,故不再一一列举.步1.当系统中第1个Map任务结束后,产生Skyline查询结果为点(1,9)和(2,5),其中点(2,5)作为其局部过滤值被发送给Master节点;步2.Master节点接收到点(2,5)后即将其作为当前的全局过滤值,发送给第1个Map任务;步3.第1个Map任务用点(2,5)过滤其Skyline查询结果,过滤后结果仍为点(1,9)和(2,5),则将点(1,9)和(2,5)作为其最终的Skyline查询结果发送给Reduce任务;步4.如果第2个Map任务运行结束,将其局部过滤值点(6,8)发送给Master节点;步5.Master节点在接收到点(6,8)之后,将点(6,8)与当前全局过滤值点(2,5)做比较,得到最优值点(2,5),将点(2,5)作为当前最新的全局过滤值;步6.第2个Map任务在接收到全局过滤值点(2,5)之后,用其对自身Skyline查询结果进行过滤,点(2,5)能“支配”其所有结果点,即第2个Map任务最终的输出结果为空,故图6中并未画出.这样的过程一直继续直到第5个Map任务结束,求得最终Skyline查询结果.Skyline算法的60%,并且不需要等待系统中所有Map任务都结束才能产生全局过滤值,但是每当有Page7一个Map任务完成,就要向Master节点发送局部过滤值,导致当前全局过滤值不一定是最优全局过滤值,所以本文又提出了混合Skyline查询算法来优化延迟Skyline和贪婪Skyline查询算法.3.4混合Skyline查询算法混合Skyline查询算法的基本原理是:当系统中的一个Map任务运行结束后立即将其局部过滤值发送给Master节点,然而,Master节点并不立刻产生全局过滤值发送给该Map任务,而是在一个预先定义的时间间隔内等待其它Map任务的完成,Master节点收集到这段时间间隔内所有完成的Map任务的局部过滤值,从中选择最优值作为全局过滤值,并发送给这些Map任务.Map任务在接收到全局过滤值之后,用其过滤自身的Skyline查询结果,并生成最终的局部Skyline查询结果.同样,在下一个时间间隔内,Master节点仍然等待在这个时间间隔内完成的所有Map任务的局部过滤值,从中选择最优值作为全局过滤值,并与原有的全局过滤值比较,再从中选择最优值作为新的全局过滤值.这样的过程一直继续直到所有的Map任务结束为止.当系统中最后一个Map任务结束后,它将其局部过滤值发送给Master节点,会立即获得一个全局过滤值.图7仍然以相同的Skyline查询为例,说明混合Skyline查询算法的过程.原有数据集同样被划分成5个分片,分别由5个Map任务执行,为了描述方便,在混合Skyline算法中,本文设定每个时间图7混合Skyline算法间隔内共有2个Map任务完成,本文用6个步骤说明前2个时间间隔内Map任务的执行情况.步1.当第1个Map任务完成后,将其局部过滤值点(2,5)发送给Master节点,Master节点在接收到点(2,5)后,并不立即产生全局过滤值,而是等待其它Map任务的完成.在这个时间间隔内,第2个Map任务完成后将其局部过滤值点(6,8)发送给Master节点;步2.Master节点比较点(2,5)和点(6,8),从中选择最优值点(2,5)作为当前的全局过滤值,并发送给第1和第2个Map任务;步3.第1个Map任务的Skyline查询结果不能被点(2,5)“支配”,故其最终的Skyline查询结果为点(1,9),(2,5).而第2个Map任务的3个Skyline查询结果都能被点(2,5)“支配”,所以第2个Map任务的输出结果为空;步4.在下一个时间间隔内,第3个Map任务完成后将其局部过滤值点(3,3)发送给Master节点,同样,Master节点也不立即产生新的全局过滤值,而是等待其它Map任务的完成,当第4个Map任务完成后,将其局部过滤值点(5,5)发送给Master节点;步5.Master节点从点(3,3)和点(5,5)中选择点(3,3)作为临时全局过滤值,并将其与原有的全局过滤值点(2,5)比较,从中选择最优值点(3,3)作为新的全局过滤值,并发送给这些Map任务;步6.在接收到全局过滤值点(3,3)后,第3、4个Map任务用其对自身结果进行过滤,发现点(3,3)可以“支配”点(5,5),故第4个Map任务最终的Skyline结果为点(7,2).整个过程一直继续直到所有Map任务都结束.Page8混合Skyline查询算法有效地继承了延迟Sky-line查询算法和贪婪Skyline查询算法的优点,与基本Skyline算法相比,Map任务的输出同样能够降低40%.混合Skyline算法既不用等待系统所有Map任务完成才能产生全局过滤值,也不用每次在Map任务完成后都与Master节点进行通信,在减少Reduce任务输入的同时提高了算法的效率,降低了算法的开销.4Skyline查询处理优化算法在实际应用中,Map任务的数量远比虚拟节点的数量多很多,甚至能达到几百倍,尽管本文提出了上述3个Skyline查询算法,但对于海量数据的Skyline查询处理的性能仍需进一步提高.如果能让Map任务在运行之前可以预先过滤掉一些不是最终结果的数据,那么Map任务的输入数据量也会大大减少,这样会进一步提高Skyline查询算法的效率.因此,本文提出了一个Skyline查询优化算法,称为前置Skyline查询算法,能够更有效地处理Map-Reduce框架下的海量数据Skyline查询.前置Skyline查询算法的基本原理是:在一部分Map任务完成后,Master节点可以运用上述任何一种Skyline查询算法产生一个当前的全局过滤图8前置Skyline算法值,其余没有运行的Map任务可以在其初始化阶段从Master节点获取一个全局过滤值对自身的数据进行过滤,过滤掉一部分不能成为Skyline查询结果的数据,并将过滤后的数据作为输入,这样可以大大减少Map任务的输入量.当系统中的Map任务数量很多的时候,前置Skyline查询算法可以看作是对贪婪Skyline查询算法和混合Skyline查询算法的优化,能够更有效地提高Skyline查询的效率.图8仍以前述的Skyline查询为例,说明前置Skyline查询算法的基本过程.原始数据集同样被分成5个分片,由5个Map任务完成,本文用5个步骤对前置Skyline算法进行简要说明.步1.第1和第2个Map任务完成后,分别得到其局部过滤值,其中第1个Map任务的Skyline结果为点(3,3)和(4,2),局部过滤值为点(3,3),第2个Map任务的Skyline结果为点(5,5)和(7,2),局部过滤值为点(5,5),第1和第2个Map任务将点(3,3)和(5,5)发送给Master节点;步2.Master节点在接收到点(3,3)和点(5,5)后,选择点(3,3)作为全局过滤值并发送给第1和第2个Map任务;步3.第1和第2个Map任务将运用全局过滤值点(3,3)过滤后的Skyline查询结果发送给Reduce任务;步4.第3到5个Map任务在启动之前,初始化阶段均从Master节点获取当前全局过滤值即点(3,3)来过滤自身原始数据集,其中点(3,3)可以“支配”第3个Map任务的所有原始数据,说明这些原始数据一定不是最终Skyline查询Page9结果,第3个Map任务的输入数据集为空集,即不会产生任何输出.对于第4个Map任务,点(3,3)可以“支配”其点(4,10),(4,9),(3,8),(5,8),(4,7),而不能“支配”其点(2,10),(1,9),(2,9),(2,7)和(2,5),即用下划线表示的点,则第4个Map任务的输入经过过滤后由10个点减少到5个点.同理,第5个Map任务的输入经过过滤后降低到3个点,点(9,2),(5,1)和(9,1);步5.后续Map任务将自身的Skyline查询结果发送给由此可见,前置Skyline算法能够降低Map任Reduce任务,得到最终Skyline查询结果.务的输入量,更有效地提高了算法的效率.5实验评估5.1实验环境本文的实验环境由9台用高速千兆网络连接的PC机组成,每个PC机的配置为QuadCore2.66GHZCPU,4GB内存,操作系统为CentOSLinux5.6.其中一台PC机作为Master节点,其它8台PC机作为Slave节点.本文采用的Hadoop平台版本为0.20.2,代码编译采用JDK1.6.实验所用数据集为合成数据集,利用文献[1]中标准的数据生成工具生成.实验数据集的记录条数为2×105条到10×105条,默认维度是4,节点数为8.通常情况下测试Skyline查询性能在3种分布下测试,分别是独立分布、相关分布和反相关分布.独立分布即数据的各个维度之间互相独立且同分布,相关分布是指数据在某一维的数值越大在其它维度上数值也越大,反相关分布是指数据在某一维上的值越大在其它维度上的值却越小.由于数据在独立分布和相关分布下,Skyline查询的性能相似,故本文并未对数据在相关分布下的性能进行测试,只选择了独立分布和反相关分布条件下测试Skyline查询算法的性能.本文所采用的性能测试指标主要有两个:Sky-line查询算法的运行时间和查询记录数.实验中,本文将所提出的Skyline查询算法,即贪婪Skyline查询算法(EagerSkylineQueryAlgorithm,ES)、混合Skyline查询算法(HybridSkylineQueryAlgo-rithm,HS)和前置Skyline查询算法(PrepositiveSkylineQueryAlgorithm,PS),与文献[13-14]的基于Map-Reduce框架的块嵌套循环算法(MR-BNL)进行比较.由于延迟Skyline查询算法需要等待所有的Map任务运行结束才能产生全局过滤值,这种方法在实际应用中是不可行的,故本文并未对延迟Skyline查询算法进行测试.本文将在Map-Reduce框架下Reduce任务的输入记录条数简写成(Re-duceInput,RI),则BNL算法的Reduce任务的输入记录数简写成(RI-BNL),贪婪Skyline查询算法的Reduce任务输入记录数简写成(RI-ES),混合Skyline查询算法的Reduce任务输入记录数简写成(RI-HS),前置Skyline查询算法的Reduce任务输入记录数简写成(RI-PS).5.2实验结果与分析5.2.1Skyline查询性能随数据维度变化情况图9和图10表示Skyline查询性能随数据维度变化的情况.图9所示为Skyline查询算法运行时间的测试结果,图10所示为Skyline查询算法Re-duce任务输入记录数的测试结果.其中图9(a)和10(a)表示数据服从独立分布,图9(b)和10(b)表示数据服从反相关分布.从图9可以看出,4个Skyline算法的时间相差不大,但BNL算法的时间仍高于本文的3个算法,原因是本文的实验环境是在一个千兆网络环境下进行的测试,网络的传输时间很小,故时间性能的效果并不明显.反相关分布的Skyline查询算法的时间在数据达到5维时时间明显增加,原因是反相关分布的Skyline查询结果比独立分布多,计算量增大,导致时间增加.在图10中两种分布Page10下BNL算法的Reduce任务输入记录数均高于本文的ES、HS和PS算法,表明本文所提出的Skyline查询算法可以减少Reduce任务输入记录数,即算法具有高效的过滤能力,可以提高Skyline算法的效率.图10Skyline查询算法Reduce任务输入记录数5.2.2Skyline查询性能随数据量变化情况图11和图12表示Skyline算法性能随数据量变化的情况,可以看出随着数据量增大,Skyline查询时间增加,原因是随着数据量增大,每个Map任务所处理的数据量也增大,使得算法的开销增大,本文的数据量从2×105条到10×105条,能够说明算法对于海量数据处理的性能.从图11可以得出,在两种分布下,BNL算法的运行时间高于本文的3个Skyline算法,而PS算法的性能最优,原因是PS算法在Map任务运行前过滤掉部分不能成为Skyline查询结果的数据,使得Map任务的输入量减少,故运行时间最短,同样从图12所示的Reduce任务输入记录数也能得到类似的结果.5.2.3Skyline查询性能随节点数量变化情况图13和图14表示Skyline查询算法性能随节点数变化的情况.从图13中可以看出,随着节点数量的增加,Skyline查询时间呈下降趋势,原因是伴随节点数量增加,系统的并行性和处理能力均增强,图12Skyline查询算法Reduce任务输入记录数故其时间也越来越短,而独立分布的运行时间小于反相关分布.从图14中可以看出,在数据量一定的情况下,BNL算法的Reduce任务的输入记录数保持Page11图14Skyline查询算法Reduce任务输入记录数不变,原因是BNL算法并未采用过滤机制,故其Reduce任务的输入记录数保持不变.而本文所提出的Skyline查询算法无论是在独立分布还是在反相关分布下Reduce任务输入记录数均大幅度少于BNL算法,表明本文算法具有很好的过滤能力,有效地提高了在Map-Reduce框架下处理Skyline查询的性能.6结论本文针对在云计算的Map-Reduce框架下如何实现海量数据Skyline查询问题进行了深入的研究.首先,本文分析了基本Skyline查询算法,即在Map-Reduce框架下实现Skyline查询,其次,针对海量数据Skyline查询的最终结果的数量远小于原始数据集的数据量的问题,本文提出了3个Skyline查询算法,分别是延迟Skyline查询算法、贪婪Sky-line查询算法和混合Skyline查询算法,有效地过滤部分不能成为最终查询结果的数据对象,并详细地分析每个算法的原理和特点.为了进一步提高在Map-Reduce框架下处理海量数据Skyline查询的性能,本文针对上述算法又提出了一个优化算法,称为前置Skyline查询算法,前置Skyline查询算法更适用于处理海量数据处理Skyline查询.最后,本文通过大量合成数据对所提出的Skyline查询算法进行了测试和评估.实验结果表明,本文所提出的算法有效地节约了Skyline查询的时间,提高了Skyline查询的效率,算法具有良好的可扩展性、准确性和可用性.
