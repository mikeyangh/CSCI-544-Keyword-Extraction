Page1FPGA+DSP异构视频处理系统中基于SRIO的数据高效传输方法(北京航空航天大学计算机学院数字媒体北京市重点实验室北京100191)摘要数据传输一直是影响嵌入式视频系统实时处理能力的关键环节.随着视频应用的多路化和高清化,混合多处理器结构已成为嵌入式视频处理系统的主要发展趋势,异构处理器之间数据的高效传输对系统性能的影响变得比以前更加突出.文中针对FPGA+DSP异构视频处理系统中的数据传输问题,在分析处理器结构和视频数据格式特征的基础上,提出了一种基于高速串行接口SRIO(SerialRapidI/O)的数据高效传输方法.该方法分别以FPGA、DSP作为系统的传输、处理核心,在FPGA处理器上采用视频三分量数据重组方法并使用包头信息较小的SRIO流写事务SWRITE(StreamingWrite),简化视频传输格式的同时提高了SRIO视频数据包的传输效率;在DSP处理器上通过预定义接收端数据存储单元和采用简洁的SRIO门铃事务(DOORBELL)应答机制,节约了DSP在传输过程中的时间开销.实验结果表明,文中设计的SRIO高效传输方法在占用较少的FPGA资源的条件下传输速度达理论值的81%以上.关键词FPGA+DSP;视频数据;SRIO;高效传输1引言视频应用领域的快速增长和传感器技术的迅速发展推动了视频时空分辨率的提高,同时也使多路化、高清化成为视频应用发展的一种趋势.视频数据量的激增不仅给处理平台的计算能力带来了严峻挑战,同时也给视频处理系统中处理器间数据的高速传输造成了极大困难.例如,当使用YCbCr420采样格式采集视频数据时,一路分辨率为720×576,帧率为25帧/秒的D1数字视频原始数据率约为119Mbps,一路1080P30高清数字视频的原始数据率高达712Mbps.因此,在视频处理系统设计中除了要关注处理器的性能和计算能力之外,研究和解决处理器间视频数据的高效传输问题同样重要.目前,嵌入式视频处理系统中常用的互连和传输接口EMIF(ExternalMemoryInterface)等已难以满足多路或高清视频的大数据量传输需求[1-3].高速串行接口SRIO作为RapidIO的一个重要分支,是面向嵌入式系统开发提出的高可靠、高性能、基于包交换的新一代高速互联技术,SRIO技术的发展为异构处理器间的高速互联提供了另一种可能.特别是近年来推出的数字信号处理器(DigitalSignalProcessor,DSP)和现场可编程门阵列(FieldProgrammableGateArray,FPGA)等嵌入式处理器普遍集成高速差分串行收发器,很大程度上促进了SRIO的发展应用[4-7].尽管SRIO具有可选的1.25Gbps、2.5Gbps、3.125Gbps等多种传输速率,然而这只是理论值,低效的传输机制设计或是繁琐的实现过程都会导致其传输速度的大幅降低.例如:文献[8]基于多核DSP设计实现了声纳基阵处理系统,此系统使用SRIO的普通读事务NREAD(NormalRead)、普通写事务NWRITE(NormalWrite)、门铃事务DOORBELL以及对RapidIO内部寄存器进行操作的MAINTENCE事务,传输方法上未加优化,测试1.25Gbps工作模式下传输速率约为257Mbps,仅达到SRIO理论值的25%;文献[9]通过在FPGA端采用乒乓存储结构,并使用带响应的写事务NWRITE_R(NormalWritewithResponse)与DOORBELL等SRIO事务设计传输机制,数据率比未加优化的方法有了明显提升,达到SRIO理论带宽的74%.由于现有方法在设计SRIO传输机制时缺乏针对视频数据和异构处理器结构特点的考虑,直接采用已有技术难以满足异构视频处理系统中视频的高效传输和处理需求.此外,现有视频处理系统大多偏重于功能的实现,硬件资源的开销较大.例如,文献[10]提出的方法需要为FPGA外挂两片同步动态存储器SDRAM(SynchronousDynamicRandomAccessMemory),增加资源占用的同时,加大了系统软硬件设计的复杂度.文献[11]采用基于DSP主动发送数据的传输方案,该方案需要FPGA向DSP发送中断信号以请求数据,每中断一次DSP可以发送1/4帧的视频数据,因此显示一帧视频需要4次中断.由于DSP在进行视频处理工作的同时还要负责数据传输,无疑加大了DSP时间与资源的开销.本文在分析视频数据和异构处理器结构特点的基础上提出了一种基于SRIO总线的数据高效传输方法.该方法通过在FPGA处理器上采用视频三分量数据重组方法并使用包头信息较短的SWRITE事务,简化视频传输格式的同时提高了SRIO上视频数据包的传输效率;在DSP处理器上通过预定义接收端数据存储单元和采用简洁的DOORBELL应答机制,节约了DSP在传输过程中的时间开销.本文方法由于仅采用SWRITE、NREAD和DOORBELL这3种SRIO事务,减化了实现过程的复杂度.此外,由于视频数据是以行为单位在FPGA上存储的,并且在存储过程中,采用FIFO视频缓冲队列取代资源占用率较高的RAM,因此系统对FPGA内存资源占用较少,无需外部存储器,降低了软硬件设计的难度.实验证明,本文使用SRIO单通道并采用1.25Gbps工作速度,传输速率达829Mbps以上,可满足六路D1视频或一路1080p高清视频的传输需求.文中以一路D1视频传输为例做出说明及验证方法的可行性.本文第2节对系统的整体概况进行描述,包括本文所采用的视频处理系统的结构、视频数据格式的分析、SRIO事务类型的介绍以及SRIO传输过程的介绍等内容;第3节详细介绍本文提出的异构处理器间SRIO高效传输方法,主要分为方法处理流程、SRIO高效传输机制设计与方法的实现3个主要部分;第4节首先对实验环境进行介绍,然后分别给出方法的SRIO传输速率测试与FPGA资源使用情况的相关实验结果.2系统概述2.1FPGA+DSP异构视频处理系统结构由于数据计算能力强、功能定制灵活,DSP和Page3FPGA已成为嵌入式视频处理系统中应用最广泛的两种处理器.其中,DSP是一种适合进行数字信号处理运算的微处理器[12],主要用来实现各种数字信号处理算法;FPGA虽然具有体系结构灵活、集成度高以及适用范围广等特点[13],但相对于DSP而言,其算法程序的设计难度大、开发周期较长.现有主流的基于多处理器的视频处理系统主要有基于DSP+DSP同构处理器架构和FPGA+DSP异构处理器架构两种.相比之下,同构处理器架构在设计上比异构架构下的视频处理系统简单,但是处理器大多只能选择带有视频接口的专用DSP(例如TI的DM64×系列和DaVinci系列),这类处理器除了具有专用的视频接口外,往往还在内部集成了专用协处理器用于完成标准视频处理算法(如H.265编码算法).但由于此类处理器属于半定制类型,其灵活性较差并且对视频处理算法的限制大,因此DSP+DSP同构处理器架构主要面向标准视频处理应用领域.而FPGA+DSP异构处理器架构在视频接口的适应性和算法设计的灵活性方面更具有优势:首先,FPGA作为协处理器可以完成视频接口的扩展、格式转换、预处理和系统的控制工作[14-17],由于FPGA具有完全可定制的特点,因此在接口设计和协处理方面比同构处理器结构具有更高的灵活性;其次,DSP处理器可以从接口和控制任务中脱离出来,只作为主处理器专注于完成大量视频数据的计算和处理.此外,FPGA+DSP异构处理器架构下的DSP在芯片选择上可以不局限于专用DSP,因此能够选用更高性能的通用DSP处理器,大大提高了系统的处理能力和算法设计的灵活性.本文设计了FPGA+DSP异构视频处理系统.在该系统中,根据FPGA与DSP处理器的各自特点,并综合考虑视频处理系统的常用任务的特点及处理器间负载均衡的要求,对处理任务进行了划分.其中,FPGA主要用于视频数据的采集、格式转换、预处理、数据传输和逻辑控制等任务;DSP主要用于视频的处理、分析和编码等核心工作.在存储方面,FPGA处理器采用以视频行为单位完成数据采集和预处理的方法,其片上存储资源可以满足需求,避免了增加片外存储器;而DSP在计算过程中需要存取大量视频数据和中间处理结果,片内存储远无法满足要求,因此为其设计了专门的DDR3片外存储器.图1所示的FPGA+DSP混合处理器的硬件结构具有广泛的通用性,可以作为多种视频处理系统的核心硬件单元,例如视频分析、处理和编码系统等.图1FPGA+DSP异构视频处理系统硬件结构2.2视频数据格式视频数据除有一般大数据的规模性和高速性特点外,在结构上还具有独特的规则性和统一性.例如,当前普遍采用的PAL制式ITU-RBT.656数字视频在行和帧结构上就具有严格的规则性.图2和图3分别给出了该类数字视频在YCbCr422通用采样格式下的行结构和帧结构.每个视频行包含了行控制信号和视频数据信号两部分.其中,行控制信号为每个视频行起始的288字节,包括前四字节的有效视频结束信号EAV(EndofActiveVideo),280字节的固定填充数据,以及最后4字节的有效视频帧开始信号SAV(StartofActiveVideo);视频数据信号由Y、Cb、Cr3种视频分量构成,每行视频含有720字节Y,360字节Cb和Cr,共1440字节.其排列顺序为Cb,Y,Cr,Y,Cb,Y,Cr,…,其中,前3个Cb,Y,Cr采样的是一个数据点的亮度信号和两个色差信号,而接下来Page4的Y采样是下一个点的亮度信号,以此类推.完整的一帧BT.656视频数据是由源视频经过行扫描形成的奇场和偶场组成,如图3所示.PAL制式中第1~312行表示偶场,第313~625行表示奇场,其中有效场为第23~310行和第336~623行,可使用SAV和EAV中的标志信号来表示有效场和无效场.视频数据除了在采集端具有严格的规则性外,在处理过程中对数据也有统一性的要求.例如,YCbCr420是目前视频处理系统中采用最为广泛的视频格式[18],3种视频分量一般是按帧被依次独立处理.因此,在本文视频采集过程中,FPGA处理器首先要将按点依次采集的YCbCr422视频数据转换为按行和帧排列的YCbCr420格式.在YCbCr422格式中,隔点分别采集Cb和Cr分量,在YCbCr420格式中奇数行隔点采样Cb分量,偶数行隔点采样Cr分量,如图4所示,图中每个方格代表一个像素点,每个圆形代表一种分量,两种格式中采集所有点的Y分量.针对视频数据在结构上的规范性特点以及处理上的统一性要求,本文为FPGA与DSP处理器上的收发缓冲区各自分配3个视频缓冲队列,以实现视频数据三分量的快速分离,并为两处理器上帧数据的高效整合提供了条件.首先,在分离过程中同时完成视频格式转换工作(YCbCr422转为YCbCr420),即采集到的视频数据按照奇场和偶场及视频分量顺序依次输入,舍弃奇场中Cr数据和偶场中Cb数据,剩余视频数据按照分量不同存入对应视频缓冲队列.其次,在预定义好DSP接收端数据存储地址后,对分离后的视频三分量进行打包传输,使得每种视频分量存到DSP指定地址中形成整帧数据结构,从而减少DSP计算数据存储地址上的时间开销.2.3SRIO事务操作为了适应多种类型数据的高速传输,SRIO从IO逻辑(InputOutputLogical)与消息传递(MessagePassing)两个层面提供了如表1所示的8种事务功能,这些事务涵盖了从原子到数据包的广泛应用方式.其中,IO逻辑包括Atomic、NREAD、NWRITE、NWRITE_R、SWRITE与MAINTENANCE几种;消息传递包括DOORBELL与MESSAGE两种.SRIO事务名称Atomic,NREADAtomic,NWRITE,NWRITE_RSWRITEMAINTENCEDOORBELLMESSAGEAtomic为原子操作;NREAD事务为普通读操作,可以直接从对端内存取数,一包最大为256Bytes;普通写操作有NWRITE和NWRITE_R两种,可以直接往对端内存写数,一包最大为256Bytes;SWRITE事务具有包头信息短、传输数据是8Bytes的整数倍、长度不能超过256Bytes等特点;MAIN-TENANCE用于对RapidIO内部寄存器的读写操作,可以配置整个RapidIO网络上各个节点的参数;DOORBELL的包头和携带的信息都很短,用于提供一个快速的短消息通知;MESSAGE用于传输大数据包,每次最多4KBytes数据.在分析SRIO事务特点基础上,结合视频处理系统中视频数据的高速传输需求,本文对SRIO的传输机制进行了定制和优化.在SRIO事务选择上,由于系统中需要由FPGA读取DSP处理后的视频数据,因此选择了常规的NREAD事务.3种写事务中,尽管NWRITE_R可有效防止数据包的丢失,提高数据包写入的正确率,但是由于本文是通过地址偏移的方式向DSP写入视频数据的,该方法不会因为数据包的丢失而造成视频数据的累积错误,因此无需选用设计较为复杂的NWRITE_R事务.相比NWRITE事务,SWRITE写事务具有包头信息短、打包率高及实现简单等特点,因此本文SRIO写事务选择SWRITE事务.由于本系统中SRIO仅用于两个异构处理器间点到点的数据传输,并未使用SRIO桥芯片,因此无需通过MAINTENCE事务修改和维护SRIO收发地址等内部寄存器.此外,为简化SRIO传输过程实现的复杂度,选用简洁的DOORBELL事务用于异构处理器间的传输控制.综上,本文SRIO传输过程中采用SWRITE、DOOR-BELL和NREAD这3种事务,显著降低了设计实现的复杂度.2.4SRIO传输过程SRIO数据传输过程是基于请求和响应机制Page5的.发起端请求IREQ(InitiatorRequest)是一次事务的开始,用户控制IREQ端口组织请求数据包,数据包经过SRIO链路发送到目标请求端口TREQ(TargetRequest)进行解析,目标端用户控制目标响应端口TRESP(TargetResponse)组织响应数据包,数据包经过SRIO链路发送回发起端响应端口IRESP(InitiatorResponse)解析.图5为一次典型的基于IP核的端到端SRIO传输过程示意图,图中用户A发送SRIO请求给用户B(步骤(1)~(3)),用户B响应用户A的SRIO请求(步骤(4)~(6)),具体步骤如下:(1)用户程序A控制IREQ端口信号,填充请求数据包信息,如包类型等;(2)IP核A根据用户填入信息封装为SRIO数据包并发送到SRIO链路;(3)IP核B收到请求数据包,解析后通过TREQ端口通知用户程序B;(4)用户程序B根据请求,控制TRESP端口组织响应数据包,填入响应数据;(5)IP核B封装响应数据为SRIO响应数据包并发送到SRIO链路;(6)IP核A收到响应数据包,解析后通过IRE-SP端口通知用户程序A,用户程序A接收并处理响应数据包.3异构处理器间SRIO高效传输方法3.1处理流程视频编码器多以Y、Cb、Cr3种视频分量的数据块为单位进行编码.为提高编码效率,避免反复搬运数据造成DSP处理时间和资源的浪费,本文在DSP接收数据时,为其设计了3个接收缓冲区用于视频数据三分量的分离,在FPGA端设计3个发送缓冲队列与之对应.对于采集的视频数据,FPGA首先根据其原始数据的Y、Cb、Cr三通道格式组织并按视频序列流打包生成待发送的数据包,然后采用包头信息较短的SWRITE事务实现FPGA向DSP写数据的操作,不同通道的视频序列直接写入DSP端预定义的DDR3缓冲区,当SWRITE事务操作完成后,FPGA发送DOORBELL事务通知DSP解析视频数据并进行处理计算,FPGA向DSP发送数据过程如图6所示.当DSP处理完一帧视频数据后,通过EDMA(EnhancedDirectMemoryAccess)将处理后的视频数据搬运到DSP端DDR3的输出缓冲区,在FPGA端设计3个接收缓冲队列与之对应.当DSP处理完接收到的视频数据后,通过向FPGA发送DOORBELL事务通知FPGA收取处理好的视频数据,最后由FPGA通过NREAD事务请求读回处理后的视频数据,FPGA从DSP接收数据过程如图7所示.方法以FPGA作为传输链路核心,DSP作为视频数据处理核心,分别设计FPGA和DSP端SRIO程序,其中,FPGA端程序包括发起端请求IREQ和发起端响应IRESP;DSP端程序包括目标端请求TREQ和目标端响应TRESP.如图8所示,SRIO传输过程中仅采用SWRITE、DOORBELL和NREAD这3种事务,显著降低了设计实现的复杂度.下面就SRIO传输机制和方法实现两方面加以详细介绍.3.2SRIO高效传输机制设计为了实现SRIO的高效传输,本文在FPGA端首先对采集到的视频数据进行发送前的重新组织,Page6如图9所示.具体组织过程如下,FPGA采集打包格式的YCbCr422视频数据,为3种分量设置各自视频缓冲队列,用于分离并暂存视频分量.在分离过程的同时完成视频格式转换工作(YCbCr422转为YCbCr420).采集到的视频数据按照奇场和偶场及视频分量顺序依次输入,舍弃奇场中Cr数据和偶场中Cb数据,剩余视频数据按照分量不同存入对应视频缓冲队列.当一个完整视频行的分量数据都写入各自视频缓冲队列后,分别读取各视频缓冲队列,以视频行为单位将720字节Y分量和360字节Cb(或Cr)分量写入SRIO发送缓冲队列(TxFifo).至此,SRIO发送缓冲队列TxFifo中已经存入以平面格式视频行L为单位的YCbCr420视频数据,等待发送.由于SRIO链路是以包为单位传输数据的,因此为了提高数据包的传输效率,在数据发送过程中采用包头信息较短的SWRITE事务,设置其有效字节为SRIO协议所规定的最大字节数256Bytes,此时该事务有效数据打包率为95%,能达到最快的SRIO写速率.在传输过程中,需要为每个SWRITE事务包设置特定地址和数据长度,视频数据以行为单位进行循环发送.由于SRIO数据包最大有效数据载荷为256Bytes,在保证数据完整性并满足SWRITE传输数据是8Bytes整数倍要求的前提下,为最大程度提高SRIO传输效率,应尽量减少数据包个数.因此,本文将720Bytes的Y数据划分为3个SWRITE包,每包传输240Bytes,包存储地址可以由帧基地址、Y分量偏移量和行偏移量计算获得,3个包存储地址连续增加;360字节Cb(或Cr)数据采用两个SWRITE事务包发送,并规定两个数据包的有效数据长度分别为184Bytes和176Bytes,存储地址由帧基地址、Cb/Cr分量偏移量和行偏移量计算获得.为了提高DSP的视频处理效率,在本异构视频处理系统中,采用由FPGA发送NREAD读请求方式读取DSP处理后的视频数据,DSP仅需对NREAD请求进行读响应即可,该响应过程对DSP是透明的,如此可极大程度减小DSP在传输过程中的时间与资源开销,使得DSP可以专注于视频处理工作.其传输过程与SWRITE事务类似,即为每个NREAD事务包设置特定地址和长度,视频数据按行循环发送.为最大程度提高SRIO写事务效率,参照SWRITE事务的数据包划分方式以及包存储地址的计算方式,将720Bytes的Y数据划分为3个NREAD包,每包传输240Bytes,包存储地址可以由帧基地址、Y分量偏移量和行偏移量计算获得,3个包存储地址连续增加;360字节Cb(或Cr)数据采用两个NREAD事务包发送,并规定两个数据包的有效数据长度分别为184Bytes和176Bytes,存储地址由帧基地址、Cb/Cr分量偏移量和行偏移量计算获得.此外,预定义DSP端数据存储单元是传输机制设计的另一重要组成,如图10所示.预定义DSP端数据存储单元包括SWRITE和NREAD事务的存储地址计算.由于此两种事务地址计算方法相同,故下面以SWRITE事务为例进行说明.FPGA发送的每个SWRITE事务包中携带的数据将被按顺序写入DSP的视频缓冲区中的连续存储空间,为实现高效SRIO传输过程应使用高载荷SWRITE事务包.因此,在综合考虑采集视频过程特点和视频存储计算特点后,规定:(1)TxFifo中数据按视频行L(Line)排列,每行按照720字节Y、360字节Cb(或Cr)数据顺序排列;(2)每个SWRITE事务包中数据只能包含一种分量(即Y/Cb/Cr中的一种),数据存储地址依次连续递增;(3)在DSP视频缓冲区中数据按视频帧F(Frame)存储,每帧数据中同一分量连续存储,组成各分量矩阵,便于DSP完成视频处理.3.3低复杂度SRIO传输方法实现本文在传输视频数据过程中仅使用SWRITE、Page7NREAD和DOORBELL这3种SRIO事务,其中DOORBELL事务仅用来发送中断信号,操作相对MESSAGE更为简洁.同时,使用逻辑与控制较RAM(RandomAccessMemory)简单的FIFO(FirstInFirstOut)存储机制也在一定程度上降低了设计的复杂度,并且节约了FPGA的资源占用.具体实现过程如下:(1)在视频数据由FPGA写入DSP过程中,FPGA作为主动发起端,将模数转换后的数字视频通过SWRITE事务写入DSP对应的DDR3存储区,为保证内存访问的正确性,视频在写DDR3存储区时,DSP不得对该存储区进行操作.当FPGA写完一帧数据之后,发送一个DOORBELL事务,通知DSP可以对该帧数据进行处理,保证FPGA与DSP之间的同步.为了保证DSP上处理的连续性,在DSP上设置了8帧缓冲区,可以循环对数据帧进行处理.(2)在视频数据由DSP写入FPGA的过程中,每当DSP处理完一帧视频之后,发送DOORBELL事务通知FPGA可以进行数据读取.FPGA接收到该同步信号之后,作为主动发起端,将DSP处理后的视频数据通过NREAD事务读入FPGA的RxFifo缓存中.在实际运行过程中,为保证数模转换后视频的连续性,必须维持FPGA端RxFifo缓存不空,同时要兼顾数据采集的帧率.方法中所采集的模拟视频帧率为25帧/秒,即每40ms采集一帧.但在实际采集过程中,帧率会受到摄像头采集图像的复杂程度影响而产生偏差,为了防止出现同步问题,规定在DSP处理完两帧数据后向FPGA发送DOORBELL,使其进行读操作.在读的过程中,FPGA只需维护自己的RxFifo即可.在设计状态机实现读写功能时,以读优先的方式进行操作,设置RxFifo的Prog_empty信号为2000Bytes,即当RxFifo中的数据小于2000Bytes时,进行读操作,否则,进行写操作.在读数据的过程中,不能进行写操作,但此时模拟视频却仍然在实时输入,为了保证读数据的时间内采集用的TxFifo缓冲区不溢出需要计算TxFifo的最大值.具体控制过程如下:(1)SWRITE事务的触发:由于视频是以行为单位进行采集并传输到TxFifo的,因此,为保证行数据结构的完整性,当TxFifo中数据不少于一行(720字节Y,360字节Cb或Cr)且此时没有读请求时,可发送数据,即通过SWRITE事务完成一次写操作.(2)DOORBELL事务的触发:在FPGA向DSP发送数据时,当完成一帧数据的传输且此时没有读请求时,即可通过发送DOORBELL事务通知DSP处理接收到的当前帧数据;在FPGA从DSP读取数据过程中,当DSP处理完两帧视频数据时发送DOORBELL事务通知FPGA读取第一帧数据.(3)NREAD事务的触发:以FPGA端接收缓冲区RxFifo中数据量和DSP发送给FPGA的DOORBELL事务为触发条件,当RxFifo中有多于一行的剩余空间即可组织NREAD事务完成一行数据的读取.另外,规定3种事务发送优先级由高到低分别为NREAD、DOORBELL和SWRITE事务.当NREAD事务发出后,DSP的SRIO硬件接口开始组织响应数据包,响应数据包数据量大,时间紧迫程度高,需要尽早开始响应数据包组织,同时NREAD和DOORBELL事务占用发送周期少,因此NREAD发送优先级最高;DSP收到DOORBELL事务后解锁视频帧存储区,开始视频处理工作,因此DOORBELL优先级高于SWRITE事务.Xinlinx公司的SRIOIP核提供IREQ、IRESP、TREQ、TRESP4个端口.由于本文方法FPGA在读写过程中都是作为传输数据包的发起端,而DSP作为响应端只需接收和发送简洁的DOORBELL信号,其TREQ与TRESP端口实现相对简单.因此,传输过程设计的难度主要集中在FPGA端的IREQ与IRESP两个端口.其中,IREQ模块做为一次事务的开始,负责组织请求数据包;IRESP模块负责接收NREAD的响应数据包.下面将对此两个模块的设计进行详细介绍.3.3.1发起端请求(IREQ)设计发起端请求模块包含以下4部分:CON(Con-troller)、TIK(Tickler)、IGEN(IREQGenerator)和TxFifo.其中,CON是整个IREQ模块的核心控制部分,是一次SRIO请求事务包的起点,它负责检测是否发送数据、控制何时发送数据以及组织数据包信息,CON监控TxFifo状态,控制TIK完成数据包发送;TIK负责具体的数据组织工作,产生数据包包头信息,并将包头信息传递到IGEN,监控IGEN状态并向CON反馈;IGEN负责与IP核的IREQ端口协同将组织好的数据包信息传递给IP核,完整的数据包包括包头信息和数据信息,IGEN的包头信息来自TIK,数据信息可以直接取自TxFifo或接Page8收TIK传递的数据;TxFifo是发送数据缓冲队列.SRIO用户程序IREQ模块结构如图11所示,视频数据依次流经TxFifo和IGEN,最终由IGEN传递到IP核的IREQ端口并通过链路发出.CON是FPGA端所有SRIO请求的发起者,也是FPGA控制SRIO通路数据收发的核心,使用CON模块请求事务状态机完成SRIO通路控制工作,如图12所示.状态机包含6种状态:INIT(Initial)、RDY(Ready)、SW(SWRITE)、DB(DOORBELL)、NR(NREAD)和SEND状态.(1)INIT状态是状态机的初始状态,当SRIO硬件初始化成功后进入RDY状态,否则继续等待;(2)RDY状态表示SRIO链路正常,当发送请求来临并且IP核就绪时,进入对应发送请求状态,若SRIO链路异常,则进入INIT状态;(3)NR、DB和SW状态分别是发送NREAD事务、DOORBELL事务和SWRITE事务状态,每种事务分别组织各自的有效事务信息,当IP核状态就绪时进入SEND状态,否则等待,若SRIO链路出现异常或者中断,则进入RDY状态;(4)SEND状态为SRIO请求事务发送状态,CON模块将组织好的数据信号传递给TIK模块,命令TIK模块开始组织数据包的包头信息,并发送SRIO数据包,当TIK完成数据接收则进入RDY状态,否则继续等待,若出现链路异常或者中断,则进入RDY状态.3.3.2发起端响应(IRESP)设计SRIO用户程序的IRESP模块主要负责接收并解析DSP发送的NREAD响应事务包数据,主要包括IHAN(IRESPHandler)和RxFifo两部分,IHAN负责接收及解析数据包,RxFifo是接收数据缓冲队列.IHAN接收解析数据工作由IHAN模块事务解析状态机控制完成,如图13所示.IHAN状态机只包括3个状态:INIT、RDY和RECV状态.(1)INIT状态是初始状态,表示当前SRIO硬件链路连接仍未建立成功,当SRIO链路建立成功后进入RDY状态,否则等待;(2)RDY状态表示当前IHAN模块处于空闲状态,可以接收响应事务,当响应事务到来时,进入RECV状态,当SRIO链路断开时,进入INIT状态;(3)RECV状态表示当前正在接收IP核IRESP端口数据信息,同时完成向RxFifo写入操作,当数据接收完成时,进入RDY状态,当SRIO链路端口时,进入INIT状态,否则继续接收数据,处于RECV状态.4实验结果4.1实验环境本文视频处理系统选用TI公司的TMS320C6678DSP芯片及XILINX公司的XC5VSX50TFPGA芯片.其中,TMS320C6678有8个TMS320C66xDSP核,单核工作频率为1.0GHz或1.25GHz,其SRIO接口可配置成单通道、双通道或四通道模式,单通道可选择工作在1.25Gbps、2.5Gbps、3.125Gbps和5Gbps4种速率模式下①;XC5VSX50T芯片包含12个GTP串行高速收发器、288个DSP48E硬件模块、8160个Slices、4752KbBlockRAM和6个CMT时钟管理模块②.此外,系统选用Xilinx公司提供的LogiCOREIPSerialRapidIOv5.6版本的SRIOIP核,此款IP核支持Virtex4、Virtex5和Spartan6等系列FPGA,共包括以下3个功能模块:逻辑与传输层模块、缓冲①②Page9区模块及物理层模块.为方便用户进行操作,以上3个模块被集成到RIO_WRAPPER模块中.此外,RIO_WRAPPER模块还提供了RocketIO封装、时钟、复位和寄存器管理模块,为系统提供了硬件支持.除硬件选型外,系统硬件布线参数也会影响SRIFO传输速率,本文使用文献[19]所提方法对系统进行硬件仿真,并参考仿真结果完成PCB设计,本FPGA+DSP异构视频处理系统实物图如图14所示.图14FPGA+DSP异构视频处理系统实物4.2SRIO传输速率测试本文将SRIO总线速率设置为1.25Gbps模式,由于SRIO总线物理层采用8b/10b编码,因此SRIO传输理论带宽为1Gbps.由于本文提出的方法中SWRITE事务、NREAD事务都是由FPGA发起的,因此,在FPGA端需要按照各种事务优先级顺序分时复用IREQ端口进行数据收发;另一方面,由于传输过程中的数据打包需要占用一定时间和空间开销,因此,SRIO实际传输速率跟理论值是有一定差距的.基于上述实验设定,针对FPGA+DSP异构视频处理系统,本文需要测试FPGA通过SWRITE事务与NREAD事务读写DSP端DDR3存储器的速率,并对FPGA资源使用情况进行测试.由于受到硬件系统中调试工具的限制,不能通过计算机实时反馈硬件工作状态.故在测试本文方法SRIO链路发送与接收数据速率时,通过检查1s时间内DDR3存储器中写入数据长度得到FPGA向DSP发送数据的速率;类似地,通过检查1s时间内FPGA收到数据包的数量得到FPGA读取DSP的速率.(1)SWRITE事务速率测试为测试本文方法FPGA的SRIO发送速率,在一秒钟时间内FPGA不间断发送特定图像数据到DSP的DDR3存储器中,发送结束后通过CCS工具及DSP仿真器导出DDR3存储内容,在计算机上检查写入数据长度,该数据长度即是FPGA的SRIO发送速率.本文对SWRITE事务进行测试,检查DDR3存储内容,发现写入数据符合递增规律,数据正确无误,平均每秒写入数据长度880Mb,即FPGA向DSP通过SRIO发送速率为880Mbps,达到传输速率理论值的86%,SRIO写速率测试表如表2所示.次数123(2)NREAD事务速率测试为测试本文方法FPGA通过SRIO读取DDR3的速率和正确性,在一秒时间内,由FPGA向DSP连续发送NREAD请求事务,在FPGA端接收NREAD响应事务,检查收到数据正确性并记录收到的数据包数量,通过ChipScope工具及FPGA仿真器检查数据正确性标志位及数据包数量.本文测试平均读速度为829Mbps,达到传输速率理论值的81%,数据正确无误,SRIO读速率测试表如表3所示.次数123(3)方法比较本节将对SRIO的读速率、写速率以及SRIO事务类型3方面对本文方法与其他文献方法进行对比分析.表4为本文方法与其他文献方法在SRIO读写速率方面的对比表.其中,文献[8]为未加任何优化的传统方法,采用SRIO的1.25Gbps的工作模式,由于此文未对传输方法进行优化,其读写速率均较低,只能达到理论带宽的25%左右.文献[9]通过在FPGA端采用乒乓存储结构保障视频数据传输流畅性的同时,在DSP端预定义了数据接收的存储单元,此文SRIO工作在3.125Gbps的工作模式下,传输速率为2320Mbps,约占理论带宽的74%.从表2中可以看出当SRIO同样工作在1.25Gbps模式时,本文方法在读写速率上明显优于文献[8]方法,可以达到829Mbps以上.由于文献[9]方法工作在3.125Gbps与本文不同,故我们针对SRIO的读写传输效率进行对比,本文也具有较明显优势.Page10表4SRIO传输速率的对比表文献[8]方法(1.25Gbps)文献[9]方法(3.125Gbps)本文方法(1.25Gbps)在SRIO使用的事务类型方面,文献[8]采用NREAD、NWRITE、DOORBELL与MAINTENCE4种SRIO事务,比本文多了一种事务,在设计上更为复杂,此外,NWRITE事务在IREQ端需要控制18种信号,而本文采用的SWRITE事务相比NWRITE减少了数据包事务类型、数据包编号、打包字节使能和打包字节计数4种信号,因此只需控制14种信号即可,也一定程度上降低了设计复杂度.由于文献[9]系统中只涉及FPGA向DSP写数据,故SRIO未使用读相关的事务,但是其使用的NWRITE_R为带响应的写操作,实现相对复杂.4.3FPGA资源占用测试本文FPGA作为视频传输的核心控制器,其资源占用情况也是衡量视频数据高效传输的重要指标之一.除FPGA的SliceRegisters、LookUpTable(LUT)和BlockRAM/FIFO这3种资源外,数据传输过程中用于FPGA与DSP间数据读写同步的DSP中断次数也会影响传输效率.过多的中断次数会增加FPGA与DSP间的交互时间,带来DSP的编码延迟,从而降低数据传输和处理效率,表5为本文方法与其他方法在FPGA资源占用上的对比表,考虑到中断次数对传输效率的影响,故在表中加入一行中断次数的统计.NumberofSliceRegistersNumberofSliceLUTsNumberofBlockRAM/FIFODSP中断次数/帧由表5可知,与直接方法和文献[11]方法相比,本文提出的视频传输方法对FPGA中SliceRegisters和LUT占用较少.在存储资源方面,由于直接方法是在FPGA内部完成视频采集时奇偶场的合并,故需要占用大量的FPGA片上存储资源BlockRAM/257-829FIFO,而本文方法在FPGA处理器上只需以行为单位缓存及传输视频数据,视频的奇偶场合并在DSP处理器上实现,因此本文方法相比直接方法在FPGA存储资源占用上有了明显地减少;相比文献[11]方法,本文方法无需外接RAM,减少存储资源占用的同时降低了硬件设计的复杂度.在与DSP的交互方面,文献[11]方法通过DSP中断方式同步FPGA与DSP之间的数据传输过程,在FPGA向DSP发送1帧视频数据完成后,发送第1次中断通知DSP进行数据处理,当DSP处理完1/4帧数据时,由FPGA发送第2次中断通知DSP发送处理后的1/4帧数据,以此类推,当DSP将完整的1帧处理后的数据发送至FPGA需要4次中断,故此方法FPGA发送与接收1帧数据共需要5次中断;而直接方法中FPGA是在检测到DSP存储器中有数据后就发中断进行取数,因此读取1帧视频数据需要比文献[11]多的中断次数;相比之下,本文提出的方法传输一帧图像仅需要两次中断即可实现FPGA与DSP的同步.数据的传输过程相对DSP完全透明,使FPGA能专注于传输控制,DSP专注于视频处理,有效保障了视频传输效率.5总结针对FPGA+DSP异构处理器结构特征和视频数据格式特征,本文提出了一种以FPGA作为传输核心的SRIO高效传输方法.该方法通过在FPGA处理器上采用视频三分量数据重组方法并使用包头信息较短的SWRITE事务简化视频传输格式的同时提高SRIO视频数据包的传输效率;通过在DSP处理器上预定义接收端数据存储单元和采用简洁的DOORBELL应答机制节约了DSP在传输过程中的时间开销.在方法实现上,本文仅采用3种SRIO事务,降低了设计的复杂度.实验结果表明,本文方法在占用较少FPGA片上资源的条件下,读写速率可达SRIO理论值的81%以上,可满足六路D1视频或单路高清视频传输需求.在实际工程中,可通过提高SRIO单通道工作频率或采用多通Page11道传输等方式进一步提高方法传输速率,以满足更多路标清乃至多路高清视频大数据量的传输需求.
