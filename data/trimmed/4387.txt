Page1PN2MSVL:工作流网到MSVL的转换师亚段振华田聪(西安电子科技大学计算理论与技术研究所西安710071)(西安电子科技大学ISN国家重点实验室西安710071)摘要现有的工作流网到程序设计语言的转换所生成的程序不仅可读性较差而且难以进行验证.针对这一情况,该文给出了一个工作流网到建模、仿真和验证语言(MSVL)的结构化转换工具PN2MSVL.该文首先定义了注释工作流网,然后以注释工作流网为中间模型,利用一组转换规则不断地压缩注释工作流网中的正规结构,最终得到MSVL程序.PN2MSVL生成的MSVL程序不仅具备更好的可读性,而且可以利用MSVL的支持工具MSV进行建模、仿真和验证.另外,该文通过一个应用实例详细地展示了PN2MSVL的执行过程,并通过大量的实验分析了PN2MSVL的可用性.关键词工作流网;建模;仿真;验证;转换;Petri网1引言作为Petri网[1]的一个子集,工作流网[2]适用于Page2证[1,3].目前存在一些工具(例如CPN[4])支持工作流网的仿真和验证.为了提高软件系统的可靠性,在开发过程中可以首先使用工作流网建立直观模型,并且验证该模型是否满足一些关键属性,如果不满足则修改该模型直至其满足这些关键属性.然后利用人工编程或者自动转换工具从工作流网模型获得原型系统.最后对原型系统进行细化从而得到最终的系统.因为人工编程存在一些固有的缺点,例如繁重的工作量和极大的出错风险,另外自动转换工具能更好地应对模型变更,所以人们不断研究工作流网到程序设计语言的自动转换.考虑到生成的程序的可读性、可扩展性和执行效率,结构化转换方法[5-13]受到青睐.结构化转换方法基于一组转换规则,可以将行为结构,例如顺序、选择、循环和并发结构,转换成程序设计语言中对应的结构化语句.现有结构化转换方法的缺点是对复杂结构缺乏理想的转换规则.目前对复杂结构的转换大致分为3种方式:方式1,利用某些程序设计语言的特殊语句直接转换部分复杂结构.例如,在工作流网到业务流程执行语言(BusinessProcessExecu-tionLanguage,BPEL)的转换中[5-6],因为BPEL的flow语句可以利用控制链描述结构中变迁的发生顺序,所以一些不含循环的复杂结构被转换成flow语句.但是这种转换很难扩展到一般的程序设计语言,而且生成的程序的可读性较差.方式2,引入人工转换数据库[5],即对复杂结构采用人工转换的方式来处理,并将该结构和人工转换得到的程序储存在数据库中以备下次重用.但是这种转换违背了自动化转换这一初衷,而且效率较低.方式3,在转换前预先对复杂结构进行结构化处理[6,10-13].例如,对含循环的复杂结构文献[6],先将其展开成无循环的简单结构然后再进行转换.虽然结构化的工作流网到程序设计语言的转换很简单,但是经过结构化处理的工作流网的规模会增大,这导致最终生成的程序规模庞大且可读性差.另外,有些工作流网没有等价的结构化模型[12].由此可见,工作流网到程序设计语言的结构化转换仍然存在很多困难.除此之外,因为现有的结构化转换方法大都以非形式化程序设计语言为目标语言,所以难以对生成的程序进行验证,无法确保其是否满足一些关键属性.MSVL[14]是投影时序逻辑[15]的一个可执行子集,包含赋值、顺序、条件、循环、等待、并行和投影等语句.作为形式化程序设计语言,MSVL既可以像一般程序设计语言一样执行,又可以像PROMELA一样为并发系统建模,还可以使用模型检测技术和定理证明技术[16]验证程序的一些关键属性.现有的工具MSV[14]支持MSVL的统一模型检测[14]、符号模型检测[17]和限界模型检测[18].本文研究了工作流网到MSVL的结构化转换[19],并开发了自动转换工具PN2MSVL.在系统开发过程中可以利用PN2MSVL从经过验证的工作流网模型自动生成与其对应的MSVL程序(原型系统),随后对该程序进行细化和验证从而得到满足关键属性的系统.PN2MSVL首先为工作流网添加条件注释和语句注释,从而得到注释工作流网;然后使用一组转换规则不断地压缩注释工作流网中的正规结构,直到注释工作流网中只包含一个变迁;最后为该变迁的语句注释添加初始化、区间框架和过程定义语句,从而生成最终的MSVL程序.该工具的优点在于:(1)不但引入了删除冗余库所的化简规则,而且扩展了现有转换规则使得它们可以适用于更多结构.特别是针对复杂循环结构、复杂选择结构、并发结构和不规则结构,提出了新的转换规则.这些丰富的转换规则保证生成的MSVL程序具备较高的可读性;(2)对生成的MSVL程序可以利用工具MSV进行仿真、建模和验证;(3)该工具使用的MSVL语句大都是常用的程序设计语句,容易扩展到其他程序设计语言.本文以一个投诉管理系统[20]的工作流网为例详细地展示了PN2MSVL的执行过程.然后使用MSV对生成的MSVL程序进行仿真、建模,并验证由命题投影时序逻辑[14]公式描述的属性.另外,通过大量的实验分析了PN2MSVL中每个转换规则的使用频率和对MSVL程序可读性的影响.最后,对PN2MSVL的转换规则和现有结构化转换方法的转换规则做了详细对比.本文第2节介绍工作流网和MSVL;第3节简要介绍工作流网到MSVL的转换方法;第4节展示工具PN2MSVL的一个应用实例;第5节给出实验和分析结果;第6节讨论相关工作;最后一节总结全文并展望下一步工作.2基础概念本节简单介绍工作流网和MSVL.定义1.Petri网N=(P,T,F)是工作流网2.1工作流网(WorkFlowNet,WFN)[2]当且仅当:Page3(1)存在一个源库所i∈P满足·i=;(2)存在一个漏库所o∈P满足o·=;(3)每个节点x∈P∪T在一条从i到o的路径上.工作流网系统是一个四元组Σ=(P,T,F,M0),其中N=(P,T,F)是工作流网,M0是初始标识.通常,M0只在源库所i中放置一个托肯,即M0={i}.工作流网N=(P,T,F)是合理的(sound)[21]当(1)M,({i}[>M)(M[>{o});(2)M,({i}[>M∧M{o})(M={o});(3)t∈T,M,M,{i}[>M[t>M.Petri网N=(P,T,F)是自由选择网(freechoicenet)[22]当且仅当t1,t2∈T,·t1∩·t2≠·t1=·t2.在实践中通常只会将经过验证的工作流网转换成可执行的程序.合理性是设计良好的工作流网所具备的基本属性.另外,作为Petri网的一个重要子集,自由选择网很好地平衡了可分析性和表达能力,具备良好的理论结果和高效的分析技术[22].因此本文只讨论转换合理的自由选择工作流网.2.2MSVL集,它的表达式定义如下:MSVL[14]是投影时序逻辑[15]的一个可执行子且仅当:e····=nsxb····=true|falsee0=e1bb0∧b1其中n是整数,s是字符串,x是变量.MSVL的语句定义如表1所示,其中e是表达式,每个bi是布尔表达式,每个pi代表MSVL的语句,i∈{1,2,…,m},每个xj是变量,j∈{1,2,…,n}.x1e表示在当前状态,x1的值等于e的值,同时将与x1绑定的命题px1设为true;x1··=e表示在下一状态,x1的值等于e的当前值,同时将与x1绑定的命题px1设为true;顺序语句、条件语句和循环语句与传统的命令式语言相同;(p1)or(p2)表示执行p1和p2中的一个;(b1→p1)[]…[](bm→pm)表示如果所有条件都为假,那么程序中止,否则随机选择条件bi为真的pi执行;(p1)‖(p2)表示p1和p2并行执行,而且同时开始并可以异步结束;frame(x1,…,xn)表示如果没有碰到xj的赋值语句,那么xj的值保持不变;await(b1)表示该进程直到条件b1为真,该语句不改变任何变量的值;skip表示区间上的一个单位时间.我们已经开发了MSVL的支持工具MSV.该工具有3种工作模式:仿真模式、建模模式和验证模式.在仿真模式下执行MSVL程序;在建模模式下通过建立范式图[23]来表现MSVL程序的所有状态;在验证模式下验证MSVL程序是否满足用命题投影时序逻辑公式描述的属性.3工作流网到MSVL的转换本节简要介绍工作流网到MSVL的转换[19],并证明转换规则的完备性.首先介绍一些与转换相关的基本概念.令N=(P,T,F)是Petri网,XP∪T是N的节点子集.N是标准的当且仅当存在两个节点stN和endN使得N的每个节点都出现在一条从stN到endN的路径上.N到X的投影是N的子网,记作N|X=(P|X,T|X,F|X),其中P|X=P∩X,T|X=T∩X,F|X=F∩(X×X).对于每个x∈X,令·x|X=·x∩X,x·|X=x·∩X.N|X是自治的当且仅当N|X是标准的,(·stN|X∪endN|XX,其中X=X\{stN|X,endN|X}.定义2.注释工作流网(AnnotatedWFN,AWFN)是一个多元组AN=(P,T,F,G,L),其中N=(P,T,F)是工作流网;G和L分别是变迁的条件注释和语句注释.对于每个变迁t∈T,G(t)是MSVL布尔表达式,L(t)是MSVL语句.注释工作流网被用作工作流网到MSVL转换的中间模型.令N=(P,T,F)是合理的自由选择工作流网.为了将N最终转换成MSVL程序,首先将N转换成注释工作流网AN=(P,T,F,G,L),满足t∈T,G(t)=true,L(t)=t(),其中t()在最终生成的MSVL程序中被定义为definet(){p1··=0and…andpm··=0and其中·t\t·={p1,…,pm},t·={q1,…,qn}.对于每个库所p∈·t∪t·存在一个变量p,该变量用于记录库Page4所p中托肯的数量;变迁t的语句注释L(t)描述t执行时对其输入库所和输出库所产生的影响.为了将AN转换成MSVL程序,我们在文献[19]中定义了一组转换规则.这些规则包括:删除冗余库所(RemovalofRedundantPlace,RRP)、合并顺序结构(FoldingSequenceStructure,FSS)、合并显示选择结构(FoldingExplicitChoiceStructure,FECS)、合并简单循环结构(FoldingSimpleloopStructure,FSLS)、合并复杂循环结构(FoldingComplexLoopStructure,FCLS)、合并复杂选择结构(FoldingComplexChoiceStructure,FCCS)、合并并发结构(FoldingConcurrentStructure,FCoS)以及合并不规则结构(FoldingIrregularStructure,FIS).每个转换规则可以转换AN中的一种正规结构[19].直观地讲,RRP可以删除冗余库所,并且不改变模型的行为.其他每个转换规则可以将一种正规结构压缩成一个新的变迁,并且根据该结构的行为构造一个布尔表达式和一条语句,分别作为新变迁的条件注释和语句注释.很显然,对于越复杂的正规结构,用于描述其行为的MSVL语句就越复杂.当注释工作流网中存在多个正规结构时,为了确保生成的程序具有较高的可读性,总会优先转换最简单的正规结构.因此,这些转换规则按照使用优先级从高到底排列依次为RRP、FSS、FECS、FSLS、FCLS、FCCS、FCoS、FIS.通过反复地应用这些规则可以将AN压缩到只含一个变迁d.L(d)描述了原工作流网N的所有行为.最终为L(d)添加初始化、区间框架和过程定义语句,得到如下程序:frame(p1,…,pa,v1,…,vb)andp11andp20and…andpa0andv1i0and…andvji0andv1s“NULL”and…andvks“NULL”and(definet(){p1t··=0and…andpmt··=0andq1t··=1and…andqnt··=1};…L(d))其中对于每个库所p∈P={p1,…,pa}都存在一个变量p.p1是源库所,所以变量p1的初值为1.v1i,…,vji(v1s,…,vks)是整个转换过程中添加的整型(字符串型)辅助变量,且初值为0(“NULL”).对于每个变迁t∈T存在一个过程定义语句,其中·t\t·={p1t,…,pmt},t·={q1t,…,qnt},L(d)会调用这些过程.本节最后证明转换规则的完备性,首先介绍两个引理.引理1.对一个合理的自由选择注释工作流网只能应用有限多次FSLS.证明.令N是一个合理的自由选择注释工作流网,N=(P,T,F,G,L)是对N应用有限多次转换规则得到的注释网,N|X是N的一个简单循环结构,其中T|X={d}.d可能是N的变迁,也可能是由转换规则添加的变迁.由简单循环结构的定义可得,p∈P|X,·p\X≠,p·\X≠,·p|X≠,p·|X≠.因此p∈P|X,|·p|>1,|p·|>1.因为N中满足|·p|>1和|p·|>1的库所p是有限多的,所有转换规则都不添加这种库所,而且FSLS会删除被处理结构中的这种库所,所以对N只能应用有限多次FSLS.引理2.如果合理的自由选择注释工作流网N含有多个变迁,那么对N总可以应用转换规则.证明.令N是一个合理的自由选择注释工作流网而且含有多个变迁.因为N是工作流网,所以N是自治的.如果N含有比N小的正规结构N|X,那么可以对N|X应用对应的转换规则.否则,如果N是除不规则结构之外的正规结构,那么可以直接对N应用对应的转换规则.否则,因为N是自治的,含有多个变迁,而且不含除不规则结构之外的正规结构,所以N是不规则结构.又因为N不含比N小的正规结构,所以N是最小不规则结构.那么可以直接对整个N应用FIS.因此对N总可以应用转换规则.定理1.RRP、FSS、FECS、FSLS、FCLS、FCCS、FCoS和FIS是完备的,即反复应用这些转换规则可以将一个合理的自由选择注释工作流网压缩到只有一个变迁.证明.令N=(P,T,F,G,L)是一个合理的自由选择注释工作流网,N=(P,T,F,G,L)是由转换规则处理正规结构N|X得到的注释网.由这些转换规则的定义可得,如果N|X是除简单循环结构之外的正规结构,那么|P∪T|<|P∪T|,否则|P∪T|>|P∪T|.由引理1可得,对N只能应用有限多次FSLS,所以在对N的转换过程中当不能再应用FSLS时,N的节点是有限多的,之后应用的转换规则总会减少N的节点.由引理2可得,如果N有多个变迁,那么对N总可以应用转换规则.因此反复应用所有规则可以将N压缩到只有一个变迁.证毕.4应用实例本节通过一个应用实例详细地展示PN2MSVL如何将工作流网转换成MSVL程序,以及如何使用Page5工具MSV对生成的MSVL程序进行仿真、建模和验证.4.1工作流网到MSVL的转换实例图1中的工作流网描述的是一个投诉管理系统的工作流程[20]:对收到的每个投诉,首先进行注册t0,然后进行分类t1.若是无理投诉,则自动忽略该投诉t2;若是简单投诉,则自动匹配处理方案t3,然后告知管理部门t5;若是复杂投诉,则首先告知被投诉的部门t4,然后同时联系用户t6和管理部门t7,通过协商得出处理方案t8.在整个处理过程中,投诉者随时可以通过该系统查询投诉的处理进度t9或者撤销投诉t10.最后对投诉进行归档t11.显然,该工作流网是一个合理的自由选择工作流网,所以可以使用PN2MSVL将它转换成MSVL程序.首先使用工具Workcraft建立该工作流网,并保存为文件complaint.g,然后使用PN2MSVL转换该工作流网,如图2所示.所示.中对于每个变迁t,G(t)=true,L(t)=t().流网直到其只包含一个变迁,如图2下方所示.PN2MSVL中工作流网的具体的转换过程如下步骤1.将该工作流网转换成注释工作流网,其步骤2.反复地应用转换规则压缩该注释工作步骤2中每个转换规则的执行细节如下所示.PN2MSVL应用FSS压缩图1中的顺序结构R1,得到图3中的变迁d1,其中PN2MSVL首先应用FECS转换图3中的显示选择结构R2,然后应用FSLS转换图3中的简单循环结构R3,分别得到图4中的d2和d3,其中G(d2)=G(t2)orG(d1),L(d2)=(G(t2)→L(t2))[](G(d1)→L(d1)),G(d3)=true,L(d3)=over3··=0;PN2MSVL首先应用FSS转换图4中的顺序结构R4,然后应用FCoS转换图4中的并发结构R5,分别得到图5中的d4和d5,其中PN2MSVL首先应用两次FSS转换图5中的顺序结构R6,然后应用FECS转换图5中的显示选择结构R7,最终得到图6中的d8,其中G(d8)=G(d2)orG(t4),L(d8)=(G(d2)→L(d2))[]Page6PN2MSVL首先应用FSS转换图6中的顺序结构R8,然后应用FCoS转换图6中的并发结构R9,最终得到图7中的d10,其中G(d10)=true,L(d10)=(L(t1);L(d8))‖(L(d4)).PN2MSVL应用两次FSS转换图7,最终得到图8中的d12,其中步骤3:PN2MSVL为L(d12)添加初始化、区间框架和过程定义语句得到最终的MSVL程序,如图9所示.由于原工作流网的结构比较简单,所以在转换过程中并未使用到复杂的转换规则,例如FCLS、FCCS和FIS等,使得生成的MSVL程序具有很高的可读性.4.2对MSVL程序进行仿真、建模和验证本小节使用工具MSV对生成的MSVL程序进行仿真、建模和验证.MSV在仿真模式下执行该MSVL程序,如图10所示,本次执行路径共有7个状态.由state6可知本次执行终止时p11=1,其余库所对应的变量的值都为0.原工作流网的每次完整执行都终止在状态{p11},这两者是一致的.MSV在建模模式下生成该MSVL程序的范式图[23],如图11所示.范式图使用边来表示程序的状态.图12展示的是该范式图部分边的信息.由图11可知该MSVL程序的每次执行都终止于边Edge6.由图12可知在Edge6上p11=1,其余库所对应的变量的值都为0.这与原工作流网每次完整执行都终止于状态{p11}也是一致的.图11建模模式下生成的MSVL程序的范式图足两个用命题投影时序逻辑公式描述的属性.MSV在验证模式下验证该MSVL程序是否满属性1:其中Q、S和U分别是p2=1、p3=1和p4=1.该属性的直观含义是p2=1终将会成立,而且p3=1也终将会成立,这两者都成立之后p4=1终将会成立.Page7验证结果如图13左侧所示.属性2:其中V和W分别是p5=1和p8=1.该属性的直观含义是p5=1终将会成立,而且p8=1也终将会成立.验证结果如图13右侧所示.图13验证模式下的两种不同属性的验证结果5实验与分析本节通过实验分析PN2MSVL中每个规则的使用频率和对MSVL程序可读性的影响.首先让不了解PN2MSVL的学生构造了100个合理的自由选择工作流网,然后使用PN2MSVL依次转换这些模型.为了分析每个规则的使用频率,只需统计转换过程中每个规则的总使用次数.为了分析每个规则对MSVL程序可读性的影响,首先要量化可读性这一概念.PN2MSVL生成的MSVL程序中含有两类变量:一类是为每个库所p添加的变量p,该变量只由其输入和输出变迁t∈·p∪p·对应的过程t()进行操作;另一类是由转换规则添加的辅助变量,这类变量用于控制程序的执行.观察PN2MSVL生成的MSVL程序容易发现辅助变量越多,程序的可读性通常就越低,因此可以通过统计每个规则添加的辅助变量的总数来分析它对MS-VL程序可读性的影响.图14展示了转换这100个模型的过程中每个转换规则的总使用次数和每个转换规则添加的辅助变量的总数.由转换规则的定义可知,删除冗余库所规则、合并顺序结构规则和合并显示选择结构规则都不添加辅助变量.合并简单循环结构规则每次添加一个辅助变量.合并复杂循环结构规则和合并复杂选择结构规则每次添加两个辅助变量.合并并发结构规则和合并不规则结构规则每次添加的辅助变量的个数由被处理结构的复杂情况而定.图14中所示的实验结果与上述分析完全一致.除此之外,由图14可见使用频率最高的规则是合并顺序结构规则,该规则的使用次数占到所有规则的使用次数的55.0%.添加辅助变量最多的规则是合并不规则结构规则,由其添加的辅助变量占所有辅助变量的64.3%,因此该规则对MSVL程序可读性的影响最严重.幸运的是该规则的使用频率较低,占到所有规则的使用次数的5.8%.由此可知,为了提高MSVL程序的可读性,应该提出添加更少辅助变量的转换规则,从而降低合并不规则结构规则的使用频率并且减少添加辅助变量的个数.另外由图14可见合并复杂循环结构规则的总使用次数明显高于合并复杂选择结构规则的总使用次数.这是因为合并复杂循环结构规则的优先级比合并复杂选择结构规则的优先级高,而且有时合并复杂循环结构规则会间接地消除掉一些复杂选择结构.例如,在图15所示的注释工作流网N=(P,T,F,G,L)中,虚线矩形R1中有一个复杂循环结构,虚线矩形R2中有一个复杂选择结构.PN2MSVL优先应用合并复杂循环结构规则处理R1中的循环结构,得到如图16所示的注释网N=(P,T,F,G,L),其中L(t0)=L(t0);LPNext1··=“p0”,G(t5)=G(t5)andLPOut1=“p2”,L(t5)=LPOut1··=“NULL”;L(t5),G(t4)=G(t4)andLPOut1=“p1”,L(t4)=LPOut1··=“NULL”;L(t4),G(d1)=true,L(d1)=while((LPNext1=“NULL”)){if(LPNext1=“p0”)then{LPNext1··=“p0”;L(t1);(G(t4)→{LPNext1··=“NULL”andLPOut1··=“p1”})[](G(t2)→{L(t2);(G(t5)→LPNext1··=“NULL”andLPOut1··=“p2”)[](G(t3)→L(t3))})}}Page8对比图15和图16可见,合并复杂循环结构规则间接地消除了图15中的复杂选择结构,并在图16中的虚线矩形R3中添加了一个显示选择结构.另外,合并复杂选择结构规则有时会引入“虚假”复杂循环结构.例如,在图17所示的注释工作流网N=(P,T,F,G,L)中,虚线矩形R1中有一个复杂选择结构.PN2MSVL应用合并复杂选择结构规则转换该结构,得到如图18所示的注释网N=(P,T,F,G,L),其中L(t0)=L(t0);CCNext1··=“p0”,G(t5)=G(t5)andCCOut1=“p2”,L(t5)=CCOut1··=“NULL”;L(t5);CCNext1··=“p1”,G(t6)=G(t6)andCCOut1=“p3”,L(t6)=CCOut1··=“NULL”;L(t6),G(d1)=true,L(d1)=(CCNext1=“p0”andG(t1)orCCNext1=“p1”→{if(CCNext1=“p0”)then{CCNext1··=“p1”;L(t1)}if(CCNext1=“p1”)then{CCNext1··=“NULL”;L(t2);CCNext1··=“NULL”andCCOut1··=“p3”}})[](CCNext1=“p0”andG(t3)→{if(CCNext1=“p0”)then{CCNext1··=“NULL”;L(t3);(G(t5)→{CCNext1··=“NULL”andCCOut1··=“p2”})[](G(t4)→{L(t4);CCNext1··=“NULL”andCCOut1··=“p3”})}})对比图17和图18可见,合并复杂选择结构规则在图18中的虚线矩形R2中添加了一个复杂循环结构.该结构最终会被合并复杂循环结构规则转换,并且在生成的MSVL程序中会有一个对应的循环语句,但是该循环语句不会真正地循环执行.6相关工作本节对PN2MSVL的转换规则和现有结构化转换方法的转换规则做详细对比.这是第一次将删除冗余库所规则应用到工作流网到程序设计语言的结构化转换中.该规则在不影响模型控制流的前提下通过删除冗余库所对模型的结构进行简化.通常模型的结构越简单,生成的MSVL程序的可读性就越高.例如,图19中存在一个冗余库所结构N|X,其中P|X={p2,p3}.如果应用删除冗余库所规则,那么会得到图20所示的模型,显然该模型的结构更简单.进一步应用合并复杂循环结构规则转换图20中的复杂循环结构,最终生成的MSVL程序中只有2个辅助变量.如果没有删除冗余库所规则,那么就只能应用合并不规则结构规则处理虚线矩形R1中的不规则结构,最终生成的MSVL程序中有4个辅助变量.合并顺序结构规则是最普遍的转换规则,PN2MSVL定义的顺序结构由两个变迁和一个库所构成.虽然现有结构化转换方法定义的顺序结构一般可以包含更多的变迁,但是PN2MSVL可以通过Page9多次执行合并顺序结构规则从而达到相同的效果.而且PN2MSVL的合并顺序结构规则更容易实现.合并显示选择结构规则和合并简单循环结构规则也是较为普遍的转换规则.PN2MSVL尽可能地放松了这两个转换规则的应用条件.现有的结构化转换方法中的类似转换规则通常有一些不必要的限制.例如vanderAalst等人[5]和Lassen等人[8]都要求选择结构中的所有变迁和循环结构中循环执行的变迁都只能有一个输入库所和一个输出库所.他们的方法无法转换图21中的显示选择结构和图22中的简单循环结构.由此可见PN2MSVL的这两个规则有更广的应用范围.这可以降低合并不规则结构规则的使用频率,提高生成的MSVL程序的可读性.合并复杂循环结构规则和合并复杂选择结构规则都将被处理的结构直接合并成一个新变迁.但是对于复杂循环结构和复杂选择结构,现有结构化转换方法很难如此处理.例如对于复杂循环结构Kleine等人[9]会先将其展开成不含循环的结构然后再进行处理.这种操作会引入更多新变迁,而且在这些新变迁上有很多重复的语句注释,从而使得最终生成的程序不仅规模庞大而且可读性差.现有结构化转换方法中转换并发结构和不规则结构的规则都很难扩展到其他程序设计语言.例如vanderAalst等人[5]和Kleine等人[9]在将工作流网转换到BPEL时直接使用flow语句来转换并发结构和一些不含循环的不规则结构.Lassen等人[8]在将有色控制流网转换到Java时使用了很多Java现有的方法(例如getState和join等)来转换并发结构.而PN2MSVL在转换这两类结构时使用的大都是常用的程序设计语句.另外PN2MSVL的合并不规则结构规则可以处理合理的自由选择工作流网中所有的最小不规则结构,然而vanderAalst等人[5]和Lassen等人[8]有时需要引入人工转换.7结论和展望本文介绍了一个工作流网到MSVL的结构化转换方法和支持工具PN2MSVL.相比现有的结构化转换方法,PN2MSVL生成的MSVL程序不仅具有更高的可读性,而且可以进行仿真、建模和验证.在今后的工作中,我们将会提出引入更少辅助变量的转换规则,从而进一步提高生成的MSVL程序的可读性.
