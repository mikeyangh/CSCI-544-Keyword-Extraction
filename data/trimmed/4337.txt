Page1基于自适应安全区域的轨道实时化简方法李文海1),2)程志光1)文卫东1)向隆刚3)郭晓倩1)1)(武汉大学计算机学院武汉430072)2)(软件工程国家重点实验室武汉430072)3)(测绘遥感信息工程国家重点实验室武汉430079)摘要利用采样思想在移动端对原始位置序列进行即时处理,移动轨迹实时化简为服务端提供误差可控的简化序列.由于移动规律、运动方向、运动速率等变化因素的不可预知,现有方法的插值还原精度和轨迹化简率易受到运动特征局部变化的影响.在已有工作基础上,利用采样点速率和方向矢量为轨迹建立总体和局部两个层次的误差度量.通过定义安全区域LDAR和TVAR限制插值点的误差范围,将相邻关键点之间的总体误差和相邻轨迹点之间的局部误差的容差范围作为采样监督参数,构造自适应于轨迹方向和速率的实时化简算法.实验结果表明,文中提出的算法对于平稳轨迹能够进行高效的实时化简.同时,对于速率和方向等参数的波动也较现有的推算定位方法有更强的鲁棒性.关键词推算定位;安全区域;轨迹化简;移动对象;时空数据库1引言伴随移动设备的日益普及和获取技术的快速发展,经由各类传感设备获取的位置信息显著增长.与此同时,随着基于位置服务(LocationBasedServices,LBS)的深入应用,轨迹数据的简化表达对模式发现和序列挖掘等面向轨迹的数据分析任务起到至关重要的作用.轨道化简常用采样原理对原始轨迹进行简化,通过对采样后的轨迹序列进行插值获取任意时刻的对象位置,插值位置与原始位置之间的欧氏距离被作为化简算法的质量指标.近年来,利用移动端实时完成轨道化简过程已成为移动数据处理的研究热点之一.由于能够有效减少服务器负载和降低通信代价,这一方法对移动数据的处理、分析和应用[1-4]有重要的意义.2相关工作轨道化简方法研究主要沿着轨道压缩[5]、推算定位[6]和区域过滤[7]3种思路展开.轨道压缩方法主要应用于早期的轨道离线应用场景,通过引入压缩算法和线化简算法等方法对历史轨迹数据进行化简.这类方法压缩率较高,但压缩效率较低,不利于轨道数据的远程实时压缩[8].基于推算定位的方法以位置预测为应用场景,通过引入最大偏离误差阈值对未来位置进行预测[9]和对显著轨迹进行识别.这类方法一般用于联机化简,其轨道误差常采用线段迭代分割方法进行控制.推算定位法依赖于速度矢量的精度,当速度由已有轨迹进行估计时,估计的误差影响使得推算精度难以控制[10].基于区域过滤的方法通过速率和方向参考,依据历史信息为待测轨迹点定义安全区域,根据待测点与其安全区域之间的拓扑关系决定关键轨迹点.源于对局部移动参数进行监督,该方法能够较好处理总体运动一致的轨道化简;但由于缺乏对方向变化累计所带来的简化误差的考虑,该方法在处理渐变轨道时误差较大,且部分采取速度和方向绝对阈值的优化思路在处理不稳定参数时化简率难以提高[11].在局部化简算法方面,对于离线轨道数据化简的高复杂度,直接的作法是采用垂线(Hausdorff)距离作为误差度量指标[12],通过定义点线误差使用最大距离点迭代提取轨道的关键点.但是这一垂线方法没有考虑时态距离,通过垂线近似插值误差会导致全局的平均误差较大.针对这一不足,文献[11]利用时间、空间定义公制距离对轨道垂线距离进行纠正,将原始点及其时态映射点之间的欧氏空间距离定义为误差,并据此迭代生成关键点.考虑到迭代化简的效率和时效性较低,难以用于轨迹的实时化简,大量研究基于分治思想对其进行优化.现有的基于推算定位的轨迹化简方法[10,13-16]需要首先确定一个总体轨迹段,然后针对所缓存的轨迹段应用轨道压缩算法阶段性地获取最优轨迹点集.基于对历史轨迹的划分,GRTS[13](GenericRemoteTrajectorySimplification)将轨迹点分成稳定轨迹、可变轨迹和预测轨迹,通过可变轨迹推算预测轨迹点,并利用原始点与预测点之间的距离对新进点进行过滤.由于GRTS变长段的设定,远程接收的实效性得以保证.由于变长段加入稳定轨迹的时机取决于变长段内的关键轨迹数量,因此GRTS的时效性及其化简模块的空间有效性均难以得到满足.算法GRTSm性保证化简的时效性,Nexus采取了类似的时态窗口方式.基于区域的优化多蕴含于上述研究思路,但区别于以距离阈值直接作为轨迹取舍依据,基于区域的方式更多采用柔性的区域构造方法对预测点进行过滤,区域构成参考运动速率和方向,一般与时间相适应.由于区域构造参考了时间维度,为避免大时间跨度中参数的变化引起的误差,已有的研究常对总体和局部进行限制[7,11].另一方面,考虑到区域计算的复杂度较高,大量研究通过距离将区域计算蕴含于自适应过滤过程中:BLC和PLAZA[10]利用误差阈值弧所围区域对轨迹进行过滤;全局轨道分段[4]逆向将轨道段的近似区域最小容积作为尺度,离线地对轨道进行贪婪分割;Sample[7]采用总体速率和局部速率相交区域作为轨迹点的过滤区域.总体而言,实时区域化简方法缺乏总体距离控制机制或总体与局部误差统一进行处理,在处理运动参数总体变化的轨迹时化简质量容易波动.本文提出一种基于自适应安全区域的轨道实时化简框架.基于局部速率和方向偏离度定义安全区域,据此对未来轨迹点进行过滤.该方法利用相对速率阈值和自适应方向矢量偏离距离对局部突变点进行识别,并基于历史关键轨迹点定义总体偏离距离,从而适用于运动参数总体单调变化和局部抖动的场景.采用自适应方法使得框架避免了迭代化简的高运算复杂度,因而也适用于实时轨道化简.Page33实时化简框架以连续获取移动对象的传感轨迹为背景,研究框架将轨道化简过程放置于终端,对时间等间隔所获取的轨迹数据进行化简,保证服务端接收的轨迹点数据经过插值后与原始轨迹误差小于给定阈值.算法度量指标以时间和空间占用率为基础,重点考察算法的化简率和误差.其中:化简率定义为化简算法所消除的轨迹点与原始轨迹点之间的比率;化简质量主要度量化简(结果)轨迹经由原始轨迹参考插值后的Fréchet距离[16],即与原始轨迹之间的时态逐点欧氏距离.:{s1,s2,…,si,…,sn}原始轨迹序列:{u1,u2,…,uj,…,um}简化轨迹序列si:(p,t):(x,y,t)uj:(p,t,v→):(x,y,t,v→)简化轨迹点ai:(p,t):(x,y,t)ei:∏(t,ui):(p,t):(x,y,t)预测轨迹点α(t),β(t)pipi→+1pipi+︵l{pi,pi+1,…,pi+l}两轨迹点之间的轨迹曲线‖·,·‖|·,·|下面形式化给出框架描述.定义1.原始序列.给定欧氏空间,原始轨迹序列={s1,s2,…,sn}为有序的离散轨迹点si=(p〈x,y〉,t)|1in所构成的序列.不失一般性,假定si由2D空间维和时间维构成.区别于弱简化[5],框架的轨迹简化采用强化简定义进行如下描述.定义2.简化序列.原始序列的简化序列为给定任意连续的简化轨迹点ui和ui+1,中间时刻ui.t<t<ui+1.t的轨迹可基于轨迹段uiui→+1通过内插进行还原[5],清晰与高效起见,描述时采取线性插值.在任意当前时刻,简化序列一经确定,任意时刻t>um.t的空间位置可参考轨迹um的空间位置和速度信息,利用矢量外插进行预测[10],这一实时化简过程如图1所示.图中给出了当前简化轨迹点um确定后,框架的化简过程及其关键参数.其中点序列si为um之后,下一个简化轨迹点确定前的一个任意原始轨迹点;sn为最近时刻的原始轨迹.框架在式(1)的轨迹定义的基础上假定um具有速度um.v→,这可通过选取um点的左邻域采用预测外插算法[8]得到.定义3.预测轨迹.给定简化轨迹um和原始轨迹sn,若\um|um<um<sn,则sn相对um的预测轨迹为en=∏(sn.t,um)=um.p+um.v→×(sn.t-um.t)定义4.预测误差.基于所对应的简化轨迹um,原始轨迹sn的预测误差为εn=sn.p,en.p=sn.p,um.p+um.v→×(sn.t-um.t)通过将预测误差作为偏离度量,可以依次确定简化轨迹.不同于基于空间相似的判别方法[20],我们基于时态映射度量轨迹差异:对于简化轨迹,的轨迹误差可基于Fréchet距离对插值得到.定义5.Fréchet距离.若给定连续非递减函数α:[0,1]→[0,n]和β:[0,1]→[0,m],则轨迹数量分别为n和m的两条曲线和之间的Fréchet距离为dF(,)=infα,βmaxt∈[0,1](α(t)),(β(t))(4)例1.时空映射P(tP),Q(tQ)→[0,1]下序列P(tP0:tPn)和Q(tQ0:tQm)在时段(tP0:tP10)∪(tQ0:tQ11)上逐点时态投影如图2所示.其中,{P1,P4,P7,P10}与{Q0,Q2,Q3,Q5,Q6,Q8,Q9,Q11}分别为和合集上等时间间隔原始轨迹,其余灰色标识Pi轨迹为上轨迹在上的时态线性插值点;反之,灰色标识Qj为在上的插值点.给定作用于在上任意映射点之间的公制距离|Pk,Qk|,则dF可刻画两曲线之间的时态对应点之间的最大距离.Page4有(tP考虑到简化序列为原始序列的强化简,即1:tP定义6.简化误差.简化轨道与间误差为dS(,)=1简化误差需要基于连续映射函数对两轨道进行计算,为实现可计算性,给出定理1如下.定理1.任意子轨迹段与上时态映射轨迹段之间Fréchet距离为两轨迹段的最大端点距离.证明.给定中任意轨迹段ujuj→+1及其时态包含的轨迹曲线sisi+︵l{si,si+1,…,si+l},由定义5有infα,βmaxt∈[sτ.t,sτ+1.t]sτsτ→+1(α(t)),(β(t))sisτ<si+l=infα,βmaxt∈[sτ.t,sτ+1.t]sτsτ→+1(α(t)),ujuj→+1(β(t)).由ujuj→+1上时态映射的插值性质,给定sτ的时态映射点aτ,则上式等价于‖sτsτ→+1(α(t)),aτaτ→+1(β(t))‖在时间段[sτ.t,sτ+1.t]上的最大值,由于sτ与sτ+1为最小时间粒度,因此该最大值必位于sτ或sτ+1.定理1给出了求取轨迹段之间Fréchet距离的等价方法.不失一般性,对图2中任意时态映射轨迹段,如P3P→4和Q3Q→4,线性插值下这两段轨迹内任意时刻的映射距离P,Q均满足P,Q<P3,Q3.进而,由定理1和轨迹段sτsτ→+1最小时间间隔假设可得.推论1.简化误差在的时态插值序列下满足如图1所示,对于任意si及其所属简化轨迹段速度ujuj→+1(图中记作umum→+1),可基于位置uj.p和速率向量ujuj→+1,类似于式(2)得到si的映射点ai.由强化简可得uj,uj+1与中轨迹曲线ui,ui+烇烋l端点重合,由ui,ui+烇烋l之间两两相连轨迹段及其最小粒度假设,式(6)可依据定理1得到.考虑到给定简化轨迹逐点计算原始轨迹的简化误差是一个复杂度为O(mn)的过程,式(6)为框架提供了复杂度为O(n)的简化误差计算途径.然而,对每种可能的简化轨迹计算简化距离和相关错误度量,并最终确定最优划分是NP难问题[17],现有研究普遍采用预测误差限定法,基于阈值过滤获取简化轨迹段,预测可定义如下.定义7.时效预测.以给定原始轨迹点的位置为起始点,对此后的轨迹点位置进行线性预测,且满足速率s的时限为Ts、方向d→的时限为Td.该定义将现有基于推算定位和区域的实时化简方法进行统一描述.对当前简化轨迹uj,Nexus[6]基于推算定位假定速度uj.v→的时限为uj+1.t-uj.t,其中时限和速度均随化简过程变化;而Sample[7]基于区域进行化简,将速率时限定为原始轨迹的最小时间间隔si+1.t-si.t,而方向时限则对应uj+1.t-uj.t.为便于后续分析,定义7将速率和方向时限分开定义,并将时限为简化时间间隔uj+1.t-uj.t的参数记为总体参数,而si+1.t-si.t则对应局部参数.例2.如图1所示,对当前时刻sn.t,原始序列{s1,s2,…,sk…,sn+l}的简化序列为{u1,u2,…,um},由于时效预测为推算定位进行时限约束,因而可对未来序列{sn+1,sn+2,…,sn+l}进行逐点误差判定,完成实时强化简.由强化简定义可得,对当前化简轨迹um(p,t,v→)及其对应的原始轨迹sk(p,t)有um.p=sk.p.考虑自sk.t时刻的轨迹可由um.v→进行线性预测:若式(2)和(3)预测误差小于给定阈值,则MOD服务器维护简化序列{u1,u2,…,um}并可依据线性预测获得sk之后的预测位置;反之,若sn+l预测误差大于阈值,化简过程可对{sk,sk+1,…,sn+l}进行线化简,并将简化后的子序列{um+1,um+2,…,um+h}(图1为单点um+1)传送至MOD,MOD进而进行增量更新{u1,u2,…,um}∪{um+1,um+2,…,um+h}.考虑实时性,MOD在任意时刻τ的简化轨道位置可分为两种情形:τsk.t时,基于当前简化序列{u1,u2,…,um}进行内插;τ>sk.t时,基于um.v→外插.且强化简增量更新过程可保证这里的预测误差和简化误差分别满足式(3)和式(5)下的阈值约束.故有值,则速度参考下可完成轨道的实时强化简.4安全区域构造推论2.若时效预测下逐点误差小于给定阈化简算法通常依据预测速度计算原始轨迹的预测误差,并据此对轨迹段进行二次划分.由定义3和定理1可知预测轨迹与时态映射轨迹存在偏差、预测误差与简化误差之间难以建立函数关系,因而预测误差阈值方法不能有效控制具有后验特性的简化误差.通过引入速率和偏离阈值,构造分别适应于局部和总体速度的安全区域,实现轨迹简化.4.1局部距离适应区域以运动趋势连续变化为前提,确定原始轨迹以历史速度运动的简化轨迹段边界,保证局部运动速Page5率和偏差变化不超过指定阈值;进而通过总体范围阈值约束不同简化轨迹段的总体偏差.定义8.局部距离适应区域.给定前导轨迹si-2和si-1,则si的局部距离适应区域任意内点si满足s|si-1.p,si.p|/|si-2.p,si-1.p|(1+s)烅烄si.p,si-2si→-1烆其中,d和s分别为方向偏差和速率范围阈值.若原始轨迹si满足式(7)给出的内点si约束,且如式(3)所示,si相对于预测段起始点的预测误差εi小于给定的总体范围阈值δ,则si不属于简化序列;否则定义其为新的简化轨迹,并迭代和完成剩余化简.给定总体预测速度狏m-1,图3给出了两种不同形态轨迹的局部距离适应区域构造图.图3(I)中原始轨迹s1,s2,…,sn延总体曲线平滑分布,局部距离适应区域表现为以前导点为中心的仰角渐变的区域序列,每个区域包含在平行于前导轨迹段的一对偏差阈值边界和以前导轨迹点为圆心的一对速率阈值边界弧内.在此基础上,预测误差条件为由预测轨迹和原始轨迹之间的欧氏距离,图3(I)中点线和粗虚线分别给出了预测误差小于和大于阈值的情形:s1到sn-1的轨迹由于没有超出局部距离适应区域,且预测误差不大于阈值δ,因而均不构成简化轨迹;而粗虚线表示sn到其预测轨迹距离大于δ,因而被确定为简化轨迹点.对于图3(II),在对原始序列顺序处理的过程中,在由s5s→6对s7进行预测的过程中,由于s7超出预测轨迹s7所确定的局部距离适应区域SR(s7),因而s6被确定为简化轨迹.4.2总体方向适应区域局部距离适应区域通过监督总体范围阈值,构造适应于局部运动速度的安全区域,在限制总体偏差的前提下,保证简化序列段内的原始轨迹局部变化较小.然而,与已有基于推算定位的方法所面临的问题相似:尽管局部区域简化能够限制同一简化轨迹段中原始轨迹逐点之间的运动差异,但由于总体预测速度与后验的简化轨迹之间存在显著差异(如图4中狏m-1与两条黑色虚线之间),导致最终的简化误差过大.有鉴于此,基于总体方向预测构造安全区域,保证用于区域过滤的方向矢量与后验简化轨迹段趋于一致.通过局部区域约束下动态调整速度的方式确定化简的总体方向矢量,该方向矢量的构造过程如图4所示.图4中,化简过程首先基于简化轨迹前导点um-1和依次出现的原始轨迹s1,s2,…,si确定方向矢量,然后依据方向矢量和总体偏差阈值δ,对si以后的轨迹进行过滤,方向矢量如下定义.定义9.方向矢量.给定简化轨迹前导点um-1,则此后原始序列s1,s2,…,sn的方向边界轨迹点为si|sτsium-1.p,sτ-1s→τδ∧um-1.p,sisi→+1δ相应地,方向矢量狌m-1定义为狌m-1=1其中s→τ=sτ-2sτ→-1/sτ-2sτ→-1+sτ→-1/sτ→-1为由起始点s1开始的向量叠加过程.sτ为每个出现在边界点si之前的原始轨迹点,且满足前导点um-1到这些点的原始轨迹段的距离小于阈值δ.该过程在图4(I)中表现为:依次计算um-1到s1s→2,s2s→3,…的距离,最Page6界轨迹点,进而由式(9)计算,图中黑色虚线被确定为方向线.与之相似,图4(II)中s4为边界轨迹点,并确定其中黑色虚线为方向线.图中经过um-1的虚线为判定边界轨迹的参考线,灰色粗虚线为超越阈值的参考方向,点线为边界点所对应的参考方向.定义10.终结点.给定简化轨迹前导点um-1及其在si确定的方向矢量狌m-1,则序列s1,s2,…的简化轨迹段的终结点定义为stsisastsa.p,狌m-1δ∧st.p,狌m-1>δ(10)即终结点为方向矢量狌m-1确定后,首个到狌m-1的距离大于阈值的原始轨迹点.终结点给出了在以方向矢量为方向、前导点为起点的准线约束下,方向边界点si至终结点st之间的轨迹点到准线的距离小于偏差阈值δ.在此基础上简化轨迹段的后缀点um可定义为终结点的前缀原始轨迹点或准线与原始轨迹的最后相交轨迹段的端点,前者存在当且仅当终结点确定时准线与原始轨迹无交点.图4(I)给出了一段平滑轨迹方向矢量的确定过程,依次采用边界点判定式(8),叠加s1到s5的参考方向得到方向向量.此后自s6始,所有原始轨迹到准线的距离小于δ,因而未产生终结点;若sn以后某轨迹满足式(10),则sn-1将成为该段简化轨迹段的后缀点.在图4(II)中,当s4确定准线um-1s→4后,通过式(10)得到终结点s7,且最后相交线段的前端点s6确定为该简化轨迹段的后缀点.5化简算法与分析分别基于时效为原始轨迹最小时间粒度的局部距离适应区域和基于后验简化轨迹方向矢量预测的方法,本节给出两种时间复杂度为O(n)的实时化简算法.基于表1的要素定义,分析局部距离适应区域化简与总体方向适应区域化简的算法效率及其化简质量.5.1算法描述局部距离适应区域(LocallyDistance-basedAdaptiveRegion,LDAR)算法,首先通过对原始轨迹的局部变化进行限制,并依据总体范围阈值对简化总体偏差进行限制,描述如算法1所示.算法1.LDAR算法化简流程.输入:阈值s,d,δ、原始序列输出:简化序列算法流程:1.u=s1;2.foreach(siin){3.si.p=si.p+(si.t-si-1.t)si-2si→-1;//预测si4.if(s|si-1.p,si.p|/|si-2.p,si-1.p|(1+s)){5.if(si.p,si-1s→id){//方向偏差6.if(|si.p,ei.p|δ)//预测误差7.continue;8.else{9.=∪+si-1;u=si-1;gotoline4;10.}}}}算法采用分层方式构建区域的距离阈值约束.对原始序列的每一个轨迹点,算法首先依据其前导轨迹段所确定的速度信息构建其预测位置,然后依次经过局部速率和偏差区域进行越界判定,最后基于总体范围阈值进行总体偏差约束.当上述参数超过给定阈值时,算法将轨迹点加入简化轨迹队列,利用行9输出简化轨迹点并将后续步骤的起始点设定为当前输出轨迹点,即以单步回退的方式保证强化简语义.行3中,算法的局部速度采用轨迹点前导进行线性预测得到,这在连续移动环境下较为适应;而对于有移动速度参考的原始轨迹,该速度可使用传感器获取的速度信息.行4~6依次给出速率、方向和预测误差约束:行4中的速度变化以比率形式给出,用以度量预测位置与原始轨迹位置之间的局部差异比;在此基础上行5通过原始位置相对方向的局部偏移约束偏差;与上述两步局部参数阈值不同,行6中ei的计算参考简化轨迹的前缀速度.在未提供传感速度信息的前提下,速度可通过前缀点及其局部前导轨迹求取,也可以在总体上基于对上一段简化轨道的两个端点进行计算.为避免由简化轨道方向相对于前缀端点速度的方向偏差所带来的误差,基于总体方向适应区域(TotallyVelocity-basedAdaptiveRegion,TVAR)首先以自适应的方式、通过最大偏差阈值确定简化轨迹段的总体方向矢量,然后依据总体范围阈值逐点对原始轨迹进行过滤.通过引入阶段切换开关bDct,描述如算法2所示.算法2.TVAR算法化简流程.输入:阈值δ、原始序列输出:简化序列算法流程:1.u=s1;bDct=false;犱犮狋=0;2.foreach(siin){3.if(!bDct){//检测阶段4.if(u.p,si-1s→iδ)//简化误差约束速度5.continue;Page76.else{7.犱犮狋=狌m-1;bDct=true;gotoline9;//更新速度8.}9.}else{//过滤阶段10.if(si.p,犱犮狋δ)//预测误差11.ExistAndCross(sj-1s→j,狌m-1);//判断相交12.else{//简化点求取阶段13.u=si-1;bDct=false;犱犮狋=0;14.if(ExistAndCross(sj-1s→j,狌m-1))//计算交点15.∪+sj-1;gotoline4;//加入简化点16.else17.∪+(u=sl);gotoline4;//加入最近交点18.}}}算法包含两个阶段,分别用以确定方向矢量和基于阈值对后续轨迹进行过滤.表述简单起见,上述算法使用goto语句表示单步回退.此外,简化轨迹段的总体方向矢量通过变量犱犮狋由检测阶段传递给过滤阶段,算法利用这一自适应确定的变量实现对简化轨迹段的边界求取.方向确定阶段首先依次遍历所有即时到来的轨迹,利用化简段前缀点的位置u.p到每个原始轨迹段矢量si-1s→i的距离,行4在遍历过程中得到最大为超过总体误差阈值的轨迹点.该过程中所有原始轨迹都将纳入方向矢量的计算中:利用式(9)的方向矢量计算方法,算法基于该段原始轨迹逐点计算各参考方向sτ-1s→τ,行7将这些参考方向的均值作为后续过滤的依据.这里值得注意的是行7中的跳转语句,该语句保证距离越界点的回退,并作为后续过滤的首个对象.该过程以自适应的方式对各段原始轨道的累计偏离度进行限制,并将所有参考方向的几何均值作为简化轨迹段的总体方向矢量.过滤阶段从确定阶段的边界轨迹点开始,依次遍历后续轨迹,基于误差阈值确定简化轨迹段的后缀点.行10利用方向矢量犱犮狋对原始轨迹进行过滤,一旦距离方向矢量的距离超过阈值δ,算法即刻完成轨迹段的输出.其中,行14依据终结点si确定后缀点sj.该过程源之于简化轨迹段对方向矢量的收敛考虑:为有效减少后验的简化轨迹与方向矢量之间的偏离,函数ExistAndCross通过求取最后一个与方向矢量相交的原始轨迹段,用以确定终结点.为保证效率,上述针对行7的方向矢量均值的求取和行14的交点求取,算法均可依据各自遍历过程进行累计记录.5.2化简效率分析LDAR算法针对原始序列进行顺序遍历,过程中至多引入三次距离计算.其中,行4中的|si-2.p,si-1.p|在算法遍历过程依次复用,因而行4~5的两次计算均系直接距离计算;行6的预测轨迹位置ei类似行3通过推算得到,因此整个算法时间复杂度为O(3n).由于算法逐段获取简化估计段,且遍历过程除终结点除的单步回退外无对历史记录的访问,因此算法的空间复杂度为常数,即算法包含的局部变量的空间总和.TVAR算法先后利用两个阶段完成对原始序列的遍历,因而其时间复杂度为两者之和,空间复杂度为两者之中较大者.考虑到4.1节对行7和行14的分析,这里基于矢量的累计均值和交点的替换记录对算法进行分析.方向确定阶段对每个原始轨迹需要进行一次参考距离计算和一次参考方向累计均值求取,因此时间复杂度为O(2ml),其中l为参考方向的平均数量;空间复杂度为常数.过滤阶段逐点对剩余轨迹进行一次距离计算,其中连续两段简化轨迹有重复计算,且重复度为交叉点到越限轨迹之间的轨迹数量.假定各简化轨迹段的越限轨迹均值为k,则该阶段时间复杂度为O(n+m(k-l));由于采用交点替换,阶段空间复杂度仍然为常数.综上,算法总体时间复杂度为O(n+mk+ml),其中n和m分别为原始序列和简化序列的轨迹点数量.5.3化简质量分析化简质量重点针对简化误差进行分析,即给定原始轨迹,通过逐点求取各简化轨迹时态映射点以获取预测距离.考虑到LDAR和TVAR算法均以区域构造简化轨迹产生条件,本节通过后验的简化轨迹相对原始轨迹进行逐段分析,采用xy单调误差[16]分析简化段内的最大时态误差.若对于任意简化段ujuj→+1所包含的原始轨迹曲线sls︵hsl=uj,sh=uj+1,定义轨迹段狊犻狊犻+1l<i<h延ujuj→+1方向的时态投影长度为b(si,si+1),延简化参考方向犱的投影长度为b犱(si,si+1),曲线sls︵h延ujuj→+1方向的垂直投影宽度为w(sl,sh),如图5所示.Page8图中b(si,si+1)和bd(si,si+1)可定义为几何投影间隔或时态投影间隔[16],这里取时态投影定义.基于时态距离,对于LDAR算法的局部距离约束和TVAR的总体阈值约束,依据文献[16]推论4.3,有b-tan(α)·wbb+tan(α)·(b+w)其中b为原始轨迹延参考方向的最大投影长度,取max(bd(si,si+1));对于宽度w=w(si,si+1),确定任意轨迹段sisi→+1延简化轨迹方向um-1u→m的时态投影长度b的上下限.由式(11)和Fréchet误差限制[18]errorF(si,si+l)槡22maxw(i,i+l)可确定算法的误差上限.对于LDAR算法,由式(7)可知任意sisi→+1的参考方向角变化小于arctan(d/(s·|si-2,si-1|)),且该值上限由阈值d和s确定,综合该最大误差上限与式(11)、式(12)的误差上限即可确定.对于TVAR算法,由式(9)可知方向在简化段总体恒定,且由于TVAR算法基于交点确定简化轨迹后缀,最终的简化轨迹段的方向与算法的参考方向之间的夹角(狌m-1·um-1u→m)/(|狌m-1|·|um-1u→m|)小于后缀节点所对应的最大角arctan(|um,um|/|um-1,um|),其中um为后缀点um在原始序列中的前导轨迹.对于化简过程,若化简率越高该角越小,即参考方向越收敛于简化轨迹方向矢量.相对于LDAR和其他方向预设的算法而言,TVAR算法的该性质可以保证因式(11)夹角α所带来的时态误差影响最小化.6实验结果为验证算法的轨道实时化简能力,实验选取移动手持电脑作为测试硬件平台,具体配置为Intel?CoreTM2Duo2.2GHzCPU,2GB内存和512GB硬盘;软件环境为Win2003Server版操作系统和VS2008编译系统.数据通过OpenStreetMap①官方网站中的不同移动数据集提取获得,通过表2的7组具有不同点数量和不同分布特征的移动对象真实轨迹,对算法效率和误差进行比较测试.其中,变化系数通过对原始轨迹逐段求取时态预测距离的平方得到.对于其中小于0.01的,分析中以平稳轨迹标识,选取1为划分抖动轨迹与混合轨迹的边界值.ID类型轨迹数周期/s变化系数1平稳轨迹1000010.02172抖动轨迹100001012.12403混合轨迹10000100.89124平稳轨迹10000020.09355抖动轨迹1000001011.12806混合轨迹10000010.72127平稳轨迹100000010.35418混合轨迹1000000100.82356.1实验1:化简效率比较实验实验1通过比较不同化简率下的化简误差及其化简时间验证算法的效率.选取周期1秒100万平稳轨迹,对Opheim,Nexus,Sample和本文所提出的LDAR和TVAR方法进行比较.其中Opheim算法[19]为一个离线自适应轨道化简算法,利用轨迹运动方向和垂直距离误差依次对轨迹的关键点进行限制和提取;Sample[7]基于区域阈值采样,Nexus[6]基于窗口的推算定位方法,如相关工作所述.清晰起见,以下分析讨论在效率和参数实验的基础上,首先对于LDAR算法及其相应区域下的执行结果以进行实验,然后在此基础上讨论TVAR.图6(a)给出了100万轨迹数据在化简率大于90%时算法的化简误差的分布情况,5种参测算法的误差均随化简率的增加而显著增长.在化简率从90%~99.5%的变化过程中,Opheim与LDAR算法均采用了区域阈值的方式控制误差,因此结果较另两种方法显著低;此外,由于1s采样的混合数据的阶段累计误差较小,因而LDAR与Opheim的化简率在图6(a)中较为接近.与之对照,对于这类平稳轨迹,TVAR算法以总体运动为约束对象能够较为显著地提高化简的质量,图6(a)中相同简化率下TVAR的误差为LDAR和Opheim的12.1%~24.3%.图6(b)比较了5种算法完成化简过程所花费的时间.由于5种算法均采用了自适应思想,因此100万轨道数据化简的平均耗时均在10s以内,且近似常数的化简时间保证了算法在实时化简场合下的有效性.由结果可知,不同于LDAR和TVAR,Opheim采用总体无监督的局部阈值方法,因而时间复杂度和抖动均相对较高;由于对总体偏差范围进行约束,LDAR执行稳定且较参测其他算法约低5%~10%;TVAR出现了一定抖动,但执行时间与LDAR差异不超过1%.①OpenStreetMap:TrajectorydatasetscoveringWalk,Car,Page9图6局部距离化简效率实验结果6.2实验2:参数影响性实验下面主要就速率系数和(总体)距离阈值两个参数对化简率和化简误差进行实验分析.其中速率系数为式(7)所示的相邻运动轨迹段范数比,局部距离阈值根据总体阈值按比例缩小得到.实验%/᳛ᓄ1500图7100万轨迹点下局部距离化简参数相关性基于实验拟合,图7(a)给出了化简率随参数的变化趋势.总体而言,化简率随速度系数和距离阈值增长而增长,并在化简率为80%等高线处迅速增长到90%后相对平稳变化.对于图中各化简率所对应的等高线,速率系数与距离阈值大致呈双曲线分布,给定总体距离阈值640m,速度系数取0.4,0.8和1.6时化简率分别对应70.8%,85%和99.9%,且此后的化简率相对维持稳定.值得指出的是局部偏差阈值的设定:从图7(a)不难看出,相对于总体阈值,局部偏差阈值更侧重于控制抖动点,保持其与总体阈值的比例关系能够较为有效地基于化简率对原始轨迹进行容差化简,图7(a)曲线的水平平面分布基于100万混合轨迹化简对LDAR算法进行实验,通过指数增长方式在0.2~3.2间选取速率系数,并在5~1280间选取距离阈值,对指数和距离选取对质量和化简率的影响进行拟合,结果如图7所示.2.01.51.00.54m01/ᓄ01500(b)100ᓄLᐵ█Ƿ5ᦪ>ᔠ	表明局部偏差阈值对化简率影响并不显著.图7(b)给出了化简误差的拟合图,图中误差变化的拐点出现在250米的等高线处,此时投影的速度系数与距离阈值呈椭圆分布,并且结果分别对应〈160,0.2,269〉,〈160,0.4,250〉,〈320,0.8,207〉,〈40,1.6,315〉,〈40,3.2,314〉,其他各级等高线也均以椭圆分布方式扩散.这一形状表明:对于两个化简参数,局部阈值在50—1000时,决定化简误差的因素主要取决于局部阈值与系数之积,且误差伴随积增大呈超线性增长(图中误差为对数坐标).6.3实验3:化简质量比较实验下面主要针对不同点数量和不同波动特征的轨Page10迹构造实验数据环境,对算法进行实验比较.6.3.1化简误差实验基于给定化简率的误差值的实验,选取10万平稳轨迹和10万抖动轨迹对LDAR和其他同类算法进行化简质量比较.如5.2节所述,通过获取给定化简率的参数等高线,对LDAR进行参数设置.图8给出了化简率在90%以上时各种算法的误差比较.在图8(a)中,平稳轨迹下的Opheim,Sample和LDAR算法质量变化趋势相对稳定.由于Sample缺乏距离约束,在化简率超过97%时误图810万轨迹局部距离化简质量比较值得指出的是由于局部阈值在总体范围较大时影响较小,因而算法在化简率达到99.9%时表现趋于一致.此外,形成鲜明对照的是两种轨迹下算法的误差基数差异明显,这主要源于抖动轨迹10s采样周期相对较大.6.3.2变负载LDAR质量验证实验基于对1万不同分布特征的轨迹化简,实验选取平稳、抖动和混合轨迹构建测试数据集,其中平稳轨迹取自OpenStreetMap的一段乡村公路上的车辆行驶轨迹,抖动和混合轨迹分别来源于市内的两组车辆移动轨迹,3个数据集的变化系数如表2所示.通过将研究所提LDAR与Opheim,Nexus和Sample三类方法对比,获得不同化简率下的误差结果如图9所示.基于不同化简率范围,图中结果分别从整体和局部(90%~100%)两个层次给出四类方法的化简质量对比.从化简质量的总体变化过程上来看,LDAR和Opheim较另外两种方法有较为明显的优势,这一点尤其反应在化简率相对较低的时候.图9(L1~L3)平稳轨迹化简率在75%以下时,LDAR和差较其他方法要高出一个数量级.此外,由于总体轨迹的连续性,图中LDAR的误差总体变化与Opheim较为趋近,但误差值最小为后者的1/5,各参数值的平均误差为后者的1/2.对于图8(b)给出的抖动轨迹实验结果,Nexus方法仍然表现最不稳定,而Opheim和LDAR的结果均出现一定的波动.相比于Opheim方法,LDAR在化简率低于90%时误差较大,而在阈值密集分布的高化简率情形下(如图8(b)所示),LDAR的平均误差为前者的1/3,其中90%~95%平均为前者小约两个数量级.Opheim的质量较Sample和Nexus高出一个数量级;在抖动和混合轨迹下这一差异范围扩大到96%,即前者误差在1%~96%之间始终维持在后者的1/10左右.这里唯一的异常发生在Nexus方法上:该方法的窗口采用固定间隔策略,因而无法适应轨迹数据周期变化,尽管当窗口设置较大时(高化简率)对于平稳数据的化简误差较LDAR低10%,但总体上要高出后者约一个数量级.通过截取图9(L1~L3)的实验结果并加以放大,图9(H1~H3)从局部化简率范围90%~100%上给出了4种方法的质量对比.其中,Nexus方法在处理平稳数据时,较大的窗口宽度可以保证较高的化简质量(图8中平稳轨迹下Nexus方法较其他三类算法的质量高出10%);而当数据的变化不均衡时LDAR和Opheim较其他两类方法质量显著高,其中Nexus和Sample在混合轨迹下的化简误差高出两类区域阈值方法一个数量级.此外,尽管LDAR和Opehim相当,但3个局部结果也反映出化简率高于98%时LDAR的总体阈值较Opheim化简质量提高约17%.Page11图91万不同形态轨迹的局部距离化简质量比较6.3.3变负载TVAR质量验证实验基于上述实验不难看:出基于区域阈值约束思想的LDAR和Opheim方法较同类方法在稳定性和化简质量上有较为明显的优势.其中Sample与Nexus总体上处于同一水平,但前者的化简质量更为稳定;两类质量较高的方法中,LDAR在处理时变运动轨迹时又比Opheim的化简误差平均低5%左右.下面选取Sample和Opheim方法作为比较对象,综合引入6类测试数据集验证TVAR在各种轨迹类型下的化简质量.突出化简可用性起见,实验主要对3种方法在70%化简率以上的轨迹化简质量进行比较,相关数据分布及其实验结果对比如图10所示.Page12图10不同轨迹化简质量比较实验结果在图10中,不同特征的实验数据下基于区域阈值的自适应方法Opheim(LDAR)较基于角度和速率约束的Sample采样方法在化简质量上显著要高.由于3类待测方法均较为稳定,因此图10略去了化简率70%以下的结果,该部分结果的整体趋势可参考70%~90%之间的化简质量进行类似分析.从图中可以看到,整体上TVAR较Opheim在化简质量上提高约14%;尤其在区间[70%,90%]上,前者化简误差平均仅为后者的37%;此外TVAR方法的稳定性也较好,全部6组测试中TVAR均无奇异点产生,这与图10(a)、(d)、(e)中Opheim的质量拐点形成较为鲜明的对比.对于原始采样周期1s的1万平稳数据,图10(a)展示出TVAR比Opheim的化简质量高出60%Page13以上.尽管化简稳定性得以维持,但提高变化系数会造成TVAR的质量优势减弱.如图10(d)中TVAR的化简质量变换相对平稳,但平均化简质量仅比Opheim提高约20%.对于抖动轨迹,图10(b)中1万抖动轨迹下TVAR化简质量较Opheim平均提高34%,但当化简率在95%以上时两种方法大体相当;图10(e)中给出了与图10(b)相似的平均化简质量结果,但由于原始轨迹的突变点均匀分布,因而TVAR的化简优势主要体现在90%~99%之间、较Opheim的化简误差减少47%.两组混合轨迹实验(c)和(f)基本一致:TVAR在90%化简率以下时具有明显的优势,比Opheim的误差最多减少42%,这一优势伴随化简率的提高逐渐减弱,在90%以上时两种方法的化简质量大体相当,比Sample方法高1至2个数量级.7结论由于移动规律、运动方向、运动速率等变化因素的不可预知,现有的实时轨道化简方法的插值还原精度和轨迹化简率易受到运动特征局部变化的影响.本文研究提出一种自适应安全区域轨道实时化简框架,利用采样点速率和方向矢量为轨迹建立总体和局部两个层次的误差度量,并基于安全区域分别在两个层次上限制插值点的误差范围,通过构造自适应于轨迹方向和速率的实时化简算法实现对移动轨迹的实时化简.实验结果表明,基于局部阈值限制的LDAR算法对于平稳轨迹能够进行高效的实时化简,在此基础上的基于总体方向阈值的TVAR算法对于速率和方向等参数的波动又有较强的鲁棒性.
