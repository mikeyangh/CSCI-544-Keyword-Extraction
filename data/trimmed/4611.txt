Page1一种基于Bio-PEPA的分布式虚拟化系统脆弱性扩散模型吕宏武王慧强林俊宇冯光升郭方方(哈尔滨工程大学计算机科学与技术学院哈尔滨150001)摘要脆弱点类型差异和脆弱性演化对脆弱性扩散过程具有显著影响,而现有脆弱性扩散模型对此还缺少深入研究.该文提出一种基于分簇思想的分布式虚拟化系统脆弱性扩散模型,首先按照节点包含脆弱点类型的不同进行分簇,其次利用Bio-PEPA静态分层特性,对脆弱性在簇内、簇间传播,以及簇间迁移演化过程进行建模.最后,将Bio-PEPA模型转化为常微分方程求解,分析分布式虚拟化系统脆弱性扩散的特点和规律,避免了传统分析方法的状态空间爆炸问题.实验结果显示,可以通过提升系统修复能力、降低簇间传播速率、减小簇间变迁速率,抑制分布式虚拟化系统的脆弱性扩散.关键词脆弱性分析;脆弱性扩散;分布式虚拟化系统;Bio-PEPA;云计算1引言脆弱性通常是引发系统安全性、可信性等问题的内在原因[1],一直以来就是软件开发和系统测试领域关注的研究热点.但是随着以覆盖网、未来网络和云计算为代表的分布式虚拟化系统的广泛应用,系统脆弱性变得尤为严峻.一方面,新兴业务的不断涌现,带来了第三方软件的爆发式增长,然而它们通常缺少严苛的编码规范和系统化测试,存在脆弱性漏洞的概率远超系统本身.包括著名安全机构Secunia在内的大量研究显示①,因第三方应用而引入的脆弱点在数量上已远远超过系统固有的脆弱点.另一方面,作为云计算、覆盖网络技术基础的虚拟化技术,从根本上变革了资源的利用模式.服务使用的资源往往来自于远程“云”中的不同位置,它们通过动态化的组合产生满足用户需求的个性化服务[2],而这些资源自身的脆弱性往往难以断定,并将通过频繁的动态连接而快速扩散,为脆弱性的防护带来了巨大挑战.脆弱性分析作为一个热点领域已经在脆弱性检测、系统脆弱性评估和脆弱性风险分析等方面进行了大量研究[3],但是针对脆弱性扩散的研究尚处于初期阶段.(1)最初的脆弱性扩散研究主要关注于特定系统的脆弱性风险,如OpenBSD操作系统漏洞[4]、Mozilla系统漏洞[5]和数据错误在软件中的传播[6],通常以多年运行数据为基础来挖掘脆弱性的传播规律.但是这些结果往往具有很强的系统相关性,而且很难用于系统设计阶段;(2)近来,Feng等人[7]建立了一种安全性风险模型(SRAM),通过贝叶斯网络来模拟风险因子及它们之间的因果关系,估计最大概率的脆弱性传播路径以及带来的风险值.而De等人[8]针对无线传感器网络环境下由于多跳广播协议带来的脆弱性扩散问题进行了研究.文献[7-8]仅在系统整体层面研究脆弱性的扩散,均未考虑脆弱性在同种类型脆弱点和不同类型之间扩散的差异,以及脆弱性的演化问题;(3)为了在系统设计阶段减少脆弱性,文献[9]研究了由于代码重用造成的脆弱点在旧有代码与新代码之间传播的问题,并对每一类脆弱点建立单独的脆弱性树(Vulnerabletrees).文献[10]则研究了在面向对象设计阶段由类的耦合而引入的脆弱性扩散,并采用脆弱性树和自动柜员机(AutomatedTellerMachine,ATM)方法进行了分析.但是这些研究虽然对不同脆弱点类型进行了区分,却仅考虑了脆弱性在同种类型脆弱点之间的传播,而没有考虑在不同类型脆弱点之间传播的问题.此外,当系统规模巨大时,组件数量及其相互关联可能达到数以百万计,此时利用脆弱性树或者ATM进行脆弱性扩散分析,将面临状态空间爆炸的问题.综上所述,虽然现有研究为脆弱性扩散分析和预测提供了重要基础,但是对于分布式虚拟化系统中由于动态连接而引入的脆弱性扩散仍具有一定的局限性,主要表现在:(1)由于虚拟化技术,在分布式虚拟化系统中服务所用资源处于远程“模糊化”的云中,无法事先预测连接的对象,因而脆弱性扩散具有很强的概率性,基于事后日志的分析方法往往难以准确描述这种随机选择;(2)虽然现有部分模型已将不同的脆弱点分类,但通常仅仅研究脆弱性在同种类型脆弱点之间的扩散,即假定扩散是均匀地,而忽略了脆弱性在不同类型脆弱点之间传播的差异;(3)此外,随着节点规模的扩大(甚至数以亿计),传统的基于状态空间的分析方法如马尔可夫过程、脆弱性树等面临严重的状态空间爆炸问题[11].针对现有模型的不足,考虑分布式虚拟化系统①Secunia.VulnerabilityUpdate,August,September,OctoberPage3节点脆弱性的差异,本文把具有相同类型脆弱点的节点抽象为同一个簇,研究脆弱性在簇内和簇间传播的过程,以及脆弱点由一种类型演化为其他类型时脆弱性的簇间迁移问题.在此基础上,利用生物性能评价进程代数Bio-PEPA对分布式虚拟化系统脆弱性扩散过程进行描述和分析.文章组织结构如下,首先对Bio-PEPA进行简单介绍,然后对分布式虚拟化系统的脆弱性扩散过程建模,并就模型关键参数对于脆弱性扩散趋势的影响进行分析,最后做出总结.2Bio-PEPA的基础语义Bio-PEPA是在性能评价进程代数PEPA(Per-formanceEvaluationProcessAlgebra)基础之上发展而来的一种新型形式化语言.由于引入了生物网络(BiologicalNetwork)的特点,其具有静态分层(statichierarchy)特性[12],能够抽象出一系列独立的位置(location),因而适宜于本文描述脆弱性在不同类型脆弱点之间扩散的过程.同时,由于Bio-PEPA可以转化为ODEs(OrdinaryDifferentialEquations)求解,能够克服传统的基于状态空间方法面临的状态空间爆炸问题,所以更加适用于组件数量众多的大型分布式虚拟化环境.Bio-PEPA基本组成元素包括两个种类,分别是种类组件S(speciescomponents)和模型组件P(modelcomponents),前者用于描述每一种类的行为,后者用于描述种类之间的交互及初始化.Bio-PEPA基本语意表达式如下[12-13]:S·其中各表达式的含义如下:(1)在前缀(α,r)中,α代表动作,r代表执行动作α时种类S的计量系数,又称为变迁速率.当S为反应物时r为正值,当S为生成物时r为负值.操作符“+”代表S之间的选择.Constant代表常量.S@L代表在位置L中的组件S,通常一个位置可以描述为L:sunit,kind,其中s代表大小,unit是与之相关的度量单位,kind代表种类.当仅有一个位置L时,则可以省略不写,在本文中位置L代表独立的簇.(2)操作op代表S在反应中的作用,包括S为反应物(↓)、生成物(↑)和通用修改(⊙)等情况.(3)代表合作操作符,其中G是在合作过程中必须同步的动作集合.若记为过程中所涉及的动作必须同步执行.S(x)中的x∈犖+,表示初始时刻组件的数量.(4)对于任意的反应〈Reaction〉S1+S2→S3+S4,反应速率fk有两种基本种类mass-action和Michealis-Menten.不同于生物系统,分布式虚拟化系统作为一种信息系统,仅包含第1种反应,即组件的浓度越高则发生反应的概率越大.同时,允许非最简反应式的存在[12],即可以存在〈Reaction1〉S1+S2→S1+S4或〈Reaction2〉S1+S2→2S3的情况.此时用表达式(α,(r1,r2))⊙来表示组件S1的变迁速率的改变,其中r1、r2分别是反应前后的变迁速率,r=r2-r1.当r=1时,(α,k)opS可以省略为αopS.限于篇幅,详细语义逻辑可参见文献[13].求解Bio-PEPA主要是为了获得各组件的近似稳态概率,继续对系统做进一步的分析.所谓近似稳态概率是指模型稳定后,各种类组件的数量(populationlevel)占所有组件总量的比例.若犡=(x1,x2,…,xn)代表系统中各种类组件的数量,Ntotal为系统中所有组件的数量,那么i∈犖+,0<i<n,种类i组件的近似稳态概率若Bio-PEPA对应的隐含标记过程为{M(t),t0},其中每一个状态称为一个序列组件Ci,i代表种类,Cij是Ci经过一个反应j得到的派生,则所有的Cij构成状态空间的状态集合.在状态空间中,根据状态之间的转移关系可列出变迁速率矩阵犇={dij}n×m,其中n是种类组件的数量,m是反应的个数,dij对应于Cij中种类i对反应j的贡献.所有反应速率fr构成动能法向量(kineticlawvector)犞KL,其中fr=r∏i反应物reactioni的数量.在此条件下,前述向量犡满足ODEs:由于篇幅的限制,详细推导和求解过程见文献[12-13].此外,Bio-PEPA不但可以通过式(5)的微分方程形式求解,还可以通过随机模拟或离散马尔可夫链求解.Page43分布式虚拟化系统脆弱性扩散模型3.1脆弱点的分簇系统脆弱性研究是一个广泛的领域,并且由于应用范围和侧重点的不同,脆弱性的定义也不尽相同.其中,最具代表性的是Bishop和Bailey的“computervulnerability”概念.定义1.脆弱性.脆弱状态是指一个已授权状态,且由该状态经过已授权的转移方式可以到达未授权状态,而脆弱性是指脆弱状态区别于非脆弱状态的特征.通常将这种具有脆弱性的组件称为脆弱点.造成系统脆弱性的原因具有多种类型,传统上主要包括操作系统设计缺陷、软件bug等.此外,连接性(connectivity)、可疑用户输入、不合理信任关系、间谍或恶意软件等因素也会引入额外的脆弱点[15].分布式虚拟化系统是一类以分布式虚拟化技术为核心技术的通用计算环境[16],典型计算形态包括覆盖网络、云计算系统、未来网络等.分布式虚拟化系统的一项重要特征是虚拟组件与物理资源相分离,构成服务的组件均来自于远程“模糊化”的云中.这些组件将通过动态组合产生满足用户需求的个性化服务,而远程被连接的组件的脆弱性往往很难断定,这就导致脆弱性通过频繁的动态连接而快速扩散.并且随着互联网业务的增长和第三方软件的广泛应用,这类由于连接而产生的脆弱性快速增长,已成为脆弱性诱发的主要原因.因此,在分布式虚拟化环境下,系统脆弱性面临着更为严峻的挑战.由于虚拟化技术的支撑,分布式虚拟化系统中的所有组件都可以被抽象为“对等”的实体,它们之间通过广义上的连接关系构成系统各类服务.于是,脆弱性就可以是视为在这些对等实体之间的扩散.在本文中我们把这些抽象的对等实体称之为节点.相对于脆弱点产生而言,系统脆弱性扩散仅依赖于节点之间的联系,具有良好的数学统计规律[17].本文将不再讨论已经大量研究的脆弱性产生过程,仅考虑脆弱性在节点间的扩散.目前许多学者已经采用基于状态的方法对脆弱性扩散规律进行了研究.然而传统脆弱性模型往往在整个系统层面研究脆弱性的扩散,没有区分脆弱性类型造成的扩散差异,或者仅关注脆弱性在同种类型脆弱点之间的扩散,而忽视了不同脆弱点类型之间的扩散.但是对于一个分布式虚拟化系统而言,系统包含的脆弱点种类数以千计,脆弱性在包含不同类型脆弱点的组件之间普遍存在,且传播趋势差别较大,扩散过程往往是不均匀的.为了更加精确的描述和分析这一扩散过程,本文提出把包含同一类脆弱点的节点划分为一个类,称之为一个簇.为研究简便,假设每个节点在确定时刻其中一类脆弱点占主要地位,则按照占主要地位的脆弱点类型决定节点的归属.同时随着时间的演进,由于系统升级、安全策略更改和内外条件变化,节点对应的脆弱点类型发生改变,此时称之为迁移到其他簇.据已有研究显示,由于安全策略和所处环境的不同,在某一确定时刻,在一个簇内节点可能具备不同的状态.借鉴软件脆弱点状态模型[6]和经典病毒传播SIR模型[18],把节点抽象成如下5种状态:(1)W.该类节点虽然目前没有表现出脆弱性,但是具有转化为某类脆弱点的潜在可能,当与处于VE和VS状态的节点连接时可能被渗透而具有脆弱性;(2)VE.包含已知脆弱点但尚未被检测出的节点;(3)VS.包含已知脆弱点且已被检测出的节点;(4)F.未及时修复脆弱点,已造成故障/失效的节点;(5)R.脆弱点修复后的节点.其中,修复方式可以包括简单的断开连接、拒绝服务,以及更加有效的在线升级、打补丁、重配置等方式.记节点的全部状态集合S0={W,VE,VS,F,R},而其中VE,VS,F构成脆弱态集合Vset={VE,VS,F}.在上述条件下,可以把节点抽象为一系列Bio-PEPA种类组件.为了描述的简便,在建立的Bio-PEPA模型中,将处于状态为Y∈S0的节点,称为Y组件.下面将分别研究脆弱性在簇内、簇间和迁移条件下的扩散过程.3.2由簇内传播导致的脆弱性扩散相对于在不同脆弱点类型之间的传播,脆弱性通常更易于在具有相同缺陷的节点之间扩散,因此首先考虑最为简单的情况,即脆弱性在同一个簇内的扩散过程.在任意的簇location中,通过连接的脆弱性扩散只发生在W组件和VS组件,或者W组件和VE组件之间,不考虑对扩散范围无影响的VS和VE组件之间的传播,那么簇内的脆弱性扩散可概括为如下规则.Page5[Propagation1]:(1)〈link1〉W+VE→2VEVE组件通过连接把脆弱性扩散到W组件;(2)〈link2〉W+VS→VE+VSVS组件通过连接把脆弱性扩散到W组件;(3)〈discovery〉VE→VSVE组件由于被发现或披露而转化为VS组件;(4)〈fail1〉VE→FVE组件演化出故障或者错误;(5)〈fail2〉VS→FVS组件演化出故障或者错误;(6)〈recovery1〉VE→RVE组件被修复;(7)〈recovery2〉VS→RVS组件被修复;(8)〈recovery3〉F→RF组件被修复;(9)〈insecure〉R→WR组件由于可能仍存在潜在缺陷而转化为W组件.在规则〈link1〉与〈link2〉描述的脆弱性扩散中,已表现出脆弱性的节点使得与之连接的其他节点表现出脆弱性,但是这种连接可能随时由于连接中断、交互中止、服务取消,或者第三方安全机构的临时补丁等原因而中止,本文把这些连接的中止也归结到修复规则〈recovery1〉与〈recovery2〉中.在规则〈link2〉中,由于脆弱性扩散的隐蔽性,VS组件与W组件连接默认形成了VE组件,VE可以经过规则〈discovery〉再转化为VS.在〈insecure〉中,一方面由于连接中止等方式使得部分节点的脆弱点没有得到彻底恢复;另一方面,又如协议的安全性脆弱点不可能在系统局部得到解决,组件可能仍隐含缺陷,所以部分R组件将重新转化为W组件.此外,对于R组件与VS、VE组件连接进行脆弱性扩散,可以认为先转化为W组件,然后进行脆弱性扩散.需要指出的是,对于修复后R组件不能再转化为W的组件被视为迁移出该簇,将在3.4节中单独讨论.在簇内扩散中,记扩散集合Propagation1={link1,link2,discovery,fail1,fail2,recovery1,recovery2,recovery3,insecure}.对于每个反应(扩散规则),其变迁速率记为rα,α∈Propagation1.在此先不考虑节点的加入与退出,即在一定时间段内组件总量是固定的,并记为N.在某一时刻t,组件W,VE,VS,F,R的个数分别记为nW,nE,nS,nF,nR.由Bio-PEPA的Mass-Action语义规则[12],则反应速率分别满足flink1=rlink1nWnE,flink2=rlink2nWnS,fdiscovery=rdiscoverynE,ffail1=rfail1nE,ffail2=rfail2nS,frecovery1=rrecovery1nE,frecovery2=rrecovery2nS,frecovery3=rrecovery3nF,finsecure=rinsecurenR.3.3由簇间传播导致的脆弱性扩散在具有脆弱点的分布式虚拟化系统中,脆弱性不但会在同种类型的脆弱点之间扩散,有时也会在不同类型脆弱点之间传播.例如组件CA具有一个潜在的访问权限缺陷,但是当前并未表现.而组件CB具有另一种脆弱点类型且已感染恶意软件,当CA连接CB时,其他组件就可以通过CB而获得组件CA的高优先级权限,使CA表现出脆弱性,就发生了一次脆弱性簇间扩散.当然,在其他实例中组件CA也可能更多地表现出CB的脆弱性类型,按照3.1节的分簇原则,此时本文认为发生了组件的簇间迁移,将在3.4节中进行阐述.下面将对脆弱性簇间传播的情况进行讨论.与簇内传播相类似,簇间脆弱性的传播也主要发生在W和VE、VS之间.此外,如果一个脆弱点类型为A的簇locationA内VE或VS组件连接了另一个脆弱点类型为B的簇locationB中VE或VS组件,此时将判断何种类型脆弱点占主导地位,若原来的脆弱点类型A占主导,从整体上来看对脆弱性扩散的范围没有产生重大影响,本文中将不再建立单独的规则;如果脆弱点类型B占主导将视为已迁移到其他的簇,将在3.4节中讨论.若系统中包含l个簇,记簇的集合为C={location1,location2,…,locationl},|C|=l,而locationi,locationj∈C,且locationi≠locationj代表包含不同的脆弱点类型.则脆弱性簇间传播规则如下.[Propagation2]:(10)〈link1ij〉W@locationi+VE@locationj→VE@locationi+VE@locationj簇locationj中VE组件通过连接把脆弱性扩散到簇locationi中W组件;(11)〈link2ij〉W@locationi+VS@locationj→VE@locationi+VE@locationj簇locationj中VS组件通过连接把脆Page6弱性扩散到簇locationi中W组件.记簇locationi到locationj的脆弱性扩散的变迁速率分别是rlink1_ij,rlink2_ij.locationi中W组件的数量为nW@location_i,locationj中VE组件的数量为nVE@location_j,根据Bio-PEPA的反应规则,其反应速率满足flink1_ij=rlink1_ijnW@location_inVE@location_j,flink2_ij=rlink2_ijnW@location_inVS@location_j.若某两个簇之间不存在扩散关系,则令rlink1_ij,rlink2_ij=0.3.4由簇间迁移导致的脆弱性扩散除了不同类型的脆弱点之间存在脆弱性传播,由于系统升级、漏洞补丁或者连接其他脆弱点类型等情况,使得占主导地位的脆弱点类型发生改变,可以抽象为节点在簇间的迁移.例如,系统打补丁后,组件由原来的主要包含A种类脆弱点,改为主要包含B种类脆弱点.为了避免问题的复杂化,本文将脆弱性的传播和演化进行区分,以此拆分某些复杂的脆弱性扩散,而簇间迁移导致的脆弱性扩散将仅涉及演化规则.以图1中簇内传播与簇间迁移划分的实例来做进行进一步说明.图1脆弱性的簇内传播与簇间迁移划分示意图迁出簇locationA中处于VS状态的节点与迁入簇locationB中的另一个处于VE状态的节点连接后,占主要地位的脆弱点类型变为B,这其实是一个复合后的脆弱性扩散,包含簇内传播和簇间迁移.对于迁入的目的簇locationB而言,当簇locationA中节点与本簇内节点相连之前,这些节点与本簇内节点完全不同,甚至不是包含潜在脆弱点的W组件,因此如果不能发生3.3节所述簇间传播,那么这些节点首先必须经过演化转化为本簇的W组件才能被扩散到脆弱性.于是,这个复合的脆弱性扩散过程将包含3个阶段.第1阶段,簇locationA中VS组件由于环境的改变被暂时修复,脆弱点类型A在该节点中将不再占主导地位,即发生规则〈recovery2〉;第2阶段,修复后的节点状态为R,发生簇间迁移转变为迁入簇locationB的W组件;第3阶段,在簇locationB内发生簇内传播,节点状态由W转化为VE,即发生规则〈link1〉.因而,仅相当于发生了由迁出簇locationA的R组件到迁入簇locationB的W组件的演化.同理,对于迁出簇locationA的W组件而言,脆弱点演化发生时从迁出簇的W组件转化为迁入簇的W组件.因此,将脆弱性的簇内传播、簇间传播和簇间迁移区分后,簇间迁移的规则主要包含以下两条.[Propagation3]:(12)〈migration1ij〉W@locationi→W@locationj簇location_i中W组件迁移为簇location_j中W组件;(13)〈migration2ij〉R@locationi→W@locationj簇location_i中R组件迁移为簇location_j中W组件.若组件W和R迁移的变迁速率分别为rm1_ij,rm2_ij∈[0,1],其中i代表迁出的簇,j代表迁入的簇.记locationi中W组件的数量为nW@location_i,R组件的数量为nR@location_i,则簇间迁移的反应速率满足若某两个簇之间不存在簇间迁移关系,则令rm1_ij,rm2_ij=0.3.5脆弱性扩散模型的描述在系统中,两个簇之间的脆弱性扩散关系包括两种基本类型:簇间传播和簇间迁移,而这两种最基本的类型通过组合又可以构成更为复杂的关系.若假设任意选取的两种脆弱点类型A和B是对等的,那么这些组合关系如表1所示.更为一般化,当系统中具有0至可列个节点类型的时候,这些脆弱性扩散关系均成立.在此情况下,假设组件的水平分级step-size=1,在簇k中组件的最大数量为Nk.若j≠i,在[0,T)时间段内,0<T<+,由确定初始数量的脆弱点诱发的分布式虚拟化系统脆弱性扩散用Bio-PEPA描述如下.Page7序号关系表示12345678W@locationi=1)↓W@locationi+(insecurei,1)↑W@locationi+∑j(link1ij,1)↓W@locationi+∑j(link2ij,1)↓W@locationi+∑j(migration1ij,1)↓W@locationi+∑j(migration1ji,1)↑W@locationi+∑j(migration2ji,1)↑W@locationi;VE@locationi=(link2i,1)↑VE@locationi+(discoveryi,1)↓VE@locationi+(fail1i,1)↓VE@locationi+(recovery1i,1)↓VE@locationi+∑j(link1ji,1)↑VE@locationi+∑j(link2ji,1)↑VE@locationi;VS@locationi=(discoveryi,1)↑VS@locationi+(fail2i,1)↓VS@locationi+(recovery2i,1)↓VS@locationi;F@locationi=1)↑F@locationi+(recovery3i,1)↓F@locationi;R@locationi=(recovery2i,1)↑R@locationi+(recovery3i,1)↑R@locationi+(insecurei,1)↓R@locationi+∑j(migration2ij,1)↓R@locationi.在模型中如果某两个簇之间不存在簇间传播或簇间迁移时,则令相应的变迁速率为零.若任意第b个簇中,1bM,令N0为初始时刻组件W、VE、VS、F和R组件的数量,且任意U组件的初始数量满足N0第b个簇中全部组件的数量.则模型可以表述为W[N0R[N0F[N0W1]VE[N0R1]W[N0F2]R[N0EM]VS[N0VE[N0利用该模型可以对包含多种类型脆弱点,且考虑脆弱点演化的分布式虚拟化系统脆弱性扩散过程进行描述和分析.4脆弱性扩散的模拟与分析分布式虚拟化系统脆弱性扩散模型包含诸多参数,它们对模型的稳定性和合理性存在一定的影响.本节将选取量化指标,简要分析脆弱性簇间传播速率、簇间变迁速率以及节点恢复能力等关键参数取值对脆弱性扩散过程的影响,并与实际模拟实验进行比较,为模型进一步改进提供参考.4.1脆弱性扩散的指标常见的系统脆弱性指标包括脆弱点存在的概率和范围,例如文献[4]中脆弱点的数量和分布趋势、文献[8]中脆弱性扩散范围.为了更加精确地刻画脆弱性扩散的趋势,本文参考脆弱性分析和病毒传播领域已有研究成果[8,17-18],提出脆弱性扩散的两项指标包括:脆弱性峰值指数PV,以及脆弱性稳态指数πV.若令q∈S0代表组件种类,location代表簇,得到定义如下.定义2.脆弱性峰值指数.所谓脆弱性峰值指数是指在0<t<+时刻,脆弱态集合Vset中各种类组件数量的最大比值,即PV=Max其中,nq@location代表在簇location中组件q的数量;Ntotal是指系统中所有组件数量的总和.定义3.脆弱性稳态指数.所谓脆弱性稳态指数是指当系统达到稳态后,脆弱态集合Vset中各种类组件的近似稳态概率之和,即其中,πq@location代表在簇location中组件q的近似稳态概率.PV主要用来表征脆弱性扩散的最大范围,而脆弱性稳态指数πV用来表征脆弱性对系统长期的潜在影响.下面将结合提出的指标,就脆弱性的扩散范围与趋势分析其内在扩散规律.4.2脆弱性扩散实例的选取由于分布式虚拟化系统中任意两个簇之间都可能存在如表1所示的8种关系,为了抓住问题的核心,减少随机因素干扰和系统特异性带来的额外复Page8杂性,本文选取一种最为简单的实例,如图2所示.其中locationA、locationB、locationC分别代表包括3种脆弱点类型A、B、C的组件集合,即Bio-PEPA模型的3个簇.其中locationA中节点的脆弱性能够传播给locationB中节点,locationB中节点的脆弱性能够传播给locationC中节点;同时在一定条件下,脆弱点类型A可以演化为脆弱点类型C,即locationA中节点可迁移到locationC.该实例同时包含簇间扩散、簇间迁移,且有节点同时受到簇间扩散和簇间迁移影响,具有典型性.需要说明的是,系统可以包含更多的簇,且它们之间的关联关系可以更加复杂,但核心机理与本文选取的实例是相似的.在分布式虚拟化环境下,由于虚拟化技术的运用,所有计算资源被组织成资源池的形式.在理论上,池中的任意资源被选中的概率是等同的,并不会受到具体地理位置和实现形式的影响.参照文献[8]的假设,不妨设共有N个节点,那么选取任意一个节点的概率是N,即rlink1=1/N;同时由于已经表现出脆弱性的节点VS可能感染诸如蠕虫或间谍软件,图3Bio-PEPA模型与随机模拟结果的对比因此可能会主动发起扫描或连接,不妨假设它的连接机率增加一个数量级rlink2=10×1/N.相对于簇内扩散,脆弱性簇间扩散发生的概率更小,簇间扩散的变迁速率取值为簇内扩散变迁速率的1/10.为了突出簇间扩散和簇间迁移的影响,减少对比试验的随机干扰,假设locationA、locationB、locationC簇内的扩散参数是相同的,其余各参数的取值如表2所示.参数rdiscoveryrrecovery1rrecovery2rrecovery3rfail1rfail2rinsecure需要说明的是,由于模型采用了形式化描述的方法,对于任意给定的目标系统(或实例),均可通过推导得到脆弱性扩散的分析,因而实例的选取不是唯一的.为了提高求解的效率,本文利用爱丁堡大学开发的EclipseBio-PEPAPlugin工具包辅助ODEs求解[19].4.3关键参数对扩散结果的影响(1)模型与仿真结果的对比为了检验模型的合理性,本文首先将提出的模型与采用随机算法模拟的现实系统相比较.令系统所有组件的总量为300,设定3个簇内组件数量(nW,nE,nS,nF,nR)的初始值分别为(70,20,10,0,0)、(100,0,0,0,0)、(100,0,0,0,0),随机算法采用的是Gillespire’sTau-Leep随机算法,选取10000个随Page9机点,误差设置为1×10-5.据此,得到簇locationA、locationB、locationC中的组件,以及系统全局上Vset集合中组件数量的对比如图3所示.其中图3(a)、(b)和(c)分别代表在0到100个时间单位内,在簇locationA、locationB、locationC三个簇中各种组件数量与仿真实验结果的对比.图3(a)显示在初始时刻由于脆弱点的存在,脆弱性在簇内迅速扩散,VE和VS组件的数量逐渐上升.此后随着时间推移,由于簇间迁移的存在,locationA中的节点将逐渐迁移到locationC中,VE和VS的数量逐渐下降并趋近于0.在图3(b)中,受簇locationA脆弱性簇间传播的影响,簇locationB中W组件逐渐转化为VE和VS组件,随后由于节点修复能力的存在,脆弱性被逐渐修复,大量VE和VS组件转化为R组件.然而因为VE不能被全部发现,所以VE和VS组件将逐渐稳定在一定的水平.在图3(c)中,簇locationC中的节点受到簇间传播和簇间迁移的双重影响.由于由簇locationA中节点逐步迁移到簇locationC,因而locationC中W组件逐渐增多,同时受locationB的脆弱性簇间传播影响,VE和VS组件逐渐增多,此后当这两种组件被修复后转化为R组件,于是R将逐渐增多.而图3(d)则为整个系统范围内脆弱性集合中VE、VS和F组件数量的变化,由于节点修复能力的存在,也是一个先增多而后减少到一个稳定值的过程.在图3中,由于VE和VS组件演化出故障或者错误的概率较小,且系统修复能力较强,组件F数量一直处于较低水平.由图3的结果可见,本文模型与模拟结果基本一致,能够反映系统中脆弱性扩散的趋势.(2)簇间传播与簇间迁移对脆弱性扩散的影响.簇间传播是脆弱性扩散的一种重要方式,在本文的模型中主要由簇间传播速率rlink1_ij和rlink2_ij进行控制,分别代表了某个簇中处于VE和VS状态的节图4簇间传播速率对Vset中组件数量的影响点对其他簇中连接节点的影响.在本实例中,rlink1_ij包含rlink1_12和rlink1_23,而rlink2_ij包含rlink2_12和rlink2_23.为了分析簇间传播对脆弱性扩散的影响,下面将以PV和πV为指标,在整个分布式虚拟化系统层面,考察参数rlink1_ij和rlink2_ij取值水平对脆弱性扩散范围和趋势的影响.当连接速率rlink1_ij和rlink2_ij分别扩大5倍、扩大2倍、缩小为原来的1/2和1/5时,整个系统范围内VSet中组件数量的变化如图4所示.由图可见,随着rlink1_ij和rlink2_ij的增大,VSet中组件数量呈逐渐增长的趋势,并且达到扩散峰值的时间减小.根据图4中数据,由式(6)和(7)分别得到脆弱性扩散的峰值指数PV和稳态指数πV,如图5所示.随着连接速率的增长,PV的对应值分别为0.3321、0.3323、0.3402、0.3811、0.4605,即随着连接速率的增大,脆弱性扩散的峰值逐渐变大.同理,得到πV分别为0.1502、0.1505、0.1509、0.1516和0.1535,可见最终脆弱性扩散的范围基本相同.发生该现象的根本原因在于,随着连接速率的增大,簇locationA与簇locationB节点交互更为紧密,发生脆弱性传播的概率增大,因而扩散的峰值增大且时间缩短.但是由于节点数量一定,而节点修复能力不变,簇中感染脆弱性的节点基本保持在一定的水平.由此说明簇间传播速率与扩散峰值正向相关,所以为了抑制系统的脆弱性需要降低簇间传播速率.图5簇间传播速率对脆弱性峰值指数PV和与此相对应,簇间迁移是脆弱性扩散的另一种重要方式,在本文的模型中主要由簇间变迁速率rm1_13和rm2_13进行控制,分别代表了由原簇中处于W和R状态的节点经过演化转化为新脆弱点类型的概率.为了分析簇间迁移对脆弱性扩散的影响,考察rm1_13和rm2_13的取值水平对簇locationC内脆弱性扩散范围和趋势的影响.当把rm1_13和rm2_13分别改变为1/50、1/10、1/2时,在簇locationC内Vset中组Page10件数量如图6所示.由图中可见随着簇间变迁速率的增大,VE和VS组件达到同一水平所需要的时间缩短,加速了扩散的过程.图6簇间变迁速率对簇locationC中Vset组件总数的影响同理,可以得到在整个分布式虚拟化系统层面的脆弱性扩散的峰值指数PV和稳态指数πV,如图7所示.随着变迁速率的增大,脆弱性扩散的峰值逐渐变大,而最终脆弱性扩散的范围基本相同.究其原因,变迁速率的增大使得簇locationA中的节点,甚至是已经被修复的节点迁移到了簇locationC内,因而簇locationC内的潜在脆弱性节点增多,更加容易产生脆弱性簇内扩散.但是由于整体上节点数量一定,而节点修复能力不变,簇中具备脆弱性的节点基本保持在某个确定水平.由此说明簇间变迁速率与扩散峰值正向相关,所以为了抑制系统的脆弱性需要降低簇间变迁速率.图7簇间变迁速率对脆弱性峰值指数PV和(3)修复能力对脆弱性扩散的影响对于目标系统而言,修复能力的存在可以使失效节点恢复,有效地降低VE和VS的水平,对脆弱性的抑制具有重要意义.下面将以PV和πV为指标,通过令rrecovery1和rrecovery2分别在区间[0.1,1.0]之间9等分取值来分析修复能力对脆弱性扩散的影响,得到结果分别如图8和图9所示.图8修复能力对脆弱性峰值指数PV的影响由图8和图9可见,随着rrecovery1和rrecovery2取值的增大,PV和πV逐渐减小,并且最终趋势变得平缓.发生该现象的原因主要是,当rrecovery1和rrecovery2增大时,意味着系统具有更强大的修复能力,VE和VS组件将以更大概率被修复,因而脆弱性扩散的峰值和范围都有所减小.此外,通过对比来看,当rrecovery2和rrecovery1减小同等幅度时,前者带来的PV和πV的增长更为剧烈.这主要是由于VE最终也将转化为VS,VS修复能力的增加可以更加有效地抑制脆弱性.因此,为了降低扩散的最大范围,尤其是脆弱性最终的稳态概率,需要增强节点的修复能力.(4)模型求解开销分析由于分布式虚拟化系统往往包含大量的节点并分别属于众多种类,因此脆弱扩散性模型能够准确快速地求解具有重要现实意义.根据本文模型,对于一个包含l种脆弱点类型的分布式虚拟化系统而言,任意的簇locationk包含的节点数最多为Nk,若采用文献[9,10]的方法都等价于求解一个隐含的马尔可夫过程,则根据传统的基于状态的求解方法,其状态空间未化简前包含的Page11状态数量为即使在状态空间化简后,组件数量也将达到,求解时将面临状态空间爆炸的问题.与之相对,本文采用了Bio-PEPA转化为ODEs的途径,方程个数仅与脆弱点类型相关而与每种类型包含的组件数量无关[13].以本文选取的实例为例子,采用马尔可夫过程、随机模拟和ODEs途径时的求解时间分别如表3所示.其中,初始条件下各个组件所占比例与本文4.2节中实例遵循相同比例,随机算法仍采用Gillespire’sTau-Leep随机算法,取10000个随机点,迭代1000步.而运行环境为WindowsXP,CPU为4核2.0GHz,内存为4GB.化简前的状态组件总共数量309.3×1020608.6×10413004.9×10209—30008.0×102096—300001.0×104202—注:“—”代表所需计算资源已超出了本文实验环境的能力.因此,采用本文的方法可以有效地克服分布式虚拟化系统脆弱性扩散模型求解的状态空间爆炸问题.综合上述分析,不难发现本文提出的模型与仿真结果基本一致,可以提供定量的分布式虚拟化系统脆弱性扩散分析,能够合理地解释脆弱性变化的趋势.而通过参数效应的分析,可以得到各关键参数对本文提出模型的影响,具体包括:(1)当系统中节点的修复能力较强时,将有效地减少脆弱点的数量;(2)簇间传播速率与脆弱性扩散峰值正向相关,能够减少扩散需要的时间,但对最终稳定后的扩散范围影响不大;(3)簇间变迁速率的增大将加快脆弱点在簇间的迁移(演化)过程,进而间接加快脆弱性的扩散.综上所述,需要提升系统的脆弱性修复能力,遏制和阻止不同类型脆弱点之间的扩散,理清脆弱点之间的演化关系,并针对性地进行预防.5国内外相关研究工作随着覆盖网络、云计算以及未来网络技术的快速发展,分布式虚拟化系统的应用范围日益广泛,而由于虚拟化技术的支撑,其不但规模巨大、而且具有显著地动态性、移动性和开放性.这些特点导致了分布式虚拟化系统中由连接而引入的脆弱性大大增加,在数量上已远远超过了系统固有脆弱性缺陷,且随时可能发生并快速扩散,已成为亟待解决的挑战[20].而对脆弱性扩散规律的认识有助于预防、抑制和阻止系统脆弱性的漫延,以较小的代价提高系统的安全性,是目前脆弱性分析的发展方向.目前许多学者已开始研究脆弱性的演化、传播和扩散规律,为脆弱性的防护和修复提供了参考.这些研究主要集中在如下3个方面:第1方面,主要是基于运行日志对特定系统脆弱性扩散的事后分析.英国剑桥大学的Ozment[4]在对现有脆弱性发现模型分析的基础上,利用OpenBSD操作系统八年的脆弱性数据,对该系统脆弱性的演化规律进行了总结.Neuhaus等人[5]则通过自动化的软件挖掘Mozilla系统的现有脆弱点数据库,把所有已知脆弱点映射到组件上,并在此基础上对Mozilla脆弱性的发展进行了预测.Hiller等人[6]分析了数据错误在软件中的传播,讨论了数据错误在关联软件模块之间的扩散行为,并提出了设定检查点和恢复点的定位方法.上述研究主要基于已有系统日志的统计和分析,缺少理论化的推理模型,具有很强的系统相关性,并且很难在软件或系统的设计阶段来指导脆弱性的防治问题.同时,在分布式虚拟化系统中,由于虚拟化技术的存在,计算节点之间的连接是一个概率性事件,已有系统日志难以覆盖所有可能的连接,因而这类研究具有一定局限性.第2方面,主要是系统整体层面上的脆弱性扩散研究.针对信息系统的风险管理,Feng等人[7]建立了一种安全性风险模型(SRAM),基于贝叶斯网络来模拟风险因子及它们之间的因果关系,并通过蚁群算法和专家知识估计最大概率的脆弱性传播路径以及带来的风险值.De等人[8]针对无线传感器网络环境下,由于多跳广播协议带来的脆弱性扩散问题进行研究,并基于该协议通过间谍软件的帮助,讨论了在不同的动作变迁速率、连接性、可恢复性时脆弱性的传播过程,对本文的参数分析具有重要的借鉴意义.但是这Page12些工作都没有关注脆弱点类型之间的区分,没有考虑脆弱性在不同脆弱点类型之间扩散的差异,以及脆弱点的演化问题.第3方面,主要是可应用于系统设计阶段的脆弱性扩散分析模型.为了在软件设计阶段减少脆弱性,文献[9]提出了一种计算脆弱性传播的算法,在面向对象设计中采用脆弱性树的方式测量属性脆弱比率(AttributeVulnerabilityRatio,AVR),主要解决了由于代码重用造成脆弱点在旧有代码与新代码之间的传播问题.在此基础上,文献[10]则研究了在面向对象设计阶段由类的耦合而引入的脆弱性扩散,并采用脆弱性树和ATM进行了分析.虽然在这些研究中区别了脆弱点类型的不同,分别建立了脆弱性树,但是仅仅考虑了脆弱性在同种类型脆弱点之间的传播,而没有考虑在不同脆弱性树之间传播的问题.同时,对于分布式虚拟化系统而言,其巨大的规模导致对象类的数目可能数以百万计,此时利用脆弱性树或者ATM进行状态空间搜索,可能将面临状态空间爆炸问题.此外,针对脆弱性分析的模型还包括基于标签转移图、基于着色Petri网、攻击图模型、需求/产出和模型检测等多种类型[17],但是当系统规模巨大时也面临着状态空间爆炸的问题.综上所述,与现有研究相比,本文的主要改进之处如下:(1)虽然已有部分模型将不同的脆弱点分类[9-10],但通常仅仅研究脆弱性在同种类型脆弱点之间的扩散,即假定扩散是均匀地,而忽略了脆弱性在不同类型脆弱点之间传播的差异,而本文考虑了脆弱性在同种脆弱点类型、不同类型,以及脆弱点演化情况下的脆弱性扩散.(2)在分布式虚拟化系统中,服务所用资源处于远程“模糊化”的云中,无法事先预测连接的对象,据此本文给出了一种形式化的脆弱性扩散模型,节点之间的连接基于概率化表示,适合于分布式虚拟化系统脆弱性扩散的特点.(3)采用的Bio-PEPA形式化描述可以转化为ODEs,与传统分析方法相比,具有更低的时间开销,为应用于如云计算等大型分布式虚拟化系统提供了条件.6结论随着分布式虚拟化系统的广泛应用,由第三方应用引入的脆弱点在数量上已远远超过系统固有的脆弱点,同时服务使用的资源往往来自于远程“云”中的不同位置,通过频繁的动态连接而使脆弱性快速扩散,因此脆弱性扩散已成为亟待解决的挑战.本文提出了一种分布式虚拟化系统的脆弱性扩散模型,利用Bio-PEPA的静态分层特性描述了脆弱性在相同脆弱点类型、不同脆弱点类型之间传播以及由脆弱点演化带来的脆弱性扩散过程,为分布式虚拟化系统的脆弱性扩散规律研究提供了参考.实验结果显示,模型与仿真模拟的结果基本相符合,可以通过提升系统的脆弱性修复能力、降低簇间传播速率、减少簇间变迁速率,遏制脆弱性的扩散.此外,通过把Bio-PEPA转化为ODEs,可以避免传统分析方法的状态空间爆炸问题,适用于大规模和高动态分布式虚拟化系统的脆弱性扩散研究.在下一步的工作中,我们计划研究有脆弱点随机加入退出的扩散模型,以处理更加复杂的情况,并针对实际的分布式虚拟化系统进行验证和改进.致谢在此,我们向对本文的工作给予支持和宝贵建议的各位评审专家、编辑表示衷心感谢!
