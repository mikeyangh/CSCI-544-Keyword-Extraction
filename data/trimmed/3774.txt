Page1问题框架方法的可靠性关注点及系统可靠性增强模式尹斌1),2)金芝1),3),4)李智3),5)1)(中国科学院数学与系统科学研究院北京100190)2)(中国科学院研究生院北京100049)3)(高可信软件技术教育部重点实验室(北京大学)北京100871)4)(北京大学信息科学技术学院软件研究所北京100871)5)(广西师范大学计算机科学与信息技术学院广西桂林541002)摘要软件系统可靠性是软件工程领域的一个热点研究问题.文中以系统可靠性指标为依据,针对问题框架方法,提出了5种与问题相关的可靠性关注点,并设计了相应的系统可靠性增强模式.这些可靠性增强模式将系统可靠性需求显式地引入问题的分析过程中,通过扩展问题的边界和精化机器的规格说明,为增强系统的可靠性提供支持.文中还展示了作者开发的一个支持系统可靠性分析的支撑工具,用于帮助需求分析者识别问题的可靠性需求,并正确地使用可靠性增强模式.最后,文章结合一个银行账户管理问题的案例展示了文中工作的可行性.关键词系统可靠性;问题框架方法;可靠性关注点;可靠性增强模式1引言问题框架方法[1]是软件开发问题的结构化分析方法,其基本原理是,第一,软件需求的内涵是软件可以用于解决的现实世界的问题(用上下文图和问题图表示),对问题进行结构化分析是需求分析的根本出发点.第二,通过问题的投影,将复杂的问题结构化为相互作用的较为简单的子问题的集合.第三,采用面向关注点的分析方法分析问题,首先判断问题所属类型,然后根据这类问题的关注点,推导问题的解决方案.问题框架方法已经吸引了许多研究人员的关注.比如,一些学者提出了一些新的框架来分析安全需求,包括Lin等人[2]提出的AbuseFrames以及Hatebur等人[3]提出的一组SecurityProblemFrames.一些学者关注机器规格说明的获得,比较有代表性的是Li[4]提出的通过问题变换移除领域简化上下文,之后利用形式化的推理将需求转化为机器规格说明.还有一些工作将问题框架方法和其它的需求建模方法结合使用,包括将场景的建模引入问题框架方法中[5],将面向目标的方法和问题框架方法结合[6].与此同时,问题框架方法的应用也越来越广泛.比如,Hall等人[7]基于面向问题的思想,提出了一种软件开发的形式化概念框架———面向问题的软件工程.Lavazza和DelBianco[8]将问题框架方法和UML结合来表达软件需求.而Taylor等人[9]则将问题框架引入到面向对象的软件架构中.软件系统的可靠性是软件工程领域的热点研究问题[10-12],其主要原因在于,第一,软件系统自身的规模不断扩大,复杂性不断提高.比如,一台普通汽车的控制系统也有数百万行代码,而Linux操作系统的源码甚至达到千万行.大规模的系统,其可靠性难以保证.第二,随着互联网技术的日益普及,软件系统将面临着更为开放的环境,为了满足特定的功能,软件系统必须要和网络中的其它对象交互,而网络的不稳定性(网络数据丢失和损坏)和不安全性(恶意攻击者的攻击)等因素威胁到系统的可靠性.第三,软件系统已经融入了人们的日常生活,并起着重要的作用.低可靠性软件系统带来的系统失效将会引起严重的后果,尤其是那些安全关键的系统以及商业系统.目前,在问题框架方法中,可靠性关注点主要针对其问题领域性质有可能失效的情况[1],提出可以通过评估问题领域失效的可能性和失效导致的损害的严重性,来识别系统的可靠性需求关注点,并通过给出更精确的、考虑可能失效的领域描述,来支持可靠性关注点的解决.但是系统的可靠性还蕴含更加具体的内容.比如,在IEEE1633标准[13]中,软件系统可靠性被定义为:软件在给定的条件下,在规定的时间范围内,执行所要求功能的能力.ISO/IEC9126标准[14]给出了系统可靠性包含的3个具体指标,即系统的成熟性、系统的容错性和系统的易恢复性.其中,系统的成熟性,是指系统避免自身错误而导致失效的能力.系统的容错性,是指系统在违反指定接口的情况下,维持特定性能级别的能力.系统的易恢复性,是指系统失效发生后,系统恢复到指定性能级别和恢复受损数据的能力.可以看出,对应到问题框架方法中,系统的可靠性关注点不仅仅涉及领域性质的失效,还应该包含机器领域本身的失效、机器领域和问题领域之间接口的失效、机器领域内部可维护性降低、外部的恶意攻击和网络过载等,这些因素都有可能损害系统的可靠性.本文从分析系统可靠性的3个具体指标入手,结合问题框架方法的建模思想,提出5种系统可靠性关注点,并且为它们分别设计了系统可靠性增强模式,从而为提高系统的可靠性提供需求阶段的帮助.本文第2节讨论如何结合系统可靠性指标确定可靠性关注点;第3节介绍系统可靠性增强模式的设计;第4节详细介绍了对应的5种系统可靠性增强模式;第5节给出支撑工具,并进行案例研究;第6节和第7节讨论相关工作并总结全文.2从系统可靠性指标到可靠性关注点问题框架方法的建模思想是将软件开发问题结构化为相互联系的机器领域和问题领域,其中,问题领域是与问题相关的现实世界的一部分,机器领域是需要构建的软件系统,问题领域和机器领域的交互则通过发生在它们各自接口上的一组共享现象来实现.问题框架方法采用问题图展示问题的结构,图1给出了一个问题图的示意图.其中,矩形代表问题领域,带双线的矩形代表机器领域,问题领域和机器领域之间的连线表示它们之间通过这个接口共享一组现象.Page3问题框架方法中将问题领域划分为三类:因果领域、词法领域和可叫牌领域.因果领域通常是一些物理设备,它们的现象存在可以预期的因果关系.词法领域是数据的物理表示.可叫牌领域通常是由人组成的,它是物理的,却没有明确的可预期的内部因果关系[1].在问题框架方法中,最基本的分析单元是“领域现象”.本文从领域现象入手,分析影响系统可靠性的因素,从而引出系统可靠性的关注点.我们知道,领域现象分为两类:因果现象和符号现象.其基本性质是:因果现象是事件、角色或状态关系实体.因果现象直接由一些领域引起或控制的,并且能够依次引起其它现象[1].符号现象是值、真值以及只与值相关的状态.符号现象用来符号化其它现象及其它们之间的关系,不能改变自身也不能引起其它变化[1].违背这些性质的可能情况包括:(1)因果现象之间在某些特殊条件下丧失其因果性,而且由于因果现象的瞬时性,我们无法获知其因果状态序列,因果现象的因果性质是否满足无法判断.(2)符号现象被非共享领域所窃听、截取或篡改.另一方面,领域通过接口上的共享现象进行交互,但现象的共享有可能失效,比如:(1)共享现象引发速度不匹配.(2)可叫牌领域引发现象的不可预计性,导致引发的现象超出机器领域可共享的范围.根据系统可靠性的3个指标:成熟性、容错性和易恢复性,我们可以从提供系统可靠性为起点来识别问题框架的可靠性关注点.(1)提高系统的成熟性.系统的成熟性,是指系统能避免由于自身错误导致失效的能力.在问题框架方法中,系统由机器领域和问题领域组成,机器领域通过接口与问题领域共享现象,导致在问题领域上产生期望的效果.一方面,共享蕴含了同步,但考虑到当机器和一个因果领域或可叫牌领域之间发生共享现象时,因为这两类领域是物理的,具有自身的行为规律和自己的意愿,它们的行为是否能与机器领域同步成为一个问题.比如,如果问题领域触发共享现象的速度快于机器领域,机器领域还没有处理完前一个现象,下一个现象则有可能丢失,从而引起系统失效.反之亦然.我们称之为现象共享的速度匹配问题,并把由此导出的可靠性关注点称作为速度失配关注点.另一方面,机器需要与正确的问题领域共享现象,考虑到一类可叫牌领域(比如,人)个体的动态接入性,以及每个动态个体领域的身份特性,和他们对共享现象可能具有的不同的共享权限.机器领域需要对这类可叫牌领域进行身份识别,并确定其是否具有共享权限.权限的设置使得可叫牌领域只能共享权限范围内的现象,避免发生错误的现象共享.我们称之为现象共享的身份问题,并把由此导出的可靠性关注点称为身份权限关注点.(2)提高系统的易恢复性.系统的易恢复性,是指在系统失效发生后,系统恢复到指定性能级别和恢复受损数据的能力.通常情况下,一种支持系统恢复的手段是维护系统的运行状态序列,从而帮助查找系统的故障原因,找到系统的恢复状态和该状态上所有信息.对应到问题框架方法的系统建模中,由于系统由机器领域和问题领域组成,因此系统的运行状态应包括:问题领域的状态和机器领域的状态.需要有相关的机制记录这些状态,使得当系统发生故障时,可以利用系统状态序列找到故障原因.我们称之为运行状态保留问题,并把由此导出的可靠性关注点称为运行状态记录关注点.(3)提高系统的容错性.系统的容错性,是指系统在违反指定接口的情况下,维持特定性能级别的能力.在问题框架方法中,系统产生错误的原因分为两种:一种是问题领域性质失效,另一种是机器领域和问题领域接口上的共享现象失效.问题领域性质失效包括,物理设备年久失修,或被人为损坏等.因此需要引入引出问题领域性质是否失效.我们把由此导出的可靠性关注点称为领域监测关注点.接口上共享现象的失效主要来自问题领域和机器领域之间的不安全的连接,考虑当机器领域和词法领域之间发生共享现象时,所发起的现象可能会被恶意的攻击者窃取和篡改.这引出共享现象的加密和校验问题.我们把由此导出的可靠性关注点称为加密校验关注点.这5种可靠性关注点并不能覆盖问题框架方法Page4中可靠性问题的所有方面,读者可以根据上文提到的分析方法识别出更多的可靠性关注点.关系,以及可靠性关注点的描述.表1给出了5个可靠性关注点和可靠性指标的可靠性指标可靠性关注点可靠性关注点描述成熟性易恢复性运行状态记录容错性3可靠性增强模式的框架模式是解决某一类问题的方法论.每个模式都描述了一个不断出现的问题,然后描述了该问题的解决方案的核心[15].目前已经有许多研究人员对于模式在软件开发过程中的应用做出了贡献,比如,设计模式[16]和安全模式[17]等.上一节通过分析可靠性的3种指标,结合问题框架方法的建模思想,识别出了问题框架方法中的5种可靠性关注点.本节则设计相应的可靠性增强模式,用于将可靠性需求引入问题的分析中.关于模式的基本组织形式,Alexander[15]给出了模式表单,称作“Alexander表单”,包括上下文、问题和解决方案.软件工程领域中所提出的模式也基本都遵照了这一形式.本文参考“Alexander表单”,确定如下的可靠性增强模式的表示形式:(1)模式关注点.该模式所对应的可靠性关注点.(2)应用背景.该模式所适应的情况.(3)解决的问题.该模式所解决的问题.(4)解决方案.在确定的应用背景下,为了解决某一问题所提出来的解决方案.可靠性增强模式的主体部分是解决方案,它将对应的可靠性关注点显式地引入问题分析过程中,通过增加问题领域和共享现象,扩展问题边界,获得扩展后问题的机器规格说明,提高系统的可靠性.主要包括如下3个部分内容.模式可用性判断原则.对于一个问题,首先需要判断该问题是否适合使用某个可靠性增强模式,因为任何一个可靠性增强模式只能在特定的应用背景下才适用,也就是说只有满足特定条件的问题才能使用该可靠性增强模式.问题扩展策略.我们知道,一个问题(P)的分析涉及3组描述:机器领域的规格说明(M)、问题领域性质(D)和需求描述(R).可靠性增强模式要将可靠性关注点引入问题分析中,扩展的目的就是使得问题P的需求描述R既包括原来的功能性需求,也包括可靠性需求.然而,在问题框架方法中,需求仅限于对问题领域的性质的期望,即所期待的领域现象之间的关系.可靠性需求可能要求涉及原问题之外的其它问题领域,或者约束原问题中某些问题领域的其它现象.因此,在引入可靠性需求之后,问题中的领域描述D将会发生相应的变化,这种变化包括:的描述.(1)新的问题领域的领域性质描述.(2)原问题中某些问题领域展现出来的新特性将这两种变化映射到问题图,得到的结果是:(1)增加了新的问题领域.(2)识别出原有问题领域中的新的现象.可靠性问题分析策略.问题扩展将原问题P扩展为一个带可靠性关注点的新问题P.我们需要的是在问题P的机器规格说明的基础上,获得P的机器规格说明.在问题框架方法中,问题的分析是通过投影原则将问题分解为一组子问题,直到获得一组预先定义好解决方案的问题框架.可靠性问题分析策略提供对扩展后的带可靠性关注点的问题P的投影策略.4可靠性增强模式前两节分别讨论了问题框架方法中的可靠性关注点以及可靠性增强模式的设计.本节针对5种可靠性关注点,设计了相应的可靠性增强模式,并给出示例展示模式的使用过程.我们对每种可靠性关注点设计相应的可靠性增强模式,其目的在于:将可靠性需求显式地引入问题分析过程中,扩展问题的边界,并最终得到精化机器规格说明,提高系统的可靠性.因此,可靠性增强模式可以被看做是可靠性关注点在特定问题背景下的解决方案.而解决方案往往是不唯一的.文中我们对一种可靠性关注点只给出了与之对应的一种可靠性增强模式,以此来展示可靠性增强模式的设计思路.4.1感知响应模式及示例4.1.1感知响应模式可靠性增强模式一给出感知响应模式,包含5部分:模式关注点、应用背景、解决的问题、解决方案和Page5扩展分解示意图.其中,领域“Sensor”是因果领域,其作用是感知领域D的一些状态,领域“Actuator”也是因果领域,其作用是对领域D采取某些应对措施.现象“sensorPhenomenon”由领域“Sensor”控制,机器可以访问该现象读取“Sensor”的状态,现象可靠性增强模式一:感知响应模式手机操作系统:用户可以使用手机操作系统控制手机的状态,打电话、发短信等.问题图如图2所示.首先判断上述问题是否适合使用感知响应模式.该问题中存在因果领域“CellPhone”,机器可以通过访问现象“poweron”、“poweroff”和“sendsignal”来修改领域“CellPhone”的状态,满足感知响应模式的可用性判断原则.根据感知响应模式解决方案中的扩展策略,该问题可以被扩展成一个新的问题.领域“Sensor”将感知手机的重力加速度并将值传送给机器.当重力“monitoredPhenomenon”表示领域D被监测的变量,现象“actuatorPhenomenon”是由机器控制的,来修改领域“Actuator”的状态,共享现象“controlled-Phenomenon”由领域“Actuator”控制,引发该现象可以改变领域D的状态,来采取应对措施.加速度值超过某一阈值时,说明手机很可能处于坠落的过程中,机器引发和领域“Shrapnel”之间的共享现象“popup”,弹起弹片,使得手机被保护起来,避免手机因摔落而造成无法使用.扩展之后的问题图如图3所示.Page6根据感知响应模式的解决方案中的可靠性问题分析策略,扩展后的问题可以分解为两个子问题.分解得到的子问题一的问题图如图4所示.子问题二的问题图和原问题图相同.可靠性增强模式二:加密校验模式4.2.2加密校验模式示例这里用一个ATM显示系统的例子来展示加密解密模式的使用.ATM显示系统:某银行需要构建一个软件系统,将数据库中的账户信息显示于ATM机上.图5展示了ATM显示系统的问题图.首先判断该问题是否适合使用加密解密模式.该问题中存在词法领域“Account”,机器可以访问现象“accountinformation”.满足加密校验模式的可用性判断原则.分解得到两个子问题,子问题二和原问题相同,完成了功能性需求.而子问题一中的机器可以通过领域“Sensor”来获取手机重力加速度,当重力加速度过大时,可以通过控制弹片来弹起手机保护壳,保护手机.扩展后的问题可以避免一部分因为坠落导致的手机损坏,增强了系统的容错性.4.2加密校验模式及示例4.2.1加密校验模式可靠性增强模式二给出了加密校验模式.其中,领域“EncryptedData”是词法领域,表示加密后的数据.共享现象“encryptdata”是由机器控制的,作用是生成加密数据,共享现象“encrypteddata”是由领域“EncryptedData”控制的,机器可以通过访问该现象来获得加密数据,共享现象“verify”则表示了数据的校验信息.然后,依据加密解密模式解决方案中的问题扩展策略,该问题可以扩展成为一个新问题,扩展后的Page7问题图见图6.最后,依据加密解密模式的解决方案中的可靠性问题分析策略,扩展后的问题可以分解为两个子问题,子问题一的问题图如图7所示.子问题二的问题图见图8.分解得到的两个子问题,子问题一将账户中的数据加密,并且存储于领域“EncryptedData”中,子可靠性增强模式三:日志模式问题二读取领域“EncryptedData”中的加密数据,将加密数据解密,并引发现象“verity”获得校验信息.最后调用与领域“ATM”之间的共享现象,将数据显示在ATM机上.原问题中,机器读取账户的信息,并且显示在显示器上的过程,数据会暴露于不安全的通信环境下且明文传输,可能会造成数据被未经授权的人或系统读取和修改.而使用加密解密模式得到的子问题二,数据是用密文的形式传递的,且在数据使用前进行校验,避免系统因为数据不完整导致的崩溃,提高了系统容错性.4.3日志模式及示例4.3.1日志模式可靠性增强模式三给出日志模式.其中,领域“Log”是词法领域,其作用是记录系统的运行状态序列.现象“addrecord”是由机器控制的,向领域“Log”中新增一条记录.4.3.2日志模式示例这里用一个空调控制系统的例子来展示日志模Page8式的使用.的状态,包括加热和制冷.其问题图见图9.空调控制系统:操作员可以通过程序控制空调首先判断该问题是否适合使用日志模式.该问题中存在因果领域“AirCondition”,并且机器可以通过访问共享现象“temperature”来读取“AirCondition”的状态,满足日志模式的可用性判断原则.然后,根据日志模式的解决方案中的问题扩展策略,该问题可以被扩展成为一个新问题.扩展得到的问题图如图10所示.可靠性增强模式四:授权模式最后,根据日志模式的解决方案中的可靠性问题分析策略,将扩展后的问题分解为两个子问题.子问题一的问题图见图11.子问题二的问题图和原问题图相同.分解得到的两个子问题,子问题二和原问题相同,完成功能性需求.子问题二中的机器,将领域“AirCondition”中的温度状态,以及机器领域中的操作序列记录在领域“Log”里.当领域“AirCondition”运行出现问题的时候,系统的维护人员可以查看领域“Log”的内容,根据温度的变化以及操作序列,推测问题的原因,提高了系统的易恢复性.4.4授权模式及示例4.4.1授权模式可靠性增强模式四给出授权模式.其中,领域“AuthorizationList”是词法领域,并且存储了领域D1中所有身份的权限信息.共享现象“userIdentity”由领域D1控制,机器可以通过访问该现象,获取领域D1的身份信息.共享现象“operationswithpermit”由领域“AuthorizationList”控制,机器可以访问该现象,获取当前身份可以执行的操作.Page94.4.2授权模式示例使用.可以删除、添加和修改文件.其问题图如图12.这里用一个网络硬盘的例子来展示授权模式的网络硬盘系统:用户通过该程序访问网络硬盘,首先判断该问题是否适合使用授权模式.该问题中存在可叫牌领域“User”和词法领域“NetworkHardDisk”,领域“User”可以向机器发起现象“download”,“upload”,“delete”,“rename”,机器可以引发现象“delete”,“insert”,“update”来修改领域“NetworkHardDisk”的值,满足授权模式的可用性判断原则.然后,根据授权模式的解决方案中的问题扩展策略该问题可以被扩展成为一个新问题,扩展得到的问题图见图13.扩展后的问题是原问题的描述变体,如果原问题是有解的,那么扩展后的问题也是有解的.可靠性增强模式五:缓冲模式扩展之后的问题区分了领域“User”的不同身份,机器首先读取用户的身份信息,根据身份信息,读取该身份所允许的操作列表.之后,机器可以判断用户发起的请求是否在操作列表范围之内,如果在,则正确执行,如果不在,则拒绝执行,提高了系统的成熟性.4.5缓冲模式及示例4.5.1缓冲模式可靠性增强模式五给出缓冲模式,其中,领域“Buffer”是词法领域,其作用是缓冲机器领域和问题领域之间触发速度过快的现象.共享现象“addrecord”表示向领域“Buffer”中增加一条记录.共享现象“getrecord”从领域“Buffer”中获得一条记录.4.5.2缓冲框架示例这里用一个火车购票系统来展示缓冲框架的Page10使用.火车购票系统:某城市计划推行火车网上购票,需要构建一个火车购票系统.用户在登录该系统之后,可以购买车票,购买车票的信息写入数据库中.该问题的问题图如图14所示.首先,判断该问题是否适合使用缓冲模式.该问题中存在可叫牌领域“User”,该领域可以引发现象“returnticket”和“orderticket”向机器发送操作请求,满足缓冲模式的可用性判断原则.然后,根据缓冲模式解决方案中的问题扩展策略,该问题可以被扩展成为一个新问题,扩展后的问题图如图15所示.最后,依据缓冲模式解决方案中的可靠性问题分析策略,扩展后的问题可以分解为两个子问题,子问题一的问题图如图16所示.子问题二的问题图见图17.使用缓冲模式得到的两个子问题,其中子问题一将用户的请求先缓冲到领域“Buffer”中,子问题二中的机器读取领域“Buffer”中待处理的请求,并进行处理.如果用户数量很大,会在一个时间段内向机器发送大量的访问请求.在原问题中,当用户发起请求过快时,无法及时处理的请求将会导致系统故障.使用缓冲模式得到的两个子问题则解决了这个问题,可以先把用户的请求缓冲下来,避免由于机器接收到多个请求而导致系统故障,提高了系统的成熟性.5可靠性关注点分析工具及案例研究5.1支撑工具的实现我们设计并实现了问题框架方法的可靠性关注点分析支撑工具.它支持问题框架方法的图形化建模,并且可以利用上述可靠性增强模式对已建模好的问题进行处理.图18是工具界面截图,包括6个部分:(1)菜单栏.提供新建工程、新建问题、打开工程、保存工程和退出程序的功能.一个工程可以建模多个问题.(2)工具栏.提供采用问题框架方法进行建模共享现象的信息以及需求的描述.(5)可靠性增强模式操作面板.上部列出了5种可靠性增强模式,点击其中的一个模式,该模式对应的介绍会出现在面板下部.右键点击一个模式,可以弹出菜单,帮助建模人员使用该模式完成对画布当前展示问题的处理.(6)问题层级展示面板.展示工程所有问题之间的层级关系.其中,表示当前工程,表示已经被分解的问题,表示未被分解的问题.的基本图元.(3)画布.用于图形化表示一个问题,还可以创建问题框架方法的基本建模元素,包括机器、接口、领域和需求.可以双击建模元素修改其属性.画布采用多标签面板实现,可同时对多个问题建模.(4)补充描述面板.给出问题图中各个接口上Page11图18支撑工具界面截图本节以银行账户管理问题为例,展示可靠性增5.2案例研究强模式的使用过程.银行账户管理系统:某银行要构建一个储户账户管理系统,储户可以在网上登录系统,修改自己的用户名、密码等信息,也可以进行资金的提取和存入.另一方面,银行还在城市各处安放了ATM机,系统要将储户的信息正确地显示到ATM机上.图19展示了上述问题的问题图.由于ATM机分布于城市各处,系统和ATM机之间的消息交互需要通过不安全的网络,因此考虑用加密校验模式处理该问题.处理之后,原问题被分解为两个子问题:“银行账户管理(a)”和“加密账户信息”.其中,问题“银行账户管理(a)”是原问题的控制变体,问题“加密账户信息”可以匹配到变换框架.图20和图21分别是两个子问题的问题图.对于问题“银行账户管理(a)”,由于领域“User”中存在着多个个体,且有不同身份类型,因此可以采用授权模式处理该问题.处理后,该问题被分解为一个子问题:“银行账户管理(b)”,见图22.问题“银行账户管理(b)”是问题“银行账户管理(a)”的描述变体.在问题“银行账户管理(b)”中,领域“User”中有大量的个体,他们可能在同一个时间段内,向机器发送大量的访问请求.因此,可以采用缓冲模式来处理问题“银行账户管理(b)”.Page12处理后,该问题被分解为两个子问题,分别为:“银行账户管理(c)”和“缓冲请求”.其中,“银行账户管理(c)”是“银行账户管理(b)”的控制变体,而问题“缓冲请求”可以匹配到简单工件框架.两个子问题的问题图见图23和图24.至此,问题层级展示面板如图25.在问题层次结构的叶节点上是最后得到的3个子问题,包括加密账户信息、缓冲请求、银行账户管描述变体.理(c).这3个子问题就是使用可靠性增强模式对银行账户管理问题处理的最终结果.这3个子问题都是有解的.(1)加密账户信息.匹配到变换框架.(2)缓冲用户请求.匹配到简单工件框架.(3)银行账户管理(c).是原问题的控制变体和与原问题相比,其可靠性增强体现在:(1)处理后的3个子问题在数据传输之前做了加密处理,接收端检查校验,避免了因为数据不完整导致的系统崩溃.(2)缓冲用户发来的访问请求,避免因为访问请求过多导致的系统崩溃.(3)区分用户的身份权限,降低了用户误操作和恶意用户攻击的可能.6相关工作软件系统可靠性是软件开发过程中关注的重要问题之一,随着软件规模和软件作用范围不断扩大,软件系统的可靠性问题显得越来越重要.软件系统失效对人们的影响从生活不便,到经济的损失,甚至是失去生命[10].在传统的软件工程中,软件的可靠性通常是通过基于测量的方法分析的.其核心思想是检测并记录运行中的系统发生的错误和失效,通过分析这些数据发现系统的错误行为、识别系统瓶颈、量化可靠性指标[10].需求阶段是软件工程的第一个阶段,如何在需求阶段捕获、建模和分析可靠性需求以及提供软件系统可靠性的需求级别解决方案一直是需求工程研究者关心的问题.比较有代表性的工作有:(1)文献[18]提出了一种用UML建模和分析系统可靠性的方法,该方法分为四步:首先用UML建模整个系统,然后将UML模型转化为等价的XMI表示,之后将XMI表示映射到基于统计的可靠性模型上,最后计算得到系统的可靠性.(2)问题框架方法本身也已经考虑了可靠性问题,其可靠性关注点主要针对问题领域性质失效的情况[1],认为可以通过评估问题领域失效的可能性和失效导致的损害的严重性,来识别系统的可靠性关注点,并通过给出更精确的、考虑可能失效的领域描述,来支持可靠性关注点的解决.(3)Strunk等人[19]从基于用例方法的基本观点出发,提出“AssuranceCase”,并将它与问题框架相结合.用问题框架表示“AssuranceCase”的问题结构描述,以帮助“AssuranceCase”方法分析系统Page13的可靠性需求.(4)面向方面的需求工程方法是将“方面”的概念引入需求阶段,对功能性和非功能性横切关注点的分离给予了支持.Safonov[20]提出了一种面向方面的软件可靠性工程,从关注点分离的角度分析软件系统的可靠性.随着互联网技术的不断成熟,越来越多的软件系统依赖互联网提供在线服务.一些恶意的用户通过互联网对软件系统发起攻击,造成信息泄露、信息篡改、软件系统拒绝服务等.这些攻击通过破坏系统的安全性,导致系统失效,从而降低了系统的可靠性.需求工程的研究者提出了一些软件系统安全性需求捕获、分析和建模的方法,比较有代表性的工作包括:(1)文献[21]提出了一种面向安全性的Tropos方法扩展.该方法基于Tropos的建模思想,定义了一组安全概念,包括安全性约束、安全性依赖和安全性实体(安全性目标、安全性任务和安全性资源),并且提供了一个安全建模过程将安全概念引入到传统的Tropos方法中.(2)Sindre和Opdahl[22]将“NegativeScenario”(系统用户不期望出现的情况)引入用例上下文中,创建了误用例的概念.在此基础上,文献[22]提出了一个安全需求抽取的过程,包括五步:识别关键资产,定义安全目标,识别威胁,识别和分析风险,定义安全需求.(3)在问题框架方法中,需求表达为用户期望的现实世界和软件系统交互后的作用效果.与此对应,Lin等人[2]提出“反需求”的概念,用于表示恶意攻击者的需求.在此基础上,文献[2]设计了三种“滥用框架”,包括interception(拦截)、modification(修改)和denialofaccess(拒绝访问)等.“滥用框架”用于表达安全威胁和分析恶意攻击者实现“反需求”的可能情况,最后识别出软件系统的安全漏洞.与以上方法不同,本文从软件系统可靠性的3个技术指标入手,识别出问题框架方法的5种可靠性关注点,并设计了相应的可靠性增强模式,将可靠性需求显示地引入问题分析过程中,与功能性需求相结合,并映射到问题的结构上,最终导出扩展后问题的机器规格说明.其主要贡献具体包括:(1)通过分析公认的系统可靠性的3个指标,即成熟性、容错性和易恢复性,结合问题框架方法关于问题分析的基本原理,以及问题领域的特征,识别出5种可靠性关注点.(2)参考了关于模式的经典的“Alexander表单”为每种可靠性关注点定义并设计了可靠性增强模式,将可靠性需求显示地引入问题的分析过程中,通过新增领域和共享现象,扩展了问题的边界,并提出问题精化策略,精化机器的规格说明.(3)设计并实现了支持可靠性关注点分析的支撑工具,帮助系统分析人员正确使用可靠性增强模式,分析可靠性需求,提高系统的可靠性.7结束语本文以广义的系统可靠性指标为依据,系统地研究问题框架方法中的系统可靠性识别和分析,以提升系统可靠性为目的,结合问题领域的性质,提出可靠性关注点,以及系统可靠性提升解决方案.在问题框架方法中,可靠性关注点的分析和解决还有许多值得研究的方面,包括:(1)将时间因素引入到问题框架方法的建模过程中.引入时间因素的好处在于,可以分析系统可靠性的一些具体测试指标,例如:平均无故障时间,平均恢复时间等.(2)将概率计算引入问题框架方法中.软件系统的可靠性通常是经过大量测试,统计出来的一个结果,可以用概率的形式去描述.概率的引入将会有助于建模者分析可靠性关注点.(3)形式化建模可靠性增强模式的使用步骤,使得可靠性增强模式分解方案的有解证明更加严格.(4)开发更为强大的工具,支持问题框架方法中可靠性关注点的分析.
