Page1软件定义网络系统中面向流的调度算法宛考罗雪峰江勇徐恪(清华大学计算机科学与技术系北京100084)摘要软件定义网络(SoftwareDefinedNetworking,SDN)由于其控制和转发分离的特性,在学术研究和工程上广泛应用于数据中心等领域.SDN体系结构中没有规定特定转发机制,而是通过更改控制模块或者开发具体的控制器App来实现.NOX是斯坦福大学在2008年提出的第1种OpenFlow控制器,它基于OpenFlow协议提出了类似传统路由器OSPF协议的最短路径转发算法,即NOX路由模块(NOXroutingmodule).该算法通过SDN系统控制链路收集全局交换机静态参数,并没有利用SDN系统的优势来获得交换机运行时的状态信息来提高转发性能.该文根据SDN集中控制以及控制器计算能力可扩展等特性,设计SDN结点、路径和流的评价体系,将各体系分支的评价指标作为交换机运行时的状态信息参数,在此基础上提出均衡算法.该Online算法具有自适应性和启发性,有效地提高了SDN在转发过程中(特别是针对大数据量)的运行效率.关键词软件定义网络;自适应启发式算法;集中控制;流分析;下一代互联网1引言软件定义网络(SoftwareDefinedNetworking,SDN)系统作为信息网络研究的一种实现方式,其控制平面和数据平面分离能够提供信息处理的高度可控、易于实现和部署等特性.目前SDN系统基本以OpenFlow[1]为主要协议进行开发和实现,在企业网、数据中心、接入网、网络虚拟智能等应用中有颠覆性的表现.开放网络基金会(OpenNetworkingFoundation,ONF)①组织成员中的一些大型网络技术公司都推出了自己的SDN体系实现,如IBM-SDN[2]、Nicira-SDN[3]、G-ScaleNetwork[4].在学术研究中,基于集中控制的网络流量负载、流传输质量是研究的热点.SDN最著名的应用场景是提高数据中心之间的链路利用率.Google的B4网络中[4],使用SDN调度专用交换机能够使得链路利用率达到95%以上,Microsoft的SWAN控制器[5]除了具有高链路利用率外,还能够自动解决拥堵更新(congestion-freeupdate)问题,并能使用非专用商业交换机.以上两种SDN构架和方案是基于广义网和数据中心之间的,调度的数据流量需求预先已知,不能很好应对非预知数据,同时方案在小规模数据中心或者数据中心内部实现代价过大,本文提出的基于SDN系统面向流的启发式均衡算法能够在一定程度上解决以上两个问题.在集中式控制机制下调度资源并使系统状态达到最优化已有相关研究,如文献[6]中提出在数据中心中根据当前网络负载情况调整交换机数量的方法实现负载均衡;文献[7]中对SDN控制器进行了分析,通过建立规则集来实现流分布,减小控制器过载和延迟,以及控制规则表规模.这两种算法都是通过更改传输机制的方式,因此都需要修改OpenFlow协议.文献[8]中提出增加一个实体RackManager来处理源路由匹配问题,减少控制器匹配负担,但其收集信息都是通过静态调用实现不能很好应对网络流量变化情况.文献[9]中提出一个调度系统,设计定制化的路由策略,能够动态调度计算和带宽资源;文献[10]中把负载均衡算法作为插件嵌入NOX.这3篇文章都提出了增加额外事件驱动模块辅助控制器,但这些模块只是针对当前状态,不能对未来网络运行状态进行预测.文献[11]在SDN交换机和普通交换机混合节点网络中提出了基于OSPF的SOTE算法,通过动态分配权值减轻了混合局部拥堵路径,提高整个混合网络的工作效率.但是该算法抓取信息是即时信息,仅对当前状态有效.为了让调度算法获得网络各实体的状态信息并能达到最优化部署,本文将网络实体运行状态信息收集和权值评价体系与调度算法脱离,以线程独立的模块运行在控制器系统中.其中权值评价体系主要针对运行过程中节点、路径和流进行实时估值评价.各模块工作方式为:控制器额外增加信息收集模块收集实体运行信息,优化计算模块,使其根据一些规则对这些收集信息进行评价后得出相应估值,流分配模块再根据这些估值选择最佳匹配方案,调度模块根据最佳方案进行部署.通过以上4个独立模块协同工作后可以使系统运行更加高效.在权值评价体系中,本文使用启发式自适应算法来预测未来网络运行状态.由于SDN系统特性是全局控制和基于流分析的,因此可以收集的信息既有系统历史信息,也有系统全局信息;既有交换机节点信息,也有流信息.控制器端通过收集有用信息来估计未来系统状态(自适应),并通过预测的未来状态求出可能性最优解(启发式),因此可制定更加合理优化的转发策略.本文提到的自适应启发式算法应用在以下几个方面:(1)流的动态性预测.根据测量流的出现次数来估算流的发生频率,预测未来流分布情况.引入流量参数能够更加准确地描述流的运行状态;(2)估算交换机转发上限阈值.节点评价模块通过当前承载转发的流对交换机有一定预判,在发生堵塞之前能够及时预警,避免节点堵塞不能工作;(3)评估节点转发性能.预测节点剩余带宽或者剩余流量,链路算法以此为权值进行最短路径选择;(4)路径评估.对两节点所有路径进行筛选,创建可选路径集合,并在可选路径中预测未来路径上的流状态,为路径选择算法提供估计参数;(5)对流进行评估.当节点发生超载时,为了节点恢复正常需要转移部分承载流,流评价模块对该节点上运行的流进行评价估值.本文第2节讨论SVN系统中面向流的调度算①https://www.opennetworking.org/Page3法的背景、可行性和动机;第3节具体研究算法细节;第4节给出算法实现框架;第5节通过实验对算法进行评价;第6节讨论未来工作和阐述本文结论.2算法背景本节通过两个实例讨论在最短路径算法中,因不能获得网络中实时状态信息和预测未来运行情况而带来的系统资源利用问题和可能引起拥堵情况,并讨论了SDN上实现面对流的调度算法的可行性.图1流选择不同节点(左图显示插入流前网络运行状态;中图显示选择最短路径流的运行状态,经过的节点有2.1.2系统资源利用情况静态算法调度时,评价各个节点运行状态是相互独立不相关的,各节点不知道其他节点的运行状态.每个节点都会优先服务优先值高的流,由于没有全局意识,优先值低的流就会很有可能被节点拒绝服务,但如果全局情况下,评价低的流是可以运行的.如图2示例,左图中显示在某初始环境下,网络中有3个流:A→E、A→F、A→D,其分别承载的节点路径为:AE、AGF、ABCD.各个节点创建本节点阈值来评价继续增加负载的能力,各节点优先选择负载比较小的流,这样能够使得承载该服务后不超过阈值.系统某时刻需要创建新的流A→D,假设在评价体系下,流A→D负载很大.在独立节点情况下,各个节点不考虑全局信息,只根据本节点运行状图2全局信息下流的可分配(左图有3个流:AE、AGF、ABCD.当创建新的流A→D,左图A相邻结点E、G、B因节点本身独立阈值设置,均不能负载该流,系统拒绝承载该服务.中图因知悉全局情况,可调整分流,流AGF转向为AEF,这样G节点因空出流AGF的承载能力,系统可以承载流A→D的服务,创建路径AGD.右图是另外一种可2.1.3Offline算法问题文献[6-8]中提到的算法是静态Offline算法.2.1传统算法的问题2.1.1最短路径选择NOX和FOX默认是以类OSPF[12]选择最短路径方式来寻路的,权值为节点带宽.如图1示例,左图显示一些节点已经有些负载.中图有新流A→D申请产生,在节点AD间有3条可选路径:AEFGD,AGD,ABCD.通过传统最短路径计算得到路径AGD.但此时A点G点都存在负载,因此可能引起节点超载.右图通过收集3条路径实时运行状态,得出最优路径ABCD.这些运行状态是实时的,因此实现算法必须是Online的.态创建本节点阈值,如左图所示.A相邻结点E、G、B因节点本身独立阈值设置,均不能负载该流,系统拒绝承载该服务.中图因控制器知悉全局情况,控制器可调整E节点分流,流A→F改变路径为AEF,这样G节点因空出流A→F的承载能力,可以承载流A→D的服务,创建路径AGD.这种调度方式在路由器没有全局实时智能下不会出现,通常做法是拒绝服务造成丢包.右图是另外一种分配方式,将ABCD当前运行的流段移到AGD,新建的流以AB-CD路径进行传输.控制器可根据一些权值判定那种方式更加合理,再具体进行部署.在大量复杂拓扑情况下,当流集合总流到达系统能力阈值时,此种情况经常出现,造成系统资源不能充分利用的情况.其核心实现方式是:收集部分或者全局的信息,通过最优化算法算出最优解,再根据最优解进行资源重新Page4部署.Offline算法的问题是收集的信息是基于瞬时的,其最优解只对收集时刻的整个系统状态有效.如果系统不是基于时不变假设(Non-TimeVariantAssumption),当系统运行一段时间后,系统状态发生变化,之前最优解便有可能失效.同理,当发生节点超载时,由于处理错误模块的算法计算和部署延迟性,当系统部署好处理策略后其超载节点已经不是超载状态,因此处理方法失效.2.2运行时状态算法在SDN上可行性为了提高系统运行性能和减少失效配置,需要有运行时状态算法对全局进行均衡调度.该算法需要满足:(1)基于网络节点和链路的实时信息;(2)信息是全局性的;(3)算法能够在一段时间内具有有效性;(4)算法能够快速部署,并且部署代价比较小.SDN系统以下几个特性能够比较好的满足以上几点,使得运行时状态算法在SDN系统上具有可行性.2.2.1集中控制本文所讨论到的集中控制,主要关注在集中收集全局信息上.SDN并不只限于集中式控制,一些商业控制器都有分布式控制模型,如Google、Nicira、NEC共同设计的Onix模型[13],并在B4网络中应用.一些超大型网络收集全局信息可能需要多个控制器并对信息碎片进行拼接.但本文的算法不是瞬时全局信息相关的,其启发式可以允许有一定的信息“时差”.传统路由器网络中,OSPF通过LSA得到全局网络拓扑以及各节点间路径传输带宽,路由器分布式转发全局性信息,并独立维护全局信息副本.文献[14-15]中对OSPF和IS-IS协议重新设置权值,目的是为了尽可能描述节点和链路运行时状态,但还是以静态方式实行,因此需要多次触发权值收集和计算模块,这种间接性获得全局信息机制有一定局限性.如果需要更多的全局性信息,如运行时节点状态,运行时链路状态及运行时传输流状态,路由器需要更复杂的扩展模块,这种高性能智能路由器功能升级困难,命令行接口及配置复杂,部署成本昂贵,难以实际推广应用.相对于传统网络,SDN额外提供控制器实现集中控制功能,控制器通过有专门的控制链路连接各交换机来收集全局信息,有专门的操作系统以及App实现复杂的调度计算功能.在传输过程中,集中控制的主要实现有收集全局信息、执行控制功能、全局部署策略.2.2.2实时性控制信息丰富SDN是基于流分析的,如PCEP协议和BGP-LS/SNMP的路径记录,ForCes协议的XML文本描述.本文将以OpenFlow作为示例具体分析,并在实验中实现.对于流的相关分析,其分析粒度可在Open-Flow1.0规范定义十元组(输入端口、MAC源地址、MAC目的地址、以太网类型、VLANID、IP源地址、IP目的地址、IP端口、TCP源端口、TCP目的端口)进行选择,没有被选择的元组通过通配符号代替,如在防火墙级别的流分析上,元组可选择传统五元组.通过流分析,能够得到更加丰富的运行时状态信息.OpenFlow流定义中,就有多种信息供控制器读取.在控制器端设置特殊的流分析模块,可获得更多信息如流应用特性、带宽大小、长短流、流的出现频率等等.流的描述特征越丰富,其对流的实时预测越准确.文献[16]通过设计链路权值使局部网络传输稳定,文献[17]通过MPLS标签处理来保持网络流量稳定,文献[18]通过在QoS支持的网络中对网络事件进行学习来预测未来情况,这些都是额外增加路由器模块来获取网络复杂信息.SDN作为全网状态敏感的系统,为基于全网感知的算法提供实现基础.控制器收集到的全局信息不再局限于网络静态信息,还可以收集系统运行时的状态信息,如节点工作信息、流传输信息.这些信息为Online算法提供了很好的参考数据,如LABERIO[19].通过这些信息可使用自适应启发式的算法来预测未来特性,因此会更智能更高效.算法的计算代价全部由控制器及额外模块承担,在交换机层并不感知,因此具有很强的可执行性.SDN协议对流的操作控制使得可以进行多粒度处理,算法本身提供的可操作项也更多.如当节点运行出现热点即超过阈值时,控制器可自适应选择最大可能转出该节点的部分工作流将其排出,并安放这些流到其他节点,而不仅标记该点不可用.2.2.3可编程和可扩展构架在传统路由器结构中,一些具有多个管理功能结构的调度算法往往需要高性能路由器来实现,这些路由器往往价格昂贵,且配置复杂和功能升级代价过大.在SDN系统中,具体的控制器系统提供了API,我们可通过编写具体控制器系统的App对网络资源进行调度和操作.本文通过在控制器端增加额外的模块来收集信息、计算权值和优化数据集,这些模块是线程独立的,调度模块会根据这些结果计Page5算最优结果并部署到系统中.3算法设计3.1流的动态特性和流参数的规约简化设SDN系统中所有流X1,X2,…,Xn组成集合XX,对于某个流Xi,运行带宽为bXi流频率本身具有时间的统计特性,可以通过建立流的历史信息库,对其启发式预测未来运行情况.信息库样本量越大,预测会越精确.对流频率的信息收集方式可以通过以下两种方式实现.(1)传输协议规定流在传输过程中携带相关描述信息,运行过程中触发一些事件时,可让控制器事件处理模块调度流分析程序,对流携带的信息进行储存和统计.在OpenFlow的1.3版本(目前OpenFlow最新发布版本为1.5,本文仅讨论稳定版本1.3)中,与流运行时状态相关的描述信息字段如表1所述.流表项自创建起时间从表1中可知这些信息字段是基于交换机流表的,这些字段不太关注流本身运行时工作状态.因此通过流携带描述相关信息这种方式需要重新扩展协议标准,更改和增加控制器系统底层模块对新加字段的解析功能.(2)在控制器APP层增加对流频率测量模块和储存模块.这种方式比较灵活,使用控制器OS提供的功能和API接口,可根据考察标准的不同定制不同监测方式和收集储存方式.本文采取这种方式.实际操作中由于无法预知准确流特性,ΛXi通过流检测模块对其历史信息进行计算得到的统计近似得出.假设信息收集模块更新频率Frc,值λXi已经收集信息c次,其中流Xi出现xi次,即λXi=xi/c.对于节点集合SS某个节点S,记上面运行的流集合为X(S),流Xi在其出现概率为λXi路径上节点集合为PXiA,B∈PXiλXi性质相关,如一些流在白天出现频率很高,夜间出现频率很低.频率可用λXi刻、App代表流种类,这取决于对流分析粒度.流的分析粒度大小是通过流观测值参数数量来调整的.2.2.2节中提到OpenFlow1.0规范的十元组可作为流分析的基础参数.但这些参数不是必须的,参数数量同信息收集模块复杂度和运行消耗代价有很大联系.在数据中心网络中流数量和种类都非常多,为了减轻收集和计算模块负担,我们需要减少流的参数数量,因此对流参数的简化和分类规约是必需的.文献[20]中通过FlowVisor从网络功能和流类型划分的粒度对网络流进行规约,这种方法控制了分析粒度,但不能获得运行时统计特性.文献[21]中分析数据流之间的通配特征,减小了对控制器的访问,这是从细粒度对流进行的分析.本文仅选取了流的起始地址和目的地址二元组,以交换机节点为基本单位,对网络性能进行均衡分析.3.2节点转发阈值上限本文认为节点被动拥堵造成的损失远大于节点主动拒绝服务丢包造成的损失,因为被动拥堵是不可控,无法通过有效算法解决的.因此需要设定阈值,避免节点超载后运行到完全瘫痪.通过交换机节点负载流的带宽总和的带宽占用率Pwl(S)作为某个节点S运行时承载状态.设b(S)为节点带宽,工作流负载占用带宽为wl(S)=∑wl(S)/b(S).一般情况下管理员根据经验或者由交换机缺省自定义阈值,通常在50%~70%之间.这种设定的静态阈值不能根据节点实际运行情况进行自动浮动,当不同流经过某交换机节点时,控制器因固定阈值采取的处理事件应对不能很好适应实际运行的流状态,从而对整体性能造成影响.固定阈值特别不适应承载动态和不能预知的负载,如交换机节点承载带宽小的流情况.假设短流Xshort产生前,系统中已有流集合X1,…,Xn运行,对系统资源配置已存在在优化状态Sop(X1,…,Xn).当流Xshort在交换机节点S生成时使得该节点负载超过固定阈值TH(S),引发系统处理节点超过阈值事件.控制器对系统中各交换机节点进行流调控重新分配后,得到优化状态Sop(X1,…,Xn,Xshort).短流Xshort很快结束并在很长时间内不再产生,此时系统中流X1,…,Xn运行在有短流Xshort存在的优化配置X1,…,Xn,Xshort下.因为系统工作在流集合X1,…,Xn下,有Sop(X1,…,Xn)Sop(X1,…,Xn,Xshort),即系统状态Sop(X1,…,Xn,Page6Xshort)在X1,…,Xn下不是最优状态.没有预测流Xshort的运行时状态就会造成此类情况发生,此时如果将阈值调高些就不会触发系统重分配事件,从而避免引起的次优状态后果.流进行规约后在相同路径在一段时间内流的性质是相同和具有延续性的,如长短流带宽、占总流带宽比重、发生频率等等.因此可以通过自适应启发式算法,根据在某个节点上承载流的历史特性预测未来特性.根据流未来特性,可以设置节点的上限阈值.3.2.1通过节点带宽估计阈值上限本文引用绝对中位差MAD(MedianAbsoluteDeviation)[22]统计方法处理节点历史信息.MAD作为稳健统计方法它为传统统计方法提供了一种替代方案.其目的是生成一种不会受模型假设的细微偏差过分影响的模拟量.MAD是统计离差的一种稳定估计量,对于没有均值或者方差的分布来说,它具有更好的性能,如Cauchy分布,因此比样本方差或者标准差具有更广泛的应用.对于数据集中的异常值,MAD比标准差具有更好的容忍性.由于标准差对样本值与均值的差取平方,所以从平均来看,大偏差值会造成更严重的偏离,这样异常值的影响将更大.而对于MAD,少量异常值与均值之差的数量级是可以忽略不计的.MAD定义为MAD(X)=mediani(|Xi-medianj(Xj)|),由3.2.1节定义,经过当前节点的MAD值为MAD=mediani(|bXi-medianj(bX定义节点带宽上限阈值为其中,α∈R+,为自定义参数,系统管理员通过调整α值来微调节点转换流的程度.MAD值越小说明该节点上的流带宽很平稳,节点上线阈值可以调大些,节点可以承载更多的流.MAD值越大,说明该节点各流带宽差别很大,需要调小上限阈值避免带宽大的流突发造成节点过载拥塞.3.2.2通过节点流量估计阈值上限上节MAD参考的是流的带宽统计值,流生成频率λXi为参数调节交换机节点阈值已经够用,这是因为简单系统中流种类较单一且频率变化不大.但在复杂系统中,流种类较多频率变化频繁,因此调节节点阈值需要考虑流频率参数.λXibXi确描述流运行状态,能很好地解决频率高的短流优先级过低和频率低长流优先级过高的问题.通过流量估计MADF值定义如下:MADF=mediani(|λXibXi-medianj(λX定义节点的流量上限阈值为以上两种算法复杂度为O(n2).需要注意的是,当采取4.1节中计算模块,每次计算都有上一次数据记录,我们不需要每次都统计所有样本,因此算法复杂度可降为O(n),每次计算因有上一次均值参与,故具有自适应性.3.3节点评估当交换机节点负载超过阈值后,控制器需要对该节点上的流进行重新调度,减轻该节点负载.对于选出来的流,需要对其进行重新寻找路径算法操作.触发该算法事件有:当一个流需要重新放置时或者产生新的流.传统OSPF协议运行最短路径算法,对节点评估权值为Metric/b(S),其中Metric通常取静态值为108bit,通过LSA传输信息.该算法有两个问题:一是节点样本量过大.最短路径算法基本通过Dijkstra算法实现,此算法的时间复杂度为O(n2),n为节点个数.当没有采取启发性时,网络节点探测方式是圆形波阵面展开的,当结点数量很多时,算法消耗过大.有一些基于Dijkstra优化的算法,方式是对样本节点进行预优化,这样可以使得选择样本减少,目前认为最好能够到O(l+nlogn)[23],l为链接个数.二是节点带宽不能反映当前节点运行时状态.传统算法中没有根据实际节点实际运行时情况,b(S)越大的节点,被分配的流越多,因此实际上越拥堵.因此需要对节点进行运行状态评估.节点评估算法对当前节点可承载状态进行评估,路径选择算法淘汰大量不在阈值范围的节点以减少样本量.通过这两个步骤能够有效解决传统算法的两个问题.采用该算法代价是在控制器端增加全局监控模块,独立动态计算模块以及矩阵维护模块.这些额外的模块在数据转发过程中的消耗可忽略不计,因为本身算法是根据流情况在少量样本中取值,这些样本和取值都是独立模块已经维护好的统计结果.3.3.1节点剩余带宽评估节点剩余带宽评估(NodeLeftBandwidthEvaluation,NLBE)方式为:设节点S可被调用带宽为Avail(S),上限阈值为THu(S),一般的有则剩余带宽为Page7可被调用带宽为Avail(S)=THu(S)·b(S)-wl(S).拓扑中节点集合SS中各节点状态b(S),bXi际观测值,通过信息收集模块收集,并被写到节点状态向量.wl(S),THu(S),Avail(S)通过计算模块读取节点状态向量矩阵得到,并被写到节点状态向量对应区域.路径算法读取Avail(S)作为权值,淘汰大量不在阈值THAvail(S)范围内节点(本节算法为小于阈值情况),计算得出预测最优路径.其中XXtrigger为触发最短路径算法发生时刻节点S同时新生成流集合,一般情况下为了降低算法复杂度和增加即时反应速度,THAvail(S)取静态经验值.其算法复杂度为O(n).3.3.2节点剩余流量评估NLBE算法是基于节点本身的当前承载能力的,但是流频率λXi对未来某节点运行状态有很大影响.假设某个时刻系统检测到一个带宽大的流正在运行,算得Avail(S)值比较小.但其发生频率很小,之后便很少出现.这样会使得这段时间内实际Availac(S)值远大于计算Avail(S),造成资源浪费.同样情况,如果流带宽小但频率大,实际Availac(S)值远小于计算Avail(S),造成系统资源最优分配失败率增加.以上两种情况都会造成系统次优状态运行概率增加,整个系统处理能力降低.节点剩余流量评估(NodeLeftFluxEvaluation,NLFE)方式为:记节点S可用流量为FluxAvail(S),工作负载可记为流可能消失而造成剩下的流量为可被调用流量为FluxAvail(S)=THu由FluxAvail(S)定义可得到一些现象:当λXi=1时,该算法退化到NLBE算法.该流发生频率λXi=1时,可取固定预估值.当流带宽比价平稳,所有的流频率λXi1/2时,可知一定有足够的容纳带宽不超过阈值的流,这类节点被当做优质节点.最短路径算法选择节点时优先考虑优质节点,这样能够尽量缩短寻找节点时间.其算法复杂度为O(n),因为阈值和流量都是通过前次数据迭代计算的,因此具有自适应性.3.4可选路径评估可选路径评估运用在新建流或者选出一些流后需要重新放置路径,该算法需要额外模块.在某时刻Ti通过最短路径算法选出的节点状态是时刻Ti的状态,NLFE中通过流估计值λXi态.鉴于SDN控制器控制层面可扩展特性,可以建立两节点间的路径数据库,实时算法可通过可选路径上节点状态来评估路径情况.当网络拓扑改变时,触发寻找两点路径集合算法,更新各网络路径数据库,该数据库仅记录两节点连通情况,非运行状态的复杂信息.本算法默认网络节点硬件上开关频率很低,如在信息收集频率内不会开关多次.这样收集到的节点信息被认为是有效的.运行状态信息收集模块收集各节点运行时信息,当发现某条路径上的一些节点超载时,排除这些路径,在剩下可选路径中,通过下面的评价算法获取信息,判定可选最优路径.3.4.1路径带宽评估路径带宽评估(LinkBandwidthEvaluation,LBE)方式为:设路径集合开始节点Ssour和结束节点Sdes表示为,Path(Ssour,Sdes)为两节点可选路径集合,Pi为可选路径集合某一条路径,Si,j为Pi路径上的某一传输节点.则Pi路径可用带宽为每条路径上节点带宽最小值决定,即有路径选择算法选择带宽最大的路径,即Pm={maxbPi其算法复杂度为O(n).3.4.2路径流量评估路径流量评估(LinkFluxEvaluation,LFE):流X在路径Pi上各节点Si,j的带宽被认为是一致的,但流的实际频率ΛXi于信息收集模块收集信息频率Frc并不和优化调整模块频率Fro同步,为了使优化调整信息有效,有Fro-Frc=ΔF.其中,ΔF为两模块频率差,ΔF过大会使得收集信息时效性降低,ΔF过小频繁触发优化事件会产生过优化状态,即整个系统已经接近优化状态,再次触发优化取得优化结果差别并不大.Page8Fro除了受到优化调整模块主动触发影响外,还受到流生成和交换机节点超载受到影响,因此Fro是个动态值,为反馈函数:为了便于取值,一般使ΔF主动取值ΔF∈[0,Frc/2],从而得到估计值Fro.在可选路径Pi上每个节点Si,j上测到的频率λX(Si,j)并不是相等的.其相对误差为|λX(Si,a)-λX(Si,b)|ΔF,Si,a,Si,b∈Pi.流X如存在多条可选路径,则各路径必然存在至少两个以上(源和目的两个节点)重合节点.重合节点上的流X频率,接近等于该节点上所有可选路径频率之和.如图1中,流A→D,有3条可选路径,节点A上测试到的流频率为3条路径流频率之和.节点G上测试到的流频率为两条路径上流频率之和.因此对于流X在Pi上的频率,可取非重合节点最大值:λX(Pi)={maxλX(Si,j)Si,j∈Pi,通过统计流在各可选路径上的概率,可估计该流在可选路径上产生的未来流量为对于路径的选择,有两种选择方法:(1)最大流量(LFE-MFE)最大流量指选择该流所有经过的路径中有最大流量路径,即选择路径:Pm={maxFluxX(Pi),Pi∈Path(Ssour,Sdes)}.因为该流在这条路径上运行流量最大,被认为该条路径容量最适合该流,该条路径同其他可选路径比起来,不会因为进行调整而最先选择该流.其算法复杂度为O(n).(2)最佳匹配(LFE-BFE)流在运行中,流量有大有小.最佳匹配指选择流量最合适的路径,选择合适路径后,相差流量趋近为0,使得该剩余流量不浪费,流X的流量期望为取路径:其算法复杂度为O(n),以上流量取值都基于流频率参数,因此具有自适应性.3.5流评估传统传输方式中节点对流的处理方式是做尽力转发服务,如果节点不能承担服务则丢弃转发包,一些协议如TCP会根据丢包情况被动调节流量.这种以节点为单位的分布式控制转发方式在全局上对流进行分析控制比较弱,而SDN的集中控制方式能够将监控、收集信息、计算路径、转发等过程进行解耦而不损害转发性能和效率,通过独立的进程可以专门全局对流进行控制,可以收集更加丰富的信息.通过这些信息集可以对流进行评价计算,独立的转发进程可根据这些评价值进行更好的流调度.同样受到流分析粒度大小影响,如果粒度过细,造成的系统负载和延时过高.为了使得评价模块有效运行,本文算法只对规约到二元组的流进行评估.当一个节点在运行中超载后,控制器需要对该节点进行修正,以便该节点回到正常负载状态.传统情况采取鸵鸟策略(NoawarePolitics):最原始的方法就是交换机节点保持工作状态不变,继续对承载的流进行转发服务,该节点继续超载直到堵塞(即是负载超过100%).交换机堵塞后会触发堵塞事件,控制器会标记该节点堵塞,再把上面承载的流调度到其他节点.此种策略下交换机必然会出现传输堵塞事件,控制器会进行堵塞事件处理以致系统传输性能降低.在SDN系统中可采取方法很多,鉴于SDN集中控制和控制能力可扩充特性,当一个节点上的负载超过阈值时,可以对当前流进行选择,将一些流转移到其他路径.这种方式需要对流进行评估,以便相关选择算法根据其评估值进行选择.在选择流中,算法并不复杂,一般选择权值最高最值得排除的流.同节点评估和路径评估不同的是,流评估不仅仅注重运行时状态,更加重视其“迁移”的困难程度.3.5.1流运行时状态评估控制器流评价模块评价流运行时状态,可参考参数有流带宽、流频率、流流量、流内容等.其目的是把在当前节点状态最不好的流选出,并能使其正常工作.(1)带宽评估最小带宽方法(MinimumBandwidth,Min-B)是从带宽最小的流往上选择.将当前节点流集合X(S)占用带宽bXiX2,…,Xn}.从最小到最大开始累加,其和第1次达到需要移动的带宽量bout时,开始排除这些短流.设向上差值为Page9即求最大带宽方法(MaximumBandwidth,Max-B)是将当前节点流带宽排序后,直接选择最大带宽的流移出.设向下差值为即求使用最小带宽方法好处是能够恰到好处地选出空间,使得空出浪费最小.因为带宽大的流移出来能够合适的路径不太多,其他节点可提供带宽都不够.缺点是这些带宽小的流需要m次部署工作.最大带宽方法能够让空余的带宽可以填补更多的流,该节点超载的几率降低,移出流的重新部署的次数少了,缺点是被移出的带宽大的流可能没其他交换机节点有足够的剩余带宽能够承担.其算法复杂度为O(n).(2)流量评估通过带宽评价流运行状态不需要额外模块,但参数改成流量bXiλXi不能更加准确评估流运行状态.当增加流量bXiλXi时,也可用类似带宽评估的方法进行流量评估.将带宽bXi(MinimumFlux,Min-F),最大流量方法(MaximumFlux,Max-F).其算法复杂度为O(n).3.5.2流可管理状态评估流管理评价主要在控制器调度流方面,当对流进行操作时会有相应代价.一般情况在流传输中是路径分配好就不再移动的,除非路径节点发生超载触发重新寻找路径.但在数据中心中当需要高效承载更多服务时,需要优化流的路径选择,对流的操作评价就需要考虑流移动的代价.流的“管理性质”分两种场景:一是指SDN系统对流可控程度,如流非正常工作管理,流转移的困难程度;二是指在移动流场景中移动便捷性和移动后提高系统整体效率程度.3.5.2.1违反服务等级协议评估在流转发中,默认流的频率λXi的,其占用带宽bXi但是,也有可能在流传输中出现奇点情况,如某一时刻带宽激增.用户本身可能并不知道,如DDOS攻击等等,流量不受交换机带宽限制突然增大.本文算法为了避免出现这种情况,使得统计数据对原本数据造成污染,附带了违反服务等级协议(Service-LevelAgreementViolation,SLAV)处理模块.目前,SDN并没有官方的类似于云基础设施即服务(InfrastructureAsAService,IAAS)层的完整契约模块,如限制流量(本身是最大服务的),契约服务,用户管理等等.本文在实验中增加部分简单功能,避免奇点干扰减少统计误差,该模块在算法中是可选的.在SDN扩展模块中,也可以通过流用户同SDN进行契约协商,即服务等级协议(Service-LevelAgreement,SLA).SDN系统承诺满足服务,如果SDN系统违反发生SLA情况,系统会有一些惩罚补偿.但用户发生SLAV,则系统可对其服务进行选择,拒绝服务或者评估为优先级比较低的服务权值.Radware①公司在OpenDaylight②控制器系统框架内提出了Defense4All产品,主要目的是防范DDOS攻击,为用户提供安全管理和服务.本文增加类似模块,该模块在算法中是可选的,仅辅助信息采集模块实现简单功能:通过检测流量避免奇点干扰减少统计误差.需要注意的是流量激增本身不能准确标明该流是受到劫持或是处于不正常工作状态,因此需要与用户契约模块协同工作,与其中声明的流量大小进行比对.OpenDaylight项目中VirtualTenantNetwork提出了租户概念,该子项目还在发展中,但没有特定标准规定租户应该声明何种消息格式和内容.其算法思想如下:设一个流Y第i次统计该流的带宽记为bY(i),经过第n次统计,该流Y统计的平均流量为在第n+1次,如果流量激增,即超过本身某个限度时bY(n+1)-bYμ·bY+ν,该流被认为是超过系统能够承担能力,其中参数μ∈R+、ν∈R可以作为系统与用户的服务契约.流Xi发生违约时,被SLAV管理模块设置权值Slten(Xi),并被记录到该流的状态库中.Slten(Xi)可适当取比较大的值,以便让流选择程序将该流移出繁忙节点,避免引起整个系统性能降低.SDN因自身调度也发生违反SLA情况时,控制器也可增加模块记录流Xi被SDN系统违反SLA情况.在调度流时,可通过SLAV管理模块设置权值Slsys(Xi),并通过设置系统惩罚值Penalty(Slsys(Xi))①②Page10增加调度模块的权值来提高该流服务质量.这种方式对某一具体流具有优化性,不提高整个系统性能.在本文中,该部分在实验部分被忽略.3.5.2.2流可移动性评估(FlowMovableEvalua-流管理中有两种情况:(1)新的流Xnew生成时,设Xnew开始节点和目的节点分别为Ssour和Sdes,因节点负载情况,系统无法通过最短路径算法创建一条最短路径Pi来负载该流;(2)对已运行的流Xt,当前所用路径为Pi,可选路径集合Path(Ssour,Sdes),Si,j为Pi路径上的某一传输节点.假设运行过程中Si,j拥堵或者超过阈值,系统会选择另外一条可选路径Pa来传输流Xt.传统方法中如果没有可选路径,即:(1)没找到Pi或者(2)没找到Pa,系统就认为无法服务.不过在集中控制情况下,系统可尝试预判是否可以将部分权值低的流转移到其他路径,在路径Pi增加额外能力来承载流Xi服务.流的可移动性评估可通过更改流表的节点数目来参考.(1)情况中,可选择Path(Ssour,Sdes)中路径上承载流量最小的路径Pi,尝试增加流Xnew,来得到过载节点集Sov(Pi),从而规约到(2)情况.对每个过载节点Si,j∈Sov(Pi)上承载的所有流集合X(Si,j)中每条流Xi,通过路径选择算法得到新可选路径Pa后,有相同路径节点集合为Pi∩Pa.这对于原路径Pi,需要在流表中减少Xi流表项的节点集合为Sdel=Pi-Pi∩Pa,需要在流表中增加Xi流表项的节点集合为Sadd=Pa-Pi∩Pa.流转移代价Mov(Xi)定义为Mov(Xi)=Cost(Sadd)+Cost(Sdel),在SDN系统中,各节点调整流转移代价有着细微差别,与各节点流表以及整个系统的运行状态有关,本算法认为每个更改节点消耗相等.流评价权值定义为MXi=Mov(Xi)-η·Slten(Xi),其中Slten(Xi)为可选值.根据以上分析,则可以在当前节点Si,j上承载的所有流集合X(Si,j)中,对所有流进行筛选和权值排序.选出权值较小的流进行移出.设有r个,将这些流移出后,路径空出流量为其满足条件为M(X)bXλX.当移动流过多或者修改节点过多,系统可能因为修改流表消耗过多时间,修改后系统也不易恢复稳定状态.通过定义移动阈值Mup来控制移动情况,当移动节点数超过Mup可判定不移动该流.即要求当没有可选路径时,即每条流都找不到替代路径,或者找到路径但不满足Mup阈值,则认为系统不能经过调整满足服务.其算法复杂度为O(n2),同样由于采取4.1节中记录前次优化数据方式,我们不需要每次都全局计算样本值,只需用当前值同上次优化后的值进行计算,其算法复杂度为可降为O(n).由于Mup与具体系统拓扑和任务负债有关,只能通过经验取值,因此流可以移动性评估具有启发性.4系统框架及运行流程SDN可以通过不同协议来实现,使用Open-Flow优点在于能够控制流量通过交换机方式,并通过网络传递到网络拥有者、单个用户或者单个应用程序.能够让用户制定一些路径政策,以便找到可用带宽、较少延迟或阻塞.OpenFlow也有扩展性和安全性等弱点.安全性弱点是因为集中控制的原因,外部攻击可以从一个点攻击,不像分散式的会相对安全.ONF现在也有专门的项目组解决安全性问题,但目前还没有解决扩展问题的项目组.OpenFlow协议1.3版本提高了扩展性,但还达不到商业程度需求.同时,目前实现SDN北向接口(NorthBoundInterface,NBI)的方法在数量已经超过20多个,虽然每一种方法都很有价值,但是数量过多也造成编程接口的混乱,网络服务提供商、系统架构和应用开发人员都有采用不同的接口来实现自己的SDN应用实例的方案.因此本文提出的各个模块,可能部分能够通过使用一些控制器提供的API实现,但不能保证所有控制器API能够完全实现所有模块.在不能用API实现的情况下,需要编写独立模块协同控制器系统工作.4.1系统框架节点、流和路径等网络状态信息运算模块通过控制器App实现,各状态信息通过数据库储存其历史信息,其原始数据、计算数据和优化数据存于对应数据表中,供与状态信息管理模块提取.某时刻的优化数据是通过当前网络状态数据和该时刻前一时刻优化后的历史数据计算而来,因此不需要对大量历史原始数据计算便可得到当前时刻最优值.Framework中各模块进程独立,各模块负责结点管理,路径管理,流管理,SLAV管理功能.调度模块负载选取优Page11化后数据进行部署.以Path模块为例,模块内部构成如图3.各模块内部功能如下:(1)信息收集模块收集相关信息,包括节点运行状态、节点位置、链路情况、流运行状态信息等等.收集信息过于频繁,系统全局信息会比较精确,但带来的消耗也过大.在实际运行过程中,可由系统管理员设定一个初值F0,然后根据实际运行情况及反馈信息,调整收集信息频率,避免因为收集信息带来的消耗,具体值在5.1.3节中设置.(2)权值计算模块通过文章中提到的自适应启发式算法,通过收集到的信息数据库,计算相关权值.(3)优先值计算模块该模块将权值根据评价算法进行计算,得出最终优选结果或者优选结果集合,由调度模块选取进行部署.其中,为了尽量缩短自适应算法样本的收集时间,需要一定频率将各状态信息保存到数据库.模块重新启动能够读取这些数据,这样能够获得之前已经统计的样本信息,提高预估值精确度.估价数据库包括流经过节点,流带宽等流运行状态信息.当新流增加时可以改写新流增加事件,控制器登记同时可以直接建立流初始化信息.当一个节点没经过预估值突然堵塞时,同样可改写堵塞事件,分析堵塞原因(堵塞的流情况),哪个流引起故障,然后记录相关信息到流状态数据库,这个时候可以根据对引起堵塞的流评价Slten(Xi)值.4.2工作流程所有模块都是通过事件驱动,其中信息收集和状态计算都是线程独立模块通过一定频率触发.收集模块收集到信息后,写在原始数据库,再通过状态计算模块进行优化计算,得出一些权值和筛选后的数据集.调度模块再根据事件处理函数选择这些数据集进行合理计算,得出结果后重新部署.在实现算法评价时,本文关注的事件如下:(1)节点堵塞节点堵塞由SDN系统本身触发事件,可改写节点堵塞事件处理函数,标记引发堵塞的流,并通过流评价模块得到流权值,根据这些权值选择一个或者多个流进行分流.(2)节点超载即节点超过阈值,与节点堵塞不同的是节点超载时节点还可以继续工作.该事件由检控模块发起预警事件,并由调度模块处理,处理方式同节点堵塞.(3)新建流当节点有新建流时,系统触发新建流事件.可改写该事件:最短路径算法读取的权值改为状态计算模块算出的值,当最短路径算法找不到路径时添加分流算法.5实验和算法评估状态优化模块通过不同评价算法得出相应数据值,调度算法根据这些值部署到系统中,根据系统运行情况来评估这些评价算法性能,同时与SDN系统缺省算法进行比较.5.1实验5.1.1平台介绍由于条件限制,本文选择最方便获得的Mininet①,目前Mininet是大部分科研机构和工程实验室接受的交换机模拟运行环境.但Mininet设计构架在控制器扩展情况,存在以下讨论议题:(1)单一交换机不能同时指定连接多个控制器;(2)同一实验场景中,独立交换机不能指定不同的控制器IP;(3)多控制器之间交互和发现.因此,算法中各独立进程模块只能被部署运行在单一控制器上,实验结果不能很好展现算法框架在分布式控制器环境下性能优势.尽管如此,算法框架能够对未来运行状态有一定预判性,能够有效避免拥塞,在单机控制器环境中能够体现效率优势,5.2节中实验结果能够说明情况.5.1.2硬件设置实验选择POX②作为控制器系统,算法基于POX中Python脚本实现,可以推广到其他控制器平台.控制器所在软件环境为Ubuntu14.04桌面①②Page1264位版本,硬件环境为DELLR710,其中CPU为双XeonE5620,2.4GHz;内存16GB,硬盘600GB.Mininet中交换机选择胖树为拓扑结构模拟数据中心场景.在严格胖树拓扑结构情况下[24],k个POD(组)里有k个叶节点交换机,每个POD下层k/2交换机连接k/2个Host,k个POD共可连接k3/4给个Host,其中有叶节点交换机k2个,中心交换机(k/2)2个,核心路由器1个.一般数据中心一个cluster的Host数量在1000以上,可以取k=16来模拟1024个Host场景,此时叶节点交换机256个,核心交换机64个.但这在实际实验中模拟320个交换机已达到承载服务器的极限性能,无法再进行模拟流的传输工作.而在实际数据中心网络拓扑搭建中,为了减少交换机成本,并不遵循严格胖树拓扑结构.本文实验在Mininet环境中各节点组成仿胖树结构8个POD中各中心交换机与核心路由器相连.每个POD有8个交换机,每个叶节点交换机连接Host个数服从[11,20]的随机分布,这种结构可处理700多个Host情况.整个系统结构有64个叶节点交换机,8个中心交换机,叶节点交换机带宽为100MB,中心交换机带宽1GB.模拟环境所在软件环境为Ubuntu14.04服务器64位版本,Mininet版本为2.1.0.硬件环境为DELLR710,其中CPU为双XeonE5620,2.4GHz;内存32GB,双硬盘600GB.为了在单一承载硬件服务器上尽可能模拟多交换机节点来接近实际数据中心拓扑情况而不降低性能,实验没有设计在交换机传输带宽为10GB和100GB场景.通过同比例设计传输流量大小,并不影响对算法在实际运行中的效率和性能评估.实验中Mininet没有生成与交换机相连的Host,这是因为:(1)算法只关心交换机运行性能,将叶节点交换机中各Host之间传输的流通过流规约为叶节点交换机之间的流;(2)算法中不涉及Host,为了节省模拟运行环境承载服务器的资源和提高性能,流直接在节点交换机端产生.5.1.3数据设置在Mininet中可以通过ping,iperf,wget,netperf,netcat或者python环境下的scapy等命令在Mininet控制台指定某特定节点产生流.但这些流生成方式是静态的,不能动态模拟实际数据中心流工作情况.为了更好模拟实际网络运行情况,试验中设计POX程序通过独立进程来模拟动态流产生过程,通过Wireshark进行接受包统计.根据5.1.2小节中特别指出的Mininet模拟数据中心环境的承载服务器实际情况,流带宽与交换机带宽设计成一定比例.实验中通过设计长流和短流来模拟实际流带宽分布,流传输节点配对在叶节点交换机集合中随机产生,在实验中设置为每个叶节点交换机每秒产生规约后的流(3.1节)个数为服从泊松分布,其中λ值取值范围为[50,2000],当流数目总数越大时,其并发流配对越多,即λ取值越大.同时规定当发生拥塞时,保存该流下次重发直到传输成功.在节点交换机/中心交换机带宽100MB/1GB情况下,大流带宽大小服从[1Mbps,10Mbps]为区间的随机分布;小流带宽大小服从[1Kbps,10Kbps]为区间的随机分布.各种相同带宽大小的流发生频率分别服从指数分布,每次实验流的数量总和相等,长短流按照设定配给比例产生,缺省情况下比例各为50%.5.1.4算法设置实验过程中,系统运行过程如下:(1)节点正常工作,按照控制器分配好的流表正常进行转发包工作.(2)通过MAD或者MADF判断节点是否超过阈值.(3)节点状态超过阈值,触发该节点重新选择路径事件.(4)路径选择事件使用最短路径(NLBE和NLFE),最优可选路径(LBE和LFE)算法,两个路径算法因参数不同分别有带宽和流量两种实现方式.(5)如果分流事件增加流评价功能,则对流使用可移动性评估(FME)算法.MAD-NLBE标签表示实验中采取算法为节点阈值使用带宽估计算法,当需要选择路径时使用节点剩余带宽评估算法.其他算法标签可从表2中得出相关内容.我们设置以带宽为评价基础的MAD-NLBE,MAD-LBE和以流量为评价基础的MADF-NLBE,MADF-LBE,MADF-NLBE-FME,MADF-LBE-FME算法进行实验,并进行相互比较.同时我们也引入NOX和Floodlight中缺省的基于OSPF协议的最短路径算法(ShortP),与以上算法进行比较.Page135.1.5算法时间和初始值设置由于我们利用额外模块统计流频率,并将最近一次优化后的数据进行记录作为下一次优化操作的输入值,这样减少了大样本量的统计和取值计算.4.1节中提到,F0值设置同收集信息模块相关,与实验中交换机数目,链路数目和任务数目相关,也同实验机器性能相关.由于没有准确值,我们只能通过统计数据得出合理值.我们测到,在任务随机分布情况和5.1.2节中硬件环境下,控制器收集所有数据并计算结果进行部署需要2s~3s延时,我们将F0值设为3s.当F0值超过10s时,当突发任务增多时,优化设置逐渐失效.5.2实验评价系统可通过多种参数评价性能.本文选系统服务时间宏观上评价各策略在系统上运行效率,选取各个策略运行中发生的分流次数来评价对流服务造成的影响,节点超载预警次数评价策略对节点智能调度能力.在各项实验中,能够观测到系统存在一个处理能力阈值,超过该阈值系统开始频繁出现部分流得不到服务情况.该阈值与网络拓扑、流配对分布、流量大小等网络运行时状态有关.该阈值是动态值,只能通过观测评测数据确定其范围,不能得到准确值.5.2.1服务时间相同流数量和大小情况下,各个算法处理时间不同,我们在相同负载和资源情况下比较各个方案处理时间.实验结果如图4所示.通过图例可以看到,最短路径算法(ShortP)开始和其他算法差别处于线性关系,但是到了107附近,性能急剧变差.这是因为到了系统处理阈值,开始有流不能得到服务.带宽和流量的权值都能够有效降低寻路节点样本量,因此各优化算法都能够更快响应.在系统处理阈值之后,也能保持较快的反应时间.流量能够更加精确的反应节点状态,因此在选择节点算法中选择的路径能够更好地完成流传输服务,体现在整体服务时间更少.5.2.2发生的分流事件次数当新流产生时,如果通过分配路径算法不能找到可承载的路径,就可能触发分流事件.该情况表明可选路径上已经饱和,我们对算法MADF-NLFE和MADF-LFE分别增加了触发主动分流事件处理:MADF-NLFE-FME和MADF-LFE-FME,与原算法比较处理结果如图5所示.从实验结果可以看到,在一般情况下,采用MADF比MAD情况要好,采用可选路径比最短路径要好.不过超过系统处理能力阈值后,可选路径比最短路径要差,这是因为,最短路径获取的是即时信息,可选路径是经过一定频率计算的统计值,超过系统处理能力阈值后,可选路径反应能力没有最短路径快,从而不能得到服务的流更多.在使用分流处理功能后,系统并不能完全消除该事件,从实验结果可以看出,产生流与该事件大部分满足log取值的线性关系.5.2.3节点过载次数本文通过观测节点过载次数来判定算法的稳定性.如果算法发生节点过载次数过大,则该算法分配流承载路径并不能考虑流运行情况,会造成路径重新分配.节点过载情况如图6.Page14从实验结果可以看出,原始的最短路径算法引起的节点过载次数很高,具有运行时情况的算法能够减少过载情况.但是超过系统处理阈值时各算法节点过载数目趋近相同,这是因为大量流情况已经有很多节点趋于饱和状态,没有过多的空余节点承担额外流.分流处理进程在系统性能阈值之内能很好的避免节点过载,但超过阈值引起的改变有限.5.3实验结论通过以上3个实验场景,对各种评价体系进行实验评价.发现增加评价体系后,系统在处理能力阈值之内能够有效增加系统性能.增加额外处理模块后,能够减少系统节点过载等消耗.但是超过系统能力阈值后,算法性能降低,当需要适时信息时,一些原先运行很好的算法会失效.此外,本文提出的算法框架中,认为控制器端模块因CPU达到100%,可能会因等待CPU分配计算资源造成延时,从而使算法有效性降低.实验中,在控制器和Mininet承载服务器端观测CPU负载情况.在流数目为[900,107]区间,承载服务器CPU运行没有达到100%.在流数目108时,Mininet端无影响,控制器端有间歇性达到100%,不过持续时间少于1000ms.在流数目109时,因控制流的并发发生数目过大,控制器和Mininet承载服务器都发生CPU过载情况,此种情况下因Mininet模拟开始失效,比较难以分析算法有效性,故在实验中没有流数目109情况.6总结与展望本文详细讨论了SDN集中控制和控制能力扩展特性,并对当前转发模式进行了分析.分析了静态特性的优缺点,引进了节点状态、可选路径、流状态3个评价体系,通过在控制器端编写APP或者更改基础模块来实现.在系统运行时各个模块独立线性工作,收集特定信息并加以优化计算,得出优化统计信息提供给相应供控制器调度模块使用.与一般算法比较,因为有了额外的计算优化结果,控制器不需要额外计算最优值,因此能够迅速反应,保持长时间的最优状态.通过Mininet模拟实际交换机情况,设计POX相关APP,部署后经过实验得出结论:在控制器能力满足额外模块运行需要下,改进后的体系结构和算法能够在系统阈值能力范围内有效的提高传输性能.随着作者对该问题的研究深入,发现还有许多工作未来值得注意和跟进.实验改进.由于Mininet的限制,一些实际数据的测量比较难以进行,如:(1)直接通过测试数据中心的实际流量值来确定算法性能和有效性是最直接的.但因实际数据中心拓扑庞大,流量节点分散,Mininet目前还不能达到该扩展度;(2)Mininet目前不支持多控制器,同时本身不支持多物理服务器承载,因此本文算法中的独立线程模块scale-out的特性在少样本量情况下只能体现少量优势.静态模型扩展.本文的根据流特性产生的启发性算法,算法复杂度比较小,原因是部署时延比较小.更精确性的算法,算法复杂度增加,也会增加控制器模块复杂度.自适应启发算法的上限分析、准确度分析需要进行跟进研究.动态模型.在考虑到算法效率时,同时也要考虑到额外模块的复杂度和重新部署的时延,需要折中平衡.系统本身符合一些Markov转换特性,可以通过系统动态建模来实现该模型,通过随机过程的一些特性,在统计学特性上进行预测分析.流复杂分析.SDN流量预测模型运行方式是在控制器端增加流信息统计模块,根据流被监控到的历史统计特性来预测其未来行为.本文对流的分析限于流带宽和频率,流也可从内容特性来推测传输性质.如根据协议标签对流进行统计性取样标记进行长短流分析,这样也会增加模块复杂度.模块的扩展.本文算法是以POX为基础,基于Openflow协议,所以一些模块是以该系统的APP来实现的.目前SDN也有其他控制器系统如Flood-light、Beacon、Trema、Maestro、SNAC、OpenDay-light等.各种控制器系统体系结构并不一样,APP实现功能的方式不一致,统一的API接口能够更加有利于模块的扩展.模块的性能.本文提到的模块都运行在控制器主机上,这些计算消耗不算入转发消耗中.但是控制器主机能力有限,目前没有一个很好的平台能够分散计算能力和数据处理能力.因此模块数量过多时会影响处理效率.
