Page1MDx差分攻击算法改进及GPGPU上的有效实现周林韩文报祝卫华王政(解放军信息工程大学信息工程学院郑州450002)摘要Hash函数广泛应用于商业、安全等领域,其中MDx系列Hash算法应用最为广泛.因此对MDx系列Hash算法的攻击在理论上和实际应用上都有重要的意义.自王小云教授提出差分攻击算法并攻破MD5、MD4等MDx系列算法以来,对该算法的研究日益受到关注.文中以攻击MD5的差分攻击算法为例,改进了Klima提出的MD5隧道差分攻击算法,分析其在GPGPU上实现的可行性和技术要求并在Visualstudio6.0的环境下利用CUDA语言开发完成.算法的CUDA程序在GeForce9800GX2平台下运行,平均每1.35s能找到一对MD5碰撞.通过同4核Core2QuadQ9000(2.0GHz)PC上的实现相比较,在GeForce9800GX2上的实现能达到11.5倍的性价比.关键词MD5;Hash函数;差分攻击;隧道技术;多消息修正方法;CUDA;GPGPU;MersenneTwister1引言Hash函数是密码学的重要分支.以SHA-1、MD5为代表的MDx系列Hash算法是最为典型的Hash函数,应用也最为广泛,例如Hash算法在密码协议中具有重要作用.在密码协议设计中一般都使用随机预言模型,即假设所使用的Hash算法是安全的.Hash算法的安全性直接关系到密码协议的安全性.因此对Hash函数的安全性分析一直是密码界的热点.在CRYPTO98上,Chabaud和Joux提出一种对SHA-0的攻击方式.在261的计算复杂度之内,就可以发现一次碰撞(即两个不同的消息对应到相同的消息摘要);这个数字小于生日攻击复杂度280,其安全性低于一个理想的杂凑函数抵抗攻击所应具备的计算复杂度.2004年,Biham和Chen发现了SHA-0的近似碰撞,其中160位消息摘要中有142位相同.同年Joux、Carribault、Lemuet和Jalby宣布找到SHA-0算法的完整碰撞,这是归纳Chabaud和Joux的攻击所完成的结果,发现一个完整碰撞只需要251的计算复杂度.直到在CRYPTO2004上,王小云、冯登国、来学嘉和于红波利用差分攻击方法成功攻破MD5、SHA-0和其它杂凑函数.他们攻击SHA-0的计算复杂度是240,攻击MD5的计算复杂度是242.在一台普通的PC上,15min之内就可以找到MD5碰撞消息对.2005年,王小云和殷益群、于红波将差分攻击算法公开,并将差分攻击算法应用于对SHA-1的攻击,只需少于269的计算复杂度,就能找到一组碰撞.在CRYPTO2005会议尾声中王小云、姚期智、姚储枫再度发表更有效率的SHA-1攻击法,能在263个计算复杂度内找到碰撞.从此差分攻击算法被深入研究并得到了很大改进[1-2].在密码学的学术理论中,任何攻击方式,其计算复杂度若少于暴力搜寻法所需要的计算复杂度,就能被视为针对该密码系统的一种破密法;但这并不表示该破密法已经可以进入实际应用的阶段.在实际攻击中,理论上的攻击算法都要映射到合适硬件计算平台上的可执行程序.硬件计算平台一般可分为标准计算平台(例如PC)和专用计算平台(例如FPGA、ASIC、GPU).通常在专用计算平台上的开发难度要比在PC上难.但往往可以获得更高的性价比,特别是对可以并行的算法.差分攻击算法是一种有策略的随机搜索算法,每次搜索开始前,先产生一个随机数,所需的消息分组通过计算得到,由消息分组计算链变量并检查链变量是否符合条件,如果不符合则需要重新开始并产生新的随机数,因此每次搜索是独立的,可以并行操作,算法所需的存储空间仅仅是64个字的轮常量,适合在GPGPU上实现.在公开文献中,还没有一篇是分析差分碰撞算法在GPGPU上实现的文章,本文希望能为同行抛砖引玉,进一步探索GPGPU在密码学中的应用.本文第2节介绍MDx系列Hash算法的构造;第3节概括目前对MDx系列Hash算法的攻击算法;第4节改进文献[1]中的差分算法,通过分析差分攻击算法,得出在GPGPU上实现时所需的技术要求,介绍实现框架,给出实验结果并与普通PC上的实现进行比较;第5节总结全文.2MDx系列Hash算法将任意长度的数字串m映射成一个较短的定长的数字串的函数称为Hash函数,以h表示Hash函数:则h(m)为m的Hash值.h(m)应当易于计算且t>n.Hash函数还必须是单向的、弱无碰撞的和强无碰撞的.定义1.给定一个Hash函数h,y为一个消息摘要,若要找出x使得y=h(x)在计算上不可行,则称此Hash函数为单向的.定义2.如果有两个消息m1,m2;m1≠m2使得h(m1)=h(m2),我们就说这两个消息m1和m2是碰撞(collision)的消息.定义3.给定Hash函数h和任意给定的消息m,如果要找一个m,m≠m,使得h(m)=h(m)在计算上不可行,则称h是弱无碰撞的Hash函数(weakcollision-freeHashfunction).定义4.给定一个Hash函数h,如果要找到任意一对消息m1,m2;m1≠m2使得h(m1)=h(m2)在计算上不可行,则称h是强无碰撞的Hash函数(strongcollision-freeHashfunction).处理可变长消息是很困难的,所以MDx系列算法中先将消息m填充为若干固定长度的分组:Page3这里每个Mi(1ir)是长为kbit的串.然后利用压缩函数f处理每个Mi:其中k>n,f的输出成为链变量fvi.为了关联各个分组,使得fvi的值依赖于已处理的分组.处理每个分组Mi时,将fvi-1作为初始值,再使用f将其更新得到fvi.第一个分组的初始值fv0是一个预先规定的常值IV.最后的消息摘要值为fvr.MDx系列算法主要在IV的设置和f的构造上有所不同.MDx系列Hash算法以Merkle-Damgard理论为基础.Merkle-Damgard理论表明:Hash函数h的安全性取决于压缩函数f的安全性,如果f是单向的、弱无碰撞的和强无碰撞的,则h也是单向的、弱无碰撞的和强无碰撞的.3MDx系列Hash函数的攻击算法Hash函数攻击算法大体可分为两类:通用算法(例如生日攻击、中途相遇攻击和穷举攻击)和特定算法(例如王小云的差分攻击、Dobbertin的代数攻击).通用算法一般适用于对所有Hash算法攻击,特定算法只能针对某一个或某一类Hash算法进行攻击.通用算法攻击的复杂度一般都很大,例如假设Hash函数的输出的消息摘要长为n,则利用生日攻击所需的运算量是O(2n长是128,所以利用生日攻击所需的运算量是O(264),而使用差分攻击算法,目前最好的结果是只需O(210).特定攻击算法是利用Hash函数的内在结构缺陷,找到Hash函数的弱点有针对性地进行攻击.例如Dobbertin利用MD5中活动状态的高位不能尽快地充分混淆,通过构造两个不同的512消息分组和选择初始IV值得到半自由初始碰撞.王小云的差分攻击算法也是利用了MSB(最高比特位)不能尽快充分混淆,找到有效的差分和差分路径,成功攻击了MD5、MD4等算法[4].差分攻击算法一般分为3个步骤:1.构造可以产生高概率碰撞的差分ΔM.2.推导出ΔM的差分路径DP和实现差分路径需要满3.利用单消息修正方法、多消息修正方法、隧道技术、“分而治之”技术设计和优化搜索满足充分条件的碰撞消息对.步1中,将ΔM≠0加上一个消息M可得到M,为了使得h(M)=h(M),差分ΔM在压缩函数f中的扩散和混淆必须按照预先设定的路径进行并最后消失.步2就是要构造这样的差分路径DP,并推出在什么充分条件下能得到这样的DP,充分条件数决定整个攻击算法的运算复杂度.步3利用消息中的自由比特位,使用单消息修正方法[4]、多消息修正方法[5]、隧道技术[2]、“分而治之”[6]技术提高所构造的消息满足所有充分条件的概率.4差分攻击算法改进及在GPGPU上的实现差分攻击算法首先需要产生一个随机数,因此在实现中要构造一个伪随机数发生器.由于寄存器和共享内存大小限制和内存寻址限制,迭代模式的伪随机数发生器(如线性同余法、Fibonecci方法)在GPGPU上实现的效率比较低.我们采用MersenneTwister算法,MersenneTwister算法生成的随机数周期长、概率分布性好、所需内存少、速度快且适合在GPGPU上实现.详细细节请参见cudasdk.在计算链变量和消息值时还需要模加运算、模减运算、按位与、或、非运算和循环左移及循环右移算子.cuda开发语言中含有模加运算、模减运算、按位与、或、非运算.循环左移和循环右移算子可以通过左移和右移算子转换得到.例如对数x循环左移n位,则可表示为(xn)|(x(32-n)),对数x循环右移n位,则可表示为(xn)|(x(32-n)).在判断消息是否满足充分条件时还需用到控制流指令.在开发语言CUDA中有if,switch,do,for,while控制流指令.但是任何流控制指令(if,switch,do,for,while)都会导致同一warp块的线程分支,从而显著影响有效的指令吞吐量,也就是说,这些指令会导致线程采用不同的执行路径.如果出现这种情况,就必须序列化不同的执行路径,因而增加了该warp块执行的指令总数.完成所有不同的执行路径时,线程将重新汇聚到同一执行路径.因此一方面我们尽量减少控制流指令,另一方面优化必要的减少控制流指令.足的充分条件SC.在差分攻击算法中,为了实现隧道技术,使用了Page4for循环语句,可以通过展开for循环语句,消除控制流指令.图1表示了展开和未展开for循环语句的效率差别.图1展开和未展开for循环语句的效率比较从图1可以看出当循环的次数越大时,展开和未展开for循环语句的效率差别越大.在实现多消息修正技术和判断充分条件是否成立时,需要使用if语句,但这些if语句都含空分支.if指向空分支或者按halfwarp跳转都没有性能损失,所以在边界控制中的if不会造成性能损失,只是多了一次判断.另外控制器可能用分支谓词来优化if指令.在使用分支谓词时,依靠控制条件执行的任何指令都不会被跳过.而是分别与一个每线程条件代码或根据控制条件设置为true或false的谓词相关联,尽管每一条指令都为执行而进行了调度,但只有谓词为true的指令才会被实际执行.带有false谓词的指令不会写入结果,也不会计算地址或读取操作数.只有在分支条件控制的指令数量小于或等于特定阈值时,编译器才会使用有谓词的指令替换分支指令:如果编译器确定出有可能产生大量分支warp块的条件,则此阈值为7,否则为4.差分攻击算法中还需continue指令,但CUDA中并没有continue指令,我们可以去掉不能转换的continue指令.例如可以去掉攻击MD5的隧道差分算法[1]中第25步到第64步中的continue指令,第18步~第24步中的continue指令可以利用多消息修正方法转换为if指令.因为在算法结束时,会对链变量进行判断是否符合条件,且给定消息输入,连续4个链变量就可以决定下一步的链变量的值.因此去掉continue,并不会产生错误.下面将分析对攻击MD5的隧道差分算法[1]的改进,定义Qi(1i64)为MD5第i步计算出的链变量,{m0,m1,…,m15}为消息分组,其中mj{0j15}为32bits,详细符号定义和算法流程请参见文献[1].在文献[1]提出的差分攻击算法中计算和判断链变量Q18…Q24时都用到了continue控制流指令.如果Q18…Q24不满足充分条件,则需要重新开始计算整个算法流程.因此算法的效率不但降低了而且在GPGPU上不能执行continue指令.因此我们利用多消息修正方法对此进行了改进.本算法的具体改进方案为:如果Q18…Q24不满足充分条件,通过多消息修正方法调整消息值,使得Q18…Q24以一定概率满足充分条件,同时不影响以前充分条件的满足.例如,在文献[4]中Q21需要满足的充分条件是Q21[31]=0,假设Q21[31]=1,由于所以可以通过改变m5的第26比特,即令m5=m5-226使得Q21[31]=0.m5在第1轮的第6步中也用到了,Q6=Q5+(f5(Q5,Q4,Q3)+Q2+这导致Q6的改变,为了不影响第21步之前充分条件的满足,我们还需要做一些相应的修改,详细情节请参见表1.表1利用多消息修正方法调整犙21[31]的修改方案步数4m3=m3+245m4=((Q5-Qnew4)>>>7-Q1-f4(Q4,Q3,Q2)-K46m5=m5-2267m6=m68m7=m7-226表1中不但m5改变了,m3,m4,m7也改变了.但是在前21步中,m3,m4,m7只在第4,5,8步中被用到,因此不会影响第21步之前充分条件的满足!攻击算法主体实现流程图见图2.整个构架在Visualstudio6.0的环境下利用CUDA语言开发完成.在NVIDIA公司GeForce9800GX2上运行.得到的结果以及在目前高端PCCore2QuadQ9000(2.0GHz)4核电脑上的运行结果如表2所示,表中所给的市场价参照的是进行实验时的设备价格,把开发完成后的可执行文件用于实际攻击时,主要的问题是设备,因此以设备当时的市场价做为实现代价是比较合理的.Page5图2差分攻击算法在GPGPU上的实现流程图表2在GeForce9800GX2和Core2QuadQ9000(2.0GHz)4核PC上运行差分攻击算法的实验结果对比计算平台GeForce9800GX21.35138811.5Core2QuadQ90008.027000.085结束语MDx系列Hash算法的软硬件实现效率高,同时安全性也比较高,被广泛应用于保密通信、数字签名、协议认证等安全领域.MDx系列Hash算法的安全性成为了这些安全领域的安全基石.然而对MDx系列Hash算法的安全分析直到王小云提出差分攻击算法后才有了重大突破.本文认证了差分攻击算法不但可以在GPGPU上实现而且还能达到11.5倍的性价比.GPGPU的功率太大,GeForce9800GX2的功率就达到210W,从而限制了多GPGPU使用,温度太高也增加了系统的不稳定性,然而GPGPU的强大计算能力,便宜的价格使得它的应用越来越广泛.差分攻击思想具体应用到攻击某个Hash函数时,所得到的具体算法是不同的.Klima[1]提出的隧道差分攻击算法被公认为经典差分攻击算法,虽然还有复杂度更低的差分攻击算法,但是关键的技术细节并没有透露.因此我们采用隧道差分攻击算法作为改进和实现的对象.另外SHA-1算法在理论上虽然已被攻破[4],但是实际上并没有攻破,目前并没有找到SHA-1的碰撞.差分攻击算法在GPGPU上实现的优势将对寻找SHA-1的碰撞带来帮助.
