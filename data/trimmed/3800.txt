Page1高性能网包分类理论与算法综述亓亚?1),2)李军2),3)1)(清华大学自动化系北京100084)2)(清华大学信息技术研究院北京100084)3)(清华信息科学与技术国家实验室(筹)北京100084)摘要随着IP网络架构的不断演进以及网络业务和安全需求的不断增长,高性能网包分类在下一代交换机、路由器、防火墙等网络基础设备中有着越来越广的应用.网包分类算法作为高性能网包分类的核心技术,具有重要的研究价值和实践意义.文中从理论分析和算法设计两方面介绍了高性能网包分类的最新研究成果.在理论分析层面,依据计算几何理论对网包分类问题的数学解法及复杂度进行了归纳,总结了网包分类算法的理论依据及性能评价方法.在算法设计层面,对具有影响力的网包分类算法按照不同的研究方向进行了归类和介绍,并结合自身研究成果对不同类别的算法设计思路行了深入分析.作者在多核网络处理器平台以及FPGA平台上实现了几类具有代表性的网包分类算法,并通过真实的网络流量测试比较了不同类型算法在不同系统平台上的实际性能.最后,作者总结并展望了高性能网包分类的下一步发展方向.关键词网包分类;计算几何;算法;评测;多核;FPGA1引言随着互联网架构的不断演进以及互联网应用的不断涌现,基于单一IP地址域的传统路由技术已经不能满足日益增长的网络业务和网络安全需求.由于网包分类(packetclassification)能够依据多域网包包头(packetheader)信息对网络流量进行细粒度的分类,该技术已在路由器、安全网关及流量控制系统等各类网络设备中得到了广泛应用[1-4].与此同时,随着业务感知网络、数据中心网络以及软件定义网络等前沿网络技术的发展,高性能网包分类技术已成为下一代互联网发展和演进中的研究热点[5-8].图1描述了一个典型的基于IPv4五元组(5-tuple)的网包分类系统.该五元组包括网包包头中的源/目表1网包分类规则示例0~655350~65535规则目标IP地址r110.0.8.28/3264.10.8.20/32800~65535r210.0.8.28/320.0.0.0/00~65535r310.0.0.0/16202.11.0.15/320~655350~65535r410.0.0.0/160.0.0.0/00~655350~65535r510.1.3.20/320.0.0.0/0r610.1.3.0/240.0.0.0/0r70.0.0.0/00.0.0.0/0高性能网包分类算法作为网包分类设备的核心技术,一直受到学术界和工业界的广泛关注.自20世纪90年代以来,网包分类算法的研究成果层出不穷.然而,相关研究的总结工作却仅现于21世纪初的若干综述性文章[9-12].其后近十年间的优秀研究成果则缺乏系统的归纳和分析.为了进一步推动高性能网包分类算法的研究和发展,本文从理论分析、算法优化和系统实现3个层面,结合自身的研究成果,对近年来的高性能网包分类算法进行了全面的分析和总结.本文主要贡献包括:(1)总结网包分类算法的理论依据:理论依据对于高性能网包分类算法的设计具有指导性作用.本文依据计算几何理论对网包分类问题的数学解法及复杂度进行了归纳,总结了网包分类算法的理论依据及性能评价方法.(2)归类并分析现有网包分类算法:高性能网包分类技术的核心在于软硬件算法的优化设计.本文对具有影响力的网包分类算法按照空间分解、规则分组及硬件设计等不同的研究方向进行了归类,并结合自身研究成果对不同类别的算法设计方法进的IP地址域(各32bit)、源/目的传输层端口域(各16bit)以及传输层协议域(8bit).网包分类规则(如表1例)存储于网包分类系统中.网包分类引擎根据输入网包的五元组信息与分类规则进行匹配.网包分类系统将依据匹配规则的决策(action)对输入网包进行相应的处理,例如接受转发(ACCEPT)、拒绝转发(DENY)、重置连接(RESET)或丢弃网包(DROP).6110~6112UDP11ACCEPT行了深入的比较和分析.(3)测试高性能网包分类算法性能:高性能网包分类算法的实际性能需要在真实系统上进行验证.本文在多核网络处理器平台以及FPGA硬件平台上实现了几类具有代表性的网包分类算法,并通过真实的网络流量测试比较了不同类型算法在不同系统平台上的实际性能.实验中所用的测试方法、测试数据以及自行开发的算法源代码将对外公开,以推进高性能网包分类算法及其相关研究的进一步发展.本文第2节介绍网包分类算法的理论依据及复杂度分析;第3节归纳和比较近年来主流网包分类算法的优化方法;第4节考察典型网包分类算法实现于不同网络处理平台下的真实性能;第5节总结全文,并展望下一步的研究工作.2网包分类算法的理论依据本节首先通过数学定义,将网包分类问题归结为计算几何领域中的点定位问题;然后介绍和分析点定位问题的多类数学解法及其理论复杂度;最后,Page3结合真实网包分类规则的统计特性总结网包分类算法性能的评估标准.2.1网包分类问题的数学描述网包分类问题本质上是多域空间中的点定位问题(pointlocationproblem)[13-14].为了便于复杂度分析,首先介绍网包分类问题中3个基本概念:网包、搜索空间及分类规则:网包p(Packet).网包p包含d个域的网包包头.网包包头的各个域分别表示为p[1],p[2],…,p[d],其中每个域的取值都是特定长度的比特串.例如32比特的IPv4网络层IP地址,16比特的传输层端口号等.搜索空间S(SearchSpace).网包p在d维空间所有可能的取值构成搜索空间S.S的各个维度值域不同,对于IPv4五元组网包分类问题,S=[0,232-1]×[0,232-1]×[0,216-1]×[0,216-1]×[0,28-1].分类规则r(Rule).每个分类规则包含3个部分:各域范围表示(rangeexpression)r[1],r[2],…,r[d]、规则优先级(priority)r.pri和规则决策(action)r.act.若网包p与规则r匹配(match),则1id,p[i]∈r[i].对于包含n个规则的规则集合R={r1,r2,…,rn},p可能与其中多个规则匹配①.基于上述定义,分类规则r对应于搜索空间S中的一个超长方体(hyper-rectangle),而网包p则对应于S中的一个点.当p落入r所表示的超长方体中时,p即与r匹配.为了便于理解,图2给出了一个二维(d=2)网包分类问题的示例.其中搜索空间S=[0,3]X×[0,3]Y,网包p的点坐标为(p[x]=3,p[y]=3),规则集合R={r1,r2,…,r5}如表2所示.由于p落入r4和r5对应的矩形(2维超长方体)中,因此p与r4和r5匹配.若考虑匹配优先级,则由于r4的优先级高于r5,网包分类系统执行r4.act(DENY).规则X域Y域优先级决策r1[00,01][00,00]1DENYr2[00,01][00,11]2ACCEPTr3[10,10][00,11]3ACCEPTr4[11,11][11,11]4DENYr5[11,11][00,11]5ACCEPT2.2网包分类问题的数学解法对于空间点定位问题,线性查找(linearsearch)是最简单的解法.通过将输入网包p与所有规则逐一匹配,即可得到所有匹配规则.对于d维空间的n个规则,线性查找的时间复杂度为Θ(d×n),空间复杂度为Θ(n).由于查找时间随规则增加而呈线性增长,线性查找仅适用于小规模的规则集合.在计算几何领域,多域空间点定位问题存在多种数学解法.每种解法具有不同的时间和空间复杂度,下面将分别进行介绍.2.2.1规则投影区间查找算法规则投影区间查找算法(下文简称区间查找算法)源自Overmars等人提出的高维区域树(Hierar-chicalsegmentTree,本文简称为H-Tree)算法[13-14].算法1.H-Tree算法.当d=1时,由于n个规则的端点(endpoint)在一维空间中最多构成2n+1个连续区间(segment),因此可以构建一个空间复杂度为Θ(n)的平衡二分查找树(balancedbinarysearchtree)来进行查找,查找时间为Θ(logn).当d>1时,首先依据规则集合在第d维的投影区间构造平衡二分查找树Td.树的每一个节点v对应一个区间Iv,其中Iv表示v的所有子节点构成的连续区间.对于满足(1)在d维上的投影区间完全包含Iv;(2)在d维上的投影区间不完全包含v的父节点v对应的区间Iv;的规则子集Rv,用同样的方式在另外d-1个维度上依次构造平衡二分查找树Tv,d-1,直到最后一个维度即可.H-Tree算法结合Chazelle等人[15]提出的分散叠层(fractionalcascading)技术,能够以Θ(logd-1n)的时间复杂度和Θ(n×logd-1n)的空间复杂度解决点定位问题[13].虽然H-Tree具有良好的空间复杂度,但时间复杂度依然过高(优于线性查找算法).下面介绍降低时间复杂度的Set-pruningSegmentTree(本文简称为S-Tree)算法[16-17].①对于防火墙等应用,通常执行匹配规则中优先级最高的那Page4算法2.S-Tree算法.当d=1时,S-Tree和H-Tree算法相同.由于n个规则的端点(endpoint)在一维空间中最多构成2n+1个连续区间,因此可以构建一个空间复杂度为Θ(n)的平衡二分查找树来进行查找,查找时间为Θ(logn).当d>1时,S-Tree采用规则复制的方法避免回溯查找.首先依据规则集合在第d维的投影区间构造平衡二分查找树Td.Td的每一个叶节点v对应一个区间Iv,其中Iv不包含任何子区间.对于规则子集Rv={ri|ri∩Iv≠,1in},依次为其构造子树Tv,d-1即可.与H-Tree相比,S-Tree的时间复杂度降低到了Θ(d×logn),但依据定理1,S-Tree的空间复杂度将增至Θ(nd).定理1.d域空间中的n个规则至多可构成(2n+1)d个相互不重叠的超长方体.证明.首先证明d=1时命题成立.一维空间中的规则退化为线段,即数轴上的一个区间.当n=1时,一个规则构成一个区间,命题成立.假设k(k1)个规则可构成2k+1个相互不重叠的区间.那么当n=k+1时,第k+1个规则的两个端点最多落入2k+1个不重叠的区间中的两个不同的区间中,并将这两个区间划分为四个区间,因此最多增加两个不重叠区间.又由2k+1+2=2(k+1)+1,所以命题对于n=k+1亦成立,即一维情况下命题成立.多域情况下,即当d>1时,由于每个域上最多有2n+1个不重叠区间,经过交叉相乘,d个域上最多出现(2n+1)d个不重叠的超立方体,由此命题得证.2.2.2网包搜索空间分解算法与区间查找算法不同,网包搜索空间分解算法(下文简称空间分解算法)通过对空间的均匀切分构建网包分类的数据结构.空间分解算法源于路由查找算法,通常使用trie结构对空间进行逐级等分.这里首先讨论规则均为最长前缀匹配的情况,后面会讨论一般情况.下面首先介绍基于HierarchicalTrie(本文简称H-Trie)的空间分解算法[13].算法3.H-Trie算法.当d=1时,构建一个W深度的trie结构,每一个规则均存储于tire的一个节点上,此trie结构空间复杂度为Θ(n×W),时间复杂度为Θ(W).当d>1时,首先用{r1[d],r2[d],…,rn[d]}构造trie结构Td.然后为每一个不同的前缀Pi(Td中不同的节点)所对应的规则子集Ri构建d-1维度上trie结构Ti,d-1.依次类推,直到第一个维度即可.H-Trie在搜索过程中需要回溯查找(backtrackingsearch),因此时间复杂度为Θ(Wd).由于H-Trie中规则集合只存储一次,因此算法的空间复杂度为Θ(n×W).注意,此时的空间复杂度只对应前缀匹配的规则,而本文讨论的网包分类问题是基于范围匹配的,因此这里讨论范围到前缀转换问题(range-to-prefix).首先给出定理2.多2(W-1)个前缀表示[18].定理2.一个[0,2W]区间中的范围可以用至证明.给出存在性证明.首先考虑当范围为[0,b]时至多需要多少个前缀表示.当范围为[0,b],其中2W-1<b2W-1时,首先记录表示区间[0,2W-1)的前缀P0,然后将区间[2W-1,2W]等分,生成两个新区间[2W-1,2W-1+2W-2)和[2W-1+2W-2,2W],则b必然落入两个区间中的一个,如果2W-1+2W-2<b2W,则记录表示区间[2W-1,2W-1+2W-2)的前缀P1;依次不断等分b所在子区间,并当b落入右半区间时记录左半区间的前缀Pi;经过至多W-1次等分,区间[2W-1,2W]将不可再分,由于整个过程中最多记录下W个前缀(W-1次等分得到的前缀和P0),而这些前缀恰好可以表达范围[0,b].因此,范围[0,b]需要至多W个前缀表示.再考虑[0,2W]空间中的范围[a,b],通过将[0,2W]二等分,范围[a,b]最多被分为两个范围,并且这样的两个范围通过平移和镜像,都可以等价的转化为[0,2W-1]空间中以0为起点的范围.根据上面的证明,这两个范围都可以用至多W-1个前缀表示,因此范围[a,b]可用至多2(W-1)个范围表示.根据定理2可知,一个范围匹配的规则在d个域上最多可以转换为(2(W-1))d个前缀匹配的规则.因此,对于范围匹配,H-Trie的空间复杂度为Θ(n×Wd).当d>1时,最后两个维度的查找可以使用Srinivasan等人[18]提出的Grid-of-Trie结构进一步减少查找时间.此时H-Trie的时间和空间复杂度可以改进为Θ(Wd-1)及Θ(n×Wd-1).由于H-Trie的时间复杂度过高,可使用Set-pruningTrie(本文简称S-Trie)算法,通过规则复制来降低时间复杂度[9].Page5算法4.S-Trie算法.当d=1时,S-Trie算法与H-Trie相同.构建一个W深度的trie结构,每一个规则均存储于tire的一个节点上,此trie结构空间复杂度为Θ(n×W),时间复杂度为Θ(W).当d>1时,首先对{r1[d],r2[d],…,rn[d]}构造trie结构Td.然后对于每一个叶节点v,将包含v代表的前缀Pv的所有规则子集Rv构建d-1维度上trie结构Tv,d-1.依次类推,直到第一个维度即可.由于S-Trie的查找过程不需要回溯,因此时间复杂度为Θ(d×W),空间复杂度为Θ(nd×dW).由此可见,H-Trie和S-Trie分别是对空间和时间性能的折中,但两者的时间性能在n较大时均优于线性查找算法.2.2.3数学解法总结多域点定位问题的各类数学解法总结于表3.这些数学解法为网包分类算法设计提供了理论依据.从该表可知,允许回溯查找的算法具有较好的空间特性,而允许规则复制的算法则具有较快的查找速率.由于查找速率决定网包分类系统的吞吐率,因此典型的网包分类算法大多采用了允许规则复制的方法.关于查找的策略,区间查找算法和空间分解算法均有各自的优势,并广泛用于不同的网包分类算法.空间分解算法虽然不需要存储规则投影点,并可利用多比特trie进一步加快查找速率,但是需要考虑范围到前缀匹配,因此最坏情况下存储空间为投影区间二分法的Θ(Wd)倍(参见定理2).关于网包分类算法时间和空间性能折中的进一步分析可以参阅文献[19].维度复杂度d=1时间Θ(W)Θ(logn)Θ(W)Θ(logn)空间Θ(n×W)Θ(n×logn)Θ(n×W)Θ(n×logn)d>1时间Θ(Wd-1)Θ(logd-1n)Θ(d×W)Θ(d×logn)空间Θ(n×Wd-1)Θ(n×logd-1n)Θ(nd×dW)Θ(nd×dlogn)2.3网包分类算法的评价方法由上述算法分析可知,网包分类问题的各类数学解法均具有较高的时间或空间复杂度,即在最坏情况下无法同时满足查找速率和存储空间的两方面要求.幸运的是,在实际的网络应用中网包分类问题往往不会达到理论上的最坏情况[20].当前的网包分类算法设计大多通过引入规则集合的特征来提高分类速率、降低内存使用.Gupta等人[20]通过对大量实际的(real-life)规则集合的研究,总结并归纳出一系列规则集合特征:(1)实际规则集合中规则数目不会太多,一般从几十条规则到数千条规则.规则数目不多可能是由于网络应用本身规模的限制,也可能是基于当前路由器处理能力的考虑.(2)规则在协议域通常只有很少的几个取值.绝大多数规则集合中只出现TCP和UDP两种传输层协议.个别规则集合中可能涉及ICMP、IGMP和GRE等协议.(3)传输层端口号域取值范围很广,采用范围前缀转换很可能是非常低效的.(4)与同一个网包匹配的规则通常少于5个,最多出现过10个①.上具有相同的设置.(5)同一规则集合中的多个规则往往在某些域(6)规则集合中所有规则在单一域的不同取值的个数通常远小于规则个数.(7)规则集合出现的重叠个数远远小于理论上界.另外,对于不同应用下的规则集合,也会出现各自不同的统计特性.例如在WUSTL(华盛顿大学圣路易斯分校)公开数据集中,核心路由器上的访问控制规则(ACL)、防火墙的安全策略(FW)以及Linux网关的iptables规则(IPC)就有相当大的差异[21].Qi等人[17]通过统计这些规则集合中各个维度上的投影区间个数说明了网包分类问题的实际复杂性.从表4中的统计结果可以看出:(1)同一类型规则集合在不同维度上的统计特性不同.复杂度.(2)不同种类的规则集合的统计特性不同.(3)所有规则集合的实际复杂度均远小于理论解决多域网包分类问题需要设计高效的分类算法.一般来说,评价一个算法的好坏,需要从3个方面进行综合考虑:(1)分类速率.网包分类系统通常需要满足线速(wire-speed)处理速度.对于实际的网包分类系统,通常使用系统吞吐率(throughput)来评价分类速率.例如要满足100Gbps的网络带宽,网包分类系统需要每秒钟处理150M个64字节的网包.在算①此处结论结合本文实验进行了部分修正.Gupta等人在文Page6表4网包分类规则复杂性比较目标端口域非重叠区间实际值规则集规则数各域非重叠区FW1-10092185FW1-1K7911583FW1-10K93111862313901ACL1-10098197ACL1-1K9161833ACL1-10K960319207IPC1-10099199IPC1-1K9381877IPC1-10K903718075注:ACL1、FW1、IPC1分别为3类不同的规则集合,ACL1-1K表示包含约1000条规则的ACL规则集合[21].法分类速率的评价中,考虑到处理单元(CPU)的计算速度比外围存储设备(DRAM)的访问速度快得多,因此当计算量大小在可接受的范围内时,通常使用内存访问次数(memoryaccesstimes)来评价一个算法的分类速率.(2)内存使用.网包分类算法的内存使用不仅仅指存放规则集合本身所占用的存储空间,还包括算法建立的用于查找的数据结构存储空间.考虑到网包分类系统的内存空间有限,网包分类算法应尽可能压缩其数据结构以支持更多的分类规则.另外,有时候还必须考虑算法预处理过程中的内存使用.例如在递归生成多级trie的数据结构过程中,有时需要大型的堆栈支持.如果系统无法满足此内存需求,那么即使最终数据结构较小也无法实现.(3)预处理时间.由于网包分类规则并非固定不变,网包分类算法需要依据规则更新生成新的数据结构.本文讨论的算法的预处理时间指依据新的规则集合重新生成网包分类数据结构的全部时间.从算法设计的角度来看,目前的大多数算法都比较重视分类速率和内存使用两方面的性能,与之对应的是算法的时间性能和空间性能.两个因素在算法设计中往往互相制约,通常在满足某一方面性能的情况下,尽可能优化另一方面的性能.从算法实现的角度来看,网包分类算法必须要兼顾多种系统平台的硬件约束,能够自适应部署于各类平台并最大程度利用系统资源以满足网包分类设备的性能需求.因此,对于一个出色的网包分类算法其性能并不仅仅体现在理论分析中,还必须考虑到算法实现、运行环境、软硬件平台和特殊需求等多种问题.只有这样的算法才真正具有研究意义和现实的价值.2.4小结本节总结了网包分类算法的理论依据,并结合实际规则分析给出了算法评价的常用方法.从计算48757770165181267894几何中的复杂度分析表明,不存在某种通用的算法适用于所有的多域网包分类问题.H-Trie和H-Tree算法具有较好的空间特性,但需要耗时的回溯查找;S-Trie和S-Tree算法通过规则复制大幅降低了搜索时间,但代价是指数级的内存增长.幸运的是在实际应用中极少会遇到理论中的最坏的情况.实际应用中的网包分类问题往往具有各类结构和统计特性.将这些特性应用到网包分类算法的设计中去,通常可以得到“足够快”的分类速率,同时满足“足够少”的内存使用.“足够快”和“足够少”在这里表明了一种权衡(tradeoff)的思想,是算法时间性能和空间性能的折中.算法设计的最终目标就是在理论依据之上,充分挖掘规则特性并考虑系统约束,寻求最优的权衡.3网包分类算法自20世纪90年代末至今,网包分类问题的相关研究不断发展,出现了一大批优秀的网包分类算法.本节依据网包分类算法的研究方向,按照空间分解、规则分组和硬件设计3个方向,对常见的网包分类算法进行归类和介绍.与此同时,我们结合自身的研究成果,对各类网包分类算法的研究思路进行了深入的分析和比较.3.1空间分解算法空间分解是一种分而治之的策略.使用空间分解的网包分类算法将原始搜索空间S分解为m个子空间,且满足如下约束:每个子空间对应的规则子集合满足Page7由此可见,经过空间分解后,落入每个子空间的网包具有唯一的规则子集与之匹配.因此只要确定子空间归属即可完成网包分类.由第2节理论分析可知,空间分解的数学解法分为搜索空间二分法和投影区间二分法两大类.现有绝大多数网包分类算法均可归结为上述方法的拓展.下面我们以搜索空间均分和投影区间分解为线索,分别介绍不同算法的设计思想和优化方法.3.1.1搜索空间均分算法搜索空间均分算法主要包括基于Trie结构的各类网包分类算法,如文献[22-33].该类算法的基本思路是:通过对搜索空间及其子空间进行迭代的均匀切分(cut),将原始搜索空间愈分愈细,直到落入每个子空间中的所有网包都有唯一的规则子集与之匹配.基于搜索空间分解的算法通常使用拓展的S-Trie结构,即将单比特S-Trie拓展为可变宽的多比特S-Trie(variable-stridemulti-bitSet-pruningTrie).该结构的根节点(rootnode)对原始搜索空间进行第1级均匀切分;第l级的内部节点(internalnode)对原始空间进行第2级均匀切分.每一个叶节点(leafnode)包含与该子空间所有点都匹配的规则子集.该类算法的特点是每级切分满足该类算法的理论复杂度与S-Trie相同,实际时间性能由树深度(depth)决定,实际空间性能则取决于节点数目和节点大小.因此,基于搜索空间均分的网包分类算法主要在如何提高搜索空间分解效率上进行探索和研究.Gupta等人[22]提出的HiCuts(HierarchicalIntelligentCuttings)是最早使用启发式算法来提高搜索空间分解效率的网包分类算法.HiCuts利用基于多比特Trie的决策树(decisiontree)结构对搜索空间进行多级均匀切分.在决策树的每一个内部节点,HiCuts使用可分离判别函数选取当前最优的切分维度,并使用内存空间约束函数确定当前空间的切分次数.若当前子空间所包含的规则个数小于指定阈值(binth),HiCuts算法生成一个叶节点,并将所含规则存储在叶节点中进行线性查找.Singh等人提出的HyperCuts算法将HiCuts算法中的单域空间切分拓展到多域中去,在每个内部节点从多个维度上对当前搜索空间进行划分[29].由于多域切分以指数级别提高了每个节点的空间分解次数,因此HyperCuts算法构建的决策树深度大大减少,从而有效提高了算法的时间性能.近年来的研究指出,将HiCuts和HyperCuts直接用于真实网包分类系统中存在诸多缺陷[24].首先,由于启发式算法每级切分次数不同,导致决策树深度不确定,进而使得系统吞吐率无法保障.其次,由于每个内部节点都使用指针数组或指针矩阵连接子节点,在切分次数增长的情况下,指针结构的存储空间随之增长.在真实系统中,过高的内存需求将导致网包分类算法难以利用有限的高速内存资源实现快速的网包分类.此外,由于HiCuts和HyperCuts每个节点的大小不一致,使得查找过程中每次访存(memoryaccess)所读取的字节数以及相应的节点处理过程不一致.这种不一致使内存分配单元变得复杂,并降低硬件处理单元的效率.为解决这些问题,学术界提出了一系列新的改进算法[24-25,31].本文以AggreCuts[25]算法为例,具体说明提高算法性能的一般思路.AggreCuts的核心思想是利用BITMAP(比特串)来压缩HiCuts算法中的指针数组,从而有效提高空间分解效率.如图3所示,当前搜索空间被切分为16个子空间.由于第1~2个子空间包含相同规则子集{r0,r1},按照HiCuts算法,为这2个子空间生成一个新的子节点(存储地址为A0),并使用2个指针建立2个子空间到该子节点的映射关系.同理,第3~8个子空间(包含{r0})生成第2个子节点(地址A1),第9~16个子空间(包含{r0,r2})生成第3个子节点.HiCuts算法使用包含16个指针的指针数组建立16个子空间到3个子节点的映射关系.考虑到实际应用中指针数组的冗余性,AggreCuts使用16比特的BITMAP对图3中的16个指针进行了压缩.BITMAP的设置为:第1个比特为1;若第i(i>1)个指针跟第i-1个不同,则该比特为1,否则为0.与BITMAP相对应的是一个压缩指针数组,该数组中顺序存储BITMAP中1位置所对应的指针(即原始指针数组中所有与前一指针不相同的指针).在查找过程中,落入第j个子空间的网包,只需要以BITMAP中前j个比特相加的和为索引读取Page8压缩指针数组中的相应指针即可.AggreCuts的时间和空间性能见图4和图5.由图4可知,AggreCuts的决策树深度(与内存访问次数呈线性关系)不到HiCuts的1/5,而且不随规则个数增加而变化.由图5可知,AggreCuts比HiCuts减少了1~2个数量级的内存使用.AggreCuts的局限性在于需要进行BITMAP运算.但随着处理器技术的发展,高性能多核网络处理器(如IntelIXP2800CaviumOCTEON3860)均提供高效的硬件BITM-AP运算指令,因此AggreCuts可以在大多数高性能网络处理平台上得到广泛应用.3.1.2投影区间分解算法投影区间分解算法包括文献[16,18,20]、文献[17]和文献[34-37].该类算法的基本思路是:将网包分类规则投影在各个域上,每个域上相邻的两个投影点构成一个投影区间.分类过程中首先确定网包在各个域上属于哪个投影区间(子空间),然后再通过子空间求交的方法完成最终匹配.该类算法的特点是每级切分尽可能满足子空间的规则数相等:依据第2节理论分析,基于规则投影区间分解的算法的对应于点定位中的S-Tree算法,两者具有相同理论复杂度.实际应用中,投影区间分解算法对S-Tree算法进行了拓展.一方面利用启发式方法改进区间查找的数据结构提高分类速率,另一方面利用规则冗余特性通过迭代求交降低内存使用.最早的基于投影区间分解的算法是Srinivasan等人提出的Cross-Producting算法[16].该算法采用最长前缀匹配进行各域上的投影区间查找,并使用一个d维的表结构(cross-productingtable)完成空间求交.由于最长前缀匹配查找效率较二分查找低(Θ(W)对比Θ(logn)),且单一的d维求交表无法消除空间冗余,该算法仅适用于较小的规则集合[9].Gupta等人[20]提出的RFC(RecursiveFlowClassi-fication)算法利用数组结构存储各域的投影区间,将每个维度上Θ(W)的最长前缀查找时间提高为Θ(1)(代价是每个域的存储空间变为Θ(2W)).RFC同时采用多级求交表进行迭代求交,一定程度减少了内存的占用.Xu等人[35]提出的HSM(HierarchicalSpaceMapping)算法采用了单域上的多分查找改善RFC算法的数组存储问题,并提供支持IPv6的128位地址查找.虽然RFC和HSM算法在实际网包分类系统中得到了应用,但对于大规模的数据规则集合其空间性能并不理想.基于投影区间分解的最新研究成通过启发式维度选择和迭代二分查找等方法,有效提高了算法的空间性能[16-17,36].下面以HyperSplit算法为例,介绍投影区间分解算法的研究思路.HyperSplit使用启发式算法构建S-Tree.在生成每个内部节点的过程中,HyperSplit依据当前规则集合(而非分类规则全集)在各个维度上的投影点分布情况选择最具可分离性的维度,然后用平行于坐标轴的超平面将当前维度上的投影区间二分.其中维度选择依据为其中mi为第i维度的区间个数.多级内部节点对投影区间的不断二分,直到当前子空间为某个规则子集完全包含,此时生成叶节点.图6和图7比较了HSM和HyperSplit两种算法的不同分解策略.可以看出,HSM算法将当搜索空间分解为9个子空间,而HyperSplit算法仅分解5个子空间.从搜索过程来看,HSM算法需要最多4次二分查找,而HyperSplit算法只需要3次.HyperSplit算法的时空性能由图8和图9给出.由图中数据可知,对于不同的规则集合,HyperSplit算法的内存访问次数比HSM算法平均少30%,内存使用则减少1~2个数量级.依据文献[17,38],HyperSplit算法在多核网络处理器和FPGA硬件平台上分别达到了10Gbps和100Gbps吞吐率.Page93.2规则分组优化算法由复杂度分析可知,随着规模集合的不断增长,基于空间分解的算法的内存需求呈指数级增加.近年来学术界提出了一系列基于规则分组的网包分类算法[24,39-42],有效降低了现有算法的存储空间需求.规则分组算法将规则集合按照一定的启发信息分为若干规则子集,然后对每个规则子集进行逐一或并行查找.规则分组算法是另一种分而治之的策略.此类算法将原始规则集合预先划分为m个规则子集,即规则分组算法通常与上一小节介绍的空间分解算法相结合,即首先进行规则分组,然后对每个规则子集使用空间分解算法进行查找.下面,我们分别介绍基于结构特性和组合优化的两类主流的规则分组算法.3.2.1基于结构特性的分组算法基于规则结构特性的分组算法依据规则的结构特性将规则全集分为若干子集,使得同一子集内的规则具有良好的可分离性(separablility)[24],从而降低整体的存储需求.由于结构特性法需要对多个子集进行逐一或并行查找,如何在保证任意子集具备良好可分离性的前提下控制规则子集的个数,成为当前研究的重点.基于结构特性的规则分组算法最具代表性的是Vamanan等人[24]提出的EffiCuts.作者在论文中指出,HiCuts和HyperCuts算法中大量的内存消耗的主要原因之一便是用单一的决策树处理相互重叠且结构各异的规则全集.为此,EffiCuts算法的第一步便是基于结构特性的规则分组.其分组依据为规则在各个维度上投影区间的取值范围.若一个规则在某个域上的投影区间大于某一阈值(largenessfraction),则认为该规则的投影区间在该域上是“大”的;反之则为“小”.根据每一个规则在各域上的结构特性,EffiCuts将原始规则集合划分为26个(对于IPv4的五元组规则)规则子集,其中任一子集均满足作者定义的可分离性要求.规则分组完成后,EffiCuts使用HyperCuts算法对每个规则子集进行分类查找.为了控制规则子集的个数,EffiCuts算法还使用了选择性树合并(selectivetreemerging)的策略,将规则简单的和规模较小的子集进行了选择性的合并,最终生成5~6个规则子集.作者通过实验证实,在内存访问次数相同的情况下,EffiCuts比HyperCuts减少57倍的内存使用.3.2.2基于组合优化的分组算法从优化的角度来看,规则分组是一个带约束的组合优化问题(combinatorialoptimization).其约束为子集个数,而优化目标则为整体内存空间.由于规则特性法是确定性的方法,因此通常只能得到这个优化问题的局部最优解.对于一般的组合优化问题,随机搜索方法如模拟退火、禁忌搜索、遗传算法等能够得到全局最优解.Page10基于组合优化法的最新研究成果为Fong等人[42]提出的ParaSplit算法.该算法使用模拟退火进行优化,在确定规则子集个数的约束下搜索最优的规则分组.ParaSplit算法的目标函数为各个子集在HyperSplit算法下的内存使用总和.模拟退火过程的初始解为通过对规则全集随机分组获取.搜索过程中,每一个新解都由通过随机增减或交换任意两个子集间的规则获取.新解是否被接受依据Metropolis准则.若目标函数差(总内存增量):则接受,否则以概率接受,其中T为退火温度.ParaSplit通过选择合理的初始温度,使得算法能在有限的迭代次数内满足收敛条件.若使用结构特性法求取初始解,ParaSplit能够以更快速度的收敛.从图10可以看出,ParaSplit的内存使用比HyperSplit少1~3个数量级.3.3本节总结基于计算几何的空间分解算法是网包分类问题的研究基础.采用不同的空间分解方法可以获取不同的时间和空间性能折中(time-spacetradeoff),以满足各类网包分类应用的需求.空间分解算法结合启发式方法,可以利用真实规则集合的冗余性进一步提高分类速率,降低内存使用.在算法优化的研究中,规则分组算法采用分而治之的策略通过对复杂规则集合的分解提高处理效率.除本节介绍的网包分类算法之外,还有基于Hash方法[43-48]和基于TernaryCAM的网包分类算法[49-56].这些方法通常需要专用的硬件(如ASIC)或存储设备(TCAM)来实现,而本文重点讨论基于可编程的多核系统和FPGA平台的网包分类算法,因此这里不再详述.4网包分类系统实现与测试现有的网包分类研究,大多集中于网包分类算法的设计及其软件仿真实验,仅有少量的并不全面的真实系统评测[57-61].为了客观真实地反映网包分类系统的性能,我们将第3节中介绍的一系列网包分类算法实现于高性能多核处理器平台及FPGA硬件仿真平台上,并利用大量真实规则进行了全面测试.4.1基于多核平台的网包分类系统测试采用CaviumOCTEON3860多核处理器.该处理器包含16个运行在500MHz的MIPS核心,8个千兆RGMII的网络接口.存储体系包括32K字节的每核独享L1缓存,1M字节的共享L2缓存以及2G字节的DDR2主存.在开发编程工作中,我们使用了基于CaviumSDKversion1.5的SimpleExecutive模式以保证最大程度的发挥处理器性能.基于OCTEON3860多核处理器平台的测试结果见图11和图12.我们实现了HiCuts、HSM和HyperSplit3种算法.从图11的测试可以看出,随着处理器核心数的增加,3种算法的吞吐率增长都接近线性.当使用全部16个核的时候,HyperSplit算法达到了6.4Gbps吞吐率(测试使用64字节网包),其性能是HSM的2倍,HiCuts的4倍.图12是开启全部16个核的情况下,不同大小网包的吞吐测试结果.由图可见,HyperSplit算法在网包包长大于或等于128字节时,即可达到100%线速(8Gbps),而HSM和HiCuts分别在256字节和1024字节才达到线速处理.由此可见,HyperSplit算法可以在多核系统平台上得到高效实现,提供接近线速的网包处理能力.相比HiCuts算法,HyperSplit算法的优势主要在于处理每个网包的内存访问次数少,因此处理速度快.相比HSM算法,HyperSplit算法的优势在于内存使用少,使得多核系统的缓存能够得到充分利用,从而降低每次访存的延迟,最终提高了整体处理速度.图11网包分类算法在多核处理器上的性能(64字节网包)Page11图12网包分类算法在多核处理器上的性能(16核)4.2基于FPGA平台的网包分类系统参考已有的基于FPGA的网包分类算法实现[62-68],在测试中我们使用了XilinxVirtex-6(mod-el:XC6VSX475T)芯片.该芯片的计算资源为37440可编程逻辑单元(configurablelogicblocks).包含7640K比特分布式存储单元(DistributedRAM)以及38304K比特块存储单元(BlockRAMs).所有实验结果使用Xillinx的ISE仿真平台获取.从表5的数据比较可以看出,FPGA-Split算法在单一FPGA平台上可以达到142Gbps的吞吐率(测试使用64字节网包).FPGA的最高可用时钟频率会随着分类规则个数增加而降低.这是由于规则数增多导致内存使用增多,从而增加了FPGA内部互联的复杂性,进而导致电路延迟增加及时钟频率下降.从逻辑和存储单元使用率上可见,当前商用FPGA芯片已经可以支持大规模高性能的网包分类实现.规则个数100139.1142444/3744010/5161000134.0137602/3744018/51610000115.4118747/37440103/516表6比较了多种算法在不同平台上的进行64字节网包分类的吞吐率.由该表可知,基于多核处理器的网包分类可以达到10Gbps吞吐率,而基于FPGA的硬件实现可以达到100Gbps或更高的性能.不同的处理器平台适用于不同的网络应用,其开发难度、系统功耗、可拓展性也各有不同.多核平台可以有效用于多业务的处理,如包含网包分类功能的安全网关实现等.硬件系统则更适用于高性能网络交换设备,为其提供100Gbps以上的网包分类功能.基于FPGA的FPGA-Split算法基于OCTEON3860的HyperSplit算法基于IXP2850的AggreCuts算法5结论和展望本文从理论分析、算法设计和系统实现三方面介绍和分析了近年来高性能网包分类算法的研究成果.首先利用计算几何领域中的相关数学方法,阐明了网包分类问题的理论方法及复杂度分析,指出不同类型的网包分类算法普遍遵循的理论依据.接下来,对具有影响力的网包分类算法按照不同的研究方向进行了归类,同时结合自身研究成果对不同类别算法的设计思路行了深入分析.最后,将几类具有代表性的网包分类算法分别实现于多核网络处理器平台以及FPGA硬件平台上,并通过实际测试比较了不同类型算法在不同系统平台上的真实性能.总而言之,理论分析为网包分类算法研究指明了方向.但数学方法的复杂度并不能代表实际应用的情况.因此在算法设计中,往往利用启发式方法、数据结构压缩方法、并行处理方法来消除规则冗余,提高分类速率.此外,不同的网包分类算法实现于不同的软硬件平台时,需要依据平台的计算、存储、总线等特性进行优化,否则无法有效利用系统资源以获取最优的网包分类性能.随着云计算数据中心、移动互联网、大规模物联网等新兴网络的出现,网包分类算法的研究将面临新的挑战.首先是性能的需求,支持百万规则的具备T比特吞吐率的网包分类算法将成为研究热点,这类算法可以满足未来骨干网络和数据中心网络的带宽.其次是业务的需求,具备网络业务识别能力的应用层网包分类算法将有重要研究价值,这类算法将为网络融合提供多业务的管控机制及服务质量保证.最后,网包分类算法的芯片化研究也具有重要意义,具备高速网包分类功能的网络处理器将有力推动下一代互联网设备的发展.
