Page1云计算环境下基于社区聚集的绿色消息系统李伟1),2)虎嵩林1)刘冬梅2),3)李锦涛1)1)(中国科学院计算技术研究所前瞻研究实验室北京100190)2)(中国科学院研究生院北京100049)3)(国网信息通信有限公司北京100761)摘要云计算环境下,消息系统的客户端点部署方式对系统的性能和能耗有着重大的影响.不合理的部署会使消息系统内的路由节点承受较大的负载,增加系统的能耗.现有的部署方法往往只考虑负载均衡或者基于兴趣的部署,忽略了客户端点之间存在的复杂通信关联对系统造成的影响.文中提出一种基于社区聚集的部署方法,能根据客户端点之间的消息通信强度划分社区,并通过社区聚集的方法,提高系统性能,同时有效地降低路由节点CPU以及通信链路的能耗.实验证明该方法能有效提高消息系统的消息转发效率,并能降低路由节点的消息处理负载和通信链路中的消息量,减小系统能耗.这为绿色消息系统的研究提供了一个新思路.关键词云计算;消息系统;社区划分;社区聚集;能耗;绿色计算1引言作为一种全新的网络应用模式,云计算的兴起正在逐渐改变着整个计算机产业的发展[1].当前,Google、Yahoo等知名企业都推出了自己的云计算解决方案.消息系统[2]作为其中的关键组成,在云计算系统中也发挥着越来越重要的作用.例如,Google的消息系统GooPS[3]整合了Google提供给用户的网络服务,Yahoo则用其消息系统PNuts[4]作为其云计算架构的消息总线.消息系统由客户端点和中间路由组织两部分组成,其中客户端点作为云计算系统中上层应用或服务的代理,接入到中间路由组织的节点中,向中间路由组织发送消息并从中间路由组织接收消息.中间路由组织则负责将客户端点发送的消息路由到接收端点处.云计算系统通常都规模巨大,因而其消息系统有很大的能耗,在能源问题逐渐突出的今天,如何优化降低系统的能耗具有重要的意义.消息系统的能耗主要由中间路由组织,也就是路由节点和通信链路的能耗组成.当前,节点级节能策略包括根据作业负载动态调节CPU的电压和时钟频率[5],在网络设备上设置设备的唤醒-睡眠条件[6]、动态调节网络链路速率[7]等方式.由于部署在中间路由组织上的客户端点之间不可避免地存在着消息通信,这些消息在中间路由组织上传送时,会给路由传递过程中经过的节点带来路由负载,影响系统的能耗.一个优化的客户端点部署方式,能减少中间路由组织中传递的消息量,进而减小路由节点的CPU的消息负载,在提高系统性能的同时,有效降低系统能耗.然而,当前的部署策略往往简单地从负载均衡方面,或者从客户端点接收消息的相似性[8]考虑,忽视了客户端点之间的复杂通信关系对系统的能耗的影响.本文通过分析客户端点之间的通信关系,在考虑客户端点部署代价和负载均衡的基础上,提出了基于社区的客户端点部署算法.该算法通过构建客户端点的通信关系网络,并对其进行社区划分和物理上的聚集,使消息关联紧密的客户端点(社区)之间的消息能通过较少的中间路由节点完成路由.社区聚集在提高消息转发的效率和系统性能的同时,也能有效减小中间的路由节点的消息负载和通信链路中的消息量.这从两个方面降低了系统能耗:(1)消息负载的减少有利于路由节点根据负载动态调节CPU的时钟频率和电压,来降低路由节点的能耗;(2)通信链路中消息量的减少有利于链路采用自适应链路速率机制[9]来动态调节链路速率,在基本不影响消息传递效率的情况下,降低通信链路的能耗.在进行物理上的聚集时,结合考虑聚集过程中客户端点部署的代价,我们提出一种启发式的聚集策略,在系统性能和聚集代价之间求得平衡,使得算法能在较小的聚集代价下尽可能地提升系统性能.本文的主要贡献是:(1)分析了云计算环境下,消息系统客户端点部署方式对系统性能的影响,提出了基于社区的客户端点聚集部署算法,从两个方面降低了系统能耗.(2)在模型中结合考虑聚集代价,提出一种启发式的聚集策略,在系统性能和聚集代价间求得平衡.(3)在实验中,我们模拟了不同的参数设置,验证算法在不同实验设定下的效果,实验显示我们的算法是通用和有效的.本文第2节简要介绍与本文有关的相关工作;第3节分3个步骤,详细介绍基于社区的客户端点部署算法,包括客户端点的关系网络构建、社区划分和客户端点的社区物理聚集;第4节验证算法在各种不同设置下的实验性能,包括不同通信关联模式和不同集群组成;最后对全文进行总结.2相关工作2.1绿色消息系统的节能方法消息系统(MessagingSystem)由客户端点和中间路由节点组织组成[2].客户端点之间通过发送消息和接收消息进行通信.客户端点先向其连接的路由节点注册感兴趣的事件类型,当中间路由组织中有这类事件的消息时,这个消息会被路由节点路由到对这类事件感兴趣的客户端处.路由节点则负责消息的路由.消息系统的主要优势是它实现了客户端点之间的松耦合.客户端之间不用知道对方是谁以及对方在哪,只依赖消息进行交互.消息系统可以是集中式的,也可以是分布式的.集中式的系统只有一个中间路由节点,分布式的事件系统则有多个中间路由节点,并通过通信链路连接.消息系统已经被广泛应用在各类应用和系统中,例如业务流程管理(BPM)[10-11]、流处理[12]、自动服务组合[13]、Google和Yahoo的云计算平台等.当前,降低计算机系统能耗已经成为计算机领域备受关注的研究课题之一[14].现在主流的能耗管Page3理机制可以分为两种:睡眠-唤醒机制和动态速率调节机制.睡眠-唤醒机制[15-16]是指在系统运行中,将部分耗能资源置于睡眠或关闭状态,以减少系统空闲时的能量消耗;动态速率调节机制则是指系统根据负载情况,动态的调节系统处理速率,使系统能够在低速率下运行,以节省能耗.绿色消息系统可以从两个方面进行节能:一是引入计算机网络系统的节能方法,这包括两个层面的策略:节点级的节能策略和网络级的节能策略.节点级的节能策略又包括两个方面:路由节点的节能和通信链路的节能.节点级的节能策略可以通过能耗优化模块来部署其节能策略:通过观测子模块的系统信息,结合系统部署的节能策略,来调节系统的参数,从而实现能耗的控制.当前,处理器的节能技术目前已经比较成熟.其节能策略,一般是根据负载来调节CPU的电压和时钟频率.具体做法可以是静态地设置阈值,或是动态地根据负载来预测调节电压和时钟频率.Yao等人[17]把能耗优化问题归结成最优任务调度问题,对处理器能耗优化研究产生了重大影响.Linux平台下内核级的实时能耗管理器OndemandGovernor[18]能连续监控CPU的利用率,来决策时钟频率和电压的变化,这个管理器已经加入到Linux内核版本2.6.10中.对通信链路而言,常用的节能机制有速率缩放机制[19-20]和自适应链路机制[9].以太网的链路在速率增加时能耗会增加,而在处于空闲或者链路利用率为100%时功耗几乎相同[9].因而当链路的利用率较低时,降低链路速率能在基本不影响性能的情况下降低能耗.网络级的节能策略主要从引入新的网络协议、路由调度或网络架构等方面来降低能耗[21-23].本文提出的基于社区的客户端点聚集策略主要是从节点级来降低节点CPU和通信链路的能耗,因而在此不详述网络级的节能策略.二是改变消息系统的资源分配方式,通过资源优化部署降低能耗.消息系统的能耗与消息系统的客户端点的部署方式有着重大关联.客户端点的部署影响着中间路由组织中路由节点的CPU的负载和通信链路的链路利用率,进而影响着系统的能耗.可以认为,合理的客户端点部署策略是从应用层来降低消息系统的能耗.当前消息系统的客户端点优化部署方法只是从客户端点接收的消息的相似性出发[8,24],通过对接收相同或相似消息的客户端点进行聚集,使得发往这些客户端点的消息能共享路由路径,减少系统负载.这种基于兴趣的部署没有考虑到客户端点在同时发送和接收消息,忽略了客户端点在消息发送方面对系统造成的影响,因而有可能会增加一部分消息在路由过程中经过的路由节点数量,对系统的节能产生不利影响.基于社区的任务部署将客户端点之间的关系用一个有向图表示,同时考虑了客户端点在发送和接收两方面对系统的影响,因而更加具有通用性和可行性.2.2社区划分社区划分是指将一个网络图中的节点划分成几块,块内节点间的连接程度相对密切,而块间节点的连接程度相对稀疏.网络的社区划分算法有三类:Kerlinghan-Lin算法[25]、谱分析法[26]和层次算法.Kerlinghan-Lin算法是一种基于贪婪思想的算法,它首先定义一个数值q.q为社区内的边的和减去社区之间的边的和.然后将一个网络图随机分成两个社区,计算q值,并进行迭代.每次都从这两个社区中各选一个节点,进行社区交换,计算q值变化,直到q值达到最大.Kerlinghan-Lin算法的缺点是只能将网络划分成2个大小已知的社区.谱分析法则是对图的邻接矩阵的某个变换矩阵做谱分析,分析后在矩阵中数值不为0的各个子矩阵对应的节点即为各个社区.层次算法又分为分裂式[27-28]和聚集式[29]两类.分裂式算法先将整个图视为一个社区并定义一个节点间关联强度的计算指标,每次移除关联度最小的一对节点之间的边,直到所有边都被移除掉或者停止.聚集式算法则是先将每个节点都视为一个社区,每次将节点关联度最高的两个社区合并成一个新的社区,直到所有的社区都合并或者停止.层次算法的缺点是如果不知道社区个数,就无法确定算法的终止条件.为解决这点,Newman等人[28]提出了用“模度化”(Modularity)来确定分裂或者聚集步骤的结束点.他们的算法的社区划分效果较好,因而被很多人研究.本文用该算法来对客户端点的通信关系网络进行社区划分.3算法3.1消息系统的能耗模型如前所示,消息系统的能耗主要由中间路由组织的路由节点能耗和通信链路能耗组成,功耗模型表示如下:Page4其中,路由节点的能耗Prouter主要来自节点的处理器、内存、磁盘I/O和风扇等,其中处理器和内存的功耗占大部分[17];通信链路的能耗Plink主要和通信链路的速率有关.基于社区的客户端点部署策略主要是从减少路由节点的消息负载和降低通信链路中的消息量两方面,来调节路由节点的处理器能耗和通信链路能耗,降低系统能耗.图1算法的步骤3.2客户端点的通信关系网络构建客户端点的关系网络可以用一个有向图G={V,E,W}来表示,其中V是顶点集,表示所有的客户端点;E是有向边集,表明客户端点之间的消息关联.两个顶点之间存在一条边表示这两个客户端点间存在着消息通信.边的方向是从消息发送者到接收者.W表示边集的权重,表明两个客户端点之间的消息通信的强度.在这里,我们定义权重w为单位时间内两个客户端点之间的通信量.云计算系统的客户端点数量庞大,并且分布在不同节点上.我们用一个监控端来从所有路由节点收集通信日志,并通过通信日志构建客户端点的通我们的算法分为3个步骤:(1)分析客户端点之间的消息关系,构建通信关系网络;(2)用社区划分算法对客户端通信网络进行划分;(3)将属于同一社区的客户端点部署在中间路由组织的邻近路由节点上,进行物理聚集,提升系统性能,降低能耗.算法的步骤如图1所示.信关系网络.在实际运行中,客户端点之间的通信关联强度往往是未知的,并且在长期运行过程中,这个关联情况也会随着时间推移而发生改变.但是,在相对较短的一段时间内,可以认为客户端点之间的通信关系是稳定的.我们统计在这段时间内客户端点之间的消息通信情况,构建客户端点之间的关系网络.当通信关系网络发生较大变化时,我们会对客户端点进行重新部署.在3.4节中,我们介绍对系统性能和重新部署代价两方面进行了权衡折中的重部署算法,以在较小的部署代价下尽可能提高系统的性能.Page53.3社区划分客户端的通信关系网络中存在社区结构(Com-munityStructure).社区结构的特点,从局部看,是节点和社区内的其他节点关联密切,而和社区外的节点的关联程度则相对稀疏;从整体看,是社区内部关联强度大于社区之间的关联强度.Newman等在2004年提出来的基于“模度化”的社区划分方法,其主要思想是:在某一划分下,社区内的边的比例,与同划分下且连接概率相同的随机网络中,划分结构内部的边的比例,这两个的差值越大,表明社区划分的结果越好.这个差值被定义为模度化.算法通过节点的层次合并或者拆分来计算使模度化最大时的社区划分结果.我们在构建客户端点的关系网络后,用Newman的算法做社区划分,在社区内部,客户端点之间消息关系密切,社区之间消息关系相对较弱.3.4客户端点部署这一步我们也称为客户端点的社区物理聚集:将一个社区内的客户端点部署到中间路由组织中的物理连接速度较快,或者地理上较接近的集群节点上.这能带来两个好处:(1)能有效提高大部分消息的传递效率.社区划分将相互关联密切的客户端点划分在一个社区内,因此大部分的消息关联都在社区内的客户端点之间,将一个社区内的客户端点做物理聚集,有利于缩短大部分消息的传递步长,提高消息的传递效率.(2)能有效降低中间路由组织中的路由节点处理的消息量.社区内的客户端点的物理聚集,使得大部分消息能在集群内完成传递,降低了系统中路由节点处理的消息量.这两个好处都有利于降低系统的能耗.提高消息传递速度能减少客户端点等待时间,进而减少CPU的运算时间;降低路由节点处理的消息量则能减小CPU负载,并有利于使通信链路处于低速率状态.在将社区内的客户端点部署到中间路由组织时,有如下的问题需要考虑:(1)客户端点从一个连接点部署到另外一个连接点,这种迁移会给系统带来开销,迁移的客户端点越多,带来的开销越大.因而一个合理的策略是在系统性能提升与迁移带来的代价中取得平衡.(2)划分的社区以及中间路由组织中的各个集群都有特定的规模,在部署的时候要尽量在集群间达到负载均衡,避免某些集群过载而某些集群空载.基于此,我们提出一个基于社区重心的启发式算法,对客户端点进行部署时,在尽量提升性能的同时,减小客户端迁移带来的开销,同时达到负载均衡.下面,我们先对一些参数进行定义,以便于介绍算法.3.4.1定义算法的目标是以较小的迁移代价,尽可能地提高系统性能.消息是通过中间路由组织中的路由节点转发的,消息经过的路由的跳数越少,从发送到接收的转发时延也越小.因此,我们用消息传递中经过的路由跳数的平均值来定义系统的性能:其中m为消息的编号,m∈[1,M],M为消息总量.如果迁移的客户端点数量越多,部署给系统带来的迁移代价也就越大,因此我们定义部署代价为迁移的客户端点的数量Nmovedclient.因而,算法的目标函数为3.4.2部署算法我们用一个迭代过程来达到系统性能和迁移带来的代价折中平衡:(1)先对客户端点通信关系网络做社区划分;(2)在当前社区划分下,以最小的迁移代价,做客户端的社区物理聚集;(3)依据式(2)计算系统性能的改变和迁移的代价;(4)对已划分的社区做迭代的划分;(5)重复步2和步3;(6)如果步4的社区划分带来的系统性能的变化比例大于迁移的代价的变化比例,则迭代停止;否则重复步4~6.步6的意思是:随着对社区继续进行社区划分和物理聚集,系统性能与前一次的部署结果相比会下降,而迁移的代价也会变小.在迭代中,如果划分导致的系统性能下降比例大于迁移代价减小的比例,说明这一步迭代带来的性能损失更大,因此迭代终止.算法中的关键,是步2中,在某一个社区划分结果下,以最小的迁移代价对社区进行物理聚集.下面我们介绍以社区地理重心为启发式的聚集算法.对于一个社区内的客户端点,在聚集前往往是分散在中间路由组织的不同集群上.我们定义对于某个社区,在其客户端点分布的集群中,拥有这个社区的客户端点数量最多的集群为这个社区的地理重心.在对某个社区的客户端点进行物理聚集时,如果将这个社区聚集到它的地理重心,迁移代价是最小的.但是要注意的是,一个社区在做社区聚集的时候,不能忽视其它社区的地理重心.因为每个集群的Page6规模有限,某个集群有可能是多个社区的地理重心,如果将这些社区都聚集到其地理重心,会造成这个集群被部署了多个社区的客户端点,导致负载过大.为了解决这个问题,我们计算当前集群中的某个社区的客户端点占这个社区总端点数的比例,并对这个比例排序.每个社区优先聚集到比例值最大的集群上,即其地理重心上.如果地理重心已被部署其他社区,负载已满,则聚集到比例值第二大的集群上,以此类推,直致这个社区被部署.算法的具体过程见算法1:我们先建立一个包含所有集群的队列Q,然后依次处理每个集群.对在这个集群内有客户端点分布的所有社区,根据其客户端点的比例排序(第6行),优先将客户端点比例较大的社区部署到当前的集群上.如果某个社区之前被部署了,则比较其在当前集群和之前被部署的集群上的客户端点的比例值的大小.如果当前集群上的客户端点比例更大,则这个社区被重部署到当前集群(第10~11行).这保证了每个社区会优先部署到社区的地理重心,而如果地理重心已经过载,则会部署到比例第二大的集群,以此类推.算法1.社区迭代聚集算法.输入:集群集合S输出:无1.初始化队列Q;2.将所有的集群S放入队列Q;3.WHILE(!Q.empty()){4.s=Q.removeHead();5.IF(s没有过载)6.计算s内各社区的客户端点数量占其社区总数7.FOR(位于s内的某个社区i)8.IF(i已经被部署)9.s=getCluster(i);//获得i之前被部署的集群10.IF(i在s内的客户端点数量>i在s内的客11.i被部署到s;12.IF(s没有过载)13.将s放入Q;14.ENDIF15.ENDIF16.ELSE17.将i部署到s;18.ENDIF19.ENDFOR20.ENDIF21.ENDWHILE3.4.3运行代价社区迭代聚集的算法包括两步:客户端点社区划分和社区的物理聚集.客户端点社区划分的Newman算法的时间复杂度[30]是n×lg2n,其中n是客户端点的数量.在社区划分后,假设客户端点的社区个数是K,底层集群的个数是L,则算法1的时间复杂度是K×L.云计算环境下客户端点的数量庞大,因而n值很大.划分后的社区数量K和底层集群的个数L则通常比n小的多,所以重部署的算法代价主要由n×lg2n构成,接近线性复杂度.4实验4.1实验设置我们验证算法对系统的影响,具体表现在消息传递的路由路径长度和路由时延在算法运行前后的变化.另外,我们还关注路由节点,尤其是主干上的路由节点处理的消息负载的变化,这将影响到系统能耗.我们生成一定数量的客户端点,并部署到中间路由组织的节点中.客户端之间的消息都包含了一定的参数,每个客户端点接收包含输入参数的消息后,会生成其输出参数并放入消息中,发送到中间路由组织中.在定义了客户端之间的通信关联模式后,我们会随机生成一些包含输入参数和输出参数的请求,以让其中的一些客户端点协作,协作中产生的消息量就是实验的负载.我们将我们的算法和基于兴趣的部署算法进行了比较.一个客户端点感兴趣的消息集合,即是这个客户端点在运行过程中接收到的消息集合.确定了客户端点的通信关系网络,就可以得到每个客户节点的兴趣消息集合,在定义了两个客户端点的兴趣消息集合的相似性计算公式后,就可以用聚类算法,如K-Means[31]等,来对客户端点进行兴趣聚类,并部署到中间路由组织的节点上,这个过程就是基于兴趣的部署.假设客户端点i接收的消息集合为Ri,我们用杰卡德系数(JaccardCoefficient)来定义两个客户端点i和j的兴趣集合的相似性Sij:我们验证算法在各种不同参数设定下的实验效果,包括在不同的通信关系网络模式下和在不同的Page7通信关系网络模式指的是客户端点之间可能会呈现不同的消息依赖关系.通信关系网络的不同影响着社区分割的结果,也影响着客户端点的兴趣相似度的分布.客户端点构成的通信网络为复杂网络(ComplexNetworks),复杂网络包括无标度网络[32]和小世界网络[33].为了全面衡量,我们还生成了随机网络,进行实验验证:(1)无标度网络.无标度网络的节点的度满足Zipf分布,即少数节点具有很大的连接度,而大量的节点只有很小的连接度.我们依照这个规律来构建无标度网络.(2)小世界网络.构建方式如下,首先对客户端点编号;依据编号,每个客户端点接收它的k个邻居发送的消息;再随机地选择两个客户端点并以一定的概率p在这两个客户端点间加入消息关联,直到整个网络的边的数量达到设定值m.这里k,p,m都是设定的常数.(3)随机网络.客户端点随机选择某些客户端集群组成下.点,并接收其发送的消息.集群组成指的是消息系统的中间路由组织的组成方式.中间路由组织可以由一些规模大小不同的集群组成,也可以由一些规模大小相同的集群组成.在实验中我们构建两个不同的集群拓扑,验证算法在不同的集群组成下的性能.4.2实验结果4.2.1不同通信关系网络模式我们先随机生成一个中间路由组织的拓扑结构,如图2所示.这个中间路由组织包括8个集群和53个节点,其中有8个节点在集群的主干上.然后我们生成客户端点,并部署到集群上.我们验证客户端通信网络分别为无标度网络、随机网络和小世界网络时算法对系统性能的影响.图3~图5显示了3种模式下,消息数量在路由路径长度上的分布.从图中,第一,我们发现在初始分布下,大部分消息都需要5到9跳的转发(无标度网络56%,随机网络61%,小世界网络54%),并且消息数量最大在跳数为7或8处.在基于社区的聚集部署后,大部分消息能在4跳内完成转发(无标度网络59%,随机网络49%,小世界网络61%),且消息数量的峰值在路由路径长度为2或4处;第二,我们可以看到基于兴趣的部署算法不能有效减少消息传递的平均路径长度;第三,我们发现在小世界网络中,在4跳内完成转发的消息比例相比在随机网络下的比例更大,这是因为在小世界网络中社区结构更明显,这点通过网络的模度化值可以发现.初始分布15%56%29%基于兴趣44%28%28%基于社区59%29%12%初始分布13%61%26%基于兴趣14%52%34%基于社区49%35%16%Page8初始分布16%54%30%基于兴趣17%52%31%基于社区61%27%12%表1显示了消息传递时延在3种通信模式下的分布.我们发现在0.5s内完成转发的消息比例,在表13种通信模式下消息时延的分布初始分布2%5%0.4%92.6%7%4%0.4%88.6%7%21%44%28%基于兴趣0.1%3%5%91.9%8%12%3%77%10%25%35%30%基于社区2%31%16%51%29%55%11%5%31%56%10%3%表23种通信模式下主干上的节点负载变化初始分布基于兴趣基于社区1449814253108194.2.2不同集群组成我们验证本文的算法在不同的集群组成下对系统的影响.除了在上一节的实验中所使用的由不同规模的集群组成的中间路由组织,另生成一个由相同规模的集群组成的中间路由组织,称之为平衡拓扑(如图6所示).图7显示了在平衡拓扑下,消息数量在传递路径长度上的分布.可以看到,初始的时候消息数量最大在路由路径长度为7和8处;在社区聚集后消息数量的峰值分布在2和3处,在5跳内能完成转发的消息的比例从12%增加到61%,而且能在0.1s内完成转发的消息比例从8.6%增加到39%(表3).这都显示基于社区的部署能显著地缩短消息路由的路径长度和消息传递的时延.而基于兴趣的部署没有明显的效果.表4显示了集群主干上的消息负载的变化,基于社区的部署将负载较小了44%,而基基于社区的聚集部署后变大了很多(无标度网络从7%~33%,随机网络从11%~84%,小世界网络从28%~87%),而基于兴趣的部署对消息时延的影响并不明显.由于随机网络和小世界网络的模度化值相比无标度网络更大,因而性能提升的更明显.表2显示了在中间路由组织的主干节点上的消息负载的变化,可以看到基于社区的部署能显著减小主干节点上的负载,处理的消息量在3种模式下能平均减小50%.这表明,算法在3种通信模式下都能有效降低主干节点上的消息负载和通信链路中的消息量.负载的减小有利于路由节点降低CPU的时钟频率和电压,通信量的降低则有利于让链路在保证消息传递效率的情况下以低速率运行.对于动态调节的CPU和采用自适应链路速率机制的链路而言,这都有利于降低系统的能耗.随机网络随机网络于兴趣的部署则只减小了28%.这表明算法在不同的集群组成上都能有效降低系统的消息负载,进而降低系统的能耗.Page9初始分布12%65%23%基于兴趣31%50%19%基于社区61%29%10%初始分布8.6%75%11%5.4%基于兴趣14%73%8%5%基于社区39%52%6%3%初始分布基于兴趣基于社区这两组实验表明,我们的算法能适用于不同的参数设定,在不同的通信模式和不同的集群组成下,算法都能有效提高系统性能,减小系统负载,提高消息转发的效率.这表明我们的算法是通用和有效的.5结论消息系统在云计算系统中扮演着越来越重要的角色,消息系统的能耗优化对于降低云计算系统的能耗也有着重要的意义.对于消息系统而言,除了节点级的节能策略,如处理器的节能策略和通信链路的节能策略外,客户端点的部署也影响着消息系统的能耗.本文提出的消息系统中基于社区的客户端点部署算法,利用社区划分技术和客户端点的物理聚集,对客户端点进行优化部署,能有效降低消息系统中的消息量,减少路由节点的消息处理负载,这都有利于降低系统的能耗.实验证明本文算法是通用且有效的.
