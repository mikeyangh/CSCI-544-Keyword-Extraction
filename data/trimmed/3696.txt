Page1HybridHP:一种轻型的内核完整性监控方案及其形式化验证钱振江1),2),3)刘苇1),2)黄皓1),2)1)(南京大学软件新技术国家重点实验室南京210046)2)(南京大学计算机科学与技术系南京210046)3)(常熟理工学院计算机科学与工程学院江苏常熟215500)摘要虽然传统的虚拟化监控方法可以在一定程度上保障操作系统安全.然而,虚拟监控器VMM中管理域Do-main0的存在以及操作系统级的切换所带来的性能损失是很多具有大型应用的操作系统所不能接受的.注重硬件虚拟化技术的监控能力而摒弃其不必要的虚拟化能力,提出了一个新型的通用的虚拟化监控框架HybridHP,并实现其原型.HybridHP将管理域和虚拟机监控机制两者整合到被监控操作系统的地址空间,具有很好的获取被监控系统操作语义的能力.利用Isabelle/HOL形式化辅助证明工具验证HybridHP的隔离性、安全性和监控能力.最后对HybridHP进行了攻击实验和性能评估,结果显示HybridHP提供了和传统的虚拟化监控方案相同的安全保障,并具有很好的系统性能.关键词硬件虚拟化;内核完整性;安全监控;安全攻击;Isabelle形式化验证1引言内核级的攻击和恶意程序可以轻易地破坏整个操作系统的完整性,而传统监控方案的本质缺陷在于恶意程序可能获得和内核一样的权限,导致操作系统没有保护自身的能力.近年来硬件虚拟化技术(如Intel-VT和AMD-SVM等)的发展为基于虚拟机(如XEN[1]和KVM[2]等)的监控方式提供了底层的支持和保障.总的来说,由于虚拟机监控器位于内核的底层,比内核具有更高的权限,所以可以中断内核的执行,对内核的执行进行审查和检验,从而保证内核的完整性.这种实时性也是虚拟机监控器区别于其它监控方案的最大优势.很多的学者对此进行了研究[3-4].基于虚拟机的监控器能够捕捉到包括内存在内的资源访问动作,使得在内核执行过程中能够根据内核执行路径中所访问的对象进行选择性的事件触发,从而提高了监控器监控的实时性.个方面的问题:已有的虚拟化监控方案[3,5-11],普遍存在这么几(1)性能损失.这些方案注重虚拟化机制,而非监控本身.在监控单独的操作系统时,它们往往需要付出很大的额外代价,例如采用XEN进行监控的方式,需要有单独的管理域Domain0,像I/O之类的操作需要管理域Domain0的干预处理,这极大地影响了被监控系统的性能;(2)可信基(TrustedComputingBase,TCB)膨胀.虚拟机自身的代码量往往过于庞大(如XEN3.4.1拥有230KSLOC的代码量),再加上管理域Domain0的系统代码量,我们面临着虚拟机本身以及相应的管理域Domain0的正确性问题,很难保证监控方案自身不会引入程序错误;(3)语义获取难.引用监控器位于被监控系统地址空间之外,因此引用监控器看到的视图和被监控系统的是有差别的,很难去理解被监控系统中对某个内存地址的具体操作语义,管理域进行监控的过程需要对被监控系统的具体操作语义进行转化,而这一过程是很难做到实时而全面的.虽然Sharif等人在被监控系统中构建了一个监控器SIM[12],以便于取得被监控系统的语义,但是SIM与被监控系统的隔离性仍需要依赖于另一个监控器的保护,而本文提出的内嵌式监控器的自我保护能力不依赖于其它任何安全机制.在本文中,给出了一个通用的虚拟化框架Hy-bridHP,其特点如下:(1)HybridHP注重于监控本身而非虚拟化技术.HybridHP没有Domain0之类的单独管理域概念,HybridHP以模块的方式嵌入到被监控系统的内核空间中进行监控服务.HybridHP只负责监控系统的运行,能够截获被监控系统中的特权操作、异常和对寄存器、内存、I/O等的访问,且不受原有内核模块的影响和破坏,并且不会干预其I/O的操作,为此被监控系统的性能不会受到很大的影响;(2)由于采用模块的方式运行,HybridHP看到的内存视图和被监控系统看到的是一致的,这样容易获得被监控系统的操作语义,监控的正确率和效率可以得到很大的提高;(3)由于HybridHP监控功能的单一性,其代码量可以控制在很小的范围,这便于对其正确性进行证明,我们利用Isabelle[13]形式化辅助证明工具对其进行了正确性证明.总的来说,HybridHP是被监控系统内部的一个模块,它利用硬件虚拟化技术,使自身独立于被监控系统,具有比被监控系统中的原有模块更高的权限.图1显示了HybridHP与已有虚拟化监控方案的区别,其中CM、DM是监控器的代码段和数据段,CP、DP是被监控系统的代码段和数据段.区别于已有的虚拟化监控方案,由于HybridHP以模块方式运行,其自身的代码和数据信息暴露在被监控系统的视图下,很容易受到其它恶意模块的破坏,所以它自身的安全性和隔离性是我们成功与否的关键.为此,我们提出了相应的保护机制,并且在高层使用形式化的方法并借助Isabelle证明其安全性和隔离性.HybridHP是一种完全内嵌式的监控方案,不借助其它任何的辅助监控措施,并且其正确性经过Page3图1HybridHP与已有的虚拟化监控方案的区别严格的形式化逻辑验证.本文第2节阐述HybridHP的整体框架设计;第3节说明HybridHP原型的具体实现细节和关键技术;第4节给出HybridHP正确性的Isabelle形式化证明;第5节阐述对HybridHP的测试结果和系统性能评估;第6节对本文进行总结和对未来的工作进行展望.2HybridHP的设计2.1HybridHP的目标HybridHP的设计目标是能够利用硬件虚拟化技术对操作系统实施监控,但不会对操作系统的性能和效率造成太大的影响,为此需要实现以下几个具体目标:(1)监控程序本身是安全的.为了实现这个目标,要求监控程序非常小,其本身是可以通过形式化验证的,这样才能保证它自身的安全可靠和可控;(2)监控程序自我保护.监控程序本身要有自我保护的能力,防止其它恶意模块的破坏;(3)监控程序不可旁路.监控程序能够截获被图2HybridHP框架监控系统中的特权操作和对关键内存对象、寄存器、I/O设备的访问等.恶意模块不能绕过监控程序执行非法操作和修改受保护的关键数据;(4)机制与策略分离.监控程序本身提供的只是监控机制,具体的策略是可以实时更新的;(5)被监控系统的性能不会受到太大的影响.已有的监控方案正是由于架构的原因,极大地损失了系统的性能,所以并不是很适用;(6)易于获得被监控系统的语义.获得操作系统的语义是监控程序一个很重要的任务,而已有的虚拟机监控器由于虚拟机看到的内存视图和被监控系统看到的是有差别的,很难去理解被监控系统的具体操作语义.2.2HybridHP的整体框架HybridHP的整体框架如图2所示.HybridHP的核心特点在于HybridHP以模块的方式在被监控系统内核空间中运行,由于使用了硬件虚拟化技术,比其它的内核模块具有更高的权限.整个内核空间处于0级模式(Ring0),但是Intel-VT又将0级分成两种子模式:VMXRoot模式和VMXNon-Root模式.VMXRoot是真正的0级,具有所有权限.VMXPage4Root模式的操作方式和没有开启硬件虚拟化机制(VMX)时的操作基本上是相同的,不同之处在于VMXRoot模式中能够调用VMX的指令,同时,一些寄存器中能够装载的值会受到一定的限制.在本文的框架中,HybridHP运行在VMXRoot模式.VMXNon-Root是受限的0级,其中很多的特权操作和事件会触发控制权转移到VMXRoot模式的监控程序.对应地,框架中的被监控系统运行在VMXNon-Root模式.HybridHP本身不提供虚拟化,没有管理域和驱动域的概念.对于系统的驱动部分(如I/O访问),被监控系统的驱动模块直接和硬件交互,不需要HybridHP的干预,这样对系统的性能不会造成太大的影响.当然,如果需要HybridHP进行监控和管理的话,也可以通过对HybridHP增加相应的策略来达到目的.对于监控能力,HybridHP只提供监控的机制,采用机制和策略相分离的方式.为此,HybridHP启动之后,首先从外部环境获得策略信息.为了避免外部环境的不可信以及恶意策略对HybridHP完整性的破坏,HybridHP使用数字签名的方式来进行策略的安全更新.HybridHP根据策略对内核的运行过程进行实时监控,如关键数据的保护、异常行为触发等.运行在VMXNon-Root模式的被监控系统触发受HybridHP监控的事件,通过两种模式之间唯一的入口VMExit进入VMXRoot模式,由HybridHP根据策略信息进行处理,处理完成后通过VMEntry返回VMXNon-Root模式.由于HybridHP和被监控系统采用的是相同的页表视图,HybridHP对于被监控系统的对内存地址的操作语义不需要经过转换而可以直接理解,提高监控处理的效率.同时,HybridHP具有自我保护的能力,被监控系统虽然可以看到HybridHP的页表视图,但是无法对其进行修改,而HybridHP拥有修改被监控系统内存视图的权限.因此,从地址空间的角度来讲,被监控系统内核的地址空间其实是HybridHP地址空间的子集,HybridHP和内核其它模块对于地址空间视图的权限是单向的.3HybridHP的实现为了验证本文的方案,实现了HybridHP的原型.本节对HybridHP的实现和主要关键技术进行阐述.HybridHP以模块的方式在被监控系统内核空间中运行,区别于系统中的其它模块,在HybridHP中开启硬件虚拟化(VMX),HybridHP运行在VMXRoot模式,而整个被监控系统运行在VMXNon-Root模式,所以HybridHP具有比其它的内核模块更高的权限.如何做到在HybridHP框架中开启硬件虚拟化,使得HybridHP运行于VMXRoot模式,而被监控系统运行于VMXNon-Root模式是需要解决的第1个问题.在HybridHP框架中,控制VMXRoot和VMXNon-Root运行模式的关键是VMX控制结构VMCS,主要包括3个部分:(1)被监控系统的状态区(GuestStateArea),用于在VMXNon-Root向VMXRoot模式切换时保存被监控系统的状态信息,如段寄存器、CR寄存器、指令指针IP、栈顶指针SP等,以及从VMXRoot返回VMXNon-Root模式时的VMEntry入口地址;(2)主机状态区(HostStateArea),存放监控系统自身的状态信息.在HybridHP框架中,主机状态区主要包括HybridHP运行过程的各种状态信息,如与HybridHP运行相关的段寄存器、CR寄存器、HybridHP栈顶指针SP,以及从VMXNon-Root向VMXRoot模式切换时的VMExit处理程序的入口地址;(3)HybridHP执行控制区(ExecutionControlArea),主要包括HybridHP监控过程的配置信息,如需要保护的寄存器信息(CR0等)、HybridHP需要捕获的特权指令(如CPUID等)和异常(如page-fault等)信息以及相应的处理方式和处理函数入口地址.同时在HybridHP执行控制区中还存放了产生VMXNon-Root到VMXRoot模式切换的原因,包括错误码、触发切换的特权指令以及被监控系统期望修改的寄存器或者对象的地址等信息.在被监控系统启动后,以模块的方式加载Hy-bridHP.HybridHP启动的初始化流程包括:(1)分配HybridHP的内存空间,主要包括内核栈、动态数据区、以及VMX控制结构VMCS所需的空间;(2)通过VMXON指令开启硬件虚拟化,设置(3)设置VMCS中的主机状态区,其中VMExit的入口地址指向HybridHP的处理函数入口,页目录地址寄存器CR3设置为与被监控系统相同,被监控系统的状态区;Page5使得HybridHP与被监控系统采用相同的页表视图;(4)设置HybridHP执行控制区,包括需要保护的寄存器(如CR0等)、需要捕获的特权指令(如CPUID等)以及异常(如pagefault等)信息,这是HybridHP监控的核心,同时根据策略信息将关键数据区域所在的页面以及被监控系统页表所在的页等数据设置成在VMXNon-Root模式下只读,开启对数据的保护;(5)通过VMLANCH指令返回被监控系统VMX下面对HybridHP框架的具体实现和关键技Non-Root模式,使得被监控系统开始正常运行.术进行详细阐述.3.1HybridHP的关键技术之一:关键数据保护为了尽量地压缩HybridHP的代码量,Hy-bridHP框架没有单独的管理域Domain0的概念,更没有像传统虚拟机监控器方案中自身实现的虚拟存储管理功能,HybridHP和被监控系统处于相同的页表视图下,被监控系统甚至可以看到HybridHP的存在,如何实现对关键数据(如被监控系统的页表和代码所在页、需要保护的特定数据页等)的保护是需要解决的关键问题.HybridHP的监控能力主要体现在两个方面:特权指令的捕获和关键数据区域的保护.对特权指令的实时捕获是HybridHP作为轻型内核完整性监控方案的基础.HybridHP通过自身的初始化过程在VMCS的HybridHP执行控制区中对需要监控捕获的特权指令(如CPUID等)进行配置.在被监控系统的运行过程中,由于被监控系统运行于VMXNon-Root模式,这些特权指令的运行将触发指令陷入(Trap)事件,被监控系统的运行将被打断,通过VMExit的入口地址进入HybridHP的相应处理程序,运行模式也从VMXNon-Root切换到VMXRoot模式,控制权转移至HybridHP,从而实现对特权指令的捕获.HybridHP在处理完指令陷入之后,通过VMEntry接口返回被监控系统.对于关键数据区域的保护,涉及到HybridHP框架中对寄存器和异常等的监控事件类型的捕获,主要由以下技术提供保证:(1)始终开启CPU的页保护机制.开启页保护机制是HybridHP监控的基础,因为如果让操作系统具有去除页保护机制的能力,那么内核恶意模块就可以不通过页保护机制而更改任意的内存,那么也就没有了关键数据区域的概念.在X86架构中,页保护机制由寄存器CR0的WP位控制.在HybridHP的控制策略中,设置对CR0寄存器的访问控制,同时在VMCS的HybridHP执行控制区设置对CR0寄存器的保护.在HybridHP的监控框架下,被监控系统的运行过程中如果出现修改CR0寄存器的操作,将触发CRA(ControlRegisterAcces-ses)异常,运行模式从VMXNon-Root切换到VMXRoot模式,同时控制权转移到HybridHP.HybridHP通过对被监控系统的操作语义进行分析并根据控制策略进行判断,对于非法的CR0修改动作,HybridHP禁止该动作的执行,从而使得被监控系统中的恶意模块没有禁止页保护机制的能力,即始终开启页保护机制(CR0.WP=1).(2)在上述(1)的基础上,HybridHP根据策略将需要保护的关键数据在内存中的页设置成在VMXNon-Root模式下只读.一旦发生对这些数据的修改操作就会触发pagefault异常,通过模式转移VMExit从VMXNon-Root模式切换为VMXRoot模式,控制权交由HybridHP,通过和策略信息比较,判断修改动作的合法性,如果合法,HybridHP负责将该修改动作执行,否则,通过注入返回的方式,向被监控系统发送错误警告.(3)HybridHP将被监控系统的页表所在的页设为在VMXNon-Root模式下只读,那么恶意模块试图通过去掉页表中相应页的保护属性而修改内存的操作必然会触发pagefault异常,被HybridHP所捕获,处理方式与(2)类似.从以上的技术可以看出,对关键数据的修改动作不会绕过HybridHP的监控处理,满足不可旁路的要求.3.2HybridHP的关键技术之二:自我保护基于XEN之类的虚拟机监控框架中,由于使用了影子页表[1],虚拟机监控器以及管理域与被监控系统采用的是不同的页表,为此监控器部分的相关数据结构是不在被监控系统的内存视图之内的,所以监控程序不会受到被监控系统的破坏和干扰.也就是说由于XEN中有自己的虚拟存储管理,所以可以做到监控器自身的数据对客户机完全不可见.HybridHP以模块化的方式嵌入在被监控系统中运行,采用了与被监控系统相同的页表视图,没有对被监控系统完全隐藏物理内存的能力,为此HybridHP如何达到自我保护也是需要解决的关键问题.HybridHP框架通过将自己的代码页、数据页和策略所在页等数据设置为在VMXNon-Root模式下只读来起到自我保护.也就是说,HybridHP将Page6自身作为关键数据的一部分进行监控保护,那么即使自身暴露在被监控系统的内存视图中,利用3.1节中的关键数据保护技术,如果被监控系统中的恶意模块试图修改HybridHP的代码、数据或者策略信息,都会被HybridHP捕获到,HybridHP可以否决所有这些非法的修改.总的来说,HybridHP的自我保护能力使得虽然自身的所有数据暴露于被监控系统的视图之内,但是被监控系统没有对其进行修改的权限,所以可以保证自身的安全.3.3HybridHP的关键技术之三:策略更新为了实现监控策略和机制的分离以及策略的更新,HybridHP本身实现的只是监控的机制,监控策略需要由外部环境提供.在传统的基于虚拟机的监控方案中,虚拟机监控器所采用的监控策略由管理域Domain0提供,为此策略的安全性由Domain0保证.在HybridHP框架中,HybridHP自身是一个可信计算基(TCB),而被监控系统是不可信的,如果依赖被监控系统为其提供策略信息,被监控系统中的恶意模块可以修改策略信息或者任意封装恶意的策略并发送给HybridHP,那么整个监控框架是不可信的.同时,HybridHP没有管理域Domain0的概念,为此需要解决HybridHP策略信息的来源问题,以及策略信息从被监控系统的用户层输入到Hy-bridHP空间这样一条安全的策略输入路径的问题.利用一套独立的可信平台作为策略中心,其中图3HybridHP策略更新由于Hash算法(MD5、SHA等)存在安全性的问题,不可信的被监控系统可以生成一个与可能的策略文件具有相同“数字摘要”的恶意策略文件,并传递给HybridHP,但其内容只有极小的可能性也是一段策略内容,而更多的是一段乱码,或者说不是预定义的格式,如三元组(主体,动作,客体)等,对此HybridHP仍能将其识别.同时,在保证签名私钥安全不泄露的情况下,外部不可信的被监控系统无法存放了为HybridHP所准备的各种策略信息,该策略中心作为HybridHP策略信息的来源保证了策略信息源头的安全性.同时,采用数字签名加密认证的方法来解决上述的策略安全输入路径问题.对从策略中心获得的HybridHP策略信息文件使用Hash算法(如MD5、SHA算法等)计算Hash值,即做“数字摘要”,再对数字摘要用签名私钥做非对称加密(如RSA、ElGamal①等),即做“数字签名”.之后将以上的签名和策略信息文件原文一起进行封装,被监控系统在用户层将这一封装的结果通过VMX系统调用Hypercall的形式向HybridHP发送,HybridHP对接收的经过加密的策略信息进行验证.HybridHP收到的数字签名结果,其中包括数字签名和策略信息文件原文.HybridHP首先用发方公钥解密数字签名,导出数字摘要,并对策略信息文件原文做同样Hash算法得出一个新的数字摘要,并将这两个摘要进行结果比较,结果相同则签名得到验证,否则,说明策略在输入过程存在被恶意的模块修改的情况,HybridHP判定输入的策略信息为无效,不予采用.对于经过验证的策略信息文件,HybridHP还需检查其是否为预定义的策略格式,如三元组(主体,动作,客体)等.如果是正确的策略信息,那么将其加入策略库中,并进行相应的关键数据保护设置,否则忽略这些信息,这样可以确保Hy-bridHP得到的策略一定是管理人员所希望的策略,整个框架如图3所示.将恶意的策略信息进行封装并发送给HybridHP.因此,恶意策略无法破坏HybridHP的完整性,保证了策略信息的机密性、不可修改性和不可伪造性.HybridHP只提供监控的机制,采用机制和策略相分离的方式,具体的策略由外部环境提供,这给具体的策略配置提供了便利.在本文中,可以采用三①ElGmalEncryption.http://en.wikipedia.org/wiki/ElGa-Page7元组(主体,动作,客体)的格式来定义策略,如表1所示.其中表头的第2行表示客体.主体可信模块RRR/WR/WR/WR/W不可信模块RRRRRR内核RRR/WR/WR/WR/WHybridHPR/WR/WR/WR/WR/WR/WHybridHP策略主体可以分为可信模块、不可信模块、内核以及HybridHP.可信模块主要包括得到第三方(工业界)认证的各种设备驱动程序,如显卡和网卡驱动等;不可信模块主要包括上层用户的各种第三方应用程序,这些程序模块未得到有效的认证,因而是不可信的,它们对于系统资源的访问是只读的权限;被监控系统的内核部分在可信的情况下对系统资源具有大部分的权限;在HybridHP框架中,HybridHP自身作为可信基,对系统资源具有所有的访问权限.3.4HybridHP的关键技术之四:可信启动HybridHP保证了在其启动以后的时间内监控系统的安全性,但是在HybridHP启动之前的阶段无法保证系统的安全性.被监控系统中的恶意模块可以在HybridHP启动之前破坏HybridHP,或者禁止HybridHP的启动.在监控框架中,HybridHP启动之前的安全保护由基于TPM①的可信启动来负责,如图4所示.在HybridHP原型中整合了tboot②软件,通过监控启动过程中所有关键数据的完整性,能够有效地防止系统的核心组件被替换,从而保证系统启动过程的完整性,这也是HybridHP监控服务的前提.4HybridHP的验证HybridHP代码量控制在8KSLOC.本节使用Isabelle形式化辅助证明工具阐述HybridHP框架的隔离性、安全性和监控能力的验证,并进行安全分析.验证部分包括:HybridHP对“去掉页保护机制”、“修改页表”和“修改关键数据”动作的不可旁路性,HybridHP自我保护机制,以及HybridHP策略更新.4.1Isabelle的符号表示这一小节描述验证过程用到的符号表示方法.采用Isabelle系统的符号表示,这种符号表示方法与传统数理逻辑中的方式基本相同.Isabelle可以实现对计算系统的形式化描述和验证,采用的Isa-belle/HOL是Isabelle中对高阶逻辑(HigherOr-derLogic,HOL)的支持和实现.HOL作为一种类型化的逻辑系统,其类型系统与函数式编程语言(如ML、Haskell等)是类似的.类型变量可以用a,b等符号进行表示.对于类型项,可以用如x∷a定义方式.Isabelle对类型支持构造子操作,例如natlist用于定义由自然数组成的列表,intset定义由整形变量组成的集合.在HybridHP的描述和验证的过程中,对于新类型的构造主要采用3种定义方式:datatype、types和record.datatype实现对代数数据类型的构造,例如,对于寄存器类型定义为datatypereg=CR0|CR1|CR2|CR3|CR4.types表示类型的简化记号,如typesnat_set=natset,定义了新的类型nat_set,它表示自然数组成的集合类型.record用于构造带名称的元组类型,例如,对于recordpolicy=subject∷string,3.3节描述的策略信息定义为新类型policy表示策略信息,它含有3个成员:subject表示策略信息的动作主体,cond表示需要对对象设置的操作语义信息,object表示策略信息中的具体客体对象.对于record,引用成员信息可以表达为如subjectpolicy,表示引用policy中的subject成员.假设policy拥有值(|subject=HybridHP,cond=READ_ONLY,object=CR0|),①inggroup.org/developers/trusted_platform_module/specifi-②Page8更新操作可以表达为如policy(|cond··=READ_WRITE|),表示将policy中的cond成员修改成READ_WRITE,但subject和object成员保持不变.对于函数运算,使用“”符号表示函数定义域和值域的映射对应关系.函数更新操作使用如g(x··=y)方式来表达.函数在集合上的值域运算使用如gZ≡{y|x∈Z.y=gx}表达,表示函数g以集合Z为定义域的值域.4.2HybridHP对象模型HybridHP以模块的方式在被监控系统的内核空间中运行,对被监控系统的行为进行监视,根据预定义的策略信息对系统中的操作进行判断.被监控系统中其它模块不直接与HybridHP交互,并不需要知道HybridHP的存在.系统中各种动作的执行效果,可以看成是对系统状态的改变或者迁移,HybridHP在此过程中起到监控和决定的作用,如图5所示.文中使用Isabelle验证工具对HybridHP的安全性进行验证,需要对HybridHP建立模型.以对象模型的方式建立HybridHP的语义模型,将操作的主体和客体作为对象来看待,同时将系统状态之间的转换看成是操作的主客体对象以及HybridHP相互作用的结果.在这样一个场景下,在下面的章节中使用Isabelle对HybridHP对象模型进行符号化表示,并在此基础上阐述验证HybridHP对“去掉页保护机制”、“修改页表”、和“修改关键数据”动作的不可旁路性,HybridHP自我保护机制,以及Hy-bridHP策略更新行为的正确性定理.4.3HybridHP系统模型形式化描述系统执行进程标识:typesentity_id=nat.系统的执行进程使用record定义:其中pcb_struct为进程控制块PCB结构.系统的状态定义为recordstate=mem∷entity_idprocess,其中,mem表示系统中内存视图,通过进程的标识可以找到所有的进程个体;regs表示系统中的寄存器集合;pagetable表示系统的页表,是由页表项pageitem组成的集合,pageitem是虚拟地址va和物理地址pa组成的record;next_id表示系统中可用的进程标识;curr_mode指明系统目前的模式,取值如VMX_Non_Root和VMX_Root.针对要验证的动作类型定义如下:datatypeaction=WriteCR0policyset.actioncond.actionsubject.action包含对CR0、页表、关键数据和HybridHP数据信息的修改动作、策略更新动作以及空操作.HybridHP的策略集合定义为PolicySet∷系统所有的状态集合定义为S∷stateset.获得动作主体的语义函数SubjectofAction:获得动作客体的语义函数ObjectofAction:获得动作的操作语义函数CondofAction:HybridHP策略监控判定语义定义:policy_judge∷actionpolicysetbool,policy_judgeaps≡(|subject=SubjectofActiona,actionobject.policy_judge判断动作是否符合预定的策略.执行单个动作引起的系统状态转化语义函数step:stateactionstate.4.4形式化验证本节从攻击的角度来说明修改系统属性的操作,阐述HybridHP如何防范这些修改方式,并验证其正确性,同时对策略更新进行验证.定理1.CR0保护.Theorem1.s∈S.[|action=WriteCR0;(policy_judgeactionPolicySet)=False;s=stepPage9saction|]→CR0(regss)=CR0(regss).第1种攻击方式试图去掉系统的页保护机制(CR0.WP位),从而可以修改任意的内存页.由于HybridHP对CR0进行保护,这种对CR0的写操作立即引起CRA异常,HybridHP通过VMX的控制结构VMCS读取触发原因,此时CR2寄存器的值指向写数据错误的地址.通过CR3、task_struct等获得执行主体的信息,即对操作语义进行解析,并根据策略信息判断出这种操作的违法性,然后使用注入返回的方式对被监控系统进行错误警告.执行该操作前后,系统状态中CR0保持不变.定理1说明在系统的运行过程中,如果当前动作为修改CR0(WriteCR0),而在策略判断中,该动作的主体没有权限修改CR0,此时策略检测(policy_judgeactionPolicySet)无法通过(False),那么系统在该动作后状态(s)环境中的CR0寄存器保持不变.如此可以保证HybridHP监视系统中所有对CR0的操作,使得被监控系统没有禁止页保护机制的能力,即始终开启页保护机制.定理2.页表保护.Theorem2.s∈S.[|action=WritePageTa-ble;(policy_judgeactionPolicySet)=False;s=stepsaction|]→pagetables=pagetables.这种攻击方式试图通过修改页表中的页表项的只读属性,从而对系统的内存页进行修改.对于这种攻击方式,没有HybridHP监控的系统中很容易受到破坏.HybridHP框架根据策略信息对系统中的页表所在的页进行保护,因此修改页表的操作将引起pagefault异常,由HybridHP在VMXRoot模式下进行处理,此时CR2寄存器的值指向页表所在的页.定理2说明HybridHP监控对页表的修改动作,如果当前动作为修改页表(WritePageTable),而在策略判断中,该动作的主体没有权限修改页表,此时策略检测(policy_judgeactionPolicySet)也无法通过(False),那么系统在该动作后状态(s)环境中的页表项保持不变,从而保证了对页表的保护.定理3.关键数据保护.Theorem3.s∈S.[|action=WriteCritical-Data;(policy_judgeactionPolicySet)=False;s=stepsaction|]→mems=mems.Proofapply(ruleTheorem1,ruleTheorem2)第3种攻击方式对内存中的关键数据页进行修改,而这些页受到HybridHP的策略保护.定理1保证了外部攻击无法去除系统的页保护机制,定理2保证了外部攻击无法修改内存页在页表中的保护属性,因此这第3种攻击方式必然会触发HybridHP对pagefault异常的捕获,无法绕过HybridHP的监控.为此,定理3的证明过程需要借助定理1和定理2.定理1、定理2、定理3阐述了HybridHP监控的不可旁路性.定理4.自我保护.Theorem4.s∈S.[|action=WriteHybridHP-Data;(policy_judgeactionPolicySet)=False;s=stepsaction;curr_modes=VMX_Non_Root|]→(mems)HybridHP=(mems)HybridHP.Proofapply(case_tac(curr_modes)andruleTheorem1,ruleTheorem2,ruleTheorem3).最后1种攻击方式假设通过页表视图和系统模块信息找到HybridHP代码和数据以及策略信息所在的内存页,对HybridHP进行破坏.HybridHP框架的自我保护能力是通过将自身的代码段、数据段以及策略信息的内存页设置成在VMXNon-Root模式下只读来达到的.同时,系统中的恶意模块运行在VMXNon-Root模式,因此这种修改操作必然受到HybridHP的干预.为此,定理4说明,如果当前状态(s)的运行模式为受限模式(VMX_Non_Root),策略检测(policy_judgeactionPolicySet)对修改HybridHP自身信息的非法动作判断为没有相应的权限(False),那么该非法动作无法修改HybridHP的信息,即HybridHP的数据信息保持不变.我们可以看出定理4的证明需要定理1、定理2、定理3的辅助,并对系统的当前的状态模式采用分情况的证明策略case_tac来拆解.定理5.HybridHP策略更新.Theorem5.s∈S.[|action=PolicyUpdatepolicy_info|]→(validate_policy(policy_info)=True∧(policy_judgeactionPolicySet)=True→PolicySet=PolicySet∪policy_info)∧(validate_policy(policy_info)=False∨(policy_judgeactionPolicySet)=False→s=stepsNull_Action∧PolicySetΘs=PolicySetΘs).HybridHP采用数字签名加密认证的方式进行策略更新,主要是为了避免外部环境的不可信对策略信息安全性的影响.PolicyUpdate是策略更新动作,策略信息定义为policy_info∷policyset.本文对主要的加密算法(如MD5、SHA算法以及RSA、ElGamal等)和数字签名过程进行了Isabelle建模验证,并将其封装在库中,对外提供validate_policyPage10接口进行解码验证和策略信息的预定义格式(如三元组)识别.如果策略信息通过验证,那么HybridHP认为这些策略信息是可取的,并加入系统的策略集合中;如果策略信息没有通过验证(validate_policy(policy_info)=False),或者不允许恶意的策略更新动作((policy_judgeactionPolicySet)=False),那么此更新动作无法执行,以空操作Null_Action来表示.同时,策略信息保持不变,其中PolicySetΘs表示状态s下的策略集.定理5阐述了3.3节中描述的在被监控系统不可信的环境下,策略更新的安全性以及恶意策略不会破坏HybridHP的完整性.上述的定理都依赖于策略信息的安全性,即其正确性和所构造的PolicySet有关.PolicySet可以看成是3.3节中从外部环境输入的策略信息,而策略信息源头的安全性和策略更新的安全路径保证了输入到HybridHP中的策略信息的合法性,因此这些定理的正确性得到了保证.Isabelle的验证环境配置为StudioXPS9100台式电脑,2.8GHzInteli7930处理器,3GB内存,操作系统采用openSUSEDesktop11.3版本,Isa-belle采用Isabelle2009-2_bundle_x86-linux版本.整个Isabelle验证工程代码量大概在15KSLOC左右,完整的验证耗时40min左右.Isabelle的验证结果如图6所示.“Nosubgoals”说明Isabelle验证逻辑完整,不存在任何未证明的子目标.5实验和系统性能评估HybridHP对操作系统的性能影响及其监控的有效性是实验关注的重点.在传统的虚拟化监控方案中,性能评估往往关注于监控机制本身所带来的性能损失(将这部分损失的性能定量记为ε),而忽视被监控系统所获得的真实物理性能(定量记为α).我们认为在传统的虚拟化监控框架下,需要引入考虑虚拟框架(包括管理域如Domain0以及虚拟机如XEN)耗用的性能(定量记为β).因此,整个监控框架下整体的性能(定量记为θ)应该是被监控系统所获得的物理性能(α)、虚拟框架耗用的性能(β)和监控机制导致的损失性能(ε)这3个部分之和,即θ=α+β+ε,取θ的值为100%.被监控系统所得到的真实性能是关注的重点,所以在性能测试中,加入了这一个评估指标.主要从以下两个角度进行性能评估:(1)被监控系统所获得的真实性能(α);(2)监控本身所带来的性能损失(ε).为了评估HybridHP的性能,选择了几个Linux的基准测试程序,包括UnixBench①以及其它的一些真实应用软件,通过和传统的基于XEN的监控框架以及SIM的监控方案进行对比来说明HybridHP的性能.测试平台是StudioXPS9100台式电脑,2.8GHzInteli7930处理器,3GB内存.被监控系统的各种软件配置信息如表2所示.openSUSEDesktopUnixBenchKernelbuild此外,为了有效地进行性能对比,本实验还将被监控系统作为客户机,部署到传统的基于XEN的以及SIM的监控框架中.其中管理域Domain0采用半虚拟化(Paravirtualization)配置,XEN采用标准配置,软件配置信息如表3所示.名称Domain0XEN图7说明了被监控系统在3种框架下所获得的性能(α)对比,其中“解压文件”操作是面向CPU计算的,“编译”是面向I/O操作的,而UnixBench是①UnixBench.http://ftp.tux.org/pub/benchmarks/Sys-tem/unixbenchPage11一个综合测试.与传统的基于XEN的监控方案和SIM不同,HybridHP没有管理域Domain0的存在,因此在这3个对比测试中,采用HybridHP框架的被监控系统所获得性能均接近于物理主机性能.特别是在“编译”测试中,由于HybridHP不对被监控系统的I/O操作进行干预,系统的I/O性能基本没有影响.当然,HybridHP对于系统页表操作的影响,和XEN中影子页表操作对系统的性能影响类似,主要的时间开销包括:模式转换产生的上下文切换、策略搜索时间、HybridHP对异常处理的时间以及页表切换(CR3)的时间.表4说明了以创建进程操作为例,3种框架下监控机制本身所带来的性能损失(ε).可以看出,监控性能损失接近并略低于SIM的性能损失,HybridHP对被监控系统的性能影响控制在很小的范围,满足2.1节第5点对HybridHP的性能要求,这也说明HybridHP是一种保证内核完整性的轻型方案.表4创建进程操作的监控性能损失(ε)对比监控类型平均时间/μs相对性能损失/%裸机XENSIMHybridHP为了验证HybridHP监控能力的有效性,我们选择4种不同类型的rootkit攻击方式[14]:Mood-nt、a-dore-ng、Synapsys和SucKIT2,并对它们的攻击目标进行了配置,使其适应HybridHP监控框架.第1种攻击方式试图通过写CR0寄存器来设置WP为0,从而去掉页保护机制;第2种攻击方式试图修改系统的页表中某一项的只读权限,从而可以任意修改内存页;第3种攻击方式试图修改系统调用表,模拟对系统关键数据的修改;第4种攻击方式查找HybridHP所在的页,试图修改HybridHP的代码和数据页.这4种攻击代表了公认系统漏洞数据库(NVD①)目前典型的内核攻击方式.实现结果表明,HybridHP可以有效地监控和阻止这4种攻击方式.6结束语本文提出了一种用于监控内核完整性的轻型方案HybridHP,它以模块的方式在被监控系统的内核空间中实施内核完整性监控服务.HybridHP的功能由4个关键技术保证:关键数据保护、自我保护、策略更新和可信启动.关键数据保护技术对由策略信息设定的关键数据实施保护,被监控系统运行于VMXNon-Root模式,HybridHP运行于VMXRoot模式,保证了HybridHP监控的不可旁路性.HybridHP和被监控系统拥有相同的页表视图,便于获得被监控系统的操作语义,提高监控处理的效率.但HybridHP的代码和数据信息暴露于被监控系统的内存视图下,为此加入了HybridHP的自我保护功能,防止被监控系统中恶意模块对其进行破坏.HybridHP采用监控机制和策略分离的思想,本身只提供监控能力,通过策略更新的方式支持策略信息的动态修改,考虑到被监控系统的不可信问题,使用数字签名加密的技术保证策略更新路径的安全性以及策略信息的机密性、不可修改性和不可伪造性.可信启动技术提供在HybridHP对被监控系统实施监控服务之前的安全性,保证被监控系统启动过程中不会对HybridHP进行破坏.实现了Hy-bridHP的原型,并使用Isabelle对其正确性进行了证明.同时,本文对HybridHP进行了攻击测试和系统性能评估,结果表明HybridHP能有效地监控针对内核完整性的攻击,同时对被监控系统的性能影响控制在很小的范围.接下来的工作计划将HybridHP在多核处理器平台进行改进和实现,使得HybridHP运行在独立的处理器核上,加快监控处理的速度.HybridHP提供了监控内核完整性的轻型方案,如何和各种具体的安全策略模型(如BLP、Lattice和Biba完整性模型等)结合以及如何构建更加有效的安全策略以保证尽可能多的攻击动作和攻击动作序列被检测也是将来研究的一个重要方向.①NationalVulnerabilityDatabase.http://nvd.nist.gov/Page12致谢本文作者感谢所有本文的匿名审稿者,感谢您们对本文提出宝贵的意见!
