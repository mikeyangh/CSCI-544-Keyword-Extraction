Page1多核环境下编译器辅助消息驱动的动态调度于俊清1),2)余华飞1)魏海涛1)秦明康1)1)(华中科技大学计算机科学与技术学院武汉430074)2)(华中科技大学网络与计算中心武汉430074)摘要计算密集型应用中存在大量的并行性,如何优化并行处理任务,充分利用多核处理器的并行资源是当前多核编程领域亟待解决的重要问题.针对此问题,文中提出编译器辅助消息驱动的动态调度模型来优化任务调度;设计出新的编程模型DFBrook,以便更好地支持数据级和任务级的并行;采用编译器辅助的方式,由编译器产生将在运行时创建数据流图的代码;调度器对数据流图进行分析和解除任务依赖,并将任务分发到各处理核,处理核执行完任务后提供反馈信息给主控核进行调度决策.实验结果表明,调度模型具有较好的扩展性,并保持了较高的负载均衡效率和较低的通信开销.关键词多核处理器;单程序多数据;动态调度;消息驱动1引言多核处理器给数字信号处理、多媒体处理和科学计算等数据和计算密集型应用提供了大量的并行计算资源.如何充分有效地利用这些并行资源,以提高程序的性能已经成为并行程序设计领域的研究热点和难点.流编程模型作为一种高效的并行编程模型将程序的并行性显示地展现出来,它最初是为特定的流体系结构设计的,当前有一些研究者利用流编程模型对多核处理器上的流程序调度问题开展了一系列研究.流程序的调度可以分为静态[1-3]和动态调度[4-6]两种.静态调度是由编译器依据任务的计算量和数据通信时间对任务进行分配,给每个核生成任务代码;由于多数情况下任务的计算量和数据通信时间很难精确估计,从而会导致程序的性能下降.动态调度是程序在运行时,由调度器采用特定的调度策略将任务分配到处理核上;动态调度的缺陷在于,它会产生任务调度和运行时内存管理等开销.针对以上研究中存在的问题,本文提出一种静态和动态相结合的方式来实现任务调度———编译器辅助消息驱动的动态调度(Compiler-AssistedMessage-DrivenDynamicScheduling,CAMDDS).CAMDDS实现了任务的优化执行,使任务最大并行化调度,减缓了存储器和网络带宽压力.实验表明,CAMDDS获得了接近线性的加速比,各处理核任务负载基本达到均衡,调度开销较低.2DFBrook流编程语言Brook[7]流编程是斯坦福大学为Merrimac流体系结构设计的数据级并行编程模型,它含有一套完整的编程语言、编译器和运行时系统.DFBrook语言在Brook语言的基础上,加入数据流模型,将流程序以DFG的形式表示.此外,DFBrook语言提供了一组常用的流操作实现.DFBrook程序由传统的C代码和流代码组成,流代码包括流变量声明、流操作调用和kernel操作定义.2.1流(Streams)及流操作流是一连串的数据序列,是主存、kernel操作和流操作进行数据通信的载体.数据对象的集合称为流,而每一个数据对象称为流元素.流变量的类型决定了流元素的数据类型,其类型可以是传统的C语言内置类型,如char,int,float等.流变量通过Stream、Istream和Ostream等关键字声明.Istream声明输入流,输入流变量只读;Ostream声明输出流,输出流变量只写;Stream声明输入输出流,输入输出流变量可读可写.流变量的声明与C中变量的声明类似,流在进行声明时,流的相关信息如流元素的类型、流的维数、每一维的长度等是未知的.通过流操作streamRead()可以对流信息进行初始化.流操作是对数据的重新布局,如流的读入/写出以及流的分裂/融合等操作.DFBrook采用简短高效的代码实现这些流操作,以API形式供编程人员使用,方便他们对流进行管理.2.2kernel操作kernel操作是用户自定义的单程序多数据(SingleProgramMultipleData,SPMD)函数,功能相对简单,作用于一系列输入流,并产生一系列输出流.kernel操作是普通C函数的扩展,加入了kernel和out关键字.函数说明符kernel指明函数为kernel函数而有别于普通的C函数,是可以并行执行的代码片段.类型说明符out指明流为输出流,没有out修饰的流为输入流.DFBrook编译器在编译时采用弱类型检查,即只检查参数的个数是否一致,而不检查参数的类型.在kernel函数体里输入流在使用完后就会被销毁,输出流存放的是kernel函数体对输入流的计算结果.3CAMDDS调度模型CAMDDS调度模型不同于单纯的静态或动态调度模型,它首先利用编译器产生的任务信息,在程序运行时将这些信息DFG,然后启动任务调度器分析DFG,动态地将任务映射到处理核.调度方式采用集中式调度:控制核(ControlCore,CC)负责任务调度,多个加速核(AcceleratedCores,ACs)对数据进行处理,核间采用消息进行通讯.图1给出了CAMDDS调度模型的调度过程示意图.3.1DFG生成器DFBrook编译器输出的DFG生成代码专门用来在运行时构建DFG.DFG的构建使用了库函数StreamOP()和Kernel().StreamOP()负责向DFG中添加流操作节点,Kernel()负责向DFG中添加kernel操作节点.DFG生成器每执行一次Kernel()或StreamOP(),就先构建出头结点,再分析当前节Page3图1CAMDDS调度模型示意图点与已有节点间的依赖关系.并根据输出结果进行适当更新操作,保证所记录的是活跃变量最新的活跃点.3.2CC端运行时实现CC上的任务调度工作由helperthread和mainthread协同完成.helperthread使用scoreboard记录和更新处理器状态、任务状态、数据位置等信息;mainthread建立DFG并负责调度决策工作,由于流操作会调度到CC上执行,所以mainthread也会执行流操作任务.调度器的实现算法首先获取应用程序指定启用AC的个数,然后在每个AC上启动一个功能相同的守候线程,守候线程循环在LTU中取任务.在选定好要进行调度的任务后,就要设计如何存放输入和输出数据.文献[6]和CellSs[8]的处理方法是将所有的数据都存放在GM,计算开始前,输入数据从GM传输到LM,计算结束后,输出数据传回GM,AC上的LM只是计算数据的暂存点.CAMDDS调度模型采用与之不同的策略:LM不但是计算数据的暂存点,也是中间结果的存放点,后续任务可以从此存放点取数据进行后续处理.关于kernel任务的调度,本文提出一种混合调度(HybridScheduling,HS)策略,实现了目标核选择算法.HS的目标是在减小数据通信开销的同时,保证任务的快速完成,并兼顾处理核上的任务负载均衡.算法对处理核的选择分为3个优先级:(1)高优先级.选择任务队列为空且含有当前任务所需输入数据的处理核作为目标核,满足该条件的处理核多于一个,则从这些候选核中选择完成的任务总量最小的处理核.(2)中优先级.选择空闲的处理核作为候选核,再从这些候选核中选择完成的任务总量最小的处理核.(3)低优先级.选择任务队列最小的处理核作为候选核,再从这些候选核中选择完成的任务总量最小的处理核.目标核选择算法按优先级由高到低顺序找出候选处理核,然后从这些候选核中选择完成的任务总量最小的处理核作为目标核,以维持核间的负载均衡.任务中的输入数据在任务完成后,就成了垃圾数据,CC会查明这些数据的位置,并以消息的形式通知相应的ACs释放掉这些空间.3.3AC端运行时实现每个AC上的线程间相互独立,并拥有各自的栈空间和堆空间,ACs线程间采用DMA方式进行数据传输.ACs线程启动后,循环地从各自的LTU中获取任务消息并调用相应的任务函数进行处理.任务线程取到消息后,立即对消息进行解析,获取任务信息并存放在本地的任务结构中.任务中的输入参数数据可能在GM或其它ACs上,也可能在本地,若不在本地,需要启动DMA进行数据传输.输出数据根据不同情况有两种处理方式,一种是通过DMA回传到GM,另一种是暂存本地.如果输出参数中数据地址非空,则说明数据需DMA回传到指定的数据地址;否则暂存在本地,供其它ACs线程使用.对于需要暂存在LM上的中间结果,ACs线程会在本地内存开辟相应的存储单元,并以消息的形Page4式通知CC数据的存放位置.这些暂存的数据被其它ACs使用完后就成为无用数据.CC在每收到一条ACs反馈信息后会查看哪些ACs上的暂存数据需要清理,并通知相应的ACs进行垃圾清理.ACs线程在完成分配的任务后,会给CC提供反馈信息,这些信息有助于调度器对后续任务的调度选择.一个任务的结束信息解除了任务间的依赖,使后续任务得以调度.ACs尽早提供这些反馈信息可以减少调度器的调度等待时间.ACs上的计算任务完成后,ACs线程立即给CC发送反馈消息,然后再进行数据的暂存或回传工作.4实验结果本节给出了CAMDDS调度模型在Cell和Godson-T处理器上的性能测试结果.分别从模型的可扩展性和动态负载均衡两方面对模型的性能进行分析与评价.4.1模型的可扩展性图2给出了测试程序集在Cell和Godson-T上配置有不同AC数量的处理器上的加速比.实验分别对1~6个ACs配置的处理器进行测试.结果显示大部分测试程序获得了接近线性的加速比.4.2动态负载均衡图3给出了Cell处理器配置有6个SPE和Godson-T处理器配置有6个从核时,测试程序集在不同的调度策略下对应的负载均衡效率.从图中可以看出,HS策略保持了高的负载均衡,各测试程序的负载均衡率都超过了80%.在Godson-T处理器上,取得了与Cell处理器相同的实验结果.5结束语CAMDDS调度模型能将DFBrook语言编写的流程序有效地调度到多核处理器上,并保证流程序最大化并行执行;它实现了任务的粗粒度调度,充分开发了应用程序的任务级和数据级并行.在两种实验平台Cell和Godson-T处理器上,CAMDDS调度模型显示了良好的平台可扩展性,获得了接近线性的加速比,平均的负载均衡率在85%以上.但CAMDDS没有考虑容错问题.对于无容错机制的多核平台下的动态调度中,运行时依赖子任务间的容错问题是下一步需要解决的主要问题.
