Page1通过增大边际权重提高基于频谱的错误定位效率谭德贵陈林王子元丁晖周毓明徐宝文(南京大学软件新技术国家重点实验室南京210093)(南京大学计算机科学与技术系南京210093)摘要基于频谱的错误定位技术通常利用覆盖信息来求出程序中每条语句的可疑度,并将语句按照可疑度降序排序以寻找错误语句.文中对已有的基于频谱的错误定位算法进行改进,将失败测试用例的边际权重引入到可疑度计算的过程中,即针对某一特定语句,令失败测试用例的权重随着其对该语句覆盖次数的增加而增大.实验结果表明,相对于其它方法,文中提出的方法对错误定位效率有一定的促进作用,即只需检查更少的语句即可找到出错位置.关键词软件测试;程序分析;错误定位;覆盖信息1引言错误定位技术因其重要性与困难性已经受到软件工程研究者的广泛关注,许多研究者提出了各种各样的错误定位方法,但都未能很好地解决软件的Page2将会极其耗时.鉴于在程序设断点手工排查方法存在的缺点,研究者提出了一系列自动化的错误定位方法.这些自动化方法可分为静态方法与动态方法.静态方法主要是利用程序的依赖关系、类型约束等程序信息来分析程序的可能出错点.动态方法主要是通过运行测试用例得到执行轨迹、覆盖信息等来进行错误定位.近年来我们结合以前在程序分析、度量与测试方面的工作,对错误预测和定位进行了初步的研究[1-7],并在此基础上对基于频谱的动态错误定位方法进行了探讨.这既要对程序进行分析,也需要输入测试用例对程序进行测试,是对以往错误定位工作研究的一个延伸.由于实现容易,操作简单,基于频谱的错误定位是目前得到很大重视的一类自动化的动态错误定位方法:通过运行测试用例得到程序的各条语句被测试用例覆盖到的信息,然后利用覆盖信息计算出程序中每条语句的含错可疑度,并将相关语句按照含错可疑度降序进行排序以便定位错误语句.在实际的错误定位中,当测试用例个数发生变化时,它们对于语句可疑度的贡献是不一样的.针对这一情况,本文分析了在不同条件下测试用例权重对错误定位效果的影响,提出了增大失败测试用例的边际权重的错误定位方法.实验结果表明,相对于其它方法,本文提出的错误定位方法具有很好的效率.2相关工作经过人们的努力,基于频谱的错误定位方法在不断取得进步.Harrold等人实证研究了程序频谱与程序行为之间的关系,论证了通过研究运行失败测试用例得到的频谱信息与运行成功测试用例得到的频谱信息之间的差异性可为定位出错语句提供帮助[8].Renieris和Reiss等按最接近执行原则,用覆盖信息来度量语句的接近程度,根据接近程度的差异来寻找错误语句[9].对于不在差集里的错误,这种方法也可以通过构造程序依赖图来定位错误.Jones等人设计实现了基于频谱的错误定位工具Tarantula,该工具通过计算各语句成功覆盖与错误覆盖的比率来给各个语句着色,根据颜色来区分语句的可疑度[10].实验表明,Tarantula工具所用的错误定位方法的效率要优于其它很多基于频谱的错误定位方法[11].为了进一步提高基于频谱的错误定位方法的效率,人们还从多个方面对其进行了改进.一方面,人们考虑了测试用例的冗余对错误定位算法精度和效率的影响.如果测试用例选择不当,会导致冗余测试用例具有相同或类似的覆盖信息,这些冗余的覆盖信息可能最终降低错误定位的精度和效率.针对这一问题,Yu等人研究了在不影响测试结果的情况下如何约简测试用例以提高错误定位效率的问题[12].Hao等人用SAFL技术来对冗余覆盖信息进行判断并对冗余测试用例进行约简[13].此后,Hao等人又提出了三种测试用例约简策略.利用这三种策略,开发者只需要选择一个有代表性的测试输入子集来进行结果检查与错误定位[14].为了弥补自动化错误定位方法灵活性不足的缺点,Hao还提出了一个基于测试信息的交互式错误定位方法.该方法认为先前交互式步骤产生的信息可以为当前的交互式步骤提供可疑语句的排序[15].另一方面,人们还考虑了与可疑度有关的因素在计算语句可疑度时的权重.Wong等人提出,随着更多测试用例的运行,成功测试用例的权重应分阶段逐渐减小[16].他们使用函数f(k)来计算如何缩小成功测试用例权重.对f(k)做如下定义:f(k)=其中,k表示语句被成功覆盖的次数,0.1,α均是权重缩小因子.语句被成功覆盖是指输入成功测试用例时该语句被一次或者多次执行;语句被失败覆盖是指输入失败测试用例时该语句被一次或者多次执行.从f(k)的定义中可以看出,成功测试用例的权重是按区间逐步缩小的.计算语句的可疑度时,主要是根据执行该语句的失败测试用例个数的增加会增大语句的可疑度,而执行该语句的成功测试用例个数的增加会减小该语句的可疑度.因此,语句的可疑度为执行该语句的失败测试用例的权重之和减去执行该语句的成功测试用例的权重之和.此后,他们还提出失败测试用例的权重也应分区间逐步减小[17].语句的可疑度为执行该语句的失败测试用例权重之和减去执行该语句的成功测试用例权重之和.实验结果表明,Wong的上述两种方法均可在一定程度上提高错误定位效率[16-17].Wong等人考虑了测试用例权重对错误定位效率的影响,然而他们的方法也面临一些问题:首先,权重的区间不容易选择;其次,权重在各区间上的缩Page3小因子不能自动调节.3增大边际权重算法为了解决Wong等人提出的方法所面临的问题,我们提出了一种改进的基于频谱的错误定位方法.该方法通过放大失败测试用例的边际权重来计算语句的可疑度.即针对某一特定语句,令失败测试用例的权重随着其对该语句覆盖次数的增加而增大.3.1算法设计在利用频谱信息计算语句的可疑度时,执行某语句的失败测试用例和成功测试用例担当了不同的作用:失败测试用例增加该语句的可疑度,而成功测试用例减少相应的可疑度.Wong等人的方法则启发我们,当测试用例个数变化时,考虑相应的频谱权重能改变可疑度计算的精度,从而提高错误定位效率.不妨从以下几个方面来考察测试用例个数变化时权重对错误定位效率的影响.当失败测试用例个数相对于正确测试用例个数比较稀缺时,语句被失败测试用例覆盖的概率要比被成功测试用例覆盖的概率低,所以语句增加一个失败测试用例覆盖比语句增加一个成功测试用例覆盖对可疑度的影响更大.为了抵消这种语句正确覆盖与错误覆盖概率不一致时使用相同权重对可疑度的不良影响,只有让覆盖该语句的失败测试用例的权重大于成功测试用例的权重.并且随着覆盖该语句的失败测试用例个数的增加,在剩余的测试用例中失败测试用例的个数就会减少,则其再一次被失败测试用例覆盖的概率就更低.因此,下一个失败测试用例对可疑度的权重会更大.同理,当失败测试用例个数比成功测试用例个数大得多时,则失败测试用例的权重比成功测试用例的权重小,且成功测试用例的权重逐步增大.通过以上的分析可知,测试用例的权重应该逐步地增大.Wong的计算测试用例的权重恰好与我们的分析过程相反.应该把Wong算法中第k个测试用例的权重与倒数第k个测试用例的权重相调换.由于这种调换对测试用例的总权重不产生影响,因此,调换后语句的可疑度并不会变化.此外,边际增大测试用例权重可以避免区间选择不当的问题.相对于Wong的权重缩小因子,采用增大测试用例边际权重的方法有一个权重增大因子.在权重增大因子的选择上,为了能够让权重增大因子适应不同的测试集,我们让权重增大因子随着测试集中成功测试用例与失败测试用例之间比例的变化而变化.采用增大失败测试用例权重而非成功测试用例权重是因为采用增大失败测试用例权重更能体现出每增加一个失败测试用例时语句可疑度的变化.在用语句的覆盖信息表进行可疑度计算时,首先求出每条语句在n个测试用例中的成功覆盖次数以及失败覆盖次数.第j条语句在n个测试用例中的失败覆盖次数为第j条语句在n个测试用例中的成功覆盖次数为在上述两式中,i表示第i个测试用例,j表示第j条语句.当第i个测试用例覆盖了第j条语句时,Ci,j取1,否则取0;当第i个测试用例成功覆盖时r(i)取0,失败覆盖时取1;n表示测试用例个数.接着就要计算失败测试用例的权重.首先计算失败测试用例的权重因子.第j条语句的失败测试用例的权重增大因子v计算公式为v=当语句的错误覆盖次数由k增大到k+1时,其第k+1个失败测试用例的权重mw(k+1)的计算公式为其中,mw(0)=0.例总权重的计算公式:接着就可以得到覆盖第j条语句的失败测试用对于每条语句,该语句被错误覆盖的次数越多,则该语句的可疑度越大.与此相反,对于每条语句,该语句被正确覆盖的次数越多,则该语句的可疑度越小.因此,语句的可疑度应该与被错误覆盖次数正相关,与被正确覆盖次数反相关.据此,在对失败测试用例权重进行扩大后,我们提出了一种计算语句可疑度的公式:此外,语句的可疑度也可能与被错误覆盖次数成正比,与被正确覆盖次数成反比.据此,在对失败Page4测试用例权重进行扩大后,我们提出了另一种计算语句可疑度的公式:RA-2:(ff(sf(j))+0.001)/(ff(sf(j))+ss(j)).在这两个计算公式中,RA-1可以看作是Wong算法的改进.这两个公式都是保证可疑度与语句的错误覆盖次数正相关,与语句的正确覆盖次数负相关.RA-2之所以引入0.001是为了避免ff(sf(j))为零时suspect(j)都为零.3.2算法应用举例本小节通过一个实例来详细介绍如何使用增大边际权重算法来计算可疑度.语句的覆盖信息收集完后将得到一个程序覆盖信息表(如表1所示)[18].该表的一行代表一个测试用例的代码覆盖情况;除最后一列外,每列代表一条语句在各个测试用例中被覆盖的情况.如第i行j列表示第j条语句在第i个测试用例中的覆盖情况.每次测试时某条语句若覆盖到则用1表示,未覆盖到则用0表示.最后一列表示各个测试用例成功还是失败,成功用0表示,失败用1表示.实际进行语句可疑度的计算时,覆盖信息表可用一个二维数组a[ROW][Collum]来保存.当j<Collum-1时,a[i][j]表示ti与sj对应的数值,也就是运行第i个测试用例时第j个语句的覆盖情况.如a[3][4]=0表示第4条语句在运行第3个测试用例时没有覆盖到.当j=Collum-1时,a[i][Collum-1]表示第i个测试用例成功与否.a[i][Collum-1]=0表示程序执行该测试用例产生的结果正确;a[i][Collum-1]=1表示程序执行该测试用例产生的结果错误.在这个覆盖信息表s1s2s3s4s5s6s7s8s9s10rt111000110110t211110011100t301000100110t410001011111t501100001100t611011010110t710100011100t801011010110t910101011111t1001010001100t1111110011100t1210101101111t1311110010100t1400111110110t1511000011011t1600011011000t1701100010010t1811101000010t1910011101101t2011100100010中,有5个失败测试用例,15个成功测试用例.语句的成功覆盖次数与失败覆盖次数之和sf(j)+ss(j)<=20.这是因为当运行某个测试用例时,若语句j没有被覆盖到,则无论该测试用例失败覆盖程序还是成功覆盖程序,sf(j),ss(j)都不会增加.所以sf(j)+ss(j)表示的只是各条语句被覆盖的次数而非程序被覆盖的次数.使用RA-1所给的公式计算表1中各条语句的可疑度,各语句依可疑度由高至低的排列顺序为s8、s1、s5、s10、s9、s7、s6、s3、s4、s2.具体结果如表2所示.表2用放大后的语句失败覆盖次数减去语句s1s2s3s4s5s6s7s8s9s10使用RA-2所给的公式计算表1中各条语句的可疑度,各语句依可疑度由高至低的排列顺序为s8、s5、s1、s10、s9、s6、s7、s3、s4、s2.具体结果如表3所示.表3用放大后的语句失败覆盖次数除以语句成功覆盖次数与失败覆盖次数之和的方法所得到的可疑度s1s2s3s4s5s6s7s8s9s10通过对这两种方法的结果进行分析可以看出.通过放大sf(j)的方法来计算可疑度时,sf(j)对suspect(j)的影响要大于ss(j),并且sf(j)的影响程度由所有测试用例成功覆盖次数与失败覆盖次数之商v以及语句j的失败覆盖次数sf(j)来决定.4实验为了检验上述算法的效果,本文选用西门子程Page5序集作为实验对象对算法的效果进行验证①.由于之前的很多基于频谱的错误定位方法使用了西门子程序集.本实验使用西门子程序集是为了更好地与之前的错误定位方法进行比较.程序的特殊性会对实验结果产生影响,比如,当程序的分支很少时,使用基于频谱的错误定位方法进行错误定位会造成很多语句的覆盖情况一样,这将导致很多语句的可疑度一样.此时,基于频谱的错误定位方法效果将会不明显.西门子程序集共含有7个程序,每个程序均存在一个正确版本以及若干个不同的错误版本,各个程序的基本信息如表4所示.程序print_tokens词法分析程序7565204print_tokens2词法分析程序10510202replace模式代换32563274schedule优先级调度9412166schedule2优先级调度10307146tcas高度区分4117374tot_info信息估量23406139首先使用gcc3.3.1对正确版本以及各个错误版本的程序进行编译,之后使用gcov收集代码的覆盖信息,最后利用不同的错误定位算法对收集到的覆盖信息进行处理,从而得到错误定位结果.在实验中,我们将本文提出的算法与Wong等人提出的方法以及Jones等人提出的Tarantula方法进行比较.4.1实验设计本实验对西门子程序集中的7个程序的各个错误版本都进行了实验.当测试用例运行时,gcov记录测试用例运行时的语句覆盖情况.程序中永远不会执行的语句属于非执行语句.当测试用例运行结束之后,gcov将会生成记录覆盖信息的文件.把输入测试用例后各个错误版本的输出结果与正确版本的输出结果进行比较以确定错误版本每个测试用例是成功还是失败.若输出结果一样则认为输入的测试用例是成功测试用例,否则认为是失败测试用例.然后对可疑代码的覆盖信息生成一个矩阵,接着把测试结果附于矩阵的最后一列就得到一个覆盖信息表,最后对得到的覆盖信息表进行计算以得到各条语句的可疑度.当对各条语句的可疑度进行排序时,如果几条语句的可疑度一样,则他们的排序顺序将根据它们在代码中的行号来决定:行号小的则其可疑度排在前面;行号大的则其可疑度排在后面.因为不同可疑语句的行号在与其可疑度相同的语句的行号排序中可能排在任何的位置,即不同可疑语句的位置是随机的.有的可疑语句可能排在前面,有的可疑语句可能排在后面,有的可疑语句可能排在中间.所以在可疑语句比较多时,即使根据行号来排序也还是会得到很好的随机效果.本实验并不比较各种算法的最好情况与最坏情况.使用最好最坏情况的好处是可以根据最好最坏情况的差别大小,来了解算法的区分度.若最好最坏情况的差别较大,则说明错误语句与很多正确语句的可疑度一样,若最好最坏情况的差别较小则说明较少的正确语句与错误语句的可疑度一样.然而使用最好与最坏情况进行比较只在理论上可行,在实际中是不可行的.因为在未知哪条语句存在错误的情况下,确定存在错误的语句在可疑度一样的几条语句中排在最前还是最后是不可能的.由于代码的错误是未知的,当使用本实验的排序方法时,可疑度一样的错误语句与正确语句的排序先后应是随机的.即错误语句可能位于最前,也可能位于最后,还可能位于其他的位置.使用本实验的排序方法是为了使得结果更好地接近平均情况.在对语句的可疑度进行排序后,就得出每个算法在进行错误定位时所需查找的执行语句个数a(a表示有a-1条正确语句的可疑度排在错误语句的可疑度前面).假设该版本的总执行语句数为b,则通过计算(a/b)×100%得出进行错误定位时所需查找的执行语句数占总执行语句数的百分比,即排查效率.把0~100%进行离散化得到20段区间.每个区间的百分数表示排查效率(a/b)×100%在该区间上的个数占总个数的百分比.很明显,对于各个程序的各个版本来说,(a/b)×100%越小,则所使用的算法在进行错误定位时效率就越高.4.2实验结果本实验使用西门子程序集提供的测试用例来进行测试.为了更好地比较各个算法的效率,在测试用例的选择上,我们从testplans-bigcov,testplans-bigrand提供的一系列测试用例集里各选取一个测试用例集作为输入.此外,我们还选择了西门子提供的所有测试用例集universe作为输入.testplans-bigcov里的测试集是从测试总集中选出来的一个子①TheSiemensSuite.January2007.http://www-static.Page6集,这个子集能够覆盖所有的分支路径,但覆盖每个分支路径上的测试用例个数是随机的.testplans-bigrand是一个测试用例个数与testplans-bigcov相等但测试用例属于随机选取的测试用例集.对语句可疑度进行排序时,给不被覆盖的语句的可疑度赋予一个极小的值,以使被覆盖语句的可疑度大于不被覆盖的语句可疑度.各个算法的实验结果如图1~图3所示.其中,我们将Wong等人在文献[16]中所提出的缩小语句成功测试用例权重的算法记为Wong-3,将Wong等人在文献[17]中提出的既缩小成功测试用例的权重也缩小失败测试用例的权重的算法记为Wong-4,而RA-1、RA-2则分别表示本文所提出的两种可疑度计算公式.图15个算法在testplans-bigrand测试用例集中的效率比较图图25个算法在testplans-bigcov测试用例集中的效率比较图图35个算法在universe测试用例集中的效率比较图根据图1所示结果,RA-1计算公式得到的效率最高,Wong-3次之,之后是RA-2,Tarantula,Wong-4.根据图2所示结果,使用RA-1计算公式得到的效率最高,Wong-3次之,RA-2,Tarantula以及Wong-4的两个算法相对较差.从图1、图2中我们可以发现一个异常的情况,根据图3所示结果,Wong-3效果最好,RA-2次之,之后依次是Tarantula,RA-1,Wong-4.西门子实验的结果表明,与缩小覆盖语句的失败测试用例权重或者同时缩小覆盖语句成功测试用例和失败测试用例权重的方法相比,通过放大覆盖语句的失败测试用例权重的方法对错误定位效果有一定的促进作用.当用例数增加,并且有较多冗余时,我们的方法效率没有提高.4.3实验讨论本文算法的有效性是通过西门子实验来验证的.由于西门子程序集的各个程序只有几百行的代码,因此我们的技术在更大的程序里进行错误定位是否也会得到很好的效果还有待进一步的研究.在基于频谱的错误定位中,采用的都是对覆盖信息进行处理得出语句的可疑度.如果失败测试用例的个数太少,很容易造成很多语句具有相同的失败覆盖次数与成功覆盖次数.这将会导致错误语句与很多正确语句具有相同的可疑度,并最终降低各语句可疑度的区分度.因为本文算法的核心思想是增大失败测试用例的权重,所以失败测试用例对实验结果的影响很大.在这种情况下,失败测试用例权重因子的选择就显得至关重要.由于成功测试用例对可疑度也是有影响的,在考虑失败测试用例的权重因子时,成功测试用例的影响也要进行相应的考虑.有鉴于此,我们选择的权重因子是成功测试用例个数与失败测试用例个数的比率.这说明权重因子随着成功测试用例与失败测试用例比率的增大而增大,随着成功测试用例与失败测试用例比率的减小而减小.这与我们在第三节中对成功测试用例与失败测试用例的出现概率对权重影响的分析是相一致的.这样还可以使得权重因子随着测试用例集的变化而自动变化.在使用覆盖信息来计算语句的可疑度时,我们不仅要知道测试用例集中成功测试用例与失败测试用例的个数,还要知道每条语句被成功覆盖的次数与被失败覆盖的次数.并且每条语句被成功覆盖的次数与被失败覆盖的次数未必与测试用例集中成功测试用例与失败测试用例的个数相等.在多错误版本中,不同的失败测试用例可能覆盖不同的错误语句.这时即使失败测试用例的个数比较多,覆盖每条Page7错误语句的失败测试用例个数也可能会很少.而我们的权重因子是根据测试用例集中成功测试用例个数与失败测试用例个数的比率得出的,因此,在多错误版本里我们的权重因子可能会失效.5结论本文对基于频谱的错误定位技术进行了研究,将失败测试用例的边际权重引入到可疑度计算的过程中,即针对某一特定语句,令失败测试用例的权重随着其对该语句覆盖次数的增加而增大.在这一理论的基础上,本文提出了两种新的错误定位计算公式RA-1和RA-2.实验结果表明,与缩小覆盖语句的失败测试用例权重或者同时缩小覆盖语句成功测试用例和失败测试用例权重的方法相比,通过放大覆盖语句的失败测试用例权重的方法对错误定位效果有一定的促进作用.在未来的工作中,我们还将致力于对本文提出的算法进行改进.一方面,在计算边际权重时,有必要考虑其它的权重因子,并对其效果进行进一步的研究和检验.另一方面,通过实验我们发现测试用例数量的增多对查找可疑语句的效率可能会有反作用,因此,我们试图通过对测试用例进行约简来提高查找可疑语句的效率.
