Page1一种求解输运方程的并行调度算法周涤宇1)刘杰2)1)(西安卫星测控中心西安710043)2)(国防科学技术大学计算机学院长沙410073)摘要高效并行扫描问题是调度问题的子集,调度问题是NP完全问题.针对输运问题的特点,如何按特定的计算次序调度本地网格单元,以保证最佳的计算与通信性能是一个难度很大的问题.文中设计了一种基于局部深度优先的优先级(PDFDS)算法,该算法具有局部性、通信量小、优先级队列好等特点.将PDFDS算法应用到求解二维粒子输运方程的程序中,与现有的调度算法相比,新算法具有更好的并行计算效果,对于大规模计算问题,可以扩展到1024个处理器,相对于64个处理器的并行效率达到了96%.关键词输运方程;并行调度;优先级算法;非结构网格;并行算法1引言输运方程[1]是核科学与工程应用中的一类重要的偏微分方程,通过大量微观粒子的输运,确定粒子在几何空间、能量、速度相空间和时间上的分布.由Page2目前典型的求解非结构网格上输运方程的并行算法有:Plimpton、Hendrickson、Burns和Mclendon[2]设计的三维Cartesian坐标系下的基于网格区域分解的并行流水线Sn扫描算法;莫则尧[3]通过分析二维柱几何Lagrange坐标系非结构网格上间断有限元Sn方法的内在并行度,提出的相应的并行流水线Sn扫描算法.这两种算法具有一定的相似性,进行结点调度时没有考虑网格点间复杂的数据依赖关系.然而本地网格单元的执行顺序会直接影响并行算法的性能.所以为了获得高的并行计算性能,必须有好的调度算法.使用对每个结点赋优先级的方式来确定结点的调度顺序是现在比较通用的一种方法.在可调度结点集合当中,优先级大的结点先调度,优先级小的结点后调度,所以调度问题转化成了优先级算法的设计问题.当前,比较典型的优先级策略有最晚完成时间策略[4]、最晚开始时间策略[5]、b-level策略[6]、BFDS策略[6]、DFDS策略[6]、DFHDS策略[6]、For-ward-Backward策略[7]、最短内部边界路径策略[8]、多优先级策略[9-10]、顺逆交替迭代调度算法[11]等.但是,以上的策略和算法都需要使用到全局结点的信息,当问题规模很大、使用处理器数量很多时,这些策略和算法的成本开销将会急剧增加,严重影响并行算法的并行性能.本文在DFDS策略的启示下设计了一种基于局部深度优先的并行优先级(PDFDS)算法,与现有的优先级算法进行比较,并行计算性能有较大幅度提高.本文第2节介绍输运调度模型;第3节分析几种基于深度优先的优先级算法;第4节给出一种局部深度优先的并行优先级(PDFDS)算法;第5节对算法进行性能分析和预测;第6节对算法进行测试对比;第7节进行总结.2输运调度模型求解离散输运方程的标准迭代方法是源迭代法,交替求解局部的散射源和全部流驱动碰撞的变换算子.离散纵标(Sn)方程由输运方程导出,流驱动碰撞算子通常由“扫描”方法变换而来.在每次扫描中,对离散纵标集中的每个方向,流驱动碰撞算子通过网格上的每个空间局部单元以特定的顺序进行求解.而顺序依赖于网格点的相互作用,对于某个特定的角方向,下游的网格点需要等待上游网格点计算结果.整个的计算过程,就像一个平面波在向前传播,“下游”依赖“上游”的计算.分配到不同处理器的网格点,如果存在上下游的依赖关系,就需要通信,通信量大,同时下游处理机需要等待,这种特定的顺序使得数据具有强依赖性.如图1所示,网格D的求解依赖于它的上游网格D1和D2,保证在每个网格计算时,其进流边是计算区域的外边界的一部分,或者是已计算过的邻网格边界.输运问题中网格计算顺序的数据依赖关系可以抽象成一个带权有向图G=(V,E,狆,W).这个有向图一般是无循环图,即DAG图.图中的结点集V={1,2,…,n}代表所有网格单元的计算任务,图中的有向边集合E={(i1,j1),…,(im,jm)}代表网格间所有的数据依赖关系.非负向量狆称为结点权重向量,元素pi代表结点i的时间开销;非负矩阵W称为有向边权重矩阵,元素wk,j表示有向边(k,j)的时间开销.如果有向边(k,j)∈E,则称该有向边与结点k,j相关联,结点k是该有向边的前端点,结点j是该有向边的后端点;并称结点k是结点j的直接前驱,结点j是结点k的直接后继.没有直接前驱的结点称为源点;没有直接后继的结点称为汇点.定义有向路经为一组结点序列(u1,u2,…,us),满足(ui,ui+1)∈E,任意1i<s.如果图G中存在从结点k到结点j的有向路经,则称结点k是结点j的前驱,结点j是结点k的后继.路径长度指路径上包含的所有结点和有向边的权重总和.在并行调度模型中,将有向图G划分成P个互不重叠的子图,分别分配给P个处理器.如果结点i属于处理器p,则称处理器p是结点i的属主,结点i是处理器p的本地结点.如果结点i的前驱(后继)结点j和结点i同属一个处理器,则称结点j是结点i的本地前驱(后继)结点.如果有向边(k,j)两端结点k和j分属不同的处理器,则(k,j)称为截弧;如果有向边(k,j)两端结点k和j属于同一个处理器,则(k,j)称为内部弧.一般来说,内部弧的权重总是设为0,而截弧的权重总是大于等于0.Page3在使用并行流水线Sn扫描算法[3]求解输运方程的过程中,某一时刻任一个处理器可能没有结点可供调度(空闲),也可能有一个或多个结点可供调度.这些可供调度的结点是指那些其直接前驱结点已经全部计算完的结点,或者是进流边界上的结点.调度算法的作用主要是在处理器有多个结点可供调度时选择“最”合适的结点进行调度,从而最大限度地减少所有处理器总的空闲时间,提高扫描算法的并行效率.3优先级调度算法分析优先级调度算法是给每个结点按某种规则设置一个优先级,在结点调度时依照优先级的大小来确定调度的先后顺序.现有的并行流水线Sn扫描算法[3]主要使用的是追尾法(补尾法),即给每个结点设相同的优先级,这样结点将按照满足调度要求的先后顺序进行调度.追尾法的算法成本开销很小,但是它没有考虑网格点间的数据依赖关系,所以很难得到较高的并行效率.下面是几种基于深度优先的优先级算法.b-level优先级算法.b-level优先级设为源点最大(MAX),源点的直接后继次之,依次类推,将整个DAG图划分为n个等级.图2为一个简单的b-level等级示意图,取MAX等于10,结点旁边的数字代表该结点的b-level等级.BFDS优先级算法.对任意一个结点,如果它有不属于自己同一个处理器的后继结点,设这些结点集为V,则令该结点的优先级等于V中结点最大的b-level等级;如果V为空集则将该结点的优先级设为0.DFDS优先级算法.对任意一个结点,如果它有不属于自己同一个处理器的直接后继结点,设这些结点集为U,则令该结点的优先级等于U中具有的最大b-level等级加上一个较大的常数,这个结点的前驱结点的优先级设为比它小一点的值;如果结点没有不属于自己同一个处理器的后继结点,则将该结点的优先级设为0.DFHDS优先级算法.对任意一个结点,如果它有不属于自己同一个处理器的直接后继结点,设这些结点集为U,则令该结点的优先级等于U中具有的最大b-level等级乘以一个较大的常数,这个结点的前驱结点的优先级设为比它小一点的值;如果结点没有不属于自己同一个处理器的后继结点,则将该结点的优先级设为0.BFDS、DFDS、DFHDS算法都是在b-level算法的基础上发展的,所以这4种算法都必须求得每个结点的b-level等级.文献[3]中给出的追尾法、弧度法和坐标法并行性能相近,为叙述方便,我们仅对追尾法展开说明.使用b-level、BFDS、DFDS和DFHDS4种算法以及追尾法分别求解二维中子输运方程,使用2~64个处理器对相同规模的问题进行计算,图3给出的是分别使用b-level、BFDS、DFDS、DFHDS算法所用的并行计算时间除以使用追尾法所用的并行计算时间.在图3中,实线在虚线上方,说明对应算法的并行性能比追尾法差;实线在虚线下方,说明对应算法的并行性能比追尾法好.图3中4条实线相差不是很大,说明它们的并行性能差不多,而且每种算法与追尾法计算时间的比值随着处理器数量的增加呈增大趋势.当处理器数量少于16时,b-level、BFDS、DFDS和DFHDS算法的并行计算时间均要少于追尾法,但是当处理器数量大于32以后,4种算法的并行计算时间都比追尾法的要大.分析原因是,4种算法优先级的计算都要求出每个结点的b-level等级,每个结点b-level等级的求解都要遍历每条源点到该结点的有向路径,而有向图的各个子图被分配Page4到不同的处理器,算法的通信开销将随着处理器数量的增加变得十分庞大.所以在处理器数量较多的情况下,使用b-level、BFDS、DFDS和DFHDS算法的并行性能要低于追尾法.根据以上的测试分析,我们可以得出如下结论:(1)在较少处理器上运行时,b-level、BFDS、DFDS和DFHDS算法的并行性能要优于追尾法;(2)在较多处理器上运行时,追尾法的并行性能要优于b-level、BFDS、DFDS和DFHDS算法,且随着处理器数量的增多,后4种算法的并行性能将越来越低.所以b-level、BFDS、DFDS和DFHDS算法不适宜用来进行可扩展并行计算.iii)对于x(j)的本地直接前驱结点x(j),将其优先级priority(x(j))设为priority(x(j))-1;如果x(j)图4局部深度优先并行优先级(PDFDS)算法算法第6步的nstep是一个迭代控制因子.比如当nstep取0时,图4中的第4、5步将不会执行,各处理机间没有通信;当nstep取1时,截弧后端点的优先级可以累加到截弧前端点的优先级上;当nstep取2时,在第一次迭代的基础上,将截弧后端点的优先级累加到截弧前端点的优先级上;当nstep大于2时,以此类推.nstep取得越大,算法的成本开销(主要是通信开销)就越大,当nstep取为P-1时(P为处理机台数),图4的第4步和第5步将迭代P-1次,相当于进行了一次全局优先级的串行计算.所以P-1为nstep的上限,0为nstep的下限.为了减少算法的成本开销,一般依据并行机的性能选择nstep值,并行机通信延迟相对越大,则nstep取值4基于局部深度优先的优先级(PDFDS)算法我们将结点到汇点的有向路径中最长的一条的路径长度称为该结点的深度.b-level、BFDS、DFDS和DFDHS都是优先调度深度大的结点,由上一节的分析我们知道,这些优先级算法在处理器数量很多的情况下并行性能较低.结合深度优先算法和追尾法的优点,综合考虑算法的成本开销和并行方式,我们设计了一种局部深度优先的并行优先级(PDFDS)算法.该算法的具体描述如图4所示.越小,在通信延迟很大的机群可将nstep取为0.图5为PDFDS算法求解过程的一个简单实例,其中MAX设为10,nstep取1.对于图5(a)的初始有向图,延虚线分成两个子图分属处理器P0和P1;图5(b)为有向图各结点的局部b-level等级,需要注意的是,结点7、8、9、10的局部b-level等级分别为10、9、9、9,而它们在全局有向图中的b-level等级分别为9、7、8、8,其余结点的局部b-level等级和全局b-level等级相等;在图5(c)中,汇点5、8、9、10的优先级被置为零,结点8、9、10的本地直接前驱结点6和7的优先级被置为1,结点5的本地直接前驱结点3由于有非本地后继结点没有改变优先级;在图5(d)中,结点7、8、9将各自Page5图5PDFDS算法求解过程示例的优先级发送给它们的非本地直接前驱结点,使结点3、4、2的优先级分别等于MAX加上结点7、8、9的优先级,结点1为结点2的本地直接前驱结点,所以结点1的优先级等于结点2的优先级减1.5算法分析PDFDS算法不仅考虑了结点的本地深度(图4的第1~3步),而且考虑了结点与相邻处理机的局图6追尾法与PDFDS优先级比较设所有结点的权重相等,所有弧的权重为0.图7为使用两种优先级进行结点调度的计算序列.可以看到图7的(a)中两个处理器各有一个时间步没有计算任务,造成处理器空闲,而使用PDFDS算法可以避免这个时间步的空闲(见图7的(b)).由图7看到,PDFDS算法可以产生比追尾法更好的并行计算序列,但是PDFDS算法的成本开销(包括计算开销和通信开销)比追尾法要大.怎样权衡算法成本和算法效果,下面对算法的成本开销进部深度(图4的第4、5步),将截弧前端点的优先级按截弧后端点优先级的大小增加,可以使扫描计算时尽早计算需要通信且在相邻处理机其直接后继深度大的结点,将截弧前端点的计算结果尽早传递给截弧后端点,减少截弧后端点属主的等待时间,从而提高并行效率.法和追尾法计算之后的优先级见图6.以图5(a)为例与追尾法进行比较,PDFDS算行分析.假设每台处理机上平均分配了M个结点,将空间方向离散为MS个方向,对某一个方向i(i=1,2,…,MS),需要与相邻处理机平均通信ηi次,平均通信长度为τ.设PDFDS算法第1步求解本地所有结点局部b-level值的开销为γi个计算时间步;PDFDS算法第2步开销为M个计算时间步;设PDFDS算法第3步开销为κi个计算时间步;第4步至第5步的通信开销为(α+τ×β)×ηi个时间步,其Page6中α为消息启动时间,β为单位消息在网络上的传输时间,设第5步的计算开销为λi个时间步.则PDFDS算法在每台处理机上的平均成本开销为∑i追尾法的成本开销为{γi+M+κi+[(α+τ×β)×ηi+λi]×nstep}其中MS为总方向数.式(1)中γi、κi、λi的大小由有向图结构、区域划分以及负载平衡等因素决定,一般情况均远大于M.所以由式(1)与(2)对比可以看出,PDFDS算法的成本开销要大于追尾法的成本开销,在多处理器上运行时,其通信开销占据了一定的比重.在程序的实际运行过程中,影响并行计算性能的因素不光只有各处理机网格单元的计算顺序,如果优先级算法的成本开销过大同样会造成并行计算性能的下降.所以,使用PDFDS算法必须在并行扫描计算时产生比它的成本开销更大的收益才有实际价值,也就是说使用PDFDS算法产生的计算序列要节约比优先级算法成本开销更多的扫描计算时间.6测试结果及分析基于MPI设计实现了PDFDS算法,用于求解基于非结构网格的二维柱坐标非定常多群粒子(中子和光子)输运方程.测试平台为一台MPI点点延迟时间为5μs的集群系统.测试用例采用中子输运实际应用问题,S4角方向,基于二维非结构网格离散,根据测试目的的不同,取不同的空间网格点和能群.为了确定PDFDS算法中nstep在特定实验环境的较佳取值,我们在3个不同问题规模N1、N2、N3上,分别取不同的nstep值进行了测试.图8给出了归一化后的测试结果,即在同一问题规模上,对不同nstep取值的计算时间除以nstep取为0时的计算时间得到的值Ratio.其中N1为1024个网格单元,N2为4096个网格单元,N3为65536个网格单元.从图8可以看出,在3条曲线上,nstep取1或者2相比nstep取其它值能得到更好的并行性能.nstep取得越大,PDFDS算法中的通信开销越多,nstep达到一定值以后,PDFDS成本开销过大导致并行性能下降.图8使用的是64个CPU进行的测试,若将nstep取最大值(63),PDFDS算法就相当于DFDS算法,但很明显DFDS算法在这种情况成本开销太大,严重影响了并行算法的性能.所以在本文实验条件下,将PDFDS算法中nstep取1或者2.为了比较PDFDS算法与深度优先算法以及追尾法的并行性能,我们选取了b-level、BFDS、DFDS和DFHDS4种优先级算法与PDFDS算法和追尾法进行了对比测试,使用4~128个处理器在4096个非结构网格单元上测试了150个时间步长,测试结果见图9.Page7从图9可以看出,b-level、BFDS、DFDS、DFHDS和PDFDS算法在处理器数量少于16时并行性能与PDFDS算法差不多,但当处理器数量大于32以后,4种算法的并行性能明显下降,比PDFDS算法和追尾法都要差.这是由于b-level、BFDS、DFDS和DFHDS算法在较多处理器上运行时,算法的成本开销太大导致了并行性能的下降,所以b-level、BFDS、DFDS和DFHDS算法不适合用来进行可扩展并行计算.从图9中还可以看出,虽然使用PDFDS算法在4~128个处理器上的程序运行时间均要少于追尾法,但随着处理器台数的增多,性能提高的比率逐步减少,两条曲线有相交的趋势.这是因为随着处理器台数的增加,分配到每台处理器上的网格点逐步减少,上下游关系较简单,调度算法的队列组合的种类减少,性能趋于一致.为了更准确说明PDFDS算法在大规模调度问题上的优势,突出扫描调度算法的计算效果,我们将群数降为1,处理器台数取为256,对追尾法、弧度法、坐标法和PDFDS算法进行了对比测试,图10给出了测试结果.从图10可以看出,当单个处理机上的网格点数较少时,PDFDS算法的并行计算时间略长于追尾法、弧度法和坐标法,随着网格点数的增加,PDFDS算法的并行计算时间比追尾法、弧度法和坐标法显著减少,网格点越多,性能提高越明显,说明PDFDS算法更适合求解大规模计算问题.为进一步测试PDFDS算法对求解实际应用问题的可扩展性,我们把PDFDS算法移植到我们提出的一种改进的求解输运方程的并行Sn扫描算法[12]程序框架中,将计算问题的群数取为24群,网格单元取为65536个,S4角方向,表1给出测试结果.测试结果显示,并行算法具有良好的并行加速效果,扩展到1024个处理器时,相对64个处理器的并行效率达到96%,说明PDFDS算法具有很好的适应性.CPU台数运行时间/s相对加速比相对并行效率6415121.00128753.12.01256342.84.41512172.58.76102498.4715.357结论通过前面的分析和测试我们知道,包括b-level、BFDS、DFDS和DFHDS算法在内的深度优先策略不适合进行可扩展并行计算.而我们设计的局部深度优先的优先级(PDFDS)算法具有局部性、通信量小、优先级队列好等特点.通过性能分析与测试,可以看出基于非结构网格区域分解,PDFDS算法使用结点的局部深度作为结点调度的优先级,与现有的优先级算法比较,可以获得更加合理的并行计算序列,具有更好的并行计算效果,对于大规模计算问题,可以扩展到1024个处理器,相对于64个处理器的并行效率达到了96%.此外,本文给出的PDFDS算法可以用于非结构网格高维输运问题的并行计算,并且需要进一步验证对不同非结构网格划分问题的有效性.致谢本文工作得到北京应用物理与计算数学研究所莫则尧研究员的大力支持和帮助,在此表示感谢;感谢阳述林研究员、魏军霞等同志与作者的有益讨论和宝贵意见!
