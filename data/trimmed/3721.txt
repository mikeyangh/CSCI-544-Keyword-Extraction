Page1时态规划中基于CSP技术的时态约束方法伍丽华1),2)陈蔼祥3)姜云飞1)边芮4)1)(中山大学软件所广州510275)2)(中山大学教学实验中心广州510275)3)(广东商学院数学与计算科学学院广州510320)4)(广东商学院公共管理学院广州510320)摘要在规划图框架下,定义了动作图,并进一步扩展为时态动作图,使之能体现处理具有时间资源约束的时态规划问题中的时态信息.在此基础上,提出一种对时态信息进行表示与管理并且能够进行时态约束推理的时态一致性赋值方法,利用约束可满足问题(CSP)技术对时序约束进行表示和处理,包括过滤、约减及时态信息的一致性检验,使时态推理技术能更好地应用于时态规划的求解过程中.最后,给出一个基于时态规划图的遗传规划算法GP-td,通过对国际智能规划大赛提供的Satellite规划领域问题进行实验.结果表明:该方法能够有效地提高大规模时态规划问题的求解效率和求解成功率.关键词时态动作图;时态推理;CSP技术;一致性时态赋值;遗传规划算法.1引言智能规划是对周围环境进行认识与分析,根据系统要实现的目标,对若干可供选择的动作及所提供的资源限制施行推理,综合制定出实现目标的动作系统.时间和资源约束规划是智能规划面向实际应用而产生的一种规划.在现实世界中,许多规划问题受外部事件和动态信息的影响,时态和资源约束规划问题中存在着大量能够并发执行的持续性动作,这些动作的执行会消耗相应的时间和资源,同时这类规划问题通常希望规划目标能在尽可能短的时间内实现[1].因此,为表示实际规划问题,需要对时态信息以及资源信息进行有效表示,并且规划动作的执行需要考虑时间与资源耗费等多种因素[2].对时间与资源约束规划的研究不仅具有理论价值,在实际应用上也具有重大的现实意义.近年来,研究者们对基于时态和资源约束规划的课题进行了深入研究,并取得了许多重要的成果.国际智能规划大赛中,时态与资源约束规划是一个很重要的领域,参赛的规划系统越来越多,其中LPG规划器[3]、Metric-FF规划器[4]和SGPlan[5]是众多能处理时态和资源约束规划的规划系统中,表现突出且性能较好的规划器.但目前现有的时态规划算法的效率以及规划过程中时态推理的技术及其运用都难以令人满意[6].例如LPG规划器,它是一个基于规划图、采用局部搜索方法的规划系统,能有效地处理动作带持续时间和存在数值表达式的规划问题.虽然以LPG为代表的局部搜索技术被认为是非常有效的领域无关的规划技术,但从实验结果来看,使用局部搜索技术的规划器,性能均不同程度地受到局部极小值的影响[7-8],局部搜索是为了避免完全搜索的组合爆炸,虽然能找到解时求解的效率非常高,但局部搜索方法是不完备的,有解存在时它可能找不到解.因此LPG规划器不得不采用许多其他策略,比如提高启发式估值的精度、以一定的概率随机选取邻近节点,以及设立禁忌搜索列表等办法,以试图摆脱局部极小值的影响[7-8].FF是采用启发式估值的前向状态空间搜索的规划器,Metric-FF是FF的扩展版本,增加了对Metric的处理,但在处理Temporal时表现较弱.SGPlan是基于子目标分解技术的规划器,它不对数值信息进行专门处理,数值的处理完全依赖于底层所采用的Metric-FF规划器.针对时态规划领域普遍存在的问题,本文在时态推理技术和时态规划问题的求解方法两个方面进行了研究.第2节介绍规划图、时态动作图及时序约束;第3节讨论时态信息的表示,并提出一种时序约束推理方法;第4节研究时态信息的过滤和时态赋值的一致性检验方法;第5节给出基于时态规划图的时态规划算法;第6节总结全文.2规划图与时态动作图图规划方法是智能规划中一种很重要的规划技术,图规划方法简单地说,就是对给定规划问题,首先构造规划图,然后在规划图上反向搜索可能的规划解.图规划是以规划图为数据结构的一种规划方法,传统规划领域中难以处理的动作和状态之间可能存在的互斥关系均能简洁地表示在规划图上[9-10].此外,通过构造规划图,不仅实现了规划领域中所有动作的例化,而且给出了整个规划解的搜索空间.关于规划图与时态动作图的概念,在文献[11]中已有介绍,为保持内容的连贯性,这里对相关概念作简要介绍.2.1规划图与动作图规划图是指包含两类节点(命题节点和动作节点)、三类边(前提条件边、添加效果边、删除效果边)的有向无环分层图.规划图中命题层和动作层交替出现,命题层包含一些命题节点,动作层包含动作节点.在第t层的动作节点代表时间步t所有可能的规划动作,事实节点表示的命题对应于时间步t被例化的一个或多个动作的前件,或者是时间步t-1被例化的一个或多个动作的效果.规划图第0层是命题层,包含规划问题初始状态的所有命题,规划图的最后一层应包含规划命题的目标状态集合.定义1(动作图A).给定规划问题P,其对应的规划图为G,动作图A为满足下列条件的规划图G的一个子图:如果规划图G中一个动作节点a在动作图A中,则规划图G中对应与动作a的前件节Page3点和正负效果节点亦在A中,而且规划图G中与a相连的边亦在A中.定义2(规划图/动作图的阶).G/A为一规划图/动作图,假定该规划图/动作图有k个动作层,则该规划图/动作图的阶为k,记为‖G‖=k/‖A‖=k.定义3(完全动作图).给定规划问题P,G为对应于P的规划图,该规划图的阶为k.Af为一动作图,若Af与规划图G同阶,即‖Af‖=‖G‖=k,称这样的动作图Af为规划图G的完全动作图.下面我们将扩展经典规划图和动作图,使之成为能够表示规划中时态信息的时态动作图.2.2时态动作图定义4(时态动作图).时态动作图是一个三元组TA=〈Af,τ,Ω〉,其中:(1)Af为一完全动作图;(2)τ为Af中命题节点和动作节点的时态赋值,其中命题节点f的时态值Time(f)表示相应命题[f]最早成立时间,动作a的时态值Time(a)表示执行相应动作[a]的最早终止时间;时态动作图上的时序约束包含两种类型的序约(3)Ω为Af中动作之间的序约束关系.由定义4可知,时态动作图是在动作图的基础上增加时态赋值τ和序约束Ω.之所以在时态动作图上显式地增加序约束,是为方便在时态动作图上进行时序推理.束:因果(casual)序约束和互斥(mutex)序约束.定义5(因果序约束).a、b为两个规划动作,且a∈Af,b∈Af.如果p∈Add(a)且p∈Pre(b),则称a与b存在因果约束,显然,规划动作a必须先于动作b,由这种因果约束确定的序关系称为因果序约束,记为a∝Cb.定义6(互斥序约束).a、b为两个规划动作,且a∈Af,b∈Af.level(a)、level(b)分别表示动作a、b在动作图Af中所在的层数.如果a、b是互斥动作,且level(a)<level(b),则称a与b之间存在互斥序约束,记为a∝Eb,此时a∝Eb∈Ω.如果a、b是互斥动作,且level(a)=level(b),同样,a与b之间存在互斥序约束,记为a∝Eb或b∝Ea,此时a∝Eb∈Ω或b∝Ea∈Ω.为简洁起见,将因果序约束和互斥序约束统一表示成a∝b,同时约定∧∝a表示不存在有序约束(因果序约束或互斥序约束),不要求某动作必须在动作a之前发生.3时态动作图的CSP模型3.1CSP概述在本节中,我们将利用约束可满足问题(Con-straintSatisfactionProblems,CSP)的方法和技术,对时态规划问题中的动作与事实的时态关系加以表示和处理.个三元组P=(X,D,C),其中:定义7(CSP)[9-10,12].在有限域上的CSP为一X={x1,…,xn}是n个变量的有限集;D={D1,…,Dn}是变量的有限域的集合,xi∈Di;C={c1,…,cm}是约束的有限集,一个k元约束cj限定了k个变量的可能取值,其中这k个变量是X的子集{xj1,…,xjk}X.cj定义为一个笛卡尔乘积的子集:cjDj1×…×Djk,即对于这些变量,约束允许可取值的元组的集合为{(vj1,…,vjk)∈Dj1×…×Djk|(vj1,…,vjk)∈cj}.定义8(一致的CSP)[9-10].CSPP(X,D,C)的一个解是一个n元组σ={v1,…,vn},使得xi∈Di,且变量值xi=vi,1in,满足C中所有的约束.若这样的解σ存在,则CSP是一致的.下面将在时态动作图上建立CSP模型,并利用区间代数提出一种基于规划图的时态表示方法和时态推理技术.3.2时态动作图的CSP时态动作图的时态赋值τ中,命题节点f的时态值Time(f)表示相应命题[f]最早成立时间,动作a的时态值Time(a)表示执行相应动作[a]的最早终止时间,并且动作a的持续时间为Dur(a).特别地,时态值Time(aend)表示最后一个动作的最早终止时间,也就是规划目标实现的最早时间.为了对时态动作图上的时态赋值进行过滤和一致性检验,我们需要在时态动作图上抽象出一个CSP模型,然后利用CSP技术,对该模型上的时态信息进行有效处理.定义9(CSP模型).时态动作图TA=〈Af,τ,Ω〉上的CSP为一个三元组P=(X,D,C),其中:X={i1,…,in}是n个变量的集合,其中ik是执行动作ak的时段变量,1kn;D={D1,…,Dn}是变量取值域的集合,ik∈Dk,其中Dk=[0,Time(aend)],1kn;C={c1,…,cm}是二元约束的集合,cjDj1×Page4在时态动作图中,每个动作都有持续时间,例如Dj2,1jm.码头贷运领域中的动作move,其时段变量为imove=[Time(amove)-Dur(amove),Time(amove)].在上述定义中,我们把动作执行的持续时段定义为一个CSP变量,其域为规划目标最早实现之前的任一时段,而约束则为时段(区间)之间的约束关系,这样将形成一个时态约束网络[13].3.3约束与运算系有13种[14-15],基本关系符号集合设为分别表示before,meets,overlaps,starts,during,finishes,after,is-met-by,is-overlap-by,is-start-by,includes和is-finished-by.其中关系b,m,o,s,d及e如图1所示,而b,m,o,s,d和f分别是b,m,o,s,d和f的对称关系.在区间代数中,两个时段i和j之间,可能的关R={b,m,o,s,d,f,e,b,m,o,s,d,f},时态动作图中的CSP变量的约束集合为C=2R={,{b},{m},{o},…,{b,m},C中的每个元素c是一个约束,它是基本关系的集合,或者是基本关系的析取,例如:[i{b,m}j]也可以表示为[(i{b}j)∨(i{m}j)],“”为不可满足的约束,“R”为总是可以满足的全约束.任意两个时段的关系可以用基本关系的析取来表示.时段变量之间的约束可以进行下列两种运算:(1)集合的常用运算,例如:∪、∩等等;(2)约束关系的复合运算,例如:对c1,2,c2,3∈R,如果[i1c1,2i2]且[i2c2,3i3],则[i1(c1,2·c2,3)i3].下面是一个时段约束网络的例子.例1.考虑一个码头货运的领域,假设有5个动作:load,move,unload,inspect,seal,分别表示装载、移动、卸载、检查和密封,我们用5个时段(iload,imove,iunload,iinspect,iseal)分别表示这几个操作执行的持续时间,动作之间要满足下面的条件:(1)操作inspect在集装箱被装上机器人之前或之后而不是抓的过程中完成,并且必须在机器人移动之前完成.(2)操作seal在集装箱被装载后和被卸载前完成,并且在机器人移动之前或到达目的地之后,而不是在移动过程中.我们可以用一个时态约束网络表示该问题的时态信息,其中操作的执行时段及其时序关系构成了一个约束网络(图2),图中的节点为各操作的时段,图中的弧表示时段之间的二元约束,例如:[iinspect{b,b}iload],由图中时段推导出来的时段关系用虚线弧表示.约束网络的解集对应这5个动作所有可行的组合,即要求这些动作组合必须满足时态约束.4时态信息的过滤和一致性检验首先我们介绍一些与过滤和约减有关的概念,这些概念参考了文献[9-11].定义10(冗余值).一个域Di中的值v如果不出现在任何一个解中,则称为是冗余的.一个约束cj的元组如果不是任何一个解中的元素,则称为是冗余的.定义11(极小CSP).如果CSP的域D没有冗余值,且约束C中没有冗余元组,则CSP是极小的.定义12(冗余约束).一个约束c∈C是冗余的,当且仅当CSP(X,D,C)等价于(X,D,C-c),即在C中去除c不改变解集.例如,在例1中,一个操作执行所持续的时段是Page5有限的,其域中将会有一定的冗余值.而在约束中,如果操作load与unload之间有约束b(before),则这里的约束b将是约束的冗余元组,因为由[iload{b}imove]与[imove{b}iunload],即得[iload{b}iunload].过滤与约减虽然都是消去冗余值和冗余元组,但过滤比最小约减弱,因为过滤后,域中剩下的值可以属于或可以不属于一个解.而最小约减是解决一致性问题的,因为一个CSP无解,当且仅当最小约减过程把一个域或一个约束约减为空集,最小约减有可能给出所有的解.4.1冗余约束的过滤在CSP技术中,过滤和约减域中冗余值的算法称为弧一致性算法[9-10],其功能就是消去域Di中不满足xi的约束cij的值,这样的值是冗余的,因为它不满足约束.算法的主要思想是对所有变量序对(xi,xj)进行迭代,i≠j,并且需要更新下列的两个式子:Dj←{v∈Dj|v∈Di:(v,v)∈cij}.当变量序对(xi,xj)被过滤后,含有这两个变量其中之一的变量序对,比如(xi,xk),就可以进一步约减Di,这可能蕴涵了Dj中其它的冗余值,如此类推,直至到达一个不动点.在这个点上,只有留在域Di中的值,才满足所有涉及变量xi的约束.如果域Di被约减为一个空集,则CSP是不一致的.如果没有域Di被约减为空集,则CSP被称为弧一致的.约束中冗余元组的过滤称为路径一致性[9-10],路径一致性对变量xi、xj和xk的所有三元组进行测试,检验三元组是否满足3个约束cij、cjk和cik的值.值(vi,vj)如果满足约束cij,并且如果xk有值vk使得(vi,vk)满足cik和(vk,vj)满足ckj,则(vi,vj)能成为解的一部分.也就是说,通过传递,由约束cik和ckj得到约束cij.下面是一个约束的复合运算,运算符号记为“·”:cik·ckj=(v,v),v∈Di,v∈Dj|w∈Dk:(v,w)∈cik且(w,v)∈ckj.约束的复合运算cik·ckj定义了一个从xi到xj的约束,其中xi和xj分别受cik和ckj约束,序对(vi,vj)必须满足cij,同时,对于每个k,要满足约束的复合cik·ckj,否则,它是冗余的.于是这里的过滤操作是:如果过滤产生一个空约束,则CSP是不一致的.4.2时态赋值一致性检验一个时态动作图,经过对域中冗余值和约束中冗余元组的过滤后,得到一个没有冗余信息的时态动作图,但此时的时态动作图上的时态赋值是否一致,还需要检验.对一致性的检验,实际上在前面的算法中已经有所蕴含,因为消除域中的冗余值,或消除约束中的冗余元组,当这种消除产生一个空域或一个空约束时,则可判定此CSP是不一致的.但必须注意到,一个网络初始是弧一致的,但经路径一致性算法PC-td过滤后,就不能保证弧一致了,因为约束里一些冗余元组被消除了.下面我们综合考虑弧一致算法和路径一致算法,通过定义cii=D2i,把过滤操作修改为:对所有三元组,包括对i=j.从而得到一个CSP一致性检验算法APC-td(图3),该算法同时保持路径一致性和弧一致性.APC-td算法如算法1所示.算法1.CSP一致性检验算法.APC-td(TA,Conslist)1.whileConslist≠do2.selectanyCij∈ConslistandConslist\{Cij}3.foreachk≠i,jand1kndo4.Cii=D2i,Cjj=D25.Conslist←Conslist∪Filter_op(i,k,[Cij·Cjj·Cjk])6.Conslist←Conslist∪Filter_op(j,k,[Cji·Cii·Cik])7.End8.Filter-op(i,j,C)9.C←C∩Cij10.ifC=thenexit(inconsistent)11.ifC=Cijthenreturn()12.Cij←C13.return(Cij)14.endAPC-td算法也是一个递增式算法,它更新要被过滤的约束的列表Conslis.Conslist初始化为整个约束集合C,或为新增的或修改约束的子集.Filter-op过程执行过滤操作,返回的约束将加入到Con-slist,如果不需要更新Conslist则返回.以上讨论了对时态动作图进行时态赋值,并检验了时态信息的一致性,下一节将进入规划的求解过程.5基于时态规划图的时态规划本节在文献[11]工作基础上,利用CSP技术,对时态信息进行过滤和一致性检验,加强了时态关系之间的推理,并通过实验,证明了在求解过程中,引入信息的处理,可以有效地提高求解效率,并与相Page6关工作进行了比较.5.1时态规划求解算法前面介绍的规划图、动作图以及时态动作图,解决了如何表示规划中动作及时态的问题,对时态动作图上时态信息的一致性处理,保证了规划图的时态一致性,时态规划问题的求解相当于在时态动作图空间STA中搜索时态解图.用遗传算法求解问题的首要步骤是根据具体的问题领域,将候选解编码成适当的染色体形式,并设计相应的适应度函数,然后设计相应的遗传操作算子对染色体进行进化,算法如下所示.Search_plan_by_GP-td(Ⅱ,max_gen,max_time)算法2.基于时态规划图的遗传规划算法GP-td.Input:AplanningproblemⅡ,themaximumnumberofOutput:Asolutiongraphrepresentingaplansolving1.fori←1tomax_timedo2.A-graph←create_graph_layer(ops,initial_facts)3.TA←Time_assign(A-graph)4.APC-td(TA,TAtc)5.oldpops←initializepopbasedontheplanninggraph6.fori←1topopsizedo7.Quality_of_solution(I,G,oldpop[i])8.forj←1tomax_gendo9.fori←1topopsizedo10.newpops[i],newpops[i+1]←randomlyselecttwo11.newpops[i],newpops[i+1]←crossovertheselected12.newpops[i],newpops[i+1]←mutatetheselected13.newpops[i],newpops[i+1]←localfixtheselected14.Quality_of_solution(I,G,newpop[i])15.Quality_of_solution(I,G,newpop[i+1])16.iftherenoinconsistentsexistinthecandidatesolution17.returnthebestpopastheplansolvingⅡ18.i←i+219.returnfail上述算法描述中,首先根据规划问题得到充分扩展后的动作规划图(步1、2),然后通过时态赋值,把规划图扩展为时态动作图TA(步3),步4对TA进行时态一致性检验.步5为根据规划图进行种群初始化,种群初始化完成后,首先调用质量评价函数对初始化后的种群的质量进行评价(步6、7)[11,16],此后,算法进入种群演化阶段(步8~18).与本文工作相近的是在规划图基础上发展起来在种群演化过程中,算法根据各候选规划解的质量随机选择染色体进行交叉、变异等遗传操作(步10、11、12),然后,算法再对经过遗传操作后的染色体进行局部不一致的修复操作(步13).经过一系列进化操作后,算法再对这些进化后的染色体的质量进行评价(步14、15),一旦有不存在不一致的染色体出现,算法停止并宣告找到规划解(步16、17),如果算法在最大进化代数内都不能找到规划解,则失败返回(步19).在实验测试中,我们选取了智能规划大赛提供的Satellite规划领域的问题进行测试.由于目前我们的算法只能处理规划动作持续时间是恒定的规划问题,因此所选取的是SimpleTime版本的问题实例进行测试.测试平台为:CPU(CⅡ850MHz)+RAM(128MB),操作系统为Linux平台上的Red-hat9.0,运行软件为Redhat9.0自带的编译器gcc,限于篇幅,我们只列出部分测试实例(pfile1~pfile20)的实验.5.2相关工作比较的规划器LPG[9-10]和GA[11].LPG规划器也是能处理时态约束的规划器,它采用的搜索策略是局部搜索策略,其搜索对象主要是动作图.本文关于时态推理部分与LPG的时态处理技术类似,都是在规划图的子图上进行时态推理,但由于LPG使用的是局部搜索技术,这使得LPG容易陷入局部极小值[3],而本文利用CSP技术对时态信息进行过滤和一致性检验处理,并利用了遗传算法的并行搜索与全局寻优思想方法,在规划图上运用遗传搜索的手段进行规划解的搜索,与LPG的局部搜索思想具有本质的差别.LPG算法的弱点是搜索具有局部性,这将导致图规划算法常常要进行回溯,LPG则为了能逃出局部极小值,在遇到没有比当前节点更好的节点时,采用以一定的概率随机选取邻节点的策略.而本文的算法GP-td采用遗传算法求解,由于采取了局部修复算子,在一定程度上避免了局部极小值.文献[11]提出的基于规划图的遗传规划算法GA,介绍了基于时态动作图的遗传规划算法的设计,包括染色体的编码、适应度函数、遗传操作算子,以及为增强遗传规划算法收敛速度而设计的局部修复算子等.GP-td是在其工作基础上,描述了时态规划过程中时态信息的有效表示的一种时序约束的推理技术,能消除时态信息中存在的冗余和不一致.图3是GP-td、LPG及GA在求解SimpleTimePage7的Satellite实例时的对比结果,其中横坐标为Sat-ellite的20个测试实例Pfile1~Pfile20,纵坐标为算法成功返回结果的平均求解时间.GP-td使用的规划图和互斥关系跟LPG完全一样,因此,两者的Parsingtime和Mutextime完全一样,两者性能上的区别主要在解提取的时间耗费上.从中我们可以看到,GP-td在求解过程中,随着问题规模逐渐增大,其失败次数将逐渐增多,但其成功求解的效率与LPG相比,有一定的优势,在大部分情况下比LPG效率更高.此外,GP-td与GA算法会出现在给定的迭代次数内无法成功的情况,因此图4给出了GP-td与GA的求解成功率.实验表明,在问题规模较大的情况下,GP-td算法在求解上比LPG和GA有更高的效率,也比GA算法有更高的求解成功率.图3GP-td、LPG与GA算法在求解效率的比较图4GP-td与GA算法在求解成功率的比较6结论和进一步工作本文在规划图框架下,对时态推理技术和时态规划求解进行了研究.在时态推理方面,由于在规划过程中需要考虑规划目标能在尽可能短的时间内实现,并且动作的执行需要考虑时间和资源的消耗以及存在并发动作等因素,而这类规划问题在经典规划中,用带瞬间动作的STRIPS模型是无法进行表示的.因此,为表示实际规划问题,本文对时间信息如何进行有效表示,并能进行时序约束推理进行了研究.而在时态规划方面,采用了遗传规划算法进行求解,并通过实验,验证了算法的可行性和有效性.在时态规划图的基础上,运用遗传算法对规划解进行搜索是全新的一个研究课题,我们通过实验,验证了该技术路线的合理性和可行性.当前规划领域研究中,除了不断寻找新算法,以提高规划算法的求解效率,也要设法进一步扩充现有算法的处理范围和处理能力,因此,不少研究者们在扩充规划算法的处理范围和能力方面进行了大量的研究工作.我们将进一步深入研究时态约束推理技术和方法,使在规划求解过程中,对于新增的时态信息也能够处理.同时,进一步提高现有遗传规划算法的效率,并且扩充遗传规划算法处理时间和数值资源的能力.
