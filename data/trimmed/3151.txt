Page1面向批量插入优化的并行存储引擎MTPower陈虎1)唐海浩2)廖江苗1)彭江峰2)1)(华南理工大学软件学院广州510006)2)(华南理工大学计算机科学与工程学院广州510006)摘要针对多核处理器的特点,文章提出了一个符合MySQL接口标准的并行存储引擎MTPower.该存储引擎着重利用多核处理器的并行计算能力提升批量插入过程中的索引产生过程,主要包含存储引擎接口、并行批量线性Hash索引、并行批量B+树插入、支持并行访问的磁盘存储缓冲等部分.测试结果表明,在批量插入记录且需要创建Hash和B+树索引时,MTPower的性能比经典的单线程存储引擎MyISAM最高可以提高6.1倍和4.8倍;在系统中线程总数略大于处理器核数时,MTPower可以达到最佳性能;在处理器核的数量增加时,MTPower的性能也能随之提高.关键词并行数据库;Hash并行索引;B+树并行索引;磁盘缓冲;多核处理器1引言随着多核时代的来临,如何充分利用多核处理Page2解析、优化与执行等;存储引擎负责数据存储、索引管理、锁、事务管理、恢复等.MySQL的数据库管理员可以选择最接近自身应用特点的存储引擎,或者定制专用存储引擎,以在特定需求下尽可能达到最佳性能.本文提出的存储引擎MTPower是一种针对多核处理器平台上大批量数据插入优化的MySQL存储引擎.MTPower基于能进行自动负载均衡的MSI并行编程模型[3]开发,支持Hash索引和B+树索引的并行更新,包含能支持多个线程并行访问的磁盘缓冲和内存缓冲,可以在多核处理器平台上有效开发记录批量插入过程中的并行性.本文第2节对MySQL常用的存储引擎进行性能分析,找出其不足之处;第3节介绍并行存储引擎MTPower的总体结构;第4节和第5节分别介绍针对多核处理器系统的批量并行线性Hash和B+树索引更新算法;第6节介绍支持并行访问的磁盘缓冲区;第7节给出并行存储引擎的性能测试结果与分析;最后一节为总结.2常见存储引擎性能分析MySQL有MyISAM、InnoDB、Merge、Heap、Falcon等多个常用的存储引擎.本节将测试和分析MyISAM和Falcon存储引擎的主要性能.其中,MyISAM为单线程的存储引擎,是当前MySQL应用最为广泛的存储引擎;Falcon为多线程的存储引擎,包含4个工作线程[4-5],可以更有效发挥多核处理器的性能优势.系统测试的平台如表1所示.测试工具采用MySQL自带的bench套件,包含了9个测试,可以测试表的修改、插入、查询、创建和事务等方面的性能.图1给出了Falcon引擎和MyISAM引擎在4核和8核平台上相对单核PC的加速比.单核PCIntelCeleronL116KB4核服务器XeonE51108核服务器XeonE5310从图1可以看出,Falcon存储引擎在4核处理器上的加速效果明显,但是8核处理器上的速度与4核相当.这是由于Falcon引擎内部固定使用4个线程,当处理器核数超过4时,无法发挥更多处理器的能力.MyISAM是单线程存储引擎,所以在4核与8核处理器上的性能没有显著提升,实验中的少许性能提升得益于多核系统的Cache容量比单核系统要大.图1Falcon与MyISAM在4核与8核处理器上的加速比对比为了进一步研究批量插入过程中索引数目对性能的影响,我们使用KCachegrind性能分析工具测试不同索引数目下插入1千万条记录时,MyISAM存储引擎中负责记录与索引数据插入的write_row函数执行时间占总时间的比例,如图2所示.可以看出,在没有索引的情况下插入1千万条Page3记录,write_row的执行时间只占总执行时间的3.5%,但是有4个Hash索引时,write_row的执行时间比增加到82%,可见更新索引对批量插入数据的性能具有重要的影响.从上述实验结果,可以发现:(1)Falcon存储引擎的线程数目固定,导致在4核与8核处理器上性能相差无几,可扩展性有限;(2)MyISAM是单线程存储引擎,处理器核数的增加并不能带来性能提升;(3)MyISAM中更新索引是批量记录插入过程的主要性能瓶颈.本文提出的多核存储引擎MTPower正是针对MySQL已有存储引擎的缺点,着重提升批量记录插入的索引产生性能,同时提升系统的可扩展能力.3MTPower总体结构MTPower存储引擎采用并行编程模型MSI多线程调度接口[3-4]作为系统的基础.MSI模型以任务池作为系统基本部件,由内部线程调度器根据各个任务池的负载情况动态分配执行线程.MSI中的任务池可以根据任务之间的依赖关系连接成流水线或其它结构.MTPower存储引擎内部结构如图3所示.其外部接口为MySQL的标准存储引擎接口,内部包含:支持并行分配和释放的多线程内存管理器;支持多线程并行访问的磁盘缓冲区;支持批量索引并行更新的任务池.在MTPower中,插入记录的过程采用基于MSI任务池的方法,其主要流程包括:(1)从存储引擎接口接收MySQL的SQL层传递过来要插入的记录数据,分析出记录中的索引字段数据,从内存管理器申请内存块保存需要索引字段的数据,并将内存地址写进批量索引任务池,最后将整条记录写入磁盘缓冲区;(2)在批量索引任务池的记录达到了一定数量后,采用并行方式更新Hash索引或B+树索引,并将结果保存到多线程磁盘缓冲区.上述索引更新过程异步于SQL层的记录插入过程,使得SQL层的记录插入操作非常简单,从而有效提高了其插入记录的速度,并使得SQL层和索引更新过程可以在多核处理器平台上并行执行.4批量并行线性Hash索引线性Hash索引[5]是一种动态Hash方法,其Hash表可以随着记录项的插入或删除而扩张或收缩,而且随着Hash表的桶数目变化,Hash函数也随之改变,这种动态处理方法不仅解决了空间利用率问题,而且有效地降低了地址冲突.并发的线性Hash操作由Ellis在1987年提出[6],其目的是为了增强线性Hash的并发访问操作.Garcia-Monlina等研究了内存数据库中Hash表的访问操作等问题[7].本文在原有串行线性Hash索引更新算法的基础上提出了并行化的批量Hash索引更新算法.其主要特点是:不立刻将单个索引记录插入到Hash表中,而在内存中保留这些记录直到达到一定数量再进行批量并行插入.假定T为一次批量插入的记录总数,K为分裂桶的阈值,b为桶的容量,B为当前桶的总数,那么对于T条记录的插入应该增加的桶数目为BT=T/(K×b).根据当前待分裂桶的位置P0,有两种情况,如图4所示.情况1.此时P0+BT<2N,相应算法如下.(1)使用一个线程分裂第P0号桶到第P0+BT-1号桶,其中P0+i号桶的元素分裂到P0+iPage4号桶和B+i号桶(i=0,…,BT-1);的第0号桶到第B+BT-1号桶.(2)P0=P0+BT;(3)所有线程并行地将T条记录插入Hash表情况2.此时P0+BT2N,相应算法如下.(1)使用Hash函数HN+1分裂P0到2N-1号桶,使用Hash函数HN+2分裂第0号到第((P0+BT)mod2N)-1号桶;(2)P0=(P0+BT)mod2N;(3)所有线程并行地将T条记录使用Hash函数HN+1插入Hash表的第0号桶到第2N+1+((P0+BT)mod2N)-1号桶.Hash函数由式(1)[5]给出,其中M为初始桶数目:HN(Key)=Keymod(2NM)(Keymod2NP)在T个记录并行插入过程中,通过磁盘缓冲区的锁避免插入相同的桶时而产生的互斥问题.批量并行Hash更新算法相比传统串行算法有如下优势:(1)预分裂算法减少很多冗余的分裂操作.在串行插入过程中,记录r的初始位置是第b号桶.桶b分裂后,r可能要转放到b+M号桶中;同理,b+M号桶分裂后,记录r可能又要转放到b+2M号桶中.以此类推,经过i次分裂之后,记录r可能最终是放入b+iM号桶中.在批量插入算法中,记录r可以一次性定位到第b+iM号桶中;(2)多线程并行插入记录可以充分利用多核处理器的并行计算能力.5批量并行B+树插入B+树是一种适用于磁盘数据库系统的索引机制.B+树的每个结点有多棵子树,形状宽而浅,从而只需较少次数的磁盘I/O就可以找到目标数据[8].但是B+有一个缺点:并发度低.因此,Lehman和Yao提出了一种B+树的变形———Blink树结构,它具有极高的同步操作性能[9].由于Blink树也是B+树的一种,为方便起见,本文把Blink树也称为B+树.当前,人们对B+树索引的并行化操作也作了相关研究.Taniar和Rahayu研究了B+树在分布式系统上的索引处理模式[10],主要关注在索引的划分和存储方面.Jaluta等研究了平衡Blink树下的并发控制方面[11],其侧重点主要在索引的恢复操作和事务处理.丁华等对海量数据的索引构建方法进行了研究[12],其主要特点是自底向上构建B+树,该方法有效提升了数据库索引的建立效率.本文在Blink树的算法基础上实现了基于任务池的并行Blink树的并行批量插入.通常构建索引树的方法是从空树开始,使用标准的插入算法[13]为每条数据记录插入索引项.这种方法一次只能插入一个索引项,每次都需要从根开始,一直查找到合适的叶子页进行插入,处理海量数据的效率很低.本文提出的批量插入算法的基本思想是:先将待插入索引记录预排序,从根结点开始用根结点的key将预排序的结果“分割”成多个子序列,并把各子序列插入对应的内结点,层层分割,直至叶结点.这样就通过根结点中的关键字把待插入的已排好序的索引记录分割为多个子序列.每个子序列的插入过程就是一个独立的任务并由B+树任务池中的线程并行读取和执行,如图5所示.X+Y+1,(其它结点在B+树的存储结构中,每个结点由一个4KB大小磁盘页面存储,其中每页可以存储的最大索引项数为r.在线程对当前结点插入长度为Y的子序列时采用以下算法.(1)若当前结点的页面中不包括高键(每个结点的最小上界)的索引项数为X,则{W=X+Y,(当前结点为一层的最右边结点)(2)若Wr,则直接将新的索引项插入到当前结点的页面中,算法结束;(3)若W>r,求得分裂后的页面数K=W-1(4)从磁盘缓冲中分配K-1个新缓冲页;(5)将当前结点的项和待插入的子序列重新(6)将有序序列分配到K-1个新缓冲页和原有的缓冲页中,并将这些页指针和每页高键值上传至父结点;排序;(7)若父结点需要分裂,采用此算法继续递归分裂,直至不需分裂为止.Page5在初次建树时,也采用了批量插入的方法,即对初次插入的N个记录进行排序,然后将其直接划分到L个叶结点中,其中可根据预先设定的填充因子α(0<α<1)来确定叶结点的个数:L=N/αr.由于初次建树过程中无结点分裂,提高了建库效率,且可通过填充因子调整存储空间利用率,可为后续插入数据预留了空间,减少分裂次数,提高插入效率.6磁盘缓冲管理磁盘缓冲的目的是尽可能地将重要的数据保留在内存中,以减少对磁盘的访问.MTPower中磁盘缓冲的最大特点是能够支持多线程的并发访问,尽量减少多核环境下线程访问的冲突,以发挥多核处理器的性能,其总体结构如图6所示.其中主要包括:(1)提供外部访问接口、管理磁盘块的磁盘缓冲区;(2)支持并行内存分配、回收的内存管理器;(3)保存磁盘缓冲区I/O请求的I/O任务池;(4)文件句柄管理器.磁盘缓冲的主要功能是完成用户线程的磁盘块读写操作请求.在此过程中,将首先检查该数据块在磁盘缓冲中是否存在,如果已存在则直接返回给用户线程.如果不在磁盘缓冲区内,磁盘缓冲区向I/O任务池写入一个对应的数据块读请求.在I/O线程返回有效磁盘块前,用户线程等待请求的完成.与I/O任务池相关的I/O线程有两个主要作用:处理I/O任务池的读写请求;定时扫描磁盘缓冲区的脏数据块并把它们以任务的形式写入I/O任务池,然后再处理I/O任务池的请求.文件句柄管理器的作用是管理已经打开的文件句柄.当磁盘缓冲打开文件的数量达到一定上限时,为了防止系统溢出[4],由文件管理器根据先入先出的策略关闭最早打开的文件句柄.磁盘缓冲区的内部结构如图7所示,通过文件名和文件中偏移量的散列值来查找相应的内存块.此外,缓冲中所有内存块的运行时刻信息都以数组形式存储在Headtable表中,其数据结构如图8所示.内存块数据的状态有4种:DIRTY、CLEAN、DISK_AND_DIRTY与DISK.其中,DIRTY代表内存块的数据修改过;CLEAN代表内存块的数据没有修改过;DISK代表内存块的数据正在写回磁盘;DISK_AND_DIRTY代表内存块的数据在写回磁盘的过程中又被用户线程修改过.状态转换如图9所示.数据;对应转换的含义包括:转换1.对内存块进行写操作,修改内存块的转换2.对脏内存块写回磁盘,脏内存块正处于等待I/O线程写回磁盘或者I/O线程正在将其写回磁盘,保存在I/O任务池中;转换3.脏内存块成功写回磁盘,并且在写回的Page6过程中没有再次被修改;线程重新修改;转换4.脏内存块在写回磁盘的过程中被用户转换5.脏内存块写回磁盘后,因为写回过程中数据再次被用户线程修改,所以依然标示为脏内存块.由于内存头数据结构的成员都用位表示,使得每个内存头只占2个字节,整个内存头数组仅占用20KB(在40MB缓冲容量下,每个内存块大小为4KB),小于一般系统L1Cache的容量.因此在寻找可替换内存块时,可以大大提高Cache命中率,提高运行速度.磁盘缓冲区采用了LFU(最不常用使用法)置换策略.当需要空闲内存块时,将替换内存块头中bh_total_use字段最小者(访问次数最少)的内存块.脏内存块的替换时机有3个:(1)当用户线程向磁盘缓冲区申请空闲内存块,而磁盘缓冲区里没有干净的内存块时,激发脏内存块的置换过程;置换;(2)I/O线程定时激发磁盘缓冲区的脏内存块(3)关闭磁盘缓冲区时,磁盘缓冲区会把所有脏内存块写回磁盘.7实验结果与分析对MTPower的性能测试分别在4核服务器与8核多核服务器上进行,其配置如表1所示.图10和表2分别为测试所使用的数据表和不同记录数量和文件大小.我们选用最常用的单线程非事务存储引擎MyISAM作为MTPower的性能比较对象.实验的主要目标包括:(1)分析数据量、磁盘缓冲容量、线程数对MTPower性能的影响,提供系统参数CREATETABLEt1(col_aINTNOTNULL,优化方案;(2)与MyISAM进行性能对比;(3)评价处理器核数增加时,MTPower的可扩展能力.数据量和存储缓冲容量对MTPower的性能影响在此实验中,磁盘缓冲块大小固定为4KB,容量分别设置为4MB、8MB、20MB和40MB.插入的记录数如表2所示.图11给出了在创建一个Hash索引(其中6个Hash更新线程,367个初始桶数,分裂因子为0.75)情况下,MTPower与MyISAM在8核服务器上的性能对比.由图11可以看出,在插入记录数较小(50万)和缓冲容量较小的情况下(4MB或8MB),MTPower的性能和MyISAM相近.但是,当磁盘缓冲区容量较大时(20MB或40MB),MTPower的性能得到了较大的提升.缓冲容量越大,插入记录的数据量越大,MTPower性能提升越明显.相比MyISAM,其最大加速比可以达到6.18.这是因为缓冲容量越大,不仅能够减少磁盘的I/O次数,还能够更好地发挥并行批量索引的插入优势.在后续的实验中,我们都设置磁盘缓冲容量为40MB.线程数对MTPower的性能影响在使用MTPower存储引擎的MySQLServer系统中包括了MySQLServer主线程、连接线程、MSI调度器线程、I/O线程等4个固定线程以及N个并行索引插入的线程,即系统的总线程数为N+4.在4个固定线程中,MySQLServer主线程处于睡眠状态等待新的连接进来唤醒,I/O线程只有I/O任务池有任务或者定时扫描磁盘缓冲区脏内存块才处于运行状态,MSI调度器线程也是定时唤醒.图12和图13分别给出了4核与8核服务器上不同线性Hash索引插入线程数对MTPower存储引擎的性能影响,图14给出了8核服务器上不同B+树索引插入线程数对MTPower的影响以及其与MyISAM的性能比较.Page7图124核服务器上不同线程数的性能影响(Hash索引)图138核服务器上不同线程数的性能影响(Hash索引)图148核服务器上不同线程数的性能影响(B+树索引)从上述3个图中可以看出,在4核服务器上2个索引插入线程的性能最好,在8核服务器上4或6个索引插入线程的性能最好.考虑到系统中4个固定线程(其中有3个为不活跃线程,1个为活跃线程),可以得到并行索引线程数的优化配置方案:在总的线程数略大于处理器的核数时,MTPower的性能最优.总线程数过小,不能为多个核提供足够的计算负载;总线程数过多,则会因为过多的线程切换开销导致性能反而下降.此外,从图14中也可以看出,MTPower在B+树索引方面的性能也较MyISAM有较大提高,在大数据量情况下,加速比最大可以达到4.8倍.扩展性测试图15给出了最佳参数设置时,MTPower在4核和8核服务器上Hash索引的性能对比.4核和8核服务器上的索引插入线程数分别为2个和6个.图15在4核和8核服务器上的性能对比(Hash索引)从图15可以看出,在插入相同数据量时,8核处理器的性能要比4核处理器的性能高,而且随着数据量的增加,性能提升更为显著.在200万条记录数量情况下,MTPower在8核服务器上的性能提升了约12%,具有一定的可扩展能力.我们还在4核服务器平台上比较了4线程存储引擎Falcon和MTPower在插入200万条记录,创建一个B+树索引(Falcon不支持Hash索引)的性能,其中Falcon的插入时间为203s,MTPower为225s,两者基本相当.8结语作为当今最为流行的开源数据库之一,MySQL采用了插件式存储引擎架构.但MySQL已有的存储引擎大部分只是以单线程的方式处理数据,不能充分利用多核处理器计算能力.本文实现了一个符合MySQL存储引擎接口规范,支持多核处理器并行计算的存储引擎MTPower.该存储引擎总体结构基于多线程动态调度机制,支持Hash索引和B+树索引的并行批量插入,同时包含了磁盘缓冲,以减少系统I/O开销.测试结果表明,与经典单线程存储引擎MyISAM相比,MTPower在包含单个Hash索引和B+树索引的批量插入时,性能最高可以提高6倍和4.8倍.同时,通过实验也找到了最佳线程数的配置方案:系统中的线程总数应略大于处理器核数.此外,通过对MTPower在4核和8核服务器上的性能对比,说明其具有一定的可扩展能力.当然MTPower也有一些缺陷,例如可扩展性还不够强、尚不支持并行的查询等,这些将是进一步的研究目标.
