Page1线性加速比并行实时任务的节能研究林宇晗孔繁鑫徐惠婷金曦邓庆绪(东北大学信息科学与工程学院沈阳110004)摘要节能设计是嵌入式实时系统中一个重要的研究方向.目前的研究大多采用串行任务模型,很少关注并行任务.文中研究了在离散工作模式与实时约束下,多核平台下的线性加速比并行实时任务的能耗最小化问题.文中假设所有处理器核都支持DVS技术且加速比是线性的,在此条件下,文中首先给出一个定理证明了当各任务执行在系统全部核上时系统能耗最小.然后,将问题建模为一个0-1整数线性规划,利用最早截止期优先算法确定任务调度,并给出了两个高效的节能算法确定各任务的工作频率.文中最后通过大量的模拟实验,证明提出的算法的效果显著,可以达到几乎与最优解相同的节能效果.关键词实时系统;并行任务;能耗最小化;动态电压缩放;多核1引言随着电子信息产业的快速发展,嵌入式技术的应用也日趋广泛.嵌入式设备的性能大幅度提高,对能源的需求不断上升.能耗的增长不仅制约了嵌入式系统集成度的增加,并且需要复杂的散热技术,这更是提高了产品成本[1].因此,怎样更有效地节能已成了嵌入式系统研究的热点问题.动态电压缩放技术[2](DynamicVoltage/Fre-quencyScaling,DVFS)作为一种有效的节能技术,在学术界和业界被广泛研究和采用.DVFS技术可以使处理器的电压和频率动态地改变,由于处理器的能耗与其频率呈凸函数关系,而任务的执行时间与处理器的频率呈线性关系,所以DVFS技术能够有效地降低CPU的能耗.另一方面,随着多核处理器技术在服务器和PC机上的广泛使用,多核技术表现出同一频率下,性能提高快、功耗密度低等特点,使得多核成为嵌入式系统未来的统治平台.现有的多核节能调度方面的研究主要是针对串行任务(sequentialtasks)模型[2],该模型假设一个任务在同一时刻只能运行在一个核上,而不能同时运行在多个核上,这无法发挥出多核技术在性能上的优势.随着对系统性能需求的急速增长,并行处理技术已经被广泛应用在高性能计算系统中,如图像处理及处理大量数据的科学计算等.伙伴调度(Gangscheduling)方式是一种效率最高的并行处理策略,该策略将任务同时分配到一组处理器上执行,任务的各个线程执行时间总量相同,并且同时开始同步执行.在实时嵌入式系统中,并行处理技术也开始得到应用,如机器人机器臂[3]、视频处理[4]等.因此,并行任务的节能问题已成为嵌入式实时系统领域正在兴起的研究热点.一些研究工作已经将Gangscheduling策略应用到解决并行任务的实时调度问题的方法中[5-7],但是没有讨论能耗的影响.如果实时系统中使用没有优化处理器频率的并行任务调度算法,将会造成系统能耗的极大浪费.实际系统中处理器功耗是一组和频率一一对应的离散值.现有的实时系统能耗的讨论为了简化模型,往往将处理器频率值假设为连续改变的,然而这并不适用于实际系统.因此,本文研究更接近真实处理器频率改变情况的离散处理器频率模型中,线性加速比模型下[8]的多核并行实时任务的节能调度问题,提出了两个满足时间约束,采用Gangscheduling策略的并行任务能耗优化算法.具体贡献如下:(1)首先给出一个定理,证明能耗最小化时的一个充分条件:将各任务都执行在系统中的全部核上.(2)其次,将该问题建模为0-1整数线性规划,得到最优解;然后,基于层装箱算法,提出了两个多项式复杂度的节能调度算法.(3)最后,进行大量模拟实验,结果表明提出的多项式算法与最优解基本相同,达到了很好的节能效果.本文第2节提出系统模型及问题定义;第3节证明相关定理并给出数学规划模型;第4节给出并行实时任务节能调度算法;第5节进行实验对比及结果分析;第6节总结本文并给出未来工作.2系统模型2.1任务模型本文研究一个具有M个独立处理器核心(以下简称为核)的同构多核处理器系统.考虑实时并行任务集合τ={τ1,…,τN},任务之间彼此独立.任务τi的最差执行时间(WCET,以下简称为执行时间)为wceti,周期设为Ti,任务必须在下一次释放前完成,即任务的周期与截止期相等.系统的利用率可以表示为U=∑N的[8-9],并且任务执行时间与工作频率呈线性关系,即当任务τi工作频率为f,且并行度为mi时,任务τi的执行时间为其中,Ci表示当处理器频率最大(f=fmax)且并行度为1时,任务τi的最坏执行时间.任务的并行度为执行该任务的核的数量.根据并行任务不同的执行灵活度,即并行度可改变程度,一个任务可以分为3类:(1)刚性任务(rigidtask),该类任务的并行度在运行前就已固定[6,9];(2)可塑任务(moldabletask),该类任务的并行度在每次启动时进行确定,在其整个执行过程中保持不变[4,6];(3)可变任务(malleabletask),该类任务的并行度在其执行过程中可以任意改变[8,10-11].本文主要研究并行度可变的任务,包括可塑任务和可变任务,并且采用Gangscheduling的并行调度策略,因此,任务的所有线程都同时开始,同步执行.Page32.2能耗模型本文假设处理器支持DVFS技术,每个核都可以根据应用程序的要求动态地调整自己的频率f和电压v,并且都有Q个有效的工作状态,记为离散集合(F,V){(f1,v1)…(fQ,vQ)},f1<…<fQ.对于每一个工作状态都有唯一的功耗与之对应,因此我们记处理器的功耗为P(f),这里采用文献[12]中给出频率与功耗的关系,即呈凸函数关系:其中α是一个与处理器硬件相关的常量[13].本文只考虑处理器能耗的优化,并假设外设功耗为一固定常数值.结合系统外设能耗的优化将作为本文的未来研究工作.因此,系统能耗E可表示为本文采用任务间频率调整策略(inter-taskDVFS策略),即每个任务在其执行期间只有一个工作状态(频率).故上式可化简为定理1.对于并行度可变的任务,系统中各任务的并行度都等于核的个数M是系统能耗取得最小值的一个充分条件,即当并行任务分配在所有核上执行时,必定不会丢失最优解.证明.为不失一般性,给定一段时间T,使得在处理器的频率f下任务τi的执行时间等于T,则T=Cif·mi任务τi在时间T内的处理器能耗Ei可表示为又因为P(f)∝fα,α>1,代入上式,所以τi的处理器能耗其中Ci和T是常数.显然,当mi取最大值时,Ei得到最小解.因此,当任务的并行度等于核个数时,一定会得到最优解,定理1成立.由定理1,对于可塑和可变任务,本文在运行前为每个任务都分配M个核,这保证了每个任务的并行度始终都为M.由于采用Gangscheduling策略,因此系统在任意时刻只有一个任务在一个频率下被执行.同时系统需要满足实时约束,这里采用最早截止期优先(EDF)的调度算法[14],因此系统的利用率之和不大于核个数M:即可满足系统中所有实时任务都在其截止期之前完成.2.3问题定义本文研究具有相同处理器核的多核系统中,N个独立并行任务的实时系统的能耗最小化问题.在外设能耗为常数情况下,为使系统能耗最小,任务并行度始终等于处理器个数,因此解决问题的关键在于为各个任务分配最佳的运行频率.由于并行任务调度和频率分配问题是NP难的,因此本文的目标是将该问题建模为0-1整数规划,并提出多项式复杂度的启发式算法.3能耗最小化最优算法上一节讨论了本文研究问题的模型与定义,本节将在这个基础上给出最优算法,即将离散频率下采用EDF调度的并行任务在同构多核处理器上的能耗最小化问题建模为一个0-1整数规划问题.定义变量.对于任务集τ我们定义一组布尔型变量数组x[N][Q]来表示任务的工作状态,其中,x[i][j]的值为1时表示任务τi工作在频率fj下,这里,i∈1,[]N,j∈[1,Q].约束1.在任意时刻每个任务只能运行在一个工作频率上:约束2.为了满足EDF可调度条件,所有任务的利用率之和必须小于等于处理器的个数M:其中,ci(fj)表示任务τi在频率fj下的执行时间;Ti表示任务τi的周期.最优化目标.最小化所有任务的能耗之和,因此得到目标函数表达式:其中Ei(fj)表示在任务τi在频率fj下时所耗费的能耗.这里,式(8)、(9)为约束,式(10)为优化目标,构成一个变量数为N×Q个的0-1整数线性规划问题.4启发式算法上一节讨论了本文研究的问题的最优算法.众Page4所周知,0-1整数规划的求解被证明是NP难问题.因此,为了高效地解决这个问题,基于EDF调度策略,下面提出两个具有多项式复杂度的启发式算法来调整各个任务的频率,使得系统在满足实时约束条件下达到能耗最小.4.1H-L算法H-L算法的思想是将所有任务的工作频率初始置为最小值f1并有条件地逐步提高,即逐步压缩执行时间使得系统满足实时性.由于采用最早截止期优先的调度策略,因此当频率提高到使得EDF可调度(即所有任务的利用率之和小于处理器核个数时),各个任务都能满足Deadline.对于离散的模型,有处理器的有效工作频率集合f{f1,f2,…,fQ},f1<f2<…<fQ.H-L算法具体描述如下.算法1.H-L算法.输入:T[N],c[N],M输出:E,F[N]1.F[N]··={f1(Q)…fN(Q)};2.IfConstraint(2)isn’tsatisfiedthen3.returnnofeasiblesolution;4.endif5.F[N]··={f1(1)…fN(1)};6.Flag[N]··={false…false};7.Δmin··=,imin··=;8.whileFlagisn’talltrue&Constraint(2)isn’tsatisfieddo9.fori··=1→Ndo10.ifΔmin>P(fi(q+1))-P(fi(q))11.Δmin··=P(fi(q))-P(fi(q-1))12.imin··=i;13.endif14.endfor15.ifimin≠then16.ifFlagi=falsethen17.fi(q)··=fi(q+1);18.endif19.iffi(q)=fi(Q)then20.Flagi··=false;21.endif22.endif23.endwhile24.E··=∑N25.returnE,F[N].算法的输入是处理器的个数M和任务的工作频率集合F[N]对应的周期T[N]与最坏执行时间c[N].算法的1~4行首先检查任务是否满足约束2,如果所有任务的频率最大时的利用率之和大于处理器个数M时,那么返回没有可行解.否则转入第5~7行将所有任务的工作频率设为最小值,并初始化相关变量.第8~23行的while循环是算法中分配最佳频率的过程.在每次循环中,第8行首先检查当前的频率分配是否满足实时约束,第9~14行的for循环将找出一个提高一级频率使得Δmin=P(fi(q+1))-P(fi(q))c(fi(q))-c(fi(q+1))的值最小(可以最大程度地减缓处理器功耗上升,同时又能最大程度地降低执行时间)的任务,第15~21行在保证不超过最高频率的前提下提高该任务的频率,如此循环,直到所有任务的频率最大或者满足EDF可调度条件为止.第24行计算系统的总频率.算法结束时,即可得到最佳的频率分配和最优的系统能耗.4.2L-H算法相对于H-L算法,L-H算法的思想是将所有任务的工作频率置为最大值fq并有条件地逐步降低,即逐步拉伸执行时间直到任务的执行时间接近Deadline.L-H算法的具体描述如下.算法2.L-H算法.输入:T[N],c[N],M输出:E,F[N]1.F[N]··={f1(Q)…fN(Q)};2.IfConstraint(2)isn’tsatisfiedthen3.returnnofeasiblesolution;4.endif5.Flag[N]··={false…false};6.Δmin··=,imin··=;7.whileFlagisn’talltrue&Constraint(2)isn’tsatisfieddo8.fori··=1→Ndo9.ifP(fi(q))-P(fi(q-1))>0then10.Flagi··=false;11.Continue;12.endif13.ifΔmax>P(fi(q))-P(fi(q-1))14.Δmax··=P(fi(q))-P(fi(q-1))15.imax··=i;16.endif17.endfor18.ifimin≠thenPage519.ifFlagi=falsethen20.fi(q)··=fi(q-1);21.endif22.iffi(q)=fi(Q)then23.Flagi··=false;24.endif25.endif26.endwhile27.E··=∑N28.returnE,F[N].需要注意的是,算法在迭代过程中可能会发生降低频率的同时能耗反而升高的情况,这表明该任务已工作在最小频率,需要将标志Flagi置为false并跳过该任务.由以上可知,H-L算法和L-H算法在循环中最多计算O(QN)次,因此时间复杂度为O(QN),空间复杂度为O(N).下面举一个例子说明上述算法的流程.算法输入为T[2]={2,3},c[2]={8,12},M=4,由此可得算法示意如图1、图2,其中Pi,0<i<M+1表示处理器核.图1(a)为H-L算法的初始状态,即所有任务的频率最低时任务在各处理器核上的执行情况,这时处理器能耗最低但不满足实时约束.通过计算Δmin发现,在减少相同的执行时间的情况下,提升任务τ2的频率所增加的能耗最少,因此系统提升τ2的执行频率;图1(b)为提升τ2频率之后的状态,此时依然不满足Deadline,计算后提升τ1的频率;图1(c)为H-L算法的终止状态,此时能耗最小且满足时间约束.图2(a)为L-H算法的初始状态,这时所有任务的执行频率最高且处理器能耗最多,需要降低频率以减少能耗.计算得出降低任务τ2的频率所增加的时间最少且减少的能耗最多,同时还满足时间约束,因此系统降低任务τ2的执行频率;图2(b)为L-H算法的终止状态,此时能耗最小并且满足时间约束.4.3算法扩展4.3.1速率单调调度前文讨论了在EDF调度下的节能算法,虽然EDF调度利用率高,然而在线调度开销大,不易实现,因此实际系统一般采用静态的速率单调(Rate-Monotonic,RM)调度算法.因此这里讨论将节能算法扩展到RM调度上.速率单调调度算法的任务优先级分配采用静态固定的分配方法,即优先级与周期成反比,周期越短优先级越高.在多处理器模型中已被证明[11]:N个独立的周期任务可被速率单调调度的充分条件是处理器利用率其中M是处理器的核个数.从定理1可知,任何时刻任务的并行度为M,同时上述的两种节能算法的目的是找到各个任务合理的频率分配,因此对于速率单调调度算法,上述算法依然适用,只需要将算法中约束2改为∑Ni=1∑Q同理,节能算法还可以扩展应用到最少空闲时间优先(LeastLaxityFirst,LLF)等其它的调度算法中.4.3.2可变任务由于可变任务的并行度在执行过程中可以任意改变,因此可变任务的能耗最小化被认为更为复杂,这里我们讨论上述节能算法对可变任务适用情况.根据定理1,无论任务的并行度可以如何改变,当任务的并行度等于处理器个数时,一定可以得到最优解.因此可以得到推论,对于可变任务,当任务均匀分割并分配在所有核上运行时,必定不会丢失最优解.化依然适用.因此,对于可变任务,上述两种节能算法无需变Page65性能评估为验证本文提出算法的正确性与有效性,本文使用一系列的通用参数进行了大量的模拟实验以比较以下3种算法:H-L算法、L-H算法和0-1整数规划.H-L算法与L-H算法目的是在并行实时系统中最大限度地降低CPU能耗,主要任务是在多项式时间内确定任务运行时相对最优的工作频率.因为0-1整形规划(0-1ILPs)算法可以计算出最优解,所以本章主要把本文提出的启发式算法与0-1ILPs算法进行对比,证明其能够求出合理的能耗优化调度方式.5.1实验配置本文采用IntelXScale处理器,处理器参数(可调的离散频率和对应功耗)使用文献[15]中的实际值(如表1中所示).jfj/MHzfj(规约后)Pj/mWidle355.0012345表1中,j表示处理器的频率等级.实验中,处理器核数M分别定为4,8,16和32图3处理器为4,8,16和32核时,0-1ILPs、H-L、L-H算法在EDF调度下能耗的实验结果对比图个.因为过大的任务数可能会导致不可调度的情形,任务数N被定为[M/2,3M/2],即对应可调度的任务个数N(取整)分别为[2,6],[4,12],[8,24],[16,48].随机生成每个任务的周期T为random(0~20)+50,每个任务在并行度为1且功率最大的执行时间C为random(0~50)+1.如上所述,系统外设所消耗的能量为常量,可以通过如文献[15]中所测得的功耗值计算得到,所以下面实验主要进行处理器能耗的比较.H-L算法与L-H算法是通过适当降低CPU工作时的频率,来达到降低能耗的目的(DVS技术),因此,为了满足假设P(f)∝fα,α>1,处理器在工作时可调节的状态应满足f1/P1<…<fj/Pj<…<fmax/Pmax,表1中状态idle和状态1不会被用到,即实验所采用的参数为后4组.每个配置进行50组对比实验,实验结果取平均值.每组实验结果都以启发式算法中的最大值进行规约、绘图.实验运行在采用Intelcore22.83GHz32-bit处理器,2GB主存的WindowsPC上.0-1ILPs使用IBMILOGCPLEX工具进行求解.5.2实验结果图3是处理器为4,8,16和32核时实时任务在EDF调度下的能耗最优化的实验结果,图4是在RM调度下的结果.Page7图4处理器为4,8,16和32核时,0-1ILPs、H-L、L-H算法在RM调度下能耗的实验结果对比图从图中可以看到,H-L算法和L-H算法与0-1ILPs最优化算法结果相近(10%以内).由实验结果可知:(1)核数一定时,随任务数的增加而升高,CPU工作量增加,平均工作频率提高,故能耗增加.(2)核数一定时,且任务数较少时H-L算法和L-H算法与0-1ILPs性能、结果相同;任务数达到一定值时,H-L算法和L-H算法所求能耗比0-1ILPs略大.这是因为启发式算法为贪心法求局部最优解,而0-1ILPs为求全局最优解,当任务数较少时,结果相同,随着任务数的增大,误差出现,但因为本文算法所采用的评价标准、逼近方法较为合理,使得误差保证在10%以内.(3)H-L算法与L-H算法结果基本相同.6总结本文将多核实时系统中的能耗模型由连续模型改进为离散模型,分析了采用GangScheduling策略的并行任务的能耗特性,针对此特性,提出了两个启发式节能调度算法.论文进一步将该问题规划为一个0-1整形规划问题,通过工具求得最优解与本文算法对比.实验证明,本文算法是正确而有效的,可以达到几乎与最优解相同的节能效果.我们将在此工作基础上,进一步展开如下研究:(1)考虑更复杂的外设模型,即任务在使用不同设备集合时系统有选择性的关闭外设的情况.(2)考虑数据交换、同步、存储器存取等更多因素,以提出更全面的节能调度算法.
