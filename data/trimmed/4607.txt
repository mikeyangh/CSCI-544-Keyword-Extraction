Page1可信的云计算运行环境构建和审计1)(北京邮电大学软件学院北京100876)2)(北京邮电大学计算机学院北京100876)3)(北京邮电大学可信分布式计算与服务教育部重点实验室北京100876)摘要可信的云计算运行环境很大程度决定了云服务的推广和有效使用.采用可信计算技术的基本假设是所有在运行环境中安装的内核模块和应用程序都需要事先指定并已知其执行代码的完整性信息.这个假设在云用户实际使用时往往是不可能的.所以该文提出了一种将虚拟可信根vTPM和可信审计技术结合起来的用户可信运行环境构建与审计机制.对于体系结构栈中可事先固定的、在启动和运行时不变的组件,通过vTPM作可信根保证可信启动;对于运行过程中变化的、无法事先确定的组件,文中提出了一种可信审计的方法,即对用户虚拟机的运行态环境进行证据收集和证据审计,监测实际使用中用户运行环境的可信性.若用户运行环境处于不可信状态,则及时通知用户采取相应措施.最后文中基于该可信机制的原型系统对其有效性和性能代价进行定量测试和评价,实验结果表明:该机制针对典型的不可信威胁是有效的,且引入的性能代价对用户实际使用的影响可以忽略.关键词云计算;可信审计;虚拟可信平台模块;可信计算1引言云服务的推广使用需要云计算的可信性[1-2].但云计算提供给用户(Tenant)的运行环境是以虚拟机作为载体的[3],用户的运行环境和数据都存放在云端,从而失去了对物理环境的直接控制,云计算是否可信是云服务需要面对的重要问题.如何为用户提供可信的云计算服务,总结起来要面临的技术挑战如下:(1)在云计算模式下,控制权在云提供商(CloudProvider)和用户之间进行了分割.云提供商单方面申明可信很难让用户信服.所以用户运行环境的可信性,对于用户或独立第三方而言应该是可验证的.云提供商为了吸引潜在用户,也倾向于证明自己是可信的.然而,用户以虚拟机终端远程连接虚拟机进行管理和使用,或管理运行在云提供商的平台之上的程序或任务.其对运行虚拟机的物理硬件或云平台信息的了解是有限的,更很难知晓云平台是怎样组织和实现的.(2)传统的可信计算(TrustedComputing)技术利用可信任基和可信任链,通过审计验证可保证服务器的启动过程是安全可信的.但云计算面临的问题在于:用户的运行环境以虚拟机为载体,但仅仅保证服务器的可信启动是不够的,还要保证虚拟机运行环境安全可信,没受到恶意篡改或窃听.为了解决此问题,一种方法是扩展可信任链(TrustedChain),将其扩展到虚拟机内部,如vTPM(virtualTrustedPlatformModule)[4].然而,扩展可信任链的方法基于一个基本假设,即所有在用户环境中安装的内核模块和应用程序都需要事先指定并已知其执行代码的完整性信息(多是对内核或应用程序的执行代码计算其Hash摘要值).这个假设在云用户实际使用中往往不成立.针对以上挑战,本文提出了一种将虚拟可信根vTPM和可信审计技术结合起来的用户可信运行环境构建与审计机制.通过vTPM可信根,保证虚拟机在启动过程中BIOS(BasicInputOutputSystem)、启动程序、操作系统内核等体系结构栈底层的完整性;通过可信审计的方法对用户虚拟机的运行态环境进行证据收集和证据审计(什么时候收集证据和进行可信审计可以根据实际情况制定相应策略,如周期性或事件触发的收集和审记),及时检测在实际使用中无法事先固定的用户运行环境的可信性.若用户运行环境处于不可信状态,则及时通知用户,并采取相应措施.本文第2节介绍和分析国内外关于云计算可信运行环境的相关研究工作;第3节详细描述本文设计的可信的用户运行环境的构建和审计机制;第4节给出基于上述机制的原型系统实现过程以及对上述机制的有效性和引入的性能代价进行实验评价和分析;第5节对本文工作进行总结.2相关工作对于如何构建可信的云计算运行环境,目前主要有两类工作.第1类工作是从虚拟机管理器出发,设计TVMM(TrustedVirtualMachineMonitor)[3],把虚拟机管理器作为可信任基TCB(TrustedCodeBase),然后扩展可信任链(TrustedChain),将其扩展到虚拟机内部.Terra系统[5]在可信的虚拟机管理器上运行不同的虚拟机系统,使得不同应用程序的运行环境也不相同.该系统由Garfinkel等人[5]在非开源商用虚拟机管理器VMwareGSX上设计实现,不开源,不利于推广.PVI(PrivateVirtualInfrastructure)是一种新的策略管理安全模型,由Krautheim[6]主要针对云计算提出,这种管理与安全模型通过划分云计算中服务提供商和客户的安全责任,降低了各自的安全风险.Khan等人[7]利用Eucalyptus云平台,通过远程验证虚拟机尤其是存储控制器(SC)的完整性来保证与VM(VirtualMachine)绑定的虚拟存储环境也是可信的.这种可信计算机制不考虑对用户数据的保护,并且由于数据的动态变化,从而该机制无法真正保护数据的完整性、隐私性等.Cheng等人[8]基于Xen,在假定云提供商可信、云的服务提供商不可信的前提下,设计和实现了一种可信的虚拟机运行平台.用户可以按照完整性要求保存敏感数据,只有用户信任的程序才能访问敏感数据,并提供内存保护机制.但是这种方案需要修改VMM(VirtualMachineMonitor),故带来很高的复杂性,且不具有通用性.第2类工作是扩展可信任链(TrustedChain),在可信的服务器基础之上,将可信任链扩展到虚拟机内部,如vTPM(virtualTrustedPlatformModule).Berger等人[4]通过Xen虚拟机管理器,利用硬Page3件虚拟化技术在虚拟化平台上为每个虚拟机创建一个虚拟的TPM实例,在dom0端通过虚拟TPM管理器管理虚拟机中虚拟的TPM实例,并响应其发出的请求.Stumpf等人[9]通过硬件TPM(TrustedPlatformModule)复用的方式,在硬件TPM上为每个虚拟机构建各自不会相互干扰的TPM使用环境.这种方式使机制关系非常复杂,可信任链加长.Paul等人[10]采用虚拟机共享TPM的方式,通过修改虚拟机管理器实现,导致可信任链较长,其验证比较繁琐.Kursawe等人[11]指出设计和实现TPM应尽量简单,认证方式不能过于复杂.他们重新定义可信边界,设计和实现了uTPM,降低了使用的复杂度,并且支持不同的运行环境.但这种方式中部分数据容易暴露uTPM的硬件信息,如远程认证签名数据.除以上工作外,国内外学者还做了其他相关的研究工作,Liu等人[12]基于完整性度量架构技术IMA(IntegrityMeasurementArchitecture)[13]设计了一种动态度量架构,可以度量虚拟机运行时的完整性.Bertholon等人[14]基于TPM模块实施方案应对IaaS云平台中的可信和完整性问题,提出了两个协议,前者协议为基于硬件TPM的远程资源验证协议TCRR(TPM-basedCertificationofaRemoteResource),保证虚拟机管理器的完整性;后者协议为基于虚拟TPM的VerifyMyVM协议,验证虚拟机的完整性.但上述方法需要改动虚拟机,在虚拟机中安装内核模块和用户程序,且与用户虚拟机操作系统相关,不利于推广.3用户可信运行环境构建与审计机制在云计算模式下,虚拟机是运行用户程序或任务的主要载体,所以保证虚拟机运行环境的可信性才能保证云计算的可信性.影响用户运行环境可信性的典型因素如:虚拟机镜像遭受篡改和破坏;运行的虚拟机实例被替换或者迁移;用户虚拟机中安装有恶意的内核级或用户级程序;虚拟机实例受到外来攻击等.而云提供商为了争取用户而趋向于为用户环境的可信性提供支持和证据,所以本文跟同类工作采用同样的假设[4,13,15],即:云提供商的物理服务器是可信的,不能随意安装恶意程序,同时云提供商的物理硬件也是安全可信的,没有被恶意篡改,并且有严格的控制策略保护其完整性,防止如冷启动攻击(Coldbootattack)等硬件攻击.3.1体系结构可信的云用户运行环境主要涉及两个机制,即可信的体系结构栈构建和运行时可信性审计.前者通过扩展可信任链,在可信虚拟机管理器VMM(VirtualMachineMonitor)基础之上,通过vTPM将可信机制传递到虚拟机内部,即用户使用的虚拟机运行环境;后者则在物理服务器Host中部署用户信任的虚拟机内省VMI(VirtualMachineIntro-spection)[16]和审计策略定制模块,由VMI将被审计虚拟机的内存内容旁路和备份,并由审计策略定制模块进行审计分析.图1以Xen[17]虚拟机管理器为例,展示了用户可信运行环境构建与审计的体系结构.其中,由物理服务器中部署的TPM芯片作为可信任根,通过软件vTPM将可信任链由物理服务器扩展到VMM,从而进一步延伸到虚拟机体系结构栈中.但是因为用户运行环境可能是动态改变的(如软件升级、安装新软件、虚拟机配置改变等),所以另一方面,用户虚拟机运行时的环境是否可信是由审计策略定制模块Auditor发起对用户虚拟机的审计请求,由虚拟机内省VMI模块通过对相应虚拟机内存数据进行获取和拷贝,交由审计策略定制模块进行解析和分析的.Page43.2基于可信任链的用户环境启动过程使用TCG规范的可信计算技术[18]保证了云平台物理服务器的可信启动.如图2所示为用户虚拟机的可信启动过程,首先是可信的基于硬件TPM的服务器,扩展可信任链到虚拟机内部.可信任链的传递依次经过物理服务器、操作系统内核、虚拟机管理器.用户以虚拟机终端远程连接虚拟机进行管理和使用,或管理运行在云提供商的平台之上的程序或任务.为了保证用户的虚拟机运行环境是可信的,使用虚拟TPM作为虚拟机的可信根,通过哈希度量所有涉及的可执行代码,将度量哈希值扩展到虚拟TPM相应的PCR(PlatformConfigurationRegister)寄存器中.当虚拟机启动后,核心可信度量根CRTM(CoreRootofTrustMeasurement)首先计算自身代码的哈希值并存储到PCR0寄存器中,然后验证操作系统启动程序(Bootloader)的完整性,计算其哈希值并存储到PCR4寄存器中.系统控制权转交给Bootloader后,再由其计算整个操作系统内核镜像的完整性,并将哈希值保存到PCR5寄存器中,最后加载操作系统内核,进入运行状态.通过以上过程也就保证了用户虚拟机的可信启动.图2用户虚拟环境启动过程的可信任链依赖与控制转移过程3.3用户环境运行时可信证据的收集与审计当需要进行可信证据收集时,策略定制模块Auditor发送命令给虚拟机内省模块,获取可信证据.如图1所示,该流程主要包括以下步骤.(1)策略定制模块Auditor发送命令给虚拟机内省模块.(2)虚拟机内省模块从本地的内核符号表中读取内核的虚拟地址信息,如果本地内核符号表与虚拟机的内核不匹配,则通过网络查询对应的内核符号表.(3)根据虚拟机CR3寄存器的内容进行寻址转换操作,映射到页表目录(PageDirectory),如图3所示.(4)由页表目录映射到页表(PageTable)最终接入虚拟机管理器,从而得到所需的内存数据.(5)得到的内存数据以二进制的形式逐级返回给虚拟机内省模块.(6)数据传送给模块Auditor并保存下来,作为审计时的证据.图3虚拟机内存地址转换涉及的主要数据结构用户运行环境运行时的可信性可以通过5个方面进行审计,即进程、模块、打开的文件、网络以及内存结构数据.审计方法跟用户虚拟机的操作系统相关,不失一般性,本文以Windows操作系统为例进行说明.3.3.1进程审计进程审计主要检测和查看用户态恶意程序.操作系统内核会事先分配内存页到特定的内存池中.当创建一个进程时,操作系统从内存池中将存储空间以页为单位分配给该进程.每个进程由一个_EPROCESS结构维护其信息,如图4所示.Windows提供的进程列举功能和常规进程扫描工具往往通过遍历所有活动进程连接起来的ActiveProcessLinks双向链表而得到系统中正在运行的活跃进程.但是经过特别设计的恶意程序会删除某些进程在该链表中的表项,从而避开扫描,起到隐藏进程的作用,如FURootkit①.本文的审计方法从进程的内存页分配机制出发,“盯住”创建进程时分配内存页的数据结构,①Virusandthreatsdescriptions.Rootkit.Win32.Fu.AccessedPage5即由POOL_HEADER结构(池头结构)保存与进程分配有关的信息,通过分析POOL_HEADER结图4Windows操作系统进程结构3.3.2模块扫描模块扫描查看虚拟机运行环境加载的内核态驱动程序和动态链接库.Windows操作系统的模块结构如图5所示,全局结构TEB(ThreadEnviron-mentBlock)含有指向进程环境块PEB(ProcessEnvironmentBlock)的指针,其中PEB是管理所有模块信息的结构体.每个模块的信息由LDR_DATA_图5Windows操作系统模块结构本文的可信机制除了进行以上链表扫描外,还通过分析POOL_HEADER以发现针对链表指针修改的模块隐藏.这是因为Windows操作系统采用池标记来区分不同的模块,当模块被分配内存时,系统需要指定其池标记.POOL_HEADER(池头结构)含有每个分配单元的信息和池标记,所以通过扫描物理内存的池标记来找出LDR_DATA_TABLE_ENTRY构不仅可以获得系统中运行的进程,还能发现隐藏进程的信息.TABLE_ENTRY(结构)管理,所有模块通过双向链表InLoadOrderLink连接起来.PEB中的子结构PEB_LDR_DATA含有指向所有模块的双向链表,所有模块通过该双向链表连接起来.大多数模块扫描工具通过遍历该链表,便可知道系统所加载的模块.恶意程序也往往通过修改该双向链表的结构来实现隐藏模块的目的,如FURootkit.结构,进而能够发现隐藏的模块.3.3.3文件审计文件审计是为了查看用户环境在运行时打开了哪些文件.在Windows系统中,每一个打开的文件对应一个FILE_OBJECT内存结构,该结构由操作系统的分页池统一进行分配.文件的创建过程如图6所示.当要打开一个文件时,需要两个动态链接Page6库:C语言运行时动态链接库和Windows动态链接库.应用程序的打开文件操作调用C语言运行时的库函数fopen,fopen接着调用Windows动态链接库函数CreateFile.之后,Windows动态链接库会调用Ntdll.dll中的函数NtCreateFile.Ntdll.dll含有进入内核模式的系统服务调度器的指令,系统服务调度器通知I/O管理器进行文件创建.I/O图6Windows操作系统文件创建流程和涉及的内存数据结构在审计过程中,由于文件对象的创建会与POOL_HEADER结构相关联,POOL_HEADER中会存放文件对象的池标志等信息,所以通过确定这种池标志找到相应的FILE_OBJECT结构,就可以扫描出系统中进程打开的所有文件.3.3.4网络连接扫描网络连接扫描是为了查看运行环境中网络连接和活动状态.Windows系统的TCP/IP体系结构如图7所示.以数据包发送为例,应用程序将要发送的数据通过Socket接口形成IP数据包,交由TCP/IP驱动程序Tcpip.sys处理,处理过程主要有3个部分:首先,Tcpip.sys将数据包发送给防火墙驱动程序Ipnat.sys,防火墙检查该数据包是否是Internet控制消息协议(ICMP),如果ICMP设定为阻止,那么防火墙就丢弃该数据包.然后,防火墙检查数据包是否是点到点隧道协议(PPTP),如果是,就分析数据包以确定通用路由封装(GRE)的调用ID,使得GRE数据包能够传入.完成之后防火墙将数据包发回给Tcpip.sys,由IP转发组件确定下一跳IP地址和端口.其次,Tcpip.sys将数据包发送给IP过滤驱管理器负责管理文件系统、缓存管理器、设备驱动程序、网络驱动程序,当其收到文件创建命令后,通知对象管理器创建文件对象的操作,成功创建后,对象管理器将对象句柄返回给I/O管理器.最后I/O管理器将文件句柄返回给Windows动态链接库.因此,通过文件扫描可以发现进程所打开的文件.图7Windows操作系统中TCP/IP体系结构动程序Ipfltdrv.sys,通过比较下一跳IP地址和系统配置的出口IP包过滤器,如果地址是允许出口的,就将数据包返回给Tcpip.sys,如果地址是不允许的,就丢弃.最后,Tcpip.sys将数据包发送给Ipsec驱动程序Ipsec.sys,Ipsec确定是否让数据包Page7通过、阻止或保护.如果让数据包通过,则将数据包不做处理返回给Tcpip.sys;如果阻止数据包,则将数据包丢弃;如果保护数据包,则对数据包进行Ipsec加密后返回给Tcpip.sys.以上过程中的相关信息将会保存在Tcpip.sys驱动程序某一特定符号所指向的单向链表结构中.因此,通过扫描该单向链表可审计其网络连接信息,包括进程号、发送端IP地址、端口IP地址、接收端IP地址和端口等.3.3.5内存数据结构审计内存中特定的数据可以采用字符串搜索的方式进行审计.字符串的搜索位置分为内核空间和进程空间,通过搜索内核空间和每个进程的空间,将符合字符串数值的二进制数据转换为字符串,同时得到一些额外的审计信息,包括该字符串在内存中的物理地址、该字串处于内核空间还是进程空间、该字符串的虚拟地址等.4实现和评价4.1实验环境基于上述机制的原型系统采用软件libtpm[19]模拟硬件TPM,充当vTPM的后端,虚拟机管理器使用开源Xen平台,在Xen平台中实现vTPM模块仿真硬件TPM,使每个虚拟机拥有一个vTPM,作为虚拟机的可信根,其体系结构如图1所示.TDD(TPMDeviceDriver)模块与TPM硬件交互,作为硬件TPM的设备驱动程序,该驱动在目前主流操作系统版本,如Windows,Linux,MacOS中默认安装.使用VMI开源工具VMITools[20]旁路和获取用户虚拟机内存数据.原型系统的部署配置信息如表1所示.配置项CPU内存二级缓存(L2Cache)硬盘容量4.2实验结果及分析实验和评价以构建可信的云计算运行环境机制的有效性和可信机制带来的额外代价作为目标进行分析.4.2.1有效性实验及分析与传统可信计算的假设场景不同,云用户的行为是无法事先严格规定的,同时,用户虚拟机的配置、安装软件、自定制程序等都可能是动态变化的,所以无法采用可信任链的方式对用户虚拟机的所有程序都事先固定其Hash摘要值.因此,本文的机制将可信任链的方式与内存审计的方式结合起来,通过vTPM可信根来保证用户运行环境的虚拟硬件、BIOS等的可信性,通过内存审计来检测和仲裁运行时的不可信行为.以Windows环境中的典型内核态木马Win32.FuRootkit为例.FURootkit是一种可以隐藏进程的恶意程序,能够将自身隐藏起来而不被宿主机发现.FURootkit会在系统中安装内核态驱动程序,通过驱动程序来删除活动链表PsActiveProcessList中的进程信息,而主流安全工具,如PoisonIvy①,主要通过扫描PsActiveProcessList链表来获取当前环境的进程信息,因而无法检测到隐藏的进程.如图8(a)所示,采用主流安全工具查看系统进程,并不能发现FURootkit创建的进程.而通过本文提出的可信机制对内存信息进行审计,可通过判断进程的内存页使用情况从而检测隐藏进程.进程内存页的分配会存储在POOL_HEADER中,POOL_HEADER是一个操作系统分配内存页的池子,进程在创建时,POOL_HEADER就存有该进程的相关信息,即使Rootkit将进程隐藏,该进程在POOL_HEADER中的内存页分配的标志也不会立即消失.所以对POOL_HEADER链表进行扫描,可以发现隐藏的进程以及目前已经结束的进程,如图8(b)所示.与此类似,FURootkit通过修改LDR_DATA_TABLE_ENTRY指针,删除模块在双向链表InLoadOrderLink中的对应项,可隐藏系统模块,从①PoisonIvy[EB/OL].http://www.poisonivy-rat.comPage8而避开采用主流安全工具的扫描,如Icesword①无法检测被隐藏的模块,其结果如图9(a)所示.而本文提出的可信机制是通过扫描和审计POOL_HEADER结构,所以即使模块从InLoadOrderLink链表中删除,其POOL_HEADER结构也含有该模块的信息,如图9(b)所示.4.2.2性能实验及分析性能实验包括证据收集和审计的性能评价以及可信机制对虚拟机正常用户环境的性能影响.证据收集主要有同步和异步2种方式.同步方式是把用户虚拟机的内存转储(dump)为硬盘文件,再对文件进行可信性审计;异步方式则不需要每次审计都对虚拟机的完整内存映像进行转储,而可以有针对性地、更细粒度地访问和获取特定的内存内容,与此同时并进行审计分析.一般来说,影响证据收集性能的因素主要包括用户虚拟机内存的大小,以及用户虚拟机的计算性能.首先,分析用户虚拟机的计算配置对证据收集性能的影响.图10展示了在给定虚拟机内存大小,并保持虚拟机其他配置不变的情况下,CPU核数(Cores)对同步证据收集完成时间的影响.从图10可以发现,在典型的内存配置下(2GB,4GB,10GB,24GB),内存镜像的转储时间几乎是一条直线,即表明:虚拟机的计算能力对可信证据的收集几乎没有影响.不失一般性,在接下来的实验中,用户虚拟机配置为6核CPU.另外可以看出,内存镜像的转储时间是随着内存大小增加而线性增加的,这是因为内存镜像转储的主要时间开销在I/O操作上.图11给出了在同步方式下,进行一次可信证据收集和审计操作(以列举当前系统中运行的所有进程为例)所完成的时间.由此可以发现,完成时间跟虚拟机内存大小基本成正比关系,这是因为绝大部分的时间花费在将内存数据转储到文件中.以10GB内存配置为例,证据收集花费的时间是155.05s,而进程审计的时间花费是1.87s,只占前者的1.2%.而对于审计操作来说,由于其主要处理字符串匹配和数据结构搜索的情况,跟内存转储文件的大小没有关系,所以审计操作的完成时间并不随内存大小的增加而线性增加,如图12所示.图11在同步方式下,一次可信证据收集和审计操图12展示了在异步方式下,可信证据收集和审计的性能,以及在典型的审计操作下,异步方式的完成时间与直接对转储文件进行审计的时间对比.从图12可以看出,因为异步方式并不需要先把整个内存映像转储到文件中,而可以直接对细粒度获取的特定内存内容进行审计,所以异步方式下证据收集加上审计操作的总共完成时间跟同步方式下的审计时间是相当的.而从具体数值来看,异步方式大大节省了一次证据收集和审计的时间.以进程审计为例,在10GB内存配置下,同步方式的完成时间是156.92s,而异步方式的完成时间是1.95s.测试引入可信机制对用户虚拟机运行环境带来①Icesword[EB/OL].http://icesword.softonic.cnPage9图12在异步方式下,可信证据收集和审计的完成时间以及与同步方式的审计时间的对比的性能损耗,可以参照未引入可信机制之外的硬件设施及软件设施相同的普通虚拟机的性能.因为可信证据的审计是对用户虚拟机内存数据的旁路操作,而且跟用户对虚拟机的操作可以异步进行,所以本文的性能评价主要考虑可信任链所引入的代价.名称IOZone表2性能测试使用工具介绍BYTEmarkBYTEmark基准测试套件利用不同的计算密集型算法,测试系统的处理器、高速缓存、协处理器、Memory性能.PostMarkTPCC-UVa[21]使用表2的性能测试工具对引入可信机制的虚拟机运行环境与未引入可信机制的虚拟机运行环境作性能测试和对比,结果如图13所示.从图13(a)可以看出,对于I/O操作,iozone测试结果表明引入可信机制的虚拟机运行环境和未引入可信机制的虚可信用户运行环境会计算涉及的可执行代码的哈希值并扩展到vTPM的PCR寄存器中,这样势必会给程序带来额外的执行代价.对相同机器配置的虚拟机,选用不同类型的测试工具对虚拟机性能进行对比测试.测试工具的名称和说明如表2所示.功能描述拟机运行环境I/O吞吐率基本一致,并且随着文件大小的增加,引入可信机制的虚拟机运行环境引入的性能损耗基本可以忽略.这是因为引入可信机制的虚拟机运行环境的额外性能代价主要在于文件打开时对可信证据度量哈希和对vTPM的扩展操作,Page10图13使用性能测试工对不同类型用户虚拟机运行环境进行性能对比而对文件的读写性能影响很小,但iozone测试并不考虑文件的打开时间.图13(b)所示为对引入可信机制的虚拟机运行环境和未引入可信机制的虚拟机运行环境关于每秒完成文件事务型数量的对比,可以看出引入可信机制的虚拟机运行环境比未引入可信机制的虚拟机运行环境每秒完成的事务数量有所减少.这是因为对于文件事务型处理测试,如PostMark,由于处理每个事务时,可信机制需要对事务操作进程运行代码进行哈希,获取摘要值,并扩展到vTPM的PCR寄存器中,故每个事务完成时间会有所增加.但是可信机制对于相同的事务操作不必再次获取摘要,也不用将摘要保存到寄存器,所以,越是大规模的文件处理,文件并发数越大,可信机制越可以节省操作时间,可信机制带来的额外代价相对越小,因而引入可信机制与未引入可信机制之间的差距也相对越小.①②③对于计算密集型操作,如图13(c)所示,一般而言引入可信机制的虚拟机运行环境低于半可信虚拟机运行环境,半可信虚拟机运行环境低于未引入可信机制的虚拟机运行环境.从图13(c)可以看出可信机制、半可信机制及未引入可信机制之间的虚拟机运行环境计算性能差别不大,性能损耗不足2%.这是因为引入可信机制的虚拟机运行环境只在计算程序运行前执行可信机制、执行可信证据收集和对vTPM的扩展操作,而当程序运行后引入可信机制的虚拟机运行环境与未引入可信机制的虚拟机运行环境相同,性能损耗相对更小.本文还利用TPCC-UVa测试工具评价可信机①②③Page11制引入的数据分析性能损耗.TPCC-UVa[21]是一个遵循TPC-C的开源项目.通过在一段时间内向系统并发发送交易请求,来模拟一系列分布式在线交易(OLTP系统)的执行.在此实验中TPCC-UVa测试时间配置为1h,仓库为9个,启动时间为120s.如图13(d)所示,前120s启动时间里,引入可信机制的虚拟机与未引入可信机制的虚拟机吞吐率在到达峰值以前,引入可信机制的虚拟机运行环境的吞吐率相对稍低,而在各自吞吐率达到峰值之后,可信机制带来的额外代价相对较小.5总结如何为用户提供可信的云计算服务是云计算模式面临的重要问题.但采用可信计算技术的基本假设是所有在用户虚拟机中安装的内核模块和应用程序都需要事先指定并已知其执行代码的完整性信息.这个假设在云用户实际使用时往往不成立.针对该问题,本文提出了一种将虚拟可信根vTPM和可信审计技术结合起来的用户可信运行环境构建与审计机制.对于体系结构栈中可事先固定的、在启动和运行时不变的组件,如BIOS、启动程序、操作系统内核,通过vTPM可信根保证可信的启动;对于运行过程中变化的、无法事先确定的组件,如内核模块、静态或动态链接库、用户态程序,本文提出了一种可信审计的方法,对用户虚拟机的运行状态环境进行证据收集和证据审计,及时检测在实际使用中无法事先固定的用户运行环境的可信性.若用户运行环境处于不可信状态,则及时通知用户,并采取相应措施.本文实现了基于该可信机制的原型系统,并用实验的方法进行了有效性评价和性能代价评价,结果表明,该机制针对典型的不可信攻击是有效的,且引入的性能代价对用户实际使用的影响可忽略.
