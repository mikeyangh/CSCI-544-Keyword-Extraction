Page1一种基于问题框架的软件密集型系统增量需求问题求解方法董瑞志1),2)彭鑫1)赵文耘1)1)(复旦大学计算机科学技术学院上海201203)2)(常熟理工学院计算机科学与工程学院江苏常熟215500)摘要软件密集型系统的增量需求是在原有需求基础之上,以增量、迭代的方式提出的新需求.在增量需求分析及求解过程中,如何在复用现有解决方案的基础上诱导出增量需求的解决方案,如何验证增量需求解决方案的正确性,如何评估增量需求解决方案的潜在风险,就成了必须解决的重要问题.文中把增量需求解决方案的求解问题视为一个典型的软件开发问题———增量需求问题,并据此提出一种基于软件开发问题框架的增量需求问题求解方法.该方法采用增量、迭代的方式求解增量需求的解决方案,把解决方案的验证问题转换成可满足问题进行求解,同时复用特定关注点知识评估解决方案的潜在风险以支持后续的设计决策.文中通过一个基于科技助老系统的案例研究,展示了应用该方法求解增量需求解决方案的过程,验证了方法的有效性.关键词软件开发问题框架;需求建模;需求分析;软件密集型系统1引言目前,越来越多的软件产品以创新型的软件密集型系统(Software-intensiveSystem)的形式推出并占领市场.其需求工程已成为一个贯穿软件生存周期、跨越项目和产品边界的持续过程[1-2].在软件密集型系统的需求工程过程中,软件需求往往以增量、迭代的方式在现有需求基础上进行诱导和分析.例如,在现有产品基础上根据用户反馈、市场分析增量确定下一版本产品需求,或根据差异化使用环境和用户需求确定变体产品需求.在增量需求诱导及分析过程中,需解决如下问题:(1)分析现有解决方案,识别其中可复用的软件规约,进而诱导出增量需求的解决方案;(2)检验增量需求解决方案的正确性,保证增量需求解决方案能够满足增量需求,同时对已有需求不造成任何负面影响;(3)识别并评估增量需求解决方案的潜在风险,为后续设计决策提供支持.软件密集型系统中需求的满足是软硬件解决方案及相关上下文要素共同作用的结果.因此,求解软件密集型系统增量需求问题时需要综合考虑上下文环境、解决方案和需求三者之间的关系.软件开发问题框架[3]强调对软件系统将要作用的上下文环境的刻画,指出需求工程的任务是开发出在给定环境中能够满足涉众需求的软件产品,强调通过复用已有软件开发问题的求解经验(即问题框架)诱导出给定的软件开发问题的解决方案.因此,软件开发问题框架可以为增量需求问题的求解提供系统化的指导.在需求工程领域,软件开发问题框架方法已经被用于分析软件需求的定制、复用和演化[4-6].以软件开发问题框架为基础,Dao等人[4]使用特征模型描述软件产品族中需求的可变性,利用软件开发问题框架方法指导特征模型的定制及软件资产的复用来满足不同用户的需求,但未涉及特征(需求)演化问题.Ernst等人[5]关注需求演化问题的求解,从用户需求、软件解决方案和给定领域三者之间的因果关系出发,提出面向目标的增量需求解决方案诱导方法.Ernst等人强调在已经明确增量需求问题的情况下诱导出解决方案,并未涉及如何分析及明确增量需求问题的问题结构.Tun等人[6]关注软件密集型系统软件产品线中需求(/特征)演化问题.他们把已实现的特征作为可复用的基本单元,通过引入表示增量需求解决方案的包装机器来满足增量需求,使用事件演算器分析增量需求解决方案的正确性,但并未关注解决方案的风险分析问题.鉴于此,本文提出一个基于软件开发问题框架的软件密集型系统增量需求解决方案求解方法.该方法利用基于问题框架的需求分析技术,抽取出现有需求及其解决方案作为增量需求分析的基础.针对涉众提出的增量需求,采用增量、迭代的分析过程诱导出增量需求的解决方案.该方法还将增量需求解决方案的验证问题转换成可满足问题(Proposi-tionalSatisfiabilityProblem)[7],使用可满足性(Satisfiability,SAT)求解器检验增量需求解决方案的正确性.一旦发现该解决方案无法满足增量需求,则进入一个新的迭代过程,重新求解增量需求的解决方案.重复上述过程,直至得到正确的增量需求解决方案.此外,该方法还复用特定关注点知识,识别出增量需求问题解决过程的潜在风险,为增量需求解决方案的完善及后续设计决策提供支持.本文第2节介绍背景知识;第3节给出增量需求问题的定义;第4节描述本文提出的增量需求解决方案的诱导方法;第5节介绍应用该方法求解科技助老系统中增量需求解决方案的过程,展示了方法的有效性;第6节描述相关工作;最后,总结全文并展望下阶段的研究工作.2背景知识本节首先介绍软件开发问题框架的基本概念和思想,然后介绍Alloy语言及其建模分析工具AlloyAnalyzer.2.1软件开发问题框架软件开发问题框架[3]强调对软件将要作用的环境进行刻画,使用需求、软件和上下文环境之间的因果关系来描述软件开发问题.在该方法中,求解一个软件开发问题就是要诱导出一个在给定的环境W中,能够满足用户需求R的解决方案S,即一个软件开发问题可以表示成式(1):软件开发问题框架方法使用问题图刻画软件开发问题.二元符号“|-”表示其左件元素的满足将导致右件元素的满足,即如果给定的现实世界W中要素满Page3足其领域假设,机器M满足机器规约,将使得需求R得到满足.例如,一个利用信息技术服务于老年人日常起居的科技助老系统现有解决方案仅提供了一键拨号服务.借助该服务,独居老人可以按下老人手机上的求助按钮与社区呼叫中心连接,社区呼叫中心系统将同步显示呼叫者的姓名、年龄、地址、身体状况、关爱员(如老人的亲属或保姆等)的联系方式等信息.社区服务中心的值班人员了解到老人的紧急情况后,可以第一时间通知老人关爱员予以处置.可以用图1所示的问题图表示一键拨号服务所关联的软件问题(基于篇幅的限制,省略了领域现象的详细描述).在图1中,矩形方框是给定领域(GivenDomain),表示软件开发问题所涉及的现实世界中的要素;带有一条竖线的矩形方框是被设计的领域(DesignedDomain),表示可以由软件开发人员自由设计的描述或模型的物理实现;带有两条竖线的矩形方框是机器(Machine)领域,表示开发人员需要开发的软件解决方案;领域之间的实线连接表示共享现象(Phenomena),描述了领域与领域之间的接口;实线的椭圆表示物理表示的描述,反映了关联的领域现象之间的关系;虚线的椭圆表示需求,需求与领域之间的虚线连接表示需求对领域现象的引用,而需求与领域之间虚线箭头表示需求对箭头指向领域的领域现象的约束.需求对领域现象的引用和约束表达了用户期望的现实世界效果.机器和被设计的领域共同组成了满足特定需求的解决方案.需求引用及约束的现象构成了需求现象的集合,机器控制及引用的现象则构成了机器现象的集合.对于科技助老系统而言,老人属于现实世界中的要素,因此把老人表示成给定领域Older;紧急呼叫服务是开发人员要建立的软件系统,采用机器EmergencyCallService表示;被设计的领域CallRecord记录老人呼叫社区服务中心的情况,如呼叫者姓名、年龄以及当前发生的应急情况等信息.软件开发问题框架方法总结了已有的问题分析经验,归纳了5种原子问题类(即问题框架),包括命令式行为框架、需求式行为框架、信息显示框架、转换框架和工件框架.每一种问题框架表示一类典型的软件开发问题,由问题框架图、领域特征和框架关注点三部分组成.分析特定的软件开发问题时,可以通过匹配问题框架的方式复用已有的问题分析经验,得到给定的软件开发问题的解决方案.软件开发问题解决方案的求解需要先后进行上下文分析、问题分析和问题渐变.上下文分析界定了软件开发问题的边界,指明了问题所涉及的机器及现实世界中的领域要素,通过共享现象标识了机器与领域之间的连接,并使用上下文图表示问题的上下文.问题分析将用户需求引入到上下文图之中,通过需求对现实世界中领域现象的引用及约束关系表明目标机器将要对现实世界的作用效果,建立给定问题的问题图.问题渐变根据需求现象与机器规约现象之间的因果关系,以问题框架的框架关注点为指导,把原先使用领域现象表示的用户需求不断进行改写(Rephrase),最终得到仅使用机器现象描述的需求,即机器规格说明.通过问题渐变得到的机器规格说明也就是在给定的上下文环境中能够满足用户需求的解决方案.需要指出的是,问题渐变的思想最早由Jackson[3]提出,但他并未给出如何实现问题渐变.可以采用需求渐变(RequirementsProgression)[8]或问题约简(ProblemReduction)[9]等技术实现问题渐变.诱导出解决方案之后,可以使用正确性论证技术检验所取得的解决方案能否满足用户需求.正确性论证[3]是指在机器满足机器规约、环境要素满足各自的领域假设的前提下,论证给定的用户需求能否得到满足.如果通过了正确性论证,则说明该解决方案能够满足用户需求;否则,需要重新设计给定问题的解决方案.此外,问题框架总结了解决软件开发问题时潜在的困难,形成特定关注点.特定关注点指明了所有软件开发问题都可能存在的求解困难,包括溢出关注点、初始化关注点、完整性关注点、身份关注点和可靠性关注点等等.2.2Alloy语言Alloy语言[10]是由Jackson提出的一种基于关Page4系逻辑的形式化语言,它拥有专用的SAT求解器AlloyAnalyzer提供建模支持.使用Alloy语言描述一个软件开发问题,需要先建立一个表示软件开发问题框架方法基本元素的元模型[11](如图2所示);然后,形式化描述所关注的软件开发问题.//ConstructorsofthePFapproachabstractsigDomainextendsConstraint{}abstractsigMachineextendsConstraint{}abstractsigRequirementextendsConstraint{}/Eachelementassociateswithasetofconstraintswhichtheelementmustguaranteeinordertoensuretheprescribedrequirement/abstractsigConstraint{}sigSatisfiedinConstraint{}sigUnsatisfiedinConstraint{}在图2中,软件问题涉及的要素被划分为给定领域、机器和需求三类,分别用抽象型构Domain、Machine和Requirement表示.由于任何机器、现实世界领域或需求都具有各自需要满足的约束,为此引入抽象型构Constraint表示.按照是否满足各自的约束,我们把软件问题中的要素(机器、现实世界领域和需求)划分为满足给定约束的元素和不满足给定约束的元素,分别用抽象型构Satisfied和Unsatisfied表示.Alloy语言中,型构表示具有相同特征的一组元素的集合,抽象型构是一种特殊型构,其自身不能实例化,只能够通过继承(extends)关系产生其子型构,然后实例化其子型构才能产生具有特定属性的个体元素.使用Alloy语言形式化描述某个软件开发问题时,先建立一个Alloy模型(Module)表示关注的软件开发问题;然后,定义软件开发问题中关联的现象,描述问题关联的领域、机器和需求.以科技助老系统中给定领域“老人”的形式化描述(如图3所示)为例.老人是给定领域,用型构Older表示.Older是Domain的子型构,表示老人隶属于给定领域的范畴.老人关联的领域现象表示成型构域,例如把老人的姓名表示为Older的型构域name.为了使得“一键拨号服务”的正确执行,需要老人施行的动作则表示成Older中的型构约束.可以使用Alloy语言把正确性论证表示成断言RequirementArgument(如图4所示),然后利用AlloyAnalyzer的可满足性检测功能检验断言的满足情况.运行断言,如果AlloyAnalyzer返回反例,表明软件开发问题的解决方案无法满足给定需求;否则,说明诱导出的解决方案能确保需求的满足.论证某一个软件问题中需求满足情况时,可以把图4中的Machine、Domain及Requirement特化为给定问题中的机器集合、给定领域的集合和/或需求集合,实现面向特定问题的正确性论证.3增量需求问题的定义软件密集型系统的增量需求是指在现有需求基础上提出的新需求.这些新需求往往与涉众需求或上下文的变化相关.增量需求问题是一个典型的软件开发问题,用来求解增量需求的解决方案.对于一个表示为W,S|-R的软件开发问题,其增量需求问题可以以下面两种情形之一或其组合的方式出现:模式1.系统将要作用的上下文环境及其约束不变,涉众在现有需求的基础上提出新需求,需要引入新的解决方案予以满足,即其中,R△表示涉众提出的新需求,S△表示在原有解决方案S基础上所开发的增量解决方案,“;”连接符最早由Salifu等人[12]提出,用来连接被更新要素与相应变更.例如,在科技助老系统中,涉众提出新需求,希望系统监测居家老人的异常行为,并提供相应的应急处置服务.模式2.涉众需求不变,但是软件将要作用的上下文环境发生改变,需要开发新的解决方案来适应环境变化,即Page5其中,W△表示软件系统将要作用的上下文环境所发生的变化,S△表示在原有解决方案S基础上开发的增量解决方案.例如,科技助老系统的初始目标用户群是具有自理能力的独居老人,软件企业计划拓展该软件系统的目标用户群以服务失智失能的老年人群.分析现有的解决方案发现现有解决方案要求老人具有自主行为的能力,而失智失能的老人可能无法满足这项假设,因此必须设计新的解决方案以服务失智失能老人.4增量需求解决方案求解方法本节首先概述增量需求问题解决方案求解方法,然后描述方法中的关键步骤,包括明确增量需求问题的问题结构、抽取增量需求问题的解决方案和检验增量需求解决方案的正确性等.4.1方法概述以增量需求问题的定义为基础,我们提出基于软件开发问题框架的增量需求解决方案求解方法,如图5所示.本文假设现有需求已经被成功解决,在此基础上分析和求解涉众提出的增量需求问题.(1)分析现有需求解决方案分析现有需求解决方案旨在抽取出现有需求及其解决方案.其分析过程如下:首先,明确现有需求的来源,分析现有需求问题关联的现实世界,参考文献[3]抽取出现有需求,明确其关联的软件开发问题,使用问题图描述现有需图5增量需求解决方案的诱导过程求问题的问题结构.应用问题框架匹配[3]方法,对所取得的问题图进行问题分解、匹配问题框架和问题组合等处理,抽取出现有需求所关联的现实世界的描述,以及用来满足现有需求的软件解决方案(即现有机器的机器规约).需要指出的是,现有需求及其关联的现实世界领域的描述,与用来满足现有需求的机器规约一起组成了现有需求问题的描述.抽取出现有需求的解决方案之后,形式化描述现有需求问题.按照2.2节软件开发问题的形式化描述过程,使用Alloy语言描述现有需求问题.改写现有需求问题的上下文图,即使用添加了标签“M”的给定领域的图元表示现有需求解决方案中的机器,把现有需求解决方案中的被设计的领域直接用给定领域的图元表示.改写后得到的上下文图就是增量需求问题关联的现实世界的一部分.(2)求解增量需求问题的解决方案增量需求提出后,首要问题是明确增量需求问题的问题结构,把增量需求问题的问题结构表示成问题图.以增量需求问题的问题图为基础,应用需求渐变[8]技术,诱导出增量需求满足时所需新机器的机器规约(即增量需求解决方案)以及增量需求问题的描述.使用Alloy语言形式化描述增量需求问题.然后,检验增量需求解决方案的正确性,即检验诱导出的解决方案能否确保增量需求的满足,同时未对原有需求的满足造成负面影响.本文把增量需求解决方案的正确性检验问题转换成SAT问题(详见4.4Page6节),即利用软件开发问题框架中的正确性论证技术把增量需求解决方案的检验问题表示成Alloy语言描述的断言,应用AlloyAnalyzer分析增量需求解决方案的正确性.运行断言,如果AlloyAnalyzer不返回任何反例,表明诱导出的增量需求解决方案可以满足增量需求,同时未对现有需求的满足造成任何影响.否则,说明诱导出的解决方案不能满足增量需求,或导致现有需求无法满足,需要重新求解增量(3)分析解决方案中的潜在风险软件开发问题框架方法中特定关注点为识别增量需求解决方案中潜在的困难提供了便利.本文复用特定关注点知识,归纳了增量需求解决方案中潜在的五类风险(如表1所示),给出了识别并管理这些风险的策略.表1增量需求解决方案的风险识别与管理风险类别关联的特定关注点Ⅰ溢出关注点领域无法及时响应由其它领Ⅱ身份关注点特定领域的不同实例都具有Ⅲ可靠性关注点存在领域失效的风险,领域失Ⅳ初始化关注点在软件问题中机器如何建立Ⅴ完整性关注点需要保证机器、需求和现实世速率的不匹配领域要素的可靠性分析增量需求解决方案中的潜在风险时,可以以表1作为基准,建立风险分析与管理的检查表,分析增量需求问题及其解决方案,识别出增量需求解决方案中潜在的风险要素.然后,针对每一个风险要素,在领域专家的指导下给出合适的风险管理措施.4.2明确增量需求问题的结构本文采用如图6所示的过程确定增量需求问题的问题结构.(1)上下文边界分析上下文边界分析,关注软件将要作用的上下文环境的变化对增量需求问题关联的现实世界领域的影响.图6分析增量需求问题的结构需求的解决方案.重复上述过程,直至得到正确的增量需求解决方案.识别方法由于增量需求问题和涉众提出的新需求或软件将要作用的上下文的变化相关,因此,需要确定增量需求问题匹配何种类型的增量需求问题模式.如果匹配模式1,说明软件将要作用的上下文环境未发生变化,则直接在增量需求初始上下文图基础上进行后续的分析工作.如果匹配模式2或混合模式,则需要分析并记录受到上下文变化影响的领域、领域接口,然后更新现有需求的上下文图,得到增量需求问题的上下文图.(2)系统边界分析系统边界分析把增量需求引入到增量需求问题的上下文图中,分析需求现象,按照需求引用现象和Page7需求约束现象之间的因果关系,逐步诱导出增量需求关联的现实世界领域.在分析需求现象的过程中,如果发现增量需求无法直接实现,还需要进行需求转换,即把原需求转换成与之等价的其它需求,分析转换后的需求所关联的需求现象,逐步抽取出与之关联的现实世界领域.然后,引入抽象机器表示用来解决增量需求问题的计算机系统,产生增量需求问题的初始问题图.此后,分析增量需求问题的初始问题图,即先后分析增量需求的需求现象以及抽象机器的机器规约现象,确定增量需求问题的初始问题图是简单问题还是复合问题.分析需求现象时,如果发现需求约束的多个领域现象无法在同一个软件开发问题中实现,或被约束的领域现象之间存在多组时序关系,说明增量需求问题的初始问题图是一个复合问题.否则,还需分析初始问题图中的机器规约现象,以进一步确定初始问题图是复合问题还是简单问题.分析机器规约现象,即分析机器控制的现象和该机器引用的现实世界领域现象之间的因果关系.如果发现机器规约现象中包含多组机器控制现象和现实世界领域现象之间的因果关系,则表明增量需求问题是一个复合问题.否则,说明增量需求问题是一个简单问题.如果发现增量需求问题是一个简单问题,则精细化描述得到的问题图,确保所有的需求现象、机器现象和领域现象都被明确的标识出来,从而明确了增量需求问题的问题结构.但是,如果发现增量需求问题是一个复合问题,则把初始问题图分解为多个子问题,然后分析每一个子问题的问题结构.子问题的问题结构分析过程是一个压缩的增量需求问题系统边界分析过程,需要先后进行需求解读、引入新机器、建立问题图等步骤.重复上述过程,直至增量需求问题分解后得到的每一个子问题都仅仅匹配一个问题框架.最后,合成所有子问题,得到增量需求问题的问题图.4.3求解增量需求问题的解决方案对增量需求问题进行需求渐变[8],得到增量需求满足时所需的新机器的机器规约以及被设计的领域的领域约束.结合增量需求问题的问题结构,把隶属于同一个子问题的机器规约及其关联的领域约束综合起来,产生增量需求子问题的描述,并记录每一个增量需求子问题匹配的问题框架.针对每一个增量需求子问题,查找与之匹配相同问题框架的现有需求问题的子问题;在领域专家的指导下,根据规则1识别并复用现有机器来解决增量需求(子)问题.然后,把被复用的现有机器、新引入的机器、新引入的被设计的领域描述综合起来,得到增量需求问题的解决方案.规则1.设Pi表示现有需求问题中的某个子问题,Qj表示增量需求问题的一个子问题.如果:(1)Pi和Qj的拓扑结构相同,且匹配相同的问题框架;(2)Pi与Qj中机器引用现象、需求引用现象都相同;(3)Pi与Qj中机器约束现象、需求约束现象是等价的,则可以复用用来解决Pi的机器来解决Qj.为了减少解决增量需求问题时引入新机器的数量,可以把多个新引入的机器进行组装.规则2.据领域专家知识,可以把多个新引入机器进行组合,产生一个能解决多个子问题的新机器.求解增量需求问题的过程中还应考虑替换现有机器,使得新机器可以同时满足增量(子)需求和现有(子)需求.为此需要把新引入的机器和已实现的机器组装起来.新引入机器与现有机器的组装过程可以参阅新机器的组装,这里不赘述.组装新引入机器和/或现有机器时,还应侦测和处理组合关注点.组合关注点[3,13]是指当组合多个子问题中的机器时,由于不同的子问题对同一个领域的描述存在不一致而导致的关注点.可以参阅文献[13]识别和处理组合关注点:(1)如果待组合的子问题之间不存在组合关注点,则引入一个新机器来替换所有子问题中的机器,把各子问题中现实世界领域与原有机器的交互重定向到新机器上(如图7所示,(a)和(b)分别表示机器组合前后的情形);(2)如果存在组合关注点,引入新机器协调组合关注点所涉及的机器,以解决组合关注点(如图8Page8所示,(a)和(b)分别表示机器组装前后的情况).4.4检验增量需求解决方案的正确性增量需求解决方案正确性的检验过程如算法1所示.如果返回true表明增量需求解决方案是正确的,即能够满足增量需求,同时未对现有需求的满足造成任何负面影响.如果返回false,说明诱导出的解决方案无法满足增量需求,或导致已有需求无法满足,则重新求解增量需求的解决方案.算法1.检验增量需求解决方案的正确性.输入:Q表示增量需求问题,输出:true或false1.//检验增量需求子问题是否已经被解决2.FORj=1TOn3.形式化描述WQj,MQj,RQj4.编写断言Assertj描述WQj,MQj|-RQj5.IF运行Assertj产生反例6.RETURNfalse7.//检验增量需求问题是否已经被解决8.LETR=RQ1,W=WQ1,M=MQ1;9.FORj=2TOn10.LETR=R+RQj,W=W+WQj,M=M+MQj11.编写断言Assertj描述W,M|-R12.IF运行Assertj导致反例产生检验增量需求子问题解决情况时,针对每一个13.RETURNfalse14.15.//检验已有需求和增量需求能否都得到满足16.LETR=R+RP,W=W+WP,M=M+MP17.编写断言Assert描述W,M|-R18.IF运行Assert导致反例产生19.RETURNfalse20.RETURNtrue(1)检验增量需求子问题解决情况由于确定增量需求问题结构时增量需求问题Q被分解为n个子问题(n1),记作{Q1,…,Qn},增量需求RQ在子问题Qj中的投影记作RQj,Q关联的现实世界WQ在Qj中被投影为WQj,MQj表示在给定的环境约束WQj下用来满足RQj的机器规约.检验增量需求子问题解决情况,即检验在给定的环境约束WQj下机器规约MQj能否确保RQj的满足.增量需求子问题Qj:①首先,使用Alloy描述Qj,即把Qj中机器、需求和给定领域的形式化描述封装在一个Alloy模块中.②然后,定义断言AssertQj描述Qj关联的正确性论证,并以Qj中机器、需求和给定领域要素的个数之和作为状态空间的搜索深度.以科技助老系统增量需求问题Q为例.假设科技助老系统增量需求“老人紧急情况自动侦测与处置”问题中,子问题Q1中现实世界领域包括社区工作人员CommunityWorker,远红外传感器InfraredSensor、老人Older和被设计的领域“老人与远红外传感器之间的映射”(记作Older~SensorMapping),机器Older~SensorMappingController表示用来满足子需求“建立老人与远红外传感器之间的映射关系(Older~SensorMappingDefinition,记作OlderSensorMappingReq)”.为Q1定义断言OlderSensorMappingArgument(如图9所示)检验子需求的满足情况.由于Q1关联的软件开发问题要素的个数之和为6,因此设置断言的搜索深度设置为6,运行此断言即可检验Q1的解决情况.assertOlderSensorMappingArgument{}checkOlderSensorMappingArgumentfor6Page9③运行断言AssertQj,查看AlloyAnalyzer的返回结果.如果返回反例,表明Qj中机器规约无法满足RQj,需要重新求解Qj的解决方案.如果无反例产生,则重复上述过程检验Q的其它子问题中需求的满足情况.(2)检验增量需求问题的满足情况为Q新建一个Alloy模块,表示Q的形式化描述,记作moduleQ.然后,采用增量方式合成(Compose)增量需求问题的子问题,产生组合问题,使用组合问题中的领域现象改写已被组合的所有子问题中的需求、机器和需求,生成组合问题的形式化描述.把图4所示的断言RequirementArgument引入到组合问题的形式化描述中,设置运行断言的搜索深度为组合问题中的机器、给定领域和需求等要素的数量之和.运行断言,查看是否有反例.如果无反例返回,说明已组合的各子问题都已被正确解决,则继续上述过程,直至组合产生增量需求问题并确认增量需求已经被正确解决为止.但是,一旦发现反例,表明存在组合关注点,需要引入新的机器来识别并处理子问题组合时的组合关注点,即需要重新求解增量需求问题的解决方案.(3)检验增量需求解决方案对现有需求的影响合成现有需求问题和增量需求问题,形式化描述合成得到的组合问题,产生Alloy模块modulePQ.把RequirementArgument引入到该模块之中,设置运行断言所需的状态空间深度为组合问题中的机器、需求和给定领域的数量之和,运行断言,查看是否返回反例.如果返回反例,说明诱导出的增量需求图10P1的问题分解解决方案导致现有需求无法满足,则需要重新求解增量需求解决方案.如果无反例,说明增量需求问题已被正确解决,同时并未影响现有需求的满足.5案例分析本节以科技助老系统增量需求问题的求解阐明如何应用本文方法,同时验证方法的有效性.5.1分析现有需求及其解决方案5.1.1抽取现有需求及其解决方案设R1表示现有需求一键求助“One-ClickService”,问题P1表示求解R1解决方案的软件开发问题.假设R1已经被正确实现.首先,通过阅读需求规格说明、观察现有系统的行为等方式,抽取出P1的问题结构,建立如图1所示的问题图.然后,应用问题框架匹配技术把P1分解为4个子问题,分别用P1.1、P1.2、P1.3和P1.4表示(如图10所示).P1.1和P1.3匹配信息显示框架,P1.2和P1.4匹配命令式行为框架.在匹配问题框架的过程中,R1投影为4个子需求,分别用R1.1“RelationCardManagement”、R1.2“One-ClickDial-up”、R1.3“CallRecordGeneration”和R1.4“EmergencyDisposal”表示.再根据问题框架的框架关注点,分析每一个子问题中领域现象之间的因果关系,得到子问题中的机器规约和领域约束.所有子问题中的机器规约(如表2所示)与被设计的领域共同组成了R1的解决方案.Page10表2犚1解决方案中的机器规约RelationCardController在联系卡中记录老人以及老人关爱员的姓名、电话号码等信息EmergencyCallController把由老人手机发出的语音信号转发给社区服务中心的热线电话,并且在呼叫日志CallLog中记录呼CallRecordControllerEmergencyDisposalController把来自社区电话Telephone的语音信号转发给关爱员的手机MobilePhone上,向关爱员给出提醒(2)组合子问题,产生现有需求问题的描述5.1.2形式化描述现有需求问题引入图2所示的元模型表示软件开发问题框架本文采用增量方式组合现有需求问题的子问的基本元素,使用Alloy语言描述现有需求问题的题,最终得到现有需求问题的形式化描述.以子问题子问题,再通过子问题组合产生现有需求问题的形P1.1和P1.2组合过程为例:式化描述.(1)描述现有需求子问题为P1.1新建一个Alloy模块P1.1,封装P1.1的形式化描述.在P1.1中,首先定义领域现象电话号码PhoneNumber和姓名Name;然后,形式化描述P1.1中的机器RelationCardController、现实世界领域(包括老人Older、老人关爱员Caregiver和老人联系卡RelationCard)和需求“老人联系卡的建立”(记作OlderRegistrationReq),如图11所示.然后采用上述方法,形式化描述P1的其它子问题.//phenomenasigName{}abstractsigPhoneNumber{}/descriptionsofdomains,suchasOlder,Caregiveretc./onesigOlderextendsDomain{name:oneName,phoneNumber:oneOlderPhoneNumber}{thisinSatisfied}……//specificationofmachineOlderRegistrationControlleronesigOlderRegistrationControllerextendsMachine{older:Older,}{thisinSatisfiediffcaregiver:Caregiver,relationCard:oneRelationCardrelationCard.oName=older.name&&relationCard.cName=caregiver.name&&relationCard.oPhoneNumber=older.phoneNumber&&relationCard.cPhoneNumber=caregiver.phoneNumber}//requirementdescriptionsonesigOlderRegistrationReqextendsRequirement{}{thisinSatisfiediffolder:Older,caregiver:Caregiver,relationCard:RelationCardrelationCard.oName=older.name&&relationCard.cName=caregiver.name&&relationCard.oPhoneNumber=older.phoneNumber&&relationCard.cPhoneNumber=caregiver.phoneNumber}}①首先,建立一个Alloy模型(Module)P1表示现有需求问题,复制P1.1的形式化描述到P1之中,即集成子问题P1.1;②在P1中添加P1.2的形式化描述,根据AlloyAnalyzer的语法检测功能识别并处理这两个子问题中命名重复的领域现象、领域和/或机器,把两个子问题中都包含的领域或机器的描述组合起来.例如,在P1.1和P1.2中都包含对领域Older的描述,由于不存在组合关注点,只需消除重复定义的领域现象,组合这两个子问题中Older的领域约束即可得到子问题组合后Older的形式化描述(如图12所示).按照同样的方式组合P1.1和P1.2中其它要素的描述.采用同样的方式,先后组合P1的其它子问题,即把P1.3和P1.4的形式化描述合成到P1之中,最终得到现有需求问题P1的形式化描述.5.1.3改写现有问题的上下文图改写P1的上下文图,即把已实现的机器看作给定领域,使用标记“M”标识,得到如图13所示的上下文图.5.2求解增量需求的解决方案涉众拟在软件的下一个发布版本中增加“老人紧急情况自动侦测与处置”服务.令R2表示增量需求“老人紧急情况自动侦测与处置”,P2表示R2的求解问题.R2的描述如表3所示.需求编号需求名称老人紧急情况自动侦测与处置需求描述Page11onesigOlderextendsDomain{//phenomenaofOlderwithinP1.1name:loneName,phoneNumber:lonePhoneNumber,caretakerName:loneName,communityWorker:CommunityWorker,//referreddomaincaregiver:Caregiver,//phenomenaofOlderwithininP1.2--namingconflictresultsinrephraseddescriptions//name:loneName,--removetheduplicatenamedelementsenderConversation:EmergencyCallCallerConversation,emergency:Emergency,phone:OlderPhone,--relevantdomain--removetheduplicatenamedelement//phoneNumber:lonePhoneNumber}{thisinSatisfiediff--composeddomainconstraintsinP1.1andP1.2//domainconstraintsofOlderwithininP1.1communityWorkder.relationCardInfo.oName=name&&communityWorkder.relationCardInfo.oPhoneNumber=phoneNumber&&caretakerName=caregiver.name//domainconstraintsofOlderwithininP1.2senderConversation.oName=name&&senderConversation.emergency=emergency&&phone.callerVoiceCurrentOfEmergencyCall.conversation=senderConversation&&phoneNumber=phone.phoneNumber}图13增量需求问题关联的现实世界需求编号需求名称老人行为异常自动侦测需求描述P2不涉及软件将要作用的上下文环境变化,因此匹配增量需求问题模式1,现有需求的上下文就是P2关联的现实世界的一部分.5.2.1确定增量需求问题的结构(1)建立初始问题图为了确定增量需求问题的问题结构,首先根据R2的需求引用和需求约束,对现有需求的上下文图进行投影,发现R2引用Older、Caregiver的领域现象,R2的需求约束涉及预警器Alarm、短信提醒ReminderSMS.然后,引入抽象机器AbnormalBehaviorDisposalService表示将要开发的R2的解决方案,得到P2的初始问题图(如图14所示).(2)抽取增量需求问题的结构分析P2的初始问题图发现R2的需求现象涉及多组需求引用现象与需求约束现象之间的因果关系.由此可以确定P2的初始问题图是一个复合问题,需要对P2进行问题分解与合成,才能确定P2的系统边界.根据R2的自然语言描述,P2被分解为P2.1和P2.2两个子问题.R2.1(如表4所示)和R2.2(如表5所示)分别表示R2在P2.1和P2.2中的投影.需求编号需求名称老人行为异常的处置需求描述在P2.1中,老人Older是可叫牌领域,具有自主行为的能力,即老人的行为是不可预测的.需要把“老人行为的监控问题”转换成“对老人所在地点的监控问题”,即把需求R2.1转换成需求R2.1(如表6所示).根据R2.1的需求现象,引入安装在客厅的远红外传感器InfraredSensor自动侦测老人在客厅Page12的活动情况,使用被设计的领域求救信号DistressSignal作为R2.1需求约束的领域,然后引入新机器形成如图15所示的问题图.需求编号需求名称老人行为异常自动侦测需求描述子问题P2.2涉及的领域包括Caregiver、Older、InfraredSensor、SMSReminder和DistressSignal.引入机器AbnormalBehaviorController,建立P2.2的初始问题图(如图16所示).分析图16中的需求现象,发现P2.2涉及3组领域现象之间的因果关系,即老人与关爱员之间的映射、远红外传感器与被监控的老人之间的映射,以及根据远红外传感器触发的求救信号向老人关爱员发送求助短信,说明P2.2的初始问题图是一个复合问题.按照需求现象之间的因果关系,把P2.2分解为3个子问题P2.2.1、P2.2.2和P2.2.3(如图17所示).由于P2的所有子问题的问题结构均已明确,因此合成子问题P2.1、P2.2.1、P2.2.2和P2.2.3得到P2的问题图(如图18所示).5.2.2增量需求解决方案的求解本文采用需求渐变技术求解增量需求满足时所需的机器规约和被设计的领域的领域约束.(1)问题分解把P2分解为4个问题,即P2.1、P2.2.1、P2.2.2和P2.2.3.(2)诱导机器规约及其关联的领域约束利用框架关注点分析技术,为每一个子问题抽取出需求满足时所需的领域假设和机器规约.然后,合并隶属于同一个机器或领域的约束,得到新引入机器的机器规约及其关联的领域约束.以P2.1的需Page13求渐变为例(P2.1的需求渐变过程如图19所示,需求渐变得到的领域约束和机器规约如表7所示):编号Breadcrumb1老人在过去的12h内从未在客厅活动Breadcrumb2远红外传感器在过去12h内未侦测到任何活Breadcrumb3报警器响起Breadcrumb4求救信号记录了是由哪个远红外传感器引发Breadcrumb5根据接收到的老人活动异常脉冲,产生求救①首先,依据R2.1的需求描述,抽取出Older的②在Older满足Breadcrumb1描述的领域约束的情况下,使用InfraredSensor、Alarm和DistressSignal的领域现象改写R2.1,把改写后的需求用R2.1-1表示.领域假设,用面包屑①Breadcrumb1表示;③由于改写后的需求与Older的现象无关,则把改写后的需求推向InfraredSensor,得到步骤2所示的结果.④按照同样的方式,渐进地抽取出面包屑、改写需求,最终得到AlarmController的机器规约,用Breadcrumb5表示.比对增量需求子问题和现有需求子问题,发现子问题P1.1和P2.2.2符合规则1的描述,即P1.1和P2.2.2是等价的.因此复用P1.1中机器RelationCardController和被设计的领域RelationCard来管理老人和老人关爱员之间的监护关系.复用已实现的机器及被设计的领域要求对增量需求问题进行适当的改写,因此,修改子问题P2.2.3,即把P2.2.3中的Older~CaregiverMapping更新为已实现的被设计的领域RelationCard产生子问题P2.2.3(如图20所示).然后,把所有子问题中的机器规约、被设计的领域的描述综合起来形成增量需求的解决方案.5.2.3检验增量需求解决方案的正确性按照算法1检验增量需求解决方案的正确性:(1)使用Alloy形式化描述每一个增量需求子问题,分别为P2.1、P2.2.1、P2.2.2、P2.2.3编写断言验证子问题中的机器能否满足子问题中的需求,发现诱导出的机器规约能够满足子需求.(2)建立增量需求问题的Alloy模型P2,采用增量方式把增量需求子问题的描述集成到P2中,使用断言RequirementArgument检验子问题集成过程中由子问题组合而产生的组合需求的满足情况.产生增量需求问题描述的过程中,运行断言,发现无反例,说明增量需求的解决方案能够满足增量需求.(3)把现有需求问题的描述集成到P2中,根据P2中当前拥有的给定领域、机器和需求的数量之和①面包屑表示需求渐变过程中得到的领域约束或机器规约的Page14(4)把更新后的P2作为新的现有需求问题的调整RequirementArgument的搜索深度,检验增量需求解决方案是否影响现有需求的满足,运行断言发现无反例,说明增量需求解决方案对现有需求的满足无负面影响.描述,为求解新的增量需求问题做准备.5.3分析潜在的风险得到增量需求解决方案后,我们复用特定关注点的知识,发现R2的解决方案存在如表8所示的潜在风险.复用的特定风险编号1溢出关注点2可靠性关注点3身份关注点识别增量需求解决方案中潜在的风险之后,可以复用特定关注点的处置技术完善增量需求的解决方案,为后续的设计决策提供支持.例如,可以使用“忽略”策略处置风险1,即远红外传感器忽略其无法及时响应的老人动作;而风险3要求设计具有更强领域约束的远红外传感器,即远红外传感器具有形状区分功能,能够区分人的动作和宠物的动作.一旦涉众决定处置某个风险要素,将产生新的增量需求问题.6相关工作技术更新、软件运行环境变化以及业务目标的改变共同驱动需求变更,导致需求演化问题的产生.需求演化[14]是指,对软件需求及其制品进行持续更新来满足日益频繁的需求变更,并对受到需求变更影响的软件制品进行同步更新.应对需求演化的方法[15]包括软件维护,或通过产品线工程、构造自适应系统等方式重构软件系统.本文关注由增量需求的提出而导致的需求演化问题,提出一个基于软件开发问题框架的增量需求解决方案求解方法(解决方案表示成需求规格说明),为通过软件维护实现增量需求解决方案提供支持.Ernst等人[5]从用户需求、软件解决方案和给定的领域三者之间的因果关系出发,提出了面向目标的增量需求解决方案的诱导方法.在该方法中,用户需求使用目标模型中的目标表示,现有解决方案中软件系统的行为用任务(Task)表示,与用户需求关联的领域假设通过开发人员所拥有的领域知识展示.增量需求解决方案的求解过程如下:首先在领域知识指导下进行目标操作化(Operationaliza-tion)[16],得到必须的新任务(目标操作化的过程可以看作是一种典型的软件维护活动)并更新任务知识库;形式化描述增量需求,然后利用预定义的一组规则检索知识库,检索得到一个候选任务集来满足增量需求.如果多个候选任务集可以满足增量需求,则根据涉众偏好选择一个最佳方案.与Ernst的方法相比,本文把现有解决方案中的机器规约作为可复用的需求制品,应用基于软件开发问题框架的需求分析方法求解增量需求解决方案.为了显式的表示需求变更,Brier等人关注需求变更和/或上下文变化对现有需求的影响,提出变更问题图(ChangeProblemDiagram)[17]的概念.变更问题图采用图示的方式把受到需求变更、上下文变化影响的要素在问题图中标识出来,但并未涉及增量需求解决方案的求解.在产品线领域,Tun等人[6]提出了一个基于软件开发问题框架的需求演化问题的求解方法.针对演化需求(即特征),该方法把现有特征的解决方案(即机器规约)作为增量特征问题所关联的现实世界的一部分,把为了解决增量特征问题而引入的新机器作为对现实世界领域和已实现的机器的包装器,在明确增量需求问题的基础上使用问题渐变得到新机器的规约,再利用正确性论证对增量特征的满足情况进行形式化和/或非形式化的验证.Tun的方法与本文工作都把已实现的机器规约看作黑箱并作为可复用的基本单元,通过引入新机器来改变现有需求的问题结构以此来满足增量需求的需要,都应用正确性论证技术验证解决方案的有效性.与Tun的方法相比,本文的方法关注增量需求问题,强调从增量需求问题发生的根本原因出发,分析增量需求问题的问题结构,采用增量、迭代的方式诱导出增量需求的解决方案,把增量需求解决方案的检验问题转换成可满足问题求解,还复用特定关注点评价增量需求解决方案中的潜在风险.在增量需求解决方案的求解过程中,本文首先引入抽象机器表示用来解决增量需求问题的机器,利用需求现象和机器现象的解读,渐进地澄清增量需求问题的问题结构,然Page15后利用需求渐变诱导出增量需求解决方案.我们在前期工作[18]中关注软件产品线中由于涉众偏好变更、系统上下文改变而导致的需求演化问题.基于软件开发问题框架的需求分析方法,我们分析并抽取出需求演化模式.以预定义的需求演化模式为基础,对需求演化问题进行问题分析与组合来确定受到需求演化影响的特征集合,更新原有的特征模型,结合用户偏好及特征的挣值(EarnedValue)对最新更新的特征模型进行特征绑定,得到能够解决需求演化问题的特征配置.与前期工作相比,本文关注增量需求问题,提出基于软件开发问题框架的增量需求解决方案求解方法,采用形式化方法检验解决方案的正确性,还复用特定关注点评估解决方案中潜在风险.重构业务系统使之具备自适应能力是应对频繁的需求变更、有效处理需求演化问题的重要手段[15,19].Wang等人[20]和Elkhodary[21]等人在业务系统基础上,开发自适应系统构件,使得自适应系统构件和业务系统组成闭环控制环路,利用运行时软件重配置处置运行时软件失效.为了应对软件运行环境变更,Ali等人[22]提出上下文化的目标模型(ContextualGoalModel)把软件运行时上下文要素和涉众目标关联起来,通过运行时目标模型动态绑定指导软件重配置,来确保涉众需求的持续满足.Salifu等人[23]以领域专家知识为指导,分析软件运行时的上下文可变性,定义上下文感知的自适应规则并开发自适应系统构件,根据预定义的自适应规则进行上文感知的自适应动作,以响应软件运行时的上下文变化.7总结与展望软件密集型系统的新需求通常以增量、迭代的方式提出并解决,需要在复用现有方案的基础上抽取出增量需求的解决方案,并尽早检验和评估诱导出的解决方案.为此,本文提出了一种基于软件开发问题框架的软件密集型系统增量需求问题的求解方法.本文的主要工作包括:(1)基于软件开发问题框架的需求分析技术,采用一个增量、迭代的求解过程,诱导出增量需求的解决方案;(2)利用SAT求解器检验增量需求解决方案的正确性,为解决方案的评价提供即时反馈;(3)复用软件开发问题的求解经验,评估增量需求解决方案的潜在风险,为优化解决方案提供支持.该方法的主要特点有:(1)在有效利用已有软硬件资产的基础上求解增量需求问题;(2)在需求工程过程中检验增量需求解决方案的正确性.与软件生存周期后期进行方案验证相比,可有效减少软硬件投资方面的浪费.后续工作将从方法改进、工具开发和应用实践三方面展开.目前,本文诱导出的增量需求的解决方案是采用机器现象描述的机器规约,解决方案的描述粒度有待进一步细化.今后,将尝试引入状态机模型描述的机器规约,以提供更精细粒度的解决方案;将变更问题图与本文方法结合起来,显式地分析和表示增量需求对现有需求问题的影响.开发基于本文方法的需求建模工具,来帮助软件开发人员分析和求解增量需求问题,也是未来工作的重要内容.实践方面,将致力于选择一些典型的软件密集型系统开展更大规模的案例研究,进一步检验方法的有效性.
