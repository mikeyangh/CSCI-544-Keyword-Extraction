Page1基于兴趣点分布的外包空间数据隐私保护方法田丰桂小林张学军杨建伟杨攀余思(西安交通大学电子与信息工程学院西安710049)(西安交通大学陕西省计算机网络重点实验室西安710049)摘要随着云服务与位置感知设备的普及,大量与位置相关的信息需要外包给服务提供商,由此引发的空间数据隐私问题得到了学术界的广泛关注.Hilbert曲线作为一种空间转换的方法,被广泛应用于空间数据的隐私保护中,但标准Hilbert曲线未考虑兴趣点的分布特征,可能需要多次调整曲线参数,且无法支持数据拥有者对空间区域的自定义授权.针对上述问题,提出一种可以根据兴趣点分布而自适应变化的Hilbert曲线(AHC),该曲线根据设定的存储容量将空间划分为原子区域,使用Hilbert曲线的分形规则确定各原子区域的顺序,并由此生成密钥树,数据拥有者可以将密钥树的一部分共享给授权使用者,从而实现对空间区域的自定义授权;设计了基于AHC的空间查询处理方案,支持兴趣点的索引值计算、范围查询与KNN查询处理;定义了空洞指数以量化外包数据的隐私信息泄露风险.在真实数据集与模拟数据集上的实验表明,与标准Hilbert曲线相比,该文提出的AHC在进行空间转换方面具有更高的安全性与更优的查询效率.关键词数据外包;空间查询处理;位置隐私;空间转换;隐私保护1引言随着基于位置的服务[1]与位置感知设备日益普及[2],与位置相关的信息爆炸式增长,由此产生的大量空间数据超出了小型企业和个人的处理能力.云服务提供弹性的资源分配,有效降低了数据拥有者(DO)维护数据的开销,因此数据外包成为一种流行的服务模式并获得了学术界的广泛关注[3].然而,数据外包给云存储服务提供商(SP),用户无法确切知道数据被存储在什么地方,自己失去了对数据存储与访问的直接控制权.因此,保证空间数据隐私是空间数据外包与基于位置的服务进一步发展面临的一大挑战[4].在空间数据外包的处理过程中,涉及大量的与位置相关的操作,例如对指定范围的查询、对指定位置的KNN查询等[5].由于位置信息是用户的私密信息,将其暴露给SP会带来隐私泄露的威胁[6],例如恶意SP可能会将具有商业价值的信息出售给DO的竞争对手[5],可以根据用户的检索位置分析推测用户的健康状况信息[7].为保护用户空间数据外包的安全,一种简单的解决方案是用户先将数据在本地加密,然后再将密文数据外包给SP.然而数据在加密后,传统的明文检索技术就失效了.而使用密文计算技术[8-9]则在处理此类检索时存在限制,以KNN检索为例,为了获得正确的检索结果,需要SP计算并发送所有兴趣点与检索点的密文距离,在目前数据量爆炸的情况下,该方案并不适用于此类应用场景.基于隐私信息检索(PIR)[10]的解决方案通过确保用户的检索信息不暴露给非可信SP,从而达到很强的隐私保护级别,但该方案与密文计算技术一样,需要很高的计算与通信开销,因此也不适于此类应用.在空间数据外包的服务模式中,需要在保证外包空间数据隐私的前提下,使得数据拥有者和授权用户可以对空间密文数据进行高效检索,为达到此目的,有研究者将Hilbert曲线应用于空间数据的转换中[11-15],保护用户外包空间数据的隐私,使得密文数据的高效检索成为可能.但采用标准Hilbert曲线对兴趣点进行转换,没有考虑到兴趣点的分布特征,为了获得需要的转换效果,需要多次调整曲线参数,且Hilbert曲线对空间区域采用相同的划分粒度,DO在将曲线参数即转换密钥共享给授权用户时,就给予了该用户全部区域的访问权限,无法实现对空间区域的分级别访问控制.本文借鉴标准Hilbert曲线对空间划分并进行转换的思想,提出了一种新的空间数据转换方法,并对该方法的安全性与效率进行了定量分析.本文的主要工作与贡献如下:(1)提出了一种根据空间区域内兴趣点分布特征而变化的自适应Hilbert曲线(AdaptiveHilbertCurve,AHC),支持数据拥有者对空间区域的自定义授权.(2)设计了基于AHC的空间查询处理方案,支持兴趣点的索引值计算、范围查询与KNN查询处理.(3)定义了空洞指数β,用于量化空间填充曲线构建兴趣点索引所引发的隐私信息泄露风险.(4)在真实数据集与模拟数据集上验证了本文所提方法的安全性与效率.本文第2节介绍国内外相关工作的研究进展;第3节对空间隐私数据外包以及检索进行形式化定义;第4节论述AHC的生成过程与密钥树生成方法;第5节给出基于AHC的空间查询处理方法;第6节通过实验对AHC的安全性与效率进行验证;第7节对全文进行总结,并对下一步工作进行展望.2相关工作Hacigümüs等人[16]于2002年提出了将数据外Page3包给服务提供商的应用模型,并指出数据隐私是一个至关重要的问题.接下来,Hacigümüs等人[17]又提出了保护外包数据隐私的解决方案,使用加密后的数据与附加的分组信息来构建索引,从而支持密文数据的检索.之后,Agrawal等人[18]针对一维数值数据,提出了一种保序加密方案,提高了服务端执行查询的效率.Huang等人[19]提出了一种支持密文字符串模糊检索的外包数据隐私保护方法.以上这些方案均是针对字符串或一维数值型数据,不能直接应用于空间数据的隐私保护.Wong等人[20]研究了在服务提供者不可信情况下,对密文元组进行K近邻计算的问题,提出了一种支持服务提供者计算两个加密数据点相对距离的方法,由于引入了虚拟维度,无法高效的对加密数据点建立索引,因此,在处理查询请求时,服务提供者需要遍历所有密文数据点,导致查询效率较低.针对空间隐私数据外包后可检索的问题,有研究者提出使用空间填充曲线来对兴趣点进行转换,以支持在转换空间中进行范围与KNN检索,在实际应用中,多采用标准Hilbert曲线.Ni等人[11]通过Hilbert曲线转换方法,减少了由用户参数设置所引入的额外工作量.同时,由于Hilbert曲线的聚类特性,降低了区域检索的时间与通信开销.Khoshgozaran等人[12]利用Hilbert曲线将数据点与查询请求映射到Hilbert转换空间,解决了空间数据密文可检索的问题,并提出了双Hilbert曲线技术,提高了检索的准确率与效率.Ku等人[13]为对检索结果进行完整性验证,基于Hilbert曲线对原始空间进行转换,对数据点进行对称加密,并用Hilbert值构建索引,通过使用不同的空间转换密钥,分别对原始空间数据库和其中抽取的一个副本进行加密,得到的结果合并后存储在服务提供商处,由此构成进行查询完整性验证的依据.对现有研究分析可知,标准Hilbert曲线对空间区域进行转换时,并不考虑兴趣点的分布特点,而是根据指定的转换密钥对空间进行划分,并计算各原子区域的Hilbert值,由此对分布于各原子区域的兴趣点构建索引,为保证转换的安全性与检索的效率,需要选择足够大的曲线阶数,使得基本不存在Hilbert值相同的兴趣点.文献[12]指出恶意SP可以在不知道Hilbert曲线参数的情况下,通过对具有相同或相近Hilbert值的兴趣点数量进行分析,从而发现在转换空间中的兴趣点密集区域,由此增大了用户隐私数据泄露的风险.3问题描述定义.3.1定义本节对空间隐私数据外包以及查询进行形式化为便于描述,对相关术语与符号进行形式化定义.定义1.兴趣点.外包的隐私数据项,记作φ(x,y,ξ),其中x,y表示数据项的位置坐标,ξ表示附属的其它属性信息.定义2.区域.平面中的一个矩形范围,记作R=[xl,xh]×[yl,yh],其中xl,xh分别表示R在x方向的上、下限,yl,yh则表示R在y方向的上、下限.定义3.定义空间.兴趣点φ所属的空间区域,记作Ω,为便于讨论,本文设定Ω为区域[0,1]2.定义4.原子区域.不可被继续划分的区域.定义5.存储容量.对空间进行划分时,原子区域所能容纳的兴趣点数量,记作C.定义6.Hilbert值.为每个原子区域所分配的一个唯一的整数编号,记作VH.定义7.转换密钥.AHC在区域R中的曲线参数,记作STK(R,S0,N,θ,Γ),其中,S0为起始点、N为曲线阶数、θ为曲线方向、Γ为缩放因子.定义8.密钥树.由Ω中各区域Ri的转换密钥组织成的四分树结构,记作Ψ,其中∪Ri=Ω,且∩Ri=.定义9.整数编码.对于任意的位置坐标(x,y),其对应的x,y方向的序号,记作(xc,yc).定义10.查询段.若授权用户提交给SP的查询兴趣点或区域的Hilbert值是连续的,则将其定义为一个查询段,记作QR(hb,he),其中hb,he分别表示开始、结束VH.3.2面向空间数据外包的隐私保护框架图1描述了面向空间数据外包的隐私保护框架,包含数据拥有者(DO)、授权数据使用者(ADU)以及云存储服务提供者(SP)3个角色.在数据预处理阶段,DO选定转换参数,根据原始兴趣点集合Φ中各兴趣点的位置构建索引项(步1.1),并生成密钥树Ψ.与此同时,使用传统加密方案对原始兴趣点集合中的元素进行加密,获得密文兴趣点集合Φ(步1.2).与文献[13]存储密文空间对象的结构相似,本文使用键-值对的形式将索引项与密文兴趣点集合Φ联系起来,生成外包数据(Φ),然后发送给SP(步1.3).DO将授权区域的转换密钥{STKi}Ψ与解密密钥KEYD通过安全信道发送给ADU(步1.4).Page4图1面向空间数据外包的隐私保护框架在查询阶段,ADU首先使用获得的转换密钥{STKi}对原始查询请求Q进行转换,获得一系列查询段{QRi}(步2.1),然后将查询段提交给SP(步2.2).SP根据接收到的查询段在外包数据(Φ)中检索,将索引值包含于{QRi}的密文兴趣点集合{φ}返回给ADU(步2.3).ADU使用获得的解密密钥KEYD对{φ}进行解密,获得明文查询结果(步2.4).本文主要关注于保护兴趣点的位置隐私,对于兴趣点包含信息的隐私保护可以采用传统加密方案,本文不做讨论.3.3空间转换技术为了保证空间数据的隐私,需要对兴趣点的原始位置进行转换,理想的空间数据转换方法应该具备单向函数的特性,同时,为了保证对密文空间数据查询的有效性,兴趣点在转换后还应保持其在原始空间中的邻近性.空间填充曲线[21]具备上述特性,可以将其应用于空间数据的转换中.Z曲线[22]、Gray码曲线[23]以及Hilbert曲线[14]是典型的空间填充曲线,可以作为对区域编码的依据.其中,Hilbert曲线由于在聚类和距离保持方面的特性[14,22-25]被广泛应用.本文借鉴Hilbert曲线对空间划分并进行转换的思想,提出了一种根据兴趣点分布特征而变化的自适应Hilbert曲线(AdaptiveHilbertCurve,AHC).AHC根据数据拥有者设定的存储容量对空间进行划分,使得生成的空间填充曲线可以根据兴趣点的分布密度来自动调整曲线的转换密钥中各参数的取值,可以有效避免索引的空值段问题,并支持数据拥有者对空间区域的自定义授权,而这是标准Hilbert曲线所无法完成的.4自适应Hilbert曲线使用AHC对数据拥有者的兴趣点集合进行处理包括3个过程:(1)根据指定的存储容量对定义空间进行四分树[26]划分,生成原子区域的四分树表示;(2)根据指定的曲线方向、起始点与缩放因子,按照Hilbert曲线的分形规则对四分树中各原子区域依次访问,计算各原子区域的Hilbert值,并构建兴趣点索引;(3)对已编码的四分树进行处理,生成密钥树.4.1定义空间的四分树划分在AHC中,对定义空间进行四分树划分,划分的粒度则由设定的存储容量C来决定,即在当前的划分下,若区域R中兴趣点数量超过C,则需要对R进一步划分,直至所有原子区域中兴趣点数量均不超过C.AHC根据兴趣点集合与指定的存储容量生成对定义空间的四分树划分,其生成方法如算法1所示.为便于描述,对算法中涉及的符号定义如表1.算法1.空间四分树生成算法.QuadTreeGenerate(Φ,C)输入:兴趣点集合Φ,存储容量C输出:四分树根节点Q1.createarootnodeQ;2.FOReachφ∈Φ3.QuadTreeInsert(φ,Q,C);Page54.ENDFOR5.RETURNQ;FunctionQuadTreeInsert(φ,Z,C)输入:兴趣点φ,四分树节点Z,存储容量C1.IFZC=2.IF|ZP|<C3.ZP←ZP∪φ;4.ELSE5.ZC←{Z(0),Z(1),Z(2),Z(3)};6.FOReachE∈ZP7.IFEL∈Z(i)R8.Z(i)P←Z(i)P∪E;9.ENDIF10.ENDFOR11.getD∈ZCwhichmeetsφL∈DR;12.QuadTreeInsert(φ,D,C);13.ENDIF14.ELSE15.getD∈ZCwhichmeetsφL∈DR;16.QuadTreeInsert(φ,D,C);17.ENDIF符号ZR四分树节点Z对应的区域ZP四分树节点Z存储的兴趣点集合ZO四分树节点Z对应区域的曲线方向ZN四分树节点Z对应区域的曲线阶数ZS四分树节点Z对应区域的起始点ZF四分树节点Z的父节点ZC四分树节点Z的子节点集合ZH四分树节点Z的Hilbert值ZV四分树节点Z的访问标记Z(i)四分树节点Z的第i个子节点S存储树节点的栈φL兴趣点φ的位置坐标THilbert曲线的分形规则表(状态转换表)算法1描述了根据兴趣点集合Φ与用户自定义存储容量C对原始空间进行四分树划分的过程,该算法由两个方法构成,其中QuadTreeInsert方法使用递归的方式完成对数据点的插入.若Z为叶子节点,且未达到其存储容量C,则直接将φ添加到节点Z,否则需要为Z新建4个子节点,并将其原有兴趣点移动到各自所属的子节点,然后确认φ属于哪个子节点包含的区域,该子节点记作D,接下来递归调用QuadTreeInsert,将φ插入节点D;若Z为中间节点,则需要先确认兴趣点φ属于Z的哪个子节点对应的区域,该子节点记作D,然后递归调用QuadTreeInsert,将φ插入节点D.在QuadTree-Generate方法中,通过对每个兴趣点依次执行节点插入过程,即可生成对定义空间的四分树划分,并为自适应Hilbert曲线中各原子区域Hilbert值的生成提供基础.假定输入规模为n,则生成的叶子节点个数为n/C,在平均情况下,树的深度为log4(n/C)+1,QuadTreeInsert方法插入一个兴趣点平均需要进行log4(n/C)+1次比较、C次兴趣点重构与1次插入,因此,QuadTreeGenerate方法需要进行n(log4(n/C)+1+C+1)次操作,即算法1的时间复杂度为O(nlog4n).4.2原子区域的Hilbert值生成在对定义空间进行四分树划分,获得各原子区域的四分树表示后,需要根据指定的曲线方向与起始点,对四分树的叶子节点即原子区域进行更新,设置各叶子节点的Hilbert值及中间节点的曲线方向与起始点信息,如算法2所示.Hilbert曲线方向分为向下(D1)、向右(R1)、向上(U1)、向左(L1)4种,子区域的序号由区域中的数字指定.如果改变曲线起始点的位置,则可以再生成4种分形规则,如D2、R2、U2、L2所示.算法2.原子区域Hilbert值生成算法THVG.TreeNodeHilbertValueGenarate(Q,S0,θ)输入:四分树根节点Q,起始点S0,曲线方向θ输出:更新后四分树的根节点Q1.QO←θ;QS←S0;2.PUSH(Q,S);c←0;3.WHILES≠4.Z←POP(S);5.IFZC≠6.FORi←3to07.Z(i)O←TO(ZO,ZS,i);Z(i)S←TS(ZO,ZS,i);8.PUSH(Z(i),S);9.ENDFOR10.ELSE11.ZH←c;c←c+1;12.ENDIF13.ENDWHILE算法2根据定义空间的四分树划分Q以及指Page6定的曲线方向θ与起始点S0,对四分树进行深度优先遍历,以各叶子节点的访问先后次序确定其对应原子区域的Hilbert值.在遍历的过程中,依据图2的Hilbert曲线分形规则,从根节点开始,逐层确定各中间节点的曲线方向与起始点,如算法第7行所示,其中TO(ZO,ZS,i)与TS(ZO,ZS,i)分别表示节点Z第i个子节点对应区域的曲线方向与起始点.假定兴趣点集合规模为n,在平均情况下,算法2需要访问∑log4(n/C)需访问一次,即算法2的时间复杂度为O(n).4.3密钥树的生成根据算法2确定了各原子区域的Hilbert值,可以用该值对原子区域中的兴趣点建立索引,但对于ADU给定的检索兴趣点或者区域,如果直接使用算法2处理后的四分树进行搜索,则会产生检索效率较低的问题,且不适用于数据拥有者对空间区图3AHC与密钥树算法3.AHC密钥树生成算法.AHCKeyTreeGenerate(Q)输入:四分树根节点Q输出:更新后四分树的根节点Q1.PUSH(Q,S);2.WHILES≠3.Z←POP(S);4.IFZC≠5.IF{ZC}V=TRUE6.IF{ZC}C=&{ZC}N=constant7.ZN←{ZC}N+1;ZC←;ZV←TRUE;8.ELSE9.ZV←TRUE;10.ENDIF11.ELSE12.PUSH(Z,S);13.FORi←3to014.PUSH(Z(i),S);域的自定义授权.为满足数据拥有者与授权用户的需求,算法3给出了自适应Hilbert曲线的密钥树生成方法.算法3在算法2处理后的四分树基础上,自底向上进行剪枝操作并更新各节点的密钥参数,生成一颗新的四分树,即密钥树,如图3(b)所示.在该四分树中,叶子节点表示其对应区域的Hilbert曲线分布均匀,节点中存储该区域的转换密钥STK(R,S0,N,θ,Γ),例如STK3;中间节点则表示该区域的Hilbert曲线分布不均匀,中间节点包含4个子节点,分别用NW、NE、SW、SE表示,为便于后续处理,中间节点存储的转换密钥为STK(R,S0,NM,θ,Γ),其中NM表示其子节点中最高的曲线阶数,例如STK4;对于曲线阶数为0的节点,其曲线方向字段则为空,例如STK6.经过算法1和算法2的处理,四分树节点中已生成R,S0,θ,算法3进行剪枝操作,生成密钥参数N.15.ENDFOR16.ENDIF17.ELSE18.IFZN>(ZF)N19.(ZF)N←ZN;20.ENDIF21.ZV←TRUE;22.ENDIF23.ENDWHILE以图3(a)所示的自适应Hilbert曲线为例,经过算法1和算法2处理后,即可获得如图4(a)所示的四分树,叶子节点对应原子区域,算法3获得该四分树后,从根节点开始,根据节点存储的曲线方向与起始点信息,依次对各子节点进行访问,根据算法3中5、6行的判断条件,将可以合并的叶子节点从四分树中删除,并据此设定其父节点的密钥参数;对不满足合并条件的叶子节点,则根据其节点信息设置Page7其密钥参数,并更新其父节点的密钥参数.最终获得如图4(f)(即图3(b))所示的密钥树.假定兴趣点集合规模为n,在平均情况下,算法3对每个节点均需要访问两次,即2∑log4(n/C)8n-2C3C次访问,故算法3的时间复杂度为O(n).5空间查询处理第4节介绍了使用AHC对兴趣点构建索引并生成密钥树的方法.本节则对基于AHC的空间查询处理方法进行说明.5.1基于AHC的Hilbert值计算方法为使ADU与DO可以根据索引值对密文空间进行检索,首先需要解决基于AHC的Hilbert值计算问题.由于DO可能仅将密钥树Ψ部分共享给ADU,即ADU获得的转换密钥{STKi}Ψ,因此ADU仅能对授权范围内的兴趣点进行查询.ADU获得转换密钥{STKi}后,若待查询兴趣点φ属于{STKi}的某区域,则可根据4.2节的Hil-bert曲线分形规则,采用逐层深入的方法计算出φ在AHC中的Hilbert值,其计算方法如算法4所示.算法4.基于AHC的Hilbert值计算方法.PositionToHilbert(φ,{STKi})输入:兴趣点φ,AHC转换密钥{STKi}输出:兴趣点φ的Hilbert值1.getZ∈{STKi}whichmeetsφL∈ZR;2.IFZ=3.RETURNNULL;4.ELSE5.compute(xc,yc)ofφusingformula1;6.T0←T(ZO,ZS);M←0;7.FORi←ZN-1to08.M←M2;9.xq←xc&(1i);yq←yc&(1i);10.Sn/Tn←T0(xq,yq);T0←Tn;M←M|Sn;11.ENDFOR12.ENDIF13.H←H0+M;14.RETURNH;在算法4中,首先需要根据兴趣点φ(x,y,ξ)和转换密钥{STKi},定位到φ的所属区域中,若不存在该区域,说明用户不具备访问权限,返回空值;否则即可获得STK(R,S0,N,θ,Γ)∈{STKi},且φL∈R.使用(x0,y0)表示区域R左下角端点,r表示R的边长,H0表示区域起始点ZS的Hilbert值,则该兴趣点所属区域的整数编码(xc,yc)需满足如下条件.条件1:r条件2:r即获得兴趣点所属区域的整数编码之后,即可根据转换密钥STK来计算兴趣点在该区域中的相对Hilbert值,记作M,如算法4第6~11行所示,最后使用区域起始点的Hilbert值H0加上M即可获得兴趣点在定义空间中的Hilbert值.在算法4的计算过程中,需要根据当前层次的(xq,yq)坐标、曲线方向ZO以及起始点ZS信息,获取当前层次的序号Sn、下一层次的曲线方向及起始点信息.本文使用曲线状态转换表对图2的分形规则进行表示,表2即为规则D1的状态转换表,其他规则的状态转换表与此类似,通过查询该表即可获得兴趣点在当前层次的序号以及下一层次的曲线状态转换表.假定ADU获得整个密钥树,则在平均情况下,算法4在定位时需要进行log4(n/C)+1次比较,在计算Hilbert值时需要ZN次循环,即共需要log4(n/C)+1+ZN次操作,故算法4的时间复杂度为O(log4n).Page85.2基于AHC的查询处理方法在对空间的各种查询需求中,范围查询是一个基本类型,ADU对空间的二维查询请求Qw=[xql,xqh]×[yql,yqh]必须转换为一维查询段QR(hb,he)才可以被SP识别并处理.对于标准Hilbert曲线中的范围查询处理,需要经过最大块分解[27]与查询段的生成与合并[28]两个步骤.本文对于AHC建立的兴趣点索引,并不能直接使用Hilbert曲线的处理方法,而需要将查询范围分解到转换密钥{STKi}所对应的区域中,然后对各个分解区域应用Hilbert曲线的范围查询处理方法,具体步骤如下.1.从{STKi}根节点开始,判断范围查询Qw的所属区域,若Qw与根节点不存在相交区域,则退出,否则继续;2.判断Qw与当前节点各子节点的相交区域,使用Qw1,Qw2,Qw3,Qw4分别表示Qw与各子节点的区域交集,其中,交集可能为空;3.依次对各子节点执行步2,直至到达{STKi}的叶子节点;4.对分解至叶子节点的所有子区域使用Hilbert曲线的范围查询处理方法,获得查询段;{QRi}.5.将所有查询段进行排序与合并,获得查询段集合借鉴文献[12]在标准Hilbert曲线上进行KNN查询的思路,本文也将KNN查询分为近似KNN查询与精确KNN查询两类.对于近似KNN查询,授权用户根据查询点q,计算其Hilbert值VH,然后将VH与K提交给SP,SP在密文数据集中从递增、递减两个方向检索数据,直至获得K个结果,记作RS,即完成近似KNN查询.精确KNN查询在RS的基础上,由授权用户对RS解密后,计算各兴趣点与q的距离,获得距q最远的兴趣点d,其距离记作‖d-q‖,然后生成以q为中心,2‖d-q‖为边长的正方形查询区域,利用上述的AHC上的范围查询处理方法,获得查询结果RS,授权用户获得RS并解密后,取距离q最近的前K个兴趣点即可获得精确KNN查询结果.6实验结果与分析为比较本文提出的自适应Hilbert曲线与标准Hilbert曲线在安全性与性能方面的表现,我们在5个真实数据集与2个模拟数据集上进行了实验.真实数据集包括Oldenburg(OL:6105个兴趣点)、SanJoaquinCounty(TG:18263个兴趣点)、SanFran-cisco(SF:174956个兴趣点)、NorthAmerica(NA:175813个兴趣点)以及NorthEastUSA(NE:123593个兴趣点).其中,数据集OL,TG,SF,NA从犹他大学的官方网站获取①,NE则来自于R-treepor-tal②.OL,TG,SF,NA均为对应城市或区域的路网兴趣点数据集,NE则是纽约、费城、波士顿3个城市的真实邮政地址信息,这些数据集很好地对应了空间数据外包的应用场景.模拟数据集为随机生成数据集,包括均匀分布数据集(UN,100000个兴趣点),采用随机数发生器自动生成;偏斜分布数据集(SK,100000个兴趣点),该数据集包含4个高斯聚簇(4个分布中心点随机选择,标准差σ=0.05),其中99%的兴趣点均包含在这4个聚簇中.实验在Inteli5-24003.1GHz处理器,8GB内存计算机上完成,实验通用参数设置如表3所示.我们从曲线参数选择、兴趣点集合索引生成时间、安全性、范围查询效率和KNN查询效率几个方面进行了全面的实验比较与分析,充分证明了AHC的安全性与效率.6.1曲线参数选择使用标准Hilbert曲线或AHC对定义空间进行填充后,每个原子区域都会被赋予一个Hilbert值,兴趣点则与其所属的原子区域具有相同的Hil-bert值,由此构建兴趣点集合的索引.当两个兴趣点处于同一原子区域时,就会出现Hilbert值重叠的情况,定义重叠指数λ如下:其中,M为含有兴趣点的原子区域个数,H为曲线上Hilbert值的上界,ni为Hilbert值为i的兴趣点个数.为保证检索效率,需要避免出现Hilbert值重叠的情况.对于标准Hilbert曲线,可以通过增大阶数N,对定义空间进行更细粒度的划分;对于AHC,可以设定较小的存储容量C,使任意原子区①②Page9域的兴趣点个数均不超过C.理想状况下,我们希望重叠指数尽可能接近1,即不存在Hilbert值重叠的情况.由于标准Hilbert曲线与AHC在进行区域划分时采用的参数不同,为使后续实验在相同的标准下比较,本节对两种曲线的参数选择进行研究.图5标准Hilbert曲线阶数与重叠指数的关系由图5可见,对于标准Hilbert曲线,其重叠指数随曲线阶数N迅速下降,当N=12时,7个数据集上的重叠指数基本趋近于1;当8N10时,7个数据集上的重叠指数呈现出较大的差异,其中,OL与UN的λ值较低,NA、SF与SK的λ值较高,NE与TG的λ值则介于中间,这是由于标准Hil-bert曲线对定义空间的划分采用统一尺度,因此对于兴趣点数量多、分布密的数据集,会出现较多的Hilbert值重叠兴趣点,从而提高了λ值.从图6可以看出,在AHC上,重叠指数随存储容量的增加而缓慢增长,由存储容量及重叠指数的定义可知,当存储容量设置为1时,重叠指数也就为1,通过设置存储容量即可大致了解重叠指数的大小,且7个数据集在设定相同的存储容量条件下,各自的重叠指数也比较接近.由图5、图6可得如表4所示的不同数据集上重叠指数与曲线参数的对应关系,在后续的实验中,对标准Hilbert曲线与AHC,分别选择对应的曲线阶数N与存储容量C,从而进行比较.数据集NA131NE121OL111SF121TG121SK121UN111需要说明的是,尽管AHC可以根据C值对空间进行自适应划分,但是当λ>1时,其C值需要根据数据集的不同而进行调整.然而由表4可见,当λ=1时,AHC对所有数据集的C值均为1,这是由重叠指数的定义决定的,而标准Hilbert曲线的阶数则随数据集的不同出现较大的差异,即在曲线参数选择方面,AHC比标准Hilbert曲线更为容易.在理想状况下,重叠指数取值为1,因此可以直接将AHC的C值确定为1,从而不需要人工调整.6.2索引生成时间对比采用空间填充曲线对定义空间进行转换的一个重要衡量指标就是生成兴趣点集合的索引所需的时间.本节对比标准Hilbert曲线与AHC的索引生成时间,其中EDHO[29]与BIA[24]为标准Hilbert曲线的索引生成算法;对于AHC,由于其对空间的划分随兴趣点分布的不同而变化,并非标准Hilbert曲线的均匀划分方式,因此无法将EDHO或BIA应用在基于AHC的索引生成中,故采用4.2节提出的THVG算法生成基于AHC的兴趣点索引.本节设定重叠指数为1、1.4,依据6.1节的曲线参数设置表确定对应的曲线参数,比较这3种算法在不同数据集上生成索引的效率.对各数据集,重复100次索引生成算法,取平均值作为索引生成时间.由表5可见,与EDHO相比,BIA算法生成索引的速度更快,这两种算法的索引生成时间均随重叠指数的增加而下降,且处理SK数据集与规模相似的真实数据集(NA、NE、SF)所需时间均长于处理UN数据集所需时间,如6.1节所述,由于SK数据集与真实数据集的兴趣点分布较为集中,为获得相同的重叠指数,需要在这些数据集上使用更高的曲线阶数,因此增加了索引生成的计算量.THVG算法生成兴趣点索引的效率大幅度超过了EDHO与BIA算法.其中,当重叠指数分别取1、1.4时,THVG在所有数据集上的索引生成时间平均仅为BIA的59%、43%.这是由于AHC在构Page10建索引时,对不同密度的区域采用了不同的曲线阶数,使得对密度较低的区域不必使用过高的曲线阶数,从而提高了索引的计算效率.数据集λ=1NA16621331100415131136585NE1095865505978730306OL48361236258SF1538120670714921118445TG147113641208634SK922706489860639317UN8796684067515632686.3AHC的安全性分析文献[15]证明了标准Hilbert曲线可以作为进行空间转换的单向函数,其转换密钥即为曲线参数.当AHC对定义空间均匀划分时,即转化为标准Hilbert曲线,同样具备抗穷举攻击的能力;当兴趣点非均匀分布时,AHC即转化为随兴趣点分布密度而变化的多个标准Hilbert曲线的组合,由于恶意攻击者采用蛮力攻击的方法,从理论上其无法穷举所有的兴趣点分布情况,且各区域的标准Hilbert图7索引分布图(A.)Hilbert(B.)AHC为进一步分析两种曲线的索引分布特点,我们从连续段数量、连续段平均长度、空值段数量和空值段平均长度4个方面进行比较,各数据集的索引分布情况如表6所示.其中,标准Hilbert曲线生成索表6索引分布数据集NA1490921147491.101.53149093114750449.013.18NE110131705761.051.7011013270577151.292.29OL604535811.011.70SF146657976921.131.7914665897693113.272.10TG17557100411.021.821755810042954.512.49SK70447515451.161.757044851544236.992.04UN96533569211.021.76965345692242.422.04曲线参数也无法在多项式时间内破解,因此AHC具备抗穷举攻击的能力.文献[12]对使用标准Hilbert曲线构建兴趣点索引进行了分析,指出恶意SP可以通过对具有相同或相近Hilbert值的兴趣点数量进行分析,从而发现在转换空间中的兴趣点密集区域,因此增大了用户隐私数据泄露的风险.为了直观地分析这类攻击方法,我们设定重叠指数为1,依据6.1节的曲线参数设置表确定对应的曲线参数,对各数据集的索引进行了可视化处理,如图7所示,其中,左侧方块表示兴趣点的空间分布,A、B则分别表示对应数据集的Hilbert、AHC索引分布图.当兴趣点均匀分布时(UN),两种曲线的索引分布较为接近.而当兴趣点分布密集时,标准Hil-bert曲线生成的兴趣点索引则出现了很多空值段,即A.中的长段灰色部分.这样恶意SP便可以对索引的断裂状况进行分析,进而发现转换空间中的兴趣点密集区域.而AHC生成的索引则基本没有长段空值区域,且连续段与空值段的分布较为均衡,这样恶意SP就很难从索引分布中挖掘出有价值的信息.引的连续段与空值段数量均远大于AHC,且其连续段与空值段的平均长度也表现出了巨大的差异,而AHC生成索引的连续段与空值段平均长度则非常接近,这充分说明了AHC索引分布的均衡性.HilbertAHCPage11使用哑元对空值段进行填充[12]可以显式去除空值段,但恶意SP可以通过对查询历史进行分析,发现查询频次过低的索引项,进而确认哑元的存在范围,即可发现空值段.本文为量化隐私信息泄露的风险,使用信息熵的思想,定义空洞指数β如下:其中:ωi表示索引中的一个空值段长度,G表示空值段的个数,j表示索引中一个连续段的长度,F表示连续段的个数,L则表示索引的总长度.实验在重叠指数λ=1的条件下,分别计算了使用标准Hilbert曲线与AHC对兴趣点集合构建索引的空洞指数,结果如表7所示.数据集NANEOLSFTGSKUN空洞指数衡量了索引中包含的空值段与连续段对隐私信息泄露风险的影响,空值段与连续段的分布越均衡,则越不利于恶意SP分析.由信息熵的性质可知,空值段与连续段的分布越失衡,空洞指数越低,则表示泄露给恶意SP的信息就越多,隐私信息泄露的风险也越大.由表7可见,在非均匀分布数据集上,AHC的β值均大幅度高于标准Hilbert曲线,平均高出了57%,这表明AHC在非均匀分布数据集上泄露隐私信息的风险要远小于标准Hilbert曲线.通过对两种曲线的特性分析可知,AHC在均匀数据集上对空间的填充效果与标准Hilbert曲线趋于一致,因此在UN上的空洞指数非常接近;由索引分布的数图8范围查询准确率据可知,标准Hilbert曲线在非均匀分布数据集上构建索引时,产生的空值段数量巨大,且其连续段与空值段的平均长度也相差甚远,而AHC由于对空间进行了自适应划分,因此空值段的长度与数量均远小于标准Hilbert曲线,且其连续段与空值段的分布均衡,使得AHC的空洞指数以较大幅度高于标准Hilbert曲线.6.4范围查询效率比较在范围查询与近似KNN查询中,标准Hilbert曲线与AHC均会引入多余兴趣点,使用文献[15]定义的评价指标对检索结果的质量进行度量,假定一次检索的真实结果为S(d1,d2,…,dK),而实际检索结果为S(d1,d2,…,dK),则定义准确率ρ如下:其中:|S|表示结果集S中的元素个数,|S∩S|表示在实际的结果集S中有效兴趣点的个数.实验从如下3个方面比较标准Hilbert曲线与AHC的范围查询效率:(1)范围查询准确率;(2)范围查询转换时间;(3)范围检索查询段个数.选择NA、SK、UN作为对比数据集,设定重叠指数分别为1、1.4,依据6.1节的曲线参数设置表确定对应的曲线参数,随机生成100次范围检索,取平均值作为实验结果,如图8、图9、图10所示.由图8可见,随着查询窗口边长的增大,两种曲线的查询准确率也持续上升,当窗口边长小于0.03时查询准确率上升较快,大于0.03后逐渐趋于平缓.这是由于在范围查询中,查询窗口边界区域会出现查询窗口与原子区域部分重合的情况,使得查询结果中包含该原子区域非重合部分的兴趣点,即多余兴趣点,随着查询窗口边长的增大,边界区域的非重合部分面积之和与查询窗口的面积之比会逐渐减小,范围查询的准确率也随之提高.在相同的查询窗口条件下,重叠指数越小的曲Page12图9范围查询转换时间图10范围检索查询段个数线,其准确率越高.对比相同设置条件的标准Hil-bert曲线与AHC可以发现,在NA与SK上,AHC的查询准确率均优于标准Hilbert曲线,在UN上,两种曲线的查询准确率则非常接近,这是由于在UN上,AHC对空间的划分粒度与标准Hilbert曲线趋于一致,因此获得了相似的实验结果.为了比较两种曲线在进行范围查询转换时的效率,实验对每100次范围查询所需的转换时间进行了对比,如图9所示.可以发现,在相同的查询窗口边长与重叠指数设定条件下,AHC所需的查询转换时间均短于标准Hilbert曲线,这是由于标准Hil-bert曲线为了达到与AHC相同的重叠指数,必须选择更高的曲线阶数,而AHC所需的查询窗口分解与查询段合并的开销与之相比则很低,因此标准Hilbert曲线需要更多的处理时间.在UN上且λ=1.4时,两种曲线的范围查询转换开销则非常接近,这与两种曲线在UN上的划分粒度特性相符.授权用户在进行范围检索时,需要将待查询窗口进行转换,将获得的查询段集合发送给SP,因此该集合的大小,即查询段数量,与通信负载成正比.图10展示了窗口边长与重叠指数对查询段数量的影响,当λ=1时,标准Hilbert曲线生成的查询段数量均大于AHC,而当λ=1.4时,两种曲线生成的查询段数量则较为接近,特别地,在UN上,查询段数量基本相同.与图9对比可以发现,查询段数量与查询转换时间表现出了相似的分布规律,即越多的查询段对应着越长的处理时间.6.5犓犖犖查询效率比较在近似KNN查询中,为了衡量实际查询结果与真实查询结果在距离方面的偏差,定义偏差因子[15]μ如下:其中,q表示查询点,‖di-q‖表示兴趣点di与查询点q之间的欧式距离.由于S为真实结果,因此,μ0,当且仅当S=S时,μ=0,此时ρ=1.实验从如下3个方面比较标准Hilbert曲线与AHC的KNN查询效率:(1)近似KNN查询准确率;(2)近似KNN查询偏差因子;(3)精确KNN查询处理时间.实验数据集选择与参数设置与6.4节相同,随机生成100次近似KNN查询,取平均值作为实验结果,如图11、图12、图13所示.由图11可见,当K10时,两种曲线在各数据集上的近似KNN查询准确率保持稳定,且λ取值越小,查询准确率越高,这与区域划分的粒度特性相符.当λ=1时,两种曲线的查询准确率基本相同,当Page13λ=1.4时,AHC的准确率要优于标准Hilbert曲线,在NA、SK、UN上分别提高了77%、4%、19%.分析数据集的分布特点可知,由于NA的聚簇中心图11近似KNN查询准确率图12近似KNN查询偏差因子图13精确KNN查询处理时间偏差因子反映了实际查询结果与真实查询结果之间的距离差距,比准确率更能体现查询结果的质量.根据图12的实验结果,当λ=1时,AHC的偏差因子在各数据集上略优于标准Hilbert曲线.当λ=1.4时,AHC检索结果的偏差因子则远小于标准Hilbert曲线,这符合AHC对定义空间进行自适应划分的特性.由于近似KNN查询所需的计算资源很少,将标准Hilbert曲线与AHC在查询处理时间上进行远多于SK与UN,因此,当重叠指数增高时,在NA上进行近似KNN查询,标准Hilbert曲线引入无效兴趣点的概率会大大高于AHC.对比意义不大,因此本文对比了两种曲线在进行精确KNN查询时的处理时间,其中不包含对兴趣点解密所需的时间,实验对每100次精确KNN查询所需的处理时间进行了对比,如图13所示.由图13可见,对于精确KNN查询,两种曲线的查询处理时间均随着K值的增加而上升,且在NA、SK、UN上的实验结果表明,标准Hilbert曲线的查询处理时间均以较高的幅度超过AHC.由标准Hilbert曲线的特性可知,当兴趣点数量多、分布密Page14时,其对空间的分割粒度成指数增长,因此当查询点出现在兴趣点分布稀疏的区域时,仍需要处理曲线阶数很高的查询窗口,而AHC由于对空间进行了自适应分割,其在兴趣点稀疏区域仅需要处理较低阶数的查询窗口,因此AHC的精确KNN查询处理时间要远小于标准Hilbert曲线.7总结标准Hilbert曲线对空间兴趣点进行转换时,没有考虑到兴趣点的分布特性,且为了获得需要的转换效果,可能需要对曲线参数进行多次调整,同时,数据拥有者在将转换密钥共享给授权用户时,就给予了该用户全部区域的访问权限,无法支持数据拥有者对空间区域的自定义授权.本文针对上述问题,提出了一种可以根据兴趣点分布特征而变化的自适应Hilbert曲线,该曲线根据原子区域的兴趣点存储容量对空间进行划分,使用Hilbert曲线的分形规则来确定各原子区域的访问顺序,并由此构造密钥树,数据拥有者可以将密钥树的一部分共享给授权使用者,从而实现了对空间区域的自定义授权.本文分析了使用空间填充曲线构建兴趣点索引的隐私信息泄露风险,定义了空洞指数作为衡量指标.在真实数据集与模拟数据集上的实验表明,与标准Hilbert曲线相比,本文提出的AHC在进行空间转换方面具有更高的安全性与更优的查询效率.在以后的工作中,我们将从以下两方面进行深入研究:(1)进一步分析使用空间填充曲线构建兴趣点索引的隐私信息泄露风险,提出更加直观、准确的评价指标;(2)考虑用户进行查询完整性验证的需求,提出适用于本文方法的查询完整性验证方案.
