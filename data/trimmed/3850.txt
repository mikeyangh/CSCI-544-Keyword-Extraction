Page1Seadown:一种异构MapReduce集群中面向SLA的能耗管理方法林彬李姗姗廖湘科孟令丙刘晓东黄(国防科学技术大学计算机学院长沙410073)摘要数据中心的能耗管理已经成为大规模数据处理中的热点问题,其主要目标是控制相关成本的急剧增长.大量的工作围绕着在集群利用率较低时,关闭部分服务器来降低能耗,但是这些方法都严重受限于数据存储策略,同时难以保证应用的实时性能.MapReduce集群作为目前流行的大规模数据处理平台,能耗问题尤为突出.文中针对异构MapReduce集群,提出一种面向SLA的能耗管理方法Seadown.首先,提出一种混合数据副本存储策略,它允许关闭大量节点,同时保证数据的完整性和集群的容错能力.其次,设计了一种基于历史记录的响应时间预测方法,它根据服务器节点的数量、性能参数和运行时间的历史信息准确估计程序的响应时间,相对误差大都在6%以下.最后,通过选择性地关闭部分节点以达到最小化能耗,同时保证应用程序的实时性能.文中证明了该优化问题是NP-hard问题,并提出了一种启发式的节点关闭策略.实验结果表明,在节点关闭策略下MapReduce应用的实时性得以保证,同时降低了大量的能耗.关键词能耗管理;节点可开关;MapReduce;数据中心;绿色计算1引言近年来,随着数据中心规模的不断扩大和网络应用服务的急剧膨胀,能源消耗日益增长,所带来的开销不仅占了数据中心总开销的很大比重,同时限制了基础设施的扩容和使用性能[1].据统计,数据中心的利用率大都维持在30%以下,但是服务器的能耗却很高,并且大部分都被浪费了[2-3].在此背景下,工业界和学术界的研究人员提出了在利用率较低的时段,通过关闭部分服务器来降低能耗.MapReduce作为目前主流的大规模数据处理模型,已经广泛应用于各大数据中心,如Google、Yahoo!以及Facebook等[4].MapReduce集群的特点是计算和存储处于同一节点,通过部署大量廉价的机器来提供网络应用服务,并且越来越趋于异构化.然而在MapReduce集群中关闭节点会严重受限:数据的完整性遭到破坏,应用的实时性得不到保证,并且这些计算和存储的因素需要同时考虑,加大了能耗管理的难度.研究者大多致力于重新设计CPU、网络以及存储子系统,使它们的能耗与利用率成正比,即“Energy-Proportional”,减少不必要的浪费[3,5-7].然而这些工作都是针对单一子系统,没有考虑MapReduce集群中计算与存储系统相结合带来的问题.Leverich等人[8]首次将关闭节点策略应用于MapReduce集群,他提出建立集群的一个子集“CoveringSubset”,在每次存储新数据时都至少将一个数据副本存放在这个子集中,并且在集群利用率较低的时段关闭子集之外的所有节点.这种方法能够保证数据的完整性,但没有考虑集群的容错问题以及应用程序的性能问题.Lang等人[9]提出一种“All-inStrategy”的策略,即当有MapReduce任务时就开启所有节点,快速完成MapReduce程序,当没有任务时就关闭所有节点,消除了机器空闲时带来的能耗损失,但是它没有解决在应用处理过程中能耗过高的问题.在MapReduce集群中关闭节点的目标是尽可能地降低能耗,同时兼顾计算和存储带来的问题,包括数据完整性、容错能力和应用的实时性能.数据完整性指数据是可连通的,在关闭节点的情况下,数据至少要保证有一个副本存储在活跃的节点上.容错能力指当服务器意外宕机时,丢失的数据可以快速恢复.尽管关闭节点可以减少能耗损失,然而在大规模数据并行处理中会导致性能严重下降,使得应用的响应时间不可接受.在云基础服务设施中,云设施提供者为Internet应用者分配计算资源,两者之间签订并遵从服务级合约(ServiceLevelAgreement,SLA).云设施提供者应该分配合适的资源以满足应用的服务级目标,这里的SLA指用户的应用程序在指定时间内运行完.当决定是否关闭某个节点时,需要保证该节点上的数据在其它活跃节点上存在备份,保证集群仍然具有一定的容错能力,同时还要知道响应时间的增加是否可以接受.然而在MapReduce集群的存储策略下,如HDFS、GFS,关闭少量节点就会导致数据丢失[8].MapReduce程序的响应时间受很多因素的影响,如节点的性能、参与计算的节点数量、异构性和数据局部性特征,使得程序性能难以预测,影响节点关闭的决策.针对上述问题,本文提出了一种在异构MapReduce集群中的能耗管理框架Seadown.首先,提出了一种混合数据副本存储方法,集成了顺序存储策略和随机存储策略的优点,使得在MapReduce集群中能够关闭大量节点,同时兼顾系统的容错性能,保证集群正常运转.其次,提出了一种基于历史记录的响应时间预测方法,根据服务器节点的数量、性能参数运行时间的历史信息估算响应时间.实验表明,该方法能够准确地预测响应时间,相对误差大都在6%以下.最后,在响应时间预测的基础上,最小化能耗的同时满足应用的SLA要求.本文证明了能耗最小化问题是NP-hard问题,并提出一种启发式的节点关闭算法,有效地解决能耗与性能优化问题.本文第2节讨论相关工作;第3节描述问题模型;第4节给出混合数据副本存储策略;第5节提出面向SLA的能耗管理策略,包括响应时间预测方法Page3和启发式的关闭节点策略;在第6节详细给出了实验评测.最后总结全文并对下一步工作进行展望.2相关研究2.1MapReduce框架下的能耗问题MapReduce用于大规模数据集(大于1TB)的并行运算,广泛应用于Google、Yahoo!、Amazon.分布grep、分布排序、Web连接图反转、Web访问日志分析等都基于此框架[4,10].MapReduce框架在大规模数据集上做并行处理有极大的优势,但是在集群的能效提升方面则存在诸多限制[8].首先,MapReduce框架将数据采用分布式的随机方式存储到各个节点,提供PB级的数据存储,并提供良好的处理性能和可靠性.即使是空闲的节点也要处于开机状态,从而保证数据的可用性.其次,MapReduce框架部署在数万台节点上.这些节点需要应对MapReduce处理和其他无关工作负载.这就意味着,在工作负载和硬件配置之间难以找到一个完美匹配,导致硬件资源的浪费或者紧张.2.2能耗管理的相关技术目前对数据中心能耗问题的研究工作主要集中在关闭节点上,主要思想是在集群利用率较低的时段,关闭部分服务器,将负载迁移到活跃节点上,提高集群的效率.Barroso等人[3]提出了“Energy-Proportional”即系统能耗与工作量成正比的概念,他们认为计算机的各个子系统在设计时都应该符合这个标准.通过实时监控CPU、网络和存储等子系统,自动关闭利用率低甚至空转的部件,提高运转部件的利用率,达到“Energy-Proportional”[5-7,11-12].众多硬件厂商推出低能耗处理器,在系统利用率较低时自动转入低能耗模式[13].但是这些工作都只关注单一子系统,很少关注MapReduce集群,没有考虑计算和存储系统紧密结合的情况.Leverich等人[8]首次尝试将关闭节点的策略应用于MapReduce集群,他们验证了这种策略的可行性,但是方法过于简单,没有考虑数据可靠性和任何性能方面的问题.Amur等人[12]设计了一个具有弹性的“Energy-Proportional”存储系统,他们改变了数据的存放策略,从而可以根据负载情况自动调整集群的大小.然而他们依然是建立在“CoveringSubset”基础上的,数据恢复能力较差.Sierra系统采用了全新的数据存储策略来达到“Energy-Proportional”[14],系统考虑了数据可用性、一致性和容错能力,但缺点依然是数据失效恢复能力较差.并且这些系统都没有考虑MapReduce应用的性能问题.Lang等人[15]将顺序存储策略应用于节能系统中,他们发现这种存储方式很自然地匹配于节点关闭策略,易于负载均衡和能耗管理.但是他们的应用是数据库系统,难以移植到MapReduce集群中.在另一项工作中[9],作者比较了“CoveringSubset”方法和“All-inStrategy”方法.这两种方法节省的能耗取决于应用程序本身的复杂度和服务器节点的功耗参数,没有一种方法适用于所有应用.并且这两种方法都过于简单,作者提出的“All-inStrategy”方法并没有在程序运行过程中降低能耗,缺少响应时间预测机制来帮助决策.Lin等人[16]通过动态调整数据中心的节点数量,根据服务器负载最小化能耗.通过建模,详细计算了能耗开销,找出了理论最优值,但是忽略了数据可靠性和性能要求.本文在此模型基础上,提出一种异构MapReduce集群中面向SLA的能耗管理方法,最小化能耗的同时满足数据完整性、数据容错能力和应用的实时性要求.3系统建模本文考虑的异构系统由多个机架组成,假设机架内的节点是同构的,机架间的节点是异构的,共有m个机架,机架i(i=1,…,m)有N(i)个节点.每个节点具有不同的性能指标和功耗参数,即运行不同的应用会表现出不同的性能.这里用C(i,ω)表示机架i内的节点在运行程序ω时的计算性能,E(i,ω)表示在单位时间里机架i内的节点在运行程序ω时的能耗.本文采用Xie等人[17]提出的计算率来衡量C(i,ω),通过记录每个节点单独运行相同输入的MapReduce应用的响应时间,以它们的最小值为基准,得到节点之间计算能力的比值.能耗模型E(i,ω)用一个线性公式表示,大量的研究表明服务器的能耗通常与CPU利用率成正比[8,16,18].通过一些前期实验可以获得每台服务器在不同应用下的计算能力和能耗参数.基于上面的系统建模,下面介绍能耗最小化问题的建模.关闭节点操作可以看作是系统状态的改变,并由一个二维向量犡(i,j)表示第i机架的第j个节点的状态.犡(i,j)为1表示节点处于活跃状态,Page4为0则表示该节点被关闭或处于节能状态,X(i)=∑N(i)犡(i,j)表示机架i内活跃节点的数量.这样我们j=1基于Lin等人[16]提出的模型,进一步考虑在异构MapReduce集群中面向SLA的能耗最小化问题.在MapReduce默认调度策略FIFO下[4],分配到工作节点上的任务数量与节点的计算能力成正比,计算能力越强单个任务越快完成,从而有空闲槽接受新任务.本文关注以Map任务为主的应用,即Map阶段的运行时间远超过Shuffle和Reduce阶段,这种类型的应用实际上是MapReduce模型的主流应用,占据了数据中心应用的很大比重.忽略Reduce任务占用的CPU槽和运行时间,可以用节点分配到的Map任务数量衡量节点的计算能力.这里用ω(i)表示机架i内的节点在单位时间内运行应用ω时所分配的Map任务数量,ω(i)/ω(j)=C(i,ω)/C(j,ω),ω=∑m点从关闭状态到活跃状态的启动能耗,因为大量研究表明这种能耗仅占总能耗很小的一部分,可以忽略不计.那么能耗优化问题如下所示:MinimizeE(X,ω)=∑ms.t.∑m公式表示目标函数为最小化集群能耗,条件为FIFO调度策略下Map任务分配与节点计算能力成正比.QualityofServices指在关闭部分节点的情况下,依然要保证一定的服务质量:存储服务,用户的数据不能丢失,数据在意外丢失时能够快速恢复,保证数据的完整性;计算服务,用户提交的任务需要在指定的时间内运行完.本文提出的异构MapReduce集群中面向SLA的能耗管理方法Seadown由两个模块组成.一个是混合数据副本存储策略,允许关闭大量节点同时保证数据完整性,还兼顾了容错性能,保证MapReduce集群的正常运转.另一个是SLA感知的能耗管理策略,它能够准确预测在节点关闭情况时程序的响应时间,在满足SLA的要求下尽可能地关闭节点以降低集群能耗.在后面几节中会详细描述Seadown管理方法.4混合数据副本存储策略数据副本存储策略是将数据块的多个副本按照一定的规则放置到集群的不同节点中[19],目前主要的策略分为顺序存储策略和随机存储策略.前者的典型代表是ChainedDeclustering或基于DHT的存储[20-21],后者主要应用于HDFS和GFS[10]等分布式文件系统.采用何种存储策略主要考虑两方面的指标:一是在保证数据完整性的前提下能够关闭的服务器节点的数量,即在关闭了某些节点后,每个数据块仍至少有一个备份存储在活跃节点上;另一个是数据重建并行度,指当有节点意外宕机时,丢失的数据可以并行恢复到多少个节点上.参与数据恢复的节点越多,重建速度越快,容错能力越强,这对于MapReduce集群来说至关重要.下面详细描述数据副本存储策略.4.1顺序存储策略在顺序存储策略下,数据首先随机选择一个节点,之后顺序选择其后k-1个节点,所有副本都存放在连续k个节点上(k为副本因子).这样在关闭节点时,只需要保证每连续k个节点中都至少有一个节点是活跃的,就可以保持数据完整性,因此最多允许关闭集群节点总数量的(k-1)/k.然而当某个节点意外失效时,丢失的数据副本需要重建到活跃的节点上,保持数据副本的顺序特征(连续k个节点).因此失效数据最多能重建到失效节点前后的连续k-1个活跃节点上,数据重建度为2(k-1),导致了较慢的恢复速度,容错能力差.因此,顺序存储策略的特征是允许关闭大量节点,而容错能力较低.4.2随机存储策略在随机存储策略下,数据块副本的存放位置没有任何规则关联,一旦发生节点失效,失效的数据块可以随机恢复到任何一个活跃节点上,因此所有活跃节点都可以参与恢复进程,并行度大大提高.这种容错能力使得随机存储策略被广泛应用于数据中心,因为大量廉价机器的部署导致宕机的概率较高,需要快速的数据恢复.然而另一方面,随机存储策略使得数据块副本在选择存放节点时,组合方式很多(CkN).当关闭任意k个节点时,某些数据块的所有副本落在这k个节点上的概率就会很高,并且数据量越大,概率越高.关闭任何k-1个节点都可能导致数据丢失,因此,随机存储策略的特征是容错能力强,但允许关闭的节点数量有限.Page54.3混合存储策略基于上述特征,本文提出一种混合数据副本存储策略,集成了顺序存储策略和随机存储策略的优点.主要思想是在同一机架内的副本按照顺序方式存储,而机架间的副本按照随机方式存储,图1表示了按照混合存储方式存放数据副本的过程.图1中共有m个机架,每个机架内的节点按顺序编号,一个数据块的3个副本选择存储位置.前两个副本连续存放到机架1的节点2和节点3上,而第3个副本随机存放到其它的机架中.如果有第4个副本待存储,则按顺序方式存储到第3个副本所在节点的后一个节点,而第5个副本按照随机方式选择一个新节点.交替采用顺序和随机存储策略,直到所有数据副本找到存放位置.混合存储策略描述如下.算法1.混合数据副本存储策略.输入:副本因子k输出:数据副本存放位置1.将待存储文件划分成大小相等的数据块,数据块按n;2.根据副本因子(副本数量)确定数据块的备份数量;3.FORi=1ton4.FORj=1tok5.IF(j%2)!=06.在集群中随机选择一个机架h;7.在机架h中选择一个节点作为存储位置;8.j=j+1;9.ELSE10.已知副本j-1存储在节点p上;11.选择节点p的后继节点作为存储位置;12.j=j+1;13.ENDIF14.ENDFOR15.i=i+1;16.ENDFOR在混合存储策略下,不仅允许关闭大量的节点并保证数据完整性,还具有较强的容错能力.因为采用了顺序存储方式,在关闭节点时只需要保证同一机架内两个相邻的节点不被同时关闭就能保持数据完整性;因为采用了随机存储方式,当发生节点意外宕机时,某些数据副本可以恢复到相邻的活跃节点上,某些数据副本可以恢复到其它机架中任何一个节点上,因此数据重建度是N-NumRack(i)+2,NumRack(i)表示发生节点宕机的机架内部活跃节点数量.混合存储策略的两个属性是顺序存储策略和随机存储策略的折中.在一个大型数据中心中能够关闭一半的节点,已经能够降低大量能耗,混合存储策略能够适用于节能系统.5SLA感知的能耗管理策略本节讨论能耗管理策略,在保证SLA要求的前提下尽可能地关闭节点.在异构MapReduce集群中关闭节点需要考虑性能下降问题,关闭哪些节点能够最小化能耗,并且保证响应时间不超过SLA的要求是一个难点.本文设计了一种基于历史记录的响应时间预测方法,它根据服务器节点的数量、性能参数和运行时间的历史信息准确估计程序的响应时间.基于关闭节点下响应时间的预估,选择性地关闭部分节点以达到最小化能耗,同时保证应用程序的实时性能.下面详细介绍基于历史记录的运行时间预测方法和启发式的节点关闭策略.5.1响应时间预测方法在异构集群中MapReduce应用的运行时间受到很多因素的影响,如单个节点的性能、节点的数量和跨机架的数据传输等因素[22].当关闭节点时,这些因素综合在一起导致运行时间难以预测.Polo等人[23]提出了一种动态预测MapReduce程序运行时间的方法,记录当前程序运行的时间和已经完成的Map任务数量,通过计算当前已完成任务占总任务的比重得出最终响应时间,这种方法的相对误差较小.本文基于上述方法,首先记录程序在节点全部开启时的运行时间,当某些节点关闭后,用节点计算率可以计算出性能的下降,从而预测增长的响应时间,但是这种方法没有考虑跨机架数据传输带来的时间开销.在节点全部开启时,根据数据局部性原理,MapReduce的Map任务被分配到数据所在的节点,避免了数据传输的时间开销.然而当某些节点被关闭后,该节点上的Map任务需要重新分配到其它有空闲CPU槽的节点上,这些节点并不一定有Map任务所需的数据,导致数据局部性差,带来数据Page6传输时间开销[4,22].如图2所示,当机架1的节点2意外失效时,该节点未完成的任务需要重新分配到其它活跃节点上,Map1分配到机架m中,Map2分配到机架2中等等,但这些任务的数据在机架1的节点3上,导致跨机架的数据传输.MapReduce程序运行时间预测不仅要考虑集群计算能力的下降,还要考虑额外的数据传输开销.MapReduce程序的运行时间由两部分时间构成:T(X,ω)=Tmap(X,ω)+Ttransfer(X,ω).Tmap(X,ω)表示计算时间,Ttransfer(X,ω)表示额外的数据传输时间.根据节点运算性能的计算公式,Tmap(X,ω)=Tavg(ω)∑m节点全开时程序的运行时间,∑m集群的计算能力,∑m点后集群的计算能力.随着节点数量的减少,计算能力降低,响应时间增加.下面详细介绍关闭节点引入的数据传输时间的计算方法.首先定义机架间数据的传输时间,Taccess(i,j)表示机架i与j之间传输64MB数据块的时间.M(ω)表示应用的总Map任务数量,如果节点全部开启,则分配到机架i内的任务数量为M(ω)N(i)C(i,ω)∑m于是分配到机架i内单个节点上的任务为如果有节点关闭,这些任务需要重新分配到其它活跃节点上.现在考虑机架i内多个节点关闭的情况,Xi表示活跃节点数量,则机架i内需要重新分配的Map任务数量为(N(i)-X(i))M(ω)C(i,ω)∑m用M(i,ω)表示.在最坏情况下,分配到其它机架的任务都需要跨机架读取数据,导致较长的时间开销.因此,机架i引入的时间开销为MAX1jmTaccess(i,j)M(i,ω)C(j,ω)∑m记为Ttransfer(X,i,ω).取最大值表示不同机架间的数据传输是并行的,则整个集群的数据传输时间为实验数据表明,预估的响应时间会略大于真实时间,并且相对误差大都在6%以内.5.2节点关闭策略本节描述启发式的节点关闭策略,解决能耗最小化问题.这里我们将节点关闭过程描述为系统状态的转换,从N=(N(1),N(2),…,N(m))切换到X=(X(1),X(2),…,X(m)),N是集群中所有服务器的数量,X表示关闭节点后的状态.N(i)表示机架i中的所有节点,X(i)表示关闭接点后机架i中剩余的节点数量.能耗优化问题可以描述为以下公式:MinimizeE(X,ω)=∑ms.t.∑m犡(i,j)+犡(i,j%N(i)+1)1表示相邻的两个节点不能被同时关闭.T<TSLA表示应用程序的响应时间必须满足SLA的性能要求.首先证明优化问题是一个NP-hard问题,可以演化为0-1背包问题.定理1.功耗最小化问题是NP-hard问题.证明.为了简单,首先按顺序把两个相邻的节点合并为一个大节点,则节点数量变为原来的一半.关闭节点的操作变为从两个小节点中选一个,依然遵从不能同时关闭两个相邻节点的原则,满足数据完整性的要求.因此,能耗最小化问题变成能耗和性能的折中,寻找一个最优值.如果选择计算能力强的节点(一般情况下,其功耗指标也比较高),能够大幅降低能耗,然而响应时间也大幅增长.如果选择计算能力弱的节点,虽然响应时间不会受太大影响,但能耗也只有小幅降低.每个节点都有功耗指标和性能Page7参数,能耗最小化问题可以归结为0-1背包问题,因此这个优化问题是NP-hard问题.证毕.本文提出一种启发式的节点关闭策略解决能耗最小化问题,在大型集群中并不需要理论最优值,近似最优解满足降低能耗的要求.无论选择何种计算能力的节点,能耗的降低和响应时间的增加都很难取舍,并且关闭节点引入的数据传输时间在异构集群中变得更加复杂.为了解决这个问题,引入一个衡量指标ΔE/ΔT,表示在关闭节点后能耗的降低值和响应时间增加值的比率,比值越大,表示关闭该节点越有效.因此,每次在选择节点时,选择使ΔE/ΔT比值最大的节点,直到SLA要求被破坏或数据完整性被破坏.启发式的节点关闭策略如下所示.算法2.节点关闭策略.输入:机架数量m,节点规模N,ω,Tavg(ω),TSLA输出:集群状态X1.初始化X=N;2.初始化机架集合S=;3.FORi=1tom4.IFX(i)>(N(i)+1)/25.IFT(X(1),…,X(i)-1,…,X(m),ω)TSLA6.机架i加入集合S;7.ENDIF8.ENDIF9.ENDFOR10.IFS==11.程序退出,集群状态为X;12.ELSE13.在集合S中挑选有最大ΔE/ΔT比值的机架j;14.关闭j中的节点h(不同时关闭两个相邻节点);15.X(j,h)=0;16.ENDIF17.返回步2.上述的节点关闭策略能够细粒度地关闭节点,首先在整个集群中选择部分机架,关闭这些机架中的节点不会导致数据丢失.然后在这个机架集合中去除那些在关闭节点后打破SLA要求的机架,最后在剩下的机架中选择使ΔE/ΔT最大化的机架,从中选择一个节点关闭,遵从不同时关闭两个相邻节点的原则.整个算法直到数据完整性或SLA无法满足时退出.本文提出的启发式节点关闭策略是一种贪心算法,它能够快速地找出优化问题的近似解,这对于一个大型实际系统来说已经足够了.6系统评测本节对面向SLA的节能管理系统Seadown进行实验评测,包括响应时间的评测和能耗的评测.在hadoop-0.20.2版本中实现了混合数据副本存储策略、响应时间预测方法和启发式的节点关闭策略.实验使用以Map任务为主的MapReduce应用程序Grep和Word-Count,Grep是用于文本文件的搜索工具,而Word-Count用于在文本文件中统计词频.这两个应用是典型的以Map任务为主的程序,只有一个Reduce任务并且数据传输量很少.实验中,数据集采用160GB自动生成的文本文件,在全系统开启时运行约15min并且集群利用率较低.实验平台由48台桌面机组成一个集群,机器分为4种类型,每种类型12台,这样组成4个机架的异构系统.这个系统与本文的异构集群模型相符,即机架内的机器是同构的,机架间的机器是异构的.每个机架的节点连到各自的CiscoCatalyst3750-24TS交换机上,交换机连到一个Cisco路由器上,组成一个连通的集群.集群的配置如表1所示.机架号CPU类型1IntelCorei32.943201721022IntelCore2Duo2.84320158903IntelCore2Duo2.04320118704IntelCore2Duo2.4432013280在实验中关闭了Hadoop的数据自动恢复功能,因为恢复数据需要占用大量的网络资源,在拷贝数据的过程中会消耗大量的能耗,即关闭节点反而会能耗增多.一旦应用程序完成,则开启数据自动恢复功能,在混合数据副本存储策略下,恢复时间很快.6.1响应时间预测评估本节测试响应时间预测方法的准确性.首先预测估计时间和真实时间的差值,选择关闭机架1的部分节点并记录真实响应时间.图3和图4分别是Page8不同应用的比较,未考虑额外数据传输开销的预测时间小于真实时间,并随着节点关闭数量的增多,两者之间的差值越来越大.因为关闭的节点越多,重新分配的任务越多,导致网络数据传输量增大.当考虑额外的数据传输时间后,它略微大于真实的响应时间,因为预测时间是在最差情况时计算的.将响应时间估计的大一点有利于满足SLA要求,并且程序运行过程中可能会出现straggler,也会增加响应时间,应该少关闭一些节点.在不同的机架中关闭节点对响应时间的预测也会产生影响.如果计算能力强的节点被关闭,则会产生大量的重新分配的Map任务,数据传输时间会增大,时间预测值与真实值之间的差值将会增大.如图5所示,机架1的节点性能最高,它对时间预测的影响也越大,相对误差也越大.然而随着节点关闭数量的增多,4条曲线都趋于平缓,即相对误差都趋于稳定.然后随机在所有机架中挑选一些节点关闭,测量相对误差.如机架1的3个节点、机架2的4个节点、机架3的3个节点、机架4的2个节点,这里只选择了部分组合,因为全部组合数量巨大,实验时间过长,部分组合能够反映总体的相对误差.如图6所示,相对误差大都集中在4%~6%之间,只有少数组合的误差超过6%,这对于运行时间较长的应用来说足够好了.6.2节点关闭策略评估本节研究节点关闭策略的效率.在开始阶段,启发式算法会选择计算能力强的节点关闭,因为它能大幅降低能耗而SLA要求依然得到满足.随着节点关闭数量增多,性能会急剧下滑,因为MapReduce程序不仅受节点数量和性能的影响,还受到额外的数据传输开销的影响.然后算法将会选择较低计算能力的节点,因为它不会打破SLA要求,还能够降低能耗.图7和图8显示在不同的SLA要求下,两种不同的应用能够关闭的节点数量.Grep应用响应不得超过1200s的情况下,能够关闭7个节点,机架1的4个节点、机架3的2个节点和机架4的一个节点.随着SLA要求的放松,将有更多的节点被关闭.在不同的应用下,关闭的节点数量有所不同,因为节点运行不同的应用所表现的计算能力不同.实验结果表明,算法根据不同的SLA要求细粒度地选择不同类型的节点关闭.图7Grep程序,不同SLA要求下关闭节点的情况Page9图8Word-Count程序,不同SLA要求下关闭节点的情况图9显示在不同SLA要求下的能耗和响应时间.能耗随着SLA的放松呈线性趋势下降,在响应时间不超过1200s的情况下,Word-Count程序节省了20%的能耗,而在响应时间不超过1400s的情况下,大约节省了40%的能耗.在SLA放松超过一个时间点时,能耗降低稳定在50%左右,这是因为在集群利用率较低阶段关闭节点是为了消除机器浪费的能耗,一旦关闭了足够多的节点,活跃节点的利用率已经无法提高时,能耗很难再降低.响应时间随着节点关闭数量的增多而快速增长,然而在启发式策略下很少超过SLA要求.实验结果表明,启发式算法能够大幅降低能耗.本节将启发式算法和以前的两个工作进行比较.一是“coveringsubset”方法,它能够关闭大量节点降低能耗,但是忽略了性能问题.另一个是“All-inStrategy”策略,尽管它比“coveringsubset”方法降低更多的能耗,然而它依然没有消除程序运行过程中节点浪费的能耗.这里主要比较启发式节点关闭策略和“All-inStrategy”策略的效率,比较以一定长度的时间窗口为准[9],由计算时间和空闲时间组成,相应地能耗由节点服务时的能耗和没有任务时维持节点活跃的能耗组成.如图10所示,“All-inStrategy”策略下的能耗是恒定的,而启发式策略下的能耗随着时间窗口的增大而增长,开始时低于“All-inStrategy”的能耗,之后则大于“All-inStrategy”的能耗.在一段时间内的能耗由功率乘以时间计算而来,时间窗口较短时,大部分时间用来计算,在关闭节点策略下,减少了程序运行过程中的能耗.而随着时间窗口的增长,节点空闲时间增长,尽管关闭了部分节点,但活跃的节点仍然会消耗很大能量,这时“All-inStrategy”策略会消除这部分能耗,因此启发式策略反而会效率较低.7结语本文探讨在异构MapReduce集群中实施关闭节点的策略来降低能耗,提出一种面向SLA的能耗管理方法Seadown.包括三个部分:首先,提出了一种混合数据副本存储方法,集成了顺序存储策略和随机存储策略的优点,它使得在MapReduce集群中能够关闭大量节点,同时兼顾系统的容错性能,保证集群正常运转.其次,提出了一种基于历史记录的响应时间预测方法,能够准确地预测响应时间,相对误差大都在6%以下.最后,在响应时间预测的基础上,提出一种启发式的节点关闭算法,有效地解决能耗与性能优化问题.在本文提出的方法中还有一些问题需要进一步研究.本文的应用局限于以Map任务为主的单个MapReduce应用,需要扩展到多种类型的混合应用,考虑竞争的开销,完善响应时间预测机制.探索新的调度策略,减少关闭节点带来的数据传输开销.
