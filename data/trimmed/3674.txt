Page1一种时间敏感的SSD和HDD高效混合存储模型杨濮源金培权岳丽华(中国科学技术大学计算机科学与技术学院合肥230027)摘要基于闪存的固态硬盘(SolidStateDriver,SSD)已成为目前广泛使用的一种持久存储设备.但是由于闪存不对称的I/O特性以及价格因素,SSD还不能完全取代传统硬盘(HardDiskDriver,HDD).因此,由SSD和HDD组成的混合存储系统逐步成为目前研究的重点.文中针对SSD和HDD混合存储问题,提出了一个时间敏感的混合存储模型用来有效地利用SSD.该模型把SSD和HDD作为同级的存储设备,结合数据页的访问次数以及访问热度实现对页面的准确分类和分配,即将读倾向负载的hot页面分配到SSD存储,写倾向负载的页面或者cold页面分配到HDD存储,从而利用SSD和HDD不对称的I/O特性来降低系统总的I/O延迟.作者分别在基于高端SSD和中端SSD的混合存储系统上实现了提出的混合存储模型,并进行了性能评测.实验结果显示,作者提出的模型可以实现对数据页更准确的分类,可以有效地降低页面迁移代价,在较少的SSD存储条件下取得了显著的性能提升.关键词混合存储系统;闪存;固态硬盘;时间敏感;性价比1引言近年来固态硬盘(SSD)已经成为固态技术中的领先技术,最常见的SSD都是基于NANDFlash芯片设计的.虽然SSD具有抗震无机械延迟等特点,但是由于闪存介质的物理特性,SSD的I/O性能具有不对称性,一般地,SSD具有较高的读性能和较差的随机写性能,所以随机写性能是SSD性能的瓶颈.此外,NAND型闪存具有写前擦除的特点,即闪存芯片不能原位更新,由于每块闪存芯片的擦除次数是有限的,所以擦除次数决定了闪存的寿命.也就是说,发生在SSD上的写操作不仅影响系统性能而且影响SSD的使用寿命.因此过多的更新必然会带来频繁的擦除操作,从而会明显地加大SSD的写延迟和降低SSD的使用寿命.相反地,传统磁盘(HDD)具有对称的I/O性能,写操作也没有如上所述的限制.虽然已有许多针对SSD磨损均衡的研究工作[1-3],但是引入HDD来弥补SSD的写性能缺陷仍是颇具吸引力的.另一方面,尽管HDD的读性能比SSD差不少,但是它在价格上具有明显的优势[4],所以目前主流的存储系统仍然是以基于HDD的为主.尽管如此,引入少量的SSD到现有的存储系统中是十分有价值的,这不仅能获得明显的系统性能提升,而且在价格成本上也是很有吸引力的.综上,利用SSD和HDD各自优点来设计混合存储系统是存储系统未来的研究热点.在混合存储系统中,页面分类算法和迁移策略是非常重要的部分.目前已有一些研究者对该问题进行了研究[5-6].特别地,文献[7]基于页面的I/O统计信息提出了一种迁移模型,该模型根据页面的I/O统计数据分别计算该页面在SSD和HDD上的I/O代价,通过计算结果的分析来对页面进行分类,读倾向的页面会被分配到SSD上存储,写倾向的页面则保留在HDD上存储.很明显,该模型既能利用SSD优秀的读性能,又能借助HDD来减少SSD上的写/擦除操作.但是,该模型中的I/O统计涵盖了该页面自生成以来的所有访问请求,这带来的累积效应将会使该模型在访问负载变化时不能快速反应.另一方面,因为闪存不对称的I/O特性,hot/cold的概念很早就被研究者引入到关于闪存的研究中[8-10].一般地,被频繁访问的页面我们认为是hot页面,非频繁访问的页面被认为是cold页面.基本的研究思想是对存储在闪存上的频繁更新的hot页面进行缓冲以实现批量更新,从而减少闪存上的物理写.已有大量的研究工作基于该思想来对闪存存储进行改进.近年来,已有一些研究者尝试将该思想应用到混合存储领域[11-12],他们的研究工作显示hot/cold的方法是值得考虑的.由于hot页面有更高访问概率,那么当这些页面存储在SSD上时,因为SSD优秀的读性能,这就能带来明显的性能提升.已有的研究工作表明,混合存储系统一定会带来额外的迁移代价[13].当SSD和HDD之间的迁移操作增加时,缓冲中的一些干净页面会发生迁移,这些迁移会带来额外的写操作,从而增大整个系统的I/O延迟,所以研究中迁移代价是必须考虑的因素,同时对页面准确分类也能有效减少迁移操作.另外,因为SSD高昂的价格,混合存储系统的性价比也是我们必须考察的因素.基于一种改进的I/O代价计算模型和hot/cold概念,本文提出了一种混合存储模型,主要贡献如下:(1)页面热度状态转换.为了准确地区分页面热度,我们在传统的hot/cold概念中引入了“warm”状态.基本的方法是设置一个时间阈值t,一个页面的两次连续的物理访问之间的时间间隔如果大于该阈值,则该页面会由hot变为warm或者由warm变为cold;相反时间间隔如果小于该阈值,则页面会由cold变为warm或者有warm变为hot.页面的热度状态转换如图1所示,该机制能够有效识别出偶尔变热的cold页面从而减少不必要的迁移操作.(2)时间衰减因子.基于前文提到的迁移模型[7],我们在I/O统计和I/O代价计算方法中引入了衰减因子.如果一个页面的热度状态在hot/cold之间转换或者物理访问之间的时间间隔过长,那么我们将会根据该衰减因子降低I/O代价计算的值对页面分类的影响并且重置I/O统计值.因此,在本文的方法中,当一个页面访问稀疏时,它的I/O统计对页面当前的分类判断影响很微弱,这就避免了统计的累积效应对当前负载分析的不利影响.(3)性价比分析.因为SSD高昂的价格,我们的目标是只将有限的SSD引入基于磁盘的存储体系来使存储系统获得明显的性能提升.为了充分利用有限的SSD,对页面的分类就必须准确.在局部时间Page3内,我们选择读倾向的页面存储在SSD上,写倾向的页面存储在HDD上.另一方面,由于SSD的存储空间有限,我们需要考虑SSD上的置换操作,因为闪存的擦除操作是以一个block为单位,所以我们设计一个block级的LRU队列来管理SSD上的页面,当SSD达到存储上限时,LRU队列尾部的block将会被置换出迁移到HDD上.为了衡量系统的性价比,我们列出如下公式ratio=Improvement-of-Hybrid-Storage在第3节,我们会将SSD和HDD以各种容量比例进行组合并且分析各个组合的性价比,从而获得混合存储系统合适的组合方式.本文第2节给出混合存储模型,并详细讨论其中的迁移模型和页面分类方法;第3节给出该混合模型的实现和相关的实验结果;最后第4节对本文的工作进行总结.2SSD-HDD混合存储模型2.1混合存储的体系结构本文提出的混合存储模型架构如图2所示,图中箭头表示数据页面的流向,最小的正方形代表页面,较大的长方形表示数据块(block),根据闪存的物理结构,我们将64个数据页面组成一个block.在缓冲区中,页面以一个LRU列表进行管理,刚进入缓冲区的页面置于LRU的队头,置换页面则从队尾选择.当一个页面被读取到缓冲区中时,页面首先会被热度状态转换模块更新热度状态和访问时间信息,这部分将在2.2节论述.当一个页面从缓冲区置换出来时,页面分类模块(placementtrendcalcula-tionanddecay)会计算根据该页面的I/O统计信息和热度状态计算它的存储倾向,这部分将在2.3节论述.页面分类模块是以热度状态转换模块为基础的.另外,本文为SSD和HDD分别设计了存储管理模块,它们的地址空间也是分别独立的,任何时候,一个数据页面只能存在于其中一个设备上.比如,如果一个页面分配在HDD上存储,那么它只有一个HDD上的地址,当它迁移到SSD上时,它将被分配一个SSD上的地址,同时HDD上的地址将被回收.因为SSD上的存储空间有限,SSD的地址空间可能将会用尽.由于SSD上的页面是以block为单位以LRU列表管理,所以当SSD“满”时,LRU列表尾部的block将会被迁移到HDD.为了方便快速查询,我们需要记录页面的存储位置并分别为SSD和HDD上的页面建立索引,这将在3.1节论述.当查询一个页面时,总是优先在SSD的索引上查找,因为该索引较小并且SSD的读速度较快.如果该页面在SSD索引上未找到,再到HDD索引上查找.基于上述的存储管理模块,迁移操作不仅将改变页面的存储位置,而且将更新SSD和HDD的索引信息,因此我们的迁移操作如算法1所示.算法1.迁移操作.migratePage(Pagepg)1.ifpg.placement=SSDthen2.pg.placement←HDD;3.RemovepgfromSSDindexandinsertintoHDD4.elseifpg.placement=HDDthen5.pg.placement←SSD;6.removepgfromHDDindexandinsertintoSSD7.endif8.setpgisdirty.2.2热度状态转换模块已有的关于闪存存储的研究工作常常利用hot/cold的概念来对页面进行分类.将传统的hot/cold概念引入混合存储系统中,因为SSD随机写的延迟较大,SSD和HDD之间的迁移代价是必须考虑的问题.比如,假设一个页面一直是cold状态,某次访问是一次热访问(即访问的时间间隔很小),这次访问使系统误判它为hot页面,从而带来一次迁移操作.但是紧接着该页面又回到cold状态,这可能又会带来一次迁移操作,所以不准确的页面分类会使迁移操作大大增加.为避免这种情况,我们提出Page4了“warm”的概念来补充传统的hot/cold思想,这样页面就无法在hot和cold状态之间直接转换,引入“warm”状态对混合模型的作用将在3.6节实验讨论.本文的热度转换模块是基于页面的物理访问时间的.每个页面的物理访问时间都会被系统记录,参数t2表示页面的当前物理访问时间,参数t1表示页面的上一次物理访问时间.如果两次连续的物理访问间隔大于阈值t,则当前访问为cold访问,相反则为hot访问.本文中的访问时间都是以页面的访问计数表示,例如从系统启动到当前为止有N次页面访问请求,那么当前时间为N.对于页面的hot/cold状态,参数cold1和cold2分别记录上次cold访问时间和当前cold访问时间,参数hot1和hot2类似.系统中SSD和HDD的容量以可以存储的页面数目衡量,参数ssdSize表示SSD的存储容量,参数hddSize表示HDD的存储容量.每当页面发生物理访问时,它的访问时间都会被更新,如表1所示.如果hot2>hot1,那么该页面处在hot状态,并且hot1是该当前hot状态的第1次访问时间.cold状态的时间记录与之类似.hot2=currenttimecold1=currenttimecold2=currenttime物理访问时间更新之后,页面的热度状态会根据它的访问时间进行更新.图1所示的状态转换将根据表2所示的实现.综合考虑表1和表2,我们可以发现页面能够在hot和cold状态停留,但是不能保持在warm状态.一个cold(hot)页面只有经过两次连续的hot访问才能转换为hot(cold)页面,因此偶尔的一次访问负载变化不会带来热度状态的变化,这样就能避免一些不必要的迁移操作.下所示.hot2>hot1cold2>cold1结合表1和表2,我们提出了热度转换算法,如算法2.热度转换.updateState(Pagepg)1.pg.t1←pg.t2;2.pg.t2←currenttime;3.interval←pg.t2-pg.t1;4.//updatepageaccesstime5.ifintervalssdSizethen6.pg.hot2←currenttime;7.pg.cold1←currenttime;8.elseifinterval>ssdSizethen9.pg.hot1←currenttime;10.pg.cold2←currenttime;11.endif12.//updatepagestate;13.pg.changeFlag←false14.ifpg.hot2>pg.hot1then15.ifpg.state=coldthen16.pg.state←warm;17.elseifpg.state=warmthen18.pg.state←warm;19.pg.changeFlag←true;20.endif21.elseifpg.hot2<pg.hot1then22.ifpg.state=hotthen23.pg.state←warm;24.elseifpg.state=warmthen25.pg.state←cold;26.pg.changeFlag←true;27.endif28.endif在算法2中,参数changeFlag是状态转换的标志,它的默认值是false,当页面状态由warm变为cold或者hot时,该参数的值变为true,这个参数是为后文中I/O统计重置的标志.1~11行描述了页面访问时间的更新,14~28行描述了热度状态的更新,实现了图1所示的状态转移.基于本节的热度转移模块,本文接下来将讨论页面的定位倾向(SSD或HDD).这一节主要从时间角度讨论了页面的负载,下一节将从空间角度讨论该问题.2.3页面定位倾向和衰减因为闪存不对称的I/O特性,不仅页面的访问热度而且页面的I/O负载也会影响页面的定位.在此我们引入一个概念:“页面定位倾向”,它表示页面存储在SSD或者HDD上的倾向性.根据页面的I/O统计,通过计算对比页面在SSD和HDD上I/O代价,我们可以得到页面定位倾向的计算值从而确定页面的存储位置.类似于文献[7,13]所讨论的,页面定位倾向是根据页面负载的I/O代价来计算的.文献[7]提出Page5的迁移模型基于页面的访问统计,有效地计算出了页面的I/O代价和读写倾向.但是因为该模型中的计算是基于页面分配以来的I/O统计的,所以它具有明显的累积效应.这意味着以前长时间的访问负载和当前的访问负载对当前的页面定位有着相同的影响.由于累积效应,页面以前的访问负载积累的I/O统计值将会很大,从而使该模型对当前的访问负载变化不够敏感,这将会导致不准确的页面定位,特别是当SSD容量有限时,会造成SSD存储空间的浪费.因为SSD高昂的价格,本文假设设计环境是基于有限容量的SSD的.因此我们需要构建一个准确的、敏感的页面定位倾向计算模型.以文献[7]的模型为基础,本文引入时间衰减因子来改进方案.首先本文引入了页面I/O代价计算方法.对于一个数据页面,它的物理访问和逻辑访问都被列入统计,并且一个物理访问操作对I/O代价的计算比逻辑访问操作有更大的影响.如算法3所示,ssdCost和hdd-Cost分别表示页面在SSD和HDD上访问的I/O代价.对于一个页面,假定一个逻辑访问操作有一定概率变为物理访问.为了得到更准确的结果,这个概率和文献[7]模型中所提的概率并不一样.文献[7]中的概率是一个常量,它的计算式为1-b/n,b表示缓冲区的容量,n表示页面的总数目,文献[7]利用该常量作为逻辑操作转变为物理操作的概率.对应地,本文所提的概率并不是一个常量,由算法3的第2行所示,每个页面的概率都以公式1-l/N来计算,l表示单个页面的逻辑访问操作计数,N表示页面所有访问操作的计数.所以不同的页面拥有不同的概率值,这也反映了不同页面各自的访问负载.如算法3所示,本文利用这个概率值来衡量逻辑访问操作对I/O代价计算的影响.算法3.倾向计算.trendCalculate(Pagepg)1.flag←true//theflagofwhethertrendisreduced;2.q←1-(pg.lr+pg.lw)/pg.totalaccess;3.//calculatetheI/OcostonSSDandHDD4.ssdcost←pg.lr·q+pg.p5.pg.lw·q+pg.p6.hddcost←pg.lr·q+pg.p7.pg.lw·q+pg.p8.//calculatethetrendanditsreduce9.ifpg.state=hotthen10.ifpg.changeFlag=truethen11.pg.trend←ssdcost-(12.pg.pretrend;13.pg.pretrend←pg.trend·β;14.pg.changeFlag←false;flag←true;15.else16.pg.trend←ssdcost-(17.18.flag←false;19.endif20.elseifpg.state=warmthen21.pg.trend←ssdcost-(22.pg.pretrend;23.flag←false;24.elseifpg.state=coldthen25.ifpg.changeFlag=truethen26.pg.trend←ssdcost-(27.28.pg.pretrend←pg.trend·β;29.pg.changeFlag←false;flag←true;30.else31.interval←pg.cold2-pg.cold1;32.ifinterval/ssdSize<hddSize/ssdSizethen33.pg.trend←ssdcost-(34.35.flag←false;36.else37.pg.pretrend←pg.trend·β·38.(ssdSize/interval);39.pg.trend←ssdcost-(40.flag←true41.endif42.endif43.endif44.//resetthecounter45.ifflag=truethen46.pg.lr←0;pg.lw←0;pg.pr←0;pg.pw←0;47.endif48.ifpg.trend>ws+whandpg.trend<0then49.returnSSD-trend;50.elseifpg.trend>ws+whandpg.trend>051.returnHDD-trend;52.else53.returnpg.placement;54.endif每当页面被访问,它的访问计数就会被更新.对于每个迁移的页面,我们假定它还会迁移回来.比如,当HDD上的一个页面被迁移到SSD上,这会有一次SSD上的写代价,然后该页面可能会被迁移回来,这又会带来一次HDD上的写代价.所以一个页面迁移代价是SSD和HDD上写代价的和.如算法3的48和50行所示,trend<0表示页面存储在Page6SSD上I/O代价较小,trend>0表示页面存储在HDD上I/O代价较小.参数trend表示迁移操作带来的收益.所以迁移操作只能在收益trend超过迁移代价时发生.如算法3所示,本文的模型为每个页面维护了5个计数器:lr和lw统计页面的逻辑读写操作;pr和pw统计页面的物理读写操作;totalaccess统计所有的访问操作;rs,rh分别表示SSD和HDD上的物理读代价;ws,wh分别表示SSD和HDD上的物理写代价.两个基本的参数ssdcost和hddcost分别表示页面在SSD和HDD上访问的I/O代价,参数trend表示页面的定位倾向,每当页面从缓冲区置换时该参数被更新.trend<0表示ssdcost比hdd-cost小,这意味着页面应该存储在SSD上,反之,页面就应该存储在HDD上.当考虑到迁移代价时,实际的定位倾向判断会更复杂一些,正如算法5所示.另一参数pretrend存储了衰减后的定位倾向值,当pretrend被更新时,访问计数会被重置.参数β表示衰减因子,它是一个小于1的常量(实验中设置为0.1),页面定位倾向在3种状态下的计算由算法3中8~43行所示,在两种情况下,trend会按因子β减小.(1)当页面热度状态从warm变为hot或者cold时,这暗示着页面的当前访问负载可能发生变化,读写倾向性发生改变,所以该页面先前的定位倾向和访问统计对当前的计算不应该有太大的影响.定位倾向参数trend按因子β减小,并且访问统计重置.(2)HDD的容量大小设为hddSize,假定每个页面在hddSize次的访问中至少会被访问一次,那么如果页面的两次相邻访问的间隔超过hddSize,该页面被认为toocold,并且它的定位倾向发生衰减,如算法3中36~41行所示.在这种情况下,衰减因子β的影响会增大,它的值会被减小ssdSize/interval倍,这就使之前的负载对定位倾向的影响减小至几乎0.如果页面一直保持在cold或者hot的状态,页面的定位倾向就会正常更新,如算法3中所示.基于上述讨论,我们将在下一小节提出本文的整个模型.2.4混合存储模型这一节我们将讨论整个的混合存储模型(算法4、5).如算法5中所示,页面必须在热度状态为warm或者hot,并且定位倾向为SSD-trend时,该页面才能被迁移到SSD上存储.而从SSD到HDD的迁移触发条件则不相同,如算法5的8~14行所示,一旦SSD页面的定位倾向为HDD-trend,则该页面被迁移到HDD,此外对某些写操作性能不输于读操作的高端SSD而言,热度状态的变化也是迁移操作的触发条件,当页面变为cold时迁移发生.也就是说,本文的系统是兼容高端SSD和中端SSD的,在第4节的实验部分有更详细的讨论.算法4.混合存储算法.accessPage(Pagepg)1.pg.totalaccess++;2.ifpgisfoundinbufferthen3.movepgtotheheadofbufferLRU;4.ifaccessisreadquestthen5.pg.lr++;6.elseifaccessiswritequestthen7.pg.lw++;8.endif9.else10.ifbufferisfullthen11.evictPage();12.endif13.fetchpgfromdisk;14.updateState(pg);15.addpgtotheheadofbufferLRU;16.ifaccessisreadquestthen17.pg.pr++;18.elseaccessiswritequestthen19.pg.pw++;20.endif21.endif算法5.evictPage().1.Pagepg;2.pg←tailofLRU;3.place←trendCalculate(pg);4.ifpgisonHDDthen5.ifpg.stateishotorwarmandplace=SSD-trend6.migratePage(pg);7.endif8.elseifpgisonSSDthen9.ifplace=SSD-trendthen10.migratePage(pg);11.elseifpgiscoldandSSDwriteperformanceis12.migratePage(pg);13.endif14.endif15.ifpgisdirtythen16.writepgtodiskofpg.plcaement;17.endif如算法4、5所示,当页面被读到缓冲区中时,该页面的访问时间信息和热度状态都会被更新.页面Page7从缓冲区置换时,算法3被调用更新页面的定位倾向值,从而确定页面的存储位置.算法5中的第6,10,12行所示,迁移将会被触发,页面的相关信息也会被更新,同时页面被置为dirty以写入对应地硬盘.3实验本文分别在TPC-C和OLTP数据集上实现本文的模型,并与文献[7]提出的混合模型进行对比.3.1混合存储模型实验系统可分为存储管理器、缓冲管理器和混合迁移模型3部分,并利用第2.1节中提到的B+-树完成对存储数据的索引.存储管理器包括空闲空间管理器和非空闲空间管理器.实验代码使用C++实现,并运行在DebianGNU/Linux2.6.21操作系统上,页面大小为4KB.缓冲区大小设定4MB,并带有LRU管理器.实验运行在硬盘仿真系统上,仿真实现包括常规HDD(RU-HDD)、中端SSD(SAM-SUNG-32GSSD)和高端SSD(IntelX25ESSD)在内的3种存储设备①,并使用工具软件uFlip[14]来测量硬盘仿真系统的I/O性能参数.本文实现了第2节中提出的方法和文献[7]提出的混合模型,并分别运行在两种不同类型的混合存储设备上,包括RU-HDD与SAMSUNG-32GSSD的混合存储以及RU-HDD与IntelX25ESSD的混合存储,最后对比分析本文的模型和以前的混合模型的实验结果.存储设备性能:表3描述了3种存储设备RU-HDD、SAMSUNG-32GSSD和IntelX25ESSD的实际读写延迟时间和价格参数.表4分别给出了RU-HDD与SAMSUNG-32GSSD以及RU-HDD与IntelX25ESSD的读写代价性能对比,并以最小代价的倍数值进行归一化描述.其中,读写延迟时间越大,读写速度越慢,读写代价值越大.例如,SAM-SUNG-32GSSD读页面的速度是RU-HDD的107倍,而RU-HDD写页面的速度大约是SAMSUNG-32GSSD的两倍;IntelX25ESSD写页面速度比读页面速度大约快3倍,且其写页面速度是RU-HDD读页面速度的108倍,是RU-HDD写页面速度的297倍.设备类型读延迟/μs写延迟/μs价格/($·GB-1)RU-HDD1991772570.125SAMSUNG-32G187961916.000IntelX25E199设备类型RU-HDDSAMSUN-32GRU-HDDIntelX25E因此,第2.3节中提到的I/O代价参数可使用表4中的倍数值描述,例如对RU-HDD与SAM-SUNGSSD的混合存储类型有:rs=1,rh=107,ws=51,wh=39.实验记录了硬盘仿真系统中的读写操作数目,并结合表3中的读写延迟时间来仿真计算总的运行时间.数据集的类型:本文使用两种类型的数据集:TPC-C和OLTP.TPC-C数据集通过修改开源数据库PostgreSQL7.4.29获得,在其缓冲区管理器中增加操作记录模块,每当缓冲区管理器接到操作请求时,数据库便记录该操作请求和页面号,并提供输出操作记录至文件的函数.在PostgreSQL数据库中使用BenchmarkSQL软件模拟运行TPC-C测试,数据量设定为1GB,并调用函数输出TPC-C操作记录文件.OLTP数据集则是由GerhardWeikum提供的真实的银行系统交易处理数据集.表5分别描述了TPC-C和OLTP数据集中的不同操作类型的统计数值.可以看到,两个数据集的读写操作数都分别约占总操作数的77%和23%.下面分别介绍本文的模型在这两种数据集上运行的性能情况分析.表5TPC-C和OLTP数据集的读写操作数及页面数目统计值数据集类型读操作次数写操作次数总操作次数页面数目TPC-C1351144OLTP4706783.2实验性能分析实验中,首先在单独的HDD设备或SSD设备上分别运行两个数据集,获得单个设备的运行性能.然后在混合存储设备上实现本文的模型和文献[7]提出的混合模型,并分别运行两个数据集.为了方便描述,后文使用PreviousHybrid代指文献[7]提出的混合模型.图3描述了TPC-C和OLTP数据集在单个HDD设备或SSD设备上的总运行时间.可以看到,RU-HDD上运行性能最差,IntelX25E性能最好,SAMSUNG-32G其次,它们之间的性能差距是由①http://uflip.inria.fr/uFLIP/results/Page8SSD相对于HDD的优点带来的.正如前文所提到的,中端SSD(SAMSUNG-32GSSD)与高端SSD(IntelX25ESSD)的性能差距较大,因此需要分别在RU-HDD与SAMSUNG-32GSSD混合存储设备、RU-HDD与IntelX25ESSD混合存储设备上测试本文模型.为了分析混合存储设备中HDD与SSD所占的空间比值(HDDsize/SSDsize)不同对实验性能的影响,我们为混合存储设备设定了11种不同的HDDsize/SSDsize比值.其中,HDD大小取值与数据集大小相同,即为1GB,SSD大小由不同的HDDsize/SSDsize比值决定.图4(a)描述了在RU-HDD与SAMSUNG-32GSSD混合存储设备上分别实现本文模型和PreviousHybrid模型,运行OLTP数据集的总运行时间;图4(b)描述了运行TPC-C数据集的总运行时间.图4(a)和图4(b)中前11组实验结果分别对应11种不同HDDsize/SSDsize比值大小的混合存储设备,而最后一组深色条形则表示数据集在单个HDD设备上的总运行时间.对比发现,除OLTP数据集在基于PreviousHybrid模型的部分混合存储设备上运行时间较长以外,SSD和HDD混合存储设备上的运行性能总是优于单个HDD设备的.其次,不论哪种数据集,随着SSD大小的降低,实验性能逐渐变差,这进一步说明SSD的引入可以带来更高的性能.此外,只有当SSD大小接近HDD大小时,PreviousHybrid模型的性能略优于我们的模型,随着SSD大小的降低,本文模型的性能逐渐优于Pre-viousHybrid,且性能差距逐渐增大.这充分说明本文模型能够更有效地利用有效的SSD存储空间,其利用更小的SSD存储空间获得更多的性能提升.图5(a)和图5(b)分别描述了OLTP和TPC-C数据集在RU-HDD与高端SSD(IntelX25ESSD)混合存储设备上的运行结果.第2.4节中描述的模型的特殊设计部分在该处实验中完成了从SSD到HDD的迁移.图5中的实验结果与图4类似.OLTP数据集在本文模型上相对于PreviousHybrid上有明显的改进;对于TPC-C数据集,当HDDsize/SSDsize比值小于401时,本文模型仍优于PreviousHybrid,但是随着SSD大小的增加,本文模型性能提升微弱,且不如PreviousHybrid模型的性能提升来得快.这是因为IntelX25ESSD的写性能大大优于读性能,而且TPC-C数据集相对于OLTP数据Page9集来说有大量的随机访问操作,从而导致由访问热度引起的迁移操作较少,而大部分迁移操作都是由本文模型和PreviousHybrid模型共同具备的页面定位倾向模块所触发引起,因此本文模型的优势在TPC-C数据集中体现不明显.综合分析图4和图5可知,混合存储性能优于单个HDD设备,且本文模型相对于PreviousHybrid模型在SSD存储空间更小的情况下能够带来更大的性能提升.3.3页面分类和物理读写分布在试验中,存储设备的存储容量以页面数目来衡量.如3.2节所述,HDD的存储容量设置为1GB即262144个页面,SSD的存储容量随着我们设定的比例变化.我们对本文提出的混合存储模型和PreviousHybrid模型的页面分类进行了对比.图6显示了分别在OLTP和TPC-C的trace中混合存储系统的页面分类结果.在(a)~(d)4个图中,每一个纵坐标值对应两个柱状,其中上面的柱状表示在该比例情况下PreviousHybrid的页面分类结果,下面的一个柱状表示本文混合系统的页面分类结果.从4个图中可以明显看出,尽管trace不同,图6混合系统上的页面分配SSD设备也不同,但是随着HDD和SSD的比例变化,两个混合存储模型的页面分类结果有着相似的变化趋势.二者明显的区别体现在当HDD和SSD的比例接近时,特别是在11的情况下,Previoushybrid将几乎所有页面都分配到了SSD,这种情况下trace中的所有写操作也将发生在SSD上,这显然是不合适的,这样的结果和前文我们关于统计的积累效应的分析是一致的;本文的模型则只是将大部分页面分配到SSD,这是因为衰减因子和热度计算的限制,从而避免了所有页面分配到SSD.当HDD和SSD的比例变大时,因为SSD的存储容量有限,所以SSD很容易被“填满”,一旦“填满”SSD就会发生“溢出”必须进行迁移.在实验结果中两个混合存储模型分配到SSD的页面数目逼近SSD的存储容量,表明受SSD容量限制,两个模型的页面分配比较接近.结合HDD和SSD的11比例时的实验结果,我们可以预测当比例较大时,在实验运行中PreviousHybrid的SSD上因“填满”发生的迁移将大大多于本文的模型.关于迁移代价将在下一节讨论.混合存储系统中页面的分类和读写访问的分布Page10是相关的,设计有效页面分配方法是为了实现合理的物理读写访问分布.因为在混合存储系统中SSD的物理读写分布情况是决定系统性能的关键,所以我们在TPC-C的trace上分别统计了两个混合存储模型中SSD的物理读写访问次数,计算SSD的物理读写次数在系统总物理读写次数中的比例.我们以Samsung32G的SSD在TPC-C的trace上的实验来分析,结果如图7所示.图7显示,随着SSD的容量减少,SSD上分配的页面数目降低,两个模型中的SSD物理读比例都在下降.两个模型相比较,本文的模型虽然物理读的比例较低些,但是物理写的比例一直维持在一个较低的水平;而PreviousHybrid则在获得较高的物理读比例的同时也带来了高达50%左右的物理写比例,这样的结果对读写不对称,写代价较大的SSD来说是不利的,这也不利于系统的整体性能,同时这样的结果说明了本文模型的页面分配所产生的读写分布更为合理.综合本节的实验结果,与PreviousHybrid相比本文的混合存储模型在页面分配方面准确性更强,带来的访问分布更加合理.3.4迁移代价在整个混合存储系统中,所有的物理写操作由2类操作组成:(1)缓冲区脏页的置换;(2)页面在SSD和HDD之间的迁移.对于特定的缓冲区大小和特定的trace文件,第1类写操作的数目是固定的,随着SSD容量的变化,第2类操作的数目将会发生改变,即混合存储系统的总的物理写数目将会变化.在本文的实验环境下,我们先在单个硬盘上运行trace文件,记录下物理写的数目N,该值就是这个trace文件运行中的缓冲区脏页置换次数,再在混合存储模型中以相同的缓冲区配置运行该trace文件,此时运行中的物理写数目M与N的差值即是迁移带来的物理写操作,也就是迁移代价.以SAMSUNG-32G在OLTP的trace上的运行来进行实验,对不同的HDD和SSD比例下混合存储模型的物理写数目和单个硬盘的物理写数目的差值进行记录,结果如图8所示.在图8中,PreviousHybrid的迁移代价明显高于本文的存储模型,这主要是由于3.3节所分析的PreviousHybrid较不准确的页面分类引起的.在HDD和SSD比例为11时,二者的迁移代价非常接近,这是因为在此比例下,SSD的存储容量超过了OLTP的trace中的页面数目,不会发生SSD“填满”的情况,从而迁移不会发生.随着SSD容量降低,“填满”引起的迁移显著增加,本文的存储模型的准确性就体现了出来.注意在比例超过801后,本文模型的迁移代价又在缓慢下降,这是因为本文模型中的热度计算是和SSD容量大小联系起来的,当SSD容量过小时,只有很少的页面能进入hot状态从而迁移到SSD,这就使页面从HDD到SSD的迁移减少,这会导致SSD“填满”的情况也减少,从而SSD到HDD的迁移也因此减少了,所以整个系统的迁移都减少了.结合3.3节和3.4节,本文的混合存储模型对页面的分类更为精确,对SSD的利用更加有效合理.3.5系统性价比分析除了实验性能优劣的比较外,由于本文的目标致力于在更小的SSD存储空间中获得更高的性能提升,我们更加关心混合存储设备的性能价格比ratio.利用OLTP测试数据集在基于本文模型的混合存储设备上的运行性能以及表3中给出的设备价格,定义混合存储设备的性能价格比如下式所示ratio=hddTime-(其中,hddTime参数表示OLTP数据集在单个HDD设备上的运行时间,hsTime参数表示OLTPPage11数据集在混合存储设备上的运行时间.故公式中分子表示混合存储相对于单个设备的性能提升比例,分母表示SSD的价格且由混合存储设备的空间比值HDDsize/SSDsize大小决定.图9分别描述了基于本文模型的两种混合存储设备在不同空间比值HDDsize/SSDsize情况下的性能价格比ratio值分布情况.其中中虚线代表RU-HDD与IntelX25ESSD混合存储设备;实线代表RU-HDD与SamSung-32GSSD混合存储设备.RU-HDD与IntelX25ESSD混合存储设备的ratio值明显高于RU-HDD与SAMSUNG-32GSSD混合存储设备.当混合存储设备空间比值HDDsize/SSDsize接近1时,即SSD大小与HDD大小相等时,两种混合存储设备的性能价格比非常接近.这说明当SSD大小与HDD大小相等,此时若基于本文模型实现混合存储系统,选择中端SSD或高端SSD性能价格比是接近的.考虑相同大小的中、高端SSD价格相差较大,应当选择中端SSD完成设计.此外,随着空间比值HDDsize/SSDsize从11增加到501,两种类型的混合存储设备的性能价格比均有快速提升,表明该空间比值范围适合基于本文模型的混合存储系统实现;随着空间比值HDDsize/SSDsize从501增加到801,两种类型的混合存储设备的性能价格比均增长缓慢,表明该空间比值范围不适合基于本文模型的混合存储系统实现.故基于本文模型的混合存储系统实现时最佳空间比值为11到501.3.6“warm”对混合模型的作用本文在页面状态中引入了“warm”状态,以避免cold页面骤然地转变为hot状态,从而减少不必要的迁移操作.所以带有“warm”状态的混合模型和没有“warm”状态的相比,迁移代价应该较小,运行时间较短.根据3.4节的讨论,迁移代价以模型运行中的物理写数目衡量,所以通过比较有“warm”的模型和无“warm”模型的运行时间、物理写数目就可以衡量“warm”对混合模型的作用.本文以HDD和SAMSUNG-32GSSD组成的混合存储系统作为实验对象,以TPC-Ctrace作为实验数据,在本文的混合模型有“warm”和无“warm”的情况下,分别在混合系统中HDD和SSD的比例为101,301,501时进行实验,实验的结果如图10所示.图10显示,在无“warm”的混合模型中,物理写的数目更多,这表示迁移代价更大.这些额外的物理写是由2.2节第1段所分析的情况带来的,实验结果证实了直接的cold/hot状态转换会引起不准确的迁移.较大的迁移代价会降低模型的性能,这个结果在图10(a)中也表现了出来.通过图10的对比,“warm”状态的引入对混合模型是有着积极意义的.4总结本文提出了一个高性价比的SSD-HDD混合存储模型,该模型将有限容量的SSD引入磁盘存储体系从而获得明显的性能提升.我们通过引入warm的概念改进了传统的hot/cold思想并用于混合存储系统的设计,并且利用衰减因子修改I/O统计值来实现较为准确的迁移判断.最后本文对混合存储系统的性价比问题展开了讨论,这对于探讨SSD-HDD的最佳组合方式是有益的尝试.未来,我们将对其它的混合存储架构展开研究.热度状态迁移的思想将会得到更多的关注.混合存储的性能价格比在以前的相关研究中没有提及,该方向具有一定的现实意义,我们将对其展开进一步的研究.Page12
