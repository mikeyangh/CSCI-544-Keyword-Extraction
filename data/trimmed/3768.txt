Page1特征模型融合研究易立赵海燕张伟金芝梅宏(北京大学信息科学技术学院软件研究所教育部高可信软件技术重点实验室北京100871)摘要特征模型为特定领域内软件需求的组织和复用提供了有效的手段.为了构建特征模型,领域分析人员要对领域内尽可能多的应用软件进行系统化分析,识别共性和变化性需求,并根据需求之间的依赖关系抽象和组织需求.随着软件系统复杂性的不断提高,特征模型的规模有日益增加的趋势,特征模型的构建也随之成为了一件十分困难的工作,亟需自动化方法的支持.一种可行的方式是将领域内已有的多个特征模型自动融合为一个较大规模的特征模型,并由人工对融合结果进行微调.现有研究提出了6种特征模型的自动化融合方法.文中在现有研究的基础上,提出了一个特征模型融合的概念框架,并根据此框架对6种方法进行了比较和分析.文中还进一步指出了现有研究亟需解决的3个问题,并针对每个问题提出了可能的研究思路和设想.关键词特征模型;模型融合;算法;软件复用1引言软件复用的研究和实践表明,针对特定领域的软件复用活动相对容易取得成功[1].在针对特定领域的软件复用方法中,Kang等学者[2]首先提出了面向特征的领域分析方法.特征是具有用户/客户价值的软件特点[2-3].按照特征之间的依赖关系将特征组Page2织起来,就形成了特定领域的特征模型.特征模型的构建需要对领域内尽可能多的具体应用软件进行系统化的分析和抽象,封装这些软件的功能和非功能特性为不同粒度和层次的特征,提取这些特征之间的共性和变化性,并分析它们之间的依赖关系.迄今为止,特征模型已经广泛应用于多个领域,例如汽车制造和电子产品制造领域.随着领域的日益复杂,特征模型所包含的特征和依赖关系数量已达到成千上万的规模[4],构建这种大规模特征模型成为一件十分复杂的工作[4-6],特征模型建模者亟需自动化工具的支持以降低工作的强度和复杂度.借用软件复用的思想,一种可能的自动化支持方式是复用领域内已存在的多个特征模型来构建较大的特征模型.这种复用可分为两步:首先自动将多个已有特征模型融合为一个新的特征模型,然后人工对这个新模型进行重构.随着特征模型和软件产品线方法(特征模型在大多数情况下作为其核心制品存在)的广泛应用,寻找领域内的可复用特征模型将不再是主要问题.例如,在线特征模型库SPLOT中包含十多个移动电话领域的特征模型,She等学者[7]发布了3个包含数千特征的嵌入式操作系统特征模型.因此,特征模型融合方法成败的关键就在于融合得到的结果模型是否具有较好的质量,从而使得后续人工重构工作足够小,与从零开始构建特征模型相比能够显著节省时间和人力.现有特征模型研究中提出了6种特征模型融合方法[6,8-12].对现有方法进行调研后,本文提出一个特征模型融合概念框架对现有方法进行3个方面的比较与分析.首先是一个融合方法对输入模型的限制,限制越少,说明该方法具有越广泛的适用性.其次是输出模型的质量,质量越高,说明输出模型与人工构建的模型越相似,从而所需后续重构工作越少.最后是一个融合方法的具体实现算法的相关性质,包括时间复杂度和冲突消解等方面.本文还在比较和分析的基础上,指出了影响现有方法实用性的3个问题,并对每个问题给出了研究意见和设想.本文第2节介绍特征模型的相关概念;第3节阐述本文所提出的特征模型融合概念框架;第4节对现有方法进行比较和分析;第5节对现有方法中存在的问题和可能的解决思路进行介绍;最后,第6节对全文进行总结.2特征模型特征模型是对特定领域内一系列相似产品的共性和变化性的抽象,由一组特征和它们之间的关系构成.图1是一个音频播放软件领域的特征模型示例.特征之间的关系可分为精化关系和约束关系两类.精化关系将特征组织为一棵特征树,特征树上父子特征之间的关系主要可分为以下几种类型:(1)必选特征.一个必选特征必须与它的父特征同时出现或不出现在一个产品中.例如,音频播放软件必包含解码器和运行平台两个特征.(2)可选特征.一个可选特征可以不与其父特征同时出现在一个产品中.(3)异或(xor)组.当一个异或组的父特征出现在一个产品中时(例如图1中的运行平台),该组特征中有且仅有一个特征出现在同一产品中(例如图1中的手机和桌面).(4)或(or)组.当一个或组的父特征出现在一个产品中时,该组特征中可以有一到多个特征出现在同一产品中.的约束关系主要有两种:约束关系用以表达特征之间额外的依赖.基本(1)requires.“特征Xrequires特征Y”的语义是若X出现在某产品中,则Y必须出现在该产品中.(2)excludes.互为excludes关系的两个特征不能出现在同一产品中.从一个特征模型中可以定制出一系列产品,其具体做法是选择一个满足所有精化和约束关系的特征集合.例如,特征集合{音频播放软件,解码器,WAV,音频CD播放,运行平台,桌面}是图1的一个产品,而形如{…,运行平台,手机,音频CD播放,…}的特征集合则不是,因为它违反了模型中的excludes约束.3特征模型融合的概念框架本节首先给出一些术语定义(3.1节),然后提出一个特征模型融合的概念框架,以描述和比较现Page3本小节给出一些术语的定义及符号,以便描述有特征模型融合方法.从一般意义上看,特征模型融合是将两个输入特征模型合并为一个输出特征模型;相应的,概念框架也分为三部分,包括对输入模型的限制(3.2节)、输出模型的性质(3.3节)以及融合算法实现的特性(3.4节).3.1术语定义特征模型融合的概念框架.定义1.特征模型的产品集合.给定特征模型M,M的所有合法产品构成的集合称为M的产品集合,记为ProdSet(M).定义2.特征精化路径.给定特征模型中的特征F以及F的祖先特征A,沿着精化关系从A到F所形成的路径称为从A到F的特征精化路径(以下简称“路径”),记为Path(A,F).当A与F为同一个特征时,称Path(A,F)为“平凡路径”.路径上包含的特征数量等于路径的长度.定义3.特征集合.给定特征模型M或路径P,M(或P)中所有特征构成的集合称为M(或P)的特征集合,记为FSet(M)或FSet(P).定义4.路径集合.给定特征模型M,M中所有可能的路径构成的集合称为M的路径集合,记为PathSet(M).定义5.相等路径.称Path(A1,F1)和Path(A2,F2)是相等路径并记为Path(A1,F1)=Path(A2,F2),当且仅当下列条件全部满足:(1)Path(A1,F1)和Path(A2,F2)长度相等.(2)F1和F2是相同特征.(3)Path(A1,F1)和Path(A2,F2)均为平凡路径;或者P1是F1的父特征,且P2是F2的父特征,且Path(A1,P1)=Path(A2,P2).定义6.正交路径.若记Path(A1,F1)为P1,Path(A2,F2)为P2.称P1和P2是正交路径,当且仅当FSet(P1)∩FSet(P2)=.记为P1⊥P2,定义7.相交路径.若Path(A1,F1)和Path(A2,F2)既非相等路径,也非正交路径,则称二者为相交路径.3.2对输入模型的限制本小节讨论融合方法对输入特征模型所作的要求,这些要求分别针对精化关系和约束关系而提出.首先是层次一致性.文献[5]首次给出了层次一致性的定义.给定两个特征模型M1和M2,并记Root1、Root2分别为M1和M2的根特征.如果下列条件成立:F(F∈FSet(M1)∩FSet(M2)→Path(Root1,F)=Path(Root2,F)),则称这两个特征模型具有层次一致性.在实际应用场景中,输入特征模型往往不满足层次一致性,因而本文关注每种特征模型融合方法能否处理以及如何处理层次不一致的输入.其次是根特征相等性.该性质表明各输入特征模型是否需要具备相等的根特征.最后是能否处理约束关系.约束关系是保证特征模型定制结果正确性和一致性的重要手段,因此恰当的融合约束关系对特征模型融合方法的实用性起关键作用.本文主要关注每种特征模型融合方法能否处理输入模型中的约束关系.3.3输出模型的性质本小节讨论输出模型应具备的性质,主要从输出模型的产品集合、规模、层次结构等方面进行描述.构建特征模型的目的是通过定制生成特定领域内的一系列产品,而特征模型融合是构建特征模型的一种特殊方法.因此,本文首先关注输入输出模型所对应产品集合之间的关系.给定两个输入特征模型X1和X2,且Y表示输出模型,则ProdSet(Y)可能满足如下两个等式之一:ProdSet(Y)ProdSet(X1)∩ProdSet(X2)(1)ProdSet(Y)ProdSet(X1)∪ProdSet(X2)(2)本文称符合等式(1)的输出模型具有“产品交集语义”,而符合等式(2)的输出模型具有“产品并集语义”;当等式中等号成立时,分别称输出模型具有“产品严格交集语义”和“产品严格并集语义”.在现有特征模型研究中,产品并集语义主要应用在产品线演化管理中,即一个产品线演化出了多个版本,而每个版本有其对应的产品集合,一旦需要将不同版本的产品线进行融合,那么一般就需要保持产品并集语义,从而能够兼容之前的产品.产品交集语义实际上是对输入模型中的所有约束关系加以保持,因此其应用场景之一是:当多个领域分析人员对一组特征施加各自的约束,最终需要将这些约束全部保留下来[11].输出模型的规模和层次结构的特性与模型可读性有关.首先考虑模型的规模,即模型所包含的特征数量.对于具有产品交集语义的输出模型,应该有下式成立:|FSet(Y)|min{|(FSet(X1)|,|FSet(X2)|}.同理,具有产品并集语义的输出模型规模应该满足|FSet(Y)||FSet(X1)|+|FSet(X2)|.Page4当上述等式不满足时,则认为输出模型的规模是异常的.接下来考虑输出模型的层次结构.针对特征模型融合而言,本文关注输入和输出模型的层次结构是否尽量保持一致.如果输出模型的层次结构与输入模型相去甚远,则会降低输出模型的可理解性.本文将输入输出模型的层次结构一致性分为以下几种情况讨论:(1)保持公共路径.在各输入模型中都出现的公共路径应该在输出模型中得到保持(在某些方法中,同一条公共路径可能在输出模型中出现多次).其形式化定义为P(P∈PathSet(X1)∩PathSet(X2)→P∈PathSet(Y)).(2)保持唯一公共路径.各输入模型中都出现的公共路径在输出模型中出现且仅出现一次.(3)保持独特路径.对于产品并集语义而言,如果一个输入模型中的一条路径与另一输入模型的所有路径均正交,则称该路径为独特路径.所有的独特路径均应该完整地出现在输出模型中.其形式化定义为P(P∈PathSet(Xi)∧P⊥PathSet(Xj)→P∈PathSet(Y)),i,j=1,2,i≠j.上式中的P⊥PathSet(Xj)是的简写.3.4融合算法实现概念框架在融合算法实现方面的内容包括主要实现技术、时间复杂度以及冲突消解能力.其中,一种方法的实现难度由主要实现技术以及是否有成熟的工具支持这些技术而决定.时间复杂度则是衡量具体算法的重要指标.对不同输入模型之间存在的冲突进行消解的能力也是融合方法实现的重要指标.本文基于特征模型缺陷的概念定义输入模型之间的冲突.根据文献[3]中关于缺陷的分类原则,一个特征模型中可能存在的缺陷可分为如下3类:(1)不一致(Inconsistency).无法从特征模型中定义出一个合法产品,使得特征模型中的所有约束关系都得到满足.法产品的特征.在必须出现在所有合法产品中的可选特征.(2)死特征(DeadFeature).存在不属于任何合(3)伪可选特征(FalseOptionalFeature).存基于特征模型的缺陷,本文定义输入模型之间的冲突如下:给定两个分别不存在缺陷的输入模型,如果融合结果模型存在缺陷,则称两个输入模型存在冲突.根据融合结果模型中存在的缺陷类型,冲突也可相应分为“不一致冲突”、“死特征冲突”、“伪可选特征冲突”3类.一种特征模型融合方法的冲突消解能力由劣到优依次分为4个级别:(1)无.该融合方法没有考虑任何类型的冲突.(2)非容错性检测.一旦检测到冲突,融合即(3)容错性检测.检测到冲突时报告并继续融合.(4)修复.该融合方法可以修复某些类型的冲突.中断.4现有研究介绍与比较本节首先简单介绍现有特征模型融合方法的基本思想,然后根据本文提出的概念框架对现有方法的优劣进行比较和分析.4.1现有研究介绍现有研究中提出的特征模型融合方法可按其基本思想分为3类,分别是简单组合方法、基于规则的方法和基于逻辑公式的方法.4.1.1简单组合方法简单组合方法的基本思想是引入一些额外的特征和关系将各输入模型简单拼接在一起,从而得到输出模型.此类算法在文献[11-13]中提出.框架如算法1所示(FM是特征模型的缩写).算法1.基于简单组合的融合算法框架.functionmerge(input1:FM,input2:FM):FM{1.output←newFM();2.root←newFeature();3.output.set_root(root);4.//添加额外特征(REF_TYPE是4种精化关系之一)5.root.add_child(extraFeature1,REF_TYPE);6.extraFeaturei.add_child(extraFeaturej,REF_TYPE);7.//将输入模型的根特征(亦即整个输入模型)放置8.extraFeaturek.add_child(input1.get_root(),9.extraFeaturem.add_child(input2.get_root(),10.//添加额外约束关系11.output.add_constraint(extraConstraint1);12.returnoutput;}Page5简单组合方法首先创建输出特征模型及其根特征(第1~3行).然后根据需要创建额外的特征,这些额外特征既可以是根特征的直接子特征(如第5行所示),也可以互相精化形成层次结构(如第6行所示).接下来的步骤是将输入模型整体放置到某个额外特征之下(第7~9行),换言之,此类算法的特点是输入模型将完整地再现于输出模型中.最后根据需要添加额外的requires、excludes约束关系,就完成了特征模型的融合.4.1.2基于规则的方法基于规则的方法通过定义一系列规则来处理输入模型中相匹配的特征[6,8,10].这些规则分为两类,分别处理精化关系和约束关系.因此算法也分为两步,首先匹配并输出精化关系得到特征树,然后匹配并添加约束关系,融合特征树和整个特征模型的算法框架如算法2所示.算法2.基于规则的融合算法框架.functionmerge_tree(root1:Feature,root2:Feature):Feature{1.if(root1≠root2)returnnull;2.root←root1.copy();3.//首先处理公共子特征4.common←root1.children()∩root2.children();5.foreach(Featurec∈common){6.//递归融合公共子特征7.child←merge_tree(root1.child(c),root2.child(c));8.//基于规则,根据root1、root2和c之间的精化关系,9.ref←compute_refinement_by_rule(root1,root2,c);10.root.add_child(child,ref);11.}12.//然后处理非公共子特征13.foreach(Featuref1∈root1.children()\common){14.//同样基于规则并根据root1和f1之间的精化关系,15.ref1←compute_unique_ref_by_rule(root1,f1);16.root.add_child(f1,ref1);17.}18.//将13~17行的f1,root1相应替换为f2,root2即19.returnroot;}functionmerge(input1:FM,input2:FM):FM{20.output←newFeatureModel();21.//首先融合特征树22.root←merge_tree(input1.root,input2.root);23.output.set_root(root);24.//然后融合约束关系得到完整特征模型25.foreach(Constraintc1∈input1.constraints){26.foreach(Constraintc2∈input2.constraints){27.c←compute_constraint_by_rule(c1,c2);28.output.add_constraint(c);29.}30.}31.returnoutput;}基于规则的方法首先合并具有相同根特征的输入特征树.其中,公共子特征被递归地合并(第7行),并根据规则得到合并后的精化关系(第9行);此外,非公共子特征也被分别加到输出结果中,同样的,依据规则来决定输出何种精化关系(第15行).方法的第2步是合并约束关系(第24~30行),此过程中也需要依靠规则来决定输出何种约束关系(第27行).综上所述,基于规则的融合方法需要定义3组规则,分别处理公共子特征的精化关系、非公共子特征的精化关系以及约束关系.现有研究主要在具体规则上存在差异,其它方面几乎完全相同.4.1.3基于逻辑公式的方法基于逻辑公式的方法首先将输入特征模型转换为逻辑公式,然后根据输入逻辑公式定义输出逻辑公式,最后将输出逻辑公式反向转换为特征模型.在这个过程中,第1步和第3步都有专门的研究者提出了有一定实用性的算法,因此现有特征模型融合研究主要关注如何定义输出逻辑公式.下面分别就这3个步骤进行介绍.特征模型转换为逻辑公式.文献[14]提出了一种将特征模型转换为一阶谓词逻辑公式的方法.特征模型中每个特征对应逻辑公式的一个变量,而每个精化或约束关系对应一个或多个逻辑蕴含式(如表1所示),最终整个特征模型表示为所有逻辑蕴含式的合取.特征C是特征F的必选子特征F→C∧C→F特征C是特征F的可选子特征C→F特征F有一组互为OR关系的子特征C1,C2,…,Cn特征F有一组互为XOR关系的子特征C1,C2,…,CnXrequiresYXexcludesY将特征模型表示为逻辑公式以后,该特征模型的一个合法产品即满足该逻辑公式的一组变量赋值,其中变量赋值为真意味着对应特征在产品中出现,赋值为假则相反.整个逻辑公式即等价于整个产品集合.定义输出逻辑公式.设输入模型X1和X2对应Page6的逻辑公式分别为Φ1和Φ2,那么一种基于输出模型的产品集合语义来定义输出逻辑公式的方法是:首先重写输入模型的逻辑公式为其中i,j=1,2;i≠j.所以其取值始终为false,故Γi与Φi等价.义输出逻辑公式ΦY分别为因为上式右边出现的任何f均不在模型Xi中,然后定义满足严格产品交集和严格产品并集语逻辑公式转换为特征模型.文献[15]提出了一种根据逻辑公式构造特征模型的算法,其基本思想是先构造一个逻辑蕴含图(有向图),然后逐步恢复各类精化关系,最终把逻辑蕴含图变为一个有向森林,即特征森林.该算法主要有两个缺点.首先,由于无法在逻辑公式中区分精化关系和约束关系,该算法将所有的约束关系都当作精化关系看待,因此特征模型中可能包含不正确的精化关系.其次,对于两两之间相互蕴含的一组特征,该算法无法给出它们之间的层次结构,只能当作一个“复合特征”处理.图2给出了一个示例,其中(a)是原始特征模型,转类别层次不一致根特征不一致约束关系表2特征模型融合相关研究概览输入模型输出模型产品集合语义严格交集,严格并集严格并集并集严格交集,并集并集规模层次保持算法实现主要实现技术无(直接连接输入根特征)图变换冲突检测时间复杂度严格交集O(min(m,n))注:假设输入模型所包含的特征数量分别为m和n.基于简单组合的方法[11-13]最易实现且具有最低的时间复杂度,只需要把两棵输入特征树的根特征连接起来,并求输入约束关系的并集即可.文献[11]的方法在实现产品交集语义时,需要遍历所有公共特征,因此时间复杂度为O(min(m,n)).文献[12-13]的方法需要恰好遍历所有输入特征一次,因此时间复杂度为O(m+n).此外,此类方法也是除了逻辑公式方法以外,唯一可以实现“严格产品交(并)集”换为逻辑公式后,再次转为特征模型得到(b).可以看到,由于上述缺点的存在,逻辑公式法得到的输出特征模型还需人工重构方能得到满意结果.4.2现有研究比较基于上一节提出的概念框架,本节对现有特征模型融合研究工作进行分析和比较.表2给出了相关研究工作的概览,其中在“输入模型”部分,用“+”表示该方法可以处理层次不一致、根特征不一致的输入以及输入模型中的约束关系;“-”则相反.规则+--O(mn)语义且对输入特征模型限制最少的一类算法.然而,此类算法的主要不足体现在输出模型的质量和冲突的消解上.图3(a)和(b)给出了两个层次不一致,且存在冲突的示例输入模型.其中,层次不一致体现为公共特征B在两个输入模型中的父特征不相同.冲突则体现为输入模型1蕴含约束关系BrequiresD(由显式约束关系BrequiresC和由精化导致的约束关系CrequiresD得出),但输入模型2显式声明Page7BexcludesD.图3(c)给出了文献[11]的方法的严格产品并集语义的输出,其基本思想是用一个虚拟的根特征R以及一个异或关系将两个输入特征树连接起来.可以看到输入约束关系原封不动地加入到输出中,因此冲突并没有得到解决.此外,其输出模型中存在大量冗余,即所有的公共特征(即A、B、C、D)以及所有公共路径都在输出模型中出现两次,因此模型规模是异常的.文献[12-13]的方法得到的输出模型类似,在此不再赘述.图3部分特征模型融合算法示例(产品并集语义)基于规则的方法[6,8,10]具有多项式时间复杂度,其主要实现技术是遍历输入特征树(图)并变换为输出特征树(图).此类方法的主要优势在于输出模型的质量较好,而主要缺点在于对输入模型的限制较多,且在冲突消解上仍然存在不足.图3(d)给出了文献[6,8]的方法在示例输入模型上的运行结果(文献[10]的方法由于不接受层次不一致的输入模型,所以无法执行).可以看到输入输出模型的层次结构相当一致,因此输出模型具有较强的可读性.值得注意的是,导致层次不一致的公共特征(如特征B)将会在输出模型中多次出现,因此表2将相应方法的“模型规模”标注为“当层次不一致时异常”,此时输出模型需要人工重构后才可使用.另外,此类方法同样缺乏冲突消解能力.表2将文献[6,8]的方法的冲突消解能力标注为“部分修复”,是因为当XrequiresY和XexcludesY同时出现时,规则会将此冲突消解为“X和Y不存在显式约束”,从而达到修复的目的.然而,一旦这两个约束之一是传递得到(如图3中的示例)或者是由精化关系隐式蕴含,那么这两种方法将无法检测或修复此冲突.基于逻辑公式的方法[9]在冲突检测上具有明显优势,且输出模型的产品集合语义和规模都可以良好地保持,同时对于输入模型的限制最少.由于特征模型被转化为逻辑公式,因此可以利用逻辑公式可满足性求解器检测输出模型的不一致,并可以删除死特征.该方法的主要缺点是不易保持层次结构,如图2所示,由于特征树上多个特征可能被合并为一个特征,因此输入输出模型的层次结构可能有较大差异.由于方法的实现需要求解可满足性以及寻找最小蕴含(PrimeImplicant),因此实现难度较大,而且时间复杂度是指数级的.5问题与展望本节针对现有特征模型融合算法中存在的问题与不足,提出可能的研究设想.5.1特征匹配问题任何特征模型融合算法都依赖于各输入模型之间的特征匹配.特征匹配的结果包含以下4种情况:(1)等价.两个特征的语义完全等价.(2)覆盖.一个特征的语义完全涵盖另一个特征.(3)相交.两个特征的语义部分重叠.(4)不相关.两个特征的语义完全不相干.现有方法在特征匹配问题上没有进行深入的研究,主要体现在两方面.首先,特征匹配完全由人工完成,这要求建模人员浏览并理解各输入模型中的所有特征,工作量十分可观.其次,现有方法完全缺乏对“覆盖”和“相交”特征的针对性处理,一旦输入模型中出现上述两类匹配情况,那么输出结果的质量将受到严重影响.上述两方面问题极大地制约了特征模型融合方法的实用性.要解决上述问题,可以借鉴数据库和本体研究领域在SchemaMatching和OntologyMatching方面的相关研究.例如,以特征为顶点,关系为边,把特征模型也可看成一类特殊的图,那么就可以借鉴文献[16]中提出的图顶点匹配算法来匹配特征,并进行进一步的处理.5.2各融合方法相结合的问题现有研究中提出了3类融合方法,即简单组合方法、基于规则的方法以及基于逻辑公式的方法.这3类方法各自有明显的不足,要么对输入模型的限制太多,要么难以进行冲突检测,要么输出模型的可读性不强.一个研究设想是综合各类方法的优点,设计出更优的融合方法.例如,首先将输入模型看作一般的有向树,采用基于规则的方法生成结果有向树.同时采用基于逻辑公式的思想,计算出结果模型对Page8应的逻辑公式并将其表为一系列逻辑蕴含式的合取(如表1所示),此时亦可检测不一致冲突和死特征.最后根据表1,将每一个逻辑蕴含式对应为有向树上的精化关系,或者是横跨有向树的约束关系,从而得到结果特征模型.此过程的关键步骤是将融合后的逻辑公式表为一系列逻辑蕴含式的合取,但注意到表1中所列举的各逻辑蕴含式均可表达为析取式,因此问题等价于求解结果逻辑公式的合取范式,从而在理论上是可行的.5.3产品集合语义问题现有特征模型融合方法提出了两种产品集合语义,即“产品交集”与“产品并集”语义.其主要问题是难以妥善处理输入特征模型中的非公共特征.图4给出了一个示例.两个输入模型(a)和(b)分别包括两个非公共特征,(c)和(d)是现有研究工作中两种可能的产品并集融合结果,而(e)是产品交集融合结果.在融合具有非公共特征的特征模型时,其结果应该允许这些非公共特征在不违反原有约束的前提下进行适当的组合,而现有语义并不满足此性质.例如,(a)和(b)的理想融合结果应该能够表达“普清触摸屏、高清非触摸屏”这样的需求,同时保持输入模型的原始约束,从而避免“普清又高清的屏幕”和“触摸且非触摸的屏幕”这样的非法需求.但是通过图4可以看到,现有的语义要么根本不允许非公共特征的组合,要么破坏了原有约束.图4现有特征模型融合方法的产品集合语义示例一种可能满足上述要求的语义可以基于产品的笛卡尔积来进行定义,即给定输入特征模型X1和X2,输出特征模型Y的产品集合满足如下语义:ProdSet(Y)ProdSet(X1)×ProdSet(X2).笛卡尔积允许输入模型中的非公共特征在不破坏原有约束关系的前提下进行组合.然而,对于公共特征而言,必须加入其它限制才能保证施加于公共特征上的原有约束关系不被破坏.另外,最终的语义可能难以用规则进行描述,因此5.2节所设想的混合方法可能会更适用.6结束语本文对现有特征模型融合研究进行了比较和分析.特征模型融合是一种将同一领域内多个相似特征模型合并为一个特征模型的方法,在特征模型构建和演化中具有重要作用.本文从输入、输出和实现3个方面对6种特征模型融合研究工作进行了分析,得出的结论是:基于简单组合的方法最易实现且适用性最广,然而输出模型的质量不佳;基于规则的方法输出模型的质量最佳,且较易实现,然而适用性受到一定限制;基于逻辑公式的方法适用性广且具备冲突检测能力,但实现代价高且输出模型质量仍不尽如人意.基于上述比较和分析,本文识别出特征模型融合研究中的3个亟需解决的问题:(1)如何匹配输入模型中的相同或相似特征的问题.(2)如何结合不同策略来寻求一种在输入、输出和实现三方面都令人满意的方法的问题.(3)恰当处理输入模型中的非公共特征的问题.只有良好地解决了这3个问题,特征模型融合算法才能在现实领域的特征模型构建和演化中具备良好的实用性.
