Page1迭代方法中基于渐近规模的通信与计算比分析徐小文莫则尧武林平(北京应用物理与计算数学研究所北京100094)摘要迭代方法是科学计算中求解大规模稀疏线性代数方程组最常用的方法.大量实际应用表明,迭代方法通常具有较高的通信与计算比,只有在粗粒度并行下才能取得较好的并行可扩展性能.而实际应用大规模计算的需求和当前多核/众核体系结构的发展趋势要求迭代方法具备细粒度并行可扩展能力.文中引入渐近规模,即满足加速条件的计算规模下界,来反映并行迭代方法适应细粒度并行的能力,并由此刻画通信与计算比.基于矩阵的稀疏模式及其通信模式、机器的通信参数和迭代方法的基本运算,给出了渐近规模的理论预测公式.在一台包含128个双路4核计算节点的并行机上,分别基于纯进程并行(MPI)和进程/线程混合并行(MPI/OpenMP),以实际应用中3种常用迭代方法Jacobi、CG、BiCGSTAB为例,分析其渐近规模.并行可扩展性测试表明了渐近规模用于刻画迭代方法通信与计算比的准确性.对于纯进程情形,给出了渐近规模的理论预测与实际测试的对比,表明了理论预测结果的正确性.最后,基于这些结果,从迭代方法的算法设计和并行实现等方面讨论了面向未来更大规模的计算系统,降低通信与计算比的途径.关键词迭代方法;通信与计算比;并行可扩展;渐近规模;多核/众核体系结构1引言在很多数值模拟应用中,需要求解形如犃狓=犫的稀疏线性代数方程组,其中,犃∈Rn×n是稀疏矩阵,犫∈Rn是右端向量,狓∈Rn为待求解的未知向量.求解该类方程的解法器是科学计算领域的核心共性模块,在很多应用中占据大比例的时间开销.受舍入误差、内存和计算复杂度的限制,迭代方法是当前大规模数值模拟中求解该类方程的主要方法.例如,Krylov子空间迭代方法[1]是当前实际应用最常用的方法之一.迭代方法通常包含稀疏矩阵-向量乘积(SpMV)、向量内积(dot)以及向量校正(axpy)等基本运算.在负载均衡的前提下,并行效率取决于通信时间与浮点计算时间之比.SpMV和dot分别需要局部点对点通信和全局归约通信,且均属于低密度型计算,从而导致迭代方法的通信与计算比很高.大量实际应用表明,只有单核计算规模足够大时(粗粒度并行),迭代方法才能取得理想的并行性能.然而,一方面,粗粒度并行无法满足实际应用的需求,实际应用希望在单核规模较小的情况下,仍然能取得较高的并行效率.另一方面,多核/众核体系结构是当前和未来高性能计算机的主要特征.在这种体系结构上,计算结点呈现多CPU、CPU内多核/众核的多级结构,单结点的计算性能随着结点内核数增加而大幅度提升.同时,单结点的存储容量和带宽却增加缓慢.这意味着,单核的内存和带宽可能还会减少[2].因此,传统的通过增加单核计算规模来获取较好的并行效率的方式将不再现实,必须考虑迭代方法适应细粒度并行的能力.迭代方法的并行可扩展性能面临很大的挑战.本文分析迭代方法适应细粒度并行计算的能力和并行性能瓶颈,引入渐近规模来刻画并行迭代方法的通信与计算比.所谓渐近规模,是指满足并行加速条件(加速比大于1)的计算规模下限.基于此,在1024个CPU核上,对实际应用中几类常用迭代方法进行了渐近规模分析,给出了包括进程和进程/线程混合并行的测试和分析结果.本文第2节简单介绍几种常用的迭代方法及其基本运算;第3节介绍渐近规模及其分析方法;第4节给出性能分析结果;第5节讨论和总结全文.2迭代方法及其基本运算迭代方法的主要思想是通过构造有效的迭代格式,在有限步内收敛于方程的解,算法的一般流程如下:其中狓0为初始解向量,G(犃,犫,狓k-1)为迭代格式,k为迭代次数.迭代格式G(犃,犫,狓k-1)由当前迭代近似解狓k-1得到新的近似解狓k,通常由一系列稀疏矩阵-向量乘积(SpMV)、向量内积(dot)和向量校正(axpy)等操作组合.记矩阵犃=(aij)n×n,向量狓=(x1,x2,…,xn)T,狔=(y1,y2,…,yn)T,狕=(z1,z2,…,zn)T(n为矩阵和向量的规模),常数a.则3种运算计算方法如下:(1)SpMV:狔=犃狓yi=∑n(2)dot:d=(狓,狔)d=∑n(3)axpy:狕=犪狓+狔zi=axi+yi,i=1,2,…,n.对于稀疏矩阵,这些操作的计算复杂度均为O(n).在并行计算环境下,假设矩阵按行进行数据划分,向量也进行相应的划分.则SpMV需要局部点对点通信,dot需要全局归约通信,axpy无需通信.表1以实际应用中最常用的3种典型迭代方法为例,给出了单次迭代所需的基本运算次数.其中,Page3Jacobi是最基本的迭代方法,CG(共轭梯度方法)和BiCGSTAB(双正交共轭梯度稳定化方法)属于Krylov子空间迭代方法[1],分别适用于求解对称和非对称问题.JacobiCGBiCGSTAB23通信与计算比:渐近规模分析记号:p:CPU核数(以下简称“核数”).n:矩阵规模(以下简称“规模”).Tp,n:规模为n,核数为p时的CPU时间.pm=p3.1加速条件其加速比和并行效率分别为固定规模n,核数从pm增加到p(增加m倍),定义并行计算的加速条件为Sp,n>1,即存在0<ε<1-1加速条件(4)给出了固定规模n、核数增加m倍时并行效率的下限Em=1为核数从pm增加到p时的渐近效率,ε称为效率增量.在下面的分析中,为简单起见,迭代方法基本运算的并行实现满足如下假设:(1)计算与通信不重叠.(2)各CPU核的计算负载和通信负载均衡.(3)单核浮点性能不随核数变化而变化.由假设(1),CPU时间Tp,n可分为计算时间p,n和通信TcmTcp于3个基本运算的计算量不随核数的变化而变化,基于假设(3),有Tcp写为Ep,n=Tcp则加速条件(4)意味着p,n1Tcp上式给出了满足加速条件的计算时间下限,该下限与两个方面有关:通信开销TcmTcmp,n-Tcm3.2计算通信复杂度对具体迭代方法,记c1、c2和c3分别为基本运算SpMV、dot和axpy的次数,f1(n)、f2(n)和f3(n)分别为相应基本运算的浮点运算次数,则总浮点次数为f(n)=c1f1(n)+c2f2(n)+c3f3(n).记矩阵犃的非零元数目为nnz,有则迭代方法的浮点运算次数即为记η为单核浮点运算速度,基于假设(2),有f(n)=2c1·nnz+2(c2+c3)n-c1-c2(7)对于点对点通信,考虑基本的α-β模型:Tcm,1下面考虑通信开销,为简单起见,我们仅考虑进程间的消息传递通信的开销.对迭代方法,包括SpMV的点对点局部通信时间Tcm,1归约通信时间Tcm,2psα+kβ,其中α,β分别为通信延迟和带宽的倒数,k为消息长度(字节),ps为本地发送进程个数.考虑到实际的通信延迟与两个处理器的距离相关,我们采用文献[3]中提出的α-β-γ模型,该模型中将距离考虑进来,即α替换成α(h)=α+hγ.其中h为消息传递的跳数(hops数),γ则是每个hops的额外延迟.这些参数与具体网络拓扑相关.例如,对mesh或torus网络,h则为网络直径.而对胖树结构,h=4.因此,基于α-β-γ模型的通信开销为对全局归约通信,我们考虑广泛采用的结合二叉树模型[4]:Tcm,2算dot只归约一个双精度数,因此k=1,结合基于点对点的α-β-γ模型,我们采用如下模型:因此,迭代方法的通信为Page4Tcmp,n=Tcm,1c2(hlog2p-hmlog2pm).=c1(ps·(α+hγ)+kβ)+c2log2p·(α+hγ+β)=(c1ps+c2log2p)α+(c1k+c2log2p)β+(c1ps+c2log2p)hγ基于迭代方法的计算复杂度(8)和通信复杂度3.3渐近规模(11),则加速条件(6)写为其中,f(n,p)=f(n)c(ε,m,η,p,α,β,γ)=ηm-1-εm(cαα+cββ+cγγ),cα=εm(c1ps+c2log2p)+c1log2m,cβ=εm(c1k+c2log2p)+c2log2m,cγ=εm(c1ps+c2log2p)h+c1ps(h-hm)+f(n,p)为单核的计算复杂度,c(ε,m,η,p,α,β,γ)称为通信复杂度.通信复杂度可视为将通信时间等价转换为计算时间所需的计算量.给定核数p、增长倍数m以及效率增量ε,关系式(12)给出了满足加速条件计算量与通信量的关系,同时隐含了满足加速条件的规模下限.特别地,定义渐近规模N(p,m)为当ε→0时,满足加速条件的单核最小规模,即N(p,m)={minnp:f(n,p)c(ε,m,η,p,α,β,γ),ε→对于给定的p和m,N(p,m)越大,则说明满足加速条件的单核最小规模越大,即通信与计算比越大.对于具体迭代方法,给定p和m,其渐近规模主要依赖于如下4个方面:(1)应用参数.矩阵非零元数目nnz.(2)通信模式参数.消息长度k和本地发送进程数ps.取决于应用和数据剖分方式.(3)通信参数.通信延迟α、带宽倒数β、每个hops的额外延迟γ、消息传递hops数h.取决于具体机器.(4)迭代方法参数.基本运算次数c1、c2和c3.因此,对于给定的迭代方法、数据剖分和机器,即可通过式(13)预测相应的渐近规模.同样,渐近规模也可用于分析迭代方法各基本运算的通信与计算比,例如,对运算SpMV和dot,分别取c1=1,c2=c3=0和c2=1,c1=c3=0.特别地,如果某类运算没有通信开销,即c(ε,m,η,p,α,β,γ)=0,则称之为零渐近规模运算.例如,axpy是零渐近规模运算.关于并行可扩展性能度量和评测,已有很多分析方法,可参见文献[5-8].本文侧重于满足并行加速条件的计算规模下限分析.在实际应用程序中,给定核数p和增长倍数m,如果单核规模小于渐近规模,则无法取得加速.这对大规模计算有直接的指导意义.注记1.在渐近规模的定义式(13)中,效率增量ε→0只是具有理论意义.实际应用中,通常取某个较小值,例如ε=0.1×(1/m).也可根据实际需要,取0<ε<1-1/m之间的任何数,从而获得更高并行效率的规模下限.4数值实验4.1模型、平台和参数测试矩阵来源于二维Poisson方程在结构网格上采用5点格式离散得到,除边界网格单元外,矩阵每行的非零元数目为5.即矩阵非零元数目nnz=5n.数值实验在并行应用支撑软件框架JASMIN[9]上进行.在JASMIN框架中,结构网格被划分为若干个均匀矩形网格片(patch)的集合.图1给出了一个规模为20×20的网格包含7个网格片的示意图.在JASMIN框架中,网格片是并行计算的基本单位,数据剖分基于网格片进行.因此,消息长度k=n/槡p,本地发送进程数ps=4.图1JASMIN框架结构网格及网格片划分示意图如图1所示,7个网格片被划分在2个CPU核,分别包含4个和3个网格片.所有数值实验在一台包含128个双路4核计算结点的并行机上完成,共1024个核.单核浮点峰值为10.12GFlop/s.每个结点共享16GB内存.结点之间采用Infiniband网络互连,网络拓扑是两层胖树结构.16个结点组成一个机柜.结点之间的通信延迟α=1.66μs,通信带宽是1.68GB/s即β=Page55.94ns,每个hops的额外延迟γ=0.91μs.机柜之间的通信延迟α=1.89μs,每个hops的额外延迟γ=2.86μs.消息传递的hops数h=4.实验中,采用O2优化编译选项.在实验机器上,我们测得的SpMV实际浮点运算速度为0.81GFlop/s.由迭代方法的浮点运算次数f(n)可知,SpMV是运算量的主要部分.因此,实验中我们取迭代方法的单核浮点运算速度η=0.81GFlop/s.4.2测试结果及分析本小节,测试第2节介绍的几类常用迭代方法及其基本运算的渐近规模及可扩展性,各迭代方法的基本运算次数见表1.测试中,核数增长倍数m=2,效率增量ε=0.05.采用基于MPI编程的进程并行(MPI-Only).渐近规模(13)的基础是通信性能模型(9)和(10)的准确性.图2给出了SpMV点对点通信与dot全局归约通信的模型预测曲线和实测曲线.可见两者均吻合较好.这验证了通信模型和机器参数的可靠性.测试中,固定网格规模1024×1024,单个网格片大小32×32,共1024个网格片,通信次数10000.从图2还可看出由两层胖树结构带来的影响,在超过128个核时,预测数据明显表现出通信参数的差异.图2SpMV的点对点通信和dot归约通信性能:图3给出了3种迭代方法及基本运算SpMV和dot的渐近规模随核数增长的变化趋势,同时给出了基于式(13)的预测曲线和基于式(6)的实测曲线的结果.可知预测曲线基本上与实测曲线吻合较好,各曲线的趋势一致.从图2和图3还可得到如下结论:(1)dot具有很大的渐近规模,且随核数增加渐近规模也显著增加.SpMV的渐近规模较小,随着核数增加,渐近规模增加不明显.核数从8增加到图3各迭代方法及基本运算的渐近规模变化曲线:1024,dot的渐近规模从4096增加到65536,增加了16倍.而SpMV的渐近规模控制在512之内.3个迭代方法的渐近规模变化曲线均处于dot和SpMV的曲线之间,随着核数增加,变化趋势与dot的曲线一致.这说明,迭代方法的并行性能受限于dot的渐近规模.在核数为1024时,3个迭代的渐近规模在8192附近.这意味着,在1024个核上,只有单核规模超过8192时,才能取得较好的并行性能.(2)dot运算的全局归约通信是迭代方法的性能瓶颈.从图3可知,核数超过64时,dot全局归约的开销远高于SpMV的局部通信.核数从8增加到1024,dot的全局归约通信开销增加了24倍.(3)需指出的是,核数从16增加到128时,SpMV的渐近规模反而从256下降到32.注意到加速条件(6)中包含了通信增量项,这意味着通信开销增加不明显.实际上,从图3可知,核数从32增加到128时,SpMV的通信开销反而下降,与渐近规模的趋势一致.这说明渐近规模可正确反映通信与计算比.(4)Jacobi迭代的渐近规模略小于CG和BiCGSTAB,原因在于Jacobi单次迭代的内积次数Page6少于CG和BiCGSTAB.4.3进程/线程混合并行的影响从渐近规模的式(13)和4.2节的测试可知,随核数增加,迭代方法的渐近规模增加较快,进程通信开销尤其是内积计算的全局归约通信是影响迭代方法渐近规模的主要因素.本小节考虑进程/线程混合并行对渐近规模的影响.采用MPI/OpenMP编程(MPI-OMP),考虑到实验机器是双路4核结构,每个结点启动2个MPI进程,每个进程启动4个OpenMP线程.对JASMIN框架,网格片是基本计算单元,因此线程并行的最小单位是网格片,即每个线程包括若干个网格片.从通信复杂度的公式c(ε,m,η,p,α,β,γ)可大致得到如下趋势:在相同核数的前提下,进程间的通信开销随进程数p的减少而下降.图4给出了MPI/OMP混合并行下3种迭代方法及基本运算SpMV和dot的渐近规模随核数增长的变化趋势,图5给出了SpMV点对点通信和dot归约通信性能.测试规模与4.2节的图2和图3相同.为了对比,图5中还给出了4.2节中纯MPI的结果.图5SpMV的点对点通信和dot归约通信性能:从图4和图5可得到如下结论:(1)从图5可知,相对于纯进程情形(图3),在相同核数情况下,混合情形由于进程数目减少,从而减少了MPI通信开销.(2)相对于纯进程情形(图2),dot的渐近规模增长得到较好的控制.核数从8增加到1024,dot的渐近规模增长倍数从纯进程情形的16倍下降到4倍左右.这一改善使得3个迭代方法的渐近规模曲线与SpMV的增长曲线一致.在核数为1024时,3个迭代的渐近规模控制在512之内,远低于纯进程情形的8192.这意味着,进程/线程混合并行改善了迭代方法细粒度计算的可扩展性能.最后,图6以迭代方法为例,给出了两种并行策略下的可扩展性能.测试中,固定网格规模为1024×1024,包含1024个网格片,网格片大小32×32.核数从32增加到1024,则单核规模从32768下降到1024.图6BiCGSTAB可扩展性能:固定规模1024×1024从图6可知,在进程情形,核数为256时CPU时间达到最小.注意到,此时单核规模为4096.由图2可知,BiCGSTAB在256核时的渐近规模正好是4096,说明此时继续增加核数很难有加速.在进程/线程混合情形,由于渐近规模减小,在进程情形达到渐近规模之后(核数大于128),混合情形仍然能够继续加速,直到1024核.可扩展性能得到明显改善.这一结果与图2的分析结果吻合.说明渐近规模可很好地刻画迭代方法的通信与计算比.由于通信模型(9)和(10)均没有考虑线程引入及多核结构对通信的影响,本小节仅给出实际测试的结果.如何将线程和多核因素考虑到通信模型中,得到更精细的通信模型,是将来需要研究的课题.5总结本文引入渐近规模的概念来刻画并行迭代方法Page7的通信与计算比,并由此刻画迭代方法适应细粒度并行的可扩展性能.基于此,在多核系统上对几种典型迭代方法进行了测试和分析.结果表明,基于MPI的纯进程并行无法适应细粒度并行,渐近规模较大,其中内积运算dot的MPI全局归约通信是影响迭代方法并行性能的主要瓶颈.基于MPI/OpenMP的进程/线程混合并行通过降低进程数目,可缓解MPI的全局归约通信开销,降低渐近规模,改善并行可扩展性能.本文的分析结果可用于指导实际应用程序的大规模计算,渐近规模还可用于其它并行应用的分析.随着科学计算向百亿亿次计算(Exascale)迈进,未来计算机系统的结点数目将更多,结点内的CPU核数将达到数十数百甚至更多且CPU之间呈现NUMA访存特征[2],如何在这样的系统上保持较低的渐近规模,实现并行迭代方法的细粒度高效并行,对迭代方法的算法设计和并行实现均是一个很大的挑战.今后的研究重点包括:(1)发展适应结点内复杂体系结构的并行编程模型和性能优化方法.对于结点内共享存储结构(SMP),OpenMP是有效的编程模型.然而,对于结点内NUMA结构,需要发展新的编程模型和性能优化方法,以便在降低进程间MPI开销的前提下,保持结点内高可扩展性.这是科学计算领域的共性问题.(2)降低内积计算全局归约通信的迭代算法和实现技术.从表1可知,内积的调用次数通常多于其它基本运算次数.因此,设计具有更少内积次数的新迭代算法以及并行实现技术是值得尝试的方向,例如文献[10].(3)发展适应细粒度并行并具有快速收敛性质的并行预条件子.预条件子是很多实际应用中必不可少的迭代加速技术.限于篇幅,本文没有涉及.在算法流程上,预条件子的操作将体现在矩阵-向量乘积SpMV上,希望通过增加SpMV的计算量,降低迭代次数.因此,预条件子为迭代方法降低通信与计算比带来了新的机会.好的预条件子应该同时具有低渐近规模和快速收敛的性质.然而,这两个方面往往是矛盾的,需要基于应用和体系结构特征进行优化设计.
