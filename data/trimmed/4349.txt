Page1基于非均匀变异和多阶段扰动的粒子群优化算法赵新超1)刘国莅2)刘虎球3)赵国帅4)1)(北京邮电大学理学院北京100876)2)(北京大学信息科学技术学院北京100871)3)(清华大学计算机科学与技术系北京100084)4)(北京邮电大学网络技术研究院北京100876)摘要该文提出一种基于非均匀变异和多阶段扰动的粒子群优化算法,并对算法的搜索性能进行了一般性分析.首先,在算法执行的不同阶段利用对当前最优解施加大小不同的邻域扰动操作,很好地增加了群体多样性,提高了跳出局部陷阱的概率,同时加强了对当前最优解邻域内的精细搜索;其次,在粒子群优化算法中引入非均匀变异运算,并依据非均匀变异运算规律适应性地调整解向量的搜索步长.算法性能分析表明,本算法较好地兼顾了群体优化算法的多样性和精英学习强度之间的平衡问题.数值实验上,首先用12个经典测试函数,验证该文提出的几种新措施的有效性与互助性;其次,针对30维和50维的CEC2005测试函数集,所提算法NmP3PSO与经典算法wFIPS、CLPSO和OLPSO做了大量的仿真实验,结果表明该文提出的算法表现出富有竞争力的性能和稳定性.关键词粒子群优化;非均匀变异;多阶段扰动;群体多样性1引言粒子群优化算法[1-2](ParticleSwarmOptimiza-tionAlgorithm,PSO)是对鸟群捕食行为的模拟,由Eberhart和Kennedy提出的一种群智能优化算法.PSO简单易行,没有过多的参数需要调整,目前已广泛应用于函数优化、神经网络训练、模糊系统控制以及其他相关的工程应用领域[3-4].然而,标准粒子群PSO算法在进化过程中,由于收敛速度快而导致种群多样性的快速降低,容易导致算法出现早熟收敛等问题[5].在传统PSO算法中,所有粒子仅仅向自身和邻域的历史最佳位置学习,而没有向邻域内其他个体学习(即使这些个体很优秀),造成启发式信息资源和计算资源的无谓浪费,甚至由此而陷入局部最优.Mendes等人[6]提出了全知粒子群算法(FullyInformedParticleSwarm,FIPS),在FIPS中,每个粒子除了自身和邻域最佳历史位置外,还学习邻域内其他粒子的成功经验;Liang等人[7]提出了一种既可以进行n-维空间搜索、又能在不同维上选择不同学习对象的新学习策略,称为全面学习PSO(ComprehensiveLearningParticleSwarmOptimizer,CLPSO),CLPSO的每个粒子都随机地向自身或其它粒子学习,并且每一个粒子的每一维度会向不同的粒子学习,该学习策略使得每个粒子拥有更多的学习对象,可以在更大的潜在空间飞行,从而有利于全局搜索;詹志辉等人[8]通过对群体和粒子适应值分布的评价识别出算法当前所处的搜索状态(Exploration,Exploitation,Convergence,Jumpingout),然后相应调整算法的关键参数和后续操作,极大的提高了算法的性能表现;为了改善粒子群算法的线性学习策略对历史经验利用不足的现状,陈伟能等人[9]提出年龄因素和生命周期概念,当群体领导者年龄变大时,允许其他粒子挑战其领导权,而领导者的领导权会随着其领导力的变化而相应调整,以持续地维持群体的进化动力.免疫优化算法[10-13]是一种借鉴生物免疫系统特性而形成的启发式搜索算法,具有保持种群多样性、减缓算法陷入局部最优的特性.刘丽珏和蔡自兴[11]利用免疫系统的克隆选择机制,提出一种函数优化算法,算法特点是:在迭代过程中,不仅抗体得到进化,同时建立变异向量集,令变异向量同步进化,协同工作,从而达到优化的目的;基于Baldwin效应,公茂果等人[14]提出一种克隆选择算法,包括4个运算算子:克隆繁殖、Baldwinian学习、超变异和克隆选择,Baldwinian学习算子模拟免疫系统的学习机制有效的改变了搜索空间;Cai等人[15]提出一种使用分布估计疫苗的Memetic克隆选择算法MCSA-EDA,为了克服传统克隆选择算法的不足,在算法中构建了3个操作用来求解无约束二进制二次规划问题;为了克服量子聚类问题陷入局部最优和处理大尺寸图像分割问题的瓶颈,Gou等人[16]通过在Multi-elitist免疫克隆优化亲和度函数计算中嵌入1个潜在的进化公式和基于距离矩阵的聚类中心更新方式,提出一种Multi-Elitist免疫克隆量子聚类算法(ME-ICQC),在该算法框架中,精英群体是由高亲和度的个体组成,并在进化过程中扮演支配角色.非均匀变异演化算法[17]是一种能自动调整搜索步长的搜索算法,使得在搜索过程中始终有逃出局部陷阱的可能,可以有效克服群体算法的早熟现象.非均匀变异运算的优良性能已经得到很好验证[12,17],本文将非均匀变异运算引进粒子群算法,并对算法的搜索性能进行一般性分析.扰动粒子群算法[18]是一种基于可能性度量概念的新的粒子更新策略,能够在保持对最优解搜索轨迹学习的同时增加一定程度的粒子群体多样性.在粒子群算法研究中,各种学习策略的设计与提出及其相应的研究分析[19-21]对促进粒子群算法的研究具有非常积极的作用.本文第2节简单介绍粒子群算法;第3节详细讲述本文提出的措施和算法构造与分析;第4节分析验证算法新措施的有效性和互助性;第5节针对30维CEC2005测试函数集,与几种经典算法做数值实验对比与算法分析;第6节是针对50维CEC2005测试函数集的数值实验对比与分析;第7节给出文章的结论和进一步拟研究的问题.2粒子群算法标准粒子群优化算法是一种群智能算法,根据对环境的适应度将群体中的个体移动到较好的区域,从而实现对优化问题的求解.粒子群算法将每个Page3个体看成n维搜索空间中的一个没有体积的粒子,在搜索空间中以一定的速度飞行,每个粒子通过跟踪两个“极值”来更新自己的速度和位置:一个极值是粒子本身找到的最优位置,记为pbest;另一个极值是全体粒子所找到的最佳位置,记为gbest.n维搜索空间中,种群由m个粒子组成犡={狓1,狓2,…,狓m},其中第i个粒子的位置记为狓i={xi1,xi2,…,xin}T,飞行速度为狏i={vi1,vi2,…,vin}T,该粒子对应的局部最优位置为狆i={pi1,pi2,…,pin}T,所有粒子找到的最优位置记为狆g={pg1,pg2,…,pgn}T,粒子狓i的飞行速度和位置更新公式分别为狏t+1id=w狏tid+c1r1(狆tid-狓tid)+c2r2(狆t其中d=1,2,…,n;i=1,2,…,m,n为搜索空间的维数;m为种群规模;t为当前进化代数;c1,c2是加速系数;r1,r2是[0,1]之间的均匀分布随机数;w为惯性权重,它决定了粒子先前速度对当前速度的影响程度.为了避免粒子飞出搜索空间,速度狏i通常被限制在某个飞行区域[-vmax,vmax],vmax=k(UB-LB),通常取k=0.5.在粒子群优化算法中,最优粒子gbest的性能和行为对算法的最终性能有重要的影响.扰动粒子群算法[18]是一种在当前最优位置gbest附近的每一个维度上做一次正态随机扰动的粒子更新策略.若算法在搜索过程中找到的最优解是局部最优解,则很容易陷入局部最优邻域,导致种群多样性降低,出现“进化停滞”现象.通过对当前最优位置的随机扰动有可能使算法跳出当前局部陷阱,从而在保证所有粒子精英学习机制的前提下,又有效的保持了种群的多样性,进而提高了搜索到全局最优解的概率.3混合粒子群算法NmP3PSO3.1非均匀变异算子变异是使得群体进化能够实现的关键操作,非均匀变异运算[17]将克隆复制产生的新粒子进行不同幅度的变异,使粒子得以不断进化.其工作原理如下:假设对粒子狓i={xi1,xi2,…,xid,…xin}T的第d个分量执行变异运算,而xid的下界和上界分别记为LB和UB,则变异后的分量:xid=xid+Δ(t,UB-xid),r<0.5其中:Δ(t,y)=y·1-r1-t()T(环变量,T是最大的循环变量,r是[0,1]间均匀产生的随机数,b是系统参数,决定变异运算的非均匀度.非均匀变异步长Δ(t,y)是一种自适应调节步长的变异算子,程序前半段它几乎能在整个定义域中大范围搜索,以期发现可能的潜在区域,随着算法的进行,搜索半径依概率减小,到算法临近结束时仅在当前解的狭小邻域中搜索,这样能够保证对最优解的准确定位而不会再从当前邻域中“逃逸”[17].在本文的数值实验中,由于都是采用最大函数值计算次数的终止条件,因此本文所有的数值实验对式(4)中的t和T调整为当前函数值计算次数和最大函数值计算次数.3.2最优粒子扰动策略及粒子更新通常的粒子群算法群体的所有个体都向同一个全局最优粒子学习,这样操作的优点是算法收敛速度较快,不足之处在于学习强度过大容易导致算法群体的进化停滞.与通常的粒子群算法不同,基于扰动策略的粒子速度更新,首先对全局最优粒子gbest依据方差可调的正态随机分布进行扰动得到新的全局最优粒子pgbest,然后选定的待更新粒子向扰动后的全局最优粒子pgbest学习,此时的速度更新公式为vt+1id=wvtid+c1r1(ptid-xtid)+c2r2(pt其中,ptd维分量,pgbest由正态分布N(pt表示相对于pgbest的不确定度,σ是对循环变量t的非增函数,本文σ的更新方式如下其中σ1>σ2>σ3表示正态扰动幅度的半径参数;α1,α2是半径变化的控制参数,且α1<α2,t是当前函数值计算次数,T是最大函数计算次数.算法早期当σ较大时,扰动算法群体会向全局最优解较大的邻域搜索学习,提供简单高效的多路径并行引导搜索;算法中后期当σ较小时,扰动策略会保证算法群体在全局最优解较小的邻域进行搜索学习,使得当前解几乎不再从较优区域跳出;算法临近结束阶段σ很小,甚至取值为零,保证算法群体仅向全局最优解学习,从而保证算法具有较好的收敛性.3.3优势选择每一个解向量通过多阶段扰动导引及非均匀变异运算后,保存父子两代个体,为了保持算法进化的稳定性,本文从父子两代的混合群体中选择适应度最好的个体作为新的当前粒子.Page43.4算法搜索的性能分析本文在算法执行的不同阶段利用对当前全局最优解施加不同覆盖范围的邻域扰动思想,是为了保持精英学习操作存在的同时增加群体多样性,提高粒子跳出局部最优解的概率.下面就具体分析这种特性,为了分析的方便,假设对二维搜索空间的覆盖搜索范围进行分析,将式(1)和式(5)改写为向量形式(7)和式(8),其它相关的算法参数如前所述.引入记号:犘-狓=c1(狆ti-狓ti),犌-狓=c2(狆t狓ti),犌-狓=c2(狆tr2犌-狓,狌3=r2犌-狓,则方程(1)改写为如下向量形式,图1给出3个向量狏t+1i=w狏ti+r1犘-狓+r2犌-狓=狌1+狌2+狌3(7)式(5)改写为向量形式狏t+1i=w狏ti+r1犘-狓+r2犌-狓=狌1+狌2+狌3(8)3.4.1粒子更新的随机参数对探测范围的影响在向量式(7)和式(8)中,新向量都是3个向量的加权和.根据向量和的定义[22],若参数r1,r2取常数,则速度的新向量狏t+1i是一个确定的向量,因而更新后的新位置也是一个确定的位置向量,如图2中凸多边形右上方的端点;但由于r1,r2是0和1之间的均匀分布的随机数,因此这3个向量和所扫描的可能区域是这3个向量首尾相连构成的闭凸多边形区域,如图2中4个向量狌1,狌2,狌3和狏i+1所围城的凸多边形区域.图2二维空间中3个向量加权和覆盖的区域图2同时也说明粒子群算法更新的优越之处,由于r1,r2的随机性,使得速度向量每次迭代都扫描了一个较大的搜索区域,从而算法的搜索引擎在一次迭代过程中可能的搜索区域也很大.同时,图2也可以解释在算法后期粒子群算法为什么容易陷入局部最优的现象[9],即算法后期,粒子的位置向量、它所记忆的局部最优位置和粒子群体记忆的全局最优向量很靠近,因而向量狌2,狌3的模很小,甚至为零,即向最优解和历史记忆学习的强度很弱,因而速度向量覆盖的区域很小,因此新粒子几乎不可能跳出当前的局部陷阱.进一步,也不难解释一些改进的粒子群算法的性能得到提升的原因[18,23],即在算法后期,若适当增大差向量狌2和狌3,适当的扩大粒子的搜索范围,使得陷入进化停滞的粒子依然保持跳出当前局部陷阱的能力,从而算法的有效搜索得以继续,算法就有可能找到更好的解,否则粒子的搜索引擎就是在原地踏步或陷入“TwoStepsForward,OneStepBack”的窘境[24],但在算法后期不提倡较大范围的扰动;同时,从图2中可以看出,若向量狌1再有一定比例的伸缩,也可以达到类似的效果[25-26],这就是速度更新中惯性系数以某种方式发生变化的原因所在.3.4.2加入全局最优扰动操作对探测范围的影响加入对当前全局最优解一定范围的扰动操作,其他粒子都向扰动之后的最优粒子学习,可以有效改善算法的搜索性能,该算法的效果相当于图2中的向量狌3不仅有一定范围的沿向量方向上的伸缩,而且有一定角度的旋转,因而算法中的其他粒子是向当前最优解所在的某个邻域进行学习,从而既保证了粒子群算法向精英个体学习的核心思想,又在一定程度上降低了向同一个精英个体过度学习的强度和速度,因而算法能够取得不错的效果[18].全局最优解扰动之后的向量加权和的效果如图3所示,图3是在图2的基础上,让最优解的差向量狌3在成比例伸缩的基础上,再增加一定幅度的旋转操作,即沿着最优解可能的扰动的圆域的上下切线间做一定幅度的转动,这样扰动的好处是既保证粒子群向最优解区域学习,但减缓了学习强度,又一定程度上增加了群体多样性,因而取得的结果比较令人满意.Page5图3也可以解释有些改进措施效果不理想的原因,即某些改进措施只是片面强调了群体多样性或精英学习强度的某一个方面,而忽略了两者之间的均衡问题.例如,如果算法后期进化停滞,单纯通过增加新个体而提高多样性的措施一般不会太理想,因为新加入的个体适应度一般较差,因此这些新个体增加的多样性在传递到精英个体和扰动邻域之前已经由于过学习操作而陷入局部陷阱,即这些新个体虽然增加了算法群体整体上的多样性,但是这种多样性对精英个体的进化基本不会发生什么影响,从而对算法性能的提高往往很有限,因此增加群体多样性的核心思想在于如何合理的增加精英解所在邻域的多样性.3.5算法分析与算法流程图算法的相关分析和算法流程图.3.5.1算法计算复杂性分析综合算法构造思想和以上的具体策略,现给出首先分析算法迭代一次所需要的基本操作:计算当前最优解的扰动步长需要的基本运算是O(1);粒子飞行速度和位置向量更新以及越界检测的复杂度是O(3mn);计算函数适应值、更新局部和全局最优位置需要的基本运算是O(3m);对当前最优粒子进行非均匀变异操作O(kn+k),其中k是非均匀变异操作的次数;因此算法一次迭代的时间复杂度是O(1)+O(3mn)+O(3m)+O(kn+k)=O(Cmn),因此算法的整体复杂度是O(cmnT),其中m是粒子群体规模,n是问题的维数,T是算法最大迭代次数,C是常数.3.5.2与CPSO算法的对比分析Tan和Xiao[27]提出克隆粒子群优化算法(CP-SO),CPSO的主要思想是:首先克隆M个连续进化代的最优粒子;然后再对记忆的最优粒子施加一个高斯变异主导的变异操作(见式(9)),有效加速了算法的收敛性;然后所得新解和整个群体进行轮盘赌的选择操作,选择概率主要考虑了基于函数值差异性的群体多样性,增强了算法从当前局部陷阱逃逸的能力.其中μ是均值为0、方差为1的正态分布随机向量,gbest是记忆的最优解,是点乘运算,即两个相同维度的向量乘积结果是一个同样维度的向量,结果向量的每一维度是两个相乘向量同一维度的乘积,例如[2,3][4,5]=[8,15].本文给出的算法NmP3PSO与CPSO[27]有明显的区别:(1)NmP3PSO的主要操作之一是如式(4)~式(6)所示的粒子速度三阶段扰动更新策略,CPSO没有;(2)CPSO是连续记录M个进化代的最优解,然后进行如式(9)所示的高斯正态随机变量主导的变异操作,而NmP3PSO每一个进化代对当前最优解进行非均匀变异操作,因此变异时间点和关键的变异方式都不一样;(3)CPSO变异后的M个新解会与原解群体混合,进行轮盘赌式的选择操作,CPSO在计算混合群体中每一个解向量的浓度(Concentration)和选择概率时需要进行两次(m+M)2计算量的操作,而NmP3PSO没有这些复杂运算,其中m是群体规模,M是连续记忆最优解的次数;(4)NmP3PSO与CPSO在相同函数计算次数条件下,仿真实验结果也有很大区别,详见表2.3.5.3算法流程图算法流程图见图4.4算法策略有效性和互助性分析本节主要讨论算法策略的各自有效性和相互互助性,算法对比实验的具体参数设置如下:种群规模m=30,搜索空间维数n=30,惯性权值w=0.9,加Page6速常数c1=c2=0.5,控制参数σ1=0.4,σ2=0.001,σ3=10-6,α1=0.4,α2=0.7.需要说明的是,作者对参数σ和α的数值实验表明,算法性能对参数σ和α取值不敏感.4.1测试函数为测试算法性能,本文选用下列典型的基准测试函数[28],其中函数f1~f7为单峰函数,函数f8~f12为多峰函数,对每个函数独立运行30次,然后对30次搜索到的最优结果求出统计意义上的最优值、中位值、平均值及方差,并与基准PSO算法、P3PSO、NmPSO和CPSO[27]算法的运算结果进行对比分析.4.2算法构造策略的有效性和互助性本文使用分阶段扰动策略和最优解的高频变异操作提升PSO算法的性能,本节将在基本PSO算法的基础上逐步增加相应的构造措施,采用表1所列的基准函数,在相同函数值计算次数的条件下对比几种算法的计算性能.PSO是基本PSO算法;P3PSO是在PSO框架中融入对最优解的三阶段扰动策略导引粒子的速度更新;NmPSO是在PSO框架中融入非均匀高频变异策略,为了提高函数值计表1基准测试函数))+20+ef1=∑nf2=∑nf3=∑nf4=maxixi,1i{}nf5=∑n-1f6=∑nf7=∑nf8=∑nf9=-20exp-0.21f10=1f11=πf12=0.1{10sin2(3πx1)+∑n-1(xi-1)2[1+10sin2(πxi+1)]+(xn-1)2[1+sin2(2πxn)]}+算效用和节省计算代价,本文只针对当前最优粒子施加非均匀变异操作;NmP3PSO是结合P3PSO与NmPSO的综合策略算法,即在PSO算法中融入最优粒子三阶段扰动导引策略和非均匀高频变异策略;CPSO[27]的主要策略是记忆10个连续进化代的最优粒子,再施加变异操作,加速了算法的收敛性,然后所得新解和整个群体进行轮盘赌的选择操作,选择概率主要考虑了基于函数值差异性的群体多样性,增强了算法从当前局部陷阱逃逸的能力.为了公平地比较不同的算法,本部分实验所有算法采取相同的最大函数值计算次数:maxFES=6万,其中算法CPSO的其它参数设置与文献[27]相同,主要罗列如下:群体规模40;惯性权值w从0.9线性减少到0.4,稍有不同在于原文是随迭代次数线性减少,本文是随函数值计算次数线性减少;加速常数c1=c2=2;对飞行速度有越界检查;为公平比较起见,作者在CPSO算法中也加入粒子位置的越界检查,即如果每一个粒子每一维度的新位置超过上界或下界,则该维度恢复到原位置.相关实验结果见表2,其中对每一个函数的最优算法的结果用黑体标示,次最优算法的结果用斜体显示.}2+Page7表2算法构造策略效用实验(Mean±STD)函数f11.05e-2±2.36e-22.27e-11±3.34e-122.45e-10±2.11e-102.12e-11±2.60e-121.07e+2±6.66e+1f21.22e+1±8.311.13e-2±4.59e-23.34e-1±9.33e-11.35-3±1.58e-32.62±1.76f39.38e+2±8.25e+29.87e-3±1.06e-24.39e-3±3.16e-35.98e-3±7.89e-31.98e+4±6.50e+3f41.59±4.83e-13.64e-1±2.98e-14.78e-1±3.93e-12.21e-1±2.37e-12.86±5.48e-1f51.59e+2±1.99e+23.99e+1±6.32e+19.08e+1±8.64e+12.96e+1±2.84e+14.84+6±5.39e+6f6f7f81.03e+2±2.74e+19.86e+1±2.14e+19.08e+1±1.74e+18.34e+1±2.15e+12.08e+2±2.67e+1f93.04±6.71e-12.96±7.08e-13.09±1.132.52±8.41e-14.24e-1±2.53e-1f101.97e-2±1.79e-21.57e-2±1.82e-21.21e-2±9.98e-27.87e-3±9.52e-36.51e-1±1.67e-1f111.10e+1±3.365.59±2.428.52±4.52f123.98e+1±1.26e+13.32e+1±1.08e+13.46e+1±9.112.85e+1±1.02e+13.42e+4±8.19e+4表2的实验结果表明:(1)在相同函数值计算次数的条件下,本文所提算法NmP3PSO在12个测试函数中取得10个最优计算结果和2个次优结果,NmPSO和CPSO各取得一个最优计算结果;(2)融合3阶段扰动策略的算法P3PSO在大部分测试函数上都明显优于PSO算法,在函数f8,f9上表现相当,取得7个测试函数计算的次优结果;(3)融合非均匀高频变异策略的算法NmPSO在大多数测试函数上都比PSO具有优势,只有在f9上稍差于PSO;(4)与前3个算法比较对象对比,融合两种策略的算法NmP3PSO在10个测试函数上都取得最优的结果,只有在函数f3上稍差于算法NmPSO,在函数f9上差于CPSO.综上所述,在相同计算代价的条件下,本文提出的两种策略对算法性能的提升都能起到很积极的作用;其次两者的融合能够更进一步的大幅促进算法性能的提升,从而导致本文提出的算法能够取得更满意的结果.5使用CEC2005测试函数集与知名算法的对比实验与分析:30维为了分析验证算法的性能,本文引进3种知名算法wFIPS[6]、CLPSO[7]、OLPSO[29]作为比较对象,对比分析算法NmP3PSO的性能表现,其中wFIPS是FIPS(FullyInformedParticleSwarm)算法的改进版本,其中每一个邻居的贡献通过它自己的先前最优解来衡量[6].5.1测试函数与参数设置本组实验采取CEC2005[30]提供的实参数优化函数,包括最优解偏移的(Shifted)、旋转的(Rota-ted)单峰和多峰函数,所选择的3组测试函数简单信息如下,详细信息请参看文献[30],由于函数的搜索区域问题,函数F7需要做特殊的处理,因此本部分实验没有选择函数F7.NmPSO0±0GlobalOptimumonBounds;Rosenbrock’sFunction(F8F2);Function;NoiseinFitness;mumonBounds;(1)UnimodalFunctions(5):F1:ShiftedSphereFunction;F2:ShiftedSchwefel’sProblem1.2;F3:ShiftedRotatedHighConditionedEllipticF4:ShiftedSchwefel’sProblem1.2withF5:Schwefel’sProblem2.6withGlobalOpti-(2)MultimodalFunctions(6):F6:ShiftedRosenbrock’sFunction;F8:ShiftedRotatedAckley’sFunctionwithF9:ShiftedRastrigin’sFunction;F10:ShiftedRotatedRastrigin’sFunction;F11:ShiftedRotatedWeierstrassFunction;F12:Schwefel’sProblem2.13;(3)ExpandedMultimodalFunctions(2):F13:ExpandedExtendedGriewank’splusF14:ShiftedRotatedExpandedScaffer’sF6.本节数值实验所有算法的终止条件采取相同的最大函数值计算次数:maxFES=10万,算法wFIPS[6]、CLPSO[7]、OLPSO[29]的所有其他参数和操作都与原文献相同,NmP3PSO的所有参数与第4节相同.5.24种算法数值实验对比算法wFIPS、CLPSO、OLPSO和NmP3PSO在25次独立运行的数值结果统计见表3,该统计结果包括25次独立运行最终结果的平均最优值Mean和标准差STD,每一个函数获得的4组结果中,最优的计算结果用黑体标示.表3最后一行“w/l”表示“win”或“lose”,用来衡量算法NmP3PSO相比于相应算法“赢”或“输”的函数个数.Page8表34种算法数值实验25次独立计算结果统计(Mean±STD)函数F18.23e-7±4.98e-72.06e-7±9.10e-84.11e-17±3.67e-171.64e-11±2.81e-12F21.47e+3±3.65e+28.40e+3±1.28e+32.35e+5±2.33e+52.46e-7±5.16e-7F33.65e+7±1.03e+72.76e+7±6.75e+69.02e+6±4.31e+66.41e+5±2.90e+5F45.38e+3±2.97e+31.69e+4±3.32e+32.69e+4±1.13e+41.69e+4±2.07e+3F53.10e+3±4.08e+25.78e+3±4.22e+23.61e+3±6.34e+26.79e+3±2.37e+3F64.48e+1±3.28e+11.21e+2±4.17e+11.79e+2±2.76e+22.06e+1±1.88e+1F82.09e+1±2.68e-22.09e+1±4.11e-22.06e+1±1.94e-12.04e+1±1.18e-1F99.04e+1±1.25e+11.91e-2±1.72e-2F101.91e+2±1.04e+11.62e+2±2.77e+15.78e+1±1.68e+11.37e+2±3.06e+1F11F121.14e+5±2.93e+45.00e+4±1.26e+41.27e+4±1.51e+41.09e+5±1.24e+4F13F141.34e+1±1.63e-11.31e+1±2.07e-11.31e+1±3.14e-11.26e+1±4.74e-1w/l从表3数值结果看出:(1)在13个测试函数中,NmP3PSO、OLPSO、CLPSO和wFIPS分别取得6个、5个、1个和1个最优结果;(2)算法NmP3PSO的数值实验结果在11个函数上超过wFIPS,在2个函数上输给wFIPS;算法NmP3PSO的数值实验结果在9个函数上超过CLPSO,在4个函数上输给CLPSO,因此在CEC2005这些复杂测试函数上,NmP3PSO比wFIPS和CLPSO有更好的性能;(3)算法NmP3PSO的数值实验结果在6个函数上优于OLPSO,在7个函数上输给OLPSO,因此可以看出在CEC2005这些复杂测试函数上NmP3PSO的表现与OLPSO基本相当.总之,在相同的最大函数值计算次数条件下,在CEC2005这些带Shifted和Rotated属性的复杂测试函数上,本文提出的改进粒子群算法框架NmP3PSO与基于正交学习的算法OLPSO基本相当,但比带权重的全信息粒子群算法wFIPS和全学习机制的粒子群算法CLPSO取得更好的性能.5.34种算法在线性能的进化趋势对比为考查算法的平均进化趋势和综合在线性能,图5给出4个算法在25次独立运行中在线性能对比分析,其中x轴是函数值计算次数,y轴是4个算法在25次独立运行中每一个进化代最优适应值的平均值.从图5(a)、图5(b)和图5(c)这3类测试函数中各选2个,即函数F2,F3;F6,F10和F13,F14为代表.从图5看出,与数值实验结果类似,几个算法的进化趋势也是互有优劣,但总体而言,OLPSO与NmP3PSO进化趋势表现最好,其次是算法CLPSO,算法wFIPS对测试函数的进化趋势表现相对差些.6使用CEC2005测试函数集与知名算法的对比实验与分析:50维为了进一步分析验证算法的性能,针对50维情形的CEC2005[30]实参数优化函数,本文所提算法NmP3PSO将与3种知名PSO算法:wFIPS[6]、CLPSO[7]、OLPSO[29]做进一步的仿真对比分析.除了搜索空间维数n=50外,本组实验中算法的参数设置与前面两组实验的参数相同,包括最大函数值计算次数maxFES=10万.6.14种算法数值实验对比算法wFIPS、CLPSO、OLPSO和NmP3PSO在25次独立运行中的数值结果统计见表4,该统计结果包括25次独立运行最终结果的平均最优值、Mean和标准差STD,每一个函数获得的4组结果中,最优的计算结果用黑体标示.表4最后一行“w/l”表示“win”或“lose”,用来衡量算法NmP3PSO相比于相应算法“赢”或“输”的函数的个数.从表4仿真结果看:(1)所有测试函数的Mean和STD数据项相较于30维测试函数都有一定程度的下降;(2)在13个测试函数中,NmP3PSO、OLP-SO、CLPSO分别取得7个、4个和2个测试函数上的最优结果;(3)算法NmP3PSO的数值实验结果在11个函数上超过wFIPS,在9个测试函数上超过CLPSO,在8个函数上超过OLPSO,由此可以看出,针对50维情形的CEC2005测试函数集,NmP3PSO的性能要优于wFIPS和CLPSO;(4)NmP3PSO的表现要稍优于OLPSO,NmP3PSO在单峰函数和部分多峰函数上优于OLPSO,但OLPSO在部分多峰函数上要优于NmP3PSO,因此OLPSO和NmP3PSOPage9图5wFIPS,CLPSO,OLPSO与NmP3PSO进化趋势(30维函数)表44种算法数值实验25次独立计算结果统计(Mean±STD)函数F12.17e-1±5.97e-21.31e-2±3.87e-32.51e-2±5.29e-35.24e-11±6.83e-12F23.86e+4±8.68e+34.26e+4±4.59e+41.18e+5±1.42e+4F31.98e+8±3.12e+71.59e+7±3.39e+71.33e+8±5.42e+73.69e+6±2.69e+6F46.36e+5±1.13e+46.98e+4±8.13e+31.24e+5±1.51e+46.48e+4±8.11e+4F59.25e+3±1.01e+31.59e+4±1.36e+39.17e+3±1.53e+31.63e+4±1.73e+3F64.26e+3±1.91e+31.94e+3±3.49e+23.22e+3±5.32e+38.48e+1±9.60e+1F82.12e+1±2.95e-22.12e+1±3.24e-22.13e+1±4.09e-22.07e+1±2.23e-1F92.50e+2±2.32e+1F103.94e+2±2.20e+14.32e+2±1.68e+12.02e+2±6.57e+13.06e+2±6.27e+1F11F127.25e+5±1.53e+52.98e+5±5.83e+41.33e+5±4.36e+49.05e+5±4.93e+5F13F142.33e+1±1.53e-12.31e+1±1.74e-12.34e+1±3.01e-12.19e+1±4.51e-1w/l5.22e+1±1.04e+1Page10在不同的测试函数上互有优劣.总之,在相同的函数值计算次数条件下,在50维CEC2005这些带Shifted和Rotated属性的复杂测试函数集上,本文提出的改进粒子群算法NmP3PSO稍优于基于正交学习的算法OLPSO,比带权重的全信息粒子群算法wFIPS和全学习机制的粒子群算法CLPSO取得更好的性能表现.图6wFIPS,CLPSO,OLPSO与NmP3PSO进化趋势(50维函数)从图6看出,从测试函数的算法平均最优函数值的进化曲线来看,本文提出的多阶段扰动策略在算法进化过程中有较为明显的表现,尤其是对函数6.24种算法在线性能的进化趋势对比为进一步考查算法的平均进化趋势和综合在线性能,与上一组实验选取同样的3类测试函数的代表,即函数F2,F3;F6,F10和F13,F14,图6给出4个算法在25次独立运行中在线性能对比分析,其中x轴是函数值计算次数,y轴是4个算法在25次独立运行中每一个进化代最优适应值的平均值.F2,F3,F6,F14,在扰动半径变小的函数值计算次数附近表现出明显的加速收敛属性;几个经典PSO算法的进化趋势互有优劣,NmP3PSO算法针对50维Page11带扰动和偏移的测试函数表现的进化趋势相对最好,其次是带正交学习策略的算法OLPSO,再次是带全学习策略的CLPSO,带权重全信息的算法wFIPS的进化趋势表现相对差些.7结论本文在融合非均匀变异和优秀粒子的多阶段扰动策略的基础上,提出一种混合粒子群优化算法,并对粒子群算法的搜索探测进行了一般性分析.非均匀变异算子适应性的调整搜索步长,同时考虑了算法群体的多样性和收敛性;算法群体的所有粒子向扰动之后的全局最优解学习,使得算法在保持粒子群精英学习机制的基础上,扩大算法群体搜索的有效范围,该思想旨在向最优解学习,但放缓了学习的强度和速度,从而较好保持全局探测和局部勘探之间的平衡;针对向扰动后的全局最优解学习策略的分析表明,本文所提算法是通过扩大全局最优解搜索邻域的思路来提高群体多样性的,只是适度减缓了精英学习的强度,从而避免过早陷入局部陷阱的问题.第1组仿真实验表明,本文提出的几种措施是有效的,相互的组合是协作互补的;第2组是基于30维情形的CEC2005实参数优化的复杂函数集,与知名算法wFIPS、CLPSO和OLPSO的仿真对比表明,本文所提算法NmP3PSO的性能与新近的经典算法OLPSO基本相当,比经典粒子群优化算法CLPSO和wFIPS具有更优越的表现;第3组是基于50维情形的CEC2005实参数优化的复杂函数集,稍优于OLPSO,比算法CLPSO和wFIPS具有较为明显的优势.进一步的研究会探测大幅变异运算与该算法的融合和相互促进,比如Cauchy或Levy变异操作;高维优化或多目标优化问题的求解算法也是进一步有意义的研究问题.致谢新加波南洋理工大学Suganthan教授提供CLPSO、wFIPS算法Matlab源程序,中南大学王勇博士提供了OLPSO算法Matlab源程序,研究生林文桥(现在北京邮电大学信息光子学与光通信国家重点实验室攻读博士)帮助组合和撰写部分程序,审稿专家提出很多建设性的审稿意见,作者在此对以上帮助一并表示感谢.本文2013年11月份的重大修改是第一作者受国家留学基金委资助以访问学者身份在英国埃塞克斯大学访问ZHANGQing-Fu教授期间完成,2014年4月份的修改是第一作者在英国伯明翰大学访问YAOXin教授期间完成!
