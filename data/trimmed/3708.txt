Page1RFID交叉读仲裁方法研究潘巍李战怀陈群谢芳全(西北工业大学计算机学院西安710072)摘要在密集RFID读写器部署环境中,读写器的实际探测区域与其所关注的空间单元之间存在空间失配现象,由空间失配引发的RFID数据交叉读问题会导致位置信息冲突,进而无法满足RFID上层应用的需求.基于交叉读仲裁概念的定义以及交叉读典型场景的抽象,文中提出了利用参考标签思想结合信号强度特征的相对定位技术来解决交叉读仲裁的新颖思路,设计并实现了基于滑动窗口的交叉数据读入检测和仲裁的核心算法.实验结果表明仲裁算法在不增加RFID读写器网络负载的条件下,可以在RFID数据流中有效、及时地检测出存在位置信息冲突的交叉读数据,并通过仲裁处理给出准确的相对位置归属信息.关键词RFID;交叉读;RSSI;参考标签;滑动窗口1引言射频识别(RadioFrequencyIdentification,RFID)是一种非接触式自动识别和数据获取技术[1],可被用来完成识别、监控、定位、跟踪等任务,近年来已被广泛应用于诸如物流和供应链管理、生产制造和装配、公共安全监控、文档追踪和图书管理、医疗保健、军事等多个领域[2].典型的RFID系统一般由三部分组成:RFID读写器、RFID标签、后端数据库系统.RFID系统中移动或静止对象的位置信息是上Page2层应用非常关注的参考指标.典型的RFID系统将固定式读写器部署在指定的位置上,因此读写器本身就代表一个与具体商业位置相关的相对位置信息,如货架、库房入口等.通过观测读写器产生的被监控对象的标签读数(读数中包含读写器的唯一标识)可以对被监控对象进行相对定位或称为符号定位[3].但是,要保证相对定位的唯一性需假定在RFID系统中,读写器间距较远且彼此间没有交叉的探测区域,也即某一时刻点,被监控的贴标对象仅可能在一个读写器上产生读数.但是在密集读写器部署环境中,客观上由于读写器间距较近,多个读写器的探测区域不可避免是相交的.同时,在上层应用中读写器均有指定的关注范围(如某货架或书架等),因此在多个读写器探测区域相交的情况下,读写器的探测区域与具体应用关注的空间单元之间存在典型的空间失配问题.换言之,即一个空间单元可能同时被多个读写器的探测区域覆盖,也就经常出现多台位置不同的读写器可以同时感应到处于同一位置空间中的同一(批)标签(如第3节图1所示).显然,处于交叉探测区域的标签无法简单地进行符号定位,同时对RFID整体系统而言,这些标签在不同的读写器中将产生大量互相冲突的冗余读数.例如两个读写器分别监测两个邻近货架上的若干贴标物品,由于相交探测区域的存在,位于该区域内的物品会同时出现在两个相邻读写器的视图内,导致系统无法简单地根据标签在读写器上的读数来判别物品的相对位置,进一步还可能导致上层应用的部分功能失效.特别是对于支持CQL[4]的RFID系统,如果在不经仲裁的原始数据流上进行如下的查询则无法获取准确的结果.在此类应用中冗余读数是需要仲裁的,主要用于数据清洗后的分离.Query:Howmanygoodsoneachshelf?SELECTshelfID,count(distincttagID)FROMrfid_stream_data[RangeBy‘n-sec’]GROUPBYshelfID本文重点探讨空间失配后标签归属问题的仲裁方法,并将此问题定义为“交叉读仲裁”问题,即判断同时被两个以上(含两个)读写器探测到的标签其唯一归属读写器的问题.密集部署的RFID读写器交叉读仲裁问题已经成为RFID系统大规模部署的一个瓶颈,如何合并多个读写器的探测视图、清洗并分离冗余的交叉读数据,将关联到多个读写器的标签进行正确的归属仲裁是一个研究挑战.本文设计了一种通用可扩展的解决RFID读写器交叉读仲裁问题的处理框架和相关算法,主要贡献在于:(1)给出了交叉读仲裁问题的完整描述和交叉读数据的定义,抽象了典型的交叉读场景,并首次从相对定位的角度,用相对位置相似度的概念设计了一种新颖的交叉读仲裁策略.(2)设计了一种利用参考标签结合信号强度特征计算相对位置相似度的方法,同时借助滑动窗口机制设计并实现了RFID数据流中交叉数据的实时检测以及归属读写器仲裁的模型和核心算法.(3)针对漏读数据给出自适应的属性估计策略,提高了算法的仲裁准确度.(4)模拟真实的应用场景,设计了详细的算法有效性评价实验.实验结果表明,该算法可以有效地解决RFID交叉读仲裁问题,在基准测试场景中监测对象平均相对错误率从0.488显著下降到0.024.本文第2节回顾相关研究工作;第3节抽象交叉读场景并提出交叉读仲裁系统框架;第4节设计交叉读仲裁引擎,对遇到的重要问题进行探讨和分析;第5节针对滑动窗口填补的漏读元组的属性缺失问题,规划自适应的属性估计策略;第6节通过实验结果验证仲裁方法的有效性;最后一节对全文进行总结与展望.2相关工作对于读写器交叉读仲裁问题,在硬件解决机制上可以采取移动传感器、红外线电子眼辅助、窄波束天线、物理屏蔽以及拓扑布局等技术,但在很多实际应用中,受环境限制,硬件解决机制在经济上或技术上不具可行性,仅作为一种提高系统可靠性的辅助手段.在软件解决机制上,数据清洗技术是交叉读仲裁研究的基础.文献[5]首次提出了一种基于概率模型的声明式自适应RFID流数据清洗技术SMURF,该技术充分利用了RFID数据的时间相关性,但却忽略了数据的空间相关性,面向单读写器的模型并未考虑同时部署多个读写器可能产生的更复杂的应用问题(如交叉读).Jeffery等人[6]提出了面向流数据的多阶段流水线式清洗框架ESP,通过关注读写器在空间粒度上的关联性,其可以清洗来自不同读写器的多源RFID数据.其中,框架的仲裁处理阶段关注了交叉读问题,其简单地将被交叉读取的标签归属到读取次数较多的读写器上,但该仲裁策略不但要求读写器具有一致的读取性能,而且在实际应Page3用中其抗干扰能力不足.文献[7]设计了具有清洗传感数据功能的自适应中间件层,其特别提及了读写器的探测区域与具体应用关注的空间单元之间的空间失配问题,但只给出了解决该问题的一种基于统计方法的初步设想,没有实现细节.此外,文献[8]提出仅调度互干扰因素最小的读写器同时感知数据的策略来回避交叉读取的问题,但该方法缺乏弹性,过分依赖读写器间的拓扑关系,且无法回避客观上多个邻近读写器必须同时工作的事实.交叉读仲裁问题的核心是判定贴标对象的读写器归属,从另一个角度来看,其可等价于粗粒度的贴标对象的定位问题,且其对定位精度要求不高,限制在读写器级别.所以,基于RFID的定位技术为交叉读仲裁问题的解决提供了一种可能的途径.文献[9]中描述了基于接收信号强度指示(ReceivedSignalStrengthIndication,RSSI)的RADAR定位系统,该系统使用了位置指纹定位技术实现室内定位.LANDMARC[10]系统则在基于RSSI定位技术的基础上通过引入参考标签,极大地提升了定位技术对环境的抗干扰能力,系统利用最小化距离差的方法推导出追踪标签的二维位置估计.Wang等人[11]则利用参考标签实现了基于RFID的三维空间的定图1产生读写器交叉读问题的典型场景抽象示意图下面以图1的场景1为例描述在实际应用中发生的交叉读仲裁问题:一个仓储中心有两个相邻的仓储库门,库门1和库门2,在库门一侧以相同天线朝向分别安装RFID读写器1和读写器2,用于监控移动对象入库的情况.显然,两个读写器间存在交叉的探测区域.当一个附着或内嵌RFID标签的被监控对象沿图中a→d的方向通过库门2入库,由于安装在库门1左侧的读写器1其朝向右的天线具有较广的探测区域,标签运行至b点到c点之间时,很可能被安装在库门1和库门2的两个读写器同时探测到.因此,读写器1不但检测到了非期望的冗余标签数据,而且单个读写器本身也无法决策被读取的位.文献[12]对基于RFID的定位技术进行了比较和分析,指明了基于场景分析的定位技术对环境干扰具有很好的鲁棒性.值得注意的是,上述定位方法与交叉读仲裁的应用目标是不同的.定位研究主要侧重于提供物理位置的绝对定位,而交叉读仲裁侧重于提供对象归属的相对位置信息.直接利用绝对定位技术解决交叉读仲裁问题并不可行,因为存在部署复杂、计算代价高、实时性不足、可扩展性较差等诸多问题.以上研究工作为交叉读仲裁问题的解决提供了可借鉴的理论和方法,但都没有专门针对该问题提出高效的解决方案,目前迫切需要一种轻量级的解决读写器交叉读仲裁问题的高效可扩展的解决方案.3交叉读的场景抽象和仲裁处理框架3.1场景抽象如图1所示,交叉读可能来自于从物理世界中简化抽象的三种典型应用场景.本文以被动式读写器和标签为主要研究对象,在不影响讨论的前提下,场景示意图中读写器的探测平面区域被简化为扇形,如图中虚线所示.标签是否是期望的.如果没有仲裁机制的支持,RFID系统难以根据原始读数判断贴标对象是经过哪个库门入库的,类似的情形也会出现在超市自动结账等环境中.场景2和场景3则可以等效为超市货架商品监测或者图书馆书架图书管理中发生交叉读问题的场景.如图所示,在两个货\书架上有若干贴标静止对象,(场景2中)部分或(场景3中)全部贴标对象数据会被交叉读入,从而导致无法确定对象归属的货\书架,因此诸如错放商品警告、自动补货等上层应用的功能就无法准确实施.这类问题会给终端用户规模化实施RFID系统带来较大的阻碍,并且随着系Page4统中读写器数量的增加,该问题会变得更加复杂化.3.2交叉读仲裁处理框架上述抽象场景是典型的FR-MT/FT[13](FixedReaderMobileTagorFixedTag)结构.符合此类结构的RFID系统将多个分布的固定式读写器实时采集的前端原始读数传输到中央服务器或者RFID中间件统一处理.读写器上连续产生的原始读数是对标签所在物理世界的实时直接反应,但是遗憾的是,因为无线传感设备的漏读或者不可信的读数,原始读数仅是观测物理世界的子集,且由于不同场景下潜在的冗余读数,由原始读数构成的观测子集还可能会进一步混淆在物理世界中边界清晰的实体子集.图2的RFID系统框架显示了物理世界被读写器读取后所形成的原始读数从网络边缘向企业应用图2RFID系统框架示意图定义1(交叉读数据).当A∩B≠且((A∩B)∩B≠)∨((A∩B)∩A≠)时,那么称交集A∩B中属于A∪B的数据为交叉读数据(Cross-ReadData,CRD).定义2(漏读数据).当A-((A∩B)-A)≠A或者B-((A∩B)-B)≠B时,那么称差集A-A或B-B中的数据为漏读数据.若企业上层应用直接使用原始读数,因为有大量漏读数据和CRD的存在,将会导致很多的错误甚至无法获取任何有用的信息.在原始读数和上层应用间存在明显的语义鸿沟.因为交叉读仲裁实际上就是CRD的仲裁,显然,CRD的仲裁和漏读数据的传递的过程.图2中显示,物理世界有两个分属于不同货架的、边界清晰的不相交非空实体子集A和B,二者形成一个实体全集U,U=A∪B,A≠,B≠,A∩B=.处于前端的两个读写器分别产生了由探测到的贴标物品的原始读数构成的观测子集A和B,二者形成一个新的观测全集U,U=A∪B.客观上,由于漏读等不可避免的原因,去除冗余后的观测全集U是实体全集U的子集,UU.但是,读写器0产生的原始读数构成的观测子集A并不是实体子集A的子集,因为在观测子集A中,有可能因为漏读而丢失货架0上物品的读数,同时也可能因为交叉读而冗余货架1上的物品读数,读写器1产生的观测子集B也是如此.下面先结合图2给出两个基本的定义.补充是保证上层应用功能正确性的两个必须解决的关键问题.本文设计了一个通用可扩展的弹性框架(即图2所示的中间件部分),可以通过对不可靠的原始读数进行清洗、仲裁以及聚集操作来弥补这个语义鸿沟.仲裁框架的输入是由RFID读写器读取贴标对象的标签数据形成的不可靠原始读数流.读数的基本形式是一个三元组:〈TID,RID,time〉[14],TID是标签ID,其表示要识别对象的标识,这个标识在全球是唯一的,且要遵循相关标准,如EPC编码或者泛在识别码(UCODE)等;RID是读写器的唯一标识,固定式读写器的RID在具体应用中也代表相Page5对逻辑位置,如某货架、或者某入库门等;time为读写器发现标签的时间.通过这种三元组的形式可以建立物理世界和逻辑世界的映射关系,但是基本形式的三元组无法提供能够仲裁CRD的足够信息,所以作为框架的输入,基本形式的三元组需要进行必要的扩展,4.1节详细描述了元组扩展的依据和格式.仲裁框架的输出是可靠的加工数据流.框架可以根据企业应用的具体需求从低层原始读数抽取有效的上层信息,如某物品是否在指定的货架上.框架不需要事先建立物品与货架的非持久隶属关系,只需要绑定读写器与货架的监控隶属关系,同时结合读写器上实时的读数就可以提供有效的上层信息.相对于物品与货架的临时隶属关系,读写器与货架的隶属关系比较持久,因此框架可以满足物品随意移动的现实需求,具有良好的弹性.框架力图准确地将物理世界的实体对象转换为信息环境下的虚拟对象.理想模型下,经过处理后的读数集和物品集之间应满足如下等价关系:A=A,B=B,U=U.仲裁处理框架主要处理步骤如下:(1)元组扩展.读数元组级别的低层加工,完成基本三元组〈TID,RID,time〉的属性位扩展,通过新增的RSSI属性位辅助CRD的仲裁.(2)读数平滑.利用RFID读数的时间相关性和场景特征,根据设定的时间粒度利用滑动窗口对漏读数据进行填补和估值,同时平滑噪声数据.(3)相对位置相似度计算.本文将标签距离不同读写器的相对位置关系称为相对位置相似度,距离近的相对位置相似度较高,反之较低.根据RFID读写器空间粒度的划分,计算CRD与同一空间粒度内多个读写器的相对位置相似度.(4)交叉读数据仲裁.比较CRD对同一空间粒度内多个读写器的相对位置相似度,利用最小化相对位置相似度的方法仲裁出CRD归属读写器的估计.经过上述处理后,基于此框架设计的分布式实时多RFID数据流仲裁系统,既可以通过读数平滑,利用冗余读数完成漏读数据的补充,即数据清洗后的融合;也可以通过位置相似度计算,利用冗余读数完成CRD的仲裁,即数据清洗后的分离,最后还可以通过聚集操作获取准确的诸如货架物品总数等统计信息.4交叉读仲裁引擎建模上一节从总体的层面上探讨了设计交叉读仲裁框架需要解决的主要问题,包括IO特点和主要处理步骤.本节详细介绍在设计读写器交叉读仲裁引擎中遇到的挑战以及解决方案.4.1元组扩展仲裁必须要考虑传感设备与物理世界的某种关联属性,例如ESP框架借助读取率进行仲裁处理.其假设依据是,离读写器较近的标签的读取率较高,但是这种假设并不完全合理.在实验测试中发现如下现象:在单读写器工作模式下,距离读写器不等的若干标签,在设定的时间间隔内,每个标签被读取的次数相对平均,归其原因在于,遵循Gen2协议标准的读写器在标签防碰撞算法改进后,均匀化了其探测范围内标签的读取次数;在多读写器工作模式下,标签读取次数与距离满足近似的反比关系,同时,位于交叉探测范围内的标签在多个读写器上拥有不同的读取次数,但因为读取次数与读写器天线的个体性能关系密切,且极易受环境的干扰,所以直接用来仲裁标签归属的效果不佳,6.3节给出了实验比较.为了实现CRD的仲裁,需要寻找更合理的传感设备与物理世界的关联属性.仲裁引擎引入RSSI属性来扩展基本三元组辅助CRD的仲裁.RSSI值是无线信号接收和测量的一种尺度,通过RSSI技术可以利用接收到的无线信号强弱测定信号点与接收点的距离,并根据相应数据进行定位计算.基于RSSI技术的RFID自动定位方案的原理在于:在自由空间中,无线信号发射端与接收端的几何距离与RSSI值有平方反比率的理论关系[15].所以根据位置已知的读写器和标签的RSSI值推测贴标对象的相对位置是一种理论可行的方案.图3显示了实际测试的几何距离和RSSI值的变化关系.实验中,分别在平行于探测区域中心以及垂直于探测区域中心两种典型位置拓扑下进行了几何距离和信号强度变化关系的测试.为消除统计误差,图3中每一位置点的RSSI值采样了40次,图中除了均值外还标注了样本空间中的最大值和最小值.实验结果表明,处于固定环境、固定位置的固定标签,其RSSI值不但具有较好的稳定性,且总体曲线基本吻合理论的无线信号传播模型.从图中同时也发现几何距离和信号强度的变化并不平滑,其原因归于在现实环境中,由于室内复杂的环境结构和随机移动对象等各种干扰因素的存在,无线信号会发生反射、折射、被吸收等现象,特别是在封闭空间中无线信号的多径效应尤为明显.所以理论的无线信Page6号传播模型难以完全准确地反映室内无线信号环境,再者由于存在不确定的突发干扰(如人的移动等),在不同时刻点,同一标签在同一位置的RSSI值都可能发生较大的波动.为解决环境对RSSI值的不确定干扰,提升RSSI值辅助仲裁的可靠性,仲裁引擎引入参考标签这一概念.参考标签是一种额外的固定标签,其在引擎中作为归属读写器已知的信号强度参考点.引擎引入参考标签的意义在于:(1)作为仲裁锚点的参考标签能较好地适配环境的动态变化,因为参考标签和待仲裁标签处于同质的环境空间中,引擎可以依据参考标签信号强度的变化动态适配环境的变化,减少环境对仲裁精度的干扰.(2)由于制造工艺的差异,同一仲裁空间中的读写器在读写性能上会有差异.通过在不同读写器的周围设置位置拓扑一致的参考标签,则可以凭参考标签上的信号强度作为不同读写器的RSSI值测试基准,从而消除设备个体性能差异给仲裁带来的系统误差.因此,总体来说RSSI值是一个可以用来定性的指标,可将其引入作为基本元组的扩展位,表示标签相对于读写器位置的指征.下面给出扩展元组的定义.定义3(仲裁信息元组).扩展了RSSI属性位的标签读数四元组〈TID,RID,time,RSSI〉称为仲裁信息元组,其表示读写器RID在时刻time观测到对象TID,且time时刻TID对象所处位置的接受信号强度指示为RSSI.下文部分章节为叙述方便也使用简写的格式〈T,R,t,RSSI〉.对于新增的元组属性RSSI,目前所有主流的RFID读写器生产厂商都可以直接通过读写器提供RSSI值,即使没有直接提供的产品也可以通过诸如能量级别调整[10]的间接办法获取和RSSI值同等性质的信息.4.2读数平滑瞬时的仲裁信息元组〈TID,RID,time,RSSI〉作为输入不断地从多个读写器推送到仲裁引擎中,元组以大量、快速、时变的数据流形式连续到达.考虑到元组本身具有时效性,但是漏读现象的存在会导致元组不完全连续,如果以单时刻点的快照方式直接使用time属性相同的若干仲裁信息元组进行仲裁,很可能因为在time时刻,由于读写器漏读了某个标签而无法获取和此标签相关的仲裁信息元组,或者某一时刻点出现突发的随机噪声,从而导致仲裁精度受到较大影响.滑动窗口机制则可以有效地缓和漏读的影响,同时可以平滑传感数据的噪声.借助滑动窗口机制清洗仲裁信息元组时,需要考虑以下几个问题:(1)滑动窗口主要分为两种类型[16]:基于元组个数定义的滑动窗口和基于时间粒度定义的滑动窗口,前者在窗口内保存最近到来的k个元组数据(假设窗口的大小等于k),后者存储最近时间内到达且元组间满足now-timew的元组数据(假设w是窗口的大小,now是窗口终了时间).在本研究场景下,多个读写器同时工作时,不同标签在同一读写器上产生读数的速率是不相等的,如果选择一个基于元组个数定义的滑动窗口,将其用于由多个读写器产生的不同数据流上时,会发生以下问题:假设存在读写器RIDi和RIDj以及处于交叉探测区域的标签TIDk,假设TIDk在RIDi上的读数产生速率是1个/s,TIDk在RIDj上的读数产生速率是10个/s,如果设定窗口的大小是20,那么窗口内用于仲裁的TIDk元组数据,部分是标签TIDk在RIDi上20s的客观反映,部分是标签TIDk在RIDj上2s的客观反映,这是不对称的比较空间.若系统中对象还存在位移,则会导致更大的实时仲裁误差.所以本系统选择基于时间粒度定义的滑动窗口,引入下面定义.Page7定义4(仲裁滑动窗口).用于平滑和过滤处于相同位置的同一个(批)标签在指定的时隙内同时被至少两个以上(含两个)读写器检测到的仲裁信息元组的滑动窗口称为仲裁滑动窗口,该时隙即为窗口的大小W1,且窗口大小W1可以根据应用的不同进行调整.(2)单个读写器上产生的元组流的时间基准是一致的(都基于此读写器的系统时钟),但是,当来自多个读写器的一组分布流汇集产生组合元组流时,就会产生时间基准不一致的问题.对于采用以时间为单位的滑动窗口机制的引擎而言,此问题会带来系统误差,所以必须先同步系统中所有读写器节点的时间.引擎采用标准的网络时间协议(NetworkTimeProtocol,NTP),通过它使网络中的所有读写器节点维持时间同步,消除系统误差.(3)因为组合元组流中各读写器的元组进入仲裁系统的时间无法保证有序,所以不能直接在组合元组流上使用滑动窗口,为解决这个问题我们设计了一种高效的数据结构.系统先将组合元组流以TID属性为关键字建立Hash索引,索引中的节点称为标签分组(TagGrouping,TG),节点中包含TID属性相等的所有仲裁信息元组.因为TG中的元组可能来自于不同的读写器,所以继续以RID属性为关键字建立二级索引,二级索引中每个节点的内容是来自于一个读写器上的、某个按时间顺序排列的元组队列(TupleQueue,TQ).随着不断到来的元组,该结构可以被增量维护,引擎将内存中的整个结构称为标签列表(TagList,TL).经过网络传输后,仲裁系统接收到的来源于单个读写器的元组流是基本有序(almost-sorted)的,所以不需要考虑乱序问题可以直接将新来的元组插入到TQ末尾,即使存在局部的扰动,也只需要很小的缓存,就可以将乱序的元组修正.外层的多级索引保证了查找操作的性能,内层的TQ保证了以时间为序的频繁插入删除操作的性能.滑动窗口机制则可以同时在多个时间有序的TQ上实现漏读元组数据的补充.(4)一般情况下,数据流可被视为一个随时间延续而无限增长的动态数据集合,但是系统仅有有限的内存空间,这种矛盾使得数据流无法完整地保存在内存中,所以引擎不但需要一个能被增量维护的数据结构,也需要该数据结构能被递减维护以保持引擎合理的内存占用量.因为仲裁信息元组的时间关联性,对即时查询而言,相比近期数据早期数据的存在意义不大.引擎引入用于过滤存储结构中过期数据的、基于时间粒度定义的过期滑动窗口,窗口大小为W2,过滤后的历史数据可以存入后台数据库.TG作为临界资源,由仲裁滑动窗口和过期滑动窗口互斥访问.(5)滑动窗口机制可以填补漏读的仲裁信息元组,但是还有一个很重要的未决问题:如何确定漏读的仲裁信息元组的RSSI值的大小,该问题在第5节中展开介绍.4.3相对位置相似度计算引擎最终的目的是根据位置已知的读写器、归属已知的参考标签以及处于交叉探测区域的待仲裁标签的RSSI值去推测贴标对象的归属读写器.所以,引擎需要有一种比较手段根据RSSI值来确定标签离哪个读写器的位置关系更近,欧式距离在相似度测量中有着重要的作用.如何定义信号强度的欧式距离是进行相对位置相似度计算的关键,下面给出形式化的定义:假设有n个读写器,n×m个固定的归属已知的参考标签,s个待仲裁的标签,其中,每个读写器包含m个在其探测区域内可以被感知的位置确定的参考标签.首先,定义归属于读写器j的参考标签k在读写器j上的信号强度为Vjk,j∈(1,n),k∈(1,m);再者,定义待仲裁的标签i在读写器j上的信号强度为Uij,i∈(1,s),j∈(1,n);最后,引入基于信号强度的欧氏距离作为待仲裁标签和归属读写器位置相似度的关系表征.定义待仲裁标签i在读写器j上的信号强度与读写器j的m个参考标签的信号强度的欧氏距离为Eij=∑mE值越小的读写器j作为待定位归属标签i的归属读写器的可能性越大.类似的马氏距离等也可以用来表征这种归属可能性的关系,但是通过实验验证,使用马氏距离对于实验结果没有实质性的改变.Page8计算欧氏距离时,归属于读写器j的m个参考标签形成一个m维的信号强度向量犞j=(Vj1,Vj2,…,Vjm).同时考量多个参考标签的信号强度值,既防止了单点失效的风险也起到了平滑环境噪声的作用.待仲裁的标签i在读写器j上的信号强度为Uij并不是信号强度的瞬时值.因为RSSI值是环境敏感的[17],使用瞬时信号强度会引入突发的噪声.为消减某一点某一时刻RSSI值可能的突发噪声,前文提及在读写器j对应的TQ上使用仲裁滑动窗口,由于采用基于时间粒度定义的滑动窗口,窗口W1内不同仲裁对象的仲裁信息元组个数不均匀的问题不可避免,系统使用统计信息完成可比较窗口的读数一致化处理.计算时将窗口内的若干仲裁信息元组中的RSSI值作为总体服从正态分布N(μ,σ2)的样本空间,其中未知参数μ和σ2,将μ的最大似然估计定义为仲裁滑动窗口中该标签的信号强度Uij.因为对于静止或非高速连续移动物体,其在仲裁滑动窗口内空间位移量很少,理论上窗口中的若干个RSSI值的变化也较小,所以μ的最大似然估计可以较好地减弱RSSI值的噪声.同时为了方便计算欧氏距离,需要将待仲裁的标签i的信号强度Uij进行等值m维扩展,形成针对读写器j的信号强度向量.因此标签与读写器相对位置特征的相似程度可以用信号强度构成的特征向量的空间距离来表示.4.4仲裁输出若存在一组仲裁信息元组引擎判断元组是否需要被仲裁输出的条件是:〈Ti,Ri,ti,RSSIi〉和〈Tj,Rj,tj,RSSIj〉,其满足条件:(Ti=Tj)∧(Ri≠Rj)∧(ti=tj∨|ti-tj|W1)时,表明该组数据需要被仲裁处理.算法1.CRD检测及归属读写器仲裁算法.输入:扩展的仲裁信息元组流,仲裁滑动窗口大小,过输出:归属读写器1.读取配置文件绑定参考标签和读写器的归属关系,2.从读写器不间断推送的RFID数据流中实时更新TL;3.检测TL中是否存在参考标签以外的待仲裁标签,创建初始的TL;如果没有则转向步8;如果存在待仲裁标签则转向步4;4.根据设定的仲裁滑动窗口检测TG中的TQ,判断窗口中的元组是否满足被仲裁输出的条件.若不满足条件则转向步2;若满足条件则转向步5;5.分别计算仲裁滑动窗口W1内,待仲裁标签i相对已监测到该标签的读写器j的信号强度Uij;6.分别计算仲裁滑动窗口W1内,归属于读写器j的m个参考标签的信号强度向量犞j;7.计算待仲裁标签i相对于读写器j的m个参考标签的信号强度向量的欧氏距离.利用最小化相对位置相似度的方法仲裁出CRD归属读写器的估计;8.使用过期滑动窗口过滤TL中过期的仲裁信息元组.如果TQ中存在元组数据则根据窗口的大小调整TQ中的元组数据,当TQ中无内容时则删除该TQ,进而如果TG中没有TQ时则删除该TG.返回步2.本算法是集中控制式算法,算法在中央服务器节点或者中间件上执行,不占用读写器的扫描时间,不增加读写器的额外的工作负载以及读写器网络的数据流量.RFID系统动态产生的仲裁信息元组是贴标对象状态变化的时空连续观测数据,这些数据不仅包含直接的观察时刻值还包括潜在的对象位置信息.读写器交叉读仲裁引擎通过使用仲裁滑动窗口,在以仲裁信息元组为单位的数据流中不断过滤出交叉数据,并根据上述算法仲裁出仲裁滑动窗口内CRD的归属读写器,同时完成了冗余数据的融合和分离.仲裁引擎不但可以支持交互式仲裁,也可以通过连续滑动的时间窗口完成实时仲裁.所以该仲裁引擎不但可以消除网络上的大量冗余的RFID数据并可以提供准确的归属读写器信息,系统还可以进一步支持诸如错放商品警告、缺货警报等上层应用的功能需求.5基于机动目标的RSSI自适应估计策略通过仲裁滑动窗口可以在元组队列上填补部分漏读的元组数据,填补时元组〈TID,RID,time,RSSI〉的所有属性都需要量化.在一个TQ上,显然所有的仲裁信息元组的TID属性和RID属性都是确定的,且元组队列同一窗口中所有元组的time属性也必然满足now-timeW1的约束.余下需要考虑的是如何量化RSSI扩展属性的值.结合场景分析易知,读写器和参考标签是位置固定的,待仲裁标签根据场景的不同主要呈现两种状态:强静止弱运动、弱静止强运动.前一种状态主要针对诸如仓库货架上的物品或者图书馆书架上的物品而言,此类物品在一定时间内基本保持静止状态,偶尔会因为重排、移架等操作而发生位置迁移;后一种状态主要针对诸如入库或者自动结账场景中Page9的物品而言,此类物品在整个处理流程中基本保持连续运动,在关键位置点(如结账入口、库门等处)短暂停留静止.本文将场景中的待仲裁对象视为机动目标和非机动目标,分别建立了不同的RSSI值的估计策略.对于强静止弱运动的对象,其基本属于非机动目标,在仲裁滑动窗口内,多呈现静止状态,对于此类情形,在不失合理性(一定时间内固定环境固定位置的RSSI值是稳定的)的情况下,同时为了减少系统的计算代价,我们简单使用窗口中所有已知元组的RSSI值的均值作为填充漏读元组的RSSI值.对于弱静止强运动的对象,其虽然是运动对象,但由于场景内运动多呈现非高速方式,所以属于机动目标中的弱机动类型.在仲裁滑动窗口内,可将对象的运动近似为匀速运动,所以可以采用线性插值的方法,通过以下的公式计算填补漏读元组的RSSI值:已知窗口内的元组按时间有序,其中,Sa代表窗口内填补的漏读数据前一个已知元组的RSSI值;Sb代表窗口内填补的漏读数据后一个已知元组的RSSI值;n代表窗口内两个已知元组间填补的漏读元组的个数;Si代表第i个需要被估值的漏读元组的RSSI值.通过分析窗口中的元组的RSSI值的统计特征,可以实现插值策略的自适应.将窗口中的所有的元组RSSI值视为总体S的一组样本(S1,S2,…,Sn),分别计算样本均值珚S和样本方差S2n.对于强静止弱运动的对象其样本方差显然较小,而弱静止强运动对图5实验室和基准测试场景部署图6.2实验评估标准实验采用监测对象平均相对错误率作为评估交叉读仲裁算法有效性即仲裁准确度的评价指标,该指标的评价对象是产生交叉读的读写器组,而不针对单独的读写器.其定义如下:象的样本方差显然较大.可以通过先验信息给出一个界定状态的阈值(阈值可以通过测试若干静止标签来确定),如果样本方差小于该阈值则表明对象处于强静止弱运动状态,反之大于该阈值则处于弱静止强运动状态,根据判断状态的不同可以实现插值策略的自适应.6实验设计与评估本节先描述基准测试场景,然后设定实验评估标准,最后通过分析实验结果说明仲裁引擎和算法的有效性.实验采用Alien的支持EPCGen2密集读写器规范的ALR-9900读写器和Squiggle嵌体ALN-9540被动式电子标签作为实验的基础设备[18].原型系统使用C#语言和AlienRFIDReaderDevelopersKit实现.6.1实验场景设计实验设计并部署了一系列的应用场景进行算法的有效性评估,限于篇幅图5仅给出作为基准测试场景的部署图.如图5所示,场景中部署了两个具有交叉探测区域的相邻的读写器1和读写器2,每一个读写器负责实时监控某一货架上的标签.同时,场景中设置了24个分属于不同货架的待仲裁标签以及8个分属于不同读写器的参考标签.图中将两个读写器的联合探测区域划分为3个相互独立的子区域:A区、B区和C区.其中,A区和B区中的标签不在交叉探测范围内,不存在交叉读仲裁问题;C区是交叉探测区域,该区域内的标签会同时被多个读写器读取,需要依赖交叉读仲裁给出正确的归属判断.其中,N为需要进行CRD处理的同一粒度空间内读写器的总数(N2至少需要两个读写器);Page10效地规避统计错误;经过交叉读仲裁后)监测到的贴标物品个数;M为实验评估的总次数,多次重复试验可以有Rij为第i个读写器在第j次评估中实际(或者Tij为第i个读写器在第j次评估中应该监测的贴标物品的个数(该值在场景确定后是固定值).6.3实验结果及分析为测试本文仲裁方法的有效性和准确性,实验在图1所示的3种典型应用环境中,分别对未经仲裁处理的原始数据、经ESP框架仲裁处理的数据以及经本文的仲裁方法处理的数据,进行平均相对错误率的比较与分析.实验默认仲裁滑动窗口大小图63种典型交叉读场景下的实验结果如前文所述,相对于RSSI值,读取率是一个间接的衡量指标,其不但与读写器内部防碰撞算法的具体实现相关,而且还不可避免地受天线性能的个体差异影响.实验前,我们已经遴选了差异最小的一组天线参与测试以期最小化硬件差异带来的系统误差.但是,对于无线传感设备而言,其易受环境干扰且现实环境中的干扰无法避免,如图6(a)所示,基于读取率的ESP-Arbitrate方法存在明显的波动性,且在总体趋势上其错误率随着交叉读写区域内标签数量的增加而有明显的上升趋势.相比之下,因引入参考标签,本文提出的R&R-Arbitrate仲裁方法能动态适配环境的变化,使仲裁方法具有较好的鲁棒性和稳定性.另外,如图中所示,当交叉区域内标签个数为8和9时,监测的平均错误指标发生了显著变化.原因在于当进行交叉区域标签个数为8和9的实验时,我们特意在两个货架的中间(即图5中包含在C区中的混淆区域ObscureZone)摆放了两个标签.此区域内的标签,其相对于两个读写器的RSSI值差异不明显,反映在欧氏距离上也基本一致,所以实验结果会随着RSSI值的波动具有很大的不确定性,从而产生显著的指标变化,读取率也有类似的现象.W1=4s,实验次数M=50.首先,实验在图5所示的基准测试场景(即图1中的典型场景2)进行算法的有效性评估.在标签总数不变的前提下,实验中通过改变两个货架上处于交叉探测区域(C区)的标签的个数,得到如图6(a)的测试结果.从实验结果可知,标签在货架上的摆放区域对未经交叉读仲裁处理(NO-Arbitrate)的数据分析结果有显著影响,但经过交叉读仲裁处理后,实验结果与标签在货架上的摆放区域的相关性显著降低.同时,实验表明本文提出的基于RSSI和参考标签的仲裁方法R&R-Arbitrate在平均错误指标和鲁棒性上都优于ESP框架中基于读取率的仲裁方法ESP-Arbitrate.但是,混淆区域其位置本身就具有归属模糊性,即处于该区域的标签归属本身就是不明确的,所以自然无法进行准确的仲裁.在实际商业应用中,监控区域一般都有明确的边界,混淆区域多作为过道或者空间间隔出现,实际应用中也不存在需要仲裁的对象.实验对其它两种典型场景也进行了测试.对于图1中的场景1,实验采用的是两个读写器,8个参考标签,设置了两组同时分别通过两个模拟仓储库门的运动标签,每组包含4个待仲裁标签.分别以不同的运动速度,通过测试得到如图6(b)所示的结果.结果表明当标签运动速度较快时,仲裁处理后的平均错误率显著上升.其原因在于对于快速移动的标签,仲裁滑动窗口内读写器采集的读数较少,因此单位窗口内不同读写器中同一标签的读取次数差异不足以显著区分读写器的归属,加之运动标签可能引入更多的干扰,所以ESP-Arbitrate方法的效果并不理想.同时,对于R&R-Arbitrate方法,当标签读数较少时,较多的RSSI值依赖估计推导获取,导致累计统计误差不断增大平均错误率不断上升.此外,NO-Arbitrate方法的错误率之所以会随着标签移动速度的增加而有所下降,其实质原因是由于漏Page11读数据的增多.实际应用中可以让运动标签在通过关键位置时短暂停留缓解这种问题,在诸如自动结账的应用场景中,一般在关键位置点对象也是会短暂停留.此外需要说明的是,因为天线的朝向,理论上读写器2不会探测由库门1经过的标签,但是在实验中因各种干扰的存在,其在读写过程中也能偶尔感知到部分经由库门1的标签,所以导致实验测试的平均错误率高于理论的预估.对于图1中的场景3,实验采用的是两个读写器,8个参考标签,两个货架上对称地摆放等量的待仲裁标签,实验时,将标签总数从18逐步增至40.图6(c)所示的实验结果表明,经仲裁处理后的错误率会随着标签数量的增多而升高,其原因在于,此场景下所有标签都处于交叉探测区域,因此读写器可同时识别的标签数成倍增加.此场景中,因为完全相对的天线会产生明显的信号互干扰,加之需同时识别的标签数量较多,单位窗口内平均每个标签的读取次数都比较少,因此ESP-Arbitrate方法的效果不佳.本文提出的R&R-Arbitrate方法的效果最好,但是漏读的可能性会随着待识别标签数量的增多而增大,因此,部分无法利用仲裁滑动窗口填补的漏读数据导致错误率随标签数量增多而逐渐升高.实验中可以通过增大仲裁滑动窗口的大小来缓解漏读问题,但这种策略在保证标签读数完整性需求的同时却降低了实时性,在6.3.2节中我们进行更详细的讨论.所以仲裁滑动窗口机制可以有效地缓解漏读但无法完全消除漏读带来的影响.这组实验结果都得到了类似的结论,实验证明了R&R-Arbitrate仲裁算法对处于交叉区域的对象可以准确地进行仲裁,显著地降低了平均相对错误率,如12个交叉标签的基准测试场景中,平均相对错误率从0.488显著下降到0.024.同时算法具有与待仲裁标签位置无关的特性,完全适用于3种不同的典型场景,该仲裁算法使原型系统具有很好的通用性和鲁棒性.以下是关于调整关键参数后对实验影响的一组测试结果,如无特别说明,以下测试都在基准测试场景中测试完成(其中交叉探测区内存在8个标签).6.3.1参考标签个数的影响作为仲裁锚点的参考标签的作用在于:动态的适配环境的变化,减少环境对仲裁精度的干扰;平抑读写器的工作性能差异,消减系统误差对于仲裁精度的干扰.因此,参考标签的性能和个数对实验结果有显著的影响.首先,作为RSSI参考指标基准的参考标签本身的工作性能必须一致,实验中必须先筛选出工作性能一致的若干标签作为参考标签.成为参考标签需要满足的基本条件是:在同一环境下同一位置处相对于同一读写器的RSSI值具有基本相同的数学期望和小于指定阈值的方差.从实验测试的情况来看,以目前的制造工艺而言,确实存在工作性能不稳定的标签,这些标签大概占到我们测试标签总数的8%左右,所以实验前遴选工作性能一致的参考标签是非常有必要的.其次,在参考标签遴选后,需要考察参考标签的个数对实验结果的影响,实验中逐步改变参考标签的个数得到图7所示的实验结果.实验结果表明,当参考标签达到4个时已经获得较好的效果,引入更多的参考标签无法再显著降低相对错误率,而且过多的参考标签也会增加处理开销.多个参考标签可以有效地消除单点故障和统计误差,实验中注意保持不同读写器和其参考标签的位置拓扑的完全一致性.6.3.2仲裁滑动窗口大小的影响实验的结果主要取决于基于信号强度的欧氏距离的比较,而欧氏距离的计算结果又取决于信号强度的稳定性.本文之前提到,RSSI值是环境敏感的,为消减某一位置某一时刻RSSI值可能的噪声,将仲裁滑动窗口中采集的若干仲裁信息元组的RSSI值作为样本空间,并且将总体服从正态分布的未知参数μ的最大似然估计定义为仲裁滑动窗口中该标签的信号强度.因此估计值的准确程度与样本空间中样本的个数有关.实验中,从1s~8s逐步调整仲裁滑动窗口的大小来进行测试.如图7所示,前1s~4s随着窗口的增大有效地增加了样本空间中的样本个数,标签读数在完整性上有很好的保证,所以平均相对错误率随之下降.但Page12如结果所示,当窗口大小增长到5s~8s后,平均相对错误率反而有所上升,原因在于实验中,在图5所示的传送带上引入了两个移动的标签作为运动对象.随着滑动窗口的增大,单窗口内的读数是运行标签在多个不同位置上的反馈,因此导致平均相对错误率也随之上升.实验表明,增加滑动窗口的大小确实可以有效地提高仲裁的准确度,但是对于例如入库、结账等对实时性要求较高的运动场景,过大的窗口反而会导致仲裁准确度的下降.所以选择一个时间和性能均衡的点非常重要,这个平衡点可以根据具体的应用场景进行动态调整.图83~4个读写器构成的复杂交叉探测区域示意图及实验结果由图8(c)的实验结果可知,当更多的读写器加入后,平均相对错误率呈上升趋势.原因在于多个彼此距离较近的读写器同时全功率运作时,特别是在交叉探测区域内,标签的信号弱在读写器的发射信号中,在仲裁滑动窗口内标签被漏读的可能性随之增大.实验中发现,即使设置较大的窗口也可能无法填补某些漏读数据,所以最终导致了仲裁准确性的下降.大量文献在多读写器防碰撞的研究上也提到了很多方法,但是这部分研究已经超出了本文的探讨范围.随着读写器本身性能的提升和协议的完善,该问题会逐渐弱化.此外,由于被动式标签和读写器的工作距离有限,所以,加入更多读写器后,由于探测距离的限制,很难再出现更多稳定的交叉探测区域,因此,实验最多设计了4个读写器交叉的测试场景.7总结与展望本文针对RFID流数据中的交叉读仲裁问题提出了一种高效、可扩展的实时仲裁框架,并依据此框架设计了仲裁引擎,引擎以扩展了RSSI属性的仲裁信息元组为基础、高效的组合流存储结构为保证、仲裁滑动窗口的平滑处理为核心,辅以参考标签,使用最小相对位置相似度的仲裁标准推导出位于交叉6.3.3读写器个数的影响随着RFID系统应用规模的扩大,系统中读写器数量也会同步增加.随着相互邻近的读写器数量的增多,可能出现的交叉区域也变得更加复杂.图8(a)中A、E、F区域是非交叉区域,B、C、G区域是两个读写器交叉区域,D区域是3个读写器交叉区域;图8(b)中A、B、K、L区域是非交叉区域,C、G、H、M区域是两个读写器交叉区域,D、E、I,J是3个读写器交叉区域,F是4个读写器交叉区域.实验中,分别在这些区域随机摆放若干标签进行几组实验测定.探测区域中的标签的归属读写器.通过抽象典型的交叉读场景并依据此场景进行实验设计,相关实验结果表明仲裁算法在不增加即有读写器网络系统负载的前提下很好地解决了交叉读仲裁的问题.仲裁滑动窗口的大小直接影响CRD仲裁的准确度,如何设计更具弹性的兼容运动对象和静止对象的自适应的窗口调整方法是未来研究的挑战.此外,本文着重于布局规则的实验场景设计及相关算法验证,对于某些非规则布局的应用场景,如何抽象场景合并多个读写器的监控视图并解决交叉读问题还有待于进一步研究.
