Page1一致闭的禁忌交互集生成算法1)(东南大学数学系南京210096)2)(南京大学软件新技术国家重点实验室南京210093)3)(南京大学计算机科学与技术系南京210093)4)(南京航空航天大学信息科学与技术学院南京210016)摘要组合测试是侦测软件系统中各因素或配置之间是否有交互作用导致软件系统故障的重要方法,当因素之间的取值组合出现约束时如何生成尽可能少的测试用例是组合测试中的热点问题之一.该文研究了约束出现时由约束导致的禁忌交互集的结构形式,提出了包括所有的显性与隐含极小禁忌交互的一致闭的禁忌交互集的概念,对一般的禁忌交互集,提出了生成一致闭的禁忌交互集的算法,分析了算法的性能,然后对一致闭的禁忌交互集提出了生成禁忌覆盖表的类AETG算法.对Cohen等人提出的5个实际的测试场景以及30个人工合成的场景,实验表明生成的一致闭的禁忌交互集的规模是在可接受的范围内,生成的测试用例集规模与Cohen等人实验的结果是相当的.最后通过随机实验研究了影响禁忌交互集与其一致闭的禁忌交互集的规模比值的因素.关键词组合测试;约束条件;禁忌覆盖表;禁忌交互;一致闭禁忌交互集;类AETG算法1引言测试是软件或硬件开发过程中一个重要并且昂贵的环节.组合测试是侦测软件系统中各个因素或配置之间是否有交互作用导致软件系统故障的重要方法,该方法用尽可能少的测试用例来检测系统两个因素之间或t个因素之间是否有交互作用导致系统故障.检测任意两个因素之间所有的可能取值组合称为两两组合覆盖,任意t个因素之间所有的可能取值组合称为t维组合覆盖,t称为覆盖强度.Kuhn等人[1]的研究表明测试两两组合覆盖发现大约70%的错误,三维组合覆盖能发现大约90%的错误.人们应用组合测试策略进行软件测试已有很长时间,最早组合测试是应用正交拉丁方和正交实验设计来对软件进行测试[2-3].在组合测试的应用中,如何生成尽可能少的组合测试用例集是当前研究的热点问题之一,除了一些特殊的情形,一般生成达到覆盖要求的最优测试用例集是NP完全问题.人们通过数学构造,贪心算法以及智能搜索方法来生成尽可能小的测试用例集[4-13].然而在实践中软件系统的因素取值之间有很多约束,这些约束导致有些因素的某些取值不能同时出现,若同时出现在某个测试用例中,运行这个测试用例一定会导致软件系统故障,而在前述方法中很少有人讨论在有许多约束出现时的处理策略.而是否存在一条测试用例满足给定的约束已被Bryce和Colbourn证明是一NP-hard问题[14].Cohen等人[15-16]认真分析了当前一些生成组合测试用例集的工具中处理约束的情况,并得出结论:在实际测试场景中,约束对生成组合测试用例集会产生重要影响,在测试用例集生成算法中必须充分考虑相关约束.他们把SAT工具集成到AETG算法中,把组合测试问题编码成SAT问题,在每次选择下一个因素的一个取值时,把已生成的部分测试用例调用SAT解法器做一致性检查,看看是否能扩充成一个完全的测试用例[16].后来Cohen等人[17]又把SAT工具集成到模拟退火算法中来对约束的组合测试集生成问题求解,取得了比较好的结果.Danziger等人[18]在二维情形下对生成禁忌覆盖表的复杂性问题进行了研究,得到最优的禁忌覆盖表的行数等于相应的图的最小边团覆盖数的结论.本文研究了带约束的组合测试用例集生成问题,首先讨论了带禁忌交互的组合测试模型,然后对约束导致的禁忌交互集的内部结构进行了研究,提出了一致闭的禁忌交互集的概念,得到了判断禁忌交互集是一致闭的禁忌交互集的充分条件,在此基础上提出了一种将一般的禁忌交互集扩充成一致闭的禁忌交互集的算法,并分析了算法的性能,随后针对一致闭的禁忌交互集设计了生成禁忌覆盖表的类AETG算法.对于Cohen等人[16]提出的5个实际测试场景以及30个人工合成场景,通过实验表明其禁忌交互集扩充成一致闭禁忌交互集的规模在可接受范围内,从而可用一致闭的禁忌交互集来引导和生成组合测试用例集,生成的满足约束的覆盖表的规模与Cohen等人的实验相当.为了进一步研究禁忌交互集与其一致闭的禁忌交互集的规模比值与哪些因素有关,设计了一些随机实验进行了研究.最后总结了全文并提出未来可进行研究的工作.2相关研究以及带禁忌交互的组合测试模型为了研究带禁忌边的组合测试的生成技术,我们先给出一些记号和形式化定义.假设影响待测系统(SoftwareUnderTest,SUT)的因素共有k个,因素i有vi(1ik)个可能的取值,用0,1,…,vi-1表示,并用记号[0,vi-1]表示取值域{0,1,…,vi-1}.称犞=(v1,v2,…,vk)为待测系统的因素可取值向量.定义1.设k维向量犜=(T1,T2,…,Tk),其中Ti∈[0,vi-1],i=1,2,…,k,则称这个k维向量犜为第i个因素取值为Ti的测试用例.定义2.任取t个因素,设集合I={(i1,ai1(i2,ai2j-1](j=1,2,…,t),则称这个集合I为一个t[0,vi维交互.称集合fI={i1,i2,…,it}为交互I对应的因素集,一维交互{(i1,ai1(i1,ai1定义3.设一条测试用例T的第ij个因素取值是ai用例T覆盖了t维交互I={(i1,ai1(it,ait)}.这样,一条测试用例覆盖了()k为了生成组合测试用例集,我们定义覆盖表如下.定义4.如果A是一个n×k表,表中第i列元素都取自[0,vi-1],且满足:每个可能的t维交互都被表中某一行所对应的测试用例所覆盖,即对Page3任意的{(i1,ai1行r,使得A[r,ij]=ait维混合覆盖表,记为MCA(n;t,(v1,v2,…,vk)),t称为覆盖表的强度.给定t和v1,v2,…,vk,称使得MCA(n;t,(v1,v2,…,vk))存在的最小的数n为混合覆盖表数,记为MCAN(t,(v1,v2,…,vk)),当定义中的v1=v2=…=vk=v时,我们简记为CA(n;t,k,v)和CAN(t,k,v).在不引起混淆的情况下覆盖表或混合覆盖表统称为覆盖表.一般人们用覆盖表或混合覆盖表来产生测试用例集,表中每列对应一个因素,k表示待测系统的因素数目,vi表示每个因素可能取的取值个数,每一行表示一个测试用例,t维覆盖表产生的测试用例集能覆盖到任意t个因素所有可能的取值组合,二维覆盖表产生的测试用例集称为两两组合测试用例集,人们希望在不降低测试标准的情况下来产生尽可能少的测试用例.然而,有些测试场景中,有些因素的某些取值组合存在约束,例如1个移动电话系统有5个因素,显示因素有3个取值,0表示16M彩显,1表示8M彩显,2表示黑白.短信息因素中0表示支持彩信,1表示只支持文本短信,2表示不支持短信息[16].其他因素的相应取值由表1所示.显示0=16M彩显1=8M彩显2=黑白为了检测有哪些交互可能对系统的运行产生影响,在不考虑约束时我们可构造二维覆盖表来测试系统,如表2所示.表2移动电话系统的无约束两两组合测试用例集测试用例123456789然而,表1移动电话系统中并不是所有因素的所有可能的取值组合都是有效的,有些因素的某些取值组合是无效的,例如有如表3所示的一些约束以及由这些约束导致的无效交互.(1)彩信支持需要彩显支持(2)2兆像素照相机需要彩显支持(3)彩信不支持2兆像素的照相机(4)8M彩显不支持2兆像素的照相机(5)视频录像需要照相机和彩显(6)不支持视频录像则不支持视频铃声(7)不支持组合16M彩显,文本短信和2兆像素所以一条测试用例中不能包含由这些约束导致的这些无效的交互,我们称这些由约束导致的无效的交互为禁忌交互或禁忌边.定义5.设I是一个t维交互,如果任何一条覆盖I的测试用例都会导致系统故障或失效,则称交互I是一个禁忌交互或禁忌边.我们在生成覆盖表时,必须考虑约束,有时在系统中有很少的约束可能导致生成的覆盖表中有很多行覆盖了禁忌交互.Cohen等人[16]研究了5个实际的测试场景与30个人工构造的场景,如果不考虑约束用AETG算法来生成覆盖表,平均有96%的行违反了约束,即至少覆盖了一个禁忌交互.甚至有时约束会导致没有任何能够满足这些约束的测试用例.假设在某个测试场景下,由外在约束导致某些交互是无效交互,我们称这些无效交互为显性禁忌交互,所有的显性禁忌交互构成的集合记为Π,而由这些显性交互可以推导出来有些交互也是禁忌交互,若测试用例包含这些交互的某一个,则必定至少包含一个显性禁忌交互,称这些交互为显性交互集Π推导出的隐含禁忌交互,简称隐含禁忌交互.假设某个s维交互是禁忌交互,则任何包含这个s维交互的交互都是禁忌交互,为此,我们称一个禁忌交互是极小禁忌交互,若其所有的真子集都不再是禁忌交互.定义6.设显性禁忌交互集为Π,称在Π的所有显性禁忌交互与隐含禁忌交互构成的集合中去掉非极小禁忌交互得到的交互集合为Π的一致闭禁忌交互集,记为Π.定义7.若一个显性禁忌交互集Π本身是一致闭禁忌交互集,即Π=Π,则称禁忌交互集Π是一致闭的.例如,对上述的移动电话系统,由约束导致的显性禁忌交互集为Page4Π={{(1,2),(2,0)},{(1,2),(3,0)},{(2,0),(3,0)},{(1,1),(3,0)},{(3,2),(4,0)},{(1,2),(4,0)},{(4,1),(5,0)},{(1,0),(2,1),(3,0)}}.由这些交互可得到交互{{(2,1),(3,0)},{(2,1),(3,0),(4,0)},{(1,2),(5,0)},{(3,2),(5,0)}}是隐含禁忌交互,例如交互{(2,1),(3,0)},它不能扩充成一个满足这些约束的测试用例,因为对第1个因素没有办法赋值,若第1个因素赋值为0,则覆盖了禁忌交互{(1,0),(2,1),(3,0)},若赋值为1,则覆盖了禁忌交互{(1,1),(3,0)},若赋值为2,则覆盖了禁忌交互{(1,2),(3,0)}.然而隐含禁忌交互{(2,1),(3,0)}导致了交互{(1,0),(2,1),(3,0)},{(2,1),(3,0),(4,0)}不再是极小禁忌交互,所以在前述的显性及隐含禁忌交互中把{(1,0),(2,1),(3,0)},{(2,1),(3,0),(4,0)}删除得到如下一致闭禁忌交互集,其中共10个禁忌交互:Π={{(1,2),(2,0)},{(1,2),(3,0)},{(2,0),(3,0)},{(1,1),(3,0)},{(3,2),(4,0)},{(1,2),(4,0)},{(4,1),(5,0)},{(2,1),(3,0)},{(1,2),(5,0)},{(3,2),(5,0)}}.一个待测系统中,如何由显性的禁忌交互集生成其一致闭的禁忌交互集,其一致闭的禁忌交互集规模有多大?Cohen等人研究了35个测试场景,共有840个显性二维禁忌交互,导致了24247个隐含的二维禁忌交互[16].他们讨论的主要是隐含的二维禁忌交互.而不是讨论极小禁忌交互,我们研究表明,这35个测试场景中,共有981个显性交互,导致了1897个极小的禁忌交互,大致是显性交互的2倍,其中有111个一维隐含禁忌交互,这导致了二维禁忌交互的爆炸性增长.为了研究带约束的组合测试问题,我们定义带禁忌交互集的覆盖表的概念.定义8.设待测系统(SUT)中,禁忌交互集为Π,一个n×k表A,其第i列元素取自[0,vi-1],i=1,2,…,k,且满足:(1)A的每一行所对应的测试用例没有覆盖任何Π中的交互;(2)对任意t维交互,若这个t维交互不包含Π的任何显性或隐含禁忌交互,则都能被A的某一行所覆盖.则称A是强度为t的禁忌覆盖表,记为FCA(n;t,(v1,v2,…,vk),Π).当定义中的v1=v2=…=vk=v时,我们简记为FCA(n;t,k,v,Π).注:定义中若禁忌交互集Π的一致闭的禁忌交互集Π已知,则条件(2)可陈述为:(2)每个不包含Π中交互的任何t维交互,都能被A的某一行覆盖.这样,由已知的约束,生成相应的禁忌交互集,根据这些禁忌交互集来生成相应的覆盖表,从而指导测试.对上述的移动电话系统,生成满足约束的覆盖表如表4.表4移动电话系统的带约束两两组合测试用例集测试用例显示短信息照相机视频录像视频铃声1234567893生成一致闭禁忌交互集的算法及生成禁忌覆盖表的类AETG算法假设待测系统中,由约束导致的显性禁忌交互集为Π,如何判断Π是否是一致闭的,对于非一致闭的禁忌交互集,如何生成一致闭禁忌交互集Π,其规模有多大?ii定义9.假设禁忌交互集Π中有一组禁忌交互分别包含了某个因素的每个取值,例如:有vi个禁忌交互分别包含了第i个因素的每个取值:I1={(i,0),(i11,a11),…,(i1t1(i2t2(ivitv(i1t1(ivitv,a2t2,avitv,a1t1,avitv在集合I中删除相同的元素得到新集合,仍记为I,如果I中不存在两点在相同的因素下取值不同,即不包含两点(j,a1),(j,a2)(a1≠a2),则I是一个交互,这时称I1,I2,…,Ivi交互I是由一组交互I1,I2,…,Ivi记为Resolu(I1,I2,…,IviI2,…,Ivi不可满足的禁忌交互集.若I包含两点(j,a1),(j,a2)(a1≠a2),则称交互组I1,I2,…,Ivi注:上述的归结推理本质上就是命题逻辑中的Page5归结推理的推广.根据归结运算,显然有:定理1.设禁忌交互集为Π,则由Π中可归结禁忌交互组归结出来的交互一定是禁忌交互.要对禁忌交互集Π做归结运算,必须找到某个因素i,使得因素i的每个取值都必须在某个交互中出现,即对任意的(i,a),(a∈[0,vi-1]),都存在交互I∈Π,使得(i,a)∈I,称这种因素为可归结因素,所有的可归结因素构成的集合称为Π的可归结因素集,记为FactorsOfResolu(Π).我们要生成一致闭的交互集,必须首先找到可归结因素集,这个集合当然越小越好.显然有:定理2.如果禁忌交互集Π中不包含非极小禁忌交互,并且其可归结因素集FactorsOfResolu(Π)=,即每个因素中至少有一个取值没有被包含在某个禁忌交互中,则禁忌交互集Π是一致闭的.有了归结运算,对于显性禁忌交互集Π,能否通过反复应用归结操作,得到所有的隐含禁忌交互.首先我们证明对在归结操作下不变的极小禁忌交互集,一定是一致闭的禁忌交互集.定理3.假设禁忌交互集Π中不含非极小禁忌交互,并且所有的可归结禁忌交互组所归结出来的交互都至少包含Π中的一个交互,即关于归结运算封闭,则禁忌交互集Π是一致闭的.证明.如果Π={},则所有的交互都是禁忌交互,显然Π是一致闭的.否则只需证明对任意的交互I,I不包含Π中的任何交互,则I不是禁忌交互.设I={(i1,a1),(i2,a2),…,(it,at)},要证明存在一条测试用例T覆盖了I但没有覆盖Π中任何交互.如下构造测试用例T:第1步:T(i1)=a1,T(i2)=a2,…,T(it)=at;第2步:对余下的因素随机排列it+1,it+2,…,in,假设前面j个因素的取值都已确定,即T(i1)=a1,T(i2)=a2,…,T(it)=at,T(it+1)=at+1,…,T(ij)=aj确定第j+1个因素的取值T(ij+1)=aj+1时,要求测试用例中已赋值部分没有覆盖Π中任何交互,即使得交互{(i1,a1),(i2,a2),…,(ij,aj),(ij+1,aj+1)}不包含Π中任何交互.这样构造出来的测试用例一定不包含Π中任何交互.且第2步内的循环能够执行到最后构造出完整的测试用例.假设已经确定了前面的j个因素的赋值,满足:测试用例的已赋值部分未覆盖Π中任何交互.在确定第j+1个因素的取值时,满足条件的取值一定存在,若不然,假设满足条件的取值不存在,即对任意的a∈[0,vj+1-1],都存在Π中交互Ia={(ij+1,a),(is1部分所覆盖.则这组交互Ia(a=0,1,…,vj+1-1)是可归结的,设归结出的交互为I,因为Π关于归结运算是封闭的,所以在Π中至少存在一个交互I∈Π,使得II.然而I被测试用例的前面j个因素的赋值所覆盖,与前面假设测试用例前j个因素的赋值部分未覆盖Π中任何交互矛盾.由定理3证明可知,任何一个交互,若这个交互没有包含一致闭的禁忌交互集中任何交互,则可用证明中的方法把这个交互扩充成一个不包含任何禁忌交互的测试用例.有了定理1和定理3,得到算法1.算法1.生成一致闭的禁忌交互集算法.输入:k个参数的可取值向量(v1,v2,…,vk),显性禁忌输出:一致闭的禁忌交互集Π0.初始化,在Π中删除所有非极小交互,对新得到的交互集仍记为Π.1.对禁忌交互集Π计算可归结因素集FactorsOf-Resolu(Π),并令Π1=Π.2.对集合FactorsOfResolu(Π)中每个因素i所对应的每一组可归结的禁忌交互组I1,I2,…,Iv计算归结I=Resolu(I1,I2,…,Iv“禁忌交互集Π是不可满足的”,输出Π={},结束;否则把I并入到Π1.3.在步2中生成的Π1中删除掉所有的非极小交互,删除后的交互集仍记为Π1.4.如果Π1≠Π,则令Π=Π1,转入步1;否则令Π=Π1,输出Π,结束.定理4.算法1运行有限步后结束.证明.因为每个交互若在步3被删除掉,则在以后的循环中不可能再出现在步4的Π1中,所以每轮循环中步4中的Π1互不相同,而系统中交互集合的数目是有限的,所以算法在有限步结束.证毕.定理5.算法1输出的是包含显性禁忌交互集Π的一致闭的禁忌交互集Π.证明.由定理1,在步2中每次并入到Π1中的都是隐含禁忌交互,所以最后输出的Π中交互都是禁忌交互,并且由步3,Π中不含非极小交互,由步4,Π关于归结运算封闭,所以根据定理3,Π是一致闭的.注:算法的时间复杂性是指数级的,它是命题逻Page6辑中归结推理的推广,输出的Π中禁忌交互数目有可能规模较大,但在一些特殊情况下,我们有:定理6.如果禁忌交互集Π的可归结因素集FactorsOfResolu(Π)={i},即只有一个因素i其每个取值都至少被包含在一个禁忌交互中,设其包含取值v的禁忌交互的数目为nv(v=0,1,…,vi-1),则算法1得到的一致闭的禁忌交互集Π={}或者比Π中的交互数目最多增加n0n1…nvi-1个交互.定理7.如果禁忌交互集Π的可归结因素集FactorsOfResolu(Π)={i1,i2,…,ir},即共有r个因素,称某个因素的某个取值(顶点)与FactorsOf-Resolu(Π)关联,如果在Π中存在某个交互I包含了这个因素的这个取值也包含了FactorsOfResolu(Π)中的某个因素的某个取值,记所有的关联顶点集Γ,即Γ={(i,u),u∈[0,vi-1]|i∈FactorsOfResolu(Π),或j∈FactorsOfResolu(Π),v∈[0,vj-1]},I∈Π使得(i,u),(j,v)∈I}设Γ中元素数目为n=|Γ|,则算法1中生成的一致闭禁忌交互集Π={}或者比Π中交互数目最多增加证明.因为每次执行归结操作时生成的归结交互都是关联集合Γ的子集,所以最后生成的Π={}或者Π\Π是Γ的子集.若Π\Π是Γ的子集,又因为Π\Π中元素不互相包含,所以Π是集合Γ中的一条反链,根据Sperner定理[19],Γ中最长的反链的长度烄烆为nn2交互.注:由定理6,7可知,对显性禁忌交互Π,要使得生成的Π的规模不太大,必须或者FactorsOfResolu(Π)中因素不太多或者对其关联集合Γ中元素较少,才能使得算法1效率较高.定理8.如果禁忌交互集Π中每个交互都是二维的,并且每个因素都是二水平的,即v1=v2=…=vk=2,则算法1生成一致闭的禁忌交互集Π={}或者其交互数目最多为2k(k-1).证明.因为每次执行归结操作时生成的归结交互是二维或一维的或者是空集,所以Π={}或者最多等于所有二维交互数目,即2k(k-1).注:定理8其实等价于命题可满足性问题(SAT)中2-SAT问题.以上讨论了一致闭的禁忌交互集的概念以及生成一致闭的禁忌交互集的算法.在一般的待测系统中,由显性禁忌交互集通过归结运算生成一致闭的禁忌交互集,然后就可以设计类似的AETG算法来得到禁忌覆盖表,与传统的AETG算法不同的是:(1)在初始化阶段,计算未被覆盖的交互集Uncover时,在所有的t维交互中删除掉包含了一致闭禁忌交互集中某个交互的t维交互.(2)在生成一条候选测试用例时,假设前j-1个参数的取值已确定,在确定第j个参数的取值时,要求选取的取值与测试用例的已赋值部分构成的部分测试用例没有覆盖任何Π中的交互并且覆盖了Uncover中最多的t维交互.具体算法如下.算法2(类AETG算法生成禁忌覆盖表).输入:t,(v1,v2,…,vk),一致闭禁忌交互集Π输出:禁忌覆盖表FCA(n;t,(v1,v2,…,vk),Π)AbeginendwhileendPage7注:由定理3中的证明,可以知道算法2正确地返回一个禁忌覆盖表.4实验研究实验1.Cohen等人[16]研究的35个测试场景.我们对Cohen等人研究的35个测试场景进行研究,见表5,对场景中的显性禁忌交互集运用算法1得到一致闭禁忌交互集,其禁忌交互数目对比如表5所示,其中CA模型栏中的记号如2189310表示待测系统有199个因素,其中189个因素有2个取值,10个因素有3个取值,禁忌交互记号如23733表示待测系统中有40个禁忌交互,其中有37个是表5显性禁忌交互集与一致闭的禁忌交互集数目对比场景SPIN-SSPIN-VGCCApache2158384451612331425123314251Bugz.12345678910111213sum对这35个测试场景,运用算法1得到了每个待测系统的一致闭的禁忌交互集,然后用算法2就可以生成相应的二维禁忌覆盖表,得到结果如表6所示,其中我们的算法(一致闭算法)行的数据是运行五次算法得到禁忌覆盖表行数的平均值.AETG-SAT行是运行50次AETG-SAT算法得到的二维禁忌覆盖表的行数的平均值[16].表635个测试场景中2维覆盖表的规模比较场景一致闭算法AETG-SAT场景一致闭算法AETG-SAT场景一致闭算法AETG-SAT二维交互,3个是三维交互,Π/Π这一栏表示一致闭禁忌交互数目与显性禁忌交互数目的比值.从表5中可以看出,35个场景中,Π/Π比最大的是5.0930,有8个测试场景的数目比小于1,最小的是0.3333,有3个测试场景的一致闭禁忌交互集与显性禁忌交互集相等.35个测试场景中,共有981个显性交互,生成的一致闭的禁忌交互集中交互数为1897,Π/Π比平均值是1.9337,可以看出生成的极小禁忌交互数目在可接受范围内.在Π/Π比小于1的测试场景中有7个其一致闭禁忌交互集中出现一维禁忌交互,并且所有的1897个极小的禁忌交互中有111个一维禁忌交互,这些一维禁忌交互的出现可能导致了隐含的极小禁忌交互数目不是太快的增长.场景141516171819202122232425CA模型2813543632503441526128133426121283342516321273244566221723949536421383445546727633425163273334322531612110325364211836425266262873143542553242516227282167316425366292134375327234416230表中加黑的数字表示对应的算法生成的禁忌覆盖表具有更少的行.从表中可看出我们的算法生成的禁忌覆盖表与AETG-SAT算法生成的覆盖表规模相当.Cohen等人在AETG-SAT算法中集成了SAT解法器,需要把组合测试约束问题编码成命题逻辑公式,而我们的算法简单,易理解,且容易扩展,在把显性禁忌交互集生成一致闭的禁忌交互集之后,156.254.713.054.651.025.066.866.2Page8许多生成一般的组合测试用例集的算法都可扩展成生成避免禁忌交互的测试用例集的算法.在得到一致闭的禁忌交互集后,可增进我们对系统的理解,帮助我们对系统进行分析,如在测试过程中发现系统失效时可帮助我们对错误交互进行准确的定位.实验2.随机实验.Cohen等人研究的35个测试场景中因素大部分是二元的,并且显性禁忌交互大部分是二维的,这可能导致隐含禁忌交互数目比较少.隐含的禁忌交互数目与显性禁忌交互数目比值到底有多大?它与哪些因素有关?它应该与它显性交互的可归结因素的数目有关.影响隐含的禁忌交互数目与显性禁忌交互数目比值的另一个因素可能是测试场景中显性禁忌交互数目所包含的顶点(一维交互)数目与待测系统中所有顶点数目的比值,这个比值越小,可能出现的可归结因素就越少,从而隐含禁忌交互数目就可能越少.为此,我们设计随机实验模型来研究它们之间的联系.为了简单起见,我们只研究二维与三维禁忌交互.假设待测系统中,随机选择二维和三维交互作为显性禁忌交互,即在所有二维交互中等可能的选择一批二维交互,然后在所有的三维交互中等可能的选择一批三维交互作为显性禁忌交互集,然后我们计算对应的可归结因素集的大小,为了对比,我们也计算了理论上的可归结因素数目的期望值.定理8.设待测系统有k个因素,每个因素的取值个数都为v,在所有二维交互中等可能的随机选择n1个,在所有的三维交互中等可能的随机选择n2个,这些交互构成显性禁忌交互集Π,设其对应的可归结因素集FactorsOfResolu(Π)中因素数目为X,则其期望E(X)=k∑其中w1,w2分别为待测系统中所有的二维交互和三维交互的数目.证明.设待测系统中所有的二维交互数目为w1,所有的三维交互数目w2,则w1=设随机选择显性禁忌交互时,第1个因素的第j个取值被选到的事件是Aj,则第j个取值没有被选到的概率为P(Aj)=1-类似的,第1个因素有j个取值0,1,…,j-1没有被选到的概率为P(A1A2…Aj)=1-再令Bi指示第i个因素是可归结因素这个事件的随机变量,即Bi=1表示第i个因素是可归结因素,Bi=0表示第i个因素不是可归结因素,则P(Bi)=P(A1A2…Av).根据容斥原理,有P(Bi)=P(A1A2…Av)=1-∑P(Ai)+而可归结因素集FactorsOfResolu(Π)中因素数目为X=∑所以可归结因素集FactorsOfResolu(Π)中因素数目的期望E(X)=E∑我们的实验结果见表7,表中显性模式栏是随机生成的显性禁忌交互集Π的模式,如(60,0.9)表示在待测系统中先等可能的选择54个二维禁忌交互,再等可能的选择6个三维交互,即二维交互占90%,然后我们根据这个模式在待测系统中生成的5个显性禁忌交互集Π,再根据算法1生成相应的5个一致闭的禁忌交互集Π,一致闭模式栏是这5个一致闭的禁忌交互集Π的平均模式,Π/Π栏是5次运行下一致闭的禁忌交互集中交互数目与显性禁忌交互数目的比Page9值的平均值,顶点比栏是显性禁忌交互集中所包含的顶点数目平均值(相同的顶点只算一个)与待测系统中所有顶点数目的比值.E(X)栏是可归结因素数目X的期望,可归结数栏是在每个模式下随机生成的表7随机生成禁忌交互集与一致闭禁忌交互集数目对比CA模型显性模式210021002100(60,0.65)210021002100(80,0.75)2100(80,0.65)3100(100,0.9)3100(100,0.75)3100(100,0.65)3100(110,0.9)3100(110,0.8)3100(120,0.9)3100(120,0.85)2102345437530632733831932103111281226132214151581631713.97670.565319.130317.68205.00004100(130,0.9)4100(130,0.75)4100(130,0.5)4100(140,0.9)4100(140,0.75)21053354651661271281691610121112121613111451551621711812.02000.54504100(160,0.8)2128332413518615716812912101711912111351461541621711811.88130.592511.634612.24100(170,0.8)从表7中可看到:(1)随机生成的禁忌交互集与其对应的一致闭的禁忌交互集的大小比值与禁忌交互集中包含的不同的顶点数目有关系,在几个不同的模式中,当不同的顶点数目与总的顶点数目小于50%时,一致闭的禁忌交互集能很快生成出来,并且Π/Π栏数值小于5,当不同的顶点数目与总的顶点数目大于等于50%时,生成一致闭的禁忌交互集的时间显著增长,并且在实验过程中可看出在同一个模式下有时生成的时间很长,有时很短,很不稳定.(2)随机生成的禁忌交互集与其对应的一致闭的禁忌交互集的大小比值也与可归结因素数目相关,在2100的CA模型中,可归结因素数目达到30左右时,生成时间才显著增长,而在3100的CA模型中,可归结因素数目达到15左右时就显著增长,而在4100的CA模型中,可归结因素数目只到11左右时就显著增长,所以随着每个因素的取值越多,随机生成的禁忌交互集中禁忌交互越分散,这时很少的可归结因素就可能导致Π/Π比很大,生成一致闭禁忌交互集的时间很长.(3)在同一个CA模型下生成同样数目禁忌交互集时,若禁忌交互集中三维禁忌交互越多,Π/Π5个显性禁忌交互中可归结因素数目的平均值,时间栏是每个模式下,生成一致闭的禁忌交互集的平均时间,运行环境是Matlab,Windows2007,INTEL(R)core(TM)2Duo2.20GHz,运行时间单位为s.比越大,生成一致闭的禁忌交互集的时间也越长,也越不稳定,并且生成的一致闭的禁忌交互集中禁忌交互的维数也越来越分散.5结论及进一步工作本文研究了在待测系统中各个因素的取值之间存在约束时如何处理约束,如何生成尽可能少的测试用例.我们先由约束生成显性禁忌交互集Π,再在禁忌交互集中进行归结运算,这是SAT问题中的归结推理的推广,反复应用归结运算来生成一致闭的禁忌交互集Π,然后我们对一致闭的禁忌交互集提出了类AETG算法来生成尽可能少的测试用例,随后的实验研究了Cohen等人提出的35个测试场景,对每个场景中显性禁忌交互集来生成一致闭禁忌交互集,发现得到一致闭的禁忌交互集中交互数平均是原始禁忌交互数的二倍左右,再用这个类AETG算法来生成相应的测试用例,其规模与Cohen等人[16]用集成了SAT解法器的AETG算法生成的测试用例规模相当,但是我们算法不需要把组合测试模型转化成SAT模型,并且我们计算出了所有Page10的禁忌交互,对模型的理解与测试非常有帮助.随后我们设计了随机实验,通过随机生成显性禁忌交互集,然后生成一致闭的禁忌交互集,研究它们之间的数目比,是否在可接收范围内,与哪些因素有关.由于我们生成一致闭的禁忌交互集的算法时空复杂性都是指数增长的,对于小的待测系统,显性禁忌交互集比较小时适用,对于大的复杂的带约束系统,本文的方法失效,所以推广SAT解法器中的一些如回溯、约束传播等技术来生成尽可能少的测试用例是一个重要研究的问题.另外,元启发式算法是生成测试用例的另一类重要方法,所以研究在禁忌交互集是一致闭的和不是一致闭的情形下生成测试用例的元启发式算法也是需要研究的问题.
