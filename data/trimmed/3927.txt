Page1四维时空高效利用的装箱调度问题及其可计算性证明黄文奇何琨(华中科技大学计算机科学与技术学院武汉430074)摘要提出了四维时空中考虑时间因素的一个长方体装箱工作的优化调度问题.已知一个形状大小任意给定的长方体形的箱子和有限个形状大小分别任意给定的长方体形的刚性物体,又知每个物体须在箱中连续烘烤的时间长度,问应如何安排每个物体的入箱时刻,以及至出箱前这段时间内它在每个时刻上的位置和方向,才能使整个箱子的被使用时间最少.问题中涉及的箱子及诸长方形刚体的长、宽、高以及各刚体须连续烘烤的时间长度均为分别任意给定的正实数.与经典装箱问题的不同之处在于,各物体在箱子内可以随时间而改变其位置和方向,从而使四维时空得到更真实、更充分的利用.进一步地,通过枚举长方体的各种排列,并证明对每一种排列,按照某种贪心策略可得到该排列下问题的最优解,从而给出了原问题具有可计算性的严格证明.在此基础上,今后有望对此问题发展出各种有效的实用求解算法.关键词可计算性;装箱;调度;优化;NP难度1引言现实生活中存在着许多与时间及空间的利用有关的问题,如饼干的烘制、内存空间的分配、数据库存储空间的分配等等.对于此类问题,目前国内外研究者采用的求解途径多为将时间类比成几何维度以构成典型的NP难度问题———Packing问题,然后设计得到可行的但效率不是特别高的调度方案.相关的工作包括对空间调度问题[1]、组装线问题[2]、多处理器调度问题[3-4]、四维矩形Packing问题[5]和抽象物体高维布局问题[6]的研究.然而,实际上,这些需要一定烘烤时间的物体或有一定存活期的数据在存放区域内可以随时间而改变其位置和方向,且这种改变能使时间和空间得到更充分的利用.因此,本文拟提出和研究三维空间与一维时间所构成的四维时空中长方体装箱工作的优化调度问题(简称四维装箱调度问题).与Packing问题的不同之处在于,物体从放入容器到取出这段时间内可以改变其放置的方位.这推广和发展了传统意义上的Packing工作,可大大加强时空综合利用的灵活性、提高容器的时间空间利用率.相关的应用包括制造业中大型工厂的加工流程、计算机内存空间的分配、超方体结构下的并行任务调度[7]等等.依据此数学模型,可望得到在“好”的前提下更“快”更省时的调度方案,确保上述应用的快速、经济和成功,其潜在的经济社会效益巨大.文献[8]举了一个直观的例子,在其中依照本数学模型,整个开箱工作时间节省了三分之一.目前国内外学术界对二维和三维Packing问题进行了很多有价值的深入的工作,二维的包括Beasley[9]、王奕首等人[10]、赵新芳等人[11]、黄文奇等人[12]、何琨等人[13]的工作,三维的包括Parreo等人[14-15]、张德富等人[16]、何琨等人[17-18]的工作.关于四维及以上的高维Packing问题,国际上较早的讨论见于Barnes[19]在1995年发表的论文,他分析了除一条边外其它n-1条边均为单位长度的“小棒”状物体的布局特征,但未给出算法.随后,Fekete等人[20-22]发表了一系列的文章,讨论了一般意义上的n维Packing问题.他们根据图理论对各种合法的布局分类,给出了一个分支限界的框架,提出了一种树搜索算法,并计算了二维和三维的典型算例,但没有计算四维及以上维数的高维情形.著名算例库OR-Library[23]、Pack-Lib2[24]中也只提供了二维和三维的装箱实例.从20世纪90年代开始,国内学者也对高维Packing问题展开了研究.黄文奇等人[1]于1991年指出,将求解三维空间中Packing问题的拟物方法加以适当引伸后,可得出求解有关空间利用的调度问题的拟物方法.李未等人[5]对四维矩形Packing问题提出了一种基于贪心策略的启发式算法.查建中等人[6]将八叉树结构进一步发展到2n叉树以解决高维几何布局问题中物体的建模问题,他们借鉴黄文奇等人的拟物方法,使用物体的相交体积作为弹性势能进行拟物建模,并用2n叉树给出计算函数,使总体弹性势能归零,从而得到最终的布局结果.二维矩形Packing问题已经被证明是强NP难度问题[25],而四维装箱调度问题是在三维长方体Packing问题(即长方体装箱问题)[14-18]的基础之上进一步发展而来.相比之于计算复杂度已非常高的三维长方体Packing问题,在此还需考虑连续量时间的参入.因此,此四维装箱调度问题是否具有可计算性,是洞察此问题并进行其近似算法设计的关键和前提.在研究二维矩形Packing问题[13]和三维长方体Packing问题[17-18]的基础之上,我们对四维装箱调度问题进行了初步的研究[8],以饼干的烘制为例通俗地说明了此数学模型的特点和优势.本文拟进一步给出问题的数学描述,并严格证明它具有可计算性,即存在一个确定型的算法,可以在有穷的时间内找到问题的精确解.2问题描述四维装箱调度问题(如图1)是指:在三维欧氏空间中,已知一个长L、宽W、高H分别任意给定的长方体容器和n个(n为任意给定的正整数)三边边长li、wi、hi(均为正实数)分别任意给定的长方体,各长方体的待加工时间(为便于描述,以“烘烤时间”为例)Ti(正实数)也任意给定.问如何在容器内安排所有的长方体,即要求给出:(1)每个长方体放入容器的时刻Si(取出时刻Page3随之而定,为Si+Ti);(2)每个长方体在时间区间[Si,Si+Ti)中的每一时刻所处的位置和方向.此半闭半开区间[Si,Si+Ti)被称作长方体i在容器内的存活期间.目标是使最后取出的那个长方体的出箱时刻最小,即makespan=max(S1+T1,S2+T2,…,Sn+Tn)-最小.约束条件为任意时刻放入的长方体须完全在容器内,棱平行于容器的棱,且存活的诸长方体间两两互不嵌入.此问题与四维矩形Packing问题[5]的不同之处在于:长方体在其烘烤时间内,可以改变其位置和方向.3问题的可计算性证明想象此四维装箱调度问题存在一个最优的调度方案,则该调度天然地存在着一个诸长方体进入烤炉的先后顺序.因此,通过枚举待烘烤长方体的各种排列,并证明对每一种排列,按照某种贪心策略可得到该排列下问题的最优解,然后从不同排列所得解中选择makespan最小的解输出,可以证出此解即是原始问题的最优解,于是问题的可计算性得以证明.具体的证明过程分为以下3个步骤:首先设计求解三维长方体Packing判定问题的精确算法A0;然后将A0作为核心子模块来设计求解定序限制之下的四维装箱调度问题的精确算法A1;最后将A1作为核心子模块来设计求解原始四维装箱调度问题的精确算法A2.3.1长方体Packing判定问题及其可计算性证明3.1.1问题描述长方体Packing判定问题是指在三维欧氏空间中,已知一个长L、宽W、高H分别任意给定的长方体容器和n个(n为任意给定的正整数)3边边长li、wi、hi分别任意给定的长方体(设各给定量均为正实数).问能否将这些长方体全部放入到容器中.如果能,请给出每个长方体在容器中的位置和方向.放入时要求满足以下3个约束:(1)长方体完全在容器内;(2)长方体的棱平行于容器的棱;(3)长方体间两两互不嵌入.记此问题为P0.因此,任意给定的3(n+1)个正实数(L,W,H,l1,w1,h1,…,ln,wn,hn)唯一地确定了一个一般的天然的长方体Packing判定问题.对于此实参数的一般天然情形,目前国内外文献中尚未见其具有可计算性的严格证明.3.1.2基本概念将长方体容器如图1所示放入到三维笛卡尔坐标系中,使其左前下顶点与原点重合、右后上顶点与(L,W,H)点重合.下面给出若干概念的定义以利于后续的证明.定义1.物体i(i∈{0,1,…,n}).将容器壁上及壁外全部点所构成的集合称为物体0.将第i(i∈1,2,…,n})块长方体称为物体i.定义2.方向数Oi.根据物体i(i∈{1,2,…,n})的不同放置方向(如图2所示)定义方向数,其取值范围为{1,2,…,6},所对应的物体在x、y、z方向的边长为(li,wi,hi)、(li,hi,wi)、(wi,li,hi)、(wi,hi,li)、(hi,li,wi)或(hi,wi,li).定义3.格局.将(x1,y1,z1,…,xi,yi,zi,…,xn,yn,zn,O1,…,Oi,…,On)称为一个格局.其中xi,yi,zi为物体i的左前下顶点坐标,Oi为物体i的方向数(i∈{1,2,…,n}).由于方向数的限制,任一格局均满足问题P0的约束(2).定义4.合法的格局.定义Vij为当前格局下物体i、j相交的体积,将V∑n即n+1个物体两两相交之体积为0的格局,称为合法的格局.对任一给定的格局,V的值为一确定的实数.可见V为(x1,y1,z1,…,xn,yn,zn,O1,…,On)的函数.对任一物体i,其左前下顶点坐标(xi,yi,zi)∈R3(当然,当xi<0或xi>L或yi<0或yi>W或zi<0或zi>H时,物体i必与物体0相交,V>0,为非法的格局),方向数Oi∈{1,…,6},所以V(x1,y1,z1,…,xn,yn,zn,O1,…,On)的定义域为(-,)3n{1,…,6}n.由于任一Vij0,所以值域[0,).当任一物体与物体0相交的体积为0时满足P0的约束(1),当物体1至n中任两物体相交的体积为0时满足P0的约束(3).因此,V=0的格局满足P0的3个约束,对应布局为合法的布局.3.1.3可计算性证明若问题P0存在合法的布局,则在该布局中各长Page4方体块的放置方向是确定的.因此,若枚举各长方体的不同放置方向,即枚举6n组不同的块方向配置,并能对每一组方向配置,判定在给定该方向的前提下问题是否有合法的布局,则可精确地求解问题P0.一般而言,每个物体可行的放置位置有无穷多种可能,如何设计一种枚举算法并证明它能找到块方向给定的前提下问题P0的最优解是此节的关键.引理1.在各块方向给定的前提下,V为(x1,y1,z1,…,xn,yn,zn)的连续函数,在其定义域(-,)3n上处处连续.本引理十分直观.至于严格的证明,只须用初等微积分作稍详尽的分类计算即可完成.这里给出一个直观的说明:在各块方向给定的前提下,当各块的左前下顶点坐标均已确定时,V的值为一确定的实数.可见V为(x1,y1,z1,…,xn,yn,zn)的函数,其定义域为(-,)3n,值域[0,).当任一变元连续变化时,V的值也随之连续变化.图3(a)给出了一个简明的例子.这里容器及物体i、j在y方向均为单位厚度(W=wi=wj=1).设物体i固定不动,物体j仅在x方向做平移运动(图3(a)中给出了物体j在平移过程中的8个典型位置),即xi、yi、zi、yj和zj保持不变,xj在(-,)范围内变化.图3(b)给出了V=V0j+Vij与xj的函数曲线.可见对当前给定的xi、yi、zi、yj和zj,V(xj)为一连续函数.定义5.合法的点集.设(x1,y1,z1,…,xn,yn,zn)为3n维欧氏空间中的点.在各块方向给定的前提下,合法的点集={(x1,y1,z1,…,xn,yn,zn)|V(x1,y1,z1,…,xn,yn,zn)=0}.是怎样的一个集合呢?我们以P0的一种退化情形即二维矩形Packing判定问题(W,H,w1,h1,…,wn,hn)为例来作一种先行的观察.设块放置时wi边限定在x方向,且n=1,w1=h1=1.若W<1或H<1,则问题无解,=;若W=1且H=1,则问题有唯一解,={(0,0)};否则,问题有无穷多个解,其合法点集={(x,y)|0xW-1,0yH-1}(如图4中阴影所示).根据上例我们猜测,在各块方向给定的前提下,若问题P0存在合法的解布局,则对应的合法点集为3n维欧氏空间中的非空有界闭集.下面给出严格的证明.定理1.对各块方向给定前提下的问题P0(L,W,H,l1,w1,h1,…,ln,wn,hn,O1,…,On),若存在合法的解布局,则对应的合法点集为3n维欧氏空间中的非空有界闭集.证明.(1)非空性:由假设“问题有合法的解布局”知(2)有界性:因放入块须完全在容器内,故对任非空.综上所述,若各块方向给定前提下的问题P0存在合法的解布局,则为3n维欧氏空间中的非空有界闭集.定理2.对各块方向给定前提下的问题P0(L,W,H,l1,w1,h1,…,ln,wn,hn,O1,…,On),若存在合法的解,则在合法点集上存在这样的一个合法i∈{1,2,…,n},0xiL,0yiW,0(3)闭性:设p1,p2,…为集合中的合法点列,意合法点(x1,y1,z1,…,xn,yn,zn),ziH,即有界.且limi→pi=p.续函数,由引理1,V为(x1,y1,z1,…,xn,yn,zn)的连再由连续函数的性质,点列函数的极限等于点列极限的函数[26],即limi→V(pi)=V(limi→pi)=V(p)(1)因为i∈{1,2,…},pi为合法点,即V(pi)=0,所以由式(1)和(2),知V(p)=V(limi→pi)=limi→V(pi)=0.因此p为合法点,即p∈.集合对取极限运算封闭.为闭集[26].Page5点p,其对应解中每个长方体块均占据着由其它物体所围成的空间的左前下角.证明.定义势能函数U=∑n定义域为{(xi,yi,zi)|(xi,yi,zi)∈};因任一合法点i的xi0,yi0,zi0,所以值域[0,).可见U为连续函数.由于非空有界闭集上定义的连续函数一定在该闭集上存在全局最小值点[26],而根据定理1,为非空有界闭集,故U在上一定存在全局最小值点p.考虑与p对应的格局(x1,y1,z1,…,xn,yn,zn),观察与任一给定块i对应的xi、yi、zi.此时xi、yi、zi均再不能合法地、独立地变小了,否则与p为势能U的全局最小值点矛盾.xi、yi、zi均再不能合法地、单独地变小了即说明块i在当前格局中已占据着由其他物体所围成的空间的左前下角.定理3.各块方向给定前提下的问题P0(L,W,H,l1,w1,h1,…,ln,wn,hn,O1,…,On)具有可计算性.证明.由定理2,若问题存在合法的解,则上存在这样的一个合法点p,其对应布局中每个长方体均占由其他物体所形成的空间的左前下角.所以,在该布局中,任一块i的下方必贴着某个块i1,i1的下方必贴着某个块i2,…,ik的下方必贴着物体0在x轴上的面.块i与块i1,i2,…,ik及物体0的关系如图5所示.p点对应的zi坐标为zi=zi1+(li1orwi1orhi1)=…=(li1orwi1orhi1)+(li2orwi2orhi2)+…+(likorwikorhik).因为{i1,i2,…,ik}∈{1,…,n}.所以zi=(0or1)(l1orw1orh1)+zi取不同值之数目4n(i=1,2,…,n),类似地,xi和yi取不同值之数目均4n(i=1,2,…,n).所得解p中,(x1,y1,z1,…,xn,yn,zn)取不同值之数目(4n)3n=43n2.通过枚举这43n2种布局并逐一检查其合法性,即可经有限次算术或逻辑运算精确地解答块方向给定前提下的问题P0.块方向给定前提下的问题P0存在着无穷多种可能的布局,但通过定理1~3,我们将搜索的空间从无穷多减少到有限个,实现了解空间的“量子化”.定理4.长方体Packing判定问题P0具有可计算性.证明.基于以下策略设计求解长方体Packing判定问题的枚举算法A0.对问题P0(L,W,H,l1,w1,h1,…,ln,wn,hn),共有n个长方体,每个长方体可能的放置方向有6种,所以共有6n组不同的方向配置.对每一组方向配置,由定理3,可通过枚举43n2种布局来精确地解答该组方向配置下是否存在合法的布局.如果有,可同时给出详细的布局图案.因此,可在6n43n2步内精确地回答问题P0.所以,问题P0具有可计算性.证毕.3.2定序限制之下的四维装箱调度问题及其可计算性证明为了方便描述,可将容器视为一个长方体形的烤炉.本节先对问题的一种简化情形即定序限制之下的装箱调度问题进行研究,找到其最优解后,再穷举所有可能的入炉顺序以得到原问题的最优解.定序限制之下的四维装箱调度问题是在原问题的基础上又增加了一条约束,即各长方体已按待烘烤的顺序编号,要求第i个长方体进入烤炉的时刻Si不大于第i+1个长方体进入烤炉的时刻Si+1(i∈{1,…,n-1}).记此问题为P1.下面首先给出求解问题P1的贪心调度算法A1,然后证明该算法的最优性.3.2.1贪心调度算法不失一般性,可假定任意单个的长方体均可放入到烤炉中(超大的块可首先从待放序列中删除).Page6算法A1首先找到一个正整数k,使得前k块长方体能按算法A0全部放入容器而前k+1块不能;然后按A0给出的布局烘烤这k个块直至某个时刻有某块达到了需要的持续烘烤时间;取出烘烤好的块(可能有多块)予以注销,将烤炉内剩下的块按原有的排列顺序移出到容器外的待烘烤序列中;这时问题再次转化为求解一个定序限制之下的装箱调度问题;如此反复执行,直至所有的长方体都已烘烤完成.下面给出当前时刻尚未完成的剩余工作量的定义以及算法A1的具体执行过程.定义6.剩余工作量F.剩余工作量F为一个n维的有序数组〈T1,…,Ti,…,Tn〉.其中Ti∈R0+(大于等于0的实数)为块i的剩余工作量,表示当前时刻第i块长方体尚需的持续烘烤时间长度.设F=〈T1,…,Ti,…,Tn〉,F=〈T1,…,Ti,…,Tn〉,用FF表示i∈{1,…,n}均有TiTi.算法A1.1.初始化:2.tj时刻:2.1.循环{//寻找当前时刻可放入的最大R集.图6A0的调度节拍3.2.2可计算性证明在问题P1的合法调度中,第i块长方体的入炉时刻不大于第i+1块长方体的入炉时刻,块入炉后只有在达到了所需的连续烘烤时间之后才能出炉.下面证明算法A1所得调度为所有合法调度中makespan最短的调度方案.2.2.若用A0不能全部放入R中的长方体,则{}否则{//k=n,说明炉外已无待烤块.按A0的布局完成R中剩余块的烘烤,并将最后一块退出.}3.tj+1=tj+Δtj时刻的准备工作:更新R集中块的剩余工作量:对每个i∈R,Ti=Ti-Δtj;更新R集:从容器中取出剩余工作量为0的块,并将之更新时刻编号:j=j+1;返回2.此贪心调度算法每一步均放入尽可能多的块进行烘烤.其调度的节拍如图6所示.其中tj(j∈{1,…,M})对应第j批长方体块的入炉时刻.从tj至tj+1(j∈{1,…,M-1})对应为一个节拍,其时间区间的长度为Δtj.至tM时刻,烤炉外的剩余长方体已全部入炉,只需按当前时刻A0给出的布局进行烘烤,并及时将烘烤好的长方体取出,直至全部长方体都已烘烤完成.记最后出炉的长方体的出炉时刻为tout,则总的烘烤时间长度为tout-t1=tout.定理5.算法A1可得到问题P1的最优调度方案.证明.设A1对P1调度得到的方案为Q,设Q为P1的任一合法调度.下面先用数学归纳法证明,在A0的任一入炉时刻ti,Q的剩余工作量F均不大于Q的剩余工作量F.不失一般性,可设方案Q开始Page7烘烤长方体的时刻t=0.否则可将[0,t)这段时间区间去掉而得到一个makespan更短的调度方案.1.在t1=0时刻:初始时刻所有块均在炉外,Q的剩余工作量F1=〈T1,T2,…,Tn〉=Q的剩余工作量F1,所以F1F1,命题成立.2.假设在tk(k<M)时刻FkFk,要证明在tk+1时刻Fk+1Fk+1.由于在tk时刻对i∈{1,…,n}均有Ti(k)Ti(k),所以方案Q中剩余工作量为0的块在方案Q中剩余工作量一定也为0,即Q中已烤好的块在Q中一定也已经烤好.(1)对于Q已经烤好的块i,其剩余工作量为0,所以到tk+1时刻Ti(k+1)仍然为0,因此Ti(k+1)Ti(k+1).(2)除了Q已经烤好而Q尚未烤好的块外,tk时刻Q的其它入炉块在Q中也一定会入炉,否则就与A0是求解P0的精确算法矛盾.又由于Δtk=min{Ti(k)|i在tk时刻入炉},而Ti(k)Ti(k),所以,忽略tk时刻Q已经烤好而Q尚未烤好的块后,Q中的其他入炉块在tk+1时刻之前均不可能出炉.因此,至tk+1时刻,Q至多将Q在tk时刻入炉的块入炉,且这些后续的入炉块在tk+1时刻之前均不可能出炉.除了tk时刻Q已经烤好而Q尚未烤好的块外,Q的其它块i在Ti(k)Ti(k)的基础上,至tk+1时刻减少的工作量一定不大于对应块在Q中减少的工作量.因此,Ti(k+1)Ti(k+1).根据(1)、(2)可推出,至tk+1时刻,i∈{1,…,n}均有Ti(k+1)Ti(k+1),即Fk+1Fk+1.根据(1)、(2)的数学归纳,可推出至tM时刻FMFM.至tM时刻,方案Q已可将剩余的长方体块全部入炉,Δtleft=max{Ti(M)|i∈{1,…,n}}.而方案Q中,至少还需要Δt=max{Ti(M)|i∈{1,…,n}}的时间才能完成所有块的烘烤.由FMFM知ΔtleftΔtleft.所以方案Q中最后出炉长方体的出炉时刻tout方案Q中最后出炉长方体的出炉时刻tout,即算法A1所得调度的makespan要小于等于任一合法调度的makespan.所以,算法A1所得调度为问题P1的最优调度.定理6.定序限制之下的四维装箱调度问题具有可计算性.时刻.在有限时间内算出.证明.首先证明算法A1能够在有限步内终止:A1的调度过程如图6所示.在每个节拍末,至少有一个长方体块会完成烘烤,而待烘烤的块数是有限的,所以算法会在有限个节拍内到达tM时刻.在t1,t2,…,tM中的每一时刻tj,A1通过有限次调用A0来找到可入炉的最大R集及相应的布局.由定理4,A0的每一次调用均可在有限的时间内完成.所以,在每一时刻tj的计算均能在有限的时间内完成.所以,算法A1能在经过有限次计算后到达tM至tM时刻,容器内的剩余块为有限个,Δtleft可综上所述,算法A1可在有限时间内完成计算.再由定理5,知算法A1能在有限时间内精确地回答问题P1,即问题P1具有可计算性.证毕.3.3原始的四维装箱调度问题的可计算性证明定理7.原始的四维装箱调度问题具有可计算性.证明.记此原始的问题为P2,设计算法A2如下:枚举待烘烤长方体的全排列,并对每一种排列,从时刻0开始,求解一个定序限制之下的长方体装箱调度问题P1.由定理6,用算法A1可在有限时间内得到当前排列的入炉顺序限制下问题的最优调度.然后从全部不同排列所对应的最优解中选择makespan最小的一个输出.方案.易证A2所得装箱调度方案为最优的装箱调度由于待烘烤长方体全排列的数目为有限个,故可在有限的时间内得到问题P2的最优装箱调度方案.因此,问题P2具有可计算性.证毕.4结论本文提出了一个关于四维时空高效利用的长方体装箱工作的优化调度问题.它既不是三维Packing问题,也不是四维Packing问题,而是Packing问题的一种有意义的拓展.本文进一步讨论和证明了各已知量均为实数的天然、困难情形下问题的可计算性.首先,证明了各已知量均为实数的长方体Packing判定问题具有可计算性.然后,以此为基础和核心,证明了四维装箱调度问题具有可计算性,即存在精确的确定型求解算法.虽然该算法因需要太长的计算时间而缺少实用的价值,然而,它为下一步Page8设计近似的高效率求解算法提供了一个扎实透彻的思想基础.
