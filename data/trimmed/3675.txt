Page1分片位图索引:一种适用于云数据管理的辅助索引机制孟必平1),3)王腾蛟1),3)李红燕2),3)杨冬青1),3)1)(高可信软件技术教育部重点实验室(北京大学)北京100871)2)(机器感知与智能教育部重点实验室(北京大学)北京100871)3)(北京大学信息科学技术学院北京100871)摘要云计算技术的快速发展为海量数据的存储和管理提供了可能.然而,由于存储模型的根本改变,传统关系数据库管理系统中成熟的索引技术既不能直接应用于海量数据的处理,也无法被简单地迁移到云计算环境中.通过分析对比辅助索引在云环境中的两种截然不同的基本逻辑结构,即集中式方案与分布式方案,在吸收两者的优势并规避其弱点的基础上,提出了具有良好可扩展性的分片位图索引机制,从而对云环境中海量数据的检索任务提供高效的支持.通过充分利用云环境中的并行计算资源,使单条查询的响应速度得到提升;与此同时,局部节点根据其所掌握的全局信息规避了不必要的检索开销从而使大量请求并发到达时的查询吞吐量得以保证.在真实数据上进行实验的结果表明,分片位图索引的查询性能大大优于其它方法.关键词云计算环境;辅助索引;集中式方案;分布式方案;分片位图索引1引言现今,随着万维网(WorldWideWeb)的快速发展,网络数据大量涌现.丰富的网络活动产生了规模异常庞大的数据①:2009年全年共有90万亿封电子邮件被发出,平均每天发出的电子邮件数目就高达2.47千亿封,每一封电子邮件都拥有发送时间、发送方地址、接收方地址和投递服务器等属性;Google搜索引擎每天收到的检索请求数以十亿计,每个检索任务都将产生若干条日志记录,包括检索时间、检索关键字、响应时间、命中页面数以及用户Cookie等属性;来自世界各地的用户每天在Twitter网站上发布的微博数量超过三千万条,每条微博都拥有微博标识符、发布者标识符、发布时间、微博内容甚至转发关系等属性.如此大规模数据的涌现是互联网时代所特有的.传统关系型数据管理系统已无法胜任海量数据管理任务.以Web为主导的信息时代的繁荣和演进正在向数据管理系统提出前所未有的新挑战.所幸,云计算技术的快速发展为海量数据的存储和管理提供了可能.相比传统的单机计算环境,云环境可以有效地利用分布式集群的庞大计算资源来满足海量数据管理对计算资源和存储资源的需求,并且拥有易于维护、易于扩展和易于管理等优良特性.面对快速增长的数据规模,云计算技术能够快速调整并分配所需资源以适应数据的疯狂膨胀;同时能够提供具有弹性的、组织松散的存储模式以及建立在这种存储模式之上的可配置的分布式并行计算资源[1].云计算技术的运用正逐渐成为海量数据管理任务中的新趋势.但是,配置于云环境中的分布式存储系统并不能够像传统关系数据库管理系统那样对数据的多样化查询提供高效支持[2].在数据存储和管理领域,索引被证明是能使存储系统支持高效检索的有效手段.为了支持在存储于大规模的分布式集群上的海量数据中快速找到满足条件的元组的操作,云环境中的数据管理系统也需要配备高效的索引机制.作为基本的索引类型,聚集索引仅能够服务于针对元组主键的查询请求.在普遍情况下,云环境中数据表的主键往往仅用于区别不同的元组,而并不具有实际意义.相比之下,在更多的实际应用场景中,针对非主键属性上的查询请求常常被更加频繁地应用于各种各样的检索任务中.此类查询请求的处理无法使用聚集索引,而只能借助于辅助索引.然而,由于存储模型的根本改变,传统关系数据库管理系统中成熟的辅助索引技术,既不能直接用于处理海量数据,也无法被简单地迁移到云计算环境中.为云环境中的数据管理系统设计全新的辅助索引结构并非易事,其难点主要包括:(1)海量数据上的辅助索引结构势必拥有与数据本身规模相仿的索引项数目.如此庞大的索引结构的管理及其高效访问算法的设计面临着传统数据库管理系统中未曾遇到的新问题.(2)云环境中并行计算资源对于加快大规模数据上的检索速度是有利的.但是,以粗暴的方式滥用并行资源将会导致系统的服务租赁费用急剧升高.而且在多客户端并发访问的情况下,将极大地影响系统能够承受的查询吞吐量.(3)一般地,服务提供商隐藏了云环境中各计算节点的物理拓扑结构[3].因此,检索算法对网络的访问接口往往会受到限制.依赖于网络通信协议的索引实现方案将会引起难以评估的巨大的潜在网路通信开销.(4)由多个检索条件复合而成的复杂查询请求将引起多个检索结果集的求交操作.在大规模数据集上执行求交运算将引起较高的时间复杂度[4],且难以被并行化.作为辅助索引的一种成熟实现,位图索引在云数据管理任务中能够体现出其独特的优势:对于很多常见属性,其基数值受数据增长的影响很小,例如性别、生日、商品类别等;而多个属性上的复合检索条件是常常被用到的,例如在电子商务应用中检索①网络流量数据来自于Netcraft网站的统计信息;电子邮件Page3出生于1990年之后的购买过电子产品的女性用户.相比其它类型的索引,位图索引能够非常高效地获得多个检索条件复合之后的检索结果[5-6].基于以上考虑,本文通过分析对比云环境中的辅助索引的两种截然不同的基本逻辑结构,即集中式方案与分布式方案,在吸收二者的优势并规避其缺陷的基础上,提出了一种具有良好可扩展性的辅助索引机制:分片位图索引(RegionalBitmapIndex).该索引结构能够充分发挥现代计算机执行位图逻辑运算的优势.通过使用分布式的索引存储方法,大规模索引结构得到了有效管理.属性值的全局排序使得在索引上进行并发检索的代价得到了降低,从而有利于查询吞吐量的提升.另外,本方法不依赖于计算节点的网络组织结构,因而拥有较强的适用性.本文第2节将分类介绍相关的研究工作;第3节将陈述分片位图索引的核心技术及其生成、维护与检索算法;在真实数据上进行对比实验的结果将于第4节中进行汇总分析;最后,第5节对本文贡献进行归纳和总结.2相关工作传统数据管理系统已经拥有非常成熟的索引技术,相比之下,在云环境中,索引技术的研究工作尚不充分.本文将在云环境中实现辅助索引机制的方案按照其的基本逻辑结构分为两类,集中式方案与分布式方案.以下对它们分别进行介绍.特别地,针对基于分布式方案的扩展工作,本节做出了单独的分析和说明.2.1集中式方案在集中式方案中,被索引字段上的所有值被全局排序并集中管理.具体而言,每条元组对应的索引项将包含被索引的字段的值以及该记录对应的主键图1辅助索引的集中式方案值.在索引结构中,这些索引项按照被索引字段的值全局排序.系统处理被索引字段上的检索请求的过程分为两个步骤.首先在全局排序的索引结构中找到符合条件的索引项,从而得知相应记录的主键值.然后,依据主键值访问聚集索引从而定位完整的记录.集中式方案的最大挑战莫过于全局排序了的索引项的管理.一个最直接的方法是将这些索引项如同其它一般数据一样分布式地存储在数据管理系统中.以Bigtable[7]的开源实现HBase[8]的存储系统为例,图1展示了一个基于HBase的集中式方案的辅助索引的实现(TransactionalIndex[9])及其查询流程.图1中ROOT表记录了目标元组应当对应于哪一个META表,而META表则记录了目标元组的真实位置,二者共同构成了一个多级的聚集索引结构.检索过程中,首先通过第1,2,3步获得目标元组所对应的主键值,然后经过第5,6,7步根据主键值找到目标元组.通过这种方式,庞大的索引结构也可以享受到海量数据管理系统提供的可靠性、可扩展性和易管理性.但是,整个访问过程中的每个步骤都仅有一个单独的数据节点参与完成,这并未有效利用分布式计算资源带来的优势.从而,检索任务的响应时间将会非常长.区别于全局排序的方式,文献[10]在分布式环境中实现了B树索引[11],该方法将完整数据上的B树分拆为多个分支,并将各个分支分布存储于各个数据节点上.各个数据节点均记录有分支的分布情况.检索B树需要在向下搜索的过程中定位目标分支的宿主节点并在宿主节点中获取命中的元组.该方法为大规模B树的分布式存储和统一管理提供了指导.文献[12]将计算节点的点对点组织形式抽象为凯莱图(CayleyGraph)[13],并在此基础之上集中管理全局的索引结构.此类方法的特点在于索引结构在逻辑上是被集Page4中管理的,各种具体方法均是从为大规模数据上完整的大型索引结构设计高效的管理机制入手来实现索引的.而索引结构本身在逻辑上与传统关系数据库中的集中管理模式无异.此类方法的优点在于它们是传统单节点数据管理系统中索引结构的直观扩展,其实现不需了解数据的真实分布情况;但是正如传统索引并未对分布式环境进行特别设计,此类方法也往往难以有效利用云环境所提供的分布式计算资源来提高索引的检索性能.2.2分布式方案在分布式方案中,各数据节点独立建立了各自管理的局部数据上的索引.分布式方案没有维护索引值的全局排序,而是将其局部化到每个单独的计算节点上.从而,计算节点相互之间不存在依赖关系,这为检索请求的并发执行带来了便利.当拥有索引的属性上的检索请求到达时,检索任务将被分发到所有的计算节点上并以并发的方式执行.最终的检索结果将是所有数据节点上返回结果的并集.每个计算节点上数据的索引将被独立维护,因此其局部的索引结构具有很强的灵活性:各节点使用的索引技术可以是同构的,例如均使用B+树索引;也可以是异构的[14],例如有的节点上使用B+树索引,而其它的节点上则使用位图索引等等.异构的局部索引允许各计算节点依据自身的计算资源来选择所使用的索引技术,例如,主存资源不充足的节点可以使用B+树索引并仅在主存中维护B+树靠近根部两层的节点.而CPU计算能力较差的节点则可以使用位图索引,从而利用位图上的逻辑操作来回避计算开销.IndexedHBase[15]是基于HBase的分布式方案辅助索引的一个代表性的朴素实现.图2展示了分布式方案中索引的组织方式.在此类方法中,索引结构依附于数据本身而被分散到各个数据节点中.节点之间具有独立性.检索任务也分配到各节点中独立执行,从而,并行计算资源能够得到很好地利用.但是,特别以最常用到的等值条件为代表,由于绝大多数检索任务的目标记录数量相对较少,在分布式集群中并行地执行该任务往往造成很多未存储任何目标记录的计算节点也触发了检索过程,而最终将返回空集.在检索任务频繁的情况下,这一并行执行过程将会耗费大量的不必要的计算资源,最终将会降低系统的吞吐量.2.3分布式方案的扩展也应当注意到,一些研究工作在采用分布式方案来组织局部索引结构的同时,使用了特殊的全局结构来加快对有效数据节点的定位.文献[16]在云环境中设计了全新的通信协议RT-CAN,用于管理一个全局索引结构和各数据节点上的局部多维数据R树索引.首先检索全局索引,然后定位到含有目标元组的局部R树索引上继续检索.文献[17]与文献[16]拥有相同的项目背景,其作者以分布式方式为各数据节点上的本地数据构建局部的B+树索引,另外,各局部B+树上的某些结点被公开出来并通过BATON[18]协议统一组织成为一个全局结构CG-index.检索请求到达时,首先CG-index被检索,定位到局部B+树上的某些结点之后继而转入相应的局部数据节点继续搜索.在这类方法中,通过维护一种特殊的全局索引结构,分布式方案的基本思路得以扩展,从而可以在充分并行的同时,避免了一些不必要的检索代价.然而,该类方法往往需要通过较为复杂的通信协议来组织全局索引结构的各个部分.因此,访问全局结构的过程将引发大量的网络通信开销.在复杂的拓扑网络中,这一过程将带来严重的响应延迟.另外,并不是所有的云环境都向开发人员暴露了完整的网络通信接口,在通信接口被高度抽象了的云环境中,复杂的网络通信协议的实现将受到致命的限制.3分片位图索引集中式方案和分布式方案各有优势.集中式方案拥有被索引字段的全局信息,可以有效地避免不必要的查询开销,但是,全局信息的维护与访问也带来了额外的代价,致使查询的响应速度受到影响.分布式方案能够充分利用并行计算资源的优势,但是由于缺乏被索引字段上值的整体分布信息,即使对于目标值仅局部分布在少数几个数据节点上的检索请求,也会导致触发整个集群上的并行检索.而事实上,其中大部分数据节点上返回的命中集合都将是空集.因而,大量的并行计算资源被白白浪费了.本节将介绍一种折中的解决方案:分片位图索引(regionalbitmapindex).该方法既具有分布式方案Page5的高并行度特点,从而带来了快速的请求响应,同时又拥有如同在集中式方案中那样了解全局的数据分布信息的优势,进而尽最大努力避免了不必要的检索代价,提高了系统的查询吞吐量.相比使用特殊的通信协议而实现的分布式方案的诸扩展方法,本方法通过引入属性值的全局排序机制来彻底避免不同数据节点之间的通信.从而,使得开发人员能够从设计复杂通信协议的任务中解放出来.这一特点降低了本方法对网络拓扑和通信系统的依赖,从而提高了查询效率.另外,通过这种方式,本方法将无需访问目标云环境所暴露的网络通信接口,因此能够适用于更广泛的云存储环境.下面将在3.1节中介绍分片位图索引的核心技术及其构建方法;3.2节集中介绍各类数据操纵操作所引起的索引的维护算法;3.3节阐述使用本索引结构进行检索的算法流程.3.1索引结构本节首先介绍分片位图索引的核心技术:字段值上的全局排序机制以及位图索引的分片机制(全局排序机制能够为各数据节点提供一定的全局信息,即局部数据在全局值域中的分布情况;而位图索引的分片机制使得索引结构局部化,从而使不同数据节点上的检索任务充分独立,以便并发执行).然后综合运用上述技术给出了分片位图索引技术的构造方法及其存储结构.3.1.1字段值的全局排序考虑在数值属性A1,A2,A3,…,Af共f个属性上建立的索引,首先将各属性Ai的值域切割为ci个子域.如果属性取值为离散值,则可将每一个取值单独划分为一个子域;如果为其它类型,则可将其二进制表示作为其位串值,例如字符串中各字符的ASCII码组成的二进制位串;并按照二进制位串的数值大小对属性值域进行划分①.设值域切割所得子域所构成的集合为Ci,那么子域的笛卡尔积Des1…f=C1×C2×C3×…×Cf的大小为B=∏f使用一个长为∑ft的属性Ai的第j个子域对应的位为bi,j,那么该元组所对应的位串可表示为b1,1b1,2b1,3…b1,c1,b2,1b2,2b2,3…b2,c2,…,bf,1bf,2bf,3…bf,cf.给定任意元组t及其所对应的位串,i∈[1,f]有且仅有唯一的一个j∈[1,ci]使得bi,j=1.因此该位串的所有合法取值可一一对应于上述子域笛卡尔积Des1…f中的元素.从而,任意元组所对应的位串将拥有B=∏f上的子域划分的情况下,将元组对应的位串的所有可能取值按照从小到大的顺序排序.位串的所有可能的取值可一一对应到一个排序值r∈[1,B]上.这样,任意元组在被考察的数据字段上的取值均对应于一个唯一的排序值r.至此,完成了对所有元组上的索引值的全局排序.下面以为某公司员工信息表中的两个属性建立索引为例,介绍从元组生成对应的位串,进而计算对应的排序值的过程.例1.给定某公司的员工信息表,设该表属性A1指示员工性别,包含male和female两个取值;属性A2记录员工薪水,取值为[0,3000]范围内的整数.首先,属性A1的值域被分割为两个子域,分别仅包括取值male和female;属性A2的值域被分割为3个子域:[0,1000],(1000,2000]和(2000,3000].考虑员工Emp1,设其性别为男性,薪水为1300,那么该员工对应的位串为‘10010’.其中前两位‘10’表示属性A1上取值为male,后三位‘010’表示其薪水在范围(1000,2000]内.再考虑员工Emp2,设其性别为女性,薪水为2600,那么该员工对应的位串为‘01001’.其中前两位‘01’表示属性A1上取值为famale,后三位‘001’表示其薪水在范围(2000,3000]内.根据以上对属性值域的划分,可知属性子域的笛卡尔积的大小为B=2×3=6.任意元组所对应的位串可能的取值有6个,将其按照从小到大的顺序排列可得‘01001’、‘01010’、‘01100’、‘10001’、‘10010’和‘10100’.对比可知,员工Emp1对应的位串排在第5位,而员工Emp2对应的位串排在第1位.因此,员工Emp1和Emp2对应的位串的排序值分别为5和1.3.1.2索引的分片类似于上述分布式方案,本方法同样采用各数据节点独立管理局部数据上索引的方式,以便提高检索执行时的并行度.在每个数据节点上,对该节点上存在的元组所对应的位串的全局排序值建立B+树.树的叶结点中的每个键都对应于一个排序值,并记录一个长度为本数据节点所管理的元组总数的位①值域的划分规则对利用本文所介绍索引进行查询的结果的Page6图,其中拥有该排序值的元组所对应的位被置1,其它位被置0.这里将其称为元组位图.易见,单个数据节点上的B+树的所有叶子结点上最多拥有B个键,因此最多存在B个不同的元组位图.继续例1中的假设,例2介绍了某个数据节点上的局部位图索引的生成过程.例2.关于员工信息表的假设同例1.如表1所示,设该表在某个数据节点上共有7条记录.其中EmployeeID是该表的主键,BitString和Rank不是原表中的属性,而是由性别和薪水两个属性上的值生成的位串及其对应的排序值.依据各记录的排序值建立的B+树结构如图3所示(该B+树中的每个结点最多含有3个孩子结点).表1某数据节点上的初始元组及其位串值与排序值EmployeeIDGenderSalaryBitStringRankEmp1Male1300100105Emp2Female2600010011Emp3Female2100010101Emp4Male1900100105Emp5Male2300100014Emp6Male1100100105Emp7Female9000110033.1.3索引的创建综合运用以上两项技术,本节给出在云环境中分片位图索引的各组成部分以及其创建流程.本方法的动机来源于吸取并综合集中式方案与分布式方案的优点.首先对于给定的被索引属性上的取值,其对应位串存在唯一的全局排序值.据此,利用局部存在于各数据节点上的数据所对应的排序值为其构造局部的指示位图.该指示位图的长度为子域笛卡尔积的大小B.如果该数据节点上存在排序值为r的元组,则该数据节点上指示位图的第r位为1,反之则为0.例3.关于员工信息表的假设同例1.考虑例2中所述数据节点.由于B=6,因此该数据节点上的指示位图长度为6.又由于该数据节点仅包含排序值为1、3、4和5的元组,因此其指示位图应为101110.指示位图记录了局部属性值的存在情况.检索请求到达各数据节点时,首先通过比对指示位图来确定本数据节点是否包含目标元组,如果不存在,则直接返回空值,而不执行检索任务.例4.关于员工信息表的假设同例1.考虑例2中所述数据节点.由例3可知其指示位图为101110.假设用户发出了检索性别为女性且薪水范围在(1000,2000]内的员工的请求,据此可生成目标记录所对应的位串为01010,其排序值为2.从而,构造位串01000与指示位图进行逻辑按位与01000&101110,结果为全零.因此该节点上不存在目标元组,可直接返回空集作为本节点的检索结果.除了为每个数据节点构造指示位图之外,还应当建立局部数据上的位图索引.该局部位图索引由两部分构成:以全局排序值为键的B+树以及B+树叶子结点上所附着的相应字段值上的局部元组位图.在执行检索任务时,如果与指示位图进行比对的结果不为全零串,则需要触发B+树上的检索操作.根据以上分析可知,指示位图的创建过程中需要扫描局部节点上所存在的所有元组,此过程的计算代价正比于局部数据节点上元组的数量;对于局部位图索引,B+树的规模正比于子域笛卡尔积的大小B,与元组数量无关,元组位图的创建过程也需要扫描局部节点上所存在的所有元组,因此其代价亦正比于节点所管理的元组数量.通常情况下子域笛卡尔积的大小远小于元组数量,因此整个分片位图索引的创建代价正比于局部数据节点上所管理元组数量的最大值.3.2索引的维护以下各小节将依次介绍插入新元组、删除或更新已存在的元组以及数据发生迁移时,分片位图索引的维护算法.3.2.1元组删除当元组被删除时,需要对相应的指示位图和局部位图索引进行更新:首先根据元组的主键查找该元组所在的数据节点及其在该数据节点中的相对位置,依据该元组上的被索引属性的值所对应的排序值搜索该数据节点的局部位图索引B+树,设查找到的元组位图为rb,生成长度为该数据节点上存放的所有元组总数的全1位串tb,并置该元组对应位为0.然后,检查按位逻辑与rb&tb的计算结果是否为0,并按照计算结果对以下两种情况分别进行处理:Page7(1)如果为0,则表示该元组是所找到的叶子结点上唯一的对应元组,因此元组删除后,该叶子结点及其对应的元组位图也应当被删除,B+树的更新操作可在O(logm(B/m))时间代价内完成,其中m是每个B+树结点的孩子结点数目的最大值,其具体算法步骤请读者参考文献[9],此处不再重复;同时更新指示位图,通过逻辑与操作,置以该元组对应的排序值为下标的位为0.(2)否则,表示该元组不是拥有该排序值的唯一元组,因此无需更新B+树结构和指示位图.最后,从B+树叶子结点首指针开始扫描所有元组位图,通过向左移位,将各元组位图中被删除元组对应的位删除.例5展示了删除元组时更新索引的过程.例5.关于员工信息表的假设同例1.假设用户发出删除元组Emp5的请求.首先找到该元组所在的数据节点,即例2所示的数据节点,依据元组Emp5在属性性别和薪水上的值计算得到其对应的位图为10001,排序值为4,搜索该数据节点上的B+树得到对应的元组位图为rb=0000100.为元组Emp5生成位串tb=1111011.由于rb&tb=0000000.因此元组Emp5是该元组位图上记录着的唯一元组,删除该元组之后应当随之删除该叶子结点;同时需要更新该数据节点上的指示位图,即将指示位图的第4位置为0.最后通过向左移位操作删除B+树上各元组位图的第5位.元组删除之后的局部位图索引如图4所示,更新后的指示位图为101010.类似的,假设用户发出了删除元组Emp6的请求.注意由于元组Emp5已被删除,此时该数据节点上记录着6条元组,其中元组Emp6处于该局部数据节点的第5位.由计算可知rb=100110且tb=111101.从而,得知rbtb不为0,因而不需更新B+树的结构.只需通过向左移位操作删除元组位图中的第5位.删除后的B+树的结构如图5所示.图5删除元组Emp6后的局部B+树结构以及各元组位图3.2.2元组插入当新元组被插入时,同样需要对相应的指示位图和局部位图索引进行更新:首先根据元组的主键查找该元组应当插入的数据节点,并计算新元组在该数据节点中所对应的相对位置.从该数据节点上的局部位图索引B+树的叶子结点首指针开始扫描所有元组位图,通过向右移位操作,在各元组位图中新插入元组所对应的位置插入新的位,并置其值为0.然后,获取该数据节点上的指示位图ib.生成长度为B的全0位串cb,并按照该元组相应属性的值计算其排序值r,置第r位为1.最后,检查按位逻辑与ebcb的计算结果是否为0,并按照计算结果分两种情况进行处理:(1)如果为0,则表示该元组上被索引的属性值在该数据节点上为首次出现.首先更新指示位图为原指示位图ib和位串tb的按位逻辑或:ib←ib|tb.然后将排序值r插入到该数据节点的局部B+树中,并为排序值r构造长度等于该数据节点上所管理元组总数的全0元组位图,并将被插入元组对应的位置为1.同时,置指示位图的第r位为1.(2)否则,表示该叶子结点上已存在拥有相同的属性排序值的其它元组,因此不需要更新指示位图和B+树结构.而需要按照排序值搜索该数据节点上的局部B+树,并设置所找到的叶子结点上所附着的元组位图中新插入元组所对应的位为1.例6.关于员工信息表的假设同例1.根据例5,元组Emp5和Emp6已被删除.假设用户发出插入元组Emp8={Gender=female,Salary=1700}的请求.首先找到该元组应当被插入的目标数据节点,假设存储引擎决定将其插入到例2所述的数据节点中.由主键值Emp8可知,该元组应当位于本数据节点所维护的局部数据表的末端.遍历如图5所示的B+树的所有叶子结点上附着的元组位图,并将它们在末尾增加一位.依据元组Emp8在属性性别和薪水上的值计算得到其对应的位图为01010,其排序值为2.生成长度为6的条件位串cb=010000,由例5可知其指示位图为ib=101010.计算按位逻辑与Page8ibcb=000000,可知排序值2在该数据节点上为首次出现.因此更新指示位图ib←ib|cb=111010,并将排序值2插入到局部B+树(如图5所示)中,为其构造元组位图:010000.至此,更新后的B+树如图6所示.图6插入元组Emp8后的局部B+树结构以及各元组位图3.2.3元组更新如果该元组被更新的域包括主键,则执行一次该元组的删除操作,随后执行一次新元组的插入操作.否则,元组的主键未被更新,可以通过一次原地更新操作来完成索引的维护.原地更新的执行流程如下所述:首先根据元组的主键查找该元组所在的数据节点.然后依照旧元组的删除操作中的步骤依次对局部B+树的结构和指示位图进行更新;依照插入新元组操作中的步骤依次对局部B+树的结构和指示位图进行更新.最后由存储引擎更新该元组上的相应属性值.注意,由于被更新的元组在局部数据节点中的相对位置没有发生变化,因此无需扫描并更新所有的元组位图.3.2.4数据迁移在云环境中,为了平衡负载和保证充足的计算资源,数据的动态扩张将导致数据迁移操作被触发.随着元组的宿主节点的改变,参与迁移的数据节点上的索引结构也将发生变化.本文使用元组的删除和插入操作来完成数据迁移时索引结构的更新.例如欲将元组t从数据节点Node1迁移到Node2上,需要在Node1上执行元组t的删除操作并更新Node1上的指示位图和局部位图索引,然后在Node2上执行元组t的插入操作并更新Node2上的指示位图和局部位图索引.3.2.5维护效率从以上维护算法中可以看出,单条元组的插入、删除和更新所引起的索引维护代价相对于系统所管理的数据规模是常数级别的.因此即便在数据规模异常庞大情况下,面对频繁的元组插入、删除和更新请求,索引维护所带来的额外开销并不会引起数据管理系统计算代价的显著升高.3.3检索算法本节介绍当集群收到带有条件的查询请求时,利用索引完成查询的步骤.首先介绍单个检索条件下的检索算法.然后介绍对于复合的检索条件利用位图的逻辑运算在单个条件的检索算法基础上快速获得最终计算结果的方法.3.3.1单个索引上的检索条件对于查询请求中的单个索引上检索条件,主节点首先将检索条件转换为条件位串.例如,检索女性薪水为1500到1800之间的员工将得到位串01010;又如,检索条件薪水低于1300的男性员工将被转换为位串10110.注意,生成的条件位串应当覆盖检索条件所包含的所有可能性.然后主节点将条件位串并行地发送到所有的数据节点上,各数据节点分别将条件位串转换为对应的排序值的范围,接着生成长度等于B的全0位串cb,并将属于排序值范围内的位置为1.检查按位逻辑与ebcb的计算结果是否为0.如果为0则在该数据节点上直接返回空集作为计算结果;否则,在该数据节点的局部B+树上依次搜索各符合条件的排序值,将找到元组位图进行按位逻辑与,一一检查其计算结果中被置为1的位所对应的元组是否满足检索条件,最后返回所有满足条件的结果作为计算结果.算法1展示了分片位图索引上对于单个检索条件的检索算法的伪代码.检索算法.算法1.分片位图索引在单一检索条件下的输入:给定查询属性Aj上的划分Aj1,Aj2,…,Ajf以及输出:满足查询条件的元组的主键算法步骤:1.主节点收到查询请求.2.基于RBI索引在属性Aj上的分片规则,由查询条3.将条件位图cb和排序值集合r发送至所有计算节点.4.各计算节点并行执行步5~13:5.取得局部指示位图ib;6.计算逻辑按位与ib&cb;7.如果计算结果为全0串则该节点直接返回空集;8.否则,顺序执行步9~13:9.在局部B+树上搜索r中的每一个排序值;10.获取所有的命中叶结点上的元组位图rb1…t;11.计算rb←∪t(i=1)rbi;12.对于rb中每个1位:13.如果该位所对应的元组rec满足条件14.主节点向用户返回所有计算节点返回结果的并集3.3.2检索条件的复合通过将在同一数据节点上的不同属性上检索得Page9到的元组位图进行相应的按位逻辑运算,可以实现多个检索条件的快速复合.这充分利用了现代计算机能够对位图快速操作的计算优势.具体而言,其执行步骤为:首先主节点将各简单检索条件分别转换为条件位串,并将这些条件位串以及条件之间的复合关系分发到各个数据节点.然后,各数据节点分别依次执行各简单检索条件上的检索流程,从而查找到各简单条件所对应的元组位图,并将这些元组位图依照检索条件复合方法执行按位逻辑运算,得到最终的元组结果位图.最后,扫描该位图中为被置为1的位,并向主节点返回相应的满足检索条件的元组.表2对比实验所使用的集群环境主机名Master两颗Quad-CoreAMDOpteronTMSlaver1四颗Dual-CoreAMDOpteronTMSlave2两颗Quad-CoreAMDOpteronTMSlave3四颗Dual-CoreAMDOpteronTM另外,Master主机上部署了MySQL5.0系统以便于与传统关系型数据库管理系统进行对比.本文采用了如表3所示的2个数据集作为实验数据.各数据集均以RowKey字段的值的大小顺序来组织数据,并且在RowKey字段上创建有聚集索引.数据集A中的fromUser、toUser字段和数据集B中的ref字段均创建有分片位图索引.实验采用以下4种算法与本文所提出的分片位图索引(RBI)数据集元组数目大小A4.5亿52GBTwitter微博转发关系表3对比实验所使用的数据集属性数目B162万1TB自动生成的多媒体数据4对于各对比算法,本实验使用了相同的查询集.查询集按照命中与不命中数量比例11的原则随机生成.对不同的目标属性生成了不同的查询集.各项实验向系统连续发起查询集中的随机挑选出的查询请求.对于同一组对比实验中不同的检索算法,各查询请求按照相同的顺序发出.4.2分片位图索引的查询性能实验中分别为A、B两个数据集手工挑选了等值条件、非等值条件、复合条件各10条查询来组成4实验本节给出在云环境中,本文所提出的分片位图索引与现有基本算法在查询效率和查询吞吐量上的测试结果,以验证本文所介绍算法的有效性.4.1实验环境与设置我们在一个拥有4台分布式计算节点的集群上部署了一个小型的云环境.4台服务器位于同一个局域网中,相互之间通过千兆以太网连接.各计算节点的配置及其在集群中的角色如表2所示.进行对比:列无索引(MySQLQuery,MQ).(1)相同数据内容存储于MySQL中,相应属性(2)并发的全库扫描方式(FullScan,FS).(3)如第2.1节所述的辅助索引的集中式方案(4)如第2.2节所述的辅助索引的分布式方案(GlobalApproach,GA)的基本实现.(DistributedApproach,DA)的基本实现.查询请求集.以下图中记录了处理单条查询的平均响应时间.实验中以10个客户端同时连续地发起查询请求的方式对各算法的查询吞吐量进行测试.吞吐量以每分钟处理的查询数量来表示.图7和图8分别列出了以数据集A的fromUser属性上值的比较为条件的查询请求以及以fromUser与toUser两个属性上的复合检索条件构成的查询请求的检索效率与查询吞吐量.可以看到,云环境中各种索引的检索方法(GA、DA和RBI)都拥有优秀的Page10单条查询响应速度.其中,能够以并行方式执行检索任务的DA和RBI算法表现更加出色.在密集的查询请求并发地、连续地到达时,无索引的检索方法(MQ与FS)效率不佳.集中式方法(GA)的查询吞吐量也表现较差.这一现象在复合检索条件情况下尤其突出.对此,不难推断其原因在于集中式方法中检索算法无法被并行化且检索过程会触发较多的外存I/O.图9和图10分别列出了以数据集B的ref属性上值的比较为条件的查询请求的检索效率与查询吞吐量.由于数据集B数据规模较大,向MySQL导入数据的过程消耗了超过一周的时间,因此本文未对数据集B在MySQL上进行查询实验.总体而言在数据集B上各方法的性能的相对关系与数据集A上获得的结果类似.通过对比,尽管数据集B拥有的元组数目少于数据集A,但是由于数据总规模增大了数十倍,数据访问所带来的开销显著升高,全图10数据集B的ref属性上的查询吞吐量库扫描方法(FS)的检索效率被成倍地降低了,而对于其它使用索引来进行检索方法而言,所受到的影响相对较小.相比之下,分片位图索引(RBI)依然保持着显著的优势.概括而言,两组数据集上所得到的实验结果是基本一致的:得益于云环境的强大计算资源,即便是全表扫描算法(FS),相对于传统单节点数据库上的粗暴检索算法(MQ)也具有非常明显的优势.对比云环境中各种索引集中上的检索算法,可以发现,本文提出的分片位图索引技术(RBI)在查询的响应时间和吞吐量上都大大优于其竞争对手,这一优势在复合检索条件情况下尤其突出.5总结本文以云环境的成熟发展为契机,着眼于云环境中大规模数据上的辅助索引机制的设计与实现.通过分析对比了两种截然不同的云环境中辅助索引的基本逻辑结构,即集中式方案与分布式方案,在吸收二者的优势并规避其缺陷的基础上,提出了具有良好可扩展性的分片位图索引技术来对云环境中海量数据的检索任务提供高效支持.其特点在于充分发挥两种基本方案中的优势,既能够使云环境中并行计算资源得到很好的利用,从而提高了单条查询的响应速度,又能够通过局部节点所掌握的全局信息而规避不必要的检索代价从而使在大量检索请求并发到达时查询吞吐量得以保证.通过在真实数据上进行实验测试,分片位图索引被证实拥有优于其它方法的性能表现.
