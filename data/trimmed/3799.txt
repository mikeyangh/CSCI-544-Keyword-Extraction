Page1同构DVS集群中基于自适应阈值的并行任务节能调度算法刘伟1),2),3),4)尹行1)段玉光1)杜薇1),2),3)王伟3),4)曾国荪3),4)1)(武汉理工大学计算机科学与技术学院武汉430063)2)(武汉大学软件工程国家重点实验室武汉430072)3)(同济大学嵌入式系统与服务计算教育部重点实验室上海200092)4)(同济大学计算机科学与技术系上海200092)摘要目前,高能效的并行任务调度算法设计已经成为集群系统的研究热点.现有基于复制的节能调度算法主要利用阈值平衡系统的性能和能耗,但随机设置的阈值无法根据性能需求和环境参数等特征自动调节,导致调度算法存在一定的局限性.文中提出一种面向同构集群系统的两阶段节能调度算法ATES(AdaptiveThreshold-basedEnergy-efficientScheduling).首先,设计一种基于自适应阈值的任务复制策略,该策略能够自动计算最佳阈值,利用该阈值获取近似最优的任务分组.然后,将各分组任务调度到支持DVS的处理器上,并充分利用任务之间的空闲时间降低处理器电压.该算法将任务复制策略与电压调节技术有机结合,在调度过程中能够自动调整阈值,有效提高调度算法的能效.为了验证ATES算法的合理性,通过典型应用进行仿真实验,并与常见任务调度算法进行比较,结果表明ATES算法能够更好地实现性能和能耗之间的平衡.关键词高性能集群;动态电压调节;任务复制;自适应阈值;调度算法1引言传统集群计算的研究主要侧重于提高系统性能.近年来,由于微处理器、通信设备和存储设备的高功耗,集群系统消耗了巨大的能量,研究重点开始转向高性能集群的能耗管理问题.据统计,2008年服务于互联网的路由器、服务器、交换机和数据中心等各种设备总共消耗8680亿度电,占全球总耗电量的5.3%[1].按照目前的增长趋势,到2025年,IT行业平均能耗将达到2008年的5倍[2].很显然,高性能和低能耗是集群系统的两个重要需求[3],忽略其中任何一个需求都是不合理的[4].目前,基于任务复制的调度算法主要利用处理器上的空闲时间片,有选择地复制前驱任务,将父任务和子任务分配到同一个处理器上,缩短调度长度.研究表明,基于任务复制的调度策略能有效改善并行任务的性能[5-7],特别是对于通信密集型并行应用,能够减少大量通信时间.动态电压调节DVS(DynamicVoltageScaling)技术是一种新型硬件节能机制,其基本思想是在不影响处理器正常运行情况下降低电压和频率,使得处理器不总以最高电压工作,从而降低能耗.在并行任务中采用DVS技术能够在不影响性能的前提下降低系统能耗.任务复制策略和电压调节技术一直被分开研究,二者并没有有机结合.其中,任务复制策略改善系统性能,电压调节技术降低处理器能耗.然而,传统的任务复制算法通过尽可能地复制任务,缩短调度长度,忽略了复制任务本身带来的额外能耗开销.尽管有些算法通过阈值控制复制粒度以改善能效,但固定阈值存在一定的局限性[1,4].此外,越来越多的研究表明,在集群系统中除了处理器外,通信设备同样会产生大量能耗.特别是随着下一代高速互联网络的出现,网络通信的高能耗问题变得更加严峻.针对上述问题,本文提出一种新的并行任务调度策略———基于自适应阈值的并行任务节能调度算法ATES(AdaptiveThreshold-basedEnergy-efficientSchedulingalgorithm),将任务复制策略和动态电压技术有机结合,在保证性能的前提下降低能耗.ATES算法利用阈值控制任务的复制,即选择性地复制任务的最佳前驱,以平衡性能和能耗.本文提出的调度策略与已有研究存在本质区别.首先,ATES算法可以根据调度环境和性能需求自动计算阈值,根据最佳阈值获取近似最优的任务分组,进而节省能耗.其次,ATES算法能够根据任务之间的依赖关系寻找空闲时间,然后利用DVS技术调整处理器频率和电压,以节省计算能耗.最后,ATES算法同时考虑了计算能耗和通信能耗.本文第2节介绍相关工作;第3节分析系统模型,包括集群模型、任务模型和能耗模型;第4节详细描述和分析ATES算法;第5节给出实验环境以及仿真结果;第6节得出结论并展望未来工作.2相关工作近年来,国内外学者在集群系统的并行任务调度方面取得了一定的研究成果.Darbha等人[5]提出一种基于任务复制的并行任务调度算法TDS(TaskDuplicationScheduling),利用处理器的空闲时间复Page3制关键路径的前驱任务,减少传输延迟,提高系统性能.然而,TDS提高系统性能的同时却增加了计算能耗,因为任务会复制到多个处理器重复执行.为了解决TDS算法的问题,Zong等人[4]提出了两种节能调度策略———EAD(Energy-AwareDuplication)调度算法和PEBD(Performance-EnergyBalancedDuplication)调度算法,通过设定阈值控制前驱任务的复制,以平衡系统性能和能耗.山东大学的李新等人[8]提出一种处理器合并的优化算法PRO(ProcessorReductionOptimizing),根据任务最早开始时间和最早结束时间查找处理器空隙,将轻负载处理器上的任务重新分配到其它处理器上,进行处理器的合并,降低计算能耗.但是以上算法均无法根据性能需求和系统参数自动调整阈值,存在一定的局限性.在高性能集群中,基于动态电压调节的调度策略研究已经受到了众多学者的关注.Lee等人[9-12]针对异构集群提出基于动态电压调节技术的能效调度算法,以平衡系统性能和能耗.MaYan等人[13]提出基于DVS的节能调度算法,利用整数线性规划ILP(IntegerLinearProgramming)选择并行任务的执行频率或电压,优化处理器能耗.Wang等人[14-15]提出的高能效调度算法,通过寻找并行应用中非关键路径上的空闲时间,能够在不增加执行时间的前提下,有效减少处理器的计算能耗.然而,基于动态电压调节的调度算法只考虑了处理器的计算能耗,忽略了网络通信能耗的影响,甚至完全忽视了处理器的空闲能耗.Ruan等人[16]提出的调度算法能有效降低系统能耗,但是性能损失较大.国防科学技术大学的林一松等人[17]和王桂林等人[18]提出针对CPU-GPU异构集群的能量优化算法,旨在降低系统的整体能耗.国防科学技术大学的朱晓敏等人[19]提出一种弹性节能调度策略,用于动态调度异构计算系统中非周期独立任务.软件学报在2012年第2期出版了《高能效软件设计、分析和实现方法》专刊[20],介绍了国内相关研究成果.目前,绿色网络的研究已经取得了一定成果.中国科学院计算技术研究所的张法等人[21]从全局角度研究网络能耗问题,提出优化的节能路由算法.清华大学的林闯团队[2]将能量看成一种系统资源,从资源分配角度对绿色网络的评价机制进行深入分析,为构建绿色网络的评价体系奠定了基础.尽管如此,对于诸如GigabitEthernet、Infiniband、Myrinet和QsNetII等常用的高速互连网络,功耗管理技术仍有待深入研究.3系统模型本节给出同构集群模型、并行任务模型和系统能耗模型,其中能耗模型包括计算能耗和通信能耗两部分.表1列出了本文研究中主要用到的参数及定义.参数viticcictivikτikpred(vi)任务vi的前驱任务集succ(vi)任务vi的后继任务集pjVkfkPNhighest处理器的最高功耗Vhighest处理器的最高执行电压fhighest处理器的最高执行频率PL网络通信功耗eijcij|V|有向无环图任务总数|E|hrEST(vi)任务vi的最早开始时间ECT(vi)任务vi的最早完成时间FP(vi)任务vi的最佳前驱LAST(vi)任务vi的最迟允许开始时间LACT(vi)任务vi的最迟允许完成时间3.1同构集群模型同构集群系统是高速网络Link将一系列计算节点P={p1,p2,…,pm}连接组成的分布式系统.由于本文研究的集群系统支持动态电压调节技术,假设每个处理器都有h个不同的电压等级,可表示为p{V1,V2,…,Vh},其中V1,V2,…,Vh按降序排列,其对应的频率为{f1,f2,…,fh}.本文主要研究同构集群,处理器节点和网络互连设备都是同构的,因此集群中所有节点具有相同的处理能力,而且任意两个节点之间的传输能力相同.3.2并行任务模型具有依赖关系的任务集可以抽象为一个有向无环图(DirectedAcyclicGraph,DAG).一个DAG可以表示为G(V,E),其中V={v1,v2,…,vn}代表任务集,E表示消息集.对于集合V中的每个任务,ti是任务vi以最高电压和频率执行时所需的计算时Page4间,cci是计算周期,不随处理器电压的变化而变化,其中1in.特别地,当一个任务具有空闲时间时,这个任务可以被分为h个任务块{vi1,vi2,…,vih},每个任务块vik在工作电压Vk下的执行时间是τik.此外,用eij={vi,vj}∈E表示从任务vi传输到vj的消息,而传输该消息所需的时间用cij表示.在实际网络中,通信时间cij表示数据从发送到被接收的时间间隔,主要由传输时间和延迟时间组成.用succ(vi)表示任务vi的后继节点集合,pred(vi)表示任务vi的前驱节点集合.对于一个DAG,如果某个任务没有前驱节点,则称该任务为入口任务,如果某个任务没有后继节点,则称该任务为出口任务.本文假设任一DAG仅具有一个入口任务和一个出口任务,这样的假设是合理的.如果某个DAG有多个入口任务或多个出口任务,则可以利用若干个通信代价为零的边将所有入口任务或出口任务连接到一个计算代价为零的虚拟任务,从而构造出只有一个入口任务和一个出口任务的DAG.3.3系统能耗模型3.3.1计算能耗CPU主要包含活动功耗和空闲功耗,动态功耗在处理器活动功耗中所占比例最大,根据CMOS逻辑电路中的功耗原理,动态功耗Psw可表示为其中,α代表切换速率;CL表示负载电容;Vdd代表供电电压;fclk表示时钟频率.给定处理器的最大功耗,最大电压以及最高频率,可以利用式(1)推导出该处理器在电压Vi和频率fi下的活动功耗:则所有任务的总活动能耗可以通过式(3)计算得出:ENactive=∑n其中cti代表任务vi副本的个数.假设PNidle是处理器的空闲功耗,即处理器不执行任务时的功耗,makespan为出口任务的完成时间,即并行任务的调度长度,则所有处理器节点的空闲能耗表示为ENidle=PNidle·m·makespan-∑n因此,处理器的总能耗根据式(3)和(4)表示为3.3.2通信能耗同构集群中互联网络具有相同的传输速率和通信功耗,分配到相同节点的两个任务之间通信时间忽略不计.用elij表示传输数据eij=(vi,vj)∈E所消耗的能量,则其中PL代表网络的通信功耗.因此,网络上的总通信能耗可以表示为其中参数inij的定义见式(8).inij=0,如果任务vi和vj被调度到同一个处理器上1,{否则最后,整个集群系统上的总能耗表示为4并行任务的节能调度算法4.1算法的总体结构本文提出的基于自适应阈值的节能调度算法ATES,适用于支持动态电压调节的同构集群系统.ATES算法的总体结构如图1所示,可分为4个步骤:(1)获取最佳阈值;(2)任务分组;(3)任务分配;(4)动态电压调节.首先,ATES算法根据性能需求和系统参数自动计算阈值,根据得到的最佳阈值,获取近似最优的任务分组,并利用任务复制策略,缩短Page5调度长度.其次,ATES算法利用动态电压调节技术,减少每个处理器的计算能耗.最后,执行任务得到运行结果.4.2算法的详细描述4.2.1生成初始任务调度序列为了满足并行任务的优先约束关系,定义概念bottom,表示从当前任务到出口任务所有路径中总计算时间的最大值,计算bottom时通信时间不作考虑.需要注意的是,并行任务的调度长度不会小于入口任务的bottom值.任务vi的bottom值定义如下:bottom(vi)=ti,烄烅maxvk∈succ(vi)(bottom(vk))+ti,烆在获得所有任务的bottom值后,就能得到一个按照bottom值升序排列的初始调度序列.4.2.2重要参数计算EST(vi)=0,烅烄mineji∈(Emaxeki∈E,vk≠vj烆任务vi的最早开始时间EST(vi)可以通过式(11)自上而下进行计算,即从入口任务开始到出口任务终止.入口任务的最早开始时间为0,其它任务的最早开始时间通过式(11)计算得到.在得到任务vi的最早开始时间之后,就可以计算其最早完成时间ECT(vi),计算公式如下:任务vi的最佳前驱FP(vi)可以用式(13)计算得到,该参数表示将当前任务与其前驱调度到同一处理器上,可以减少并行任务的整体执行时间.FP(vi)=vj,vj∈pred(vi),vk∈pred(vi)j≠k&&ECT(vj)+cjiECT(vk)+cki(13)任务vi的最迟允许完成时间LACT(vi)可以通过式(14)计算得到.采用自下而上的方式,即从出口任务开始计算到入口任务终止.出口任务的最早允许完成时间等于其最早完成时间,其它任务的最迟允许完成时间通过式(14)计算得到.LACT(vi)=在得到任务vi的最迟允许完成时间之后,就可以计算其最迟允许开始时间LAST(vi),计算公式如下:4.2.3任务分组在该步骤中,首先获取最佳阈值,然后利用任务复制策略在该阈值下对任务进行分组.本文所提出的任务复制策略,可以根据系统参数和调度长度自动调节阈值,获取近似最优的任务分组.在进行任务分组之前,首先需根据4.2.1小节所述方法得到初始调度序列queue,然后根据4.2.2小节的描述计算分组所需的重要参数.在进行任务分组时,最佳阈值的计算分3步进行,伪代码见算法1.算法1.最佳阈值计算.输入:G(V,E),PNhighest,PL,Assigned_Makespan输出:最佳阈值/1.获得阈值的变化范围/1.min_threshold←65535,max_threshold←0;2.v←queue中的第一个任务;3.WHILE(v≠queue中的最后一个任务)DO4.u←FP(v);5.IF(LAST(v)-LACT(u)<cuv)6.moreenergy←enu-eluv;/增加能耗/7.lesstime←LACT(u)+cuv-LAST(v);8.ratio←moreenergy/lesstime;9.IF(ratio<min_threshold)THEN10.IF(ratio<0)THEN11.min_threshold←0;12.ELSE13.min_threshold←ratio;14.ENDIF15.ENDIF16.IF(ratio>max_threshold)THEN17.max_threshold←ratio;18.ENDIF19.ENDIF20.v←thenexttaskofqueue;21.ENDWHILE22.IF(max_threshold==0)THEN23.optimal_threshold←0;24.ELSE25.min_schedule_len←Grouping(max_threshold);26.max_schedule_len←Grouping(min_threshold);27.optimal_threshold←min_threshold-1;Page628.根据调度长度的变化范围,设定一个满足用户需29.IF(Assigned_Makespan<min_schedule_len)THEN30.optimal_threshold←max_threshold;31.BREAK;32.ELSE33.WHILE(optimal_threshold<=max_threshold)34.temp_sched_len←Grouping(optimal_threshold);35.IF(temp_sched_len>Assigned_Makespan)THEN36.optimal_threshold++;37.ELSE38.BREAK;39.ENDIF40.ENDWHILE41.ENDIF42.ENDIF43.RETURNoptimal_threshold.下面依次介绍算法1的3个步骤.第1步,计算影响任务复制的阈值变化范围.首先,分别将最小阈值和最大阈值初始化为65535和0(见1行).这样设置是因为,当算法1中的最大阈值为CPU功耗或网络功耗的若干倍(1~100倍)时通常就可以满足需求,另一方面阈值在大于零的情况下才能有效控制任务复制.接着,算法1从序列queue的初始任务开始遍历整个序列,假如复制当前任务的最佳前驱,计算复制此前驱任务所增加的能耗(moreenergy)以及减少的调度长度(lesstime)(第4~8行).算法2需将增加能耗量与减少调度长度的比值与给定阈值比较,因此这里将最大比值和最小比值分别设定为动态阈值的上界和下界,即最大阈值(max_threshold)和最小阈值(min_threshold)(第9~18行).如果最大阈值等于0,则返回0作为最佳阈值;否则,执行接下来的两步.第2步,根据任务分组算法(算法2)计算得到最大调度长度(max_schedule_len)和最小调度长度(min_schedule_len)(第25~26行).这里,最大调度长度在最小阈值下求得,而最小调度长度在最大阈值下求得.根据复制策略中的条件可知,复制活动都是在不影响系统性能的前提下进行的,因此,并行任务的调度长度随着阈值的增加不可能增大,只可能减小.第3步,获得最佳阈值.首先指定一个满足用户实际需求的调度长度,该数值由用户参照调度长度变化范围输入(第28行).如果用户设定值小于最小调度长度(min_schedule_len),那么算法1将最大阈值作为最佳阈值返回(第29~31行),因为本文所提出的算法只能将性能优化到min_schedule_len.否则,算法1将从最小阈值开始对整个阈值区间进行遍历,并计算当前阈值下的任务调度长度,直至计算所得的调度长度小于所指定的调度长度(第32~38行).也就是说,一旦系统性能要求得到满足,循环即刻终止,并返回当前阈值作为最佳阈值.在求得最佳阈值后,利用分组策略对任务进行分组.分组策略简写为Grouping(threshold),伪代码见算法2.算法2.任务分组算法Grouping(threshold).输入:G(V,E),PN,PL,threshold输出:分组结果和调度长度1.v←queue中的第一个任务;2.i←0;3.当前分组←group[i];4.当前分组←v;5.WHILE(未分配的任务≠NULL)DO6.u←FP(v);7.IF(u已经被分配)THEN8.IF(LAST(v)-LACT(u)<cuv)THEN9.moreenergy←enu-eluv;//增加能耗10.lesstime←LACT(u)+cuv-LAST(v);11.ratio←moreenergy/lesstime;12.IF(ratio<=threshold)THEN13.当前分组←u;14.ELSE15.对于v的另一个前驱z,z≠v,16.IF(ECT(u)+ccuv==ECT(z)+cczv17.u←z,当前分组←u;18.ELSE19.i++;20.u←queue中下一个未分配任务;21.当前分组←下一个可行任务组group[i];22.ENDIF23.ENDIF24.ELSE25.执行与第13~20行相同的操作;26.ENDIF27.ELSE当前分组←u;28.v←u;29.ENDIF30.IF(v为结束任务)THEN31.i++;32.v←queue中下一个未分配任务;Page733.当前分组←下一个可行任务组group[i];34.当前分组←v;35.ENDIF36.ENDWHILE37.RETURN分组结果和调度长度.在任务分组过程中,从序列queue的第一个任务开始,逐个考虑是否将当前任务的最佳前驱分配或复制到当前处理器上(第1~6行).如果当前任务的最佳前驱没有分组,则将其分配给当前分组(第26行).假设v为当前任务,其最佳前驱u已被分配,如果复制任务u到任务v所在的组可以提高系统性能,同时增加的能耗有限,那么任务u将会被允许复制到任务v所在的分组(第8~13行).否则,寻找任务v的另一个未分配前驱z,判断任务z是否满足条件ECT(z)+cczv==ECT(u)+ccuv.如果存在这样的任务z,将其分配给当前分组,并从任务z开始继续往后搜索(第15~21以及第25行).一旦任务复制失败(第18~21行)或者搜索到达入口任务(第30~34行),则当前分组结束,下一个任务组从序列queue的第一个未被分配的任务开始继续执行(第20和32行).重复上述过程,直至所有的任务被分配,算法2结束(第5行).4.2.4任务分配在4.2.3小节中,已经按照最佳阈值控制下的分配策略对并行任务进行了分组.在本文中,处理器是同构的,即所有处理器的处理能力均相同,因此可以将各分组任务随机分配到空闲处理器上,各个处理器根据空闲时间独立调节电压,以提高系统能效.4.2.5动态电压调节通过任务调度,每一个分组已被分配到其对应的处理器节点.首先根据任务分组结果,以及任务之间的优先约束关系,计算各个任务的空闲时间,然后确定每个任务块在其相应电压/频率下的执行时间(τi1,τi2,…,τih).本文采用的动态电压调节技术,并不是将具有空闲时间的CPU工作频率或电压调节到某个近似最优值,而是根据条件方程和目标方程,利用一种常用的整数线性规划求解工具①确定任务在各执行频率或电压下的计算时间.对于任务vi,计算周期、执行时间和时钟频率之间的关系可表示为cci=ti·fmax,这里计算周期cci对任务vi而言是常量,fmax为处理器最大频率.对于具有空闲时间的任务,可以将其分为h个任务块,cci可表示为其中,{τij,i=1,…,n,j=1,…,h}∈Integer(17)由于任务之间存在优先约束关系,每个任务只有在其所有前驱任务都已执行完毕之后才能开始执行.当任务vi在最高电压下执行时,其执行时间ti即为最短执行时间.因此,任务vi的实际执行时间在区间[ti,MAET(vi)]内取值,这里MAET(vi)表示任务vi的最长允许执行时间(MaximumAllowableExecutionTime,MAET).在给出参数MAET的表达式之前,首先介绍另一个重要参数ST(vi)———任务vi的开始执行时间(StartTime,ST).每个任务的开始执行时间可以利用式(19)通过自上而下的方式计算得到.ST(vi)=0,pred(vi)=烄(maxmaxvj∈pre(vi),group(vi≠vj)(ST(vj)+ti+cij),烅maxvj∈pre(vi),group(vi=vj)(ST(vj)+ti)),烆因此,任务vi的最长允许执行时间MAET(vi)可以用式(20)表示.MAET(vi)=ti,烄(minminvj∈succ(vi),group(vi≠vj)(ST(vj)-ST(vi)-cij),烅minvj∈succ(vi),group(vi=vj)(ST(vj)-ST(vi))),烆在式(19)和(20)中,group(vi=vj)代表任务vi和任务vj在同一处理器上,group(vi≠vj)代表任务vi和任务vj不在同一处理器上.本文运用动态电压调节技术计算各个任务在处理器上的最小计算能耗,由于同时考虑了处理器的活动功耗和空闲功耗,任务vi的能耗目标方程如下式所示:mineni=eni需要强调的是,如果某个任务没有空闲时间(即①lp_solve:Opensource(Mixed-Integer)LinearProgram-Page8ti=MAET(vi)),那么该任务只能在最高电压下执行,因此这类任务的计算能耗可表示为对于上述问题,可以利用整数线性规划求解,并根据条件(16)~(18)和目标函数(21)来获取近似最优解.算法3详细描述了如何对存在空闲时间的任务进行电压调节.首先,计算每个任务的开始执行时间ST(第1~3行),然后遍历序列queue中的任务,计算出每个任务的最长允许执行时间MAET(第4~6行).遍历所有处理器,如果当前处理器pj处于空闲状态,则将该处理器的工作电压/频率调节到最低(第9~11行);如果调度到当前处理器上的任务vi无空闲时间,则此任务的执行电压/频率一直保持在最高频率水平(第12~13行).否则,算法3首先利用整数线性规划方法计算出当前任务vi在各电压/频率下的执行时间,然后动态调节当前处理器pj的频率到相应水平,使得任务vi在每个频率上执行一段时间(第14~16行).算法3.动态电压调节.输入:G(V,E),支持动态电压调节技术的处理器输出:任务在其相应的频率/电压下的执行时间1.FOR(i←1ton)DO//n为任务个数2.利用式(19)计算ST(vi);3.ENDFOR4.FOR(queue中的每个任务vi)DO5.利用式(20)计算MAET(vi);6.ENDFOR7.FOR(j←0tom-1)DO//m为处理器个数8.FOR(处理器pj上的每个任务vi)DO9.IF(pj←空闲)THEN10.pj←最低电压/频率;11.ENDIF12.IF(MAET(vi)==ti)THEN13.vi←最高电压/频率;14.ELSE15.在条件方程(17)~(19)和目标方程(21)下,利16.动态调节处理器pj的频率到相应水平,并且使17.ENDIF18.ENDFOR19.ENDFOR定理1.算法ATES的时间复杂度是(O(rh+4.3算法的时间复杂度分析log|V|)|V|+∑nr是阈值的取值范围;|V|表示DAG图中任务总个数.证明.本文4.2节对整个ATES算法进行了描述.在4.2.1小节中,算法ATES遍历DAG图中的所有任务以计算任务的bottom值,其时间复杂度为O(|E|),|E|表示所传递的信息数量.接着,对所有任务的bottom值进行排序来生成初始任务序列,其时间复杂度为O(|Vlog|V||),|V|表示任务总数.本部分的时间复杂度为O(|V|log|V|+|E|).在4.2.2小节中,计算所有参数(EST,ECT,FP,LACT,LAST),该过程的时间复杂度为O(3(|V|+|E|)).在4.2.3小节中,任务分组过程总的时间复杂度为O((3h+hr+1)|V|),其中h代表DAG图的深度,r是阈值的取值范围.首先,算法1遍历所有任务来获取阈值的取值范围,其时间复杂度为O(|V|);利用算法2求调度长度的时间复杂度为O(2h|V|).另外,求得最佳阈值的时间复杂度为O(hr|V|),这是因为,在最坏情况下,算法1需要遍历所有阈值.因此,算法1的时间复杂度为O((hr+2h+1)|V|).最后,算法2在最佳阈值条件下利用任务复制策略进行任务分组,所有的任务被分配到一个或被复制到多个处理器上.在最坏情况下,关键路径上的所有任务都被复制,因此算法2的时间复杂度为O(h|V|).综上所述,该部分的时间复杂度为O((3h+hr+1)|V|).在4.2.5小节中,算法3首先通过深度优先的方式计算任务开始执行时间ST和最长允许执行时间MAET,时间复杂度为O(|V|+|E|).然后,判断任务是否存在空闲时间,并利用整数线性规划方法求解拥有空闲时间的任务在各个电压/频率下的执行时间.虽然算法3优化了搜索空间,但在最坏情况下,该算法必须遍历每个频率和电压下的执行时间区间.此外,本文所采用的整数线性规划方法只使用了3组电压/频率值,对任务vi,整数线性规划求解所花费的时间复杂度为O(t3i).在最坏情况下,所有任务都拥有空闲时间,因此总的时间复杂度为(O∑nt3i+|V|+|EATES算法的时间复杂度为(Ohr|V|+i=1|V|log|V|+3h|V|+6|V|+5|E|+∑nPage9等于(O(rh+log|V|)|V|+∑n5性能评测在本节中,将ATES算法与现有的4种经典调度算法:TDVAS算法[16]、TDS算法[5]、EAD算法[4]和PEBD算法[4]进行比较.其中,TDS是基于关键路径的任务复制调度算法,通过复制关键路径上的任务以获得最短的调度长度.EAD和PEBD是两个基于TDS的能耗感知调度算法,通过阈值平衡性能和能耗.TDVAS算法通过计算处理器的空闲时间,利用DVS节省处理器能耗.为了验证ATES算法在现实应用中的有效性,仿真实验采用SimGrid①模拟并行任务的调度过程.SimGrid是一种广泛应用于集群系统的调度仿真软件,可以真实和准确地模拟并行任务的执行过程.本文选择调度长度和能耗大小作为算法比较的评价指标.对于EAD算法和PEBD算法,首先计算出它们各自的阈值变化范围,分别记为表2处理器参数信息处理器AMDAthlon-641.5,1.4,1.3,1.2,1.1,1.0,0.9IntelPentiumM1.484,1.463,1.308,1.180,0.956AMDOpteron22181.30,1.25,1.20,1.15,1.15,1.10IntelCorei7-8601.375,1.300,1.200,1.125,1.125,1.125,1.1254.0,3.8,3.6,3.4,3.2,3.0,2.810951.0005.1.2网络环境配置本文选取GigabitEthernet、Infiniband、Myrinet和QsNetII4种互联网络分别构建网络环境,这4种网络已经在实际集群中得到广泛应用,而且它们具有不同的功耗、带宽和网络延时[4,24-25].在实验中,以Myrinet作为标准网络,其MPI延时为2.7μs③.实验中假设Myrinet的延时比为1,表3中列出了其余3种网络相对于Myrinet的延时比及其它详细配置信息.网络交换机GigabitEthernet75.05.05013.00Infiniband25.010.68220.90Myrinet55.29.32431.00QsNetII5.2并行应用本文选择两类真实的并行程序用于仿真实验.[min_threshold1,max_threshold1]和[min_threshold2,max_threshold2].为了体现公平性,后续实验将EAD算法和PEBD算法的阈值均设定为最大阈值与最小阈值的算术平均值.5.1硬件环境配置5.1.1处理器配置实验选择AMDAthlon-64[22]、IntelPentiumM1.4GHz[4,16]、AMDOpteron2218[23]和IntelCorei7-860②4种处理器模拟真实的集群环境,这4种处理器均支持动态电压调节技术.其中AMDAthlon-64和IntelPentiumM是单核处理器,AMDOpteron2218和IntelCorei7-860是多核处理器.AMDAthlon-64处理器在高性能集群环境得到广泛应用,非常适合应用动态电压调节技术降低处理器能耗.IntelPentiumM处理器是一款主要应用于嵌入式系统的低功耗处理器.AMDOpteron2218是一款主要用于服务器的双核处理器,是IBMX3455服务器CPU的主要组成部分.IntelCorei7-860是一款当前主流的4核处理器.实验中假设,对于任一并行应用每一种处理器的数量都是足够的.表2列出了上述4种处理器的详细参数.2.0,1.8,1.6,1.4,1.2,1.0,0.88912.8161.4,1.2,1.0,0.8,0.62.6,2.4,2.2,2.0,1.8,1.0目前,有许多生成DAG的工具,常用的有STG④和TGFF[26].本文采用STG生成两个实际的并行应用———RobotControl(88个任务,131条边)和Sparse(96个任务,67条边)④.其中,RobotControl是通信密集型应用,Sparse是计算密集型应用.定义通信计算比率(Communication-to-ComputationRatio,CCR)为并行应用的平均通信代价与平均计算代价之比.CCR是并行应用的重要特征之一,实验中CCR的取值范围为0.1~10.5.3实验结果与评价本节给出了不同实验环境下的仿真结果.每一组仿真实验只改变处理器、网络连接、并行应用和①②③④Page10CCR4个参数中的一个,其余参数保持不变,以比较观察各算法在性能和能耗两个评价指标上的变化.5.3.1处理器的影响第1组实验研究处理器对集群系统性能和能耗的影响,除了整个系统的总能耗之外,论文还对CPU能耗进行了研究.为了比较的公平性,每个处理器的空闲功耗均定义为该处理器在最低执行电压和频率下的功耗值.IntelPentiumM处理器是一款低功率处理器,其活动功耗和空闲功耗分别是25W和6.25W,而其它3种处理器均具有较高的活动功耗和空闲功耗,尤其是IntelCorei7-860处理器,其空闲功耗为51W.而且从表2中可以看出,IntelPentiumM和AMDAthlon-64处理器具有相似的电压分布特性,电压变化范围均大于AMDOpteron2218和IntelCorei7-860两种处理器.本组实验的详细环境配置见表4.环境处理器IntelPentiumM,AMDAthlon-64,网络连接QsNetII并行应用RobotControl,SparseCCR图2(a)和图3(a)展示的是应用分别为Robot和Sparse时的调度长度.从图中可以观察到,首先,当选择IntelPentiumM处理器时,4个基于任务复制的调度算法的性能非常接近,均优于TDVAS.但是,当选择其它3种高功耗处理器时,算法EAD和PEBD的性能降低.这主要是因为,当这3种高功耗处理器被应用于集群环境中时,EAD算法和PEBD算法为了节省处理器能耗,通过阈值限制了任务复制活动;而选择IntelPentiumM处理器时,通信能耗在总能耗中占主导地位,此时这两个算法将会尽量复制任务以改善性能,同时减少通信能耗.其次,TDS算法和ATES算法的性能始终保持最佳,而TDVAS算法的性能最差,这主要是因为TDVAS算法没有采用复制策略.而TDS算法通过复制关键路径上的任务改善系统性能,ATES算法通过任务复制改善性能,而且能够自动适应用性能需求的变化.图2(b)和图3(b)给出了应用分别为Robot和Sparse时4种处理器的CPU能耗.从图中可以发现,除处理器为IntelCorei7-860时TDVAS的能耗高于TDS,对于其余3种处理器,两种基于动态电压调节技术的算法———TDVAS和ATES较其它3种算法均有更低的能耗.当处理器为IntelCorei7-860时,由于TDVAS算法本身的性能较差,而且该处理器的空闲功耗较大,产生了大量空闲能耗,从而影响了总能耗.从图中还可以看出ATES算法更适合于降低高功耗处理器的能耗,从图2(c)和图3(c)中也能得到同样的结论.例如,当应用为Robot时,ATES算法与EAD算法比较,在4种处理器上的能耗分别高4.4%、10.4%、19%和14.1%;而当应用为Sparse时,则分别高10.1%、24.2%、25.8%和29.4%,可见,高功耗处理器更适合采用DVS节省能耗.由于DVS技术主要用于节省处理器能耗,IntelCorei7-860处理器和AMDOpteron2218处理器均具有较高的功耗,因此基于DVS的调度算法能够更有效地节省处理器能耗.5.3.2网络连接的影响第2组实验研究GigabitEthernet、Infiniband、Myrinet和QsNetII4种互联网络对系统性能和能耗的影响.应用选择Sparse,为了公平地进行比较,CCR值选择中间值1.详细的实验环境配置信息见Page11表5.图4(a)和图4(b)比较了当处理器为AMDAthlon-64时,5种算法在4种网络上的性能和能耗.从图中可以看出,当互联网络为Ethernet时,5种算法所获得的调度长度远大于选择其它3种网络的调度长度.相应地,由于较长的通信延迟,以太网消耗了更多的能量.环境处理器AMDAthlon-64,AMDOpteron2218网络连接Ethernet,Infiniband,Myrinet,QsNetII并行应用SparseCCR从实验结果还可以观察到,当选择Infiniband网络时,各算法具有最好的性能和最低的能耗.对于Myrinet和QsNetII,各算法性能相似,但是在能耗方面,QsNetII总是优于Myrinet.也就是说,网络活动功耗对系统能耗也会产生实际的影响.而且,不同的延时和带宽会对系统性能产生更显著的影响.在4种网络中,Ethernet的延时和带宽都是最大的,而Infiniband的延时和带宽都是最小的.从实验结果可以发现,网络延时和带宽对通信时间产生了显著影响,而且对性能和能耗的改善产生负面作用.图5(a)和图5(b)给出了各算法在网络连接分别为Ethernet和Infiniband时系统性能和能耗的比较.从图5(a)中可以观察到,4种基于任务复制的算法系统性能非常接近,而且均优于TDVAS算法.从图5(b)可以看到,算法ATES总是具有最低的能耗,并且能耗的改善程度随着网络类型的变化而变化.例如,当网络类型为Ethernet时,ATES在相同实验环境下比EAD、PEBD和TDS平均多节省4.6%的能耗;当网络类型为Infiniband时,这一改进比例会提升到20.3%.另外,ATES算法在网络类型为Ethernet时,比TDVAS算法多节省26.1%的能耗;然而当网络类型为Infiniband时,这一改进比例则降为1.3%.该现象表明,高带宽、低延时和高功耗的网络连接更有利于动态电压调节技术节约图5处理器为AMDOpteron2218时的结果Page12能耗;反之,低带宽、高延时和低功耗的网络连接更适合于基于任务复制的策略节约能耗.上述推断是合理的,因为动态电压调节技术主要被用于节约处理器能耗,当总能耗中通信能耗占主导地位时,运用动态电压调节技术节省能耗的空间将会很有限,此时运用任务复制策略不仅可以改进系统性能,而且还能节约大量的通信能耗.与此同时,ATES算法充分了考虑性能和能耗两方面需求,在两者之间找到了最佳平衡点.5.3.3CCR值的影响CCR值作为并行应用的重要特性之一,是本文研究的重点之一.第3组实验研究了CCR值对性能和能耗的影响.实验选择标准网络Myrinet搭建网络环境,处理器选择AMDAthlon-64,CCR值从0.1变化到10.详细的实验配置信息见表6.图6(b)和图7(b)分别描述了5种算法在并行应用分别为Robot和Sparse时的总能耗,可以得出两个结论.其一,与其它4种算法相比,ATES算法的能耗总体上是最好的.唯一的例外是当应用为Robot且CCR值较小时,TDVAS的能耗要低于ATES.这主要是因为ATES算法虽然可以利用任务复制策略,改善系统性能,但是CCR值较小时,计算能耗在总能耗中占据主导地位,因此增加的计算能耗会远大于减少的通信能耗.另外,从图6(a)可以看出,TDVAS算法的性能一直最差,因为该算法没有采用任务复制策略.其二,与Robot应用相比,ATES算法在Sparse应用中节省了更多的能耗.例如,与PEBD算法相比,当CCR为0.5,应用为Robot时,ATES算法的能耗改进比例为5.9%,而当应用为Sparse时的能耗改进比例则增加到28%.这主要是因为Sparse是一个并行度较高的计算密集型应用,这一图6不同CCR值下并行应用为RobotControl的结果特性使得调度到处理器上的任务拥有较多的空闲时间,从而有利于ATES算法利用DVS技术节省处理器的空闲能耗,而Robot则正好相反.这表明,动态电压调节技术能有效减少计算密集型应用的能耗.图7不同CCR值下并行应用为Sparse的结果从图6(a)和图7(a)中可以看出,无论CCR为何值,对于Robot应用和Sparse应用,ATES算法和TDS算法均具有相似的性能,并且均优于另外3种算法.例如,当CCR值为2,应用分别为Robot和Sparse时,与TDVAS算法相比,ATES算法的性能改进比例分别为22.6%和34.3%,这表明ATES算法能够保持较好的系统性能.另外还可以观察到,TDVAS算法只适用于CCR值较小的并行应用,而且其调度长度会随着CCR值的上升迅速增加.TDVAS算法在性能上的劣势会产生大量的处理器空闲能耗,从而影响系统的整体能耗.5.4算法时间复杂度比较表7列出了本文涉及的5种算法的时间复杂度.算法ATESO3|E|+rh+log|V()||V|+∑VEADPEBDO(2|E|+|V|(log|V|+h))TDSTDVASO(2|V|+|E|+|V|log|V|)Page13从表7可以看出,算法ATES的复杂度高于其它4种算法的复杂度.究其原因在于,ATES算法在运用动态电压调节技术时,采用整数线性规划方法选择各个任务的执行电压或频率;另外,最佳阈值的获取是动态的,因此计算最佳阈值也需要花费一定的时间,上述两点是导致ATES复杂度增加的主要因素.但是,需要指出的是,尽管ATES算法的复杂度高于其它算法,但是在实验中运行稳定,并且其调度长度没有受到任何影响.而且,正是由于整数线性规划方法和动态获取最佳阈值策略的使用,才使得ATES算法能够在系统性能和能耗之间寻找到最佳平衡点.6结论本文提出一种同构集群系统中基于自适应阈值的两阶段能效调度算法———ATES,适用于支持动态电压调节技术的同构集群系统,旨在满足系统性能需求的前提下降低系统能耗.第一阶段,算法采用基于动态阈值的任务复制策略,根据性能需求和环境参数等特性,动态调整并获得最优阈值;然后,利用最佳阈值控制任务的复制,即选择性地复制任务的最佳前驱,平衡系统性能和能耗以获取近似最优分组,使产生的分组在满足性能要求的同时降低能耗.第二阶段,将各分组调度到支持动态电压调节技术的处理器上,并充分利用任务之间的依赖关系所产生的空闲时间降低处理器电压,显著降低了计算能耗,提高了系统能效.实验结果表明,与现有其它同类算法相比,本文提出的ATES算法不仅可以维持良好性能,而且还能节省大量能耗.特别是对于具有高并行度的计算密集型应用,ATES算法在不影响系统性能的前提下,能耗改进比例是显著的.未来将对异构多核集群的能耗管理开展研究.
