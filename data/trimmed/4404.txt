Page1一种能效优化的MapReduce资源比模型宋杰1)刘雪冰1)朱志良1)李甜甜2)赵大哲2)于戈2)1)(东北大学软件学院沈阳110819)2)(东北大学信息科学与工程学院沈阳110819)摘要随着云计算的快速发展,IT资源规模的不断扩大导致能耗问题日益凸显.为降低MapReduce编程模型带来的高能耗,文中研究Map/Reduce任务的资源消费特征及该特征与能效的关系,旨在寻找一种能够指导资源分配和任务调度的资源模型,进而实现能效优化.文中提出任务的能效与任务被分配的资源量无关,而与其被分配的各种资源的资源量比例相关,且存在一个“最佳资源比”使得能效达到最高.基于此,文中首先提出了普适的资源和能效模型,从模型层面证明最佳资源比和能效之间的关系,量化空闲资源量和空闲能耗;随后分析MapReduce编程模型,将普适资源比模型变换到MapReduce下.通过抽象的数据的“生产者-消费者”模式,求解Map/Reduce任务的最佳资源比;最后,通过实验从任务能效和空闲能耗两个角度证明了最佳资源比的存在,并根据实验结果,对MapReduce执行过程进行划分,给出了部分Map/Reduce任务的最佳资源比.最佳资源比的提出和求解将有利于基于该最佳资源比的任务调度和资源分配算法的研究,进而实现Map/Reduce任务能效的提高.关键词云计算;能效;资源比;MapReduce1引言云计算已成为IT服务的主流技术[1],具有较高的成熟度,如亚马逊、Google、Salesforce等知名公司均掌握成熟的云计算技术①②[2],并将其进行推广.在众多云计算技术中,MapReduce[3]编程模型最为流行.MapReduce是分布式地并行完成大规模运算的一种有效技术,MapReduce框架完成输入数据的分割、任务调度、资源分配、节点容错、节点通信和结果数据保存等复杂操作,使得应用程序能够便捷地在大量普通配置的计算机上并行执行.MapReduce是当前研究的热点,现有研究或对MapReduce进行性能优化,或修改现有数据分析算法以适应MapReduce模型,或在MapReduce的基础上寻找更为高效的编程模型,而本文将主要从MapReduce作业能效优化的角度展开研究.随着IT设施功率的逐渐增加和MapReduce集群规模的不断扩大,集群能耗过大已经成为云计算面临的一个难题.《纽约时报》估计全球互联网数据中心的用电功率可能达300亿瓦特,相当于30个核电站的供电功率.而数据中心的耗电量仅有6%~12%是被用于网站计算的,其余均在维持服务器工作状态时被无谓消耗③.此外,绿色和平组织预测,到2020年,全球主要IT运营商的能耗将达到2万亿千瓦时,超过德、法、加和巴西等4国的能耗总和④.从环境角度,数据中心在消耗大量电力的同时会产生惊人的碳排放.在美国,100MW发电站会花费6000万到1亿美元并排放5000万吨CO2,目前全球数据中心的CO2排放量相当于阿根廷整个国家的CO2排放量,全球IT产业的碳排放占温室气体总排放的2%[4].在此背景下,如何在数据中心里采用高能效的方式运行MapReduce作业,进而降低能耗实现绿色计算,成为当今研究的热点问题.按照物理学观点,能效是指在能源利用中,发挥作用的与实际消耗的能源量之比.从消费角度看,能效是指为终端用户提供的服务与所消耗的总能源量之比.所谓提高能效,就是指用更少的能源投入带来同等的能源服务,可以认为能效是性能和能耗之比.本研究着重于MapReduce能效优化.之所以选择MapReduce是因为它是云计算环境中主流的编程模型,大多Internet服务商的核心业务均采用MapReduce实现.MapReduce模型有多种实现,如GoogleMapReduce、ApacheHadoop、Map-Reduce-Merge、多核和多处理器系统的MapReduce等.本文选择开源且被开发者和研究人员广泛接受的ApacheHadoop作为云计算环境.当前主流的能效优化思路为负载集中和关闭空闲节点,然而MapReduce集群中的节点不仅完成运算任务,还存储海量数据.节点需提供“Always-On”的数据服务,且由于集群自身特性使开关节点的代价很高,因此无法通过临时关闭节点的“ON-OFF”算法[5-6]实现节能.我们前期研究证明[7],MapReduce集群节点的资源使用率不高,产生这一情况的原因可以归结为节点资源等待,如CPU会因等待I/O操作而阻塞,或等待网络数据传输.因节点资源被动空闲而产生空闲资源,空闲资源越多,空闲能耗越大,能效就越低.我们认为,一个任务所分配的资源越多,执行性能越好,但能耗越高,因此能效未必有所提高;相反的,若资源分配不合理,部分资源过量,则空闲资源也会增加,空闲能耗增加,能效反而降低.我们提出一个假设,当任务的资源分配满足一定比例时,无论分配的资源量多少,任务的能效值不变,且存在一个最佳的比例,使能效最高,我们称这一最佳的资源分配比例为最佳资源比.本文从理论推导和实验验证这两个角度证明了最佳资源比的存在,并给出了①②③④Page3求解MapReduce任务最佳资源比的过程.最佳资源比的提出和求解将有利于进一步研究基于该最佳资源比的任务调度和资源分配算法,进而有效提高MapReduce任务的能效.综上所述,本文研究MapReduce任务的资源消费特征,提出了任务的最佳资源比模型,定义任务达到能效最优时的资源占有情况.该模型是普适的,当任务为单一资源密集型任务时,忽略不计的资源的比值被简化为无穷小的形式,以保证比值的有效性.资源分配问题是一个经典问题,在不同的运算环境中有不同的设计目标,如性能、公平性和适应性等;本文在优化能效这一目标下,提出了采用资源量的比值而非资源量作为资源分配标准,最佳资源比是优化能效的新方法,尚未见类似研究.本文首先定义一个针对任务而言的普适的资源模型,包括资源、任务、任务能效和任务最佳资源比;随后将普适模型运用到MapReduce中,对MapReduce任务进行进一步划分;接着利用资源的“生产者-消费者”模式求解MapReduce最佳资源比.最后,我们通过能效和空闲能耗两个角度证明最佳资源比的存在性和合理性,并在实验基础上给出了部分MapReduce任务的划分方法和最佳资源比.本文第2节介绍相关工作;第3节和第4节分别介绍普适资源比模型以及其在MapReduce中的应用;第5节从理论上求解MapReduce的最佳资源比;第6节通过实验验证了最佳资源比的存在性、合理性以及在部分用例下的具体值;第7节总结全文并提出下一步工作.2相关研究提高能效就是指用更少的能源消耗来获得同等的服务,我们进行能效优化必须考虑性能和能耗之间的权衡.国内外研究在这一方面持有两种不同的观点,文献[8-10]声称能耗和性能是两种不同的优化目标,所以他们之间存在着某种折中关系,提高性能必然导致高能耗,相反,降低能耗必然损失性能.文献[11-12]进一步权衡了了电力消耗、SLA需求和碳排放预算这三要素,通过Lyapunov优化技术设计了能耗感知的控制模型;文献[13]则声称能耗和性能的优化是一致的,最节能的系统往往也是性能最好的系统.概念上,前者符合硬件设计思路,运算越快越耗电,后者符合软件设计思路,任务完成越快,计算机工作时间就越少,自然越省电.这两种截然相反的观点的产生是因为采用了不同的假设和性能评价方法.前者并没有考虑空闲能耗,也没有考虑“同一任务不同实现算法”的复杂度不同,性能评价粒度过细;后者则没有考虑计算机功率的动态性.我们实验用计算机的有功功率在50~100瓦特之间浮动,某任务在50瓦下运行2秒和在100瓦下运行1秒消耗的能量相等,而性能则显然不同.然而,在云环境下空闲能耗对任务能效的影响要大于节点有功功率的浮动,我们旨在通过“减少空闲能耗”来提高能效,即通过能耗优化方法来实现能效优化.目前,新能源(如风能、太阳能)正得到广泛使用,其生成和预测的相关研究是数据中心能耗优化的重要手段;除此之外,跨数据中心的负载均衡的研究也使得能源得到充分利用[4].本文的研究旨在指导数据中心内部,即集群的能耗优化方法.云环境下的能耗优化问题可以从硬件和软件两个角度考虑,硬件层面包括组件开关[5-6],即观察集群中各个组件(如芯片)的工作负载,将处于空闲状态的组件关闭;以及如被广泛使用的DVFS[14-15]等性能调整技术,根据硬件的能耗情况动态地调节硬件性能,以得到低功耗的工作状态.软件层面的能耗优化方法按其作用范围可以分为单机环境和集群环境,其中单机环境下有操作系统[16]和虚拟机能耗优化方法[17].我们主要从软件层面研究集群中的能耗优化技术,通过分析集群中任务的资源使用情况,寻找一种资源模型来指导资源分配和任务调度,降低空闲能耗,最终实现能效优化.一些能耗优化方法不采用“以负载集中为目的”的任务调度,而是根据任务或任务队列特性,通过提高资源利用率,减少能源损失,进而优化能耗.针对MapReduce框架:文献[18]设计了MapReduce调度过程的数学模型,分析影响数据本地化的系统配置值,设计了旨在减少网络传输的调度算法;文献[19]提出了一种考虑用户能耗需求的能耗可感知MapReduce应用模型;文献[20]基于遗传算法提出了旨在提高资源利用率的任务调度算法;文献[21]提出了一种动态槽机制,通过提高CPU资源的使用率来节约能耗并提高性能,但是并没有进行实验验证.上述方法均通过提高资源利用率进行能效优化,这些方法主要考虑的是节点的某一种或几种特定资源的利用率,而本研究则着重考虑任务的多种资源使用的比率,与上述方法有本质不同.对于一个任务,其最佳的资源占有率并非是最大资源占有率,而是一个适当的比例[22],多种资源Page4占有率和性能之间的关系会是一个类似U型的曲面.本文则力求寻找这一最佳的资源占有率,并作为资源调度的目标.与该思路相关的现有研究包括:文献[23]按照任务的最佳资源请求、平均收益、失败率等排序,然后通过启发算法解决资源分配问题,其中最佳资源请求是预定义的,文中没有给出其定义方式;文献[24]将Map/Reduce任务继续划分为CPU密集型和I/O密集型阶段,采取称为“资源使用管道”的技术让细分后的不同任务阶段同时运行,从而提高了CPU和I/O的使用率,其本质上考虑了任务对不同资源的不同要求,但没有抽象出资源比的概念,而仅仅将任务划分成不同的资源密集类型;文献[25]提出了一种称为绿色调度的调度策略,通过适当地牺牲MapReduce公平调度算法的公平性来让资源使用情况互补的任务重叠运行,如增加CPU密集型任务和IO密集型任务同时执行的概率,但没有进行量化分析.本研究的最佳资源比模型则量化的定义的任务对资源的需求特征.云环境中的资源分配是一项关键技术,大多数云平台(如HadoopMapReduce)任务调度算法的重心都放在调度器上①[26],主要考虑的是公平性和负载均衡,而较少的从任务资源需求的角度展开研究,这就可能导致任务分配后,某些节点出现过载,而其他节点却出现空闲状态的情况.因此,需要一个资源模型对任务所需的资源进行定义,进而提升集群的资源利用率.本文提出的最佳资源比模型则是从资源使用率的比值角度来表征一个任务的特点,并作为资源分配和任务调度的基础.3普适的资源和能效模型本节首先定义了普适的资源模型和能效模型,然后在后续章节加以细化,本节中提及的任务是一种泛化的概念,但同样适用于MapReduce任务.一方面,资源和能效模型是针对任务的,而非针对集群或节点的,本研究着重研究任务占有的资源特征,而按照该特征的资源分配是进一步研究,因此我们研究一个任务的n种资源,以及该任务的能效.另一方面,任务占有的资源来源于某节点,等待能耗也是由节点产生的,若集群是由虚拟化技术构建的,每个虚拟节点拥有的资源为分配给该虚拟节点的物理资源或虚拟资源.由于虚拟节点的隔离性,绝大部分资源都互不影响,因此可以将虚拟节点当做物理节点处理.定义1.计算资源(ComputingResource).计算机系统中的资源主要包括硬件资源、软件资源、网络资源和数据(内容)资源.其中,产生能耗的主要为硬件资源和网络资源,如中央处理器(CPU)、内存储器、外存储器、输入/输出设备、网卡等.计算资源为与这些硬件资源的抽象,如CPU资源、内存资源、磁盘资源、网络资源等.定义2.资源量(ResourceQuantity).资源量是对某任务分配或消费的节点计算资源大小的一种度量.设任务资源分配和消费均是动态的,随时间变化而变化.给定一个任务,n为资源种类数,ri(t)表示任务在t时刻消费第i个资源的资源量,ri(t)表示任务在t时刻分配的第i个资源的资源量,|ri|表示第i个资源的资源总量.在t时刻,任务消费资源量R(t)可用一个n维向量来表示,其每个分量是一个关于时间的函数.同理分配资源量R(t)和资源总量|R|:资源量需可度量、可计算,并统一不同种类资源的量纲.以消费资源量R(t)为例,对于任意资源,需要确定其资源量的表示方法,如可以使用CPU频率、CPU使用率、内存使用率、内存读写速率、硬盘I/O使用率、硬盘读写速度、网络吞吐量、带宽占用率等一项或多项指标分别来描述CPU、内存、磁盘和网络的使用情况.资源量的定义要考虑节点的异构性,采用绝对值而非相对值,资源量的量纲需一致以计算资源比.下文求解中主要讨论CPU、磁盘和网络3种资源.某一时刻t的磁盘资源量rd(t),网络资源量rn(t)可以分别用该时刻的磁盘读写速率vd(t),网络读写速率vn(t)来表示,两种资源量的量纲一致,都为MB/s.若以CPU的使用率ω(t)作为CPU消费资源量rc(t),则忽视了节点CPU的异构性,如2.0GHzCPU的50%使用率下的运算能力相当于1.0GHzCPU的100%使用率下的运算能力.而且该方法使CPU资源量的量纲与其他资源量不统一.根据我们前期的研究[27],本文用定义3中的CPU资源量rc(t)来描述CPU资源分配和消费情况,并将CPU资源量的量纲统一到了MB/s,和网络资源量、磁盘资源量度量一致.①CapacityScheduler.http://hadoop.apache.org/docs/r1.0.4/Page5定义3.CPU资源量(CPUResourceQuantity).任务在t时刻CPU消费资源量rc(t)可以由该时刻CPU执行浮点运算的速率表示,同理分配资源量rc(t)和资源总量|rc|.若用MB度量浮点运算数量(大小),CPU资源量单位为MB/s.设:其中,f(t)为t时刻的CPU频率,可以等价为1秒内时钟周期数目,单位Hz;ω(t)为t时刻的CPU使用率;C为硬件相关的常量,是若干CPU参数的运算结果(见式(2)),其中Pc为一个机器周期包括的时钟周期数;Cc为CPU核心数;Cfn为每机器周期浮点运算次数,Cmw为机器字长,单位比特;Cfz为浮点运算对象与机器字长的倍数关系,K为数量级调节系数.CPU资源量的定义仅考虑了CPU主要参数,虽然没有反映CPU所有参数特性,如缓存大小、总线速度、总线宽度等,但这些参数的对资源量定义的影响较小.后文需要推导的最佳资源比并非是一个精确的比值,目前的CPU资源量定义可以满足最佳资源比的定义和后续的按资源比的资源分配研究.定义4.吞吐量(Throughput).吞吐量是对某任务在某时刻在给定资源量的条件下处理数据速度的一种度量.任务在t时刻的吞吐量V(t)是一个由多个分量组成的向量,吞吐量V(t)在第i个资源上的分量记为vi(t),是t时刻分配资源量ri(t)下进行数据处理时达到数据处理速度,单位MB/s.根据资源量的定义可知:由于均采用MB/s作为单位,t时刻,磁盘吞吐量等于磁盘消费资源量vd(t)=rd(t),网络吞吐量等于网络消费资源量vn(t)=rn(t).唯独vc(t)和rc(t)无法对应,因为CPU处理数据的速度和算法处理数据的速度不同,还与算法复杂度有关,一条数据可能会在多个CPU周期反复处理.定义5.CPU吞吐量(CPUThroughput).任务在t时刻的CPU吞吐量vc(t)是吞吐量V(t)的CPU资源分量.CPU资源具有特殊性,单位数据会被多个时钟周期处理,因此,vc(t)需要从算法角度进行定义,设t为一个足够小的时间段,χ(t)为一个比例,表示在t时间内从CPU处理的指令级数据量和CPU处理的算法级数据之间的比例.则χ(t)与算法时间复杂度O(n)相关.本研究采用数据量单位MB来衡量CPU的运算能力,CPU的运算能力是常量,即单位时间处理的指令级数据量大小为一定的,而单位时间处理的算法级数据量则与算法的复杂程度相关.本研究采用一种一般化的单处理器、随机存取计算模型(RAM)来作为研究基础.在RAM模型中,指令一条接一条地执行,没有并发操作.RAM模型包含了真实计算机中常见的指令.设D(t)为任务在t时间内处理的算法级数据量,该值可以通过实验获得;F(t)为任务t时间内的算法复杂度,定义为处理一条数据所需的CPU指令(脉冲)个数,该值可通过对算法进行白盒分析获得,最简单的方式是通过实验,即在CPU使用率ω(t)=1时将处理一条数据的执行时间与CPU频率f(t)相乘;N(t)为任务在t时间内处理的数据条数,可通过实验获得;C为常量(见式(2)).则由式(4)和式(5)可得能效是单位时间内系统的运算量和耗电量的比值,节点能耗是节点资源消耗的能量,任务能效是任务自身的“运算量”比上任务“分配资源”的耗电量,采用分配资源量而非与消费资源量是因为一旦资源分配给某任务,即使没有被消费,也无法被别的任务使用.任务能效的瞬时值中,运算量可以看做任务的吞吐量V(t),即处理数据的速度;耗电量则可以看作为节点功率P(t)与资源占有率(%)之间的乘积.定义6.任务能效(EnergyEfficiencyofTask).任务在t时刻的能效η(t)为任务吞吐量V(t)与其占有资源R(t)消耗的能量E(t)的比值:假设设备的功率稳定为P:η(t)=V(t)能效η(t)的单位为MB/Joule.其中λ为常量,若考虑具体资源i∈[1,n],结合式(6).ηi(t)=λVi(t)Page6ri(t)/ri(t)的最大值为1,当ri(t)/ri(t)=1时,ηi(t)达到最大值.由此可见,若考虑计算机组件的功率为常量,则对于特定任务,能效仅与资源使用率(消费资源和分配资源的比值)有关.某任务在时刻t,若ri(t)=ri(t),则该资源的利用率为100%,没有资源空闲.若ri(t)<ri(t),则资源ri没有得到充分利用,资源量ri(t)-ri(t)处于空闲状态.定义7.空闲资源量(IdleResourceQuantity).给定一个任务,设n为资源种类数,Δri(t)表示任务在t时刻空闲的第i个资源的资源量.在t时刻,任务第i个资源的空闲资源量Δri(t)和任务的总空闲资源量ΔR(t)为Δri(t)=ri(t)-ri(t),ΔR(t)=∑ni∈[1,n],任务在T时间段内的第i个资源的空闲资源量Δri以及总空闲资源量ΔR为Δri=∫T对于多个资源,当某一资源等待其他资源的运算结果时,该资源空闲,这种空闲并非真正意义上的空闲,而是一种被动空闲.若任务分配的资源不合理,各个资源之间会产生等待,如CPU会因等待I/O操作而阻塞,产生空闲资源.本研究针对因资源间等待产生的空闲资源,由定义6可知,空闲资源会降低任务的能效.由于资源是被动空闲,因此对于任意时刻t,i∈[1,n],ri(t)=ri(t),Δri(t)=0.我们认为,对于某任务,当其分配资源量中的各类资源分量达到某一适当比例时,可以使得不同资源间没有因吞吐量不同而造成等待,进而没有因资源等待造成空闲资源,从而实现任务的能效优化.实验一证明在MapReduce环境中,某任务运行时存在一个恰当资源比,使得不同资源间不存在因吞吐量或处理速度不同而造成等待,这个资源比定义为任务的最佳资源比.例如,仅考虑CPU和网络这两种资源,若执行某任务时CPU处理数据的速度是网络接收该数据速度的两倍,该任务最佳资源比应为“12”(CPU和网络资源的比值).在多任务环境中,我们可以通过任务调度和资源分配来调整资源比以达到最佳,如该任务分发到某节点且该节点分配该任务CPU资源时,应该同时分配两倍的网络资源.若某节点仅剩余较多CPU资源和极少网络资源,则该任务不适于分发给该节点.可以认为,当节点运行一个I/O密集型任务时,CPU会较为空闲,这时可以调度一个CPU密集型任务给该节点.本研究认为动态的资源分配和任务调度使任务的分配资源量满足最佳资源比,是一种有效的能效优化方法.本文仅定义和推导最佳资源比.定义8.最佳资源比(BestResourceRatio).给定一个任务,其t时刻的资源比是各分配资源量之间的比值.当有n种资源时,资源比表示形式如下:理想情况下,任务t时刻的最佳资源比Ω(t)是指按照该比值分配资源后,i∈[1,n],ri(t)=ri(t),ΔR(t)=0,η(t)达到最大值.因此,Ω(t)=r1(t)r2(t)…rn(t).特殊的,当某种资源可以忽略或不参与运算时,我们定义该资源的最佳资源比分量为-1,-1表示无穷小.例如,假设某任务仅仅需要CPU和本地磁盘,而不需要网络读写,其最佳资源比类似于mn-1(CPUDiskNetwork).4MapReduce资源比模型前一节定义了普适任务模型下的资源模型、能效模型和最佳资源比模型,本节将分析MapReduce的执行流程和资源消费特征,以将上述模型应用到MapReduce中.MapReduce作业(MapReduceJob)是客户需要执行的一个工作单元.Hadoop将MapReduce作业分成若干任务(Task)来执行,其中包括两类任务:Map任务和Reduce任务,简称Map/Reduce任务.Map/Reduce任务是调度的最小单元,但其执行过程复杂,因此将Map/Reduce任务作为研究其资源分配和消费特征的最小单位,粒度过大.我们将Map/Reduce任务进行分解.首先,从资源消费的角度定义操作(Operation)的概念,Map/Reduce任务可以分解为若干反复执行的操作,操作有固定的算法特征和资源消费特征.其次,从资源分配的角度,若以操作作为资源分配的最小单元,则粒度过小,因此定义阶段的概念,一组连续的且资源消费特征相似的操作可以看作一个阶段.综上所述,Map/Reduce任务的执行过程是阶段的集合,阶段由重复出现的操作组成.例如,A,B,C,D和E是5个操作,若将任务则视为一个序列“AB-AB-CDE-CDE-AD”,其中子序列“AB”反复出现了2次,“CDE”反复出现了2次,“AD”只出现了1次,阶段是该序列的一种划分,上述子序列均为一个阶段.基于此,本节给出如下定义.定义9.操作(Operation).任务中包含的重复出现的算法单元称为操作,任务是连续操作组成Page7的序列.操作具有特定的资源消费特征,从资源消费角度,设某操作的执行时间为[t1,t2],tx,ty∈[t1,t2],i∈[1,n],tx≠ty,则ri(tx)=ri(ty).操作是消费资源的原子单元.定义10.阶段(Phrase).任务中一组连续的且资源消费特征相似的操作可以看作一个阶段,阶段中任意两个时刻分配资源量相同,消费资源量相似.设某阶段的执行时间为[t1,t2],tx,ty∈[t1,t2],i∈表1普适定义与MapReduce定义的映射关系普适表达定义序号模型名称普适对象定义2消费资源量任务t时刻R(t)=〈r1(t),r2(t),…,rn(t)〉阶段的第k个操作Rk=〈rk定义2分配资源量任务t时刻R(t)=〈r1(t),r2(t),…,rn(t)〉阶段定义3CPU资源量频率和使用率f(t),f(t),ω(t),ω(t)定义4吞吐量任务t时刻V(t)=〈v1(t),v2(t),…,vn(t)〉阶段的第k个操作Vk=〈vk定义5CPU吞吐量任务t时刻vc(t)=χ(t)·rc(t)定义6任务能效任务t时刻ηi(t)=λ×χ(t)γ×ri(t)ri(t)定义7空闲资源量任务t时刻Δri(t)(ri(t)-ri(t))dt由表1可知,阶段资源量是对某阶段分配或消费的计算资源大小的一种度量.给定一个阶段,设n为可分配的资源种类数,s为该阶段包含的操作数量.ri表示第i个资源的分配资源量,rk操作消费第i个资源的资源量.阶段资源比则表示阶段各分配资源量之间的比值.对于某阶段,包含s个操作,k∈[1,s],i∈[1,n],若rk作资源的利用率为100%,没有资源空闲,若rk则资源ri没有得到充分利用,产生空闲资源.由于资源是被动空闲,因此k∈[1,s],i∈[1,n],rk因此,我们重新定义Map/Reduce任务的最佳资源比.定义11.Map/Reduce任务最佳资源比(BestResourceRatioofMap/ReduceTask).设Map/Reduce任务由多个阶段构成,每阶段包含多个操作.任务的最佳资源比是由其包含的阶段的最佳资源比组成的向量.阶段的最佳资源比由其包含的操作的最佳资源比聚合而得.操作的最佳资源比为该操作消费资源量的比值.若每个任务的每个阶段分配的资源满足最佳资源比,则整个任务也满足最佳资源比.阶段是资源分配单元,尚无法根据操作或任务分配资源,因此,需要将操作的最佳资源比合并.设[1,n],tx≠ty,则ri(tx)=ri(ty),ri(tx)≈ri(ty).阶段是资源分配的原子单元.由此定义10可知,阶段是资源分配的最小单元,且包含多个操作,操作是资源消费的最小单元.我们将重新定义第2节中出现的分配资源量、消费资源量、空闲资源量以及吞吐量,使其与时间无关.我们用阶段取代普适模型中的任务概念,用操作取代任务的t时刻.具体定义见表1.Map/Reduce任务包含m个阶段,第j个阶段(j∈[1,m])有sj个操作组成.后文仅研究3种资源的最佳资源比,即CPU、磁盘和网络,且因为每个操作都有CPU资源的参与,CPU是必须被分配的资源,因此,本研究简化最佳资源比为1yz的形式,其中y表示磁盘资源,z表示网络资源.设Ω为任务的资源比,Ωj为任务第j个阶段的最佳资源比,Ωk阶段的第k个操作的最佳资源比.Ω=〈Ω1,Ω2,…,Ωm〉Ωj=rcrdrn=1yz=agg(Ω1j=rkcrkdrkn=1ykzkΩk聚合函数agg()将在第5节定义,由式(14)可知,求解一个Map/Reduce任务的最佳资源比只需要确定其包含的每个操作的最佳资源比,本文第5节将给出操作最佳资源比推导过程,所用符号均针对第k个操作,因此为简化表述,省略上标k.5最佳资源比推导本节研究操作最佳资源比的确定方法,以及式(14)中的agg()函数的数学表达.由于操作是消费资源的最小单元,我们认为对于一个操作,在其执行时间内资源的消费特征是一致的.操作中,CPU、Page8硬盘和网络均通过内存交换数据,当3种资源通过内存交换数据的速度(吞吐量)一致时,没有空闲资源.则操作k的使用资源量ri之间的比值就是该操作的最佳资源比.从资源访问角度,操作是两种资源通过内存交换数据的过程;从吞吐量角度,操作是具有稳定资源吞吐量的执行时间片段,每个操作内不同时刻的资源吞吐量相等.总而言之,操作是资源消费特征的归纳.我们考虑操作的CPU资源rc、磁盘资源rd和网络资源rn这3种资源消费特征,将其划分为4种类型.定义12.操作类型(OperationType).操作由一种资源生产数据(数据生产者),一种资源消费数据(数据消费者)构成,两者之间通过内存进行数据的交换和缓冲,我们称该数据处理过程为“生产者-消费者”模式.由于内存的存在,数据缓冲允许数据生产速度(吞吐量)与数据消费速度(吞吐量)不一致.我们将内存的使用情况作为划分操作的依据,在一个操作中,数据生产者生产的数据流入内存,数据消费者消费的数据从内存流出,两种资源吞吐量是稳定的,有特征的.对于任意操作,存在四种可能的“数据生产和消费”方式,我们将其定义为操作类型,分别为cd,cn,dc和nc(见图1).“生产者-消费者”模式满足通用计算系统的IPO模型(Input-Processing-OutputModel)①,是一种抽象的数据处理模式,基于该模式的最佳资源比推导过程具有通用性,理由如下:首先,“生产者-消费者”模式在调用方式、内存缓冲区类型、角色数目和并行性等方面存在多种特征.例如,内存缓冲区可以具有多种数据结构,如队列、栈等;可以同时存在多个消费者和生产者;并且内存缓冲区的读写规则可以是同步或异步的.对这些特征进行组合,可以构建更加复杂的模式.由此可见,复杂模式均可以简化为“生产者-消费者”模式[28].一些经典的问题,如“哲学家就餐”和“读者-写者”问题,也都可以归纳、分解、转换或简化为“生产者-消费者”模式.其次,最佳资源比并非需要一个精确的比例,近似值即可表征任务的资源使用特性,因此将复杂运算模式简化为“生产者-消费者”模式是可行的.操作类型和操作是“模式”和“实例”之间的关系.定义操作类型是为了更加方便的求解操作的最佳资源比.由定义9可知,操作p是MapReduce编程模型中最细粒度的资源消费单元,是两种资源通过内存交换数据的过程.本节所用符号均针对第k个操作,因此为简化表述,省略上标k.某操作p可以用序偶来表示:r→为消费资源量,该资源是数据生产者,且生产的数据按v→流入内存;r←为消费资源量,该资源是数据消费者,且消费的数据按v←从内存流出,两个资源以内存为中介以各自稳定的吞吐量处理数据.操作内资源的吞吐量是稳定的.定义13.τ函数(τfunction).给定某阶段的第k个操作p=〈r→,r←〉,τ函数返回该操作的执行时间.定义14.操作内存(MemoryofPhrase).假设每个操作都分配已知大小的内存,操作对该内存独占操作,各个操作内存读写不互相影响.设第k个操作内存容量为ε,且已经保存任务相关的数据量为ε0,对于任意操作ε0ε.从操作类型可以看出,每种类型的操作都存在CPU资源,且存在网络资源或磁盘资源,内存必然为吞吐量大的资源充当数据缓冲(读缓冲或写缓冲),假定第k个操作处理的数据量为M,单位为MB,操作执行时间为未缓冲的资源处理M的用时:M可以测量得到,结合吞吐量和消费资源量之间的关系,τ函数为τ(r→,r←)=Mχγ×r→α×r←β求解操作的最佳资源比的基本思想是通过数据生产者和消费者的吞吐量之间的关系,若不存在内存缓冲,则数据生产者和消费者吞吐量应该相等;若考虑内存,可以将内存看作为一大小固定,容量有限的存储区,在内存缓冲区被放满时,生产数据的资源①IPOModel.http://en.wikipedia.org/wiki/IPO_ModelPage9(数据流入内存)被阻塞;在内存缓冲区为空时,消费数据的资源(数据从内存流出)被阻塞.设操作p=〈r→,r←〉.数据生产(流入内存)和消费(流出内存)速度(吞吐量)分别为〈v→,v←〉,执行时间为t,则满足式(19)时,资源不会被阻塞,空闲资源为零:数据可能会被多次消费,如图1中操作dc和nc.因此式(19)中设置Θ为操作p的读取系数.若t×(v→-Θ×v←)>ε,生产数据(流入内存)的资源将被阻塞,产生空闲资源.同理,若t×(v→-Θ×v←)<-ε0,消费数据(流入内存)的资源将被阻塞,产生空闲资源.按τ函数的定义和资源吞吐量和消费资源量之间的关系把式(18)中的吞吐量转换成资源量,得出M×(χγ×r→k-χγ-1×Θ×r←)可以看出最佳资源比是多个可能、且与内存大小相关的值.为使最佳资源比成为一个确定值,本研究令式(20)的左项等于ε+ε02.为简化推导,考虑临界情况,即当内存作为数据输出端缓冲区时,其中充满等待处理的数据,当内存作为数据输入端缓冲区时,内存为空.则ε0=ε.得出M×(χγ×rk-χγ-1×Θ×r←)式(21)是一个形如a(bx-cy)=d)的方程,其中a,b,c,d均为常量,x和y为变量,因此可以求得x当α=1,β=0时:M×(χγ×rk-χγ-1×Θ×r←)r→当α=0,β=1时:比,其中参数均可以通过实验确定.由式(22)和(23)可以求出任务每个操作的资源最后,将阶段的每个操作资源比聚合为阶段资源比.设阶段的资源比为1yz.其中y表示磁盘资源,z表示网络资源.阶段的各个操作资源比为1y1z1,1y2z2,…,1yszs.由阶段的4种类型可知,每个操作仅包含两种资源,且必然包含CPU资源,因此,对于任意操作,yk和zk必有一项为零.我们采用四分位数聚合每个阶段的所有操作的最佳资源比.若y=0,则y为最小的非零yk的值,同理z.采用上四分位数聚合而非均值是考虑yk或zk会有较多的零值,且式(21)是式(20)的临界条件,应该尽量给吞吐量小的一方多分配资源,在大部分情况下基于MapReduce的运算是一种数据密集型运算,I/O相对于CPU均是稀缺资源.6实验验证本节通过实验验证最佳资源比模型的存在性和合理性,并通过实验列出Map/Reduce任务的操作和各个阶段以及任务的最佳资源比,本研究在真实的MapReduce环境下进行,实验环境如表2.节点操作系统MapReduce版本Hadoop1.0.2编程环境功率测量方法依据文献[29]f(t),ω(t)采集频率1秒采集1次数据(Δt=1s)测量单位资源限制工具cpulimit限制CPU资源量,cgroup限制磁盘MapReduce用例Page106.1最佳资源比存在验证本节通过实验数据证明“最佳资源比”的存在.在Map/Reduce任务执行时,某时刻任务将消费CPU资源量rc(t)、磁盘资源量rd(t)和网络资源量rn(t),此时刻对应的能效为η(t).那么,在对于不同的任务,T时间内会对应若干个〈rc(t),rd(t),rn(t),η(t)〉.我们将t时刻rc(t)、rd(t)和rn(t)用三维空间的点表示,并用数据点的大小反映能效的大小,假如最佳资源比存在,在空间中就会存在一条直线,使得这条直线上的能效比其他能效高.我们不同负载对MRBench、WordCount和Sort的能效均做了上述空间散点图,发现能效极值点出现的位置具有一定的规律性,较高的能效点都在一个带状区域中,对于图2CPU资源量、磁盘资源量、网络资源量和能效的关系如图2所示,在rc(t),rd(t),rn(t)构成的三维空间中可以发现,同一个能效分类中的点都处于一个带状区域,说明能效相同的点都在一条空间直线附近,而在一条空间直线上的所有点(x,y,z),都符合x-x0a≈y-y0b≈z-z0c,即符合(x-x0)(y-y0)(z-z0)≈abc(x0,y0,z0,a,b,c均为常不同类型的计算,带状区域出现的位置也不同,初步证明能效与资源比相关.为了找到最佳资源比,我们以WordCount为例进行了如下步骤的实验:令每个节点只同时执行一个任务,并通过工具限制任务使用的资源,使任务在各种分配资源量下执行.我们记录各节点上任务的实时能效(见定义6),首先将n个实验数据点按照能效值所在区间等分成k类,每一类中所有的数据点的能效值都在同一个区间,且各个区间不相交;其次以rc(t),rd(t),rn(t)为坐标轴做出三维散点图(见图2),用灰度和点的大小反映点所属的类别,点越大,能效越大,最后分别取能效值最大的两个分类中的点,用最小二乘法拟合出空间直线.数).由此可以推断,能效相同的点对应的资源比相同.以直线为参照,并从不同视角观察可知,能效值最大的点都在参照直线附近,可以认为该直线上的点具有相同的能效最大值,因此可推断最佳资源比的存在.在三维空间中,或许存在能效更高的点,但这样的点没有被采集到,可以认为,该能效点代表当Page11前测试用例在当前集群环境下不能达到的能效极大值.我们可以通过调整CPU的频率、改变磁盘速度或者改变网络带宽来达到能效更高的点,但这样做也改变了集群环境的特性.综上所述,我们认为,在给定的集群环境下,每一种任务都存在一个特定的资源比,使得在该资源比下能效值最大.6.2空闲资源耗能验证本实验从另一个角度验证资源比的存在和其对能耗的影响,实验不采用能效而从能耗角度考虑空闲资源量.我们计算空闲资源的耗能情况,称为空闲能耗,空闲能耗的计算如式(25),其中Δri.式(25)中,T为任务的执行时间,pc、pd、pn分别为CPU、硬盘、网卡的空载功率,在该实验中pc=37W,pd=13W,pn=4W.rc(t),rd(t),rn(t)分别为时刻t分配的CPU、磁盘、网络资源量,我们采用固定值代替瞬时值.实验环境中用的网络带宽为1000Mbps,理论最大峰值传输速率为1000MB/8s=125MB/s,实验中测得的实际最大值为95MB/s,该值即为|rn|.节点硬盘接口类型为SerialATA1.0a,数据传输率理论可达150MB/s,实验中用hdparm测得磁盘的实际最大读写速度为128MB/s,该值即为|rd|.CPU的最大使用率为100%,最大支持频率2.8GHz,由式(2)计算可以得到,K=10-3,f=2.8×109Hz,ω=1,P=12,Cc=4,Cfn=4,Cmw=64bit,Cfz=2,|rc|近似计算为64MB/s.实验中将CPU频率固定为2.8GHz,则可用CPU使用率的分配代替CPU资源量的分配.通过给任务分配不同的CPU、磁盘、网络资源量,观察任务的运行时间.本文选取如表3所示的11种资源分配策略进行研究.编号CPU资源量/(MB/s)10.25×|rc|20.05×|rc|30.1×|rc|40.2×|rc|50.4×|rc|60.8×|rc|70.4×|rc|80.2×|rc|90.1×|rc|100.05×|rc|110.25×|rc|本实验中用到的测试用例为修改后的Word-Count.为了增大任务的CPU使用率,在Map函数中,每读取完一条数据,做一次复杂度为O(n3)的运算(两个n阶矩阵的乘法).按照式(25)计算得到的实验结果如图3所示.如图3所示,横轴为实验编号,纵轴为集群等待能耗,曲线为趋势线.从图3(a)中可以看出,在资源比相同的情况下,空闲能耗并不随资源量的增大而变化,空闲能耗和资源量之间没有明显关系,而且在误差范围内,各组实验的空闲能耗相同.从图3(b)中可以看出,当资源比发生变化时,空闲能耗也随之变化,而且并不是资源量越少,空闲能耗就越小.该任务平均消费CPU资源量在0.1×|rc|左右.当CPU资源量多于0.1×|rc|,CPU因分配多过资源而空闲,当CPU资源量少于0.1×|rc|,磁盘和网络资源因等待CPU而空闲.6.3MapReduce阶段划分本实验对MapReduce编程模型进行了操作和阶段的划分,Map/Reduce任务的执行过程如图4所示.其中,虚线箭头表示节点内部的数据传输,实线箭头则表示节点之间的数据传输.由前文可知,通过推导操作的最佳资源比即可知阶段的最佳资源比.通过对Map/Reduce任务的执行流程进行分析,可以得到一系列不同算法,不同类型的操作,每个操作在Map/Reduce任务执行流程中出现至少一次.Map任务和Reduce任务各个操作的描述和所属类型见表4.Page12图4MapReduce的执行过程操作名称类型p1MapRemoteInputncMap任务由网络获取Mapp2Key/ValueDivisioncc将远程输入数据分解成键/p3MapLocalInputdcMap函数读取本地输入数p4MapSpillp5MapMerge-readdcp6MapMerge-writecd合并之后将数据压缩后写p7MapShuffle-readdc将生成数据读入CPUp8MapShuffle-writecn将生成数据分别发送给对p9MapDeletecd删除中间结果p10ReduceShuffle-readncReduce端复制,将Map任p11ReduceShuffle-writecdReduce端复制,将Map任p12Reduce-readdc从磁盘或内存读入数据并p13Reduce-writecdReduce函数处理后将数据p14Backup-readdc备份时将数据读入CPUp15Backup-writecn备份时将数据写入到网络操作p2的类型为cc,即CPU先从内存中读取数据处理后再放回内存中,数据生产者和数据消费者都为CPU资源.该种操作类型只消费了CPU一种资源,因此cc类型阶段的最佳资源比定义为1-1-1.其余操作类型的最佳资源比皆可通过第5节中提及的方法计算得到.通过对表4中的操作进行聚合,可以得到Map任务和Reduce任务的阶段划分,每个阶段包含的操作和分配资源如表5所示.每个任务的各种资源(包括CPU、网络、磁盘)的使用特征是相同且可分析的.多个阶段之间或会存在少量的并行执行,但是这种并行性较小,不影响每个阶段的最佳资源比计算.每个阶段在整个Map/Reduce任务执行过程中至多出现一次.除表5所列的阶段类型,通过实验分析发现,在Map/Reduce任务的执行过程中还有一些空闲阶段.在此阶段内Map/Reduce任务处于阻塞状态,对资源没有需求,空闲阶段的持续时间不定.阶段AMapRemoteInputp1,p2CPU,网络BMapLocalInputp3CMapSpillDMapMergep5,p6CPU,磁盘EMapShufflep7,p8CPU,磁盘,网络FMapDeletep9GReduceShufflep10,p11CPU,磁盘,网络HReduceIReduceSavep14,p15CPU,磁盘,网络本研究对MRBench,WordCount和Sort的A~I阶段的最佳资源比进行了分析,由于MRBench的执行时间很短,WordCount的Reduce任务执行时间较短,Sort的Map任务执行时间较短,不利于采集数据和计算最佳资源比.最终本研究成功计算了WordCount的Map任务的最佳资源比,以及Sort的Reduce任务最佳资源比.阶段的最佳资源比仅保留1位小数位,且用-1表示一个非常小的数,本实验列出Sort的Reduce任务各阶段的资源消费特征和最佳资源比,见表6.Page13表6犛狅狉狋的Reduce任务各阶段最佳资源比阶段等待GH首先,从本地磁盘读取数据,然后I将输出结果写入到本地作为第一7结论和进一步工作现有MapReduce集群环境中,不合理的资源分配会导致资源利用率降低,从而产生空闲资源和空闲能耗,最终导致能效低下.本文从资源分配角度提高MapReduce能效,提出了“最佳资源比”模型,即对于一个任务,其各种资源的最佳分配比例并非是最大分配率,而是一个适当的比例,多种资源分配比例和能效之间的关系会是一个类U型曲面,分配率最大和最小都未必能实现能效最优,当分配资源满足最佳资源比时,资源均得到充分利用且不存在空闲,从而实现了能效优化.基于此,本文进行了如下几方面的研究:(1)提出普适的资源和能效模型,该模型适用于任何运算任务,由于最佳资源比是一个比值,因此本研究将各种资源量统一量纲为MB/s,并结合吞吐量的定义,从模型层面证明最佳资源比和能效之间的关系,量化空闲资源量和空闲能耗;(2)分析MapReduce编程模型,提出资源消费的最小单元“操作”和资源分配的最小单元“阶段”这两个概念;将普适的资源比模型变换到MapReduce下.通过数据的“生产者-消费者”模式,求解Map/Reduce任务的最佳资源比;(3)实验分析典型Map/Reduce任务,从任务能效和空闲能耗两个角度证明了最佳资源比的存在,以及按资源比的资源分配对任务能效和空闲能耗的影响;(4)根据实验结果,对MapReduce执行过程进行划分,定义各个操作和阶段,并给出了部分Map/Reduce任务的最佳资源比,验证“任务-阶段-操作”模型的正确性.同时,实验还发现了Map/Reduce任务执行过程中等待阶段的存在.本文仅提出了最佳资源比模型,并论证了最佳资源比对能效的影响,但尚未基于最佳资源比为Map/Reduce任务进行资源分配,也未对Map/Reduce任务调度机制做出改进,因此下一步工作将提出一种基于最佳资源比的资源分配和任务调度算法以提高Map/Reduce集群能效.此外,为了使本文中的理论能够得到实际应用,我们还需要简化最佳资源比的计算过程,如采用计算复杂度来替换公式中大量参数.
