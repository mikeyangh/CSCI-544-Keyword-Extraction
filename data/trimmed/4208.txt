Page1负载均衡感知的无线传感器网络容错分簇算法苏金树1)郭文忠1),2)余朝龙2)陈国龙2)1)(国防科学技术大学计算机学院长沙410073)2)(福州大学数学与计算机科学学院福州350108)摘要好的分簇算法能够有效减少网络能耗和提高网络可靠性,但是簇间负载的不均衡性和通信的不可靠性会严重影响分簇算法的性能.针对这个问题,该文首先提出了一个负载均衡感知的无线传感器网络容错分簇算法.该方法引入了遗传算法的随机两点交叉算子和随机单点变异算子,从而设计了一种以种群粒子优劣为依据的自适应惯性权重调整策略,并提出了一种自适应的离散粒子群优化算法.算法设计同时考虑负载均衡和能量消耗两个优化目标,给出一种基于自适应离散粒子群优化的簇首选举机制;其次,为了保证网络上数据传输的可靠性,以最小生成树为基础,提出了一种用于保证簇首二连通性的簇间连通算法,通过消除网络中的割点,以保证网络的二连通性.仿真实验结果表明,该文提出算法在负载均衡和二连通性上有较好的性能,能有效减少了网络能耗,延长网络生命周期,并提高网络可靠性.关键词无线传感器网络;分簇算法;负载均衡;粒子群优化;二连通性;物联网1引言无线传感器网络(WirelessSensorNetwork,WSN)是由大量分布在空间中的传感器节点组成的系统,WSN不需要预先配置基础网络设施,能够实现传感器节点在监测区域内收集信息,并自由地组网通信,为国防军事、国家安全、环境监测、交通管理、反恐抗灾以及一些应急通信应用提供了快捷的网络部署和业务承载方案,具有广阔的应用前景[1].由于很难对所有传感器节点进行能量补充,因此需要通过某种方式降低传感器节点的能量消耗,从而延长网络的生命周期.分簇算法是有效管理网络能耗以及改进整个网络性能的方法之一[2-6].分簇算法中包含簇首的选举、簇首与基站之间的通信.现有的簇首选举机制针对某个具体目标做出控制,难于在能耗有效性、负载均衡性以及簇首数量之间做出较好的权衡.按照簇首到基站的跳数,簇的结构一般可以分为单跳网络和多跳网络.簇间单跳通信方式需要所有节点与簇首进行直接通信,远距离通信会使簇首节点能量迅速消耗掉,导致距离基站节点较远的簇首节点很快死亡,从而降低了网络的连通性和减少了网络的生存周期.而多跳通信方式,不需要簇首节点有直接与基站节点通信的能力,避免了直接与基站节点通信所耗费的大量能量,当然这样加大了靠近基站的簇首能耗,但与单跳方式的远距离通信相比,多跳方式可以相对减少网络中的能耗.本文采用多跳的通信方式,基站通过簇首与基站之间构成的多跳网络收集信息,因此有必要提供一定的方式,增强多跳网络的传输可靠性.本文提出了一种负载均衡感知的无线传感器网络容错分簇算法.算法中我们提出了一种基于粒子群优化(ParticleSwarmOptimization,PSO)方法的自适应簇首选举机制,同时为了保证主干网络的可靠性,提出了一种用于保证簇首二连通性的簇间连通算法.实验结果表明了我们提出算法在负载均衡性、能量有效利用以及网络容错性等方面能取得较好的效果.本文第2节介绍相关工作;第3节介绍本文协议使用的网络传输模型;第4节给出相应的成簇算法以及算法实现细节;第5节介绍基于本地最小生成树(LocalMinimumSpanningTree,LMST)的簇间二连通算法;第6节中描述实验测试环境,给出本文算法的参数设置和实验结果以及结果比较分析;最后给出结论以及下一步的研究方向.2相关工作分簇算法通过将网络划分成若干较小的簇进行管理,每个簇内都有一个簇首节点接收、融合成员节点发送的数据之后再进行转发,较大限度地降低网络中的数据通信量,减少了网络能耗,有效地延长了网络寿命.文献[2]提出了著名的LEACH算法,该算法采用分布式的簇首选举策略,网络中的传感器节点以一定的概率竞选簇首.虽然LEACH可以在一定程度上节约能量消耗和延长网络寿命,但是它缺乏集中控制,无法保证选举出合适的簇首数量,也无法保证选出的簇首均匀分布在整个网络.文献[3]针对LEACH算法的缺陷进行改进,提出了LEACH-C算法,算法根据基站获得的节点剩余能量信息事先进行分簇,以确定合适的簇首数量.文献[4]结合功率控制理论及算法,提出了一种易于实现、能动态适应网络变化、能量有效的基于跨层优化策略的链路稳定成簇算法.文献[5]中将分簇转化为携近似优化目标的簇划分及簇首选取问题,并采取一种启发式的分簇控制算法.文献[6]提出一种综合考虑节点及其邻居节点能量的簇首选举算法,对较低剩余能量的节点进行保护,虽然能有效减少网络中的能量消耗,但是无法保证合适的簇首数量以及簇首的均匀分布.这些分簇算法虽然能够在一定程度上保证能量的有效利用,但是各个簇的能量消耗不均衡的情况还是存在的.与普通节点相比,如果簇首因为负责簇内和簇间的大部分活动而消耗更多的能量,这样将造成节点间负载不均衡,部分簇首因能耗消耗过快而失效,从而影响了网络的寿命.因此,簇首选举时如何考虑节点的剩余能量和平衡每个簇首的负载是至关重要的.最近,许多研究人员都在研究分簇算法中的负载均衡问题.文献[7]提出了HEED算法,在簇首的选举时考虑了传感器节点当前的剩余能量,该算法中已经考虑并部分实现了分簇的负载均衡,但它无法解决相邻簇之间的不合理距离.同时采用簇首与基站直接通信的方式,而传感器簇首节点距基站较远,因此簇首直接与基站通信要消耗很大的能量.DBCL算法[8]通过将每个簇首节点的成员数量控制在合理范围内,克服了其它算法中普遍存在的各簇节点数量不均衡的缺点.但算法采取随机的簇首选举方式,没有考虑到节点的剩余能量.ACHS[9]和Page3EACHS[10]都是先按照LEACH算法进行分簇,然后通过调整簇首在簇内的位置,分别从簇首到簇内成员节点距离和簇内的成员数量两个方面考虑网络的负载均衡.文献[11]通过建立相邻节点剩余能量预测机制,将节点的剩余能量与选举簇首节点的概率相关,同时通过多簇首的方法,能在一定程度上均衡节点的能量消耗.由于采用随机概率的簇首选举机制,LEACH、ACHS、EACHS和文献[11]的算法都无法保证选举出适当的簇首节点,而且选举出的簇首无法保证均匀分布在目标区域内,这样可能造成更大的能量消耗,影响到负载均衡和网络的性能.另外,簇的数量也影响网络的性能,数量过多或过少都会引起性能下降,数量过多既不便于基站管理,也会增多网络内的通信,增大通信消耗,而数量过少,簇内成员节点数目过多,增加簇首的管理难度.为此,选出均匀分布在目标区域内、具有高效能量的最优簇首集合,是一个NP-难问题[12].PSO是由Kennedy和Eberhart[13]提出的一种启发式优化方法,已成功用于解决许多领域中的问题[14-17].无线传感器网络中节点部署、节点定位、能量有效分簇、数据融合以及拓扑控制等问题都可抽象为相应的优化问题,文献[18]很好地综述了PSO在上述领域的具体应用情况.本文基于PSO方法,设计了一种自适应的基于离散粒子群优化的簇首选举算法(AdaptiveDiscreteParticleSwarmOptimization,ADPSO),在簇首选举时考虑节点的剩余能量和簇的负载均衡.在ADPSO算法中,引入遗传算法中的变异和交叉算子思想以克服过早收敛的现象,并设计一种惯性权重的调整策略.簇首与基站之间构建成的网络是分簇网络中的主干网络,网络中的数据都是通过主干网络汇集到基站,因此主干网络在分簇网络中是至关重要的.如果只维护主干网络的一连通性能,虽然形成的网络拓扑结构中存在冗余边较少,但一旦某个传感器节点失效,就可能导致整个网络的分割,为此有必要维护网络的多连通性.根据图论相关知识可知,一个没有关节点的网络图是一个二连通的网络图.由于WSN的节点容易失效,再加上无线信道存在不稳定性,会使得一般的网络拓扑结构出现拓扑变化频繁的情况.为了提高网络拓扑稳定性,需要考虑消除节点失效对网络拓扑结构造成的相对不稳定影响.构建二连通的网络拓扑结构可以在网络的低功耗和容错性二者之间取得一种平衡.关于传感器网络二连通问题的研究可分为两个方向:一是基于概率论知识,研究网络中因为节点或者链路失效而导致网络分割的概率,并得出相应的经验公式,用于指导网络拓扑结构设计;二是利用图论的相关知识,构建二连通的网络拓扑,使得当某个节点失效的情况下,剩余网络仍然是连通的.文献[19]采用了最小生成树(MinimumSpanningTree,MST)的算法设计思路,使用贪心策略,分别设计了能够保持传感器网络一连通和二连通的CONNECT和BICONN两种集中式功率控制策略.Hajiahayi等人在文献[20]中介绍了一种保持网络二连通性能的启发式算法2-UPVCS,该算法首先需要计算整个网络的最小生成树,然后通过添加边的方式来将一连通的最小生成树转换为二连通的网络图.文献[21]中利用PSO方法,通过尽量减少网络图中的关节点数量,保证网络的二连通性.本文借鉴文献[22]中提出的本地最小生成树构建单连通拓扑的思想,在每个簇首节点运行Prim算法,计算邻居图的最小生成树,然后据此确定自身的发射功率.基站根据得到的簇首之间的拓扑结构信息,运用广度优先搜索算法,计算出图中存在的割点和割边,通过添加边的方式减少割点和割边,从而确保网络的二连通性.3网络模型和能量消耗模型3.1网络模型该模型具有以下性质.方形区域中;本文采用类似文献[2-3]中的传感器网络模型,(1)所有传感器节点随机分布在边长为M的正(2)基站是固定的、可维护的,有足够的能量;(3)所有传感器节点的能量是有限的,同时具(4)所有传感器节点都具有功率控制能力,可(5)所有传感器节点都可以处在簇首节点和普通节点两种模式,而所处的模式是由基站来决定的,每个节点具有足够的数据融合能力.3.2能量消耗模型我们使用一阶无线通信模型[2]计算传送l比特的信息,距离为d所耗的能量或者接受l比特的信息所耗的能量.发送信息和接收信息的能量消耗由式(1)和式(2)分别来计算.有自身的位置信息;以改变自己的传输功率;Page4其中l是需要发送或者接收信息的比特数,d是发送节点和接受节点之间的距离,Eelec是发送节点发送每比特或者接收节点接受每比特信息所消耗的能量,εamp是发送节点发送信息时单位距离的能耗放大倍数.4成簇算法WSN分簇算法中,选择合适的簇数目和在簇首选举时确保簇间的负载均衡都是至关重要的.另外,由于簇首负责簇内和簇间的大部分事务,因此在簇首选举时也应充分考虑剩余能量这一重要因素.在本节中,我们将簇数目、节点剩余能量以及簇的负载均衡等因素加入到簇首选举中,并设计了一种用于簇首选举的自适应离散粒子群优化算法.4.1PSO方法PSO是一种从鸟群的社会行为中得到启发,利用种群的思想来解决搜索问题的方法.种群中的个体像鸟一样可以从自己的飞行经验中、与周围个体的交流中获得的信息来调整自己的飞行速度和飞行方向.在PSO中,粒子的位置代表被优化空间在搜索空间中的潜在解,所有的粒子都有一个被优化的函数决定的适应值,每个粒子还有一个速度决定他们飞翔的方向和距离.每个粒子根据自身和周围粒子的经验在搜索空间中调整自己的位置和速度.位置和速度的更新方程如下所示:Vt+1i=w×Vt其中,Xi和Vi分别表示第i个粒子的位置和速度,t是迭代次数,pBesti是第i个粒子的最优值,gBest表示种群的当前最优值,w是惯性权值,c1和c2为认知因子,反映了粒子对自身最优值以及种群全局最优值的学习能力,r1和r2是在[0,1]范围内的两个随机数,用于增强搜索的随机性,通常使用一个常量Vmax来限制粒子的速度,改善搜索结果.4.2ADPSO算法PSO最初被应用于连续空间的优化,然而文中所涉及的簇首选举问题本身是一个离散优化问题,需要将PSO在二进制空间进行扩展,构造一种离散形式的PSO算法模型.现有文献主要有将速度作为位置变化的概率、直接将连续PSO用于离散问题的求解以及重新定义PSO操作算子3种策略,本文作必须对应问题空间中的某一潜在解.必须与问题空间中的潜在解一一对应.者所在的课题组为解决实际工程应用问题,一直跟踪PSO的研究进展,并给出求解无线传感器网络任务分配问题、超大规模集成电路电路划分以及布局问题的有效离散PSO[15-17].借助前期的算法构造经验并对照PSO的基本思想可以发现,可以利用二进制编码方式表示簇首选举问题,以能量消耗和负载均衡为优化目标,定义相应的适应度函数用于指导演化过程已得到优化的选择结果,因此PSO方法可以应用于簇首选举问题的求解.4.2.1编码PSO对于编码的要求并不苛刻,但是为了有效提高搜索效率和算法的性能,有必要采取一种好的编码.而编码的选择主要考虑完备性、健全性和非冗余性三个原则[17].定义1(完备性).问题空间中的所有点(可行解)都能成为粒子编码空间中点的表现型.定义2(健全性).编码空间中的每一个粒子定义3(非冗余性).编码空间中的各个粒子要想找到完全具备以上3点的编码方式实际上是十分困难的,鉴于本文要解决的簇首选举问题,这里采用0-1二进制的编码方式.假设对含有n个传感器节点的网络进行簇首选举,我们给网络中每个传感器节点进行顺序编号,依次为1,2,…,n.一个粒子代表簇首选举问题的一个可行解,粒子在某一时刻的位置表示成一个n维的0-1排列串,例如粒子i在t时刻的位置可表示为Xtxtin),其中xt点的节点位,1代表该节点被选举为簇首,0代表该节点为非簇首节点.粒子的每一个节点位随机初始化为0到1之间的数值,如果随机数小于预先设定的簇首比例,粒子该节点位上的数值将被置1,否则被置0.粒子i在t时刻的个体极值表示为pBestti=(pBestti1,pBestt为gBestt=(gBestt1,gBestt2,…,gBesttn).假设8个单元的某一个粒子编码如图1所示,则粒子解码后第2、5、7、8个传感器节点被选举为簇首.Page5则和非冗余性原则,但不满足健全性原则.性质1.二进制编码方式满足编码完备性原显然,利用二进制编码方式来解决簇首选举问题满足编码完备性原则,而且不同编码的粒子分别表示了不同的簇首选举方案,也就是对应着问题空间中不同的可行解,因此该编码方式用于求解簇首选举方案也满足非冗余性原则,然而对于健全性原则,由于存在编码空间的粒子有可能对应问题空间中不可行解的情况,如全部的传感器节点都未被选举为簇首.为了克服二进制编码不满足健全性原则对算法实现所造成的障碍,在初始化粒子时,我们确保粒子中至少有一个节点位置1,这样可以保证初始化的粒子都是问题空间的可行解.同时下文设计了适用于此编码方式的交叉和变异策略,保证了粒子在位置更新后依然可行,从而避免了在搜索过程中出现不可行解的情况.4.2.2适应值函数簇首节点负责大多数的活动,比如簇内通信、数据融合、簇间通信,需要消耗更多的能量,从而可能因为能耗过大而过早失效并造成整个网络性能的降低.因此本文在选择簇首节点时从以下两个方面进行考虑:选取剩余能量大的簇首节点,同时均衡好簇首节点的负载.首先考虑选取剩余总能量较大的簇首节点集合,假设K为当前粒子选出的簇首节点数量,也就是粒子Xtij(j=1,2,…,n)中节点位为1的位数,图1中粒子的K值就为4.这里CH表示簇首集合,CHk(k=1,2,…,K)表示第k个簇的簇首节点.如式(5)所示,f1表示所有节点的当前剩余能量与簇首节点集合的剩余能量的比值,f1的值越小,则簇首节点集合的剩余总能量就越大,其中E(i)表示粒子中传感器节点i的剩余能量.当前粒子选定簇首节点之后,非簇首节点采取类似文献[8]的簇选择策略加入到某个簇中.这里用集合CSk表示第k个簇的成员节点集合,用Ck来统计第k个簇的簇内成员节点数量,若节点j加入第k个簇,可以表示为j∈CSk,Ck值加1.对当前粒子分完簇之后,则要进一步考虑当前簇的负载.负载的不均衡性会降低网络通信的质量,导致负载大的簇首能量消耗就比较快,从而影响了网络的整体性能.簇的负载主要包括簇内的负载和簇间的负载,这里也分别从这两个方面进行考虑:对于簇内的负载均衡,这里从簇内成员节点数量和簇内成员节点到簇首的距离两方面考虑,如式(6)、(7)所示,f2表示各个簇首节点到其簇内节点之间的最远距离和r之间偏差的平均值,平均值越小,代表簇内成员节点的距离分布越均匀;f3表示每个簇内的成员节点数量和平均簇内成员数量之间的差异程度,差异程度越小,各个簇之间的成员数量越接近,就越能有效地均衡簇首间的能量消耗,从而延长网络的生命周期.其中,d(x,y)表示节点x与节点y之间的距离,r是理想情况下整个网络区域能够得到覆盖时簇的半径,理想情况下每个簇的面积均匀分布在网络区域内,每个簇之间不存在覆盖面积,理想情况下每个簇的面积应该为A/(pro×N),其中A是整个网络区域的面积,pro是预先设定的簇首比例,pro×N是簇首的数量,所以理想情况下r的值为A/(π×pro×N槡f2=∑K簇间的负载主要是从簇首之间的平均距离进行考虑,如式(8)所示,f4表示簇首之间的平均距离,簇首之间的平均距离越小,簇间的负载就越小,可以减少网络的通信能量消耗.f4=2∑K-1适应值函数作为评判粒子好坏的一个标准,因此本文在适应值函数中综合考虑了节点剩余能量和负载均衡性,通过加权和的方式将多目标优化问题转换成单目标优化问题,如式(9)所示.其中α,β,δ和γ为加权因子.4.2.3算法模型式(3)中的惯性权重w已被证明是一个重要的参数,它影响到PSO的搜索能力和收敛性.小的惯性权值有利于局部搜索,而大的惯性权值有利于全局搜索.在搜索的初期应更注重粒子的全局搜索能力,而在后期更注重局部搜索能力,因此惯性权值应随着不断地迭代而逐渐减少.传统的线性递减惯性权重调整策略[23]如下所示:Page6但是该策略中w的变化只与迭代次数线性相关,不能适应算法运行中的复杂、非线性变化特性.事实上,w的大小应该随着粒子群进化而改变,本文设计了一种根据当前粒子的好坏进行调整的自适应惯性权重的调整策略,策略中粒子与全局指导粒子之间的差异程度根据下面的函数来计算的:其中,div(Xt-1局指导粒子gBestt-1中不同的节点位的位数,N是粒子的维数.div(Xt-1i与全局指导粒子之间的差异程度就越大,应该Xt-1增大w值,使得粒子在较大空间内搜索,以便更快地找到最优解;div(Xt-1i与全局指导粒子之间的差异程度就越小,应子Xt-1该减小w值,确保粒子在小空间内搜索,以便找到最优解.本文根据以下公式计算惯性权值:其中,wmax,wmin分别为初始化时w的最大值和最小值.如式(12)所示,当d(Xt-1就会比较大,惯性权值较大有利于跳出局部搜索寻找全局最优值.相反,当d(Xt-1值就会比较小,此时有助于寻找局部最优解,加快收敛速度.这里采用根据文献[21]中设计的加速因子c1和c2.在PSO中,式(3)中包括了3个部分:惯性部分、个体认知部分和社会认知部分.为了克服PSO中存在的过早收敛的缺点,我们将遗传算法中变异和交叉算子的思想引入到式(3)中相应的3个部分.这里,粒子i的位置在t时刻的更新公式如下:Xti=c2Cg(c1Cp(wM(Xt-1(1)式(3)中的惯性部分结合了遗传算法中变异的思想,其中函数M表示以概率w对前一时刻粒子进行变异操作.i=wM(Xt-1At(2)式(3)中的个体认知部分和社会认知部分结合了遗传算法中交叉的思想(其中函数Cp和Cg分别表示以概率c1,c2进行交叉操作).针对本文采用的二进制编码方式,算法采用随机两点交叉算子和随机单点变异操作.为避免可行解经过交叉或变异后而产生不可行解,本文对交叉和变异算子做了改进.改进后的交叉操作如图2所示,先在要进行交叉的两个粒子中随机选择两个交叉点并交叉两个粒子中处于两个交叉点之间的模块,交叉后选取新粒子的时候我们选择K值较大的粒子,因为在粒子的初始化中我们已经确保粒子中至少有一个节点位为1,交叉后的两个新粒子就不可能都是节点位都为0的,至多只有一个新粒子可能没有节点位为1,选取K值较大的就可以保证新粒子是可行解.在Cp和Cg操作中,新的粒子分别和粒子的个体极值和全局指导粒子进行交叉.而变异操作如图3所示,在进行变异之前,先检测该粒子序列的K值是否为1,如果为1而且当前选定变异节点位的值为1,重新选择其它变异点;其它情况就正常变异,这样就可以确保变异之后的新粒子是可行解.4.3最优簇首数量分析分簇算法主要研究通过何种方式将节点划分为簇,使簇数目与最优分簇数目一致.现有的分簇算法大都只关心算法的消息和计算复杂度,难以保证合适的簇数量和簇内通信以及簇间通信的负载均衡性.簇数目过多或过少都会引起性能下降,过多的簇Page7不便于基站管理,也会导致和基站直接通信的节点数增多,增大远距离通信能耗,而簇数目过少,则簇内成员节点数目过多,又会增加簇首的管理难度,进而影响算法性能.负载的不均衡将造成局部节点的能量消耗过大而过早失效,影响整体网络的性能.本节这里在一阶模型的基础上,分析随机部署网络的最优分簇数目.定理1.以一阶无线传输模型为能耗模型,随机在边长为M的正方形区域内部署N个传感器节点,最优的分簇数目为k=M×Nεamp/(2π(εampd2其中dCHtoBS为簇首节点到基站节点的平均距离.证明.假设监测区域内的N个节点被均匀划分为k个簇,每个簇内的节点数为N/k-1,根据节点的能耗模型可知,簇首能耗ECH包括接收簇内节点感知数据的接收能耗和向基站转发数据的发送能耗,而成员节点能耗ENEN包括数据感知能耗和向簇首发送数据包能耗.由于节点在监测区域内是随机均匀分布的,簇内节点也服从均匀分布.每个簇占据区域S面积为M2/k,区域内节点的分布密度函数为该节点与簇首距离平方的数学期望为整个网络的总能耗则为Etotal=k×Ecluster=k×ECH+k×(N/k-1)×ENEN=k×((N/k-1)×lEelec+lEelec+lεampd2=l(2NEelec-kEelec+kεampd2将式(18)代入式(19),可得到网络总能耗为Etotal=l(2NEelec-kEelec+kεampd2槡对式(20)关于k求一阶导数,可以得到当k=M×Nεamp/(2π(εampd2最小,此时的k值就为网络内节点总能耗最小的最优分簇数目.5簇间连通算法上一节给出了无线传感器网络的分簇算法,而由于在簇内成员节点与簇首之间如采取单跳方式进行通信,要求所有节点都直接与簇首进行通信,远距离通信会消耗过多能量导致簇首节点容易失效,从而不利用大规模网络的建立,为此这里为避免直接与基站节点通信而耗费大量能量,采取可以能够相对减少各个簇首在簇间通信时能量损耗的多跳通信方式.在多跳通信方式中,需要考虑信息传输过程中的可靠性,以免链路或者节点失效,并提高网络的连通性.这里所设计的簇间连通算法以LMST算法为基础保证网络的单连通性,并在此基础上通过添加边的方式来减少网络图中的割点和割边的数量,以期提高网络的连通性.算法具体步骤如下.1.构建簇间初始连通拓扑图;2.在初始连通图上构建簇间二连通图;3.确定各个节点的最终发射功率.在步1,这里利用LMST算法构建簇间通信的初始连通图.每个节点通过信息交换来获得其在最大发射功率范围内的单跳邻居的信息,根据各个节点的邻居信息,利用Prim算法来获得节点的局部最小生成树以构造全局的初始拓扑.步2中根据步1得到的初始拓扑,利用深度优先搜索算法计算连通图中的割点和割边,然后去除网络中的割点和割边.首先我们先去除网络中的割边,对于割边有两种情况:第1种是割边的一个顶点为叶子节点,第2种是割边的两个节点都不是叶子.对于第1种情况,这里通过从叶子节点开始递归查找度数大等于3的节点,然后增大该叶子节点的发射功率使得节点可以发送信息到不在该叶子节点到首个度数大于3的节点的路径上的点,叶子节点与首个度数大等于3的节点之间的边都为割边,点都为割点,通过这种方式我们有效的减少了网络中的割点和割边的数量,而对于找不到这样点的情况则按第2种情况处理;对于第2种情况我们通过增大与割边上的两个点直接相连的节点的发射功率来去除.对于割点的处理,这里要利用之前计算割点时得到的信息,其中dep[i]用来表示在深度搜索过程中编号为i的节点访问序号(也可以叫做开始时间),而low[i]表示i节点及其下方节点所能到达的开始时间最早的节点的开始时间,通过分析可得到以下两个性质.性质2.在包含割点的所有连通分支中,当割点是最早开始访问的节点时,各个连通分支的节点的low是相同的,相同的连通分支的节点的depPage8值是不同的,不同的连通分支存在dep值相同的节点.性质3.在包含割点的所有连通分支中,当割点不是最早开始访问的节点时,不同连通分支的节点的low值是不同的.结合深度优先搜索的特性,上述两个性质是显而易见的.根据上述两个性质可以知道在包含割点的连通分支中两个low不同的或者low相同且dep也相同的节点分布在两个不同的连通分支中,通过增加这两个节点的发射功率使得二者之间能够相互通信.步3中节点按照其邻居节点关系调整其发射功率,确定各节点的最终发射功率,使得节点能够到达最远邻居节点.本文为了保证簇首和基站之间的二连通性,在考虑簇间连通时将基站加入到网络的拓扑图中.当然在去除割边或者割点的过程中,如果发射功率增大到节点发送信息到基站所需要的发射功率时,此时无法完全去除网络中的割点.考虑到本文最终目标是保证簇首节点收集到的信息可靠地发送到基站,这里可以让那些与割点相连的节点或者割边上的两个节点直接与基站进行通信,当割点或者割边中的某个节点失效的时候保证网络中的数据仍然可以送到基站.通过上述策略,可以有效地保证了网络图的二连通性.6实验分析为了评价和分析本文提出算法的性能,在MATLAB平台上对多个算法进行了一系列的仿真实验,主要分3组进行实验:第1组实验主要验证ADPSO算法的分簇效果,分别对簇首的数量和簇内以及簇间通信的负载均衡进行测试,并与一些比较经典分簇算法进行分析;第2组实验是对簇间连通算法的性能进行验证,并与两个二连通算法进行性能比较;第3组主要是对网络的生命周期和能耗进行测试.6.1ADPSO分簇效果验证实验假定在150×150的目标监测区域内,随机部署若干个传感器节点,每个传感器节点的初始能量相同,且基站处于目标检测区域的中心.本文ADPSO算法的参数设置同文献[21]:种群规模popsize=30,wmax=0.9,wmin=0.4;通过多次实验,本文算法适应度函数的权重等参数按如下设置可以在较短的时间取得优质解:α=0.2,β=0.3,δ=0.3,γ=0.2,簇首比例pro=0.1;与文献[2]一样,网络能量消耗模型中的参数设置如下:l=2000bit,Eelec=50×10-6J/bit,εamp=10×10-9J/(bit×m2).6.1.1簇首数量这里首先对不同网络规模下簇首的数量与3.3节定理1的最优簇首数量进行实验对比,实验中的节点个数分别为100、200、300、400、500和600,具体结果如表1所示,其中最优簇首数目是根据3.3节定理1计算所得.节点数目簇首到基站的平均距离簇首数目最优簇首数量100200300400500600从表1结果可以看出,本文算法在节点为100、200、300、400、500和600时簇头数量与最优簇头数量之间的差距分别为1.35、1.48、0.39、0.46、-0.02和0.06.本文算法选出的簇首数目在网络规模较小的时候,与理论最优簇首数量有所偏差,但随着网络规模不断增大,与理论最优簇首数目之间的差距逐渐缩小,从原先的1.35逐渐下降到0.02,并维持着较小的差距,从而说明本文算法能够得到相对较优的簇首数目,有效地减少了网络的能耗.6.1.2簇内通信的负载均衡簇内通信能量消耗的平衡是影响负载均衡的重要因素之一.簇内通信消耗与簇内成员节点数量、簇首到其成员之间的距离成正比,因此验证算法的负载均衡性能主要考虑簇内成员数量的平均偏差(Intra-memdevi)和簇首到其成员节点的平均距离的平均偏差(Intra-disdevi),具体结果如表2所示.表中的Intra-memaver表示簇内平均成员节点数量,Intra-disaver表示簇首到其成员节点的平均距离,这两个变量主要反应了簇内通信消耗的平均负载,平均负载越小,则网络的能耗就越小.而偏差主要反应了不同簇之间的负载差异程度,偏差越小,各个簇间的差异程度就越小,负载就更均衡.在前面定义的适应值函数中,我们也考虑了簇内成员节点到簇首的距离和成员节点的数量,有效地确保了算法得到较好的平均负载和负载均衡效果.从表2可知,本文算法得到的平均距离为12.7,小于LEACH、DBCL算法的14.9和20.5,大于HEED算法的10.9,本文算Page9法得到的平均成员节点数量为11.4,低于LEACH、DBCL算法的12.6和13.5,高于HEED算法的7.3,因此本文算法在平均距离和平均成员节点数量这两方面保持相对较好的性能.同时从表中也可以看出,本文算法得到的簇内成员数量和平均距离的偏差分别为3.1和2.13,与其它算法相比具有更小的偏差,从而本文算法具有更好的负载均衡性.算法Intra-disaverIntra-disdeviIntra-memaverIntra-memdeviLeach14.93.9712.68.08Heed10.93.107.38.40DBCL20.55.3013.54.20本文算法12.72.1311.43.106.1.3簇间通信的负载均衡簇间的通信能耗均衡是衡量负载均衡的另一个重要因素,本文这里主要对相邻簇首之间的平均距离以及平均偏差进行测试,具体结果如表3所示.相邻簇首之间的平均距离(Inter-disaver)反映簇首之间的通信能耗,而相邻簇首之间的距离平均偏差(Inter-disdevi)则反映了通信消耗的差异程度.前面定义的适应值函数中,我们也考虑到相邻的簇首之间的平均距离,从而保证了相邻簇首之间的平均距离上有更好的性能.平均距离较大,将消耗更多的能量,并极大地影响了网络的生命周期.从表3结果可知,本文算法获得的相邻簇首之间的平均距离和平均偏差分别为29.6和7.3,比LEACH,HEED和DBCL算法都小,减少了簇间通信的能量消耗和不均衡性.算法Inter-disaverInter-disdeviLEACHHEEDDCBL本文算法6.2二连通算法性能验证实验在本组实验中,为了分析本文设计的二连通算法性能,在MATLAB平台上进行了多次的仿真实验,实验结果与两种二连通算法BICONN和BTCPSO进行对比.为有效进行算法比较,不失一般性,假定在100×100的目标监测区域内随机部署n个传感器节点,图4为本文算法、BICONN和BTCPSO这3种方案在传感器节点数为50的情况下所获拓扑结构的比较.从图5(a)可以看出,3种控制方案的平均链路长度都随n的增长持续减小,本文算法能以较短的平均链接长度维持网络的全局连通,在降低网络的整体能耗方面具有较强的优势.图5(b)给出3种控制方案平均节点度的对比结果,图中可以看出其它两种算法随着网络规模的增加平均节点度有上升的趋势,而本文算法得到的拓扑结构具有较低的平均节点度,基本都维持在3.1以下,且平均节点度也相对比较平稳,不会随着网络规模的变化而发生较大的变化,从而说明本文算法具有较好的稳定性而且干扰较低.从图5(c)可以看出,在网络规模为30时,BICONN和BTCPSO算法的关节点数量都在3以Page10上,而本文算法的关节点数量基本为0,BICONN和BTCPSO算法的关节点数随着网络规模的持续增长而减少,但是本文算法有更好的稳定性,能够保证在不同的网络规模下都基本不存在关节点.特别是当网络节点数目较少时本文算法相对其它两种算法的优势更为显著,鉴于在分簇算法中簇首的数量只是小部分,这一特性也比较适合用于保证分簇算法的簇间连通性,因此本文算法相对其它两个算法在簇间连通的时候更能保证拓扑结构的连通性.6.3网络生命周期和能量消耗对比实验6.3.1网络生命周期网络生命周期是评价网络性能的一个重要因素,而负载均衡有助于延长网络生命周期.上述的仿真实验已经验证了本文算法在负载均衡上具有更好的性能.本文假定网络生命周期为50%节点失效的时间,网络生命周期结果对比如图6所示.从图6中可以,LEACH、HEED和DBCL算法的生命周期都在400左右,而本文的算法的生命周期在700左右,因此本文算法的网络生命周期都大于LEACH、HEED和DBCL算法.同时从图中也可以看出,其它3个算法都在300代之前出现首个失效节点,而本文算法出现在400代,因此本文算法的网络中首次出现失效节点的时间也比其它算法要晚得多,意味着本文算法得到的传感器网络能够在没有节点失效故障下工作更长的时间,有效提高网络的整体性能和效率.6.3.2网络的能量消耗考虑网络生命周期时,本文同时兼顾了网络中的能量消耗,在簇间采取多跳的通信方式以期有效减少簇间的通信消耗,并降低网络的能量消耗,网络能量消耗结果对比如图7所示.由图7可以看出,4个算法的能量消耗在算法运行初期差距较小,但随着算法的不断运行,本文算法相对LEACH、HEED和DBCL算法能量消耗量百分比之间的差距不断拉大,运行到400代时,Page11LEACH、HEED、DBCL的能量消耗百分比都超过70%,剩余能量低于30%,本文算法的剩余能量则高于40%,表明此时算法剩余能量大,因此运行过程中消耗更少的能量,可有效延长网络生命周期.从上述实验对比结果可知,本文采用ADPSO算法进行分簇,既可以保证合适的分簇数,又可以使簇的通信具有较好的均衡性,另外所设计的簇间二连通算法也能较好保证了网络的容错性.但是该算法是通过去除割边或者割点来实现的,可能无法完全去除网络中的割点.鉴于本文最终目标是保证簇首与基站间通信的可靠性,采取了节点直接与基站进行通信的方式来避免这个问题,所以该二连通算法仅适用于簇首与基站之间的通信,具有一定的局限性.7结论针对分簇的负载均衡问题,本文同时考虑了负载均衡和能量消耗,提出了一种基于ADPSO算法的动态簇首选举机制,该选择机制能够较好地适应网络的动态变化,保证选举出适合比例的簇首,并有效地保证了能量消耗的均衡性,延长了网络的生命周期.此外,为保证数据传输的可靠性,通过对LMST算法的分析,提出了一种用于簇首与基站之间的二连通算法,通过采取多跳通信方式有效地减少了簇首与基站之间的通信能量消耗,实验结果表明算法能够在一定程度上有效保证网络的二连通性,具有较好的稳定性和较低的干扰性.由于传感器节点和链路的传输质量受环境因素的影响较大,从而会给分簇拓扑控制带来不确定性,下一步重点展开的工作是考虑网络环境中节点移动或者节点失效带来的拓扑结构变化所造成的影响及其应对策略.
