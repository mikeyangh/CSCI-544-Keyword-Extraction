Page1基于优化冲突集提高下界的MAXSAT完备算法刘燕丽1),2)李初民3),1)何琨1)1)(华中科技大学计算机科学与技术学院武汉430074)2)(武汉科技大学理学院武汉430081)3)(亚眠大学计算机科学系80033法国)摘要最大可满足性问题(MAXSAT)是经典的NP完全问题SAT的一个扩展问题.基于分支限界设计MAXSAT完备算法时,如何有效地提高下界是设计高效算法的关键和难点.基于优先找到规模小、结构简单的冲突集的思想,在Maxsatz算法的基础上,提出了改进的算法Maxsatz2013.通过使用推理规则优先、改变单子句的传播顺序、进一步失败文字检测这3个优化策略,增加了检测到的冲突集数,从而有效地提高了下界.测试了MAXSAT4个类别共800多个算例.实验结果表明,这3个优化冲突集的策略是可行且有效的,所提出的算法在每一类算例上均明显地提高了计算效率.关键词NP完全;最大可满足性问题;单子句传播;推理规则;失败文字1引言可满足性问题(SatisfiabilityProblem,SAT)是第1个被确定的NP-完全问题[1],在可计算性和计算复杂性领域有重要的研究价值.SAT问题研究只回答对给定的合取范式是否能找到一组真值指派使其满足.最大可满足性问题(MaximumSatisfiabilityProblem,MAXSAT)是SAT问题的一个重要扩展,其目标是找到一组真值指派使得合取范式中满足的子句数最多.SAT问题可看作是MAXSAT问题的一个特例,若MAXSAT问题求得的最优解与合取范式所含的子句数相等,则表示所有子句满足,那么SAT问题的解就为“是”,否则,为“否”.MAXSAT问题在现实生活中有着广泛的应用,因为很多实际问题求解更多时候需要一个最优解,而不仅仅是“是”或“否”的判断.如对于组合拍卖问题,每个买家会挑选若干商品并给出自己的价格,在每件商品不能同时卖给2个以上买家的约束条件下,相比是否能满足所有买家的需求,拍卖者更关心如何获得最大的收益.MAXSAT问题求解不同于SAT问题的求解.我们知道,2SAT问题的计算复杂度是多项式级,属于P类问题,而对于Max2SAT问题其计算复杂度已是NP难.对于子句长度为2,含有n个变元的Max2SAT问题,要求得最优解必须遍历2n大小的取值空间.另外,对于3SAT问题,SAT算法一旦找到一个在当前赋值下不满足的子句,即回溯,但对于Max3SAT问题,仅当不可满足子句数大于等于当前最少不可满足子句数时才回溯MAXSAT问题可分为4类:(1)不加权MAXSAT.每个子句权重为1.(2)加权MAXSAT.每个子句可有不同的权重.(3)偏MAXSAT.合取范式中必须被满足的子句称为硬子句;不一定被满足的子句称为软子句.偏MAXSAT问题是找到一组真值指派,在满足所有硬子句条件下,使得满足的软子句数最多.(4)加权偏MAXSAT.在偏MAXSAT基础上,软子句可有不同的权重.这4个类别可以描述不同的实际问题,其中,前3类可看作是加权偏MAXSAT的特例.每一类MAXSAT问题的算例有3个类型:工业算例是描述实际的工业生产问题,算例规模大;随机算例是由随机算法产生的算例,可用子句数/变元数比值(C/V)衡量算例的复杂度;构造算例是由MAXSAT研究者或一些来自大学的研究人员设计的算例,这些算例的结构复杂,加大了问题的求解难度.目前,MAXSAT完备算法主要分为两类[2].一类是基于SAT不可满足的内核(Unsatfiabilitycores),利用SAT问题的求解技术,如冲突子句学习、非时间序列回溯来寻找不可满足的内核.如subSat[3]、Qmaxsat[4]、Wbo1.6[5]等.另一类是基于深度优先的分支限界方法.在当前分支点,若不可满足子句数的下界大于等于当前不可满足子句数的上界,则可以提前剪枝.如Incwmaxsatz[6]、Akmaxsat[7]等.前一类算法在工业算例中表现出色,而后一类算法在随机算例和构造算例中有很大的优势.本文在Li等人[8]提出的Maxsatz的基础上,通过使用推理规则优先、单子句排序以及进一步失败文字检测3个优化冲突集的策略,提出了改进的算法Maxsatz2013.实验表明Maxsatz2013在4个MAXSAT类别800多个算例中,在同等机器条件下,运算时间明显缩短,而且随着算例规模的增大,剪枝率可以提高30%以上.2Maxsatz算法框架本节给出Maxsatz算法涉及到的基本概念及其算法框架.2.1基本概念定义1.变元.符号V表示一个命题变元集合,V={x1,x2,x3,…,xn},变元xi可取值为真或假.对任意一个变元xi,符号xi及其否定形式珚xi称为文字,记为li.称xi为正文字,珚xi为负文字.xi=1时,正文字为真,xi=0时,负文字为真.定义2.子句.子句是V上若干文字的析取,记为c.由若干子句构成的集合称为子句集,记为C.子句所含文字的个数,称为子句的长度,记为|c|.特别地,只含有一个文字的子句称为单子句.不含有任何文字的子句称为空子句,记为□.若子句集C中的子句长度均为k,则称C为k元子句集,记为|C|k.定义3.合取范式.合取范式(ConjunctiveNormalFormula,CNF)是由若干V上的子句的合取构成的命题公式,记为F.定义4.子句满足.子句中至少有一个文字为真,称该子句满足,否则,称子句不满足.空子句因不Page3含有任何文字,所以永远不满足.定义5.SAT问题.给定命题变元集合V和子句集C,是否存在一组关于V的真值指派(变元取值为真或假)使得C中所有子句满足.MAXSAT问题.给定命题变元集合V和子句集C,寻找一组关于V的真值指派使得C中满足子句数最多.若子句集C中任意一个子句均含有k个文字,则称为kSAT问题.定义6.单子句传播.单子句满足的唯一可能性是单子句中的文字为真.单子句传播(UnitPropagation,UP)是指令某个单子句满足,简化合取范式F的过程,具体操作如下.过程1.单子句传播.Input:单子句ciOutput:空子句或简化后的F1.令单子句ci中的文字l为真;2.检查其余子句,对形如l∨li∨…∨lk含有文字l的子3.对形如珋l∨li∨…∨lk含有珋l的子句,删除文字珋l,简化子句为li∨…∨lk,特别地,当子句只含有一个文字珋l时,该子句简化为空子句;句,移除整个子句,因为该子句已满足;结束,否则,对步3产生的新单子句重复以上步骤.4.若有空子句产生或无新的单子句产生,单子句传播定义7.冲突集.对任意一组V上的真值指派,若子句集C至少有一个子句不可满足,则称C为冲突集,记为Φ.若两个冲突集的交为空,则称它们是相互独立的.定义8.极小冲突集.若从冲突集Φ中移除任意一个子句后,其余的子句均可满足,则称Φ为极小冲突集.x-4∨x-5,x5,x1∨x5,x1∨x2∨x6,x4∨x7,x-6∨x7}.通常,利用单子句传播来寻找冲突集.例1.设F1={x1,x-1∨x2∨x3,x-1∨x6,x-1∨x4,子句x1的单子句传播过程是:(1)令x1=1,子句x1∨x5和x1∨x2∨x6已满足,所以移除这两个子句;子句x-1∨x2∨x3,x-1∨x6和x-1∨x4,分别简化为x2∨x3,x6和x4,无空子句产生.(2)对新产生的单子句x6进行单子句传播,令x6=1,x-6∨x7简化为x7,无空子句产生.(3)对新单子句x4进行单子句传播,令x4=1,子句x-4∨x-5化简为x-5,无空子句产生.(4)对新单子句x7,令x7=1,无空子句和新子句产生.(5)对新单子句x-5,令x5=0,子句x5化简为空子句,子句x1的单子句传播过程结束.例1显示,单子句传播过程是广度优先的遍历过程,其原因是从子句x1到空子句的路径越短,表示UP可以越早找到空子句.利用UP推导出一个空子句的子句集是一个冲突集,但不一定是极小冲突集.为了方便找到极小冲突集,可借助推理图进行分析.推理图的原理是x-i∨xj等价于xi→xj.当xi为真时,xi→xj的值为真当且仅当xj的值为真.图1显示因x1=1,x4=1,x5=0的赋值,导致子句x5不可满足,产生了冲突,所以出现在两条有空子句的路径上的子句集{x1,x-1∨x4,x-4∨x-5,x5}是一个极小冲突集.虽然子句x-1∨x6和x-6∨x7出现在传播过程中,但x6、x7为真并不能导致x5取值为0,不是冲突出现的原因.定义9.合取范式的等价性.MAXSAT问题中,F1与F2两个合取范式是等价的当且仅当F1与F2对于每一组真值指派有相等的不可满足子句数.定义10.失败文字.若令文字l为真,进行单子句传播,可推导出一个空子句,则称l为失败文字.2.2Maxsatz算法框架Maxsatz算法是基于分支限界法有代表性的MAXSAT完备算法.分支限界类别中的绝大多数算法都以Maxsatz为基础.本节主要介绍该算法的框架、算法核心工作以及下界的计算方法.2.2.1Maxsatz算法框架MAXSAT完备算法求解目标由求解最多满足子句数可等价转换为求解最少不满足子句数.对于一个长度为k的子句来说,有2k种真值指派.仅当子句中所有文字都为假时,该子句不满足,而对其余的2k-1种真值指派,该子句都满足.在未得到变元完整的真值指派情况下,算法利用检测冲突集方法可计算出合取范式中至少有多少子句不可满足.因此求解最少不满足子句数比求解最多满足子句数要方便些.算法中的上界(UpperBounds,UB)是在当前最优的一组完整真值指派下,合取范式F的不满足子句数,其初始值为F的所有子句数.下界(LowerPage4Bounds,LB)是在当前分支点,F不可满足子句数的一个下界,其初始值为0.Maxsatz算法框架[9]如下.算法1.Maxsatz.输入:合取公式F和初始上界UB输出:F的最小不满足子句数及对应的真值指派1.if(F=or只包含空子句)return空子句数;2.LB=在当前部分真值指派下的空子句数+3.if(LBUB)returnUB;4.选择分支变元x;5.if(Maxsatz(x=0)<UB)6.if(Maxsatz(x=1)<UB)7.returnUB.在每个分支点,算法第2步下界的计算包含两个部分,其一是计算因当前部分真值指派,不满足子句数;其二是当部分真值指派扩展为完整的真值指派时,估计不可满足子句数的下界.算法测试独立冲突集数作为下界估计值.因为每一个冲突集里至少有一个子句是不可满足的,所以冲突集数可看作是不可满足子句数的下界值.需要注意的是,冲突集之间必须是相互独立的,否则会造成下界的扩大,使算法最后不一定能找到最优解.如例2所示.例2.设F1={x1,x-1∨x2,x-2∨x3,x-3,x-1∨x4,x-1∨x5,x-4∨x-5}.如图2所示可以找到产生两个空子句的集合{x1,x-1∨x2,x-2∨x3,x-3}和{x1,x-1∨x4,x-1∨x5,x-4∨x-5}.但这两个集合的交是{x1},不是相互独立的,下界不能加2.若下界加2,F1将不满足范式等价性,因为在x1=0,x4=0的赋值下,F1集合只有一个子句x1不被满足,下界被扩大了.在实践中为了保证冲突集的独立性,通常把已找到的冲突集移除,再进行下一个冲突集的检测.基于分支限界法的MAXSAT完备算法遍历搜索树时,若在某一分支结点LBUB,则表明分支点下的搜索路径会找到比目前UB还要多的空子句,可以提前剪枝.提高下界值可以提高剪枝率,所以冲突集质量的高低直接决定算法的效率.效率高的分支限界算法要求有好的分支变元选择策略和有效的冲突集检测方法.经典的分支变元选择策略有MOM’s[10]、Backbone[11]等.MOM’s启发式策略是每次选择在最短子句中出现次数最多的变元作为分支变元.Maxsatz算法中第4步分支变元选择方法可看作是MOM’s策略的一个应用.具体方法是将变元的正、负文字在一元子句集、二元子句集和三元子句集中出现次数之和作为该变元的分数[8],即Score(x)=|C|1(x)+8×|C|2(x)+|C|3(x)+然后取分数最高的变元作为分支变元.因利用UP寻找冲突集时,含有相反文字的二元子句可以简化为单子句,加快推导出空子句的速度,所以二元子句集的权重为8.在选择分支顺序时,若正文字出现次数总和大于负文字出现次数总和,则分支变元先赋值为真,否则先赋值为假.2.2.2下界的保守估计对下界进行估计时,算法需要保证CNF的等价性.在Maxsatz算法中,下界值的估计工作主要包含两个部分,UP检测和失败文字检测.UP检测是依次对合取F中的单子句进行单子句传播,以便找到由该单子句传播导致的冲突集.这部分主要运用了以下6个规则.规则1.设F1={x1∨x2∨…∨xk,x-1∨x2∨…∨xk}∪F,那么F2={x2∨…∨xk}∪F与F1等价[12].当子句长度为2时,{x1∨x2,x-1∨x2}等价于{x2},产生了一个单子句.规则1可以简化CNF范式,产生寻找冲突集的单子句.规则2.设F1={x1,x-1},那么F2={□}与F1等价[13].规则2表示无论x1赋值为真还是假,F1都会产生一个空子句.规则3.设F1={x1,x-1∨x-2,x2}∪F,那么F2={□,x1∨x2}∪F与F1等价[9].规则4.设F1={x1,x-1∨x2,x-2∨x3…x-k-1∨xk,x-k}∪F,那么F2={□,x1∨x-2,x2∨x-3…xk-1∨x-k}∪F与F1等价[9].规则3、规则4表示的是链式结构的冲突集,它需要耗费多个二元子句和两个单子句.Page5规则5.设F1={x1,x-1∨x2,x-1∨x3,x-2∨x-3}∪F,那么F2={□,x-1∨x2∨x3,x1∨x-2∨x-3}∪F与F1等价[9].规则6.设F1={x1,x-1∨x2,x-2∨x3…x-k-3∨xk-2,x-k-2∨xk-1,x-k-2∨xk,x-k-1∨x-k}∪F,那么F2={□,x1∨x-2,x2∨x-3…xk-3∨x-k-2,xk-2∨x-k-1∨x-k,x-k-2∨xk-1∨xk}∪F与F1等价[9].规则1~规则6的证明过程详见文献[9].这6个规则描述的是具有特殊结构的冲突集.F1与F2符合合取范式等价性的定义,用F2替换F1,既不改变F1的不可满足子句数又可以得到一个空子句,使下界估计值加1.并不是所有冲突集的结构都适合使用推理规则方法,这一方面是因为某些冲突集很难找到与之等价的子句集;另一方面,即使找到了与之等价的子句集,该子句集可能包含更多的新子句或更长的新子句,反而增加了问题求解的难度.在UP检测不能找到冲突集时,失败文字检测方法可以进一步提高下界.具体方法如下:令x=1可以找到冲突集Φx=1,同时,令x=0可以找到冲突集Φx=0.那么Φx=1∪Φx=0是一个冲突集,即在任意真值指派下,其至少有一个不可满足的子句.通常,失败文字检测找到的冲突集结构要复杂些,计算成本也要高些,但由于MAXSAT完备算法的复杂度为指数级,下界值微小的增加,都有助于算法效率的提高,所以失败文字检测方法在MAXSAT完备算法中是十分重要的.3基于优化冲突集提高下界的方法对基于分支限界法的MAXSAT完备算法,改进下界是提高剪枝率的关键和难点.Maxsatz2013采用推理规则优先、单子句排序和进一步失败文字检测这3个策略,可以优先找到规模小、结构简单的独立冲突集,从而改进下界估计值.3.1推理规则优先Maxsatz算法在UP检测部分,若找到的冲突集符合规则1~6的结构,则进行等价替换,否则直接移除冲突集.这使算法有可能在移除先检测到的复杂冲突集后,在剩余的子句中无法再发现冲突集.Maxsatz2013的改进是若冲突集不能使用推理规则时,不移除该冲突集,而是进入下一个冲突集的检测,直至所有可运用规则的冲突集全部被找到为止.当可以应用推理规则的冲突集都被找到之后,再对剩余的单子句进行UP检测,移除其冲突集.这是因为推理规则进行的是等价代换,但移除冲突集不是等价代换.例3.设F={x1,x-1∨x2∨x3,x-3,x-2,x3∨x4,x-4∨x5,x-5∨x6,x-5∨x7,x-6∨x-7,x2∨x-4,x5∨x8,x5∨x9,x-8∨x-9}.在Maxsatz算法中,对单子句x1,x-3,x-2进行UP检测找到冲突集Φ1={x1,x-1∨x2∨x3,x-3,x-2},移除Φ1后剩余子句无法构成新的冲突集,下界增加1.在Maxsatz2013算法中,Φ1不能运用规则,不移除Φ1.对子句x-3进行单子句传播,如图3所示可找到一个冲突集.对图3所示的冲突集应用规则6,下界加1,且增加新子句x-3∨x-4,x4∨x-5,x5∨x-6∨x-7和x-5∨x6∨x7.继续对子句x-2进行单子句传播,如图4所示可以找到另一个冲突集{x-2,x2∨x-4,x4∨x-5,x5∨x8,x5∨x9,x-8∨x-9}.最终F可找到2个冲突集,下界值可以提高2.对于C/V比值较大的MAXSAT算例,一个单子句做UP可以找到多个冲突集.若使用可应用推理规则的冲突集,既增加了下界,又基本上不改变合取范式包含的子句数.与结构复杂的冲突集相比,推理规则消耗较少的单子句,且产生的新子句可以在下一个冲突集中继续使用,所以推理规则优先有助于提高下界.3.2单子句排序实验显示UP检测找到的冲突集数一般要比失败文字检测找到的冲突集数多,代价小.如何充分利用UP检测部分的单子句,找到更多的冲突集是单子句排序方法的出发点.在实验中,我们发现单子句传播过程中,子句的出现顺序和单子句的传播顺序均会影响冲突集的质量.具体见例4和例5.例4.设F={x1,x-1∨x2,x-2∨x3,x-3,x-1∨x4,x-1∨x5,x-4∨x-5}.如图5所示,虽然从x1出发到两个空子句的路径长度相等,但因子句x-1∨x2先出现,所以广度优先Page6的UP检测会先找到由文字x3与x-3推导出的空子句,下界加1.相比而言,因为x5和x-5路径上的子句构成的冲突集Φ只消耗一个单子句x1,使得单子句x-3可能与其它子句构成新的冲突集,下界可能提高2.例4说明因为子句出现的顺序可能会导致UP检测到的冲突集并不是最优的.例5说明在UP检测过程中,单子句传播顺序可能会导致大冲突集中包含小冲突集,从而影响冲突集质量.例5.设F={x1,x-1∨x2,x-2∨x4,x-4∨x6,x4,x-4∨x7,x-6∨x-7,x-1∨x8,x-8∨x9,x-9∨x10,x-13,x-10∨x12,x-12∨x13}.如图6所示,单子句x4引发的冲突集被包含在单子句x1的冲突集内.若先对子句x1做单子句传播,UP检测会优先找到由文字x-7和x7导致的空子句,移除从x1到此空子句路径上的冲突子句集,剩余的子句无法形成新的冲突集,下界加1.若改变单子句传播顺序,先对子句x4做单子句传播,再对子句x1做单子句传播,则会找到{x4,x-4∨x6,x-4∨x7,x-6∨x-7}和{x1,x-1∨x8,x-8∨x9,x-9∨x10,x-10∨x12,x-12∨x13,x-13}两个冲突集,下界加2.因为小冲突集的移除对后续冲突集的检测影响较小,加大了产生更多空子句的概率,所以改变单子句传播顺序,优先传播可导致小冲突集的单子句可以提高下界.单子句排序的具体方法是将与单子句中正文字x(负文字x-)相反的文字x-(正文字x)在二元子句集中出现的次数,作为单子句的权重,即然后,按照权重降序(从大到小)对单子句进行UP.与单子句ci相反的文字在二元子句中出现的次数越多,则ci在做UP时,有越多传播路径可走,从而可以优先找到小冲突集.3.3进一步失败文字检测进一步失败文字检测是在变元xi为真或为假,不能都产生空子句时,继续向前一步检测的方法.其原理如图7所示.图7表示在进行失败文字检测时,令xi=1进行UP可以产生空子句,令xi=0进行UP未产生空子句,失败文字检测寻找冲突集不成功.Maxsatz2013在由xi=0赋值简化后的CNF中,继续检测变元xj,若xj=0和xj=1进行UP均产生了空子句,则从xi出发到3个空子句路径上出现的子句,构成的集合是一个冲突集,下界加1.进一步失败文字因搜索空间大,所以计算成本高且找到的冲突集规模大.但实验显示进一步失败文字检测仍有助于提高算法下界,缩短运行时间.该函数表述如下.过程2.Further_failed_literal_detection(var,LB).1.if(变元var未赋值且LB小于UB){2.if(var=value有冲突){3.if(var=1-value有冲突){4.remove冲突集;LB++;continue;}5.else{6.foreveryvardo{7.if(var=1有冲突var=0有冲突)break;}8.remove冲突集;LB++;}10.}11.}12.returnLB.4对优化策略的实验评估Maxsatz2013采用C语言编程,参加了2013年MAXSATEvaluation国际竞赛,并表现出色.具体竞赛结果(见http://maxsat.ia.udl.cat/results/)如下:在随机类别中,不加权、加权偏MAXSAT组别中,排名第一;加权和偏MAXSAT中排名第二和Page7第四.在构造类别中,不加权、加权MAXSAT中,排名第二,在偏MAXSAT中排名第五.在工业类别中,Maxsatz2013未进入前十名,与基于SAT技术的MAXSAT完备算法在运算时间上有较大差距.竞赛结果正如引言中的叙述,不同算法框架下的两类MAXSAT完备算法有各自的优势,基于分支限界法的MAXSAT完备算法在工业算例中表现均不佳,而基于SAT技术的MAXSAT完备算法在构造和随机算例中表现一般.为方便分析文中提出的3个策略对算法的优化作用,Maxsatz2013选择与Maxsatz算法做比较,两个算法均在处理器是IntelE52.7GHz,内存大小是31.3GB,操作系统是centos6.3的机器上进行实验计算.这些算例涵盖了MAXSAT问题的4个类别,来自于2013年7月公布的MAXSATEvaluation竞赛①的测试算例集.3个策略中进一步失败文字检测方法因搜索空间大,时间成本较高,所以不能对所有算例类别都做一致的处理.对于不加权算例,在上界与下界的差等于1时,做进一步失败文字检测,效果较好.对于加权算例,当下界小于上界时即可做进一步失败文字检测.表1~表4列出了Maxsatz与Maxsatz2013完成每个算例集中所有算例的运行时间(单位:s).表1随机不加权Max3SAT算例集中,70和80个变元的子句数范围是800~1300.100个变元的子句数取1000、1100和12003个等级.在不加权Max2SAT算例集中,120个变元和140个变元的子句数范围是1200~1600.在所有算例集中子句数每次增加100,每个C/V有10个随机算例.算例集名称算例Max3SAT/70v60随机7834125931Max3SAT/80v60随机24673592190Max2SAT/120v50随机132782257Max2SAT/140v50随机195389603Maxcut/140/630/0.850构造190217226Dimacs-mod62构造1939512540总计3302类396308149747表2加权Max3SAT算例中子句范围是800~1300,加权Max2SAT算例的子句范围是1200~1600.子句数每次增加100,每个C/V有10个随机算例.在2013年竞赛中加权MAXSAT没有工业算例.算例集名称算例WMax3SAT/70v60随机9671528377WMax3SAT/80v60随机20976162657WMax2SAT/120v40随机70342816WMax2SAT/140v27随机85083681Wmaxcut_dimacs21构造792274ramsey4构造2789118611表3中偏Max3SAT算例的子句范围是600、700和800.偏Max2SAT的子句范围是2500~5000,子句数每次增加500.算例集名称算例PMax3SAT/100v30随机3054912PMax2SAT/150v60随机568Maxclicque62构造31470142Maxone-3sat60构造20442表4中加权Max3SAT算例的子句数是600~800,子句数每次增加100.加权偏Max2SAT算例的子句数是2500~5000,子句数每次增加500.算例集名称算例WPMax3SAT/hi30随机1581886WPMax2SAT/150v60随机465Planning23构造57254092Auc-paths40构造6867454Preference_planning7工业74256039在计算表1~4列出的算例集时,算例的运算时间、搜索结点数和回溯次数是下降的.因篇幅原因,表5和表6选取部分算例说明搜索结点数和回溯次数减少的情况.表5中算法名称列中v前的数字代表变元数,c前的数字代表子句数.表5和表6中每个算法下的数据格式为A/B,其中A代表搜索的结点数,B代表回溯次数.表5随机类别搜索结点数、回溯次数的比较Max3SAT/70v/1000c1043898/521951741381/370691Max2SAT/120v/1200c17562/879015197/7599WMax3SAT/70v/1100c753220/376624686537/343269PMax3SAT/100v/800c941306/470658385873/192937PMax2SAT/150v/4500c11208/56181823/912WPMax3SAT/100v/800c568406/284227405597/202799WPMax2SAT/150v/3000c3619/18291462/734①http://www.maxsat.udl.catPage8表6显示了对同一构造类算例,Maxsatz2013与Maxsatz在搜索结点数和回溯次数上的不同,这8个算例涵盖了MAXSAT4个类别的问题.表6构造类别搜索结点数、回溯次数的比较Maxcut/140/630/0.8/13899411/449675589523/294762dimacs-mod/brock400_1423299/211651369937/184969W/ramsey/k3_n1071446/4051064598/35784Wmaxcut/hamming10_2clq171050/85536146291/73146P/Maxclicque/150/19/8940-128733809/17630308117783/59960P/Maxone/3sat/cnf3.150.2506090322/3477791223/117WP/min_enc/planning/bwt7611/355543/292WP/Auc-oaths/cat.paths.60.100.12785837/16002923409/1733如表6所示,不同算例的搜索结点数减少幅度不同.在实验计算的所有算例集中,搜索结点数减少的范围基本在15%~58%之间,大部分算例的搜索结点数减少在30%以上.当变元数越多,子句数越多时,搜索结点数减少幅度越大,运行时间越短.推理规则优先、单子句排序以及进一步失败文字检测这3个策略对算法效率的影响不尽相同.表7列出了3个策略在运算时间(单位:s)上对求解效率各自的影响.表中Maxsatza、Maxsatzu和Maxsatzf依次表示在Maxsatz算法基础上独立加入推理规则优先、单子句排序和进一步失败文字检测策略.设定每个算例集有10000s运行时间限制.表7中的数据采用A(B)的格式,表示算法在规定时间内完成了B个算例且所需运行时间为A秒.算例集Max3SAT/70v6011096(20)10086(20)8043(20)7510(20)Min3sat/c70v35013309864(30)8975(30)6729(30)7084(30)Maxcut/140/630/0.85011703(43)9023(50)6578(50)6590(50)Maxone-structured626849(30)4064(30)4968(30)3984(30)如表7所示,3个策略对不同算例集的作用是不一样的.对于随机3SAT算例以及含有三元子句的优化问题算例集,单子句排序与进一步失败文字检测相比推理规则优先发挥的作用更大些.单子句排序方法在不同高度的分支点求解下界时,作用大小会有些差别.树高大于n/4时,单子句个数较多,单子句排序效果明显.在接近叶结点的分支节点,进一步失败文字检测效果要比在其它分支节点的效果要好,原因是接近叶结点时,未赋值变元较少,进一步失败文字检测的搜索空间要小一些.对于Max2SAT算例以及子句长度不超过2的组合优化问题,推理规则优先比单子句排序和进一步失败文字检测作用更大一些.因为使用推理规则需要较多二元子句,产生的新子句也多是二元子句,这对循环使用推理规则有帮助.单子句排序与进一步失败文字检测不适合子句长度小于等于2的算例集.对于二元子句,单子句传播可很快确定其文字的值,因此利用UP检测找到冲突集耗费的时间很少.相比而言,单子句排序花费的时间成本高于因增加冲突集数而减少的运行时间,所以其并不适用2SAT算例.对于进一步失败文字检测来说,在二元子句中,xj冲突的检测与上一层xi的真值指派是无关的,所以进一步失败文字检测也不适用2SAT算例.5结论对于分支限界MAXSAT算法,如何寻找更多的冲突集,是算法设计的核心与难点.基于对单子句传播检测冲突集过程的分析,发现优先找到规模小,结构简单的独立冲突集,可以进一步提高下界.改进的Maxsatz2013是在Maxsatz的基础上完成了3个优化策略:推理规则优先是在UP检测之前先对可使用推理规则的冲突集进行等价替换;单子句排序是改变单子句传播顺序,先传播可构成小冲突集的单子句;进一步失败文字检测是当变元取值为真或为假,单方推导出空子句时,在未产生空子句的简化的合取范式中继续检测其它变元,直至找到冲突集为止.实验结果表明这3个优化策略可以有效地增加冲突集数,从而提高下界和算法效率.
