Page1Roster:一种开发者潜在同行推荐方法何鹏1)李兵1),2),4)杨习辉1)熊伟1)陈军3)1)(武汉大学计算机学院软件工程国家重点实验室武汉430072)2)(武汉大学复杂网络研究中心武汉430072)3)(武汉大学国家多媒体软件工程技术研究中心武汉430072)4)(南京财经大学江苏省电子商务重点实验室南京210003)摘要根据开发者的历史开发信息,推荐潜在合作对象或能够胜任的任务,对于减少开发延时,提高团队开发效率有极大的促进作用.大量已有工作主要研究单个开源项目开发者社区,通过确定开发者的个人技能实施推荐.然而,以整个开源社区为视角,研究使用开发者实践技能做推荐,实现开发者跨项目与组织边界合作的工作相对甚少.为丰富这一工作,文中结合开发者的实践技能相似性与共同开发者数,为Sourceforge.net社区未曾合作的开发者提供一种同行推荐的方法.研究结果表明文中的方法能够有效地实现开发者同行推荐,相比只考虑共同开发者数时成功推荐的开发者数增加了31.1%,且推荐精度提高0.4倍,缓解了社区合作的稀疏性.最后,应用文中提出的方法开发了一个Roster推荐系统,为社区开发者的交流建立了一种新的辅助途径.关键词开源社区;开发者实践技能;群体软件工程;软件工程推荐系统;社会计算1引言信息推荐是一种支持在大量信息中为用户提供可供决策参考的有用信息.它根据用户的历史数据或用户的偏好向用户推荐可能感兴趣的人或物[1],已经被广泛应用于不同领域.常见的推荐系统例如Amazon、Netflix、淘宝、Movielens根据用户的购买记录或相似用户的购买记录向用户提供书、音乐、电影等个性化推荐来提高产品的购买率[2-3].以上是人-物推荐,随着社交网络的流行,人-人推荐也备受关注.通过朋友的推荐,用户可以结识更多的新朋友,扩大自己的交际圈[4],如国内的微博、朋友网、人人网;国外的Facebook、MySpace、LinkedIn等.进入大数据时代,非结构化数据体量的超大规模化和增长的迅速化、数据的多样化和复杂化,使得在浩瀚的信息海洋中如何以更快的速度为用户淘出最可能感兴趣的内容,既是一次机遇也是一种挑战.电子商务推荐系统的目的是为用户推送最可能感兴趣的产品,而社交网络推荐系统主要是为用户推荐最可能发生交互的其他用户.各种推荐系统都有助于用户在缺乏经验或无法考虑周全手上所有数据的情况下查找所需信息,做出相应决策.人们在大量信息空间中导航所面临的挑战,在群体软件开发过程中同样存在,尤其是当前流行的开源社区,对于一个软件开发团队,领导者通常希望知道“谁知道什么”,有利于他们寻找合适的团队成员.一个开发者遇到问题时,更想知道“谁能帮忙处理这个问题”.如果缺乏这些信息,开发者需要花费精力在大量的人员中进行查找,这无疑是软件工程实践中需要极力避免的情况.软件工程推荐系统(RecommendationSystemsforSoftwareEngineering,RSSEs)旨在协助开发者从代码重用到合作关系选择的各种行为.Robillard等人[1]定义RSSE为在给定情境下为某一任务提供有价值信息的软件.随着软件演化节奏的加快与软件规模的增大,软件越来越复杂,原来封闭精英式的开发模式越来越受阻,而源于开源软件开发的群体软件工程逐渐被提倡,它不仅是一种依托开放、开源的软件合作社群[5],而且正向基于分享、交互与群体智能的同侪生产(peerproduction)方式发展.开源社区(如SourceForge.net①)作为一类典型的在线群体开发社区,它是一个自组织的合作网络,有着成千上百万来自不同国家、不同文化与专业知识背景的开发者.开发者自愿加入社区与其他开发者建立互惠合作关系,不断地相互学习,共享知识,加强团队开发管理经验,提高自身的专业技能或丰富业余时间,且这些开源开发者在现实生活中往往很少能够面对面的交流.鉴于软件自身的一些特性,加上开源社区公开、自愿、非盈利等原则,使得加入社区的门槛降低,大量开发者不断涌入,诸多问题也相继呈现:如在Sourceforge社区中,90%以上的项目只有不足5个开发者,其中很多项目因未能及时找到合适的开发人选而被延时或停滞;同时,95%以上的开发者也只参与了不超过5个项目,大量的人力处于空闲状态[6].上述情况之所以存在,很大程度上是因为项目负责人没能掌握社区开发者的兴趣、专业特长,以及作为开发者,没能及时了解社区中哪些成员与自己有相似的爱好,或哪些成员具有特定的开发技能可供求助和交流.据我们所知,该社区平台目前仅提供项目查找与一些简单的开发者查询功能,缺乏一个开发者潜在合作同行推荐功能.因此,本文我们称开源社区的这类开发者推荐为同行推荐(PeerRecom-mendation),使用实践技能(Expertise)泛指开发者的兴趣爱好或专业特长.为实现这一挑战,本文强调学科交叉融合,依托软件工程、网络科学、社会计算等领域的相关理论与方法,开展对开源社区开发者同行推荐的研究工作.者潜在合作同行的推荐?本文重点围绕以下3个研究问题进行探讨:RQ1:引入开发者的实践技能是否能提高开发在社交网络中,除了以朋友的朋友作为潜在朋友推荐之外,为了提高推荐效果很多用户的其他信息也逐渐被考虑在内,如发布的内容.同样,在开源社区中,除了开发者间共同开发者数之外,是否有必要考虑开发者的其他信息,如实践技能.属性的推荐效果更显著?RQ2:用于表示开发者实践技能的属性中,哪些开发者的历史信息中,可用于表示开发者实践技能的属性比较多,如项目的状态、主题、开发语言、目标受众和认证等,以及开发者在项目中担任的角①http://sourceforge.net/Page3色.这些属性对推荐结果的影响如何,以及使用哪些属性效果更好,都值得探析.RQ3:有多少开发者推荐成功以及在不同位置上有多少潜在合作同行被成功接纳?在为每个开发者返回前十个最可能合作的同行中,顺利推荐的开发者有多少,且在成功推荐的开发者中,每个位置推荐成功的比率如何.回答该问题有助于我们评价所提出的开发者同行推荐方法在Sourceforge.net社区的效果.本文第2节归纳目前有关推荐系统已取得的一些成果;第3节是相关理论基础和实验数据介绍;第4节陈述我们的研究方法,主要有开发者相似性计算与评价指标;第5节是实证分析;第6节对本文涉及的一些实验处理问题、应用价值与不足之处进行讨论;最后是全文的总结与该工作的展望.2相关工作Brzozowski和Romero[7]对比了多种为用户推荐可供关注对象的方法,分析有向社会网络的结构模式对用户推荐的影响.结果发现特定结构闭包的推荐比传统基于协同过滤、行为特性和相似性的推荐明显要好.Chen等人[8]对比了4种推荐算法在企业社交网络中的差异,发现扩大用户的朋友列表时,所有方法都能返回一个较好的结果.但相对而言,基于社会网络信息的推荐能够返回更多用户已知的连接,而基于用户创建内容相似性的推荐方法在发现新朋友方面效果更好.目前,在软件工程领域也开发了一些软件工程推荐系统,大部分都是为了辅助软件维护,如eRose指导软件修改[9]、Strathcona帮助找到相关样例[10]、ExpertiseRecommender定位具有所需技能的开发者[11]、ExpertiseBrowser提供软件专家咨询[12]等等.大致可以分为开发者-任务与开发者-开发者的推荐.开发者-任务:在文献[13]中,Anvik与Murphy基于代码库和缺陷库定义项目开发者的执行技能(implementationexpertise)进行开发者推荐,发现两种方法都能很好地找到所有合适的开发者.Schuler等人[14-15]从版本库数据中构建开发者的使用技能(usageexpertise)指标,应用该指标提高传统专家推荐的准确率,解决对只有少量或无历史信息的文件与项目的开发者推荐.Lappas等人[16]认为一个项目的成功不但在于找到具备技能要求的开发者,而且还要相互之间可以有效合作.因此,他们开发了一个新的算法来实现给定一个任务T,如何在一群具有不同技能的个体中寻找既能够完成此任务又能够有效合作的团队.开发者-开发者:Moraes等人[17]为减少开发者在编码过程中寻求帮助时的拖延,提高团队开发效率,利用开发者的邮件列表信息提出了一个专家推荐系统.Canfora等人[18]认为一个新来者如果训练不充分可能导致项目的延时或失败,为避免这种问题,他们提出了一种在有经验的开发者中为新来者推荐导师的Yoda方法.不难发现,以上工作都局限于某一个或几个开源软件的开发者推荐,研究整个开源社区开发者推荐,实现开发者跨项目与组织边界合作的工作极少,除了Surian等人[19]构建开发者-项目-属性图(DPP),提出基于开发者过去开发的项目开发语言和分类,通过有重启的随机游走办法,实现Sourceforge社区开发者推荐,并开发了一个REngine推荐系统.但在他们的工作中,仅采用了项目的开发语言和类别两个属性,据我们所知,项目提供的属性比较多,任何一个属性都可以对项目进行类别划分,在没有经过对比之前使用任何一个或几个属性进行分析都将存在偏见.与他们工作的最大不同在于:他们推荐的合作者中包括了与目标开发者合作过的开发者,而且这类开发者会比较多,容易造成开发者间的局部合作,不利于实现开发者间跨项目与组织边界的合作.整的来说,他们的方法很有参考价值,但使用的属性比较单一笼统,也没有考虑人的属性,同时推荐结果更多的是围绕已经合作过的开发者.在现有工作取得的成果上,我们做了进一步地补充与扩展.本文的主要贡献可归纳为:(1)与已有的一些开发者推荐不同,我们没有局限于单个开源项目下开发者社区的推荐,而是以整个Sourceforge.net社区为研究对象,首次仅对未曾合作过的开发者提供潜在同行推荐,促进开发者间跨项目和组织边界的合作,从一个更大更全面的视角审视知识共享与群体智能的优势.(2)推荐过程中,我们不仅使用了共同开发者数,还从6个属性出发考虑了开发者的实践技能相似性,确保在具有相同共同开发者数的情况下,实践技能越相似的开发者给予优先推荐,并通过对比发现使用项目主题与目标受众两个属性表示开发者的实践技能效果最佳.(3)最后,我们开发了一个开源社区开发者推荐系统,为社区新老开发者提供潜在合作同行的推荐.针对推荐结果在系统中我们给出了相关的推荐依据供开发者参考.Page43理论基础3.1开发者实践技能一个开发者在从事软件开发过程中,会逐渐积累一些经验,最终成为实践技能,比如对特定主题的开发,某种语言的熟练,某一个角色的担当,某类问题的解决等等.在单个开源项目中一些研究者用修改的源代码或缺陷报告内容作为开发者的实践技能,而在sourceforge.net社区中,每个项目提供诸如主题、目标受众、状态和认证等属性.因此,我们应用开发者所参与的项目属性与担任的角色来表示开发者的实践技能(Expertise).表1是真实数据中开发者aart3k参与的项目netsource和signengine信息,其中用于表示开发者实践技能的属性有角色、状态、主题、开发语言、目标受众和认证6个属性.我们选取这6个属性的依据是考虑到主题能够代表一个开发者的兴趣方向,语言是开发者的实践工具,目标受众是服务对象,状态和认证是开发周期和环境,角色衡量开发者的地位.因此,开发者aart3k的实践技能可表示为角色———developer/Nospecificrole、状态———pre-Alpha/Alpha、主题———Frameworks、语言———PHP/Java、目标受众———developers、认证———BSDLicense.在后续部分中,我们将介绍引入不同属性推荐效果的差异.通过开发者实践技能的匹配,加上开发者合作网络结构的作用,最终将相似性得分高的开发者优先推荐.开发者角色项目状态主题开发语言目标受众认证aart3kNospecificaart3kdevelopersignengine86061983187注:表中各属性值分别为它们在数据库中对应的ID,如目标受众的3对应于开发者.3.2开发者合作网络社会网络主要研究在一定范围内个体与个体之间的关系,网络中的节点是个体,边则是按一定方式定义的两个人之间的交互关系.常见的有社交网络[20]、合作网络、知识网络.合作网络是社会网络中研究比较多的一类,据我们熟知,关于合作网络较早的研究有科学家合作网[21-22]、演员合作网[23].在软件工程领域,典型的合作网络是开发者合作网络.构建开发者合作网络的方式比较多,可以从软件信息库中根据开发者修改同一个包/类文件/模块等软件实体构建细粒度合作网络[24],也可以根据开发者参与同一个项目构建粗粒度合作网络[6,25].在我们的方法中,采用后一种方式构建开发者合作网络,网络的节点表示开发者,若两个开发者参与了同一个项目,则他们之间被视为存在合作连边.文中没有考虑两个开发者共同参与的项目数,我们构建开发者合作网络的目的是利用网络的拓扑结构确定两个开发者是否合作过,以及未曾合作过的开发者之间共同开发者数.3.3开源软件社区要理解开源软件社区需要有足够可供使用的信息支撑,包括构建开发者合作网络的开发者与项目的隶属关系,项目的属性以及各个属性的详细描述.我们选取sourceforge.net开源社区为研究对象,除了因为它是最大的开源软件开发社区,拥有大量的开源项目信息之外,还有一个重要原因是它的知名度和数据的易获取性.据统计,该社区数据共保存有100多张存储表.我们的实验数据来自于FLOSS-mole①,该项目免费提供一些开放/自由/开源软件项目数据的下载,整理一些其他研究团队捐赠的数据,为广大研究者提供一个研究开源软件开发的社区[26].图1是我们收集的9个数据表之间的关联图(数据至2007年4月为止),包括开发者表(devel-opers)、项目表(projects)、5个项目属性表、开发者/项目表(developer_projects)以及项目在近两个月的动态表(project_statistics_60).①www.flossmole.orgPage5在数据关联操作过程中,我们发现有些项目,在属性表中找不到对应的属性信息,或存在但对应的属性信息为空.此外,开发者表与项目表中包含的对象均比开发者/项目表中包含的开发者与项目多很多,说明有一部分用户只是注册,却没有参与实际项目开发.再结合developers表和project_statistics_60表,将信息没有发生变化的开发者视为该开发者已离开,同样现象的项目视为已经停滞开发.绝大部分被过滤掉的开发者和项目都是只开发了一个项目的开发者和仅有一个开发者参与的项目.最后我们统计满足实验需求的数据信息如表2所示:开发者和项目数分别为6171和3186个,其中403个开发者在接下来一年内与其他开发者建立了合作,对应的项目数为327,开发者的角色(position)有22种,项目的状态(status)、主题(topic)、开发语言(programminglanguage)、目标受众(intended_audience)和认证(license)等5个属性分别有7、217、61、19、37种,我们的实验数据可通过以下地址提供下载①.图2研究框架(其中,di代表开发者,pi代表项目,rolei代表position,其他属性(如pl,ia,lic)的缩写参照表2)4.1开发者实践技能我们用开发者参与的项目属性与他在项目中担任的角色表示一个开发者的实践技能,数学表示为Expertise=(ATp,ATs,ATt,ATpl,ATia,ATlic),其对象开发者(developer)属性状态(status)7开发语言(pl)61主题(topic)217目标受众(ia)19角色(position)22认证(license)374研究方法本节重点介绍我们采用的为开源社区开发者提供的同行推荐方法,主要分为4步:首先是应用文本挖掘中常用的TF-IDF加权技术构建表示开发者实践技能的属性加权向量,再综合计算两个开发者之间各属性的余弦相似性;其次,根据开发者与项目的隶属关系,构建开发者合作网络,通过网络结构获取开发者间的共同开发者数;然后,结合开发者实践技能的相似性与共同开发者数,最终得到开发者之间的相似性得分;最后,根据得分实现开发者的潜在同行推荐.具体研究框架如图2所示.中犃犜i分别对应于表2中的角色、状态、主题、开发语言、目标受众和认证6个属性,缩写为表中加下划①www.libingteam.com/Materials/639.jhtmlPage6线的字母.任意两个开发者A,B的实践技能相似性可通过余弦相似性式(1)计算,A·B为开发者实践技能向量的内积.而表示开发者实践技能的每个属性本身又为一个向量犃犜i=(wi1,wi2,…,wim),m为属性i中包括的元素种类,因此,开发者的实践技能相似性为所有6个属性向量下的余弦相似性总和,可用式(2)表示,系数α表示每个属性的比重系数,满足∑n属性个数(n=6).在文本挖掘方法中,假设文档j中含k个词,在总的#doc文档中有#doci个文档包含词i,则第i个词在文档j的频率tfij和idfi的计算公式为用类似于文献[27-28]的处理,本文为了提高性能,需要对tf进行对数变换,因此,文章中修改后对应的tf,idf为tfdij=logfdij+1,idfj=log#dev在式(4)中,tfdij表示开发者d在属性i的元素j上的属性频率,即在他参与项目的属性i中元素j出现的次数fdij越多,则tfdij越大,表示这个开发者在该属性元素上越熟练,如果某个属性元素j被越多的开发者所拥有#devj,表示该属性对开发者的独特性越低.用w表示每个属性中某一元素的权重,则修改后开发者d在第i个属性的元素j上的权值wdij与属性向量标准化的表达式可表示为犃犜=则两个开发者在属性i上的实践技能相似性如图2所示.cos(A犃犜i,B犃犜i)=槡∑j∈Ai∑j∈Ai∩Bi槡4.2共同开发者数根据开发者与项目的隶属关系,构建开发者合作网络,如3.2节所介绍,我们的开发者合作网络是一个稀疏的无向非加权网络,且包含多个连通子网.在社交网络推荐中,通常采用朋友的朋友进行推荐,所以不难理解,在具有相同的实践技能条件下,两个具有共同合作对象的开发者会比两个没有共同合作对象的开发者更有可能在今后的开发过程中建立合作关系.我们用CDAB表示开发者A,B的共同开发者数,如果B与A,C有相同的实践技能,若存在CDAB>CDCB的情况,则认为B跟A合作的可能性比跟C要大.为表示共同开发者数的影响,我们采用平方根函数处理CD(具体理由可参考讨论部分),确保与当前开发者拥有共同开发者数越多的开发者优先推荐.将开发者合作网络表示为G=(N,犈),N为开发者节点集;犈为已存在的合作关系矩阵.犈是一个0或1矩阵,如果两个开发者I,J存在合作,Eij=1,否则为0.结合式(2)和(8),最后得到任意两个开发者的相似性得分为Score(A,B)=(1-Eab)(βSim(A,B)+用β来权衡实践技能相似性与共同开发者数的影响比重,满足0β1,1-Eab用来控制只保存未曾合作的开发者之间的相似性得分.4.3评价指标为了评价所提出的同行推荐方法,我们使用了一个判断推荐成功的条件与两个常用的精度指标:(1)假设在接下来的一年内,为开发者推荐的10个同行中,至少有一个同行与当前开发者建立了合作,我们就认为推荐成功.(2)平均排序倒数(MeanReciprocalRank,MRR),该指标首先需要计算每个查询i的第一个相关位置的倒数(即相关位置倒数最大那个max1然后对所有查询最大的相关位置倒数求平均值,Q为查询次数.这里我们计算向403个开发者推荐的前10个同行中,首次被接纳的同行位置的倒数的平Page7均值.MRR越大,表示推荐效果越好.MRR=1(3)平均准确率(MeanAveragePrecision,MAP),该方法用于计算每个相关文档被检索后准确率的平均值的算术平均值.检索出来的相关文档越靠前,MAP值就越大.即每个开发者推荐准确率的平均值的算术平均值.首先计算平均准确率AveP,其中r为位置,M是为开发者i推荐的N(N=10)个结果中被接纳的同行数.rel(r)表示处在r位置的同行接纳与否,如果被接纳则为1,否则为0.P(r)为处在当前位置时的准确率,r表示到当前位置r为止,被接纳的同行数,可采用如下公式计算最后,计算所有开发者的AveP算术平均值,即为MAP,Q为查询次数.5实证分析者潜在合作同行的推荐?究问题给予回答的顺序进行实证分析.在实验部分,我们主要采取依次对前面3个研RQ1:引入开发者的实践技能是否能提高开发这个问题是其他几个问题的基础,为回答这个问题,需要探索开发者实践技能与共同开发者数的比重系数β的取值.我们在已有的6171个开发者中筛选在给定时间点(2007年4月底)未曾合作,但在接下来的一年内建立了合作的403个开发者作为实证数据.我们为这些已知的开发者推荐10个最可能合作的同行,并统计他们在之后一年内与被推荐的10个同行实际合作的情况.我们对比了3种情况下β对推荐效果的影响:(1)属性系数平均分配,α1=α2=α3=α4=α5=α6=1/6;(2)属性系数非平均分配,主题属性α3=0.4,其他5个属性α1=α2=α4=α5=α6=0.12,采用这种赋值的主观原因是在SourceForge.net主页查找一个开源项目时,优先提供按主题搜索,其次通过高级设置可以实现其他几个属性的并行搜索,因此我们将主题的属性设置的更高,其它几个属性赋予相同的系数;(3)属性系数独立分配,设αi=1,αk≠i=0,即每次只考虑一个属性与共同开发者数的作用.实验结果如图3所示,两条曲线(1)与(2)都不高于只考虑共同开发者数时的推荐结果.对于独立分配下的结果则有所不同,β在0~0.4范围内,主题与目标受众两个属性的推荐效果明显提高,在β=0.2附近分别达到最大值77和72.然而,当只考虑开发者的实践技能β=1时,3种分配方式下的推荐效果都很差.很明显仅考虑属性推荐效果不理想,这也是我们综合两类因素的原因.图3推荐成功的开发者数(其中水平黑实线是只考虑对比推荐成功的开发者个数的同时,图4(a)、(b)分别给出了3种分配下的MRR与MAP推荐精度.从图中我们可以发现,当β在0~0.6范围时,虽然前两种分配下推荐成功的开发者数不超过基线,但它们的MRR与MAP都比只使用共同开发者数时要高,且非平均分配推荐的效果相对更好.在0~0.4范围时,主题与目标受众两个属性不仅推荐成功的开发者数超过基线,而且精度也处在基线上方,说明两者更能反映开发者的实践技能,主题直接代表一个开发者的兴趣方向,目标受众是项目服务对象,两者更适用于区分开发者之间的差异.独立分配下的MRR与MAP中均存在两条与图3趋势明显不同的曲线:一条是当β为0~0.7时,项目开发语言属性的精度曲线一直处在基线上方,而图3中该曲线却一直处在基线的下方;另一条则是项目状态属性曲线,当β在0.1~0.2时,推荐精度明显提高,但此时返回的开发者数只是小幅度的增加.这一现象出现的主要原因是虽然推荐成功的开发者数量减少,但为这些开发者推荐的10个同行中有更多的被接纳或同行被接纳的位置越靠前,以至于有一个相对比较高的精度.Page8图4不同分配方式对精度的影响结果表明开发者实践技能的6个属性中并不是所有的属性都有效果,至于其他属性效果之所以不明显,我们的理解是因为认证属性内部元素分布相当不平衡,其中GNUGeneralPublicLicense占了64%以上,如此一来就削弱了该属性对开发者实践技能的影响.状态属性中元素仅有7种,状态为inactive、pre-Alpha、Alpha的项目参与成员本身就相对比较少,在数据处理过程中我们又将那些只参与了一个项目开发或只有一个开发者参与的项目,并且对在两个月内没有变化的项目一并做了过滤,使得实验项目中状态属性向量长度变小,影响推荐效果.原本我们认为开发语言应该会是一个很好的属性,但它只是精度很高,推荐成功的开发者数却不够理想,若考虑曾经合作过的开发者,相信开发语言效果会更好.我们特意引入开发者的角色属性,是考虑到软件开发既有技术依赖,也存在社会合作.效果不好的主要原因是我们所收集的数据中,开发者/项目表(developer_projects)中仅记录了部分开发者,大部分角色集中在开发者与管理员两种,与对单个开源项目分析时得到的圆葱类角色分布不同.我们知道在bug修复或提交日志时,先由一些开发者提交解决方案,如果验证通过则由具有权限的开发者负责提交到库中,或将bug状态修改为fixed.由于我们分析的是整个开源社区,随着分析粒度的放大,数据也会变得相对粗糙,所以角色属性的效果也受到影响.这也是后续部分我们将重点分析主题与目标受众两个属性的一个主要原因.因此,在特定β的取值范围内,开发者的实践技能有利于提高开发者潜在合作同行的推荐,且用不同的属性表示开发者实践技能对推荐效果有明显影响.RQ2:用于表示开发者实践技能的属性中,哪些属性的推荐效果更显著?经过RQ1的解答,我们知道采用不同的方式表示开发者实践技能对最终推荐结果产生的影响存在差异,而且随β的增大差异越明显.综合考虑推荐成功的开发者数与MRR、MAP这3个指标,可以确定在β为0.2~0.3时,主题与目标受众两个属性的推荐效果最佳,那么组合这两个属性是否会实现更好的推荐效果(我们从C26+C36+C46+C56-1=55种属性组合中抽取了14组包含主题与目标受众的组合进行对比,发现只有主题与目标受众属性组合时效果最好,所以这里我们重点分析这类组合)?为回答这一问题,我们进行了第2个实验.在β为0.2与0.3时依次改变两者的比重系数α,对比不同组合下3个评价指标的效果.结果表明:在推荐成功的开发者数中,当主题与目标受众的系数近似满足α3<0.35,α5>0.65时,β取0.2比0.3时更好,但最大值小于只考虑主题时的结果.随着主题比重系数的不断增大,β取0.3时效果更好,且达到最大值80,如图5所示.在图6(a)、(b)推荐结果的MRR与MAP中,整体上表现出与图5类似的变化趋势,说明主题属性相比目标受众属性在表示开发者实践技能上更适用,开发者参与的项目主题更能突显开发者之间的差异.Page9图6系数α对精度的影响在同时强调推荐成功的开发者数量与推荐精度的基础上,会发现β=0.3,并且主题比重系数α3=0.4或α3=0.8时效果相对最好,前者精度最高,而后者推荐成功的开发者数量最多.另外,还存在一些精度高但数量较少或数量较多但精度较差的情况,如主题α3=0.2或α3=0.5时,但由于它们整体效果不及α3=0.4或α3=0.8,所以不考虑.因此,使用项目主题与目标受众表示开发者实践技能时效果最佳,在既强调推荐成功的开发者数的同时,又要求推荐精度的基础上,按α3=0.4,α5=0.6分配时,能确保推荐精度更高;如果希望更多的开发者推荐成功,则采用α3=0.8,α5=0.2的方式分配效果相对更好.因此,在为SourceForge.net开源社区开发者提供同行推荐时,可以根据用户的需要赋予主题和目标受众两个属性不同的比重来表示开发者的实践技能.上有多少潜在合作同行被成功接纳?RQ3:有多少开发者推荐成功以及在不同位置在上一个实验结果中,我们实证得知当β=0.3,α3=0.8(0.4),α5=0.2(0.6)时,既能保证较高的推荐精度又能有较多的开发者实现成功推荐,其中α3=0.8,α5=0.2时成功推荐的开发者数为80(26.3%),相比只考虑共同开发者数时增加了31.1%,且MRR与MAP均提高了0.4倍.进一步表明引入开发者实践技能有助于提高开发者潜在合作同行的推荐.从推荐精度的角度分析这些推荐成功的开发者,在为其推荐的前10个同行中,每个开发者接纳的同行数与不同位置上被接纳的同行数也是一个值得研究的问题.如图7所示,在两种分配下的推荐成功的开发者中,74%以上的开发者只与其中推荐的一个潜在同行建立合作,然而,也有6个开发者与5个以上推荐的潜在同行建立合作,如neefs和sureeraya与推荐的10个潜在同行均建立了合作.另外,向开发者推荐的前10个潜在同行中,被接纳的同行所处的位置也会影响推荐效果,图8统计了两种分配方式下在每个位置被接纳的潜在同行数.结果发现第一位置被接纳的同行数分别为33(21.2%)和35(23%),处在前5个位置被接纳的分别占60%和61%以上.也就是说,大部分推荐成功的开发者都优先与前5个潜在同行建立合作.另外,在收集到的一年后实验数据中,数据是以两个月为时间段,分为了6个时间点,利用数据本身的这一特性,我们进一步统计了前面所涉及的推荐结果在各个时间段的情况.如图9所示,在前两个Page10时间段,也就是前4个月内就有同行推荐成功的开发者数超过70%.虽然该现象可能具有一定的偶然性,或在其他开源社区不一定存在,但就SourceForge.net社区而言,该结论还是具有一定的参考价值.同时,需要注意的是,图中各个时间段推荐成功的开发者数之和将会大于前面提到的总的推荐成功的开发者数80,原因是部分推荐成功的开发者中有多个同行被接纳,而且被接纳的时间不同,即推荐的同行中有多个同行与开发者建立了合作,只是合作的时间点不同,所以在统计时,有些开发者被重复计算,以至总和超过实际推荐成功的开发者数.根据以上实验结果,于是不难回答问题RQ3,即我们的方法能够成功实现26.3%的开发者潜在同行推荐,在推荐成功的开发者中,虽然74%以上的开发者只与一个潜在同行建立了合作,但也有与所有推荐的潜在同行合作的开发者,而且超过20%的开发者与首个推荐的潜在同行合作,大部分开发者优先与前5个潜在同行合作,他们建立合作的时间也往往比较靠前,大多都在近4个月内完成.综合上述3个实验分析结果,我们发现引入开发者实践技能进行同行推荐比仅根据“合作者的合作者”是潜在同行的推荐效果更好,尤其是使用开发者感兴趣的主题和服务的目标受众两个属性表示开发者的实践技能时.6Roster推荐系统现有的RSSEs分为两种模式:拉动模式(pullmode)和推动模式(pushmode),也可以理解为被动推荐和主动推荐.前者通过输入一个确切的开发者请求,系统根据相应请求推荐可能感兴趣的结果,实现按需推荐;后者是系统根据开发者的开发历史信息,自动持续的向开发者实施推荐,避免在开发者对需求比较模糊的情况下,错失重要的信息,实现自动推荐.根据上一节的实证分析结果,我们引入主题与目标受众两个属性来表示开发者的实践技能,应用提出的计算开发者的相似性得分方法,开发一个开发者按需推荐系统Roster(Recommendationsystemfordeveloper,简称Roster).该推荐系统主要包括两部分:首先是查询输入界面,由前面的分析我们得知,根据不同的需求在对两个属性的比重选取上可以不同.如图10所示,用户通过在下拉框中选择一个开发者或手动输入一个新开发者.对于社区已存在的开发者,选定后系统将自动将其属性显示在对应的文本框中.如果输入一个新加入的开发者(社区还没有其相应的实践技能信息),相应的属性文本框将变为可编辑状态,用户可以手动添加相应的信息.在实行推荐操作之前,用户可以根据自己的需求选择一种比重分配.例如输入开发者alkresin,系统将自动返回他感兴趣的主题为编译器与数据库,服务的目标受众为开发者,再选中主题与目标受众比重系数分别为0.8和0.2选项.接下来,进入图11的推荐结果返回界面.该界面包括3个主模块,处在右上部的是为开发者推荐的10个同行,返回结果按相似性得分降序排序.点击其中的任何一个潜在同行,下面模块将会显示输入的开发者与推荐的同行对应的属性信息与共同的开发者数,可供用户直接对比推荐结果的相似性,增加用户对结果的可信度与满意度.图中我们发现推荐的同行andy_wos与alkresin都对主题为编译器、目标受众为开发者的项目感兴趣,他们之间有24个共同的开发者,且项目状态、开发语言也相同,根据前面一节的分析,我们知道其他几个属性的影响效果比较小,所以虽然他们的角色与开发的项目认证类型不同,将不会对推荐造成重大的影响,甚至我们会发现,andy_wos比alkresin的目Page11标受众更广,除了开发者(developers)之外,还涉及教育(education)方面.虽然计算过程中只考虑了主题与目标受众两个属性,但我们仍然对推荐结果实施按已有属性进行分类统计,用户可通过左边的统计信息进行再次筛选,直到满足用户的查找需求.从图中我们可以看到,为alkresin推荐的10个同行中,主题为数据库、翻译器、编译器、动态内容和前端的人数分别为5、1、5、1、4,其他属性类似.7讨论本节主要讨论文章涉及的一些实验处理问题、应用价值与不足之处.首先,在获取的Sourceforge社区数据中,项目的属性信息除了文中涉及的几个之外,还包括项目开发过程中使用的操作系统、数据库环境、赞助者、项目用户接口与项目使用环境.在我们获取的数据集中,由于这些属性存在很多空值与关联问题,我们的方法也具备可扩展性,增加或减少属性依然适用,所以最后我们只分析了文中使用的6个属性对开发者实践技能的作用.然后,图12分别是两个数据集(6171与403个开发者)下98%的共同开发者数分布,除少数几对开发者的共同开发者数超过100外,绝大部分开发者间共同开发者数都比较小.因此,在计算开发者的相似性得分时,为凸显标准化后共同开发者数的影响,本文使用了平方根函数来处理使其值在[0,1]区间.常见的处理函数还有指数函数、线性函数和对数函数等,这里我们不给予详述,可参考文献[28].其次,近5年来,在软件工程领域逐渐兴起了一个新的概念:软件生态系统(SoftwareEcosys-tems)[29-31].开源社区可视为一个典型的软件生态系统.作为一个生态系统,它的资源始终是有限的,比如软件开发环境随时可能发生变化,开发者交互时间存在地域差异,项目赞助商提供的费用持续难保等等,这些资源都是不可回收,但可以通过共享实现节约.为了尽可能节约软件生态系统中的资源,我们必须确保其中的知识得到充分的利用,产生更多价值,因此,可以通过向社区开发者推荐其周围具有潜在合作的同行,实现开发者间跨项目和组织边界的合作,缓解社区合作网络的稀疏性,促进知识的循环利用.我们的方法取得了一个比较好的验证效果,对于那些推荐成功的开发者,节省了寻找合适的合作对象的时间,在一定程度上得以提高项目开发效率.最后,本文也存在以下一些不足的地方:(1)我们只考虑了Sourceforge开源社区的开发者,目前流行的开源社区还有很多,比如googlecode①、Rubyforge②、Freecode③、FusionForge④等,但Sourceforge是规模相对更庞大,知名度更广的一个社区,我们选用这样一个开源社区作为我们的实验对象,相信我们的方法在其他社区中会同样适用.(2)我们只为每个开发者推荐前10个最有可能建立合作的潜在同行,没有对比其他情况下的结果,主要是因为我们统计了在之后一年内开发者平均合作的同行数为6.1,所以我们只为开发者推荐10个同行.当然,在我们的Roster系统中,我们为用户提供了手动设置返回结果个数的view选项菜单,以便用户扩大查找范围.(3)在回答RQ2时,我们重点分析主题与目标受众两个属性进行组合分析,事实上我们也对比了其他一些组合的情况,发现一些组合最佳效果不如主题与目标受众两个属性的,另外一些甚至不如只①②③④Page12考虑共同开发者数时,考虑到使用所有属性,只会减弱推荐效果,因此,实验部分并没有将其他情况下的组合结果一一列举.(4)为了发挥其他几个属性对推荐的作用,在我们的Roster推荐系统结果返回界面中,我们提供了利用他们对结果进一步筛选的功能,用户可以通过点击左侧的统计列表或通过扩大返回结果数量来选择更合适的推荐同行进行合作,这样处理可能削弱了其他属性真实的作用,但如果作为输入条件必能影响最终推荐精度.8结论本文使用开发者参与的项目属性与其在项目中担任的角色信息来表示开发者的实践技能,并结合开发者间共同开发者数,实现开发者潜在合作同行推荐.通过对Sourceforge社区开发者的相似性得分计算,验证了我们方法的有效性.实证结果表明引入开发者实践技能可以提高推荐效果,尤其当采用主题与目标受众两个属性表示开发者实践技能时效果最佳,其中26.3%的开发者推荐成功,相比只考虑共同开发者数时增加了31.1%,且MRR与MAP均提高了0.4倍,在推荐成功的开发者中,虽然74%以上的开发者只与一个潜在同行建立了合作,但也有与所有推荐的潜在同行合作的开发者,而且超过20%的开发者与首个推荐的潜在同行合作,大部分开发者优先与前5个潜在同行合作.我们的工作只是该研究方向的一小部分结果,还有很多有价值的信息等待我们去挖掘.在接下来的工作中,我们将进一步研究开发者到项目的推荐.在处理数据时,我们发现社区很多开源项目长时间没有更新,其中很大程度上是因为这些项目没能及时被社区具体开发能力的开发者所知晓,所以我们希望提供开发者到项目的推荐,来缩短项目开发的延迟时间.致谢在此,我们向对本文工作给予支持的同行,尤其是武汉大学软件工程国家重点实验室的马于涛、何璐璐和曾承等老师表示感谢,并向对本文工作中的不足之处提出宝贵评审意见的审稿专家表示衷心的感谢!
