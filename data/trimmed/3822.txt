Page1SPCF:一种基于内存的传播式协同过滤推荐算法赵琴琴鲁凯王斌(中国科学院计算技术研究所北京100190)摘要基于内存的协同过滤是当前互联网推荐引擎中的核心技术.然而,目前该技术的发展面临着严重的用户评分稀疏性问题.该文通过采用传播的思想对数据稀疏性问题进行了有益的探索和研究,并提出了一种改进的基于内存的协同过滤推荐算法SPCF.该算法通过相似度传播,寻找到更多、更可靠的邻居,然后在此基础上,从用户和项目两方面信息考虑对用户进行推荐.在MovieLens和YahooMusic数据集上的实验结果表明,SPCF在MAE指标上比传统的基于内存的协同过滤推荐算法有明显的提高.关键词推荐系统;相似度传播;基于内存的协同过滤1引言随着互联网的飞速发展,网络上的信息严重“过载”,用户很难在大量的信息中找到自己真正需要的信息.推荐系统根据用户个人的习惯和偏好向用户推荐其有可能感兴趣的项目(item),是解决信息“过载”问题的主要工具.协同过滤是现行推荐系统中应用最广泛、也最成功的技术之一.它主要基于如下假设:具有相似兴趣的用户会喜欢相似的项目.这样,它可以根据用户对项目的评分信息(通常表示成用户-项目评分矩阵,参考图1)找到用户或项目之Page2为了克服数据稀疏性问题,研究人员开展了一系列的研究.然而,现有方法中使用的相似度计算方法可靠性和推荐进度都有待进一步提高.针对上述问题,本文利用相似度传播的思路,提出了一种新的基于内存的协同推荐算法SPCF(SimilarityPropagationbasedCollaborativeFiltering).在两个公共数据集MovieLens和YahooMusic上的实验结果表明,我们的方法优于传统的基于内存的协同过滤推荐算法.本文第2节介绍相关工作;第3节介绍SPCF的具体实现;第4节给出实验和结论;第5节对全文进行总结和展望.2相关工作为了解决基于内存的CF方法中用户-项目评分信息的数据稀疏问题,国内外研究者进行了一系列研究,提出了多种解决方法.这些方法大都采用各种技术对矩阵进行填充.最简单的填充办法是将用户对未评分项目的评分设为一个固定的缺省值,或者设为其他用户对该项目的平均评分[1],然而用户对未评分项目的评分不可能完全相同,这种简单的办法并不能从根本上解决稀疏性问题.更多研究采用预测填充技术.文献[2-4]采用BP神经网络来进行评分预测.这种方法对噪声数据有较强的承受能力[3],可以有效降低用户-项矩阵的稀疏性.然而,BP算法的效率会导致近邻查找时间的延长[4].文献[5-8]基于朴素贝叶斯方法估计某个项目所属的类别,然后利用此类别中其它项目的评分情况来预测未评分项目的评分.文献[9-10]利用基于项目的属性联系以及项目所处的地位、相互关系和项目的元数据等内容计算项目之间的内容相似度,而不依赖用户对项目的评分.这类方法的应用面较窄.文献[11]于2005年提出了一种基于聚类的方法,即通过计算用户之间的相似度把用户分成k类,然后选择离目标用户最近的一个类中的所有用户作为邻居,计算目标用户与其邻居的相似度.该方法中的聚类数目不易确定.另外一些工作[12-14]采用奇异值分解解决矩阵的稀疏性问题,将原始空间转换到另一空间来避免稀疏性.但是一方面矩阵分解的开销太大,另一方面降维会导致用户-项矩阵中的信息丢失.上述基于矩阵填充的方法没有考虑前次填充结果所带来的连锁反应,因此实际上填充结果并不稳定.在基于模型的CF方法中也有一些基于传播思路的方法[15-16],但是其目标是学习到模型参数,和本文的方法是截然不同的.相对于传统的基于内存的CF方法,本文方法同时考虑了目标用户的邻居对目标项目的评分和目标用户对目标项目的邻居的评分,从而进一步提高相似度计算的准确性.3本文工作本文的主要思想是利用相似度传播技术,寻找更多的邻居信息,然后在此基础上结合用户和项目两方面的信息向目标用户推荐,我们将该算法命名为SPCF.下面对其进行详细的介绍.3.1算法思路我们通过一个例子阐明本文算法思路.图1给出了一个稀疏的用户-项目评分矩阵,其共有K个用户和M个项目,其中灰色部分表示用户对项目未评分.假设我们要对u1进行推荐,按照传统的基于用户协同过滤推荐算法,首先计算跟u1兴趣偏好相同的邻居,可以找到u4.然后根据u4的评分预测u1对iM的评分.很显然,该预测值只是基于一个用户的评分,预测的精度值得怀疑.而我们的思想是:在每位用户都已经找到了自己的邻居之后,可以利用相似度传播寻找每位用户更多的邻居.比如u1的邻居为u4,u4的邻居为u1和uK.此时我们认为u1和uK应该在兴趣偏好上也相似.之后我们可以同时利用u4和uK的评分对u1进行推荐,这样在很大程度上可以提高预测的准确度.算法的工作流程如图2所示.Page33.2算法本节从两个步骤来探讨基于内存的相似度传播的协同过滤推荐算法,即邻居的生成和推荐的生成.3.2.1邻居的生成为了充分利用原始的用户-项目评分数据(毕竟原始用户的评分数据才能真正代表用户的兴趣偏好),在计算用户和项目之间的相似度时,我们采用了之前提出的SimTrans算法[17].(1)对于用户来说,设用户u和用户v在n维空间上的共同评分组成的向量分别表示为犝,犞,并且用户u和用户v共同评分过的项目集合用Iuv=Iu∩Iv表示.用户u和用户v的相似性SimTrans(u,v)为SimTrans(u,v)(h+1)=烄烅烆烄烅烆其中,C(0<C<1)是一个置信系数或阻尼系数,表示用户相似度随着迭代次数增加的传播衰减率;h表示迭代次数.(2)对于项目来讲,设项目i和项目j在m维的用户空间上的共同评分组成的向量分别表示为犐,犑,并且项目i和项目j共同被评过分的用户集合用Uij=Ui∩Uj表示.项目i和项目j的相似性SimTrans(i,j)为SimTrans(i,j)(h+1)=其中C的含义同式(1)相同,表示项目相似度随着迭代次数增加的传播衰减率.式(1)和式(2)中使用的sim相似度函数可以用传统基于内存的协同过滤推荐算法的相似度度量函数替代.3.2.2推荐的生成跟传统的基于内存的协同过滤推荐算法不同,基于内存的相似度传播的协同过滤推荐算法从用户和项目两方面考虑预测目标用户对目标项目的评分.根据目标用户对目标项目的预测评分,推荐给目标用户预测评分最高的一个项目或者N个项目作为结果.假设目标用户a的最近用户邻居集合用A表示,目标项目t的最近项目邻居集合用T表示,则目标用户a对目标项目t的预测评分Pa,t可以通过目标用户a由最近用户邻居集合A中邻居对项目的评分和目标用户对目标项目t的最近项目邻居集合T的评分得到,方法如下:Pa,t(h)=珚Ra+∑a∈A烄12烆珚Rt+∑t∈T其中Pa,t为目标用户a对项目t的预测评分值.SimTrans(a,a)为目标用户a和用户a之间的兴趣偏好相似度,SimTrans(t,t)为目标项目t和项目t被用户喜欢的程度大小.珚Ra为原始用户-项目评分矩阵中目标用户a对以前评过分的项目的平均评分,珚Rt为原始用户-项目评分矩阵中所有用户对目标项目t的平均评分.4实验和结论4.1实验数据实验数据采用的是美国明尼苏达州立大学的GroupLens研究小组提供的MovieLens数据集(http://www.grouplens.org).它包含了943位用户对1682部电影的100000个评分.该数据集的原始用户-项目评分矩阵的稀疏度为93.7%.然而为了更贴近现实,同时也为了更能突出我们提出的算法的优势,我们从该数据集中首先随机抽取了500个用户,其中300个用户作为训练数据,记作Training300,其余200个用户作为测试数据.在Training300的数据基础上,我们又随机抽取了200个用户的数据作为另一组训练数据,记作Training200.我们按照用户的打分个数(5个,10个和20个)分成3个不同的测试数据,记作Given5、Given10和Given20.另外,在YahooMusic①的数据上也抽取了小部分数据来验证我们提出的算法的有效性.同样地,我们仍然采用随机抽取的方法在训练数据上抽取了500个用户以及这500个用户在对应的测试数据上的测试数据.但是有一点不同的是:由于YahooMusic数据集的庞大,我们只选用了前2000个音乐作为项目集合.①http://webscope.sandbox.yahoo.com/Page44.2评价指标实验评估标准的选择是实验的重要组成部分.合理的评估标准能够很好地评价算法性能,发现算法的有待改进之处.本实验从推荐的准确性方面考虑,选取了协同过滤中常用的平均绝对误差MAE(MeanAbsoluteError)作为实验结果的评估标准.平均绝对误差MAE是评价推荐算法质量的标准之一,它通过计算预测评分与真实评价数据上的差别来衡量推荐结果的准确性.MAE的值越小,推荐准确性越高.假设预测的用户评分集合表示为{p1,p2,…,pN},对应的实际用户评分集合为{q1,q2,…,qN},则具体的MAE计算公式为4.3实验方案我们引入了传统的基于内存的推荐算法进行对比.由于推荐算法涉及到相似度计算和预测评分两个关键部分.我们考察了5种相似度度量方法和2种预测评分函数的10种组合方法.其中5种相似度度量方法包括基于用户的皮尔逊相关系数UPCC(User-basedPearsonCorrelationCoefficient)、基于用户的余弦夹角相关性UVS(User-basedVectorSimilarity)、基于项目的皮尔逊相关系数IPCC(Item-basedPearsonCorrelationCoefficient)、基于项目的余弦夹角相关性IVS(ItembasedVectorSimi-larity)和基于项目的修正余弦夹角相关性IAVS(Item-basedAdjustedVectorSimilarity).2种预测评分函数分别为简单的加权平均SWA(SimpleWeightedAverage)和基于相似用户评分的加权求图3Training300的迭代次数与偏差比对比和WSOR(WeightedSumofOthers’Ratings).最后取上述组合中最好的3个结果和我们的方法对比.整个实验分为两个部分:实验1.考察基于内存的相似度传播的协同过滤推荐算法的收敛性.本论文采用的收敛判断标准是平均偏差的比率,即偏差比,此时的平均偏差为迭代后的预测结果与迭代前的预测结果之间的平均偏差.偏差比等于1时的迭代次数就为算法收敛的迭代次数.实验2.对比SPCF算法和传统的基于内存的协同过滤推荐算法.4.4实验结果及分析法的收敛性问题(1)基于内存的相似度传播的协同过滤推荐算从图3可以看出,本文提出的方法在迭代一定次数之后,均表现出一定的稳定性.需要指出的是,该算法的收敛性还有待严格的理论证明.但是通过实验基本能给出算法收敛性的经验结论.同时,根据我们提出来的判断算法的收敛标准以及这3幅图的结果,我们把基于内存的相似度传播的协同过滤推荐算法的迭代次数定为10.(2)不同方法推荐质量精度的对比首先,确定算法的邻居个数.该值采用的是传统基于内存的协同过滤推荐算法判定出的值.图4分别显示了测试数据邻居个数和MAE的曲线.荐效果最佳.从图4中我们得出邻居个数为60的情况下推其次,表1(a)、(b)分别显示了3种传统基于内存的协同过滤推荐算法和SPCF算法在不同实验数据上MAE的对比.Page5图4邻居个数与MAE的取值(a)各种算法在犕犃犈指标上的性能(YahooMusic)训练数据Yahoomusic训练数据方法Given5Given10Given20Training300Training200表1(b)中“”号代表3种传统的基于内存的协同过滤推荐算法中MAE值最小的那个方法,即推荐精确度最高的方法.括号中的百分数表示的是我们提出的基于相似度传播的方法比带“”号的方法在推荐精确度方面的提高比率.在YahooMusic数据集上的提高结果非常可观,达到了50%.而在MovieLens数据集的提高也高于传统方法.这两者提高幅度的差距可能和这两个语料的具体数据不同有关.表1(b)的数据同时也表明,当已知打分信息减少时,SPCF相对于传统方法的提高幅度逐渐提高,这也表明本文方法在稀疏情况下能够体现出更强的优势.5总结和展望本文介绍了一种改进的基于内存的协同过滤推荐算法SPCF,该算法通过不断更新原始用户-项目开销较大,下一步要研究降低开销的方法.评分矩阵为目标用户和目标项目找到更多的最近邻居集合,对目标用户给出推荐结果.实验结果验证了SPCF方法的有效性.未来的工作包括:(1)对本文方法的收敛性进行理论上的证明.(2)本文方法主要关注精度,但是算法的时空(3)将该方法和基于内容的CF方法相结合.(4)分析噪音数据在相似度传播过程中的影响程度.(5)考虑与在MovieLens数据集上表现较好的方法的对比,比如Model-basedCF和矩阵分解的一些方法.致谢在撰写论文期间,王斌老师谆谆教导,实验室同学给予了鼓励,特别是李亚楠师兄丰富的想法启发并影响我完成了这篇论文.向所有支持、关心和帮助过我的人表示最诚挚的谢意!
