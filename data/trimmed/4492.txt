Page1一种带有“遮罩”的ASIFT特征提取算法朱博戴先中李新德杨伟(东南大学自动化学院复杂工程系统测量与控制教育部重点实验室南京210096)摘要指出提高ASIFT算法效率的一种新途径:利用“遮罩”屏蔽源自视角模拟的无效像素区域,从而使较为耗时的区域运算仅作用于有效像素区域,以达到提高运算效率的目的.首先,分析无效像素区域产生根源,并定量分析此类区域在各区域运算环节占有的比例,指出增加“遮罩”的必要性,特别指出被处理图像的宽高比越大,则经“遮罩”处理后所获得的加速比越高;随后,给出带有“遮罩”的ASIFT算法结构;然后,给出“遮罩”的一种低存储空间、高访问效率的数据结构,并给出离线获取“遮罩”的一种解析方法;最后,通过实验证实使用“遮罩”能有效提高ASIFT算法中区域运算部分的效率,从而在一定程度上也提高了算法整体的运算效率,但效率提升幅度受到理想区域加速比限制.关键词ASIFT算法;完全仿射不变;特征提取;加速算法;计算效率1引言近年来,图像处理和计算机视觉领域涌现出大量特征检测子(detector)和局部特征描述子(descriptor),相应局部特征被广泛用于图像检索、物体识别、机器人定位和宽基线匹配等研究[1].其中,具有仿射不变性的典型检测子有MSER[2]、Harris-Affine[3]、Hessian-Affine[4]等.Mikolajczyk等人在文献[4]中对6种应用广泛的仿射不变性检测子进行了充分比较,参与比较的检测子包括:Harris-Affine、Hessian-Affine、MSER、EBR、IBR、SalientRegions,比较过程中使用的测试图像集含有结构场景和纹理场景,并且包含多种类型的变化(视点变化、尺度变化、光照变化、模糊、JPEG压缩).作者从重复度(repeatability)和区分性(distinctive-ness)两方面对检测子比较后指出:在各种场景类型和变化类型下并不存在某种检测子性能最优;在许多情况下MSER具有更好的性能,其次是Hessian-Affine.MSER虽然性能突出,但并非完全尺度不变[5],而Hessian-Affine尽管尺度不变,但是计算速度慢[6]限制了其应用场合.事实上,Hessian-Affine也并非完全仿射不变,文献[7]从平面对象的数字图像获取模型角度阐述了相应规范化方法(normali-zationmethods)仿射不变性能受限的原因:模型中模糊算子同仿射变换不满足交换律,使得规范化过程不能精确消除仿射变换.另外,两类不考虑完全仿射不变性但被广泛使用的典型检测子是SIFT检测子(SIFTdetector)[7-8]和Fast-Hessian检测子[9].它们的一个共同特点是对图像斑点(blob)检测运算进行了适当近似(如对LoG、Hessian阵的行列式近似),在保证检测性能的基础上,使得运算速度大幅度提升,从而使得实时应用成为可能.在局部特征描述子方面,众多性能各异的描述子亦被提出,常见的如形状上下文(shapecontext)[10]、SIFT[8]、PCA-SIFT[11]、GLOH[12]和SURF[9]等.Mikolajczyk等人在文献[12]中对2005年之前出现的10种典型描述子进行了比较,指出在大多数测试中GLOH的性能最好,其次是SIFT描述子.然而,GLOH的计算花费较大[9],这限制了它在实时场合的应用,而SIFT描述子至今仍是最常用的描述子之一.Bay等人[9]在2006年提出SURF描述子,从文献[9]中的代表性实验结果看出,它的性能优于SIFT、GLOH和PCA-SIFT描述子并且计算代价更低.可以看出,在图像局部特征研究中,一方面,人们希望特征检测子和描述子具有更好的性能;另一方面,面对有限的计算资源,人们期望位于高层应用前端的特征提取算法简洁、高效,算法速度(效率)甚至成为其能否被广泛应用的必要条件.另外,由于并不存在一种特征提取算法性能最优且能够覆盖所有类型图像区域,因此应用中逐渐流行将多种互补的特征提取算法复合使用,例如文献[13]在场所语义建模研究中使用了3种互补特征.这种复合使用方式对单一特征提取速度提出了更苛刻的要求.因此,对于新提出的特征提取算法,其运算速度问题必须予以充分考虑.ASIFT特征提取算法是Morel和Yu[7]于2009年提出的一种完全仿射不变特征提取方法.SIFT算法本质上对尺度参数进行模拟(simulation)而对旋转和平移参数进行规范化(normalization),ASIFT算法在此基础上对仿射变换的另外两个参数———经、纬角进行了合理模拟,使得该算法具有完全仿射不变性.由文献[7]中实验可知,当待匹配图像对的转移倾斜指数(transitiontilt)高达36时,匹配过程仍能获得ASIFT匹配点对,而此时SIFT、Harris-affine、Hessian-affine和MSER特征匹配均已失效.文献[7]还从数学上证明了ASIFT算法的完全仿射不变性.ASIFT算法在提出之后已被用于多种场合,如文献[14]在人体行为识别研究中使用ASIFT算法,实现局部静态特征(localstaticfeatures)提取;文献[15]将ASIFT算法用于人脸识别领域,使得在红外光谱范围内能够获得更好的匹配效果.ASIFT算法尽管具有完美的仿射不变性能,但是低运算效率似乎成为其进一步广泛使用的障碍.网站http://www.ipol.im/pub/demo/my_affine_sift/提供了ASIFT算法的在线测试实例,使用Adam测试图像对时,特征提取时间为3s(计算服务器为DellR910,含4个8核Xeon75602.3GHzCPU①),这说明即使以高性能服务器作为计算载体,现有ASIFT算法仍难以满足实时性要求,需要改进算法效率.为提高计算效率,文献[7]大致给出3种观点:(1)采用快速SIFT算法(如PCA-SIFT等);(2)各个SIFT处理过程并行运行;(3)采用两分辨率法.观点(1)和(2)均可以直接得到加速的ASIFT算法,①与GuoshenYu和NicolasLimare通信得知,在此对提供帮Page3而观点(3)虽然有助于大幅度减少算法复杂性,但确定二次采样因子和M个最优仿射变换的原则还有待探讨,不合适的取值将直接影响ASIFT特征提取和匹配效果.本文发现影响ASIFT算法速度的另一因素是ASIFT算法在模拟摄像机经、纬角参数时会引入无效像素区域,它们在计算中将占有一定比例,影响运算效率.在此基础上,本文提出使用“遮罩”来避免对无效区域的计算,并给出“遮罩”数据结构及其获取方式,从而在增加少量存储空间的前提下提高算法效率.本文在第2节对ASIFT算法原理进行简要介绍并给出本文使用的一些术语定义;在第3节分析ASIFT算法引起无效像素区域的根源,定量分析指出使用“遮罩”的必要性并给出带有“遮罩”的ASIFT特征提取流程;在第4节提出“遮罩”的一种低存储空间、高访问效率的数据结构,并给出一种生成“遮罩”的解析方法;第5节中,对本文提出的方法进行实验验证,对实验现象进行必要分析和讨论;第6节对全文进行总结.2相关记号、定义及ASIFT算法原理为方便读者参考,本节所用符号与文献[7]基本一致,算法细节及数学证明详见文献[7].2.1相关记号及定义记号1.x方向上一维高斯算子[7],记为其中:σ为方差,c为常数,通常取c=0.8以保证较好的抗锯齿效果,同理,有y方向上一维高斯算子Gy记号2.x方向一维卷积算子[7],记为x.同理,有y方向一维卷积算子y.定义1.倾斜因子(tiltfactor)t[7],定义为图2ASIFT特征提取和匹配流程θ为相机光轴与平面法向量夹角,称为相机倾斜角(见图1).定义2.已知图像w(x,y),定义x方向几何倾斜(geometrictilt)算子Tx同理,有y方向几何倾斜算子Ty定义3.已知图像w(x,y),定义x方向模拟倾斜(simulatedtilt)算子同理,有y方向模拟倾斜算子定义4.(R,素构成的集合〈R(φ),{称为(R,变换.该空间中某点作用于图像w(x,y)时,有tR(φ)w(x,y).x定义5.某一图像处理算子P(·),如果其作用对象为图像w(x,y)上一个或多个单连通域w(x,y)),则称其所作运算为区域运算,同时称该算子为区域算子.特别地,如果P(·)的作用对象为整幅图像(算,简称全域运算.定义6.某一图像处理算子P(·),如果其作用对象为图像上一组离散点,则称其所作运算为点运算,同时称该算子为点算子.2.2ASIFT工作原理如图2所示,由(R,像u得到图像珘u·,之后对图像珘u·提取SIFT特征并Page4y将所得到的特征加入特征集F珘u,如此遍历整个(R,t)空间即得到完整的ASIFT特征集F珘u,该特征集可用于特征匹配.值得注意的是,算法实现时为保证合理计算量,通常对(R,理.(R,整个ASIFT特征提取过程可以分为区域运算和点运算两部分(见图2).3“遮罩”原理文献[7]未细分ASIFT算法中区域算子的作用范围,区域算子均进行全域运算(见图2),由作者给出的源代码也可以看出,由于未细分作用范围,代码笼统地将各区域算子作用于相应过程图像的整体.ASIFT算法在进行(R,无效像素引入临时图像,它们以一定比例参与区域运算,进而对运算效率造成影响.本节首先分析无效像素区域产生的根源,其次对其占有的比例进行量化分析,指出为区域算子作用域增加“遮罩”的必要性,最后给出带有“遮罩”的ASIFT特征提取流程.由于连续模型的简便性,本节仍沿用连续模型讨论相关问题.3.1无效像素区域产生原因由ASIFT算法原理可知,为了模拟仿射变换中经、纬角参数,ASIFT算法首先要对原始图像w(x,y)在整个(R,换〈R(φ),道,通常二维图像为矩形,且在计算机中以二维矩阵表示,这样,原始图像经旋转后必须规范为矩形图像以便以二维矩阵存储,这使得在构成新矩形图像时不可避免地引入常值像素来填补空白区域.所填补区域虽不影响特征提取结果,但参与整个区域运算过程并占用运算时间,故称其为无效像素区域.旋转变换产生的无效像素区域实例见图3中灰色部分.(R,t)全空间变换会产生大量无效像素区域.x图3图像旋转后引入的无效像素区域(灰色部分)3.2使用“遮罩”的必要性分析由于ASIFT算法在开始时便将大量无效像素区域引入临时图像,导致后续所有进行全域运算的区域算子产生大量无效运算,因此有必要在每步运算中使用与当前有效像素区域大小、姿态一致的“遮罩”,将无效区域屏蔽,从而提高计算效率.下面,定量分析由原ASIFT算法中进行全域运算的4类区域算子所处理的总无效像素区域同总作用区域的面积比,从定量角度给出引入“遮罩”的必要性,并给出理想区域加速比概念.(1)旋转变换算子R.由于几何变换通常采用逆映射方式求得新图像,因此,实际上从旋转变换开始便引起无效运算.在(R,[0,π),t>1;设原始图像的宽、高分别为w、h,旋转角度φ后,图像宽、高分别为wr、hr;不妨设x轴方向水平向右(见图3);设在(R,t,事实上由于使用连续模型,所以有n→.这样,(R,t)空间上R涉及的无效像素区域面积总和为xxR的总作用区域面积为SR=n·2∫=n·2∫=n·[(h2+w2)+hwπ].两者比值为上述比值在h=w时取得最小值:(2)模糊算子作用域与旋转变换R完全一致,所以易得同样,在h=w时取得最小值:(3)式实现几何倾斜运算,因此在倾斜后的图像上计算Page5相关面积比.设沿x轴方向作倾斜变换后图像宽为wrt,如图4所示.(R,S^t的总作用区域面积为TxSt=2∫t=1∫=(h2+w2)lnt=(h2+w2)lnt两者比值为上述比值在h=w时取得最小值:图5带有“遮罩”的ASIFT特征提取流程(4)SIFT的尺度空间极值检测算子.极值检测算子作用域与几何倾斜算子Tx同样,在h=w时取得最小值:后续图像处理过程针对关键点进行点运算,不再受无效区域影响.由上述4步定量分析可以看出,原ASIFT特征提取过程中各区域算子处理的总无效像素区域同总作用区域面积比均为(h2+w2)/(h2+w2+hwπ).令称其为原ASIFT算法的理想区域加速比公式,其值为理想区域加速比,可见λ仅与被处理图像(或被处理图像区域)宽高比有关.当被处理图像为正方形时总无效像素区域所占比例最小,达38.898%;当被处理图像为一般矩形时理想区域加速比较大,典型地,当k=43时,λ=39.873%;k=169时,λ=42.691%.易得λ为k的增函数,由此可知,被处理区域宽高比越大,无效像素区域所占比例越大,在其上耗费的运算时间比例也越大.通常假设区域算子运算时间同作用区域大小成正比,则当无效区域被屏蔽时,区域算子运算速度理想情况下将提升λ.从上述定量分析可知,使用“遮罩”对无效区域进行屏蔽有其必要性,特别地,被处理区域宽高比越大,通过“遮罩”屏蔽无效像素区域获得的加速比越高.3.3带有“遮罩”的ASIFT特征提取流程带有“遮罩”的ASIFT特征提取流程图如图5所示.其中,在定量分析述及的4个区域运算环节处Page6使用“遮罩”,当进行每一区域运算时,从“遮罩”集合中取出与当前图像有效像素区域大小、姿态一致的“遮罩”,以屏蔽无效像素区域,从而提高计算效率;{〈MASKx,MASKy〉φ,1}和{〈MASKx,MASKy〉φ,t}为离线生成的两种“遮罩”集合,将于下一节详细介绍.4“遮罩”的数据结构与生成方法理论算法的计算机实现需要保持合理计算量和一定精度,因此需要对连续(R,散化.文献[7]指出通常需要根据实验确定采样步长,并给出了一般离散化原则:设倾斜采样步长为Δt,旋转变换采样步长为Δφ,则有t=(Δt)n,n=0,1,2,…和φ=mΔφ,m=0,1,2,…,通常取Δt槡=2,Δφ=72°/t.当进行ASIFT特征提取时,原始图像根据Δt和Δφ在(R,再由SIFT过程处理.由于每一区域运算步骤对应一个“遮罩”,因此“遮罩”与相应图像一样是t和φ的函数,不同之处在于“遮罩”可以离线生成,进而节省在线处理时间.直观上,可以以一幅二值图像来表示一个“遮罩”,其中不妨以1表示该位像素有效,当有区域需要屏蔽时程序访问该二值图像,仅对其上“1”对应的当前图像像素进行处理.事实上,这种数据结构不仅引入大量“遮罩”图像,造成内存耗费,而且使得各区域算子运算时遍历两幅图像,计算效率低下.由于“遮罩”为单连通域,因此它可由边界唯一确定,这样,以边界“线信息”取代“面信息”可减少存储空间并能避免遍历二维图像,从而提高访问效率.本文采用边界数据对“遮罩”进行描述.图6中给出一个“遮罩”实例,它与图4所示过程图像对应,“遮罩”内部区域参与区域运算,而外部区域被屏蔽.由于ASIFT算法实现过程经常涉及一维运算,为使用方便,对同一“遮罩”采用两种描述方式:x方向遮罩、y方向遮罩.两种“遮罩”均以n(·)×2维矩阵表示,分别形式化如下:MASKx=MASKy=其中,I(·,·)0表示二维数字图像平面上坐标,n(·)表示图像y(x)方向分辨率,MASKx的第i行为y轴坐标Iy=i-1时相应“遮罩”边界的x坐标Ii,x1、Ii,x2,同样,MASKy的第i行为x轴坐标Ix=i-1时相应“遮罩”边界的y坐标Ii,y1、Ii,y2.(R,上的“遮罩”集合记为{〈MASKx,MASKy〉φ,t}.下面,给出一种生成“遮罩”边界的解析方法:φ=0,π/2时,无需增加“遮罩”,因此只考虑区间φ∈(0,π/2)和φ∈(π/2,π),设取整算子为Z(·),图像为w×h像素,图像坐标系如图6所示,解直线方程易得φ∈(0,π/2)时,有Ix1=烄Ix2=烅烆当φ∈(π/2,π)时,有烄Ix1=烅烆Ix2=Page7同理,Iy1和Iy2的解析表达为上述表达式的反函数,不再赘述.值得注意的是,由于SIFT特征提取过程要使用图像金字塔,因此需要在相应步对“遮罩”进行半采样———取“遮罩”奇数行并将坐标值减半取整;另外,旋转变换算子R和x算子G仍可采用上述解析表达式作为“遮罩”的生成公式,此时只需令t=1,“遮罩”集合记为{〈MASKx,MASKy〉φ,1}.5实验与讨论本节以实验验证前述算法的有效性.实验硬件环境:CPU为IntelCore2P8400(双核,2.26GHz),关闭IntelSpeedStep模式;芯片组为IntelGM45;使用DDR3内存(容量4GB,主频1066MHz).实验软件环境:操作系统为Windows7专业版;编译器为IntelC++CompilerProfessional11.1.为避免同一算法的不同代码实现所造成的运算速度差异,本文在文献[7]提供的源代码(下载地址:http://www.ipol.im/pub/algo/my_affine_sift/)基础上增添“遮罩”,不对与“遮罩”无关的部分进行任何修改,并且不对增加“遮罩”的代码段中的原数据结构及算法做任何代码级优化.原代码中大部分运行参数保持不变,而个别修改的参数在后文给出进一步说明.使用Adam图像对作为测试图像,将原始图像规范到400×300分辨率.实验中,对原ASIFT算法和带“遮罩”的ASIFT算法(Mask-ASIFT)的特征提取效果进行了对比(见表1);在无“遮罩”和有“遮罩”两种情况下,对前述受无效像素区域影响的4类区域算子进行计时比较,并对增加“遮罩”后的提速效果进行了分析;为说明提速效果的可重复性,在同一运行条件下代码被重复运行和计时21次;最后,对整个ASIFT特征提取过程的速度提升效果也进行了实验说明.表1原ASIFT和Mask-ASIFT特征提取效果对比原ASIFTMask-ASIFTMask-ASIFT(SIFT极值检测时边界收缩2像素)如表1所示,Mask-ASIFT同原ASIFT算法提取的特征点数目基本相同,差异特征点出现于有效像素区域的边界附近.原因在于:原ASIFT算法中有效像素区域边界位于图像内部,SIFT过程在其附近只需按常规做卷积等运算;而Mask-ASIFT算法中有效像素区域的边界是实际处理的图像物理边界,为进行卷积等运算需要在边界外侧增加有限宽像素带,使得边界响应同原ASIFT算法不同,造成边界附近出现差异特征点.图7各子图横轴为代码运行次数编号,共进行21次实验,纵轴表示运行时间.当图像分辨率被规范到400×300时,根据理想区域加速比公式可知此时理想区域加速比为39.873%.旋转变换算子R(图7(a))、一维高斯模糊G倾斜算子Tx37.812%、31.232%和31.079%,均略低于理想区域加速比.事实上,算法实现时对(R,了离散化处理,且由于实际代码需要进行变量初始化、内存空间开辟等额外处理,使得区域运算时间同区域面积的正比关系并不严格成立,导致出现实际加速比低于理想区域加速比,今后可通过代码级优化或增加并发度使之接近甚至超过理想区域加速比.图7(d)中,SIFT尺度空间极值检测平均加速比为50.422%,这或许得益于某些代码的编写,使得编译器优化生成的机器码能够充分利用CPU向量化(Vectorization)或其它特性,增加了代码并发度,造成实际加速比高于理想区域加速比.但因受制于理想区域加速比和CPU并行化程度,实际加速比并不会高出理想区域加速比很多.理想情况下,“遮罩”的使用不应对后续点运算产生影响,而事实上,如前所述,Mask-ASIFT算法中有效像素区域的边界是实际处理的图像物理边界,在边界附近出现强响应,使得经极值检测后边界附近存在大量关键点,这些关键点均参与点运算,从而导致后续点运算量增加、运算时间加长(图8三角线条所示).为解决该问题,可适当缩小极值检测区域.当极值检测边界缩小2像素时,Mask-ASIFT算法获得的特征点数略有减小(见表1末行),而点运算速度比原ASIFT算法略有提高(见图8星号线条所示).理论上,“遮罩”的增加只能提高区域相关运算的效率,而通常我们更关注整个特征提取过程的效率,图9给出“遮罩”增加前后整个ASIFT特征提取时间对比.图9(a)为极值检测边界未经修改时的耗时对比,“遮罩”的增加能够使运算效率平均提升25.908%;图9(b)为极值检测边界缩小2像素时的Page8图7增加“遮罩”前后4类区域算子耗时对比耗时对比,“遮罩”的增加能够使运算效率平均提升28.773%.ASIFT算法整体运算速度不仅取决于区域运算部分,而且取决于点运算部分,而经验上,通常点运算量小于区域运算量(实例参见图7和图8,点运算占2.2s,区域运算占9.1s),因此对区域运算部分的速度提升显得更加重要.ASIFT算法中点运算部分的计算量取决于图像内容并与应用场合有关,采用高效关键点描述算法(如SURF等)可进一步使之降低.图9“遮罩”增加前后ASIFT特征提取时间对比Page96结束语ASIFT算法是一种经过数学严格证明的完全仿射不变特征提取算法,本文研究了原ASIFT算法忽略的一个方面,指出原ASIFT算法在初始时刻会引入大量无效像素区域,如果不区分区域算子作用范围,无效像素区域将参与整个ASIFT算法的区域运算过程,导致计算资源浪费、运算效率降低.本文提出使用“遮罩”来屏蔽无效像素区域,定量分析了使用“遮罩”的必要性,特别指出ASIFT算法处理图像的宽高比越大,经“遮罩”处理后获得的加速比越高;给出“遮罩”实现时所使用的一种高效数据结构,同时给出离线获取“遮罩”的一种解析方法.在标准图像对上进行了实验,验证了“遮罩”对ASIFT算法中区域运算部分及整体的速度提升效果,并指出增加“遮罩”后要适当缩小SIFT极值检测的区域,减少不必要点运算.本文只讨论了提高ASIFT算法效率的一个侧面,其由ASIFT算法自身特性引起,事实上,一些相关理论能够进一步提高ASIFT算法中区域算子本身和点运算本身的计算效率,多种提速方法的综合应用将有利于实时实现ASIFT算法.另外,一些并行技术的使用也将有助于实时实现ASIFT算法,这些均为今后需要研究的方向.
