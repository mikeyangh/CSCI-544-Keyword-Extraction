Page1全动态多维网络局部介数中心度算法杨建祥王朝坤王萌陈俊(清华大学软件学院北京100084)摘要近些年来,随着对各种网络图数据分析的不断深入,越来越多的研究开始关注复杂网络的数据分析.面对现实生活中不断的动态变化,且更加复杂、多维度的社交网络或实体关系,亟需寻找新的方法来支持这样的应用需求.针对维度不断动态变化(增边或删边)的全动态多维网络上的节点重要性度量问题,提出了多维网络局部介数中心度度量算法以及动态环境下的局部介数中心度更新算法.首先将多维网络映射为一维映射图,并在此基础上利用K最长路径约束的局部介数中心度来衡量节点重要性,进而提出了两步过滤剪枝算法来加快动态网络环境下的局部介数中心度更新过程.接着对算法进行了理论分析,并分析了算法的应用场合.最后通过在模拟和真实数据集上的实验,探讨了最长路径约束K的大小选择,并展示出文中所提的全动态多维网络局部介数中心度更新算法具有良好的加速性能.关键词全动态网络;多维网络;局部介数中心度;更新算法1引言传统的网络数据分析是针对网络在某一时刻的快照进行的.随着社交网络、传感器网络、图形学等领域的不断发展,越来越多的研究者意识到在静态网络上的计算无法体现网络动态变化的过程,且计算结果与快照时间密切相关,无法支持时效性要求较强的分析.于是边或者节点动态变化的网络,即动态网络,成为一类重要的研究对象[1].真实网络除了具有拓扑结构会随着时间动态变化的特性外,其节点之间的联系也是复杂且多维度的,单纯针对一种维度关系的分析可能会由于观察角度的偏差而产生错误的分析结果.因此,有必要在网络分析中引入更多维度的信息.图1展示了两个真实的多维度网络(简称多维网络)实例.图1(a)是不同协作领域的网络,两个研究者之间共同研究的话题可能有很多个方向,这里将不同的协作领域方向看作不同的维度.图1(b)表示社交网络,其将不同类型的社交关系看作不同的维度.显然,具体的维度语义信息对更加精准的网络分析是十分重要的.在网络分析与计算中,度量节点的重要性是一项关键性工作.本文针对动态多维度网络节点重要性度量问题,对多维网络进行一维映射来简化计算,并提出了K最长路径约束的局部介数中心度算法来计算节点重要性,同时提出了在动态插入或删除维度边情形下的两步过滤剪枝局部介数中心度更新算法(Multi-dimensionalTwo-StepPruningAlgorithm,MTSP).本文第2节介绍相关工作;第3节给出多维网络映射模型;第4节介绍局部介数中心度的定义和算法;第5节提出动态多维度网络上局部介数中心度两步过滤剪枝更新算法;第6节为实验与分析;第7节总结全文.2相关工作在网络数据管理与分析领域,动态网络和多维网络是当前两大研究热点[2-3].本文重点研究动态多维网络中的介数中心度计算.下面分别从动态网络、多维网络及介数中心度3个方面对相关工作进行介绍.动态网络按照更新范围,分为两种[4]:部分动态网络(PartiallyDynamicNetwork)和全动态网络(FullyDynamicNetwork).其中部分动态网络又按照支持插入操作还是删除操作而分为增量式动态网络(IncrementalDynamicNetwork)和递减式动态网络(DecrementalDynamicNetwork)两种.全动态网络可以同时支持边插入和删除操作.动态网络上的计算可能会因为一次插入或者删除边而“牵一发动全身”,使得局部的更新转变为全局的计算.例如,插入一条边,可能会导致图中所有节点之间的最短路径都改变.Eppstein等人[5]、Henzinger等人[6-7]都提出过不同的模型来降低点对之间的依赖度,从而减少全局计算的可能性.动态网络计算问题在所有点对最短路径计算[7]、最大基数匹配[8]、可达性查询[9]、子图同构[10]等图分析问题上得到了广泛应用.多维网络上的维度分为两种[11]:显式维度(Explicit)和隐式维度(Implicit).其中显式维度可以直接从现实世界反映出来(如研究领域),而隐式维度则需要通过数据分析挖掘(如潜在爱好).2011年,Michele和Berlingerio[12]首次对多维网络中的基本概念进行了规范.这些年,一些基于社交网络的多维网络研究获得了卓有成效的结果,如Peng等人[1]研究潜在重要节点的发现与提升,Tang等人[13]研究节点之间的潜在关系,Szell等人[14]研究虚拟世界游戏用户的交互方式.介数中心度的概念最初由Anthonisse[15]和Freeman[16]分别提出,其中Freeman的定义在当前应用得最为广泛.由于介数中心度需要计算所有点对之间的最短路径,其计算的时间复杂度一直无法突破Ω(n3).Brandes[17]在2001年提出的基于点对依赖的介数中心度算法,通过减少重复计算,使得在稀疏有向无权图上计算介数中心度的时间复杂度减小到O(mn),在有向带权图上的时间复杂度减为O(mn+n2logn),其中m和n分别为图中边和点的数量.除此以外,Bader等人[18]通过并行技术提高其计算效率,Page3Ahmet等人[19]则通过将图压缩来提高介数中心度计算效率.近年来涌现出一些基于动态网络的介数中心度更新算法.Lee等人[20]提出一种在动态无向图上,利用最小联结环(MinimumUnionCycle)来过滤不会被更新操作影响到的节点对的方法.杨建祥等人[21]提出一种利用图的可达性和距离矩阵来加快动态有向图上的介数中心度更新算法,具有很好的更新性能.Kas等人[22]也在之后提出一个思路类似的有向图介数中心度更新算法.然而现有工作仍然仅限于动态的一维网络,因此有必要针对多维网络设计新的算法.3多维网络映射模型在多维网络上进行分析和计算时,我们需要考虑如何根据多维网络的特性设计合适的算法.Berlingerio等人[11]提出将多维网络抽象为多图(Multi-Graph),然后再将维度边映射为一维图.于是,问题的关键就转化为希望保留维度边的什么信息.多维网络表示为G=(V,E,L),其中V表示图中的节点集合,E表示图中维度边的集合,L表示图中所有维度集合.多维图中一条维度边用三元组(v,w,d)表示,其中v和w表示这条边的两个端点,d表示边的维度,且v,w∈V,d∈L.图2(a)是一个协作网络示例,图中节点代表作者,边表示作者之间曾合作发表过的研究工作.该多维网络维度集合L={SIGMOD,SDM,SIGKDD},维度边(Freeman,Lamb,SIGMOD)表示Freeman和Lamb在SIGMOD上合作发表过文章.基于前面的讨论,定义多维映射函数.定义1(多维网络).对多维网络G=(V,E,L),其对应的一维映射网络表示为G,对应的多维网络的映射函数ω:V×V→ω(v,w)=|{(v,w,d)|(v,w,d)∈E}|(1)其中映射函数ω(v,w)的值域范围是[0,|L|].若取值为0,则在一维映射图上两节点不相连.相邻节点之间维度边的数量看作是这两个节点间的路径数量,即若节点A与节点B之间有2条维度边,则一维映射图中,A到B之间的权值为2.注意,这里的权值ω(v,w)表示节点v与w之间的连接边的个数,而非两点之间的距离.于是多维网络中两点之间最短路径的数量可定义如下.定义2(最短路径).在一维映射图G上,ω为映射函数,若任意两个顶点v0与vk之间有最短路径p=〈v0,v1,…,vk〉,则v0与vk之间的最短路径个数表示为以下使用σ(v0,vk|vi)表示v0到vk最短路径经过vi点的次数.因为映射图G上的权值含义与传统的有权图的权值不同,所以这里的点对之间最短路径数量定义也是不同的.我们将所有相连点之间的距离看作1,映射图上的权值表示两点之间的最短路径数量.以图2为例,Freeman到Fegan的最短路径为Freeman→Hillas→Fegan,其最短路径数量σ(Freeman,Fegan)=2,这条最短路径经过Hillas节点的次数σ(Freeman,Fegan|Hillas)=2.表1列出了本文常用的符号.符号G=(V,E,L)多维网络G,V为节点,E为维度边,L为维度G=(V,E)ω(v,w)CKB(v)σ(s,t|v)σ(s,t)δ(s,t|v)AUSK(v,w)改变v与w之间维度边后的可达更新点对集合dG(s,t)vwPage44局部介数中心度4.1局部介数中心度传统的介数中心度是对整个图进行遍历计算的,需要计算所有点对之间的最短路径.然而全局的介数中心度自身存在一些缺点:首先,需要计算所有点对间最短路径问题(All-PairsShortestPathProblem,APSP),计算效率低,不适合规模较大、时效性较强、对运算效率要求较高的图数据分析.再者,假设消息会沿着最短路径传播,且随着传播会逐渐衰减,则消息传到比较远的位置可能性很小.所以在计算介数中心度时将距离较远的点对也纳入计算会引入误差.这样会引入长路径对节点重要性度量的干扰以及更多由于维度边映射带来的语义误差.例如,在图3(a)中,节点表示微博用户,维度边表示两个用户之间的共同爱好.假设A分享了一个关于美食的微博,B作为与A具有共同爱好的好友,也非常有可能会分享这条微博.该消息最可能会沿着路径A→B→C传播.在对应的一维映射网络图3(b)中,边上的权值只代表两点之间维度数量,也就是两人共同爱好的数量,在这个例子中都是1.由于D与B的共同爱好是旅游,因此D分享B所传播的微博可能性就很小.如果计算介数中心度,会将A与D的最短路径和A与C的最短路径在计算上看作是等价影响力的最短路径.可这却与维度边的语义信息表示的意义不符.由于这样的映射并不能显示出不同维度之间的语义差距,因而计算的路径越长,由于语义误差而产生计算偏差的概率也就越大.考虑到以上问题,我们于是引入最长最短路径约束系数K,来限制参与到最短路径的点对之间的最长距离为K.我们将只将K步范围内点对加入介数中心度计算度量称为局部介数中心度,以提高计算效率,同时避免过多由于长路径和多维网络语义带来的误差.下面给出局部介数中心度(LocalBetweennessCentrality)的定义如下.定义3(局部介数中心度).在图G上,K为常数,且K>1,局部介数中心度CK4.2多维网络局部介数中心度算法在解决更新问题之前,需要先解决多维度网络局部介数中心度计算问题.多维网络上的局部介数中心度计算相较于传统的介数中心度计算,需要同时考虑最长距离约束K和边权值意义改变带来的两点之间最短路径数量计数方法的变化.而由于多维网络模型的转换,我们实际计算时面对的其实是有权图局部介数中心度计算问题.这里我们将Brandes在全局介数中心度计算上的算法[15]扩展到有权图的介数中心度的计算,提出计算多维网络局部介数中心度的算法K-MLBC(K-MultidimensionalLocalBetweennessCentrality),见算法1.算法1.计算多维网络局部介数中心度K-MLBC.输入:映射网络G,ω,K输出:CK1.FORs∈V2.FORv∈V3.Pred[v]←Emptylist;dist[v]←;σ[v]←0;4.dist[s]←0;σ[s]←1;入队列Q←s;5.WHILEnotQ.Empty()6.出队列v←Q;入栈S←v;7.FORw∈V∧(v,w)∈E8.IFdist[w]=THENdist[w]←dist[v]+1;9.IFdist[w]<KTHEN入队列Q←w;10.IFdist[w]=dist[v]+1THEN11.σ[w]←σ[w]+ω(v,w)·σ[v];Pred[w]←v;12.FORv∈V13.δ[]v←0;14.WHILEnotS.Empty()15.出栈w←S;16.FORv∈17.δ[]v←δ[]v+((1+δ[]w)σ[]v)/(σ[]w);18.IFw≠sTHENCK19.FORv∈V20.IF[]distvKTHENdG(s,v)←[]distv;21.RETURNCKPage5如算法1所示,K-MLBC算法有3个输入:将多维网络G=(V,E,L)映射后的一维网络G、相应的映射函数ω以及关于局部性的约束K值.K-MLBC算法的关键在于需要对最短路径的长度进行限制,这里需要注意边的权值并非两点之间的距离,而是表示节点之间所具有的维度边的数目.若节点v和w之间权值为3,则我们将之看做v到w有3条路径.算法的输出为所有节点的局部介数中心度集合CK最短路径距离表dG.从步1可以看出,算法依次将每个节点当做源节点s进行计算.首先步2到步4是初始化过程,其中Pred[v]表示所有与s点距离为dG(s,v)-1的前置节点集合,dist[v]表示s到v之间的最短距离,σ[v]表示s到v之间的最短路径数量.然后在步5至步12中,根据源节点s到其可达范围内的节点之间的最短路径个数进行计算.其中,在步8,如果对于v的某个邻接点w来说,当前s与w不可达,则通过节点v能够使得s到达w,因而[]distv+1;在步9,如果s到w的距离小于约束K,那么将w加入队列等待后续处理,这一步体现了本文所研究的介数中心度计算中的局部性;在步10,如果我们已经知道了s恰好可以通过v到达w,则用已知的s到w的最短路径个数加上通过节点v到达w的新的最短路径个数,即σ[]w←σ[]w+ω(v,w)·σ[]v,同时将v加入到w的前置节点集合.这一步体现了本文所研究的介数中心度在多维网络中的计算方法.其中,新加入的那部分最短路径数为v到w的维度边个数ω(v,w)与s到v的最短路径个数σ[]v的乘积.接下来算法根据最短路径个数计算点对依赖,由此得到局部介数中心度的大小.在步12至步13中,首先初始化s到所有节点的点对依赖.然后在步14到步18中,依次取出队列S中的节点,更新其前置节点的点对依赖.其中,s到其余节点且经过v的点对依赖可以根据w得到[17],即δ[]v←δ[]v+((1+δ[]w)σ[]v)/(σ[]w).这个算法是后续更新过程的介数中心度初始化算法,所以步19到步20是保存点对之间最短路径距离表dG,若两个节点之间的最短路径大于K(包括不可达的情形),则这两个点的距离不会被保存.5动态多维网络局部介数中心度更新5.1局部可达更新点对集合犃犝犛犓(狏,狑)局部介数中心度的计算效率主要取决于需要计算最短路径的点对数量.所以加快更新算法的关键在于有效地对一定不会因维度边的插入或删除而改变其最短路径的点对进行过滤.首先,利用图的可达性对这样的节点对进行过滤.针对局部介数中心度更新,利用可达性过滤后获得的点对集合,称为局部可达更新点对集合:定义4.在动态多维网络G中,若插入或者删除维度边(v,w,d),K为常数,则将图G上所有不经过点w即可在K-1步内到达v的节点集合称为局部更新源节点集合VKv即可在K-1步内到达的节点集合称为局部更新目的节点集合VK示为AUSK(v,w)={(s,t)|s∈VKdG(s,v)+1+dG(w,t)K}.易证明,只有在局部可达更新点对集合内的点对的最短路径才可能发生改变.显然AUSK(v,w)中的元素越少,需要计算最短路径的点对就越少,更新效率也就越高.这是本文所述算法的第一步:利用可达性过滤剪枝.5.2动态多维网络局部介数中心度更新框架在插入或删除维度边两种情形下的多维网络局部介数中心度更新算法所用的框架相同,但剪枝策略有所不同.算法2.多维动态网络局部介数中心度更新框架.输入:G=(V,E,L),G,ω,K,插入/删除(v,w,d)输出:CK1.获取局部可达更新点对集合AUSK(v,w);2.FOR(s,t)∈AUSK(v,w)3.IF插入/删除维度后s到t最短路径不变THEN4.CONTINUE;5.ELSEIF插入/删除维度后dG(s,t)>KTHEN6.从CK7.ELSE8.从CK9.在CK10.RETURNCK算法2是本文所提出的局部介数中心度的更新框架.这一更新框架的关键是判断st的最短路径是否会改变.我们希望剪枝策略可以用较小的代价来过滤掉尽可能多的最短路径不变的点对.接下来,我们分别讨论插入维度和删除维度两种情形下的剪枝判断策略.5.3插入维度边情形下的更新算法在介绍这部分算法之前,需要引入最短路径子路径最短引理.Page6引理1.给定一个图G=(V,E),p=〈v0,v1,…,vk〉表示从v0到vk的最短路径.对于任意的i和j,0ijk,若pij=〈vi,vi+1,…,vj〉表示最短路径p中从点vi到vj的子路径,则pij必然是从点vi到vj的最短路径.任何点对s到t之间的最短路径如果会随着维度边(v,w,d)的更新而改变,则这条维度边必然在s到t的最短路径上,即满足dG(s,v)+1+dG(w,t)dG(s,t).基于这个判断,可以利用子路径最短引理,分别对插入维度边或删除维度边的情形设计不同的剪枝策略.这是本文所提出的更新算法的步2:利用子路径最短引理过滤剪枝.在多维网络中插入维度边(v,w,d)后的介数中心度更新算法见算法3.这里需要指出的是,通常我们在一个多维网络中插入一条新的维度边时,仅仅研究网络中已存在的两个节点之间关系的增加对网络中所有节点的介数中心度的影响,而不会引入新的节点.对任意点对(s,t)∈AUSK,已知点对之间的最短距离表dG,则有5种情况:(1)若dG(s,v)+1+dG(w,t)>dG(s,t),则s到t之间的最短路径一定不会经过边(v,w,d),不会因为插入维度边而改变两点之间的最短路径,对应算法3的步4~步5.(2)若s到t在插入维度边(v,w,d)之前K步不可达.则当插入维度边(v,w,d)后,s到t的最短路径为sv→wt,此时需要更新介数中心度,对应算法3的步7~步9.(3)若dG(s,v)+1+dG(w,t)=dG(s,t),且s到t之间只有最短路径sv→wt,则对于s到t最短路径上某节点vi的点对依赖δ(s,t|vi)=σ(s,t|vi)/σ(s,t)比值并不会发生变化,因此不需要更新介数中心度.对应算法3的步11~步13.(4)若dG(s,v)+1+dG(w,t)=dG(s,t),且除了sv→wt外还有别的最短路径,则s到t最短路径上一点vi的点对依赖δ(s,t|vi)值改变,需要更新介数中心度.对应算法3的步20~步24.(5)若dG(s,v)+1+dG(w,t)<dG(s,t),则(v,w,d)插入到图中后,s与t之间的最短路径变为sv→wt,需要更新介数中心度,对应算法3的步17~步19.算法3.局部介数中心度更新算法(增加维度边).输入:G,ω,K,CK输出:CK1.获取局部可达更新点对集合AUSK(v,w)2.ω(v,w)←ω(v,w)+1;3.FOR(s,t)∈AUSK(v,w)DO4.IFdG(s,t)<dG(s,v)+1+dG(w,t)THEN5.跳到步3;6.ELSEIFdG(s,t)>KTHEN7.获取σ(s,v),σ(s,v|vi),σ(w,t),σ(w,t|vi);8.FORvi∈VDO9.CK10.ELSE11.获取σ(s,t),σ(s,t|vi);12.IFω(v,w)>1且st都经过(v,w)THEN13.跳到步3;14.FORvi∈VDO15.CK16.获取σ(s,v),σ(s,v|vi),σ(w,t),σ(w,t|vi);17.IFdG(s,t)>dG(s,v)+1+dG(w,t)THEN18.FORvi∈VDO19.CK20.ELSE21.σ(s,t)←σ(s,t)+σ(s,v)·σ(w,t);22.FORvi∈VDO23.σ(s,t|vi)←σ(s,t|vi)+σ(s,v|vi)·σ(w,t)+24.CK25.将(v,w,d)插入G,更新dG值;26.RETURNCK上述分析结果给我们提供了利用子路径最短引理进一步过滤点对的方法,从而可以使更新效率获得更大提升.图4(a)是一个多维网络,实线表示维度d1,虚线表示维度d2,在图中插入维度边(v4,v6,d2)后,其对应的一维映射图维度在图4(b)中显示.当K=2时,局部可达更新点对集合AUSK(v4,v6)={(v1,v6),(v2,v6),(v3,v6),(v4,v2),(v4,v5),(v4,v6),(v4,v7)}.Page7若考虑v2到v6点的最短路径,由于dG(v2,v6)=1,而dG(v2,v4)=1,dG(v2,v4)+1+dG(v6,v6)=2,此时v2到v6点的最短路径并不走(v4,v6)边,也就不会受到更新的影响.若考虑点v3到v6的最短路径,由于v3到v6之间的最短路径即为v3→v4→v6,此时这条路径上的点v4的介数中心度并不会随着(v4,v6)边的权值增加而增加,所以v3到v6之间的最短路径不变.5.4删除维度边情形下的更新算法在多维网络G中删除维度边(v,w,d)后的介数中心度更新算法见算法4.这里需要注意,在网络的维度边进行删除时,可能会产生孤立的节点.对任意点对(s,t)∈AUSK,已知点对之间的最短距离dG,共有5种情况:(1)若dG(s,v)+1+dG(w,t)>dG(s,t),则s到t之间的最短路径不会因为删除维度边而改变.对应算法4步3、4.(2)若dG(s,v)+1+dG(w,t)=dG(s,t),s到t之间只有最短路径sv→wt,且删除维度边之前ω(v,w)>1时,对最短路径上的任意点vi,其点对依赖δ(s,t|vi)不变,则不需要更新,对应算法4步7、8.(3)若dG(s,v)+1+dG(w,t)=dG(s,t),s到t之间只有最短路径sv→wt,且删维度边之前ω(v,w)=1,则需要重新寻找s到t的最短路径.对应算法4第17步.如果不可以K步到达,则仅删除原有的点对依赖,对应算法4步9、10,否则需要删除原有的点对依赖并加入新的点对依赖,对应算法4步9、10及步18~21.(4)若dG(s,v)+1+dG(w,t)=dG(s,t),s到t之间还有其他最短路径,则对应算法4步9~15.(5)若v和w之间仅存在一条维度边,且节点v或w不再与其余任何节点之间存在相连的边,那么删除该维度边后则会产生孤立的节点.由于对一个节点介数中心度的计算要求该节点处于某个最短路径的内部,所以在删除操作前,边(v,w,d)不会对网络中任何节点的介数中心度产生贡献,因而删除操作也就不会对介数中心度的值产生影响,此时不需要进行更新.算法4.局部介数中心度更新算法(删除维度边).输入:G,ω,K,CK输出:CK1.获取局部可达更新点对集合AUSK(v,w)2.FOR(s,t)∈AUSK(v,w)DO3.IFdG(s,t)<dG(s,v)+1+dG(w,t)THEN4.跳到步2;5.ELSE6.获取σ(s,t),σ(s,t|vi),σ(s,v),σ(s,v|vi),7.IFω(v,w)>1且8.跳到步2;9.FORvi∈VDO10.CK11.IFst中有一部分不经过(v,w)THEN12.σ(s,t)←σ(s,t)-σ(s,v)·σ(w,t)13.FORvi∈VDO14.σ(s,t|vi)←σ(s,t|vi)-(σ(s,v|vi)·σ(w,t)+15.CK16.ELSE17.临时删除边(v,w)后,采用BFS策略,找到从s18.IFs到t的最短路径K步可达THEN19.获得此时的σ(s,t|vi)和σ(s,t)20.FORvi∈VDO21.CK22.将(v,w,d)从G中删除,更新dG和ω(v,w);23.RETURNCK图5是将(v1,v2,d1)删除后的多维网络及对应的一维映射图,当K=2时,有AUSK(v1,v2)={(v1,v2),(v1,v4),(v1,v5),(v1,v6),(v4,v2)}.若考虑v1和v6,由于删边之前v1到v6之间的最短路径有3条,且其中一条不经过(v1,v2),则需要更新路径上点的介数中心度.若考虑点对v1和v5,由于删边之前v1到v5之间的最短路径只有v1→v2→v3,介数中心度不受影响,不需要更新介数中心度.5.5算法分析5.5.1空间复杂度分析在动态网络计算过程中,需要维护多维网络G和对应的一维映射网络G,需要消耗空间复杂度为O(|V|+|E|).为了支持更新操作,需要保存点对距离表dG.Page8点对距离表只保存可在K步之内到达的节点对及其距离.假设平均每个节点在K步之内可达λ个节点(0λ|V|),则dG的空间复杂度为O(λ|V|).λ值与K的大小和图的稀疏性都有关系.K越大,λ越大;图越稠密,λ越大.在最坏情形下,其空间复杂度可能会接近O(|V|2).对于稀疏,且最长距离约束K较小的情形,空间复杂度可以表示为O(λ|V|+|E|).5.5.2时间复杂度分析首先分析局部介数中心度计算的时间复杂度.其初始化过程时间复杂度为O(|V|2),由于只能遍历K层节点,则设每个节点可以遍历到λ个节点,其计算过程中遍历到的节点数目为O(λ|V|),维护点对距离表dG需要O(|V|2)时间复杂度.则局部介数中心度计算时间复杂度可以表示为O(|V|2).局部介数中心度更新效率主要取决于两步过滤剪枝后需要计算最短路径点对的数量.即取决于可达更新点对集合AUSK(v,w)的大小和利用子路径最短引理剪枝后点对集合大小.寻找AUSK(v,w)的过程需要对图进行遍历,时间复杂度为O(|V|+|E|).若经过第2步剪枝后,需要更新介数中心度的点对数量为η|AUSK(v,w)|,则更新的时间复杂度为O[(1+η|AUSK(v,w)|)·(|V|+|E|)].最坏情形下,在稠密网络且K足够大的情形下,η|AUSK(v,w)|≈|V|(|V|-1)/2,则更新操作的时间复杂度变为O(|V|3+|V|2·|E|).6实验6.1数据描述本文实验采用了4种来自公开网络的多维网络数据进行计算.Query-Log①:Query-Log数据来自美国在线(AOL)搜索引擎的搜索日志.将词作为节点,出现在同一个检索语句中的词看作具有链接关系,并将检索语句的链接排序看作是维度.一共分为3个维度:链接排序1~5作为维度1、6~15作为维度2、链接排序大于等于16作为维度3.WikiElec②:我们从Wikipedia网络的近10万次投票历史记录中抽取的数据.节点代表投票者,节点之间的边代表用户A对用户B投票,其中按照投票态度分为赞同、中立、反对3个维度.DBLP_C③:DBLP_C是从DBLP数据库中抽取的共同发表在ICDM、VLDB、SIGMOD、CIKM四个会议上的作者而形成的四维度网络.图中的节点代表作者,A到B的一条维度边代表A与B在某个会议上共同发表过文章.DBLP_Y:DBLP_Y是从DBLP数据库中抽取2001年到2004年这4年时间中共同发表论文作者的协作网络.以不同年份作为不同维度,组成多维网络.其中节点为作者,A到B的一条维度边代表A与B在某一年共同发表过论文.6.2确定合适的犓值计算局部介数中心度的一个重要问题是如何选择合适的K值进行计算.因此本节将探究不同K值的选择对介数中心度计算的影响,并为更新计算选择合适的K值.使用局部介数中心度的优势除了能够提高计算效率外,还可以尽量减少由于长路径和多维网络语义带来的误差.图6显示了实验中采用的几个真实多维网络的距离累积概率分布.可以看出,在WikiElec、Query-Log、DBLP_C数据集上都可以在3、4步内到达网络中90%节点.对DBLP_Y数据集,K=8或者9时所计算的是近似全局重要性.这与我们希望获取节点的局部重要性的初衷并不相符.为了衡量合适K值与网络局部属性之间的关系,需要定义一个指标来衡量K步范围内节点的紧密程度.我们针对多维网络,定义平均局部集聚系数来衡量图中K步范围内子图的集聚性:定义5.在多维网络G=(V,E,L)上,任意节点v,其在K步内可以遍历到的节点集合表示为SK(v),则该点的局部集聚系数表示为CK(v)=其中{(vi,vj)|vi,vj∈SK(v)∧(vi,vj)∈E}表示所①②③Page9有可以在K步内遍历到的边集合.定义6.在多维网络G=(V,E,L)上,CK(v)表示任意节点v的局部集聚系数,则该多维网络的平均局部集聚系数为图7是在真实数据集上K值与平均集聚系数之间的关系.K=1,即只考虑节点的邻居节点,图中的平均局部集聚系数最大.但是我们为了计算介数中心度,要求路径上节点至少要大于3个,所以K2时才是有意义的.可以发现,WikiElec和DBLP_C数据集上平均局部集聚系数在K=3时趋于稳定,而DBLP_Y和Query-log数据集在K=5时趋于稳定.我们发现大多数数据集仅仅在K=1时具有最大的集聚性,而从K=2开始,平均集聚系数出现了明显的下降,此后,随着K值的增大,聚集性虽有变化,但都没有首次那么明显了.因此我们发现,网络中节点之间的密切联系在其局部的邻近关系中能够得到较为充分的体现,因而也说明了本文在研究介图83种模拟网络中K与距离分布和计算效率的关系图7真实多维网络K值与平均集聚系数的关系数中心度的计算时考虑局部性是一种合理的做法.K值的选择还与局部介数中心度计算效率密切相关.我们引入3种模拟网络模型:Erdos-Renyi(ER)模型、Small-World(SW)模型和Barabsi-Albert(BA)模型.设定网络的维度为6,根据上述3种模型随机生成维度边,设置节点数为1000、3000、5000,限定SW网络的重连系数为0.2.图8(a),(c),(e)展示了在这3种模拟网络模型中K值与距离累积概率分布的关系.相较于真实数Page10据的距离累积概率分布,模拟数据数据中的分布更加分散,点对之间的平均距离更大.这3种网络大概在5、6步内可以遍历到网络中80%以上的节点.图8(b),(d),(f)展示了这3种模拟网络模型中K与多维网络局部介数中心度算法K-MLBC计算效率之间的关系.从图中可观察到,局部介数中心度计算效率会随着K的增加而降低,最终会趋于稳定.其中ER网络上的局部介数中心度计算在K=4时达到稳定,BA网络的计算在K=3时时间稳定.而由于较小的重连系数,SW网络在K>7时才保持计算时间的稳定.经过以上讨论,综合效率和效果两方面的考虑,我们认为选择K=2或者3是较为合理的.6.3真实数据集局部介数中心度计算精确度本节对论文所提动态多维网络局部介数中心度的计算精确度进行评测.图9显示了K-MLBC算法在WikiElec数据集上,随K值不断增加,网络中所有节点的局部介数中心度的计算精确度.由于介数中心度是衡量节点重要性的关键指标,因此在评测计算结果的精确度时,单纯从计算结果的数值上进行比较意义不大.根据“节点重要性”这一关键要素,通过比较节点在全局介数中心度下的排序与不同K值下局部介数中心度下的排序值来衡量局部介数中心度的精确度.我们首先将计算结果进行归一化,得到不同局部约束下节点介数中心度大小排序,然后将这些结果分别与全局计算结果的排序进行比较,考察较全局真实的结果而言,局部约束下每个节点重要性排名的准确程度.在不同K取值下,所有与真实情况下具有同等重要程度的节点所占的比例即为节点介数中心度的精确度.图9WikiElec网络中计算精确度与K取值的变化关系从图9中,我们可以看到,当K=2时,K-MLBC算法所得到的介数中心度的计算结果已经达到了90%的精确度,而当K>4时,算法的精确度已经非常接近于1了.这说明我们对K=2的取值是非常合理的,尽管计算中只用到了局部的路径来计算介数中心度,但是能够得到非常准确的结果.也就是说,通过本文所提局部介数中心度算法得到的节点重要性与实际结果的吻合度很高,是一种非常有效的计算网络中节点介数中心度的方法.6.4真实数据集局部介数中心度更新效率本节我们对本文所提动态多维网络局部介数中心度的更新算法效率进行评测.图10显示了本文所提到的4种真实多维网络在插入维度边的情形下局部介数中心度的更新效率.如图10(a)所示,WikiElec数据集在K=2时的平均加速率为13.59倍.在前30次的插入维度边的更新中,MTSP平均耗时2552ms,K-MLBC平均耗时31829ms,平均加速率为124.95倍,要远比100次插入的平均加速率高.这是因为随着边的插入,小的连通区域被组合为一个大的连通区域,从而每次更新都需要重新计算更多点对最短路径.图10(b)是Query-Log的实验结果.相较于WikiElec数据集,Qeury-Log上的更新速率更稳定.这是由于Query-Log平均节点度数高,且节点之间的平均距离近,所以更新算法从一开始遍历到的节点数量就较多.图10(c)是DBLP_C的实验结果,可以看出从第70次更新开始,K-MLBC算法的计算时间陡然上升,但更新算法MTSP相对稳定.这是因为K-MLBC需要重新计算所有节点与其K步之内节点的最短路径,网络越稠密,这一过程效率就越低.更新算法MTSP通过两步过滤剪枝很好的使需要计算的点对数量趋于稳定.图10(d)是DBLP_Y上的实验结果,100次更新的平均加速率达到8711倍.从图6可知,DBLP_Y上的有效最短路径较长,这意味着在K=2范围内,只有很少的点会被更新到.这一情况有利于控制需要更新介数中心度的点对的数量,所以在这一数据集上的更新效果尤为显著.图11(a)和11(b)分别是WikiElec和Query-Log数据集在删除维度边的情形下的局部介数中心度更新的实验结果.在100次删除维度边的操作中,WikiElec的平均更新加速率为7.18,Query-Log为10.24.这两个数据集上的加速速率较为相近,并且较为稳定.图11(c)是DBLP_C的实验结果,虽然从图上来看,K-MLBC算法计算时间波动较大,实际上其变化的绝对时间只有几十毫秒,是计算过程中的正常情况.100次删除维度边操作的平均更新加速率为478倍.Page11图10真实数据集插入维度边时的更新效率对比(K=2)图11真实数据集删除维度边时的更新效率对比(K=2)图11(d)是DBLP_Y上的实验结果,其平均加速率为4015倍.与加边情形类似,由于点对之间距离较远,所以当K=2时,由于参与到更新算法MTSP中的点对较少,因此算法加速性能非常好.Page127总结针对动态多维网络节点的局部介数中心度计算问题,本文首先提出了多维网络映射模型,通过将多维网络转化为一维网络来方便利用已有的计算方法在多维网络中进行计算.其次,本文提出了针对多维网络节点重要性度量的局部介数中心度算法.并在实验部分对K值与网络拓扑属性和计算效率之间的关系进行了探讨.最后,本文提出了针对全动态多维网络的两步过滤剪枝局部介数中心度更新算法.该算法利用图可达性和最短路径子路径引理分两步对不会因为维度边的插入和删除而改变局部介数中心度的点对进行过滤,使更新效率得到明显的提高.真实数据集上的对比实验结果显示了更新算法的有效性.由于全动态多维网络上的介数中心度更新算法的研究尚处于初始阶段,在未来的研究工作中,我们拟对本文研究工作进行进一步的扩展和探索.首先,可进一步增强本文所提出的多维网络模型,采用更为灵活的映射方式来有效区分不同的语义信息.具体而言,我们一方面需要不断寻找更具普适性的模型来将多维网络计算统一到一维网络下,使得模型能够适用于某些特定应用场合.另一方面,由于映射的过程本身就丢失了多维网络的一些信息,因此还需要考虑设计只针对多维网络的节点度量方法来避免维度信息的损失.其次,我们还可以针对具有特定结构的图类型,例如幂律图,考察本文所提出的多维网络介数中心度的更新算法是否能够在具有特定结构特性的网络中得到较低的更新操作的复杂度,同时也可以验证本文所提出的更新框架对于其他图类型的适应性.
