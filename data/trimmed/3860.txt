Page1基于时序活动逻辑的复杂系统多Agent动态协作模型蒋伟进1),3),4)钟珞4)张莲梅1),2)史德嘉1),3)1)(国防科学技术大学计算机学院长沙410073)2)(武汉大学电气工程学院武汉430072)3)(湖南商学院计算机与信息工程学院长沙410205)4)(武汉理工大学计算机科学与技术学院武汉430070)摘要动态复杂问题求解是人工智能和复杂自适应系统理论与应用重要研究领域,多Agent动态协作是研究热点和难点之一,如何将问题与任务切分有待进一步地研究.借鉴组织学思想将自适应系统中的自主运行单元抽象为Agent,把复杂自适应系统视为多Agent系统组织,从时间和状态角度对复杂动态系统的行为进行描述,提出了基于时序活动逻辑的多Agent系统动态协作任务求解自适应机制和构造模型,建立了用于协作推理的语义规则、授权规则和行为规则,通过在中国科学院智能信息处理重点实验室开发的MAGE等平台上多方实验和仿真测试,验证了方法的可行性和有效性.关键词复杂自适应系统;多Agent系统;时序逻辑;动态协作;任务求解1引言近年来随着Web和WWW技术的迅猛发展,出现了越来越多的基于计算技术和通信技术的大型复杂系统.这些复杂系统的典型特点是不仅所涉及的问题领域非常庞大,其内部之间关系非常复杂不便监测,并且这类大型复杂系统的内部组成构件之间的关系是随时间动态变化的.这就要求系统的组成结构与任务求解模型能够适应动态环境的改变.鉴于动态性这一新问题的出现,使得原来的协同问题求解的许多理论和方法已不再适用,所以,需要发现和设计新的动态协作问题解决办法.目前,已有许多研究人员采用多Agent系统(Multi-AgentSystem,MAS)来创建协作任务求解系统,已经开发出一些面向理论或面向实际的协作任务求解模型.如Hewitt[1]在给出分布式人工智能的信息开放系统(OpenInformationSystem,OIS)定义时提出,要用数学语言来创建OIS的并发系统科学的基础和社会学的基础.其它还有Werner[2]创建的关于协助Agent通信和社会结构的统一理论;Bond[3]通过承诺建立的Agent协同计算模型;Brazier等人[4]提出的使用组合形式化框架模型化多Agent系统;Wooldridge和Jennings[5]根据Jen-nings提出的两个相呼应的理念———约定和承诺而建立的描述整个协作问题求解过程的一个模型.Sandholm[6]设计和实现了一种基于边际成本的MAScontractnet协作协议.Rosenschein等人[7]提出了一个基于权力与承诺的多Agent系统形式化协商模型.李晶[8]结合描述Agent思维状态的协商推理和Agent能力的VSK-AF逻辑[9],建立了具有能力和思维的协同公理体系MAS模型,并引入“权力”、“授权”和“能力”等概念描述系统中Agent的动作选择策略.文献[10]研究了一种具有合作与竞争的多Agent系统之间的关系,构建了具有承诺与学习能力的MAS动态协作模型.罗杰文和史忠植等人[11]利用动态描述逻辑的统一的形式化框架,建立了基于动态描述逻辑的多Agent协作模型,同时从静态的知识表示与推理和动态的运行与变化两个方面来刻画Agent的心智状态和协作过程,探讨了Agent信念、行为能力、目标和规划等心智要素的表示、推理与修改以及联合目标的形成、多目标的规划问题.文献[12]将知识表述和推理系统的描述性结构[13]与任务逻辑的任务语义[14]结合起来,构造了一个可以描述具体属性的、可判定的任务逻辑系统,给出了系统的结构、语法、语义和推理规则.从理论上讲,采用任务逻辑描述多Agent之间的高层交互是一个好的选择方式.但是,这种任务逻辑系统却有一个显著的缺点———即它是不可判定的或仅是半可判定的,因为以它为基础建立应用系统时将不能保证推理的过程都会在限定的时间段内完成.当然在现有的问题逻辑规则下,我们可以采用命题逻辑结构来代替一阶谓词逻辑结构[15]的方式,能够让问题逻辑判定,但这样可能会导致任务逻辑系统的表述能力减弱,以致不能够满足应用系统的需要.文献[16]针对这个问题,在文献[12]的基础上给予了完善,证明了任务的断定可完成性是可判定的,同时说明了描述任务逻辑系统的可判定性、可靠性和完备性.它克服了现有的任务逻辑的不足,能够提供较强的表达能力和可判定的推理服务,在促进任务逻辑真正走向实用方面具有一定的意义,也为其应用奠定了坚实的理论基础.苏金树等人[17]实现了多Agent系统中知识、信念和肯定性逻辑与具有并发动态属性的行为之间的很好结合,提出了多Agent系统中并发动态知识、信念和肯定性逻辑.舒新峰等人[18]为采用定理证明的方法对并发及交互式系统进行验证,研究了有穷论域下有穷时间一阶投影时序逻辑(projectiontemporallogic)的一个完备公理系统.常亮等人[19]借鉴Pratt关于命题动态逻辑的相关研究,对动态描述逻辑中动作的语义重新进行定义,将每个动作解释为由关于可能世界的序列组成的集合;并在动态描述逻辑中引入动作过程断言,用来对动作的执行过程加以刻画,提出一类扩展的动态描述逻辑EDDL(X).EDDL(X)可以从动作执行过程和动作执行结果两个方面对动作进行全面的刻画和推理,为语义Web服务的建模和推理提供了进一步的逻辑支持.由于现有任务描述逻辑任务的定义局限于抽象的、逻辑的定义,没有将具体属性和任务联系起来,尤其是动态复杂问题的大量出现,使得问题求解的过程必然会受到时间的约束[20].所以,为了更好地Page3描述复杂系统动态协作问题求解过程,就需要描述逻辑必须具有时间的特征.在此我们提出引入时序算子和采用时序活动逻辑来描述系统的时态特征、构建动态协作任务问题求解模型.该模型在感知处理、选择动作、动作执行等阶段不引入时间特征,在协商和执行时才加入时间特征,同时还规定时间经过处理后是线序、离散的,在时序逻辑中增加时序算子.在特殊情况下,Agent执行行为不受时间约束,如采用线性时序逻辑方式来描述权力随时间的动态变化.本文主要讨论基于时序逻辑的多Agent系统商议模型以及相应推理规则和授权规则及其语义框架.2问题求解时序活动逻辑模型2.1TL(TemporalLogic)模型基于时序活动逻辑[21]的动态协作MAS简称为TL系统,包括行为集合、时序结构[16-18]、Agents集、所处环境、Agents财富、商议行为等组成部分.定义1.环境为一个多元组:Env=〈E,S,W,Vis1,…,Visn,acce1,…,accen,Arbitrage,τg,eo,so〉.其中,S={s0,s1,…}为Agents所处系统的环境;E={e0,e1,…}为所处外部环境;Visi:E→2E为Agenti的外部环境状况划分映射;W={w1,w2,…}为任务集合;Arbitrage:Message×AS→Message为仲裁映射;accei:S→2E为Agenti的Agents环境状态划分映射;τg:E×S×Act(Arbitrage(msg))→2E×S为多重环境状态的转换映射,其中msg∈Message,Act:Message→Actionsn代表从动作选择状态通信过程中获得每个Agent的动作行为,Actionsn为n个Actions的一个笛卡儿乘积;Act(Aribitrage(msg))代表从通过裁决的动作选择状态信息中获得的所有Agent的行为,其中Actions是一个行为集,e0:e0∈E为外部环境的初态,s0:s0∈S为Agents系统环境初态.定义2.商议行为是:N=〈Ags,Isu,Vo,O,Ans,Time,Thread,Protocol〉[19-22].其中,Ags{Ag1,…,Agn};Agi为Agenti;Isu={issue}代表issue集合;Vo为由O裁决的Agent的全部有效值集;O为Agent的知识范畴;Ans=Vo×Message,表示Agent回应其它Agent的协商提议,是相关约定的有效值集的笛卡儿乘积,包括动作选择状态等信息,其中VA=VO∪{REJECT,ACCEPT,QUIT},REJECT和ACCEPT分别表示拒绝、接受对方提议,QUIT代表退出双方的协商商议;Message为动作状态信息;Agent经过在商议过程中应用Mes-sage代表在发生冲突时需要对自身行为的修订提议,再把修改了的message发送到其它的Agent;Time={time1,time2,time3,…,timen};Thread={Threadijn},Threadijn代表Agi与Agi对issue的商议情况.Threadijn=(On(isun,(ans(s1,h1,time1)ans(s2,h2,time2)…))),其中sk,hk∈{i,j},timek∈Time,ans(sk,hk,timek)∈Ans,whenk=1(mod2)thensk=iandhk==j,otherwise,sk=jandhk=i,为商议两方相互发送的交替序列建议;Protocol:采用KQML[7]给出的商议协议.定义3.TL系统为一个多元组S=〈NS,AS,Actions,Env,Agents,N,PoS,SR,T〉,其中,NS是协商方法集合;AS为仲裁方法集合;Actions为动作集合;Env为系统环境,包括内部外部环境;Agents={Ag1,…,Agm}为所有Agents集合;N为协作行为;SR为系统约定的社会准则;PoS∈Z为整个系统的资源集合;SR是系统规定的社会秩序;T为时序结构[23].TL系统的所有状态的集合G={ε0,ε1,…}为E×S×L1×…×Ln的一个子集.记S为全部TL系统构成的集合,简称TL系统类.定义4.G上出现的一个有穷序列ε0,ε1,…代表S=〈NS,AS,Actions,Env,Agents,N,PoS,SR,T〉的一次运行.ε0=(e0,s0,τ1(l0①初态τn(l0②对于所有的u,若εu=(eu,su,lu1,…,lun),并且εu+1=(eu+1,su+1,lnu+1),则(eu+1,su+1)∈τg(eu,tu,auki,…,auki)且liu+1=τi(lui,seei(Visi(eu)),feeli(accei(tu))),其中auki=SelectA-Pi(lui,Abilityi,Poweri),表示和其它Agent选择的行为动作没有发生冲突.定义5.对于一个给定的S=〈Actions,NS,AS,Env,Agents,N,PoS,SR,T〉[24],若ε∈Gs,当且仅当ε出现在S的执行过程中,那么我们称GsG为根据S产生的可到达的全局状态集合.该模型的运行模式为:除了在执行行为的Agents,其余所有的Agents观察环境都同步;并根据自己即时的权力、能力和局部状态选择一个动作,这样就有可能会出现以下3种情况.(1)某些Agents此时没有权力和能力去执行任何动作,将导致它无法做任何事,必须等到下一时刻Page4到来时再重新考察环境,执行选择动作.(2)Agents选择动作,在没有冲突的情况下,动作可以确定和执行.而与文献[1]不同的是,此时的执行动作需要考虑时间问题,这样可能会花费数个单位时间去执行其中某个动作.(3)Agents所选择动作在有冲突的情况下进行协商,协商有3种结果:①协商失效,等到下一时段重新审视环境,继续选择动作;②协商达成,按协商的结果执行动作,环境状态转移;③协商持续进行,Agents在下一时段重新审视环境.我们通过引入Agent的协商描述语言LTL来表示MAS协作的TL系统的信息特征.LTL语言由两方面内容构成.在感知处理方面使用多模态VSK-AF逻辑描述语言LVSK-AF各类客观现象,同时还能表示系统中Agent拥有的信息或感知获得的相关信息;在选择动作、确定动作和协商、执行动作方面使用LTN来表示Agent按照时序逻辑描述任务执行的权力Right(Agi,)、能力Capability(Agi,)、动作Exu(Agi,,w)以及多Agent之间没有限定的授权NR-Entitle(Agj,Agi,)、授权转移、剥夺Agent执行某一动作a的权力Deprive(Agi,Agj,)、对动作的选择Select(Agi,,w)、协作行为Negotiation(Agts,,w),在执行任务时行为发生冲突Collision(,w).此外,我们还在语言LTL的描述规则中引入5个时序算子(□(将永远),◇(将会有),○(下一状态),◆(过去有),U(直到).定义6.给定一个原子式集合0,一个动作调用词语多元组集合Π,对LTL的复合式描述为(1)True,False∈.0.(2)如果φ1,φ2∈,那么φ1∈,φ1∧φ2∈,○φ1∈,◆φ1∈,□φ1∈,◇φ1∈,Uφ2∈.(3)如果φ∈且π∈Π,那么[π]φ∈,〈π〉φ∈.其中,[π]φ表示Agent执行过程中约定的动作会使得φ为True;〈π〉φ表示Agent执行约定的动作时有可能使得φ为True.2.2面向任务求解BDIAgent结构下面在时序活动逻辑的基础上,提出基于活动的BDIAgent.图1为基于活动的任务求解Agent的结构.它由任务分析、时序活动控制、执行状态校核、活动计划执行、执行结果评估及知识库6个部分构成.其主要组成部分的具体作用如下:任务分析.通过对给定环境(包括外部环境及内部环境)及任务的分析,生成可执行的计划及计划执行的行为准则和相应的时序活动逻辑关系表.执行结果评估.检测预期目标与执行结果的一致性,若为真,则输出执行结果;否则,反馈任务分析继续求解,直到得到与预期目标一致的结果或者任务求解过程失败.活动计划执行.执行具体的活动计划,实现任知识库.用来存储任务求解过程中积累的经验务的求解.的部件,体现了主体的学习能力.2.2.1任务分析任务分析包括信念、愿望及意图的形成过程.为述说方便,下面先给出动态协作任务求解过程中的活动定义,并在此基础上,描述本研究中信念、愿望及意图的形成过程[19-22].(1)动态协作任务求解中的活动对于动态协作任务求解而言,任务求解的全过程称为活动.一个活动由若干个行为序列组成.定义7.给定一个任务T,将其执行过程称为一个活动h,h={α1,α2,…,αn},αi∈h,那么称αi为活动h的一个动作,每一个活动h都通过若干个动作序列构成.这些动作序列都有一定的次序,A-gent的任务求解过程按照这些次序来执行相应的动作,从而完成整个问题的求解.每一个活动hi(1in)可由若干个子活动组成,如果不能够再划分,那么称其为一个基本(原子)活动;同理对αi∈h,一个活动序列也可以划分为若干个子序列,如果不能再划分,那么称其为一个基本(或者原子)动作.(2)信念形成Agent的信念是指Agent通过所掌握的所有相关信息(或者是关于自身的信息)所形成的对周围环Page5境(或自身)的认识称为信念.对于面向任务求解的Agent实体而言,其信念不仅包括对环境和自身的认识,而且还包括对相应任务的了解和熟悉,这种认识表现在形成可能实现任务求解目标的全部可能的活动集合.Agent实体信念的具体形成过程为:①首先对任务T进行求解可行性分析,如果该任务可解,就建立一个Agenta的任务求解的预期实现目标gpre.②Analyse(T)→characterT∧Observe(E)→③C_Analyse(characterT,knowledgeE)→Hp.定义8.如果一个活动集合Hp={h1,h2,…,hn},hi∈Hp(1in)都存在AgentGuess(hi,gpre),那么称活动集合Hp是关于Agent的信念集合belief.Guess(hi,gpre)表示Agent的一种心智状态,即Agent推理和预测认为通过活动hi可能实现预定的目标gpre.而对于hi∈Hp(1in),则不一定能够完成预定的目标gpre,需要满足相应条件时才可以实现gpre[20].(3)愿望形成愿望是指可以实现的信念集合,而对于动态协作任务求解而言,愿望是指在当前环境下有可能实现的意图.环境是动态变化的,因此需要对原有关于环境的认识进行修正[21],具体过程为knowledgeE.①Modify(knowledgeE,knowledgeE)→knowledgeEa.②Filter(Belief,knowledgeEn)→Hp.定义9.对于活动集合Hp={h1,h2,…,hn},hi∈Hp(1in),都有AgentBelieve(hi,gpre),则称活动集合Hp为该Agent的信念集合Desire.同理,Believe(hi,gpre)表示Agent相信在当前环境下通过活动hi能够实现预定目标gpre.对于组成愿望集合中的hi∈Hp(1in),一定是在当前环境下能够实现预定目标gpre的活动,但是任意两个活动之间可能是相互矛盾的[22].(4)意图形成意图是指可实现的愿望.在动态协作任务求解中,从愿望集合中选择出最优的活动所形成的集合就是意图.因此,Agent所找出的能够满足的愿望子集,就构成了目标集.其具体形成过程为:①Analyse(a)→charactera.对任务执行体a进行分析Analyse(a),形成执行体的特征集合charactera.②Filter(desire,charactera)→H体的特征charactera,对愿望集合desire进行优选filter(desire→charactera),选择出最适合该任务执行体执行的活动构成集合H个活动,也可能存在唯一的活动.定义10.对于活动集合Hpn},hhgpre),则称活动集合Hp为该Agent的集合desire.Confirm(hi,gpre)表示Agent确信通过活动hi一定能够实现预定目标gpre.对于组成愿望集合中的hi∈Hp(1in),一定是在当前环境下最符合该任务执行体特点的活动[22].2.2.2任务执行在Agent所形成的意图集合中,各个活动集合是孤立存在的,并不是一个有机的整体,而且很有可能各个活动集合之间存在着矛盾.为了能够保证A-gent顺利实现预定目标gpre,就必须对意图集合中的活动按时间顺序组成相应的时序活动序列,这个时序活动序列就是Agent的活动计划pa.对于每一个活动h形成了稳态活动βi.由于活动的执行方式有两种,活动计划pa就是由若干个稳态活动按串行关系与并行关系构成的时序活动序列.定义11.对于时序活动序列集合有行动计划Paction={βp1,βp2,…,βpn|βpi,βpj,其中,βαi=(〈tph,tpi〉,hpi,hh该行动计划制定后,任务求解Agent就按所制定的行动计划执行.若任务求解Agent所处的环境是静态的,则按所制定的行动计划就能够实现预期目标gpre.但是,为了更好地保证任务执行过程顺利实现,对组成计划的每个稳态活动必须执行具体的实现目标和评估条件(即行为准则),并依据标准进行验证保证行动计划的顺利实现.另一方面,由于目前的任务都是动态复杂任务,标准集合是随时间变化而不断变化的,这样校核的过程也会随之变化.定义12.活动准则R={(gβi(t),cβi(t))|i∈(1,…,n)},其中gβi(t)为行为计划中βi的具体实现目标,cβi为相应的评估条件,gβi(t)与cβi(t)分别表示它们随时间而变化.依据具体的活动准则行为ri对任务求解Agent活动计划进行校验verify(βi,ri).若?verify(βi,ri)=Page6ture,则实现具体的实现目标,按活动计划继续执行.若?verify(βi,ri)=false,则调整相应的稳态活动adjust(βi,ri)→βi产生新的稳态活动βi.调整行为相当复杂,有时可能影响整个计划,这里不做深入分析,我们将另文专题介绍.2.2.3结果评估任务求解Agent执行活动计划,得到任务求解的结果.理想状态下,由于活动计划Pc的制定与预期目标gpre是相一致的,因此任务求解结果ST应能满足或接近预期目标gpre.但是,由于任务求解的过程是动态变化的,整个求解过程由存在着很多不确定性,因此需要对所产生的结果进行评估,而且通过评估可以找出求得结果与预期目标之间存在的差距.结果评估就是对求得的结果进行一致性校验accord(ST,gpre).若?accord(ST,gpre)=true,则该结果符合预期目标gpre;否则为不符合,那么任务求解过程失败或新的求解过程开始.3MAS动态协作的任务求解3.1共同目标当任务求解Agent产生了协作意愿之后(称为协作发起者),通过通信的方式[25],向其它Agent发出协作意愿请求即require(a,Will(a,gpre)),其中a表示Agent集合中的某个特定求解Agent或某些求解Agent.其它求解Agent收到它的协作请求后,根据自身的情况做出accept(Will(a,gpre))(接受请求)、rejectt(Will(a,gpre))(拒绝请求)或不做回应三种不同的反应.当发出请求的求解Agent收到来自某其它Agent的接受请求应答(称这种Agent为接受者)后,就通过通信机制将自己的预期实现目标gpre传送给接受者.接受者收到发起者的gpre后,进行一致性检查?consistency(ga,ga).若为true,则说明二者的预期实现目标一致(即共同目标,记为gcommon).接受者向发起者发出同意协作即agree(Will(a,gpre)),即此时二者的协作意愿变成现实.当然,在动态协作任务求解过程中,存在多个求解Agent,可能存在一个接受者接受来自多个发起者的请求或它同时向其它Agent也发出协作请求的复杂情况[26-28].3.2任务Agent群组的选择算法定义13.用五元组表示任务Agent的选择算法:〈{Bi},{Pj},So,Co,G〉[29-30].其中Bi是群组用户Agent集合,Pj是从Bi里面选出来的任务Agent集合,So是从Bi里面选出来待定是否成为任务Agent的用户Agent,Co为协同Agent,而G则是等待解决的任务[27-28].同时给出几个元操作(Primitives)[29-30]定义如下:Request(Co,So,G,[date]):是Co要求So参加任务群组,一起执行任务G直到完成.[date]是可选项,若有此参数则表明Co给So回复的时间限制.根据实际情况可以适当加入其它的参数或表达其它的意思;协同申请;群组;务群组;请求;判断是否参与G的任务执行;执行协同任务;Reject(So,Co,G):表示So不同意Co提出的Wait_notice(So,Co,G):表示So通知Co正在Accept(So,Co,G):So通知Co表示愿意参与Accept_affirm(Co,So,G):Co通知So它顺利Add_P(So,Pj):So被加入到Pj中,加入任务Quit_request(So,Co,G):So向Co请求退出任Quit_accept(Co,So,G):Co接受So退出的Callback(Co,So,G):Co回收分配给So的中间算法1.群组选择算法.输入:用户Agent集合Bi,初始条件和待解决的任务G输出:选择任务Agent集合Pj1.若位于Bi中的任务发起者Agentai能独立完成该2.ai给协同AgentCo发一个任务协同解决的请求;3.Add_P(ai,Pi);4.Co根据FSIB从集合Bi中选择一个未被选择过的5.若不能找到合适的So,并且Pi未能完成任务,则任6.Request(Co,So,G,[date]);//Co向So发出协同申请;7.Wait_notice(So,Co,G);//如果在给定的时间内So8.若等待时间超过Request(Co,So,G,[date])中date9.若有接收消息Wait_notice(So,Co,G),则转步6;10.若有接收消息Accept(So,Co,G),则做Accept_11.如果G还不能由Pj完成,则转步4;12.Co按照任务分解算法把任务分解,分配子任务未能及时响应Co的申请则返回一个等待回复;的限制,则发出Reject(So,Co,G),转步4;任务,则转步15;用户Agent作为So;务不可解,转步16;进入群组,参与执行协同任务;状态与结果及子任务.affirm(Co,So,G),Add_P(So,Pi);Page7给Pj;13.各任务Agent并发执行各自的子任务;14.如任务Agent执行Quit_request(So,Co,G),但是分配给它的子任务还没完成,那么Co就会给出响应,如果Quit_accept(Co,So,G),那么调用Callback(Co,So,G)回收它的任务状态,返回步4,否则作非正常情况处理;15.Co从各个任务Agent获得执行的结果以合并成最终的结果;16.算法终止.4仿真实验及结果分析为了对本文的任务协作逻辑模型进行有效性验证,我们在MAGE平台上进行了仿真实验.MAGE平台[31]是中国科学院智能信息处理重点实验室开发的一种面向Agent的软件开发、集成和运行环境,其自带了一系列的工具,支持面向Agent的软件开发和系统集成.MAGE平台提供了面向Agent的软件开发模式,以Agent为基本的构件单元,从而可以方便、高效地构建大型应用系统.测试运行环境为:4台双核CPU处理器,Pro-cessorIntelPentiumDCPU3.00GHz;RAM4GBtotal;OSGNU/Linux(kernelrelease2.6);CompilerJava2StandardEditionv.1.6with1024MBJavaVMmemory;MASMAGE.开始,我们设计了一些公式,如φ··=〈π1∪π2〉(〈C1(x)?〉(C2C3)(x)).当检测此类公式φ的可满足性,应用扩展规则对初始划分进行扩展时,将生成相互独立的6个划分.并且保证除此以外没有其它的划分,于是在本系统中同时存在6个推理子任务.图2表示推理过程逐步加速的效果.图2TL多Agent系统智能协作推理加速率接着我们建立了一个本体,其包含47个概念,17个原子动作,50个角色,22362个个体,216659个三元组.使用MAGE计算该本体上的一些常见的推理问题,如个体从属判断(instancechecking)、概念可满足性问题(conceptsatisfiability)、包含性问题(subsumption).最后对协商推理的性能进行统计,如图3所示.图3TL多Agent系统动态协作推理加速率由两个实验测试中都可以看到有一个突出的推理加速过程.第1个实验中,可以并行计算的推理任务的数量上限为6,因此,加速比没有随推理Agent数目的增加而增加.而第2个实验中显示,我们使用4台机器进行测试时,推理性能反而会随着推理Agent的数目增加而略微下降,其影响原因可能有两个:(1)在例2中,不确定的扩展规则被频繁应用,使得大量的分支划分生成.这直接导致大量的内存分配操作,当系统负荷超重时,推理Agent就会迁移到局域网的其它机器上,这又提高了网络开销.(2)大量的分支生成,也会大大增加任务池的同步开销.这个额外的开销与并行执行的推理Agent数目成正比.此外,为了更进一步验证和应用本文模型的有效性,我们还在面向P2P社区的任务协作仿真中,将本文的模型与传统合同网[32](CNM)模型和文献[33]中的动态合同网(DCNM)进行了实验比较.下面首先给出一些实验参数的定义.恶意节点(Agent)参与率[34]:恶意节点参与率就是在协作任务中参与任务的是恶意节点的比率.其中,α为恶意节点参与率,htag为任务协作中的恶意节点,tal为参与协作任务的总Agent数(节点).任务完成效率[35]:其中,β为任务完成效率,SucAmount为完成的子任务数,TotalAmount为协作任务的所有子任务数.在本文任务协作逻辑模型中,我们通过一系列的规则[36]来提高模型在抵制恶意节点以及提高任Page8务完成效率方面的性能,并将本文的模型TCLM-P2P与传统合同网(CNM)和动态合同网(DCNM)进行比较.设计了一个多线程JAVA程序,用来模拟同种环境下各个模型在性能方面的表现情况.其中线程用来模拟各个模型,每一个类型的线程都附有计算功能.实验模拟结果如图4和图5所示.图4是在善意节点300个、恶意节点和预先信任节点各40个的情况下3个模型抵制恶意节点方面的表现.由图4可以看出,本文模型在整体性能上要优于CNM、DCNM,并且在稳定性上也要优于前两种模型,这主要是因为在CNM和DCNM中节点被假设为是完全可信的,并没有相应的规则来抵制恶意节点,导致了协作任务中恶意节点的参与率较高.而我们的TCLM-P2P中,提出了一系列的激励规则来提高可信节点的协作任务参与率,降低恶意节点对协作任务的影响.图5表示的是3个模型在任务完成率方面的比较结果.实验假定在某一P2P网络社区中一次协作任务包含100个子任务.从图5可见,在任务完成效率上,本文模型要优于CNM和DCNM.这主要是因为本文模型通过协作任务奖励实现了激励规则[37],提高了节点参与协作任务的积极性,并且按照一定的规则来选择协作节点,从而达到提高任务完成率的目的.5结论与展望本文借助组织学思想把自适应系统中的自主运行单元抽象为Agent,将复杂的自适应系统当作多Agent组织,从状态和时间角度来描述复杂动态系统的行为,提出了基于时序活动逻辑的多Agent动态协同任务求解的构造模型和自适应机制及其实现方法.在进行目标及任务划分时需要解决的问题是:如何能进行合理分割,而使得在进行协作任务的过程中,MAS之间的协作的复杂度或是通信量降低,从而使得整体的工作性能得到提高.同时,在动态的、开放的复杂环境中,我们希望通过更多的、系统所处环境更为复杂的案例的分析和研究来验证我们工作的有效性.
