Page1面向TTCN-3性能测试的负载生成方法徐珞1),2)吴际1)刘超1)1)(北京航空航天大学计算机学院北京100191)2)(华北计算技术研究所北京100083)摘要TTCN-3(TestingandTestControlNotationversion3)是一种面向黑盒测试的测试描述与实现语言.随着TTCN-3语言的广泛应用,用户对使用TTCN-3进行性能测试的需求日益强烈.然而,TTCN-3语言没有提供有效的负载描述和产生机制.目前,在使用TTCN-3产生性能测试的负载时,通常需要依靠大量的人工编码.该文提出了一种模型驱动方法以更加有效地支持面向TTCN-3的负载生成.在该方法中,负载指标模型用于刻画负载指标及约束关系;负载剖面模型则能够定义指标的取值及指标值随时间变化的情况.基于这些模型,该文提出的算法能够完成从模型到TTCN-3测试系统的自动转换.TTCN-3测试系统可在负载控制点的支持下得以执行,从而模拟出满足模型描述的负载场景.该文通过案例分析验证了上述方法的有效性和所模拟负载场景的准确性.关键词TTCN-3;性能测试;模型驱动测试;负载建模;负载生成1引言TTCN-3(TestingandTestControlNotationversion3)是由欧洲电信标准化协会(ETSI)于2000年制定和推动的测试规范与测试实现标准,并且已被国际电讯联盟(ITU)等国际标准化机构所采纳.经过了十余年的发展,TTCN-3已经被成功应用在通信和软件领域的一致性和功能测试中.各种采用TTCN-3制订的标准测试集也被陆续发布出来.随着TTCN-3的应用日益广泛,用户对使用TTCN-3进行非功能测试的需求也越来越强烈,其中,基于TTCN-3的性能测试已经成为了一个研究热点.性能测试通过加载负载于被测系统(SystemUnderTest,SUT),观察SUT在给定负载下的性能表现,并对各项性能数据进行分析与评估,从而得出对SUT性能的整体评价.为了实现性能测试,如何有效地模拟系统的负载成为了一个关键问题.相关研究表明,性能测试的好坏很大程度上取决于负载被准确理解并真实模拟的程度[1].然而,TTCN-3语言没有提供有效的负载描述和产生机制.目前,在使用TTCN-3定义性能测试的负载时,通常需要测试人员手工编写大量的代码,同时由于TTCN-3语言自身的局限性,某些负载的产生还需要依靠对外部函数的使用[2].这些既增加了测试开发的工作量,影响了测试的效率,也提高了测试代码的复杂度,增加了引入人为错误的风险,使测试系统的质量难以得到保证.另一方面,现有的TTCN-3性能测试研究多集中在对语言的实时性扩展[2-4]、测试系统设计[5-7]和针对特定系统的性能测试[8-10]方面,对负载描述和产生问题的研究相对较少.与传统的性能测试方法相比,基于TTCN-3的性能测试对负载描述和产生方面也有其特殊的需求,主要体现在以下4个方面:(1)在负载建模方面,现有的负载模型多是针对特定类型的SUT(如Web系统、通信设备等),其中的负载指标及指标关系已经固化在负载模型中,难以进行调整和扩展.然而,TTCN-3是一种通用的测试语言,其应用范围和SUT类型是不固定的,因此,面向TTCN-3的负载模型必须提供面向任务的建模能力,即能够根据测试任务和SUT类型,由用户定义相适应的负载模型,刻画负载指标及指标间关系.(2)在负载描述能力方面,特定类型的负载模型通常只关注某方面的负载特征.例如,在Web系统性能测试中,相关的负载模型就分为两类,分别针对网络特征(如SpecWeb99[11])和用户行为特征(如CBMG[12]).然而,由于TTCN-3使用范围广泛,所面对的负载特征也较为复杂.因此,在进行负载建模时应将多个方面的负载特征纳入统一的负载指标体系,加以综合考虑,从整体上反映出SUT的负载情况.同时,在负载刻画中还必须要考虑这些特征之间的约束关系.(3)在负载产生方面,现有的负载模型通常依赖于专有的测试工具来产生负载,如LoadRunner、OpenSTA等.然而,TTCN-3性能测试系统必须依赖标准化的测试平台.TTCN-3标准[13]规定了测试平台的结构和接口.因此,面向TTCN-3的负载产生程序必须能够在相关标准的约束下,使用标准化的接口来实现对各类负载指标的控制,以模拟出符合负载模型定义的负载场景.(4)负载产生方面的另一重要问题是,由于TTCN-3性能测试要求负载模型具备面向任务的建模能力,其中的负载指标可由用户进行定义和调整;但另一方面,TTCN-3负载产生程序又要受到TTCN-3标准的约束,可使用的负载控制点和控制方式相对固定.因此,如何依靠有限的控制点对由用户定义的多样化的负载指标进行控制,使其产生出的负载能符合相关指标的描述,是TTCN-3负载产生中必须要关注和解决的问题.针对TTCN-3性能测试对负载建模和生成的需求,本文提出了一种模型驱动的TTCN-3负载产生方法.其基本思想是通过模型刻画负载,再依靠自动转换算法将模型转换为TTCN-3测试系统,从而避免了人工进行编码,同时也提高了对负载的描述和模拟能力.该方法以一组负载模型为核心,其中,负载指标模型描述了负载指标的组成和指标之间的约束,负载剖面模型定义了负载指标的取值以及指标值随时间的变化.所建立的负载模型能够在控制规划算法的支持下将其中的指标值映射成TTCN-3负载控制参数,并在本文所提出的负载控制点的支持下得以执行,从而模拟出满足模型描述的负载场景.本文针对一个Web应用系统开展了实验验证,对该方法的建模能力和负载模拟能力进行了分析,并与相关方法进行了对比,从而验证了该方法的可行性和有效性.本文的第2节是模型驱动的负载生成方法的概述,给出该方法的基本过程;第3节介绍主要测试模Page3型及其构造方法;第4节论述负载产生方法;第5节给出使用本文方法进行的实验,并对实验结果进行分析;第6节介绍相关研究,并与本文的工作进行比较;最后在第7节对本文工作进行总结和展望.2模型驱动的TTCN-3负载生成方法模型驱动的负载生成过程(如图1所示)包括负载建模和负载生成两个阶段.在建模阶段,本文针对现有负载模型的局限性和TTCN-3性能测试对负载模型的需求,提出了一种分层次的建模方法,具体包含3个层次:(1)面向测试类型的建模.其建模制品是负载指标模型.负载指标模型用于定义面向某一类SUT(如Web系统)的常用负载指标集合及这些指标之间的约束关系.负载指标是对负载某方面特征的定图1模型驱动的负载生成过程通过将负载模型划分为3个层次,满足了TTCN-3性能测试对负载建模灵活性和可扩展性方面的要求.负载指标模型可允许根据不同的SUT类型定义不同的负载指标及指标关系;任务指标集和负载剖面模型则允许根据不同的测试任务选择所关注的指标范围并确定指标的取值.上述3类模型既相互联系,又位于不同层次.按其抽象程度可从高到低依次排列.其中,高层次的模型具有一定的通用性,可在不同测试项目中进行重用;低层次的模型包括与测试任务和负载生成相关的细节,可方便地转换为TTCN-3测试代码或控制参数.负载建模过程就是一个对模型不断转化和细化的过程.量描述.对于同一类系统的测试,应使用相同的负载指标模型.(2)面向测试任务的建模.其建模制品是任务指标集.在一个具体测试任务中,测试人员通常不会使用所有指标来定义负载,而会根据任务要求,从负载指标模型中选取一组重点指标,检验SUT在这些指标下的性能表现.这些指标是从负载指标模型中选取的一个子集,称作“任务指标集”.(3)面向负载场景的建模.其建模制品是负载剖面模型.为了对SUT的性能进行充分检验,并确定性能随负载变化的情况,测试人员需定义一系列的测试场景,在每个场景中对负载指标的取值会有所不同.本文使用负载剖面模型定义测试场景.每个负载剖面模型中定义了任务指标集中所有负载指标的取值以及其取值随时间变化的情况.在负载生成阶段,其主要目标是根据负载模型生成一个TTCN-3测试系统,该系统的执行能够产生出模型所定义的负载场景.这个TTCN-3测试系统由两个部分构成:一组虚拟用户模拟程序和一组负载控制点.其中,虚拟用户模拟程序定义了测试系统与SUT的一个交互过程;负载控制点则控制着虚拟用户模拟程序的启动时机、并发数量、执行过程等,通过对这些因素进行不断的调整,能够模拟出负载模型所规定的负载场景.与这两个部分对应,负载生成也包括了两方面的内容:(1)虚拟用户模拟程序的生成.由于TTCN-3功能测试用例往往是从用户角度与SUT进行交Page4互,具有和虚拟用户模拟程序相似的设计原则.因此可利用这种相似性,定义一套转换规则,应用这些规则将已有的功能测试用例自动转化为虚拟用户模拟程序.(2)负载控制点的控制关系生成.采用的方式是建立负载模型中各项指标与TTCN-3负载控制点之间的映射关系,定义每项指标由哪些控制点进行控制,进而将负载指标的取值分解为相应控制点的控制参数.在上述两个方面的生成中,前者主要采用了我们在文献[14]提出的方法,这里不作详述.本文则重点对后者进行讨论,包括定义TTCN-3负载控制点和提出一套用于自动建立指标与控制点映射关系的控制规划算法.3负载模型及建模方法下面,本文将对负载建模阶段的主要模型以及各模型的构造方法进行详细论述.3.1负载指标模型负载指标模型给出了面向特定类型SUT的常用负载指标.这些指标能够从用户和环境的角度反映出SUT在实际使用中的负载特征以及它们之间的关系.本文定义的负载指标模型如下.定义1.负载指标模型.LQMΘ=〈Q,D,P,CG〉,其中,Q={q1,q2,…,qn},qi为针对Θ类SUT的一个负载指标,每个负载指标可赋予一个具体值(记作value(qi)),代表了在负载产生时对这些指标的期望值;D={di|1i|Q|},di为指标qi的值域(记作domain(qi));P=〈C,R〉,代表了指标分类,其中C为类别集合,R={〈qi,cj〉|qi∈Q,cj∈C},〈qi,cj〉是一个二元关系,表示指标qi隶属于类别cj,指标qi的类别记作category(qi);CG={cg1,cg2,…,cgm},cgi为两个或多个负载指标之间的一个约束组,每个约束组包含了有关指标之间的一系列约束.根据约束的类型不同,约束组可分为两类:值约束组和区间约束组.LQM中的负载指标并不是孤立存在的,相互之间存在着联系和制约关系.定义1将这种关系表示为约束组CG.由于这些约束组对负载建模和负载生成具有重要影响,因此我们还必须对它们进行更加具体的刻画.下面分别给出了两类约束组的形式化定义.定义2.值约束组.vcg=〈Q,F〉,其中Q={qi|qi∈LQMΘ集合,QLQMΘ(qy)(qy∈Q)→(fi)(qx1)…(qxm)(fi∈F∧qx1,…,qxm∈Q∧fi(qx1,…,qxm)→qy).其中:fi是一个多元函数,定义了负载指标qy(qy∈Q)的取值(value(qy))与一个或多个其它指标取值({value(qxj)|qxj∈Q-{qy}})之间的函数关系,这意味着当所有qxj的取值确定后qy的取值可由函数fi确定.此外,还要求对Q中的每一个指标都存在至少一个函数与之对应.定义3.区间约束组.dcg=〈Q,DC〉,其中Q={qi|qi∈LQMΘ标集合,QLQMΘ定义了负载指标qy(qy∈Q)的取值区间(domain(qy)与一个或多个其它指标取值({value(qxj)|qxj∈Q-{qy}})之间的约束关系,这意味着当所有qxj的取值确定后qy将得到一个新的取值区间dy,并且有dyLQMΘ示指标q在区间约束下的取值区间,当不存在对q的区间约束时,domain(q)=domain(q).LQM模型中不仅包括了指标集合和指标约束,还给出了指标的分类.对指标进行分类不仅有助于对指标进行管理,同时对于确定指标的控制方式也具有重要的作用,在负载产生时对于同一类别的指标通常可采用相同的负载控制方式.目前,本文定义了6种指标类别,如表1所示.为了能够确定负载指标的控制方式及其与控制点的映射关系,LQM模型对各指标与类别的隶属关系做出如下约束:(q)(q∈LQMΘ.Q)→烄(〈q,c〉)(〈q,c〉∈LQMΘ烅(〈q,c1〉∈LQMΘ(c1=c2)烆负载指标模型是与SUT的类型Θ相关的.对于不同的SUT类型,测试使用的负载指标也会不同.例如,对于Web系统测试而言,并发用户数和请求间隔时间是常用的负载指标;而对于数据存储系统的测试,数据吞吐量则成为了一个重要的指标.在实验部分,本文给出了LQM模型针对Web应用测试时的实例及其分析.Page5类别c1访问分布c2访问规模定义对SUT访问的总体数量,c3并发规模定义在负载产生时必须达到的c4访问时间c5数据规模定义了SUT的收发数据规模,c6其它3.2任务指标集选取在一个具体的测试项目中,测试人员通常不会使用LQM中的全部指标来定义负载,而会根据测试任务的要求,从LQM中选取部分指标,重点检验SUT在这些指标所描述的负载下的性能表现.例如,在进行Web系统压力测试时,并发用户数和会话发生间隔就是主要关注的指标.本文将根据测试任务从LQM中选取的指标集合定义为任务指标集(TaskorientedQuantitySet,TQS):每个TQS都是和测试任务Φ相关的,其中的指标取值(value(qi))可以由测试人员根据任务Φ的需要进行设置.但由于LQM中存在着值约束,导致负载指标之间的取值不是完全独立.在某些情况下,对非独立的指标进行设置会造成冲突.例如,当已经设置了会话内请求间隔和会话长度之后,再对会话持续时间进行设置就会破坏如下约束,从而导致取值冲突.会话持续时间=会话内请求间隔×(会话长度-1)这种冲突的出现会对测试执行阶段的负载控制造成影响,导致控制不收敛,从而无法产生出测试人员所期望的负载场景.为了避免取值冲突的出现,本文提出了一个指标选取算法,来辅助测试人员从LQM中选择相互独立的负载指标以生成TQS.算法1.TQS选取算法.输入:LQMΘ//负载指标模型输出:TQSΦ//任务指标集RQSΦ//关联指标集初始数据:CS=LQMΘbeginwhileCS≠beginGetUserInput()→inifin∈CSthen//用户从CS中选择了一个指标CS-{in}→CSTQSΦ∪{in}→TQSΦ//针对新增加的指标查找可能的相关指标foreachvcg∈LQMΘbeginif(q)(q∈vcgQ∧qTQSΦ∪RQSΦ∧thenSelectAsRQS(q)endelseifin=finishthen//用户完成了选取returnTQSΦwithRQSΦend//CS中已经无指标可选returnTQSΦwithRQSΦendSelectAsRQS(in)//选择相关指标beginCS-{in}→CSRQSΦ∪{in}→RQSΦforeachvcg∈LQMΘbeginif(q)(q∈vcgQ∧qTQSΦ∪RQSΦ∧thenSelectAsRQS(q)endendTQS选取算法首先建立了3个集合,分别是候选指标集CS、任务指标集TQS和相关指标集RQS.其中,CS初始时包含了LQM中的所有待选指标,每次测试人员选中的指标都会从CS中去掉;TQS初始时为空集,随后每次选中的指标都会加入到该集合;RQS包括了可能与TQS中的指标产生取值冲突的负载指标.这些指标的选取由本算法自动完成,并将随TQS一起返回.本算法选取RQS指标的规则是,若一个指标与本次显式选中的指标之间存在值约束,并且除该指标外约束组中的其它指标均已属于TQS或RQS,则将该指标加入RQS.具体的选取过程由函数SelectAsRQS完成.TQS和RQS中的指标具有如下性质:(1)TQS中所有指标的取值相互独立,因而可在不违背其值域(或区间约束)的前提下任意设置;Page6(2)RQS中的指标与TQS中的部分指标之间存在着取值冲突,因而不能对其中的指标进行设置;(3)当TQS中的全部指标取值确定后,RQS中的全部指标取值可根据相应的值约束函数计算得出.3.3负载剖面模型在确定了TQS之后,就可以设置其中指标的取值,以描述负载场景.在一个测试任务中,通常需要不同的负载场景,其中的指标取值应有所变化,从而检验SUT在多种负载水平下的性能表现.例如,为了测试Web系统对并发用户的承受能力,测试人员应对并发用户数指标设置多组期望值,以模拟并发用户数量从低到高的不同水平,从而检查SUT的性能变化并发现其承受极限.为此,本文定义了负载剖面模型,以描述任务指标集中所有负载指标的取值以及其取值随时间变化的情况.该模型的形式化定义如下.定义4.负载剖面模型LPM=〈I,T〉,其中,I={〈qi,vi〉|qi∈TQSΦ,vi∈domain(qi),1i|TQSΦ|},并且(q)(q∈TQSΦ)→(〈q,v〉)(〈q,v〉∈LPMI),〈qi,vi〉是一个二元关系,表示将指标qi的值设置为vi,vi既可以是确定值也可以是随机变量,对后者要给出其分布及参数,集合I代表了LPM模型中的全部指标初始值,必须保证对TQSΦ中每一个指标在I中均有对应的〈q,v〉;T={〈qx,vx〉Δt(j)|qx∈TQSΦ,vx∈domain(qx),1jm},T是一个时间序列,Δt(j)代表一个时间片段,〈qx,vx〉Δt(j)表示从第j-1个时间点开始经过了Δt(j)时间之后,指标qx的取值将被修改为vx.m是指标变化时间点的个数.负载剖面模型LPM从两个方面定义了对负载场景的期望,进而对测试系统的负载生成进行指导.一方面LPMI定义各项负载指标的初始期望值,这代表了在测试初始时测试系统所要产生出的负载水平;另一方面LPMT定义在这之后指标随时间变化的情况,测试系统应据此对负载水平进行调整.由于有LPMT的存在,LPM可以更好地反映真实环境下的负载特征,同时也能够检验SUT在负载动态变化过程中的表现,即SUT对负载变化的适应能力.在相邻两次变化之间(即Δt内),LPM中的指标值保持不变,测试系统也将稳定在相应的负载水平上.在LPM建立以后,不仅TQS中的所有指标取值已经确定,而且由于值约束关系的存在,相关RQS中的指标取值也可以由此确定.基于这两组指标数据,本文将通过负载控制点和指标控制映射,实现LPM所描述的负载场景的产生.4负载产生方法LPM模型定义了性能测试中的负载场景.在测试执行阶段,测试系统需要依据这些模型产生出期望的负载.TTCN-3测试系统采用基于虚拟用户的负载产生方式,其具体测试系统构成如图2所示.该系统包括了两类TTCN-3测试构件:MTC(MainTestComponent)和PTC(ParallelTestComponent).根据TTCN-3标准[13]的规定,在一个TTCN-3测试系统中有且仅有一个MTC,该构件在测试用例启动时自动创建.PTC用来描述并发测试行为,可根据测试的需要动态创建.同一时刻存在于系统中的多个测试构件(包括MTC和PTC)将并行执行.在性能测试中,每个PTC代表一个虚拟用户,用于模拟对SUT的一个典型交互过程.MTC则作为中心调度程序,用于控制各个PTC的启动、并发和执行过程,从而产生出满足负载模型定义的负载场景.这些控制的具体实现依赖一组负载控制点(ControlPoint,CP),每个控制点能够以某个负载指标值作为参数,对MTC或PTC的某方面行为进行精确调控,从而使其产生出的负载能够达到相应指标的要求.如上文所述,负载生成的作用是产生PTC上的虚拟用户模拟程序以及指标与控制点的控制关系.对于前者,我们在文献[14]中已有论述.本文则重点讨论如何依据负载模型动态选择各指标的控制方式,规划负载指标与控制点的映射关系.下面,首先给出负载控制点的概念,然后给出控制点规划算法.4.1负载控制点本文将控制点定义为:TTCN-3测试系统中,能Page7够依据LPM中负载指标的取值,对MTC或PTC上的测试行为进行干预,从而使测试系统所呈现的外部行为满足LPM负载指标要求的程序.从定义可以看出,控制点是与LPM模型中的指标关联在一起.但是,由于在本文提出的负载模型中,指标不是固定的,而是可根据SUT类型进行调整的,因而不能根据具体的指标来设计控制点.为此,本文采用了根据指标类型设计控制点的方法.由于同类指标具有相同的特性,因此可采用相同的控制方法.此外,由于TTCN-3是一种标准化的系统,因此,负载控制点的定义还需要满足TTCN-3标准对测试系统结构和接口的约束.基于这些约束,本文为不同类别的指标设计了6种负载控制点:①用户选择控制点.这是针对访问分布类指标(c1)的控制点,位于MTC中,以外部函数[13]的形式实现.该控制点的作用是,以负载指标给出的分布作为指导,选择要在PTC上创建的用户类型,并将选出的用户类型返回给MTC调度程序.②PTC创建控制点.该控制点用于控制创建PTC的时机,位于MTC中,以TTCN-3函数的形式实现.该控制点可依据两类指标控制PTC的创建,一种是依据并发规模类指标(c3)进行控制,另一种是依据时间间隔类指标(c4)进行控制.③全局发送控制点.这是针对访问时间类指标(c4)的控制点,位于TRI接口的send函数[13]内.该控制点的作用是,根据负载指标给出的时间值,控制测试系统向SUT发送消息的间隔.该控制点不区分消息来自哪个PTC,只从全局的角度控制消息的发送时机.④PTC延迟控制点.这是针对访问时间类指标(c4)的控制点,位于PTC中,利用TTCN-3的计时器机制实现.该控制点的作用是,根据负载指标给出的时间值,在虚拟用户的两个相邻活动之间增加延迟,从而对SUT模拟出时间间隔或持续时间的效果.⑤数据模拟控制点.这是针对数据规模类指标(c5)的控制点,位于PTC中,以外部函数的形式实现.该控制点可根据指标给出的数据大小或流量,向SUT发送相应的数据流,从而模拟出负载指标规定的数据规模.⑥负载停止控制点.这是负载产生中必不可少的一类控制点,位于MTC中,以TTCN-3函数的形式实现.该控制点根据访问规模类指标(c2)中给出的总量,决定MTC何时终止负载产生.(1)当LQMΘ建立之后,需要为LQMΘ本文设计的这6种控制点全部符合TTCN-3标准的规定,每种控制点都可根据负载产生的需要在TTCN-3测试系统中设置任意数量的实例.但其前提是,这些控制点的引入不会违反控制约束.控制约束是指一个控制点的引入会对另一个控制点产生影响,导致另一个控制点(或者二者都)无法模拟出对应指标所要求的负载.例如,请求发生间隔和会话内请求间隔是对Web系统负载建模时常使用的两个指标.二者的作用都是对HTTP请求的发送时间进行控制.如果我们在一次负载产生中同时引入全局发送控制点和PTC延迟控制点,来对这两个指标进行控制,那么就会违背控制约束,引发控制冲突.由于二者试图同时对一个请求的发送时间进行调整,其结果必然是该消息的发送时间无法满足任何一个指标的要求.4.2负载指标与控制点映射在定义了负载模型之后,就需要建立模型中的各项指标与控制点之间的映射关系,确定每个指标由哪个或哪些控制点进行控制.这种映射关系的建立需要分3个步骤完成:每个指标确定一个能够对其进行直接控制的控制点.这些控制点总体上可依据指标类型决定,但对于那些对应关系不唯一或控制点使用方式不固定的指标,则需要由测试人员根据经验指定.例如,访问时间类指标(c4)既可以由PTC延迟控制点控制,也可以由全局发送控制点控制,同时对于前者在PTC中插入的位置也要根据虚拟用户的具体行为决定,因此,这类指标的控制点就必须要依靠人工确定.表2给出了不同类型指标的控制点确定方式.(2)在确定了直接控制点之后,测试人员还要根据经验分析不同指标的控制点之间是否存在控制约束,指出哪些指标的控制点不能同时使用,从而建立一个控制约束集合.(3)当TQSΦ和LPM建立之后,以步骤1中确立的直接控制关系为基础,针对TQSΦ中具体使用到的指标,检验这种控制关系是否能够成立.有如下3种情况会导致可能无法使用这种直接控制:①指标没有直接对应的控制点.例如,隶属于“其它”类别的负载指标就没有直接的控制点,因此,无法建立起上述对应关系;②多个指标使用同一个控制点.由于每个控制点只能根据一个指标进行控制,因此,这些指标无法同时通过该控制点进行控制;③多个指标所依赖的控制点之间存在控制约束.在这种情况Page8下,这些指标在负载产生时无法同时进行控制,否则可能会引发控制冲突.对于无法直接进行控制的情况,就要尝试采用间接控制方式.本文提出了一种控制点规划算法,为TQSΦ中的每个指标自动选择适合的控制方式,通过合理的规划,充分利用有限的控制点,完成对多指标的负载控制.4.3控制点规划算法针对负载指标没有直接对应控制点的问题,本文提出了一种间接控制方式:若一个指标q无法直接进行控制,但存在q的一个值约束,并且其中除q外的其它指标均有直接控制点,那么可通过对这些指标进行控制,使q达到预期值.例如,虽然我们不能对会话长度进行直接控制,但可以通过控制虚拟用户类型分布来使会话长度的均值达到预期.针对多个指标共享控制点及存在控制约束的问题,可通过合理规划,使得两个指标能够同时使用.例如,对于请求发生间隔和会话内请求间隔这两个指标,虽然它们的控制点存在控制约束,无法同时进行直接控制,但我们可以选择对后者直接控制,而对前者间接控制的方式,令这两个指标能够被同时满足.指标类别可能的控制点使用方式确定方式c1c2c3PTC创建控制点固定自动c4c5c6综上所述,当确定了任务指标集TQS之后,需要提供一种机制,在给出LQM中各指标的直接控制点和控制约束的条件下,规划TQS(及RQS,其指标可用于间接控制)中各个指标的控制方式,从而建立指标控制映射集.在能够找到多个方案的情况下,应选择控制点个数少的作为优选方案.为此,本文提出了一种控制点规划算法.下面,本文首先给出指标控制映射集的定义,然后再介绍该规划算法.定义5.指标控制映射集是一个二元关系Q2C={〈qi,CPj〉|qi∈TQSΦ,CPjCPS},其中,〈qi,CPj〉定义了测试任务Φ的任务指标集中的指标qi与TTCN-3负载控制点集合的子集CPj之间的映射关系,在负载生成阶段qi的产生需依赖CPj中的控制点进行控制.体包括3个步骤:用于生成Q2C的控制点规划算法如下所示,具(1)对TQS和RQS中的指标进行分类,其结果为3个类别:直接控制指标集DS、间接控制指标集IS和未确定控制方式指标集PS.具体分类规则为,对于独占一个直接控制点且不存在控制约束的指标加入DS,对于不可能进行直接控制的指标(如属于“其它”类别的指标)加入IS,其它指标则加入PS.RQS中的指标全部加入PS.(2)确定PS中指标的具体控制方式.本文采用约束优化方法,首先建立约束系统,然后再对约束进行求解(该解使目标函数最小化),从而确定各指标的最优控制方式.约束系统由一系列约束条件构成,一个可行解必须满足其中的所有约束条件.本文所定义的约束条件是从控制点数量的角度描述的,其建立具体遵循了如下3条规则.组vcg,构造如下约束条件:规则1.对于所有涉及未确定指标的值约束其中,qi∈vcgQ,#cp(qi)是一个0-1函数,定义了与指标qi相关的直接控制点个数,当qi有直接控制点时,其值为1,反之为0.该约束条件的含义是不能对一个值约束组中的所有指标都进行直接控制,以免出现控制冲突.规则2.对于所有控制约束cc,构造如下约束条件:其中,qi∈cc,其含义是一个控制约束中至多只能存在一个直接控制的指标,其它都需要间接控制或不控制.规则3.对于所有已经确定和可能的间接指标qx,为其所在值约束组集合G={vcgy|qx∈vcgyQ}构造如下约束条件:(∑#cp(qi)=vcgjQ-1),#cp(qx)=0.∨vcgj∈G该约束条件是一组约束等式的析取.其中,每个等式对应G中的一个值约束组vcgj,在该等式中qi∈vcgjQ.整个约束条件的含义是,如果指标qx采用间接控制方式,则与qx有关的所有值约束组中至少有一个能够满足上文提出的间接控制条件.(3)按上述方式构造的约束系统属于GCOP(GeneralizedConstrainedOptimizationProblem)约束系统,可采用文献[15]提出的方法对其进行求解,Page9所使用的目标函数为min(∑#cp(qi)),qi∈PS,即将控制点最少的方案作为最优解.若找到最优解,可据此确定PS中指标的控制方式,并建立指标控制映射.若找不到解,则证明在当前的测试平台上测试人员选择的TQS无法执行,应该重新调整TQS.算法2.控制点规划算法.输入:TQSΦ//任务指标集RQSΦ//关联指标集输出:Q2C//指标控制集初始数据:DS=,IS=,PS=,Q2C=begin//对TQS中的指标进行分类foreachq∈TQSΦbeginif(cp)(cp∈CPS∧cp→直接控制q)thenifq∈控制约束thenPS∪{q}→PS//未确定控制方式elseDS∪{q}→DS//确定为直接控制elseIS∪{q}→IS//确定为间接控制end//将RQS中的指标全部加入PSPS∪RQSΦ→PS//建立约束系统并进行约束求解BuildCS()→constraintsFindSolution(constraints)→solution//根据最优解确定PS中指标的控制方式foreachq∈PS∧q∈TQSΦbeginifsolution(q)=1thenPS-{q}→PSDS∪{q}→DS〈q,cpr〉∪Q2C→Q2C//建立直接控制映射elseifsolution(q)=0thenPS-{q}→PSIS∪{q}→IS〈q,CPr〉∪Q2C→Q2C//建立间接控制映射endend5案例分析为了对本文提出的负载模型及负载产生方法进行验证,我们以一个开源Web应用作为SUT开展了实验.该Web应用是一个网上购书系统,基于JSP实现主要业务逻辑,后台采用MySQL数据库.本文为该Web应用定义了四类虚拟用户,分别对应四种典型的使用场景,如表3所示.同时,我们基于Eclipse平台开发了一个负载建模和生成原型工具,并基于TTworkbenchTTCN-3平台①实现了所有控制点.前者生成的TTCN-3测试系统可在后者中运行,从而产生出测试所需的负载.以该Web应用作为SUT,我们设计了3组实验来检验本文所提出的模型及算法的有效性.其中:第1组实验重点检验了负载指标的建模和TTCN-3控制点对单项指标的控制能力;第2组实验则用负载剖面模型定义了更加复杂的测试场景,并在该场景下对控制点规划和指标间接控制能力进行了验证.最后,在前两组实验的基础上,我们还进行了本文方法与LoadRunner的对比实验.虚拟用户vu1vu2vu3vu45.1第1组实验在该实验中,本文首先建立了面向Web系统的负载指标模型.现有的Web负载模型主要关注了两个方面的特征:网络特征和用户行为特征.我们为了保证负载指标的全面性,并检验LQM模型的描述能力,本文从两个方面分别选取了一组典型指标,建立了面向Web系统的负载指标模型LQMWeb,其中所包含的指标如表4所示.Qq1q2q3q4q5q6q7q8q9q10上述指标之间存在着本文所提出的两类约束关①http://www.testingtech.de/products/ttwb_intro.phpPage10系.例如,会话持续时间(q4)、会话内请求间隔(q5)和会话长度(q3)之间存在着值约束关系:value(q4)=value(q5)×(value(q3)-1).又如,会话内请求间隔(q5)和思考时间(q9)之间存在着区间约束关系:do-main(q9)=[0,value(q5)).通过对LQMWeb的负载指标进行分析,并且通过测试进行验证,我们定义了指标值约束组和区间约束组,如表5所示.CGQF/DCvcg1{q3,q4,q5}vcg2{q4,q6,q8}vcg3{q3,q7,q8}vcg4dcg1{q5,q9}dc1:domain(q9)=[0,value(q5))为了检验本文提出的TTCN-3负载控制点对单项指标的控制能力.我们为LQMWeb中每个可直接控制的指标,分别定义了代表不同负载水平的取指,并使用相应的负载控制点进行了负载产生实验.在负载产生后,我们通过分析被测Web应用的日志信息,比较了从SUT侧实际观察到的指标值与期望值的差别,并分析了控制的误差.具体实验结果如表6所示.Q设置值q1vu1:25%,vu2:25%vu3:25%,vu4:25%vu1:35%,vu2:10%vu3:30%,vu4:25%q52.5sq615vuq70.5sq81.0s其中,误差的计算公式为误差=实测值-设置值设置值×100%.从表6中可以看出,在这些指标中,虚拟用户类型分布的误差最低.时间类指标(如会话内请求间隔和会话发生间隔)比前者要稍高一些.这除了测试系统本身的控制误差外,也由于这是基于SUT的日志进行的观测,引入了额外的网络和Web系统处理时延,因此观测值不如前者准确的缘故.总体而言,本文所提出的TTCN-3控制点的控制误差大多小于或接近0.2%,控制精度较高.唯一的例外是并发用户数.其原因是在负载产生的开始和结束阶段,并发用户数分别有一个逐步提高和归零的过程,我们在计算平均并发用户数时也包括了这两个阶段,因而导致了误差的加大.5.2第2组实验在第2组实验中,我们使用LPM模型描述了两个测试场景.每个场景中均对多个指标的取值及其变化进行了定义.然后,检验在多指标约束下的控制点规划和负载控制能力.5.2.1TQS选择和LPM模型以LQMWeb为基础,我们选择了两组任务指标.所选出的指标如表7所示.其中,第1组指标主要体现了访问的整体特征,而第2组指标则兼顾了用户行为和整体两个方面的特征.该任务指标的选择是基于TQS选取算法完成的,该算法的作用是保证选出的指标取值独立.检验指标取值是否独立的充要条件是:TQS中的任意指标之间不存在可成立的值约束关系,而可能与它们发生取值冲突的指标则被移到RQS中.对照表5中的约束组,对表7中的选择结果进行检查,我们可以判断其选择结果满足独立性要求.组12对于Web系统而言,用户类型的分布是系统使用的一个关键特征,因此,在测试时通常会给予特别的关注.针对这个特点,我们在实验中分两个步骤构建了LPM模型.首先,分析了表3中4类虚拟用户①本文的实验均以虚拟用户总数(q10)做为停止负载生成的Page11访问SUT的比例,从而得到指标q1的取值;之后,再根据任务要求的不同负载水平,分别确定其它指标的多组取值;最后,将这些不同的取值作为LPM中的多个阶段,组成一个完整的LPM模型.针对第一个TQS所建立的LPM模型如图3所示.在这个LPM模型中,根据指标取值的变化测试被分为3个阶段.其中,用户类型分布的取值将在各阶段中保持不变,从而贯穿测试始终;其它指标在不同阶段将采用不同的期望值,以模拟不同的负载水平,例如,请求发生间隔在3个阶段的期望值分别为200ms、62.5ms和12.5ms.这个值的变化说明我们在测试中希望以渐进的方式不断提高用户访问的频度.5.2.2控制点规划在实验中,我们采用控制点规划算法,建立了上述两组任务指标与TTCN-3负载控制点之间的映射关系.其中,由于第1组中的指标q1、q6、q7均有对应的TTCN-3控制点,并且它们之间没有控制约束,所以可全部采用直接控制方式,3个指标分别由用户选择控制点、PTC创建控制点和全局发送控制点进行控制.但对于第2组指标,由于其中的指标q5和q7之间存在上文所述的控制约束,因此,需要利用本文提出的控制点规划算法建立起一种间接控制方法.该规划算法首先根据指标之间的关系建立约束系统.针对第2组TQS及相关的RQS,所建立的约束系统如下所示:q5+q6+q7+13烄q7+q8+12q6+q81q5+q71烅(q7=1)∨((q7=0)∧((q5+q6+1=3)∨(q5=1)∨((q5=0)∧(q6+q7+1=3烆对上述约束系统进行求解,该算法最终规划出指标控制映射关系,如表8所示.Q控制方式q1q5q75.2.3负载控制误差分析基于所建立的LPM模型和指标控制映射关系,我们对网上购书系统进行了测试,并采用与第1组实验相同的方法进行了日志分析.两组LPM测试的具体观测结果和误差如表9和表10所示,其中,LPM模型中各阶段的数据是分别统计的(LPM1中有3个测试阶段,在LPM2中我们定义了两个阶段).Q阶段设置值q1全部vu1:25%,vu2:25%q7q6160vu260vu3100vu1200ms262.5ms312.5ms在表10中,我们不仅列出了LPM2中所有指标的实测值,同时也列出了参与间接控制的指标的实测值.从中可以看出,间接控制指标的误差具有累积效应,与参与控制的控制点个数(及约束关系)有关.在本实验中,请求发生间隔(q7)采用了间接控制方式,其误差值比其它几个直接控制指标表现出明显的升高.通过这个观察我们可进一步得出,为了更好地控制误差,控制点规划时除了要依据总体控制点数量外,还应关注每个间接控制指标的控制点个数和参与控制点的精度,尽可能优选控制点数量少、精度高的方案.Q阶段设置值q1全部vu1:35%,vu3:30%,q5111.8s29.4sq711.6s20.9sq815.92s23.33s最后,本文对第1组实验和第2组实验的控制误差进行了对比,如图4所示.通过对比分析可以看Page12出,在需要多指标协同控制的复杂负载场景下,直接控制指标的误差与单指标控制实验中的误差大致相同,大多数指标的误差也维持在0.2%以内.这说明并没有因为需要对多个指标进行协同控制,而导致误差的增大.但间接控制指标的误差稍高,接近0.5%,这主要是由参与控制的控制点数量及误差累积所决定的.通过两组实验可以看出,本文所提出的负载建模方法能够根据SUT的类型建立由多种指标构成的指标体系,并通过负载剖面模型描述由不同指标所约束的负载场景.所提出的负载生成方法能够较为精确地模拟出模型描述的负载场景,其中所有指标的控制误差均小于0.7%,主要指标的控制误差小于0.25%.5.3对比实验本文还进行了与其它负载产生方法的对比实验.LoadRunner①是目前技术较为成熟、使用较为广泛的一种性能测试工具,其采用的负载描述和产生方法也在测试工程实践中得到了大量应用.本文选择LoadRunner9.5版作为比较的对象,从负载描述能力、负载控制能力和方法的适用性3个方面与本文提出的方法进行了对比.5.3.1负载描述能力LoadRunner支持通过多种指标来刻画负载,并为不同类型的SUT定义了不同的指标集合.对于Web应用测试而言,表4中列出的大部分指标Loa-dRunner均能支持,并能够灵活地设置指标取值(包括指标值随时间变化的情况).但该工具在指标的使用上存在限制.具体来说,LoadRunner提供了如下两种负载描述方法,每种方法中允许使用的指标有所不同.(1)ManualScenario.通过手工设置多个可被LoadRunner直接控制的指标来定义负载,这些指标包括虚拟用户分布(q1)、并发用户数(q6)、思考时间(q9)、虚拟用户总数(q10)等;(2)Goal-OrientedScenario.以单一指标为目标的负载定义方法,其目标指标通常是LoadRunner无法直接控制的指标,因而需要控制其它指标来间接产生能够满足目标要求的负载,目标指标包括每秒点击数(q7的倒数)、每秒会话数(q8的倒数)等.在上述两种描述方法中,前者可支持使用多指标刻画负载,但所使用的指标仅限于LoadRunner能够直接控制的指标;后者虽然可以使用间接控制指标,但每次只能指定一个指标作为目标,且目标指标也不能与其它直接或间接控制指标(除q1外)同时使用.由此可见,与本文提出的方法相比,Load-Runner在多指标负载描述方面的能力有所不足.正是因为这个原因,本文第2组实验中给出的两种负载场景均无法使用LoadRunner完整描述.其中,在第1场景中,由于q7是间接控制指标,需要采用Goal-OrientedScenario方式进行定义,因而不能与q6同时定义;在第2场景中,除q7的问题外,Load-Runner也不支持对会话内请求间隔(q5)进行定义.5.3.2负载控制能力针对上述两种负载描述方法,LoadRunner提供了两种与之对应的负载控制方法.对于ManualSce-nario,该工具依据每个给定的指标值直接控制负载;对于Goal-OrientedScenario,该工具采用与本文间接控制类似的方法,依据目标指标给出的期望值,通过改变并发用户数、会话间隔时间等直接控制指标来动态调整负载,直到满足该目标指标的要求.为了与本文的负载控制效果进行对比.本文使用LoadRunner在同样的实验环境下,针对LPM1中的负载指标,采用3组不同的取值进行了实验.由于LoadRunner不能同时对q6和q7进行定义,因此,我们在实验中仅保留了q1和q7两个指标,其中,前者属于直接控制,后者为面向目标的间接控制.具体指标取值和观测结果如表11所示.从中可以看出,q7的控制误差与本文方法在实验2中的数值接近,q1的误差略高.总体而言,LoadRunner与本文方法的负载控制误差处于相当水平.此外,表11中还给出了q6的观测值.由于LoadRunner无法对其进行控制.因此,该值在实验中的变化幅度较大.①http://en.wikipedia.org/wiki/HP_LoadRunnerPage13Q阶段设置值表11LoadRunnerGoal-OrientedScenario控制结果1vu1:25%,vu2:25%2vu1:13%,vu2:20%3vu1:60%,vu2:20%1125ms2125ms3125ms123q1q7q6Q阶段设置值1vu1:25%,vu2:25%2vu1:13%,vu2:20%3vu1:60%,vu2:20%160vu260vu360vu1125ms2125ms3125msq1q6q7q9111293ms210480ms313130ms我们还通过实验表明了使用本文提出的指标约束关系可以改进LoadRunner的多指标控制能力.根据vcg4给出的关于q3、q5、q6和q7之间的函数关系,本文转而采用ManualScenario方式,通过直接控制q1(通过q1可推算出q3)、q6、q9(在LoadRunner中无法直接控制q5,因此我们通过思考时间q9加上一个估计延迟近似模拟q5)3个指标间接影响q7,从而达到同时控制LPM1中全部指标的目的.其中,q1和q6属于约束变量,需要根据LPM1的定义进行设置,q9属于自由变量.在负载产生中,我们通过调整q9使q7的值达到期望目标.本实验的结果如表12所示.与表11相比,在q1和q7控制误差没有显著提升的情况下,q6的观测值已明显收敛到期望值60.该实验表明:本文提出的指标间关系不仅可用于TTCN-3负载控制,对于其它方法也具有普适作用.我们认为,运用负载指标之间的关联关系,并结合多目标控制算法,可作为一种对LoadRunner的负载控制算法进行改进的思路.5.3.3方法适用性LoadRunner的负载控制方法具有一定通用性,可适用于不同类型SUT的性能测试.但是,其虚拟用户模拟脚本的生成采用了“录制与回放”的方式,因此,只能针对该工具可识别的SUT类型进行测试.虽然经过多年的发展,LoadRunner目前已经可以支持诸如Web应用、Web服务、数据库、流媒体等常见的SUT测试,但对于新出现的SUT类型(如新型通信协议),该工具可能无法支持.本文提出的也是一种通用的负载生成方法,其虚拟用户模拟与负载控制是基于TTCN-3测试系统的.由于TTCN-3具有标准化、通用化和独立于SUT的特性,因此,本文的方法具有较好的适用范围,可适用于不同类型SUT的测试.但是,针对不同SUT开发相应的TTCN-3虚拟用户模拟程序和适配器程序是应用本方法时测试人员必须要完成的工作.文献[14]中的方法可以用来提高这项开发的效率并减轻工作量.6相关工作讨论性能测试是TTCN-3研究中的热点之一.近年来得到国内外的广泛关注.文献[3]针对TTCN-3语言在时间特性描述方面的不足,研究了TTCN-3的实时扩展方案,提出了一种TimedTTCN-3语言,其中引入了面向非功能测试的判决、绝对时间、实时属性的在线和离线评估等机制.文献[4]则分析了TTCN-3在并发测试控制方面的不足,并通过引入信号量等机制增强了测试构件之间的同步能力.文献[2]分析了TTCN-3在测试判定、时间机制、同步机制等方面的局限性,并从核心语言的性能扩展、测试系统自身的性能评估和外部函数的重新设计3方面探讨了基于TTCN-3的性能测试描述方法,针对如何使用TTCN-3进行性能测试给出了建议.上述研究所提出的扩展机制使得TTCN-3能够更好地为性能测试提供支持.在性能测试系统设计方面,文献[8]提出了一套基于TTCN-3的性能基准测试系统,用于检验IMS(IPMultimediaSystem)系统在呼叫密度和并发用户量方面的承受能力.Schief-erdecker等人在文献[9]中提出了一种自动化的TTCN-3测试框架,该框架可用于WebService的功能和性能测试.文献[10]也研究了使用TTCN-3进行服务化软件性能测试的方法.蒋凡等人则在一①②Page14致性测试框架的基础上,设计了可用于端到端性能测试的系统———TTPerf[7].有一些研究关注了基于TTCN-3的负载测试问题,文献[5]研究了分布式环境中TTCN-3负载测试问题.作者指出TTCN-3具备了进行负载测试的能力,可以通过定义并发的测试构件来模拟负载场景,并通过物理分布的测试节点来执行这些构件所定义的行为.但在该文献中,作者的主要关注点是如何对异构的物理测试节点进行调度,从而保证硬件资源的利用率,而并没有关注负载建模的问题.文献[6]也研究了TTCN-3负载测试中的调度问题.作者认为负载测试所面临的挑战之一是如何利用比真实系统更少的资源模拟出期望的负载.为此,提出了一种基于有限状态机理论的模型与算法,用于优化对“虚拟线程”的调度,从而提高资源利用率.综上所述,目前的TTCN-3性能测试研究多集中在对语言的扩展、测试系统设计、针对特定系统的测试方面.对于负载建模的研究相对较少.在这些研究所提出的方法中,负载描述还需要测试人员通过繁琐的手工编码实现.而如何通过模型驱动的方式提高TTCN-3负载描述和生成的能力及自动化程度正是本文的研究重点之一.此外,上述部分研究还涉及了负载产生的问题,提出了一些用于负载测试的TTCN-3系统设计.这为本文的负载控制点设计打下了基础.但这些研究多是针对具体SUT,所设计的负载生成方法不具备通用性,也无法满足模型驱动方法对负载生成提出的要求.另一方面,负载建模是传统性能测试研究中的一个重要问题.特别是关于Web系统负载模型的研究,目前已经涌现出一定数量的研究成果.Spec-Web99[11]是一套针对Web支撑平台的性能基准测试,主要用于对硬件平台和Web服务器的性能进行评价与比较.该测试采用了一种基于资源序列的负载模型,将负载视作对Web系统中各类资源的访问及其频度,在测试负载产生时,按照访问频度的大小,依次选择相应的资源序列作为工作负载.TPC-W、WebStone、Webbench等也采取了与之类似的思想[1].这些方法能够从整体特征方面对SUT的工作负载进行刻画,但忽略了用户的具体行为对整体负载的影响.为了更好地刻画用户行为特性,文献[12]研究了使用CBMG(CustomerBehaviorModelGraph)模型刻画负载的方法.该模型从用户的行为特征出发,将会话模式作为负载特性刻画的主要手段,一个会话模式主要由3个特征分量组成:会话长度、会话持续时间、会话期间访问的页面类型,上述特征可通过对Web应用服务器的日志文件进行统计分析而得出.文献[16]则从用户提交表单和系统活动之间的迁移关系入手,提出了一种面向表单的随机模型,并使用该模型刻画Web系统负载.该模型的主要特点是能够描述历史活动对用户行为的影响.上述负载研究分别关注了Web系统在网络和用户行为两个方面的特征.但对于一个真实的负载而言,这些方面的特征既具有密切的联系又相互补充.因此,一个更加全面的负载模型应该能够从多个方面来描述负载,从整体上反映SUT的负载情况.为此,本文提出的负载模型包括了一个可扩展的指标体系,并支持对指标之间的多种约束关系进行定义.同时,为了实现对多指标约束下的负载生成,本文还提出了控制点规划算法,以支持对多类负载指标进行协同控制.7结束语随着TTCN-3应用范围的不断扩大,基于TTCN-3的性能测试成为了一个重要的问题.但目前TTCN-3在描述和生成性能测试所需的负载方面存在明显的不足.本文针对这个问题,提出了一种模型驱动的TTCN-3负载产生方法.该方法首先建立负载指标模型以描述面向SUT类型的负载指标体系和指标约束关系,然后,通过负载剖面模型刻画了随时间变化的负载场景.所建立的模型能够在转换算法的支持下转换为可执行的TTCN-3测试系统,并在本文提出的负载控制点的支持下得以执行,从而模拟出满足模型描述的负载场景.本文通过3组实验对所提出的模型的描述能力和负载控制方法进行了验证,并与相关方法进行了对比.在今后的研究中,我们拟从两个方面进一步完善本文提出的方法.一方面将加强负载指标模型的约束表达能力和负载剖面模型的场景刻画能力.在本文中,我们主要关注的是一些具有确定值的指标,下一步将加强对随机指标及其约束的建模;另一方面将继续完善控制点的设计和控制点的规划算法.主要目标是通过提高控制点的控制精度以及控制规划的合理性,使得所产生的负载能够更好地体现测试人员所关注的真实负载的特征.
