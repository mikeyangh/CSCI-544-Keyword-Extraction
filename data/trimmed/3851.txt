Page1多核结构片上网络性能-能耗分析及优化方法张帅1),2)宋风龙1)王栋3)刘志勇1)范东睿1)1)(中国科学院计算技术研究所计算机体系结构国家重点实验室北京100190)2)(中国科学院大学北京100039)3)(国网信息通信有限公司信息通信运维中心北京100761)摘要文中探讨了片上网络在执行真实并行程序时的能耗和性能关系,并提出了一种能耗/性能优化方法.首先,文中提出了一种精确的性能-能耗模型,在性能和能耗模型中同时划分出与频率相关和与频率无关的因素,并分析其对性能和能耗的影响;其次,在性能-能耗模型中建立并行开销、片外访存开销与片上网络规模(节点数)、频率之间的关系,同时引入了并行度、通信模型等与应用相关的因素,使该模型能够同时表达软硬件特性;第三,文中提出了一种基于该性能-能耗模型的性能-能耗优化方法,通过采集程序的通信模型、访存消息数量等数据选择适当的频率和网络节点数来获得片上网络能耗最低值或处理器性能最大值.最后,文中采用8个PARSEC并行程序验证前述模型的准确性并评价性能-能耗优化方法,结果显示文中性能-能耗模型相比传统模型更加精确吻合实验测量结果,性能-能耗优化方法也有效适用于不同种类的并行程序.关键词多核;片上网络;高能效;能耗优化1引言芯片能耗管理已经成为当前的重要课题,一方面高性能计算需求需要消耗大量的电能[1],另一方面,对于有电池限制的设备(如移动电话和PDA等),能耗的增加意味着使用时间的减少[2-3].随着半导体工艺进入深亚微米时代,低阈值电压导致亚阈值漏电功耗呈指数级增长,漏电功耗已经成为芯片功耗的重要组成部分,已经达到多核芯片总功耗的30%~40%[4].为了节省能耗,众多研究使用动态电压频率缩放技术来(DVFS)降低芯片电压/频率级别来降低动态功耗[5-7],也会使用动态功耗管理技术(DPM)使空闲的片上设备和处理器核关闭或进入休眠状态来同时降低芯片的动态和静态功耗[8-9].而降低电压带来低能耗的同时,必须首先降低芯片的频率[10],由此也会带来性能随频率的降低而下降.因此为了权衡能耗和性能必须选择合适的电压/频率等级[11],频率调节成为能耗-性能管理的重要调节手段.除了时钟频率对能耗和性能有着双重影响之外,程序的并行性、同步、通信及访存开销、线程数及核数也会影响性能和能耗的变化[12],而降低性能导致的执行时间增加成为能耗增加的重要因素.更进一步的分析可以得出,频率、并行性、通信访存开销及核数这几个因素之间也存在着种种依赖关系.例如,增加核数可以导致通信访存开销的增大,同时使得程序并行性增加,既可能提高也可能降低处理器性能,此外因为静态功耗不随频率变化,即使在不影响性能的前提下增加处理器核数并降低频率也不能保证带来更低的能耗收益.因此众多的不确定因素使得针对某一个应用程序选择合适的电压频率及核数变得并不显而易见,这需要对应用程序性能及处理器能耗建立更精确的模型并能清晰呈现上述各因素之间的依赖关系.然而,随着越来越多的核被放到片上,片上网络(NoC)严重制约着同步、通信及访存等开销,并且NoC消耗了大量的芯片面积及能量,文献[13]提到以8核处理器为例,NoC的功耗相当于其中一个核,而且其漏电功耗随工艺大幅提高,文献[14]给出了NoC的漏电功耗占其总功耗的比重从180nm工艺时的2.5%增长到70nm工艺时的27%,期间频率还提高了一倍.可见,漏电功耗在NoC总功耗中占有重要地位,也推动很多研究NoC功耗的建模[15]和优化[2,9].NoC规模(节点数)的改变也同核数的改变一样对性能和能耗有至关重要的影响.因此,NoC的频率和规模对程序性能和自身能耗的影响同前面所述的多核性能-能耗分析有着类似的关系.然而到目前为止,还没有这样的模型可以阐述片上网络规模、频率、并行通信及访存开销、片上网络能耗、程序并行度以及并行程序性能之间的关系.因此本文提出了一个针对常见的二维Mesh结构的NoC能耗-性能的模型,并基于该模型提出了一种分别针对性能和能耗的离线优化方法,对于不同的并行程序可以通过较小的代价取得NoC的频率及节点数配置,从而获得接近最优性能或能耗的收益.本文具体有以下几点贡献:(1)建立精确的NoC性能-能耗模型,在能耗模型中引入了与NoC频率无关功耗的同时在性能模型中引入并行开销(包括与NoC频率相关的通信开销和与NoC频率无关的访存开销);(2)通过分析采样并行程序特征,使用NoC性能-能耗模型分别在以性能和能耗为约束条件的前提下优化能耗和性能,预测取得最优能耗或性能时的频率与节点数.并基于这个流程提出一种可以根据不同并行程序特征调整优化问题的性能和能耗优化方法;(3)通过实验分析8个不同类型的PARSEC程序在16节点二维MeshNoC上的运行情况,得到新的性能-能耗模型相比传统建模方法更好的拟合NoC能耗和性能随频率、节点数变化的趋势,并且通过使用(2)中优化方法预测最优能耗和性能并得到相应的NoC配置(频率和节点数),实验证明使用该NoC配置得到的结果非常接近最优能耗和性能.本文第2节说明研究关注此问题的动机;第3节介绍相关的研究工作;第4节详细介绍NoC能耗模型;第5节详细介绍NoC性能模型;第6节具体介绍NoC性能-能耗分析及离线优化方法;第7节Page3介绍本文的实验平台和测试程序;第8节对比分析实验结果;第9节总结全文.2研究动机目前在CMOS功耗模型中可以看到,与频率无关的静态功耗是漏电功耗的组成部分,但是面向处理器的简化能耗模型通常不能正确表述漏电功耗与频率的关系.例如:(1)文献[8]假设漏电功耗与总功耗成固定比例.(2)文献[9]将漏电功耗写成与频率成正比.基于这两种假设的功耗模型其功耗随频率变化的曲线是从原点出发的曲线,而实际情况中,当芯片时钟关闭时仍有漏电流及基础电路消耗的一部分功耗,因此功率-频率曲线应当如图1所示,上述两种假设并不能准确表述应用DVFS技术芯片功耗.(3)文献[2]提出了功耗-电压的准确模型,但没有引入电压频率之间的非线性关系(公式).(4)文献[16-17]虽然也引入了与频率无关的静态功耗,但也假设了电压-频率成线性关系.虽然(3)(4)两种建模方法比(1)、(2)更接近图1曲线,但只能应用于漏电功耗随频率变化不大的情况.我们在ORION2.0上模拟了一个带有5个双方向链路的简化路由器.表1列出了得到的结果:(1)NoC漏电功耗占总功耗比例高于整个芯片的漏电功耗比例,在低频率时占主要比例,并且随频率提高其比例大幅降低;(2)与频率无关功耗不等效于漏电功耗,其占漏电功耗比例随频率提高大幅降低.并且这两者比例并不是随频率线性变化.如果NoC功耗模型不能体现这两个特征将无法对应用DVFS技术的NoC能耗进行准确评估.本文将针对使用DVFS技术的NoC性能重新建模,并评估新模型相对传统能耗模型能够更好地符合模拟实验中能耗随频率、节点数的变化规律.频率/MHz(Pind/Pleak)/%(Pind/P)/%(Pleak/P)/%50084.6100073.4200057.9300047.8400040.7在并行程序的性能模型中,并行开销(包括同步、线程通信、访存引起的NoC上通信开销和片外的访存延迟开销)成为影响并行性能下降的主要因素.文献[16]同时在性能模型中引入了频率、节点数和并行开销,但是并没有表达并行开销随节点数和频率同时改变的规律.例如,在不改变性能的前提下增加节点数同时降低频率,程序的并行开销增大,NoC漏电功耗(包括与频率无关功耗)的影响增大,因此不一定取得比低节点数、高频率更低的能耗.上述这些问题正是本文所关注的,本文将建立一个性能-能耗模型,充分描述了漏电功耗、并行开销随频率、节点数变化的特性及其作用,同时也说明漏电功耗、并行开销中与频率无关部分的组成和对性能-能耗的影响,相比以往的模型更为准确.并应用新的模型提出一种新的能耗-性能优化方法,在不改变NoC硬件结构的前提下,相对文献[2,16]中的方法,本文方法可以适应不同类型的并行程序,相比文献[17]中提到的爬山法搜索最优频率与节点数更加简单有效.此外,与以往的研究针对多核总能耗相比,本文侧重评价NoC的能耗,并分析NoC能耗与处理器能耗的不同构成并强调NoC通信开销对程序性能的影响.3相关研究已经有很多关于多核性能-能耗方面的研究.文献[18]首次在将处理器能耗考虑扩展到Amdahl定律,但是他们旨在研究异构多核相比同构多核如何具有更高能效,没有考虑处理器核的频率缩放带来的性能和能耗改变.在文献[19]中通过频率调节对并行程序能耗进行优化,然后文中所述模型没有涉及可以改变片上网络规模或可以关闭单独处理器核,单独使用DVFS技术调节频率而不运用DPM技术关闭空闲的处理器核在静态功耗不可忽略的实际情况中不能取得最优能耗.大量关于能耗-性能模型的研究都是简化不精确Page4的,例如文献[5,9,15,18,20]都没有考虑与频率无关的功耗和并行开销,他们使用的基于次线性开销的性能模型并不适用于广泛的多线程程序.文献[2,8]在分析模型中引入了漏电功耗(已包括与频率无关功耗)却没有在性能模型中加入并行开销的分析.文献[21-22]同样只引入了与频率无关功耗没有考虑并行开销的影响.正好相反的是,文献[12,16-17,23-24]中模型引入了并行开销却没有考虑与频率无关的功耗.上述这些研究没有同时讨论并行开销和与频率无关功耗的影响,并将其应用于真实的并行程序性能能耗优化中.最近几年的研究中,文献[16]研究了Power-awareSpeedup,建立了充分考虑与频率无关功耗和并行开销的性能-能耗模型.其性能模型的分析基于将workload划分成片上和片下两个部分,其目的在于推导出一个适用于不同程序并可应用DVFS技术的精确性能模型.文章没有给出面向不同应用程序的具体优化方案,使得负载划分本身成为了技术难点.文献[2]基于给定的程序并行效率和处理器核数,提出了一个功耗-性能的分析模型.然而,这个模型没有考虑程序的串并行划分以及片外部件对性能的影响,只是将性能曲线抽象成“并行效率”,没有分解其中各部分的开销作用.在他们后续的工作[17]中,继续考虑了一种启发式DVFS和休眠控制,研究的目标程序需要达到稳定状态(例如多媒体应用),并提出了一种用于寻找最小能耗的搜索算法.文献[25]提出了通过划分程序串行与并行部分,分别采用不同频率取得能耗最低的效果.其方法还使用了可以关闭处理器核的DPM技术.然而,文章假设静态功耗与动态功耗成固定比例,间接忽略了与频率无关功耗的作用.目前仍没有研究将与频率无关功耗和影响性能的并行开销、访存开销放在一起建立可同时使用DVFS(电压频率缩放)和DPM(节点独立关闭)技术的性能-能耗模型.这需要建立并行开销、访存开销与频率、节点数之间的关联.4能耗模型分析4.1片上能耗模型计算机系统的功耗主要由处理器、存储系统、I/O接口和基础电路消耗,从而把整个系统的功耗分成两个部分:与频率相关功耗和与频率无关功耗[26-27]:由此可得到能耗为其中与频率相关功耗Pdep(f)由共享时钟频率的片上部件消耗,例如处理器核、NoC和多级Cache等,而与频率无关功耗Pind主要有片外设备如内存、磁盘、I/O设备消耗.基于与频率无关功耗的研究[26-29]主要着眼于片外存储部件.然而,通过对片上功耗的分析发现,片上功耗也可以写成公式(1)的形式,但其与频率是否相关并不是按照片上部件划分,而是由动态功耗(频率相关)和静态功耗(频率无关)组成的.静态功耗通常被认为由漏电功耗组成.但在这个小节,我们通过分析得出静态功耗只是漏电功耗的一部分.通常片上部件功耗可以写成[12,30]:其中A是动态因子,C是有效电容,V是供电电压,f是工作频率,Ileak是漏电流.而漏电流又是由亚阈值(sub-threshold)漏电流和栅氧化层(gate-oxide)漏电流构成[2,12,14]:Ileak=Isub+Iox其中K1,K2,n和是经验常数,Tox是氧化层厚度,W是栅极宽度,Vth是阈值电压.指数中的Vθ是thermal电压,在室温情况下为25mV[12]并且跟随温度线性增长.因此我们可以得出漏电流会跟随温度和供电电压指数增加.为了找出与频率无关的功耗形式,我们引用了精确的频率-电压关系式[21-22]:其中fmax表示在电压V下可以达到最高频率,指数α是1到2的经验常数,η是常数.在式(3)中,与频率无关功耗可以在f→0时取得,此时电压V→Vth.于是我们得到与频率无关功耗为Pind=VthK1We在第2、3小节中我们提到的在评估频率多核功耗和DVFS技术应用中广泛使用的电压-频率关系是不同于式(6)的线性关系:其中β3=Vmax/fmax,将式(7)代入式(3)中并使f→0,Page5此时得到与频率无关功耗是Pind=P=0,显然是不符合实际电路特性的.但是使用式(5)非线性关系会给我们带来极大不便.因此我们找到一种方法将式(5)近似表达成线性关系,通过这种线性关系也可以推导出正确的与频率无关功耗.我们假设电压-频率有如下关系[21,31]:其中β1=Vmin,β2=(Vmax-Vmin)/fmax.将式(8)代入式(3)并使f→0,我们可以得到与式(6)相同的与频率无关功耗的形式.此外,我们发现当电压在远高于阈值电压的范围内变化时,使用电压-频率关系式(7)和(8)可以得到相近的功耗表达式.为了比较这两种电压-频率关系式(7)、(8)与关系式(5)对功耗影响的区别,我们列出了以下模型:ModelA:使用关系式(5),其经验常数α设为ModelB:使用关系式(5),其经验常数α设为ModelC:使用关系式(8),电压-频率关系在电压大于阈值电压时近似为线性,与频率无关功耗与ModelA与B是相同的.ModelD:使用关系式(7),电压-频率成正比关系,广泛应用于DVFS技术,与频率无关功耗被忽略.本文使用NoC功耗模拟器ORION2.0[32]来评价这些模型.本文选择65nm工艺,电压和频率同时调节.频率调节范围设置为0~4GHz,电压调节范围为从阈值电压到1.2V.简化起见,我们假设了1个路由器和4个相邻节点、1个处理器核链接,通信负载设置为常数(0.02flits/cycle/port).图2显示了能耗模拟的结果,ModelC的曲线始终介于ModelA和B之间,而ModelD偏离了ModelA和B,最小值1.最大值2.特别是在低频率时.图2说明了ModelC无论在低频率还是高频率时都能较好地接近真实能耗趋势.第6小节中性能-能耗模型评价中仍然对这4种模型进行比较.4.2片上网络能耗模型一般情况下,二维MeshNoC的功耗会随着网络规模扩大呈超线性增长的趋势.这是因为一方面控制线和排队锁存器(queuinglatches)的数量都是至少线性增加的.为了简化和考虑扩展性,本文中路由器缓存数量不随节点数变化,因此NoC的总功耗随节点数的增加也是线性的.因为NoC中节点间连线相比节点内路由器来说几乎不消耗漏电功耗,所以节点和连线的漏电功耗比例大不相同.我们假设了一种二维Mesh结构的NoC只由路由器和链路组成,不考虑与处理器核的接口部分(该部分功耗可算作处理器核功耗),那么NoC的功耗可以表示成路由器和链路两个组成部分:i(σ(r)P(r)j(σ(l)P(l)i,f)=A(σ(r)j,f)=A(σ(l)i,C(r),I(r)其中σ(r)载、有效电容、漏电流.σ(l)条链路的通信负载、有效电容、漏电流.通信负载是路由器或链路各个端口每秒钟到达flit的平均数量,用来衡量路由器或链路的活动率.端口到达率直接影响节点内部电路器件的开关活动,因此通信负载与功耗公式中的动态因子呈线性关系,通过拟合ORION2.0中动态功耗与通信负载的关系曲线可以得到当NoC节点数增加时,网络传递消息的平均距离也会增加,因此通信负载也应随之增加.而另一方面,节点数增加带来共享Cache容量的增大减少了因Cache缺失带来的通信开销.通过对并行程序运行时的采样观察得到:(1)通信负载随节点数增加而增加的趋势非常缓慢;(2)节点通信负载不仅与本地处理器核注入率相关,而且与由片外访存、访问相邻节点的共享Cache及访问本地共享Cache的消息到达率密切相关.其中(2)是NoC上消息传递的主要因素,因此网络通信负载受处理器核负载影响远不及受节点在网络拓扑结构中位置的影响大.因此本文对每一个并行程序执行过程中的通信负载取Page6平均值,并对所有节点的平均通信负载取平均值,作为该程序在能耗模型中所有节点使用的通信负载数值,从而获得与采集各节点各自通信负载接近的能耗评价结果.整个NoC的功耗应该由上述式(9)、(10)表示的路由器和链路功耗乘以各自的数量取得.二维MeshNoC中链路数量可以写成2n-槡n[31,33],如果每条链路都是双向的,那么NoC总功耗可以表示成P(珋σ,f,n)=∑n5性能模型分析在这一小节中,我们将通过尽可能简单的公式描述并行开销约束下的多线程程序性能.在计算机系统中,处理器核、NoC、多级Cache、片上IO控制器和片上内存控制器会以同样的频率运行.DVFS等频率缩放技术将会在整个芯片上应用.本文假设一种同构的多核结构,其NoC节点也是同构的.每一个节点连接一个处理器核和4个相邻的节点,不包含可配置的部件如动态缓存等,但是可以调节NoC节点数目.因为NoC的能耗不仅与NoC功耗模型有关,还与程序执行时间有关,所以性能模型必须考虑除NoC外的所有相关部件.性能模型的形式基于Amdahl定律,假设p是程序的并行部分,Ts是程序在单核上运行的总时间,则该程序运行在n个核上最大能获得的加速比是许多研究考虑了“非核”部件,比如NoC和LLC(Last-LevelCache),引入了访问共享Cache、线程同步、通信的开销[34],因此上述公式可以改写成S=其中Tcom是片上网络通信时间,Tllc是共享LLC访问时间(包括线程同步和访问共享Cache争用产生的时间),Tmem是片外访存时间.Tcom对节点数n的依赖关系随着不同程序类型和网络拓扑而改变.文献[34-36]指出Tcom随着n的增加而增加,并且在单节点处有Tcom与程序的问题规模并不是高度相关的,而是与NoC拓扑结构密切关联.例如,Hennessy等人在文献[37]中给出了4个著名应用的并行开销随n的变化特征:LUKernel、Barnes和Ocean具有Ο(槡n)复杂度,FFT具有Ο(n)的复杂度.文献[38]提到对于quicksort算法,Tcom随n以Ο(nlogn)的规律改变.对于不同的拓扑结构,hypercube网络中的Tcom有着Ο(logn)的复杂度[34],而二维Mesh结构的网络则根据不同的通信模型分成3种情况[39]:One-to-allBroadcast,All-to-allBroadcast和All-to-allScatter三者并行开销复杂度下界分别是logn,n和n2.本文中我们考虑一种二维Mesh结构,考虑到程序的多样性,其并行开销也分为3种基本模型:次线性logn,线性n和超线性n2.对于Tllc,文献[33]提出了一种评估LLC开销的模型,指出LLC的访问需求是随节点数n增加呈次线性增加的关系.LLC的访问开销主要由访存消息在NoC上的传递时间决定,访存消息的传递与线程通信的传播在网络行为上并无不同,因此可以将LLC开销Tllc与通信开销Tcom合并为并行开销TPO=Tcom+Tllc,并归纳为3个基本类型:TPO~{logn,n,n2}.片外访存开销Tmem可以分成两个部分之和:访存消息片上传递时间和片外传递时间.前者可计算在并行开销当中.因为单一访存消息在片外传递时间与节点数n无关,因此程序的片外访存时间只与LLCmiss后发出的片外访存消息数量成正比.根据文献[40]提出的“30%定律”(Cache容量扩大一倍,Page7失配率下降30%),文献[41]推导出了Cache容量与失配率之间的关系为miss_rate=βCα,其中常数β是正数,常数α是负数,C表示cache容量.本文只考虑每个节点连接的共享LLC的容量为C,则片外访存开销可以写成其中λ=βCα为大于0的常数,α是负数.对于问题规模确定的应用,在单核上执行的总时间Ts是一个常数.因此对式(13)可以重写为S=11-p+p/n+wPO+wmem1-p+p/n+c{logn,n-1,n2-1}+λnα(16)=其中wPO是并行开销部分,c为并行开销系数,wmem是片外访存开销部分.文献[24]指出无论并行开销采用线性还是非线性模型,加速比都会先随节点数增加而增加,当达到某一节点数量后,加速比会随之增加而降低.图4显示了这一规律,式(16)中并行开销系数c因程序的不同有所改变,并行开销部分写成wPO=c{logn,n-1,n2-1}是为了满足式(14).加速比式(16)可以分成与频率相关和与频率不相关两个部分,这两部分的划分是根据影响部件的位置确定的.其中片上部件NoC和LLC均受片上时钟控制,同处理器核共享同一频率,而片外存储则与片上时钟频率无关.因此应用DVFS频率缩放技术的多核处理器加速比公式应该改写为如下形式:S(f,n)=其中F是参考频率,本文设为最大频率.为了能够预测每一个程序的加速比曲线,有必要研究如何为程序选择一个合适并行开销模型和片外访存模型.本文采用在不使用频率缩放技术的情况下对加速比和片外访存消息数量进行采样.确定片外访存开销和并行开销的过程如下:(1)首先通过拟合片外访存消息数量和LLC容量的采样曲线获得式(15)中的α值.(2)利用可决系数来从3种模型{logn,n-1,n2-1}中选择最合适的并行开销模型:这里Si是第i个采样值,^Si是有当前模型计算出的第i个数值,珚S是采样的平均值.计算3种模型的可决系数R2,应该落在区间[0,1],然后选择可决系数最大的(最接近1)的模型作为并行开销模型.6片上网络性能-能耗分析和优化6.1NoC性能-能耗模型假设tn为并行程序在n个节点上执行完毕所需的总时间.那么执行该程序所需的NoC能耗可以写成这里功耗来自于公式(12),tn包括程序串行部分和并行部分的执行时间.因为分布式的共享Cache被广泛使用在多核结构中,所以程序的串行部分只运行在单核上也会导致整片NoC所有可用节点都处于工作状态,因此本文不特别区分串行部分和并行部分的能耗,认为所有可用节点均在程序运行过程中工作并消耗能量.从式(17)中可以得到与性能关联的频率表达式:S·F·1-p+pf=S·F·1-p+p=这里面并行开销和片外访存开销的类型选择与参数都需要由所执行的程序决定,因此不同程序也是影响频率-性能关系的因素.于是,频率可以写成一个加速比、节点数和程序特性决定的函数:假设T是程序以最高频率F在单核上的执行时间,则该程序在n个核上的执行时间是tn=T/S,于是NoC的总能耗可以表示为Page8其中平均通信负载珋σ由程序特性决定,T也是由所执行程序确定的常数.6.2NoC性能-能耗优化在本文的研究中,我们只关注在多核处理器上执行单一程序的情况(单任务).针对与执行某一程序的多核处理器,其NoC能耗的优化问题可以定义为:在不低于当前性能或目标性能的前提下,获得NoC最低能耗所需要的节点数及相对应的操作频率.形式化表示为问题I:MinE(S,n)s.t.f=其中Starget是目标性能,可以解出最低能耗时的节点数nE管理方案.opt和相应的频率fE以NoC能耗为约束的处理器性能优化问题可以定义为:在不高于当前NoC能耗或目标NoC能耗前提下,获得处理器最大性能所需要的节点数和操作频率.其形式化表示为问题II:MaxS(f,n)=s.t.f=E(S,n,apps)<Etarget其中Etarget是目标NoC能耗,解该问题可得到最大性能时的节点数nS上的最大性能管理方案.图5显示了不改变性能前提下NoC能耗随节点数变化的规律.可以看到,考虑了并行开销和与频率无关功耗的ModelC+PO具有最快的能耗增加,并且在节点数可调范围内存在最低能耗值.而没有考虑并行开销和频率无关功耗的ModelD在这一范围内不存在最低能耗,ModelC+PO有着截然不同的趋势,因此必须选择准确的建模方式才能得到优化问题的最优解.图6显示了不改变NoC能耗的前提下处理器性能随节点数变化的规律.可以看到,考虑了并行开销和片外访存开销的加速比存在一个最大值.甚至使用了ModelC+PO能耗模型的加速比曲线出现了N=2和N=4两个接近的最大值.我们知道这是非线性优化的结果,这种情况下可以选择较少的节点数取得最优解,大幅节省了片上资源.图5性能约束为S=1时的NoC能耗(程序为streamcluster)图6能耗约束下的处理器性能(目标能耗为单节点6.3片上网络性能-能耗优化方法针对上一小节提出的两个优化问题,本小节提出了一种可操作的优化方法.通过尽可能少的对并行程序和NoC运行时进行采样,获得上小节中性能-能耗模型的基本参数用来准确描述性能-能耗变化趋势.下面详细列出针对实际并行程序的性能-能耗优化方法实施步骤,具体流程可参照图7.1.对某一并行程序进行以性能/能耗为约束的能耗/性能优化首先需要采样确立性能-能耗模型的具体表达式,因此需要在多核处理器上以不同节点数在最高频率下执行至少3次(除片外访存开销指数可单独拟合外,有3个未知参数p,c,λ).记录至少3次执行的加速比、平均通信负载珋σ、片外访存消息数.2.利用nα拟合步1中记录的不同节点数的片外访存消息数,获得负指数α,访存系数λ待定.3.传递参数α到3个并行开销模型中,分别使用这3种模型利用步1中得到的3种不同节点数下加速比解出参数p,c,λ.4.通过比较3个模型的可决系数确定性能表达式.同时通过步1获得的平均通信开销与性能表达式联合确定NoC能耗方程(式(17)).5.如果优化问题为问题I,输入目标性能,解非线性优Page9化问题,得到nE化问题,得到nS6.如果优化问题为问题II,输入目标性能,解非线性优图7片上网络性能、能耗优化流程7实验平台为了验证上一节中的分析模型和优化方法,我们引入了一套可变节点数的多线程程序模拟平台.在这一节中,将介绍这个平台的结构及所使用的应用程序集.7.1模拟平台结构我们假设了一个同构的16核处理器,每一个核都是模拟一个Sparc-III-plus处理器,其片上网络也是由16个节点连接成的二维Mesh结构,其中每一个节点连接一个处理器核.图3显示了这个片上网络的具体构成,而表2列举了所模拟处理器的工艺参数和结构参数.其工艺参数来自于ITRS①并且通过ORION2.0评估其NoC规模应该覆盖250mm2的芯片面积.所有核共享4GB的片外存储和4MB的片上分布式共享L2Cache,其中共享L2Cache采用一种MESI一致性协议.此外,每一个核通过一块私有L1Cache(包括指令和数据L1Cache)相连,L1Cache又与本地的共享L2Cache相连,本地的7.将步5或6中所得(nE次执行该程序的节点数和相应的频率,即可获得性能或能耗的最优值.共享L2Cache又与本地处理器核公用一个连接网络节点路由器的接口,用来与其它处理器核、共享Cache和片外存储进行通信.片外存储的访问必须通过位于四周的8个内存控制器进行访问.技术参数工艺频率调节范围电压调节范围供电电压阈值电压结构参数节点数调节范围L1CacheL2CacheMemory片上网络的规模可以从1到16个核进行调整,因为每条边上都有两个内存控制器,为了使不同节①ITRS:http://www.itrs.net/Page10点数的子网络分配相同比例的内存控制器,图3中显示了调整网络规模的方法:每一种节点数的配置都采用16节点网络中的子网络,这样可以保证在使用少于16个节点的子网络时其它处于节能关闭状态的节点不会影响其它工作节点的消息传递,也不需要修改当前的路由策略.本文的节点数调节并不是连续的,我们采用1、2、4、8、12、16个节点数作为性能-能耗优化的可选配置.当程序需要执行在少于16个节点的子网络时,其它不工作的节点包括与其相连的核和Cache都将关闭以节省能耗,这个策略在多任务的情况下可以调整为划分给其它任务使用,在本文中暂不对多任务的性能-能耗优化做进一步的探讨和实验分析.简单起见,我们假设整片的电压频率是同时调节的.频率的调节从0到4GHz,而供电电压的调节范围是从阈值电压0.195V到1.2V,这两个范围均是由ORION2.0中65nm工艺LVT设置下取得的参数.7.2测试程序集简介在本文的实验采用8个来自PARSEC2.1[53]程序集的并行程序,分别是blackscholes,bodytrack,ferret,fluidanimate,streamcluster,swaptions,x264和vips.每一个程序在执行时都跳过了初始化阶段,只保留了很少一部分串行代码和整个并行代码部分.本文选择中等规模的问题作为输入(medium表3测试程序集应用程序领域数据共享度通信度并行开销模型并行部分比例并行开销系数cWPO(N=4)WPO(N=16)平均通信负载blackscholes金融分析低低n2bodytrack计算机视觉高中n2ferret相似性搜索高高n0.9400.0120.0480.1920.07fluidanimate动画低中Logn0.9400.0240.0480.0960.03streamcluster数据挖掘低中n2swaptions金融分析低低n2vips多媒体低中n2X264多媒体高高Logn0.9300.050.10.28实验结果分析在本节中,实验分为两个部分:(1)验证性能-能耗模型的准确性.(2)验证6.3小节中提出的优化方法的有效性.针对(1)验证性能-能耗模型的准确性,我们使用6.3小节中的采样部分获得能耗模型中的通信负载和性能模型中的并行开销模型、并行开销系数、并行部分比例、片外访存开销指数和系数,这些参数已经在表3中列出.将这些参数代入性能-能耗模型,分别以目标性能和目标能耗为约束预测各个节点数目下能耗和性能的数值,并与模拟的结果进行比较.针对(2)则按照6.3小节中优化方法packages)来保证每一个程序有足够长的模拟时间用以采样数据.在实验过程中,改变节点数和频率的同时不会改变问题的输入规模,这样使同一程序在不同频率、节点数下取得的数据具有实际意义.表3中列举了8个应用程序及它们的特征.表3中的并行开销系数、并行开销模型、并行部分比例和平均通信负载都由下一节中的实验采样得到.从表3中观察到,并行开销系数指示了并行开销在节点数较少时的基本比重,随着节点数的增加,并行开销按照其模型规律增加.因此,对于并行开销系数较大而开销模型为次线性或线性的程序,其并行开销在低节点数时高于其它程序,而在高节点数时可能会落后于并行开销系数却具有超线性增长的程序.文本采样并计算了每个程序在N=4(低节点数)和N=16(高节点数)时的并行开销,得到程序ferret,fluid-animate和x264在低节点数和高节点数处均有较大的并行开销,因为它们具有足够大的系数c.而streamcluster和vips在低节点数处是小开销而在高节点数处是大开销,因为它们具有超线性增长的开销模型.其它程序blackscholes,bodytrack,swap-tions在低节点数和高节点数处均是小开销,而这些程序的开销模型都是超线性的,本文的节点数扩展性有限,当节点数足够大时(远大于16),具有超线性增长的并行开销将会超越其它程序.的流程取得优化的节点数和频率配置,然后在模拟器上执行优化配置得到最优能耗或性能,与模拟器搜索(节点数,频率)空间得到的最优值进行分析比较.8.1NoC能耗优化结果在本实验中,通过采样得到性能-能耗模型中的各个参数,如表3中所列出,确立了针对每个程序的性能-能耗模型的具体形式.在本小节的实验中进行以下两个实验:(1)以目标性能作为约束条件,通过能耗模型计算程序在每个节点数下的能耗值,与传统建模方法计算的能耗值做出比较分析.同时与模拟器得到的接近真实系统的能耗做比较分析;(2)利用6.3小节中的优化方法解出问题I的优化配置(nEPage11和频率配置,在模拟器上得到执行后的能耗.与模拟器全速执行在16核、单核和经搜索得到的实际最低能耗做出对比分析.在这节实验中,作为目标性能我们选取了3个不同的等级:(1)“低”目标性能,等效于程序在单核上执行时最高性能的1/2.(2)“中”目标性能,等效于程序在单核上执行的最高性能.(3)“高”目标性能,等效于程序在2个核执行的最高性能.这种设置的目的在于了解不同目标性能对能耗最小值及其配置参数的影响.图7展示了在这3种不同目标性能约束下,本文性能-能耗模型ModelC+PO(同时引入了与频率无关功耗、并行开销、片外访存开销),与传统模型和模拟器能耗的对比.在(1)、(2)中所有能耗向模拟器单核执行时的能耗做归一化处理,(3)中所有能耗向模拟器2个核执行时的能耗做归一化处理.首先,在实验(1)中,各个性能-能耗模型在各节点数下的能耗可以由公式直接计算得出,其频率可以由式(19)计算得出.模拟器功耗和性能在本文中认为是最接近真实情况的,其它模型的评价均以模拟器的运行情况作为参考.在某一节点数,模拟器频率从100MHz到4GHz以100MHz为步长调节,每调节一次将程序重新执行一次,直到在该节点数满图8各模型以模拟器单节点性能为目标性能得到的预测能耗足目标性能,记录该频率和能耗,然后节点数加1重新开始搜索,这种方法称为ExhaustiveAttemptSimulation(简写为Simulation或搜索执行),可以找到所有节点数目下刚好满足目标性能的频率和能耗值,其所测能耗在本文中认为是理想准确的.搜索执行所得的最低能耗值就是模拟器实测最优值.图8显示,无论在哪一级目标性能约束下,本文提出的ModelC+PO都能很好地符合模拟器测得的结果.不引入并行开销的ModelC对于低到中级通信量的程序也能很好地符合模拟器结果,例如blackscholes,bodytrack和swaptions.但是对于ferret,fluidanimate,x264,vips,streamcluster等中高通信量的程序不能很好地符合实际能耗趋势.并且对于这些通信密集型的应用,ModelCw/oPO模型随着节点数的增多而偏离模拟器实测值越多,这是因为并行开销对性能-能耗模型的影响也随着节点数增加而增加.ModelD+PO模型基本上不能准确跟随实测值的变化趋势.因此传统功耗模型对能耗预测的偏离是巨大的.需要指出的是,模型ModelDw/oPO因为偏差巨大不具有比较的意义,因此不在实验中列出.上述所有模型均含有片外访存开销,因为这部分开销与频率无关,对使用DVFS性Page12能-能耗模型影响不大,所以不单独列出进行比较.从图8还可以观察到,对于“低”目标性能,达到能耗最低值所用节点数量较小,随着目标性能的增大,达到最低能耗的所有节点数量也会随之增大.这个趋势在表4中得到体现.表4水平栏列出每一个程序在相同目标性能下不同模型和模拟器取得最低能耗时的节点数量.垂直栏显示了同一个模型或模拟器在不同目标性能下取得最低能耗时的节点数量.阴影部分表示该程序在该目标性能下模型预测的最小能耗节点数和模拟器搜索执行得到最小能耗节点数相吻合的情况.只有预测的最小能耗节点数与模拟结果吻合,使用该模型的预测结果才有可能与模拟器实测能耗接近(还需要计算此时的频率,不一定与模拟器频率吻合).从表4的阴影可以看出,ModelC+PO预测与模拟器搜索执行的结果吻合最多.其它两种模型的预测在大部分情况下都不够图9以各模型优化所得的频率、节点数为操作数进行能耗测量准确.此外,ModelC+PO存在两个偏离:“低”目标性能的ferret和“中”目标性能的X264.其原因是ModelC虽然非常近似ModelA和B的实际模型,但所描述的电压频率关系仍然不是非线性关系的,因此在某些情况下(如节点数较低)会出现偏差,对于一种简化的近似方法是可以接受的.其次,实验(2)中,利用6.3小节中的优化方法得到每个模型的(nE序的下一次执行,在模拟器上取得实测结果如图9所示.此外,图9中加入了全速执行16个线程和1个线程这两种边界情况.观察得到,无论采用哪种目标性能和性能-能耗模型,相比全速执行情况都可以节省一定能耗.其中使用ModelC+PO模型得到的(nE的最低能耗.图9中各模型性能模拟器在最低能耗时所用节点数同表4中所述.opt,fEPage13应用程序blackscholesbodytrackferretfluidanimateX264vipsstreamclusterswaptions注:L、M、T分别表示“低”、“中”、“高”目标性能.阴影表示该模型得到与模拟器相同的优化结果.因此,从上述实验可以得出,本文提出的性能-能耗模型和能耗优化方法可以很好地吻合模拟器实际执行情况,并且能有效求解出优化操作参数(nEopt,fE能耗.8.2性能优化结果与上小节相似,本小节将进行两个方面的实验:(1)以NoC目标能耗作为约束条件,通过性能模型计算程序在每个节点数下的加速比,与传统建模方法计算的加速比做出比较分析.同时与模拟器得到的接近真实系统的性能做比较分析.(2)利用6.3小节中优化方法解出问题II的优化配置(nS图10各模型以模拟器单节点能耗为目标能耗所得到的预测性能其作为下次一执行程序的节点数和频率配置,在模拟器上得到执行后的性能.与模拟器全速执行在16核、单核和经搜索得到的实际最大性能做出对比分析.对于每一个节点数,模拟器依然采用“搜索执行”的方法寻找合适的频率值:模拟器频率从100MHz到4GHz以100MHz为步长调节,每调节一次将程序重新执行一次,直到在该节点数满足NoC目标能耗,记录此时的频率和性能,然后节点数加1重新开始搜索.搜索执行可以找到所有节点数目下刚好满足NoC目标能耗的频率值和性能.搜索执行所得到的最大加速比就是模拟器实测的最优性能.图10显示了在ModelC+PO性能-能耗模型在性能预测中仍然十分符合模拟器实测的数值.其中ferret,fluidanimate,x264,vips,streamcluster等通信密度为中高级的程序只由ModelC+PO与模拟器实测的结果保持一致.这是因为高密度通信带来的通信开销是ModelCw/oPO不能准确描述加速比.表5显示了ModelC+PO准确预测了所有程序的最低能耗所用节点数.在图11中显示ModelC+PO优化结果比较接近搜索执行的最优解,但相比其它模型甚至获得了更低的加速比.在加速比差别不大时,从表5可以看到,ModelC+PO在大多数程序里比其它模型占用更少的节点数.应用程序blackscholes16161616bodytrack88812ferret44168fluidanimate44168X26444124vips44168streamcluster44164swaptions16161616注:阴影表示该模型得到与模拟器相同的优化结果.Page14图11以各模型优化所得的频率、节点数为操作数进行性能测量的结果总结上述两个小节的实验结果,我们可以得到下面的结论:(1)ModelC+PO预测的能耗、性能值都十分接近模拟器搜索执行的结果,而其它传统模型偏离较大.(2)使用同样的优化方法(6.3小节中),模型ModelC+PO的能耗优化结果十分接近模拟器搜索执行的结果,明显优于传统建模方法的优化结果,并且占用节点数少于传统模型.(3)使用同样的优化方法(6.3小节中),所有模型的性能优化结果都十分接近模拟器搜索执行的性能结果,但ModelC+PO明显占用更少的节点数,其数量与模拟器占用数量相同,如果将关闭的片上Cache及处理器核统计在内将大幅节省了片上资源.9结论本文探讨片上网络性能-能耗建模及优化方法.首先,本文提出了一种精确的性能-能耗模型,在性能和能耗模型中同时划分出与频率相关和与频率无关的因素:在性能模型中引入与频率相关的并行开销、与频率无关的片外访存开销;能耗模型中划分为与频率相关功耗和与频率无关功耗.并且建立了并行开销、片外访存开销与片上网络规模(节点数)、频率之间的依赖关系,使DVFS(电压频率缩放)和DPM(节点独立关闭)技术可以同时在片上网络的性能-能耗优化中使用.此外,本文将并行度、通信模型等与应用相关的因素引入性能-能耗模型中,使该模型能够同时表达程序和硬件特性.接下来本文提出了一种基于该性能-能耗模型的性能-能耗优化方法,通过采集程序的通信负载、访存消息数量、加速比等数据来确定性能-能耗模型的具体形式.再通过解决非线性优化问题获得片上网络能耗最低值(或处理器性能最大值)时的频率和节点数配置.最后,本文使用PARSEC并行程序验证了该性能-能耗模型的准确性,并通过实验证明了本文提出的优化方法的有效性,同时大幅减少了传统模型优化后导致的片上资源浪费.
