Page1构件软件可靠性过程技术张策1),2)崔刚1)刘宏伟1)孟凡超2)1)(哈尔滨工业大学计算机科学与技术学院哈尔滨150001)2)(哈尔滨工业大学(威海)计算机科学与技术学院山东威海264209)摘要针对构件软件可靠性研究现状以及如何提高其可靠性过程,对其可靠性过程的相关研究进行综述.构件软件可靠性过程的关键问题是在整个生命周期内,以可靠性为核心,不断提高可靠性增长过程,实现可靠性预期要求.文中介绍了构件软件可靠性过程的主要研究问题,对以可靠性过程为核心的基本内容体系结构与技术分类框架进行了描述,并对基本研究支撑元素进行了概括与分析.重点介绍了依据可靠性过程研究内容与技术分类下从可靠性建模、可靠性增长模型、评估、测试资源分配与最优发布、可靠性过程仿真、基于PCM(PalladioComponentModel)的可靠性技术等六个方面进行了技术分类评述,在分类评述中,对技术成果进行了深入讨论并选取典型模型进行剖析和归一化分类.最后还指出,未来还需要在复杂不完美环境下结合非参量求解方法、容错体系结构与硬件系统构件化研究、集成化的可靠性建模表示与分析等方面,深入开展一些研究工作.关键词构件软件;可靠性;可靠性过程;操作剖面;测试工作量;软件测试1引言巨大复杂度高的软件系统LSCS(Large-ScaleComplexSystem)[1]在关键系统(例如,健康监护系统、航空管制系统、轨道运输、金融电信等)中的应用已日益显著.LSCS通常通过继承和集成许多相对小的和独立的模块来开发[2-4],这些模块在模块测试阶段被独立的单独测试[5].从软件开发技术视角来看,面向对象技术的出现与快速发展,以及基于Web开发的广泛应用使得模块化、组件化软件开发模式进展加速,由此衍生出基于构件的软件CBS(Component-BasedSoftware)及开发方法[4].构件软件已成为一种主流软件形态,广泛应用在各种关图1由软件失效评估与性能预测到CBSRP研究的发展与变迁通常在测试与操作阶段,软件可靠性增长模型SRGM(SoftwareReliabilityGrowthModel)被用来作为估计和预测软件可靠性的基本工具,准确地说,其是表述软件可靠性持续提高过程的数学工具[2].最早的SRGM一般被认为是由Goel-Okumoto于1978年提出的经典的G-O模型[9],其后各种SRGMs被广泛提出.SRGM即可适用于软件测试阶段也可以用于发布运行中.软件可靠性工程SRE(SoftwareReliabilityEngineering)作为一个学科,于1991年被AT&TBell实验室的Musa正式提出,旨在确保用户使用高可靠性的软件[2],在软件测试过程中SRE采用科学的技术和工具来尽可能多的移除软件中潜在的故障.至20世纪90年代中期,构件软件及其可靠性受到了研究人员的关注,并逐渐形成了一系列的研究子领域.此时可靠性已从传统单一的软件衍生到考虑内部结构特征以及不同测试阶段差异性的研究范畴.这样,到了21世纪初基于构件的软件工程这一新的开发范型开始流行,进入21世纪第二个十年,以可靠性为核心的构件软件可靠性过程开始出现[10-13].构件软件可靠性过程是指在软件整个生命周期内以可靠性为核心,不断提高可靠性的增长和键系统中,其可靠性问题受到了极大关注.构件软件的QoS(QualityofService)[6]虽然涵盖较多的软件质量属性,但对于大规模(商业)软件而言,可靠性仍是其最重要的质量属性之一[2,7].作为一种最为重要的度量手段,可靠性分析可以定量地对软件失效行为进行评估[8],并被用作安排测试活动的依据.从20世纪60年代开始,与可靠性相关的研究活动,一直持续至今,大致经历了图1所述的几个重要阶段.起源于对软件失效的评估与软件性能的预测,到20世纪60年代末软件可靠性已被明确地提出和研究.软件可靠性分析可从形式上与定量上清晰地描述软件失效过程以及与其存在相关影响的因素之间的主要依赖关系.发布实现预期目标的可靠软件的动态过程.目前还没有对可靠性过程内容和实现技术进行统一的分析和分层归纳,使得在科研与应用中难以抉择.例如文献[10]中把描述集成测试中故障检测与改正的动态过程称为可靠性过程分析,Gokhale等人[12-13]则侧重以仿真的方法来分析排错过程,或基于马尔可夫模型进行可靠性测评[14-15]等.针对基于体系结构的软件可靠性预测,Gokhale等人[15-16]提出了统一框架,运用基于状态的模型采用解析的方法对构件软件进行了可靠性预测.作者仅从应用的体系结构建模、构件的失效行为建模以及可靠性预测的求解方法三个方面来进行分类与组合,介绍了基于体系结构的可靠性预测方法.文献[17]对基于NHPP(Non-HomogeneousPoissonProcess)类型的构件软件的可靠性增长模型进行了研究,并在其(博士论文)绪论中对构件软件可靠性的基于状态、路径和可加模型[18]进行了综合分析.这些研究工作主要是从可靠性的建模与评测角度展开,尚未从构件软件在提高可靠性整个动态进程的角度研究分析,没能够清晰地梳理出整体的技术体系与关联.为深入理解构件软件可靠性过程的丰富内容和技术发展趋势,对国内外该方面的研究工作有一个总体上Page3的技术把握,对其进行全面准确地述评具有重要意义.总体而言,可靠性是一个从设计、实现、测试和运行软件到用户使用经验可以被度量的属性.以体系结构为中心的构件软件可靠性过程,必须能够对体系结构和实现构件进行质量评价[19],必须能够确保软件系统可满足预期的可靠性要求.目前,构件软件可靠性过程研究已在多个子领域上展开,为了勾勒出其研究概貌,本文介绍了其发展现状,并从问题描述、确定总体内容与技术框架、分类归纳、总结评述等方面和角度对其研究现状进行了综述,希望能为科研人员提供一些有益的参考.本文第2节对当前研究现状进行概述分析,给出了主要研究问题,并建立相应的技术分类框架;第3节系统介绍了基本研究支撑元素;第4节到第9节重点阐述了构件软件可靠性过程技术发展过程与主要研究方向,对主要研究成果进行了系统分类比较和述评;最后是未来的研究分析和总结.表1构件软件可靠性过程研究分析示例Hsu等人[8]√-√--采用马尔可夫链建模构件软件体系结构,基于测试用例下的执行路径可靠侯春燕等人[10]√√--√建立基于排队论的构件软件集成测试模型,依据操作剖面进行基于离散事Jain等人[20]√--√-基于可靠性约束下的最小成本限制,采用解析方法确定最优发布执行策略Fiondella等人[21]√--√-研究了测试资源分配:明确考虑到体系结构,采用非线性的基因或动态规划Pham等人[22]√-√--在容错配置下,实施操作剖面转换,对顺序、分支、循环和并行结构构成的应Brosch等人[23]√-√--融入角色建模的思维到构件软件可靠性分析中,正在突破传统方法Fiondella等人[24]--√--考虑关联构件失效S相关,基于多元贝努力分布进行可靠性分析算法进行最优化求解在体系结构的建模描述上,基于状态、基于路径和可加模型[25]依然被广泛沿用,但更为细腻的顺序、分支和循环执行结构被充分考虑到当前研究中[22,26].Gokhale等人[15]开创的构件软件可靠性过程仿真方法降低了基于各类马尔可夫链[8,27]进行可靠性度量与预测上的解析求解难度.另一方面,非线性的求解方法开始得到关注,Tyagi等人[28]基于优化的路径可靠性,采用蚁群启发性算法(heuristicalgorithm)进行可靠性估计,类似的研究还有文献[21,29]等.新近的研究中[30],马尔可夫转移模型并没有直接用来建模构件软件,例如,软件工程思维指引下基于PCM(PalladioComponentModel)[23]的可靠性研究开始把马尔可夫模型作为转化中的间接求解模型.此外,考虑到构件失效相关[24]以及容错2研究现状概要、主要问题与关键技术分类框架2.1概要分析从图1描述的与软件可靠性研究相关的技术演变可以看出,可靠性作为软件可信属性的重要组成,关系到系统的安全与可信问题,这一直是计算机科学研究的主要方向,并得到了广泛的关注.构件的粒度和形式一直在演化与发展,目前业界探讨的软件体系结构、构件模型等,均是为解决构件之间的接口来实现互操作功能,这样从可靠性研究的角度以及从更高层次的抽象来看,可靠性过程研究人员对构件软件的具体形式进行了透明化处理.实际研究中对可靠性在不同层面的需求决定了可靠性过程研究的基本方向,包括建模、增长、测评、分配和仿真等.表1中的相关文献从不同层面对构件软件可靠性过程进行简要研究分析.配置[22]等更为深入的研究已出现.文献[31]对更为广泛意义上的软件可靠性模型进行了概述,但未体现出构件软件可靠性分析的明显特征.随时间持续动态地提高可靠性是构件软件可靠性增长模型的核心,除Wang等人[32]提出的移动平均值法外,目前主要停留在对可加模型[11]的持续改进上,亟待考虑到更多体系结构特征的增长模型被提出.如何提高可靠性并降低开发成本至可接受水平是软件工业的主要目标,文献[21,25]考虑到体系结构特征进行测试工作量分配并制定最优发布策略,使得研究工作更加贴近工程实际.在国内,文献[33-34]评估了构件的可靠性、操作剖面等对系统可靠性的影响.文献[18]提出了一种改进的可加模型:首先获得构件的实际测试数据,Page4并利用仿真将测试剖面转换为运行剖面,进而建立实现单一构件的G-O模型.文献[35]提出了构件软件的可靠性通用模型:构件概率迁移图,追踪构件软件开发进程中的可靠性.在可靠性提高方面,文献[11]对构件软件在测试过程中在不完全排错情况下进行了分析,其不足是没有考虑到不完美排错这种实际情况.综上,国内研究仅有限集中在基于状态模型的可靠性评估与提高上,广泛深入的研究尚未展开.经过分析,我们发现这些研究内容所包含的技术方向存在着一定的技术差别,但从可靠性不断提高和最优发布可靠软件的角度来看,都可以被归类到可靠性过程技术体系中.构件软件可靠性过程对生命周期内与可靠性紧密相关的多要素进行密切关注,更加注重持续不断地提高可靠性以及实现发布预期目标的可靠软件制品,系统化地基于建模、评估、保证与优化管控等技术确保可靠性得到持续改善.目前,其研究发展现状呈现出下述几个特点:(1)基于马尔可夫转移思想的研究方法还发挥着主要功能作用,对研究人员的影响是非常大的,很多文献的研究根基也是基于此.例如,在可靠性的建模表示、评估、可靠性增长模型上皆如此;(2)构件软件可靠性增长模型的进展还是较为缓慢.把软件作为一个整体来考虑时,软件可靠性增长模型得到了十分广泛的深入研究,有代表性的模型至少有几十种之多;但当考虑到软件的内部结构,尤其是大型的构件化软件时,其可靠性增长模型的研究仍比较匮乏;(3)可靠性评估方法正在向非参量非线性的度量与预测方法上趋近,总体而言开始向机器学习的角度靠拢;(4)非解析方法和构件软件可靠性仿真开始活跃:这是由于随着构件软件复杂程度的不断提高,以往基于“马尔可夫模型+转移概率”解析求解方法的困难度不断激增,必然使得研究人员在寻找新的分析和求解问题上做出大胆的探索;(5)在测试资源分配与软件最优发布的问题上,虽然以不断提高可靠性作为目标得到了认可,但是当前领域研究现状主要还是囿于单因素,多因素下最优测试资源(测试工作量/时间)分配与发布情况的考虑稍显不足;(6)基于PCM的可靠性分析正受到关注.因为在PCM出现之前,构件软件可靠性建模主要还是集中在马尔可夫模型上,而且也主要由可靠性研究人员来单独解决;PCM的出现使得构件及构件软件模型建模变得更为多样与细致,更多的角色被引入与评估技术;程进行动态描述,实现可靠性的动态增长;本文立足于构件软件的可靠性,对其可靠性过进来,更为重要的是其使得研究过程体现软件工程的色彩更浓厚,这是近年来一个主要趋势.程的最新发展进程和研究方向进行综述.2.2主要问题构件软件可靠性过程主要关注的核心问题是,在构件软件的整个生命周期内,主要以动态提高可靠性这一过程为核心,实现预期可靠性相关目标.其研究的要点可以概括为:(1)可靠性的建模表示、度量计算、预测、保证(2)采用适当的技术手段实现对测试与运行过(3)合理分配受限的测试资源,实现预期目标下的软件最优发布等.可以看出,相比于软件可靠性工程中对可靠性的设计与管理、定量测评与保证技术[36-37],构件软件可靠性过程在其基础上所涵盖的技术内涵更为丰富,突出面向可靠性提高的全过程,是可靠性工程在考虑构件软件基本特征基础上面向可靠性动态提高研究的进一步发展.例如,以测试环节为例,以往可靠性工程中测试的目的是发现Bug,以检测与修复为导向,可靠性过程则以不断提高测试过程中的可靠性为目标[2,11].此外,可靠性工程显示出明显的软件工程特征,目前可靠性过程则并不显著.可靠性过程技术均是紧密围绕着构件软件的可靠性提高方面来展开[13],但无论从应用在构件软件的某个生命周期上,研究内容的差异性上,还是具体的技术形式上,尚需要明确如何确定每类技术问题的核心,以及如何界定每类技术的边界.2.3关键技术分类框架构件软件可靠性过程技术作为面向涵盖其生命周期中可靠性不断提高的动态保障技术,在理论研究与工程实践方面具有非常重要的价值.为了不断提高可靠性,达到预期要求,同时由于软件实际测试与运行中的随机性等因素,使得该研究活动所涵盖的内容较多,所涉及到的技术分类也颇为丰富.通过对现有研究的相关工作进行归类和梳理,形成如图2所示的研究体系.从图2所示的总体技术框架可以看出,该技术主要是由构件软件的生命周期进程划分中涉及的可靠性研究内容和技术上的总体范畴来决定的.其研究内容和方向的要点主要有:(1)可靠性的建模技术,描述如何用合适的模型建立构件的失效以及整个软件的可靠性求解思路;Page5图2以可靠性过程为核心的基本内容体系结构与关键技术分类框架可靠性的度量、预测;(2)可靠性的测评技术,实现对整个构件软件(3)可靠性增长模型技术,基于测试或运行数据,采用统计分析的方法,建立可靠性不断提高的数学模型;(4)可靠性过程仿真技术,采用离散事件的仿真方法对构件软件的测试过程进行建模描述,进而建立一段时间内检测与排除的故障数量与可靠性的定量关系;(5)测试资源分配与最优发布技术,建立测试过程中测试资源在构件间分配的最优化关系式,实现在预期目标下的最优发布软件;(6)基于PCM的可靠性相关技术则是将模型驱动建模方法与传统可靠性研究相结合而产生的新技术,是可靠性研究与软件工程相互融合的新发展.在图2中,基于体系结构的建模表示是构件软件可靠性过程研究的基础,其对构件软件的内部结构特征、构件失效率等进行了必要描述;可靠性增长模型则是可靠性过程研究的核心,其他研究问题的描述与求解过程中大都需要依托可靠性增长模型的定量评测能力来实施.3构件软件可靠性过程研究支撑要素构件软件由多个构件连接而成,构件Ci的运行类似于传统的过程类软件执行,其执行后可能会面临着不同的转移去向,而这些转移去向通常与构件的重要性、操作剖面等直接相关.此外,整个构件软件的可靠性R由单一构件的可靠性Ri、转移概率pij、操作剖面犘、构件权重ωi等因素决定,因此构件软件可靠性过程研究相比于传统单一软件涉及到更多的技术细节.3.1构件软件实例为便于理解和后续讲解,设某构件软件为S={Ci|1iN},Ci为第i个构件.例如图3给出了一个典型的构件软件,其由10个构件Ci(1i10)构成,其中的pij表示构件Ci与Cj间的转移概率值,满足∑ipij=1,0pij1.3.2基本研究支撑要素3.2.1操作剖面操作剖面OP(OperationalProfile)是对用户使Page6用软件方式的一种统计,通过识别不同执行操作的频率可被用来引导开发与测试的进行和性能分析[41,51-52].是从程序输入子域集合{SDi,1in}到其运行正确概率值pi的映射,且满足∑n障对可靠性的影响也取决于操作剖面.操作剖面也定义了在软件系统的特定使用场景下使用案例出现的次数[19].操作运行剖面可以通过下面方法来求得.(1)在测试与运行阶段,可通过剖面工具来获得[14],例如运用动态剖面工具gprof①;(2)通过内部的转移概率pij来求得[10,53];(3)在早期设计阶段,可经过仿真的方法来获得[41].3.2.2构件间转移概率转移概率表示构件间执行控制的转移(交换),其本质是一种随机过程,表示如下:犘={pij},其中pij≡Pr{程序控制权由Ci转移到Cj}.转移概率矩阵犘=[pij]N×N可通过下面的方法来求得:(1)pij用以表示运行中构件的分支特性,在早期设计阶段,pij可经过仿真的方法来获得[41,54];(2)pij可通过操作剖面OP或运行频率分布[53]来求得;(3)在测试与运行阶段,pij可通过剖面工具[8,14,21](4)通过统计构件间执行控制转移的次数估计出来[8]:构件Ci与Cj之间的转移概率的点估计可以通过如下公式计算得到来获得;pij=NumberOfTransfersi,j(5)基于场景的构件间交互也常被用来进行计k=1算转移概率[41],例如:pij=∑S其中,PSk是Sk场景执行的概率,|Interact(Ci,Cj)|是Sk场景中构件Ci与Cj交互的次数.相比式(1),式(2)考虑到执行场景,对转移概率的计算更为细致.一般假定构件间的转移满足马尔可夫过程;转移概率仅由操作剖面决定,即犘=[pij]=f(OP).例如,离散时间马尔可夫链DTMC(DiscreteTimeMarkovChain)可用来建模构件软件的体系结构,且可通过构件间一步转移概率犘=[pij]N×N来表示,其中0pij1,犘中每行元素的和为1,即∑jpij=1.也就是说下一步控制转移只由当前构件决定,而与过去的行为历史无关[42].在此,有两点需要指出:(1)现有研究,多假定构件间的一步转移概率是S-不相关的,且任何构件的失效均导致整个应用的失效[21].显然,该假定过于苛刻;(2)转移概率是对软件运行过程中构件间转移的概率统计,其从控制权转移的角度对操作剖面进行了描述,但并不能完全等价于操作剖面.3.2.3构件权重分配对重要性,关于权重分配ωi存在下面几种情况:2,…,N;故障个数的比例来确定:ωi=ai∑N2,…,N[43];(3)通过专家意见集结来分配权重.构件Ci的权重ωi反映了其在所有构件中的相(1)认为各构件的权重均相等ωi=1,i=1,(2)通过构件Ci的故障个数与构件软件的总3.2.4关键构件识别方法关键构件在系统可靠性构成中往往占有关键地位,例如,在关键路径上的一个不可靠的构件可能导致软件系统的毁灭.因此,关键构件在被集成到系统之前必须经过全面的可靠性评估.关键构件集合CC={Ci|Ci是关键构件}可通过如下几种方法来获取:(1)借助敏感性分析结果的大小来获得[53]:si=,R是系统可靠性,Ri是构件Ci的可靠性;(2)计算出Ci稳态下的执行概率ki,通过ki数RRi值的大小来判断,例如:K=KP1)-R(Ri=0)进行计算[55],其结果同上;构件[56];(3)另外,也可应用公式IR≡R/Ri=R(Ri=(4)文献[12]通过仿真的方法确定出关键(5)专家意见法:在关键构件的识别上,关键构件被认为与其他构件涉及到更多的复杂交互过程[8].通过识别关键构件,可以获得相应的关键路径,这样测试中的路径选择可依据关键路径作为参考;另一方面,当测试资源受限时,可依据关键构件(节点)与路径制定测试资源成本的有效性分配策略.①http://www.gnu.org/software/binutils/manual/gprof-2.9.1/Page73.2.5构件级别可靠性计算在进行构件软件可靠性的度量与预测时,通常表2构件犆犻的可靠性犚犻求解方法序号求解方法1失效率方法[25]Ri=e-∫ti2软件可靠性模型[21]si,j表示从Ci开始Cj被访问次数的均值;mi(t)表示到t时累积从Ci检测到的故障数量34输入域模型进行5随机统计法[53]6可靠性的定义[19,36](0,t)内可靠性:Ri(t)=limn→7比率法[58-59]累积的被检测的故障数量与软件中初始故障数量的比率:Ri(t)=m(t)8冒险率法[59]源消耗下的故障检测率,则构件Ci的可靠性为Ri(s)=e-γz(t)s=e-γae-rW(t)s9访问次数法[25]E[R]≈∏N-110基于插桩的方法[19]目标构件被插桩用以搜集关于它们行为的信息,该过程由3个步骤来实现:①测试准备;②插桩用以搜集构件11风险函数法[37]Ri(t)=e-∫t12测试案例法[19]pij=1-13故障注入法[15]采用故障注入方法来获得每个构件的可靠性14专家意见法[25]行业领域专家依据自身经验与软件运行统计数据进行估测4基于体系结构的可靠性建模以往,可靠性分析仅仅用在黑盒软件.目前,基于体系结构的可靠性分析正成为研究热点[8,21,25],其适用于软件生命周期的各个阶段:从设计阶段到操作运行阶段.Goeva-Popstojanova和Trivedi[60]需要首先获得单一构件Ci的可靠性Ri,表2集中的给出了目前研究中Ri的获得方法.公式化描述与解释βi,其中UCj表示使用案例j,UCjCountCi_Failure_in_UCj表示构件最早于2001年对构件软件的可靠性分析研究进行了分类[39,61],随后Gokhale等人[14-16,38]又对其进一步展开了一系列的研究,其基于体系结构的建模方法给出了下面3个类别,即基于状态、基于路径和可加模型.目前,基于状态与路径的模型常被用来分析系统的可靠性,可加模型主要被用来解决以可靠性为Page8核心的测试资源(测试时间和成本预算)分配问题.构件的失效行为也存在3种建模形式[12,16,25]:(1)失效概率或可靠性(例如Ri).此时时间可以被理解为执行次数,需要记录构件Ci失效的个数以及被执行的总次数.(2)常量失效率(例如λi):此时构件失效率不依赖于构件的状态和时间,依据对其失效过程的理解,存在纯生与纯死两种情况,在8.1节中有较为详细的介绍.(3)时间相关的失效强度(例如,经典的G-O模型中λi(t)=aibie-bit):此时失效率依赖于构件的状图4基于体系结构的构件软件可靠性分析方法特别需要指出,软件系统与硬件系统不同,系统中每个构件并不处于持续激活状态,构件在调用时执行,因此分析构件软件应用可靠性的一个关键问题在于得到每个构件的使用模型.因此,研究集成测试中构件软件应用中每个构件的使用模型(包含其失效行为)是未来的研究挑战.此外,在建模中,基于时间序列的动态建模技术值得关注.在对构件软件应用的性能进行预测和可靠性分析时,需要获得如下信息[14,46]:(1)应用S的体系结构;(2)构件Ci的失效行为;(3)构件间接口交互Iij的失效行为.4.1体系结构建模与构件失效建模和求解方法(1)基于状态的模型.此时构件软件的体系结构可采用概率控制流图来建模表示[16];体系结构与构件失效行为被建模表示为马尔可夫链或半马尔可夫链;并且假定构件间的转移具有Markov属性,一般可被建模为DTMC[14]、CTMC(ContinuousTimeMarkovChain)或SMP(Semi-MarkovProcess).这些模型又可分为吸收和不可约的[27],前者一般表示对应终止型应用,此时至少存在一个没有输出转移的状态i,且到达某个吸收状态后,系统就成功结束或失效;后者可表示连续运行的应用,此时从任一个状态经过一步或有限多步转移可以到达另一个状态和时间.由于时间相关的失效行为具有更强的描述其失效行为,且其依赖于构件自身特征与如何被使用的关系,因此这种失效行为从理论上具有最强的建模描述能力,但在实际应用中,很多情况下求解较为困难.有些情况下,软件的失效行为可借助计算机辅助软件可靠性估计工具[62]来获得.基于上面的分析,图4给出了构件软件可靠性分析的整体架构图,其中第2个虚线框中基于路径模型与可加模型在后续第6.2.1节与6.2.2节中结合有关问题进行分析,第3个虚线框中给出了仿真方法的技术分类,在后续的第8节中有详细的介绍.态,且此时每个状态具有稳定的状态概率(即在特定的时间内某构件被执行的概率).基于状态的模型通过联合体系结构与失效行为采用解析的方法估计软件可靠性,在求解阶段又可被分为组合式模型与层次式模型两种求解分析方法.前者软件体系结构和失效行为以相同的模型被结合在一起;后者先对体系结构模型进行求解,再将构件的失效行为叠加到上面进行整体的求解[63].采用层次化方法,其算得的可靠性只是近似值,但相比于组合式方法求解灵活,速度更快且易于求解.在组合模型中,评估不同的体系结构或者构件行为变化的影响的计算量是巨大的.这种被抽象为各类马尔可夫模型与转移概率相结合的总体模式,目前被广泛使用,但其存在着明显的不足:①首先实际应用中转移概率pij的获取是比较困难的,现有大多是采用统计方式来确定,此外转移概率虽是对操作剖面OP的近似,或者说是其函数(即犘=[pij]=f(OP)),但毕竟二者有较大的差距,现有研究用转移概率代替操作剖面制约着研究的深入;②现有研究中构件的规模一般不超过十个构件,随着构件个数的上升,无论组合式还是层次式求解都会变得异常复杂.因此,如何更加靠近真实的应用,降低解析难度是未来研究的挑战.Page9(2)基于路径的模型.基于路径的模型通过计算系统可能的执行路径方式来计算系统可靠性[8,64-65].显然,考虑到执行路径的全面性是决定系统可靠性的关键,但这也大大增加了计算和求解的成本.(3)可加模型.不明确考虑应用的体系结构,其基于构件失效数据,侧重于估计系统时间可变的失效密度(即整个应用的失效强度)和系统可靠性[40].可加模型中构件可靠性被建模为NHPP,考虑到其可靠性的增长,并且系统失效强度是单一构件失效强度的累加.典型地,很多研究都可以归结为图4中的某个组合.例如,文献[25]采用DTMC来表示基于体系结构的可靠性模型,其中基于状态的模型中“二阶体表3基于体系结构的构件软件求解模型分类比较体系结构类型①再分类失效行为②SBM注:①类型包括,SBM:基于状态的模型;PBM:基于路径的模型;AM:可加模型;A(Absorbing):吸收的;I(Irreducible):不可约的.②失效行为建模包括,R:可靠度;CFR:常量失效率;VFR:随时间变化的失效率.③转移概率包括,Y:需要;N:不需要.④求解方法包括,HM:层次式求解方法;CM:组合式求解方法.⑤应用阶段包括,D:设计阶段;I:实现阶段;T:测试阶段;R:运行阶段.系结构效用的层次建模方法”被深入研究.这样可明确考虑循环与分支等结构特征对整体可靠性的影响.Cheung[53]提出了一个面向用户的软件可靠性模型,其中体系结构采用吸收DTMC,构件失效模型建模为可靠性,求解方法为组合式.Huang[34]在其研究中,将整个构件软件的体系结构,以及每个构件的失效行为均建模为马尔可夫过程,且构件间执行控制权的转移满足马尔可夫过程.4.2基于体系结构的构件软件求解模型分类比较容易看出,当将体系结构的模型与构件的失效模型(也可以再加上接口的失效行为模型)进行组合时,可以得到多种具体的构件软件可靠性分析模型,表3对此进行了分类比较.求解方法④CMHMHMCMHMCM可计算应用失效时经历的时间步数DHMHMHMHMHM-累加λs(t)=∑NPage104.3小结总体来看,现有构件软件可靠性建模与求解主要还是解析方法,其优点是能够定量地对可靠性进行分析,这从表3也可看出;同时其明确考虑到了程序的吸收性与不可约性,这与随机过程中的理论相对应,便于理解.其最大缺陷是不具备可伸缩性,构件个数的增加会将其计算量大且复杂的缺点明显地暴露出来.因此,降低求解复杂度是未来的主要研究方向,可以预见基于非参量的求解方法可作为替代的尝试.此外,由于构件软件系统中的构件经常是异构环境下开发与测试的,不同构件的失效行为很可能并不相同,这样就使得整个应用的所有构件失效行为建模同时存在上面三种情况,这会为实际应用带来很大挑战.5构件软件可靠性增长模型5.1构件软件可靠性增长模型面临的难题SRGM是在软件开发的测试阶段与操作运行阶段,基于失效数据,描述软件测试过程中累积检测或修复的故障数量,TE与测试时间等的数学关系,是实现建模软件可靠性提高过程的数学工具.显然,由于故障不断地被检测出来并被排除掉,软件可靠性就会得到提高.SRGM的本质是基于对测试过程中获得的相关数据(失效时间或间隔、失效个数、TE等)通过数学建模与统计分析等手段,充分挖掘出测试过程中各因素间的数学定量关系(例如,累积检测的失效个数m(t)与测试时间t的关系),用以度量和评测历史测试情况以及预测后续测试情况.爱默生网络能源公司[66]是SRGM的积极推动者,在系统可靠性需求分配上,侧重于对失效率的估计.整体而言,由于早期对SRGM认识的局限性,报告中介绍的模型做了过多与实际偏差较大的假设.这之后的研究从本质上来说,都是在考虑更多的实际测试与运行因素的情况下来建立更为准确的模型.构件软件的SRGM试图将传统针对单一软件黑盒形式的研究引申与扩展到构件软件领域,解决现有研究中出现的“定常现象”问题,对构件软件的测试过程进行深入挖掘.类似于黑盒形式单一软件SRGM研究,一种简单的做法是直接将各个构件的SRGM进行简单累加[20,43-44,58],或者考虑到各个构件的权重,例如M(t)=∑N路的做法过于粗糙和简单,掩盖了构件软件的体系结构与构件间的交互关系的本质.5.2基于移动平均值法的可靠性增长模型移动平均值法MA(MovingAverage)[32]克服了可加模型的固有缺陷,将黑盒与白盒分析方法进行联合,不仅充分考虑到了体系结构,还将时间域的概念进行建模考虑,使得所建立的模型能够预测可靠性增长的趋势.另外,故障对可靠性的影响取决于系统是如何被使用的[19],也就是说应该将操作剖面OP结合起来进行分析,MA法的求解过程中已涵盖了操作剖面OP.MA借助连续卷积方法和基于路径的分析方法实现了动态的描述构件软件可靠性增长变化过程,其包括5个步骤:(1)基于NHPP来建模单个构件失效过程,获得其非关键可靠性函数NCRF(Non-CriticalRelia-bilityFunction);(2)对路径ε上的构件的NCRF进行卷积运算,进而得到加权后的MA可靠性函数;(3)对第(2)步中得到的加权MA可靠性函数进行标准化处理得到非加权MA可靠性函数;(4)基于Markov特性并考虑最后一次失效发生时间条件,对第(3)步得到的标准化的MA可靠性函数计算路径ε的条件可靠性;(5)基于白盒方法,整个构件软件应用的可靠性可表示为所有路径的条件可靠性值与其遍历概率乘积的和.整个过程可被称之为MAPATHNHPP,所获得可靠性表达式是时间的函数,显然其能够描述测试过程中整个构件软件应用可靠性的增长趋势,当然也能够预测未来的变化趋势.5.3讨论可加模型仅仅是把构件软件看作传统单一黑盒形式软件的组合,忽略了构件软件自身的内部结构特征.虽然,可加模型试图基于失效强度可变的NHPP模型累加出系统应用的失效强度λs(t),但这能否准确地建模描述系统的失效特征还需要更多的实例去验证.MAPATHNHPP的主要贡献在于,其解决了考虑构件软件内部的系统结构以及不同构件间的特征(允许不同构件有不同的单元测试时间和失效率)时的可靠性增长建模,当然这在黑盒分析方法中无法做到.MAPATHNHPP方法的不足在于:(1)SRGM准确建立的充分条件是需要有充足的测试中的失效数据信息,而MAPATHNHPP仅基于Page11构件测试中的失效信息,这种失效信息由于构件的第三提供方特性很可能并不容易获得;另外,也忽略了集成测试这一重要测试环节的失效信息.这两方面的不足使得MAPATHNHPP所建立的可靠性增长模型相对比较粗糙;(2)其必须基于执行路径,实际的构件软件是非常复杂的,且在执行中具有极强的动态性与随机性,为其求解带来了很大的挑战.综上,构件软件可靠性过程研究中,建立描述测试/运行过程的NHPP模型,准确评估系统当前的可靠性R(t)、预测系统可靠性随时间的演化规律,是构件软件可靠性过程领域亟需解决的问题.6可靠性评估方法:度量与预测6.1构件软件可靠性评估方法构件软件可靠性评估是一个复杂的任务过程,其对软件设计提出了一整套要求.可靠性评估在软件可靠性过程的研究体系中占有重要地位.可靠性建模是评估的重要基础;可靠性增长模型中需要借助评估来求解某时间段内可靠性值,基于此,来外推预测未来可靠性的变动情况,这样也为测试资源分配与最优发布提供定量调整的依据;在可靠性过程仿真中所出现的率函数也与评估紧密联系;即便在PCM相关的可靠性分析中,也需要在将设计模型转变为解析模型后借助评估来分析可靠性变动情况.在过去二十几年里,软件可靠性分析方法主要被分为黑盒与白盒方法[60].黑盒方法基于所收集到的失效数据信息,在有限的时间间隔内或相邻失效之间,构造解析与参量的模型,求得累积的失效个数.黑盒方法具有较好的拟合失效行为性能,适用于调试阶段.鉴于黑盒方法通常将软件视为一个完全统一的整体,缺少对构件软件内部结构的考虑,因而其并不适用于由多个构件组装而成的构件软件可靠性评估分析[16].这样,白盒方法被寄希望于进行基于软件结构的可靠性分析.白盒方法使用的前提是,需要事先对构件间的转移概率和构件的可靠性进行估计.在评估方法建模研究上,除了前面提到的基于状态的模型外,基于路径的模型与可加模型也经常被采用.在具体的求解方法上可以通过解析、仿真和监控等方法来实现,仿真方法在后面的第8节中有明确的介绍.此外,在工程实践方面,微软公司[67]开发了两个用于度量商业化软件制品可靠性的系统.一个是Office用户体验改善计划CEIP;另一个是对于度量β版的WindowsServer2003有着重要改进作用的微软可靠性分析服务MRAS.CEIP基于失效率统计和计算平均失效时间的方法来获得可靠性,MRAS关注多种类型失效,尤其是计划内/外事件对可靠性和可用性的影响.爱默生网络能源公司[66]于2006年在其发布的关于软件可靠性分析的白皮书中指出,可靠性是系统与其组成构件的属性,设计者应通过改善体系结构等方法来管理和满足可靠性需求分配.为此,白皮书给出了构件软件四种运行情况下的失效率计算形式:系列构件模型(实际上为可加模型)、先后连续运行的构件模型、“k-out-of-n”构件模型(即当其中k或k个以上的构件失效时系统就失效)、马尔可夫状态模型.白皮书重在对系统失效率的确定和估计,这样就可求得表征可靠性的重要指标:即平均无故障时间MTBF(MeanTimeBetweenFailure).(美国)布鲁克海文国家实验室[68]针对建模可靠的核电站这一特定数字系统,总结了现有定量化软件可靠性方法,以期望使得软件可靠性模型可以被集成到核电站系统的概率风险判定中.在定量化软件可靠性方法的预期特征中,依靠SRGM确定预期测试时间和失效率得到了重视.可以看出,由于实际系统对失效风险的敏感,这些实践较为侧重于借助满足一定要求的可靠性模型来确定失效率,并借此来管理失效风险.下面,我们从理论上来介绍和分析现有的可靠性评估方法.(1)基于状态解析的评估方法该方法通常借助(半)马尔可夫过程、连续/离散时间马尔可夫链来表述软件结构为有限个数的状态[14].构件软件可靠性可通过构件间的状态转移矩阵被计算出来.该方法在第4节中已详细介绍,在此从略.(2)基于路径监控的评估方法该方法认为软件的失效率与路径执行频率紧密相关,因此将软件结构与构件的失效行为进行联合,基于执行路径的可靠性,进而最终估计出整个构件软件系统的可靠性.例如,可靠性与可用性预测方法使用基于路径的模型用于系统级别的可靠性预测[69-70].(3)可加模型评估方法不明确地考虑体系结构,而是集中于通过使用构件的失效数据来估计时间依赖的整个应用失效强度.例如,Everett[40]使用可加模型进行可靠性评估.图5给出了包含构件软件在内的软件可靠性评估方法,其中的第1个虚线框部分用以实现对传统非构件软件进行可靠性分析;第3个虚线框部分中白盒方法是常用的构件软件可靠性分析方法;特别Page12指出,第2个虚线框中的可加模型是黑盒与白盒方法的综合,我们认为其只是逻辑上将构件软件当作一个整体,且解决了白盒方法研究中出现的“定常”图5软件可靠性评估与分析方法6.2构件软件可靠性评估方法分析随着构件软件复杂度的剧烈增长,在给定的测试资源与调度的限制下,为了有效测试所有的构件以及相互交互,传统可靠性分析方法表现出明显的不足:(1)需要大量的测试案例:巨大的输入空间与测试案例等测试开销使得其与实际情况差距较为显著;(2)对每个构件以及对构件间的交互作用测试不充分.近年来,一个成本有效的方法被提出[8],其通过执行路径测试的方法取代过去测试整个软件的方式,克服了巨大的测试开销.图6集成式可靠性评估方法过程模型图6中构件的可靠性值有3种生成方法:①启发式可靠性估计产生一个尚未被集成到系统中的构件的被估计的可靠性值PoF_E(一个pi值).启发式可靠性估计是基于软件开发者/架构者的经验或者来自构件提供者的构件可靠性参考值;②基于模型的可靠性预测产生一个尚未被集成到系统中的构件的独立不相关的PoF_C值(一个pi值).③对于被使用在体系结构模型中的构件,基于模型的可靠性度量使用一个监控的方法度量产生在某指定执行路径现象,因而其被称之为灰盒方法.体的求解方法.图5中第2与第3个虚线框的最下面一行是具6.2.1基于路径监控的集成式可靠性评估方法显然,整个系统的可靠性与单一构件的可靠性,以及执行中控制权在构件间的转移紧密相关.Palviainen认为,应用的可靠性取决于体系结构与构件,应首先对每个构件进行可靠性评估,再对系统的可靠性进行预测.这样,其提出了一个集成式的可靠性评估方法,该方法集成了构件级别的可靠性评估活动与系统级别的可靠性预测活动来支持增量式与迭代式的可靠的构件软件系统开发过程.图6给出了其整体评估图示,其中PoF表示失效概率,是对可靠性的一种表示方法.中构件的可靠性值(也就是PoF_M值).需要指出,上面的过程可以同时采用仿真与敏感性分析的方法对分析过程的准确性与关联性进行验证.敏感性分析可用以识别关键构件与路径,以便进行更好的资源管控.与文献[19]相似,文献[42]也是基于每个构件的可靠性与系统结构,以计算路径可靠性方式来进行整个构件软件可靠性的评估,在此从略.在故障构成上,文献[2]中认为软件中存在着两类故障:相互Page13独立的与相互依赖的故障.相互独立的故障存在于不同的执行路径上,并且相互依赖的故障存在于同一条执行路径上,当且仅当相互独立的故障被检测后,相互依赖的故障才能够被检测.测试路径通常由程序设计中的顺序、分支和循环三种结构嵌套组成.由于程序运行中的不可完全掌控性,这三种结构可以组合出多种多条执行路径,如何选择满足要求的指定路径是Palviainen等人所提出基于路径监控方法的关键,因为构件与系统可靠性皆取决于执行路径.最后需要指出,动态路径分析方法需要依赖于多种输入元素,尤其是构件各种形式的可靠性值可能并不容易获得,另外该方法主要适用于构件软件早期开发阶段.这样,如何降低依赖的变元数目,以及扩展应用的生命周期是未来的重要研究方向.6.2.2可加模型及其改进分析可加模型的提出旨在调和黑盒与白盒分析之间的差异和不足,用以建立既兼顾到构件软件自身的结构特征同时又确保最终的求解结果包含测试时间t这一动态属性,使得所建立的模型具有可增长特性.其认为多个被建模为NHPP的构件的累加是一个NHPP类的构件软件,这样,可以得到显然,该可加模型只是简单地叠加各个构件的失效率,不足以真实地描述构件软件在测试或运行阶段的实际情况.为此,文献[40]提出了改进的可加模型如下式所示:这里将每个构件执行时间由统一的t换成了ti,反应出构件间差异化的使用情况被考虑进来,但遗憾的是ti的求解单纯依赖解析的方法较为困难,我们认为此时依赖仿真技术或许可有效解决.此外,Yacoub等人[41]通过构件间依赖图来建模构件的失效行为,并提出了基于场景的构件软件可靠性模型和算法,能够识别出关键构件并分析单个构件对系统整体可靠性的影响.6.3考虑多失效模式与失效传播的可靠性分析认为故障产生错误,并最终导致失效发生,是现有基于失效的可靠性研究中的一个基本共识,但其存在着明显的不足:集中于输出内容失效与定时失效;(1)构件存在着多种失效模式[71],但现在主要(2)主要考虑到构件的内部失效概率、构件间的交互概率,且认为构件出错可立即显现并传递下去导致应用失效;(3)对错误传播以及转换缺乏研究.文献[72]考虑到构件的多种失效,以及失效的转播与转换,对构件软件进行了可靠性的随机分析研究.文中,Filieri首先对构件Ci进行建模,主要借助操作模型和失效模型进行表征.例如,Ci具有N个不同的失效模式,失效模型被定义为fi(r,s),fi(r,s)=Pr{Ci产生失效模式为s的输出|Ci接收到失效模式r作为输入}.显然,fi(r,s)具体说明了构件Ci接收一种失效模式r,经过Ci执行后可能被转换为另一种失效模式s,这就是失效的传播与转换过程.与之相似,构件软件体系结构模型相关的失效模型可建模为FA(r,s),基于FA(r,s),整个应用的可靠性相关属性能被定义.在对构件和应用的可靠性进行建模后,同样,系统的行为通过DTMC来建模,但不同的是,DTMC的状态空间由传统的NGA(构件Ci的单一状态)拓展衍变为NHA(包括构件Ci的多个输入与输出失效模式).最后,利用DTMC的基本知识,整个应用的可靠性可被求解出来,敏感性分析也可获得.同样考虑到不同执行模型下与错误传播分析的构件软件可靠性预测也可参见文献[73].另一方面,针对大型市场化软件,微软公司认为[67],由于多种用户存在多样的操作剖面,在可靠性度量中应该尽可能考虑到多种失效类型.这样,失效被分为意外事件引发的失效、计划内事件引发的失效以及配置失效三大类型.对于大型商业软件或针对多种用户类型的软件,我们认为应更多的搜集多用户的多种失效数据,并统计使用上的偏好,以此来作为评估和改进软件制品的重要依据.的失效模式;最后需要指出:(1)代码插装和通信通道监控技术可识别不同(2)构件错误未必导致构件失效:仅当错误传播至构件输出接收处时构件才会失效;构件失效未必导致应用失效:仅当失效传播至应用的输出接口处时应用才会失效;(3)尽管失效可被传播下去,但通过及时发现错误并斩断其传播的路径(采用容错、屏蔽或转换技术等),可有效预防失效的发生,提高可靠性.6.4典型构件软件可靠性评估方法比较目前,可靠性评估方法中基于状态的模型多采用解析的方法进行问题求解,但当状态空间较大时会连带产生“爆炸”现象,这样仿真方法可成为首选;基于路径的方法由于需要计算由多个构件执行形成的多Page14个路径的可靠性,采用运行监控的方法比较常见;相比之下,可加模型依赖于每个构件的历史失效数据进行建模分析,因此解析求解就成为了必选方法.表4构件软件可靠性评估方法分类比较模型基于状态的模型参见表3Everett模型[40]λCBS(t)=∑NSherif模型[41]Markov模型[19]pCBS=∑nHsu模型[8]RPtk=∏i∈PtkMAPATHNHPP[32]6.5讨论综上,解析、监控与仿真方法在可靠性评估方面存在各自的不足,但为定量化的可靠性描述提供了必要的基础.当前绝大多数的可靠性评估方法集中在通过计算形式(解析以及监控)来分析系统,产生固定值,并不能被用来验证体系结构是否满足所定义的需求.为此,如何填补可靠性需求与体系结构设计及评估之间的差距成为新评估方法的重要待解决问题.特别指出,迄今为止,尚未见到能够考虑到构件软件内部更多细节的可加模型被提出,这也在很大程度上制约着构件软件可靠性增长模型的深入研究.此外,从前面第4节和后续第8节可知,降低求解复杂度的非线性方法,以及放宽假设条件的仿真方法是未来研究的趋势.因此,未来研究方向和挑战主要集中在如下3个方面:(1)产生时间连续值,或者说是时间序列相关的值,这同时又与可靠性增长模型紧密相关;(2)提高度量与预测的准确性;(3)降低计算复杂度.7测试资源与成本管控和最优发布注:①可靠性评估方法包括,SBM:基于状态解析的评估方法;PBM:基于路径监控的可靠性评估方法;AM:可加模型评估方法.②可靠性评估求解方法包括,AP:解析方法;SM:仿真方法;MM:监控方法;③应用阶段包括,D:设计开发阶段;I:实现阶段;T:测试阶段;R:运行阶段.源、CPU小时、测试案例等,现在主要称之为TE.测试资源的分配与管理[59,74-75]以及成本管控与最优发布问题[76]得到了广泛的研究.所有的不同模块的测试活动应该在受限的时间内完成,并且这些活动正常消耗有限的软件开发资源总量的40%~50%[2].典型地,模块测试是需要被执行的测试部分中最为时间关键的.因此,工程管理者应该知晓如何在这些模块间分配受限的测试资源.有些工程师[25]倾向于认为最关键的构件在结构上是最复杂的或最被频繁使用的,并因此为它们分配绝大部分的TE.显然,这种非定量的方法,过于主观粗糙,无法有效解决构件在实现系统预期可靠性与受限的资源配置间的矛盾关系.同时,粗粒度的测试资源分配忽略了成本因素,并没有为软件工程师提供定量的资源优化使用配置.最优测试资源分配与发布技术OTRART(OptimalTestingResourcesAllocationandReleaseTechnology)是解决此类问题的主要方法.OTRART能够定量地识别关键构件集合,引导测试资源在实现预期可靠性目标下实现优化配置.目前,在学术界,研究人员主要是基于数学上的优化建模方法来研究如何分配测试资源和最优发布[20-21,25,44,58].在工程实践方面,IBM公司借助共享构件库来进行构件的重用[77]以提高可靠性,建立标准开发流程与体系用以节省开发时间和降低预算,进而加速软件和技术7.1测试资源与成本管理和最优发布技术测试资源指用于花费在软件测试中的人力资在前面分析的基础上,表4从5个方面对基于体系结构的构件软件可靠性评估方法进行分类与比较.可靠性评估方法①SBMAMPBMPBMMM+APDPBMPBMMM+APT产生系统与路径级别Page15有许多关于成本受限下可靠性最优分配的研究工作[78-81],主要集中在设计阶段,其目标是选择合适的具有已知的可靠性的构件集合,并为之配置容错冗余,在可靠性限制下最小化成本,或者在成本限制下最大化可靠性.构件间的最优测试资源分配可提高软件的可靠性.例如,Lyu等人[82]提出了两种测试资源最优化分配:固定失效率限制下的测试时间分配,以及固定测试预算下的失效率最小化.实际上,固定测试预算问题是固定失效率问题的变种.此类问题一般可归结为非线性规划问题NLPP(Non-LinearProgrammingProblem),其求解方法主要采用下面两种:(1)采用拉格朗日乘子法(包括库恩-塔克KTC(Kuhn-TuckerConditions)条件)等非线性规划解析求解方法;(2)采用自动化工具软件,例如当问题求解较为复杂时可采用非线性规划软件AMPL、Mathematica、Matlab等进行数值求解.7.2考虑体系结构的研究———OTRART现有研究中的一个主要问题是,忽略了构件软件内部的体系结构和构件间的特征差异[3,20,45].基于体系结构的分析方法可被应用在测试阶段,进行确定每个构件的资源分配情况,用以实现预期目标.此时,基于体系结构的优化框架可用以实现最小TE花销下的预期可靠性目标.为此,新近的研究开始考虑体系结构对资源分配与可靠性的影响.系统交付.Pietrantuono等人[25]提出涵盖影响可靠性众多因素的测试资源优化模型,其采用吸收的DTMC来表示终止性的应用软件系统.DTMC可表示为状态S和状态间的转移概率犘.首先定量化识别关键构件集合,以便为之最优分配测试资源.对于每个构件,所提出的模型使用SRGM来表示构件可靠性与TE的关系.该关系可表示为TE=f(λ)或T=f(λ),其中λ是构件失效率.所提出的优化模型旨在寻找每个构件所应消耗的TE,以便实现预期的可靠性目标:E[R]RMIN.典型地,Fiondella等人[21]提出了优化框架:在花费最小TE时实现给定的系统级别可靠性前提下,确定分配给每个构件的TE.该优化程序需要系统级别的可靠性表达式和TE与每个构件可靠性间的关系式.分配全部TE给所有的构件采用如下的方式:需要考虑不同构件在整个应用中的重要性以及实现提高构件可靠性的困难程度.给定N个构件的构件软件,构件消耗的TE向量犈1×N和构件的可靠性向量犚1×N,该优化问题可被描述如下:烄烅S.t.RR烆该优化方法通过融入系统可靠性的方式考虑到构件软件系统结构和TE与构件可靠性关系.系统可靠性是构件间转移概率pij和构件可靠性ri的函数,即R=f(犘,R),当然转移概率是操作剖面的函数.另外,构件可靠性ri可表示为TE的函数,即ri=g(ei).因此,系统可靠性可以表示为转移概率和TE的函数,即R=f(犘,g(E)).显然,式(5)不存在线性解,通常需要非线性求解方法在满足系统可靠性的前提下求得满足要求的最小的测试工作量E.软件测试活动过程有测试时间,预算成本(对应TE)和最低可靠性R0的限制,当考虑三者最优化时实现软件的资源有效管理和最优发布已经变得尤为重要.Wang等人[83]提出了一个多目标最优分配框架如下所示:进行比较,见表5.Min狔=f(x)=(f1(x),f2(x),…,fm(x))烄S.t.狓=(x1,x2,…,xn)∈犡烅烆其中狓,犡,狔和犢分别是决策向量、决策空间、目标向量和目标空间;fi(x)是第i个目标函数.由于式(6)的复杂性,采用非线性优化算法是多目标优化问题行之有效的求解方法,这样相应的非支配排序基因算法被开发出来用于求解.7.3模型关系与统一化构件软件测试过程中,包括测试时间在内的测试资源以及成本都是受制于软件工程项目实际所面临的内外因素,需要对资源与成本进行合适的分配与管理,确定最优的发布时间.评估系统级别的可靠性,其目标是在相当大的TE(一种测试资源)被分配给目标软件系统之前,评估软件体系结构设计质量和识别其可能的弱点.目前OTRART问题研究中,已由单因素考虑向多因素考虑演变,现有所提出的问题模型均可被描述为一个最优化的计算框架.因而,提出考虑实际情况更为细致的优化框架成为当前研究的焦点,也是未来研究的重点.在此,选取11个典型的模型从5个方面统一地Page16模型研究表5构件软件测试资源与成本管理及最优发布比较Huang模型[58]A+ECBS+UTEX+PD+TEF烄Min∑N烅S.t.∑NPietrantuonoRoberto模型[25]Huang-I模型[44]A+ECBS+UTEX+PD+TEFKapur-I模型[45]ACBS+UTEX+PD+TEFKapur模型[84]A+CCBS+UTEX+PD+TEFi=1Ri(t)R烄MinC(E)=∑N烅S.t.∑Ni=1Ri(t)R烄MinT=∑N烅S.t.E[R]=∏N-1烆烄Max∑Nmi=∑N烅S.t.∑Nei=E,ei烆MinC(T,E)烄S.t.∑NTiT烅∑NeiTi=1烆mi(Ti,ei)pia烄Min∑N(a-m(T))烅S.t.∑Nei=E,ei烆烄MaxR(x)烅S.t.∑N烆烄Min∑N烅S.t.RR烆烄MinC(E)=∑NS.t.∑N烅Ri(t)=1-e-biei烆S.t.R(x|T)R{Madhu模型[20]C+D+ECBS+UTEX+PD+TEFMinEC(T)MaxR(t)烄S.t.∑N烅烆Jha模型[2]A+CCBS+UT(EX+SS)+Leung模型[85]ACBS+UTEX+PD+TEFXie模型[3]Fiondella模型[21]ACBS+UTEX+PDBerman模型[86]ACBS+UT+IT-注:①研究类型包括,A:资源分配;B:资源控制;C:成本模型;D:最优发布;E:敏感性分析.②阶段包括,UT:单元/模块测试;IT:集成测试.③SRGM类型包括,EX:指数型;SS:S型;PD:完美排错;ID:不完美排错;TEF:测试工作量函数.④方法包括,AM:解析方法;NM:非线性方法;DP:动态规划;GA:基因算法;LMM:拉格朗日乘子法;KTC:库恩-塔卡条件;SVP:鞍值问题;DES:离散事件仿真(基于率的仿真).i=1(ai-mi(t))eiE,ei0eiE,ei0i=1i=1i=1i=1i=1i=1TiTi=1ei=ei=1i(ei0)∧{eiinf{ei∈:ri1eiE,ei0,i=1,…,Ni=1biBi=1rir0,1iPage177.4小结综上,我们通过分析表5可以看出,一个一般化的优化问题可被描述为,在组成构件软件的不同构件间分配有限的测试资源(表现为TE),以便在一个给定的以可靠性为核心的目标能被实现,且实现该目标时的全部软件(测试)成本应最小化.OTRART问题与构件软件的体系结构、构件模型或者说构件可靠性增长模型紧密相关,因而也受制于二者的研究进展:(1)体系结构代表了构件软件的内部结构信息,其中必然涉及到转移概率pij.我们认为,当设计文档可得时(例如UML图),采用静态剖面工具或仿真方法可获取体系结构的相对准确信息;若设计文档不可得,基于源码和目标代码的抽取工具,甚至动态剖面追踪工具(例如gprof)也可获得体系结构信息,但此时并不够准确;(2)构件模型利用SRGM来描述是最为准确的,因为SRGM是基于实际失效强度可变函数来建模的.构造SRGM需要收集每个构件的失效相关信息,所建立的模型只有接近实际测试环境才具有较强的描述能力.我们通过表5还可以发现,对于OTRART问题,现有采用的模型多为指数型的完美模型(即EX+PD),未来还需要考虑到更加靠近实际的不完美排错相关的软件可靠性增长模型.由于测试成本的有限性,在预定时间内实现可靠性目标是软件开发中需要不断权衡与优化的动过程.OTRART问题中一个潜在的研究方向是既提高或达到预期可靠性等目标时,又不引起超过预定的成本限制.由此可见,OTRART问题正在向多目标优化问题方向发展,这势必增加了问题求解的难度,因此非线性优化算法(例如,单纯型算法、遗传算法、模拟退火算法等)会成为重要的求解选择.8基于率(函数)的可靠性过程仿真现有绝大多数的进行构件软件可靠性度量的解析方法基于马尔可夫模型,并且均假设失效服从指数时间服务[87].随着模块集成度和复杂度的不断上升,传统的(半)马尔可夫方法在进行可靠性预测与性能分析时会遭遇下列问题:处理;(1)“状态空间爆炸”问题使得数学解析上难以(2)为了数学求解的简单,解析方法往往做了较为严格的假设,使之偏离实际测试过程程度较大;(3)对单一构件的可靠性增长,构件间的依赖,以及修复策略等影响因素难以充分考虑;(4)已经有公开发表的关于单一软件(黑盒形式)失效数据集,但是构件软件测试过程数据集至今也仅有一份公开[88],且其可信性也难以确定.在此情况下离散事件仿真DES(Discrete-EventSimulation)[47,89]方法被作为解析方法的替代被引入到构件软件的可靠性分析中,可用以研究多种因素对应用失效行为的影响,现在已经有了广泛的研究[6,11,81,84].软件可靠性仿真基础最早可以追溯到文献[62],在此基础上GSS[46]第一个提出了关于构件软件可靠性的仿真研究,并将其应用到一个终止型应用系统和一个实时的带有反馈控制的系统上,对其失效剖面进行仿真,获得了良好的结果.8.1单一构件随机失效过程建模分析通常假定构件的失效形式为NHPP,进一步被建模描述为一类非齐次连续时间马尔可夫过程NHCTMC(Non-HomogeneousContinuousTimeMarkovChain),即令计数过程{X(t)}表示[0,t]内构件Ci的累积的失效个数.这是因为泊松失效过程(包括NHPP)具有独立增量特性,即每个故障的冒险率均是一个常量,这符合Markov属性,即下一状态仅与当前状态有关而与历史状态无关.当Ci的失效行为被建模为失效率时,{X(t)}仅依赖于构件的失效率:λ(n,t),n是构件的状态,取决于构件失效的个数.{X(t)}可被视为纯死的过程:如果构件的最大失效个数是定值N,到t为止已有i个失效发生,构件的状态被标记为N-i;如果Ci的最大失效个数是一个随机变量i,到t为止累积观察到的失效个数被定义为构件的状态,则{X(t)}可被视为一个纯生的随机过程[12-13,16,46].通常纯生模型(例如,G-O,YamadaS,Duane,Musa-Okumoto,Littlewood-Verrall)较纯死模型(Jelinski-Moranda)更为普遍采用.图7给出两种失效类型建模.Page18整个构件软件级别的随机失效过程依赖于:(1)每个构件的随机失效过程;(2)整个应用的动态体系结构.实际上,纯生/纯死过程是一种特殊的马尔可夫过程,这种情况下,当采用传统解析方法,建模Ci为纯生/纯死NHCTMC时,由于Ci状态与执行之间的交错,应用级别S的随机失效过程不能被建模描述为NHCTMC模型,而且也难以解析处理.8.2剖析:基于率(函数)的仿真理论基础DES中基于率的仿真RBS(Rate-BasedSimu-lation)是最为重要的一种,可以对NHCTMC的实现过程进行仿真,包括纯生或纯死类型,且可将故障检测与修复过程以统一方式处理.RBS认为[13,16,46,87],在一个无穷小的时间间隔(t,t+Δt)内,一个事件发生的条件概率(t之前没有发生)为λ(0,t)Δt,其中λ(0,t)被称为事件发生率或冒险率,里面的0表示起始时间.进一步,在(t,t+Δt)内失效发生的个数的概率满足pr{N(t+Δt)-N(t)=0}=1-λ(0,t)Δt+o(Δt)烄pr{N(t+Δt)-N(t)=1}=λ(0,t)Δt+o(Δt)烅pr{N(t+Δt)-N(t)=2}=o(Δt烆其中o(Δt)是无穷小量,满足limΔt→0明(t,t+Δt)内失效出现两次的概率为o(Δt);不发生的概率近似为1-λ(t)Δt.这样在(0,t]内该事件不发生的概率为P0(t)由于m0(t)是λ(0,τ)的积分形式,故被称为累积冒险率(对应失效发生).m0(t)满足m0(0)=0和m0(t→)→.记随机变量T为第一个失效事件发生的时间,则其累积概率分布函数F(t)和概率密度函数f(t)如式(10)、(11)所示:F(t)=Pr{Tt}=1-P0(t)=1-e-m0(0,t)(10)实际上,对于给出下一个事件发生的概率分布函数与密度函数的表达式是非常困难的,基于率(函数)的仿真方法可以对此进行有效处理.8.3基于率(函数)的构件级别仿真程序基于率控制的事件仿真主要借助于一个率函数,例如第8.2节中的λ(0,t),通常也标记为λ(t),其设定(t,t+dt)内事件发生的条件概率为λ(t)dt.下面图8中的仿真程序A[12,46]可以对纯生类型的double(lamda)(int,double))NHCTMC进行仿真.1.intcomponent_level_single_event(doublet,doubledt,2.{inttotal_faults_detect=0;3.doublecurrent_time=0.0;4.While(current_timet){5.if(occurs(lamda(total_faults_detect,current_time)))6.total_faults_detect++;7.current_time+=dt;}8.returntotal_faults_detect;}图8的仿真程序可实现(0,t]内返回Ci被检测到的故障数量.判断故障检测由occurs()函数完成,其通过判断与一个[0,1]内的随机数x的关系,若x<λ(n,t)×dt,则失效发生且被成功检测到.实际仿真中λ(n,t)可设定为某SRGM的故障检测率函数.显然,仿真程序A能够较为容易地被修改为多构件系统执行的仿真,可以获取(0,t]内每个构件累积检测到的故障个数mi(t)和执行时间ti.8.4构件软件可靠性过程仿真分析可靠性过程仿真主要对软件在测试过程中的主要特征进行模拟,如果把软件当做一个整体,来仿真其可靠性度量,这被称为黑盒仿真[62,87],此时对软件的内部结构不做考虑,仅涉及其与外界的交互.相比之下,白盒仿真将软件内部构件间的依赖也作为仿真要素进行考虑,能够获得软件运行内部更多的细节.白盒仿真主要是考虑到了构件之间的关联性.Huang等人[87]给出了两种白盒仿真方法:方法1:相关系数法.使用一个变量μij做为构件间关联的相关系数,μij可通过每个构件的单元测试数据计算得到;方法2:转移概率法.考虑构件间的转移概率pij.由于方法1主要是在黑盒仿真的基础上引入相关系数,这里不做讨论,下面给出方法2的基本仿真思路.转移概率法中,构件间的转移概率pij可事先获得(例如,借助剖面工具),若Ci执行完,依据相关的转移概率来获得将要执行的构件.在此,仿真执行的输入是构件的失效行为(一般被建模为SRGM)和构件间转移概率.Gokhale等人[12]基于概率转移法对构件软件的可靠性相关分析进行了仿真,涵盖支持多种修复策略、关键构件的容错配置以及考虑构件覆盖参数;此外,基于修复率μ(j,t)为可能的5种函数形式(即μ,j×k,α(1-e-βt),αe-βt等),Gokhale等人[13]又提出了可以容纳各种情况的统一的仿真程序框架.在构件软件可靠性分析或仿真中,由于不同构件的差异,不同故障可能被分配到不同的修复Page19队列中进行修复,因此基于排队论(队列思想)进行可靠性分析或仿真成为近年来的研究热点[10,47,89].文献[10]提出了基于有限服务队列的构件软件故障排错模型,如图9所示.HMSQM由三部分组成,故障检测过程实现对构件软件故障的检测,考虑到不同构件与故障的差异,经故障修复策略分配后进入到k个不同的修复队列中,由故障修复人员进行排除.从修复人员的角度来看,不同类型的故障以各自不同的速率到达和离开,使得整个排队系统的状态处于复杂的动态变化中,其随机性较大,应用马尔可夫等解析求解方法显然不适合.为此,所开发出的仿真程序实现了HMSQM的工作过程,由ALLOCATING,DETECTING和CORRECTING三部分组成.ALLOCATING完成为故障分配测试资源的任务,这里的测试资源主要是指排错人员;仿真的关键是DETECTING和CORRECTING,二者分别实现故障的检测和修复,其中检测与修复成功的判断由前面所述白盒仿真中的转移概率法来实现.即用rate(t)表示率函数,对应前面介绍的λ(n,t),通过判断其与(0,1)之间动态产生的随机数x的大小关系来完成:在微小的时间间隔dt内,若x<rate(t)dt,则可以认为所关注的事件(故障被检测到或被修复)发生.显然,需要根据实际的仿真对象设定合适的故障检测率函数和修复率函数.HMSQM及其仿真程序的不足是假设过于苛刻,与实际差距较大:例如,(1)认为集成测试过程仅有故障检测与修复环节;(2)故障严重程度均一致;(3)缺乏对不完美排错[47]的考虑.集成测试中的随机因素较多,因此测试过程中存在多个随机子过程,如何类似于仿真故障检测与修复过程来仿真测试中的随机现象,使得仿真更加靠近实际,是可靠性过程仿真未来研究的一个重要方向.另外,现有研究均是假定构件间的失效率独立不相关,或者所有构件采用同一常量失效率,这些都为可靠性过程仿真带来了不确定性.8.5仿真方法的优势与不足综上,在研究方法上,除解析方法外,非参量方法中的仿真方法正在受到越来越多的重视[29],由各类解析方法过渡到仿真方法是可靠性分析发展进程中的重要转变.仿真技术的优点在于,其能够放宽传统解析模型与方法中很多假设,不受时间的限制,可对构件软件内部结构的交互运行等进行定性的仿真,不仅可以应用在测试阶段也可适用于操作运行阶段的可靠性分析.但同时也必须看到,仿真的不足是由于软件失效的随机性,仿真方法只能给出一种整体上测试过程的趋势预测,无法对真实失效的发生时间给出精准度量,因此在研究中要对此有明确的认识,并使仿真研究尽量靠近实际.9基于PCM的可靠性过程在目前研究中,构件软件可靠性度量的解析方法主要基于马尔可夫模型,且传统研究包括仿真中的一个基本假设是,测试过程中软件保持不变[87].整个应用的动态结构取决于系统被如何使用,即操作剖面,其可以通过执行程序或在开发的早期阶段通过仿真其执行来获得.因此,基于动态结构的可靠性分析需要考虑应用的使用特征.近年来,采用PCM[23,48]进行构件软件的建模与描述,并把可靠性作为软件应用的一个重要服务质量QoS进行分析与预测成为热点.9.1PCM基本介绍PCM是专门针对基于体系结构的构件软件这一特定领域的性能预测的一种建模语言,可提供模型驱动的工具链用以分析处于设计阶段的构件软件质量属性.目前PCM已发展成为成熟的不仅适用于构件软件也涵盖面向服务的软件系统,并用以预测其非功能属性的建模语言和开发环境.相比于其他建模语言(例如UML),PCM将与构件软件相关的人员以角色的身份融入系统的体系结构建模中,从这些角色的视角给出了其对系统的参与贡献与相互间的配合.其快速发展不仅得益于其出色的建模能力,同时基于其成熟的工具集支持使得相关人员可以方便地创建、分析PCM案例[49],例如:(1)基于EclipseRichClientPlatform(RCP)平台①和EclipseModelingFramework(EMF)②,①②Page20PCM工具集提供了图形化的编辑环境用以创建模型实例、集成的性能预测和自动模型转换等;(2)性能预测的结果被可视化为直方图或使用图表库JFreeChart①的累积分布函数来进行表示;(3)默认的PCM仿真器SimuCom;(4)此外,统计检验中为了验证性能预测结果可以调用统计工具集R②中的接口.9.2基于PCM的构件软件可靠性预测在系统开发阶段,应用基于体系结构的可靠性预测(例如第4与6节所述)在适用性与准确性上会遭受到如下问题:(1)由于准确的使用剖面OP(包括转移概率pij)很难获得,现有很多方法没有明确的建模系统使用剖面OP对可靠性的影响;(2)很多方法缺少对系统执行环境和所需资源对执行中可靠性的影响分析;(3)大部分方法使用某种马尔可夫模型(DTMC/CTMC)来建模体系结构和执行可靠性预测,事实上,马尔可夫中的标记与标准软件工程中(UML,SysML)的概念与标记并不一致.针对这些问题和不足,Brosch等人[23]基于PCM提出基于体系结构的可靠性预测方法,其提供了类似于UML的建模标记,并开发了自动转换工具实现将PCM转换为马尔可夫链,进而进行可靠性评价.9.2.1基于PCM进行可靠性建模PCM可被划分为4个独立的部分,且用开发者角色来描述系统的所有参与者,每个角色对应一个模型,4个互补的模型提供了整个构件软件应用的架构视角和性能相关的行为描述[50],如表6所示.在表6的基础上,为进行可靠性建模,应在基图10基于PCM的构件软件可靠性过程角色角色对应的模型构件开发者服务行为模型软件架构师架构模型系统部署者部署模型领域专家使用模型于PCM的构件软件结构模型的基础上进行如下的扩展添加:(1)构件间的交互被抽象为内部动作,这样在基于PCM的构件软件体系结构中为每个内部动作分配一个失效概率fp,用以表示某服务执行中失效的可能情况;(2)通信连接失效clf用以表示构件软件应用中消息传输过程中的失效概率;(3)硬件资源的不可用也会引起一个服务执行的失效,该失效常用MTTF和MTTR来表示.这样将fp,clf和MTTF/MTTR扩展进基于PCM的构件软件中,就实现了用PCM进行构件软件的可靠性建模表示.显然,这种表示相对于传统的DTMC表示更能从包括系统角色、角色对应的模型、构件部署、系统架构、资源分配以及失效概率等在内,来系统化完整地描述一个构件软件应用.考虑系统的一个使用场景执行的情况,则在给定PCM实例下,其成功执行的概率PSE可表示为PSE=1-POFOD,其中POFOD表示按需失效概率.9.2.2基于PCM进行可靠性预测图10给出了基于PCM的构件软件可靠性过①②Page21程,可以看出系统的4个角色都参与到其中,与以往单纯的可靠性分析模型有很大不同.图中虚线框部分①给出了PCM建模过程,由PCM建模工具在集成化环境下完成;②描述了可靠性的预测过程,即当PCM实例在设定某使用场景后,从第5步开始到第9步结束,可靠性预测过程被逐步实施.(1)求解参数依赖关系参数依赖用以表示输入参数值对系统控制和数据流的影响.具体来讲,需要确定程序变量在分支等处的转移概率.(2)确定物理系统状态概率设资源集合为R={r1,r2,…,rn},每个资源ri有两种可能的状态,即OK和NA,则ri的稳态可用性值Av可表示为Av(ri)=MTTFi/(MTTFi+MTTRi).令s(ri,t)表示t时刻ri的状态,则可得P(s(ri,t)=OK)=Av(ri);P(s(ri,t)=NA)=1-Av(ri).设S为系统状态的集合,即S={s1,s2,…,sm},则对于某状态sj∈S可表示为t时刻所有资源的状态的联合,即sj=(sj(r1,t),sj(r2,t),…,sj(rn,t))∈{OK,NA}n.最终,可得t时刻系统处于sj状态的概率P(sj,t)可表示为j∈{1,…,m}:P(sj,t)=∏n(3)生成与评估马尔可夫模型PCM高度依赖于模型驱动的软件开发技术,现有研究中为了进行QoS预测均是将PCM的设计模型转换为某种解析模型(例如,随机规则表达式、队列网络模型、马尔可夫模型等)[49]或仿真系统[50].①每个状态下DTMC生成与评估.对于使用场景中的每个行为B可被分解为一系列的动作集合,即B={A1,A2,…,An}.采用PCM工具集中的工具或手工可将B转换为DTMC,所得到的DTMC是吸收的和非循环的.则B的失效概率fp(B)可表示为fp(B)=∏n能的动作的失效概率.则物理系统状态sj时,某使用场景的成功运行概率PSE可表示为PSE(sj)=1-fp(B).显然对于整个系统状态S={s1,s2,…,sm},都可以计算出每个状态的PSE(sj).②结果聚集.最终,可以得到整个系统,即构件软件应用成功执行的概率PSE如式(13)所示:其中P(sj,t)表示系统处于状态sj时的概率,如式(12)所示.可以看出,整个可靠性预测过程与前面的基于马尔可夫类的解析方法或仿真有很大的不同,最明显的是其在PCM实现基于体系结构的可靠性性能建模基础上来实施可靠性预测,整个过程显示出标准软件工程的显著特征.9.3讨论综上,PCM的出现丰富了可靠性过程研究方法,是对传统方法的极大突破.这可被解释为:基于PCM的构件软件可靠性预测不仅能够兼顾到运行时可变的特性,而且将更多的用户及其视角特征融入到可靠性预测中,是对传统基于马尔可夫模型与转移概率相结合方法的提升,是对包括可靠性在内的QoS建模与预测的新发展.我们认为随着各种新开发范型的不断发展,可靠性分析结合这种多角色参与的设计模型是一个重要方向,因为作为一种重要的质量属性,可靠性研究需要适应软件开发和设计的循序变迁.目前,基于PCM的可靠性分析是一个新尝试,有效的研究还未深入展开,还需要进一步深入研究和更多的运行实例去验证.10研究趋势分析与未来工作综合上述讨论,结合现有的研究成果,我们认为,构件软件可靠性过程研究已在可靠性研究(偏向容错领域)与软件工程研究(软件工程领域)中有效展开;除前文每节中已明确指出研究中存在的问题外,另一方面,下述有关构件软件可靠性过程研究趋势值得研究人员去关注和探索.这些研究问题趋势与研究环境、研究对象和研究方法紧密相关,而且更多地正在突破现有的技术思路.10.1复杂不完美环境下结合非参量求解方法(1)复杂的测试与运行环境下可靠性过程研究实际的软件运行环境是较为复杂的,以测试环节为例,在单一软件的研究中,这被称之为不完美排错环境[11,47,90],相比之下,构件软件的测试包括单元测试、集成测试和系统测试,测试的环境更为复杂,所面临的随机性的不完美因素更多,因此研究中考虑更多的构件软件实际的运行特征到研究中,是不断扩展构件软件可靠性研究准确性的累积趋势.例如,①增量式集成测试过程中每个构件参与集成测试的起始时间点ti不尽相同,在这种情况下,除了对构件软件应用的体系结构模型进行分析求解外,还需要加入起始时间点来对构件使用情况进行建模;Page22②现有研究中[8,14-16,41,38-39],无论测试阶段还是(操作)运行阶段,均认为转移概率pij表示构件间执行控制的转移(交换),可以表示为操作剖面OP的函数:pi,j=f(OP).实际上,转移概率并不能完全等价于操作剖面,还与执行时间等因素有关.通常控制流图被作为描述软件内部结构的有效方法,在测试过程中其可遍历构件间的执行路径,但当构件规模增大时,问题过于复杂.近来,基于简化的控制流图,Mohamed等人[91]提出了连接依赖图作为构件间和构件内的控制流转移的依据,但还需要更多的实例验证;③实际上对于整个应用的失效往往由系统中的关键错误引起,对其产生、传播与演变的动态机理在当前研究中还较为薄弱,文献[49]中的方法尚需全面而且真实的实验来验证.(2)可靠性求解需向非参量求解方法过渡从第4与第6大节所述中采取的可靠性求解方法可以看出,基于转移概率与各种马尔可夫模型的求解方法,当构件个数与系统状态急速上升以及研究环境考虑随机因素增多时,其数学研究变得异常复杂[92].因此寻找非参量求解方法已成为一个重要的替代,例如人工神经网络、随机Petri/Reward网[93]、数据挖掘和支持向量机[94]、贝叶斯方法[95]、启发式算法(例如遗传算法)等非线性方法.这些非线性方法本质上可被归属到机器学习范畴,其在针对单一软件的SRGM的分析中已得到应用,但在构件软件可靠性研究中还较为少见,我们认为随着解析方法(参量方法)的局限性进一步暴露,这些方法可以成为较好的替代尝试.(3)缺少描述构件软件可靠性增长的有效模型整个构件软件的可靠性依赖于每个构件的可靠性和该应用的体系结构[33,35].不同构件由于其复杂性以及在整个构件软件中重要性的不同,其可靠性增长并不相同.差别建模这些不同类型构件的可靠性应该被充分考虑进来.除了MAPATHNHPP方法,至今尚未有进一步的明确的解决方法被提出.虽然SRGM在黑盒可靠性分析中应用在单一的软件上研究成果丰硕,但在构件软件领域还未有效展开.(4)扩展构件软件体系结构使其适用于多种仿真从体系结构角度来看,构件软件可以被看做树形网络结构,甚至是一种分布式结构.这样,除了现有的DES、PCM仿真环境/工具外,用蒙特卡洛仿真对其不确定进行模拟,基于网络的仿真,复杂系统建模与仿真,以及分布式仿真优化技术就可以被拓展进构件软件可靠性过程研究中,这为各类仿真技术与可靠性研究的结合带来新的机遇和挑战.10.2容错体系结构与硬件系统构件化(1)容错配置下可靠性过程程序测试过程中,80%的故障,很可能来自20%的构件[96],为关键构件进行容错配置成为一种可靠性增强选择.关键构件及其容错构件可以看成整个构件软件应用中的一个复合构件,与系统中其他构件之间进行交互可提高可靠性.因此,考虑容错构件以及容错配置下构件软件应用的体系结构模型并进行可靠性研究应被有效展开.目前仅有Pham等人[97]基于容错的思想进行构件软件的可靠性预测见诸报道.(2)基于硬件(设施)物理系统抽象的可靠性由于构件定义的外延较宽,容易得知,若将实际运行中的物理硬件系统的组成部分从体系结构的视角进行抽象,可以得到构件化的组成,进一步地可用构件软件可靠性过程思维进行可靠性研究.例如,文献[98]对一个微引擎系统各部分摩擦面的磨损过程进行建模抽象为构件软件,把构件的降级失效过程描述为线性(Xi=φi+θit)、凹形或凸形函数来表示.就目前,可搜集到的文献来看,该方面研究尚未有效展开.10.3集成化的可靠性建模表示与分析(1)可靠性建模表示从第4节对目前已经提出的关于建模的介绍可以看出在下述3个方面存在的问题需要解决:①基于体系结构的建模技术,尚不能系统化和集成化地对构件Ci、构件间接口Iij和体系结构进行准确建模;②各种类型的马尔可夫模型是目前描述体系结构的主要手段,存在着“状态空间爆炸”的问题倾向,我们认为基于图理论[99]的描述可以作为尝试选择;③另外,建模应把构件执行时间、接口失效等因素考虑进去.(2)模型驱动与面向服务的集成化可靠性分析从第9节关于PCM支持下可靠性分析中可以看到,应用标准软件工程中的模型驱动与面向服务的可靠性分析可以使得研究变得系统化与高效,且容易扩展,例如文献[48,100]所开发的KlaperSuite集成平台.但这其中有两点是现有可靠性研究人员面临的挑战:①基于PCM的构件软件可靠性分析给传统仅针对可靠性分析的研究人员带来了一定的困难.这是由于以往研究中与软件工程相结合得并不紧密,尤其是模型驱动的和面向服务的开发技术,Page23研究人员只需采用某种解析或仿真的方法就可以展开工作,PCM的出现为研究可靠性的研究者提出了一个新尝试和新挑战;②现有PCM主要用于设计阶段,能否像很多构件软件可靠性度量与评估方法适用于运行阶段是对PCM提出的一个挑战.10.4开源软件与新计算环境下可靠性过程(1)开源构件软件可靠性过程开源构件软件可靠性研究已得到关注[101-102],基于公开的源码属性度量工具①②③可对开源软件的静态可靠性进行度量.此外,结合其开源特点在运行时的可靠性分析中进行有效动态度量是评价开源软件QoS的一个重要方面.例如,文献[103]对开源构件进行了可信评估,使得软件系统集成者能够快速对构件可信性进行度量.(2)新计算环境下可靠性过程新计算环境下的研究包括云计算环境下以及移动互联网络环境下可靠性过程研究.同时网构软件系统[104]中软件应用和硬件资源进行类似构件/模块化的部署,进而从更为抽象的观点进行构件化的建模与可靠性分析等研究也值得关注.尤其是大规模(分布式)网络环境下,网构软件可以动态部署,具有可变结构,其动态可靠性应得到关注.此外,还包括嵌入式系统下构件软件可靠性研究等.11结束语通过本文的系统述评,可以看出,从研究对象的不断靠近实际构件软件内部结构特征,从采用的技术方法不断缩小假设范围,从偏向容错领域的可靠性到软件工程中的QoS,对构件软件的可靠性内容与方法上的研究正变得日益丰富.另一方面,由于实际开发、测试与运行环境的随机性与多样性,可靠性研究也正在由以往偏向“完美”向“不完美”过渡,因为真实的环境即是“不完美的”.本文对构件软件可靠性过程领域的研究问题、技术思路和成果进展,以及未来趋势进行了系统化的归纳总结,希望帮助研究人员促进该领域的研究工作进一步向前发展提供支持参考.致谢这里,我们向在本文写作与修改过程中给予无私支持和提供宝贵建议的同行表示真诚感谢.特别感谢审稿人和李刚老师,他们提出的宝贵意见和建议对提高本文的整体水平有很大帮助!
