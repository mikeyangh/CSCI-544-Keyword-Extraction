Page1一种基于结构划分概率的口令攻击方法邹静1),2),3)林东岱1)郝春辉2),3),4)1)(中国科学院信息工程研究所信息安全国家重点实验室北京100093)2)(中国科学院大学北京100190)3)(江苏淮阴师范学院江苏淮阴223300)4)(中国科学院自动化所复杂系统与智能科学重点实验室北京100190)摘要选择有效的口令结构是提高口令字典攻击命中率的有效方法.人们在记忆口令时,通常不会一次性进行整体记忆,而是将口令划分成块分别记忆的.基于此,文中分析了已有的口令结构,提出了依据划分概率对口令结构进行再次划分的口令攻击方法.该方法将攻击口令的焦点放在高概率的口令结构上,通过对高概率的口令结构进行再次划分,产生更有效的口令结构,并用它们来产生候选口令,从而提高攻击命中率.最后通过真实口令测试数据对该方法进行了验证,实验结果表明,给定相同数目的高概率口令具体结构,通过划分,文中的方法与MattWeir方法相比能够多恢复20%~30%的口令.根据攻击结果,文中的方法还可以更新所使用的字典,以达到学习的目的,提高后续攻击效率.关键词口令攻击;划分;上下文无关文法;口令结构;计算机安全;信息安全;网络安全1引言虽然基于图像、视觉和指纹等的认证方法已经开始大量应用于认证用户身份[1-4],但人可记忆的文本口令认证方法以其方便的应用和极低的成本仍被广泛应用于当前的各类系统中.早期部分系统采用直接存储口令本身来进行比对认证,攻击者很容易通过攻击服务器上存储的口令文件来直接获取口令.2011年CSDN和人人网等网站密码大量泄漏的原因就是早期使用过这种方式保存口令①.现今大部分系统是保存口令的Hash值,当用户登录时,系统通过一个单向函数H来对输入的口令进行计算,将得到的Hash值与存储的口令Hash值进行比对,如果一致则登录成功.这种认证方式是利用了单向函数的单向性(给定输入,计算Hash值是容易的;但给定Hash值,计算出输入值是困难的)保证口令的安全.这样即使攻击者获取到存储口令Hash值的文件,也很难得到口令.还有一些系统采用加盐值的方法来进一步保证系统的安全性,系统以口令和盐值作为输入参数来计算Hash值,这里的盐值通常是一个随机值[5].攻击者通过猜测口令,并且将计算出的Hash值进行比对的过程称为口令攻击.因此,口令攻击的核心是猜测出可能的候选口令.那么,如何生成这些候选口令,使其具有较高命中率,并且使产生口令的方法具有实用性?最一般的方法是穷举,即根据口令字符集列出所有可能的口令,但是在口令长度大于8个字符的情况下,口令搜索空间会变得很大,此方法就变得不可行,不具有实用性.然而人的记忆能力是受限的,这使得人们选择的口令在字符和组成结构的分布上并不均匀.因此,口令攻击的研究主要围绕如何利用这些概率分布缩减口令搜索空间,产生候选口令集合,以达到较高的命中率[5-9].常用的口令攻击工具JohntheRipper(JtR)②,主要通过利用字符频率和对单词(或已有的口令)使用一些简单的变形规则来产生候选口令.JtR对简单口令的攻击是有效的,但产生的规则数量较少,而且对较长口令或构成较复杂口令的攻击能力非常有限,因此攻击命中率受限.研究者在此工具上进行二次开发,相继采用各种技术来提高它的攻击效率.随着自然语言处理技术的发展,研究者开始考虑将其应用到口令攻击上[10-11].2005年Narayanan和Shmatikov[10]指出人可记忆的口令在字母频率上与自然语言中字母在单词中的分布是类似的.他们提出了一个算法,主要应用零阶或多阶马尔科夫链模型来产生候选口令,同时采用判定有限自动机来产生一些口令结构.他们将此算法应用于时间存储折中攻击,算法本身也是一种时间存储折中方法.相对于穷举攻击,该算法有利于大幅缩减搜索空间,一定程度上提高了攻击命中率.但由于计算时的内存需求,当攻击口令较长时,会降低计算速度,而且采用判定有限自动机产生的口令结构在数量和速度上也有限,使得其对具有较复杂结构口令的攻击命中率有一定限制.此后研究者[12]指出此方法可以用于分布式攻击.2009年Weir等人[11]考虑到口令组成结构的分布概率,提出了一个以概率降序产生口令结构的方法,这种方法丰富了JtR的变形规则,有效提高了攻击的命中率.由此,研究者将目光投到对口令组成结构的分析和研究上.基于他们的工作,研究者相继提出了一些新的口令创建策略[13-14]以及以上方法的实验分析比较结果[15-16].但是,MattWeir方法增加的是基本的口令结构,而基本的高概率口令结构所能产生的口令数量是比较少的,因此大部分的攻击计算量集中到了具有低概率口令结构的口令上,这虽然有利于攻击一些少数具有特殊结构的口令,但却增加了大量的计算.人们创建的口令都是方便记忆的,因此大部分口令的结构是非常有限的.而且在记忆口令时,大部分人并不都是对口令整体进行一次性记忆,而是习惯划分成块进行记忆.例如:口令“AliceBob19820601”,通常会被划分成“Alice-Bob-年-月-日”来记忆.再比如对口令部分是手机号码串的记忆,大部分人习惯以“3个数字+4个数字+4个数字”的方式进行记忆.一些口令或口令的部分是由多次重复的串组成,如口令“nbanbanba”,是以“nba-nba-nba”的方式记忆,即3个“nba”.而这些在以往的口令统计分析时会被简单地处理成“8个字母+8个数字”、“11个数字”和“9个字母”.如果我们能够根据用户口令的划分习惯对高概率的口令结构进行划分,那么就可以提高攻击效率.本文着眼于具有高概率的口令结构,在MattWeir方法基础上,提出了一个基于口令划分概率的①②Page3口令攻击方法,该方法将这些高概率的口令结构按用户划分习惯进行再次划分,生成新的更有效的口令结构再进行攻击,增大高概率口令结构结合字典所能组合出候选口令的数目,这样便可将有限的计算能力用于高概率的口令结构上.在相同数目的高概率口令具体结构下,通过再划分,该方法与MattWeir方法相比能多恢复出20%~30%的口令,提高了攻击命中率.此外,该方法具有学习功能,它能够根据攻击结果更新使用的字典,提高攻击效率.本文第2节介绍几种利用口令字符及组成结构的分布概率来进行攻击的方法;第3节对已有口令的结构进行分析;第4节分析用户口令组成结构划分习惯,并基于此提出一个口令攻击方法;第5节给出实验结果,并与MattWeir方法的攻击结果进行比较;第6节是对本文工作的总结和展望,提出可能的优化和进一步的工作.2相关工作现在使用的口令攻击方法都会采用一些变形规则来缩小口令搜索空间,以提高攻击命中率.这里介绍三种采用变形规则的攻击技术.2.1JohntheRipperJohntheRipper(JtR)是较早的口令攻击工具,使用者能对其进行二次开发,因此吸引了很多人在其上实现新的攻击方法来提高攻击效率.JtR的基本攻击方法是根据字符频率进行攻击以及对词典里的单词使用一些变形规则来产生候选口令.此外,使用者还可以添加和编写新的规则.JtR可以结合词典,通过预先定义的变形规则来改变原有的单词,从而生成口令.这种方法有两个问题:(1)变形规则简单,且需要用户人工编写,数量有限;(2)口令搜索空间有限.口令的搜索空间依赖于已有的词典和变形规则.例如利用单词后加两个数字的规则,将单词“bread”变为“bread22”.其搜索空间为space=wordnum×102.这里space表示搜索空间,wordnum是字典中的单词数量,102表示两个数字的组合总数.依据有限的简单变形规则对词典中的单词进行变形或组合产生的候选口令数量是有限的.攻击者可以通过将已有的变形规则进行再组合来编写新的更复杂的变形规则,以此来产生更多的候选口令.但随着规则复杂程度的增加,加大了组合难度,而且复杂的变形规则也会延长计算候选口令的时间,从而影响攻击效率.2.2基于马尔科夫链的时间存储折中攻击此方法由Narayanan等人提出,它的一个重要贡献是用马尔科夫模型去产生人可记忆的口令字符序列,另一个贡献是提供了一个索引算法[10].Narayanan方法主要根据零阶或高阶马尔科夫链模型方法来产生口令的字母串部分,并结合有限自动机模型产生的规则来生成候选口令.此方法的限制在于需要大量的预计算,而所需存储的计数树的大小也会受到内存限制.当口令比较长时,树剩余部分的计算和内存外存中表的切换都会增加较多的攻击时间.2.3基于概率上下文无关文法的口令攻击方法2009年,在泄露的口令集合基础上,Weir等人[11]应用概率上下文无关文法来产生口令结构作为变形规则,并使用优先队列以概率降序来产生半终端结构.给定一个半终端结构,用词典中的单词取代字母子结构部分,能很快产生终端结构,即候选口令.指定An,Dn和Sn分别为长度为n的字母串、数字串和特殊符号串.文中使用这些特殊符号来表示口令结构,如口令“pass@22”的结构表示为“A4S1D2”,其半终端结构为“A4@22”.通过对泄露口令的统计分析,该方法指定基结构如“A4S1D2”的概率为0.6,表示60%的口令属于这种结构.类似,如果“S1→@”的概率为0.3,“D2→22”的概率为0.2,则半终端结构“A4@22”的概率为0.6×0.3×0.2=0.036.此方法是用优先队列来产生半终端结构,每次队列输出一个半终端结构,然后根据这个半终端结构或队列中第一个半终端结构来产生新的半终端结构,并按概率插入到队列中,这使得后输出的半终端结构的概率始终低于前面所输出的半终端结构的概率.因此,队列能按半终端结构的概率降序输出.该方法与JtR方法相比,能自动产生更多的变形规则.MattWeir方法是通过将具体结构中数字部分和特殊符号部分替换成数字串和字母串来产生变形规则,产生的规则通过优先队列按概率由高到低产生.与JtR的方法相比,这种方法能够自动而非手动产生大量的变形规则,增大了搜索空间.但是在已有字母串、数字串和特殊符号串一定的情况下,根据具体结构,这种方法能搜索到的子空间在整个口令搜索空间的分布上与具体结构的分布概率不一致.例如:Hotmail口令集中,具体结构“A6”出现的概率为10.302%,而结构“A6S1A7S1D2”出现的概率为0.023%.前者的搜索空间为Page4这里NumA6表示已有的长度为6的字母串的个数.后者的搜索空间为space=NumA6×NumS1×NumA7×NumS1×NumD2显然后者的搜索空间远大于前者.根据对实际应用口令的分析,高概率具体结构的结构长度绝大多数小于等于3,结构长度大于3的具体结构能覆盖到的口令非常少.因此出现由高概率具体结构产生的候选口令数目少,而低概率具体结构产生的候选口令数目反而多的情况,这造成大部分的计算能力都浪费在具有低概率具体结构的口令上,降低了攻击命中率.以上3种方法都考虑到使用变形规则来提高攻击命中率.前两种方法只是将其作为辅助的攻击手段,考虑的变形规则比较有限.MattWeir方法则将重点放在了变形规则上,通过产生口令结构,丰富了变形规则,并且考虑了这些规则的概率,以概率递减的方式产生出规则集,有效地提高了攻击命中率.本文方法也将变形规则作为研究重点,在MattWeir方法的基础上,着眼于高概率口令结构,通过增加这部分结构,来扩充变形规则集合,从而将有限的计算能力投入到更有效的攻击中.3口令结构的分析3.1问题的提出MattWeir方法中口令结构对应的搜索空间的分布与口令结构的分布概率并不一致,虽然能够按概率递减地使用口令结构,但是根据具有高概率的口令结构组合出来的候选口令数目并不多,反而是使用频率低的口令结构能组合出大量的候选口令,这影响了攻击的命中率和攻击效率.由此引出了两个问题:(1)如何利用已有的口令结构产生更多的更有效的结构,来取代低概率的口令结构,从而生成更多候选口令,使攻击变得更有效?本文的思路是对已有高概率口令结构进行再划分.(2)如何进行再划分?解决思路可以是进行机械划分,设定划分区间大小,按此来进行硬性划分.如设定划分区间为2,口令结构“A6D4”可再划分为“A2A2A2D2D2”.但这样的划分并不符合用户划分口令的习惯.下面的章节对已有口令的结构进行了分析,得出了高概率口令结构的分布特点,以及用户划分口令结构习惯.据此,本文提出了一个根据口令结构划分概率来对概率口令结构进行再划分的方法.3.2已有口令的结构分析在本文中,口令的字符集包含字母、数字和特殊符号.An,Dn和Sn分别表示口令中长度为n的字母串,数字串和特殊符号串.口令的具体结构是指由这些符号按顺序表示的口令实际结构组成方式.如口令“password12@21”的具体结构为“A8D2S1D2”,口令长度为13.该口令分别由A8,D2,S1和D2四部分子结构组成,因此该口令结构长度为4.实际上,口令结构长度也反映出用户在构造口令过程中的划分次数.珡Am,珡Dn和珚Sk分别表示由一个口令中全部字母组成的串、全部数字组成的串和全部特殊符号组成的串的结构,该口令中所包含的字母个数、数字个数和特殊符号个数分别为m、n和k.口令的抽取结构是用以上符号表示出口令总共由几个字母、几个数字和几个特殊符号组成.例如,上面口令的抽取结构为“珡A8珡D4珚S1”.在分析口令时,我们得出其具体结构,如果该口令的具体结构串与前面得出的口令的具体结构串相匹配,则说明两个口令具有相同的具体结构,因此我们只保留一个具体结构,并记录下使用该具体结构的口令数目.口令的划分结构是指将口令的具体结构按用户习惯进行再划分后的结构.例如,上面的口令的具体结构经过再划分后的划分结构为“A4A4D2S1D2”.以下表格中所使用的口令数据分别来自网上所泄露的Hotmail、Myspace、Phpbb和Rockyou用户口令集合①②.Hotmail口令集合最初是由匿名者于2009年10月公布在pastebin.com网站上.Myspace口令集合是由一个攻击者通过钓鱼网站获取,最初由研究者于2006年10月在网上公布.Phpbb口令集合是由一个攻击者通过md5攻击而获得的.泄露的Rockyou口令数量非常大,是由攻击者偷取的一些未加密的口令.这些口令集合不同拷贝版本由一些研究者发布到网上,以供研究使用.随机的口令具体结构数目是非常庞大的,例如口令长度范围从1~30,口令的随机具体结构数目可以达到3+32+33+…+330=2779755796.但是通过对以上口令数据集合的统计分析,用户实际使用的口令的具体结构数目远小于随机的口令结构数目,参见表1.①②jects/pipal.php2013Page5口令集合口令数目具体结构数目仅用一次具体结构数目HotmailMyspacePhpbbRockyou表1[17]最后一列显示出,在实际应用中,有一半以上应用到的具体结构仅使用了一次,也就是说大部分口令使用了一些相同的具体结构,这些结构的数量非常有限.表2中进一步显示了少量的具体结构覆盖了大部分的口令.表2口令集合中概率最高的前50、70和100个具体结构数目HotmailMyspacePhpbbRockyou前507456前707618前1007700表2[17]分别显示出口令集合中分布概率排名在前70的具体结构覆盖到了口令集合中80%以上的口令.前100个具体结构甚至覆盖了近85%以上的口令.此外口令结构长度分布也非常有限,参见表3.结构长度HotmailMyspacePhpbbRockyou156612232335431~279841~38527表3[17]显示出口令结构长度为1~2的口令占口令总数目的85%以上,而结构长度为1~3的则占到93%以上.此结果说明在对口令按具体结构进行初次划分后,口令的结构长度非常有限,大部分用户在创建口令时,不会将口令结构划分的很小.但是如果给定具体结构和字母串、数字串、特殊符号串,由于口令结构长度非常短,因此能组合出的候选口令的数量也就比较少,而结构长度长的具体结构虽然能组合出大量的候选口令,但是使用这些结构的口令数目很少.从表4可以看出覆盖口令最多的前100个具体结构中结构长度为2的占了50%以上,而结构长度大于3的具体结构数目极少.具体结构数目-结构长度HotmailMyspacePhpbbRockyou前50-12091819前50-229412531前50-30070前70-120101921前70-248563749前70-314140前100-123142022前100-270675072前100-3319265表1~表4表明覆盖大部分真实口令的具体结构数量非常有限,而且结构长度集中在1~3.在字母子串、数字子串和特殊符号子串的数量一定的情况下,通过使用这些高概率的具体结构组合出来的口令数目比较少.那么如何利用这些高概率的具体结构产生出更多有效候选口令,这正是本文研究的问题.4基于结构划分概率的方法4.1基于结构划分概率方法主要步骤基于结构划分概率的方法旨在根据用户对口令结构的划分习惯,对高概率的口令具体结构进行再划分,产生新的划分结构,最后,将口令中分布的字母串、数字串和特殊符号串按划分结构进行组合,从而产生候选口令.该方法的主要步骤包括:预处理阶段和口令攻击阶段:(1)预处理阶段.产生口令的具体结构,计算出相应的分布概率,筛选出高概率具体结构的集合.分析用户对口令结构的划分习惯,生成抽取子结构的划分子结构集合及其划分概率.(2)口令攻击阶段.首先,利用上一步产生的划分概率,对高概率的具体结构进行划分,生成划分结构集合,并将划分结构按其概率降序输出.其次,我们将不同长度的字母串、数字串与特殊符号串按划分结构组合,产生候选口令,进行攻击.4.2用户口令结构划分习惯分析过程首先,我们获取口令具体结构和抽取结构;然后合并具体结构中属于同一字符集的子结构,比如A2D3A3S1D2→A2A3,D3D2,S{按其所属抽取子结构归类如其中,“”表示“归类于”,如图1所示.这些合并的子结构可以看作抽取子结构的划分子结构.在归类的同时,每个抽取子结构和划分子结Page6构都有对应的计数器进行计数,结束时计算划分子结构的划分概率p.这里分子、分母分别表示具有此划分子结构数目和具有此抽取子结构口令数目.ssi表示第i个划分子结构,esj表示ssi对应的第j个抽取子结构.表5举例说明了划分子结构的划分概率.这里的“$”符号表示其后的结构不可再划分,划分在此终止.抽取子结构划分子结构划分概率/%珡D6→珡D6→珡D6→珡A6→珡A6→珡A6→这里划分子结构中的A6和D6的划分概率高也是符合实际情况的,因为大部分的用户口令中来自相同字符集的字符的聚合度高,这在口令具体结构长度上也有所体现,表现出来的现象是结构长度都比较短.4.3具体结构的再划分获取划分子结构的划分概率后,我们就可以据此对结构长度短的高概率具体结构进行再划分,采用的方法是上下文无关文法.例如,具体结构A6D6的再划分后生成的新结构可以由下述文法产生,这里S表示文法开始的起始点:(1)S→A6D6(2)A6→$A6|$A3A3|$A5A1(3)D6→$D6|$D2D2D2|$D3D3经过这个文法,由具体结构A6D6最终产生的结构数目为N=KA6×KD6,这里KA6和KD6分别表示A6和D6所能划分出的结构数目.经过划分后产生的划分结构的概率为即划分结构的概率=要划分的具体结构的概率×该具体结构各子结构划分概率的乘积.如A6D6的划分结构A3A3D2D2D2的概率=10%×20%×25%=0.005.这里设定A6D6具体结构的概率为10%.4.4基于结构划分概率的口令攻击过程该节给出基于结构划分概率的口令攻击过程.主要分3个步骤.步骤1.对划分子结构进行筛选.这个过程主要是根据划分子结构搜索空间覆盖的范围进行归并和调整.实现过程如下:对抽取子结构对应的划分子结构集合中的元素按概率由高到低依次选取一个元素,将该元素聚合,聚合的结果与其后的每个元素做比较,若有相同的,则将后面与之相同的元素删除.如珡D4→{D1D1D2,D2D2},D1D1D2可以聚合为D2D2,这说明前一个划分子结构实际上覆盖到了后一个划分子结构的搜索空间.因此我们可将后者归并到前一个划分子结构中,并删除这个划分子结构.步骤2.选择高概率的具体结构,用4.3节中的方法对其进行再划分,并按概率从高到低产生划分结构,采用Weir等人[11]文中的优先队列算法,如图2所示.Page7这里假设A6和A6D6具体结构的概率别为90%和10%.图中的结点Nodei用七元组(ConStruct,PreDivStruct,DivStruct,prob,divPos,ChangeOrder,order)来描述,其中ConStruct表示具体结构,PreDivStruct表示双亲结点的划分结构,DivStruct表示划分结构,prob表示划分结构概率值,divPos表示划分位置,ChangeOrder表示替换顺序,order表示该划分结构的输出顺序.这里,我们需要指定划分位置.例如:对于具体结构A6D6,有两个划分位置,指定A6的划分位置为0,D6的划分位置1,所有由此具体结构产生的划分结构只能在这两个位置进行划分.七元组(A6D6,A3A3D2D2D2,A3A3D3D3,0.002,1,3,11)表示划分结构A3A3D3D3是将其双亲结点划分结构A3A3D2D2D2的划分位置1部分的子结构替换成更低概率的划分子结构,这里,将D2D2D2(替换顺序为2)替换成D3D3(替换顺序为3).由图2可以看出孩子结点总是由将双亲结点的部分替换成概率不高于该部分的子结构而产生的,因此孩子结点的结构概率总是等于或小于双亲结点.如果用优先队列的方法按结构概率递减从起始点开始放入结点,每当出列一个结点,就产生其孩子结点,并将孩子结点按概率高低插入优先队列中,这样保证了先出列的结点的概率总是大于等于后出列的结点[11].这里给出基于划分概率产生划分结构的算法,并按划分结构概率由高到低输出,如算法1所示.算法1.基于划分概率有序产生划分结构算法.输入:具体结构集合U和抽取子结构集合W输出:以划分概率的顺序输出划分结构集合V1.给定具体结构集合U={ConStructi|1iTop,TopW={珡A,珡D,珚S},其中珡A={珡Ah|1h字母串的最大珚S={珚Sk|1k特殊符号串的最大长度}.2.FOR(ConStructiinU)3.{4.对所有选定的具体结构ConStructi生成对应的结点Nodei,设定其划分结构概率DivStruct为具体结构ChangeOrder为1,输出顺序order为0,并将这些结5.}6.Node=pop(Q)7.WHILE(Node!=NULL)8.{9.输出出列结点的划分结构Node.DivStruct;10.FOR(t=Node.divPos;t该结点的具体结构长11.{12.生成新的结点tempNode;13.选择抽取子结构集合(如A6)中下一个划分子结14.tempNode.preDivStruct=Node.preDivStruct;15.tempNode.prob=tempNode.prob该划分子结16.tempNode.divPos=t;17.…18.将结点tempNode按划分结构概率插入优先队列Q19.tempNode.ChangeOrder++;20.}21.Node=pop(Q);22.}算法1保证了孩子结点的划分结构概率总低于其双亲结点(子节点划分位置部分的划分子结构不同除外———其划分概率小于或等于双亲结点,其余的与双亲结点相同),从而使先出列结点的划分结构概率总大于等于后出列的结点.此算法也可根据实际计算能力的大小设定划分结构概率的门限值,只选择输出概率值大于门限值的划分结构.步骤3.用已有的字典中的字母串、数字串和特殊符号串取代对应的部分结构,从而产生候选口令.原因在于对应的子串是概率分布的,所以在选择字符串时,可考虑优先使用分布概率高的串进行替换.实际上,这个口令的攻击过程是两个层次的概率组合:一层是口令结构级别的概率组合,另一层是字符串级别的概率组合.4.5字典的更新习目的,提高后续攻击的效率.(1)更新口令具体结构字典:根据破解口令的具体结构,修改该具体结构的分布概率.(2)更新口令划分子结构字典:根据破解口令所使用的划分子结构,修改这些子结构的分布概率.(3)分别更新字母串、数字串、特殊字符串的字典:口令如果是经过划分后通过组合子串破解成功的,则可以根据组合后的串更新该串所属字典,如果根据破解结果,我们可以通过更新字典达到学Page8字典中没有则添加进去并计算其概率值,有则修改其概率值.例如口令“nbabase”,攻击是通过将其具体结构A7划分成A3A4破解成功的,因为长度为7的字母串字典中没有“nbabase”这个单词,它是由“nba”和“base”组合而成,所以可将此单词加入到字母串字典中.A7比A3A4出现的概率高,在下次攻击中出现子串时就可以先被攻击到,而不用通过划分后再获取到,这有助于提高攻击效率.此部分的工作实际上能够增加以前未出现的字符串,更新字典数据.5实验结果本节将比较本文方法与MattWeir方法的攻击效果.5.1数据集根据泄露的口令,在预处理阶段,我们需要做的表6本文的攻击方法与MattWeir攻击方法的攻击效果比较(singles.org)表7本文的攻击方法与MattWeir攻击方法的攻击效果比较(Hotmail)口令测试集合测试集1(55)测试集2(895)口令测试集合测试集1(55)测试集2(895)从横向看,表6和表7显示,无论是MattWeir攻击方法还是我们的攻击方法,当具体结构从前50个增加到前100个时,恢复的口令数目最多增7%左右,而且,随着具体结构数目的增加,这种增长趋势更低.进一步考虑,具体结构数目的增加带来的是搜索空间的成倍扩大.这里假设攻击效率是此搜索空间上恢复的口令数目与实际搜索空间的比率,那么实验结果表明当具体结构数目增加到一定数量,攻击效率会随着具体结构数目的增加将急剧下降.这个结果也间接验证了本文第3节表1和表2的分析结果,即大部分口令的结构集中在少数的具体结构上.从口令结构来源来看,表6的攻击效果比表7略差,这是因为singles.org口令集中的口令数目要准备工作有:(1)生成字母串词典、数字串词典和特殊符号串词典,并用dic-204词典来扩充字母串词典.(2)口令结构词典:这些口令结构来源于泄露的Hotmail和Singles.org口令的统计结果.本实验分别选择各自概率最高的前50、70和100个具体结构.(3)两个攻击口令测试集:Facebook口令集(包含55个口令),某网站口令集(包含895个口令).5.2实验效果表6和表7比较的是分别由MattWeir攻击方法和我们的攻击方法所恢复的口令数目.实验中,为了验证该攻击方法的有效性,实验分为两组,第1组采用的是由singles.org口令集所产生的具体结构(见表6);第2组采用的则是Hotmail口令集所产生的具体结构(见表7).这两张表显示了两种攻击方法所恢复出的口令个数,以及其所占相应测试口令总数的百分比.本文的攻击方法(前70个具体结构)(60.00%)(84.70%)本文的攻击方法(前70个具体结构)(76.36%)(81.90%)比Hotmail口令集少很多,因此,前者获取的具体结构的分布概率没有后者理想.如表7所示,在由Hotmail口令集产生的前50个具体结构基础上,本文的方法分别恢复了74.55%和81.79%的口令,意味着绝大部分口令在对高概率具体结构进行再划分时就被恢复出来了,而MattWeir攻击方法只恢复了34.55%和56.09%的口令.这也说明了,用来产生划分结构的口令数目越多,用户口令结构划分的习惯就越显得有共性,从而由此产生的划分结构更具有通用性.从两种方法的对比效果来看,在具体结构数目相同的情况下,本文的攻击方法都能比MattWeir方法多恢复出20%~30%左右(或者更多)的口令.由此,我们可以看出,通过增加口令的具体结构数目Page9的方式来获得更高命中率的效果并不是很理想,还可能增加了过多的计算量,因此关键在于提高选取的具体结构的有效性.实验结果也说明对高概率的具体口令进行再次划分是非常必要的,这也是本文方法的出发点.6结论与展望口令结构的选取是进行字典攻击时需要考虑的任务之一.攻击时,根据选取的口令结构将字典中的字串(字母串、数字串和特殊字符串)进行组合,组合产生的候选口令所构成的搜索空间的分布决定攻击命中率.MattWeir方法中高概率口令结构所产生的搜索空间分布与口令结构分布概率并不一致.基于MattWeir方法,本文提出了一个基于结构划分概率的攻击方法,能够根据高概率口令结构产生新的结构,以增大高概率口令结构所能覆盖的搜索空间,从而提高口令攻击的命中率.此外,该方法还可以根据攻击结果进行再学习,更新已有的字典数据,有利于提高以后攻击的效率.在接下来的工作中,我们一方面将对该方法的细节部分进行优化,另一方面将研究此方法的并行化处理,以获得更高的算法执行效率.同时,可以考虑是否有更好的再划分结构的方法,如增加位置信息等,以进一步提高攻击的命中率.致谢非常感谢审稿人,他们提出的意见使我们受益良多!
