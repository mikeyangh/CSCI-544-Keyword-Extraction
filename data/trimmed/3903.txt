Page1基于对象异常频度的数据流阈值查询张敬伟1),2)金澈清1)林煜明1),2)周傲英1)1)(华东师范大学软件学院上海市高可信计算重点实验室上海200062)2)(桂林电子科技大学广西可信软件重点实验室广西桂林541004)摘要数据流查询与处理技术广泛应用在金融系统等诸多领域中,银行卡交易系统中存在的由终端复用所导致的不规范交易即是一个典型案例.此类不规范交易存在两个特点:(1)对象频繁出现;(2)对象的值序列频繁波动.然而,现有的频繁项挖掘算法仅考虑第一个特点,无法有效解决问题,亟需开发新技术进行检测.文中首先形式化地定义了这类不规范交易查询,再设计了多个创新算法进行处理.此外,文中还将工作扩展到滑动窗口模型以处理数据流演化问题.理论分析与实验结果均表明所提方法具有较佳性能,空间复杂度与时间复杂度都较低.关键词数据流查询;元素对采样;异常频度;滑动窗口1引言数据流是一个实时、有序的数据序列,在InternetPage2据流进行连续查询,且仅耗费少量物理资源.随着银行卡的普及,越来越多的消费者习惯于刷卡消费.持卡者通过分布式部署的各个终端(例如ATM、POS机等)进行交易,大量的终端将增加持卡者使用的便捷性.商业银行为每个终端赋予一个唯一标识,商户每部署一个终端都需要申请一个新逻辑ID,银行可以识别、监测在该终端上发生的交易.换言之,物理终端与逻辑ID之间保持一对一映射关系.但是,一些商户为了规避申请成本,购置多个物理终端却仅申请一个逻辑ID,并让这些物理设备共享该逻辑ID.银行系统会将共享逻辑ID的多个物理终端上产生的交易误认为同一个物理终端送来的,客观上降低了金融安全性.鉴于此,多物理终端共享一个逻辑ID属于一种不规范的物理终端使用模式,其导致了不规范的交易模式,需要有效检测出来.监控各终端产生的交易流水号变化曲线是一种检测不规范交易模式的有效手段.各个物理终端会为每笔交易自动生成一个交易流水号,该流水号随图1交易模式示意图金融应用中的日交易量非常庞大.受限于物理资源,传统的数据库管理技术无法有效发现频繁的不规范交易模式.频繁项挖掘技术可在数据流中找出频繁程度超过指定阈值的对象,而本文需要管理的是频繁的不规范模式,需要监控对象值的异动,考察单位不是单一的数据流元素,而是元素对,因此传统的数据流上的频繁元素检测算法无法应用到本例之中.鉴于此,必须设计新技术来解决这个问题.此外,基于对象值变化的数据流阈值查询可以应用到诸如软件错误修复质量评测、股票稳定性和风险实时监测、广告影响力和用户购物模式分析等方面.例如,大型软件系统的每一次错误修复后都可能引入新的错误,可以将不同软件模块在不同时间段的错误数量建模成数据流,根据错误数量的变化情况来着时间单调增加,不同物理终端的流水号相互独立.若某终端的使用情况非常规范(如图1(a)),则在一段时间内所生成的流水号序列v(1),v(2),v(3),…,满足v(1)<v(2)<v(3)<…;若某终端被不规范地使用(如图1(b)),流水号序列由多个物理终端独立生成,则总可找到两个相邻的流水号v(i)和v(i+1),满足v(i)v(i+1).图1(c)中,物理终端T1规范使用逻辑IDID(o1),其在时间点1、5、7和11生成的流水号随时间单调增加;物理终端T2和T3不规范使用ID(o2),生成了流水号序列5,1,7,9,3,12,4,15,分别在3、8和10这3个时间点出现了流水号值变化异常的情况.针对交易数据流,流水号的异动能够帮助发现不规范的交易模式及其频繁程度,采用在线监控模式找出频繁的不规范交易,能够有效提升金融系统的交易规范程度,保证资金安全性;在线查询模式也避免了离线全量处理海量交易数据,提升了处理效率;在现实应用中,交易数据流的最新数据通常是监测重点,使用滑动窗口模型能更贴近应用需求.分析软件修复质量;将不同股票在不同时间点的价格建模成数据流,通过数据流阈值查询可以找出股票价格波动大的股票,对具有潜在风险的股票进行实时监控;将用户对商品(或广告)在不同时间段内的点击和购买行为建模成数据流,通过数据流阈值查询找出点击和购买行为频繁的用户,既能实时地为在线广告提供决策支持,又能辅助对广告影响力以及用户购物模式等进行分析.本文的主要贡献包括以下3个方面:提出了基于对象自身异常频度的数据流阈值查询问题;改进了水库采样和基于滑动窗口的均匀采样,使其支持元素对采样,并分别设计实现了数据流异常频度阈值概率查询和阈值确定性查询、异常状态阈值查询以及滑动窗口模型下的异常频度阈值查询算法,理Page3论证明了这些算法具有较低的空间复杂度;通过大量实验验证了方法的有效性和高效性.本文第2节详细定义数据流及各阈值查询;第3节基于对象值的连续监控需求分别给出异常频度阈值查询的概率算法和确定性算法;第4节研究并实现基于元素对的均匀采样算法和异常状态阈值查询算法;第5节给出支持滑动窗口模型的异常频度阈值查询算法;第6节通过充分的实验验证新算法的有效性和高效性;最后,回顾相关工作、总结全文并展望后续的研究工作.2问题定义2.1数据流定义定义1(数据流).令O表示对象集合{o1,o2,…},数据流S是一个序列{e(1),e(2),…},其任一项e(i)表示为(o(i),v(i)),且o(i)∈O,v(i)是正整数.假定某一个对象o所对应的值序列标记为{v1,v2,…}.在规范模式下,该值序列单调递增,即v1<v2<…;而在不规范模式下,不具备单调性,即存在k1,使得vkvk+1,相关定义如下.定义2(异常状态).设(o,v(i))和(o,v(j))表示对象o在S中的两次出现,i<j.若v(i)v(j),且/y,i<y<j∧(o,v(y))∈S,称o在时间点j处于异常状态.sta(o,j)定义为对象o在时间点j的状态函数,stao,()j=1,o在j点处于异常状态如图1(c)所示,o2在时间点2和3有v(2)>v(3),则o2在时间点3处于异常状态,sta(o2,3)=1;同时,由于v(3)<v(4),则sta(o2,4)=0.定义3(对象异常频数).给定数据流S,对象o的异常频数定义为o在S中发生异常状态的总次数,表示为f-(o)=|{e(i)|i,sta(o,i)=1}|.定义4(对象异常频度).对象o在数据流S中的异常频度定义为o的异常频数与o的总出现次数的比值,表示为r-(o)=f-(o)/|{e(i)|i,o(i)=o}|.同理,使用f(o)=|{e(i)|i,o(i)=o}|表示对象o的频数,r(o)=f(o)/|S|表示对象o相对于整个数据流S的频度,分别称为对象频数和对象频度.例1.如图1(c)所示,对象o1和o2共进行了12笔交易,对应的异常频数和异常频度如表1所示.对象总出现次数f-(o)r-(o)o1o22.2数据流查询定义数据流中各个对象的异常频度反映了对象的异常程度,异常频数反映了对象对整个数据流异常的影响程度.本文分别针对对象异常频度和异常状态定义阈值查询(定义5和定义6),从而发现异常对象.在实时监控应用中,最近出现的数据流元素通常是最值得关注的,定义7给出了滑动窗口模型下的异常频度阈值查询.定义5(异常频度阈值查询).给定数据流S、异常频度阈值τ以及对象频度阈值λ,异常频度阈值查询FTQ(S,τ,λ)返回S中异常频度大于等于τ且对象频度阈值大于等于λ的所有对象,即FTQ(S,τ,λ)={o|r-(o)τ∧r(o)λ}.定义6(异常状态阈值查询).给定数据流S和异常频数阈值fτ,异常状态阈值查询NTQ(S,fτ)返回S中异常频数大于等于fτ的所有对象,即NTQ(S,fτ)={o|f-(o)fτ}.定义7(滑动窗口异常频度阈值查询).给定数据流S,窗口大小W,异常频度阈值τ和对象频度阈值λ,查询WFTQ(S,W,τ,λ)返回最近的W个元素中异常频度大于等于τ且对象频度阈值大于等于λ的所有对象,即WFTQ(S,W,τ,λ)={o|r-W(o)τ∧rW(o)λ}.其中,r-W(o)和rW(o)分别表示在最近W个元素的集合条件下,对象o的异常频度和对象频度.例2.对图1中的数据流,给定异常频度阈值τ=30%,对象频度阈值λ=10%,异常状态阈值fτ=3,滑动窗口大小为6,则各查询在时间点9和12的查询结果如表2所示.FTQ(S,τ,λ){(o2,τ=33.3%,NTQ(S,fτ)WFTQ(S,W,τ,λ)-为了便于后续阅读,表3简要介绍了本文所涉及的符号.Page43异常频度阈值查询本节针对数据流中对象值相关性和自身异常频度计算需求,基于定义5进行异常频度阈值查询算法设计,分别提出支持阈值查询的概率算法和确定性算法,并分析各查询算法.3.1阈值概率查询算法为应对数据流的庞大数据量,常使用采样技术提高数据流查询的时空性能.文献[1]运用采样技术实现了数据流上的频繁项计数,以至少1-δ概率确保对象的频率值误差小于ε,并输出所有出现次数占数据流长度的比率大于等于τ-ε的对象(τ、ε和δ为用户指定参数).但文献[1]没有关注对象值的变化情况,而且频度阈值针对于整个流长度而不是对象自身出现次数,无法满足异常频度阈值查询的需求,需要改进算法以支持对象值的变化侦测和对象异常频度计算.阈值概率查询算法以τ、ε、δ和λ作为用户输入参数,分别表示异常频度查询阈值、允许的异常频度查询误差、查询错误概率和对象频度阈值,只有异常频度值大于等于τ-ε并且对象频度大于等于λ的对象被输出.阈值概率查询算法使用一个周期性变化的采样率r对数据流元素进行采样,对于保存在样本集合中的对象则需持续监测其值变化,维护摘要信息.当采样率变化时,需对样本集合进行剪枝,降低内存开销,算法内容如下.(1)摘要结构.阈值概率查询算法将采样到的对象及其摘要信息写入样本集合R中.摘要信息结构为〈o,v,f,f-,g〉,o表示被采样的对象,v表示o的当前值,f、f-、g分别表示o的总频数、异常频数和被修剪次数.(2)单个元素处理规则.数据流中的一个元素e(i)是否被处理由两个因素决定:o(i)是否已被采样和当前的采样率.若o(i)未被采样,以采样率r对e(i)进行采样,如果采样成功,则将〈o(i),v(i),1,0,0〉插入R中;若o(i)已被采样,即R中存在元素〈o(i),v,f,f-,g〉,则将f值增1,f-值是否增1取决于v(i)与v的比较结果.算法1中的process(R,e(i),r)函数即应用了本规则.(3)采样率r的变化规则.设置数据流基本窗口大小T=1+ε率r=1,后续的2T个元素的采样率r=1的4T个元素的采样率r=1[2i×T+1,2i+1×T]区间的元素使用采样率r=1(4)对象修剪规则.当采样率变化时,对样本集合R中元素进行剪枝.对R中的每一项,通过一个服从几何分布的连续抛硬币操作来决定其是否被移除,即对item=〈o,v,f,f-,g〉∈R,重复执行抛硬币操作,直至硬币出现正面为止;对每一次硬币出现反面,将g值加1;当g等于f时,将item从R中删除,反之,则保留该元素.算法1中的prune(R)函数即应用了本规则.算法1描述了阈值概率查询算法的维护过程.算法2输出异常频度大于等于τ-ε且对象频度大于等于λ的对象,同时以概率1-δ保证对象的异常频度误差不超过ε.算法1.概率查询算法的信息维护阶段.输入:数据流S,误差ε,概率δ,对象频度λ输出:样本集合R1.r··=1;T··=1+ε2.DO{3.读取S中的第i项,e(i);4.processR,e(i),()r;//参见“单个元素处理规则”5.IF(i=wEnd)THEN{6.prune(R);//参见“对象修剪规则”7.r··=r/2;8.wEnd··=wEnd+T/r;}9.i··=i+1;10.}WHILE(i<|S|)11.RETURNR.算法2.异常频度阈值概率查询算法.输入:样本集合R,异常频度阈值τ,误差ε,对象频度阈输出:异常频度大于等于τ-ε且对象频度大于等于1.FOReach〈o,v,f,f-,g〉∈R2.IFf-3.O··=O∪{o};4.RETURNO.定理1.算法2仅消耗O1+ε存储空间,查询数据流中异常频度大于等于τ且对象频度大于等于λ的对象,同时以1-δ概率保证异常频度误差不超过ε.Page5为了保证f-和f的绝对误差均在εN之内,同证明.由文献[1]中定理4.1知:维护1εlog(s-1δ-1)大小的样本空间,可以1-δ概率确保找出所有频数高于sN的元素,且对于每个高频元素,其绝对误差不超过εN(N表示数据流长度).令f-和f分别表示某对象的异常频数和总频数,则其绝对误差均不超过εN.频度误差f-εNf-εNε时频度大于等于s的元素至多有1护2s个绝对误差值.将上述结论代入复杂度公式有1+xsxlog(2s-1δ-1).令ε表示异常频度相对误差,λ表示对象频数阈值,则需要维护的样本空间大小为1+ελεlog(2λ-1δ-1).3.2阈值确定性查询算法异常频度阈值概率查询算法的查询结果具有错误概率δ,本节通过将数据流划分成固定大小的窗口,以采样率r=1对窗口中的每个元素进行处理,给出一种阈值确定性查询算法.异常频度阈值确定性查询算法基于用户指定的查询误差ε和对象频度阈值λ将数据流划分成1+ελε大小的窗口,对每一窗口中的元素逐个处理,并在窗口边界处对样本集合进行剪枝,降低空间复杂度,算法内容如下:(1)摘要结构.使用数据结构〈o,v,f,f-,fΔ〉存储对象摘要信息,o、v、f、f-含义同3.1节,fΔ表示剪枝操作可能造成的最大误差.R是样本集合,存放对象摘要信息.(2)单个元素处理规则.对第i个元素e(i),若o(i)在R中,即〈o(i),v,f,f-,fΔ〉∈R,将f值增1;同时如果v(i)v,f-值也增1.若o(i)不在R中,则将〈o(i),v(i),1,0,fΔ〉插入R中,并令fΔ=WNo-1,表示当前对象异常频数的最大可能修剪值(WNo为当前窗口编号,窗口从1开始递增编号).算法3中的processR,e(i),()1函数即应用了本规则.(3)对象修剪规则.当处理下一个窗口中的元素时,对R中元素进行剪枝,从R中删除满足f-+fΔ<WNo的元素.算法3中的p()runeR函数即应用了本规则.算法3描述了异常频度阈值确定性查询算法的信息维护过程.不同于3.1节,process函数对数据流元素的采样率始终保持1,即对所有数据流元素进行处理,且o(i)被采样加入R中时,采用fΔ=WNo-1近似修正o(i)可能被修剪的异常频数.异常频度阈值确定性查询算法输出异常频度大于等于(τ-ε)且对象频度大于等于λ的对象,查询过程同算法2.算法3.确定性查询算法的信息维护阶段.输入:数据流S,误差ε,对象频度阈值λ输出:样本集合R1.WNo··=1;T··=1+ε2.FOReache(i)∈S{3.process(R,e(i),1);4.IF(iMODT=0)THEN{5.prune(R);WNo++;}}6.RETURNR.定理2.异常频度阈值确定性查询算法的空间复杂度为O1+ε象频度,ε为允许的异常频度查询误差,N表示数据流长度.证明.由文献[1]中定理4.2知:维护1εlog(εN)大小的样本空间,可以确保找出所有频数高于sN的元素,且对于每个高频元素,其绝对误差不超过εN.令f-和f分别表示某对象的异常频数和总频数,则其绝对误差均不超过εN.频度误差f-f-±εNf-度误差),即ε=sx为了保证f-和f的绝对误差均在εN之内,同时频度大于等于s的元素至多有1护2s个绝对误差值.将上述结论代入复杂度公式有sxlog1+x1+x表示对象频数阈值,则需要维护的样本空间大小为1+ελεlogλε异常频度阈值确定性查询算法在修剪过程中,总是修剪当前异常频度低的对象,而且在对象进入数据流摘要中时使用最大可能异常频次修正fΔ,因此算法存在假阳性.虽然都使用了基于窗口的采样Page6技术,但与3.1节的概率查询算法相比,确定性查询算法主要在窗口划分策略、采样率、算法确定性和对象插入数据流概要的处理机制4个方面存在不同.4异常状态阈值查询异常频度阈值查询主要关注对象的异常频度、非异常频数.在实际应用中,一些对象尽管异常频度较低,但由于异常频数较高,这些对象仍然需要被检测出来.例如,某对象在数据流中出现106次,其中有5000次处于异常状态,尽管该对象异常频度较低,但异常频数却比较大,很可能也是异常对象.本节设计概率查询算法来维护数据流摘要信息,以估计对象的异常频数.水库采样[2]通过维护一个样本集合(水库)支持数据流的均匀采样,但采样单位为单一数据流元素,不能满足以对象值变化为考察对象(也称为元素对)的异常状态阈值查询.本节改进水库采样,以支持元素对采样,实现异常状态阈值概率查询.在元素对采样中,每次采样的基本单位为同一对象的两次相继出现,采样样本的基本结构为元素对(o,〈v(i),v(j)〉),o是被采样对象,v(i)和v(j)是o的两次连续出现对应的值.即在处理过程中,如果元素e(i)=(o(i),v(i))被采样,则对象o(i)的下一次出现e(j)=(o(j),v(j))将和e(i)一起形成采样样本(o,〈v(i),v(j)〉)(注:o(i)和o(j)相同,标记为o),且(i<j)∧/x(i<x<j∧(o,v(x))∈S).令ε表示误差参数,δ为概率参数,我们设计了一个基于元素对的数据流均匀采样算法(算法4),负责在内存中维护一个样本集合R;同时设计一个异常状态阈值查询算法(算法5),其根据该R输出最终结果.在此,样本集合R仅需维护c=2λ个样本,即可以1-δ的概率保证各个结果元素的误差不超过εN,其中λ表示对象频度阈值,N表示数据流长度.算法4维护数据流的一个元素对均匀采样样本集合R.首先,扫描数据流,设当前处理的数据流元素为e(k)=(o(k),v(k)),若对象o(k)在R中存在采样未完成样本,则使用v(k)填充该采样样本,即若有(o,〈v(p),null〉)∈R∧o=o(k),则将其更新成(o,〈v(p),v(k)〉);若R中元素未达到2λ将对象o(k)的元素对(o(k),〈v(k),null〉)加入到R中;若R中元素已达到2λ进行采样,若e(k)采样成功,形成元素对(o(k),〈v(k),null〉),并以1算法4.基于元素对的数据流均匀采样算法.输入:数据流S,误差参数ε,概率参数δ,对象频度阈值输出:样本集合R1.初始化c··=2λ2.FOReache(k)∈S3.IF((o(k),〈v(p),null〉)∈R)THEN4.(o(k),〈v(p),null〉)→(o(k),〈v(p),v(k)〉);5.ELSE6.IF(R中元素不足c个)THEN7.往R中插入(o(k),〈v(k),null〉);8.ELSE9.order··=k×rand();10.IF(order<c)THEN11.R[order]··=(o(k),〈v(k),null〉);12.RETURNR.算法5基于算法4维护的样本集合R进行异常状态阈值查询.首先,调用processSample(R)函数,扫描样本集合R中所有样本,并将各对象的异常频次统计结果写入集合K中.K中的每个元素表示为二元组〈o,f-〉,o,f-含义同3.1节.算法5输出总异常频次大于等于指定阈值(λ-ε)N的对象.算法5.异常状态阈值查询算法.输入:样本集合R,频次阈值λ,误差ε,样本集合大小c输出:对象频度大于等于λ-ε的对象集合O1.K··=processSample(R);2.FOReach〈o,f-〉∈K3.IFf-4.O··=O∪{o};5.RETURNO.定理3.若对长度为N的数据流维护大小为ε2ln2c=2λ概率支持异常频数阈值为λN且误差不超过εN的异常状态阈值查询.证明.令α表示某对象的对象频度,且0<λα1.若样本集合的大小为c,X表示一套完整采样之后样本集合中该对象的频数,则E[X]=c·α.根据Chernoff不等式:Pr[|X-[]EX|ε·Page7c]2e-cε2个,因而2e-cε2c=2λε2ln25滑动窗口异常频度阈值查询数据流应用中的数据规模宏大,跨度很长.特定的异常侦测场景中往往需要连续跟踪最近一段时间内的情况,无需处理整个数据流,因此本节考虑如何设计滑动窗口模型下的异常频度阈值查询算法.本节采用类似文献[3]中提出的链式采样策略,以维护滑动窗口的摘要信息,从而在窗口不断移动时支持异常频度阈值查询.令W表示滑动窗口的大小,异常频度阈值查询总是基于最新的W个元素进行查询.滑动窗口异常频度阈值查询首先按照预定概率对新的元素进行采样,若该元素被成功采样,则同时被定义为一个候选元素.当元素移出滑动窗口时,及时用候选元素替换该元素.最后,基于采样结果进行阈值查询.采样成功的元素及其候选元素均以元素对形式存在,形成元素对链表,基本数据结构为(o,〈v(i),v(j)〉).令R表示样本集合,当第i个元素e(i)到达时,首先查看R中是否存在对象o(i)的不完整采样,即是否存在(o(i),〈v(x),null〉).若存在,则将图2滑动窗口元素对均匀采样示意图算法6维护滑动窗口模式下的数据流元素对均匀采样样本集合,其中函数samplee(i),1表示以1回true;函数dealCandidatee(i())负责为e(i)定义候选元素并插入到R中.异常频度阈值查询扫描R中所有样本元素,根据每个样本元素中记录的对象值其更新为(o(i),〈v(x),v(i)〉);然后再以1率对e(i)进行采样,若采样成功,将(o(i),〈v(i),null〉)插入R中;对每个采样成功的元素e(i),同时从e(i+1),…,e(i+W)中随机选择一个元素做为e(i)的候选元素;当e(i)失效时,则用候选元素替换e(i).候选元素到达后,也使用该规则为其定义候选元素.图2描述了滑动窗口元素对均匀采样流程.图2(a)列举了某数据流的前10个元素.假设滑动窗口大小W=6,各元素采样率在第3行列出.图2(b)~(e)分别给出在时间点2、3、8和10处的样本集合状态,每个样本元素和候选元素使用其第一个元素在数据流中的编号标识.在时间点2,数据流元素1和2采样成功,并且随机生成对应的候选元素:时间点3和7处开始的元素对.由于对象o1和o2均是首次出现,因此样本元素并不完整.同时,元素3和7还未到达,还无法真正填入候选元素.在时间点3,元素3到达,则先用该元素完善对象o2的不完整采样.元素3又是样本元素1的候选样本,因此在样本1的候选样本链表中插入元素3的不完整采样,并定义其候选样本为时间点6处开始的元素对.在时间点8,样本元素1和2不在滑动窗口范围内,因此被移出样本集合,并使用它们的候选元素3和7进行替换.图2(e)给出在时间点10时的样本集合的概况.大小关系,将各对象统计结果写入三元组〈o,f,f-〉中,o、f、f-含义同3.1节,并输出所有满足f-的对象集合.算法6.滑动窗口元素对均匀采样算法.输入:数据流S,滑动窗口大小W输出:元素对样本空间R1.FOReache(i)∈S{Page82.IF((o(i),〈v(x),null〉)∈R)THEN3.更新(o(i),〈v(x),null〉)为(o(i),〈v(x),v(i)〉);4.IFsamplee(i),15.R=R∪(o(i),〈v(i),null〉);6.dealCandidate(e(i));}}7.RETURNR.定理4.若算法6维护大小为c=2(1+ε)2ln2()λδ的元素对样本集合,则其支持滑动窗口W下的异常频度阈值查询,能够查询W中异常频度大于等于τ且对象频度大于等于λ的对象,且以1-δ概率保证异常频度误差不超过ε;同时空间复杂度仅为O(clogW).证明.根据文献[3]提供的结论可知,若限定样本空间大小为c,则每个样本候选链表的长度为l的概率P(l)=W()lc-le()lP(l)W-t,t为常量;对c个候选链表的空间复杂度为O(clogW).令f-和f分别表示当前窗口中某对象的异常频数和总频数,则其绝对误差均不超过σW.频度误差f-f-±σWf-令α表示某对象的对象频度,且0<λα1.令X表示一套完整采样之后样本集合中该对象的频数,则[]EX=c·α.根据Chernoff不等式:Pr[|X-[]EX|σ·c]2e-cσ21λ个,因而2e-cσ2此有c=2(1+ε)26实验6.1实验数据集本节基于某金融机构的终端交易数据集对数据流阈值查询算法进行实验验证,实验平台为Windows操作系统、2.67GHzCPU和2GB内存,使用Java实现所有算法代码.数据集收集了金融机构某交易平台2011年7月份共31天的交易数据,日交易量在88万到160万之间,总计约3755万条交易记录,涉及128466个逻辑ID,有27713个逻辑ID产生异常,占比为21.57%.图3展示了各异常交易量下参与交易的终端数目的分布情况.数据集中的每笔交易均由数据预处理转换成一个二元组格式的数据流元素,即(对象ID、流水号).6.2评价标准实验评测指标包括算法准确度和时空复杂度.其中,准确度评测采用准确率(Precision)、召回率(Recall)和F-measure.令样本空间为R,查询结果数目为P,查询正确数目为Q,则有Precision=QRecall=Q法的时间复杂度即为单个元素的平均处理时间,空间复杂度为使用内存大小.本实验同时采用扫描统计的方法对数据流进行阈值查询,查询的时空开销作为基准值,与各阈值查询算法的时空复杂度进行对比分析.为简化表达,各查询算法采用表4中的命名约定.滑动窗口异常频度阈值查询6.3实验结果与分析6.3.1异常频度阈值概率查询实验设定不同的异常频度阈值τ和误差ε,通过非均匀采样对数据流进行采样并维护数据流摘要信息,然后进行异常频度阈值查询,分别验证查询算法的有效性和性能.设计一组实验验证算法的有效性,让τ分别取值0.01、0.02、0.03和0.04,ε分别取值0.001、0.002、0.003、0.004和0.005,δ统一取值为Page910-3,对象频数阈值取值5000,对τ和ε两个参数进行组合实验,实验结果如图4所示.图4(a)展示了不同异常频度阈值和误差下的准确率,由于阈值概率查询对采样到的对象进行连续监控,因此在各阈值下,查询准确率保持了较高的值;随着ε的增大,图4概率查询有效性图5展现了阈值概率查询与扫描统计查询的时空性能对比.图5(a)表明阈值概率查询具有较低的空间复杂度,随着查询误差ε增大,查询需求的存储空间减少;阈值概率查询的空间需求不受异常频度阈值τ的影响,实验结果与定理1的结论保持一致.阈值概率查询的时间消耗主要包括每个元素的采样图5概率查询时空性能6.3.2异常频度阈值确定性查询实验通过设定不同大小的窗口进行阈值查询实验,对数据流生成摘要信息,并依据摘要信息进行异常频度阈值查询.令异常频度阈值τ分别取值0.01、0.02、0.03和0.04,ε分别取值0.001、0.002、0.003、0.004和0.005,在不同大小的窗口下进行查询实验,以异常频数大于等于5000的对象集合作为考察范围,图6给出了准确率、召回率和F-measure的实验结果.图6(a)给出了不同异常频度阈值在不同误差(即窗口大小)下的准确率,从实验结果看各查询均保持了较高的准确率.随着误差值减少,窗口变大、修剪次数减少、准确率稍微上升;由于对所有查询的准确率稍微下降;同时随着阈值的增大,查询的准确率也升高.图4(b)和(c)分别展示了各查询的召回率和F-measure,各参数条件下的阈值查询均保持了高的召回率.时间、数据流摘要信息维护时间、对象修剪时间和阈值查询时间四部分,尽管扫描统计查询的时间成本只有数据流摘要信息维护时间和阈值查询时间两部分,但由于采样和修剪操作使得处理的对象数目减少,从而保证了概率查询的时间复杂度仍低于扫描统计查询(如图5(b)).数据流元素进行了处理,根据修剪策略,相同对象频数情况下异常频度较大的对象不容易被修剪掉,因此对应的查询准确率也稍高.由于对所有对象进行了连续监控,因此确定性查询也保持了高的召回率(如图6(b));同时,F-measure也保持了较高的值(如图6(c)).图7给出了确定性查询算法与扫描统计查询算法的时空性能对比.图7(a)表明在不同误差(即窗口大小)下,确定性查询的空间需求均小于扫描统计查询需求的存储空间,而且几乎不受查询阈值的影响,尽管该算法空间复杂度的理论边界值较大,但实验的实际效果很好.图7(b)给出了时间成本对比,Page10不同于扫描统计查询维护所有对象集合,确定性查询由于采用了修剪策略,定期移除不满足条件的对象,从而只需要维护当前满足条件的对象结合,使得对象集合的维护时间减少,呈现了很好的时间性能.图6确定性查询有效性图7确定性查询时空性能6.3.3异常状态阈值查询实验通过设定不同的样本空间,设计实验验证异常状态阈值查询算法的有效性和性能.针对不同的异常状态查询阈值(AFT,分别取值5000、15000、25000和35000),让其在不同的样本空间(10、20、30、40和50,单位:103)下进行查询实验.图8展示了不同异常状态查询阈值在不同样本空间下的查询图8异常状态阈值查询有效性相对于概率查询,确定性查询对异常频数较少的对象也具有很好的查询效果;但主要缺陷是该方法的空间复杂度对实际数据比较敏感,当数据流持续增大和对象增多时,其空间复杂度会持续增大.准确率、召回率和F-measure,随着样本空间增大,采样的对象数目增多,查询的准确率和召回率均升高,这符合均匀采样的基本性质;在同样的样本空间下,异常频数越高,其被采样的概率增大,查询准确率和召回率也越高(如图8(a)和(b));图8(c)的F-measure也呈现了同样趋势.图9给出了异常状态阈值查询与扫描统计查询Page11的时空性能比较(注:异常状态阈值查询的基准值和异常频度阈值查询的基准值由于查询需求不同,因此对同一个数据流,基准值存在差异).图9(a)给出了查询的空间成本,异常状态阈值查询的时空开销主要取决于样本空间的大小,相对于扫描统计查询,异常状态阈值查询在保证很好准确度的情况下,存储空间开销仍保持低的需求;而且在样本空间确定的情况下,空间开销几乎不受数据流大小影响.图9(b)图9异常状态阈值查询时空性能6.3.4滑动窗口异常频度阈值查询实验滑动窗口异常频度阈值查询的关注对象为数据流的最新数据,设计实验验证查询算法的有效性和性能,让滑动窗口大小W分别取值8000、12000、16000和24000,使用不同频度阈值τ进行查询实验.图10展示了滑动窗口异常频度阈值查询的有效性,图10(a)表明各查询具有很高的准确率,对同样长度的数据流,当滑动窗口尺寸变小时,由于采样率图10滑动窗口阈值查询有效性图11展示了滑动窗口异常频度阈值查询与扫描统计查询的时空性能比较.相对于扫描统计查询,滑动窗口阈值查询的空间需求仍较小,而且随着窗口增大,采样率降低,需要维护的元素数目减少,空间需求和时间消耗减少,查询的空间性能不受查询阈值影响(如图11(a)所示).滑动窗口下的查询时展现了查询的时间开销,异常状态阈值查询的时间复杂度由采样开销和样本空间查询开销决定,相对于扫描统计查询需要对每个对象进行摘要信息维护,异常状态阈值查询只需要对每个元素进行采样测试,最后完成对样本空间的查询,因此异常状态阈值查询具有较低的单一元素处理时间开销.随着样本空间的增大,不同样本空间的采样时间开销是一致的,但样本空间查询时间会稍微增大.增大,样本空间的元素增多,因此查询的准确率升高;对τ=0.2的各查询,由于在对应窗口中满足条件的对象数目变少,单一对象的查询失败导致准确率下降较快,因此准确率偏低.在同一个数据流下,图10(b)的召回率也随着窗口的增大而呈下降趋势,也主要归因于采样率降低,样本数减少;但对τ=0.2的各查询,其召回率受窗口大小变化的影响相对较弱;图10(c)的F-measure呈现了相同趋势.间成本主要由采样成本和候选元素维护成本构成,由于对每一个有效采样均维护一个候选链表,当维护的链表数目较多时,查询时间会稍高于扫描统计查询;但随着窗口变大,采样率变小,需要维护的候选链表数目变小,对应的查询时间减少(如图11(b)所示).Page12图11滑动窗口阈值查询时空性能7相关工作数据流在许多应用中广泛存在,例如网络数据流监控、股票交易等.数据流到达速度快、数据量大,针对不同的应用需求,需要设计有效的算法和系统.文献[4]提出了一个对多数据流进行连续查询的流数据管理系统原型(STREAM),其设计了类SQL的描述性查询语言,支持在物理资源受限的情况下为高数据到达率和高查询负载的任务提供近似查询服务;文献[5]设计了一个为IBMSystemS服务的描述数据流处理引擎(SPADE),其通过一个中间语言来描述并行和分布式的数据流图,支持流处理运算符,并且采用流适配器来与外界进行数据交互;文献[6]提供了一个概率数据流系统,通过高斯混合模型对不确定数据流中的连续随机变量进行建模,支持不确定数据流的聚集、连接等关系操作.针对不同形态的数据流,文献[7-8]研究了只支持追加操作数据流的查询问题;文献[9]研究了支持插入和删除操作数据流的查询问题;文献[10-11]研究了不确定数据流的查询问题.本文研究面向不规范使用物理终端而导致的不规范交易模式的侦测问题.典型的数据流查询处理技术包括采样、散列、直方图等,设计近似算法以较低时空复杂度支持各种查询操作.文献[9]提出了支持插入和删除操作的数据流频繁计数方法(hCount);文献[12]为top-k查询引入几何表达模型,对数据流增量维护一个几何排列数据集,设计算法支持数据流上的即席top-k查询;文献[10-11,13-14]分别对不确定数据流进行了top-k查询、聚簇、频繁项集挖掘等研究.文献[15]提供了一个数据流频繁项挖掘的综述,从数据流模型、频繁项挖掘算法的处理技术和数据概要结构3个方面对频繁项挖掘的相关方法进行比较分析;文献[16-17]分别对典型的数据流频繁项挖掘算法设计了一个统一的框架,并通过实验对各方法进行了性能比较.本文的研究工作与频繁项查询问题接近,但不同于传统的问题定义,其研究的出发点基于对象值相关性和对象自身的异常频度,而不仅是相对于整个流长度的频度.数据流查询处理的基本模式分为基于整个流的查询和基于滑动窗口的查询两种类型.基于滑动窗口的观点认为数据会过期,连续查询数据流的最近内容更有价值而得到了广泛的研究.文献[18]研究了固定尺寸滑动窗口上的数据流top-k查询,窗口的固定尺寸可以从元素个数或者时间段两个不同的角度来进行限定,其通过网格索引结构和预计算技术,以空间换时间的方式来快速获取查询结果;文献[19]通过滑动窗口来查询数据流中最近的频繁项;文献[20]综合基于图和基于网格的摘要方法,提出了基于密度聚簇的新的摘要方法,其能够有效描述原始聚簇的所有特征并保证了表达的简洁性,从而支持滑动窗口模式下的连续聚簇抽取查询和聚簇匹配查询;文献[21]将top-k查询和频繁项挖掘问题相结合,设计了滑动窗口模式下的top-k频繁项查询算法.本文的研究工作基于对象的异常频度阈值同时兼顾了基于整个数据流的查询和支持滑动窗口模型的查询.数据流的研究工作取得了很大进展并不断涌现出新的工作.文献[22-23]提供了系统的数据流研究工作综述,分别对数据流研究的理论基础、挖掘技术、系统和研究观点等方面进行了归纳总结;文献[24]对海量数据流面临的新问题和新应用所带来的挑战进行了展望.新的问题和挑战让数据流的研究工作不断得到进展,文献[25]将基于数据项出现频次的查询变换为出现相同频次的数据项数目查Page13询,提出了一种新的数据流视角;文献[26]研究了对图数据流的查询问题,其提出了gSketch方法来生成图摘要,支持图数据流的快速查询,将数据流的考察对象变换到图结构上;文献[27]针对社交网络提供的丰富信息流,采用密度子图建模现实世界中紧耦合的实体,从用户生成内容流中获取并维护实体之间联系(边)的相关信息,实时地从社交网络中发现流行事件;文献[28]融合MapReduce技术和流数据处理技术,设计了概率算法,实现了图数据流的最大密度子图挖掘.本文的研究对象较以往数据流问题也存在不同,其针对传统的频繁项问题融合了对象值相关性和对象自身异常频度的考量.8结论为了解决银行卡交易中不规范交易的侦测问题,本文引入数据流对象异常概念,设计基于元素对的采样技术来支持对象值的变化监测,分别设计并实现了阈值查询算法支持整个数据流的对象异常频度查询和异常状态查询,以及滑动窗口模型下的异常频度阈值查询.理论分析和实验报告表明各算法具有较佳性能,能以低时空开销支持大规模数据流.针对银行卡交易等数据流,当前只能根据对象异常频度和异常频次来查询异常程度,如何结合具体时间信息以及交易频度信息,深度挖掘不规范交易模式的信息,例如发现不规范交易模式的周期,将更有助于问题的准确定位和解决.
