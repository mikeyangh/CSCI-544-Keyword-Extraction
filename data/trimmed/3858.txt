Page1两相图像变分分割凸松弛模型快速算法江成顺1)汪先超2)1)(中南财经政法大学武汉学院武汉430079)2)(信息工程大学郑州450002)摘要主要研究两相图像分割凸模型的三类快速数值算法.首先,分别针对无约束和有约束的图像分割凸模型分别提出相应的具有O(1/k)阶收敛速率的梯度投影算法,并结合快速迭代收缩算法的加速收敛策略,将所提出的梯度投影算法的收敛速率从O(1/k)阶提高到O(1/k2)阶;其次,基于分块协调下降的思想,对无约束的图像分割凸模型采用Newton法求解,该算法不仅是单调下降的,而且具有二阶收敛性;然后,根据交互式迭代算法的思想,在约束模型的Fenchel原始-对偶形式的基础上,提出了一种通过原始变量和对偶变量交互式混合迭代求解的算法,所提出的算法在求解过程中避免了梯度算子和散度算子作用于未知变量,使得迭代形式更简单;最后,仿真实验表明了这3类算法的有效性和在收敛速率上的优势.关键词图像分割;凸松弛模型;梯度投影算法;分块协调下降;原始-对偶1引言中,图像分割技术成为重要的图像处理技术之一.近20多年来,基于变分原理和偏微分方程(PartialDif-ferentialEquations,PDE)模型理论的图像分割方法,在医学图像成像分析和一些非平稳信号的处理已成为众多科学与工程技术领域中的图像理解和图Page2像识别等高层图像处理技术的核心基础之一,更是计算机视觉和医学图像识别领域里数字图像处理方法的重要底层处理的前提性工作.基于变分模型[1]的分割法将图像分割问题归结为一个能量泛函极小化问题,所求得的最优解即为分割区域的边界.基于变分模型的分割法具有显著的优点,主要体现在:(1)模型具有很好的几何解释;(2)模型具有高度的灵活性.现有的变分模型大致上可以粗略地分为两类:一类是基于测地线活动轮廓线模型[2],即所谓的“蛇”模型(ActiveContourModel/SnakeModel);另一类是通过对含有噪声的图像分割,Mumford和Shah在文献[3]中提出的所谓的Mumford-Shah模型[3](下文中简称M-S模型).文献[3]中提出的M-S模型及其分析,奠定了图像变分方法的基础.M-S模型的能量泛函将图像信息(例如:区域、边界等信息)综合考虑,从而使得演化与边界的梯度无关,完全基于图像数据的驱动来完成.M-S模型是一个理想的模型,表达式中既含有二次面积项又含有长度项.这类模型的求解一般是很困难的事情.因此,基于简化的M-S模型和水平集方法,Chan和Vese于2001年提出了无边缘活动轮廓线模型[4](ActiveContourwithoutEdge,简称为C-V模型).C-V模型作为处理分段常值得两相图像分割的变分水平集模型,研究的是退化的M-S模型.由于C-V模型的能量泛函模型的定义域是非凸的,当对能量泛函求极小值时,得到的值有可能只为局部极小值,因而,往往只能取得局部最优解,从而使得分割的结果依赖于水平集的初始位置.此外,传统的图像分割变分水平集模型,为局部能量极值模型,其水平集函数的不同初始化有可能使得能量泛函达到不同的极小值点,从而得到不同的分割结果.该类模型的另一方面的缺点是需求解水平集函数的演化方程,其求解过程一般归结为计算水平集函数方程的稳态解,导致计算效率很低.为了提高计算效率,Nikolova等人在文献[5]中提出一个约束凸优化问题(简称为NEC模型),通过对其极小值的阈值化得到C-V模型的全局极小值.随后,Berkels在文献[6]中给出了一个无约束凸优化问题(简称Berkels模型),同样是通过对极小值的阈值化得到C-V模型的全局极小值.C-V模型采用离散的二值标记函数分割图像,相应的模型为非凸的,NEC模型和Berkels模型先对原始模型进行凸松弛,最终将结果阈值化得到分割结果,克服了分割结果对初始化的依赖.但是,从数值实现的角度上看,这两种模型都是一类大规模的不可微非线性优化问题,在数值求解上也存在着一定的困难.文献[1]研究了三维图像多相分割的变分水平集方法,采用变分水平集方法研究高维多相图像的分割,需要非常复杂的迭代运算,计算效率难以提高.本文主要针两类两相图像分割凸模型(NEC模型和Berkels模型)提出了三类快速数值算法———梯度投影算法、基于分块协调下降的Newton法和改进型的原始-对偶交互式迭代算法.在求解过程中,通过对偶方法有效地避免了原问题的高度非线性和局部不可微性,并采用正交投影很好地处理了对偶问题中额外引入的非线性约束条件.文中最后给出的仿真实验,分别验证了这些快速算法具有良好的收敛速率和有效性等.本文第2节首先介绍几类图像分割模型;第3节讨论对几个模型的改进的投影梯度算法;第4节讨论一类改进的Newton算法;第5节研究改进的分裂交互式迭代逼近算法;第6节作出相关算法的仿真实验,验证并比较改进方法的有效性和收敛特性等;最后,第7节简要归纳本文的研究工作的创新性和研究结果的实用性.2图像分割模型2.1Mumford-Shah模型Mumford-Shah模型AM-S(u,C)=ρ∫Ω\Cu2d狓+η∫Ω是由Mumford和Shah在1989年提出的.它通过寻求与输入图像u0最佳近似的分片光滑图像u来进行分割.式中,C是待优化的封闭曲线,将图像划分为不同的区域,u是待优化的输出图像,第1项要求输出图像u是分段光滑函数,即u只允许在曲线C上有很大的值,第2项要求输出图像u与输入图像u0足够地近似,即数据保真项,第3项中是C的(d-1)维Hausdorff测度,即要求曲线C自身足够地平滑且尽可能地短.对该模型的利用可以同时实现图像平滑和分割的目标,因此Mumford-Shah模型对含噪图像有较好的分割效果.2.2C-V模型在对M-S模型的研究中,最著名的要数Chan和Vese提出的C-V模型(ActiveContourwithoutPage3Edge),其数学表达形式为AC-V(c1,c2,C)=(u0-c1)2d狓+∫Ω2∫Ω1即在式(1)中取u(狓)=c1χΩ1(狓)+c2χΩ2(狓),狓∈Ω,χΩi(狓)为区域Ωi上的特征函数,i=1,2.2.3NEC模型引理1[5].对于任意给定的常数c1,c2∈R,CV模型的全局极小值点可以通过NEC模型min0u1ANEC(u)=λ∫Ωud狓+∫Ω的最优解u获得,取2.4Berkels模型minABerkels(u)=∫Ωu2(c1-u0)2+(1-u)2(c2-u0)2+νud狓的最优解,则C=狓∈Ω:u(狓)的全局极小值点.C={狓∈Ω:u(狓)μ},μ∈[0,1).引理2[6].若u是Berkels模型对任意给定的函数u,始终有ABerkels(min{max{0,u},1})EBerkels(u)成立,即式(4)的最优解u必定满足0u1.3梯度投影算法3.1求解Berkels模型的梯度投影算法3.1.1Berkels模型的对偶形式将∫Ωud狓=su{p∫Ωudiv狆d狓;狆=(狆1,狆2)∈C10(Ω,R2),代入到式(4)中,有minumax|狆(狓)|1Q(u,狆)=∫Ωu2f1+(1-u)2f2+νudiv狆d狓.利用文献[7]中结论命题2.4,交换上式中min和max的位置,得到max|狆(狓)|1minuQ(u,狆)=∫Ωu2f1+(1-u)2f2+νudiv狆d狓由于被积泛函在u处的二阶变分2(f1+f2)>0,故式(5)中内部极小化问题的最优解可以根据最优性条件求出,即代回到式(5)中,有max|狆(狓)|1D(狆)=∫Ω易见,上式等价于即为Berkels模型的对偶形式.3.1.2Berkels模型的求解在求解Berkels模型的对偶形式之前,我们先引入如下离散全变分、梯度算子和散度算子的定义[8]:区域Ω上的图像函数狌定义为X上大小M×N的二维矩阵(用X表示Euclidean空间RM×N).对狌,狏∈X,L2内积为〈狌,狏〉X=∑1iM,1jN范数为狌L2=〈狌,狌〉槡X;L1范数为狌L1=∑1iM,1jN对狌∈X,其梯度狌是空间Y=X×X中的矩阵向量(狌)i,j=((狌)1i,j,(狌)2i,j),i=1,…,M,j=1,…,N.其中,其离散全变分其中,对狆∈Y,离散散度算子div的定义为Page4则根据以上定义,式(6)的离散形式为算法,记为算法1.现在,我们给出求解Berkels模型的梯度投影算法1.1.设定参数和变量初始值ν,λ∈R,狆0∈Y,c1,c2;2.对k=1,…,N,计算狆ki,j=PK狆k-1i,j+τ2(犳2)i,jν+(div狆k-1)i,3.更新c1,c2的值;4.检验算法是否满足终止条件,若满足,则算法终止,狌k即为式(4)的最优解;否则k=k+1,返回第2步继续计算.其中,PK(狓)=x1正交投影,τ∈R为待选参数.关于算法1的收敛性,我们有如下结论.定理1.当0<τ<1上述定理可以利用文献[9]中关于Bermudez-列{狇k}和{狆k},有成立,并且狌i,j=ν狇i,j2(犳1+犳2)i,jMoreno算法的收敛性结论进行证明.3.2求解NEC模型的梯度投影算法3.2.1NEC模型的对偶形式首先在式(3)中添加一个二次项,有min0u1E(u)=∫Ω其中,α是正参数,指示函数fi=(u0-ci)2,i=1,2.关于式(8)与C-V模型之间的关系,可利用文献[10]中的命题3.3证明如下定理.定理2.若u是式(8)的最优解,则C=狓:u(狓)>{然后在3.1.2节中离散全变分、梯度算子和散度算子的定义下考虑式(8)的离散对偶形式.对全变分J(狌)=∑1iM,1jN变换,有是闭凸集K={div(狆,狇):(狆,狇)∈Y,|(狆i,j,狇i,j)|1,上的特征函数,即由J=J有J(狌)=sup狏∈K〈狌,狏〉=sup狏∈K∑1i,jN=supdiv(狆,狇)∈K∑1i,jN=supdiv(狆,狇)∈K∑N-1=supdiv(狆,狇)∈Ktr(div(狆,狇)T狌).又因为式(8)等价于min0狌1E(狌)=α则有min0狌1max|(狆i,j,狇i,j)|1E(狌,狆,狇)=2狌-1α根据文献[7]中的命题2.4,交换min与max的位置,有max|(狆i,j,狇i,j)|1min0狌1E(狌,狆,狇)=2狌-1α继续将上式改写成max|(狆i,j,狇i,j)|1min0狌1E(狌,狆,狇)=α2狌-ω2-α其中,ω=1式(9)中内部约束极小化问题的最优解为狌=PC(ω),PC(·)为集合C上的正交投影算子.将狌=PC(ω)代回到式(9)中,忽略常数项,即得到式(8)的离散对偶形式max|(狆i,j,狇i,j)|1{H(狆,狇)=-α从上述推导过程,可以看出在式(8)中添加二次Page5项的意义在于使得式(9)中内部约束极小化问题便于求解.若不添加二次项,则式(9)中内部约束极小化问题关于原始变量狌是一阶的,且由于约束条件0狌1存在,使得原始变量狌很难用对偶变量(狆,狇)显式地表达出来.3.2.2NEC模型的求解引入函数有根据严格闭凸函数的ProximalMap的性质[11]可知,s(·)是连续可微的且其梯度为则法,记为算法2.现在,我们给出求解NEC模型的梯度投影算算法2.1.设定参数和变量初始值α,ν,τ1,(狆0,狇0)∈Y,c1,c2;2.对k=1,2,…,N,计算ωk=1狌k=PC(ωk);3.更新c1,c2的值;4.检验算法是否满足终止条件,若满足,则算法终止;狌k即为式(3)的最优解,否则k=k+1,返回第2步继续计算.根据文献[8]中的讨论可知,保证算法2收敛的迭代步长为τ1α3.2.3NEC模型的梯度投影算法的改进根据Nesterov在文献[12]中的分析可知,算法2具有O(1/k)阶收敛速率.在此,我们结合Nesterov提出的光滑凸优化问题的快速迭代收缩算法[13]对算法2的收敛速率作加速处理,即得到如下的算法3.算法3.1.设定参数和变量初始值α,ν,L,(狆0,狇0)=(狉1,狊1)∈Y,c1,c2;2.对k=1,2,…,N,依次计算ωk=1α(狆k,狇k)=PY(狉k,狊k)-νtk+1=1+1+4t2槡k2,(狉k+1,狊k+1)=(狆k,狇k)+tk-1狌k=PC(ωk);3.更新c1,c2的值;4.检验算法是否满足终止条件,若满足,则算法终止,狌k即为式(3)的最优解;否则k=k+1,返回第2步继续计算.为保证算法3的收敛性,参数L需满足L8ν2α.由于L是H(狆,狇)的梯度H的Lipschitz常数,而对(狆1,狇1),(狆2,狇2)∈Y,有H(狆1,狇1)-H(狆2,狇2)=νPC(ω1)-PC(ω2)νsup狌∈X,狌≠0νsup狌∈X,狌≠0ν2αsup狌∈X,狌≠0(狆1,狇1)-(狆2,狇2)狌(=ν2αsup狌∈X,狌≠0又则由Beck等人在文献[14]中的讨论可知,算法3具有O(1/k2)阶收敛速率.故算法3融合了快速迭代收缩算法的加速收敛策略,提高了梯度投影算法的收敛速率.4基于分块协调下降的Newton法根据分块协调下降方法求解的策略[15]求解式(7),固定狆∈Y中除狆i,j=(狆1i,j,狆2i,j)外的其余(M×N-1)个变量,逐个求解如下二次极小化问题:x2+y21(x,y)={(νi,j(x+y)-a)2+(νi+1,jx-b)2+min当1iM-1,1jN-1时,当i=M时,Page6miny1(y)={[νM,jy-a]2+[νM,j+1y-c]2}+RM,j当j=N时,minx1(x)={[νi,Nx-a]2+[νi+1,Nx-b]2}+Ri,N其中,2((犳1+犳2)i,槡j),犳i,j=2(犳2)i,jνi,j=ν(x,y)=狆i,j=(狆1i,j,狆2i,j),a=νi,j(狆1i-1,j+狆2i,j-1)+犳i,j,b=νi+1,j(狆1i+1,j+狆2i+1,j-狆2i+1,j-1)-犳i+1,j,c=νi,j+1(狆1i,j+1+狆2i,j+1-狆1i-1,j+1)-犳i,j+1,Ri,j是与狆i,j无关的余项.容易求出,分别为狆2M,j=max-1,minνM,ja+νM,j+1c狆1i,N=max-1,minνi,Na+νi+1,Nb由于式(12)和式(13)是单变量问题,最优解很由于式(11)中(x,y)是凸函数,故在闭区域{(x,y):x2+y21}上必有最优解,且满足最优性条件:g1(x,y,λ)=烄(ν2g2(x,y,λ)=烅(ν2g3(x,y,λ)=λ[(x2+y2)-1]烆其中,λ0为Lagrange乘子.分两种情况考虑:(1)当λ=0时,直接解线性方程组有ν2()x烄y=烆检验所求得的(x,y)是否满足约束条件x2+y21,若满足,则式(16)即为式(15)的最优解;若不满足,则说明最优解在λ>0时求得.(2)当λ>0时,g3(x,y,λ)=10.此时式(15)为非线性方程组,采用牛顿法求解,有其中,犅=法(记为算法4)的具体步骤如下.综上,求式(7)的基于分块协调下降的Newton算法4.1.设定参数和变量初始值λ,ν,狆0∈Y,c1,c2;2.对k=1,2,…,N,分别根据式(14)和式(16)计算狆k的各个分量狆ki,j,i=1,2,…,M,j=1,2,…,N;3.检验由式(16)所求得的狆ki,j是否满足约束条件狆ki,j1,若满足,直接转到下一步;否则,狆k-1i,j=狆ki,j,根据式(17)重新计算狆ki,j的值;4.更新c1,c2的值;5.检验算法是否满足终止条件,若满足,则算法终止;关于算法4的收敛性,我们有如下结论.定理3.设ξ∈D={ξ=(x,y,λ)T:x,y∈R,否则k=k+1,返回第2步.λ>0}是式(15)的解,即犌(ξ)=0,则当时,对任意的k=1,2,…,N,式(17)有意义,且其迭代点列{ξk}→ξ,并具有二阶收敛速率.定理4.算法4是全局收敛且单调下降的.上述定理可以利用文献[15]中分块协调下降方法的收敛性结论证.5原始-对偶交互式迭代算法5.1NEC模型的原始-对偶形式在3.1.2节中离散全变分、梯度算子和散度算子的定义下,考虑原问题式(3)的原始-对偶形式,令H(狌)=μ〈狌,狉〉,狉i,j=((狌0)i.j-c1)2-((狌0)i.j-c2)2,J(狌)=∫Ω狌d狓.J(狌)作Legendre-Fenchel变换,有由于J(狌)=∫Ω狌d狓是严格的闭凸函数,则有首先考虑式(3)的Fenchel原始-对偶形式,对故代入到式(3)中有min0狌1max狏LPD(狌,狏)=〈狏,狌〉-J(狏)+H(狌)又因为J是闭凸集Page7K={狆∈Y:狆i,j=(狆1i,j)2+(狆2i,j)槡上的特征函数.则式(18)等价于min0狌1max|狆i,j|1LPD(狌,狆)=〈狆,狌〉+H(狌)(19)为式(3)的Fenchel原始-对偶离散形式.另一种原始-对偶形式是采用算子分裂方法[16],通过引入一个辅助变量作为对偶变量,将原问题式(3)“分裂”后所得到的优化问题.在式(3)中,令辅助变量犱=狌∈Y,即min0狌1PPD(狌,犱)=J(犱)+H(狌)s.t.犱=狌(20)原问题变成了一个等式约束优化问题,其中,狌∈X是原始变量,犱∈Y是对偶变量.对约束优化问题式(20),分别构造Lagrange函数min0狌1P1PD(狌,犱,λ)=J(犱)+H(狌)+〈λ,狌-犱〉和罚函数min0狌1P2PD(狌,犱)=J(犱)+H(狌)+σ其中,λ∈Y,σ∈R+.5.2NEC模型的原始-对偶交互式迭代算法Goldstein等人在文献[17]中提出了一种求解式(22)的原始-对偶交互式迭代算法,称为SplitBregman算法,具体步骤如下.SplitBregman算法.1.设定参数和变量初始值σ,μ,(犫0,犱0)∈Y,c1,c2;2.对k=1,2,…,N,依次计算狌k+1=argmin0狌1H(狌)+σ犱k+1=argmin犱∈YJ(犱)+σ犫k+1=犫k+狌k+1-犱k+1;3.更新c1,c2的值;4.检验算法是否满足终止条件,若满足,则算法终止;此外,文献[18]中的乘子的交替方向迭代法也乘子的交替方向迭代法.1.设定参数和变量初始值(δ,γ0)∈R+,μ,(λ0,犱0)∈Y,2.对k=1,2,…,N,依次计算狌k+1=argmin0狌1H(狌)+〈λk,狌〉+δ犱k+1=argmin犱∈YJ(犱)-〈λk,犱〉+γk2狌k+1-犱2;λk+1=λk+γk(狌k+1-犱k+1);否则k=k+1,返回第2步继续计算.可应用于求解式(21),具体步骤如下.c1,c2;3.更新c1,c2,γk的值;4.检验算法是否满足终止条件,若满足,则算法终止;否则k=k+1,返回第2步继续计算.以上两种原始-对偶交互式迭代算法都是建立在式(20)基础上的,在此,我们提出一种基于式(19)原始-对偶交互式迭代算法,记为算法5.算法5.1.设定参数和变量初始值(α0,β0)∈R+,μ,狌0∈X,狆0∈Y,c1,c2;2.对k=1,2,…,N,依次计算狌k+1=argmin0狌1H(狌)+〈狆k+1,狌〉+13.更新αk,βk,c1,c2的值;4.检验算法是否满足终止条件,若满足,则算法终止;采用梯度投影算法求解式(23)有否则k=k+1,返回第2步继续计算.将式(24)改写成其中,PK为正交投影算子.狌k+1=argmin0狌1H(狌)-〈div狆k+1,狌〉+1无约束问题的最优性条件为则有2αk狆-狆k2和1在算法5中,充分利用了原始(对偶)变量的当前值狌k(狆k+1)更新对偶(原始)变量的值狆k+1(狌k+1);由于原始(对偶)变量当前值狌k(狆k+1)还不是最优值,因此不需要精确地求解对偶问题式(23)(原问题式(24))、式(25)和式(26),仅迭代一次;式(23)、(24)中的1狆k+1-狆k和狌k+1-狌k的大小;相比于SplitBregman算法和乘子的交替方向迭代法,在迭代过程中完全避免了梯度算子和散度算子div对所求变量的作用,迭代形式更简单.SplitBregman算法、乘子的交替方向迭代法以及算法5三者之间具有如下关系:命题1.当λ=σ犫且γk=δ=σ时,SplitBreg-man算法与乘子的交替方向迭代法是完全等价的;当λ=狆时,算法5可以看作是乘子的交替方向迭代法的松弛形式.关于算法5的收敛性,在定理1和文献[19]中Page8乘子的交替方向迭代法收敛性定理的基础上,我们有如下结论.定理5.当0<αkβk<1(狌k,狆k)收敛到式(19)的鞍点(狌,狆).6数值实验为验证所提出的各算法的有效性及收敛速率,我们采用一幅大小为256×256的Cameraman图像进行数值实验.实验是在酷睿T2400CPU1.83GHz,512MB内存,Matlab7.0环境下运行的.为客观地说明各算法的分割效率,将它们与显式梯度下降算法[6]和半隐式梯度下降算法[20]以及SplitBregman算法进行了对比.实验过程中,模型参数ν=0.04;算法1中狆0=0,τ=0.125;算法2和算法3中α=0.1,τ1=αL=8ν2α,(狆0,狇0)=(狉1,狊1)=0;算法4中狆0=0,λ0=1,牛顿法的初值设为式(16)所求得的值,迭代收敛的判断条件设为λk+1-λk<ε;SplitBregman算法中μ=25,σ=2,犱0=0,犫0=0;算法5中μ=25,α0=0.25,β0=0.5,狌0=狌0,狆0=0;显式梯度下降算图1各算法进行分割后的效果图法中Δt=0.01,ε=0.01;半隐式梯度下降算法中狆0=0,Δt=0.125.通过u0=u0(狓)值限制在0,[]1内;对于平均灰度值c1,c2,其初值为c01=1,c02=0,在计算过程中分别用ck1=∫{狓∈Ω:uk(狓)0.5}u0d狓∫{狓∈Ω:uk(狓)0.5}d狓和ck2=∫{狓∈Ω:uk(狓)<0.5}u0d狓∫{狓∈Ω:uk(狓)<0.5}d狓来进行更新;除算法4外所有算法的停机条件均设为max{ck+51-ck1,ck+52-ck2}<10-4;算法4的停机条件设为max{ck+11-ck1,ck+12-ck2}<ε;并采用区域{狓:u(狓)0.5}的平均灰度值c1作为分割效果和收敛速率评判的标准,因为uk→u{狓:uk(狓)0.5}→{狓:u(狓)0.5}ck1=∫{狓∈Ω:uk(狓)0.5}u0d狓∫{狓∈Ω:uk(狓)0.5}dx在用各算法进行分割后的效果图中,左图轮廓线为{狓:u(狓)=0.5},右图区域为{狓:u(狓)0.5}.图1(a)为待分割的原始输入图像u0;图1(b)为使用显式梯度下降算法进行分割,迭代181次,耗时8.2340s,平均灰度值c1,c2分别收敛到0.6015和Page90.0856;图1(c)为使用半隐式梯度下降算法进行分割,迭代49次,耗时2.7190s,平均灰度值c1,c2分别收敛到0.6013和0.0848;图1(d)为使用算法1进行分割,迭代42次,耗时2.4220s,平均灰度值c1,c2分别收敛到0.6008和0.0846;图1(e)为使用算法2进行分割,迭代51次,耗时2.4690s,平均灰度值c1,c2分别收敛到0.6011和0.0847;图1(f)为使用算法3进行分割,迭代48次,耗时2.5630s,平均灰度值c1,c2分别收敛到0.6008和0.0846;图1(g)为使用算法4进行分割,循环5次,耗时5.6250s,平均灰度值c1,c2分别收敛到0.5997和0.0843;图1(h)为使用SplitBregman算法进行分割,迭代14次,耗时1.1250s,平均灰度值c1,c2分别收敛到0.5958和0.0853;图1(i)为使用算法5进行分割,迭代13次,耗时0.7030s,最后平均灰度值c1,c2分别收敛到0.5960和0.0857.从图1中很难看出各个算法之间的优劣,因此下面我们以平均灰度值c1为标准将各算法进行比较.表1和表2给出的是显式梯度下降算法、半隐式梯度下降算法和算法1的分割结果比较以及在迭代过程中的c1值对比.从表中可以看出在达到相同的收敛条件时,算法1和半隐式梯度下降算法要远远优于显式梯度下降算法;而在达到相同的收敛条件并且达到相同的c1值时,算法1所需的迭代次数和耗时大约为半隐式梯度下降算法的1/2.表1显式梯度下降算法、半隐式梯度下降算法和显式梯度下降算法1818.23400.60150.0856半隐式梯度下降算法492.71900.60130.0848表2显式梯度下降算法、半隐式梯度下降算法和迭代次数10.6369420.6174490.6154790.60851380.60341810.60152780.6013表3给出的是算法2和算法3之间的分割结果对比.从表3中可以看出,在达到相同的收敛条件并且达到相同的c1值时,算法3所需的迭代次数和耗时大约为算法2的3/4.因此说我们的加速收敛策略有效地加快了梯度下降算法的收敛速率.迭代次数耗时/sc1321.61000.6017321.81300.6011482.35900.6012482.56300.6008512.46900.6011512.75000.6007683.32800.6008683.70300.6004表4给出的是算法1和算法4之间的分割结果对比.从表中可以看出,在达到各自的收敛条件后并且达到相同的c1值时,算法4的耗时仅为算法1的2/9.迭代次数耗时/sc1422.42200.600855.62500.599757625.79700.5997109.18800.5997表5给出了Lagrange乘子λ在选取不同的初始值λ0时,算法4的收敛性不受影响且收敛速率受到的影响也微乎其微.这是因为,式(17)的Jacobi矩阵犅(ξ)在上处处是正定的,即Jacobi矩阵犅(ξ)的正定性与λ无关,所以式(17)对λ初值的选取较为宽松.{ξ=(x,y,λ)T:x2+y2≠0,x,y∈R,λ>0}循环次数1234567表6和表7给出的是SplitBregman算法和算法5的分割结果比较以及在迭代过程中的c1值对比.从表中可以看出,在相同的收敛条件时,两种算法所需的迭代次数大致相当,而由于算法5的迭代形式更简单,故耗时要低于SplitBregman算法.从表7中,我们发现了一个奇怪的现象,在算法5中,c1值不是单调下降的,而是出现了一个“凸形”,先降后升再降.这是由于在求解过程中,我们简单地将参数αk和βk选取为固定常数所造成的,定理5给出的算法5收敛的参数选取条件,并不能保证式(25)和式(26)在单独使用时也是收敛的.由前面的分析可Page10知,应用对偶变量进行求解的效率要高于原始变量.在参数αk=0.25时,式(25)可能不收敛,使得狆k“超过”了狆,此时,式(26)起到了“修正”的作用,将狆k又拉回到狆.因此,为避免出现“凸形”情况,考虑减小狆k+1-狆k,同时增大狌k+1-狌k.由于αk和βk的取值控制着狆k+1-狆k和狌k+1-狌k的大小,在迭代过程中,应逐渐减小αk,同时增大βk.表6SplitBregman算法与算法5的实验结果对比SplitBregman算法141.12500.59580.0853表7SplitBregman算法和算法5迭代过程中的犮1值对比SplitBregman算法迭代次数c110.638530.614350.601270.596490.5959110.5958130.5958150.5958选取变参数αk=0.25×槡2()2狆k+1=θ狆k+1+(1-θ)狆k,0<θ=10.01×k进行数值实验,并采用调整狆k+1的值,迭代20次,耗时1.2810s,最后平均灰度值c1,c2分别收敛到0.5958和0.0853.表8中给出了迭代过程中c1值的变化情况.可见,算法5在分割效果和分割效率上与SplitBregman算法很相似.迭代次数c11234567897结束语针对两相图像分割凸模型这一类大规模的不可微非线性优化问题,本文提出了3类快速有效的数值算法.第1类,分别对Berkels的无约束图像分割凸模型和Nikolova等人的约束图像分割凸模型提出了具有O(1/k)阶收敛速率的梯度投影算法,并结合了快速迭代收缩算法的加速收敛策略,将所提出的梯度投影算法的收敛速率从O(1/k)阶提高到O(1/k2)阶,从而较好地提高了这类算法的实用性.第2类,在无约束图像分割凸模型对偶形式的基础上,根据分块协调下降方法的思想,将问题转化为一组带约束条件的一元和二元二次极值问题,并利用牛顿法快速地求解其拉格朗日函数,从而使得求解过程简单且易于实现.第3类,在约束图像分割凸模型的原始-对偶系统的基础上,根据交互式迭代算法的思想,提出了一种改进型的原始-对偶交互式迭代算法,该算法能够更好地避免梯度算子和散度算子在数值求解过程中所造成的麻烦,仅需要进行简单地显式迭代,大大降低了计算的空间复杂度.在文中,不仅从理论上论证分析了这三类算法的收敛性和参数选取条件,并且通过仿真实验验证了它们的有效性及在收敛速率上的优势.
