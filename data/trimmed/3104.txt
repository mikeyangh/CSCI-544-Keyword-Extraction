Page1基于分层象限空间的P2P超级节点拓扑构造冯劲潇陈贵海谢俊元(南京大学计算机软件新技术国家重点实验室南京210093)摘要现有的P2P超级节点拓扑分为非结构化超级节点拓扑和结构化超级节点拓扑,前者支持模糊查询,鲁棒性好,但路由效率低,查询结果具有不确定性,后者支持数据定位,路由效率高,负载均衡性好,但不支持模糊查询,也不适应高度动态环境.文中将两种超级节点拓扑结构的优点结合起来,提出一种基于分层象限空间的新型超级节点拓扑Quad.它在路由方面同时支持数据定位和模糊查询,并解决了结构化超级节点拓扑对动态性支持差的问题.分析和模拟结果表明:和现有的超级节点拓扑相比,Quad数据定位在常数度数下达到O(logN)定位性能,并在路由效率和路由状态数上获得更好的权衡.在动态环境中,Quad能更有效地处理超级节点失效;在性能上,它具有更少的拓扑构建和失效修复成本并具有良好的负载均衡性.关键词对等网络;超级节点拓扑;分层象限空间;负载均衡1引言经过近几年的发展,P2P网络已成为互联网最Page2础架构,对互联网应用和分布式研究产生深远影响.P2P网络是在底层TCP/IP网络基础上构成的应用层覆盖网络.P2P拓扑结构目前主要包括非结构化和结构化两种类型.在非结构化拓扑中,Peer节点间无严格组织,资源存放在节点本地,路由传递具有随意性,其优点是系统鲁棒性好,节点失效影响小,缺点在于查找时需要通过泛洪或随机游走等盲目查找方式进行,消息流量大或查询效率较低.为改进非结构化系统的路由效率,研究人员提出基于分布式Hash表(DHT)的结构化系统,这类系统采用一致性Hash函数将节点标识(如IP地址)和资源标识(如文件名)分别映射为节点ID标识和资源ID标识,资源信息统一存放在节点ID标识与该资源ID标识最相近的节点上(资源信息可以是资源本身内容,也可以是资源位置信息,相关节点为资源信息建立索引表,所以本文用资源索引来简化表示节点存放的资源信息).与非结构化拓扑相比,DHT机制保证系统能在O(logN)上限内查找到指定的资源索引,路由效率有了很大改善.但结构化拓扑也带来两个新的问题:一是不适应高度动态环境,原因是结构化系统具有严格的拓扑,资源索引要发布到与节点ID标识最相近的节点上,一旦节点失效,储存在该节点的资源索引需要转移或重新发布.另外,路由表中往往包含O(logN)个邻居节点,这些邻居节点关系紧密,节点一旦失效会产生很高的拓扑修复费用;另一个问题是结构化系统支持数据定位但不支持模糊查询,这是因为不同的资源标识产生不同的ID标识.鉴于上述不足,研究人员利用超级节点结构对非结构化和结构化拓扑进行改进,称之为非结构化超级节点拓扑和结构化超级节点拓扑.目前的超级节点结构虽然在这两种拓扑中有效利用了节点异构性,但仍然没有解决非结构化拓扑路由效率不高以及结构化拓扑对动态性和模糊查询支持差等问题.事实上,这两类结构具有互补性,非结构化超级节点拓扑支持模糊查询、对动态环境支持好,而结构化超级节点拓扑路由效率高,良好的拓扑结构需要同时具备两种结构的优点.本文提出一种新颖的分层象限空间(Hierarc-hicalQuadrantSpace)结构,并在该结构上建立了一种新型超级节点拓扑,称为Quad,它将非结构化和结构化两种超级节点拓扑优点结合起来,在路由方面同时支持模糊查询和数据定位,并解决了结构化超级节点拓扑对动态性支持差的问题.分析和模拟结果表明:与现有超级节点拓扑相比,Quad数据定位在空间(常数度数)和时间(O(logN)定位性能)上获得更好权衡;在动态适应性方面,Quad能更好地降低超级节点失效对拓扑产生的影响.在性能上,Quad具有更小的拓扑构造和失效修复成本并具有良好的负载均衡性.第2节介绍P2P拓扑构造相关工作;第3节是Quad网络模型定义;第4节描述Quad对模糊查询和数据定位两种路由方式支持;第5节介绍Quad拓扑自组织、负载均衡和容错机制;第6节分析比较Quad和结构化超级节点拓扑在查找路径长度、路由状态数、失效修复成本以及负载均衡方面的差别,提出Quad路由改进思路;第7节通过模拟程序比较Quad和非结构化超级节点网络在拓扑构造、失效修复等方面的成本差异;第8节给出结束语.2相关工作P2P拓扑结构按分布式特征分为4类:集中索引式拓扑、完全分布式非结构化拓扑、完全分布式结构化拓扑和超级节点拓扑,相关研究工作如下:(1)集中索引式拓扑和完全分布式非结构化拓扑.最早的P2P应用Napster①采用集中索引式拓扑,这种拓扑结构将所有节点的资源索引存放在中心服务器,查询通过中心服务器进行,该结构虽然简单,但是具有单点失效和扩展性差等缺点.在Napster出现不久,完全分布式非结构化拓扑就出现了,典型应用包括Gnutella0.4版②和Freenet[1]等.在这类结构中,对等节点将资源索引存放在本地,查找主要采用洪泛和随机游走两种方式,但前者产生很大的网络流量,后者查找路径长,效率偏低.针对完全分布式非结构化拓扑的改进主要是提高查询效率,如基于BloomFilter技术的概率搜索小组算法[2]等.但总体来说,查询仍然是随机的,查询结果也是不确定的.(2)完全分布式结构化拓扑.在基于DHT的完全分布式拓扑中,资源索引的存放具有严格的限制,节点和资源标识都通过一致性Hash函数映射为数字ID标识,资源索引存放在节点ID标识与该资源ID标识最相近的节点上,典型的DHT系统包括Chord[3]、CAN[4]、Pastry[5]、Tapestry[6]、Kademlia[7]等.在完全分布式结构化系统中,查询在O(logN)①②limewire.com/developer/gnutella_protocol_0.4.pdfPage3上限内可以完成,可扩展性较好,不足之处在于DHT机制只支持精确查询,不适应动态性很强的P2P网络,限制了这种结构在文件共享等领域的应用.一类常数度数的结构化系统,如Viceroy[8]、Koorde[9]、Cycloid[10]等对结构化系统进行了改进.在常数度数结构中,路由状态数是固定的,不随网络节点规模增大而变化,因而可以减少拓扑维护成本,但这些系统并不能解决结构化拓扑对动态性和模糊查询支持差的问题.文献[11]提出一种混合式结构,即在非结构化拓扑上建立查找覆盖网,在结构化拓扑上建立索引覆盖网,该结构采用单层结构,不具备超级节点拓扑性能高、稳定性好等优点,在动态性强的P2P环境下也面临结构化索引维护成本过高的问题.(3)超级节点拓扑.超级节点拓扑按超级节点层是否支持DHT路由分为非结构化超级节点拓扑和结构化超级节点拓扑.前者包括Gnutella0.6版①、Fasttrack②协议等,系统分为两层,上层由能力较强的节点组成,称为超级节点,下层是普通节点,普通节点不参与系统的路由,查询通过超级节点进行.由于减少了参与路由的节点数,这类超级节点结构比传统的非结构化拓扑具有更好的查询性能,但路由长度和查询结果仍具有不确定性.后一类超级节点结构在超级节点层支持DHT机制,叶节点间可以采用DHT,如文献[12],也可不采用DHT,而是直接连到超级节点,叶节点通过超级节点发布和查询内容,如IS-P2P[13]模型.在结构化超级节点拓扑中,由超级节点构成的路由层比由完全分布式结构化拓扑中所有节点构成的路由层更加稳定.同时,由于参与路由的超级节点数量只占全部节点的一部分,因而查找路径长度更短.不足之处在于超级节点一旦失效带来的影响更大,不仅需要修复拓扑,结构化资源索引也需要重新发布或进行转移,该结构也不支持模糊查询.与现有超级节点拓扑不同,本文提出一种新颖的基于分层象限空间的P2P超级节点拓扑Quad,它将非结构化和结构化两种超级节点拓扑优点结合起来,其具体特征如下:(1)将分层象限空间运用于超级节点拓扑构造.象限空间的每个位置都有唯一的数字标识,称为位置标识,超级节点在拓扑中的位置不再由节点ID标识决定,而是由位置标识确定.这样,Quad既可以实现在超级节点层按资源ID进行定位,又可以避免超级节点失效给拓扑带来很大影响,因为新的替换超级节点与失效超级节点具有相同的位置标识,拓扑易于修复.另外分层象限空间使超级节点拓扑具有常数度数特点,维护成本低.(2)支持模糊查询和数据定位两种路由方式.分层象限空间类似于树形结构,支持广度优先(BFS)和深度优先(DFS)遍历,另外分层象限空间本身又是一个数值空间,所以Quad既可以支持泛洪和随机游走等模糊查询方法,又可以按资源ID进行数据定位.(3)拓扑具有良好的负载均衡性和容错机制.Quad具有自适应的调整、分裂与合并等负载均衡机制,超级节点可以向不同层次的多个邻居超级节点转移负载.在容错性方面,Quad具有周期性检测和冗余路径两种方法,在动态性强的环境中具有容错能力.3Quad网络模型定义定义1.象限空间是一种二维平面空间,以原点为基准,横轴和纵轴将平面划分成4个象限,从原点的右轴开始,象限空间按逆时针方向分为一、二、三和四象限.定义2.分层象限空间是象限空间的扩展,象限空间的每个象限可继续划分为4个子象限,逐层划分,就形成分层象限空间.分层象限空间思想借鉴了树形结构的层次概念,但是两者并不相同.与树形结构相比,分层象限空间在拓扑构造上具有两点优势:首先,象限空间比树形结构具有更直观的方向标识能力,无论是按序构造还是随机构造每个象限位置方向都非常清晰;其次,在树形结构中,上下层节点之间是一对多关系,标准的树形结构中节点没有同层邻居.而在分层象限空间中,上下层节点之间包含一对多和多对多两种关系,节点有同层邻居,因而分层象限空间比树形结构更易于实现负载均衡和容错.Quad系统中超级节点按分层象限空间进行组织,如图1所示.象限中心点A0有A1、A12、A2、A23、A3、A34、A4和A418个邻居,每个邻居节点包含一个方向,按逆时针顺序分别表示为二进制形式的(000,001,010,011,100,101,110,111)或八进制形式的0~7.第1层包含A0、A1、A2、A3、A45个超级节点,①②forge.net/src/rfc-0_6-draft.htmlPage4它们互为同层邻居,A0包含A12、A23、A34、A414个位于第2层的下层邻居,第一象限的A1包含B1、B2、B3、B4、A125个位于第2层的下层邻居,其余3个象限类似.在Quad象限空间中,每个位置的标图1Quad超级节点结构定义3.超级节点定义为七元组S=(I,PI,C,D,R,L,Y),I是超级节点ID标识,PI为超级节点位置标识,当超级节点离开时,该标识分配给处于相同位置的新超级节点使用.C表示节点容量,D为节点当前负载,R为节点路由表,L表示该节点所处层次,从上层到下层层次值依次增加.Y为节点类型,超级节点分为两种类型,象限横轴和纵轴的交点称为中心超级节点CSP(CenterSuper-Peer),横轴和纵轴的4个端点构成4个端超级节点BSP(BoundarySuper-Peer).定义4.叶节点定义为四元组F=(I,C,Y,S),I为叶节点ID标识,C表示节点容量,Y为叶节点类型,叶节点分为两类:一类是普通叶节点,另一类是候选超级节点.每个叶节点通过一个超级节点加入到网络中,超级节点按照能力和在线时间等综合因素动态从普通叶节点中选拔最优秀的叶节点作为候选超级节点,候选超级节点对父超级节点路由表和资源索引进行备份,并定期和超级节点交换信息,以便在超级节点失效时能接替其位置.S表示超级节点,是叶节点的网络接入点.识值是唯一的,由A0(不包含A0)到该节点路径包含的节点方向构成,如A12位置标识为001,B1位置标识为001000,A0可以设为一个特定的标识并在系统中作为一个特例进行处理.定义5.超级节点S的路由表定义为二元组R=(NR,QR),NR是邻居路由表,记录超级节点与同层、下层和上层邻居超级节点之间的路由关系.QR是象限路由表,支持顶层象限不相同的超级节点之间定位.定义6.超级节点S的邻居路由表定义为三元组NR=(SNR,CNR,PNR),SNR是同层超级节点邻居路由表,其表项由同一层次的CSP和BSP构成;CNR是下层超级节点邻居路由表,表项由下层中心超级节点(CCSP)和下层端超级节点(CBSP)构成;PNR是上层超级节点邻居路由表,表项包含上层中心超级节点(PCSP)和上层端超级节点(PBSP)两种类型.以图1为例,中心超级节点A12的邻居路由表为SNR(B1,B2,B3,B4),CNR(B12,B23,B34),PNR(A0,A1).端超级节点B1的路由表为SNR(A12,B2,B3,B4),CNR(C1,C2,C3,C4,B12),PNR(A1).在Quad中,超级节点邻居路由表中节点数上限为10,不随网络规模增大而同步变化.NR中用索引0~9标识10项邻居节点信息,Page5如表1所示.CSP用索引(0,2,4,6)标识同层的BSP,BSP用索引(0,2,4,6)标识CSP和其它3个BSP,其中该BSP节点自身方向对应的索引用来存储CSP;CSP的CNR为4个象限的子中心超级节点(CCSP),索引为(1,3,5,7),BSP的CNR为对应象限的4个子端超级节点(CBSP)和子中心超级节点,用索引(1,3,5,7,8)表示;CSP的PNR包含PCSP和PBSP,用路由索引8和9表示,BSP的PNR只包含PBSP,用路由索引9表示.容易看出,CSP的4个同层BSP和4个下层CCSP的索引号与这些节点的方向是一致的,所以超级节点的位置标识(PI)由距离其最近的CSP位置标识加节点自身所包含的方向构成.超级节点SNRCNRPNRCSP0,2,4,61,3,5,78,9BSP0,2,4,61,3,5,7,89定义7.超级节点S的象限路由表定义为数组QR=QRA[i],0i<3,其中每一个数组项表示为三元组QRAi=(Qi,S1,S2),满足:(1)shl(PIs,Qi)=0;(2)(Ls1<Ls2)∧(Ls2Ls).其中,0Qi<4,标识4个顶层象限.shl判断超级节点S的位置标识与Qi匹配象限的长度.方法是取S位置标识中第1组3个二进制位的前二位值和Qi进行比较,0表示不相等.条件(1)表明Qi是与S顶层象限不相同的其它3个象限,条件(2)表示每个象限路由表表项最多为两个超级节点(可以为空),这两个超级节点处于不同层并且其层次都不超过S的层次.因为顶层象限只有4个,所以超级节点象限路由表(QR)表项只需记录属于其它3个顶层象限(包括顶层象限的下层象限)内的超级节点即可,由于每个顶层象限内的表项最多包含两个节点,所以象限路由表最多包含6项.Quad对于象限路由表的节点要求并不严格,因为只需要知道特定象限的一个节点就可以定位到该象限,取不同层并且层次与本节点相近的两个节点是为了降低超级节点之间路由项的重复率.另外,将每个象限的路由表项数设为2是为了增加系统的容错性.Quad路由表的最优值设计可以根据具体应用在路由性能和维护代价之间进行权衡,增加路由表项会缩短路由长度,但会增加系统维护开销.定义8.Quad网络模型定义为四元组M=(T,V,E,X),如图2所示.T表示拓扑逻辑结构,Quad采用两层拓扑结构,从逻辑上分为超级节点层和叶节点层.V为节点集,由超级节点和叶节点组成,超级节点是拓扑的核心,担负着系统的路由任务,并负责为叶节点建立和发布索引,叶节点通过超级节点进行查询.E为拓扑路由关系,由所有超级节点路由表构成的连通关系组成.X为资源索引,包含非结构化和结构化索引两个部分.定理1.在完全Quad系统中,超级节点层的最大层次为log43N证明.在完全Quad系统中,超级节点在各象限均匀分布并且各层象限空间位置均已被分配.在这种情况下,超级节点层的第1层包括1个中心超级节点和4个端超级节点,即5个超级节点,第2层每个子象限包括5个超级节点,依次类推,每层超级节点数可以表示为4i-1×5,i为超级节点所在层次.设超级节点总数为N,超级节点最大层次为ML,则N用公式表示为N=∑ML=5+4×5+42×5+43×5+…+4ML-1×5=5×1-4ML对式(1)进行移项变换,得4Quad路由Quad路由包括非结构化和结构化两种方式.在非结构化路由中,Quad支持泛洪和随机游走等模糊查找方法.对于泛洪方式来说,由于它采用分层结构,可以消除Gnutella协议中存在的消息重复问Page6题.在随机游走查找方法上,Quad可以采用BloomFilter[14]方式建立压缩索引并在一定层次内共享,能够减少消息传递到底层时的回溯成本并缩短查找路径长度.另外,由于Quad同时支持超级节点结构和结构化特性,它可以将具有相似主题资源的节点更好地聚集在一起.在结构化路由方面,Quad将资源标识(如文件名称)通过一致性Hash函数(如SHA-1等散列算法)映射为资源ID标识.它和节点的位置标识都是数字ID标识,资源通过ID标识发布到分层象限空间内的超级节点,其中节点位置标识与资源ID标识匹配象限最长的超级节点存放该资源索引.在查找时超级节点通过查询路由表来逐步实现定位.当超级节点(设为S)接到叶节点资源发布或查询请求后,首先判断自身的位置标识与资源ID标识(设为K)是否属于同一顶层象限,如果不是,则通过象限路由表将请求传递给与K顶层象限相同且象限序列匹配最长的超级节点.如果属于同一顶层象限,则先定位到位置标识与K象限序列最长交集所对应的超级节点,再从该节点按照邻居路由表逐层向下定位到目标超级节点.如果S是图1中象限中心点A0,则直接向下层定位,在路由中属于特例.因为其它超级节点的象限路由表中均不含A0,所以只有A0的叶节点发布或查询资源时才会出现S为A0的情况,为节省篇幅文中不再考虑该特例.Quad具体路由过程见算法1,为叙述方便,这里先定义算法中用到的缩略语,如表2所示.符号shl(PIs,K)S位置标识与K象限序列匹配长度DksFWD(S,n)同一顶层象限内,向上定位到S位置标识与KGN(S,g)取S邻居路由表中g值索引的超级节点GKGlK表示GK中的第l个分组Ls超级节点S的层次象限序列表示数字ID标识(如位置标识和资源ID标识)中包含的有序象限组.将ID标识按3个二进制位为一组进行划分,每一组包含1个象限,用前两个二进制位计算象限值.例如对于标识(001101010),所划分的3个二进制位组为(001,101,010),对应的象限序列为(021).表2中shl含义与定义7中shl相同,用来判断位置标识和K象限序列匹配长度.Ls值可以通过位置标识计算得出,方法如下:首先将节点位置标识按3个二进制位为一组进行划分,计算分成的组数,在此基础上,如果位置标识的末位为1,说明该节点为CSP,层次加1.如果末尾为0,则节点为BSP,层次不再加1.以图1中B12(001001)和B1(001000)为例,由于B12位置标识划分为2组,并且末位为1,表明B12位于第3层,而B1位置标识划分为2组,并且末位为0,所以B1位于第2层.算法1.ProcedureRouting(S,K).1.l=shl(PIs,K);//计算象限序列匹配长度2.if(l==0){//值为0,表明不在同一顶层象限3.S=Dks;l=shl(PIs,K);}4.if(S∈CSP){//S是中心超级节点CSP5.S=FWD(S,Ls-l-1);}6.else{7.S=FWD(S,Ls-l);}//从BSP传递时多一跳8.while(l<GK){9.if((S1=GN(S,Gl+110.S=S1;l++;}11.elseif((S2=GN(S,Gl+1K0))!=null){12.Target=S2;Break;}13.else{//下层CSP和同层BSP都不存在14.Target=S;Break;}//目标节点为S自身15.}定理2.在完全Quad系统中,从任意一个超级节点珚S出发,按照资源ID标识(设为K)定位到目标节点的最大路径长度RLmax为Ls-2l+ML+1,平均路径长度RLavg为3MLS层次,l为shl(PIs,K),表示S位置标识与K象限序列匹配长度,ML为式(2)值log43N证明.在Quad中,按照Routing算法,从任一超级节点出发到达目标节点最多经历3个阶段:Page7位置标识与K不在同一顶层象限内时,珚S从象限路由表中查找位置标识与K位于同一顶层象限且象限序列匹配最长的超级节点S,并将请求传递给S,路径长度H为1跳(H是指在象限转移时路由中的跳数,1跳表示路由过程中从一个节点到下一个节点的一次转移);如果在同一顶层象限内,S与珚S相同,不需进行转移.显然象限转移概率为3/4,象限转移阶段平均路径长度为3/4.(2)上升阶段.Routing算法步4~7,在同一顶层象限内从S向上定位到位置标识与K象限序列最长交集所对应的CSP.上升阶段最大长度为Ls-l.节点S可能是发起查询的超级节点珚S,也可能是珚S通过象限路由表查找到的新节点,Ls在各层的概率p是相等的,概率为1在完全Quad拓扑的同一顶层象限内,S与目标节点的位置标识象限序列在第1层匹配的概率为1,在第2层匹配的概率为1/4,因为第2层包含4个子象限,在第3层匹配的概率为1/16,依次类推,l的平均值Al表示为∑ALs中,目标节点通常在最大层,因此只需比较到Ls即可,其平均值ALs为(ML+1)Al=1+1式(4)中,当ALs2时,1/4ALs较小;当ALs=1时,ML=1,整个系统只有一层,属于特例,最多只需1跳就可以直接定位到目标节点.在上升阶段,从CSP向上传递时比BSP要少一跳.由于在完全Quad系统的一个象限中同层CSP和BSP比例为14,节点是CSP的概率为1/5,因而上升阶段平均路径长度为ALs-Al-1/5.(3)下降阶段.Routing算法步8~15,从象限序列最长交集对应的CSP定位到目标节点,因为存储资源索引的超级节点层次不超过分层象限空间最大层ML,所以下降阶段最大路径长度为ML-l.最大路径长度RLmax为RLmax=H+(Ls-l)+(ML-l)=Ls-2l+ML+1平均路径长度RLavg为RLavg=3/4+(ALs-Al-1/5)+(ML-Al)5自组织、负载均衡与容错P2P网络具有很高的动态性,大量节点可能随时加入和退出系统,因而P2P网络拓扑需要具有良好的自组织性来处理节点加入和离开,并通过调整、分裂以及合并机制来保持超级节点间的负载均衡,同时拓扑还需要具有容错能力.5.1节点加入新叶节点F加入P2P网络,需要知道网络中已经存在的任意一个超级节点S,当F与S成功建立连接之后,F将共享资源索引传递给超级节点S,S将其加进本地非结构化索引库,并通过结构化路由发布到相关超级节点.如果S接受F加入后负载超出其能力限制,就需要进行拓扑调整和分裂.5.1.1加入调整过程超级节点在其能力范围内接受叶节点加入,设超级节点Si的容量为Ci,当前负载为Di,则Si负载率为DiCi负载与容量之比的上限要求,超级节点负载率大于该值后,必须将一部分负载转移给其它超级节点,βu为调整上限率,当超级节点的负载与容量之比小于该值时才可以接受其它超级节点转移负载.βu保证了接受转移的超级节点拥有一定的空闲容量,防止超级节点接受其它超级节点的叶节点后负载率接近αu.进行调整时,负载率大于αu的超级节点Si首先检查同层超级节点,按下列情况进行不同的处理,为清晰起见,我们给出图3做辅助说明.(1)Si不存在同层超级节点,则Si检查是否存在上层超级节点Sp满足负载Dp<βuCp,如果有,则Si向Sp转移DiCp-DpCiCi+Cp尽可能保持相同的负载率,表示向下取整.如果Si无上层超级节点或上层超级节点负载DpβuCp,则对Si进行分裂.例如图3中第一顶层象限内超级Page8节点B12过载时,先检查是否存在同层邻居超级节点,当没有同层邻居节点时,按照Quad逐层构造规则,也不会有下层节点,因而B12只有检查上层超级节点A12和B1,为了降低负载转移对拓扑产生的影响,B12只检查自己的直接上层超级节点,不再向上递归传递.如果A12和B1中负载最轻的节点负载率小于βu,则B12向其转移负载,如果不满足转移条件,则对B12进行分裂,产生新的超级节点.(2)Si存在同层超级节点,并且其中负载最小的Sj满足负载Dj<βuCj,则Si向Sj转移DiCj-DjCiCi+Cj个节点.如图3中第二顶层象限内的超级节点C1过载时,检查同层超级节点邻居A23、C2和C3,如果负载最轻的节点负载率小于βu,则C1向其转移负载.(3)Si存在同层超级节点,并且其中负载最小的节点Sj负载DjβuCj,不能进行转移,则检查上层邻居,如果其负载率低于调整上限率βu,则向其转移相应的负载,如果上层邻居不满足转移条件,Si检查下层邻居,按照下列情况进行相应处理:①Si无下层超级节点,则对Si进行分裂.例如图3第二顶层象限内的超级节点C2过载时,其同层邻居A23、C1和C3和上层邻居A2负载率均不小于βu,不满足调整条件并且由于C2无下层超级节点,所以对其进行分裂.②Si存在下层超级节点,并且其中负载最小的超级节点Sk满足Dk<βuCk,则Si向Sk转移DiCk-DkCiCi+Ck载,其同层邻居A34、D1、D3和D4和上层邻居A4负载率不小于βu,不满足调整条件,但下层邻居D23负载率小于βu,则D2向D23转移负载.③Si存在下层超级节点,并且其中负载最小的超级节点Sk负载DkβuCk,则Si向Sk发送调整消息,Sk递归执行步(3),如果Sk仍然不能完成调整,则需要继续向下层传递,直到调整结束.如图3中第四顶层象限内的A4过载,同层A0、A1、A2、A3负载率均不小于βu,则A4检查下层超级节点A41、E1、E2、E3、E4,如果其中负载率最轻的节点比如E2负载率不小于βu,则A4将转移请求发送给E2、E2执行步(3),递归进行调整.5.1.2分裂过程在节点不断加入的过程中,Quad拓扑会自适应的进行调整,新的超级节点会随着分裂不断增加.图4显示了二层Quad拓扑的动态分裂过程,为清晰起见,(c)、(d)、(e)中心超级节点的叶节点被省略.在分裂过程中,系统中的第1个节点自动成为超级节点,该超级节点在其能力范围内接受叶节点加入,如图4(a)所示,当叶节点数超出其能力限制并且无法通过调整转移给其它超级节点时,超级节点向第一象限的0方向分裂出一个新超级节点,如图4(b)所示,在随后的分裂过程中,超级节点在其它未分配的(2,4,6)3个方向继续分裂新超级节点,如图4(c).当一层的方向分配完后,超级节点向下层方向分裂,如图4(d).由于超级节点在分裂之前,会先在同层超级节点进行调整,所以只有在同层象限都满的情况下才向下层分裂,不会出现4个同层象限邻居还有位置空间的情况向下层分裂.另外,通过向上层超级节点调整负载,一个象限的负载会间接转移到上层其它象限.二层Quad拓扑最终分裂后的情况如图4(e)所示.Page9如下:设需要分裂的超级节点为Si,具体分裂步骤(1)确定分裂方向.超级节点分裂方向遵循层次优先、象限顺序优先原则.节点首先判断邻居路由表中同层(0,2,4,6)4个方向中是否有未分配的索引,如果有,则选择标号最低的方向.如果同层4个方向已满,则从下层超级节点确定方向,其方向确定规则是:如果Si是CSP,则分别按4个象限子中心超级节点(CCSP)索引顺序中未分配的方向确定分裂方向,对应邻居路由表索引(1,3,5,7),如果Si是BSP,则以Si对应的下层CCSP以及CCSP的同层(0,2,4,6)方向为序确定分裂方向,分别对应Si的邻居路由表索引(8,1,3,5,7).(2)选择新超级节点Sj.Sj从Si的候选超级节点产生,候选超级节点是叶节点中最优秀的节点.新超级节点的位置标识由距离其最近的CSP位置标识加分裂方向构成.新超级节点Sj.(3)叶节点转移.Si转移DiCjCi+Cj(4)路由表和索引处理.按照分裂方向,Si和Sj分别添加邻居路由表索引.Sj象限路由表先从Si复制,Sj再通过这些节点获得层次更为接近的超级节点.在索引处理上,Si把与Sj象限序列相匹配的结构化倒排索引表表项转移给Sj.转移时遵循同层CSP或BSP转移给同层BSP,上层BSP转移给下层CSP原则.非结构化资源索引不进行转移,由相关超级节点从叶节点中重新创建.5.2节点退出节点可能因为多种原因离开P2P网络,比如节点选择主动离开或因为网络故障被动离开.主动离开情况下,节点可以通知其它节点完成相应拓扑调整,被动离开时,其邻居节点通过定期心跳函数才可以检测到,处理成本增加并具有滞后性,但两者处理方式比较类似,为简化起见,本文对这两种情况不做进一步区分.节点分为超级节点和叶节点,其退出对拓扑有不同影响.超级节点退出会对路由产生影响,因而需要修复拓扑,方法是由候选超级节点替代退出的超级节点.候选超级节点位置标识设为退出超级节点的位置标识,并与其邻居路由表和象限路由表中的超级节点建立连接,然后候选超级节点接受退出超级节点的叶节点作为子节点并从中选择新候选超级节点.叶节点退出时,超级节点需要将其从本地非结构化索引中删除,叶节点的结构化索引不作处理,因为超级节点会定期对倒排索引表中的叶节点发PING消息,如果没有收到PONG消息,会将未响应节点的索引项从倒排索引表中删除.设αb为负载下限率,即当超级节点负载与容量之比低于该比率时,超级节点必须从其它超级节点移进一部分负载;βb为调整下限率,即超级节点的负载与容量之比不低于该值时才可以向其它超级节点转移负载.当叶节点退出使父超级节点负载率小于负载下限率αb时,触发退出调整和合并行为.5.2.1退出调整过程退出调整与加入调整过程类似,负载低于αb的超级节点Si检查同层超级节点,按下列情况进行不同的处理:(1)Si不存在同层超级节点,则检查Si是否存在上层超级节点Sp满足负载DpβbCp,如果存在,则Sp向Si转移DpCi-DiCpCi+Cp层超级节点或上层超级节点负载Dp<βbCp,则由Si发起合并过程.(2)Si存在同层超级节点,并且其中负载最大的Sj满足负载DjβbCj,则Sj向Si转移DjCi-DiCjCi+Cj个节点.(3)Si存在同层超级节点,并且其中负载最大的超级节点Sj负载Dj<βbCj,不满足转移条件,则继续检查上层邻居,如果其中负载最大的上层超级节点负载率不低于调整下限率βb,则向Si转移相应的负载,如果上层邻居不满足转移条件,则Si需要进一步检查下层超级节点,按照下列情况进行相应的处理.①Si无下层超级节点,则对Si进行合并操作.②Si存在下层超级节点,并且其中负载最大的Sj满足DjβbCj,则Sj向Si转移DjCi-DiCjCi+Cj节点.③Si存在下层超级节点,并且其中负载最大的超级节点Sk负载Dk<βbCk,则Si向Sk发出调整消息,Sk递归执行步(3),如果Sk不能在本层完成调整,需继续向下层传递,直到调整结束.5.2.2超级节点合并当超级节点自身的负载无法通过调整满足最低限制要求时,需要进行合并.超级节点合并过程与分Page10裂过程大体相反.在合并方向上,遵循同层BSP向同层CSP合并,下层CSP向上层BSP合并规则.超级节点需要调整路由表中与被合并超级节点对应的表项.在叶节点转移上,被合并超级节点和其包含的叶节点一起转移给发起合并的超级节点.在索引处理上,被合并节点的倒排索引表转移给合并方向的超级节点.非结构化索引部分由合并后的超级节点从叶节点中重新创建.5.3拓扑容错机制P2P网络工作在一个具有高度动态性和成员不可靠的环境下,因而P2P系统必须具备有效的容错机制来保证超级节点失效后,网络仍然能够正常运行.Quad具有周期性检测和冗余路径两种容错方法,候选超级节点会定期检测父超级节点是否处于正常状态,如果其失效,候选超级节点会很快接替失效的超级节点来修复拓扑.在修复期间,Quad通过冗余路径保证其它超级节点之间的正常路由.从同层超级节点来看,每个超级节点都包含同层其它邻居超级节点信息,CSP或BSP失效不影响其它超级节点之间的互连.从上下层超级节点来看,邻居超级节点间的路径具有冗余设计,每一对上下层超级节点间都有两条以上路径,如图5所示.图5显示了一个象限的两层超级节点之间关系图,其中超级节点A和B是第1层CSP和BSP,C是A和B的下层中心超级节点(CCSP),D是B的下层端超级节点(CBSP),可以看出,图中任意两个节点间都有两条以上路径,如A可以通过B到达D,也可以通过C到达D,图中任何一个超级节点或一条路径失效都不影响其它超级节点之间的连通性.当B和C同时失效时,只要有一个候选超级节系统IS-ChordIS-CANIS-PastryB:ID进制,|L|:叶集大小,|M|邻居集大小logBN(B-1)·logBN+|L|+|M|B·logBNIS-TapestryQuadlog2Nd4·N1/d表3Quad和结构化超级节点系统比较logBN3ML2-9760点修复完成,A和D之间就可以进行路由.如果一个象限的所有超级节点如C和D都失效,失效节点的候选超级节点可以通过预先备份的邻居路由表找到上下层超级节点并修复拓扑.如果同一象限相邻两层所有超级节点同时失效,失效超级节点的候选超级节点可以通过象限路由表向其它象限的超级节点进行查询,获得修复拓扑所需的本象限其它各层超级节点信息,避免网络被分割.6分析6.1与结构化超级节点的拓扑比较由于IS-P2P网络模型[13]在超级节点层采用了典型的结构化系统,我们将Quad与IS-P2P模型中提出的4个系统进行比较,比较包括3个方面:(1)查找路径长度.定义了从任意一个超级节点出发,到达目标节点的跳数;(2)路由状态数.路由状态数反映了超级节点路由表以及相关集合中的节点数量,路由状态数越大,拓扑维护费用就越高.一般来说,结构化系统的查找路径长度和路由状态数之间存在一个渐近曲线关系,路由状态数越大,查找路径越短,反之亦然;(3)节点加入或离开产生的最大拓扑修复成本.我们取两者中的最大值作为比较参数.Quad和IS-P2P模型中4个结构化系统比较结果如表3所示.在5种结构的超级节点层,IS-Chord采用了带弦环结构,IS-CAN为多维空间结构,IS-Pastry、IS-Tapestry是超立方体结构,Quad采用分层象限空间结构.从查找路径长度来看,5个系统的路由时间复杂度均为O(logN).表4显示了5个系统的查找路径长度和路由状态数在不同超级节点规模下的计算结果.由于Quad采用了八进制,为了保证维数或进制的一致,我们除IS-Chord仍采用经典的二阶外,IS-CAN采用三维,IS-Pastry和IS-Tapestry取八进制作为参数,另外,IS-Pastry的|L|和|M|值取B作为参数.Page11表4Quad和结构化超级节点系统在不同超级节点规模下数据值比较系统超级节点为1000个时的数值IS-Chord1010IS-CAN7.56IS-Pastry3.339.3IS-Tapestry3.326.6Quad从查找路径长度来看,IS-Pastry和IS-Tapes-try最短,Quad次之,然后是IS-Chord和IS-CAN.从查找路径长度增长趋势来看,随着超级节点规模增大,IS-Pastry和IS-Tapestry的查找路径长度增幅仍然最小,Quad和IS-Chord均保持平缓的增长,IS-CAN在这方面最差,因为当超级节点规模增加时,IS-CAN查找路径长度增长幅度远大于其它4个系统.从路由状态数来看,IS-Pastry和IS-Tapestry最大.IS-Chord在超级节点规模较小时,路由状态数要比Quad小一些,但是随着超级节点规模增加,该值会逐渐增加并超过Quad.IS-CAN和Quad的路由状态数具有Viceroy、Koorde和Cycloid等常数度数结构化系统的优点,在不同网络规模下都能保持不变,具有较好的可扩展性.从数值上看,IS-CAN的路由状态数比Quad要小,但代价是随着超级节点规模增大,查找路径长度增长过快.从超级节点加入或离开产生的最大拓扑修复成本来看,IS-Chord最高,为路由状态数的平方.在IS-Pastry和IS-Tapestry中,因为超级节点加入时要构建路由表并且两者的路由表状态数都较大,所以构造成本要高于Quad和IS-CAN,此外,IS-Chord、IS-Pastry和IS-Tapestry的拓扑修复成本都随超级节点规模增加而增大.相比之下,Quad和IS-CAN中超级节点加入或离开对拓扑影响小,两者的修复成本与路由状态数相一致,均为常数值,能较好适应拓扑的动态性.在结构化超级节点拓扑中,超级节点失效不仅会影响路由表,而且会影响其代理的叶节点和存储结构化资源的倒排索引表.在Quad中,由于超级节点在拓扑中的位置是由其位置标识决定的,独立于ID标识,并且位置标识可以赋给从其叶节点中选出的候选超级节点,所以候选超级节点可以自然替代失效的超级节点,其它叶节点只需将候选超级节点作为父超级节点即可,不需要寻找新超级节点加入.此外,通过在候选超级节点预先备份超级节点的倒排索引表,超级节点失效后原有的结构化资源索引不受影响.而在IS-Chord、IS-CAN、IS-Pastry和超级节点为100000个时的数值路径长度状态数34.8610.316IS-Tapestry4个结构化超级节点系统中,超级节点只有ID标识,没有位置标识,因为不同ID标识的超级节点在拓扑中的位置不一样,因而即使采用候选超级节点替代机制解决叶节点重新连接问题,失效超级节点的结构化倒排索引表也不能直接转移给候选超级节点,该表要么通过候选超级节点转移到与失效超级节点标识相近的超级节点,要么事先将倒排索引表备份到标识相近的超级节点,或者系统采用多个Hash函数进行映射以实现冗余备份,但无论上述哪种方法,都会带来额外的路由和存储成本,相比之下,Quad中超级节点失效产生的资源索引修复成本是最小的.通过上述分析,Quad与结构化超级节点拓扑相比具有以下特征:(1)Quad在查找路径长度和路由状态数上保持了更好的均衡性.(2)Quad具有常数度数结构化系统的特征,在每个超级节点维护固定路由表项数的同时,仍然能达到O(logN)跳的定位效率.(3)Quad在超级节点失效修复成本方面具有优势,只需较低的修复成本就能快速恢复拓扑,并且不影响倒排索引表,能更好地适应动态环境.6.2Quad拓扑结构的负载均衡性结构化超级节点拓扑的负载均衡机制与单层的结构化拓扑具有很大的不同.在单层结构化拓扑中,一致性Hash函数保证了映射后的ID标识具有良好的均衡性,在此基础上构建的拓扑也是均衡的,但是在结构化超级节点拓扑中,每个超级节点都要代理一定数量的叶节点,由于叶节点加入和退出具有随机性,因此即使ID标识是均衡分布的,各个超级节点的负载也不能自动实现均衡,而不平衡的拓扑会带来路由效率低下,系统容易形成热点等诸多不足.Quad在负载均衡方面具有自适应的调整、分裂与合并机制,与IS-Chord、IS-CAN、IS-Pastry和IS-Tapestry相比,Quad除了可以向同层邻居超级节点(类似于IS-CAN相邻区域的超级节点)调整负载,还可以向上下层超级节点(类似于IS-Chord、Page12IS-Pastry和IS-Tapestry的前驱与后继超级节点)转移叶节点.在调整顺序上,先是在同层超级节点之间进行调整,保证了同一层次的各个象限保持均衡.而上下层超级节点间的负载调整能使下层区域的负载逐步转移到上层其它区域.另外,在向上层超级节点调整的时候,只考虑直接上层超级节点,而不是递归向上,使一次调整不会对象限其它区域产生大的影响.在分裂与合并方面,因为Quad中新超级节点在拓扑中的位置标识(PI)与其分裂或合并方向相对应,分裂与合并只在本区域进行,不影响其它区域,Quad这种特性也降低了其物理网络拓扑和覆盖网(Overlay)不匹配问题,因为节点总是就近进行处理.而在IS-Chord、IS-CAN、IS-Pastry和IS-Tapestry中,ID标识决定了超级节点在拓扑结构中的位置,如果新产生的超级节点ID标识对应于其它拓扑位置,或者超级节点不能和相邻区域的超级节点合并时,分裂与合并就要跨区域进行,对拓扑影响较大.通过以上分析,Quad在负载均衡方面具有以下特点:(1)超级节点数量能够随系统中节点数量的增加或减少作自适应的增减.(2)即使大量节点向少数超级节点请求加入,Quad也能够将这些节点均衡的调整到不同层次的不同象限区域.(3)调整、分裂与合并机制不会引起拓扑“雪崩效应”,即少量拓扑调整不会引起很大的拓扑变化.6.3Quad结构化路由性能的改进Quad结构化路由分为象限转移、上升和下降3个阶段,通过对路由表进行调整,并利用缓存就可以有效改进其路由性能,以下是两种改进Quad路由性能的方法:(1)利用顶层象限内同层超级节点“短链”,减小上升阶段的长度.在Quad中,象限路由表只能解决不同顶层象限之间的超级节点定位,不能实现同一顶层象限内的不同子象限同层超级节点定位,我们称前者为“长链”,后者为“短链”.在式(4)中,我们证明了“长链”可以使象限序列匹配平均值达到4/3,因而很多查询需要上升到接近第2层才能向下定位,不仅增加了路由长度,也会增加这些节点的压力.通过在路由表中增加“短链”可以有效解决这个问题.在Quad一个顶层象限内,第2层包括最多5个超级节点,这些节点利用邻居路由表可以完成互相定位,其作用相当于“短链”.在一个顶层象限内的第3层最多包括20个超级节点,分属于4个不同的第2层子象限,所以第3层一个象限内的超级节点只需要3个“短链”节点就可以定位到其它3个属于不同第2层子象限的第3层象限,在这些第3层象限中,“短链”节点通过邻居路由表可以找到和资源ID象限序列匹配长度为3的超级节点.同理,在一个顶层象限内的第4层最多包含80个超级节点,属于16个第3层子象限,第4层的超级节点只需要12个“短链”节点就可以定位到属于其它12个第3个象限的第4层超级节点(其它3个第3层象限的第4层子象限可直接利用邻居路由表定位),这些“短链”节点通过邻居路由表可以找到和资源ID象限序列匹配长度为4的超级节点.因此我们只需在第3层超级节点设置3个“短链”节点,在第4层超级节点设置12个“短链”节点(其它层不需设“短链”)就可以显著提高路由效率,并减小上层节点压力,因为象限序列匹配值l会对路由长度产生2l影响,并且Quad拓扑第4层最多可包含320个超级节点,平均路由压力不大.如果只设置第3层超级节点的3个“短链”,则不需增加Quad路由表数量,只需将象限路由表数组项中的一个节点变成“短链”(需要增加“短链”节点象限标识).此时,上升阶段最多只需要上升到第3层即可,不仅缩短了上升阶段长度,而且第2层只需承担很小的路由任务.而在Quad拓扑的第3层,超级节点数量最多可达80个,也可以有效缓解超级节点路由压力.(2)利用结构化索引缓存,减小下降阶段的长度.在Quad中,随着各层超级节点的不断分裂,结构化索引不断被转移到更低层的超级节点.所以在路由下降阶段总是要到达最低层才可以定位到存放结构化索引的目标节点.如果在结构化索引向下转移过程中,上层超级节点缓存一定数量的结构化索引副本,则定位过程不一定要下降到最低层超级节点,在下降阶段的过程中就有可能通过倒排索引表副本查找到资源信息.7模拟验证因为非结构化超级节点拓扑在拓扑构造和失效修复等方面比结构化超级节点拓扑更具成本优势,所以本文将Quad和其中较优的非结构化超级节点拓扑进行比较.我们在PeerSim①基础上用Java分别实现了Quad和类似于Gnutella0.6版的两层非结构化超级节点拓扑(简称为Gnu)模拟程序,比较①PeerSimSimulator.http://peersim.sourceforge.net/Page13内容包括拓扑构造成本、调整和分裂数、失效修复成本3个方面,另外我们也模拟验证了Quad负载均衡特征.模拟中两种协议的节点构造方式、随机函数都保持一致,节点容量服从Power-Law规则,分布指数为2.2,具体参数如表5所示.参数NFCDαuβuαbβb产生的消息数.生的消息数.7.1拓扑构造成本在Quad拓扑构造中,节点之间的交互通过消息传递来实现,我们用传递的消息数来表示拓扑构造成本,具体包含以下3类:的消息数.(1)请求成本,节点向其它节点请求加入产生(2)接受成本,节点响应其它节点的加入请求(3)移动成本,叶节点在超级节点之间移动产由于请求成本和接受成本是相对应的,因此我们在模拟中只考虑接受成本和移动成本.Quad和Gnu拓扑构造产生的消息成本如图6和图7所示.图6比较了不同规模新节点加入网络时产生的总接受成本和总移动成本,可以看出Quad在这两个方面均低于Gnu.例如当20000个新节点加入时,Quad总接受成本是45145,总移动成本是25146,而Gnu的总接受和总移动成本分别为49742和29743;当40000个新节点加入时,Quad总接受成本是80734而Gnu是94243,总移动成本方面Quad是45735,小于Gnu的成本54244.图7比较了单个节点产生的最大移动成本和接受成本.Quad中单个节点最大移动成本在不同网络规模下的平均值要比Gnu低1.5个消息数.在单个节点最大接受成本方面,Quad要明显优于Gnu,如40000新节点加入时,前者成本值为592,后者为807,这表明和Gnu相比,Quad中节点成为热点的可能性要小一些.7.2调整与分裂数为了保证超级节点之间的负载均衡,超级节点会通过调整和分裂转移自身负载,调整是在超级节点间转移叶节点负载,会增加超级节点的消息处理成本并影响其本地非结构化资源索引,而分裂会产生新的超级节点,影响超级节点路由表和资源索引,因而在保证拓扑均衡基础上减少调整和分裂数有利于降低系统负载.图8对Quad和Gnu拓扑调整和分裂情况进行了比较,从图中可以看出,Quad和Gnu在分裂次数上非常接近,超级节点数占总节点数比例均保持在1.6%~1.8%之间.在调整次数上,Quad比Gnu要低很多,例如当加入节点数为20000时,Quad和Gnu的调整数分别为2502和7333,当加入节点数为40000时,Quad和Gnu的调整数为5309和17223,Quad调整次数只占Gnu的三分之一左右.这表明,在保持拓扑负载均衡上,Quad不需要进行频繁的叶节点转移.Page147.3失效修复成本由于P2P网络具有高度动态性,能否有效处理节点失效对系统性能有重要影响.图9和图10显示了网络规模为40000时,超级节点和叶节点在不同失效比例下的修复成本.图9显示了超级节点失效情况,可以看出,Quad在不同失效比例下的修复成本要远小于Gnu,比如当超级节点失效比率为30%时,Quad和Gnu修复成本分别为13119和40209,当失效比率为80%,Quad修复成本为35077,而Gnu修复成本多达108999,Quad的修复成本只占Gnu的32%左右,表明Quad中超级节点失效对拓扑影响较小.当叶节点失效或退出使超级节点负载小于负载下限率αb时,会引起超级节点之间的调整和合并.图10显示不同叶节点失效比例下的调整和合并成本.可以看出,当失效比例较低时,Quad和Gnu拓扑修复成本大体接近,但当失效比例持续增加时,Gnu失效修复成本要明显超过Quad,例如当叶节点失效比例为60%时,Quad和Gnu的失效修复成本分别为834和1442,当叶节点失效比例为80%时,两者的修复成本分别为5434和6890.这表明Quad虽然具有结构化特征,但在处理节点失效方面仍要优于Gnu.7.4负载均衡在Quad拓扑中,当超级节点过载时,能将叶节点转移给负载较轻的超级节点,负载过低时,也能从其它超级节点移进叶节点.通过分裂、调整和合并机制,各个层次和各个象限的超级节点负载能保持相对均衡.图11显示了Quad在不同网络规模下各个层次超级节点负载情况.由图可知,各层的超级节点负载率在0.5到0.88之间,其中1层到3层的负载比率非常接近,都在0.8左右,4层在0.75左右,5层的超级节点负载率维持在0.65左右,6层由于在最低层,超级节点比其它层多一些空闲空间,超级节点负载率为0.51.此外,在不同的网络规模下,各层负载比率变化不大,体现了Quad拓扑具有良好的负载均衡性.图12比较了Quad拓扑在不同象限的超级节点负载情况,数据表明4个象限的超级节点负载率差距保持在10%之内,如网络规模在20000时,4个象限的超级节点负载率差别不到3.2%,同时各个象限超级节点负载比率在不同网络规模下也保持了较好的稳定性,差异在5%之内.8结束语本文实现了一种新型超级节点拓扑Quad,其创新点在于:(1)将分层象限空间应用于P2P超级节Page15点拓扑构造,在保持常数度数下达到O(logN)定位性能,并在定位时间和路由表状态空间方面获得更好的权衡.(2)解决了结构化超级节点拓扑对动态性支持不好的缺点,通过位置标识降低了超级节点失效带来的影响.(3)同时支持数据定位和模糊查询.(4)拓扑具有良好的容错和负载均衡机制,并具有较低的构造和维护成本,提高了应用性能.目前在P2P应用方面,结构化系统因为不适应高度动态环境和不支持模糊查询而难以大规模部署于广域网环境.Quad通过上述改进,能够更好地推动超级节点结构在P2P文件共享及流媒体等领域的应用.在下一步工作中,我们将继续改善Quad在安全和路由等方面性能,并提高其语义聚类能力,使Quad具有更好的实用性.
