Page1大规模图像特征检索中查询结果的自适应过滤艾列富1),2)于俊清1)管涛1)何云峰1)1)(华中科技大学计算机科学与技术学院武汉430074)2)(安庆师范学院计算机与信息学院安徽安庆246133)摘要针对大规模图像的快速检索问题,提出了面向倒排索引结构的检索方法中查询结果的自适应过滤方法:全面过滤和不完全过滤.目的是在不影响查询精度的前提下,提高查询效率.根据查询特征所在的空间位置,全面过滤通过构造以查询特征点为球心的超球体并自适应地计算半径,只对位于超球体内部的查询结果进行排序,从而减少需要排序的查询结果数量,提高查询效率.在此基础上,为了降低过滤查询结果的时间开销,不完全过滤将倒排列表划分为若个子倒排列表并将对应的聚类中心用于过滤查询结果.为了验证所提出方法的有效性,以一种典型检索方法:基于残差量化的检索方法为应用实例,分别将全面过滤和不完全过滤与该检索方法相结合.此外,为了提高特征量化效率,将一种欧式距离下限定理与残差量化相结合并用于过滤特征量化过程中非近邻聚类中心.通过在公开数据集进行实验,实验结果表明在保证具有相同平均查全率的前提下,全面过滤和不完全过滤都能明显减少基于残差量化的检索方法的查询时间,不完全过滤比全面过滤具有更快的检索速度.此外,非近邻聚类中心过滤可以有效提高残差量化的特征量化效率.关键词大规模图像特征;查询结果;自适应过滤;超球体;距离下限1引言随着互联网和多媒体技术的发展,以图像为代表的多媒体信息呈现爆炸性增长.面对海量的图像库,只有对图像进行有效地组织以便于浏览、搜索和检索,人们才能快速和准确地获取视觉上相似的图片.因此,如何在保证具有较好查询精度的情况下快速检索到相似图像至关重要.类似于kd树[1-2]的树形检索方法虽然在低维特征空间上具有较好的检索效率,但是随着维度的增加,其搜索效率就会不断降低,最终退化到复杂度为O(nd)的线性检索.类似于E2LSH[3]的位置敏感哈希方法通过一组哈希函数,将相似的图像特征映射到哈希表中相同桶或者邻近桶.迄今为止,E2LSH已成功应用于局部描述符[4]和三维物体[5]的索引与检索.相对于稀疏特征向量,E2LSH对致密特征向量具有更好的检索性能.然而,E2LSH需要计算查询特征与查询结果集中所有特征之间的欧式距离并排序,这意味着图像的原始视觉特征需要存储在计算机内存中,从而在一定程度上影响了E2LSH的检索速度和可以处理的图像库规模.为了降低存储空间,哈希编码方法,如谱哈希(SpectralHasing)[6]、球形哈希(SphericalHashing)[7]、k-means哈希(k-meansHashing)[8]、随机最大边缘哈希(RandomMaximumMarginHashing)[9]以及迭代量化(IterativeQuantization)[10]等,利用哈希函数将相似的特征映射为相同或者汉明距离相近的二进制编码.这类方法同样需要对所有查询结果进行排序,虽然其使用的汉明距离较欧式距离可以大幅提高排序速度,但是,汉明距离的区分能力受限于其采用的二进制编码的长度.从文本检索引入视觉检索,基于倒排索引的图像检索方法[11]近年来得到了广泛的研究与应用.倒排索引结构中每个倒排列表由一个视觉单词指示.每个索引列表相当于一个聚类,对应的聚类中心即为视觉单词.构建倒排索引时,图像的视觉特征被插入到距离最近的视觉单词对应的倒排列表.为了降低倒排索引结构所需的存储空间,目前已有一些有损压缩方法以及特征量化方法用于对图像特征进行编码,从而大幅降低图像特征的存储需求.这些方法主要包括汉明嵌入[12-13]、非对称汉明嵌入[14]、mini-BOF[15]、积量化[16-17]、残差量化[18]以及转换编码[19]等.传统倒排索引结构中倒排列表数即为需要训练的聚类中心数.倒排列表的规模越大,对数据集的划分粒度则越细,但是训练聚类中心所花费的时间开销就越大.文献[20]利用积量化将特征向量分为2段并在子向量空间上分别训练k个聚类中心,从而构建包含k2个索引列表的倒排索引结构.倒排列表对应的聚类中心为这2组聚类中心的串联向量.图像特征检索时,基于倒排索引的图像检索方法首先查找若干个近邻倒排列表,然后将对应倒排列表中所有特征点都作为查询结果并排序.目前面向倒排索引的检索方法通常将距离查询特征最近的若干个视觉单词对应的倒排列表中所有特征都作为查询结果并用于排序.因而,查询结果的数量是影响查询速度的一个重要因素.实际上,与查询特征相似的仅仅是空间位置位于查询特征周围的特征点.如果能够对查询结果进行有效地过滤,只将位于查询特征周围位置的查询结果用于排序,将对提升查询速度具有重要意义.本文提出面向倒排索引结构的两种基于自适应超球体的查询结果过滤方法:全面过滤和不完全过滤.全面过滤方法为每个查询特征点自适应地构造以其为球心的超球体,只对查询结果中位于超球体内部的特征点进行排序,从而减少排序的特征点数,提高查询速度.在此基础上,不完全过滤方法通过降低过滤查询结果的计算量,进一步提高查询效率.以基于残差量化的检索方法为应用实例,将提出的自适应过滤方法应用于该检索方法并通过实验证明查询结果的全面过滤和不完全过滤在不影响查询精度的前提下,可以明显减少查询时间.此外,目前的量Page3化方法,如积量化[16-17]、残差量化[18]等,都是采用硬匹配方法,即计算输入图像特征与量化器每个聚类中心的距离再找到距离最近的聚类中心作为该层的量化结果.因而,随着聚类中心的数量或者图像特征规模增大,其特征量化的时间开销呈线性增长.文献[21]提出了一种基于下限过滤的精确最近邻查找方法用于图像分类.本文将利用文献[21]提出的欧式距离下限同残差量化方法相结合以提高特征量化的效率.本文第2节介绍相关工作;第3节分别论述提出的两种查询结果自适应过滤方法及其在基于残差量化的检索方法中的应用;第4节描述基于下限过滤的特征量化;第5节是实验性能评测和比较;第6节对全文进行总结和讨论.2相关工作传统基于倒排索引的图像检索方法通常在倒排索引结构中查找距离查询图像的视觉特征最近的w(w1)个视觉单词[16,18],并将这些视觉单词对应的倒排列表中所有视觉特征都作为查询结果.如果最终查询结果只需要knn个相似的视觉特征,则需要进一步计算查询特征与所有查询结果之间的欧式距离并排序.基于残差量化的检索方法[18]是在传统面向倒排索引的检索方法的基础上提出的一种基于量化的搜索方法.构建倒排索引结构时,首先类似于传统方法,根据用k-means训练得到的视觉单词本υ={c1,c1,…,ck},将特征xi插入到距离最近的视觉单词对应的倒排列表,其计算方法如式(1)所示:其中,cx为距离xi最近的视觉单词,d(xi,cj)为xi与索引结构中各视觉单词之间的欧氏距离.然后,将利用残差量化方法对xi进行量化得的编码保存到对应的倒排列表.图1为对应的倒排索引示意图,每个倒排列表对应一个视觉单词,相当于一个聚类,倒排列表的每个节点存储视觉特征ID及其残差量化编码.其将xi插入倒排索引的时间复杂度为O(k×dim),其中dim为特征的向量维度.类似于传统检索方法,基于残差量化的图像检索方法首先查找距离查询特征最近的w个视觉单词;然后将这w个视觉单词对应的倒排列表中所有特征都作为初始查询结果;最后,利用查询特征与所有查询结果之间的非对称距离来对查询结果进行排序,最终得到knn个最相似的查询结果.3基于自适应超球体的查询结果过滤为了只对查询结果中空间位置位于查询特征点周围的特征点排序以减少排序特征数量,提出两种基于自适应超球体的查询结果过滤方法:全面过滤和不完全过滤.为了便于下一节通过实验证明所提出的方法在不影响查询精度的前提下,可有效提高面向倒排索引的检索方法的查询速度,本节以基于残差量化的检索方法为应用实例,对查询结果的自适应过滤方法进行论述.3.1全面过滤对于查询图像特征,在检索最近的w个倒排列表后,查询结果的全面过滤就用于对这w个倒排列表中的特征点进行过滤,得到位于查询特征点周围位置的特征点并用于排序.其关键在于确定一个适当的半径,在特征空间构造一个以查询特征点为球心的超球体,过滤掉查询结果中位于超球体之外的特征点,只对超球体内部的查询结果进行排序.给定一个倒排索引结构L={l1,l2,…,lk},对应的聚类中心为C={c1,c2,…,ck}.对于查询特征q,全面过滤应用于基于残差量化的检索方法的具体查询过程如下:1.分别计算q与C中所有聚类中心的欧式距离d={d1,d2,…,dk};2.从d中取最小的前w个距离值{dq,1,dq,2,…,dq,w},并将对应倒排列表中所有特征点都作为查询结果RSq={y1,y2,…,ym};3.在特征空间中构建以q为球心的超球体,其中,超球体半径Radiusq根据q到最近的w个聚类中心的距离dq,i利用以下公式计算:其中,λ为比例系数,用于调整半径的大小,目的是获得不影响查询精度的最小半径,从而尽可能多地过滤掉不相似查询结果;Page44.利用基于残差量化的检索方法中非对称距离计算方法,计算查询特征q与RSq中特征之间的距离d(q,yi),只保留满足式(3)的查询结果,得到待排序查询结果RSqnew={y1,y2,…,yb};d(q,yi)=q-yiRadiusq(i=1,2,…,m)(3)5.根据RSqnew中特征与查询特征之间的距离值对其进行排序,返回距离值最小的knn个特征点作为最终的查询结果.其中,步3和步4为查询结果全面过滤的具体步骤,其余步骤与传统基于倒排索引的检索方法和基于残差量化的检索方法相同.全面过滤并没有改变倒排索引结构的构建方式,只是在特征查询过程中,增加了查询结果过滤的机制.因此,对于倒排索引结构L={l1,l2,…,lk},应用全面过滤时将图像特征x插入索引结构的过程类似于图1,其时间复杂度依然为O(k×dim).3.2不完全过滤全面过滤方法通过在特征空间中为查询特征构造一个超球体,将位于超球体之外的查询结果特征点过滤掉,从而减少排序的查询结果数量.然而,全面过滤需要计算查询特征与查询结果中所有特征的距离并同对应的超球体半径进行比较.为了进一步提高查询速度,不完全过滤在查询结果过滤过程中减少查询结果特征与查询特征之间的距离计算次数图2不完全过滤对应的倒排索引结构示意图对比图1、图2所示的倒排索引结构相当于将图1中每个倒排列表Li划分为k2类,形成k2个子倒排列表,并且Cci中的聚类中心cij用于标识倒排列表Lij.对于查询图像特征q,结合不完全过滤的基于残差量化的检索方法的查询过程如下.1.分别计算q到所有聚类中心C={c1,c2,…,ck1}的距离得到D1={d1,d2,…,dk1};2.从D1中查找距离最小的w个值{dq,1,dq,2,…,dq,w},其对应的聚类中心为Ccq={cq,1,cq,2,…,cq,w};3.将与这w个聚类中心对应的第2层聚类中心合并形成集合Ccq=∪w及其同超球体半径的比较次数.为此,不完全过滤通过将倒排索引结构中倒排列表划分为若干个子倒排列表并将对应的聚类中心用于过滤查询结果.该过程是在构建倒排索引时通过训练所需聚类中心来完成的.以图1所示的基于残差量化的检索方法的索引结构为例,在构建倒排索引的训练阶段,利用层次k-means方法(Hierarchicalk-means,HKM)[22]在一个特征样本集上训练两层聚类中心:C和{Cci}.其中,第1层包含k1个聚类中心C={c1,…,ci,…,ck1};ci(i=1,2,…,k1)对应的聚类被再次划分为k2类,对应的第2层聚类中心为Cci={ci1,…,cij,…,cik2}.将图像特征x插入索引结构时,首先计算x到C中各聚类中心的距离并利用式(1)找到最近的聚类中心ci;然后,计算x到ci对应的Cci中k2个聚类中心的距离,同样利用式(1)找到最近的聚类中心cij;最后将x的ID及其元数据插入到cij对应的倒排列表.因而,将x插入倒排索引结构的时间复杂度为O((k1+k2)×dim),其中dim为特征的向量维度.如图2所示,若将不完全过滤应用于基于残差量化的检索方法时,存入倒排列表的元数据为图像特征的残差量化编码.列表中特征点都作为q的初始查询结果RSqo=∪w4.同全面过滤,在特征空间中构造以q为球心的超球体Sq,对应的超球体半径Radiusq利用式(2)根据q到C中最近的w个聚类中心的距离来计算;5.过滤不相似查询结果:计算查询特征q与Ccq中所有聚类中心ccq,ij之间的欧式距离,利用式(4)过滤不相似查询结果,得到待排序查询结果集合RSq=∪wccq,ij)Rq):d(q,ccq,ij)=x-ccq,ijRadiusq(i=1,…,w,j=1,…,k2)如果ccq,ij位于超球体的内部,就认为对应倒排列表lcq,i,j中所有特征点都与q相似,反之不相似.由于每个倒排列表Page5lcq,ij相当于一个聚类,聚类里的所有特征都认为是与聚类中心ccq,ij相似的,因此可以用ccq,ij来代表lcq,ij中特征并用于不相似特征过滤;6.利用基于残差量化的检索方法中非对称距离方法,根据查询特征q与RSq中特征之间的距离进行排序,返回距离最小的knn个查询结果.相比查询结果的全面过滤,不完全过滤通过将每个倒排列表再次划分为k2个聚类并将对应的聚类中心代表对应的子类,用于非相似特征的过滤,从而大幅度降低了过滤非相似特征时距离计算次数.在都检索最近的w个聚类中心后,得到在初始的查询结果中特征数量为n的前提下,如果经全面过滤用于排序的特征点数量为n并且采用快速排序算法对其排序,那么应用全面过滤的检索方法的复杂度为Ο(n×dim+nlogn);如果经不完全过滤用于排序的特征点数量为n,同样采用快速排序对其排序,那么应用不完全过滤的检索方法的复杂度为Ο((w×k2+n)×dim+nlogn),dim为特征维度.4基于下线过滤的特征量化利用文献[21]提出的基于下限过滤的非近邻查找方法,本文以残差量化为例,将其与残差量化相结合,以提高图像特征量化和编码的效率.文献[21]提出了一种计算特征向量之间欧式距离下限的定理:d(x,y)2dim×((μx-μy)2+(σx-σy)2)=lb(x,y)其中,dim为图像特征向量的维度,μx、μy、σx和σy分别是x和y中向量分量的均值和标准差.(μx-μy)2+(σx-σy)2即为两个二维向量(μx,σx)和(μy,σy)的欧式距离平方.通过将式(5)与残差量化相结合,在一个二维空间计算待量化特征与聚类中心之间欧式距离的下限并过于过滤非近邻聚类中心和寻找距离最近聚类中心,进而提高特征量化的效率.其量化图像特征的具体过程如算法1所示.算法1.结合距离下限过滤的残差量化方法.输入:图像特征x,μx,σx;RVQ码书:{Cl}={{cli}},输出:量化结果{cnearest1.FORl=1→L2.从Cl随机选取一个聚类中心c作为种子cnearest3.计算欧式距离min_d←d(x,cnearest4.FORi=1→k5.IFlb(x,cli)min_dTHEN6.CONTINUE7.ELSE8.计算d(x,cli)29.IFd(x,cli)2min_dTHEN10.CONTINUE11.ELSE12.cnearest13.min_d←d(x,cli)214.ENDIF15.ENDIF16.ENDFOR17.x←x-cnearest18.ENDFOR19.RETURN{cnearest同残差量化,图像特征x按照从第1层到第L层的顺序进行量化,每层量化的输入为上一层量化误差.在每一层的特征量化过程中,首先从k个聚类中心中随机选择c作为初始最近邻聚类中心(种子点)并将距离d(x,cnearestmin_d(第2~3行).cnearest前最新精确最近邻聚类中心(第4~17行).当lb(x,cli)min_d时,使用距离下限可以有效过滤聚类中心cli.当x与cli之间的距离下限满足lb(x,cli)min_d时,就说明x到cli的的欧式距离d(x,cli)2一定满足d(x,cli)2min_d,因此cli肯定不是x的最近邻聚类中心而被过滤掉.反之,则需要进一步计算d(x,cli)2并与min_d进行比较.相比在原始高维特征空间上计算特征向量x与聚类中心cli之间的距离d(x,cli)2,在一个二维特征空间上计算两个2维向量之间的距离会大幅降低计算量.因此,算法1可以明显提高残差量化的量化效率,尤其当高维图像特征以及大规模图像特征,其提升效果将更为明显.相比硬匹配方法需要计算图像特征x到所有聚类中心的距离,其复杂度是线性依赖于聚类中心的数量,而算法1通过欧式距离下限过滤非近邻聚类中心,只需要计算x到部分聚类中心的距离d(x,cli)2.因此,结合距离下限过滤的残差量化方法的量化效率是非线性依赖于聚类中心数量的.5实验5.1实验数据集和实验环境本文将在公开的sift特征数据集[16]和gist数Page6据集上测试和评估全面过滤和不完全过滤的近邻搜索性能.数据集的具体信息如表1所示.数据集特征维度训练集规模数据库规模查询集规模sift128100000100000010000gist960500000100000010000所有实验都是在一台IntelCorei52.8GHzCPU,4GB内存的PC,MATLAB2011环境下完成的.5.2基于残差量化的检索性能表2给出了sift和gist数据集上基于残差量化的检索方法对于参数k∈{64,256,1024}和w值获得的最高平均查全率(Recall@R)及查询速度.其中,R为最终排序返回的查询结果数,设为100;k与w分别为索引结构中倒排列表数和查找的倒排列表数.后面的实验将在表2所示的参数设置(k,w)的基础上,对全面过滤和不完全过滤应用于基于残差量化的检索方法时得到的查询性能进行评估并将其与表2所示的实验结果比较,目的是证明所提出的基于自适应超球体的查询结果过滤方法可以为面向倒排索引的检索方法有效地降低待排序特征点数和提高查询速度.表2基于残差量化的检索在各种索引结构下的检索性能siftRecall@100查询时间/ms排序的特征点数k=64,w=80.9421.8140280k=256,w=160.9411.8k=1024,w=320.956.9k=64,w=80.6627.1163139k=256,w=160.6615.95.3评估最优的比例系数λ5.3.1全面过滤中λ根据表2提供的参数(k,w),表3和表4分别是应用了全面过滤的基于残差量化的检索方法在sift和gist数据集上对于不同比例系数λ的查询性能,其中k与w分别为索引结构中倒排列表对应的聚类中心总数和查找的聚类中心数.λ用于调整超球体的范围,目的是获得一个最优λ值,从而构造最小的超球体,在保持查询精度不变的前提下,最大程度上降低排序的特征点数量和提高查询速度.查询特征x与聚类中心ci(i=1,2,…,k)的平方距离d(x,ci)2如式(6)所示:d(x,ci)2=x-ci2=x2+ci2-2〈x,ci〉(6)其中,x2和ci2分别是特征向量x和聚类中心cigist的模的平方,〈x,ci〉为x和ci的向量内积.表3不同λ时全面过滤在sift数据集上的查询性能siftλRecall@100查询时间/ms排序的特征点数k=64,w=80.980.9415.39783犽=64,狑=81.000.9414.87852k=64,w=81.100.9213.62494k=256,w=160.980.949.35455犽=256,狑=161.000.948.74160k=256,w=161.100.898.2991k=1024,w=320.980.955.83125犽=1024,狑=321.000.955.62315k=1024,w=321.100.865.1457表4不同λ时全面过滤在gist数据集上的查询性能gistλRecall@100查询时间/ms排序的特征点数k=64,w=80.980.6618.515188犽=64,狑=81.000.6618.08868k=64,w=81.100.3516.42541k=256,w=160.980.6611.68340犽=256,狑=161.000.6610.94561k=256,w=161.100.3110.61255计算x到ci距离的最终目的是为了得到距离最近的w个聚类中心,而计算x到所有聚类中心的距离都要计算x2,因而,是否计算其模值x2并不影响找到最近的w个聚类中心,因此,为了降低计算量,利用D(x,ci)来代替x到ci的平方距离d(x,ci)2,D(x,ci)的计算方式如式(7):D(x,ci)=d(x,ci)2-x2=ci2-2〈x,ci〉(7)当在sift和gist数据集上用程序实现全面过滤方法时,发现D(x,ci)均为负数.因此,用D(x,ci)替换式(2)中dq,i时,对应的超球体半径Radiusq就变成了负数.因而,λ越大则超球体的半径越小,反之,超球体的半径就越大.Radiusq主要是作为一个阈值用于过滤查询结果中非相似特征.为了统一,q到所有查询结果之间的距离d(q,y)同样用D(x,y)来代替并利用式(7)计算.从表3和表4可以看出,对于不同规模的索引结构,当λ=1时,应用了全面过滤的基于残差量化的检索方法都能在Recall@R与原始方法相同的情况下获得最快的查询速度,因而λ的最优取值为1.此外还说明,对于全面过滤来说,超球体半径中比例系数λ的取值不依赖于k和w以及数据集类型.5.3.2不完全过滤中λ表5和表6分别给出了sift和gist数据集上应用了不完全过滤的基于残差量化的检索方法在不同参数(k1,w,k2)下对于不同比例系数λ的查询性能.其中,k1和w取值与全面过滤中k和w的取值相同,k2∈{4,16,32,48,64}.同样采用全面过滤中的Page7表5sift数据集上不完全过滤对于不同λ的查询性能siftk2λRecall@100查询k1=64,w=840.970.9410.870486犽1=64,狑=840.980.9410.465474k1=64,w=840.990.939.660492k1=64,w=8160.970.948.148826犽1=64,狑=8160.980.947.644903k1=64,w=8160.990.937.041119k1=64,w=8320.970.847.744471犽1=64,狑=8320.980.947.140901k1=64,w=8320.990.936.437474k1=64,w=8480.970.947.443681犽1=64,狑=8480.980.946.940239k1=64,w=8480.990.936.536952k1=64,w=8640.970.946.435155犽1=64,狑=8640.980.945.832073k1=64,w=8640.990.935.329116k1=256,w=1640.940.947.141651犽1=256,狑=1640.950.946.638490k1=256,w=1640.960.936.035240k1=256,w=16160.940.945.731942犽1=256,狑=16160.950.945.329282k1=256,w=16160.960.935.026651k1=256,w=16320.940.945.227653犽1=256,狑=16320.950.944.925248k1=256,w=16320.960.934.522863k1=256,w=16480.940.945.125846犽1=256,狑=16480.950.944.923542k1=256,w=16480.960.934.621291k1=256,w=16640.940.945.123783犽1=256,狑=16640.950.944.921616k1=256,w=16640.960.934.619522k1=1024,w=3240.950.954.521420犽1=1024,狑=3240.960.954.219431k1=1024,w=3240.970.944.017400k1=1024,w=32160.950.954.016041犽1=1024,狑=32160.960.953.914420k1=1024,w=32160.970.943.712831k1=1024,w=32320.930.954.516182犽1=1024,狑=32320.940.954.214744k1=1024,w=32320.950.944.013304k1=1024,w=32480.920.954.815612犽1=1024,狑=32480.930.954.414301k1=1024,w=32480.940.944.212980k1=1024,w=32640.900.955.216526犽1=1024,狑=32640.910.955.015305k1=1024,w=32640.920.944.914072方式计算距离和超球体半径,因而,λ越大则超球体半径越小,反之半径越大.从表5和表6可以看出,对于每组参数(k1,w,k2),λ的不同取值虽然能够影响被过滤掉的非相似查询结果数以及Recall@R(R取值100)和查询时间.但是最终都会得到一个最优λ值,使得Recall@R与原始方法一致并且查询时间最少.即当λ大于最优值时,其Recall@R就会下降,反之,Recall@R始终会保持不变,而查询时间会由于过滤掉的非相似特征的减少而相应地增加.后面的实验中将采用最优λ值得到的实验数据.表6gist数据集上不完全过滤对于不同λ的查询性能gistk2λRecall@100查询k1=64,w=840.980.6616.296680犽1=64,狑=840.990.6614.379298k1=64,w=841.000.6511.461735k1=64,w=8160.980.6613.477326犽1=64,狑=8160.990.6612.162499k1=64,w=81610.659.548422k1=64,w=8320.980.6613.470189犽1=64,狑=8320.990.6611.156444k1=64,w=8321.000.659.243562k1=64,w=8480.980.6612.866913犽1=64,狑=8480.990.6610.753412k1=64,w=8481.000.659.141340k1=64,w=8640.980.6613.364618犽1=64,狑=8640.990.6610.851678k1=64,w=86410.659.339820k1=256,w=1640.970.6713.062376犽1=256,狑=1640.980.6710.253918k1=256,w=1640.990.668.743251k1=256,w=16160.980.679.444133犽1=256,狑=16160.990.678.534805k1=256,w=16161.000.666.725745k1=256,w=16320.980.679.540637犽1=256,狑=16320.990.678.331725k1=256,w=16321.000.667.123461k1=256,w=16480.990.678.729883犽1=256,狑=16481.000.677.721956k1=256,w=16481.100.224.32781k1=256,w=16640.980.6610.437334犽1=256,狑=16640.990.669.228760k1=256,w=16641.000.658.4209525.4不完全过滤对于不同犽2值的查询性能在(k1,w)∈{(64,8),(256,16),(1024,32)}和最优λ值的情况下,不完全过滤在sift数据集上对于k2的不同取值时用于排序的特征点数如图3所示,图4是与图3相对应的查询时间.从图3可以看出,当k1=64,w=8和k1=256,w=16时,需要排序的查询结果数随着k2的增大而不断减少.然而,当k1=1024,w=32时,这种现象并没有出现,而是趋近于水平.其原因在于随着k1和k2的不断增大,数据库中位于查询特征点对应超球体内部的特征点数趋于平衡.综合图3和图4,当k1=256,w=16和k1=1024,w=32时,查询时间并没有随着排序特征点数的减少而相应地减少.这是因为随着k2和w的不断增大,不完全过滤用于计算查询特征到第2层聚类中心的欧式距离的次数以及判断聚类中心是否位于超球体内部所花费的时间也在相应的增加,从而影响总体的查询时间.因此,可以根据实验结果选择不同规模倒排索引结构下适用于不完全过滤的最优k2值.图5和图6分别是gist数据集上与图3和图4对应的实验结果并且可以从中得出相同的结论.Page8图3sift数据集上不同k2值对应的查询时间图4sift数据集上不同k2值对应的排序特征点数图5gist数据集上不同k2值对应的排序特征点数5.5不同检索方法的查询时间对比简单起见,下面用RVQ表示基于残差量化的检索,EF-RVQ表示应用了全面过滤的基于残差量化的检索,NEF-RVQ表示应用了不完全过滤的基于残差量化的检索.表7和表8分别给出了这3种检索方法在不同数据集和不同规模倒排索引结构下图6gist数据集上不同k2值对应的查询时间的查询性能对比.从表7和表8可以看出,在相同规模的索引结构和获得相同Recall@100的情况下,EF-RVQ的特征查询时间明显少于RVQ,而NEF-RVQ又比EF-RVQ进一步减少了查询时间.此外,EF-RVQ和NEF-RVQ较RVQ都很大程度上减少了排序的查询结果数.表7sift数据集上RVQ、EF-RVQ和NEF-RVQ的检索性能对比RVQk=64,w=8EF-RVQk=64,w=8,λ=10.9414.87852NEF-RVQk1=64,w=8,RVQk=256,w=160.9411.866612EF-RVQk=256,w=16,λ=10.948.74160NEF-RVQk1=256,w=16,RVQk=1024,w=320.956.934509EF-RVQk=1024,w=32,λ=10.955.62315NEF-RVQk1=1024,w=32,表8gist数据集上RVQ、EF-RVQ和NEF-RVQ的检索性能对比RVQk=64,w=8EF-RVQk=64,w=8,λ=10.6618.08868NEF-RVQk1=64,w=8,RVQk=256,w=160.6615.984818EF-RVQk=256,w=16,λ=10.6610.94561NEF-RVQk1=256,w=16,虽然EF-RVQ排序的查询结果数少于NEF-RVQ,但是NEF-RVQ的查询效率要优于EF-RVQ.其原因在于,EF-RVQ计算所有查询结果(RVQ的排序特征点数)到查询特征的距离并与超球体的半Page9径进行比较,而NEF-RVQ通过将原始索引列表中特征点划分为k2个聚类并用对应的聚类中心过滤非相似查询结果,从而大幅减少过滤查询结果所花费的时间,进而较EF-RVQ进一步提高了查询效率.5.6特征量化效率对比简单起见,用RVQ表示采用传统硬匹配的残差量化方法,用filtration-RVQ表示结合了基于下限过滤的非近邻过滤的残差量化方法.实验中,残差量化的的码书层数L设置为8,每层码书的聚类中心数设为k∈{16,64,256}.图7和图8分别给出了RVQ和filtration-RVQ在sift和gist数据集上量化特征向量的时间对比.从图中可以看出,虽然当k=16和sift数据集上k=64时,filtration-RVQ的特征量化时间要稍微高于RVQ,但随着k的增大以及特征维度的增加,filtration-RVQ显示出要比RVQ具有更好的时间效率,其表现在量化特征所花费的时间更少并且增长幅度更为平缓.因此,可以得出结论:利用欧式距离下限来过滤非近邻聚类中心,RVQ的特征量化效率可以得到有效提升,尤其是当k比较大以及高维特征时.6总结与讨论本文提出了两种面向倒排索引的基于自适应超球体的查询结果过滤方法:全面过滤和不完全过滤,并以基于残差量化的检索方法为应用实例来验证所提出方法的有效性.相比基于残差量化的检索方法以及传统检索方法将全部查询结果用于排序,全面过滤为查询特征自适应地计算半径并构造以其为球心的超球体,只对位于超球体内部的查询结果进行排序,从而提高了查询速度.不完全过滤通过将倒排列表划分为若干个子聚类并用这些子聚类的聚类中心过滤非相似查询结果,从而降低了查询结果过滤的时间开销,进一步提高了查询效率.面向倒排索引的检索方法在索引结构上总体是相似的,如基于残差量化的检索方法和基于积量化的检索方法.它们的倒排索引结构是类似的,不同的是计算查询特征与数据库特征之间距离的计算方式.因而,类似于本文将全面过滤和不完全过滤方法应用于基于残差量化的检索方法的具体过程,这两种查询结果的自适应过滤方法同样可以用类似的方式应用于其他面向倒排索引的检索方法以提高查询效率,如:基于积量化的图像特征检索方法等.在下一步工作中,我们将在更大的数据集上对提出的两种查询结果过滤方法的有效性进行验证.此外,由于不完全过滤将原始倒排列表划分为若干个子类,从而增加了倒排索引结构的存储需求,因此,未来将在保持查询精度不变的前提下,对平衡查询速度和存储需求作进一步研究.此外,对于完全过滤,由于查询特征到所有倒排列表对应的聚类中心的距离计算是相互独立的,不存在相互依赖关系,因此这个过程可以对其进行并行处理,从而进一步提高查询速度;同样的,在过滤非相似特征时,需要计算查询特征与所有查询结果之间的距离,这个过程也可以通过并行处理进行优化.对于不完全过滤,类似于完全过滤,查询特征到第一层索引对应的聚类中心的距离、到第二层用于过滤非相似特征的聚类中心的距离以及到用于排序的查询结果的距离的计算过程同样可以在并行计算环境下进行并行处理,以进一步提高查询速度.这将是下一步的重要研究内容.Page10
