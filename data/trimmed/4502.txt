Page1基于线性Bregman迭代的结构化噪声矩阵补全算法陈正宇1)1)(南京邮电大学计算机学院南京210003)2)(南京邮电大学宽带无线通信与传感网技术教育部重点实验室南京210003)3)(南京航空航天大学计算机学院南京210016)摘要通过采样部分元素补全低秩矩阵的缺失元素是许多实际应用如图像修复、无线传感网数据收集和推荐系统等经常遇到的一个颇具挑战性的难题.在机器学习领域,这类问题通常能刻画成矩阵补全问题.虽然现有研究针对矩阵补全问题已提出了许多有效算法,但这些算法通常仅限于采样元素要么无噪要么仅含少量随机高斯噪声的补全情形,难以处理实际问题中常见的行结构化噪声.为了解决这个问题,该文首先借助分类器设计中流行的L2,1范数正则化技术来平滑此类噪声,并将该问题建模为一类基于L2,1范数正则化的凸约束优化问题.其次,为了快速有效地求解,我们将向量空间的线性Bregman迭代算法和近邻算子技术拓展到矩阵空间,进一步设计了一种鲁棒的基于线性Bregman迭代的结构化噪声矩阵补全算法(LiBIMC).严格的理论分析证明了LiBIMC迭代算法的不动点正是结构化噪声矩阵补全问题的全局最优解.数值实验结果表明,和已有的矩阵补全算法相比,LiBIMC算法不仅能更好地恢复结构化噪声矩阵的缺失元素,还能精确地辨识出采样矩阵中被污染的元素所在行的位置信息.关键词矩阵补全;结构化噪声;L2,1范数正则化;线性Bregman迭代;近邻算子1引言近年来,压缩感知理论为信号采集技术带来了革命性的突破.众所周知,压缩感知理论要求在已知信号具有稀疏性的条件下对信号进行采集和重构,而在很多实际问题中,需要重构的目标常常是以矩阵的形式组织的.因此,压缩感知理论便自然地从向量空间被拓展至矩阵空间,从而利用矩阵奇异值向量的稀疏性,通过采样矩阵的部分元素来恢复低秩矩阵.在机器学习领域,这类问题通常被刻画为矩阵补全(MatrixCompletion)问题.迄今为止,矩阵补全理论已在图像修复[1]、三维运动估计[2]、无线传感网数据收集[3]、多标记分类[4]、视频去噪[5]和推荐系统[6]等领域得到了重要应用,也逐渐成为机器学习、模式识别以及计算机视觉领域的主要研究热点之一.现有研究针对矩阵补全问题已提出了许多有效算法.这些算法大致可分为两类:一类是基于核范数最小化的迭代算法,如SVT算法(SingularValueThresholding)[7]、FPCA算法(FixedPointContin-uationwithApproximateSVD)[8]、IALM算法(InexactAugmentedLagrangeMultipliers)[9]、ADM算法(AlternatingDirectionMethod)[10]、OptSpace算法[11]和MC_TNNR算法(MatrixCompletionviaTruncatedNuclearNormRegularization)[12]等;另一类是基于矩阵分解的优化算法,包括LMaFit算法(Low-rankMatrixFitting)[13]和RTRMC算法(Riemanniantrust-regionforMC)[14]等.这些矩阵补全算法在采样矩阵无噪或者仅含少量高斯随机噪声的情况下表现良好,但是当采样矩阵中的某些行受到损坏时,这些算法往往表现得不够稳定.本文将采样矩阵中受到损坏的行称为结构化噪声,并将这种矩阵补全情形称为结构化噪声矩阵补全.结构化噪声矩阵补全的一个典型应用场景是推荐系统.当前,随着互联网技术的日趋完善,网上购物等在线消费模式逐渐成为一种潮流,越来越多的人喜欢在网上购买自己需要的商品.对于商家而言,如何根据消费者反馈的不完全信息准确地预测他们的偏好从而给出合理的购物推荐成为了一个至关重要的问题.理想的情况是由消费者反馈的评分信息都是真实的,也就是说采样数据不含噪声.但是,实际上由于评分反馈过程缺乏有效的监督和约束机制,少部分消费者有时可能不愿意反馈他们的真实感受,从而随意给出他们的评分;更有甚至,个别不诚实的商家可能出于不当牟利的目的伪装或者串通消费者恶意地贬低竞争对手的产品评分同时拔高自己产品的评分.这样一来,如果我们将消费者作为行信息,产品作为列信息,就导致采样到的评分矩阵的某些行数据不真实,我们将其视为采样矩阵受到行结构化噪声污染.因此,在这种结构化噪声采样情形下如何补全评分矩阵的缺失元素,并识别那些噪声污染行元素的位置信息就显得尤为重要.为了求解此类结构化噪声矩阵补全问题,本文引入了分类器设计中流行的L2,1范数正则化惩罚因子来平滑结构化噪声,将该问题建模为一类基于L2,1范数正则化的凸约束优化问题.为了进一步有效地求解该凸约束优化问题,本文将向量空间线性Bregman迭代算法推广到矩阵空间,采用矩阵空间近邻算子技术和线性Bregman迭代算法设计了一种鲁棒的基于线性Bregman迭代的结构化噪声矩阵补全算法(LinearizedBregmanIterationAlgorithmforMatrixCompletionwithStructuralNoise,Page3LiBIMC).LiBIMC算法在求解的整个迭代过程都较好地保持了矩阵变量的低秩性和稀疏性,因而使得该算法具有较高的执行效率和良好的可扩放性,从而能适用于较大规模的矩阵补全问题.同时,严格的理论分析也证明了LiBIMC算法的不动点正是此类结构化噪声矩阵补全问题的全局最优解.数值实验结果表明,和IALM、SVT和FPCA算法相比,LiBIMC算法不仅在没有移除噪声行的情况下获得了相对更好的补全精度,更为重要的是,LiBIMC算法能准确辨识出采样矩阵中被结构化噪声污染的行位置信息,从而在补全不含噪部分缺失元素时可以事先移除采样矩阵的噪声行,大大提高未受噪声污染行元素的补全精度.从这个意义上来说,在进行结构化噪声矩阵补全时,LiBIMC算法可以作为现有矩阵补全算法的预处理步骤.本文第2节对相关工作进行讨论;第3节介绍一些数学预备知识;第4节介绍向量空间线性Bregman迭代算法;第5节为本文主要部分,该部分针对结构化噪声矩阵补全问题提出了一类鲁棒的基于线性Bregman迭代的结构化噪声矩阵补全算法(LiBIMC),并从理论上证明LiBIMC算法的不动点即为结构化噪声矩阵补全问题的全局最优解;第6节介绍一些数值实验并对实验结果进行分析;第7节对所研究的内容进行总结并展望未来的研究方向.2相关工作标准的矩阵补全问题最初被描述为犡∈犚其中Ω[n1]×[n2]([n1]={1,…,n1},n2={1,…,n2})为采样元素的索引集合,PΩ(·)为正交投影算子,表示当(i,j)∈Ω时,Rij为采样元素,即在式(1)中,由于rank(·)函数的非凸性和不连续性,导致该问题求解成为NP难问题,在所有已知的求解算法中,其求解的复杂度均随着矩阵维数的增长呈平方倍指数关系增长.类似于压缩感知理论中常用的将向量L0范数松弛到L1范数的技巧,考虑到矩阵的秩实际上等同于该矩阵奇异值向量的L0范数,而矩阵的核范数则等同于奇异值向量的L1范数.因此,为了使矩阵补全问题易于求解,一个自然的想法就是利用凸的核范数代替非凸的秩函数,将问题(1)松弛为凸优化问题.为此,Fazel在文献[15]中严格证明了矩阵核范数是秩函数在矩阵谱范数意义下单位球上的最佳凸逼近.随后,Recht和Fazel等人还在文献[16]中进一步证明了矩阵秩函数可以被其凸包核范数所取代,继而可以将问题(1)松弛为凸优化问题(2):目前对于问题(2)的求解算法大多是从向量空间压缩感知理论直接推广过来的矩阵核范数最小化方法,如Cai等人[7]提出的SVT算法,这也是和本文所提LiBIMC算法最相关的算法.SVT算法和LiBIMC算法的基本思想都是基于线性Bregman算法求解.SVT算法的实质是将求解压缩感知基追踪优化问题的向量空间线性Bregman迭代算法[17]直接推广到矩阵空间,然后再将矩阵空间线性Bregman迭代与近邻前向后向分裂(ProximalForwardBackwardSplitting,PFBS)算法[18]相结合,算法简单易行,特别适合大规模问题求解,但是该算法对采样矩阵的容错性不是很好.类似于SVT算法,本文也采用了从向量空间推广而来的线性Bregman迭代算法,但SVT算法是基于一元矩阵函数Bregman距离的直接推广,而LiBIMC算法是基于二元矩阵函数Bregman距离的间接推广,其二元矩阵函数的产生是由于噪声矩阵的引入而导致的.因此,LiBIMC算法和SVT算法的最大区别:一方面在于求解的问题不同;另一方面在于求解过程中所用的矩阵空间线性Bregman迭代算法也不同,LiBIMC算法用到的是矩阵空间交替线性分裂Bregman迭代算法.Ma等人[8]提出的FPCA算法是求解问题(2)的另一种矩阵核范数最小化方法.FPCA算法基于不动点思想,直接采用算子分裂技术构造迭代算法求解矩阵LASSO模型:min犡∈犚该算法是受文献[19]中压缩感知的不动点迭代算法启发得到的.然而矩阵LASSO对于相关性非常强的数据通常会出现不稳定的情况.Lin等人则将矩阵补全问题视为矩阵恢复(或RobustPCA)问题的特例,即将矩阵补全问题建模为min犡∈犚进而将求解矩阵恢复问题的IALM算法[9]推广到求解问题(4),IALM算法本质上和Chen等人[10]提Page4出的ADM算法是一致的,因而两者具有相近的算法性能.文献[9-10]的研究结果均表明,在获得相近的补全精度的前提下,IALM算法和ADM算法的收敛速度明显优于SVT算法和FPCA算法.OptSpace算法[11]是一种有别于前四者的算法,它求解问题(1)的下述近似模型:min1×nn2犡∈犚将低秩的要求作为约束条件,目标函数则为矩阵补全的误差,即在低秩性约束下,使得补全得到的矩阵元素尽可能地接近真实值,OptSpace本质上是一种梯度下降算法,它面临的问题在于,矩阵的秩本来就是未知的,而在问题求解时却要求预先得到矩阵的秩信息,好在文献[20]中给出了估计矩阵秩的方法.最近,Hu等人[12]认为现有的这些核范数最小化方法有一个共同的缺陷在于,它们都是通过同时最小化所有奇异值之和而获得结果矩阵的低秩性,这将导致所求解的结果矩阵虽然低秩但不能很好地逼近真实解.由于矩阵是否低秩主要取决于最小的那些奇异值之和,如果能通过迭代优化使得结果矩阵最小的那些奇异值之和趋近于零,那么即使那些大奇异值之和足够大也不会影响结果矩阵的低秩性.因此,他们将最小的那些奇异值之和定义为截断核范数犡r,并采用截断核范数来代替标准核范数犡,从而将矩阵补全问题建模为如下优化问题:同时针对该优化问题提出了3种不同的求解策略,我们将其统称为MC_TNNR算法.文献[12]的实验结果表明,MC_TNNR算法很好地解决了所求解的结果矩阵不能精确地逼近目标矩阵真实解的问题,矩阵补全精度得到了很大程度的提高.但该算法的不足之处在于问题求解过程中要求预先估计矩阵的秩信息.求解矩阵补全问题的另一类算法是基于矩阵分解的方法,该类方法的最大优点在于求解过程不需要执行奇异值分解,从而加速了算法的执行效率.典型的算法包括Wen等人[13]提出的LMaFit(Low-rankMatrixFitting)算法,该算法主要求解问题(1)的如下近似模型:min犝,犠,犣其中犝∈犚秩界,如果能预先获取合适的k值,LMaFit算法就能在较小的时间复杂度内获得相当精度的解.但是LMaFit算法除了需要预先估计秩界以外,还存在一个不足的地方是所求出的(犝,犠)解不唯一.为了克服这个不足,Boumal等人在文献[14]中提出了一种改进的基于Grassmann流形的RTRMC算法.文献[14]的数值实验表明,RTRMC算法对于行列不相等的长方形矩阵补全问题尤其有效,其补全性能超过了大多数现有的矩阵补全算法.3数学预备知识定义1.矩阵范数[21].假设秩为r的矩阵犡∈n1×n2的奇异值被分解为犡=犝Σ犞T,其中犝=犚[u1,u2,…,ur]∈犚犝T犝=犐,犞T犞=犐;Σ=diag({σi1ir})且σ1σ2…σr>0,则:矩阵犡的核范数定义为矩阵犡的Frobenius范数定义为矩阵犡的L2,1范数定义为定义2.次梯度与次微分[21].令Ψ(犡)是犚上的实值凸函数,如果犣∈犚Ψ(犡)Ψ(犡0)+〈犣,犡-犡0〉,犡∈犚则称犣为矩阵函数Ψ(犡)在犡0处的次梯度,所有在犡0处的次梯度的集合记为Ψ(犡0),同时称Ψ(犡0)为Ψ(犡)在犡0处的次微分.定义3.奇异值阈值算子[7].假设秩为r的矩阵犡∈犚则τ对应的奇异值阈值算子定义为其中犛τ(Σ)=diag({max(0,σi-τ)}).定义4.矩阵函数Bregman距离[22].凸函数J(犡):犚离定义为kD犘J(犡,犡k)=J(犡)-J(犡k)-〈犘k,犡-犡k〉,其中矩阵犘k∈犚梯度,〈·,·〉为矩阵内积运算.定义5.矩阵空间近邻算子[18].令Ψ(犡)是犚n1×n2上的实值凸函数,对任意犞∈犚Page5近邻算子定义为proxΨ(犡)(犞)=argmin定理1[7].对任意的τ>0,犡,犣∈犚proxτ犡定理2[18].假设F1,F2是矩阵空间犚个下半连续的凸函数,F2可微且对某个β∈(0,+)满足F2(犝)-F2(犞)Fβ犝-犞F,则对于凸优化问题:有如下性质:(1)如果lim题(8)至少存在一个解;(2)如果F1+F2是严格凸的,则问题(8)至多存在一个解;(3)如果F1,F2满足条件(1)和(2),则问题(8)存在唯一解,且对任意的初始值犡0及0<δ<2/β,用如下方法生成的迭代序列犡k+1收敛到问题(8)的唯一解:犡k+1=proxδF1其中,性质(3)所描述的求解算法称之为近邻前向后向分裂算法(ProximalForwardBackwardSplitting,PFBS).定理3[23-24].对任意的τ>0,犡,犡,犠∈犚如果令(犡)(i)则proxτ犡2,1i行,犠(i)4向量空间线性Bregman迭代算法Bregman迭代起源于凸分析中一种寻求等式约束下目标函数极值的优化方法[22].Osher等人[25]于2005年首先将该方法应用于全变分图像复原,随之被拓展应用到压缩感知[26]、图像去噪[17]等领域.该方法已成为求解L1范数优化问题的最有效方法之一.假设J(狌)和H(狌)为Rn上的两个凸函数,其中函数H(狌)可微,J(狌)不可微,考虑一般无约束优化问题:根据文献[22]的策略,可以对不可微函数J(狌)引入向量空间Bregman距离,通过如下方式迭代求解问题(9):将D入式(10)后得狌k+1=argmin烄烅0∈J(狌k+1)-狆k+μH(狌k+1烆但是,由于J(狌)不可微,迭代序列(11)仍然无法直接求解.于是文献[26]针对迭代序列(11)引入向量空间PFBS算法,并设置PFBS算法的迭代次数为1,从而提出了一种有效的向量空间线性Bregman迭代算法.具体说来,对于子优化问题:狌k+1=argmin如果令F1(狌)=J(狌)-〈狆k,狌〉,F2(狌)=μH(狌),则根据文献[26],可以按下式求解狌k+1:因此,迭代序列(11)可转化为烄狌k+1=argmin烅0∈δF1(狌)+烆由于狆k+1∈J(狌k+1),式(14)可进一步化简为烄烅烆算法1详细描述了求解问题(9)的向量空间线性Bregman迭代算法实现步骤.随后,Cai等人在文献[17]中从理论上严格证明了该算法的收敛性,并将其成功应用于图像去噪研究.算法1.向量空间线性Bregman迭代算法.输入:δ>0,狌0=狆0=0,最大迭代次数N输出:狌optimal1.FORk=0toN2.狌k+1=argmin3.狆k+1=狆k-4.END5.RETURN狌optimal←狌N+1.Page6本文将在第5节将向量空间线性Bregman迭代算法拓展到矩阵空间,用来解决矩阵空间二元函数凸优化问题,并在此基础上提出一类鲁棒的基于线性Bregman迭代的结构化噪声矩阵补全算法.5基于线性Bregman迭代的结构化噪声矩阵补全算法(LiBIMC)正则化技术诞生于20世纪60年代,最初是由数学领域提出,用于解决不适定问题,基本思想是通过引入含有问题先验知识的非负辅助泛函正则化因子来增加解的稳定性[27].随着20世纪80年代机器学习的兴起,正则化技术被广泛应用于分类器设计领域,并衍生出许多著名的算法[28].这些算法大部分都能归纳为经验风险最小化正则化算法的框架,他们的不同之处在于所用的正则化惩罚因子,不同的正则化因子能产生不同性质的解,而如何选取正则化因子通常由问题的具体要求决定,如压缩感知理论为了得到稀疏解而采用向量L0范数正则化因子.矩阵L2,1范数正则化方法最早由Ding在文献[29]中提出,随后被应用于多任务学习[30-31]、张量分解[32]以及多类分类问题[33]等,作为一种全新的正则化技术,它是对传统的矩阵范数正则化理论的新发展.如前所述,现有的矩阵补全理论或者没有考虑采样矩阵的含噪问题,或者只是简单地假设采样矩阵受到随机高斯噪声污染,并不能解决实际问题中遇到的行结构化噪声污染的问题.为了有效地平滑这类结构化噪声,将其带来的不利影响尽可能降到最低,本文通过引入矩阵L2,1范数正则化因子到矩阵补全问题(2),对其目标函数施加相应的正则化约束,从而将结构化噪声矩阵补全问题建模为如下L2,1范数正则化问题:minn1×n犡,犣∈犚其中犣为行稀疏噪声矩阵,犣2,1为平滑噪声的矩阵L2,1范数正则化因子,λ是被用来平衡结构化噪声和矩阵低秩程度的可调参数.由于矩阵范数同时满足齐次性和三角不等式,因此易知L2,1范数正则化问题(15)为凸约束优化问题且存在全局最优解.但由于核范数和L2,1范数都是不可微函数,因此该问题的求解仍然是一个待解决的难题.为了有效地求解问题(15),本文将其转换为如下无约束优化问题:minn1×n犡,犣∈犚为描述方便,不妨令则问题(16)等价于容易看到,问题(17)和问题(9)非常相似,最大的区别在于问题(9)求解的是向量空间一元凸函数优化,而问题(17)求解的是矩阵空间二元凸函数优化.为此,我们引入矩阵空间二元凸函数Bregman距离来求解问题(17).首先定义函数J(犡,犣)在(犡k,犣k)处的Bregman距离为k犘DJ(犡,犣,犡k,犣k)=J(犡,犣)-J(犡k,犣k)-〈μ犘其中犘k因此,问题(17)可按如下方式迭代求解(犡k+1,犣k+1)=argmin烄H(犡,犣)烅0∈(D0∈(D犘烆进一步将Goldstein和Osher在文献[34]中提出的向量空间分裂Bregman迭代算法推广到矩阵空间,同时引入交替极小化方法求解(犡k+1,犣k+1),则问题(17)可进一步采用如算法2所述的矩阵空间交替线性分裂Bregman迭代第1算法求解.算法2.矩阵空间交替线性分裂Bregman迭代第1算法.输入:犣0=0,犘0输出:犡optimal,犣optimal1.FORk=0toN2.犡k+1=argmin3.犣k+1=argmin4.犘k+1Page75.犘k+16.END7.RETURN犡optimal←犡N+1,犣optimal←犣N+1.进一步,我们还可以将算法2转换为如下的算法3———矩阵空间交替线性分裂Bregman迭代第2算法,定理4将给出算法2和算法3的等价性证明.算法3.矩阵空间交替线性分裂Bregman迭代第2算法.输入:犣0=0,犅0=PΩ(犚),最大迭代次数N输出:犡optimal,犣optimal1.FORk=0toN2.犡k+1=argmin3.犣k+1=argmin4.犅k+1=犅k+PΩ(犚-犡k+1-犣k+1);5.END6.RETURN犡optimal←犡N+1,犣optimal←犣N+1.定理4.矩阵空间交替线性分裂Bregman迭代第1算法等价于矩阵空间交替线性分裂Bregman迭代第2算法,即算法2和算法3等价.证明.详见附录.定理5.算法3的不动点是问题(15)的全局最优解.证明.详见附录.定理6.问题(15)的全局最优解是算法3的不动点.证明.详见附录.定理4~定理6表明,算法2或者算法3的不动点,一定是结构化噪声矩阵补全问题(15)的解.因此,接下来我们将推导出求解算法2不动点的具体步骤,算法3的具体求解步骤也可类似给出,本文不再赘述.不难看出,就算法2而言,由于函数犡和犣2,1的不可微性,使得步2和步3中求解犡k+1和犣k+1的两个子问题无法直接求解,此时可将向量空间线性Bregman迭代算法推广到矩阵空间,并根据定理1和定理3分别对这两个子问题求解.子问题1.求解算法2中变量犡k+1.解:根据定理2性质(3),并将PFBS算法的迭代次数置为1,可知犡k+1=proxμδ犡化简后得犡k+1=argmin且此时应有犘k+1犡=犘k由于P0犘k+1犡=-进一步,如果令则显然有然后,将式(21)代入式(20)可得将式(22)、式(23)代入式(19)得犡k+1=argmin进一步,根据定理1可得式(24)的解析解为因此,子问题1可按如下方式迭代求解子问题2.求解算法2中变量犣k+1.解:类似于子问题1的求解过程,容易推导出如下结论:犣k+1=argmin犘k+1犣=-进一步,如果令则显然有然后,将式(27)代入式(26)可得将式(28)、式(29)代入式(25)后得犣k+1=argminPage8进一步,根据定理3可得式(30)的解析解为(犣k+1)(i)因此,子问题2可按如下方式迭代求解犝k=犝k-1+δPΩ(犚-犡k+1-犣k)烄(犣k+1)(i)烅烆至此,我们可以将前述算法归纳起来,整理得到求解问题(15)的迭代算法,并将其命名为基于线性Bregman迭代的结构化噪声矩阵补全算法(LinearizedBregmanIterationAlgorithmforMatrixCompletionwithStructuralNoise,LiBIMC),详细步骤如算法4所述.算法4.基于线性Bregman迭代的结构化噪声矩阵补全算法(LiBIMC).输入:PΩ(犚),λ,μ和δ,最大迭代次数N输出:犡optimal,犣optimal1.INITIALIZE犡0=0,犣0=0,犞-1=0,犝-1=0;2.FORk=0toN2.犞k=犞k-1+δPΩ(犚-犡k-犣k);3.犡k+1=Dμδ(犞k);4.犝k=犝k-1+δPΩ(犚-犡k+1-犣k);5.FORi=1ton16.(犣k+1)(i)=7.END8.END9.RETURN犡optimal←犡N+1,犣optimal←犣N+1.从算法4容易看出,LiBIMC算法在迭代过程中一方面可使得犡k+1保持较好的低秩性,另一方面可使犣k+1保持良好的行稀疏特性,同时还能够维持(犞k,犝k)的稀疏性以节省存储空间,而且每一次迭代过程只涉及到一次稀疏矩阵部分奇异值分解,而对于大型稀疏矩阵的部分奇异值分解可以使用成熟的PROPACK软件包,它基于Lanczos方法,可以计算奇异值分解中前k个奇异值和奇异向量.这些特性确保了LiBIMC算法的可扩放性和执行的高效率.6数值实验及结果分析本节主要通过数值实验来验证LiBIMC算法的性能.实验中用到的采样数据按照如下方式产生:(1)首先针对不同的矩阵维度n1,n2和秩r,随机生成两个n1×r和r×n2的独立同分布高斯矩阵犕L和犕R(均值为0,方差为1),进而得到秩为r的原始数据矩阵犕=犕L·犕R;(2)随机生成一个n1×n2的独立同分布高斯随机矩阵犈(均值为0,方差为1),然后从犈中随机选取n1-m行元素将其全部设置为0,则矩阵犈仅包含m行非零元素,我们将如此生成的仅包含m行非零元素的矩阵犈记为噪声矩阵犈noise,同时记结构化噪声污染程度为pn=m/n1;(3)将噪声矩阵犈noise添加到原始数据矩阵犕,生成含噪矩阵犕,使得犕=犕+犈noise;(4)从含噪矩阵犕中均匀随机选取采样元素,采样元素的下标索引集合用Ω表示,并记采样率为ps=Ω/(n1×n2),其中Ω表示集合Ω的基数.实验中我们采用如下指标来衡量含噪矩阵犕中噪声所在行元素的含噪率:rnoiseoriginal=PΩ其中Ωn表示含噪元素索引集;同时,我们还选取了3个常用指标来衡量LiBIMC算法的性能:(1)缺失元素补全精度:rmiss其中珨犕表示采用LiBIMC算法补全后的结果矩阵,Ωc表示缺失元素索引集;(2)含噪元素纠错精度:rnoise(3)结构化噪声行位置信息辨识精度:这里定义的rline标F1-Measure,其中:precesion=m_all表示被LiBIMC算法识别为噪声行的总行数,其中噪声行识别的依据是:如果LiBIMC算法输出的噪声矩阵犣optimal中某行至少存在一个非零元素,则该行被识别为噪声行;反之,如果噪声矩阵犣optimal中某行全为零元素,则该行不被识别为噪声行.进一步,不妨假设第i行已经被LiBIMC算法识别为噪声行,如果采样矩阵中第i行确实受到了噪声污染,则称该噪声行被LiBIMC算法正确识别,m_true表示被LiBIMC算法正确识别的噪声行总数.实验设计中,考虑到数据生成、加噪和采样过程的随机性,每一次实验均重复进行20次.LiBIMCPage9算法的收敛条件设置为最大迭代次数150.本文所有的实验都是在IntelCorei7-3520M2.90GHzCPU,4.00GBRAM的环境下,使用工具软件MATLAB完成的.而且,在LiBIMC算法的具体实现中,我们采用了PROPACK软件包来实现部分奇异值分解.考察算法4,易见影响LiBIMC算法性能的参数共有8个,它们分别是(n1,n2,r,ps,pn)和(λ,μ,η).前5个参数(n1,n2,r,ps,pn)不是可调参数,在数据采样时就确定好了.后3个参数(λ,μ,η)是可调参数,目前我们还没有展开对可调参数如何自适应选取的研究,只能根据所需要处理问题的先验知识对可调参数进行估计.但尽管如此,我们还是可以对这3个可调参数的取值做一些非形式化的分析:(1)参数λ在LiBIMC算法中被用来平衡结构化噪声大小和矩阵低秩程度.一般而言,我们设定λ∈0,()1.λ实际大小取决于目标矩阵的低秩程度和结构化噪声大小的比值.从式(15)容易看出,λ取值越大,将导致所求的结果矩阵秩越大,此时采样矩阵所能容忍的结构化噪声将越小;反之,如果目标矩阵的秩越小,则采样矩阵所能容忍的结构化噪声将越大,此时应该将λ设置为较小值;如果目标矩阵的秩和结构化噪声都较大,或者目标矩阵的秩和结构化噪声都较小,此时可通过交叉验证的方法设置λ值.(2)参数μ在LiBIMC算法中被用来平衡(犡+λ犣2,1)项和1小,其中1除结构化噪声外的其他随机噪声.一般而言,我们设定μ∈500,(越大,将导致所求的结果矩阵秩越小,此时采样矩阵所能容忍的其他随机噪声将越大,同时所能容忍的结构化噪声大小可以通过参数λ来进行调节,当采样矩阵所含结构化噪声较大时,可适当选取较小的λ值;此外,如果采样矩阵同时包含较大的结构化噪声和随机噪声,则参数μ的取值应该设置为较大.(3)参数δ被用来控制和调节LiBIMC算法的收敛性.由定理2可知:如果存在常数β∈(0,+),使得函数F2(犡)=微且对任意的犝,犞∈犚则当变量犡取任意初始值及任意δ∈0,2/(LiBIMC算法一定收敛.但对于函数F2(犡)=12PΩ(犚-犡-犣k)2显然有PΩ(犝+犣k-犚)-PΩ(犞+犣k-犚)F1·犝-犞F成立.因此,至少可以令β=1,从而设定参数δ∈(0,2).此外,从算法4中第3步我们还可以看出,在(0,2)范围内,我们可以通过调节参数δ的大小来调节结果矩阵的秩,一般说来,参数δ越大,所求的结果矩阵秩越小,同时算法收敛速度也越快.接下来我们设计了4组不同的实验:第1组实验重点考察LiBIMC算法对缺失元素的补全精度、对含噪元素的纠错精度以及对结构化噪声行位置信息的辨识精度;第2组实验主要比较了移除结构化噪声行前后LiBIMC算法和IALM、SVT、FPCA算法对缺失元素的补全精度;第3组实验重点考察了采样率的变化对LiBIMC算法性能所带来的影响;第4组实验考察了结构化噪声污染程度对LiBIMC算法性能的影响.实验1.LiBIMC算法对缺失元素的补全精度、对含噪元素的纠错精度以及对结构化噪声行位置信息的辨识性能.实验1中,为了考察LiBIMC算法在采样矩阵包含结构化噪声情况下对缺失元素、含噪元素的补全性能以及对噪声行位置信息的辨识能力,我们针对(n1,n2,r,ps,pn,λ,μ,δ)设计了5个不同的实验,实验结果见表1.从表1容易看出,LiBIMC算法不仅能以足够高的精度补全缺失元素,而且能在很大程度上对含噪元素进行纠错,更为重要的是,LiBIMC算法对结构化噪声行位置信息的辨识精度(F1-Measure)达到了100%.有了这些精确的噪声行位置信息,我们就可以在移除噪声行的情形下对矩阵不含噪部分的缺失元素进行补全,从而使得现有的矩阵补全算法都能够在结构化噪声采样的情形下得以应用.此外,表1还反映了每次实验所耗费的算法运行时间以及所求解的结果矩阵的秩,从表1中可以看出,一方面在核范数的作用下,结果矩阵的低秩性得到了很好的保持,另一方面从算法实时性要求来看,算法运行效率还有待进一步提高,我们可以在未来研究中考虑引入标准矩阵补全问题中常用的快速求解算法如IALM或ADM算法来改进结构化噪声矩阵补全问题的求解效率.Page10表1LiBIMC算法缺失元素和含噪元素补全精度以及结构化噪声行位置信息识别性能n1300400500300500500100.450.2515000.71.23.17e-15.86e-24.13e-2110001000151500100010实验2.移除结构化噪声行前后LiBIMC、IALM、SVT、FPCA算法对缺失元素的补全精度比较.实验1结果表明,LiBIMC算法能精确辨识出结构化噪声所在行的位置信息,因此我们在实验2中设计了5个实验来考察移除结构化噪声行前后LiBIMC算法与IALM、SVT和FPCA算法对缺失元素的补全性能,其中,IALM算法的实现代码来源于http://perception.csl.illinois.edu/matrix-rank/sample_code.html,SVT算法的实现代码来源于http://svt.stanford.edu/code.html,FPCA算法的表2IALM、SVT、FPCA与LiBIMC算法移除结构化噪声行前后对缺失元素的补全精度比较n1n2rpspnμλδ30040050.450.2512000.81.23.06e-18.75e-63.58e-11.62e-55.66e-12.97e-54.91e-23.01e-450030050.350.1512000.71.22.61e-18.16e-63.17e-11.57e-55.44e-12.08e-53.71e-25.09e-4500500100.450.2515000.71.22.84e-17.57e-63.32e-11.56e-54.19e-12.31e-54.13e-21.36e-410001000150.300.3016000.71.24.53e-17.62e-64.98e-19.85e-64.58e-11.02e-54.92e-21.01e-415001000100.300.1012000.71.22.95e-16.33e-63.04e-12.31e-53.23e-13.28e-51.66e-26.72e-5实验3.采样率对LiBIMC算法性能的影响.Candes和Recht[6]的研究结果表明,对不含噪采样的标准矩阵补全问题而言,如果目标矩阵犡的阶为n1×n2,秩为r,其自由度为df=(n1+n2-r)r,当采样数目m<df时,可能存在无穷多个秩为r的矩阵满足约束条件PΩ(犚)=PΩ(犡),这就意味着,当采样数目低于矩阵自由度时,即使在不含噪情形下我们也不可能精确恢复出目标矩阵.因此,为了有效地考察采样率对结构化噪声矩阵补全性能的影响,实验中我们仅考虑m>df的情形,即采样元素个数必须不少于矩阵自由度.此外,鉴于实验1和实验2的结果已经表明LiBIMC算法的优势主要体现在结构化噪声行位置信息的辨识和移除结构化噪声行后对缺失元素的补全能力,因此实验3主要考察LiBIMC算法在不同采样率下所表现出来的结构化噪声行位置信息辨识能力和移除结构化噪声行后对缺失元素的补全能力.其中,结构化噪声行位置信息辨识能力的考察综合采用F1-Measure和查全率(Recall)、查准率(Precision)作为评价指标,移除结构化噪声行后对缺失元素补全能力的考察采用缺失correctrmiss实现代码来源于http://www1.se.cuhk.edu.hk/~sqma/FPCA.html.IALM、SVT和FPCA算法的参数均按照算法设计者设定的方法选取.实验结果见表2.从表2可以看出:(1)移除结构化噪声前,LiBIMC算法对缺失元素的补全精度明显优于IALM、SVT和FPCA算法将近一个数量级;(2)移除结构化噪声行后,采样矩阵变成了无噪声采样,此时无论是LiBIMC算法还是IALM、SVT、FPCA算法,对缺失元素的补全精度均得到了大幅度的提高.SVT移除噪声行前元素补全精度作为评价指标.图1和图2分别从F1-Measure和Recall、Precision的3个评价指标反映了秩为5、10和15的400×400矩阵在结构化噪声污染率为20%的情形下不同的采样率对结构化噪声行位置信息辨识能力的影响,图3反映了同样情形下采样率对移除结构化噪声行后缺失元素补全精度的影响.考虑到LiBIMC算法参数的选取和采样率大小无关,因此本实验中的参数设置为定值,即λ=0.7,μ=1200,η=1.2.图1不同的采样率对结构化噪声行位置信息Page11图2不同的采样率对结构化噪声行位置信息从图1可以看出:(1)当矩阵的秩较低时(例如秩为5时),即使采样率低至10%,LiBIMC算法对结构化噪声行位置信息辨识的F1-Measure值也能接近于100%,这表明LiBIMC算法对低秩矩阵具有很强的结构化噪声行位置信息辨识能力;(2)当矩阵的秩分别提高为10和15时,如果采样率过低(例如分别低于12.5%和20%时),则相应的噪声行辨识能力急剧下降,但是如果将采样率各提高5个百分点,即分别提高到17.5%和25%以上,则相应的F1-Measure值也能达到100%,这表明虽然随着矩阵秩的增加,在采样率保持不变的情形下,LiBIMC算法对结构化噪声行位置信息的辨识能力会相应减弱,但实际上仍然可以通过提高采样率来减小这种负面影响,从而使得结构化噪声行位置信息得到精确辨识.进一步,从图3可以看出:(1)当矩阵的秩较低时(例如秩为5时),即使采样率低至10%,LiBIMC算法对缺失元素的补全能力依然很强,这表明LiBIMC算法对低秩含噪矩阵具有很强的缺失元素补全能力;(2)当矩阵的秩分别提高到10和15时,如果采样率较低(例如采样率为10%和12.5%时),LiBIMC算法对缺失元素的补全能力急速下降.同时,我们结合图1和图3容易发现:对于矩阵秩为15的情形而言,当采样率分别为17.5%和20%时,虽然图1表明LiBIMC算法对结构化噪声行位置信息辨识的F1-Measure值并不高,但图3却反映出此时的缺失元素补全精度相当之高.究其原因,主要还是由于此时LiBIMC算法对结构化噪声行位置信息的查全率达到了100%,因此图3中此时对移除结构化噪声行后的缺失元素补全就等同于无噪声采样情形下缺失元素的补全,自然容易获得很高的补全精度.实际上,图2的实验结果也证实了这一事实:无论矩阵的秩为5,10还是15,在各种采样率下,LiBIMC算法对结构化噪声行位置信息辨识的查全率都高于查准率;特别地,当秩为15时,如果以采样率17.5%进行采样,此时的F1-Measure值和查准率均远低于100%,但查全率仍然达到100%,这表明在进行缺失元素补全时我们可以以较低的采样率首先移除全部噪声行(付出的相应代价是有少部分不含噪元素也会当作结构化噪声行被移除),从而得以在干净采样的情形下补全不含噪部分的缺失元素.实验4.结构化噪声污染程度对LiBIMC算法性能的影响.实验3考察了采样率对LiBIMC算法性能的影响,实验4将考察结构化噪声污染程度对LiBIMC算法的性能影响.鉴于前文对LiBIMC算法可调参数的分析已经表明参数λ的选取和结构化噪声污染程度的大小密切相关,因此本实验中仅固定参数μ=1200,η=1.2,而参数λ的取值是从0.75依噪声比例均匀递减到0.51.图4反映了秩分别为5、10和15的400×400矩阵在采样率为30%和40%情形下不同结构化噪声污染程度对噪声行位置信息辨识能力(F1-Measure)的比较.图5反映了秩分别为图4不同的噪声污染程度对结构化噪声行位置Page12图5采样率为40%时不同的噪声污染程度对移除5、10和15的400×400矩阵在采样率为40%的情形下不同结构化噪声污染程度对移除结构化噪声行后缺失元素补全精度的比较.从图4可以看出:当采样率达到40%时,对秩为5、10和15的矩阵而言,即使结构化噪声程度达到70%,LiBIMC算法对噪声行位置信息辨识的F1-Measure值仍然能达到.但当采样率降到30%时,LiBIMC算法对噪声信息的辨识能力随着矩阵秩的增大和结构化噪声污染程度的提高显著下降,这表明结构化噪声污染程度对LiBIMC算法辨识噪声行位置信息能力的影响同时取决于矩阵的低秩程度和采样率的大小,如果矩阵足够低秩,而且采样率足够高,则LiBIMC算法对噪声行位置信息的辨识能力基本不受结构化噪声污染程度的影响,反之则影响较大.进一步,从图5可以看出:当矩阵的秩为15时,即使采样率高达40%,随着结构化噪声污染程度的增加,缺失元素的补全精度下降也比较明显,但另一方面图4却表明当矩阵秩为15时,如果采样率达到40%,LiBIMC算法对噪声行位置信息辨识的F1-Measure值能达到100%,这就意味着其查全率能达到100%,也就是说在补全缺失元素时完全可以在移除全部噪声行元素的无噪声采样状态下进行,理论上此时的缺失元素补全精度是不应该随着结构化噪声污染程度的增加而不断下降的.究其原因,主要是由于当噪声含量达到一定比例时,如果移除全部噪声行信息,则矩阵的低秩性会受到很大的影响.例如对400×400的矩阵而言,如果噪声含量达到50%,则移除噪声行后所得到的干净矩阵最多变为200×400,因此其低秩性发生了很大的变化,从而使得图5所示的“当秩为15时,移除全部结构化噪声行后缺失元素补全精度依然随着噪声污染程度的提高而急剧下降”的现象产生.最后,综合上述实验1~实验4,我们可以得出如下结论:(1)在结构化噪声采样情形下,如果仅仅需要恢复不含噪部分的缺失元素,我们可以利用LiBIMC算法预先探测出噪声行位置,然后再选择任意一种已有的矩阵补全算法,在移除噪声行信息后,就可以以非常高的精度恢复出缺失元素;(2)如果同时需要对噪声元素纠错并且恢复含噪部分的缺失元素,可以选择LiBIMC算法进行一次性补全,虽然补全精度低于无噪情形,但与IALM、SVT和FPCA算法相比,仍然有了将近一个数量级的提高;(3)LiBIMC算法的性能受到采样率和结构化噪声污染程度的影响,特别地,矩阵的秩越高,LiBIMC算法性能受到采样率和结构化噪声污染程度的影响越明显;(4)随着矩阵秩的增加和结构化噪声污染程度的提高,虽然LiBIMC算法的补全性能会受到影响,但仍然可以通过提高元素的采样率来有效减小甚至抵消这种影响,从而达到理想的矩阵补全性能.7结论本文针对矩阵补全理论在实际问题中经常遇到的行结构化噪声情形提出了一种可扩放性好的有效解决方案.该方案首先通过引入L2,1范数正则化技术将其建模为一类凸约束优化问题,然后为此设计了一种鲁棒的求解算法———基于线性Bregman迭代的结构化噪声矩阵补全算法(LiBIMC).LiBIMC算法不仅能以较高的精度补全缺失元素,而且还能对含噪元素进行纠错,更为重要的是,LiBIMC算法能够精确辨识采样矩阵中噪声元素所在行的位置信息.有了这些噪声行位置信息,已有的矩阵补全算法都可以在预先移除采样矩阵噪声行的前提下,对无噪声部分的缺失元素进行精确补全.在接下来的工作中,我们将进一步对LiBIMC算法的收敛性进行严格的理论分析,同时研究LiBIMC算法可调参数的自适应设置方法,并展开LiBIMC算法在推荐系统、无线传感网节点定位和数据收集等方面的应用研究.
