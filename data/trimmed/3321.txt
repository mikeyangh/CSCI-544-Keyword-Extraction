Page1一种基于FPGA的高斯随机数生成器的设计与实现谷晓忱张民选(国防科学技术大学计算机学院PDL重点实验室长沙410073)摘要基于FPGA的高斯随机数生成器需要满足可重构、高吞吐率和高硬件资源使用效率等要求.文中提出了一种易于硬件实现的状态转换逻辑结构,并给出了均匀分布随机数周期和输出位宽的配置方法和配置原则.文中详细分析了应用“最值分析法”和“静态误差分析法”求解BoxMuller算法实现过程中各操作数位宽的具体过程.硬件实现结果在XilinxVertex5上的工作速度为491MHz,吞吐率为9.82×108samples/second,硬件资源使用效率为2.085×106samples/second/slice.文中作者使用DIEHARD测试集、χ2和K-S方法对产生的随机数质量进行了检测,文中给出了结果.关键词现场可编程门阵列;硬件加速器;高斯随机数产生;均匀分布随机数产生;可重构计算1引言随着FPGA性能的不断提高,基于FPGA的计算加速已经逐渐成为提高计算速度和计算效率的重要手段之一.近年来的很多研究成果[1-2]表明,现阶Page2近年来,有很多关于在FPGA上实现高斯随机数生成器的研究[3-5].Lee等人[5]应用BoxMuller方法在XilinxV4FPGA上产生高斯随机数,并对设计过程进行了分析;Cheung等人[4]应用Inver-sion方法设计高斯随机数生成器,并在XilinxV4和V2两个型号的FPGA上进行了实现;Thomas等人[3]应用“Centrallimit”原理设计的高斯随机数生成器(在XilinxV5上实现)可以达到397MHz的工作频率.这些研究都在不同方面取得了相应的成果,为后续研究提供了重要的参考.但是,他们的研究仍然存在很多缺陷,其中最重要的一点就是:已有的研究只关注对高斯随机数产生算法的设计实现过程,基本不关心均匀分布随机数的产生过程.除了Wallace等少数方法以外,大多数高斯随机数产生算法都是基于“转换”的思想得到高斯随机数的,即高斯随机数是由均匀分布随机数通过某种算法转换得到的.因此,这些算法的实现前提是需要有一组满足质量要求的均匀分布随机数.上述对高斯随机数生成器的研究中,大都将均匀分布随机数生成器作为已知条件看待,没有将均匀分布随机数生成器的设计作为高斯随机数产生的一部分来进行深入的研究.的影响主要体现在以下3个方面:(1)均匀分布随机数的周期决定了高斯随机数的周期,基于FPGA的计算加速应用中,需要保证随机数的周期具有可配置属性,这点主要体现在均匀分布随机数的设计中;均匀分布随机数生成器对高斯随机数产生过程(2)均匀分布随机数的位宽决定了可以产生的高斯随机数的范围,即某些小概率事件的产生需要依靠对均匀随机数位宽的正确配置来实现;(3)均匀分布随机数生成器的工作速度不能低于高斯随机数产生算法的硬件工作速度,为了不降低最终产生高斯随机数的吞吐率,均匀分布随机数生成器需要具有结构简单、工作速度快的特点.本文的研究将均匀分布随机数的产生过程考虑到高斯随机数生成器的设计过程中,综合考虑均匀分布随机数生成器对高斯随机数产生过程的影响,有针对性地解决了上述3个方面的问题.本文通过对CombinedTausworthe均匀分布随机数生成器的改进,提出了一种基于矩阵思想设计转换逻辑犃s的硬件结构,提高了均匀分布随机数的产生速度.通过对均匀分布随机数生成器的周期和输出位宽进行配置,使得高斯随机数的周期和产生范围具有可配置的属性,可以满足不同应用环境的需求.2随机数产生算法2.1均匀分布随机数产生算法CombinedTausworthe[6]本文应用CombinedTausworthe算法产生均匀分布随机数.CombinedTausworthe随机数生成器由若干个Tausworthe随机数生成器组成,每个Tausworthe随机数生成器产生的随机数可以表示成如下形式其中,L和s都是非零正整数,s是跳变步长,L是随机数的输出位宽.xj,ns+i-1是一个随机序列,其递归关系式为xj,n=a1xj,n-1a2xj,n-2…akxj,n-k(2)其中,ai是特征多项式P(z)=zk-a1zk-1-…-ak的系数.当P(z)为本原多项式时,输出序列的周期取得最大值:2k-1.P(z)通常取三项式:P(z)=zk-zq-1.由J个Tausworthe随机数生成器构成的CombinedTausworthe随机数生成器所产生的(0,1)区间内的均匀分布随机数可以表示为un=∑L其中,xj,ns1+i-1是第j个Tausworthe随机数生成器的输出.2.2高斯随机数产生方法Box-Muller[7]Box-Muller方法可以将均匀分布随机数转换为高斯分布随机数,它依据的原理是:两组相互独立的高斯分布随机数的平方和服从指数分布.其转换过程可以表示为i=1其中,u1和u2是两路均匀分布随机数,α和β是得到的高斯分布随机数.3硬件结构3.1整体架构图1所示为高斯随机数生成器的整体架构.该架构分为两个部分:虚线框内为BoxMuller算法实现部分;虚线框以外为均匀分布随机数产生部分.BoxMuller算法实现部分需要使用到指数函数、对Page3数函数以及三角函数运算模块,这些模块可以采用查表和函数最佳一致逼近等方法设计实现,也可以采用Xilinx公司等提供的IP核实现.由于BoxMuller算法需要使用两路独立的均匀分布随机数,所以图1所示架构中需要使用两个CombinedTausworthe均匀分布随机数生成器.图2CombinedTausworthe随机数生成器的结构3.2转换逻辑犃狊的设计一般情况下,式(2)所示的递推关系大都使用线性反馈移位寄存器来实现.此时,每个时钟周期只能产生一位有效的数据信息xj,n,而根据式(1)的约束关系,产生一个L位的随机数un,j需要使用s位新的数据信息,也就是说,需要s个时钟周期才能产生一个随机数un,j.因此,为了在每个时钟周期内可以产生一个L位的随机数un,j,就需要改变线性反馈移位寄存器的反馈逻辑,使其可以在一个时钟周期内产生s位有效数据信息.式(2)的递推关系可以用矩阵形式表示为其中,Xj,n是当前时刻的L位状态信息,Xj,n+1是下一时刻的L位状态信息,犃是状态转换矩阵,其形式为图2所示为CombinedTausworthe随机数生成器的结构.由该结构产生的随机数满足式(3)的约束关系.最终的输出un是J个Tausworthe随机数生成器的输出的异或结果.每个Tausworthe随机数生成器由一个L位的寄存器和转换逻辑犃s构成.寄存器中的每一位数据都满足式(2)的约束关系.转换逻辑犃s根据这一约束关系以及式(1)的组合关系求出下一时刻的输出un+1,j.在高斯随机数生成器的设计过程中,BoxMuller算法实现部分的难点在于如何确定各操作数的位宽,因为各操作数的位宽决定了最终产生的高斯随机数的正确性和精度;而均匀分布随机数产生部分的难点在于转换逻辑犃s的设计,因为转换逻辑需要保证在每个时钟周期内产生一个新的随机数un,j,所以犃s的硬件复杂程度和工作速度就决定了整个CombinedTausworthe随机数生成器的性能.其中,犆1×L是特征多项式P(z)的系数向量,犐(L-1)×(L-1)是一个单位矩阵,0(L-1)×1是一个零向量.根据式(6)的状态转换关系,包含s位新的有效数据位的状态信息可以表示为Xj,n+s=犃×Xj,n+s-1即也就是说,如果使用转换矩阵犃s对当前时刻的输出un,j进行状态转换,就可以直接得到下一时刻的输出un+1,j.关于转换矩阵犃s的求解过程,本文作者在文献[8]中已经有详细说明,这里不再赘述.Page4根据式(9)的状态转换关系,可以得到图3所示的硬件结构.转换矩阵犃s中每个“1”都对应一个异或门.P(z)通常取三项式:P(z)=zk-zq-1.因此,un+1,j中新产生的s位数据信息都是由un,j中的某两位数据异或得到的.犃s的硬件结构中只包含s个异或逻辑门,同时这s个异或逻辑门都是并联关系,因此,该结构可以达到较高的工作速度.3.3周期的配置由J个Tausworthe生成器构成的CombinedTausworthe随机数生成器所产生的随机数的周期为[6]T=(2k1-1)×(2k2-1)×…×(2kJ-1)(9)其中,kj为Pj(z)的级数.可见,当kj和J值增加时,周期T也随之增加.此处,均匀分布随机数的周期T也就是最终产生的高斯分布随机数的周期,因此,可以根据实际需要改变kj和J的值,从而达到配置周期的目的.周期的配置原则:在实际的应用中,不同的需求对随机数周期的要求不同.例如在蒙特卡罗计算中,当随机数周期是实际使用的随机数数量的2次方或者3次方以上时就能保证结果的正确性[9].过短的周期将导致计算结果的错误,但是过长的周期则意味着随机数生成器的实现需要消耗更多的硬件资源.所以,在设计高斯随机数生成器时,应该根据实际需要选取J和kj,在保证计算结果正确的前提下,达到消耗最少硬件资源的目的.3.4均匀随机数位宽的配置输出位宽L的可配置性表现在参数组合(L,kj,qj,sj)的选取上.设计CombinedTausworthe随机数生成器时,可以根据设计需求选取输出位宽L,然后按照文献[6]中给出的搜索算法得到满足“ME(MaximallyEquidistributed)条件”的参数组合(kj,qj,sj).需要指出的是,并不是所有的L都能找到满足ME条件的(kj,qj,sj)参数组合.当没有参数组合可以满足ME条件时,文献[6]中也给出了一个折中的办法:假设l>L,且(l,kj,qj,sj)对应的CTRNG满足ME条件,那么可以选取该CombinedTausworthe随机数生成器输出中的L位作为新的输出,构成L位输出的RNG.所以,在设计CombinedTausworthe随机数生成器时,总可以根据实际需要来选取合适的输出位宽L,实现硬件设计的可配置性.4操作数位宽选取与误差分析根据图1所示架构进行硬件设计时,另一个设计难点就是如何确定BoxMuller算法实现部分各操作数的位宽.图1硬件结构中的所有操作数都采用定点数的表式方式.每一个定点数都可以分成3个组成部分:符号位、整数部分和小数部分.本文中,使用Ix表示操作数x的整数部分位宽,使用Fx表示操作数x的小数部分位宽.以下内容将分别给出确定Ix和Fx的具体方法.4.1整数部分位宽选取本文使用“最值分析法”确定各操作数的整数部分位宽,即根据CombinedTausworthe生成器的输出u1和u2以及BoxMuller算法中的运算关系,求解每个操作数可能取得的最大(小)值,进而确定每个操作数的整数部分位宽.这里以求解Iα为例进行说明.根据式(4)以及图1所示结构可知:因为,所以可以得到如下关系,如图1所示,所以,u1是(0,1)区间内的小数,因为CombinedTaus-worthe生成器的输出位宽为L,所以可得即Page5将式(16)的结论代入式(12)可以得到如下结论,|α|的最大值与Iα的关系为因此,为了避免计算过程中α出现溢出现象,Iα的取值应该为根据式(19)就可以算出Iα的值.例如,当L=32时,上述即为利用“最值分析法”确定操作数α的整数部分位宽Iα的求解过程.根据式(10)~式(19)的推导过程,可以确定图1硬件结构中所有操作数的整数部分位宽.应用该方法,每个操作数的整数部分位宽都可以与CombinedTausworthe生成器的输出u1和u2建立数值运算关系.这也表明了u1和u2的位宽对最终产生的高斯随机数的重要影响,说明了3.4小节中对均匀随机数位宽的配置是非常重要的.4.2小数部分位宽选取整数部分位宽Ix决定了各操作数的取值范围,而小数部分的位宽Fx决定了各操作数的计算精度.Fx的取值越大,对应的计算精度就越高,但同时对应的硬件实现结果所消耗的资源也就越多.因此合理选取Fx的原则就是:在满足计算精度要求的前提下,通过选取各操作数的小数部分位宽Fx,使得实现结果达到消耗最少硬件资源的目的.本文采用“静态误差分析法”[5]来求解各操作数的小数部分位宽Fx,即应用误差传递原理,推导出各操作数的量化误差对最终输出结果的影响,而后应用组合最优化问题的求解方法,得到各操作数的最优小数位宽组合.下面将以求解Ff、Fg1和Fg2的过程为例进行说明.在下面的分析过程中,将f、g1和g2的求解模块当做一个IP核看待,其计算精度分别可以达到2-Ff、2-Fg1和2-Fg2.根据计算精度的要求,α和β的最终结果需要精确到2-Fα,β.经过量化后操作数可以表示为其中,x~为该操作数的真实值,x为该操作数的量化值,Ex为量化误差.如果采用截断方式对操作数进行量化处理,那么量化误差Ex在数值上等于操作数的计算精度2-Fx.当进行乘法操作时,误差的传递关系可以表示为x~×y~=(x+Ex)×(y+Ey)即因此,根据图1所示的硬件结构关系,α和β的计算误差可以表示为硬件实现中,α、β以及g1、g2分别取相同的位宽,将各操作数的计算精度代入式(24)中可以得到如下关系2-Fα,βfmax×2-Fg1,2+g1,2max×2-Ff+2-Fg1,2×2-Ff其中,fmax和g1,2max可以根据4.1小节的“最值分析法”求得.因此,根据式(11)的不等式就可以计算出Ff、Fg1和Fg2的取值范围.根据Ff、Fg1和Fg2的取值范围,可以有多种取值组合.位宽的增加,意味着对应模块消耗硬件资源的增加.根据前面提出的Fx选取原则,应该选取硬件资源消耗最少的取值组合.对于复杂的组合最优化问题,可以采用遗传算法或者模拟退火算法等最优化算法寻找最优解.对于式(25)这样相对简单的问题,可以采用穷举法获得最优组合.例如,若α(β)的精度要求为2-16,u1(u2)的位宽L等于32.根据式(25)的约束关系可以得到如下不等式2-16fmax×2-Fg1,2+g1,2max×2-Ff+2-Fg1,2×2-Ff根据“最值分析法”可以计算出fmax≈6.66,g1,2max=1.而后通过穷举所有可能的最优组合,可以得到Ff=17,Fg1,2=20.应用上述“静态误差分析法”以及Fx的选取原则,可以确定图1所示硬件结构中所有操作数的小数部分位宽.5硬件实现与结果分析本文的设计使用Verilog语言对硬件逻辑进行描述,综合工具选用Xilinx公司的ISE11.5.5.1均匀分布随机数生成器本文实现了4个CombinedTausworthe随机Page6数生成器的硬件设计,它们具有不同的周期和输出位宽,其配置参数如表1所示.表1[6]CombinedTausworthe随机数生成器的配置参数CombinedTausworthe1CombinedTausworthe2CombinedTausworthe3CombinedTausworthe4这4个随机数生成器在XilinxVertex6FPGA上的硬件实现结果如表2所示.位宽L的值可以根据文献[6]中提供的参数确定.如表2所示,本文分别实现了两个32位和两个64位的CombinedTausworthe随机数生成器.根据3.4小节给出的位宽配置原则,表2所示的4个均匀随机数生成器可以被配置成输出位宽不大于32位和不大于64位的任意输出位宽的均匀分布随机数生成器.表2CombinedTausworthe随机数生成器的硬件实现结果CombinedTausworthe1323288301113CombinedTausworthe23242113341113CombinedTausworthe36432176521113CombinedTausworthe46442223641113根据式(9)可知,周期的大小由kj和J的值确DesignMethodDeviceSlicesBlockRAMsDSPsFrequency/MHz表3几种高斯随机数生成器的实现结果比较本文BoxMullerLee[5]BoxMullerV414523123752Cheung[4]InversionV4579143701Thomas[3]CentrallimitV5774403971注:“Device”一栏中的V4和V5指的是XilinxVertex4和Vertex5FPGA.果进行分析:本文主要从以下两个方面对表3的硬件实现结(1)硬件实现方式与软件实现方式的性能比较.本文用C语言对图1的硬件结构进行了编程,并将软件运行于主频为3GHz的Intel处理器上.从表3列出的软/硬件运行结果可见,硬件实现方式定.结合表1的设计参数,可以得到表2中所列出的各CombinedTausworthe随机数生成器的周期.文献[6]中提供了多种不同的kj和J的配置组合,所以在不同的应用环境中,根据3.3小节给出的周期配置原则,可以根据实际需求对CombinedTausworthe随机数生成器的周期进行重新配置.从表2的硬件实现结果可以看出,所设计的4个CombinedTausworthe随机数生成器消耗的硬件资源都非常少,而且都获得了很高的工作频率.这主要是因为3.2小节中提出的转换逻辑犃s具有非常简单而且易于硬件实现的结构.根据图3所示的结构,犃s中仅包含s个二输入异或门,而且它们都是并联关系.因此,无论L与s的值怎样变化,犃s的硬件实现结果都只有一级异或逻辑.也是由于这个原因,表2中所示的4个CombinedTausworthe随机数生成器才会有相同的工作频率.5.2高斯分布随机数生成器本文使用表1中所列出的CombinedTaus-worthe1作为均匀分布随机数生成器,应用BoxMuller算法,在XilinxFPGA上实现了高斯随机数生成器的硬件设计.硬件设计中采用定点方式表示各操作数,最终输出(α和β)需要精确到2-16.设计中采用4.1和4.2小节给出的“最值分析法”和“静态误差分析法”确定各操作数的位宽.硬件设计过程中对复杂的运算部件(如乘法等)进行了流水化处理.表3是高斯随机数生成器的硬件实现结果.为了便于跟其它参考设计进行比对,本文分别给出了该硬件设计在Vertex4和Vertex5上的综合结果,该综合结果在Modelsim中进行了功能验证.产生随机数的吞吐率是软件实现方式产生随机数吞吐率的400多倍.因为硬件运算可以保证每个时钟周期都产生一个输出结果,而软件运算需要经过若干条指令的运行才能得到一个最终结果,因此使用硬件运算可以获得很好的加速效果.文献[5]中甚至获得了千余倍的加速比.虽然软件运行方式也可以Page7通过各种手段提高其运算速度,但是硬件运算还是可以保证获得1至2个数量级的加速比[5].所以,使用硬件实现方式可以更好地满足高吞吐率的要求.(2)本文实现结果与其它硬件实现结果的性能比较.表3中列出了已报道的其它几种高斯随机数生成器的硬件实现结果.本文主要从硬件资源使用情况(slices、BRAMs和DSPs)、吞吐率(Frequency、Throughput)和硬件资源使用效率(Throughput/slice)3个方面进行比对.硬件资源的使用情况跟所使用的算法有关.BoxMuller算法中包含较多的算术运算(如乘法等)过程,因此从表3给出的结果可见,本文和Lee等人设计的BoxMuller随机数生成器比使用Inversion和CentralLimit方法设计的随机数生成器要消耗更多的DSP资源.但是,本文的设计所消耗的硬件资源要少于Lee等人的设计,尤其是逻辑运算部分(slices部分),本文的设计所消耗的slice资源仅是Lee等人的设计的2/3.Lee等人的设计也是采用CombinedTausworthe方法生成均匀分布随机数,但是他们的硬件设计采用的是文献[6]中给出的算法.这种算法适合于PC机上的指令运算,当进行硬件设计时,该算法就需要消耗比较多的硬件资源.吞吐率是衡量随机数生成器性能的重要指标之一.它主要取决于随机数生成器的工作速度(时钟频率).但是,由于BoxMuller算法可以在每拍产生两个有效输出,所以,它在算法上具有独特的优势.从表3中列出的数据可以看出,采用BoxMuller算法所获得的吞吐率要高于其它算法.因为其它算法的工作频率需要达到BoxMuller算法的两倍以上才能具有高于BoxMuller算法的吞吐率,而在同等的硬件实现环境中,这是很难实现的.同样,本文的硬件设计所获得的吞吐率要高于Lee等人的设计.这同样是因为在设计CombinedTausworthe随机数生成器时本文采用了不同于Lee等人的设计思路.文献[6]中给出的实现算法需要三次移位操作、两次异或操作和一次与操作才能得到下一时刻的输出un+1,j,在硬件设计时,其逻辑级数要远大于3.2小节中所给出的转换逻辑犃s的逻辑级数.因此,其工作速度要低于本文的设计.硬件资源使用效率是衡量基于FPGA的随机数生成器时所使用的一个特殊的指标.它使用平均到每个slice上的吞吐率来衡量硬件实现结果对资源的使用效率.由于FPGA中包含有slice、BRAM和DSP等多种硬件资源,所以使用哪种类型的硬件资源作为衡量标准一直是一个比较难以达成一致的问题.根据众多参考文献的记录[3-5,8],一般是将对DSP和BRAM等硬件资源的使用看做是对运算部件和存储部件的一种特殊实现方式,而使用slice资源(逻辑部件)作为衡量硬件资源使用效率的参考标准,即用单位slice资源上的吞吐率来衡量设计随机数生成器时对硬件资源的使用效率.由于本文的设计对CombinedTausworthe随机数生成器的实现结构和BoxMuller算法实现部分各操作数位宽进行了合理的优化,因此可以在消耗比较少的slice资源的前提下获得较高的工作频率.从表3所给出的数据可以看出,本文的设计获得了明显高于其它几种实现结果的硬件资源使用效率.5.3随机数质量检测对随机数的质量检测可以分成两部分进行:一是检测由CombinedTausworthe方法产生的均匀随机数的质量;二是检测最终产生的高斯随机数的质量.本文使用著名的随机数质量检测软件DIE-HARD①对CombinedTausworthe方法产生的均匀随机数的质量进行了测试.测试结果显示:CombinedTausworthe方法产生的均匀随机数可以通过DIEHARD测试集[10]中所有测试程序的检测.图4所示为本文设计的高斯随机数生成器所产生的100000个随机数的概率密度函数图,可见其实测结果与理论结果基本保持一致.同时,本文使用χ2和K-S两种测试方式对这100000个随机数的质量进行检测[11].根据计算出的p值可以得出结论:本文设计的高斯随机数生成器所产生的随机数符合(0,1)正态分布.①http://stat.fsu.edu/~geo/diehard.htmlPage86总结本文首先应用矩阵的形式分析了CombinedTausworthe随机数生成器中的核心部件———状态转换逻辑犃s的特征,提出了一种只需要使用s个二输入异或门来实现犃s的硬件结构.而后,给出了CombinedTausworthe随机数生成器中周期和输出位宽的配置方法和配置原则.在BoxMuller算法的硬件实现部分,本文给出了应用“最值分析法”和“静态误差分析法”确定各操作数位宽的具体分析过程,并计算出了均匀分布随机数的位宽L与高斯分布随机数输出范围的关系.在XilinxVertex6FPGA上的硬件实现结果表明:应用本文提出的转换逻辑犃s所设计实现的CombinedTausworthe随机数生成器可以在消耗较少硬件资源的前提下获得较高的工作速度.通过与其它几种高斯随机数生成器的硬件实现结果进行比对,本文设计的高斯随机数生成器可以实现更高的工作速度和获得更优的硬件资源使用效率.本文的硬件设计所产生的高斯随机数可以通过χ2和K-S测试方法的检验.
