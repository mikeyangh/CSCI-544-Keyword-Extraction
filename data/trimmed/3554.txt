Page1基于改进蚁群算法的服务组合优化夏亚梅1),2)程渤1)陈俊亮1)孟祥武1)刘栋1)1)(北京邮电大学网络与交换技术国家重点实验室北京100876)2)(北京邮电大学软件学院北京100876)摘要为进行服务组合优化及适应服务组合优化过程中Web服务的动态性、不稳定性以及多种QoS属性限制等问题,提出一种多信息素动态更新的蚁群算法MPDACO,包括MPDACO局部优化算法和MPDACO全局优化算法,该算法基于建立的服务组合模型,在基本蚁群算法基础上进行研究和改进,可以适应服务组合优化过程中发生的服务无效以及服务中QoS变化等情况.另外,为使算法能较快地收敛于最优解,在实验基础上对蚁群算法策略进行了改进.为验证以上算法的有效性,在一个旅游领域的服务推荐系统中对算法进行了仿真实验,实验结果表明文中提出的算法较基本蚁群算法及一种应用于服务选择的遗传算法有更好的性能.关键词语义网;服务组合;服务选择;蚁群算法;最优化1引言动态服务组合技术是当前的一大研究热点.在动态服务组合过程中需要对相同功能的多个服务及组合服务进行选择,以提供最适合用户的服务.而随着提供服务的日益丰富,服务选择问题的规模急剧增长.因而动态服务组合中的服务选择问题急需有效的方法来解决.服务选择问题属于组合优化范畴,是一个NP难问题,因此本文中把“服务选择”称为“服务组合优化”.另外,由于Web服务状态不稳定、服务的QoS属性值有时不明确且经常发生变化等原因,要求服务组合优化算法既要具有良好的性能,又要能适应Web服务状态的不稳定、服务的QoS值不明确以及服务中QoS的变化等情况.本文提出一种改进的蚁群算法对服务组合进行优化.它具有较好的性能,同时也能适应组合优化问题的动态性.这里选用蚁群算法解决以上的组合优化问题,是因为蚁群算法具有以下特点:(1)由蚁群算法中蚂蚁选路机制决定,算法流程能够适应寻优过程中流程的动态变化,也能够适应优化过程中优化值的动态变化;另外,蚁群算法中的信息素具有信息素挥发因子ρ,可以避免蚂蚁信息素的无限积累,使得蚂蚁的选路行为能根据外部环境的动态变化而变化.以上这些特点使得蚁群算法非常适合动态服务组合中的服务选择问题.(2)可方便地对信息素机制进行改进,能设立多种信息素,以表示组合服务的多种QoS优化属性约束.(3)可适应于QoS属性值已知的情况,同时也可以在QoS属性值不明确的情况下应用.这一特点使算法非常适合于服务推荐(组合过程中与用户进行交互的一种服务组合方法)系统.解释如下:服务推荐系统初始建立时,各服务的QoS值不明确,此时根据算法设立的启发因子进行服务的随机选择;随着服务调用记录的进一步增加,算法能根据历史记录选择越来越好的推荐服务;如果一些服务的状态变为不可用时,则暂时禁用这一服务;如果所提供服务的QoS发生变化,则根据信息素的挥发及更新规则重新生成新的服务QoS反馈,并重新调整推荐服务,较真实地模拟了服务推荐系统中的服务选择问题.(4)蚁群算法是继遗传算法之后出现的又一种全局优化算法.同遗传算法相比,蚁群算法概念简单,需要设置的参数少,不需要交叉、变异等操作,而优化结果甚至优于遗传算法.蚁群算法一经提出便发展迅速,现在已应用到多个组合优化领域,成为优化算法中不错的选择[1-3].2相关研究蚁群算法优化在许多领域都有应用,如TSP问题、背包问题、测试集优化、神经网络、人工智能、信号传输等,有最新研究还将蚁群算法应用于网格服务可靠性保证[4]、软件测试参数的优化等[5].以上蚁群算法的应用都取得了较好的研究结果.但蚁群算法本身存在一些固有的缺陷,如收敛速度慢,易于停滞等.为了克服这些缺点,不少学者提出了改进算法,如Stutzle等人[6]提出了一种MMAS(Max-MinAntSystem)算法,其基本思想是对路径上的信息素进行限制,对信息素进行局部更新,以期克服停滞问题等.另外,对于蚁群算法收敛理论方法的研究,黄翰等人[7]基于吸收态Markov过程的数学模型,提出了蚁群算法的收敛速度分析理论,给出了估算蚁群算法期望收敛时间的几个理论方法.目前的服务选择一般是基于服务的QoS属性约束进行的,且大多没有考虑服务选择问题的动态性.采用的计算方法有穷尽计算方法与启发式计算方法两种.采用穷尽计算的组合优化方法存在扩展性差、计算量相对较大的弊端,就目前的研究结果来看,启发式计算方法较穷尽计算方法有更好的性能[8].张成文等提出一种基于遗传算法的QoS感知的Web服务选择算法,可以从所有组合路径的组合方案中选出满足用户QoS需求的服务方案,但该方法在优化操作前先对优化问题编码,没有考虑优化过程中的动态性问题[8].Zeng等人[9]提出用于服务组合的QoS感知的中间件,他们考虑到了QoS值发生变化的动态性,然而没有考虑服务不可用以及由此引起的服务组合流程的动态变化问题,且该QoS驱动的中间件是采用穷尽计算方法,只考虑了局部优化问题,没有对组合服务进行全局的优化选择.倪晚成等人[10]用Dijkstra最短路径算法进行服务组合问题的优化,选择的服务能满足QoS需求,但对服务状态的复杂性没有考虑.本文将蚁群算法引入到服务组合领域,提出一Page3种多信息素动态更新的蚁群算法MPDACO,该算法可以动态地适应网络中服务无效以及服务的QoS变化等情况.为提高优化算法的性能,根据服务组合优化问题的特点,对优化问题进行了分解,提出的MPDACO包含两个子算法,一种用于在单一服务中选择最优的服务,称为MPDACO局部优化算法,另一种用于选择最优的组合服务,称为MP-DACO全局优化算法.为验证MPDACO的有效性,进行了仿真实验,测试结果表明本文提出算法的性能不低于文献[8]中算法的性能.本文第2节是相关研究介绍;第3节对服务组合优化问题进行建模;第4节给出MDPACO算法,并验证算法的有效性;第5节以一个旅游服务推荐系统中的应用为例对文中算法进行了仿真实验;第6节给出结论.3服务组合优化问题的建模服务组合优化需要考虑多个QoS属性约束,设服务S具有n个QoS属性,表示为{Q1,Q2,…,Qn}.而人们对于服务的各个QoS属性,一般都有一个最低或最高能接受的约束值,设为q1,q2,…,qn,单一服务选择的目的是寻找具体的服务实例s,s的各个QoS属性满足以下约束:在满足以上约束的情况下寻找QoS总和最高的服务,QoS总和的计算参见以下说明.由于每个QoS取值之间可能有较大差别,有时甚至不属于同一个数量级,另外,有的QoS属性取值越高表示服务的QoS越高,如服务带宽,有的QoS属性取值越高反而表示服务的QoS越低,比如服务响应时间,因而简单的加总会影响某些属性值,不能准确地表达QoS,因此给每个QoS属性设定相应的函数Q1(s),Q2(s),…,Qn(s),使各个QoS属性经函数运算后的结果值正比于QoS,其值越大表示用户对相应服务的QoS满意度越高.另外再设定相应的权值w1,w2,…,wn,使各个QoS能合理地加总.服务QoS总和的计算公式定义为Qs=∑n以上是单一服务选择问题,也称为局部优化问题[9].在服务组合系统中,需要对多个单一服务进行选择,以组合成为一个组合服务,而在多个组合服务之间还需要进一步选择以获取最高QoS的组合服务.因此在局部优化之后,还需要进一步进行全局优化.目前存在的动态服务组合方法有基于接口匹配的服务组合方法[11]、基于UML建模的服务组合方法[12]、基于实时通信的服务组合方法[13],还有的服务组合方法在服务组合过程中考虑了用户的偏好,以提高组合服务的QoS[14-15].本文对以上几种服务组合方法生成的服务组合图统一地抽象表示为图1的形式.图1表示的服务组合示例图是伴随动态服务组合过程而动态生成的,是一个简单有向图.图中的每个节点表示服务匹配,图中仅列出了接口匹配的情况,其中WSi(i=1,2,…)表示服务,I表示输入接口,O表示输出接口,WSi与WSj之间有节点相连,表示WSi的输出接口与WSj的输入接口匹配.图1是一个简单的示例图,图中含有较少的服务节点和服务边,较容易找到最优的服务组合.但服务组合系统中,有时存在某些复杂组合服务涉及的服务较多,因而节点和边也较多,寻优的复杂度将大幅提高.下面对问题进行抽象,把服务组合优化问题抽象为一个网状图形寻找最佳路径的过程.相关定义如下.定义1.Web服务组合具有多种特性,如顺序性、并发性(并发性的情况在图1中未列出)等.顺序性的各个任务按照一定的执行顺序运行,这样的组合服务在图中可用一条路径表示;并发性表示多个服务并发执行,不能用一条路径来表示,这种情况不利于使用优化算法,因此对这种情况下的组合服务进行串行化处理,使并行的服务前后相连,在逻辑上转换为顺序执行的服务.这种转换不影响实际的服务组合流程,但有利于优化算法的运行.如图2中的并行执行服务,可串行化地表示为图3中的形式.定义2.服务组合图是一个动态生成的单向简单连通图,存在一个原点表示服务组合的输入,存在一个终点,表示服务组合的输出.组合图中不存在孤立点,不存在悬点,除了起点和终点,每个节点的入度与出度均1,且不存在回路.至少存在一条路Page4径从原点通往终点.定义3.服务组合图中的节点表示服务匹配,每条弧表示一个抽象服务(具有某一功能的同一类图4服务组合模拟图图4中Si(i=1,2,…)表示不同的服务,Qi(i=1,2,…)表示不同的QoS属性.根据以上建立的服务组合优化模型,服务组合优化问题就是在以上的动态服务组合图中寻找最长路径(对于数值越低表示组合服务满意度越高的情况,是寻找最短路径).下面就可以进行服务组合优化了.由于基本蚁群算法(为与文中的改进蚁群算法进行区别,把根据蚁群算法原理实现的蚁群优化算法称为基本蚁群算法)存在以下局限性:(1)基本蚁群算法中只有一种信息素,因而无法解决组合服务中多种QoS属性约束的问题.(2)基本蚁群算法在求解时路径和路径权值是稳定的,因而不适用于动态的Web服务组合.(3)蚁群算法主要利用正反馈原理强化较优解,当进化到一定代数后就容易因为较优解的信息量不断强化使得蚂蚁大量聚集于较少的几条路径上,出现早熟、停滞现象,使得到的最优解是局部最优的.针对以上基本蚁群算法的不足,提出了一种改进的蚁群算法,以适应动态服务组合优化问题的动态性及提高算法性能.本文同时实现了基本蚁群算法对服务单一QoS属性约束的优化,用于与MPDACO算法的性服务,有多个具体的候选服务实例,具体的候选服务在图中未画出),从起点到终点的一条路径表示一个完整的组合服务,存在从起点到终点的多条路径时表示有多个不同的组合服务完成相同的功能.定义4.每条弧具有多个QoS属性约束,对应相应服务的QoS,对于每一QoS属性约束,相应的在MDPACO算法中设立一种信息素,MDPACO算法可根据各个单一QoS进行服务组合优化,也可根据QoS总和进行服务组合优化.服务组合模拟图表示如图4.能进行比较.由于篇幅所限,此处不再赘述.4多信息素动态更新蚁群算法(MPDACO)在MPDACO算法中,通过改变蚁群算法中的状态转移概率以及信息素规则等完成以上需求.状态转移概率、信息素规则这两部分在4.1节和4.2节中给出了详细说明和定义.另外本节还包括其它3小节内容,其中动态性设计在4.3节中进行说明,4.4节给出了算法的改进策略,4.5节介绍具体的MPDACO算法,包括MPDACO局部优化算法和MPDACO全局优化算法.4.1状态转移概率在蚁群算法中,蚂蚁以一定的概率选择信息素多的服务,表示这是更优的服务.通过这样的正反馈机制越来越多的蚂蚁会选择更优的服务,在全局范围内也即找到了最优的服务.设m是蚁群中蚂蚁的数量,n表示服务组合图的节点个数,τij(t)为t时刻路径(i,j)上的信息素量,τij(t)决定着状态转移概率的计算.以下分为根据单一QoS进行服务组合优化和根据QoS总和进行服务组合优化两种情况来讨论τij(t)的计算.Page5(1)根据单一QoS进行服务组合优化.根据单一QoS进行服务组合优化时,MD-PACO算法就退变成为了单一信息素的基本蚁群算法,因而信息素τij(t)的计算公式与基本蚁群算法中的定义相同.在基本蚁群算法中τij(t)一般通过单一信息素累加得到.(2)根据QoS总和进行服务组合优化.服务组合优化时,有时需要根据服务的各个QoS综合计算得到最优的组合服务.对应于本文的MPDACO算法,就需要综合多种信息素来计算得到τij(t).设路径(i,j)表示的服务为s,且服务s共包含n个QoS属性值Q1,Q2,…,Qn,对应的转换函数为Q1(s),Q2(s),…,Qn(s),相应的权值为w1,w2,…,wn(参见第3节中QoS计算说明),则服务s第r个QoS属性对应的信息素pheromoner的计算公式为:pheromoner=Qr(s)×wr,r=1,2,…,n;从而,τij(t)的计算公式如下:综合以上(1),(2)得到τij(t)的计算公式.下面进一步得到状态转移概率计算公式:pkij(t)=式中,pkij(t)表示在t时刻第k只蚂蚁由节点i转移到与i有边相连的节点j的状态转移概率,allowedk是所有与i节点有边相连的节点集合.在本文的算法中allowedk是一个动态生成的节点集合,表示蚂蚁k下一步允许选择的服务.α为信息启发式因子,表示轨迹的相对重要性,反映了蚂蚁在运动过程中所积累的信息在蚂蚁运动时所起的作用,其值越大,则该蚂蚁越倾向于选择其它蚂蚁经过的路径,蚂蚁之间协作越强.β为期望启发式因子,表示能见度的相对重要性,反映了蚂蚁在运动过程中启发信息在蚂蚁选择路径中的受重视程度,其值越大,则该状态转移概率越接近贪心规则.ηij(t)为启发函数,若该服务无历史QoS信息则ηij(t)取经验值,以不影响程序的后续运行为原则,如可取ηij(t)=1;否则ηij(t)=∑n其中,dr表示该服务s最新的第r种QoS属性的值.4.2信息素更新规则由于问题规模不同,因而MPDACO局部优化算法与MPDACO全局优化算法的信息素更新规则有所不同.(1)MPDACO局部优化算法的信息素更新规则t+n时刻在节点(i,j)弧段上第r种QoS属性信息素的更新规则如下:Qrij(t+n)=(1-ρ)·Qrij(t)+ρ·ΔQrij(t+n),其中:Qrij(t)表示(i,j)弧段上t时刻时第r种QoS属性Qr的值,ΔQrij(t+n)表示t+n时刻某只蚂蚁新感受到的服务(i,j)的第r种QoS属性Qr的值.ρ表示信息素更新因子,1-ρ表示信息素残留因子,这里ρ表示服务以多大的程度借鉴新体验到的Qr值,1-ρ表示以多大的程度借鉴之前的Qr值.(2)MPDACO全局优化算法的信息素更新规则(i,j)弧段表示服务的第r种QoS对应的信息素更新规则定义如下:pheromonerij(t+n)=(1-ρ)·pheromonerij(t)+其中:Δpheromonerij(t+n)=∑mρ表示信息素挥发因子,1-ρ表示信息素残留因子,为了防止信息的无限积累,ρ的取值范围为ρ[0,1);Δpheromonerij(t+n)表示本次循环中(i,j)弧段表示服务第r种QoS对应信息素的增量,Δpheromonekrij(t+n)表示第k只蚂蚁本次循环中留在(i,j)弧段表示服务第r种QoS对应信息素的增量.由以上的信息素更新规则可以看出,信息素能够根据服务QoS值的变化而进行动态的调整.4.3动态性设计Web服务具有一定的随机性、不稳定性,且服务的QoS属性常常发生变化,因此在服务组合优化过程中就需要考虑服务不可用及QoS变化的情况.对于服务的QoS变化的问题,可以通过改变弧的权值来实现,参见4.2节.而当某服务不可用时,则意味着包含该服务的组合服务都将不可用,这就需要在服务组合图中删除包含该服务的组合服务集合.由于删除组合服务的情况较为复杂,我们通过以下算法来进行服务组合图的动态调整.算法1.服务删除算法.设待删除服务对应的弧为λ,λ的初始节点为a,终止节点为b,设节点a的出度为od(a),节点b的入度为id(b).删除弧λ,则od(a)=od(a)-1,id(b)=id(b)-1.对执行减1操作后的入度od(a)和出度id(b)分情况讨论如下:Page65.结束.1.如果od(a)1,id(b)1,不进行其它操作,跳转到步5;2.如果od(a)1,id(b)=0,表示节点b因为删除弧λ而变成了悬点:删除以节点b为初始节点的所有弧,对删除弧的所有终止节点的入度进行减1操作,考察这些节点,如果存在节点c,id(c)=0,则对c重复操作步2,直到图中所有节点的入度1,然后跳转到步5;3.如果od(a)=0,id(b)1,表示节点a因为删除弧λ而变成了悬点,执行以下操作:删除以节点a为终止节点的所有弧,对删除弧的所有初始节点的出度进行减1操作,考察这些节点,如果存在节点c,od(c)=0,则重复执行步3,直到所有节点的出度1,然后跳转到步5;4.如果od(a)=0,id(b)=0,则重复执行步2,3,再跳转到步5;4.4算法改进策略针对蚁群算法较早收敛于局部最优解、收敛速度慢等缺点,应用以下规则对蚁群算法进行改进以提高其性能.规则1.一轮蚂蚁寻优结束后,比较各条路径对应信息素总和的大小,只对本轮中信息素浓度最大(表示QoS总和最大)的蚂蚁路径进行信息素更新.经测试发现,算法收敛效率和寻找到最优解的概率都大大提高.规则2.为减小算法早熟、停滞及收敛于局部最优解的概率,设定最优路径列表L,设列表的长度为l,l的值可根据问题的规模而定.对每轮蚂蚁寻优中信息素浓度(指本轮新感知到的QoS对应的信息素浓度)最大的蚂蚁路径进行比较,并按大小顺序保存l个最优的(信息素浓度最大)路径到L中,最大的排在L的第一个元素中,依次类推进行排列.在算法到达最大循环次数之后,取L中的第一个元素与信息素浓度最高的路径比较,如果相同,表示本次寻优算法可能收敛于全局最优解,信息素浓度最高的路径表示的服务组合即为最优服务组合;如果不相同,表示算法收敛于局部最优解,信息素浓度最高的路径应与L中的路径进行比较后得到最优路径.按照L中路径由大到小的排列顺序寻找当前可用的、服务QoS最高的组合服务.这里设定最优路径L为一个列表,存放多于一条路径的原因是考虑到服务可能存在不可用,QoS变化等情况.以上算法的改进规则2,能保证只要有一只蚂蚁在一次寻优过程中选择了全局最优路径,就可以使算法找到全局最优解,但如果所有的蚂蚁均未选择最优路径,这种情况下以上算法就无法寻找到最优解.为减少这种情况发生,可在适当的运行时刻判断算法是否正在向局部最优解收敛,如果是则清除局部最优解路径上的信息素值以改变蚂蚁的选路概率,使算法以更大的概率搜索其它路径来寻找最优解.由于篇幅所限,本文着重说明蚁群算法在服务组合中的应用,因此对进一步的算法改进不再做详细论述.4.5MPDACO局部优化算法个候选服务实例,示例图如图5.由定义3,服务组合图中的一个抽象服务有多由图5中看出每两个节点之间有多个候选服务.设图1和图4中每两个节点之间的候选服务为100,则图1中存在1003+2×1004条路径,图2中存在6×1005+5×1006条路径,对这么多条路径进行寻优,将使得寻优问题的规模非常巨大.而随着问题规模的增大,组合优化问题的规模将成指数级增长.实践证明,把大规模的优化问题分解使其减小规模,能大大提高寻优的性能.因而对问题进行转换,通过尽量缩小问题的规模,将大规模的服务选择问题分解成多个子问题进行解决.对每两个节点之间的多个服务先进行一次服务选择,得到最优的服务,这是局部优化问题.之后再按照MPDACO全局优化算法在全局范围寻找最优组合服务.下面首先介绍MPDACO局部优化算法.MPDACO局部优化算法基于蚁群算法原理设计.由于蚁群算法是一种全局优化算法,因而应用于这里的局部优化问题时对算法做了一些改变.算法设计思路:MPDACO局部优化算法只从一个节点开始选择以该节点为初始节点的弧表示的服务(如图5),且每只蚂蚁每轮只进行一次服务选择.这表示优化问题虽然包含的服务数目较多,但规模较小.另外,还由于服务的动态性、服务QoS不明确等因素,对蚁群算法中的状态转移概率选路策略要进行改变:不是先通过计算状态转移概率选择服务,而是先随机选取服务,然后再通过计算状态转移概率来过滤服务,这样可以把QoS不满足要求的服务及QoS值低的服务过滤掉(对应于信息素浓度低的弧),以缩小服务选择空间,提高算法后续运行的效率.Page7算法2.MPDACO局部优化算法.1.设定最大循环次数Ncmax,蚂蚁个数m,最优服务列表Lij,下标i,j对应表示本次服务选择对应的服务组合图中的抽象服务sij,初始化时间片t=0,循环控制变量Nc=0,蚂蚁循环变量k=0;跳转到步5结束;2.循环次数Nc=Nc+1,如果NcNcmax,退出循环,3.蚂蚁数目k=k+1,如果km,退出k循环,跳转到4.随机选取服务,获取蚂蚁调用该服务的QoS属性值Q1,Q2,…,Qn,与各属性限定值q1,q2,…,qn进行比较,如果服务不满足限定条件,则删除该服务,否则计算服务的QoS总和,并与最优服务列表中服务对应的信息素进行比较,使得更优的服务保存在最优服务列表Lij中,删除其它服务(参见4.1节,4.2节中定义);步2;5.对最优服务列表Lij中服务对应的信息素按照局部优化算法信息素更新规则进行信息素的更新;6.对最优服务列表Lij中的服务分别计算状态转移概率,选择最大概率计算结果对应的服务为本次选择的服务.如果服务列表Lij为空,表示该轮服务选择中没有适合要求的服务,表示服务选择失败,应在服务组合图中删除对应的抽象服务.该算法的复杂度是O(Ncmax×m),其中Ncmax为最大循环次数,m为蚂蚁个数.该算法的最大复杂度为O(n),其中n为候选服务个数,O(n)同时表示穷尽计算方法的算法复杂度.文中提出的MPDACO局部优化算法可以在较少次迭代的情况下即获取较优QoS的服务,测试发现性能优于穷尽计算方法.4.6MPDACO全局优化算法在对每类抽象服务进行局部寻优后,进一步在全局内寻找最优的组合服务.算法如下.算法3.MPDACO全局优化算法.1.设定最大循环次数Ncmax,蚂蚁个数m,初始化时间片t=0,循环控制变量Nc=0,蚂蚁循环变量k=0,禁忌表tabuk(k=1,2,…,m),路径表pathk(k=1,2,…,m),最优组合服务列表L等,将蚂蚁放置于服务组合图中的初始节点,令组合图中每条弧对应的各种QoS信息素浓度值τij(t)为由MPDACO局部优化算法所选择服务对应的信息素浓度值,如果没有相应的信息素浓度值时,可令服务对应弧上的信息素τij(t)=const,其中const为常数,const的取值以不影响后续算法运行结果为宜;2.循环次数Nc=Nc+1,如果NcNcmax,退出循环,跳转到步10结束;3.蚂蚁数目k=k+1,如果km,退出k循环,跳转到步8;4.寻找与蚂蚁所在节点相连的路径,根据状态转移概率公式计算转移概率,选择从此节点出发的下一个节点,即选择此节点和下一节点确定的服务;5.修改禁忌表tabuk,将新选择的节点放入禁忌表中;记录蚂蚁调用该服务后获得的各QoS属性值Q1,Q2,…,Qn,并转换为相应的信息素进行表示(见第3节内容),如果发现该服务的状态为不可用,则在服务组合图中对应的删除这一服务(应用服务删除算法);6.如果新选择节点为服务组合图的终点,则此蚂蚁服务选择结束,跳转到步7,否则跳转到步4;7.计算并记录蚂蚁此轮选择组合服务的新增信息素总和,这里的新增信息素总和是各个子服务新增信息素的加总;如果此轮所有蚂蚁选路结束,则跳转到步8,否则跳转到步3;8.比较该轮中所有蚂蚁选择的组合服务的新增信息素总和,取新增信息素总和值最大的服务组合序列,对相应路径上的信息素按照信息素更新规则进行信息素的更新,并把该新增信息素总和值最大的组合服务与最优组合服务列表中的组合服进行比较,如果优于列表中最差的组合服务,则将该组合服务插入到最优组合服务列表中,如果最优组合服务列表已满,则在插入该服务前需先删除最差的组合服务;9.清空禁忌表tabuk,路径表pathk跳转到步2;10.信息素最大路径表示的组合服务与最优组合服务列表L中的组合服务比较,得到最优的组合服务.5仿真实验及性能分析在“平谷旅游服务系统”中对本文中提出的算法进行了应用仿真,该项目提供了一个旅游信息平台,提供的服务包括平谷地区旅游服务信息介绍,宾馆、旅店等服务的预定以及其他信息查询类业务等,提供的网络能力包括GIS、SIP、SMS、MMS等.多种网络能力方便了用户与平台的连接.另外,服务系统还具有服务推荐功能,可以根据用户的要求自动组合服务推荐给用户.示例图如图6、图7所示.图6服务推荐图7组合服务推荐旅游服务推荐系统的建立需要有大量丰富的数据,需要大量的人力物力的投入,在运行的过程中也需要不断实时地更新数据对其进行优化,以向用户提供最优的服务推荐.这在现实的运行过程中,会消耗太多的人力物力,不具可行性.我们充分利用游客对所消费服务的QoS评价,用本文提出的优化算法Page8来优化服务推荐系统.服务推荐系统建立之初有较少量的数据,推荐给用户的服务可能不是最好的,但随着游客的逐渐增多,数据会越来越丰富,推荐的服务也会越来越好,即系统具有学习功能,是一个逐步成长的系统.设一次服务组合推荐的相关信息如下:推荐景点有京东大峡谷、金海湖、老象峰;推荐交通工具有汽车、火车、自驾车;推荐住宿有农家乐、各种宾馆等;推荐饭店有农家乐、各种餐厅等.另外还推荐加油站、医院等.设某组合服务图如图8所示.实际生活中宾馆、饭店、娱乐服务等可能是并行发生的服务,根据文中定义1对这些并行服务进行了串行化处理.图8中的服务同时对应相应的抽象Web服务,每个抽象Web服务同时又对应多个具体的候选服务.下面的实验通过MPDACO局部优化算法和MPDACO全局优化算法相结合进行服务组合优化.首先对每个抽象服务对应的多个候选服务用MPDACO局部优化算法寻找最优解,之后再应用MPDACO全局优化算法进行服务组合的全局优化,其中5.2节中的基本蚁群算法实验是为了与MPDACO算法进行实验结果的对比.5.1MPDACO局部优化算法实验图8中的每项服务都对应多个服务实例,首先通过MDPACO局部优化算法从多个服务实例中寻找最优的服务,为方便描述问题起见,我们设每个服务对应1000和10000两种情况.实验环境及实验数据介绍如下:硬件环境:CPU为IntelPentiumIV2.8GHz,内存为512MB,操作系统为WindowsXP.算法实现工具为VisualC++6.0.实验数据:采用随机生成的模拟Web服务及服务的参数作为测试用例.生成两个测试数据集包含的服务总数分别为1000,10000,每次的测试包含10个不同测试集,通过对10个测试集测试结果的加权平均来评估算法参数,减小误差.实验分为蚂蚁数为5和10两种情况进行测试.由MPDACO局部优化算法性能测试图发现应用该算法在较少迭代次数的情况下就可以取得较高的满意度,比穷尽计算方法有更好的性能.测试分为蚂蚁数为5和10两种情况,从图中看到蚂蚁数为10的性能曲线高于蚂蚁数为5的性能曲线,这是因为蚂蚁数多时一次搜索的路径多,图9中虚线上第200次迭代对应的满意度值有较大跳跃,是因为随机选择了较好的服务,因而性能有明显提高.图9MPDACO局部优化算法性能测试图(服务数=10000)图10MPDACO局部优化算法性能测试图(服务数=1000)通过图10中的结果进行比较,图10中达到最大满意度的迭代次数是60,按蚂蚁数为10的曲线进行计算,计算次数为600,按蚂蚁数为5的曲线计算,计算次数为300,而传统算法的计算次数为1000.5.2基本蚁群算法实验通过5.1节的MDPACO局部优化算法对服务寻优之后,产生的各最优服务QoS参数如图11所示.图11与图8对应,弧上的数字表示服务的各QoS属性值,每个括号中的最后一项都表示服务价格.下面以服务的价格属性为例应用基本蚁群算法进行服务组合优化实验.图11中节点数为12,服务数为17,另外对节点数为40,服务数为100的情况也进行了测试,图未Page9图11MDPACO局部优化算法寻优产生的组合服务QoS数值列出,设定参数α=2,β=2,每轮测试10次,取平均数,结果如图12、图13中实线.图12MPDACO全局优化算法性能测试图(服务数=17)图13MPDACO全局优化算法性能测试图(服务数=100)由图中曲线看出基本蚁群算法的成功率较低,且实验结果不稳定,随着迭代次数的增加成功率曲线没有呈明显的上升趋势,这是因为算法较早的收敛于局部最优解使算法停滞的缘故.5.3MDPACO全局优化算法实验下面对MDPACO全局优化算法进行组合优化实验.由于需要和基本蚁群算法对价格属性优化的结果进行比较,因此在该节的实验中以价格属性进行组合服务优化,而以其它各QoS作为服务过滤条件.本文将在5.4节中应用QoS总和进行服务组合优化,并把结果与一种遗传算法的结果进行比较.如图8,设某一需求对各服务QoS的限制值如下.交通服务:(50,0.8,0.8,20);宾馆服务:(80,80,0.8,40);饮食服务:(80,40);娱乐服务:(90,100);括号中的最后一项都表示服务价格.下面应用MPDACO全局优化算法对以上服务组合进行优化,由于服务的不稳定性,在组合优化的过程中节点(3,4)之间新增加“划船”服务,QoS属性的属性值为(0.9,40),另外还有一些服务的QoS值发生了变化,服务(2,7)宾馆服务的QoS变化为(80,95,0.9,100),服务(5,7)变为(75,40).与5.2的测试对应,分为节点数为12,服务数为17,节点数为40,服务数为100,两种情况进行测试,算法参数α=2,β=2,每轮测试10次,取平均数.性能测试图如图12、图13所示.由性能曲线图发现MPDACO全局优化算法具有较好的性能.另外,随着问题规模的增大,从图中看到为得到最优解所需迭代的次数急剧上升.由于ZGA算法中仅对适应度值给出了性能比较,没有指出适应度值稳定时得到的是否是最优解.MPDACO算法性能优于ACO的原因是MP-DACO设置了各类抽象服务和组合服务的最优服务列表,能根据历史信息选择目前发现的最优服务,避免了ACO中寻优过程的盲目性.从理论角度来分析,这样的设置能使得:如果算法运行时有一只蚂蚁一次发现最优解,则能保证算法最终得到最优解.5.4与其他启发式优化算法的性能比较张成文等人[8]将遗传算法应用于服务选择,通过QoS综合计算结果查找满足条件的服务.采用随机方法生成每个任务所对应的候选服务,范围从15~50,每个服务拥有4个QoS属性值,具体属性值也是分别在一定的取值范围内随机生成[8].为描述方便起见,令张成文等人提出的算法为ZGA算法,本文按照ZGA算法的测试环境进行测试.Page10这里假定文章得到的是最优解.设任务数为10时ZGA算法中的测试图如图14(图14摘自ZGA算法).由于ZGA算法用节点表示服务,而在本文中应用边表示服务,因此对服务关系图进行转换.以下用本文的MDPACO算法对服务选择进行性能测试.应用MPDACO局部优化算法首先对每个抽象服务的候选服务进行寻优,设所有候选服务的服务数均为50,按照最多计算次数50次得到最优服务.由于遗传算法一轮迭代是对所有任务的备选服务之一执行交叉、变异等操作一次,一轮迭代的算法复杂度为O(抽象服务数),因此MPDACO局部优化算法的执行相当于ZGA算法中(图15、图16)遗传算法迭代50次.图15、图16是ZGA算法在种群数为400、交叉率为0.7、变异率为0.1的适应度比较结果.位于上面的线条都是矩阵编码遗传的仿真结果.位于下面的线条都是一维编码遗传算法的仿真结果[8].下面用MPDACO全局优化算法获取图14中的最佳服务组合序列.性能测试图如图17、图18所示.图17MPDACO全局优化算法性能测试图(服务数=10)图18MPDACO全局优化算法性能测试图(服务数=30)从图17看到,在α=2,β=2,蚂蚁数目为5的情况下,在迭代数为6时算法收敛于最优解,MPDACO算法中每只蚂蚁每轮的运算次数任务数,这里按任务数计算,由于蚂蚁数目为5,相当于遗传算法中的5×6=30次迭代.从图15中看到,算法在第100次迭代时达到适应度稳定,30(全局优化算法)+50(局部优化算法)=80<100,性能高于ZGA算法的性能.另外,对于服务数为30的情况,也进行了测试,参见图18,能看出性能也明显优于ZGA算法.6结论及进一步工作本文研究了蚁群算法在服务组合优化系统中的应用,在基本蚁群算法的基础上提出了MDPACO算法,该算法能适应服务组合优化过程中Web服务的动态性、不稳定性以及多种QoS属性限制等问题.MDPACO算法包含两个子算法:一个是MD-PACO全局优化算法;另一个是MDPACO局部优化算法,该MDPACO局部优化算法用于单一功能的多服务选择时具有良好性能,较少的迭代次数下即可以获得较优解.文章最后在一个旅游领域的服务推荐系统中对算法的有效性进行了验证,性能测试结果表明MDPACO较基本蚁群算法以及张成文等应用于服务选择的遗传算法有更高的性能.下一步我们将对蚁群算法的收敛问题给予研究,并进一步寻找制约蚁群算法收敛速度的深层原因以及算法对数据敏感性的规律.另外,还要将蚁群算法与语义网理论相联系进行研究,研究基于语义的蚁群算法,使优化算法更具智能化.
