Page1基于工序集的动态关键路径多产品制造调度算法谢志强1),2)杨静1)周勇2)张大力3)谭光宇4)1)(哈尔滨工程大学计算机科学与技术学院哈尔滨150001)2)(哈尔滨理工大学计算机科学与技术学院哈尔滨150080)4)(哈尔滨理工大学机械动力工程学院哈尔滨150080)3)(卡尔加里大学数学与统计系加拿大)摘要针对已有的树状结构多产品加工和装配综合调度方法,不能兼顾树状结构纵横双向、影响调度结果的问题,提出基于工序集的动态关键路径多产品制造调度算法.该算法首先采用根对齐的方法,将多个树状结构的产品转化成一个虚拟加工树,使多产品调度问题简化为单产品调度问题;在调度过程中,根据虚拟加工树动态生成可调度的备选工序集合,按提出的动态关键路径策略和短用时调度策略从备选集中选择工序,并应用首次适应调度法调度工序,直到备选集合为空,即所有产品加工完毕,实现以纵向为主兼顾横向的双向调度优化.实例证明,算法对多产品加工和装配综合调度问题可以获得更优的解.关键词动态关键路径;虚拟加工树;备选工序集;多产品制造;首次适应调度法1引言在实际生产中,一般产品是由一组存在约束关系的工件按照树状工艺图装配而成,而工件是由一串前后约束的工序组成.所以,产品加工、装配工艺图是树状结构的.当树状结构的产品品种多且数量少,产品加工和装配需要综合考虑时,为了简化调度分析,将加工、装配设备定义为设备统一调度,并统一定义加工、装配为加工.树状结构产品加工和装配综合调度问题,不同于一般产品调度问题:将产品分解成工件,先进行工件的加工,再装配加工好的工件,即加工和装配是分别进行的.加工和装配综合调度是按产品树状结构约束同时进行.为了实现树状结构产品内在加工和装配充分并行,缩短产品加工总时间,文献[1]提出了基于ACPM和BFSM的动态Job-Shop调度算法,该算法虽然为解决多产品加工和装配综合调度提供了较好的解决方案,但该算法注重产品树状结构的纵向———特别是关键路径上工序对调度结果的影响,忽略横向———其它路径上不同设备工序可并行处理;针对这一问题,文献[2]提出了可动态生成具有优先级工序集的动态Job-Shop调度算法,该算法采用层优先、短用时和长路经策略调度工序,重点考虑产品树状结构的横向,在横向层的基础上考虑纵向路经,由于该算法比文献[1]注重其它路径上不同设备工序的并行处理,所以文献[2]提出的算法优于文献[1]的算法(详细情况见实例对比).文献[2]虽然较优,但其重横轻纵的策略不符合树状结构产品调度以纵向为主的机理.于是提出兼顾文献[1-2]优点的基于工序集的动态关键路径多产品制造调度算法,实现更优的以纵为主兼顾横向的调度方案.本文首先根据单个产品树状工艺结构的特点,将产品转换成相应的加工树,按提出的动态关键路径策略和短用时策略调度,分析提出的算法;然后将所要调度的多个产品所对应的加工树以根对齐的方式构造成一棵虚拟加工树,使多产品调度问题转换成单产品调度问题,再用单个产品调度方法进行处理,最后通过实例进行验证比较.2问题描述本文所研究的问题是在满足3个约束条件的前提下使得加工完多个不同树状结构的产品所用的时间尽可能地少.这3个约束条件是:(1)对于每道工序来说,必须等待其所有的前继工序加工完毕后才能处理此道工序;(2)对于每台设备来说,任意时刻只能加工一道工序,且必须满足加工完一道工序后才能加工另一道工序[3];(3)不存在相同设备.由于产品工序的开始加工时间必须等其紧前工序加工完毕,产品加工完毕的时间为各设备完工的最大时间值,所以优化产品完工时间的数学描述为s.t.min(tij)T=min{max{Ei}},tij+1tij+gij,i=1,2,…,M;j=1,2,…,ntxymax(tij+gij)其中,Ei是设备i(i=1,2,…,M)上最后一个工序的完工时间,T是调度优化目标:产品尽早完工;tij为设备i的第j个工序的开始加工时间,min(tij)表示各工序在满足两个不等式约束条件下尽早开始;两个不等式分别表示工序加工的约束条件,tij+1tij+gij表示相同设备上后面工序的开始时间须在前面工序结束后,gij为设备i的第j个工序的连续加工时间;txymax(tij+gij)表示工艺图中后面工序的开始时间须在前面工序结束后,xy工序是ij工序的后续工序.3问题分析3.1加工树模型与工序分类由于单个产品的工艺图呈树状结构,只是边的方向与树相反,这里称之为加工树.加工树上的节点代表工序,有向边表示工序加工次序的偏序关系.其中,叶节点工序为初始时可被加工工序,根节点工序为最后被加工的工序.当根节点工序加工完毕,表明此产品加工完毕.设有产品m个,共包含n个工序.尽管各个产品的加工流程是不相同的,但是它们的工艺图都是树状结构的.在某个工序调度完毕后,剩下的待调度工序的工艺图仍为树状结构[4].若将一个产品看作一个更大的虚拟产品的分枝,则可将多产品虚拟成一个产品,将多产品问题简化成单产品问题.因此,可先对单个产品加工流程进行分析.由加工树和问题的约束条件可知,初始时只能调度某个叶节点工序.当某个节点工序的所有子节点工序全部加工完毕,则此节点工序就转换为叶节点工序.按文献[2]对工序分类:可调度工序是属于某空闲设备的叶节点工序;准可调度工序是属于某Page3非空闲设备的叶节点工序;不可调度工序是所有非叶节点工序;所有可调度工序和准可调工序的工序集为备选工序集;若满足pijpik,且无pim在pij与pik之间,则称pik为pij的直接后继工序.3.2调度策略设计与分析设n1,n2,…,nr为加工树上的节点,n1为叶节点,nr为根节点,ni+1是ni的父节点,加工r个节点工序需要时间为t1,t2,…,tr,则此节点序列表示的路径长度为T=∑r设加工树上有w个叶节点,路径r1,r2,…,rw的长度分别为T1,T2,…,Tw.若路径rm的路径长度Tm=max{T1,T2,…,Tw},则由文献[1]知,路径rm为关键路径.由于关键路径是任务图中加工时间最长的路径,所以关键路径工序的有效调度将在很大程度上影响产品加工时间.虽然文献[1]提出的拟关键路径法在调度过程中优先调度关键路径上的工序,但是由于从产品加工树只能先调度叶节点工序,剩下的待调度工序加工流程仍为树状结构,当优先调度关键路径上的工序后,剩余加工树的关键路径可能发生变化[5],如果始终坚持产品开始加工时确定的关键路径调度,不能保证总是优先调度变化了的关键路径上的工序.另外,由于工序是从备选集合中调度的,所以很可能出现多个可调度工序同时争夺一台设备的情况.假设在某一时刻有k个工序争夺设备,则将这些工序调度到设备上的排列一共有k!种,从而使总的加工时间有k!种.为了确定唯一的被调度工序,文献[2]提出了层优先、短用时和长路经调度策略,该策略虽然比文献[1]兼顾产品树状结构具有纵横双向的特点,考虑了纵横双向调度优化,但由于以横向为主,忽略纵向(特别是关键路径)对调度结果的主要影响.为此,本文提出了动态关键路径、短用时和首次适应调度策略.在将可调度工序和准可调度工序加入备选工序集以后,具体应用调度工序策略的顺序是:首先,用动态关键路径策略选出调度工序,在动态关键路径策略不能唯一确定调度工序的情况下再应用短用时策略,对选择的工序应用首次适应调度策略确定加工时间.本文提出的调度策略具体描述和分析如下.3.2.1动态关键路径策略关键路径对调度结果有重要影响,而剩余产品的关键路径随调度变化调整,为了充分、实时地发挥、体现关键路径作用,提出了动态关键路径法.动态关键路径法的基本思想是每次工序调度前,先计算出新的关键路径,选择新计算出的关键路径上的叶节点工序调度.计算新的关键路径就是比较剩余产品各路径的长度,路径长的为新关键路径.动态关键路径法不仅充分、实时地发挥、体现关键路径对调度结果有重要影响,而且由于每次调度都选择加工时间最长路径上的工序,不仅兼顾工序横向间的联系,而且从两个方面考虑增加工序的并行处理:(1)横向不同设备上的工序是可并行加工的;(2)被调度工序的后继工序有较多的机会与其它工序并行加工.产品总的加工时间取决于并行加工的时间,并行加工的时间越长,总的加工时间就会缩短,反之,就会增加[6-8].为什么按上面第(2)点动态选择长路径上的工序,被调度工序的后继工序有较多的机会与其它工序并行加工?原因是:设工序pij路径长度为Tj,工序pik路径长度为Tk,Tj<Tk.若先调度pij,则剩余未调度的工序并行加工的时间便取决于Tj;先调度pij较之先调度pik会导致剩余工序并行加工时间缩短,从而使整个加工时间增加.所以,为了增加并行加工的时间,对于可调度工序pi1,pi2,…,pim,应该首先调度路径长度最大的工序.通过以上分析,说明动态关键路径策略既考虑到关键路径变化的动态性,又考虑到调度优化对并行加工的充分要求,因此,该策略不仅比文献[1]的拟关键路径法灵活,而且比文献[2]更注重长路径对调度结果的影响.3.2.2短用时策略若存在可调度工序pi1,pi2,…,pim,用时分别为ti1,ti2,…,tim,它们所在的路径长度相同,都为Ti.设pij∈{pi1,pi2,…,pim},tij=min{ti1,ti2,…,tim},p1ij为pij的直接后继工序.由于pij的用时最少,优先调度它有3个明显的优点:(1)调度完pij,可以使其后继工序p1ij获得比较早的被加工时间[9-10];(2)对于集合{pi1,pi2,…,pim}-{pij}中的工序来说,也可以比较早获得设备Mi,从而使其后继的工序也能够较早被加工,这样就可以缩短总的加工时间;(3)可以充分利用那些较小的空闲时段,尽量做到使设备忙.综合以上分析,当工序具有相同的路径长度时应该调度用时少的工序.3.2.3首次适应调度策略由问题描述中优化产品完工时间的数学描述知:为了实现min{max{Ei}},需要在满足tij+1Page4tij+gij和txymax(tij+gij)的条件下实现min(tij).为了实现min(tij),使各工序在满足两个不等式约束条件下尽早开始,在工序所在加工设备上选择最早适合加工的空隙加工此工序,即在加工设备上从前向后寻找第1个适合该工序加工的空隙.这就是首次适应调度策略.3.3虚拟加工树对于产品集合{P1,P2,…,Pi,…,Pm},将每个产品的加工树作为一棵更大树的根子树,这棵更大的树为虚拟加工树.虚拟加工树是采取将产品树根对齐的方式构造,每个产品加工树的根作为虚拟根节点的儿子节点.因为虚拟加工树也是树状结构,且包含所有待加工的产品,满足单个产品的性质,所以采用虚拟加工树就可以将多个产品的问题简化成为单个产品的问题,完全可以应用以上提出的调度策略调度虚拟加工树上的工序.4算法设计针对多产品制造调度问题设计算法如下:1.对各个产品按工序约束构造加工工艺树.2.构造虚拟加工树.3.根据虚拟加工树将可调度工序和准可调度工序加入备选工序集.若备选工序集为空,则说明所有工序加工完毕,这时转到第6步.4.根据动态关键路径策略从备选工序集中选取路径最长的可调度工序.若工序唯一,则选取此工序,若工序不唯一,则选取用时最少的工序.5.应用首次适应调度法调度所选择的工序,然后从加工树上删除此节点,从备选工序集中删除此工序,转到第3步.6.结束.算法流程图如图1所示.5算法复杂度分析设产品数是m,总工序数是n(不包含虚拟根节点),设备数是M,则虚拟加工树上有n+1个节点,算法主要有如下操作:1.构造虚拟加工树.将m个产品转换成相应的加工树,需要根据工序的约束条件,查找各工序紧前或紧后工序,最坏情况是每个工序都与其它工序比较,n个工序最多比较n(n-1)次;添加虚拟的根节点,需要建立m个产品根节点与虚拟根节点的联系,需要补充m+1工序的紧前或紧后说明.所以构造虚拟加工树最多比较或补充工序关系n(n-1)+(m+1)次,由于1mn,将多产品构造成虚拟加工树的复杂度为O(n2).2.工序调度次序.初始时,备选工序集中至少有m个工序,最多有n个工序.最坏的情况是初始时备选工序集中有n个工序,调度第1个工序需要比较路径长度和工序用时2(n-1)次,调度第2个工序需要比较2(n-2)次,当备选工序集中只剩下2个工序的时候只需比较2次.因此,确定全部工序调度次序需要的比较次数为2[(n-1)+(n-2)+…+2+1]=(2n(n-1))/2=n(n-1),即确定全部工序调度次序的复杂度为O(n2).3.应用首次适应调度法调度工序.n个工序在M台设备上加工,平均每台设备上加工n/M个工序.每个工序在满足约束条件下,寻找设备上首次适合该工序加工的空隙.由于n/M个工序最多有n/M个空隙,每个工序最多比较n/M次,全部工序最多比较n(n/M)次,即应用首次适应调度法确定全部工序开始加工时间的复杂度为O(n2).由上述分析可知,算法的时间复杂度为以上各部分复杂度的和,所以算法的时间复杂度为O(n2),即算法的复杂度不超过二次多项式.Page56实例对比为了方便评估算法性能,设有产品加工工艺图如图2所示,该工艺图可以看成是一个产品的,也可以看成是由3个产品虚拟而成的.图2中长方框表示工序,里面的数字分别为产品工序名/加工设备名/工序加工时间.工序1为根节点工序,加工设备有4台,加工时间的数字对应有多少时间单位.下面分别用文献[1]中算法①基于ACPM和BFSM的动态Job-Shop调度算法、文献[2]中算法②可动态生成具有优先级工序集的动态Job-Shop调度算法和本文提出的算法③基于工序集的动态关键路径多产品制造调度算法3种方法对图2产品调度,通过对比调度甘特图,说明算法的特点.算法①基于ACPM和BFSM的动态Job-Shop调度算法,通过比较各叶节点所在路径长度(工序11:60、工序17:105、工序13:75、工序14:110、工序18:150、工序19:70、工序16:65),路径最长工序序列(18、15、8、3、1)为关键路径,按文献[1]中拟关键路径法(ACPM)调度各工序次序是:18、15、14、8、9、3、17、12、6、13、7、11、5、2、16、10、4、1,按算法①调度的甘特图如图3所示.图中纵坐标表示设备,横坐标表示时间;长方框表示工序,框中数字表示工序名,框的长度按工序时间比例确定(下同).算法②可动态生成具有优先级工序集的动态Job-Shop调度算法,由于该算法采用层优先、短用时和长路径的调度策略,优先调度层数最大的工序,如本例中工序17和工序18;如果同层工序不唯一,优先调度用时少的工序,如本例中优先调度工序17;如果同层工序存在用时相同,优先调度路径长的工序,如本例中工序14和工序16,优先调度工序14.于是,按文献[2]中的调度策略调度各工序次序是:17、18、11、13、15、12、14、16、10、6、9、5、7、8、2、4、3、1,按算法②调度的甘特图如图4所示.算法③基于工序集的动态关键路径多产品制造调度算法,由于本文提出的算法采用动态关键路径和短用时策略,需要比较各工序到根节点的路径长度,按从长到短的次序调度,本例中工序18的路径最长(150),所以优先调度工序18;如果存在路径长度相同的工序优先调度用时少的工序,如本例中工序12和工序16的路径长度都是65,采用了短用时策略,优先调度工序12.于是,按本文提出的算法调度各工序次序是:18、14、15、17、8、13、9、12、16、11、7、5、3、6、10、4、2、1,算法③调度的甘特图如图5所示.由图3、图4和图5可知,算法①的加工时间是200,算法②的加工时间是190,算法③的加工时间是175.说明本文提出的算法③在不增加算法复杂性的前提下,加工时间是最短的.算法③之所以在3个算法中加工时间最短,一是因为算法③采用的动态关键路径法,比算法②更充分地发挥关键路径对调度结果有重要影响的作用,例如关键路径上的工序3,在图5中的位置比图4中提前,所以算法③比算法②加工时间短;二是因为Page6算法③采用的动态关键路径法,比算法①兼顾工序横向间的联系,使不同设备上的工序有较多的机会并行加工,例如非关键路径上的工序4,在图5中的位置比图3中提前,所以算法③比算法①加工时间短.由于算法③兼顾了算法①和算法②优点,所以本文提出的算法③更优.7结论由于基于工序集的动态关键路径多产品制造调度算法在调度工序的过程中动态地生成备选工序集,选择被调度的工序是在较小的集合上完成的,因此效率比较高.而且,除非工序被调度到设备上,工序是不会被调出备选工序集的,因此算法能够避免操作系统中的抖动问题;将多个产品的加工树虚拟成一个虚拟产品的虚拟加工工艺树,简化了多产品调度问题;采取动态关键路径和短用时策略,在不提高算法复杂度的情况下,实现加工和装配综合调度的树状结构产品纵横双向调度优化,缩短产品加工时间.因此本文提出的算法对于解决多产品加工问题更优.另外,由于本文提出算法的动态处理方法,可对进一步研究动态多产品加工问题提供良好的基础.所以该算法具有一定的理论和实用价值.
