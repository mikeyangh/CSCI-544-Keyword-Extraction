Page1面向服务的物联网软件体系结构设计与模型检测陈海明崔莉(中国科学院计算技术研究所北京100190)摘要物联网软件体系结构用于定义物联网应用系统的构件模型和交互拓扑,是构建支持水平互联、异构集成、资源共享和动态维护的物联网应用系统的基础.面向服务的软件体系结构(ServiceOrientedArchitecture,SOA)是目前构建各类物联网应用系统最常用的风格,国内外研究人员已经提出了多种面向服务以“物端”为中心的物联网软件体系结构参考模型.该文对这些参考模型进行了比较分析,指出了它们基于的软件构件类型、采用的设计原则及具有的结构属性的不同,说明了这些参考模型适用于指导不同规模和不同应用需求的物联网应用系统的构建,并且分析了基于软件体系结构的物联网应用系统的形式化建模与模型检测方法.最后,指出了未来为建立基于软件体系结构的物联网应用系统开发方法还需要开展的研究工作.关键词物联网;面向服务;软件体系结构;参考模型;模型检测1引言随着传感技术、通信技术与嵌入式计算技术的发展,物理空间中越来越多的物品具有了感知执行(简称为感执)、信息处理、数据存储和通信等能力,使得它们不仅能够标识自身相关的属性信息,而且还能采集所处环境的物理信息,有些还能执行一定的命令对物理环境进行操作,这样的物品被称为智能物品(SmartObject)[1].智能物品能够基于现有的通信基础设施(一般指互联网)并与之互联起来,形成动态的松耦合系统,此被称为物联网(InternetofThings,IoT[2]).物联网不仅可以使物理空间中的物品之间可进行信息交换,还可以使它们与信息空间中的计算资源、社会空间中的用户进行融合计算[3],进而实现用户对物品的精确识别、定位与跟踪,以及对物理世界的实时监控和智能管理.因此,物联网系统也被认为是建立在互联网之上,融合了物理空间、信息空间和社会空间(简称为三元空间)的叠加网络(OverlayNetwork),它是互联网技术的应用拓展[4].需要指出的是,目前对于三元空间融合计算方面的研究,除了本文关注的物联网以外,还有其他类图1物联网系统的组成架构①从图1可以看出,物联网系统的组成具有以下显著特点:(1)物端的智能物品、智能设备和局域智能系统一般由各行业的用户专门建立,采用不同的似的概念,比如信息物理融合系统(Cyber-PhysicalSystem,CPS)[5]、信息物理社会系统(Cyber-Physical-SocialSystem,CPSS)[6]、社会物联网(SocialInternetofThings,SIoT)[7].这些概念所指的系统虽然在设计目标和研究内容上各有侧重,比如CPS的设计目标侧重于对物理空间中的低概率事件做出实时响应和控制,CPSS的设计目标侧重于将人类社会的信息与物理世界和网络空间中的信息融合起来进行处理,SIoT的设计目标是对物品建立类似于人类社会的社交网络.但是,从系统组成和系统功能目标而言,IoT与CPS、CPSS、SIoT是一样的,都是将三元空间中的物理和信息资源通过网络连接起来进行融合处理,最终达到人机物的协同工作,以提高人类社会生产和生活的信息化与智能化水平.因此,本文将不严格区分这些概念,都将其理解为物联网系统.物联网系统的组成架构如图1所示,其中,智能物品、智能设备及局域智能系统与物理世界直接进行交互,构成了物联网系统的“物端”(也被称为“前端”[8]);提供计算、存储和其他资源的云计算平台对来自物端的感知数据进行融合处理和智能分析,并做出执行控制,构成物联网系统的“云端”(也被称为“后端”[8]);连接物端和云端的通信基础设施构成了物联网系统的“网端”.①①ITUInternetReport2005:TheInternetofThings.7thPage3通信协议和数据格式,相互孤立;(2)云端的计算、存储和信息处理平台与物端感知、执行设备在性能和功能上具有很大的差异性.基于这样的系统组成部件,设计与实现各种物联网应用系统(如智慧交通、智慧城市、智慧环保等)[9]将需要首先考虑物端的智能物品、智能设备和局域智能系统之间以及与云端计算、存储和信息处理平台之间的水平互联问题;其次考虑这些部件之间的异构集成问题;此外为降低物联网应用系统的建设成本,提高物联网应用系统组成部件的利用率,还需要考虑资源共享问题,资源共享即云端计算平台和物端感执设备上可以建立多个不同功能的软件模块,并且每个软件模块可以被多个不同的应用共享使用;为适应多应用共享的场景,还需要考虑部件功能的动态维护问题,部件功能的动态维护即云端计算平台或物端感执设备上的软件模块的功能可以根据用户需求进行更新或根据应用场景自动进行调整.从软件开发者角度来看,上述总结中,设计与实现各种物联网应用系统的问题可以归结为:如何根据应用需求将“物端”和“云端”资源提供的能力抽象为统一类型的软件构件,并定义这些构件之间的交互拓扑,建立实现物端与云端互联与互操作的统一的物联网软件体系结构,用于指导各种支持水平互联、异构集成、资源共享和动态维护的物联网应用系统的构建,同时提高物联网软件构件的可复用性和可维护性,并降低物联网应用系统的开发与维护成本.可见,物联网软件体系结构用于定义物联网应用系统的构件模型和交互拓扑,是构建支持水平互联、异构集成、资源共享和动态维护的物联网应用系统的基础.采用不同的构件类型,定义不同的交互拓扑会导致不同的物联网系统属性,包括功能和非功能属性(如水平性、自适应性、互操作性等),从而形成不同风格的物联网软件体系结构.SOA(ServiceOrientedArchitecture)是为实现不同应用系统间互联互通、解决信息孤岛等问题提出的一种灵活的并独立于具体实现平台的软件体系结构风格①.SOA中的服务是指具有自描述性(Self-describing)和支持快速、低成本分布式应用程序集成的软件模块,一般由服务提供者作为开放组件部署在可以通过网络访问的平台上.基于SOA建立的软件系统具有以下属性[10]:(1)通过服务屏蔽资源的差异性;(2)同一资源可以提供不同的服务;(3)每个服务可被多个不同的应用重用;(4)各个服务可以根据应用需求或应用场景的变化分别更新或自动调节其功能.因此,目前提出的物联网应用系统的设计方法主要基于SOA,即将现有的分布在互联网边缘的、属于不同用户、具有不同感知和执行能力的智能物品、智能设备及局域智能系统与云计算平台提供的信息采集、处理、存储和分析等能力都统一抽象为服务,将它们作为软件构件按照应用需求交互集成起来,实现物端与云端的互联与互操作,从而构成松耦合、分布式协同工作的物联网应用系统[11].为便于区分,本文将“云端”中的资源提供的服务称为云服务(CloudService),将“物端”智能物品提供的服务称为实体服务(EntityService),包括物理实体服务(PhysicalEntityService)和虚拟实体服务(VirtualEntityService).其中实体服务是指在单个物端资源上实现的软件模块,如某点的温度感知模块.虚拟实体服务是指由多个物理实体服务与云服务组合后得到的服务,如感知某个区域的平均温度,它是由区域内多个温度感知节点提供的物理实体服务与计算平均值的云服务组合而成的软件模块.下面首先介绍两类基于面向服务的软件体系结构构建的物联网应用系统,分别是以“云端”为中心的物联网应用系统和以“物端”为中心的物联网应用系统,同时给出了本文把以“物端”为中心的物联网应用系统作为研究对象的理由;接着,从构件类型、设计原则和结构属性三个方面,对目前已经提出的多种面向服务以“物端”为中心的物联网软件体系结构参考模型进行比较分析;然后,分析基于软件体系结构的物联网应用系统形式化建模和模型检测的方法;最后,对未来基于软件体系结构的物联网应用系统的设计与实现方法的研究进行展望.2面向服务的物联网应用系统基于图1所示的物联网系统架构,根据物联网应用系统中物理实体服务实现的不同功能,可以将目前采用面向服务的方法建立的物联网系统分为以下两类:(1)以“云端”为中心的物联网应用系统,(2)以“物端”为中心的物联网应用系统.2.1以“云端”为中心的物联网应用系统在以“云端”为中心的物联网应用系统中,物理实体服务实现基本的物理信息采集、本地的信息处理和向云端传输信息的功能,但不对外提供可直接①http://www.ibm.com/developerworks/cn/architecture/Page4访问的服务接口,至于物理信息的海量存储、关系处理和知识挖掘等功能都在云端实现.早期的典型系统如EPCglobal①(早期的版本为美国麻省理工学院AutoID实验室发布的networkedRFID系统②)和日本东京大学Sakamura-Koshizuka实验室提出的uID系统[12].这两个系统也是物联网在发展初期的代表,它们都是基于自动识别技术并采用相似的系统架构建立的,即由终端设备(或称为阅读器)采集物品的标识信息,并通过网络将标识信息传输到系统的后端.后端提供物品信息服务,即根据物品标识查找对应的信息服务,对物品信息进行相应的处理.类似的系统还有EPCNetwork[13]和SmartObjectSystem[14].随着传感技术的发展,终端设备不仅可以采集物品的标识信息,还可以采集其他物品的属性信息和环境物理量信息,并将信息直接或借助物联网网关[15-17]传输到云端进行统一存储和处理,并以服务形式提供给用户和软件开发者[18],软件开发者基于这些位于云端的服务构建物联网应用系统.例如,WInternet[19]将感知数据和数据感知等方法封装成Internet之上的服务(称为Netlet),通过Netlet之间的互联实现物联网应用系统的构建;群智感知(也被称为参与式感知、机会感知)[20]也属于这类物联网应用系统,它将用户携带的具有传感器的智能移动终端作为前端感知设备,这些设备有意识或无意识地采集数据,并将数据进行一定的本地处理后传输到云端进行深度分析,以实现城市环境、交通状况、群体活动等社会感知应用系统.对于软件开发者来说,构建这类系统的主要挑战在于如何建立一个支持海量物品信息管理和数据处理的后端云服务平台.目前已经建立的云平台主要有Xively③(最初的名字为Pachub[21])和Aneka[22].Xively提供了支持物联网应用系统开发的公共云平台服务,主要包括数据存取服务和设备管理服务.Aneka[22]是一个将Google、Amazon和Azure等公共云平台和私有云平台结合起来建立的混合式云平台,它为开发以云端为中心的物联网应用系统提供了数据分析、可视化、计算和存储的服务.为提高这些云服务的智能性,Lin等人[23]将来自物理世界的数据以本体和语义服务的形式提供给物联网软件开发者;SenaaA[24]也采用本体和语义服务的形式将来自不同类型的传感数据转化为云端具有一定领域知识表达能力的数据服务,并与云端的感知服务连接起来,从而对物理对象的动态事件进行处理、推理和反馈,并采用基于语义的访问策略保证整个物联网应用系统的安全;Elci等人[25]将系统中的每个物理实体抽象为自治语义智能体(AutonomousSemanticAgent,ASA),并在云端以语义Web服务的形式实现ASA,其中一个ASA为Facilitator智能体,用于管理系统内智能体间的互联拓扑等.2.2以“物端”为中心的物联网应用系统近年来在IPSO④等组织的推动下,资源受限的智能物品和感知节点能够通过IP协议,如uIP[26]和IPv6/6LowPAN[27]接入互联网成为网络空间中可以被直接寻址的设备.其中uIP是IPv4协议在感知节点上的实现版本,6LowPAN是在低功耗低速率的个域网协议(IEEE802.15.4)之上实现IPv6协议的适配层协议,用于对IPv6报文进行拆分和组合、报头压缩、地址映射等.基于uIP或IPv6/6LowPAN协议,软件开发者可以在每个感知节点或网关节点上建立可以被直接访问的物理实体服务,其实现形式一般为可以被远程调用的分布式对象、具有与环境自主交互能力的智能体、SOAP风格的Web服务和REST风格的Web服务.这些物理实体服务可以被用户或软件开发者直接调用以获取物理感知信息或操作物理环境,也可以根据应用需求与后端的数据分析服务、可视化服务等云服务组合起来,逐级建立虚拟实体服务,最终建立物联网应用系统.从以上对两类物联网应用系统的介绍可以看出,当开发者采用面向服务的软件体系结构设计以“云端”为中心的物联网应用系统时,其将实体资源抽象为物理信息源,相应地将物理实体服务的功能定义为采集、处理和传输物理信息,并在云端建立存储、分析和可视化物理信息的服务.构建这类物联网应用系统的主要工作是将云端的这些服务按照应用需求组合起来,不涉及对物理实体服务的操作.因此,面向服务以“云端”为中心的物联网应用系统的软件体系结构与现有的云计算系统一样.但是,在以“物端”为中心的物联网应用系统中,物理实体提供实现物理信息采集、本地信息处理和局部信息分析等功能的服务接口,并能够与提供信息处理、信息可视化等功能的云服务相组合.考虑到物理实体服务具有一些与云服务不同的特性(见第3.1节),以及这些特性将给云服务与实体服务之间的互联与互操作带来一定的影响,软件开发者在采用SOA构建①②③④Page5这类物联网应用系统时,需要重新设计物联网应用系统的软件体系结构参考模型(或称为软件架构).因此,本文把以“物端”为中心的物联网应用系统作为研究对象,对面向服务的物联网应用系统的设计与实现方法进行深入分析.为便于论述,下文中提到的物联网系统默指为面向服务以“物端”为中心的物联网应用系统.3面向服务的物联网软件体系结构设计软件开发者采用面向服务的软件体系结构设计物联网系统,将物端和云端资源提供的数据获取和处理等功能都统一抽象为服务,可以屏蔽位于物理空间中的实体资源和位于信息空间中计算资源的异构性,但是无法屏蔽不同物理实体资源提供的服务的异构性,以及物理实体服务本身具有的一些特有性质,比如与物理世界的交互性、资源受限性、动态性和不完整性.物理实体服务的这些特性给面向服务的物联网系统设计与实现带来了新的挑战.下面对物联网实体服务具有的特性进行分析.3.1物联网实体服务的特性(1)异构性.在传统的互联网环境中,云服务分为基础设施(InfrastructureasaService,IaaS)、平台(PlatformasaService,PaaS)和软件(SoftwareasaService,SaaS)这3种服务[28],每种服务都遵循统一的规则进行设计和实现;而对于物联网系统来讲,包含的智能物品来自不同区域、不同领域、不同时期建立的物理感知和执行系统,因此这些智能物品提供的服务语义、数据格式及服务质量(如不同的采样速率、精确度和空间分辨率等)会有所不同,这使得选择多个合适的服务来协同完成一个任务的过程变得比较复杂.(2)大规模性.在传统的互联网环境中,计算、存储和信息处理等服务大多由专业的服务提供商来开发和部署,因此服务的规模有限.而在物联网系统中,具有感知或执行能力的智能物品都可以作为服务提供者.随着智能物品的数量不断增加,将使得物联网系统中可以提供服务的资源规模不断扩大,这将给服务命名、查找与管理带来新的挑战,而且大规模服务之间的交互也将极大地增加每个智能物品的计算时间、存储容量和能量消耗.(3)与物理世界的交互性.在传统的互联网环境中,提供的服务一般具有数据或业务流程处理能力,以及服务与服务之间或服务与用户之间的交互能力,但是这些服务没有与物理世界的交互能力.而在物联网系统中,智能物品除了可以提供基础的数据采集、处理和传输服务,还可以产生一定的动作与物理世界进行交互.由于不同的需求对同一执行器可能会产生相互冲突的执行动作请求,因此调用物联网中与物理世界交互的服务会受到更多的约束.(4)资源受限性.在传统的互联网环境中,服务一般被部署在高性能的计算平台中,因此在构建应用系统时一般不需要考虑所采用的服务是否已经被其他应用共享,是否还有足够的资源来支持新发起的服务请求.而在物联网系统中,智能物品的计算能力、存储容量和能量供给都十分有限,因此将智能物品提供的服务和互联网中的服务组合起来构建物联网系统时需要考虑这些资源的受限性,以保证系统的可用性.(5)动态性.在传统的互联网环境中,服务一般被部署在固定的计算平台上,而且服务具有一定的稳定性,即服务在其生命期内始终有效,除非遇到平台故障等特殊情况.而在物联网系统中,智能物品提供的服务会因移动和休眠等原因而失效,从而导致服务的有效性在空间和时间上是动态变化的,且不易被获知,因此提高了在物联网系统中发现和管理服务的难度.(6)不完整性.在传统的互联网环境中,开发人员一般会在构建系统之前检查所需的服务是否存在,如果不存在的话,会提前部署,以保证服务的完整性.而对物联网系统而言,在动态的环境中无法准确判断每一个所需的服务是否存在,因此会出现想要获取的服务不存在的现象,比如构建的物联网系统用于监测某个区域的平均温度时,需要区域内各个地点和时间的温度感知服务,以及计算平均值的云服务,这时无法保证所有地点和时间的温度感知服务都存在,因此需要采用估计或即时加载的方法来解决服务不完整带来的问题.从以上对实体服务的特殊性分析可以看出,基于面向服务的软件设计与实现方法,将实体服务与云服务组合起来构建物联网系统,会面临很大的挑战,不仅要考虑实体服务的异构、大规模性,还要考虑实体服务与物理世界的交互性以及资源的受限性给实体服务共享带来的约束,并且还要考虑实体服务的动态性和不完整性给系统运行时带来的服务缺Page6失问题.因此,在物联网系统的设计阶段,软件开发者需要建立符合这些特性的物联网软件体系结构参考模型,以精确定义物联网系统的组成结构和逻辑功能.下面对目前已经建立的面向服务的物联网软件体系结构参考模型进行比较分析.3.2面向服务的物联网软件体系结构参考模型软件体系结构的参考模型是从不同视角(Per-spective)对软件系统的组成进行抽象,用具有精确语义的标记符号或形式语言对软件系统中的构件、连接件以及期望属性和行为进行精确规格说明(Specification)的图形化或形式化模型[29].最早由Kruchten提出的“4+1”模型[30]指出了从5个不同的视角建立软件体系结构参考模型的视图(View),即功能视图(即逻辑视图)、开发视图、过程视图、物理视图和场景视图.近年来,欧盟和美国等地区和国家的科研人员基于面向服务的设计方法,提出了多种构建物联网系统的软件体系结构参考模型.我们根据这些物联网软件体系结构参考模型基于的基础软件构件的类型不同,将它们分为以下4类来进行分析:(1)基于可被远程调用的分布式对象的物联网软件体系结构参考模型;(2)基于具有自主环境交互能力的智能体(Agent)的物联网软件体系结构参考模型;(3)基于SOAP风格的Web服务的物联网软件体系结构参考模型;(4)基于REST风格的Web服务的物联网软件体系结构参考模型.为易于理解,本小节所比较的各种物联网软件体系结构参考模型是以功能视图为抽象视角采用图形化规格说明方法建立的.3.2.1基于分布式对象的物联网软件体系结构参Physicalnet[31]是由美国佛吉尼亚大学的研究人员提出的一种基于轻量级分布式对象的物联网体系结构,它的参考模型如图2所示.底层的两个构件分别代表由感知设备直接提供的服务和由网关节点采集转发的服务,这两个构件在软件部署时位于物联网系统的物端;其之上的构件包括服务解析、服务仓库、访问权限表和需求表,这些构件位于物联网系统的云端,负责管理感知设备和网关提供的服务,并且实现多个应用程序在同一资源上或跨网络和管理域并发运行;最上层的构件提供编程抽象管理服务,以屏蔽底层细节,便于物联网应用系统的软件开发者编程.3CoFramework[32]是由美国内布拉斯加林肯大学的研究人员提出的一种基于分层组件(Component)的物联网软件体系结构,它的参考模型如图3所示.它按照组件提供的服务的抽象层次,将构建物联网系统的软件组件分为以下4层:数据层、信息层、知识层和表达层.其中数据层组件位于物端,提供分布式关系数据和空间数据;信息层组件提供专业领域信息;知识层组件提供数据分析和分险估计等服务;表达层组件提供数据显示和用户操作界面等服务,它们都位于云端.以上4层中分别位于物端和云端的组件在协调器(Coordinator)的管理下,通过连接件(Connector)连接起来,从而构成一个物联网系统.3Tiers[33]将后端的云服务与前端的物理实体服务结合起来,提出了一种由环境层、服务层和控制层组成的3层信息物理融合系统软件体系结构,它的参考模型如图4所示.环境层中的物理组件是由感知器和执行器提供的服务;服务层中的云服务组件是由传统的云计算等平台提供的服务;控制层中的Page7组件实现以下功能:(1)监视环境层和服务层提供的服务,(2)组件动态查找和服务组合,(3)组件接口适配与变异,(4)服务失效自主管理.3.2.2基于智能体的物联网软件体系结构参考模型在上述基于分布式对象建立的物联网软件体系结构中,位于物端的服务组件,即Physicalnet中的感知服务组件和网关服务组件、3CoFramework中的数据层服务组件、3Tiers中的物理组件,提供了采集物理数据和与物理世界进行交互的服务.但是这些服务不构成独立的可执行的物联网系统,而需要由用户调用或与云服务结合起来才能完成相关任务的执行.考虑到物联网系统可以由多个局域智能系统或具有自主环境交互能力的智能物品互联组成,而局域智能系统和智能物品与智能体(Agent)具有十分相符的特性,具体表现在以下几点:(1)自主性(Autonomous).在没有用户使用或与云端服务互联的情况下,能够独立地执行相关任务;(2)互动性(Interactive).能够与其他局域智能系统或智能物品进行交互,以完成自己的任务或协助其他局域智能系统或智能物品完成任务;(3)反应性(Reactive).能够根据周围环境的变化及时地做出反应;(4)主动性(Proactive).不仅能够被动式地对环境的改变做出反应,还能够根据目标自发性地采取一些预知式行为.为此,目前已有相关工作提出了几种以智能体为物端构件的物联网软件体系结构,它们将物理实体服务定义为可以执行用户指定任务并且能够通过与周围环境的自主交互完成部分任务的软件实体,多个智能体之间可以通过网络进行互联与交互,实现物联网的分布式计算模型.CSO(CooperatingSmartObject)[34]是由意大利卡拉布里亚大学的研究人员提出的一种以智能体为物端构件的物联网软件体系结构,它将无线感知与执行网络(WirelessSensorandActuatorNetwork,WSAN)抽象为智能体,WSAN中的节点作为智能体的感知和执行部件,汇聚节点或网关作为智能体的协调者(Coordinator),提供与外界其他智能体、用户和环境进行交互的接口.每个WSAN智能体在没有用户干涉的情况下可以自主执行一定的任务,也能够根据用户的任务输入与系统内的其他WSAN智能体进行互联与协作,从而构建完整的物联网系统.图5给出了CSO体系结构的参考模型.SmartProducts①定义的智能体是对具有异构信息源的智能产品的抽象,主要模块包括先验知识模块(ProactiveKnowledgeModule)和推理模块(ReasonerModule).先验知识模块是智能体的数据模块,为推理模块提供各种实现本体推理的数据,包含的数据模型有元数据模型(MetaModel)、时间模型(TimeModel)、用户模型(UserModel)、情境模型(ContextModel)和领域模型(DomainModel).推理模块是智能体的核心模块,它基于先验知识模块进行本体推理,实现情境感知的自主服务.Smart-Products以发布/订阅(Publish/Subscribe)的模式提供服务接口.采用与CSO类似的体系结构将SmartProducts集成起来可以构建基于智能体的物联网系统.PMDA[35]也是一种基于智能体的物联网软件体系结构,它的参考模型如图6所示.与CSO和SmartProducts不同的是它所定义的智能体包含3个模块,分别是物理模型(PhysicalModel)、感执模型(SensorExecutionModel)和应用模型(Application),其中物理模型是智能体的数据来源与动作执行单元,感执模型实现数据处理、知识推理和决策执行的①FinalVersionoftheConceptualFrameworkVersion1.0.Page8功能,应用模型提供解析应用需求的接口.PMDA的云端主要包括需求规划、模型发现和模型组合3个构件,其中需求规划提供了应用需求的总体规划描述和解析接口,模型发现用于查找满足应用需求的智能体,模型组合将发现的物端智能体和云端智能体组合起来构建满足需求的物联网系统.随着万维网(WorldWideWeb)技术的发展,感知和执行设备可以被嵌入Web服务[36-38],通过HTTP等协议为用户提供实时的数据服务,并与互联网环境中现有的其他Web服务组合起来,构成一个基于Web服务的物联网系统,被称为WoT(WebofThings)[39].由于目前实现Web服务的架构风格有两种,即SOAP和REST,目前这类物联网系统的软件体系结构可以分为两种:一种是基于SOAP风格的Web服务的物联网软件体系结构;另一种是基于REST风格的Web服务的物联网软件体系结构.3.2.3基于SOAP风格的Web服务的物联网软SenseWeb[40]是微软研究院的研究人员针对传感器网络的演进式部署模式而设计的一种基于SOAP风格的Web服务的物联网软件体系结构,它的参考模型如图7所示.SenseWeb将不同种类、不同接入方式、不同数据公开性和安全性的感知节点通过感知网关(SenseGateway)或移动代理(MobileProxy)抽象为提供统一访问接口(即Web服务访问接口,WS-API)的感知服务,通过协调器(Coordi-nator),包括感知数据库(SenseDB)和任务调度模块(TaskingModule)选择应用所需的感知服务,并通过转换器(Transformer)对感知数据进行处理和显示,最终提供结构化数据给不同的应用使用.可见,SenseWeb中的感知网关和移动代理作为物联网系统的物端服务构件,协调器、转换器作为物联网系统的云端服务构件.SWE(SensorWebEnablement)[41]是开放地理空间信息联盟(OGC)为建立地理空间网(GeospatialWeb)而设计的一种基于Web服务的软件体系结构,它的参考模型与SenseWeb类似,将物端的传感器和传感器网络抽象为提供统一访问接口的Web服务,并将服务分为4类,即观察服务、警告服务、规划服务和提醒服务.在这些服务模块之上,定义了类似于SenseWeb中的协调器和转换器模块,以实现快速发现传感器与感知服务的机制、访问感知服务的标准方法、订阅感知任务和发送警告的机制以及配置传感器参数的方法.SSW(SemanticSensorWeb)[42]对SWE进行了扩展,将观测数据抽象为具有准确描述语义的本体,并让协调器具有本体推论的能力,以增强物联网系统的应用级表达.DPWS(DeviceProfileforWebService)[43]是由德国WS4D项目组为使资源受限的设备间提供安全的Web服务而提出的软件体系结构,它的参考模型结构与基于SOAP风格的Web服务基本一致,但在数据表示、服务描述、服务发现、消息传输等方面根据嵌入式设备的资源受限性进行了修改,其中最显著的一个修改是DPWS可以直接用UDP协议传输消息.SOCRADES[44]是以DPWS为基础提出的一种将提供Web服务的设备与企业应用平台(如ERP)集成的软件体系结构.该体系结构参考模型中的物端构件即设备层服务,主要是通过DPWS提供的服务,云端构件包括设备管理与监测、服务发现、服务生命周期管理、跨层服务目录和安全支持等与设备管理相关的服务模块,还有业务逻辑处理监测、业务连接、虚拟化等与跨应用集成相关的服务模块,这些云端构件组成了系统的中间件服务层,在此之上建立企业Page9应用层,实现设备与企业应用平台集成的应用系统.3.2.4基于REST风格的Web服务的物联网软件基于SOAP风格的Web服务的软件体系结构允许开发者定义个性化的服务接口,这增加了系统开发的自由度,但也增加了服务描述、服务发现与服务集成的难度.考虑到前端感知设备的资源受限性等因素,近年来物联网中的物理实体服务更多的是采用REST风格[45]来实现的.REST风格的Web服务采用HTTP协议,基于标准化的操作方法,降低了服务的实现难度,而且结合了其他互联网标准技术,如URI、HTML、XML等,可以提高服务的互操作能力.目前,已有科研人员在嵌入式感知设备上实现了REST风格的Web服务,如TinyREST[46]和pREST[47],并且IETFCoRE工作组正在为资源受限的设备上建立REST风格的Web服务制定统一的轻量级数据传输协议标准,包括CoAP[48]和EBHTTP[49].这些工作使得采用基于REST风格的Web服务将位于云端和物端资源互联起来构建物联网系统成为目前最广泛采用的方法.PhysicalMashups[50]是由瑞士苏黎世联邦理工大学的研究人员提出的一种以REST风格的Web服务为基础的物联网软件体系结构,它的参考模型如图8所示.可见,物端的构件是在智能网关上建立的轻量级Web服务,即将各类感知器提供的数据进行缓存和格式转换,以PULL/PUSH形式提供的Web服务;云端的构件主要包括事件中心(EventHub)和物理聚合(PhysicalMashups)两个模块,其中事件中心将汇聚由网关Web服务触发的事件,并分发给对应的应用,物理聚合模块将智能网关的Web服务与云端的Web服务聚合起来以快速建立用户自定义的应用.此外,各应用也可以直接访问由智能网关提供的Web服务.M2M[51]是欧洲电信标准组织(ETSI)正在制定的一个关于非智能终端设备通过移动通信网络与其他智能终端设备(IntelligenceTerminal,IT)或系统进行通信的标准体系结构.基于M2M建立的物联网系统的软件体系结构参考模型如图9所示,它将扩展了M2M服务能力层的应用程序作为软件构件,即在具有存储模块的设备、网关和网络域中部署M2M服务能力层(ServiceCapacityLayer,SCL).设备和网关中的应用程序通过dIa接口访问SCL,网络域中的应用程序通过mIa接口访问SCL,设备/网关与网络域中的SCL交互由mId接口实现.这些接口的定义基于REST风格,因此我们可以将扩展了SCL的应用程序看作是REST风格的Web服务(资源),并且它们是通过URI来命名与访问的,并且基于资源的特殊属性采用字符串模式匹配算法来进行资源发现的.SENSEI[52]是在欧盟第7框架项目支持下建立的将分布在全球的传感器与执行器网络(WS&AN)连接起来的物联网软件体系结构,它的参考模型如图10所示,它使WS&AN通过开放的服务访问接口与相应的语义规范来提供统一的获取环境信息以及与物理世界进行交互的服务.SENSEI中的构件按照它们的角色、功能粒度和抽象层次可分为3层:通信服务层、资源层与应用层.通信服务层中的构件将现有网络基础设施的服务,如地址解析、流量模型、数据传输模式与移动管理等,映射为一个统一的接口,为资源层提供统一的网络通信服务;资源层中的构件包括真实物理世界的资源模型、资源目录、基于语义的资源查询与解析、资源发现、资源聚合、资源创建和执行管理等模块,为应用层与物理世界资源之间的交互提供统一的接口;应用层中的构件为用户及第3方服务提供者提供统一的接口.Page10IoT-A[53]也是在欧盟第7框架项目支持下建立的实现局域物联系统(IntranetofThings)之间的水平互联和互操作的物联网软件体系结构,它的参考模型如图11所示.需要指出的是,在文献[54]中给出的IoT-A体系结构参考模型包括4个视图,即功能视图、信息视图、部署视图和操作视图,图11给出的是IoT-A的功能视图.与SENSEI一样,IoT-A将采用不同感知和通信技术的局域物联系统抽象为提供统一服务的物联网资源模型,并将构件按照它们的角色、功能粒度和抽象层次分为若干层,包括设备连接与服务层、资源层、虚拟实体层、流程执行与服务组合层,以及应用层.与SENSEI不一样的是:(1)IoT-A不是将资源模型作为构建物联网系统的基本组件,而是在资源模型之上建立虚拟实体服务,并且通过服务解析、动态映射和服务组合等模块,为物联网系统的构建提供更加高层的抽象接口;(2)IoT-A是以业务流程(BusinessProcess)的形式规划应用需求,而SENSEI是以指定需求资源和处表1面向服务的物联网软件体系结构参考模型的设计原则与结构属性比较物理实体服务节点&网关节点&网关节点&网关节点&网关节点&网关物联网系统的基础软件构件类型分布式对象智能体SOAP风格的Web服务REST风格的Web服务注:物理实体服务的特性:(1)异构性;(2)大规模性;(3)与物理世界的交互性;(4)资源受限性;(5)动态性;(6)不完整性.理树(ProcessingTree)的方式创建应用.这些不同使得IoT-A比SENSEI具有更高的灵活性和更广泛的适用性.3.3面向服务的物联网软件体系结构参考模型比较分析上述基于4种不同类型的软件构件设计的物联网软件体系结构参考模型为我们未来采用面向服务的架构(SOA)构建物联网系统提供了很好的参考.但是,由于这些参考模型的设计原则不同,即考虑的物理实体服务的特性和提供者不同,所以它们具有不同的结构属性.表1给出了对这些参考模型的设计原则与结构属性进行比较的结果.设计原则包括以下两个方面:提供者网关节点网关节点节点网关节点网关网关Page11(1)考虑的物理实体服务的特性不同.物理实体服务在上述的软件体系结构参考模型中具有不同的名字,如在Physicalnet中被称为感知服务和网关服务,在3CoFramework中被称为数据层服务组件,在3Tiers中被称为物理组件.除了名字不同外,这些参考模型在设计时所考虑的物理实体服务的主要特性也不同.Physicalnet主要考虑了物理实体服务的异构性和资源受限性,因此将感知设备具有的不同服务以统一的接口提供给软件开发者和用户,并通过访问权限表等服务控制多个应用在同一物理资源上并发运行;3CoFramework不仅考虑了物理实体服务的异构性,还考虑了它们的大规模性和不完整性,因此设计了专门的连接器和协调器来完成不同层次的服务的互联;3Tiers除了考虑了物理实体服务的异构性外,还主要考虑了它们与物理世界的交互性、动态性和不完整性,因此它设计了物理组件监测、物理组件配置和服务失效管理等来实现物理实体服务的管理.同样的道理,我们可以知道,其他几个参考模型的设计也都考虑了物理实体服务的异构性,并且CSO和SmartProducts还主要考虑了物理实体服务与物理世界的交互性.PMDA主要考虑了物理实体服务的大规模性、与物理世界的交互性和不完整性.基于SOAP的Web服务和基于REST的Web服务都考虑了物理实体服务的异构性和大规模性,但是只有DPWS和SOCRADES还考虑了物理实体服务的资源受限性,只有SENSEI和IoT-A考虑了物理实体服务的动态性,只有SOCRADES和PhysicalMashups考虑了物理实体服务的不完整性.(2)考虑的物理实体服务的提供者不同.以上分析的物联网软件体系结构参考模型中,有些由资源受限的感知节点直接提供物理实体服务,有些由资源相对比较丰富的网关提供物理实体服务,有些可以由节点或网关提供物理实体服务.具体来讲:Physicalnet、3CoFramework、3Tiers、SenseWeb和SWE/SSW认为应该将物理实体服务部署在感知节点或网关上;CSO、PMDA、PhysicalMashups、SENSEI和IoT-A认为只能将物理实体服务部署在网关上;SmartProducts、DPWS、SOCRADES和M2M则认为将物理实体服务智能部署在感知节点上.考虑的物理实体服务的特性和提供者不同,这些物联网软件体系结构的参考模型所具有的结构属性也不同,具体表现在以下几个方面:(1)协同工作模式.上述软件体系结构参考模型中,由于3CoFramework、3Tiers、PMDA、SOCRADES和PhysicalMashups考虑了物理实体服务的不完整性,因此包含云端数据处理服务,并支持云端服务与物理实体服务之间的互联与互操作,适用于复杂物理信息感知和知识提取的物联网系统的构建;相反,Physicalnet、CSO、SmartProducts、SenseWeb、SWE/SSW、DPWS、M2M、SENSEI和IoT-A没有考虑物理实体服务的不完整性,因此不包含云端数据处理服务,只支持物端的物理实体服务之间的互联,适用于无需对物理信息进行复杂处理和智能分析的物联网系统的构建,不能构成真正的云端和物端协同工作的物联网系统.(2)服务发现方式.上述软件体系结构参考模型中,Physicalnet和PhysicalMashups考虑以集中式目录或注册中心的方式来组织管理物端和云端的服务,因此采用目录查找的方式就可以发现服务,不需要专门的服务发现模块.其他参考模型都含有服务发现模块,以实现物端和云端服务的分布式管理与发现.(3)服务组合方式.将相关的物理实体服务以及云服务,按照一定的业务流程组合起来是构建物联网系统最为关键的一步.这一步骤可以采用人为指定服务间关系的方式来静态实现(简称为静态组合),也可以采用专门的组合服务模块来动态实现(简称为动态组合).在上述软件体系结构参考模型中,Physicalnet、CSO、SmartProducts、SenseWeb、SWE/SSW、DPWS、M2M采用前一种方式实现服务组合,或者没有考虑服务组合;3CoFramework、3Tiers、PMDA、SOCRADES和PhysicalMashups考虑采用后一种方式实现物理实体服务和云服务的组合;SENSEI和IoT-A考虑采用后一种方式实现多个物理实体服务的组合.(4)应用需求描述方式.应用需求是软件开发者或用户对物联网系统需要实现功能的精确描述,通过应用需求模块对软件开发者或用户提出的应用需求进行解析.在上述物联网软件体系结构参考模型中,只有3Tiers和M2M没有考虑这个模块,其他参考模型中都将这一模块作为物联网系统提供给软件开发者或用户的接口,比如Physicalnet的编程抽象模型、3CoFramework的表达层服务组件、CSO的输入输出组件、PMDA的需求规划组件、SENSEI的感执任务创建组件和IoT-A的业务流程处理组件等.根据这些参考模型提供的应用需求描述接口的抽象层次不同,可以将它们分为编程抽象和业务流抽象两种类型.从这些物联网软件体系结构参考模型所具有的不同的结构属性可以看出,它们适用于指导不同规模、不同应用需求的物联网应用系统的构建.软件开Page12发者可以参照表1给出的比较结构,根据所要构建的物联网应用系统的规模、物理实体服务的特点和用户需求的抽象层次,选择合适的物联网软件体系结构参考模型.比如,在3种基于分布式对象建立的物联网软件体系结构参考模型中,由于3CoFramework支持云端和物端服务之间的协同工作模式,采用分布式服务发现和动态服务的组合方式,并且采用基于业务流的需求描述方式,因此它比其他两种物联网软件体系结构参考模型更加适用于指导系统规模较大、用户需求易变化的物联网应用系统的开发.4基于软件体系结构的物联网系统模型检测在以上对物联网软件体系结构的属性分析中,我们采用图形化规格说明方法给出了各软件体系结构参考模型的功能视图,即用方框表示物联网软件的构件,用连线表示构件之间的连接关系.参照这些图形化的物联网软件体系结构模型,我们可以开发实现各个软件模块,定义软件模块的接口,最终建立可运行的物联网系统.为了在物联网系统最终建立之前验证所设计的系统是否达到用户预期的质量目标,一般需要建立物联网软件体系结构的形式化模型,并采用以下两种方法对基于软件体系结构实现的物联网系统的性质进行验证:(1)基于软件体系结构的模型检测(ModelChecking)[55],即利用测试准则(如路径覆盖准则)定义的测试需求,生成测试用例,基于形式化模型,对关联构件、连接件的所有端口行为和约束进行测试.(2)基于软件体系结构的形式化推理(FormalReasoning),即采用定理证明的基本思想,基于形式化模型,通过公理或推理规则进行推断与分析.验证的物联网系统的性质一般包括结构性、功能性和非功能性3个方面.结构性是指保证所有接口应该是连接的,数据流、控制流和命令应该都是可达的,且在并发时应该保证无死锁的发生;功能性包括正确性、互操作性和安全性;非功能性包括可靠性、可用性、有效性、可维护性和可移植性等.目前常采用基于软件体系结构的模型检测方法对物联网系统的性质进行验证.为此,我们需要采用专门的软件体系结构形式化描述语言,如Wright[56]、ACME[57]、UML[58-59]、xADL[60-61]和AADL[62-63]等,对物联网软件体系结构进行建模,并用基本的形式化描述语言扩展这些语言的动态语义,如基于谓词逻辑的语言(如Z、VDM)[64]、基于抽象代数的语言(如OBJ、CLEAR)[65]、基于时序逻辑的语言(如PCTL、CTL)[66]、基于过程代数的语言(如FSP、CSP、CCS)[67]、基于网络的描述方法(如PetriNet、ActorNetwork)[67]和基于自动机的描述方法(如TimeAutomata)[67],将物联网软件体系结构参考模型转换为具有精确动态语义的低层次形式化模型.以采用对应的模型检测工具,如UPPAAL[68]、PAT[69]、LTSA[70]和PHAVer[71]等,对物联网系统的性质进行验证.从上一节中给出的各种物联网软件体系结构参考模型中可以看出,物联网系统中的基础软件构件包括物端的物理实体服务和云端的云服务.由于物理实体服务的行为具有连续特性,而云服务的行为具有离散特性,因此无法将只具有离散特性的互联网软件的形式化建模与模型检测方法应用于物联网系统的形式化建模与模型检测.为此,目前提出了以下两种方法:(1)统一集成建模与模型检测.即在建立物理实体服务的形式化模型时将其离散化,以使物联网的物端和云端构件采用相同的形式化工具进行建模;(2)异构集成建模与模型检测.物端和云端两部分构件的建模采用不同的形式化语言,使得最终基于物联网软件体系结构参考模型建立的物联网系统形式化模型是异构模型的集成.下面对这两种方法相关的研究工作进行分析.4.1统一集成建模和模型检测在表1中给出的14种面向服务的物联网软件体系结构参考模型中,目前只有对基于3CoFramework和PMDA建立的物联网系统在结构性方面的性质进行了模型检测,并且它们都采用统一集成建模与模型检测的方法.3CoFramework采用体系结构描述语言xSADL建立系统的静态模型,并用基于过程代数的形式化语言FSP描述组件的功能和动态行为.简要来讲,xSADL用三元组(Declared_message_set,Declared_signature_set,Provided_service_set)来描述3CoFramework中的各层组件,其中Declared_message_set和Declared_signature_set分别定义组件之间传递的消息类型和接口,Provided_service_set采用FSP定义组件的行为.以国家农业决策支持系统(NADSS)为例,其中地图服务(MAP)和标准降雨量指数服务(SPI)分别是常用的云端和物端组件,这两个组件用xSADL建立的模型分别如图12和图13所示.将这两个组件组合连接起来建立新的组件(SPIMAP服务)被称为连接组件,也用xSADL进行建模,建立的模型如图14所示.Page13Declared_message_set:siteInfo=(siteid:string,site_x:float,site_y:float,site_sites=sequence(siteInfo);mapContent=sequence(short);mapGenerateError=(reason:string);Declared_signature_set:MapGenerate(inputsites,outputmapContent)throwmapGenerateError;Provided_service_set:MapService=MapGenerate.sites->checkSites-Avaible->图12xSADL定义的云端组件(地图服务)模型[32]Declared_message_set:siteInfo=(siteid:string,site_x:float,site_y:sites=sequence(siteInfo);spiContent=sequence(float);spiGenerateError=(reason:string);Declared_signature_set:SPITempInfo(inputsites,outputspiContent)throwspiGenerateError;Provided_service_set:SPIService=SPITempInfo.sites->getSitesRawdata->spiGeneration->(SPITempInfo.spiContent->SPIService|SPITempInfo.spiGenerateError->SPIService).图13xSADL定义的物端组件(SPI服务)模型[32]Declared_message_set:siteInfo=(siteid:string,site_x:float,site_y:float,site_value:sites=sequence(siteInfo);mapContent=sequence(short);mapGenerateError=(reason:string);spiGenerateError=(reason:string);Declared_signature_set:SPITempInfoMapGeneration(inputsites,outputmapContent)throw(spiGenerateError,mapGenerateError);Provided_service_set:SPIMapService=SPITempInfoMapGeneration.sites->(SPITempInfoMapGeneration.mapContent->SPIMapService|SPITempInfoMapGeneration.spiGenerateError->SPIMapService|SPITempInfoMapGeneration.mapGenerateError->SPIMapService);Required_service_set:MapService=MapGenerate.sites->checkSites-Avaible->SPIService=SPITempInfo.sites->getSitesRawdata->spiGeneration->(SPITempInfo.spiContent->SPIService|SPITempInfo.spiGenerateError->SPIService);Glue_set:GLUE=(SPIMapService.SPITempInfoMapGeneration.sites->SPIService.SPITempInfo.sites->GLUE|SPIService.SPITempInfo.spiContent->MapService.MapGenerate.sites->GLUE|MapService.MapGenerate.mapContent->SPIMapServce.SPITempInfoMapGeneration.mapContent->GLUE).图14xSADL定义的连接组件(SPIMAP服务)模型[32]基于以上用xSADL建立的形式化模型,在文献[32]中作者用模型检测工具LTSA验证基于3CoFramework建立的物联网系统的并发性、完备性和正确性.PMDA采用体系结构描述语言Wright对PMDA进行了形式化建模,其中由物理模型(PM)、感知执行模型(SEM)和应用模型(AM)交互连接组成的软件构件(IoTCON)的模型如图15所示.ConfigurationIoTCONModelAMPortPreqs()=send_ereq->PreqsModelSEMPortPrdi_req()=recv_ereq->judge_ereq->Prdi_reqPortPsen_phy()=sense_data->Psen_phyPortPexe_phy()=gen_exeinfo->send_exeinfo->Pexe_phyModelPMPortPact_exe()=recv_con->Pact_exePortPobj_phy()=pro_phy->Pobj_phyConnectorREQ-RDIRoleRreqs()=send_ereq->RreqsRoleRrdi_req()=recv_ereq->judge_ereq->Rrdi_reqGlue=Rreqs‖Rrdi_reqConnectorOBJ-SENRoleRsen_phy()=sense_data->Rsen_phyRoleRobj_phy()=pro_phy->Robj_phyGlue=Robj_phy‖Rsen_phyConnectorEXE-ACTRoleRexe_phy()=gen_exeinfo->send_exeinfo->Rexe_phyRoleRact_exe()=recv_con->Ract_exeGlue=Rexe_phy‖Ract_exeInstancesIam:AMIsem:SEMIpm:PMIreq-rdi:REQ-RDIIobj-sen:OBJ-SENIexe-act:EXE-ACTAttachmentsIam.PreqsasIreq-rdi.RreqsIsem.Prdi_reqasIreq-rdi.Rrdi_reqIsem.Psen_phyasIobj-sen.Rsen_phyIsem.Pexe_phyasIexe-act.Rexe_phyIpm.Pact_exeasIexe-act.Ract_exeIpm.Pobj_phyasIobj-sen.Robj_phyEndIoTCON图15Wright定义的PMDA软件构件模型[35]基于以上用Wright建立的形式化软件构件模型,通过模型检测工具PAT验证了基于PMDA构建的物联网系统的有效性,即不存在死锁、发散和中止这3个性质.此外,中国科学院和北京大学的研究人员[72]对类似于Physicalnet的物联网软件体系结构参考模型(在文献[72]中称之为服务框架)采用时间自动机(TimeAutomata)对物理环境和物联网服务进行建模,刻画出物理环境和物联网服务行为的时间属性Page14和时间约束,在此基础上将物理环境和物联网服务一起建模为时间自动机网络,并采用UPPAAL模型检测工具验证了物联网服务的时效正确性.4.2异构集成建模和模型检测以上研究工作都采用已有的、相同的体系结构描述语言对物联网软件体系结构中的两部分基础构件(物端的物理实体服务和云端的云服务)进行建模,并且采用已有的模型检测工具实现基于软件体系结构的物联网系统的性质验证.可见,这种基于统一集成建模的物联网系统模型检测方法易于实现,但是由于物理实体服务的行为具有连续性,而云服务的行为具有离散性,因此它们将无法准确地反映物理实体服务的动态行为特性,从而对物联网系统整体的验证结果的准确度造成一定的影响.以下研究工作将考虑这两部分模型的异构性,对现有的建模方法和模型检测工具进行改进,以提高基于软件体系结构的物联网系统模型检测的准确度.由于物联网系统与信息物理融合系统(CPS)中的计算进程与物理进程具有相同的异构集成特性[73],因此下面将通过介绍目前针对CPS提出的形式化建模与模型检测方法,来分析未来基于软件体系结构的物联网应用系统建模与模型检测方法.美国范德比尔特大学的研究人员[74]采用不同的建模方法建立了CPS的物理环境、物理系统(硬件平台)、计算平台(软件平台)和应用软件的模型,并提出了一种基于语义集成的建模方法和语言EsMoL,以模拟和分析在特定硬件平台和软件平台上实现的应用软件与物理环境之间的动态交互性.美国密苏里科技大学的研究人员[75]将能够模拟物理基础设施的领域专用模拟器和支持决策控制和并行计算的模拟器连接起来,建立一个统一的CPS模型检测工具,并以智慧水利系统为例,将EPANET、Matlab和ns2分别作为该系统物理部分、信息处理部分和信息传输部分的模型建立工具.美国卡内基梅隆大学的研究人员[76]基于ACME提出一种CPS模型检测的方法.该方法从信息空间、物理空间以及信息与物理空间之间的接口3个方面,对原有的软件体系结构描述语言ACME进行了扩展.扩展后ACME可以描述的信息空间部分的构件包括数据存储构件、计算构件、输入输出接口构件以及两种连接件,即调用-返回连接件和发布-订阅连接件;物理空间部分的构件包括能量源构件、能量存储构件、能量传导构件以及3种连接件,即电流、共享变量和测量;信息与物理空间之间的接口部分包括P2C(Physical-to-Cyber)连接件和C2P(Cyber-to-Physical)连接件.这些构件和连接件用于描述CPS的组成,另外采用FSP和LHA来描述CPS的行为,用LTSA和PHAVer来进行模型检测,并在ACMEStudio[77]中扩展了这些构件和连接件的描述工具以及模型检测工具.美国卡内基梅隆大学的这些研究人员[78]进一步分析了CPS基于异构模型的体系结构建模方法,提出了一种基于体系结构视图(ArchitectureView)的多领域建模方法.该方法先建立异构体系结构模型,然后通过异构模型与视图之间的关系(RV视图与基础体系结构之间关系(RV结构模型统一映射到基础体系结构(BaseArchitec-ture).这些研究人员还对异构体系结构视图与基础体系结构之间的结构一致性进行了精确的定义,并给出了一种基于类型图匹配的结构一致性评价方法,以保证CPS软件体系结构建模方法的准确性[79].此外,由美国加州伯克利大学的研究人员创建的CPS体系结构建模与模型检测集成平台Ptolemy采用角色模型(Actor)以分层的形式将信息空间部分和物理空间部分的异构模型集成起来.Lanese等人[82]为准确刻画物联网的特性,通过感知器、执行器和计算进程之间交互向用户提供有用的服务,以及节点之间通信的局部性,提出了一种新的基于进程演算(ProcessCalculus)的物联网系统建模语言IoT-calculus.4.3物理环境建模和模型检测从以上对信息物理融合系统与物联网系统的异构模型集成建模方法的介绍中可以看到,要想根据物联网软件体系结构对物联网系统进行模型检测,需要建立的形式化模型除了有物理空间部分的构件(物理实体服务)和信息空间部分的构件(云服务)外,还有物理环境.虽然物理环境不是物联网软件体系结构中的一个构件,但它是驱动模型检测的基础,因为物理实体服务之间、物理实体服务与云服务之间,以及云服务之间的交互行为都是由物理环境的变化引起的.因此,目前也有研究人员对物理环境的形式化建模方法进行了专门的研究.对物理环境的建模主要是采用结构化或形式化语言描述物理环境的时间和空间属性.可以采用的形式化语言也包括基于时序逻辑的语言(如PCTL、CTL)、基于过程代数的语言(如FSP、CSP、CCS)、基于网络的描述方法(如PetriNet、ActorNetwork)和基于自动机的描述方法(如TimeAutomata)等几种类型.例如,在健康监护应用系统ACPS[83]中,对Page15物理环境建模主要是通过特征提取和数据挖掘技术从多层感知数据中获得整个环境中出现的任何异常事件(如跌倒或受伤事件等),并采用OWL语言对这些异常事件的出现时间和地点进行精确描述.Tan等人[84]不仅考虑了物理环境中的事件,而且还考虑了系统内的其他事件,包括物理观察事件、感知事件、信息物理融合事件和信息空间事件,同时采用一个三元组对事件进行描述,分别表示事件的发生事件、地点和属性,其中属性是指事件发生的条件.在文献[85]中,这些研究人员对事件模型进行了改进,通过类型、内部属性和外部属性来描述事件,其中内部属性是指事件的发生的时间、地点和条件,外部属性是指观察者监测到事件的时间和地点,并提出了一种基于概念格(ConceptLattice)的事件建模方法,以支持物理事件的组合.基于该方法建立的事件模型既适用于系统性质的离线分析,还可以作为运行时实现模型.Jin等人[86]提出了一个可以描述具有复杂时空特性的事件的表达语言OPS4ST(OncePubSubforSpatialTemporalevents),该语言可以描述13种空间相关操作和6种时间相关操作,主要用于描述订阅服务的规则,与匹配算法相结合,将相关的时间推送给相应的应用程序.参考以上这些关于CPS计算进程、物理进程和物理环境异构集成建模方法对基于软件体系结构的物联网系统进行形式化建模与模型检测,不仅能够考虑物端构件和云端构件的异构性,还能够考虑物端构件的不可靠互联性、移动性,以及与环境的紧耦合性,从而提高对物联网系统的性质进行模型检测的准确度.需要指出的是,为更好地支持物联网软件体系结构的集成建模和模型检测,需要对现有的建模方法和模型检测工具在异构应用支持、物理环境建模支持、规模可扩展性支持、移动性支持,以及与现有模型检测工具的集成这几个方面进行改进.5总结与展望至此,我们对目前物联网系统设计阶段的相关工作的研究进展,即物联网软件体系结构的设计,以及基于软件体系结构的物联网系统模型检测,进行了详细的分析.总结来讲,为构建支持水平互联、异构集成、资源共享和动态维护的物联网系统,同时提高物联网软件构件的可复用性和可维护性,并降低物联网应用系统的开发与维护成本,目前构建物联网系统常用面向服务的软件体系结构风格.本文以“物端”为中心的物联网系统为研究对象,对目前已经提出的4类面向服务的物联网软件体系参考模型进行了比较分析,指出了这些参考模型基于的不同的软件构件类型、采用的不同设计原则及具有的不同的结构属性,因此适用于指导不同规模和不同应用需求的物联网应用系统的构建.为检测基于软件体系结构实现的物联网系统在结构性、功能性和非功能性方面是否满足开发者或用户的预期要求,需要对这些物联网体系结构参考模型进行形式化建模.本文给出了3CoFramework和PMDA的统一集成建模方法和模型检测结果,同时指出可以参考CPS的形式化建模方法,对这些物联网软件体系结构中的物理实体服务、云服务和物理环境进行异构集成建模,以使模型检测结果更加精准.未来研究人员还可以建立基于软件体系结构的物联网系统开发方法(ArchitectureBasedDevelop-ment①)[87-89],即将软件体系结构引入到物联网系统开发的各个阶段,建立全生命周期软件体系结构视图,包括需求分析阶段的需求视图、体系设计阶段的设计视图、组装阶段的实现视图、部署阶段的部署视图、维护与演化阶段的运行视图作为软件系统开发的蓝图,利用工具支持的自动转换机制缩小从高层设计到实现的距离,而后在构件运行平台(物联网中间件)的支持下实现软件构件的自动组装和系统代码的直接生成.具体来讲,为建立基于体系结构的物联网系统开发方法,未来还需要开展以下研究工作.(1)综合各类物联网应用的需求特性,形成统一的物联网软件体系结构,采用经过扩展的软件体系结构建模方法和模型检测工具对基于统一的物联网软件体系结构建立的物联网系统的性质进行验证,确保最终实现的物联网系统满足开发者或用户的共性质量要求.(2)将物联网软件体系结构引入到物联网系统开发的各个阶段,尤其是物联网系统的实现阶段,依据经过模型检测的物联网软件体系结构,以统一的服务实现架构建立物端和云端构件,并建立支持物联网系统开发的物端和云端中间件,形成基于软件体系结构的物联网系统开发方法.(3)对建立的物联网软件体系结构进行求精,为物联网系统的实现提供更细粒度的属性和特征定义,从而降低构建物联网系统的复杂度,缩小从高层①基于体系结构的开发(ArchitectureBasedDevelopment)也Page16设计到代码实现的距离,并对物联网软件体系结构进行支持演化的扩展设计,以适应物联网用户需求的动态变化性,降低物联网系统的维护成本.
