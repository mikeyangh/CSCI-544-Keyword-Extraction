Page1一种云存储环境下的安全存储系统薛矛1)薛巍1),2)舒继武1),2)刘洋2)1)(清华大学计算机科学与技术系北京100084)2)(清华大学信息科学与技术国家实验室北京100084)摘要如今,数据越来越多地被选择存放在云存储环境,而非个人电脑中.这使得用户失去了对数据的完全控制,从而难以保证数据的安全性.为了解决此问题,文中提出了一种新的安全云存储系统架构.基于这套架构,文中设计并实现了一个安全云存储系统———Corslet.Corslet可以直接架在已有的云存储系统之上而无需对其进行任何改变,同时提供端到端的数据私密性保护、完整性保护以及访问权限控制等功能.Corslet使用简单,用户只需在客户端存放他们的身份证书即可.对Corslet的测试结果显示,Corslet架在NFSv4集群之上I/O性能下降不到5%,证明Corslet在提高用户数据安全性的同时,其性能也是可以接受的.关键词安全存储系统;加密文件系统;私密性;完整性;访问控制1引言在这个数据爆炸性增长的时代,随着云存储的迅猛发展,越来越多的人或服务开始选择使用云存储环境来存放自己的资料[1-2].云存储环境一般采用按使用付费的方式,给使用者带来了不少好处:无前期投入,节省了管理开销,良好的可扩展性和很高的存储资源利用率.然而,云存储环境让数据的拥有者失去了对数据的完全控制,这使得数据的安全性面临一系列的威胁[3].例如,云存储环境中的数据一般都是以明文方式存储,缺少完整性保护、可靠的用户身份校验和访问控制机制.如果把敏感数据(如经济类文档、个人医疗记录等)存放在由他人控制的云存储环境中,随着云存储的使用者增多,以上问题将变得越发严重.对数据进行加密是当前保护数据私密性的主流方法[4-5].但是,大多数的云存储服务提供商都要求用户信任他们的存储服务器和系统管理员.部分服务提供商声称自己提供了一套优秀的安全机制来确保用户数据的安全性,然而,Verizon在2010年度数据泄露调查报告中指出,有49%的数据泄漏是由内部人士造成的,权限滥用占到了数据泄露的很大一部分,48%的数据泄漏是由于用户恶意滥用访问企业信息的权利而造成的①.由此看来,使用云存储的用户实在很难有理由完全地信任服务提供商.在一些存储系统中,数据的访问控制权交给数据拥有者来完成,其他用户想要访问数据,需要先与数据拥有者联系,这在一定程度上减轻了安全威胁.但是这种方案却引入了新的问题:第一,数据拥有者(用户)需要提供较复杂的数据管理服务,并且可能需要提供在线服务;第二,当用户数量庞大、共享用户数很多时,管理起来并非易事.针对以上问题,本文主要考虑了一种多用户共享云存储环境.在该环境中,数据拥有者将共享数据存放在不可信的云存储服务提供商处,而其他用户则在不可信的网络环境中可根据自身所被赋予的访问权限对该数据进行操作.在数据存储和访问的过程中,假设云存储服务提供商和网络中的恶意用户有可能对数据采取窥探甚至篡改等行为,而用户也将可能尝试超出其合法权限之外的数据操作.在这个前提假设下,本文提出了一套新的安全云存储系统架构.该架构使得用户在不可信的云存储服务提供商、不可信的网络环境下,依然能够得到对数据安全性与完整性的保护,并使数据的访问控制更加高效可靠,同时保证用户无法进行超出其权限的操作.依据这套安全系统架构,文中实现了一个安全云存储系统原型———Corslet.Corslet是一个具有栈式加密文件系统的安全云存储系统,它可以架在任何提供POSIX标准接口的文件系统之上,而无需对已有的文件系统做任何改变.Corslet以独立于一切云存储服务提供商的第三方身份存在,为用户提供数据私密性、完整性保护及访问控制服务,让用户消除对数据安全问题的担忧.本文第2节介绍系统设计的原则与预设;第3节介绍系统设计中的关键技术与系统实现;第4节给出系统的性能测试结果与分析;第5节介绍相关工作;第6节进行总结.2设计原则与底层文件系统相互独立.Corslet的设计目的是为已有的云存储系统提供安全机制,因此必须做到与底层文件系统相互独立,保证在使用Corslet的时候,不需要对底层文件系统进行任何修改.文件共享与访问控制.Corslet必须向用户提供安全易用的文件级共享与访问控制机制.文件拥有者可以指定文件能够被哪些用户进行怎样的访问.端到端的私密性与完整性保护.Corslet必须保证只有被合法授权的用户才能获得数据明文,非法的用户以及底层文件系统的管理员均无法获得数据明文.对数据的非法篡改必须能被发现,从而保证用户得到的数据是正确的.密钥管理.Corslet的密钥管理机制的设计原则是:用户在使用Corslet时,不需要在本地存放任何文件密钥.也就是说,Corslet的密钥管理机制对用户来说是透明的,增加了易用性和安全性.密钥分发.Corslet需要有一套合理高效的密钥分发机制,来保证合法用户能获得他想访问的文件的密钥.懒惰撤销.在Corslet中引入懒惰撤销机制[6]来减少这部分的性能开销.当权限撤销发生时,Corslet①Verizon2010年度数据泄露调查报告概述.http://netse-Page3并不马上对文件重新加密,而是等到文件被修改时才对被修改的内容重新加密.性能.Corslet中涉及到的一切加解密(除PKI身份认证体系外),都使用对称加解密.同时,Corslet还需要引入缓存机制来避免重复的计算开销和I/O开销.另外Corslet必须尽量减少由于安全机制引入所带来的磁盘空间和网络带宽的消耗.3系统设计与实现3.1总体设计为下文描述方便,本文所用术语的缩写及含义见表1.Corslet安全云存储系统由三部分组成:存储服务器(StorageServer)、客户端(Client)和验证服务器AS(AuthenticationServer).如图1所示.缩写AS验证服务器(AuthenticationServer)AEK验证服务器加密密钥(ASEncryptionKey)ASK验证服务器签名密钥(ASSignatureKey)ACL访问控制列表(AccessControlList)EALG加密算法(EncryptionAlgorithm)EMOD加密模式(EncryptionMode)LBK锁盒子密钥(LockboxKey)FSK文件签名密钥(FileSignatureKey)HMACACB内容验证码(Hash-basedMessageACB访问控制块(AccessControlBlock)RHi根哈希(ithRootHashintheroothashlist)存储服务器负责存放文件,用户视图中的一个文件,在存储服务器中被分成两个文件来存放,分别称之为数据文件(datafile,或d-file)和安全元数据文件(securemetadatafile,或smd-file).数据文件中存放的是文件密文,安全元数据文件中存放了与此文件相关的安全信息,例如访问控制块(AccessControlBlock,或ACB)、根哈希链表(RootHashList,或RHL)、MerkleTree等,具体内容将在后面进行详细叙述.验证服务器AS是整个系统信任的根.AS的逻辑非常简单,它负责验证用户身份、处理用户的文件访问请求、将相关密钥分发给合法用户等.AS端只需要储存两个对称密钥AEK和ASK,而不需要储存其他任何信息,所涉及到的操作只是少量的对称密钥加解密、计算MAC等.这种简单的设计能够带来以下好处:(1)低开销.由于计算简单、无磁盘I/O开销,AS可以轻松地同时响应多个请求.(2)让系统更可靠,可用性更强.由于AS除了两个对称密钥外,无需储存其他信息,因此如果一台AS崩溃了,另外一台具有相同AEK和ASK的服务器可以立即接替它的工作,无需进行复杂的数据恢复和状态恢复以保持一致性.(3)可扩展性强.简单的逻辑使得AS服务器可以轻松地扩展为验证服务器集群,消除性能瓶颈.客户端负责处理用户的请求,执行文件的各种操作.同时,文件数据加解密、完整性检验也是在客户端完成的.必要的时候,客户端还需要与验证服务器通信来获取密钥.而这一切对用户来说都是透明的.另外Corslet客户端只需要存放用户的身份证书,除此之外无需储存其他信息,这也增加了系统的易用性和安全性.在技术选型上,Corslet是一个基于FUSE实现的用户态文件系统,因此它可以架设在任意一个提供标准POSIX接口的文件系统之上,为用户提供安全功能.这也使得Corslet与底层文件系统完全相互独立,适用范围广泛.3.2对称密钥层级管理在安全云存储系统中,密钥管理有两个关键问题:如何减少需要维护的密钥数量以及权限撤销发生时如何处理密钥的更新.如图2所示,在Corslet中,密钥分为3个层级来组织:文件密钥、安全元数据文件和验证服务器.文件密钥.密钥层级的第1层是文件密钥.为了更高效安全地处理大文件,Corslet以分块加密的形式来加密文件数据.每一个文件块FBi采用单独的对称密钥FBKi来进行加解密,FBKi的计算方法如下:其中符号“‖”表示拼接(concatenate),HASH表示计算文件块的哈希值(例如使用SHA-1算法),offseti是块i在文件中的偏移量.也就是说,文件块的加密密钥,是由它明文的哈希值与它的偏移量拼接而成的,这种密钥的选择方式能够带来以下3点好处:(1)由于要保护文件的完整性,就免不了要计Page4算文件内容的哈希,而采用明文的哈希作为密钥,就能使这部分信息得到重用,很大程度上节省了密钥存储空间;(2)由于相同内容的文件块会得出相同的哈希值,因此在哈希值后拼接上偏移量来作为密钥,就能够使相同内容的文件块产生不同的密文,增强了保密性;(3)以这种方式来选择密钥,将使得文件块内容发生改变时,密钥也随之发生改变,这对系统的安全性和权限撤销(后面会详细叙述)都有好处.安全元数据文件.密钥层级的第2层是安全元数据文件.如图2所示,在smd-file的访问控制块ACB中,有一个锁盒子密钥LBK.从图中可以看出,所有的文件块密钥FBKi都用LBK进行了加密,并以MerkleTree[7]的形式存放在安全元数据文件(smd-file)中.只有拿到了LBK的用户,才可以解密得到文件块密钥,进而对数据文件进行解密,得到明文内容.ACB中还有一个文件签名密钥FSK,只有获取了FSK的用户才具有对文件进行合法修改的能力,即具有写操作权限,这部分内容在3.3节将进行详细叙述.验证服务器.密钥层级的第3层是验证服务器.如图2所示,验证服务器AS中存放了两个对称密钥:AEK和ASK.前者是验证服务器加密密钥(ASEncryptionKey),后者是验证服务器签名密钥(ASSignatureKey).这两个密钥只有AS自己知道,是对其他的任何实体保密的.从图2可以看出,在smd-file的ACB中,锁盒子密钥(LBK)和文件签名密钥(FSK)都被AS用AEK加密过.也就是说,用户想要获得LBK或FSK,只能通过与AS进行通信来获取.签名密钥ASK则用来计算访问控制块ACB的HMAC值.利用smd-file中的HMAC值,AS就能够判断ACB的完整性是否遭到破坏,而其他实体由于无法得到ASK,所以不具备合法修改ACB内容的能力.通过这样的3层密钥管理结构,数目众多的密钥可以被高效地组织起来,在保证数据私密性与完整性的同时,提高了密钥管理的效率,并且对用户的身份认证、访问授权以及权限撤销都是很有好处的,这将在3.5节详细叙述.3.3完整性保护Corslet通过为文件的每一个块计算明文哈希值来保证它的完整性(如前文所叙述的,该哈希值也是其加解密密钥FBK的一部分),进一步地把这些哈希值组成一棵或多棵MerkleTree.传统的MerkleTree的叶子结点存放文件块哈希,非叶子结点用来保证儿子的完整性,存放的是所有儿子拼接后的哈希值.这样的方式对于不变文件来说比较适合,但是如果文件被频繁修改,那么MerkleTree的维护和存储就比较麻烦了.在Corslet中,使用改进的MerkleTree,非叶子结点也参与存放文件块哈希,其结构如图3所示.其中,图3中bHashi的内容为HASH(FBi)20BytenHashi的计算方法:nHashi=HASH(bHashmi+1‖nHashmi+1‖…Corslet中的MerkleTree(以下简称为M-Tree)是一棵m叉树,除叶子结点外,每个结点有m个子结点.结点i中的bHashi其实就是文件块i的密钥FBKi.nHashi是结点i的所有子节点内容拼接后,再计算出来的哈希值.另外还使用了“块存在标记”来标识文件块i是否存在(文件有可能存在空洞),以及用“结点存在标记”来标识M-Tree中结点i是Page5否存在(如果bHashi存在或者nHashi存在,就认为结点i存在),这两个标记可以帮助识别文件空洞,以及提高完整性校验的效率(不存在的M-Tree结点可以不参与计算).最后对M-Tree的根用文件签名密钥FSK加密并存放在smd-file的根哈希链表中,为了提供并发写的可能,用多棵M-Tree和一个将这些M-Tree的根哈希串起来的链表来保证一个文件的完整性.在Corslet中,用bHashi保证了文件块i的完整性,用nHashi保证了以结点i为根的子树的完整性,所以M-Tree的根就保证了整棵M-Tree的完整性.由于只有具有文件写权限的合法用户才能获取到文件签名密钥FSK(这将在3.5节中详细叙述),因此在smd-file中存放的根哈希保证了非法用户一旦篡改了文件内容就能被发现.总的来说,用FSK加密的根哈希来保证了M-Tree的完整性,而M-Tree中存放了所有文件块的明文哈希,进而保护了整个文件数据的完整性.采用M-Tree来保护文件完整性的好处是显而易见的.当合法地修改文件某个或某些块的内容时,只需要重新计算这些块的bHash,以及这些块通往根结点的路径上所经过结点的nHash.最后对更新后的根哈希用FSK重新加密存放在smd-file中.这样的修改复杂度是log级的.如果不使用M-Tree,而是把所有的FBK拼接在一起计算出一个哈希值,进而保证所有FBK的完整性,那么哪怕只是修改一个块,也需要重新对所有FBK进行拼接并计算哈希值,这样的开销对大文件来说是难以接受的.另外,采用文件块明文的哈希值而非密文的哈希值作为完整性校验的方式,一来可以重用明文哈希值作为密钥,节省了空间;二来可以确保用户获得的信息的的确确是他想要的(因为仅仅保证密文的完整性是不够的,如果完整性保护机制不够健全的话,密钥有可能被篡改,解密出来的明文就不对了).在Corslet中,对文件的每次读写访问都会先检查访问内容的完整性.先检查M-Tree根哈希的完整性,然后检查访问所涉及到的M-Tree结点以及这些结点通往根结点的路径上所经过的结点的完整性,这样可以确保这些结点的bHash,也就文件块密钥FBK的完整性.检查M-Tree结点完整性的方法是根据它的子结点重新计算它的nHash值,并与smd-file存放的nHash值进行比较,最后检查每一个文件块的完整性(对解密出来的明文计算哈希值,与FBK中的明文哈希进行比较).3.4懒惰权限撤销在用户数较多的云存储系统中,权限撤销经常发生[4].大多数云存储系统主要依靠存储服务器来管理文件的访问权限,权限撤销的开销很小,但是这要求用户完全信任存储服务器,而这对用户的数据是不安全的.相对的,在加密存储系统里,权限撤销所带来的性能开销要大得多,因为要避免权限被撤销的用户继续对文件进行访问,需要重新生成文件的相关密钥,重新加密,并将新的密钥分发给依然具有访问权限的用户.其中对文件的重新加密将会较严重地影响系统性能,并导致在此过程中文件无法被访问.为了减少权限撤销所带来的额外开销,Corslet采用了懒惰权限撤销技术[6].对于每一个文件块而言,在权限撤销后,只有当它的内容发生改变时,它才被重新加密,这在很大程度上降低了权限撤销对性能的影响.而对于smd-file而言则不然,一旦权限撤销发生,就需要为该文件重新生成锁盒子密钥LBK和文件签名密钥FSK,然后用新的LBK对所有的文件块密钥FBKi重新加密,用新的FSK对所有的根哈希RHi重新加密.由于Corslet只对所有的FBK和RH进行重新加密,并没有对文件块进行重新加密,相比之下,数据量减少了非常多,性能开销也大大降低,由此也可体现出密钥层次管理机制的优越性.另外,当文件块的内容被修改后,它的哈希值也会随之改变,于是文件块密钥FBK也就自动的发生了改变,因此Corslet无需像已有的懒惰权限撤销机制那样,用一套复杂的方法和额外的空间来记录文件的历史密钥和历史状态等信息[4,8],这又进一步地节省了时间和空间开销.另外,已有的一些权限撤销机制需要对整个文件重新加密,而Corslet是精确到文件块级别的,这也在一定程度上提高了性能.3.5访问协议Corslet的文件访问协议与已有加密文件系统中的访问协议比起来,具有更安全、更简单、更快等特点.在这套协议里,客户端与认证服务器间的通信均采用了SSL加密,能有效解决网络不可信的问题.另外,验证服务器AS只需要维护两个对称密钥,而客户端只需要维护自己的身份证书,不需要维护任何密钥,这不仅简单高效,而且还减少了密钥泄露的风险,更为安全.Corslet能够做到这一点,与它独特的文件访问协议是密不可分的,接下来将详细叙述这套协议.Page6身份认证.在Corslet中采用X509标准来实现身份认证.每个用户都需要向CA申请一个证书,用以唯一标识自己的身份.当客户端与验证服务器AS通信时,会尝试与AS建立一个SSL连接①.连接建立的时候,客户端会将用户的身份证书发送给AS,该证书通过AS的验证后,AS也会将自己的证书发送给客户端.在双方都确认对方的身份信息无误后,SSL连接正式建立.也就是说,在验证服务器AS端,每一个连接都是与用户证书绑定的,即所有的通信都是身份可识别的通信.创建文件.创建文件的流程如下:(1)客户端初始化一个创建文件请求,其中包括文件名、加密算法、加密模式、访问控制列表等信息,然后将此请求发送给验证服务器AS.(3)客户端用LBK把需要访问到的文件块的块密钥FBK解密出来,验证M-Tree及其根哈希的完整性.接着从d-file中读出相关的文件块并用对应的FBK解密得到明文,并对明文计算哈希来检验文件块的完整性.写文件.写文件的流程如下:(1)客户端从存储服务器中找到安全元数据文件smd-file,从中读出ACB的内容,并将写请求与ACB发送给验证服务器AS.(2)AS首先检查ACB的完整性,然后通过ACL访问控制列表判断用户是否有写权限,接着用(2)AS收到请求后为文件生成锁盒子密钥LBK和文件签名密钥FSK,并对这两个密钥用验证服务器加密密钥AEK进行加密,创建出ACB(参考图2),接着用验证服务器签名密钥ASK计算出ACB的HMAC值.最后初始化根哈希链表,并将生成好的ACB返回给客户端.(3)客户端根据AS返回的ACB在存储服务器上创建两个文件:数据文件d-file和安全元数据文件smd-file.读文件.读文件的流程如下:(1)客户端从存储服务器中找到安全元数据文件smd-file,从中读出ACB的内容,并将读请求与ACB发送给验证服务器AS.(2)AS首先检查ACB的完整性,然后通过ACL访问控制列表判断用户是否有读权限,接着用AEK将LBK和FSK解密出来,并用FSK解密根哈希链表(用于验证M-Tree的完整性),最后把LBK和根哈希链表返回给客户端.AEK将LBK和FSK解密出来,并用FSK解密根哈希链表,最后把LBK、FSK和根哈希链表返回给客户端.(3)客户端用LBK把需要访问到的文件块的块密钥FBK解密出来,验证M-Tree及其根哈希的完整性.然后对要写入的数据以文件块为粒度计算哈希和新的FBK,并用新的FBK对数据进行加密,写入d-file中.同时,还需要更新M-Tree,重新计算根哈希并用FSK加密,写入smd-file中.共享文件.共享文件的流程如下:(1)文件拥有者从存储服务器中找到smd-file,读出ACB.把文件共享请求和ACB发送给AS.文件共享请求中包括要在访问控制列表ACL中加入哪些用户、每个用户具有哪些权限等信息.(2)AS首先检查ACB的完整性,并检查该用户是否为文件拥有者.接着将客户端请求中的访问控制项插入到ACL中,并用验证服务器签名密钥ASK重新计算ACB的HMAC值.最后将更新后的ACB返回给客户端.(3)客户端将新的ACB写入到smd-file中.权限撤销.权限撤销的流程如下:(1)客户端从存储服务器中找到smd-file,读出ACB.把权限撤销请求和ACB发送给AS.权限撤销请求中包括要对哪些用户进行权限撤销、每个用户被权限撤销后所应该拥有的权限(例如从读写权限降级为只读权限)等信息.(2)AS首先检查ACB的完整性,并检查该用户是否为文件拥有者.接着根据客户端的请求更新访问控制列表ACL,然后重新生成锁盒子密钥LBK和文件签名密钥FSK,并用验证服务器加密密钥AEK对新的LBK和FSK进行加密,写入ACB中.最后用验证服务器签名密钥ASK重新计算ACB的HMAC值,将更新后的ACB、旧的LBK和FSK、新的LBK和FSK返回给客户端.(3)客户端用旧的LBK将所有的文件块密钥FBK解密,并用新的LBK对它们进行加密,写入smd-file中.再用旧的FSK对所有的根哈希进行解密,并用新的FSK对根哈希进行加密,写入smd-file中.最后将更新后的ACB写入smd-file中.3.6正确性保证与性能调优本研究在Corslet中实现了一套独立的锁机制①SSL/TLS.http://tools.ietf.org/html/rfc5246Page7(包括文件读写锁和线程互斥锁)来实现读写互斥,保证文件数据的一致性.Corslet支持多线程并发读同一个文件.为了提高Corslet的性能,本研究使用了缓存机制来降低加解密、完整性校验的开销.例如将访问到的M-Tree的前三层结点的明文缓存在内存中,直到需要的时候(例如文件关闭时)才把它们重新加密写回smd-file,这样可以减少在完整性校验过程中对M-Tree前三层结点多次I/O访问和加解密的开销.相应地,可以为被缓存的M-Tree结点设立一个“是否已检查完整性”标记,这样可以避免对缓存的M-Tree结点重复校验完整性.如果用户对某一段数据进行重复读写,每次读操作都需要从加密的数据文件中读出对应内容,进行完整性校验,然后从安全元数据中读入相关的文件数据加密密钥(密文形式),然后用文件根密钥FBK对这些密钥进行解压,再利用这些密钥解密数据文件得到明文数据,写操作也是类似的.为了提高性能,本研究在Corslet中实现了一套独立的缓存系统,对最近访问的文件块明文进行缓存,这使得以上的步骤都能被省略,减少了不必要的I/O操作、完整性校验以及加解密开销.在具体实现中,本研究使用了RadixTree[9]来组织文件块缓存,这可以高效地对缓存块进行查找、插入和删除,同时使用了LRU链表来管理缓存池,提高缓存的命中率.另外还使用了完善的锁机制来保证缓存系统的正确性.4功能及性能测试文中对Corslet的功能和性能进行了一系列的测试,包括验证Corslet在不可信的网络及存储环境下所能提供的安全功能,测出加解密、完整性检验、文件共享与权限撤销等部分的开销,以及使用Bonnie++①和IOzone②来测试Corslet的整体性能.4.1功能测试文中用3台服务器对Corslet进行了功能测试.其中一台服务器作为Corslet的验证服务器AS,同时也是NFSv4的服务器端;另外两台服务器作为NFSv4的客户端以及Corslet的客户端,分别以用户A和用户B的身份将Corslet挂载在NFSv4之上.测试内容如表2所示.数据私密性保护:绕过Corslet查看用户文件内容数据完整性保护:绕过Corslet篡改数据文件或者元数据文件权限管理:测试文件的访问者在其被授予读/写权限之前,被授予读/写权限后,以及被撤销权限后对文件进行读/写操作的结果4.2性能测试环境与参数选择性能测试的硬件环境是两台配置相同服务器,型号为SunSunFireTMV20z,1.8GHz的AMD双核CPU,4GB内存,两台服务器间以千兆局域网连接,一台做验证服务器,一台做客户端.软件环境是DebianLinux2.6.30内核,fuse2.8.1,openssl0.9.8k.在安全机制的选择上,使用了SHA-1函数来计算哈希,用基于SHA-1的MAC算法HMAC来计算MAC,AES-256系列函数为默认的加解密函数,cfb为默认的加密模式(用户也可以通过配置文件来选择加密算法和加密模式),用X509系列函数来实现身份验证.设置Corslet文件块大小为64KB,这是由于测试场景以大文件应用为主.如果需要将Corslet应用在小文件的云存储环境中,也可以很方便地对文件块大小进行调整.在M-Tree的结构上,选择了M-Tree的叉数为64,并规定一棵M-Tree高度不超过4层.这样的选择是为了在M-Tree的完整性校验时减少磁盘I/O.M-Tree的层数越少需要进行的I/O操作就越少.实际上在具体实现中采用了缓存机制来保证每次M-Tree完整性校验最多只会出现1次I/O操作.另外单个文件最大支持512棵M-Tree,所以Corslet最大可以支持大小为8TB的文件.4.3加解密开销先创建一个文件,随后以读写模式打开此文件,以每次64KB的粒度写入500MB的内容,再将这500MB的内容读取出来,最后关闭文件.表3列出了测试过程中各种文件操作中的加解密开销.从表3可以看出,加解密的开销绝大部分都在文件数据的加解密中,另外写操作中的“计算M-Tree结点值”与读操作中的“验证文件块哈希”也消耗了①②Page8文件操作加解密操作总开销/ms执行者操作频率createOpenClose加密M-TreeWriteRead部分时间,这是两部分属于完整性校验的开销.以上开销跟读写内容的大小是成正比的.另外还可以看出验证服务器AS所参与的操作由于逻辑简单,耗时非常短.为了测试文件共享与权限撤销方面的开销,进行了如下测试:文件A的拥有者先赋予500个不同的用户对文件A的只读权限,接着将这500个用户的权限升级为读写权限,最后将他们的权限全部撤销.记录了每一步的时间开销(从用户开始执行操作到操作完成的用时),如表4所示.从表4可以看出,由于文件的共享或者权限升级只需简单地修改文件的访问控制列表ACL并重新计算ACB的HMAC即可,因此速度很快.而权限撤销需要重新生成LBK和FSK,并对已有的文件块密钥以及根哈希链表重新加密,因此相对来说耗时较长,但由于没有立刻对文件块内容进行重新加密,速度还是非常快的.4.4文件读写测试4.4.1大文件读写测试在与4.2节相同的测试环境下,使用Bonnie++1.03e对Ext3和Corslet进行了测试.先在客户端的本地文件系统Ext3上运行Bonnie++测试性能,然后将Corslet架在Ext3上,再运行Bonnie++测试Corslet的性能.测试结果如图4所示.由图4可以看出,Corslet与Ext3相比,文件块粒度的读写操作性能分别下降了31.3%和17.4%,主要原因是文件内容加解密引入的开销.而字节粒度的读写性能分别下降了53.6%和55.6%.字节粒度的读写性能下降更严重的原因是每次的读写操作,Corslet都需要检验完整性,包括访问涉及到的文件块的完整性,以及M-Tree的完整性.又由于在实现中Corslet选择了64KB作为文件块大小,哪怕是访问文件块中的一个字节,也需要对整个文件块的内容计算哈希来检验完整性,因此字节粒度的读写会引入更多的完整性校验开销.接着在NFSv4环境下对Corslet进行了测试,仍然采用了相同的测试环境,使用Bonnie++来测试.两台服务器,其中一台做验证服务器AS,同时也作为NFSv4服务器提供存储服务.另一台服务器既是NFSv4客户端,也是Corslet客户端(将Corslet挂载在NFSv4之上).先后在Corslet挂载点和NFSv4挂载点上运行Bonnie++进行测试,测试结果如图5所示.对比图4和图5可以发现,NFSv4和Ext3相比,写性能略降了10%左右,但读性能下降了40%以上,这主要是由NFSv4引入的网络开销和协议开销导致的.而Corslet的性能变化很小,只有略微下降,这是因为Corslet引入的文件内容加解密和完整性校验等开销,是性能下降的主要原因.由于这些Page9操作是计算密集型的,CPU的性能会成为瓶颈,因此NFSv4虽然削弱了底层存储的I/O能力,但并没有削弱到使其成为瓶颈的程度,也就是说CPU的性能依然是瓶颈.所以Corslet的性能只有略微的下降.由此推测,在云存储环境下,随着用户的增多,也就意味着客户端的增多,计算能力的增强,计算部分将不再成为瓶颈,Corslet的性能开销会越来越不明显.为了验证该想法,对Corslet进行了集群测试.在集群测试中,硬件环境采用了5台配置相同的服务器,型号是DellPowerEdgeTMM605,服务器拥有两个2.8GHz的AMD四核CPU,8GB内存.软件环境与配置和之前的测试相同.测试文件的大小选择为16GB.这5台服务器中,有1台作为NFSv4的服务器,将本地磁盘的一个Ext3分区导出,对外提供存储服务,1台作为验证服务器,其余3台作为客户端,均挂载了NFSv4,并在其上挂载Corslet.这次采用了IOzone3.347进行测试,因为IOzone具有集群测试功能.先让3台客户端同时在本机的NFSv4挂载点上进行IOzone集群测试,然后类似地改为在Corslet挂载点上,得到的结果如图6所示.由图6可以看出,Corslet架在NFSv4之上的聚合访问速度达到了NFSv4的95%以上,且达到了单块磁盘的性能极限.由此可见当客户端增多时,存储服务成为了瓶颈,Corslet引入的计算开销就很不明显了.实验结果表明,在云存储环境中,Corslet将能得到很好的应用.4.4.2大批量小文件读写测试针对实际环境中所存在对大规模小文件操作需求,分别测试了Corslet和NFS在网络环境下对大规模小文件操作的性能对比.该测试选用了3台服务器分别作为云存储的文件服务器、认证服务器和客户端,其硬件环境和软件环境与配置和之前所测试IOzone的服务器相同.在对NFS和Corslet测试的过程中,客户端分别在相应的挂载点下对1000个小文件进行创建、写操作和读操作,其中每个文件的大小设置为512KB.测试的结果如图7所示.由图7可以看出,Corslet系统和NFSv4相比,小文件的读写操作性能分别下降了50.7%和43.1%,这是因为Corslet在每次访问数据文件的同时,还需要访问安全元数据文件.在处理小文件时,处理安全元数据所占的时间比例比大文件所占的比例要大,从而导致Corslet的小文件处理性能不如大文件.在实际访问中,为了优化性能,Corslet提供了缓存机制,能够在很大程度上改善小文件读写的性能.例如,当Corslet系统再次访问某个文件时,由于其内容已在内存中,因此访问速度会大大的提升.5相关工作本文工作与相关研究工作的对比如表5.其中:CFS[10]是最早的加密文件系统之一.CFS是一个虚拟的加密文件系统,在把数据写到磁盘之前,对文件名和文件数据进行加密.CFS用一个密钥来加解密整个目录中的文件.访问控制则是通过把密钥共享给其他用户,这决定了CFS只允许在一台机器上进行粗粒度的共享,并且不区分读权限和读写权限.Cryptfs[11]、ECFS①、Cepheus[6]和TCFS[12]都是CFS的著名变种.Cryptfs赋予文件组对称密钥,允许组文件共享.Cepheus则引入了锁盒子来实现用户组间的共享管理,依赖一个可信的密钥服务器来存储用户组成员信息来进行身份认证,同时依赖存储服务器实现访问控制,它是第一个提出懒惰权①BindelD,ChewM,WellsC.ExtendedcryptographicfilePage10表5加密文件系统相关工作对比在扩展属性中FARSITE[14]文件块明文RTP-NFSv4[15]文件块随机公私钥无文件密钥用用户主密钥加密后存CRUST[8]文件块随机对称密钥MerkleTahoe[16]文件特殊SiRiUS[17]文件特殊Plutus[4]文件块随机公私钥MerkleCorslet文件块明文用户使之能算出文件密钥限撤销的安全文件系统.ECFS和Cepheus都实现了完整性保护.TCFS为每个用户颁发一个主密钥来保护该用户的文件的密钥.这4个文件系统都不能区分读共享和读写共享.NCryptfs[13]是一个在内核态实现的安全文件系统,可以支持一台机器上的多用户文件共享,但是无法支持大规模的文件共享.Tahoe[14]是一个分布式安全文件系统,包括访问控制、加密、完整性检查等功能,以及采用了纠删码来实现容错.它被部署在一个商业的备份服务中.Round-TripPrivacywithNFSv4[15]是在NFSv4上的一个改进,修改了NFSv4中的RPCSEC_GSS协议,使得文件服务器上的文件以密文方式存放.但RTP-NFSv4并没有对文件进行完整性保护,密钥机制过于简单.Farsite[16]是一个安全文件系统,提供一个集中式的文件服务器功能,但实际上是由多台分布式的不可信计算机组成.Farsite通过多副本机制提供文件可用性和可靠性,通过加密来保证文件内容保密性,通过一个能防止拜占庭错误的协议来保证文件和目录数据的完整性.Tahoe、RTP-NFSv4、Farsite三者的访问权限控制机制对大量用户的频繁文件共享与权限撤销支持得不好.CryptosFS[17]和SNAD[18]都使用了公私钥加密体系来实现访问控制,并且通过文件服务器来验证用户的访问权限,因此需要完全信任文件服务器.CryptosFS的用户需要使用非对称密钥从安全元数据文件中解密出相应的对称密钥,再用这些对称密钥去解密数据文件,因此它的密钥管理机制是带外的.SiRiUS[19]是一个栈式文件系统,为已有的文件系统提供安全机制.SiRiUS使用了大量的非对称密钥进行权限控制,还需要一个专门的公私钥服务器.在SiRiUS中,文件是整个被加解密的,完整性校验也是对整个文件计算哈希的,权限撤销时马上重新加密,性能开销较大.Plutus[4]同样使用了公私钥加密体系,提供了组共享和懒惰撤销、随机访问、文件名加密等功能.Plutus采用了用户间共享文件密钥的密钥管理机制,当其他用户想访问文件时,需要向文件拥有者索要密钥,这种机制要求文件拥有者实时在线.CRUST[8]和SiRiUS一样,也是一个栈式文件系统,但它没有使用公私钥加密体系,所有的加解密都使用了对称密钥.CRUST依赖一些公共的数据结构来实现分布式密钥管理、密钥回滚和权限撤销等等,这会导致随着用户数增多,需要维护的信息将以平方级增长,不适合在用户数较多的环境下使用.CRUST和Plutus都使用了MerkleTree[7]来保证文件完整性.与以上工作相比,Corslet具有较明显的优势.Corslet是一个具有栈式加密文件系统的安全云存储系统,可以架在已有文件系统之上.Corslet有一套自己的权限控制机制,不依赖于云存储服务器.除X509身份认证外,Corslet中涉及到的所有加解密均使用了对称密钥,与公私钥加密体系比起来开销更小.Corslet对文件分块加解密,使用了层级密钥管理机制和带内的密钥分发机制,用户无需维护任何密钥信息,使得密钥管理更加安全高效.Corslet采用了比已有实现更高效的懒惰权限撤销机制,无需存储密钥历史信息,节省了时间和空间上的开销.Page11Corslet采用了改进后的MerkleHashTree和缓存机制,使完整性检查更加快速,并为并发写提供可能.6总结文中介绍了一种新的安全云存储系统架构,确保用户在不可信的网络环境和云存储环境下得到数据的安全.通过引入可信的验证服务器,这套系统架构消除了对云存储服务器的依赖,非常适合越来越流行的云存储应用场景,同时,验证服务器因为逻辑简单而具备较高的可扩展性.本文提出的安全云存储系统Corslet,为已有的云存储环境下的用户提供安全保护,包括私密性保护、完整性保护以及文件访问控制等.同时,Corslet较好地支持了随机访问与并发访问.对Corslet的性能测试结果表明Corslet挂载在NFSv4集群之上带来的性能下降不足5%,由此可见,Corslet在提供强大的安全性保护的同时,所带来的额外性能开销是可以接受的.
