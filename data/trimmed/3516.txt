Page1多租户Web应用的CPU资源动态评估方法王伟1),2),3)黄翔1),3)张文博1)魏峻1)钟华1)黄涛1)1)(中国科学院软件研究所软件工程技术研究中心北京100190)2)(武汉大学软件工程国家重点实验室武汉430072)3)(中国科学院研究生院北京100039)摘要中间件共享是云计算模式中一种重要的资源共享方式.但是,这种方式容易导致宿主在同一中间件服务器上的多个租户间产生性能干扰.因此,需要为租户提供性能隔离的服务实例.在线度量租户对系统资源的使用情况是实现性能隔离的前提条件,但是,在共享中间件服务器中直接度量CPU资源需要注入探针,将引起性能开销,并依赖于操作系统的支持.最近,一些工作利用回归分析进行资源使用情况的间接评估,但仍难以对动态Web系统的时变资源状态进行有效评估.文中针对普遍使用的Java中间件服务器,提出一种基于Kalman滤波的多租户Web应用CPU资源动态评估方法,并通过两个实验案例分析方法的评估效果、影响因素和面临的挑战.实验结果表明,通过适当的参数设置,该方法可动态适应持续变化的负载环境,并且与直接度量方法相比,具有可接受的评估误差.实验还表明该方法可用于检测侵占型租户,并避免共享中间件服务器CPU过载.关键词CPU资源评估;性能隔离;Kalman滤波;多租户1引言多租户(multi-tenancy)让来自不同组织(租户)的并发用户共享使用同一基础设施资源,有利于成本降低和收益提高,是云计算的关键特征之一[1-2].如图1所示,目前存在3种典型的多租户部署方式:基于虚拟机(VM)的多租户部署、基于进程的多租户部署以及基于共享中间件的多租户部署.基于VM的部署方式为每个租户配置一个VM实例,如Amazon的EC2①解决方案.基于进程的部署方式为每个租户配置一个中间件服务器,如Google的AppEngine②解决方案.基于共享中间件(sharedmiddleware)的部署方式通过单一中间件服务器为多个租户提供服务,如Intalio③和Salesforce④的解决方案.共享中间件是一种高层次的多租户部署方式,与其它方式相比,资源共享程度更高,性能开销更低,因此租户的扩展性更强.例如,在同样硬件环境下,使用基于VM的部署方式,1个物理CPU最多支持3个虚拟CPU(根据VMWare的配置建议),即支持3个租户,而基于共享中间件的部署方式则可以支持数十、甚至数百个租户[3].目前,共享中间件已经成为一种较为普遍的云计算部署方式,但在租户隔离方面(如性能、安全)仍存在诸多技术挑战.本文主要关注性能隔离(performanceisolation)相关技术研究.租户难以完全信赖,可能存在恶意侵占资源的行为,称之为侵占型租户(aggressivetenant).即使同一组织内部、相互信赖的多个租户,仍有可能由于误操作或过载而导致个别租户侵占大量资源,影响其它租户性能.性能隔离即防止租户间出现由于资源侵占而产生的性能干扰(performanceinterference).对于电子商务、在线支付等性能关键(performancecritical)服务,性能隔离至关重要,否则将导致客户损失和收益损失.在共享中间件中实现性能隔离的关键是控制租户对CPU、内存等资源的使用,其前提条件是在线获取租户的资源使用情况[4].Java服务器是最为广泛使用的中间件服务器之一,但是由于Java语言以及Java虚拟机(JVM)缺乏资源度量机制,在共享Java服务器中进行资源在线度量仍存在技术挑战,尤其是对CPU资源的在线度量[5].已有工作包括本地代码库(nativecodelibraries)、程序转换(programtransformations)等方法.基于本地代码的方法需要对应用程序的源代码或二进制文件进行探针注入(probeinstrumentation).但是,在共享中间件环境下,中间件平台的提供者可能无权修改租户应用.并且,方法需要调用操作系统级的本地代码,本质上是一种基于采样的度量方法,精确度依赖于采样时间戳(samplingtimestamp)的精密程度.但对于事务型应用(transactionalapplication),每次请求处理所使用的CPU时间极短,对时间戳的精密度要求很高,甚至需要修改操作系统,因此存在系统兼容性问题.基于程序转换的方法将程序字节码流量转换为CPU资源的使用量[5],方法不依赖于操作系统,但会产生较大性能开销(大于30%)[6].对于在线系统而言,工业界可容忍的开销仅为5%.最近,一些研究工作利用多元回归分析方法估算资源使用量[7],在系统兼容性和性能开销方面具①②③④Page3有优势,但已有的研究工作表明此类方法难以对动态Web系统的时变资源状态进行有效评估,易产生较大误差[8],并且,方法的精确度依赖于长时间、高质量的观测样本作为输入,容易受到由于资源竞争造成的异常点(outliers)的影响.在本文中,我们针对Java中间件服务器,提出一种基于Kalman滤波[9]的多租户Web应用CPU资源动态评估方法.方法通过近似最优的方式利用可观测值估算不可观测值,并且可随着新的观测值的到来更新之前的估算值,更适用于时变资源状态的在线评估.文中基于该方法设计实现了一个租户资源评估引擎①.通过两个实验案例分析方法的评估效果、影响因素和技术难点:(1)电子商务应用测试基准TPC-W②;(2)在线软件开发环境TrustieForge③.在第1个应用案例中,我们针对持续变化的负载环境,设计了一系列实验,分析滤波参数设置对于资源评估精确度的影响,并与回归分析方法进行比较.在第2个应用案例中,我们在支撑多个软件开发团队的Forge生产环境中,基于本文方法设计侵占型租户检测和过载保护策略,对方法的应用效果进行了验证.本文贡献总结如下:(1)我们提出了基于Kalman滤波的多租户Web应用CPU资源动态评估方法.实验结果表明,通过设置适当的参数,方法可动态适应持续变化的负载环境,并且与直接度量方法相比,具有可接受的评估误差.(2)在实验案例中,我们对本文方法的应用效果进行经验式分析.实验结果表明,方法可以有效检测出侵占型租户,并避免共享中间服务器CPU过载.(3)方法利用生产环境中常用的监测数据进行资源评估,因此不会产生性能开销.并且,方法具有非侵入性和操作系统独立性.本文第2节对CPU资源动态评估问题进行形式化描述,并讨论技术挑战;第3节给出基于Kalman滤波的动态评估方法;第4节针对TPC-W电子商务应用验证方法的有效性;第5节针对在线软件开发环境验证方法的应用效果;第6节讨论本文方法的不足与未来工作;第7节比较相关研究工作;最后是全文结论.2问题描述本节首先针对多租户Web应用CPU资源动态评估问题进行形式化描述,接着讨论利用回归分析方法追踪时变资源状态的技术挑战.2.1问题形式化对多租户Web应用的CPU资源进行动态评估的前提条件是在线收集中间件服务器的日志信息,包括租户的吞吐量以及中间件服务器的CPU利用率.上述运行时信息在固定的时间间隔被监测记录,这种时间间隔称为监测窗口.为方便后文的讨论,对于一个宿主了N个租户的中间件服务器,我们给出以下记号:成的事务数;平均利用率;T表示监测窗口长度;Ni表示第i个租户(1iN)在监测窗口内完UCPU表示中间件服务器在监测窗口内的CPUSi表示第i个租户(1iN)所有事务的平均根据效用法则(UtilizationLaw)[10],资源利用服务时间(即所有事务的CPU平均占用时间).率等于吞吐量乘以服务时间,我们可以得到等式:由于难以精确度量服务时间Si,我们使用Ci表示其近似值,进而得到资源利用率近似值UCPU的计算等式:可以利用统计分析方法求解Ci.对于此类间接逼近问题的求解,UCPU,k和UCPU,k的误差是衡量精确度的典型指标,其中k表示监测窗口的标示号.在本文中,我们的目标是如何降低真实服务时间Si与近似服务时间Ci的误差.2.2追踪服务时间变化一些工作利用多元回归分析方法求解Ci.但是动态Web系统的资源状态具有时变性,严重影响方法的精确度和适应性.动态Web系统包含用于完成各种业务逻辑的多种事务,负载组成(workloadmix)则表示系统当前负载中包含的各种事务的组成比例.在开放环境中,租户的负载组成不断变化,导致租户所有事务的平均服务时间也不断变化.例如,工业级的电子商务测试基准TPC-W定义了14种事务①②③Page4操作,包括网上书店的浏览、查询以及订单等事务操作.这14种事务可被分为浏览型和订单型两类,并根据不同的组成比例,定义了如表1所示的3种负载组成模式(浏览、购物、订单).下面通过一个简单实验说明负载组成与事务服务时间的关系.针对3种负载组成模式,我们分别在10~600的单租户并发规模下进行测试,并统计事务吞吐率和CPU平均利用率,随后利用等式(1a)计算租户的事务平均服务时间.实验结果如图2所示,对于特定的负载组成模式,租户的事务平均服务时间在不同并发规模下基本相同,但是不同负载组成模式的平均服务时间在同一并发规模下却存在着较大差异.表1TPC-W基准测试中的事务类型和组成模式事务类型浏览模式购物模式订单模式浏览相关95.00%80.00%50.00%订单相关5.00%20.00%50.00%图23种负载组成模式下的事务平均服务时间另外,回归分析方法的精确度还依赖于长时间、高质量的样本作为输入,容易受到由于资源竞争造成的异常点的影响.下面通过一个简单实验说明事务吞吐率与CPU利用率的关系.在单个租户的3种负载组成模式下,租户的访问并发量随机变化,在一组长度为1min的监测窗口中,我们将吞吐率按照CPU利用率进行归类统计,得到如图3所示的吞吐率剖面(profile).可以看出,3种负载组成模式下的吞吐率剖面存在差异,这与我们的预计相同.但是,我们也发现曲线中存在较多的异常点.这些异常点通常是由于资源竞争而导致在异常CPU利用率情况下出现较小的吞吐率而产生的.由于回归分析方法需要最小化所有样本点的绝对误差,当存在较多异常样本点时,方法精确度将受到严重影响.一种改进的方法是对最近的监测样本进行异常点过滤和回归分析.但是,对于存在N个租户的共享中间件服务器而言,通常需要N+1个监测窗口的时间来收集多元回归的样本.考虑到存在异常样本,则需要更长的采样时间,如果在此期间负载组成出现较大变化,则会影响回归分析的结果.综上分析,回归分析方法难以满足共享中间件服务器环境下、具有时变特征的多租户CPU资源的评估需求.我们由此需要研究新的方法用于追踪服务时间的变化.3基于Kalman滤波的CPU资源动态评估3.1Kalman滤波器Kalman滤波[9]在自动控制和辅助导航领域得到了广泛的使用和研究,其最大的特点是可以用一种近似最优的方式基于可观测值估算不可观测值,并且可随着新的观测值的到来更新之前的估算值,因此更适用于时变资源状态的在线评估.Kalman滤波提供了一个在离散时间点,估算不可观测状态狓的通用方法.第k时刻状态狓k可以定义为一个线性随机差分方程:第k时刻测量值zk定义为其中,犃是从k-1时刻到k时刻状态转换矩阵,狑k-1为过程误差,其协方差矩阵为犙k-1.犎k是狓k到zk的转换矩阵,vk是观测误差,其协方差矩阵为犚k.3.2基于Kalman滤波的多租户CPU资源动态评估图4显示了基于Kalman滤波的多租户Web应用资源评估引擎的逻辑架构.我们首先将不可观测状态狓建模为包含N个租户的事务平均服务时间的N维向量狓k=(Ck租户的事务平均服务时间.然后,根据等式(1b)对观测得到的总CPU利用率狕k进行建模,得到其中,Nki表示监测得到的租户i的吞吐率,犎k则定(义为Nk1T,NkKalman滤波器算法在每个监测窗口的结束时Page5图4基于Kalman滤波的资源评估引擎的逻辑架构进行服务时间的迭代评估,初始值包括状态初始值狓^0以及初始的误差协方差矩阵犘0.迭代过程如下:(1)向前推算狓的状态:(2)向前推算状态先验估计误差的协方差矩阵犘-k:(3)计算Kalman增益犓k:(4)由观测变量zk更新狓的状态:(5)更新状态后验估计误差的协方差矩阵犘k:迭代过程中,第4步修正狓的状态是估算值更新的关键,该等式可以简化为狓new=狓old+犓·犲的形式,即Kalman增益犓可以看作修正狓的权重矩阵,利用误差犲和相应的权重修正狓old的数据.同时,在第4步计算中,还需要考虑设置每个租户的事务平均服务时间的估值范围,即非负且小于某个上界:其中,uk表示估值上界.在本文中,我们设置状态狓的最大值小于这一上界:其中设置μ=0.9,且uk=Uk计算修正为3.3滤波器参数影响滤波器的参数设置是影响方法精确度和适应性关键.参数设置包括犙和犚矩阵、初始状态向量及误差协方差以及监测窗口长度等.3.3.1设置犙和犚犙和犚矩阵影响Kalman增益犓,因此影响滤波器对新观测数据的反应.实际中,犙矩阵是不可知的,但如果犙设置过大,则会增大迭代的误差协方差矩阵犘,进而增大Kalman增益犓,导致滤波器对评估误差反应过大,最终造成评估结果抖动;如果犙设置过小,则会降低Kalman增益犓,最终降低滤波器对评估误差的响应性,难以追踪服务时间变化.在本文中,我们的应对策略是将犙k设置为对角矩阵,且对角线元素利用前三次迭代产生的狓值动态计算获得,即犙k=diag(ξ1,ξ2,…,ξN),且ξi=(Ci,k-1-Ci,k-2+Ci,k-3的测量误差的协方差矩阵,因此可以在服务器空载状态下统计获得.4.2.3节的实验结果显示犙和犚矩阵设置的正确与否对评估精确度存在较大影响.3.3.2设置初始状态向量及误差协方差一些研究工作认为初始状态向量及误差协方差的设置对评估结果影响较小.但是,我们发现设置适当的初始状态向量,并利用转换矩阵犃对每次迭代的输入状态向量进行动态修正,可以提高方法收敛性(见4.2节).我们根据排队论,在各监测窗口内,对租户的事务平均服务时间进行估算[11],设置初值状态向量和犃矩阵的取值,等式(4a)修正为当k=1时,初始状态向量狓^0的各参数设置为Ci,1=rti,1(1-UCPU,1),其中rti,1表示在第一个监测窗口内租户i的事务平均响应时间.另外,因为各租户的事务平均服务时间是独立的,所以设置初始状态向量的误差协方差犘0为一个对角矩阵:犘0=diag((C0数初始值的平方.当k>1时,设置转换矩阵犃k=(C1,k/C1,k-1,C2,k/C2,k-1,…,Ci,k/Ci,k-1,…,CN,k/CN,k-1),其中Ci,k=rti,k(1-UCPU,k),表示在第k个监测窗口第i个租户的事务平均服务时间的预测值.利用转换矩阵动态修正滤波器的输入状态,本质上是增加了观测参数,有利于提高方法收敛性[12].3.3.3设置监测窗口长度文中滤波器的迭代步长即为监测窗口长度.在监测窗口中,方法需要获得各租户的吞吐量Nk均响应时间rti,k以及总CPU利用率zk,这些数据是在监测窗口内采样并计算平均值获得.因此,较长的监测窗口内会提高监测数据的精确度,但也会降低Page6方法对服务时间变化的适应性.相反,较短的监测窗口可以快速追踪服务时间的变化,但代价是增大了监测数据误差,最终影响方法的评估精确度.在4.2.4节中,我们将在持续变化的负载环境下,分析监测窗口长度对方法精确度的影响.3.4收敛性与复杂度上述Kalman滤波迭代计算的收敛条件是,等式(3)是线性的,且满足可识别条件(identifiabilitycondition)[12].可识别条件要求观测数据至少与状态向量狓的参数数量相等,且各观测数据间是不相关的(noncorrelated).在本文中,易知等式(3)是线性的,同时,方法对每个租户的事务吞吐率进行监测,观测数据等于状态向量狓中的参数数量,并且,各租户的事务吞吐率之间是独立的,因此满足Kal-man滤波的收敛条件.本方法一次迭代的复杂度为O(N3),N为宿主在同一中间件服务器上的租户数量.因为观测值z定义为CPU总利用率,而犎和犓是向量,所以式(4c)中求逆退化对一个数求倒数.剩下复杂度最高的计算是式(4e)所对应的步骤,其复杂度为O(N3).因此方法总的复杂度为O(N3).4实验案例1:TPC-W电子商务应用本节针对TPC-W电子商务应用设计了一系列实验,分析滤波参数设置对资源评估精确度的影响,并且,在4.2.5节与文献[7]中使用的回归分析方法进行了比较.4.1实验方法与环境选用TPC-W基准测试作为实验基础.TPC-W是一个广泛使用的电子商务测试基准.实验选用了中国科学院软件研究所软件工程技术中心研发的符合TPC-W基准规范的Bench4Q测试套件①,可模拟复杂、可控的多租户访问负载.如图5,实验环境是一个典型的两层架构系统,包括:1个Tomcat中间件服务器和1个DB2数据库服务器;3个客户端模拟标示为“租户1”、“租户2”、“租户3”的3个租户负载,访问部署在Tomcat上的电子商务应用;资源评估引擎收集Tomcat的运行时日志信息.表2给出了软硬件环境的具体信息.我们将Tomcat分别运行在WindowsServer(2003)和Linux(2.6.18)两个操作系统环境下进行测试,评估结果具有相似特征,表示方法具有操作系统独立性.受篇幅所限,下面我们仅给出Windows环境下的测试结果.租户负载生成器Java中间件服务器(Tomcat6.0)数据库服务器(DB2-V9.5)PentiumIV/3.8GHz21资源评估引擎实验中方法评估误差的计算方式如下:在每次测试中,每隔30s计算租户的事务平均服务时间的相对误差绝对值ei=Cnew最新的评估结果,Snew的事件追踪机制得到的服务时间直接度量值②,接着计算每次测试的平均相对误差绝对值(MeanAbsoluteRelativeError,MARE).图6表示所生成的3个租户负载.X轴表示时间,Y轴表示并发用户数,可以看到,每个租户的负载大小随时间持续变化.负载组成分为固定和变化两种,前者表示所有租户负载起始于相同的负载组成,且测试过程中保持不变,后者则表示租户的负载组成以一定长度的Tchange为变化周期,交替生成3种负载组成模式.4.2实验结果及分析4.2.1追踪服务时间变化在该实验中,我们分析本文方法在负载组成变化情况下,对租户的事务平均服务时间的评估效果.①②Page7如图6所示,每个租户的事务平均服务时间随着浏览、购物以及订单3种负载组成模式的交替而变化.实验中,设置负载组成的变化周期Tchange=1800s,评估方法的监测窗口长度设置为T=Tchange/10=180s(远小于Tchange).滤波器初始状态向量及误差协方差矩阵根据3.3节提供的方法进行设置,Q0=diag(1,1,1).图7显示了方法追踪服务时间变化的实验数据.X轴表示时间,Y轴表示租户的事务平均服务时间.图中曲线“租户N评估值”表示实验中每个监测窗口内租户N的事务平均服务时间评估值的变化,曲线“租户N监测值”表示相应的直接度量值的变化.实验数据显示,与直接度量值相比,当负载组成变化时,方法需要经过最多4个监测窗口的延迟,然后评估值会收敛到直接度量值附近,反映出良好的收敛效果和对服务时间变化的适应性.4.2.2犙和犚的设置与调整在该实验中,分析犙和犚矩阵设置对评估结果的影响.首先,将犙矩阵根据α因子增大或减小,α的取值范围是0.01到100.图8(a)、(b)分别显示在负载组成固定(购物模式)和变化环境下的方法精确度.X轴表示不同犙矩阵设置,Y轴表示MARE及其标准偏差.对比实验数据,可以观察到:(1)如图8(a)所示,在负载组成固定时,曲线“静态犙”表示在α因子变化得到的不同静态犙矩阵情况下,3个租户的事务平均服务时间的评估误差;曲线“动态犙”表示采用3.3节中动态犙矩阵设置时的评估误差.实验数据显示,评估误差均小于7%.(2)如图8(b)所示,在负载组成变化时,静态犙矩阵设置的评估误差大于40%,而动态犙矩阵设置的评估误差则小于5%.上述观察表明,当负载组成固定时,动态更新犙矩阵并不会影响方法精确度,反之,则需要在方法迭代时根据近期追踪数据对犙矩阵进行更新.接下来分析犚矩阵设置对方法精确度的影响.犚矩阵根据β因子增大或减小,β的取值范围是0.01到100.图9(a)、(b)分别显示了方法在负载组Page8成固定(购物模式)和变化环境下,不同犚矩阵设置的方法精确度.实验数据显示,在上述环境下,方法精确度均受到犚矩阵设置的影响,随着犚矩阵值增大时,方法对观测数据的适应性降低,评估误差持续增长.4.2.3状态向量的初始设置与调整在该实验中,分析状态向量的初始设置以及动态调整对评估结果的影响.图10(a)、(b)分别显示了在负载组成(购物模式)固定和变化环境下的方法精确度.X轴表示4个不同狓^0设置:狓^0C3,1);狓^1图10不同狓^0设置下的MARE为验证这一推断,我们修改了TPC-W电子商务应用,在其中两个租户的事务中注入CPU密集型操作.图11显示了修改后,在负载组成变化环境下的实验数据.可以看到,在对状态向量设置适当的初始值并进行动态调整的情况下,评估误差小于5%,而其它3种情况的评估误差则大于50%.图11还显示了状态向量各参数的初始设置值与直接度量值的余弦相似度(cosinesimilarity).余弦相似度是一种用于比较两个n维向量的相似度的度量,相似度的值域为0到1.相似度接近1则表示两个向量越近似.如图11所示,可以发现狓^0于其它3种设置.上述观察表明,通过设置适当的初始状态向量,并利用转换矩阵动态修正状态向量,可狓^30=(C2,3,C2,3,C2,3),并且对于后3种设置不进行状态向量的动态调整.Y轴表示MARE及其标准偏差.实验结果显示,负载组成固定时,评估误差小于5%,负载组成变化时,评估误差也小于10%.上述观察显示状态向量的初始设置及动态调整对评估结果的影响很小.但是,产生这一现象的原因可能是由于各租户的事务平均服务时间存在的差异并不显著(如图2所示,浏览模式大约为25ms,购物模式大约为20ms,订单模式大约为15ms),因此,状态向量的初始设置及动态调整对方法的收敛效果影响较小.以提高滤波器的收敛速度,进而提高了方法精确度和适应性.4.2.4监测窗口长度的设置与调整在前文实验中,我们设置负载组成的变化周期Tchange=1800s,监测窗口长度则远小于Tchange,设置为T=300s.在本节实验中,我们减小负载组成的变化周期为Tchange=300s,分析不同监测窗口长度对评估结果的影响.作为比较,我们还在负载组成(购物模式)固定环境下进行了相同的实验.图12(a)、(b)分别显示在负载组成固定和变化环境下的方法精确度.X轴表示不同的监测窗口长度设置,T=10s,30s,60s,100s,200s,300s,400s,500s,600s,Y轴表示MARE及其标准偏差.对比实验数据,可以观察到:(1)在负载组成固定环境下,如图12(a)所示,较长的监测窗口可以获得更高的精确度.但是,当负载组成变化时,较长的监测窗口设置降低了方法适应性.如图12(b)所示,当T>100s时,由于方法需要经过1至多步的收敛过程,较长的监测窗口将显著延长收敛时间,因此评估误差逐渐增大.(2)如图12(b)所示,较短的监测窗口并没有受异常点的影响,可以很好地追踪服务时间变化,并获得可接受的评估误差.当T=30s时,评估误差小于Page9图12不同T设置下的MARE5%.这可能是由于滤波器经过连续多次迭代后,消除了异常点的影响.但是,当监测窗口过小,无法获得足够精确的观测值时,评估误差逐渐增大.例如,当T=10s,评估误差超过了20%.上述观察说明,通过设置适当的监测窗口长度,我们的方法可以适应负载组成快速变化的环境,获得较为精确的评估结果.4.2.5与回归分析方法比较在该实验中,我们在负载组成变化环境下,利用文献[7]提出的回归分析方法对多租户CPU资源进行评估.方法使用滑动窗口进行数据采样,然后使用MATLAB提供的非负的最小二乘法进行回归分析,得到各租户的事务平均服务时间的评估值Ci.该方法的目标是最小化误差ε=∑j并且Ci0,其中j用于标示滑动窗口内的样本.通常,回归分析方法的采样周期对精确度影响较小[7],图13不同负载组成变化周期和滑动窗口大小设置下的MARE上述观察表明,难以权衡回归分析方法的精确度和适应性.实验结果显示,负载组成变化周期较大时,如TchangeSizesliding,可以获得较好的评估效果,这表明回归分析方法的精确度受样本数量和质量的影响较大.当负载组成快速变化时,需要降低滑动窗口的大小.但是,受异常点的影响,较小的滑动窗口难以收集到足够多的回归分析样本来保证为了更好地追踪服务时间变化,我们使用一个较小的采样周期T=30s.然后,我们通过设置不同的滑动窗口大小Sizesliding来分析回归分析方法的评估效果.图13(a)、(b)分别显示了在负载组成慢速变化(Tchange=1800s)和快速变化(Tchange=300s)两种环境下的评估误差,滑动窗口大小取值范围从120s(小于快速变化周期)到2700s(大于慢速变化周期).对比实验数据,可以观察到:(1)负载组成慢速变化时,较大的滑动窗口可以获得更高的精确度.如图13(a)所示,可以看到,在负载组成变化周期附近,评估效果最优.但是,当滑动窗口过大或过小时,评估误差迅速增大.(2)负载组成快速变化时,回归分析方法难以追踪服务时间变化.如图13(b)所示,虽然可以在负载组成变化周期附近找到一个滑动窗口大小的最优取值,但评估误差已经超过了30%.方法精确度.5实验案例2:在线Forge应用在该实验案例中,我们在支撑多个软件开发团队的Forge生产环境中验证方法的精确度,并基于本文方法设计侵占型租户检测和过载保护策略,对Page10方法的应用效果进行验证.5.1实验方法与环境TrustieForge是在国家高技术研究发展计划(863)课题“可信的国家软件资源共享与协同生产环境”支持下,研发的一个基于互联网的软件协同开发环境.我们在本地部署了一个企业版TrustieForge系统,支持了包括12个软件项目团队(租户)、上百人的软件项目管理和协同开发活动.如图14所示,TrustieForge系统是一个三层架构系统,包括部署Trustie门户的Nigix服务器、部署TrustieForge系统的Tomcat中间件服务器以及若干数据库服务器、邮件服务器等.资源评估引擎收集Tomcat的运行时日志信息,所有系统运行在WindowsServer2003.5.2实验结果及分析5.2.1租户CPU资源评估通过对TrustieForge系统进行分析,我们发现该系统包含两百多种事务,并可分类为项目浏览(browsing)和项目执行(processing)两类,前者主要访问缓存内容,后者需要动态生成富客户端页面,是CPU密集型的事务.图15显示了在一个典型的工作日中这两类事务组成比例的变化情况,由此可见,事务的平均服务时间也是动态变化的.图16显示了方法的评估结果,监测窗口大小设置为T=30s,图中曲线表示12个租户的评估误差的累积概率分布(CumulativeDistributionFunction,CDF).如图16所示,12个租户的90%以上的评估误差都小于5%,并且资源评估引擎对12个租户的每次迭代计算耗时仅为2ms.5.2.2侵占型租户检测与CPU过载保护TrustieForge采用EclipseRAP①技术动态生成项目执行相关的富客户端页面(RAP页面).在Tomcat中间件服务器中,RAP页面的生成过程是CPU密集型的任务,当进行项目执行的租户负载增高时,会导致中间件服务器的CPU过载.在该实验中,我们通过常用的并发控制(concurrencycontrol)技术来避免CPU过载.对于多租户应用,限制所有租户的并发量对于非侵占型的租户而言是不公平的,因此需要根据各租户的CPU资源状态进行细粒度的并发控制.在已有工作中,我们曾提出一种细粒度的中间件并发控制框架(QoS-enabledWork-Manager,QWM)[13].在该实验中,我们基于QWM框架和本文提出的CPU资源评估方法,设计实现一种面向多租户的CPU过载保护策略,其基本思路如下:利用CPU资源评估方法,在线监测各租户的CPU资源状态以及Tomcat中间件服务器的总CPU利用率;当总CPU利用率大于预先设定的过载阈值时,则根据各租户的CPU资源状态,检测占用资源最多的租户,标示为侵占型租户,然后,依据排队论模型,求解对侵占型租户的并发量限制,并利用QWM框架进行并发控制;当总CPU利用率小于预设过载阈值时,并且QWM框架中存在由于前期并发限制而出现的等待队列时,则逐步降低并发限制,直到总CPU利用率接近过载阈值.为了验证上述策略的效果,我们建立了一个包含5个租户的TrustieForge实验环境,并通过Bench4Q录制并模拟租户负载.在该实验中,租户1(Tenant1)被设计为侵占型租户,进行更频繁的项目执行操作,并且负载大小进行高低交替.CPU过载阈值根据已有经验被设置为85%[14].图17(a)、(b)分别显示了未使用过载保护策略和使用过载保护策略时各租户的CPU利用率以及总CPU利用①EclipseRAP,URL:http://www.eclipse.org/rap/Page11率的变化情况.在图17(a)中,当租户1出现高负载时,可以观测到其它租户的CPU利用率出现明显的下降,并且总CPU利用率近100%.上述现象表明,未使用过载保护策略时,租户1在高负载时侵占了其它租户的资源,并严重威胁了系统可用性.在图17(b)中,由于使用了过载保护策略,租户1在高负载时被检测为侵占型租户,受到了并发限制,对其它租户的影响明显降低,并且总CPU利用保持在85%以下.由此可见,基于本文的多租户CPU资源评估方法,上述过载保护策略可以有效检测侵占型租户,并通过对侵占型租户的并发限制,将总CPU利用率保持在合理范围内.6方法局限及未来工作6.1滤波器参数设置文中提出的方法可以在给定的硬件环境下实现多租户Web应用CPU资源的有效评估.但是,精确的评估结果需要准确而充分地理解方法使用的Kalman滤波器的参数设置.(1)我们发现,在负载组成变化环境下,需要在滤波器迭代过程中根据近期的追踪数据动态更新犙矩阵;在负载组成固定和变化环境下,较大的犚矩阵取值都会产生较大的评估误差.(2)我们发现,通过设置适当的初始状态向量狓^0,并利用转换矩阵犃在滤波器迭代过程中动态修正状态向量,可以加快迭代收敛,提高方法的精确度和适应性.(3)我们根据负载组成的变化周期Tchange设置监测窗口长度T,当TchangeT时,可以提高方法的精确度和适应性.在本文中,我们根据经验,手动设置监测窗口长度.在未来工作中,我们将监测负载组成,预测变化趋势,进而实现监测窗口长度的自动设置和动态调整.6.2负载复杂度在本文第1个实验案例中,我们使用TPC-W电子商务测试基准测试本文方法的精确度和适应性.在上述负载环境下,各租户的CPU资源状态是不相关的,满足使用Kalman滤波的可识别条件.但是,如果要进一步提高多租户性能隔离的精确度和效果,需要以事务为粒度,将各个事务的平均服务时间作为状态向量参数,进行评估分析.在这种情况下,由于同一会话的各事务间存在依赖关系,因此违背了可识别条件,将影响评估效果.在未来工作中,我们将针对这一问题展开研究.在第2个实验案例中,我们选择TrustieForge系统作为实验对象,对宿主在同一中间件服务器上的12个租户进行资源评估,取得了较好的评估效果.在未来工作中,我们将在更高密度的租户负载环境下,研究本文方法的评估效果.7相关工作在共享Java服务器中进行CPU资源的在线度量仍存在技术挑战[5].已有工作主要通过本地代码库或程序转换等方法进行CPU资源的在线度量.基于本地代码的方法被广泛使用[15-17].该方法本质上是一种基于采样的度量方法,其精确度依赖于采样时间戳的精密度.由于事务型应用每次请求处理所使用的CPU时间极短,因此对方法使用的时间戳精密度要求很高.例如,Magpie[15]使用Win-dows事件追踪机制实现Windows操作系统环境下CPU资源的精确度量.类似的方法还包括Linux操作系统环境下的Trace工具包[16]以及Solaris操作Page12系统环境下的DTrace[17].方法依赖于操作系统的特性,甚至需要修改操作系统,因此存在系统兼容性问题.另外,方法需要对应用程序的源代码或二进制文件进行探针注入,但是,中间件平台的提供者可能无权修改租户应用.相比之下,本文方法不需要进行探针注入,不依赖于操作系统特性,具有非侵入性和操作系统独立性的优点.Binder等人利用程序转换技术,将Java程序字节码流量转换为CPU资源的使用量[5],方法不存在兼容性问题,但存在较大性能开销(大于30%)[6].林海略等人[2]使用一种渐进式的方法来设置程序转换的检查点,从而得到开销较低且保证精度要求的程序检查点集合.方法首先采用保守的策略找到一组能够保证精度要求的检查点,随后在不损害精度的前提下逐渐缩减检查点的个数.但是,这种方式需要经过较长时间的检查点配置和选择.本文方法利用生产环境中常用的监测数据进行资源评估,因此不会产生性能开销.最近,一些研究工作利用统计分析方法估算资源使用量.例如Zhang等人[7]利用多元回归分析估算事务的平均服务时间.但是,回归分析方法的精确度依赖于长时间、高质量的样本作为输入,容易受到时变资源状态以及样本异常点的影响.已有工作[8]以及本文的实验结果表明此类方法难以对动态系统的时变资源状态进行有效评估,易产生较大误差.Woodside等人[18]提出基于Kalman滤波的性能模型参数在线调整方法.方法通过监测响应时间并构造系统的性能模型,滤波器的优化目标是减小模型预测得到的响应时间与观测得到的响应时间之间的误差.方法使用非线性的方法,通过近似地对性能模型求偏导数获得犎,即计算每一个参数的微小变化对结果的影响.因此,方法计算的时间复杂度是参数个数与性能模型求解时间的乘积,通常需要较长的计算时间[19].本文提出一种线性算法,不依赖于复杂的性能模型,复杂度降为O(N3),可以即时算出结果,更适用于多租户Web应用的在线性能管理.8结束语中间件共享是云计算模式中一种重要的资源共享方式.但是,这种方式容易导致宿主在同一中间件服务器上的多个租户间产生性能干扰.因此,需要为租户提供性能隔离的服务实例.在线度量租户对资源的使用情况是实现性能隔离的前提条件,但是,在共享中间件服务器中直接度量CPU资源使用,需要注入探针,将引起性能开销,并依赖于操作系统的支持.文中针对普遍使用的Java中间件服务器,提出一种基于Kalman滤波的多租户Web应用CPU资源动态评估方法,提供了多租户Web应用CPU资源评估的新途径.本文通过两个实验案例分析方法的评估效果、影响因素和挑战.在第1个应用案例中,我们设计了一系列实验,分析滤波参数设置对资源评估精确度的影响.实验结果表明,通过设置适当参数,本文方法可动态适应持续变化的负载环境,并且与直接度量方法相比,具有可接受的评估误差.在第2个应用案例中,我们在支撑多个软件开发团队的Forge生产环境中验证方法的精确度,实验还表明方法可用于检测侵占型租户,并避免共享中间件服务器CPU过载.
