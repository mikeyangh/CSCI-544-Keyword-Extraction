Page1考虑边位置信息的求解ETSP问题改进贪婪算法饶卫振1),2)金淳1)陆林涛3)1)(大连理工大学系统工程研究所辽宁大连116024)2)(山东科技大学经济管理学院山东青岛266590)3)(中国人民解放军61512部队北京100088)摘要分析了贪婪算法(Greedyalgorithm,GRA)求解欧几里德旅行商问题(EuclideanTravelingSalesmanProblem,ETSP)的求解质量和求解耗时的特点,发现边位置信息是影响GRA的求解质量和求解耗时的主要因素,在Michael模型基础上提出了一种考虑添加边所在位置信息的改进贪婪算法(ImprovedGreedyalgorithm,IMGRA),并阐述了IMGRA的设计思想和相应的构造方法.分别采用IMGRA和GRA求解了90个算例,结果表明:固定参数下的IMGRA平均求解质量较GRA提高55%,求解耗时降低20%.为此,对IMGRA比GRA求解质量更高和求解耗时更短的原因进行了分析.关键词欧几里德旅行商问题;贪婪算法;Michael模型;求解质量;求解耗时1引言合优化中经典的NP-Hard问题.欧几里德旅行商问题即ETSP(EuclideanTravelingSalesmanProblem)是TSP问题中的一种,目前在文献中用来测试的TSP(TravelingSalesmanProblem)问题是组TSP算例绝大部分属于ETSP问题.研究TSP问题Page2无论在理论还是实践方面都具有很大的意义.首先,因为TSP问题从提出至今50多年仍未被完全求解,如果能够提出完全求解TSP问题的算法将是计算科学理论上的历史突破;其次,求解TSP问题的算法能够被广泛地应用到诸多实际领域,如物流配送路线设计、仓库货物搬运、船舶的集装箱装载、电路板转孔等实际领域,因此具有包括来自应用数学、计算机科学、工业工程、管理科学等众多学科的学者研究TSP问题[1-2].求解TSP问题的算法可分为精确算法(Exactalgorithms)和启发式算法(Heuristicalgorithms)两类[2].精确算法能够在理论上确保得到精确最优解,但求解实际问题的耗时巨大甚至不可行.启发式算法是在考虑计算时间成本的基础上,在合理时间内找到近优解甚至最优解的算法.启发式算法又可细分为构建型算法(Constructionalgorithms)和改进型算法(Improvementalgorithms).构建型算法是从最初的空解开始,迭代地添加解成分到解中,直到完全构建解.目前比较典型的构建型算法有贪婪算法(GRA)、最近邻域算法、插入算法、生成树法、双向差额算法[3]、节约法等[4-5].改进型算法是在构建型算法构造出的解基础上,采用优化法则进一步改进解质量的算法.比较常见的改进型算法有k-交换法(k2)、Lin-Kernighan搜索法[6-7]、禁忌搜索法[8-9]、遗传算法[10]、模拟退火法[11]、Ejection-chain算法[12]、蚁群算法[13-14]、神经网络法[15]、粒子群算法[16-17]等.目前求解TSP算法研究的文献大多集中于对现有算法的求解质量改进方面,从而容易忽略算法的其它方面,导致算法的实践应用性不强.算法的求解性能可由5个方面来体现,即求解质量、求解耗时、简易程度、灵活性和鲁棒性,因为其中的求解质量和求解耗时两个性能指标最易量化测量,所以在设计算法时更注重比较这两个指标.从而导致对算法的改进也是在这两个指标之间权衡折中,当前文献对已有算法的改进一般有两种方式:(1)改变算法的执行规则,在适量增加或不增加求解耗时条件下提高求解质量[18-19];(2)科学地混合两种或以上算法,以结合求解耗时低的算法和求解质量高的算法的各自优点产生综合性能更高的混合算法[20-22].然而这两种提高算法性能的方式,难以同时改进算法的求解质量和求解耗时.本文通过分析传统GRA的求解特点发现,因同一因素导致了GRA求解质量不高和求解耗时较长,即GRA只考虑添加边的长度而未考虑边的位置信息.为了在GRA基础上提出一种求解质量更高、求解耗时更少的改进算法,本文针对GRA算法的特点,提出了考虑边位置信息的IMGRA,IMGRA借助Held和Karp[23]提出的模型根据边位置信息重新修正了原始边长信息,而对GRA简洁的求解规则未做任何改变.通过求解来自TSPLIB和文献中的90个算例的结果表明,IMGRA较GRA在保证了求解法则同样简单的条件下不仅明显地提高了求解质量,而且节省了求解耗时,从而实现了同时改进算法的求解质量和求解耗时,并为改进算法性能提供了一种新的思维方式.2TSP问题的描述TSP问题:一个推销员要旅行n个城市,且任意两个城市之间距离已知,求推销员旅行每个城市一次且仅一次,并回到起点城市的最短路径.该问题可以定义在图G=(V,E)上,其中V={1,2,…,n}(n3),E=(i,j),i,j∈V.1,2,…,n代表城市或称为点;(i,j)、dij分别代表城市i至城市j的路和距离或称为点i与点j之间的边和边长.显然,图G为具有n个点且任何点之间均有边的全图,边长dij信息可用n阶矩阵犇表示,其中犇=di()jn×n,dij,i≠jdij=M,i=烅烄烆j所有点且总边长最短的一个简单圈(或称Hamilton回路).一个TSP问题的解(路径)可表示为n个城市{1,2,…,n}的环状排列.令S为存放了一个解的一维数组,那么此解的旅行总距离(路径总长度)可由式(1)计算:显然,使得L(S)取得最小值的一维数组S中存放的排列为TSP问题的最优解[3].TSP问题主要有3种分类方式[7]:(1)按边长矩阵犇是否为对称矩阵,分为对称TSP(STSP)问题和非对称TSP(ATSP)问题;(2)按任意3个城市(点)间距离值(边长)是否满足三角不等式,分为三角不等式TSP问题和非三角不等式TSP问题;(3)设n个城市(点)分布在m维空间中,且任意城市(点)i的位置由一个m维实数向量(x1i,x2i,…,xmi)唯一确定,按n个城市的坐标位置之间距离(边长)是否完全符合欧几里Page3德规则,即任意两个不同城市i、j之间距离(边长)dij=x1i-x1()j槡欧几里德TSP(ETSP)问题和非欧几里德TSP问题.显然,欧几里德TSP问题必为对称三角不等式TSP问题,反之则不成立,本论文中在未特殊说明情况下提到的TSP问题均指的是m=2时(平面)的欧几里德TSP问题.3GRA及其特点分析3.1GRA步骤边,直到添加完n条边形成一个简单圈为止.GRA的求解原理是在图G中按规则依次添加参数与名词解释:tail[n]:记录部分路径的两端点信息数组,如某部分路径两端点分别为4、8,那么tail[4]=8,tail[8]=4;degree[n]:记录每个点的度数数组(度指的是点已连接的边数量);solutionedges[n][2]:记录每步添加边的两端ValidEdges:可添加边的集合.注:以上数组均假设标号由1开始.TSP问题是求总路径长度最短的简单圈,因此GRA添加边的规则为,每次在可添加的边(未添加过的且不会使当前图中出现度为3的点和由少于n个点组成的简单圈的边)中选择最短的边添加至当前图中,最后添加完n条边形成一个TSP可行解[24-25].GRA求解步骤如下:1.ValidEdges=E={(i,j)︱1ji-1,2in},s=1,tail[i]=0,degree[i]=0,solutionedges[i][1]=solutionedges[i][2]=0,其中(1in);2.设dkm=min{dij︱(i,j)∈ValidEdges}(如果dkm不唯一,任选一个),solutionedges[s][1]=k,solutionedges[s][2]=m,如果s=n,进入步3,否则ValidEdges=ValidEdges\{(k,m)},令degree[k]=degree[k]+1,degree[m]=degree[m]+1,分4种情况:点信息数组;(1)如果degree[k]=1且degree[m]=1则tail[k]=m,tail[m]=k,s=s+1,转步2;(2)如果degree[k]=2且degree[m]=1则tail[m]=tail[k],tail[tail[k]]=m,tail[k]=0,ValidEdges=ValidEdges\{(m,tail[m])}∪{(k,i)︱1in,i≠k},s=s+1,转步2;(3)如果degree[k]=1且degree[m]=2则tail[k]=tail[m],tail[tail[m]]=k,tail[m]=0,ValidEdges=ValidEdges\{(k,tail[k])}∪{(m,i)︱1in,i≠m},s=s+1,转步2;得到最终解.(4)如果degree[k]=2且degree[m]=2则tail[tail[m]]=tail[k],tail[tail[k]]=tail[m],ValidEdges=ValidEdges\{(tail[k],tail[m])}∪{(k,i)︱1in,i≠k}∪{(m,i)︱1in,i≠m},tail[m]=0,tail[k]=0,s=s+1,转步2;3.结束构造,由数组solutionedges[n][2]中的信息可显然,GRA是确定性算法,也就是说,如果没有相同长度的边,GRA只能求得唯一解.然而,GRA的演化算法随机GRA,在可添加边集合ValidEdg-es中选择出两条最小边,以一定概率选择其中一条边添加至当前路径,显然随机GRA可重复执行得到更多不同的解,因此,随机GRA是不确定性算法.由于随机GRA和GRA执行规则的思想原理一致,所以在本论文中不考虑随机GRA.3.2GRA求解质量特点分析图1是GRA求解算例kroA150的过程中添加了30、75、135和150条边后的路径图.由图1(c)、(d)易见,GRA求解算例kroA150添加的最后15条边非常长,经计算这15条边的总长度占总路径长度的35.59%,这是最终解质量不高的主要原因.GRA求解其它算例与算例kroA150具有相同的规律,即在求解的前阶段因为添加的边位置比较分散,在最后阶段为了形成一个可行解,就必须要连接较长的边,在表1中列出了GRA求解的90个算例的路径中最长的n/10(n/10表示小于等于“n/10”的最大整数)条边的长度和占总路径长度的百分比数据.由表1可知,GRA求解所有的算例均有在最后阶段连接的较长边的特点,因此,如果采取有效措施提高GRA最后阶段的求解质量,会明显提高GRA的总体求解质量.3.3GRA求解耗时特点分析GRA的耗时主要由搜寻可添加边的耗时决定,显然可添加边集合ValidEdges中边的数量越多,搜寻耗时越长,反之亦然.因此分析GRA的求解耗时即分析可添加边集合ValidEdges中边的数量变化规律,为方便分析,设参数如下:ValidEdges(i):选择第i条待添加边时的可添加边集合;E:全图G中的所有边;A(j):已添加的j条边集合;B(j):添加j条边后,以度为2的点为端点的所有边集合;C(j):添加j条边后,每个部分路径的两个端点确定的边集合,且令C(n-1)=空集(添加该集合中任何一条边至当前路径,就会形成少于n个点组成的简单圈);qk:添加k条边后,Page4图1GRA求解算例kroA150添加完30,75,135,150条边的路径图表1GRA求解算例的路径中最长的狀/10条边之和占路径长度的比重序号算例名称最大的n/10条边占1a2802ali5353att484att5325bayg296berlin5243.767bier12745.858burma1431.099ch13010ch15011CNN14435.6412CNN3437.1713d129114d165515d19816d210317d49318d65719dantzig4236.2720dsj100038.7821eil10122eil5123eil7624fl140025fl157726fl379527fl41728fnl446128.9529gil26230gr120总路径的比例/%序号算例名称最大的n/10条边占41.3755.2655.7758.1247.1237.8136.6737.6671.4228.3333.0336.1647.8042.5031.6061.7057.7663.36Page5度为2的点的数量;vi:vi=|ValidEdges(i)|,即vi等于集合ValidEdges(i)中边的数量;V:计算总量V=v1+v2+…+vn;其中,1in,0jn-1,0kn.根据3.1节可知,ValidEdges(i)=E-A(i-1)∪B(i-1)∪C(i-1),通过分析发现,对于任意j,0jn-1有,A(j)∈(B(j)∪C(j)),所以ValidEdges(i)=E-B(i-1)∪C(i-1),另外通过定义可知集合B(j)中的每条边至少有1个端点是度为2的点,而集合C(j)中的边两个端点均是度为1的点,也就是说,B(j)∩C(j)=,那么ValidEdges(i)=E-B(i-1)-C(i-1),即可由式(2)计算.vi=ValidEdges(i)=E-B(i-1)-C(i-1)n(n-1)烄(i-1)-qi[=烅n(n-1)烆又因任意TSP问题据GRA法则添加n-1条边后必定形成一条通过所有点的Hamilton路,即除路径两端点外,其它点的度均等于2,则qn-1=n-2,由此根据式(2)可计算出vn=1.因此对于任何TSP问题vn恒等于1,那么当1in-1时,vi是如何随qi-1变化的?设qi-1为自变量(i=1时,qi-1=q0=0,2in-1时qi-1i-2,假设qi-1为连续变量),vi为因变量,i和n为常数,据式(2)对qi-1求导数,如式(3)所示.dvidqi-1=0-n()-1-2qi-1-1显然,当1in-1时,vi随qi-1单调递减.通过以上分析可知,GRA在添加边形成一个可行解的过程中,形成度为2的点的数量数列q0,q1,…,qn决定了V值的大小,也就是决定GRA耗时的主要因素,且数列中每个元素对应的值越大时V值越小,即GRA耗时越小,反之亦然.下面分析不同数列q0,q1,…,qn导致V取值发生变化的范围,即求得V的极小值Vmin和极大值Vmax.也就是说,要分析数列q0,q1,…,qn对应的元素值在什么情况下会均取到最大值或均取到最小值.GRA每次添加一条边后会使得该边的两个端点度数同时增加1,那么每添加1条边至多使得当前度为2的点数量增加2,即0qk-qk-12,而且GRA添加n-1条边后必定形成一条通过所有点的Hamilton路,添加n条边后必定形成一条通过所有点的Hamilton回路,也就是,qn-1=n-2,qn=n.结合数列qk定义不难知道q0=q1=0,所以数列qk是以0值为起点n值为终点,步长为0、1或2,且,2in-1时qii-1的数列.那么数列qk如式(4)取值,可使V=Vmin.q0=0,qk=k-1,1kn-1,qn=n(4)如式(4)的数列qk可称为极大数列,即数列中每个元素取得最大值,那么根据式(2)、式(4)可得Vmin的计算式及推导过程如式(5)所示(推导过程见附录(1)).在另一种极端情况(设n为偶数),数列中qk每个元素均取得最小值,因qn=n,qn-1=n-2,且步长不大于2,所以qn-2的最小值为qn-1-2=n-4,同理qn-3的最小值为qn-2-2=n-6,…,当n为奇数时同理,那么数列qk每个元素均取得最小值即如式(6)所示.qk=00kn/()2,qn烄1tn/()2,n为偶数烅qk=00kn()-1/1tn()-1/烆(式(6)中的qk可称为极小数列,也就是数列中每个元素取得极小值,可使V=Vmax.当n为奇数时Vmax的计算式及其推导过程如式(7)所示(推导过程见附录(2.1)).Vmax=∑n式(8)所示(推导过程见附录(2.2)).当n为偶数时Vmax的计算式及推导过程如Vmax=∑nPage6设ρn=Vmax/Vmin,当n趋向正无穷大时ρn的极限值如式(9)所示.limn→+ρn=limn→+烄limn→+烅limn→+烆本文据式(5)、式(7)、式(8)计算了当n分别取图2n取4~1000时Vmax和Vmin的取值(a)和两者的比值ρn(b)4IMGRA4.1IMGRA的思想通过前面的分析发现,GRA初期添加边的位置分散会导致求解质量下降和求解时间增加,因此如果能够设计一种考虑边位置信息的GRA算法克服该缺陷,就有可能在提高求解质量的同时并缩短其求解时间.IMGRA的思想:IMGRA在前期优先添加以边缘点(与其它n-1个点形成的n-1条边的边长之和较大的点)为端点的边(考虑边的位置信息),那么在最后未完全连接的点(度小于2的点)基本为内部点(与其它n-1个点形成的n-1条边的边长之和较小的点),因此在最后阶段连接的边就不会太长,这样就可以克服GRA求解的缺陷,提高GRA的求解质量;而且,IMGRA有规律的优先选择添加以边缘点为端点的边,边缘点很容易在添加边的初期就成为度为2的点,从而IMGRA产生的数列qk更类似极大数列,由此计算总量V更接近Vmin,所以4~1000时对应的Vmax、Vmin值及两者的比值ρn,如图2所示.由图2可知,Vmax明显大于Vmin,当n>100时,ρn的值已大于1.9且越来越逼近2.通过分析GRA求解过程发现,GRA初期添加的边位置比较分散难以形成度为2的点,如图1(a)、(b)所示,因此求解过程中产生的数列qk更类似极小数列,从而计算总量V更接近Vmax,导致耗时较长.因此,要缩短GRA的耗时,应使数列qk更类似极大数列,即在添加边的初期就应形成适量的度为2的点.IMGRA不仅可以提高GRA的求解质量,而且能够缩短求解时间.4.2Michael模型Michael模型是IMGRA的基础,下面简单介绍该模型.Michael模型是使用一个实数向量π=(π1,π2,…,πn)改造TSP问题边长矩阵的模型[21],如式(10)所示.Michael模型设S为存放了一个TSP问题解的一维数组,L(S)表示该解按原边长矩阵计算的路径总长度,()LS表示该解按改造后边长矩阵计算的路径总长度.因TSP问题的解是n个点(城市)标号的环状排列,在解(路径)中每个点均连接两条边,因此据式(1)和(10)可得()LS的计算式,如式(11)所示.Page7L(S)=∑n-1由式(11)易见,对于一确定的实数向量π,任何解S对应的L(S)与()LS之差为常数.显然,将解空间中每个解的路径长度都增加或减少相同的值不会影响解之间的路径长度比较,由此可知改造前后的边长矩阵具有同样的最优解.4.3IMGRA设计Michael模型不会改变解在解空间中的长度次序,但会改变边的长度次序,即原来的长边可能变为短边,反之亦然.如果综合考虑边的位置和边长信息求得实数向量π=(π1,π2,…,πn),按照Michael模型改变每条边的边长,使得以边缘点为端点的边变短,以内部点为端点的边变长,那么IMGRA在开始添加的边会优先选择添加以边缘点为端点的边,从而能够实现在最后阶段形成的部分路径的端点尽量为内部点,降低最后连接较长边的可能性,并使得产生的数列qk更类似极大数列,从而提高算法的求解质量且缩短求解耗时.根据上述分析和Michael模型原理可知,要使以边缘点为端点的边缩短,而使以内部点为端点的边延长,那么向量π=(π1,π2,…,πn)中边缘点对应的分量必定为正数,内部点对应的分量为负数,并且越靠边缘的点对应值越大,越靠内部的点对应的分量值越小,并且π各分量值的大小应适当以确保同时考虑到边位置和边长信息.因此,构造一个符合上述要求的实数向量π是设计IMGRA的核心问题.设以某点为端点的所有边的边长之和(如式(12)所示)评估该点的边缘程度.显然,边缘程度越大该值越大,反之亦然.在式(12)基础上构造一实数向量π=(π1,π2,…,πn)如式(13)所示.π=π1,π2,…,π烄πk=α·Pk-()P/n()-2,1kn,α0烅P=∑n烆nk=1∑n结合式(11)可知,任一TSP问题的解按使用向量π据Michael模型规则改造前后的边长矩阵计算的路径长度完全相同.因此,IMGRA较GRA的区别是依据的边长矩阵信息不同,后者的边长矩阵是通过每个点的坐标值依据Euclidean法则计算得到,而前者的边长矩阵是融合了边位置信息和边长信息的改造矩阵;两者的相同点是采取的构造规则完全相同.5算例与分析5.1算例求解结果式(13)的构造原理:因Pk的大小表示点k的边缘程度,同理Pk-P也可作为表示点k边缘程度指标,设每条边边长为服从相同分布的随机变量,那么Pk的自由度为n-1,Pk-P的自由度为n-2,也就是说Pk-P的大小会随点数量n递增,因构造的向量π要适用于不同城市规模(点数量)的TSP问题,所以向量π的每个分量均除以(n-2),参数α为大于等于零的数,表示以边缘点为端点的边被添加的优先程度.因任何一组数与其平均数的离差之和为零,式(13)中实数向量π的分量之和必定为零,即如式(14)所示.本文分别采用GRA和IMGRA求解了TSPLIB标准库和文献中的90个欧几里德TSP算例(见表2),以验证IMGRA的改进效果.算例选择说明:90个算例中有2个算例CNN144、CNN34来自文献[26],另外88个算例来自TSPLIB标准库(http://www.iwr.uni-heidelberg.de\groups\comopt\software\TSPLIB95\tsp\)且城市数量小于6000.参数说明:在所有算例中IMGRA的参数α均取值为1.求解环境为StudioVisualC++6.0;CPU为AMDturion64×2MobileTL-52,内存为1.5GB,主频为1.61GHz;算例fnl4461、rl5915和rl5934的CPU为Intel(R)core(TM)2Q9400,内存为2GB,主频为2.66GHz.Page8表2GRA和IMGRA(α=1)两种算法求解算例的结果路径长度(偏离/%)序号算例名称最优路径长度1a2802579.003184.81(23.49)3010.90(16.75)0.2340.2040.0002ali5352023.392405.57(18.89)2228.79(10.15)1.6251.2500.0163att4833523.7140160.37(19.80)36203.23(7.99)0.0000.0000.0004att5325bayg299074.159886.21(8.95)9534.62(5.07)0.0000.0000.0006berlin527542.009954.06(31.98)8275.69(9.73)0.0000.0000.0007bier127118282.00133733.02(13.06)125996.17(6.52)0.0310.0310.0008burma149ch13010ch15011CNN14430355.1236205.11(19.27)32496.39(7.05)0.0470.0310.00012CNN3413d129150801.0061136.70(20.35)55022.30(8.31)21.62517.0940.04714d165562128.0071992.21(15.88)68527.15(10.30)51.23538.5940.07815d19815780.0018736.01(18.73)17956.15(13.79)0.1250.1090.00016d210380450.0091174.39(13.33)86308.10(7.28)88.59480.4530.17117d49335002.0040854.62(16.72)38737.79(10.67)1.0941.0470.01618d65748912.0056153.78(14.81)52699.41(7.74)3.0782.2500.03119dantzig42699.00843.74(20.71)699.78(0.11)0.0000.0000.00020dsj100018659688.0021705717.61(16.32)20945284.76(12.25)13.1729.8590.04721eil10122eil5123eil7624fl140020127.0024229.50(20.38)22725.21(12.91)28.40620.1410.06225fl157722249.0025521.40(14.71)24385.34(9.60)40.78129.8430.06326fl379528772.0034246.90(19.03)31130.23(8.20)849.782628.7500.57927fl41711861.0013375.75(12.77)13560.93(14.33)0.6560.5780.00028fnl4461182566.00213416.45(16.90)199443.40(9.24)646.656551.4530.89129gil2622378.002692.85(13.24)2617.37(10.07)0.2500.2030.00030gr12031gr13732gr20233gr22934gr43135gr6662943.583642.65(23.75)3384.38(14.97)2.8912.1720.03136gr9637kroA10021282.0024197.29(13.70)22506.83(5.76)0.0160.0160.00038kroA15026524.0031891.85(20.24)27677.18(4.35)0.0620.0470.00039kroA20029368.0034603.09(17.83)31368.82(6.81)0.1410.1090.00040kroB10022141.0025815.22(16.59)24703.55(11.57)0.0160.0160.00041kroB15026130.0031422.51(20.25)28218.00(7.99)0.0620.0470.00042kroB20029437.0035984.48(22.24)33165.48(12.67)0.1560.1250.00043kroC10020749.0023432.89(12.94)23117.16(11.41)0.0160.0160.00044kroD10021294.0024450.53(14.82)23091.95(8.44)0.0160.0160.00045kroE10022068.0024847.06(12.59)23304.61(5.60)0.0160.0160.00046lin10514379.0016771.83(16.64)15133.86(5.25)0.0160.0150.00047lin31842029.0049910.50(18.75)45036.36(7.16)0.4060.3280.00048nrw137956638.0065601.19(15.83)61191.99(8.04)31.92223.2340.06249p65434643.0045355.72(30.92)40739.29(17.60)2.1402.0310.03150pa56151pcb117356892.0066695.30(17.23)63654.99(11.89)20.14013.9380.04752pcb3038137694.00164777.36(19.67)149678.85(8.70)440.766309.7650.32853pcb44250778.0060635.63(19.41)55958.78(10.20)0.7190.6720.01554pr1002259045.00305460.15(17.92)287755.45(11.08)12.3448.0310.04755pr10744303.0047911.52(8.15)46435.27(4.81)0.0150.0150.00056pr12459030.0064997.30(10.11)60268.40(2.10)0.0160.0150.00057pr13696772.00116058.33(19.93)105621.15(9.14)0.0170.0160.00058pr14458537.0065845.66(12.49)60976.31(4.17)0.0470.0310.00059pr15273682.0084881.43(15.20)84103.79(14.14)0.0470.0310.00060pr22680369.0096997.27(20.69)86166.31(7.21)0.1500.1090.00061pr2392378032.00457575.50(21.04)425878.85(12.66)188.266132.6560.172IMGRA(α=1)Page9路径长度(偏离/%)序号算例名称最优路径长度62pr26449135.0053850.61(9.60)52691.80(7.24)0.1880.1880.00063pr29948191.0057631.74(19.59)52711.61(9.38)0.3130.2810.00064pr439107217.00124548.49(16.16)119790.94(11.73)0.8750.7180.01665pr76108159.00140351.17(29.76)111956.35(3.51)0.0000.0000.00066rat1952323.002758.04(18.73)2448.80(5.42)0.1100.0780.00067rat5756773.008222.12(21.40)7259.06(7.18)2.0781.3750.01668rat7838806.0010391.68(18.01)9640.23(9.47)5.8283.6560.03169rat991211.001481.10(22.30)1313.76(8.49)0.0150.0150.00070rd1007910.009254.03(16.99)8525.77(7.78)0.0160.0150.00071rd40015281.0017894.27(17.10)16370.47(7.13)0.7970.6090.01572rl1304252948.00301891.41(19.35)277634.77(9.76)25.35919.6400.04773rl1323270199.00310146.92(14.78)291634.18(7.93)26.20321.2650.06274rl1889316536.00379193.98(19.79)350103.72(10.60)77.87565.5780.10975rl5915565530.00639615.60(13.10)621012.78(9.81)1362.2811170.9841.76476rl5934556045.00628048.93(12.95)609962.26(9.70)1434.7651170.3441.78177st7078tsp2253916.004682.65(19.58)4170.00(6.49)0.1570.1410.00079u1060224094.00281913.11(25.80)252506.15(12.68)13.8758.9690.03180u1432152970.00181596.11(18.71)166736.65(9.00)25.04721.9370.04781u15942080.0048915.62(16.24)45426.27(7.95)0.0470.0470.00082u181757201.0067048.18(17.22)61688.82(7.85)88.14151.4850.09483u215264253.0074390.50(15.78)70513.42(9.74)159.48489.0470.12584u2319234256.00265527.12(13.35)244893.74(4.54)109.25098.8750.17285u57436905.0044920.08(21.72)39710.46(7.60)2.2031.4680.01686u72441910.0047937.93(14.38)45012.52(7.40)4.2032.9060.03187ulysses1668.5986.79(26.53)75.79(10.50)0.0000.0000.00088ulysses2270.1389.44(27.53)76.21(8.67)0.0000.0000.00089vm1084239297.00287863.39(20.30)261317.49(9.20)12.70310.7500.03190vm1748336556.00395111.75(17.40)373242.66(10.90)54.70346.7820.093GRA和IMGRA的求解结果如表2所示.表2各栏中,算例名称为算例名,其中包含的数字为算例的城市数,如“fnl4461”为有4461个城市的TSP问题;最优路径长度为算例的已知最优解路径长度(“—”表示已知最优路径未知);路径长度(偏离/%)为GRA或IMGRA求解的路径长度,偏离/%=100×(路径长度-最优路径长度)/最优路径长度,即偏离/%为GRA或IMGRA的路径长度超过最优路径长度的百分比,如果最优解路径长度未知,用IMGRA求解的路径长度替代;求解耗时为GRA和IMGRA求解一个解的耗时;Michael模型耗时为Michael模型改造边长矩阵的耗时.由表2可知,在IMGRA求解的90个算例中有89个算例(27.fl417算例除外,27为在表2中的序号,论文剩余部分均用此格式引用表2中的算例)的求解质量优于GRA,有39个算例(算例名称带“”)IMGRA的求解的路径长度偏离与GRA的偏离度之差超过10%,IMGRA求解90个算例的解与其最优解的偏离平均值为8.22%,GRA为18.08%,即IMGRA较GRA的求解质量提高了55%;IMGRA求解90个算例的总耗时为4666.320s,IMGRA(α=1)90个算例的Michael模型总耗时为7.262s,GRA求解90个算例的总耗时为5859.202s,90个算例的IMGRA+Michael模型总耗时较GRA的总耗时减少了20.2%.每个算例的IMGRA与GRA求解质量和耗时对比如图3所示.求解质量说明:因TSP问题的解空间非常庞大,构建型算法求解速度迅速,由此,构建型算法求解TSP问题的路径长度偏离一般都在10%以上.Johnson等人[5]在文献中列出了包括贪婪算法在内的4种常用构建型算法的求解结果,如表3所示.在表2中共有71个算例的城市规模n在[102,103.5]即100~3162范围内,其中67个算例的最优路径已知,IMGRA求解该67个算例路径长度偏离的平均值为9.22%,显然,比表3中最优求解算法CHR的9.73%更低.表3David的文献中4种常用构建型算法求解结果城市规模n1029.59.219.525.6102.51039.711.317.026.0103.5平均偏离/%9.7310.7518.0325.83Page10求解耗时说明:在求解TSP算法中通常有以下方法缩短耗时[27-28]:(1)边长矩阵中数据设定为整数型;(2)对于大规模欧几里德TSP(n1000)算例,使用最近邻域表,且不预先计算边长矩阵,只在用到某边时才计算;(3)使用更优化的数据结构.并且针对求解ETSP问题的标准GRA算法可以采用K-dTree[29]方法辅助GRA算法提高效率,实践证明这些方式能够非常有效减少算法的耗时.由于本文以比较GRA和IMGRA相对耗时为目的,因此,本程序边长矩阵的数据类型为双精度型、没有使用最近邻域表和优化的数据结构,但并不影响比较图3IMGRA(α=1)与GRA求解90个算例的质量和耗时对比图GRA和IMGRA的耗时.5.2IMGRA求解质量分析图4是IMGRA在求解算例kroA150过程中添加了30、75、135和150条边后的路径图,对比图1可以清楚的看出,IMGRA添加边的过程比GRA更有规律,IMGRA添加边的过程由外至内,GRA添加的边比较分散几乎无位置规则.IMGRA初期添加的边优先选择以边缘点为端点的边,使得在添加后期的未完全连接的点(度小于2的点)为内部点,因此IMGRA最后连接的边不会太长,而GRA只根据边长信息不考虑边的位置选择要添加的边,图4IMGRA(α=1)求解算例kroA150添加完30、75、135和150条边的路径图Page11因此添加到最后阶段未完全连接的点可能分布在任何位置,并且为形成一个可行解必须连接这些点,从而导致求解质量在最后阶段迅速恶化.为了进一步分析IMGRA最后阶段的求解质量优于GRA,并最终提高整体求解质量,设参数如下:令LIMGRA为IMGRA求解的路径长度;LGRA为GRA求解的路径长度;Lopt为最优路径长度;IMGRAlm为IMGRA求解的路径中最大的m(1mn)条边之和;GRAlm为GRA求解的路径中最大的m条边之和.由式(15)、式(16)可知,参数θL的含义为GRA与IMGRA的路径长度偏离之差;参数θl的含义为GRA与IMGRA的路径中最长的m条边之和的差占最优路径长度的百分比.通过对比参数θL和θl的大小可以更清楚地看出IMGRA的求解质量提高的主要原因是最后添加的边比GRA要短.本文的90个算例对应的θL、θl值(m=n/10)如图5所示.由图5可看出,除5个算例11.CNN144、24.fl1400、26.fl3795、33.gr229、81.u159外的85个算例对应的θl均大于θL,这说明IMGRA在求解的绝大部分算例时添加的前n-n/10条边的长度和要大于GRA,而IMGRA在添加最后的n/10条边的长度和要远小于GRA,并使得总路径长度小于GRA.这说明IMGRA在添加边的前期要比GRA更加合理,分摊了在后期连接较长边的风险,却能使得总路径长度较大的风险更小.即IMGRA综合考虑了全局信息(边的位置)和局部信息(边长)选择要添加的边,而GRA仅使用了边长局部信息选择要添加的边,因此IMGRA求解的质量会更高.5.3IMGRA求解耗时分析由本文3.3节可知,在添加边的过程中形成的数列qk是GRA耗时的决定因素.当数列qk是极大数列时V=Vmin;当数列qk是极小数列时V=Vmax;且当n逐渐增大时Vmax的值越来越接近Vmin的两倍(如图2(b)).因qk随k值变动的曲线可在边长为n的正方形中绘出,由此可用洛伦茨曲线计算基尼系数的方法计算qk随k递增的均匀程度μ,而且当数列qk越接近极大数列时,μ值越小,越接近极小数列时,μ值越大.因此我们通过分别计算IMGRA和GRA求解过程中生成的数列qk对应的μ值来判断其计算总量V的大小,即当μ值越小时,表示数列qk更接近极大数列,其计算总量V也接近Vmin,反之亦然.μ值等于曲线qk与正方形对角线形成的区域面积SA除以半个正方形的面积S,因曲线qk是由n+1个坐标已知的点连接构成,则SB(SB=S-SA)的值可通过几何分割法近似计算,即将区域SB如图6所示分割为n部分,并近似地将被分割的曲线qk看成直线,那么第k(1kn)部分的面积sk=12k-k()()-1·qk-1+q()k=1由qk形成的曲线对应的均匀程度μ值可由式(17)计算.S=SA+SB=n2烄μ=SAS=S-SBS=1-∑n烅烆设μmin表示极大数列qk随k递增均匀程度,μmax表示极小数列qk随k递增均匀程度.结合式(4)、(6)和Page12式(18)可计算μ值的取值范围[μmin,μmax],如式(18)所示.烄μmin=1-=1-烄1-烅μmax烅1-0.5+1烆烆图790个算例的IMGRA和GRA对应μ值曲线和算例u2152的qk曲线图IMGRA和GRA求解90个算例形成的qk曲线对应的μ值如图7(a)所示,因篇幅所限仅列出算例u2152的极大数列、极小数列、IMGRA和GRA对应的qk曲线及其参数μ值,如图7(b)所示.由图7可知,IMGRA求解每个算例对应的μ值均小于GRA,因此,IMGRA的计算总量V更贴近Vmin,GRA的计算总量V更类似Vmax,由式(7)、(8)和式(9)可知,Vmax接近是Vmin的2倍,这是IMGRA耗时要小于GRA的主要原因.虽然作者不能从理论角度严格地证明IMGRA比GRA的速度更快,但通过实验结果和上述分析可以在一定程度上说明,本文提出的优先添加外部边的策略有助于提高标准GRA的速度.5.4参数α分析参数α的实际含义为:以边缘点为端点的边被选择的优先程度,α取值越大表示优先程度越大,反之亦然.4.1节中IMGRA求解所有算例的参数α取值均为1,但对于很多算例并不是最佳取值.本文首先分析了当参数α分别取值0.5,1,1.5,…,19.5,20共40个不同参数时IMGRA求解3个算例att48、gr120和kroA100的质量偏离,如图8所示.由图8可知,IMGRA求解该3个算例的最佳参数取值均小于2,当参数取值大于2后,求解质量趋势持续恶化,因此我们选择参数α等于0.1,0.2,…,1.9,2.0共20个不同值,分别求解87个算例(3个大算例28.fnl4461、75.rl5915和76.rl5934设最佳α取值等于1),求出了每个算例的最佳α取值.每个算例的最佳α取值及对应的求解路径偏离(最优路径长度未知的算例,用α=1时IMGRA的路径长度替代)如图9所示.在90个算例的参数α均取最佳值条件下IMGRA求解的路径长度偏离平均值为6.55%,比Page13α=1时IMGRA的8.22%提高了20.33%.其中90个算例中有69个算例对应的最佳参数α值在[0.8,1.3]范围内,有84个在[0.6,1.6]范围内,且在90个最佳参数α值有19个为1(如图9(b)所示).值得注意的是当α等于0.3时IMGRA求解算例27.fl417的解为12963.50(9.30%),明显优于表2中的GRA结果13375.75(12.77%).由上述分析可见,参数α值的选择原则是不宜图990个算例的最佳α取值和α等于最佳取值与α=1时IMGRA求解每个算例的路径长度偏离6结束语本文针对ETSP问题提出的一种改进贪婪算法IMGRA与传统GRA相比不仅求解质量更高而且耗时更少.传统GRA求解ETSP问题时,只根据原始边长信息在可添加边集合中选择最短的边添加至当前路径,而当前最短的可添加边所在的位置没有任何规律性,因此GRA在开始添加的边位置非常分散,而后添加的边逐渐将这些分散的边连接起来,形成一个可行解,这一特点不仅会导致GRA求解质量下降而且会使得求解时间增加.IMGRA针对GRA未考虑添加边的位置信息的缺点,采用Mi-chael模型将位置信息和原始边长信息融合在一起,重新修正了边长矩阵,而没有改变GRA求解的简洁规则.本文提出的算法理论和实践价值:(1)通过求解90个ETSP算例和文献数据表明,不但IMGRA(α=1)的平均求解质量为8.22%明显优于GRA的18.08%,而且平均耗时仅为GRA的80%,这也突破了改进某种算法应在求解质量和求解速度两指标间权衡的规则,使得同时提高某种算法的精度和速度指标成为可能;太大也不宜太小,当α取值太大,IMGRA添加边几乎只考虑到边的位置信息,而几乎忽略了边长信息;当α取值太小,IMGRA考虑边位置信息不够,会导致求解质量与GRA非常接近(当α=0时,IMGRA退化为GRA).因此我们建议如果使用IMGRA求1个解可直接取α=1,如果求多个解参数α可在[0.6,1.6]范围内选择不同值.(2)另外值得注意的是IMGRA(α=1)求解相同城市数量范围内的算例平均偏离值为9.22%,优于目前最好的构建型算法Christofides生成树法的平均求解质量9.73%;(3)TSP算法通过细微修改甚至可直接用于诸多实践问题,特别是车辆路径问题(VehicleRoutingProblem,VRP),本算法求解规则简单、速度快并且具有满意的求解质量,对于求解时效性要求较强的VRP问题具有一定的实用价值.
