Page1分布式约束优化问题研究及其进展1)(国防科学技术大学计算机学院长沙410073)2)(中国电子设备系统工程公司北京100039)摘要多Agent协作过程中的许多问题都可以被抽象为分布式约束优化问题(DCOP),如规划、行程安排、分布式控制和资源分配等.这些问题关注于如何通过协调多Agent之间的相互决定,以达到一个全局最优决策的目的.相应地,分布式约束优化算法是用来求解此类问题的一种有效方式.该文对分布式约束优化问题进行了综述,首先,阐述了分布式约束优化问题的基本概念,并提出了一种分布式约束优化算法的分类框架.其次,根据该分类框架,介绍了目前已有的分布式约束优化算法,并加以对比分析.此外,分析了分布式约束优化问题的相关应用.最后,指明了分布式约束优化领域的未来研究趋势.关键词分布式约束优化;Agent;人工智能;分布式约束优化算法1引言云计算是随着计算、存储以及通信技术的快速Page2般来说,CP希望能够尽可能地提高其资源利用率以谋求自身利益的最大化.然而,在很多情况下,用户/租户可能需要同时租用多个CP的资源来完成其WK请求,不同的CP由于资源的有限以及相互之间需要互相通信等而使它们之间存在一定的约束.不同CP出于对自身收益最大化的目的,在分配资源给WK时并未考虑它们之间的约束,使得其分配给用户/租户的资源并非是最合理的,导致不同CP之间的资源分配方式存在一定的冲突(违背了相关的约束),最终使得全局的资源利用率较低.我们称将WK部署在CP提供的基础设施资源上的问题为云计算中的资源分配问题(ResourceAllocation,RA)[1-2],不同CP之间在RA中因为共同服务于同一WK而导致它们在分配资源时存在一定的约束,如它们之间互相通信等.如何有效地解决RA问题并且使得全局资源利用率最大化是一个非常具有挑战性的工作.约束是事物之间相互制约\冲突关系的数学建模[3].约束满足问题(ConstraintSatisfactionProblems,CSPs)[4]的目标是找到一个“和谐”的解,即满足问题中所有约束条件的解.自Montanari等人[5]首次在图像处理问题中提出了CSPs以来,CSPs作为一种重要的求解方法在人工智能与计算机科学等领域得到了广泛的应用[6],从n皇后、图染色等经典问题到时序安排、计划编制、资源分配等问题,都可以通过建模成CSPs来求解[4].通过将RA建模成CSPs问题进行求解,能够找到一个满足WK约束的资源分配方式,即为一个约束满足解,但CSPs并未考虑解的质量问题,解的质量在RA中指部署WK所付出的“代价”,即部署该WK所需要的物理资源的数量.然而,在很多情况下,CP往往希望部署一个WK所花费的代价最小,即分配给该WK的资源最少,在这种提出了最优性要求时,CSPs则无法适用.约束优化问题(ConstraintOptimizationProblems,COPs)[7-8]在CSPs的基础上进一步提出了最优性的要求.分布式约束优化问题(DistributedConstraintOptimizationProblem,DCOP)是分布式的COPs,它由一系列独立的COPs组成,其中每个COPs由一个Agent所拥有,不同的Agent之间因为一些共同的约束而构成一个整体,它能够有效地用于求解RA问题,同时能够保证得到的解是全局最优的.通过将RA建模成DCOP问题以求解最优分配方案,RA问题分布于多Agent中,其中每个CP即为一个Agent,它是一个自治体,Agent之间相互独立,分别负责管理自己的内部问题.每个Agent又是智能的,能够根据环境的不同做出有利的选择.DCOP的目标就是通过协调多个Agent之间的相互决定,使得整体的利益最大化,从而达到一个全局最优的目的.除了RA问题外,现实应用中的许多问题也都可以通过建模成DCOP问题进行求解,如资源调度和任务分配、协同决策问题[9]、组合拍卖问题[10]、Web服务组合问题[11]、传感器分配问题[12]等.DCOP是NP难问题[4],对其进行求解是一件既非常困难又非常具有挑战性的工作.分布式约束优化求解算法(DCOP)是目前能够有效求解DCOP问题的算法,不同算法的主要区别在于求解DCOP时所花费的代价以及求得解的质量不同,如算法时间、空间复杂度以及解是否最优等,在寻找最优解过程中为了使代价尽可能最小,研究者们纷纷提出了各种用于求解DCOP问题的算法.近年来重点关注DCOP的国际顶级会议有AAAI(AmericanAssociationforAINationalConference)、AAMAS(Intl.Conf.onAutonomousAgentsandMulti-AgentSystems)、IJCAI(Intl.JointConf.onAI)等.DCOP的主要研究团队有日本九州大学的Yokoo[13-14]、瑞士洛桑理工学院的BoiFaltings以及以色列本古里安大学等.本文以如何有效地对DCOP进行求解为目标,对DCOP进行了综述.本文第2节给出DCOP的相关形式化描述,并且介绍如何将常见的经典问题建模为DCOP;第3节提出DCOP算法分类框架;第4节介绍现有的典型DCOP算法,且对比不同算法之间的异同性;第5节分析DCOP问题相关的典型应用;最后,分析DCOP领域未来的发展趋势并总结全文.2分布式约束优化问题描述为了更深入地了解分布式约束优化问题及其特点,我们将首先介绍分布式约束优化问题的定义以及相关应用实例.2.1分布式约束优化问题定义定义1.分布式约束优化问题通常被定义为五元组〈X,D,F,A,m〉,其中X={x1,…,xn}是变量的集合,D={D1,…,Dn}是X中变量所对应的值域集合,F={f1,…,fm}是约束函数代价的集合,A={A1,…,Ak}是Agent的集合,m表示AgentPage3与变量之间的管理关系,它是A→χ的一个双射.其中χ是变量集合X的一个划分,表示每个Agent所对应的内部变量集合,例如对于Agent-1,存在变量(x11,…,x1k)属于其内部变量.约束代价函数是指定义违反约束条件所带来的代价,一般包括域内约束和域间约束两种,前者是指同一Agent内变量之间的约束,而后者是多个Agent之间变量的约束.同样,DCOP中的硬约束条件,对于可能的组合赋值为0,不可能的组合赋值为.定义2.DCOP的目标是通过协商多Agent之间的相互决策,对变量进行合理赋值,使得所有违反的约束代价和最小.其解的形式化的表示如下式(1)所示.与COP的最大区别在于问题分布于多个Agent之中,且它们是相互独立的自治体,Agent之间只能通过消息传递方式进行交互.2.2具体问题的DCOP建模多Agent领域中的许多真实问题都可以建模成DCOP问题,例如Petcu等人[10]对多Agent组合拍卖以及覆盖网优化等问题用DCOP进行建模,Maheswaran等人[15]将分布式多事件调度建模为DCOP问题进行求解,Sultanik等人[16]实现了多Agent任务调度语言C-TMS到DCOP的自动转换,Zhang等人[12]给出了移动传感器网络中的DCOP的应用等.下面我们给出DCOP的一个具体问题的建模过程,通过它能够让我们更进一步了解DCOP.实例1.分布式组合拍卖问题(DistributedCombinatorialAuction,DCA)是多Agent领域中资源分配的一种常见方式,它允许不同的报价者对不同的货品组合进行竞价,在货品数量有限的情况下,其目标是如何分配这些货品使得货品拥有者获得的收益最大.DCA可被定义为三元组〈A,G,B〉,其中A={A1,…,Ak}表示报价者(Agent)集合,G={g1,…,gn}是所有的货品集合,B={b1,…,bk}是所有的报价单集合.报价单bi示报价者Ai报价的货品集合,vi所报价的货品Gik为1,否则为0.vi对于bik∧gj∈GmGi0,即保证同一货品不能同时被两个不同的报价者获得.图1列出了分布式组合拍卖问题建模成DCOP的模型.如图1所示,有3个报价者{A1,A2,A3}以及3件货品{g1,g2,g3},A1对货品g1,g3进行报价;A2对货品g1,g2,g3报价;A3对货品g2,g3报价.在将该问题建模成DCOP时,Agent集合为出价者{A1,A2,A3},变量集合X为{g1i表示报价者Ak对货品gi进行了报价,值域集合Dgk为{0,1},其中1表示出价者获得该商品,否则没获得该商品.映射关系M如下,A1→{g1{g2的商品集合.F表示效益函数集合,表示一组商品所能够带来的效益,如对于组合〈g1〈1,1〉时,其效益为10,而对于其他的取值,效益值为0.该问题中存在约束是不同的出价者对同一货品进行了报价,最多只有一个报价者能够获得货品,2,g21,g2其目标是找到一个使得货品拥有者可获得的收益最大的分配方案.通过对上述实例的建模,我们知道一个现实应用中的问题能够建模成DCOP进行求解必须具备以下几个特性:(1)问题分布于多Agent之间,在现实应用中,即问题中涉及到多个角色(如RA中的云提供商、组合拍卖中的拍卖者)的参与;(2)各个不同的参与者之间存在一定的约束条件(如组合拍卖中货品的数量有限,不同的拍卖者对其进行竞争);(3)Agent间需要互相协作完成决策,在求解DCOP时Agent间需要通过大量的消息传递最终达成一致;(4)问题求解中有确定的目标函数(如组合拍卖问题中,如何使得货品拥有者的获益最大),并且要求寻找到最优解.在满足以上4个特性的绝大部分现实应用中的问题都可以考虑建模为DCOP问题Page4进行求解.3分布式约束优化算法分类本文通过对现有的分布式约束优化求解算法(DCOP)进行研究分析,提出了一种DCOP算法分类图2DCOP算法分类框架在完全算法中,根据求解的方式不同,分为基于搜索/回溯的算法(Searchalgorithm)以及基于动态规划的算法(Dynamicprogramming).搜索算法中根据Agent之间的通信方式,又可以分为同步搜索算法(Synchronousalgorithm)以及异步搜索算法(Asynchronousalgorithm)两种,两者的本质区别在于Agent之间的通信是否同步.同步算法中Agent是同步操作的,而异步算法中Agent则是异步工作的.对于非完全算法,可以分为Agent个体决策算法(Individualagentsalgorithm)和Agent组决策的算法(Groupagentsalgorithm)[17].其中,Agent个体决策算法通过对Agent从其他Agent(相邻的)处收集的信息,对Agent自身的决策过程等进行简化,从而加快求解速度;而Agent组决策算法是通过若干个Agent组成本地组进行决策,而非Agent本身单独进行决策.组决策算法又可以分为k-size最优算法和t-distance最优算法.3.1完全算法搜索算法是基于分枝定界思想对状态空间进行搜索求解,搜索算法的效率取决于剪枝的效率,算法的剪枝效率高,可以大大地避免对于非解空间的搜索,从而减小算法的时间和空间复杂度.基于动态规划的算法基于桶消元(bucket-elimination)的思想进行求解,根据问题中涉及到约束关系,对变量逐一进行消元,不断简化问题,直到找到解为止.3.1.1基于搜索的算法目前,大部分的DCOP求解算法都是基于搜索算法[18-20].基于搜索的算法首先将所有的变量按照框架.如图2所示,根据算法是否对得到的解提供质量保证,可分为完全算法(Completealgorithm)和非完全算法(Non-completealgorithm).两者的区别在于,在前者中,如果问题存在最优解,那么其保证一定能够找到最优解,而后者则不保证一定能够找到最优解.一定的结构组织起来,如线性序列[21]、任意序列或者DFS结构[22].然后在这些结构上结合分枝定界思想进行遍历搜索求解.根据Agent之间消息传递是否同步,可分为同步搜索算法和异步搜索算法.(1)同步搜索算法Agent在发送一个消息后必须要在收到相应的回复消息后,才能继续后续的工作,如计算、发送消息等.中间过程中Agent一直处于空闲等待状态,而且由于该原因,导致同步搜索算法效率较低.目前常见的同步搜索算法有SBB[21]、dAO-Opt[10]、dAOBB[10]、dAOBB(i)[10]等.(2)异步搜索算法允许Agent在收到回复消息前,继续后面的工作,不需要处于空闲等待状态.相比于同步搜索算法,它的优点是Agent不会长时间处于空闲等待状态,一定程度上提高了算法效率,但该类算法往往会因为Agent之间的频繁交互产生大量的消息,通信开销会比较大.目前常见的算法有ADOPT[9]、NCBB[23]、BnB-ADOPT[24]、IDB-ADOPT[25]、OptAPO[26]、AFB[27]等.搜索算法的优点在于其所需的内存空间为多项式级别,不足之处是会产生大量的消息,导致通信开销较大,尤其是异步搜索算法.如果拥有足够大的内存空间,可以采用Cache机制将算法dAOBB和NCBB扩展为dAOBB(i)和NCBB(i),这能在一定程度上提高算法的效率.3.1.2基于动态规划的算法基于动态规划的DCOP算法的基本思想是在Page5DFS结构的基础上进行变量消元[28].基于动态规划的算法在人工智能领域也可以将其归为基于推理的方法,随着其在COP方面的应用,已经被逐渐地扩展为与其他技术结合使用,例如与分枝限界估测以及与搜索方法结合等[29-32].目前常见的算法有DPOP[33]和H-DPOP[34]等.3.2非完全算法非完全算法(近似算法)无法保证一定能找到最优解,即使问题存在最优解,因为该类算法只对部分状态空间进行搜索.完全算法的时间复杂度往往非常高,在很多大规模的现实应用中,求解最优解非常难、代价巨大,而且有时根据应用需求不需要寻找最优解,只需要找到一个近似最优解即可.非完全算法则能够很好地满足这种应用的需求,花费较小的代价找到一个近似最优解.其中,DCOP非完全算法分为Agent个体决策的算法和Agent组决策的算法.3.2.1基于Agent个体决策的算法Agent个体决策算法主要包括MGM/DBA(MaximumGainMessage/DistributedBreakoutAlgorithm)[35-36]、ALS_DisCOP[37]、DSA(DistributedStochasticAlgorithm)[38]等,这类算法通常不为解的质量提供任何保证.然而在很多的实际应用中关于解的质量问题是一个很重要的考虑因素,导致这类算法的应用范围具有很大的局限性.但2009年提出的max-sum[39]算法是一个例外,针对某些特定问题实例,它可以提供质量保证,实验表明其在95%情况下可以直接得到最优解.此类算法可以对解的质量提供一定的保证.3.2.2基于Agent组决策的算法Agent组决策的算法中,Agent以组的形式去寻找其各自取值,同一组内的Agent通过协调它们之间的取值,来达到一个局部最优的结果,主要代表性算法有KOPT[40]和DALO[17]算法等.在组决策算法中,根据如何将Agent集合构成不同的组,又可以分为k-size最优算法和t-distance最优算法.在下面的章节中,我们将详细对DCOP求解算法进行介绍,包括完全算法和非完全算法,并且对相关算法进行了对比分析.4分布式约束优化问题完全算法如图2所示算法分类框架,本节对每一类中比较常见的DCOP完全算法进行了研究.DCOP算法在求解DCOP时,首先需要将问题中所涉及的变量按一定的结构组织起来,如线性序列[21]、任意序列、伪树(Pseudo-Tree)结构[10]或者DFS(Depth-FirstSearchTree)结构[22],目前绝大多数DCOP算法都是基于DFS结构的.此外,还有一些研究是基于混合结构进行求解的[41-42].下面首先介绍DFS结构,然后再分别介绍各类中比较常见的DCOP算法.最后,对各种算法的复杂性进行对比分析,有利于我们横向地比较各种算法的优缺点以及适应范围.4.1DFS结构目前大部分的DCOP算法都是基于DFS结构(伪树结构的一种特例),但也存在一些是基于随机序列的,比较典型的有Yokoo等人[43-44]提出的ABT算法和AWC算法,Silaghi等人[45]提出的AAS算法,Gershman等人[27,46]提出的AFB算法等.也有一些算法是基于顺序序列的,如Hirayama等人[21]提出的SBB算法.下面我们将介绍伪树结构以及DFS结构的相关概念.定义3.约束图G所对应的伪树(Pseudo-Tree)结构,根节点是图G中预先选定的一个节点,并且图G中的相邻节点必定处于同一分枝中.自Freuder等人[22]最早将伪树结构引入到约束优化问题中,从而得到了广泛的应用[47-49].DFS树可以看作是伪树的一种特例,其所有的边都属于约束图(即DFS中边的数目与约束图一样).我们可知因为其特有属性,使得DFS非常适合于进行深度优先搜索遍历.定义4.DFS结构通常定义如下,图G对应的DFS结构与约束图G的节点的数目和边的数目都相同,并且相邻的节点必定处于同一分枝中.图3为一个简单的约束图G转换成伪树结构以及DFS结构的例子.由图3可知,对于伪树来说,允许树的边数目多于原图G的边数,图3(b)中需要添加两条虚边X4-X2和X4-X6,而图3(c)中只包含原图G中的边.DFS结构对于DCOP算法的求解效率有一定的影响.在搜索的算法中,算法的时间复杂性是DFS深度的指数级,而基于动态规划算法,时间和空间复杂度都是DFS宽度的指数级.因此,DFS结构的好坏对于算法的效率有一定的影响.显然,对于同一个图G,其对应的DFS结构并不是唯一的.目前生成DFS结构的算法和策略较多,Chechetka等Page6图3一个简单问题的伪树结构以及DFS结构示例人[50]提出了第1个通过使用启发式算法去尽量地降低DFS的深度.对于减小DFS宽度方面,也有较多的研究,如采用MaximumCardinalitySet[51]、MaximumDegree[51]以及Min-Fill策略[52]等都能够在一定程度上减小DFS的宽度.对于不同的DCOP算法,根据具体应用的特点,构造最合适的DFS结构是非常重要的.4.2同步搜索算法下面我们将从基于线性序列和基于DFS结构两方面来介绍DCOP算法.4.2.1基于线性序列结构基于线性序列结构的同步搜索算法是指在进行搜索之前,所有的变量按照线性序列进行排列,然后在此序列上按照一定的搜索策略进行搜索求解.Hirayamad等人[21]于1997年提出了第1个DCOP完全算法SBB(SynchronousBranchandBound),SBB算法主要是用于解决DCSP,有时也可用于求解DCOP.其思想很简单,是经典的分枝定界算法的分布式版本.在SBB算法中,所有的变量事先都按照线性序列排列好(按照一定的优先级排列,一般按从高到低的顺序排列),搜索时按顺序依次对变量进行赋值,在遇到冲突时,改变变量赋值,必要时进行回溯.SBB算法在问题规模较大,包含的变量较多时,效率一般较低.因此,SBB一般只用于解决特定的问题,使用范围有限.Yokoo等人[53]提出的异步回溯算法ABT(AsynchronousBackTracking)算法也是基于线性序列的,但其一般也只用于对约束满足问题进行求解,对于约束优化问题求解的范围有限.Gershman等人[54]提出的AFB(AsynchronousForwardBounding)算法也是基于线性序列结构的,但其采用的是“同步-异步”混合方式,在搜索过程中利用异步前瞻(LookAhead)技术,减少了一些没必要的搜索.4.2.2基于DFS结构Nilsson等人提出的AND/OR搜索空间在搜索领域有一定的影响力,并且已被应用于诸多领域中[22,48,55].Dechter等人[49]通过AND/OR图捕获一般的图形模型的搜索空间,包括约束网络以及信任网络.在AND/OR搜索空间进行搜索求解的效率显然要比在线性序列上求解高,因为在搜索过程中,可以对AND/OR空间中不同分枝同时进行搜索是其关键所在.(1)dAO-OptCollin等人[48]于1999年提出了dAO-Opt算法,dAO-Opt是一个同步AND/OR搜索算法的扩展,在DFS结构上以深度优先搜索的策略进行分布式搜索.DFS结构中不同分枝可以同时进行搜索,这在一定程度上加快了搜索的效率.dAO-Opt算法引入了局部代价(LocalCost)的概念,局部代价是指搜索过程中部分解所产生的代价.在搜索从根节点到叶子节点过程中,叶子节点接受的消息中将包含所有可能赋值的局部代价,叶子节点从中选择最好情况的代价,并返回给其父节点.dAO-Opt算法的代价在最坏情况下是DFS深度的指数级,相比于线性序列是所有变量的指数级有较大的改善.(2)dAOBBMarinescu等人[55]提出的dAOBB(AND/ORBranchandBound)算法,针对的是dAO-Opt算法中没有考虑剪枝技术而导致需要对全局空间进行搜索的局限性.dAOBB算法在dAO-Opt的基础上结合了剪枝技术的思想,是AOBB算法的分布式版本,dAOBB在dAO-Opt的基础上结合了分枝界限技术,合理地使用剪枝技术可以避免对不可能求得解的状态空间进行搜索,一定程度上提高了搜索的效率.同样,dAOBB算法也是同步搜索算法.初始界限选择的好坏对于dAOBB算法的效率是有很大影响的,因而涌现出了很多与dAOBB算Page7法相关的改进,目的是尽可能地提高其效率.如Faltings等人[56]提出的A-DPOP算法,是一个采用了自适应minibucket策略的算法,A-DPOP算法能够很好地与dAOBB算法结合,在界限选择方面能得到更好的结果.同时,Marinescu等人[57]通过将dAOBB与Cache机制结合,提出了dAOBB(i)算法,其中i代表的是Cache的大小,采用Cache机制能够大大地加快算法的求解速度,效率大大提高.(3)HEDA丁博等人[58]针对低约束密度的分布式约束优化问题,提出了一种基于贪婪和回跳思想的算法HEDA.在该算法中,每个Agent基于贪婪原则进行决策,利用低约束密度问题中大多数赋值组合不存在冲突这一特点来加快求解速度,并在必要时通过贪婪求解过程的回跳来保证算法完全性.4.3异步搜索算法针对同步搜索算法中,Agent通常要花大量的时间等待其他Agent的消息,导致效率较低的问题,研究者们提出了各种异步搜索算法,有ADOPT[9]、NCBB[23]、BnB-ADOPT[24]、IDB-ADOPT[25]、Opt-APO[26]、AFB[27]等.4.3.1ADOPTModi等人[9]于2005年提出了DCOP的异步算法ADOPT(AsynchronousDistributedOptimization),ADOPT是DCOP领域中第1个完全异步算法.ADOPT是在DFS结构上进行异步搜索操作的,根据DFS结构划分Agent的优先级关系(DFS中祖先节点的优先级一般要高于子孙节点).该算法的创新之处主要有3点:(1)在搜索过程中,每个Agent仅仅根据当前已知的信息选择最优的取值,而非全局信息进行选择;(2)通过回溯门槛(backtrackthreshold)来有效地改变Agent的取值,这能够有效地帮助我们获得之前搜索过的取值;(3)算法能够在找到最优解时及时停止算法的运行,而不需要额外的算法结束机制.ADOPT在求解DCOP时有很多的好处,但因其计算过程中Agent之间自主地进行通信以及更改自身取值信息,每次更改都需要发送信息给其邻居节点,会导致消息数量太多,因此网络开销很大,同时还需要DFS宽度的指数级别的内存空间.4.3.2BnB-ADOPT南加州大学的William等人[24]于2008年在AAMAS上提出了BnB-ADOPT算法.BnB-ADOPT在ADOPT上做出了改进,与ADOPT算法最大的区别在于将搜索策略从Best-First改变为Depth-First(深度优先)分枝界限搜索.算法BnB-ADOPT运行中的消息传递以及通信都是基于ADOPT的框架完成的.将搜索策略转变成Depth-First分枝界限搜索是因为Best-First搜索需要不断重复地构造部分解,这会导致很大的计算开销以及内存空间[59],而Depth-First分枝界限搜索则不存在这个问题.4.3.3IDB-ADOPTWilliam等人[21]于2009年提出的IDB-ADOPT(IterativeDecreasingBoundADOPT)算法也是在ADOPT算法上做的改进.与BnB-ADOPT算法一样,IDB-ADOPT算法也是基于Depth-First搜索策略,不同之处在于IDB-ADOPT算法中的Bound是逐渐递减的.其基本思想如下,在搜索过程中,消息中携带着一个Bound(初始值无穷大),每当找到一个解,且其代价小于Bound的值时,就用计算出的代价值替换Bound的原来值,这样Bound的取值就在不断减小,直到不存在一个解,满足其代价比当前Bound还小时,此时的解则是最优解.实验表明IDB-ADOPT算法在处理大型DCOP问题时的效率要比ADOPT高.4.3.4AFB本古里安大学的Gershman等人[54]于2006年在ECAI上提出了AFB算法.AFB与SBB算法一样,也是基于变量的线性序列进行搜索,不同之处在于AFB是一个“同步—异步”混合算法,将SBB算法和异步前瞻(LookAhead)结合在一起,而SBB算法是同步算法.4.3.5OptAPOMailler等人[26]提出的最优异步部分交叉算法OptAPO(OptimalAsynchronousPartialOverlay)利用了称为调停者(Mediator)的Agent.调停者在算法执行中动态产生,可以将部分变量及其约束集中起来.OptAPO算法在调停者的干预下直接地通信约束,以局部地集中问题.OptAPO允许Agent扩展和交叉它们在求解过程中用于本地决策的上下文.上面介绍的这些搜索算法都是目前DCOP问题中比较常见的求解算法,为了进一步了解它们之间的主要区别,表1对比了算法中的一些相关属性,包括搜索策略、通信方式、消息传递方式以及所基于的拓扑结构.Page8表1DCOP搜索算法的属性比较ADOPTNCBBBnB-ADOPTdAO-OptdAOBBIDB-ADOPT4.4基于动态规划算法动态规划(DynamicProgramming)[60-61]一直被认为是解决组合拍卖问题[62]的有效方法之一.简单而言,动态规划是通过逐一进行变量消元进行求解的,消元过程中主要依据变量之间的约束关系.Dechter等人提出了动态规划算法的通用框架BE(BucketElimination),框架中详细介绍了BE的消元求解原理.而Kask等人提出了适用于集中式问题的动态规划算法BTE(BucketTreeElimination),BTE通过在BucketTree结构上进行消元求解.以下将详细介绍各种典型的动态规划DCOP算法,包括DPOP、H-DPOP、M-DPOP、O-DPOP等.4.4.1DPOP瑞士洛桑联邦理工学院人工智能实验室的Petcu等人[33]于2005年在IJCAI会议上提出了DPOP算法,开创了基于动态规划策略在DCOP问题中的应用.DPOP是一个基于动态规划的DCOP完全算法,是集中式BucketElimination算法[63]运用于DFS结构的分布式版本.下面将简单介绍DPOP算法的思想.DPOP算法大致可以分为3个阶段:DFS构造阶段、UTIL消息传播以及VALUE消息传播阶段,具体过程包含以下3个阶段:(1)DFS构造阶段.DPOP算法也是基于DFS结构的,构造DFS的方法有很多,3.1节中已经详细介绍过了有关DFS结构的内容;(2)UTIL消息传播阶段.该阶段是自底向上传播的,从叶子节点开始沿着伪树中的树边(tree-edge)开始向上传播.UTIL消息的定义如下.UTIL消息是一个多维矩阵,其中每一维度代表的是一个变量,UTIL消息中包括了所有变量取不同值时所带来的效用值;(3)VALUE消息传播阶段.该阶段与UTIL消息传播阶段相反,是自顶向下传播的.在上一阶段完成之后,从根节点发起.每个节点根据收集到的UTIL消息,选择使得效用值达到最大的那个值,直到所有的变量都有取值时,算法结束.分布式约束优化问题在过去的一些年里一直稳定快速地发展[64].动态规划方法对于求解DCOP问题有很大吸引力,因为只需要线性级别的消息数量,但是存在的问题是消息的大小变得非常巨大,Agent之间交互的消息经常含有许多冗余的信息,DPOP等算法并没有考虑问题本身的一些硬约束条件.4.4.2H-DPOPKumar等人[34]针对DPOP算法中消息长度指数级等不足,于2008年在AAAI会议上首次提出了H-DPOP算法,H-DPOP中通过使用CDD(ConstraintDecisionDiagrams)[65]技术来剔除一些不可能的赋值(硬约束条件不满足的赋值),达到压缩UTIL消息的目的.4.4.3O-DPOPPetcu等人[66]于2006年提出O-DPOP算法,O-DPOP算法主要用于解决开放环境的多Agent组合优化问题.算法与DPOP算法类似,也是基于动态规划策略进行求解,但是它是增量式的(incre-mental),适合于开放性问题.4.4.4M-DPOPPetcu等人[67]于2006年提出的M-DPOP算法在求解DCOP问题时,同时考虑了社会选择问题(SocialChoice).将社会选择问题建模成DCOP问题,通过使用激励相容机制以及纳什均衡等技术来保证Agent的可信性(Faithful),解决了多Agent系统中由于Agent的自私等特性给问题带来的麻烦,同时这个算法也特别适用于许多经济方面的问题.除上面介绍的几种基于动态规划的算法外,还有很多其他相关的算法,如哈佛大学Greenstadt等人[68]于2007年在AAMAS上提出的SSDPOP算法.相比于DPOP算法,SSDPOP提供了隐私保护技术,对Agent不愿透入给其他Agent的信息增加了一定的保护机制,能减少隐私丢失等现象的发生.实验结果表明SSDPOP将隐私丢失降低了29%~Page988%左右.此外,还有S-DPOP[69]、A-DPOP[56]、PC-DPOP[10]、BB-M-DPOP[10]算法等.4.5算法比较基于搜索的算法与基于动态规划的算法最主要的区别在于算法的复杂性不同,主要包括时间复杂度以及空间复杂度.基于动态规划的算法的时间和空间复杂度都是树的宽度的指数级别.然而,对于强力搜索只需要线性的内存,但是所需的时间则取决AlgorithmdAO-OptADOPTNCBBDPOPBnB-ADOPTH-DPOPIDB-ADOPT表2DCOP算法复杂性对比TimecomplexityExponentialinthedepthofDFSExponentialinthenumberofvariables(worst-case)ExponentialinthedepthofDFSLinearnumberofmessagesExponentialinthedepthofDFSLinearnumberofmessagesExponentialinthedepthofDFS如表3所示,给出了DCOP算法的内存与消息数量的对比关系,表中w.c.expon代表的是图的宽度的指数级(constraintdiagramwidth).我们可知基于搜索的算法其所需要的内存是比较小的,如表3DCOP算法内存与消息数量对比Memorylinearpolynomialw.c.exponexponential5分布式约束优化问题非完全算法5.1Agent个体决策算法Agent个体决策算法主要有DBA[35-36]、ALS_DisCOP[37]、DSA[38]等.最小冲突回溯等约束满足算法中的爬山搜索策略,有时会使求解过程陷入局部最小(local-minima)状态.local-minima状态就是一些约束没有被满足从而出现冲突,但是这些冲突的数目不能通过单独改变任何一个变量的值来减小.因此,DBA算法通过以下两个步骤来实现:第一,始终保证评估值是逐步提高的,相邻的Agent对可能会提高的评估值进行通信,只有能够最大提高评估值的Agent才去改变自己的取值.如果两个Agent不相邻,那么它们可能出现同时改变自己取值的情况;第二,与检测整个Agent是否陷入local-minima不同的是,每个Agent检测其是否处于quasi-local-于问题的结构,即与问题的规模有关.如表2所示,我们对某些DCOP算法的时间和空间复杂性进行了比较.从表2可以看出,基于动态规划的算法的空间复杂度较大,而基于搜索的算法在时间复杂度上是难以预测的.在实际应用中,针对问题的特点,如问题的规模以及对于时间和空间复杂度的要求,选择一个合适的算法往往能获得较好的效果.ADOPT、NCBB、AFB等,都是线性的,但是其消息数量都是指数级的.而基于动态规划的方法,如DPOP、H-DPOP等,其消息数量是线性的,但其需要的内存较大,是指数级的.ADOPT,NCBB,AFB,SynchBBminima状态,这是比local-minima要更弱的条件,并能够通过局部通信而检测到.DSA算法中,所有Agent之间都是平等的,在处理过程中它们之间没有明显的区分标识,该算法是同步算法.节点在发送消息之后必须要收到返回的消息后,才继续下一步的操作,执行局部的计算,并且改变局部状态.5.2Agent组决策算法在Agent组决策算法中,又可以进一步分为k-size最优算法[70]和t-distance最优算法[71],它们的区别主要在于选取同组中的Agent的方式不同.k-size最优算法是随机选取k个Agent构成一个组;而在t-distance最优算法中,围绕一个中心Agent,并将与该Agent之间距离小于或等于t的Agent的集合构成一个组.组决策算法有一个特点,假设该组中的Agent个数为n,如果组决策找到一个局部最优解,我们不可能通过改变小于或等于n个AgentPage10的决策使结果变得更优.k-size最优算法中,典型的算法有max-sum[39,72-73]以及KOPT[36]等.max-sum算法[39,72-73]是一种基于一般性分布式定律(GeneralisedDistributiveLaw,GDL)[74-75]提出的,在max-sum的基础上,又相应地提出了Fast-Max-Sum(FMS)[76]等算法,FMS相比于一般的max-sum算法,在求解过程中产生的消息数量更少,时间复杂性也更小.Macarthur等人[77]以FMS算法为基础,又相应地提出了BnBFMS算法,该算法在FMS的基础上,又对解的质量提供一定的保证.然而,这些算法并非对所有的k都适用,只是k在一定的范围内有效.而KOPT算法则是k-size最优算法中的一种特例,它是一种针对任意k都有效的k-size最优算法,而且KOPT算法对于得到的解提供一定的保证.Vinyals等人[78]提出了一种新的k-size最优算法DaC,该算法的核心思想是分割与协同,即将Agent分割成不同的组,然后把每个组看成是一个局部寻找最优的过程.通过协同不同组之间的结果,在一定范围内寻找到一个局部最优解.Yin等人[17]提出了t-distance最优的评判标准,并在此基础上提出了一种t-distance算法DALO,DALO是一种异步算法,是对分布式局部搜索算法的改进.DALO算法主要包括以下3个阶段:第一,Agent将其局部信息以及约束通过消息发送到距离其t跳以内的节点,然后将其取值发送到t+1跳以内的节点上.第二,根据上一阶段收集的信息,所有组中的leader节点计算其局部最优解,在计算过程中假设该组之外的Agent的取值都保持不变.第三,如果一个leader节点找到了一个更好的局部解,该leader节点将这个新的取值发送给外部的Agent.但是这种情况下可能会导致部分出现重合的组中Agent存在冲突,DALO通过使用分布式的锁机制来实现.Bigdeli等人[79]提出一种新的t-distance最优算法DGOPT,该算法在DALO的基础上,提出了动态添加或者减少同组中Agent的组优化策略,在一个Agent组中,leader节点根据边缘分布(marginalcontribution)的概念添加或者减少同组中Agent节点的个数.Vinyals等人[80]提出了一种能够适用于k-size最优以及t-distance最优两种类型的算法的通用框架,并且在该框架下提出了一种新的算法,该算法是DALO算法的一种扩展,它能够在k-size最优以及t-distance两种标准下用于寻找局部最优解.大多数的k-size最优算法只能是1-size最优的,如MGM、DBA等.目前的组决策算法在k3时,其计算复杂度非常大,使得其很难应用于实际问题的求解中.然而,由Katagishi等人[40]提出的KOPT算法,则属于这类算法的一个特例,其可以是任意size最优的,只是不同size计算量不同.显然,n个节点时的n-size最优就是真正全局最优.但是KOPT算法存在以下几个问题:第一,理论分析结果显示,k-size最优的解的下限是与图的密集程度成反比[81].大量的研究都证明了k-size最优对于得到的解能够提供一定的质量保证,如在节点数量为n时,有R(A)(k-1)/(2n-k-1)R(A)[17,71],其中R(A)为k-size最优求得的解,而R(A)为全局最优解,这是一个k-size最优解的下限.考虑到不完全算法的时间复杂度相对较小,同时又对解的质量提供一定的保证,使得其被广泛地用于求解一些大型的实际问题当中.第二,面临着一个消息数量巨大的问题,尤其是当图的密度较大的时候.为了有效地解决这个问题,Yin等人[71]提出了另外一种衡量解的质量的标准t-distance最优,它通过节点间的距离来定义Agent组中的成员,且在t-distance最优性下,提出了一种异步局部搜索算法,该算法基于lock/commit协议,其性能相对于KOPT有较大的改善.针对于k-size最优以及t-distance最优,两种不同的评价非完全算法解的质量的标准,下面进行了相关比较.在k-size最优中,每一组中的Agent的个数是固定的k个,但是满足k-size的组的个数可能会很多.然而t-distance最优中每一组中的Agent的个数是不固定的,在图的密度较大时,决策组中的Agent数量往往会很大,但决策组的个数是有限的,其数量不超过Agent的个数.针对某些特定的环形结构图,我们分析了k-size最优和t-distance最优对于解的质量的保证情况.首先,在k=1和t=0时,k-size最优以及t-distance最优得到的结果是一样的,因为它们都是将每个Agent看成是一个独立的组进行决策.其次,t-distance最优得到的解的质量往往要好于k-size最优,因为t-distance最优的解必然是k-size最优(k=2t+1)的解,因为每一个k-size的决策组都属于t-distance中.反之则不是,存在某些k-size最优的解,却不是t-distance最优的(t=(k-1)/2).Page116分布式约束优化问题的相关应用6.1云计算中的资源映射问题根据前面的介绍,我们可知云计算中的资源分配问题(RA)[82-83]是目前云计算中的一个重点研究方向.在RA问题中,如果需要得到资源分配的最优方案时,将RA问题建模成DCOP进行求解是一种有效的方法.在RA中,WK是指虚拟节点由虚拟链路连接构成的虚拟网络(VirtualNetwork,VN)[83],而CP提供的基础设施可以建模为由物理节点通过物理链路连接构成的物理网络(SubstrateNetwork,SN)[83].其目标是要将WK映射到SN上,其中虚拟节点映射到SN中的物理节点上,虚拟链路映射到SN中的物理路径上,同时满足WK中节点和链路对资源的约束,如节点对CPU、memory等资源有一定的约束,链路对带宽、延迟等资源有一定约束.图4给出了如何将RA问题建模成DCOP进行求解,如图4(a)所示,为RA中的WK请求,图4(b)、(c)、(d)分别为3个CP提供的SN.其中的1个约束是要将WK中的虚拟节点1、2、3分别映射到CP1、CP2和CP3中,并且满足WK中虚拟节点和虚拟链路对资源的约束.在建模成DCOP的过程中,其相关的定义如下:Agent集合为{CP1,CP2,CP3},变量集合X为虚拟节点{1,2,3},变量X中变量的值域D分别为{A,B,C}、{D,E,F,G}和{H,I,J,K,L,M}.映射关系M如下:CP1→{1}、CP2→{2}和CP3→{3}.约束代价函数F是指映射WK产生的代价,而代价又被定义为分配给WK的资源数量,一般包括节点所需的CPU资源和链路所需的带宽资源等.在将RA建模成DCOP问题后,可以采用第4节中介绍的算法进行求解,并且可以根据RA的具体要求选择算法,如果当前WK请求任务比较紧急,希望部署时间较短,时间复杂度较小的算法应该更为合适,如DPOP算法等.如果WK中的变量数量较大,则选用搜索算法更为合适,因为其所需要的空间复杂度以及内存更小.出于商业目的考虑,不同CP之间的信息往往不希望对外透露,在这种情况下选择M-DPOP算法更为合适.如果考虑CP提供的SN可能出现故障导致SN的动态变化,则可进一步将其建模为动态DCOP进行求解,这在下面将会展开介绍.除此之外,很多还有其他寻找Agent间共同决策的一致组合问题,比如会议时间安排[10]、分布式日常安排[10]、传感器资源分配[12]等,都可以建模为DCOP问题来求解,并且可以根据具体问题的特点选择相应的DCOP算法.6.2动态分布式约束优化问题的研究随着互联网新型应用的发展,许多问题的应用环境往往是动态变化的.从而要求DCOP算法能够有效地解决这种动态变化下的约束优化问题.如上面提到的云计算中的RA问题,参与资源分配的CP数量可能动态变化以及CP内部的基础设施资源也可能动态变化,如CP提供的数据中心网络中节点出现故障或者因人工原因导致某些节点不能正常工作时,都会导致其结构发生改变.此外,用户请求WK也可能随着用户需求的变化而动态发生改变.例如,以动态会议时间调度问题为例,对于每一个参加会议的成员来说,其行程安排可能随时间会动态发生变化,这种情况下之前已分配的方案,在成员时间发生改变时,未必满足新的要求.在以上情况中,都希望能够有动态DCOP算法来有效地解决这些问题.然而,本文提到的DCOP算法在求解动态DCOP问题上还存在一定的局限性,算法本身以及对算法时间复杂度远远超过了应用的需求.因此,考虑到现在应用的这种高度动态性,目前有一些研究侧重于anytime算法的研究,该类算法能够保证任意时间都能给出问题的解,但其给出的不是问题的最优解,而是近似最优解,与前面介绍的非完全算法有一定的类似之处.DCOP非完全算法能够在一定程度上解决这种高度动态问题的需求.7未来的研究趋势综合分布式约束优化问题目前研究的热点问题以及广泛关注的应用领域,未来的研究趋势主要关注于如下几个方面:Page12(1)动态DCOP算法的研究随着互联网新型应用的发展,许多问题的应用环境不再是恒定不变的,而是可以动态改变的.如动态传感器分配问题,目标的到达可能是随机的、不可预测的,而且目标的位置是可以动态移动的.云计算中的资源分配问题(RA),用户请求往往也是动态变化的,本文介绍的这些DCOP算法在解决环境动态改变的问题上存在一定的局限性.目前,动态约束满足问题已经应用于解决某些现实问题[69-71,83],但是它们基本上都是针对集中式环境的,对于分布式动态DCOP算法的研究还不成熟.动态DCOP主要面临以下挑战:算法必须能够处理系统中任意状态的改变,如云计算中的资源分配问题中,云用户或者租户往往是动态变化,每时每刻都有请求到来的,其动态性是不可预测的.解决这类高度动态环境下约束优化问题,对于算法的复杂性要求很高,要求其能够以尽可能小的时间代价计算给出合适的解.然而,目前的DCOP算法在求解这类现实应用中的许多问题存在明显的不足,也是未来需要重点关注的方向之一.Petcu等人提出了S-DPOP算法,S-DPOP算法能够在环境发生变化时做出相应的调整,但其还不能用于解决实际的问题.因此,动态DCOP算法的研究必将成为以后该领域研究的一大热点问题.(2)社会选择因素对DCOP的影响DCOP问题的目标是通过对Agent的变量序列进行赋值,在满足约束条件的情况下,最大化全局利益.一般情况下,Agent都会有一些私有信息(通常不希望对外透露),在多Agent进行协商决策时,通常都认为其他Agent公布出来的信息是可信的,而不考虑Agent谎报信息的情况出现.然而,这一说法具有很大的局限性,在现实应用中,Agent往往是自私的,它对问题有自己的偏好,可能会做出使自己利益最大化的选择,而忽略全局利益最大化的目标,这就是所谓的社会选择(SocialChoice)问题.如上面提到的云计算中的资源分配问题,CP可能通过对外透露虚假的信息以谋求自身的利益最大化,毕竟对于CP来说,利益最大化才是其最重要的指标.因此,在这类问题中,其目标是如何在Agent自私的情况下使得全局利益最大化.解决这类社会选择问题可以考虑使用激励相容机制如Vickrey-Clarke-Groves(VCG)机制以及纳什均衡等技术来保证Agent的可信性(Faithful),预防Agent谎报个人偏好能力等信息.如Agent对外发布真实信息时,给予相应的奖励,而如果发现Agent发布虚假信息时,相应地给予惩罚措施,这在一定程度上能够避免Agent发布虚假信息的可能性.但是在一些实际问题中,对于问题的界限确定是非常困难的,这也导致了激励机制在解决该类问题的不足.文献[10]中将社会选择问题建模成DCOP问题并提出了M-DPOP算法,最先针对有效社会选择问题提供了可信机制的分布式实现算法,诚实性(faithfulness)保证了所有的Agent都应该遵守相关的协议规定,不能为了私自的利益而做假.这一算法也开启了对于有效社会选择问题的研究,这也将成为以后研究的一个热点问题.(3)DCOP非完全算法应用的研究在DCOP问题面临的挑战中,代价问题往往是最受关注的.当问题的规模较大时,采用DCOP完全算法进行求解时,尽管能够找到最优解,但是其花费的时间、空间代价以及通信开销往往很大,这对许多实时性要求较高的应用往往不适用.如云计算中的资源分配问题(RA),在很多情况下,考虑到用户请求的紧迫性以及CP对得到最优解的需求不大时,此时,它们未必需要花费昂贵的代价去得到最优解,而只要得到近似最优解即可.考虑到以上原因,越来越多的现实应用问题(资源分配问题)都可采用非完全DCOP算法进行求解.非完全算法虽然无法找到全局最优解,但是其时间以及通信开销等大大降低,而且一些DCOP近似算法能够对解的质量提供一定的质量保证,如k-size最优算法能够保证解的下限是(k-1)/(2n-k-1)[17].因此,考虑到这些应用的实际情况,当其对时间以及通信开销要求较高,往往通过计算其近似最优解来解决.采用DCOP近似算法(非完全算法)进行求解优化问题时,由于其通过搜索部分解空间进行求解,既能够保证得到的结果能够在可以承受的范围内,又能够大大地降低求解时所消耗的资源以及求解时间度.这无非是一个更好的选择.现有的有关DCOP非完全算法的研究,大多都还停留在理论层面的研究,针对如何评价这类算法得到的解的质量,提出了k-size最优以及t-distance最优的评判标准,并且有很多的研究通过理论证明[17,71],证实了它们对解的质量确实有一定的保证.但是,关于如何将DCOP非完全算法运用于实际问题中,以及如何根据具体的实际问题选择合适的近似算法是未来的研究热点之一.Page138结束语分布式约束优化问题的研究作为新兴的一个热点研究问题,从完全算法到非完全算法、从搜索算法到基于动态规划的算法、从同步算法到异步算法、从单纯的理论研究到实际系统的有效部署、从单一的算法提出到面向应用的具体实施,可以说,分布式约束优化问题领域的研究是一个非常活跃的方向.从整体上讲,目前在分布式约束优化方面的研究还远未成熟,尚未建立起一套完整的理论体系,而且从技术理论的完善到算法的具体应用还有很大的差距.本文回顾了近年来学术界在分布式约束优化问题研究领域的主要成果,在一个给定的研究框架下,对分布式约束优化问题进行了综述,详细介绍了常用的一些分布式约束优化算法并加以比较.在本文中对各种算法的定性分析、定量分析以及性能分析较少,主要原因如下:第一,目前很多的DCOP算法,虽然能够找到相应算法的论文,但是相应算法的代码我们还没有办法完全获得.第二,不同类型的DCOP算法,如完全算法和非完全算法之间,绝大多数是基于不同的平台开发设计的,目前还没有公用的平台能够测试所有的算法,平台的不同对于测试的结果会产生很大的影响.第三,目前DCOP研究者们在测试他们的算法的性能时,都是基于一些典型的问题,如地图着色问题、Scale-free问题等,基本没有算法在测试性能时是基于现实应用问题的.在我们未来的研究工作中,将着重针对一个主要的研究问题,并针对该问题对各种算法的性能进行测试比较.本文最后总结并指明了未来研究的趋势.
