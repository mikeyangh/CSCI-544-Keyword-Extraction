Page1P2P环境下面向不确定数据的Top-犽查询孙永佼袁野王国仁(医学影像计算教育部重点实验室(东北大学)沈阳110819)(东北大学信息科学与工程学院沈阳110819)摘要分布式环境中的top-k查询已经有了广泛的研究.由于仪器不精确和网络延时等原因,大多数分布式数据都存在不确定性.文中基于水平分布在P2P网络中的不确定数据提出了一个有效的top-k查询处理方法.首先利用Quad-tree构建一个分布式的不确定数据的索引,并基于索引提出了一个空间剪枝算法.然后,根据局部top-k概率与全局top-k概率之间的关系提出不确定数据成为top-k概率的上界,根据top-k概率与skyline概率之间的关系提出不确定数据成为top-k概率的下界,通过两种概率剪枝算法来减少top-k查询在网络中的传输和计算代价,并且进一步减少候选集大小.最后文中采用采样的方法来计算候选集的top-k概率以确定最终的top-k查询结果.大量的实验验证了算法的有效性.关键词top-k查询;skyline概率;P2P;Quad-tree;不确定数据1引言P2P技术致力于高效合理地组织和利用Internet边缘大量分布的计算、存储、通信以及信息等资源,已经成为有效实现分布式网络环境下信息资源共享和数据交换,实现资源整合利用的重要手段.P2P网络已成为当前网络中资源共享的重要应用之一[1-4].在数据共享和通信的过程中,P2P网络中数据的传输代价通常是非常重要的.但是,在许多应用中,查询往往不需要传输每个网络节点的所有数据,而是传输和用户需要最匹配的一小部分数据就可以了,比如top-k查询通过用户指定的打分函数返回和用户需要最匹配的k个数据对象.在P2P环境中的top-k查询已经有了广泛的研究.但是随着计算机网络和计算机应用技术的迅猛发展,特别是Web服务、传感器网络、RFID以及基于位置的服务等技术的广泛应用,使得不确定数据无处不在,并大量存在于这些先进的应用系统中.因此在P2P环境中不确定数据的top-k查询问题仍旧很具挑战性.不确定数据的表现形式多种多样,根据应用特点和数据形式差异,研究者已经提出了多种针对不确定数据的数据模型.这些不确定数据模型的核心都来自于可能世界模型[5-6].可能世界模型从一个或多个不确定的数据源演化出诸多确定的数据库实例,称为可能世界实例,并且所有实例的概率之和为1.虽然可以首先分别为各个实例计算查询结果,然后合并中间结果以生成最终的查询结果,但是由于可能世界实例的数量远大于不确定数据的规模,这种方法是不可行的.在P2P环境中,获得所有的可能世界实例需要昂贵的网络代价,即使获得了所有的实例,计算也是不现实的.因此在P2P环境下对不确定数据进行top-k查询处理更是一个具有挑战的问题.为了解决这个问题,本文对P2P环境中返回不确定数据的top-k查询提出了有效的处理方法.本文假设数据是水平分布在超级节点构建的P2P网络中的,并且用户指定的打分函数是单调的.在本文提出的方法中,第1步,采用Quad-tree在P2P网络中对不确定数据建立全局索引,然后基于不确定数据的得分范围提出了top-k结果在空间中的上界与下界,提出了空间剪枝算法和基本的top-k计算方法.第2步,本文通过有力的证明得出本地top-k概率和全局top-k概率之间的关系,提出了top-k概率的上界.更重要的是通过不确定数据之间的支配关系,证明出skyline概率和top-k概率存在一定关系,提出了top-k概率的紧凑下界.通过这两步过滤,可以大大减少候选集的大小,进而减少了处理top-k查询时的网络传输代价.最后通过分布式采样算法来计算候选集的top-k概率以确定最终的top-k查询结果.询做了形式化的定义.本文贡献:(1)本文对P2P环境下不确定数据的top-k查(2)本文基于Quad-tree提出了一个对P2P网(3)本文提出了有效的空间剪枝方法和概率剪(4)本文采用蒙特卡洛采样方法在P2P环境中络中不确定数据的全局索引.枝方法来减少top-k查询时网络的传输代价.采样计算最终的top-k结果.2问题定义在这节中,首先介绍不确定数据的模型,然后定义P2P环境中不确定数据的top-k查询.不确定数据模型:设D是一个不确定数据集,并且D由N个多维元组ti组成,ti∈D(1iN).每一个元组ti都由一组不确定的实例ai(ai1,ai2,…,ain)组成.每一个实例都有一个存在概率Pr(a),并且Pr(a1)+Pr(a2)+,…,+Pr(an)=1.表1描述的是不确定数据模型.元组实例t1a11,a12Pr(a11)=0.2,Pr(a12)=0.8t2a21,a22Pr(a21)=0.3,Pr(a22)=0.7t3a31,a32,a33Pr(a31)=0.1,Pr(a32)=0.5,Pr(a33)=0.4t4a41Pr(a41)=1给定一个含有n个数据的数据集D,ti∈D(1in),对于传统的top-k查询,通常用户可以指定一个单调的打分函数s(ti)=∑d其中sj(ti)表示ti的d维特征,wj是数据在第j维上的权重.s(ti)是用户针对数据的喜好程度的得分.s(ti)最终将数据对象在各个维上的特征值聚合成一个值,通过每个数据的得分情况,返回给用户最满意的k个结果.在本文中,假设分值越小,排位越靠前.在不确定数据的背景下,top-k查询的定义则大不相同.不再是通过判断s(ti)的大小来决定数据Page3对象是否是top-k的最终结果,而是通过判断一个元组ti能够成为top-k的概率Prtop(ti).定义1.不确定数据的top-k查询.假设有一个不确定数据库D(t1,t2,t3,…,tN),一个用户指定的打分函数s和一个整数k.那么,对不确定数据ti排在第m位的概率Prm(ti)定义如下:Prm(ti)=∑sn在这里,sn是不确定数据ti的每个实例的得分.在k个不确定数据(t1,t2,…,tm,…,tk)∈D中,通过计算它们的Prm(ti),会得到每个数据排在第m位的概率,而top-k查询返回每个位置上概率最大的数据.根据定义1,在P2P环境中有下面定义2.定义2.P2P环境中不确定数据的top-k查询.假设P2P网络中的不确定数据库为D={D1,D2,…,Dn},Di为第i个网络节点上的不确定数据集合.对于D中的任意一个数据对象t∈D来说,排在位置m上概率表示为Prm(t),Prm(t)∈[0,1].最大的概率表示为MPm=max{Prm(t1),…,Prm(tN)},其中N为D中数据对象的个数.在P2P网络中不确定数据的top-k查询返回的结果集合t定义为每个位置上概率最大的数据对象集合,即t={argMP1,argMP2,…,argMPk},定义3.概率阈值的top-k查询.给定一个概率阈值p(0<p1),PT-top-k找到一组数据对象满足{t|t∈T,Ptop-k(t)p}.3Top-犽查询处理框架给定一组P2P环境下的不确定数据库,那么在P2P环境中的不确定数据的top-k查询可以由以下几个步骤完成:(1)空间剪枝.基于Quad-tree,在网络中每一个节点上构建一个索引.超级节点的索引结构与普通节点的索引结构相似,但是超级节点的索引是通过搜集它所在的子网络中普通结点的一些概要信息而建立的.在超级结点之间通过广播这些概要信息建立一个全局的索引.基于全局索引,每个超级节点都拥有P2P网络中不确定数据的概要信息,因此可以在top-k查询到达时在超级节点上对全局数据进行空间剪枝.(2)Top-k概率计算.这个部分介绍了top-k概率计算的整个过程,其中主要分为三个方面.首先根据局部top-k概率与全局top-k概率之间的关系给出不确定数据成为top-k概率的上界,然后根据top-k概率与skyline概率之间的关系给出不确定数据成为top-k概率的下界,最后给出了分布式Skyline概率的计算方法.(3)采样计算.在最终候选集中采用蒙特卡洛采样方法对分布式不确定数据进行采样计算来获得最终结果.4基本方法不确定数据模型在空间中的表现形式如图1,每个不确定元组都是以离散的形式分布在一定范围的最小边界矩形中的.显而易见,每个不确定的元组都有一个得分的最大值sU(t)和最小值sL(t).因此,有下面定理.定理1.分值剪枝.给定一个不确定数据库D和一个用户指定的打分函数s,t1,t2,…,tN是D中的不确定数据.如果sL(ti)sU(tj),则s(ti)s(tj),其中1iN,1jN.那么,ti排在tj之前.反之亦成立.证明.因为sL(ti)sU(tj)∪sU(tj)s(tj)sL(ti)s(tj),所以s(ti)sL(ti)∪sL(ti)s(tj)s(ti)s(tj).推论1.空间剪枝.给定一个不确定数据库D,一个用户指定的打分函数s和一个整数k,T是D中的任意一个集合,o是空间中的任意一点.如果s(o)sU(T)∩|T|k,那么,T一定是top-k中的Page4结果;如果s(o)sU(T)∩|T|k∩s(o)sL({D-T}),那么,{D-T}一定不是top-k中的结果.通过以上结论,可以排除掉一部分不属于结果集中的数据并且可以返回一部分结果集中的数据.在下文中主要处理的是不能被确定是否是结果集中的数据.因此首先利用Quad-tree在P2P网络上建立全局索引,然后根据空间剪枝方法找出不能够被确定是否是结果集中的数据,最后在分布式环境中利用式(1)计算出最终结果[7].5Top-犽概率计算策略进行过滤.和下界(定理3和定理5).首先介绍一下top-k概率计算的整个过程:(1)构建全局索引.(2)在全局索引上利用基本方法中的空间剪枝(3)计算剩余不确定数据的top-k概率的上界(4)执行概率剪枝(定理2).根据定义1,可以在本地计算出任意一个不确定数据排在第m位置的概率,从而得到每个位置概率最大的数据作为本地数据的top-k.但是定义1的计算代价比较大,并且在分布式计算时还需要多次这样的计算,所以这种方法效率不高.如果能够找出一个概率区间[PrL(t),PrU(t)]约束Prm(t),并利用定义3的阈值进一步缩小候选集的范围,那么就会提高查询效率.定理2.概率剪枝.给定一个不确定数据库D,一个用户指定的打分函数s,一个整数k和一个阈值p.t是D中的一个不确定元组,Prm(t)是在第m位置的最大概率并且PrmL(t)Prm(t)PrmU(t).如果PrmU(t)p,那么Prm(t)被剪枝掉;如果PrmL(t)p,那么Prm(t)则是top-k中的结果.证明.因为PrmU(t)p∪Prm(t)PrmU(t)Prm(t)p,所以根据定义3,Prm(t)被剪枝掉.同理,因为PrmL(t)p∪PrmL(t)Prm(t)Prm(t)p,所以根据定义3,Prm(t)则是top-k中的结果.根据定理2,可以估计Prm(t)的上界与下界,然后对候选集进行筛选,得到最精炼的候选集,减少最终的计算代价和网络传输代价.5.1概率上界的估计假设Di是P2P网络中某一节点的不确定数据库Di∈D,t1,t2,…,tk是排在前k个的不确定数据,Pr1(t1),Pr2(t2),…,Prk(tk)分别是其排在第m位置的概率,其中s(t1)s(t2),…,s(tk).如果t1,t2,…,tk∈Di,则称Pr1(t1),Pr2(t2),…,Prk(tk)为本地top-k概率PrLtop-k(t);如果t1,t2,…,tk∈D,则称Pr1(t1),Pr2(t2),…,Prk(tk)为全局top-k概率PrGtop-k(t).定理3.概率上界.给定一个不确定元组t,t∈Ti,有证明.假设tnew是新到Ti中的一个元组.如果tnew的得分排在t的后面,那么tnew对整个top-k结果没有影响.如果tnew的得分排在t的前面,那么t的top-k概率为其中,ai为元组tnew的实例.因为,Prtop-(k-1)(t)Prtop-k(t),所以Prtop-k(t)Prtop-k(t).证毕.通过定理2和定理3,可以计算出任意一个不确定数据在本地的top-k概率PrLtop-k(t),然后判断PrLtop-k(t)与阈值p的大小.如果PrLtop-k(t)p,那么PrGtop-k(t)p.因此可以在本地剪枝掉不属于结果集中的数据,并且不需要在网络中传输数据,大大减少了网络传输代价.虽然概率上界能够有效地剪枝不属于结果集中的数据,并且不需要网络传输代价,但是利用概率上界剪枝是在用户发送查询之后才能进行的.本地top-k概率计算时间仍然包括在用户查询的响应时间内的.如果能够找到一种方法,在查询到来时就能立即判断出该不确定数据是否属于top-k查询的结果集中,那么会大幅度地减少查询响应时间.5.2概率下界的估计定理4.支配剪枝.给定一个不确定数据库D,不确定数据(t1,…,ti,…,tj,…,tN)∈D,1iN,“”为支配关系.假设用户指定的打分函数是单调的,那么有如果titj,那么,s(ti)s(tj).证明.假设t是d维数据,s(t)的大小是t在各维得分的和.因为titj,所以s(ti)在各维的得分的和小于s(tj)在各维的得分的和,因此s(ti)s(tj).给定D是一个不确定数据库,t是D中的不确Page5定数据,ti∈D,整数k代表top-k查询的结果个数,整数k1代表skyline上数据的个数.那么,有以下定理.定理5.概率下界.给定一个不确定元组t,t∈T,当kk1时有证明.假设D是一个不确定数据库,t={t1,t2,t3,…,tN}是D中的不确定数据,ti∈D,1iN.如果不确定数据ti能够成为top-k,ti的得分s(ti)大于剩余N-k个数据得分的事件的可能性用“”表示,那么,可以给出不确定数据t的top-k概率的表示形式:Prtop-k(t)=∑类似的,假设k1为skyline上数据的个数.如果ti能够成为skyline中的点,ti支配剩余N-k1个数据的事件的可能性用“”表示,那么,可以给出不确定数据t的skyline概率的表示形式:Prsky(t)=∑根据定理4,因为titjs(ti)s(tj),所以事件s(ti)s(tj)包含事件titj.因此,根据式(3)和(4),可以得到,当kk1时,Prsky(t)Prtop-k(t).通过定理5,得到了top-k概率的下界.Prsky(t)p时,可以判断哪些数据是top-k中的数据.但是,需要在P2P网络中预先计算出Prsky(t).下面就介绍如何在P2P网络中计算skyline概率.5.3分布式skyline概率计算定义4.不确定数据的分布式skyline.给定h个网络节点C={c1,c2,…,ch},每一个节点都拥有一个不确定数据库DI(1Ih).t={t1,t2,t3,…,tN}是D中的不确定数据,ti∈D(1iN),a={a1,a2,…,an}是元组t的实例.那么元组t的全局skyline概率PrGsky(t)为PrGsky(t)=Pr(t)×∏t∈D1,ajaj∑n如果将所有分布式的数据库统一到一个数据库D中,那么式(5)可以被改写成PrGsky(t)=Pr(t)×∏t∈D,ajaj∑n根据定义,可以计算出不确定数据在分布式中的skyline概率.但是这个计算复杂度仍然是指数级的.因此,给出以下几个过滤方法减少计算代价.假设不确定元组ti是DI中的元组,那么ti在DJ中的skyline概率为引理1.给定h个网络节点C={c1,c2,…,ch},每一个节点都拥有一个不确定数据库DI(1Ih).ti在DI中的全局skyline概率为证明.PrGsky(t)=Pr(t)×∏t∈D1,ajaj∑n根据引理1,有以下推论.推论2.skyline概率上界.Skyline概率是可以在查询到来之前计算完成的,为了能够在线计算的时候更加有效,根据定理4可得引理2.引理2.给定一个不确定数据t,t的skyline概率为Prsky,有证明.因为top-1一定在skyline上,所以当t是top-1时,t一定是skyline上的点;反之当t是skyline上的点时,t不一定是top-1,所以,Prsky(t)Page6Prtop-1(t).通过以上结论和定义4,可以计算出任意不确定元组t的全局skyline概率.因此,可以满足定理5的计算条件.6采样计算通过剪枝之后,剩余的数据采用采样计算的方式计算出最后的结果.从问题定义中可以看出,根据定义2处理top-k查询的计算代价很大.因此本节给出一个简单而有效的抽样方法近似计算Prtop-k.设Xi是一个随机变量,表示对元组t中实例的一次采样.如果成功采样,Xi=1,否则,Xi=0.那么对整个数据库的采样就构成随机向量犡=(X1,X2,…,XN).犡表示对整个数据库的采样.(犡)=1,如果元组t在X中是top-k结果定义(犡)为给出了近似求解E((犡))的步骤.根据定义2,可得Prtop-k的值是E((犡)),算法1算法1.LocalApproxCompute().输入:不确定数据1.L=0;2.Repeat;3.对元组实例的概率Pr(Xi=a)的采样;4.if((犡)==1)5.L=L+1;6.UntilNtimes;7.ReturnL/N.当N的值足够大,Chernoff-Hoeffding界给出引理3.对任意的δ(0<δ<1)和τ(τ>0),如近似解的精确保证[8].果N3ln2()δτ2,则Pr|L/N-E((犡))>τE((犡))|δ.引理3保证随机算法1的近似解有很高的精度.算法1的第3步骤需要在P2P网络的各个节点上进行采样.而在P2P网络的各个节点上采样的关键是如何能够减少网络代价.如果能够在尽量少的节点上进行采样并且使样本能够尽量覆盖整个数据空间,那么在采样的过程中需要对网路节点进行有效的选择.因为通过全局索引,超级节点已经对整个网络数据的分布情况有了大致的了解,并且全局索引中的每个结点都记录了数据来自于那些网络节点.因此可以在超级节点上找出最少的节点并且这些节点的数据能够尽量覆盖整个数据空间.选择网络节点主要分为两个步骤:第1步是在全局索引中找出只含有一个网络节点的结点,如果这些网络节点也包含于其他的索引结点中,那么就不考虑这些索引结点中的网络节点.第2步是在全局索引中找出包含两个直到N(索引结点中包含的最大的网络节点个数)个网络节点的结点,最终找出能够覆盖整个数据空间的网络节点.算法2给出了在P2P环境中近似求解E((犡))的步骤.算法2.ApproxCompute().输入:Quad-tree索引QT输出:覆盖所有结点的网络节点集合S;1.For(inti=1;i<N+1;i++)2.For(eachnodeninQT)(n为当前结点)3.R=P(n);(得到当前结点里的网络节点集合)4.If(|R|!=i)5.Break;6.If(S∩R=)7.S=S∪R;8.RetrunS9.LocalApproxCompute().7性能分析本节采用合成的不确定数据验证本文的算法,算法代码用VisualC++6.0编写,运行环境是AMDAthlon双核2.6GHzCPU,2GB内存和320GB硬盘.对本文给出的算法,BPT表示“基本算法”,IPT表示带有概率剪枝和分布式采样的top-k查询算法.在一个d维数据空间S=[0,1]d上生成2~5维数据.首先在每个网络节点上随机生成确定数据,然后以确定数据为中心r为半径的区域内随机生成β=[0,3]个实例,其中r是一个尽可能小的值.数据集的大小是1.2MB~2MB.P2P网络是由超级节点连接起来的,超级节点之间可以用任意的拓扑结构相连接.实验中,网络规模的大小由普通节点中的数量(Np)来衡量,Np的范围是40~120,其中网络超级节点的个数Nsp是普通节点个数Np的10%.每次实验时,随机产生20个查询,记录网络平均传输代价.本文同时也对采样计算时本地计算精度和整个网络的计算精度进行了比较.表2给出具体的实验参数,黑体为默认值.Page7Np:普通节点个数40,60,80,100,120R:数据集大小1.2MB,1.4MB,1.6MB,1.8MB,2MBp:阈值k:返回结果个数100,300,500,700,900首先检验当普通节点个数Np变化时BPT和IPT算法的网络传输代价.图2给出实验结果,其中横坐标是普通节点个数,纵坐标是网络中传递元组的个数.从结果看出,网络传输代价在两种算法中都随着Np的增加而增加.这个结果跟预期的一样,因为当网络中节点数量增加时,待采样的数据并没有发生改变,采样过程增加了网络通信,因此网络传输代价随之增加.从图2中可以明显地看出,IPT算法所造成的网络代价很低,大量的数据在概率剪枝过程中被剪掉了,减少了最终采样计算时的数据量.比较这两种算法,IPT算法比BPT算法平均多减掉90%以上的网络代价.其次测试当数据集大小R变化时BPT和IPT算法的网络传输代价.图3给出了实验结果,其中横坐标是R,纵坐标是网络中传递元组的个数.从实验结果可以看出,网络传输代价在BPT和IPT算法中随着R的增加而增加.而且通过观察可以发现,柱状图的变化趋势并不大.这说明了当数据集变化时,最终进行采样计算的数据个数变化不大.因为概率剪枝不会因为数据量的增加而降低剪枝效力.从图3中可以明显地看出,IPT算法所造成的网络代价仍然很低,大量的数据在概率剪枝过程中被剪掉了,减少了最终采样计算时的数据量.比较这两种算法,IPT算法比BPT算法平均多减掉94%以上的网络代价.然后测试当阈值p变化时BPT和IPT算法的网络传输代价.图4给出了实验结果,其中横坐标是阈值p,纵坐标是网络中传递元组的个数.从实验结果可以看出,当阈值p变化时BPT算法的网络传输代价没有发生改变,因为BPT算法没有进行概率剪枝.IPT算法当p为0.1和0.7时网络传输代价很小,而当p为0.3和0.5时网络代价要比0.1和0.7时大很多.这说明本文采用的两种概率剪枝的方法都很有效,在阈值很小的时候概率下界保证了剪枝效率,而当阈值很大时概率上界保证了剪枝效率.当p为0.5时,IPT算法仍然比BPT算法平均多减掉85%以上的网络代价.接下来测试当返回结果个数k变化时BPT和IPT算法的网络传输代价.图5给出了实验结果,其中横坐标是返回结果个数k,纵坐标是网络中传递元组的个数.从实验结果可以看出,当返回结果个数k变化时BPT算法的网络传输代价并不稳定,因为空间剪枝的效率是随着数据分布的变化而变化的.而网络传输代价在IPT算法中随着k的增加而减少.因为概率下界的前提是kk1,所以,当k值越大能够被定理5确认的结果的可能性就越大,而概率上界并不因为k值的变化而变化,因此IPT算法的网络传输代价呈减少趋势.当k为100时,IPT算Page8法比BPT算法平均多减掉88%以上的网络代价.然后测试当阈值p变化时概率上界、概率下界和空间剪枝这3种剪枝方法的剪枝效率.图6给出了实验结果,其中横坐标是阈值p,纵坐标是剪枝掉数据的比例.3种剪枝方法分别在同一个数据集中进行测试.从实验结果可以看出,当阈值p变化时空间剪枝算法所剪掉的数据基本没有发生改变,因为空间剪枝算法与阈值之间没有相关联系.概率上界的剪枝效率会随着p的变大而提高,因为根据定理3,p值越大概率上界越有效.相反的,概率下界的剪枝效率会随着p的变大而减小,因为根据定理5,p值越大概率下界越有效.最后测试IPT算法在P2P网络中采样计算的质量.图7给出了实验结果,其中横坐标是采样数量,top-k结果的精度.两条曲线分别代表了P2P网络中的采样计算精度和将所有数据集中化后的采样计算精度.集中化的数据采样计算精度在97%以上,这说明了引理3能够保证采样计算的精度.P2P数据采样计算的精度在88%以上,虽然精度略比集中化的数据低,但是前面的几个实验有力地证明了IPT算法避免了大量的网络传输代价,在网络中IPT算法能够较好地处理不确定数据的top-k查询.为了考察算法在真实网络中的效力,以下实验在1000个普通节点的情况下分别比较R值和k值变化时网络传输代价.从图8和图9中可以看出,当增大网络规模时,BPT算法的效果基本保持不变.因为全局索引保证了空间剪枝的效率不随网络变化而变化.而IPT算法在大规模网络中增加了网络中传递元组的个数.这是因为数据比较分散,在采样计算的过程中增加了网络传输代价.这两个实验说明,采样计算决定了网络变化时数据在网络中的传输代价.8相关工作Top-k查询只返回最满足用户要求的k个结果,从而避免产生大量的无用结果,因而受到广泛的重视,在多媒体检索、数字图书馆、Web搜索和电子商务等领域具有广泛的应用.然而分布式环境下的top-k查询处理比较复杂.TA算法在集中式网络环境中应用最为广泛.TA算法的执行步骤是不固定的,它采用的是随机查找策略,这种查找方法使TA算法的查找代价较大.基于TA算法,许多有效的方法已经被应用到分布式top-k查询中.TPUT[9]算法的目的是剪掉不需要的数据对象并且是一定终止在3个步骤之内.KLEE[10]算法得到的top-k结果是近似结果,KLEE算法的执行步骤是固定的,为3步或4步,4步中多出的一步为优化候选集合.KLEE的效率和结果质量成反比,带宽的节省量和通信的步骤成反比.已有很多面向集中式环境中的不确定数据Page9top-k查询的工作.U-Topk[11]查询返回一个长度为k的元组矢量,其在所有可能世界中的发生概率最大;U-kRanks[11]返回在各个级别中出现频率最大的元组;PT-k[12]首先定义一个阈值,返回所有发生概率超过阈值的元组;Pk-topk和Global-topk[13]则返回发生概率最大的k个元组.Expectedranktop-k返回期望排序最低的k个元组.Soliman等人提出了基于搜索空间的方法来处理U-Topk查询与U-kRanks查询.各元组首先按照其Rank从大到小进行排序.然后不断地构造搜索空间,缩小空间的范围,最终获得查询结果.Hua等人提出了针对PT-k查询的解决方法.Cheng等人针对U-Topk查询提出了一种动态维护的结构,支持元组的插入与删除.他们提出了构造Dominant集合的方法进行求解.在其后续工作中,也提出了近似解决方案[12].文献[14]主要研究的是排序查询,不确定数据假设分布在一定区域中.文献[15]是在不确定数据流上研究的top-k查询.文献[16]提出了有效的方法来回答U-top-k和U-kRanks查询.其中对于U-kRanks查询利用的是泊松二项式递推[17]的方法.文献[18]考虑的是任意SQL查询并且排序是根据一个元组满足查询的概率而不是利用一个排序函数.文献[19]提出了两种排序理论可以满足离散和连续分布的不确定数据.面向分布式不确定数据的top-k查询的研究并不是很多.文献[20]提出了在通信和计算方面都比较高效的算法来计算分布式环境下的Expectedranktop-k.文献[21]是在传感器网络中进行top-k查询,它返回的是在每个传感器的值在任何时刻的排序之后概率最大的前k个传感器.9结束语本文所述的是一个面向P2P网络的不确定数据的top-k查询.采用离散的可能世界模型定义不确定数据.在指出可能世界实例的数量远大于不确定数据的规模之后,本文首先采用Quad-tree索引不确定数据并利用索引结构以及数据之间的支配关系对不确定数据进行空间剪枝,然后提出了一个在P2P环境中的top-k查询的基本方法.在分析了基本方法的不足之后,采用了概率剪枝和分布式采样计算改进基本方法.其中,局部top-k概率和全局skyline概率分别是全局top-k概率的上界和下界.通过概率剪枝和采样计算可以大大减少网络中数据的传输量和本地的计算代价.实验结果验证了本文的设计.今后将研究在P2P环境中基于不确定数据的多种查询.
