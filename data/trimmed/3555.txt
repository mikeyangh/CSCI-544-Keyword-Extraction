Page1一种基于执行力模型的服务平台自主控制方法顾军1),2)罗军舟1)曹玖新1)李伟1)1)(东南大学计算机科学与工程学院南京211189)2)(中国矿业大学计算机科学与技术学院江苏徐州221116)摘要开放的分布式服务平台倾向于涵盖更丰富的管理功能,支持更强的分散交互性,从而导致软件管理和维护的难度和成本问题日益突出.为此,引入一种自管理的服务平台体系结构参考模型,以构件作为功能实现载体,服务作为功能组织手段,交互作为功能扩展方式.提出了一种基于分层反馈的自主控制架构,以服务构件及相互之间的交互关系为控制对象,执行力模型为决策基础.在管理服务的可用性和性能建模中运用了马尔可夫过程、随机Petri网和排队网模型理论,并考虑了链路和节点的失效修复机制.仿真结果表明,基于排队Petri网的执行力模型能够反映失效率和修复时间对服务平台性能和可用性的影响,并验证了自主控制方法对提高服务平台有效性的积极作用.关键词服务平台;自主控制;执行力;服务构件;交互;排队Petri网1引言在面向服务的分布式系统架构中,服务以可共享与可集成的资源为基础来构建,通常表现为一个独立的业务功能.相比于对象、构件等早期形式,服务具有更大的粒度、更强的独立性和更松散的耦合性,从而为形成灵活、动态的服务组合带来了方便[1].由全球网格论坛GGF提出的开放网格服务架构OGSA(OpenGridServicesArchitecture)[2]采用服务作为资源封装和互操作的统一形式,通过定义基于OGSI/WSRF的标准框架协议实现面向服务的开放网格系统.在这样的系统中,高层商业目标、内部组织规模和外部运行环境均会不断变化,因此客观上要求面向服务的系统平台具有动态适应能力,能够感知环境和用户需求的变化,并根据这些变化调整自身的结构和行为,以实现特定的目标,包括资源的动态配置、服务的动态合成、系统参数的动态校正、软硬件故障的动态修复等.如果单靠IT专家和技术人员依据系统状态和高层的管理策略直接对系统进行干预和处理,不但反应慢、效率低,而且成本也高[3].如何使服务平台能够根据管理者的要求实现自我管理已经成为亟待解决的重要问题之一[4].在本文的前期工作中,面向服务的网格平台被看作是应用管理、执行管理、安全管理、资源管理、数据管理、信息服务等多种管理功能软件实体的集合,它们之间通过分布式的交互和协作共同完成全局的管理任务和目标[5].所有管理功能都设计成服务构件(servicecomponent)形式,以构件作为功能实现载体,以服务作为功能组织手段,随同实现服务的构件一起部署.服务构件可以是多种子服务构件的组合体,支持需求驱动的服务构件的选择、匹配、组装和协同,从而为管理者和使用者提供高效、灵活的管理服务定制功能.这样的设计提升了服务平台的可管理性,包括状态可观测和状态可调整,前者支持监测度量,后者支持控制执行.然而,究竟采用什么方法对服务平台的自管理行为进行控制需要进一步研究.文献[3]将现有的自管理技术方法归纳为两种基本类型:知识模型方法和数学模型方法.知识模型方法运用人工智能或知识工程的方法和技术所建立的知识模型,在知识库中建立状态判定、策略和问题求解等3类知识,通过基于知识分析和逻辑推理进行决策.该方法只能进行定性分析和逻辑推理,不适合那些需要定量描述系统的有关过程和特性的场合,如对系统响应速度、吞吐量、CPU和存储器的利用率等系统性能的管理.数学模型方法一般运用控制论或运筹学的理论和方法来建立,能够依据不断改变的资源和环境状态自主决定系统参数的调整,使得系统性能保持在期望的范围内.对于网格计算和云计算这种大规模、跨多管理域的虚拟计算环境,资源故障和构件失效的情况相当普遍,需要综合考虑系统的可用性和性能,即执行力(performability)[6].执行力可以看作是对系统在给定时间间隔内获得和维护满意的性能级别能力的量化,在此过程中需要考虑系统结构和环境的改变.以执行力模型作为自主控制的决策基础,有助于把握服务平台的内部结构和外部环境的不确定特性,并保持服务平台运行的高性能.因此,本文以面向Internet的开放、动态、难控的网络环境为基本驱动力,以实现服务平台软件维护和管理的自主性为目标,研究一种基于执行力模型的服务平台自主控制方法.该方法能够有效降低服务平台中间件的复杂性,主要体现在以下三方面:(1)软件实体的服务化和构件化提升了中间件的轻量化水平;(2)自主控制实现框架的建立使得中间件能够按照管理需求和运行环境的变化进行动态调整和演化,使系统具有尽可能高的用户满意度;(3)综合考虑可用性和性能的执行力模型有利于全面预测和评估中间件的执行状态,提高触发自主控制机制实施的准确度和时效性.本文第2节介绍相关工作;第3节提出一种自管理的服务平台体系结构参考模型,介绍服务构件的交互关系;第4节阐述基于执行力模型的服务平台自主控制方法,介绍基于分层反馈控制的实现框架,重点研究服务构件和管理服务的执行力建模方法;第5节给出实验和数据分析;第6节总结全文并展望下一步的工作.2相关工作自主计算由IBM公司在2001年发起[7],旨在Page3参照自主神经系统的自我调节机制,以现有理论和技术为基础构建自主计算系统,使得信息系统整体上实现自我管理.Kephart等人[8]于2003年提出MAPE(监视-分析-规划-执行)控制环机制,在2004年提出由动作策略、目标策略和效用函数策略组成的统一框架[9];Kephart[10]还以效用函数策略作为反映高层目标的手段,建立了一种用于原型数据中心的资源自主管理和分配模型.Hinchey等人[11]在自主计算的基础上提出了自我管理软件的概念,提供了一个软件开发和演化的整体观,有望把系统的自动化、自治和可靠性带到一个新的水平.自主计算思想已经在学术和工业界得到了广泛应用.文献[12]在面向网格的ASSIST编程环境中实现了一个具有QoS控制能力的自主应用管理者原型;文献[13]提出通过对网格构件模型(GridComponentModel)的行为骨架(BehaviouralSkele-tons)实现网格构件的自主管理;AutoMate项目针对网格环境中存在的复杂性、动态性、异构性和不确定性等挑战,给出了一种自主系统的概念模型和实现体系,开发了一个能够根据高级任务的目标和约束动态使用基本网格服务的自主组合引擎[14-15];AutoGrid项目[16]致力于在Integrade网格基础设施之上增加自管理能力,减少人对系统配置和管理的干涉;文献[17]将构件模型与结构化覆盖网(structuredoverlaynetworks)相结合,提供大规模分布式应用的自管理能力;文献[18]提出网格单元(gridunit)概念,通过代理技术构建自管理框架.OptimalGrid项目研究如何简化大规模平行网格应用的创建和管理[19].文献[20]提出把自主计算、网格计算和虚拟化技术结合起来,建立自主的商务网格的思想.这些研究虽然提高了网格系统面向应用的自管理能力,但并没有考虑网格中间件本身的可管理性和可重用性问题,易导致更高的系统复杂性.研究人员在系统的可运行性建模和分析方面已经开展了许多工作[21].分析性数学模型可分为确定模型和随机模型等[22].排队模型是一种确定性的数学模型,是很好的网络建模工具.随机模型是以随机过程为基础,主要包括马尔可夫回报模型、随机进程代数以及随机Petri网等,这些基于状态的随机方法更容易对系统状态进行全面有效的描述,精确刻画系统随机行为以及组成部件之间的相互关系,便于计算各种分析指标.Ranami和Trivedi等人[23-24]经过对CORBA事件服务和通知服务的性能分析,给出了分布消息服务的一种可运行性建模框架[25],进一步研究了对实时系统响应时间分布建模的技术[26].刘显明等人[27]考虑了网格环境和监控信息的特点,使用随机Petri网建立网格监控体系结构的可运行性模型,并讨论了系统可用性、响应时间分布、事件丢失概率、公平性等问题.Das等人[28-29]使用分层排队网对多层服务系统的可运行性进行了建模,并给出了基于马尔可夫链的分析方法.Qu等人[30]采用随机回报网(StochasticRewardNets,SRN)对计算网格的分层资源调度算法的可运行性进行了评价.基于SOA的分布式系统采用松耦合和重组装的开发模式,随着组合服务的规模增大,基于随机回报网的可运行性模型越来越复杂.Kogekar等人[31]针对这个问题,提出了一种模型驱动的通用框架,实现多个SRN模型自动化综合和仿真.Bernardi等人[32]对基于概率模型的可信赖评价方法进行了研究,并给出了利用随机Petri对复杂系统进行建模和评价的方法.林闯等人[33]研究了随机Petri网对网络系统可信赖性建模分析的方法和步骤,着重研究了随机Petri网描述系统的服务失效模型和容错模型,并给出了网络可信赖性分析中主要指标的计算方法.为了更加有效地对管理服务特性进行定量分析,特别是对动态性的描述,需要在上述研究的基础上建立相应的数学模型用于定量描述服务构件的有关动态和静态过程.服务平台的管理行为具有随机性,并满足马尔可夫特性,可以用排队论建立性能模型.排队Petri网(QueueingPetriNets,QPN)[34-35]继承和发展了排队网和随机Petri网的优点,可用于描述服务管理的动态行为、性能指标和可用性,因此我们采用分层排队Petri网对服务平台执行力进行建模和评价.3自管理的服务平台参考模型分布式服务平台不仅要管理网络、设备、数据、任务、用户等多种对象,还要综合考虑QoS、安全、性能、可靠、可信等指标对管理行为的约束,所以其软件构成将会很丰富,实现起来也很复杂.特别是随着服务平台开发、部署、运行和维护的外部环境逐渐从封闭、静态、可控走向开放、动态、难控,不能再假设平台中各个部分都遵从统一的设计和管理,也不能完全精确地预先确定软件的结构组成和各个部分的行为,更无法界定软件部件与外部环境的边界,因此服务平台软件的网络化和构件化成为新的发展趋势[36].首先定义相关概念如下.Page4mf1∩mf2…mfn-1∩mfn=0.定义1.管理功能集合MFset=∪n定义2.管理功能子集MFsubset=∏l管理功能子集是功能集合MFset的一个子集合,同时这些子功能之间又有一定的逻辑关系,而不是简单的联合.定义3.管理服务MSset=∪m理子服务的集合.一个管理子服务MSi总是与一个管理功能子集相对应,是管理功能的抽象表示,也可看作是面向应用的管理功能的逻辑实现.定义4.服务资源集合SRset=∪m支持服务执行的资源总和,包括虚拟资源和物理资源.定义5.服务构件子集SCset=∏l构件子集是服务资源集合SCset的一个子集合,与功能子集一样,这些子服务构件之间有一定的组合和协作关系.本文提出的自管理的服务平台体系结构参考模型是一个用以指导建立具体分布式应用系统的抽象框架(如图1所示),描述了平台中间件的环境设施以及其中的部件和部件之间的关系,但不直接受任何具体标准、技术或其它实现细节的约束.际的软硬件资源集合.参考模型自下而上分为5层:(1)物理资源层(physicalresourcelayer)是实(2)虚拟资源层(virtualresourcelayer)是对物(3)服务构件层(servicecomponentlayer)是完理资源的服务化封装和描述.成特定管理功能的服务构件集合,提供实现服务所需要的各种环境和构件,负责用细粒度的构件实现粗粒度的服务.一个服务构件(SC)实现一种管理功能,通常没有明确的业务目标.服务构件的粒度有大小之分,功能有强弱之判,层次有高低之别.由于环境的动态性和管理的分散性,服务构件需要在不同的时刻实施不同的协同行为.若干服务构件可以在构件管理引擎(componentmanagementengine)的作用下协作完成更大的功能.服务构件组合(servicecomponentcomposite)以上层的管理服务目标为操作指导,可以实现跨节点的构件交互,是保证在不同抽象层次上对中间件进行描述、分析和验证的基础,也是实现管理服务定制的基础.自主构件管理者(autonomiccomponentmanager)负责对执行状态的服务构件提供自管理机制,能够在运行过程中对外部环境和应用需求的变化做出适当反应,从而将系统提供的服务的功能或性能维持在一个令人满意的水平上.(4)管理服务层(managementservicelayer)包含了面向应用的各种管理功能的服务实例.管理服务的功能设计不是固定的,可以根据管理需求动态扩展,如附加服务(pluggableservice).服务管理引擎(servicemanagementengine)负责服务发现、服务组合、服务协同等工作.自主服务管理者(auto-nomicservicemanager)负责实现管理服务的自管理,包括服务的监控、分析、规划和执行等.(5)应用层(applicationlayer)对外提供与用户交互的接口,获取用户的管理需求(如计算密集型、数据密集型、业务流程型等)和服务质量要求,制定或调整管理功能的部署规划和执行策略.为适应大规模网络环境而采取的分布式管理模式使得服务构件的数量快速扩张,增加了管理和维护的难度和成本.研究表明,引起系统复杂行为的主要原因不是元件的数量而是元件之间的交互,只要能保持系统元件之间交互的基本性质,那么即使对系统加以简化,系统的基本特性也不会改变[37].因此,本文提出的自管理服务平台采用基于交互研究服务构件的组织模式.不同的交互关系和交互方法将会对整体的管理服务的性能、可靠性、可信性等产生重大影响.在管理需求和策略指导下,分散在不同节点上的服务构件可能存在的交互关系[38]如下.定义6.假设有服务构件SCi和SCj,如果SCi执行完毕后,SCj接着开始执行,那么称之为顺序方式(sequencestyle),记作SCi;SCj.Page5定义7.假设有服务构件SCi,如果SCi重复执行若干次,那么称之为重复方式(iterativestyle),记作μSCi.定义8.假设有服务构件SCi和SCj,如果SCi和SCj相互独立执行,那么称之为并发方式(con-currentstyle),记作SCi‖SCj.定义9.假设有服务构件SCi和SCj,如果SCi和SCj并行执行以提供相同的管理服务功能,那么称之为容错方式(fault-tolerantstyle),记作SCi|SCj.从可用性和性能角度考察服务构件的交互关系,sequence和concurrency两种方式下服务构件的执行力相互制约,iterative方式可以看作k个服务构件按照sequence方式连续工作,而fault-toler-ant方式的服务构件独立工作、择优选用,相互之间没有直接影响.4基于执行力模型的自主控制方法4.1分层的反馈控制架构服务平台自主控制方法以反馈控制为基础,主要的系统构造任务包括:分析服务平台体系结构并把它建模为一个反馈控制系统;以服务构件、管理服务以及相互之间的交互关系作为控制对象;通过对控制对象的描述和建模,把执行力控制问题映射为一个系统的控制循环;选择适当的传感器来动态监控当前系统运行状态,及时预测和定位可能存在的失效或缺陷环节;指导效应器根据一定的策略和规则实现系统行为的自适应调整.本文提出的基于分层反馈的自主控制实现架构如图2所示,下层负责面向服务构件的局部控制,上层控制面向应用的全局管理服务.全局控制器所使用的系统模型是抽象模型,它包含与全局目标相关的信息,如用于刻画服务构件之间的交互细节的局部变量.全局控制器管理服务平台的宏观特性,它通过命令的方式对每个局部控制器施加操作约束.每个局部控制器则基于操作约束优化本地的管理服务性能.构件控制器(componentcontroller)表示为三元组:CC=(CM,CMB,CD).式中,CM是构件的分析性模型(CModel),负责建模结果的表示和存放;CMB是模型生成器(CModelBuilder),负责定量描述系统的有关过程和特性,如对系统响应速度、吞吐量、CPU和存储器的利用率、失效率等性能度量的管理,对系统可靠性、可用性和安全性的评估等;CD是决策部件(CDecision),实现服务构件状态偏离期望目标时的自适应功能.服务控制器(servicecon-troller)的组成与构件控制器基本一致,可以表示为三元组:SCon=(SM,SMB,SD).不同的是服务的分析性模型(SModel)是由下层服务构件的分析模型通过组合计算得到,反映了全局的执行状态.服务控制器部件在一定的外部指导支持下运行,常见的外部指导有:SLAs是用户提交的QoS需求,策略(policy)是表征高层管理目标的任何形式化规范,用于驱动和约束构件和服务的行为.自主服务构件(autonomicservicecomponent)是自主控制对象,具有监控、决策和控制3种功能,可以实现自我觉察和外部环境感知,其形式化模型见文献[5].自主服务构件的种类和数目取决于实际应用对服务平台管理功能的需求类型和应用请求的规模,反映在软件开发环节上就是不同功能的软件实体的参数接口、内部逻辑和调用关系不一样.但是从软件维护与管理的角度,可以把分布式中间件平台软件抽象为一组分布于Internet环境下各个节点的、具有主体化特征的软件实体,以及一组用于支撑这些软件实体以各种交互方式进行协同的连接子,即服务构件.因此,本文只考虑服务构件对外表现的管理功能的差异,不考虑服务构件内部的实现细节.由于服务平台管理工作是开放、动态和应用驱动的,服务构件的组织不拘束于某个固定形式,应用需求、管理目标和策略的不同决定了服务构件组成和执行序列的差异.对这些服务构件的管理主要体现在服务构件负责哪些管理功能,服务构件在节点上如何分布,服务构件之间的交互关系是怎样的,即通过不同管理方案的设计,选择服务构件的数量、实现流程和路径,对不同的组合方案的性能和可靠性进行预测和评估,从而为不同的对象管理目标选择一个较优的管理方案.服务平台自主控制的目标可以定义为当预测到Page6管理服务在执行过程中可能违背期望的约束指标时,服务控制器(SCon)选择合理的策略调整管理服务中服务构件的工作和组织方式.为此,首先要明确自主控制对象,给出关于管理服务的类型、强度、服务质量等的描述,定义需要的服务构件的类型、数量、性能参数、可用性指标、可靠性度量、执行依赖关系序列等,形成方案文件;然后建立控制对象的执行力模型,通过模型的仿真数据分析可以预先判断局部服务构件和整体管理服务的特点,如平均服务时间、可用性程度等;最后参照分析结果和决策依据做出判断,完成下一步工作.4.2执行力度量根据分布式计算环境的动态性和虚拟化特征,服务平台执行力取决于资源执行力、构件执行力和服务执行力[39].资源执行力是对构件运行环境的抽象和量化.资源的虚拟化使得资源执行力的测量变得更加复杂,需要解决资源的动态性和非专注性的问题.构件执行力描述构件自身的性能属性和可用性度量,构件开发者需要将构件的这些属性和度量加入到构件的描述中.构件的性能需要和实际的运行环境兼容,在特定环境下进行实例化,并监控构件的可靠性和有效性.服务执行力针对特定应用域中系统完成某次行为所需构件以及构件之间的交互,它可以从系统设计的用例图和时序图中得到.构件之间通过接口进行交互,会触发多种执行行为的发生.由此可见,资源执行力对外表现为构件功能的运行,服务执行力对外表现为构件行为的变迁.服务构件可能同时服务于多个管理服务域,同一个服务构件在不同的运行过程中可能产生各种反映服务构件当前状态的数据(事件),包括各种日志事件和实时事件,如服务的操作状态、性能状态、失效征兆和异常事件等[40].讨论之前,假定所有服务构件都是第三方构件,它们的细节处理被排除在外,并且服务构件在相应的资源上能够运行.执行力度量的最普通形式就是系统各属性的加权和,每个属性表征了对象的特性.执行力函数的一种格式为其中:V是属性i的相对重要性的加权条件变量;xi是属性i的值.通常,对归一化的fPerS来说,∑n但是,要确定不同属性的权值往往非常困难,而且不同属性在不同交互关系下的计算方式也是不同的.例如在顺序方式下,响应时间(responsetime)和延迟(delay)具有叠加性,失效概率(failureproba-bility)和修复概率(recoveryprobability)具有连乘性,失效速率(failurerate)和修复速率(recoveryrate)是独立分布的.因此很难直接用来计算服务构件执行力.此外,在实际的服务平台中,管理服务的处理能力往往受到服务构件数量、服务请求规模、管理强度、资源能力和外来干扰等的影响,参数改变具有一定的随机性和不确定性,需要动态修正计算结果,增加了计算复杂性.因此,本文认为服务平台执行力模型是从用户的角度反映服务构件完成管理任务的执行能力,一般由可用性模型、性能模型和结合方法三部分组成.其中,可用性模型描述了管理任务被服务平台成功完成的概率,不但考虑到服务构件软硬件和连接环节的失效对可靠性的影响,而且关注失效可修复情况下系统服务可用性的统一表达.性能模型描述了不同的管理服务构件执行序列的执行效率,需要考虑响应时间、延迟、吞吐量、丢失率等属性.可用性模型与性能模型的结合主要表现为引入失效修复机制后对性能属性参数的影响.4.3可用性模型网络环境的开放、动态和分布性特征导致资源故障和构件失效的情况相当普遍.为了更好地描述失效对服务平台可用性的影响,对节点、链路以及服务构件软件的失效情况做如下的基本假设:(1)链路是节点之间的虚拟链路,不考虑具体的链路拓扑结构;(2)服务平台中节点、链路和各服务构件之间相互独立,它们的失效是统计独立的;(3)运行服务构件的节点在获得管理任务后立即执行,并且其无失效执行时间服从指数分布;(4)服务构件之间在交换信息期间,链路无失效工作的时间服从指数分布;(5)需要较长时间和占用较多计算机资源的“大任务”,其节点可靠性随着时间的增加而呈指数衰减[41].令管理服务的总复杂度为C,由m个相互独立的管理服务构件组成,其中第i个服务构件SCi(i=1,2,…,m)的复杂度为ci.由于服务构件之间的独立性,C可以表示为各服务构件的复杂度之和,即服务平台根据网络资源的分布情况,将服务构件SCi分配到节点Nk来执行.如果节点Nk的CPU处理速度为spk,那么在不发生失效的情况下,服务构Page7件Si在节点Nk的执行时间为软件出现错误是不可避免的,由软件错误导致的软件失效也是不可避免的[42].为了更好地描述软件可靠性对服务构件的影响,假设执行服务构件SCi所调用程序的失效率为λp(i),运行服务构件的节点的失效率为λn(k),那么服务构件执行时不发生失效的概率为Rki(i)=e-λp(i)·τkie-λn(k)·τki=e-λp(i)+λn(k)网络通信环境和服务构件的交互方式是服务构件行为变迁必须要考虑的影响因素.假设通信链路带宽为B,链路失效率为λL,服务构件SC交互的总次数为K,按照C/S方式调用构件后第i次传输的数据为Di,按照移动代理方式调用构件需要传输的数据为Dr,移动代理迁移过程中需要传输的数据为Dm.那么,服务构件之间通信时不发生失效的概率为C/S方式下移动代理方式下基于上述分析,加之节点失效和链路失效具有独立性,那么服务构件SCi能成功地通过网络获取数据并被节点Nk执行完成的概率为在实际的服务平台中,服务构件SCi的执行往往因为所在节点Nk发生失效而被迫终止.为此,引入节点失效修复机制,即当节点发生用户误操作、CPU资源短时衰竭、网络瞬时堵塞或短期中断等可修复故障时,节点自动运行失效恢复程序,修复已停止的服务构件执行程序,这样就可以有效解决管理服务遇到失效而终止的问题.当然,失效修复具有一定的概率,即失效可以修复,修复后节点Nk从失效断点继续执行管理服务构件,直到遇到不可修复的失效或者服务构件SCi执行完毕.反之,失效不可修复,SCi被迫终止,在该节点的管理任务执行宣告失败.如果运行服务构件的节点之间只有一条通信链路,那么在服务构件交换信息期间通信链路发生了失效,服务构件的执行将失败,管理任务也随之被终止.服务构件的失效行为可以通过连续时间马尔可夫链(ContinuousTimeMarkovChain,CTMC)加以描述[25],如图3(a)所示.其中,UP代表服务构件运行正常,PF代表服务构件程序失效,失效率为λp,修复率为γp,NF代表服务构件节点失效,失效率为λn,修复率为γn,成功修复的概率为常数cp.因此,服务构件SCi的稳定状态概率计算如下:πUP=1+λpγp+1烄πCF=λpγpπUP,烅πNF=1烆服务构件SCi可用性为ASCi=πUP.图3(a)的两状态等价可用性模型如图3(b)所示,1表示服务构件运行正常(up),0表示服务构件运行失效(down).令等价的失效率和修复率分别表示为λeq和γeq,那么可用性表示为不同交互方式下服务构件的可用性描述如下:①顺序方式服务平台中的服务构件SC1和SC2之间通过链路L通信实现交互与协作,那么它们的可用性模型可表示为一个8状态的连续时间马尔可夫链,如图4所示.分别以上标(SC1),(SC2)和(L)标识交互的两个服务构件和链路的失效率和修复率,每个状态表示Page8一个三元组(SC1,L,SC2),那么顺序执行方式下的可用性为ASC1;SC2(即所有状态的稳定状态概率)见表1.状态111011101110001010100000②重复方式假设服务构件SC1重复运行μ次后进入下一个服务构件执行状态,那么循环方式下的可用性AμSC1为③并发方式假设SC1和SC2各自独立运行后进入同一个服务构件的执行状态,它们的可用性模型可表示为一个4状态的连续时间马尔可夫链,如图5所示.那么并发方式下的可用性ASC1‖SC2(即所有状态的稳定状态概率)见表2.④容错方式假设SC1和SC2同时运行提供相同的服务管理功能,其中一个完成后进入下一个服务构件的执行状态,那么容错方式下的可用性ASC1|SC2为ASC1SC2=1-(1-ASC1)(1-ASC2)(11)在上述研究的基础上,只要能够明确管理服务中的服务构件数量、执行序列图和相关参数,就可以从理论上对基于服务构件的分布式管理服务的可用性进行分析和计算.4.4执行力模型4.4.1建模服务构件执行力服务平台中的服务构件具有分布性,因此通信环节是必须要考虑的环节.本文将服务构件看作是链路模型和节点模型的结合,并满足以下假设:(1)所有失效都是可修复的;(2)链路和节点的失效是统计独立的.由于网络资源的共享性,管理节点上往往运行着除管理服务外的其它任务,这些额外的负载也会影响管理服务的响应时间.因此,每个服务构件包括4类队列,分别建模通信链路(LP)、修复环节(LR,NR),服务节点(NP)和外部负载(EW).每类队列刻画了待处理对象的序列关系和性能特征.在可用性建模中引入节点失效修复机制后,服务构件的生命周期分为有效执行和失效修复2个阶段.以通信链路为例,在有效执行阶段,通信任务持续进入队列LP,完成后进入节点处理环节;在失效修复阶段,新的通信任务不再被接受,已经接受和正在运行的任务将会终止,链路修复后由零负载开始接受新通信任务,因此通信链路的有效吞吐量和利用率将下降,平均响应时间将延长.基于排队Petri网(QPN)的服务构件链路模型如图6所示.白色方框表示时间变迁(timedtransi-tion),黑色方框图代表瞬时变迁(immediatetransi-tion).圆圈表示普通库所(ordinaryplace),带有竖线的圆圈表示队列库所(queueingplace).托肯(token)m代表管理任务,包括在可用状态下执行的通信任务l和发生失效的通信任务lf.标识作用的托肯a代表通信链路的状态(1=有效,0=无效),r代表修复环节的完成情况(1=完成,0=进行中);控制作用的托肯f1和f2分别用于决定变迁lt7和lt8是否可以触发(0=禁止,1=允许).图6中的变迁和库所描述如下.(1)库所库所Input和Output分别表示服务构件的管LS表示进入的管理任务被链路接受;L1用来接受按照一定的失效概率发生后形成理任务输入和输出;的任务序列;Page9LE用来限制链路资源LP在有效和失效修复两个阶段的使用是互斥和独占的,其内部托肯包括a和r,取值在0和1之间切换;复阶段;LR表示管理任务遇到链路失效后进入失效修LP是多类队列库所,表示通信链路对信息传输的处理,包含一个G/M/1/FCFS队列;L2用来接受LP完成的通信任务l,链路有效时l直接转移到Output库所中,失效时记录任务l的数目后用来抵消链路修复后新接受的等量任务,以便模拟修复后的链路从零负载开始运行的效果;任务时数目增加,任务通信完成后数目减少;理环节;LC1记录链路有效时进入的任务数目,接受新LC2刻画了链路修复后用来抵消新进入链路通信任务的数目,在数值上等于失效时刻已经接受但被迫中断的任务数目num1和修复期间LP完成的任务数目num2的差(num1-num2);变迁lt7和lt8的触发.LF用来标识链路是否处于失效状态以便控制(2)变迁瞬时变迁st表示管理任务进入到服务构件链路;瞬时变迁lt1表示管理任务按两种可能方式完成通信,一种是链路有效情况下直接进入链路队列,一种是失效修复后再进入链路队列,不同方式的选择由式(5)和(6)计算的链路失效概率φL决定;瞬时变迁lt2实现两种触发模式,完成的工作包括接受有效任务进入链路LP,链路修复后用LC2中记录的任务数目抵消新接受的等量任务;瞬时变迁lt3完成管理任务的数据通信操作;瞬时变迁lt4将完成的管理任务送到下一个处瞬时变迁lt5表示失效任务进入链路修复阶段,时间变迁lt6表示链路经历一个失效修复过程,瞬时变迁lt7将链路失效时刻已经接受但被迫并设置控制用的托肯f1和f2为1;lt6的时间延迟服从γL的指数分布;中断的任务数目转移到LC2中;数目抵消转移到LC2中.基于排队Petri网的服务构件节点模型在链路模型的基础上增加了对外部负载的描述,如图7所示.托肯m代表管理任务,包括在可用状态下执行的节点任务n和发生失效的节点任务nf,w代表管理任务之外的工作负载.托肯a代表处理节点的状瞬时变迁lt8用链路失效期间LP完成的任务态(1=有效,0=无效),r代表修复环节的完成情况(1=完成,0=进行中),f代表进入的节点是否有效(0=有效,1=失效),ew控制外部负载的产生(0=禁止,1=允许).与链路模型相比,主要的区别如下:NP是多类队列库所,表示服务节点对管理任务的执行,包含一个G/M/m/PS队列;EW是队列库所,产生管理任务之外的工作负载,包含一个G/M//IS队列;瞬时变迁nt1表示管理任务在数据交换成功后以两种可能方式进入到节点处理队列中执行:一种是直接处理,一种是节点失效修复后再由节点处理,不同方式的选择由式(4)计算的服务构件节点的失效概率φki决定;时间变迁nt6表示节点经历一个失效修复过程,nt6的时间延迟服从(γp+γn)的指数分布;瞬时变迁nt9在托肯ew的控制下产生额外工作负载进入到服务构件节点中.4.4.2建模管理服务执行力服务平台管理服务的组合是应用驱动的,服务构件组成和执行序列由应用需求、管理目标和自管理策略决定.为此,构造一个应用场景来说明管理服务的执行过程,如图8所示.具体为:(1)用户管理服务构件(Usc)处理用户的访问控制;(2)调用应用管理服务构件(Asc)完成用户应用请求的预处理;(3)调用资源管理服务构件(Rsc)完成资源分配和任务调度,由于需要进行协商,所以可能需要重复多次运行Rsc构件,假设为k次;(4)调用两个执行管理服务构件(Esc)进行并发任务的处理;(5)将处理结果传送给Usc构件,然后按照用户需求显示给用户.该执行过程可以形式化表示为“Usc;Asc;(ηRsc);(Esc1‖Esc2);Usc”.Page10该应用场景对应的排队Petri网模型如图9所示.队列库所Q表示用户请求队列,库所U表示请求任务等待被链路接受,库所Pi表示管理任务t完成上一个阶段的工作后等待进入下一阶段处理.图9管理服务示例的QPN表示通过Petri网的变迁触发机制的设计可以描述服务构件之间多种交互关系,瞬时变迁sti,iti和cti分别为顺序、重复和并发方式下的过程变迁.图9中变迁的设计如表3所示,符号“A{x}→B{y}”表示模型中变迁的触发模式(firingmode),托肯“x”在一次变迁中由库所A迁出后以“y”的形式存放在库所B中.符号“A{x}→{}”表示“x”在变迁中由库所A迁出后不留在任何库所中,而是被销毁(destroy).ut1,ut2st1,st2,st3,st4,st5,st6,1:In{t}→Out{t}st7st8st9it1it2lt3it4it5ct1ct2,ct3,ct4,ct5,ct6,ct71:In{t}→Out{t}ct85实验与分析5.1参数配置本文采用QPME1.01软件包[43-44]计算稳态时加粗的带线圆圈Li和Ni分别表示链路和节点的排队Petri网.所有被调用的服务构件可能分布在多个硬件资源上,服务构件的处理能力依赖于处理器个数.模型中每个库所的吞吐量、平均逗留时间以及平均标识的数量,预测服务构件和管理服务的平均响应时间和利用率.服务请求的发生时间一般可设为随机变量,运行服务构件的节点队列根据服务管理请求的到达先后确定对象的处理序列,服务策略是预先确定的,信源分布也是事先确定的.由于QPME现有版本还不支持时间变迁的直接使用,本文的仿真实验采用瞬时变迁和队列库所组合等价替换时间变迁lt6和nt6,完成的服务构件QPN模型如图10所示.新增加的队列库所Q模拟稳定的管理任务产生源,LR表示通信链路失效后等待失效修复处理,NR表示节点软硬件失效后管理任务等待失效修复处理,库所Link、Node和SC分别用来跟踪和描述链路、节点软硬件和服务构件的总体执行状况.由于服务管理请求的到来服从泊松分布,服务请求的处理时间、失效修复时间服从指数分布,所以库所属性如表4所示.图10中变迁的设计如表5所示,对于lt1和nt1这样的变迁属于自由选择冲突模型,选择哪一个变迁模式实施并不依赖于库所中的标识,而取决于变迁模式的触发权值(firingweight).令变迁lt1的变迁模式的触发权值分别为w(1)和w(2),且w(2)=1,那么φL=w(2)失效概率φL成近似倒数关系.同理,可以求得变迁st1的变迁模式的触发权值.变迁lt3和nt3的设计将有效和失效管理任务区别对待,有效任务进入到后续环节(mode1),无效任务转化为一定的负载(mode2).Page11图10服务构件的QPN模型库所托肯初始值队列类型离队规则参数p1Q{m}{1}G/M//ISNormal0.0001LS,NS{m}{0}naFIFOLE,NE{a,r}{1,1}naNormalLF,NF{f1,f2}{0,0}naNormalLC1,LC2,NC1,NC2L1{l,lf}{0,0}naFIFOL2{l}{0}naFIFOLP{l}{0}G/M/1/FCFSNormal0.005LR{lf}{0}G/M//ISNormal0.0001N1{n,nf}{0,0}naFIFON2{n}{0}naFIFONP{n,w}{0,0}G/M/2/PSNormal{0.0001,0.0001}NR{nf}{0}G/M//ISNormal0.00001EW{w}{1}G/M//ISNormal0.000005Link,Node,SC{m}{0}naNormal变迁st1:Q{m}→Link{m}+SC{m}+LS{m}+Q{m}lt11:LS{m}→L1{l}2:LS{m}→L1{lf}lt21:L1{l}+LE{a}→LP{l}+LE{a}+LC1{c}2:L1{l}+LE{a}+LC2{c}→LE{a}+LC1{c}lt31:LP{l}→L2{l}lt41:L2{l}+LE{r}+LC1{c}+Link{m}→lt51:L1{lf}+LE{a}+LE{r}→LR{lf}+LF{f1}+LF{f2}lt61:LR{lf}+LF{f1}+LF{f2}→LE{a}+LE{r}lt71:LC1{c}+LF{f1}→LC2{c}+LF{f1}lt81:LC2{c}+LF{f2}+L2{l}→LF{f2}nt11:NS{m}→N1{n}2:NS{m}→N1{nf}nt21:N1{n}+NE{a}→NP{n}+NE{a}+NC1{c}2:N1{n}+NE{a}+NC2{c}→NE{a}+NC1{c}nt31:NP{n}→Q{m}+N2{n}2:EW{w}→{}nt41:N2{n}+SC{m}+Node{m}+NC1{c}+NE{r}→NE{r}nt51:N1{nf}+NE{a}+NE{r}+NE{ew}→nt61:NF{f1}+NF{f2}+NR{nf}→nt71:NC1{c}+NF{f1}→NC2{c}+NF{f1}nt71:NC2{c}+NF{f2}+N2{n}→NF{f2}nt81:EW{w}+NE{ew}→NE{ew}+NP{w}+EW{w}5.2数据分析5.2.1失效率和修复时间的影响本文分两个场景讨论.场景1.初始时,变迁lt1和st1的w(1)都取值100000,w(2)都取值1,表4中其它变迁及变迁模式的触发权值也设置为1,库所的队列类型和参数p1见表3,然后假设其它参数不变,只有链路失效概率φL即变迁lt1的w(1)发生变化.场景2.初始时,变迁lt1:w(1)=100000,变迁st1:w(1)=1000,w(2)取值1,NR:p1=0.00001,然后假设其它参数不变,只有节点失效修复时间(即库所NR的参数p1)发生变化.仿真结果见表6,置信区间为95%,性能属性包括稳态时的到达率(Ai)、负载量(Xi)、利用率(Ui)和平均响应时间(τi).场景1中,在稳定任务源(AQ)的驱动下,随着w(1)由100000减小到1000,链路失效率依次增加,导致链路失效修复环节(LR)的到达率(ALR)、负载量(XLR)和利用率(ULR)逐渐增加,而通信环节(LP)的任务到达率(ALP)、负载量(XLP)和利用率(ULP)下降,有效任务的吞吐量减少,越来越多的任务(XLC2)由于失效在运行期间被中断.日益频繁的失效扩大了修复环节的时间延迟对链路的影响,使得管理任务在链路(Link)中的平均逗留时间(τLink)变长,单位时间内逗留在链路中的任务数量(XLink)快速上升,进一步影响了服务构件的整体性能,负载量(XSC)和平均响应时间(τSC)都被迫增加.场景2中,链路和节点的失效率保持不变,保证了节点的任务到达率(ANS)的稳定.随着修复环节(NR)的参数p1由0.00001增大为0.001,节点失效修复的时间(τNR)逐渐变少,一方面使得节点修复环节(NR)的处理能力增强,负载量(XNR)降低,另一方面又导致节点的有效运行时间相对增加,有Page12效任务到达率(ANP(n))提高,节点处理能力(XNode)增强,有效任务负载量(XNP(n))和额外负载(XNP(w))下降.NC2刻画了节点修复后抵消新进入的任务的数目,在数值上等于失效时刻逗留在NP中的任务数目num1和修复期间NP完成的任务数表6仿真结果比较lt1:w(1)10000010000AQ9.9981E-59.9878E-59.9875E-5ANS9.9933E-51.0011E-41.0014E-4ALR5.0000E-108.5001E-91.0030E-7ANR9.6101E-81.02201E-79.4801E-8XLR3.8968E-69.5544E-50.001005XNR0.0096820.0010299.8402E-5ULR3.8968E-69.5544E-50.001005τNR100754.889110077.73771037.9824ALP9.9980E-59.9869E-59.9775E-5ANP(n)9.981461E-59.992573E-59.992582E-5XLP0.020410.020390.02038XNP(n)1.47071.38141.3697ULP0.020010.019990.01996XNP(w)0.072670.069250.06917XLC10.020410.020390.02038XNC11.46851.37931.3673ULC10.020010.019990.01996UNC10.6686990.6713920.670217XLC2ULC2XLink1.605139.7711488.5048XNode1253.13741152.14191151.2348τLink16047.5035398055.23184891007.2996τNode1.25396E71.150867E71.1497E7XSC15.601650.5698497.5156XSC1258.55661160.93291155.2123τSC156044.7427506098.99154981225.7033τSC1.2594E71.15963E71.1537E75.2.2自主性的作用在图10建模的基础上,赋予服务构件一定的自适应能力,即能够及时发现任务失效并立即重新调度管理任务的执行,那么得到扩展的服务构件QPN模型如图11所示,新增的库所LC3和NC3分别用来记录链路和节点失效时刻已经接受但被迫中断的任务数目.变迁模式的改变如表7所示.变迁lt1和st1的w(1)都取值1000,w(2)都取值1,表5中其它变迁及变迁模式的触发权值也设置为1,库所的队列类型和参数p1见表4,两个模型的度量结果对比见表8.在相同的初始配置条件下,引入图11扩展的服务构件QPN模型目num2的差(num1-num2).修复时间的缩短使得num2的值减少,因此NC2的负载量(XNC2)和利用率(UNC2)都提高了.对于节点来讲,节点处理能力(XNode)的提高减少了任务完成时间(τNode),进而影响到服务构件的整体性能(XSC,τSC).NR:p10.000010.0001自适应失效重调度机制后,链路、节点和服务构件的到达率下降,负载量(Xi)、利用率(Ui)和平均响应时间(τi)优化明显.变迁lt51:L1{lf}+LE{a}+LE{r}→lt71:LC1{c}+LF{f1}→LC2{c}+LF{f1}+LC3{c}lt91:LC3{c}→LS{m}nt52:N1{nf}+NE{a}+NE{r}+NE{ew}→nt71:NC1{c}+NF{f1}→NC2{c}+NF{f1}+NC3{c}nt101:NC3{c}→NS{m}Page13表8度量结果对比度量模型1ALink1.0014E-49.9998E-5ANode1.00036E-49.9998E-5ASC1.001434E-49.999808E-5XLink527.29740.02235XNode1347.03431.6544XSC1874.33171.67678ULink0.9999450.020951UNode0.9998650.680174USC0.9999870.687062τLink5265147.3879223.4963τNode1.3466E716544.5983τSC1.87165E716768.09496况下的性能与可用性进行分析.为此,在图9管理服由结果可知,要想获得满意的性能,一方面必须降低服务构件在链路和节点软硬件方面的失效率,务示例的基础上对应用服务构件Asc进行冗余处理,对应的执行力模型如图12所示.减少发生故障的可能;另一方面,必须缩短修复时间,提高服务构件的失效修复能力.除了服务构件自增加的变迁触发模式如表9所示.身的优化,加强对失效发生的实时监控和自主处理能力显得更加重要.5.2.3容错的作用提高可靠性的主要方法是冗余,包括设备冗余、信息冗余、时间冗余等.设备冗余包括硬件冗余和软件冗余.本文的执行力模型能够对服务构件冗余情图12冗余处理后管理服务示例的QPN表示实验结果表明,经过冗余处理后管理服务的可靠性和性能都有所提高,其变化趋势和理论分析是一致的.此外,提出的执行力建模方法也能很好地反映服务构件组成和交互方式对管理服务运行效果的影响.6结论和下一步工作随着信息技术的迅猛发展,大规模、开放、异构、动态的信息服务系统不断涌现,如网格计算、云计算ft2,ft3,ft4,ft51:In{t}→Out{t}变迁ft11:P1{t}→L21{t}+L22{t}+P21{n}ft61:P21{n}+P22{t}→P2{t}+P24{b}ft71:P21{n}+P23{t}→P2{t}+P25{b}ft81:P24{b}+P23{t}→{}ft91:P25{b}+P22{t}→{}和普适计算等.这些系统越来越倾向于构建面向服务的计算和资源管理平台,实现功能软件实体的敏捷部署,并能根据环境变化和用户需求对服务平台进行自我管理.但是从已有的研究成果[3]看,自我管理还未形成系统的、成熟的理论体系,所涉及到的技术问题也是多方面多层次的,还需要更深入的研究.本文提出的自管理服务平台参考模型以构件和服务作为基本组成方式,将构件的紧耦合和服务的松耦合结合起来,以构件的形式实现功能,以服务的形式实现交互,形成可伸缩的自动化中间件管理模Page14式.通过设计基于分层反馈的自主控制框架提高了服务平台自管理的可扩展性和灵活性,能够保证各个组成部件能够有机地结合起来形成高效、有序的虚拟计算环境.针对面向Internet的服务平台中资源故障和构件失效多发的情况,以综合考虑了可用性和性能的执行力模型作为自主控制的决策基础,有助于把握服务平台的内部结构和外部环境的不确定特性,并保持服务平台运行的高性能.服务平台执行力模型既涉及到软硬件自身的运行状态,也受制于多个服务构件的交互关系和组织结构的选择.执行力建模过程中运用了马尔可夫过程、随机Petri网和排队论,有利于对服务平台的非功能特性进行定性和定量分析.仿真结果表明基于排队Petri网的执行力模型能够反映失效率和修复能力对性能和可用性的影响,并验证了自主控制方法对提高管理服务执行力的积极作用.为了更好地说明所提出方法的可行性,我们在已经完成的国家“十一五”科技支撑计划项目子课题“数字教育资源集成与共享”的系统成果基础上研制了相关原型系统.数字教育资源集成与共享系统平台采用基于构件和面向服务的思想,选择IBMRational进行服务构件和业务服务的设计、开发和封装,并采用WebSphere进行服务平台的部署.服务架构采用对内和对外两级分布式结构,其中内部服务包括副本管理服务、目录管理服务、存储调度服务与传输控制服务,对外服务包括资源标准化服务、资源注册服务、统计分析服务、资源访问服务、资源管理服务以及信息检索服务.原型系统的设计思路是利用所提出的方法对该系统平台的执行力进行建模,并通过在线仿真工具QPME对所部属服务的执行力进行预测与评估,然后结合服务构件的配置、诊断、修复和重配置技术,实现系统平台的自主控制.已经完成的工作表明所提出的方法能够有效提高系统平台的自管理能力,但限于篇幅,具体细节将另文阐述.在下一步的工作中,我们将针对服务平台的功能性和非功能性需求,设计合适的自主控制策略,探讨服务构件的性能和可用性监控技术,并在此基础上对原型系统进行扩展,进一步验证其有效性并进行改进.致谢衷心感谢SamuelKounev博士提供的排队Petri网仿真软件QPME1.01对本文研究工作的帮助!
