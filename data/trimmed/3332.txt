Page1基于关系数据库映射的模糊数据XML建模严丽1)马宗民2)刘健2)张富2)1)(东北大学软件学院沈阳110819)2)(东北大学信息科学与工程学院沈阳110819)摘要在很多现实世界应用中存在着大量的不精确性和不确定性信息,正是由于这个原因,基于各类数据模型的模糊数据建模的研究已经广泛展开.当前互联网上存在大量的电子数据资源,XML已经成为Web上信息表示和交换的标准,但现有的XML研究成果难以满足Web环境下智能化数据管理的需求.文中从数据库信息建模的角度入手,基于模糊集和可能性分布理论,识别出XML文档中的多粒度数据模糊性,进一步研究了模糊XML模型.在形式化给出映射规则的基础上,通过给出转化算法实现了从模糊关系数据库到模糊XML模型的转化.最后,通过例子证实了所提转化方法的有效性.文中所提出的转化方法为全面构建模糊XML数据管理体系提供了理论基础.关键词XML;模糊集;可能性分布;关系数据库;映射1引言随着Web的广泛使用并产生海量的电子数据,Web上的数据表示和交换已变得越来越重要,当前XML已经成为了Web上信息表示和交换的标准[1].XML及其相关标准的推出,为需要在Web上进行数据交换的应用开发(例如电子商务和供应链管理等)提供了技术支持,并因此产生了有关XML数据管理的需求,例如XML文档的存储和查询等.为了存储、查询和更新XML数据,实现XML和数据库的集成是必要的[2],包括关系数据库、面向对象数据库和对象-关系数据库在内的各类数据库已经用于与XML文档的相互映射[3-12],例如XML到数据库的映射和数据库到XML的映射.在这些种类的数据库中,关系数据库以其成熟的技术和广泛的应用,成为了实现XML数据管理的首选[6-9,12].此外,由于XML缺乏表示现实世界数据以及它们之间复杂内在语义关系的充足能力,因此使用其它方法描述数据范例、开发出概念数据模型、最后把这样的模型转换成XML是非常必要的.最近的研究工作已经致力于XML文档模式[13-17]和XMLSchema[18-19]的概念数据建模,例如在文献[13]中,UML类图被用于XMLDTD(documenttypedefi-nition)的设计.在现实世界应用中,信息通常是不精确和不确定的,模糊集是一种广泛使用的表示不精确和不确定信息的方法[20].基于关系数据模型的模糊关系数据库在文献中已被广泛研究[21-23],而为了表示模糊对象、模糊复杂值属性以及复杂的模糊对象关系,当前对模糊数据建模的研究则主要集中在含不精确和不确定信息概念数据模型[24-25]和面向对象数据库[26]上.在电子商务和供应链框架下,已有研究文章讨论信息的模糊性,并揭示了模糊集理论是实现Web基商务智能非常重要的技术手段[27-29].在人工智能及知识工程领域,模糊知识的表示与处理是该领域一个重要的研究课题,基于XML的模糊推理及决策支持系统可方便地实现Web应用中该类系统在不同开发者或用户之间的共享、交换、重用和集成[30].在语义Web中,为了表示和处理不精确和不确定数据与知识,其核心内容的本体及逻辑基础描述逻辑已被模糊扩展[31],作为语义Web本体语言OWL建模手段的XML,其语法形式需要模糊扩展.除此之外,经由对各类数据源进行概要与评估信息查询和抽取形成的XML文档,其中可能含有大量的模糊信息.可以看出,智能Web的构建以及基于Web的智能数据处理的实现和智能系统的开发需要XML具有模糊信息处理的能力,模糊XML数据模型在这些领域具有十分广泛的适用性.应当指出的是,虽然XML已成为Web上数据表示与交换的标准,Web技术的发展与现实应用也提出了在XML中管理不精确和不确定信息的需求,但是当前的XML还不能表示和处理不精确和不确定数据.与数据库领域中含不精确和不确定信息数据库被广泛研究的情况不同,当前对表示和查询含不精确和不确定信息XML的研究还非常少,只有含不完全信息的XML[32]和含概率信息的XML[33-37]在研究文章有所讨论.文献[38]基于XML开发了模糊面向对象建模技术,以表示需求规范和容纳stereotype概念,便于不精确需求的建模.最新的研究文章[39]提出了使用UML类图设计模糊XML模型、使用关系数据库存储模糊XML的方法.本文将识别XML中的多粒度数据模糊性,并基于可能性分布理论提出模糊XML数据模型.本文将重点研究从模糊关系数据库到模糊XML模型的形式化转换方法,以实现基于模糊关系数据库的XML数据建模.本文第2节介绍基于模糊集和可能性分布理论的模糊关系数据库相关基础知识;第3节讨论XML文档中的数据模糊性,给出模糊XML数据的表示模型;第4节给出从模糊关系数据库到模糊XML模型转换的形式化方法;第5节总结全文.2不精确和不确定信息及模糊关系数据库在现实世界应用中,信息通常是不清楚和不明确的,因此不同种类的非完整(imperfect)信息已被广泛引入到数据库中[20].数据库系统中的不一致(inconsistent)信息、不精确(imprecise)信息、含糊信息(vague)、不确定(uncertain)信息和不明确(ambiguous)信息是5种基本的非完整(imperfect)信息[40-41],它们各自的含义如下:(1)不一致信息代表一类语义传统,表明现实世界的某相同方面在一个数据库或多个不同数据库中被不一致地表示多次,比如张三的年龄被同时记录为34岁和37岁.信息的不一致性通常来源于信息的集成[42].(2)信息的不精确性和含糊性与属性值的内容相关,表明要从一个给定的取值范围(可以是区间或者是集合)里选择一个值,但是当前不知道选择哪一Page3个,通常含糊信息表示成语言值.例如张三的年龄为一个集合{18,19,20,21},此为不精确信息,而李四的年龄为一个语言常量“年轻”,此为含糊信息.(3)信息的不确定性与属性取值的真值度相关,表明对一个或一组给定的值分配相信程度,例如李四当前的年龄是35的可能性是98%.有关用概率理论表示的随机不确定性不在本文的讨论范围.(4)信息的不明确性表示的是信息缺乏完全的语义,导致了多种可能的解释.通常,一个信息可能同时存在几种类型的非完整性,例如张三的年龄为一个集合{18,19,20,21},各个值的可能性分别是70%,95%,98%和85%.信息的不精确性和不确定性是非完整性信息的两种主要形式,文献中已提出多种方法来表示不精确和不确定信息[20],这些方法可归结为两大类,分别是符号方法和定量方法.由Zadeh提出的模糊集理论[43],就是一种被广泛使用的不精确和不确定信息的定量表示方法.2.1模糊集理论设U是论域,F是U上的一个模糊集.F的定义需要一个隶属函数.μF:U→[0,1],其中对于任意的u∈U,μF(u)表示u属于模糊集F的隶属度,模糊集F表示如下:F={μF(u1)/u1,μF(u2)/u2,…,μF(un)/un}.当U不是离散域的时候,模糊集F则表示如下:要说明一点,在本文中μF用于表示模糊集F的隶属函数,而μF(u)用于表示u属于模糊集F的隶属度,并且只讨论离散模糊集.实际上,上面的μF(u)也可以解释成一个变量X值为u的可能性度量,这里X取U中的值,此时一个模糊值可以用一个可能性分布πX来表示[44].πX={πX(u1)/u1,πX(u2)/u2,…,πX(un)/un}.这里,对于任意的ui∈U,πX(ui)表示ui为真的可能性.一个模糊集是一个概念的表示,而可能性分布与分布内一个值出现的可能性相关联.设πX和F分别是一个模糊值可能性分布表示和模糊集表示,则πX和F可看作是等同的,即πX=F[23].借助于模糊集和可能性分布,U上的一个模糊值可以用一个模糊集或一个可能性分布表示.此外,信息的模糊性也可以借助于域元素中的类似(similarity)关系来表示[21],此时,模糊性来自于论域中个体值之间的类似关系,而不是对象自身的状态.类似关系用于描述同一论域中个体值间的类似度,一个模糊值表示成一个集合,该集合的元素是论域中的一些值,并且论域中存在类似关系.类似关系具有自反性、对称性和传递性的特性,也有一些用于描述信息模糊性的关系,例如接近(proximity[45]和closeness[46])关系和近似(resemblance)关系[47],它们只具有自反性和对称性的特性.2.2模糊关系数据库由上面的讨论可知,模糊数据主要有3种表示形式,即模糊集表示、可能性分布表示和相似关系表示.与3种表示形式相关联,已有多种在关系数据库中表示模糊数据的方法,导致了几种模糊关系数据库模型.第1种模糊关系数据库模型基于模糊关系[23]和类似关系[21](或接近关系[45]和近似关系[47]),第2种模糊关系数据库模型基于可能性分布[22],它又可以进一步分成2类:元组与可能性相关联;属性值由可能性分别表示.与这3种模糊关系数据库模型相关联,它们的元组形式可分别表示如下:t=〈p1,p2,…,pi,…,pn〉t=〈a1,a2,…,ai,…,an,d〉t=〈πA1,πA2,…,πAi,…,πAn〉这里piDom(Ai),Dom(Ai)是属性Ai的值域,对于每个Dom(Ai),均有一个相似(或接近)关系.并且ai∈Dom(Ai),d∈(0,1],πAi是属性Ai在Dom(Ai)上的可能性分布,对于x∈Dom(Ai),πAi(x)表示x是属性值t[Ai]实际值的可能性.基于上面提到的基本模糊关系数据库模型,还有几种扩展的模糊关系数据库模型.很显然,可以把属性值是可能性分布、元组与隶属度相关联的2种基于可能性分布的模糊关系数据库结合到一起[48],其它可能的扩展形式则是把可能性分布同类似关系(或接近、近似关系)结合到一起.文献[46,49]中提出的基于扩展可能性分布的模糊关系数据库,其可能性分布和接近关系同时出现在数据库中.本文讨论其元组具有下面形式的模糊关系数据库模型:可以看出,在这种模糊关系数据库模型中,每个元组可能与一个可能度相关联,而属性值可以是由可能性分布表示的属性值.这种模糊关系数据库模型的形式化定义如下.定义1.关系模式R(A1,A2,…,An,An+1)上的一个模糊关系实例r是笛卡尔积Dom(A1)×Dom(A2)×…×Dom(An)×Dom(An+1)的一个子Page4集,其中Dom(Ai)(1in)可以是一个模糊子集或模糊子集的集合,Dom(An+1)为(0,1].An+1是特殊的属性,记作PD.应当指出的是,文献中根据模糊数据的表示形式已经提出多种模糊关系数据库模型,但是模糊关系数据库中模糊性只有两种形式,即属性值上的模糊性和元组上的模糊性.3模糊XML数据模型3.1XML文档中的模糊性模糊关系数据库中存在2类模糊性:一类与元组的成员度有关,另一类是用可能性分布表示的属性值.一个与元组相关联的成员度被解释成元组是相应关系实例成员的可能性,而表示属性值的可能性分布则意味着我们不知道属性的精确值,只知道该属性可能的取值范围以及每个可能值为真的可能性.作为数据结构化的XML,它能够提供以自然方式表示不精确和不确定信息的手段,此时,成员度可与XML的元素相关联,而可能性分布也可与元素的值相关联.现在来解释与XML元素相关联的成员度的含义,这里元素可以被元素嵌套,并且这些元素中的多个元素均可含有相关联的成员度.与一个元素相关联的成员度表明了现实世界状态中,包括该元素以及以该元素为根元素的子树的可能性.对于一个带子树的元素,子树中的每个节点不是独立的,是依赖于根到节点的链而存在的.源XML文档中的每个可能性是以相应父元素确切存在的事实为条件而指派的,换句话说,该可能性是一个基于其父元素存在的可能性精确为1.0假设的相对可能性.为了计算一个元素的绝对可能性,必须考虑其父元素的相对可能性.通常,一个元素的绝对可能性可以通过这样的方式得到:沿该元素到根元素路径上的所有相对可能性相乘,而所有这些相对可能性均可在源XML文档中得到.缺省状态下,相对可能性当作1.0处理.考虑一个从根节点A到节点C的关系链A→B→C,假设源XML文档中节点C、B、A相应的相对可能性分别为Poss(C|B)、Poss(B|A)和Poss(A),则有Poss(B)=Poss(B|A)×Poss(A),Poss(C)=Poss(C|B)×Poss(B|A)×Poss(A),这里节点C、B、A的相对可能性Poss(C|B)、Poss(B|A)、Poss(A)可以从源XML文档中直接得到.现在考虑XML元素间由于复杂调用而出现环的时候如何计算带环元素的绝对可能性.XML中的环可分为2种:XML中由于元素被循环调用,换句话说由于子元素嵌套调用父元素而形成的环被称作嵌套环,而XML中由于元素被多个(2个或2个以上)父元素非循环调用而形成的环被称作非嵌套环,本文只考虑非嵌套环的情况.当XML中存在非嵌套环时,从某一节点出发可通过多个不同的路径到达相同的节点.此时,带环元素沿不同的路径可计算得到多个可能不相同的绝对可能性,而其中的最大值将作为该带环元素的最终绝对可能性.假设从根节点A到节点D有关系链A→B→D和A→C→D,很显然D为一个带非嵌套环的元素.设源XML文档中节点D、B、A相应的相对可能性分别为Poss(D|B)、Poss(B|A)和Poss(A),节点D、C、A相应的相对可能性分别为Poss(D|C)、Poss(C|A)、Poss(A),则有Poss(D)=max(Poss(D|B)×Poss(B|A)×Poss(A),对于元素的值,XML限定其为单值的,但是不难发现,这种限制并不总是正确的.通常的情况是,有些数据项有多个值,并且这些值可能是完全未知的,只能用可能性分布来说明.以一个人的e-mail地址为例,由于可能同时有几个e-mail地址,因此要用多个字符串表示.在不完全知道“TomSmith”这个人e-mail地址的情况下,其e-mail地址为“TSmith@yahoo.com”的可能性是0.60,为“Tom_Smith@yahoo.com”的可能性是0.85,为“Tom_Smith@hotmail.com”的可能性是0.85,为“TSmith@hotmail.com”的可能性是0.55,为“TSmith@msn.com”的可能性是0.45.与上述情况相反,有些数据项则只能取单值,例如一个人的年龄是一个单值非负的整数.如果一个人的年龄值当前未知,则可以用一个可能性分布{0.4/23,0.6/25,0.8/27,1.0/29,1.0/30,1.0/31,0.8/33,0.6/35,0.4/37}来表示.基于上述讨论可以看出,一个可能性分布表示的模糊数据有2种解释:模糊析取数据和模糊合取数据.这样的元素关联;综上,XML文档中有2类模糊性:(1)第1类是元素的模糊性,可使用成员度与(2)第2类是元素属性值的模糊性,用可能性分布表示这样的值.要注意的是,对于后者又有2种类型的可能性分布,分别是析取可能性分布和合取可能性分布,它Page5们在祖先-后代链中可以出现在有或者没有自身孩子元素的子元素中.图1给出了一个带模糊信息的XML文档片断[39].1.〈universities〉2.〈universityUName=“OaklandUniversity”〉3.〈ValPoss=0.8〉4.〈departmentDName=“ComputerScienceandEngineering”〉5.〈employeeFID=“85431095”〉6.〈Disttype=“disjunctive”〉7.〈ValPoss=0.8〉8.〈fname〉FrankYager〈/name〉9.〈position〉AssociateProfessor〈/position〉10.〈office〉B1024〈/office〉11.〈course〉AdvancesinDatabaseSystems〈/course〉12.〈/Val〉13.〈ValPoss=0.6〉14.〈fname〉FrankYager〈/name〉15.〈position〉Professor〈/position〉16.〈office〉B1024〈/office〉17.〈course〉AdvancesinDatabaseSystems〈/course〉18.〈/Val〉19.〈/Dist〉20.〈/employee〉21.〈studentSID=“96421027”〉22.〈sname〉TomSmith〈/name〉23.〈age〉24.〈Disttype=“disjunctive”〉25.〈ValPoss=0.4〉23〈/Val〉26.〈ValPoss=0.6〉25〈/Val〉27.〈ValPoss=0.8〉27〈/Val〉28.〈ValPoss=1.0〉29〈/Val〉29.〈ValPoss=1.0〉30〈/Val〉30.〈ValPoss=1.0〉31〈/Val〉31.〈ValPoss=0.8〉33〈/Val〉32.〈ValPoss=0.6〉35〈/Val〉33.〈ValPoss=0.4〉37〈/Val〉34.〈/Dist〉35.〈/age〉36.〈sex〉Male〈/sex〉37.〈email〉38.〈Disttype=“conjunctive”〉39.〈ValPoss=0.60〉TSmith@yahoo.com〈/Val〉40.〈ValPoss=0.85〉T.Smith@yahoo.com〈/Val〉41.〈ValPoss=0.85〉T.Smith@hotmail.com〈/Val〉42.〈ValPoss=0.55〉TSmith@hotmail.com〈/Val〉43.〈ValPoss=0.45〉TSmith@msn.com〈/Val〉44.〈/Dist〉45.〈/email〉46.〈/student〉47.〈/department〉48.〈/Val〉49.〈/university〉50.〈universityUname=“WayneStateUniversity”〉51.〈/university〉52.〈/universities〉上面的例子描述的是一个国家指定城市所在地的大学情况,所讨论的是美国密歇根州底特律(Detroit)地区的大学.密歇根州立大学位于底特律市区内,它属于底特律地区大学的可能性是1;奥克兰大学位于密歇根州近底特律市的奥克兰(Oakland)郡,对于奥克兰大学是否属于底特律地区大学,则取决于如何定义底特律地区,是只包括底特律市,还是指大底特律地区(theGreaterDetroitArea).假设当前对底特律地区的确切定义未知,则奥克兰大学属于底特律地区大学的可能性将不为1,例如指定为0.8.此外,奥克兰大学计算机科学与工程系教师FrankYager当前处于提职阶段,其职称可能是副教授或者是教授,他作为副教授讲授“AdvancesinDatabaseSystems”课程、在办公室编号为B1024办公的可能性为0.8,而他作为教授讲授“AdvancesinDatabaseSystems”课程、在办公室编号为B1024办公的可能性则为0.6.奥克兰大学计算机科学与工程系学生TomSmith的“age”和“email”属性值是模糊的,分别用析取和合取可能性分布表示.3.2模糊XML的表示模型通过上面的例子可以清楚地看出,一个取值为[0,1]的可能性属性“Poss”应当首先引入,它与一个称作“Val”的模糊构造子共同用于说明一个给定元素存在于XML文档的可能性.让我们看图1中的第3行,〈ValPoss=0.8〉表明给定的大学这个元素是“奥克兰大学”的可能性等于0.8.对于可能性为1.0的元素,标签对〈ValPoss=1.0〉和〈/Val〉可以从XML文档中省略掉.基于标签对〈ValPoss〉和〈/Val〉,元素的可能性分布可以表示出来,而可能性分布也可以用于表示模糊的元素值.为此,需要引入一个称作“Dist”的模糊构造子,以说明一个可能性分布.一个Dist元素典型地有多个Val元素作为孩子元素,每一个孩子元素带有一个相关联的可能度.由上面的讨论已知,存在2种类型的可能性分布,因此Dist构造子应当指明可能性分布的类型是析取的还是合取的.再看图1中的例子,第24~34行表示的是学生“TomSmith”年龄的析取Dist构造子,第38~44行表示的是学生“TomSmith”电子邮件地址的合取Dist构造子.要注意的是,第24~34行和第38~44行中的可能性分布在祖先-后代链中均在叶子节点上,而实际上非叶子节点上也可以有可能性分布.让我们来看图1中第6~19行的析取Dist构造子,它表示ID为85431095雇员的2个可能的状态,其中第7~12行的状态值带有0.8的可能性,第13~18行的状态值带有0.6的可能性.为了实现模糊数据的XML建模,XML文档必须进行扩展,扩展的结果是引入了若干个模糊构造子.很显然,为了容纳这些模糊构造子,XML文档的模式应当做相应的修改.下面给出用于模糊XML数据建模的模糊DTD形式化描述.首先,相对于经典DTD,模糊DTD中增加了Page62个新元素,它们分别是Val元素和Dist元素.下面分别给出Val元素和Dist元素的形式化定义.〈!ELEMENTleafElement(#PCDATA|Dist)〉.(1)Val元素定义如下:〈!ELEMENTVal(#PCDATA|original-definition)〉〈!ATTLISTValPossCDATA“1.0”〉.(2)Dist元素定义如下:〈!ELEMENTDist(Val+)〉〈!ATTLISTDisttype(disjunctive|conjunctive)其次,在模糊DTD中除了引入新的Val元素和Dist元素之外,还需要对经典DTD中的元素定义进行修改,从而使得这些元素在模糊DTD中可以使用可能性分布(Dist).模糊DTD中的普通元素(即非Val和Dist的其它元素)可分成叶子元素和非叶子元素,下面分别给出它们的形式化定义.(1)对于只含文本或#PCDATA的叶子元素(比如说leafElement),它在模糊DTD中的定义从经典的变成该定义的含义是,叶子元素存在2种情况,一种情况是叶子元素是精确的(例如图1中的sname和student),此时上述定义就转变成如下经典DTD中普通叶子元素的定义另一种情况是叶子元素是模糊的,取可能性分布表示的值(例如图1中学生的age),此时上述定义转变成如下的定义形式:对于这样的模糊叶子元素,接下来需要分别使用Dist元素定义和Val元素定义进行进一步的定义,从而得到如下的定义形式:〈!ELEMENTleafElement(Dist)〉〈!ELEMENTDist(Val+)〉〈!ATTLISTDisttype(disjunctive|conjunctive)“disjunctive”〉〈!ELEMENTVal(#PCDATA)〉〈!ATTLISTValPossCDATA“1.0”〉.(2)对于非叶子元素(比如说nonleafElement),它在模糊DTD中的定义首先从经典的变成〈!ELEMENTnonleafElement(original-definition|Val+|Dist)〉.该定义的含义是,非叶子元素存在3种情况,一种情况是非叶子元素是精确的(例如图1中的student),此时上述定义就转变成如下经典DTD中普通非叶子元素的定义〈!ELEMENTnonleafElement(original-definition)〉〈!ELEMENTnonleafElement(original-definition)〉.另一种情况是非叶子元素是模糊的,并且元素取与可能度相关联的值(例如图1中的university),此时上述定义转变成如下的定义形式:对于这样的模糊非叶子元素,接下来需要使用Val元素定义进行进一步的定义,从而得到如下的定义形式:最后一种情况是非叶子元素是模糊的,并且元素取值为集合,而集合中的每个值与一个可能度相关联(例如图1中的employee),此时上述定义转变成如下的定义形式:对于这样的模糊非叶子元素,接下来需要分别使用Dist元素定义和Val元素定义进行进一步的定义,从而得到如下的定义形式:〈!ELEMENTnonleafElement(Dist)〉〈!ELEMENTDist(Val+)〉〈!ATTLISTDisttype(disjunctive|conjunctive)“disjunctive”〉〈!ELEMENTVal(original-definition)〉〈!ATTLISTValPossCDATA“1.0”〉.考虑图1中的模糊XML文档,通过使用上面给出的模糊DTD扩展形式,得到该模糊XML文档相应的模糊DTD定义,如图2所示.〈!ELEMENTuniversities(university)〉〈!ELEMENTuniversity(Val+)〉〈!ATTLISTuniversityUNameIDREF#REQUIRED〉〈!ELEMENTVal(department)〉〈!ATTLISTValPossCDATA“1.0”〉〈!ELEMENTdepartment(employee,student)〉〈!ATTLISTdepartmentDNameIDREF#REQUIRED〉〈!ELEMENTemployee(Dist)〉〈!ATTLISTemployeeFIDIDREF#REQUIRED〉〈!ELEMENTVal(fname?,position?,office?,course?)〉〈!ATTLISTValPossCDATA“1.0”〉〈!ELEMENTstudent(sname?,age?,sex?,email?)〉〈!ATTLISTstudentSIDIDREF#REQUIRED〉〈!ELEMENTfname(#PCDATA)〉〈!ELEMENTposition(#PCDATA)〉〈!ELEMENToffice(#PCDATA)〉〈!ELEMENTcourse(#PCDATA)〉〈!ELEMENTsname(#PCDATA)〉〈!ELEMENTage(Dist)〉〈!ELEMENTDist(Val+)〉〈!ATTLISTDisttype(disjunctive)〉〈!ELEMENTsex(#PCDATA)〉〈!ELEMENTemail(Dist)〉〈!ELEMENTDist(Val+)〉〈!ATTLISTDisttype(conjunctive)〉〈!ELEMENTVal(#PCDATA)〉〈!ATTLISTValPossCDATA“1.0”〉Page7接下来,我们用例子来说明上面提出的模糊扩展DTD可用于表示带非嵌套环的模糊XML文档.考虑的是一个表示某地区公司(company)与某类银行(bank)之间存款(deposit)和贷款(loan)业务关系的XMLDTD.首先假设XML文档中不含有模糊信息,其DTD如图3所示.不难看出,该DTD由于元素bank被2个父元素deposit和loan非循环调用,因而形成了非嵌套环.〈!ELEMENTcompanies(company)〉〈!ELEMENTcompany(c-address?,deposit,loan)〉〈!ATTLISTcompanyCNameIDREF#REQUIRED〉〈!ELEMENTc-address(#PCDATA)〉〈!ELEMENTdeposit(balance?,bank)〉〈!ATTLISTdepositDIDIDREF#REQUIRED〉〈!ELEMENTbalance(#PCDATA)〉〈!ELEMENTloan(amount?,bank)〉〈!ATTLISTloanLIDIDREF#REQUIRED〉〈!ELEMENTamount(#PCDATA)〉〈!ELEMENTbank(b-address?,type?)〉〈!ATTLISTbankBNameIDREF#REQUIRED〉〈!ELEMENTb-address(#PCDATA)〉〈!ELEMENTtype(#PCDATA)〉现在我们假设XML文档中含有模糊信息,模糊信息可能出现在:(1)由于地区定义的不精确,不能完全确定一个公司个体是否属于指定的地区;(2)由于类别定义的不精确,不能完全确定一个银行个体是否属于指定的类别;(3)一个公司在一家银行的存、贷款额是模糊的(例如出于保密的原因分别表示为高和低).为容纳这些模糊信息,通过使用上面给出的模糊扩展DTD形式,得到图4所示的带非嵌套环的模糊DTD.〈!ELEMENTcompanies(company)〉〈!ELEMENTcompany(Val+)〉〈!ATTLISTcompanyCNameIDREF#REQUIRED〉〈!ELEMENTVal(c-address?,deposit,loan)〉〈!ATTLISTValPossCDATA“1.0”〉〈!ELEMENTc-address(#PCDATA)〉〈!ELEMENTdeposit(balance?,bank)〉〈!ATTLISTdepositDIDIDREF#REQUIRED〉〈!ELEMENTbalance(Dist)〉〈!ELEMENTDist(Val+)〉〈!ATTLISTDisttype(disjunctive)〉〈!ELEMENTloan(amount?,bank)〉〈!ATTLISTloanLIDIDREF#REQUIRED〉〈!ELEMENTamount(Dist)〉〈!ELEMENTDist(Val+)〉〈!ATTLISTDisttype(disjunctive)〉〈!ELEMENTbank(Val+)〉〈!ATTLISTbankBNameIDREF#REQUIRED〉〈!ELEMENTVal(b-address?,type?)〉〈!ATTLISTValPossCDATA“1.0”〉〈!ELEMENTb-address(#PCDATA)〉〈!ELEMENTtype(#PCDATA)〉由图4可以看出,上面给出的模糊扩展DTD可用于表示带非嵌套环的模糊XML文档,换句话说为容纳模糊信息而对DTD进行的模糊扩展不受非嵌套环存在的影响,这一点与经典XML环境下非嵌套环的存在与表示不影响DTD语法形式是一致的.作为对经典DTD的扩展,模糊扩展DTD在没有模糊信息存在时完全可以转化为经典的DTD.基于上面给出的DTD中各部分的模糊扩展描述,借鉴文献[50]中给出的DTD形式化描述方法,下面给出模糊扩展DTD的形式化定义.定义2(模糊DTD).一个模糊DTD是一对(P,r),其中P是一个元素类型定义的集合,r是根元素类型用于指定某一特定的模糊DTD.每一个元素类型定义形如E→(α,A),其中E是指被定义的元素类型,α被称为是元素E的内容模型(contentmodel),A是一个属性表达式用于指定元素E所具有的属性.α和A是通过下面的抽象语法所定义的表达式:α∷=S|empty|(α1|α2)|(α1,α2)|α?|α|α+|any,A∷=(AN,AT,VT),其中:类型E,其中E包括元素类型Val和Dist.(1)S是指基本数据类型#PCDATA或者元素(2)empty表示空元素,“|”表示union,“,”表示concatenation,“?”表示0或1次,“”表示0或多次,“+”表示1或多次,any表示上述任意形式.(3)AN表示元素的属性名(AttributeName);AT表示属性的类型(AttributeTypes),可以是CDATA,ID,IDREF,IDREFS和枚举类型{v1|…|vn};VT是属性值的类型(ValueTypes),可以是#REQUIRED,#IMPLIED,#FIXED“value”,“value”,或者是可能性分布disjunctive和conjunctive.4从模糊关系数据库到模糊XMLDTD的转换为完成关系数据库到XML模式的转换,文献[8]定义了一种嵌套(nest)操作,该操作的结果是把关系数据库转化成非第一范式的嵌套关系数据库形式.定义3(nest).设r是一个包含属性集C的n维关系表,进一步设A∈C并且珡A∈C-A.对于每一个(n-1)元组t∈∏A-(r),定义一个n元组t如下:Page8那么,nestA(r)={t|t∈∏A-(r)}.执行nestA(r)操作以后,如果属性A只有一个含单一值的集合{v},则嵌套失败,此时把{v}和v看作是可交换的(即{v}=v).因此当嵌套失败时,有nestA(r)=r成立.否则,如果属性A有一个含多个值的集合{v1,…,vk}(k2),则嵌套成功.对于模糊关系数据库到XML的转换,分两步完成,首先是不考虑模糊信息的存在,完成关系数据库到XMLDTD的转换,之后考虑关系表中可能含有的模糊信息,对得到的DTD树进行适当的修改.对于第一步转换,有下面的12条规则.规则1.对于一个关系数据库模式,在相应的XML模式中生成一个根节点元素,其DTD描述为规则2.对于每一个关系,对应生成一个DTD非叶子元素节点.属性声明,表示为规则3.对于关系中的主键,直接用DTD中的规则4.对于关系中的外键,如果关系的外键是对单个ID的参考使用,则用DTD中的属性声明加以描述,表示为如果关系的外键是对多个ID的参考使用,则用DTD中的属性声明,表示为规则5.对于关系中非主键并且也是非外键的属性列,用DTD中的元素声明,表示为规则6.对于关系中属性值不为空的限制,可以用DTD中的属性声明来加以限制,表示为〈!ALLISTEnameAnameoriginal-definition#REQUIRED〉.规则7[9].对于满足主键不包含外键以及主键包含一个以上外键的关系,直接在根元素下面生成其相应的DTD描述,表示为规则8[9].对于满足主键包含一个外键的关系r1,设其父关系为r2,此时直接把r1转换成r2的子元素,表示为规则9[9].如果从关系r1到关系r2仅存在一个多对一的关系,此时r1到r2的外键不为空,则把r1直接转换作为r2的子元素,表示为规则10[9].如果从r0到关系r1,…,rk存在多个多对一的关系情况,则把r0分别转换作为r1,…,rk的子元素,表示为规则11.如果从关系r1到关系r2存在一个多对多的关系,则把r1和r2转换为根元素的子元素,表示为〈!ELEMENTroot(element1,element2)〉,之后在element1和element2中分别使用属性声明ID和IDREF加以描述.规则12.如果关系r1存在一个多对多的关系,则把r1转换为根元素的子元素,表示为之后在element1中使用属性声明ID加以描述.规则13.对于关系r,经过nest运算后,最终表示成r(A1,…,Ak-1,Ak,…,An),其中属性(A1,…,Ak-1)是嵌套结构.如果k=1,即没有嵌套关系,则直接把属性列翻译成子元素,表示为如果k>1,即存在嵌套关系,则区分以下两种情况:(1)对于每一个属性Ai(1ik-1),如果Ai定义为可以为空,则可以把元素内容表示成Ai或是A+i,即〈!ELEMENTEname(Aname1,Aname2+,…)〉.(2)对于每个属性Aj(kjn),如果Aj定义为可以为空,则可以把元素内容表示成Ai?或是[8],即Ai〈!ELEMENTEname(…,Aname1?,Aname2)〉.规则14.对于关系中属性默认值的限制,可以用DTD中的属性声明来加以限制,表示为〈!ALLISTelementAnameoriginal-definition“default”〉.综合使用上述14条规则,可实现关系数据库到XMLDTD的转换,转换的算法如下:(1)不考虑表示模糊信息属性列,把关系中的其它属性作nest运算;(2)应用规则1,生成DTD树的根节点元素;(3)应用规则2和规则7,找到一个合适的关系生成根节点的子元素,为说明上的方便,假设这个合适的关系为r1;Page9(4)对于r1中的属性列,按照规则3、4、5、6、13和14生成其相应形式;(5)对于参照r1的关系r2,…,rn,应用规则8、9、10、11和12生成相应的r1的子元素;(6)递归遍历剩余未转换的关系,根据规则8、9、10、11和12找到其对应的父元素.现在考虑关系中可能含有的模糊信息对生成的DTD的影响,此时需要在通过使用上述算法生成的DTD树的基础上做适当的修改.当关系r中包含模糊信息时,有下面的规则.规则15.对于含有PD属性的关系,转换过程如下:(1)在关系r转换成的DTD子元素内部生成一个非叶子节点,即Val子元素节点,其元素出现的次数定义为+.(2)在Val子元素内部生成关系r的属性列内容,其处理方法跟不带模糊值的转换处理过程一致,同时声明Val默认值为1.0.〈!ELEMENTVal(element1,elementk+,element1?,element1,…)〉规则16.对于属性值以可能性分布表示的关系,如果它最终生成的DTD文档是叶子节点子元素,则它的转换过程如下:(1)在关系表r转换成的DTD子元素内部生成一个Dist子元素节点,得到(2)在Dist子元素内部生成Val子元素,其元素出现的次数定义为+,形成(3)在Val子元素内部生成关系表r的属性列内容,其处理方法跟不带模糊值的转换处理过程一致,但要同时声明Val默认值为1.0,形成规则17.对于属性值以可能性分布表示的关系,如果它最终生成的DTD文档是非叶子节点子元素,则它的转换过程如下:(1)在关系表r转换成的DTD子元素内部生成一个Dist子元素节点,(2)在Dist子元素内部生成Val子元素,其元素出现的次数定义为+.(3)在Val子元素内部生成关系表r的属性列内容,其处理方法跟不带模糊值的转换处理过程一致.同时声明Val默认值为1.0.〈!ELEMENTVal(element1,elementk+,〈!ATTLISTValPossCDATA“1.0”〉.下面用例子来说明应用上面给出的转换规则,实现模糊关系数据库到模糊XMLDTD转换的过程.假设有表1、表2、表3和表4所示的4个关系,分别为University、Department、Employee和Student,它们的主键分别为Uname、Dname、EID和SID,并且Uname是关系Department的外键,Dname同时是关系Employee和关系Student的外键.4个表中的主键用黑体表示,外键用斜体表示.OaklandUniversityWayneStateUniversityDetroit1.0ComputerScienceandEngineeringEID犇狀犪犿犲EnamePositionOfficePD85431095ComputerScienceandSID20023056ComputerScienceand首先根据规则1~14生成一个不带模糊值的简单DTD描述.在生成根节点元素以后,从关系表中找到一个合适的表作root的子元素,University表无外键属性,可作为根节点的子元素,直接在根节点下翻译其DTD(这里先不考虑带有模糊信息的PD属性列).接着找到以University表中主键Uname为参照的Department表,在university元素下生成其相应的子元素,Employee表,Student表参照Department表的Dname属性列,所以把表Employee,Student作为Department的子元素进行转换.对于Employee表中带有模糊列信息的PD属性列同样先不考虑.这样就得到了下面的DTD形式:Page10〈!ELEMENTroot(university)〉〈!ELEMENTuniversity(address+,department)〉〈!ATTLISTuniversityUnameID#REQUIRED〉〈!ELEMENTdepartment(location+,employee,student)〉〈!ATTLISTdepartmentDnameID#REQUIRED〉〈!ATTLISTdepartmentUnameIDREF#REQUIRED〉〈!ELEMENTemployee(ename?,position?,office?)〉〈!ATTLISTemployeeEIDID#REQUIRED〉〈!ATTLISTemployeeDnameIDREF#REQUIRED〉〈!ELEMENTstudent(sname?,sex?,age?)〉〈!ATTLISTstudentSIDID#REQUIRED〉〈!ATTLISTstudentDnameIDREF#REQUIRED〉〈!ELEMENTaddress(#PCDATA)〉〈!ELEMENTlocation(#PCDATA)〉〈!ELEMENTename(#PCDATA)〉〈!ELEMENTposition(#PCDATA)〉〈!ELEMENToffice(#PCDATA)〉〈!ELEMENTsname(#PCDATA)〉〈!ELEMENTsex(#PCDATA)〉〈!ELEMENTage(#PCDATA)〉.然后,根据规则15~17对上面没有考虑模糊信息存在生成的DTD进行修改.(1)University表中的PD是带有单一成员度值的属性.根据规则15进行修改:〈!ELEMENTuniversity(address+,Val+)〉〈!ELEMENTVal(department)〉〈!ATTLISTValPossCDATA“1.0”〉.(2)Student表中的age属性是一个可能性分布,〈!ELEMENTage(Dist)〉〈!ELEMENTDist(Val+)〉〈!ELEMENTVal(#PCDATA)〉〈!ATTLISTValPossCDATA“1.0”〉.(3)Employee表中的PD是带有多个成员度值的属性,它是一个非叶子节点子元素.根据规则17,进行修改:并且它是叶子节点子元素.根据规则16修改如下:〈!ELEMENTelement(Dist)〉〈!ELEMENTDist(Val+)〉〈!ELEMENTVal(ename?,position?,office?)〉〈!ATTLISTValPossCDATA“1.0”〉.经过修改,最终得到如下带有模糊信息的DTD形式:〈!ELEMENTroot(university)〉〈!ELEMENTuniversity(address+,Val)〉〈!ATTLISTuniversityUnameID#REQUIRED〉〈!ELEMENTVal(department)〉〈!ATTLISTValPossCDATA“1.0”〉〈!ELEMENTdepartment(location+,employee,student)〉〈!ATTLISTdepartmentDnameID#REQUIRED〉〈!ATTLISTdepartmentUnameIDREF#REQUIRED〉〈!ELEMENTemployee(Dist)〉〈!ATTLISTemployeeEIDID#REQUIRED〉〈!ATTLISTemployeeDnameIDREF#REQUIRED〉〈!ELEMENTDist(Val+)〉〈!ELEMENTVal(ename?,position?,office?)〉〈!ATTLISTValPossCDATA“1.0”〉〈!ELEMENTstudent(sname?,sex?,age?)〉〈!ATTLISTstudentSIDID#REQUIRED〉〈!ATTLISTstudentDnameIDREF#REQUIRED〉〈!ELEMENTaddress(#PCDATA)〉〈!ELEMENTlocation(#PCDATA)〉〈!ELEMENTename(#PCDATA)〉〈!ELEMENTposition(#PCDATA)〉〈!ELEMENToffice(#PCDATA)〉〈!ELEMENTsname(#PCDATA)〉〈!ELEMENTsex(#PCDATA)〉〈!ELEMENTage(Dist)〉〈!ELEMENTDist(Val+)〉〈!ELEMENTVal(#PCDATA)〉〈!ATTLISTValPossCDATA“1.0”〉.讨论.模糊关系数据库到模糊DTD的转换经由两个阶段完成,首先是不考虑关系数据库中模糊信息的存在,通过使用规则1~14形成初始的DTD,之后考虑元组级别及属性值级别上的模糊性,通过使用规则15~17对形成的初始DTD进行修正,最终得到模糊关系数据库对应的模糊DTD.因此,完成模糊关系数据库到模糊DTD转换的规则的有效性和完备性,就由上述两个阶段各自的有效性和完备性所决定.对于第1个阶段:不考虑关系数据库中的模糊信息,规则1~14在转换时考虑了关系数据库中的关系、属性(主键、外键以及非主键和外键属性)以及关系之间的联系完整的内容,涵盖了这些内容的转换,并充分考虑了转换对关系数据库中主键、外键、空和非空等完整性约束的支持,以及对关系数据库中一对一、多对一和多对多联系的支持,这些转换的有效性和完备性在文献中(例如文献[7,9])已用实例进行了验证.至于第2个阶段,模糊关系数据库与经典关系数据库从模型的角度来看,其区别仅体现在结构和内容两个方面:(1)元组级别上存在模糊性,导致关系模式包含一个附加属性PD;(2)属性值级别上存在模糊性,导致属性值以可能性分布表示.规则15和规则17给出了含PD属性模糊关系数据库到模糊DTD的转换方法,规Page11则16给出了含模糊属性值模糊关系数据库到模糊DTD的转换方法,因此第2个阶段的转换是完备的,而转换的结果符合模糊DTD规范,因而是有效的,上面给出的转换例子验证了这一点.5结束语Web的广泛使用已经产生了海量可用电子数据,基于Web的信息表示与交换因而变得十分重要.当前XML已经成为Web信息表示与交换的标准,形成了有关XML的新的数据管理需求,例如XML文档的存储和查询等等.另一方面,模糊集和可能性分布已广泛用于处理现实世界应用中信息的不精确性和不确定性,以智能数据处理为目地的模糊数据库建模正受到研究者越来越多的关注.为了在XML中管理模糊关系数据库中的数据,本文研究了模糊XML数据建模.基于可能性分布理论,本文首先识别出XML文档多粒度数据模糊性,提出了可包含这些模糊性的模糊XML数据模型,在此基础上给出了从模糊关系数据库到模糊XML模型的形式化转化方法.应当指出的是,由于XMLDTD是描述XML实例文档最常用的方法,因此本文对XML的模糊扩展只讨论了模糊XMLDTD.但是XMLDTD缺乏恰当描述高结构化数据的充足表达能力,而XMLSchema为数据的描述提供了丰富的结构、类型和约束,因此未来研究工作之一将集中在基于XMLSchema的模糊XML数据建模上.另一个未来工作是深入研究带嵌套环XML模糊数据的表示与处理.
