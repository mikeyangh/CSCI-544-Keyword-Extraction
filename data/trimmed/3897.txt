Page1一种基于构件重构的路由器能耗细粒度调整方法袁博汪斌强(国家数字交换系统工程技术研究中心郑州450002)摘要可重构路由器采用构件化的体系结构,使以构件为对象的能耗细粒度调整成为可能.论文面向路由器低能耗问题,基于部件能耗随业务负载变化的思想,在对构件化路由器低能耗模型分析的基础上,提出了基于构件重构的路由器能耗细粒度调整方法.该方法使用布尔二次指数平滑法预测网络负载变化,能够有效避免重构结果滞后于负载变化;使用遗传算法并行搜索构件配置空间,能够快速搜索出最优构件配置方案.使用真实网络流量进行实验,结果表明,该方法能够根据负载的动态变化进行构件重构,能够使路由器能耗跟随负载变化,与传统算法相比可以节省60%的算法运行时间,降低构件组25%能耗.关键词低能耗;路由器;可重构;构件化;细粒度;绿色网络1引言随着网络规模和用户业务种类的发展,当前的互联网在用户数量、接入带宽和服务种类等方面呈现出快速增长的特点[1].作为互联网重要基础设施的Page21.65倍,落后于路由器容量的增长速率[1].上述发展趋势意味着路由设备性能提升中有一部分以高能耗为代价,仅靠器件本身来降低能耗存在局限,如果要进一步降低路由设备能耗,需要研究器件之外的节能策略和机制.目前针对路由器的节能研究大多沿用计算机系统的节能研究思路,主要从休眠器件和调整器件的工作电压或频率入手,大多数研究针对单一可调节资源,研究对象多是处理器、线卡、链路等粗粒度的部件[4].随着技术的发展,路由器中越来越多的部件能够进行性能的调节,所以会出现多种可调节部件并存在系统中的情况,如可重构路由器,不同的构件重构方式对应不同的功能.在这种多构件集成使用的环境中,由于构件的性能和能耗范围不同,所以影响系统能耗的瓶颈资源也不同,如何选择合适的构件重构方案,在保持较高资源利用率的同时降低设备整体能耗,是路由器节能领域研究的热点[5].本文面向路由器低能耗问题,使用构件化体系结构,提出一种基于构件重构的能耗细粒度调整方法.该方法基于布尔二次指数平滑法预测网络负载变化,利用遗传算法并行搜索能耗配置空间,能够有效避免重构结果滞后于负载变化并快速搜索出最优构件配置.实验表明,该方法能够根据负载的动态变化和路由器的能耗情况快速调整构件的重构方案,能够使路由器能耗跟随负载进行变化,有效降低能耗.本文第2节介绍相关研究进展;第3节介绍构件化路由器架构;第4节阐述低能耗分析模型;第5节描述能耗细粒度调整算法;第6节介绍仿真实验环境、设计细节和结果分析;最后对全文进行总结.2研究现状路由器性能的不断提升以路由器设计复杂度增加和能耗升高为代价.新一代路由器能耗往往比之前的路由器高出几个数量级[6].在降低路由器能耗方面研究人员开展了大量研究.目前研究大体分为3个方向:(1)研究部件休眠机制,将暂时不工作的器件、接口或者板卡置为低功耗模式或者关闭,当前路由器节能研究中应用最多的技术是部件休眠技术,但是这种方法应用场景有限,部件唤醒时间影响了设备性能.路由器处理时延的高要求限制了休眠机制的应用;(2)调整部件工作频率,使其工作在较低频率上,频繁切换工作频率也会造成性能损失;(3)在满足设备性能需求条件下尽量降低设备能耗,例如在负载较低情况下降低链路速率[7-9].很多路由设备的能耗管理策略使用了上述策略中的一种或者多种混合策略.在文献[10]中,作者提出了在IP骨干网非峰值时关闭部分节点和链路的算法,实验结果表明该算法至少可以节省骨干网络23%的能耗.在文献[11]中,作者利用硬件电压可调特性,通过改变部件工作时电压配置来达到降低设备能耗的目的.有研究者从软件设计角度出发,利用多核的频率独立可调性质,提高了软件路由器的能耗效率[12].但是上述研究停留在仿真阶段,仿真环境参数设置比较理想,尤其是路由器负载变化比较理想,与实际情况不符.路由器能耗调整对象主要是链路速率和板卡,Gunaratne等人[13]在2005年首次提出一种能够在全双工传输以太网中根据链路利用率自动切换链路速率的方法,数据表明以太网链路速率从100Mbps增加到1Gbps时,功耗增加了2~4W,增加到10Gbps时,功耗增加10~20W.而以太网处于空闲和100%链路利用率的情况下功耗几乎相同,即以太网功耗与链路利用率无关.通过测量表明,目前以太网链路利用率主要在1%~5%之间,所以链路处于低利用率时降低链路速率能够有效降低能耗.线卡是路由器的一个重要组成部件,有研究人员对线卡节能问题展开研究,文献[14]将多核架构和动态电压调整技术应用到线卡设计中,建立到达数据包预测机制,根据待处理数据负载状况决定多核处理器的配置,通过改变参与处理的核的个数和电压降低线卡能耗.文献[15]对路由器线卡配置进行研究,提出了一个由流量和线卡结构组成的能耗分析框架,依据分析框架,作者给出了不同场景下路由器线卡优化配置模式,在满足转发性能的条件下降低线卡部件能耗.上述研究的对象是粗粒度路由器部件,节能效果受到部件的设计局限,随着路由器设计技术的发展,能够进行性能和能耗调节的部件越来越多,上述方法因不能支持细粒度的能耗划分和调整,其适应性和兼容性已显不足.本文与前人研究的不同之处在于,我们从路由器体系结构出发,借助构件化的体系结构,重构不同能耗特征的构件使构件组能耗与负载进行一致变化,将路由器服务能力的变化映射为能耗起伏.使用预测机制衡量负载变化程度,使用构件作为操作对象降低了能耗调整粒度,使用构件重构技术扩大了Page3构件能耗调整范围.3路由器构件化体系结构部件休眠或暂时关闭是使用最为广泛的一种节能方法.但是路由器使用环境特殊,目前主流高端路由器都是Multi-rack架构,即安装在同一个机架上的多个线卡通过多个并行光链路连接一个交换板卡[16].路由器的分割粒度是板卡,但同一个板卡不同接口的到达业务没有规律可循,所以不可能实现整个板卡关闭和休眠,这样就造成在低负载情况下即使仅有一个接口有业务,整个板卡也要加电工作.尤其在路由器设计阶段,由于按照峰值负载设计路由器工作能力并且借助冗余技术保证设备可靠性,更是加剧了低业务负载时的能量浪费.究其原因,路由器部件的紧耦合是阻碍使用部件休眠技术大幅度降低路由器能耗的瓶颈.同时这种部件紧耦合也阻碍了新节能技术的应用,例如部件电压或频率调节技术[17].大幅度降低路由器能耗必须使路由器部件能够独立休眠或关闭,而实现这一目标的前提是研究一种部件松耦合的路由器体系结构.本文利用业界新提出的构件化可重构路由器架构来研究路由器能耗的细粒度调整问题[18].平台化支撑构件化处理技术是构件化可重构路由器得以实现的基础.平台、组件和构件三个等级对应于传统系统化支撑模块化处理的三个等级———系统、单元和模块,各等级处理的功能和能力基本相同,不同的是开放性和可重构特性.系统、单元和模块大多是封闭一体的,平台、组件和构件是开放式可重构的.系统只能按固定模式利用功能单元完成单一任务,平台允许以不同组合方式利用功能组件完成多种任务.要改变单元的处理功能需要重新设计软硬件模块,但要改变组件的处理功能只需替换或升级构件.平台可完成多种转发和交换任务,组件是功能的实现者,构件是组成组件的基础,是可重构路由器实施重构的对象.“业务-服务-构件”映射机制是可重构路由器提供网络服务能力的支撑[19].“业务-服务”的映射关系将用户业务进行分类,每一种网络服务可以支撑多种特性相似的用户业务;“服务-构件”的映射关系将网络服务映射为基础构件,服务指标依托构件实现,通过替换构件或者改变构件的连接方式实现服务能力的变化.为了改变传统路由器部件紧耦合的特点,可重构路由器使用了逐级交换的机制,如图1所示,逐级指的是将路由器分为组件间、构件间不同级别的视图,交换指的是组件或构件间不再使用传统的固定线路连接方式,使用交换带有标识的报文来满足组件或构件间的消息交互需求.标识内容的多寡影响了交换控制开销和复杂度,根据所处视图的不同可根据实际情况确定交换标识具体内容.逐级交换带来的好处是用户在遵循标准接口的前提下可以灵活替换构件,引入新的功能.虽然交换技术早有研究,但是传统交换是为了解决多端通信的拥塞问题,面向的是TCP/IP体系中IP报文处理,追求的是高吞吐量和低拥塞率.可重构路由器的松耦合思想深化了交换机制,利用交换拓扑可变来更改构件间的通信连接,用户可以专注开发构件的新功能,而不会受到通信对象的限制.同样只有在可变连接拓扑的支持下,才能发挥构件休眠或关闭优势;通过替换构件,将支持高负载的高能耗构件替换为低能耗构件.在休眠和替换机制支持下,才能实现路由器能耗细粒度调整,使路由器能耗跟随用户业务负载变化.可重构路由器和能耗细粒度调整方法的节能特点如图2所示.从图2中可以看到,路由器负载随时间发生变化,不采取任何节能措施时,不管负载高低路由器能Page4耗不变,如图2(a)所示.路由器应用之初,网络流量停留在Kbps等级,路由器能耗问题并不突出.但是当前网络用户端速率已达到Mbps级,骨干链路已达Gbps级,路由器已是Tbit级,路由器能耗问题已不能忽视.业界提出了图2(b)所示的采用部件休眠的节能机制.但是这种方法带来了额外的唤醒时延,并且能耗等级只有两种状态,要么ON,要么OFF.部件休眠机制虽能降低能耗但是应用环境受限,不利于时延敏感业务,能耗调整程度有限,设备能耗不能跟随业务负载变化.随着CPU等硬件元器件支持电压和频率调整,业界将电压和频率调整机制应用到节能领域,图2(c)表示使设备工作在较低频率来降低能耗,但是路由器这种近似实时处理的应用环境,留给系统进行频率选择和调整的时间很短,所以依靠调整电压和频率的节能机制大多应用在软件路由器中[20-21].图2(d)表示的是本文研究的能耗细粒度调整方法,采用构件休眠和构件重构机制,既能最大程度地降低能耗,又能在负载变化时通过替换不同能耗特征的构件使能耗曲线随负载曲线发生变化.尤其是前文描述可重构路由器特有的“业务-服务-构件”映射机制,使用构件组来承载不同特性的业务,使得时延敏感和时延不敏感业务得以区分,为重构构件和唤醒休眠构件提供了时间约束.对时延敏感业务侧重使用构件重构机制,不中断业务处理;对时延不敏感业务侧重使用构件休眠机制,最大限度节省能耗.4低能耗分析模型此节我们建立构件化路由器的低能耗分析模型并进行分析.对路由器负载L,假定它可以分为n个子任务L1,L2,…,Ln,可重构路由器的特点是针对每个子任务可以选择一组合适的构件进行处理.因为能耗和功耗之间存在时间关系可相互转化,所以本文不区分能耗和功耗,将两者视为等同衡量参数,我们首先对分析对象做出如下定义.定义1.能够供可重构路由器选择使用的构件所组成的集合称为构件空间,记为Ω.为了便于分析,假定构件空间中的构件已进行了初步分类,对子任务Li假定有m个备选构件可以选择,构件的能耗等级和性能等级一一对应,一种能耗和性能等级对应多个构件.设构件能耗等级用1,EcEcm-1,ScSc2,…,Ec处理负载的情况.通常能耗等级不同,性能等级也不同,性能越好,能耗越高.当能耗为0时(如构件休眠,注意本文中认为休眠的构件不工作,将其能耗置为0,实际情况它会产生较小的能耗),令其性能也为0.相同负载情况下不同的性能等级反映了构件工作时间的变化,假定性能越差构件的工作时间越长.当前对软件构件进行能耗测量也是一个热点研究方向,本文选择的是文献[22]提出的方法,从软件构件体系结构层面出发,假设体系结构级软件特征量(如有效代码、代码最差执行周期、运行环境的计算和存储参数)与软件构件能耗之间存在非线性函数关系(线性函数关系可认为是一种特殊的非线性函数关系),并以此假设为基础,利用如BP神经网络等工具估算软件能耗.BP神经网络经过多次学习后找到构件能耗与构件特征量之间的函数关系,输入不同的构件能耗特征量参数就可以得到软件构件的能耗.具体过程本文不再赘述.定义2.路由器选出的用于处理子任务Lj的构件集合称为构件组,记为CLj.使用cij表示构件组中的元素,cij表示路由器根据子任务Lj在m个备选构件中选择使用第i个构件.我们假定构件组的能耗为各个构件能耗之和,不考虑因构件并行执行隐藏的工作时间,即任务的完成时间也为各个构件工作时间之和.替换构件存在一定的能耗和性能损失,单个构件重构能耗开销为ΔER,单个构件重构时间开销为ΔTR.定义3.构件组的能耗随时间变化的曲线称为构件组时间能耗曲线,构件组时间能耗曲线是每隔一定时隙获得的能耗值,所以是离散曲线.构件组的性能也是每隔一定时隙测量得到的离散值.路由器有多种构件选择方式处理任务.构件的选择方式用矩阵犓表示,如式(1)所示.其中,kij=1表示第Lj子任务选择了可以执行此任务的第i个构件,否则为0.此构件的能耗等级为i,性能等级为ScEc的能耗EL和工作时间TL如式(2)和式(3)所示.定义4.构件组能耗记为EL,构件组工作时间记为TL.其中TL包含了构件重构的切换时间,其中KR为重构构件个数.Page5定义5.重构时构件组的重构能耗记为ER如式(4)所示,其中KR为重构的构件个数.为衡量所选构件性能是否满足负载要求,我们引入构件性能根方差来衡量单个构件性能与负载接近程度.为了衡量构件组性能与负载接近程度,我们引入构件组性能协方差来衡量构件组与负载接近程度.定义6.构件性能根方差记为D(Sc单个构件性能偏离构件性能均值分散程度的数字特征,当高于构件性能均值时,构件性能根方差取正值;当低于构件性能均值时,构件性能根方差取负值.式(5)表示构件性能数学期望值,式(6)表示所选构件的性能根方差.定义7.构件组性能变量与负载变量协方差记为cov(SL,L).其中SL表示构件组性能变量,L表示负载变量.cov(SL,L)=E[(SL-E(SL))(L-E(L))]协方差适用于构件组性能变量与业务负载变量量纲一致的情况,例如两者均用单位时间内数据包数衡量或负载字节数衡量.若两个变量的量纲不一致,我们引入了构件组性能变量与负载变量的相关系数这个定义.如定义8所示.定义8.构件组性能变量与负载变量相关系数记为ρcov(SL,L),ρcov(SL,L)∈[-1,1],取值接近1表示构件组性能曲线贴近负载曲线.综上,构件重构目标是在保证性能曲线贴近负载曲线的前提下搜索出具有最低能耗特征的构件组合方案.这一过程可以建模为多目标优化问题.为了简化分析,本文仅考虑构件组的能耗和性能两个特征,可将能耗细粒度调整问题形式化为其中,Lj表示路由器的工作负载,Lj=0表示当前没有负载到达,路由器可以休眠构件;∑nTthreshold时间内到达的负载之和,其值等于预测值loadTL(t+τ),此条件保证可以根据当前条件预测负载变化,为重构算法提供时间保证,提前选择和部署构件.TLTthreshold保证构件组在指定时间内完成负载处理.特别的是,Tthreshold的选择体现了能耗调整方法对时间粒度的控制,可以根据负载时延敏感特性选择不同的时间粒度.时间粒度大,时延敏感性差,但节能效果明显.时间粒度小,虽能提高时延敏感性,但因构件频繁的替换会减弱节能效果.5能耗细粒度调整能耗细粒度调整是在一定时间粒度上根据负载变化重构构件,重构构件指的是调整构件工作状态(休眠或替换构件)达到使构件组能耗跟随负载变化的目的.整个调整过程分为两个部分,一个是对负载变化做出预测,另一个是在寻找合适的构件重构方案.5.1负载预测为了使构件组能耗按照负载曲线发生变化,需要对路由器一定时间段内的负载进行预测.当前网络测量领域有很多方法能够满足本文的要求,如回归分析、趋势外推等.本文关注能够预测负载变化规律,并不关注能否精确测量负载,所以选择布尔二次指数平滑法[22]对路由器负载进行预测,此方法通过预测路由器缓存需求数来反映到达负载的变化.预测公式为其中,load(t)为t时刻观察到的缓存请求数,load(t+τ)为t+τ时刻的预测值,L(1)指数平滑值和二次指数平滑值,α为平滑参数.通过Page6式(10)可以在时刻t求得t+τ时刻的预测值,真实值为式(11)所示,其中εj为误差.5.2能耗细粒度调整算法随着可重构路由器的发展,构件种类和构件数量都会有较大规模发展,在构件空间内搜索构件组的最优配置方案需要考虑性能约束和能耗约束,是一个NP-难问题.为了快速寻找最优近似解,我们基于遗传算法搜索构件组的能耗最优组合.根据遗传算法思想,本文将构件组选择方案看作染色体,根据其适应值大小确定其优越性,适应值越高,生存概率越大,进行繁殖的概率也越大.经过若干代遗传,选出构件组最优组合方案.每个染色体代表一个备选方案,染色体编码规则表明了构件组由哪些构件组成.一个染色体由多个不同基因串构成,每个基因串对应一个构件,一个基因串由两个子串组成,分别表示构件性能等级和能耗等级,具体编码规则如下:(1)子串编码长度由构件性能等级和能耗等级决定,例如本文中我们将构件的性能等级和能耗等级分为10类,相应的子串长度分别编为8位,其中低4位用来表示性能和能耗分类;因串的数量.(2)基因串长度由子串长度之和确定;(3)根据每个构件组备选方案确定染色体中基这样设计编码规则的优势在于:不同基因串中的性能和能耗子串位置相互对应,当染色体之间进行交叉变异时,基因串可以同步隔离进行,大大加快了染色体进化速度;构件性能和能耗通过位数进行区分,同等编码长度的构件可以在编码中加入其它信息,例如时延、编译方式等.图3是含有10个构件的染色体编码举例.算法中适应值函数包括两个部分,一个是构件组性能与负载的相关系数,一个是构件组能耗.我们求得每个染色体与预测负载的相关系数,追求其最大值.在构件组性能逼近负载变化的情况下,我们比较染色体能耗,选择能耗最小的染色体.能耗细粒度调整算法(EnergyMeticulous-grainedScalingAlgorithm,EMSA)如算法1所示.算法1.能耗细粒度调整算法.//N:构件组中构件的种类;M:每种构件的备选个数;gen:迭代次数;popu:染色群体大小//List〈char[]〉chromos:染色体基因串;Lisr〈chromos〉clist:群体个数,长度为popu;输入:load[N]//前端预测的缓存请求数输出:K[N][M]//构件空间每种构件选择情况1.Initializecomlist;2.FOReachgeningens3.FOReachchromosincomlist4.FOR(i=1;i<chromos.size;i++)5.str=string.value(chromos.get(i));6.FOR(j=1;j<component.length;j++)7.compareenergyandperformance8.K[i][j]=1;//确定合适的构件9.ENDFOR10.ENDFOR11.computeEL;根据式(2)、式(7)计算适应值12.ENDFOR13.selection();//根据适应值大小选择优秀的父代,14.cross();//在新个体中随机选择交叉点配对,15.mutation();//在新个体中随机选择变异点配对,16.ENDFOR6仿真与结果分析为了检测本文提出的能耗细粒度调整方法的效果,我们设计了3类实验场景验证负载预测算法和EMSA算法.(1)验证负载预测算法准确度;(2)验证能耗细粒度调整算法的收敛性,分析算法代价和复杂度;(3)考虑负载预测的条件下,比较本文算法与Page7文献[24]中算法的有效性.文献[24]提出了基于构件和流量的能耗分析框架,论文中的算法用来解决不同场景下构件配置问题,首次提出了改变构件配置降低能耗的概念,工作具有代表性,所以选择与该文工作进行比较.6.1实验环境设置可重构路由器由构件组成,在实验中我们仿真路由器数据平面的业务处理过程.参照可重构路由器构件设置,选择转发过程的10类构件,每类构件能耗和性能分为10个等级,每个等级设置10个备选构件,整个空间有1000个构件样本.遗传算法的关键参数,我们选择文献[25]提供的经验值.参数的取值对算法的效率有十分重要的影图4校园网路由器与CERNT接口的流量统计图5伯克利大学与Internet接口的流量统计响.因为研究重点不同,本文不讨论如何选择最合适的参数值.关键参数取值如表1所示.为了检测负载预测算法的准确度,实验中我们使用两种典型的业务负载数据样本.图4所示样本选自西安交通大学校园网与教育科研网(CERNT)接口流量监测数据①,数据点值取30min采样平均值.图5所示样本选自美国加州伯克利大学提供的本校国际互联网出口数据②,数据点取值为负载包数.由图4可以获得如下数据:对出口数据,一周内最大流量为1.22Gbps(链路容量为2.5Gbps,占链路容量的48.8%),平均流量为532.27Mbps(21.29%),最低流量为222.03Mbps(8.88%);对入口数据一周内最大流量为854.23Mbps(34.16%),平均流量为536.47Mbps(21.46%),最低流量为432.24Mbps(17.28%).即使在网络最繁忙时期,链路利用率也不足50%,部分时段更是低于10%.相对于出口平均值,出口数据在[-58.6%,129.3%]范围内波动,相对于入口平均值,入口数据在[-19.4%,59.2%]范围内波动.由图5(a)可知,网络流量相对于平均值在[-84.9%,258%]范围内波动.从图5(b)中可以看出,网络流量变化幅度明显,有很大一部分时间网络流量低于平均值,路由器大量部件在此时间段内处在空转状态,白白浪费能量,这些事实为调整构件组合方案降低路由器能耗提供了依据.①index.html②Page86.2实验结果分析6.2.1预测算法的准确度我们以伯克利大学负载变化为例,在τ=10s,α=0.3,0.5,0.8时预测算法得到的负载分布与实际负载分布之间的比较如图6所示.对结果进行平图6网络流量测量值与预测值6.2.2能耗细粒度调整算法的收敛性及复杂度分析EMSA算法收敛速度和时间开销受到备选构件数量和负载起伏程度的影响.因此,本场景的目的是验证在各种构件数量和负载起伏程度的组合下,算法是否具有稳定的收敛性.实验条件设置为:负载选择伯克利大学流量数据,构件数量为500~1000,其中10种能耗和性能等级的构件分别占1/10.根据图5提供的数据,我们设定负载变化按照起伏范围分为5类,分别对应变化幅度在±10%,±20%,±30%,±50%,±80%.通过仿真发现,EMSA算法在备选构件数量和负载变化组合下平均250次迭代就可以收敛到较稳定的数值.图7(a)~(d)显示了2种负载起伏500个构件、3种负载起伏600个构件、4种负载起伏800个构件、5种负载起伏1000个构件4种情况下的算法收敛情况,横轴是算法迭代次数,纵轴是构件组性能与负载的相关系数.由图7可知,EMSA算法的计算复杂度由构件数量N、负载变化种类M、进化次数和群体规模决定.其中,初始群体规模可以设置为固定值,根据仿真的结论算法迭代250次就可收敛,可以将进化次数也设置为固定值,这样EMSA算法的计算复杂度可用O(NM)来衡量.图8和图9描述了在构件数量和负载起伏变化组合下EMSA算法迭代250次的时间开销,从图8可以发现,当负载起伏变化一致时,时间开销基本上随构件数量的增加呈线性增长,进行相关度分析后均相对误差分析可以发现α的取值对预测结果影响不大,α=0.3,0.5,0.8时平均相对误差分别为0.073,0.081,0.094.由此可知布尔二次预测算法可以准确地预测负载变化,在后续实验中α=0.8.发现,两者线性相关度为97%.从图9可以发现,当构件数量一定时,算法时间开销基本与负载变化呈线性相关,两者相关度约为98%.上述数据可以说明,算法时间复杂度可以随构件数量的确定或负载变化程度的确定而降低,这也说明了优化负载预测算法可以降低EMSA算法的时间复杂度.6.2.3EMSA算法有效性比较能耗调整的效果与负载预测算法和构件组方案选择有关,本场景的实验目的是在负载和构件数目变化的条件下检验能耗调整效果,构件的样本空间为1000个构件,负载使用伯克利大学的网络流量样本.本文算法用EMSA标识,文献[25]中的算法使用Ramirez09标识.图10分别显示了两种算法的运行时间比较,图11显示了两种算法调整下构件组性能曲线与负载流量对比,图中进行了归一化处理以衡量性能曲线变化程度,图12和图13显示了一段时长300s的能耗调整效果.图10中可以发现本文的EMSA算法相比Ramirez09算法节省了大约60%的算法运行时间,原因是EMSA算法并行搜索构件配置方案,并且使用了特别设计的编码规则使得基因串可以同步隔离进行变异,大大加快了染色体进化的速度,缩短了算法运行的时间.但是值得注意的是算法的运行时间随着构件数目增加而变大,在某些时延敏感业务场景时需要限制算法运行时间.从图11中可以看出两种算法都能随负载变化调整构件配置方案,但是在调整的粒度和范围上存Page9图7不同构件数量和负载起伏变化组合下的算法收敛情况Page10在差别.Ramirez09算法构件性能等级调整粒度较粗,构件配置方案都是提前设置,只能在有限的几个等级进行调整,并且构件组性能曲线没有与负载进行一致变化,造成这种现象的原因是Ramirez09算法没有考虑对负载进行预测,所以对构件的调整会滞后于网络负载变化,对负载小幅度的变化并不敏感.相比之下,EMSA算法采用了负载预测,可以使构件组性能曲线追随负载发生细粒度变化,并且在遗传算法配合下可以选择更为贴近负载曲线的构件重构方案.EMSA算法中,负载预测效果决定性能曲线是否滞后负载曲线,若预测过程花费时间过长则会影响遗传算法输出合适的构件重构方案,如图中250s处,算法给出的构件重构方案并不是最优.后续研究中需要对遗传算法的迭代次数进行调整,根据构件数目和性能等级的多寡快速给出构件重构方案.当负载变化剧烈时,EMSA算法虽然比Ramirez09算法敏感度高,但还存在少部分不敏感情况,如图中130s处.性能曲线变化的低敏感度会导致构件重构滞后问题,高敏感度会产生重构过于频繁从而引发重构抖动抵消节能效果.后续研究中需要分析负载的变化程度与能耗调整算法之间的关系,根据不同时间尺度给出能耗调整算法.图12和图13分别根据两种算法构件配置方案给出了不同构件组合下的能耗调整结果.对比图12和图13可以发现EMSA算法比Ramirez09算法节省了约25%的能耗,原因是EMSA算法能够依据可重构路由器的构件化体系结构给出更贴近业务负载变化的构件重构方案.Ramirez09算法之所以发生能耗变化是因为算法调用了不同的构件配置方案,并没有考虑能耗跟随负载变化,EMSA算法比Ramirez09算法适用于网络负载变化更复杂的情况,从图中可以发现,能耗节省效果取决于构件能耗等级和构件重构方案,如果对路由器进行更细致的构件划分和构件能耗分析,将会取得更明显的节能效果.7结束语论文从路由器体系结构节能出发,分析了以构件为单位的能耗细粒度调整问题,建立了构件化路由器低能耗分析模型,提出了能耗细粒度调整方法,使用布尔二次指数平滑法预测网络负载变化和遗传算法并行搜索构件配置空间,达到了部件能耗跟随业务负载变化的效果.设置了三种场景对论文提出的负载预测算法和能耗调整算法进行仿真实验.结果表明本文提出的能耗细粒度调整方法比传统算法可以节省60%的算法运行时间和25%的设备能耗.下一步计划,一方面,业务的时延特性对有效使用能耗细粒度调整方法有重要影响,需要研究两者之间的约束关系;另一方面,当负载变化较频繁时,如何优化能耗调整方法避免构件的频繁重构,使构件重构开销满足性能和能耗的约束是未来研究的重点.
