Page1基于空间缩放和吸引子的粒子群优化算法迟玉红1),2)孙富春1)王维军2)喻春明2)1)(清华大学计算机科学与技术系清华信息科学与技术国家实验室北京100084)2)(中国人民解放军65053部队辽宁大连116113)摘要为解决粒子群优化(ParticleSwarmOptimization,PSO)算法中粒子越界、算法进化后期收敛速度慢和早熟收敛的问题,通过分析PSO算法中粒子运动行为和算法稳定性,提出了一种基于空间缩放和吸引子的粒子群优化(PSOwithsearchspacezoomedfactorandattractor,SzAPSO)算法.该算法利用对搜索空间进行缩放的边界变异策略有效控制了粒子搜索范围,保证了算法全局探测能力;算法中吸引子的引入增加了感兴趣区域的粒子密度,提高了算法局部开发能力.实验结果表明,SzAPSO算法收敛速度快、精度高,且具有较好的鲁棒性.关键词群体智能;粒子群优化;搜索空间;边界变异策略;吸引子1引言PSO算法[1]是在鸟类和鱼类等生物群体觅食行为的启发下,由Kennedy和Eberhart于1995年提出的一种全局智能优化算法.由于待优化问题的最优解通常存在于搜索空间内,而在粒子间的相互作用下,粒子可能穿越搜索边界,从而使最优解难以获取.因此,有必要采取某种方法将粒子控制在搜索空间内,这种方法就是边界变异策略.近年来许多学者提出了不同的边界变异策略用以解决粒子越界问题,其中最大位置限制和最大速度限制[2-3]是最简单常用的方法,但易造成算法早熟收敛,而且最大速度限制并不能保证将粒子控制在搜索空间内.为此,文献[4]利用粒子运动的物理性质提出了吸收墙、反射墙和隐匿墙三种边界墙;文献[5]综合吸收墙和隐匿墙的优点,提出了衰减墙;文献[6]对几种边界墙进行了归纳总结,并测试了这些算法及其混合算法性能,结果表明衰减墙优化性能较稳定,隐匿墙优化效率较高.考虑到以上方法的最大速度均是固定值的问题,文献[7]在随机速度边界变异策略中使用随进化过程不断变化的速度边界.文献[8]则采用完全不同的思路,提出周期模式边界变异策略,化解了边界条件的制约,但仍无法解决算法早熟问题.本文第2节将对这些算法做更详细分析.虽然已有方法在解决粒子越界问题上取得了不同效果,并已在较有影响的国际期刊和会议上发表了相应研究成果,但仍未引起足够重视,这主要由于对粒子越界问题认识不足,对PSO算法较高优化效率的原因还知之甚少[9-10],事实上粒子越界绝不是偶然现象.此外,目前已有边界变异策略对算法性能的改进还缺乏说服力.由于粒子运动行为直接影响着PSO算法性能,而边界变异策略直接影响着粒子运动行为,因此用有效的边界处理策略改进算法性能是必要且可行的.本文研究目的就是克服现有边界变异策略不足,既要解决粒子越界问题,又要提高算法的优化性能.2相关问题研究2.1粒子越界问题在PSO算法中,每个粒子都是D维搜索空间S中的一个备选可行解,并以一定速度飞行.通过对环境的学习与适应,每个粒子根据自身飞行经验以及同伴飞行经验,按式(1)和(2)动态调整自身飞行速度和位置:vid(t+1)=ω×vid(t)+c1×r1×(pid(t)-xid(t+1)=xid(t)+vid(t+1)其中,设种群大小为P,d∈[1,D],i∈[1,P],t是当前进化代数,随机数r1,r2~U(0,1),c1,c2是学习因子,ω是惯性权重,pid是个体极值,pg是所有与粒子i有邻居关系的粒子群体的最优极值.由于在许多实际待优化问题中通常假设搜索范围有限,因此本文研究的是带边界约束的优化问题,即搜索空间S=[Xmin,Xmax]D.边界约束是双刃剑,它可以简化待优化问题,避免无效的计算开销,但同时也带来了越界问题.虽然PSO算法无法保证每个粒子任何时间均在搜索空间内运动,这已是不争的事实,但通常认为只有少数粒子越界[9].在文献[11]中Sabine采用常用假设条件,首次尝试着用理论方法证明了粒子越界问题,并得到了惊人的结论:当用最常用方法对粒子速度进行随机均匀初始化时,第一次进化完成后,所有粒子都会飞越边界;即使在初始化时,将所有粒子速度置零,那些有好邻居的粒子仍然会飞越边界,定理证明详见文献[11].为了便于直观理解Sabine结论,我们以常用标准测试函数Griewank和QuadricNoise为例,对算法进化过程中粒子越界情况进行统计,具体结果见图1,其中设种群大小为15,优化问题维数分别为300和30,采用随机均匀分布和速度置零两种方法对粒子速度初始化.图1(a),(b)是Griewank函数在搜索空间[-600,600]D内粒子越界情况统计,图1(c),(d)是QuadricNoise函数在搜索空间[-30,30]D内粒子越界情况统计,图1(a),(c)考查粒子越界范围,图1(b),(d)考查粒子越界数量.由图1可见,粒子越界是PSO算法进化过程中不可避免的现象,与具体优化问题及搜索空间大小无关,而与问题维数和粒子速度初始化方式有关,随着待优化问题维数增加,在算法进化早期飞越边界的粒子数量和散布范围都是十分可观的.因此,图1进一步验证了Sabine的结论.Page3图1关于粒子越界问题的2个实例2.2边界变异策略异策略在二维空间工作原理示意图.图2是PSO算法中常用且有效的8种边界变图2(a)和(b)是最大位置限制和最大速度限图28种常用的边界变异策略在二维空间工作原理示意图制[2-3].该方法将越界粒子的位置或速度重置于边界上,算法简单易行,但会造成多个越界粒子聚集在边界上.如果边界上或其附近存在局部最优,则这些聚集在边界上的粒子易陷入这个局部最优点,从而Page4导致算法早熟收敛.图2(d)~(g)是目前关注较多的4种方法[4-6],当粒子撞击边界时,吸收墙(Absorbing)将粒子速度置零,粒子能量被吸收;反射墙(Reflecting)将粒子速度方向置反,大小不变;衰减墙(Damping)结合吸收墙和反射墙的特性,粒子速度取反,大小减少一个随机量,但以上3种方法均是将粒子位置置于边界上.隐匿墙(Invisible)则允许粒子飞出搜索空间,粒子位置和速度不变,但该粒子不参与极值更新.Li等[7]仍是将越界粒子位置或速度置于边界上,但在每次进化后,将生成新的最大速度.当粒子速度超越新的速度限制时,则将粒子速度置于新的速度边界上,如图2(c)所示.上述几种方法虽然在解决粒子越界问题上取得了不同的效果,但均可看作是对最大位置限制和最大速度限制方法的改进算法,弱化了其缺点.Zhang等[8]则采用不同的方法,通过对原搜索空间进行复制,提出了周期边界变异策略,如图2(h)所示.Zhang的周期模式利用周期运动减弱了边界限制,但无法克服算法早熟收敛的问题,因而同上述其它算法一样易陷入局部最优.总之,目前已有边界变异策略更关心如何控制越界粒子行为,将其拉回搜索空间,但对算法性能的改善有限;其次,不顾算法可能提供的有效信息,加入过多随机性,必然会影响算法收敛速度和收敛精度.此外,如何使改进PSO算法不受问题维数和最优解位置的限制仍是一个挑战性难题.3SzAPSO算法3.1PSO算法粒子运动行为分析xid(t+1)=xid(t)+ω×(xid(t)-xid(t-1))+其中,φ=c1r1+c2r2,ρ=c1r1pid(t)+c2r2pg(t)由式(3)可见,PSO算法中每个粒子的下一个位置由3部分决定:(1)当前位置.是粒子更新到下一位置的起点,是粒子对自身运动轨迹的记忆能力,体现了PSO算法的动态特征;(2)运动惯性.通常乘上一个小于1的加权因子ω,它是对上一次粒子运动速度大小和方向的记忆,运动惯性使粒子保持与其它同伴不同的运动特性,有利于PSO算法保持种群多样性;由式(1)(2)经过代数变换,整理可得:(3)社会影响.体现了粒子认知能力,为粒子提供了目前已知最优解位置,而且根据它们之间的距离可知其对粒子影响程度.在绝大多数情况下,运动惯性和社会影响是一对不一致的,甚至是相互矛盾的作用力.运动惯性使粒子保持前一次运动的特性,而社会影响对粒子施加了另一种不同的力,使粒子运动趋向于社会影响中心.因此,通常粒子不会朝着目标作直线运动,而是以它的目标为中心在某一范围内运动.3.2PSO算法稳定性分析由式(1)(2)可知,速度和位置更新是在维与维之间独立进行,因此分析过程可简化到一维空间,并只考虑种群中任意一个粒子i的运动过程,所得分析结果可推广到D维空间P个粒子,这种一维空间一个粒子的方法是由Ozcan和Mohan[12]提出,并用来进行PSO算法理论分析,而且仍是目前PSO算法最有效的理论研究方法.当算法达到稳定状态时,个体极值和全局极值会在多次进化过程中保持不变,因此进一步假设pi和pg不变,并分别记为p和g.在上述假设前提下,对式(3)重新整理可得其一维表达式:x(t+1)=(1+ω-φ)×x(t)-ω×x(t-1)+φ×ρ由于通常取c1=c2=λ>0,r1,r2~U(0,1),于是有E(r1)=E(r2)=1E(φ×ρ)=λE[x(t+1)]=θ×E[x(t)]-ω×E[x(t-1)]+τ其中θ=1+ω-λ,由式(5)可得式(5)相应的特征方程为P(z)=z2-θ×z+ω=0(n=2)(7)由Jury判据的稳定条件可得式(5)对应的二阶离散线性定常系统在E[x]处渐近稳定的充要条件为θ和ω满足如下条件:把θ=1+ω-λ代入式(8),整理可得:当ω和λ的取值满足式(9),且个体极值和全局Page5极值保持不变时,算法在(p+g)/2位置渐近稳定.但由于在整个寻优过程中,p和g是动态变化的,况且在粒子运动惯性和社会影响的共同作用下,以及随机因素影响,粒子不可能向着这个稳定点作直线运动,而是以个体极值与全局极值的加权平均位置为中心,围绕着该点作螺旋运动.3.3SzAPSO算法的提出图3是空间缩放因子z>1时,SzAPSO算法工作原理示意图,其中实线框是原搜索空间,点线框是原搜索空间放大后的缩放空间,实心点是原搜索空间内粒子,空心点是飞越原始空间的越界粒子,Pa是吸引子.在SzAPSO算法中空间缩放因子z和吸引子Pa是两个关键参量.(1)空间缩放因子z=k×rand(),k是大于零的整数.当z>1时,搜索空间先膨胀再缩小;当z<1时,搜索空间先缩小再膨胀.在PSO算法中,每个粒子都是种群中重要一员,无论其适应值质量优劣,都不会被淘汰.粒子间的直接或间接社会关系是PSO算法复杂的信息传递方式.而粒子间的位置关系则是从待优化问题中获取信息的重要环节,因此无论是在解决粒子越界,还是算法早熟、慢收敛问题时,都应尽量避免对进化过程中种群结构造成不必要的干扰,而这却是很多改进算法没有考虑的问题.由图3可见,搜索空间放大后,本来已经越界的一部分粒子又被包含进来,变成算法的有效粒子,再经过对周期缩放空间进行收缩,将所有粒子控制在原搜索空间内,而且尽量保护种群中粒子空间位置关系,为算法全局搜索能力提供了有力保证.(2)吸引子Pa是新的社会影响中心.SzAPSO算法的空间缩放中心并不是原搜索空间的几何中心,而是吸引子Pa,它是个体极值和全局极值的加权平均位置.在吸引子Pa作用下,社会影响中心周围的感兴趣区域聚集了更多粒子,大大提高了算法收敛速度,加强了算法局部开发能力.图4是SzAPSO算法流程图.在PSO算法中,由于全局最优粒子个体极值和全局极值相同,由式(1)可知,它不再受其它粒子影响,渐渐趋于停滞,不利于种群进化.因此在SzAPSO算法中,总是利用吸引子对全局最优粒子作一个扰动,令吸引子Pa=pg×r2+r3,其中随机数r2∈(0.5,1.5),r3∈(-1,1);而对其它粒子按PSO算法稳定性分析结果,令吸引子Pa等于个体极值和全局极值的加权平均,即Pa=pid+(pg-pid)×r1,其中随机数r1∈(0,1).这有利于增加全局最优粒子活性,又有利于保持种群多样性.为避免过多随机性影响算法优化性能,在SzAPSO算法每一代进化过程中,只设置一个相同的空间缩放因子,从而使得算法中所有粒子位置按相同比例进行缩放.是SzAPSO算法核心内容,可数学描述为按吸引子和空间缩放方法对粒子位置进行更新xid(t+1)=Page6其中,%是求模运算符,sl=Pa-Xmin,sr=Xmax-Pa.4实验设计及结果分析4.1实验设计本文共选用了13个经典标准测试函数[13].由于实际优化问题中,待优化问题最优解与搜索空间位置关系是很难知道的,所以为了评价SzAPSO算法鲁棒性,实验设计了最优解与搜索空间的3种位表1本文用于SzAPSO算法性能测试的13个经典标准测试函数名称Spheref1(x)=∑DGriewankf2(x)=1Rastriginf3(x)=∑DRosenbrockf4(x)=∑D-1Ackleyf5(x)=-20e-0.21Schwefelf6(x)=418.9829D-∑DStepf7(x)=∑DSchwefel’sP2.22f8(x)=∑DQuadricf9(x)=∑DQuadricNoisef10(x)=∑DGeneralizedPenalizedGeneralizedPenalizedSchwefel’sP2.21f13(x)=maxi{|xi|,1iD}置关系:在搜索中心(Centre)、靠近搜索边界(Close)和恰在搜索边界上(Exactly),具体参数设置见表1.此外,为了突出SzAPSO算法的优化性能,本文共设计了两组对比实验:(1)对比于常用的4种边界变异策略,它们分别是衰减墙(Damping)、隐匿墙(Invisible)、随机速度(Random)和周期模式(Pe-riodic);(2)对比于近年来发表在权威国际期刊上的3种变异PSO算法[14-16].搜索空间Page7为保证测试公平性,所有实验均在相同系统环境下完成.本文设置的测试条件较为苛刻,其中,PSO算法种群大小是15,目标指定精度设置见表1;第一组对比实验参数设置为:ω∈[0.1,0.9],c1=c2=1.49445,分别设搜索空间维数D=30和300;第二组实验中3种对比变异算法参数设置分别参照文献[14-16],搜索空间维数D=100;每次运行5000代;每个实验重复执行10次;为减少过多的随机干扰,在每次进化过程中,SzAPSO算法为整个种群设置一个相同的空间缩放因子z=k×rand(),其中随机数rand()∈(0,1),k=100取自于实验经验;为每个粒子(不包括全局最优粒子)按个体极值和全局极值的加权平均分别设置一个共同的吸引子Pa.4.2结果分析(1)与4种常用边界变异策略的对比实验为保证测试算法不受其它因素干扰,SzAPSO算法和4种对比算法均在基本PSO算法上实现,并使用相同的参数设置和全局模型.图5~6分别是D=30和300时5种测试算法在12个标准测试函数上的收敛曲线,其中每个小图的横轴是进化代数,纵轴是测试函数值的常用对数log10f(x).由于篇幅的原因,函数f13的收敛曲线见图7(a),(b),同样原因,图5~6只给出了最优解位于搜索空间中心图5D=30时5种测试算法在12个标准测试函数上的收敛曲线(Centre)的情况.但表2~3给出了5种测试方法在13个标准测试函数上3种位置关系下收敛精度实验结果均值(M)和方差(SD).由图5~7可直观观察待优化问题维数和最优解位置对算法优化性能的影响.对照图5~7中各测试函数收敛曲线可得,随着待优化问题维数增加,算法优化性能变化幅度不同,但均有所下降;再由表2~3中收敛精度实验结果均值进行更准确比较分析后,仍可得到上述结论.其中,随机速度算法的优化性能受待优化问题维数影响较小,但受最优解位置影响较大;隐匿墙对待优化问题维数和最优解位置均表现出较好的稳定性,但其优化性能略低;衰减墙和周期模式的优化性能相似,随着待优化问题维数增加,算法优化性能大幅度下降,它们都对高维优化问题的最优解位置表现出较好鲁棒性,但对于低维优化问题,二者优化性能受最优解位置影响很大,而且性能差异较大.总之,由图5~7和表2~3可知,待优化问题维数是影响算法优化性能的重要因素,然而最优解位置对算法优化性能的影响比较复杂.对于待优化问题最优解位于搜索边界上或高维优化问题,随机速度算法性能较优;对于低维优化问题,衰减墙的优化性能较好.Page8图6D=300时5种测试算法在12个标准测试函数上的收敛曲线图7标准测试函数f13(SchwefelP2.21)的收敛曲线值得一提的是本文提出的SzAPSO算法无论是收敛速度还是收敛精度均优于其它对比算法,且表2犇=30时5种对比算法在3种位置关系下收敛精度测试结果均值和方差CentreClose其突出性能与问题维数及最优解位置无关,具有很好的鲁棒性,是其它算法难以达到的.f3的结果MSDPage9ExactlyCentreCloseExactlyCentreCloseExactlyCentreClose表3犇=300时5种对比算法在3种位置关系下收敛精度测试结果均值和方差f3的结果MSDf8的结果MSDf13的结果MSDf3的结果MSDPage10ExactlyCentreCloseExactlyCentreCloseExactly图8是D=30时,SzAPSO算法和4种对比算法在进化过程中粒子分布范围统计图,其中图8(a)和(b)分别是最优解位于Centre和Exactly的情况.由图8可知,不同算法的粒子进化过程差异很大.其中,隐匿墙的粒子分布范围最广,在算法进化过程中仍有大量粒子越界,这是因为它对越界粒子没有任何约束,仅仅依靠种群中粒子间的相互作用,将其“拉回”搜索空间,由此可证明在隐匿墙算法进化过程中大量粒子无法参与优化任务,极大地影响了算法优化性能;隐匿墙、衰减墙和周期模式的算法原理会造成大量粒子在边界附近聚集,虽然它们的收敛速度较快,但因缺少足够的全局搜索能力,无法保证算法的收敛精度;随机速度算法中不断变化的f3的结果MSDf8的结果MSDf13的结果MSD速度边界有利于保持粒子种群多样性和全局搜索能力,但还是在边界附近聚集了较大密度的粒子,且由于引入了过多的随机因素,致使粒子过度分散,影响了算法的收敛精度和速度.但观察图8(b)可得,随机速度算法中粒子聚集的边界恰巧是最优解所在位置,因此当最优解位于搜索边界时,随机速度算法表现出很强的优化能力.总之,对照图8(a),(b)可得,对于低维优化问题,随机速度算法、周期模式和衰减墙的优化性能受最优解位置影响较大,隐匿墙的优化性能受最优解位置影响较小,但优化性能较差.观察图8(a),(b)中圆点分布情况可知,无论最优解位于何处,SzAPSO算法均能快速准确定位最优解所在的感兴趣区域,且能在该区域进行充分的Page11局部开发,这是SzAPSO算法保证算法具有持续的全局搜索能力和局部开发能力,总能高精度快速收图8搜索空间中粒子分布图(2)与3种变异PSO算法的对比实验在这组对比测试中,选用了近年来发表在权威国际期刊的几个性能较高的变异PSO算法[14-16],它们分别是APSO,EPUSPSO和CLPSO.其中AP-SO有两个关键步骤:一是实时估计当前进化状态,从而控制惯性权重,加速因子等参数的动态变化,提高算法搜索能力和收敛速度;二是精英学习策略使粒子具有较强的跳出局部最优的能力;EPUSPSO则利用解共享和搜索共享原则避免粒子陷入局部最优,并利用算法种群规模的动态管理提高算法性能;CLPSO算法在粒子速度更新过程中采用一种新的学习策略保证种群多样性.APSO和CLPAO在算法中均采用隐匿墙边界变异策略,EPUSPSO采用图9D=100时SzAPSO与几种变异PSO算法的收敛曲线敛,具有其它算法无法比拟的优越性能的重要原因.最大速度限制策略来解决粒子越界问题.为了进一步验证SzAPSO算法优化性能及其对其它变异PSO算法优化性能的影响力,这组实验中的对比算法可分为两种:一种是上述3种变异算法原型,分别记为:APSO0、EPUSPSO0和CLP-SO0;另一种是用SzAPSO算法替代变异算法中采用的边界变异策略,替代后的对比算法分别记为APSO1、EPUSPSO1和CLPSO1.对比算法的参数设置可参考相应文献[14-16],SzAPSO算法参数设置同前.图9是D=100时SzAPSO与几种对比算法在12个标准测试函数上的收敛曲线,其中每个小图的横轴是进化代数,纵轴是测试函数值的常用对数Page12log10f(x).由于篇幅的原因,函数f13的收敛曲线见图7(c),同样原因,图9只是最优解位于搜索空间中心(Centre)的情况,而表4是测试算法在13个标准函数上3种位置关系下收敛精度实验均值和方差.观察分析图9中各算法收敛曲线和表4中各算法优化结果可得,EPUSPSO的优化性能受最优解位置变化影响较小,但易陷入局部最优,收敛精度低;虽然APSO和CLPSO的优化性能优于EPUSPSO,但算法受最优解位置影响较大:当最优解位于搜索中心时,算法性能较优;可当最优解位于边界附近或恰在边界上时,优化性能大幅度下降,例如当待优化问题最优解分别位于搜索中心和靠近边界时CLPSO0对函数f1的收敛精度下降了7个数量级,数据对比见表4.而SzAPSO算法的优化能力总是明显优于APSO0、EPUSPSO0和CLPSO0算法,如图9所示.虽然SzAPSO算法也会由于问题维数增加,算法优化性能受到一些影响,但结合前面D=30和300的实验结果可再一次证明,较其它对比算法,SzAPSO算法对待优化问题维度和最优解位置具有难得的鲁棒性.由图9和表4可知,替换后的对比算法AP-SO1、EPUSPSO1和CLPSO1的收敛精度极大地得到了提高,甚至提高30个数量级之多,例如当最优解位于搜索中心时EPUSPSO0和EPUSPSO1对函数f8的优化结果,数据对比见表4;尤其是AP-SO1和CLPSO1在某些情况下收敛精度和速度甚至超过了SzAPSO算法,例如图9中f1和f11等.为了考查SzAPSO算法可靠性,我们在测试过程中采用了两个算法终止条件:(1)达到最大进化代数105次;(2)达到指定目标精度,具体设置见表1.表5是最优解位于搜索中心时,SzAPSO与几种变表4犇=100时SzAPSO与几种变异PSO算法在3种位置关系下收敛精度测试结果均值和方差CentreEPUSPSO0M9.90E+48.92E+21.21E+32.50E+82.01E+17.82E+31.05E+5EPUSPSO1M6.21E-32.99E-46.98E+11.63E+03.19E-27.79E+20CLPSO0M7.93E-34.35E-24.54E+24.40E+25.94E-21.51E-22.80E+000异PSO算法达到指定目标精度的算法进化代数、CPU执行时间和成功率的实验均值.由表5中的数据观察可知,SzAPSO算法都能以100%的概率快速收敛到指定目标精度.而且APSO1和CLPSO1也能以100%的概率,甚至比SzAPSO算法更快的速度收敛到指定目标精度,例如观察表5中APSO对函数f4的优化实验结果,APSO0达到指定目标精度平均需要26936代,CPU执行时间131.2s,成功率也只有40%;可APSO1只需要平均12代,CPU执行时间0.019s,就可100%收敛到指定目标精度.由此可见SzAPSO算法除了本身具有极强的优化能力以外,它对其它变异PSO算法优化能力的影响也非常强.虽然EPUSPSO1不能全部以100%的概率收敛到指定目标精度,但问题是EPUSPSO0无法在105次进化过程中达到指定目标精度.由于在这组对比试验中产生了大量实验数据,给分析对比算法的性能带来许多困难,所以我们采用双侧T-检验方法对所得实验数据进行统计分析和量化,从而较客观地评价SzAPSO算法与对比算法间性能差异程度.设显著性水平α=0.05,由于每个测试重复执行10次,因此自由度df=9,查表可得t0.05(9)=2.262,由t=珚d/S珔d求t值,其中,珚d是配对检验数据差数平均值,S珔d是差数平均的标准误,t值计算结果见表6.当|t|<t0.05(9)时,认为SzAPSO算法与相应变异PSO算法无显著差异,记0,否则认为差异显著,记1,表6最后一列数值是13个标准测试函数中优化结果有显著差异的函数个数,由表6可得,SzAPSO算法与APSO0、EPUSPSO0、CLPSO0以及EPUSPSO1对大多数测试函数的优化性能差异显著.Page130000CloseEPUSPSO0M7.30E+57.19E+32.47E+39.33E+92.11E+11.22E+47.13E+5EPUSPSO1M5.52E-31.36E-44.75E+11.55E+02.03E+03.95E+10CLPSO0M1.08E+41.89E+25.78E+23.15E+62.10E+15.45E+16.21E+3000000ExactlyEPUSPSO0M7.42E+57.07E+33.21E+38.91E+92.12E+11.33E+47.97E+5CLPSO0M1.98E+41.69E+27.64E+26.59E+22.11E+13.07E+22.05E+40000CentreCloseM1.35E-12.20E+62.70E-11.07E-14.42E+04.30E+1SD1.41E-11.28E+67.64E-21.09E-13.02E+05.59E+0M2.20E+292.86E+73.60E+25.00E+81.07E+98.08E+1SD3.00E+295.51E+71.22E+21.58E+83.32E+87.19E+0M5.83E-11.28E+32.38E-22.00E-51.01E-31.89E-2SD1.58E-19.76E+22.19E-29.41E-64.16E-44.76E-3M1.96E-25.96E+61.70E-17.90E-28.37E-13.84E+1SD3.40E-22.22E+62.35E-26.78E-21.29E+02.61E+0M1.56E+11.28E+61.30E+24.42E+87.09E+81.46E+2SD7.73E+05.20E+53.20E+29.15E+88.68E+82.10E+1M02.84E+125.34E+32.35E+103.85E+101.71E+2SD04.55E+112.40E+35.53E+97.35E+98.51E+0M5.34E-11.20E+32.54E-22.37E-59.18E-41.85E-2SD8.74E-27.87E+21.42E-21.53E-53.98E-42.55E-3M3.32E+26.28E+91.06E+03.05E+38.51E+51.11E+2SD3.01E+13.47E+94.18E-19.02E+31.29E+63.00E+0Page1403.31E-5003.51E-50ExactlySD2.60E+16.87E+91.42E+31.80E+92.39E+92.03E+103.35E-5003.38E-50SD04.83E+114.20E+37.30E+99.15E+98.15E+003.63E-4003.40E-40SD3.34E+297.74E+95.92E+06.39E+58.01E+64.64E+0表5在指定目标精度下SzAPSO与几种变异PSO算法可靠性测试结果均值进化代数时间/s成功率/%f1390.04810041797.564100150.025100———f2360.051100520217.01010190.033100———f3180.0281001738728.38010060.040100———f4260.03210026936131.20040120.019100———f5390.0561001736133.880100153.678100———f670.0061002655993.2705022450.081100———f7220.03310066350138.00070110.034100———f8690.1391001451243.45090190.261100———f9860.11010041568205.800401030.629100———f10340.062100———3001.215100———f11530.52410013340248.800901170.185100———f12360.38310038456948.90030170.006100———f1350.01010077229148.4009030.010100———进化代数时间/s成功率/%f125281.6341003077929.50100410.053100f22510.1521004948149.78100410.056100f320611.29080———430.030100f41670.0911006044471.2180310.038100f5———5247952.62100460.070100f63405822.580904762946.7310080.011100f7640.0381005187350.96100210.024100f8———5432753.36100640.084100f95290.311100———510.107100f10101375.81010085110118.10100990.178100f11660.11310052690180.701002522.251100f126840.61210053844201.20100290.318100f13200.0131005982157.7510060.007100表6用犜-检测方法对SzAPSO与几种变异PSO算法的差异显著性检验CentreEPUSPSO0-18.17-13.64-43.47-10.70-334.6-43.47-16.73-2.207-1.558-8.826-9.492-9.636-33.6711EPUSPSO1-6.409-7.880-1.016-7.912-12.15-1.0160-11.10-3.294-2.737-6.375-7.310-11.9010CLPSO0-2.584-2.126-38.24-16.88-1.610-38.24-3.384-1.731-8.046-20.16-3.499-1.940-44.219CLPSO11.0000011.003001.0072.1110.7307001.1720进化代数时间/s成功率/%CLPSO1的结果进化代数时间/s成功率/%Page15CloseEPUSPSO0-30.82-37.7638.03-24.38-1096.0-38.03-27.501.0201-18.75-7.921-12.72-15.68-60.3112EPUSPSO1-6.035-8.331-1.021-10.81-1.017-1.0210-18.61-2.083-5.238-4.625-6.916-21.748CLPSO0-7.931-14.75-30.55-3.997-1890.0-30.55-5.741-33.06-5.439-7.632-1.016-1.975-111.011CLPSO110001.012001.0202.002-1.687-101.0020ExactlyEPUSPSO0-31.79-37.33-43.95-16.82-707.8-43.95-51.9910-18.30-21.55-15.01-16.63-63.6112EPUSPSO10000-2.4490000-2.8130002CLPSO0-10.82-10.72-38.18-3.801-1204.5-38.18-13.67-3.752-18.55-6.988-1.713-2.931-74.7012CLPSO1000000000-1.397-1.9630005结束语为进一步提高PSO算法的优化性能,针对现有PSO算法存在问题,本文在分析基本PSO算法粒子运动行为和算法稳定性的基础上,充分利用算法已有信息,提出了SzAPSO算法.该算法计算简便,易于实现;在空间缩放因子和吸引子的共同作用下,种群中所有粒子均被有效控制在搜索空间内,解决了PSO算法粒子越界问题,同时大大提高了算法收敛速度和收敛精度.实验结果表明,本文所提SzAP-SO算法的优化能力明显优于对比算法,此外其突出的优化性能与问题维数和最优解位置无关,具有难得的鲁棒性,适合在高维复杂优化问题中推广应用.致谢感谢编辑老师的认真负责和热心帮助,感谢审稿专家、HsiehS教授及ZhanZ博士所提供的帮助.
