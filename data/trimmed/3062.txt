Page1智能单粒子优化算法纪震1)周家锐1)廖惠连2)吴青华2)1)(深圳大学计算机与软件学院德州仪器DSPs实验室深圳518060)2)(利物浦大学电气电子工程系利物浦L693GJ英国)摘要文中在传统粒子群优化(ParticleSwarmOptimization,PSO)算法的基础上,提出了智能单粒子优化算法(IntelligentSingleParticleOptimizer,ISPO).与传统的PSO算法不同,该算法采用了一个粒子在解空间中搜索,粒子的位置矢量被分成一定数量的子矢量,并基于子矢量对粒子进行更新.在子矢量更新过程中,通过分析之前的速度更新情况,引入一种新的学习策略,使粒子在搜索空间中能够动态地调整速度和位置,从而向全局最优靠近.实验表明,此算法对大部分标准复合测试函数都具有很强的全局搜索能力,其寻优能力超过了国际上最近提出的基于PSO的改进算法.关键词智能单粒子优化算法;粒子群优化;子矢量;学习策略1引言群觅食行为提出了粒子群优化算法(ParticleSwarmOptimization,PSO).由于该算法概念简明、实现方便、收敛速度快、参数设置少,是一种高效的搜索算1995年Eberhart博士和Kennedy[1]博士基于鸟法,近年来受到学术界的广泛重视.但在优化复杂函Page2数时,PSO算法很容易陷入局部最优,并出现早熟收敛现象.为了提高算法的收敛性能,随后出现了各种基于不同思想的改进算法.其中在对于基本粒子群算法进化方程的改进方面,Shi和Eberhart[2]于1998年对PSO算法的速度项引入了惯性权重,并提出在进化过程中动态调整惯性权重以平衡收敛的全局性和收敛速度.后来Shi和Eberhart[3]又提出了基于模糊系统的惯性权重的动态调整,从而实现对惯性权重的非线性控制.此外Clerc等[4-5]提出带收缩因子的粒子群算法,以确保算法收敛.在借鉴其它优化方法的思想方面,也出现了各类的改进粒子群算法,如Angeline[6]于1999年借鉴进化计算中的选择概念,将其引入到PSO算法中,从而淘汰差的粒子,将具有较高适应值的粒子进行复制以产生等数额的粒子来提高算法的收敛性,随后Angeline[7]又提出了借鉴杂交的改进粒子群算法.在利用小生境思想方面,Suganthan[8]于1999年提出一种基于领域思想的粒子群算法,其基本思想是在算法开始阶段,每个个体的领域为其自身,随着进化代数的增长,其领域范围也在不断增大直至整个种群.为进一步改善算法性能,避免过早收敛的现象,Kennedy[9]于1999年提出几种基本的领域结构,如环形结构和轮形结构及它们的推广.近来性能较为显著的基于PSO算法的改进算法有Peram[10]等人于2003年提出的基于粒子群优化的适应值-距离-比例算法(Fitness-Distance-RatiobasedParticleSwarmOp-timization,FDR-PSO),在此算法中每个粒子根据一定的适应值-距离-比例原则,向附近具有较好适应值的多个粒子进行不同程度的靠近,而不仅仅只向当前所发现的最好粒子靠近.此算法改善了PSO算法的早熟收敛问题,在优化复杂函数方面,其性能得到了较大改善.Bergh[11]等人于2004年提出了协同粒子群优化算法(CooperativeParticleSwarmOptimizer,CPSO),采用多个协同工作的子粒子群对解向量的不同部分分别进行优化,达到较好的寻优结果.为防止PSO算法陷入局部最优,Liang[12]等人于2006年提出了综合学习粒子群优化算法(ComprehensiveLearningParticleSwarmOptimi-zer,CLPSO),使得每个粒子的速度更新基于所有其它粒子的历史最优位置,从而达到综合学习的目的.但上述算法在优化复杂高维多模函数时,容易陷入局部最优,且解与全局最优值相差较大.本文基于传统粒子群算法,提出了智能单粒子优化算法(IntelligentSingleParticleOptimizer,ISPO).在ISPO算法的优化过程中,算法不是对整个速度矢量或位置矢量同时进行更新,而是先把整个矢量分成若干子矢量,并按顺序循环更新每个子矢量.在子矢量的更新过程中,此算法通过引入一种新的学习策略,使得粒子在更新过程中能够分析之前的速度更新情况,并决定子矢量在下一次迭代中的速度.而在传统粒子群算法中,粒子只是简单的个体,不具备分析之前速度更新情况的能力.实验结果表明,此算法在优化复杂的具有大量局部最优点的高维多模函数方面具有一定的优势,其性能显著优于最近提出的粒子群改进算法的性能,且其解非常接近全局最优点.2PSO算法在一个D维的目标搜索空间中,由n个粒子构成一个群体,其中第i个粒子(i=1,2,…,n)的位置可表示为D维的位置矢量狕i=(zi1,zi2,…,zid,…,ziD).n也被称为群体规模,过大的n会影响算法的运算速度和收敛性.根据一定标准计算zi当前的适应值,即可衡量粒子位置的优劣.每次迭代中粒子i移动的距离为粒子的飞行速度或者速度矢量,表示为狏i=(vi1,vi2,…,vid,…,viD),粒子迄今为止搜索到的最优位置为狆i=(pi1,pi2,…,pid,…,piD),整个粒子群迄今为止搜索到的最优位置为狆g=(pg1,pg2,…,pgd,…,pgD).每次迭代中,粒子根据以下式子更新速度和位置:vk+1id=wvkid+c1狉1(pid-zkid)+c2狉2(pgd-zkid)其中i=1,2,…,n,k是迭代次数,狉1和狉2为[0,1]之间的随机数构成的矢量.c1和c2为学习因子,也称加速因子,其使粒子具有自我总结和向群体中优秀个体学习的能力,从而向自己的历史最优点以及群体内历史最优点靠近.速度vid的取值范围为[vmin,vmax],位置zid的取值范围为[zmin,zmax].3智能单粒子优化算法在ISPO算法的优化过程中,算法并不是对整个速度矢量或位置矢量(即所有维的数值)同时进行更新,而是先把整个矢量分成若干个子矢量,并基于子矢量进行粒子更新.在子矢量的更新过程中,通过引入一种新的学习策略,使其对之前的速度更新情Page3况进行分析,并决定下一次迭代的速度,从而实现对速度的动态调整.3.1子矢量大部分随机优化算法(包括粒子群算法和遗传算法等)的性能随维数增加而变差.在更新过程中,传统的PSO算法往往同时改变整个解矢量中各维的数值,并根据更新后的解矢量得到一个适应值(fitnessvalue),从而判断解矢量的适应程度.此适应值能够判断解矢量的整体质量,但不能判断部分维是否向最优方向移动.例如,在解决三维函数问题中,其全局最优为[0,0,0],解的初始值设为[1,1,1],给其一个随机扰动[0.2,-0.5,0.3],可得到更新后的解为[1.2,0.5,1.3].假设更新后的解的适应值比初始值对应的适应值有所提高,则在下一次迭代中解将会在某种程度上向[0.2,-0.5,0.3]方向移动.此时,虽然第二维的数值向全局最优靠近,但第一维和第三维的数值却远离了全局最优.因此,对于高维函数,一般PSO算法很难兼顾所有维的优化方向.为解决这个问题,在保证粒子能够搜索到空间中的每个区域的同时,可把搜索空间分解成若干个低维小空间进行搜索.在本文提出的ISPO算法中,一个粒子代表着整个位置矢量.在更新过程中,把整个D维的解空间分成m部分,即把整个位置矢量分成m个位置子矢量,其中每一位置子矢量与其对应的速度子矢量分别表示为狕j和狏j,j=1,…,m.为简单起见,设D刚好被m整除,则每个子矢量包括了l(l=D/m)维,如图1所示.对于维之间相关性较大的函数,需根据函数特征来决定子矢量的个数.如图2所示,假设全局最优点为(0,0),而(k1,k2)为直线x=k1和y=k2上的最优解.把初始值设在(k1,k2),并在更新过程中轮流更新每一维.在更新其中一维的数值时需保持另一维的数值不变.由于(k1,k2)为两直线上的最优解,所以对这两维数值进行轮流更新将会导致解跳不出局部最优(k1,k2).此时,如果同时改变两维的数值,解有可能会跳出局部最优点,并到达全局最优.因此在解决不同问题时,需根据维之间的相关性来决定每个子矢量所包含的维数.3.2子矢量的更新过程ISPO的更新过程是基于子矢量,按先后顺序(从狕~1到狕~m)进行循环更新.在更新第j(1jm)个子矢量的过程中,将按以下的速度和位置更新公式迭代执行N次:其中狓k狕~k-1j+狏~k量,用于分析之前速度的更新情况,从而决定下一次迭代的速度;随机矢量狉在[-0.5,0.5]范围内服从均匀分布;多样性因子a、下降因子p、收缩因子s和加速度因子b(b1)为常数;f()为评估算法性能的适应值.在子矢量更新过程中,位置子矢量由速度子矢量决定.速度子矢量由两部分组成:多样性部分(a/kp)×狉和学习部分b×犔k控制随机矢量狉的幅度,而p控制幅度的下降梯度.由于(a/kp)是随迭代次数增加而下降的幂函数,所以粒子在优化前期更趋向于全局搜索,并随更新过程逐渐从全局搜索向局部搜索转换.学习部分b×犔k一种新的学习策略,其中学习变量犔能够根据之前的速度更新情况而动态地调整速度子矢量.学习部分在更新过程中所起的作用主要为如下3点:(1)在每次迭代中,如果一个粒子找到比历史最好位置更优的位置时,它将会把这次迭代的速度增加到b倍,并决定下一次迭代的速度,如式(4)、(5)所示.(2)如果在第1次迭代中,适应值得到改善,但在第2次迭代中适应值没有得到改善.这是因为第2次迭代的速度子矢量是第1次迭代的速度子矢量Page4的b倍,其速度太大以至于位置子矢量跳过了最优点.在这种情况下,如果犔≠0,降低速度将会有助于搜索全局最优点,因此第3次迭代中的学习子矢量犔将减小为原值的1/s.(3)如果粒子经过几次迭代后适应值仍然没有得到改善,犔将会被减到一个很小的值,当其小于ε时将被设为0,此时只有多样性部分(a/kp)×狉决定着速度子矢量.这意味着此时的速度会具有更大的多样性,更容易跳出局部最优.从上述几点可见此粒子的智能性.ISPO的伪代码如下(其中NFEs为函数计算(FunctionEvalua-tions,FEs)的次数,Nmax为NFEs的最大次数):开始初始位置矢量狕0=[狕~01,狕~02,…,狕~0m];计算适应值狕0,即f(狕0);1.初始FEs的次数为NFEs=1;2.初始子矢量的个数j=1;初始学习变量犔03.初始子矢量中的迭代次数k=1;计算狏~k计算f(狓k计算f(狓kNFEs=NFEs+2;如果f(狓k如果f(狓k如果犔k如果k<N,跳至步3;j=j+1;如果j<m,跳至步2;如果NFEs<Nmax,跳至步1;结束.4实验结果实验仿真平台为WindowsXP,Matlab6.5.本表2各算法对6个标准复合测试函数进行优化的结果函数CF12.32E+02±1.17E+021.39E+02±2.79E+011.41E+02±2.13E+022.47E+01±7.79E+01CF22.29E+02±1.61E+021.15E+02±3.48E+011.12E+02±1.40E+026.54E+01±6.03E+01CF33.42E+02±1.52E+022.27E+02±6.45E+013.01E+02±1.95E+022.12E+02±6.06E+01CF44.71E+02±1.51E+023.77E+02±4.79E+013.32E+02±1.26E+024.11E+02±5.87E+01CF52.69E+02±2.41E+021.11E+02±2.47E+011.95E+02±2.36E+023.37E+01±2.88E+01CF69.05E+02±3.10E+006.71E+02±1.58E+028.39E+02±1.44E+026.95E+02±2.07E+02图3给出了各算法在优化复合测试函数时的收敛特性,图中横坐标显示FEs的范围为0~5×104,纵坐标为适应值的对数.ISPO在CF1、CF2和CF5实验把ISPO算法与带惯性的粒子群算法(ParticleSwarmOptimizerwithinertiaweightw,PSO-w)[2]、协同粒子群优化算法(CooperativeParticleSwarmOptimizer,CPSO)[11]和综合学习粒子群优化算法(ComprehensiveLearningParticleSwarmOptimizer,CLPSO)[12]进行比较①.本实验采用了国际上通用的6个标准复合测试函数[13]:CF1~CF6.这些测试函数为高维多模函数,具有大量的局部最优点,是优化领域中公认的较难优化的函数.大部分优化算法在对其进行寻优的过程中往往会陷入局部最优点.近年来,优化高维多模函数已成为优化算法领域的研究热点.在实验中,适应值函数f()的值为当前位置对应的函数值.PSO-w算法的参数设置为c1=c2=2.CPSO和CLPSO的参数设置参考文献[13].ISPO算法的参数设置如表1所示.函数abplsεCF14000240141.00E+00CF25240141.00E+00CF330020.1141.00E+00CF4400021141.00E+00CF5102100140.00E+00CF6400021141.00E+00各算法对6个标准复合测试函数分别执行10次,在每次执行中函数的总计算次数FEs设置为5×104,其平均结果和标准方差如表2所示.在优化这6个标准复合测试函数时,ISPO算法都能够到达距全局最优点较近的位置,其算法稳定性较好.与PSO-w、CPSO和CLPSO算法相比,ISPO算法在测试函数CF1、CF2、CF3和CF5上所得到的最终位置比其它3个算法更接近于全局最优点.特别是对于CF1和CF5,ISPO算法的适应值明显优于其它3个算法.ISPO的优化结果的标准方差也相对较低,从而证明本算法的稳定性.上收敛速度明显快于其它3个算法.①各算法的程序可从http://dsp.szu.edu.cn/pso/ispo下载Page5图3各算法对标准复合测试函数进行优化的收敛曲线5结论本文在粒子群优化算法的基础上,针对复杂高维多模函数很难极小化的问题,提出了智能单粒子优化算法,并给出了一种确定算法参数的方法.智能单粒子优化算法先把整个矢量分成若干子矢量,并按顺序循环更新每一子矢量.在更新每一子矢量的过程中,此算法通过引入一种新的学习策略,使粒子能够根据之前的速度更新情况进行动态地调整子矢量速度.粒子在陷入局部最优点时会增加速度的多样性,从而跳出局部最优,并向全局最优靠近.实验表明,此算法对大部分函数都具有很强的全局搜索能力,特别在优化复杂的高维多模函数时,其性能比起PSO-w、FEP和CLPSO算法有着很大的改善,且其解非常接近全局最优点.
