Page1基于粗精调技术的求解带平衡约束圆形Packing问题的拟物算法何琨莫旦增许如初黄文奇(华中科技大学计算机科学与技术学院武汉430074)摘要带平衡约束的圆形Packing问题是以卫星舱布局为背景的具有NP难度的布局优化问题.文中建立了此问题相应的数学模型,同时提出了两个新的物理模型,并受工艺加工过程中“粗精加工”现象的启发,提出了基于粗精调技术的拟物算法QPCFA.该算法既兼顾了搜索空间的多样性以利于全局搜索,又能对有前途的局部区域进行精细搜索以找到相应的局部最优解.同时,在计算过程中引入禁忌技术和跳坑策略,以提高算法的求解质量.对国际上11个代表性的算例进行了计算,QPCFA更新了其中7个算例的最好记录,其余4个与目前的最好记录基本持平,且与目前的最好结果相比在计算精度上均有较大的提高.关键词Packing问题;布局优化;拟物;平衡约束;粗精调技术1引言现实生活中存在着很多NP难度问题,如Pack-ing问题、SAT问题、Scheduling问题、Covering问题等.这些问题看似简单且很容易构造其解空间,但用传统的穷举策略求解时往往需要指数级的计算时间.随着问题规模的增大,用传统的穷举方法显然已不可行.因此,人们开始向生物世界[1-2]、物理世界[3-5]和人类社会[3-4,6]寻求灵感,从中受到启发以得到求解原始问题的高效率近似算法.其中拟物法[3-5]是借助物理世界的知识或模拟物理现象来求解问题,通过寻找与原始数学问题等价的物理现象并观察其中物质运动的生动形象,从中得到启发并逐步形式化为求解原始问题的确切算法.本文拟研究带平衡约束的圆形Packing问题.该问题是在典型的NP难度问题———圆形Packing问题的基础上又增加了一项静平衡(staticequilibri-um)约束,是一个以带自旋的返回式卫星舱中的设备布局问题为背景的全局优化问题.相关的求解算法包括改进的拟物算法[5]、快速局部搜索算法[7]、改进的散射搜索法[8]、吸引盘填充算法[9]和自适应粒子群优化算法[10]等.本文提出了一种改进的拟物方法,给出了嵌入物体的一种更自然、更合理的运动方程.然后,受工艺加工过程中“粗精加工”现象的启发,将拟物方法与粗精调技术相结合,提出了一种基于粗精调技术的改进型拟物算法(Quasi-physicalAlgorithmBasedonCoarseandFineAdjustment,QPCFA).并且通过进一步结合禁忌和跳坑策略,使所得算法既具有局部收敛快又具有全局寻优的特点.对11个代表性算例的实验计算表明,QPCFA算法是求解带平衡约束的圆形Packing问题的一种高效算法.2问题的定义2.1问题描述已知n个实心圆饼(n为任意给定的正整数),其半径Ri、质量mi为分别任意给定的正实数(i∈{1,2,…,n}),又知一个小的正实数δr,要求给出这些圆饼的一种紧密布局,使得其外包络圆的半径尽可能的小.要求所给布局满足以下3个约束:(1)各圆饼完全在外包络圆内,不超出外包络圆的边界;(2)任两圆饼间互不嵌入,即交的面积为0;(3)这n个圆饼的整体质心与外包络圆圆心的距离小于δr.在实际应用中,所得布局对应卫星舱的一个横截面.卫星舱以外包络圆的圆心为轴,要求给出相关设备的一种布局,使得卫星舱的半径尽可能的小,以减少卫星飞行的阻力.同时,由于卫星舱是带自旋的,而当旋转体的静不平衡量即合力矩大于零时,物体的转动速度就不可能均匀,震动、发热、噪音、磨损等随之产生.因此,约束(3)要求n个圆饼的整体质心到外包络圆圆心的距离小于一个小的正实数δr,从而使得自旋时所有设备产生的合力矩即静不平衡量小于δJ=∑n2.2问题的形式化定义如图1所示,在二维欧氏空间中建立笛卡尔坐标系,设外包络圆圆心的坐标为(0,0),用(xi,yi)表示圆饼i的圆心坐标(i∈{1,2,…,n}),则此问题为求一个布局X=x1,y1,x2,y2,…,xn,y足以下目标和约束:minR0=max(x2i+y2槡i+Ri|i∈{1,2,…,n})s.t.(1)x2i+y2槡iR0-Ri,i∈{1,2,…,n};(2)xi-x()j(3)Rc=∑n其中R0即为待求的最小外包络圆的半径.约束(1)中,x2i+y2槡i即为圆饼i之圆心到原点的距离;当x2i+y2槡i+RiR0时,圆饼i完全落在外包络圆内.约束(2)中,xi-x()j槡之间的距离;当xi-x()j圆饼i与圆饼j互不嵌入.设图1中c点为n个圆饼的质心,则约束(3)中∑n∑nmi为质点c到原点的距离Rc;当Rc<δr时,对应的静不平衡量J=∑n中,取δr的值为10-12.i=1Page32.3问题的简化情形上述求最小外包络圆半径R0的问题P属于优化问题.由于R0未知,直接求解该问题有一定的难度.因此可考虑先求解判定形式的带平衡约束的圆形Packing问题P,即对给定的R0,要求判定是否存在一种布局满足约束(1)、(2)和(3);若回答是,则给出相应的布局.若问题P能够得到有效的解决,那么再结合二分法即可求解问题P.具体过程如下:1.设定一个较小的外包络圆半径Rlow0(例如Rlow0为某一圆的半径,使得该圆的面积与所有圆饼的面积和相等),使得这n个圆饼明显放不下;再设定一个较大的外包络圆半径Rhigh0(例如Rhigh0为所有圆饼半径的和),使得这n个圆饼明显放得下.2.选择二分点Rmid0=Rhigh0+Rlow()0/2,令R0=Rmid0,连续求解问题P多次(本文为5次).若至少有一次回答为是,则修改Rhigh0为Rmid0,Rlow0不变;否则修改Rlow0为Rmid0,Rhigh0不变.3.重复步2,直至Rlow0与Rhigh0充分接近(例如两者之差小于10-6),则Rhigh0即为原始问题P的解.3问题犘对应的物理模型本节给出问题P对应的物理模型.3.1弹力模型将外包络圆之边界及其外部全部点所构成的集合视为物体0,将圆饼i(i∈{1,2,…,n})视为物体i.物体0为一个圆形的空腔,物体i(i∈{1,2,…,n})视为一弹性实体,则所有物体形成一个体系.下面给出该体系中若干概念的定义.定义1.格局.在任一时刻,称圆饼集合S={1,2,…,n}中各圆饼的圆心坐标所形成的2n元组X=x1,y1,x2,y2,…,xn,y(定义2.嵌入深度Dij.若任两物体相交的面积大于0,则相互之间形成嵌入.用Dij表示物体i与物体j之间的嵌入深度,如式(1)所示.烄Dij=烅烆Dij(j≠0)如图2所示,Dij(j=0)如图3所示,可见Dij=Dji.文献[3-4]中,根据此嵌入深度的定义使物体i、j之间产生相应的弹性力的作用.当i、j均为圆饼时,两者在弹性力的作用下相互弹开并移动相Page4等的距离.在本文中,通过进一步地观察,我们发现大小不同的两弹性物体在发生挤压的情况下所产生的形变是不同的.一般来说,大圆饼产生的形变要小于小圆饼产生的形变.因此,本文进一步给出形变度的定义.定义3.形变度dij.用dij表示物体i因与物体j相嵌入而产生的形变度.(1)当i,j∈{1,2,…,n},即均为圆饼时,dij(i≠j)如式(2)所示:烄Ri+λxk-x()i2+yk-y()ixi-x()jRi-Rj-xi-x()jdij=烅xi-x()j2Ri,xi-x()j0,烆否则xk-x()i·xk-x()j+yk-y()i·yk-y()jxk-x()i·xk-x()j+yk-y()i·yk-y()j如图2中,当两圆饼未完全嵌入时(即其中,λ=xi-x()j槡线之交点为a、b,令两圆饼圆心之连线与线段ab的交点为Pij(xk,yk),若点Pij在两圆心之间,则λ为-1,否则为1,dij和dji如图2(a)中所示;当j完全嵌入到i内时(即xi-x()jRj),dij和dji如图2(b)中所示.(2)当j=0,即物体j为空腔时,di0(i≠0)如式(3)所示:di0=x2i+y2槡i+Ri-R0,x2i+y2槡i+Ri>R0当i与物体0嵌入时,则di0如图3所示.可见Dij=dij+dji.当Ri>Rj(i,j∈{1,2,…,n})时,dij<dji;当j=0时,由于物体0为刚体,不产生形变,则di0=Di0,d0i=0.当弹性物体因受到挤压而产生形变时,在弹性力的作用下有恢复自己原形的趋势.因此,我们给出弹性力的定义,使拟物模型中物体在此弹性力的作用下做一系列运动.定义4.弹性力犉弹ij.用犉弹ij表示物体i因与物体j相嵌入而受到的弹性力,则犉弹ij如式(4)所示:犉弹ij=k弹·dij·狉ij狉ij其中,k弹为相应的倔强系数;dij为形变度;狉ij如式(5)所示,当i,j均为圆饼时,狉ij表示圆饼j的圆心指向圆饼i的圆心之向量;当其中之一例如j为空腔时,狉ij表示圆饼i的圆心指向空腔圆心的向量.犉弹ij(j≠0)如图2所示,犉弹ij(j=0)如图3定义5.弹性合力犉弹i.物体i受到的弹性合所示.力犉弹i如式(6)所示:于它们之间嵌入深度的平方.Uij如式(7)所示:根据弹性力学,二弹性物体间的弹性势能正比定义6.弹性势能Uij.物体i、j间的弹性势能Uij=k弹·D2ij,i,j∈{0,1,…,n},i≠j(7)定义7.总弹性势能U弹(X).对给定的格局X,整个体系的总弹性势能U弹(X)如式(8)所示:当U弹(X)=0时,任两物体间均无嵌入,对应将圆饼集合S视为其质心处的一个点c,其质格局X满足问题的约束(1)和(2).3.2拉力模型量为∑n皮筋相连.当两点间的距离大于0时,点c受到橡皮筋的拉力.下面给出相关概念的定义.定义8.质心坐标(珚X,珡Y).质心的坐标(珚X,珡Y)如式(9)所示:i=1定义9.拉力犉拉.当质心坐标与原点不重合时,质心受到的拉力犉拉如式(10)所示:其中k拉为该橡皮筋的倔强系数,这里假设橡皮筋很紧,在微小的形变下其拉力的大小不变.定义10.偏移势能U拉(X).由于质心与空腔圆心不重合,而产生的偏移势能U拉(X)如式(11)所示:当U拉(X)<k拉·δr时,对应格局X中质心与原点的距离满足问题的约束(3).Page5将上述两个物理模型相结合,即可得出一个综定义11.总体势能U总(X).对给定格局X,当U总(X)=0时,对应格局X同时满足问题的3.3综合模型合的物理模型,其总体势能U总(X)的定义如下.定义其总体势能U总(X)=U弹(X)+U拉(X).3个约束.4算法描述基于上述物理模型,对问题P,其拟物求解的基本思路是:首先,随机生成一个格局;然后,让该格局中的诸圆饼在弹性力和拉力的作用下做一系列的运动;若运动终止时相应格局的总体势能为0,则得到一个合法的解格局(但在实际计算中,由于电子计算机的精度有限,不可能使势能严格为0,所以,我们约定总体势能小于10-20即可成功停机);否则,采用跳坑策略,以生成一个新格局,再进入下一轮的拟物迭代过程.在拟物过程中,为了不在局部最小值点的附近花费过多的时间,又不轻易错过有前景的格局(即此格局有可能达到全局最小值点),我们将拟物算法分成粗调和精调两个阶段.若当前格局X的总体势能较大,则进行粗调,主要考虑诸圆饼在弹性力作用下的运动,偶尔考虑空腔圆心对圆饼整体质心的拉力作用,从而较快地得到一个基本无嵌入的新格局.若该格局的总体势能较大,则进行跳坑以搜索不同的区域.只有在粗调过程中找到了一个总体势能较小的格局X后,才进入精调阶段,在圆饼的每一步运动中同时考虑弹性力和拉力的作用,从而在格局X的附近精确地找到一个势能最小的格局X.下面给出实际计算中涉及到的若干概念的定义、粗精调算法A1和精调算法A2两个子算法以及具体的跳坑策略.4.1相关概念的定义在当前时刻,可通过执行一个动作而进入下一时刻.以下给出3种动作的定义.定义12.动作1.在t时刻,若诸圆饼在所受弹性合力的作用下按运动方程(12)移动一步,则称此运动过程为动作1.狉(t+1)i表示t时刻圆饼i的位置;h弹为弹性合力其中,狉(t)作用下的移动步长.定义13.动作2.在t时刻,若诸圆饼在拉力的作用力下按运动方程(13)移动一步,则称此运动过程为动作2.狉(t+1)其中h拉为拉力作用下的移动步长.定义14.动作3.在t时刻,若诸圆饼在所受弹性合力和拉力的共同作用下按运动方程(14)移动一步,则称此运动过程为动作3.狉(t+1)i=狉(t)另外,在实际的计算过程中,往往会碰到“卡壳”的情形,即计算落入局部极小值点的陷阱,对此我们给出卡壳格局的定义和相应的判断方法.定义15.卡壳格局.若当前格局中,各物体受到的弹性合力为0,但它们之间仍存在嵌入,即整个体系的弹性势能大于0,则称此格局为卡壳格局.在实际计算时,由于在每个格局中均计算每个物体的弹性合力的大小较为耗时,本文采用弹性势能的下降比来判断一个格局是否卡壳.具体过程为:从格局X出发,各圆饼在弹性力的作用下经过多个动作(例如200个)后形成格局X,若|U弹(X)-U弹(X)|/U弹(X)<10-4,即格局X经过多个动作后,其总弹性势能几乎没有变化,则认为格局X为一个卡壳格局.4.2粗精调算法犃1粗精调算法的流程如图4所示.对一个给定的格局X,若此格局的总势能U总(X)满足要求,则粗精调算法成功退出;否则判断其弹性势能是否足够小(小于10-10),即判断各物体间的嵌入大小.若Page6U弹(X)10-10,即认为各物体间嵌入较多,则只进行拟物下降,即各圆饼做动作1,并根据弹性势能的变化调整步长h弹,拟物下降过程直到其弹性势能小于10-10或拟物下降失效(格局处于卡壳状态或步长足够小称为拟物下降失效)而结束;否则认为格局X中各物体间的嵌入较少,此时判断格局是否达到精调要求,即判断U总(X)是否小于10-10.若U总(X)<10-10,则已达到精调要求,调用精调算法A2;否则执行与拟物下降失效或卡壳后相同的操作,即各圆饼在拉力的作用下移动一步,即做动作2,并根据偏移势能的变化调整步长h拉,此时便完成一次完整的迭代,即迭代步数加1.若迭代步数达到上限,则粗精调算法失败退出,否则开始下一轮的迭代.粗精调算法A1的伪代码如下.ProcedureA1(X,count)输入:格局X,迭代步数上限count输出:粗调结束后的格局X1.迭代步数j=0,时刻t=0;2.do{3.计算总势能U总(X);4.if(U总(X)<10-20)5.返回格局X,成功退出;6.else{7.保存U拉old=U拉(X);8.while(U弹10-10){9.计算t时刻每个圆饼所受的弹性合力,执行动作1,10.得到新格局X;11.t=t+1;12.if(U弹(X)>U弹(X))13.调整步长h弹=h弹·0.75;14.X=X;15.if(卡壳orh弹<10-7)16.break;17.}//while18.if(U总<10-10)19.调用A2(X);20.else{20.计算t时刻整个体系的拉力,执行动作2,21.得到新格局X;22.t=t+1;23.if(U拉(X)>U拉old)24.调整步长h拉=h拉·0.4;25.X=X;26.}//endifU总(X)<10-1027.}//endifU总(X)<10-2028.j=j+1;29.}while(j<count);EndProcedure4.3粗精调算法犃2当U总(X)<10-10即当前格局X已落入一个前景较好的区域时,则运行精调算法A2.其基本流程如图5所示.若偏移势能U拉(X)<k拉·δr即已满足静不平衡约束时,各圆饼只在弹性力的作用下运动(即做动作1),否则在弹性力和拉力的合力作用下运动(即做动作3).若U总(X)<10-18即认为计算接近全局最小值点,则不再判断格局是否会卡壳.重复此计算过程,直至总势能U总(X)<10-20成功退出,或者拟物下降法已失效(即格局卡壳或弹性力移动步长足够小),失败退出.精调算法A2的伪代码如下.ProcedureA2(X)输入:格局X输出:精调结束后的格局X1.时刻t=0,初始化移动步长h弹,h拉;2.do{3.if(U拉(X)<k拉·δr){4.计算t时刻每个圆饼所受的弹性合力,执行动作1,5.得到新格局X;6.if(U弹()X>U弹(X))7.调整步长h弹=h弹·0.75;8.}else{9.计算t时刻每个圆饼所受的弹性合力和整个体系的10.拉力,执行动作3,得到新格局X;11.}//endifPage712.t=t+1,X=X;13.计算总势能U总(X);14.if(U总(X)<10-20){15.返回格局X,成功退出;16.}elseif(U总(X)10-18){17.if(卡壳)18.返回当前格局X,失败退出;19.}20.if(h<10-7)21.返回当前格局X,失败退出;22.}while(1);EndProcedure4.4基于禁忌技术的跳坑策略当粗精调算法A1陷入局部极小值点的陷阱时,为了寻找更有前景的区域并进行搜索,从而有利于找到全局最小值点,本文采用基于禁忌技术的跳坑策略来跳出当前局部极小值点的陷阱.具体做法是:在当前格局中挑选某个嵌入较多的圆饼进行重新放置,以形成一个处于不同搜索区域的新格局.同时,为了避免每次跳坑时总是挑中同一个圆饼,本文进一步结合禁忌技术,这样在一定程度上就可避免重复搜索相同的区域,从而提高算法的效率.通常以相对痛苦度来衡量一个圆饼的嵌入情况,圆饼嵌入越多表示其越痛苦.j=0,j≠i定义16.相对痛苦度.格局X中,圆饼i(i∈{1,2,…,n})的相对痛苦度为其因挤压产生的弹性势能与其半径的比,即Ui/Ri(其中Ui=1∑nUij表示圆饼i因挤压产生的弹性势能).具体的禁忌方法与跳坑策略如下.禁忌方法若跳坑时同一个圆饼被多次挑中(本文中设为3次),则将之放入到一个禁忌表中,同时设置其禁忌长度为l.表中每增加一个禁忌圆饼,则将该禁忌表中的其它圆饼的禁忌长度减1,同时将禁忌长度为0的圆饼从表中删除,即解除禁忌.跳坑策略当计算陷入局部极小值点的陷阱时,从当前格局中挑选一个相对痛苦度最大且未被禁忌的圆饼并将其圆心随机地放到一个空位点(在空腔内但不在任何圆饼区域内的一个点)上,以得到一个新的格局.4.5完整的QPCFA算法综合基于粗精调技术的拟物下降算法和跳坑策略,我们得到求解带平衡约束圆形Packing问题的完整算法,其主要过程如下.1.初始化:2.执行一步迭代:3.若运行总时间T总达到某个限定的值,则失败退出.4.跳坑:5.用跳坑产生的k·m/k=m个新格局更新X1,X2,6.返回2.5实验结果与比较我们将基于粗精调技术的拟物算法(QPCFA)用C++语言实现并将之放在CPU主频为1.90GHz,内存为1GB的PC机上运行.在实验计算中,相关的参数设置与分析如下.在粗精调算法中,倔强系数k弹=1,k拉=10-8,δr=10-12,从而使U拉<k拉·δr=10-20时满足静不平衡约束;当U总<10-10时进入精调过程,当U总<10-20时可成功停机.在拟物下降过程中,若将移动步长h弹设置为1.0,则两嵌入圆饼做一次动作1后刚好相切,但在整个拟物下降过程中,经过小规模实验发现,将h弹的初始值设为1.2时,在h弹∈[0.5,2.0]中下降速度是最快的;在做动作2时,当h拉的值为1.0时,动作结束后系统的质心与外包络圆的圆心重合,这样可以使格局尽快满足约束(3).综合以上两点,在A1和A2中,移动步长h弹和h拉的初始值分别设置为1.2和1.0.当h弹<10-7时,则认为对应的拟物下降过程已完成.在粗精调计算过程中,我们发现从一个格局出发,A1最多经过10次左右的迭代便找到该领域内的局部最小值点,因此将A1迭代次数的上界count设为10;当连续做200个动作后,势能相对变化率小于0.01%时,则认为格局处于卡壳状态.在禁忌方法中,若将禁忌长度设置过短或过长,Page8都有可能使搜索局限于同一个领域,丧失搜索空间的多样性,因此将禁忌长度l设置为3.若同一个圆饼被连续挑中3次则入表,禁忌长度l设为3.在总算法中,需要在扩大搜索范围和提高搜索速度两方面取得平衡,因此,总格局数不宜设置过小或过大.经实验测试发现,将当前总格局数m设为20能达到较好的计算结果;每步迭代后保留最好的k=2个格局,使算法不会因过度贪心而过早地陷入局部值的陷阱;跳坑时,对这最好的2个格局中的每一个生成m/k=10个新格局,从而得到m个新的格局.另外,为了控制总的运行时间,算法在运行总时间T总1000(s)时,则失败停机.在国内外文献中,关于带平衡约束圆形Pack-表1QPCFA算法与MPSO[13]、APSO[10]、IQP[5]、ISS[8]和BF[9]在第1组算例上的计算结果比较算例算例1.1(n=5)120.7112.712×10-3287120.71077.03×10-4263120.7107.63×10-43.82算例1.2(n=9)—算例1.3(n=5)—算例1.4(n=7)31.9851.82×10-2100231.8852×10-698231.9814.11×10-376.33算例1.5(n=40)843.9403.9×10-32523820.9877.26×10-42318742.755.4×10-412.27算例BF的结果R0JTime/s算例1.1(n=5)120.71028.45×10-81.275120.71067823.89×10-90.594120.71067829.55×10-132.11×10-100.046算例1.2(n=9)1.0000051.78×10-44.631.0000009.70×10-92.8911.00000007.92×10-132.00×10-120.172算例1.3(n=5)—算例1.4(n=7)31.9545.68×10-1420.1831.85461.50×10-954.82831.84250005.33×10-134.11×10-101.406算例1.5(n=40)740.5804.01×10-520.21725.04352.47×10-97.187712.40625004.09×10-131.60×10-10171.719表2QPCFA在算例1.5上的布局坐标序号133.6752834392142419.056568232296021-21.2693514130649-604.03189462935902-374.8283256693330-141.139430424391022-342.3161478494570285.91025638393503-602.4663880092440-120.537510170726023382.8906303885850-168.02747248212704-172.1663553154680372.686106138574024-196.2826053500670169.10956897314405-615.43567460052606112.8105106839630-420.8216462150590265.8395435443323208.89193851431307629.4002933894370848.7758521034264617.482808498066028-148.2877567686720583.33703191731409244.9959673442620542.665254576071029584.4552319881560-150.037276504008010-330.2892549427610536.225943388334030368.4355146368750163.279109290871011-79.1216468440339-415.718029198883031-234.4379027266300-553.830612465765012281.2818105224380-322.625815699022032457.727790322500013-517.9789698750800-309.510725672343033-552.3264224512010253.4698067670430142.7302479076602-1.085041844573434-457.4194707002230420.372983816901015137.5221609785070-173.689039975242035-82.8580236143787-207.770915492948016562.5139518908780215.572131703456036485.4728406705990-349.865918617819017224.0628873920580308.817916838638037435.2884991902530404.774891157742018176.2351981230330108.731586798243038-412.7691159220190-472.504242816953019286.7598944873780-21.749413709759539173.7038547878660-600.799424409599020-403.2143651870430第2组共6个算例是由Huang等人于2006年[5]提出的,对该组算例仅Huang等人[5]进行了计算.表3中给出了QPCFA算法的计算结果及与IQP的结果比较.由于IQP算法中R0的精度为小数ing问题的算例有2组.第1组共5个算例是由滕弘飞等人于1994年[11]、1999年[2]和2001年[12]陆续提出的,对该组算例,滕弘飞等人[8,12]、李宁等人[13]、雷开友等人[10]、Huang等人[5]以及刘景发等人[9]分别给出了计算的结果.表1中给出了QPCFA算法的计算结果及与以上算法的结果比较,其中,R0为外包络圆半径;J为静不平衡量;Rc为圆饼集质心与外包络圆圆心的距离;Time为运行时间.每个算例的最好结果用粗体显示.可见QPCFA算法在算例1.2上平了记录,在算例1.3、1.4和1.5上取得了更好的结果.图6为算法QPCFA在第1组算例上的布局结果图,表2为QPCFA在算例1.5上的布局坐标.APSO的结果——序号点后2到3位,可见QPCFA算法在前两个算例上平了记录,后4个算例上取得了更好的结果.图7为QPCFA算法在第2组算例上的布局结果图,表4为QPCFA在算例2.6上的布局坐标.Page9图6算法QPCFA在第1组算例上的布局结果图表3算法QPCFA与IQP[5]在第2组算例上的计算结果比较算例算例2.1(n=7)60.003.6×10-37.7860.00000009.47×10-132.66×10-90.015算例2.2(n=12)215.479.5×10-3444.78215.47005397.21×10-132.92×10-80.391算例2.3(n=15)39.787.6×10-3算例2.4(n=17)49.725.1×10-3157.9249.35901254.20×10-138.51×10-1010.562算例2.5(n=37)135.1766.7×10-3算例2.6(n=50)159.578.0×10-3348.97158.96440002.98×10-135.96×10-9842.906表4QPCFA在算例2.6上的布局坐标序号140.5614260348176-51.63932600708582622.17921279102722-138.50926666247903115.5182602344440-77.244003131431628-2.923770402823732.91336844026424-76.0597694115735591.69497999186466-4.83063535671647-24.3344097324541-136.8171808302380324.5863757049520-34.15230928714258-61.9105969169925-123.104771972849033133.661434897387038.0226943881165999.432917037141710-135.0675918439340-32.6485136441308358.7973161483504-114.40538170213301193.2134223877926-34.97351133274033619.1521852823584137.638287791848012-54.5642474705934-24.00429361006223758.1542631208816-15.715906302624613-130.959260804559014132.7353980953450-41.1390150566750395.7008218883174-74.136781394497715-81.5100422056505109.71147109742304057.5645928501329126.480916020399016-95.3243426519939-101.115647480126041-57.117825855913915.914113640601017-45.456334578463718-11.8352473627850112.34443442662104391.2075503475726104.844109166694019117.293608093225020138.954892744711021-87.3861006602401-46.867494462020546-38.451722572394451.291741998204622-20.51660748891002356.78337455850072484.7880822788126-110.100343191299049-29.5364083609000-55.20697409586502530.6973168128570另外,从表1、3可以看出,除ISS算法在算例1.4上的结果以外,QPCFA算法得到的静不平衡量比上述算法得到的最小静不平衡量还要小1~5个数量级,从而可更好地满足卫星舱内设备的布局要求.R0序号最后,由于各算法运行的硬件环境和算法实现语言不尽相同,如MPSO所用机器的CPU主频为166MHz,内存和编程语言未报道;APSO所用机器的CPU主频为2.0GHz,内存为256MB,算法用Page10图7算法QPCFA在第2组算例上的布局结果图MATLAB编程实现;IQP和ISS所用机器的CPU主频为2.4GHz,内存为512MB,用C语言编程实现;BF所用机器的CPU主频为1.6GHz,内存为1GB,用Java语言编程实现;本文QPCFA算法所用机器的CPU主频为1.9GHz,内存为1GB,用C++语言编程实现.因此,在计算时间上各算法基本在同一数量级上.6结论带平衡约束的圆形Packing问题在理论上属于NP难度,它比一般的圆形Packing问题要更难求解,在实践上具有深远的应用价值,如人造卫星舱、组合机床多轴箱、旋转结构等布局方案设计领域.本文对该问题建立了相应的数学模型,提出了两种新的物理模型,并借鉴人类社会在工艺加工过程中“粗精加工”的经验,将拟物下降过程分为粗调和精调两个阶段,这样既不会在没有前景的坑(即可能达到局部极小值点)内花费过多的时间,又不会错过一个有前景的坑(即极有可能达到全局最小值点).对2组共11个代表性算例的计算结果表明,基于粗精调技术的拟物算法是求解带平衡约束的圆形Packing问题的有效算法.
