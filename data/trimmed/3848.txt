Page1IPv6环境下隧道流量解析安全性增强技术崔宇张宏莉田志宏方滨兴(哈尔滨工业大学计算机网络与信息安全技术研究中心哈尔滨150001)摘要隧道是IPv4向IPv6过渡的主要方式之一,它通过附加外层包头方式解决了IPv4或IPv6孤岛的通信问题.文中对隧道流量进行了分析,指出其具有层次和类型不确定性,提出了广义隧道的概念.研究了网络协议解析设备上传统双栈对广义隧道的解析过程,指出恶意隧道流量会引发隧道干扰和多层分片攻击两类安全问题,并提出隧道流标记和后移重组两个关键技术予以解决.实验表明:隧道流标记代价较小,每层至多增加1%的计算时间,而后移重组平均每层减少7.5%的计算时间,增强了应对恶意隧道流量的能力.关键词IPv6;隧道;安全;双栈;分片重组1引言于IPv4具有更大的地址范围、自动配置、增强的安全性等优势.近几年,随着IPv6技术的发展与成熟,IPv4向IPv6的过渡逐步加快,网络中IPv4、IPv6IPv6为解决IPv4地址空间不足而提出,相对共存的现象也愈加明显,出现了众多的IPv6局域Page2网.而随着ISP逐步普及纯IPv6接入,IPv6局域网最终将与ISP网络连接成为IPv6Internet,从而完成网络迁移.IPv6Internet限于许多问题发展缓慢,因此共存现象将持续相当一段时间.为了在IPv6Internet普及前使IPv6局域网能够在基于IPv4的互联网上通信,研究者们提出了IPv6隧道的概念.其基本方法是将IPv6数据包在IPv6局域网边缘处附加外层包头使其可通过IPv4互联网路由到目的IPv6局域网,之后在目的边缘处去除附加包头,使原始IPv6数据包在目的IPv6网络中继续路由.目前较为典型的IPv6隧道包括公网环境下的6to4、ISATAP和支持NAT的Teredo[1]等.IPv6网络的普及和隧道的广泛使用引入了许多新的安全问题,成为研究热点之一.国内外现有针对IPv6安全的研究主要集中在协议、地址分配、隧道、路由和无线等方面.其中对隧道安全的研究主要集中在隧道边界路由器上,目的是防止非法流量和恶意攻击进出隧道.如文献[2]列举了6to4隧道中存在的安全问题和部署过程中的注意事项.文献[3]对多种常用隧道边界的共有和特有安全问题进行了分析并给出了隧道边界路由器安全配置方案.文献[4]针对Teredo隧道提出了防止伪造数据包进入隧道内部、攻击内部节点的防御策略.关于隧道流量对网络协议解析设备协议栈安全影响的研究较少.隧道分片是隧道安全的另一个重要方面.由于隧道包含多层IP包头,必然会存在多层分片的可能,增加了处理风险和复杂度.有大量相关工作研究了单层分片对协议栈的攻击及其防御方法,如文献[5]讨论了分片攻击对IDS的影响,文献[6]提出了路由器的防御策略.对于多层分片,文献[7]分析了外层、内层分片两种模式对隧道边界性能的影响.LiuXin等人①给出了6over4隧道中外层分片对隧道边界吞吐率的影响,同时也分析了PMTU使用中的安全问题.文献[8]对PMTU机制进行了扩展,优化了分片数据传输效率.文献[9]讨论了隧道边界在两层分片情况下分片长度引发的安全问题.多层分片也会影响网络协议解析设备的安全,但对此尚无相关研究.IPv6流量中隧道流量比重较大,文献[10]指出CESNET2网络中纯IPv6流量仅为隧道流量的31.8%.文献[11]指出BitTorrent网络中,IPv6节点中约85%为隧道地址.并且,根据我们的测量,国内部分主干IPv6路由器上,仅6to4隧道流量已超过整个IPv6流量的49%.隧道流量含有多层包头,必然会增加协议栈的处理时间和复杂度,这对于需要进行深度包检测等工作的网络协议解析设备影响较大,可能会大量降低其上协议栈的分析能力.同时,恶意攻击者还可通过构造特殊的隧道数据包扰乱隧道数据的还原和分片数据的重组过程,干扰协议栈的运行,增加设备的处理开销,给防火墙、入侵检测、流量统计等网络检测设备带来极大的安全威胁.为此,本文详细分析了隧道特点以及检测设备协议栈在处理隧道流量时产生的安全问题及可能的攻击方式,并针对其中的数据干扰和恶意分片问题提出了相应的解决方案.本文第2节分析隧道流特点和解析过程的安全问题;第3节提出隧道流标记技术以解决干扰问题;第4节提出后移重组技术以降低多层分片攻击的影响;第5节通过实验获取两种技术对检测设备协议栈性能的影响;第6节总结全文.2隧道流特点及解析安全性分析6to4、ISATAP和Teredo隧道使用普遍,可称为标准隧道,均含两层IP包头:外层IPv4、内层IPv6.用“in”表示两层包头的包含关系,如6to4、ISATAP隧道可表示为6in4,代表IPv6数据包封装在IPv4中.Teredo采用UDP封装,表示为6inUDPin4的形式.非标准隧道与标准隧道相对,用于表述与标准隧道相异的隧道类型.真实网络中,非标准隧道是广泛存在的.某一骨干路由器的流量检测结果表明,封装在IPv6中的6to4包(6in4in6)和非标准端口的Teredo包(6inUDPin4in6)有一定的出现频率.同时,我们利用国内外的两台服务器搭建了实验环境验证多层隧道的可能性,如图1所示.其中主机A(ClientA)有纯IPv6连接,主机B(ClientB)有纯IPv4连接.为了使两主机可以建立连接,我们在主机B的物理网卡上配置了6to4隧道,使其可以与纯IPv6主机A建立连接(6to4relay是路由决定的,由ISP免费提供),形成了L2层的虚拟连接.为了试验多层隧道在网络中传输的可性能,我们在主机A的物理网卡上增加4in6的虚拟网卡,同时在主机B的6to4虚拟网卡上建立对应的4in6虚拟网卡,如L3层所示,此时两主机可通过虚拟IPv4进行连接.更进一步,在两①PacketFragmentationinIPv6overIPv4Tunnels[EB/OL].Page3主机的4in6网卡上配置对应的虚拟网卡,比如6in4或4in4,两主机依旧可以建立连接.该实验表明,自图1多层隧道实例由此,我们认为隧道具有层次和类型不确定性,并提出广义隧道:包含两个或者两个以上网络层包头的隧道,每层网络层包头为IPv4或IPv6.广义隧道扩大了隧道范围,不仅包含6to4等典型隧道,还涵盖如6in4in4in6等非标准隧道,使用UDP、GRE封装的隧道含有至少两层IP包头也为广义隧道.隧道层次和类型不确定性会增加系统处理复杂度.典型的双栈在IPv4基础上主要针对纯IPv6流量进行了扩展,缺少隧道流量解析的状态维护和安全策略,更无法有效解析广义隧道.为了有效支持广义隧道的解析,协议栈应具有图2所示框架.图2中,过程①~④分别代表4in4、6in6、6in4和4in6关系,过程⑤表示6inUDP(暂省略GRE等隧道).标准隧道如6to4、Teredo只需执行过程③、⑤一次即可.而广义隧道数据包需多次进出Layer3层,如6in4in6需经过过程④和过程③才能完成网络层的解析.网络层的多次解析会引发隧道干扰和多层分片攻击两类安全问题,下面两节对其进行了详细的分析.2.1隧道干扰隧道干扰是指在隧道路径上,某一检测设备进行协议还原时,不同隧道的数据包被混淆为同一个流进行处理而导致的数据混乱.图3给出了隧道干扰的一个实例,其中CD、EF组成两个4in6隧道,分别为AB、PQ提供IPv4私网连接.若A向B且P向Q发送数据包,则M设备检测到数据包的内层IP包头就会一致.在M设备只存储最内层信息的情况行配置的多层隧道流量可以在网络中传输,构成多层隧道流量.下必然会出现数据混淆现象,影响正常分析.正常情况下,上述干扰情况发生的概率不会很高.但由于隧道的不确定性,可能出现纯IPv4/IPv6与二层隧道、多层隧道以及二层隧道和多层隧道间的干扰情况,从而增大干扰概率.更为严重的是,这一特点可被攻击者利用构造特殊数据包对检测设备的数据还原过程进行攻击.以图4所示为例,C、F节点含有正常的IPv6连接,为了干扰M的检测,可以发送外层地址为C、D的隧道数据包.该数据包会被M认为属于C、F流,因此会混淆C、F间的数据,但这些数据包却被转发到D,并不影响F点的数据接收(目的是使混淆包通过M,由于地址层次性,可选与F相近的IPv6地址,不关心D是否实际存在).通过类似的方式即可任意地去混淆M可见的C、F间的数据,且与重叠分片等已知攻击方法联合使用则可加强干扰的效果.Page4隧道干扰对检测设备(M)有3个层面的影响:首先是网络层分片重组,若隧道A第i层与隧道B第j层相同、分片ID等一致,则两个流在该层将被放在同一等待队列中,从而导致数据混淆;其次是传输层,相同的源和目的端口会混乱传输层数据;最后是应用层,因传输层混乱而混乱.可见,隧道干扰引发了检测设备协议栈严重的安全隐患,而产生这种安全问题的根源在于传统双栈在处理隧道流量时只是简单的剥去隧道的外层包头,将最内层包头和非隧道数据包同等对待.当两个隧道数据包最内层相同,或隧道最内层包头与非隧道包相同时,就可能出现干扰情况.相关的一些协议还原工具和网络防火墙也没有针对隧道流进行特殊的处理.如将UDP数据分为两个IPv4分片,并在第2片外附加任意IPv6包头形成4in6隧道包,使用Wireshark(1.6.1)进行分析,发现其对两个分片进行了重组,未能正确识别隧道数据包.对于已知主机或路由器而言,其上正常流量和隧道流量由路由表进行区分,而检测设备不可能含有相应路由表,因此必须采用对流进行标记的方法区分不同隧道.为此本文提出了隧道流标记技术,在第3节中详细介绍.2.2多层分片攻击现有操作系统和网络设备协议栈中,IPv4基本重组框架如图5所示,其中ipq中包含四元组信息,用于分组不同分片,frag记录了同一个IP分片流中各分片的偏移和长度以保证IP数据包完整.每个IP分片首先通过Hash找到对应的ipq链,之后比较四元组定位ipq,再查找frag链表确定位置,数据完整后进行重组.IPv6重组算法和IPv4基本一致,只在Hash算法和ipq四元组比较的时候略有不同,因此IPv6仍会面对IPv4中分片重叠等安全问题[12].对于多层分片,数据包需要逐层重组,即首先重组最外层分片,之后重组第2层,逐步向内直到传输层.毫无疑问,多层分片的重组必然会增加协议栈网络层解析的负载,体现在以下几方面:(1)同等流量下数据包增多.若传输层数据等长,当外层MTU为内层1/4时,内层包可能被分为5个部分(需要增加包头),数据包数目变为内层的图6多层分片重组攻击举例5倍,必然导致系统中断和其它系统调用次数的增加,降低系统的处理速度.(2)小包数量增加.多层分片中,若外层隧道MTU小于内层,则每层封装时均需将内层大包拆成多个小包.因此会产生较多分片,对内存控制有一定压力.(3)需要对每层的包头信息进行维护.否则若只是剥去而不保留包头信息,会引起内层分片重组的混乱.(4)每次分片重组均需要进行多次内存申请、拷贝和释放等操作步骤,处理时间延长.以上4个方面中,第(1)点可通过零拷贝等方式减少中断和系统调用的频率.文献[13]中,表1列出了传统与零拷贝方式在不同包长下PPS和吞吐率的比较结果,指出零拷贝方式在各种长度下均有更好的性能;第(2)点可以根据一些优化的内存分片管理算法来进行优化;第(3)点在2.1节中已经提到;第(4)点可被恶意流量利用进行攻击,也是本节所研究的重点.下面给出一个利用恶意多层分片对协议栈进行攻击的实例,如图6所示.IPv4和IPv6均抽象为IP协议,F1~F4是四层分片包的IP层包头,I1~I4表示不带有分片或者重组后的IP头.Data0表示第一个分片携带的数据,D1~D4表示F1~F4层用于进行重组的数据,Data0较大,而D1~D4较小.传统协议栈中,当处于状态A时,协议栈收到Data0并将其首次插入重组队列,此时F1D1到来,使最外层进入第一次重组过程,之后进入状态B.随后I1F2D2、I1I2F3D3和I1I2I3F4D4的到来分别促Page5使状态从B到C到D最终到E的迁移.状态的每次迁移均会进行一次分片重组,因此若数据包含有k层分片,重组的次数即为k次.其中的安全问题在于,攻击者可先发送一个Data0较大的分片包,而后发送D1~D4较小的分片包,协议栈为重组多层分片必须循环多次的进行缓冲区的开辟、数据的拷贝和缓冲区的释放等操作,极大地增加了计算开销,降低了处理速度.D1~D4的数据量很小,可忽略不计,因此若攻击者使用10Mbps的带宽进行攻击,k层分片则产生了k×10Mbps的攻击流量.同IPv6选项包头一样,隧道的层数只限于路径MTU(PMTU),因此可认为层数范围为PMTU1280,则隧道至少可含有30层IP包头,具有很强的放大作用.若配合已知的其它攻击方式,攻击种类将更加复杂,影响难以估计.为此本文提出了后移重组技术以减轻多层分片对协议栈的影响.这里存在一个假设,即所有包头信息均在第1个分片中.对于第1个分片未含有所有包头的情况,检测设备均会将其归为不正常的数据流并加以关注.如文献[14]以TCP解析为例,指出当数据长度小于某一特定值时即需要对流进行跟踪和分析.这种情况比较复杂,为了简化说明,本文假设所有包头信息均在第1个分片中.3隧道流标记为避免隧道间、隧道与非隧道间的数据干扰和恶意攻击,协议栈需要存储隧道包各层包头信息,通过逐层比较,可正确分组各种流量.然而,对隧道的每层包头均进行记录会有以下两个问题:首先是内存开销,由于网络检测设备不能预测一条隧道中包头的个数,也不能预测每层包头的类型,因此须动态分配和释放内存.同时若每层包头的有效信息全被记录则会占用大量的内存;其次,在处理每层包头时均需比较包头内所有信息,会增加大量的系统开销.因此,本文提出了隧道流标记技术,使用Hash算法逐层计算每层包头的累积Hash值,并与隧道层信息组成该隧道的隧道流标记.隧道流标记中,Hash算法有如下几点考虑:(1)高效性.网络设备的实时性和高吞吐率要求Hash函数必须快速高效.本文在设计算法时借鉴了文献[15]提出的循环移位和异或相结合的Hash算法,其在处理网络流时速度较优,并且循环位移3,4,6个比特的Hash函数生成的伪随机序列随机测度值较大.(2)安全性.两个k层隧道中,若第k层一样,且前k-1层的累积Hash值和隧道层信息一致,则产生了冲突.因此,Hash函数应能对抗冲突碰撞,以在最大程度上防止可能或者恶意的干扰.(3)层次性.包含两点:首先是隧道层次性,当一个数据包含有多个包头时,外层包头的有效性要高于内层包头,尤以最外层包头有效性最高.这是因为越外层包头含有的广域路由信息越强越难伪造,越内层包头含有的局域路由信息越强越易伪造,因此在进行Hash时应突出外层尤其是最外层信息.同时隧道层次性应该有累积特点,即后一层的流标记是由本层信息和外层累积流标记共同标记.其次是IP地址层次性,地址高位的广域路由信息较强不易伪造,而低位地址局域性较强易伪造,且高位地址的伪造引起路由失效的可能性较大,因此高位地址应当具有较大的权重.(4)唯一性.对某一层包头信息进行标记需要取包头中不变的信息使得每次标记的结果一致.包头中源和目的IP(SIP、DIP)不变,作为输入.对于IPv4而言,地址长度32位,源和目的地址高16位用s1,d1表示,低16位用s2,d2表示.根据之前分析,高16位的权重应大于低16位,因此Hash值高16位由s1和d1构成,而低16位由s1,s2,d1,d2共同构成,并且根据文献[15]提供的方法给出IPv4包头的Hash公式(F1),Hash值为32位.在IPv6中,地址长度128位,高64位为网络地址,低64位为子网地址.与IPv4不同,IPv6网络地址是严格地按照层次划分的,因此越是伪造高位地址数据包被丢弃的概率越大.对IPv6地址,仿照IPv4的分割、异或和循环移位方法,使用64位分割,公式如(F2)所示.Page6式(F1)、(F2)用于生成每层32位的Hash值.隧道流标记用64位ufid表示,其中高32位用于存放最外层标记,低32位用于进行累积流标记,从而体现隧道层次性;隧道层信息用16位layer_info表示,高4位存放层数,低12位存放每层类型(0表示IPv4、1表示IPv6),因此最多支持12层隧道.隧道流标记如算法1,其中F代表公式(F1)或(F2).算法1.隧道流标记算法.输入:接收的数据包输出:隧道流标记值1.procedureComufid(Packet×p)2.lnum←layer_info12;3.hash←F(p);4.iflnum=0then5.ufid←(hash32|hash);6.else7.ufid←ufidhash;8.endif9.layer_info←layer_info+112;10.ifpisIPv6then11.layer_info←layerinfo|1lnum;12.endif13.endprocedure协议栈在处理隧道某层包头时,会计算累积ufid和layer_info值,以区分最外层到本层包头的不同隧道流.假设隧道层数为k,当前处于第p层(1<p<k),则累积ufid和layer_info会避免隧道第1~p层干扰的出现,当p=k时,即可认为隧道每层均不会出现干扰,从而保证隧道的安全性.隧道流标记在实际环境中还需考虑以下4方面的情况:(1)需要处理非IP头的隧道,如Teredo中的UDP包头也需要进行隧道流标记;(2)需要替换路由选项中的最终目的IP;(3)IPv6中的流标记(FlowLabel)等未明确字段会产生未知影响,也需进行特殊处理;(4)对于自身维护流表的上层应用也需存储隧道流标记信息,避免出现同协议栈一样的干扰.4后移重组为降低多层分片攻击对协议栈的影响,本文提出了后移重组技术.由图5可知,当IP包完整时,协议栈就将ipq下所有frag重组成原始IP包,释放ipq和frag链,而后处理重组后的数据包.此时若下一层仍为分片,则需按内层分片信息将重组后的数据包插入到新ipq中等待重组.容易发现,frag链均由offset、end和len控制,所以多个连续的小frag和一个合并的大frag均可代表同一数据.因此,若下一层仍是分片,本层就可不进行重组,只将本ipq中frag链转移到下一层ipq中,释放本ipq,这与放入合并后frag的结果相同,但却减少了多次frag释放、一次重组缓冲区申请和一次重组数据的拷贝.若可将第1层重组中的frag链挪到第2层的ipq下,则也可将第2层中的frag链挪到第3层下,直到挪到最内层的ipq中再进行重组,从而避免对frag的多次操作,减少程序的执行时间,这就是后移重组的基本思想.图7所示为两层分片的后移重组策略.其中UFID为累积隧道流标识,LI表示隧道层信息.(a)过程涉及最外层两个数据包,其通过与F1相关的UFID、LI、id、sip、dip和np定位ipq1,Data0形成frag0,D1形成frag1.假设Data0、D1可组成完整IP报文,则传统协议栈会重组该分片,形成过程(b)中的虚线frag0+frag1的形式.而在后移重组中,当步骤A形成完整数据包后,要进行下一层检查,若下一层也为分片数据,则进入过程(b).需要注意一点,F1、F2之间可能存在未分片的包头Fx,需正常解析Fx后继续向内查找.过程(b)中,数据包并未进行重组,而是根据内部包头F2定位ipq2后将frag0和frag1移入ipq2的frag队列中,仅进行了一次比较和指针操作,因此节省了大量的计算时间.过程(c)表示当与F2相关的其它分片到达ipq2后可能出现的情况.由于frag0与frag1可以组成一个完整段,因此D2的位置只能在其两侧,右侧如实线部分,左侧如点划线部分.Page7后移重组算法如算法2、3所示,其忽略了协议的具体实现细节和如Teredo等UDP、GRE隧道的特殊处理.隧道数据包的每层包头均需进行隧道流标记的计算,因此ufid和layer_info在分片处理(frag_reassemble函数)前已计算完毕.算法2.分片数据基本处理流程.输入:接收的数据包输出:重组数据包或后移队列1.procedurefrag_reassemble(Packet×p)2.hashn←hash(p);3.ipq←findipqofpinHashTable[hashn];4.if!ipqthen5.createipq&fillinfo;6.ipq.UFID←ufid;7.ipq.LI←layer_info;8.endif9.insertpintofragmentsofipq;10.ifipqiscompletethen11.ifdelay_resem(ipq)then12.reassembleipqasusual;13.endif14.endif15.endprocedure算法3.后移重组核心算法.输入:待后移frag队列输出:后移之后的frag队列1.proceduredelay_reassem(ipq)2.packet←firstfraginipq;3.next_header←nextIPheaderinpacket;4.whilenext_header!=UDP/TCPdo5.Comufid(packet);6.ifnext_header.fragthen7.break;8.endif9.next_header←nextIPheader;10.endwhile11.ifnext_header=UDP/TCPthen12.return113.endif14.hashn←hash(next_header)15.ipq_new←find/Createipq_newofnext_headerin16.ipq_new.UFID←ufid;17.ipq_new.LI←layer_info;18.movefragsfromipqtoipq_new;19.freeipq;20.return021.endprocedure后移重组挪动外层frag到内层会产生3个影响:(1)IP分片增多会增加内存碎片数量,可能会降低整体性能.但目前大部分IDS/IPS系统均含有内存管理,因此IP分片增多不会明显降低系统性能;(2)外层frag挪动到内层虽然会减少分片重组的次数,但会增加内层分片包头的平均比较次数.假设原始数据被分成t个分片,其中1~m号分片进行最外层重组,m+1~t号分片分别组成每个内层包头,所有数据包顺序到达(相当于图6中最外层数据包由m个分片组成,后续每层1个分片包).因此,对于原始的逐层重组方式,总分片比较次数为m(m+1)(t-m)(m+1+t)数为(t(1+t))减少t-m次分片重组.两者单位不同无法直接比较,因此我们在实验(图10所示)中对该影响进行了测试,结果表明比较次数的增加虽然会降低每层分片的比较速度,但与多次重组过程相比,比较次数增加的代价可以忽略;(3)在分片攻击方面,后移重组只是增加了内层分片个数,因此并不会减轻超大数据、重叠分片、分片空洞等攻击的威胁.同时,若后移重组后产生了大量分片,则极有可能被认为是一种攻击而进行异常处理,因此这种攻击不会对系统造成更深的影响.5实验与性能分析本节对隧道流标记和后移重组两个关键技术进行了测试,评估其性能开销,论证可行性.隧道流标记中,对每个数据包的每个网络层包头进行标记,必然会增加协议栈的计算量和处理时间,由于算法1的时间复杂度为O(1),因此k层隧道具有O(k)的时间复杂度,时间增量正比于隧道层数,线性增加.内存方面,由于并没有复杂的数据结构,只增加了ufid和layer_info两个变量,基本不会增加内存.后移重组中,若k层隧道中有p层分片,则仍需处理k层包头,但分片重组的次数减少p-1次,因此从分片重组的角度而言,时间复杂度由O(p)降低为O(1),大量降低了内存操作次数、效果明显.内存占用上,由于每个ipq存储了本层的累积ufid和layer_info,因此每个ipq会增加10B的空间,总增加量与ipq总数呈线性关系,而ipq总数有限,所以内存占用量增加有限.Page8由上述分析可知,两者对内存的影响较小,因此本章的测试将以时间为标准评估两者对协议栈性能的影响.实验平台为一台8核2.6GHz主频,16GB内存的服务器.采用共享内存的方法,预处理程序将实验用数据包写入共享内存,而后启动协议解析程序进行协议还原.后移重组以隧道流标记为基础,因此实验分为两个阶段,首先测试隧道流标记对协议栈的影响,之后测试后移重组性能.隧道流标记采用表1中的隧道种类进行测试.第1列表示隧道层数,第2列表示含有的包头种类,由于每层包头可能是IPv4或IPv6,因此k层包头含有2k种类型.第3列中4/6表示包头为IPv4或IPv6,44表示两层IPv4包头,46表示外层为IPv4包头内层为IPv6包头,以此类推.层数种类1234164444/4446/…/6664/666653244444/44446/…/66664/66666测试中,每次生成106个UDP隧道包,源和目的IP随机生成,每种类型测试10次,还原流程在处理UDP包头后终止,取时间最小值.图8所示为实验中纯v4和纯v6隧道采用和未采用隧道流标记算法产生的时间差值,隧道类别为4~44444和6~66666.时间增加量表示隧道流标记增加的计算时间,如66对应17.0表示6in6隧道流标记增加了17.0ms的处理时间.可以看出,由于IPv6计算公式复杂,IPv6比IPv4增加了更多的时间.曲线形态表明,无论是IPv4还是IPv6均呈现线性增加的趋势,因此可认为隧道流标记算法增加的时间与隧道层数成正比.表2所示为实验中1~3层隧道上隧道流标记算法时间增加的比例.相对于未使用情况,隧道流标记平均每层IPv4增加0.5%左右的计算时间,IPv6增加1%.表中数据存在一定的波动,尤其是遇到IPv4、IPv6转换的情况,时间线性特点不明显.但整体上,对于1~3层隧道,平均每层最大增加1.32%的计算时间,因此对协议栈的整体性能影响较小.层数类型增加的比例/%每层增加的比例/%1423对于后移重组,按图6所示多层分片攻击实例,分1~5层进行了测试.每次测试使用106个UDP数据包,每个UDP包被拆分为较大包Data0和k个较小包D1~Dk,k为隧道层数,数据包总数为106×(1+k)个.IP、ID随机生成,5次实验种类与数据包数目如表3所示.44/66444/6664444/666644444/666666测试结果如图9所示,其中4条曲线分别代表IPv4、IPv6情况下使用(v4rr/v6rr)和未使用(v4ori/v6ori)后移重组的时间曲线,左上数字表示两种方式与原始比例.在单层包头时,由于后移重组未发生且增加了隧道流标记以及相关判断步骤,计算时间有所增加.Page9从两层隧道开始,由于进行了实质的后移重组,v4rr/v6rr的时间曲线有了明显的降低,44/66隧道仅一次后移重组便减少了17%左右的计算时间,优化效果非常明显.而随着隧道层数的增加,时间节省比例逐渐加大,如5层隧道中4次后移重组减少的时间比例达到30%.通过计算可知,IPv4平均每层减少了7.5%的计算时间,而IPv6平均每层减少了7.3%.从曲线趋势可以看出,随着隧道层数的增多,未使用后移重组的两条曲线v4ori、v6ori斜率逐渐加大(不断地进行重组会引发一定的累积效应),而使用后移重组的两条曲线v4rr、v6rr的斜率保持稳定.两者斜率差值的增大将使得后者与前者的比例逐渐减小,节省更多的计算时间.实验中,后移重组的最内层分片数目最大为6,无法体现分片较多引发的比较次数增加对重组性能的影响,因此我们将图9所示实验中最外层数据包分成了10份(前9个分片预先写入,避免最外层10份数据引起数据包的大量增加),以增加内层包头的比较次数,其它参数一致,图10为比较结果.可以看出,在比较次数较多的情况下,后移重组消耗的时间比例与上一实验相比最多有约5%左右的升高.虽然增加了分片比较次数,但由于减少了1~4次重组过程,与逐层重组方式相比仍具有较大性能优势.综上实验表明,隧道流标记增加了微量的系统处理时间(每层v4为0.5%、v6为1%左右),在解决隧道干扰的基础上付出了很小的代价;而后移重组平均每层减少了7.5%左右的计算时间,且层数越多性能提升效果越明显.同时,内层分片的增多对重组效率影响也较小.6结论IPv4向IPv6的过渡产生了很多问题,其中多种多样的隧道技术严重影响了检测设备协议栈的正常工作.本文指出隧道具有层次和类型不确定性,提出的广义隧道有效地涵盖了各种隧道类型.在检测设备对广义隧道的解析中,隧道干扰是必须解决的问题.本文提出的隧道流标记技术在代价极小的条件下降低了隧道干扰的可能性,同时提出了后移重组技术以减轻多层分片攻击对协议栈的影响,降低利用该方式进行攻击的可能性.实验表明隧道流标记对整体性能影响较小,而后移重组有效地降低了多层分片的重组时间,增强了系统的安全性.本文中部分内容仍需进一步研究.首先,对于隧道流标记Hash算法的冲突问题,文中并没有进行理论的分析,对Hash安全性也没有给出详细说明,可从文献[15]获取深入信息;其次,隧道流标记在实际运用中还需考虑非IP包头的标记,以及与上层应用接口等问题;再次,后移重组中假设第一个多层分片足够长,包含所有分片信息,对于第一个分片数据包未包含所有信息的情况没有做出具体的讨论;最后,若隧道环境下存在翻译技术,虽然检测设备可能收到翻译前或翻译后的数据包,但对于每个数据流而言,由于翻译位置固定,每个IP包头必然相同,因此理论上不受影响,需要相关实验进一步证实.致谢审稿老师给出的评语和修改意见对完善本文起了很大帮助,在此表示感谢!
