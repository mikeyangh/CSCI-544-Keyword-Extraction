Page1云虚拟机资源分配的效用最大化模型师雪霖徐恪(清华大学计算机科学与技术系清华信息科学与技术国家实验室(筹)北京100084)摘要随着云计算和虚拟化技术的发展,为云资源管理提供了一种更高层次的调度选择:一个作业不再只能分配到一台物理机上,而是可将一台或多台物理机的计算资源虚拟化成一台虚拟机来运行该作业.根据作业需要,高效分配定量的物理资源放置虚拟机,是决定云系统性能的关键因素,即云资源调度问题实质就是一个虚拟机和物理机之间的映射问题.文中借鉴网络效用最大化模型,提出了一种云资源调度模型———云效用最大化(CloudUtilityMaximization,CUM)模型,与传统调度模型相比,目标函数不再是最小化最大完工时间,而是以达到效用最大为调度目标,可以充分提高用户的满意程度.通过求解CUM优化问题得到最优的虚拟机和物理机映射关系.设计了针对该模型的分解优化算法———简化次梯度算法求解拉格朗日对偶问题,证明了该算法可以获得原始模型问题的最优解.仿真实验表明算法可行且具有良好的收敛特性,并给出了CUM模型在真实云环境下的应用场景.关键词云计算;资源调度;虚拟机放置;拉格朗日松弛;次梯度算法1引言云计算(CloudComputing)是继并行计算、分布式计算、网格计算后的新型计算模式[1],云可视为集群和网格的组合.云环境中包含着大量分散、异构资源,包括处理器、内存、存储、可视化设备、软件等等.云计算要解决的问题是如何有效安全地管理和共享接入云的各种资源,并提供相应的服务,它强调的是全面的资源共享,全面的应用服务.云计算提出了全互联网范围内共享资源的最高目标,最大限度地充分利用计算/存储资源,是整合全社会高性能计算资源的有效方法.在云环境中,不仅资源的地理位置分布广泛,甚至属于不同的自治系统,而且资源往往具有异构性、动态性,如何有效分配计算资源是决定整个云性能、效率的关键问题.因此,随着云计算技术的日益普及,有效的云资源调度模型和算法将成为高效利用这些资源的关键.由于云计算模式从提出伊始即考虑到其商业实现,所以从经济效用度量的调度模型更具意义.云计算中的资源调度算法多延续网格资源调度,这些传承于20世纪六、七十年代即开始的多处理器、并行机上的作业调度研究,其数学模型是整数规划(integerprogramming)问题,以尽可能短的任务完成时间为调度目标,采用启发式算法求解次优解.随着网格计算和云计算的普及,资源调度越来越多考虑经济效益,在模型中增加了经济度量参数,如机器价格、最迟完工时间等.但是无论是否包含经济效益参数,这些调度模型的解都是0-1变量矩阵,即若作业i分配到机器j上,则xij=1;否则为0.由于云计算普遍采用虚拟化技术,给云用户分配的计算资源,并不是真正独占一台或多台的物理机(PhysicalMachine,PM).以亚马逊EC2平台为例,用户通过付费可以购买“一台”计算服务器若干小时的使用权,但实际上在用户使用过程中,并不是始终独占使用一台真正的物理机,而有可能是一台或者多台物理机提供的虚拟机(VirtualMachine,VM)服务.虚拟化技术是推动云计算发展的重要动力,一台物理机可以实例化多个虚拟机,而多台物理机的剩余计算资源也可以虚拟化成一台虚拟机.随着虚拟化技术的不断发展,可以预计虚拟化本身消耗的计算资源会降低,而且从便于管理和安全性角度考虑,虚拟机方式也会被云服务提供商广泛采用.因此,云计算资源调度可以不使用整数规划模型,而是变成如何将物理机的计算资源按比例分配的优化问题,通过虚拟机技术将这些资源提供给云用户使用.本文提出了一种云资源调度效用最大化模型,描述云计算资源优化问题,从经济学角度分析了该模型的理论意义.此外设计了求解该问题的次梯度优化算法.最后给了模拟实验数据,分析了算法性能.2相关研究工作最基本的多处理器、并行机上的作业调度研究,其数学模型实质是整数规划问题,以尽可能短的任务完成时间为调度目标,目标函数为最大完工时间最小,数学模型为其中变量定义如下:机器;M={1,2,…,m}:表示机器的集合,共有m台J={1,2,…,n}:表示所有作业的集合,共有n个作业;犜:加工时间矩阵(n×m矩阵),矩阵元素tij表示作业i在机器j上的加工时间;目标函数最大完工时间定义如下:该优化问题的目标解为n×m矩阵犡,矩阵元素xij表示作业i是否在机器j上加工,xij∈{0,1},如果加工为1,否则为0.根据目标函数定义,可以将模型(1)整理为如下简化形式:这类整数规划模型,多采用启发式算法来寻找次优解:如经典的Min-min、Max-min、sufferage、Xsufferage等作业调度算法[2]等.网格调度中也多采用此类模型.随着现代优化计算方法的快速发展,禁忌搜索(TabuSearch)、模拟退火(SimulatedPage3Annealing)、遗传算法(GeneticAlgorithm)/进化算法(EvolutionaryAlgorithm)、蚁群优化算法(AntColonyOptimizationAlgorithm)和人工神经网络(ArtificialNeuralNetworks)算法等也被用于网格调度,被很多后续研究加以改进,如文献[3-5].随后也出现了一些考虑经济效益的模型,增加了经济参数,如机器使用价格、作业预算、作业最迟完工时间(deadline)等参数[6-7],这类模型通常形式如下:其中新增的经济参数定义如下:Pj:机器j的价格;Bi:作业i的预算;Di:作业i的最迟完工时间.这类模型在基本平行机调度模型(3)的基础上增加了更多约束条件,也对求解算法提出了更高的要求,解决方法仍然采用遗传算法及衍生算法居多.上述模型研究的都是离线排序(off-linesched-uling)问题,即预先知道作业的全部信息,其中作业在某机器上的加工时间tij需要估计得到.方法如下:估算作业所包含的机器指令条数[8-9],根据不同计算节点的MIPS(每秒可处理的百万条指令数,MillionInstructionspersecond)性能,计算出该作业在该节点上所需要的处理时间.在所有作业进入排序系统前,可以先经过一个预处理环节,估算加工时间.但是这类调度模型都存在如下问题:首先,目标解限定为0-1变量,其实质是线性整数规划问题,从理论上说线性整数规划问题可以转化为一个线性规划问题,但是从计算角度看实现这种转化是相当困难的.其次,针对此类模型多采用启发式算法搜索局部最优解,针对不同的输入条件,算法的收敛速度可能差别较大,很难保证调度效率.随着云计算的不断普及,尤其是虚拟化技术的发展,计算资源的调度可以不再局限于作业是否分配到某台物理机的二元选择限制,而是从效益最大化的角度出发,进行整体计算资源的配置,分配给某个作业的计算资源可以是多台物理机提供的剩余资源.虽然多台物理机并行处理会产生额外开销,但是却使得计算资源的管理更为有效.这样资源调度问题就相当于虚拟机放置问题,如何分配虚拟机和物理节点的映射成为影响云性能的关键,这也是云资源调度的研究热点[10].因此,本文借鉴网络效用最大化(NetworkUtilityMaximization,NUM)模型,提出了一种云资源调度效用最大化模型,简称为云效用最大化(CloudUtilityMaximization,CUM)模型.近年来,NUM模型成为计算机网络体系架构和协议的重要研究方向.文献[11]最先提出了NUM模型,文献[12]给出了针对NUM模型常用的优化分解方法和分布式算法.基本的NUM模型可表示成如下形式[13]:其中,犚为路由矩阵(routingmatrix);向量犮为各链路最大的传输带宽;Us为第s个服务的效用函数,通常效用函数是一个光滑、递增的凹函数,并且只依赖于该服务所获得的网络带宽xs;问题的目标解向量狓,每个分量xs表示为第s个服务所分配的网络带宽.NUM优化问题往往是凸规划,可以获得全局最优解.通过反向工程分析,已经证实了按照一些效用函数进行网络带宽分配,可以保证不同的公平策略要求.考虑到云计算经济化、市场化的发展趋势,云环境中的计算资源可以参照网络带宽分配策略.有学者认为计算资源将成为继水、电、气、电信之后的第五大公共基础设施(utility)[1],越来越多的用户会直接租用计算资源而不再自己购买硬件.因此,未来的云可能会象目前的Internet网络一样,同时会有很多并发请求.如何像网络一样,将有限的资源分配给多个等待的作业,保证总效用最大才是调度的关键.而虚拟化技术也使得将所有计算资源统一度量分配成为可能,可以不考虑物理硬件的异构和限制,而是采用统一的描述框架量化所有的物理资源,在效益最大化的目标下进行整体分配,这将是进行云资源调度的一个有效方法.基于效用最大化来调度云资源也开始被逐渐采用,在文献[14]中提出了云环境中内容提供商如何分发服务的方法,但不属于作业和资源调度层面的问题.文献[15]提出了一种云资源管理方法,模型的Page4目标是使云效用最大,不过最终构造的仍然是NP-Hard问题.本文将NUM模型的效用函数、分解算法加以改进,用在云计算资源调度中.3云效用最大化模型在NUM模型中,网络资源一般采用带宽作单位,不同类型的网络传输介质,采用带宽这个单位可以统一衡量.网络用户发起的一个网络服务可以使用多条网络路径,一条网络路径上也可以承载多个服务.参照网络资源模型,本节首先提出了云资源描述框架,使异构的云计算资源能用单一量化标准计量,便于统一调度.其次介绍了CUM模型及其效用函数的定义.3.1云资源描述框架与传统的并行机调度不同,在云环境下,采用虚拟机技术,可以利用多台物理机(PM)的剩余计算资源实例化成一台虚拟机(VM),云资源调度问题就可以简化成:如何分配物理机资源以达到效用最大化.因此可以用图1来表示云资源物理机和虚拟机的框架结构.理想的云计算系统中地理位置分散的、异构的物理机都可以统一调度.用户通过云portal提交作业,资源调度器根据调度策略,决定如何为作业分配物理资源,通过虚拟机监控器(VMMonitor)把相应的物理资源映射为虚拟机.如同计算机网络环境下,不同拓扑路径都可以用统一的带宽来衡量.在云计算中,一般衡量计算资源主要考查CPU、内存、I/O等,但由于调度性能的限制,常见的调度算法只考虑一个CPU维度,少量工作能扩展到CPU、内存两个维度[11].在本文提出的云资源描述框架下,可以不必关心物理机的差异,而是为所有计算资源制定统一的衡量方式.这也符合目前一些云服务提供商的经营模式,例如按CPU小时计费等.在本文的云资源描述中,做如下假设:首先只考虑作业对CPU的占用,假设内存和I/O足够;其次所有物理机(PM)的计算能力采用同一标准度量,即MIPS.在实际应用环境下,还可以根据需要设定别的衡量方式,如可用CPU机时,或是CPU和内存的混合限制.因此,云资源可以用集合{C1,…,Cj,…,Cm}表示,集合中的每个元素Cj表示物理机j的最大计算能力,单位为MIPS.3.2CUM模型在上述云资源描述框架下,可以将云资源调度问题用如下CUM模型表示(设有n个作业,m台物理机):其中,Cj表示某物理机j的最大计算能力,单位为MIPS;Ii表示作业i的计算量,作业所包含的机器指令条数,单位MI(百万条指令数),可估算得到;Di表示作业i的最迟完工时间,从提交作业到作业完成所能允许的最长时间,单位s(秒).为了便于表示,引入中间变量yi,表示分配给作业i的所有计算资源总和,即yi=∑jMIPS.∑i合,必须小于等于该物理机j的最大计算能力Cj.约束条件Ii总和必须能使得作业在最迟完工时间前完成.为了便于处理,将该约束条件变形为目标函数为所有作业(即所有云用户)的效用函数Ui(yi)最大,选取不同的效用函数可以实现不同的公平控制策略,在下一小节中将介绍效用函数选择.Page5显然,CUM模型要求所有输入参数必须满足如下条件:即当所有作业要求的计算资源超出物理机总计算能力的情况不在模型考虑范围内.在模型(6)中,目标解为矩阵犡,矩阵中每个元素xij的含义为每个物理机分给每个作业的计算资源,不局限为0-1变量,与传统调度模型(3)、(4)相比,不再是整数规划问题.传统的调度模型,一个作业只能分给一台机器,要求目标解必须是0-1矩阵.而本文提出的CUM模型目标是找出物理机分配多少比例的计算资源给某个作业,一个作业可以通过虚拟机技术同时使用多个物理机的资源,而且并不独占,物理机剩余的计算资源可以分给其它作业.模型(6)没有考虑虚拟化技术、并行通信所造成的额外CPU消耗.通常作业分配到越多的物理机上执行额外开销就越大,但这个约束条件难以确定描述.此外虚拟机技术虽然带来额外开销,但是可以给云用户提供不同的操作系统环境,安全性也更有保证,随着虚拟机技术的普遍应用,这些额外开销可以视为固定成本,在云资源调度中可以不单独计算.此外模型(6)中没有考虑作业到达时间,也不考虑排队,而是针对现有作业,如何将所有的PM资源划分成不同VM分给不同的作业.在传统并行机、网格调度中都是要考虑作业到达时间,而且都是有排队情形,作业排队优先级不同.本文CUM模型中没体现时间因素,因为在常见的网络NUM模型中,也只考虑当前发起的网络请求如何共享带宽,也没考虑时间问题.网络一般都是满载的,现有的应用能合理分配带宽避免拥塞即可.随着云计算的普及,云计算资源的分配也会向网络分配带宽一样,针对现有作业合理分配计算资源.而且考虑到与网络的不同,本文模型还是考虑了部分时间因素:作业的最迟完工时间,要保证分配给作业足够计算资源以便在最迟完工时间前完成.3.3效用函数效用函数描述了用户对于所获得的某种服务在一定衡量单位下的满意度[16].以NUM模型为例,效用函数是所获得的网络带宽的单调递增函数,一般采用如下效用函数:其中,x表示用户获得的服务;w为用户获得该服务而愿意提供的支付(willingness-to-pay).通过计算机网络反向工程分析结果证实,当α=1时,效用函数U(x)=wlogx也称为对数函数,对数效用函数可以实现竞争网络资源的各用户之间的比例公平性(proportionalfair);当α>1时,效用函数U(x)=w(1-α)-1x1-α也称为负指数函数,可提供α-公平性(α-fair).对数效用函数被广泛用于有线网络和无线网络的网络资源分配算法中,传统的TCP协议实际达成的带宽分配恰恰符合的是w=1的对数效用函数.对数效用函数在[0,+)区间内的曲线如图2所示.如图2所示,对数效用函数为单调递增的凹函数(concavefunction),且增长速度趋于平缓,即在区间内任意点x0处的一阶导数大于0,二阶导数小于0,这也是经济学中选取效用函数的基本要求.为了便于描述,给出如下条件.引理1.效用函数选取条件:如果函数U(x)在自变量约束区间内任意点x0处的一阶导数U(x0)>0,二阶导数U(x0)<0,则可表示在某种情况下用户对获得某种服务的满意度.本文目前的工作只选定对数效用函数进行实验模拟.CUM模型本身不局限于特定的效用函数,只要引理1的函数均可使用.选择不同的效用函数,可以实现不同目标的资源调度策略.在后续的工作中将对不同效用函数产生的结果进行比较.3.4模型最优性条件已知效用函数Ui(yi)=wilog(yi)为递增的凹函数,则式(5)描述的CUM模型的目标函数也是凹函数.现考察其约束域情况,式(5)中显式约束条件有两个,∑iPage6化为如下形式:其中,约束条件(c2)表示为作业i分配的资源要足够保证作业能在最迟完工时间前完工,实际只要不晚于最迟完工时间即可.因此,在不影响最优解的前提下,可以将约束条件(c2)写成:即CUM模型的显式约束条件可表示为如下线性不等式和等式集合:该集合定义了一个多面体,是一个典型的凸集.图3以5台物理机、5个作业(m=5,n=5)为例,给出了CUM模型解空间.如上所述,目标函数为单调递增凹函数,约束域是凸集,则CUM优化问题是一个凸规划问题(convexoptimization),存在最优解.4优化算法本节将通过拉格朗日分解方法简化模型,设计次梯度求解算法.拉格朗日松弛算法是20世纪70年代被提出来的[17-18],该算法主要包括以下几个要点:松弛约束的选择、拉格朗日算子的调整和可行解的构造等.次梯度算法是处理拉格朗日对偶函数的有效方法[19-20].4.1拉格朗日松弛拉格朗日函数:L(狓,y;λ,μ)=∑n用拉格朗日因子松弛原问题的优化条件,得到其中,λj0,μi0为拉格朗日因子;δj0,γi0为松弛变量.从实际经济含义考虑,拉格朗日因子λj可以看作物理机为提供单位计算资源而收取的价格,μi可以看作提前完成作业的奖励价格(同时也是无法在最迟完工时间前完成作业的惩罚价格).松弛变量δj表示物理机j剩余的计算能力,松弛变量γi表示作业i提前完工的时间(即最迟完工时间和实际完工时间的差值).因为从效益上来讲,每个作业应尽可能获得更多的计算资源,因此可令松弛变量δj为0.为了简化优化问题,只需要尽量保证作业在最迟完工时间时执行完毕,不必考虑提前完成,因此可令松弛变量γi为0.将式(7)整理后如下:L(狓;λ,μ)=∑n为了简化问题,再不影响CUM模型含义的情况下,将对数效用函数简化,代入式(9),得到L(狓;λ,μ)=∑n式(10)为最终得到的拉格朗日函数,记作L.由此可得原问题的对偶问题,记作LD.针对对偶问题LD,设计了优化算法求解目标解.4.2简化次梯度算法次梯度优化算法(SubgradientOptimizationAlgorithm)通过求解对偶问题而逐步逼近原问题.次梯度算法是求解不可微优化问题的最常用方法[21].在每次迭代中更新拉格朗日因子狌:其中,s(k)为迭代步长;犵(k)为第k次迭代中L(k)的次梯度,即迭代的下降方向.针对CUM模型,本文设计了一种简化的次梯度算法,称为CUM简化次梯度算法.主要思想是简化每一步对下降方向的求解,以拉格朗日因子的导数作为次梯度犵.个分量λj和μi均可微,因此令在式(10)中,拉格朗日因子狌=[λ,μ]T,其中每Page7熿犵=燀即次梯度犵为m+n维矢量.完整的CUM简化次梯度算法描述如下.算法1.CUM简化次梯度算法.输入:m台物理机计算资源集合C={C1,…Cj,…,Cm},n个作业愿意提供的支付集合W={w1,…,wi,…,wn},n个作业的计算量集合I={I1,…,Ii,…,In},n个作业的最迟完工时间集合D={D1,…,Di,…,Dn}输出:目标解矩阵犡(n×m矩阵)算法步骤:1.设定初始点———犡(1)为全零矩阵,即任意元素xij=0,λ(1)=[1,1,…]T,μ(1)=[w1,w2,…,wn]T,允许误差ε>0,置k=1.2.计算次梯度犵(k).3.将λ(k)和μ(k)代入拉格朗日函数L,令L程组,得到第k次迭代目标解犡(k).4.若‖犵(k)‖ε,则停止迭代;否则求步长s(k),令其中,珚L为拉格朗日对偶问题的估计最优目标值,采用估计值;若计算出的步长s(k)0,则继续采用上一次步长,即s(k)=s(k-1).k=k+1,转步2.5.利用式(11)更新拉格朗日算子,求λ(k+1)和μ(k+1),可以根据需要设置允许误差ε,获得不同精度的最优解.算法中使用的估计最优目标值珚L可以通过启发式搜索算法估算,或者直接使用Matlab、LINGO等软件计算得到.文献[21]从理论上分析了估计值珚L的偏差对计算结果产生的影响.在CUM简化梯度算法中,通过步4的调整,减少了这种偏差对结果的影响.4.3算法收敛性假设狌为拉格朗日对偶问题的最优解,L为此时拉格朗日函数值.在CUM简化次梯度算法中,第k+1次迭代得到的拉格朗日因子狌(k+1)必定比第k次迭代的狌(k)更逼近狌,即证明如下:‖狌-狌(k+1)‖2=‖狌-狌(k)-s(k)犵(k)‖2=‖狌-狌(k)‖2-2s(k)犵(k)(狌-狌(k))+(s(k))2‖犵(k)‖2=‖狌-狌(k)‖2-s(k)(2犵(k)(狌-狌(k))-s(k)‖犵(k)‖2).根据求步长公式,可得‖狌-狌(k+1)‖2=‖狌-狌(k)‖2-s(k)(2犵(k)(狌-狌(k))-(L-L(k))).根据拉格朗日对偶函数的性质,可知,所以,则可得-s(k)(-2犵(k)(狌-狌(k))+L-L(k))<0,式(13)得证,因此CUM简化次梯度算法是收敛的.5实验和分析为了验证CUM简化次梯度算法的可行性和收敛性能,本节给出仿真计算结果,并分析了算法复杂性.最后给出CUM模型在真实云环境下的应用场景.5.1仿真结果随机生成物理机和作业相关参数,作为算法输入,以模拟不同规模的云资源调度情况.生成的随机数满足如下条件:即所有物理机计算能力总和(单位:MIPS)所有作业的计算量(单位:MI)与最迟完工时间(单位:s)商之和.实验运行硬件环境:一台PC机,CPU主频2.4GHz,内存4GB.首先,为了验证算法的可行性,设计了一组规模较小的输入参数(3个作业,3台物理机),这样规模较小的问题,Matlab的fmincon函数可算出较好结果,以便和本文算法比较,该类模拟问题记作P(3,3).指定输入参数如下:有3台物理机,计算资源分别为C={1,2,3};有3个作业:W={1,2,3},I={3,2,1},D={3,2,1}.此时构造了问题P(3,3)的一个实例,记作P1(3,3).表1给出了针对P1(3,3),本文算法和Matlab的计算结果.Page8表1本文算法所得解与fmincon比较x11x12x13y1x21x22x23y2x31x32x33y3∑i本文算法0.23330.33330.43330.99990.56670.66670.76672.00010.20001.00001.80003.00004.6820fmincon0.09010.28870.62211.00090.28830.68901.02241.99970.62161.02231.35562.99954.6821表3给出了问题P(10,5)的4个实例的计算从表1中可以看出,对于问题P1(3,3),使用本文算法得到的最优解矩阵犡和Matlab的fmincon函数结果虽然不尽相同,但是目标函数值基本相同,证明了本文算法的正确性.为了验证算法的收敛性,将问题规模扩大,构造的问题记作P(n,m),其中n表示作业数,m表示物理机数.分别构造3类规模的问题:P(5,10)、P(10,5)、P(50,50).3类问题的输入参数:物理机计算能力Cj、作业愿意提供的支付wi、作业计算量Ii、最迟完工时间Di,均采用符合均匀分布的随机数,如果生成的随机数不满足式(13)的条件,则重新生成.对上述3类模拟问题,主要分析算法的迭代次数.每类问题随机生成4组输入参数,即构造出问题的4个实例,比较迭代次数.表2给出了问题P(5,10)的4个实例的计算结果.迭代次数1017.51514.39013.5759.4682018.15315.39813.97210.1583018.27415.918-10.47240----P(5,10)规模下构造的4个子问题,其迭代收敛情况如图4所示.结果.迭代次数1063.95969.39077.97263.0682064.15370.91878.75864.2693065.47771.85879.03865.8284066.82772.13380.25466.5935067.01373.25481.44267.3977567.886---100----图5为对应的收敛曲线图.表4给出了问题P(50,50)的4个实例的计算结果.迭代次数10520.876408.879653.869718.98320548.021439.203681.021742.38730579.954471.936714.763770.86540593.286506.147748.011791.01250602.011521.978769.613813.43275616.947529.743778.864819.165100620.842533.879781.276822.034125623.431535.327784.012824.986150625.017536.414785.873825.484175626.525-786.352-200----图6为对应的收敛曲线图.Page9通过上述3组数据可以看出,不同规模、不同输入的问题,在有限次迭代后均得到了最优解.同一规模的问题虽然迭代次数略有差别,但是总体相差不大.此外为了考察更大规模问题下算法的收敛性,分别构造了小规模、中规模、大规模3类输入参数,比较求解时的迭代次数,实验结果如表5所示.问题规模作业数物理机数迭代次数小规模中规模大规模1000200由表5数据可见,当问题规模增加时,迭代次数仍然在可接受范围内.图7给出了问题规模和迭代次数的关系曲面图.通过理论证明和实验数据可得出,CUM简化次梯度算法属于线性时间算法,对于规模为m个作业、n个物理机的输入问题P(m,n),通过有限k次迭代可获得最优解,算法时间复杂度为O(mn).5.2应用场景给出了其应用模式.CUM模型可应用于规模较大的云环境中,图8图8中,CUM全局调度管理器(CUMscheduler)实时接收虚拟机监控器(VMMonitor)发来的计算资源使用情况,根据作业、剩余资源确定效用最大化的虚拟机放置策略,创建虚拟机,将作业分配到虚拟机上执行.与传统的集群、网格计算环境中采用的作业调度管理器(scheduler)相比,CUMscheduler首先确定虚拟机放置策略,即多少物理计算资源实例化成一个虚拟机,然后将作业分配到虚拟机上执行.在真实云环境中,可在CUMscheduler前端增加作业预处理模块,通过用户竞价、用户选择偏好来划分作业层次,由高至低排列,设置高低不同的愿意提供的支付值wi.经过分级后的作业提交给CUMscheduler,进行调度.CUM模型以效用最大化作为优化目标,这种优化方式在计算机网络带宽分配中取得了很好的效果.计算机网络承载的业务往往具有如下特点:某一时刻往往很多业务同时到达请求服务,业务对服务质量的要求差距大,高峰期网络资源基本满负荷.因此当云计算不断发展,用户对计算资源的需求如同对网络需求一样普遍时,CUM模型的调度优势更为明显.6结论本文提出的云资源CUM调度模型,和以往0-1整数规划的调度方法不同,利用计算机网络中NUM模型思路,实现了对物理机计算资源的更高层次分配:以效用最大为调度目标,一台或多台物理机资源如同网络链路的带宽一样,通过虚拟化技术分配给一个或多个作业.此外给出了该模型的优化算法,通过简化的次梯度算法求解该模型的拉格朗日对偶问题.通过模拟实验表明,算法具有可行性和Page10较好的收敛性.下一步将探索不同的效用函数对虚拟机资源调度效益的影响.此外,将云计算资源从单纯的CPU计算能力度量方式扩展成多种资源(包括内存、I/O、磁盘存储等)共同约束,即将云资源的描述从一维发展到多维.
