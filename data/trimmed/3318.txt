Page1一种用户为中心、基于多视图合成的服务组合方法丁维龙1),2),3)王菁1)赵栓1),2)1)(中国科学院计算技术研究所软件集成与服务计算中心北京100190)2)(中国科学院研究生院北京100190)3)(武汉大学软件工程国家重点实验室武汉430072)摘要用户为中心的服务组合旨在直接地反映用户需求、提高建模灵活性和降低应用构建成本.然而,当前的用户编程方法仍然存在挑战:一方面传统方法以服务为基本元素,忽视了应用背后的业务数据,用户难以从熟知的业务数据角度表达建模需求;另一方面传统方法以控制流为中心,需要精确描述组合细节,非专业的用户不易理解和操作且难以表达业务约束.文中提出一种用户为中心、基于多视图合成的服务组合方法,通过体征数据模型显式建模业务数据,将服务组合的需求转化为在多个视图编程操作;并给出一种候选流程的构造算法,参照用户的视图操作合成服务组合流程.案例和实验分析表明,文中方法可降低用户构造服务组合的复杂性并提高建模的效率.关键词用户为中心;多视图合成;服务组合;编程方法1引言随着互联网技术的不断进步和服务计算的深入发展,跨地域、跨机构和跨平台的业务协作成为可能.当前,在诸如科研实验、医疗诊治、城市应急、网络化制造等领域中,由于环境和业务需求的动态变化,使得业务流程难以预先定义完备,应用的构造模式已经逐步从传统的以技术为中心由专业人员事先编制,向以用户为中心、按需临机定制转变[1].以用户为中心的服务组合[2-3]旨在直接地反映用户需求、提高建模准确性和降低应用构建成本,为用户临机地构建业务流程创造了条件.但是当前的研究工作仍然面临着挑战.首先,在编程元素方面,为用户提供易于理解使用的业务级编程元素存在挑战.服务具有跨平台、跨编程语言等特点,更易于实现集成.然而,以服务为基本编程元素的服务组合构造方法,用户需要指定参与组合的每个服务、设定服务的输入参数值以及建立不同服务之间的输入输出参数关联,使得缺乏IT知识和经验的用户仍然难以理解和操作.究其原因,这类编程方法忽视了服务背后的业务数据[4],而这正是熟悉领域知识的业务用户在问题求解过程中更为关注的.例如在城市应急中,应急指挥人员需要随时关注受灾点的物资需求量和各备灾部门物资供应量,优化调配物资;又如在精准农业生产中,种植人员需要观察大棚的温度、湿度等实时数据,制定合理的种植方案.上述需求表明,需要为用户提供一种能反映业务数据的新型编程元素,易于用户观察业务数据,并从业务数据的角度表达建模需求.其次,在编程方式方面,为用户提供易用的编程视图存在挑战.传统服务组合方法往往是以控制流为中心[5]的命令式编程范型,需要用户精确定义构造的细节,对用户专业水平要求较高[6-7].熟悉业务知识的用户往往习惯通过描述业务约束表达业务需求,如定义约束描述应急物资的期望数量和相关服务的调度方式等.这类声明式编程范型[7-10],显式地表达目标,隐式地描述逻辑.传统命令式范型适合精确表达已经确定的服务组合逻辑;声明式范型适合表达不确定的服务组合逻辑,通过约束描述需求提升了建模的灵活性.当前研究的一个趋势是综合利用这两种范型进行编程[6-7,10-11],从不同侧面协同构建应用.为了支持用户临机构造服务组合,需要为用户提供不同的编程视角,支持用户灵活的表达业务约束.针对上述挑战,本文提出一种以用户为中心、基于多视图合成的服务组合方法.该方法包含一种多视图的服务组合模型、一组视图中的建模操作和辅助用户临机决策的一种候选流程构造算法.首先,针对编程元素的挑战,本文将领域中的服务按照所反映的体征数据抽象为数据对象,用户可以通过操作数据对象描述建模需求.其次,针对编程方式的挑战,本文从数据对象的属性和操作声明业务约束的视角,为用户提供数据视图和行为视图;从服务组合控制流逻辑的视角,为用户提供流程视图.针对多视图合成的服务组合,本文给出一种候选流程的构造算法,参照用户声明的约束,用户主导、探索式地构建服务组合.案例和实验的定量与定性分析表明,该方法降低了最终用户构造应用的复杂程度,提高了建模的效率与灵活性.本文在第2节介绍多视图的服务组合模型;第3节阐述基于多视图的应用合成过程;第4节通过案例、实验和相关工作比较,定量和定性地分析本文工作;最后在第5节给出全文的总结.2多视图服务组合模型本节围绕业务过程中的体征数据,定义了多视图的服务组合模型,其中包含数据视图、行为视图和流程视图.2.1体征数据在构建服务组合的临机决策中,用户往往关注和参考那些能够反映业务过程整体性能或业务指标的关键数据[12],本文称这一类业务数据为体征数据.体征数据不一定体现为流程活动的输入输出数据,还可能是流程运行时的中间数据和通过用户自定义公式计算的数据.例如,在城市应急中,相比应急事件的处理细节,指挥人员更关心当前应急物资的分布和与事件处理相关的辅助决策信息等.体征数据的结构可以是复杂的,本文针对一类简单的数值型体征数据,抽象了数据模板和数据对象.定义1.数据模板和数据对象.数据模板Da-ta_temp=〈tId,Ats,Ops〉,封装了业务领域中的一类体征数据,包含属性集Ats和操作集Ops,由tId唯一标识.a∈Ats,属性a是数值类型(整型、浮点型和实数型等),且opget∈Ops,操作opget获得属性a的数据值.op∈Ops,op=〈I,O,P,E〉,其中I,O分别描述操作op的输入输出参数,P,E分别描述Page3操作op的前提和效果.操作集op形式上是函数的接口.数据模板的实例被称为数据对象.数据对象Data_obj=〈objId,tId,Mapatr,Mapop〉,由objId标识的数据对象是tId标识的数据模板的实现.其中,Mapatr是属性名称与数值的映射,Mapop是操作名称与操作实现的映射.a∈Data_temp(tId)Atrs,Mapatr(a)∈Data_obj(objld)为属性a的值;op∈Data_temp(tId)Ops,Mapop(op)∈Data_obj(Objld)为操作的实现,而且操作可由服务实现.图1给出了数据模板和数据对象的示意.领域专家定义数据模板和数据对象,作为业务资产在领域中维护.本文假设数据对象的操作都可以映射至服务,而且是唯一的服务.另一方面假设业务过程中使用的服务均可与数据对象的操作映射.关于数据对象的建模和实现,本文不再过多地讨论,详细可以参考我们团队的相关工作.体征数据的抽象由于采用了用户熟知的业务知识,同时借鉴了面向对象的设计思想,易于一般的业务用户理解和使用.2.2服务组合模型业务流程建模的最基本的问题是,如何让用户以直观、简洁的方式编程,并且能够尽可能自动化地辅助用户,故为用户提供不同的应用视图是十分重要的[4].控制流相关的视图固然重要,但用户难以从单一的视角理解整个应用;同时基于业务约束构建的服务组合更能适应业务的动态变化[13],尤其适用于描述业务过程中不能事先确定的部分.约束是利用若干法则或限制条件来规定构成实体的元素之间的关系,包括数据约束和行为约束等.业务约束涉及应用运作的各个阶段[13],可以用于控制和管理服务组合[6,14],其中数据约束体现在描述数据属性之间的依赖关系,行为约束[1,8-9,11,15]则描述了服务在应用中的使用模式.本文给出的模型,提供了服务组合的多个视图:从构建和执行流程的控制流逻辑的视角,给出了流程视图;从声明业务约束描述应用的视角,为用户提供数据视图和行为视图,分别面向数据对象的属性和操作的约束.定义2.多视图的服务组合模型.多视图的服务组合模型Muv=〈Vp,Va,Vo,Ss,So〉.其中,Ss是服务集合,So是定义1所述的数据对象的集合,Va,Vo,Vp分别是服务组合应用的数据视图、行为视图和流程视图.通过如图2所示的多视图服务组合模型,用户可以描述服务组合的建模需求.其中,Ss和So是参与应用的服务和数据对象的集合,由领域专家事先构造;模型的3个视图,描述应用的不同侧面,协同建模服务组合.流程视图和数据视图,面向数据对象,分别针对数据对象的属性和操作,以声明式编程的方式分别定义数据约束和行为约束.流程视图以流程活动为编程元素,针对控制流逻辑,以命令式编程的方式构建流程中确定的结构;流程中不确定的结构,是系统参照数据视图和行为视图声明的约束,由系统半自动合成的.在本文中,我们把流程中事先确定的、以命令式编程定义的流程描述称为应用的预制逻辑.把流程中事先不确定的、用户临机基于多视图合成的流程描述称为应用的临机逻辑.2.3视图定义组合的控制流逻辑.Vp=〈S,T,Ac,Ap〉,其中:多个视图的定义将在下文逐一给出.定义3.流程视图.流程视图Vp描述了服务Page4S={s|s∈MuvSs}是流程的服务型活动的集合,是模型中服务集合的子集.Ac=ST∪ED∪AS∪AJ∪CS∪CJ,是流程的控制活动的集合:ST,ED分别是开始和结束型活动;AS,AJ分别是并发分支和并发汇合型活动的集合,CS,CJ分别是条件分支和条件汇合型活动的集合.Ap是流程中的目标活动的集合.目标活动是流程结构中的一种占位符,可以在构造时不必指定具体的实现,在运行时动态确定控制逻辑.目标活动可以灵活实现服务组合中不能事先确定的部分.T(S∪Ac∪Ap)×(S∪Ac∪Ap)是流程活动连接,表达了流程中控制流的传递.在流程视图中,由预制逻辑和临机逻辑组成的控制流,体现基于Muv模型的服务组合是一种探索式的构建过程[1,10].预制逻辑由服务、控制活动、目标活动和活动连接组成,其构建过程本文不做详细讨论.临机逻辑是目标活动的实现,由服务、控制活动和活动连接组成,作为预制逻辑流程结构的子流程.数据视图和行为视图是用户针对临机逻辑的编程界面,用户面向数据对象声明式的编程.声明式编程范型相比命令式范型,更接近用户的思维习惯,能够支持业务约束,提供了更高的灵活性[11].本文关注的数据约束和行为约束,由用户分别在数据视图和行为视图中声明.定义4.数据视图.数据视图Va描述服务组合临机逻辑的数据,表现为用户针对数据对象的属性声明的数据约束集合.Va=〈Oa,Ca〉,其中Oa={a|a∈Data_objAts,Data_obj∈MuvSo}是数据对象的属性的集合;Ca=Ga∪Ra是属性的数据约束集合,包含目标约束集合Ga和值约束集合Ra.目标约束集Ga(Max∪Min)×W,其中,Max={Max(a)|a∈VaOa}和Min={Min(a)|a∈VaOa}分别是对属性a的取最大、最小值的约束;W是约束的权值;值约束Ra={a=v|a∈VaOa,v为常数}是属性a取值的约束.以城市应急为例,调度指挥人员关注受灾地A血浆相关的体征数据,可以在数据视图中使用血浆这一数据对象编排应急流程中的数据约束.假设受灾地和5个救助部门依据数据模板PLASMA提供各自的血浆数据对象plasma(A),plasma(Ai),i=1,2,…,5.其中对象中的属性有mount,cost分别表示库存血浆数量和供应成本.假设供应成本是与血浆供应数量相关的函数,则在数据视图中,用户使用这5个救助组织的数据对象,可以声明如下的数据约束.约束表达了指挥调度人员针对各个救助部门有限的血浆资源,希望能以尽可能少的供给成本(目标约束),调度足够的血浆满足受灾地的要求(值约束).定义5.行为视图.行为视图Vo描述服务组合临机逻辑的数据操作模式,表现为用户针对数据对象的操作声明的行为约束集合.Vo=〈Oop,Co〉,其中Oop={o|o∈Data_objOps,Data_obj∈MuvSo,Data_objMapop(o)∈MuvSs},是数据对象中操作的集合,操作映射至模型中的服务;Co=Ep∪Sp∪Xp是针对操作的行为约束集合,包含存在约束Ep、顺序约束Sp和选择约束Xp,分别从操作的使用次数、顺序和选择方式三方面限制数据对象的操作及操作之间必须满足的行为模式.这三类行为约束定义如下.存在约束Ep={c|c=existence(o,up,low),o∈Op},规定了操作o的使用次数的限制,整型参数up,low分别表示使用次数的上下限,0lowup.顺序约束Sp=res∪pre∪co∪alt.其中,res={c|c=response(o1,o2,alt,dir)}规定了操作o1执行后操作o2才会执行,布尔型参数alt表示每一个o1后是否一定有o2;布尔型参数dir表示o2是否是o1的直接后继.pre={c|c=precedence(o1,o2,alt,dir)}规定了在操作o2执行前有操作o1的执行,布尔型参数alt表示每一个o2前是否一定会有o1;布尔型参数dir表示o1是否是o2的直接前驱.co={c|c=coexist(o1,o2)}规定了操作o1的执行意味着o2已经执行或将来一定执行,反之亦然.alt={c|c=alternate(o1,o2)}约束了操作o1和o2是不能互为前驱后继的.选择约束Xp={c|c=choice(ops,n,exc)}规定了集合ops中的操作被选择执行的方式.整型参数n表示在ops中选择操作的数量,布尔型参数exc表示选择是否是排他性的.在行为视图中,用户可以使用上述3类行为约束,表达数据对象操作的需求.本文定义的行为约束,参考了ConDec[7-8,11]中的约束模板的定义,可以将用户声明的约束等价地转化为线性时态逻辑Page5(LTL)表达式,详见ConDec的相关工作.同样以上述城市应急为例,调度指挥人员协调5个救助组织完成血浆的调度,可以在行为视图中使用血浆这一数据对象,声明如下行为约束.假设PLASMA数据模板中含有操作replenish()和supply(),分别表示血浆的补给和供应.existence(plasma(Ai)supply,0,1),i=1,2,…,5,precedence(plasma(Ai)supply,plasma(A)replenish,false,false),i=1,2,…,5.约束表达了指挥人员可以从5个救助机构中调度血浆(存在约束),将调度的血浆补充受灾地的库存(顺序约束).3基于多视图的应用合成3.1应用的合成过程基于多视图合成的服务组合的过程如图3所示,其中涉及两类用户角色:领域专家和一般业务用户.领域专家是一类高级业务用户,相比一般业务用图3多视图合成的服务组合(2)用户参与的过程(i)初始化应用.用户根据业务需求,为构建的应用选择流程预制逻辑,在流程视图中配置流程参数和启动流程执行.(ii)声明约束.为了灵活地描述流程的临机逻辑,用户可以在应用的构造时或运行时,根据业务需求选择需要的数据对象,声明对象相关的约束.(a)在应用的数据视图中,用户针对数据对象的属性,声明体征数据的数据约束,包括目标约束和值约户(文中简称为用户),他们不仅熟练掌握领域知识,还拥有一定的IT技术和经验.以下分别详述这两类角色各自参与的服务组合过程.(1)领域专家参与的过程(i)构建预制逻辑.领域专家抽象常用的业务过程,使用控制流活动为中心的流程描述(如XPDL语言),构建业务流程的预制逻辑.流程结构中不能事先确定的部分,以目标活动占位表示.为了分析问题的简便,本文假设一个业务过程对应领域专家构建的一个流程预制逻辑;一个预制逻辑中至多包含一个目标活动.构建的流程预制逻辑,可被一般业务用户在构建应用时使用.(ii)抽象数据对象.领域专家根据领域内常见的体征数据,抽象得到数据对象.抽象的粒度、层次和内容,均由领域专家根据领域的业务需求确定.数据对象包含属性和操作:属性反映体征数据的状态;操作描述使用对象的方法,且操作映射至底层的服务实现(如Java服务、Web服务、Rest服务或OpenAPI等).束.其中,每一个目标约束需要用户指定权值;用户可以使用多个数据对象的属性声明值约束.(b)在应用的行为视图中,用户针对数据对象的操作,声明行为约束,包括存在约束、顺序约束和/或选择约束.(iii)临机决策.应用执行至目标活动时,系统参照用户声明的约束,实现临机逻辑的控制流结构.本文提出一种临机逻辑候选流程的构造算法,返回用户的候选流程都满足声明的约束.用户从候选结构Page6中确定一种结构继续执行.若系统无法构造满足约束的流程结构,系统将存在的问题(如是哪些约束无法满足)返回用户,辅助用户在数据视图和行为视图修改约束.用户可以在数据视图观察不断变化的体征数据,可以在运行时修改约束重新提交系统,逐步地构造和执行接下来的业务流程.这个阶段是用户主导、迭代进行的,直到用户确定临机构建的结束.随后,应用流程返回预制逻辑执行至结束.从用户为中心的服务组合的过程可以看到,临机逻辑的构造始终与用户交互.下文将针对视图中的用户操作和系统提供的支撑分别详细阐述.3.2用户的视图操作本节给出各个视图中用户操作的形式化表达;在实际的使用中,用户可以通过GUI界面的辅助,进行约束声明.(1)数据视图的操作操作1.增加/修改目标约束updateGoal.输入:属性a、权值w和目标类型m输出:目标约束ga前提:a∈Va.Oa;当数据视图中尚不存在其它目标约束,权值w可不必指定(默认值1);m={Max,Min}指明目标是取最大值或最小值.的值约束.约束ga,权值w说明ga的重要程度.效果:数据视图中为属性a增加/修改类型为m的目标操作2.增加/修改值约束操作updateValue.输入:属性a和期望值v输出:值约束ra前提:a∈va.Oa效果:数据视图中为属性a增加/修改一个期望值为v操作3.删除数据约束操作delCa.输入:数据约束c输出:无前提:c∈Va.Ca.效果:数据视图中删除一个数据约束c.(2)行为视图的操作操作4.增加/修改存在约束操作updateEp.输入:操作o,整型参数up和low.up和low分别描述操作使用次数的上界和下界.low默认为1,up默认为无穷大输出:存在约束ep前提:o∈Vo.Oop;0<lowup.效果:行为视图中增加/修改一个使用次数为不少于low次且不多于up次的存在约束ep.操作5.增加/修改顺序约束操作updateSp.输入:顺序算子s,操作o1,o2,布尔型变量alt,dir输出:顺序约束spexc=true时xp是排他性选择.输出:选择约束xp前提:oi∈Vo.Oop,i=1,2,…,m;nm.效果:行为视图中增加/修改一个选择约束xp,且当操作7.删除行为约束操作delCo.输入:行为约束c输出:无前提:c∈Vo.Co.效果:行为视图中删除一个行为约束c.(3)流程视图的操作操作8.确定候选流程操作decideCandi.输入:候选流程集合candiSet输出:流程结构flowstep前提:flowstep∈candiSet,flowstep满足Va中的数据前提:oi∈Vo.Oop,i=1,2;s={response,preced-ence,coexist,alternate}.效果:行为视图中增加/修改一个顺序约束sp;当s=response或precedence时,参数alt,dir有意义,其语义参见定义5.操作6.增加/修改选择约束操作updateXp.输入:整型参数n,描述选取数量;布尔型参数exc,描述选择是否是排他性的;操作o1,o2,…,om约束,不违背Vp中的行为约束.结构flowstep作为临机逻辑的流程结构.效果:从参照约束生成的流程候选集candiSet中,选择操作9.结束临机逻辑构造操作finish.输入:无输出:无前提:flowstepinVp.Ap,即至少为目标活动,进行过效果:结束临机逻辑构造.一次临机逻辑构造.3.3临机逻辑候选流程的构造算法用户在数据视图和行为视图中声明体征数据相关的约束;参照这些约束,系统半自动地合成临机逻辑的流程结构,在流程视图中呈现.用户主导流程临机逻辑的构造、执行和结束.临机逻辑的构造和执行过程如图4所示.在这个过程中根据声明的约束构造候选流程成为关键,本节给出了一种临机逻辑候选流程的构造算法.算法以在视图中声明的数据约束和行为约束作为输入,返回候选流程的集合.候选流程中体征数据满足值约束、对目标约束求优,而且其服务组合的方式不违背行为约束.算法1.候选流程构造算法candiCon(Ca,Co).输入:数据视图声明的数据约束集合Ca;行为视图声输出:候选流程的集合Page7步骤://针对数据视图的目标约束,构造全局目标函数g1.g=utility(Va.Ga);//针对数据视图的数据约束,构造限定条件集合rs2.rs=restriction(Va.Ca);//以g为目标,以rs为限定条件,通过线性目标规划3.optV=Lp(g,rs);4.if(optV==NULL)5.returnNULL;6.endif//构建参与临机逻辑的服务集合Sser和服务的行为7.Sser={};Scon={};8.for(Data_objobjinoptV)9.for(opinobj.Ops)10.s=obj.Mapop(op);11.Sser=Sser∪s;12.for(cinVo.Co)13.if(opinc)14.c=substitute(c,op,s);15.Scon=Scon∪c;16.endif17.endfor18.endfor19.endfor//行为约束的一致性检验20.if(!consistency(Scon))21.returnNULL;22.else//合成候选流程集合ps23.ps=makeProcess(Scon);24.returnps;25.endif算法candiCon分为3个阶段:(1)数据约束的目标规划阶段(1~6行).在数据视图中,utility函数对目标约束中p个Max约束和q个Min约束,构造全局目标函数:g=Min(wj/w)∑q其中a_maxi是第i个Max型目标约束中的属性;a_minj是第j个Min型目标约束中的属性;wi为第i个目标约束的权值;w为所有权值的算术平均值.通过全局目标函数将多目标规划问题转化为单目标的规划.函数restriction以数据视图中的目标约束和值约束作为输入,构造规划的限定条件集rs,rs由对象属性和辅助变量的取值限定组成.rs={a的取值限定|a∈VaOa}∪{辅助变量的取值限定}.其中,属性在数据视图的值约束可以确定其期望值,属性运行时的取值可以确定其取值范围;辅助变量是计算时使用的临时变量,其取值限定由算法运行时确定.函数Lp通过基于单纯型的线性目标规划,给出在目标g下的最优方案,即最优目标值和达到该目标相关属性的值,该最优方案通过数据结构optV返回.optV同时记录了参与规划的数据对象(其属性的期望值不等于当前实际的值).当不存在这样的方案,算法返回并提示“数据约束无法满足”.(2)行为约束的构建阶段(7~21行).针对上一步返回结果optV中的所有数据对象,获取其操作所绑定的服务构建服务集合Sser.接下来,函数substitute以行为视图中的约束c、操作op和服务s为参数,构建服务行为的约束c.其中,op是c中存在的操作、s是op所映射的服务.于是,得到服务的行为约束集合Sconconsistency函数以约束集Scon为参数,将约束转化为LTL(线性时态逻辑)表达,验证一致性.当存在不一致时,算法返回并提示“行为约束无法满足”.(3)流程结构的合成(22~25行).对验证一致的服务行为约束集合Scon,makeProcess函数参照其中的约束合成流程结构.该函数扩展了Decalare[7,11]的方法,将使能(enable)的服务的调用过程,以控制流结构呈现.具体地说,对于服务之间的顺序约束,合成服务之间的顺序结构;对于选择约束,合成服务之间的条件分支结构;其它情形下,服务之间尽可能组成并发的结构.考虑到服务组合整体执行的效果,算法在返回的候选集合中,将整体可行的服务组合结果按并发结构的数目排序.Page8candiCon算法利用视图声明的约束,分别进行服务的选择和调度.相比传统的基于约束的服务组合方法,由于目标规划确定了目标最优时的服务范围,大大减小了组合过程中的流程结构的中间状态,提高了运算的效率.4案例与评价4.1案例分析本节以一个城市应急场景为例,说明本文提出的多视图服务组合方法的使用过程和效果.场景中有一个受灾地点A,5个救助机构Ai(i=1,2,…,5)都可为A地提供应急服务.应急指挥中心的指挥人员需要随时关注受灾地的灾情变化情况,进行临机决策,灵活、动态地构建应急处置方案,对参与应急的服务进行调度协调.受灾地点A的血浆存量是反映灾情变化的一项关键的体征数据.对灾情的救助活动使得地点A库存的血浆不断被消耗,因此通过观察血浆数量的变化可以了解和判断灾情的发展趋势,即时制定应对方案.其中,血浆体征数据的数据模板PLASMA如表1所示.属性名类型mount实数cost实数操作名称返回类型参数getMount实数无映射至库存查询服务,获得getCost实数无映射至成本计算服务,获得supply无字符串idt,replenish无字符串ids,机构AA1A2A3A4A5假设A,Ai(i=1,2,…,5)均向指挥中心注册了各自的血浆数据对象,则指挥人员通过各个机构提供的数据对象,可以得到如表2所示的体征数据.由于需要谨慎保证血浆这一种生物制品的安全性,必要的运输和防护都会产生一定的成本.从对象的补给操作和供应操作的效果可知,救助机构Ai运输血浆数量x的成本为plasma(Ai)cost=fi(x)=受灾地A接受救助机构的供给,应急过程的成本为plasma(A)cost=f(x)=∑5由于各个可以参与供给的救助部门血浆供给量有限,指挥人员需要临机决策调度方案,构建血浆调度流程,期望调度的血浆总量能够满足受灾点的需求,同时期望成本越少越好.在数据视图中,指挥人员可以实时得到A地血浆的库存量和整个调度过程的成本,并以表3所示的方式指定其血浆库存的期望值和成本最小的目标.数值属性当前值期望值目标plasma(A).mount30150plasma(A).cost—注:黑体数据是用户的输入或配置.根据candiCon算法将数据视图中的约束转化为如下的目标规划,系统规划得到如表4所示最优方案.min10×y1+40×y2+30×y3+20×y4+50×y5s.t.x1+x2+x3+x4+x5=150-30(1)其中约束(1)表示调度血浆的数量满足期望值;约束(2)~(6)表示每个救助机构可供调度血浆数量的上下限;约束(7)中辅助变量yi(i=1…5)取值为1或0;取1时表示第i个救助机构参与供给;取0表示不参与.Page9x1x2x3x4x5总计注:用户通过GUI界面配置行为约束;第3个约束使用了特种车辆的数据对象vehicle,它含有一个运输操作convey(),映射至一个运输服务convey在行为视图中,指挥人员以表5示意的方式,通过对数据对象的操作进行编排,系统生成如下所示的行为约束:precedence(plasma(Ai).supply,plasma(A).replenish,false,existence(plasma(Ai).supply,0,1),i=1,2,…,5;precedence(vehicle.convey,plasma(Aj).supply,true,true),j=2,5.false),i=1,2,…,5;通过算法candiCon,指挥人员在流程视图中选定候选流程,所构建的调度流程示意如图5.其中,应急流程预制逻辑中的服务collection负责收集受灾资料;供给服务supply和补给服务replenish是指挥人员临机构造和执行的,其运行时的参数来自算法candiCon目标规划的血浆调度数量,由系统自动配置;特种车辆运输服务convey和相关机构的供给、补给服务的执行顺序和结构,是由算法candi-Con自动生成、用户选择确定的.结合案例可以说明,本文方法使用业务中的体征数据作为编程元素,提高了用户编程的易用性;通过声明约束表达服务组合需求,提升了用户编程的灵活性;通过数据约束的目标规划确定和自动配置服务的执行参数、结合行为约束自动组合服务的流程结构,为用户屏蔽了控制流相关的技术细节.综上所述,多视图合成的服务组合方法为用户提供了易于理解编程元素和编程方式,通过多视图协同建模屏蔽了底层细节,故极大降低了用户编程的复杂程度.4.2仿真实验基于原型系统我们设计实验,对比传统基于约束的服务组合方法,说明本文的候选流程构建算法在效率上的提高.针对上小节给出的场景,实验模拟了若干救助机构提供的服务,抽象相应的数据对象,并在实验中不断增加新的救助机构及其提供的服务和数据对象.在处理器为IntelCore2DuoE75002.94GHz、内存为2GB、操作系统为Ubuntu9.0432bit的服务器上,通过以下两种方案构建服务组合,统计构建过程的响应时间.(1)多视图方案.我们在数据视图和行为视图中声明类似上小节场景中的约束,由candiCon算法返回候选流程集合.(2)规则引擎方案.基于我们参考Declare[11]实现的规则引擎,重新声明与方案(1)同样需求下的服务行为约束,由该工具构建服务组合的流程.图6给出了两种方案在响应时间上的对比.可以发现,在这两种方案中,服务组合构建的响应时间都随服务规模的增长而增长.多视图方案中的算法candiCon,由于针对数据约束进行了目标规划,确定了目标最优时的服务选择范围;相比规则引擎方案大大减小了组合过程中流程结构的中间状态,提高了组合的效率.随着服务规模的增长,多视图方案响应时间增长相对平缓,显示出更加明显的优势.Page104.3相关工作比较方法的贡献.本小节通过相关工作的比较,定性地分析本文首先,以业务数据为编程元素构建服务或业务流程,旨在让业务人员能以更为直观、更易操作的方式建模应用,这在传统的以数据为中心的服务组合中已有了广泛的研究,主要针对数据的抽象和建模方法.vanderAalst等人[16]提出了Casehandling业务流程的编程范型,通过数据对象的建模和数据对象与数据源的映射,建立了数据对象与活动的联系和与流程实例Case的关联.IBM的研究团队[4,17]提出了业务实体Artifact的概念,通过Artifact来抽象业务流程的数据,支持跨域的业务流程的流转.但这两种方法都需要显式地建模数据的状态(例如Casehandling中dataobject通过ECA规则;而Ar-tifact使用自动机的描述),数据状态的变化引发服务的生命周期的变更.这种层次化的数据描述和操作方式,要求用户建模应用时具有一定的IT知识.本文采用数据视图和行为视图协同操作数据对象,分别针对数据对象的属性和操作,仍然是业务数据的同一层次,更易用户理解和使用.其次,通过声明约束提升设计时和运行时建模的灵活性,旨在降低业务需求变更对现有业务流程的影响,这在动态工作流流域中同样是研究热点.vanderAalst[8,15]和Pesic[7,11,18]等人使用线性时态逻辑抽象行为模式,给出了行为模板的描述语言ConDec和DecSerFlow.这些工作声明服务行为约束构建的服务组合,虽然能够以子过程的形式实现与控制流交互[11],然而模型本身不能兼容传统的控制流构建预制逻辑,存在应用的局限性.针对这类问题,Sadiq等人[10]给出一种服务组合模型,提出了coreprocess和pocketactivity的概念,分别描述了基于控制流构建的确定的结构和基于约束声明描述不确定的临机需求.Yan[19]等人提出的用户驱动的探索式服务组合方法及后续工作[20],亦采用了这种方式.但是这些工作的数据仅作为活动的输入输出,随控制关系流转,用户关注的体征数据仍然无法直接获取和操作,故用户编程仍然存在易用性的问题.本文方法采用多个视图描述服务组合,不仅可以在兼容传统控制流的流程视图中建模应用的预制逻辑,同时通过数据对象抽象的体征数据,从另外两个视图可以随时观察和操作数据,为用户构建随机逻辑提供更直观的编程视角和操作方法.5总结本文针对用户在编程元素和编程方式易用性方面的挑战,提出了一种用户为中心、多视图合成的服务组合方法.本文的贡献在于:(1)提出了一种多视图的服务组合模型,将业务过程临机逻辑的编程,转化为用户对关注的体征数据在数据视图和行为视图的约束声明;为用户屏蔽了控制逻辑的实现细节,降低了用户构建应用的复杂程度;(2)给出一种临机逻辑候选流程的构造算法,在流程视图中参照声明的约束、用户主导服务组合的构造和执行.随着服务规模的增长,算法性能较传统基于声明式编程方法有较大的提高.本文方法为用户提供易用的编程抽象和编程方法的同时,不失灵活高效的系统支撑,为最终用户编程方法的研究做出了有益的探索.接下来我们考虑在方法中加入对体征数据变化的预测,为用户声明数据约束提供辅助支持.
