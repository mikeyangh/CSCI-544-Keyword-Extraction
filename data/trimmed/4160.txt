Page1VxBPELEngine:一种变化驱动的适应性服务组装引擎孙昌爱薛铁恒胡长军(北京科技大学计算机与通信工程学院北京100083)摘要近年来,面向服务的架构(SOA)正逐渐成为分布式系统开发的新范型.为了满足快速变化的需求,服务组装应具备足够的适应性.针对目前广泛采纳的服务组装语言BPEL在适应性支持方面存在的不足,对标准BPEL进行扩展,开发了VxBPEL,支持服务组装中的可变性设计.为了在运行时刻解释与执行服务组装中的可变性定义与可变性配置,基于开源BPEL引擎ActiveBPEL开发了VxBPEL引擎VxBPELEngine.通过实例系统验证了基于可变性设计的适应性服务组装方法的可行性,评估了VxBPELEngine引擎的性能.关键词Web服务;BPEL;VxBPEL;可变性管理;服务组装引擎1引言近年来,面向服务的架构(SOA)逐渐成为Internet环境下的应用程序开发的一种主流范型或方法学[1].Page2的软件开发可以较好地解决分布、动态、异构环境下,数据、应用和系统集成等问题,支持快速的业务重整与优化.围绕Web服务及其服务组装,开发了一系列的标准、语言与支持工具[3].BPEL[4]是一个遵循SOA基本原理,支持面向过程的可执行服务组装语言,在学术界和工业界受到广泛重视.基于SOA的系统通常部署和运行于一个动态、开放的环境中,实现的业务过程本身往往是快速变化的,面向差别极大的用户群.这意味着,采用服务组装实现的SOA系统,应具备足够的灵活性,能够适应快速变化的需求.围绕着适应性服务组装的相关研究工作近年来非常活跃[5].特别地,在基于服务组装语言BPEL实现适应性服务组装方法方面,已有工作探讨了如何基于Aspect技术或采用代理机制解决服务组装的适应性问题[6-9].提出的适应性服务组装方法,都是面向运行时的服务组装实例,仅从服务组装的实现层考虑适应性问题.这些方法存在不易维护、技术实现复杂、影响了服务组装性能等缺点.前期工作中,我们探讨了如何从服务组装的规格说明层考虑适应性问题,提出一种基于可变性设计的适应性服务组装方法[10-13].该方法在服务组装规格说明中引入可变性设计,在部署和运行阶段支持可变性设计与配置的解释执行;通过增强服务组装在设计、部署和运行时的可变性,显式地表达和管理服务组装中不稳定或可变的因素,即将可变因素作为第一类设计对象并实施可变性管理.提出的方法较好地解决了已有适应性服务组装方法中存在的不易维护、技术实现复杂、影响了服务组装性能等问题.本文讨论VxBPEL引擎VxBPELEngine的设计与实现关键问题,采用实例研究的方式验证所提适应性组装方法的可行性,评估VxBPELEngine性能.主要贡献包括:(1)一种适应性服务组装引擎VxBPELEngine:通过复用和扩展ActiveBPEL引擎,实现VxBPEL引擎VxBPELEngine的开发;VxBPELEngine支持多个BPEL版本(包括BPEL4WS1.1与WS-BPEL2.0).(2)采用2个服务组装实例系统,验证了基于可变性设计的适应服务组装方法的可行性,评估了VxBPELEngine的性能.2背景介绍本节介绍BPEL与VxBPEL的基本原理与相关概念.2.1BPELSOA定义了Internet环境下松散耦合的、基于标准的、面向服务的应用程序开发模式[2].在该开发模式中,服务提供者开发并拥有服务,按照一定的标准(如WSDL[3])对服务进行描述,通过UDDI[3]将服务发布到服务代理;服务代理包含一个可用服务的存储库,允许感兴趣的服务使用者查找相关的服务;服务使用者通过对服务代理的查询,将查询到的服务进行绑定,根据服务描述的接口调用服务功能.SOA软件的基本单元为服务,通过对外提供一组操作参与分布式计算,实现一个软件系统或软件系统的一部分.Web服务是SOA基于Web的实现,由于单个Web服务往往无法满足实际需求,需要将多个Web服务协调与组织起来支持某个业务过程,上述过程称为服务组装.BPEL是一个支持面向过程、可执行的Web服务组装语言.BPEL过程包括伙伴链接(partner-Link)声明、变量声明、处理器(handler)声明以及业务过程描述4个部分.BPEL描述的业务过程是一组活动以及活动之间的控制流.活动分为基本活动与结构型活动.其中,invoke是最常使用的基本活动类型,刻画了业务过程与外部Web服务之间的交互.结构型活动由基本活动与结构型活动组成,其描述包含了顺序、分支、循环等常见的控制逻辑以及条件判断和并行机制.标准版本的BPEL在描述动态、多变的业务过程时存在明显不足[12].2.2VxBPEL可变性是软件系统能够在特定环境中扩展、改变、定制或配置的能力[10].可变性的核心概念包括变异点(VariationPoint)、变体(Variant)和依赖关系(Dependency).变异点是软件系统中可能存在变化的部分.通常,一个变异点存在多个设计方案可供选择,其中每一个选择方案称为变体.当每个变异点都选择一个变体后,选择的变体集合被称作可变性配置.依赖关系规定不同变异点对应的变体之间的约束关系.可变性管理包括设计、使用和维护可变性.实现适应性服务组装的关键在于如何识别、表达与执行服务组装中潜在的各种变化,即将变化作为第一类设计对象进行处理.可变性管理最初是为了解决软件产品线领域中多个软件产品之间的复用问题[14].借鉴可变性管理框架COVAMOF[15],我们开发了面向服务组装的可变性管理框架,如图1所示:Page3图1面向服务组装的可变性管理框架元模型(1)变异点.代表提供选择的位置.变异点有很多特征,如变化类型、抽象层次、绑定时间和基本原理.(2)变体.代表变异点中可行的选项.(3)实现.由于变异点可存在于不同的抽象层次中,实现关系指明了如何通过低层抽象中选择变体,以实现高层抽象中变异点的选择的规则.(4)依赖.代表了一种系统属性,并且说明变异点的绑定如何影响这个属性值,即选择特定的变体如何影响该属性的值.依赖包含关联和参考数据,细化为依赖交互.(5)依赖交互.描述依赖关系的一个条目.(6)关联.指影响系统属性值的变异点.对于与某个依赖相关的每个变异点,关联关系是依赖关系的一部分,因此,关联定义了与变异点的某种联系.(7)参考数据.定义了诸如变异点绑定和相应的系统属性值等实体的信息.这些系统属性的值是通过测试获得的.依据上述可变性管理框架的元模型,我们开发了VxBPEL[10].VxBPEL中的可变性构造子(即实现可变性管理中的各种概念)采用XML表示,与现有服务组装语言BPEL表示法一致.这样设计方案有利于继承SOA在解决应用程序集成和数据集成〈VXSpace:ConfigurableVariationPointid=$IDdefaultVariant=default_variant_name〉〈VXSpace:VPChoicevpname=$vpnamevariant=$variant_name/〉图4VxBPEL中可变性配置定义的语法格式方面的突出优点.变体是可变性设计中的核心概念之一,其定义方式如图2所示.其中,〈VXSpace:Variant〉标识了变体,“VXSpace”是定义了Variant类型定义的名字空间.变体通过名字name进行引用和标识.变异点是可变性管理另一核心概念,定义方式如图3所示.变异点由名字(name)和一组变体(Variants)组成.其中,〈VXSpace:VariationPoint〉标识了变异点,“VXSpace”是定义了VariationPoint类型定义的名字空间.变异点通过名字name进行引用和标识.实现该变异点的变体集合由〈VXSpace:Variants〉标识,包含的变体由〈VXSpace:Variant〉进一步定义.〈VXSpace:VariationPointname=$VariationPoint_name〉〈VXSpace:Variants〉〈!--definevariantshere--〉〈/VXSpace:Variants〉〈/VXSpace:VariationPoint〉复杂的BPEL流程中可能包含多个变异点,这些变异点之间存在依赖关系.采用可变性配置来描述这些可变性元素之间的依赖关系.可变性配置的定义方式如图4所示.可变性配置由名字(Name)、唯一标识号(id)、初始化缺省变体(defaultVariant)、基本原理(Rationale)、一组变体(Variants)组成.其中,可变性配置由〈VXSpace:ConfigurableVaria-tionPoint〉标识,ID属性唯一标识可变性配置,通过Page4defaultVariant属性可指定缺省的实现变体.〈VXSpace:Rationale〉和〈VXSpace:VariantInfo〉分别说明了可配置变异体和变体的相关信息.每个变体所需要的配置信息由〈VXSpace:RequiredCon-figuration〉标识.可变性配置细化为一组变体的选择,由〈VXSpace:VPChoices〉标识.对每个变体选择的说明由〈VXSpace:VPChoice〉标识,vpname属性指明了该选择的名字,variant属性通过名字引用已定义的变体.通过〈VXSpace:RequiredConfiguration〉和〈VXSpace:VPChoices〉的联合使用,可以实现复杂的可变性配置(指明各种变体之间复杂的实现与依赖关系).目前,VxBPEL支持服务组装中的可变性设计类型包括:(1)具有相同接口的服务替换;(2)具有不同接口的服务替换;(3)服务调用时参数的改变;(4)服务组装或部分活动的重组.3VxBPELEngine的设计与实现标准BPEL引擎无法解释执行包含可变性设计的服务组装规格说明.通过对标准BPEL引擎ActiveBPEL[16]的复用与扩展,我们开发了一个支持VxBPEL引擎VxBPELEngine.下面详细讨论VxBPELEngine设计与实现的关键问题.3.1VxBPELEngine的基本原理基于可变性设计的适应性服务组装方法的基本原理如图5所示.首先,采用标准的BPEL语言描述基本的业务过程,得到基本的服务组装规格说明(BasicServiceCompositions);然后,采用VxBPEL中的可变性构造子对基本的服务组装规格说明实施可变性设计,得到适应性服务组装规格说明(AdaptiveServiceCompositions).采用该方法得到的服务组装规格说明中,不仅包含标准的BPEL元素,也包含VxBPEL设计元素.在运行时刻,适应性服务组装引擎VxBPELEngine根据系统可变性配置,执行不同的业务过程.图5基于可变性设计的适应性服务组装方法为了解释与执行服务组装规格中可变性设计构造子,必须对已有BPEL引擎进行扩展.图6示意了VxBPELEngine解释执行含可变性设计的服务组装规格说明的基本原理.这里我们采用了“统一存储,分别解释”的思想解释与执行VxPBEL元素.其中,BPEL解释器负责解释标准BPEL元素;VxBPEL解释器负责解释VxBPEL元素.VxBPE-LEngine是一个解释型编译系统,VxBPEL解释器的设计与实现遵循了图1所示的可变性管理框架元模型.首先,VxBPELEngine构造活动定义层次结构图,解析构成过程的活动以及活动之间的依赖关系.过程定义解析器读取过程定义(即VxBPEL描述的服务组装规格说明),并负责解析任务的分发.具体说来,如果当前读取的过程定义元素属于标准的BPEL元素,则分发给标准的BPEL解释器;如果属于VxBPEL定义的可变性构造子元素,则分发给VxBPEL解释器.标准的BPEL解释器和VxBPEL解释器依据活动定义创建相应的活动对象.过程定义解析完成后,VxBPELEngine将存储过程的活动定义层次结构,并依此进行随后的过程部署、执行以及运行时重新配置.3.2VxBPELEngine的设计目前存在多个版本的BPEL引擎,具有代表性的包括ActiveBPEL、ApacheODE、IBMWebSphereProcessServer、MicrosoftBizTalkServer、JBossjBPM等.其中,ActiveBPEL是一个支持BPEL规范的开源流程引擎,具有良好的结构和实现方式.我们选择基于ActiveBPEL引擎设计与实现VxBPE-LEngine,在设计VxBPELEngine时,遵循的设计原则是在不改变标准BPEL引擎结构的前提下,最大限度保留和复用ActiveBPEL引擎机制.图7示意了VxBPELEngine的架构.(1)右侧部分包含了用于存储过程的相关文件和信息.DeploymentPlans(部署计划)保存过程部署描述文件(.pdd)、业务过程执行文件(.bpel)、WebPage5服务描述文件(.wsdl)以及Partner文件;ProcessState(过程状态)记录过程的状态,如所需消息是否到来、当前活动是否执行完毕等;Queues(队列)和Alarms(警报)用于消息的管理.(2)核心部分是BPELProcessor.该模块通过ProcessCreation&Management(采用易于扩展的工厂设计模式实现,能够支持不同版本的BPEL过程)管理引擎的创建、调用QueuesandAlarms(队列与警报管理服务)和TimerService(计时服务)管理相应的服务,采用过程配置使得引擎的各项职责互相分离.BPELProcessor首先从DeploymentPlans中提取BPEL文件,传递给ProcessCreation&Management单元,后者依据BPEL树形结构创建数据结构,配置相应属性.通过读取aeEngineConfig.xml文件实现引擎的配置处理.该文件描述了缓存的大小和日志状态,决定了队列和警报管理服务、流程管理器(Manager)、部署日志、部署处理器(DeploymentHandler)等启动位置.(3)一些辅助模块包括:AdminandEvent图7VxBPELEngine架构VxBPELEngine按照特定的顺序执行过程中的各个活动,具体的运行过程如图8所示.首先,BPELProcessor根据VxBPEL活动定义(Deploy-mentPlans),开始进行过程实例Process的创建(步骤1和2).活动定义(包含活动之间的层次关系)以数据流形式传给ProcessCreation&Management(步骤3),BPEL活动依据其活动定义创建活动执行对象,VxBPEL活动通过查询可变性配置信息Configuration(步骤4和5),选取执行方案,调用VxBPELManagement完成含可变性过程的活动执行对象的生成(步骤6).已创建的VxBPEL活动执Handling模块用于引擎、事件等管理,主要任务是管理和控制引擎、确保部署的流程正常执行等;PartnerAddressing模块为业务流程中交互的每个伙伴(partner)提供寻址信息(即Endpointreference).寻址信息存储在部署描述符、消息上下文或者伙伴定义对象中;Manager模块管理各种存储结构,包括流程管理者(用于管理流程的,如获取流程ID、创建业务流程等)和队列管理者(用于管理到来的数据和已经被执行却正在等待数据的活动).(4)在ProcessCreation&Management单元中加入VxBPELManagement模块,用于处理变异点和变体等VxBPEL元素.由于每个变异点如何选择变体取决于VxBPEL文件中的可变性配置,为此,增加一个Configuration模块.该模块负责读取与分析VxBPEL文件中的可变性配置信息.VxBPELManagement依据可变性配置信息选择变体,创建相应的过程.创建后的BPEL过程是标准的BPEL过程(VxBPEL元素已被消解).在运行时刻,通过Con-figuration模块更改可变性配置实现运行时可配置.行对象结合已有BPEL活动执行对象,完成对Process的创建(步骤7).Process由一组活动执行对象Activity组成,Process经过分析分解为特定顺序的活动队列(步骤8),生成的活动队列存储在Queues和Alarms中(步骤9).根据过程状态(ProcessState)(如要判断执行活动的所需消息是否到来、该活动是否执行完毕等)(步骤10和11),选择BPELProcessor执行活动的下一步动作(步骤11).其中,Alarms存储pick等活动,该类活动需要等待某个具体事件发生(如基于计时器的警报信号),从而处理所指定的活动.Page6图8VxBPELEninge的运行过程3.3VxBPELEngine实现的关键问题为了不改变ActiveBPEL引擎的结构,增加了一个可变性处理类(VarConfInfo),记录VxBPEL过程定义中的可变性设计与配置信息.通过修改ActiveBPEL的配置文件aeEngineConfig.xml,实现对相关可变性元素的管理.可变性元素的识别可以通过名字空间进行区分.例如,〈VXSpace:Variant〉中“VXSpace”给出了“Variant”类型定义的名字空间.(1)VxBPEL元素的解释与部署当ActiveBPEL引擎读入一个活动后,调用过程模型的活动定义(ActivityDefinition),根据过程定义为其创建一个对象.活动定义包含了BPEL活动的执行对象(即活动定义类的实例化对象)所需的相关信息.引擎和事件监听模块在必要的时候访问相应的活动定义.为了能够处理VxBPEL元素,必须扩展相关的活动定义、创建阅读器(Reader).VxBPEL解释器依据该VxBPEL元素的活动定义模型创建相应的执行对象.处理VxBPEL变异点时,根据可变性配置信息在一次执行过程中选择一图9VxBPEL过程定义的读取与部署原理图个变体.在扩展VxBPEL元素的活动定义与阅读器时,遵循了ActiveBPEL的设计思想,即采用访问者(Visitor)设计模式为VxBPEL元素定义活动定义与创建执行对象,实现对ActiveBPEL引擎的无缝扩展.(2)VxBPEL元素的正确性验证在执行VxBPEL规格说明之前,VxBPELEngine引擎首先验证VxBPEL过程定义是否正确、是否遵循规范.ActiveBPEL引擎中提供了对标准BPEL过程定义的检测机制,包括对结构化活动首个子元素的检测、基本活动语法是否符合规格说明、是否创建实例检测等.VxBPELEngine复用了ActiveBPEL引擎检验机制,增加了对过程定义中可变性设计与配置的定义是否遵循VxBPEL规范的检测,修改了对结构化活动的子元素的检测机制.例如,〈VariationPoint〉能够存在于〈flow〉、〈sequence〉等结构化活动中,通过扩展检测结构化活动子元素的检测机制,实现对VxBPEL过程定义的正确性进行验证.(3)运行时可变性配置实现实现运行时可变性配置的关键之处在于如何读取与部署VxBPEL元素,其原理如图9所示.首先,Page7读取VxBPEL过程定义,按照VxBPEL规格说明的层次关系创建过程实例对象,即活动定义层次结构(图中间部分).初次读取与部署过程时,可变性处理类(VarConfInfo)记录了过程实例的过程定义和部署信息.部署时,VxBPEL解释器通过解析可变性配置,将VxBPEL扩展部分的活动定义转换为标准BPEL过程的执行对象形式(图右边部分).为了支持用户需求的改变,可以借助MX4J或者JConsole技术修改VxBPEL过程的可变性配置.依据新的配置方案,重新部署VxBPEL过程定义.这里提出的适应性方法,从服务组装规格说明层次上解决适应性问题,具有“一次设计、多次运行”等优点.4实例研究通过对ActiveBPEL5.0.2的复用与扩展,VxBPELEngine支持BPEL4WS1.1与WS-BPEL2.0.VxBPELEngine可以运行在任何JavaServlet容器中,包含102270行Java代码(其中VxBPEL解释器的代码行数为1224).下面,我们采用两个实例系统示例与验证基于可变性设计的适应性服务组装方法的可行性,对VxBPELEngine的时间性能与可扩展性进行评估.4.1贷款核准LoanApproval在贷款核准场景中[4],用户通过一个服务端口partnerLink="customer"portType="apns:loanApprovalPT"variable="request"〉partnerLink="customer"portType="apns:loanApprovalPT"variable="request"〉图10贷款核准服务中基于VxBPEL的可变性设计发送贷款请求(包括个人信息与贷款数量).依据贷款请求信息,贷款核准服务执行业务审批流程后,返回“贷款成功”或者“贷款失败”.影响贷款请求是否通过的因素,包括贷款数量与客户的风险值.对于贷款数量小(低于10000)或低风险客户,贷款核准自动通过贷款请求;对于贷款数量较大且高风险客户,贷款核准程序相对复杂.因此,处理贷款请求时,贷款核准服务首先调用“风险评估”服务快速评估客户风险值;对于无法自动通过核准的贷款请求,需要启动全面的核准程序,调用“贷款评审”服务对贷款请求进行深度评估.采用Web服务组装实现上述贷款核准服务时,牵涉到客户一些重要个人信息.该服务应该提供不同的访问模式,例如,对于普通的贷款请求,提供默认访问模式;对于大额度的贷款请求,提供加密模式.采用VxBPEL实现上述服务组装时,可将访问模式定义为变异点,使用〈vxbpel:VariationPoint〉进行封装.两个变体分别为默认模式与加密模式,使用〈vxbpel:Variant〉定义,变体名称分别为“default”和“encryption”.图10示意了含可变性设计的贷款核准服务的服务组装规格说明.通过JConsole(图11)修改可变性配置(图12),在运行时刻VxBPELEngine执行不同的BPEL过程场景.图13和图14分别示意了默认访问模式和加密模式下的执行场景.Page8图11借助JConsole修改运行时可变性配置示意图〈vxbpel:ConfigurableVariationPointid="encryption"defaultVariant="unencrypted"〉Itispossibletoconfiguretheloanapprovalprocesstosupportencryption.〈vxbpel:VPChoicevpname="receive"variant="default"/〉〈vxbpel:VPChoicevpname="approver"variant="default"/〉〈vxbpel:VPChoicevpname="assessor"variant="default"/〉〈vxbpel:VPChoicevpname="reply"variant="default"/〉〈vxbpel:VPChoicevpname="assign"variant="default"/〉〈vxbpel:VPChoicevpname="receive"variant="encryption"/〉〈vxbpel:VPChoicevpname="approver"variant="encryption"/〉〈vxbpel:VPChoicevpname="assessor"variant="encryption"/〉〈vxbpel:VPChoicevpname="reply"variant="encryption"/〉〈vxbpel:VPChoicevpname="assign"variant="encryption"/〉图12贷款核准服务中可变性配置的VxBPEL规格说明Page94.2智能货架SmartShelf在智能货架系统SmartShelf[17]中,客户(Con-sumer)向SmartShelf发送购物请求(包括物品名称和数量),接受请求后SmartShelf创建服务时间,记录物品数量,根据物品信息读取物品所属货物类别名称,读取该物品的保质期.读取结束后,检查物品数量、位置和保质期.具体说来,(1)检查物品数量时:当货架物品数量满足要求时,停止数量检查;当货架物品数量不足时,通知WarehouseManager检查仓库存货:①存货充足时,通知Carrier将物品搬运至货架;②存货不足时,通知Staff进行进货;③更新产品目录;(2)检测物品位置时:如果物品位置摆放正确,停止检测;否则,调整物品位置;(3)检测物品保质期时:如果没有过期,停止检测;否则,给Warehouse发送消息,Warehouse收到消息后更换货架产品.当数量、位置、保质期均符合条件时,系统向Consumer发送确认消息;否则,向Consumer发送相应的失败消息,取消订单.与贷款核准服务LoanApproval相比,智能货〈invokename="WarehouseManager"partnerLink="WarehouseManagerPL"portType="man:WarehouseManagerPT"operation="WarehouseManager"〈invokename="AlertStaff"partnerLink="SendOrderToStaffPL"〈invokename="UpdateInventory"partnerLink="UpdateInventoryPL"portType="update:UpdateInventoryPT"operation="UpdateInventory"图15SmartShelf系统中基于VxBPEL的可变性设计架系统SmartShelf中的业务流程更加复杂.一般情形下,订单的处理需要进行多方面的检测;当Ware-house存货不足时,无需进行货物位置与过期方面的检测.采用BPEL进行实现上述复杂流程时,服务组装规格说明中将出现多层条件语句的嵌套,存在服务组装规格说明可读性差、维护困难、难于适应变化的业务需求等缺点.采用VxBPEL实现SmartShelf可以有效地克服上述不足之处.具体说来,将条件判断地方设置为变异点,将不同情况下的操作设置为变体,采用可变性配置指明不同变体之间的依赖关系.采用服务组装实现系统时,创建服务时间、记录物品交易数量、根据物品信息读取物品所属货物类别名称、读取物品保质期等步骤存在不同的处理方式,应设置为变异点.例如,创建服务时间(变异点)可以有系统自动设置(SetupTime)或人工设置(StaffSetupTime)两种实现方式(即变体).图15示意了该系统部分变异点的VxBPEL设计,其中变异点“CheckQuality”中包含了变异点Page10“sendorder”.作为示例,设置如下4种可变性配置方案:(1)“default”.货架货物充足、位置摆放正确、(2)“staff”.初始4个服务均采用手动完成,货(3)“insufficient”.仓库货物不充足,不进行位未过期.架货物充足、位置摆放正确、未过期.〈vxbpel:ConfigurableVariationPointid="smartshelf"defaultVariant="default"〉Itispossibletoconfigurethesmartshelfprocesstosupportvariability.〈vxbpel:VariantInfo〉DifferentvariationconfigurationofSmartshelf.〈vxbpel:VPChoicevpname="setuptime"variant="default"/〉〈vxbpel:VPChoicevpname="warehouse"variant="quantity"/〉〈vxbpel:VPChoicevpname="sendorder"variant="default"/〉〈vxbpel:VPChoicevpname="rearrange"variant="empty"/〉〈vxbpel:VPChoicevpname="returnstatus"variant="empty"/〉图16“insufficient”可变性配置方案的VxBPEL规格说明4.3VxBPELEngine性能评估为了便于度量VxBPELEngine时间性能,对实验进行了简化:(1)为了减少通讯对过程执行时间的影响,服务组装中调用的所有Web服务与过程部署在同一台计算机上;(2)为了减少业务过程的复杂性对过程执行时间的影响,简化了Web服务的相关操作的实现.表1和表2分别总结了实验环境配置与两个实例系统的规模.CPU内存硬盘系统类型操作系统2.93×2GHz2GBytes1TBytes32位Win7系统名称VxBPEL代码行服务数量贷款核准智能货架为了进一步定量测试与分析可变性部分对引擎置检测和保质期检测.(4)“sufficient”.货架货物不足、仓库货物充足、位置摆放错误、过期需更换货物.图16示例了可变性配置方案为“insufficient”的VxBPEL规格说明.通过MX4J修改可变性配置,依据可变性配置,VxBPELEngine执行不同的工作流场景.性能开销,我们采用标准的BPEL与VxBPEL分别实现上述两个系统的业务过程,然后比较ActiveB-PEL5.0.2与VxBPELEngine执行上述过程的时间开销.这里的时间开销是指部署时间与运行时间之和.运行时间与部署时间都取决于服务组装规格说明的复杂性.BPEL与VxBPEL的规格说明的部署都是一次性完成的,部署时间包括过程定义的读取时间与过程部署时间.表3总结与比较了ActiveBPEL5.0.2与VxB-PELEngine执行贷款核准系统LoanApproval的时间开销.该系统部署了3个服务,分别为LoanApproval、LoanAssessor和Encryption.在不加密(Unencryp-tion)情形下,风险评估的起始值为1000;在加密(Encryption)情形下,风险评估的起始值调整为10000.在不加密情形下,当贷款金额小于1000时,仅调用LoanApproval服务;当贷款金额大于等于1000时,调用LoanApproval和LoanAssessor服Page11务.在加密情形下,当贷款金额小于10000时,调用LoanApproval和Encryption服务;当贷款金额大于等于10000时,调用LoanApproval、LoanAssessor表3采用BPEL与VxBPEL实现LoanApproval的时间开销与性能比较开销/ms工作流场景名称服务unencryption_noAssessor1unencryption_Assessor2encryption_noAssessor2encryption_Assessor表4总结与比较了ActiveBPEL5.0.2与VxB-PELEngine执行智能货架系统SmartShelf的时间开销.该系统部署了19个服务,运行时刻按照不表4采用BPEL与VxBPEL实现SmartShelf的时间开销与性能比较BPEL时间开销/msshelfsuff_rightlocation_goodstatus8564654632shelfsuff_wronglocation_goodstatus9556646622shelfsuff_rightlocation_badstatus10562652644shelfsuff_wronglocation_badstatus11569658665staff_shelfsuff_rightlocation_goodstatus8555645635staff_shelfsuff_wronglocation_goodstatus9561651622staff_shelfsuff_rightlocation_badstatus10558648631staff_shelfsuff_wronglocation_badstatus11575665669warehousesuff_rightlocation_goodstatus11571661633warehousesuff_wronglocation_goodstatus12577667631warehousesuff_rightlocation_badstatus13576666648warehousesuff_wronglocation_badstatus14577667663insufficient9561651640通过上述两个实例系统,展示了基于可变性设计实现适应性服务组装方法,并且评估了VxBPE-LEngine的性能.实验结果不仅验证了所提适应性服务组装方法的可行性,还表明本文开发的VxBPELEngine引擎具备良好的时间性能与可扩展性.具体说来:(1)VxBPELEngine在处理不同类型的系统时,均表现出良好的性能.具体说来,在执行贷款核准系统时,可变性引入后的时间开销与标准BPEL过程的时间开销相当;在执行智能货架系统时,可变性引入后的时间开销是标准BPEL过程的时间开销的130%左右.进一步分析发现:VxBPELEngine引擎绝大部分时间用于处理标准的BPEL元素(包括读取过程定义、部署过程与执行活动).换言之,VxBPELEngine引擎尽管增加了可变性定义与可变性配置的读取与处理过程,与标准的BPEL元素的处理相比,相关的时间开销非常小.(2)VxBPELEngine具有良好的可扩展性.一方面,VxBPELEngine可以处理简单与复杂的服务和Encryption服务.BPEL过程的部署时间为20ms,而VxBPEL过程的部署时间为37ms.VxBPEL执行时间/ms同情形调用相应的Web服务.BPEL过程的部署时间为90ms,而VxBPEL过程的部署时间为220ms.组装系统.上述实例系统中,简单的工作流场景仅调用1个Web服务,复杂的工作流场景调用了多达14个Web服务.另一方面,通过扩展最新版本的ActiveBPEL引擎,VxBPELEngine能够支持多种BPEL版本.(3)ActiveBPEL在工业界和学术界得到广泛认可与应用,VxBPELEngine是通过对ActiveB-PEL的复用与扩展实现的,继承了ActiveBPEL良好的结构与性能,因此VxBPELEngine具备较强的实用性.5相关工作下面介绍具有代表性的适应性服务组装方法与引擎,并与本文工作进行比较.Charfi和Mezini对BPEL进行面向Aspect的扩充,开发了AOBPEL[18-19].AOBPEL借助面向Aspect的编程概念,将业务逻辑作为工作流的主要关注,而将相互交错的其它关注说明为工作流的Page12Aspect.由于将业务逻辑与表达不同关注的Aspect分开说明,在编译和运行时刻,必须将这些分离的组装规格说明编织起来.AOBPEL改进了BPEL的模块化支持,但服务组装规格说明的分散和杂乱导致维护和调试非常困难.Ezenwoye和Sadjadi提出了一个在BPEL过程中增加自治行为的框架TRAP/BPEL[20].TRAP/BPEL将服务组装看成是一个复合服务,并假设BPEL用来进行组装的描述.为了增加自治能力,需要对已有的BPEL过程进行变换,并增加一个通用代理.通用代理的作用是,当一个服务失败时,采用一个预先定义的或新发现的服务来替换.TRAP/BPEL通过在运行时刻监控来自通用代理的错误或超时事件,了解对各个服务的调用情况.基于代理机制可以部分解决服务组装的适应性,但存在一些不足之处,如导致了多个版本的服务组装规格说明、必须为各个Web服务配备相应的代理.李刚等人[21]提出了一种能够透明、动态地按需使用的虚拟服务模型及P2P引擎.通过虚拟服务组装运算以及服务动态查找算法,虚拟服务模型能够较好地适应服务失效、用户位置移动等网络环境的变化.P2P引擎对虚拟服务组装提供支持,实现透明地、按需使用服务.虚拟服务模型及P2P引擎提升了动态网络环境下应用服务适应性,但受限于对未知环境中服务的查找与组合.成睿星等人[22]提出了一种基于抽象多重服务范例的适应服务组装方法.该方法用阶层式抽象服务范例的概念构造多重服务范例,提供一种可适应性的相似度测量算法来选择适合调整的服务范例,基于调整运算子的服务范例适应性调整方法将其调整成满足用户需求的服务范例.为了提高适应性调整成功率,服务适应性相似度测量方法在选择服务时考虑了适应性需求,降低了服务调整难度.抽象阶层式服务减少了服务组合代价和人工参与程度,提升了服务组合自动化程度.在服务库服务数量不足、服务组合成功次数有限的情形下,服务组合成功率会大幅度降低.AdaptiveBPEL[23]是一个将wsBus和面向Aspect技术结合起来的适应性服务组装框架.wsBus[24]是一个消息中间件,引入了一个虚拟终端的概念.由于所有的消息都必须经过虚拟终端进行路由选择,wsBus可能成为了服务组装运行时刻的瓶颈.AdaptiveBPEL将不同QoS关注表达为Aspect,运行时刻将Aspect代码和BPEL过程编织起来,并根据事前定义的策略,提供不同QoS的服务组装.AdaptiveBPEL在为服务组装提供了灵活性的同时,也继承了基于代理机制和基于Aspect技术的不足之处.文献[25]对BPEL引擎进行扩展,开发了一个网格服务工作流引擎BPELFlowEngine.BPELFlowEngine采用分层处理机制,可以调用Web服务、网格服务以及网格调度器.引擎执行过程实例时依据BPEL标准元素“invoke”属性执行相应的任务.VxBPELEngine通过名字空间区分标准BPEL元素和VxBPEL元素,采用不同的解释器对过程元素进行解释.新增的VxBPEL解释器负责VxBPEL元素的读取与部署,经过VxBPEL部署后的过程实例为标准BPEL过程.6结束语在复用与扩展标准BPEL引擎ActiveBPEL基础上,开发了支持VxBPEL过程引擎VxBPE-LEngine.为了支持服务组装中的可变性设计,VxB-PEL对标准的服务组装语言BPEL进行了扩展.由于VxBPEL引入新的活动类型,标准的BPEL引擎无法执行具有可变性设计的BPEL过程,本文讨论了VxBPELEngine的设计与实现的关键问题,通过两个实例系统验证了基于可变性设计的适应性服务组装方法的可行性,评估了VxBPELEngine的性能.围绕适应性服务组装方法与支持平台的研究比较活跃.已有方法试图从服务组装实现层探讨服务组装实例的适应性问题,存在不易实现、难于维护、性能差等缺点.采用VxBPEL设计与实现的适应性服务组装时,首先通过使用VxBPEL对标准的BPEL过程中不稳定部分实施可变性设计,并设置各种可变性配置方案.VxBPELEngine在运行时刻解释与执行可变性配置,实现灵活的业务过程.基于可变性设计的适应性服务组装方法从服务组装规格说明层出发,提供了适应性问题的系统化方案,能够适应开放的业务环境和多变的用户需求,具有易于理解、易于维护、效率高等优点.进一步的研究工作包括:(1)扩展与增强VxBPEL,支持服务组装中更多的可变性类型[26]和更复杂的可变性配置方案;(2)集成可变性分析工具、设计工具与VxBPELEngine引擎,提供一个完整的基于可变性设计的适应性服务组装支持平台.Page13致谢作者感谢荷兰格罗宁根大学MichielKoning参与了VxBPELEngine早期版本的开发工作、北京科技大学王可参与了服务组装实例的部分开发工作!
