Page1最多叶子生成树问题的核化算法高文宇(广东商学院信息学院广州510320)摘要对算法领域的最多叶子生成树问题进行了深入研究,提出了对简单连通图2度节点的化简规则,并证明了不含2度节点的图的生成树的叶子节点数的下限为(N+6)/4,给出了构造这样一棵生成树的构造性方法.基于上述化简规则和所证明的结论,给出了最多叶子生成树问题的核化算法,该核化算法可以在O(n2)时间内得到一个4k-6大小的线性核.对于这样一个较小的核,将大大提高相关的参数算法和近似算法的性能.关键词最多叶子生成树;核化;参数算法1引言最多的叶子节点.从最优化问题的角度来说,MLST与另一个著名的图问题“最小连通支配集”问题(MinimumConnectedDominatingSet,MCDS)是等价的.即若在给定图G中找到有最多叶子的生成树,则该生成树中的非叶子节点就构成一个最小连通支配集,反之亦成立.但是从NP完全理论的角度,即如果我们考虑该问题的“判定问题”版本,则这两个问题并非是等价的,而是构成一对对偶问题[3],这对对偶问题解决的方法和难度自然也不一样.2相关研究2.1MLST问题早期的理论研究对于MLST问题,早期Lovasz、Payan和Storer[4-5]等人研究了一个变形问题,即节点度为3的n个节Page2点构成的连通图,其生成树的叶子数至少可以达到多少.随后,在文献[6-7]中都独立地证明了节点度至少为3的n个节点构成的连通图,其生成树的叶子数至少可以达到n/4+2.20世纪80年代以来,图子式(GraphMinor)理论[8]的发展对算法研究带来了新的思路.在文献[9]中Fellows等人利用图子式理论对若干组合优化问题进行了研究,其中借助图子式理论对MLST问题也给出了一个极富创见的解.给定一个图集F,F中的图没有哪一个图具有一棵生成树,使得该生成树有大于等于k个叶子节点.显然,图集F中任意图的子式也不会有叶子节点数大于等于k的生成树,这种特性我们称之为图集F关于子式运算封闭.那么根据图子式定理,图集F的障碍集(obstructions)是有限的,而且可以在多项式时间内识别出这些障碍集,因此MLST问题可以在多项式时间内求解.但遗憾的是,目前很多利用图子式理论进行的研究主要是证明了解决问题的时间复杂度上限,其方法是非构造性的理论证明,即可以证明这个多项式时间的算法是存在的,但我们并不知道这个算法的任何细节,也就是说,我们需要去寻找一个可行的构造性算法,而且子式包含判定算法中包含着极大的常数项,也使得这类算法在实际应用中存在问题.2.2MLST问题的近似算法对于MLST问题研究的另一个途径是寻找有效的近似算法.其中最重要的进展之一是Lu在文献[10]中提出的一个3-近似算法.在该文中,给出了一个贪婪算法,首先在给定的图G中构造出一个最大的多叶森林(maximallyleafyforest)F,然后通过向F中添加一些边来连通F中的子树,从而最终得到图G的一棵生成树.文中证明了通过最大多叶森林构造出来的生成树的叶子节点数至少是图G的任意生成树的叶子节点数的1/3,因此该贪婪算法是一个3-近似算法.在一些特殊图中,近似算法取得了更好的结果,文献[11]中得到了立方体图中MLST问题的3/2-近似算法.2.3参数算法在解决MLST相关问题中的进展对于一些组合优化问题,参数理论是一个很好的解决方案.经过近年来的一些研究,参数算法在很多与MLST问题相关的问题上都取得了很好的成果,如平面图的支配集问题等.参数理论的研究最初来源于观察到很多计算问题都与一个取值范围很小的重要参数相联系,利用参数的性质可以在一定程度上加速计算.应用参数理论来求解NP难问题时,首先要将该问题转化为参数化问题.参数化问题Q是一个用二元组(x,k)表示的判定问题,其中x代表一个具体的问题,k是一个非负整数,称为参数.然后应用参数理论的算法技术对参数化问题Q加以求解.若我们能够设计一种参数化求解算法,其时间复杂度形如O(f(k)|x|c),则我们把该问题Q称为固定参数可解的问题(FixedParameterTractable,FPT),简称FPT问题.FPT算法设计技术的研究一直是参数理论中的研究热点.核化(kernelization)是设计FPT算法的主要技术之一.参数理论中的一个最重要的定理就是:一个参数化问题是FPT问题当且仅当该问题是可核化的.因此,在参数算法设计中,核化技术应用最为广泛.核化是指如果存在一个多项式时间算法K和一个递归函数g,使得对于参数问题Q的任意一个实例(x,k),应用算法K将Q转化为一个新实例(x,k),使得|x|g(k)和kk,并满足当且仅当(x,k)是参数问题Q的一个真实例,(x,k)也是Q的一个真实例,则我们说参数问题Q是可核化的,算法K称为核化算法,新实例(x,k)称为核心化后的问题核.核化后问题规模极大地降低.核的大小可能是参数k的线性式(线性核),也可能是参数k的多项式(多项式核),甚至是参数k的非多项式.事实上,一个规模极大降低的核不仅可以用于设计参数算法,也可用于近似算法的设计.因此核化算法一直是参数理论研究的一个热点领域.对于MLST问题的参数算法研究,文献[12]提出了一种分支算法能用O(4kpoly(n))时间解决该问题,文献[13]则借助于MLST问题的对偶问题即连通支配集问题的一些研究成果,提出了一个时间复杂度为O(1.8966n)的算法.MLST问题的一个变形就是求有向图中的多叶子生成树(DirectedMaximumLeafSpanningOut-Tree),由于有向图中弧的单向性,使得用于无向图MLST问题的一些方法如图子式理论和文献[4-7]中的方法都无法直接应用于有向图中变形问题的求解.文献[14]给出了有向图多叶子生成树问题的一个时间复杂度为2O(klogk)·nO(1)的参数算法,这也证明了该问题也是属于FPT类的.文献[15]进一步研究了有向图的多叶子生成树问题,得到了一个该问题的平方核,文献[16]则研究了有向无环图中的多叶子生成树问题,其结论是,若限定在有向无Page3环图中,则该问题存在大小为6.6(k+2)的线性核.对于与MLST问题密切相关的支配集问题的核化算法研究,近年来也取得了重要的进展.如前所述,连通支配集问题和MLST问题构成一对对偶问题,但是它们的解决办法和难度都是不一样的.早期的研究表明,参数化支配集问题是一个W[2]完全问题[17],因此它不是FPT可解的.但是将参数化支配集问题限定在平面图这样一个背景下(也就是说要判定在一个平面图中是否存在大小为k的支配集),则平面图支配集问题可以在O(c槡k·n)时间求解,其中c4槡634[18],随后,常数c的上界又被优化到227[19]以及215.13[20].最近的研究表明,在平面图上求解支配集,通过两个图归约和预处理技术,可以得到一个不超过335k大小的核[21],这个线性核完全独立于原始图的规模.随后,Chen[3]设计的核化算法将平面图支配集问题的核进一步降低到67k.由于k相对n通常是很小的数,问题的规模就从n降低到k的线性函数,这也就大大降低了问题的规模.因此参数算法技术在一些问题的求解上是极其有益的.3最多叶子生成树问题的核化算法对于MLST问题的核化,我们所做的工作如下:(1)首先设计了一些化简规则对给定的图中的2度节点进行化简,消去原图中的2度节点,并且化简后的图和原图在求解MLST问题上是等价的.(2)化简后的图中只存在1度节点和度大于等于3的节点.我们证明了在这种图中,其生成树的叶子节点数至少可以达到(N+6)/4(其中N为化简后的图的节点数),并给出构造这样的生成树的构造性方法.(3)对于MLST问题,若k(N+6)/4,则回答“是”,即原图中存在一棵生成树,其叶子节点至少有k个;若k>(N+6)/4,则N<4k-6,即化简后的图的节点数小于4k-6,这是一个与原图的节点规模无关的线性核.3.1基本概念需满足以下条件:下面对相关问题给出详细的描述.定义1.图G=(V,E)称为简单连通无向图,(1)G为无自回路的、连通的无向图.(2)G中任意两个节点之间至多有一条边.定义2.图G中节点u和节点v之间存在一条边,则称节点u与节点v相邻.定义3(d度节点).图G=(V,E)中的任意节点u,称u在图中的相邻节点的个数为节点u的度,记为D(u).假设D(u)=d,则将节点u称为d度节点.定义4(MLST问题).给定简单连通无向图G=(V,E)以及非负整数k,问图G中是否包含一棵生成树T,使得生成树T中度为1的节点(即叶子节点)总数至少为k.定义5(边的收缩).图G中,端点为u和v的边e的收缩,就是用一个新顶点w代替u和v并且与新顶点w关联的边包括除e之外的所有与u和v关联的边(参见图1).定义6(2度节点的压缩).图G中,若存在一个2度节点x,则对该2度节点的压缩就是删除该2度节点及其相邻的两条边,然后将该2度点原来的两个相邻节点用一条边连接起来(参见图2).3.22度节点的化简规则通过对简单连通无向图中2度节点的研究,我们可以得到如下的一些化简规则.(1)若2度节点的其中一个相邻节点的度为1,则该2度节点可以被压缩,该2度节点被压缩后的图与原图在求解MLST问题上是等价的,即原图中若存在叶子数至少为k的生成树,则化简后的图中亦存在;若原图中不存在,则化简后的图中也不存在.这种情况是显然的,因为图中的1度节点必定是最终生成树中的叶子节点,因此与1度节点相邻的2度节点必定不是最终生成树的叶子节点,因此可Page4以被压缩.被压缩,压缩后见图3(b).图3(a)中的节点x就是这种情况,节点x可以(2)若2度节点的两个相邻节点都是2度节点,则该二度节点也可以被压缩,压缩后的图与原图在求解MLST问题上是等价的.图4(a)中的节点x就是这种情况,节点x可以被压缩,压缩后见图4(b).如图4(a),在这种情况中,p-u-x-v-q这条路径在最终的生成树中可能被断开,断开后符合情况(1),其中一个节点可被压缩;若p-u-x-v-q这条路径在最终的生成树中没有被断开,则节点x也不是叶子节点;因此x被压缩后的图与原图在求解MLST问题上是等价的.(3)若2度节点的两个相邻节点中,其中一个相邻节点的度为2,另一个相邻节点的度大于等于3.事实上这就是两个2度节点相邻,然后它们分别再与一个大于等于3度的节点相邻.图5(a)中的节点u、v都属于这种情况,因此我们将u、v合并在一起考虑.若这两个相邻的2度节点u、v各自的另一个相邻节点p、q之间除路径p-u-v-q之外再无别的连通路径,则2度节点u、v可以被压缩,压缩后见图5(b).若这两个相邻的2度节点u、v各自的另一个相邻节点p、q之间除路径p-u-v-q之外还有别的连通路径,示意图见图5(c),则2度节点u、v之间的边可以断开,因为断开此边可以获得两个叶子节点,断开后的情况见图5(d).(4)若2度节点的两个相邻节点的度都大于等于3.图6(a)中的节点u就属于这种情况.若这个2度节点u的两个相邻节点p、q之间除路径p-u-q之外再无别的连通路径,则2度节点u可以被压缩,压缩后见图6(b).若这个2度节点u的两个相邻节点p、q之间除路径p-u-q之外还有别的连通路径,见图6(c),则可以断开2度节点u和它的任意一个相邻点之间的边,因为断开此边可以获得一个叶子节点,断开后的情况见图6(d).但是,在此情况下,可能会产生新的2度节点.即断开边后,原2度节点变成了1度节点,而原2度节点u的邻点可能由于度减1从而变成一个新的2度节点.所以在断开边后应立即检查相关节点,若该节点的度仍然大于等于3,则继续;若断开边后,度由3减为2,则立即运用前面的规则处理这个新产生的2度节点.有了前面4条化简规则,可以给出核化算法如3.3核化算法及复杂性分析下(包括步1~3):1.依次访问图G中的所有节点,对图中的2度节点应用第(1)和第(2)条化简规则,得到图G.则图G中剩余的2度节点只可能是规则(3)和规则(4)中所述情况.对于n个节Page5点的图执行此步骤所用时间为O(n).2.依次访问图G中所有节点,对图G中符合规则(3)所描述的2度节点运用化简规则化简,得到图G.则图G中剩余的2度节点只可能是规则(4)中所述的情况.对于n个节点的图执行此步骤所用时间为O(n2).因为对每对符合规则(3)的2度节点进行化简时需要判断一对节点间是否存在另一条连通路径,使用深度优先算法需要O(n)时间,因此总共的时间为O(n2).3.对图G运用化简规则(4)化简,得到图G,则图G中不再存在2度节点,只剩下1度节点和度大于等于3的节点.对于n个节点的图执行此步骤所用时间为O(n2).理由同上.因此,全部执行完步1~3所需时间为O(n2).3.4无2度节点图的核化对一简单连通无向图G,若采用3.3节中给出的核化算法对2度节点进行化简,在化简后的图中就不再有2度节点.对于一个不存在2度节点的简单连通无向图,定义7(扩展节点x).向树T中增加d(x)条边,也就是增加x与x在G-T中的邻居之间的边.那么通过一系列的点扩展操作就可以将树T从一棵小树扩展成为图G的一棵完整的包含图G全部节点的生成树.我们将当前的生成树T中的d(x)=0的叶子节点x称为“死叶子”,因为这些“死叶子”不能再进行点扩展操作,从而在构造T的过程中产生的“死叶子”一定是最终的生成树中的叶子节点.另外用m有如下定理成立.定理1.N个节点的简单连通无向图G,若图G不含2度节点,则其必有一棵生成树,使得该生成树的叶子节点(度为1的节点)至少为N+6证明.为了证明上述定理,我们引入一个构造性的算法,在任意的不含2度节点的图G中都能构造出一棵生成树,使得该生成树的叶子节点数至少为N+64,从而证明该结论.在构造图G的生成树的过程中,我们用T表示当前已被构造出的包含n个节点,l个叶子节点的树.若x是T的一个叶子节点,则我们用d(x)表示x在G-T中的度,即d(x)等于x在G-T中的邻点个数.我们定义“扩展节点x”操作如下,并简称为“点扩展”.表示当前树T中的“死叶子”数目.用Δn,Δl,Δm分别表示当前树T执行一次点扩展操作后所带来的相应的n,l,m的增量.如果一个点扩展序列对树T的影响满足“累加不等式”3Δl+ΔmΔn,则称之为“合法”的点扩展序列.我们从一棵初始树T开始,通过执行一系列“合法”的点扩展序列将T逐步扩展成为图G的生成树.构造树T的过程:(1)若不含2度节点的图G中只有1度节点,则是图7(a)所示情况,定理1显然成立.(2)若不含2度节点的图G中有一个度大于等于4的节点,则可以找出一棵如图7(b)所示的初始子树.(3)若图G中都是3度节点和1度节点,而且图G中每一条不与1度节点关联的边都是图中某个三角形的一条边,则图G是图7(c)、图7(d)和图7(e)所示情况,这3种情况下,定理1显然都成立.(4)若图G中都是3度节点和1度节点,而且图G中至少存在一条不与1度节点关联的边,该条边不是图中任何一个三角形的一条边,则可以找出一棵如图7(f)所示的初始子树.若T通过一系列的“合法”的点扩展操作最终变成了图G的一棵包含L个叶子节点的生成树.那么在树T的生长过程中所产生的叶子节点最终都变成了“死叶子”节点(因为最终的生成树中的叶子节点都是“死叶子”,即都无法再进行点扩展操作).由于所有的点扩展操作都是“合法”的,即满足前面定义的“累加不等式”.假设共进行了i次点扩展操作,则每一次的点扩展操作满足的“累加不等式”Page6如下:将上述i个不等式累加起来得3(Δl1+Δl2+…+Δli)+(Δm1+Δm2+…+Δmi)(Δn1+Δn2+…Δni)因为:初始生成树的叶子数+Δl1+Δl2+…+Δli=最终生成树的叶子数=LΔm1+Δm2+…+ΔmiL,因为初始生成树可能包含“死叶子”Δn1+Δn2+…+Δn=N-初始生成树的节点数将式(2)~(4)代入式(1)有若初始子树是图7(b)所示情况,则3(L-D)+LN-D-1,其中D是一个大于等于4的常数,即D是图7(b)所示的初始子树中的叶子节点数目.化简即得4LN+2D-1N+7,即LN+7若初始子树是图7(f)所示情况,则3(L-4)+LN-6,化简即LN+6下面我们就给出一系列“合法”的点扩展操作,使得仅通过这些操作就可以完成图G的生成树的构建.因此,根据前面的证明,通过这些“合法”的操作得到的生成树的叶子节点数满足LN+6“合法”的点扩展操作:O1.对当前的树T中的某个叶子节点x,若d(x)2,则在节点x进行的点扩展操作满足Δl=Δn-1,Δm0,显然在此条件下,3Δl+ΔmΔn成立,因此该操作“合法”.参见图8(a).O2.对当前的树T中所有的满足d(x)1的节点x,图G中一定有某个不属于树T的节点,若该节点x有至少两个邻点在树T中,则对该节点的其中一个邻点进行点扩展操作会增加至少一个“死叶子”(也就是另一个邻点会变成“死叶子”).因此这样的点扩展操作会导致Δl=0,Δm1,Δn=1,显然在此条件下,3Δl+ΔmΔn成立,因此该操作“合法”.参见图8(b).O3.对当前的树T中所有的满足d(x)1的节点x,图G中一定有某个不属于树T的节点,若y是x在树T之外的唯一邻点,且y在图G中的度不为1,即至少为3,则y至少有两个不属于树T的邻点,则先在x进行点扩展,紧接着在y进行点扩展会导致Δl=Δn-21,Δm0,显然在此条件下,3Δl+ΔmΔn成立,因此该操作“合法”.参见图8(c).O4.对当前的树T中所有的满足d(x)1的节点x,图G中一定有某个不属于树T的节点,若y是x在树T之外的唯一邻点,且y在图G中的度等于1,则在x进行点扩展,y就成为一个新的“死叶子”,这种扩展会导致Δl=0,Δm=1,Δn=1,显然在此条件下,3Δl+ΔmΔn成立,因此该操作“合法”.参见图8(d).因为在图G中,节点的度要么为1,要么大于等于3.度为1的节点只能是在别的节点执行点扩展时被加入到树T,而且一旦被加入马上就变成了“死叶子”(规则O4).而度大于等于3的节点要么有至少两个邻点在T中,要么至少有两个邻点在T之外,则规则O1或O2或O3必占其一.所以通过规则O1~O4可以从初始生成树构建出图G最终的生成树,而每一步都是满足不等式3Δl+ΔmΔn的“合法”操作.所以最终的生成树的叶子节点数满足LN+6事实上,定理1给出的下限是一个严格的(最好的)下限(tightbound).也就是说,在不存在2度节点的图中,其生成树的最大叶子节点数至少可以达到N+64,但是该下限无法再被改进.事实上,图9(a)就是一个达到该下限的图.在该图中仅存在1度节点和3度节点,该图的具有最多叶子的一棵生成树见图9(b).因此最大叶子节点数L=5,图的节点数N=14,所以L=5=N+6Page7找出一棵生成树使其叶子节点数大于N+6所以,根据定理1,我们可以得到简化后包含1度节点和大于等于3度节点的图的叶子节点数的一个下限.因此,对于MLST问题我们有如下的核化定理.定理2.对于在任意简单连通无向图G上求解MLST问题,应用3.3节中的核化算法,可以得到一个4k-6大小的核.证明.(1)执行3.3节的核化算法,可以将图G化简为不含2度节点的图G,设图G中的节点数为N个.(2)根据定理1,N个节点且不含2度节点的图,则其必有一棵生成树,使得该生成树的叶子节点数至少为N+6题,若化简后的图G的节点数N满足kN+6回答“是”,即原图G中存在一棵生成树,其叶子节点至少有k个.若k>N+6节点数小于4k-6,这是一个与原图的节点规模无关的线性核.因此我们可以在节点数小于4k-6的图G中来求解MLST问题.4结束语最多叶子生成树问题是NP完全理论中的一个经典问题,其在网络设计和电路布线中都有着重要的应用背景.我们通过深入研究,设计了有效的化简(核化)算法,并证明了化简后的图是一个不超过4k-6大小的线性核.核化算法也是参数理论研究的一个热点领域,有效的核化算法能极大地降低原始问题的规模,从而在一些应用场合能大大降低问题求解的复杂度.如我们设计的核化算法,在得到4k-6大小的线性核之后,利用这个与原问题无关的线性核不仅可以设计参数算法求解,也可以设计近似算法求解,算法的复杂度仅与参数k有关,而与原始问题的规模无关.
