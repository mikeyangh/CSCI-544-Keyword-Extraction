Page1基于改进粒子群算法的Web服务组合温涛1),2)盛国军1),2)郭权2)李迎秋1),2)1)(东北大学软件中心沈阳110819)2)(大连东软信息学院辽宁省网络安全与计算技术重点实验室辽宁大连116023)摘要Web服务组合优化问题是典型的NP难题.将PSO算法用于连续性优化问题的相关研究较多,但将其应用于Web服务组合优化问题并不多见.文中提出一种改进的基于子粒子圆周轨道和零惯性权重的MDPSO算法,并将其应用到Web服务组合优化问题中,该算法使用基于三角函数的非线性动态学习因子及种群早熟收敛预测与处理方法控制粒子群的行为,在粒子的局部开拓能力和全局收敛能力之间达到良好的动态平衡.最后文中给出了MDPSO算法的实验及评价方法.这些概念和方法为PSO算法在Web服务组合问题上的应用研究提供了一种全新的思路.通过与传统的PSO算法做比较,验证了该算法在Web服务组合问题上效率更优.通过对实验数据的分析和解释得到了若干有益的结论,为进一步的研究工作奠定了基础.关键词Web服务组合;粒子群优化算法;子粒子圆周轨道;非线性动态学习因子;防早熟收敛1引言Web服务是支持计算机之间通过网络相互协作与交互的软件系统,具有完全开放、松散耦合、标准协议和高度可集成能力等特征,支持通过基于Internet的协议和基于XML的消息与Web服务或其它软件系统交互①.Web服务作为一种新兴的Web应用模式,是一个崭新的分布式计算模型,是Web上数据和信息集成的有效机制,具有高度的互操作性、跨平台性等特点,近年来得到了快速的发展[1].单个Web服务功能有限,Web服务组合(WebServiceComposition,WSC)将分布在Internet上松散耦合的多个Web服务组合成满足需求的复合服务,在实现软件重用的同时,使组织具有“随需应变、快速反应”的能力.WSC受到学术界及企业界广泛重视,涌现出大量的WSC相关研究.如何动态地把现存Web服务组合起来以形成新的、能够满足不同需求的、增值的复杂服务已成为新的应用需求和研究热点[2].企业间业务环境复杂多变,对组合服务功能需求和非功能需求提出越来越高的要求,这些需求随时间和应用不同发生变化.对每个工作流活动,都可能存在众多功能相同且服务质量(QoS)属性不同的候选Web服务,在这些候选Web服务集合之间进行Web服务选择与组合,会形成组合“爆炸”,是一个典型的NP难题.如何动态地从海量组合方案中选择出满足用户质量需求的服务组合,成为服务组合优化领域中的一个关键问题,具有重要理论意义和实用价值.本文第2节介绍相关工作;第3节对Web服务组合问题进行描述;第4节简单介绍传统粒子群算法;第5节对本文提出的MDPSO(ModifiedDiscreteParticleSwarmOptimization)算法进行详细阐述;第6节是MDPSO算法的实验与结果分析;最后是全文的小结和下一步工作展望.2相关工作服务组合是按照一定的业务逻辑对现有的服务进行集成.文献[3]在总结了各种Web服务组合方法的基础上,将Web服务组合方法归纳为语义型和过程型.语义型WSC为Web服务描述和请求描述添加能被计算机系统理解的语义,使WSC方案通过推理自动生成.过程型WSC使用流程定义工具和语言对WSC业务过程进行建模,在具体流程执行前根据服务QoS属性选择具体服务来替代流程模型中的抽象服务以获得可执行的组合服务方案,如AgFlow[2].穷举计算法与进化算法是两种基于服务QoS属性的计算方法,采用穷举计算法存在扩展性差、计算量大的弊端[4],而遗传算法(GeneticAlgorithm,GA)和粒子群算法(ParticleSwarmOptimization,PSO)是服务组合优化领域比较典型的两种进化算法,与遗传算法相比,粒子群算法具有参数少、收敛速度快的特点,在很多优化问题上表现出良好的搜索能力,但其种群中的粒子很容易被当前全局最好粒子位置吸引而快速收敛于一个局部最优值,导致早熟.文献[4]设计了一种面向动态Web服务选择的离散粒子群算法,针对进化算法容易陷入局部极值这一缺陷,定义了粒子无希望/重希望准则以保证粒子群的多样性.文献[5]提出了工作流服务质量估算算法和基于遗传算法的网格工作流调度方法,使种群具有良好的收敛能力.文献[6]提出了一种混合粒子群优化算法,并引入模拟退火算法和遗传算法的思想,利用模拟退火随机概率来避免粒子群陷入局部最优.文献[7]提出了一种能保证以概率1全局收敛的PSO算法,并对其全局收敛性进行理论分析和证明,并给出了两种停止进化微粒的重新产生方法.本文针对全局服务质量的Web服务组合优化问题,提出了一种改进的离散粒子群算法MDPSO,理论分析和实验结果表明,在Web服务组合优化问题上,MDPSO比PSO具有更好的综合性能.3Web服务组合问题描述定义1.Web服务质量是一个5元组QoS=(t,c,a,rel,rep),t是服务响应时间,c是调用服务一次的费用,a是可用性,指服务执行成功次数与总执行次数比率,rel是可靠性,指服务能运行时间与总时间比率,信誉度rep=∑n务n次评价得分(ev1,ev2,…,evj,…,evn)的平均值.定义2.组合服务是一个6元组CS=(S,R,①W3CWorkingGroup.Webservicesarchitecture:W3CPage3QoS,QC,W,f),S={s1,s2,…,sd,…,sn}表示构成组合服务的任务集合,关系RS×S表示任务之间关系的集合,QoS是组合服务的质量,QC={g(t),g(c),g(a),g(rel),g(rep)}表示组合服务必须满足的质量约束,W={w1,w2,…,w5}是集合QoS中各元素对应的权重且满足∑5量评价函数.任务集S中任务sd是抽象服务,在组合服务CS执行前,从sd的候选服务集OSd中选择一个具体Web服务wsi替代抽象服务sd,wsi表示OSd中第i个候选服务,i∈{1,2,…,|OSd|}.WS-BPEL①是典型的Web服务工作流描述语言,定义的主要流程控制活动有顺序(sequence)、并行(flow)、选择(switch)、循环(while)等,多个基本服务通过流程控制活动可组成组合服务.组合服务计算模型如表1,其中n为组合服务中基本服务个数,c为组合服务并行控制各分支中关键分支(cp)中基本服务个数,b为并行或选择控制中的分支数,pi是选择控制中第i个分支得到执行的概率且满足∑bpi=1,l是循环控制中的循环次数.根据表1将i=1非顺序型服务组合各分支作为顺序型子服务组合依次递归处理,顺序型服务组合是其它类型服务组合的基础.表1组合服务QoS计算模型QATCARelRel(sq)=∏nRepRep(sq)=∑n4标准粒子群算法粒子群算法是一种启发式进化计算技术,来源于对简化社会群体智能行为模型的模拟,由Eberhart和Kennedy于1995年提出[8].优化问题每个解是粒子在搜索空间中的一个位置,通过粒子速度改变粒子飞行距离和方向,每个粒子记住自己在迭代过程中找到的历史最优位置pi,d,粒子群所有粒子历史最优位置为全局最优位置pg,d.粒子运动方程及参数[8-11]为vt+1i,d=vt其中t是粒子当前迭代次数,d是粒子维数,vti,d分别代表第t代进化中粒子i第d维的速度和xt位置,非负常数c1和c2是学习因子,决定pi,d和pg,d对新速度的影响程度,r1和r2是区间[0,1]上均匀分布的随机变量.将式(1)和(2)合称原始PSO算法OPSO(OriginalParticleSwarmOptimization).为更好地控制算法的全局和局部寻优能力,Shi[9]等在式(1)中引入一个惯性权重ω:Rel(sw)=∑bvt+1i,d=ωvt将式(3)和式(2)合称作标准粒子群算法SPSO(StandardParticleSwarmOptimization),ω值越大,全局寻优能力越强.目前采用较多的是Shi建议的线性递减惯性权重值[8]:其中ωmax为初始惯性权重值,ωmin为最大进化代数对应的惯性权重值,一般取ωmax=0.9,ωmin=0.4.5改进的离散粒子群算法MDPSO5.1MDPSO算法基本概念定义3.粒子是存在于n维欧氏空间Rn中无体积、无质量的对象,可用一个9元组P=(T,t,X,f(犡),X,fv,V,Dlim,VOP)表示,其中T∈N+是粒子最大进化代数,t∈[1,T]是粒子当前进化代数且t以步长1单调增加,犡={x1,x2,…,xd…,xn}是①OASIS.WebservicesbusinessprocessexecutionlanguagePage4空间Rn中的位置向量,xd是向量犡第d维位置,f(犡)是向量犡评价函数,X是在函数f(犡)评价下的粒子历史最优位置,fv=f(X)是对X评价值,犞={v1,v2,…,vd,…,vn}是空间Rn中的速度向量,代表粒子在各维上的速度,Dlim={m1,m2,…,md,…,mn}中各元素分别是粒子在各维上运动区间限制,md∈N+,速度操作算子集VOP={op1,op2,…,opk}用于改变粒子运动速度.定义4.粒子群是一个5元组PS=(犘犆,Xg,psm,OP),犘犆={P1,P2,…,Pm}是空间Rn中mf个粒子的集合,且i,j∈[1,m],Pi.T=Pj.T,Pi.f(犡)=Pj.f(犡),Pi.VOP=Pj.VOP,即犘犆中各粒子具有相同进化代数、相同评价函数和相同速度操作算子集合,Xf(X样性评价函数,防早熟收敛操作集OP={chaotic,select,crossover,mutate}包括混沌扰动、选择、交叉及变异操作.g)是X由以上定义可知,若只考虑各粒子空间位置属性,则粒子群是n维空间Rn中一个位置距阵犘犆=(xi,j)m×n,其中xi,j是第i个粒子在第j维上的位置且xi,j∈R+∧xi,j∈[1,mj],同理可得粒子速度距阵犘犆犞=(狏i,j)m×n,其中狏i,j是第i个粒子在第j维上的速度,具有方向和大小.在粒子进化代数t每次增加时,狏i,j在一个速度算子操作下发生变化,位置xi,j在狏i,j作用下发生变化.5.2粒子圆周轨道设计设S={s1,s2,…,sd,…,sn}为组合服务CS的任务集合,S中各抽象服务对应的候选服务数分别为m1,m2,…,md,…,mn且md∈N+∧d∈[1,n],则组合服务解空间大小为∏n优解的时间复杂度.MDPSO算法将粒子在其所有维上的运动区间设置为连续的圆周轨道,当采用适应度函数评价粒子位置优劣时,用模糊函数将粒子位置映射到离散区间上.粒子各维运动区间构造算法如下.算法1.Circle-BasedParticleOrbitDesign.输入:抽象服务sd的候选服务集OSd输出:子粒子SPd及其圆周轨道Orbitd1.将OSd中各Web服务正整数唯一性编码,编码区间为[1,md],形成由md=OSd个端点分割成的(md-1)个长度为1的子区间;2.引入虚拟服务编号0,即在服务编号1前添加一个长度为1的子区间,则线段L(0→md)由(md+1)个端点分割成md个长度为1的子区间;3.将线段L(0→md)的0端按顺时针方向对接到md端,构造一个周长为md半径rd=md/2π的圆周Orbitd,作为粒子在第d维上的运行轨道;4.在粒子的第d维轨道上引入一个子粒子SPd(Sub-Particle),SPd只能运行在Orbitd上.按照上述步骤对粒子的n个维度分别进行运行轨道构造,并将得到的n个圆的圆心重叠,得到n个同心圆轨道,周长相同的轨道重叠,如图1(a);将粒子群中的m个粒子的圆周轨道按粒子序号由低到高等距排列,并将各圆心连成一条直线,形成一个柱状体,并将粒子群同一维d上的轨道集合称作粒子群第d维柱面Cylinderd,如图1(b).SPd在其轨道上顺时针或逆时针旋转分别用速度方向因子signd=-1和signd=1表示,不运动则signd=0.设第d维子粒子SPd在Orbitd上的坐标点为Ad,∠X+夹角,点Ad的坐标为(rd×cosd,rd×sind).定义5.粒子i第t代进化中在第d维上的位置.i,d:xtxt即xti,d是正X轴上有向线段犗犡+点Atd所在线段犗犃td沿逆时针方向构成的夹角d=dOAtd所对应弧的长度.mod为求模函数,能保∠X+证角d在大于2π时被映射到[0,2π]区间.角度mod(d,2π)与其弧长X+定义6.粒子i第t代进化中在第d维上速度i,d是SPd在t-1代到达的坐标点At-1d与新坐标即狏t点Atd之间沿速度方向的弧长At-1dAt烇烋Page5向因子signd,速度狏t圆周轨道连续可导,则x=rdcosdy=rdsin烅烄烆dAt-1dAt烇烋i,d=signd×rd×dd,狏t即当代速度等于方向因子signd、轨道半径rd及旋转过的角度dd三者的乘积,与上代速度无关.粒子多维圆周轨道提出的意义在于它使粒子各维上的直线运动转化为圆周运动并限定了粒子各维上的有效运动区间.5.3速度操作算子设计定义7.θ旋转.在粒子第t代进化中将第d维子粒子SPd以点At-1d为起点在Orbitd上逆时针或顺时针转动一个角度θtd(θtd∈R)改变子粒子在其轨道上的位置,记为角度θtd=∑zj,d为带符号的角度.将子粒子旋转一个角度会导致θt子粒子沿其轨道移动一个弧度,由定义6,该弧度的产生过程即新一代速度vtd产生过程,记为vtd=xt-1d(signd×θtd),即对子粒子上代位置施加一个带方向的角度为θtd的旋转操作,xt-1d是子粒子t-1代位置并与t-1d对应.定义8.π翻转.将子粒子SPd从点At-1d沿圆点逆时针旋转180°到达点Atd,记为⊙=定义9.H翻转.将子粒子SPd从点At-1d以Y轴为对称轴旋转180°,记为=函数gh(t-1d)=定义10.V翻转.将子粒子SPd从点At-1d以X轴为对称轴旋转180°,记为T=函数gv(t-1d)=2π-2t-1d,0mod(t-1d,2π)π因此MDPSO算法粒子速度操作算子集合VOP={,⊙,,T},⊙,,T算子是算子特例.5.4惯性权重ω设计假设1.MDPSO算法中,n维空间Rn中运动的粒子P无质量、无体积,其每一维的速度可以在任意小的时间内改变方向或达到任意大小.假设2.不考虑具体计算机执行MDPSO算法时相邻两次进化之间实际执行物理时间差异,即两次进化所用时间逻辑上相等.MDPSO算法中粒子第d维位置上的变化本质上就是组合服务中第d个基本抽象服务在其对应的候选服务集合中选择具体服务替换的变化,适于服务组合问题离散解空间的特性,粒子运动不需要一个产生加速度的时间,具有一步到位的特点,因此假设1和假设2在本文的应用场景中是合理的.定义11.独立速度.设粒子在第d维上第t-1代的速度为vt-1d,在第t代进化中,若存在任意小正数ε,使粒子在时间ε内,vtd→或vtd→0,则称vtd独立于vt-1d,记为vt-1dvtd.即无论vt-1d有多大、方向如何,vtd都能在任意小时间内变成任意大小.定理1.MDPSO算法中粒子在第d维、第t代上速度vtd与其前一代速度vt-1d满足关系vt-1dvtd.证明.设第t-1代进化后粒子在第d维轨道上到达点At-1d,在第t代进化中,采用速度操作算子op对子粒子SPd进行旋转,其中op∈{,⊙,,T},在第t代粒子运动结束后,无论SPd在其轨道上旋转用的时间ε及旋转的角度θ有多大,粒子最终必将落到其有限长度圆周轨道上一点Atd,由定义6可知,速度狏td=signd×At-1dAt烇烋假设1,变量signd,rd,dd都不函数依赖于变量狏t-1d,得证.因此,MDPSO算法将SPSO算法中的惯性权重设为0,即ω=0,速度本身没有记忆,则式(3)演变为i,d=c1r1(pi,d-xtvt+1由式(5)可知,MDPSO算法中粒子的下一代运动速度将由粒子的当前位置xt最好位置pi,d及粒子群所有粒子的历史最好位置pg,d决定,粒子将飞向其自身最好位置与群体全局最好位置的随机加权中心.引理1.在MDPSO算法第t代进化中,若粒子i获得的解与粒子群全局最优解的位置重叠,则粒子i将保持静止,直到有其它粒子j找到比粒子i的解更优的解.证明.在第t代进化中若粒子i获得的解与粒子群全局最优解位置重叠,则粒子i获得的解一定也是其本身的历史最好解,粒子i在其任一维dPage6上的当前位置xt所有粒子的历史最好位置pg,d相等,由式(5)可知,粒子i在其任一维d上的下一代速度狏t+1粒子SPd将保持静止.在以后的迭代t+k(k∈{1,2,…,(T-t-1)})代中,当有其它粒子j找到更好的全局最优解,则粒子i至少有一维d上的位置xt+ki,d不等于全局最优解pg,d,由式(5),vt+k+1i,d≠0,则粒子i的子粒子SPd将重新运动.证毕.5.5适应度函数设计MDPSO算法中粒子的各维轨道是连续的,而组合服务各维取值是离散的服务编号,在计算组合服务的适应度之前用模糊函数fd将粒子各维轨道上的位置转换为对应整数:fd(xti,d)=i,d是粒子i第t代进化在第d维轨道Orbitd上的位xt置,md是Orbitd周长也是抽象服务sd的候选Web服务数目,z∈(N+∩[1,md])是Orbitd区间上的一个整数.随机变量Y是做一次概率为0.5的伯努利实验结果:P{Y=k}=pk(1-p)1-k,k=0,1,p=0.5.不同QoS属性计量单位不同,而且时间和费用属性值越大对QoS评价就越低,因此需要对QoS属性做无量纲化和归一化处理:Qd,k是第d个基本服务wsd第k个质量属性,∑md是wsd所在候选服务集中所有候选服务的第k个质量属性的和.与QoS评价成正比的QoS属性值用式(6)计算,成反比的用式(7)计算,以顺序型服务组合为例,组合服务质量计算公式为Qj是组合服务第j个质量属性,wj是Qj对应权重,由定义2及表1得Qj∈∑nn为组合服务中的基本服务个数.设用户对组合服务CS的质量要求为QC={tT,cC,aA,relREL,repREP},T,C,A,REL,REP为用户给定的值,则Web服务组合优化问题数学模型为maxf=∑5s.t.g(t)=(1-t/T)0,g(c)=(1-c/C)0,g(a)=(a/A-1)0,g(rel)=relg(rep)=repMDPSO算法以函数f作为各粒子适应度函数,用于评价粒子当前位置的优劣,g(Qk)为约束条件,函数f和g(Qk)用除量纲和归一化后的各质量属性值Qj计算.若不考虑约束条件,问题变成求极值单目标优化问题;若考虑约束条件,则迭代过程中发现满足用户需求的可行解则结束迭代.5.6防早熟收敛设计Web服务组合优化问题中,最优解可不唯一或最优解被大量劣解包围,用PSO算法求解该类问题容易陷入局部最优导致早熟收敛,因此必须有一种机制判断粒子群的早熟收敛,然后使用多种速度变异算子来增加种群多样性.定义12.粒子间布尔距离pbdi,j:pbdi,j=1D是粒子总维数,pbdi,j∈[0,1]表示粒子i和j之间布尔距离大小,其值越小,表示粒子越接近.把pbdi,j=0称为粒子i和j重叠,重叠是粒子群上的等价关系,满足自反、对称和传递的性质.用种群中所有粒子与全局最优位置之间布尔距离的平均值来衡量粒子群多样性.定义13.粒子群多样性n是粒子群中的粒子个数,pbdi,g是粒子i和全局最优位置g之间的布尔距离.psm∈[0,1],psm越大表示粒子群多样性越强,psm=0表示粒子群中所有粒子完全重叠于全局最优位置.定义14.K代最优算术平均:定义15.第K代最优平滑移动平均ekga(k):ekga(1)=f(1,X烄ekga(k)=2f(k,X烅烆kga计算粒子群最近K代全局最优适应值的平均Page7值,f(k,Xg对应的适应值,K∈(1,T),t为当前进化代数且XtK,一般K取值区间为[0.05T,0.2T].ekga(k)计算每一次迭代适应值的平滑移动平均.将所有进化代数的kga值以及ekga(k)值以t为横坐标分别做图,得到粒子群K代最优适应值均线和平滑移动适应值均线,可用于评价粒子群的进化能力和PSO算法的搜索能力,也可用于预测早熟收敛,其中ekga(k)给近期出现的最优适应值f(k,X一个更大的权重,更能及时反映出指标近期进化趋势.若将定义14和定义15中的f(k,Xpsm则可得到种群多样性的算术平均和移动平均,其它指标均值计算方法与此相同.当粒子群最优适应值的kga值在τ(如20)期内不发生变化且psm低于一个指定临界值σ(如0.35)时,可认为粒子群早熟(该判断过程用函数isPrematurity(psm,kga)表示),启动速度变异算子扩大种群搜索空间,采用精英保留策略[12].设种群规模为m,防早熟收敛算法如下.算法2.Anti-PrematureConvergenceAlgorithm.输入:早熟收敛的粒子群PS中的m个粒子的集合输出:经防早熟收敛处理过的m个粒子的集合犘犆=1.混沌扰动(chaotic).保留最优粒子,将其余m-1个粒子位置采用混沌迭代函数fc进行混沌扰动:常量μ=0.95和δ=8为混沌调节参数,t∈[1,T]是当前进化代数,规定fc(0)=μ×sin(δ)×e-1.2.选择(select):从当前粒子群中随机选择p1×m个劣解粒子放入杂交池,其中p1∈(0,1)为选择概率.3.交叉(crossover).依次从杂交池中选取一个粒子与最优粒子配对,并随机选取最优粒子j个位置上的基因替换劣解粒子对应位置上的基因,j∈[1,n),n是粒子维数,并用改良后的粒子替换种群中的原粒子.4.变异(mutate).对剩余的(m-1-p1×m)个粒子中的每个粒子,随机选择粒子的j个子粒子,j∈[1,n),n是粒子维数,然后对选定的每个子粒子依次随机选用速度操作算子{⊙,,T}中的一个算子进行翻转.5.7非线性动态学习因子设计由式(5)可知,MDPSO算法速度更新公式由两部分组成,粒子在新速度vt+1d作用下会逐渐向全局最优位置pg,d与粒子最优位置pi,d之间的一个随机加权位置飞去,学习因子c1和c2分别代表粒子相信自己经验和相信群体经验的程度,标准PSO算法一般将两个学习因子的值都置为常数2,认为粒子对自己和群体经验的相信程度相同.本文采用基于三角函数的非线性动态变化学习因子来控制粒子的局部开拓能力和全局收敛能力,c1和c2的取值修改如下:其中t为当前进化代数,T为总进化代数,ρ1=1.31为常数,μ是(0,1)区间上均匀分布的随机数,δ∈[2,10]用于控制随机数μ的震荡幅度,β取值1或0分别表示c1和c2在动态变化过程中是否加入一个随机扰动量μ/δ.将式(8)和(9)相加,得可见,在保证总认知量(c1+c2)基本稳定情况下,学习因子c1动态减少,同时c2动态增加,可确保粒子在进化早期“自信”度较高,具有很强的空间开拓能力,进化到后期粒子则比过去更相信群体决策,促使粒子群最终收敛于一个全局最优解或次优解,c1和c2随进化代数动态变化的轨迹如图2所示.图2非线性动态变化的学习因子c1和c2变化轨迹5.8MDPSO算法描述MDPSO算法中速度更新具有新特点,设置惯性权重ω=0,相当于粒子对上代速度无记忆,新速度狏t+1i,d仅与粒子上一代位置xt和全局最优的加权位置有关.式(5)中,令α=c1r1,β=c2r2,λ=-(α+β),ρ=(αpi,d+βpg,d).将式(5)重新整理得可见,若不考虑随机因素将λ和ρ看成常数,子粒子新速度狏t+1一代速度狏t如下:(1)将子粒子SPd从当前坐标点Atd(由xt唯一确定)沿Orbitd顺时针旋转一个角度:φλ=Page8mod(2π×xt针旋转一个角度φρ=mod(2π×ρ/md,2π),求模函数mod保证旋转的是一个最小的等价角度.由定义7可得出MDPSO算法粒子的运动方程为vt+1i,d=xt其中λ=-(c1r1+c2r2),ρ=(c1r1pi,d+c2r2pg,d),参数c1和c2值由式(8)和(9)给出,r1和r2含义与标准PSO算法相同.MDPSO算法描述如下.算法3.ModifiedDiscretePSOAlgorithm.输入:种群规模m,最大进化代数T、空间维数n(即组合输出:空间最优位置或次优位置pg1.设置当前进化代数t=0,初始化粒子群中每个粒子的位置:犘犆(0)=(x(0)并根据算法1初始化每个粒子的多维运行轨道;(fv(0)2.用适应度函数f计算每个粒子的适应值得犉犞(0)=1,fv(0)3.粒子局部最优位置p(0)2,…,fv(0)fv(0)全局最优位置:p(0)4.t←t+1①据式(11)更新各粒子速度:犘犆犞(t)=(狏(t)②根据式(2)更新各粒子位置:犘犆(t)=(x(t)③用适应度函数f计算每个粒子的适应值:④更新每个粒子局部最优位置:⑤根据max(fv(t)粒子行号gb,更新粒子群全局最优位置:⑥根据定义13和14计算粒子群多样性psm以及K代最优均值kga;⑦ifisPrematurity(psm,kga)thenendif⑧若tT则跳到第4步;5.输出空间最优位置或次优位置pg.5.9算法复杂度分析设n为组合服务基本服务数,m为种群规模,T为总迭代次数.根据算法3中各步骤分析MDPSO算法的时间复杂度[13](只考虑重复执行的次数).更新粒子速度和位置(①、②):O(2m×n);计算各粒子适应值(③):O(m×n);更新每个粒子局部最优位置(④):O(m/2);更新全局最优位置(⑤):O(1);粒子群多样性及K代最优均值(⑥):O(m×n+K);若早熟收敛调用算法2增加种群多样性(⑦):O(2m×n),由于本步存在不确定性忽略该复杂度.略去低阶项,则MDPSO算法复杂度为O(T×m×n)O(N×n3),是立方阶复杂度,N为任意常数;而采用穷举法时间复杂度为∏nd维轨道周长即抽象服务sd的候选服务数量.因此:(1)MDPSO算法复杂度仅与粒子维数n、种群规模m和总迭代次数T有关,与粒子各维轨道周长md无关,该结论与假设1的速度特点及定义7的速度操作方法相吻合;(2)当∏nMDPSO算法解决Web服务组合优化问题才有实际意义.6实验设计与结果分析6.1实验评价方法由于受随机因素影响,PSO及相关改进算法的运行结果具有一定不确定性,若开始迭代前随机初始化的粒子群位置正好处在最优解周围则可能很快找到最优解而停止进化,若让各算法从相同初始数据开始运行则实验结果会更准确,因此本实验将随机生成的各初始数据保存到文件,每次算法运行前从文件中读取数据作为算法输入,包括组合服务维数n、每个抽象服务的候选服务数、各候选服务的5维质量数据及各维对应权重.引入算法性能评价指标(AlgorithmPerformanceIndex,API)评价算法效率.定义16.算法性能评价指标API:API=fg_init是迭代开始时的全局最优适应值,对于极大值优化问题,fg_init也是整个迭代过程中的最劣值,f-是算法重复执行n次的平均适应值,fg_best是解空间中真正的最优适应值,进化距离比例(f-(fg_best-fg_init)用于衡量解的质量,其含义是:算法多次运行结束后得到的平均适应值的进化距离占最大可能进化距离的百分比,该比值越大说明获得的适应值离解空间中真正的最优适应值的距离越近,所获得的解的质量越高,算法的寻优能力越强.cg_best是算法重复执行n次发现空间最优解的总次数,Page9tg_best是算法重复执行n次发现空间最优解所用的总迭代次数.α与β为大于0的实数,分别是cg_best和tg_best重要程度的影响因子.API指标的含义是:在相同的总迭代次数下,取得更大适应值进化距离的算法更优,在n次重复实验中,获得空间最优解的次数cg_best越多且所用的迭代次数tg_best越少的算法更优.本实验中设置α=1.96,β=1.0,表明更加关注算法发现最优解的能力.在Web服务组合实际问题中,解空间中最优解对应的最优适应值fg_best真实存在但不可知.为了更准确地评测各算法的性能,在本实验中,预先用穷举法从解空间中找到每个用于实验的数据集的fg_best及其位置X值的进化距离、发现最优解的次数以及对应的发现最优解所用的迭代次数.6.2实验环境与实验数据本实验中,组合服务采用顺序组合模型,采用随表2实验所用数据集数据编号粒子维数n各维轨道周长D1D2D3D463,52,76,81,122420046722.14232.9276D596,52,176,16,253514368002.16633.3385D628,21,24,17,27,161036385281.95032.7691D727,22,36,21,17,322442908162.03742.4371D8D9D10719,17,18,15,16,20,215860512003.61634.52806.3MDPSO算法非线性动态学习因子的影响实验将MDPSO算法粒子速度方程中的c1和c2的值分别设置为固定值2,则将得到的PSO算法称作MDPSOW/ODLF(MDPSOWithoutDynamicLearningFactors).为了验证动态学习因子对算法性能的影响,在各数据集D1~D10上分别对MDPSO和MDPSOW/ODLF进行150次实验,并记录发现最优解的总次数、发现最优解所用的迭代次数以及每次实验中所获得的最终适应值,用式(12)计算各数据集上的API值以及两种算法API的差值,并将实验结果进行对比,如表3.将表3中各数据集上的API及其相关指标数据算术平均,并且计算各指标平均值对MDPSO指标对应平均值的比值,如图3.在各个数据集上,MDPSO算法与MDPSOW/ODLF进化距离比例的平均值分别为0.9683与0.9456(10.9766),平均发现极值的次数分别为62.3和34.4(10.5522),发现极值所用的平均迭代次数分别为274.38和285.27(11.0397),综合机生成的10组数据D1,D2,…,D10作为实验数据集,如表2,以测试MDPSO及相关算法在不同时间复杂度和不同解空间大小的数据集下的表现情况.表2中,粒子维数n就是组合服务中的基本成员服务数量,粒子各维轨道周长是粒子在各维上的候选服务数量,解空间大小是粒子各维轨道周长的乘积也是用穷举法发现空间最优解的算法复杂度,初始适应值fg_init是粒子群迭代开始时的全局最优适应值,其对应的解是所有算法的共同进化起点,最优适应值fg_best是解空间中真正的最优解对应的适应值,则(fg_best-fg_init)的值表示适应值最大的可能进化距离.本实验设置总迭代数T=500,粒子群种群规模m=20,MDPSO复杂度计算公式为n×m×T.实验环境为HPProliantDL380G5,Intel(R)Xeon(R)CPUE5450@3.00GHz,4GBRAM,MicrosoftWindowsServer2003EnterpriseEditionServicepack2,MATLAB7.4.0(R2007a).性能评价指标API平均值分别为1.1642和1.0523(10.9039).分别计算两种算法在各个数据集上的API差值,取各个API差值的算术平均可得:MDPSO的综合性能指标API值比MDPSOW/ODLF提升10.6874%.图3MDPSO与MDPSOW/ODLF的API及相关指标Page10平均代数208.9/233.5303.4/310.5304.2/364.7269.9/265.5266.2/288.4263.1/296.2301.0/278.0286.6/264.7231.4/243.4309.1/307.8表3MDPSO与MDPSOW/ODLF的实验结果数据D1D2D3D4D5D6D7D8D9D104.4858/4.4416在PSO算法粒子的运动方程中,学习因子c1和c2分别代表粒子相信自己经验和相信群体经验的程度,标准的PSO算法将两者都设置为常量2,即粒子相信自己经验和相信群体经验的程度相同.在MDPSO算法中,学习因子c1和c2在三角函数的作用下随着迭代次数的增加而动态变化,在迭代的早期粒子更加相信自己的经验,随着迭代次数的增加,c1动态减少,同时c2动态增加,而两者的总和保持稳定,该机制使粒子在局部开拓能力和全局收敛能力之间达到良好的动态平衡,在所用平均迭代次数基本相同的情况下,MDPSO比MDPSOW/ODLF具有更好地发现解空间极值的能力.6.4MDPSO算法早熟收敛预测与处理实验由MDPSO算法的运动方程可知,当某个粒子在其搜索区域发现局部最优解的时候,其它粒子将受到该局部最优解位置的吸引迅速向其靠拢,算法将陷入局部最优,出现早熟收敛现象.在Web服务组合实际应用中,当问题的解空间十分巨大、使用穷举法寻找最优解不可行的时候,组合服务的实际最优解及其对应的最优适应值是不可知的,这为准确判断粒子群早熟收敛带来了困难,因为当粒子群进化过程中出现适应值进化停滞时所得到的解是全局最优解还是次优解是无法判断的,因此本文中提出的MDPSO的早熟收敛的预测方法就存在准确率的问题.为了测试本文提出的早熟收敛预测算法的准确率,本实验对参与测试的数据集D1~D10分别用穷举法获得其解空间最优解以及其对应的最优适应值,如表2.当粒子群最优适应值的kga值在τ期内不发生变化且粒子群多样性指标psm低于一个指定临界值σ时,则认为粒子群早熟收敛,该判断过程用函数isPrematurity(psm,kga)表示.将被预测为早熟收敛的粒子群的最优适应值fg_pmc与解空间中的真正的全局最优适应值fg_best进行对比,规定:若fg_best-fpmc>0,则认定对粒子群的早熟收敛预测成功,否则预测失败.设粒子群在第tk(0<k<T)代被预测为早熟收敛,则启动算法2进行早熟收敛处理,若在第tk(k<kT)代之前发生粒子群适应值的进化,即存在fpmc使得fpmc-fpmc>0,则认为早熟收敛处理有效,否则无效.tk的确定方法如下:若在第tk代发生的早熟收敛为粒子群整个迭代过程中唯一的一次早熟收敛,则tk=T,否则tk为第tk代以后最近一次发生早熟收敛的迭代次数,T为迭代的总次数.将MDPSO算法中去除早熟收敛预测与处理机制后的PSO算法称作MDPSOW/OPMC(MDPSOWithoutPreMaturityConvergence).为了验证MDPSO算法中早熟收敛预测与处理机制对算法性能的影响,在数据集D1~D10上分别对MDPSO和MDPSOW/OPMC进行150次实验(τ=15,σ=0.35),并记录发现最优解的总次数、发现最优解所用的总迭代次数以及每次实验中的最终适应值,并根据式(12)计算各数据集上的API值以及两种算法API的差值,并将实验结果进行对比,如表4.将表4中各数据集上的API及其相关指标数据算术平均,并且计算各指标平均值对MDPSO指标对应平均值的比值,如图4.在各个数据集上,MDPSO算法与MDPSOW/OPMC进化距离比例的平均值分别为0.9683与0.9557(10.9870),平均发现极值的次数分别为61.6和42.6(10.6916),发现极值所用的平均迭代次数分别为279.16和293.15(11.0501),综合评价指标API平均值分别为1.1658和1.0839(10.9297).分别计算两种算法在各个数据集上的API差值,取各个API差值的算术平均可得:MDPSO的综合性能指标API值比MDPSOW/OPMC提升7.4090%.Page11数据编号平均适应值发现极值次数发现极值所用平均代数API×100API差/%表4MDPSO与MDPSOW/OPMC的实验结果对比D12.8904/2.8768D22.8953/2.8857D33.2446/3.2259D42.1188/2.1153D52.8809/2.8696D63.3130/3.2959D72.7545/2.7473D82.4165/2.4111D93.8431/3.8372D104.4845/4.4692图4MDPSO与MDPSOW/OPMC的API及相关指标当isPrematurity(psm,kga)为真值时,MDPSO算法启动早熟收敛处理程序,此时若粒子群得到的解已经是全局最优解,则早熟收敛预测失败,而此时数据编号预测并处理次数预测成功次数处理成功次数预测成功率(准确率)/%处理成功率/%表5MDPSO早熟收敛预测准确率与处理成功率实验结果D1D2D3D4D5D6D7D8D9D10平均此处的早熟收敛处理平均成功率只是一个估计值,实际真实的成功率值要低于该值,因为按照本文的计算方法,发生早熟收敛处理后,若在下次发生早熟收敛处理之前粒子群全局适应值发生进化,则统计为一次早熟收敛处理成功;而本次发生的适应值进化的具体原因是否真正由于早熟收敛处理还是由于粒子群的自然进化却很难得知.而通过比较两种算法的性能指标可以发现,MDPSO算法比MDPSO238.0/226.0295.5/288.0278.9/321.8260.3/271.1318.7/344.2100.04770/96.012384.2029269.3/304.2239.6/288.7321.5/325.0102.58500/99.091263.5258211.7/269.1358.1/293.4104.40760/97.842266.7101启动的早熟收敛处理程序因为无法继续进化也一定失败.若此时粒子群得到的最优解不是全局最优解,所启动的早熟收敛处理程序也不一定会成功.因为随着进化代数的增加,粒子群得到的适应值与解空间最优适应值越来越接近,更优解变得越来越稀少而难找.记录MDPSO算法在150次实验中发生早熟收敛预测次数与预测成功次数、早熟收敛处理次数与早熟收敛处理成功次数,并分别计算各数据集上的早熟收敛预测成功率(准确率)和早熟收敛处理成功率,如在表5数据集D1上,早熟收敛预测准确率=140/280=0.5,早熟收敛处理成功率=60/280=0.21429.各数据集上早熟收敛预测的平均成功率为66.6808%,早熟收敛处理的平均成功率为25.838%.602476113701051598415011295.3W/OPMC在平均适应值进化距离和平均发现极值次数上都有一定的提高,综合性能指标API提升约7%,这说明MDPSO算法中的早熟收敛与处理机制在整个算法的综合性能提升中起到了一定的作用.为了更好地说明MDPSO算法中早熟收敛预测与处理机制的作用,在数据集D6上做若干单次实验,并且选取其中典型的早熟收敛与处理的图形加以分析,如图5和图6.Page12图5MDPSO算法早熟收敛预测与处理典型图形1图6MDPSO算法早熟收敛预测与处理典型图形2在图5中,将粒子群进化过程中用于判断早熟收敛的两个重要指标:适应值的k代(本实验中k=0.02T=10)算术平均kga和粒子群的多样性指标psm放在同一个图中进行比较,为此将其中的适应值kga值进行归一化处理,0表示进化的起点即初始适应值fg_init,1表示全局最优适应值fg_best.对于每一次早熟收敛预测与处理事件都用软件进行了自动统计和标注,其中‘P’代表发生了早熟收敛预测与处理事件,但是预测与处理都不成功;‘PS’代表早熟收敛预测成功,但是处理失败;‘PSS’代表早熟收敛预测与处理都成功.由图5可见,在本次实验的500次迭代中,共发生了早熟收敛预测与处理事件4次(即图中以‘P’为首字母标注的4个波峰),其中预测成功次数为3次(即图中以‘PS’开头的标注的前3个波峰),预测并处理成功一次(即图中由‘PSS’标注的第3个波峰,因为在其后的第4次预测与处理事件发生之前适应值发生了进化),预测失败并处理失败一次(仅由‘P’标注的第4个波峰,因为此时的离子群已经到达全局最优适应值,不可能再发生进化).在图6中,整个迭代过程中只发生了唯一的一次早熟收敛预测与处理事件,并且预测与处理都成功(图中由‘PSS’标注的第1个波峰),因为发生早熟收敛预测与处理事件时的粒子群全局最优适应值小于解空间真正全局最优适应值,并且在此后的迭代中粒子群适应值发生了进化,但是该适应值的进化是由于早熟收敛预测与处理机制引起的还是由于粒子群的自然进化引起的还无法得知,因为在预测与处理事件发生之后、粒子群当前最优适应值未发生进化之前,发生了一次由粒子群自然进化引起的明显的psm波峰,而该波峰并不是由MDPSO的预测与处理机制形成的,但在本实验中,在该波峰之后约第250次迭代附近发生的粒子群最优适应值的进化被统计为早熟收敛处理成功.图7是不带早熟收敛预测与处理机制的MDPSO算法(MDPSOW/OPMC)粒子群进化的典型图形.由图中的粒子群多样性指标和适应值指标分析可得:MDPSOW/OPMC算法在迭代的早期(50~100代)粒子群多样性就达到很低的程度(0.1~0.2之间),粒子彼此之间的位置相似度很高,而此后适应值指标只在第250代附近发生了一次进化,然后粒子群就一直处于早熟收敛状态(因为粒子群得到的最优适应值还未到达解空间最优适应值,并且适应值长期停止进化),直到迭代结束.图中第250代附近产生的一次psm指标的波峰使粒子群的多样性暂时得以提高,并且适应值也发生了进化,这是粒子群进化过程中自我调整的结果,具有很大随机性,无法准确预测.图7MDPSOW/OPMC算法粒子群进化典型图形6.5MDPSO算法综合性能实验在解空间中随机选择初始种群的位置会对算法Page13的性能评价造成不确定性影响,若选择的初始种群的位置正好位于全局最优解周围,则粒子群在迭代早期会以很大的概率命中全局最优解而停止进化.本实验使参与比较的各PSO算法的种群都从解空间中的同一个起点开始进化(相同的初始解和相同的初始适应值),该机制有效避免了在解空间中随机选择初始种群位置对算法性能评价造成的不确定性影响.为获得更好的对比效果,若置原始PSO公式中的参数c2=0,则各粒子将完全按照自己经验随机搜索,将得到的算法称作RPSO(RandomParticleSwarmOptimization).本实验中用到的4种PSO算法的关键参数设置如表6,其中符号‘\’代表SPSO算法中的惯性权重线性递减,符号‘△’代表MDPSO中的两个学习因子c1和c2在三角函数作用下非线性动态变化.算法惯性权重w学习因子c1学习因子c2RPSOOPSOSPSOMDPSO首先研究单次实验中4种PSO算法的适应值进化情况.选取数据集D7,对各种PSO算法分别进行500次迭代,记录适应值的进化情况,如图8.MDPSO算法在粒子局部开拓能力和全局收敛能力之间能够获得良好的动态平衡,在种群进化的早期“更优解”较丰富情况下粒子自信度较高开拓能力强,算法表现为小步骤快节奏高速进化,各算法在相同的起点下,适应值离解空间真正最优适应值越近或离共同起点越远进化距离越大,获得的解的质量越高.如图8中,在迭代次数小于T/2时,MDPSO算法适应值的进化次数和进化距离都远高于其它三种算法,这是MDPSO算法中动态学习因子和防早熟收敛预测与处理机制共同作用的结果,当进化到T/2附近时,粒子群当前全局最优适应值与解空间最优适应值非常接近,“更优解”变得非常稀少而难找,粒子群相信群体经验的程度持续增加,促使粒子群加快收敛.在本次实验中,MDPSO算法的粒子群在第300代附近收敛于全局最优适应值2.7691(图8中虚线的位置为解空间最优适应值)而停止进化,此后MDPSO算法中发生的早熟收敛预测与处理机制将全部失败.为研究各算法在多次重复实验中获得最终适应值的情况,选取数据集D7,将该数据集上对各算法分别进行150次重复实验,对每次实验所获得的最终适应值、以及获得最终适应值时停止进化所用的迭代数移动平均,如图9和图10.图8RPSO/OPSO/SPSO/MDPSO的适应值进化过程图9各PSO算法150次实验最终适应值移动平均图10各PSO算法150次实验停止进化所用代数移动平均由图可见,在多次重复实验中,MDPSO算法所获得的最终适应值明显高于其它三种算法,获得最终适应值所用的迭代次数介于OPSO和SPSO之间且明显低于SPSO算法.在其它数据集上对四种算法做相同的实验也有相同的结论,这相当于用较小的迭代次数获得较大的适应值进化,即MDPSO比Page14OPSO具有更早地发现解空间更优解的能力.为获得较准确的各算法综合性能评价指标API,在数据集D1~D10上对RPSO、OPSP、SPSO和MDPSO分别进行150次重复实验,每次实验迭表7RPSO/OPSO/SPSO/MDPSO150次实验结果数据适应值均值适应值标准差×100极值次数所用平均代数API×100D12.7139/2.7137/2.8576/2.88255.20/5.13/6.89/3.640/0/21/890/0/309.7/259.473.179/73.150/99.159/124.9100/-0.0390/35.5022/70.6947D22.7287/2.7321/2.8188/2.89075.19/5.31/6.12/3.720/0/2/540/0/485.0/331.172.290/72.780/85.439/108.5600/0.67735/18.1899/50.1691D33.0428/3.0364/3.1330/3.23816.21/6.13/7.5/5.290/0/2/370/0/394.0/292.679.903/79.409/87.415/105.6600/-0.6192/9.4013/32.2397D42.0178/2.0169/2.0740/2.11723.51/2.98/3.37/0.990/0/2/650/0/390.0/274.282.183/82.042/91.888/118.3100/-0.1722/11.8086/43.9647D52.7308/2.728/2.8172/2.87544.95/4.89/6.49/4.090/0/4/240/0/406.5/305.974.948/74.591/86.746/99.8060/-0.4761/15.7410/33.1672D63.1075/3.1005/3.2172/3.31096.25/6.01/7.06/2.560/0/5/460/0/470.4/321.880.288/79.694/90.541/109.6200/-0.7409/12.7701/36.5301D72.6075/2.6086/2.6749/2.75224.00/4.20/5.37/2.180/0/3/620/0/424.3/307.980.264/80.399/89.091/114.6600/0.16713/10.99720/42.85320D82.3267/2.3197/2.3620/2.41393.1/2.94/3.66/2.190/0/0/210/0/0/334.672.371/70.632/81.221/99.4360/-2.4021/12.2292/37.3983D93.6585/3.6627/3.7815/3.82447.21/7.32/10.23/1.960/0/17/960/0/278.9/259.485.640/85.955/99.977/128.2400/0.3689/16.7417/49.7455D104.2497/4.2568/4.3672/4.48338.53/7.57/11.5/4.010/0/5/340/0/437.2/373.669.467/70.253/83.242/102.6100/1.1308/19.8281/47.7147为了观察各算法在多次重复实验中所获得的最终适应值的稳定情况,计算各数据集上各算法150次实验最终适应值的总体标准差,如图11.由图可见,MDPSO在多次重复实验中,每次实验获得的最终适应值与其均值之间的偏离程度最小,算法在适应值的进化结果上相对稳定,OPSO次之,而SPSO算法适应值进化结果的稳定性最差.图11各数据集上各PSO算法150次实验最终适应值标准差由于MDPSO是基于标准的PSO算法(SPSO)的改进,因此本文更关注MDPSO与SPSO之间的性能比较,根据表7中的数据计算这两种算法在各数据集上API及相关指标的平均值,并将MDPSO各指标的均值作为1,与SPSO对应指标进行比较,如图12,其中MDPSO与SPSO适应值进化距离的均值分别为0.9624和0.8796(10.9139),发现极值次数的均值分别为52.8和6.1(10.1155),发现极值所用代数的均值分别为306.05和359.6(11.1750),API综合性能指标均值分别为1.1117和0.8947(10.8048).可见在API以及与代500次,并记录每次实验各算法在各数据集上的最终适应值、获得解空间全局最优解的数量及其所用的迭代次数,并根据式(12)计算各算法的API值以及各算法与RPSO算法API的差值,如表7.API相关的各指标上,MDPSO比SPSO都有一定幅度的提升.图12MDPSO算法与SPSO算法API及相关指标比较根据表7中的数据计算4种PSO算法在各数据集上的API指标的平均值,如图13.RPSO、OPSO、SPSO和MDPSO算法的API指标在10个数据集上的均值分别为0.7706,0.7689,0.8947,1.1117.图13RPSO/OPSO/SPSO/MDPSO综合性能指标API比较Page15由图13可见,Web服务组合问题中,在综合算法性能评价指标API上,原始的PSO算法OPSO的性能与随机搜索的RPSO算法基本一致,标准PSO算法SPSO的综合性能比OPSO算法高出16.36%,MDPSO算法的综合性能比SPSO算法高出24.25%.在Web服务组合优化问题上,MDPSO算法表现出良好的综合性能,SPSO次之,OPSO最差.7结束语与标准PSO算法相比,本文提出的改进离散粒子群算法MDPSO在Web服务组合优化问题上的综合性能比标准的PSO算法更高.提出的粒子多维圆周轨道、基于三角函数的非线性动态学习因子、零惯性权重、防早熟收敛预测与处理机制及算法实验与评价方法等为Web服务组合问题和PSO算法的研究提供了新思路.但MDPSO算法能否在其它优化问题上取得好的应用效果还有待进一步研究.
