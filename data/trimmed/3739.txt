Page1带认证邮局协议的密钥恢复攻击刘凡保1)谢涛1)冯登国2)1)(国防科学技术大学计算机学院长沙410073)2)(中国科学院信息安全国家重点实验室北京100190)摘要作者提出了一种新的针对带认证邮局协议的密钥恢复攻击,能够更快地恢复出密钥并能够恢复更多的密钥字符.基于通道技术和高级消息修改技术,提出了一种“群满足方案”来确定性地满足分而治之策略下最后一个通道首三步的所有充分条件,籍此提高MD5(MessageDigestAlgorithm5)碰撞对搜索的效率.并提出了一些新的通道来控制MD5碰撞对消息的更多比特的取值,比如可以构造出352比特值确定的MD5碰撞对.通过这些技术改进了多位信息确定的MD5碰撞对搜索效率,应用到APOP的密钥恢复攻击中不仅能够快速恢复长达31个字符的密钥,而且能够在实际时间内恢复长达43个字符的密钥.关键词带认证邮局协议;挑战和响应;密钥恢复;通道;群满足方案1引言带认证邮局协议(AuthenticationPostOfficePage2括两方参与者,即认证服务器(认证者)和用户(被认证者).持有和存储电子邮件的认证服务器向要访问其邮件的用户发送一个满足一定限制且随机和唯一的挑战数据C.之后,用户使用散列函数MD5对收到的挑战C和持有的共享密钥P进行散列计算,并将计算的散列值R发送至认证服务器.最后,基于共享密钥P,认证服务器重做与用户一致的散列计算并将结果R与接收到的散列值R比较,若二值相同,则认证成功.否则,认证失败,中止连接.1.1以往的工作1996年,基于散列碰撞的分而治之策略,Preneel和vanOorschot[2]描述了如何恢复基于秘密信封方案MAC的密钥.他们使用生日攻击方法获得碰撞对,对于广泛使用的散列函数如MD5[3]和SHA-1[4]等,该方法在现有条件下是计算不可行的.然而,当一些流行散列函数的弱碰撞安全被攻击和破坏[5-8]且相应碰撞对搜索的效率也极大提高后[9],一系列针对APOP协议的密钥恢复攻击被陆续提出[10-13],且所有的攻击都是基于选择挑战的.在我们的工作之前,已知APOP攻击的最好结果[12]是利用denBoer和Bosselaers[14]提出的一种伪碰撞———dBB碰撞,利用该碰撞可以得到更多的自由消息位和恢复出更多的密钥字.例如,用来恢复APOP所使用密钥的前11个字符的MD5碰撞对可以在不到1s的时间内生成,用来恢复APOP所使用密钥的前31个字符的MD5碰撞对也可以在实际时间内生成[12].然而,这种方法的缺陷在于:为了利用dBB碰撞必须以242次MD5散列计算的复杂度首先生成一个额外的“IV桥”.在文献[13]中,提出了“比特自由碰撞对”的概念,即一对部分比特值固定的消息总会碰撞而无论其未固定比特如何取值,利用“比特自由碰撞对”可以降低APOP攻击所需的挑战数目.用来恢复APOP所使用密钥的前11个字符的1比特自由碰撞对可以经246次MD5散列后生成,可以减少所需发送挑战数的一半.1.2我们的工作我们提出两个新的通道q1和q1分别生成具有320位和352位信息确定的MD5碰撞对.基于通道技术(tunnel)和高级消息修改技术,我们提出一种群满足方案———同时确定性地满足最后一个通道首三步的所有充分条件,进一步改进了MD5碰撞对搜索的效率.结合分而治之和群满足方案降低具有多位信息确定的MD5碰撞对搜索的复杂度.在普通的个人PC机上,生成恢复APOP所使用密钥的前11个字符的MD5碰撞对的平均时间为0.08s,生成恢复APOP所使用密钥的前31个字符的MD5碰撞对的平均时间为0.15s,前39个字符的碰撞对的所需平均时间为4.13s.此外,应用这些技术还可以降低搜索1比特自由碰撞对的复杂度.另外我们提出一种在本地PC上恢复APOP所使用密钥的快速密钥恢复攻击.我们能够在不到1min的时间内恢复出长达11个字符的密钥内容,在4min左右能够恢复出长达31个字符的密钥内容,而长达43个字符的密钥也能够在实际可达时间内破解.该攻击模拟了一种可能由恶意软件发起的攻击,进一步论证了APOP的安全性已经完全破坏,因而基于MD5的网络应用程序的安全性需要进一步地评估[15-16].本文第2节简要介绍APOP协议及相关概念;第3节对一些相关工作进行比较;第4节详细介绍具有多位信息确定的MD5碰撞对搜索;第5节模拟一个APOP密钥恢复攻击;在第6节对本文进行总结.2基础知识2.1MD5算法描述MD5[3]是一种典型的基于MD结构(Merkle-DamgrdStructure)的迭代散列函数.其接收可变长度的消息M(输入消息M的长度一般为1|M|264-1bit)作为输入且输出固定长度为128bit的散列值MD5(M).2.1.1预处理在对输入消息M进行散列前需要对其进行预处理,分为如下3个阶段:(1)消息M首先被填充至分组块512bit的倍数,其中M附加一个1和若干个0至448mod512,最后附加64bit的M的长度信息.(2)填充后的消息M被分成若干个512bit的分组块(M0,M1,…,M(|M|/512-1)).(3)每个512位的分组块Mi被分割为16个32比特字(m0,m1,…,m15).2.1.2MD5压缩函数每个分组块依次被MD5的压缩函数CF处理,压缩函数CF接收512bit的Mi和128bit的链接变量Hi作为其输入并输出128bit的Hi+1.初始链接变量H0设置为固定常数a0=0x67452301,b0=Page30xefcdab89,c0=0x98badcfe,d0=0x10325476.MD5算法的迭代过程如下所示,其中Hn为散列值MD5(M).H1=CF(M0,H0),…,Hn=CF(Mn-1,Hn-1).压缩函数CF由64步构成,其中1~16步、17~32步、33~48步以及49~64步分别称为第1轮r1、第2轮r2、第3轮r3和第4轮r4.设qi(1i64)表示压缩函数第i步的32bit状态字,而qi,j表示状态字qi的第j比特值(0j31),并将链接变量初始化为q-3=a0,q0=b0,q-1=c0,q-2=d0,则状态字qi(1i64)的更新如式(1)所示:qi=qi-1+(qi-4+fi(qi-1,qi-2,qi-3)+wi+ti)<<<si状态字qi的更新使用模232加法+、循环左移操作<<<、轮函数fi、消息字wi和常数ti进行.轮函数fi的具体信息如式(2)所示:烄fi=烅I(B,C,D)=C(B∨D),i∈r烆其中,、∧、∨与分别表示逐位“异或”操作、“与”操作、“或”操作和“非”操作,且B,C,D分别表示32比特字.本文中若未作特别说明,则fi表示fi=(qi-1,qi-2,qi-3).而消息字wi为消息字(m0,m1,…,m15)之一,其取值称为MD5的消息字扩展,细节如式(3)所示:常数ti的取值定义为如式(4)所示:<<<si表示循环左移si比特,相应的>>>表示循环右移.状态字更新的每步循环移位操作细节如式(5)所示:(si,si+1,si+2,si+3)=若64步状态更新完成则完成了MD5压缩函数的一次调用,需要利用最后4个状态字对链接变量Hi进行更新.2.2MD5碰撞对性质若存在两个任意不同的消息m和m(m,m∈{0,1})满足MD5(m)=MD5(m),则m和m称作一碰撞对.设|M|为消息m的长度并为分组块512bit的倍数,若进一步满足|m|=|m|,则对任意消息x,满足式(6)为APOP密钥恢复攻击的基础.2.3消息修改技术为了有效地搜索碰撞对,需要利用一些消息修改技术满足维持MD5差分路径的大量充分条件.比如在王小云等人[5]提出的碰撞攻击中,第1个分组块的差分路径有超过200个条件,但是优化后的计算复杂度只需224.8次MD5散列计算[17].文献[5]中提出了基本消息修改和高级消息修改技术满足维持差分路径所需的充分条件.根据碰撞攻击的属性,攻击者可以完全控制消息字(m0,m1,…,m15)的取值,因此,基本消息修改技术可以很容易在第一轮r1实现.若第1轮状态字qi的某比特值不满足条件,则攻击者只需修改相应的mi-1的值即可.事实上,完全可以直接设置qi(1i16)的充分条件为真,然后再计算对应wi=mi-1的值,如式(7)所示:mi-1=wi=(qi-qi-1)>>>si-qi-4-fi-ti,i∈r1为了满足第2轮r2的一些充分条件,可以通过修改第1轮r1的对应消息字mi,并维持因消息字修改所导致的第1轮差分路径的变化不传入第2轮(差分路径不变),即为高级消息修改技术.举例说,如果充分条件q25,31=q0,31不满足,则我们可以通过修改w25,26=m9,26的值或者说在未进行循环左移前引进一个226的差分,状态字q25的更新如式(8)所示:q25=q24+(q21+f25+(w25=m9)+t25)<<<5由于第1轮r1中状态字q10~q14的值直接受到m9的影响,若我们直接修改m9的相关值,则它们的对应取值都将改变,从而引起状态字q10~q14的改变(如式(10)~式(14)所示),即状态字q25之前的差分路径已经破坏.因此直接的消息修改毫无意义,即在此情形下基本消息修改技术不能使用.q9=q8+(q5+f9+(w9=m8)+t9)<<<7(9)q10=q9+(q6+f10+(w10=m9)+t10)<<<12(10)Page4q11=q10+(q7+f11+(w11=m10)+t11)<<<17q12=q11+(q8+f12+(w12=m11)+t12)<<<22q13=q12+(q9+f13+(w13=m12)+t13)<<<7(13)q14=q13+(q10+f14+(w14=m13)+t14)<<<12为了克服这个缺点,可选项之一是保持状态字q11~q14的值不变,而修改相应的消息字m10~m13的值,如式(10)~式(14)所示.然而,问题并未能真正解决.我们注意到m10和m11的值已经分别在第2轮r2更新状态字q22和q19时使用,也即之前所作修改消息字m10或者m11的值以维持r1的差分路径将导致第2轮q25之前的差分路径改变,因此该方法不可行.为了另寻出路,我们注意到消息字m8将在第2轮q25之后的q28中使用(w28=m8),即可以通过修改状态字q9的值但同时保持状态字q10的值不变以达到间接修改m9的目的.在状态字更新式q10中翻转m9,26的值,则循环左移后将在q10引入一个差分26.所以在式(10)中翻转q9,6的值,并设置一个额外的充分条件q8,6=q7,6以保证f10=f10(q9,6,q8,6,q7,6)的值不变.然后从值不变的q10中重新计算m9,如式(15)所示,则获得了期望的差分226.m9=(q10-q9)>>>12-q6-f10-t10(15)进一步,需要设置额外的充分条件q10,6=0来保证在更新状态字q11时m10和q11的值不变.类似设置条件q11,6=1以保证在更新状态字q12时m11和q12的值不变.最后,重新计算m12的值以保证q13的值也不变,保证了修改m8的值对第1轮q10之后的差分路径没有影响.如是,通过高级消息修改技术以概率1满足了充分条件q25,31=q0,31,并且维持了q25之前的差分路径不变.2.4通道通道的概念由Klima[9]提出,其本质优势就是基于自由消息位不仅实现了穷举搜索,而且最重要的是将搜索的起始点后移,从而极大降低了碰撞搜索的复杂度.dBB碰撞有47个充分条件需要满足(qi,31=q0,31{i≠64,i∈(r1,r2,r4)}).在dBB碰撞搜索中,状态字q10有充分条件q10,31=q0,31需要满足,在状态字q9中有充分条件q9,31=q0,31需要满足,因此,q9,31的值一旦确定满足则不能再更改,否则将会破坏之前的差分路径.除了保留q9,6做高级消息修改以满足条件q25,31=q0,31,状态字q9仍有30bit的信息无需特别设定,即为自由位.在状态字q10设置额外条件q10=231×(1∧q0,31)+0x00000000;在q11中设置条件q11=231×(1∧q0,31)+0x7fffffff,则在第25步(q25)中,可以通过翻转q9的任意自由位来启动一个新的碰撞对搜索而无需担心影响q25之前的差分路径.在状态字q25之后,dBB的差分路径有22个充分条件需要随机满足,而q9通道有多达30个自由位,也即在q9通道之内确定能够找到多个dBB碰撞对.因此,一旦到达q9通道,dBB碰撞对搜索的起始点就是q25,而不是未应用通道技术前的q1,从而极大提高了碰撞对搜索效率.应用q9通道之后,根据消息修改技术的原理,变化的q9对MD5第一轮差分路径所产生的影响在q13之后完全消除.即q9通道的应用不会影响到m13、m14和m15的取值.因此,可以固定m13、m14和m15的值(96位信息确定)来产生MD5碰撞,即对APOP密钥的可能字进行猜测(前11个字符).2.5APOP协议带认证邮局协议(APOP)是一种流行的基于散列函数的挑战和响应认证协议,一般被邮件服务器用来认证将要访问存储在服务器端邮件的用户身份.APOP是邮局协议———版本3(POP3)[1]的可选安全命令,用以提供额外的安全性,以避免在不安全的网络上传输明文密钥.设用户和服务器之间预先共享的密钥为passwd,由于邮件访问总是由用户发起,APOP的认证过程如下:(1)用户向认证服务器发送一个连接请求.(2)认证服务器随机产生一个满足一定限制条件的挑战数据C(格式化为一个消息标识符),将C发送至用户.(3)用户将其共享密钥passwd附加于接收到的挑战数据C之后,如式(16)计算其响应值R,然后将R发送至认证服务器.(4)一旦接收到响应R,认证服务器使用共享密钥如式(16)计算RS.服务器校验RS=R是否成立,若是,则用户通过验证.否则,验证失败.APOP协议的优势在于:若散列函数MD5为单向散列函数,应用挑战和响应的认证协议APOP后,网络监听者在一个POP3会话中将不会得到任何有关明文密钥的信息.APOP中挑战数据C为随机产生,该策略可以有效防止针对POP3会话的重Page50x3c)开头,且包含字符‘@’(0x40).APOP挑战数据的限制条件为(1)挑战数据必须以字符‘<’(十六进制数(2)挑战数据必须以字符‘>’(0x3e)结尾.(3)挑战数据中间不能够包含任何‘NULL’放攻击.(0x0)、‘<’、‘>’和‘\n’(0x0a)字符.3相关工作3.1密钥恢复攻击用户首先使用其邮箱帐号和密钥登录邮件服务器,然后才能访问其邮件.由于帐号一般都是以明文传送,为了保证其邮箱帐号的安全性,密钥的保密性成了唯一的选择,APOP的设计正是为了不在非信任的网络中传输明文密钥.然而,仍然有其他的方法来攻击用户的密钥,比如社会工程、特洛伊木马、穷举密钥搜索攻击和字典攻击等.3.1.1穷举密钥攻击穷举密钥攻击不仅直接而且简单,但是不太容易完成.比如一个极端的例子,若一个密钥仅包含一个二进制位,则其要么为‘0’要么为‘1’.我们仅需要一次试探,而不管该试探是否正确我们都能立刻知图1APOP“切片”密钥恢复攻击在APOP“切片”密钥恢复攻击的情形中,由于挑战数据必须为字节的倍数,因此,攻击者应用分而治之策略来进行APOP攻击时,密钥恢复的基本单位是一个字节而不是一个比特.APOP逐字节密钥恢复攻击的总体步骤如下(攻击者伪装成认证服务器):(1)生成一个末尾包含有可能密钥字cand的碰撞对(m,m),其中cand包含已经恢复的初始化为‘NULL’的若干密钥字known部分和正在猜测的字符l.从碰撞对消息中分离出挑战数据C=m-cand和C=m-cand,先将挑战C发送至用户.(2)从用户处接收响应R,然后将另一挑战C发送至用户.(3)从用户处接收另一响应R,并比较R=R道有关密钥的正确答案.事实上,一般的密钥由52个字母和10个数字构成(简单起见,我们忽略了特殊字符),如果该密钥仅有一个字符,应用穷举密钥攻击在最坏的情况下需要61次试探就能得到正确的密钥.但是,当密钥长度为8个字符时,应用穷举攻击则需要大概628-1≈247次试探才能获得答案,该计算量对于一般的计算机来说不太可行.因此,一般认为8位以上密钥的安全性较高.3.1.2“切片”密钥恢复攻击若MD5碰撞对(m,m)中的两个消息长度相等且为分组块512bit的倍数,则对任意消息x,总是满足MD5(m‖x)=MD5(m‖x).Preneel和vanOorschot[2]应用该属性实现分而治之策略“切片”攻击秘密信封方案MAC中使用的密钥.其攻击原理为:首先攻击者猜测首个未知的密钥比特的内容为b,然后攻击者据此生成一个最后一比特值为b的碰撞对(m,m);其次,攻击者从消息m和m中移除猜测值b,并将不含猜测值的两个消息进行在线MAC查询;最后,比较收到的两个响应值,若两值相等,则猜测比特值b正确.否则,猜测错误.如果能够对长度为64bit的密钥进行分而治之的密钥恢复攻击,则只需要64次查询(每次查询都必须首先生成一个碰撞对消息),而不是穷举搜索所需的264-1“次”查询.是否成立.若成立,则表明此次猜测的字符l是正确的,将l添加至已恢复密钥字known的尾部,继续下一个字符l的猜测;否则,猜测错误,转至步1以进行字符l的下一个猜测.3.2已有的APOP“切片”密钥恢复攻击2007年,Leurent[10]和Sasaki等人[11]分别独立提出了针对APOP的密钥恢复攻击,该攻击只能够恢复出APOP密钥中的前3个字符.该攻击的局限性在于其使用王小云等人[5]提出的MD5差分路径,由于该差分攻击的输入差分m14的最高位(MSB)存在差分,而MD5使用小头(little-endian)的数据存储方式,导致在APOP密钥恢复攻击中仅有m15可用作密钥字符的猜测(挑战数据C必须以字符‘>’结尾,因此,仅有3个字符可以被使用).Page62008年,Sasaki等人[12]对APOP的密钥恢复攻击进行了改进,通过生成一个“IV桥”来使用dBB碰撞,利用dBB碰撞的具有更多自由消息位来恢复更多的密钥字.改进后,用来恢复APOP密钥前11个字符的MD5碰撞对能够在约1s的时间内找到.该攻击方法的局限性在于:使用dBB碰撞进行密钥恢复攻击前,必须以大约242次MD5散列计算构造一个额外的“IV桥”.2009年,通过提出“比特自由碰撞”的概念,Wang等人[13]进一步对APOP的密钥恢复攻击进行了改进,主要在于能够有效减少需发送挑战的数目.“1比特自由碰撞”意味着若产生原始MD5碰撞对所需的复杂度为2t次MD5散列计算,则1比特自由碰撞的计算复杂度为22t次MD5散列计算.他们通过产生“1比特自由碰撞”将恢复APOP密钥前11个字符所需挑战数目减少了一半.4多位信息确定的碰撞对搜索为了在APOP密钥恢复攻击中应用分而治之策略,首要的问题是有效解决多位信息确定的碰撞对搜索.本节中,我们提出两个新的通道来控制碰撞对的更多比特值从而恢复更多的密钥字,而且提出一个群满足方案来改进碰撞搜索的效率;结合群满足方案和分而治之策略,实现高效的基于两个分组块且具有多位信息确定的碰撞对搜索,总体策略如下:(1)将第一个输入分组块的消息差分设置为ΔM0=(Δm8=231),该差分在文献[18]中提出,并将该分组块当作“IV桥”.具有该消息差分的两分组块被MD5散列函数处理后,输入的初始链接变量差分ΔH0=0转变成输出链接变量差分ΔH1=±(231,231,231,231),而ΔH1正是dBB碰撞所需要的输入链接变量差分(dBB条件差分).(2)将第2个分组块的输入差分设置为ΔM1=0以使用dBB碰撞,在该阶段运用新的通道、群满足方案和分而治之策略以控制更多消息位的取值.4.1新的通道为了能够恢复出APOP密钥的更多字符,我们在q20步和q17步分别提出了新的q1和q1通道.4.1.1q20的q1通道q20应用消息字m0进行状态字更新,注意到状态字q2有充分条件q2,31=q0,31需要满足,状态字q1有充分条件q1,31=q0,31需要满足,因此,q1,31的值一旦确定满足则不能再更改,否则将会破坏之前的差分路径.除了保留q1,18做高级消息修改以满足条件q20,31=q0,31,状态字q1仍有30bit的信息无需特别设定,也即为自由位.由于消息字m1已经在第2轮q20之前的q17使用,所以不能再对其进行任何修改,否则将破坏q20之前的差分路径.但是注意到m2~m5都未在MD5的第2轮的q20之前出现,因此,翻转q1后,根据m1重新计算q2,再直接修改相应的m2~m5来保持第1轮的q3~q6差分路径.通过以上方式可以成功构造q20的q1通道.在第20步(q20)中,我们可以通过翻转q1的任意自由位来启动一个新的碰撞对搜索而无需担心影响q20之前的差分路径.而在状态字q20之后,dBB的差分路径有27个充分条件需要随机满足,而q1通道有多达30个自由位,也就是说,在q1通道之内确定能够找到多个dBB碰撞对,因此,dBB碰撞对搜索的起始点就是q20.应用q1通道之后,根据消息修改技术的原理,q2对MD5第一轮差分路径所产生的影响在q6之后完全消除,即q1通道的应用,不会影响到m6~m15的取值.因此,可以固定m6~m15的值(320bit,40个字符)来对APOP的可能密钥字进行猜测.4.1.2q17的q1通道q17应用消息字m1来进行状态字更新,注意到状态字q2有充分条件q2,31=q0,31需要满足,状态字q1有充分条件q1,31=q0,31需要满足,因此,q1,31的值一旦确定满足则不能再更改,否则将会破坏之前的差分路径.除了保留q1,6做高级消息修改以满足条件q17,31=q0,31,状态字q1仍有30bit的信息无需特别设定,也即为自由位.由于消息字m0、m2至m4都未在MD5的第2轮的q17之前出现,因此,翻转q1后,我们可以直接修改相应的m1~m4来保持第1轮的q2~q5差分路径.在第17步(q17)中,我们可以通过翻转q1的任意自由位来启动一个新的碰撞对搜索而无需担心影响q17之前的差分路径.而在状态字q17之后,dBB的差分路径有30个充分条件需要随机满足,而q1通道也有30个自由位,即在q1通道之内能以极大概率找到1个dBB碰撞对,因此,dBB碰撞对搜索的起始点就是q17.应用q1通道之后,根据消息修改技术的原理,q1对MD5第1轮差分路径所产生的影响在q5之后完全消除.即q1通道的应用,不会影响到m5~m15的取Page7值.因此,可以固定m5~m15的值(352bit,44个字符)来对APOP的可能密钥字进行猜测.4.2群满足方案基于通道技术和高级消息修改技术,确定性地满足在MD5碰撞搜索中最后一个通道的首三步的所有充分条件,以达到加速碰撞搜索的目的.大部分之前的碰撞搜索算法[9,17]都是使用随机满足最后一个通道中的充分条件,但是我们使用群满足方案确定性地满足了首三步的充分条件,因而不仅可以极大地提高碰撞概率而且可以极大提高碰撞对搜索的效率.4.3应用狇9通道猜测密钥的前11个字符我们在dBB碰撞搜索中应用分而治之策略和群满足方案,达到控制输入消息最后96bit(预先设定的m13、m14和m15)的目的.相关描述如下.算法1.q9通道的群满足方案.输入:dBB条件差分,消息差分ΔM1=0,q1~q24的充分输出:q27,31=q26,31=q25,31=q0,311.随机设置q9自由位的值,根据q10重新计算m9的值.2.计算q25的值.3.ifq25,31≠q0,31thenendif4.计算q26的值.5.ifq26,31≠q0,31then条件,随机设置非条件位的值.值,若其中任意条件不满足,转至步1.1.基本框架.1.此处的dBB碰撞共有48个充分条件需要满足(一个额外的条件q23,22=1用来支持群满足方案),但我们能够在q25步使用完全的q9通道.应用分而治之策略将dBB碰撞搜索分成两个阶段:第1个阶段从q1~q24(有25个充分条件);第2个阶段从R25(q9通道可被应用)至最后的q64(有23个充分条件).1.1.从q1到q13,应用简单消息修改技术直接满足充分1.2.利用预设的m13~m15的值,依次计算q14~q16的1.3.计算剩余mi值,计算并校验q17~q24,若任意条件2.应用q9通道群满足方案满足首三步q25~q27的所有条件(共有3个条件),因此第2阶段共有20个充分条件需要随机满足,q9通道有28个自由位.3.计算并校验q28~q64,若任意条件不满足则转至步2.在上述框架中的步2直接调用了q9通道的群满足方案,接下来在算法1中对q9通道的群满足方案进行描述.不满足,转至步1.1.6.计算q27的值.ifq27,31≠q0,31then计算q9,24=q9,241.根据q10重新计算m9的值.计算q25、q26和q27的值.endif7.ifq27,31≠q0,31或者q26,31≠q0,31或者q25,31≠q0,31then转至步1.endif我们在算法2中对应用q9通道生成猜测密钥算法2.应用q9通道生成猜测APOP密钥前输入:dBB条件差分,消息差分ΔM1=0以及预先设定输出:m0,…,m12和已知的m13~m15构成dBB碰撞1.fori=1to13do前11位字符的碰撞对进行描述.11位字符的碰撞对.2.fori=14,16do3.计算m1、m6、m11、m0、m5、m10和m4的值.4.fori=17to24do5.计算m2、m3、m7和m9的值.6.调用群满足方案的算法1.7.根据q9计算m8的值.8.根据q13计算m12的值.9.fori=28to64do10.输出m0,…,m12.复杂度分析.应用分而治之策略后,算法2第1阶段和第2阶段分别有12和20个充分条件需要随机满足.由于应用了q9通道,碰撞搜索的起点从q1Page8移至q25(在该情形下,一旦算法进入了第2阶段,我们只需在q25开始碰撞搜索,而无需再从第1阶段重新开始).根据分而治之策略,两个阶段的复杂度可以独立计算.第1阶段的复杂度大约为29次MD5散列计算,第2阶段的复杂度为218次MD5散列计算.因此,该算法的总体复杂度为29+218≈218次MD5计算.应用普通的PC机(Intel2GHzCPU),具有96位信息确定的碰撞对以平均时间0.08s产生,这比Sasaki等人[12]的工作要快24倍.应用分而治之策略和群满足方案,生成“IV桥”的复杂度降至219次MD5散列计算,平均计算时间约为0.17s.由于生成用来恢复密钥前11个字符的碰撞对需要218次MD5散列计算,因此生成对应1比特自由碰撞对所需的计算量为236次MD5散列计算.我们在表1中与前人的工作进行了比较.工作IV桥(分组块1)分组块21比特自由碰撞文献[10]230文献[11]230文献[12]242文献[13]242本文4.4应用狇1通道猜测密钥的前43个字符我们在dBB碰撞搜索中应用分而治之策略和群满足方案,在q17应用q1通道达到控制输入消息最后352bit(预先设定的m5~m15)的目的.我们在算法3中对q1通道的群满足方案进行详细描述.算法3.q1通道的群满足方案.输入:dBB条件差分,消息差分ΔM1=0,q1~q16的充分输出:q19,31=q18,31=q17,31=q0,311.随机设置q1自由位的值,根据q2重新计算m1的值.2.计算q17的值.3.ifq17,31≠q0,31thenendif4.计算q18的值.5.ifq18,31≠q0,31thenendif6.计算q19的值.7.ifq19,31≠q0,31then个字符的碰撞对进行描述.43个字符的碰撞对.8.ifq17,31≠q0,31或者q18,31≠q0,31或者q19,31≠q0,31then转至步1.endif我们在算法4中对应用q1通道产生恢复前43算法4.应用q1通道产生恢复APOP密钥前输入:dBB条件差分,消息差分ΔM1=0以及预先设定输出:m0,…,m4和已知的m5~m15构成dBB碰撞1.fori=1to5doqi,31←q0,31,qi,j≠31←随机值.endfor2.fori=6to16do3.根据q2计算m1的值.4.调用群满足方案算法3.5.根据q1计算m0的值.6.根据q3计算m2的值.7.根据q4计算m3的值.8.根据q5计算m4的值.9.fori=18to64do10.返回m0,…,m4.复杂度分析.应用分而治之策略后,算法4的第1阶段和第2阶段分别有11和30个充分条件需要随机满足.由于应用了q1通道,碰撞搜索的起点从q1移至q17.根据分而治之策略,两个阶段的复杂度可以独立计算.第1阶段的复杂度大约为29次MD5散列计算,第2阶段的复杂度约为226次MD5散列计算.因此,该算法的总体复杂度为29+226≈226次MD5计算.应用普通的PC机(Intel2GHzCPU),具有352位信息确定的碰撞对以平均时间20s产生,这比Sasaki等人[12]的工作要快215倍.我们也极大改进了用来恢复APOP密钥不同长度字符碰撞对的搜索效率.在q24中应用q4通道,Page9能够以219次MD5散列计算产生具有256bit确定值的碰撞对(恢复密钥前31个字符),其平均时间约为0.15s.在q20中应用我们提出的q1通道,能够以224次MD5散列计算产生具有320位信息确定的碰撞对(恢复密钥前39字符),其平均时间约为4.13s.在q17中应用我们提出的q1通道,能够以226次MD5散列计算产生具有352位信息确定的碰撞对(恢复密钥前43个字符),其平均时间约为20s.若在第一个分组块中(“IV桥”)的最后4个字符应用消息位控制技术(针对m15的消息控制不会影响通道和分而治之的使用,所以复杂度并未增加),我们能够在理论上恢复密钥的前67个字符.针对具有多位信息确定的碰撞对搜索,我们在表2中与之前工作进行了比较.表2具有多位信息确定的碰撞对搜索比较方案文献[12]约1s5.86s238本文0.08s0.15s2245APOP的快速密钥恢复攻击239224字符‘@’.(1)分组块pre以字符‘<’开始并只包含一个(2)分组块mid充当“IV桥”的角色.(3)分组块end包含此次猜测密钥字的相关信为了实现APOP的快速密钥恢复攻击,我们首先伪装成邮件服务器,一旦用户发起连接请求,则从已产生的MD5碰撞对中提取挑战数据并将其发送至用户.为了避开挑战数据的限制条件,我们将挑战数据分为3个部分,每部分为512bit的分组块,如下所示.息cand,且cand附加于‘>’之后.我们从碰撞对中导出一个挑战数据对(C,C),其挑战数据中C=pre‖mid‖(end-cand)而C=pre‖mid‖(end-cand).在mid和mid之间仅有比特m8,31的值不同,满足m8,31=m8,31的关系.如果邮件用户接收到C和C,将当成两个完全不同的挑战.因此,我们可以使用C和C来进行APOP密钥恢复攻击的密钥字猜测.在表3中,给出了一个由3个分组块组成用来恢复APOP密钥前43个字符的碰撞对实例.可能密钥字cand位于第3个分组块end的尾部,其内容为选自“Bible”开头的“InthebeginningGodcreatedtheheavenand”的43个字符.第1个分组块pre的64个字符内容为“<TheHolyBible.KingJamesVersion.TheOldTestamentGennesis@”.第2个分组块mid是一个精确的“IV桥”,其为dBB提供链接变量差分ΔH2=-(231,231,231,231).需要指出的是,构造该碰撞对所需的时间约为20s.复杂度表3用来恢复APOP密钥前43个字符的碰撞对实例H0preH1=H1midmidH2H2endH3=H35.1APOP本地快速密钥恢复攻击我们在本地发起一个APOP快速密钥恢复攻击,该实验基于一个支持APOP认证协议的开源软件“Evolution”的较老版本,我们在软件代码级修改了自动邮件访问的条件,将一般由用户或者计时器发起的访问改为从特定端口收到一个信号发起.我们在本地PC(Intel2GHzCPU)伪装成邮件服务器(S),U代表邮件用户.针对APOP的逐字节密钥恢复攻击步骤描述如下.战数据对C和C,发送一个邮件访问信号至用户U.1.S从包含可能密钥字cand的碰撞对数据中抽取挑2.一旦收到信号,U尝试连接S.3.S发送挑战数据C至U.4.U计算R=MD5(C‖passwd),并将其发送至S.5.一旦接收到R,S发送另一邮件访问信号至U.Page106.基于收到的信号,U尝试连接S.7.S发送另一个挑战数据C至U.8.U计算R=MD5(C‖passwd)并将其返回至S.9.S校验R是否和R相等,若是,则此次猜测的可能密钥字cand正确,若密钥已经完全恢复,则停止.否则,对密钥可能字cand进行下一轮的猜测.怎样判断密钥已经完全恢复.在如上APOP密钥恢复攻击的步9,需要判断密钥是否已经完全恢复.我们将这个问题解决如下:(1)总是先假定密钥passwd已经完全恢复,则输入消息C和passwd之后的信息就是填充数据padding.(2)计算MD5(C‖cand)并比较其是否与R相等,若是,则确认密钥已经完全恢复,攻击停止.否则,密钥仍有未知的密钥字有待进一步地恢复.实际性分析.在实验中,假定本地恶意软件能够修改邮件客户端的行为,这在实际生活中是普遍存在的.此外,绝大部分的用户习惯勾选记住密钥的选项,省却每次输入密钥的麻烦.所以该实验一定程度上模拟了由恶意软件发起的攻击,并将该攻击“放大化”处理.我们还假定密钥仅由52个字母和10个数字组成,该假设能反映真实生活中一般密钥的取值范围.一般来说,7位以上的密钥被认为是安全的.在攻击中,我们可以快速地恢复出具有6~31个字符的密钥,而且能够在实际时间内恢复长达43位的密钥.比如我们能够在大约1min的时间内恢复长达11个字符的密钥,不同长度字符密钥恢复攻击所需的平均时间如表4中所示.表4恢复具有不同长度字符的密钥所需平均时间APOP的本地快速密钥恢复攻击表明APOP的安全性极低,且其它基于MD5的应用需要严谨的安全评估.6总结我们提出两个新的通道以恢复APOP密钥的更多字符,并提出一种“群满足方案”极大降低了具有多位信息确定的MD5碰撞对搜索的复杂度;产生一个用来恢复APOP密钥前31个字符的碰撞对的平均时间比文献[12]中的工作要快25倍;产生一个用来恢复APOP中密钥的前39个字符和43个字符碰撞对的平均时间比文献[12]中的工作要快215倍.这些技术还可以用来降低搜索包含APOP密钥的前11个字符的1比特自由的碰撞对的复杂度.
