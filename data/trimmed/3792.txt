Page1XML空间频繁变化结构挖掘方法李巍李雄飞郭建芳(吉林大学计算机科学与技术学院长春130012)(符号计算与知识工程教育部重点实验室长春130012)摘要XML数据在实际使用过程中不断发生改变,针对XML数据动态可变的特点,提出一种根据XML数据变化过程挖掘XML空间频繁变化结构SFCS(SpatialFrequentlyChangingStructure)的方法,首先提出XML子结构空间度量方法,通过结构空间变化度SSCD、版本空间变化度VSCD和空间变化程度SCD这3个度量值衡量XML子结构的空间变化频繁性并提出SFCS定义.进一步,提出一种用于保存XML空间变化信息和发现SFCS的数据模型SC-DOM,论证了XML编辑操作对子结构空间的影响并据此提出SC-DOM状态动态迁移方式,最后提出根据SC-DOM发现SFCS的算法并讨论算法复杂度.实验结果表明SFCS是频繁变化的结构,使用SC-DOM模型进行SFCS挖掘是有效且可扩展的.关键词数据挖掘;XML;频繁模式;空间频繁变化结构;SC-DOM1引言文档、XML文档、EmailMessage等)已经广泛应用于互联网信息存储与信息交换领域.1998年,W3C制定XML(eXtensibleMarketLanguage)标准格式随着互联网的发展,半结构化数据(如HTML(XML1.0).XML文档是典型的半结构化数据,具Page2有层次性、自述性、动态可变性等特点,已经成为Web数据管理标准格式[1].另外,一些非互联网的应用也使用半结构化数据格式存储信息(例如,OpenXML是MicrosoftOffice文档的存储格式、OpenDocument是OpenOffice文档的存储格式).半结构化数据编码方式与结构化数据(如关系型数据库中的数据、Excel数据等)不同,所以传统的结构化数据处理技术并不适用于半结构化数据.XML频繁子结构挖掘是半结构化数据挖掘的重要研究课题之一,其主要思想是在给定XML文档集中提取具有指定频繁特征的子结构集,可分为静态XML频繁结构挖掘和动态XML频繁结构挖掘.Han等人[2-3]指出频繁模式挖掘的一些方法及其在Web挖掘领域的应用.TreeMiner[4]、gSpan[5]、PathJoin、PCITMiner[6]、CMTreeMiner[7]、EXiT-B[8]、DryadeParent[9]、TreeNat[10]、BuXMiner[11]和IncTreeNat[12-13]是典型XML频繁结构挖掘方法,这些方法的主要工作是在给定静态文档数据集中挖掘频繁出现的子结构.然而在实际应用中,一些XML文档随时间推移而动态变化,如图1所示.学者们开始研究在动态XML文档集中挖掘频繁结构的方法.Rusu等人[14]图1XML文档动态变化过程频繁子结构挖掘技术已经应用到生物信息[20]、XML数据查询、XML文档分类[21]和XML文档聚类[22-23]等领域.目前还没有根据XML子结构空间变化情况挖掘频繁变化结构方法,而研究XML空间频繁变化结构挖掘方法是有意义的,例如下面关于民族图案半结构化数据模型的例子.民族图案及其图案基因①可用半结构化数据模型存储[24],其优点是可表示图案历史变化且便于对民族图案文件进行数据挖掘和知识发现.图2为某民族家庭在60年间手工编提出了在动态XML文档集中挖掘关联规则的方法,Bifet等人[12-13]提出了在动态树形数据流中挖掘频繁子树的方法IncTreeNat.Zhao等人提出H-DOM模型并提出了基于H-DOM模型挖掘频繁变化结构FCS的方法[15]和挖掘频繁变化语义结构FASST的方法[16].Zhao等人[17]还提出了一些针对XML增量可挖掘的新知识,包括频繁变化结构FCS、冰冻结构FS、关联规则和变化模式等,并介绍了XML增量挖掘的相关应用领域.频繁变化结构FCS挖掘是指在XML文档历史变化过程中挖掘频繁且显著变化的子结构,但FCS挖掘没有约束XML变化类型和变化趋势,在高动态数据集中挖掘FCS,挖掘结果包含大量子结构,不方便用户使用和分析.Chen等人提出了挖掘最大频繁变化子结构FCSP[18]的方法,并在此基础上提出了挖掘频繁一致变化子结构FRACTURE[19]的方法.频繁一致变化子结构FRACTURE是指在XML文档历史变化版本序列中同时发生频繁改变的频繁变化结构集,是FCS子集.Chen等人分别基于Apriori算法和FP增长算法实现了FRACTURE挖掘方法.Chen等人还提出了MaximalFRACTURE概念用于消除FRACTURE挖掘结果的大量冗余.织的4张地毯图案,表现了同风格地毯的历史变化情况.①国家“九七三”重点基础研究发展规划前期研究专项课题Page3图2中的地毯图案由5种民族图案基因组成,如图3所示.在民族图案半结构化数据模型中,每种图案基因是民族图案的一个子结构.对给定半结构化民族图案数据集进行频繁变化结构FCS挖掘,可以发现在图案历史变化过程中频繁发生改变的图案基因.如图2所示地毯图案集,其频繁变化结构为巴旦木、维族方砖、葡萄和植物叶子.然而在实际应用中,往往不只是关心图案基因变化是否频繁,而更加关注图案基因的空间发展趋势,因为这些图案基因的空间发展趋势代表了民族文化的发展情况,而FCS却不具备发现子结构空间发展趋势的能力.针对FCS存在的问题,我们提出空间频繁变化结构SFCS(SpatialFrequentlyChangingStructure).SFCS是指时间维满足频繁变化条件且空间维变化趋势达到用户关注期望的XML文档子结构,如图1所示,以c为根节点的子树就是SFCS.在图2所示的民族图案半结构化数据集中,满足SFCS条件的子结构为巴旦木和植物叶子,在地毯图案历史变化过程中,SFCS表示子结构可能是逐渐被废弃的图案基因(如巴旦木)或逐渐被使用的图案基因(如植物叶子).因此SFCS挖掘,可发现随时间演变使用程度兴衰变化的图案基因,其结果可用于文化遗产数字化修复与数字化传承等领域研究.SFCS挖掘还具有另外一些应用价值,如电子商务站点,针对交易记录Web数据进行SFCS挖掘,可发现横向空间频繁变化结构,这些结构表示动态热销商品.本文第2节介绍空间频繁变化结构相关定义;第3节介绍空间变化DOM模型SC-DOM的定义、工作原理及性能评估;第4节介绍实验结果并对结果进行分析;最后总结全文并展望下一步工作.2空间频繁变化结构文档对象模型(DocumentObjectModel,DOM)以一种独立于平台和语言的方式访问和修改一个文档的内容和结构,是表示和处理HTML或XML文档的常用方法.根据DOM规范,可以将一篇XML文档建模成有序标签树结构.2.1有序标签树基本定义与符号表示本文使用符号“T”表示一篇XML文档对应的有序标签树,“layer(node)”定义为树T节点node的层数即路径长度(规定根节点层数为0),“n_num(T,l)”为树T的第l层的节点数,“child(v)”为节点v的直接孩子数,即节点v的出度.使用符号“depth(T)”和“width(T)”分别表示树T的深度和宽度,树的深度定义为最大叶节点路径长度,depth(T)=max{layer(leafi)|leafi为树T叶节点},树宽度定义为各层节点树最大值,width(T)=max{n_num(T,i)|0<idepth(T)}.有序标签树T1与T2的“合并结构”[17]用符号“T1∪T2”表示,T1∪T2的节点集为T1与T2节点集的并集,T1∪T2的边集为T1与T2边集的并集,如图4所示.2.2空间编辑操作XML文档的有序标签树模型提供插入叶子、删除叶子、内部插入、内部删除、更新、移动、插入子树和删除子树8种编辑操作.其中前5种操作为基本编辑操作,后3种操作为复合编辑操作.复合编辑操作由多次基本编辑操作组成.因为①更新操作不改变树的深度或树的宽度;②移动操作、插入子树操作、删除子树操作、树内部插入或删除操作可以分解为多次插入叶子和删除叶子操作,所以本文规定能够改变有序标签树空间大小的空间编辑操作类型包含插入叶子操作与删除叶子操作.2.3空间属性定义定义1.空间纵度.树T的空间纵度VD(T)用于综合表示树的垂直纵深程度.设树T的叶节点集合为{leaf1,leaf2,…,leafn},树T的空间纵度VD(T)定义为VD(T)=1由定义1可知,VD(T)由两部分之积组成,n×∑n1i=1Page4与树深度的贴近程度,长度与depth(T)接近的树枝数量越多,树T的空间纵度越大.由于这部分没有体现树深度depth(T)本身对空间纵度的影响,会出现以下情况:设T1与T2是两篇XML文档对应的有序标签树模型,如图4所示.树T1具有两个叶节点,其路径长度都为2,树T2也具有两个叶节点,其路径长度都为3,则树T1与树T2空间纵度第一部分值为树T1空间纵度第一部分值:1树T2空间纵度第一部分值:1为体现树深度对树空间纵度的影响,在VD(T)定义中引入与树深度成正比的系数Δ,即Δ(depth(T)).Δ应满足以下两个条件:条件1.0<Δ(depth(T))<1;条件2.f:depth(T)→Δ(depth(T))单调递增.根据对数函数单调递增性质,将系数Δ定义为Δ(depth(T))=ln(depth(T)+1)定义2.空间广度.树T的空间广度HD(T)用于综合表示树的水平延展程度.树T的空间广度定义为HD(T)=1空间广度的系数Δ定义为定义3.空间变化结构.设S为XML文档有序标签树模型中一个子结构,Si与Si+1为XML变化过程中子结构S的两个相邻版本.ΔVDi(S)=|VD(Si+1)-VD(Si)|为子结构S的纵度增量,ΔHDi(S)=HD(Si+1)-HD(Si)为子结构S的广度增量.如果ΔVD(Si)≠0或ΔHD(Si)≠0,则称子结构S为空间变化结构.定义4.结构空间变化度.结构空间变化度(StructuralSpatialChangingDegree,SSCD)表示相邻版本间子结构S的空间纵度和空间广度上变化情况.子结构S的结构空间变化度定义如下:SSCDi(S)=|ΔVDi(S)|×λ+|ΔHDi(S)|×(1-λ),其中,λ为空间变化关注度,是用户输入的参数;λ∈[0,1],用于设置对子结构纵度变化或广度变化的关注程度.定义5.版本空间变化度.版本空间变化度(VersionSpatialChangingDegree,VSCD)从时间角度衡量子结构S在历史变化过程中的空间变化频率,即表示在XML文档的n版本中,子结构S发生空间变化的比例.版本变化度定义如下:定义6.空间变化度.空间变化度(SpatialChangingDegree,SCD)表示在XML变化过程中,子结构S的SSCD达到用户关注的次数所占S空间变化次数的比例.空间变化度定义如下:其中,α为用户输入参数,用于指定用户对子结构S在相邻两个版本间空间变化的关注程度.定义7.空间频繁变化结构.空间频繁变化结构(SpatialFrequentlyChangingStructure,SFCS)是在XML文档历史变化过程中,相邻版本间空间变化程度及所有版本空间变化率都达到用户关注程度的子结构.设(X1,X2,…,Xn)为XML文档在历史变化过程中的n个版本,(X1,X2,…,Xn)对应的有序标签树结构为(T1,T2,…,Tn).设S为一子结构S∈∪n间变化度”、“版本空间变化度”、“空间变化度”阈值分别为α、β、γ.称子结构S是空间频繁变化结构SFCS,当且仅当子结构S满足以下两个条件:(1)VSCD(S)β.(2)SCD(S,α)γ.3空间变化DOM模型SC-DOM3.1SC-DOM定义空间变化DOM模型(SpatialChangingDOM,SC-DOM)是带有树水平广度和垂直纵度信息的树形模型,是DOM模型的扩展.SC-DOM能够记录XML空间动态变化过程,可以避免高费用的XML文档差异比较过程并方便发现空间变化结构SFCS.SC-DOM定义如下.定义8.SC-DOM.SC-DOM是一个五元组Page5(V,E,SISs,f,r).其中:V是树节点集合;E是边的集合,E={(x,y)|x,y∈V},表示x是y的父亲节点;SISs是空间信息结构体(SpatialInformationStructure,SIS)的集合,每个空间信息结构体SIS(v)都保存以v为根的子树的宽度与深度信息;f是节点v到SIS(v)的映射f:v→SIS(v),其中v∈V,SIS(v)∈SISs;r表示树根节点.空间信息结构体SIS(v)保存以v为根节点的子树在发生变化时树深度和树宽度信息,SIS(v)定义为六元组:(V,N,P,PL,D,W),其中,V是版本号;N是子树的节点总数(不包含根节点);P是子树的路径数,即子树的叶节点数;PL是子树各个路径的路径长度之和,PL=∑P树的深度;W是子树的宽度.本文以图1所示的XML动态变化过程为例演示SC-DOM工作过程.图5是根据图1初始版本version=1的XML文档构建的SC-DOM模型.3.2SC-DOM模型动态维护由XML初始版本构建SC-DOM模型之后,SC-DOM模型会根据XML空间编辑操作动态维护自身,保存XML各个子结构的纵度和广度变化信息,从而达到在避免XML差异比较的情况下完成空间频繁变化结构SFCS挖掘.性质1.在非叶节点n下插入新节点nins,包含nins节点的所有子树都有:①路径数增加1;②深度不变;③空间纵度不增;④空间广度不减.证明.设节点n是非叶节点,以n为根的子树路径数为l,树深度为d.由于n是非叶节点,所以在节点n下插入新叶节点nins后,以n为根的子树叶节点数增加1.由于树的叶节点数等于树的路径数,节点,包含节点n的所有子树都有:所以插入后nins以n为根的子树的路径数为l+1,故所有包含n的子树的路径数增加1(①).由于n是非叶节点,所以以n为根的子树的深度d1.故新插入节点nins在以n为根子树的第1层.新插入节点nins的路径长度小于等于d.包含nins节点所有子树深度不发生改变(②).包含nins节点所有子树空间纵度不增(③).因为①得证,因此包含nins节点所有子树宽度不减,故包含nins节点所有子树空间广度不减(④).性质2.在路径数大于1的节点n下删除叶①路径数减少1;②子树深度不变;③空间纵度不减;④空间广度不增.证明.略.性质3.在叶节点n下插入一个新叶节点nins,包含nins节点的所有子树路径长度总和增加1.证明.设n的祖先节点集合为P={p|n是p的子孙节点}.p∈P,由于n是p的子孙节点,n是叶节点,因此以p为根的子树含有一条从p到n的路径Pathp→n.故以p为根的子树的路径长度之和是p到n的路径长度加上其它路径长度,PL(p)=∑PL其它+PLp→n.由于在n下插入新叶节点nins,因此新路径长度PLp→nins=PLp→n+1.故以p为根的子树的新路径长度之和即包含nins节点的所有子树的树路径长度总和增加1.性质4.在路径数等于1的节点n下删除叶节点ndel,包含ndel节点的所有子树路径长度总和减少1.证明.略.SC-DOM采用自底向上策略进行动态维护,从Page6发生变化的叶节点至树根节点上传变化信息,迁移相应SIS状态.设在版本i时,空间编辑操作为节点n下插入或删除叶节点n.根据SIS定义,新插入节点n对应的SIS状态为SIS(n)=[i,0,0,0,0,0],新删除节点n对应的SIS状态为SIS(n)=[i,-1,-1,0,-1,-1].在上传过程中,设需要更新的节点为np,np的前一次变化版本为i.设孩子节点向父节点传递值为v.根据性质1至性质4,动态信息上传策略和SIS状态迁移规则如表1(插入叶子操作)和表2(删除叶子操作)所示.在表1和表2中,Label(i)为取版本i时Label值的操作,例如N(1)表示是取版本1时节点总数N的值.表1节点狀狆的犛犐犛状态迁移规则(插入操作)SIS字段情况说明上传值SIS字段值更新版本V-i节点总数N-路径数P路径长度和PL深度Dchild(n)≠0-宽度W表2节点狀狆的犛犐犛状态迁移规则(删除操作)SIS字段情况说明上传值SIS字段值更新版本V-i节点总数N-路径数Pchild(n)=1-0,if(n=np)路径长度和PL深度Dchild(n)=1vmin{v+1,D(i)}宽度Wchild(n)=1-0,if(n=np)在图1所示的XML文档动态变化过程中,版本1至版本2的空间编辑操作为insleaf(c,h,2),SC-DOM采用自底向上策略上传动态信息,即动态信息由节点h上传到节点c再上传到节点a.根据SIS定义和SIS状态迁移规则,节点h、c、a的SIS状态迁移方法如下:①节点h是新插入节点,因此SIS(h)=[2,0,0,0,0,0].②节点c在初始SIS后新建一SIS,新SIS的版本号V=2,节点总数N(2)=N(1)+1=3,因为child(c)≠0,所以路径数P(2)=P(1)+1=3,所以路径长度和PL(2)=PL(1)+0+1=3,所以深度D(2)=D(1)=1;所以宽度D(2)=D(1)=1.最后,节点c的SIS为SIS(c)=[1,2,2,2,1,2]→[2,3,3,3,1,3].③与节点c的SIS状态迁移过程类似,迁移后节点a的SIS状态为SIS(a)=[1,6,4,8,2,4]→[2,7,5,10,2,5].图6刻画了图1中XML文档变化过程,在图5所示的SC-DOM初始模型基础上,依据表1与表2的SIS状态迁移策略,得到迁移后的SC-DOM模型.3.3基于SC-DOM的SFCS发现算法从SC-DOM可以直接计算以任意节点v为根的子树Tv的空间纵度VD(Tv)和空间广度HD(Tv),按照定义7计算Tv是否为SFCS.基于SC-DOM的SFCS发现算法遍历XML有序标签树模型一次,算法复杂度为O(|T|),算法如下(C++描述):voidSFCSMining(λ,α,β,γ){1.for(XML有序标签树所有节点v){2.intSCDCnt=0;3.doubleVSCD=0;4.for(inti=1;i<n;++i){5.doubleVDi1=PLi/(Di×Pi)+Δ(Di);6.doubleHDi1=Ni/(Di×Wi)+Δ(Wi);7.doubleVDi2=PLi+1/(Di+1×Pi+1)+Δ(Di+1);8.doubleHDi2=Ni+1/(Di+1×Wi+1)+Δ(Wi+1);9.doubleDeltaVD=VDi2-VDi1;10.doubleDeltaHD=HDi2-HDi1;11.if(DeltaVD>0‖DeltaHD>0)12.VSCD+=1/(n-1);13.if((DeltaVDλ+DeltaHD(1-λ))>=α)14.SCDCnt++;Page715.}16.if(VSCD>=βSCDCnt/((n-1)VSCD)17.以v为根的子树为SFCS.18.}19.}}以图6所示的SC-DOM为例,设阈值λ=0.5,α=0.05,β=0.05,γ=0.6(阈值设置方法参考4.1节),基于SC-DOM的SFCS挖掘过程如下:首先遍历SC-DOM每个节点并迭代n-1次(算法第4行),本文以节点a和节点c为例,然后求每个节点各版本空间纵度VD与空间广度HD及相应的纵度增量ΔVD和广度增量ΔHD.根据算法SFCSMining第5~10行,节点a和c的空间纵度及增量、空间广度及增量如表3所示.节点c节点a迭代VD1VD2HD1HD2ΔVDΔHD10.52350.52350.43570.431700.004020.52350.42600.43170.32890.09750.102830.42600.52350.32890.43170.09750.102840.52350.52350.43170.435700.004010.40940.40940.40940.523500.114120.40940.66670.52350.34900.25730.174530.66670.40940.34900.52350.25730.174540.40940.40940.52350.409400.1141由算法第10、11行可知,节点a和c的版本空间变化度VSCD都为4×1/4=1,说明以a为根的子树和以c为根的子树在各个版本都发生改变.由算法第13、14行可知,节点a的结构空间变化度计数SCDCnt值为2而节点c的结构空间变化度计数SCDCnt值为4,说明以节点c为根的子树空间变化程度达到用户关注程度(阈值α)的次数较多.由算法第16、17行可知,以c为根的子树是SFCS而以a为根的子树不是SFCS,因为以a为根的子树的空间变化度SCD=SCDCnt/((n-1)×VSCD)=2/4=0.5,小于设定的阈值γ=0.6.可见,虽然以a为根的子树和以c为根的子树都发生同样的变化,但以a为根的子树左半部分不发生改变,所以以a为根的子树空间变化没有以c为根的子树剧烈,所以以a为根的子树不是SFCS而以c为根的子树是SF-CS.当阈值降低到某种程度后(如γ=0.5),以a为根的子树就成为SFCS.3.4性能分析情况1.使用XML差异比较算法挖掘SFCS.在不使用SC-DOM,而直接使用XML文档差异比较算法(以XDiff[25]为例)的情况下,SFCS挖掘可分为两个过程:①XML相邻版本间差异比较过程;②SFCS挖掘过程.设XML文档相邻两个版本Xi与Xi+1的有序标签树表示为Ti和Ti+1,|T|表示树T的节点数,deg(T)表示树根节点的出度,则Xi与Xi+1差异比较的复杂度为O((|Ti|×|Ti+1|)×max{deg(Ti),deg(Ti+1)}×log2(max{deg(Ti),deg(Ti+1)}))[24].对于n个版本的XML文档,共需要进行差异比较的次数为n-1次,所以阶段①的综合时间复杂度为O((n-1)×(|Ti|×|Ti+1|)×max{deg(Ti),deg(Ti+1)}×log2(max{deg(Ti),deg(Ti+1)})),其中i=1,2,…,n-1.第②阶段使用第①阶段的结果遍历各个版本的有序标签树一次,所以阶段②的复杂度为O(max{|Ti|}),其中i=1,2,…,n-1.所以情况1的综合时间复杂度为O((n-1)×(|Ti|×|Ti+1|)×max{deg(Ti),deg(Ti+1)}×log2(max{deg(Ti),deg(Ti+1)})).情况2.使用SC-DOM.使用SC-DOM模型,SFCS挖掘过程可分为3个子过程:①SC-DOM模型构建;②SC-DOM状态迁移维护;③SFCS计算过程.阶段①遍历有序标签树1次,所以该阶段的复杂度为O(max{|Ti|}).阶段②动态维护SC-DOM,设XML文档相邻版本间的平均变化次数为CR,则第②阶段的复杂度为O((n-1)×CR).阶段③需要遍历维护后的SC-DOM模型一次,此时的SC-DOM模型节点数是各个版本有序标签树的合并结构,所以阶段③的复杂度为O(|∪n其中i=1,2,…,n.因为|∪n以情况2的综合时间复杂度为O(max{(n-1)×CR,|∪n的复杂度,证明略.4实验结果与分析4.1实验环境与数据来源实验在IntelCore2QuadQ95503.83GHz(4cores)CPU,2048MBRAM,Windows7操作系统的PC上完成,在Eclipse集成开发环境下使用Java语言实现,实验中使用Dom4J开源API库进行XML文档解析与DOM建立.Page8实验数据来源于人工生成的XML数据集.首先人工编辑一个规范的DTD文档,在该DTD文档中包含可重复元素(“+”元素,“”元素,“?”元素),使得根据这个DTD生成的XML文档的某些子结构的空间大小可以发生变化.然后使用IBMXMLGenerator验证DTD的正确性并根据该DTD文档生成若干个初始XML文档.最后根据不同的实验目的使用人工编写的XML版本生成器XMLFileGen生成若干版本(XMLFileGen根据特定的DTD文档对XML文档中可变化元素进行随机改变).实验实现了H-DOM模型[15]和SC-DOM模型并实现了基于H-DOM的FCS挖掘算法和基于SC-DOM的SFCS挖掘算法.因为H-DOM模型和SC-DOM模型都是内存模型,当XML数据集超过一定规模(本实验环境数据集规模上限约为50000篇XML文档)后,不能将所有XML文档在内存中建立模型.为测试模型的可扩展性,实验在外部存储器上保存H-DOM和SC-DOM部分数据.图7是以XML格式保存H-DOM数据示例.在实验数据随机生成、FCS挖掘和SFCS挖掘过程中,需要用户设定一些阈值或参数,这些阈值或参数的符号表示见表4.符号相应参数λ空间变化关注度α结构空间变化度阈值NV文档变化版本数β版本空间变化度阈值CR文档每次最大变化节点数γ动空间变化度阈值说明:实际使用中,用户需要设置阈值α、β和γ.经对阈值物理意义分析和实验经验总结,现为用户提供阈值设置建议:阈值α和β可设置较小值,使得只要空间发生变化的子结构都能够被考虑是否是SFCS,阈值γ可根据实际需求进行设置,控制挖掘的SFCS空间变化程度满足用户关注程度.经实验证明,阈值大小不会影响SFCS挖掘时间.4.2实验结果在文档变化版本数NV=5不变且阈值α、β和γ的取值均为0.1时,相邻版本间变化节点数目变化情况下的性能分析如图8所示.图8相邻版本间节点变化数目对SC-DOM的影响随着CR增大,SC-DOM模型生成时间增加,SFCS结构挖掘时间也相应的增加.即SC-DOM模型建立和维护、SFCS挖掘的计算规模与XML变化程度成正比.当CR增大时,模型的规模在不断上升,遍历模型时间增加.随着CR增加,SFCS挖掘时间占总执行时间比重增加.如CR=10000时,SFCS挖掘时间约占总执行时间的1/3,CR=30000时,SFCS挖掘时间与模型建立与维护时间基本相等,即占总执行时间的1/2.版本数NV=5不变,相邻版本间变化节点数CR=100不变情况下,结构空间变化度阈值α、版本空间变化度阈值β和空间变化度阈值γ与SFCS挖掘数目之间关系如图9所示.图93个变化度阈值与所挖掘SFCS数目之间的关系可知,当β=0.1,γ=0.1,结构空间变化度α取不同值时,挖掘空间频繁变化结构SFCS数量与阈值α成反比,当α=0.7时,挖掘SFCS数量为0.当α=0.1,γ=0.1时,挖掘SFCS数量与阈值β成反比,SFCS挖掘数量随阈值β增大而减少.当α=0.1,β=0.1时,SFCS挖掘数量与阈值γ成反比,说明SFCS挖掘数量结果与3个阈值α、β和γ成反比,因此在实际应用中,用户需要实际情况在SFCS挖掘数量与阈值α、β和γ选取做折衷选择.上述实验均在时间区间[141ms,172ms]内完成,说明阈值α、β和γ值的变化不影响SC-DOM模型建立维护和SFCS挖掘的运行时间.Page9当阈值α、β和γ分别为0.17、0.17和0.2时,基于H-DOM的FCS挖掘和基于SC-DOM的SFCS挖掘实验结果如表5所示.NVCR/%文档数FCS数FCS挖掘102550001956385621021180611025750030131174691606417474102510000398143970318812395231025125005015864109248816548210251500061254986563120110015210251750069514154530358411475721025200007912422540640530265249SFCS挖掘时间与数据集规模成正比,与FCS挖掘时间基本相同,所以SC-DOM与H-DOM一样具有良好扩展性.对于相同数据集,挖掘SFCS数量少于FCS数量,且集SFCS是集FCS的真子集,说明SFCS本身就是FCS,我们的定义没有改变SFCS是频繁变化结构的特性.综上可知,SC-DOM建立维护费用和SFCS挖掘费用与XML文档规模及XML文档相邻版本变化节点数成正比.阈值α、β和γ影响SFCS挖掘数量,具体关系为挖掘的SFCS数与阈值α、β和γ成反比.各阈值改变不影响SFCS挖掘时间.算法具有良好的可扩展性并保持挖掘结果的频繁性.5结论本文提出在一系列XML文档动态变化版本中挖掘XML文档中空间频繁活跃改变的子结构(SFCS)的方法.SFCS即在时间角度保持了版本变化频繁性,又在空间角度保持了纵度广度变化频繁性.SFCS挖掘解决了FCS无法表示子结构空间变化程度的问题,可以应用在关注半结构化数据子结构空间频繁变化的应用领域,如民族图案保护、维护和传承.本文还提出用于发现SFCS的SC-DOM模型,通过SC-DOM模型可以在避免XML版本差异比较的前提下进行SFCS发现.实验验证了方法的可行性和不同参数设置对SC-DOM模型性能及SFCS挖掘结果的影响.下一步工作可研究XML文档变化版本数控制策略(似流挖掘的窗口策略)和使用SFCS为特征的分类与聚类问题.
