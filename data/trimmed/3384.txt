Page1动态不确定环境下多目标路径规划方法魏唯欧阳丹彤吕帅冯宇轩(吉林大学计算机科学与技术学院长春130012)(吉林大学符号计算与知识工程教育部重点实验室长春130012)摘要提出一种在动态不确定环境下求解多目标问题时快速调整移动路径的方法.首先提出采用逆向多目标启发式搜索进行全局规划,求解问题的最优路径集合;然后提出动态多目标路径规划方法,先根据当前观测进行全局规划,在移动过程中探测到不一致的环境信息时,通过对先前搜索中部分信息的重用,在全局规划的基础上进行增量重规划,调整当前状态与目标状态之间的移动路径.研究结果表明:采用增量重规划的求解方法通过搜索信息的重用提高求解效率,能够有效地处理动态不确定环境下的多目标路径规划问题.关键词多目标路径规划;动态不确定环境;启发式搜索;全局规划;增量重规划1引言智能研究领域的重要分支.求解路径规划问题时,如果假定环境信息是静态完全可知的,可利用一次性的全局规划来获得一条初始状态到达目标状态的最路径规划是智能交通、通信网络、机器人等人工优路径,但很多现实情况下,对于环境信息,特别是Page2动态障碍物的信息很难具有先验知识,实际移动过程中可能探测到真实情况与最初观测不同,这时只能根据实时探测到的环境信息,经过多次重规划来获得从当前状态到达目标状态的移动路径.很多研究者已提出了不确定环境以及动态障碍物环境下求解路径规划问题的方法和策略[1-4],其中增量搜索是一种非常有效的处理方法,对于不确定环境下的路径规划问题,能够对搜索现场所保留的信息进行有效地重用,从而减少工作量.传统的路径规划只考虑单个衡量准则的优化.然而,单个目标函数往往很难准确描述很多现实问题中多个相互冲突的衡量准则.路径规划问题中需要优化的目标函数超过一个并需要同时处理时,称为多目标路径规划.启发式搜索方法在人工智能的众多领域都有广泛应用,其用于解决多目标路径规划问题得到了相关研究者的关注.多目标启发式搜索模型最早由Stewart与White提出,将A算法扩展到多个目标函数的情况,利用启发式搜索方法很好地处理了多目标路径规划问题[5];Dasgupta等人在搜索过程中使用非单调的启发信息,将多目标启发式搜索方法应用于VLSI设计问题[6];Mandow等人提出了路径扩展的方法,弥补了多目标启发式搜索中采用节点扩展方法的不足,提高了求解的准确性[7-8];Dasgupta与Harikumar等人提出了几种深度优先搜索方法用于解决多目标路径规划问题[6,9].目前,很多状态空间搜索规划器在求解智能规划问题时也考虑了多个衡量尺度的折中[10-12].多目标的引入使得问题的求解与单目标条件下不同,由于各个目标之间通常都存在着冲突,一个解对于某个目标来说是较好的,对于其它目标来说可能是较差的,这样就造成多目标路径规划问题一般不存在唯一确定的最优路径,而是一组无法进行相互比较的最优路径的集合.当移动过程中检测到变化的环境信息时,需要实时地重新规划出新的移动路径,这就要求以最快的速度计算出当前状态与目标状态之间的最优路径集合,因此,在动态不确定环境中进行有效的多目标路径规划增加了问题求解的难度.文献[13]提出了一种多目标增量搜索算法,在求解过程中状态格局之间发生微小改变时,通过对先前搜索信息的重用,能够快速地得到新问题的最优解集,适用于求解一系列相似度较高的多目标问题.本文进一步提出在移动过程中检测到环境信息的改变时,如何快速调整移动路线以保证全局工作最优性的方法,首先根据当前观测信息采用逆向启发式搜索方法进行全局规划,并选择一条实际移动路径,移动过程中探测到不一致的环境信息时执行局部重规划,重规划过程对先前搜索过程中的各项记录实时地更新,更新后在全局规划的基础上进行增量式搜索,求解当前状态与目标状态之间的最优路径集合.实验结果表明:采用增量重规划的动态多目标路径规划方法通过搜索信息的重用与启发信息的引导提高了求解效率,能够有效地求解一系列动态不确定环境下的多目标路径规划问题.2相关定义本节给出多目标路径规划问题的相关定义,下述定义中,向量表示路径的权重,向量的维数表示需要优化的目标函数的个数,每一维元素刻画一个单独的目标上的优化准则.支配关系是向量之间的一种偏序关系.多目标路径规划问题可以形式化地表示为三元组〈G,Sstart,Sgoal〉,其中G=(N,A,犮)表示状态空间图,N为状态节点集合,A为弧的集合,犮(m,n)为转移代价函数,表示由状态节点Sm转移到状态节点Sn的q维代价向量,G为无向图时,犮(m,n)=犮(n,m);Sstart∈N为初始状态节点;Sgoal∈N为目标状态节点.定义1[6].设向量犳1和犳2为两个K维向量,称犳1弱支配犳2当且仅当i,1iK满足f1if2i,记作犳1犳2,其中f1i和f2i表示向量犳1和犳2的第i个元素.定义2[6].设向量犳1和犳2为两个K维向量,称犳1强支配犳2当且仅当i,1iK满足f1if2i且犳1≠犳2,记作犳1犳2,其中f1i和f2i表示向量犳1和犳2的第i个元素.定义3[6].对于向量集合犡,称向量狓∈犡为非支配的当且仅当/狔∈犡使得狔狓,称nondom(犡)={狓∈犡|/狔∈犡使得狔狓}为集合犡中所有非支配向量的集合.定义4[7].设Pmn是状态节点Sm与状态节点Sn之间的所有路径的集合,路径p1,p2∈Pmn,称p1支配p2,当且仅当犵1犵2,记作p1p2,其中犵1与犵2分别是路径p1与p2的代价向量.定义5[7].设Pmn是状态节点Sm与状态节点Sn之间的所有路径的集合,路径p1∈Pmn,称p1为非支配路径当且仅当/p2∈Pmn使得p2p1,即不存Page3在其它路径在所有目标上都优于路径p1.指定初始状态Sstart与目标状态Sgoal,多目标路径规划问题的最优解集即为Sstart与Sgoal之间的所有非支配路径的集合,它们的特点是无法在改进任何目标函数的同时不削弱至少一个其它目标函数,均视为一条最优路径.上述定义了两种支配关系,原因如下:(1)搜索过程中各个目标函数上权重都相等的两条路径具有同等的资格做进一步考虑,此时利用强支配关系比较所有待扩展候选路径;(2)搜索过程中的一条路径的代价估值与已求出的一条解路径的权重相等时,该路径扩展出的任何路径必然是被这条解路径强支配的,已没有进一步扩展的必要,此时利用弱支配关系比较候选路径与解路径即可.3逆向多目标启发式搜索当问题指定唯一确定的初始状态与目标状态,状态空间图为无向图时,可以采用逆向搜索方法,从目标状态开始执行搜索过程,求解初始状态与目标状态之间的最优路径集合.采用路径扩展方法的多目标启发式搜索方法每次扩展的基本单位是一条路径,利用路径的启发信息引导搜索过程以提高搜索效率.定义6[7].设p为搜索过程中到达状态节点Sm的一条路径,称犳(p)=犵(p)+犺m为路径p的代价估值,其中犵(p)为路径p的代价向量,犺m为Sm上的启发信息,估计每一个目标函数上从状态节点Sm到达目标状态的最小代价.正向搜索时,路径p为从初始状态Sstart到达状态节点Sm的一条路径,犵(p)为状态节点Sm的起始距离,犺m为从Sm到达目标节点的代价估值.逆向搜索时,p为从目标节点Sgoal到达状态节点Sm的一条路径,犵(p)为Sm的目标距离,犺m为从Sm到达初始状态的代价估值.如图1所示,其中(a)为正向搜索过程,当前状态为s5,p1=s0→s2→s6→s5为从初始状态s0到s5的一条路径,犵(p1)为p1的代价向量,p2=s0→s3→s5为初始状态与s5之间的另一条路径,犵(p2)为p2的代价向量,犺5为s5与目标状态γ之间最优代价的估计,因此犳(p1)=犵(p1)+犺5为路径p1的代价估值,而犳(p2)=犵(p2)+犺5为路径p2的代价估值;(b)为逆向搜索过程,从目标状态γ开始执行,当前状态为s7,p3=γ→s9→s7为目标状态与s7之间的一条路径,犵(p3)为从目标状态沿该路径到达状态s7的代价估值,犺7为状态s7到初始状态s0的最优代价估计,此时犳(p3)=犵(p3)+s7为路径p3的代价估值.可见,路径扩展方法对于到达同一个状态的各个路径进行区分,搜索过程用集合Gop(m)记录到达状态Sm的未扩展的路径,集合Gcl(m)记录到达状态Sm的已扩展的路径,因此,逆向搜索的扩展过程中Gop(m)∪Gcl(m)记录的是当前已找出的目标状态与Sm之间的所有非支配路径,表OPEN记录当前各个状态节点的所有未扩展路径,每一个记录项为三元组(Sm,犵(p),犳(p))表示的一条路径p.定义7.设p1为表OPEN中一条未扩展路径,犳(p1)为路径p1的代价估值,称p1为一条非支配OPEN路径当且仅当/(Sn,犵(p2),犳(p2))∈OPEN使得犳(p2)犳(p1).多目标启发式搜索利用向量之间的支配关系从OPEN表中选择将要扩展的路径并识别最优解路径,从非空的OPEN表中选择一条非支配OPEN路径进行扩展,并将扩展出的路径插入OPEN表作为下一次扩展的候选路径,在此过程中,用COSTS记录当前已求得的非支配解路径集合.下面给出逆向多目标启发式搜索算法BMHSPage4(BackwardMuobjectiveHeuristicSearch)的基本流程.算法1.BMHS(〈G,Sstart,Sgoal〉,OPEN,COSTS).输入:多目标路径规划问题〈G,Sstart,Sgoal〉,初始OPEN输出:最优路径集合1.反复执行步1.1~1.3,直到OPEN表为空1.1.路径选择.从OPEN表中根据路径代价估值选择一条非支配OPEN路径px进行扩展,令犵(px)为路径px的代价向量,将px所对应的记录项(Sm,犵(px),犳(px))从OPEN表中删除,并将px从Gop(m)移到Gcl(m);1.2.若Sm=Sstart,则px为一条解路径,犵(px)为解路径px的代价,将犵(px)加入COSTS并从OPEN表中删除所有被犵(px)支配的未扩展路径;1.3.若Sm≠Sstart,则对Sm的所有前驱状态Sn,生成到达Sn的路径py,令犵(py)=犵(px)+犮(m,n),若犵(py)不被Gop(n)∪Gcl(n)中任意路径代价支配,则1.3.1.将py插入Gop(n),并删除Gop(n)∪Gcl(n)中所有被py支配的路径;1.3.2.计算路径py的代价估值犳(py),若犳(py)不被COSTS中任何解路径支配,则将(Sn,犵(py),犳(py))插入OPEN表并记录相关的前驱信息;2.输出所求得的Sstart与Sgoal之间的最优路径集合.算法1从输入接收OPEN表初始值,对于给定的多目标路径规划问题,初始假设只有一条代价向量为零向量的路径到达目标节点,令OPEN={(Sgoal,犵goal,犳goal)},COSTS为空.每次循环首先判断OPEN是否为空,当OPEN为空时,搜索过程终止,输出所求得的最优路径集合;OPEN表非空时,从中选择一条非支配的OPEN路径进行扩展.对选出的一条路径pm进行扩展时,生成到达状态Sm的所有前驱状态的路径,当生成的路径在所有到达该前驱状态的路径中非支配时,计算路径的代价估值,若生成的路径代价估值不受当前任何最优解路径支配,则将该路径插入OPEN表;否则,该路径已没有继续扩展的必要,直接舍弃.扩展到达初始状态时,则求得了初始状态与目标状态之间的一条解路径.由于多目标路径规划问题需要求解一个最优解集,在求得一条解路径之后,搜索过程并不终止,而是反复扩展OPEN表中其余路径,直到求出所有非支配解路径.将新生成的路径py插入OPEN表之前进行过滤,若py被COSTS中的一条解路径支配,则py不被插入OPEN表;每当求出一条非支配解路径时,过滤掉OPEN表中所有被其支配的路径.两次过滤过程保证了每次循环从OPEN表中选出将要扩展的路径是不被任意解路径支配的.上述多目标搜索过程反复执行直到求出所有非支配解路径,而单目标搜索过程,如经典的A算法,只需要求出初始状态与目标状态之间一条最优路径,并且一旦得出最优路径,搜索过程立即结束.如果目标函数的个数退化为单个目标,支配关系变成单纯的小于关系,那么算法1将变成求出所有最优路径的逆向A算法,即若存在多条代价相等的最优路径,搜索过程将在逐个求出这些路径之后结束.4动态多目标路径规划本节提出动态多目标路径规划算法DMPP(DynamicMultiobjectivePathPlanning),执行过程分为全局规划与局部重规划.全局规划获得初始状态与目标状态之间的最优路径集合,移动过程中探测到环境信息改变时,局部重规划过程重新计算出变化点与目标状态之间的移动路径,直到成功移动到目标状态.4.1动态多目标路径规划算法当探测到实际情况与最初观测不符时,为避免停留时间过长,需要立即重新计算出当前状态与目标状态之间的最优路径.本节提出的动态多目标路径规划算法进行局部重规划时,对受影响的记录进行更新,更新后在发生变化的状态与目标状态之间进行重规划,求得剩余的最优移动路径.基本流程.下面给出动态多目标路径规划算法DMPP的算法2.DMPP(G,Sstart,Sgoal).输入:多目标路径规划问题〈G,Sstart,Sgoal〉输出:到达目标状态的最优移动路径1.初始化.OPEN={(Sgoal,犵goal,犳goal)},COSTS为空集;2.全局规划.执行逆向多目标搜索过程BMHS(〈G,Sstart,Sgoal〉,OPEN,COSTS),求得初始状态与目标状态之间的最优路径集合,从中选择一条实际移动路径;3.沿移动路径向目标状态移动,若成功到达目标状态,则输出所移动的路径,算法结束;4.若移动到Schange时探测到由Schange到达相邻状态Sv的情况发生改变,则执行局部重规划过程:4.1.执行更新过程UPDATE(Schange);4.2.执行逆向多目标启发式搜索过程BMHS(〈G,Schange,Sgoal〉,OPEN,COSTS),重新计算Schange与目标状态Sgoal之间的最优路径集合;5.转步3.算法3.UPDATE(Schange).1.更新Gop(Schange)∪Gcl(Schange)中所有包括(Schange,Page5Sv)的路径;2.令COSTS=Gop(Schange)∪Gcl(Schange),Gcl(Schange)=Gop(Schange)∪Gcl(Schange),并将Gop(Schange)置为空集;3.对Sgoal扩展到Schange过程中所有中间状态Su的Gop(Su)集合中所有路径代价犵u,计算其到达Schange的代价估值犳u,若犳u不受COSTS中任意解路径支配,则向OPEN插入记录(Su,犵u,犳u).算法2首先进行全局规划,求得Sstart与Sgoal之间的最优路径集合,从中选择实际的移动路径.对于每个状态节点Sm,Gop(m)∪Gcl(m)记录了Sm与目标状态之间的所有非支配路径.向目标状态移动的过程中实时探测环境信息是否发生改变,直到移动到目标状态,算法成功终止.步4为探测到环境信息发生改变时的局部重规划过程.当探测出Schange移动到Sv的实际移动代价变化时,执行算法3的更新过程,对Gop(Schange)∪Gcl(Schange)中所有经过(Schange,Sv)的路径代价进行修改;当Schange与Sv之间出现障碍物阻塞时,更新过程删除Gop(Schange)∪Gcl(Schange)中所有经过(Schange,Sv)的路径代价.更新后的Gop(Schange)∪Gcl(Schange)既为重规划过程所要求解的部分最优路径,遍历由Sgoal扩展到Schange过程中所有中间状态Su的未扩展路径集合Gop(u),生成重规划搜索过程的初始OPEN表.从更新后的OPEN表开始,仍以Sgoal为初始状态,以Schange为新的目标状态执行逆向启发式搜索,重新计算Schange与Sgoal之间的最优路径集合.全局规划的搜索方向是从目标状态向初始状态,而重规划的搜索方向是从目标状态向变化状态,两次搜索可以看作是初始点相同但目标点不同的相似搜索过程,因此重规划能够重用全局规划所保留的各个状态的Gop与Gcl,使得每一次重规划过程在先前搜索的基础上以增量的方式执行,先前的两部分信息能够被重用:(1)初始OPEN表直接获得各个状态节点的未扩展路径,而不是从空的OPEN表经过一步步扩展逐个求出到达每个状态节点的路径;(2)由Gop(Schange)∪Gcl(Schange)可以直接获得重规划过程的部分解路径,而不需要逐个求解.4.2算法可采纳性与复杂度分析如果一个搜索算法对于任何存在解路径的图都能找到一条最优解路径,则该算法为1可采纳的;如果一个搜索算法对于任何存在解路径的图都能找到有限的最优解集,或者对无限的最优解集永不终止,则该算法是N可采纳的[7].引理1.多目标启发式搜索的是N可采纳的[8].定理1.动态多目标路径规划算法是N可采纳的.证明.根据引理1,全局规划过程时可采纳的.局部重规划过程首先对变化点Schange的Gop(Schange)∪Gcl(Schange)中所有受影响的路径进行更新,更新后的Gop(Schange)∪Gcl(Schange)为变化后Schange与Sgoal之间当前已求出的所有非支配路径,作为重规划搜索过程的初始COSTS集合,由此可以直接得到Schange与Sgoal之间部分解路径.更新后对各个状态在全局规划中没有被扩展的路径计算到达Schange的代价估值,构成接下来搜索过程的初始OPEN表.由于Schange位置的变化对Schange与Sgoal之间的其余状态的Gop∪Gcl没有任何影响,重规划的搜索过程能够直接重用这些信息,从更新后的OPEN表与COSTS开始,以Sgoal为初始状态,Schange为目标,执行逆向启发式搜索过程,继续求解Schange与Sgoal之间的最优路径集合.由此可见,重规划过程能够对先前全局规划所保留的部分信息进行正确地重用,因此,动态多目标路径规划算法是N可采纳的,启发信息犺n犺n时,算法始终能够求得移动过程中变化的状态与目标状态之间的最优路径集合.动态多目标启发式搜索算法的主要空间开销为全局规划对整个状态空间进行搜索的过程中存储到达各个状态节点的路径.引理2.对于包含L个元素的q维向量集合,其中非支配向量个数平均为O((lnL)q-1)[14].定理2.动态多目标路径规划算法最坏空间复杂度为O((lnMN)q-1),其中N为状态空间中状态节点数,M为到达各个状态节点的非支配路径个数的最大值.证明.引理2证明了对于元素个数为L的q维向量集合,其中非支配的向量的平均个数为O((lnL)q-1).在逆向多目标启发式搜索中,由于采用路径扩展方法,存储空间需要记录到达各个状态节点的所有路径,令M为到达一个状态节点的所有路径中非支配路径个数的上界,当状态空间中状态节点个数为N时,需要存储的路径个数最多为MN,因此,q个目标函数的动态多目标启发式搜索的最坏空间复杂度为O((lnMN)q-1).证毕.搜索过程利用启发信息对路径到达目标状态的代价进行估计,能够更快地判断路径是否为一条非支配路径,当一条路径的代价估值犳被一条解路径支配时,即犮∈COSTS使得犮犳,若启发信息犺n犺n,则犳犳,从而犮犳犳,该路径到达目Page6标状态的实际代价一定是被支配的,因此该路径不需要继续扩展.利用启发信息引导搜索过程能够提早判断被支配的路径,减少路径扩展数,提高求解的时间效率,重规划过程通过信息的重用,缩短了求解时间.另外,算法的时间复杂度启发信息的定义与计算密切相关.4.3增量重规划与普通重规划的比较全局规划过程中,采用正向搜索时,Gop(m)∪Gcl(m)记录了Sstart与Sm之间的所有非支配路径,搜索过程中记录了每个状态节点与Sstart之间的非支配路径.若采用逆向搜索进行全局规划,Gop(m)∪Gcl(m)记录的是Sgoal与Sm之间的所有非支配路径,搜索过程记录的是Sgoal与每个状态节点之间的非支配路径.当指定唯一确定的初始状态与目标状态时,全局规划过程采用正向搜索与逆向搜索的计算量是基本相同的.局部重规划重新计算Schange与Sgoal之间的最优路径集合.全局规划采用正向搜索时,重规划过程要以Schange为新的初始状态,Sgoal为目标状态执行搜索,完全重新求解Schange与Sgoal之间的多目标路径规划问题,搜索过程中求出的是各个状态节点与Schange之间的路径.由于全局规划与局部重规划的搜索过程具有不同的初始状态,搜索过程中记录的路径代价不同,先前搜索对各个状态节点记录的路径信息无法被重规划过程重用,只能够重新执行一次搜索过程来对剩余的路径进行求解.然而,若全局规划采用了逆向搜索方法,在重规划过程中将仍然以Sgoal为初始状态,以Schange为新的目标状态执行搜索过程,由于前后两次搜索过程具有相同的初始状态Sgoal,不受变化影响的各个状态节点与Sgoal之间的路径代价不变,因此全局规划与重规划过程中大部分状态节点的Gop∪Gcl集合中包含相同的路径信息.重规划过程开始时,遍历各个状态节点当前的未扩展路径记录能够直接获得初始OPEN表,而不是从空OPEN表开始搜索过程,这将省略很大一部分扩展工作;另外,重规划的目的在于重新计算Schange与Sgoal之间的最优路径集合,而全局规划的搜索方向是由Sgoal向Schange进行的,Gop(Schange)∪Gcl(Schange)所记录的恰好是Schange与Sgoal之间已存在的路径,这部分信息重用进一步减少了重规划搜索过程的计算量.由此可见,增量重规划能够充分利用先前全局规划时每个状态节点所记录的信息,而不是彻底地重新求解,从而提高求解的效率.5实验测试与结果分析本节采用二维gridworld标准测试问题进行实验测试,用来做实验的机器配置如下:操作系统fedora8.0,CPUIntelPentium42.80GHz,内存512MBDDR.5.1测试问题描述4个方向的gridworld问题作为多目标路径规划问题的状态空间,初始位置为左上角的格子,目标位置为右下角的格子,用各个格子在gridworld中的坐标来标识状态节点,每个状态节点的4个相邻格子作为其后继状态节点;向量的每一维元素值在[1,10]之间的整数中随机生成;对生成的多目标路径规划问题进行求解,选择经典的ManhattanDistance作为每一个目标函数上的启发信息.图2为动态不确定环境下多目标路径规划的问题描述,全局规划求得初始位置Sstart与目标位置Sgoal之间的最优路径集合,实际移动时从最优路径集合中选择满意程度最高的一条路径移动,图2(a)为Sstart与Sgoal之间的最优路径集合.图2(b)由Sstart开始的实线标记为实际移动路径,移动过程中探测环境信息,假设在Schange位置(灰色标记的格子)探测Page7到环境改变,先前移动路径被阻塞,Schange与Sgoal之间的加粗实线标记为对剩余路径执行局部重规划需要求得的最优路径集合.5.2实验结果分析测试分为4部分,由于实际问题中同时考虑两个衡量准则的情况最为常见,因此前3部分实验对两个目标函数的路径规划问题进行测试.首先对生成的问题进行全局规划,由目标状态Sgoal向初始状态Sstart执行搜索,并从求得的最优路径集合中选择一条从Sstart到达Sgoal的移动路径.第1部分实验测试移动过程中探测到动态障碍物的阻塞情况发生变化时增量重规划的求解效率,第2部分实验测试移动过程中探测到实际的移动代价发生变化时增量重规划的求解效率,第3部分对增量重规划过程中有表1动态障碍物环境下增量重规划与普通重规划的结果比较Gridsize=50×50InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob01prob02prob03prob04prob05Gridsize=100×100InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob01prob02prob03prob04prob05Gridsize=150×150InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob01prob021076prob03prob04prob05Gridsize=200×200InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob011843prob02prob031009prob04prob05Gridsize=250×250InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob011763prob022319prob032008prob041568prob051098表1中InitialOPENSize为增量重规划由更新过程得到的初始OPEN表的大小,为重用全局规划的信息,MaxOPENSize为搜索过程中OPEN表的最大值,体现了搜索过程用来存储未扩展路径的无启发信息两种情况的结果进行比较,第4部分对目标函数的个数多于两个的问题进行测试,分析DMPP算法对不同目标函数的动态路径规划问题的求解能力.第1部分实验中,格子可能被动态障碍物阻塞,当一个格子之间被阻塞时,4个方向上相邻的格子无法通过它.障碍物阻塞情况的动态变化将导致问题最优路径集合的改变.当移动过程中探测到Schange周围格子的障碍物发生改变时,对探测到变化的位置Schange与Sgoal之间的最优路径执行局部重规划.选取移动路径上的不同位置进行测试,随机更改各个方向上障碍物的阻塞情况,表1为不同测试问题下采用增量重规划与普通重规划的测试结果比较.空间开销,PathsExpanded为搜索过程的路径扩展数,表明搜索过程的计算量,Time/s为局部重规划过程的执行时间.对比两项实验结果,不难看出:增量重规划初始时能够直接获得部分OPEN路径,相Page8比于普通重规划,其OPEN表的最大值、路径扩展数与搜索时间均有改进,增量搜索过程存储OPEN表所需的空间更小,这是由于全局规划的搜索方向是从目标状态向初始状态执行,而重规划的搜索方向是从目标状态向变化的状态进行,这两个过程可以看作是初始节点相同但目标节点不同的两次相似的搜索过程,全局规划所记录的部分搜索信息对于重规划过程具有利用价值,因此增量重规划过程OPEN表中一些路径能够直接从全局规划过程继承,搜索过程所经历的路径数远远小于重新搜索的过程,另外,重规划过程开始之前已得到部分解路径,求出解路径的迭代次数更少,相比之下,普通的重规划过程不保留任何全局规划的信息,从空的OPEN表彻底重新求解所有解路径,求解效率较差.当障碍物的动态改变使得重规划过程涉及到全表2移动代价可变环境下增量重规划与普通重规划的结果比较Gridsize=50×50InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob01prob02137prob03prob04prob05Gridsize=100×100InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob01132prob02392prob03190prob04309prob05128Gridsize=150×150InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob01583prob02789prob03892prob04201prob05350Gridsize=200×200InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob01284prob02726prob031128prob041463prob05974Gridsize=250×250InitialOPENsizeMaxOPENsizePathsexpandedTime/sMaxOPENsizePathsexpandedTime/sprob01678prob02902prob031903prob041348prob051796由表2可见,大部分测试问题的增量重规划过程的OPEN表最大值,路径扩展数,搜索时间都远远小于普通重规划过程,更新过程中对只需对局规划没有到达的区域时,将遇到一些全新的节点,节点信息的记录为零,这时增量重规划的整体求解时间有一些减慢,但大部分问题采用增量重规划时求解效率有所提高,一些问题的时间效率提高近1倍.第2部分实验测试中,格子之间移动的代价随机发生改变.初始时随机生成移动代价,移动过程中对路径上向前移动的代价进行随机更改,移动代价的改变不会阻塞先前的移动路径,但可能导致沿先前移动路径到达目标状态的代价不是最优的,此时执行局部重规划过程,重新求解变化后Schange与目标状态Sgoal之间的最优路径集合,再从中确定将要移动的路径.随机选取移动路径上的不同位置进行测试,对比不同的测试问题下采用增量重规划与普通重规划的实验结果,如表2所示.Gop(Schange)∪Gcl(Schange)中部分路径代价进行更新,利用更新后的路径代价与其余路径进行支配关系的比较,移动代价变小时,搜索能够利用变化后的路径Page9代价快速地过滤掉其余所有被支配的路径,避免了不必要的扩展,移动代价变大时,先前的移动路径可能被其它路径支配,更新后生成重规划问题的初始OPEN表,由此开始执行新的搜索过程,减少了搜索过程中的大量计算与扩展工作.更新过程生成OPEN表时需要对整个问题中未扩展的路径进行支配关系的比较,将所有不被当前任意解路径支配的路径插入OPEN表,占用了一些执行时间,并且当重规划的搜索过程扩展到全局规划没有到达的区域时,影响了重规划整体的时间效率,除个别问题时间效率提高不明显外,大部分问题时间效率有显著提高.由上述实验结果可知,搜索信息的重用是提高增量重规划效率的关键,普通重规划无法重用全局规划中的任何信息,开始执行搜索过程时OPEN表为空,需要对重规划问题完全重新求解,效率较低.当移动到接近目标状态的位置发生变化时,计算剩余移动路径的计算量较小,增量重规划与普通重规划的求解效率差别不大;若移动过程初期发生变化,即变化位置比较接近初始状态时,增量重规划的效率明显优于普通重规划,这是由于大部分移动路径需要重新确定,增量重规划能够直接获得部分解路径与OPEN表中的路径,避免了大量的重复扩展过程,节省了求解时间.第3部分测试启发信息对求解过程的影响.对各个规模的问题进行多次测试,表3记录的是DMPP算法求解过程采用启发式搜索与无启发信息搜索的平均路径扩展数与平均求解时间.不使用启发信息的搜索过程对所有的路径都进行扩展与存储,而启发式搜索过程利用启发信息引导搜索过程,只对更有希望的路径进行扩展,对扩展出的路径利用支配关系进行过滤,只存储所有不被任何解路径支配的路径.由表中实验结果可见,启发式搜索过程的路径扩展数与搜索时间都远远小于无启发信息的搜索过程,启发信息压缩了搜索空间,提高了求解的时间效率,部分问题的搜索时间提高约1.5倍.从表3上看,问题规模越大,使用启发式信息相对于没有使用启发式信息的效率提升越不明显,这是由于多目标问题要求最终求解出所有的非支配解,并非只求解一个最优解,因此求解过程的计算量远远超出单目标问题,特别是随着问题规模的增大,所需计算量迅速增加.启发信息用于提前识别非最优路径,加速求解,然而由于多目标问题本身的特点需要反复执行搜索过程,直到求出所有最优解,对求解效率也有一定的影响,无法单独凭借启发函数大幅度提高效率,但启发式搜索相对于无启发信息搜索的求解效率仍有明显的提高.可见,使用启发信息引导搜索过程能够避免大量的扩展与计算过程,大大减少路径扩展数,在一定程度上缩短求解时间,特别是利用搜索方法求解多目标路径规划问题时,计算量较大,启发信息使得求解效率有显著的提高.表3增量重规划过程中有无启发信息的搜索结果比较格子大小50×5029995.161828467.7863100×1002234842.45684089461.1597150×150153481300.4882184874476.7941200×2004074581227.45894543381534.7891250×2505239893675.78465569474054.9347最后,进一步对目标函数的个数多于两个的路径规划问题进行测试.对不同目标函数的情况分别选取150×150规模下多个的测试问题,表4所示为不同目标函数下增量重规划与普通重规划的平均路径扩展数与平均搜索时间.实验结果表明对于各种不同目标函数情况下的动态路径规划问题,使用DMPP算法均能够很好地解决,求解效率也有不同程度的提高.PathsexpandedTime/s3-obj108941217.1887169329325.72914-obj196723386.4861235483493.92645-obj187982526.5697298262738.43926-obj208392590.4876353724802.78187-obj239201703.76334382911038.38928-obj332851937.54685684961331.67279-obj4576391157.56986559451573.7293上述实验结果表明动态多目标路径规划算法的优点:(1)局部重规划过程能够以增量的方式对先前搜索保留的信息进行有效重用,有两类信息能够被重用:①全局规划过程的部分未扩展路径直接作为局部重规划过程的未扩展路径,记录在OPEN表中;②全局规划过程的部分已扩展路径直接作为局部重规划过程的解路径,这两类信息的有效重用使得重规划节省了大量的计算时间.(2)利用启发式能够提前识别出非最优解,避免不必要的扩展,进一步上压缩搜索空间.实验部分测试了利用搜索方法求解多目标问题时启发信息对求解效率的影响.算法中的启发信息用于选择将要Page10扩展的路径以及对新生成的路径进行过滤.路径选择步骤时,OPEN表中的非支配OPEN路径被认为更有希望成为非支配解路径,将优先选择,每发现一条新的非支配解路径时,对OPEN表中所有被支配的路径进行过滤.扩展路径时,对于新生成的路径,首先对路径代价进行过滤,再对路径的代价估值进行过滤.可见,搜索过程中利用启发信息能够时刻检查路径之间的支配关系,对于没有希望的路径提早做出判断,减少搜索过程的计算量,启发信息越接近实际情况时,对路径实际代价的估计越准确,搜索空间的压缩比例越高.5总结本文提出了一种动态不确定环境下求解多目标路径规划问题的方法.首先提出了采用逆向多目标启发式搜索进行全局规划,求解给定问题的最优路径集合;在此基础上,提出了动态多目标路径规划方法,该方法将多目标路径规划问题的求解过程分为全局规划与局部重规划,重规划以增量的方式对全局规划所保留的部分信息有效地重用,能够更快地调整变化位置与目标位置之间新的移动路径.实验测试验证了动态多目标路径规划方法的求解效率,结果表明基于增量重规划的方法能够很好地处理一系列动态不确定环境下的多目标路径规划问题.
