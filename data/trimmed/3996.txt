Page1计算Fiedler向量的一种高效准确方法吴建平宋君强张卫民赵军(国防科学技术大学计算机学院长沙410073)摘要图的Fielder向量在许多应用领域扮演着重要角色,包括矩阵重排、图的分割、蛋白质分析、数据挖掘、机器学习与网络搜索等.但一般认为,计算Fiedler向量是很耗时的,因为其牵涉到特征值问题.文中提出了计算Fiedler向量的一种新方法,该方法基于收缩技术与反幂法,将Fiedler向量的计算转化为缩减矩阵最小特征值对应特征向量的计算.其次,引入了一种预条件方案来进一步减少计算量,在该方案中,可以采用任何一种针对线性方程组求解的预条件技术.对从UF稀疏矩阵集下载下来的几个稀疏矩阵对应的图,对新方法进行了实验,并与已知的最新方法进行了比较.实验中,采用了对角预条件,且对算法利用MPI和OpenMP混合编程来实现并行计算.实验结果表明,新方法相对于已有方法,在计算效率与计算精度上都具有优势.对图二分的应用实验也表明,在大多数情况下,文中算法给出的结果更好.关键词Fiedler向量;特征值问题;并行计算;稀疏线性方程组;共轭斜量法;预条件1引言Fiedler向量,即图的Laplace矩阵次小特征值对应的特征向量,在许多应用领域扮演着重要角色,这些应用包括矩阵重排[1]、图分割[2-3]、蛋白质分析与数据挖掘[4-6]、机器学习[7]与网络搜索[8]等.对给定的n阶稀疏对称矩阵犃,或一个给定的无向加权图G=(W,E),其中节点从1到n进行编号,(i,j)∈E对应于矩阵中的非零元a(i,j),边(i,j)的权重为|a(i,j)|,加权Laplace矩阵犔给出如下:无权Laplace矩阵犔可以从加权Laplace矩阵简单得到,只要将矩阵犃的非零元全部替换为1即可.在本文中,只考虑连通图的情形,对非连通图,可以对其连通部件,一个一个地计算其Fiedler向量.当矩阵是非对称矩阵时,考虑对(犃+犃T)/2进行计算.由于所考虑的矩阵是对称半正定的,所以其具有n个两两正交的特征向量.此外,所考虑的是连通图,所以对应的矩阵必是不可约的,且次最小特征值必定非零.下文中,将这些特征值记为为计算Fiedler向量,在文献[9]中实现了一个多层求解器HSL_MC73,已经嵌入到了Harwell子程序库HSL中①.该方法首先创建一系列粗图,利用Lanczos算法在最粗层上计算Fiedler向量,之后将计算结果延拓到细网格,采用Rayleigh商迭代(RQI)对特征向量进行精化,在RQI中遇到的线性方程组采用SYMMLQ进行求解.用于求解标准对称特征值问题的TraceMin算法[10],也可以用于计算Fiedler向量,其中时间耗费最多的是每次外迭代中的鞍点问题的求解,这又归结到一个大型稀疏半正定线性方程组的求解.最近,该算法得以采用Deflation过程、共轭斜量法与对角预条件进行改进[11].Deflation过程可以改进对应线性方程组系数矩阵的正定性,并缩减所求解线性方程组的个数.引入的共轭斜量法与对角预条件可以进一步提高计算效率.此外,数值结果表明,计算精度也得以改进.本文第2节将基于收缩技术与反幂法给出新的计算方案;第3节介绍预条件的引入技术;第4节给出数值计算结果;第5节针对Fiedler向量在图二分中的应用进行实验;第6节给出结论.2基于收缩技术与反幂法的新方法考虑对称特征值问题其中犔是第1节所述的Laplace矩阵.由于矩阵每行的元素之和等于0,且犔是对称半正定矩阵,所以λ1=0是最小特征值,且狓1=[1,1,…,1]T是与之对应的一个特征向量.现在考虑另外一个矩阵犕=犔+犐,其中犐是n阶的单位矩阵,记犕的特征值为可以简单地证明,μi=λi+1,且对应的特征向量维持不变,所以犕的最小特征值为μ1=1,且狓1为与之对应的一个特征向量.特征值问题可以利用(μ1,狓1)进行收缩.事实上,构建Householder矩阵其中狌=[1+n1/2,1,…,1]T,且α=n1/2(1+n1/2).这样,就有犎T=犎,犎-1=犎,犎狓1=-n1/2犲1,犎犲1=-n1/2狓1,因此,这也就是说,μ1=1是犎犕犎的特征值,犲1是与之对应的一个特征向量,所以犎犕犎具有下述形式:这时,为求解特征值问题(2),只需要求解且若将犕2的特征值记为ν1ν2…νn-1,则νi=μi+1.因此,只需要计算犕2的最小特征值及其对应的特征向量.为此,需要得到犕2的元素.由犎犕犎的表达式,可以得到其中狏=犺-γ狌/2,犺=犕狌/α,γ=狌T犺/α.如果分别记狌和狏为①http://www.cse.scitech.ac.uk/nag/hsl/Page3则为计算犕2的最小特征值,可以采用反幂法.考虑到收敛速度的问题,可以再次采用位移技术,来计算犔2=犕2-犐的最小特征值,其中犔2的表达式为注意,由于反幂法的收敛速度由两最小特征值的比值确定.因此,应用到式(10)的反幂法比应用到式(9)的反幂法收敛速度更快.而且,由于只知道ν1>1,所以只采用了位移1.假设犔2对应于ν1的特征向量为狋1,则因此,即犕犎0从而,需要求的Fiedler向量即为犎[0,狋Tν1-1正好是犔2的最小特征值.在算法1中,对每次反幂法,需要求解线性方程组犔2狕=狋.由于已知犔2必定对称正定,所以可以采用共轭斜量法.在共轭斜量法的每次迭代上,显然只需要给出犔2作用到任意一个给定向量上的计算方法即可,而并不需要具体知道犔2的元素.而对任意一个n-1阶的给定向量狑,根据式(10)可知,犔2狑=犔2:n,2:n狑-(狊,狑)狉-(狉,狑)狊.算法1.基于乘幂法与收缩技术的Fiedler向量新算法.输入:邻接矩阵犔输出:Fiedler向量狓犕··=犔+犐;狌(1)··=1+n1/2;狌(2:n)··=1;α=1/(n+n1/2);犺··=α犕狌;γ=α(狌,犺);狏··=犺-γ狌/2;狋(1:n-1)··=1;FORk=1tokmaxDOβ··=‖狋‖2;狋··=狋/β;狔=犔2狋;λ=(狋,狔);ε··=‖狔-λ狋‖/‖犔‖;If(ε<εmax)goto11○;Solve犔2狕=狋;狋··=狕;ENDDO11○:狓(1)··=0;狓(2:n)··=狋(1:n-1);β··=α(狌,狓);狓··=狓-β狌;算法1在每次外迭代中,仅需要求解一个线性方程组,这与TraceMin算法不同,在TraceMin算法中,每次外迭代需要求解多个线性方程组.此外,这里的线性方程组比TraceMin算法中的线性方程组具有更好的条件数.特别地,在TraceMin算法中,第一次外迭代牵涉到一些条件数很差的线性方程组求解.Deflate算法[11]虽然在算出对应于零特征值的特征向量后可以避开坏条件数的问题,但在此之前,毫无办法.算法1的核心是反幂法.因此,算法总是收敛的,第3个最小特征值与次小特征值之比越小,收敛速度越快.当然,当次小特征值是重特征值时,收敛速度将非常慢.值得注意的是,虽然本文仅考虑了最简单的反幂法,事实上,位移方法以及Aitken等加速技术也都可以用来改进计算效率.3预条件技术的引入算法1中稀疏线性方程组犔2狕=狋的求解非常耗时,因此需要引入预条件技术[12-13].假设犘是犔的近似,从式(6)可以得到因此,犎犘犎右下角的子矩阵可以作为犔2的近似.特别地,在每个预条件步,当需要近似求解线性方程组犔2犳=犵时,可以先求解其中线性方程组(12)可以按下述方式进行求解这样,结果向量犳可以通过简单提取狆的后n-1个元素来进行近似.上述构造过程表明,只要构建了犔的近似犘,以及能高效求解犘狑=犎狇,则可以得到犔2犳=犵的一种高效预条件过程.注意,由于矩阵犔每行的元素之和为零,且犔不可约对角占优,所以可以应用不完全分解,只要该不完全LU分解不会退化成没有任何舍弃的真实LU分解,就可以进行下去.当然,如果在进行不完全分解之前,先对犔进行某些舍弃,所得到的近似矩阵则会严格对角占优,从而也可以采用任何一种Page4预条件技术.特别地,在并行计算时,可以针对犔的每个对角块进行预条件,应用时也不会有任何问题.对其它类型的预条件,也有相似结论.为简单起见,在文中只对对角预条件进行测试.将来,将考虑更高效预条件的引入,包括ILU型预条件、稀疏近似逆,或对超大规模问题具有潜在更高效率的多层型预条件与粗网格校正型预条件.4数值实验本文采用MPI与OpenMP混合编程,实现了算法1的并行版本.编程实现中,对稀疏矩阵,采用CSR格式[14]进行存储.对MPI编程,稀疏矩阵分布到各个节点上,使得每个节点拥有连续且几乎相同数量的行,相关向量也进行类似分布,包括内积在内的所有标量在每个节点上重复存储,并利用MPI函数mpi_allreduce来实现内积的计算.稀疏矩阵与稠密向量并行相乘的基本思想可以参见文献[14],具体通信和实现细节可以参见文献[15].对OpenMP编程,由于稀疏矩阵与向量乘的计算在总计算量中占绝对优势,且在编码实现时,将矩阵行对应的循环指标放在最外层,因此,直接利用指导语句进行外循环的并行化.这里,将文中所提方法(记为New)与Deflate型TraceMin算法[11](简记为Deflate)、HSL_MC73库(简记为MC73)进行实验比较.算法Deflate来源于库FIEDLER_LIB,由Manguoglu[11]采用MPI+OpenMP编写.所有测试在CPU为Intel(R)XeonE5540@2.53GHz(cache8192KB)、每节点8核的32个节点机群上进行,节点之间采用infiniband互连,MPI环境选用MVAPICH21.4.0.对算法New和Deflate,如果不显式声明,内层CG迭代在收敛性门槛即残向量与右端项无穷范数之比小于10-4,或者迭代次数达到10000次时终止.这两个算法都只在8~32个节点变化范围内进行测试.对MC73,所用SYMMLQ的收敛性由min(rtol/1000,10tol)控制,其内部RQI迭代收敛性参数tol1设为10-11,特征值计算精度由tol控制,实验中将rtol设为0.1,tol设置为10-3,该参数设置对应于SYMMLQ的停机门槛值设为10-4.对算法New,已经嵌入了对角预条件.测试所用矩阵来自于弗罗里达大学稀疏矩阵集(UF)①,如果矩阵犃对应的邻接图不是连通图,则提取出其最大连通子图,来进行所有算法的测试.测试矩阵的信息如表1所示,在获取Fiedler向量狓后,相应的特征值λ2按狓T犔狓/狓T狓进行计算.表1测试矩阵的非零元个数与最大连通子图的维数(非零元个数记为犖犖犣,最大连通子图的维数记为犖犕犆)矩阵组/矩阵名NNZNMC应用领域Schenk_AFE/af_shell10270901951508065金属薄板成型GHS_psdef/audikw_139297771943695结构问题Oberwolfach/bone01036326514986655模型规约GHS_psdef/ldoor23737339952203结构问题Schenk/nlpkkt120501940963542400优化问题Schmid/thermal249041791227087热力学问题在图1~图6中,给出了λ2随计算时间增加时精度的变化情况,同时对算法New,给出了λ2随反幂法外迭代次数增加时精度的变化情况,实验针对如表1中所述的矩阵的无权Laplace进行.λ2的计算用‖犔狓-λtrue2狓‖/‖犔‖进行衡量.图1λ2的精度随计算时间(单位为s)与反幂法迭代次数增加时的变化情况(af_shell10)(采用MC73时的计算时间为755.76s,且‖犔狓-λ2狓‖/‖犔‖=2.1671×10-11)从测试中可以发现,在大部分情况下,采用新算法在同样精度下计算Fiedler向量时,所耗费的时间比Deflate和MC73少,尽管只采用了简单的对角预条件.如果采用更高效的预条件,效率应该还会得以改进.此外,还可以发现,随着计算时间的增加,对大部分矩阵,精度对应的曲线逐渐变得越来越平坦,这是由于CG迭代中门槛相对较大值引起的.这也是①http://citeseerx.ist.psu.edu/viewdoc/summary?doi=Page5图2λ2的精度随计算时间(单位为s)与反幂法迭代次数增加时的变化情况(audikw_1)(采用MC73时的计算时间为360.02s,且‖犔狓-λ2狓‖/‖犔‖=5.6002×10-14)图3λ2的精度随计算时间(单位为s)与反幂法迭代次数增加时的变化情况(bone010)(采用MC73时的计算时间为348.86s,且‖犔狓-λ2狓‖/‖犔‖=2.8002×10-14)图4λ2的精度随计算时间(单位为s)与反幂法迭代次数增加时的变化情况(ldoor)(采用MC73时的计算时间为956.30s,且‖犔狓-λ2狓‖/‖犔‖=1.3696×10-8)图5λ2的精度随计算时间(单位为s)与反幂法迭代次数增加时的变化情况(nlpkkt120)(采用MC73时的计算时间为9148.9s,且‖犔狓-λ2狓‖/‖犔‖=2.0209×10-15)Page6图6λ2的精度随计算时间(单位为s)与反幂法迭代次数增加时的变化情况(thermal2)(采用MC73时的计算时间为41.60s,且‖犔狓-λ2狓‖/‖犔‖=7.5593×10-8)对个别矩阵如nlpkkt120,随着计算时间的增加,开始时New的精度不断提高,效果优于Deflate,但之后New的精度甚至出现不如Deflate.随着门槛值的减小,精度可以得到改进,这也可以从图1~图6的每个图的后一子图可以看出.对文中给出的新算法,门槛值可以取得任意小,计算出来的特征值也总是很接近次小特征值.随着门槛值的减小,精度一般会随外迭代步的增加越来越高.对有些测试,采用Deflate算法时,CG迭代次数非常高,这些矩阵包括af_shell10、ldoor与thermal2.在测试中,所用的CG门槛是10-4.另一方面,在Deflate算法中,CG迭代的门槛值又不能设得太小,否则实际得到的特征值不是次小特征值,而是最小特征值0.采用MC73时,对某些矩阵,计算出来的特征值非常不准确,如矩阵ldoor.对该矩阵,利用非常小的CG门槛结合算法New算出来的近似特征值分别为0.7781×10-3.但采用MC73时,计算得到的近似值为0.3812×10-7.为进一步确认计算结果的准确性,这里再对从近似2狌/x2+2狌/y2=犳(x,y)与Dirichlet边值的偏微分方程所得到的稀疏矩阵进行了实验,也再现了这些现象.求解区域选为(0,1)×(0,1),并且在两个方向上均采用中心差分进行近似,同时步长分别取为1/101与1/51,这样所得矩阵的阶数为100×50=5000.这里所有计算结果均在单处理器上计算得到,并列如表2和表3所示.从表2和表3,可以清楚地看到,新算法比Deflate、MC73更加精确,且对参数的选取没有这两个算法那么敏感.(狋狅犾1=10-3;λtrue从新算法获得,其中CG门槛取为10-12,(tol,rtol)|1-λ/λtrue|(tol,rtol)|1-λ/λtrue|(10-3,10-1)2.999(10-2,10-4)7.305×10-6(10-3,10-2)3.999(10-3,10-4)3.999(10-3,10-3)3.999(10-4,10-4)3.999(10-3,10-12)3.999(10-5,10-4)3.999(外迭代精度门槛为10-12;两算法内部CG迭代的最大允许迭代次数分别设置为150与10000;λtrue从新算法获得,其中CG门槛取为10-12,反幂法也要求精度门槛为10-12)CGTolerance|1-λ/λtrue|10-51.15×10-1310-54.62×10-1410-61.13×10-1310-65.22×10-1510-71.23×10-1310-77.55×10-1510-85利用Fiedler向量进行图二分假设n是偶数,且犃的邻接图G分割为子图G1与G2,这样,部分结点处于G1,另一部分结点处于G2.现在定义一个n维向量狑,如果k属于G1则对应的元素狑(k)=1,否则狑(k)=-1.于是,两子图之间的总边数可以用公式表示为即,如果希望寻求二分,使得两子图之间的连接边数最少,则可以通过满足限制条件的最小化问题来求解:问题(15)是一个NP完全问题,很难求解,幸运的是,可以将限制条件近似为连续问题:这样,问题转换为计算Fiedler向量.一旦Fiedler向量狑计算出来,就可以将所有元素分为两部分,使得两部分中的元素个数基本相当,且第一部分中元素对应的狑值都比第二部分中的小.第一个条件是在这样一个意义上来说的,即当n是偶数时两部分中的元素完全一样多,当n是奇数时两部分中的元Page7素个数相差一个.这里,对从弗罗里达大学稀疏矩阵集中下载的两组矩阵进行测试,第1组如表1所示,当犃对应的邻接图不连通时,还是只提取其最大连通子图进行测试.第2组含有8个规模相对较小的矩阵,其基本信息如表4所示.表4小测试矩阵的非零元个数与最大连通子图的维数(非零元个数记为犖犖犣,最大连通子图的维数记为犖犕犆;矩阵组/矩阵名NNZNMC应用领域HB/bcsstk22Schenk_IBMNA/c-19120722327优化问题GHS_psdef/cvxbqp119998440000优化问题Koutsovasilis/F2268289571505机车活塞杆FEMLAB/problem12779415小型测试问题Oberwolfach/rail_135751711357模型规约TKK/smtGHS_indef/sparsine79949450000结构优化采用算法New、Deflate、MC73进行测试时,所得二分的切割边数如表5所示.这里算法New与Deflate中CG的收敛门槛分别取10-12、10-4,两算法中最大允许CG迭代次数与外迭代分别为10000、150.对算法MC73,采用默认参数.表5采用New、Deflate、MC73时的谱二分切割边数比较MatrixNMCaf_shell101508065549062623126231audikw_1943695109856779942109856bone010986655133436272612132881ldoor9522032813811146929062nlpkkt1203542400323105554928306388thermal21227087102110301030bcsstk221104374c-19cvxbqp140000282241440920F2problem14154912342rail_13571357505850smtsparsine5000020171913168168788从表5可见,尽管采用新算法进行谱二分时,切割边数并非总是最小,但在许多情况下,确实比另两个算法大为减少.同时,在其它情形下,用新算法时的切割边数也非常接近于最优.6结论本文针对具有对称非零元结构的稀疏矩阵,提出了一种计算其Laplace矩阵Fiedler向量的新方法.该方法基于收缩技术与反幂法,采用收缩与位移技术,将问题简化为计算一个对称正定矩阵的最小特征值及其相应特征向量的问题.之后,简化问题又采用反幂法进行求解.此外,对反幂法迭代中的CG法,引入了预条件技术,以减少计算量.可以采用具有舍弃的任何预条件技术.针对从UF稀疏矩阵集下载的一些稀疏矩阵,将新提出的方法与已有的知名算法进行了实验比较.结果说明,新算法在计算效率与计算精度上都具有优势.将其应用到谱二分的实验表明,质量也一般优于已知算法.致谢作者感谢MuratManguoglu,他参加了用FIEDLER_LIB库来计算Fiedler向量的讨论,该库采用了Deflate型Tracemin算法.同时,作者还要感谢JonathanHogg,在其帮助下,成功下载了库HSLMC73!
