Page1软件自适应:基于控制理论的方法1)(解放军理工大学国防工程学院南京210007)2)(计算机软件新技术国家重点实验室(南京大学)南京210093)摘要软件自适应是软件系统为应对外部环境、用户需求和系统自身的频繁变化而进行自我调整的一种能力,是近年来软件工程领域研究的热点.由于基于“感知-决策-调整”的软件自适应环与基于“感知-规划-动作”的控制环有着天然的相似性,采用控制理论作为手段来研究软件自适应问题已成为一种重要风范.该文对基于控制理论的软件自适应研究工作进行了综述.首先,阐释并定义了软件自适应的概念内涵;其次,讨论了基于控制理论的软件自适应基本思想、代表性研究工作;第三,在给出综述方法和过程的基础上,建立了综述分类框架;而后,结合分类框架分别从控制工程视角和软件工程视角,即控制结构、概念框架、理论基础、开发方法、评价验证等方面对研究现状进行了详细讨论和比较.最后,分析了当前研究所存在的不足并展望了未来的研究趋势.关键词软件自适应;自适应软件;控制理论;反馈控制1引言软件自身是应用、人、操作域和活动域等共同构成的一个模型[1],是对客观世界问题空间与解空间的具体描述,是客观事物的一种反映[2].因此,日益复杂而多元的客观世界和人的主观世界造就了软件系统的复杂性与变化性.在现代社会,以Internet为代表的网络化、分布式计算系统的出现和普及使计算机软件所面临的运行环境开始从封闭、静态、可控逐步走向开放、动态、难控[3],使得软件在运行过程中常常面临着来自软件内部和外部的诸多变化和干扰.如在民用与商用领域,以网构软件[3-4]、普适计算、云计算、物联网、CPS(CyberPhysicalSystems,信息物理融合系统)、ULS(Ultra-Large-ScaleSystems,超大规模系统)等为代表的新型计算模式的迅速发展正深刻地影响和改变着软件的构造形态,在这些计算模式下,软件系统要不断适应网络、位置、设备、资源和用户需求的改变.因此,对环境变化和用户需求变化的动态演化和适应能力已成为对软件系统的必然需求,即要求软件系统具有自适应能力,以能及时消除或减轻变化所带来的不利影响,确保持续而不间断地提供服务.软件自适应的研究已成为当前软件工程领域最为活跃的研究方向之一,其是一个内涵丰富、跨专业的研究领域[5],具有固有的学科交叉特点[6].而Laddaga[7]给出了3类软件自适应设计方式的比喻(designmetaphor):将自适应软件编程实现为一个动态规划系统、将自适应软件编程实现为一个控制系统,将自适应软件编程实现为一个自感知系统.近年来,采用控制理论来研究软件自适应问题已成为当前计算机领域的一种重要风范.软件自适应的本质是基于“感知(sense)-决策(decide)-调整(adjust)”的执行环,而源于控制领域的控制理论所讨论的主要问题是系统的各个不同部分之间相互作用的性质,以及整个系统总体的运动状态[8],其关注于通过“感知(sense)-规划(plan)-动作(act)”环来与环境进行不间断地交互.可见自适应环与控制环有着天然的相似性.Kramer等人[9]认为为了应对自适应软件的复杂性需要采用严格的(rigorous)方法来设计、构造和分析软件以避免不必要的缺陷.而形式化的控制理论能为反馈系统的建模、分析、设计和评估提供严格的方法学[10].与adhoc方法(主要依靠费力的人工设计/整定/测试的过程迭代方式)相比,基于控制理论的方法能使设计者利用已成熟的、分析式(analytical)的方法来系统地设计自适应软件系统,以在不可预测的环境中实现期望的性能确保(performanceguarantee)[11].同时,基于控制理论的方法能减少自适应系统的设计时间,能通过证明的方式来判定设计的系统是否满足性能规格,而adhoc的方法只能依赖重复测试、猜测和经验等手段,从而无法满足运行时性能确保要求[11].因此,将控制理论应用到软件自适应研究领域得到了许多学者的重视并取得了较为丰富的研究成果.尽管Patikirikorala等人[12]曾对自适应软件系统中基于控制工程的方法进行过简单综述,但该项工作仍将重点放在控制工程这一维,缺少对软件工程所关心的技术问题(如软件构造方法、支撑工具、评价验证等)的总结和分析.总之,目前还缺少对基于控制理论的软件自适应的系统性综述.本文主要从基于控制理论的软件自适应方法这个视角来综述软件自适应相关的原理、模型、方法、技术、工具等,并分析现有研究面临的新问题、展望未来研究趋势.本文第2节讨论软件自适应的概念与原理,并简要介绍控制理论的基础知识;第3节讨论基于控制理论的软件自适应基本思想和代表性研究工作;第4节给出本文采用的综述方法和文献综述过程;第5节定义了分类框架与分类标准;第6节讨论、分析和比较了基于控制理论的软件自适应研究现状;第7节分析讨论了基于控制理论的软件自适应研究所存在的不足,并展望未来研究趋势;第8节总结全文.2软件自适应及控制理论概述2.1软件自适应概念2.1.1软件自适应的基本概念(1)自适应.自适应这一概念来源于生物学,是指生物变更自己的习性以适应新环境的一种特征[13].自适应所带来的优良系统品质,使得其被引入到诸多学科领域来构造各类自适应系统:如自适应滤波、自适应巡航、自适应控制[13]等.而在软件工程领域,随着软件系统的日趋复杂及其面临的外部因素(环境及需求)变化日益频繁,需要有一种机制来应对这些挑战,使软件具备自适应能力从而形成自适应软件,这正成为人们所追求的一种软件形态和风范(paradigm).与“软件自适应”概念相似的另一个概念是“自Page3适应软件(self-adaptivesoftware)”[14],尽管Oreizy等人[15]将自适应软件系统分为自适应管理和演化管理两个阶段,但大部分文献都对这两个概念不作区分,认为二者可以交替使用.从字面来看,软件自适应关注的是自适应能力,而自适应软件关注的是软件构造方法和软件实体本身.由于本文重点是放在软件的自适应机制实现方法上,因此,会更多地使用软件自适应这一概念,但有时也会不加区分地交替使用.(2)软件自适应.关于软件自适应,目前尚未有统一的定义.有的是从功能和性能改进的角度进行定义[14],还有的是从应对环境变化的角度[15-16]进行定义.而我们认为,软件自适应在作为软件系统的一个能力属性的同时,又可理解为是一个过程,即软件自适应具有典型的动态性和目的性特征,也就是说,软件自适应是一种在受到环境变化的扰动下,软件系统能自我调整动态地逼近自适应目标的能力.本文借鉴控制理论的思想对软件自适应作出如下定义:软件自适应是指软件系统在受到变化的干扰时,为避免进入失效状态而在线自我调整以能动态地逼近任务目标的一种过程.这种理解可形式化地刻画为:令u为软件系统的运行状态,其是系统时间t的函数;U为软件系统可接受状态空间(AcceptableStateSpace),当u∈U时,软件服务质量仍处于用户接受范围内;F为软件系统失效状态空间(FailureStateSpace),当u∈F时,软件关键指标被破坏,无法提供可用的功能和性能;C为软件系统面临的所有变化集合,A为自适应平衡状态集合(此时系统性能或功能已经达到用户的期望值或目标,系统状态不再发生大的变化),假设在t=t0时,软件系统状态稳定于A区域内,即u(t)∈A;而在t=t1(t1>t0)时,外部环境产生变化δ∈C,使软件系统运行状态偏离了平衡态,由平衡状态空间进入可接受状态空间,但尚未到达失效状态空间.即此时,软件系统在自适应机制作用下,使得其能及时感知到这种状态变化趋势,通过调整自身行为,经过一段时间Δt,由用户可接受状态空间又重新回到目标区域,即有软件自适应的研究还与其他几个领域非常相近,其中的典型代表是自治计算(autonomiccomputing)和自管理(self-management)系统[17].一般认为,自适应软件侧重于软件系统的自适应,而自治和自管理系统更关注于整个计算系统(包括硬件、网络等).事实上,自适应软件系统与自治计算系统采用的研究方法和技术很难做出区分,因此许多研究人员也常常对“自适应”、“自治计算”、“自管理”几个说法不加区分的互换使用[18].(3)软件自适应环.由软件自适应的定义可以知道,要完成一个基本的软件自适应过程至少包括3个核心环节:感知(sense)、评价(evaluate)和施动(act).感知环节用来收集环境及用户需求信息,捕捉环境及需求的变化;评价环节基于所获取的变化、预定的目标和推理评价机制得出该如何调整自己才能适应这种变化的结论(例如,将组件A替换为组件B),最后,施动环节将评价结果施加到目标软件系统上,完成自我调整过程.上述过程构成了一个“感知-评价-施动”的自适应环(loop).对于自适应环的理解与描述,较为著名的是IBM的MAPE-K环[19],其将自适应过程分为监视(Monitoring)、分析(Analyzing)、规划(Planning)及执行(Executing)共4个阶段外加一个知识库(Knowledge-base).而Oreizy等人[15]将自适应环概括为评估与监视(evaluateandmonitorobservations)、规划改变(planchanges)、部署变化描述(deploychangedescrip-tions)、实施变化和采集观测信息(enactchangesandcollectobservations)几个环节.还有Dobson等人[20]将这种自适应环理解为采集(collect)、分析(analysis)、决策(decide)及施动(act)共4个阶段.Salehie等人[6]认为软件自适应环包括监视(moni-toring)、探测(detecting)、决策(deciding)及施动(acting)共4个环节.虽然不同研究人员对自适应环有着不同的表述方式,但其在本质上都是相同的:首先要感知变化,然后进行处理和分析变化,最后将分析结果施加到软件自身.从时间维看,软件自适应过程是一个不断反复、与软件系统运行相生相伴的循环过程.(4)软件自适应的基本设施.为了实现软件自适应,需要有相应的软件设施作支撑,既要有感知和识别变化的感知器(sensor)设施,还要有基于变化进行决策的自适应器(adaptor)设施和能将自适应决策结果施加到目标软件系统的执行器(actuator)设施.不同研究人员对这些软件设施有着不同的命名,如IBM的MAPE-K[19]将自适应逻辑分为感知器、自治管理器(autonomicmanager)和效应器Page4(effector),而Garlan等人[21-22]的Rainbow将其称之为探针(probe)、自适应管理器(adaptationmanager)和效应器(effector),虽然对自适应设施存在着命名上的差异,但其实质功能都是相同的,都是为了完成“感知变化、处理和分析变化、将分析结果施加到软件自身”这一基本过程.感知器、自适应器和执行器构成了软件的自适应逻辑(self-adaptationlogic).而与自适应逻辑相对应的是软件功能逻辑或应用逻辑(applicationlogic).自适应逻辑封装了实现软件自适应能力的机制和软件设施,应用逻辑实现软件正常的业务功能.受控制理论思想的影响,应用逻辑受控于自适应逻辑,有时也称应用逻辑为目标软件[22].2.1.2软件自适应的相近概念(1)自适应软件与Agent.拥有自配置、自优化、自愈和自保护等能力的自适应软件与来源于知识工程领域的agent[23]有一定联系.Agent是指驻留在环境下自主地执行动作并与其他Agent进行交互合作以满足设计目标的行为实体,驻留性、自主性和社会性是Agent的基本特征[24].Agent的研究源于人工智能领域,虽然近年来面向Agent的软件工程研究得到重视,但Agent并没有在开放复杂系统开发方面充分发挥优势和潜力,其主要原因之一就是Agent实现阶段仍缺乏有效的程序设计理论、语言和支撑平台[24],即agent在兼容现有主流软件技术和计算平台等方面仍面临不少困难.而自适应软件在本质上植根于主流软件技术,能包容现有主流软件方法和运行平台,更容易走向现实应用.但随着面向Agent的软件工程研究不断走向深入、自适应软件的智能不断增加,Agent与自适应软件之间的界限将变得愈加模糊.(2)自适应软件与控制软件(自适应系统软件).控制软件[25]是与自适应软件在概念上相近的一类软件系统.控制软件是控制系统中用来执行控制算法的软件,如图1(a)所示,其通过物理传感器和执行机构与被控的物理系统(如机械系统、电气系统)进行交互,使得物理系统能响应外部环境变化和图2反馈控制系统结构扰动,从而呈现为一个自适应的物理系统.从这个角度看,控制软件也可称为自适应系统软件.自适应软件与控制软件之间存在的最主要区别在于它们作用和控制的对象不同:自适应软件的作用对象是软件自身,强调的是对自身(如软件状态、方法调用、体系结构等)的调整和修正,如图1(b)所示;而控制软件的作用对象是客观世界物理系统,侧重的是对物理系统的调节和改变.2.2控制理论基础2.2.1控制与控制系统控制是一种面向目标(goal-oriented)的动作(action)[26].与某个动作相关联,需要有一个对象(object)来承受这个动作,还需要一个主体(subject)来执行这个动作.这个对象称之为被控对象(controlledplant),而这个主体称之为控制器(controller),也可以理解为控制算法的执行器.控制已成为现实世界的一种基本活动:如发电机组控制、汽车自动控制、航天器飞行姿态控制、网络流量控制等.为了实现各种复杂的控制任务,需要将控制器与被控对象按照一定的方式连接起来,形成一个有机整体,这就构成了控制系统.反馈或闭环控制(feedbackorclosed-loopcontrol)是控制系统最基本的形式,其核心原理是:控制器对被控对象施加的作用,是取自被控量的反馈信息,用来不断修正被控量与控制目标之间的偏差,从而实现对被控对象进行控制的能力[26].典型的反馈控制系统结构如图2所示.Page5反馈控制系统一般由控制器(Controller)、执行器(Actuator)、传感器(Sensor)和被控对象构成.图2中,y为被控对象的输出,如将某一Web应用系统MyWebApp作为被控对象,其服务质量如响应时间、用户界面显示模式(多媒体显示、文本显示)等都可根据应用场景的需要作为输出;r为参考输入或设定值(Setvalue),指期望的输出.例如,用户期望MyWebApp系统的响应时间能始终保持在3s左右,则可令r=3;e为控制误差,表示期望的系统输出r与实际测量输出y之间的差值,即e=r-y;u为控制输出,其为控制器根据误差e按照一定的计算规则(控制算法)进行运算所得出的结果.u通过执行器施加到被控对象上,使系统输出y向期望输出r逼近.反馈控制过程是一个动态过程,其最终的目标是让y动态逼近或等于r,即使控制误差e=0.与反馈控制对应的是前馈控制(forwardcontrol),也称开环控制(open-loopedcontrol),这种控制形式不需要采用系统输出来调整控制输出,而是直接采用参考输入来决定控制器的输出.前馈控制虽然结构简单,但无法确保系统的稳定性,抗干扰能力差,因而这种控制形式很少单独在现实世界中被应用.设计和实现一个控制系统必然是为了达到某种目的,这种目的主要表现在以下3个方面[27-28]:(1)调节控制.即确保系统测量输出接近或等于参考输入.如通过调整服务器池的大小来确保系统对用户的响应时间维持在3s.调节控制的关注点在于参考输入,当参考输入发生变化时,系统的输出也要发生变化,如果参考输入变化的较为频繁,则这种控制方式又称为跟踪控制(trackingcontrol).(2)抗干扰.即确保施加到系统上的扰动不会严重影响系统的输出.如当后台服务器在执行备份任务(可认为是一种干扰)时,确保系统的Web响应时间仍然维持在3s.这种控制方式与调节控制的主要区别在于其重点关注的是扰动输入而不是参考输入.(3)优化.即获得系统输出的最好值.如通过协调相关资源,使系统对用户的响应时间最小.对于同一个被控对象,采用不同的控制器(或控制算法)时往往会导致不同的控制效果,在控制领域,衡量一个控制系统设计的优劣一般采用稳定性(stability)、准确性(accuracy)、调节时间(settlingtime)及超调量(overshoot)共4个指标来进行评价[28].稳定性是指对于任意受限的输入,系统的输出能够保持在一定范围的能力;准确性是指在系统处于稳定状态时,系统输出能逼近或等于参考输入;调节时间是指系统输出从初始值到逼近稳态值(steady-statevalue)所花费的时间;超调量是指系统输出的最大偏移量与稳态值之差.从上面的讨论可以看出,控制的本质就是“以变制变”,是以期望值与实际值间的误差,依据某一种计算逻辑规则,来产生控制输出,从而使控制对象的性能趋向期望值.自适应的本质是“以变适变”,是通过改变自己的行为来适应其外部环境的变化.自适应的过程就是系统实体通过控制自己的行为,从而适应外部环境变化的过程.因此,“控制理论”作为处理动态系统行为的理论,是实现动态软件系统“自适应”的一种有效工具.2.2.2典型控制律控制理论的发展经历了经典控制理论[27]、现代控制理论[26]和智能控制理论[29]几个阶段.经典控制理论主要解决单输入单输出问题,一般采用微分方程、传递函数等工具分析和解决问题.现代控制理论不仅关注系统的输入输出,而且更关注系统内部的状态,采用状态空间矩阵来描述和解决多输入多输出问题.智能控制理论是研究与模拟人类智能活动及其控制与信息传递过程的规律.控制领域典型的控制律包括比例积分微分(Proportional-Integral-Derivative,PID)控制[30]、自适应控制[13]、最优控制[26]、离散事件控制[31]、预测控制[32]、智能控制[29]等.限于篇幅,本文不再对其技术细节展开讨论.3基于控制理论的软件自适应基本思想与代表性工作3.1基本思想通过上文对软件自适应概念的分析和控制理论的讨论可以看出,软件自适应问题可以转化为控制问题;同时,控制理论也为软件自适应研究提供了完备的理论工具支持.基于控制理论的软件自适应的核心思想是将软件系统作为被控对象,将用户关心的软件性能(如QoS)或行为(如UI显示方式)等作为系统输出,依据控制领域的反馈机制和控制律、设计合理的控制器,来感知软件运行状态及其环境变化、按照需求约束调控软件系统性能和行为,从而达到软件能自动适应需求及外部环境变化的目的.基于控制理论的软件自适应的一般框架可用图3表示.Page6图3基于控制理论的软件自适应一般框架与反馈控制系统的结构(图2)类似,基于控制理论的软件自适应框架主要由自适应控制器(adap-tationcontroller)、感知器、执行器、软件被控对象系统(softwareplantsystem)、通讯设施(communica-tionfacility)等实体组成,自适应控制器与传感器、执行器之间依靠通讯设施进行数据交换.与控制系统不同的是,图3所示的控制器、执行器和传感器都是软件实体而非物理实体.感知器用于感知来自软件及其环境的变化,自适应控制器基于控制器进行决策,而执行器基于决策结果调控软件的状态、行为或结构.从自适应软件的组成来看,自适应控制器、传感器和执行器构成了自适应逻辑部分,而软件对象系统构成了应用逻辑部分(又称可适应软件系统,adaptablesoftwaresystem).3.2代表性研究工作采用控制理论的方法来研究软件自适应问题正吸引着越来越多研究人员的关注.早期,Shaw[33]参照控制系统结构提出了一种软件开发的过程控制风范(process-controlparadigm),其对于控制理论引入到软件工程领域起到重要推动作用.但这种方法的受控对象仍然是物理系统而非软件系统,故从这一角度来看,我们难以将其归结到软件自适应的框架下.在当前基于控制理论的软件自适应研究领域,出现了以下几类有广泛影响的研究工作:基于反馈结构的软件自适应、软件控制论(softwarecybernetics)、自控制软件(self-controllingsoftware)、计算系统反馈控制、软件性能反馈控制等(如图4).(1)基于反馈结构的软件自适应.该类研究方法主要借鉴控制理论的反馈思想,将软件自适应逻辑实现为闭环结构形式,来保证软件系统能动态、实时地应对变化,但其自适应决策机制不采用标准的控制理论,而多采用adhoc的算法.该类方法的典图4基于控制理论的软件自适应代表性研究工作型代表工作有Garlan与Cheng等人的Rainbow框架[21-22],IBM的MAPE-K模型[17],Kaiser等人的KX架构[34-36]等.这类研究工作代表了当前一般性的软件自适应方法,在此不再展开讨论.(2)软件控制论.软件控制论是研究控制理论(工程)与软件工程之间相互作用(interplay)的一个领域[10,37-38].国内学者蔡开元和国外学者Cangussu、DeCarlo、Mathur等是这一研究分支的发起人和典型代表.软件控制论要解决的基本问题是何时(when)、如何(how)处理软件行为、软件过程或软件系统以使之适应并满足环境变化条件下的新旧目标[10].目前该领域的主要研究方向包括软件中反馈及自适应控制机制的形式化和量化,控制理论的自适应原理在软件过程及系统中的应用,软件工程的基本原理和理论在控制系统中的应用,软件工程理论与控制工程理论集成[10].基于控制理论的软件自适应是软件控制论研究的一种重要方面[37-38].软件控制论在国际软件工程领域有着较大影响,在COMPSAC国际会议下设有IWSC(InternationalWorkshoponSoftwareCybernetics),每年举办一次.Page7(3)自控制软件.这种研究分支的基本思想是将软件系统视为被控对象,并将软件行为和环境建模为动态系统,同时通过专门的控制器来改变软件被控对象的输入值.Kokar等人[39]提出了基于控制理论风范的自控制软件概念,其为确定和设计在操作运行阶段能够控制自身的软件提供了技术框架.自控制软件模型从3个层次支持控制能力:反馈、自适应和重构(reconfiguration)[39].后来,Kokar等人[40]将自控制软件概念与自适应软件概念链接起来,并采用反馈控制理论解决软件系统的QoS确保问题;而Fescioglu-Unver与Kokar[41]应用自控制软件范型实现了Tuba搜索算法的参数自调整,提高了搜索效率.(4)计算系统反馈控制.该研究分支的基本思想是采用反馈控制理论来控制和协调计算系统的相关计算、能源等资源,以使系统服务输出达到服务级目标(ServiceLevelObjective,SLO)要求.IBM的Hellerstein等人[28]和Diao等人[42-43]、HP的Zhu等人[44-47]是这一范型研究的典型代表.如Diao等人[42]设计了一种多输入多输出反馈控制器缩短了DB2UniversalDatabaseServer在不同工作负载(workload)下的响应时间,还结合反馈控制建模技术实现了IBMLotusDominoServer的SLO-最大用户连接数的自动调节以确保CPU利用率保持在期望的范围内[43].Padala与Zhu等人[45]利用控制理论解决了数据中心虚拟机环境中在应用程序不同层服务指标确保和实现CPU等资源高效利用.(5)软件服务反馈性能控制.这种研究分支将软件服务的性能确保问题映射为反馈控制问题,使用控制理论的方法实现软件QoS确保.美国弗吉尼亚大学的Abdelzaher等人[48-49],华盛顿大学的Lu等人[50-52]是这一研究分支的代表人物.如Abdelzaher等人[48]采用经典反馈控制理论来实现Web服务器系统在负载不可预测条件下的过载预测、性能确保和服务分化(differentiation).而Lu等人[50]采用反馈控制实现实时系统在开放与不可预测环境下的自适应,以确保CPU利用率保持在期望的范围内.Kreidl与Frazier[53]利用反馈控制构建软件安全自动防卫系统,提高软件系统的生存性(survivability).(6)基于标准控制的软件自适应与自管理.除了上述有影响的几类研究工作以外,还有一部分相对分散、但数量可观的研究人员也在充分利用标准控制理论作为工具来研究解决软件自适应问题,实现软件系统的自适应与自管理能力.这类工作不但在形式上能借鉴控制系统的结构,并且还利用控制理论作为自适应环的决策方法,以来自外部环境及需求的变化为驱动触发软件状态、行为或结构的调整.我们将这些工作统称为基于标准控制的软件自适应与自管理.例如,Tziallas等人[54]采用监督控制算法结合软件构件本体建模方法构造自适应软件,实现为了匹配需求目标或获取更好功能和性能时进行自我行为和结构的调整.Filieri等人[55]采用离散时间马尔可夫链(DiscreteTimeMarkovChain,DTMC)进行软件可靠性建模,将可靠性转换为概率,当软件面临环境变化和干扰时通过控制理论实现软件状态迁移或替换,从而确保软件在运行过程中自动满足可靠性需求.Shen等人[56]基于开环控制、反馈控制和自适应控制等思想提出了3种软件自适应模型,并给出了这些模型的具体实现框架.上述给出的几类代表性研究工作都有各自的研究特色,软件控制论强调控制工程与软件工程之间的相互作用,其研究主题既涵盖了软件自适应,还涉及软件测试、软件过程等内容;而自控制软件、计算系统反馈控制和软件服务反馈性能控制这几种范型受各自研究领域的限制,更多体现在软件自适应的调参数这一维.4综述方法与过程为了更为深入理解基于控制理论的软件自适应研究现状,从中挖掘和抽取对软件自适应研究人员有价值的知识关注点,本文在研究和撰写的过程中,借鉴和部分地遵循了Kitchenham[57]提出的系统性文献综述(SystematicLiteratureReview,SLR)方法.该方法将综述过程划分为3个阶段:规划(planning)、实施(conducting)和报告(reporting).其中规划阶段主要完成综述问题定义、确立文献筛选标准和方法等任务,实施阶段主要包括文献检索选择与分类、文献数据抽取与分析等内容,最后在报告阶段系统性展示综述结果.下面主要基于这一方法展开讨论.4.1综述问题定义定义(formulate)综述所关心的问题(researchquestions)是SLR方法的首要一步.作为软件自适应的研究人员,面对现有基于控制理论的研究工作,我们会自然地关注如下问题:(1)RQ1.对现有基于控制理论的软件自适应研究工作该如何进行分类?(2)RQ2.基于控制理论的软件自适应方法的发展现状是什么?Page8(3)RQ3.当前基于控制理论的软件自适应研究工作还存在的哪些不足?未来发展趋势是什么?4.2文献筛选4.2.1文献收集策略基于控制理论的软件自适应研究涉及到控制工程和软件工程两大研究领域,为此,其文献检索工作是一个相对复杂的过程,需要综合运用多个数据源和搜索引擎.本文选择的文献数据库主要包括IEEEXploreDigitalLibrary,ACMDigitalLibrary,ElsevierScienceDirect,SpringerDigitalLibrary,GoogleScholar,中国知网等.所采用的检索关键词主要有“softwareself-adaptation(软件自适应)”、“self-adaptivesoftware(自适应软件)”、“controltheory(控制理论)”、“cybernetics(控制论)”、“feed-backcontrol(反馈控制)”等.另外,基于我们的研究经验,我们还精选了与本文主题密切相关的若干软件工程与控制工程领域的会议论文集和期刊(如表1所示)进行了深度检索.表1基于控制理论的软件自适应相关会议与期刊InternationalSymposiumonSoftwareEngineeringforAdaptiveandSelf-ManagingSystemsInternationalConferenceonAutonomicComputingInternationalConferenceonSoftwareEngineeringInternationalWorkshoponSoftwareCyberneticsACMSIGSOFTInternationalSymposiumontheFoundationsofSoftwareEngineeringIEEEInternationalComputerSoftwareandApplicationsConferenceInternationalConferenceonQualitySoftwareReal-TimeandEmbeddedTechnologyandApplicationsSymposiumAsia-PacificSymposiumonInternetwareIEEEConferenceonDecisionandControlAmericanControlConferenceJournalofSystemsandSoftwareIEEETransactionsonSoftwareEngineeringIEEEControlSystemsIEEETransactionsonParallelandDistributedSystems另外,本文在搜集文献时,还采用了“滚雪球”的方法,从若干综述性文献[6,46-47]的引文中发现和收集密切相关的研究工作,来最大可能地扩大覆盖范围.4.2.2保留淘汰标准为了实现对前一阶段所收集文献进行筛选,本文建立了如下的文献保留淘汰标准:(1)文献出版的时间跨度为1991~2015;(2)文献中自适应系统的控制方法属于一般控制理论的研究范围(如经典控制理论、现代控制理论和智能控制理论);(3)文献中自适应系统的被控对象需与软件工程密切相关(如软件应用系统、中间件、支撑软件开发和运行的过程与环境资源等);(4)文献语言为英文和中文,其中中文文献为带有英文摘要的中文核心期刊.按照上述标准,除了基于经典控制理论和基于现代控制理论的软件自适应文献被保留下来之外,基于智能控制理论(如模糊控制、神经网络控制)的软件自适应文献也同时被包含进来.同样地,基于上述标准,现有大量的关于采用控制理论实现网络路由控制等方面的文献将不在本文考虑的范围之内.另外,现有软件自适应研究工作大都基于来自控制域的反馈控制思想而构建,因此,我们为使下文研究工作分类具有完整性,也额外选择了具有明显反馈控制特征的12篇(即文献[15,17,19,21-22,34-36,58-61])常规软件自适应文献作为讨论和比较的对象.经过上述步骤,本文共收集了70篇符合筛选标准的代表性文献,具体见附表1.5分类框架为了回答前节提出的针对基于控制理论的软件自适应研究的综述问题RQ1,理清该领域研究的现状与动态,本文提出如图5所示的文献分类标准.基Page9于控制理论的软件自适应研究涉及到控制工程和软件工程两个领域,因此,本文从控制工程和软件工程两个视角来建立分类标准.5.1基于控制工程视角的分类标准从控制工程视角来看,控制系统及其思想方法会以何种形式被借鉴或映射到软件自适应系统中是关注的重要问题之一.为了便于控制系统结构与软件自适应系统在结构形式上的比较,本文按照软件自适应结构与反馈控制系统结构间的对应关系,基于软件自适应结构小于、大于或等于反馈控制系统结构的思路,将基于控制理论的软件自适应研究工作概括为3种类型:简单反馈型、广义控制型和等效映射型.这种分类思想如图6所示.(1)简单反馈型(或称“<”型).这种类型的软件自适应,如图6,较为单一地借鉴了控制系统的反馈思想,只是在结构上采用了闭环反馈形式,而其结构组成和自适应决策机制与控制系统的组成要素、控制策略完全不同.相对于由传感器、控制器、执行器组成的标准控制系统而言,这类软件自适应研究由于仅仅借鉴了控制系统中的反馈结构,其他的控制器、传感器等概念没有直接引入,故其中体现的“控制成分”少于标准控制系统,所以简单反馈型又可称为“<”型.如基于IBM的MAPE-K框架[17]的软件自适应方法[62],其在结构上由监视器(Monitor)、分析器(Analyzer)、规划器(Planner)和执行器(Executor)及知识库(Knowledge-base)组成,在自适应决策算法方面多采用ECA规则[22,63-64],这与常图6基于控制工程视角的分类思想示意规控制系统基于“传感器-控制器-执行器”的结构和基于经典控制理论或现代控制理论等控制策略有明显不同.前文提及的基于反馈结构的软件自适应代表性工作可以归结到这一类型中来.事实上,现今多数软件自适应研究工作[17,21,65]都可划分到这一类别中.(2)广义控制型(或称“>”型).这种类型的研究工作,如图6,其自适应的时机不再限于单一的软件系统运行期,而是将其扩展到一般软件过程,如软件测试过程[38]、软件容错过程[66]等,实现这些过程的自动化与自适应.这类软件自适应的被控对象已经从常规的运行维护期的软件扩展为一般软件过程(如测试、容错)中的软件,较传统控制系统被控对象而言,其内涵更丰富,因此又可简称为“>”型.前文提到的软件控制论[10]的部分研究工作可归属于这种类型.如文献[67]参照自适应控制理论的思想提出自适应测试的概念,将被测试软件作为被控对象,测试策略作为控制器,在测试过程中能根据需要自动调整测试策略、从而能更加有效地发现和剔除软件中的错误.(3)等效映射型(或称“=”型).这种类型的研究工作,如图6,采用对等匹配的思想,将软件自适应环等效映射为控制环,其结构形式和组成要素几乎都与控制系统相同,因此等效映射型可简称为“=”型.根据这一划分标准,3.2节所讨论的自控制软件、计算机系统反馈控制、软件服务反馈性能控制、基于标准控制的软件自适应与自管理这几类代Page10表研究工作也都可自然地归属于等效映射型.例如,文献[43]直接采用标准反馈控制结构和经典PI控制理论来调控计算资源以在多变工作负载环境下确保SLO服务级目标的实现.5.2基于软件工程视角的分类标准基于控制理论的软件自适应研究归根为软件工程领域的问题.从软件工程的角度来考察当前研究工作是软件自适应研究和开发人员非常关心的内容.因此,本文参照一般的软件开发过程,提出概念框架、理论基础、开发方法和评价分析4个分类标准,以用来分析和发现现有文献中蕴含的研究规律.(1)概念框架.其用于描述基于控制理论的软件自适应的概念内涵、结构组成和运行机制,是解决“What(是什么)”方面的问题.通过概念框架,能直观建立对基于控制理论的软件自适应软件模型的理解.具体地,概念框架又可进一步分解为结构形式、调控模式和输入输出等方面进行描述.①结构形式主要用来刻画软件自适应中自适应逻辑与基本应用逻辑之间的分布关系,主要包括外置式和内嵌式两种[6].外置式自适应软件系统由自适应引擎和可适应(adaptable)软件组成,二者常分布于不同进程中,外部独立的自适应引擎用来管理和调控可适应软件;而在内嵌式自适应软件系统中,自适应逻辑内嵌到基本应用逻辑或目标软件中,二者常常共享相同的计算资源.②调控模式是指自适应逻辑调整基本应用逻辑的方式,主要包括调参数、调行为和调结构3种方式.调参数是指通过改变基本应用逻辑(目标软件)的参数来实现自适应目标;调行为指通过改变基本应用逻辑中函数调用或方法来实现自适应;调结构通过改变基本应用逻辑内部构件的连接关系或直接构件替换来实现自适应.③输入输出是指软件自适应环所采用的输入输出变量的数量.输入输出变量的多少能够表征自适应环的复杂程度.常见类型有单个输入变量与单个输出变量(SingleInputandSingleOutput,SISO)、单输入变量与多个输出变量(SingleInputandMultipleOutputs,SIMO),多个输入变量与单个输出变量(MultipleInputandSingleOutputs,MISO)、多个输入变量与多个输出变量(MultipleInputandMultipleOutputs,MIMO).(2)理论基础.基于控制理论的软件自适应研究中,其决策和建模一般都建立在严格的数学和控制理论的基础上.定义“理论基础”这一分类标准的目的在于理清现有研究工作中自适应决策和建模机理,以为研究开发人员提供借鉴.这一分类标准实质上是探究软件自适应关于“Why(为什么)”方面的问题,其可进一步地分解为数学工具和建模方法两个子类.①数学工具是控制理论进行控制决策和建模的手段.总体而言,控制理论的数学工具可大体上分为经典控制理论、现代控制理论和智能控制理论等不同控制理论工具.这些工具一般采用不然数学语言进行表达.如经典控制理论常采用微分方程,现代控制理论常采用状态空间方程,而智能控制理论则基于模糊逻辑、神经网络等智能算法.而在软件工程领域中常用的是进程代数等形式化语言以及自动机理论.②建模方法是指对被控对象(目标软件系统)的动态特征进行建模的方法,建立被控软件对象的合理模型是实现软件自适应的前提.在控制理论中,对被控对象建模主要有两种方法:第一性原理(firstprinciple)法(白盒法)和系统辨识(systemidentifi-cation)法(黑盒法).第一性原理法利用基本的物理规律(牛顿定律、热力学定律等)分析、推理来建立反映系统状态和行为的数学模型;而黑盒法则是基于被控对象的输入输出数据样本对,借助系统辨识理论确立被控对象的近似模型.(3)开发方法.这一分类标准旨在从软件开发的角度来认识基于控制理论的软件自适应研究现状,其有助于弄清“How(怎么做)”方面的问题.自然地,开发方法又可分解为需求分析、设计实现、辅助工具等子标准.①需求分析即是借助专门的需求分析技术方法和工具对基于控制理论的软件自适应需求进行合理描述与表达,或是采用控制理论的思想研究解决软件自适应需求建模等方面的问题.例如,Souza等人[68]采用经典PID控制的比例、积分、微分思想建立了一套独特的自适应需求描述语言AwReqs,能够在系统运行时即时汇集过去状态、实时感知现在状态和及时预测未来状态趋势.②设计实现即是指基于控制理论的软件自适应的设计方法和实现机制.设计方法包括基于UML的设计与建模等,实现机制包括程序结构、编程模型等代码层次上的软件构造方法.③辅助工具是指用于支撑基于控制理论的软件自适应开发的自动化、可视化软件支撑工具,其能屏蔽控制理论自身的复杂性,减轻开发者的负担,提Page11高开发效率.(4)评价分析.该分类标准用于总结分析现有基于控制理论的软件自适应方法效果及其运行质量,也即是“V&V(Verification&Validation)”评价问题.对基于控制理论的软件自适应这类研究工作进行评价分析,其可能的技术途径主要包括形式证明、案例实验和模拟仿真:①形式证明是指通过形式化的数学工具来对基于控制理论的软件自适应系统性质、性能等进行严格推理与证明,并形成评价结论.例如,可采用控制理论中较为完备的稳定性分析方法[28]对自适应动态过程进行评价.②案例实验是指基于特定场景搭建实验系统对基于控制理论的软件自适应方法进行评价分析.③模拟仿真是指借助于仿真工具(如Matlab)对基于控制理论的软件自适应过程控制算法和效果进行仿真和评估.6基于控制理论的软件自适应研究现状分析根据前文定义的分类标准,将检索到的研究文献进行了分类整理,具体结果如附表1所示.下面分别从控制工程视角(包括控制结构)和软件工程视角(包括概念框架、理论基础、开发方法和评价验证等侧面)来对基于控制理论的软件自适应研究现状进行分析讨论,从而来回答RQ2问题.6.1控制结构分析在控制系统的设计中,研究和确定控制结构是其重要前提.而类似地,控制结构形式同样是基于控制理论的软件自适应研究的一个重要环节.前文已讨论,通过与标准控制系统对照,我们将基于控制理论的软件自适应的控制结构概括为简单反馈、广义控制、标准映射3种类型.基于附表1的统计数据,现有文献采用这3种控制结构类型的数量对比如图7所示.从图7我们可以直观发现,在3种类型中,等效映射是最常用的一种形式,所占比例最高(70篇中有46篇).等效映射型软件自适应不但在形式上充分借鉴常规控制系统结构,而且还采用了标准的控制理论作为自适应决策运算逻辑.这种类型多用在软件系统参数调整、性能和资源优化方面.例如,Parekh等人[69]采用经典积分控制结构和方法实现对软件系统参数的调节,使服务级目标维持在规定范围内.与此类似,Diao等人[43]将IBM自治计算架构映射为自动控制系统结构,采用经典控制算法解决服务器负载均衡问题.Karlsson等人[70]提出一种基于自适应控制理论的数据存储自适应框架Triage,确保动态负载条件下存储系统的性能隔离(performanceisolation)和性能差异化(performancedifferentiation)的质量目标.而Liu等人[71]提出了基于多变量最优控制的自适应框架,实现共享资源的动态分配以满足特定级别应用的服务差异化.广义控制型软件自适应在检索到的文献中也占有一定比例(70篇中有12篇).这种类型的研究工作将控制的应用范围从单纯的软件性能调整泛化到软件需求、测试和容错等问题域,为这些问题的解决提供了新颖的技术途径.例如,Cai等人[72]基于自适应控制的思想提出自适应测试的新方法来灵活地进行软件可靠性评估,他们还将软件容错问题转换为一种智能监督控制问题[66],建立了一种基于控制的软件容错架构.刘春等人[73]基于反馈控制思想将适应性需求的识别和分析转化为对控制系统反馈回路的识别和分析,从而能合理地将环境变化融入适应性需求识别分析中.简单反馈型是大多数软件自适应研究工作采用的架构形式,其外在形态借鉴了反馈控制结构,但其核心自适应策略没有采用控制理论算法.从选取的12篇代表性文献来看,这类研究工作多借助于软件体系结构、构件等设施来构造和描述具有单层及多层特征的自适应反馈控制结构.例如,Kramer与Magee[9]认为软件体系结构能为软件自管理提供泛化(Generality)、抽象级别(Levelofabstract)、扩展潜力(Potentialforscalability)等好处,并提出了一种包括构件控制(componentcontrol)、变化管理(changemanagement)和目标管理(goalmanage-ment)的软件自管理三层体系结构模型(ThreeLayerArchitectureModel,TLAM),从而使得构件根据全Page12局架构规约来调整交互行为能达到系统目标.而Oreizy等人[15]依照大规模自适应(adaptation-in-the-large)思想提出了基于软件体系结构的自适应软件概念框架,其将自适应分为演化管理和自适应管理两个层次,并强调了自适应过程维护架构模型和实际可执行系统之间一致性的重要性.Garlan等人[21-22]提出的Rainbow自适应概念框架则更加显式地采用了软件体系结构风格,包含架构评估器、自适应管理器、策略执行器、模型管理器、探针、效应器(effector)等核心设施,这种概念框架具有根据不同应用需求进行裁减的能力.而Parekh等人[36]则提出了集中式自适应框架KinesthesticseXtreme(KX)来专门解决遗留软件系统的自适应问题.6.2概念框架分析本文从结构形式、调控模式、输入输出3个维度来刻画和分析基于控制理论的软件自适应概念框架.6.2.1软件自适应的结构形式首先从结构形式这一维度来进行分析讨论.在这一维度上,外置式和内嵌式是搭建软件自适应结构的两种主要途径.图8为针对附表1列出的研究工作所采用的结构形式的统计与对比分析.图8基于控制理论的软件自适应的结构形式对比不难看出,外置式结构是最普遍的结构形式,占到了70%的比重(共有49篇文献).外置式软件自适应结构将自适应逻辑独立于应用逻辑或目标软件图9软件自适应的结构形式分类之外运行,如图9(a).这种结构下的软件自适应逻辑常以大粒度的构件、中间件等形式存在,以独立的外部自适应引擎的方式来实现应用系统自适应.例如,Zhang等人[74]提出的ControlWare框架采用中间件封装闭环控制算法,实现互联网QoS性能的收敛性确保(convergenceguarantees),从而为软件编程人员屏蔽了控制理论的复杂性.而Rainbow[21]框架同样采用了这种外置式结构,其拥有可独立运行的架构层(architecturelayer)管理自适应逻辑,并通过转换基础设施(translationinfrastructure)实现对目标系统(targetsystem)的调控.类似地Zanshin[75]和KX[36]等研究工作则借助构件来搭建外置式反馈控制结构.外置式自适应框架具有独立性、可维护性好的特点,但由于自适应逻辑需要开辟单独的运行空间,要考虑与目标软件之间的跨进程、跨网络访问的通信设施和机制(如ControlWare[74]和Rainbow[22]),因而其构造和实现具有一定的复杂性.由图8可知,内嵌式结构在当前研究工作中也占有相当一部分比例(共有17篇文献).在内嵌式结构中,软件自适应逻辑内嵌到目标软件之中,二者常常共享同一计算资源,共生共存于相同的运行空间.综合现有工作来看,这种内嵌式结构又可进一步地分为两种形式:内嵌分离式(图9(b))和内嵌缠绕式(图9(c)).对于内嵌分离式架构,虽然自适应逻辑和应用逻辑共享同一软件计算空间,但从程序代码这一层次来看,自适应逻辑代码和应用逻辑代码仍是分离的.如Yang等人[76]的研究工作采用面向方面编程(AspectOrientedProgramming,AOP)思想将自适应逻辑程序代码模块化织入到目标软件代码内部,并在内部独立于应用逻辑代码.而Liu等人[77]则在系统内引入一个基于控制算法的自适应安全模块来实现安全性与QoS性能间的平衡.内嵌分离式结构,具有结构清晰,代码维护更新方便等特点;而内嵌缠绕式架构中,自适应逻辑与应用逻辑程序代码交织耦合在一起,传统条件表达式的实现方Page13式(如散布在程序中的“if-then-else”式的异常处理程序)等便属于这种架构.总体而言,相比外置式结构,内嵌式结构可维护性相对较弱,但由于自适应逻辑与应用逻辑共享运行空间和计算资源,所以内嵌式结构的构造实现相对简单,是一种轻量级的方法.6.2.2软件自适应的调控模式基于控制理论的软件自适应逻辑一般通过调整应用逻辑的参数、行为或结构来对应用逻辑施加影响.现有研究文献有的通过单一方式(如只调整参数)来改变应用逻辑状态,还有采用多种方式(如既调参数又调结构)综合作用来调控应用逻辑.图10是对本文70篇样本文献所采用的调控模式的综合对比分析.从图10可以看出,现有基于控制理论的软件自适应研究工作大部分都采用了单一的调控模式,也有一部分工作综合采用了两种或三种调控模式.(1)单一调控模式对于单一调控模式而言,调参数这种模式在所有调控模式中所占比例最大(共有33篇文献),其主要原因在于这种模式的构造和实现最为简单.这种调控方式一般通过操控和改变软件系统内部的状态变量来影响软件性能.例如,Kusic等人[78]通过对大型数据中心虚拟服务器环境中的虚拟机数量、运行虚拟机的主机数量、CPU资源向虚拟机的分配量等参数进行综合调控,来实现节电的目标.Kamra等人[79]在其Yaksha框架中通过调整接受概率(acceptanceprobability)参数来确保3层结构Web站点的响应时间.但总体而言,调参数这种细粒度的调控方式由于影响作用范围小,因此大多常用于对软件系统的资源调度、性能优化、运行节能等非功能性指标的优化方面.调行为是另外一种被较多采用的调控模式(共有9篇文献),其通过改变或替换软件系统内部的方法调用来影响软件的运行行为,因此其相对于调参数这种模式而言,对软件系统影响的粒度和力度都更大.例如,Kreidl等人[53]在自治防护系统研究(autonomicdefensesystem)中基于反馈控制决策结果来调用相应的软件方法来自动执行终止进程(killprocess)、停止主机(halthost)等防护行为,提高系统在网络环境下自主生存能力.Dawson等人[61]利用反射技术(reflection)并通过调用反射API函数来改变软件行为(如进行系统异常处理等).然而,随着软件系统日益呈现网构化、普适化等分布式特征,其对调结构这一模式的需求也更加强烈.在本文所检索的70篇文献中,单纯采用调结构这一种模式的文献有12篇,比采用调行为模式的文献数量要多.软件体系结构、构件等软件设施为支撑调结构模式提供了高效的工具.例如,在Peng等人[80]的研究工作中,为了防止性能指标恶化,首先采用PID控制器来决策生成一个软目标,而后依据这一个软目标基于推理器来动态产生能实现软目标的系统配置,最后根据这个配置对构件化软件系统实现重构.同样地,Georgas等人[63]采用反馈控制调结构模式和软件体系结构技术使得机器人系统具有自适应能力.(2)综合调控模式综合使用调参数、调行为和调结构等调控模式能够使得软件具有更强的自适应能力.首先讨论两种调控方式相结合的研究工作.从图10可以看出,调参数与调行为、调行为与调结构是两种常用的结合方式,且调行为与调结构相结合的方式则显得更多(共有8篇文献),但我们在70篇样本文献集却没有发现调参数与调结构相结合的研究工作(这种想象背后的原因我们目前无法给出合理的解释).从现有文献来看,采用调参数与调行为相结合的方式的研究工作主要关注于软件非功能属性如性能的调控与确保.例如,在ControlWare框架[74]中,提供了多用途执行器(multipurposeactuator),既能分配调整资源(调参数),亦可输出(export)API函数供应用程序调用(调行为),通过这两种方式的综合作用,来实现互联网服务的性能确保.另一方面,调行为与调结构相结合的调控方式不但关注系统的非功能属性也关注系统的功能属性.如Tziallas等人[54]的研究工作基于监督控制器来自动胶合(gluing)软件构件(调结构),替换失效构件,来确保软件正常功能服务,同时又可控制构件的行为进行Page14处理异常错误等.再如,Bhat等人[81]基于受限前向控制器(limitedlook-aheadcontrol)调整系统构件的复合(调结构)与交互(调行为),既能优化数据传输开销(非功能属性),还能防止数据丢失(功能属性).还有若干研究工作能同时支持这3种调控方式.例如,在我们前期的基于模糊控制的软件自适应概念框架[76]和面向软件模糊自适应的UML建模扩展[82]等工作中,都可同时支持调参数、调行为和调结构这3种方式的UML建模和设计等,为基于控制理论的软件自适应能力实现提供了丰富的技术手段.6.2.3软件自适应的输入输出分析基于控制理论的软件自适应的一个显著特点是所有的软件自适应环都有显式的输入输出变量.输入变量一般对应着反馈控制回路的感知环节,而输出变量常对应着执行环节,研究与确定软件自适应环输入输出的是软件自适应环的构建和分析的前提,因此其也是表征基于控制理论的软件自适应概念框架的核心要素之一.按照输入输出的4种类型(SISO,SIMO,MISO和MIMO),对附表1的样本研究文献进行了分类统计,其结果如图11所示.基于统计结果,我们发现采用多输入多输出(MIMO)类型的研究文献数量最多(共有37篇文献),其根本原因在于随着软件系统面临环境、需求和自身结构复杂性的不断增加,对软件的某一功能或性能指标的调控或寻优涉及的因素也越来越多,需要多种因素综合考虑才能确保自适应效果.比如,为使复杂虚拟数据中心能自动应对负载突变和资源消费类型的变化,Padala等人[83]提出基于MIMO的AutoControl框架,其输入为资源利用率和应用性能等变量,输出为CPU和磁盘调度等变量,从而确保服务级目标(SLO).同样地,Chuang等人[84]提出支持MIMO的移动QoS自适应管理框架,以网络带宽、出错率等变量为输入,以网络质量、出错优先级等变量为输出,实现移动服务在复杂移动操控环境下的自适应.另一方面,单输入单输出(SISO)作为一种最简单有效的类型也为不少研究工作所采用(共有18篇文献).基于SISO的软件自适应方法一般在某一软件关键运行状态(如CPU利用率)进行感知的基础上,实现对软件系统中的某一关键环节(如属性、行为或结构)进行调控.例如,Fescioglu-Unver等人通过自动修改某一搜索算法的参数来控制算法的搜索强度(intensification),使得算法具有适应不同问题结构的适应性.而Wang等人[85]基于CPU获得权(CPUentitilement)作为输入,实现对资源分区大小的自动调整.总体而言,SISO这种类型在较早期相对简单的软件系统使用较多.在一些场景中,单入多出(SIMO)和多入单入(MISO)这两种类型也得到了一定程度的应用(SIMO类型有2篇,MISO有篇3文献).例如,Zhu等研究人员在文献[47]中给出了一个SIMO的输入输出模型:以资源分配量(allocation)作为单个输入,以应用软件性能(如响应时间和吞吐量)和资源利用量作为输出,这种模型能较好地应对软件系统工作负载的变化;再如,Shen等人[56]在PKUAS平台中发现吞吐量(throughout)受制于另外3个因素即线程数量、实例数量、最大连接数的影响,于是建立以线程数量、实例数量、最大连接数作为输入、吞吐量作为输出的MISO调控模型,以解决PKUAS的性能优化问题.SIMO和MISO尽管在现实中应用较少,但其仍是SISO和MIMO两种类型的有益补充.6.3理论基础分析本小节旨在弄清现有主流的基于控制理论的软件自适应研究工作是采用何种控制理论工具并如何进行决策和建模等问题.下面分别从自适应决策的数学工具和建模方法这两个方面进行分析和讨论.6.3.1数学工具分析经典控制、现代控制和智能控制构成了当前控制理论体系.经典控制的一般描述语言为微分方程,现代控制理论的一般描述语言为状态空间方程,而智能控制常见的描述语言为模糊逻辑或神经网络等.但在本文收集的样本文献中,有部分文献采用了基于马尔可夫链的随机控制[55,79],还有的采用了基Page15于自动机的监督控制[84,86-87].为了简便起见,在借鉴常规控制理论分类方法[29]的基础上,我们将随机控制方法归结到现代控制理论,而将基于自动机的离散事件控制归结到智能控制的框架中.本文对附表1列出的70篇样本文献进行较为详细的统计和对比分析,如图12所示.从图12可以容易地看出,经典控制理论是被最多使用的一类数学工具(共有27篇文献).其原因在于基于微分方程描述的经典控制理论(如PID控制等)较为简单,且发展得已较为成熟,已为广大软件工程研究人员所知晓.例如,在Lu等人[11]提出的基于反馈控制的自适应实时调度框架中,采用了经典PID控制最为简单的P(比例)控制算法,具有计算效率高等优点.而Lim等人[88]在研究了基于自动控制的云计算资源自适应机制,采用了PID控制的I(积分)控制算法,能有效消除累积误差,确保了计算资源的调度精度.但值得说明的是,经典控制理论假设被控对象是线性的,而现实世界大多软件系统是非线性的,因此对于日益复杂、非线性特征愈加明显的软件系统,单纯的经典控制理论工具已经难以有效解决其自适应问题.为了应对软件系统复杂性的增加所带来的自适应决策难度大的挑战.能够模拟人类思维方式的智能控制理论开始为软件自适应研究人员所采用[76,89-90].如图12所示,在本文界定的70篇文献中,基于智能控制理论的软件自适应研究文献数量(共有17篇)仅次于经典控制理论.应用智能控制理论作为自适应决策工具的最大特点在于其无需建立被控软件系统的精确数学模型,从而能在较大程度上屏蔽软件系统自身的复杂性.例如,我们前期研究的软件模糊自适应框架[76],采用了模糊控制理论作为自适应决策工具,通过建立近似人类思维的模糊规则来描述软件系统的行为特性,简洁直观,也能较为容易地被自适应软件开发者所理解掌握.类似地,文献[84,90]等也采用了模糊控制理论作为自适应决策工具.另一方面,自动机理论也是支持自适应决策的有效工具.如Phoha等人[86]采用确定有限状态自动机工具构建监督控制器,有效避免了在自适应环实现时对被控软件做结构性修改.但自动机理论所固有的状态空间爆炸缺陷仍是影响其应用于复杂软件系统自适应研究的主要障碍.现代控制理论多基于状态空间方程来描述自适应逻辑和被控软件对象,相对基于微分方程的经典控制理论难以描述系统内部中间变量而言,基于状态空间方程的现代控制理论能同时确定系统的全部内部运行状态,建立的模型能反映系统的全部独立变量的变化.作为一种相对成熟的控制理论,其在软件自适应研究中得到较大范围应用[55,78,91-92].例如,SMART软件自适应框架[92]采用标准的线性时不变(lineartimeinvariant)状态模型来预测和控制软件系统的行为.Kusic等人[78]采用了可在离散域高效工作的有限前向控制(limitedlookaheadcontrol)方法作为自适应决策模型,提高了大型虚拟服务器环境资源利用率和能源效率.从另一角度看,软件系统在动态开放环境中运行常变现为不确定性和随机性,因此,一些研究人员将软件自适应过程映射为随机过程,并采用基于马尔可夫链的随机控制理论来进行软件自适应决策和建模.如Filieri等人[55]采用离散时间马尔可夫链(DiscreteTimeMarkovChain)来表达基于特定概率的失效状态的迁移,建立软件系统控制模型来以持续满足多变环境下的软件需求.现代控制理论在软件自适应中应用面临的主要弱点是状态空间方程的计算复杂性和难理解性,导致缺乏控制理论基础的自适应软件开发者常常难以理解这类理论和方法.6.3.2建模方法分析在基于控制理论的软件自适应研究中,被调整软件系统也常常需要建立精确的数学模型,白盒和黑盒作为系统建模常用的方法,在软件自适应建模中得到了广泛应用,详见附表1.白盒法从软件系统内在的结构组成和运行机理出发,基于第一性原理建立软件系统的数学模型;而黑盒法从软件系统外在的输入输出和表象行为出发,运用系统辨识等工具建立软件系统的数学模型.图13是对附表1列出的文献按照黑盒和白盒进行统计对比的结果.从图13可以看出,基于黑盒法的软件自适应研究文献数量明显多于白盒法(黑盒法有46篇,白盒Page16图13采用黑盒和白盒方法的文献数量对比法有14篇),占绝大多数.其根本原因在于软件作为一种特殊而复杂的非线性系统,采用第一性原理分析和建立能够反映其内在运行机理的白盒数学模型是非常困难的,因此黑盒法被大量采用.控制领域的系统辨识方法是对软件系统进行黑盒建模的基本工具.例如,Padala等人[45]首先建立实验环境获得虚拟机软件系统的输入和输出数据样本集,而后通过系统辨识法建立系统近似模型,并设计了自适应控制器.Lu等人[51]在研究基于反馈控制的自适应Web服务器架构时,应用最小平方估计(leastsquaresestimator)方法估算出差分方程的参数值,从而建立被控软件系统模型.类似地,文献[92]也采用最小平方系统辨识法建立软件系统的近似模型,并将该模型作为逆模型作为控制器来预测系统可能出现的资源瓶颈.黑盒法应用于软件系统难以直接分析和建模的场景中,但黑盒法所建立的往往只是系统的近似线性模型,因此当其用于对外部扰动频繁、内部非线性时变特征明显等系统建模时,所建模型将与系统真实模型偏差较大.白盒法在软件自适应建模中也占有一小部分比例.白盒法最显著的优点在于其能够建立反映被控软件对象内在机理的精确模型,其适用于那些相对简单和运行规律性较明显的软件系统.例如,Kreidl等人[53]结合自防御网络安全系统运行特点,运用部分可观测马尔可夫决策过程(partially-ObservableMarkovDecisionProcess)建立了系统自防御控制过程模型.Kamra等人[79]将Web服务器抽象为处理器共享队列(ProcessorSharingqueue),并采用排队论等工具建立系统模型,使得软件自适应PI控制器具有自整定能力.软件工程领域的形式语言也是对被控软件进行白盒建模的有效工具,如Weyns等人[59]建立了基于Z语言描述的软件自适应模型FORMS,Zhang等人[60]综合采用线性时态逻辑(LTL)和Petri网来对软件系统进行建模与分析.白盒建模法的一个重要缺陷在于其需要对软件系统内在规律有清晰、详尽的认识和理解,这无形中加重了软件开发者的负担.随着当前软件系统规模不断增大、复杂度日益增加,白盒法在现实世界的应用将会面临更多挑战.6.4开发方法分析按照5.2节提出的分类标准,本文提出的开发方法这一标准主要关注需求分析、设计实现、辅助工具这3个方面,旨在弄清基于控制理论的软件自适应研究在此3个维度上的现状.对照需求分析、设计实现和辅助工具这3个维度,我们对附表1列出的70篇文献进行了分类和汇总,形成图14所示的对比图.图14在开发方法3个维度上的文献数量对比从图14可以看出,总体而言现有基于控制理论的软件自适应研究在开发方法上研究的还缺乏深入性和系统性.例如,在70篇文献中,虽然关注设计实现的文献数量最多,共有33篇文献,但仍不到总数量的一半.而从同一平面上看,对需求分析、设计实现和辅助工具的研究也不均衡,参差不齐,系统性不强.6.4.1需求方面的研究现状分析从需求分析这一维度来看,本文试图发现基于控制理论的软件自适应特有的需求分析方法,以及寻找能够运用控制理论改进软件自适应需求分析的方法.例如,Angelopoulos等人[75]在提出基于控制理论的自适应框架中,首先基于分析层级过程(AnalyticHierarchyProcess,AHP)工具建立自适应需求目标模型,为后续基于控制理论的自适应机制设计奠定了基础.Han等人[82]还专门开发了面向软件模糊自适应的需求分析与建模UML工具FuzzyCase.而在基于控制理论的软件自适应需求分析方法的改进方面,Souza等人[68]采用经典控制理Page17论的PID控制思想建立了一套独特的自适应需求描述语言AwReqs,其基于PID控制思想被分为常规(Regular)、聚合(Aggregate)、趋势(Trend)、变化(Delta)等类型,其中常规型需求语言模式对应于PID的P(Proportional,比例)部分,聚合语言模式对应PID中的I(Integral,积分),而趋势和变化语言模式对于PID中的D(Differential)部分.通过巧妙而合理利用PID思想,AwReqs需求描述语言能够在系统运行时即时汇集过去状态、实时感知现在状态和及时预测未来状态趋势.国内刘春等人[73]也提出了基于反馈控制的自适应需求识别与分析方法,将环境作为软件的控制对象,通过建立环境感知反馈回路和需求感知反馈回路来分别应对已知和未知的环境变化.但从收集的文献样本来看,现有工作关于基于控制理论的软件自适应需求分析方面的研究还很少(只发现4篇相关文献),而且还不够深入.6.4.2设计与实现方面的研究现状分析从设计与实现这一维度看,已经有一定数量的文献开始关注软件自适应的设计实现问题.其中,属于前文划分的简单反馈型这类软件自适应研究文献由于直接采用了软件工程的技术方法,其在设计和实现方面的研究更为完善和深入,而反射和AOP则是其最经常使用的两种技术.如Dawson等人[61]采用反射技术研究了自适应系统监测机制的实现问题,给出了基于Java反射的自适应观测器实现方法.Janik和Zielinski[93]提出了可适应面向方面编程框架AAOP(AdaptableAOP),并利用这一框架给出了基于感知器(sensors)、效应器(effectors)和目标方面(goalaspects)的自适应软件实现模型.另一方面,等效映射型这类研究工作在基于控制理论的软件自适应构造机制方面已有若干有意义的成果,主要关注自适应控制器的核心实现.例如,Diao等人[43]结合具体示例,部分地给出了一种通过限制应用程序的执行来减少性能影响的“油门调节”程序参考模型.Abdelzaher等人[48]给出了一种adhoc的实现方法,将性能确保自适应软件实现为中间件形式,并将关键功能行为以API接口的形式供web服务器软件设施等调用,还给出了负载监视器、利用率控制器的实现方法.Zhang等人[74]给出了较为系统的基于ControlWare的自适应QoS开发方法学,包括基于契约描述语言(contractdescriptionlanguage)的QoS需求规格定义、基于拓扑描述语言的(topologydescriptionlanguage)的QoS至控制环的映射、控制环组合、系统辨识、控制器配置和整定等关键环节,其是我们发现的在设计与实现方面最为完善的研究工作.但总体而言,现有基于控制理论的软件自适应研究方法在设计和实现层面大多为针对某一具体案例或问题的算法设计与编程等adhoc方法,依然在通用化的程序设计模型和软件构造实现方法缺乏系统性研究.6.4.3支撑工具方面的研究现状分析支撑工具能辅助软件工程师采用控制理论方法进行软件自适应自动化或半自动化的开发,从而不要求软件工程师具有较深的控制理论知识背景,其能减小劳动强度,提高开发效率.软件自适应的支撑工具是对自适应概念框架、理论基础、设计与实现技术等进一步向软件具体实现上的延伸,也就是说其常常依附于某一种软件自适应的概念框架和设计实现技术.就现有工作而言,简单反馈型这一类研究工作由于植根于软件工程技术,所提供的支撑工具也最为完善,但由于其研究内容的主体已经与基于控制理论的方法偏离较远,这里仅讨论几种代表性支撑工具.如IBM为了支持MAPE-K自治计算概念模型的开发,研制了AutonomicComputingToolkit(ACT)①,提供了控制台和工具来帮助问题诊断和工程化开发自治计算系统.Rainbow框架提供了集成化的开发环境RAIDE[22],包括运行库、Stitch自适应语言脚本编辑、控制台等组件,具有自适应逻辑的可视化编辑和自动化部署等能力.KX自适应框架也提供了一套成熟的工具包来支持遗留软件系统的自适应能力构建,包括Worklet[65]等构件.而在等效映射型等研究工作中,部分学者提出并研制了实用性强的支撑工具.如Diao等人[43]提出一种DTAC(DeployableTestbedforAutonomicComputing)支撑工具以减少应用控制理论到计算系统中的障碍,提供可插拔构件和工作负载模拟等设施.而ControlWare[74]是功能完善的一种软件服务自适应支撑工具,其提供了契约描述语言CDL、拓扑描述语言TDL等语言设施,软件工程师能容易地添加自适应性能确保能力到软件系统中,而不需具有控制工程师的背景.经过Bhat等人[81]扩展①IBMdeveloperWorks.Autonomiccomputingtoolkit.http://Page18的Accord工具[94]应该提供了较为完善的基于有限预测控制的软件自适应开发功能和设施.综上而言,基于控制理论的软件自适应方法在自动化支撑工具方面仍然缺乏,特别是能在软件工程实践中广泛应用的工具更为少见,难以全面地满足没有控制理论背景的软件工程师的需求.6.5评价验证方法分析如何对基于控制理论的软件自适应方法进行合理有效的评价和验证也是本文关注的重要内容.一般地,形式证明、案例实验和模拟仿真是进行评价验证的3种主要方法.我们对附表1列出的70篇文献按照这3种方法进行了梳理和归纳,采用不同评价验证方法的文献数量对比如图15所示.图15采用不同评价验证方法的文献数量对比结合图15我们可以看出,案例实验是基于控制理论的自适应研究人员最为常用的一种评价方法(共有57篇文献).而形式证明由于其理论建模和证明过程的复杂性、模拟仿真由于其缺乏真实性等,它们通常较少为研究人员所使用(采用形式证明方法的文献有8篇,采用模拟仿真方法的文献有3篇).但无论是案例实验还是形式证明和模拟仿真,其实质上主要是基于稳定性等反馈控制系统指标来开展自适应系统的性能评估验证等研究工作.也就是说现有基于控制理论的软件自适应研究工作多借用控制领域的如下评价指标来评估软件自适应动态过程:即稳定性(Stability)、准确性(Accuracy)或稳态误差(Steady-stateerror)、调整时间(Settlingtime)和超调量(Overshoot).Hellerstein和Diao等人[28,43]将这些指标统称为SASO指标.基于控制理论的软件自适应研究的案例实验一般结合数据中心、虚拟计算环境等运行平台开展软件反馈控制性能的评估.如Diao等人[42-43]、Hellerstein等人[28]主要基于IBM的DB2等数据管理计算平台开展实验,用于评价自适应系统的稳态误差、调整时间等指标.而Zhu等人[44,47]、Wang等人[85]多基于HP的虚拟计算环境开展实验来验证系统的QoS等性能指标.Lu等人[11,50-52]、Wang等人[95]、Abdelzaher等人[49]等多基于实时系统资源调度环境等设计实验,来评价验证QoS性能确保指标.基于控制理论的软件自适应形式证明一般采用控制理论的稳定性判据等方法来证明分析软件反馈控制回路的稳定性.例如,Lu等人[51]在其提出的EUCON研究框架中,提出了一种分析自适应分布式实时嵌入式系统稳定性的通用方法,并认为在一个稳定的分布式实时嵌入系统中,每个CPU的利用率都逼近于其设定值(Setpoint).Parekh等人[69]运用经典控制理论的根轨迹等方法分析了IBM的LotusNotesServer系统的服务级目标自适应确保系统的动态性能,并能预测系统在动态自适应响应过程中由控制器所衍生的震荡现象的出现与否.Li等人[88]还引入自适应灵敏度(AdaptationAgility)的概念,用来评价自适应系统逼近或达到目标过程中快速响应变化的精确性和速度.而就模拟仿真方法而言,通过对现有研究文献进行分析发现,其很少单独使用,一般与案例实验或形式证明等方法联合使用.例如,Lu等人[11]在研究实时系统资源自适应调度时首先基于稳定判据证明了控制器的稳定性,而后通过实时仿真器FECSIM对多种自适应调度算法进行了评估分析,他们还在文献[50]中基于Matlab仿真平台分析了所提出的EUCON控制算法的性能.此外,我们在早期的研究工作中[96],为了验证初步设想,结合运行案例,也采用了Matlab仿真环境对基于模糊控制的自适应算法开展了仿真实验.总体来说,尽管现有的基于控制理论的软件自适应过程评估与验证已经开展大量研究工作,但其更多采用了线性或近似线性的方法,其对于运行于动态、开放、多变环境下的更多呈现为非线性特征开始暴露出不足.因此,如何对具有非线性的软件自适应动态过程进行有效评价和分析仍是一个尚未被很好解决的问题.7研究存在的不足与未来趋势展望本节主要讨论当前基于控制理论的软件自适应研究存在的主要不足,并展望未来发展趋势,以回答RQ3问题.Page197.1现有研究存在的不足过去20多年来,人们围绕基于控制理论的软件自适应概念框架、理论基础、开发方法、评价分析等方面开展了较为有效的研究,并使得控制理论的方法正逐步为软件工程领域所接受.但基于前文对研究现状的调查和分析来看,无论是在其理论和技术的成熟性还是在面向现实世界工程应用等方面,当前基于控制理论的软件自适应研究与实践仍面临挑战,主要表现在如下几个方面:(1)难以建立具有非线性特征的软件系统精确模型软件系统内部的运行状态和作用关系是非线性的,这使得对软件系统的状态和行为难以线性地精确建模[80],从而为基于控制理论的软件自适应研究带来困难.但现有基于控制理论的软件自适应研究方法多假设软件系统为线性系统,并采用经典的线性控制理论如PID等来研究[11,43,50],显然会导致研究结果与真实结果存在较大偏差.而随着软件系统的复杂性日益增加,非线性特点更加明显,则传统线性控制理论将更加难以直接应用到软件自适应研究中来.(2)过于强调控制策略的设计现有基于控制理论的方法大多简单地把软件系统当作黑盒处理(前文统计结果表明黑盒法占77%),过于强调对控制律的设计,缺乏面向软件工程领域的软件方法和软件工具的研究.而另一方面,软件自适应的开发者多来自于计算机学科,对控制理论知之甚少,因而,现有基于控制理论的软件自适应研究方法极易在控制工程和软件工程之间形成语义和知识的鸿沟,且难以为软件工程领域所理解和接受.(3)缺少对软件自适应不确定性的处理和考虑软件系统运行于开放、动态、难控的环境之下,从软件内部看,当前软件自身所呈现的分布式特点增大了信息更新、处理、发布的不确定性[97],而从外部看软件又常面对突发、不确定的需求,这就使得软件自适应过程不可避免地存在不确定性.如何有效地管理软件自适应中的不确定性,已成为软件自适应研究中的重要开放问题之一[5,98-104].Yang等人[76,96,105]深入论证了软件自适应环中的不确定性常常表现为模糊性,如环境模糊性、需求模糊性和内部模糊性等.当前基于控制理论的软件自适应方法大多采用经典控制理论和现代控制理论等线性理论来应对变化和进行自适应决策,并采用第一原理或系统辨识的方法来试图建立软件系统的数学模型.但这些方法有效使用的前提是软件系统是可知可测的(如第一原理法)或系统中不确定性微不足道、可以忽略(如系统辨识法),因而现有基于控制理论的软件自适应方法难以直接而有效地处理自适应过程中存在的干扰和不确定性及模糊性;虽然有部分工作采用了模糊控制理论(如文献[90,106-107]),但其不是从解决自适应模糊性问题的角度出发的,而是将其作为一种易用的控制手段.(4)缺少有效的软件方法学研究和提炼当前大多基于控制理论的软件自适应研究仍单纯地将软件系统作为受控对象,采用的是“将控制理论应用到软件工程领域”的研究思路,缺少有效的侧重对面向软件自适应的基于控制理论的软件方法的研究和提炼[51,53,71-72,79],从而导致基于控制理论的软件自适应方法难以让软件工程师理解和掌握.因此,基于控制理论的软件自适应方法不能仅仅是控制理论简单地在软件工程领域的应用,更要注重控制理论与软件方法的深度融合,要形成软件开发技术和支撑工具,以利于对控制理论不是很精通的软件工程师能较为容易地掌握这种自适应软件开发风范.7.2研究展望基于上述研究进展和研究问题,本文认为,未来基于控制理论的软件自适应研究与应用需要重点解决以下问题:①系统性的软件方法学问题.现有基于控制理论的软件自适应方法仍将研究重点放在了控制器和控制律的设计上,难以满足软件工程师的开发需求,需要深入研究面向软件工程领域的基于控制理论的软件自适应基础模型、需求分析方法、程序设计技术等,形成基于控制理论的系统性软件方法学;②软件自适应过程复杂性和不确定性的处理及驾驭问题.需要研究相应的软件自适应过程不确定性处理和复杂性管理技术和方法;③工程化问题.需要研究从工程化开发的角度更多地借鉴软件工程领域的原理和原则以及成功的经验,从而为基于控制理论的软件自适应方法大规模应用与实践提供更为友好、高效的支持,如支撑系统、UML建模工具等.具体而言,上述问题可进一步分解为如下方面:(1)基于控制理论的软件自适应的软件模型与软件方法.一种软件范型或方法只有让软件开发者所能轻易地理解和掌握才能具有生命力.当前基于控制理Page20论的软件自适应方法多将研究重点置于控制理论这一侧,缺少面向软件工程领域的“软件化”模型与方法,难以让缺少控制理论背景的软件开发者所理解和掌握,为基于控制理论的软件自适应方法进一步实践和应用造成了很大障碍.因此,需要从不同层面来研究基于控制理论的自适应方法的“软件化”问题.首先,从软件模型层面进行研究,即研究控制理论作用下的自适应软件系统的体系结构、内部组成、各要素功能、它们之间的相互作用关系等;其次,从软件方法层面进行研究,即研究基于控制理论的自适应软件系统构造方法、设计技术、实现机理等.(2)软件自适应动态过程分析与评价前文已讨论,软件自适应过程是不断趋向自适应目标的动态过程,这一动态过程可能呈现出收敛、振荡和发散等现象.而软件自适应过程中的状态摆动(state-flapping)可能会抵消受控软件对象的优化操作[108].目前软件自适应的研究工作多将重点放在自适应系统设计与构造、自适应推理与决策等方面,即关注于自适应的“before”阶段(即如何设计和构造自适应软件系统),而缺少对自适应的“during”阶段(即自适应过程)的研究.而Lemos等也认为应该研究自适应软件运行时V&V验证(run-timeVerificationandValidation)技术[109].尽管有一些学者引入控制理论的若干指标,如稳态误差、稳定时间等,来对软件自适应动态过程来进行分析和评估,但缺乏系统性,且没有考虑到软件系统自身的特点.因此,需要借鉴控制理论的若干思想,并结合软件系统的自身特点,从以下几个方面来研究软件自适应动态过程分析与评价问题:其一,研究建立符合软件特点的软件自适应动态分析与评价的指标体系;其二,研究软件自适应动态分析与评价技术;第三,研究确保软件自适应动态过程收敛或稳定性的技术与方法.(3)应对软件自适应不确定性与模糊性上节已讨论,如何有效地管理和处理软件自适应中的不确定性和模糊性,是软件自适应研究中的重要问题之一,需要对这一问题开展深入研究,具体为:如何表达和描述软件自适应中的不确定性和模糊性,如何感知含有不确定性和模糊性的信息,如何基于不确定性或模糊性的信息进行自适应决策,如何将含有不确定性和模糊性的推理结论作用到受控的软件系统上等.笔者借鉴模糊控制思想在应对软件自适应模糊性等方面也进行了初步的研究和探索[76,96,105].(4)多环协作软件自适应软件自适应是在“感知-评价-施动”自适应环驱动下的一种过程.现有很多软件自适应的研究工作主要采用单一集中式的自适应环(如文献[15,19,21,39,43])来管理软件系统.但随着受控软件系统规模不断增大,单一自适应环已经难以满足复杂软件系统的管理需求,开始出现了多个自适应环共同作用下的软件自适应研究(如文献[58,75,101,110-111]).多个自适应环引入到软件系统中显然增加了其应对多重变化的能力,但如何让多个自适应环进行合理的组织、交互并有效协作、协同确保系统级质量目标是需要解决的重要问题[109].借鉴控制理论的集散控制(或分层递阶控制)思想,可能为解决多环协作提供一种途径,但如何面向软件系统设计相应的协调控制自适应环、局部控制自适应环以及这两种自适应环之间如何进行信息共享和交互等问题仍需要深入研究解决.(5)人机协同软件自适应控制理论的长期实践经验告诉我们,一个完全没有人参与的自动控制系统是不现实的,复杂系统的控制和管理需要人工控制方式和机器自动控制方式的协同作用.而对于开放、动态、多变环境下的软件系统而言,实现有人干预的自适应即人机协同软件自适应应该是一种较为现实的解决方案,因此研究人如何与软件自适应逻辑协同工作从而实现高质、高效的自适应能力是一个非常重要的问题,这一问题可分解为如下方面:在什么条件下需要人来控制干预、什么条件下需要自适应环来控制?人和自适应环相互间的控制作用如何无扰切换?人工控制和自适应环控制该如何进行协同、协调?等等.(6)基于控制理论的软件自适应支撑工具软件工程的历史经验表明,一套有效的软件方法和技术必须要有相应的可视化、自动化工具作支撑才能获得广泛的应用.较之常规软件开发过程,基于控制理论的软件自适应开发需要一定的控制理论知识,具有一定的复杂性,这对于软件开发人员来说仍然是一件较为困难的事,因而需要有相应的软件支撑系统来支持基于控制理论的软件自适应开发,减轻软件开发人员负担.这种支撑工具应该能较好地解决如下问题:如何有效地屏蔽控制理论的技术细节,让软件工程师轻松使用?如何可视化支持软件自适应逻辑的编辑和测试?如何能够自动化地生成自适应逻辑的可执行程序代码转化?等等.Page218结论随着软件系统的日趋复杂及其面临的外部因素(环境及需求)变化日益频繁,需要有一种机制来应对这些挑战,让软件具备自适应能力从而形成自适应软件已成为软件工程领域的研究热点.而近年来,采用控制理论来研究软件自适应问题已成为当前研究的一种重要风范.基于控制理论的软件自适应的核心思想是将软件系统作为被控对象,依据控制领域的反馈机制和控制律,来感知软件运行状态及其环境变化、按照需求约束调控软件系统性能和行为.本文讨论了软件自适应的基本概念,研究分析了基于控制理论的软件自适应的基本思想;在定义了综述分类框架基础上,讨论分析了基于控制理论的软件自适应的研究现状;最后,指出了当前研究存在的若干不足,并展望了未来研究趋势.虽然控制理论已在软件自适应研究中得到了较为广泛的应用并取得了明显的进展,但在研究的深入性、系统性等方面仍然存在很大发展空间,而如何把控制工程与软件工程二者之间更为合理和有效地融合将是未来研究的重要方向.致谢感谢南京大学软件新技术国家重点实验室计算机软件研究所许畅副教授、黄宇副教授在本文撰写过程中给予的指导与帮助,感谢审稿人对本文提出的宝贵意见和建议!
