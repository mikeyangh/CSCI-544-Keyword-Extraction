Page1带时间约束实时任务图模型上可调度性分析算法研究孙景昊关楠邓庆绪(东北大学信息科学与工程学院沈阳110819)摘要带时间约束的实时任务图(TCDRT)模型具有接近于时间自动机的丰富表达性,但是其关联的可调度性分析(SA)问题却是强NP困难的.目前的研究仅关注一类约束个数为常数K的易解模型:K-TCDRT,且局限于SA问题的图转换求解方法.这种间接求法使得问题的计算复杂度随约束宽度呈指数倍增长.该文研究TCDRT模型上可调度性分析问题的直接求解方法,为两个核心子问题给出新的理论结果:第一,针对需求上界函数(DBF)的计算问题,提出了考虑时间约束的路径需求结构,并据此设计了新的动态规划算法,其时间复杂度与约束宽度无关;第二,对于可调度分析上界T的限定问题,从理论上证明了该问题是伪多项式时间可解的,且计算复杂度不再与K指数相关,这使得文中算法性能较已有结果有指数级提升.更进一步地,该文方法还蕴含着一类新的TCDRT易解模型.该类模型突破了约束个数必须为常数的局限,其分析难度也较K-TCDRT有指数倍地下降.关键词时间约束;实时任务图;可调度性分析;需求上界函数;动态规划1引言在实时系统验证领域,形式化模型更关注系统的时间行为和不确定性等非功能特征,是系统可调度性分析的理论基础.为便于理论分析,形式化模型通常将系统抽象为一组独立且并发的实时任务T={τ1,…,τN},每个任务τi都将产生无限数量的作业序列.其中,最经典的实时系统模型是Liu和Layland(1973)[1]提出的周期任务模型.该模型上定义的可调度性分析(SchedulabilityAnalysis,SA)问题存在多项式时间算法.然而,模型在刻画系统行为方面却受到极大局限:实时任务的截止期必须和周期相等;任务释放的作业具有统一的执行时间,且释放时刻必须严格限定在周期的整数倍.作为另一个极端,时间自动机(TimedAutomata,TA)[2-3]能够精确刻画系统的时间特征,是实时系统最强有效的形式化模型之一.但是,TA上SA问题却是强NP困难的,甚至是不可判定性问题[4].一种优良的实时任务模型需在可表达性和易解性之间寻求一个折衷[5].之前的研究通常把SA问题是否具有(伪)多项式时间算法,作为衡量一个模型是否易解的标准[6].在TA和易解模型之间划定一条精确的界限,是实时系统领域面临的一个挑战性问题[7].在过去的40年间,众多学者致力于提出尽可能接近TA的易解模型,将模型上SA问题的难度限定在弱NP困难问题之内,探究伪多项式时间算法的存在性,并努力尝试优化和提高算法的性能.偶发任务模型是直接扩展自Liu&Layland模型的首个系统模型[8].该模型刻画了实时任务释放作业时刻的不确定性.与Liu&Layland模型不同,偶发任务模型上定义的SA问题成为NP困难问题,不再具有多项式时间算法.Baruah等人(1990)[9]将此类任务系统的利用率U限定在一个严格小于1的常数c内,并提出了伪多项式时间算法.文献[9]为之后的实时系统可调度性分析提供了统一的算法框架:首先,独立地分析每个实时任务的行为特征;然后,将这些分析结果线性组合在一起,构成整个任务系统的判定结果.具体来说,文献[9]引入需求上界函数(DemandBoundFunction,DBF)的概念,将SA问题归结为两个子问题来解决.(1)对于任意时间段t,如何计算任务τi的需求上界函数dbfτi(t)?(整个任务系统的需求上界函数dbf(t)=∑N(2)如何给定t的上界T,使得:对于任意的tT,若dbf(t)t,则可判定系统是可调度的.在偶发任务模型中,SA问题的计算复杂性取决于问题(2)中给出的上界T.文献[9]最先给出的上界T如下式所示,其中,Di为任务τi的截止期,Pi为任务τi的周期,U为任务系统的利用率.在之后的研究中,上界T又称为可调度性分析上界[10].T=maxD1,…,DN,max1iN{Pi-Di}U最近又有学者进一步缩小了该上界的范围[10],如表1中所示.但新的上界仍然是关于1/U的伪多项式规模函数.这意味着,当利用率U趋于1时,在最坏情况下SA算法将求解指数多个DBF计算问题.这使得基于DBF的分析方法具有一定的局限性.但是,同时也注意到,DBF方法的优点是:将困难的SA问题分解为若干易于求解的DBF计算子问题.偶发任务模型上关联的DBF计算问题具有O(1)的时间复杂度[9],这极大地降低了SA问题的难度.在更多任务模型的研究中,学者依然期望获得较低时间复杂度的DBF计算方法.但是,随着模型的可表达性增强,DBF计算问题将变得越来越困难.广义多帧任务(GeneralizedMulti-frameTask,GMF)模型[11]是偶发任务模型的一个重要扩展.GMF模型允许任务中具有多种类型的作业,各类作业具有不同的执行时间;同一任务中不同类型的作业以线性序释放.在GMF模型中,DBF计算问题不再具有O(1)时间可解的特性.为求解该问题,Baruah等人(1999)[11]提出了一个后来称之为“需求二元组”(DemandPair,DP)[12]的数据结构,并基于该结构给出了多项式时间的动态规划算法.在之后的研究中,DP结构被应用到更复杂的任务模型,如复发实时任务(RecurringReal-timeTask,RRT)模型[13]和非循环GMF(non-cyclicGMF)模型[14].值得注意的是,在RRT和非循环GMF模型中,根据DP结构设计的动态规划算法不再是多项式时间的,而是退化成伪多项式时间算法.其中,RRT模型中计算DBF的复杂度与时间上界T无关[15];非循环GMF模型中计算DBF的复杂度是关于T的线性函数[14],如表1所示.Page3表1任务模型上可调度性分析问题的计算复杂性{max(D1-P1),…,(DN-PN),∑N偶发任务模型GMF模型RRT模型non-cyclicGMF模型O(nT)DRT模型TCDRT模型On∏K注:表1中用到的变量说明如下:n为τi对应的任务图的节点个数;Pisum为任务τi中所有类型作业的周期和;Disum为任务τi中所有类型作业的最小截止期;Emaxi为任务τi中所有作业的最大执行时间;Ei为任务τi对应的DAG图中从汇点到源点的最大需求路径的需求量;Esum务τi中所有作业的执行时间之和.2011年,Stigge等人[12]提出实时任务图(DigraphReal-timeTask,DRT)模型.DRT模型的表达能力更加丰富,以上各类任务模型均可看做DRT模型的特例.例如,GMF中的每个任务模型是仅包含单个简单回路的DRT图;RRT模型对应有向无环图(DirectedAcyclicGraph,DAG);非循环GMF模型对应有向完全DRT图[5].对于DRT模型,研究者期望找到有效的DBF计算方法,其时间复杂度至多限定为T的线性函数.Stigge等人将DP结构扩展为“需求三元组”(DemandTriple,DT)结构,并基于此设计了新的伪多项式时间动态规划算法,但是时间复杂度是关于T的二次方函数.本文将提出一种新的数据结构,将动态规划算法的复杂度降低到T的线性函数.迄今为止,DRT模型是与TA最接近的易解模型.注意到,DRT模型与TA最大的差别是没有考虑时间约束需求.因此,Stigge等人(2011)[7]又进一步研究了带时间约束(TimingConstraints)的DRT(简写为TCDRT)模型:任务τi关联一组时间约束,每个约束形如(fromk,tok,γk),表示τi释放作业fromk和tok的时间间隔应至少与γk相等(其形式化定义详见第2节).TCDRT模型属于难解模型,Stigge等人[7]通过构造带有自环约束的DRT特例,将SA问题在伪多项式时间内规约为哈密顿路问题,从而证明了在TCDRT模型上SA问题是强NP困难的.同时,Stigge等人[7]也指出,当时间约束个数为2∑i=1,…,NEi1-U∑i=1,…,NEmaxi1-U∑i=1,…,NEsumi1-U∑i=1,…,NEsumi1-U常数K时,TCDRT模型上SA问题变为弱NP困难问题,并提出了一个将TCDRT转化为DRT的方法.这种图转化方法间接地给出了K约束TCDRT模型上SA问题的伪多项式时间判定算法,但同时也使得算法复杂度关于时间约束宽度γk呈指数倍增长.无论是计算DBF,还是限定时间上界T,算法的时间复杂度都是关于∏K本文致力于给出TCDRT模型上SA问题的直接求解方法,旨在降低可调度性分析算法的时间复杂度,并找到TCDRT模型更多的易解特例.首先,对于DBF计算问题,本文提出了更加高效的动态规划算法,其时间复杂度不再与时间约束宽度γk相关,而是简化为约束个数K的函数.更进一步地,当模型中任意两时间约束(fromk,tok,γk)和(fromk,tok,γk)满足tok≠tok时,本文中DBF计算方法的时间复杂度与约束个数K也无关,直接简化为T的线性函数.另外,对于如何限定时间上界T的问题,本文从理论上证明了:存在一个算法能够在伪多项式时间内给出T的精确上界,并且算法的时间复杂度不但与∏K与文献[7]中算法相比,本文算法的性能得到指数倍提升.本文第2节介绍TCDRT的系统模型和可调度性分析问题的形式化定义;第3节提出DBF计算问题的动态规划算法;第4节从理论上证明了可调度Page4分析上界限定问题的伪多项式时间可解性;最后是总结.2系统模型和问题定义2.1带时间约束的实时任务图实时任务系统定义为由一组有限数量且相互独立的实时任务构成的集合={τ1,…,τN}.中任意实时任务τ都可由有向图D(τ)=(Vτ,Aτ)表示,其中Vτ是节点集,Aτ是弧集.图D(τ)中的节点{v1,…,vn}与τ释放的所有作业类型一一对应.每个节点vi关联两个整形参数e(vi)和d(vi),分别用来表示作业Ji的最坏执行时间和相对截止期.注意到,与传统调度问题[16]不同,任务τ在理论上可以任意多次释放作业Ji,规定每次释放的作业Ji具有相同的e(vi)和d(vi).若作业Ji在t时刻释放,则该作业必须在t+d(vi)时刻之前完成.t+d(vi)又称为作业Ji的绝对截止期.另外,图D(τ)中的每条弧(vi,vj)表达了τ释放作业Ji和Jj的先后顺序,并且弧(vi,vj)上关联的非负参数p(vi,vj)表示作业Ji和Jj释放时刻的最小间隔(又称为周期[12]).假设任务τ中每个作业Ji关联的截止期d(vi)均小于等于相应的周期p(vi,vj).满足此类假设的系统,称为约束截止期任务系统[9].以上即为实时任务图(DRT)[12]的定义.在本文中,任务图D(τ)还关联一组时间约束C(τ)={(from1,to1,γ1),…,(fromk,tok,γk)}.C(τ)中的每个约束(fromi,toi,γi)要求遍历任务图D(τ)上两节点fromi和toi的时间间隔不得小于γi个时间单位.为表达方便,将fromi称为约束的左节点,toi称为约束的右节点,γk称为约束的宽度.若约束集的势k为常数K,则任务τ简记为K-TCDRT任务.特殊地,若K=0,则K-TCDRT任务即简化为一般的DRT任务.例1.一个3-TCDRT任务τ如图1所示.τ可释放6种不同类型的作业J1,…,J6,在图中分别对应节点v1,…,v6.节点间的实线弧表示任务τ释放作业的周期,虚线弧则表示时间约束.例如,约束(v6,v2,11)表示任务τ释放作业J4和J2的时间间隔不能小于11个时间单位;自环约束(v3,v3,9)表示任务τ连续释放两个J3的时间间隔不能小于9个时间单位.2.2带时间约束任务图的语义模型TCDRT任务τ释放的作业序列与有向图D(τ)中的路径一一对应.任务τ释放作业Ji的行为触发路径对D(τ)中的相应节点vi进行遍历.可将任务τ释放并执行作业Ji的行为用一个三元组(ri,e(vi),ri+d(vi))来表示,其中,ri是作业Ji的释放时刻;e(vi)和d(vi)是节点vi关联的两个参数,分别对应作业Ji的执行时间和相对截止期.对于任务τ释放的任意一个作业序列σ=[(r1,e(v[1]),r1+d(v[1])),…,(ri,e(v[i]),ri+d(v[i])),…],图D(τ)中相应的路径定义为π=[(r1,v[1]),…,(ri,v[i]),…],其中,v[i]为路径中第i个遍历的节点,ri为遍历节点v[i]的时刻.由任务图定义可知,序列σ中作业的释放时间间隔需要满足周期和集合C(τ)中的约束.这些时间约束可在路径π中由如下不等式精确刻画.(1)对于任意i=1,2,…:ri+1-rip(v[i],v[i+1]).(2)对于任意1i<j,且(vi,vj,γl)∈C(τ):rj-riγl.另外,对于有限长度的路径π=[(r1,v[1]),…,(ri,v[l])],分别给出路径需求和长度的定义如下:(1)路径需求:e(π)=∑l(2)路径长度:d(π)=rl-r1+d(v[l]).例2.图1中任务τ释放的一个作业序列为σ1=[(0,1,2),(3,1,6),(6,2,9)].该序列对应的路径为π1=[(0,v4),(3,v5),(6,v2)].首先,观察路径π1中相邻两节点的遍历时刻,遍历节点v4和v5以及v5和v2的时间间隔均为3.注意到,弧(v4,v5)和(v5,v2)关联的周期参数分别为2和3.易知,路径π1中遍历相邻节点的时间间隔均大于等于相应弧关联的周期.这说明作业序列σ1满足周期约束.另外,注意到路径π1中包含节点v4和v2,这两节点的遍历时间间隔需受到(v4,v2,6)∈C(τ)的约束.可计算得遍历v4和v2的时间间隔为6,恰巧等于时间约束(v4,v2,6)的宽度.这意味着作业序列σ1在满足周期约束的同时,也满足C(τ)中的时间约束.最后,路径π1的需求和长度分别为4和9.Page52.3可调度性分析问题如下.本文关注TCDRT任务系统的可调度性,定义定义1.可调度性[7](Schedulability).TCDRT任务集T在可抢占的单处理器系统上是可调度的,当且仅当T释放的所有作业序列集合均可在该单处理器平台上由一种可抢占式策略成功调度,使得序列集中的每个作业均在其截止期之前完成.根据定义1,对于序列集合中任意一个作业J=(r,e,d).可知,作业J在r时刻释放,且执行作业J需要占用e个单位时间的处理器资源.若作业J能成功调度,则J需要在d时刻之前完成,即J占用处理器的时间需要落在时间段[r,d]内.可调度性分析问题是指,对于给定的TCDRT任务系统,是否存在一个判定算法A:若能够被某种策略成功调度,则算法A回答“是”;否则,若不能被任何调度策略成功调度,则算法A回答“否”.在单处理器系统中,EDF[17-18]是最优的调度策略[19].因此,单处理器上任务系统的可调度性分析问题又等价为系统是否可以被EDF策略成功调度的判定问题.可调度性分析的算法框架建立在一种被称为需求上界函数的基础之上.下面首先给出需求上界函数的定义.定义2.需求上界函数(DemandBoundFunc-tion,DBF).对于中的任意一个任务τ和一个时间段长度t,dbfτ(t)表示任务τ在长度为t的时间段内可能产生的最大执行时间需求,其计算公式如下:dbfτ(t)=max{e(π)π是D(τ)中路径,另外,对于整个任务系统,定义需求上界函数如下:易知,在长度为t的时间段内,处理器至少要提供dbf(t)个时间单位的计算资源用来执行任务系统中已释放的作业.否则,中的任务就有错失截止期的危险.根据DBF的定义,能够很自然地推导出系统可调度的一个充要条件,如定理1所述.定理1[7].TCDRT任务系统在单处理器上是可调度的,当且仅当:t0:dbf(t)t.根据定理1,TCDRT系统的可调度性分析问题即等价为一个判定问题:寻找一个违反以上性质的tf,即dbf(tf)tf.若存在这样的tf,则判定系统不可调度;否则,系统可调度.该判定问题又被分解为两个关键子问题:(1)DBF计算问题;(2)tf的上界限定问题.若以上两问题均可在(伪)多项式时间内求解,并且问题2中tf的上界限定在伪多项式规模内,则可断定TCDRT即为易解模型.然而,文献[7]从理论上证明了TCDRT是难解模型,不存在伪多项式时间的可调度性分析算法,并且指出,直接解决以上两个子问题将面临如下挑战:(1)通过遍历图D(τ)来计算BDF,需要共同考虑周期和时间约束集C(τ)对路径长度的影响.(2)更重要的是,注意到在DRT模型中,通过检查任务图中的简单回路,即可获得tf的精确上界.然而,该结论在TCDRT模型中却不成立.这使得DRT中用于确定tf上界的伪多项式时间算法在TCDRT中不再适用.考虑到以上困难,文献[7]通过图转换间接给出了问题的求解方法:先将TCDRT等价转换为DRT模型,再应用DRT中的现有方法分析系统的可调度性.这种间接方法带来了额外的复杂性,计算时间与约束宽度的连乘积∏K中,将为TCDRT模型提出一种能够直接分析可调度性的方法,其计算复杂度也将改进为与∏K相关.3求解DBF的动态规划算法在之前的研究中,基于需求二元组(DP)结构的动态规划算法广泛用于各类实时任务模型的DBF计算,并且算法复杂度至多是关于可调度性分析上界T的线性函数[11,13-15].面对更复杂的DRT模型,DP结构同样有效,基于DP的DBF计算方法仍被限定在伪多项式时间内,但算法复杂度却变为T的二次方[12].更加困难的是,以上算法结果并不能轻易扩展到TCDRT模型[7].迄今为止,尚未见到在TCDRT中计算DBF的伪多项式时间算法.本节为TCDRT模型中的DBF计算问题提出一种伪多项式时间的动态规划算法.注意到DRT模型是满足K=0条件的TCDRT特例.因此,在接下来的2.1节,首先从基本的DRT模型入手,以图论的角度设计新的数据结构,为DRT模型提出更高效的动态规划算法,使算法复杂度由T的平方降低到T的线性函数.然后,在2.2节考虑C(τ)中时间约束对动态规划递推方程的影响,将DRT中的Page6算法扩展到TCDRT模型中.3.1DRT模型上DBF的计算方法由定义2可知,对于任意给定的任务τ和时间长度t,计算需求上界函数dbfτ(t)等价为在任务图D(τ)中寻找一条长度小于等于t的路径,使得路径需求最大.本节设计一个动态规划算法,通过多条最优子路径之间的组合,得到最优路径.其中,每条最优子路径所关联的特征量均可抽象为如下数据结构.定义3.最大路径需求(MaximumPathDemand,MPD).给定图D(τ)中两节点vi和vj,以及时间段长度t,eD(τ)(vi,vj,t)表示在图D(τ)中分别以vi和vj为起点和终点,且长度小于等于t的路径对应的最大路径需求.根据最优化原理,MPD结构eD(τ)(vi,vj,t)可由以下定理中的递推方程计算得出.定理2.给定图D(τ)中两节点vi和vj,p(vi,vj)表示顺次遍历vi和vj的最小时间间隔.对于任意的时间段长度tp(vi,vj)+d(vj):eD(τ)(vi,vj,t)=max{eD(τ)(vi,vj,t-1),特殊地,对于i=j,且t=d(vi):eD(τ)(vi,vj,t)=e(vi).另外,对于任意的t<p(vi,vj)+d(vj):eD(τ)(vi,vj,t)=-.证明.对于t<p(vi,vj)+d(vj)的情况.由于在图D(τ)中不存在一条从vi到vj的路径,其长度小于p(vi,vj)+d(vj),易知eD(τ)(vi,vj,t)=-.另外,对于tp(vi,vj)+d(vj)的情况,将从两方面证明递推方程的正确性.首先,考虑t=p(vi,vj)+d(vj)的情况.图D(τ)中一定存在一条从vi到vj,且长度等于t的路径π.若将周期参数看作弧上的权值,路径π即对应图D(τ)中由vi到vj的最短路径.计算eD(τ)(vi,vj,t)的一个自然的枚举思路即在vi到vj的最短路径集合中找出最大需求的那条路径.可将最短路径集合划分为若干子集{l|(vl,vj)是D(τ)中的弧}.其中,l表示图D(τ)中以弧(vl,vj)结尾的路径子集.集合l中需求最大的路径定义为πl,则πl的需求e(πl)可看成两部分的加和:(1)从vi到vl的最大路径需求eD(τ)(vi,vl,t),其中t的取值为t-p(vl,vj)-d(vj)+d(vl),t和t的关系如图2所示;(2)终点上的需求e(vj).因此,eD(τ)(vi,vj,t)=max{e(πl)|l∈}=max{eD(τ)(vi,vl,t)+e(vj)|(vl,vj)∈Aτ}.另一方面,根据递推公式得,eD(τ)(vi,vj,t)=max{eD(τ)(vi,vj,t-1),eD(τ)(vi,vl,t)+e(vj)|(vl,vj)∈Aτ}.由于t-1<p(vi,vj)+d(vj),有eD(τ)(vi,vj,t-1)=-.这种情况下,仅式(1)等号右边第二项起作用.综上可知,由枚举方法求得的最优解和递推公式得到的解值相同,故在t=p(vi,vj)+d(vj)时,定理2中结论正确.特殊地,当i=j时,有p(vi,vj)=0.易知,t=d(vi)是t=p(vi,vj)+d(vj)情况的特例,故eD(τ)(vi,vi,d(vi))=e(vi)自然成立.接下来考虑t>p(vi,vj)+d(vj)的情况.一方面,证明路径存在性:图D(τ)中存在一条从vi到vj,且长度至多为t的路径.由递推方程可知,eD(τ)(vi,vj,t)可由两种可能的情况计算得到:(1)若eD(τ)(vi,vj,t)=eD(τ)(vi,vj,t-1),可知图D(τ)中存在一条从vi到vj,且长度至多为t-1的路径.易知,从vi到vj,且路径长度至多为t的路径显然存在;(2)若eD(τ)(vi,vj,t)由方程右边第二项max{eD(τ)(vi,vl,t)+e(vj)|(vl,vj)∈Aτ}导出,则图D(τ)中一定存在一条从vi到vl的路径π=([r1,vi],…,[rk,vl]),且路径长度d(π)至多为t=t-p(vl,vj)-d(vj)+d(vl),其中,vl是vj的直接前驱节点.将路径π与弧(vl,vj)合并成一条新的路径π=([r1,vi],…,[rk,vl],[rk+1,vj]).易知,新路径的长度d(π)t-d(vl)+p(vl,vj)+d(vj)=t.综上,图D(τ)中一定存在从vi到vj,且长度至多为t的路径.另一方面,证明eD(τ)(vi,vj,t)对应从vi到vj且长度至多为t的最大需求路径.定义π=([r1,vi],…,[rk,vl],[rk+1,vj])为从vi到vj且长度至多为t的最大需求路径,假设路径π的需求e(π)eD(τ)(vi,vj,t).由于路径π可看做是πil=([r1,vi],…,[rk,vl])和πlj=([rk,vl],[rk+1,vj])两段子路径的组合,路径长度和需求分别可展开为d(π)=d(πil)-d(vl)+d(πlj)和e(π)=e(πil)-e(vl)+e(πlj).注意到子路径πlj为弧(vl,vj),则有d(πlj)p(vl,vj)+d(vj)和e(πlj)=e(vl)+e(vj)成立.又因为d(π)t,则有d(πil)t=t-p(vl,vj)-d(vj)+d(vl)成立.即路径πil的长度小于等于t.根据定义3,有Page7动态规划算法如下.e(πil)eD(τ)(vi,vl,t),代入到e(π)的计算式中得:e(π)eD(τ)(vi,vl,t)+e(vj)eD(τ)(vi,vj,t).推出与假设矛盾,定理得证.根据定理2,提出计算需求上界函数dbfτ(t)的算法1.计算dbfτ(t)的动态规划算法.输入:任务图D(τ)及时间段长度t输出:DRT任务τ的需求上界函数集合{dbfτ(k)|kt}BEGIN1.FOReachvi,vj∈Vτ2.以周期作为弧的权值,计算从vi到vj的最短路3.REPEAT1kt:4.FOReachvi∈Vτ5.FOReachvj∈Vτ6.IFk<p(vi,vj)+d(vj)THEN7.eD(τ)(vi,vj,k)··=-;8.ELSEIFi=jandk=d(vi)THEN9.eD(τ)(vi,vj,k)··=e(vi);10.ELSE11.IFk-1p(vi,vj)+d(vj)THEN12.emax··=eD(τ)(vi,vj,k-1);13.FOReach(vl,vj)∈Aτ14.IFkp(vl,vj)+d(vj)-d(vl)THEN15.emax··=max{emax,eD(τ)(vi,vl,k-p(vl,16.dbfτ(k)··=max{dbfτ(k),emax};END算法1按照时间段长度k从1到t,顺次计算需求上界函数dbfτ(k).根据定义2可知,对于给定的k,若要计算dbfτ(k),需要先获得每对节点vi和vj关联的MPD结构eD(τ)(vi,vj,k).算法在4~16行计算了所有节点对关联的MPD值,并在其中选取一个最大值存储在emax中.根据定理2,对于任意两节点vi和vj,计算eD(τ)(vi,vj,k)需要分3种情况讨论:(1)当k<p(vi,vj)+d(vj)时,eD(τ)(vi,vj,k)··=-,对应算法6,7行;(2)当i=j,k=d(vi)时,eD(τ)(vi,vj,k)··=e(vi),对应算法8,9行;(3)此外,在一般情况下,eD(τ)(vi,vj,k)需要由递推式(1)来计算,对应算法10~15行.定理3.算法1是伪多项式时间的,且计算复杂性是关于时间段长度t的线性函数.证明.对于图D(τ)中任意的两个节点vi和vj∈Vτ,以及任意的时间段长度kt,算法1均需要计算一个MPD结构eD(τ)(vi,vj,k).易知,D(τ)中节点对个数至多为n×n,时间段长度k上界限定为t.因此,算法1中需要计算的MPD个数最多为O(n2t).另外,对于任意的长度k,需求上界函数dbfτ(k)可在所有eD(τ)(vi,vj,k)都计算完后,由max{eD(τ)(vi,vj,k)|vi,vj∈Vτ}计算得到,见算法第16行.综上,算法1是伪多项式时间的,其时间复杂度为t的线性函数O(n2t).与之前的研究相比,算法1将DRT中DBF计算问题的复杂度由t的平方降低为t的线性函数,进一步提升了求解效率.更重要的是,算法1还可以扩展到TCDRT模型,而以往DRT中求解DBF的动态规划算法在TCDRT中却不再适用[7].3.2TCDRT模型上DBF的计算方法本节将基于MPD的动态规划算法扩展到TCDRT模型中.与DRT模型不同,在TCDRT中构造一个MPD结构eD(τ)(vi,vj,t)需要额外考虑C(τ)中的时间约束.接下来,针对路径终点vj是否为某个时间约束的右节点,对eD(τ)(vi,vj,t)的递推方程分两种情况进行讨论.对于任意给定的两节点vi和vj,以及时间段长度t有:情况1.从vi到vj的路径不以任何时间约束的右节点结尾,即对于任意的(fromk,tok,γk)∈Cτ,均有vj≠tok成立.此时,MPD结构eD(τ)(vi,vj,t)仍然可由定理2中的递推方程(1)计算得到.情况2.路径以某时间约束的右节点结尾,即存在(fromk,tok,γk)∈Cτ,使得vj=tok.此时,计算eD(τ)(vi,vj,t)则需要考虑作用于终点vj上的时间约束.不失一般性,设时间约束(fromk,tok,γk)的右节点tok=vj,并且左节点fromk=vl.假设从vi到vj的路径中不止一次遍历节点vl,则只需判断离终点vj最近的一次遍历vl的时间是否满足时间约束(fromk,tok,γk),如例3中所示.因此,对于图D(τ)中的每个节点,本节只关注其在路径中最后一次被遍历的时刻.例3.如图1中3-TCDRT任务τ,考虑C(τ)中的时间约束(v4,v2,6).图中存在一条路径π=[(0,v4),(2,v5),(4,v4),(6,v5),(8,v4),(10,v5),(14,v2)],如图2所示.路径π遍历终点的时刻为14.注意到,路径π三次遍历节点v4,其遍历时刻按离终点v2由远及近顺序排列分别为0,4和8.显然,只需检查离v2最近一次对v4进行遍历的时刻,即可判断π是否满足时间约束(v4,v2,6).即由14-86可判定整条路径π满足约束(v4,v2,6).考虑更为一般的情况,假设C(τ)中有多个时间Page8约束都作用于路径终点vj.所有将vj作为右节点的时间约束构成集合C(vj)={(vi1,vj,γ1),…,(vikj,vj,γkj)}.对于每条以vj为终点的路径π,都对应一个C(vj)到π的指派,定义如下.定义4.约束指派(ConstraintAssignment,CA).对于给定的节点vj和一条以vj为终点的路径π,约束集合C(vj)={(vi1,vj,γ1),…,(vikj,vj,γkj)}到路径π的指派定义为assignj(π)=b1…bl…bkj.其中,bl为一个二进制位:若路径π包含节点vil,且在最后一次遍历vil之后除终点外再未遍历vj,则bl=1;否则,bl=0.通常将路径π的约束指派assignj(π)记为b1…bl…bkj的十进制形式.为表达方便,可直接用十进制指派赋值来标识路径π,即π=b1+2b2+…+2kj-1bkj.约束指派精确标识了那些作用于路径终点的时间约束,以下是约束指派赋值的例子.例4.考虑图1中节点v2,在C(τ)中以v2为右节点的约束子集为C(v2)={(v4,v2,6),(v6,v2,11)}.分别用二进制位b1和b2代表C(v2)中的约束(v4,v2,6)和(v6,v2,11).路径π1=[(0,v1),(7,v4),(9,v5),(13,v2),(15,v3),(17,v6),(21,v1),(28,v4),(30,v5),(34,v2)]以v2结尾,且路径π1中包含C(v2)中两约束的左节点v4和v6.注意到,路径π1在最后一次遍历v4和v6后,以及到达终点v2之前,再也没有对节点v2进行遍历,如图4(a)所示.根据定义4,约束C(v2)到π1的指派赋值为b1b2=11.另外,图4(b)同样给出一条以v2结尾且包含v4和v6的路径π2=[(0,v3),(2,v6),(7,v1),(13,v2),(15,v3),(17,v5),(19,v4),(21,v5),(25,v2)].注意到,路径π2在最后一次遍历v6之后并且在到达终点v2之前,又遍历了节点v2.因此,约束(v6,v2,11)对应的二进制位b2应取0.路径π2对应的约束指派应赋值为b1b2=10.基于定义4,DRT中的路径需求定义可进一步扩展为TCDRT模型中的指派路径需求.定义5.指派路径需求(AssignedPathDemand,APD).给定时间段长度t,以及图D(τ)的任意子图D,对于图D中任意一条从vi到vj的路径π,eD(vi,vj,assignj(π),t)表示路径π在满足C(vj)中的时间约束,且长度d(π)t,时,所获得的最大需求,其中assignj(π)为C(vj)到路径π的约束指派.根据以上定义,对于图D中任意的两节点vi和vj,以及时间段长度t,相应的MPD结构eD(vi,vj,t)可由式(2)计算得出eD(vi,vj,t)=max{eD(vi,vj,assignj(π),t)式(2)中的π表示从vi到vj路径关联约束指派b1…bl…bkj对应的十进制.易知,b1…bl…bkj的取值范围从0…0到1…1,对应的十进制从0到2kj-1.式(2)说明,一旦求得所有的APD结构eD(vi,vj,assignj(π),t),即可获得MPD结构eD(vi,vj,t).显然,当kj为常数时,在TCDRT模型中计算MPD结构eD(vi,vj,t)是伪多项式时间的.对于给定的约束指派assignj(π)=b1…bl…bkj,APD结构eD(vi,vj,assignj(π),t)的计算方法主要基于对路径集合进行划分的思想.考虑所有从vi到vj,且关联指派assignj(π)的路径,这些路径构成的集合定义为.另外定义关联的节点集定义为V()={vil|(vil,vj,γl)∈C(vj)∧bl∈assignj(π)∧bl=1}.显然,中每条路径均会对V()中的所有节点进行遍历.定义的子集l={π|π∈且V()中节点在π中最早完成最后一次遍历的是vil}.易知,kjl=1l=,且对于任意l≠l,有l∩l=成立.可∪知,路径集合存在一个划分{l|vil∈V()}.根据定义5,eD(vi,vj,assignj(π),t)对应中长度小于t,且具有最大需求的路径.显然,eD(vi,vj,assignj(π),t)也可通过对划分集合进行如下操作获得.首先,分别在每个子集l中找出长度小于等于t的路径,计算这些路径的最大需求值eD(l,t),具体的递推方程如下:eD(i,t)=max{eD(vi,vil,t)+eD[vil,vj](vf,Page9且t-tγl+d(vj)}如图5所示,对于l中任意一条路径π,式(3)以最后一次遍历节点vil为分界,将π分解成三部分:(1)从vi到vil且满足时间约束的路径π1;(2)衔接弧(vil,vf)∈A,其中,A表示图D的弧集;(3)从vf到vj且满足时间约束的路径π2,并且π2中再未遍历节点vil,且仅在结尾遍历vj,为了保证这一点,定义π2为图D[vil,vj]上的路径,其中D[vil,vj]为图D在删去vil的入弧和vj的出弧后得到的子图.以图1中的任务为例,D(τ)的一个子图D[v4,v2]在例5中给出.图5路径π分解为3段子路径:π1,(vil,vf)和π2例5.考虑图1中的任务图D(τ),令图D=D(τ).则D的子图D[v4,v2]如图6所示.在图D[v4,v2]中,图1中v4的入弧和v2的出弧均被删掉.易知,图D[v4,v2]上的任何路径中除起点和终点外,不可能再出现节点v4和v2.由定义4可知,将子路π1从路径π中去除后,对整条路径关联的约束指派没有影响.但是,若再去掉衔接弧(vil,vf),由于去掉了所有vil节点,剩余路径关联的约束指派中相应二进制位bl将由1置为0.即路径π2的约束指派为assignj(π)-2l-1.另外,由于路径π的长度要求小于等于t,以上三段子路径的长度之和也应小于等于t.若路径π1的长度定义为t,衔接弧的周期为p(vil,vf),则π1的长度需小于等于t-t-p(vil,vf),如图5所示.最后,由子路径定义可知,尽管C(τ)中的时间约束在π1和π2中分别得到满足.但是,路径π关联的时间约束(vil,vj,γl)跨越了两段子路径π1和π2,需要在式(3)中额外加入限定条件t-tγl+d(vj)以体现约束(vil,vj,γl)对路径的作用.综上可知,以(vil,vf)为衔接弧的路径其最大需求等于以下两部分之和:(1)π1的最大需求eD(vi,vil,t);(2)π2的最大需求eD[vil,vj](vf,vj,t-t-p(vil,vf)).如式(3)所示,考虑图D中vil的所有出弧作为衔接弧以及所有时间段长度tt-γl-d(vj),即可求得l中路径的最大需求eD(l,t).进一步地,按照以上方法计算每个集合l中路径的最大需求,即可获得APD结构eD(vi,vj,assignj(π),t),如式(4)所示.eD(vi,vj,assignj(π),t)=max{eD(l,t)|vl∈V()}(4)综上,可给出计算TCDRT模型中需求上界函数dbfτ(t)的动态规划算法:首先,对于所有节点对vi和vj∈Vτ,以及每个时间段长度kt,联合应用递推方程(1)~(4)计算相应的MPD结构eD(τ)(vi,vj,k);然后,再在其中选取最大值作为dbfτ(t),如式(5)所示.dbfτ(t)=max{eD(τ)(vi,vj,k)|vi,vj∈Vτ∧kt}(5)定理4.K-TCDRT模型中的DBF计算问题是伪多项式时间的,且计算复杂性与时间约束宽度无关.证明.在计算dbfτ(t)的过程中,可将需要计算的子结构分为两类:(1)与计算dbfτ(t)直接相关的MPD结构eD(τ)(vi,vj,k),如式(5)所示.注意到,这部分MPD结构均定义在任务图D(τ)上,个数限定在O(n2t)内;(2)与计算dbfτ(t)间接相关的MPD和APD子结构.在计算每个定义图D(τ)上的MPD结构时,需要额外计算一系列新的定义在图D上的MPD结构eD(vi,vj,k)和APD结构eD(vi,vj,assignj(π),k),其中,D为D(τ)的诱导子图,D在反复使用递推方程(3)的过程中获得.注意到,APD结构eD(vi,vj,assignj(π),k)仅在vj是C(τ)中某时间约束的右节点时才需计算.由定义4和5可知,对于给定的vj,APD结构中可能的约束指派assignj(π)个数至多为O(2kj).另外,APD结构中可能的子图D个数仅与约束子集C(vj)的势kj相关.由子图D[vil,vj]的定义可知,对于给定的vj,在计算过程中可能生成的子图个数至多为O(2kj).因此,在动态规划算法中,需要计算的APD结构eD(vi,vj,assignj(π),k)个数至多为O∑nMPD结构eD(vi,vj,k)仅在vj是C(τ)中某时间约束的左节点时才需计算.因此,需要计算的MPD结构eD(vi,vj,k)个数至多为O∑n每个节点vj作为右节点关联的约束个数为常数kj时,TCDRT模型中DBF计算问题具有伪多项式时间算法,且计算复杂度与约束宽度无关,仅是时间段长度t的线性函数.Page10注意到,之前的间接方法使得DBF计算问题的复杂度与约束宽度指数相关,且是t的二次函数[7].本节方法使问题的复杂度降低到t的一次方,且直接去除了一类问题参数———约束宽度对问题复杂度的影响.与之前研究相比,本文方法在理论上降低了TCDRT模型的分析难度.另外,注意到本节方法的计算复杂度仅与节点关联的约束个数kj指数相关.易知,在平均情况下,kj是一个远小于K的小常数.更进一步地,若图中每个节点关联的约束个数kj1,则本节方法的计算复杂度直接简化为与C(τ)中的约束个数K不再相关,如定理5所述.定理5.若C(τ)中任意两约束的右节点均不相同,则TCDRT模型中的DBF计算问题的计算复杂性为O(7n2t).证明.由定理4的证明过程可知,定义在图D(τ)上MPD结构eD(τ)(vi,vj,k)的个数为O(n2t),定义在子图D上MPD结构eD(vi,vj,k)和APD结构eD(vi,vj,assignj(π),k)的个数分别为O∑n4kl()nt.由于C(τ)中任意两约束的右节点和O∑n均不相同,可知对于任意的vj∈Vτ,有kj1成立.将kj1代入后可知,若要得到dbfτ(t),共需计算的子结构个数至多为O(7n2t).定理得证.证毕.4可调度性分析上界犜的限定策略本节给出可调度性分析上界T的限定方法.首先介绍要用到的相关概念.定义6.利用率(Utilization).给定TCDRT任务集,对于每个任务τ∈,在图D(τ)中存在一条回路π=[(r1,v[1]),(r2,v[2]),…,(rl,v[l])](v[1]=v[l]),定义利用率如下:l=1(1)回路π的利用率:U(π)=∑l(2)任务τ的利用率:U(τ)=max{U(π)|π是图D(τ)上满足C(τ)中时间约束的回路};(3)任务系统的利用率:U()=∑τ∈T称利用率等于U(τ)的回路为密集回路.以上定义与DRT模型中的利用率[12]定义类似.基于密集回路的利用率定义,能够成功用于限定DRT的可调度性分析上界T.根据文献[12]提供的方法,可以通过搜索简单回路寻找密集回路,进而在伪多项式时间内得到任务τ的利用率U(τ).但是,在TCDRT模型中,密集回路却不再局限于简单回路[7].这给计算任务利用率U(τ)带来挑战.本节从新的角度,给出TCDRT模型中密集回路的伪多项式时间求解方法.本节方法基于对时间约束在路径中位置的观察.如图7所示,对于作用于路径π的任意两个时间约束(vi,vj,γ1)和(vi,vj,γ2),两约束之间的位置关系可分为以下两类:(1)约束独立.如图7(a)所示,时间约束(vi,vj,γ1)和(vi,vj,γ2)在π中起作用的路径段分别为πij和πij.由于这两段子路径没有重合部分,故称两约束彼此独立,记为(vi,vj,γ1)∩(vi,vj,γ2)=.(2)约束覆盖.如图7(b)所示,有时间约束作用的两段路径πij和πij有重合,则称时间约束部分覆盖,记为(vi,vj,γ1)∩(vi,vj,γ2)≠.特殊地,如图7(c)所示,路径πij是πij的子路径,则称约束(vi,vj,γ1)被(vi,vj,γ2)完全覆盖,记为(vi,vj,γ1)(vi,vj,γ2).定理6.在密集回路中,一个时间约束以不被其他约束完全覆盖的形式至多出现一次.证明.假设在密集回路π中,时间约束(vi,vj,γ1)以不被其他约束完全覆盖的形式出现了两次,如图8所示.易知,π中存在两个子回路π1=(vi,…,vj,…,vi)和π2=(vj,…,vi,…,vj).若删去其中任何一条子回路,则π中将会只包含一个不被其他约束完全覆盖的约束(vi,vj,γ1).不失一般性,选择将π1从回路π中删去,得到π-π1.显然,π-π1仍然是一个回路.由于π1中的约束(vi,vj,γ1)不被其他任何约束完全覆盖,可知一定不存在一个约束的作用域完全包括π1.因此,回路π在删去π1后,并不影响时间约束的满足性.易知,π1和π-π1均是满足时间约束的独立子回路.由定义6可知,回路π的Page11利用率U(π)=(e(π1)+e(π-π1))/(d(π1)+d(π-π1)),而回路π1和π-π1的利用率分别为U(π1)=e(π1)/d(π1)和U(π-π1)=e(π-π1)/d(π-π1).易知,U(π1)和U(π-π1)中至少有一个大于等于U(π).所以,可以通过删去独立回路π1和π-π1来获得比回路π更密集的回路,这与假设相矛盾.定理得证.由定理6可得密集回路的长度上界,如定理7定理7.图D(τ)中密集回路的长度不超过所述.dmax=(2K+1)∑K证明.首先,对于密集回路π中每个不被其他约束完全覆盖的时间约束(froml,tol,γl),受该约束作用的子路径长度至多为P+γl,其中,P为图D(τ)上满足时间约束的最长简单路径加上最长简单回路的长度.否则,约束(froml,tol,γl)作用的路径段内一定会出现冗余回路π,删去π'后不影响约束(froml,tol,γl)的满足性.可知,子回路π和π-π中至少有一个回路的利用率大于等于π本身,这与π是密集回路相矛盾.根据引理6,C(τ)中的每个时间约束在π中以不被其他约束完全覆盖的形式至多出现一次.因此,π中受时间约束作用的路径段的总长度一定小于等于KP+∑K2∑(vi,vj)∈Aτ长度上界为(2K+1)∑K外,易知π中不受任何约束作用的子路径也至多有K段,其中每段子路径的长度存在一个上界为∑(vi,vj)∈Aτp(vi,vj).综上可知,图D(τ)中密集回路的长度上界为(2K+1)∑K定理7蕴含了一个计算任务利用率U(τ)的方法:为图D(τ)中所有长度小于等于dmax的回路计算需求和长度,得到回路利用率,并在其中选取最大者作为任务利用率U(τ),如式(6)所示:U(τ)=max{eD(τ)(vi,vi,k)/k|vi∈Vτ∧kdmin}(6)由式(6)可知,求解U(τ)的核心是计算MPD子结构eD(τ)(vi,vi,k).可以应用2.2节提出的方法在伪多项式时间内给出每个eD(τ)(vi,vi,k)的值.又因为dmax是伪多项式规模的,所以可在伪多项式时间内计算出任务利用率U(τ).在计算出每个任务τ的利用率U(τ)后,整个任务集的利用率U()可根据定义6由所有U(τ)线性加和获得.显然,U()>1能够充分说明不可调度.但是U()1,却不能推出可调度.根据定理1,当U()1时,需要确定一个可调度分析上界T,只要对于所有tT,有dbf(t)t成立,即可保证可调度.反言之,若存在tfT,使得dbf(tf)>tf,则说明不可调度.对上界T的直观解释如图9所示.由图中可以看出,上界T即为tf的上界,可由DBF的线性上界曲线与对角线求交获得.因此,首先在定理8中给出DBF的线性上界.定理8.对于任意TCDRT任务τ和时间段长度t,有dbfτ(t)t·U(τ)+∑vi∈Vτ证明.任务图D(τ)中任意一条路径π均可看做是一条简单路和若干回路的组合.易知,D(τ)中任何简单路的需求均小于等于∑vi∈Vτ中任意回路的利用率均小于U(τ).所以,若d(π)t,则π中所有回路的总需求必小于等于t·U(τ).综上可知,对于任意d(π)t的路径π,有e(π)t·U(τ)+∑vi∈Vτ由定理8可推导出tf的上界T,如定理9所述.定理9.对于任意U()<1的TCDRT任务集,可调度分析上界T=∑τ∈∑vi∈Vτ证明.若不可调度,则存在tfT,使得dbf(tf)>tf.由定理8得:dbfτ(tf)tf·U(τ)+∑vi∈Vτe(vi).注意到,在tf处的需求上界函数dbf(tf)=Page12∑τ∈Tdbfτ(tf).故有tf∑τ∈T∑vi∈Vτ成立.根据定理9,只需检查小于等于T的时间段长度t,即可判定任务集的可调度性.注意到U(T)严格小于1,故T是伪多项式界的.据此,可得本文的主要结论如下.定理10.对于任意U(T)<1的TCDRT任务集T,若T中任务图上每个节点关联的约束个数均为常数,则可调度分析算法是伪多项式时间的,且计算复杂度是约束宽度的线性函数.证明.根据定理4可知,在任务图中每个节点关联的约束个数为常数时,任务集T上DBF计算问题是伪多项式时间的.又因为,在可调度性分析算法中,计算DBF的次数被限定在T内.根据定理9,可调度性分析上界T是伪多项式规模,为约束宽度的线性函数.综上可知,可调度性分析算法是伪多项式时间的.另外,定理9结合定理5容易得出如下推论.定理11.对于任意U(T)<1的TCDRT任务集T,若时间约束集合C(τ)中任意两约束的右节点均不相同,则可调度分析算法是伪多项式时间的,且计算复杂度是约束宽度的线性函数.证明.根据定理5可知,C(τ)中任意两约束的右节点均不相同时,任务集T上DBF计算问题是伪多项式时间的.又因为,在可调度性分析算法中,计算DBF的次数被限定在T内.根据定理9,可调度性分析上界T是伪多项式规模,为约束宽度的线性函数.综上可知,可调度性分析算法是伪多项式时间的.证毕.定理10和定理11各给出了一类易解的TCDRT模型.注意到,之前研究给出的结论是:任务图中时间约束总数为常数的TCDRT模型是易解的[7].而定理10中将这个限制条件进行了松弛,仅需任务图中每个节点关联的约束个数为常数即可保证TCDRT的易解性.另外,定理11中的限定条件则直接与约束个数无关,而是只与时间约束设定的位置有关.5总结本文研究了带时间约束的实时任务图(TCDRT)模型,为TCDRT模型提出了新的可调度性分析算法.与之前的研究相比,本文方法去除了一类问题参数———约束宽度对算法性能的影响,将算法复杂度由约束宽度的指数函数降低为线性函数.另外,之前的研究指出,任务图中约束个数为常数的TCDRT是易解模型.在本文中,该结论被扩展到更一般的TCDRT模型:仅需任务图中每个节点关联的约束个数为常数,即可保证TCDRT模型满足易解性.更进一步地,本文还提出了一类新的TCDRT易解模型.在新模型中,时间约束个数不再受到局限,易解性只受到约束在图中位置的影响.该类模型可视为继文献[7]发现K-TCDRT之后,发现的第二类TCDRT易解模型.
