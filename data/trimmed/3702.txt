Page1基于类型预测的甚块预测器苟鹏飞喻明艳杨兵李清波王诗博(哈尔滨工业大学微电子中心哈尔滨150001)摘要高性能的甚块预测器是保证EDGE体系结构性能的关键手段.为研究性能更好的甚块预测器,文中通过仿真实验发现甚块的出口类型独立于甚块的出口个数和甚块的动态执行结果而存在.以此为据,提出了基于类型预测的甚块预测器.该预测器摈弃了甚块出口号,直接对甚块出口类型进行预测.随后,根据对甚块出口类型可预测性的分析,通过实验证明甚块出口类型与历史和路径信息相关.仿真结果显示,与经典的基于出口预测的甚块预测器相比,文中提出的基于类型预测的甚块预测器能够将每千条指令误预测次数平均降低约10%.关键词甚块预测器;分支预测器;EDGE体系结构;出口类型预测;可预测性1引言近年来,诸多文献都已表明,多核/众核技术实际上是微处理器设计者在面临处理器发展瓶颈后的一种无奈之举[1-2],其是否代表未来的方向还有待时Page2性能的下一代体系结构.EDGE体系结构通过块执行(Block-atomicExecution)和指令间显式通信(DirectInstructionCommunication)的方式,为下一代体系结构提供了不同于传统RISC/CISC体系结构的思考角度.EDGE体系结构的基本概念[8]、微结构细节[9]、实现方式[10]和整体性能评估[11]并不是本文的研究范围,因此不作详细介绍.EDGE体系结构以甚块(Hyperblock)而不是单个指令为基本执行单元[6],所有改变机器状态(寄存器和存储器)的行为都以甚块为单位发生.甚块[12]是一种单入口、多出口(SingleEntry,MultipleExits)并且包含多个基本块的指令集合.甚块使用谓词化(Predication)技术,将甚块内基本块之间的控制流转化为数据流,从而保证甚块中能够容纳尽可能多的指令.甚块执行完毕时,通过出口(Exit)处的跳转指令,跳转到下一个甚块.而甚块内部的指令则按照纯粹的数据流相关性执行.为提高性能,EDGE体系结构通过甚块控制流推测技术,为执行引擎同时提供多个推测的(Speculative)甚块,实现指令窗口的充分填充,从而最大限度地保证对指令级并行的发掘.甚块控制流推测技术则是通过甚块预测器对下一甚块地址的预测来完成的.在之前的研究成果中,EDGE处理器使用基于出口预测的甚块预测器[13].该方法在预测时,首先使用出口预测器预测当前甚块的出口号(ExitID),随后在该出口号基础上完成目标(Target)预测.这种基于出口预测的方法同样被Multiscalar[14]等处理器使用,是目前学术界对指令块进行预测时的通行方法.该方法中的出口预测与传统分支预测技术中的跳转方向预测相类似,因此,当前的研究人员将绝大部分精力投入到了设计出口预测器中.然而,由于甚块具备单入口、多出口特性,使得出口预测器需要解决“多选一”问题,而不是传统分支预测器所面临的“二选一”问题,因此,诸多应用于传统预测器的二值预测技术需要经过不同程度的修改,才能够满足甚块出口预测的需要[13,15-16].从实验结果来看,尽管使用了诸多激进的预测技术,出口预测器仍然导致了甚块预测器中约50%的误预测[13,16],是甚块预测器的性能瓶颈.为设计性能更佳的甚块预测器,本文在对甚块行为及其出口类型进行统计分析后,提出了一种不使用出口预测器,直接对甚块出口类型进行预测的方案,称之为基于类型预测的甚块预测器(Type-onlyHyperblockPredictor).由于不使用出口预测器,简化了甚块预测步骤,从而能够提供更好的甚块预测性能.总体来说,本文有如下3点贡献:(1)针对EDGE体系结构中的甚块预测问题,根据实验分析和统计结果,提出了一种不使用出口预测器,直接对甚块出口类型进行预测的方案.(2)对甚块出口类型的可预测性进行了研究,发现甚块出口类型与历史和路径信息相关.(3)构建基于类型预测的甚块预测器,并分析了其性能.实验结果表明,在针对甚块出口类型的特点使用TAGE预测技术后,本文提出的基于类型预测的甚块预测器相对于基于出口预测的甚块预测器,将每千条指令误预测数(MispredictsPerKiloInstructions,MPKI)平均降低了约10%.本文第2节将对应用于EDGE体系结构的甚块预测器基本概念及研究现状进行简单介绍;第3节将描述甚块出口和出口类型的关系,分析甚块出口类型的统计特性,并对甚块类型预测的合理性进行阐述;第4节将给出基于类型预测的甚块预测器结构;第5节将介绍本文所使用的仿真方法和基本实验环境;在第6节中,将对甚块类型的可预测性进行分析,并比较基于类型预测的甚块预测器与基于出口预测的甚块预测器的性能.2背景知识和相关工作分支预测器(BranchPredictor)是一种为高性能处理器提供推测执行能力的部件.分支预测器通过预测分支指令的跳转方向,并配合相应的分支目标预测技术,在分支指令执行前获取其跳转结果,为处理器提供了无停顿的推测指令流,增大了处理器的取指能力、指令窗口填充能力,并相应地保证了性能.与传统的、工作于指令粒度上的分支预测器一样,指令块预测器(Next-blockPredictor)是一种为基于块的处理器(Block-atomicProcessors)提供控制流推测能力的部件.虽然指令块预测器有不同的研究背景[13-14,17-20],但其基本思想是一致的,即为每个指令块提供跳转目标预测,使得基于块的处理器可以同时取入多个推测的指令块.通常来说,在基于块的处理器中,指令块由编译器根据特定的约束将多个基本块组合而成[6,21].类似的,EDGE体系结构为了尽可能地增大指令块大小,使用了甚块技术.甚块是编译器生成的具有谓词化指令(Predication)的“单入口、多出口”指令块.甚块将多个传统指令集中Page3的基本块(BasicBlock)集合到一起,因此其内部通常具有多条执行路径,不同的执行路径对应不同的出口.执行开始时,控制流从甚块唯一的入口进入,触发甚块的执行.执行结束时,甚块从其多个出口中,选择且仅选择一个出口作为控制流的转移点,开始下一甚块的执行.为了区分甚块中不同的出口,编译器为甚块的每个出口都分配唯一的出口号(ExitID).出口号在本质上是编译器对甚块内部不同执行路径的近似[22],用以表征构建甚块时被条件转换(If-Conversion)技术湮没的相关性.因此,从这个角度来看,用出口号能够从理论上还原某条执行路径的历史,从而使得对该路径的跳转结果进行预测变得可能.由于在对甚块进行预测时,最终的执行路径还未知,因此需要首先对出口号进行预测.甚块“多出口”的特性则对出口号预测提出了与传统分支预测器不一样的要求:(1)由于具有多个出口,因此传统分支预测器的“2选1”预测技术需要被修改为“多选1”预测技术.(2)由于具有多种出口类型,因此甚块预测器需要对出口类型进行预测.目前应用于EDGE体系结构中的甚块预测器使用了如图1所示的结构,该结构在TRIPS原型芯片中得到了应用[11].图1中,预测过程由两个步骤构成:出口预测和目标地址预测.首先,使用出口预测器预测甚块在执行完成后跳转出口的出口号.随后,该出口号与指令块地址一起,被用于预测该出口的类型.紧接着,根据出口的类型访问相应的分支目标缓存,产生最终的跳转地址.图1中的出口预测器使用了能效比较高的全局/本地锦标赛预测器,而文献[16]中则评估了多种二值预测技术的出口预测潜力,给出了多种不同的预测器结构.对于目标地址预测部分,除基于粘滞位表(Hysteresis)的出口类型预测图1TRIPS原型芯片中使用的指令块预测器结构[13]器外,还有3种针对不同出口类型的跳转目标缓存,分别为:分支目标缓存(BTB)、函数调用目标缓存(CTB)和函数返回地址缓存(RAS).此外,如果跳转地址是当前甚块的下一个甚块(InProgramOrder),则是顺序跳转目标,可以直接产生跳转地址.这种先预测出口,再针对特定出口预测跳转目标的策略,是甚块预测中应用最广泛,也是最直观的结构之一[13-14,20].也正因为如此,当前针对甚块预测器的研究几乎都将目光聚焦到了出口预测上,而仅仅为出口类型预测提供非常有限的资源和极为简单的结构.本文将尝试打破这种格局,将目光转移到甚块出口类型预测上,并证明这种方法相对于基于出口预测的方法更加有效.3甚块出口类型预测技术出口预测是当前甚块预测器的重要组成部分.甚块预测器将出口预测得到的出口号与指令块地址相结合,预测该出口的类型,并进一步选择相应的分支类型缓存,输出甚块的跳转地址.由于出口号本质上是编译器对甚块内部执行路径的近似,因此对出口号的使用实际上是利用甚块内部的执行历史来预测跳转类型和跳转目标.但是,由于出口号本身需要经过预测得到,因此一旦这种“推测(Speculative)”的出口号(或者说推测的甚块内部执行历史)出现误预测,对最终跳转目标的影响将呈现错误叠加的效果.从已发表的文献可以看出,约50%左右的甚块误预测均由出口误预测导致[13,15-16],体现了出口预测器的低效性.本节对出口预测的缺点进行了分析,并在此基础上,提出了一种摈弃出口预测器,直接进行类型预测的甚块预测方案.3.1出口预测器所面临的问题在甚块预测器中,甚块跳转目标最终由针对不同类型的分支目标缓冲产生.与传统的二值分支预测不同,出口预测器预测得到的出口号并不能直接给出该甚块跳转目标的信息.其原因在于,传统的二值分支预测(主要是针对条件分支指令的预测)如果预测结果为“不跳转(Not-Taken)”,则跳转目标即是该分支指令的下一条指令,无需访问分支目标缓存.因此,传统的二值分支预测器在解决“2选1”问题后得到的答案中,有可能直接包含分支跳转目标信息.而对于甚块预测器的出口预测而言,解决“多选1”问题后,仅仅得到了“推测”的出口号信息,除非进一步通过出口号预测该出口的类型,否则无法Page4从出口号本身获得甚块的跳转目标.正因如此,出口预测的作用体现在如下两点中:(1)使用预测得到的出口号区分同一甚块中不同出口的分支类型;(2)使用预测得到的出口号区分同一甚块中不同出口的跳转目标.结合图1中甚块预测器的典型结构,出口预测器的功能体现在下述的甚块预测器工作步骤中:首先,出口预测器使用甚块地址、历史信息、地其次,将预测得到的出口号与甚块地址相结合,址路径信息等,预测某一甚块的出口号.访问出口类型预测器,得到该出口的类型.最后,根据出口的类型,选择相应的分支目标缓冲,并使用出口号和甚块地址对其进行索引,得到最终的跳转地址.从上述步骤中可以看到,出口预测虽然无法直接产生最终的甚块跳转地址,但却影响着出口类型预测和目标预测的结果.一旦出口预测器性能低下,将极大地损害甚块预测器的整体性能.不幸的是,由于出口预测器需要完成“多选1”的使命,其性能相对于传统分支预测器的下降,是显而易见的.其原因在于传统的二值分支预测技术需要经过一定程度的修改才能被应用于出口预测器.这些修改包括:将每次预测产生的历史信息从1位变为多位[13-14,17]、改变预测结果的编码方式(增加计数器位数[13-14,17]、使用PPE预测方法[16])、修改预测器的决策方案(例如将OGEHL预测器的加法树更改为多数投票[16])等.最为重要的是,由于出口预测器的相关信息(执行历史、地址路径等)需要在甚块粒度上获取,相对于基于基本块的分支预测器,其历史信息有可能会丢失.这些因素使得出口预测器的性能变得并不尽如人意,从而使得甚块预测器的整体性能受到影响.值得注意的是,虽然“多选1”的出口预测器存在上述弊端,但之前的研究人员几乎都倾向于在甚块预测器中保留出口预测器,并尝试使用各种激进的预测技术来改善其性能.这些尝试建立在这样的事实基础之上:甚块中的每个出口分别属于其内部不同的执行路径,由不同的基本块构成,出口号表征了这种湮没在甚块中的路径历史信息.对甚块出口的预测与传统分支预测器对基本块控制流的预测,在本质上是一致的,因此通过改善出口预测的性能来提高预测器整体性能,是十分合理的.结合甚块预测器本身的工作流程可以发现,即使有上述事实的存在,出口预测器仍然需要额外的条件才能高效地工作:甚块中每个出口都拥有不同的出口类型和不同的跳转目标,通过出口号(或者说甚块内部的执行路径)对其进行区分是必要的.当前的研究人员通常都默认该条件成立,但事实上,由于编译器、指令集、体系结构等诸多因素的影响,情况并非如此.本文将说明在EDGE体系结构中甚块的出口类型与出口号并无直接联系,并且能够在不需要出口预测器的情况下直接对出口类型进行预测.3.2甚块出口类型特征本节将对甚块的出口类型进行分析,以所使用的TRIPS指令集为基础对甚块进行分类,其细节以及相应的仿真方法和测试程序集在第5节中有详细描述.由于使用了TRIPS指令集,因此每个甚块最多拥有4种出口类型,分别为:顺序目标(SequentialTarget)、普通分支目标(BranchTarget)、函数调用目标(FunctionCallTarget)和函数返回目标(Func-tionReturnTarget)[10].某个甚块可能具有多个出口,且每个出口的类型可能不同.但由于在执行时,对该甚块的每一次调用(动态实例)都只能使用一个出口,并产生一种特定的出口类型,因此,为分析EDGE体系结构中甚块的出口类型特征,本文首先将甚块按照其动态实例所使用的出口类型分为6大类.分别为类型1~4.甚块的所有动态实例(DynamicIn-stances,即执行时的多次调用)都只产生同一种类型的出口.根据TRIPS指令集[10],这将定义4类甚块,分别为只产生顺序目标的甚块、只产生普通分支目标的甚块、只产生函数调用目标的甚块、只产生函数返回目标的甚块.类型5.甚块的动态实例既可能产生顺序目标,也可能产生普通分支目标.类型6.其它的情况.图2展示了11个SPECCPU2000程序中,对于动态实例个数排名前100的甚块,按照上述分类方法分类后不同类型甚块所占的比例.从图2中,可以得到(1)平均约有近80%的甚块在执行过程中只产生某种特定的出口类型.也就是说,无论这些甚块从哪个出口跳转,其出口类型都将始终保持一致.(2)平均约有近20%的甚块在执行过程中,即可能产生顺序目标,亦可能产生普通分支目标.这些甚块的行为与普通的条件分支指令非常类似.即如果这些甚块产生顺序目标,那么其跳转地址将可以直接得到,无须访问任何分支目标缓存,这与普通条件分支指令的“不跳转”情况类似;如果这些甚块产Page5生普通分支目标,那么最终的跳转目标地址将通过访问BTB得到,这同样与普通条件分支指令的“跳转”情况类似.(3)其它类型的甚块数目微乎其微,小于1%.图2甚块的出口类型特征统计(其中,FULL_SEQ、FULL_BR、FULL_CALL、FULL_RET分别表示动态实例只产生某种特定类型出口的甚块;BR_SEQ表示动态实例中既产生顺序目标又产生普通分支目标的甚块;REST为其它所有情况)从上述现象能够得出这样的结论:尽管文献[16]中的数据说明甚块的出口号分布较为均匀①,但其出口类型具有较强的特征,且该特征自成体系.进一步观察可以看到,其中大部分甚块(约80%)的偏向性极强.由于这种极强的偏向性,这些甚块的出口类型在不需要出口预测器的情况下,通过简单的、不使用相关信息的粘滞位表就能够很好地预测.本文设计了实验来初步验证上述结论.实验中将TRIPS原型芯片甚块预测器中的出口预测器删除,直接使用简单粘滞位表(仅使用甚块地址来索引该表,不使用历史信息)来预测甚块出口类型,与原有的TRIPS原型芯片预测器进行性能比较.原有的TRIPS原型芯片预测器配置与文献[13]中相同.两种方案均为出口预测器和类型预测器分配32KB的资源,并使用每千条指令误预测数(MispredictionsPerKiloInstructions,MPKI)作为量化标准,这也是评估预测器性能的常用指标[13,23].比较结果如图3所示,图中给出了对11个SPECCPU2000整图3使用简单粘滞位表对甚块进行预测的结果(其中T为TRIPS原型芯片甚块预测器;TOH为无出口预测器且仅使用简单粘滞位表进行出口类型预测的甚块预测器)型程序的MPKI剖析,将MPKI归结为不同的来源,分别为:出口预测器(EXIT)、出口类型预测器(TYPE)、普通分支缓存(BTB)、函数调用目标缓存(CTB)和函数返回缓存(RAS).从图3中可以看到,相对于原有的TRIPS原型芯片预测器而言,删除了出口预测器且只用了简单粘滞位表进行甚块出口类型预测的方案,其MPKI平均仅仅上升了8%左右.更为重要的是,原有的TRIPS原型芯片预测器中由出口预测器和类型预测器导致的MPKI,在无出口预测器的方案中,转换为了几乎等量的由类型预测器导致的MPKI,且有约10%的下降.该现象说明,甚块的出口类型在无出口预测器的情况下就能够进行预测,并且凭借简单的仅用甚块地址进行索引的粘滞位表就能够获得较好的预测效果.这与前述EDGE体系结构中约80%甚块的出口类型具有极强的偏向性是相符的.另外约20%的甚块由于其行为与条件分支指令行为类似,因此,可以大胆假设这些甚块的出口类型与甚块“间”历史或地址路径信息(而不是出口号)相关,使用更为复杂的相关性预测技术能够对出口类型进行较好的预测.本文将在第6节中通过实验结果来证明这个假设.总而言之,本节的实验数据说明,甚块的出口类型呈现出独立于出口号的特征,这样的特征使其可在不使用出口号时,直接被出口类型预测器所预测.因此,前述甚块中每个出口都拥有不同的出口类型,通过出口号对其进行区分是必要的这个假设,实际上在EDGE体系结构中并不成立.进而可以认为,至少对于甚块的类型预测来说,出口预测器并不是必要的.值得注意的是,图3中,虽然删除出口预测器后甚块出口和出口类型的预测性能提高了,但总体MPKI还是有约8%的上升,这是由BTB所导致的.由于在无出口预测器的方案中,仅使用了甚块地址来索引BTB,因此BTB无法区分同一个甚块产生的不同跳转目标.这种现象说明,甚块中不同的出口确实会产生不同的跳转目标;甚至同一出口,同样的出口类型,也会由于间接跳转指令的存在[10,16],产生不同的跳转目标.虽然这个现象部分说明前述甚块中每个出口都拥有不同的跳转目标,通过出口号对其进行区分是必要的这个假设成立,但该问题实际可以通过使用相关性分支目标缓冲技术来解决①实验数据也说明出口号的分布较为均匀.Page6(CorrelativeBTB)[14,24-25],即将甚块地址和全局历史或地址路径信息结合到一起来索引BTB.由于这并不是本文的研究目标,因此并不对这个问题作详细阐述.尽管如此,本文随后的实验将证明即使不使用相关性分支目标缓冲,本文所提出的方案依然具有较好的性能.3.3如何看待甚块类型预测的合理性为更形象和深入地理解无出口预测的甚块类型预测,需要进一步分析甚块的跳转行为.实际上,可以将甚块的跳转行为看作具有间接跳转目标的条件分支指令,如图4所示.从图中可以看到,无论甚块拥有多少出口,从哪个出口跳转,最终呈现的结果无外乎两种情况:(1)跳转到该甚块在程序上的下一甚块;(2)跳转到其它甚块.前一种情况,即是出口类型预测中预测到顺序分支目标的情况;而后一种情况,可以进一步细分为3种不同的分支类型,并通过不同类型的分支目标缓冲(在TRIPS指令集中,分别是BTB、CTB、RAS)来得到跳转目标.因此,从甚块是否为顺序分支目标这个角度来看,可以将其看作具有“跳转”或“不跳转”行为的条件分支指令.而从甚块跳转时需要根据不同的执行上下文来确定跳转目标的角度来看,则可以将其看作间接跳转指令.以这样的角度为基础,直接使用甚块出口类型构成的历史则与条件分支指令的跳转历史相似.该历史表征了甚块的跳转行为,可被出口类型预测器用于更准确地预测甚块出口类型,从而在不需要出口号的情况下完成甚块跳转地址的预测任务.这就能够避免传统甚块预测器中低效的出口预测器对出口类型预测性能的影响,直接将重点聚焦到甚块类型预测上,实现问题的简化,提供更多的性能提升可能.从分支历史相关性角度来看,取消出口预测事实上是在预测过程中忽略了甚块“内”的相关信息,这种相关信息对被预测的甚块而言是“推测”的,不确定的;而直接使用甚块的出口类型构成历史,则是使用甚块“间”的相关信息来指导预测器的工作,这种相关信息是既有的、确定的.本文随后的实验将证明,使用甚块“间”的相关信息能够获得更好的甚块预测性能.本节通过上述分析得到了如下3点结论.首先,传统甚块预测器中的出口预测器是整体性能的瓶颈,并且仅仅产生预测过程的中间结果,不包含直接的甚块跳转目标信息;其次,甚块的出口类型具有独立于甚块出口号的特性,并具备被出口类型预测器直接预测的潜力;再次,甚块的出口类型表示了甚块“间”的相关性,能够在没有出口号的情况下完备地描述甚块的跳转行为.综合这3点因素,可以认为,在没有出口预测器的情况下直接对甚块的出口类型进行预测,是一种可行的、并具有性能提升潜力的方案.鉴于此,本文将在该思路的指导下,提出基于类型预测的甚块预测器结构.4基于类型预测的甚块预测器结构4.1总体结构本节根据上述分析结果,提出一种基于类型预测的甚块预测器结构.由于甚块出口类型也有多种可能(TRIPS指令集定义了4种),因此需要使用与出口预测器类似的多值预测器.具体的做法是,使用“4选1”类型预测器从顺序目标、普通分支目标、函数调用目标和函数返回目标中确定当前的预测结果,并根据预测结果访问相应的分支目标缓存,得到最终的跳转目标.这种类型预测器所使用的历史信息与传统分支预测器中所使用的二值历史信息类似,由每个甚块产生的出口类型组成,表征了甚块“间”的执行历史.与传统甚块预测器所使用的出口号历史信息不同,这种历史信息仅仅保留甚块间的相关性,忽略了甚块内的执行路径信息.由于一共需要预测4种类型,因此每一个甚块会产生2位历史.地址路径则是由执行过程中甚块的地址构成,表征了执行轨迹上已执行的甚块地址.该方案依然使用多值预测结构,可能会由于多值预测本身的缺点造成性能损失,但由于直接使用了甚块“间”相关信息对出口类型进行预测,因此并不会受到出口预测器的干扰.另一方面可以将有限Page7的资源全部投入到出口类型预测器中,提高改善性能的可能性.具体的预测器结构如图5所示.图中使用与出口预测器类似的多值预测器,在历史或地址路径信息的帮助下直接对出口类型进行预测.如果甚块类型预测器预测结果为顺序目标,则直接产生预测的跳转目标,如果是其它3种类型,则根据相应的分支目标缓冲产生预测结果.4.2使用历史信息和甚块地址路径的甚块类型预测器图5中的多值预测器可用类似经典gshare[26]预测器的结构实现,如图6所示.该结构将甚块地址和全局/本地历史信息(或者甚块地址路径信息)相结合来索引相关性表,是一种利用历史和地址路径相关性进行分支预测的经典结构.图6(a)~(c)分别为全局历史、全局路径和本地历史预测器,分别使用相应的历史和地址路径信息与甚块地址按照一定的方法(通常是异或)结合后,对样本历史表(PatternHistoryTable)进行索引①.表中每一项由两部分组图6全局历史预测器、全局路径预测器和本地历史预测器成,第一部分存储出口类型(TYPE),即当前访问该项能够得到的预测结果;另一部分则是使用饱和计数器实现的粘滞位(HYST),用于更新预测结果.值得注意的是,该结构中历史信息由每一个甚块产生的出口类型构成,而地址路径信息则由执行轨迹上的甚块地址构成.与传统分支预测器或出口预测器一样,图中的3种预测器方案可以两两组合为锦标赛预测器.另外,在对甚块出口类型的历史和路径相关性进行研究时,这3种预测器也是最具代表性的结构.4.3使用TAGE结构的甚块类型预测器在传统的二值分支预测器中,TAGE(TAggedGEometrichistory)预测器[23]是硬件可实现的性能最好的预测器之一.文献[13]和文献[16]中就利用TAGE预测技术,实现了基于出口预测的甚块预测器.对出口类型预测器来说,TAGE预测技术同样能够提供新的设计思路.TAGE预测技术使用数个不同的历史样本表,分别由呈几何级数增长的历史长度索引,并通过精巧的更新机制和标签(TAG)匹配机制,使得与不同历史长度相关的分支指令可以被相应长度的历史所预测,从而避免不同历史样本之间的别名冲突.根据TAGE预测技术的特点,针对3.2节中描述的甚块出口类型特性,本文使用TAGE预测技术设计了一种TAGE甚块出口类型预测器,可用于图5中的多值预测,其结构如图7所示.该TAGE甚块类型预测器由简单粘滞位表T0(仅使用甚块地址进行索引,历史长度为0)以及一组历史长度呈几何级数增长的历史样本表T1…Tn组成,该几何级数历史长度由L(j)=α(j-1)L(1)[23]计算得到.与经典TAGE预测技术类似,表T1…Tn中每一项由3部分组成:预测结果(TYPE)、粘滞位(HYST)和标签(TAG),T0表中则没有标签位.更新机制和标签匹配机制与文献[23]中相同.根据TAGE预测技术的特点,结合图2中给出的甚块出口类型特性,TAGE甚块类型预测器可以达到如下效果:(1)甚块中80%偏向性极强、跟历史信息无关的甚块,将由简单粘滞位表T0来预测;(2)剩余20%与历史相关的甚块,将分别由T1…Tn中相应的表来预测.这就使得不同特性甚块之间发生别名冲突的可能性大大减小,从而提高预测性能.随后的章节中,将对本节所提出的甚块类型预测器进行性能评估.①虽然不同预测器结构有所不同,但通常都有类似样本历史Page8图7基于TAGE技术的甚块出口类型预测器5仿真环境和评估方法由于本文的诸多分析都基于实验方法得到,因此,在进行详细的性能评估前,本节将首先描述所采用的仿真环境和性能评估方法.本文所有的实验数据都将在本节所描述的仿真工具、基本配置参数和测试程序集基础上得到.5.1仿真工具本文使用M5_EDGE[27]模拟器作为仿真工具.M5_EDGE是基于M5[28]模拟器,使用C++/Python构建的EDGE体系结构仿真工具,支持TRIPS指令集[10],具有高层次的4级时序模型,能够在微结构层面对EDGE体系结构进行快速的设计空间探索.得益于M5_EDGE良好的面向对象和模块化特性,本文能够方便地对甚块预测器进行建模,并在统一的仿真框架和基准配置参数下进行比较.在仿真时,所使用的基准配置如表1所示,文中所涉及到的预测器都将在本框架下实现.为了消除处理器其它部分对预测器的影响,操作数网络(OperandNetwork)、谓词化指令(PredicatedInstruction)、Cache和访存顺序(MemoryAccessOrder)都被配置为理想状态,即仿真时操作数网络延迟为0、甚块中的谓词化指令在执行前就已经获取了结果、Cache总是命中、访存顺序在执行前就已经获得.取指指令映射策略静态映射,并有1个周期的映射延迟指令分派开销1周期指令窗口大小1K指令(8个TRIPS的Hyperblock)操作数网络延迟完美执行引擎谓词化提交延迟CacheMemory访问顺序完美5.2指令集、编译策略和测试程序本文选择TRIPS指令集的原因在于:其一,TRIPS指令集是开发较为完善的EDGE指令集,工具链较为完善;其二,TRIPS指令集在M5_EDGE中有较好的支持.在编译时,本文使用了TRIPS工具链中tcc的-Omax优化选项[29].对于有出口预测的仿真,编译器将为每个甚块的出口按照正常的策略分配出口号;对于只有类型预测的仿真,编译器将为每个甚块的出口都分配出口号0.本文使用SPECCPU2000中能够被TRIPS工具链正确编译的11个整形测试程序作为测试基准.之所以这样选择是因为整形程序对于控制流推测的要求较高,能够更好地体现甚块预测器特性,而浮点程序对于甚块预测器的性能则不是那么敏感.在仿真时,选择了ref输入集,并使用Simpoint[30]仿真方法,以便将仿真时间缩短到可接受的范围之内.6实验结果分析与性能评估本节将在第5节所示的实验方法基础上,使用不同方案来实现甚块出口类型预测器,并观察、分析和比较其性能.首先,本节将使用无冲突(Interference-free)的全局预测器、地址路径预测器和本地预测器对甚块出口类型的可预测性及其与历史/地址路径信息的相关性进行分析.随后,将比较本文提出的基于类型预测的甚块预测器和传统的基于出口预测的甚块预测器的性能.由于本文主要关注二者性能的差异,因此本节实验所使用的分支目标缓冲大小均固定,分别为BTB拥有4096个入口、CTB拥有128个入口、RAS拥有64个入口,每个入口的具体实现与文献[13]中保持一致.6.1甚块出口类型的可预测性分析使用无冲突(Interference-free)表对分支指令的可预测性进行研究是一种由来已久的方法[31-32].Page9文献[16]中,作者使用类似的方法对EDGE体系结构中甚块出口的可预测性进行了研究.通过使用无冲突表,预测器可以在表中为每一个样本(pattern)分配独立的入口(Entry),从而使得不同的样本之间不存在别名(Aliases)冲突,将历史或地址路径对预测能力的影响最纯粹地反映出来.图8中给出了使用图6中3种预测器时,11个SPECCPU2000整型程序在历史/地址路径信息的长度从0比特变化到63比特时的平均MPKI,其中每种预测器都使用了无冲突表.对于全局历史预测器和地址路径预测器,历史/路径和甚块地址使用了两种方式进行组合.一种为使用gshare中给出的异或(XOR)方式,另一种为拼接(Concatenated)方式,即从甚块地址和历史/路径信息中各取一部分,互不干扰地组合起来形成表的索引.本地预测器中,历史和路径按照异或方式结合.地址路径信息使用执行轨迹上甚块地址的低4位组合而成,而历史信息中每个甚块产生2比特历史,对应着甚块出口类型的2位编码(TRIPS指令集中共4种出口类型).图8对于基于类型预测的甚块预测器,使用无冲突样本表时全局历史、全局路径和本地预测器的MPKI变化情况(其中,Global/CGlobal分别为使用异或策略和拼接策略的全局历史预测器;Path/CPath分别为使用异或策略和拼接策略的地址路径预测器;Local为本地预测器)图8中的结果显示:当历史长度为0时,即仅使用甚块地址对表进行索引时,所有预测器的MPKI相等,约为5.07.由于本实验中的预测器使用无冲突表,因此这也是使用简单粘滞位表进行甚块出口类型预测的极限值.从第3.2节中对甚块出口类型分布特征的分析可知,当历史长度为0时预测器主要对约80%具有极强偏向性的甚块提供准确预测.而与图3中使用简单粘滞位表(32KB)进行甚块出口类型预测的结果(平均MPKI为5.15)相比,该极限值仅仅下降了约1.6%.这说明使用大小为32KB的粘滞位表已经足够对约80%具有极强偏向性的甚块出口类型进行预测.如希望进一步提升预测率,只能寄望于改善另外约20%甚块的预测性能.随着历史长度的增长,有两种不同的趋势.其一,对于使用拼接方式进行索引的预测器,MPKI随着历史长度的增长持续而稳定地下降.这说明两层含义:(1)甚块出口类型与全局历史/地址路径信息相关;(2)该相关性可以被出口类型预测器捕捉.其二,对于使用异或方式进行索引的预测器,MPKI在短暂的下降(历史长度小于约2bit)后,突然上升,直到历史长度继续增加到一定程度(全局历史预测器为大于13bit,地址路径预测器为大于9bit,本地历史预测器为大于5bit),MPKI才重新下降到比不使用历史/路径相关信息(0bit历史长度)时更小的程度.这说明,使用异或索引方式时,在历史/地址路径长度较短的情况下,预测器能够捕获部分甚块的历史/地址路径相关性.当历史/地址路径长度增加时,在某个区间段内,由甚块出口类型自身特点和异或索引方式共同作用导致了较多的样本重复(即虽然历史不同且甚块地址不同,但异或之后的索引却相同),使得MPKI出现了上升趋势.这样的上升趋势在历史/路径长度增大到一定程度时得到了抑制,这说明当历史长度足够时,出口类型预测器依然有能力利用历史/地址路径相关性获得性能提升.当历史长度继续增加时,所有预测器都在历史长度15bit到25bit之间达到性能极限,MPKI的最小值为4.32(使用拼接索引的全局路径预测器,历史长度20),相对于历史长度为0时有约14%的下降.之后,所有预测器的MPKI都出现不同程度的上升,且全局历史预测器相对于地址路径预测器上升更为明显.这说明甚块出口类型在本文的实验条件下,与距离太远的甚块(对于本地预测器,则是相距太久的动态实例)之间的相关性并不明显,且地址路径信息相对于历史信息更能反映较远距离甚块的相关性.另外,使用拼接方式进行索引的预测器在历史长度增加到60之后,MPKI有较为明显的突然增加.这主要是由于最大索引长度固定为64,从而使得甚块地址信息在历史和地址路径信息太长后造成了丢失,导致索引样本的差异化减弱,增加了误预测次数.这也说明,甚块类型不能单纯使用历史或地址路径信息进行预测.总体来看,对全局预测器而言,使用地址路径信息比使用历史信息性能更优.地址路径预测器的MPKI最小为4.32(使用拼接索引的全局路径预测Page10器),而全局历史预测器的MPKI最小为4.39,上升了约1.5%.整体而言,地址路径预测器的MPKI亦小于全局历史预测器.另外,本地预测器性能则介于地址路径预测器和全局历史预测器之间.综上所述,本节通过分析使用无冲突表的全局历史/地址路径预测器和本地历史预测器在不同历史长度下的性能,能够得出如下结论:(1)甚块出口类型与甚块“间”的历史/地址路径信息(全局/本地)相关,在忽略甚块“内”的相关信息(出口号)后,利用这些甚块“间”的相关信息能够获得预测性能的提升.这证明了第3.2节的猜测:对于行为与条件分支指令类似的甚块(约占20%),其出口类型与甚块“间”的历史/地址路径信息相关.(2)在预测甚块出口类型时,使用地址路径信息比使用全局历史信息更有效,且本地历史预测器也能够获得可观的预测准确率.6.2基于类型预测的甚块预测器与基于出口预测的甚块预测器性能比较上节的分析证实了甚块出口类型与甚块“间”的历史/地址路径信息相关,因而可以利用这些信息来提升其预测性能.本节将从性能的角度比较传统的基于出口预测的甚块预测器和本文所提出的基于类型预测的甚块预测器.比较时,对于基于出口预测的甚块预测器,将使用文献[13]中所提出的全局/本地锦标赛出口预测方案,其具体结构如图1所示.这也是基于出口预测的甚块预测器在相对简单的结构下能达到较好性能的方案.对于基于类型预测的甚块预测器,将在图5所示结构的基础上,使用全局/本地锦标赛预测器实现其中的“多选1”类型预测器,直接对4种甚块出口类型进行预测.比较时为出口预测器和类型预测器分配的资源将从1KB变化到512KB,资源的大小根据每个表的入口数和每个入口的比特数来确定,具体的配置信息如表2所示.表2中,G/LEXIT为基于出口预测的全局/本地锦标赛甚块预测器,其中G/L/C分别为其中的全局历史长度、本地历史长度和选择器历史长度,相应的样本表入口数为2G/L/C,H则为该预测器中用于在出口预测后进行类型预测的粘滞位表入口数;HTYPE为基于类型预测的仅使用简单粘滞位表的甚块预测器,其中H表示其粘滞位表的入口数;P/LTYPE为基于类型预测的全局路径/本地锦标赛甚块预测器,其中L/G/C分别为本地历史长度、地址路径长度和选择器历史长度,相应的样本表入口数为2L/G/C.另外,对于预测出口的样本表来说,其1KB107105122KB810102KB118111K4KB911114KB129121K8KB1012128KB1310132K16KB11131316KB1411142K32KB12141432KB1512154K64KB13151564KB1613164K128KB141616128KB1714174K256KB151717256KB1815184K512KB161818512KB1916194K1MB171919每个入口由3比特出口号信息和1比特粘滞位构成;对于预测出口类型的样本表来说,其每个入口由2比特出口类型信息和1比特粘滞位构成;对于选择器样本表来说,每个入口由3比特粘滞位构成.图9中给出了针对11种SPECCPU2000测试程序的平均MPKI.作为对比,基于类型预测的甚块预测器使用了两种方案:(1)地址路径(使用拼接索引方式)/本地预测器(PATH/LOCAL_TYPE)锦标赛方案,这也是在对甚块出口类型的可预测性进行分析后,得出的最优组合;(2)使用简单粘滞位表(即历史长度为0,仅使用甚块地址进行索引)进行甚块出口类型预测的方案(HYST_TYPE),该方案用于展示无相关信息时,甚块出口类型预测能力的变化.另外,对于基于类型预测的地址路径/本地锦标赛甚块预测器,还引入了使用无冲突表(IF_PL_TYPE)时的情况(该方案中历史长度与图9中普通方案相同,但使用无冲突表),以便观察使用锦标赛预测器时甚块出口类型预测的极限.图9基于类型预测的甚块预测器和基于出口预测的甚块预测器性能比较(其中,GLOBAL/LOCAL_EXIT为基于出口预测的全局路径/本地锦标赛甚块预测器;HYST_TYPE为基于类型预测的仅使用简单粘滞位表的甚块预测器;PATH/LOCAL_TYPE为基于类型预测的地址路径/本地锦标赛甚块预测器;PL_IF_TYPE为使用无冲突表的基于类型预测的地址路径/本地锦标赛甚块预测器)Page11图9中的结果说明:首先,当资源从1KB变化到512KB时,对基于类型预测的地址路径/本地锦标赛甚块预测器而言,其MPKI和基于出口预测的全局历史/本地锦标赛甚块预测器几乎相等.除在1KB时,基于类型预测的方案能够将MPKI降低约8%外,其余情况下,两者性能持平.其次,在资源最小(1KB)时,基于类型预测的简单粘滞位表甚块预测器性能最好,相对于基于出口预测的全局历史/本地锦标赛甚块预测器,MPKI降低了约15%,相对于基于类型预测的地址路径/本地锦标赛甚块预测器,MPKI降低了约10%.其原因在于,当资源受限时,由于甚块出口类型本身较强的偏向性(约80%的甚块只产生一种特定的出口类型),无历史信息、仅使用甚块地址对甚块出口类型进行预测的简单粘滞位表依然能够获得可观的预测准确率.而此时,由于资源较少,历史样本表入口数受限,因此如果使用地址路径/本地锦标赛甚块预测器进行出口类型预测,会因为相关信息的加入而导致太多不必要的别名冲突,从而增加了误预测次数.对于基于出口预测的甚块预测器而言,资源受限使得出口误预测次数增多,并因此导致更加低效的出口类型预测和跳转目标预测,使得其总体性能在资源受限时最差.但是,使用简单粘滞位表的方案由于不使用相关信息,因此其虽然在资源很小时能够提供较好的性能,但随着资源的增大很快就陷入饱和(资源大于4KB后),从而无法提供持续的性能增长.最后,基于类型预测的地址路径/本地锦标赛甚块预测器与使用无冲突表的方案相比,其MPKI还有较大差距,该现象在资源小于128KB时极为突出.这一方面说明在资源受限时,地址路径/本地锦标赛方案确实由于别名冲突的增多而导致性能下降;另一方面,该现象也说明,如果能够寻找到更高效的结构,则可能将MPKI进一步降低.6.3使用TAGE预测器提升甚块类型预测器性能正如前述,对于甚块出口类型的预测而言,如果能够找到更优秀的方案,那么其性能还有较大的上升空间.图7中给出的TAGE甚块类型预测器正是这样一种潜在的方案.为分析TAGE甚块出口类型预测器的性能,本节在图5中所示的基于类型预测的甚块预测器结构基础上,用TAGE甚块出口类型预测器实现其中的“多选1”预测器.另外,传统的TAGE预测器通常使用全局历史/地址路径进行索引,而为了利用本地历史信息,本节仿照锦标赛预测器的方式,将TAGE类型预测器和本地类型预测器结合到一起.作为对比,引入了在文献[13]中使用的基于出口预测的TAGE/本地甚块预测器(在具体实现时,该预测器同样将TAGE出口预测器和本地出口预测器以锦标赛预测的方式结合).这两种预测器的具体配置如表3所示.其中,所有的配置都使用了典型的有5个表的TAGE结构[23].表中,T/LTYPE是基于类型预测的TAGE/本地甚块预测器,其中L/C分别为本地历史长度和选择器历史长度,相应的样本表入口数为2L/C,α/l(1)分别为TAGE预测器历史长度计算参数,相应样本表T1…Tn的大小由计算得到的历史长度按照与本地历史预测器和选择器相同的方式得到,D为TAGE预测器中默认表T0的入口数;T/LEXIT是基于出口预测的TAGE/本地甚块预测器,其中L/C/α/l(1)/D参数之含义与T/LTYPE中一致,样本表的入口数计算方式亦相同,H为在出口预测之后,用于类型预测的简单粘滞位表入口数.在本配置中,本地历史预测器和选择器的样本表入口配置与表2中一致.TAGE预测器的样本表中,如果是进行出口类型预测,则每个入口由2比特出口类型信息、2比特粘滞位和9比特标签位构成,其中表T0无标签位;如果进行出口预测,则每个入口由3比特出口号信息、2比特粘滞位和9比特标签位构成.1KB9101.25993512781.20545125122KB10111.25994512891.493835125124KB11121.216451K9101.54231K1K8KB12131.54231K10111.442241K1K16KB13141.587432K11121.37552K2K32KB14151.481242K12131.259972K2K64KB15161.67134K13141.233184K4K128KB16171.442254K14151.211494K4K256KB17181.473658K15161.1934108K8K512KB18191.41568K16171.1784118K8K性能比较结果如图10所示.作为参照,图中引入了上节中基于出口预测的全局历史/本地锦标赛甚块预测器和基于类型预测的地址路径/本地锦标赛甚块预测器.从图10中可以看到,基于类型预测的TAGE/本地甚块预测器对性能的提升非常明显.首先,相对于基于类型预测的地址路径/本地锦标赛预测器,该方案将MPKI在资源为1KB时降低了约18%.虽然该差距随着资源的增多而逐渐缩小,但使用TAGE技术的方案一直保持着优势,直到512KB时两者的MPKI才趋于相等.其次,相对于基于出口预测的全局历史/本地锦标赛甚块预测Page12器,总体趋势相同.即在资源为1KB时该方案能将MPKI降低约23%,直到512KB时,两者MPKI才趋于相等.最后,相对于基于出口预测的TAGE/本地甚块预测器,总体趋势亦相同.在资源大于256KB后,基于出口预测的TAGE/本地甚块预测器略占优势,MPKI低4%左右.图10使用TAGE技术的预测器比较(其中,GLOBAL/LOCAL_EXIT为基于出口预测的全局历史/本地锦标赛甚块预测器;TAGE/LOCAL_EXIT为基于出口预测的TAGE/本地甚块预测器;PATH/LOCAL_TYPE为基于类型预测的地址路径/本地锦标赛甚块预测器;TAGE/LOCAL_TYPE为基于类型预测的TAGE/本地甚块预测器)总体来说,基于类型预测的TAGE/本地预测器在资源较小时效果较好,平均将MPKI降低了约10%.随着资源的增大,基于类型预测的TAGE/本地预测器一直保持优势.基于出口预测的TAGE/本地甚块预测器仅在资源大于256KB后才能达到更低的MPKI.而1KB到64KB之间通常是处理器能够为甚块预测器分配硬件资源的合理范围,因此,基于类型预测的TAGE/本地预测器在较低资源时的性能领先具有较强的现实意义.总而言之,上述试验结果说明TAGE技术能够提供更好的甚块出口类型预测性能,从而是一种较好的、适用于直接预测甚块出口类型的技术.这是因为TAGE技术能够很好地与甚块出口类型的特性相契合,能根据甚块出口类型特性的不同选择相应的条件进行预测.上述试验结果也说明,相对于基于出口预测的甚块预测器,基于类型预测的甚块预测器能够提供更低的MPKI,从而是一种更好的保证处理器甚块控制流推测能力的方案.7结论简而言之,本文所提出的直接对甚块出口类型进行预测的方案,简化了甚块预测步骤,提高了甚块的预测能力.值得注意的是,虽然本文以EDGE体系结构作为研究,但本文对甚块出口类型的分析和结论对其它甚块体系结构中的甚块预测器设计来说,同样具有指导和借鉴意义.本文后续的研究工作包括:(1)进一步探索甚块出口类型的特性,开发性能更优的甚块预测器;(2)将基于类型预测的甚块预测器应用到实际的EDGE处理器设计中,提升处理器的总体性能;(3)将本文的研究成果扩展到其它甚块体系结构中,为设计下一代处理器提供新的思路.
