Page1不确定图最可靠最大流算法研究蔡伟张柏礼吕建华(东南大学计算机科学与工程学院南京210096)(东南大学计算机网络和信息集成教育部重点实验室南京210096)摘要文中首先基于可能世界模型提出了不确定图的最可靠最大流问题和可靠性计算模型,这对于构建可靠性网络、可靠传输路径选择以及系统薄弱环节分析等一系列实际问题具有重要意义;然后基于简单路径组合思想提出了一种求解最可靠最大流的算法SPCA,通过简单路径流量的组合,在无需求得所有最大流分布的情况下获得最可靠最大流,并在组合过程中引入概率剪枝与约束剪枝策略,对无效组合进行过滤,从而显著地提高了算法效率;接着文中针对SPCA算法易受路径数量及瓶颈容量影响的问题,又提出一种基于状态空间划分的最可靠最大流算法SDBA,该算法的主要思想是将不确定图所蕴含的子图空间划分为互不相交且满足最大流值的闭合区间集合,进而寻找所有闭合区间中概率最大的下界状态,经证明这个下界状态对应子图中的最大流分布为最可靠最大流;最后通过实验,比较了两种算法的性能.实验结果表明SDBA算法相对于SPCA算法其空间复杂度有一定的增加,但时间复杂度方面具有较大的优势,能够很好地解决SPCA算法性能受制于容量的问题,具有更好的性能与适用性.关键词不确定图;可能世界模型;最大流;流可靠性1引言随着研究和应用的深入,人们发现不确定性是实际系统的固有特性,如电力传输网中元器件、数据通信网中节点都存在着发生故障的概率,交通运输网也有着发生拥塞的概率等,当这些不确定性表现在上述网络系统中时,可以借助不确定图来描述这类系统中事物之间复杂的数据关系,其数据刻画能力往往优于其它数据模型(其中包括关系数据模型),因而有关不确定图的理论和应用研究,已逐渐引起了人们的关注,很多有价值的问题及其处理方法[1-11]被提出,其中对于不确定子图,文献[1-2]就如何在不确定图中寻找最可靠子图问题进行了深入的研究,而国内哈尔滨工业大学的邹兆年、张硕和韩蒙等人[3-5]分别对不确定图中频繁子图模式挖掘、不确定图数据库的高效查询处理等方面的问题进行了深入的研究,针对挖掘模型构建、降低子图同构计算复杂度、子图索引设计以及k极大频繁子模式选择等问题,提出了很多有效算法.其次,对于不确定图的可达性、相邻性也有不少的研究成果,文献[6-7]关注于不确定图中k-NN查询、top-k近邻查询,分别提出了各自的距离函数和高效的查询处理算法;东北大学的袁野等人[8]则采用一种有效的随机算法来快速估算可达概率,并结合条件概率对算法进行了改进;另外,对于最短路径、top-k最短路径等重要问题在不确定图中的拓展,研究人员定义了一些很有价值的问题,并给出了一系列非常有参考意义的解决思路和算法[9-11].不确定图上的最大流问题是传统最大流问题在不确定图上的自然延伸,同时又孕育出很多有价值的问题,而下面所列出的则是最直接的两个:(1)“对于存在多种不确定因素的网络,它在传图1原始图及对应的最大流分布为此,本文基于可能世界模型,首先对不确定图最可靠最大流问题进行定义,并给出最大流可靠性的概率计算模型.然后,借鉴随机流网络中相关的算法,针对问题提出一种基于简单路径组合思想的基本算法SPCA(SimplePathCombinationAlgorithm),递最大流(量)或额定工作流(量)时,其可靠性如何评价?”这是网络可靠承载(最大)流能力的反映,这一论题是随机流网络中的经典问题,已被证明是NP-hard问题[12-13].这方面的算法可以分为两大类:精确算法和近似算法.精确算法中最基本的是完全枚举的算法,通过直接枚举所有可能的状态组合得到网络的可靠度.文献[12-15]则分别采用不同的状态划分方式,将状态空间划分成能够满足流量需求的合格状态集,不满足流量需求的不合格状态集和同时包含合格状态和不合格状态的待划分状态集,通过迭代的方式处理待划分状态集,来得到所有合格状态集的概率.一些研究人员[16-18]提出了基于路径集或割集的方法对状态空间进行过滤,然后通过inclusive-exclusive原理计算网络可靠性.对于一个复杂系统,精确算法执行效率往往不能令人满意,为此,一些近似算法被相继提出,其中Ramirez-Marquez和Coit[19]提出了蒙特卡洛近似算法,而Rocco和Muselli[20]采用机器学习方法得到网络可靠性.(2)“一个(最大)流量很可能对应着多个最大流分布,在多个(最大)流分布中,哪一个最值得信赖,可作为流传递的首选方案”,这同样是一个重要的决策问题,关系到如何最大限度利用现有的网络条件选择最可靠的流实施计划.如在图1中,通过Ford-Fulkerson最大流算法[21]可知,原始图中源点s到汇点t之间的最大流值为3,它却对应3种不同的最大流分布(分别为分布1、2、3).而这些流分布存在的概率是不一样的,也就是流分布的可靠性不同.而可见的文献[1-24]表明:目前没有不确定图中流分布的可靠性这方面的研究.然而这一问题有着十分重要的研究价值,可用来有效解决诸如构建可靠性网络、可靠传输路径选择以及系统薄弱环节的分析等一系列实际问题.该算法基本思想是在最大流值与流守恒性[18]的约束下,通过对简单路径分配的流量进行组合,可以在不需要得到所有的最大流分布的情况下获得最可靠最大流,并在组合过程中引入概率剪枝与约束剪枝策略,过滤许多不必要的组合,从而显著地提高了算Page3法效率.SPCA算法对于稀疏网络具有良好的适用性,但随着简单路径数量与路径的瓶颈容量增加,该算法性能下降较快,为此,本文又提出一种基于状态空间划分的最可靠最大流算法SDBA(SpaceDecompositionBasedAlgorithm),该算法的主要思想是将不确定图所蕴含的子图空间进行划分,借助文献[14]中提出的状态空间划分方法得到不相交且满足最大流的闭合区间集合,依据概率计算模型,寻找所有闭合区间中概率最大的下界状态,在这个下界状态对应的子图中运行最大流算法得到的最大流经证明即为原图的最可靠最大流,该算法能够很好地解决基本算法对于容量的依赖,效率与适用性相对更好.最后,通过对比实验,比较了两种算法的性能,并分析了影响算法性能的因素.2问题定义可能世界模型被广泛应用于不确定数据的建模.在该模型中,不确定数据被扩展成可能世界实例的集合,每个可能世界实例具有一定的概率,所有可能世界实例共同组成一个可能世界空间.下面将基于不确定图的可能世界模型(假设图的边概率统计独立,边上的流量与容量取值都是非负整数,且流量要满足流守恒性[18])给出不确定图最可靠最大流问题的定义,另外,本文研究的是一种情况比较简单的二态网络,即网络中每条边的容量图3G蕴含的确定子图及存在概率不确定图G所蕴含的2|E|个确定子图所构成的空间与|E|维0-1向量犞(y1,y2,…,ym)(m=|E|)之间可以建立一一映射.g1到g8对应的0-1向量分别为(000),(100),(010),(001),(101),(110),(011),(111).对犞,给出如下的0-1向量概率计算公式:为0或C,两种容量存在的概率之和为1.定义1.不确定图.一个不确定图G是一个四元组G(V,E,Σ,Γ),其中,V是有向图顶点集合;E是边集合;Σ是二元组(c,p)的集合,c表示容量,p表示容量对应的概率;Γ是一个映射:E→Σ,对于e∈E,Γ(e)=(c,p)表示边e的容量取c时,对应的概率为p,每条边对应的二元组可取值范围为{(c,p),(0,q)},且p+q=1.例1.图2给出一个不确定图G,任取其中一条边,不妨取e1,边上二元组(2,0.8)表示:e1的容量取2时对应的概率为0.8,如果e1的容量取0(e1不存在),对应的概率为0.2.对于一个有|E|条边的不确定图,其蕴含的确定子图个数为2|E|.图3所示为图2中不确定图G的23=8个蕴含子图,且每个子图存在的概率PG(g){=∏e取容量c时的概率).当且仅当G中每条边都取最大容量时,对应的确定子图为G的最大子图,记作MSG(G)(MaxSubGraph).图3中G→g8为G的最大子图.其中pk=p(ek,ck),yk=1k条边ek容量取ck(ck>0)的概率.如图3中g2对应的0-1向量(100)的概率为P(100)=0.8×1×1.定义2.不确定图s-t的最大流值.设不确定图G蕴含的最大确定子图为MSG(G),MSG(G)中源点s到汇点t的最大流值为Fmax,则称Fmax为不确Page4定图G的s-t的最大流值.例2.图2中不确定图G的s-t最大流值为图3中g8的s-t的最大流值Fmax=2.定义3.最大流分布及其可靠性.对于不确定图G所蕴含的最大子图为MSG(G),若MSG(G)中的源点s到汇点t取得最大流值Fmax时,各边上通过的流量所构成的向量为犉犞=(v1,v2,…,vm)(其中m表示G的边数,vi表示边ei上通过的流量值,这个值不超过该边的容量),这样的向量犉犞就是G的一个从s到t的最大流分布,简称最大流,且这个最大流犉犞的可靠性PG(犉犞)=∑gG所蕴含的子图,且g中存在犉犞这个最大流).例3.图2中G的s-t的最大流值Fmax=2.图3中g8为不确定图G的最大子图,g8在取Fmax时,各条边上通过流量的取值情况如图4所示,FV1与FV2为G的两种可能最大流,这两种最大流的概率分别为PG(FV1)=PG(g5)+PG(g8)和PG(FV2)=PG(g8).最大流可靠性计算模型.根据定义3,最大流犉犞的可靠性有如下的计算公式:其中g是G所蕴含的子图,且g中存在犉犞这个最大流,通过分析可以发现这样的子图概率之和∑gPG(g)其实就等于犉犞中vk大于0的边概率之积,因此:其中xk=p(ek,ck),0<vkck的第k条边ek容量取ck的概率.按照式(3),图4中最大流FV1与FV2的可靠性PG(FV1)=0.8×1×0.95,PG(FV2)=0.8×0.9×0.95.显然,如果将犉犞=(v1,v2,…,vm)映射成0-1向量犞(y1,y2,…,ym),其中yk=0,vk=0式(1)、(3)可知PG(犉犞)=P(犞).基于上述相关定义,下面给出不确定图最可靠最大流的定义.定义4.不确定图最可靠最大流.给定不确定图G,源点s与汇点t,设FV1,FV2,…,FVk是s到t的所有可能的最大流,PG(FVi)为G中FVi这个最大流的可靠性,使得PG(FVi)值最大的最大流FVi,称为G的s-t最可靠最大流.例4.对图2中的不确定图G,s-t的所有可能最大流为FV1,FV2,PG(FV1)=0.76,PG(FV2)=0.684,PG(FV1)>PG(FV2),因此,G的s-t的最可靠最大流为FV1=(2,0,2).3基于简单路径组合算法本节首先对不确定图s-t简单路径进行定义,然后构建所有s-t简单路径上通过的流量需要满足的约束模型,接着给出简单路径流量组合可靠性计算方法,最后给出基于简单路径组合算法SPCA.定义5.不确定图s-t简单路径.不确定图G所蕴含的最大子图MSG(G)中,从s到t的顶点和边都不重复的路径,称作G的s-t简单路径,记作sp(simplepath),sp的瓶颈容量为sp所包含全部边的容量最小值,记作BC(BottleneckCapacity).例5.如图2所示:e1e3与e2e3是G的两条s-t的简单路径,对应的瓶颈容量分别是2和1.3.1流约束模型设s-t的所有简单路径记作:sp1,sp2,…,spr,对1ir,spi的瓶颈容量为BCi,当s-t取最大流值Fmax时,每条简单路径上通过的流量为pfi,则pfi满足如下约束模型:其中,约束(4)保证s-t取到G的最大流值;约束(5)保证通过简单路径的流量小于瓶颈容量;约束(6)保证通过每条边的总流量不超过该边的容量.3.2简单路径流量组合的可靠性设PF=(pf1,pf2,…,pfr)是简单路径上的一种流量组合,将所有简单路径上的流量映射到G中的边所构成向量为(v1,v2,…,vm),vj=∑rspi}表示映射后每条边上通过的流量,(v1,v2,…,Page5vm)对应的0-1向量为犞(y1,y2,…,ym),设式(1)计算犞概率为P(犞),于是可将简单路径流量组合PF的可靠性P(PF)定义为P(犞).如果流量组合PF满足约束模型,由约束(4)可知(v1,v2,…,vm)为s-t的一个最大流犉犞.此时,简单路径流量组合PF的可靠性等于最大流犉犞的可靠性,即P(PF)=PG(犉犞).3.3SPCA算法SPCA算法主要由5步骤构成:第1步在不确定图G的最大子图MSG(G)上运行最大流算法得到s-t的最大流值Fmax;第2步搜索G中s-t所有简单路径;第3步构建所有简单路径上通过的流量需要满足的约束模型;第4步搜索满足约束模型的所有s-t简单路径通过流量的组合,找到可靠性最大的流量组合;第5步将该流量组合中所有简单路径上通过的流量分配到每条边上,得到边上通过的流量所构成的向量犉犞,输出最可靠最大流犉犞.例6.如图2所示:(1)s-t最大流值Fmax=2;(2)s-t所有简单路径为sp1=e1e3,sp2=e2e3;(3)构建sp1,sp2上通过的流量pf1,pf2需要满足的约束条件,pf1+pf2=2,pf12,pf21,pf1+pf22;(4)搜索所有简单路径流量组合为PF1=(2,0),PF2=(1,1),P(PF1)=PG(2,0,2)=0.8×1×0.95,P(PF2)=PG(1,1,2)=0.8×0.9×0.95,P(PF1)>P(PF2),可靠性最大的流量组合为PF1;(5)将PF1映射到每条边为犉犞=(2,0,2),因此,G的s-t最可靠最大流为(2,0,2).SPCA算法步骤4以约束(5)作为搜索空间,让PF=(pf1,pf2,…,pfr)从(01,02,…,0r)到(BC1,BC2,…,BCr)进行枚举,为了提高搜索过程的效率,可以采用如下两种剪枝策略.(1)概率剪枝策略.设PF=(pf1,pf2,…,pfr)是已经找到的满足约束模型的一个流量组合,这个流量组合的可靠性为P,假设当前搜索约束模型下一个流量组合时,sp1,…,spi-1上已经取定流量pf1,…,pfi-1,此时对spi分配流量前,如果(pf1,…,pfi-1,0i,…,0r)的可靠性为P,且PP,则(pf1,…,pfi-1,0i,…,0r)到(pf1,…,pfi-1,BCi,…,BCr)的所有组合可直接过滤掉.(2)约束剪枝策略.设sp1,…,spi-1上已经取定流量pf1,…,pfi-1,则spi上的流量取值pfi依次从minFmax-∑i-1取值f满足Fmax-∑i径上通过的流量组合从(pf1,…,pfi-1,0i,…,0r)到(pf1,…,pfi-1,f,BCi+1,…,BCr)可以直接过滤掉.算法1.SPCA算法.输入:不确定图G,源点s,汇点t输出:s-t最大流值Fmax,s-t最可靠最大流犉犞及其概1.Fmax=getMaxFlow(MSG(G),s,t);2.Findallsimplepathfromstot{sp1,sp2,…,spr};3.Constructtheconstraintmodelwhich{pf1,pf2,…,4.Usingtheconstraintpruningstrategyandprobabi-5.GetthemostreliableflowcombinationPF={pf1,…,6.Return(Fmax,犉犞,P).假设所有s-t简单路径已知,则算法时间复杂度的上界为Orm∏r量,m为边数,BCi为每条简单路径的瓶颈容量.4基于空间划分算法由第2节可知:不确定图所蕴含的子图与0-1向量之间存在一一映射的关系,即一个不确定图所蕴含的子图可以用0-1向量犞描述成子图犞,G的整个子图空间可以描述为Ω=[(0,0,…,0),(1,1,…,1)].定义6.偏序关系.设定偏序关系和>,对于两个0-1向量犞1(y11,y12,…,y1m)和犞2(y21,y22,…,y2m),若对任意的i,i∈{1,…,m},y1iy2i,则犞1犞2;若犞1犞2,且存在至少一个i,i∈{1,…,m},使得y1i>y2i,则犞1>犞2.基于上述偏序关系,本节提出了SDBA算法,该算法主要由4步构成:第1步在不确定图G的最大子图MSG(G)上运行最大流算法得到s-t的最大流值Fmax;第2步对G子图空间Ω进行划分,得到所有能够取得最大流值Fmax的不相交闭合空间;第3步使用式(1)对每个闭合空间下界对应0-1向量计算概率,获得概率最大的0-1向量犞;第4步在子图犞上运行最大流算法,得到一个最大流犉犞,输出最可靠最大流犉犞.Page6为了能够取得不确定图G的所有满足s-t最大流值Fmax的不相交闭合子区间所构成的集合R,这里借鉴文献[14]中的空间划分方法,具体过程如下:对于一个给定的0-1闭合子图空间C[犔,犝],犔=(l1,…,lm),犝=(u1,…,um),F(LC),F(UC)分别表示子图空间C的下界子图L和上界子图U的s-t最大流值,如果F(LC)Fmax,则C∈R(表示C中所有子图都满足s-t最大流值Fmax),如果F(UC)<Fmax,则CR(表示C中所有子图都不满足Fmax),如果F(LC)<FmaxF(UC),则C中同时存在满足Fmax与不满足Fmax的子图,C与R关系不能确定,需要进一步划分.规则1.设C[犔,犝]与R的关系不确定,犉犞=(v1,v2,…,vm)是C的上界子图U上的一种最大流,犞(y1,y2,…,ym)是犉犞映射成的0-1向量,令Ic={i|i∈{1,…,|E|}∧yi>li}={i1,i2,…,iq},q=|Ic|,通过Ic可以将C划分成q+1个非空且不相交的闭合子区间C0,C1,…,Cq,且满足C0∈R,其中Ck=[(α1,…,αm),(β1,…,βm)],当k=0时,对i∈Ic,αi=βi=ui,iIc,αi=li,βi=ui;当0<kq时,对1j<k,αij=βij=uij,对j=k,αij=βij=lij,对i∈{1,2,…,m}\{i1,i2,…,ik},αi=li,βi=ui例7.图2不确定图G的0-1闭合子图空间C[L,U]=[(0,0,0),(1,1,1)],Fmax=2,F(LC)=F(0,0,0)=0,F(UC)=F(1,1,1)=2,F(LC)<FmaxF(UC),犉犞=(2,0,2),映射成0-1向量犞=(1,0,1),按照规则1得到Ic={1,3},q=2,通过Ic将C[犔,犝]划分成C0=[(1,0,1),(1,1,1)],C1=[(0,0,0),(0,1,1)],C2=[(1,0,0),(1,1,0)],且C0∈R.基于上述空间划分方法的最可靠最大流算法SDBA伪代码描述如下.算法2.SDBA算法.输入:不确定图G,源点s,汇点t输出:s-t最大流值Fmax,s-t最可靠最大流犉犞及其概1.InitP=0,left←(0,0,…,0|E|);2.Fmax=getMaxFlow(MSG(G),s,t);3.Pushallthesubgraphsstates{(0,0,…,0|E|),4.Whilestackisnotempty5.Getcurrentclosedspace[α,β]ofsubgraphs6.Ifj<I,thenj++;elsepopstack;7.Getthemaxflowvaluefoncurrentsubgraphα;8.IffFmax,then9.Calculatethepossibilityp(α);10.Ifp(α)>P,thenP=p(α)andleft←α;11.Else12.Getthemaxflowvaluefanditsdistribution13.IffFmax,then14.UseFWtogetpivotsetsICbyrule1and15.GetC0=[α,β]by{α,β,IC,|IC|,1}16.Calculatethepossibilityp(α);17.Ifp(α)>P18.ThenP=p(α)andleft←α;19.Getcurrentflowdistribution犉犞onsubgraphleft;20.Return(Fmax,犉犞,P).假设SDBA算法进行状态划分所需要的迭代次数为k,最大流算法选用时间复杂度为O(mn2)的Dinic算法,则SDBA时间复杂度为O(kmn2)(其中m=|E|,n=|犞|).最可靠最大流.对于算法的正确性,给出如下的定理.定理1.设不确定图G的s-t最大流值为Fmax,假设所有可以达到Fmax的子图空间被划分成A1,…,Ar(其中Ai是闭合区间[αi,βi]),αi=(αi1,…,αim),βi=(βi1,…,βim),且Ai∩Aj=,设α1,…,αr中P(αi)最大,则下面结论成立:(1)子图αi中去掉任意一条边后的子图中,s-t最大流值必定小于Fmax;(2)子图αi中必定存在不确定图G的一种s-t证明.(1)反证法.假设αi去掉任意一条边后的子图αi的最大流值为Fmax,则αi必定属于某个Aj(j≠i,j∈{1,2,…,r}),即αiαj,所以P(αi)P(αj),而P(αi)>P(αi),因此P(αj)>P(αi),这与P(αi)最大矛盾,即结论(1)成立.(2)结论(1)说明在αi上得到的最大流可靠性为P(αi),因此,证明结论2等价于证明G的s-t最可靠最大流犉犞的可靠性为P(αi),反证法:假设s-t的最可靠最大流犉犞可靠性PG(犉犞)大于P(αi),不妨设犉犞=(v1,v2,…,vm),将犉犞映射成0-1向量犞=(y1,y2,…,ym),其中yk=1,0<vkck不确定图G的一个子图,由于G中所有能够取得最大流值Fmax的子图空间为A1,…,Ar,因此,犞必定Page7属于某个Aj(j∈{1,2,…,r}),则P(犞)P(αj),而P(αj)P(αi),所以P(犞)P(αi),而PG(犉犞)=P(犞),因此PG(犉犞)P(αi),这与假设矛盾,因此结论2成立.定理1说明将不确定图G中能够取到最大流值Fmax的子图空间划分成若干不相交闭合区间,通过式(1)中给出的0-1向量概率计算方法,可以在这些不相交闭合区间下界对应的0-1向量中找到一个概率最大的0-1向量αi,在αi子图上运行最大流算法得到的最大流必定是最可靠最大流,这说明SDBA算法在理论上是正确的.5实验为了验证本文所提出算法的运行效率及分析影响算法性能的各种因素,我们进行了一系列的实验,其中所有算法都在STL库支持下用VisualC++实现,本文实验以普通PC为平台,基本配置为:处理器Intel(R)Core(TM)i3,CPU2.93GHz,内存4GB,64位Windows7操作系统(下一步工作将基于图分割策略,研究算法由单机向多机并行扩展).由于最可靠最大流问题是本文提出的新问题,目前还没有这方面公认的数据测试集,本文实验是在图相关研究中普遍采用的有向图生成器NETGEN[25]基础上,按照一定的规则合成测试数据集,主要分为3类:(1)通过有向图生成器生成V6E10、V8E14、V10E18、V12E22、V14E265组有向图,其中VnEm表示由n个顶点、m条边所构成的图集合(本实验中集合大小为5),图中边的容量与对应概率按照随机、均匀分布、正态分布(σ=0.2,1.0,1.8)进行组合分配,它们的组合情况如表1所示.容量c随机分布均匀分布c∈[1,40]p∈(0.5,1)c∈[1,40]p∈(0.5,1)为了避免随机生成的图中源点与汇点的任意选择,不能保证源点与汇点之间有足够多的简单路径,无法反映出算法效率与路径数量的关系,实验中对这类数据s、t的选取策略是使用两点之间简单路数量最多的一对顶点作为源点与汇点.(2)在图的顶点个数固定(实验中顶点为15),边的数量按照文献[26]所定义的图稠密度d=2|E|/|犞|×(|犞|-1)(实验中稠密度d分别取为0.3,0.35,0.4,0.45,0.5)确定的前提下,图集合(本实验集合大小为5)通过有向图生成器产生,然后给图的每条边都分配大小为10的容量,容量对应的概率在(0.5,1)之间随机取值,实验中这类数据集的源点与汇点选取策略同第(1)类数据.(3)在文献[14]中15个顶点、30条边的有向图基础上,通过给边依次分配容量(本实验分配的容量依次为5,10,15,20,25,30)及对应的概率(概率在(0.5,1)之间随机取值),产生大小为6的图集合,继续使用文献[14]中的s、t(s=1,t=15)作为本文实验的源点与汇点.实验1.首先考察图的规模对SPCA算法与SDBA算法运行时间与消耗内存方面的影响,实验选择第(1)类数据中容量及概率均为随机的组合作为数据集.从图5(a)可以看出,随着边数的增加,两种算法运行时间的增长速率有较大差别,SPCA算法因边数的增加导致源点与汇点间简单路径数量增加,简单路径组合数量将指数增长,而SDBA算法也因边数的增加会导致状态空间变大,算法需要的空间划分次数增多,运行时间变长,但相对于SPCA算法,增涨的幅度明显较为缓慢,在边数达到22时,SPCA算法已经不能在有效的时间内运行出来;从图5(b)可以看出,随着边数的增加,算法消耗的内存会随之增加,可以看出SPCA算法空间性能优于SDBA算法,这是由于SPCA算法消耗的内存主要用于存储约束条件,而SDBA算法则需要存储迭代划分过程产生的子状态空间,导致内存消耗稍高,但随图规模增长其增幅并不明显.从总体来看,SDBA算法的整体性能优于SPCA算法,考虑到SPCA算法适应性较弱,后续的实验2、实验3主要针对SDBA算法展开.另外实验中对于每一组数据,两种不同算法得到最大流的可靠性都是相等的,这也从实验角度再次验证了算法的正确性.实验2.考察不确定图边上容量分布与概率分布对SDBA算法运行时间的影响,实验使用第(1)类数据集,结果如图6所示.图6(a)可以看出,边数大于等于22且容量服从均匀分布时,SDBA算法的运行时间会略低于容量随机取值的情况,同时可以看出,在容量都服从均Page8匀分布的情况下,概率随机取值时算法运行时间相对均匀分布情况较短,而在容量都随机取值情况下,概率服从均匀分布时算法运行时间相对随机情况较短;图6(b)说明在其它条件相同情况下,概率服从相同均值μ,不同均方差σ的正态分布,对SDBA算法的运行时间影响可以忽略不计.实验3.考察图的稠密性与边的容量取值对SDBA算法运行时间的影响,实验使用第(2)、(3)类数据集,结果如图7所示.从图7(a)可以看出,SDBA算法运行时间会随着图稠密度d的提高而增加,主要原因是图稠密性会直接影响状态划分算法的状态空间大小,稠密度越高,状态空间越大,算法需要的迭代次数也会随之增加,因而算法运行时间会增大;图7(b)说明在其它条件相同的情况下,边的容量对SDBA算法运行时间的影响很小,可以忽略不计.6结论本文首先基于可能世界模型提出了不确定图的最可靠最大流问题和可靠性计算模型.然后提出了一种基于简单路径组合的基本算法SPCA.针对基本算法适用性与效率方面存在的问题,又提出了一种更加有效且适用性更强的基于空间划分的算法SDBA.实验结果表明本文提出的算法能够有效地解决不确定图最可靠最大流问题.相对于SPCA算法而言,SDBA算法不会受到简单路径数量与瓶颈容量的影响,且性能相对较好.本文的下一步工作一方面是研究算法的可扩展性,希望通过图的分割等策略实现算法的多机并行,Page9另一方面研究如何将算法拓展至多态模型及流可靠性top-k查询等方面.
