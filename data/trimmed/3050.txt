Page1单变量区间线性不等式抽象域陈立前王戟侯苏宁(国防科学技术大学计算机学院并行与分布处理国防科技重点实验室长沙410073)摘要程序变量的值范围信息对于编译器优化、程序分析与验证等应用至关重要.抽象解释理论提供了一种通用框架为程序变量计算近似的但是可靠的值范围.然而该框架下已有的数值抽象域在表达非凸性质方面存在一定的局限性,影响了值范围分析的精度.文中基于抽象解释理论,提出一个新的数值抽象域———单变量区间线性不等式抽象域.其主要思想是使用单变量区间线性不等式约束作为域元素的约束表示方法.该抽象域的表达能力强于经典的区间抽象域,并允许表达某类非凸、非连通性质.同时,其域操作存在高效的实现算法.该抽象域具有很强的可扩展性,能够应用在实际大规模的程序分析中.关键词值范围分析;静态分析;抽象解释;抽象域;区间分析1引言程序中变量的值范围信息对于编译器构造/优Page2基于抽象解释理论来为程序变量计算近似的但是可靠的值范围[3].抽象解释[4]是一种关于语义近似的通用理论.该理论提供了一个通用框架来设计和构建静态分析以自动化地推导程序的动态性质.其中,抽象域是抽象解释框架下的一个核心概念.抽象域包括一个特定类别的、计算机可表示的对象(称为域元素)集合以及一系列用来操纵这些对象的操作(称为域操作)集合.程序分析中,程序的状态集合通过抽象域中的域元素来近似,程序语义动作(赋值、条件测试、控制流接合、循环等)通过抽象域中的域操作来可靠建模.抽象域的设计与实现往往是在计算效率和分析精度间取得合理折衷.区间分析可以发现变量的上下界信息,是最早用于变量值范围分析的方法[1].由于实数区间所构成的完全格上存在无穷递增链,区间分析可能不终止.为了保证区间分析的计算效率和终止性,Cousot和Cousot于1976年把经典的区间算术适配到抽象解释框架下,并提出了区间抽象域[5].该抽象域的简单易用和很高的计算效率(线性的时空复杂度)使得它在静态分析中得到了极为广泛的应用,包括常量传播、无用代码消除、运行时错误检查、循环时间分析等[5-6].相对于后来出现的、能够表示变量间关系的数值抽象域(如多面体抽象域[7]、八边形抽象域[8]等),区间抽象域只能表示单个变量的性质,因此表达能力比较弱、分析精度不高.但是,通过某些策略(比如带阈值的加宽策略[6]),区间抽象域的分析精度可以得到进一步的改进.至今,区间抽象域仍然是应用最广泛的数值抽象域之一.尤其,在实际大规模的程序分析中,区间抽象域由于其高计算效率以及强可扩展性,备受学术界与工业界程序分析工具开发者的青睐.许多静态分析工具都使用区间抽象域作为整个分析的基础,包括ASTR?E[6]、AbsIntPAG①、Sparrow②等.然而,即使在表达单个变量的值范围性质上,区间抽象域仍存在一定局限性.类似于大部分数值抽象域(包括多面体抽象域、八边形抽象域等),区间抽象域只能表示凸(convex)的性质.但是,这种凸性的限制可能影响分析的精确性,导致出现误报.尤其,除法是程序开发中很常用的算术运算,“除零错”成为实际程序中一种重要的、常见的运行时错误.但是,在当前数值程序分析中,由于除法表达式不是线性的,一般把除法表达式转化为线性表达式来处理:使用一个区间来上近似分母表达式的值,然后通过除以该区间将整个表达式抽象为线性表达式.但是,一旦该区间包含了零,则不仅可能产生“除零错”的误报,而且整个除法表达式的抽象值将变成[-,+],并将影响到后续程序分析的精确性.比如,对于除法表达式2z/(xy),如果分母表达式xy的值范围是[2,4],则除法表达式2z/(xy)将抽象成2z/[2,4],即[0.5,1]z,从而成为线性的.但是如果xy的值范围区间包含了0,则传统方法将只能把2z/(xy)抽象为[-,+].为了能够对除法表达式进行更为精确的抽象并尽可能地消除“除零错”误报,需要设计一个数值抽象域尽可能地把0排除在值范围之外.本文使用图1中所示程序来展示已有数值抽象域,尤其是区间抽象域、所存在的凸性局限性并说明本文的研究动机.对于图1中所示程序Prog1,如果使用区间抽象域进行分析,在循环中x的取值范围将是[-1,1],因此会产生误报,即程序中第5行的赋值语句有“除零错”.注意,即使是使用表达能力更强的凸的数值抽象域(如多面体抽象域、八边形抽象域等)来分析该程序,仍然会产生“除零错”的误报.然而,根据程序的具体语义,在循环中变量x的取值始终是前一次循环执行后x的值的相反数,因此x的取值要么是1要么是-1,第5行的赋值语句不会发生“除零错”.但是,非凸性质x=-1∨x=1是通常的凸的数值抽象域表达不了的,需要一种非凸的抽象域才能表达.另一方面,在实际软硬件系统的分析与验证中,所给应用数据可能是不精确的或者受到非确定性因素的影响,使得这些数据仅能定位在某个特定的区间范围内.因此,在建模或抽象后,抽象模型或抽象程序中可能存在区间形式的输入数据.特别地,为了分析包含非线性操作(如两表达式的乘/除)或浮点算术的程序,常常需要使用一种称为线性化的技术来把非线性或浮点表达式抽象成带区间系数的线性表达式(形如Σk[ak,bk]xk+[c,d])[9].另外,当使用数值抽象域的浮点实现(如文献[10])来分析程序①②Page3时,为了保证可靠性,待分析程序中的实数需要抽象成浮点区间(比如,项0.1x中的实数系数0.1不是一个IEEE754标准能够表示的浮点数,从而程序分析时需要使用一个浮点区间[a,b]来上近似,其中a是比0.1小的最大浮点数,b是比0.1大的最小浮点数).而且,许多浮点算法只能输出可靠的界,即使输入参数都是精确的浮点值.比如,由于不同执行环境的浮点舍入模式(IEEE754标准支持向上、向下、向零、向最近4种舍入模式)可能不一样,同样两个浮点数a和b的加法可能得到不同的浮点结果,需要使用一个浮点区间[af,-b,af,+b]来进行上近似,其中f,-与f,+分别表示浮点格式f中向下和向上舍入的浮点加法.换言之,在实际程序分析中,区间作为变量系数的情形很自然地出现了.然而,传统区间抽象域(形如axb,即{xb,-x-a}或x∈[a,b])尚不支持使用区间作为变量的系数.为此,本文提出一个新的抽象域———单变量区间线性不等式抽象域,来推导关于程序变量x形如[a,b]xc的关系,其中常数a,b,c∈将由基于抽象解释的静态分析器自动推导出来.直观地讲,单变量区间线性不等式抽象域可以看成是经典区间抽象域的区间系数扩展版本.然而,与经典的数值抽象域(包括区间抽象域、八边形抽象域、多面体抽象域等)不同的是,几何上,单变量区间线性不等式抽象域中的域元素不一定是凸或连通的.因此,该抽象域可以自然地表示某些析取信息,而不需要显式地使用析取逻辑符∨来表达.而且,单变量区间线性不等式抽象域只需要通过简单的区间算术就可以实现,有着较高的计算效率.本文实验结果表明:单变量区间线性不等式抽象域可以比区间抽象域发现更精确的值范围信息,同时所耗费的计算代价并不高.本文第2节回顾经典区间抽象域的设计并给出本文单变量区间线性不等式的语义;第3节提出一个新的数值抽象域———单变量区间线性不等式抽象域,并给出该抽象域上的常用域操作;第4节讨论单变量区间线性不等式抽象域的原型实现及其实验结果;第5节给出相关工作比较;第6节总结全文并展望未来工作.2预备知识2.1经典的区间抽象域在基于区间抽象域的静态分析中,程序中某程序点处变量的值由该变量可能取到的最小值和最大值所构成的区间来近似.基于抽象解释理论,实数域(具体域)与区间抽象域(抽象域)之间的关系可以通过下面一个Galois连接来表示,即其中,Itvs是实数上的区间集合{[a,b]|a∈∪{-},b∈∪{+},ab}∪{⊥i}.上的区间集合Itvs构成了一个完全格(Itvs,i,i,i,⊥i,⊥i),其中,⊥i[-,+]表示整个实数集合,⊥i表示空区间.同时,定义[b,a]⊥i,若b>a.具体函数γi∈[Itvs→()]定义为γi(⊥i),γi([a,b]){x∈|axb}.抽象函数αi∈[()→Itvs]定义为αi()⊥i,αi(S)[minS,maxS],其中S是一个实数集合.Itvs上的偏序关系i定义为[a,b]i[a,b]当且仅当[a,b]=⊥i或aa∧bb.在基于抽象解释的程序分析中,通常为每一个程序点构建一个抽象环境,记作X#,用以把每个程序变量映射到抽象域中的一个域元素.区间抽象环境[Vars→Itvs]把每个程序变量映射到一个表示其值范围的区间上,其中Vars表示待分析程序的变量集合.在n-维空间中,如果一个连通区域所对应的约束系统中的每个约束都形如xjc或-xjc,其中c是一个实数常量或+,则称该连通区域是一个盒(box).盒可以是无界的,但一定是凸的.下面给出区间抽象域上的一些基本域操作.(1)交(meet)与接合(join)IiI[max(a,a),min(b,b)],I=[a,b]∧I=[a,b]∧烄烅⊥i,烆IiI[min(a,a),max(b,b)],I=[a,b]∧I=[a,b]烄I,烅I,烆注意:i是精确的,即γ(IiI)=γ(I)∩γ(I).但是,i不是精确的,i只能保证是两个区间的(集合)并的上近似,即γ(I)∪γ(I)γ(IiI).例如,设I=[0,1]且I=[3,4],则IiI=[0,4],显然2∈IiI,但是2γ(I)∪γ(I).(2)区间算术当参与区间算术计算的任意一个参数为⊥i时,其计算结果也为⊥i.Page4-i[a,b][-b,-a];[a,b]+i[a,b][a+a,b+b];[a,b]-i[a,b][a-b,b-a];[a,b]×i[a,b][min{a×a,a×b,b×a,b×b},1/i[a,b][min{1/a,1/b},1/i[a,b][-,+],如果a<0<b;[a,b]/i[a,b][a,b]×i(1/i[a,b]).这里,我们把+,-,×,/按照标准方式扩展到∪{+,-}上.特别地,(+)×00,(-)×00,x>0.x/0+,x<0.x/0-,x.x/(+)0,x.x/(-)0.(3)迁移函数①赋值迁移函数对于赋值语句x··=expr,在抽象环境X#下,其赋值迁移函数定义为x··=expr#X#X#[xexpr#X#],其中,expr#X#表示在抽象环境X#下采用上述区间算术操作来计算表达式expr所得到的区间抽象值.②测试迁移函数设X#(x)=[a,b],则有xc#X#⊥i,xc#X#⊥i,注意,任意形式的(测试条件)约束均可以抽象成一个或多个形如xc或xc的约束.(4)加宽与变窄算子本文沿用文献[5]关于区间抽象域上的加宽i与变窄Δi算子的定义:⊥iiI=Ii⊥iI;[a,b]i[a,b][aa?a:-,bb?b:+];[a,b]Δi[a,b][a=-?a:a,b=+?b:b].2.2单变量区间线性不等式的语义本文使用单变量区间线性不等式表示所有单变量线性不等式dxc所构成的不等式族,其中d∈[a,b].定义1.x∈称为单变量区间线性不等式[a,b]xc的一个弱解(weaksolution),若存在某个d∈[a,b]使得x满足dxc,并且,集合Σ([a,b]xc)={x∈|d∈[a,b].dxc}称为单变量区间线性不等式[a,b]xc的弱解集合.如下定理从代数角度刻画了单变量区间线性不等式的弱解集合.定理1.x∈是[a,b]xc的弱解当且仅当x满足(a+b)x-(b-a)|x|c.证明.分以下两种情况考虑:(1)当x0时,(a+b)x-(b-a)|x|2c等价于axc.首先,若x满足axc,由于a∈[a,b],则x是[a,b]xc的弱解;其次,对于d∈[a,b]有axdx,从而x如果满足dxc则必然也满足axc.因此,当x0时,x是[a,b]xc的弱解当且仅当x满足axc.(2)当x<0时,(a+b)x-(b-a)|x|2c等价于bxc.首先,若x满足bxc,由于b∈[a,b],则x是[a,b]xc的弱解;其次,对于d∈[a,b]有bxdx,从而x如果满足dxc则必然也满足bxc.因此,当x<0时,x是[a,b]xc的弱解当且仅当x满足bxc.证毕.总体来说,一个单变量区间线性不等式的弱解集合可以是无界的、非凸的、非连通的.其非凸性质源于定理1中的非线性因子|x|.在一个给定的关于x的半轴上,变量x的符号是固定的,因此一个单变量区间线性不等式的弱解集合与每个半轴的交可通过一个(凸)区间来表示.例1.对于单变量区间线性不等式[-1,1]x-1,其弱解集合与x正半轴的交得到-x-1,即x∈[1,+],其弱解集合与x负半轴的交得到x-1,即x∈[-,-1].因此,[-1,1]x-1的弱解集合为x∈[-,-1]∪[1,+],如图2所示.图2单变量区间线性不等式[-1,1]x-1的弱解集合关于弱解及弱解集合的定义可以提升到由多个、多维单变量区间线性不等式所构成的单变量区间线性系统(其中每个约束只涉及一个变量)上.同样地,单变量区间线性系统的弱解集合也可能是无界的、非凸的、非连通的.但是,在每个(闭)象限上所有变量的符号是固定的,因此一个单变量区间线性系统的弱解集合与每个象限的交可通过一个(凸)盒来表示.Page53单变量区间线性不等式抽象域本节提出一个新的数值抽象域———单变量区间线性不等式抽象域.考虑到该抽象域与经典区间抽象域的相似性,本文亦把该抽象域简称为扩展区间抽象域,记作extItv.其主要思想是对经典区间抽象域进行扩展,采用区间作为变量系数.类似于已有大部分数值抽象域,extItv也是通过某类特定约束系统的解集来设计和构建抽象域的.在表示方法上,extItv使用单变量区间线性不等式约束(形如[a,b]xc).类似于经典区间抽象域,扩展区间抽象域也是一个非关系型抽象域,只能表示单个变量的性质,即每个变量各自的取值范围.3.1抽象域表示首先,根据2.2节关于弱解的定义,一个单变量区间线性不等式φ:[a,b]xc可以按如下方式进行约简:ζ(φ)01,0∈[a,b]∧c0烄axc,x0或a0∧c0或b0∧c0烅bxc,x0或a0∧c0或b0∧c0[a,b]xc,x符号无限制且a<0<b∧c<烆其中,01表示不等式φ是恒成立的,可以从不等式系统中删除;axc和bxc通过分别除以a和b的绝对值可以进一步约简成xc或-x-c形式;[a,b]xc(其中a<0<b∧c<0)通过除以c的绝对值可以进一步约简成[a,b]x-1的形式,其中a<0<b.定理2.给定一个单变量区间线性不等式φ:[a,b]xc,有Σ(φ)=Σ(ζ(φ)),即约简操作ζ是精确的.证明.(1)若0∈[a,b]∧c0时,线性不等式0xc的解集为整个实数集,因此φ:[a,b]xc恒成立,是冗余的;(2)当x0时,根据定理1,有x是[a,b]xc的弱解当且仅当x是axc的弱解;当a0∧c0时,[a,b]xcxsup(c/[a,b])xc/aaxc,其中sup表示取区间的上界;当b0∧c0时,[a,b]xcxinf(c/[a,b])xc/aaxc,其中inf表示取区间的下界;(3)当x0或a0∧c0或b0∧c0时,按(2)同理可得Σ([a,b]xc)=Σ(bxc);(4)当x无符号限制且a<0<b∧c<0时,ζ(φ)=φ.对于任意变量x,我们使用关于x的单变量区间线性系统犪→xc→来表示变量x的可能取值范围,其中犪→是一个区间向量,c→是一个标准的(非区间)实数向量.其弱解集合Σ(犪→xc→)={x∈|a→∈犪→.a→xc→}称为一个扩展区间,其中a→是一个标准的实数向量,而每个点x表示变量x一个可能的取值.通过上述约简操作ζ,一个扩展区间的约束表示(任意多个约束)可以转化成如下正规型(至多3个约束):其中,c1∈∪{-},c2∈∪{+},a<0<b.若c1=-,则表示-x-c1恒成立,可以从约束系统中删除;同理,若c2=+,则表示xc2恒成立,可以从约束系统中删除;若[a,b]=[-,+],即[a,b]=⊥i,本文表示[a,b]x-1恒成立①,可以从约束系统中删除.给定一个扩展区间犐,犐的正规型扩展区间记为Θ(犐),根据定理2有γ(Θ(犐))=γ(犐).方便起见,本文采用[[c1,c2],[a,b]]来表示上述正规型扩展区间.几何上,一个扩展区间在数轴上对应的图形区域可能是非凸的、非连通的、无界的,但是它与数轴上每个半轴的交是一个可能为空的(凸)区间.具体而言,一个扩展区间的形状只可能是图3中所示7种情况之一.并且,数轴上对应的图形区域可以被一个扩展区间所精确描述,当且仅当该图形区域在几何上同时满足如下两个性质:(1)至多存在两个非连通的子区域;(2)如果存在两个非连通的子区域,那么这两个子区域必须分布在数轴原点的两侧(且原点不在这两个子区域内).基于抽象解释理论,实数域(具体域)与扩展区间域(抽象域)之间的关系可以通过如下Galois连接来表示其中,ExtItvs是上的所有正规型扩展区间所组成的集合{[[c1,c2],[a,b]]|c1∈∪{-},c2∈∪①实际上,[-,+]x-1可以表示x≠0.方便起见,本Page6图3一个扩展区间的7种可能几何形状{+},a∈,b∈,c1c2,a<0<b}∪{[[c1,c2],[-,+]]|c1∈∪{-},c2∈∪{+},c1c2}∪{⊥ei}.上的正规型扩展区间集合ExtItvs构成了一个完全格(ExtItvs,ei,ei,ei,⊥ei,⊥ei).其中,⊥ei[[-,+],[-,+]]表示整个实数;⊥ei表示空扩展区间.同时,定义[[c1,c2],[a,b]]⊥i,其中[c1,c2]=⊥i或c1>-1/b∧-1/a>c2.具体函数γei∈[ExtItvs→()]定义为γei(⊥ei),γei([[c1,c2],[a,b]]){x∈|-x-c1,xc2,[a,b]x-1}.抽象函数αei∈[()→ExtItvs]定义为αei()⊥ei,αei(S)[[c1,c2],[a,b]],其中S是一个实数集合,[c1,c2]=[minS,maxS],[a,b]=[-,+],0∈S或{x>0|x∈S}=或烄{x<0|x∈S}=.烅[min{x>0|x∈S},-1烆ExtItvs上的偏序关系ei定义为[[c1,c2],[a,b]]ei[[c1,c2],[a,b]]当且仅当[[c1,c2],[a,b]]=⊥ei或[c1,c2]i[c1,c2]∧[a,b]i[a,b].操作ei,ei将在3.2节给出.类似于区间抽象环境,扩展区间抽象环境[Vars→ExtItvs]把每个程序变量映射到一个表示其值范围的扩展区间上.对应地,在n-维空间中,如果一个(可能非连通的)区域对应的约束系统中的每个约束形如[a,b]xjc,其中c是一个实数常量或+,[a,b]是一个实数区间,j∈{1,2,…,n},则该区域称为是一个n-维扩展盒(extendedbox).同样地,几何上,一个扩展盒可以是非凸的、非连通的、无界的.图4中给出了二维平面上一些扩展盒的例子.其中,图4(a)所示扩展盒对应单变量区间线性约束系统{-x1,x1,[-1,1]x-1,-y1,y1,[-1,1]y-1},图4(b)所示扩展盒对应单变量区间线性约束系统{-x2,x3,[-0.5,1]x-1,-y3,y2,[-1,0.5]y-1}.n维空间上的一个(可能非连通的)图形区域可以被一个扩展盒所精确描述,当且仅当该图形区域同时满足如下两个性质:(1)每个闭象限内至多存在一个盒;(2)对于每个变量x,x0和x0将整个空间划分为两个子空间,如果两个子空间同时分别存在某些子区域,则其中一个子空间内所有子区域的集合并(union)在x轴上的投影扩展区间必须与另一个子空间内所有子区域的集合并(union)在x轴上的投影扩展区间相等.图5中给出了二维平面上一些不能够被扩展盒所精确描述的图形区域.其中,图5(a)不满足上述性质(2),图5(b)不满足上述性质(1).给定n-维扩展盒犅,记该扩展盒在变量xj对应数轴上的投影扩展区间为犅xj.扩展盒上的序关系犅eb犅定义为γ(犅)γ(犅).给定两个n-维扩展盒犅和犅,犅eb犅成立当且仅当对于任意xj∈{x1,…,xn},皆有犅xjei犅xj.关于变量xj的单变量区间线性不等式φ:[a,b]xjc被一个扩展盒犅蕴含,记为犅φ,当且仅当犅xjeiΘ(φ).Page73.2抽象域操作本节给出扩展区间抽象域上用于静态分析的常用域操作.为了方便描述,我们以下面两个正规型扩展区间作为可能的操作参数:犐[[c1,c2],[a,b]]犐=[[c1,c2],[a,b]]并以如下正规型扩展区间来表示域操作的结果扩展其中,[c1,c2]=[c1,c2]i[c1,c2],[a,b]=[a,b]i[a,b].为了抽象程序流图中的控制流接合(control-最少.flowjoin),我们需要计算抽象环境的并(union).然而,两个扩展区间的并未必是一个扩展区间.例如,给定扩展区间犐={x2,-x2,[-1,1]x-1}与犐={x4,-x-3},犐与犐的并对应的图形区域如图6(a)所示,该区域不满足3.1节关于数轴上图形区域能被一个扩展区间所精确表示的判断之性质(1),即“至多存在两个非连通的子区域”.为此,我们使用下面定义的接合操作ei,来计算包含该并的最小的扩展区间,以保证精度损失[c1,c2]=[c1,c2]i[c1,c2],[min{a,-1/c1},max{b,-1/c2},[a,b]=⊥i∧[a,b]≠⊥i∧(c1>0∨c2<0)[min{a,-1/c1},max{b,-1/c2},[a,b]=⊥i∧[a,b]≠⊥i∧(c1>0∨c2<0)[a,b]=注意:ei是精确的,没有精度损失,即γ(犐ei犐)=γ(犐)∩γ(犐).然而ei不是精确的,犐ei犐只能保证是两个扩展区间犐与犐的(集合)并的上近似,即γ(犐)∪γ(犐)γ(犐ei犐).但是,不一定有γ(犐ei犐)γ(犐)∪γ(犐),例如,对于图6中的例子,2.5∈犐ei犐,但是2.5γ(犐)∪γ(犐).(2)算术操作(arithmetic)当参与扩展区间算术计算的任意一个参数为⊥ei时,其计算结果也为⊥ei.下面,我们假设参与扩区间:犐=[[c1,c2],[a,b]](1)交(meet)与接合(join)两个扩展区间的交仍然是一个扩展区间.犐与犐的交定义为犐=犐ei犐其中,犐=犐ei犐其中,[a,b]≠⊥i∧[a,b]≠⊥i(c1>0∧c2<0))否则展区间算术计算的参数均不为⊥ei.①求反-ei犐犐的求反运算定义如下:其中,[c1,c2]=[-c2,-c1],[a,b]=[-b,-a].②加法犐+ei犐犐与犐的和定义为其中,Page8a=-1烄a=-1烅a=-1a=-,b=+,烆③减法犐-ei犐犐与犐的差定义为④乘法犐×ei犐犐与犐的积定义为其中,[c1,c2]=[c1,c2]×i[c1,c2],[a,b]的取值分如下4种情况讨论:[a,b]=[min{-aa,-bb},max{-ab,-ab}].(i)若[a,b]≠⊥i且[a,b]≠⊥i,则(ii)若[a,b]=⊥i且[a,b]≠⊥i,则(iii)若[a,b]≠⊥i且[a,b]=⊥i,则(iv)若[a,b]=⊥i且[a,b]=⊥i,则⑤除法犐/ei犐犐的倒数定义为其中,[c1,c2]=1/i[c1,c2],[a,b]=⊥i,[a,b]=⊥i烅烄[c1,c2]=[-b,-a],[a,b]=[-c2,-c1],烆犐与犐的商定义为(3)加宽(widening)/变窄(narrowing)类似于区间完全格,扩展区间所构成的完全格也是无穷格.因此,在程序分析过程中,对于有循环或递归调用的程序,为了加速不动点计算并保证其终止性,需要设计加宽算子.而变窄算子则能以递减迭代的方式,进一步精化应用加宽算子所得到的近其中,a,b定义如下似不动点并保证递减迭代的终止性.扩展区间抽象域上的加宽ei定义为其中,[c1,c2]=[c1,c2]i[c1,c2],[a,b]=扩展区间抽象域上的变窄Δei定义为其中,(4)迁移函数(transferfunctions)赋值语句和条件测试语句是程序语言中的基本指令.在基于抽象解释的程序分析中,这两种指令的语义一般通过迁移函数(即从抽象环境集合到抽象环境集合的映射)来抽象.赋值迁移函数v··=expr#将给出赋值语句v··=expr执行之后的新环境,该环境与旧环境的唯一区别就是变量v的值发生了改变.测试迁移函数expr1expr2?#则将从旧环境中过滤掉不满足布尔表达式expr1expr2的那些环境.①赋值迁移函数(assignmenttransferfunction)在抽象环境X#下,采用本文之前定义的扩展区间算术操作,基于结构归纳,可以得到表达式expr的抽象语义值expr#X#,如图7所示.expr#:(Vars→ExtBoxes)→ExtBoxes;v#X#X#(v);[a,b]#X#[a,b];-expr#X#-ei(expr#X#);expr1⊙expr1#X#(expr1#X#)⊙ei(expr2#X#)图7数值表达式基于扩展区间抽象域的抽象语义Page9由此,扩展区间抽象域上的赋值迁移函数可以定义为v··=expr#X#X#[vexpr#X#].②测试迁移函数(testtransferfunction)给定某个可能的环境ρ∈X#,布尔表达式expr1expr2的语义定义如下:expr1expr2ρ{true,若val1∈expr1ρ,测试迁移函数旨在过滤掉不满足布尔表达式expr1expr2的那些环境,定义如下:expr1expr2?#X#对测试语句expr1expr2?进行抽象时,除了需要分别对expr1和expr2进行计值以判定expr1expr2为真({true})还是为假({false})还是不确定({true,false})外,在expr1expr2的计值为不确定({true,false})时,还需要利用测试条件expr1expr2来对其中所涉及的变量的取值范围进行精化.记表达式expr中的变量集合为Vars(expr).对于Vars(expr1expr2)中的任何一个变量v,expr1expr2可用来精化变量v的取值范围.在抽象环境X#下,关于变量v∈Vars(expr1expr2),expr1expr2可以通过一个形如[a,b]vc的单变量区间线性不等式来抽象:变量v的符号出现保持不变,其它变量v均使用其抽象值X#(v)来替换,变量v的系数以及不含变量v的项使用扩展区间算术来计算,并转化成形如[[c1,c2],[a,b]]v[[c1,c2],[a,b]]的不等式,该不等式可进一步抽象成[c1,c2]vc2;严格不等式“<”使用“”来抽象.设expr1expr2导出的关于v的单变量区间线性不等式所对应的正规型扩展区间为犐,并设测试迁移函数执行之前,变量v的取值范围为扩展区间犐,即X#(v)=犐,则测试迁移函数执行之后,变量v新的取值范围为扩展区间犐犐ei犐.例如,给定条件测试yx+2z[1,2]x+1,在抽象环境X#(x)=[[-,+],[-,+]],X#(y)=[[-1,2],[-1,1]],X#(z)=[[2,4],[-,+]]下,对于变量x,该条件测试将导出[[-1,2],[-1,1]]x+2[[2,4],[-,+]][[1,2],[-,+]]x+1,即[[-3,1],[-,+]]x[[-7,-3],[-,+]],进一步抽象得[-3,1]x-3.因此,测试迁移函数执行之后,变量x新的取值范围为扩展区间[[-,+],[-1,1/3]].当条件测试语句expr1expr2中的变量数大于1时,各个变量间的取值范围将因为这个约束而存在互相依赖关系.因此,可以使用约束传播技术来缩紧(tighten)每个变量的取值范围:将一个变量的约束信息(取值范围)传播到其它变量上.变量v的取值范围可以利用其它变量当前的取值范围,按照测试迁移函数来缩紧.而变量v缩紧后的取值范围又可以用来缩紧其它变量的取值范围.例如,对于条件测试约束z=x+y,通过分解,我们可以得到如下3个投影函数:犐z←犐x+y∩犐z,犐x←犐z-y∩犐x,犐y←犐z-y∩犐y.设在测试迁移语句执行之前,x,y,z的取值范围为犐x=[[-5,5],[-1/5,1/5]],犐y=[[1,3],[-∝,+∝]],犐z=[[3,7],[-∝,+∝]].投影犐z←犐x+y∩犐z将导出测试迁移函数z=犐x+y?#X#即z=[[-4,8],[-1/6,1/2]]?#X#,该迁移函数执行后犐z=[[6,7],[-∝,+∝]].同理可得,测试迁移函数执行之后,犐x=[[5,5],[-∝,+∝]],犐y=[[1,2],[-∝,+∝]].4实现与实验结果至此,本文提出的单变量区间线性不等式抽象域extItv都是在实数域上考虑的.在编码实现时,考虑到计算效率,我们使用双精度浮点数开发了该抽象域的原型系统.整个原型系统的浮点实现基于向外舍入的浮点区间算术(即,上界向上舍入;下界向下舍入),从而保证了该实现的可靠性.我们还把该原型实现适配到为数值抽象域提供了公共接口的开源数值抽象域库APRON①上.本文使用支持APRON库的静态分析工具Interproc②来开展程序分析实验.我们对Interproc进行了扩展,使其支持区间形式的输入数据(如带区间系数的表达式和约束).为了评估extItv域的分析精度和效率,本文把基于extItv域的分析与基于经典区间抽象域的分析在结果不变式和性能等方面进行了比较.为了展示扩展区间抽象域extItv的表达能力,①②interproc/Page10下面给出两个简单、有代表性的循环程序以及静态分析器所产生的不变式,如图8、9所示.对于图8中的程序Prog1(即本文图1中的示例程序),基于经典区间抽象域的分析结果将得出结论:程序第5行的赋值语句存在“除零错”.而从基于扩展区间抽象域的分析可知:循环体中变量x的取值范围是{-x-1,x1,[-1,1]x-1},即x=-1∨x=1,由此可以断定程序第5行的赋值语句是安全的.图9图8程序Prog1(左)及产生的不变式(右)图9程序Prog2(左)及产生的不变式(右)本文采用的实验平台为Fedora9Linux操作系统,768MB物理内存,IntelP41.6GHz单核CPU处理器.针对一系列测试程序,表1给出并比较了基于两种抽象域的分析的实验结果.Interproc采用传统的基于抽象解释的不动点迭代方法,并支持“延迟”加宽策略.在本文的实验中,Interproc的加宽算子延迟参数(加宽算子应用之前的迭代次数)设置为程序名变量数以毫秒为单位的计算时间(迭代次数)Prog126.999(4)6.000(4)>Prog2213.998(6)12.999(6)>multiwhile314.997(10)9.999(10)>sas98321.997(5)11.999(5)>policy29.998(4)7.999(4)>bubblesort525.996(7)20.997(7)=heapsort845.993(4)27.996(4)=maccathy9147.998(4)6.999(4)=中的程序Prog2包括两个阶段,首先在内部循环中增加变量y的值,然后再在外部循环中增加变量x的值.基于扩展区间抽象域的分析可以证明在程序Prog2中①处,x的取值范围是{-x20,x19,[-0.1,0.05]x1},即x=-20∨10x19,y的取值范围是{-y20∧[-0.1,0.05]y-1},即y=-20∨y10,这比基于区间抽象域的分析结果要精确.3.测试程序中的Prog1、2,分别对应图8、9所示的例子.表1中的“精度比较”栏比较了两种抽象域的分析结果不变式.其中,“>”表示扩展区间抽象域能得到比区间抽象域更强的值范围信息.“=”表示扩展区间抽象域得到的值范围与区间抽象域一样.如果程序中存在符号未受限制的变量,扩展区间抽象域常能够找到一些有意义的非连通值范围信息,比如表1中的前5个测试程序.另外,从表1可以看出,扩展区间抽象域的计算代价比区间抽象域略高一些,但是总计算时间一般不会超过区间抽象域计算时间的两倍.相比多面体抽象域等关系型数值抽象域而言,扩展区间抽象域仍是一种轻量级的非关系型抽象域.Page115相关工作(1)值范围分析Harrison[1]最先基于区间分析并采用范围传播(rangepropagation)和范围分析(rangeanalysis)两种方法对程序变量进行了值范围分析研究,其中,范围传播因为不是归纳的不能有效处理程序中的循环结构,而范围分析则忽略了循环中的条件结构从而影响了分析的精度.Cousot和Cousot[5]把区间分析纳入到抽象解释框架下并提出了区间抽象域,其中加宽与变窄算子能够有效地加速循环和递归程序结构的不动点计算,并能保证分析的终止性和分析结果的可靠性.基于加宽与变窄算子的分析一般不是得到精确的值范围,而只是精确值范围的上近似.为了弥补区间抽象域所缺失的变量间关系表达能力,Sankaranarayanan等人[11]提出了一个符号范围抽象域(一种受限形式的多面体)来表示和利用程序变量间的关系用以推导程序变量的符号界信息.另一方面,为了避免使用加宽与变窄算子所带来的不精确性,Su与Wagner[12]对数据流等式进行了“严格”分析,针对一类整数范围约束,给出了一个基于图表示的、多项式时间内可以找到最优范围解的算法.Rugina等[13]基于线性规划技术为程序变量(包括指针、数组下标、被访问的存储区域等)提供了一个新的符号界分析框架.这种基于线性规划的方法虽然避免了启发式的加宽/变窄过程,但是提供的只是一个弱的证明系统,因为该方法中线性不等式系统所蕴含的新的结果不等式是通过比较系数来构造的,因此可能产生弱的不变式而不能得到精确的界信息.与上述工作相比,本文的工作属于第一类方法,即采用基于加宽与变窄算子的抽象解释方法来分析变量的值范围信息.本文提出的单变量区间线性不等式抽象域虽然不能表示变量之间的关系,但是可以表示非凸的、非连通的值范围信息.而上述相关工作都主要集中在找到尽量精确的凸的界信息.并且基于线性规划或者符号界的值范围分析算法的时空复杂度一般都比较高,相对而言,本文的扩展区间抽象域与经典的区间抽象域一样,都是一种轻量级、计算效率很高的方法.(2)数值抽象域近30年来,基于抽象解释的程序分析与验证技术取得了长足的发展.该领域已出现了许多表达能力、运行效率各有特色的数值抽象域,包括区间域[5]、凸多面体域[6]、八边形域[8]、区间多面体域[14]等.这些抽象域面向各种不同的数值性质,并在分析精度和计算代价间取得合理折衷.按照表达性质的能力,数值抽象域一般可分为如下3类:非关系型抽象域,只能表示单个变量的性质;关系型抽象域,能够表示任意多个变量间的(某类)任意关系;弱关系型抽象域,只能表达变量间的受限数值关系(比如,限制关系中变量数、变量系数等).本文提出的单变量区间线性不等式抽象域extItv属于非关系型抽象域.非关系型抽象域还包括常量传播(xi=ci)、符号(±xi0)[5]、区间[5]、简单同余(xi≡aimodbi)[15]、区间同余(xi∈[ai,bi]modci)等.目前,绝大部分数值抽象域只能表示凸的(必然是连通的)性质,包括区间域[5]、八边形域[8]、凸多面体域[6]等,很少有抽象域能够天然地表示非凸的性质,例如,max-plus多面体域[16]等.其中,能够天然地表示非连通的性质的抽象域就更少了,例如,同余域[15].而本文提出的extItv域则能够自然地表示某类非连通性质.因此,在程序分析中能够起到不可替代的作用.最近,Chen等人[14]把区间线性代数引入到静态分析中,提出了区间多面体抽象域,作为凸多面体抽象域的区间扩展(本文部分作者参与了文献[14]中所述工作).区间多面体抽象域属于关系型抽象域,可以表示任意多个变量间的区间线性不等式关系.而本文提出的extItv域属于非关系型抽象域,域中每个区间线性不等式约束只涉及1个变量,只能表示单个变量的性质.相对于区间多面体抽象域,extItv域虽然表达能力较弱但是有着较高的计算效率.6总结和进一步工作本文提出了一个新的数值抽象域,称为单变量区间线性不等式抽象域(亦称为扩展区间抽象域,extItv).该抽象域能够表示和操作单变量区间线性不等式约束(形如[a,b]xc).其表达能力强于经典的区间抽象域,还能够天然地表示某类非凸、非连通的性质.同时,其域操作可以基于简单、高效的区间算术来构造.本文实验结果表明:程序分析时,extItv域能够发现一些别的数值抽象域(如区间抽象域)所不能发现的、有意义的非凸或非连通的值范围信息,而且有着较高的计算效率.作为一个轻量级Page12的非关系型抽象域,extItv域计算效率高、可扩展性强并且存在紧致的空间表示,可以在实际大规模的程序分析中得以应用.将来的工作包括使用机器整数来实现extItv抽象域,并把extItv抽象域扩展到区间同余代数上.
