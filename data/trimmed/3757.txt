Page1计数布鲁姆过滤器代数运算田小梅1),2)张大方1)谢鲲1)史长琼1),3)杨晓波1)1)(湖南大学信息科学与工程学院长沙410082)2)(湖南环境生物职业技术学院信息技术系湖南衡阳421005)3)(长沙理工大学计算机与通信工程学院长沙410114)摘要文中探讨计数布鲁姆过滤器的代数运算和集合运算的一致性关系,研究使用计数布鲁姆过滤器代数运算进行集合成员查询的性能.理论分析和实验结果表明,计数布鲁姆过滤器的并、交、补、减、异或运算产生的新过滤器依然保持计数布鲁姆过滤器的特征,支持元素的删除操作,不会出现假阴性,能用于集合并集、交集、补集、差集及对称差的成员查询;当使用两个原始的计数布鲁姆过滤器查询补集、差集及对称差元素时,会存在部分本来属于补集、差集或对称差的元素被判为不属于补集、差集或对称差的问题,而使用计数布鲁姆过滤器代数运算后的过滤器进行补集、差集及对称差成员查询,则不存在上述问题,空间效率能提高一倍,时间效率亦能显著地得到改善.计数布鲁姆过滤器代数运算的使用有利于进一步扩展计数布鲁姆过滤器的应用范围.譬如计数布鲁姆过滤器减运算可用作一种新的集合调和方法,用于分布式系统中大型文件的分发.关键词代数运算;计数布鲁姆过滤器;集合调和;计算机网络;分布式计算1引言自BurtonBloom在20世纪70年代提出之后,布鲁姆过滤器已被广泛用于拼写检查和数据库系统中.近一二十年,伴随着计算机网络的普及和发展,布鲁姆过滤器在网络领域获得了新生,各种布鲁姆过滤器算法的变种和新的应用不断出现[1-11].按布鲁姆过滤器向量空间的构成来看,有两类基本的布鲁姆过滤器:位向量布鲁姆过滤器和计数器向量布鲁姆过滤器.位向量布鲁姆过滤器采用位向量表示数据集合,能支持集合元素的插入、查询操作,如标准布鲁姆过滤器(BloomFilter,BF)[3]、动态布鲁姆过滤器(DynamicBloomFilter,DBF)[5]等.计数器向量布鲁姆过滤器使用计数器向量表示数据集合,既能支持集合元素的插入、查询操作,也能支持元素的删除操作,如计数布鲁姆过滤器(CountingBloomFilter,CBF)[4]、光谱布鲁姆过滤器(SpectralBloomFilter,SBF)[6]等.在使用布鲁姆过滤器查询一个元素是否属于某个集合时,会有一定的假阳性(FalsePositive),也就是说,有可能把不属于这个集合的元素判为属于这个集合,但不存在假阴性(FalseNegative),即不会把属于这个集合的元素判为不属于这个集合[1-2].有时,我们不仅需要查询元素是否属于某集合,还需要查询元素是否不属于某特定集合(即查询某元素是否属于该特定集合的补集,简称补集查询),或者查询元素是否属于集合的交集、并集、差集及对称差.譬如,分布式P2P系统的多关键字搜索(Multi-keywordSearch)模型中最常见的两类查询:And查询、Or查询,这两类查询分别对应求集合交集问题与求集合并集问题;当使用分布式倒排索引技术并用BF表示与关键字匹配的文档列表来实现多关键字搜索时,两类查询则分别对应BF的交运算与并运算,如文献[12],在处理跨节点连接查询时传递BF表示的文档匹配列表,并进行BF的并运算或交运算,以减少信息传输量,提高检索效率.事实上,在多关键字搜索时,还有一类减查询常在各类检索引擎中出现,如查询包含关键字X但不包含关键字Y的网页,此时可以使用布鲁姆过滤器的减运算来支持减查询.又如,在分布式内容分发系统中,假如要将一个大文件从源节点分发到诸多对等节点,节点(设为A)在从源节点下载某些文件块的同时可从其它对等节点(设为B)下载其缺失的文件块,以有效地提高下载速率.这种情况下,首先要找出B中有而A尚未接收到的文件块(即集合的差),然后在节点间仅传送这部分差集文件块即可,免去传送所有文件块的网络开销.此时,通常文件块用布鲁姆过滤器表示,需要借助布鲁姆过滤器来找出集合的差集元素,即差集文件块.集合用布鲁姆过滤器(或计数布鲁姆过滤器)表示后,我们首先想到的方法是使用两个单独的过滤器来查询元素是否属于并集、交集、补集、差集或对称差,称双过滤器查询法.如,双过滤器补集查询法,直接使用集合S的过滤器和全集U的过滤器来查询元素是否属于珚S,其查询逻辑如下:首先使用全集U的过滤器来查询元素是否在U中,如果查询结果为否,则判定元素不属于珚S;如果查询结果为是,则继续使用集合S的过滤器查询元素是否属于S,如果查询结果仍然是肯定的,则认为该元素不属于集合的补集珚S,否则,认定该元素属于集合的补集珚S.在该过程中,由于查询存在如下可能:少量不属于S的元素被判为属于S,即少量原本属于珚S的元素被判为不属于珚S,或者说,在这一直接使用过滤器进行补集查询的过程中出现了假阴性.事实上,两集合用布鲁姆过滤器表示后,如果直接使用两个原始的布鲁姆过滤器查询元素是否属于差集、对称差等,存在与补集查询同样的问题,除存在假阳性外,还存在假阴性,极大地影响查询结果的可靠性,而且,使用两个独立的布鲁姆过滤器查询差集、对称差元素,需对两个过滤器向量进行查找操作,空间效率及时间效率均低.如果使用双过滤器查询法进行并集或交集查询,虽然不存在假阴性,但是需要保存两个单独的过滤器向量,而且查询时需要在两个过滤器向量上进行定位、比较操作,从而影响查询算法的时间、空间效率.由于使用双过滤器法查询补集、差集或对称差元素时存在着前述假阴性问题,因此,我们尝试从布鲁姆过滤器向量运算的角度寻求能解决前述假阴性问题的方法.目前研究布鲁姆过滤器向量运算及应用的工作为数不多[5,13-14].文献[13]指出可用布鲁姆过滤器位向量按位或、按位与得到的向量分别表示并集、交集.文献[5]定义了标准布鲁姆过滤器(BF)Page3的并运算和交运算以及动态布鲁姆过滤器、多维布鲁姆过滤器、多维动态布鲁姆过滤器等位向量布鲁姆过滤器的并运算,且运用BF的并运算构造了一个基于标准布鲁姆过滤器的知情搜索协议(InformedsearchprotocolbasedonBloomfilters).文献[14]研究位向量布鲁姆过滤器代数运算和集合查询的关系,得出结论如下:位向量布鲁姆过滤器的并、交运算能够支持集合并集、交集的元素查询,而BF补、减、异或运算则由于存在较大的假阴性,不能用于集合补集、差集、对称差的元素查询;直接通过并、交运算后的位向量布鲁姆过滤器完成查询操作,与直接使用两个原始的布鲁姆过滤器相比较,可节约位向量的存储空间及位向量的查询次数,提高查询效率.现有工作研究的是位向量布鲁姆过滤器的代数运算,研究结论表明:位向量布鲁姆过滤器并、交运算的使用可推广布鲁姆过滤器的应用范围,简化使用布鲁姆过滤器的系统设计[5,14-15].但是,BF的减、异或、补运算不能用于差集、对称差、补集的元素查询[14],而CBF支持元素的删除操作,计数器值可实现减法运算,CBF的应用优势除可用于动态更新的应用场合[4]外,是否还具有其它方面的优势呢?譬如,是否可对CBF计数器向量进行并、交、减、异或及补运算?CBF的减、异或及补运算是否能用于差集、对称差及补集的元素查询?这就是本文的研究目的.本文通过合理地定义计数器向量的并、交、补、减、异或代数运算,使得代数运算后的CBF均能较准确地反映相应集合,不会出现假阴性,可以使用CBF的并(交、补、减、异或)运算进行集合的并集(交集、补集、差集、对称差)查询;使用CBF代数运算进行补集(差集、对称差)查询,与使用两个原始的CBF进行查询的方法相比,不存在假阴性,空间效率能提高一倍,时间效率亦能显著地得到改善.本文以CBF减运算为例,将之应用于分布式计算领域中的集合调和过程,由于CBF减运算后得到的过滤器在查询差集时不存在假阴性,使用该过滤器查询时能找出所有差集元素,从而得到完整的集合并集.仿真实验证明,使用CBF减运算的集合调和法是一种简单、可靠、高效的调和方法.CBF减运算在分布式集合调和中的成功应用,说明本文的CBF代数运算在分布式系统中具有广泛的应用潜力.本文第2节概述计数布鲁姆过滤器算法;第3节定义计数布鲁姆过滤器并、交、补、减、异或运算;第4节对计数布鲁姆过滤器代数运算和集合运算的关系作了数学分析和证明;第5节是计数布鲁姆过滤器代数运算的性能分析及模拟实验部分;第6节是计数布鲁姆过滤器代数运算的应用实例———使用CBF减运算的集合调和;第7节是本文工作的总结及下一步工作重点的介绍.2计数布鲁姆过滤器查询算法2.1标准布鲁姆过滤器标准布鲁姆过滤器[3]查询算法核心是一个长度为m的位向量和一个由k个Hash函数构成的Hash函数组.n个元素的数据集合S={s1,s2,…,sn}通过k个Hash函数h1,h2,…,hk映射到位向量犅犉=(b1b2b3…bm)中.位向量犅犉就是集合S的布鲁姆过滤器表示,记为犅犉(S)m,k,或简记为犅犉(S).各Hash函数相互独立且函数的取值范围为{0,1,2,…,m-1}在初始化时,犅犉的每位都为0.当元素x插入集合时,计算x对应的k个位串索引值h1(x),h2(x),…,hk(x)(即Hash地址)将犅犉向量相应位置1(bhj(x)=1,1jk),完成元素的插入.查询给定的元素x是否属于集合S首先计算x对应的k个位串索引值(h1(x),h2(x),…,hk(x)),然后检查向量犅犉的k个位置是否全为1,若全1,则认为x属于集合S中;否则,只要此k个位置中任一位为0,则x必定不属于集合S.标准布鲁姆过滤器存在假阳性,可能将不属于集合的元素判成属于集合,其假阳性概率为[1,3]当集合规模n和向量空间m一定的情况下,使布鲁姆过滤器查询假阳性概率达最小的k值为使用标准布鲁姆过滤器完成集合存储m比特的位向量可以表示n个元素的集合,每个元素平均使用m/n位,大大节约存储空间.使用标准布鲁姆Page4过滤器完成单个元素的成员查询,需进行k次Hash函数的计算,并进行k次位的查询,其时间复杂度为O(k),与集合中元素个数n无关.布鲁姆过滤器空间简洁、查询效率高的特点,正是其得以广泛应用的原因.标准布鲁姆过滤器的一个缺点是不支持集合元素的删除操作.由于标准布鲁姆过滤器不处理碰撞,有可能多个元素都映射到了同一Hash位,因此如果执行删除操作将此Hash位清零,会出现假阴性,将原本属于集合的元素判定为不属于集合.从集合的布鲁姆过滤器表示算法不难看出,集合同它的布鲁姆过滤器表示所蕴涵的信息最初是一致的,此时不会发生假阴性判定.当布鲁姆过滤器执行了对数据元素的不正确删除操作时,破坏了集合同其布鲁姆过滤器表示之间的一致性,从而出现假阴性判定.2.2计数布鲁姆过滤器计数布鲁姆过滤器[4]将标准布鲁姆过滤器位向量的每一位扩展为一个r位的计数器,在插入元素时将对应的k个计数器的值分别加1,删除元素时将对应的k个计数器的值分别减1.n个元素的数据集合S={s1,s2,…,sn}通过k个Hash函数h1,h2,…,hk映射到由m个计数器组成的计数器向量犆犅犉=(C1C2C3…Cm)中.计数器向量犆犅犉就是集合S的计数布鲁姆过滤器表示,记为犆犅犉(S)m,k,或简记为犆犅犉(S).在初始化时,犆犅犉的每个计数器都为0.当元素x插入集合时,计算x对应的k个计数器索引值h1(x),h2(x),…,hk(x)(即Hash地址)将犆犅犉向量相应计数器加1(Chj(x)++,1jk),完成元素的插入.查询给定的元素x是否属于集合S,首先计算x对应的k个计数器索引值h1(x),h2(x),…,hk(x),然后检查计数器向量犆犅犉对应k个计数器(Chj(x),1jk)的值,若全大于等于1,则认为x属于集合S中;否则,只要此k个计数器中任一计数器为0,则x必定不属于集合S.当要从计数布鲁姆过滤器删除元素x时,计算出x对应的k个计数器索引值后将犆犅犉向量中相应计数器进行减1运算(Chj(x)--,1jk)即可.由于计数布鲁姆过滤器执行删除操作时不是将元素映射的计数器采取清零操作,而是将相应计数器减1,不会影响映射到同一Hash地址的其它元素的判定,从而不会出现假阴性.计数布鲁姆过滤器通过占用r倍于标准布鲁姆过滤器的存储空间的代价,使得布鲁姆过滤器除了支持元素的插入、查询操作外,还能支持元素的删除操作.因为在元素插入时,会使计数布鲁姆过滤器对应计数器加1,而计数器是由有限的比特位组成,因此可能会造成计数器溢出.为避免计数器溢出,应选择适当的计数器位数r.下面通过计算溢出概率来获得通用的计数器长度设计.我们先计算第i个计数器增加j次的概率:上式右端的表达式中,第1个分量表示从nk次Hash中选择j次,第2个分量表示j次Hash都选中了第i个计数器,第3个分量表示其它nk-j次Hash都没有选中第i个计数器.因此,第i个计数器的值大于或等于j的概率可以限定为当m/n值固定时,k的最优值为(ln2)m/n,如果限制k(ln2)m/n,就可以得到任意计数器值大于或等于j的概率:P(Max(Ci)j)meln2()j或溢出.计数器溢出概率为如果r=4,那么当计数器的值达到16时就会P(Max(Ci)16)1.37×10-15×m.由上式可知,溢出概率非常小,对于大多数应用程序来说,取r=4就足够了[4].因此,本文的计数布鲁姆过滤器使用4位计数器.计数布鲁姆过滤器同样存在假阳性,其假阳性概率与标准布鲁姆过滤器的相同,为计数布鲁姆过滤器查询算法的出现解决了标准布鲁姆过滤器不支持元素的删除这一问题,同时依然保留标准布鲁姆过滤器实现简单、查询效率高的优点.由于计数布鲁姆过滤器具有支持元素删除操作Page5的优点,自其提出后,涌现了很多计数布鲁姆过滤器的扩展算法和具体应用实例.譬如,光谱布鲁姆过滤器[6]扩展了计数布鲁姆过滤器,除支持成员查询外还支持频数查询,解决了计数器大小变动带来的动态存储问题,但是引入了复杂的索引结构,每个计数器的访问变得复杂而耗时.为此,文献[7]提出了动态计数过滤器,既支持元素出现频数查询,结构又相对简单.文献[11]则旨在进一步减少计数布鲁姆过滤器所占存储空间,研究计数器溢出条件,运用层次化设计思想和哈夫曼编码,设计出新的多层压缩计数布鲁姆过滤器以适用于网络处理器的应用场合.文献[16]中的d-left计数布鲁姆过滤器使用d-lefthashing解决Hash表的负载平衡问题.计数布鲁姆过滤器即使分配较大的Hash空间,由于按最坏情况分配计数器容量,造成大量Hash空间闲置.使用d-lefthashing后可以让存储的信息分布均匀,更加紧凑,从而用更小的空间(存储空间可减少2倍以上)存储同样多的信息.3计数布鲁姆过滤器代数运算定义1(元素的计数布鲁姆过滤器表示).对于全集U中的任意元素x,通过k个Hash函数,映射到m个计数器(位数为r)的计数布鲁姆过滤器向量犆犅犉m,k(CBFm,k后,生成新向量(CBF(x)m,k1,…,CBF(x)m,kCBF(x)m,km),记为犆犅犉(x)m,k,其中第i个计数器的值变化如下:犆犅犉(x)m,k(CBFm,ki,烅烄.CBFm,k烆定义2(集合的计数布鲁姆过滤器表示).对于全集U中的任意子集S={s1,s2,…,sn},S中所有元素都通过k个Hash函数映射到计数器个数为m的计数布鲁姆过滤器向量中,向量记为犆犅犉(S)m,k,其中第i个计数器CBF(S)m,k定义3(同源计数布鲁姆过滤器).对于全集U中的任意两子集S1和S2,其计数布鲁姆过滤器表示分别为犆犅犉(S1)m,k,犆犅犉(S2)m,k,若它们使用的k个Hash函数为同一组Hash函数,计数器个数m相同,且计数器大小r相等,则称两计数布鲁姆过滤器犆犅犉(S1)m,k,犆犅犉(S2)m,k同源.下文讨论的均为同源计数布鲁姆过滤器.定义4(同源计数布鲁姆过滤器的补运算).对于计数布鲁姆过滤器犆犅犉(S)m,k,其补运算犆犅犉(S)m,k={Ci|Ci=CBF(U)m,k1,…,m},U为全集.定义5(同源计数布鲁姆过滤器的交运算).对于两同源计数布鲁姆过滤器犆犅犉(S1)m,k与犆犅犉(S2)m,k,其交运算犆犅犉(S1)m,k∩犆犅犉(S2)m,k={Ci|Ci=min(CBF(S1)m,k定义6(同源计数布鲁姆过滤器的减运算).对于两同源计数布鲁姆过滤器犆犅犉(S1)m,k与犆犅犉(S2)m,k,其减运算:犆犅犉(S1)m,k\犆犅犉(S2)m,k=犆犅犉(S1)m,k∩犆犅犉(S2)m,k={Ci|Ci=min(CBF(S1)m,kCBF(S2)m,k定义7(同源计数布鲁姆过滤器的并运算).两同源计数布鲁姆过滤器犆犅犉(S1)m,k与犆犅犉(S2)m,k的并运算如下:Page6犆犅犉(S1)m,k∪犆犅犉(S2)m,k={Ci|Ci=CBF(S1)m,k(犆犅犉(S2)m,k∩犆犅犉(S1)m,k)i}={Ci|Ci=CBF(S1)m,kCBF(S1)m,k(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)i}={Ci|Ci=CBF(S2)m,kmin(CBF(S1)m,k定义8(同源计数布鲁姆过滤器的异或运算).对于两同源计数布鲁姆过滤器犆犅犉(S1)m,k与犆犅犉(S2)m,k,其异或运算:犆犅犉(S1)m,k犆犅犉(S2)m,k=(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)∪(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)=(犆犅犉(S1)m,k\犆犅犉(S2)m,k)∪(犆犅犉(S2)m,k\犆犅犉(S1)m,k)={Ci|Ci=min(CBF(S1)m,k(CBF(U)m,k(CBF(U)m,k4计数布鲁姆过滤器代数运算和集合运算的关系定义9(同源计数布鲁姆过滤器的大小关系).两同源计数布鲁姆过滤器犆犅犉(S1)m,k、犆犅犉(S2)m,k,若i∈{1,…,m},都有CBF(S1)m,k则称犆犅犉(S1)m,k大于等于犆犅犉(S2)m,k,记为犆犅犉(S1)m,k犆犅犉(S2)m,k;若i∈{1,…,m},都有CBF(S1)m,k于犆犅犉(S2)m,k,记为犆犅犉(S1)m,k犆犅犉(S2)m,k;若i∈{1,…,m},都有CBF(S1)m,k称犆犅犉(S1)m,k等于犆犅犉(S2)m,k,记为犆犅犉(S1)m,k=犆犅犉(S2)m,k.定理1.对于全集中的任意子集S1、S2,其同源计数布鲁姆过滤器表示分别为犆犅犉(S1)m,k、犆犅犉(S2)m,k,若S1S2,则有犆犅犉(S1)m,k犆犅犉(S2)m,k.证明.不失一般性,假设(S1∩S2)中元素先同时插入犆犅犉(S1)m,k,犆犅犉(S2)m,k中,此时CBF(S1)m,kCBF(S2)m,k插入犆犅犉(S2)m,k中,因S1S2,S2\S1为空或不空,则CBF(S1)m,k犆犅犉(S1)m,k犆犅犉(S2)m,k.定理得证.证毕.4.1计数布鲁姆过滤器补运算与补集的计数布鲁姆过滤器表示定理2.对于全集U中的任意子集S及补集珚S,犆犅犉(S)m,k、犆犅犉(珚S)m,k分别为它们的同源计数布鲁姆过滤器表示,则犆犅犉(珚S)m,k=犆犅犉(S)m,k={Ci|Ci=CBF(U)m,k证明.由于计数布鲁姆过滤器支持元素的删除操作,因此补集珚S的布鲁姆过滤器向量可以通过如下方法得到:先将全集U中元素映射到计数布鲁姆过滤器,得犆犅犉(U)m,k,然后从犆犅犉(U)m,k中逐个删除S中元素,所得计数布鲁姆过滤器为犆犅犉(珚S)m,k,即犆犅犉(珚S)m,k={Ci|Ci=CBF(U)m,k而由同源计数布鲁姆过滤器补运算的定义:犆犅犉(S)m,k={Ci|Ci=CBF(U)m,k综上,可得犆犅犉(珚S)m,k=犆犅犉(S)m,k={Ci|Ci=CBF(U)m,k定理得证.定理3.对于全集U中的任意子集S及补集珚S,令集合规模|U|=u,|S|=n0,|珚S|=u-n0,计数布鲁姆过滤器补运算犆犅犉(S)m,k的假阳性概率与犆犅犉(珔S)m,k的假阳性概率相等,均为(1-e-k(u-n0)/m)k.证明.由于补集珚S的计数布鲁姆过滤器表示(犆犅犉(珚S)m,k)其假阳性概率:fp犆犅犉m,u-n0,k=(1-e-k(u-n0)/m)k,且由定理2知犆犅犉(S)m,k=犆犅犉(珚S)m,k.故犆犅犉(S)m,k假阳性概率也等于(1-e-k(u-n0)/m)k.Page7定理得证.4.2计数布鲁姆过滤器交运算与交集的计数布鲁姆过滤器表示定理4.对于全集U中的任意子集S1、S2,犆犅犉(S1)m,k、犆犅犉(S2)m,k分别为它们的同源计数布鲁姆过滤器表示,则(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)犆犅犉(S1∩S2)m,k.证明.同源计数布鲁姆过滤器交运算与交集的计数布鲁姆过滤器的关系:设CBF(S1∩S2)m,k理1有CBF(S1)m,kim),min(CBF(S1)m,k(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)ic若CBF(S1∩S2)m,ki=c,则必有(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)ic,1im.即(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)犆犅犉(S1∩S2)m,k.定理得证.定理5.对于全集U中的任意子集S1、S2,令集合规模|S1|=n1,|S2|=n2,|S1∩S2|=n3,犆犅犉(S1)m,k、犆犅犉(S2)m,k分别为S1、S2的同源计数布鲁姆过滤器表示,则两过滤器交运算犆犅犉(S1)m,k∩犆犅犉(S2)m,k假阳性概率等于(1-e-kn1/m-e-kn2/m+e-k(n1+n2-n3)/m)k.证明.同源计数布鲁姆过滤器交运算后其值(1)x∈S1∩S2,则j(1jk),CBF(S1)m,k分析如下:且CBF(S2)m,kCBF(S2)m,k1x∈S1∩S2,(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)hj(x)1,1jk.(2)若x∈S1\(S1∩S2),y∈S2\(S1∩S2),存在j(1jk)和j(1jk),hj(x)=hj(y)=i,使CBF(S1)m,kCBF(S2)m,ki=hj(x)=hj(y).…,m.0的概率p等于:(3)其它,(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)i=0,i=1,由以上分析可知,(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)i非1-1-1()m(1-1-1()m(e-k(n1+n2-n3)/m.故交运算犆犅犉(S1)m,k∩犆犅犉(S2)m,k的假阳性概率为m,n3,k=pk=(1-e-kn1/m-e-kn2/m+e-k(n1+n2-n3)/m)k.fp犆犅犉∩定理得证.交集的计数布鲁姆过滤器中,第i个计数器(CBF(S1∩S2)m,k为p1,由交运算取值分析,(犆犅犉(S1)m,k∩犆犅犉(S2)m,k)i非0的概率p为1-1-1()m(1-1-1()m(证明.若CBF(S1\S2)m,k从而有pkpk性概率大于等于犆犅犉(S1∩S2)m,k假阳性概率.4.3计数布鲁姆过滤器减运算与差集的计数布鲁姆过滤器表示定理6.对于全集U中的任意子集S1、S2,犆犅犉(S1)m,k、犆犅犉(S2)m,k分别为它们的同源计数布鲁姆过滤器表示,则(犆犅犉(S1)m,k\犆犅犉(S2)m,k)犆犅犉(S1\S2)m,k.(S1\S2)S1,(S1\S2)珚S2,则据定理1有CBF(S1)m,kmin(CBF(S1)m,kc,1im,即(犆犅犉(S1)m,k\犆犅犉(S2)m,k)ic若CBF(S1\S2)m,k犆犅犉(S2)m,k)ic,1im.因此,(犆犅犉(S1)m,k\犆犅犉(S2)m,k)犆犅犉(S1\S2)m,k.定理得证.定理7.对于全集U中的任意子集S1、S2,令集合规模|U|=u,|S1|=n1,|S2|=n2,|S1∩S2|=n3,犆犅犉(S1)m,k、犆犅犉(S2)m,k分别为S1、S2的同源计数布鲁姆过滤器表示,则两过滤器减运算(犆犅犉(S1)m,k\犆犅犉(S2)m,k)假阳性概率为fp犆犅犉\m,n1-n3,k=(1-e-kn1/m-e-k(u-n2)/m+e-k(u-n2+n3)/m)k.证明.同源计数布鲁姆过滤器减运算取值情况分析:(1)x∈S1\S2,则j(1jk),CBF(S1)m,k1;且x∈S1\S2→x∈U∩xS2→(CBF(U)m,kCBF(S2)m,k(CBF(U)m,k(犆犅犉(S1)m,k\犆犅犉(S2)m,k)hj(x)1x∈S1\S2,有(犆犅犉(S1)m,k\犆犅犉(S2)m,k)hj(x)1,1jk.(2)当x∈S1∩S2,y∈珚S1∩珚S2,存在j(1jk)和Page8j(1jk),hj(x)=hj(y)=i,使CBF(S1)m,kCBF(珔S2)m,kCBF(S2)m,ki=hj(x)=hj(y).[1,m].(3)其它,(犆犅犉(S1)m,k\犆犅犉(S2)m,k)i=0,i∈综上,(犆犅犉(S1)m,k\犆犅犉(S2)m,k)i非0的概率:p=1-1-1()m1-1-1()m(e-kn1/m-e-k(u-n2)/m+e-k(u-n2+n3)/m,故犆犅犉(S1)m,k\犆犅犉(S2)m,k的假阳性概率为fp犆犅犉\m,n1-n3,k=pk=(1-e-kn1/m-e-k(u-n2)/m+e-k(u-n2+n3)/m)k.差集的计数布鲁姆过滤器中,第i个计数器定理得证.(CBF(S1\S2)m,k设为p1,而(犆犅犉(S1)m,k\犆犅犉(S2)m,k)i非0的概率p为1-1-1()m1-1-1()m(p1,从而pkp1k,即(犆犅犉(S1)m,k\犆犅犉(S2)m,k)的假阳性概率大于等于(犆犅犉(S1\S2)m,k)假阳性概率.4.4计数布鲁姆过滤器并运算与并集的计数布鲁姆过滤器表示定理8.对于全集中的任意子集S1、S2,其同源计数布鲁姆过滤器表示分别为犆犅犉(S1)m,k、犆犅犉(S2)m,k,若S1∩S2=,则有犆犅犉(S1)m,k∪犆犅犉(S2)m,k=犆犅犉(S1∪S2)m,k={Ci|Ci=CBF(S1)m,k证明.步1,计算犆犅犉(S1)m,k∪犆犅犉(S2)m,k.由同源计数布鲁姆过滤器并运算的定义得犆犅犉(S1)m,k∪犆犅犉(S2)m,k={Ci|Ci=CBF(S1)m,kmin(CBF(S2)m,ki=1,…,m}已知S1∩S2=,得S2珚S1,由定理1及定理2得CBF(S2)m,k数布鲁姆过滤器补运算的定义,得CBF(S2)m,k综合式(1)、(2),得犆犅犉(S1)m,k∪犆犅犉(S2)m,k={Ci|Ci=CBF(S1)m,k步2,计算犆犅犉(S1∪S2)m,k.因S1∩S2=,故并集的布鲁姆过滤器向量可先后将S1、S2中元素插入同一个布鲁姆过滤器以通过如下方法得到:中.即有犆犅犉(S1∪S2)m,k={Ci|Ci=CBF(S1)m,k由式(3)、(4)得犆犅犉(S1)m,k∪犆犅犉(S2)m,k=犆犅犉(S1∪S2)m,k={Ci|Ci=CBF(S1)m,k定理得证.定理9.对于全集U中的任意子集S1、S2,犆犅犉(S1)m,k、犆犅犉(S2)m,k分别为它们的同源计数布鲁姆过滤器表示,则(犆犅犉(S1)m,k∪犆犅犉(S2)m,k)犆犅犉(S1∪S2)m,k.证明.由同源计数布鲁姆过滤器并运算的定义,有i∈[1,m],(犆犅犉(S1)m,k∪犆犅犉(S2)m,k)i=CBF(S1)m,kCBF(S1)m,kmin(CBF(S2)m,kCBF(S2∩珚S1)m,k犆犅犉(S2)m,k)iCBF(S1)m,k因S1∩(S2∩珚S1)=,由定理8得CBF(S1)m,kCBF(S1∪(S2∩珔S1))m,k定理得证.定理10.对于全集中的任意子集S1、S2以及它们的并集S1∪S2,其同源计数布鲁姆过滤器表示分别为犆犅犉(S1)m,k、犆犅犉(S2)m,k、犆犅犉(S1∪S2)m,k,令集合规模|S1|=n1,|S2|=n2,|S1∩S2|=n3,犆犅犉(S1)m,k∪犆犅犉(S2)m,k与犆犅犉(S1∪S2)m,k的假阳性概率相同证明.对于两计数布鲁姆过滤器,如果其计数器向量中非0计数器的位置一一对应,则其假阳性概率相同.(1)x∈S1或者x∈S2→CBF(S1)m,kCBF(S2)m,k∪犆犅犉(S2)m,k)hj(x)1,j=1,…,k;又x∈S1或者x∈Page9(2)x∈S1∪S2→CBF(S1∪S2)m,kS2→x∈S1∪S2→CBF(S1∪S2)m,khj(x)1,j=1,…,k,从而有x∈S1或x∈S2,(犆犅犉(S1)m,k∪犆犅犉(S2)m,k)hj(x)1CBF(S1∪S2)m,k1,…,k;又x∈S1∪S2→x∈S1orx∈S2→CBF(S1)m,k定义7可得(犆犅犉(S1)m,k∪犆犅犉(S2)m,k)hj(x)1.从而有x∈S1∪S2,CBF(S1∪S2)m,k犆犅犉(S2)m,k)hj(x)1.由(1)、(2)可知:犆犅犉(S1)m,k∪犆犅犉(S2)m,k与犆犅犉(S1∪S2)m,k非0计数器的位置一一对应,从而其假阳性概率相同.而犆犅犉(S1∪S2)m,k的假阳性概率为(1-e-k(n1+n2-n3)/m)k,从而犆犅犉(S1)m,k∪犆犅犉(S2)m,k的假阳性概率也为(1-e-k(n1+n2-n3)/m)k.定理得证.4.5计数布鲁姆过滤器异或运算与对称差的计数布鲁姆过滤器表示定理11.对于全集U中的任意子集S1、S2,犆犅犉(S1)m,k、犆犅犉(S2)m,k分别为它们的同源计数布鲁姆过滤器表示,则(犆犅犉(S1)m,k犆犅犉(S2)m,k)犆犅犉(S1S2)m,k.证明.同源计数布鲁姆过滤器异或运算与对称差的计数布鲁姆过滤器的关系如下:设CBF(S1S2)m,k(CBF(S1\S2)m,k→(犆犅犉(S1)m,k犆犅犉(S2)m,k)i=((犆犅犉(S1)m,k\犆犅犉(S2)m,k)∪=(犆犅犉(S1)m,k\犆犅犉(S2)m,k)i+CBF(S1\S2)m,k(犆犅犉(S1)m,k犆犅犉(S2)m,k)犆犅犉(S1S2)m,k.定理12.对于全集中的任意子集S1、S2,其同源计数布鲁姆过滤器表示分别为犆犅犉(S1)m,k,犆犅犉(S2)m,k,则犆犅犉(S1)m,k犆犅犉(S2)m,k的假阳性概率fp犆犅犉m,n1+n2-2n3,k=(1-e-k(n1+n2-n3)/m-e-k(u-n3)/m+e-ku/m)k.证明.同源计数布鲁姆过滤器异或运算后任(1)x∈S1S2,则CBF(S1S2)m,k意计数器可能取值分析如下:1jk;x∈S1S2→x∈S1\S2或x∈S2\S1→CBF(S1\S2)m,k1,…,k,由定理8可得(犆犅犉(S1)m,k犆犅犉(S2)m,k)hj(x)=((犆犅犉(S1)m,k\犆犅犉(S2)m,k)∪(犆犅犉(S2)m,k\犆犅犉(S1)m,k))hj(x)=min(CBF(S1)m,kmin(CBF(S2)m,kCBF(S1\S2)m,kj=1,…,k.x∈S1S2,(犆犅犉(S1)m,k犆犅犉(S2)m,k)hj(x)1,1jk.(2)当x∈S1∩S2,y∈珚S1∩珚S2,存在j(1jk)和j(1jk),hj(x)=hj(y)=i,使得min(CBF(S1)m,k或min(CBF(S2)m,k(S1)m,k1,…,m.hj(y)))1,即(犆犅犉(S1)m,k犆犅犉(S2)m,k)i1.(3)其它,(犆犅犉(S1)m,k犆犅犉(S2)m,k)i=0,i=由以上分析可得,(犆犅犉(S1)m,k犆犅犉(S2)m,k)i=1-e-k(n1+n2-n3)/m-e-k(u-n3)/m+e-ku/m.故异或运算犆犅犉(S1)m,k犆犅犉(S2)m,k的查询假阳性概率为(1-e-k(n1+n2-n3)/m-e-k(u-n3)/m+e-ku/m)k.定理得证.分析可知:(犆犅犉(S1)m,k犆犅犉(S2)m,k)i非0的概率pp1,从而pkpk假阳性概率大于等于犆犅犉(S1S2)m,k的假阳性概率.定理13.对于全集中的任意子集S1、S2,其同源计数布鲁姆过滤器表示分别为犆犅犉(S1)m,k,犆犅犉(S2)m,k,则同源计数布鲁姆过滤器进行补、交、减、并及异或运算后,分别支持补集、交集、差集、并集及对称差集合元素的删除操作,假阴性概率均等于0.证明.为便于叙述,计数布鲁姆过滤器代数运算用犆犅犉(S1)m,kX犆犅犉(S2)m,k(X∈{∪,∩,\,})表示,其中犆犅犉(S2)m,k=犆犅犉(U)m,k\犆犅犉(S2)m,k;集合代数运算后的计数布鲁姆过滤器用犆犅犉(S1XS2)m,k(X∈{∪,∩,\,})表示,其中补集的计数布鲁姆非0的概率为p=1-1-1()m(1-1-1()m(CBF(S1S2)m,k1-1()mPage10(1)计数布鲁姆过滤器补运算:由定理2,知犆犅犉(S)m,k=犆犅犉(珚S)m,k,而犆犅犉(珚S)m,k不存在假阴性,且能支持补集珚S元素的删除操作,故犆犅犉(S)m,k假阴性概率等于0,亦能支持补集珚S元素的删除操作.(2)计数布鲁姆过滤器交、减、并、异或运算:计数布鲁姆过滤器只有在删除元素时计数器本该非0而不正确地置为0才会出现假阴性,由定理4、定理6、定理9、定理11知(犆犅犉(S1)m,kX犆犅犉(S2)m,k)犆犅犉(S1XS2)m,k(X∈{∪,∩,\,}),从而在犆犅犉(S1)m,kX犆犅犉(S2)m,k上可完成集合(S1XS2)中元素的删除操作,且犆犅犉(S1)m,kX犆犅犉(S2)m,k的假阴性小于等于犆犅犉(S1XS2)m,k,又犆犅犉(S1XS2)m,k假阴性概率等于0,则犆犅犉(S1)m,kX犆犅犉(S2)m,k假阴性概率只能等于0.综上,同源计数布鲁姆过滤器进行补、交、减、并及异或运算后,分别支持补集、交集、差集、并集及对称差集合元素的删除操作,假阴性概率均等于0.定理得证.5性能分析与模拟实验5.1计数布鲁姆过滤器代数运算与集合代数运算的一致性首先进行仿真实验验证犆犅犉(S1)m,kX犆犅犉(S2)m,k与犆犅犉(S1XS2)m,k之间的一致性.实验中采用英文单词或词组作集合的数据元素,并随机产生.全集规模u等于12000.由全集再随机产生子集S1、S2和表1计数布鲁姆过滤器查询假阳性实测值与期望值fp/%mk犆犅犉(S1)犆犅犉(S2)犆犅犉(珚S2)犆犅犉(S2)犆犅犉(S∩)犆犅犉∩犆犅犉(S\)犆犅犉\犆犅犉(S∪)犆犅犉∪犆犅犉(S)犆犅犉实测值3276847.26727.30007.29837.29830.22971.23602.26952.997524.66724.66715.17516.936期望值3276847.27007.27007.27007.27000.22021.23762.22732.969524.70024.70015.10316.890实测值3276868.87558.82308.78238.78230.08381.46371.96533.247235.16535.16520.79124.514期望值3276868.77978.77978.77978.77970.08311.44611.96023.234435.06935.06920.66224.423实测值6553640.88920.87850.87450.87450.01670.05720.22180.26774.38134.38132.23202.4233期望值6553640.88420.88420.88420.88420.01740.05990.22020.26544.35574.35572.22732.4202实测值6553660.56520.56620.57620.57620.00120.02050.08800.12074.66784.66781.95352.2793期望值6553660.57010.57010.57010.57010.00220.02200.08310.12024.65144.65141.96022.2855实测值13107240.08370.08220.07400.07400.00130.00300.01630.01780.48700.48700.22080.2328期望值13107240.07840.07840.07840.07840.00120.00260.01740.01940.47850.47850.22020.2316实测值13107260.02350.01870.02100.02105.00e-50.00020.00370.00400.25520.25520.08570.0958期望值13107260.01920.01920.01920.01924.48e-50.00020.00220.00280.24560.24560.08310.0922(2)所有fp实测值均与计算得到的期望值相吻由表1可以看出:合,验证了定理3、定理5、定理7、定理10和定理12.测值相等,结果与定理2一致.(3)犆犅犉(S1)m,k∩犆犅犉(S2)m,k假阳性值大于(1)犆犅犉(S2)m,k与犆犅犉(珚S2)m,k的查询假阳性实S1∩S2,两子集规模均为6000,交集S1∩S2的规模为2000.CBF计数器位数r=4.因为BF或CBF经常使用硬件实现,为便于布鲁姆过滤器的硬件实现,向量大小m以取值2x为宜,实验中我们取m={32768,65536,131072}.Hash地址个数k={4,6},k值取得不大,是为了减少Hash函数的计算工作量.根据上述设置,单个CBF假阳性值在0.01%~10%之间变化.采用目前应用最广泛的Hash算法SHA1算法[17]作为Hash函数,将SHA1Hash函数产生的160位消息摘要作为布鲁姆过滤器的Hash地址,其具体作法如下:首先计算单个Hash地址所必需的消息摘要位数AA=log2m,m(160=T>1,即一次SHA1算法产生的160位消息摘要位串不够k个Hash地址所需的位串时,则将集合中各字符串拼接q次(q依次取1,2,…,T)作为SHA1Hash函数的输入串进行Hash,得到T×160位消息摘要位串,多于A×k位的消息摘要位串则丢弃不要.根据前述实验设置,仅需调用一次SHA1算法即可产生元素相应的k个Hash地址.表1中,fp期望值直接通过本文假阳性概率公式计算而得;fp实测值是不属于全集的6000个元素在相关过滤器上查询结果的统计值,即先统计被误判的元素个数count,再将count除以6000,即得fp实测值;fn实测值则使用集合S作为测试数据集,统计假阴性比率.模拟实验中所有fn实测值均为0,与前面理论分析结果(定理13)一致.表1列出了部分实验结果,假阳性实测值取100次实验数据的平均值,用百分比表示.Page11犆犅犉(S1∩S2)m,k假阳性值,与定理5的分析是一致的.又因犆犅犉(S1)m,k∩犆犅犉(S2)m,k假阳性值高于犆犅犉(S1∩S2)m,k的必要前提就是犆犅犉(S1)m,k∩犆犅犉(S2)m,k犆犅犉(S1∩S2)m,k,从而也间接验证了定理4的结论是正确的.(4)犆犅犉(S1)m,k\犆犅犉(S2)m,k假阳性值大于犆犅犉(S1\S2)m,k假阳性值,验证了定理6和定理7.(5)犆犅犉(S1)m,k∪犆犅犉(S2)m,k与犆犅犉(S1∪S2)m,k的查询假阳性实测值相等,结果与定理10一致.(6)犆犅犉(S1)m,k犆犅犉(S2)m,k假阳性率大于犆犅犉(S1S2)m,k假阳性率,验证了定理11和定理12的结论.与犆犅犉(S1XS2)m,k相比较,同源计数布鲁姆过滤器补运算和并运算后,其假阳性概率不变,交、减、异或运算后,假阳性概率则稍有增加;同源计数布鲁姆过滤器的并、交、补、减、异或运算均不会出现假阴性,能够支持元素的删除操作,运算后仍然符合计数布鲁姆过滤器的特征;犆犅犉(S1)m,kX犆犅犉(S2)m,k与犆犅犉(S1XS2)m,k之间的一致性程度较高,能够使用犆犅犉(S1)m,kX犆犅犉(S2)m,k完成(S1XS2)元素的成员查询(下称代数法查询).如代数法并集查询使用CBF并运算犆犅犉(S1)m,k∪犆犅犉(S2)m,k查询元素x是否属于并集(S1∪S2),其查询过程:先计算x的k个Hash值h1(x),h2(x),…,hk(x),再检查对应计数器((犆犅犉(S1)m,k∪犆犅犉(S2)m,k)hj(x),j=1,…,k)的值,若全大于等于1,则判定元素x属于并集(S1∪S2),否则,判定x不属于并集.上述结论同样适用于其它计数器向量布鲁姆过滤器,如光谱布鲁姆过滤器和动态计数过滤器等.5.2CBF代数法查询与双CBF法查询的性能比较使用两个原始的计数布鲁姆过滤器(犆犅犉(S1)m,k,犆犅犉(S2)m,k)进行(S1XS2)元素的成员查询称双CBF(doubleCBFs)法查询.如双CBF法查询元素x是否属于并集(S1∪S2)(简称双CBF法并集查询),其查询过程:分别用犆犅犉(S1)m,k和犆犅犉(S2)m,k查询x是否属于S1和S2.若查询返回结果同为假,则判定x不属于并集(S1∪S2),否则,判定x属于并集.本节从假阳性、假阴性、时间复杂度、空间复杂度4个方面对代数法查询与双CBF法查询的性能进行评估比较.设|U|=u,|S1|=n1,|S2|=n2,|S1∩S2|=n3.实验中取n1=n2=6000,u=12000,r=4,m={32768,65536,131072},k={4,6},此时,单个CBF假阳性值在0.01%~10%之间变化.令α=n3/n1,α的取值范围:{1/3,1/2,2/3},分别对应对称差规模较大、中等、较小的情形.fp值与fn值的统计方法与5.1节相同.实验结果为100次实验数据的平均值,所有fp值与fn值均为百分比值.5.2.1交集查询(1)假阳性.双CBF法交集查询的假阳性期望值计算公式fp∩m,n1,n2,k=(1-e-kn1/m-e-kn2/m+e-k(n1+n2-n3)/m)k,与犆犅犉(S1)m,k∩犆犅犉(S2)m,k假阳性期望值相等.模拟实验结果见图8,其中CBF_AND为CBF交运算(代数法交集查询)的假阳性值,double_CBFs_AND为双CBF法交集查询的假阳性值,CBF(intersection)为使用犆犅犉(S1∩S2)m,k进行查询的假阳性值.CBF_AND等于double_CBFs_AND,即代数法与双CBF法交集查询假阳性值相同,均大于等于CBF(intersection)假阳性值.当m,k值相同时,α值越大,CBF_AND越接近CBF(intersection)的值,如m=32768,k=4,α分别取值1/3,1/2,2/3时,CBF_AND与CBF(intersection)的比值分别为5.38,2.15,1.34.(2)假阴性.代数法与双CBF法交集查询,假阴性率都等于0.(3)空间效率.双CBF法交集查询需存储两个单独的计数布鲁姆过滤器,其占用存储空间是代数法的两倍.(4)时间效率.由于实验中采用同源计数布鲁姆过滤器,使用的Hash函数组相同,因此,双CBF法交集查询,尽管需要查询两个独立的计数布鲁姆过滤器,但k个Hash函数值只需计算一次,其计算时间复杂度为O(k),与代数法相同.使用计数布鲁姆过滤器进行元素的成员查询,除进行Hash函数Page12的计算外,还需判断元素映射的k个计数器是否全大于0.对于集合S中的每个元素,其所需计数器的查询次数恒定为k;对于不属于集合S的元素(若不考虑假阳性),则只需k个计数器中任一个为0即可判定其不属于S,其查询次数k.以全集U作为查询测试数据集,实验中统计查询时计数器的查询次数.设代数法查询的计数器查询次数为Talgebra,双CBF法查询的计数器查询次数为Tnonalgebra,则代数法查询在计数器查询次数上的性能收益可用减幅表示,减幅计算公式为代数法交集查询的计数器查询次数为O(u+n3)=kn3+k1(u-n3),k1<k;双CBF法交集查询时计数器查询次数为O(u+n3)=2kn3+2k2(u-n3),k2<k.代数法交集查询的计数器查询次数少于双CBF法交集查询,其减幅为kn3+(2k2-k1)(u-n3)验结果见后面表2.表2说明,代数法交集查询的计数器查询次数比双CBF法交集查询减少47%~60%.与双CBF法交集查询相比,代数法交集查询假阳性概率不变,空间效率提高一倍,时间效率得到显著提高.5.2.2并集查询(1)假阳性.双CBF法并集查询的假阳性期望值fp∪m,n1,n2,k=(1-e-kn1/m)k+(1-e-kn2/m)k-(1-e-kn1/m-e-kn2/m+e-k(n1+n2-n3)/m)k.根据定理10,代数法并集查询的假阳性期望值:fp犆犅犉∪m,n1+n2-n3,k=(1-e-k(n1+n2-n3)/m)k.模拟实验结果见图9,其中,CBF_OR为CBF并运算(代数法并集查询)的假阳性值,double_CBFs_OR为双CBF法并集查询的假阳性值,CBF(union)为使用犆犅犉(S1∪S2)m,k进行查询的假阳性值.各参数取值相同时,CBF_OR与CBF(union)假阳性值相等,但大于等于double_CBFs_OR假阳性值.当m,k值相同时,α值越大,double_CBFs_OR与CBF(union)的比值越接近1,如m=32768,k=4,α分别取值1/3,1/2,2/3时,double_CBFs_OR与CBF(union)的比值分别为0.54,0.64,0.77.(2)假阴性.代数法与双CBF法查询并集元素均不存在假阴性.(3)空间效率.双CBF法并集查询需存储两个单独的计数布鲁姆过滤器,其占用存储空间是代数法并集查询的两倍.(4)时间效率.以全集U作为查询测试数据集.实验中用查询时计数器的查询次数衡量算法的查询时间复杂度.代数法并集查询计数器查询次数为O(u+n1+n2-n3)=k(n1+n2-n3)+k1(u-(n1+n2-n3)),k1<k;双CBF法并集查询计数器查询次数为O(u+n1+n2-n3)=k(n1+n2-n3)+2k2(u-(n1+n2-n3)),k2<k.代数法并集查询计数器查询次数比双CBF法少,其减幅为k(n1+n2-n3)+2k2(u-(n1+n2-n3)).模拟实验结果见表2.模拟实验中减幅为10%~18%.与双CBF法并集查询相比,代数法并集查询虽然增加了假阳性概率,但其空间效率提高了一倍,时间效率亦有较大程度的提高.5.2.3差集查询(1)假阳性.双CBF法差集查询的假阳性期望值fp\m,n1,n2,k=(1-e-kn1/m)k-(1-e-kn1/m-e-kn2/m+e-k(n1+n2-n3)/m)k.由定理7,代数法差集查询的假阳性期望值fp犆犅犉\m,n1-n3,k=(1-e-kn1/m-e-k(u-n2)/m+e-k(u-n2+n3)/m)k.模拟实验结果见图10,其中CBF_SUB为CBF减运算(代数法差集查询)的假阳性值,double_CBFs_SUB为双CBF法差集查询的假阳性值,CBF(setdifferences)为使用犆犅犉(S1\S2)m,k进行查询的假阳性值.CBF_SUB假阳性值显著小于double_CBFs_SUB的假阳性值,但大于等于CBF(setdifferences)假阳性.α值越小,CBF_SUB假阳性值越接近CBF(setdifferences)的假阳性值,如m=32768,k=4,α分别取值1/3,1/2,2/3时,CBF_SUB与CBF(setdifferences)的比值分别为1.32,2.13,5.62.Page13图10代数法、双CBF法差集查询与差集的(2)假阴性.双CBF法查询x是否属于差集S1\S2时,首先使用犆犅犉(S1)m,k判断x是否属于S1,若是,则继续使用犆犅犉(S2)m,k判断x是否不在S2中,即判断x是否属于珚S2.由于在犆犅犉(S2)m,k上进行珚S2成员查询,其判断规则是:若某元素x用犆犅犉(S2)m,k查询,其不属于S2,则判定x属于珚S2.由于犆犅犉(S2)m,k存在假阳性,故用犆犅犉(S2)m,k查询珚S2元素会出现假阴性,从而双CBF法查询差集元素时,会出现假阴性,其假阴性期望值为fn\m,n1,n2,k=(1-e-kn2/m)k,实验统计值为0.02%~8.79%.而代数法查询差集元素则不存在假阴性.(3)空间效率.双CBF法差集查询需存储两个单独的计数布鲁姆过滤器,其占用存储空间是代数法差集查询的两倍.(4)时间效率.以全集U作为查询测试数据集,实验中统计查询时计数器的查询次数.代数法差集查询的计数器查询次数为O(u+n1-n3)=k(n1-n3)+k1(u-n1+n3),k1<k;双CBF法差集查询计数器查询次数为O(u+n1-n3)=k(n1-n3)+2kn3+2k2(u-n1)+k3(n1-n3),k2<k,k3<k.代数法差集查询在计数器查询次数上的减幅为k3(n1-n3)+(2k2-k1)(u-n1)+(2k-k1)n3k(n1-n3)+2kn3+2k2(u-n1)+k3(n1-n3).模拟实验结果见表2.实验结果表明,与双CBF法差集查询相比,代数法差集查询计数器查询次数减少42%~65%.与双CBF法差集查询相比,代数法差集查询不存在假阴性,假阳性率显著降低,空间效率提高一倍,时间效率得到显著提高.5.2.4对称差查询(1)假阳性:双CBF法对称差查询假阳性期望值fpm,n1,n2,k=(1-e-kn1/m)k+(1-e-kn2/m)k-2(1-e-kn1/m-e-kn2/m+e-k(n1+n2-n3)/m)k.根据定理12,计数布鲁姆过滤器异或运算的假阳性值计算公式:fp犆犅犉m,n1+n2-2n3,k=(1-e-k(n1+n2-n3)/m-e-k(u-n3)/m+e-ku/m)k.模拟实验结果见图11,其中CBF_XOR为CBF异或运算(代数法对称差查询)的假阳性值,double_CBFs_XOR为双CBF法对称差查询的假阳性值,CBF(symm.diff.)为使用犆犅犉(S1S2)m,k进行对称差查询的假阳性值.当α=1/3时,CBF_XOR约是CBF(symm.diff.)的1.05倍~1.12倍,double_CBFs_XOR约为CBF(symm.diff.)的1/2~4/5;当α=1/2时,CBF_XOR约是CBF(symm.diff.)的1.20倍~1.67倍,double_CBFs_XOR约为CBF(symm.diff.)的1.46倍~1.95倍;α=2/3时,CBF_XOR约是CBF(symm.diff.)假阳性值的1.61倍~3.77倍,double_CBFs_XOR约是CBF(symm.diff.)的3.80倍~11.76倍.α值越小,CBF_XOR假阳性值越接近CBF(symm.diff.)的假阳性值.图11代数法、双CBF法对称差查询与对称差的(2)假阴性.双CBF法对称差查询时,由于使用犆犅犉(S1)m,k、犆犅犉(S2)m,k分别查询元素是否属于珚S1、珚S2,会出现假阴性,故双CBF法查询对称差元素时,会出现假阴性,其假阴性期望值为fnm,n1,n2,k=(1-e-kn1/m)k=(1-e-kn2/m)k,实验统计值为0.02%~8.82%.而代数法查询对称差元素则不存Page14在假阴性.(3)空间效率.双CBF法对称差查询需存储两个单独的计数布鲁姆过滤器,其占用存储空间是代数法对称差查询的两倍.(4)时间效率.以全集U作为查询测试数据集,实验中统计查询时计数器的查询次数.代数法对称差查询的计数器查询次数为O(u+n1+n2-2n3)=k(n1+n2-2n3)+k1(u-n1-n2+2n3),k1<k;双CBF法对称差查询时计数器查询次数为O(u+n1+n2-2n3)=k(n1+n2)+k2(u-n1-n2)+k3(n1+m,α,k并集查询次数表2CBF代数运算法与双CBF法查询计数器查询次数对比32768,1/3,445094539151626387527695030339527694342200711304135570835775732768,1/2,443209519141728267547994828255547994838438711454635570835775732768,2/3,441012498491830358568714726398568715434035711495235570835775732768,1/3,66809679183143777878035524381378035446420010481939524241244195832768,1/2,66525976085144060381139504060481139505852810482244524241244195832768,2/3,66174272865154382984401483779984401555148810484251524241244195865536,1/3,443522512591521799464645326863464644239047651474032564805716065536,1/2,441032486951624273490265024260490265134061651474832564805716065536,2/3,438373461241726869515924821786515925828744651445632564805716065536,1/3,6647607359212283996535757367856535744575109263238463121183156165536,1/2,6606216932813324876961153324886961153492329262747463121183156165536,2/3,65614665044143678673888502838673888624028392623574631211831561131072,1/3,4426884954914197144397055253014397042373696234640311717917361131072,1/2,4399154674715224814677752224784677752318276234949311717917361131072,2/3,4370714394416253064957949197154957960261396234858311717917361131072,1/3,66313870484102474861128603407961128445427887743384387711587462131072,1/2,65850465804112937065822552937065822554501287750494387711587462131072,2/3,653743611151234080705025224751705026535492877456043877115874625.2.5补集查询(1)假阳性.双CBF法补集查询使用犆犅犉(U)m,k和犆犅犉(S2)m,k查询元素是否属于补集(珚S2),其假阳性期望值:fp~m,u,n2,k=(1-e-ku/m)k-(1-e-kn2/m)k,CBF补运算其假阳性期望值fp犆犅犉~m,u-n2,k=(1-e-k(u-n2)/m)k.模拟实验结果见图12,其中CBF_COMP为CBF补运算(代数法补集查询)的假阳性值,double_CBFs_COMP为双CBF法补集查询的假阳性值,CBF(complement)为使用犆犅犉(珚S2)m,k进行补集查询的假阳性值.CBF_COMP假阳性值等于CBF(complement)的假阳性值,而double_CBFs_COMP约是CBF(complement)的3.78~28.11倍.CBF_COMP、double_CBFs_COMP、CBF(comple-ment)与α值无关.(2)假阴性.双CBF法补集查询使用犆犅犉(U)m,k和犆犅犉(S2)m,k进行补集元素的查询,由于用n2-2n3),k2<k,k3<k.代数法对称差查询在计数器查询次数上的减幅为k3(n1+n2)+2(k-k1-k3)n3+(k2-k1)(u-n1-n2)k(n1+n2)+k2(u-n1-n2)+k3(n1+n2-2n3).模拟实验结果见表2.代数法对称差查询,其计数器查询次数比双CBF法少,其减幅为38%~60%.与双CBF法对称差查询相比,代数法不存在假阴性,空间效率提高一倍,时间效率显著提高,α较小时假阳性率稍有提高,α较大时假阳性率差不多或大幅降低.差集查询次数图12CBF补运算、双CBF法补集查询与补集的Page15法查询补集元素时存在假阴性,其假阴性期望值为fn~m,u,n2,k=(1-e-kn2/m)k,其实验统计值为0.02%~8.78%.而代数法补集查询不存在假阴性.(3)空间效率.双CBF法补集查询需存储两个单独的计数布鲁姆过滤器,其占用存储空间是代数法补集查询的两倍.(4)时间效率.以全集U作为查询测试数据集,实验中统计补集查询时计数器的查询次数.代数法补集查询的计数器查询次数为O(u+n2)=k(u-n2)+k1n2,k1<k;双CBF法补集查询时计数器查询次数为O(u+n2)=ku+k2n2,k2<k.代数法补集查询的计数器查询次数比双CBF法补集查询小,其减幅等于(k-k1+k2)n2ku+k2n2.不论代数法补集查询还是双CBF法补集查询,其计数器查询次数取决于u,n2的值,与交集规模n3无关.模拟实验结果见表2.代数法补集查询,其计数器查询次数比双CBF法小,其减幅为57%~62%.与双CBF法补集查询相比,代数法不存在假阴性,假阳性率显著降低,空间效率提高一倍,时间效率得到显著提高.由上述模拟实验与分析,可得出结论:(1)对于并集查询与交集查询来说,双CBF法查询与CBF代数法查询均不存在假阴性,查询结果的可靠性均较高,但是CBF代数法的空间效率提高一倍,查询时间效率亦有显著提高.(2)对于差集查询、对称差查询与补集查询来说,与双CBF法查询相比,代数法查询的最主要优点是不存在假阴性,另外,代数法查询的空间效率提高一倍,查询时间效率可显著提高.(3)与双CBF法查询的假阳性相比,代数法交集查询假阳性概率不变,并集查询假阳性稍有提高,差集查询、补集查询假阳性则显著降低,对称差查询假阳性总体上稍低.(4)总地说来,对于以数据查询为主要操作的数据库或网络应用来说,代数法查询能显著提高查询效率及查询结果的可靠性.综合本文工作和文献[14]的工作,可得出CBF代数运算及BF代数运算在分布式系统中的应用技巧:(1)当将布鲁姆过滤器并运算或交运算用于资源路由(ResourceRouting)[5,15]、多关键字搜索(Multi-keywordSearch)[12]中的And查询、Or查询等分布式应用领域时,由于BF并(交)运算与CBF并(交)运算都可以得到并(交)集的近似过滤器表示,且查询假阳性概率一致(参见本文定理10、定理5和文献[14]的定理2、定理4),此时使用BF并(交)运算具有可以节约过滤器的向量存储空间,代数运算更为简单的优点.例如,资源路由的路由表是由许多BF或DBF组成,每个这样的过滤器保存的是通过某条链路可达的资源列表.当节点在转发查询时,逐个查询路由表中的BF,从中选择合适的链路转发.其路由表的构造过程如下:各结点构造本地BF,然后将BF表示的路由通告发送给邻居,接收到其它节点的BF后将其与本地BF合并(即BF并运算).资源路由时使用BF并运算即可以完成路由的合并,可以节约过滤器的向量存储空间,减少路由通告时发送给邻居的消息传输位数.但由于BF不适合动态删除频繁的系统环境,当删除操作频繁时,此时可以使用CBF反映资源的删除操作,而在路由表的构造过程中则仍然传输与CBF对应的用BF表示的路由通告.(2)由于CBF减(异或、补)运算能用于差集(对称差、补集)的成员查询,而BF减(异或、补)运算不能,当分布式应用中使用布鲁姆过滤器求解完整差集(对称差、补集)时,只能采用CBF减(异或、补)运算来完成,不能使用BF减(异或、补)运算.本文第6节以CBF减运算为例讨论CBF代数运算应用于分布式系统的有效性和高效性.6CBF减运算的应用探讨与仿真实验6.1P2P网络中的大规模文件分发系统由于分布式系统中网络异构性和网络波动(churn)的普遍存在,在接收相同文件内容的对等节点间,各节点的已接收文件块往往存在显著的差异;另外,由于为充分利用网络带宽、提高下载速度、缩短下载时间,需要从其它对等节点并行进行下载;甚至存在如下可能:由于覆盖网中网络连接的短暂性,服务器和某对等节点间的连接断开,这些情况下,对等节点需要高效的集合调和(SetReconciliation)方法[18],调和位于不同对等节点的已接收文件块,最终得到所有文件块.假如要将一个800MB的大文件从服务器分发到诸多对等节点,每个文件块的大小为100KB,则该文件可分为8000个文件块.这8000个文件块组成了含8000个元素的集合.而且,在现实的大规模Page16文件分发系统中,文件大小远超过800MB,最小的都是数个GB大小.若直接对文件块集合进行操作,会产生大量的消息数据,因此,我们使用BF或CBF对文件块集合进行精简表示.在图13所示的知情内容分发系统[18]中,对等节点间在下载时相互协作,从服务器下载某些文件块(图13(b))的同时从其它对等节点下载其它文件块(图13(c)),以有效地提高下载速率,在知情传输的过程中发送节点仅需传送接收节点缺失的文件块,即过滤掉了重复元素,故称此内容分发过程为知情内容分发(Informedcontentdelivery).在知情内容分发系统的知情传输过程中,利用图14(a)所示的集合调和方法,发送方可找出两节点中大部分相异文件块,在节点间仅传送这些相异文件块即可,免去发送方传送共有文件块的网络开销;利用纠删码(Erasurecorrectingcode)[19]技术,接收方在收到发送方大部分相异编码文件块后,进行译码即能得到双方拥有文件块的总和.6.2集合调和假定两节点A、B分别拥有文件块集合SA、SB,节点A发送SA的某种表示给节点B,节点B据此计算差集SB\SA,返回SB\SA中文件块给A,得到SA∪SB,此过程称集合调和.目前存在两大类集合调和方法:精确集合调和(ExactSetReconciliation)、近似集合调和(Approx-imateSetReconciliation).精确集合调和能得到SB\SA的准确成员.精确集合调和最直观的方法是节点A直接发送SA所有元素给节点B,设元素位串长度为len,此时需传输O(|SA|len)位消息[18],此法下称完整集合传输法.还有一种常用的精确集合调和方法是特征多项式法[20],在应用该法前,需将全集U中所有长为len的位串映射到有限域Fq(q2len)中的元素,在假定d=|SA\SB|+|SB\SA|已知的情况下,A需发送O(dloglen)位数据消息给B;若d未知,则必须通过A、B之间的多轮消息交换估算出d的合理上界,然后根据d对特征多项式进行插值与因式分解,恢复差集元素.此法所需时间复杂度为Θ(d3).文献[20]的作者后又改进了该特征多项式法,使其只需Θ(d)计算时间复杂度,但以A、B之间更多的通信轮数为代价[21].这些精确集合调和方法均存在网络通信代价高的缺点,当|SB\SA|较小时尤为突出.近似集合调和则只能找出SB\SA的部分元素.近似集合调和在节点间传递Hash后的集合(hash(SA))、BF表示的集合(犅犉(SA))[18]或集合的近似调和树[22](ART(SA))等.这些近似集合调和方法都存在如下可能:SB中元素y(y∈{SB\SA})与元素x(x∈SA)的Hash值或BF表示相同,从而B错误地判断y∈SA,以致不能找出SB\SA的所有元素.这些近似集合调和方法本质上与双CBF法差集查询相同,存在假阴性,即原本属于SB\SA的元素可能被判为不属于SB\SA.本文中将使用BF的近似集合调和方法称为基于BF的集合调和(图14(a)).Page176.2.1Byers集合调和法知情内容分发系统的知情传输过程中使用的集合调和方法是基于BF的集合调和方法.尽管其调和过程只能得到近似差集,但由于内容分发时被分发文件使用纠删码编码,接收节点只需全部编码分组的足够大的一个子集就可译码得到被分发文件所有内容.以对等节点A、B间的调和为例,说明知情内容分发系统中使用的调和过程如下(下称Byers法):1.服务器S将拟分发文件用纠删码编码.按初始分发树的层次分发至对等节点A、B,调和前各自的已接收编码分组集设为SEA、SEB.2.节点A构造犅犉(SEA)m,k,并将之传送给节点B.3.节点B使用犅犉(SEA)m,k查询SEB中不属于SEA的编码分组,并返回给节点A.由于犅犉(SEA)m,k固有的假阳性,少量{SEB\SEA}中的编码分组被误判为属于SEA,从而上述查询过程只能得到{SEB\SEA}中的大部分编码分组,即近似差集{SEB\SEA}.4.节点A将节点B返回的近似{SEB\SEA}与SEA合并,得到近似{SEA∪SEB}.5.节点A对近似{SEA∪SEB}进行译码,得到完整的SA∪SB.6.2.2完全集合调和本文的CBF减运算揭示了集合调和的另一选择.如果节点A传送SA的CBF表示(即犆犅犉(SA)m,k)给节点B,节点B使用CBF减运算得到的过滤器犆犅犉(SB)m,k\犆犅犉(SA)m,k查找SB\SA中元素,并返回给A,求解SA∪SB,完成集合调和.由于在使用犆犅犉(SB)m,k\犆犅犉(SA)m,k查询元素是否属于SB\SA时不存在假阴性,但具有假阳性,从而节点B找出的元素中包含SB\SA中全部元素,亦包含少量SA∩SB中元素(其数量取决于犆犅犉(SA)m,k的查询假阳性),本文将这一方法称为完全集合调和(CompleteSetReconciliation),参见图14(b).由于CBF用r位计数器代替BF的二进制位,利用CBF减运算的完全集合调和方法,与使用BF的近似集合调和方法相比,前者节点A需传输O(rm)位信息给节点B,而后者仅需O(m)位信息.设SA=SA=SB=n,当m/n值确定时,为保证SA∩SB中元素被误判为SB\SA中元素的可能性最小,需取k=ln2×(m/n).例,当m/n=6,k取4时,犆犅犉(SA)m,k的fp值近似最小,计算得fp=0.056,若r=4,利用CBF减运算的集合调和方法,节点A需传输给节点B的消息位数等于24n,由B返还的元素集合中包含全部SB\SA元素,亦包含不到5.6%的SA∩SB中元素.而使用BF的近似集合调和方法仅需在节点间传送6n位消息,但约有不到5.6%(取决于犅犉(SA)m,k的查询假阳性)的SB\SA中元素被遗漏,即不能得到完整的SA∪SB.与用BF完成集合调和的方法比较,使用CBF减运算完成集合调和可以找出SB\SA中所有元素,不会遗漏,从而得到完整的SA∪SB;而且CBF可支持删除操作,适用于更新频繁的系统环境,但需比BF法多一次CBF减运算,需要r(如r=4)倍于BF法的传输消息位数及节点在首次与服务器或对等节点建立联系时需得到犆犅犉(U).6.3仿真实验6.3.1单机环境下的模拟实验首先考察单机环境下完全集合调和算法与By-ers集合调和法的性能表现.为了简化实验过程,我们考虑最简单的场景:用随机产生的32位无符号整数模拟文件块,两对等节点从服务器S下载一定数量的文件块后,停止来自服务器的下载,转而进行集合调和,完成整个文件所有文件块的获取过程.表3中调和时间是指从A节点发送BF或CBF给B节点起,至A节点获得完整文件所经历的时间.漏检数是指Byers法的步3过程中被漏检的{SEB\SEA}元素个数.冗余是指完全集合调和过程中第4步由B返回的SA∩SB元素个数.两算法共同的参数设置如下:根据布鲁姆过滤器假阳性概率的变化趋势,m/n值固定的情况下,使得布鲁姆过滤器假阳性概率最小的k值等于ln2×(m/n).实验中我们选取BF或CBF向量长度m=32768,|SA|=|SB|=n=4000,Hash函数个数k=6,分别考察不同交集规模下的算法调和性能.交集规模SEA∩SEB=SA∩SB={500,1000,2000,3000}.Byers法其余参数设置如下:纠删码使用里德-所罗门码,即RS(nn,kk,mm)码,其中,kk个输入符号(每个符号有mm个比特位)被编码成nn(=2mm-1)个输出符号.实验中,因212<kk<213,故mm取值13,nn=8191,即kk个源数据用RS(8191,kk,13)码编码成nn(=8191)个编码数据,接收节点A和发送节点B在调和前拥有(nn+SEA∩SEB)/2(<kk)个编码数据,其中SEA∩SEB=nE0.完全集合调和法的其它参数设置如下:全集规模u=kk,计数器位数r=4,其中SA∩SB=n0=nE0.仿真实验机器配置为Pentiumdual-core1.7GHz,1GBDDR2,WindowsXP.对于表3中每个实验参数的组合,随机产生Page18100次数据集合,完成100次实验,实验结果取100次的平均值.表3中第3列、第8列分别是Byers法和完全集合调和法的调和时间.表3单机环境完全集合调和与Byers法性能比较kknE05000300097494816555000300019060002000593570114060002000190.777000100028726662970001000202.1575005001621433797500500202.15从表3中发现:(1)当交集规模取值3000,源数据个数为5000时,Byers法的调和时间为974ms,而完全集合调和法的调和时间仅为Byers法的1.93%,完全集合调和法的调和时间远小于Byers法的调和时间.(2)当交集规模较小,源数据个数较大时,Byers法的调和时间较小,如最后一行所示,但其时间值仍然是完全集合调和法的8倍左右.(3)完全集合调和过程中第4步由B返回的SA∩SB元素个数极小,如第9列所示,在上述实验过程中冗余数最多不超过6个.这意味着由于冗余造成的传输代价可以忽略不计,在实际应用中是完全可行的.(4)Byers法漏检数较大,为379~1655,远大于单独使用基于BF的集合调和法时的漏检期望值(1-e-k|SA|/m)k|SA\SB|.这是由于Byers法在使用RS码编码时,(nn-kk)个校验数据中有很多与SB\SA中数据相同,造成部分SB\SA元素已在犅犉(SEA)m,k中得到表示,从而导致查询时这些差集元素被认为不属于SB\SA,漏检数比期望值大得较多.被漏检的差集元素即为RS码要纠正的删除数据,删除数据数目越大,译码所需时间越长.漏检数大直接导致Byers法译码时间较长.两算法调和时间出现上述显著差异的原因是由于Byers法必须使用纠删码配合基于BF的集合调和法,才能调和得到完整的文件,纠删码的译码过程非常耗时,为143ms~948ms,译码时间占整个调和时间的88%~97%.而完全集合调和法仅需简单的CBF减运算及元素查询,费时很少即能完成调和.6.3.2P2P环境下的仿真实验为进一步验证完全集合调和算法的性能,进行系统仿真实验,将完全集合调和用于知情内容分发的知情传输过程,并将之与Byers法进行比较.该部分实验的参数设置:除了使用P2P环境外,其余参数与单机环境下的模拟实验是相同的.仿真实验使用的P2P结构如下:基于随机产生的物理网络建立Chord覆盖网[23].Chord底层的物理网络采用Transit-stub模型[24],路由器数量为5050,物理链路25168条,链路平均延迟为40.5ms.Chord网络中P2P结点数为200.每个P2P结点连在一个随机路由器上.调和时间统计结果如表4所示.由表4结果可以看出,与Byers法相比,完全集合调和法同样表现出了时间性能上的优势.表4P2P环境完全集合调和与Byers法调和时间kknE0调和时间/ms500030001601850003000151776000200015705600020001517970001000154367000100015181750050015323750050015187在知情内容分发系统中,节点间使用基于BF的集合调和法进行知情传输,只能得到部分相异分组,需配合使用纠删码技术才能恢复完整文件.拟分发文件在传输前需使用纠删码对分组进行编码,各对等节点在接收到一定数量的编码分组后需进行译码才能得到完整文件,编码和译码过程(尤其是译码)对于较大的文件来说是一笔不小的开销.此时,若改用本文的完全集合调和法完成对等节点之间的知情传输,则不需费时的编码和译码过程,时间效率很高,且不需借助其它技术即能调和所有相异分组.7小结与研究展望本文直接从CBF计数器向量的加、减及求最小值运算出发,探讨了CBF代数运算的相关性质.理论分析和实验结果表明,CBF代数运算(犆犅犉(S1)m,kX犆犅犉(S2)m,k)不会出现假阴性,与犆犅犉(S1XS2)m,k相比,其假阳性概率不变或略有提高,CBF代数运算与犆犅犉(S1XS2)m,k之间的一致性程度较高,能够支持集合并集、交集、补集、差集及对称差的成员查询;利用CBF代数运算得到的过滤器查询元素是否属于补集、差集及对称差,与使用两个原始的计数布鲁姆过滤器进行查询的方法相比,不存在假阴性,空间效率能提高一倍,时间效率亦能显著地得到改善.本文以CBF代数运算中的减运算为例,成功地将之应用于分布式文件分发系统,表现出了极为卓越的调和效率.本文工作说明:使用本文的CBF代数运Page19算,可以简化利用计数布鲁姆过滤器进行的系统设计,可用于大多数计数布鲁姆过滤器的应用场合,为优化计数布鲁姆过滤器应用提供了新的思路.进一步探讨不同长度、不同Hash函数下的非同源计数布鲁姆过滤器如何进行相关代数运算,成为作者的进一步研究工作.另一个重要的工作展望是将本文的研究成果进一步应用于实际分布式网络系统中,在各应用领域优化CBF代数运算的性能等.
