Page1面向DaaS保护隐私的模糊关键字查询1)(上海电力学院计算机科学与技术学院上海200090)2)(上海市高可信计算重点实验室上海200062)3)(华东师范大学计算机科学与软件工程学院上海200062)摘要由于在数据库服务(DatabaseasaService,DaaS)模式下,数据库服务提供者是半可信的(Honest-But-Curious),因此,为了保证外包数据的机密性和安全可查询,数据拥有者通常采用特定的加密技术加密外包数据,如采用可搜索加密技术、同态加密技术等实现外包加密数据上的安全查询.然而,且当前提出的大多数方法都基于关键字精确匹配查询,即使存在少量针对加密数据上的模糊查询,也在查询效率、存储开销和安全性方面存在一定的局限性,不适用于DaaS数据库服务模式.文中首次提出了融合具有高编码效率的Huffman编码和具有数据存储优势的布鲁姆过滤器,并结合现有的安全加密方法,实现了DaaS模式下保护隐私的模糊关键字查询处理.一方面,基于Huffman编码的树型索引提供了较高的查找效率;另一方面,基于布鲁姆过滤器的模糊关键字集合实现了较小的存储开销.安全分析、性能分析以及真实论文集上的实验结果进一步验证了文中查询算法的安全性、存储开销和查询效率.关键词DaaS;模糊查询;数据安全;哈弗曼编码;布鲁姆过滤器;云计算1引言随着网络数据的日益规模化和集成化,数据库服务(DatabaseasaService,DaaS)逐渐成为大数据时代下数据的主要存储模式[1-2].企业或组织越来越倾向于将本地专有数据中心的维护和管理工作外包(Outsource)给DaaS服务提供商,从而降低设备升级、更新、维护以及专业人员培训等各个方面的运营成本.新的服务模式引入了新的安全问题,即相比原有管理模式中的企业数据中心,服务提供商的服务器对用户具有信任风险,数据拥有者需要充分考虑存储数据的安全.目前最有效的可信机制建立办法是对数据进行加密后再外包至服务器,同时为了保证加密数据的可用性和可搜索性,部分研究人员提出了相应的算法,使用户在对存储数据具备相应知识的情形下根据自身需求查询数据库[3-5].然而,数据的类型和结构日益复杂,且应用规模庞大,用户对数据的认知总会存在一定的误差,因此需要DaaS系统支持密文数据上的模糊查询功能,容忍用户在查询过程中出现的少量的输入或格式误差[6].例如,用户输入关键字“Chine”查询含有索引关键字“China”的文件.尽管查询条件无法精确匹配文件的索引关键字,但模糊查询机制仍然允许系统向用户返回所有相似程度较高的文件,这样用户才能以较大概率找到所需文件.同时,为了保护数据和相关索引信息的机密性,避免用户隐私的泄露,所有的数据查询操作必须基于密文进行.现有密文查询工作大部分针对精确数据匹配开展研究[7-11],而对基于密文的模糊查询机制研究仍然较少,代表性工作主要有文献[6,12].Li等人在文献[6]中首次针对云环境下的加密数据提出了基于编辑距离的模糊查询算法,以通配符技术为基础实现了模糊关键字集合的压缩,然而这种以枚举为基础的查询算法仍无法满足用户对实时查询操作的效率需求.Wang等人在文献[12]中以Li等人的工作为基础,提出了基于预定义符号集合(predefinedsymbolset)的语义树改善构建模糊集合的结构,提高查询效率,然而该算法性能对关键字前缀部分的重复率有较高的依赖性,若各个索引关键字之间极少存在相同前缀,则算法在效率方面的性能提升不明显.除此之外,模糊集合元素和符号集合之间的对应关系会对算法查询结果的安全性产生威胁.本文通过分析DaaS数据文件关键字索引的特征及其对密文查询效率的影响,针对现有工作在查询效率、数据存储和数据安全方面的不足,提出了一种基于Huffman编码和布鲁姆过滤器的安全模糊查询算法(HuffmancodeandBloomfilter-basedFuzzyKeywordSearch,HB-FKS).HB-FKS以关键字的TF×IDF评分(TermFrequencyandInverseDocumentFrequency)为基础构建Huffman树型结构,重新对数据文件索引进行组织,同时利用布鲁姆过滤器在数据存储方面的性能优势减少模糊关键字集合的存储功耗,确保以较高的效率实现DaaS服务模式下基于密文的模糊查询,最后基于真实数据集对HB-FKS的安全性和执行效率进行了较全面的分析和验证.本文第2节对本研究领域中其他学者的相关工作进行比较和总结;第3节对本文用到的相关技术进行简要介绍;第4节描述本文采用的系统模型;第5节详细介绍本文提出的HB-FKS算法;第6节对提出的算法进行理论分析;第7节针对本文算法和相关工作设计仿真实验,并对实验结果进行对比分析;第8节总结全文.2相关工作隐私保护是DaaS领域的研究热点之一,然而在确保数据隐私性的同时,也要确保数据的可用性,因此在DaaS服务模式下实现密文查询功能具有重要意义.本小节将从DaaS模式现有隐私保护技术、隐私保护精确密文查询、隐私保护模糊密文查询和私有信息检索4个方面进行分析和总结.2.1DaaS隐私保护技术随着大数据存储技术的不断发展,DaaS服务模式下的隐私保护问题日益突出,该问题也得到了研Page3究人员的广泛关注.传统的对称和非对称加密算法如DES[13]、RSA[14]等是DaaS模式下数据隐私保护的主要技术手段,根据其加密粒度可划分为表、字段、元组、属性4种方式[5].算法通过密钥管理等方式[15-16]控制用户数据访问权限,确保数据的隐私性.然而,仅根据用户权限不加区分的反馈所有符合权限范围的数据,将引入大量不必要的解密计算和带宽功耗.密文数据在确保了用户隐私性的同时,也极大地影响了系统的可用性.2.2隐私保护精确密文查询保护数据安全性最有效的手段是采用强加密算法,但为了确保系统的可用性,这些密文需要同时具备可搜索性.针对密文的精确查询技术最早是由Song等人[3]提出的,称为可搜索加密机制(TheSearchableEncryption).可搜索加密机制根据其采用的加密技术可以分为基于对称加密的搜索算法和基于公钥系统的搜索算法.早期的可搜索加密算法主要基于对称加密算法进行研究,代表工作主要有,2000年Song等人[3]率先以伪随机函数和对称加密机制为基础实现了对密文数据精确快速的查询,同时严格证明了算法的安全性.2003年Goh等人[4]基于布鲁姆过滤器结合伪随机函数进一步提出了一种高效且满足语义安全的索引构造算法Z-IDX,有效地缩减了文件索引的存储开销,提高了搜索计算效率.2005年Chang等人[17]引入随机比特位增强了索引抵御字典攻击的能力.随着可搜索加密机制的发展,以公钥加密机制为基础的搜索算法得到了发展.2004年Boneh等人[18]首次提出了基于双线性映射和IBE加密机制(IdentityBasedEncryption)的公钥密文搜索算法PEKS.在该算法中,公钥加密的数据能被网关认证并发送至对应的用户,但内容不会被网关获取.Abdalla等人[19]对Boneh等人提出的PEKS算法进行了改进,解决了原有算法中的一致性问题,设计了3种改良型算法:匿名身份加密算法HIBE(AnonymousHierarchicalIBE),临时可搜索加密算法PETKS和基于身份的可搜索加密算法IBEKS.然而上述所有搜索算法中,系统均会根据用户的请求不加区分地返回所有满足查询需求的结果,这样的处理方式会导致不必要的带宽和传输能量的浪费,且增大了用户端的后处理负担.相比之下,基于密文的排名搜索算法(rankedsearch)提供了更加便捷有效的办法.排名搜索算法只会返回和用户需求最相关的k个文件.Wang等人[10]针对云存储文件首次提出了安全关键字排名搜索算法.算法采用对称保序加密(Order-PreservingSymmetricEncryption,OPSE)实现了密文的安全排序,同时基于TF×IDF构造相应的排序函数.Cao等人[11]则基于协调匹配原则(CoordinateMatching)和内积相似度量化规则(InnerProductSimilarity)实现了针对多关键字的安全排名查询机制,通过引入冗余关键字提升了算法的安全性.然而由于Cao等人的算法没有将关键字频率作为计算参数引入相关度评分的计算公式,因此部分包含高频率关键字的搜索结果可能被系统忽略,从而导致最终的查询结果出现错误.上述排名搜索算法以较高的查询效率满足了用户的需求,然而算法并不能容忍用户在输入查询条件时出现的少量的字符或格式误差.2.3隐私保护模糊密文查询目前针对DaaS下基于密文的模糊查询研究工作不多,相对精确的密文查询,模糊密文查询难度更高,这是由于在加密强度较高的算法中,明文之间1比特的微小误差在对应密文中可能产生巨大的差异,用户输入过程中的细节错误会直接导致异常的查询结果.Park等人[20]在2007年针对这一问题提出了基于汉明距离(Hammingdistance)的模糊查询算法,采用了伪随机函数和椭圆曲线实现对索引的安全性保护,获得了很高的安全性,但算法计算复杂度较高,且以汉明距离为基础的相似度度量体系对用户提出了较高的专业背景要求,因此系统可用性难以保证.2010年Li等人[6]引入了编辑距离衡量关键字之间的相似度,简化了数据相似度的计算,同时采用通配符“”替代关键字不同位置的字母元素,使特定位置字符取值的可能性由26种变为1种,减少了关键字模糊集合的存储空间.然而,模糊查询的实现基础仍然是以关键字模糊集合为基础的枚举模式,查询效率受到了极大影响.2012年Wang等人[12]采用了Li等人的算法,结合通配符和编辑距离计算索引,并在此基础上进一步提出采用预定义符号集合对应这些索引关键字以构建基于密文符号的语义树,文件索引通过索引树重新组织后使得查询效率得以提高.然而,语义树的查询效率极大地依赖于索引关键字的重复率,因此,算法对模糊查询效率的性能提升很有限.此外,关键字和符号集合一一对应的模式存在安全隐患,难以有效地抵御字典攻击.2.4私有信息检索技术私有信息检索技术(PrivateInformationRetrieval,PIR),其应用目的和可搜索加密技术是一致的,即Page4在数据库服务器查询数据过程中,不暴露用户的任何隐私.Chor等人[21]于1998年首次提出PIR的概念,并提出了一种k服务器的方案.用户通过向不同服务器发送根据同一查询条件生成的随机副本,随后利用不同服务器反馈的结果进行异或计算获取最终结果.然而其通信复杂度达到了O(kn1/logk),n为查询条件长度.Kushilevitz等人[22]于同年提出了一种基于二次剩余定理的c-PIR协议,有效地降低了通信复杂度,并从理论上证明了在数据查询过程中的计算性隐私可得到有效保障,然而每次数据查询过程中,服务器均需要对所有数据进行取模计算,其计算复杂度太高,系统难以承受.Wang等人[23]针对这一问题进行研究,采用含有目标数据子矩阵对原有数据矩阵进行了替换,提出了一种改进的bbPIR技术,在损失部分隐私性的同时提高了查找效率.为了解决PIR协议计算复杂度过高的问题,Papadopoulos等人[24]提出了一种分布式的方案pCloud,通过节点协作处理不同的数据分块.然而该算法的实现仍是基于二次剩余定理的,因此,用户仍需通过所有数据分块来计算最终的结果.一旦出现单点故障就无法顺利获取部分数据分块,用户需要重新进行查询,这将导致大量重复计算,消耗额外的网络资源.现有的PIR技术一方面计算复杂度过高,不能适用于存储大规模数据的DaaS服务模型;另一方面,现有的PIR技术侧重用户隐私,但在服务器端存储的数据并非密文数据,考虑到本文中的数据库服务器并不是完全可信的,因此,PIR技术不满足本文的安全需求.3预备知识3.1TF×IDF规则TF×IDF规则是一种基于加权的字词统计技术,用于衡量单个关键字和文件集合中指定文件之间的关联程度[25].关联强度随着该关键字在该文件中的出现次数增加而增强,但和关键字在整个文件集合中的出现频率呈反比关系[26-27].TF(TermFrequency),即词频,衡量的是关键字在指定文件中的出现频率;IDF(InverseDocumentFrequency),即逆向文件频率,衡量的是关键字在整个文件集合中的出现次数.关键字wi和文件fj的TF×IDF评分计算规则为sc(wi,fj)=其中,|fj|表示文件长度;ftwi出现的频率,即TF;fnwi字wi的文件个数;N是文件集合中文件的总数量.3.2布鲁姆过滤器布鲁姆过滤器是一种存储有效的向量型数据结构,通常用于判别单个元素和指定集合之间的隶属关系[28-29].标准的布鲁姆过滤器是由多个比特位组成的特殊向量阵列,各个比特位的初始值设置为0.各个元素通过该布鲁姆过滤器对应的m个独立同分布的哈希函数映射至向量阵列相应的比特位.被映射的比特位的值设置为1.例如,长度为BL的布鲁姆过滤器B对应的哈希函数为h1,h2,…,hm,若向B中添加元素x,则h1(x),h2(x),…,hm(x)对应的比特位的值设为1.当判别元素y是否隶属布鲁姆过滤器B时,需判别h1(y),h2(y),…,hm(y)对应的m个比特位的值是否全部为1.这m个值中任意一个为0,则y一定不在B中,反之y以较大的概率存在于B中.图1给出了布鲁姆过滤器成员隶属关系判别过程.(1)布鲁姆过滤器各个比特位的初始值设置为0;(2)x1,x2,x3分别通过哈希函数h1,h2,h3被映射至布鲁姆过滤器,作为其对应集合的元素成员;(3)通过对y1,y2,y3进行相应的哈希映射,判别其是否是该布鲁姆过滤器对应集合的成员.由于h1(y3)对应的比特位为0,因此y3不在该布鲁姆过滤器中.y1和y2对应的哈希映射比特位的值均为1,因此二者以较大概率存在于该布鲁姆过滤器中.但是,根据原有集合成员x1,x2和x3的实际映射位置判断,y2实际上并没有存储在布鲁姆过滤器中,因此y2是假阳性数据.3.3Huffman树Huffman树是带权路径长度最小的最优二叉树,权值越大的节点越接近根节点,即深度越浅,反之则远离根节点[30-31].以此为基础构建的可变字长Huffman编码可基于字符或关键字的出现频率来实现最短平均长度的最佳编码.Huffman树的构造Page5方法是自底向上的:首先通过关键字频率设置叶子节点的权值,随后重复合并权值最小的叶子节点或中间节点以构造新树,并以新树的根节点作为新的合并操作对象,最终形成Huffman树[32].对Huffman树的各个左右路径赋予0-1编码生成相应的Huffman编码.图2给出了叶子节点的频率权值分别为4,5,7,8,11,17,19,29的Huffman树构造过程.4模型4.1系统模型DaaS服务系统模型如图3所示,通常主要包含3种角色[5,33]:数据拥有者(DataOwner,DO)、DaaS数据库服务提供方(DaaSProvider,DSP)和用户(DataUser,DU).(1)DO通常是拥有原始数据的企业或组织,将本地数据以密文形式委托DSP进行存储,为了在保护数据安全性的同时实现DSP数据库的可查询性,DO需要结合特定的加密技术针对这些密文建立相应的隐私保护索引;(2)DSP是专业维护、更新和升级DaaS服务数据库和硬件服务器的提供商,负责存储备份和管理DO数据,并向DU提供数据查询服务.由于DSP管理人员的个人行为无法完全掌控,数据的机密性得不到有效保障.因此,DSP存储的数据均是事先由DO加密的.在提供查询服务时,为了保护数据和索引隐私,DSP正确执行查询操作的同时不能获知查询条件和查询数据的真实内容;(3)DU是指经过系统授权的用户,可以合法查询DSP中存储的DO数据.出于安全性考虑,DU采用的查询条件也需要经过加密技术处理;(4)TTP(TrustedThirdParty).本文采用的模型引入了完全可信第三方TTP[5],负责查询服务中的复杂计算任务,主要包含对DO数据进行加密预处理、索引计算,并对DU查询条件进行相应编码转换.TTP降低了查询服务模型中DU和DO的计算负担,但为了保护DU查询条件和DO数据的机密性,TTP必须独立于外包服务提供商DSP,由第三方权威机构提供.例如,DaaS服务模式下的线上医疗信息系统中,病人需上传病历等敏感信息为医生看诊提供辅助材料,可通过TTP提供的可信服务将这些信息加密并建立索引,存储到医疗信息中心;医生根据看诊需求查询病历信息时,通过TTP提供的可信服务将查询信息转换成相应加密编码,并发送至医疗信息中心;信息中心在不对查询编码和病历信息解密的情形下,通过计算将相应的文件反馈给被授权的医生(TTP授权).该系统的TTP可以由政府相应监管部门承担;(5)DaaS服务模式下的数据库通常规模庞大,在现有的基于密文查询的相关研究工作中[6,11-12],查询关键字通常是系统利用数据库中存储文件预先计算的,可降低关键字更新频率,避免文档样本不足导致的相关参数计算误差.因此,在本文提出的模糊关键字查询机制中,合法DU和DO之间约定的常用查询关键字w1,w2,…,wk,是由TTP通过对数据库服务器DSP中存储的文档数据库F={f1,f2,…,fn}进行计算后得到的.数据库拥有数量充分的文档样本,对于查询关键字的更新需求较低.4.2安全模型本文采用的安全模型设计如下:DO和DU通过安全信道向可信方TTP传输数据(如图3所示).TTP和DSP之间的传输信道可能被窃听,且DSP是Honest-but-Curious的.因其Curious特性,DSP作为系统内部成员可能发起两种形式的攻击:一种是查看数据拥有者DO委托的数据,从而泄露与DO相关的隐私信息,本文主要采用现有对称加密技术加强对数据的保护;另一种是对用户DU的查询条件进行分析,获取DU查询行为等隐私信息,本文主要通过Huffman编码和布鲁姆过滤器技术隐藏查询条件和数据之间的关联信息.在本文的安全模型中,DO,DU和TTP均是可信的.4.3符号本文安全模糊查询机制中所采用的符号如表1所示.Page6SwBwhafw5保护隐私的模糊查询针对现有算法在查询效率和存储功耗方面的不足,本节基于Huffman编码和布鲁姆过滤器提出了一种安全模糊查询算法,目的是在保护数据私密性的同时以较低的功耗实现较高效率的查询处理.算法主要分为预处理、Huffman编码索引建立和保护隐私的查询转换3个部分,算法的具体细节如下.5.1预处理系统对数据文件的预处理主要包含3个部分,即对文件集合关键字的TF×IDF评分计算,相关加密算法和密钥的约定以及对DO数据文件的加密存储,具体细节如下:(1)由可信第三方A对准备存储至数据库服务器中的文件F={f1,f2,…,fn},通过执行算法1进行关键字关联度计算,获取TF×IDF评分最高的k个关键字w1,w2,…,wk,并以此为基础建立各个存储文件的索引树I.根据式(1),关键字wi在文件集合F下的TF×IDF评分计算公式如下:sc(wi,F)=∑fj∈F其中,|fj|是文件fj的长度,ftij是关键字wi在文件fj中的出现频率,fnwi的文件数量,N是文件集合中的文件总数.算法1.文件集合TF×IDF评分算法.输入:文件集合F={f1,f2,…,fn}输出:评分sc最高的k个关键字w1,w2,…,wk1.对各个文件fj进行扫描,结合现有分词算法[34]划分文2.统计关键字在文件集合中的词频ft1,ft2,…,ftmax3.根据式(2)以及上述计算结果计算各个关键字的相4.FOR1imax5.返回sc1,sc2,…,sck对应的关键字w1,w2,…,wk.(2)A和授权用户共享加密函数En和密钥kA_u,用以实现安全通信;(3)文件f1,f2,…,fn被加密后得到cf1,cf2,…,cfn.密文结果和相应索引树I被传输至DSP服务器进行存储,索引树生成过程详见5.2节.5.2Huffman编码索引树建立索引生成的基本思想:首先,根据文件索引关键字的TF×IDF评分构建Huffman索引树并生成相应编码,评分越高的关键字在索引树的深度越小,随后,将各个关键字的模糊集合存储到相应的布鲁姆过滤器,节省存储空间:(1)叶子节点的生成.为了支持模糊查询机制,本文采用Levenshtein[35]提出的基于编辑距离的相似度量化方法来衡量关键字之间的相似程度.为了降低存储开销,本文基于Li等人[6]提出的关键字模糊元素集合计算方案,结合具有存储优势的布鲁姆过滤器构造叶子节点.具体如下:可信第三方A首先针对关键字wi计算其不同编辑距离下相应的关键字模糊元素集合Swi_1Page7“act”,则其编辑距离d=1时,相应的模糊元素集合Swi_1={“ct”,“at”,“ac”}.随后根据不同的编辑距离,将相应的模糊元素集合中的各个关键字,先加密再分别映射至不同的布鲁姆过滤器Bwi_1Bwi_3为En,密钥为kA_u.,以构造对应各个关键字的叶子节点.加密函数(2)基于叶子节点及其父节点的子树生成.在本文算法中,叶子节点根据编辑距离划分共有3类,对应的编辑距离分别为1,2,3.其父节点为相应关键字的TF×IDF评分.例如叶子节点Bwi_1对应父节点的存储信息为scwi.叶子节点和其父节点构成相应Huffman子树tw1个关键字.图5给出了Huffman子树的基本结构.(3)Huffman树的生成和节点编码计算.上述子树tw1Huffman树.具体如下:可信方A首先在上述子树组成的森林T中选择根节点TF×IDF评分信息最小的两棵子树ti和tj并进行合并,组成一棵新树ti_j.新树根节点的TF×IDF评分信息值为子树ti和tj根节点评分信息之和,且这两棵子树分别作为新树ti_j的左右子树.随后A将新树ti_j加入森林T,同时删除子树ti和tj.重复上述过程直到森林T只包含一棵树为止,此时,Huffman树建立.例如图6(a)~(d)所示,共存在4棵子树tw1节点关键字的TF×IDF评分分别为scw1=0.5,scw2=1.4,scw3=0.4,scw4=0.3,经上述计算过程建立的Huffman树如图6所示.节点Huffman编码的计算方式如下:可信方A从TF×IDF评分信息最低的两个节点开始,左节点设置为0,右节点设置为1,对各个节点进行相应编码hafi.由上述树型结构和Huffman编码构成相应的索引树I,经可信方A发送至数据库服务器进行存储.索引树I的各个节点不包含TF×IDF评分信息,叶子节点为布鲁姆过滤器编码,其余部分则为Huffman编码,同时各个关键字wi的Huffman编码即为各个叶子节点父节点的编码.以上图中数据为例,相应编码如图7所示.图6基于关键字TF×IDF评分的Huffman树建立Page85.3保护隐私的查询转换用户DU的查询条件将被TTS转换成相应密文和编码,再由DSP执行查询:(1)用户查询条件转换.用户首先将查询条件Q=(cwq=En(wq,kA_u)).A对查询条件解密后,首先计cw算和wq编辑距离小于或等于dq的相似关键字wi,wi+1,….随后将关键字wi,wi+1,…转换成为对应的密文和Huffman编码,形成新的查询条件Q=(cwi|hafwi服务器进行查询.(2)执行查询.如算法2所示,数据库服务器对比Huffman编码hafwi找相应的节点Nwi,Nwi+1Nwi,cwi+1cwi元素.算法2.索引树查询算法Search(hafwi输入:Huffman编码hafw输出:查询结果Nw1.设置Nt初始值为索引树I的起始查询节点,即Nt=root;2.使用计数器count记录Huffman编码hafw3.IFcountcolen4.IFcount==colen5.RETURNNw根据布鲁姆过滤器成员隶属关系判断规则,当),h2(cwih1(cwi1-p存在于Bwi_j指向的加密数据文件cf.用户通过解密cf得Bwi_j到相应文件f.其中,h1,h2,…,hm是布鲁姆过滤器对应的独立同分布哈希映射函数.参照布鲁姆Bwi_j过滤器的假阳性计算公式[36],概率p值为p=1-1-其中,BL为布鲁姆过滤器的比特数,m为布鲁姆过滤器对应的哈希函数个数,n则为布鲁姆过滤器中插入的元素个数.查询执行过程如图8所示.6分析本节对HB-FKS算法的计算复杂度、安全性和查询性能分别进行了分析,并与主要文献[6,12]中提出的算法进行了对比.6.1算法复杂度分析假定DSP服务器存储了n个文件,DO和DU约定的关键字个数为k个且关键字频率各不相同,关键字前缀重复率为零,单个布鲁姆过滤器包含m个相互独立的哈希函数,查询的最大编辑距离为d.为了方便表述,不妨令所有关键字长度为l,从l个元素中任选d个元素的组合种类数量为Cd和文献[6,12]中查询算法各个步骤的计算功耗分析如下(本文将文献[6]的算法称为WFKS(Wildcard-basedFuzzyKeywordSearch),将文献[12]的算法称为TTSS(Trie-tree-basedSimilaritySearch)):(1)HB-FKS计算功耗分析.HB-FKS中索引的生成计算主要包括各个关键字的模糊集合计算、计算结果的布鲁姆过滤器映射操作和以关键字TF×IDF评分为基础的Huffman编码生成,其计算开销为(C1中查询条件的生成主要包括查询关键字模糊集合的生成和对应Huffman编码的计算,其计算开销为(C1操作主要是使用上述步骤中生成的查询关键字l+C2Page9Huffman编码集合对Huffman索引树进行遍历,并在叶子节点处进行布鲁姆过滤器映射操作,其计算开销为(C1(2)WFKS算法计算功耗分析.WFKS中索引的生成计算主要是构建各个关键字的相应模糊集合,因此其计算开销为(C1的查询条件生成计算也较为简单,是对查询关键字进行相应的模糊集合计算,其计算开销为(C1l+…+CdC2询关键字的模糊集合对各个文件的索引关键字模糊集合进行遍历,其计算开销为(C1(3)TTSS算法计算功耗分析.TTSS中索引的生成计算主要包括各个关键字的模糊集合计算以及计算结果中模糊集合各个元素经预定义符号集合元素替换后构建的符号语义树,在关键字之间不存在相同前缀的最坏情形下,其计算开销为l+C2(C1TTSS中查询条件的计算主要包括查询关键字模糊集合的计算和语义树符号编码的生成,其计算开销l+C2为(C1TTSS中模糊查询操作是使用上述步骤中生成的查询关键字符号集合对符号语义树进行遍历再获取最终结果,其计算开销为(C1HB-FKS、WFKS和TTSS的计算复杂度如表2所示.HB-FKSO(ldkm+log2k)O(ldlog2k)O(ld(log2k+m))WFKS[6]TTSS[12]O(ldk(l+1))O(ld(l+1))从上述分析结果和表2可以看出,在索引生成和查询条件生成方面,HB-FKS并不是计算功耗最低的算法,为了加强数据的安全性和节省存储开销,查询条件和索引关键字需要经过一定程度的预处理再存入布鲁姆过滤器,WFKS和TTSS主要采用枚举集合,因此存储开销更大.在执行密文模糊查询时,HB-FKS性能优势得到了体现,Huffman树的叶子节点深度会根据关键字TF×IDF评分的不同进行相应的变化,评分高的关键字叶子深度较浅,反之则较深.6.2算法安全性分析(1)索引安全.WFKS、TTSS和HB-FKS这3种算法在索引构建过程中均采用了基于通配符的模糊集合构造算法以节省存储开销,然而3种算法在索引的安全性保护方面采用了不同的方法.WFKS算法中,索引关键字wi通过常规的对称加密算法进行加密保护,数据拥有者持有的对称密钥ski对服务器保密,然而以常规的对称加密算法生成的安全索引难以抵御基于关键字频率信息的字典攻击;TTSS算法在安全性方面没有进行加强,索引关键字的保护机制同样采用了基于共享密钥的对称加密算法.该算法致力于减少索引关键字重复率较高情形下的存储开销,引入了特殊符号集合Δ={α1,α2,…}用于替换索引关键字,以构建基于符号的前缀语义树(TheSymbol-basedTrie-Tree).基于特殊符号集合元素替换生成的安全索引并未对关键字频率做相应处理,因此对于字典攻击同样缺乏有效抵御能力;HB-FKS算法中,文件索引中的关键字如wi的频率信息scwi码hafwi模糊集合Swi_1被进一步映射至相应的布鲁姆过滤器Bwi_1,以确保索引信息的安全性.各个布鲁姆过滤器Bwi_d的映射函数是一系列独立同分布哈希函数h1,h2,…,hm,具有理论上的不可逆性,攻击者无法通过哈希值对原始信息进行逆推.然而在获知部分明文的情形下,攻击者可通过截取查询结果索引的方式累计足够的索引编码样本,随后结合已知明文信息对密文数据进行破解.通过明文信息破解密文的攻击方式主要分为两类,一类是以密文信息长度的可区分性为基础,另一类则是利用密文信息的频率可区分性.后者又称为字典攻击.本文采用的Huffman编码具有长度可区分性,但结合布鲁姆过滤器Bwi_1应索引树后,所有文件索引具有了相同的字节长度,避免了因长度信息导致的安全问题,即能有效抵御第一类攻击;对于第二类攻击,本文的Huffman编码树并不是基于关键字内容进行构建的,其计算基础是TF×IDF评分信息,对关键字频率信息进行了保护,并通过布鲁姆过滤器各个独立同分布的哈希函数进行映射编码存储.布鲁姆过滤器引入的随机性和假阳性对关键字频率信息进行了扰动,使其可区分度进一步降低.为了方便表达,不妨令各个哈希函数的冲突率均为Ph,布鲁姆过滤器的假阳性为fp,假定攻击者能在O(1)时间内对任意哈希函数进行破解,则特定的索引关键字wi被攻击者获知的概率为(1-fp)×PmPage10为关键字的Huffman编码长度.(2)查询条件安全.WFKS算法中,用户的查询条件集合元素Twi合的构建方式是一致的,即采用同样的对称加密函数以及共享的对称密钥ski对查询关键字wi的模糊集合元素进行相应处理,因此查询条件面临着索引构建过程中同样的安全问题,即字典攻击;TTSS算法中的查询条件Twi成中应用的符号替换算法,生成的查询条件可用于对前缀语义索引树进行高效遍历,但相比WFKS,该算法在安全性方面并未进行提升,因此也同样难以有效地抵御字典攻击;在HB-FKS算法中,为了节省计算开销,查询条件的生成和索引关键字模糊集合的计算存在一定的差异.查询条件包含的关键字wq对应的模糊关键字集合会生成相应的Huffman编码hafwi的密文cwi全性.和上述算法加密方式不同在于:为了避免已知明文情形下的攻击,HB-FKS采用不可逆的加密算法,关键字wq的模糊集合成员被加密成为固定字节长度的密文.假定攻击者能在O(1)时间内对加密算法进行破解,则关键字wq某特定模糊集合成员真实值被攻击者获知的概率为(1/2HL)×(1/2CL),其中CL为密文长度(本文采用MD5加密函数,其密文长度为64位,可扩展替换为密钥更长的强加密算法).(3)查询计算安全.WFKS算法中,服务器通过对比查询条件集合{Twi}中的相同元素,以查找用户所需的文件数据.{Swi_d然而只有在攻击者未获取相应频率信息的情形下,算法才能保障查询计算的安全性,此外这种枚举方式构建的索引集合的查找效率较低;TTSS算法对索引的构建方式有所改进,因此服务器在查找计算过程中可通过基于特殊符号的查询条件{Twi型结构的前缀语义索引Gw进行遍历查找.然而由于安全机制方面仍然沿袭了WFKS中对称加密的方法,因此,查询计算的核心仍是密文匹配,对于字典攻击缺乏有效的抵御能力;在查询处理过程中,攻击者可以不断截获查询结果和查询条件的编码以构建样本,并根据密文样本长度和出现频率,结合已知的明文推测密文内容.HB-FKS算法中,DSP服务器系统的查询计算包含两个方面,一方面是基于查询条件对Huffman编码树进行高效遍历,另一方面是遍历至叶子节点处时,DSP通过将查询条件映射至布鲁姆过滤器Bwi_1字wq和各个模糊集合Swi_1属关系,最终返回查询结果文件cf1,cf2,…,cfn.布鲁姆过滤器的采用使得文件索引长度固定,不再具有长度可区分性,而查询过程中传输的最终结果cf1,cf2,…,cfn包含了一定数量的假阳性数据,对频率信息进行了扰动.假定攻击者能在O(1)时间内对布鲁姆过滤器的各个哈希函数以及MD5加密算法进行破解,则查询条件和索引的明文被攻击者推算出来的概率为(1-fp)×Pm(1/2CL).6.3算法假阳性分析HB-FKS采用了布鲁姆过滤器作为Huffman索引树的叶子节点,用以节省模糊关键字集合的存储开销,因此,查询结果中难免引入部分假阳性数据.对于布鲁姆过滤器处理的关键字,需确定其具体长度l和布鲁姆过滤器涉及的编辑距离d,以确定布鲁姆过滤器中存储的元素个数n=C1l.n个元素的区分至少需要log2n个比特位,即最Cd低的布鲁姆过滤器长度.然而在实际情况中,为了确保较低的假阳性,布鲁姆过滤器的长度BL远远大于该值.假定布鲁姆过滤器对应的独立哈希函数个数为m,根据假阳性计算式(2),假阳性fp≈(1-e-mn/BL)m≈0.6185BL/n.系统通过控制相应参数实现查询结果中较低的假阳性.6.4关键参数分析本小节主要分析布鲁姆过滤器中独立同分布函数数量m对HB-FKS算法索引生成、存储开销和查询效率3个方面的影响.在索引计算方面,由于关键字模糊集合Swi_1,…,Swi_dSwi_2中m个独立同分布函数的映射处理,因此,HB-FKS算法中系统在预处理阶段对索引进行计算时,索引的计算时间和函数数量呈线性关系(参见6.1节);系统的存储开销不会受到独立同分布函数数量的影响,这是由于布鲁姆过滤器的长度BL是固定值,不会受到存储元素数量的影响,我们在第7节实验部分对该结论进行了进一步验证;在查询方面,由于HB-FKS中模糊查询操作需要首先对Huffman索引树进行遍历,随后在叶子节点处进行布鲁姆过滤器映射操作,因此,独立同分布函数数量在系统对叶子节点进行映射操作时产生影响,叶子节点处的搜索时间和函数数量呈线性关系,但由于HB-FKS采用了Huffman索引树,结合树型结构在搜索效率方面的优势,从而能够降低多次映射带来的影响.Page11事实上,为了使保证的假阳性达到最小,独立同分布哈希映射函数的个数m需根据以下计算公式进行计算[37],即m=(BL/n)×ln2,其中BL为布鲁姆过滤器长度,n为插入布鲁姆过滤器的元素个数.7实验为了验证HB-FKS查询算法的查询效率,本文将采用IEEE标准数据库提供的2005~2015年INFOCOM,MOBICOM等8个会议论文集作为测试数据(包含50000个PDF格式文件和50个高频关键字,关键字最大长度为16个字符,最小长度为3个字符,平均长度7.22字符,编辑距离最大为3),以内存2G,CPU主频2.10GHz的PC机作为测试平台,对HB-FKS算法在索引生成、查询条件生成和查询操作的计算时间和存储开销进行仿真和分析,并和WFKS、TTSS算法进行比较,具体测试结果如下.7.1索引(1)生成时间.图9给出了HB-FKS,WFKS和TTSS这3种算法在DSP存储文件数量变化情形下的索引生成时间.从仿真结果可以观察到,WFKS索引生成时间略高于TTSS;HB-FKS的索引生成时间最长,约为TTSS生成时间的两倍.这是由于在生成索引关键字的模糊集合后,TTSS不再改变索引结构,而WFKS和HB-FKS均需要额外的计算时间对模糊关键字集合进行重新组织:WFKS将模糊关键字集合向预定义字符集合进行映射后重新构建基于共同前缀的语义树,而HB-FKS在构建基于关键字TF×IDF评分的Huffman树的同时,需要在Huffman树叶子节点处对关键字集合进行布鲁姆过滤器映射处理,存储不同编辑距离下的关键字,额外增加了哈希计算时间.尽管HB-FKS索引的生成计算时间更长,但索引和相关关键字的计算可通过线下预处理生成,并不会对查询系统性能产生影响;另外,相比TTSS而言,HB-FKS和WFKS索引的存储开销更小,安全性更高.(2)存储空间.图10是HB-FKS,WFKS和TTSS这3种算法在DSP存储文件数量从2500变化至50000情形下的索引存储空间.从实验仿真结果可以观察到,相比TTSS的索引存储开销,WFKS有了一定程度的提升;HB-FKS则在索引存储开销方面占有较大优势,比TTSS低96.46%,比WFKS低94.66%.这是由于一方面Huffman编码(又称为最优编码)的采用降低了树型结构的高度和关键字长度,另一方面布鲁姆过滤器的使用实现了采用固定字长比特位表示不同编辑距离下的模糊集合,在很大程度上降低了模糊集合引入的大量存储开销.7.2查询条件(1)生成时间.图11给出了HB-FKS、WFKS和TTSS这3种算法在DU查询请求数量从2变化至40情形下的查询条件生成时间(查询条件包含关键字长度最长为16字符,最短为3字符).实验仿真结果表明,HB-FKS的查询条件生成时间最长,是TTSS的两倍左右;WFKS的查询条件生成时间略高于TTSS.事实上,在大部分基于对称加密的查询算法中,查询条件的计算处理过程和索引的计算处理过程通常是类似的.上述3种算法均是基于对称加密算法实现安全查询的,因此查询条件的生成时间也会受到索引生成计算中相同计算因素的影响.在WFKS中,影响查询条件生成时间的主要因素仍然是前缀语义树的生成,而在HB-FKS中,查询条件计算时间则主要受到Huffman树构建和布鲁姆Page12过滤器映射的影响,布鲁姆过滤器哈希映射带来的计算开销影响相对Huffman树更大.(2)存储空间.图12是HB-FKS、WFKS和TTSS这3种算法在不同数量DU查询请求情形下的查询条件存储空间大小.在这3种基于对称加密的查询算法中,查询条件的存储方式和索引存储方式是类似的.即TTSS不对查询关键字的模糊集合做进一步处理;WFKS通过预定义符号集合构建语义树,前缀相同的模糊集合元素可共用部分存储空间,在图13模糊查询时间一定程度上降低了存储开销;HB-FKS则从降低树型结构高度和简化模糊集合表达方式两个方面节省存储开销,采用Huffman编码和布鲁姆过滤器实现这一目的.从仿真结果中可以看到,查询请求数量越少,3种算法的存储开销差异就越小,树型结构和布鲁姆过滤器带来的存储优势越不明显.7.3模糊查询图13(a)~(c)分别给出了HB-FKS、WFKS和TTSS这3种算法在DSP存储文件数量和DU查询Page13请求数量变化的情形下所需的查询时间.采用了树型结构的HB-FKS和WFKS具有较高的查询效率,分别比TTSS低99.96%和98.82%,其中HB-FKS的查询效率更高,比WFKS低96.74%.这是由于相对TTSS中基于模糊集合枚举方式的查询算法,树型结构具有显著的查询效率优势,在DU和DSP预约定关键字数量固定的情形下,树型结构可将查询效率的线性增长变为对数级增长.相比WFKS基于共同前缀的符号语义树方法,HB-FKS的Huffman树的高度更低,查询速度更快,且在数据频率保护方面的安全性更高.仿真结果中,TTSS的查询效率对文件数量的影响较为敏感,而在WFKS和HB-FKS中,查询效率受文件数量的影响较小.这是由于上述两种算法中的树型结构相对固定,高度只和事先约定的关键字数量相关,文件索引均分类放置在叶子节点,相比查询操作,索引和查询条件的生成受文件数量的影响较大.8结论DaaS模式是大数据时代主要的数据存储模式,密文查询是其提供的重要服务之一.精确密文数据查询难以容忍用户查询过程中的输入或格式误差,模糊密文查询作为功能补充实现了对非精确查询条件的兼容.针对现有模糊查询算法在安全性、查询效率和存储功耗方面的不足,本文提出了一种基于Huffman编码和布鲁姆过滤器的模糊查询机制HB-FKS.该机制基于关键字的TF×IDF评分规则构建Huffman树并进行相应编码,实现对数据高效查找的同时避免其频率信息的泄露.此外,本文采用了布鲁姆过滤器对不同编辑距离下的模糊关键字集合进行集成存储,降低了模糊集合带来的额外存储开销.算法分析和实验结果表明,HB-FKS算法在索引生成和查询条件生成时,由于需要执行布鲁姆过滤器映射计算,算法执行时间比现有的WFKS和TTSS算法更长,但在安全性能和存储开销方面更具优势.在执行查询算法时,布鲁姆过滤器和Huffman编码带来的优势得到了充分体现,相比现有工作,HB-FKS实现了高效率模糊查询.
