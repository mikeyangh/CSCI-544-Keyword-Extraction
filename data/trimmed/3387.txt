Page1一种面向公路网络的位置隐私保护方法薛姣1),2)刘向宇1),2)杨晓春1),2)王斌1),2)1)(东北大学医学影像计算教育部重点实验室沈阳110819)2)(东北大学信息科学与工程学院沈阳110819)摘要移动用户经常会发出基于目前位置的最近邻查询.通常移动终端(用户)向不可信的位置服务器发送查询请求,请求中包含移动终端的位置信息,因而导致位置隐私的泄露.给移动用户提供位置服务的同时,保护移动用户的位置隐私也至关重要,而这种需求在公路网络应用中尤为明显.根据公路网络的结构特点,提出了隐匿环和隐匿树这两种子图结构.利用隐匿环和隐匿树模糊移动用户在公路网络中的位置信息,可以有效地保护位置隐私.文中提出了一种新的位置隐私保护方法———隐匿环与森林(CCF),即利用宽度优先搜索在图中寻找满足一定要求的环和森林.对于包含单行线的公路网络,CCF依然能够保护移动用户的位置隐私.在基于真实与模拟数据集的实验测试中,CCF方法显示了其在保护位置隐私方面的有效性以及在提供服务质量方面的高效性.关键词位置隐私;基于位置服务;公路网络;子图隐匿;单行线1引言近年来,基于位置服务(LBS)逐渐走入人们的生活,以智能化的互动方式给人们的生活带来了极大便利,使人们对其需求出现了大量增长.例如,基于位置服务可以给移动用户提供感兴趣地点的查询(“离我最近的公交站牌在哪?”)、位置导航(“去火车站怎么走?”)、实时路况信息查询(“车辆目前在三好街是否能畅行?”)等.为了获得基于位置服务,移动用户需要向位置服务提供商发送包含他们精确位置信息的查询请求.通常情况下,位置服务提供商的服务器都是不可信的,用户的位置信息很容易被攻击者窃取.在窃取到移动用户的位置信息之后,攻击者可能会通过位置追踪或者链接其它的一些公开信息(例如地理编码数据库、电话本等)重新确认用户的身份,进而得知用户更多的隐私信息,例如,移动用户的生活方式、健康状况、政治背景等[1].如何保护移动用户的位置隐私?这个问题已经引起了专家、学者们的高度重视,很多解决方案也相继提出.目前绝大多数的研究工作都假设移动用户在欧式空间(自由空间)中移动,即他们的移动方向不受任何约束,采用的主要保护方法是将用户的精确位置用一个至少包含其它k-1个人的空间区域来代替,从而使攻击者无法将某一个人的位置信息通过推理攻击的方式与其身份相匹配.同时,这种方法利用空间区域面积的大小以及所包含人数的多少来衡量为用户提供的隐私保护力度.但是在现实生活中,人们无论是步行还是乘坐某种交通工具,总是要遵循固定的公路网络.例如,图1显示的就是一个简单的公路网络模型,模型中有移动用户以及他们感兴趣的地点.显然,在公路网络环境下,不能再利用空间区域面积的大小来衡量隐私保护的强弱,因为对于公路网络上两个面积相等的空间区域,如果一个包含一条路段①,而另一个包含三条路段,那么后者的保护强度要大于前者.此外,只包含一条路段的空间区域也很容易导致用户被攻击者跟踪[2].所以,空间区域隐匿的方法不再适用于公路网络环境下.此外,为了缓解交通压力,目前已有很多城市都在实行单行化交通,即规定车辆在某些路段上只能朝一个方向行驶.国内外的很多实践也均证明了单行化交通对解决城市交通问题发挥着重要作用.那么在包含单行线的公路网络(复杂公路网络)中如何保护移动用户的位置隐私?这是一个新挑战.挑战.现实生活中的公路网络有其自身结构特点;位置隐私保护的效能与基于位置服务的质量之间也存在着一种权衡.如何挖掘公路网络中潜在的结构特点以保护移动用户的位置隐私安全并为他们提供高质量的位置服务,这将是一个很大的挑战.贡献.通过观察简单和复杂公路网络的结构特点,定义了两种隐匿子图结构,即隐匿环和隐匿树(移动用户分布和位置隐私都满足一定要求的环和树).基于这两种隐匿子图结构,提出了一种新的位置隐私保护方法———隐匿环与森林(CloakingCycleandForest,CCF).CCF不仅能够有效地保护移动用户的位置隐私安全,而且还能够给移动用户提供高质量的位置服务.此外,首次考虑了包含单行线的公路网络,并使用CCF成功解决了这种复杂公路网络环境下的位置隐私保护问题.本文第2节回顾位置隐私保护技术的相关工作;第3节介绍一些背景知识并给出要解决问题的正式定义;第4节和第5节分别介绍简单公路网络模型中的隐匿环构造和隐匿树构造;第6节介绍复杂公路网络中的位置隐私保护,并给出完整的位置隐私保护方法CCF;系统的实验结果与分析将在第7节中介绍;第8节总结全文.2相关工作近年来,关于如何保护移动用户的位置隐私已经提出了很多方法.这些方法可以大体分为空间区域隐匿[1,3-9]和假位置[10-11]两种技术.大多数采用空间区域隐匿技术的文章都使用了位置k-匿名模型.该模型是在文献[1]中被首次提出的,位置k-匿名是指当一个人的位置信息至少和其它k-1个人的①路段是指一个前后相继的边序列,除了两个端点的度等于Page3位置信息不可区分时,那么这个人的位置就满足了位置k-匿名.文献[1]中还提出了一个基于四叉树的Interval-Cloak算法.由于该文献中的k值是系统设定的,不符合位置隐私个性化需求的特点,所以文献[3]提出了用户可以定制的k-匿名模型,允许用户自己指定匿名程度的高低,同时文献提出了Clique-Cloak算法.文献[4]针对文献[3]中匿名成功率低的缺点,提出了一种改进的基于有向图的隐匿算法.文献[5]利用完全金字塔数据结构以及不完全金字塔数据结构来维护移动用户的位置信息,并基于这两种数据结构分别提出了基本的和自适应的隐匿算法.文献[6]则提出了动态自底向上和动态自顶向下的格隐匿算法.文献[7]分别提出了Nearest-Neighbor-Cloak算法和Hilbert-Cloak算法.以上文献中采用的系统结构都是中心服务器结构.而文献[8-9]则采用的是分布式点对点结构.文献[8]中,移动用户在向位置服务器发送查询之前,先通过向其它对等节点发送成组请求来组成一个空间区域,然后再将此区域和查询一同发送给服务器.由于该方法在很多情况下都会匿名失败,所以文献[9]提出了一个基于Hilbert填充曲线的高级k-匿名空间范围构建机制,提升了系统的匿名成功率.文献[10-11]采用了假位置技术.文献[10]中,移动用户自行生成一些假位置,然后将自己的真实位置和生成的假位置一同发送给服务器,由于攻击者辨别不出用户的真实位置,所以用户的位置隐私得到了保护.在文献[11]中,移动用户只发送一个他指定的假位置,然后服务器根据这个假位置进行增量最近邻查询,并将查询结果返回给用户,用户再根据返回的结果检索出自己想要的答案.因为攻击者得到的并不是用户的真实位置,所以用户的位置信图2位置匿名体系结构3.3移动用户位置隐私目前,已经有两种位置隐私保护模型被提出,一种是位置k-匿名,一种是路段l-多样性,本文结合了这两种模型.路段l-多样性由Wang在文献[2]中息也得到了保护.以上提到的工作中都假设用户在一个自由空间中移动.但是在现实生活中,人们经常是沿着公路网络行进.文献[2]首次注意到了这个问题并提出了XStar的位置隐私保护模型.但是文献[2]中只考虑了简单公路网络(所有道路都是双行线)环境下的位置隐私保护,而本文则是在同时考虑简单和复杂公路网络(包含单行线的情况)的基础之上,提出了一种新的基于隐匿子图的位置隐私保护方法.3背景知识与问题定义本节将介绍与本文工作密切相关的公路网络模型、位置匿名系统结构、移动用户位置隐私以及问题定义.3.1简单公路网络模型使用无向图G=(V,E)来表示一个简单的公路网络.例如,图1显示的是一个简单的公路网络模型.模型中的每条边可以看作是一条双行线公路.度为1的顶点可以看作是公路的尽头;度为2的顶点可以看作是路弯;度大于等于3的顶点可以看作是公路的交叉口.此外模型中还用小正方形来表示移动用户,用小圆点来表示移动用户感兴趣的地点,例如商店、加油站、旅馆等等.3.2位置匿名系统结构采用中心服务器结构[12],即在移动客户端和位置服务器端之间增加一个可信的服务器,通常称作位置匿名器.如图2所示,位置匿名器将对用户的精确位置信息进行匿名处理,同时对位置服务器端返回的候选结果进行求精处理.本文的主要工作就是为位置匿名器设计一个有效的位置匿名算法.提出的.它是指如果一个用户的位置信息满足位置k-匿名,并且在匿名位置中至少包含了l条不同的路段,那么这个匿名位置就满足路段l-多样性.试想如果一个匿名位置只包含一条路段,那么攻击者将Page4会很容易跟踪沿这条路段行进的人.相反,如果有三条或者更多条路段出现在此匿名位置中,那么攻击者的跟踪难度就会增大.所以,路段l-多样性是公路网络中保护移动用户位置隐私的一个必不可少的条件.k和l都是衡量位置隐私保护强弱的参数,本文还给出另外一个参数,即lmax.lmax表示一个匿名位置中所包含路段数的上限.虽然较多的路段数能够给用户提供较强的位置隐私保护,但是这会导致位置服务器端较高的查询处理代价,并且给用户提供的服务质量下降.为了达到隐私保护、查询处理代价以及服务质量三者间的平衡,提出lmax路段数量约束参数.定义1(位置隐私).以(k,l,lmax)来表示一个移动用户的位置隐私.其中k表示匿名位置中至少包含的移动用户数量,l(lmax)表示匿名位置中至少(至多)包含的路段数量.用户u的位置隐私(k,l,lmax)可以简单地表示成pp(u)=(k,l,lmax).一个用户的位置隐私由他自己决定,并且该位置隐私会随着用户的精确位置信息以及查询一同发送给位置匿名器.3.4问题定义首先对攻击者的背景知识做一些假设:假设攻击者预先知道位置隐私保护算法,并且能够获知公路网络上每条路段上移动用户的数量.基于此,给出本文的问题定义.问题.假设有一个请求LBS的移动用户u,他的位置隐私为(k,l,lmax).那么位置匿名器应如何为u找到一个隐匿路段集S(S中包含了l条路段,k个移动对象),使得S不仅覆盖u的精确位置,而且要满足Skk,lS.llmax,此外,攻击者不能够以很高的概率(>0.5)从S中推断出u的具体位置.那么攻击者在窃取到一个隐匿路段集S后,他是如何对用户u的具体位置做出推断呢?通常情况下,攻击者会对S中的每条路段si(i=1,2,…,l)都依次假设u位于该路段上,接着他会对该路段执行位置隐私保护算法,并得到一个包含该路段的隐匿路段集Sai,然后他将Sai与S进行比较,得出这两个集合中相同路段的个数与S中所有路段个数的比值ri,最后攻击者推断u在路段si上的概率就是ri与r1+r2+…+rl之间的比值[2].4简单公路网络下的隐匿环构造本节首先分析简单公路网络中环结构所具有的保护性,然后介绍为用户寻找最优隐匿环的3个步骤.4.1隐匿环通过观察简单公路网络模型的结构特点发现,环因其对称性而能够保护公路网络上移动用户的位置隐私.因为对于一个环,攻击者无论对该环上的哪条边执行找环算法,他都会得到和该环相同的一个环,进而他推断出用户在该环上每条边上的概率都相等,所以,攻击者无法确定出用户所在的边(具体位置),那么用户的位置隐私也将会得到很好的保护.根据对攻击者背景知识的假设,攻击者是能够得知每条路段上移动用户的数量,所以攻击者很有可能还会利用这点去排除用户不可能存在的路段.所以,经上述分析,定义出了一种能够保护移动用户位置隐私的隐匿环.定义2(隐匿环).无向图中的一个环,它所包含的移动用户数量和路段数量都满足用户的位置隐私,并且该环中至少有两条路段上有移动用户存在.在无向图中,覆盖一个用户位置的环可能有多个.例如,在图1中,覆盖u1的环除了〈n13,n14,n18,n17,n13〉之外,还有环〈n14,n15,n19,n18,n14〉、环〈n14,n3,n4,n5,n15,n19,n18,n14〉等.所以在为用户找到了覆盖他的环之后,还要接着判断这些环是否是隐匿环.如果有多个环都符合隐匿环的条件,那么选择移动用户数量和路段数量均最接近用户位置隐私的环(称这种环为最优隐匿环)来作为用户的隐匿位置.这是因为在所有的隐匿环中,移动用户数量和路段数量相对较多的环会给位置服务器端造成较高的查询处理代价,同时也会使给移动客户端提供服务的质量下降.所以选择最优隐匿环是很有必要的一步.为了能够快速找到最优隐匿环,先找到覆盖用户位置的最小环,然后判断这些环是否满足隐匿环的条件,如果只有一个环满足条件,那么此环就是所要寻找的最优隐匿环;如果有多个环同时满足条件,那么就从中选出一个最优隐匿环;如果所有环都不满足条件,那么就对那些移动用户数量和(或)路段数量小于用户位置隐私的环先进行扩展,然后再判断扩展后的环是否满足隐匿环条件,最后从符合条件的扩展环中选择出最优的隐匿环.4.2发现最小环利用无向图中宽度优先搜索的方法为用户发现最小环.为了使最小环能够覆盖用户所在位置,以用Page5户所在边的两个端点分别作为搜索最小环的起始点和目标点.所以在搜索开始之前,先根据用户所在的边指定出搜索的起始点和目标点(因为在无向图中,无论指定哪个端点为起始点,最后为用户发现的最小环都是一样的,所以起始点可以是两端点中的任意一个.如果起始点选定了,那么另外一个端点就是目标点),然后再从起始点开始进行宽度优先搜索,当搜索到的顶点是目标点时,覆盖用户位置的最小环就被发现了,接着再利用递归的方法从访问过的边中找出构成该最小环的各条边.发现最小环的具体细节见算法1.算法1.发现最小环.输入:无向图G;用户id;访问顶点队列犙;访问边向量犞输出:构成最小环的各条边1.根据用户id定位用户所在的边;2.取得边上的相关信息ueinfo;3.指定搜索的起始点nstart和目标点nstop;4.置G中所有顶点和边为未被访问;5.访问顶点nstart、nstop以及边nstartnstop;6.nstart入队列Q;7.while队列Q不空8.对头元素出队列,并赋值给变量u;9.foreachu的邻接顶点w10.ifw未被访问11.访问w,并把w插入队列Q中;12.访问边uw,得到边uw上的信息einfo,并保存13.else14.if边uw未被访问15.访问边uw,得到边uw上的信息einfo,并保16.endif17.endif18.ifw=nstop并且u≠nstart19.将(nstop,nstart,ueinfo)插入向量犞中;20.利用递归的方法找到构成该最小环的各条21.endif22.endfor23.endwhile下面以为用户u1发现最小环为例来说明发现最小环的过程.首先,因为u1所在边是n14n18,所以指定n18为起始点,n14为目标点(在图3(a)中,用灰色实心圆圈来表示搜索的起始点和目标点).然后将无向图图G上所有顶点和边都置为未被访问,并将顶点n14、n18以及边n14n18都置为已被访问.接着搜索从n18开始,首先访问n18未被访问的邻接顶点n17、n19以及邻接边n18n17、n18n19,同时保存边n18n17、n18n19的信息,同理,n17、n19的未被访问的邻接顶点n13、n16、n15和邻接边n17n13、n17n16、n19n15也会被依次访问,当访问到的邻接顶点是n14时,最小环就被发现了.最后,本例中为u1发现了两个最小环,即〈n18,n17,n13,n14,n18〉和〈n18,n19,n15,n14,n18〉.图3(a)中用粗实线表示从起始点n18到目标点n14所访问过的路径.同时,图3(b)中用虚线显示了在简单公路网络模型中为u1发现的两个最小环.图3利用宽度优先搜索为u1发现最小环示意4.3选择最优隐匿环在对每一个最小环上的移动用户数量和路段数量进行统计之后,对于那些符合隐匿环条件的最小环,利用式(1)来衡量每一个隐匿环与用户位置隐私的接近程度,也就是为每一个隐匿环进行打分,得分越高就说明越接近用户的位置隐私.在式(1)中,βk和βl是两个权重系数,它们的取值都在0到1之间,并且βk+βl=1.kp和lp代表了用户位置隐私中要求的移动用户数量和路段数量,而kc和lc代表了隐匿环上包含的移动用户量和路段数量.当kp=kc,lp=lc时,scorec达到最大值1.理论上分析,路段数量的多少对查询处理代价有较大的影响,因此更看重lc与lp的接近程度.所以实验中设置βl=0.6,βk=0.4.4.4扩展最小环扩展最小环是针对那些环上移动用户数量、路段数量都小于(其中一个小于)用户位置隐私以及(或者)环上有移动用户的路段数小于2的最小环.采用类似于在最小环上起跑的方法.首先保存最小环上顶点度数大于2的顶点;然后从这些顶点中选出搜索的起始点和目标点(可能是多对);接着再基于每一对起始点和目标点搜索最小环的扩展部分.例如,对于u1的最小环〈n18,n17,n13,n14,n18〉,如果选择(n14,n13)为起始点和目标点,那么可以得到环〈n14,n3,n2,n13,n17,n18,n14〉,如果选择(n13,n17),则可以得到环〈n14,n13,n8,n7,n16,n17,n18,n14〉.为Page6了保证扩展后的环依然能覆盖用户的位置,不能再次选择(n14,n18)为搜索的起始点和目标点.5简单公路网络下的隐匿树构造本节首先定义出与隐匿环互补的子图隐匿树,然后介绍如何为用户寻找隐匿树的两个步骤.5.1隐匿树隐匿环虽然能够保护移动用户的位置隐私,但是并不是为所有的用户都能够发现覆盖他们位置的最小环.例如,图4显示的是为用户u2发现最小环的过程.因为u2所在边是n8n9,所以指定搜索的起始点为n9,目标点为n8.算法从n9开始搜索,并期望搜索到顶点n8,但是很遗憾,直到搜索结束也没有发现n8,也就是说在公路网络中没有覆盖u2位置的环.通过观察没有发现最小环的子图(例如,图4中的子图),发现它们其实都是自由树,所以联想到可否用自由树来作为用户的隐匿位置.下面就逐渐定义出能够保护移动用户位置隐私的自由树.定义3(树边).无向图中不被任何环覆盖的边.定义4(边界树).无向图中一个仅由树边构成的自由树.例如,在图4中显示的就是一个边界树.因为边n9n10、n9n11都是树边.定义5(相对最大边界树———RMBT).无向图中的一个边界树,如果再向它添加一条边,那么它就不是边界树了.例如,在图1中,由边n9n10、n9n11、n9n8、n8n12所构成的边界树就是一个相对最大边界树.因为对于每一条构成一个相对最大边界树的边来说,它们的相对最大边界树都是唯一且相同的,攻击者无论对哪条边执行寻找相对最大边界树算法,他都会得到同样的一个相对最大边界树,所以,在攻击者还不能够知道公路网络上每条路段上移动用户数量的情况下,他会得出用户在每条边上的可能性都有.那么在攻击者能够得知每条路段上移动用户数量的情况下,如何保护移动用户的位置隐私呢?下面给出隐匿树的定义.定义6(隐匿树).一个相对最大边界树,它所包含的移动对象数量和路段数量都满足用户的位置隐私,并且该树中至少有两条路段上有移动用户存在.根据隐匿树的定义,要为用户寻找覆盖他位置的隐匿树,首先应该找到覆盖他位置的相对最大边界树,然后对此相对最大边界树进行判断,看它是否满足隐匿树的条件,如果满足,那么就以此相对最大边界树作为用户的隐匿树,如果不满足,则将多个相对最大边界树进行组合,即通过构造隐匿森林,来达到满足用户位置隐私和移动用户在路段上分布的要求.5.2寻找相对最大边界树寻找相对最大边界树的过程其实就是在宽度优先搜索的过程中逐渐搜索树边的过程.因为用户所在的边本身就是一条树边,所以首先保存用户所在的边的信息,然后访问该边的两个顶点,并将它们先后插入到队列中.对于出队列的每一个顶点,先判断该顶点与它未被访问的邻接顶点之间的边是否是树边,如果是树边,那么就访问此邻接顶点,并将此邻接顶点插入队列(表明此路径还要继续搜索下去),然后保存该树边的信息;如果不是树边,那么就不对该顶点的邻接顶点做任何操作(表明这条路径的搜索就到此为止).重复以上步骤,直到队列为空停止.算法2给出了为用户寻找相对最大边界树的具体细节.算法2.寻找相对最大边界树.输入:无向图G;用户id;访问顶点队列犙;保存树边向输出:构成相对最大边界树的各条边1.根据用户id得到用户所在的边ninj;2.取得边ninj的相关信息ueinfo;3.将(ni,nj,ueinfo)存入向量犞中;4.把无向图G上的所有顶点都置为未被访问;5.访问顶点ni、nj;6.ni、nj入队列犙;7.while队列犙不空8.对头元素出队列,并赋值给u;9.foreachu的邻接顶点w10.ifw没有被访问11.访问w;12.判断边(u,w)是否是树边;13.if边(u,w)是树边14.w入队列;15.取得到边(u,w)上的相关信息einfo;Page716.将(u,w,einfo)存入向量中;17.endif18.endif19.endfor20.endwhile下面以为用户u2寻找相对最大边界树为例来说明上述过程.因为u2所在的边是n9n8,所以先保存边n9n8的信息,然后访问顶点n9、n8,并将它们先后插入队列中.随后n9出队列,宽度优先搜索就从n9开始.如图5(a)所示,n9未被访问的邻接顶点有n10、n11,由于边n9n10、n9n11都是树边,所以将n10、n11置为已被访问之后,就将它们也先后插入到队列中去,并保存边n9n10、n9n11的信息,图中用粗实线来表示保存的边.接着n8出队列,由于边n8n7、n8n13不是树边,所以不对顶点n7、n13再做任何操作.而边n8n12是树边,所以访问n12之后,就将其插入队列,并保存边n8n12的信息.因为顶点n10、n11以及n12已再没有未被访问的邻接顶点了,所以算法到它们都出队列之后就终止了.最后,为用户u2找到的相对最大边界树就是由边n9n10、n9n11、n9n8、n8n12所构成的子图.图5(b)中用虚线显示了在简单公路网络模型中为u2找到的相对最大边界树.5.3构造隐匿森林为了减少位置服务器端的查询处理代价,要求构造的隐匿森林中所包含的移动用户数量和路段数量要尽可能最接近用户的位置隐私.那么如何达到这个要求?本文首先保存路段数分别为1、3、5的具有低查询处理代价的相对最大边界树信息,并将每种路段数的相对最大边界树信息按照树中所包含移动用户数量的多少从小到大进行排序.如果是由于移动用户数量少的原因而去构造隐匿森林,那么先计算出移动用户数量的差值dif_k,然后从路段数为1的相对最大边界树信息中选择一个移动用户数量最接近dif_k的相对最大边界树;如果是由于路段数量少的原因而去构造隐匿森林,那么先计算出路段数量的差值dif_l,然后根据dif_l计算出所需各路段数的相对最大边界树的个数,再根据这些个数顺序选取每种相对最大边界树;如果是由于移动用户数量和路段数量都小于位置隐私而去构造隐匿森林,那么除了根据dif_l计算出所需各路段数的相对最大边界树的个数之外,还要选出移动用户数量最接近于dif_k的相对最大边界树的组合.6复杂公路网络下的位置隐私保护前面两节主要介绍了如何通过在无向图中构造隐匿环和隐匿树的方法来保护简单公路网络模型中移动用户的位置隐私安全,那么本节将要介绍在复杂公路网络模型中的位置隐私保护问题.完整的位置隐私保护算法在本节最后给出.在现实生活中的公路网络中,单行路也是一种很常见的道路.它在缓解城市交通拥挤、减少交叉口的冲突点、提高车辆运行速度等方面起着非常大的作用.目前,全世界已有很多城市在实行单行化交通,例如纽约、伦敦、新加坡等等.对于包含单行线的公路网络,可以将其抽象为一个有向图.例如,图6显示的就是一个复杂的公路网络模型.在该模型中,有4条单行线,即弧n17n13、n13n2.、n3n14以及n14n18.那么在复杂的公路网络模型中,如何保护移动用户的位置隐私安全,经研究发现,隐匿环与隐匿树的子图结构依然能够给用户提供位置隐私保护.6.1有向隐匿环构造在有向图中,顶点与顶点之间由弧相连接,所以有相图中的环都是有方向的(顺时针方向或者逆时针方向),但是这并不妨碍它们所具有的保护性.因为对于一个有向环,攻击者无论对该环中的哪条弧执行找环算法,他都会得到和此环相同的一个有向环,所以,如果一个有向环满足用户的位置隐私,并且它至少有两条弧上有移动用户存在,那么这个有Page8向环就能够保护用户的位置隐私,将这种环称为有向隐匿环.为用户寻找一个最优的有向隐匿环同样也分为发现最小有向环、选择最优的有向隐匿环和扩展最小有向环三步.其中选择最优的有向隐匿环与无向图中选择最优隐匿环的方法一样,而其它两步与无向图中的稍有差别,因此下面就主要介绍发现最小有向环和扩展最小有向环.对于发现最小有向环,如果用户位于双行线上,那么要为用户指定两次起始点,并进行两次搜索.因为在有向图中,基于不同的起始点得到的有向环可能会不一样.例如,图7(a)、(b)中显示的就是在基于不同起始点的情况下为用户u4发现的两个最小有向环,即环〈n14,n18,n17,n13,n14〉和〈n13,n2,n3,n14,n13〉.图7基于不同的起始点为用户u4发现最小有向环示意对于扩展最小有向环,因为在有向图中,一个顶点的度有出度和入度之分,所以在选择搜索扩展环的起始点和目标点时和无向图中的会有所不同.首先将最小有向环上各顶点的出度和入度分别减1,然后保存剩余出度大于0的顶点和剩余入度大于0的顶点,再从这两类顶点中挑选出搜索的起始点和目标点.例如,在图6中,假设覆盖u1的最小有向环是〈n18,n17,n13,n14,n18〉,将环上各顶点的出度和入度分别减1之后,得到顶点n18、n17、n13、n14的出度和入度都大于0.如果选择〈n13,n14〉为搜索的起始点和目标点,那么将得到扩展有向环〈n18,n17,n13,n2,n3,n14,n18〉;如果选〈n17,n13〉,那么将得到扩展有向环〈n18,n17,n16,n7,n8,n13,n14,n18〉.6.2有向图中的隐匿树在有向图中,也会碰到为用户找不到最小环的情况,但是发生这种情况的用户一般都位于双行线上.因为公路网络中单行线的布局要符合单行互补理论,即在一条单行线的旁边必须要设计一个与之方向相反的单行线,而且它们要尽可能相近、相似、相平行.单行互补的理论保证了用户从某条单行线出发之后,他还能够通过其它线路而又重新回到此单行线上.因此,如果用户位于单行线上,肯定能够发现覆盖他位置的有向环.既然用户只有在双行线上时才会发生找不到最小有向环的情况,那么就可以将这类双行线看作是树边.要保护位于树边上用户的位置隐私,就可以为用户构造隐匿树或者隐匿森林.例如,对于图6中的用户u2,由于发现以〈n8,n9〉为起始点和目标点时没有发现最小环,而且以〈n9,n8〉为起始点和目标点时也没有发现最小环,所以确定n8n9为树边.那么如何为u2寻找相对最大边界树呢?如图8所示,先访问顶点n9、n8,并将它们插入队列中,然后宽度优先搜索从顶点n9开始.首先得到n9未被访问的邻接顶点n10,由于弧n9n10不被任何有向环覆盖,因此接着判断弧n10n9是否也不被任何环覆盖,如果是,那么n9n10就是树边,然后访问顶点n10,将其插入队列,并保存树边n9n10的信息.以同样的方法,判断出n9n11、n8n12也都是树边,所以为用户u2找到的相对最大边界树就是由树边n9n10、n9n11、n9n8、n8n12所构成的子图.图8复杂公路网络下为u2寻找RMBT示意如果为用户找到的相对最大边界树所包含的移动用户数量、路段数量小于用户位置隐私并且(或者)不满足移动用户在路段上的分布要求,那么同样也是为用户去构造隐匿森林,构造的方法与无向图中构造隐匿森林的方法基本相同,这里就不再介绍了.6.3隐匿环与森林保护方法当位置匿名器收到一个用户的匿名请求消息时,首先试图为用户构造隐匿环,如果发现了最小环,就接着执行选择最优隐匿环、扩展最小环的算法;如果没有发现最小环,那么位置匿名器将为用户构造隐匿树或隐匿森林.算法3描述了具体细节.算法3.隐匿环与森林———CCF.输入:无向图G;用户id;pp(u)输出:隐匿路段集1.为用户id寻找最小环(使用算法1);2.if找到最小环3.选择最优隐匿环;4.if选到了最优隐匿环Page95.返回此最优环作为用户的隐匿位置;6.else7.if存在可以被扩大的环8.扩展最小环;9.选择最优隐匿环;10.endif11.endif12.else13.为用户id寻找相对最大边界树(使用算法2);14.判断相对最大边界树是否是隐匿树;15.if是隐匿树16.返回此隐匿树作为用户的隐匿位置;17.else18.基于pp(u)为用户构造隐匿森林;19.endif20.endif7实验及结果分析本文算法使用C++编程语言实现,编程环境为MicrosoftVisualC++6.0.实验硬件环境为1.86GHz的Intel双核CPU,1GB内存.操作系统平台是MicrosoftWindowsXPProfessional.7.1实验数据集和参数设置实验数据集采用美国加州圣华金郡的公路网络数据.该公路网络数据包括18496个顶点,24017条边.为了模拟包含单行线的公路网络,实验特别设置了6569条边为单行线,并且这些单行线都符合单行互补理论.利用Brinkhoff[13]的基于网络的移动对象生成器生成了10000个移动对象.此外还生成了14849个在公路网络中均匀分布的感兴趣点,包括商店和加油站.同时,实验设置了1000个移动用户的最近邻查询请求消息.lmax用户的查询请求消息中包括了4个参数,即(k,l,lmax,knnp).其中k,l,lmax代表了用户的位置隐私,knnp代表用户要查询的最近邻感兴趣点的个数.在所有的查询请求中,假设这4个参数都服从正态分布.表1给出了这4个参数默认的平均值和方差.实验中,令其中一个参数取不同的平均值,而另外的3个参数分别取各自的默认值并且保持不变.7.2算法衡量标准实验分别从平均信息熵、匿名成功率、平均匿名执行时间、相对匿名度、平均查询执行时间以及平均候选结果大小6个方面对提出的算法进行衡量.(1)平均信息熵.攻击者通过计算会得出用户在隐匿位置中每条路段上的概率pi(i=1,2,…,l),那么给用户提供的保护强度就可以用此概率分布的信息熵来衡量[2],其计算公式如式(2)所示:H=-p1log10p1-p2log10p2-…-pllog10pl(2)信息熵越大,攻击者猜出用户具体位置的平均不确定性就越大,进而用户所得到的保护强度也就越大.(2)匿名成功率,指算法成功匿名的消息数在所有移动用户发送的消息数中所占的百分比[12].它能够反应出位置隐私保护算法对用户查询请求的响应能力,其值越高,表明算法越好.对于不能成功匿名的消息,本文将采用假位置[10]的方法,即在公路网络中随机生成其它k-1个假位置,然后将用户的真实位置和这些假位置一同发送给位置服务器,由于攻击者辨别不出哪个位置是用户的真实位置,因此用户的位置信息得到了保护.(3)平均匿名执行时间,指位置匿名器平均对一个用户的精确位置进行匿名处理所花费的时间.它是用来衡量一个位置隐私保护算法执行效率,其值越小,算法效率就越高.(4)相对匿名度,指匿名位置中包含的移动对象数量k(路段数量l)与用户位置隐私中的移动对象数量k(路段数量l)的比值.它可以表示成式(3).当l、lmax不变的情况下,RALk越大越好,因为固定路段上移动对象数量越多,用户所得到的保护强度就会越大.当k、lmax不变的情况下,RALl越接近于1越好,因为太多的路段会导致较高的查询处理代价,用户所享受服务的质量也会下降.(5)平均查询执行时间,指位置服务器平均对一个匿名位置进行查询时所花费的时间.它是用来衡量位置服务器端的查询执行代价,查询花费的时间越少,服务器端的查询执行代价就越低,表明算法的性能越好.本文实验中模拟位置服务器,对各隐匿子图进行了kNN查询,以测试提出算法的性能.(6)平均候选结果大小,指位置服务器对一个匿名位置查询之后,返回给位置服务器端的平均候选结果大小.它是用来衡量位置服务器端与位置匿名器之间的通信代价.平均候选结果数量越少,通信Page10代价就越低,表明算法的性能越好.7.3实验结果分析(1)平均信息熵.图9(a)、(b)显示的当参数k图9平均信息熵从图中可以看到无论是简单公路网络还是复杂公路网络,平均信息熵都大于0.5,而且复杂公路网络中的平均信息熵要比简单公路网络中的高,说明本算法在复杂公路网络中给用户提供的隐私保护强度要大于简单公路网络.此外,从图9(a)、(b)的对比中还可以看出,隐匿位置中路段数量越多,用户所得到的保护强度就越大.在图10(a)、(b)中,随着k和l的增大,简单公路网络中匿名成功率都略微有所下降,而复杂公路图10匿名成功率和l取不同的平均值时,本文算法对移动用户提供的隐私保护强度.(2)匿名成功率.图10显示了匿名成功率在各参数不同设置情况下的变化.从这4个图中可以看到简单公路网络中的匿名成功率比复杂公路网络中的要高.这是因为加上单行线之后,某些道路在交通行进方向上有了约束,导致了公路网络中环的数量减少.尤其是原本能够扩展的环,在加上单行线之后就不能被扩展了,从而导致匿名失败的情况比较多.网络中匿名成功率的下降幅度较大,尤其是当l的平均值等于15时,匿名成功率不到65%.这说明本Page11算法在复杂公路网络中对过高的位置隐私(k和l的平均值都大于等于12)的保护效果不好.图10(c)中,随着lmax的增大,匿名成功率都呈上升趋势.当lmax的平均值等于5时,匿名成功率异常的低,这可能是因为在为用户找到的隐匿位置中,路段数量大于5的情况很多,所以导致很多隐匿位置都因l>lmax而导致匿名失败,可见对参数lmax的默认值设置不能太小.从图10(d)中可以看到当各隐私参数分别取默认值时,简单公路网络中的匿名成功率接近于95%,而复杂公路网络中的匿名成功率接近于85%.(3)平均匿名执行时间.由于发现最小环和扩展最小环都利用了宽度优先搜索的方法,所以它们图11平均匿名执行时间(4)相对匿名度.图12、图13显示的是k的相对匿名度和l的相对匿名度分别在参数k和l不同设置情况下的变化.在图12中,随着k的增大,RALk在迅速下降,而RALl略微有所升高.这说明移动用户数量的增多,并没有引起太多路段数量的增加,因而也不会导致较高的查询处理代价.从图13中可以看到,随着l的增大,RALk在逐渐升高,而RALl在急剧下降.说明隐匿位置中包含图12RALk、RALl相对于参数k的不同设置的时间复杂度均为O(|V|+|E|).对于寻找相对最大边界树的算法,因为在每一次搜索中都要判断一条边是否是树边,所以时间复杂度要比寻找隐匿环的时间复杂度高.为了降低服务器端的查询处理代价,本文在选择最优隐匿环和隐匿森林的过程中花费了相对较多的时间.从图11中可以看到随着各参数值的增大,位置匿名器花费的匿名执行时间都有所增多,尤其是在简单公路网络中.这主要是因为当k和l的平均值都大于等于9时,简单公路网络中的匿名成功率比复杂公路网络中的匿名成功率高很多,所以平均匿名执行时间会花费得相对多一些.路段数量越多,移动用户的数量也就越多,用户所得到的保护强度也就越大.(5)平均查询执行时间.由于kNN查询是位置服务中最常见的一种查询,所以本文对各隐匿子图进行了kNN查询处理.从图14中可以看到,只有当l和knnp增大时,平均查询执行时间是逐渐增大的,说明隐匿位置中路段数量越多,查询花费的时间就越长,而且随着用户要求查询最近邻感兴趣点数量的增多,查询所需要的时间也要增多.Page12图13RALk、RALl相对于参数l的不同设置图14平均查询执行时间(6)平均候选结果大小.从图15、图16中可以看到,随着各参数的增大,查询返回的候选结果数量基本都在增大.在图15(a)中,复杂公路网络中得到的候选结果数量随着k的增大没有改变,但是在图15平均候选结果1图15(b)中,候选结果数量随着l的增大也逐渐增大,说明在复杂公路网络中,路段数量的多少对通信代价的影响要比移动对象数量的多少对通信代价的影响大.Page13图16平均候选结果28结论以往关于位置隐私保护的研究工作很少关注公路网络环境下的位置隐私保护,尤其是包含单行线的公路网络.通过同时观察简单公路网络和复杂公路网络的结构特点,发现了两种可以用于保护用户位置隐私的隐匿子图,即隐匿环和隐匿树.基于这两种隐匿子图结构,提出了一个新的保护位置隐私方法—隐匿环与森林(CCF).CCF不仅可以用于简单的公路网络中,而且它能够解决包含单行线的公路网络中的位置隐私保护问题.在基于真实与模拟数据集的实验测试结果中,CCF方法显示出了其在位置隐私保护方面的有效性以及在提供服务质量方面的高效性.
