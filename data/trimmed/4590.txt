Page1分布式数据流关系查询技术研究(中国人民大学信息学院北京100872)摘要随着在线分析连续数据流的需求日益增多,用于实时处理海量、易变数据的数据流管理系统由此产生.大数据时代下,随着开放式处理平台的发展,为处理大规模且多样化的数据流,出现了若干分布式流处理系统,如S4、Storm、SparkStreaming等.然而,为提升处理系统的易用性和处理能力,需要在其之上构建具有抽象查询语言的关系查询系统,以构筑完整的分布式数据流管理系统.如何设计并实现高效易用的关系查询系统是一个亟待解决的问题.文中首先概述了分布式数据流查询处理的典型应用、数据特征和实现目标.进而,提出了分布式数据流关系查询系统的基础架构,并基于此架构深入分析了用户自定义函数查询、查询优化、驱动方式、编译技术、算子管理、调度管理和并行管理等关键技术.然后,对比分析了SPL、StreamingSQL、Squall和DBToaster这4种具有代表性的查询系统实例.最后,指明了该技术在优化技术、执行策略、实时精准查询和复杂查询分析等方面所面临的挑战和今后的研究工作.关键词大数据;数据流;流处理系统;流查询系统;关系查询技术1引言近年来,随着社交网络、物联网和移动互联网等领域的快速发展,数据量呈爆炸式增长,大数据时代已真正到来[1-3].在这些应用中,数据变化的速度越来越快,需要处理和响应的时间越来越短,对大数据3V特性[4]中的高速性(velocity)处理便显得非常重要.因此,数据流的实时分析和流式处理成为当今热点研究领域之一.21世纪初,学术界开始对数据流管理系统(DataStreamManagementSystem,DSMS)展开研究工作表1数据库管理系统和数据流管理系统对比分析数据库管理系统数据流管理系统大数据时代下,出现了使用MapReduce[8]编程框架的分布式数据库管理系统,文献[9]对使用MapReduce框架的关系查询处理语言、实现的算子以及系统实例等整个分布式数据管理系统的生态圈进行了详实的综述和分析.为满足数据流海量和高速等特点的流式处理,工业界和学术界相继出现了大量的分布式数据流处理系统,如Yahoo!的S4[10]、Twitter的Storm①[11]和伯克利大学的SparkStreaming②等.目前国内外对分布式数据流处理的相关综述文章包括:文献[12]对大数据流处理的关键技术和流行的系统实例进行了分析;文献[13]着重关注数据流处理系统的实现技术;文献[14]把分布式流处理系统作为一种实时处理的内存数据管理系统进行了说明.然而,目前的分布式数据流处理系统对数据的查询操作需要用户编码来实现,系统本身未提供相应的查询语言.因此,为提高处理系统的易用性和处理能力,增强应用程序的可重用性和移植性,需在处理系统之上实现具有抽象查询语言的关系查询系统③,以构筑完整的分布式数据流管理系统.本文重点分析查询系统中关于关系查询技术④的相关研究工作.本文第2节总体概述分布式数据流查询处理的典型应用、数据特征和实现目标;第3节提出分布式数据流查询技术的基础架构,并基于此架构深入分析用户自定义函数查询、查询优化、驱动方式、编译技术、算子管理、调度管理和并行管理等关键技术;并推出了原型系统,如Aurora[5]、TelegraphCQ[6]和STREAM[7]等.研究者认为,数据流的产生一般通过外部资源获取(如传感器网络等),而非人为主动地发出数据,因此,数据流管理系统属于系统主动-用户被动(system-activehuman-passive)[5]的管理模式.此外,数据流管理系统处理的数据重点是按照时间排序的内存数据,这要求系统具有序列化的访问模式和实时的响应时间.并且,数据库管理系统(DataBaseManagementSystem,DBMS)一般提供即席(ad-hoc)查询模式,而数据流管理系统往往针对的是连续查询(ContinuousQuery,CQ).表1对数据库管理系统和数据流管理系统进行了对比分析.第4节对比分析具有代表性的数据流查询系统;第5节指明针对优化技术、执行策略、实时精准查询和复杂查询分析等方面所面临的挑战和今后的研究工作.2分布式数据流查询处理概述分布式数据流处理系统具有查询响应时间短、查询精度高、可靠性强、易于扩展和使用灵活等特点.然而,数据流往往具有监控周期长、输入速率不稳定等特征.在处理系统之上,如何构建高效、易用的查询系统是满足用户查询需求的关键所在.本节列举了分布式数据流查询处理的典型应用,分析了查询处理中分布式数据流的特征,并阐述了查询处理的相关目标.2.1分布式数据流查询处理的典型应用分布式数据流处理系统的应用范围较为广泛.如微博、Twitter等社交网站提供实时搜索博文的服务;移动互联网领域提出的实时监控移动宽带业务的需求;金融领域针对高频交易的实时分析软件;以及电子商务领域的实时推荐系统等.随着这些应用需求的不断扩展,出现了相关的查询系统.如洛桑联邦理工学院数据实验室基于Storm①②③④Page3推出了针对实时查询处理的Squall①系统;文献[15]为提升Squall连接操作的扩展性并降低数据的冗余度,推出了BiStream系统;以及腾讯公司基于Storm设计的实时数据流推荐系统TencentRec[16]等.2.2分布式数据流的特征为确保分布式数据流的实时处理,需要对数据流的传输和模型进行说明.(1)数据流传输.为保证实时、完整且稳定地将数据流传输到处理系统,一般可通过消息队列和网络Socket传输等方法完成,以保证将数据发送到每台物理节点,为数据处理提供保障.利用消息队列的方式进行数据采集和传输是较为常用的一种方法,常见的消息队列产品有Facebook的Scribe②、LinkedIn的Kafka③和Cloudera的Flume④等.(2)数据流模型.在查询处理过程中,由于数据流的来源不同,需要针对不同的数据源制定不同的数据样式.一般来讲,通用的数据流管理系统支持关系型数据模型,数据定义语言是基于关系型的原子类型,便于以属性和元组的形式划分和发送数据;针对特殊领域的数据流管理系统,可根据领域数据的特点设计基于对象类型的复合数据类型.如针对传感器网络的COUGAR[17]和管理网络数据传输的Tribeca[18]是利用复合数据类型构建的系统.2.3分布式数据流查询处理的目标将分布式数据流查询处理集成到处理系统之上,可便于用户灵活地调用处理系统的函数库,提高处理系统的易用性.分布式数据流查询处理需要实现的目标可总结为以下几点:(1)声明式查询语言.类似于基于Hadoop⑤构建的Hive[19]中设计HiveQL的思想,在数据流处理系统之上设计的查询系统需支持类似SQL的声明式描述语言,并将查询计划自动编译成处理系统的工作任务.利用查询系统提供的算子库可降低用户使用处理系统的难度,提升使用效率.(2)查询的自适应性.为应对分布式数据流传输速率不稳定和数据动态分布等特点,查询系统应具有自适应性.可根据查询算子处理数据流的时间变化、查询谓词选择率的变化以及数据流传输速率的变化,实现查询算子的动态调度和自适应地查询处理[20].(3)查询的可扩展性.为快速响应查询请求,查询系统需支持查询算子的可扩展性.设计完备的可扩展策略,可降低分布式处理的开销,提高查询性能.可扩展性策略一般涉及到两个方面:①伸缩性.可根据处理数据流数量的变化,动态增减处理节点;②有效性.尽量提高新增处理节点的使用效率,充分利用集群的整体资源.(4)查询的容错性.查询系统的查询过程中,一般存在两种数据丢失的现象.一种是执行过程中算子状态信息的数据丢失,这种数据的丢失往往通过复制算子的状态信息进行容错处理;另外一种是分布式环境下网络传输过程中的数据丢失,这种情况一般通过上游备份[21]和主动备份[22]等策略进行容错处理.(5)查询的实时性.由于数据流具有不稳定性和易变性等特点,需要实时获取查询过程的中间结果.因此可根据用户接受的查询延迟时间,设定批量处理数据的大小[23],将查询结果分批返回给用户;或者可引入过程调用等技术,将运行结果实时返回给用户,如在Storm中引入的分布式远程过程调用(DistributedRemoteProcedureCall,DRPC)技术.3分布式数据流查询技术研究新型的分布式数据流处理系统,提供开放的编程接口,可为用户提供丰富的计算资源.然而,如何高效、便捷地使用处理系统提供的计算资源,是设计查询系统的关键所在.本节首先提出分布式数据流查询系统的基础架构,然后重点分析用户自定义函数(UserDefinedFunction,UDF)查询、查询优化、查询驱动方式、编译技术、算子管理、调度管理和并行管理等关键的查询技术.3.1分布式数据流查询系统架构分布式数据流处理系统具有高扩展性、高可用性、负载均衡和容错控制等特性.因此,在这种开放式处理系统之上构建的分布式数据流查询系统不同于传统的集中式系统.这要求系统在查询优化、调度管理和并行管理等方面要有满足分布式特征的架构体系.我们归纳总结了分布式数据流查询系统的技术要点,并设计了基础架构.如图1所示,该架构被分为5个方面.①②③④⑤Page4图1分布式数据流查询系统架构(1)用户接口层.该层负责接收用户的查询请求,提供统一的查询接口.即制定相应的SQL查询标准,并支持用户自定义函数(UDF)的访问模式和复杂查询过程的脚本模式,以及提供图形化的访问界面等.(2)查询解析层.根据用户接口层提交的查询请求,进行语法和语义解析.完成词法和语法的解析任务,生成相应的逻辑查询计划和物理查询计划并对其进行优化.该层还提供基于查询处理所需的基础算子库,以及根据用户需求构建的用户自定义函数库.(3)查询管理层.控制查询系统的整体流程,是提升查询性能的关键一层.我们将该层分为5个模块:①查询驱动方式.根据查询请求制定不同的查询驱动方式(如滑动窗口和无窗口的驱动方式);②编译技术.根据新型的硬件资源特征设计的查询编译框架及其优化技术;③算子管理.针对分布式环境下有向无环图(DirectedAcyclicGraph,DAG)的处理方式,需根据系统性能和算子状态信息,设计查询系统的部署和维护策略,以及针对多查询处理的应用场景需引入算子共享机制;④调度管理.为满足自适应性的查询需求,对查询算子和数据流需进行实时的调度优化和动态的路由决策;⑤并行管理.在分布式环境下,实现针对算子和数据流的划分策略,以及为提升处理系统的性能,动态设置各个处理节点的并行度.(4)流处理系统层.完成多数据源的传输和查询任务的执行.处理层一般利用ZooKeeper[24]进行协调服务.其中,数据流传输往往通过消息队列的方式实现(详见2.2节).数据流处理系统完成执行查询任务的核心功能,负责管理集群和各个处理单元,以及系统底层的负载均衡和容错控制等.(5)全局管理模块.负责全局数据词典的维护和更新,并实现全局查询处理的实时监控功能,以及完成整个数据流查询系统的配置信息和日志管理等任务.3.2分布式数据流查询处理关键技术研究通过对分布式数据流查询系统架构的分层说明,我们可将流查询系统涉及到的关键技术归纳Page5为:关注于支持复杂任务分析的用户自定义函数(UDF)查询、查询解析过程中的查询优化、驱动方式、编译技术、算子管理、调度管理以及针对分布式shared-nothing处理框架的并行管理等.3.2.1用户自定义函数查询用户自定义函数(UDF)是数据库管理系统可扩展的高级功能,允许用户通过创建存储方法将复杂SQL逻辑封装成函数,便于用户使用.用户自定义函数(UDF)可发挥其灵活和易用的特性,充分提高查询系统的查询效率和处理能力.用户自定义函数(UDF)一般有3种类型:标量UDF、源UDF和聚集UDF.标量UDF一般利用返回值为确定类型的标量函数定义,用于操作数据库中的标量类型值(如获取子字符串SUBSTR的标量函数).源UDF是基于已存在函数的扩展,一般可通过系统内置函数或已定义的UDF表示.除了可利用标量函数外,还可针对数据表的列进行扩展操作(如SELECT语句中求最大值MAX的列操作).聚集UDF,又称为用户自定义聚集函数(UserDefinedAggregation,UDA),是在UDF的基础上增加了数据分析和挖掘的功能.UDA往往用于决策支持系统,被认为是数据库高级应用的关键所在.UDA作用范围较广,除了可对标量类型和列进行操作外,还可操作整个数据表的任意列.如IBMDB2上实现的高级语言SADL[25],可支持对数据表的不同类型的聚集操作.表2总结了各种UDF的应用范围.标量UDF源UDFUDA在分布式数据流查询系统中,针对数据流动态、易失和非确定等特点,文献[26]提出了在非确定数据集上支持UDF的通用框架,并通过基于高斯过程[27]的学习方法,计算输出UDF结果的近似分布情况,确保查询结果的错误区间.文献[28]基于MapReduce编程模型,利用数据重排的方式为数据划分做预处理,进一步优化了UDF的执行效率.文献[29]构建了UDA的执行框架,重点涉及到关于UDA的查询优化、查询重写和视图维护等关键流程.文献[30]解除了UDF中包含强制性构建函数(如条件分支、循环等)的相关性,允许以面向集合的方式执行查询.通过将嵌套查询重写成平面查询的方法,生成对应的UDF树,并利用转换规则对其进行优化.通常支持UDF的查询系统需要构建支持UDF的查询分析器和函数库,再根据UDF的查询处理流程生成对应的查询计划和执行计划.3.2.2查询优化查询优化是查询处理的永恒主题,针对数据流易变的特点,查询系统需要快速响应用户提交的查询请求.一般的优化方法分为编译时的静态优化和运行时的动态优化,现归纳如下:(1)静态优化静态优化可分为逻辑优化和物理优化两种.①逻辑优化.一般采用基于启发式的优化规则,比如优先做选择和投影、剪枝优化、连接条件下推等规则.在分布式环境下,数据流查询系统一般均支持有向无环图(DAG)的处理模型.此时,基于规则的逻辑优化可将规则转换器传入到有向无环图(DAG)的拓扑结构中顺序执行,通过查询重写得到优化后的执行计划.②物理优化.从逻辑计划可以派生出多个物理计划,物理优化器则对每个物理计划进行代价估计,从而选择出最小估计代价的物理查询计划,这种代价估计往往基于数据分布的元数据信息.在分布式环境下,需要利用调度器协同考虑各节点的计算能力.在流应用场景中,数据分布的元数据信息可以根据历史数据的信息进行估计(如算子的选择率、数据流速等).基于这些统计信息,查询优化器可以估计中间结果的大小.另外,基于分布式集群中各节点的资源配置情况,估算出不同算子在不同节点上的执行代价.(2)动态优化.数据流是源源不断输入的,数据分布的信息难以预测和准确估计.由于最优查询计划的代价是基于查询提交时获取的统计信息来估算的,但这些统计信息在查询执行过程中往往会发生改变,很可能导致“最优”查询计划的执行代价变得很高.因此,在查询提交时由优化器选中的查询计划很难保证在整个查询执行过程中都是最优的.这就需要在查询执行的过程中,动态自适应地优化查询执行计划.表3对比分析了不同的查询优化技术.关于静态优化的代表技术,康奈尔大学数据库研究组设计了基于规则的多查询优化框架RUMOR[31].该框架针对多查询需要共享状态和计算的特点,扩展了基于规则的查询和基于查询计划的处理模型.通过将Page6多个流扩展并映射成一个信道(channel)的方法,利用信道表述多查询的优化技术,并基于自动机的事件监控系统[32]向基于关系的查询系统进行转换,将查询系统和事件监控系统集成到RUMOR中.文献[33]提到的分布式多模型优化技术综合考虑了输出率和计算代价两个方面,并设计了在分布式环境下分解查询计划的算法,进一步提升了物理优化的效果.由于数据流不易确定表的基数,文献[34]针对选择、投影、连接等不同算子构建基于速率的代价模型,并表3查询优化技术静态优化动态优化3.2.3驱动方式根据不同区间的数据流连续查询,可将查询驱动方式分为滑动窗口类型和无窗口类型两种,如图2所示.滑动窗口将无限的数据流切分成若干有限子数据流,每次的查询处理仅针对当前滑动窗口内的子数据流.一般可根据用户设定的时间间隔或窗口内元组数量设定滑动窗口的大小.除此之外,CQL[37]引入了基于划分的滑动窗口、序列数据库SEQ[38]设计了基于属性值排序的划分窗口、在Aurora[5]系统中定义了翻转窗口等.随着数据流挖掘算法的深入研究和分布式查询处理能力的不断提高,人们需要对窗口外的历史数据进行分析,而基于窗口的驱动方式不能满足这样的要求.因此,需要引入无窗口的处理模式.在无窗口模式下,对全部历史(full-history)数据有两种处以最大输出速率为优化目标利用启发式规则生成优化框架.关于动态优化的代表技术,文献[35]在辅助系统上模拟原始数据流,用于验证优化的查询计划.在保证原始查询计划可正常执行的基础上,仅将已验证的有效查询计划迁移到主系统.文献[36]针对多个连续查询设计了基于共享的自适应优化方案A-SEGO.通过设置共享连接算子的代价边界,可从不同的优化策略中生成全局执行计划,在最优执行计划和执行优化的处理时间上寻求平衡点.理方法.一种是引入衰减因子的概念,即数据流中越陈旧的数据对整个分析模型的影响越小.此类处理方法往往应用于数据流的挖掘算法中[39-41].衰减因子还可分为多项式衰减[42]、指数衰减因子[43]和前向衰减因子[44]等,以说明历史数据对分析模型的影响程度.另一种是随着分布式数据流处理系统的不断完善,以及实时监控等需求的发展,需要对全部历史数据给出实时精准的查询结果.Squall①和BiStream[15]对实时到来的数据流进行路由选择和可扩展的连接查询,保证查询的实时性和正确性;DBToaster[45]基于敏捷视图(agileview)[46]的方法,通过递归编译的思想对数据流进行增量处理,以获得全部历史数据的查询结果.可以看出,对不同的查询需求和查询系统的处理能力,需要在控制管理阶段选择不同的查询驱动方式.3.2.4编译技术为满足流查询系统的实时快速响应,在考虑查询优化和调度优化的同时,需结合先进的硬件设施和编译技术进一步提高查询效率.对于以计算为瓶颈的复杂分析任务(如UDF的决策支持等),需要应对较高的查询工作负载.这需要纵向扩展查询系统的处理能力,尽量提高CPU的处理效率,降低指令周期的处理时间.文献[47]基于MonetDB系统设计了一种基于向量处理模型的X100查询系统.运用块处理方式提高缓存的随机读①https://github.com/epfldata/squallPage7写效率;并且为了进一步提高CPU的吞吐量,X100可将整个表达式编译成向量原语,无需单独编译各个函数.文献[48]利用与语言无关的LLVM[49]编译框架,利用将查询转换成机器代码的方法进行查询优化.并以数据为中心,将待处理的数据推向不同算子.通过利用单指令多数据(SingleInstructionMultipleData,SIMD)CPU寄存器实现的数据扫描方法[50],可在同一时刻处理多条数据,从而大大提高查询的并行处理能力.除了将硬件设施和编译框架结合外,还可集成优化策略和编译技术.针对流查询处理均是在内存中进行操作的特点,文献[51]利用基于动态划分的部分分解存储模型(partiallydecomposedstoragemodel)[52]和及时(just-in-time)编译的方法,在节省内存带宽的同时,尽量不影响CPU的处理能力.文献[53]设计的LegoBase查询系统,利用支持运行时编译和代码生成工具的LMS[54]框架,实现了高级语言和生成式程序结合的优化方案.Ahmad和Koch设计的DBToaster系统[45]在前端利用LLVM[49]编译框架生成LLVM程序,在后端利用LMS[54]框架递归编译增量的敏捷视图,生成相应的C++或Scala函数,实现对数据流的高效处理.连接算子Photon[58]多数据流等值连接表4连接算子对比处理方式非阻塞的元组处理D-Streams[59]多数据流θ连接阻塞的微批次处理TimeStream[61]多数据流θ连接弹性替代和依赖追踪ATR/CTR[62]多数据流θ连接PSP[63]DYNAMIC[64]多数据流θ连接JB[15]阻塞的批次处理、非阻塞的元组处理非阻塞的元组处理非阻塞的元组处理非阻塞的元组处理非阻塞的元组处理Photon[58]是谷歌公司针对连接网络查询的数据流和用户点击广告的数据流而设计的,支持两种数据流的等值连接操作,通过中心协调器实现多数据中心的容错和扩展连接.其利用向中心协调器注册查询事件的方法和多数据中心的分布式架构确保数据的完备性,并采用非阻塞的方式实时处理新到来的每条元组.但Photon主要处理事件ID的等值3.2.5算子管理为满足用户的不同需求,在分布式环境下,需要对算子库中的算子进行高效的管理,以提升查询的效率,并确保查询的正确性.为实时获取最新的查询结果,满足用户pay-as-you-go的计算模型,文献[55]在处理包含状态信息的算子时(如连接、去重等算子),设计了具有检查、备份、恢复和划分等功能的算子模型,以保证查询系统具有自动扩展虚拟机数目和快速容错的能力.在多查询的应用场景下,CQL[37]通过概要(synopses)存储中间状态结果,用于共享算子的处理.SBON[56]算法利用网络感知的算子部署,自动检测不同查询的数据共享和算子共享,提供多查询优化机制.文献[57]设计的共享感知的中间件技术,可共享多查询情况下的算子和中间结果,自适应地调整网络间的查询部署,提升查询效率.在分布式数据流查询系统中,针对连接算子的管理最为复杂.实现可扩展且实时的连接操作是一个具有挑战性的研究问题.如表4所示,我们总结了目前流行的分布式数据流在线连接算子的连接类型、连接模型和处理方式等相关特性.连接,不支持θ连接操作.D-Streams[59]是SparkStreaming定义的数据流操作对象,可支持多数据流的θ连接.通过转换(transformations)操作,可利用底层Spark①提供的RDD[60]机制确保查询处理的正确性和容错性.①http://spark-project.org/Page8D-Streams是将若干数据流元组以阻塞的方式构造成一系列的微批次(mini-batch)进行处理.这种处理方式也导致了某些离散的batch存在丢失连接元组对的现象,从而仅可获得近似的查询结果.TimeStream[61]设计的弹性替代(resilientsub-stitution)和依赖追踪(dependencytracking)机制,确保了数据流计算的可信赖性.针对任意数据流的θ连接操作,提供了MapReduce风格的批处理和非阻塞的元组处理两种方式.但TimeStream需要维护连接状态的依赖信息,通信代价较大.ATR/CTR[62]是应对多个窗口数据流θ连接操作设计的自适应负载扩散算法.这两个算法可实现保留语义的元组路由的功能,实现细粒度的负载均衡和连接操作的正确性.通过主从数据流切换的一步(one-hop)扩散法或基于路由表的多步(multi-hop)扩散法,可支持数据流元组至少被执行一次的语义保障.但ATR/CTR需要控制计算重复结果的开销,且只能处理基于窗口模式的数据流连接操作.PSP[63]设计了基于时间的算子状态划分环以支持多个窗口数据流θ连接操作.流水线状态划分技术提供了每个连接子操作的状态信息,将连接算子拆分成若干子连接算子进行操作.但维护分布式的连接状态信息增加了系统的通信开销,且该操作受限于窗口模式下的数据流.表5调度策略技术基于算子和数据的混合调度基于算子的调度策略往往通过在主控节点制定服务质量(QoS)指标[65]、路由调度算法[66]和监控内存消耗情况[67],以更改相应的算子执行顺序和对应的查询计划.基于数据的调度策略,以Juggle[68]和Borealis[69]为代表技术.Juggle针对感兴趣的元组内容信息,设计了重排序(reorder)算子,将已扫描的元组重新排序.Borealis在Aurora[5]的基础上,计算每个盒处理器的平均服务质量(QoS)梯度值,用于重排元组的执行顺序.JuggleEddy和数据的混合调度策略的代表,其根据在线查询处理产生的部分查询结果,通过计算相关元组的重要性和对应算子的处理时延,利用juggle对同一数据DYNAMIC[64]算子支持多个数据流的θ连接操作,使用基于矩阵的连接模型join-matrix,冗余存储每个子处理单元的数据,并采用无窗口模式下的非阻塞元组处理方式以实时获取正确的查询结果.DYNAMIC算子设计的重组器(reshuffler)可动态设计划分样式,确保最小化的数据输入装载因子(input-loadfactor).但该算子存储的数据冗余度较大.JB[15]算子利用基于完全二部图概念构建的join-biclique模型,将集群分成两个部分.JB算子可支持多个数据流的θ连接操作,并支持无窗口模式下的非阻塞元组处理方式,还可根据θ连接操作的负载程度动态扩展处理单元的数量.相对于DYNAMIC算子使用的join-matrix模型来讲,JB算子使用的join-biclique模型大幅降低了数据备份的冗余度,提高了资源利用率.但在数据分组时JB算子利用元组内容敏感性的混合路由策略,需要人工干预数据分组的参数设置.3.2.6调度管理分布式数据流查询系统中,一般需要根据查询算子的缓冲队列长度、查询代价和选择率等方面考虑系统的调度策略.如表5所示,调度优化策略可分为基于算子的调度、基于数据的调度和混合调度策略等.指定查询的QoS指标[65],动态确定算子的执行顺序通过路由调度,重排算子关系并更改查询计划根据运行时最小化内存的需求,更改算子调度策略根据关注元组内容信息,将已扫描的元组重新排序根据元组的QoS值和QoS梯度,确定元组的执行顺序根据元组的重要性和算子的处理时延,重排序元组和算子关系流中的中间元组进行重新排序.并结合Eddy的原理,通过路由调度将对应算子进行重新排序,以达到调度优化的目的.3.2.7并行管理为实时处理大量数据流,提高整个分布式系统的处理能力和吞吐量,需划分查询任务和设定处理单元的查询粒度.针对数据流处理的并发性来讲,存在两种划分机制.一种是划分查询执行计划;另一种是划分输入的数据流.文献[71]是基于Aurora系统实现的划分查询计划的分布式划分策略.但因为存在某些占用资源较多和耗时较长的算子,导致无法生成有效的执行Page9计划,因此划分查询执行计划的方法使用较少.较常见的解决方法是针对不同的应用需求,对某些负载过重的算子进行划分,如文献[64]设计的DYNAMIC算子,可对算子内部进行实时自适应的划分,确保最少的状态迁移开销.基于输入数据流划分的策略是应用较多的划分方法,其一般可分为静态划分和动态划分两种.静态划分是指在查询编译时确定具体的划分码(如图3(a)所示);动态划分是在查询执行过程中根据数据流的分布和关联情况动态调整划分码(如图3(b)所示),减少了网络开销,提高了查询效率.AT&T实验室首先提出了感知查询的划分方法[72]:针对具有聚集和连接操作的多查询来讲,根据每个查询的划图3数据划分策略划分后的数据通过处理系统计算时,根据数据量的多少和计算的复杂度,优化算子内部的并行度,并对各个处理节点的负载进行动态调整.文献[76]以Storm为实验平台,根据有向无环图(DAG)中不同bolt的处理复杂度,动态设定其并行处理粒度,以提升查询系统的性能.4分布式数据流查询系统介绍为提升分布式数据流处理系统的简洁性、易用性和扩展性等特点,工业界和学术界相继推出了支持不同处理系统的查询系统.本节选择有代表性的分布式查询系统实例SPL[77]、StreamingSQL①、Squall②和DBToaster[45]进行对比分析.分析内容包括底层处理系统的简介,查询系统的实现原理,以及查询系统的相关特征等.4.1SPL查询系统SPL[77]是由IBM的声明式系统SPADE[78]演分码,求出向上兼容的最大划分码集合.基于代价模型,通过转换规则将逻辑查询计划转换成最优的物理查询计划.文献[73]基于文献[72]设计的方法,提出了挖掘划分码间时态近似依赖性(TemporalApproximateDependencies,TADs)的概念.为避免运行时的二次划分和最小化额外的通信开销,将满足TADs规则的范式进行规约,实现对划分码动态合并的优化处理.文献[74]设计了感知数据关联性的多查询优化器CMR.在运行时,根据分析和判断每个数据流内部的倾斜一致性(skeweduniformity),动态划分各个数据流;再根据查询的聚集或连接码选取各个被划分子数据流的聚类特征,利用BIRCH[75]方法进行层次聚类,以获得最终的划分区间.化成的商业软件,构建在支持处理高速数据流的InfoSphereStreams③之上.作为商业产品的代表,SPL不仅具有丰富的系统内置算子,而且可较好支持用户自定义函数(UDF)的功能.4.1.1InfoSphereStreams简介InfoSphereStreams广泛应用于电信、金融和医疗等多个领域,可快速提取、分析和关联来自多个数据源的信息,并可处理结构化、半结构化和非结构化的不同数据类型.InfoSphereStreams根据多个连续查询构建数据流图(data-flowgraph),用于支持高效的分布式数据流处理框架.4.1.2SPL实现原理SPL支持关系型数据流,可定义嵌套的元组类型和带环的拓扑结构.利用算子和数据流的概念,SPL为每个应用程序产生一个数据流图,图中的每①②③Page10个顶点对应于后台的算子代码.算子具有声明式语义信息,便于用户描述具体的应用需求.SPL提供用本地语言(C++或Java)定义的原始算子(包括系统内置算子和用户自定义算子),以及包含可重用数据流子图的复合算子[79].SPL利用非阻塞的元组处理以及基于时间和元组的滑动窗口,实现了窗口内部数据的实时处理.图4[77]说明了SPL处理原始算子的流程.每个原始算子由算子模式(operatormodel)和算子代码生成器(operatorcodegenerator)两部分组成.其中,算子模式是一个描述算子到SPL编译器(SPLComplier)的XML文档;算子代码生成器负责为特定算子生图4算子处理流程4.1.3小结SPL查询系统具有的特征包括:(1)SPL通过编程式语言描述数据流处理过程,不受限于数据流图的描述形式和中间语言的转换;(2)SPL可生成便于组合的并行或分布式数据流图的中间语言,并支持用户自定义的数据类型和算子;(3)SPL支持代码的错误检查,利用编译器搜集的信息进行优化,并支持C++或Java代码的转换.SPL查询系统的不足之处在于:用户需要掌握SPL提供的不同算子进行编程实现,缺少抽象语义的描述性信息,不如SQL类型的查询系统易于使用.4.2StreamingSQL查询系统StreamingSQL是Intel公司基于SparkStreaming①和结构化数据查询框架Catalyst②实现的数据流查询系统.4.2.1SparkStreaming简介由于Spark只支持数据的批量处理模式而不支持流式处理模式,伯克利大学设计了SparkStreaming以满足对数据流的处理.SparkStreaming定义了用于描述数据流计算的操作对象D-Streams[59],并将输入数据流切分成Spark可以处理的若干RDD[60].成相应代码.在编译应用源码(applicationsourcecode)时,SPL会产生多个算子调用,每个算子调用均需要检查算子模式并产生相应的算子实例模式(operatorinstancemodel),并利用算子代码生成器产生算子实例(operatorinstance).在运行时,InfoSphereStreams根据已定义的应用模式(applicationmodel)触发算子并产生数据流图,利用流平台(streamingplatform)InfoSphereStreams的处理单元(ProcessingElements,PEs)对数据流进行分析处理.每个算子实例是一个转换器,根据流平台的运行环境处理输入数据项流(streamofinputdataitems),并产生输出数据项流(streamofoutputdataitems).这使得SparkStreaming对D-Streams的操作可转换为Spark对RDD的操作,从而实现了数据流的批量处理.4.2.2StreamingSQL实现原理StreamingSQL使用类SQL声明式语言调度和操作SparkStreaming的任务,利用Scala语言实现系统的核心功能.StreamingSQL的定义参照了SQLstream公司的StreamingSQL标准③,并对HiveQL进行了扩展.StreamingSQL类似于操作数据库中的结构化数据来处理数据流,并构建支持连续查询的模块.StreamingSQL支持基于时间的滑动窗口和无窗口两种驱动方式,分别利用阻塞的窗口处理和阻塞的微批次处理实现聚集和连接操作.StreamingSQL基于修改Hive的解析器设计自身语言并增加了关于数据流的语义操作;为易于和Hive集成,共享了Hive的Metastore[80].StreamingSQL的设计复用了Spark原始的逻辑计划和相应的分析规则,通过构造包装器的方法进行①②③Page11物理计划树的转换.StreamingSQL的处理流程如图5所示.StreamingSQL利用Hive解析的抽象语法树(AbstractSyntaxTree,AST),生成对应的逻辑计划,并通过Catalyst进行优化,最终生成分别依赖于RDD和D-Streams的不同的物理计划树.Streaming-SQL通过从抽象语法树叶子节点的D-Streams中提取RDD,可将流式物理计划树转换成Spark的物理计划树,以获取最终的查询结果.4.2.3小结StreamingSQL查询系统具有的特征包括:(1)支持多种查询驱动方式;(2)可在同一个查询中进行表和数据流的交互式操作.StreamingSQL查询系统的不足之处在于:(1)不支持嵌套等复杂查询;(2)不支持基于元组的滑动窗口操作.4.3Squall查询系统Squall①是由洛桑联邦理工学院数据实验室开发的基于Storm②[11]的分布式在线查询系统,可利用SQL查询语句实现对数据流的实时分析处理.4.3.1Storm简介Storm是Twitter开源的实时数据流处理框架,具有简单的编程模型,可利用不同的通信协议支持多种编程语言,并通过acker机制实现可靠的消息处理.Storm集群架构如图6所示.Storm由一个nimbus节点和若干supervisor节点组成.其中,nimbus节点负责资源分配、任务调度和监控各个supervisor节点的运行情况;各个supervisor节点负责接受nimbus分配的任务和管理该节点下的各个工作进程worker.整个Storm集群利用ZooKeeper[24]提供分布式应用的协调管理.4.3.2Squall实现原理Squall将SQL查询翻译成由执行算子构成的有向无环图(DAG)的查询计划,用Java语言编写了查询系统.每个算子对应于Storm的一个组件(spout或bolt),并通过构建Storm的拓扑结构(topology)执行查询计划.Squall采用基于矩阵的连接模型join-matrix适应数据流不断增长的应用场景,支持无窗口驱动方式下全部历史数据的θ连接处理,并实现了基于非阻塞元组处理的DYNAMIC连接算子[64].Squall将连接操作分解成连接器(joiner)和重组器(reshuffler)两部分.其中,连接器负责实际连接计算,重组器负责分发元组和路由元组.重组器负责监控全部历史数据的统计信息和支持自适应调整的样式划分.这样的组合设计确保了数据流连接算子的负载均衡,分摊了输入元组的处理代价,并利用重组器对内容的不敏感性来抵御数据倾斜的问题.4.3.3小结Squall查询系统具有的特征包括:(1)Squall实现了在线数据流连接算子,支持任意谓词的连接操作.并且可根据数据的动态变化对算子进行连续调整和状态的重划分;(2)Squall设计了带状态的在线连接算子,在缺乏数据流统计信息的情况下可自适应的处理连接操作;(3)Squall提供了一种位置感知的迁移机制,确保了最小的状态迁移开销.Squall查询系统的不足之处在于:(1)Squall目前只支持简单的连接查询操作,不支持IN、BETWEEN、LIKE、EXISTS、HAVING等SQL子句;(2)连接条件不支持OR表达式,也不支持嵌套查询和过程查询.4.4DBToaster查询系统DBToaster[45]是洛桑联邦理工学院数据实验室开发的新型数据流查询系统,提供从SQL查询语句到生成本地代码的编译框架.①②Page124.4.1处理系统简介根据不同的业务需求,可将DBToaster部署在不同的处理系统上.若需保证数据流的并行处理能力和处理效率,可使用Storm作为底层处理系统(详见参见4.3.1节);若有大量联机分析处理(OnlineAnalyticalProcessing,OLAP)的操作,可使用Cumulus[81]作为底层处理系统.本节简要介绍Cumulus处理系统.Cumulus是洛桑联邦理工学院和图卢兹大学联合开发的可信云系统,Cumulus提出了一种新的拜占庭容错(ByzantineFaultTolerance,BFT)[82]协议CBFT,可保证机器之间独立且无感知的数据备份,为DBToaster的视图维护操作提供了可靠的信息传输和实时的精准聚集结果①.4.4.2DBToaster实现原理DBToaster通过递归的思想将增量查询转换为C++或Scala函数,利用敏捷视图(agileview)[46]保持实时更新,省略了多余的扫描和连接操作,并消除了解释查询计划的冗余开销.DBToaster还可以将用于维护敏捷视图的程序嵌入到用户的应用程序中,根据支持数据流管理系统中物化视图[46]的机制,确保将更新视图的最新查询结果直接返回给用户.DBToaster采用无窗口的非阻塞元组处理方式,实现全部历史数据的实时增量计算.表6分布式数据流查询系统对比分析StreamingSQLSparkSQL类型语言阻塞的微批次处理基于时间的滑动窗口无窗口Scala对比指标处理系统抽象语言处理方式查询驱动方式开发语言5挑战与展望分布式数据流查询系统为满足查询速度快、查询精度高且功能完备等特点,依然存在着很多有价值的研究问题.5.1分布式数据流查询优化技术为满足实时性的查询要求,分布式数据流查询处理的优化技术需不断完善.相关技术可归纳为如下几点:(1)在查询优化的过程中,为适应数据流波动、有损、易失等特点,需制定流查询系统的优化规则,并协调规则的执行顺序,进一步完善基于规则的优4.4.3小结DBToaster查询系统具有的特征包括:(1)DBToa-ster通过LLVM[49]和LMS[54]编译技术直接生成目标代码,消除了解析器所需的时间成本,提高了查询性能;(2)DBToaster通过物化视图的操作,快速处理大量更新的数据流,而且打破了基于窗口的数据流操作方法,从而可以访问内存中的全部历史数据;(3)为了支持复杂的聚集操作,DBToaster构建了支持增量处理的数据库环[83].用环作为设计查询计算的基础,可保证增量计算的封闭性,同时简化了处理机制;(4)DBToaster利用有限差的方法,提出了小视图变换(viewlettransforms)的概念[84],可将高阶的增量查询集合物化成视图,降低视图维护的代价.并通过启发式和基于代价的优化框架,保证视图的频繁更新.DBToaster查询系统的不足之处在于:(1)不支持排序(orderby)和外连接(outerjoin)等查询操作;(2)内存溢出时需进行内外存的交互处理,查询的响应时间增长;(3)进行多查询处理时,会出现敏捷视图的存储冲突和版本不一致等问题.4.5查询系统对比分析根据以上数据流查询系统的分析说明,可以看出:针对数据流处理的不同需求,需采用不同的查询系统和处理方法.各个查询系统的特点分析如表6所示.化策略.(2)针对无窗口驱动方式的连续查询,由于数据分布和执行代价等信息的动态变化,查询系统需要实时调整查询计划.例如,在Shark系统中引入部分有向无环图执行策略(PartialDAGExecution,PDE)[85]的概念,利用在查询处理中实时收集到的统计信息动态改变查询计划.为满足自适应查询处理的需求,宾夕法尼亚大学的学者们设计了基于代价模型的二次优化框架[86],可根据代价信息增量更新查询优化器.如何在运行时自适应地寻求最小代价的查询计划,成为近年来一个热门的研究问题.①http://webdam.inria.fr/wordpress/wp-content/uploads/Page13(3)针对用户提交的复杂查询(如多查询和嵌套查询等),对查询重写、算子共享等数据库管理系统中关注的优化问题,在数据流处理场景中也有很多研究工作要做.5.2分布式数据流查询执行策略基于分布式环境下的数据流查询处理框架,流查询系统将各个查询处理计划以流水线的形式组织在一起.在运行时,需重点关注算子和数据的调度执行策略,存在的挑战性问题分析如下:(1)执行需保持状态信息的算子时,要设计算子调度和执行的策略,以最低的代价存储和传输中间状态信息.(2)针对用户提交的多查询请求,需引入数据流和查询划分码的相关性评测标准.根据不同的查询驱动方式和数据分布情况,制定综合的划分策略作为数据分组的处理依据.(3)根据分布式集群的部署情况和用户提交的查询请求,随着数据流分布特征的不断变化,需设计出合理且高效的最优并行度分裂算法(包括数据流的划分和复制),尽可能提高查询系统的并行处理能力.5.3分布式数据流实时精准查询分布式数据流处理系统在可伸缩性、容错性、状态一致性管理和数据细粒度处理等方面不断提升和发展,系统处理大量无损数据流的能力得以完善.因此,学者们将研究的重点从丢弃部分元组的降载[87]方式转向处理全部历史数据的实时精准查询.其中面临的研究点包括:分布式环境下的本地增量视图和全局增量视图的统一与维护;针对多查询应用场景下的视图一致性管理和共享算子的状态管理等.针对这些问题的研究,对提高系统的查询速度和查询精度均具有十分重要的意义.5.4分布式数据流复杂查询分析为满足以用户自定义函数(UDF)、嵌套查询等为代表的复杂查询分析,分布式数据流查询系统需构建实时高效的以有向无环图(DAG)为拓扑结构的任务执行计划.因此,为了充分发挥系统性能,如何优化有向无环图(DAG)的层次划分,如何利用重写规则的模板推断语义等价的查询执行计划,是需要重点考虑的问题.另外,针对数据流的动态和不确定性,如何更好地设计在线计算模型以支持复杂查询的处理能力,也是值得研究的问题.并且,如何利用增量聚集算法和增量学习框架[88-89]支持无窗口驱动方式的用户自定义函数(UDF),以及如何优化同时处理多个用户自定义函数(UDF)的执行计划问题,也值得我们进一步深入研究.5.5其他研究点对于制定流查询系统的相关标准和增强数据的处理能力方面,仍有许多其他的研究课题.例如,为应对不同模式定义的异构数据源,查询系统需根据用户需求的变化支持不同的查询请求.参照文献[90]的思想和方法,可制定统一的流查询系统标准和算子转换规则,以适应不同的数据流处理系统,使其具有更好的参照性、完备性和通用性.此外,为支持Lambda架构①,可设计同时进行批量处理和流式处理的查询计划适配器,通过统一的查询系统接口,不仅可以实时获取当前数据流的查询结果,而且可以从离线的历史数据中获取相应的查询结果.6结论随着大数据概念的兴起,分布式数据流处理技术已成为新型数据处理技术的一个重要分支.基于流处理系统的查询技术成为研究热点,受到了学术界和工业界的共同关注.查询技术需要对相关概念、理论、方法和体系进行深入研究.本文主要归纳总结了近年来分布式数据流查询技术的若干关键特性,并对比了4种有代表性的查询系统.同时指出了存在的挑战性问题.这些问题的研究还处于起步阶段,均没有较为成熟的、可以进行大规模实际应用的成果和方案.因此,这些课题具有重要的研究价值和意义.
