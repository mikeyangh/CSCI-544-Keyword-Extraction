Page1VegaNet网络虚拟路由器张媛媛1)徐明伟1)李琦2)1)(清华大学计算机科学与技术系北京100084)2)(清华大学深圳研究生院广东深圳518055)摘要虚拟化技术是推动下一代互联网渐进式发展的关键技术,利用虚拟路由器构建大规模虚拟网络环境对于促进网络创新技术的研究与部署、解决互联网面临的僵化问题具有重要意义.该文基于高性能虚拟网络VegaNet(VirtualGigabitNetwork),提出了一种满足保真、高效、可控、隔离和可扩展需求的虚拟路由器方案.设计了虚拟链路状态检测机制以保证VegaNet网络与物理网络的状态一致性;设计了统一数据转发引擎以提供高效的数据转发服务.实验结果表明:VegaNet网络虚拟路由器的虚拟链路状态检测速度快、统一转发引擎效率高,可以为新型网络体系结构与网络协议提供一个真实高效的实验环境.关键词虚拟路由器;VegaNet;虚拟链路状态检测;统一数据转发1引言互联网在过去的几十年里取得了巨大的成功.TCP/IP协议栈提供的通用数据转发服务促进了网络技术与应用的迅速发展,使得互联网成为全球信息承载与传递的重要基础设施.然而随着互联网规模的增大,网络层协议的封闭性限制了互联网本身的创新进程,许多新型网络体系结构难以无缝地集成到现有的互联网框架中.此外,互联网服务提供商Page2之间的利益冲突使它们很难在网络创新技术的部署方面达成一致,一些新兴网络技术如IPv6、IPSEC和组播等因为无法在真实网络上进行大规模的部署验证而难以进一步推广,这使得针对下一代互联网体系结构的研究缺乏具有实际意义的突破性进展,互联网的发展正面临一定程度的僵化[1].为了打破互联网发展的僵化,加快下一代互联网体系结构的创新进程,虚拟网络应运而生.虚拟网络是利用虚拟化技术对物理网络资源进行抽象和划分后,在公共的网络硬件基础设施之上构建出的多个独立运行的逻辑网络.不同的虚拟网络可以采用不同的体系结构,承载不同的网络协议,并为用户提供可定制的服务.虚拟路由器是虚拟网络的核心设备,借助主机虚拟化技术,虚拟路由器可以在同一主机系统内构建出多个虚拟路由器实例,每个虚拟实例拥有特定的资源,包括CPU、内存、网络设备等物理资源,以及路由表、协议栈、系统配置等逻辑资源.各虚拟实例负责为其所属的虚拟网络提供路由转发服务.本文基于高性能虚拟网络VegaNet[2]提出一种虚拟路由器设计方案,旨在为下一代互联网研究提供一个满足保真、高效、可控、隔离和可扩展需求的虚拟网络实验环境,为研究人员提供全方位的创新实验支持.本文主要贡献包括:(1)提出VegaNet虚拟路由器的结构框架,阐述了VegaNet虚拟路由器的应用场景;(2)设计了虚拟路由器的虚拟链路状态检测机制与统一数据转发引擎,以保证VegaNet网络与物理网络的状态一致性以及数据转发的高效性;(3)实现了虚拟路由器原型系统;(4)对虚拟路由器的链路状态检测性能和数据转发性能进行了实验评价.本文第2节介绍VegaNet虚拟网络的背景与虚拟路由器的相关工作;第3节概述VegaNet虚拟路由器的结构框架及其应用场景;第4节具体阐释虚拟路由器的轻量级虚拟链路状态检测机制与高效数据统一转发机制;第5节给出虚拟路由器的原型系统实现;第6节对虚拟路由器进行性能评价;第7节总结全文工作,并提出下一步工作计划.2背景及相关工作2.1VegaNet虚拟网络VegaNet虚拟网络是一个采用Overlay结构的新型网络实验平台,以互联网作为物理基础设施,其模型如图1所示.VegaNet网络设备主要包括两部分:物理路由器与虚拟路由器.物理路由器即物理网络中的路由器,通过物理链路互连,负责虚拟网络的数据传输服务;虚拟路由器通过直连线路连接到物理路由器,与物理路由器形成映射关系.虚拟路由器上的虚拟实例通过虚拟链路连接起来构成虚拟网络,利用由物理路由器与物理链路构成的底层物理网络进行通信.与物理路由器和物理链路构成的物理网络相对应,虚拟路由器和虚拟链路构成了基本的实验环境.VegaNet虚拟网络与物理网络的连接关系具有两种视图———平面视图与立体视图.在平面视图上,虚拟路由器以普通主机的身份通过物理路由器接入到物理网络中,采用隧道技术实现的虚拟链路将多条物理链路整合为一条逻辑上的直连链路,为虚拟路由器上的虚拟实例提供点到点的连接.在物理网络看来,虚拟路由器和网络上的任何一台主机一样,是自己提供数据转发服务的对象.这样就保证了虚拟网络对物理网络的透明性,使虚拟路由器的接入不会对商业网络路由器的运行造成干扰.在立体视图上,虚拟网络是覆盖于物理网络之上的网络,虚拟路由器作为虚拟网络的核心结点,为虚拟网络提供路由计算、数据转发等服务.节点虚拟化技术赋予了虚拟路由器可扩展的特性,使得一个虚拟路由器上可以构建出多个虚拟实例.采用隧道技术实现的虚拟链路将各虚拟实例分配到不同的虚拟网络拓扑中,从而构建起多个相互隔离且独立运行的虚拟网络.这样一来,在同一物理网络之上,VegaNet网络对不同的研究者可以同时提供多个相互隔离的虚拟网络实验环境.在图1中,不同类型的虚线构成了不同拓扑结构的虚拟网络.Page3文献[2]对VegaNet体系结构进行了总体设计,提出借助网络虚拟化技术及虚拟路由器的硬件转发技术为网络研究提供真实实验平台的概念.本文在此基础上,进一步提出VegaNet网络上虚拟路由器的设计实现方案,并对方案进行了详细的性能分析与评价.2.2虚拟路由器文献[3]对虚拟路由器技术进行了较为全面的综述,本文根据虚拟路由器实现方式的不同,将其分为基于专用硬件的虚拟路由器与基于通用服务器平台的虚拟路由器两类,进行简要的分析说明.在基于专用硬件的路由器虚拟化技术中,虚拟数据平面采用专用硬件实现,以保证虚拟路由器的转发性能.例如,SwitchBlade[4]使用FPGA硬件平台构建虚拟数据平面;SPP(SuperchargedPlanetlabPlatform)[5]路由器节点的控制平面运行在通用服务器平台上,数据平面则运行在IXP网络处理器上;PEARL[6]将多核处理器与内嵌TCAM及SRAM存储器的专用数据包处理卡相结合,来构建可编程虚拟路由器;ServerSwitch[7]将服务器与Switch芯片相结合,为数据中心网络提供复杂数据包处理能力与可编程性.硬件辅助路由器虚拟化的局限性在于固化的硬件芯片技术使用户很难根据业务需求灵活调整报文处理流程,同时有限且高成本的高速硬件资源限制了虚拟路由器的可扩展性.近年来,XORP[8]、QUAGGA①等路由管理软件与Click[9]、VALE[10]等软件数据交换技术的兴起使得利用通用服务器平台实现高性能虚拟路由器成为可能.虚拟路由器的控制平面与数据平面均采用软件技术实现,不需要专用硬件设备的支持.文献[11]证明了在通用的x86硬件平台上实现虚拟路由器的可行性.常见的通用平台虚拟路由器系统有RouteBricks[12]、PacketShader[13]、PlanetLab节点[14]等.相对于基于专用硬件的虚拟路由器,利用软件实现的虚拟路由器具有更好的灵活性和可扩展性,且成本较低.本文提出的虚拟路由器设计方案基于通用服务器平台,通过对Click软件路由器进行扩展,设计了虚拟路由器的统一数据转发引擎,使其同时支持多个虚拟路由实例的数据转发,利用虚拟链路状态检测技术为研究人员提供一个具有高保真性的虚拟网络实验环境,并利用VegaNet平台提供的对互联网的透明性,保证虚拟路由器可以在现有网络环境中进行全面部署.3虚拟路由器设计3.1设计目标VegaNet作为一个大规模的虚拟网络实验环境,其核心设备虚拟路由器的设计首先应该满足保真性与可控性这两大基本设计需求[15],在此基础上,还应该尽可能地确保实验平台的高效性、隔离性与可扩展性,为创新技术的实验与评估提供有效的实验环境.VegaNet虚拟路由器的设计目标如下:(1)保真性.首先,虚拟路由器应该具备同步跟踪物理网络状态和行为的能力,能够快速感知物理链路上的故障或故障恢复等事件并将这些事件引入虚拟网络,使虚拟网络具备类似物理网络的动态变化能力;其次,虚拟路由器应该具备物理路由器的功能,承载真实的用户流量,运行真实的网络协议.(2)高效性.虚拟路由器需要为多个虚拟网络的分组提供转发服务,必须具备高效的数据转发能力,一方面能以较低的转发开销实现快速数据转发,另一方面要尽量避免大规模数据转发对控制平面上运行的实验协议造成干扰.(3)可控性.虚拟路由器应该向用户提供配置接口,允许用户根据实验需求定制虚拟网络拓扑,配置虚拟网络路由协议,控制虚拟网络的流量特性,并允许用户向虚拟网络中注入现实环境中发生概率较小的网络事件.(4)隔离性.首先,虚拟路由器应该对物理路由器透明,不干扰物理网络的正常运行;其次,虚拟路由器设备上的多个虚拟实例之间也应该具备良好的隔离性,保证一个实例的运行故障不会对同设备上的其他实例产生影响.(5)可扩展性.可扩展性包括两方面:一是虚拟路由器在物理网络上的增量部署;二是虚拟实例在虚拟路由器上的增量创建.3.2虚拟路由器结构VegaNet虚拟路由器主要包括管理模块、虚拟链路状态检测模块、路由模块、转发模块4大功能模块,其结构框架如图2所示.管理模块、虚拟链路状态检测模块与转发模块运行于虚拟路由器的底层操作系统平台上,平台利用虚拟化技术创建多个虚拟实例,每个实例代表虚拟网络的一个节点,其上运行各自的路由模块.各虚拟实例的虚接口通过虚拟交①Quaggasoftwareroutingsuite.http://www.quagga.netPage4换机映射到虚拟路由器的物理接口上,利用物理接口与外部网络进行通信.虚拟路由器的管理模块负责虚拟网络的创建与维护.通过向研究人员开放一系列的配置接口,管理模块允许研究人员主动维护虚拟网络的属性参数.具体来说,在创建一个虚拟网络之前,研究人员需要将虚拟网络的节点规模、拓扑连接、路由协议、服务类型等参数输入管理模块,管理模块根据用户配置指令生成对应的虚拟实例,并在指定的虚拟实例间使用隧道技术建立虚拟链路,为虚拟实例提供点到点的逻辑连接,构成虚拟网络的拓扑结构.类似地,在虚拟网络运行过程中,研究人员同样可以通过管理模块实现虚拟网络属性参数的调整.实时检测虚拟网络链路的状态变化对于建设一个可用、可靠、可控的虚拟网络具有至关重要的意义,此功能由虚拟链路状态检测模块完成.由于虚拟链路是一种逻辑上的链路,由多条物理链路连接而成,因此其状态主要取决于底层物理链路的状态.虚拟链路状态检测模块上的链路状态检测协议周期性地与邻居虚拟实例节点交互控制报文,根据报文中携带的控制信息判断当前物理网络的链路状态,并据此确定对应的虚拟链路状态.利用此协议,可以实现对虚拟链路双向连通性、分组往返传输时间、跳数、MTU等状态参数的快速检测和通告.路由模块用于实现各虚拟实例的路由寻址功能,主要负责虚拟网络中路由信息的交互,确保虚拟网络的可达性,并为转发模块提供转发依据.路由模块上运行的路由协议是由研究人员来定义和实现的,它可以是广泛使用的IP协议或者IPv6协议,也可以是研究人员设计的新型协议.路由机制与路由协议的研究是网络体系结构研究的重点内容,传统的OSPF、BGP等协议的改进算法不断涌现,NDN、二维路由等采用新型寻址技术的路由机制也纷纷出现,研究人员将路由协议部署在路由模块上,就可以利用虚拟网络环境对路由协议的各种属性进行评测.转发模块为虚拟路由器上所有的虚拟实例提供统一的数据转发服务.统一转发机制将数据平面从各实例内部转移至虚拟路由器底层内核,各虚拟实例的路由模块定期将更新的路由表信息发布到转发模块,由转发模块生成共享转发表,转发模块根据共享转发表对虚拟网络分组进行路由查找,获得下一跳虚拟结点信息,然后对分组进行封装并将其转发到相应的虚拟链路上.由于转发模块提供的是对应用程序透明的数据转发服务,因此应用层程序不会感知虚拟网络的存在,可以直接在虚拟网络中进行部署和测试.3.3应用场景图3展示了VegaNet虚拟路由器的典型应用场景.图中,虚拟路由器VR1-VR4以终端主机的形式接入由PR1-PR6组成的物理网络,用户通过虚拟路由器的管理模块定制了两个虚拟网络:虚拟网络1由3个虚拟实例(分别位于VR1、VR2和VR3上)以及两条虚拟链路组成,运行路由协议A;虚拟网络2由3个虚拟实例(分别位于VR1、VR2和VR4上)以及两条虚拟链路组成,运行路由协议B.协议A和协议B的数据分组进入VR1,在VR1转发模块中完成路由查找及IP头封装.路由查找确定协议A分组的下一跳为VR2,协议B分组的下一跳为VR2(或VR4),因此协议A分组封装后的目的地址为VR2,分组经PR1、PR2的路由到达VR2.协议B分组封装后的目的地址为VR2(或VR4),分组经PR1、PR2的路由到达VR2(或经PR1、PR3、PR4、PR6的路由到达VR4).同样地,VR2上的协议A分组进一步经路由到达VR3.虽然虚拟网络分组从一个虚拟实例到达另一个相邻的虚拟实例经过了多个物理路由器,但从虚拟网络的视角来看却是一条直连通路,即虚拟链路.可以看出,VegaNet网络上Page5的虚拟实例及虚拟链路通过对物理设备与链路的复用简单高效地实现了不同协议在同一物理网络上相互独立的并行运行.此外,虚拟实例上的虚拟链路状态检测模块通过对物理链路状态的实时监测,可以将真实的网络故障事件同步引入虚拟链路,实现对协议A、B的测试.4关键技术4.1虚拟链路状态检测虚拟路由器上的虚拟实例间通过虚拟链路来建立连接.如上文所述,虚拟链路是采用隧道技术实现的一种逻辑链路,分组在一条虚拟链路上的实际传输路径由连接隧道起点和终点的物理链路以及中间物理路由器组成.虚拟路由器在转发虚拟网络分组时,首先将其封装在IP分组中,IP报头中指明了虚拟链路的源端与目的端,封装后的分组被发送到与此虚拟路由器处于同一网段的物理路由器上,并被物理网络上的路由器逐跳转发,分组最终到达IP报头中指定的目的虚拟路由器,这台虚拟路由器将封装分组解封装即可得到原虚拟网络分组,这样就实现了分组在虚拟网络上的一跳转发.虚拟链路是构建在物理链路之上的逻辑连接,当其实际传输路径上的某条物理链路发生故障时,物理网络会迅速进行重路由,为该虚拟链路选择一条新的物理传输路径,因此虚拟实例很难感知到虚拟链路上的故障事件,无法为实例上运行的实验协议提供一个动态的测试环境.此外,由于物理网络上通常承载着多种数据传输业务,虚拟链路的流量特性容易受到其他流量负载的影响,因此虚拟链路的传输时延和抖动、链路拥塞状况以及故障频率等状态参数又具有较大的可变性.为了保证虚拟实例能实时获取虚拟链路的状态参数,以提供一个尽量真实可靠的实验环境,我们在VegaNet虚拟路由器上部署虚拟链路状态检测模块,以较低的控制报文开销对虚拟链路的状态进行快速检测.虚拟链路状态检测模块通过在一条虚拟链路的两个虚拟实例端点之间建立会话来对其状态进行检测,包括主动检测与被动检测两种方式[16].首先,虚拟实例对之间通过握手协议协商待检测的链路状态参数.接着,检测模块为虚拟实例双方建立会话状态机,虚拟实例根据会话状态周期性地发送探测报文并接收对端回复的响应报文,根据报文中携带的信息判断虚拟链路的当前状态.当连续多个周期未收到响应报文时,意味着虚拟链路产生故障.这种检测方式称为主动检测.当虚拟链路上有数据传输时,可以利用数据报文来判断虚拟链路的连通状态.在虚拟链路上传输的数据报文是经过封装的,其IP头的源地址和目的地址正是虚拟链路两个端点的地址,因此通过检查数据报文头部的源地址,就可以判断数据是否来自虚拟链路对端的实例,从而确定虚拟链路的连通状态.这种检测方式称为被动检测.与主动检测相比,被动检测降低了探测报文的发送开销,在网络拥塞的情况下可以提高探测准确度.通过将这两种机制有机结合在一起,虚拟链路状态检测模块可以达到轻量快速的检测效果.4.2统一数据转发VegaNet虚拟路由器采用统一的数据转发机制来代替各虚拟实例内部的转发功能.其核心思想是对虚拟实例的控制平面与数据平面进行分离,控制平面运行在各实例内部,负责路由计算;数据平面则转移至虚拟路由器内核中.各虚拟实例的数据平面在底层构成一个统一的数据转发引擎,负责本虚拟路由器节点上所有实例的数据转发.采用统一数据转发机制的虚拟路由器结构如图4所示(为突出重点,此图中省略了图2管理模块).各虚拟实例的控制平面运行路由协议,生成路由表项,并定期将更新后的转发表信息发布到统一转发引擎中,由统一转发引擎对各实例的转发表进行组织管理.当虚拟路由器上的物理网卡接收到发往各实例的虚拟网络分组后,不会将其递交给对应的虚拟实例,而是直接在统一转发引擎中完成路由查找,然后将虚拟网络分组重新通过物理网卡发送到物理网络中.Page6统一转发引擎中的数据转发流程为:首先从物理网卡上获取数据报文,对其进行解封装处理以获得内部的虚拟网络分组,然后对分组进行分类以取得其所属的虚拟实例编号.接着,这些虚拟数据分组进入统一转发引擎的路由查找模块内,根据虚拟实例编号取得对应的转发表进行路由查找.查找结束后,分组分3类进行处理.如果分组的目的地址为各虚拟实例(如虚拟实例之间交互的虚拟网络控制报文),需要将其经虚拟交换机向上递交到各虚拟实例;如果分组的目的地址是虚拟路由器的主机地址,则将其递交给主机;对于需要向外转发的虚拟网络分组,则将路由查找确定的下一跳或出接口转换为对应的虚拟链路起点与终点地址,对分组进行封装后将其经物理网卡发送至下一跳虚拟实例.统一转发引擎的核心数据结构是各虚拟路由器图5共享转发表示例图算法1为基于共享转发表的路由查找算法.该算法以虚拟实例的编号id和分组的目的地址addr为参数,返回转发表项在该虚拟实例转发表中的位置下标key.算法从根结点开始,获取trie树当前层节点中与addr匹配的分支branch(第5行),然后找到此分支对应的共享索引表sh_index(第6行).如果索引表中存在对编号为id的转发表的索引,则将查找到的转发表项下标存入key(第8行),key中永远保存到当前层为止最匹配的查找结果.第9行将node更新为其子结点后进入下一轮循环,直至到达trie树的叶结点后退出循环,这保证了最长前缀匹配的路由查找原则.第10行返回最终查找结果.算法1.基于共享转发表的路由查找算法.输入:id,addr输出:key1.lookup(id,addr){2.node=root3.key=-1实例的转发表.这些转发表是由各虚拟实例中运行的路由协议动态生成的,转发表的大小、结构取决于其所属虚拟网络的规模以及所采用的网络协议.当虚拟路由器上各虚拟实例的转发表属性不同时(如同时包含IP转发表与NDN转发表),各转发表在统一转发引擎中独立存储.当各虚拟实例的转发表属性相同时,我们可以将这些转发表组织成一个共享转发表,实现对各转发表的统一索引.以IP转发表为例,其共享转发表结构由3个部分组成,分别是trie树、共享索引表和各虚拟实例的转发表(图5).Trie树用于组织各虚拟实例转发表的IP前缀,每个节点包含2n个分支(1n32),可以表示IP地址中的n比特位.Trie树结点上的每个分支都指向一个共享索引表.共享索引表将各虚拟实例的编号作为关键字来索引trie树前缀分支对应在该虚拟实例中的转发表项位置.4.WHILE(node)5.DObranch=get_branch(node)6.sh_index=node[branch].sh7.IF(sh_index&&sh_index[id].real())8.THENkey=sh_index[id].index9.node=node[branch].child10.RETURNkey11.}以图5为例,如果要使用虚拟路由器VR1对目的地址为255.252.0.1的虚拟网络数据分组进行转发,首先自上而下遍历trie树,发现与255.252.0.1匹配的有索引的最长前缀为255.252.0.0/14,即trie树第2层编号为254的分支,由此查找对应的共享索引表,得知此前缀在虚拟转发表VR1中的下标为1,所以此分组的下一跳为11.3.0.1.统一转发引擎避免了虚拟网络分组从物理接口定向到虚拟接口以进入虚拟实例,在虚拟实例中完成路由查找后再从虚拟接口定向到物理接口以进入物理网络的过程,降低了转发开销,同时基于共享转Page7发表的统一路由查找提高了路由查找效率,节约了转发表的维护成本.此外,统一转发减轻了虚拟实例的数据平面维护负担,使其能将资源集中用于控制平面上实验协议的运行与维护.5虚拟路由器实现5.1原型系统VegaNet虚拟路由器原型系统的系统结构如图6所示.原型系统采用CentOS①操作系统,使用Xen[17]半虚拟化技术支持虚拟路由器实例的创建与管理,其中,Dom0运行虚拟链路状态检测模块和数据统一转发引擎,各DomU作为虚拟实例,主要负责维护控制平面.虚拟交换机用于支持Dom0与DomU之间的通信.虚拟路由器上各虚拟实例的控制平面采用开源路由协议套件Quagga.Quagga支持RIP、OSPF等域内路由协议,以及BGP等域间路由协议.数据统一转发引擎利用开源的模块化软件路由器组件Clickmodularrouter[9]构建,负责所有虚拟实例数据报文的转发.Quagga将各虚拟实例的路由表信息经虚拟交换机发送给统一转发引擎,作为其分组转发的依据.虚拟链路状态检测模块运行在虚拟路由器Dom0的用户空间内,主要包括5大功能体.用户注册模块为节点上的虚拟路由器实例提供注册服务,维护各实例委托检测的虚拟链路信息.配置数据库保存各实例对检测算法的配置信息.检测状态机是一个有限状态机,用于维护各虚拟链路的会话状态.检测引擎运行状态检测算法,控制物理接口上探测报文的收发,并向检测状态机通告当前链路状态.直接在物理接口上收发探测报文可以避免探测报文的封装和解封装操作,降低数据平面处理负担,减少探测报文对网络带宽的占用.流量监控模块利用Click监控各实例的数据流量,并负责按照一定的调度策略对数据流量进行调整,使其满足特定的流量特征.此外,流量监控模块还负责将流量信息通告给检测状态机,辅助链路状态的检测.5.2网络部署目前,我们在北京、沈阳、上海、深圳、西安、成都、重庆、武汉8个城市的10所高校部署了12台VegaNet虚拟路由器节点.这些虚拟路由器通过高校驻地网连接到CERNET2②的核心路由器上,可以实现对CERNET2物理网络行为的模拟.用户通过虚拟路由器的配置接口来创建虚拟路由器实例,定制实例间的虚拟链路连通关系,维护虚拟网络的路由运行.VegaNet虚拟网络规模的扩展包括横向与纵向两个维度.横向扩展指虚拟路由器节点设备在物理网络上的增量式部署,纵向扩展是指通过在部署好的虚拟路由器设备上创建多个虚拟路由器实例,来构建在逻辑上完全独立的多个虚拟网络实验环境.6实验及性能评价6.1实验环境本章对VegaNet虚拟路由器的虚拟链路状态检测模块与统一数据转发模块的性能进行实验评价.一个小型VegaNet实验环境如图7所示.在R1、R2和R3这3台物理路由器设备上分别接入VR1、VR2和VR3这3台虚拟路由器设备,虚拟路由器采用IntelXeon四核CPU处理器,装配16GB内存,操作系统采用CentOS5.4.在各虚拟路由器①②Page8上使用xen虚拟化技术安装多个虚拟实例(图中Dom1、Dom2),3个Dom1实例与3个Dom2实例分别通过IP-in-IP隧道封装技术构建虚拟链路,形成两个全连接的虚拟网络Vnet1、Vnet2.物理网络和虚拟网络均运行OSPF路由协议.PC1、PC2、PC3分别为3台用户终端,通过直连的虚拟路由器接入虚拟网络.6.2虚拟链路状态检测实验虚拟链路状态检测实验首先在CNGI-CERNET2主干网上采集真实的故障数据.我们在CERNET2的8个接入点部署了运行Traceroute程序的分布式并行故障采集服务器,涵盖了CERNET2的25个核心节点以及62条主干链路.服务器以50ms的周期并行采集邻近链路故障,采集时间持续6个月,共收集到12715个链路故障数据.虚拟链路状态检测实验将这些故障数据在实验平台的物理网络上进行重放,以评价虚拟网络同步跟踪物理网络状态变化的能力,并在此基础上评价虚拟网络的路由收敛效果.为了简化实验内容,我们集中在图7的R1-R2物理链路上重现故障,通过禁用R1-R2链路的数据传输来模拟一个故障,禁用时间即CERNET2采集到的实际故障持续时间.VR1、VR2上的检测模块对VR1-VR2虚拟链路的连通性进行检测,并记录检测到的故障发生时刻与恢复时刻数据.我们使用检测延迟时间变量来刻画虚拟网络同步跟踪物理网络状态变化的能力.故障检测延迟时间定义为VegaNet虚拟路由器检测到故障发生的时刻与物理链路实际发生故障的时刻的差值,故障恢复检测延迟时间定义为VegaNet虚拟路由器检测到故障恢复的时刻与物理链路故障实际的恢复时刻的差值.检测参数配置为:探测报文的发送和接收周期为50ms,最大允许未收到探测报文的周期数为3.故障事件检测延迟的累积分布如图8所示,故障恢复事件检测延迟的累积分布如图9所示.从图中可以看出,故障检测延迟时间主要集中在[90,135]ms区间内,故障恢复检测延迟时间主要集中在[45,95]ms区间内,二者均呈现均匀的分布态势.大约85%以上的故障事件可以在120ms内完成检测,97%以上的故障恢复事件可以在100ms内完成检测.这说明虚拟链路状态检测模块能够在合理的检测参数配置下快速感知物理网络的故障发生与恢复事件.当虚拟链路状态检测模块检测到链路故障时,虚拟实例会重新进行路由计算.同样地,链路故障也会引发物理路由器重新计算路由.出于公平性考虑,我们将链路状态检测算法移植到物理路由器上,然后以OSPF路由协议为例对物理网络和VegaNet虚拟网络上的路由收敛时间进行对比实验.图10的实验结果表明虚拟实例的路由收敛时间和对应物理路由器的收敛时间非常接近.由于虚拟链路比物理链路经过了更多的物理交换设备,因此虚拟网络的路由收敛时间整体上比物理网络慢13%左右.如果虚拟网络没有采用虚拟链路状态检测机制,则底层物理链路的故障会被物理路由器上快速的重路由屏蔽,虚拟网络就无法感知到实际网络状态的改变.这充分说明虚拟链路状态检测机制对确保VegaNet虚拟路由器的保真性起到了重要作用.Page9图11展示了在路由收敛期间R1-R2物理链路和VR1-VR2虚拟链路上分组的往返传输时间(Round-TripTime,RTT)变化情况.前50s内,两条链路上的RTT值稳定地保持在较低水平线上.50s时R1-R2链路发生故障,物理网络和虚拟网络均迅速检测到了故障事件并重新计算路由.此后,R1~R2的路由切换为R1-R3-R2,VR1~VR2的路由切换为VR1-VR3-VR2,路径的拉长使两者的RTT值增大,且波动更加明显.192s以后R1-R2链路故障恢复,虚拟网络和物理网络的路由均恢复到初始状态,RTT值也重新恢复到50s前的趋势.这说明VegaNet虚拟网络具有模拟物理网络故障事件的能力,且二者具有一致的变化规律.为了验证VegaNet在大规模网络环境下的保真性,我们进一步在仿真平台NS2上实现了虚拟链路状态检测机制.我们引入GEANT①和Abilene②网络作为底层物理网络,使用二者的真实拓扑以及真实流量进行模拟实验,实验结果与图8和图9的结果基本吻合.这表明在大规模网络环境中虚拟路由器的链路状态检测机制仅引入了较小的故障检测延迟与故障恢复检测延迟,具备实时检测网络状态的能力.6.3统一数据转发实验统一数据转发实验采用图7的实验环境来测量虚拟路由器的实际转发性能.实验使用ping命令在VR1和VR3上的虚拟路由器实例间进行数据交互,所有的数据流量均通过VR2进行转发.VR2上提供两种数据转发服务,第1种采用本文设计的统一转发引擎,各虚拟网络分组在Dom0上统一完成路由查找与转发;第2种即传统的转发方式,到达VR2的虚拟网络分组分别进入相应的虚拟实例(DomU)完成转发.我们在VR1的虚拟实例上获取分组在两种转发机制下的RTT时间,通过RTT的对比来衡量统一转发引擎的转发性能,并通过扩展实验平台上部署的虚拟实例数量,测试在多个虚拟网络共存的环境下统一转发引擎的转发性能.首先测试只有1个虚拟网络Vnet1时统一转发引擎的性能.我们在VR1的虚拟实例Dom1上以0.01s的发包间隔向VR3上的虚拟实例Dom1连续发送1000个长为10000Bytes的分组,分别记录下使用VR2统一转发引擎(统一转发)和使用VR2上虚拟实例Dom1进行转发(虚拟实例转发)时分组的RTT变化情况,如图12所示.图12统一转发与虚拟实例转发的RTT对比图图12中,使用统一转发引擎时,RTT的最小值、平均值、最大值分别为4.719ms、5.381ms、5.477ms,标准差为0.086ms,使用虚拟实例转发时,RTT的最小值、平均值、最大值分别为6.375ms、6.991ms、0.166ms,标准差为11.243ms,这说明统一转发引擎有效地降低了虚拟网络数据包的转发延迟,提高了虚拟路由器的转发性能,平均性能提高约为23%.图12中,统一转发的RTT波动相对虚拟实例转发而言更加平稳,我们猜想这是因为统一转发引擎在Dom0中进行数据转发,受到上层虚拟实例系统负载的影响较小,从而保证了更为稳定的数据转发.为了验证这一猜想,我们在VR2的实例Dom1上运行了大量的额外计算任务,在此背景下重复上面的实验,图13展示了在500s内两种转发模式的CPU利用率变化情况.图中虚拟实例转发方式只在很短的时间范围内抢占到CPU资源,其余时间CPU利用率均为0,而统一转发方式则在大部分时间里占有了CPU资源,且CPU利用率稳定维持在20%左右.①②Page10图14展示了当VR2上有1~6个携带其他计算任务的虚拟实例进行数据转发时,两种转发模式的RTT平均值对比情况.可以看出,随着实例个数的增多,统一转发方式下RTT时间基本保持平稳,而使用虚拟实例转发时RTT时间迅速增大到上百毫秒,严重影响转发性能.这说明,相对于在各虚拟实例内转发虚拟网络分组的方式,统一转发引擎能为虚拟网络的数据转发提供更为可靠的服务质量保证.7总结本文介绍了VegaNet网络虚拟路由器的设计与实现方案.本文所提出的虚拟路由器设计满足大规模虚拟网络实验环境的5大需求:(1)保真性:虚拟路由器上的虚拟链路状态检测机制能够以较低的报文开销对虚拟链路的状态进行快速检测,保证虚拟网络与物理网络的状态一致性;(2)高效性:Vega-Net虚拟路由器使用统一转发引擎为不同虚拟网络上的数据流提供统一的转发服务,提高了虚拟网络的分组转发效率;(3)可控性:虚拟路由器允许用户根据实验需求定制个性化的虚拟实验环境;(4)隔离性:虚拟路由器作为终端主机接入物理网络,不会干扰物理网络的正常运行,同时,虚拟路由器上的各虚拟实例间彼此隔离,可以独立运行不同的实验;(5)可扩展性:经济的软件路由器技术与基于隧道的虚拟链路构造技术使得VegaNet虚拟路由器支持在物理网络上的增量部署与网络拓扑的动态更新.采用真实网络数据的实验结果表明,VegaNet虚拟路由器具备实时链路状态检测能力与高效数据转发能力,可以为下一代互联网体系结构的研究提供有效的实验平台支持.VegaNet虚拟路由器的下一步工作主要致力于以下两个方面:(1)提供更方便的用户操作接口,实现各虚拟网络的统一远程配置与管理;(2)在路由模块上支持更多的创新网络体系结构,如ICN和OpenFlow等.
