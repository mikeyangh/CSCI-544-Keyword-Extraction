Page1基于概念松弛的高效Web服务查询方法欧伟杰1)曾承1),3)项小明2)彭智勇2)李德毅1),4)1)(武汉大学软件工程国家重点实验室武汉430072)2)(武汉大学计算机学院武汉430072)3)(清华大学软件学院北京100084)4)(中国电子工程系统研究所北京100141)摘要随着云计算技术的发展,面向服务的应用在互联网上呈现快速增长趋势,开放平台中基于云服务的组合服务也如雨后春笋般大量涌现,这给用户快速、精确定位所需服务带来了巨大挑战.尽管传统服务查询方法在查全率和查准率方面已取得较大进步,但仍无法适用于动态的互联网环境下大规模服务发现的要求.文章根据概念之间的语义关系,提出了基于概念松弛的相似性服务查询方法,它通过计算无关概念与服务对查询结果的影响,不仅改善了服务查询的效果,而且满足海量服务查询的高效性要求.经实验证明,文中提出的方法不仅在性能上优于传统方法,且满足服务查询的可扩展性.此外,该方法已经应用于上线的按需服务平台中.关键词服务计算;服务发现;语义相似性;二分图匹配1引言云计算已从概念逐步走向成熟,而Web服务作为云计算实现的关键技术受到了越来越多的关注.面向不同领域的具体服务可以满足个人用户的日常需求,具体服务之间的互操作可以为企业建立各种新颖的业务流程,实现按需组合.服务作为一种软件资源为企业和个人用户带来了巨大的便利,但随着互联网上服务数量的快速增长,传统的服务查询方法已不能满足用户的需要.如何实现面向Web服务的高效查询已成为一个严峻的挑战,引起不少研究者的关注[1].传统服务发现无论是UDDI(UniversalDescrip-tionDiscoveryandIntegration)还是搜索引擎,都是通过关键字查询实现.但调研显示绝大部分服务描述仅包含30~40个词语[2],因此返回结果可能出现两种情况:当搜索关键字较为特殊时,由于没有包含关键字的服务而导致查全率低;当关键字为常用词时,返回大量假阳性的结果致使查准率不足.虽然也有部分研究通过信息检索技术(向量空间模型,tf-idf等)改善这种情况,但对于服务描述这类短文本,实际效果并不理想.于是语义方法被引入服务计算,通过领域本体中的语义信息建立需求与服务之间的桥梁.面向语义服务描述语言(OWL-S,WSMO以及SAWSDL等),出现了基于概念匹配度的服务发现方法.这类方法可以在很大程度上改善服务发现的性能,但计算代价较高,不适合大数量级服务的应用.另外,基于语义的方法限于特定领域之内,且本体构建和基于本体的服务描述扩展均需要手工完成,也是这类方法无法广泛使用的原因.目前,为了更好地适应WSDL服务,摆脱领域束缚,众多基于概念相似性的服务查询方法被提出来[3-10].核心思想是通过相似性衡量服务与需求的匹配程度,其中概念的相似性计算依靠外部信息(如通用层次本体①[11]、搜索引擎[12])实现,这些方法在实验中均得到较高的查准率和查全率.但应用于实际互联网时,仍存在以下不足:(1)计算概念的语义距离时,并未考虑不同概(2)无法支持大规模服务应用,大部分方法计(3)部分方法通过预计算来提高算法的整体效率,但当外部信息频繁变化时,预计算带来巨大的计念之间的语义关系,如is-a、partof等;算单个服务相似性的响应时间在百毫秒级别;算开销;(4)无法适用于组合服务的查询.组合服务根据组合方法的不同有着不同的描述,面向具体服务的查询方法将失效.为了解决上述问题,本文提出了基于概念松弛的两段式服务查询方法.在概念相似性计算时考虑了泛化和特化两种不同的策略,充分利用了概念之间的语义关系;基于概念映射的相似性查询算法,支持动态环境下的及时更新.我们主要的贡献主要表现在以下3点:(1)提出了基于层次本体的概念松弛算法,该方法不仅根据概念之间语义关系设计了不同的松弛策略,而且能够适应于实时领域切换、领域本体更新等动态环境;(2)基于概念映射的服务查询方法,较传统方法有更高的计算效率,且能够在无预计算情况下实现实时语义查询.(3)在原型系统中实现了面向接口的服务相似性查询方式,适应具体服务与组合服务混合的查询;本文第2节介绍服务查询的相关研究工作;第3节将分析相似性服务查询存在的问题,并给出基本概念以及定义.两段式服务查询方法将在第4节详细说明,包括方法的整体流程、概念松弛以及相似性计算;第5节是针对本文提出方法的具体实验和结果分析.2相关研究服务发现方法从最初基于UDDI的关键字查询发展到面向语义服务的概念匹配方法,虽然查全率和查准率均有一定提升,但本体的构建、服务描述的语义扩展都需要大量人工参与,无法广泛应用.而基于相似性的服务查询借鉴了语义服务发现中概念匹配的思想,通过概念间的语义距离计算用户需求与服务之间的语义相似度,引起了不少研究者的关注.这方面的工作主要可以分为3类:基于实例的查询、二分图匹配以及预计算聚类服务,也有部分方法同时运用以上多种策略.基于实例的服务查询将用户请求以WSDL表示,通过相似性反映服务对需求的满足程度.最具代表性的工作是Woogle[3]和URBE[6].Woogle中所提出的方法首先聚类服务集合中的概念,根据不同①Wordnet,http://wordnet.princeton.edu/Page3语义的概念类分别计算Web服务之间的3个相似性:输入/输出参数相似性、操作描述的相似性、服务名及描述相似性.通过实验确定3个相似性的权重,最后得到Web服务整体的相似性结果.由Pierluigi等提出的URBE,将相似性计算分为两部分:语义相似性和语法相似性.其中语义方面与该Web服务所要完成的功能有关,表现为整个服务描述、操作以及参数的名称.语法方面与该服务的输入、输出接口之间的关系以及接口的数据类型相关.其中值得注意的是,在语义相似性计算时也利用了二分图匹配,作者还讨论了两个接口之间相似性的不对称性,这种不对称来自于两接口的概念数量不一致.基于二分图匹配的服务查询是通过概念集合来表示服务,首先得到概念之间的语义距离,通过二分图建模用户需求和具体服务,最大权匹配[13]的结果反映了服务与请求的相符程度.浙江大学吴朝晖等提出的方法[9]关注点在于服务发现,通过服务、操作以及接口参数三个层次讨论需求与服务的关系.其中接口参数相似性计算中利用了二分图匹配,并加入了输出与输入的依赖关系.但对于最大权匹配应用于不平衡二分图的情况,仅通过添加虚拟结点处理.文献[7]中指出WordNet不如搜索引擎所支持的概念广泛,而且不能适应新生概念.因此利用搜索引擎的返回结果作为两个概念之间相似性的度量.分析了目前二分图算法中每个服务接口的概念都是相对孤立的,没有考虑未匹配节点的语义.因此作者提出了几种相似性计算公式,将未匹配结点的最大权边加入相似性计算.总的来说,二分图匹配可以提高相似性计算的准确率但其计算复杂度较高,不适用于大规模服务的应用.而基于服务聚类的服务查询的主要思想是首先计算任意两个服务之间的相似性,通过聚类得到不同语义的服务类,将查询空间限制于特定类中,提高计算效率.文献[8]中是利用Google距离作为概念相似性的度量,同时考虑了服务的结构信息,综合得到两个服务之间的语义距离.文献[10]利用本体中概念之间的不同关系来聚类服务集合,不用给出特定的阈值.但当服务库中服务频繁变化时,以上预计算方法得到的聚类将失效,需要重新计算服务类,维护代价过高.综上所述,基于相似性的服务查询比关键字查询和语义匹配方法有更好的适应性和性能.但概念相似性的获取和二分图匹配带来的计算开销严重制约了具体应用中服务的规模,基于聚类的方法虽然可以在一定程度上解决该问题,但不适合动态环境下的服务发现.3服务查询的定义3.1基本定义对于服务查询,用户需求与服务如何表征关系到具体方法的设计.具体服务可以同时考虑服务的结构与语义,因此基于实例的查询方法可以充分利用这部分信息.但对于组合服务而言,不同组合方法最终生成的结果有较大差异性,大部分组合算法的结果仅为包含特定输入/输出接口的服务流程,流程中任一服务均不能充分代表当前组合服务的实际能力.为了统一具体服务和组合服务的查询,下面给出服务的形式化定义.定义1.服务.一个服务S可以通过1个4元组来表示:S={ns,ds,I,O},其中:(1)ns是服务名称;(2)ds表示服务的描述信息;(3)I={i1,i2,…,in}是该服务的输入概念集合;O={o1,o2,…,om}为该服务的输出概念集合.但组合服务仅包含服务名和输入/输出概念集合.本文定义用户的服务请求为如下定义.一个3元组R={I,O,θ},其中:定义2.服务请求.一个服务请求R可表示为(1)I是用户提供的输入概念集合;(2)O是期望得到的输出概念集合;(3)0<θ1是用户设定的相似度阈值,用来表示用户可接受的服务与当前服务请求的最低相似度.根据上面定义,基于相似性的服务查询即根据用户提出的服务请求R,通过服务匹配算法在服务库中找到与用户需求的相似度满足阈值θ的服务集合.目前大部分匹配算法均采用二分图表示需求和服务中的概念集合,二分图中边的权值反映了概念之间的语义关系,将需求与服务接口的相似度计算转化为求二分图的最大权匹配.下图1(a)就是一个二分图的具体例子,左子图代表服务请求Request={Author,Book},而右子图则为服务Service={Publication,Writer,Title},其中图中的边代表了概念之间的相似度.虽然不同的服务发现方法对于概念间语义关系的表示和获取各有不同,但整体思路都是一致的,概念间语义距离越远,则两个概念相似度越低.用户请求和服务建立概念间的语义关系后,就Page4可以计算当前二分图的最大权匹配M.图1(b)中加黑的边表示了例子中二分图的最大权匹配M={(Author:Writer),(Book:Title)}.下面给出最大权匹配基本公式:max_value=max∑Ci∈R,Cj∈S在得到二分图的最大权匹配M后,就可以根据匹配中边的数量|M|得到整体的相似度,但在服务发现中服务与需求的相似性和用户请求的概念数|R|相关.上面例子中整体相似度为(0.95+0.83)/2=0.89,形式化公式如下:simRS=max_value3.2问题描述根据式(1)和(2),不难发现多数情况下最大权匹配仅与二分图中权值较大的边相关,这些边连接了服务描述中与需求强相关的概念.如图1(b)所示当阈值θ=0.7时,原二分图中两条权值较低的边被裁剪,并不影响最大权匹配以及相似度计算的结果.这里引入无关概念的形式化定义.定义3.无关概念.设一个概念C与用户的服务请求R满足,C∈Rsim(C,C)<θ,则称该概念C为R的无关概念.在之前的例子中并不存在无关概念,服务中每个概念都有满足阈值的语义关系.对于包含无关概念的服务来说,这类概念对服务的整体相似度没有贡献.当服务中所有概念都属于无关概念时,则该服务必定不满足用户的阈值要求,称其为当前需求的无关服务.现有服务发现方法并不能预先对无关概念和服务加以区分,因此大部分计算开销用于无关服务的比较,随着服务数量的不断增加这个比例将继续提高.也有部分研究者考虑通过缓存概念之间的相似度来避免概念相似性的重复计算.但无论是搜索引擎还是通用本体并非一成不变,最典型的例子就是yago2知识库[14],它是基于WordNet和维基百科构建的层次化本体.它能随维基百科的变化自动添加概念和实体.因此当外部信息发生变化时,相似度的缓存策略将带来不必要的计算和空间开销.另一方面,现有方法在计算概念相似度时并未考虑语义的方向性.如Vehicle和Car这类的概念在传统语义服务匹配方法[15]中语义关联可表示为:Vehicle为Car的父概念,因此Vehicle相对Car的匹配度为Plug-in;而Car对于Vehicle的匹配度仅为Subsume,低于前者.目前概念间的相似度计算不能反应这种差异,因为基于搜索引擎方法[7-8],通过搜索结果度量语义距离,无法获取概念间的包含关系;而基于通用本体方法[6]也忽视了层次结构所包含的语义信息.4基于概念松弛的服务查询针对现有方法的不足,本文提出了基于概念松弛的服务查询方法.图2为该方法的整体框架,主要包含基于层次本体的概念松弛和服务相似度计算两个部分.图2中层次本体是概念松弛的基础,管理概念之间的层次关系,概念松弛方法利用层次本体中概念之间的语义关系计算概念相似度.该方法是根据用户的需求动态计算概念相似度,适用于各种层次本体,不仅是WordNet,GeneOntology等传统本体,也包括Yago2这类可以不断演化的新型知识库.虽然搜索引擎的结果也可作为概念语义的度量,但返回结果会随搜索算法的调整发生改变,而且基于返回结果的度量无法反映概念间的包含关系.因此本文并不考虑这种方式.对应服务库存储了服务的WSDL文件,解析其中各部分的信息用于服务的组合与调用.还管理了Page5图2服务查询整体框架概念和服务接口的映射关系,这种映射关系是通过对服务接口参数的自动分词以及概念识别得到的.这里的服务不仅有从互联网中爬取到的具体服务,也包括自动生成的组合服务,根据接口参数统一管理和查询.这种映射关系可通过MapReduce方式支持海量服务的语义管理并及时响应服务库的频繁变化.服务查询处理模块由两部分构成:概念松弛模块主要针对用户请求所包含的概念进行语义计算,用户请求可以是简单概念集合或指明输入/输出接口所包含的概念.根据层次本体中概念之间的语义关联,得到近似概念集合,过滤当前服务请求的无关概念.而服务相似度计算根据第一步得到的相关概念集以及概念相似度,计算相关服务与用户请求的相似度,最终返回相关服务集合,并支持结果的动态扩展.4.1概念松弛服务查询时,为了确定任一服务描述与当前服务请求是否相关,首先要计算两子图中概念之间的语义距离.为了避免大量无关概念的相似度计算,本文提出了概念松弛方法在计算概念相似度时根据层次本体的结构信息,通过遍历算法确定满足阈值的相关概念集合.设用户的服务请求为R,针对R中的每个概念C进行松弛操作.在介绍概念松弛方法之前需要先解释两个概念:概念的泛化和特化,其定义如下.定义4.概念泛化.对于当前概念C,概念泛化是查找层次本体O中C的直接父概念CA=Ancestor(C,O).这一操作可以看作是在层次本体中的上行遍历.例如Vehicle可以看作是Car的泛化.当父概念不是唯一时,Ancestor(C,O)的结果是概念集合.定义5.概念特化.概念特化是遍历C的所有直接子概念CD=Descendent(C,O).可表示为层次本体O中的下行遍历操作.而Vehicle的特化可能包括Car、Boat、Rocket等概念.为了区别概念泛化和特化的不同影响,本文根据文献[16]提出的APS模型度量概念在层次本体中遍历时发生的语义变化.设概念C的子孙概念总数为n,则C的APS(C)=1概念B时,其语义变化为它们APS的比值α(C,B)=APS(B)APS(C);相应的,概念C特化得到子概念D时,其语义变化为它们APS之差β(C,D)=APS(D)-APS(C).图3是一个本体片段的示例,图3(b)中给出了本体中各概念的APS值.在图3(a)本体中,对C2进行概念泛化时,上行遍历到C0的语义变化可以表示为:α(C2,C0)=4/7;而C2下行遍历到C5时,特化的语义变化为β(C2,C5)=1/4.虽然概念之间的语义变化满足传递性,但对于不同的方向语义变化的传递性也是不同的:α(C5,C2)×α(C2,C0)=APS(C2)Page6β(C0,C2)+β(C2,C5)=APS(C2)-APS(C0)+因此可以通过迭代方式不断扩展当前概念的近邻概念得到所有满足阈值的近似概念集合S(C,θ).值得注意的是,由于语义变化的方向性,因此α(C2,C0)-β(C0,C2)≠0.概念之间的语义距离通过语义变化的规范化得到,这里给出概念泛化和特化的语义距离式(5),其中用于规范化的maxD是通过计算任意叶子概念到根的上行距离得到.而概念特化的语义距离较小,因此下行扩展时,会得到较多的近似概念.这与语义匹配中匹配度plugin大于subsume是一致的.具体推导过程可参见文献[16],本文由于篇幅原因不详细介绍.D(C,C)=-log(α(C,C))烄烅log(1+2β(C,C))烆下面给出概念松弛方法的伪代码.算法1.基于层次本体的概念松弛算法.输入:需求概念集合RC,对应层次本体O,相似性阈值θ输出:相关概念集合RS1.RS=;//初始化2.foreachCinRCtodo//对于需求中的每个概念3.addCtoAncQueueandDesQueue;4.foreachCintheAncQueuetodo//上行遍历5.if((α=D(C,C)<=1-θ)&&(CnotinS(C,θ))6.thenadd(C,α)intoS(C,θ);7.addAncestor(C,O)toAncQueue;8.foreachCintheDesQueuetodo//下行遍历9.if((β=D(C,C)<=1-θ)&&(CnotinS(C,θ))10.thenadd(C,β)intoS(C,θ);11.addDescendent(C,O)toDesQueue;12.returnRS=RS∪S(C,θ);分析可知遍历按方向的不同分为两部分:第4~7行对于上行遍历队列中的概念进行判定,若满足阈值要求则加入近似概念集合,并继续判断其父概念;第8~11行是相应的下行遍历操作.对于每个概念而言,最坏情况下是对本体中每个概念遍历一次.设需求R中存在n个概念,本体O中有m个概念,则计算复杂度为O(n×m),其中n和m均为常量.最终得到任意概念C的近似概念集合S(C,θ),S(C,θ)中每一个概念与C的语义距离都满足阈值θ,对应需求R中所有概念的近似集合RS=∪C∈RS(C,θ).根据服务库中概念与服务的映射可以得到所有与近似集合RS相关的服务,就是用户需求潜在可满足的服务集合.那么根据前面的定义就可以判定当前需求的无关服务.定理1.不包含相似集合RS中任意概念的服务,即为当前用户需求的无关服务.证明.根据定义3可知,若概念C与需求R中任一概念相似度满足阈值,则必然属于当前需求的近似概念集合RS.若服务S中不包含近似集合中的任何概念,即证明服务S中概念均为无关概念,因此可判定服务S为需求R的无关服务.4.2相似性计算概念松弛不仅裁剪了与用户需求无关的服务,而且得到了服务与需求中概念的相似度,这是进行二分图匹配的基础.但在进行二分图匹配之前,还需要对相关服务集合进行过滤以提高匹配计算的效率.首先,考虑相关服务中所包含的3类不同概念:匹配概念、非匹配概念和无关概念.无关概念已在第3节中定义,匹配概念和非匹配概念定义如下.定义6.匹配概念.对于服务S中的概念C满足C∈R,EC,()C∈M,M为二分图的最大权匹配,则称C为匹配概念.定义7.未匹配概念.对于服务S中的概念C满足C∈R,DC,()C1-θ,但C∈R,E(C,C)M,则称C为未匹配概念.由以上定义可知,对于特定用户需求,服务中的匹配概念和未匹配概念反映了与需求的语义关联,而无关概念是没有意义的,应对服务整体相似性不造成影响.在传统服务匹配中,笼统地将这三类概念全部与需求进行匹配计算,导致假阳性问题.在计算相似度之前,借鉴文献[11]的思想估计服务相似度上限过滤不满足阈值的相关服务,上限估计是利用服务中所有相关概念的最大相似度实现,具体公式如下:UBsim=∑Ci∈S这里的wi代表了对应服务中概念Ci的相似度,由于概念Ci可能与需求中多个概念的相似度都满Page7足阈值,因此取其最大值.由于不再考虑无关服务的影响,对式(1)和(2)作出调整,即二分图匹配算法中仅考虑满足阈值的概念相似度作为匹配的基础.根据上限估计和式(1)、(2)可以得到以下定理.定理2.对于上限估计UBsim不满足阈值的服务S,其整体相似性simRS也不满足阈值.证明.比较式(6)和(1)不难发现,∑Ci∈Smax_value,由于二分图最大权匹配时并不是所有服务中的概念都能取得最大相似度,同时min{|R|,|S|}|R|,因此UBsim=max_valueR=simRS,当UBsim小于阈值θ,simRS必然无法满足阈值.分析可知,二分图匹配得到的最大相似度仅考虑了匹配概念的贡献,但未匹配概念的作用被忽略了.而服务的语义相似性需要通过服务中所有与需求相关概念反映,所以在相似性计算中也要加入未匹配概念的贡献.设未匹配概念集合为UM,相似度计算公式如下:simRSP=该公式根据二分图中每个概念的贡献综合得到需求与服务的相似度,下面给出具体排序算法的伪代码,如算法2所示.算法2.基于概念松弛的服务相似性算法输入:用户需求R,对应相关服务集合RS,相似性阈值θ输出:排序服务集合SL(S,simRS)1.foreachSinRStodo2.SL=;UM_max=0;3.ifUBsim(S,R)>=θ//上限估计过滤4.thenremoveUnrelatedConceptsinS5.Max_value=KM(S,R);6.foreachUnmatchedConceptCinStodo7.UM_max=UM_max+max(C);8.simRS=Sim(Max_value,UM_max);9.Insert(S,simRS)intoSL;10.returnSL;已知计算二分图最大权匹配的算法时间复杂度为O(V×E×n),其中n为相关服务个数,V代表了图中相关概念的数目,而E为概念之间边的数目.在实际服务中概念数V和概念之间的边数E均为常数,因此排序算法的整体复杂度与相关服务数呈线性关系.另外根据上限估计过滤,相关服务n、相关概念V以及概念之间的边E均大大减小.5实验与结果分析5.1实验环境及数据本文选择与传统服务查询比较验证方法的性能和可扩展性.实验数据采用文献[15]中给出的标准测试集OWL-STC,其中包含了1083个服务,划分为9个不同领域.还在按需服务平台DigService①中实现了本文提出的相似性服务查询,针对服务库中包含的1万个真实WSDL服务进行性能测试.主要比较对象及数据情况如表1所示,其中由于OWLSMX仅能处理OWL-S服务,因此无法在真实服务集上进行测试.标准测试集采用查全率recall和查准率precision作为服务查询性能的评价标准,还引入了F-measure=2×precision×recall能的度量.实验在IntelCorei57602.8GHz处理器和4GB内存的主机上运行,操作系统为Windows7.测试代码为Java编写,Eclipse3.6编译通过.标准测试集1083个服务,真实服务集10000个服务,划分6组5.2实验结果与分析和传统方法比较之前,需要确定概念松弛的策略以及相应的用户阈值.概念松弛策略包括两方面:首先要确定语义变化度量,根据之前的介绍语义变化有α方法、β方法以及混合方法3种;另外还要分析概念松弛是否考虑当前概念的兄弟概念,即上行遍历得到的近似概念是否需要遍历其子孙概念,对应两种不同的遍历策略(回溯遍历和不回溯遍历).而对于阈值的选择将影响返回结果的规模.因此首先根据标准测试集,给出3种不同语义变化度量对应的服务查询结果,如图4所示.由比较结果可以发①www.mydigservice.comPage8现,α方法返回结果虽然查准率较高,但查全率不足;β方法的情况正好相反.而混合方法是整体上最好的,这是因为上下行不同的语义度量符合层次本体中概念的语义变化.图5是根据不同的遍历策略得到的查询结果对比.可以发现回溯遍历不论是查全率还是查准率都要优于不回溯遍历,这一点和文献[14]中匹配时考虑本体中的兄弟概念是一致的.而图6反映了不同用户阈值θ(0.6~0.9)下服务查询的性能比较,可以发现根据测试集提供的基准,随着阈值的上升,查准率提高,但查全率降低.而用户阈值为0.7时取得最好的综合性能.图7中给出了本文提出方法simRSP(式7)、M_max以及URBE三种不同服务相似性计算方法得到的查询结果对比.通过结果可见simRSP方法优于其它方法.证明上限估计可以有效的过滤假阳性结果得到更好的查准率,而未匹配概念能反映服务的整体语义.3种方法整体性能并不高是因为只考虑了服务描述中输入输出参数所包含的概念相似性,也没有利用特定领域本体中概念的语义相关性.为了测试方法的可扩展性,在按需服务平台DigService中实现了基于概念松弛的相似性查询.可扩展性是指该方法在不同规模的服务库中的可用性,主要考察服务查询方法的计算时间.服务库中包含了从互联网上获取的WSDL服务近2万个,用户可以通过高级查询设定相似性阈值,启动相似性服务查询.为衡量本文方法的可扩展性从服务库中提取了6组不同规模(1000~10000)的服务集合进行查询,比较本文方法与传统方法的响应时间.通过图8对比可发现,若设查询的最大响应时间为100s,那么URBE方法仅能支持1000个服务以内的查询.而缓存概念相似性后,虽然一定程度上提高了查询的效Page9率,但也不能适用于4000个服务的应用场景.而概念松弛方法的执行时间基本保持在毫秒级别,即使是回溯遍历的方法,处理1万个服务的查询时间也不到10s.在可扩展性方面,本文提出的方法具有明显优势.最后比较3种方法2分图匹配的计算效率,如图9所示,证明概念松弛和上限过滤有效地缩小了需匹配的服务数量.本文方法在匹配阶段的计算开销较传统匹配方法节省了90%.根据测试数据和真实服务上的实验结果可证明,本文所提出的基于概念松弛的服务相似性查询,不仅通过考虑层次本体中概念之间的语义关系,提高了服务查询的查准率和查全率;还能极大提高相似性服务查询的可扩展性,以适应云计算环境下服务数量急剧增加的应用场景.实时计算得到用户需求的概念相似度和相关服务能满足互联网环境下动态性的要求.6结论综上所述,Web服务是云计算从理念到实现的关键支撑技术之一,而如何提高基于相似性的Web服务查询的准确性以及效率是本文研究的重点.本文首次提出面向层次本体的概念松弛方法,不仅充分利用概念之间的语义关系,并能裁剪大量与需求无关的服务.相似性计算考虑服务中不同概念的相似度贡献得到查询结果.经实验证明该方法在概念松弛时考虑不同方向的松弛策略是符合实际情况的,且提出的相似性查询方法无论是查全率还是准确率均优于传统方法,算法效率可以支持动态环境下的大规模服务应用.下一步将考虑通过MapRe-duce方法进一步提高概念松弛的性能,这对云计算中海量基于服务的应用具有现实意义.
