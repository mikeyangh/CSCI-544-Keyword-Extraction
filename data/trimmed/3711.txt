Page1基于描述逻辑的扩展预测模型标记语言EPMML朱小栋1),2)肖芳雄3)黄志球2)沈国华2)靳玲2)1)(上海理工大学管理学院信息管理系上海200093)2)(南京航空航天大学信息科学与技术学院南京210016)3)(广西财经学院信息与统计学院南宁530003)摘要预测模型标记语言PMML正被许多数据挖掘组织作为标准化的数据挖掘模型描述语言.然而,由于数据挖掘技术的不断发展,参与建立PMML的数据挖掘厂商的经验有差异,PMML本身含有的大量语言元素不可避免地带来基于PMML的数据挖掘元数据的语义不一致问题.为解决这个问题,提出了一种基于描述逻辑的扩展预测模型标记语言EPMML,详细分析了EPMML的描述逻辑基础SOIN,设计EPMML的语言元素.基于EPMML描述的数据挖掘元数据可以转化为基于SOIN的知识库,进而进行知识推理以自动发现数据挖掘元数据的内在语义不一致问题.Racer推理实例验证了EPMML语言的良构性,良好表达能力和推理有效性.关键词预测模型标记语言;数据挖掘;元数据;描述逻辑;知识推理1引言数据挖掘的标准化是目前数据挖掘技术发展亟待解决的重要问题.提供标准化的数据挖掘元数据和API在数据挖掘产品的集成、交换和共享上有着核心的作用.预测模型标记语言PMML(PredicativeModelMarkupLanguage)是由DMG组织开发的用于描述数据挖掘模型的基于XML的标记语言.目前,DMG组织的许多厂商正致力于用PMML作为统一的标准化的数据挖掘模型描述语言.PMML标准化了常见的数据挖掘算法的模型内容,例如,描述关联规则模型的PMML指定了一些标记来描述事务、项与项集以及关联规则的支持度与置信度等.PMML使得模型的部署、发布、维护、软件包间的模型信息共享交换变得容易.例如,用一个工具开发的模型可以通过PMML转换到另一个工具中用于评测.在不同的产品和环境中交换预测模型需要对PMML规范有共同理解.然而,连同增加的产品特殊扩展,PMML包括了大量的语言元素,所以这样的理解并不尽如人意.结果是,即使有一个详细的PMML规范,通过PMML定义的模型也可以变化不一致.缺乏一致性降低了PMML的有用性,妨碍了其在数据挖掘团体中的使用.因此,目前迫切地需要一致性的标准来提高PMML模型协同工作的能力,提高PMML作为多产品间的模型交换中介的可靠性.Pechter给出了一种结合XSD验证和XSLT验证来确保PMML的正确性的方法[1].该方法可以解决PMML描述的数据挖掘模型语法层面的错误.然而,PMML本身缺乏形式化的语义使得基于PMML的数据挖掘模型难以进行自动推理,并难以发现模型内在的语义冲突问题.而这种冲突伴随着PMML描述的数据挖掘模型不断更新和PMML自身版本的不断演化显得更加的突出.这里,为便于读者理解PMML语言的局限性,首先给出基于PMML的数据挖掘元数据的语义一致性问题和冲突问题的两个实例.例1.在PMML语言中,用语言元素Associ-ationRule来声明一个关联规则,而不允许Associa-tionRules作为声明关联规则的语言元素.然而,我们期望的是AssociationRule和AssociationRules都可以声明关联规则,表示关联规则类的语义,这更加符合我们的使用习惯.例2.基于PMML的数据挖掘元数据的一致性可以区分为语法一致性和语义一致性.经过XSD和XSLT验证通过的元数据并不能保证其没有语义冲突问题,如PMML中存在冗余、引用冲突等等.图1给出了描述关联规则的PMML元数据片段,它能通过语法一致性检测,但它不满足关联规则所规定的语义.如图中描述了一条规则“Beer→Beer”,它违背了在关联规则定义中所要求的前件和后件交集为空的语义要求.〈?xmlversion="1.0"?〉〈PMMLversion="3.1"〉〈Headercopyright="www.dmg.org"description="examplemodelforassociationrules"/〉…〈AssociationModelfunctionName="associationRules"numberOfTransactions="4"numberOfItems="3"minimumSupport="0.6"minimumConfidence="0.5"numberOfItemsets="3"numberOfRules="2"〉…〈!--Tworulessatisfytherequirements--〉〈AssociationRulesupport="1.0"confidence="1.0"antecedent="Beer"consequent="Diaper"/〉〈AssociationRulesupport="1.0"confidence="1.0"antecedent="Beer"consequent="Beer"/〉〈/AssociationModel〉〈/PMML〉描述逻辑是一阶谓词逻辑的可判定子集,它以结构化和易理解的方式来表示领域知识,目前已成为本体语言如OWL[2]的逻辑基础.以描述逻辑作为基础,本文提出一种扩展的预测模型标记语言EPMML(ExtendedPredictiveModelMarkupLan-guage).该思路源于用EPMML描述的数据挖掘模型可以被转化为基于描述逻辑的知识库,进而基于描述逻辑的知识推理可以自动发现数据挖掘元数据的冲突问题.理论和实验表明,EPMML能够作为数据挖掘模型的描述工具,并且EPMML具有良好的形式化语义和支持自动推理的能力.本文第2节介绍相关工作;第3节设计一种描述逻辑家族的形式逻辑SOIN,给出它的语法和语义;第4节以SOIN作为基础,给出支持自动推理的预测模型标记语言EPMML的详细设计,分析EPMML的语言要素;第5节分析SOIN的推理复杂性,提出基于EPMML的数据挖掘元数据一致性检测框架,并给出EPMML支持自动推理发现冲突的示例;最后是本文的总结.Page32相关工作随着数据挖掘技术的发展,数据挖掘的标准化成为日益关切的问题,数据挖掘元数据在数据挖掘的标准化过程中发挥着越来越重要的作用.许多面向数据挖掘元数据的工业标准被提出,除了预测模型标记语言PMML,还包括跨行业数据挖掘标准流程CRISP-DM和公共仓库元模型CWM①.CRISP-DM提供了一个描述整个数据挖掘生命周期的过程标准,目前已成为开发数据挖掘项目的过程的标准方法,但它没有为数据挖掘的元数据制定精确的规范.CWM是由OMG组织的CWM工作组负责开发、并由OMG采纳的一种使用共享元数据的集成数据仓库和业务分析工具的开放式行业标准.CWM主要关注商务智能领域,如OLAP、数据挖掘中元数据的定义.提供CWM的目的是为了解决元数据的管理和数据仓库的集成问题,这样不同的应用程序能够在不同的环境中集成.CWM规范中详细地定义了数据挖掘元模型.然而,参与建立元数据的数据挖掘厂商的不同经验和描述数据的不同角度以及数据挖掘技术的不断更新,不可避免地带来基于CWM元数据的冲突问题.Zhu等人[3]提出了一种基于描述逻辑的策略进行基于CWM的数据挖掘元模型和元数据的冲突检测机制,解决了基于CWM的自然语言和图形化特点缺乏精确的语义的问题,取得了较好的效果.用现有的数据挖掘元模型来构建面向数据挖掘过程的应用模型的工作包括:Zubcoff等人[4]利用CWM提供的丰富语义信息构建用于数据挖掘分类分析的挖掘元模型,Castellano等人[5]利用CWM元模型构建数据挖掘过程的体系结构,Chaves等人[6]设计了一种基于PMML的评测引擎Augustus,可以用于进行数据准备和模型分割.Berners-Lee等人[7]在2000年提出了语义Web的概念,其目的是让Web上的信息能够被机器理解,从而实现Web信息的自动处理.语义Web的支撑技术建立在一系列技术标准和规范之上,其中RDF和OWL是最基本的技术标准.RDF是一种元数据的数据模型,在该模型下,对资源的描述采用主体、谓词和客体的三元组形式{sub,pred,obj}陈述②.RDF在XML基础上提供了一定的语义描述能力,但它作为本体语言,其语义描述能力还很有限.DAML+OIL、OWL是由RDF(S)扩展的网络本体语言,目前OWL已成为W3C推荐的网络本体语言.OWL具有明确的逻辑基础即描述逻辑,它是用XML语法、RDF模型定义的描述逻辑语言.借鉴RDF(S)和其它语义Web本体语言OWL、OIL、DAML+OIL等的设计思路,我们提出基于描述逻辑设计数据挖掘建模语言EPMML的理念.这个思路如下:以预测模型标记语言PMML为基础,在PMML上层扩充RDF和RDFS以提供数据挖掘领域的资源描述框架,再在RDF(S)的上层将PMML扩充为真正具有语义描述能力的数据挖掘领域的语义本体语言.这种数据挖掘领域的语义本体语言需要明确以一种描述逻辑作为其逻辑基础.在下面第3节中,我们首先给出一种合适的描述逻辑SOIN作为数据挖掘领域语义本体语言的逻辑基础.据我们所知,目前国内外还没有针对基于PMML的数据挖掘元数据应用描述逻辑进行语义扩展和冲突检测的研究.3描述逻辑SOIN描述逻辑具有正式的基于逻辑的语义和很强的表达能力.Baader等人[8]指出描述逻辑为语义网提供了必要的逻辑基础.基本的描述逻辑ALC的元素是由概念(一元谓词)、关系(二元谓词)、个体(常元)以及在它们上的交、并、补、存在约束、全称约束等算子构成.增加ALC的构造算子,或者采用不同的构造子组合得到的描述逻辑拥有不同的表达能力和推理复杂性.然而,知识表示语言的表达能力越强,相应推理问题的复杂性越高.例如,OWLDL的语义表达能力很强,然而,其语义逻辑基础SHOIN(D)的推理是NEXPTIME-complete问题,这使得其不适合作为数据挖掘元数据的语义描述语言[9-10].针对PMML本身的特点,本节设计一种描述逻辑家族的形式逻辑SOIN作为EPMML语言的逻辑推理基础.这里,S表示在ALC基础上增加关系的传递性,即S表示ALC的演化ALCR+.O表示允许枚举,I表示允许关系逆,N表示允许数量约束.定义1.SOIN语法.用A和P分别表示原子概念和原子关系,符号····=表示定义.SOIN上的概①②Page4念C和关系R递归定义如下:C····=⊥1|⊥1|A|C|C1C2|C1C2|RC|R····=⊥2|⊥2|P|R|R1R2|R1R2|R-.定义2.SOIN语义.SOIN的解释是一个二元对I=(ΔI,·I),ΔI是论域的非空集合,·I是解释函数.令card表示一个集合的基数,具体的语义如下所示:b∈CI)};b∈CI)};RI}n};RI}n};(1)(⊥1)I=ΔI;(2)(⊥1)I=;(3)(C)I=ΔI\CI;(4)(C1C2)I=CI1∩CI2;(5)(C1C2)I=CI1∪CI2;(6)(RC)I={a∈ΔI|b((a,b)∈RI∧(7)(RC)I={a∈ΔI|b((a,b)∈RI→(8)(nR)I={a∈ΔI|card{b∈ΔI|(a,b)∈(9)(nR)I={a∈ΔI|card{b∈ΔI|(a,b)∈(10){a1,…,an}I={aI1,…,aIn};(11)(⊥2)I=ΔI×ΔI;(12)(⊥2)I=×;(13)(R)I=(ΔI×ΔI)\RI;(14)(R1R2)I=RI1∩RI2;(15)(R1R2)I=RI1∪RI2;(16)(R-)I={(b,a)∈ΔI×ΔI|(a,b)∈R}.定义3.SOIN的知识库K是一个三元组:Tbox是描述领域结构的公理的集合,含有引入概念名称的公理和声明包含关系的公理,分别记为A≡C和AC.Rbox是描述关系间等价和包含的语法结构的公理集合,分别用R≡S和RS的形式来描述关系定义和关系包含的集合.Abox是描述具体情形的公理的集合,包含概念断言和关系断言.概念断言是表示一个对象是否属于某个概念,用aC的形式描述,关系断言是表示两个对象是否满足一定的关系,用〈a,b〉R的形式表示.由定义3可得如下定理1.定理1.令iff表示当且仅当,以下3个命题(1)一个解释I满足:aCiffaI∈CI,〈a,b〉成立.Riff〈aI,bI〉∈RI.(2)一个解释I满足Aboxiff它满足中的每个公理,记为I.(3)一个解释I满足SOIN知识库K={Tbox,Rbox,Abox},iff它同时满足,和,记为IK.4扩展预测模型标记语言EPMMLEPMML的设计理念如图2所示.该体系结构是一个层次化的结构.Unicode和URI是国际统一化字符集和资源标识手段.EPMML、命名空间和EPMMLschema定义了EPMML的语法层面的互操作的标准.RDF(S)描述和定义EPMML的资源.SOIN是EPMML逻辑基础,并提供严格的可判定性的形式化机制,支持自动推理.EPMML可以为数据挖掘应用提供标准化的具有语义的描述,该描述可称为基于EPMML的数据挖掘元数据.EPMML的元素是描述数据挖掘模型的元类、属性、元类的实例以及这些实例之间的关系.下面各小节按照这些描述对象详细地分析EPMML的语言元素.EPMML元类由元类名称和一个限制列表构4.1EPMML元类成.例如:〈epmml:Classrdf:ID="AssociationRules"/〉〈epmml:Classrdf:ID="Itemset"/〉〈epmml:Classrdf:ID="Item"〉〈rdfs:subClassOfrdf:resource="#Itemset"/〉〈/epmml:Class〉EPMML元类的逻辑基础是SOIN中的概念,包括原子概念和简单复合概念.在4.2节中介绍的EPMML复杂元类的逻辑基础是SOIN中的复杂复合概念.4.2EPMML复杂元类在EPMML中,复合概念通过设计元类的交、Page5并、补等来构造,它们的SOIN基础是概念的交、并、补.用epmml:intersectionOf、epmml:unionOf和epmml:complementOf来声明.例如:〈epmml:Classrdf:ID="Abnormal"〉〈epmml:complementOfrdf:resource="#Normal"/〉〈/epmml:Class〉在数据挖掘模型中,有一些概念可以通过枚举实例来描述.这种描述枚举概念的枚举元类是一种特殊的构造子,用epmml:oneOf来声明.例如:〈epmml:Classrdf:ID="Wether"〉〈epmml:oneOfrdf:parseType="Collection"〉〈epmml:Thingrdf:about="#Fine"/〉〈epmml:Thingrdf:about="#Cloudy"/〉…〈/epmml:oneOf〉〈/epmml:Class〉4.3EPMML属性一个EPMML属性是一个二元关系,在EPMML中,属性区分为对象属性和数据属性.对象属性描述了元类的实例之间的关系,用〈epmml:ObjectProperty〉宣称对象属性,用〈rdfs:domain〉和〈rdfs:range〉指出该对象属性的定义域和作用域.例如:〈epmml:ObjectPropertyrdf:ID="HasAntecedent"〉〈rdfs:domainrdf:resource="#AssociationRules"/〉〈rdfs:rangerdf:resource="#Antecedent"/〉〈/epmml:ObjectProperty〉区别于对象类型属性,数据类型属性的值域是数据类型.在EPMML中,使用PMML3.2.0版本的xsd文件中定义的数据类型,如xs:string,xs:integer.用〈epmml:DataTypeProperty〉宣称数据属性,用〈rdfs:domain〉和〈rdfs:range〉指出该数据属性的定义域和值域.例如:〈epmml:DatatypePropertyrdf:ID="HasSupport"〉〈rdfs:domainrdf:resource="#AssociationRules"/〉〈rdfs:rangerdf:resource="http://www.dmg.org/v3-2/pmml-3-2.xsd#PROB-NUMBER"/〉〈/epmml:DatatypeProperty〉这里PROB-NUMBER是pmml-3-2.xsd中定义的0~1之间的小数类型.EPMML属性的逻辑基础是SOIN中的关系.为了提高EPMML的语义表达能力,SOIN包含了关系传递和关系逆的构造算子,这两个算子是EPMML的属性约束的逻辑基础,参见4.5节.4.4EPMML个体EPMML除了描述数据挖掘模型的元类和属性之外,需要描述数据挖掘模型中具体的个体以及个体之间的关系.用〈epmml:Thing〉来宣称一个个体,用rdf:type来指明该个体所属的元类.例如,在描述一个关联规则模型中,指定Cracker是一个项item元类的实例:与PMML不同,EPMML中的个体不是语言元素,这大量地约简了PMML的语言元素复杂性.为了减少推理的复杂性,在EPMML中,不允许出现一个资源是元类并且是个体.4.5EPMML属性约束属性是特殊的二元关系,根据二元关系的理论,属性可以具有自反性、对称性、传递性以及函数性等特性,并且属性可以有逆属性.然而在描述逻辑中,增加属性的特性,必然会增加逻辑推理的复杂性,甚至导致推理不可判定.根据描述数据挖掘模型的PMML特点,在EPMML中,不增加属性的自反性和函数性,但允许属性具有传递性,并允许与其它属性互逆.例如传递属性Is_Part_Of.在EPMML中,用epmml:TransitiveProperty来声明属性具有传递性.例如:〈epmml:ObjectPropertyrdf:ID="Is_Part_Of"〉〈rdf:typerdf:resource="&epmml:TransitiveProperty"/〉〈/epmml:ObjectProperty〉用epmml:InverseOf声明属性的逆属性.例如:〈epmml:ObjectPropertyrdf:ID="BeAntecedentOf"〉〈epmml:InverseOfrdf:resource="HasAntecedent"/〉〈/epmml:ObjectProperty〉在PMML中,对数据挖掘模型的描述中,一些属性不仅指明了定义域和作用域,而且有明确的数量限制.例如,为了描述关联规则的支持度和置信度都是0~1之间的小数,在关联规则的PMML模型中,需要添加若干语言元素,而在EPMML中,不需要添加语言元素,并且可以对其赋予语义,告诉机器支持度和置信度的数量是0~1之间的小数.在EPMML中,用epmml:someValuesFrom,epmml:allValuesFrom来声明属性值域约束,用epmml:minCardinality,epmml:maxCardinality来声明属性的基数约束.它们的SOIN逻辑基础分别是RC,RC,(nR)和(nR)概念描述.例如:〈epmml:Restriction〉〈epmml:onPropertyrdf:resource="#hasWether"/〉〈epmml:allValueFromrdf:resource="#Wether"/〉〈/epmml:Restrition〉Page6〈epmml:Restriction〉〈epmml:onPropertyrdf:resource="#hasSupport"/〉〈epmml:minCardinalityrdf:datatype="http://www.dmg.org/v3-2/pmml-3-2.xsd#PROB-NUMBER"〉0.0〈/epmml:minCardinality〉〈epmml:maxCardinalityrdf:datatype="http://www.dmg.org/v3-2/pmml-3-2.xsd#PROB-NUMBER"〉1.0〈/epmml:maxCardinality〉〈/epmml:Restriction〉4.6EPMML辅助语言元素在EPMML中,兼容了XML的注释等语言元素.为了增加语义可理解性,减少推理的复杂性,版权、版本、命名空间等EPMML的辅助语言元素用EPMML数据属性来描述.例如:〈epmml:DatatypePropertyrdf:ID="HasCopyRight"〉〈rdfs:domainrdf:resource="#EPMML"/〉〈rdfs:rangerdf:resource="http://www.nuaa.edu.cn"/〉〈/epmml:DatatypeProperty〉〈epmml:DatatypePropertyrdf:ID="HasVersion"〉〈rdfs:domainrdf:resource="#EPMML"/〉〈rdfs:rangerdf:resource="1.0.0"/〉〈/epmml:DatatypeProperty〉在设计EPMML中,显然一个资源只允许以一种语言元素的形式出现.例如,设定一个资源是个体,则不允许其是元类;反之也是如此.同时,同一个命名空间下的资源不允许重名,但是不在一个命名空间下的资源可以允许重名,但必须加以引用.基于SOIN的EPMML具有严格的形式化语义,这为EPMML支持自动推理提供了完备的形式逻辑基础.5基于SOIN的自动推理演示示例在这一节里,我们首先分析描述逻辑SOIN的推理复杂性,然后设计了基于EPMML的数据挖掘元数据一致性检测框架,并通过示例验证EPMML支持自动推理的正确性和有效性.5.1SOIN的推理复杂性可满足性问题.定理2.SOIN上的推理可以规约到SOIN的证明.SOIN的推理问题包括5类.(1)知识库的可满足性:给定一个SOIN知识库K,如果存在一个解释I,使得IK.(2)概念的可满足性:关于TBoxT,如果概念C非空,即存在一个解释I,其中IT,满足CI≠.(3)概念的包含关系:关于TBoxT,如果概念C1包含概念C2,即对任意解释I,其中IT,满足CI2CI1,记作TC2C1.(4)实例检测:关于SOIN的知识库K,如果个体名a属于概念C,即对任意解释I,其中IK,满足aICI,记作KC(a).(5)查询检索:关于SOIN知识库K,找到概念C的所有个体名a,使得KC(a).对于两个概念C和D,有C不可满足≡C包含于⊥;C和D相等≡C包含于D,且D包含于C;C和D相离≡CD包含于⊥.根据实例检测的含义,实例检测可以规约到aICI是不可满足的.查询检索可以通过实例检测实现.所以SOIN上的推理问题都可以规约到包含关系的判断,如果存在判断包含关系的算法,必然存在解决其它推理问题的算法,且判断包含关系的复杂度是其它推理问题复杂度的上界.的可满足性问题.进一步地,两个概念C和D,有C包含于D≡D是不可满足的;C和D相等≡CCCD都不可满足;C和D相离≡CD不可满足,所以SOIN上的推理问题都可以规约到可满足性的问题,如果存在判断可满足性的算法,必然存在解决其它推理问题的算法.根据二元关系理论,关系是概念的笛卡尔积的子集.因此,自然地可将上面概念的可满足性问题演化到Rbox上的关系可满足性问题.综上所述,SOIN上的推理可以规约到SOIN定理3.SOIN的推理问题可以规约到Abox上的一致性检验问题.证明.概念C是可满足的当且仅当{C(a)}是一致性的,这表明知识库的可满足性、概念的可满足性以及概念的包含关系可以规约到Abox的一致性检验.AC(a)≡A例检测可以规约到Abox一致性检验,查询检索可以通过实例检测实现,所以查询也可以通过一致性检验实现.定理4.SOIN是可判定的,并且是EXPTIME-Complete问题.证明.SOIN在ALC上增加关系传递、关系逆、绝对数量约束算子,枚举的描述逻辑推理是可判定的,且是EXPTIME-Complete问题[11-12].SOIN可以映射为SHOIQ的一个子集,并且SOIN在基本的ALC描述逻辑基础上仅增加了具体域、关系传递、关系逆和绝对数量约束.而SHOIQ的Tableaux可判定推理算法是EXPTIME-Complete问题[9,13],Page7所以SOIN是可判定的,且是EXPTIME-Complete问题.表1给出了EPMML语言与其它标记语言的表1EPMML与其它语言的比较XMLPMMLRDFEPMML中等OWLLite强OWLDL最强描述逻辑SOINXML(S)+RDF(S)可判定表1中EXPTIME-Complete表示确定型图灵机上指数时间完全问题,NEXPTIME-Complete表示非确定型图灵机上指数时间完全问题.这两类问题的复杂性层次关系是EXPTIME-CompleteNEXPTIME-Complete.数据挖掘是从大量数据中发现潜在的能为决策者服务的规则和知识的过程.描述数据挖掘应用层的数据、算法、规则、模式的EPMML元数据因此庞大且多变.这些特征不容许使用表达能力强而推理能力复杂的描述逻辑如SHOIQ和SHOIN(D)作为语义表达基础.相比OWL,EPMML的推理复杂性大大减小.总的来说,作为面向数据挖掘领域的预测模型标记语言EPMML,它不能使用领域无关的语义本体语言OWL来取代,而需要针对数据挖掘领域的特点,有针对地建立描述逻辑SOIN,在此基础上设计合适的具有语义描述功能的预测模型标记语言.正是因为描述逻辑是EPMML语言的逻辑基础,EPMML是一种具有逻辑推理能力的数据挖掘领域相关的语义本体语言.进一步地,我们明确描述逻辑、本体和EPMML语言三者的关系是:描述逻辑是本体的逻辑基础、EPMML语言是本体的表现形式,这里本体是指数据挖掘领域相关的本体.5.2EPMML元数据一致性检测框架图3给出了基于EPMML的数据挖掘元数据的一致性检测框架.图中箭头表示组件间的流程方向.框架的初始状态是用户输入的基于EPMML的数据挖掘元数据.XML验证过程是检测EPMML元数据语法层的一致性,如果结果不合法,则元数据一致性检测任务终止,并向用户返回不合法的错误信息,以供修正EPMML元数据语法错误.经过XML验证通过的合法EPMML元数据,首先经过映射过程转化为基于SOIN的数据挖掘元数据知识库.然后进入知识推理过程,这一过程的推理原理使比较.作为数据挖掘领域的本体语言,我们并不需要OWL这样表达能力过强、而推理复杂性大的语言.语法基础推理可判定性XML(S)XML(S)XML(S)用描述逻辑的Tableaux算法.经过知识推理的结果返回用户交互界面.如果存在冲突信息,则对合法的EPMML元数据进行语义修正;否则任务结束.5.3一致性检测示例我们在推理示例中选择RacerPro1.90作为推理工具(http://www.racer-systems.com),这是考虑到推理引擎Racer的Tableaux算法是可靠完备的,并且目前RacerPro1.90具备了描述逻辑知识库Tbox,Abox和Rbox的建立界面,且查询推理语言RQL具有良好的表达能力.我们同时选择Protégé作为数据挖掘元数据的构建工具,然后调用Racer推理引擎进行知识推理,以检测数据挖掘元数据的冲突问题.表2给出了SOIN语法、EPMML语法和推理工具RacerPro语法之间的映射关系.(1)语义一致性实例.在PMML语言中,用语言元素AssociationRule来声明一个关联规则,则不允许使用AssociationRules的语言元素.然而,在描Page8述关联规则的EPMML元数据中,我们允许Asso-ciationRule和AssociationRules都表示关联规则元类,这更加符合我们的使用习惯.这个语义匹配可以通过增加元类的匹配来实现.下面的定义可以实现该元类语义的匹配,保证该语义使用的一致性.〈epmml:Classrdf:ID="AssociationRules"〉〈epmml:equivalentClassrdf:resource="#AssociationRule"/〉〈/epmml:Class〉{a1,…,an}SOIN语法⊥1⊥1Cepmml:comlementOfC1C2epmml:intersectionOfandC1..C2C1C2RCrestriction(RsomeValueFrom(C))someRCRCrestriction(RallValueFrom(C))allRCnRrestriction(RminCardinality(n))at-leastnRnRrestriction(RmaxCardinality(n))at-mostnRR-(2)冲突检测实例.在描述关联规则的EPMML元数据中,经过XSD和XSLT验证通过的元数据并不能保证其没有冲突问题,如PMML中存在冗余、引用冲突等等.下面给出描述关联规则的EPMML元数据中描述一条关联规则的EPMML片断,但其违背了关联规则前件和后件交集为空集的语义要求.〈AssociationRulesrdf:ID="AssociationRules_1"〉〈HasAntecedent〉〈Itemrdf:ID="Beer"〉〈BeAntecedentOfrdf:resource="#AssociationRules_1"/〉〈/Item〉〈/HasAntecedent〉〈HasConfidencerdf:datatype="http://www.dmg.org/〈/HasConfidence〉〈HasSupportrdf:datatype="http://www.dmg.org/〈/HasSupport〉〈HasSubsequent〉〈Itemrdf:ID="Beer"〉〈BeSubsequentOfrdf:resource="#AssociationRules_1"/〉〈/Item〉〈/HasSubsequent〉〈HasSubsequent〉〈Itemrdf:ID="Diaper"〉〈BeSubsequentOfrdf:resource="#AssociationRules_1"/〉〈/Item〉〈/HasSubsequent〉〈/AssociationRules〉v3-2/pmml-3-2.xsd#PROB-NUMBER"〉0.8v3-2/pmml-3-2.xsd#PROB-NUMBER"〉0.2关联规则中要求规则的前件项集和后件项集的交集是空集,然而,在传统的PMML元数据中,不能标识这样的语义.在EPMML中,我们可以声明在一个规则中,前件项集和后件项集是分离的,即没有交集.如果元数据中出现了交集,则发生元数据冲突.首先将EPMML元数据映射为描述逻辑知识库.图4是关联规则模型的描述逻辑知识库的TBox层,图中表示概念之间的包含关系,≡表示概念之间的等价关系.然后用RacerPro的查询推理语句nRQL可以发现上述冲突.;;=======A-boxReasoning=======;;ChecktheconsistencyofandAboxw.r.t.aTbox(abox-consistenct?EPMML-data-mining-metadata);;Retrieveindividualsthatsatisfycertainconditions(Retrieve(?x)(?Antecedent)我们得到如下的冲突信息:Error:AboxEPMML-data-mining-metadataisincoherent.这是因为Antecedent和Subsequent两个类是分离的.个体Beer不能同时属于Antecedent和Subsequent.根据发现的冲突,我们可以进一步找出冲突的原因,并修复关联规则模型的元数据.上面的元数据中,去掉后件中的项Beer描述,重新运行查询推理语句,冲突解决.此外,基于EPMML的数据挖掘元数据,还可以进一步得到直观的数据挖掘模型的语义图.图5是在关联规则知识库上作出的基于EPMML的关联规则模型的元类之间的语义图.图中箭头标识元类与元类之间的包含关系is_a.Page96EPMML的应用目前,笔者探索将EPMML语言应用于数据挖掘领域的系统建模,初步的效果是令人满意的.如何构建快速、高效和智能的数据流挖掘系统,实现数据流挖掘算法的动态灵活扩展、数据的透明集成、挖掘结果模式的迭代精化,是当前数据流挖掘研究的一个焦点问题.软件工程已推进企业进入软件“工业化”生产时代,不断采用构件技术是未来软件生产力提高的主要来源[14].数据和算法是数据挖掘不可或缺的两个组成部分.在面向构件的软件体系结构中,我们将数据组件和算法组件作为数据流挖掘系统的两个相辅相成的构件.本节综合分析基于EPMML语言的数据流挖掘系统建模的作用.图6描述了EPMML元数据在数据流挖掘系统的作用,图中箭头表示了系统中的EPMML元数据流向.关于EPMML怎样进行知识表示和推理以及怎样应用到系统的数据管理组件和算法管理组件,读者可以参考文献[15].图6数据流挖掘系统内的EPMML元数据(1)挖掘结果模式的表示与推理.由数据挖掘组件产生的结果模式通过EPMML语言进行描述和及时部署,以方便用户获取以及与其它应用程序共享、交换和集成.EPMML描述的结果模式不仅支持良结构化的知识表示,而且支持模式的推理,这样便于发现模式的内部语义不一致性问题以及进行模式的迭代更新和维护.(2)封装数据服务组件中的数据流资源,实现数据流资源的透明集成.数据流挖掘系统中数据服务组件的元数据收集模块收集当前待处理的数据流资源上下文参数,将这些参数用EPMML语言进行描述形成EPMML元数据,以供数据服务组件中的数据语义服务层来完成数据注册服务,以及数据管理子组件对数据流资源的持续地快速访问.(3)封装算法服务组件中的算法资源,实现算法资源的动态扩展.数据流挖掘系统中算法服务组件将算法提供者提供的各种数据流挖掘算法封装为EPMML语言描述的算法服务,对外提供算法访问接口.当用户有挖掘任务时,将访问服务的命令和数据流资源上下文参数一起发送到算法管理子组件中,然后由领域适配模块解析数据流的上下文参数,再由服务发现模块自动地寻找最适合的数据流挖掘算法或算法组合,由服务调用组合模块组合相关算法,执行数据挖掘任务.此外,EPMML语言在系统之间起着元数据交换的作用.OMG组织通过制定统一建模语言UML、元对象设施MOF、XML元数据交换XMI和公共仓库元模型CWM等标准,来实现模型驱动架构MDA的蓝图,OMG使用可扩展标记语言XML作为CWM元数据生成交换格式的规范.扩展预测模型标记语言EPMML是基于XML的数据挖掘内容描述语言,所以本质上说,EPMML是一种XML语言.图7描述了EPMML作为数据流挖掘系统间的元数据交换语言连接的两个数据流挖掘系统.图中数据流挖掘系统由数据流服务层、算法服务层、挖掘层和用户界面层4个层次组成,EPMMLAPI函数提供了立刻访问EPMML元数据的方法,EPMML解释器提供对EPMML元数据的解释,EPMML推理器提供对EPMML元数据的知识推理.数据流挖掘系统之间的元数据交换采用EPMML语言作为交换规范.图7数据流挖掘系统间的EPMML元数据交换7结论我们不仅需要数据挖掘能够为用户挖掘出数据中潜在的规则和模式,并利用这些模式进行预测,而且,我们希望这些规则和模式能够方便地与其它应用程序共享、交换和集成.要设计数据挖掘领域的语义描述功能的标记语言,不能使用复杂的语义网络本体语言OWL来取代.EPMML语言是在PMML语言的基础上增加了语义描述,兼容了PMML语言的良结构化特点和具有的数据挖掘模型描述能Page10力;同时,约简了PMML语言元素的复杂性并扩展了PMML语言众多语言元素之间的语义.SOIN是EPMML能够支持自动推理的逻辑基础.EPMML在对PMML的扩展时注意两个要点:(1)明确了向PMML增加语义描述是为了使得PMML语言描述的数据挖掘元数据能够支持自动推理,以自动发现这种数据挖掘模型内在的语义冲突问题.(2)针对PMML的特点,向PMML增加语义需要确保增加的语义表达能力与逻辑基础SOIN的逻辑推理能力之间的权衡.目前,我们基于EPMML的元数据描述和自动推理取得的结果是令人满意的,并初步应用EPMML语言到数据挖掘领域的系统建模,本文成果有助于增强数据挖掘元数据标准的稳定性,保障数据挖掘元数据集成的可靠性.进一步的工作将包括完善EPMML对数据挖掘模型的描述功能,以及根据自动推理发现的不一致性问题进行数据挖掘元数据自动修正的研究.
