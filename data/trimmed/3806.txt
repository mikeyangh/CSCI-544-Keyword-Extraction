Page1基于分簇机制的ZigBee混合路由能量优化算法钱志鸿朱爽王雪(吉林大学通信工程学院长春130012)摘要针对ZigBee路由协议没有很好结合AODVjr(AdhocOn-DemandDistanceVectorRoutingJunior)和Cluster-Tree算法的问题,从网络能量优化的角度出发,文中设计了一种基于分簇机制的ZigBee混合路由算法———CLZBR算法,簇间采用AODVjr算法,簇内采用Cluster-Tree算法,并通过计算目的节点的父节点地址等方法,减少网络中冗余的RREQ(RouteRequest)分组,降低能量消耗;同时为了避免簇首由于能量过度消耗而成为失效节点,该算法提出备用节点的概念,当簇首能量过低时代替簇首以保证网络的稳定性.仿真结果表明,CLZBR算法相对ZigBee混合路由算法在包投递率、路由开销百分比和网络剩余能量百分比方面都有明显改善.关键词ZigBee;分簇;AODVjr;Cluster-Tree;物联网1引言随着物联网概念的提出,一直倍受瞩目的Page2高可靠性等特点,在智能家居、智能交通、医疗以及工业自动化等方面都有广泛应用[1].如何优化ZigBee路由、降低能量消耗一直是学者关注的热点,虽然ZigBee技术优势很多,但网络层却长期处于修改和完善中,因此有大量学者对ZigBee路由算法的完善和能量优化展开研究,为物联网的应用与发展奠定了很好的理论基础.Ha和Park等人[2]提出一种ZigBeemesh网络分层路由协议(EHRP),该协议利用了ZigBee地址分层策略,能找到最短的分层路径,从而减少路由的开销.Zhang和Zhou等人[3]提出一种针对路径选择的路由算法,将节点的剩余能量和AODVjr(AdhocOn-DemandDistanceVectorRoutingJunior)路由算法相结合,以便找到能量感知路由和最短路径路由之间的平衡点.刘丹等人[4]提出基于路由节点特性的ZigBee路由算法.Lin和Meng等人[5]提出对路由请求分组的泛洪进行控制,从而减少了RREQ(RouteRequest)分组的泛洪,降低了能量消耗.Lee和Kim等人[6]是将ZigBee网络分成若干个逻辑簇,并使用簇标签来对簇进行标识.Bhatia和Kaushik[7]也将分簇引入ZigBee路由中,但这两种方法每个簇内节点数过少,网络中大多数是RN+节点,没有从根本上解决RREQ分组的泛洪,从而造成了能量的多余消耗.李成法等人[8]认为均匀区划分簇会导致汇聚点附近的节点能量过度消耗而失效,故提出一种非均匀分簇的无线传感器网络路由协议.Shang等人[9]利用实际平台对AODVjr进行了改进,提出将AODV的路由修复RERR加入AODVjr中,通过多路反馈的方式来更好地平衡负载,但同时也增加了控制开销.Ran等人[10]考虑到ZigBee规范中虽然采用AODVjr+Cluster-Tree的混合路由算法,但几乎没有通过平衡二者来提高网络性能的设计方法,并据此提出一种基于数据服务和邻居节点能量平衡的ZigBee网络层路由选择策略.但该方法仅根据数据流的不同,来设置ZigBee协议中路由发现域相关的参数,并没有从路由本身出发来减少能量的损耗.本文在对ZigBee协议规范深入研究后,发现虽然ZigBee网络层采用AODVjr[11]+Cluster-Tree①的混合路由算法,但现阶段几乎都是将AODVjr和Cluster-Tree路由算法分开来进行研究,而且现有的研究及规范中并没有提及如何设置相应参数来进行路由策略的选择,缺少能结合二者优点、使二者平衡的设计方法[10];同时现有论文中大多数都提及到查找公共父节点的概念,但几乎没有人给出如何根据节点地址计算出其父节点地址的具体方法.2ZigBee路由机制ZigBee有3种网络拓扑形式,分别为星状网、树状网和网状网.ZigBee网络中节点可以分为3种类型:ZigBee协调器(ZigBeeCoordinator,ZC)、ZigBee路由节点(ZigBeeRouter,ZR)和ZigBee终端节点(ZigBeeEndDevice,ZED),其中,ZC和ZR属于全功能设备(FullFunctionDevice,FFD),可以与FFD和RFD(ReducedFunctionDevice)进行通信,ZED属于简化功能设备(RFD),只能和FFD进行通信,每个网络中只能有一个ZC,是一个网络的发起者并成为该网络的控制中心,其它节点相应加入该网络.2.1ZigBee地址分配ZigBee网络中的每个节点都有一个64位扩展地址和一个16位短地址,64位扩展地址类似于Internet中的MAC地址,是节点的唯一标识;16位短地址由加入网络的节点的父节点进行动态分配,类似于IP地址,仅用于路由机制和网络中的数据传输.协调器首先规定3个参数:Cm(父节点最多可以连接的子节点数)、Lm(网络的最大深度)、Rm(子节点中最多可以连接的路由节点数),计算网络深度为d的父节点为其子节点分配地址时的偏移量Cskip(d),具体如式(1)所示.Cskip(d)=只有当偏移量大于0时,该节点才具有为其子节点分配网络地址的能力,即允许子节点的加入.具体分配机制如下:(1)协调器将自身地址设置为0,网络深度设置为0.(2)假设父节点的地址为Ap,当其第i个路由节点加入时,分配的地址如式(2)所示,其中1iRm.①IEEEP802.15WorkingGroup.ClusterTreeProtocolPage3(3)当其第k个终端节点加入时,分配的地址如式(3)所示,其中1k(Cm-Rm).(4)通过此种地址分配,节点根据式(4),判断目的节点是否为自己后代节点.(5)假如节点的地址为A、深度为d,地址为D的节点满足式(4),则地址为D的节点是地址为A的节点的后代节点,地址为A的节点根据式(5)确定下一跳节点的地址.D,烄N=A+1+D-(A+1)烅烆(6)如果地址为D的节点不是地址为A的节点的后代节点,则将数据传给地址为A的节点的父节点.虽然这种地址分配方案主要针对树状网络,但更适合中大型网络的簇状结构,也可以利用该种地址分配方案进行地址分配.本文对该种分配方案进行了深度研究,发现可以将地址分为若干地址块,当知道目的节点地址时,能通过轮询的方式计算出目的地址的父节点地址,当源节点路由表中没有目的节点但却有其父节点时,便可直接传递,省去了路由查找过程,节省很多开销,从而节约了能量.2.2ZigBee路由算法ZigBee采用AODVjr+Cluster-Tree的路由算法[12],将路由节点分成两类:RN+节点和RN-节点,其中,RN+节点可以采用AODVjr路由算法,能发起路由发现过程来寻找最佳路由路径,RN-节点则只能采用Cluster-Tree算法.AODVjr算法可以通过路由发现过程找到到达目的节点的最佳路径,但在发起路由发现过程时,需广播RREQ分组,且大多数的RREQ分组是无用的,这样就造成了冗余,同时,转发分组会造成能量消耗,导致节点过早死亡.Cluster-Tree算法简单,且不用存储路由表,降低了路由协议的控制开销和节点能量消耗,但在网络规模过大时,会因为寻找的非最佳路由路径,造成跳数过多,导致路由费用过高,延时过大.AODVjr和Cluster-Tree路由算法都存在着各自的优缺点,虽然ZigBee将二者结合起来,但并没有相应规范中提及如何设置相应参数来进行路由策略的选择,缺少能结合二者优点、使二者平衡的设计方法[10].3CLZBR算法本文为了便于中大型网络的管理,提出一种能很好综合AODVjr和Cluster-Tree算法优点的ZigBee路由算法———CLZBR算法,该算法将分簇技术引入ZigBee网络中,簇与簇之间采用AODVjr算法进行数据的传输,而在簇内采用简单的Cluster-Tree算法.不仅使用最佳路由路径,且减少了冗余的RREQ分组,网内很多节点采用简单的Cluster-Tree算法,从而降低了能量的消耗;为了避免簇首能量消耗过度而造成网路的中断,该算法引入备用节点的概念;本文还针对ZigBee的地址分配方案进行了研究,提出一种根据目的节点计算其父节点地址的方法,减少了网内路径建立的过程,降低了网络的开销,从而节约了能量.3.1CLZBR簇结构的建立CLZBR算法将ZigBee网络分为很多个逻辑簇,节点分为4种类型:簇首、网关节点、簇成员及备用节点.该算法用节点标志位r来判断不同的节点类型,r为0代表簇首(CH);r为1代表网关节点(GW);r为2代表备用节点(AH);r为3代表簇成员.每个簇包含一个簇首,簇首起簇内控制及管理作用,包括簇内节点地址及路由等信息.同时,为了避免簇首由于能量消耗过多而失效,造成网络断开,使每个簇内包含一个备用节点,当簇首能量过低时,代替簇首充当本簇簇首,即当簇首剩余能量低于额定阈值时,退化成簇成员节点,将自身节点标志位r设置为3;备用节点充当本簇簇首,并将自身节点标志位r设置为0.本文对簇的形成做了如下规定:(1)只有协调器和路由节点有权利形成簇,并成为簇首.终端节点不能形成簇,只能加入其父节点所在簇.(2)只有距离簇首为偶数的路由节点能形成新的簇,并成为簇首.这种方式将简化簇形成的同时保持簇的逻辑关系.(3)每个簇内最多只能有两个网关节点.(4)每个簇的网络深度为3(可以自行设置).CLZBR算法将簇的形成过程大致分为7步,图1为CLZBR的一个简单簇结构,接下来将结合图1进行分簇过程的说明.(1)协调器a首先建立网络,形成第一个逻辑簇并成为簇首,簇深度(CLm)限制为3(可自行设置).Page4(2)a将自身的节点标记位r设置为0,其它节点加入该簇,a通过式(2)和(3)为加入的子节点分配16位短地址.(3)a从加入的子路由节点中选择一个剩余能量最大的路由节点b作为本簇的备用节点,选择两个后代节点最多的路由节点c和d作为本簇的网关节点.(4)a在本簇内进行广播,c和d节点收到广播后将自身的节点标记位r设置为1,b节点将自身的节点标志位r设置为2,其它簇内节点将自身的节点标志位r设置为3.(5)a记录簇内所有节点的地址信息.(6)c和d分别在链接的子路由节点中选择两个后代节点最多的节点e和f做为新簇的簇首,并通过上述方法建立新的簇,并不断传递下去,从而形成各个逻辑簇.3.2CLZBR父节点地址的计算本文通过对ZigBee的地址分配方案进行研究,设计出一种根据目的节点地址计算其父节点地址的方法,主要是通过轮询的手段,根据式(4)判断目的节点所在地址块,并最终找到目的地址,当找到相应的地址时,便也计算出其父节点的地址.图2详细地介绍了父节点地址的计算方法,其中字母A为直接父节点的地址,d为当前深度,AL为父节点的后代节点地址下界,AU为父节点的后代节点地址上界,FD为真表示已经找到相应的目的地址,R为路由参数.Ap代表最终计算出的父节点地址,Deep代表目的节点的深度.并使用字母B代表Cskip(d-1)×Rm,C代表Cskip(d)×Rm.图1中标识节点后的数字为根据ZigBee的地址分配方式计算出来的节点地址,接下来将结合图1中对该计算过程进行详细叙述.(1)设未知节点q的地址为D,查看q是否为协调器a的终端节点,如果是,例如节点j,则其父节点地址为a的地址0,自身深度为1.如果不是,进入步(2).(2)从协调器的第一个路由地址块开始查找,如果属于该路由地址块,即1~426,则进入步(3),否则进入步(4).(3)将所在地址块按深度一级一级进行查找,每一级均先查找当前父节点的路由地址块,如属于某地址块则增加一级继续查找,直至找到d,即FD为1,例如节点k需经过4级查找,之后进入步(5);如不属于任何路由地址块则为当前父节点的终端节点,例如节点l经过5级查找后为节点k的终端节点,l的父节点即为k节点,之后进入步(5).Page5(4)对协调器其它地址块进行查找,直至找到所在地址块,例如节点i属于第四地址块,即1279~1704;节点k和l属于第二地址块,即427~852,之后进入步(3).(5)得出计算结果,q的父节点地址为当前父节点的地址,即最终字母A的值,深度为字母D的值,例如节点i只经过1级查找,其父节点地址为0,自身深度为1;节点k经过4级查找,其父节点地址为429,自身深度为4;节点l需经过5级查找,其父节点地址为430,自身深度为5.这种方法主要是针对当源节点有数据发送给目的节点时,发现路由表项中并没有包含目的节点但却有其父节点地址的现象,源节点就可以直接将数据发往目的节点的父节点,这样当父节点收到数据之后,便可以采用Cluster-Tree的方式将数据传至目的节点.该方法省去了路由发现过程,不仅减少了冗余分组、节省了网络的开销,从而也降低了延时和能耗.3.3CLZBR数据帧的传输簇如果选择过大便会失去分簇的意义,一般来说,一个簇都不会特别的大.在簇内使用AODVjr算法相对耗能多,同时网络中如果过多的使用RN+节点,将会产生大量的RREQ分组冗余,从而造成能量的严重损耗,所以CLZBR算法将簇的自身深度限制为3(可以根据实际需要进行设置),并选择在簇与簇之间使用AODVjr算法进行传输,而簇内使用Cluster-Tree算法进行传输,即簇首、网关节点和备用节点采用RN+节点,但需对备用节点进行限制,平时只能采用Cluster-Tree算法,只有当其充当本簇簇首时,才可以采用AODVjr算法,其它路由节点采用RN-节点.(1)源节点所在簇源节点所在簇的节点在接收到数据帧之后的处理流程具体如图3所示.当源节点有信息要进行传输时,源节点首先通过式(4)判断目的节点是否是自己的后代节点,若是,传向该分支的下一跳节点,若不是,则判断自身节点类型,并根据节点类型的不同采取不同的处理方式.源节点所在簇成员在收到数据帧或者发送数据帧时,只能采用Cluster-Tree算法,不能存储路由表,需首先判断自己是不是目的节点.若是,接收数据;若不是,判断目的节点是否是自己的后代节点,假如是,传向该分支的下一跳节点,否则节点根据图3源节点所在簇节点对数据帧的处理流程Cluster-Tree算法进行数据的转发,将数据帧发往其父节点,最终传至本簇簇首.源节点所在簇网关节点在收到数据帧或者发送数据帧时,首先判断自己是不是目的节点.若是,接收数据;若不是,判断目的节点是否是自己的后代节点,假如是,传向该分支的下一跳节点,否则直接将数据帧传给本簇簇首(深度较低的簇首).源节点所在簇簇首在收到数据帧或者发送数据帧时,首先判断自己是不是目的节点.若是,接收数据;若不是,判断目的节点是否是自己的后代节点,若是,传向该分支的下一跳节点,若不是,簇首暂存该数据信息,查看路由表是否包含目的节点地址条目,如果有,直接将数据按照指定路径传送给目的节点,如果没有,根据目的节点地址计算其父节点的地址,查看路由表是否包含其父节点地址条目,包含则直接将数据传给目的节点的父节点,不包含则发起路由发现过程来寻找到达目的节点的最佳路径.(2)目的节点所在簇目的节点所在簇的节点在接收到数据帧之后的处理流程具体如图4所示.Page6图4目的节点所在簇节点对数据帧的处理流程当信息传至目的节点所在簇簇首时,簇首对比自己已存的簇内节点地址信息,发现有目的节点地址信息,该簇首暂存数据信息,并将数据传至目的节点所在分支,最终传至目的节点.假如是源节点通过计算含有目的节点的父节点地址信息,将数据发给目的节点的父节点,父节点直接将数据信息交付给目的节点;否则目的节点所在簇的簇分支在收到数据帧之后,节点首先判断自己是否是目的节点.若是,接收数据;若不是,利用式(5)将数据传至目的节点所在分支的下一跳节点,直至发送到目的节点.(3)路由发现过程由于簇内使用Cluster-Tree算法进行传输,所以不能发起路由发现过程及转发RREQ分组,本算法让簇与簇之间使用AODVjr算法,即簇首及网关节点采用RN+节点,普通簇成员只能采用简单的Cluster-Tree算法,因此可以减少RREQ分组的泛洪,从而降低能量的消耗.当目的节点与源节点不属于同一个簇时,源节点将信息传至本簇簇首,该簇首发起路由发现过程,以寻找到达目的节点的最佳路径.当节点接收到RREQ分组时,具体的处理流程如图5所示.RREQ分组只能在节点标志位为0或者1的节点,即簇首和网关节点之间进行转发.节点在收到RREQ分组之后,首先判断自身节点类型,当簇首收到RREQ分组之后,轮询已存储的簇内节点地址信息,判断目的节点是否是本簇节点.若是,则向源节点所在簇簇首发送RREP(RouteReply)分组;若不是,则进行RREQ分组的转发.(4)路由回复过程节点接收到RREP分组后处理流程如图6所示.当节点发起路由发现过程时,广播RREQ分组,收到RREQ分组的节点在转发RREQ分组的同时会保存到达上一跳的反向路由,最终当目的节点所在簇簇首接收到RREQ分组时,反向路径已经建立,该簇首只需按照其路径向源节点所在簇簇首发送RREP分组即可.当源节点所在簇簇首接收到来自于多条路径的RREP分组时,簇首选择路径成本最小的路径作为到达目的节点的路由.当路径成本有多个最小的路径时,簇首选择最早接收到的RREP分组所对应的路径.源节点所在簇簇首在收到RREP分组之后,将暂存的数据信息按照找到的最佳路径发往目的节点所在簇簇首,目的节点所在簇簇首暂存该数据信息.同时,为了节省能量,避免重复的工作,源节点Page7所在簇簇首会在收到RREP分组之后将目的节点和目的节点所在簇簇首的地址信息均保存至路由表,当本簇内的成员想往目的节点发送信息时,可以直接将数据发给簇首,簇首按照之前的路径进行传输,不用再触发路由发起过程,以达到簇内路由信息共享.4仿真分析为了有效地评价CLZBR算法的性能,本文采用NS2,利用IEEE802.15.4的PHY层和MAC层来实现网络层的仿真,本文将CLZBR算法与ZigBee经典路由算法ZBR分别在节点数为10~100个的不同场景下进行了仿真比较:包括分组投递率、路由开销百分比及网络剩余能量等指标.所有仿真数据都是对网络独立运行50次之后取的平均数值,仿真时随机分布节点,随机并发8个数据流,平均速率为0.5packets/sec,其它仿真参数设置如表1所示.网络范围/m×m通信半径/m节点初始能量/J仿真时间/s数据流类型大小/字节4.1分组投递率分组投递率是衡量网络拓扑成功接收数据分组的性能指标,可以反应网络传输的可靠性,即分组投递率越大,网络的可靠性越高.分组投递率是目的节点接收到的数据分组个数与源节点发送的数据分组个数的比值.具体计算公式如式(6)所示:图7为CLZBR与ZBR算法分组投递率的比较,可见随着节点数目的增多,导致网络中数据分组和控制分组增加,分组投递率都有所降低,但是由于CLZBR算法减少了网内的RREQ分组,降低了数据传输的碰撞,所以性能相对好于ZBR算法.4.2路由开销百分比路由开销指的是网络中路由控制分组的数目,而路由开销百分比更能反应网络中的开销情况,百分比高的网络能量消耗也大.主要计算方法是路由发现及路由回复等控制分组的数目除上成功接收的数据分组个数.具体计算公式如式(7)所示:图8为CLZBR与ZBR算法在不同节点数目下路由开销百分比的比较情况,从图中可以看出,随着节点数目的增多,导致路由控制分组增加,路由开销百分比呈上升趋势,由于CLZBR算法限制了发送RREQ分组的节点种类,同时采用父节点地址计算法减少了不必要的路由发现过程,从而大大减少了网络中RREQ分组,因此路由开销百分比明显小于ZBR算法.4.3剩余能量百分比剩余能量百分比可以有效地衡量算法的能量使用情况,剩余能量百分比越高,节能效果越好.剩余能量百分比指的是网络中剩余的能量与网络初始能量的比值,具体计算公式如式(8)所示:当仿真结束时,图9为CLZBR与ZBR算法剩余能量百分比的比较,可以看出,随着节点数目增多,参与转发的节点随之增加,路由控制和数据转发分组大量增多,节点消耗的能量相对增加,剩余能量百分比有所降低,且随着节点数增多趋势趋于平Page8缓.由于CLZBR算法减少了网络中的RREQ分组,同时采用父节点地址计算法从而节省了很多能量的开销,降低了整体能量消耗,所以网络剩余能量始终高于ZBR算法.5结束语目前,ZigBee被认为是最适合传感器网络接入端的短距离无线通信技术,对ZigBee的研究将为物联网的应用与发展奠定一定基础,而网络层的能量优化一直是ZigBee技术研究的重点.本文在对ZigBee路由能量优化进行深入研究的基础上,提出了CLZBR路由算法,它可以很好地结合AODVjr和Cluster-Tree算法的优点.该算法基于分簇机制,规定簇与簇之间采用AODVjr进行通信、簇内采用Cluster-Tree算法,限制了RN+节点的数量;并通过计算父节点地址的方式,减少了路由发现过程.这些措施大大减少了网内冗余的RREQ分组,降低了能量的消耗;同时CLZBR算法提出的用备用节点来代替能量过低的簇首的方法,虽然增加了一些存储空间和控制开销,但平衡了节点之间的能量分配,从而保证了网络的稳定性.CLZBR算法可以有效地平衡AODVjr和Cluster-Tree算法,分簇的结构更适合于中大型网络,其提高了ZigBee网络的整体性能.
