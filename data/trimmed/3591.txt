Page1BLAKE算法的硬件实现研究刘宗斌荆继武夏鲁宁(中国科学院研究生院信息安全国家重点实验室北京100049)摘要随着对MD5和SHA1攻击方法的提出,美国国家标准技术研究所(NIST)组织启动了SHA-3的征集计划,目前已进入第3轮.BLAKE算法进入了最后一轮竞赛,文中首先综述了BLAKE算法从提交到目前为止在硬件评估方面的状况.在此基础上优化了BLAKE压缩函数在FPGA上实现的关键路径,并在FPGA平台上实现了BLAKE算法.和现有的BLAKE算法在FPGA上实现的吞吐率相比,文中实现结构的吞吐率又有提升.关键词SHA-3;BLAKE;FPGA;散列函数1引言Hash函数(也叫散列函数)可以将任意长度的输入经过变化以后得到固定长度的输出.Hash函数的这种单向特征和输出数据长度固定的特征使得它可以生成消息或者数据块的“指纹”,因此在密码协议、数字签名、完整性认证、数字签名等领域有着广泛的应用.因为这样广泛的应用需求,Hash算法的研究和标准的制定一直是学术界和各个国际标准化组织研究的热点.标准SHA-0,在不久后的两年,新的标准SHA-1被提出来,SHA-1改进了第1版算法中的一些设计问题.直到20世纪末,SHA-1还没有遇到实质性的攻击.SHA-1被广泛地应用到了TLS、SSL、IPSec、SSH、PGP等安全应用中.跨入21世纪,随着对MD5和SHA-1碰撞攻击研究的深入[1],美国国家标准技术研究所(NIST)于2002年推出了SHA-2的标准,到目前为止还没有行之有效的攻击方案.在SHA-2应用几年之后,NIST又推出了SHA-3[2]的征集计划,用来扩展SHA-2的标准.截至2008年8月31号,NIST收到64份算法,其中51个算法进入了第1轮的评测.经过第1轮的评测,2009年6月在1993年,NIST公布了第1版的Hash算法Page2只有14个算法进入了第2轮的评测.目前正在进行第3轮的算法评测,有5个算法进入了第3轮的评测,第3轮也是最后一轮的评测,最终的SHA-3算法将从其中产生,这5个算法分别为BLAKE、Grstl、Keccak、JH和Skein.对于SHA-3算法,除了安全性上要保证高于SHA-2外,还很关注算法的效率,算法一方面要能够应用在海量数据的高速处理环境当中,也要能够应用到资源运行环境受限的嵌入式系统当中,要求算法具备较高的灵活性,能够满足更加广泛的应用需求.本文研究的BLAKE算法是SHA-3评测的最后一轮5个候选算法之一,具有比较强的代表性.在SHA-3评测标准中,硬件实现是评价算法有效性和实用性的关键指标之一.针对ASIC平台,学者们已经提出若干实现方案[2-5].针对目前应用比较广的可编程硬件平台FPGA,学者们也从不同的角度对算法的性能和资源消耗等方面给出了评估[6-13],本文将在后续章节深入分析目前的FPGA实现方案,并在此基础上,优化BLAKE算法中压缩函数的关键路径,基于改进的压缩函数结构在FPGA平台上实现了BLAKE算法,达到更高的吞吐率.本文第2节主要对BLAKE算法结构进行简单的介绍;第3节主要对目前针对BLAKE算法的硬件实现做简要的综述;第4节描述本文给出的FPGA的实现方法和实现架构;第5节对分析结果进行比较和讨论;最后一节总结全文.2BLAKE简介2.1BLAKE简介BLAKE[3]是AumassonJean-Philippe等学者设计的SHA-3的候选算法,该算法已经顺利进入了第3轮的评测,成为SHA-3最后5个候选算法之一.这几位学者2008年首次提交该算法,经过评估后,于2011年1月提交修正版.BLAKE的设计者没有从基础的架构开始设计算法,而是采用并改进了目前研究比较成熟的结构HAIFA和ChaCha,综合其优点而设计了新一代的Hash算法.这样的设计结构,一方面使得算法的基本结构是经过大量论证的安全的结构;另一方面,对密码分析者而言,可以在原有的工作基础上进一步对采用的结构的安全性进行分析.因此,有众多理论攻击的方案提出来讨论BLAKE的安全性[15].BLAKE设计者除了考虑NIST征集算法时提出的具体要求外,还考虑了算法的其它方面,例如:算法是可并行的,算法能够很好地在资源和速度上取得平衡,在不同的应用环境中,算法能够以不同的体积和速度呈现,这样的特点很好地扩展了算法的应用领域.尤其是,该特点使得算法更容易部署到轻量级的嵌入式环境当中.BLAKE算法①是一个Hash函数系,包括了BLAKE-28、BLAKE-32、BLAKE-48和BLAKE-64,如表1所示.算法字宽消息分块摘要参数BLAKE-2832<264512224128BLAKE-3232<264512256128BLAKE-4864<21281024384256BLAKE-6464<212810245122562.2BLAKE-32算法描述本节以BLAKE-32为例对BLAKE算法进行简单的介绍,其它BLAKE函数和算法的具体信息可以参见算法说明文档①.BLAKE-32算法操作字是32-bit,返回32字节的散列结果.BLAKE算法只用到了模232的加法、异或运算和循环移位操作,而这些运算无论在硬件和软件上都比较容易实现.和其它的Hash函数类似,BLAKE算法的第1步也是对散列的数据进行分块与填充.完成分块步骤后,就是具体的操作,下面将具体描述BLAKE算法的执行过程.由八组向量构成:常量(Constant).BLAKE-256的初始化向量和SHA-256一致,犐犞0=6A09E667,犐犞1=BB67AE85,犐犞2=3C6EF372,犐犞3=A54FF53A,犐犞4=510E527F,犐犞5=9B05688C,犐犞6=1F83D9AB,犐犞7=5BE0CD19.除此之外,BLAK-256还使用了16个常量:c0=243F6A88,c1=85A308D3,c2=13198A2E,c3=03707344,c4=A4093822,c5=299F31D0,c6=082EFA98,c7=EC4E6C89,c8=452821E6,c9=38D01377,c10=BE5466CF,c11=34E90C6C,c12=C0AC29B7,c13=C97C50DD,c14=3F84D5B5,c15=B5470917.①BLAKE算法的描述文档SHA-3proposalBLAKE.http:Page3成,分别是压缩函数(CompressionFunction).BLAKE-32的压缩函数的输入由4组变量构序列输入:h=h0,…,h7;消息块:m=m0,…,m15;参数:s=s0,…,s7;计数器:t=t0,t1.压缩函数的输出是新1轮的h:初始化(Initialization).16个初始化变量v0,…,v15,采用如下的算法初始化:v0v1v2v3烄v4v5v6v7v8v9v10v11v12v13v14v烆其中初始化变量构成了一个4×4的矩阵.随后的算法的数据变换就是针对这个数据矩阵的变换.轮函数(RoundFunction).在v初始化以后,压缩函数需要循环迭代14轮..图1G函数结构示意图整个轮函数的过程可以描述为[4]每轮需要计算:G0(v0,v4,v8,v12),G1(v1,v5,v9,v13),G2(v2,v6,v10,v14),G3(v3,v7,v11,v15),G4(v0,v5,v10,v15),G5(v1,v6,v11,v12),G6(v2,v7,v8,v13),G7(v3,v4,v9,v14).每轮Gi(a,b,c,d)是如下所示的变换:其中G0,G1,G2,G3可以并行计算,因为每个G函数分别计算V矩阵的一列,称这步计算为列变换步骤(columnstep).同理,剩下的G函数分别计算不同斜线上的值,这步也叫做对角线变换(diagonalstep).因此,这些G函数也可以并行的计算.G函数的示意图以及列变换和对角线变换步骤如图1和图2所示.H0··=IVFor(i=0;i<N;i++)BEGINhi+1=compress(hi,mi,s,ti)END终止步骤.当轮迭代计算结束后,最终的h可从下面的式子获得Page4前面简要地描述了BLAKE算法.BLAKE算法结构简单,易于实现,算法在设计压缩函数的时候也特别考虑了硬件实现的特点和需求,设计了可以灵活扩展实现的轮函数,很好地为硬件灵活实现提供了可能性.3BLAKE算法硬件实现现状目前,对于密码算法的硬件评估有两种评估平台,一是ASIC的评估平台,二是低成本的FPGA评估平台.FPGA相比ASIC而言,可编程,能够反复擦写,这样的平台更加适合于算法的前期验证测试和评估.所谓FPGA(FieldProgrammableGateArray),即现场可编程门阵列,它是在PAL、GAL、CPLD等可编程器件的基础上进一步发展的新一代可编程逻辑器件.它是作为专用集成电路(ASIC)领域中的一种半定制电路而出现的,既解决了定制电路高成本的不足,又克服了原有可编程器件门电路数有限的缺点.目前最大的FPGA器件已经有上千万门的容量.而且FPGA在内部集成了嵌入式处理器、DSP、乘法器、RAM等常用单元的固件结构.这样一方面可以通过这些固有的硬件单元简化系统的设计并节省可编程的逻辑资源;另一方面在系统的关键路径中使用这些固有的资源后,可以提高处理的速度.这些特性决定了FPGA非常适合于算法ASIC设计的前期开发验证,或者以后直接作为FPGA的IP核来使用.基于这样的考虑,本文选用了FPGA作为算法测试验证的硬件评估平台.一般以FPGA作为算法的评估平台,主要使用3个参数对比算法的性能.一是吞吐率,二是资源消耗,三是吞吐率和资源消耗的比值.下面对前面两个参数做简单的解释.在硬件实现中,吞吐率(Throughput)按照下面的公式计算[11]:T=Bitsinamessageblock×FmaxBitsinamessageblock指每次处理数据块的比特数,也就是系统每次能够处理的数据块的大小.Fmax指系统能够工作的最大频率.毕每一个数据分块需要消耗的系统周期数.Clockcyclespermessageblock指系统处理完由于算法固定后,处理的数据单元大小固定,所以优化主要集中在系统工作频率和处理数据块所需要的周期数两个方向.对于资源消耗,在FPGA平台,主要指标是算法结构占用的FPGA的基本单元的个数.例如在XilinxFPGA中,最基本的单元Slice,而目前最新的FPGA中也引入了新的固有硬件资源,如专用乘法器、BlockRAM、FIFO等,在算法结构中使用这些固有的资源会大量节省Slice的数量,也会提升系统的最大工作频率.所以目前部分文章也使用FPGA固有的计算资源来提升系统的性能.另外一个针对面积优化的思路是充分发挥FPGA里面固有资源的特点.例如,XilinxFPGA的LUT早期是四输入的,Virtex5之后LUT使用了六输入.四输入的LUT可以实现4个变量的全函数,六输入的LUT可以实现六输入的全函数.以四输入的LUT为例,如果能将算法中大于四输入的函数经过逻辑变换减少变量的个数或者拆分成四输入的形式,这样就会充分地发挥LUT的作用,一方面节省LUT资源的消耗,另外一方面由于减少了级联的LUT的数量,可以提高系统的运行速度.总之,在深入理解FPGA底层资源的基础上,调整算法的实现结构形式,提高对资源的利用率,从而降低资源消耗和提高系统的工作频率.目前针对BLKAE算法的硬件实现有两个方向,一个是通过并行计算最大限度地提高算法的吞吐率,发挥算法的最大的计算效能.另外一个方向是用尽量少的硬件资源来取得最优的面积利用率,让算法能够消耗最少的硬件资源,并且取得合适的吞吐率.这里首先分析BLAKE算法在硬件实现中的关键路径,即最为耗时的步骤,然后综述目前各方案针对关键路径提出的优化方案和各自的优缺点.对于初始化步骤,BLAKE使用了异或运算和赋值操作,这些运算在整个BLAKE算法实现过程中是耗时最少的运算,资源消耗相对于其它的运算模块也比较少.BLAKE算法的终止步骤和初始化步骤类似,只用到了异或运算,所以优化的方法和初始过程类似.就整个算法来看,最为复杂和耗时的操作就是中间的轮函数,首先轮函数需要十几轮的迭代计算,再次,每轮运算使用的压缩函数也是耗时、耗资源的Page5关键步骤.所以,目前大多数的文章的实现和优化方案都集中在轮函数的处理过程中.到目前为止关于BLAKE算法的硬件评估最为全面的是由算法设计者在提交的算法设计报告①中给出的算法的硬件评估部分.设计者对BLAKE算法的硬件效能分别从ASIC和FGPA两个平台给出了设计方案并提出了优化的思路.这里首先详细地阐述算法设计者提出的实现和优化思路.根据BLAKE算法本身的结构,设计者给出了通用的硬件设计架构.架构主要由两大模块构成.第1个主体模块是初始化和终止模块,从算法的描述可以看出,这两个模块的实现可由纯组合逻辑实现.算法在这里的优化空间很小,所以算法设计者没有给出这部分的优化方案.第2个主要模块是轮函数,轮函数主要是由压缩函数构成.算法作者从算法设计的角度出发,给出了4种架构来实现轮函数,主要的区别是在一轮运算中并行实现的压缩函数G的数目.报告中给出了同时实现8G、4G、1G和1/2G压缩函数的评估结果,也就是在一次轮函数的迭代过程中计算几次压缩函数.从第2节对算法的描述可以看出,所有的列变换可以并行执行,所有的对角线变换也可以同时执行.如果采用8G的模式,轮函数的一轮的路径就会变长,因为对角线变换必须等到列变换结束后才能执行,所以采用8G结构后,系统的工作频率会降低,而且消耗的硬件资源随之变大.4G结构使用了4个压缩函数分两次完成列变换和对角线变换.1G结构需要循环调用8次一个压缩函数G完成列变换和对角线变换.为了进一步地节省资源,作者还给出了1/2G的结构.通过压缩函数的计算公式可以看出,一次压缩函数的计算可以通过同样的电路复用两次完成.通过复用压缩函数,可以节省压缩函数消耗的硬件资源.并行实现的压缩函数越多,算法处理数据的吞吐率越大,但由于需要多个压缩函数同时工作,系统消耗的硬件资源也随之上升;反之,若算法减少并行实现的压缩函数的数量,虽然减少了系统对硬件资源的消耗,但算法的效能也随之降低.相比高度的并行结构,使用压缩函数越少,系统的调度和控制会越复杂,这意味着系统需要更多的逻辑资源完成调度工作.从算法作者给出的评估结果看,如果用系统的吞吐率和消耗的硬件资源的比值来描述系统的效能,4G结构表现出了最好的系统效能,而8G结构达到了最高的吞吐率.CHES2010国际会议的文章[3]在ASIC平台上评估了通过SHA-3第1轮筛选的14个Hash算法中的12个.该文章设计了统一评估标准,并在这个标准下对所选的12个算法给出了评估报告.针对BLAKE算法,文章使用的架构是8G结构和1G结构,文章给出了ASIC工艺下,各个算法在高、低吞吐率结构下的性能比较.而文献[4]专门针对BALKE算法在ASIC平台上做了详细的评估与实现,文章扩展了算法作者提出的方案,提出了两种高速实现的方案,但是基本的架构依然是8G和4G结构.文章在设计压缩函数的结构的时候考虑了消息和常数的异或值可以预计算的特点,对关键路径做了优化,比算法设计者给出的实现方案少了一个32位加法的延时.文章分别在0.18μm、0.13μm和90nm的ASIC工艺下评估了优化后两种架构的吞吐率和资源消耗.文献[14]给出了目前在FPGA平台上最为小巧的BLAKE的设计方案,相比于目前其它的实现方案,作者在深入分析FPGA底层结构的基础上,调整了压缩函数的实现结构,使得FPGA资源的利用率最大.对于控制电路,文章的思想是通过FPGA的固有资源双口ROM来存储控制指令,代替了传统设计中使用逻辑资源搭建状态机控制计算的方案,从而大幅降低了系统控制单元对FPGA可配置逻辑资源的消耗.主要通过这两种方法,使得文章设计的架构比其他的一些实现节省了大约90%的可配置逻辑资源.由于复用压缩函数,提高了轮函数计算需要的迭代次数,降低了系统的吞吐率,但在轮函数的设计上作者利用了流水线的结构,从而提高了系统的工作频率,使得系统的吞吐率并没有降低,仍有225Mbps.这篇文章是目前吞吐率和消耗资源的比值最高的设计结构.文献[7]对BLAKE算法以FPGA为硬件平台,分别实现了BLAKE-28、BLAKE-32、BLAKE-48和BLAKE-64并对其实现的算法在吞吐率、资源消耗和最大工作频率方面做了横向比较.文章实现的算法结构依然采用4G结构,而文章实现的吞吐率相比其他文章的结果比较低,只有158Mbps.CHES2010上的另一篇文章[8]搭建了统一的FPGA平台,评估了包括BLAKE在内的14个在SHA-3第1轮筛选中胜出的算法.文章没有给出BLAE具体的实现方案,吞吐率达到了2.6Gbps.文献[11]也评估了这14个算法在不同FPGA平台上的效能,文章给出的BLAKE的吞吐率只有1.6Gbps.Page6从目前对BLAKE算法的硬件评估的文章可以看出:评估的重点集中在两方面,一方面是评估算法在硬件平台上能达到的最高的吞吐率,这是因为硬件实现算法的一个主要目的是在某些苛求的应用中,硬件模块可以达到软件所不能达到的处理速度;另一方面是算法在实现的时候可以灵活地控制吞吐率和消耗资源的比,主要原因是扩大算法的应用领域,例如,随着片上系统(SOC)的发展,可以通过协处理器的方式提高SOC系统的整体处理效能而不需要使用高端的CPU,从而节省硬件开发成本.4BLAKE算法的FPGA实现4.1BLAKE实现BLAKE的实现主要有3个模块,首先是初始图3BLAK算法的实现结构图4.3系统说明控制单元(ControlUnit)的设计,采用最为简单的状态机结构来实现,控制整个算法的工作流程.初始化模块和最后的输出模块,负责算法数据的初始化和最后结果的输出,由于逻辑功能简单,主要是异或操作,在方案设计的时候,不需要额外的考虑.压缩函数的实现是设计的核心.根据对算法的分析,设计者在设计算法的时候,已经很好地考虑了硬件实现时,资源和速度平衡的问题.所以在实现的时候,只要根据实际应用的需求,调整系统的结构就可以动态灵活地调整算法的速度和资源的消耗情况.化步骤,然后是轮函数,最后是终止步骤.按照上述文章给出的评估结果,BLAKE算法实现中,吞吐率最高的是8G结构.由于硬件实现密码算法的一个最主要的目的是为了突破软件计算能力的瓶颈,所以算法在尽量节省资源的情况下所能达到的最大吞吐率是评估硬件实现的一个重要指标.为了进一步提高系统的吞吐率,本文在文献[4]的基础上,对压缩函数的关键路径继续优化,并基于优化后的压缩函数,采用8G结构实现了BLAKE算法.4.2系统框图图3所示为BLAKE算法的整体结构框图.目前实现的主要区别就在于控制逻辑和轮函数.在算法设计之初,压缩函数的结构就可以满足各种处理速度和资源消耗的需求.所以在实现的时候,关键之处在于压缩函数的优化.首先,如果不考虑资源消耗,为了最大限度地提高系统的吞吐率,可以同时实现8个压缩函数,其中前4个压缩函数用来实现列变换,剩余的4个压缩函数实现对角线变换.在这种工作模式下,系统可以在一个时钟周期内完成整个压缩函数的变换过程,系统达到了运算速度的最大值,但同时也需要消耗更多的硬件资源.其中每个压缩函数的逻辑结构和资源消耗是一样的.若选定了压缩函数的数量,则提高系统的吞吐率,依赖于对压缩函数的优化.首先分析BLAKE算法中的关键路径.在图4中用虚线圈出了压缩函数的关键路径.Page7图4G函数关键路径示意图虽然压缩函数计算的轮数相比于SHA-2有很大的减少,但从图4可以看出BLAKE算法的关键路径很长,有6个32-bit的加法,4次异或操作,4次循环移位操作.这里需要解释为什么是4个异或操作.因为(mσγ(2i)cσγ(2i+1))操作相比32-bit的加法,计算延时要小很多.同理(mσγ+1(2i)cσγ+1(2i+1))里的异或操作也不计算到关键路径中.文献[4]对压缩函数的关键路径第1次做了优图5G函数关键路径优化方案1从图5可以看出,在(mσγ(2i)cσγ(2i+1))之后,关键路径上会产生3个数,这样我们可以考虑用CarrySaveAdder(CSA)将3个加法优化成为2个数的加法和一个逻辑门的路径长度.经过这样的变换之后,压缩函数的路径可以进一步变短.这里需要强图6G函数关键路径优化方案2化.这里首先具体描述文献[4]的优化思路.作者发现每次轮函数计算需要的常数和消息块的异或值可以预计算,不依赖于轮与轮之间的关系.而a,b,c,d4个变量在轮与轮之间是互相依赖的.基于此作者将(mσγ(2i)cσγ(2i+1))做了预计算,这样每一轮中的关键路径就少了一个加法.图5给出了文献[4]的优化后的G函数的框图.调的是在FPGA中LUT一般是4输入或者6输入,我们使用的Virtex5的LUT是6输入的,a+b+(mσγ(2i+1)cσγ(2i))这样的表达式用CSA来搭建时,只需要一层LUT以及一个32位加法的延时.经过修改后的压缩函数的结构如图6所示.Page8继续分析使用8G结构的关键路径,因为在8G结构中,需要两个G函数串联,可以从上面的G函数的关键路径中发现,一个G函数的关键路径从a开始到b结束,那么意味着只有在第1个G函数的b得到之后,才能开始下一轮的计算.所以8G结构中,两个G函数级联就没有了继续优化的空间.其次,使用8G结构与4G结构相比,8G接口的控制逻辑比4G结构的控制逻辑简单,但由于两个压缩函数级联,使得系统的最大工作频率比4G结构低.5实现结果和分析我们使用Xilinx公司的Virtex-5作为评估平台,使用Xilinx的ISE11.5对设计方案进行综合仿真.在比较消耗资源的时候,本文也采用了FPGA的逻辑资源Slice作为衡量单位.本文8G结构Virtex51711773581BLAKE-32-8G①Virtex51610673103SHA-2[7]BLAKE[8]从表2可以看出,作为SHA-3的候选算法之一,BLAKE在性能上和SHA-2相比,有了很大的提高.本文主要从吞吐率的角度对BLAKE做了评估.综合目前BLAKE算法的实现方案可以发现,BLAKE算法具有很高的灵活性,在各种不同需求的应用中,可以达到硬件资源消耗和吞吐率的平衡.6结束语随着嵌入式系统的发展,对于密码算法的实现有了更高的要求,一方面要求算法能够在高速的环境中提供高的吞吐率;另一方面,在嵌入式系统中,由于资源和能量的受限,需要算法可以灵活的调整,满足受限资源环境的需求.BLAKE算法作为SHA-3第3轮评估的候选算法之一,本文首先综述了其硬件评估的现状,大多数是通过统一的标准实现了5个候选算法,通过比较在这个标准下各个算法的性能表现.本文针对硬件实现具有高吞吐率的特点,通过对BLAKE算法的压缩函数的关键路径的改进,在FPGA硬件平台上对BLAE算法的高效性做了评估.
